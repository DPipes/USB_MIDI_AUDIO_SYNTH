
#include <stdio.h>
#include "system.h"
#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"
#include "sys/alt_irq.h"
#include "include/hidboot.h"
#include "include/usbhub.h"
#include "include/sgtl5000.h"
#include "include/usbh_midi.h"
#include "include/audio_synth.h"

// Satisfy the IDE, which needs to see the include statement in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
USBH_MIDI  Midi(&Usb);

//pointer to instance structure
ALT_AVALON_I2C_DEV_t *i2c_dev;

void MIDI_poll();

void onInit()
{
  char buf[20];
  uint16_t vid = Midi.idVendor();
  uint16_t pid = Midi.idProduct();
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
  printf("%s\n", buf);
}

void MIDI_setup()
{
	if (Usb.Init() == -1)
		printf ("Error\n\r");
	printf ("USB Started\n\r");

	// Register onInit() function
	Midi.attachOnInit(onInit);
}

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll(bool* ped_flip)
{
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
	switch (bufMidi[1] & 0xF0) {
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
		case NOTE_OFF:
		case NOTE_ON:
			//if (vel) printf("Note On\t");
			//else printf("Note Off\t");
			//printf("%X\t", bufMidi[1]);
			//printf("%X\t", bufMidi[2]);
			//printf("%X\n", bufMidi[3]);
			set_note(channel, ctrl, par);
			break;
		case CONTROL_CHANGE:
			//PEDAL CONTROLS HERE
			ctrl = bufMidi[i+1];
			par = bufMidi[i+2];
			long_par = par;
			switch(ctrl) {
				case MOD_WHEEL:
					break;
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
					break;
				case SUSTAIN_PEDAL:
					if(*ped_flip) long_par = ~long_par;
					set_adsr(SUS, long_par);
					break;
				case PEDAL_FLIP:
					*ped_flip = par;
					break;
				default:
					break;
			}
			i += 2;
			break;
		case PITCH_BEND:
			break;
		default:
			break;
	}
  }
}

int main() {

	//Initial ADSR values
	alt_u16 att_m_seconds = 10;
	alt_u16 dec_m_seconds = 30;
	alt_u16 sus_m_seconds = 3000;
	alt_u16 rel_m_seconds = 80;
	float peak_att = 1.9;
	float peak_sus = 0.8;
	bool ped_flip = 0;

	printf("Initializing SGTL5000...\n");

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");

	//set up registers
	SGTL5000init(i2c_dev);

	printf("Starting audio...\n");
	SGTL5000audio_on(i2c_dev);
	SGTL5000status(i2c_dev);
	printf("Audio running\n");

	printf("Initializing ADSR...\n");
	calc_adsr(att_m_seconds, dec_m_seconds, sus_m_seconds, rel_m_seconds, peak_att, peak_sus);
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
		if ( Midi ) {
			MIDI_poll(&ped_flip);
		}
	}
}
