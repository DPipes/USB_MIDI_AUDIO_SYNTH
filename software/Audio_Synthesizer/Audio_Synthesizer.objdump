
Audio_Synthesizer.elf:     file format elf32-littlenios2
Audio_Synthesizer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0002bc04 memsz 0x0002bc04 flags r-x
    LOAD off    0x0002cc24 vaddr 0x0006bc24 paddr 0x0006ee10 align 2**12
         filesz 0x000031ec memsz 0x000031ec flags rw-
    LOAD off    0x0002fffc vaddr 0x00071ffc paddr 0x00071ffc align 2**12
         filesz 0x00000000 memsz 0x000002c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024ad0  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006f24  00064d00  00064d00  00025d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031ec  0006bc24  0006ee10  0002cc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c0  00071ffc  00071ffc  0002fffc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000722bc  000722bc  0002fe10  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002fe10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001ad8  00000000  00000000  0002fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00053af2  00000000  00000000  00031910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001100b  00000000  00000000  00085402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015ae0  00000000  00000000  0009640d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005ac0  00000000  00000000  000abef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00010076  00000000  00000000  000b19b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025010  00000000  00000000  000c1a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e6a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002dd0  00000000  00000000  000e6aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001024aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  001024ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001024b9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001024ba  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  001024bb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  001024bf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  001024c3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  001024c7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  001024d2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  001024dd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000015  00000000  00000000  001024e8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  001024fd  2**0
                  CONTENTS, READONLY
 29 .jdi          00005c4e  00000000  00000000  00102526  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000888b0  00000000  00000000  00108174  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00064d00 l    d  .rodata	00000000 .rodata
0006bc24 l    d  .rwdata	00000000 .rwdata
00071ffc l    d  .bss	00000000 .bss
000722bc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Audio_Synthesizer_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0006d708 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006d709 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006d70a l     O .rwdata	00000001 _ZL9SPI_MODE2
0006d70b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0006d70c l     O .rwdata	00000001 _ZL9SPI_MODE0
0006d70d l     O .rwdata	00000001 _ZL9SPI_MODE1
0006d70e l     O .rwdata	00000001 _ZL9SPI_MODE2
0006d70f l     O .rwdata	00000001 _ZL9SPI_MODE3
00071ffc l     O .bss	00000001 _ZL9usb_error
00071ffd l     O .bss	00000001 _ZL14usb_task_state
00072000 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0006d718 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006d719 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006d71a l     O .rwdata	00000001 _ZL9SPI_MODE2
0006d71b l     O .rwdata	00000001 _ZL9SPI_MODE3
0006d71c l     O .rwdata	00000006 _ZL9XBOX_LEDS
00064e0a l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00043d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
00072004 l     O .bss	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0006d73c l     O .rwdata	00000001 _ZL9SPI_MODE0
0006d73d l     O .rwdata	00000001 _ZL9SPI_MODE1
0006d73e l     O .rwdata	00000001 _ZL9SPI_MODE2
0006d73f l     O .rwdata	00000001 _ZL9SPI_MODE3
0006d740 l     O .rwdata	00000002 _ZL9pstrSpace
0006d744 l     O .rwdata	00000003 _ZL8pstrCRLF
0006d748 l     O .rwdata	00000002 _ZL13pstrSingleTab
0006d74c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0006d750 l     O .rwdata	00000004 _ZL13pstrTripleTab
0006d754 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00064f58 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00064f6c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00064f78 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00064f84 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00064f90 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00064f9c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00064fac l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0006d75c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0006d764 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0006d76c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0006d774 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00064fb8 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00064fc4 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0006d778 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0006d77c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00064fd0 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00064fe0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0006d784 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0006d78c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00064ff0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0006d794 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00065000 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0006d79c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00065018 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0006d7a0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00065024 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00065030 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0006d7a8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0006d7b0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0006503c l     O .rodata	00000009 _ZL17pstrUsageJoystick
00065048 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0006d7b8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0006d7c0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00065054 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00065064 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0006d7c8 l     O .rwdata	00000002 _ZL10pstrUsageX
0006d7cc l     O .rwdata	00000002 _ZL10pstrUsageY
0006d7d0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0006d7d4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0006d7d8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0006d7dc l     O .rwdata	00000003 _ZL11pstrUsageRz
0006d7e0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0006d7e8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0006d7f0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00065078 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00065084 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00065090 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0006509c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0006d7f8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0006d800 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0006d804 l     O .rwdata	00000003 _ZL11pstrUsageVx
0006d808 l     O .rwdata	00000003 _ZL11pstrUsageVy
0006d80c l     O .rwdata	00000003 _ZL11pstrUsageVz
0006d810 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0006d818 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0006d820 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0006d828 l     O .rwdata	00000004 _ZL12pstrUsageVno
000650ac l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000650bc l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000650c8 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000650d4 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000650e4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000650f0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000650fc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00065110 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00065120 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00065130 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00065140 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00065150 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00065160 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00065170 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00065180 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0006518c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0006519c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000651b0 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000651c4 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000651d0 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000651dc l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000651e8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000651f4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00065200 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0006520c l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00065218 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00065224 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00065230 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0006523c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00065248 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00065258 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00065264 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00065274 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00065284 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00065294 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000652a4 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000652b4 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000652cc l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000652e4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000652fc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0006530c l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0006531c l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0006532c l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0006533c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0006534c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0006535c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0006536c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0006537c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0006538c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0006539c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000653b4 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000653c4 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000653d8 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000653e8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000653f4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00065400 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0006540c l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0006d82c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00065418 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00065428 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0006543c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00065450 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00065460 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00065470 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0006547c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00065490 l     O .rodata	00000009 _ZL17pstrUsageElevator
0006549c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0006d834 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000654ac l     O .rodata	00000009 _ZL17pstrUsageThrottle
000654b8 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000654c4 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000654d4 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000654e4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0006d83c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000654f0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000654fc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00065508 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0006d844 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0006d84c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0006d854 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0006d85c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00065514 l     O .rodata	00000009 _ZL17pstrUsageSteering
00065520 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0006552c l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00065538 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0006d864 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00065544 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00065554 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00065560 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0006556c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0006d86c l     O .rwdata	00000005 _ZL13pstrUsageBelt
00065578 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0006d874 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0006d87c l     O .rwdata	00000006 _ZL14pstrUsageGlove
00065584 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00065590 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0006559c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000655a8 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0006d884 l     O .rwdata	00000005 _ZL13pstrUsageVest
000655b4 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000655c0 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000655cc l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000655dc l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000655ec l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000655f8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00065604 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0006d88c l     O .rwdata	00000004 _ZL12pstrUsageOar
0006d890 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0006d898 l     O .rwdata	00000005 _ZL13pstrUsageRate
00065610 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0006561c l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0006562c l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0006563c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0006564c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00065658 l     O .rodata	0000000b _ZL18pstrUsageStickType
00065664 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0006d8a0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0006d8a8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0006d8b0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0006d8b8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0006d8c0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0006d8c8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0006d8d0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0006d8d8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0006d8e0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0006d8e8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0006d8f0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0006d8f8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00065670 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0006567c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00065688 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0006d900 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0006d908 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0006d910 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0006d918 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0006d920 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00065694 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000656a4 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0006d928 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0006d930 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000656b0 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000656c0 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000656d0 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000656e0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000656f0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00065700 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00065710 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00065720 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00065730 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0006d934 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00065740 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0006d93c l     O .rwdata	00000005 _ZL13pstrUsageBump
00065750 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0006575c l     O .rodata	0000000b _ZL18pstrUsageShootBall
0006d944 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00065768 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00065774 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0006d94c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00065780 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00065790 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0006579c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000657a8 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000657b4 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000657c8 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000657d8 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000657e8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000657f4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00065800 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00065818 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0006582c l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00065844 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00065858 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00065864 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00065870 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0006d954 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0006d95c l     O .rwdata	00000005 _ZL13pstrUsageKana
0006d964 l     O .rwdata	00000004 _ZL14pstrUsagePower
0006d968 l     O .rwdata	00000006 _ZL14pstrUsageShift
0006d970 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0006d974 l     O .rwdata	00000005 _ZL13pstrUsageMute
0006587c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00065888 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00065898 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0006d97c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000658a8 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000658b8 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0006d984 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0006d98c l     O .rwdata	00000007 _ZL15pstrUsageStereo
000658c4 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000658d8 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0006d994 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0006d998 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000658e4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000658f8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0006d99c l     O .rwdata	00000005 _ZL13pstrUsageRing
00065904 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00065910 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0006d9a4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0006d9ac l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0006d9b4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0006d9bc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0006591c l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0006d9c4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0006d9cc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00065928 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00065934 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00065940 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
0006594c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0006d9d0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00065958 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0006d9d8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0006d9e0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0006d9e8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00065964 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0006d9f0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0006d9f8 l     O .rwdata	00000006 _ZL14pstrUsageReady
00065970 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0006597c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0006da00 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0006da08 l     O .rwdata	00000004 _ZL16pstrUsageForward
0006da0c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0006da10 l     O .rwdata	00000005 _ZL13pstrUsageStop
0006da18 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00065988 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0006da20 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0006da28 l     O .rwdata	00000006 _ZL14pstrUsagePause
0006da30 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0006da34 l     O .rwdata	00000006 _ZL14pstrUsageError
00065994 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000659a4 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000659b8 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0006da3c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000659d0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000659dc l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000659ec l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0006da44 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
000659fc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00065a0c l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00065a20 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00065a34 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00065a48 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00065a5c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0006da4c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00065a6c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00065a78 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0006da54 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00065a84 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00065a90 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0006da5c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00065aa0 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00065aac l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0006da64 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0006da6c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00065ab8 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00065ac4 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0006da74 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0006da7c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0006da84 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0006da8c l     O .rwdata	00000007 _ZL15pstrUsageRedial
00065ad0 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0006da94 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0006da9c l     O .rwdata	00000005 _ZL13pstrUsagePark
00065adc l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00065ae8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0006daa4 l     O .rwdata	00000005 _ZL13pstrUsageLine
00065af4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00065b00 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00065b0c l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00065b18 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00065b24 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0006daac l     O .rwdata	00000005 _ZL13pstrUsageSend
00065b30 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00065b3c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00065b48 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00065b54 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00065b60 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00065b6c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0006dab4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00065b7c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00065b8c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00065ba0 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00065bb4 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00065bc8 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00065bdc l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00065bec l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00065bfc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00065c10 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00065c20 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00065c30 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00065c40 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00065c4c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00065c58 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00065c64 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0006dab8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0006dac0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0006dac4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0006dac8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0006dacc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0006dad0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0006dad4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0006dad8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0006dadc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0006dae0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0006dae4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0006dae8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0006daec l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0006daf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0006daf4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0006daf8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0006dafc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00065c78 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00065c88 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00065c94 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00065ca0 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0006db00 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0006db04 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0006db0c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0006db14 l     O .rwdata	00000006 _ZL14pstrUsageReset
0006db1c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00065cac l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00065cb8 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0006db24 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00065cc4 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0006db2c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00065cd0 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0006db34 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00065cdc l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00065ce8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00065cf4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00065d00 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00065d0c l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00065d1c l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00065d2c l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00065d38 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00065d44 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0006db3c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00065d54 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00065d64 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0006db44 l     O .rwdata	00000006 _ZL14pstrUsageStill
0006db4c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00065d70 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00065d7c l     O .rodata	0000000a _ZL17pstrUsageModeStep
00065d88 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00065d94 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00065da4 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0006db50 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0006db58 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00065db0 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00065dc0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00065dcc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00065dd8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00065de4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00065df0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00065dfc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00065e08 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00065e18 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00065e24 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00065e30 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00065e3c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0006db60 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0006db68 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00065e4c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00065e5c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00065e68 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00065e74 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00065e84 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00065e94 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0006db70 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0006db78 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00065ea4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0006db80 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0006db88 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0006db90 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0006db98 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0006dba0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00065eb0 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00065ebc l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0006dba8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0006dbb0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00065ec8 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00065ed4 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00065ee0 l     O .rodata	00000009 _ZL17pstrUsageTracking
00065eec l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00065ef8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0006dbb8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00065f04 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0006dbc0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00065f10 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00065f1c l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00065f28 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00065f34 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00065f44 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00065f58 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00065f68 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00065f78 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00065f84 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00065f90 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00065f9c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00065fa8 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0006dbc8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0006dbcc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0006dbd4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0006dbdc l     O .rwdata	00000007 _ZL15pstrUsageTreble
00065fb4 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00065fc0 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0006dbe4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0006dbec l     O .rwdata	00000004 _ZL12pstrUsageMPX
0006dbf0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0006dbf8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0006dc00 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00065fcc l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00065fd8 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00065fe4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00065ff0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0006dc08 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00065ffc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00066008 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00066014 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00066020 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00066030 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00066040 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0006604c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00066058 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00066064 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0006dc10 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0006dc18 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00066070 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0006607c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0006dc20 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00066088 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00066098 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000660a8 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000660b4 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000660c0 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000660cc l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0006dc28 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0006dc30 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000660d8 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000660e4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000660f0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000660fc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0006dc38 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0006610c l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00066118 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0006dc40 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0006dc48 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0006dc50 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00066128 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00066134 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00066140 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0006614c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00066158 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00066168 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0006617c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00066188 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0006619c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000661ac l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000661b8 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000661c8 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000661d8 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000661e8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000661f4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00066204 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00066210 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00066220 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00066230 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00066240 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00066250 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00066264 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0006dc58 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00066274 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00066288 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0006629c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000662ac l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000662bc l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000662cc l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000662d8 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000662e4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000662f0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000662fc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00066308 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00066318 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00066330 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0006633c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00066348 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00066354 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00066360 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0006636c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00066378 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0006638c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0006dc60 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00066398 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0006dc68 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000663a4 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000663b0 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000663c0 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000663cc l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000663dc l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000663ec l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000663fc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00066408 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00066414 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00066420 l     O .rodata	00000009 _ZL16pstrUsageALClock
0006642c l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0006643c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00066448 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00066454 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00066460 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0006646c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00066480 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00066490 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0006649c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000664b0 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000664bc l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000664cc l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000664e0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000664f4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00066508 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00066518 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00066530 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00066544 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00066554 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00066564 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0006dc70 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0006dc78 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00066578 l     O .rodata	00000009 _ZL16pstrUsageACClose
0006dc80 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0006dc88 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0006dc90 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0006dc98 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00066584 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0006dca0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0006dca8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0006dcb0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0006dcb8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00066590 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0006659c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0006dcc0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000665a8 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000665b8 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0006dcc8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0006dcd0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0006dcd8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0006dce0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0006dce8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000665c4 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000665d0 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000665e0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000665f0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0006dcf0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000665fc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00066608 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00066614 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0006dcf8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00066620 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0006662c l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0006663c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00066648 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00066658 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00066668 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00066674 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00066680 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0006dd00 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00066690 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0006669c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000666ac l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0006dd08 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0006dd10 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0006dd18 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0006dd20 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000666bc l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000666c8 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0006dd28 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000666d4 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000666e0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000666ec l     O .rodata	0000000a _ZL17pstrUsageACRotate
000666f8 l     O .rodata	0000000a _ZL17pstrUsageACResize
00066704 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00066710 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0006671c l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00066728 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00066734 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00066740 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0006674c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00066758 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00066768 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00066778 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00066788 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00066798 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000667a4 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000667b4 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000667c0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000667d0 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000667e0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000667f0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000667fc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00066808 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00066814 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00066820 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0006dd30 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0006dd38 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0006682c l     O .rodata	0000000a _ZL17pstrUsageACCancel
0006dd40 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0006dd48 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00066838 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0006dd50 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00066844 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00066854 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00066860 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00066870 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00066880 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00066890 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0006dd58 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0006dd60 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0006689c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0006dd68 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000668a8 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000668b4 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000668c4 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000668d0 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000668e0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000668ec l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000668f8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00066904 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00066910 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0006691c l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00066928 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0006dd70 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0006dd78 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00066934 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00066940 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0006dd80 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00066950 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0006695c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00066968 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00066978 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00066988 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00066994 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000669a0 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000669ac l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0006dd88 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000669b8 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000669c4 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000669d0 l     O .rodata	00000009 _ZL16pstrUsageACReply
000669dc l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000669ec l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0006dd90 l     O .rwdata	00000007 _ZL15pstrUsageACSend
000669f8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0006dd98 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0006dda0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00066a04 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00066a10 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00066a1c l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00066a28 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00066a34 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00066a40 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00066a4c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00066a58 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00066a64 l     O .rodata	0000000a _ZL17pstrUsageACRename
00066a70 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00066a7c l     O .rodata	00000009 _ZL16pstrUsageACSplit
00066a88 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00066a94 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00066aa0 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0006dda8 l     O .rwdata	00000004 _ZL12pstrUsagePen
00066aac l     O .rodata	0000000a _ZL17pstrUsageLightPen
00066ab8 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00066ac4 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00066ad0 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00066adc l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0006ddac l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00066aec l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0006ddb4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00066af8 l     O .rodata	00000009 _ZL17pstrUsageArmature
00066b04 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00066b18 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0006ddbc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0006ddc4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0006ddcc l     O .rwdata	00000007 _ZL15pstrUsageFinger
00066b28 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00066b34 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00066b40 l     O .rodata	00000009 _ZL16pstrUsageInRange
0006ddd4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0006dddc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0006dde4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0006dde8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00066b4c l     O .rodata	0000000b _ZL18pstrUsageDataValid
00066b58 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00066b68 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00066b78 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0006ddf0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0006ddf8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0006de00 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0006de08 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00066b88 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0006de10 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0006de18 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00066b94 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0006de20 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0006de28 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00066ba0 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00066bac l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00066bbc l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00066bc8 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00066bd8 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00066be4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00066bf4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00066c00 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00066c10 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00066c1c l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00066c2c l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00066c3c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00066c48 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00066c54 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00066c60 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00066c6c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00066c78 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00066c84 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00066c90 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00066ca0 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00066cb0 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0006de30 l     O .rwdata	00000004 _ZL12pstrUsageRow
0006de34 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0006de38 l     O .rwdata	00000005 _ZL13pstrUsageRows
0006de40 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00066cbc l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00066cc8 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00066cd4 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00066ce0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0006de48 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00066cec l     O .rodata	00000009 _ZL17pstrUsageFontData
00066cf8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00066d04 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00066d10 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00066d20 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00066d30 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00066d40 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00066d4c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00066d58 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00066d64 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00066d70 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00066d7c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00066d88 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00066d94 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00066da0 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00066dac l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00066dbc l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00066dcc l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00066ddc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00066de8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00066df4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00066e04 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0006de50 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00066e10 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00066e20 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00066e30 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00066e3c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00066e48 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00066e58 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00066e68 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00066e78 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00066e88 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00066e94 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00066ea0 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00066eac l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00066ebc l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00066ecc l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00066edc l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00066eec l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0006de58 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0006de60 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00066efc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0006de68 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0006de70 l     O .rwdata	00000005 _ZL13pstrUsageNext
0006de78 l     O .rwdata	00000005 _ZL13pstrUsageSave
0006de80 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00066f08 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0006de88 l     O .rwdata	00000005 _ZL13pstrUsageCine
00066f14 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0006de90 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0006de98 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00066f20 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00066f30 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00066f40 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00066f50 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00066f5c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00066f68 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00066f7c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00066f90 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00066fa4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00066fb8 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00066fc8 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00066fd8 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00066fe4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00066ff0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00067000 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0006deac l     O .rwdata	00000001 _ZL9SPI_MODE0
0006dead l     O .rwdata	00000001 _ZL9SPI_MODE1
0006deae l     O .rwdata	00000001 _ZL9SPI_MODE2
0006deaf l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0006deb4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006deb5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006deb6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0006deb7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0006deb8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006deb9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006deba l     O .rwdata	00000001 _ZL9SPI_MODE2
0006debb l     O .rwdata	00000001 _ZL9SPI_MODE3
00067239 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00067249 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
000490a8 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0006dec4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006dec5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006dec6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0006dec7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0006dec8 l     O .rwdata	00000002 _ZL9pstrSpace
0006decc l     O .rwdata	00000003 _ZL8pstrCRLF
0006ded0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0006ded4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0006ded8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0006dedc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00067314 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00067328 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00067334 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00067340 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0006734c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00067358 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00067368 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0006dee4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0006deec l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0006def4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0006defc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00067374 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00067380 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0006df00 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0006df04 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0006738c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0006739c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0006df0c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0006df14 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000673ac l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0006df1c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000673bc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0006df24 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000673d4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0006df28 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000673e0 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000673ec l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0006df30 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0006df38 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000673f8 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00067404 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0006df40 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0006df48 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00067410 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00067420 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0006df50 l     O .rwdata	00000002 _ZL10pstrUsageX
0006df54 l     O .rwdata	00000002 _ZL10pstrUsageY
0006df58 l     O .rwdata	00000002 _ZL10pstrUsageZ
0006df5c l     O .rwdata	00000003 _ZL11pstrUsageRx
0006df60 l     O .rwdata	00000003 _ZL11pstrUsageRy
0006df64 l     O .rwdata	00000003 _ZL11pstrUsageRz
0006df68 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0006df70 l     O .rwdata	00000005 _ZL13pstrUsageDial
0006df78 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00067434 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00067440 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0006744c l     O .rodata	0000000b _ZL18pstrUsageByteCount
00067458 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0006df80 l     O .rwdata	00000006 _ZL14pstrUsageStart
0006df88 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0006df8c l     O .rwdata	00000003 _ZL11pstrUsageVx
0006df90 l     O .rwdata	00000003 _ZL11pstrUsageVy
0006df94 l     O .rwdata	00000003 _ZL11pstrUsageVz
0006df98 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0006dfa0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0006dfa8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0006dfb0 l     O .rwdata	00000004 _ZL12pstrUsageVno
00067468 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00067478 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00067484 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00067490 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000674a0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000674ac l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000674b8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000674cc l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000674dc l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000674ec l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000674fc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0006750c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0006751c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0006752c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0006753c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00067548 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00067558 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0006756c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00067580 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0006758c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00067598 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000675a4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000675b0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000675bc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000675c8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000675d4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000675e0 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000675ec l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000675f8 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00067604 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00067614 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00067620 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00067630 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00067640 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00067650 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00067660 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00067670 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00067688 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000676a0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000676b8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000676c8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000676d8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000676e8 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000676f8 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00067708 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00067718 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00067728 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00067738 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00067748 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00067758 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00067770 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00067780 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00067794 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000677a4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000677b0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000677bc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000677c8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0006dfb4 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000677d4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000677e4 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000677f8 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0006780c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0006781c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0006782c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00067838 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0006784c l     O .rodata	00000009 _ZL17pstrUsageElevator
00067858 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0006dfbc l     O .rwdata	00000007 _ZL15pstrUsageRudder
00067868 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00067874 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00067880 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00067890 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000678a0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0006dfc4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000678ac l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000678b8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000678c4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0006dfcc l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0006dfd4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0006dfdc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0006dfe4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000678d0 l     O .rodata	00000009 _ZL17pstrUsageSteering
000678dc l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000678e8 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000678f4 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0006dfec l     O .rwdata	00000008 _ZL16pstrUsageBallast
00067900 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00067910 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0006791c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00067928 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0006dff4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00067934 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0006dffc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0006e004 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00067940 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0006794c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00067958 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00067964 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0006e00c l     O .rwdata	00000005 _ZL13pstrUsageVest
00067970 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0006797c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00067988 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00067998 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000679a8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000679b4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000679c0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0006e014 l     O .rwdata	00000004 _ZL12pstrUsageOar
0006e018 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0006e020 l     O .rwdata	00000005 _ZL13pstrUsageRate
000679cc l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000679d8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000679e8 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000679f8 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00067a08 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00067a14 l     O .rodata	0000000b _ZL18pstrUsageStickType
00067a20 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0006e028 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0006e030 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0006e038 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0006e040 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0006e048 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0006e050 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0006e058 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0006e060 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0006e068 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0006e070 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0006e078 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0006e080 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00067a2c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00067a38 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00067a44 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0006e088 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0006e090 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0006e098 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0006e0a0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0006e0a8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00067a50 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00067a60 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0006e0b0 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0006e0b8 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00067a6c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00067a7c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00067a8c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00067a9c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00067aac l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00067abc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00067acc l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00067adc l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00067aec l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0006e0bc l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00067afc l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0006e0c4 l     O .rwdata	00000005 _ZL13pstrUsageBump
00067b0c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00067b18 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0006e0cc l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00067b24 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00067b30 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0006e0d4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00067b3c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00067b4c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00067b58 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00067b64 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00067b70 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00067b84 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00067b94 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00067ba4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00067bb0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00067bbc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00067bd4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00067be8 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00067c00 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00067c14 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00067c20 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00067c2c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0006e0dc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0006e0e4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0006e0ec l     O .rwdata	00000004 _ZL14pstrUsagePower
0006e0f0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0006e0f8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0006e0fc l     O .rwdata	00000005 _ZL13pstrUsageMute
00067c38 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00067c44 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00067c54 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0006e104 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00067c64 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00067c74 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0006e10c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0006e114 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00067c80 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00067c94 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0006e11c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0006e120 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00067ca0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00067cb4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0006e124 l     O .rwdata	00000005 _ZL13pstrUsageRing
00067cc0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00067ccc l     O .rodata	0000000a _ZL17pstrUsageDataMode
0006e12c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0006e134 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0006e13c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0006e144 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00067cd8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0006e14c l     O .rwdata	00000005 _ZL13pstrUsageHold
0006e154 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00067ce4 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00067cf0 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00067cfc l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00067d08 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0006e158 l     O .rwdata	00000005 _ZL19pstrUsageConference
00067d14 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0006e160 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0006e168 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0006e170 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00067d20 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0006e178 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0006e180 l     O .rwdata	00000006 _ZL14pstrUsageReady
00067d2c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00067d38 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0006e188 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0006e190 l     O .rwdata	00000004 _ZL16pstrUsageForward
0006e194 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0006e198 l     O .rwdata	00000005 _ZL13pstrUsageStop
0006e1a0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00067d44 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0006e1a8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0006e1b0 l     O .rwdata	00000006 _ZL14pstrUsagePause
0006e1b8 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0006e1bc l     O .rwdata	00000006 _ZL14pstrUsageError
00067d50 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00067d60 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00067d74 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0006e1c4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00067d8c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00067d98 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00067da8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0006e1cc l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00067db8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00067dc8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00067ddc l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00067df0 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00067e04 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00067e18 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0006e1d4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00067e28 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00067e34 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0006e1dc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00067e40 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00067e4c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0006e1e4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00067e5c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00067e68 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0006e1ec l     O .rwdata	00000008 _ZL16pstrUsageHandset
0006e1f4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00067e74 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00067e80 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0006e1fc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0006e204 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0006e20c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0006e214 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00067e8c l     O .rodata	00000009 _ZL17pstrUsageTransfer
0006e21c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0006e224 l     O .rwdata	00000005 _ZL13pstrUsagePark
00067e98 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00067ea4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0006e22c l     O .rwdata	00000005 _ZL13pstrUsageLine
00067eb0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00067ebc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00067ec8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00067ed4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00067ee0 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0006e234 l     O .rwdata	00000005 _ZL13pstrUsageSend
00067eec l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00067ef8 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00067f04 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00067f10 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00067f1c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00067f28 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0006e23c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00067f38 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00067f48 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00067f5c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00067f70 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00067f84 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00067f98 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00067fa8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00067fb8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00067fcc l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00067fdc l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00067fec l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00067ffc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00068008 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00068014 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00068020 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0006e240 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0006e248 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0006e24c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0006e250 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0006e254 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0006e258 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0006e25c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0006e260 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0006e264 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0006e268 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0006e26c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0006e270 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0006e274 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0006e278 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0006e27c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0006e280 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0006e284 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00068034 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00068044 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00068050 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0006805c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0006e288 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0006e28c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0006e294 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0006e29c l     O .rwdata	00000006 _ZL14pstrUsageReset
0006e2a4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00068068 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00068074 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0006e2ac l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00068080 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0006e2b4 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0006808c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0006e2bc l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00068098 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000680a4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
000680b0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
000680bc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
000680c8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
000680d8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000680e8 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000680f4 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00068100 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0006e2c4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00068110 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00068120 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0006e2cc l     O .rwdata	00000006 _ZL14pstrUsageStill
0006e2d4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0006812c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00068138 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00068144 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00068150 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00068160 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0006e2d8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0006e2e0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0006816c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0006817c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00068188 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00068194 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000681a0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000681ac l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000681b8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
000681c4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
000681d4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000681e0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
000681ec l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000681f8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0006e2e8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0006e2f0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00068208 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00068218 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00068224 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00068230 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00068240 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00068250 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0006e2f8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0006e300 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00068260 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0006e308 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0006e310 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0006e318 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0006e320 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0006e328 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0006826c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00068278 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0006e330 l     O .rwdata	00000006 _ZL14pstrUsageEject
0006e338 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00068284 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00068290 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0006829c l     O .rodata	00000009 _ZL17pstrUsageTracking
000682a8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000682b4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0006e340 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000682c0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0006e348 l     O .rwdata	00000005 _ZL13pstrUsageMark
000682cc l     O .rodata	00000009 _ZL18pstrUsageClearMark
000682d8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000682e4 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
000682f0 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00068300 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00068314 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00068324 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00068334 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00068340 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0006834c l     O .rodata	0000000b _ZL18pstrUsageStopEject
00068358 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00068364 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0006e350 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0006e354 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0006e35c l     O .rwdata	00000005 _ZL13pstrUsageBass
0006e364 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00068370 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0006837c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0006e36c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0006e374 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0006e378 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0006e380 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0006e388 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00068388 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00068394 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000683a0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000683ac l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0006e390 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000683b8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000683c4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000683d0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000683dc l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000683ec l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000683fc l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00068408 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00068414 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00068420 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0006e398 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0006e3a0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0006842c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00068438 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0006e3a8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00068444 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00068454 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00068464 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00068470 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0006847c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00068488 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0006e3b0 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0006e3b8 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00068494 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000684a0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000684ac l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000684b8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0006e3c0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000684c8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000684d4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0006e3c8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0006e3d0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0006e3d8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000684e4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000684f0 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000684fc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00068508 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00068514 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00068524 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00068538 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00068544 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00068558 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00068568 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00068574 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00068584 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00068594 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000685a4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000685b0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000685c0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000685cc l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000685dc l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000685ec l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000685fc l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0006860c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00068620 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0006e3e0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00068630 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00068644 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00068658 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00068668 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00068678 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00068688 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00068694 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000686a0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000686ac l     O .rodata	00000009 _ZL16pstrUsageALLogon
000686b8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000686c4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000686d4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000686ec l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000686f8 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00068704 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00068710 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0006871c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00068728 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00068734 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00068748 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0006e3e8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00068754 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0006e3f0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00068760 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0006876c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0006877c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00068788 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00068798 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000687a8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000687b8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000687c4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000687d0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000687dc l     O .rodata	00000009 _ZL16pstrUsageALClock
000687e8 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000687f8 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00068804 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00068810 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0006881c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00068828 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0006883c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0006884c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00068858 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0006886c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00068878 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00068888 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0006889c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000688b0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000688c4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000688d4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000688ec l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00068900 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00068910 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00068920 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0006e3f8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0006e400 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00068934 l     O .rodata	00000009 _ZL16pstrUsageACClose
0006e408 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0006e410 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0006e418 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0006e420 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00068940 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0006e428 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0006e430 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0006e438 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0006e440 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0006894c l     O .rodata	00000009 _ZL16pstrUsageACPaste
00068958 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0006e448 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00068964 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00068974 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0006e450 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0006e458 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0006e460 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0006e468 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0006e470 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00068980 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0006898c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0006899c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000689ac l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0006e478 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000689b8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000689c4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000689d0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0006e480 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000689dc l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000689e8 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000689f8 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00068a04 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00068a14 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00068a24 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00068a30 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00068a3c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0006e488 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00068a4c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00068a58 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00068a68 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0006e490 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0006e498 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0006e4a0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0006e4a8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00068a78 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00068a84 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0006e4b0 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00068a90 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00068a9c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00068aa8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00068ab4 l     O .rodata	0000000a _ZL17pstrUsageACResize
00068ac0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00068acc l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00068ad8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00068ae4 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00068af0 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00068afc l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00068b08 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00068b14 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00068b24 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00068b34 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00068b44 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00068b54 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00068b60 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00068b70 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00068b7c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00068b8c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00068b9c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00068bac l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00068bb8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00068bc4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00068bd0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00068bdc l     O .rodata	0000000a _ZL17pstrUsageACDemote
0006e4b8 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0006e4c0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00068be8 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0006e4c8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0006e4d0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00068bf4 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0006e4d8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00068c00 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00068c10 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00068c1c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00068c2c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00068c3c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00068c4c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0006e4e0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0006e4e8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00068c58 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0006e4f0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00068c64 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00068c70 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00068c80 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00068c8c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00068c9c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00068ca8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00068cb4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00068cc0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00068ccc l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00068cd8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00068ce4 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0006e4f8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0006e500 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00068cf0 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00068cfc l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0006e508 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00068d0c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00068d18 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00068d24 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00068d34 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00068d44 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00068d50 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00068d5c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00068d68 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0006e510 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00068d74 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00068d80 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00068d8c l     O .rodata	00000009 _ZL16pstrUsageACReply
00068d98 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00068da8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0006e518 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00068db4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0006e520 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0006e528 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00068dc0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00068dcc l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00068dd8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00068de4 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00068df0 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00068dfc l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00068e08 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00068e14 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00068e20 l     O .rodata	0000000a _ZL17pstrUsageACRename
00068e2c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00068e38 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00068e44 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00068e50 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00068e5c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0006e530 l     O .rwdata	00000004 _ZL12pstrUsagePen
00068e68 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00068e74 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00068e80 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00068e8c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00068e98 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0006e534 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00068ea8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0006e53c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00068eb4 l     O .rodata	00000009 _ZL17pstrUsageArmature
00068ec0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00068ed4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0006e544 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0006e54c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0006e554 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00068ee4 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00068ef0 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00068efc l     O .rodata	00000009 _ZL16pstrUsageInRange
0006e55c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0006e564 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0006e56c l     O .rwdata	00000004 _ZL12pstrUsageTap
0006e570 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00068f08 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00068f14 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00068f24 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00068f34 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0006e578 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0006e580 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0006e588 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0006e590 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00068f44 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0006e598 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0006e5a0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00068f50 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0006e5a8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0006e5b0 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00068f5c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00068f68 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00068f78 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00068f84 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00068f94 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00068fa0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00068fb0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00068fbc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00068fcc l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00068fd8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00068fe8 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00068ff8 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00069004 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00069010 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0006901c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00069028 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00069034 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00069040 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0006904c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0006905c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0006906c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0006e5b8 l     O .rwdata	00000004 _ZL12pstrUsageRow
0006e5bc l     O .rwdata	00000004 _ZL15pstrUsageColumn
0006e5c0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0006e5c8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00069078 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00069084 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00069090 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0006909c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0006e5d0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
000690a8 l     O .rodata	00000009 _ZL17pstrUsageFontData
000690b4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
000690c0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
000690cc l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
000690dc l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
000690ec l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
000690fc l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00069108 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00069114 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00069120 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0006912c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00069138 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00069144 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00069150 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0006915c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00069168 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00069178 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00069188 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00069198 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000691a4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000691b0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000691c0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0006e5d8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
000691cc l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
000691dc l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
000691ec l     O .rodata	00000009 _ZL20pstrUsagePaletteData
000691f8 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00069204 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00069214 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00069224 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00069234 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00069244 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00069250 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0006925c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00069268 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00069278 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00069288 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00069298 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000692a8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0006e5e0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0006e5e8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000692b8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0006e5f0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0006e5f8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0006e600 l     O .rwdata	00000005 _ZL13pstrUsageSave
0006e608 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000692c4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0006e610 l     O .rwdata	00000005 _ZL13pstrUsageCine
000692d0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0006e618 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0006e620 l     O .rwdata	00000006 _ZL14pstrUsageDepth
000692dc l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
000692ec l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
000692fc l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0006930c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00069318 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00069324 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00069338 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0006934c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00069360 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00069374 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00069384 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00069394 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000693a0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000693ac l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000693bc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0006e626 l     O .rwdata	00000001 _ZL9SPI_MODE0
0006e627 l     O .rwdata	00000001 _ZL9SPI_MODE1
0006e628 l     O .rwdata	00000001 _ZL9SPI_MODE2
0006e629 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0006e62c l     O .rwdata	00000001 _ZL9SPI_MODE0
0006e62d l     O .rwdata	00000001 _ZL9SPI_MODE1
0006e62e l     O .rwdata	00000001 _ZL9SPI_MODE2
0006e62f l     O .rwdata	00000001 _ZL9SPI_MODE3
0006e630 l     O .rwdata	00000002 _ZL9pstrSpace
0006e634 l     O .rwdata	00000003 _ZL8pstrCRLF
0006e638 l     O .rwdata	00000002 _ZL13pstrSingleTab
0006e63c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0006e640 l     O .rwdata	00000004 _ZL13pstrTripleTab
0006e644 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0006949c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000694b0 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000694bc l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000694c8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000694d4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000694e0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000694f0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0006e64c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0006e654 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0006e65c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0006e664 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000694fc l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00069508 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0006e668 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0006e66c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00069514 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00069524 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0006e674 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0006e67c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00069534 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0006e684 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00069544 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0006e68c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0006955c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0006e690 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00069568 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00069574 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0006e698 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0006e6a0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00069580 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0006958c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0006e6a8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0006e6b0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00069598 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000695a8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0006e6b8 l     O .rwdata	00000002 _ZL10pstrUsageX
0006e6bc l     O .rwdata	00000002 _ZL10pstrUsageY
0006e6c0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0006e6c4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0006e6c8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0006e6cc l     O .rwdata	00000003 _ZL11pstrUsageRz
0006e6d0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0006e6d8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0006e6e0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000695bc l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000695c8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000695d4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000695e0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0006e6e8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0006e6f0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0006e6f4 l     O .rwdata	00000003 _ZL11pstrUsageVx
0006e6f8 l     O .rwdata	00000003 _ZL11pstrUsageVy
0006e6fc l     O .rwdata	00000003 _ZL11pstrUsageVz
0006e700 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0006e708 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0006e710 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0006e718 l     O .rwdata	00000004 _ZL12pstrUsageVno
000695f0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00069600 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0006960c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00069618 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00069628 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00069634 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00069640 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00069654 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00069664 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00069674 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00069684 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00069694 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000696a4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000696b4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000696c4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000696d0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000696e0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000696f4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00069708 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00069714 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00069720 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0006972c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00069738 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00069744 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00069750 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0006975c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00069768 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00069774 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00069780 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0006978c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0006979c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000697a8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000697b8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000697c8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000697d8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000697e8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000697f8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00069810 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00069828 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00069840 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00069850 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00069860 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00069870 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00069880 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00069890 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000698a0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000698b0 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000698c0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000698d0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000698e0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000698f8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00069908 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0006991c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0006992c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00069938 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00069944 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00069950 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0006e71c l     O .rwdata	00000008 _ZL16pstrUsageAileron
0006995c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0006996c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00069980 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00069994 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000699a4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000699b4 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000699c0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000699d4 l     O .rodata	00000009 _ZL17pstrUsageElevator
000699e0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0006e724 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000699f0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000699fc l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00069a08 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00069a18 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00069a28 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0006e72c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00069a34 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00069a40 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00069a4c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0006e734 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0006e73c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0006e744 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0006e74c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00069a58 l     O .rodata	00000009 _ZL17pstrUsageSteering
00069a64 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00069a70 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00069a7c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0006e754 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00069a88 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00069a98 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00069aa4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00069ab0 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0006e75c l     O .rwdata	00000005 _ZL13pstrUsageBelt
00069abc l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0006e764 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0006e76c l     O .rwdata	00000006 _ZL14pstrUsageGlove
00069ac8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00069ad4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00069ae0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00069aec l     O .rodata	0000000b _ZL19pstrUsageOculometer
0006e774 l     O .rwdata	00000005 _ZL13pstrUsageVest
00069af8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00069b04 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00069b10 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00069b20 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00069b30 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00069b3c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00069b48 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0006e77c l     O .rwdata	00000004 _ZL12pstrUsageOar
0006e780 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0006e788 l     O .rwdata	00000005 _ZL13pstrUsageRate
00069b54 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00069b60 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00069b70 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00069b80 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00069b90 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00069b9c l     O .rodata	0000000b _ZL18pstrUsageStickType
00069ba8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0006e790 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0006e798 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0006e7a0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0006e7a8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0006e7b0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0006e7b8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0006e7c0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0006e7c8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0006e7d0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0006e7d8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0006e7e0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0006e7e8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00069bb4 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00069bc0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00069bcc l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0006e7f0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0006e7f8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0006e800 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0006e808 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0006e810 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00069bd8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00069be8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0006e818 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0006e820 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00069bf4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00069c04 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00069c14 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00069c24 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00069c34 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00069c44 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00069c54 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00069c64 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00069c74 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0006e824 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00069c84 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0006e82c l     O .rwdata	00000005 _ZL13pstrUsageBump
00069c94 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00069ca0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0006e834 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00069cac l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00069cb8 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0006e83c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00069cc4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00069cd4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00069ce0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00069cec l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00069cf8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00069d0c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00069d1c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00069d2c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00069d38 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00069d44 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00069d5c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00069d70 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00069d88 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00069d9c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00069da8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00069db4 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0006e844 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0006e84c l     O .rwdata	00000005 _ZL13pstrUsageKana
0006e854 l     O .rwdata	00000004 _ZL14pstrUsagePower
0006e858 l     O .rwdata	00000006 _ZL14pstrUsageShift
0006e860 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0006e864 l     O .rwdata	00000005 _ZL13pstrUsageMute
00069dc0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00069dcc l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00069ddc l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0006e86c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00069dec l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00069dfc l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0006e874 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0006e87c l     O .rwdata	00000007 _ZL15pstrUsageStereo
00069e08 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00069e1c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0006e884 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0006e888 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00069e28 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00069e3c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0006e88c l     O .rwdata	00000005 _ZL13pstrUsageRing
00069e48 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00069e54 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0006e894 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0006e89c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0006e8a4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0006e8ac l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00069e60 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0006e8b4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0006e8bc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00069e6c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00069e78 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00069e84 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00069e90 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0006e8c0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00069e9c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0006e8c8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0006e8d0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0006e8d8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00069ea8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0006e8e0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0006e8e8 l     O .rwdata	00000006 _ZL14pstrUsageReady
00069eb4 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00069ec0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0006e8f0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0006e8f8 l     O .rwdata	00000004 _ZL16pstrUsageForward
0006e8fc l     O .rwdata	00000004 _ZL16pstrUsageReverse
0006e900 l     O .rwdata	00000005 _ZL13pstrUsageStop
0006e908 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00069ecc l     O .rodata	00000009 _ZL20pstrUsageFastForward
0006e910 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0006e918 l     O .rwdata	00000006 _ZL14pstrUsagePause
0006e920 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0006e924 l     O .rwdata	00000006 _ZL14pstrUsageError
00069ed8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00069ee8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00069efc l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0006e92c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00069f14 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00069f20 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00069f30 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0006e934 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00069f40 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00069f50 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00069f64 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00069f78 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00069f8c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00069fa0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0006e93c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00069fb0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00069fbc l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0006e944 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00069fc8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00069fd4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0006e94c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00069fe4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00069ff0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0006e954 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0006e95c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00069ffc l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0006a008 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0006e964 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0006e96c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0006e974 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0006e97c l     O .rwdata	00000007 _ZL15pstrUsageRedial
0006a014 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0006e984 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0006e98c l     O .rwdata	00000005 _ZL13pstrUsagePark
0006a020 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0006a02c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0006e994 l     O .rwdata	00000005 _ZL13pstrUsageLine
0006a038 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0006a044 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0006a050 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0006a05c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0006a068 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0006e99c l     O .rwdata	00000005 _ZL13pstrUsageSend
0006a074 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0006a080 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0006a08c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0006a098 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0006a0a4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0006a0b0 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0006e9a4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0006a0c0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0006a0d0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0006a0e4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0006a0f8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0006a10c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0006a120 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0006a130 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0006a140 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0006a154 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0006a164 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0006a174 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0006a184 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0006a190 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0006a19c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0006a1a8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0006e9a8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0006e9b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0006e9b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0006e9b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0006e9bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0006e9c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0006e9c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0006e9c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0006e9cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0006e9d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0006e9d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0006e9d8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0006e9dc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0006e9e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0006e9e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0006e9e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0006e9ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0006a1bc l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0006a1cc l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0006a1d8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0006a1e4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0006e9f0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0006e9f4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0006e9fc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0006ea04 l     O .rwdata	00000006 _ZL14pstrUsageReset
0006ea0c l     O .rwdata	00000006 _ZL14pstrUsageSleep
0006a1f0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0006a1fc l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0006ea14 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0006a208 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0006ea1c l     O .rwdata	00000005 _ZL13pstrUsageMenu
0006a214 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0006ea24 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0006a220 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0006a22c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0006a238 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0006a244 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0006a250 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0006a260 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0006a270 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0006a27c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0006a288 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0006ea2c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0006a298 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0006a2a8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0006ea34 l     O .rwdata	00000006 _ZL14pstrUsageStill
0006ea3c l     O .rwdata	00000004 _ZL18pstrUsageSelection
0006a2b4 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0006a2c0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0006a2cc l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0006a2d8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0006a2e8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0006ea40 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0006ea48 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0006a2f4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0006a304 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0006a310 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0006a31c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0006a328 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0006a334 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0006a340 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0006a34c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0006a35c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0006a368 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0006a374 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0006a380 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0006ea50 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0006ea58 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0006a390 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0006a3a0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0006a3ac l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0006a3b8 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0006a3c8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0006a3d8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0006ea60 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0006ea68 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0006a3e8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0006ea70 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0006ea78 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0006ea80 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0006ea88 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0006ea90 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0006a3f4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0006a400 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0006ea98 l     O .rwdata	00000006 _ZL14pstrUsageEject
0006eaa0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0006a40c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0006a418 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0006a424 l     O .rodata	00000009 _ZL17pstrUsageTracking
0006a430 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0006a43c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0006eaa8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0006a448 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0006eab0 l     O .rwdata	00000005 _ZL13pstrUsageMark
0006a454 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0006a460 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0006a46c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0006a478 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0006a488 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0006a49c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0006a4ac l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0006a4bc l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0006a4c8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0006a4d4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0006a4e0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0006a4ec l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0006eab8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0006eabc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0006eac4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0006eacc l     O .rwdata	00000007 _ZL15pstrUsageTreble
0006a4f8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0006a504 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0006ead4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0006eadc l     O .rwdata	00000004 _ZL12pstrUsageMPX
0006eae0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0006eae8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0006eaf0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0006a510 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0006a51c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0006a528 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0006a534 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0006eaf8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0006a540 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0006a54c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0006a558 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0006a564 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0006a574 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0006a584 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0006a590 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0006a59c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0006a5a8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0006eb00 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0006eb08 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0006a5b4 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0006a5c0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0006eb10 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0006a5cc l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0006a5dc l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0006a5ec l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0006a5f8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0006a604 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0006a610 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0006eb18 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0006eb20 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0006a61c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0006a628 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0006a634 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0006a640 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0006eb28 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0006a650 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0006a65c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0006eb30 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0006eb38 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0006eb40 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0006a66c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0006a678 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0006a684 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0006a690 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0006a69c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0006a6ac l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0006a6c0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0006a6cc l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0006a6e0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0006a6f0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0006a6fc l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0006a70c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0006a71c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0006a72c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0006a738 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0006a748 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0006a754 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0006a764 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0006a774 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0006a784 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0006a794 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0006a7a8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0006eb48 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0006a7b8 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0006a7cc l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0006a7e0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0006a7f0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0006a800 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0006a810 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0006a81c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0006a828 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0006a834 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0006a840 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0006a84c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0006a85c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0006a874 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0006a880 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0006a88c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0006a898 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0006a8a4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0006a8b0 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0006a8bc l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0006a8d0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0006eb50 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0006a8dc l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0006eb58 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0006a8e8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0006a8f4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0006a904 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0006a910 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0006a920 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0006a930 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0006a940 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0006a94c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0006a958 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0006a964 l     O .rodata	00000009 _ZL16pstrUsageALClock
0006a970 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0006a980 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0006a98c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0006a998 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0006a9a4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0006a9b0 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0006a9c4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0006a9d4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0006a9e0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0006a9f4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0006aa00 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0006aa10 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0006aa24 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0006aa38 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0006aa4c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0006aa5c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0006aa74 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0006aa88 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0006aa98 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0006aaa8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0006eb60 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0006eb68 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0006aabc l     O .rodata	00000009 _ZL16pstrUsageACClose
0006eb70 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0006eb78 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0006eb80 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0006eb88 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0006aac8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0006eb90 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0006eb98 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0006eba0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0006eba8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0006aad4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0006aae0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0006ebb0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0006aaec l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0006aafc l     O .rodata	0000000a _ZL17pstrUsageACSearch
0006ebb8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0006ebc0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0006ebc8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0006ebd0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0006ebd8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0006ab08 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0006ab14 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0006ab24 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0006ab34 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0006ebe0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0006ab40 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0006ab4c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0006ab58 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0006ebe8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0006ab64 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0006ab70 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0006ab80 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0006ab8c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0006ab9c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0006abac l     O .rodata	0000000a _ZL17pstrUsageACScroll
0006abb8 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0006abc4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0006ebf0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0006abd4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0006abe0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0006abf0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0006ebf8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0006ec00 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0006ec08 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0006ec10 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0006ac00 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0006ac0c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0006ec18 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0006ac18 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0006ac24 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0006ac30 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0006ac3c l     O .rodata	0000000a _ZL17pstrUsageACResize
0006ac48 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0006ac54 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0006ac60 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0006ac6c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0006ac78 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0006ac84 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0006ac90 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0006ac9c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0006acac l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0006acbc l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0006accc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0006acdc l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0006ace8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0006acf8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0006ad04 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0006ad14 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0006ad24 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0006ad34 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0006ad40 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0006ad4c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0006ad58 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0006ad64 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0006ec20 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0006ec28 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0006ad70 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0006ec30 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0006ec38 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0006ad7c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0006ec40 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0006ad88 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0006ad98 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0006ada4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0006adb4 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0006adc4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0006add4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0006ec48 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0006ec50 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0006ade0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0006ec58 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0006adec l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0006adf8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0006ae08 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0006ae14 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0006ae24 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0006ae30 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0006ae3c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0006ae48 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0006ae54 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0006ae60 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0006ae6c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0006ec60 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0006ec68 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0006ae78 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0006ae84 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0006ec70 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0006ae94 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0006aea0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0006aeac l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0006aebc l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0006aecc l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0006aed8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0006aee4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0006aef0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0006ec78 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0006aefc l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0006af08 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0006af14 l     O .rodata	00000009 _ZL16pstrUsageACReply
0006af20 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0006af30 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0006ec80 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0006af3c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0006ec88 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0006ec90 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0006af48 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0006af54 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0006af60 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0006af6c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0006af78 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0006af84 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0006af90 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0006af9c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0006afa8 l     O .rodata	0000000a _ZL17pstrUsageACRename
0006afb4 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0006afc0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0006afcc l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0006afd8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0006afe4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0006ec98 l     O .rwdata	00000004 _ZL12pstrUsagePen
0006aff0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0006affc l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0006b008 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0006b014 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0006b020 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0006ec9c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0006b030 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0006eca4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0006b03c l     O .rodata	00000009 _ZL17pstrUsageArmature
0006b048 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0006b05c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0006ecac l     O .rwdata	00000007 _ZL15pstrUsageStylus
0006ecb4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0006ecbc l     O .rwdata	00000007 _ZL15pstrUsageFinger
0006b06c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0006b078 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0006b084 l     O .rodata	00000009 _ZL16pstrUsageInRange
0006ecc4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0006eccc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0006ecd4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0006ecd8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0006b090 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0006b09c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0006b0ac l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0006b0bc l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0006ece0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0006ece8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0006ecf0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0006ecf8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0006b0cc l     O .rodata	00000009 _ZL17pstrUsageAltitude
0006ed00 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0006ed08 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0006b0d8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0006ed10 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0006ed18 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0006b0e4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0006b0f0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0006b100 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0006b10c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0006b11c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0006b128 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0006b138 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0006b144 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0006b154 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0006b160 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0006b170 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0006b180 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0006b18c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0006b198 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0006b1a4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0006b1b0 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0006b1bc l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0006b1c8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0006b1d4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0006b1e4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0006b1f4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0006ed20 l     O .rwdata	00000004 _ZL12pstrUsageRow
0006ed24 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0006ed28 l     O .rwdata	00000005 _ZL13pstrUsageRows
0006ed30 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0006b200 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0006b20c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0006b218 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0006b224 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0006ed38 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0006b230 l     O .rodata	00000009 _ZL17pstrUsageFontData
0006b23c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0006b248 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0006b254 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0006b264 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0006b274 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0006b284 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0006b290 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0006b29c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0006b2a8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0006b2b4 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0006b2c0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0006b2cc l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0006b2d8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0006b2e4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0006b2f0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0006b300 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0006b310 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0006b320 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0006b32c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0006b338 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0006b348 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0006ed40 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0006b354 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0006b364 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0006b374 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0006b380 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0006b38c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0006b39c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0006b3ac l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0006b3bc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0006b3cc l     O .rodata	0000000a _ZL17pstrUsageBlitData
0006b3d8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0006b3e4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0006b3f0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0006b400 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0006b410 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0006b420 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0006b430 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0006ed48 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0006ed50 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0006b440 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0006ed58 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0006ed60 l     O .rwdata	00000005 _ZL13pstrUsageNext
0006ed68 l     O .rwdata	00000005 _ZL13pstrUsageSave
0006ed70 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0006b44c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0006ed78 l     O .rwdata	00000005 _ZL13pstrUsageCine
0006b458 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0006ed80 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0006ed88 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0006b464 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0006b474 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0006b484 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0006b494 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0006b4a0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0006b4ac l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0006b4c0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0006b4d4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0006b4e8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0006b4fc l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0006b50c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0006b51c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0006b528 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0006b534 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0006b544 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0006b552 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0006b562 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0007200c l     O .bss	00000004 _ZL5synth
0004af60 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0004afc8 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0004c1fc l     F .text	000000a4 _ZL21size_of_encoded_valueh
0004c2a0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0004c4ac l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0004c500 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0004c58c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0004c6c0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0004c748 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0004c974 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0004d24c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0004d534 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00072184 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0004d5ec l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0004d79c l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00072020 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0004f038 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00072028 l     O .bss	00000004 fc_static
0004f150 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0004f210 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0006bc24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0006ba02 l     O .rodata	00000010 zeroes.4389
0006ba12 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0006ba22 l     O .rodata	00000010 zeroes.4404
00054d70 l     F .text	000000bc __sbprintf
0006ba32 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00054f80 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00056ad8 l     F .text	00000008 __fp_unlock
00056aec l     F .text	0000019c __sinit.part.1
00056c88 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0006c470 l     O .rwdata	00000020 lc_ctype_charset
0006c450 l     O .rwdata	00000020 lc_message_charset
0006c490 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0006ba60 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0006bb84 l     O .rodata	00000010 zeroes.4333
0006bb94 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0005ac88 l     F .text	000000fc __sprint_r.part.0
0006bba4 l     O .rodata	00000010 zeroes.4349
0005c2c4 l     F .text	000000bc __sbprintf
0006bbb4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000600cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000601e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00060240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00060354 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0006043c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000605a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00060694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00060870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0006edf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00060ae4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00060bc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00060d04 l     F .text	00000034 alt_dev_reg
0006c670 l     O .rwdata	00000038 i2c_0
0006c6a8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00060de0 l     F .text	00000110 optional_irq_callback
00060f40 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00062c1c l     F .text	0000020c altera_avalon_jtag_uart_irq
00062e28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0006365c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000639f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00063ee4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00064044 l     F .text	0000003c alt_get_errno
00064080 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00072060 g     O .bss	00000004 alt_instruction_exception_handler
0004d6f4 g     F .text	00000028 __cxa_free_exception
00064e70  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
00050138 g     F .text	00000018 putchar
0004bd50 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00058d24 g     F .text	00000074 _mprec_log10
00044840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0004c19c g     F .text	00000018 _ZSt10unexpectedv
00058e10 g     F .text	0000008c __any_on
0005c9d0 g     F .text	00000054 _isatty_r
0006ba6c g     O .rodata	00000028 __mprec_tinytens
000607ac g     F .text	0000007c alt_main
00046f4c g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
00050150 g     F .text	000000c0 _puts_r
00040704 g     F .text	00000058 _ZN3USBC1Ev
000473c8 g     F .text	00000070 _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
000721bc g     O .bss	00000100 alt_irq
0004d890 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000498b4 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0005ca24 g     F .text	00000060 _lseek_r
0004f2cc g     F .text	00000020 .hidden _Unwind_GetIPInfo
0006ee10 g       *ABS*	00000000 __flash_rwdata_start
00046790 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0005eb08 g     F .text	00000088 .hidden __eqdf2
00044840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000428cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0004d320 g     F .text	00000084 __cxa_rethrow
0004f258 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0004c1d8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00047190 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0004f2bc g     F .text	00000010 .hidden _Unwind_GetIP
000722bc g       *ABS*	00000000 __alt_heap_start
000491f4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0005051c g     F .text	0000005c _kill_r
00047438 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
000500f4 g     F .text	0000003c printf
00064e94  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0005cae4 g     F .text	0000009c _wcrtomb_r
000502e4 g     F .text	00000084 _signal_r
00046518  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000596b4 g     F .text	0000005c __sseek
00056e38 g     F .text	00000010 __sinit
0005c380 g     F .text	00000140 __swbuf_r
000455b4 g     F .text	000000a8 _Z8set_notehhh
00049f10 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0004d770 g     F .text	0000002c __cxa_free_dependent_exception
0004b0a4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000447e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
0005790c g     F .text	0000007c _setlocale_r
0006b648  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00056c90 g     F .text	00000078 __sfmoreglue
00061638 g     F .text	000000a8 alt_avalon_i2c_rx_read
0006084c g     F .text	00000024 __malloc_unlock
0004d890 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00048b44 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0004bad8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000492dc  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00041ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0004d514 g     F .text	00000020 _ZSt18uncaught_exceptionv
0004dfa4 g     F .text	00000440 .hidden __divsf3
00062850 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00041d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0004a2dc g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0006ed9c g     O .rwdata	00000004 peak_sus
0004bdcc g     F .text	00000020 __cxa_deleted_virtual
000613bc g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00042d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
000493a0 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00049d28 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00057c88 g     F .text	0000015c memmove
0006ed8e g     O .rwdata	00000002 sus_h
00046234  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0004d868 g     F .text	00000004 _ZNSt9exceptionD2Ev
00056e20 g     F .text	00000018 _cleanup
000620a0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00057de4 g     F .text	000000a8 _Balloc
0004edb4 g     F .text	00000070 .hidden __fixsfsi
00043e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0005eb90 g     F .text	000000dc .hidden __gtdf2
00043f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0006b87c  w    O .rodata	00000014 _ZTVSt13bad_exception
000646d4 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00060b20 g     F .text	00000078 times
0004925c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0004f308 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0006d724  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00040020 g       *ABS*	00000000 __flash_exceptions_start
00048ac8 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00040390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00044d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0005c974 g     F .text	0000005c _fstat_r
00049a04 g     F .text	00000088 _ZN8MAX3421e5regWrEhh
00040a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00072038 g     O .bss	00000004 errno
00045f74 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00059630 g     F .text	00000008 __seofread
000495b0 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
000598e8 g     F .text	000013a0 ___svfiprintf_internal_r
0004f4e4 g     F .text	00000074 .hidden _Unwind_Backtrace
0007204c g     O .bss	00000004 alt_argv
000434cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00075708 g       *ABS*	00000000 _gp
00060b98 g     F .text	00000030 usleep
00062894 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0004e8d0 g     F .text	000004e4 .hidden __subsf3
00048454 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0006debc  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0006ed94 g     O .rwdata	00000002 rel_l
00072014 g     O .bss	00000002 att_h
00060334 g     F .text	00000020 getpid
0004d01c g     F .text	00000230 __cxa_call_unexpected
0004d3a4 g     F .text	00000008 __cxa_get_exception_ptr
0006154c g     F .text	00000044 alt_avalon_i2c_is_busy
0006c4f0 g     O .rwdata	00000180 alt_fd_list
00049760 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00064de0  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00047438 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00040684 g     F .text	00000058 _Z5delaym
00044618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
00050130 g     F .text	00000008 _putchar_r
0004f3f8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
000612f0 g     F .text	000000cc alt_avalon_i2c_master_config_set
00041c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0004f288 g     F .text	00000018 .hidden _Unwind_GetCFA
0004c1b4 g     F .text	00000014 _ZSt13set_terminatePFvvE
00063b94 g     F .text	00000090 alt_find_dev
00064dd4  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00052a70 g     F .text	00000008 _times_r
0004fe54 g     F .text	00000148 memcpy
00040788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
000462fc  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000403cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0004d71c g     F .text	00000054 __cxa_allocate_dependent_exception
00056ae0 g     F .text	0000000c _cleanup_r
0004be64 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0005ff48 g     F .text	000000dc .hidden __floatsidf
00064e88  w    O .rodata	0000000c _ZTV13USBReadParser
00063fc8 g     F .text	0000007c alt_io_redirect
0005ec6c g     F .text	000000f4 .hidden __ltdf2
00044b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000407ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00064d00 g       *ABS*	00000000 __DTOR_END__
0004be7c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00061ee0 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00050210 g     F .text	00000014 puts
0006b6d0  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000648c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000484dc g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000497e8 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00059568 g     F .text	00000074 __fpclassifyd
0004a464 g     F .text	00000990 _Z9MIDI_pollv
00058c80 g     F .text	000000a4 __ratio
0005c2a8 g     F .text	0000001c __vfiprintf_internal
00047f58 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00063020 g     F .text	0000021c altera_avalon_jtag_uart_read
0004f620 g     F .text	00000014 malloc
000500c4 g     F .text	00000030 _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004d9f8 g     F .text	00000064 .hidden __udivsi3
00060390 g     F .text	000000ac isatty
00050368 g     F .text	000000bc _raise_r
000499a4 g     F .text	0000003c _ZN8MAX3421eC2Ev
0006babc g     O .rodata	000000c8 __mprec_tens
000471fc g     F .text	000001cc _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
00057988 g     F .text	0000000c __locale_charset
00040704 g     F .text	00000058 _ZN3USBC2Ev
00044b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0006115c g     F .text	00000098 alt_avalon_i2c_enable
00072034 g     O .bss	00000004 __malloc_top_pad
00050578 g     F .text	00000004 _getpid_r
00062784 g     F .text	00000068 alt_avalon_i2c_int_disable
00072008 g     O .bss	00000001 usb_task_state
0006edd8 g     O .rwdata	00000004 __mb_cur_max
000579b8 g     F .text	0000000c _localeconv_r
0004b368 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00043e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
000475b8 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00058218 g     F .text	0000003c __i2b
000572bc g     F .text	000004c8 __sfvwrite_r
0004bffc g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00050424 g     F .text	000000a8 __sigtramp_r
00048810 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00042df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
00050224 g     F .text	00000054 _sbrk_r
0006b718  w    O .rodata	00000020 _ZTVSt9type_info
00044c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00049648 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0005ca84 g     F .text	00000060 _read_r
0004d870 g     F .text	0000000c _ZNKSt9exception4whatEv
0006edf0 g     O .rwdata	00000004 alt_max_fd
000465e8 g     F .text	00000050 _Z9E_Notifycci
00048950 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0005c668 g     F .text	000000f0 _fclose_r
00056aa8 g     F .text	00000030 fflush
0004a374 g     F .text	00000078 _Z6onInitv
00072030 g     O .bss	00000004 __malloc_max_sbrked_mem
00049ca4 g     F .text	00000084 _ZN8MAX3421e7bytesRdEhhPh
000622ac g     F .text	00000210 alt_avalon_i2c_master_receive
000672d0  w    O .rodata	0000000b _ZTS9USBH_MIDI
0005d88c g     F .text	000008ac .hidden __adddf3
0006b67c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00044c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
000490a8 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00058a28 g     F .text	0000010c __b2d
0005d2c8 g     F .text	000005c4 .hidden __umoddi3
000606d0 g     F .text	000000dc lseek
00046324  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0004bec0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00046740 g     F .text	00000028 _Z8E_Notifyhi
0004bda8 g     F .text	00000004 _ZdlPv
000627ec g     F .text	00000064 alt_avalon_i2c_int_enable
0006edc8 g     O .rwdata	00000004 _global_impure_ptr
0004b378 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00059004 g     F .text	00000564 _realloc_r
000722bc g       *ABS*	00000000 __bss_end
00063df4 g     F .text	000000f0 alt_iic_isr_register
000645cc g     F .text	00000108 alt_tick
0004035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0004f240 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0005cccc g     F .text	000005fc .hidden __udivdi3
000626ac g     F .text	00000058 alt_avalon_i2c_int_status_get
0005c8d0 g     F .text	00000024 _fputwc_r
0006ba94 g     O .rodata	00000028 __mprec_bigtens
00057ffc g     F .text	00000104 __s2b
0004f5bc g     F .text	00000018 abort
00060024 g     F .text	000000a8 .hidden __floatunsidf
000670b4  w    O .rodata	00000014 _ZTS17MouseReportParser
00058768 g     F .text	00000060 __mcmp
000406dc g     F .text	00000028 _Z6millisv
00049318  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000436b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0004d460 g     F .text	000000b4 __cxa_end_catch
000496dc g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00056e58 g     F .text	00000018 __fp_lock_all
00064ecc  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00063da8 g     F .text	0000004c alt_ic_irq_enabled
0004d86c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000430c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
000462d4  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00064530 g     F .text	0000009c alt_alarm_stop
00040320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
0006725c  w    O .rodata	0000003c _ZTV9USBH_MIDI
000407e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
00060fdc g     F .text	00000054 alt_avalon_i2c_register_callback
00072054 g     O .bss	00000004 alt_irq_active
00061030 g     F .text	000000ec alt_avalon_i2c_init
0004c174 g     F .text	00000018 _ZSt9terminatev
000400fc g     F .exceptions	000000d4 alt_irq_handler
0006c4c8 g     O .rwdata	00000028 alt_dev_null
0004b3ac g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0004654c  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0004d898 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00044ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0004326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00042b94 g     F .text	00000084 _ZN3USB7setConfEhhh
00072018 g     O .bss	00000002 rel_h
000491ec g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0006b774  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000408f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000639d4 g     F .text	00000020 alt_dcache_flush_all
00058100 g     F .text	00000068 __hi0bits
000672dc  w    O .rodata	0000000c _ZTI14MidiDescParser
00049ee8 g     F .text	00000028 _Z10Vbus_powerb
0006edb0  w    O .rwdata	00000008 _ZTISt9exception
0005fec8 g     F .text	00000080 .hidden __fixdfsi
000670c8  w    O .rodata	00000012 _ZTS15HIDReportParser
0004aff8  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00041240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0006ee10 g       *ABS*	00000000 __ram_rwdata_end
0004bd4c g     F .text	00000004 _ZNSt9type_infoD1Ev
0006ede8 g     O .rwdata	00000008 alt_dev_list
0004d898 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00060c04 g     F .text	00000100 write
00058e9c g     F .text	000000a0 _putc_r
0004a350 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0006196c g     F .text	0000004c alt_avalon_i2c_check_arblost
0004bd60 g     F .text	00000004 _ZNSt9type_infoD0Ev
00044d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0004e3e4 g     F .text	000000bc .hidden __gtsf2
00062748 g     F .text	0000003c alt_avalon_i2c_int_clear
00049374  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00064dc0  w    O .rodata	00000014 _ZTV11AddressPool
0006bc24 g       *ABS*	00000000 __ram_rodata_end
0006027c g     F .text	000000b8 fstat
00042c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
00060478 g     F .text	00000130 kill
000465c4  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0005ec6c g     F .text	000000f4 .hidden __ledf2
00064ef4  w    O .rodata	00000020 _ZTI7XBOXONE
0006edfc g     O .rwdata	00000008 alt_avalon_i2c_list
00044aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00046b90 g     F .text	000000ac _Z13I2Creg_DAP_wrP20ALT_AVALON_I2C_DEV_sht
0006700e g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
000584e0 g     F .text	00000140 __pow5mult
00045088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
0005ad9c g     F .text	0000150c ___vfiprintf_internal_r
00072044 g     O .bss	00000004 __nlocale_changed
0004da5c g     F .text	00000058 .hidden __umodsi3
0004bd58 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0004487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0004a3ec g     F .text	00000078 _Z10MIDI_setupv
0004270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0004c1c8 g     F .text	00000010 _ZSt13get_terminatev
000722bc g       *ABS*	00000000 end
00064e7c  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00044e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00049bbc g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
000464e4  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0004f4cc g     F .text	00000018 .hidden _Unwind_DeleteException
00062b5c g     F .text	000000c0 altera_avalon_jtag_uart_init
000462ac  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0006111c g     F .text	00000040 alt_avalon_i2c_open
00067024 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0007201c g     O .bss	00000001 ped_flip
0004bf2c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0004b368 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0006deb0 g     O .rwdata	00000004 UsbDEBUGlvl
00064cf8 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
00061af4 g     F .text	000000e8 alt_avalon_i2c_master_tx
000636d4 g     F .text	0000007c alt_avalon_timer_sc_init
0004f558 g     F .text	00000064 .hidden __clzsi2
0004bdec g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0006323c g     F .text	00000224 altera_avalon_jtag_uart_write
00056e48 g     F .text	00000004 __sfp_lock_acquire
0006b804  w    O .rodata	00000012 _ZTSSt13bad_exception
00057ba4 g     F .text	000000e4 memchr
00052a78 g     F .text	000022dc ___vfprintf_internal_r
0005057c g     F .text	00000058 _sprintf_r
000447e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00056fac g     F .text	00000310 _free_r
000642c8 g     F .text	0000022c alt_printf
00057994 g     F .text	00000010 __locale_mb_cur_max
00064b40 g     F .text	00000180 __call_exitprocs
00040408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00072040 g     O .bss	00000004 __mlocale_changed
0006ed92 g     O .rwdata	00000002 dec_l
00060ef0 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0006edd0 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00043e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00072058 g     O .bss	00000004 _alt_tick_rate
0006b708  w    O .rodata	0000000d _ZTSSt9type_info
000624bc g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0004bdac g     F .text	00000020 __cxa_pure_virtual
00064dac  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00064f34  w    O .rodata	00000010 _ZTS13USBReadParser
000628e0 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00058620 g     F .text	00000148 __lshift
00063460 g     F .text	000001fc alt_avalon_spi_command
0007205c g     O .bss	00000004 _alt_nticks
000504e0 g     F .text	00000018 signal
000608ac g     F .text	00000104 read
00045a9c g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
00060d70 g     F .text	00000070 alt_sys_init
00064e30  w    O .rodata	00000040 _ZTV7XBOXONE
0004ee24 g     F .text	00000124 .hidden __floatsisf
00059718 g     F .text	000001d0 __ssprint_r
000412f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0004052c g     F .text	00000158 _Z14alt_busy_sleepj
00064a28 g     F .text	00000118 __register_exitproc
00042b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00046638 g     F .text	00000084 _Z8E_NotifyPKci
00067298  w    O .rodata	0000000c _ZTV14MidiDescParser
00049284  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00043300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0004b0e8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000464b0  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00044ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00061d18 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00058254 g     F .text	0000028c __multiply
00042a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0006de9e g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00062ec8 g     F .text	00000068 altera_avalon_jtag_uart_close
00042c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0004dab4 g     F .text	00000028 .hidden __mulsi3
0006bc24 g       *ABS*	00000000 __ram_rwdata_start
0004f328 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0004565c g     F .text	00000064 _Z8set_ctrlhhm
00064d00 g       *ABS*	00000000 __ram_rodata_start
00072194 g     O .bss	00000028 __malloc_current_mallinfo
00044f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0004f43c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00058b34 g     F .text	0000014c __d2b
0006b8a4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0004bd4c g     F .text	00000004 _ZNSt9type_infoD2Ev
00049234  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00044938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0006d710  w    O .rwdata	00000008 _ZTI11AddressPool
0004d89c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0004b2e4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000672e8  w    O .rodata	00000011 _ZTS14MidiDescParser
0006b6a8  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
000629f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00064800 g     F .text	000000c4 alt_get_fd
00045cb8 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0006387c g     F .text	00000158 alt_busy_sleep
00046c3c g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0006edc0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0005c538 g     F .text	00000054 _close_r
00046e9c g     F .text	000000b0 _Z13I2Creg_DAP_rdP20ALT_AVALON_I2C_DEV_sh
000649ac g     F .text	0000007c memcmp
00061590 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00062ab8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004802c g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000722bc g       *ABS*	00000000 __alt_stack_base
00062b08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004b0a4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00048294 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00044578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00054e2c g     F .text	00000154 __swsetup_r
0004f480 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00072010 g     O .bss	00000004 i2c_dev
0005e138 g     F .text	000009d0 .hidden __divdf3
0004b048  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00056d08 g     F .text	00000118 __sfp
00058d98 g     F .text	00000078 __copybits
0004bd50 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0006c048 g     O .rwdata	00000408 __malloc_av_
000448fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00040444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00056e54 g     F .text	00000004 __sinit_lock_release
0005ed60 g     F .text	0000086c .hidden __muldf3
000595dc g     F .text	00000054 __sread
00044ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
0006b868  w    O .rodata	00000014 _ZTVSt9exception
0004d894 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00042c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
000646f8 g     F .text	00000108 alt_find_file
00044be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00063a30 g     F .text	000000a4 alt_dev_llist_insert
00060828 g     F .text	00000024 __malloc_lock
00060a34 g     F .text	000000b0 sbrk
000507b4 g     F .text	000022bc ___svfprintf_internal_r
000619b8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00061920 g     F .text	0000004c alt_avalon_i2c_check_nack
0006b7a4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0004d290 g     F .text	00000090 __cxa_throw
00056a4c g     F .text	0000005c _fflush_r
0004f2ec g     F .text	00000010 .hidden _Unwind_SetIP
000470f8 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00040b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0005c58c g     F .text	000000dc _calloc_r
00064f20  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00046768 g     F .text	00000028 _Z8E_Notifydi
00047e50 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00072016 g     O .bss	00000002 dec_h
00071ffc g       *ABS*	00000000 __bss_start
0006d734  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0004ff9c g     F .text	00000128 memset
00048950 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00045104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0004adf4 g     F .text	0000016c main
00049c30 g     F .text	00000074 _ZN8MAX3421e5regRdEh
00049e24 g     F .text	000000c4 _ZN8MAX3421e5resetEv
000618ec g     F .text	00000034 alt_avalon_i2c_master_target_set
00072050 g     O .bss	00000004 alt_envp
00064f44  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0007202c g     O .bss	00000004 __malloc_max_total_mem
00062a58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00072009 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0005c4c0 g     F .text	00000018 __swbuf
0004d850 g     F .text	0000000c __cxa_get_globals_fast
00062704 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
000499a4 g     F .text	0000003c _ZN8MAX3421eC1Ev
00044ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00042c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00059710 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0005c758 g     F .text	00000014 fclose
0004b070  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0004444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000466bc g     F .text	00000084 _Z11E_NotifyStrPKci
00040480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
000551a8 g     F .text	00001688 _dtoa_r
0004f648 g     F .text	0000080c _malloc_r
0005cc40 g     F .text	00000030 __ascii_wctomb
0004d87c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0006edf4 g     O .rwdata	00000004 alt_errno
000670a8  w    O .rodata	0000000c _ZTI17MouseReportParser
000504f8 g     F .text	00000010 _init_signal
00042960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00046df4 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0006b798  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000446bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00057784 g     F .text	000000c4 _fwalk
000499e0 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00043204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0004d86c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00058f3c g     F .text	000000c8 putc
0004d900 g     F .text	00000084 .hidden __divsi3
000672fc  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00056e88 g     F .text	00000124 _malloc_trim_r
00064d00 g       *ABS*	00000000 __CTOR_END__
0004e4a0 g     F .text	00000430 .hidden __mulsf3
00044adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00049340  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
0006705c  w    O .rodata	00000028 _ZTV17MouseReportParser
00050640 g     F .text	000000dc strcmp
000434cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00064d00 g       *ABS*	00000000 __flash_rodata_start
0006b890  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0004b020  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00064d00 g       *ABS*	00000000 __DTOR_LIST__
000672a4  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0005eb08 g     F .text	00000088 .hidden __nedf2
00060d38 g     F .text	00000038 alt_irq_init
000609b0 g     F .text	00000084 alt_release_fd
0004b0b4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00064f14  w    O .rodata	00000009 _ZTS7XBOXONE
000505d4 g     F .text	0000006c sprintf
0006b8b8 g     O .rodata	00000100 .hidden __clz_tab
0007203c g     O .bss	00000004 _PathLocale
00064960 g     F .text	00000014 atexit
0004e3e4 g     F .text	000000bc .hidden __gesf2
0005c4d8 g     F .text	00000060 _write_r
00042844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00042dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000579c4 g     F .text	00000018 setlocale
000404f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00067030  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00049da8 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0004f320 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0006b6dc  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0004d7f8 g     F .text	00000058 __cxa_call_terminate
0006edcc g     O .rwdata	00000004 _impure_ptr
0006edb8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00064dfc  w    O .rodata	0000000e _ZTS11AddressPool
00072048 g     O .bss	00000004 alt_argc
00043404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00056830 g     F .text	0000021c __sflush_r
00049340  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00043054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00063b34 g     F .text	00000060 _do_dtors
00072120 g     O .bss	00000064 Midi
000579b0 g     F .text	00000008 __locale_cjk_lang
000618b4 g     F .text	00000038 alt_avalon_i2c_master_target_get
000617c4 g     F .text	000000f0 alt_avalon_i2c_send_address
0004c1ec g     F .text	00000010 _ZSt14get_unexpectedv
00040020 g       .exceptions	00000000 alt_irq_entry
00042c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0004075c g     F .text	0000002c _ZN3USB4initEv
000589c4 g     F .text	00000064 __ulp
0004f310 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00056e70 g     F .text	00000018 __fp_unlock_all
00044f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0004453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00044b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0006ede0 g     O .rwdata	00000008 alt_fs_list
0006b844  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00067090  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00044ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0006ed90 g     O .rwdata	00000002 att_l
0004f2fc g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00044bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0004d3ac g     F .text	000000b4 __cxa_begin_catch
00044734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
000456c0 g     F .text	00000314 _Z9calc_adsrttttttttff
0004be7c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0004c18c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00046284  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00040020 g       *ABS*	00000000 __ram_exceptions_start
000579dc g     F .text	0000000c localeconv
0004a10c g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0004026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00044d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0004d88c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00062990 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0006edac g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000404bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00049440 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00063c44 g     F .text	00000050 alt_ic_isr_register
000611f4 g     F .text	0000004c alt_avalon_i2c_disable
0004d694 g     F .text	00000060 __cxa_allocate_exception
0006b670  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0006ee10 g       *ABS*	00000000 _edata
00044e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000722bc g       *ABS*	00000000 _end
0004b4d4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0004ca1c g     F .text	00000600 __gxx_personality_sj0
0005c76c g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
0004181c g     F .text	000003f0 _ZN3USB4TaskEv
00062f30 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000402a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0006d72c  w    O .rwdata	00000008 _ZTI13USBReadParser
00061240 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0004d868 g     F .text	00000004 _ZNSt9exceptionD1Ev
00063d1c g     F .text	0000008c alt_ic_irq_disable
0004620c  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00059638 g     F .text	0000007c __swrite
0006edd4 g     O .rwdata	00000004 __malloc_trim_threshold
000579a4 g     F .text	0000000c __locale_msgcharset
00064974 g     F .text	00000038 exit
0004f2a0 g     F .text	0000001c .hidden _Unwind_SetGR
0004625c  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00057848 g     F .text	000000c4 _fwalk_reent
0004b248 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0004ef48 g     F .text	000000f0 .hidden __floatunsisf
000587c8 g     F .text	000001fc __mdiff
0004c0b4 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0004d984 g     F .text	00000074 .hidden __modsi3
00040f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00056e4c g     F .text	00000004 __sfp_lock_release
0006b818  w    O .rodata	0000000c _ZTISt13bad_exception
00046574  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00043ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00061450 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00049ff4 g     F .text	00000118 _ZN8MAX3421e4InitEi
0004169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
000616e0 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000672b0  w    O .rodata	00000020 _ZTI9USBH_MIDI
000443c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0004d8a0 g     F .text	00000060 .hidden __fixunssfsi
0007201a g     O .bss	00000002 sus_l
00047dd8 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0006020c g     F .text	00000034 _exit
00063750 g     F .text	0000012c alt_alarm_start
00067084  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000483f0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0004f26c g     F .text	0000001c .hidden _Unwind_GetGR
0004d85c g     F .text	0000000c __cxa_get_globals
00046898 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
000579e8 g     F .text	000001bc __smakebuf_r
0006eda8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00044b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0005071c g     F .text	00000098 strlen
00050278 g     F .text	0000006c _init_signal_r
0006eda0  w    O .rwdata	00000008 _ZTISt9type_info
0006416c g     F .text	0000015c open
0005eb90 g     F .text	000000dc .hidden __gedf2
000644f4 g     F .text	0000003c alt_putchar
0006b7f4  w    O .rodata	0000000d _ZTSSt9exception
0004f5d4 g     F .text	0000004c clock
0004659c  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0004a280 g     F .text	0000005c _ZN8MAX3421e4TaskEv
00067018 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00049a8c g     F .text	00000130 _ZN8MAX3421e7bytesWrEhhPh
0006eddc g     O .rwdata	00000004 __wctomb
0004d888 g     F .text	00000004 _ZNSt9exceptionD0Ev
0005ad84 g     F .text	00000018 __sprint_r
00063c24 g     F .text	00000020 alt_icache_flush_all
0004f318 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00072064 g     O .bss	000000bc Usb
0006ee04 g     O .rwdata	00000004 alt_priority_mask
000448fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00063c94 g     F .text	00000088 alt_ic_irq_enable
00054d54 g     F .text	0000001c __vfprintf_internal
000459d4 g     F .text	000000c8 _Z9init_ctrlttttttttff
000402ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0005cc70 g     F .text	0000005c _wctomb_r
0005f5cc g     F .text	000008fc .hidden __subdf3
00040eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00043d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00058168 g     F .text	000000b0 __lo0bits
0006ee08 g     O .rwdata	00000008 alt_alarm_list
00063ad4 g     F .text	00000060 _do_ctors
00064ec0  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
00050508 g     F .text	00000014 __sigtramp
000494f8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0005cb80 g     F .text	000000c0 wcrtomb
00060108 g     F .text	000000d8 close
0004dadc g     F .text	000004c8 .hidden __addsf3
0006ed98 g     O .rwdata	00000004 peak_att
00062944 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0006b824  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00060610 g     F .text	00000084 alt_load
00061bdc g     F .text	0000013c alt_avalon_i2c_master_rx
0004bd64 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000449a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0005c8f4 g     F .text	00000080 fputwc
000504cc g     F .text	00000014 raise
0006dea4  w    O .rwdata	00000008 _ZTI15HIDReportParser
0004f634 g     F .text	00000014 free
00056e50 g     F .text	00000004 __sinit_lock_acquire
00057eb4 g     F .text	00000148 __multadd
0004be8c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00057e8c g     F .text	00000028 _Bfree
00046aec g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001f4 	movhi	r2,7
   40140:	10886f04 	addi	r2,r2,8636
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001f4 	movhi	r2,7
   40158:	10886f04 	addi	r2,r2,8636
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffc012c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0b25617 	ldw	r2,-13992(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0b25617 	ldw	r2,-13992(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40238:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
   4023c:	d695c214 	ori	gp,gp,22280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	008001f4 	movhi	r2,7
    ori r2, r2, %lo(__bss_start)
   40244:	1087ff14 	ori	r2,r2,8188

    movhi r3, %hi(__bss_end)
   40248:	00c001f4 	movhi	r3,7
    ori r3, r3, %lo(__bss_end)
   4024c:	18c8af14 	ori	r3,r3,8892

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffc0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00606100 	call	60610 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00607ac0 	call	607ac <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffc0268>

0004026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
   4026c:	defffd04 	addi	sp,sp,-12
   40270:	dfc00215 	stw	ra,8(sp)
   40274:	df000115 	stw	fp,4(sp)
   40278:	df000104 	addi	fp,sp,4
   4027c:	2005883a 	mov	r2,r4
   40280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
   40284:	010001b4 	movhi	r4,6
   40288:	21134004 	addi	r4,r4,19712
   4028c:	00502100 	call	50210 <puts>
}
   40290:	0001883a 	nop
   40294:	e037883a 	mov	sp,fp
   40298:	dfc00117 	ldw	ra,4(sp)
   4029c:	df000017 	ldw	fp,0(sp)
   402a0:	dec00204 	addi	sp,sp,8
   402a4:	f800283a 	ret

000402a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
   402a8:	defffc04 	addi	sp,sp,-16
   402ac:	dfc00315 	stw	ra,12(sp)
   402b0:	df000215 	stw	fp,8(sp)
   402b4:	df000204 	addi	fp,sp,8
   402b8:	2007883a 	mov	r3,r4
   402bc:	2805883a 	mov	r2,r5
   402c0:	e0fffe05 	stb	r3,-8(fp)
   402c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
   402c8:	010001b4 	movhi	r4,6
   402cc:	21134304 	addi	r4,r4,19724
   402d0:	00502100 	call	50210 <puts>
}
   402d4:	0001883a 	nop
   402d8:	e037883a 	mov	sp,fp
   402dc:	dfc00117 	ldw	ra,4(sp)
   402e0:	df000017 	ldw	fp,0(sp)
   402e4:	dec00204 	addi	sp,sp,8
   402e8:	f800283a 	ret

000402ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
   402ec:	defffe04 	addi	sp,sp,-8
   402f0:	dfc00115 	stw	ra,4(sp)
   402f4:	df000015 	stw	fp,0(sp)
   402f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
   402fc:	010001b4 	movhi	r4,6
   40300:	21134804 	addi	r4,r4,19744
   40304:	00502100 	call	50210 <puts>
}
   40308:	0001883a 	nop
   4030c:	e037883a 	mov	sp,fp
   40310:	dfc00117 	ldw	ra,4(sp)
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00204 	addi	sp,sp,8
   4031c:	f800283a 	ret

00040320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
   40320:	defffd04 	addi	sp,sp,-12
   40324:	dfc00215 	stw	ra,8(sp)
   40328:	df000115 	stw	fp,4(sp)
   4032c:	df000104 	addi	fp,sp,4
   40330:	2005883a 	mov	r2,r4
   40334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
   40338:	010001b4 	movhi	r4,6
   4033c:	21134b04 	addi	r4,r4,19756
   40340:	00502100 	call	50210 <puts>
}
   40344:	0001883a 	nop
   40348:	e037883a 	mov	sp,fp
   4034c:	dfc00117 	ldw	ra,4(sp)
   40350:	df000017 	ldw	fp,0(sp)
   40354:	dec00204 	addi	sp,sp,8
   40358:	f800283a 	ret

0004035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
   4035c:	defffe04 	addi	sp,sp,-8
   40360:	dfc00115 	stw	ra,4(sp)
   40364:	df000015 	stw	fp,0(sp)
   40368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
   4036c:	010001b4 	movhi	r4,6
   40370:	21134f04 	addi	r4,r4,19772
   40374:	00502100 	call	50210 <puts>
}
   40378:	0001883a 	nop
   4037c:	e037883a 	mov	sp,fp
   40380:	dfc00117 	ldw	ra,4(sp)
   40384:	df000017 	ldw	fp,0(sp)
   40388:	dec00204 	addi	sp,sp,8
   4038c:	f800283a 	ret

00040390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
   40390:	defffd04 	addi	sp,sp,-12
   40394:	dfc00215 	stw	ra,8(sp)
   40398:	df000115 	stw	fp,4(sp)
   4039c:	df000104 	addi	fp,sp,4
   403a0:	2005883a 	mov	r2,r4
   403a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
   403a8:	010001b4 	movhi	r4,6
   403ac:	21135304 	addi	r4,r4,19788
   403b0:	00502100 	call	50210 <puts>
}
   403b4:	0001883a 	nop
   403b8:	e037883a 	mov	sp,fp
   403bc:	dfc00117 	ldw	ra,4(sp)
   403c0:	df000017 	ldw	fp,0(sp)
   403c4:	dec00204 	addi	sp,sp,8
   403c8:	f800283a 	ret

000403cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
   403cc:	defffd04 	addi	sp,sp,-12
   403d0:	dfc00215 	stw	ra,8(sp)
   403d4:	df000115 	stw	fp,4(sp)
   403d8:	df000104 	addi	fp,sp,4
   403dc:	2005883a 	mov	r2,r4
   403e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
   403e4:	010001b4 	movhi	r4,6
   403e8:	21135604 	addi	r4,r4,19800
   403ec:	00502100 	call	50210 <puts>
}
   403f0:	0001883a 	nop
   403f4:	e037883a 	mov	sp,fp
   403f8:	dfc00117 	ldw	ra,4(sp)
   403fc:	df000017 	ldw	fp,0(sp)
   40400:	dec00204 	addi	sp,sp,8
   40404:	f800283a 	ret

00040408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
   40408:	defffd04 	addi	sp,sp,-12
   4040c:	dfc00215 	stw	ra,8(sp)
   40410:	df000115 	stw	fp,4(sp)
   40414:	df000104 	addi	fp,sp,4
   40418:	2005883a 	mov	r2,r4
   4041c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
   40420:	010001b4 	movhi	r4,6
   40424:	21135904 	addi	r4,r4,19812
   40428:	00502100 	call	50210 <puts>
}
   4042c:	0001883a 	nop
   40430:	e037883a 	mov	sp,fp
   40434:	dfc00117 	ldw	ra,4(sp)
   40438:	df000017 	ldw	fp,0(sp)
   4043c:	dec00204 	addi	sp,sp,8
   40440:	f800283a 	ret

00040444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
   40444:	defffd04 	addi	sp,sp,-12
   40448:	dfc00215 	stw	ra,8(sp)
   4044c:	df000115 	stw	fp,4(sp)
   40450:	df000104 	addi	fp,sp,4
   40454:	2005883a 	mov	r2,r4
   40458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
   4045c:	010001b4 	movhi	r4,6
   40460:	21135c04 	addi	r4,r4,19824
   40464:	00502100 	call	50210 <puts>
}
   40468:	0001883a 	nop
   4046c:	e037883a 	mov	sp,fp
   40470:	dfc00117 	ldw	ra,4(sp)
   40474:	df000017 	ldw	fp,0(sp)
   40478:	dec00204 	addi	sp,sp,8
   4047c:	f800283a 	ret

00040480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
   40480:	defffd04 	addi	sp,sp,-12
   40484:	dfc00215 	stw	ra,8(sp)
   40488:	df000115 	stw	fp,4(sp)
   4048c:	df000104 	addi	fp,sp,4
   40490:	2005883a 	mov	r2,r4
   40494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
   40498:	010001b4 	movhi	r4,6
   4049c:	21135f04 	addi	r4,r4,19836
   404a0:	00502100 	call	50210 <puts>
}
   404a4:	0001883a 	nop
   404a8:	e037883a 	mov	sp,fp
   404ac:	dfc00117 	ldw	ra,4(sp)
   404b0:	df000017 	ldw	fp,0(sp)
   404b4:	dec00204 	addi	sp,sp,8
   404b8:	f800283a 	ret

000404bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
   404bc:	defffd04 	addi	sp,sp,-12
   404c0:	dfc00215 	stw	ra,8(sp)
   404c4:	df000115 	stw	fp,4(sp)
   404c8:	df000104 	addi	fp,sp,4
   404cc:	2005883a 	mov	r2,r4
   404d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
   404d4:	010001b4 	movhi	r4,6
   404d8:	21136304 	addi	r4,r4,19852
   404dc:	00502100 	call	50210 <puts>
}
   404e0:	0001883a 	nop
   404e4:	e037883a 	mov	sp,fp
   404e8:	dfc00117 	ldw	ra,4(sp)
   404ec:	df000017 	ldw	fp,0(sp)
   404f0:	dec00204 	addi	sp,sp,8
   404f4:	f800283a 	ret

000404f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
   404f8:	defffe04 	addi	sp,sp,-8
   404fc:	dfc00115 	stw	ra,4(sp)
   40500:	df000015 	stw	fp,0(sp)
   40504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
   40508:	010001b4 	movhi	r4,6
   4050c:	21136704 	addi	r4,r4,19868
   40510:	00502100 	call	50210 <puts>
}
   40514:	0001883a 	nop
   40518:	e037883a 	mov	sp,fp
   4051c:	dfc00117 	ldw	ra,4(sp)
   40520:	df000017 	ldw	fp,0(sp)
   40524:	dec00204 	addi	sp,sp,8
   40528:	f800283a 	ret

0004052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4052c:	defffa04 	addi	sp,sp,-24
   40530:	dfc00515 	stw	ra,20(sp)
   40534:	df000415 	stw	fp,16(sp)
   40538:	df000404 	addi	fp,sp,16
   4053c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   40540:	00800244 	movi	r2,9
   40544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   40548:	014003f4 	movhi	r5,15
   4054c:	29509004 	addi	r5,r5,16960
   40550:	e13ffd17 	ldw	r4,-12(fp)
   40554:	004dab40 	call	4dab4 <__mulsi3>
   40558:	100b883a 	mov	r5,r2
   4055c:	01017db4 	movhi	r4,1526
   40560:	21384004 	addi	r4,r4,-7936
   40564:	004d9f80 	call	4d9f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
   40568:	100b883a 	mov	r5,r2
   4056c:	01200034 	movhi	r4,32768
   40570:	213fffc4 	addi	r4,r4,-1
   40574:	004d9f80 	call	4d9f8 <__udivsi3>
   40578:	100b883a 	mov	r5,r2
   4057c:	e13fff17 	ldw	r4,-4(fp)
   40580:	004d9f80 	call	4d9f8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   40584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
   40588:	e0bffe17 	ldw	r2,-8(fp)
   4058c:	10002a26 	beq	r2,zero,40638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
   40590:	e03ffc15 	stw	zero,-16(fp)
   40594:	e0fffc17 	ldw	r3,-16(fp)
   40598:	e0bffe17 	ldw	r2,-8(fp)
   4059c:	1880180e 	bge	r3,r2,40600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
   405a0:	00a00034 	movhi	r2,32768
   405a4:	10bfffc4 	addi	r2,r2,-1
   405a8:	10bfffc4 	addi	r2,r2,-1
   405ac:	103ffe1e 	bne	r2,zero,405a8 <__alt_data_end+0xfffc05a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   405b0:	014003f4 	movhi	r5,15
   405b4:	29509004 	addi	r5,r5,16960
   405b8:	e13ffd17 	ldw	r4,-12(fp)
   405bc:	004dab40 	call	4dab4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   405c0:	100b883a 	mov	r5,r2
   405c4:	01017db4 	movhi	r4,1526
   405c8:	21384004 	addi	r4,r4,-7936
   405cc:	004d9f80 	call	4d9f8 <__udivsi3>
   405d0:	100b883a 	mov	r5,r2
   405d4:	01200034 	movhi	r4,32768
   405d8:	213fffc4 	addi	r4,r4,-1
   405dc:	004d9f80 	call	4d9f8 <__udivsi3>
   405e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
   405e4:	e0bfff17 	ldw	r2,-4(fp)
   405e8:	10c5c83a 	sub	r2,r2,r3
   405ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   405f0:	e0bffc17 	ldw	r2,-16(fp)
   405f4:	10800044 	addi	r2,r2,1
   405f8:	e0bffc15 	stw	r2,-16(fp)
   405fc:	003fe506 	br	40594 <__alt_data_end+0xfffc0594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   40600:	014003f4 	movhi	r5,15
   40604:	29509004 	addi	r5,r5,16960
   40608:	e13ffd17 	ldw	r4,-12(fp)
   4060c:	004dab40 	call	4dab4 <__mulsi3>
   40610:	100b883a 	mov	r5,r2
   40614:	01017db4 	movhi	r4,1526
   40618:	21384004 	addi	r4,r4,-7936
   4061c:	004d9f80 	call	4d9f8 <__udivsi3>
   40620:	e17fff17 	ldw	r5,-4(fp)
   40624:	1009883a 	mov	r4,r2
   40628:	004dab40 	call	4dab4 <__mulsi3>
   4062c:	10bfffc4 	addi	r2,r2,-1
   40630:	103ffe1e 	bne	r2,zero,4062c <__alt_data_end+0xfffc062c>
   40634:	00000d06 	br	4066c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   40638:	014003f4 	movhi	r5,15
   4063c:	29509004 	addi	r5,r5,16960
   40640:	e13ffd17 	ldw	r4,-12(fp)
   40644:	004dab40 	call	4dab4 <__mulsi3>
   40648:	100b883a 	mov	r5,r2
   4064c:	01017db4 	movhi	r4,1526
   40650:	21384004 	addi	r4,r4,-7936
   40654:	004d9f80 	call	4d9f8 <__udivsi3>
   40658:	e17fff17 	ldw	r5,-4(fp)
   4065c:	1009883a 	mov	r4,r2
   40660:	004dab40 	call	4dab4 <__mulsi3>
   40664:	10bfffc4 	addi	r2,r2,-1
   40668:	00bffe16 	blt	zero,r2,40664 <__alt_data_end+0xfffc0664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4066c:	0005883a 	mov	r2,zero
}
   40670:	e037883a 	mov	sp,fp
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	df000017 	ldw	fp,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
   40680:	f800283a 	ret

00040684 <_Z5delaym>:

void delay(uint32_t a) {
   40684:	defffc04 	addi	sp,sp,-16
   40688:	dfc00315 	stw	ra,12(sp)
   4068c:	df000215 	stw	fp,8(sp)
   40690:	df000204 	addi	fp,sp,8
   40694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
   40698:	004f5d40 	call	4f5d4 <clock>
   4069c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
   406a0:	004f5d40 	call	4f5d4 <clock>
   406a4:	1007883a 	mov	r3,r2
   406a8:	e0bffe17 	ldw	r2,-8(fp)
   406ac:	1887c83a 	sub	r3,r3,r2
   406b0:	e0bfff17 	ldw	r2,-4(fp)
   406b4:	1885803a 	cmpltu	r2,r3,r2
   406b8:	10803fcc 	andi	r2,r2,255
   406bc:	10000126 	beq	r2,zero,406c4 <_Z5delaym+0x40>
   406c0:	003ff706 	br	406a0 <__alt_data_end+0xfffc06a0>
}
   406c4:	0001883a 	nop
   406c8:	e037883a 	mov	sp,fp
   406cc:	dfc00117 	ldw	ra,4(sp)
   406d0:	df000017 	ldw	fp,0(sp)
   406d4:	dec00204 	addi	sp,sp,8
   406d8:	f800283a 	ret

000406dc <_Z6millisv>:
uint32_t millis() {
   406dc:	defffe04 	addi	sp,sp,-8
   406e0:	dfc00115 	stw	ra,4(sp)
   406e4:	df000015 	stw	fp,0(sp)
   406e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
   406ec:	004f5d40 	call	4f5d4 <clock>
}
   406f0:	e037883a 	mov	sp,fp
   406f4:	dfc00117 	ldw	ra,4(sp)
   406f8:	df000017 	ldw	fp,0(sp)
   406fc:	dec00204 	addi	sp,sp,8
   40700:	f800283a 	ret

00040704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
   40704:	defffd04 	addi	sp,sp,-12
   40708:	dfc00215 	stw	ra,8(sp)
   4070c:	df000115 	stw	fp,4(sp)
   40710:	df000104 	addi	fp,sp,4
   40714:	e13fff15 	stw	r4,-4(fp)
   40718:	e13fff17 	ldw	r4,-4(fp)
   4071c:	00499a40 	call	499a4 <_ZN8MAX3421eC1Ev>
   40720:	e0bfff17 	ldw	r2,-4(fp)
   40724:	1009883a 	mov	r4,r2
   40728:	0042c700 	call	42c70 <_ZN15AddressPoolImplILh16EEC1Ev>
   4072c:	e0bfff17 	ldw	r2,-4(fp)
   40730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
   40734:	00800444 	movi	r2,17
   40738:	d0b23d45 	stb	r2,-14091(gp)
        init();
   4073c:	e13fff17 	ldw	r4,-4(fp)
   40740:	004075c0 	call	4075c <_ZN3USB4initEv>
}
   40744:	0001883a 	nop
   40748:	e037883a 	mov	sp,fp
   4074c:	dfc00117 	ldw	ra,4(sp)
   40750:	df000017 	ldw	fp,0(sp)
   40754:	dec00204 	addi	sp,sp,8
   40758:	f800283a 	ret

0004075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
   4075c:	defffe04 	addi	sp,sp,-8
   40760:	df000115 	stw	fp,4(sp)
   40764:	df000104 	addi	fp,sp,4
   40768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
   4076c:	e0bfff17 	ldw	r2,-4(fp)
   40770:	10002e05 	stb	zero,184(r2)
}
   40774:	0001883a 	nop
   40778:	e037883a 	mov	sp,fp
   4077c:	df000017 	ldw	fp,0(sp)
   40780:	dec00104 	addi	sp,sp,4
   40784:	f800283a 	ret

00040788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
   40788:	defffe04 	addi	sp,sp,-8
   4078c:	df000115 	stw	fp,4(sp)
   40790:	df000104 	addi	fp,sp,4
   40794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
   40798:	d0b23d43 	ldbu	r2,-14091(gp)
}
   4079c:	e037883a 	mov	sp,fp
   407a0:	df000017 	ldw	fp,0(sp)
   407a4:	dec00104 	addi	sp,sp,4
   407a8:	f800283a 	ret

000407ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
   407ac:	defffd04 	addi	sp,sp,-12
   407b0:	df000215 	stw	fp,8(sp)
   407b4:	df000204 	addi	fp,sp,8
   407b8:	e13ffe15 	stw	r4,-8(fp)
   407bc:	2805883a 	mov	r2,r5
   407c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
   407c4:	e0bfff03 	ldbu	r2,-4(fp)
   407c8:	d0b23d45 	stb	r2,-14091(gp)
}
   407cc:	0001883a 	nop
   407d0:	e037883a 	mov	sp,fp
   407d4:	df000017 	ldw	fp,0(sp)
   407d8:	dec00104 	addi	sp,sp,4
   407dc:	f800283a 	ret

000407e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
   407e0:	defff804 	addi	sp,sp,-32
   407e4:	dfc00715 	stw	ra,28(sp)
   407e8:	df000615 	stw	fp,24(sp)
   407ec:	df000604 	addi	fp,sp,24
   407f0:	e13ffd15 	stw	r4,-12(fp)
   407f4:	2807883a 	mov	r3,r5
   407f8:	3005883a 	mov	r2,r6
   407fc:	e0fffe05 	stb	r3,-8(fp)
   40800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
   40804:	e0bffd17 	ldw	r2,-12(fp)
   40808:	e0fffe03 	ldbu	r3,-8(fp)
   4080c:	180b883a 	mov	r5,r3
   40810:	1009883a 	mov	r4,r2
   40814:	0042d3c0 	call	42d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
   40818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
   4081c:	e0bffc17 	ldw	r2,-16(fp)
   40820:	10000c26 	beq	r2,zero,40854 <_ZN3USB14getEpInfoEntryEhh+0x74>
   40824:	e0bffc17 	ldw	r2,-16(fp)
   40828:	10c00003 	ldbu	r3,0(r2)
   4082c:	11000043 	ldbu	r4,1(r2)
   40830:	2008923a 	slli	r4,r4,8
   40834:	20c6b03a 	or	r3,r4,r3
   40838:	11000083 	ldbu	r4,2(r2)
   4083c:	2008943a 	slli	r4,r4,16
   40840:	20c6b03a 	or	r3,r4,r3
   40844:	108000c3 	ldbu	r2,3(r2)
   40848:	1004963a 	slli	r2,r2,24
   4084c:	10c4b03a 	or	r2,r2,r3
   40850:	1000021e 	bne	r2,zero,4085c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
   40854:	0005883a 	mov	r2,zero
   40858:	00002106 	br	408e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
   4085c:	e0bffc17 	ldw	r2,-16(fp)
   40860:	10c00003 	ldbu	r3,0(r2)
   40864:	11000043 	ldbu	r4,1(r2)
   40868:	2008923a 	slli	r4,r4,8
   4086c:	20c6b03a 	or	r3,r4,r3
   40870:	11000083 	ldbu	r4,2(r2)
   40874:	2008943a 	slli	r4,r4,16
   40878:	20c6b03a 	or	r3,r4,r3
   4087c:	108000c3 	ldbu	r2,3(r2)
   40880:	1004963a 	slli	r2,r2,24
   40884:	10c4b03a 	or	r2,r2,r3
   40888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
   4088c:	e03ffb05 	stb	zero,-20(fp)
   40890:	e0bffc17 	ldw	r2,-16(fp)
   40894:	10800143 	ldbu	r2,5(r2)
   40898:	10803fcc 	andi	r2,r2,255
   4089c:	e0fffb03 	ldbu	r3,-20(fp)
   408a0:	18800e2e 	bgeu	r3,r2,408dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
   408a4:	e0bffa17 	ldw	r2,-24(fp)
   408a8:	10800003 	ldbu	r2,0(r2)
   408ac:	10c03fcc 	andi	r3,r2,255
   408b0:	e0bfff03 	ldbu	r2,-4(fp)
   408b4:	1880021e 	bne	r3,r2,408c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
   408b8:	e0bffa17 	ldw	r2,-24(fp)
   408bc:	00000806 	br	408e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
   408c0:	e0bffa17 	ldw	r2,-24(fp)
   408c4:	108000c4 	addi	r2,r2,3
   408c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
   408cc:	e0bffb03 	ldbu	r2,-20(fp)
   408d0:	10800044 	addi	r2,r2,1
   408d4:	e0bffb05 	stb	r2,-20(fp)
   408d8:	003fed06 	br	40890 <__alt_data_end+0xfffc0890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
   408dc:	0005883a 	mov	r2,zero
}
   408e0:	e037883a 	mov	sp,fp
   408e4:	dfc00117 	ldw	ra,4(sp)
   408e8:	df000017 	ldw	fp,0(sp)
   408ec:	dec00204 	addi	sp,sp,8
   408f0:	f800283a 	ret

000408f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
   408f4:	defff904 	addi	sp,sp,-28
   408f8:	dfc00615 	stw	ra,24(sp)
   408fc:	df000515 	stw	fp,20(sp)
   40900:	df000504 	addi	fp,sp,20
   40904:	e13ffc15 	stw	r4,-16(fp)
   40908:	2807883a 	mov	r3,r5
   4090c:	3005883a 	mov	r2,r6
   40910:	e1ffff15 	stw	r7,-4(fp)
   40914:	e0fffd05 	stb	r3,-12(fp)
   40918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
   4091c:	e0bfff17 	ldw	r2,-4(fp)
   40920:	1000021e 	bne	r2,zero,4092c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
   40924:	00bff604 	movi	r2,-40
   40928:	00003406 	br	409fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
   4092c:	e0bffc17 	ldw	r2,-16(fp)
   40930:	e0fffd03 	ldbu	r3,-12(fp)
   40934:	180b883a 	mov	r5,r3
   40938:	1009883a 	mov	r4,r2
   4093c:	0042d3c0 	call	42d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
   40940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
   40944:	e0bffb17 	ldw	r2,-20(fp)
   40948:	1000021e 	bne	r2,zero,40954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   4094c:	00bff584 	movi	r2,-42
   40950:	00002a06 	br	409fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
   40954:	e0bffb17 	ldw	r2,-20(fp)
   40958:	e0fffd03 	ldbu	r3,-12(fp)
   4095c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
   40960:	e0bffb17 	ldw	r2,-20(fp)
   40964:	e0ffff17 	ldw	r3,-4(fp)
   40968:	19403fcc 	andi	r5,r3,255
   4096c:	10c00003 	ldbu	r3,0(r2)
   40970:	1806703a 	and	r3,r3,zero
   40974:	1809883a 	mov	r4,r3
   40978:	2807883a 	mov	r3,r5
   4097c:	20c6b03a 	or	r3,r4,r3
   40980:	10c00005 	stb	r3,0(r2)
   40984:	e0ffff17 	ldw	r3,-4(fp)
   40988:	1806d23a 	srli	r3,r3,8
   4098c:	19403fcc 	andi	r5,r3,255
   40990:	10c00043 	ldbu	r3,1(r2)
   40994:	1806703a 	and	r3,r3,zero
   40998:	1809883a 	mov	r4,r3
   4099c:	2807883a 	mov	r3,r5
   409a0:	20c6b03a 	or	r3,r4,r3
   409a4:	10c00045 	stb	r3,1(r2)
   409a8:	e0ffff17 	ldw	r3,-4(fp)
   409ac:	1806d43a 	srli	r3,r3,16
   409b0:	19403fcc 	andi	r5,r3,255
   409b4:	10c00083 	ldbu	r3,2(r2)
   409b8:	1806703a 	and	r3,r3,zero
   409bc:	1809883a 	mov	r4,r3
   409c0:	2807883a 	mov	r3,r5
   409c4:	20c6b03a 	or	r3,r4,r3
   409c8:	10c00085 	stb	r3,2(r2)
   409cc:	e0ffff17 	ldw	r3,-4(fp)
   409d0:	180ad63a 	srli	r5,r3,24
   409d4:	10c000c3 	ldbu	r3,3(r2)
   409d8:	1806703a 	and	r3,r3,zero
   409dc:	1809883a 	mov	r4,r3
   409e0:	2807883a 	mov	r3,r5
   409e4:	20c6b03a 	or	r3,r4,r3
   409e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
   409ec:	e0bffb17 	ldw	r2,-20(fp)
   409f0:	e0fffe03 	ldbu	r3,-8(fp)
   409f4:	10c00145 	stb	r3,5(r2)

        return 0;
   409f8:	0005883a 	mov	r2,zero
}
   409fc:	e037883a 	mov	sp,fp
   40a00:	dfc00117 	ldw	ra,4(sp)
   40a04:	df000017 	ldw	fp,0(sp)
   40a08:	dec00204 	addi	sp,sp,8
   40a0c:	f800283a 	ret

00040a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
   40a10:	defff804 	addi	sp,sp,-32
   40a14:	dfc00715 	stw	ra,28(sp)
   40a18:	df000615 	stw	fp,24(sp)
   40a1c:	df000604 	addi	fp,sp,24
   40a20:	e13ffc15 	stw	r4,-16(fp)
   40a24:	2807883a 	mov	r3,r5
   40a28:	3005883a 	mov	r2,r6
   40a2c:	e1ffff15 	stw	r7,-4(fp)
   40a30:	e0fffd05 	stb	r3,-12(fp)
   40a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
   40a38:	e0bffc17 	ldw	r2,-16(fp)
   40a3c:	e0fffd03 	ldbu	r3,-12(fp)
   40a40:	180b883a 	mov	r5,r3
   40a44:	1009883a 	mov	r4,r2
   40a48:	0042d3c0 	call	42d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
   40a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
   40a50:	e0bffa17 	ldw	r2,-24(fp)
   40a54:	1000021e 	bne	r2,zero,40a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   40a58:	00bff584 	movi	r2,-42
   40a5c:	00004a06 	br	40b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
   40a60:	e0bffa17 	ldw	r2,-24(fp)
   40a64:	10c00003 	ldbu	r3,0(r2)
   40a68:	11000043 	ldbu	r4,1(r2)
   40a6c:	2008923a 	slli	r4,r4,8
   40a70:	20c6b03a 	or	r3,r4,r3
   40a74:	11000083 	ldbu	r4,2(r2)
   40a78:	2008943a 	slli	r4,r4,16
   40a7c:	20c6b03a 	or	r3,r4,r3
   40a80:	108000c3 	ldbu	r2,3(r2)
   40a84:	1004963a 	slli	r2,r2,24
   40a88:	10c4b03a 	or	r2,r2,r3
   40a8c:	1000021e 	bne	r2,zero,40a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
   40a90:	00bff5c4 	movi	r2,-41
   40a94:	00003c06 	br	40b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
   40a98:	e0bffd03 	ldbu	r2,-12(fp)
   40a9c:	e0fffe03 	ldbu	r3,-8(fp)
   40aa0:	180d883a 	mov	r6,r3
   40aa4:	100b883a 	mov	r5,r2
   40aa8:	e13ffc17 	ldw	r4,-16(fp)
   40aac:	00407e00 	call	407e0 <_ZN3USB14getEpInfoEntryEhh>
   40ab0:	1007883a 	mov	r3,r2
   40ab4:	e0bfff17 	ldw	r2,-4(fp)
   40ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
   40abc:	e0bfff17 	ldw	r2,-4(fp)
   40ac0:	10800017 	ldw	r2,0(r2)
   40ac4:	1000021e 	bne	r2,zero,40ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
   40ac8:	00bff6c4 	movi	r2,-37
   40acc:	00002e06 	br	40b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
   40ad0:	e0bfff17 	ldw	r2,-4(fp)
   40ad4:	10800017 	ldw	r2,0(r2)
   40ad8:	10800083 	ldbu	r2,2(r2)
   40adc:	1004d0ba 	srli	r2,r2,2
   40ae0:	10803fcc 	andi	r2,r2,255
   40ae4:	10c00410 	cmplti	r3,r2,16
   40ae8:	1800011e 	bne	r3,zero,40af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
   40aec:	008003c4 	movi	r2,15
   40af0:	00c00044 	movi	r3,1
   40af4:	1884983a 	sll	r2,r3,r2
   40af8:	1007883a 	mov	r3,r2
   40afc:	e0800217 	ldw	r2,8(fp)
   40b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
   40b04:	e0800217 	ldw	r2,8(fp)
   40b08:	1080000b 	ldhu	r2,0(r2)
   40b0c:	10bfffc4 	addi	r2,r2,-1
   40b10:	1007883a 	mov	r3,r2
   40b14:	e0800217 	ldw	r2,8(fp)
   40b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
   40b1c:	e0bffd03 	ldbu	r2,-12(fp)
   40b20:	100d883a 	mov	r6,r2
   40b24:	01403804 	movi	r5,224
   40b28:	e13ffc17 	ldw	r4,-16(fp)
   40b2c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
   40b30:	01403604 	movi	r5,216
   40b34:	e13ffc17 	ldw	r4,-16(fp)
   40b38:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   40b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
   40b40:	e0bffa17 	ldw	r2,-24(fp)
   40b44:	10800183 	ldbu	r2,6(r2)
   40b48:	10803fcc 	andi	r2,r2,255
   40b4c:	10000726 	beq	r2,zero,40b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
   40b50:	e0bffc17 	ldw	r2,-16(fp)
   40b54:	10c02e03 	ldbu	r3,184(r2)
   40b58:	e0bffb03 	ldbu	r2,-20(fp)
   40b5c:	1884b03a 	or	r2,r3,r2
   40b60:	10800094 	ori	r2,r2,2
   40b64:	10803fcc 	andi	r2,r2,255
   40b68:	00000206 	br	40b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
   40b6c:	e0bffb03 	ldbu	r2,-20(fp)
   40b70:	10803e4c 	andi	r2,r2,249
   40b74:	100d883a 	mov	r6,r2
   40b78:	01403604 	movi	r5,216
   40b7c:	e13ffc17 	ldw	r4,-16(fp)
   40b80:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

        return 0;
   40b84:	0005883a 	mov	r2,zero
}
   40b88:	e037883a 	mov	sp,fp
   40b8c:	dfc00117 	ldw	ra,4(sp)
   40b90:	df000017 	ldw	fp,0(sp)
   40b94:	dec00204 	addi	sp,sp,8
   40b98:	f800283a 	ret

00040b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
   40b9c:	deffeb04 	addi	sp,sp,-84
   40ba0:	dfc01415 	stw	ra,80(sp)
   40ba4:	df001315 	stw	fp,76(sp)
   40ba8:	dc001215 	stw	r16,72(sp)
   40bac:	df001304 	addi	fp,sp,76
   40bb0:	e13ff515 	stw	r4,-44(fp)
   40bb4:	2815883a 	mov	r10,r5
   40bb8:	3013883a 	mov	r9,r6
   40bbc:	3811883a 	mov	r8,r7
   40bc0:	e1c00217 	ldw	r7,8(fp)
   40bc4:	e1800317 	ldw	r6,12(fp)
   40bc8:	e1400417 	ldw	r5,16(fp)
   40bcc:	e1000517 	ldw	r4,20(fp)
   40bd0:	e0c00617 	ldw	r3,24(fp)
   40bd4:	e0800717 	ldw	r2,28(fp)
   40bd8:	e2bff605 	stb	r10,-40(fp)
   40bdc:	e27ff705 	stb	r9,-36(fp)
   40be0:	e23ff805 	stb	r8,-32(fp)
   40be4:	e1fff905 	stb	r7,-28(fp)
   40be8:	e1bffa05 	stb	r6,-24(fp)
   40bec:	e17ffb05 	stb	r5,-20(fp)
   40bf0:	e13ffc0d 	sth	r4,-16(fp)
   40bf4:	e0fffd0d 	sth	r3,-12(fp)
   40bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
   40bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
   40c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
   40c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
   40c08:	e0fff603 	ldbu	r3,-40(fp)
   40c0c:	e13ff703 	ldbu	r4,-36(fp)
   40c10:	e17ff304 	addi	r5,fp,-52
   40c14:	e0bff404 	addi	r2,fp,-48
   40c18:	d8800015 	stw	r2,0(sp)
   40c1c:	280f883a 	mov	r7,r5
   40c20:	200d883a 	mov	r6,r4
   40c24:	180b883a 	mov	r5,r3
   40c28:	e13ff517 	ldw	r4,-44(fp)
   40c2c:	0040a100 	call	40a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
   40c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
   40c34:	e0bfef03 	ldbu	r2,-68(fp)
   40c38:	10000226 	beq	r2,zero,40c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
   40c3c:	e0bfef03 	ldbu	r2,-68(fp)
   40c40:	00009406 	br	40e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
   40c44:	e0bff803 	ldbu	r2,-32(fp)
   40c48:	1080200c 	andi	r2,r2,128
   40c4c:	0084803a 	cmplt	r2,zero,r2
   40c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
   40c54:	e0bff803 	ldbu	r2,-32(fp)
   40c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
   40c5c:	e0bff903 	ldbu	r2,-28(fp)
   40c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
   40c64:	e0bffa03 	ldbu	r2,-24(fp)
   40c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
   40c6c:	e0bffb03 	ldbu	r2,-20(fp)
   40c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
   40c74:	e0bffc0b 	ldhu	r2,-16(fp)
   40c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
   40c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   40c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
   40c84:	e0bff104 	addi	r2,fp,-60
   40c88:	100f883a 	mov	r7,r2
   40c8c:	01800204 	movi	r6,8
   40c90:	01400804 	movi	r5,32
   40c94:	e13ff517 	ldw	r4,-44(fp)
   40c98:	0049a8c0 	call	49a8c <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
   40c9c:	e0bff703 	ldbu	r2,-36(fp)
   40ca0:	e0fff40b 	ldhu	r3,-48(fp)
   40ca4:	18ffffcc 	andi	r3,r3,65535
   40ca8:	180f883a 	mov	r7,r3
   40cac:	100d883a 	mov	r6,r2
   40cb0:	01400404 	movi	r5,16
   40cb4:	e13ff517 	ldw	r4,-44(fp)
   40cb8:	004169c0 	call	4169c <_ZN3USB11dispatchPktEhht>
   40cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
   40cc0:	e0bfef03 	ldbu	r2,-68(fp)
   40cc4:	10000226 	beq	r2,zero,40cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
   40cc8:	e0bfef03 	ldbu	r2,-68(fp)
   40ccc:	00007106 	br	40e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
   40cd0:	e0800817 	ldw	r2,32(fp)
   40cd4:	10006226 	beq	r2,zero,40e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
   40cd8:	e0bff003 	ldbu	r2,-64(fp)
   40cdc:	10004a26 	beq	r2,zero,40e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
   40ce0:	e0bffd0b 	ldhu	r2,-12(fp)
   40ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
   40ce8:	e0bff317 	ldw	r2,-52(fp)
   40cec:	10c00083 	ldbu	r3,2(r2)
   40cf0:	18c00094 	ori	r3,r3,2
   40cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
   40cf8:	e0bfef8b 	ldhu	r2,-66(fp)
   40cfc:	10005426 	beq	r2,zero,40e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
   40d00:	e0bffe0b 	ldhu	r2,-8(fp)
   40d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
   40d08:	e0fff317 	ldw	r3,-52(fp)
   40d0c:	e0bff40b 	ldhu	r2,-48(fp)
   40d10:	113fffcc 	andi	r4,r2,65535
   40d14:	e17ff484 	addi	r5,fp,-46
   40d18:	d8000115 	stw	zero,4(sp)
   40d1c:	e0800817 	ldw	r2,32(fp)
   40d20:	d8800015 	stw	r2,0(sp)
   40d24:	280f883a 	mov	r7,r5
   40d28:	200d883a 	mov	r6,r4
   40d2c:	180b883a 	mov	r5,r3
   40d30:	e13ff517 	ldw	r4,-44(fp)
   40d34:	0040f940 	call	40f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
   40d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
   40d3c:	e0bfef03 	ldbu	r2,-68(fp)
   40d40:	10800198 	cmpnei	r2,r2,6
   40d44:	1000111e 	bne	r2,zero,40d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
   40d48:	e43ff317 	ldw	r16,-52(fp)
   40d4c:	01403e04 	movi	r5,248
   40d50:	e13ff517 	ldw	r4,-44(fp)
   40d54:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   40d58:	10803fcc 	andi	r2,r2,255
   40d5c:	1080080c 	andi	r2,r2,32
   40d60:	1005003a 	cmpeq	r2,r2,zero
   40d64:	1080004c 	andi	r2,r2,1
   40d68:	1089883a 	add	r4,r2,r2
   40d6c:	80c00083 	ldbu	r3,2(r16)
   40d70:	00bfff44 	movi	r2,-3
   40d74:	1884703a 	and	r2,r3,r2
   40d78:	1007883a 	mov	r3,r2
   40d7c:	2005883a 	mov	r2,r4
   40d80:	1884b03a 	or	r2,r3,r2
   40d84:	80800085 	stb	r2,2(r16)
   40d88:	003fdb06 	br	40cf8 <__alt_data_end+0xfffc0cf8>
                                        continue;
                                }

                                if(rcode)
   40d8c:	e0bfef03 	ldbu	r2,-68(fp)
   40d90:	10000226 	beq	r2,zero,40d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
   40d94:	e0bfef03 	ldbu	r2,-68(fp)
   40d98:	00003e06 	br	40e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
   40d9c:	e0bfef03 	ldbu	r2,-68(fp)
   40da0:	1000101e 	bne	r2,zero,40de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
   40da4:	e0800917 	ldw	r2,36(fp)
   40da8:	10000e26 	beq	r2,zero,40de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
   40dac:	e0800917 	ldw	r2,36(fp)
   40db0:	10800017 	ldw	r2,0(r2)
   40db4:	10800017 	ldw	r2,0(r2)
   40db8:	e0fff48b 	ldhu	r3,-46(fp)
   40dbc:	197fffcc 	andi	r5,r3,65535
   40dc0:	e13ffd0b 	ldhu	r4,-12(fp)
   40dc4:	e0ffef8b 	ldhu	r3,-66(fp)
   40dc8:	20c7c83a 	sub	r3,r4,r3
   40dcc:	e0fff08d 	sth	r3,-62(fp)
   40dd0:	e0fff084 	addi	r3,fp,-62
   40dd4:	180f883a 	mov	r7,r3
   40dd8:	e1800817 	ldw	r6,32(fp)
   40ddc:	e1000917 	ldw	r4,36(fp)
   40de0:	103ee83a 	callr	r2

                                left -= read;
   40de4:	e0bff48b 	ldhu	r2,-46(fp)
   40de8:	e0ffef8b 	ldhu	r3,-66(fp)
   40dec:	1885c83a 	sub	r2,r3,r2
   40df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
   40df4:	e0bff48b 	ldhu	r2,-46(fp)
   40df8:	10ffffcc 	andi	r3,r2,65535
   40dfc:	e0bffe0b 	ldhu	r2,-8(fp)
   40e00:	18801236 	bltu	r3,r2,40e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
   40e04:	003fbc06 	br	40cf8 <__alt_data_end+0xfffc0cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
   40e08:	e0bff317 	ldw	r2,-52(fp)
   40e0c:	10c00083 	ldbu	r3,2(r2)
   40e10:	18c00054 	ori	r3,r3,1
   40e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
   40e18:	e0fff317 	ldw	r3,-52(fp)
   40e1c:	e0bff40b 	ldhu	r2,-48(fp)
   40e20:	113fffcc 	andi	r4,r2,65535
   40e24:	e17ffe0b 	ldhu	r5,-8(fp)
   40e28:	e0800817 	ldw	r2,32(fp)
   40e2c:	d8800015 	stw	r2,0(sp)
   40e30:	280f883a 	mov	r7,r5
   40e34:	200d883a 	mov	r6,r4
   40e38:	180b883a 	mov	r5,r3
   40e3c:	e13ff517 	ldw	r4,-44(fp)
   40e40:	00412f00 	call	412f0 <_ZN3USB11OutTransferEP6EpInfottPh>
   40e44:	e0bfef05 	stb	r2,-68(fp)
   40e48:	00000106 	br	40e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
   40e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
   40e50:	e0bfef03 	ldbu	r2,-68(fp)
   40e54:	10000226 	beq	r2,zero,40e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
   40e58:	e0bfef03 	ldbu	r2,-68(fp)
   40e5c:	00000d06 	br	40e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
   40e60:	e0bff003 	ldbu	r2,-64(fp)
   40e64:	10000226 	beq	r2,zero,40e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
   40e68:	00802804 	movi	r2,160
   40e6c:	00000106 	br	40e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
   40e70:	00802004 	movi	r2,128
   40e74:	e0fff703 	ldbu	r3,-36(fp)
   40e78:	e13ff40b 	ldhu	r4,-48(fp)
   40e7c:	213fffcc 	andi	r4,r4,65535
   40e80:	200f883a 	mov	r7,r4
   40e84:	180d883a 	mov	r6,r3
   40e88:	100b883a 	mov	r5,r2
   40e8c:	e13ff517 	ldw	r4,-44(fp)
   40e90:	004169c0 	call	4169c <_ZN3USB11dispatchPktEhht>
}
   40e94:	e6ffff04 	addi	sp,fp,-4
   40e98:	dfc00217 	ldw	ra,8(sp)
   40e9c:	df000117 	ldw	fp,4(sp)
   40ea0:	dc000017 	ldw	r16,0(sp)
   40ea4:	dec00304 	addi	sp,sp,12
   40ea8:	f800283a 	ret

00040eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
   40eac:	defff404 	addi	sp,sp,-48
   40eb0:	dfc00b15 	stw	ra,44(sp)
   40eb4:	df000a15 	stw	fp,40(sp)
   40eb8:	df000a04 	addi	fp,sp,40
   40ebc:	e13ffb15 	stw	r4,-20(fp)
   40ec0:	2809883a 	mov	r4,r5
   40ec4:	3007883a 	mov	r3,r6
   40ec8:	e1fffe15 	stw	r7,-8(fp)
   40ecc:	e0800317 	ldw	r2,12(fp)
   40ed0:	e13ffc05 	stb	r4,-16(fp)
   40ed4:	e0fffd05 	stb	r3,-12(fp)
   40ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
   40edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
   40ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
   40ee4:	e0fffc03 	ldbu	r3,-16(fp)
   40ee8:	e13ffd03 	ldbu	r4,-12(fp)
   40eec:	e17ff904 	addi	r5,fp,-28
   40ef0:	e0bffa04 	addi	r2,fp,-24
   40ef4:	d8800015 	stw	r2,0(sp)
   40ef8:	280f883a 	mov	r7,r5
   40efc:	200d883a 	mov	r6,r4
   40f00:	180b883a 	mov	r5,r3
   40f04:	e13ffb17 	ldw	r4,-20(fp)
   40f08:	0040a100 	call	40a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
   40f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
   40f10:	e0bff803 	ldbu	r2,-32(fp)
   40f14:	10000e26 	beq	r2,zero,40f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
   40f18:	e0bff803 	ldbu	r2,-32(fp)
   40f1c:	01402044 	movi	r5,129
   40f20:	1009883a 	mov	r4,r2
   40f24:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
   40f28:	e0bffc03 	ldbu	r2,-16(fp)
   40f2c:	01402044 	movi	r5,129
   40f30:	1009883a 	mov	r4,r2
   40f34:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
   40f38:	e0bffd03 	ldbu	r2,-12(fp)
   40f3c:	01402044 	movi	r5,129
   40f40:	1009883a 	mov	r4,r2
   40f44:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
   40f48:	e0bff803 	ldbu	r2,-32(fp)
   40f4c:	00000c06 	br	40f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
   40f50:	e0fff917 	ldw	r3,-28(fp)
   40f54:	e0bffa0b 	ldhu	r2,-24(fp)
   40f58:	113fffcc 	andi	r4,r2,65535
   40f5c:	e0bfff03 	ldbu	r2,-4(fp)
   40f60:	d8800115 	stw	r2,4(sp)
   40f64:	e0800217 	ldw	r2,8(fp)
   40f68:	d8800015 	stw	r2,0(sp)
   40f6c:	e1fffe17 	ldw	r7,-8(fp)
   40f70:	200d883a 	mov	r6,r4
   40f74:	180b883a 	mov	r5,r3
   40f78:	e13ffb17 	ldw	r4,-20(fp)
   40f7c:	0040f940 	call	40f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
   40f80:	e037883a 	mov	sp,fp
   40f84:	dfc00117 	ldw	ra,4(sp)
   40f88:	df000017 	ldw	fp,0(sp)
   40f8c:	dec00204 	addi	sp,sp,8
   40f90:	f800283a 	ret

00040f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
   40f94:	defff704 	addi	sp,sp,-36
   40f98:	dfc00815 	stw	ra,32(sp)
   40f9c:	df000715 	stw	fp,28(sp)
   40fa0:	df000704 	addi	fp,sp,28
   40fa4:	e13ffb15 	stw	r4,-20(fp)
   40fa8:	e17ffc15 	stw	r5,-16(fp)
   40fac:	3007883a 	mov	r3,r6
   40fb0:	e1fffe15 	stw	r7,-8(fp)
   40fb4:	e0800317 	ldw	r2,12(fp)
   40fb8:	e0fffd0d 	sth	r3,-12(fp)
   40fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
   40fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
   40fc4:	e0bffe17 	ldw	r2,-8(fp)
   40fc8:	1080000b 	ldhu	r2,0(r2)
   40fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
   40fd0:	e0bffc17 	ldw	r2,-16(fp)
   40fd4:	10800043 	ldbu	r2,1(r2)
   40fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
   40fdc:	e0bffe17 	ldw	r2,-8(fp)
   40fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
   40fe4:	e0bffc17 	ldw	r2,-16(fp)
   40fe8:	10800083 	ldbu	r2,2(r2)
   40fec:	1080008c 	andi	r2,r2,2
   40ff0:	10803fcc 	andi	r2,r2,255
   40ff4:	10000226 	beq	r2,zero,41000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
   40ff8:	00800804 	movi	r2,32
   40ffc:	00000106 	br	41004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
   41000:	00800404 	movi	r2,16
   41004:	100d883a 	mov	r6,r2
   41008:	01403a04 	movi	r5,232
   4100c:	e13ffb17 	ldw	r4,-20(fp)
   41010:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
   41014:	e0bffc17 	ldw	r2,-16(fp)
   41018:	10800003 	ldbu	r2,0(r2)
   4101c:	10803fcc 	andi	r2,r2,255
   41020:	e0fffd0b 	ldhu	r3,-12(fp)
   41024:	180f883a 	mov	r7,r3
   41028:	100d883a 	mov	r6,r2
   4102c:	000b883a 	mov	r5,zero
   41030:	e13ffb17 	ldw	r4,-20(fp)
   41034:	004169c0 	call	4169c <_ZN3USB11dispatchPktEhht>
   41038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
   4103c:	e0bff903 	ldbu	r2,-28(fp)
   41040:	10800198 	cmpnei	r2,r2,6
   41044:	10001e1e 	bne	r2,zero,410c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
   41048:	01403e04 	movi	r5,248
   4104c:	e13ffb17 	ldw	r4,-20(fp)
   41050:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41054:	10803fcc 	andi	r2,r2,255
   41058:	1080040c 	andi	r2,r2,16
   4105c:	1005003a 	cmpeq	r2,r2,zero
   41060:	1007883a 	mov	r3,r2
   41064:	e0bffc17 	ldw	r2,-16(fp)
   41068:	18c0004c 	andi	r3,r3,1
   4106c:	18cb883a 	add	r5,r3,r3
   41070:	11000083 	ldbu	r4,2(r2)
   41074:	00ffff44 	movi	r3,-3
   41078:	20c6703a 	and	r3,r4,r3
   4107c:	1809883a 	mov	r4,r3
   41080:	2807883a 	mov	r3,r5
   41084:	20c6b03a 	or	r3,r4,r3
   41088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
   4108c:	e0bffc17 	ldw	r2,-16(fp)
   41090:	10800083 	ldbu	r2,2(r2)
   41094:	1080008c 	andi	r2,r2,2
   41098:	10803fcc 	andi	r2,r2,255
   4109c:	10000226 	beq	r2,zero,410a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
   410a0:	00800804 	movi	r2,32
   410a4:	00000106 	br	410ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
   410a8:	00800404 	movi	r2,16
   410ac:	100d883a 	mov	r6,r2
   410b0:	01403a04 	movi	r5,232
   410b4:	e13ffb17 	ldw	r4,-20(fp)
   410b8:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        continue;
   410bc:	00005806 	br	41220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
   410c0:	e0bff903 	ldbu	r2,-28(fp)
   410c4:	1000571e 	bne	r2,zero,41224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
   410c8:	01403204 	movi	r5,200
   410cc:	e13ffb17 	ldw	r4,-20(fp)
   410d0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   410d4:	10803fcc 	andi	r2,r2,255
   410d8:	1080010c 	andi	r2,r2,4
   410dc:	1005003a 	cmpeq	r2,r2,zero
   410e0:	10803fcc 	andi	r2,r2,255
   410e4:	10000326 	beq	r2,zero,410f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
   410e8:	00bffc04 	movi	r2,-16
   410ec:	e0bff905 	stb	r2,-28(fp)
                        break;
   410f0:	00004d06 	br	41228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
   410f4:	01400c04 	movi	r5,48
   410f8:	e13ffb17 	ldw	r4,-20(fp)
   410fc:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
   41104:	e0bff943 	ldbu	r2,-27(fp)
   41108:	10bfffcc 	andi	r2,r2,65535
   4110c:	e0fffa0b 	ldhu	r3,-24(fp)
   41110:	1880022e 	bgeu	r3,r2,4111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
   41114:	e0bffa0b 	ldhu	r2,-24(fp)
   41118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
   4111c:	e0bffe17 	ldw	r2,-8(fp)
   41120:	1080000b 	ldhu	r2,0(r2)
   41124:	1007883a 	mov	r3,r2
   41128:	e0bffa0b 	ldhu	r2,-24(fp)
   4112c:	10c5c83a 	sub	r2,r2,r3
   41130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
   41134:	e0bff98f 	ldh	r2,-26(fp)
   41138:	1000010e 	bge	r2,zero,41140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
   4113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
   41140:	e0bff943 	ldbu	r2,-27(fp)
   41144:	e0fff98f 	ldh	r3,-26(fp)
   41148:	1880010e 	bge	r3,r2,41150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
   4114c:	1805883a 	mov	r2,r3
   41150:	10803fcc 	andi	r2,r2,255
   41154:	e1c00217 	ldw	r7,8(fp)
   41158:	100d883a 	mov	r6,r2
   4115c:	01400204 	movi	r5,8
   41160:	e13ffb17 	ldw	r4,-20(fp)
   41164:	0049ca40 	call	49ca4 <_ZN8MAX3421e7bytesRdEhhPh>
   41168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
   4116c:	01800104 	movi	r6,4
   41170:	01403204 	movi	r5,200
   41174:	e13ffb17 	ldw	r4,-20(fp)
   41178:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
   4117c:	e0bffe17 	ldw	r2,-8(fp)
   41180:	10c0000b 	ldhu	r3,0(r2)
   41184:	e0bff943 	ldbu	r2,-27(fp)
   41188:	1885883a 	add	r2,r3,r2
   4118c:	1007883a 	mov	r3,r2
   41190:	e0bffe17 	ldw	r2,-8(fp)
   41194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
   41198:	e0fff943 	ldbu	r3,-27(fp)
   4119c:	e0bffa83 	ldbu	r2,-22(fp)
   411a0:	18800536 	bltu	r3,r2,411b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
   411a4:	e0bffe17 	ldw	r2,-8(fp)
   411a8:	1080000b 	ldhu	r2,0(r2)
   411ac:	10ffffcc 	andi	r3,r2,65535
   411b0:	e0bffa0b 	ldhu	r2,-24(fp)
   411b4:	18801536 	bltu	r3,r2,4120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
   411b8:	01403e04 	movi	r5,248
   411bc:	e13ffb17 	ldw	r4,-20(fp)
   411c0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   411c4:	10803fcc 	andi	r2,r2,255
   411c8:	1080040c 	andi	r2,r2,16
   411cc:	10000226 	beq	r2,zero,411d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
   411d0:	00c00044 	movi	r3,1
   411d4:	00000106 	br	411dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
   411d8:	0007883a 	mov	r3,zero
   411dc:	e0bffc17 	ldw	r2,-16(fp)
   411e0:	18c0004c 	andi	r3,r3,1
   411e4:	18cb883a 	add	r5,r3,r3
   411e8:	11000083 	ldbu	r4,2(r2)
   411ec:	00ffff44 	movi	r3,-3
   411f0:	20c6703a 	and	r3,r4,r3
   411f4:	1809883a 	mov	r4,r3
   411f8:	2807883a 	mov	r3,r5
   411fc:	20c6b03a 	or	r3,r4,r3
   41200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
   41204:	e03ff905 	stb	zero,-28(fp)
                        break;
   41208:	00000706 	br	41228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
   4120c:	e0bfff03 	ldbu	r2,-4(fp)
   41210:	103f8026 	beq	r2,zero,41014 <__alt_data_end+0xfffc1014>
                        delay(bInterval); // Delay according to polling interval
   41214:	e0bfff03 	ldbu	r2,-4(fp)
   41218:	1009883a 	mov	r4,r2
   4121c:	00406840 	call	40684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
   41220:	003f7c06 	br	41014 <__alt_data_end+0xfffc1014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
   41224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
   41228:	e0bff903 	ldbu	r2,-28(fp)
}
   4122c:	e037883a 	mov	sp,fp
   41230:	dfc00117 	ldw	ra,4(sp)
   41234:	df000017 	ldw	fp,0(sp)
   41238:	dec00204 	addi	sp,sp,8
   4123c:	f800283a 	ret

00041240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
   41240:	defff604 	addi	sp,sp,-40
   41244:	dfc00915 	stw	ra,36(sp)
   41248:	df000815 	stw	fp,32(sp)
   4124c:	df000804 	addi	fp,sp,32
   41250:	e13ffc15 	stw	r4,-16(fp)
   41254:	2809883a 	mov	r4,r5
   41258:	3007883a 	mov	r3,r6
   4125c:	3805883a 	mov	r2,r7
   41260:	e13ffd05 	stb	r4,-12(fp)
   41264:	e0fffe05 	stb	r3,-8(fp)
   41268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
   4126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
   41270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
   41274:	e0fffd03 	ldbu	r3,-12(fp)
   41278:	e13ffe03 	ldbu	r4,-8(fp)
   4127c:	e17ffa04 	addi	r5,fp,-24
   41280:	e0bffb04 	addi	r2,fp,-20
   41284:	d8800015 	stw	r2,0(sp)
   41288:	280f883a 	mov	r7,r5
   4128c:	200d883a 	mov	r6,r4
   41290:	180b883a 	mov	r5,r3
   41294:	e13ffc17 	ldw	r4,-16(fp)
   41298:	0040a100 	call	40a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
   4129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
   412a0:	e0bff903 	ldbu	r2,-28(fp)
   412a4:	10000226 	beq	r2,zero,412b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
   412a8:	e0bff903 	ldbu	r2,-28(fp)
   412ac:	00000b06 	br	412dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
   412b0:	e0fffa17 	ldw	r3,-24(fp)
   412b4:	e0bffb0b 	ldhu	r2,-20(fp)
   412b8:	113fffcc 	andi	r4,r2,65535
   412bc:	e17fff0b 	ldhu	r5,-4(fp)
   412c0:	e0800217 	ldw	r2,8(fp)
   412c4:	d8800015 	stw	r2,0(sp)
   412c8:	280f883a 	mov	r7,r5
   412cc:	200d883a 	mov	r6,r4
   412d0:	180b883a 	mov	r5,r3
   412d4:	e13ffc17 	ldw	r4,-16(fp)
   412d8:	00412f00 	call	412f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
   412dc:	e037883a 	mov	sp,fp
   412e0:	dfc00117 	ldw	ra,4(sp)
   412e4:	df000017 	ldw	fp,0(sp)
   412e8:	dec00204 	addi	sp,sp,8
   412ec:	f800283a 	ret

000412f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
   412f0:	defff404 	addi	sp,sp,-48
   412f4:	dfc00b15 	stw	ra,44(sp)
   412f8:	df000a15 	stw	fp,40(sp)
   412fc:	df000a04 	addi	fp,sp,40
   41300:	e13ffc15 	stw	r4,-16(fp)
   41304:	e17ffd15 	stw	r5,-12(fp)
   41308:	3007883a 	mov	r3,r6
   4130c:	3805883a 	mov	r2,r7
   41310:	e0fffe0d 	sth	r3,-8(fp)
   41314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
   41318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
   4131c:	e0800217 	ldw	r2,8(fp)
   41320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
   41324:	e0bfff0b 	ldhu	r2,-4(fp)
   41328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
   4132c:	e0bffd17 	ldw	r2,-12(fp)
   41330:	10800043 	ldbu	r2,1(r2)
   41334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
   41338:	e0bff903 	ldbu	r2,-28(fp)
   4133c:	10000326 	beq	r2,zero,4134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
   41340:	e0bff903 	ldbu	r2,-28(fp)
   41344:	10801070 	cmpltui	r2,r2,65
   41348:	1000021e 	bne	r2,zero,41354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
   4134c:	00bff684 	movi	r2,-38
   41350:	0000cd06 	br	41688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
   41354:	00406dc0 	call	406dc <_Z6millisv>
   41358:	1084e204 	addi	r2,r2,5000
   4135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
   41360:	e0bffd17 	ldw	r2,-12(fp)
   41364:	10800083 	ldbu	r2,2(r2)
   41368:	1080004c 	andi	r2,r2,1
   4136c:	10803fcc 	andi	r2,r2,255
   41370:	10000226 	beq	r2,zero,4137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
   41374:	00802004 	movi	r2,128
   41378:	00000106 	br	41380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
   4137c:	00801004 	movi	r2,64
   41380:	100d883a 	mov	r6,r2
   41384:	01403a04 	movi	r5,232
   41388:	e13ffc17 	ldw	r4,-16(fp)
   4138c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
   41390:	e0bff88b 	ldhu	r2,-30(fp)
   41394:	1000a926 	beq	r2,zero,4163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
   41398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
   4139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
   413a0:	e0bff903 	ldbu	r2,-28(fp)
   413a4:	e17ff88b 	ldhu	r5,-30(fp)
   413a8:	10ffffcc 	andi	r3,r2,65535
   413ac:	293fffcc 	andi	r4,r5,65535
   413b0:	20c0012e 	bgeu	r4,r3,413b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
   413b4:	2805883a 	mov	r2,r5
   413b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
   413bc:	e0bffb0b 	ldhu	r2,-20(fp)
   413c0:	10803fcc 	andi	r2,r2,255
   413c4:	e1fff717 	ldw	r7,-36(fp)
   413c8:	100d883a 	mov	r6,r2
   413cc:	01400404 	movi	r5,16
   413d0:	e13ffc17 	ldw	r4,-16(fp)
   413d4:	0049a8c0 	call	49a8c <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
   413d8:	e0bffb0b 	ldhu	r2,-20(fp)
   413dc:	10803fcc 	andi	r2,r2,255
   413e0:	100d883a 	mov	r6,r2
   413e4:	01400e04 	movi	r5,56
   413e8:	e13ffc17 	ldw	r4,-16(fp)
   413ec:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
   413f0:	e0bffd17 	ldw	r2,-12(fp)
   413f4:	10800003 	ldbu	r2,0(r2)
   413f8:	10800814 	ori	r2,r2,32
   413fc:	10803fcc 	andi	r2,r2,255
   41400:	100d883a 	mov	r6,r2
   41404:	01403c04 	movi	r5,240
   41408:	e13ffc17 	ldw	r4,-16(fp)
   4140c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
   41410:	01403204 	movi	r5,200
   41414:	e13ffc17 	ldw	r4,-16(fp)
   41418:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4141c:	0084303a 	nor	r2,zero,r2
   41420:	10803fcc 	andi	r2,r2,255
   41424:	1004d1fa 	srli	r2,r2,7
   41428:	10803fcc 	andi	r2,r2,255
   4142c:	10000126 	beq	r2,zero,41434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
   41430:	003ff706 	br	41410 <__alt_data_end+0xfffc1410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
   41434:	01802004 	movi	r6,128
   41438:	01403204 	movi	r5,200
   4143c:	e13ffc17 	ldw	r4,-16(fp)
   41440:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
   41444:	01403e04 	movi	r5,248
   41448:	e13ffc17 	ldw	r4,-16(fp)
   4144c:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41450:	108003cc 	andi	r2,r2,15
   41454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
   41458:	e0bff603 	ldbu	r2,-40(fp)
   4145c:	10000726 	beq	r2,zero,4147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
   41460:	00406dc0 	call	406dc <_Z6millisv>
   41464:	1007883a 	mov	r3,r2
   41468:	e0bffa17 	ldw	r2,-24(fp)
   4146c:	1885c83a 	sub	r2,r3,r2
   41470:	1000020e 	bge	r2,zero,4147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
   41474:	00800044 	movi	r2,1
   41478:	00000106 	br	41480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
   4147c:	0005883a 	mov	r2,zero
   41480:	10803fcc 	andi	r2,r2,255
   41484:	10006426 	beq	r2,zero,41618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
   41488:	e0bff603 	ldbu	r2,-40(fp)
   4148c:	10c001a0 	cmpeqi	r3,r2,6
   41490:	1800151e 	bne	r3,zero,414e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
   41494:	10c003a0 	cmpeqi	r3,r2,14
   41498:	18000c1e 	bne	r3,zero,414cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
   4149c:	10800120 	cmpeqi	r2,r2,4
   414a0:	1000011e 	bne	r2,zero,414a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
   414a4:	00006506 	br	4163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
   414a8:	e0bff80b 	ldhu	r2,-32(fp)
   414ac:	10800044 	addi	r2,r2,1
   414b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
   414b4:	e0bffe0b 	ldhu	r2,-8(fp)
   414b8:	10002826 	beq	r2,zero,4155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
   414bc:	e0fff80b 	ldhu	r3,-32(fp)
   414c0:	e0bffe0b 	ldhu	r2,-8(fp)
   414c4:	1880251e 	bne	r3,r2,4155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
   414c8:	00005c06 	br	4163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
   414cc:	e0bff643 	ldbu	r2,-39(fp)
   414d0:	10800044 	addi	r2,r2,1
   414d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
   414d8:	e0bff643 	ldbu	r2,-39(fp)
   414dc:	108000d8 	cmpnei	r2,r2,3
   414e0:	1000201e 	bne	r2,zero,41564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
   414e4:	00005506 	br	4163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
   414e8:	01403e04 	movi	r5,248
   414ec:	e13ffc17 	ldw	r4,-16(fp)
   414f0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   414f4:	10803fcc 	andi	r2,r2,255
   414f8:	1080080c 	andi	r2,r2,32
   414fc:	1005003a 	cmpeq	r2,r2,zero
   41500:	1007883a 	mov	r3,r2
   41504:	e0bffd17 	ldw	r2,-12(fp)
   41508:	1940004c 	andi	r5,r3,1
   4150c:	11000083 	ldbu	r4,2(r2)
   41510:	00ffff84 	movi	r3,-2
   41514:	20c6703a 	and	r3,r4,r3
   41518:	1809883a 	mov	r4,r3
   4151c:	2807883a 	mov	r3,r5
   41520:	20c6b03a 	or	r3,r4,r3
   41524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
   41528:	e0bffd17 	ldw	r2,-12(fp)
   4152c:	10800083 	ldbu	r2,2(r2)
   41530:	1080004c 	andi	r2,r2,1
   41534:	10803fcc 	andi	r2,r2,255
   41538:	10000226 	beq	r2,zero,41544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
   4153c:	00802004 	movi	r2,128
   41540:	00000106 	br	41548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
   41544:	00801004 	movi	r2,64
   41548:	100d883a 	mov	r6,r2
   4154c:	01403a04 	movi	r5,232
   41550:	e13ffc17 	ldw	r4,-16(fp)
   41554:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                                        break;
   41558:	00000306 	br	41568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
   4155c:	0001883a 	nop
   41560:	00000106 	br	41568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
   41564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
   41568:	000d883a 	mov	r6,zero
   4156c:	01400e04 	movi	r5,56
   41570:	e13ffc17 	ldw	r4,-16(fp)
   41574:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
   41578:	e0bff717 	ldw	r2,-36(fp)
   4157c:	10800003 	ldbu	r2,0(r2)
   41580:	10803fcc 	andi	r2,r2,255
   41584:	100d883a 	mov	r6,r2
   41588:	01400404 	movi	r5,16
   4158c:	e13ffc17 	ldw	r4,-16(fp)
   41590:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
   41594:	e0bffb0b 	ldhu	r2,-20(fp)
   41598:	10803fcc 	andi	r2,r2,255
   4159c:	100d883a 	mov	r6,r2
   415a0:	01400e04 	movi	r5,56
   415a4:	e13ffc17 	ldw	r4,-16(fp)
   415a8:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
   415ac:	e0bffd17 	ldw	r2,-12(fp)
   415b0:	10800003 	ldbu	r2,0(r2)
   415b4:	10800814 	ori	r2,r2,32
   415b8:	10803fcc 	andi	r2,r2,255
   415bc:	100d883a 	mov	r6,r2
   415c0:	01403c04 	movi	r5,240
   415c4:	e13ffc17 	ldw	r4,-16(fp)
   415c8:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
   415cc:	01403204 	movi	r5,200
   415d0:	e13ffc17 	ldw	r4,-16(fp)
   415d4:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   415d8:	0084303a 	nor	r2,zero,r2
   415dc:	10803fcc 	andi	r2,r2,255
   415e0:	1004d1fa 	srli	r2,r2,7
   415e4:	10803fcc 	andi	r2,r2,255
   415e8:	10000126 	beq	r2,zero,415f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
   415ec:	003ff706 	br	415cc <__alt_data_end+0xfffc15cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
   415f0:	01802004 	movi	r6,128
   415f4:	01403204 	movi	r5,200
   415f8:	e13ffc17 	ldw	r4,-16(fp)
   415fc:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
   41600:	01403e04 	movi	r5,248
   41604:	e13ffc17 	ldw	r4,-16(fp)
   41608:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4160c:	108003cc 	andi	r2,r2,15
   41610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
   41614:	003f9006 	br	41458 <__alt_data_end+0xfffc1458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
   41618:	e0fff88b 	ldhu	r3,-30(fp)
   4161c:	e0bffb0b 	ldhu	r2,-20(fp)
   41620:	1885c83a 	sub	r2,r3,r2
   41624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
   41628:	e0bffb0b 	ldhu	r2,-20(fp)
   4162c:	e0fff717 	ldw	r3,-36(fp)
   41630:	1885883a 	add	r2,r3,r2
   41634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
   41638:	003f5506 	br	41390 <__alt_data_end+0xfffc1390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
   4163c:	01403e04 	movi	r5,248
   41640:	e13ffc17 	ldw	r4,-16(fp)
   41644:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41648:	10803fcc 	andi	r2,r2,255
   4164c:	1080080c 	andi	r2,r2,32
   41650:	10000226 	beq	r2,zero,4165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
   41654:	00c00044 	movi	r3,1
   41658:	00000106 	br	41660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
   4165c:	0007883a 	mov	r3,zero
   41660:	e0bffd17 	ldw	r2,-12(fp)
   41664:	1940004c 	andi	r5,r3,1
   41668:	11000083 	ldbu	r4,2(r2)
   4166c:	00ffff84 	movi	r3,-2
   41670:	20c6703a 	and	r3,r4,r3
   41674:	1809883a 	mov	r4,r3
   41678:	2807883a 	mov	r3,r5
   4167c:	20c6b03a 	or	r3,r4,r3
   41680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
   41684:	e0bff603 	ldbu	r2,-40(fp)
}
   41688:	e037883a 	mov	sp,fp
   4168c:	dfc00117 	ldw	ra,4(sp)
   41690:	df000017 	ldw	fp,0(sp)
   41694:	dec00204 	addi	sp,sp,8
   41698:	f800283a 	ret

0004169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
   4169c:	defff704 	addi	sp,sp,-36
   416a0:	dfc00815 	stw	ra,32(sp)
   416a4:	df000715 	stw	fp,28(sp)
   416a8:	df000704 	addi	fp,sp,28
   416ac:	e13ffc15 	stw	r4,-16(fp)
   416b0:	2809883a 	mov	r4,r5
   416b4:	3007883a 	mov	r3,r6
   416b8:	3805883a 	mov	r2,r7
   416bc:	e13ffd05 	stb	r4,-12(fp)
   416c0:	e0fffe05 	stb	r3,-8(fp)
   416c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
   416c8:	00406dc0 	call	406dc <_Z6millisv>
   416cc:	1084e204 	addi	r2,r2,5000
   416d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
   416d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
   416d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
   416dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
   416e0:	00406dc0 	call	406dc <_Z6millisv>
   416e4:	1007883a 	mov	r3,r2
   416e8:	e0bffa17 	ldw	r2,-24(fp)
   416ec:	1885c83a 	sub	r2,r3,r2
   416f0:	1004d7fa 	srli	r2,r2,31
   416f4:	10803fcc 	andi	r2,r2,255
   416f8:	10004226 	beq	r2,zero,41804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
   416fc:	e0fffd03 	ldbu	r3,-12(fp)
   41700:	e0bffe03 	ldbu	r2,-8(fp)
   41704:	1884b03a 	or	r2,r3,r2
   41708:	10803fcc 	andi	r2,r2,255
   4170c:	100d883a 	mov	r6,r2
   41710:	01403c04 	movi	r5,240
   41714:	e13ffc17 	ldw	r4,-16(fp)
   41718:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
   4171c:	00bfffc4 	movi	r2,-1
   41720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
   41724:	00406dc0 	call	406dc <_Z6millisv>
   41728:	1007883a 	mov	r3,r2
   4172c:	e0bffa17 	ldw	r2,-24(fp)
   41730:	1885c83a 	sub	r2,r3,r2
   41734:	1004d7fa 	srli	r2,r2,31
   41738:	10803fcc 	andi	r2,r2,255
   4173c:	10000e26 	beq	r2,zero,41778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
   41740:	01403204 	movi	r5,200
   41744:	e13ffc17 	ldw	r4,-16(fp)
   41748:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
   41750:	e0bffb03 	ldbu	r2,-20(fp)
   41754:	10803fcc 	andi	r2,r2,255
   41758:	1080201c 	xori	r2,r2,128
   4175c:	10bfe004 	addi	r2,r2,-128
   41760:	103ff00e 	bge	r2,zero,41724 <__alt_data_end+0xfffc1724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
   41764:	01802004 	movi	r6,128
   41768:	01403204 	movi	r5,200
   4176c:	e13ffc17 	ldw	r4,-16(fp)
   41770:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
   41774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
   41778:	01403e04 	movi	r5,248
   4177c:	e13ffc17 	ldw	r4,-16(fp)
   41780:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41784:	108003cc 	andi	r2,r2,15
   41788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
   4178c:	e0bff903 	ldbu	r2,-28(fp)
   41790:	10c00120 	cmpeqi	r3,r2,4
   41794:	1800031e 	bne	r3,zero,417a4 <_ZN3USB11dispatchPktEhht+0x108>
   41798:	108003a0 	cmpeqi	r2,r2,14
   4179c:	10000b1e 	bne	r2,zero,417cc <_ZN3USB11dispatchPktEhht+0x130>
   417a0:	00001206 	br	417ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
   417a4:	e0bff98b 	ldhu	r2,-26(fp)
   417a8:	10800044 	addi	r2,r2,1
   417ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
   417b0:	e0bfff0b 	ldhu	r2,-4(fp)
   417b4:	10000f26 	beq	r2,zero,417f4 <_ZN3USB11dispatchPktEhht+0x158>
   417b8:	e0fff98b 	ldhu	r3,-26(fp)
   417bc:	e0bfff0b 	ldhu	r2,-4(fp)
   417c0:	18800c1e 	bne	r3,r2,417f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
   417c4:	e0bff903 	ldbu	r2,-28(fp)
   417c8:	00000f06 	br	41808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
   417cc:	e0bff943 	ldbu	r2,-27(fp)
   417d0:	10800044 	addi	r2,r2,1
   417d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
   417d8:	e0bff943 	ldbu	r2,-27(fp)
   417dc:	108000d8 	cmpnei	r2,r2,3
   417e0:	1000061e 	bne	r2,zero,417fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
   417e4:	e0bff903 	ldbu	r2,-28(fp)
   417e8:	00000706 	br	41808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
   417ec:	e0bff903 	ldbu	r2,-28(fp)
   417f0:	00000506 	br	41808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
   417f4:	0001883a 	nop
   417f8:	003fb906 	br	416e0 <__alt_data_end+0xfffc16e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
   417fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
   41800:	003fb706 	br	416e0 <__alt_data_end+0xfffc16e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
   41804:	e0bff903 	ldbu	r2,-28(fp)
}
   41808:	e037883a 	mov	sp,fp
   4180c:	dfc00117 	ldw	ra,4(sp)
   41810:	df000017 	ldw	fp,0(sp)
   41814:	dec00204 	addi	sp,sp,8
   41818:	f800283a 	ret

0004181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
   4181c:	defffa04 	addi	sp,sp,-24
   41820:	dfc00515 	stw	ra,20(sp)
   41824:	df000415 	stw	fp,16(sp)
   41828:	df000404 	addi	fp,sp,16
   4182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
   41830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
   41834:	e13ffe17 	ldw	r4,-8(fp)
   41838:	004a2800 	call	4a280 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
   4183c:	e13ffe17 	ldw	r4,-8(fp)
   41840:	00499e00 	call	499e0 <_ZN8MAX3421e12getVbusStateEv>
   41844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
   41848:	e0bffcc3 	ldbu	r2,-13(fp)
   4184c:	10c00060 	cmpeqi	r3,r2,1
   41850:	1800091e 	bne	r3,zero,41878 <_ZN3USB4TaskEv+0x5c>
   41854:	10c00088 	cmpgei	r3,r2,2
   41858:	1800021e 	bne	r3,zero,41864 <_ZN3USB4TaskEv+0x48>
   4185c:	10000a26 	beq	r2,zero,41888 <_ZN3USB4TaskEv+0x6c>
   41860:	00001f06 	br	418e0 <_ZN3USB4TaskEv+0xc4>
   41864:	10c000a0 	cmpeqi	r3,r2,2
   41868:	1800121e 	bne	r3,zero,418b4 <_ZN3USB4TaskEv+0x98>
   4186c:	108000e0 	cmpeqi	r2,r2,3
   41870:	10000e1e 	bne	r2,zero,418ac <_ZN3USB4TaskEv+0x90>
   41874:	00001a06 	br	418e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
   41878:	008004c4 	movi	r2,19
   4187c:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
   41880:	e03ffc05 	stb	zero,-16(fp)
                        break;
   41884:	00001606 	br	418e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
   41888:	d0b23d43 	ldbu	r2,-14091(gp)
   4188c:	10803fcc 	andi	r2,r2,255
   41890:	10803c0c 	andi	r2,r2,240
   41894:	10800420 	cmpeqi	r2,r2,16
   41898:	1000021e 	bne	r2,zero,418a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
   4189c:	00800444 	movi	r2,17
   418a0:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
   418a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
   418a8:	00000d06 	br	418e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
   418ac:	00800044 	movi	r2,1
   418b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
   418b4:	d0b23d43 	ldbu	r2,-14091(gp)
   418b8:	10803fcc 	andi	r2,r2,255
   418bc:	10803c0c 	andi	r2,r2,240
   418c0:	10800418 	cmpnei	r2,r2,16
   418c4:	1000051e 	bne	r2,zero,418dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
   418c8:	00406dc0 	call	406dc <_Z6millisv>
   418cc:	10803204 	addi	r2,r2,200
   418d0:	d0b23e15 	stw	r2,-14088(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
   418d4:	00800804 	movi	r2,32
   418d8:	d0b23d45 	stb	r2,-14091(gp)
                        }
                        break;
   418dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
   418e0:	e03ffc45 	stb	zero,-15(fp)
   418e4:	e0bffc43 	ldbu	r2,-15(fp)
   418e8:	10800428 	cmpgeui	r2,r2,16
   418ec:	1000201e 	bne	r2,zero,41970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
   418f0:	e0bffc43 	ldbu	r2,-15(fp)
   418f4:	e0fffe17 	ldw	r3,-8(fp)
   418f8:	10800784 	addi	r2,r2,30
   418fc:	1085883a 	add	r2,r2,r2
   41900:	1085883a 	add	r2,r2,r2
   41904:	1885883a 	add	r2,r3,r2
   41908:	10800017 	ldw	r2,0(r2)
   4190c:	10001426 	beq	r2,zero,41960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
   41910:	e0bffc43 	ldbu	r2,-15(fp)
   41914:	e0fffe17 	ldw	r3,-8(fp)
   41918:	10800784 	addi	r2,r2,30
   4191c:	1085883a 	add	r2,r2,r2
   41920:	1085883a 	add	r2,r2,r2
   41924:	1885883a 	add	r2,r3,r2
   41928:	10800017 	ldw	r2,0(r2)
   4192c:	10800017 	ldw	r2,0(r2)
   41930:	10800304 	addi	r2,r2,12
   41934:	10c00017 	ldw	r3,0(r2)
   41938:	e0bffc43 	ldbu	r2,-15(fp)
   4193c:	e13ffe17 	ldw	r4,-8(fp)
   41940:	10800784 	addi	r2,r2,30
   41944:	1085883a 	add	r2,r2,r2
   41948:	1085883a 	add	r2,r2,r2
   4194c:	2085883a 	add	r2,r4,r2
   41950:	10800017 	ldw	r2,0(r2)
   41954:	1009883a 	mov	r4,r2
   41958:	183ee83a 	callr	r3
   4195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
   41960:	e0bffc43 	ldbu	r2,-15(fp)
   41964:	10800044 	addi	r2,r2,1
   41968:	e0bffc45 	stb	r2,-15(fp)
   4196c:	003fdd06 	br	418e4 <__alt_data_end+0xfffc18e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
   41970:	d0b23d43 	ldbu	r2,-14091(gp)
   41974:	10803fcc 	andi	r2,r2,255
   41978:	10c01020 	cmpeqi	r3,r2,64
   4197c:	1800511e 	bne	r3,zero,41ac4 <_ZN3USB4TaskEv+0x2a8>
   41980:	10c01048 	cmpgei	r3,r2,65
   41984:	18000c1e 	bne	r3,zero,419b8 <_ZN3USB4TaskEv+0x19c>
   41988:	10c004e0 	cmpeqi	r3,r2,19
   4198c:	18008e1e 	bne	r3,zero,41bc8 <_ZN3USB4TaskEv+0x3ac>
   41990:	10c00508 	cmpgei	r3,r2,20
   41994:	1800031e 	bne	r3,zero,419a4 <_ZN3USB4TaskEv+0x188>
   41998:	10800460 	cmpeqi	r2,r2,17
   4199c:	10000f1e 	bne	r2,zero,419dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
   419a0:	00009406 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
   419a4:	10c00820 	cmpeqi	r3,r2,32
   419a8:	1800351e 	bne	r3,zero,41a80 <_ZN3USB4TaskEv+0x264>
   419ac:	10800c20 	cmpeqi	r2,r2,48
   419b0:	10003d1e 	bne	r2,zero,41aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
   419b4:	00008f06 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
   419b8:	10c02020 	cmpeqi	r3,r2,128
   419bc:	18006e1e 	bne	r3,zero,41b78 <_ZN3USB4TaskEv+0x35c>
   419c0:	10c02048 	cmpgei	r3,r2,129
   419c4:	18008b1e 	bne	r3,zero,41bf4 <_ZN3USB4TaskEv+0x3d8>
   419c8:	10c01420 	cmpeqi	r3,r2,80
   419cc:	1800521e 	bne	r3,zero,41b18 <_ZN3USB4TaskEv+0x2fc>
   419d0:	10801460 	cmpeqi	r2,r2,81
   419d4:	10005e1e 	bne	r2,zero,41b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
   419d8:	00008606 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
   419dc:	e13ffe17 	ldw	r4,-8(fp)
   419e0:	004075c0 	call	4075c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
   419e4:	e03ffc85 	stb	zero,-14(fp)
   419e8:	e0bffc83 	ldbu	r2,-14(fp)
   419ec:	10800428 	cmpgeui	r2,r2,16
   419f0:	1000201e 	bne	r2,zero,41a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
   419f4:	e0bffc83 	ldbu	r2,-14(fp)
   419f8:	e0fffe17 	ldw	r3,-8(fp)
   419fc:	10800784 	addi	r2,r2,30
   41a00:	1085883a 	add	r2,r2,r2
   41a04:	1085883a 	add	r2,r2,r2
   41a08:	1885883a 	add	r2,r3,r2
   41a0c:	10800017 	ldw	r2,0(r2)
   41a10:	10001426 	beq	r2,zero,41a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
   41a14:	e0bffc83 	ldbu	r2,-14(fp)
   41a18:	e0fffe17 	ldw	r3,-8(fp)
   41a1c:	10800784 	addi	r2,r2,30
   41a20:	1085883a 	add	r2,r2,r2
   41a24:	1085883a 	add	r2,r2,r2
   41a28:	1885883a 	add	r2,r3,r2
   41a2c:	10800017 	ldw	r2,0(r2)
   41a30:	10800017 	ldw	r2,0(r2)
   41a34:	10800204 	addi	r2,r2,8
   41a38:	10c00017 	ldw	r3,0(r2)
   41a3c:	e0bffc83 	ldbu	r2,-14(fp)
   41a40:	e13ffe17 	ldw	r4,-8(fp)
   41a44:	10800784 	addi	r2,r2,30
   41a48:	1085883a 	add	r2,r2,r2
   41a4c:	1085883a 	add	r2,r2,r2
   41a50:	2085883a 	add	r2,r4,r2
   41a54:	10800017 	ldw	r2,0(r2)
   41a58:	1009883a 	mov	r4,r2
   41a5c:	183ee83a 	callr	r3
   41a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
   41a64:	e0bffc83 	ldbu	r2,-14(fp)
   41a68:	10800044 	addi	r2,r2,1
   41a6c:	e0bffc85 	stb	r2,-14(fp)
   41a70:	003fdd06 	br	419e8 <__alt_data_end+0xfffc19e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
   41a74:	00800484 	movi	r2,18
   41a78:	d0b23d45 	stb	r2,-14091(gp)
                        break;
   41a7c:	00005d06 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
   41a80:	00406dc0 	call	406dc <_Z6millisv>
   41a84:	1007883a 	mov	r3,r2
   41a88:	d0b23e17 	ldw	r2,-14088(gp)
   41a8c:	1885c83a 	sub	r2,r3,r2
   41a90:	0084303a 	nor	r2,zero,r2
   41a94:	1004d7fa 	srli	r2,r2,31
   41a98:	10803fcc 	andi	r2,r2,255
   41a9c:	10004c26 	beq	r2,zero,41bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
   41aa0:	00800c04 	movi	r2,48
   41aa4:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
   41aa8:	01800044 	movi	r6,1
   41aac:	01403a04 	movi	r5,232
   41ab0:	e13ffe17 	ldw	r4,-8(fp)
   41ab4:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
   41ab8:	00801004 	movi	r2,64
   41abc:	d0b23d45 	stb	r2,-14091(gp)
                        break;
   41ac0:	00004c06 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
   41ac4:	01403a04 	movi	r5,232
   41ac8:	e13ffe17 	ldw	r4,-8(fp)
   41acc:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41ad0:	10803fcc 	andi	r2,r2,255
   41ad4:	1080004c 	andi	r2,r2,1
   41ad8:	1005003a 	cmpeq	r2,r2,zero
   41adc:	10803fcc 	andi	r2,r2,255
   41ae0:	10003d26 	beq	r2,zero,41bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
   41ae4:	01403604 	movi	r5,216
   41ae8:	e13ffe17 	ldw	r4,-8(fp)
   41aec:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41af0:	10800214 	ori	r2,r2,8
   41af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
   41af8:	e0bffcc3 	ldbu	r2,-13(fp)
   41afc:	100d883a 	mov	r6,r2
   41b00:	01403604 	movi	r5,216
   41b04:	e13ffe17 	ldw	r4,-8(fp)
   41b08:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
   41b0c:	00801404 	movi	r2,80
   41b10:	d0b23d45 	stb	r2,-14091(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
   41b14:	00003006 	br	41bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
   41b18:	01403204 	movi	r5,200
   41b1c:	e13ffe17 	ldw	r4,-8(fp)
   41b20:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   41b24:	10803fcc 	andi	r2,r2,255
   41b28:	1080100c 	andi	r2,r2,64
   41b2c:	1004c03a 	cmpne	r2,r2,zero
   41b30:	10803fcc 	andi	r2,r2,255
   41b34:	10002a26 	beq	r2,zero,41be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
   41b38:	00801444 	movi	r2,81
   41b3c:	d0b23d45 	stb	r2,-14091(gp)
                                delay = (uint32_t)millis() + 20;
   41b40:	00406dc0 	call	406dc <_Z6millisv>
   41b44:	10800504 	addi	r2,r2,20
   41b48:	d0b23e15 	stw	r2,-14088(gp)
                        }
                        break;
   41b4c:	00002406 	br	41be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
   41b50:	00406dc0 	call	406dc <_Z6millisv>
   41b54:	1007883a 	mov	r3,r2
   41b58:	d0b23e17 	ldw	r2,-14088(gp)
   41b5c:	1885c83a 	sub	r2,r3,r2
   41b60:	0084303a 	nor	r2,zero,r2
   41b64:	1004d7fa 	srli	r2,r2,31
   41b68:	10803fcc 	andi	r2,r2,255
   41b6c:	10001e26 	beq	r2,zero,41be8 <_ZN3USB4TaskEv+0x3cc>
   41b70:	00bfe004 	movi	r2,-128
   41b74:	d0b23d45 	stb	r2,-14091(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
   41b78:	e0bffc03 	ldbu	r2,-16(fp)
   41b7c:	100f883a 	mov	r7,r2
   41b80:	000d883a 	mov	r6,zero
   41b84:	000b883a 	mov	r5,zero
   41b88:	e13ffe17 	ldw	r4,-8(fp)
   41b8c:	0041ffc0 	call	41ffc <_ZN3USB11ConfiguringEhhb>
   41b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
   41b94:	e0bffd03 	ldbu	r2,-12(fp)
   41b98:	10000826 	beq	r2,zero,41bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
   41b9c:	e0bffd03 	ldbu	r2,-12(fp)
   41ba0:	108034a0 	cmpeqi	r2,r2,210
   41ba4:	1000121e 	bne	r2,zero,41bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
   41ba8:	e0bffd03 	ldbu	r2,-12(fp)
   41bac:	d0b23d05 	stb	r2,-14092(gp)
                                        usb_task_state = USB_STATE_ERROR;
   41bb0:	00bfe804 	movi	r2,-96
   41bb4:	d0b23d45 	stb	r2,-14091(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
   41bb8:	00000d06 	br	41bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
   41bbc:	00bfe404 	movi	r2,-112
   41bc0:	d0b23d45 	stb	r2,-14091(gp)
                        break;
   41bc4:	00000a06 	br	41bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
   41bc8:	0001883a 	nop
   41bcc:	00000906 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
   41bd0:	0001883a 	nop
   41bd4:	00000706 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
   41bd8:	0001883a 	nop
   41bdc:	00000506 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
   41be0:	0001883a 	nop
   41be4:	00000306 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
   41be8:	0001883a 	nop
   41bec:	00000106 	br	41bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
   41bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
   41bf4:	0001883a 	nop
   41bf8:	e037883a 	mov	sp,fp
   41bfc:	dfc00117 	ldw	ra,4(sp)
   41c00:	df000017 	ldw	fp,0(sp)
   41c04:	dec00204 	addi	sp,sp,8
   41c08:	f800283a 	ret

00041c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
   41c0c:	defff704 	addi	sp,sp,-36
   41c10:	dfc00815 	stw	ra,32(sp)
   41c14:	df000715 	stw	fp,28(sp)
   41c18:	df000704 	addi	fp,sp,28
   41c1c:	e13ffc15 	stw	r4,-16(fp)
   41c20:	2809883a 	mov	r4,r5
   41c24:	3007883a 	mov	r3,r6
   41c28:	3805883a 	mov	r2,r7
   41c2c:	e13ffd05 	stb	r4,-12(fp)
   41c30:	e0fffe05 	stb	r3,-8(fp)
   41c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
   41c38:	e03ff915 	stw	zero,-28(fp)
   41c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
   41c40:	e0bffc17 	ldw	r2,-16(fp)
   41c44:	000b883a 	mov	r5,zero
   41c48:	1009883a 	mov	r4,r2
   41c4c:	0042d3c0 	call	42d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
   41c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
   41c54:	e0bff917 	ldw	r2,-28(fp)
   41c58:	1000021e 	bne	r2,zero,41c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   41c5c:	00bff584 	movi	r2,-42
   41c60:	00003d06 	br	41d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
   41c64:	e0bff917 	ldw	r2,-28(fp)
   41c68:	10c00003 	ldbu	r3,0(r2)
   41c6c:	11000043 	ldbu	r4,1(r2)
   41c70:	2008923a 	slli	r4,r4,8
   41c74:	20c6b03a 	or	r3,r4,r3
   41c78:	11000083 	ldbu	r4,2(r2)
   41c7c:	2008943a 	slli	r4,r4,16
   41c80:	20c6b03a 	or	r3,r4,r3
   41c84:	108000c3 	ldbu	r2,3(r2)
   41c88:	1004963a 	slli	r2,r2,24
   41c8c:	10c4b03a 	or	r2,r2,r3
   41c90:	1000021e 	bne	r2,zero,41c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
   41c94:	00bff5c4 	movi	r2,-41
   41c98:	00002f06 	br	41d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
   41c9c:	e0bff917 	ldw	r2,-28(fp)
   41ca0:	e0ffff03 	ldbu	r3,-4(fp)
   41ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
   41ca8:	e0bffc17 	ldw	r2,-16(fp)
   41cac:	e0fffd03 	ldbu	r3,-12(fp)
   41cb0:	e13ffe03 	ldbu	r4,-8(fp)
   41cb4:	200f883a 	mov	r7,r4
   41cb8:	000d883a 	mov	r6,zero
   41cbc:	180b883a 	mov	r5,r3
   41cc0:	1009883a 	mov	r4,r2
   41cc4:	0042df40 	call	42df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
   41cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
   41ccc:	e0bffb03 	ldbu	r2,-20(fp)
   41cd0:	1000021e 	bne	r2,zero,41cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
   41cd4:	00bff504 	movi	r2,-44
   41cd8:	00001f06 	br	41d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
   41cdc:	e0bffc17 	ldw	r2,-16(fp)
   41ce0:	e0fffb03 	ldbu	r3,-20(fp)
   41ce4:	180b883a 	mov	r5,r3
   41ce8:	1009883a 	mov	r4,r2
   41cec:	0042d3c0 	call	42d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
   41cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
   41cf4:	e0bffa17 	ldw	r2,-24(fp)
   41cf8:	1000021e 	bne	r2,zero,41d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   41cfc:	00bff584 	movi	r2,-42
   41d00:	00001506 	br	41d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
   41d04:	e0bffa17 	ldw	r2,-24(fp)
   41d08:	e0ffff03 	ldbu	r3,-4(fp)
   41d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
   41d10:	e0bffb03 	ldbu	r2,-20(fp)
   41d14:	100f883a 	mov	r7,r2
   41d18:	000d883a 	mov	r6,zero
   41d1c:	000b883a 	mov	r5,zero
   41d20:	e13ffc17 	ldw	r4,-16(fp)
   41d24:	0042b000 	call	42b00 <_ZN3USB7setAddrEhhh>
   41d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
   41d2c:	e0bffb43 	ldbu	r2,-19(fp)
   41d30:	10000826 	beq	r2,zero,41d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
   41d34:	e0bffc17 	ldw	r2,-16(fp)
   41d38:	e0fffb03 	ldbu	r3,-20(fp)
   41d3c:	180b883a 	mov	r5,r3
   41d40:	1009883a 	mov	r4,r2
   41d44:	00430540 	call	43054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
   41d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
   41d4c:	e0bffb43 	ldbu	r2,-19(fp)
   41d50:	00000106 	br	41d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
   41d54:	0005883a 	mov	r2,zero
};
   41d58:	e037883a 	mov	sp,fp
   41d5c:	dfc00117 	ldw	ra,4(sp)
   41d60:	df000017 	ldw	fp,0(sp)
   41d64:	dec00204 	addi	sp,sp,8
   41d68:	f800283a 	ret

00041d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
   41d6c:	defff804 	addi	sp,sp,-32
   41d70:	dfc00715 	stw	ra,28(sp)
   41d74:	df000615 	stw	fp,24(sp)
   41d78:	df000604 	addi	fp,sp,24
   41d7c:	e13ffb15 	stw	r4,-20(fp)
   41d80:	3009883a 	mov	r4,r6
   41d84:	3807883a 	mov	r3,r7
   41d88:	e0800217 	ldw	r2,8(fp)
   41d8c:	e17ffc05 	stb	r5,-16(fp)
   41d90:	e13ffd05 	stb	r4,-12(fp)
   41d94:	e0fffe05 	stb	r3,-8(fp)
   41d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
   41d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
   41da0:	e0bffc03 	ldbu	r2,-16(fp)
   41da4:	e0fffb17 	ldw	r3,-20(fp)
   41da8:	10800784 	addi	r2,r2,30
   41dac:	1085883a 	add	r2,r2,r2
   41db0:	1085883a 	add	r2,r2,r2
   41db4:	1885883a 	add	r2,r3,r2
   41db8:	10800017 	ldw	r2,0(r2)
   41dbc:	10800017 	ldw	r2,0(r2)
   41dc0:	10800104 	addi	r2,r2,4
   41dc4:	10c00017 	ldw	r3,0(r2)
   41dc8:	e0bffc03 	ldbu	r2,-16(fp)
   41dcc:	e13ffb17 	ldw	r4,-20(fp)
   41dd0:	10800784 	addi	r2,r2,30
   41dd4:	1085883a 	add	r2,r2,r2
   41dd8:	1085883a 	add	r2,r2,r2
   41ddc:	2085883a 	add	r2,r4,r2
   41de0:	10800017 	ldw	r2,0(r2)
   41de4:	e13ffd03 	ldbu	r4,-12(fp)
   41de8:	e17ffe03 	ldbu	r5,-8(fp)
   41dec:	e1bfff03 	ldbu	r6,-4(fp)
   41df0:	300f883a 	mov	r7,r6
   41df4:	280d883a 	mov	r6,r5
   41df8:	200b883a 	mov	r5,r4
   41dfc:	1009883a 	mov	r4,r2
   41e00:	183ee83a 	callr	r3
   41e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
   41e08:	e0bffa43 	ldbu	r2,-23(fp)
   41e0c:	10803818 	cmpnei	r2,r2,224
   41e10:	10001f1e 	bne	r2,zero,41e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
   41e14:	e0bffd03 	ldbu	r2,-12(fp)
   41e18:	1000071e 	bne	r2,zero,41e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
   41e1c:	01800044 	movi	r6,1
   41e20:	01403a04 	movi	r5,232
   41e24:	e13ffb17 	ldw	r4,-20(fp)
   41e28:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
   41e2c:	01001984 	movi	r4,102
   41e30:	00406840 	call	40684 <_Z5delaym>
   41e34:	00002606 	br	41ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
   41e38:	e0bffd03 	ldbu	r2,-12(fp)
   41e3c:	e0fffb17 	ldw	r3,-20(fp)
   41e40:	10800784 	addi	r2,r2,30
   41e44:	1085883a 	add	r2,r2,r2
   41e48:	1085883a 	add	r2,r2,r2
   41e4c:	1885883a 	add	r2,r3,r2
   41e50:	10800017 	ldw	r2,0(r2)
   41e54:	10800017 	ldw	r2,0(r2)
   41e58:	10800504 	addi	r2,r2,20
   41e5c:	10c00017 	ldw	r3,0(r2)
   41e60:	e0bffd03 	ldbu	r2,-12(fp)
   41e64:	e13ffb17 	ldw	r4,-20(fp)
   41e68:	10800784 	addi	r2,r2,30
   41e6c:	1085883a 	add	r2,r2,r2
   41e70:	1085883a 	add	r2,r2,r2
   41e74:	2085883a 	add	r2,r4,r2
   41e78:	10800017 	ldw	r2,0(r2)
   41e7c:	e13ffe03 	ldbu	r4,-8(fp)
   41e80:	200b883a 	mov	r5,r4
   41e84:	1009883a 	mov	r4,r2
   41e88:	183ee83a 	callr	r3
   41e8c:	00001006 	br	41ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
   41e90:	e0bffa43 	ldbu	r2,-23(fp)
   41e94:	10800358 	cmpnei	r2,r2,13
   41e98:	1000091e 	bne	r2,zero,41ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
   41e9c:	e0bffa03 	ldbu	r2,-24(fp)
   41ea0:	108000e8 	cmpgeui	r2,r2,3
   41ea4:	1000061e 	bne	r2,zero,41ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
   41ea8:	01001904 	movi	r4,100
   41eac:	00406840 	call	40684 <_Z5delaym>
                retries++;
   41eb0:	e0bffa03 	ldbu	r2,-24(fp)
   41eb4:	10800044 	addi	r2,r2,1
   41eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
   41ebc:	003fb806 	br	41da0 <__alt_data_end+0xfffc1da0>
        } else if(rcode)
   41ec0:	e0bffa43 	ldbu	r2,-23(fp)
   41ec4:	10000226 	beq	r2,zero,41ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
   41ec8:	e0bffa43 	ldbu	r2,-23(fp)
   41ecc:	00004606 	br	41fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
   41ed0:	e0bffc03 	ldbu	r2,-16(fp)
   41ed4:	e0fffb17 	ldw	r3,-20(fp)
   41ed8:	10800784 	addi	r2,r2,30
   41edc:	1085883a 	add	r2,r2,r2
   41ee0:	1085883a 	add	r2,r2,r2
   41ee4:	1885883a 	add	r2,r3,r2
   41ee8:	10800017 	ldw	r2,0(r2)
   41eec:	10800017 	ldw	r2,0(r2)
   41ef0:	10c00017 	ldw	r3,0(r2)
   41ef4:	e0bffc03 	ldbu	r2,-16(fp)
   41ef8:	e13ffb17 	ldw	r4,-20(fp)
   41efc:	10800784 	addi	r2,r2,30
   41f00:	1085883a 	add	r2,r2,r2
   41f04:	1085883a 	add	r2,r2,r2
   41f08:	2085883a 	add	r2,r4,r2
   41f0c:	10800017 	ldw	r2,0(r2)
   41f10:	e13ffd03 	ldbu	r4,-12(fp)
   41f14:	e17ffe03 	ldbu	r5,-8(fp)
   41f18:	e1bfff03 	ldbu	r6,-4(fp)
   41f1c:	300f883a 	mov	r7,r6
   41f20:	280d883a 	mov	r6,r5
   41f24:	200b883a 	mov	r5,r4
   41f28:	1009883a 	mov	r4,r2
   41f2c:	183ee83a 	callr	r3
   41f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
   41f34:	e0bffa43 	ldbu	r2,-23(fp)
   41f38:	10800358 	cmpnei	r2,r2,13
   41f3c:	1000091e 	bne	r2,zero,41f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
   41f40:	e0bffa03 	ldbu	r2,-24(fp)
   41f44:	108000e8 	cmpgeui	r2,r2,3
   41f48:	1000061e 	bne	r2,zero,41f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
   41f4c:	01001904 	movi	r4,100
   41f50:	00406840 	call	40684 <_Z5delaym>
                retries++;
   41f54:	e0bffa03 	ldbu	r2,-24(fp)
   41f58:	10800044 	addi	r2,r2,1
   41f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
   41f60:	003f8f06 	br	41da0 <__alt_data_end+0xfffc1da0>
        }
        if(rcode) {
   41f64:	e0bffa43 	ldbu	r2,-23(fp)
   41f68:	10001e26 	beq	r2,zero,41fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
   41f6c:	e0bffd03 	ldbu	r2,-12(fp)
   41f70:	1000071e 	bne	r2,zero,41f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
   41f74:	01800044 	movi	r6,1
   41f78:	01403a04 	movi	r5,232
   41f7c:	e13ffb17 	ldw	r4,-20(fp)
   41f80:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
   41f84:	01001984 	movi	r4,102
   41f88:	00406840 	call	40684 <_Z5delaym>
   41f8c:	00001506 	br	41fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
   41f90:	e0bffd03 	ldbu	r2,-12(fp)
   41f94:	e0fffb17 	ldw	r3,-20(fp)
   41f98:	10800784 	addi	r2,r2,30
   41f9c:	1085883a 	add	r2,r2,r2
   41fa0:	1085883a 	add	r2,r2,r2
   41fa4:	1885883a 	add	r2,r3,r2
   41fa8:	10800017 	ldw	r2,0(r2)
   41fac:	10800017 	ldw	r2,0(r2)
   41fb0:	10800504 	addi	r2,r2,20
   41fb4:	10c00017 	ldw	r3,0(r2)
   41fb8:	e0bffd03 	ldbu	r2,-12(fp)
   41fbc:	e13ffb17 	ldw	r4,-20(fp)
   41fc0:	10800784 	addi	r2,r2,30
   41fc4:	1085883a 	add	r2,r2,r2
   41fc8:	1085883a 	add	r2,r2,r2
   41fcc:	2085883a 	add	r2,r4,r2
   41fd0:	10800017 	ldw	r2,0(r2)
   41fd4:	e13ffe03 	ldbu	r4,-8(fp)
   41fd8:	200b883a 	mov	r5,r4
   41fdc:	1009883a 	mov	r4,r2
   41fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
   41fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
   41fe8:	e037883a 	mov	sp,fp
   41fec:	dfc00117 	ldw	ra,4(sp)
   41ff0:	df000017 	ldw	fp,0(sp)
   41ff4:	dec00204 	addi	sp,sp,8
   41ff8:	f800283a 	ret

00041ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
   41ffc:	deffed04 	addi	sp,sp,-76
   42000:	dfc01215 	stw	ra,72(sp)
   42004:	df001115 	stw	fp,68(sp)
   42008:	df001104 	addi	fp,sp,68
   4200c:	e13ffc15 	stw	r4,-16(fp)
   42010:	2809883a 	mov	r4,r5
   42014:	3007883a 	mov	r3,r6
   42018:	3805883a 	mov	r2,r7
   4201c:	e13ffd05 	stb	r4,-12(fp)
   42020:	e0fffe05 	stb	r3,-8(fp)
   42024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
   42028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
   4202c:	e0bff684 	addi	r2,fp,-38
   42030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
   42034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
   42038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
   4203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
   42040:	00800204 	movi	r2,8
   42044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
   42048:	e0fffb83 	ldbu	r3,-18(fp)
   4204c:	00bfff84 	movi	r2,-2
   42050:	1884703a 	and	r2,r3,r2
   42054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
   42058:	e0fffb83 	ldbu	r3,-18(fp)
   4205c:	00bfff44 	movi	r2,-3
   42060:	1884703a 	and	r2,r3,r2
   42064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
   42068:	e0bffb83 	ldbu	r2,-18(fp)
   4206c:	108000cc 	andi	r2,r2,3
   42070:	10800f14 	ori	r2,r2,60
   42074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
   42078:	e13ffc17 	ldw	r4,-16(fp)
   4207c:	0042c180 	call	42c18 <_ZN3USB14GetAddressPoolEv>
   42080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
   42084:	e0bff417 	ldw	r2,-48(fp)
   42088:	10800017 	ldw	r2,0(r2)
   4208c:	10800017 	ldw	r2,0(r2)
   42090:	000b883a 	mov	r5,zero
   42094:	e13ff417 	ldw	r4,-48(fp)
   42098:	103ee83a 	callr	r2
   4209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
   420a0:	e0bff217 	ldw	r2,-56(fp)
   420a4:	1000021e 	bne	r2,zero,420b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   420a8:	00bff584 	movi	r2,-42
   420ac:	00019206 	br	426f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
   420b0:	e0bff217 	ldw	r2,-56(fp)
   420b4:	10c00003 	ldbu	r3,0(r2)
   420b8:	11000043 	ldbu	r4,1(r2)
   420bc:	2008923a 	slli	r4,r4,8
   420c0:	20c6b03a 	or	r3,r4,r3
   420c4:	11000083 	ldbu	r4,2(r2)
   420c8:	2008943a 	slli	r4,r4,16
   420cc:	20c6b03a 	or	r3,r4,r3
   420d0:	108000c3 	ldbu	r2,3(r2)
   420d4:	1004963a 	slli	r2,r2,24
   420d8:	10c4b03a 	or	r2,r2,r3
   420dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
   420e0:	e0bff217 	ldw	r2,-56(fp)
   420e4:	e0fffb04 	addi	r3,fp,-20
   420e8:	19803fcc 	andi	r6,r3,255
   420ec:	11000003 	ldbu	r4,0(r2)
   420f0:	2008703a 	and	r4,r4,zero
   420f4:	200b883a 	mov	r5,r4
   420f8:	3009883a 	mov	r4,r6
   420fc:	2908b03a 	or	r4,r5,r4
   42100:	11000005 	stb	r4,0(r2)
   42104:	1808d23a 	srli	r4,r3,8
   42108:	21803fcc 	andi	r6,r4,255
   4210c:	11000043 	ldbu	r4,1(r2)
   42110:	2008703a 	and	r4,r4,zero
   42114:	200b883a 	mov	r5,r4
   42118:	3009883a 	mov	r4,r6
   4211c:	2908b03a 	or	r4,r5,r4
   42120:	11000045 	stb	r4,1(r2)
   42124:	1808d43a 	srli	r4,r3,16
   42128:	21803fcc 	andi	r6,r4,255
   4212c:	11000083 	ldbu	r4,2(r2)
   42130:	2008703a 	and	r4,r4,zero
   42134:	200b883a 	mov	r5,r4
   42138:	3009883a 	mov	r4,r6
   4213c:	2908b03a 	or	r4,r5,r4
   42140:	11000085 	stb	r4,2(r2)
   42144:	180ad63a 	srli	r5,r3,24
   42148:	10c000c3 	ldbu	r3,3(r2)
   4214c:	1806703a 	and	r3,r3,zero
   42150:	1809883a 	mov	r4,r3
   42154:	2807883a 	mov	r3,r5
   42158:	20c6b03a 	or	r3,r4,r3
   4215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
   42160:	e0bff217 	ldw	r2,-56(fp)
   42164:	e0ffff03 	ldbu	r3,-4(fp)
   42168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
   4216c:	00800484 	movi	r2,18
   42170:	10ffffcc 	andi	r3,r2,65535
   42174:	e0bff684 	addi	r2,fp,-38
   42178:	d8800015 	stw	r2,0(sp)
   4217c:	180f883a 	mov	r7,r3
   42180:	000d883a 	mov	r6,zero
   42184:	000b883a 	mov	r5,zero
   42188:	e13ffc17 	ldw	r4,-16(fp)
   4218c:	00428440 	call	42844 <_ZN3USB11getDevDescrEhhtPh>
   42190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
   42194:	e0bff217 	ldw	r2,-56(fp)
   42198:	e0fff317 	ldw	r3,-52(fp)
   4219c:	19403fcc 	andi	r5,r3,255
   421a0:	10c00003 	ldbu	r3,0(r2)
   421a4:	1806703a 	and	r3,r3,zero
   421a8:	1809883a 	mov	r4,r3
   421ac:	2807883a 	mov	r3,r5
   421b0:	20c6b03a 	or	r3,r4,r3
   421b4:	10c00005 	stb	r3,0(r2)
   421b8:	e0fff317 	ldw	r3,-52(fp)
   421bc:	1806d23a 	srli	r3,r3,8
   421c0:	19403fcc 	andi	r5,r3,255
   421c4:	10c00043 	ldbu	r3,1(r2)
   421c8:	1806703a 	and	r3,r3,zero
   421cc:	1809883a 	mov	r4,r3
   421d0:	2807883a 	mov	r3,r5
   421d4:	20c6b03a 	or	r3,r4,r3
   421d8:	10c00045 	stb	r3,1(r2)
   421dc:	e0fff317 	ldw	r3,-52(fp)
   421e0:	1806d43a 	srli	r3,r3,16
   421e4:	19403fcc 	andi	r5,r3,255
   421e8:	10c00083 	ldbu	r3,2(r2)
   421ec:	1806703a 	and	r3,r3,zero
   421f0:	1809883a 	mov	r4,r3
   421f4:	2807883a 	mov	r3,r5
   421f8:	20c6b03a 	or	r3,r4,r3
   421fc:	10c00085 	stb	r3,2(r2)
   42200:	e0fff317 	ldw	r3,-52(fp)
   42204:	180ad63a 	srli	r5,r3,24
   42208:	10c000c3 	ldbu	r3,3(r2)
   4220c:	1806703a 	and	r3,r3,zero
   42210:	1809883a 	mov	r4,r3
   42214:	2807883a 	mov	r3,r5
   42218:	20c6b03a 	or	r3,r4,r3
   4221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
   42220:	e0bff043 	ldbu	r2,-63(fp)
   42224:	10000226 	beq	r2,zero,42230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
   42228:	e0bff043 	ldbu	r2,-63(fp)
   4222c:	00013206 	br	426f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
   42230:	e0bff117 	ldw	r2,-60(fp)
   42234:	10c00203 	ldbu	r3,8(r2)
   42238:	10800243 	ldbu	r2,9(r2)
   4223c:	1004923a 	slli	r2,r2,8
   42240:	10c4b03a 	or	r2,r2,r3
   42244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
   42248:	e0bff117 	ldw	r2,-60(fp)
   4224c:	10c00283 	ldbu	r3,10(r2)
   42250:	108002c3 	ldbu	r2,11(r2)
   42254:	1004923a 	slli	r2,r2,8
   42258:	10c4b03a 	or	r2,r2,r3
   4225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
   42260:	e0bff117 	ldw	r2,-60(fp)
   42264:	10800103 	ldbu	r2,4(r2)
   42268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
   4226c:	e0bff117 	ldw	r2,-60(fp)
   42270:	10800143 	ldbu	r2,5(r2)
   42274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
   42278:	e03ff005 	stb	zero,-64(fp)
   4227c:	e0bff003 	ldbu	r2,-64(fp)
   42280:	10800428 	cmpgeui	r2,r2,16
   42284:	1000821e 	bne	r2,zero,42490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue;// no driver
   42288:	e0bff003 	ldbu	r2,-64(fp)
   4228c:	e0fffc17 	ldw	r3,-16(fp)
   42290:	10800784 	addi	r2,r2,30
   42294:	1085883a 	add	r2,r2,r2
   42298:	1085883a 	add	r2,r2,r2
   4229c:	1885883a 	add	r2,r3,r2
   422a0:	10800017 	ldw	r2,0(r2)
   422a4:	10007226 	beq	r2,zero,42470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
   422a8:	e0bff003 	ldbu	r2,-64(fp)
   422ac:	e0fffc17 	ldw	r3,-16(fp)
   422b0:	10800784 	addi	r2,r2,30
   422b4:	1085883a 	add	r2,r2,r2
   422b8:	1085883a 	add	r2,r2,r2
   422bc:	1885883a 	add	r2,r3,r2
   422c0:	10800017 	ldw	r2,0(r2)
   422c4:	10800017 	ldw	r2,0(r2)
   422c8:	10800404 	addi	r2,r2,16
   422cc:	10c00017 	ldw	r3,0(r2)
   422d0:	e0bff003 	ldbu	r2,-64(fp)
   422d4:	e13ffc17 	ldw	r4,-16(fp)
   422d8:	10800784 	addi	r2,r2,30
   422dc:	1085883a 	add	r2,r2,r2
   422e0:	1085883a 	add	r2,r2,r2
   422e4:	2085883a 	add	r2,r4,r2
   422e8:	10800017 	ldw	r2,0(r2)
   422ec:	1009883a 	mov	r4,r2
   422f0:	183ee83a 	callr	r3
   422f4:	10803fcc 	andi	r2,r2,255
   422f8:	1004c03a 	cmpne	r2,r2,zero
   422fc:	10803fcc 	andi	r2,r2,255
   42300:	10005d1e 	bne	r2,zero,42478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
   42304:	e0bff003 	ldbu	r2,-64(fp)
   42308:	e0fffc17 	ldw	r3,-16(fp)
   4230c:	10800784 	addi	r2,r2,30
   42310:	1085883a 	add	r2,r2,r2
   42314:	1085883a 	add	r2,r2,r2
   42318:	1885883a 	add	r2,r3,r2
   4231c:	10800017 	ldw	r2,0(r2)
   42320:	10800017 	ldw	r2,0(r2)
   42324:	10800804 	addi	r2,r2,32
   42328:	10c00017 	ldw	r3,0(r2)
   4232c:	e0bff003 	ldbu	r2,-64(fp)
   42330:	e13ffc17 	ldw	r4,-16(fp)
   42334:	10800784 	addi	r2,r2,30
   42338:	1085883a 	add	r2,r2,r2
   4233c:	1085883a 	add	r2,r2,r2
   42340:	2085883a 	add	r2,r4,r2
   42344:	10800017 	ldw	r2,0(r2)
   42348:	e13ff643 	ldbu	r4,-39(fp)
   4234c:	200b883a 	mov	r5,r4
   42350:	1009883a 	mov	r4,r2
   42354:	183ee83a 	callr	r3
   42358:	10803fcc 	andi	r2,r2,255
   4235c:	10003226 	beq	r2,zero,42428 <_ZN3USB11ConfiguringEhhb+0x42c>
   42360:	e0bff003 	ldbu	r2,-64(fp)
   42364:	e0fffc17 	ldw	r3,-16(fp)
   42368:	10800784 	addi	r2,r2,30
   4236c:	1085883a 	add	r2,r2,r2
   42370:	1085883a 	add	r2,r2,r2
   42374:	1885883a 	add	r2,r3,r2
   42378:	10800017 	ldw	r2,0(r2)
   4237c:	10800017 	ldw	r2,0(r2)
   42380:	10800604 	addi	r2,r2,24
   42384:	10c00017 	ldw	r3,0(r2)
   42388:	e0bff003 	ldbu	r2,-64(fp)
   4238c:	e13ffc17 	ldw	r4,-16(fp)
   42390:	10800784 	addi	r2,r2,30
   42394:	1085883a 	add	r2,r2,r2
   42398:	1085883a 	add	r2,r2,r2
   4239c:	2085883a 	add	r2,r4,r2
   423a0:	10800017 	ldw	r2,0(r2)
   423a4:	e13ff50b 	ldhu	r4,-44(fp)
   423a8:	e17ff58b 	ldhu	r5,-42(fp)
   423ac:	280d883a 	mov	r6,r5
   423b0:	200b883a 	mov	r5,r4
   423b4:	1009883a 	mov	r4,r2
   423b8:	183ee83a 	callr	r3
   423bc:	10803fcc 	andi	r2,r2,255
   423c0:	1000171e 	bne	r2,zero,42420 <_ZN3USB11ConfiguringEhhb+0x424>
   423c4:	e0bff003 	ldbu	r2,-64(fp)
   423c8:	e0fffc17 	ldw	r3,-16(fp)
   423cc:	10800784 	addi	r2,r2,30
   423d0:	1085883a 	add	r2,r2,r2
   423d4:	1085883a 	add	r2,r2,r2
   423d8:	1885883a 	add	r2,r3,r2
   423dc:	10800017 	ldw	r2,0(r2)
   423e0:	10800017 	ldw	r2,0(r2)
   423e4:	10800704 	addi	r2,r2,28
   423e8:	10c00017 	ldw	r3,0(r2)
   423ec:	e0bff003 	ldbu	r2,-64(fp)
   423f0:	e13ffc17 	ldw	r4,-16(fp)
   423f4:	10800784 	addi	r2,r2,30
   423f8:	1085883a 	add	r2,r2,r2
   423fc:	1085883a 	add	r2,r2,r2
   42400:	2085883a 	add	r2,r4,r2
   42404:	10800017 	ldw	r2,0(r2)
   42408:	e13ff603 	ldbu	r4,-40(fp)
   4240c:	200b883a 	mov	r5,r4
   42410:	1009883a 	mov	r4,r2
   42414:	183ee83a 	callr	r3
   42418:	10803fcc 	andi	r2,r2,255
   4241c:	10000226 	beq	r2,zero,42428 <_ZN3USB11ConfiguringEhhb+0x42c>
   42420:	00800044 	movi	r2,1
   42424:	00000106 	br	4242c <_ZN3USB11ConfiguringEhhb+0x430>
   42428:	0005883a 	mov	r2,zero
   4242c:	10803fcc 	andi	r2,r2,255
   42430:	10001226 	beq	r2,zero,4247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
   42434:	e0fff003 	ldbu	r3,-64(fp)
   42438:	e13ffd03 	ldbu	r4,-12(fp)
   4243c:	e17ffe03 	ldbu	r5,-8(fp)
   42440:	e0bfff03 	ldbu	r2,-4(fp)
   42444:	d8800015 	stw	r2,0(sp)
   42448:	280f883a 	mov	r7,r5
   4244c:	200d883a 	mov	r6,r4
   42450:	180b883a 	mov	r5,r3
   42454:	e13ffc17 	ldw	r4,-16(fp)
   42458:	0041d6c0 	call	41d6c <_ZN3USB13AttemptConfigEhhhb>
   4245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
   42460:	e0bff043 	ldbu	r2,-63(fp)
   42464:	10803460 	cmpeqi	r2,r2,209
   42468:	10000826 	beq	r2,zero,4248c <_ZN3USB11ConfiguringEhhb+0x490>
   4246c:	00000306 	br	4247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;// no driver
   42470:	0001883a 	nop
   42474:	00000106 	br	4247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
   42478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
   4247c:	e0bff003 	ldbu	r2,-64(fp)
   42480:	10800044 	addi	r2,r2,1
   42484:	e0bff005 	stb	r2,-64(fp)
   42488:	003f7c06 	br	4227c <__alt_data_end+0xfffc227c>
                if(!devConfig[devConfigIndex]) continue;// no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
   4248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
   42490:	e0bff003 	ldbu	r2,-64(fp)
   42494:	10800428 	cmpgeui	r2,r2,16
   42498:	1000021e 	bne	r2,zero,424a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
   4249c:	e0bff043 	ldbu	r2,-63(fp)
   424a0:	00009506 	br	426f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
   424a4:	e03ff005 	stb	zero,-64(fp)
   424a8:	e0bff003 	ldbu	r2,-64(fp)
   424ac:	10800428 	cmpgeui	r2,r2,16
   424b0:	1000871e 	bne	r2,zero,426d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
   424b4:	e0bff003 	ldbu	r2,-64(fp)
   424b8:	e0fffc17 	ldw	r3,-16(fp)
   424bc:	10800784 	addi	r2,r2,30
   424c0:	1085883a 	add	r2,r2,r2
   424c4:	1085883a 	add	r2,r2,r2
   424c8:	1885883a 	add	r2,r3,r2
   424cc:	10800017 	ldw	r2,0(r2)
   424d0:	10007626 	beq	r2,zero,426ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
   424d4:	e0bff003 	ldbu	r2,-64(fp)
   424d8:	e0fffc17 	ldw	r3,-16(fp)
   424dc:	10800784 	addi	r2,r2,30
   424e0:	1085883a 	add	r2,r2,r2
   424e4:	1085883a 	add	r2,r2,r2
   424e8:	1885883a 	add	r2,r3,r2
   424ec:	10800017 	ldw	r2,0(r2)
   424f0:	10800017 	ldw	r2,0(r2)
   424f4:	10800404 	addi	r2,r2,16
   424f8:	10c00017 	ldw	r3,0(r2)
   424fc:	e0bff003 	ldbu	r2,-64(fp)
   42500:	e13ffc17 	ldw	r4,-16(fp)
   42504:	10800784 	addi	r2,r2,30
   42508:	1085883a 	add	r2,r2,r2
   4250c:	1085883a 	add	r2,r2,r2
   42510:	2085883a 	add	r2,r4,r2
   42514:	10800017 	ldw	r2,0(r2)
   42518:	1009883a 	mov	r4,r2
   4251c:	183ee83a 	callr	r3
   42520:	10803fcc 	andi	r2,r2,255
   42524:	1004c03a 	cmpne	r2,r2,zero
   42528:	10803fcc 	andi	r2,r2,255
   4252c:	1000611e 	bne	r2,zero,426b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
   42530:	e0bff003 	ldbu	r2,-64(fp)
   42534:	e0fffc17 	ldw	r3,-16(fp)
   42538:	10800784 	addi	r2,r2,30
   4253c:	1085883a 	add	r2,r2,r2
   42540:	1085883a 	add	r2,r2,r2
   42544:	1885883a 	add	r2,r3,r2
   42548:	10800017 	ldw	r2,0(r2)
   4254c:	10800017 	ldw	r2,0(r2)
   42550:	10800804 	addi	r2,r2,32
   42554:	10c00017 	ldw	r3,0(r2)
   42558:	e0bff003 	ldbu	r2,-64(fp)
   4255c:	e13ffc17 	ldw	r4,-16(fp)
   42560:	10800784 	addi	r2,r2,30
   42564:	1085883a 	add	r2,r2,r2
   42568:	1085883a 	add	r2,r2,r2
   4256c:	2085883a 	add	r2,r4,r2
   42570:	10800017 	ldw	r2,0(r2)
   42574:	e13ff643 	ldbu	r4,-39(fp)
   42578:	200b883a 	mov	r5,r4
   4257c:	1009883a 	mov	r4,r2
   42580:	183ee83a 	callr	r3
   42584:	10803fcc 	andi	r2,r2,255
   42588:	10003226 	beq	r2,zero,42654 <_ZN3USB11ConfiguringEhhb+0x658>
   4258c:	e0bff003 	ldbu	r2,-64(fp)
   42590:	e0fffc17 	ldw	r3,-16(fp)
   42594:	10800784 	addi	r2,r2,30
   42598:	1085883a 	add	r2,r2,r2
   4259c:	1085883a 	add	r2,r2,r2
   425a0:	1885883a 	add	r2,r3,r2
   425a4:	10800017 	ldw	r2,0(r2)
   425a8:	10800017 	ldw	r2,0(r2)
   425ac:	10800604 	addi	r2,r2,24
   425b0:	10c00017 	ldw	r3,0(r2)
   425b4:	e0bff003 	ldbu	r2,-64(fp)
   425b8:	e13ffc17 	ldw	r4,-16(fp)
   425bc:	10800784 	addi	r2,r2,30
   425c0:	1085883a 	add	r2,r2,r2
   425c4:	1085883a 	add	r2,r2,r2
   425c8:	2085883a 	add	r2,r4,r2
   425cc:	10800017 	ldw	r2,0(r2)
   425d0:	e13ff50b 	ldhu	r4,-44(fp)
   425d4:	e17ff58b 	ldhu	r5,-42(fp)
   425d8:	280d883a 	mov	r6,r5
   425dc:	200b883a 	mov	r5,r4
   425e0:	1009883a 	mov	r4,r2
   425e4:	183ee83a 	callr	r3
   425e8:	10803fcc 	andi	r2,r2,255
   425ec:	1000171e 	bne	r2,zero,4264c <_ZN3USB11ConfiguringEhhb+0x650>
   425f0:	e0bff003 	ldbu	r2,-64(fp)
   425f4:	e0fffc17 	ldw	r3,-16(fp)
   425f8:	10800784 	addi	r2,r2,30
   425fc:	1085883a 	add	r2,r2,r2
   42600:	1085883a 	add	r2,r2,r2
   42604:	1885883a 	add	r2,r3,r2
   42608:	10800017 	ldw	r2,0(r2)
   4260c:	10800017 	ldw	r2,0(r2)
   42610:	10800704 	addi	r2,r2,28
   42614:	10c00017 	ldw	r3,0(r2)
   42618:	e0bff003 	ldbu	r2,-64(fp)
   4261c:	e13ffc17 	ldw	r4,-16(fp)
   42620:	10800784 	addi	r2,r2,30
   42624:	1085883a 	add	r2,r2,r2
   42628:	1085883a 	add	r2,r2,r2
   4262c:	2085883a 	add	r2,r4,r2
   42630:	10800017 	ldw	r2,0(r2)
   42634:	e13ff603 	ldbu	r4,-40(fp)
   42638:	200b883a 	mov	r5,r4
   4263c:	1009883a 	mov	r4,r2
   42640:	183ee83a 	callr	r3
   42644:	10803fcc 	andi	r2,r2,255
   42648:	10000226 	beq	r2,zero,42654 <_ZN3USB11ConfiguringEhhb+0x658>
   4264c:	00800044 	movi	r2,1
   42650:	00000106 	br	42658 <_ZN3USB11ConfiguringEhhb+0x65c>
   42654:	0005883a 	mov	r2,zero
   42658:	10803fcc 	andi	r2,r2,255
   4265c:	1000171e 	bne	r2,zero,426bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
   42660:	e0fff003 	ldbu	r3,-64(fp)
   42664:	e13ffd03 	ldbu	r4,-12(fp)
   42668:	e17ffe03 	ldbu	r5,-8(fp)
   4266c:	e0bfff03 	ldbu	r2,-4(fp)
   42670:	d8800015 	stw	r2,0(sp)
   42674:	280f883a 	mov	r7,r5
   42678:	200d883a 	mov	r6,r4
   4267c:	180b883a 	mov	r5,r3
   42680:	e13ffc17 	ldw	r4,-16(fp)
   42684:	0041d6c0 	call	41d6c <_ZN3USB13AttemptConfigEhhhb>
   42688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
   4268c:	e0bff043 	ldbu	r2,-63(fp)
   42690:	10803460 	cmpeqi	r2,r2,209
   42694:	10000a1e 	bne	r2,zero,426c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
   42698:	e0bff043 	ldbu	r2,-63(fp)
   4269c:	10803660 	cmpeqi	r2,r2,217
   426a0:	1000071e 	bne	r2,zero,426c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
   426a4:	e0bff043 	ldbu	r2,-63(fp)
   426a8:	00001306 	br	426f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
   426ac:	0001883a 	nop
   426b0:	00000306 	br	426c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
   426b4:	0001883a 	nop
   426b8:	00000106 	br	426c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
   426bc:	0001883a 	nop
        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
   426c0:	e0bff003 	ldbu	r2,-64(fp)
   426c4:	10800044 	addi	r2,r2,1
   426c8:	e0bff005 	stb	r2,-64(fp)
   426cc:	003f7606 	br	424a8 <__alt_data_end+0xfffc24a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
   426d0:	e0bffd03 	ldbu	r2,-12(fp)
   426d4:	e0fffe03 	ldbu	r3,-8(fp)
   426d8:	e13fff03 	ldbu	r4,-4(fp)
   426dc:	200f883a 	mov	r7,r4
   426e0:	180d883a 	mov	r6,r3
   426e4:	100b883a 	mov	r5,r2
   426e8:	e13ffc17 	ldw	r4,-16(fp)
   426ec:	0041c0c0 	call	41c0c <_ZN3USB17DefaultAddressingEhhb>
   426f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
   426f4:	e0bff043 	ldbu	r2,-63(fp)
}
   426f8:	e037883a 	mov	sp,fp
   426fc:	dfc00117 	ldw	ra,4(sp)
   42700:	df000017 	ldw	fp,0(sp)
   42704:	dec00204 	addi	sp,sp,8
   42708:	f800283a 	ret

0004270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
   4270c:	defffb04 	addi	sp,sp,-20
   42710:	dfc00415 	stw	ra,16(sp)
   42714:	df000315 	stw	fp,12(sp)
   42718:	df000304 	addi	fp,sp,12
   4271c:	e13ffe15 	stw	r4,-8(fp)
   42720:	2805883a 	mov	r2,r5
   42724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
   42728:	e0bfff03 	ldbu	r2,-4(fp)
   4272c:	1000021e 	bne	r2,zero,42738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
   42730:	0005883a 	mov	r2,zero
   42734:	00003e06 	br	42830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
   42738:	e03ffd05 	stb	zero,-12(fp)
   4273c:	e0bffd03 	ldbu	r2,-12(fp)
   42740:	10800428 	cmpgeui	r2,r2,16
   42744:	1000391e 	bne	r2,zero,4282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
   42748:	e0bffd03 	ldbu	r2,-12(fp)
   4274c:	e0fffe17 	ldw	r3,-8(fp)
   42750:	10800784 	addi	r2,r2,30
   42754:	1085883a 	add	r2,r2,r2
   42758:	1085883a 	add	r2,r2,r2
   4275c:	1885883a 	add	r2,r3,r2
   42760:	10800017 	ldw	r2,0(r2)
   42764:	10002c26 	beq	r2,zero,42818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
   42768:	e0bffd03 	ldbu	r2,-12(fp)
   4276c:	e0fffe17 	ldw	r3,-8(fp)
   42770:	10800784 	addi	r2,r2,30
   42774:	1085883a 	add	r2,r2,r2
   42778:	1085883a 	add	r2,r2,r2
   4277c:	1885883a 	add	r2,r3,r2
   42780:	10800017 	ldw	r2,0(r2)
   42784:	10800017 	ldw	r2,0(r2)
   42788:	10800404 	addi	r2,r2,16
   4278c:	10c00017 	ldw	r3,0(r2)
   42790:	e0bffd03 	ldbu	r2,-12(fp)
   42794:	e13ffe17 	ldw	r4,-8(fp)
   42798:	10800784 	addi	r2,r2,30
   4279c:	1085883a 	add	r2,r2,r2
   427a0:	1085883a 	add	r2,r2,r2
   427a4:	2085883a 	add	r2,r4,r2
   427a8:	10800017 	ldw	r2,0(r2)
   427ac:	1009883a 	mov	r4,r2
   427b0:	183ee83a 	callr	r3
   427b4:	10c03fcc 	andi	r3,r2,255
   427b8:	e0bfff03 	ldbu	r2,-4(fp)
   427bc:	1885003a 	cmpeq	r2,r3,r2
   427c0:	10803fcc 	andi	r2,r2,255
   427c4:	10001526 	beq	r2,zero,4281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
   427c8:	e0bffd03 	ldbu	r2,-12(fp)
   427cc:	e0fffe17 	ldw	r3,-8(fp)
   427d0:	10800784 	addi	r2,r2,30
   427d4:	1085883a 	add	r2,r2,r2
   427d8:	1085883a 	add	r2,r2,r2
   427dc:	1885883a 	add	r2,r3,r2
   427e0:	10800017 	ldw	r2,0(r2)
   427e4:	10800017 	ldw	r2,0(r2)
   427e8:	10800204 	addi	r2,r2,8
   427ec:	10c00017 	ldw	r3,0(r2)
   427f0:	e0bffd03 	ldbu	r2,-12(fp)
   427f4:	e13ffe17 	ldw	r4,-8(fp)
   427f8:	10800784 	addi	r2,r2,30
   427fc:	1085883a 	add	r2,r2,r2
   42800:	1085883a 	add	r2,r2,r2
   42804:	2085883a 	add	r2,r4,r2
   42808:	10800017 	ldw	r2,0(r2)
   4280c:	1009883a 	mov	r4,r2
   42810:	183ee83a 	callr	r3
   42814:	00000606 	br	42830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
   42818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
   4281c:	e0bffd03 	ldbu	r2,-12(fp)
   42820:	10800044 	addi	r2,r2,1
   42824:	e0bffd05 	stb	r2,-12(fp)
   42828:	003fc406 	br	4273c <__alt_data_end+0xfffc273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
   4282c:	0005883a 	mov	r2,zero
        printf("END\n");
}
   42830:	e037883a 	mov	sp,fp
   42834:	dfc00117 	ldw	ra,4(sp)
   42838:	df000017 	ldw	fp,0(sp)
   4283c:	dec00204 	addi	sp,sp,8
   42840:	f800283a 	ret

00042844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
   42844:	defff204 	addi	sp,sp,-56
   42848:	dfc00d15 	stw	ra,52(sp)
   4284c:	df000c15 	stw	fp,48(sp)
   42850:	df000c04 	addi	fp,sp,48
   42854:	e13ffc15 	stw	r4,-16(fp)
   42858:	2809883a 	mov	r4,r5
   4285c:	3007883a 	mov	r3,r6
   42860:	3805883a 	mov	r2,r7
   42864:	e13ffd05 	stb	r4,-12(fp)
   42868:	e0fffe05 	stb	r3,-8(fp)
   4286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
   42870:	e17ffd03 	ldbu	r5,-12(fp)
   42874:	e1bffe03 	ldbu	r6,-8(fp)
   42878:	e0bfff0b 	ldhu	r2,-4(fp)
   4287c:	e0ffff0b 	ldhu	r3,-4(fp)
   42880:	d8000715 	stw	zero,28(sp)
   42884:	e1000217 	ldw	r4,8(fp)
   42888:	d9000615 	stw	r4,24(sp)
   4288c:	d8c00515 	stw	r3,20(sp)
   42890:	d8800415 	stw	r2,16(sp)
   42894:	d8000315 	stw	zero,12(sp)
   42898:	00800044 	movi	r2,1
   4289c:	d8800215 	stw	r2,8(sp)
   428a0:	d8000115 	stw	zero,4(sp)
   428a4:	00800184 	movi	r2,6
   428a8:	d8800015 	stw	r2,0(sp)
   428ac:	01c02004 	movi	r7,128
   428b0:	e13ffc17 	ldw	r4,-16(fp)
   428b4:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   428b8:	e037883a 	mov	sp,fp
   428bc:	dfc00117 	ldw	ra,4(sp)
   428c0:	df000017 	ldw	fp,0(sp)
   428c4:	dec00204 	addi	sp,sp,8
   428c8:	f800283a 	ret

000428cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
   428cc:	defff104 	addi	sp,sp,-60
   428d0:	dfc00e15 	stw	ra,56(sp)
   428d4:	df000d15 	stw	fp,52(sp)
   428d8:	df000d04 	addi	fp,sp,52
   428dc:	e13ffb15 	stw	r4,-20(fp)
   428e0:	3009883a 	mov	r4,r6
   428e4:	3807883a 	mov	r3,r7
   428e8:	e0800217 	ldw	r2,8(fp)
   428ec:	e17ffc05 	stb	r5,-16(fp)
   428f0:	e13ffd05 	stb	r4,-12(fp)
   428f4:	e0fffe0d 	sth	r3,-8(fp)
   428f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
   428fc:	e23ffc03 	ldbu	r8,-16(fp)
   42900:	e1bffd03 	ldbu	r6,-12(fp)
   42904:	e0bfff03 	ldbu	r2,-4(fp)
   42908:	e0fffe0b 	ldhu	r3,-8(fp)
   4290c:	e13ffe0b 	ldhu	r4,-8(fp)
   42910:	d8000715 	stw	zero,28(sp)
   42914:	e1400317 	ldw	r5,12(fp)
   42918:	d9400615 	stw	r5,24(sp)
   4291c:	d9000515 	stw	r4,20(sp)
   42920:	d8c00415 	stw	r3,16(sp)
   42924:	d8000315 	stw	zero,12(sp)
   42928:	00c00084 	movi	r3,2
   4292c:	d8c00215 	stw	r3,8(sp)
   42930:	d8800115 	stw	r2,4(sp)
   42934:	00800184 	movi	r2,6
   42938:	d8800015 	stw	r2,0(sp)
   4293c:	01c02004 	movi	r7,128
   42940:	400b883a 	mov	r5,r8
   42944:	e13ffb17 	ldw	r4,-20(fp)
   42948:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   4294c:	e037883a 	mov	sp,fp
   42950:	dfc00117 	ldw	ra,4(sp)
   42954:	df000017 	ldw	fp,0(sp)
   42958:	dec00204 	addi	sp,sp,8
   4295c:	f800283a 	ret

00042960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
   42960:	deffdf04 	addi	sp,sp,-132
   42964:	dfc02015 	stw	ra,128(sp)
   42968:	df001f15 	stw	fp,124(sp)
   4296c:	df001f04 	addi	fp,sp,124
   42970:	e13ffc15 	stw	r4,-16(fp)
   42974:	2809883a 	mov	r4,r5
   42978:	3007883a 	mov	r3,r6
   4297c:	3805883a 	mov	r2,r7
   42980:	e13ffd05 	stb	r4,-12(fp)
   42984:	e0fffe05 	stb	r3,-8(fp)
   42988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
   4298c:	00801004 	movi	r2,64
   42990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
   42994:	e0bfec04 	addi	r2,fp,-80
   42998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
   4299c:	e13ffd03 	ldbu	r4,-12(fp)
   429a0:	e17ffe03 	ldbu	r5,-8(fp)
   429a4:	e0bfff03 	ldbu	r2,-4(fp)
   429a8:	e0ffec04 	addi	r3,fp,-80
   429ac:	d8c00115 	stw	r3,4(sp)
   429b0:	d8800015 	stw	r2,0(sp)
   429b4:	01c00244 	movi	r7,9
   429b8:	280d883a 	mov	r6,r5
   429bc:	200b883a 	mov	r5,r4
   429c0:	e13ffc17 	ldw	r4,-16(fp)
   429c4:	00428cc0 	call	428cc <_ZN3USB12getConfDescrEhhthPh>
   429c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
   429cc:	e0bfeb03 	ldbu	r2,-84(fp)
   429d0:	10000226 	beq	r2,zero,429dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
   429d4:	e0bfeb03 	ldbu	r2,-84(fp)
   429d8:	00001a06 	br	42a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
   429dc:	e0bfea17 	ldw	r2,-88(fp)
   429e0:	10c00083 	ldbu	r3,2(r2)
   429e4:	108000c3 	ldbu	r2,3(r2)
   429e8:	1004923a 	slli	r2,r2,8
   429ec:	10c4b03a 	or	r2,r2,r3
   429f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
   429f4:	e17ffd03 	ldbu	r5,-12(fp)
   429f8:	e1bffe03 	ldbu	r6,-8(fp)
   429fc:	e0bfff03 	ldbu	r2,-4(fp)
   42a00:	e0ffeb8b 	ldhu	r3,-82(fp)
   42a04:	e1000217 	ldw	r4,8(fp)
   42a08:	d9000715 	stw	r4,28(sp)
   42a0c:	e13fec04 	addi	r4,fp,-80
   42a10:	d9000615 	stw	r4,24(sp)
   42a14:	01001004 	movi	r4,64
   42a18:	d9000515 	stw	r4,20(sp)
   42a1c:	d8c00415 	stw	r3,16(sp)
   42a20:	d8000315 	stw	zero,12(sp)
   42a24:	00c00084 	movi	r3,2
   42a28:	d8c00215 	stw	r3,8(sp)
   42a2c:	d8800115 	stw	r2,4(sp)
   42a30:	00800184 	movi	r2,6
   42a34:	d8800015 	stw	r2,0(sp)
   42a38:	01c02004 	movi	r7,128
   42a3c:	e13ffc17 	ldw	r4,-16(fp)
   42a40:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   42a44:	e037883a 	mov	sp,fp
   42a48:	dfc00117 	ldw	ra,4(sp)
   42a4c:	df000017 	ldw	fp,0(sp)
   42a50:	dec00204 	addi	sp,sp,8
   42a54:	f800283a 	ret

00042a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
   42a58:	defff004 	addi	sp,sp,-64
   42a5c:	dfc00f15 	stw	ra,60(sp)
   42a60:	df000e15 	stw	fp,56(sp)
   42a64:	df000e04 	addi	fp,sp,56
   42a68:	e13ffa15 	stw	r4,-24(fp)
   42a6c:	2811883a 	mov	r8,r5
   42a70:	300b883a 	mov	r5,r6
   42a74:	3809883a 	mov	r4,r7
   42a78:	e0c00217 	ldw	r3,8(fp)
   42a7c:	e0800317 	ldw	r2,12(fp)
   42a80:	e23ffb05 	stb	r8,-20(fp)
   42a84:	e17ffc05 	stb	r5,-16(fp)
   42a88:	e13ffd0d 	sth	r4,-12(fp)
   42a8c:	e0fffe05 	stb	r3,-8(fp)
   42a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
   42a94:	e23ffb03 	ldbu	r8,-20(fp)
   42a98:	e27ffc03 	ldbu	r9,-16(fp)
   42a9c:	e0bffe03 	ldbu	r2,-8(fp)
   42aa0:	e0ffff0b 	ldhu	r3,-4(fp)
   42aa4:	e13ffd0b 	ldhu	r4,-12(fp)
   42aa8:	e17ffd0b 	ldhu	r5,-12(fp)
   42aac:	d8000715 	stw	zero,28(sp)
   42ab0:	e1800417 	ldw	r6,16(fp)
   42ab4:	d9800615 	stw	r6,24(sp)
   42ab8:	d9400515 	stw	r5,20(sp)
   42abc:	d9000415 	stw	r4,16(sp)
   42ac0:	d8c00315 	stw	r3,12(sp)
   42ac4:	00c000c4 	movi	r3,3
   42ac8:	d8c00215 	stw	r3,8(sp)
   42acc:	d8800115 	stw	r2,4(sp)
   42ad0:	00800184 	movi	r2,6
   42ad4:	d8800015 	stw	r2,0(sp)
   42ad8:	01c02004 	movi	r7,128
   42adc:	480d883a 	mov	r6,r9
   42ae0:	400b883a 	mov	r5,r8
   42ae4:	e13ffa17 	ldw	r4,-24(fp)
   42ae8:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   42aec:	e037883a 	mov	sp,fp
   42af0:	dfc00117 	ldw	ra,4(sp)
   42af4:	df000017 	ldw	fp,0(sp)
   42af8:	dec00204 	addi	sp,sp,8
   42afc:	f800283a 	ret

00042b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
   42b00:	defff104 	addi	sp,sp,-60
   42b04:	dfc00e15 	stw	ra,56(sp)
   42b08:	df000d15 	stw	fp,52(sp)
   42b0c:	df000d04 	addi	fp,sp,52
   42b10:	e13ffc15 	stw	r4,-16(fp)
   42b14:	2809883a 	mov	r4,r5
   42b18:	3007883a 	mov	r3,r6
   42b1c:	3805883a 	mov	r2,r7
   42b20:	e13ffd05 	stb	r4,-12(fp)
   42b24:	e0fffe05 	stb	r3,-8(fp)
   42b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
   42b2c:	e0fffd03 	ldbu	r3,-12(fp)
   42b30:	e13ffe03 	ldbu	r4,-8(fp)
   42b34:	e0bfff03 	ldbu	r2,-4(fp)
   42b38:	d8000715 	stw	zero,28(sp)
   42b3c:	d8000615 	stw	zero,24(sp)
   42b40:	d8000515 	stw	zero,20(sp)
   42b44:	d8000415 	stw	zero,16(sp)
   42b48:	d8000315 	stw	zero,12(sp)
   42b4c:	d8000215 	stw	zero,8(sp)
   42b50:	d8800115 	stw	r2,4(sp)
   42b54:	00800144 	movi	r2,5
   42b58:	d8800015 	stw	r2,0(sp)
   42b5c:	000f883a 	mov	r7,zero
   42b60:	200d883a 	mov	r6,r4
   42b64:	180b883a 	mov	r5,r3
   42b68:	e13ffc17 	ldw	r4,-16(fp)
   42b6c:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
   42b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
   42b74:	01004b04 	movi	r4,300
   42b78:	00406840 	call	40684 <_Z5delaym>
        return rcode;
   42b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
   42b80:	e037883a 	mov	sp,fp
   42b84:	dfc00117 	ldw	ra,4(sp)
   42b88:	df000017 	ldw	fp,0(sp)
   42b8c:	dec00204 	addi	sp,sp,8
   42b90:	f800283a 	ret

00042b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
   42b94:	defff204 	addi	sp,sp,-56
   42b98:	dfc00d15 	stw	ra,52(sp)
   42b9c:	df000c15 	stw	fp,48(sp)
   42ba0:	df000c04 	addi	fp,sp,48
   42ba4:	e13ffc15 	stw	r4,-16(fp)
   42ba8:	2809883a 	mov	r4,r5
   42bac:	3007883a 	mov	r3,r6
   42bb0:	3805883a 	mov	r2,r7
   42bb4:	e13ffd05 	stb	r4,-12(fp)
   42bb8:	e0fffe05 	stb	r3,-8(fp)
   42bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
   42bc0:	e0fffd03 	ldbu	r3,-12(fp)
   42bc4:	e13ffe03 	ldbu	r4,-8(fp)
   42bc8:	e0bfff03 	ldbu	r2,-4(fp)
   42bcc:	d8000715 	stw	zero,28(sp)
   42bd0:	d8000615 	stw	zero,24(sp)
   42bd4:	d8000515 	stw	zero,20(sp)
   42bd8:	d8000415 	stw	zero,16(sp)
   42bdc:	d8000315 	stw	zero,12(sp)
   42be0:	d8000215 	stw	zero,8(sp)
   42be4:	d8800115 	stw	r2,4(sp)
   42be8:	00800244 	movi	r2,9
   42bec:	d8800015 	stw	r2,0(sp)
   42bf0:	000f883a 	mov	r7,zero
   42bf4:	200d883a 	mov	r6,r4
   42bf8:	180b883a 	mov	r5,r3
   42bfc:	e13ffc17 	ldw	r4,-16(fp)
   42c00:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   42c04:	e037883a 	mov	sp,fp
   42c08:	dfc00117 	ldw	ra,4(sp)
   42c0c:	df000017 	ldw	fp,0(sp)
   42c10:	dec00204 	addi	sp,sp,8
   42c14:	f800283a 	ret

00042c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
   42c18:	defffe04 	addi	sp,sp,-8
   42c1c:	df000115 	stw	fp,4(sp)
   42c20:	df000104 	addi	fp,sp,4
   42c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
   42c28:	e0bfff17 	ldw	r2,-4(fp)
        };
   42c2c:	e037883a 	mov	sp,fp
   42c30:	df000017 	ldw	fp,0(sp)
   42c34:	dec00104 	addi	sp,sp,4
   42c38:	f800283a 	ret

00042c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
   42c3c:	defffe04 	addi	sp,sp,-8
   42c40:	df000115 	stw	fp,4(sp)
   42c44:	df000104 	addi	fp,sp,4
   42c48:	e13fff15 	stw	r4,-4(fp)
   42c4c:	008001b4 	movhi	r2,6
   42c50:	10937204 	addi	r2,r2,19912
   42c54:	e0ffff17 	ldw	r3,-4(fp)
   42c58:	18800015 	stw	r2,0(r3)
   42c5c:	0001883a 	nop
   42c60:	e037883a 	mov	sp,fp
   42c64:	df000017 	ldw	fp,0(sp)
   42c68:	dec00104 	addi	sp,sp,4
   42c6c:	f800283a 	ret

00042c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
   42c70:	defffd04 	addi	sp,sp,-12
   42c74:	dfc00215 	stw	ra,8(sp)
   42c78:	df000115 	stw	fp,4(sp)
   42c7c:	df000104 	addi	fp,sp,4
   42c80:	e13fff15 	stw	r4,-4(fp)
   42c84:	e0bfff17 	ldw	r2,-4(fp)
   42c88:	1009883a 	mov	r4,r2
   42c8c:	0042c3c0 	call	42c3c <_ZN11AddressPoolC1Ev>
   42c90:	008001b4 	movhi	r2,6
   42c94:	10936d04 	addi	r2,r2,19892
   42c98:	e0ffff17 	ldw	r3,-4(fp)
   42c9c:	18800015 	stw	r2,0(r3)
   42ca0:	e0bfff17 	ldw	r2,-4(fp)
   42ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
   42ca8:	000b883a 	mov	r5,zero
   42cac:	e13fff17 	ldw	r4,-4(fp)
   42cb0:	00430c00 	call	430c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
   42cb4:	e0bfff17 	ldw	r2,-4(fp)
   42cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
   42cbc:	e0bfff17 	ldw	r2,-4(fp)
   42cc0:	10c00104 	addi	r3,r2,4
   42cc4:	e0bfff17 	ldw	r2,-4(fp)
   42cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
   42ccc:	e0bfff17 	ldw	r2,-4(fp)
   42cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
   42cd4:	e0bfff17 	ldw	r2,-4(fp)
   42cd8:	00c00204 	movi	r3,8
   42cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
   42ce0:	e0bfff17 	ldw	r2,-4(fp)
   42ce4:	11000183 	ldbu	r4,6(r2)
   42ce8:	00ffff84 	movi	r3,-2
   42cec:	20c6703a 	and	r3,r4,r3
   42cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
   42cf4:	e0bfff17 	ldw	r2,-4(fp)
   42cf8:	11000183 	ldbu	r4,6(r2)
   42cfc:	00ffff44 	movi	r3,-3
   42d00:	20c6703a 	and	r3,r4,r3
   42d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
   42d08:	e0bfff17 	ldw	r2,-4(fp)
   42d0c:	10c00183 	ldbu	r3,6(r2)
   42d10:	18c000cc 	andi	r3,r3,3
   42d14:	18c00f14 	ori	r3,r3,60
   42d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
   42d1c:	e13fff17 	ldw	r4,-4(fp)
   42d20:	00432040 	call	43204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
   42d24:	0001883a 	nop
   42d28:	e037883a 	mov	sp,fp
   42d2c:	dfc00117 	ldw	ra,4(sp)
   42d30:	df000017 	ldw	fp,0(sp)
   42d34:	dec00204 	addi	sp,sp,8
   42d38:	f800283a 	ret

00042d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
   42d3c:	defffa04 	addi	sp,sp,-24
   42d40:	dfc00515 	stw	ra,20(sp)
   42d44:	df000415 	stw	fp,16(sp)
   42d48:	dc000315 	stw	r16,12(sp)
   42d4c:	df000404 	addi	fp,sp,16
   42d50:	e13ffd15 	stw	r4,-12(fp)
   42d54:	2805883a 	mov	r2,r5
   42d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
   42d5c:	e0bffe03 	ldbu	r2,-8(fp)
   42d60:	1000031e 	bne	r2,zero,42d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
   42d64:	e0bffd17 	ldw	r2,-12(fp)
   42d68:	10800204 	addi	r2,r2,8
   42d6c:	00001006 	br	42db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
   42d70:	e0bffe03 	ldbu	r2,-8(fp)
   42d74:	100b883a 	mov	r5,r2
   42d78:	e13ffd17 	ldw	r4,-12(fp)
   42d7c:	004326c0 	call	4326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
   42d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
   42d84:	e0bffc03 	ldbu	r2,-16(fp)
   42d88:	10000826 	beq	r2,zero,42dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
   42d8c:	e0bffd17 	ldw	r2,-12(fp)
   42d90:	14000204 	addi	r16,r2,8
   42d94:	e0bffc03 	ldbu	r2,-16(fp)
   42d98:	014001c4 	movi	r5,7
   42d9c:	1009883a 	mov	r4,r2
   42da0:	004dab40 	call	4dab4 <__mulsi3>
   42da4:	8085883a 	add	r2,r16,r2
   42da8:	00000106 	br	42db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
   42dac:	0005883a 	mov	r2,zero
        };
   42db0:	e6ffff04 	addi	sp,fp,-4
   42db4:	dfc00217 	ldw	ra,8(sp)
   42db8:	df000117 	ldw	fp,4(sp)
   42dbc:	dc000017 	ldw	r16,0(sp)
   42dc0:	dec00304 	addi	sp,sp,12
   42dc4:	f800283a 	ret

00042dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
   42dc8:	defffd04 	addi	sp,sp,-12
   42dcc:	df000215 	stw	fp,8(sp)
   42dd0:	df000204 	addi	fp,sp,8
   42dd4:	2005883a 	mov	r2,r4
   42dd8:	e17fff15 	stw	r5,-4(fp)
   42ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
   42de0:	0001883a 	nop
   42de4:	e037883a 	mov	sp,fp
   42de8:	df000017 	ldw	fp,0(sp)
   42dec:	dec00104 	addi	sp,sp,4
   42df0:	f800283a 	ret

00042df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
   42df4:	defff804 	addi	sp,sp,-32
   42df8:	dfc00715 	stw	ra,28(sp)
   42dfc:	df000615 	stw	fp,24(sp)
   42e00:	dc000515 	stw	r16,20(sp)
   42e04:	df000604 	addi	fp,sp,24
   42e08:	e13ffb15 	stw	r4,-20(fp)
   42e0c:	2809883a 	mov	r4,r5
   42e10:	3007883a 	mov	r3,r6
   42e14:	3805883a 	mov	r2,r7
   42e18:	e13ffc05 	stb	r4,-16(fp)
   42e1c:	e0fffd05 	stb	r3,-12(fp)
   42e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
   42e24:	e0bffc03 	ldbu	r2,-16(fp)
   42e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
   42e2c:	e0fffa43 	ldbu	r3,-23(fp)
   42e30:	00bfe004 	movi	r2,-128
   42e34:	1884703a 	and	r2,r3,r2
   42e38:	10803fcc 	andi	r2,r2,255
   42e3c:	1000031e 	bne	r2,zero,42e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
   42e40:	e0bffe03 	ldbu	r2,-8(fp)
   42e44:	10800230 	cmpltui	r2,r2,8
   42e48:	1000021e 	bne	r2,zero,42e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
   42e4c:	0005883a 	mov	r2,zero
   42e50:	00007a06 	br	4303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
   42e54:	e0bffd03 	ldbu	r2,-12(fp)
   42e58:	10000726 	beq	r2,zero,42e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
   42e5c:	e0bffb17 	ldw	r2,-20(fp)
   42e60:	108001c3 	ldbu	r2,7(r2)
   42e64:	10803fcc 	andi	r2,r2,255
   42e68:	108001d8 	cmpnei	r2,r2,7
   42e6c:	1000021e 	bne	r2,zero,42e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
   42e70:	0005883a 	mov	r2,zero
   42e74:	00007106 	br	4303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
   42e78:	000b883a 	mov	r5,zero
   42e7c:	e13ffb17 	ldw	r4,-20(fp)
   42e80:	004326c0 	call	4326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
   42e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
   42e88:	e0bffa03 	ldbu	r2,-24(fp)
   42e8c:	1000021e 	bne	r2,zero,42e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
   42e90:	0005883a 	mov	r2,zero
   42e94:	00006906 	br	4303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
   42e98:	e0bffa43 	ldbu	r2,-23(fp)
   42e9c:	10803fcc 	andi	r2,r2,255
   42ea0:	1000241e 	bne	r2,zero,42f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
   42ea4:	e0bffd03 	ldbu	r2,-12(fp)
   42ea8:	10001026 	beq	r2,zero,42eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
   42eac:	e0bffa03 	ldbu	r2,-24(fp)
   42eb0:	e43ffb17 	ldw	r16,-20(fp)
   42eb4:	014001c4 	movi	r5,7
   42eb8:	1009883a 	mov	r4,r2
   42ebc:	004dab40 	call	4dab4 <__mulsi3>
   42ec0:	8085883a 	add	r2,r16,r2
   42ec4:	10800304 	addi	r2,r2,12
   42ec8:	00c01044 	movi	r3,65
   42ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
   42ed0:	e0bffb17 	ldw	r2,-20(fp)
   42ed4:	108001c3 	ldbu	r2,7(r2)
   42ed8:	10800044 	addi	r2,r2,1
   42edc:	1007883a 	mov	r3,r2
   42ee0:	e0bffb17 	ldw	r2,-20(fp)
   42ee4:	10c001c5 	stb	r3,7(r2)
   42ee8:	00000906 	br	42f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
   42eec:	e0bffa03 	ldbu	r2,-24(fp)
   42ef0:	e43ffb17 	ldw	r16,-20(fp)
   42ef4:	014001c4 	movi	r5,7
   42ef8:	1009883a 	mov	r4,r2
   42efc:	004dab40 	call	4dab4 <__mulsi3>
   42f00:	8085883a 	add	r2,r16,r2
   42f04:	10800304 	addi	r2,r2,12
   42f08:	00c00044 	movi	r3,1
   42f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
   42f10:	e0bffa03 	ldbu	r2,-24(fp)
   42f14:	e43ffb17 	ldw	r16,-20(fp)
   42f18:	014001c4 	movi	r5,7
   42f1c:	1009883a 	mov	r4,r2
   42f20:	004dab40 	call	4dab4 <__mulsi3>
   42f24:	8085883a 	add	r2,r16,r2
   42f28:	10800304 	addi	r2,r2,12
   42f2c:	10800003 	ldbu	r2,0(r2)
   42f30:	00004206 	br	4303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
   42f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
   42f38:	e0bffa43 	ldbu	r2,-23(fp)
   42f3c:	108001cc 	andi	r2,r2,7
   42f40:	108001cc 	andi	r2,r2,7
   42f44:	100890fa 	slli	r4,r2,3
   42f48:	e0fffa83 	ldbu	r3,-22(fp)
   42f4c:	00bff1c4 	movi	r2,-57
   42f50:	1884703a 	and	r2,r3,r2
   42f54:	1007883a 	mov	r3,r2
   42f58:	2005883a 	mov	r2,r4
   42f5c:	1884b03a 	or	r2,r3,r2
   42f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
   42f64:	e0bffd03 	ldbu	r2,-12(fp)
   42f68:	10001526 	beq	r2,zero,42fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
   42f6c:	e0bffa83 	ldbu	r2,-22(fp)
   42f70:	10801014 	ori	r2,r2,64
   42f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
   42f78:	e0bffb17 	ldw	r2,-20(fp)
   42f7c:	108001c3 	ldbu	r2,7(r2)
   42f80:	10800044 	addi	r2,r2,1
   42f84:	1007883a 	mov	r3,r2
   42f88:	e0bffb17 	ldw	r2,-20(fp)
   42f8c:	10c001c5 	stb	r3,7(r2)
   42f90:	e0bffb17 	ldw	r2,-20(fp)
   42f94:	108001c3 	ldbu	r2,7(r2)
   42f98:	108001cc 	andi	r2,r2,7
   42f9c:	110001cc 	andi	r4,r2,7
   42fa0:	e0fffa83 	ldbu	r3,-22(fp)
   42fa4:	00bffe04 	movi	r2,-8
   42fa8:	1884703a 	and	r2,r3,r2
   42fac:	1007883a 	mov	r3,r2
   42fb0:	2005883a 	mov	r2,r4
   42fb4:	1884b03a 	or	r2,r3,r2
   42fb8:	e0bffa85 	stb	r2,-22(fp)
   42fbc:	00000e06 	br	42ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
   42fc0:	e0fffa83 	ldbu	r3,-22(fp)
   42fc4:	00bfefc4 	movi	r2,-65
   42fc8:	1884703a 	and	r2,r3,r2
   42fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
   42fd0:	e0bffe03 	ldbu	r2,-8(fp)
   42fd4:	108001cc 	andi	r2,r2,7
   42fd8:	110001cc 	andi	r4,r2,7
   42fdc:	e0fffa83 	ldbu	r3,-22(fp)
   42fe0:	00bffe04 	movi	r2,-8
   42fe4:	1884703a 	and	r2,r3,r2
   42fe8:	1007883a 	mov	r3,r2
   42fec:	2005883a 	mov	r2,r4
   42ff0:	1884b03a 	or	r2,r3,r2
   42ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
   42ff8:	e0bffa03 	ldbu	r2,-24(fp)
   42ffc:	e43ffb17 	ldw	r16,-20(fp)
   43000:	014001c4 	movi	r5,7
   43004:	1009883a 	mov	r4,r2
   43008:	004dab40 	call	4dab4 <__mulsi3>
   4300c:	8085883a 	add	r2,r16,r2
   43010:	10800304 	addi	r2,r2,12
   43014:	e0fffa83 	ldbu	r3,-22(fp)
   43018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
   4301c:	e0bffa03 	ldbu	r2,-24(fp)
   43020:	e43ffb17 	ldw	r16,-20(fp)
   43024:	014001c4 	movi	r5,7
   43028:	1009883a 	mov	r4,r2
   4302c:	004dab40 	call	4dab4 <__mulsi3>
   43030:	8085883a 	add	r2,r16,r2
   43034:	10800304 	addi	r2,r2,12
   43038:	10800003 	ldbu	r2,0(r2)
        };
   4303c:	e6ffff04 	addi	sp,fp,-4
   43040:	dfc00217 	ldw	ra,8(sp)
   43044:	df000117 	ldw	fp,4(sp)
   43048:	dc000017 	ldw	r16,0(sp)
   4304c:	dec00304 	addi	sp,sp,12
   43050:	f800283a 	ret

00043054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
   43054:	defffb04 	addi	sp,sp,-20
   43058:	dfc00415 	stw	ra,16(sp)
   4305c:	df000315 	stw	fp,12(sp)
   43060:	df000304 	addi	fp,sp,12
   43064:	e13ffe15 	stw	r4,-8(fp)
   43068:	2805883a 	mov	r2,r5
   4306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
   43070:	e0bfff03 	ldbu	r2,-4(fp)
   43074:	10801058 	cmpnei	r2,r2,65
   43078:	1000031e 	bne	r2,zero,43088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
   4307c:	e13ffe17 	ldw	r4,-8(fp)
   43080:	00432040 	call	43204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
   43084:	00000906 	br	430ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
   43088:	e0bfff03 	ldbu	r2,-4(fp)
   4308c:	100b883a 	mov	r5,r2
   43090:	e13ffe17 	ldw	r4,-8(fp)
   43094:	004326c0 	call	4326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
   43098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
   4309c:	e0bffd03 	ldbu	r2,-12(fp)
   430a0:	100b883a 	mov	r5,r2
   430a4:	e13ffe17 	ldw	r4,-8(fp)
   430a8:	00433000 	call	43300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
   430ac:	e037883a 	mov	sp,fp
   430b0:	dfc00117 	ldw	ra,4(sp)
   430b4:	df000017 	ldw	fp,0(sp)
   430b8:	dec00204 	addi	sp,sp,8
   430bc:	f800283a 	ret

000430c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
   430c0:	defffa04 	addi	sp,sp,-24
   430c4:	dfc00515 	stw	ra,20(sp)
   430c8:	df000415 	stw	fp,16(sp)
   430cc:	dc400315 	stw	r17,12(sp)
   430d0:	dc000215 	stw	r16,8(sp)
   430d4:	df000404 	addi	fp,sp,16
   430d8:	e13ffc15 	stw	r4,-16(fp)
   430dc:	2805883a 	mov	r2,r5
   430e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
   430e4:	e0bffd03 	ldbu	r2,-12(fp)
   430e8:	e43ffc17 	ldw	r16,-16(fp)
   430ec:	014001c4 	movi	r5,7
   430f0:	1009883a 	mov	r4,r2
   430f4:	004dab40 	call	4dab4 <__mulsi3>
   430f8:	8085883a 	add	r2,r16,r2
   430fc:	10800304 	addi	r2,r2,12
   43100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
   43104:	e0bffd03 	ldbu	r2,-12(fp)
   43108:	e43ffc17 	ldw	r16,-16(fp)
   4310c:	014001c4 	movi	r5,7
   43110:	1009883a 	mov	r4,r2
   43114:	004dab40 	call	4dab4 <__mulsi3>
   43118:	8085883a 	add	r2,r16,r2
   4311c:	10800344 	addi	r2,r2,13
   43120:	00c00044 	movi	r3,1
   43124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
   43128:	e0bffd03 	ldbu	r2,-12(fp)
   4312c:	e43ffc17 	ldw	r16,-16(fp)
   43130:	014001c4 	movi	r5,7
   43134:	1009883a 	mov	r4,r2
   43138:	004dab40 	call	4dab4 <__mulsi3>
   4313c:	8085883a 	add	r2,r16,r2
   43140:	10800384 	addi	r2,r2,14
   43144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
   43148:	e0fffd03 	ldbu	r3,-12(fp)
   4314c:	e0bffc17 	ldw	r2,-16(fp)
   43150:	14000104 	addi	r16,r2,4
   43154:	e47ffc17 	ldw	r17,-16(fp)
   43158:	014001c4 	movi	r5,7
   4315c:	1809883a 	mov	r4,r3
   43160:	004dab40 	call	4dab4 <__mulsi3>
   43164:	8885883a 	add	r2,r17,r2
   43168:	10800204 	addi	r2,r2,8
   4316c:	81403fcc 	andi	r5,r16,255
   43170:	10c00003 	ldbu	r3,0(r2)
   43174:	1806703a 	and	r3,r3,zero
   43178:	1809883a 	mov	r4,r3
   4317c:	2807883a 	mov	r3,r5
   43180:	20c6b03a 	or	r3,r4,r3
   43184:	10c00005 	stb	r3,0(r2)
   43188:	8006d23a 	srli	r3,r16,8
   4318c:	19403fcc 	andi	r5,r3,255
   43190:	10c00043 	ldbu	r3,1(r2)
   43194:	1806703a 	and	r3,r3,zero
   43198:	1809883a 	mov	r4,r3
   4319c:	2807883a 	mov	r3,r5
   431a0:	20c6b03a 	or	r3,r4,r3
   431a4:	10c00045 	stb	r3,1(r2)
   431a8:	8006d43a 	srli	r3,r16,16
   431ac:	19403fcc 	andi	r5,r3,255
   431b0:	10c00083 	ldbu	r3,2(r2)
   431b4:	1806703a 	and	r3,r3,zero
   431b8:	1809883a 	mov	r4,r3
   431bc:	2807883a 	mov	r3,r5
   431c0:	20c6b03a 	or	r3,r4,r3
   431c4:	10c00085 	stb	r3,2(r2)
   431c8:	800ad63a 	srli	r5,r16,24
   431cc:	10c000c3 	ldbu	r3,3(r2)
   431d0:	1806703a 	and	r3,r3,zero
   431d4:	1809883a 	mov	r4,r3
   431d8:	2807883a 	mov	r3,r5
   431dc:	20c6b03a 	or	r3,r4,r3
   431e0:	10c000c5 	stb	r3,3(r2)
        };
   431e4:	0001883a 	nop
   431e8:	e6fffe04 	addi	sp,fp,-8
   431ec:	dfc00317 	ldw	ra,12(sp)
   431f0:	df000217 	ldw	fp,8(sp)
   431f4:	dc400117 	ldw	r17,4(sp)
   431f8:	dc000017 	ldw	r16,0(sp)
   431fc:	dec00404 	addi	sp,sp,16
   43200:	f800283a 	ret

00043204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
   43204:	defffc04 	addi	sp,sp,-16
   43208:	dfc00315 	stw	ra,12(sp)
   4320c:	df000215 	stw	fp,8(sp)
   43210:	df000204 	addi	fp,sp,8
   43214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
   43218:	00800044 	movi	r2,1
   4321c:	e0bffe05 	stb	r2,-8(fp)
   43220:	e0bffe03 	ldbu	r2,-8(fp)
   43224:	10800428 	cmpgeui	r2,r2,16
   43228:	1000081e 	bne	r2,zero,4324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
   4322c:	e0bffe03 	ldbu	r2,-8(fp)
   43230:	100b883a 	mov	r5,r2
   43234:	e13fff17 	ldw	r4,-4(fp)
   43238:	00430c00 	call	430c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
   4323c:	e0bffe03 	ldbu	r2,-8(fp)
   43240:	10800044 	addi	r2,r2,1
   43244:	e0bffe05 	stb	r2,-8(fp)
   43248:	003ff506 	br	43220 <__alt_data_end+0xfffc3220>
                        InitEntry(i);

                hubCounter = 0;
   4324c:	e0bfff17 	ldw	r2,-4(fp)
   43250:	100001c5 	stb	zero,7(r2)
        };
   43254:	0001883a 	nop
   43258:	e037883a 	mov	sp,fp
   4325c:	dfc00117 	ldw	ra,4(sp)
   43260:	df000017 	ldw	fp,0(sp)
   43264:	dec00204 	addi	sp,sp,8
   43268:	f800283a 	ret

0004326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
   4326c:	defffa04 	addi	sp,sp,-24
   43270:	dfc00515 	stw	ra,20(sp)
   43274:	df000415 	stw	fp,16(sp)
   43278:	dc000315 	stw	r16,12(sp)
   4327c:	df000404 	addi	fp,sp,16
   43280:	e13ffd15 	stw	r4,-12(fp)
   43284:	2805883a 	mov	r2,r5
   43288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
   4328c:	00800044 	movi	r2,1
   43290:	e0bffc05 	stb	r2,-16(fp)
   43294:	e0bffc03 	ldbu	r2,-16(fp)
   43298:	10800428 	cmpgeui	r2,r2,16
   4329c:	1000111e 	bne	r2,zero,432e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
   432a0:	e0bffc03 	ldbu	r2,-16(fp)
   432a4:	e43ffd17 	ldw	r16,-12(fp)
   432a8:	014001c4 	movi	r5,7
   432ac:	1009883a 	mov	r4,r2
   432b0:	004dab40 	call	4dab4 <__mulsi3>
   432b4:	8085883a 	add	r2,r16,r2
   432b8:	10800304 	addi	r2,r2,12
   432bc:	10800003 	ldbu	r2,0(r2)
   432c0:	10c03fcc 	andi	r3,r2,255
   432c4:	e0bffe03 	ldbu	r2,-8(fp)
   432c8:	1880021e 	bne	r3,r2,432d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
   432cc:	e0bffc03 	ldbu	r2,-16(fp)
   432d0:	00000506 	br	432e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
   432d4:	e0bffc03 	ldbu	r2,-16(fp)
   432d8:	10800044 	addi	r2,r2,1
   432dc:	e0bffc05 	stb	r2,-16(fp)
   432e0:	003fec06 	br	43294 <__alt_data_end+0xfffc3294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
   432e4:	0005883a 	mov	r2,zero
        };
   432e8:	e6ffff04 	addi	sp,fp,-4
   432ec:	dfc00217 	ldw	ra,8(sp)
   432f0:	df000117 	ldw	fp,4(sp)
   432f4:	dc000017 	ldw	r16,0(sp)
   432f8:	dec00304 	addi	sp,sp,12
   432fc:	f800283a 	ret

00043300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
   43300:	defffa04 	addi	sp,sp,-24
   43304:	dfc00515 	stw	ra,20(sp)
   43308:	df000415 	stw	fp,16(sp)
   4330c:	dc000315 	stw	r16,12(sp)
   43310:	df000404 	addi	fp,sp,16
   43314:	e13ffd15 	stw	r4,-12(fp)
   43318:	2805883a 	mov	r2,r5
   4331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
   43320:	e0bffe03 	ldbu	r2,-8(fp)
   43324:	10003026 	beq	r2,zero,433e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
   43328:	e0bffe03 	ldbu	r2,-8(fp)
   4332c:	e43ffd17 	ldw	r16,-12(fp)
   43330:	014001c4 	movi	r5,7
   43334:	1009883a 	mov	r4,r2
   43338:	004dab40 	call	4dab4 <__mulsi3>
   4333c:	8085883a 	add	r2,r16,r2
   43340:	10800304 	addi	r2,r2,12
   43344:	10800003 	ldbu	r2,0(r2)
   43348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
   4334c:	e0bffc43 	ldbu	r2,-15(fp)
   43350:	1080100c 	andi	r2,r2,64
   43354:	10803fcc 	andi	r2,r2,255
   43358:	10001e26 	beq	r2,zero,433d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
   4335c:	00800044 	movi	r2,1
   43360:	e0bffc05 	stb	r2,-16(fp)
   43364:	e0bffc03 	ldbu	r2,-16(fp)
   43368:	100d883a 	mov	r6,r2
   4336c:	e17ffc43 	ldbu	r5,-15(fp)
   43370:	e13ffd17 	ldw	r4,-12(fp)
   43374:	00434040 	call	43404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
   43378:	e0bffc05 	stb	r2,-16(fp)
   4337c:	e0bffc03 	ldbu	r2,-16(fp)
   43380:	1004c03a 	cmpne	r2,r2,zero
   43384:	10803fcc 	andi	r2,r2,255
   43388:	10000526 	beq	r2,zero,433a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
   4338c:	e0bffc03 	ldbu	r2,-16(fp)
   43390:	100b883a 	mov	r5,r2
   43394:	e13ffd17 	ldw	r4,-12(fp)
   43398:	00433000 	call	43300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
   4339c:	003ff106 	br	43364 <__alt_data_end+0xfffc3364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
   433a0:	e0bffd17 	ldw	r2,-12(fp)
   433a4:	10c001c3 	ldbu	r3,7(r2)
   433a8:	e0bffc43 	ldbu	r2,-15(fp)
   433ac:	108001cc 	andi	r2,r2,7
   433b0:	18c03fcc 	andi	r3,r3,255
   433b4:	10803fcc 	andi	r2,r2,255
   433b8:	1880061e 	bne	r3,r2,433d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
   433bc:	e0bffd17 	ldw	r2,-12(fp)
   433c0:	108001c3 	ldbu	r2,7(r2)
   433c4:	10bfffc4 	addi	r2,r2,-1
   433c8:	1007883a 	mov	r3,r2
   433cc:	e0bffd17 	ldw	r2,-12(fp)
   433d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
   433d4:	e0bffe03 	ldbu	r2,-8(fp)
   433d8:	100b883a 	mov	r5,r2
   433dc:	e13ffd17 	ldw	r4,-12(fp)
   433e0:	00430c00 	call	430c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
   433e4:	00000106 	br	433ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
   433e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
   433ec:	e6ffff04 	addi	sp,fp,-4
   433f0:	dfc00217 	ldw	ra,8(sp)
   433f4:	df000117 	ldw	fp,4(sp)
   433f8:	dc000017 	ldw	r16,0(sp)
   433fc:	dec00304 	addi	sp,sp,12
   43400:	f800283a 	ret

00043404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
   43404:	defff904 	addi	sp,sp,-28
   43408:	dfc00615 	stw	ra,24(sp)
   4340c:	df000515 	stw	fp,20(sp)
   43410:	dc000415 	stw	r16,16(sp)
   43414:	df000504 	addi	fp,sp,20
   43418:	e13ffc15 	stw	r4,-16(fp)
   4341c:	e17ffd05 	stb	r5,-12(fp)
   43420:	3005883a 	mov	r2,r6
   43424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
   43428:	e0bffe03 	ldbu	r2,-8(fp)
   4342c:	10000526 	beq	r2,zero,43444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
   43430:	e0bffe03 	ldbu	r2,-8(fp)
   43434:	10800428 	cmpgeui	r2,r2,16
   43438:	1000021e 	bne	r2,zero,43444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
   4343c:	e0bffe03 	ldbu	r2,-8(fp)
   43440:	00000106 	br	43448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
   43444:	00800044 	movi	r2,1
   43448:	e0bffb05 	stb	r2,-20(fp)
   4344c:	e0bffb03 	ldbu	r2,-20(fp)
   43450:	10800428 	cmpgeui	r2,r2,16
   43454:	1000161e 	bne	r2,zero,434b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
   43458:	e0bffb03 	ldbu	r2,-20(fp)
   4345c:	e43ffc17 	ldw	r16,-16(fp)
   43460:	014001c4 	movi	r5,7
   43464:	1009883a 	mov	r4,r2
   43468:	004dab40 	call	4dab4 <__mulsi3>
   4346c:	8085883a 	add	r2,r16,r2
   43470:	10800304 	addi	r2,r2,12
   43474:	10800003 	ldbu	r2,0(r2)
   43478:	1004d0fa 	srli	r2,r2,3
   4347c:	108001cc 	andi	r2,r2,7
   43480:	1007883a 	mov	r3,r2
   43484:	e0bffd03 	ldbu	r2,-12(fp)
   43488:	108001cc 	andi	r2,r2,7
   4348c:	18c03fcc 	andi	r3,r3,255
   43490:	10803fcc 	andi	r2,r2,255
   43494:	1880021e 	bne	r3,r2,434a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
   43498:	e0bffb03 	ldbu	r2,-20(fp)
   4349c:	00000506 	br	434b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
   434a0:	e0bffb03 	ldbu	r2,-20(fp)
   434a4:	10800044 	addi	r2,r2,1
   434a8:	e0bffb05 	stb	r2,-20(fp)
   434ac:	003fe706 	br	4344c <__alt_data_end+0xfffc344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
   434b0:	0005883a 	mov	r2,zero
        };
   434b4:	e6ffff04 	addi	sp,fp,-4
   434b8:	dfc00217 	ldw	ra,8(sp)
   434bc:	df000117 	ldw	fp,4(sp)
   434c0:	dc000017 	ldw	r16,0(sp)
   434c4:	dec00304 	addi	sp,sp,12
   434c8:	f800283a 	ret

000434cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
   434cc:	defffb04 	addi	sp,sp,-20
   434d0:	dfc00415 	stw	ra,16(sp)
   434d4:	df000315 	stw	fp,12(sp)
   434d8:	df000304 	addi	fp,sp,12
   434dc:	e13ffe15 	stw	r4,-8(fp)
   434e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
   434e4:	e0bffe17 	ldw	r2,-8(fp)
   434e8:	1009883a 	mov	r4,r2
   434ec:	0044e880 	call	44e88 <_ZN15USBDeviceConfigC1Ev>
   434f0:	e0bffe17 	ldw	r2,-8(fp)
   434f4:	10800104 	addi	r2,r2,4
   434f8:	1009883a 	mov	r4,r2
   434fc:	0044ebc0 	call	44ebc <_ZN17UsbConfigXtracterC1Ev>
   43500:	008001b4 	movhi	r2,6
   43504:	10938e04 	addi	r2,r2,20024
   43508:	e0fffe17 	ldw	r3,-8(fp)
   4350c:	18800015 	stw	r2,0(r3)
   43510:	008001b4 	movhi	r2,6
   43514:	10939b04 	addi	r2,r2,20076
   43518:	e0fffe17 	ldw	r3,-8(fp)
   4351c:	18800115 	stw	r2,4(r3)
   43520:	e0bffe17 	ldw	r2,-8(fp)
   43524:	e0ffff17 	ldw	r3,-4(fp)
   43528:	10c00315 	stw	r3,12(r2)
   4352c:	e0bffe17 	ldw	r2,-8(fp)
   43530:	10000405 	stb	zero,16(r2)
   43534:	e0bffe17 	ldw	r2,-8(fp)
   43538:	00c00044 	movi	r3,1
   4353c:	10c006c5 	stb	r3,27(r2)
   43540:	e0bffe17 	ldw	r2,-8(fp)
   43544:	10000715 	stw	zero,28(r2)
   43548:	e0bffe17 	ldw	r2,-8(fp)
   4354c:	10000905 	stb	zero,36(r2)
   43550:	e0bffe17 	ldw	r2,-8(fp)
   43554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
   43558:	e03ffd05 	stb	zero,-12(fp)
   4355c:	e0bffd03 	ldbu	r2,-12(fp)
   43560:	108000e8 	cmpgeui	r2,r2,3
   43564:	1000431e 	bne	r2,zero,43674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
   43568:	e0fffd03 	ldbu	r3,-12(fp)
   4356c:	e13ffe17 	ldw	r4,-8(fp)
   43570:	1805883a 	mov	r2,r3
   43574:	1085883a 	add	r2,r2,r2
   43578:	10c5883a 	add	r2,r2,r3
   4357c:	2085883a 	add	r2,r4,r2
   43580:	10800444 	addi	r2,r2,17
   43584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
   43588:	e13ffd03 	ldbu	r4,-12(fp)
   4358c:	e0bffd03 	ldbu	r2,-12(fp)
   43590:	10000226 	beq	r2,zero,4359c <_ZN7XBOXONEC1EP3USB+0xd0>
   43594:	0007883a 	mov	r3,zero
   43598:	00000106 	br	435a0 <_ZN7XBOXONEC1EP3USB+0xd4>
   4359c:	00c00204 	movi	r3,8
   435a0:	e17ffe17 	ldw	r5,-8(fp)
   435a4:	2005883a 	mov	r2,r4
   435a8:	1085883a 	add	r2,r2,r2
   435ac:	1105883a 	add	r2,r2,r4
   435b0:	2885883a 	add	r2,r5,r2
   435b4:	10800484 	addi	r2,r2,18
   435b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
   435bc:	e0fffd03 	ldbu	r3,-12(fp)
   435c0:	e13ffe17 	ldw	r4,-8(fp)
   435c4:	1805883a 	mov	r2,r3
   435c8:	1085883a 	add	r2,r2,r2
   435cc:	10c5883a 	add	r2,r2,r3
   435d0:	2085883a 	add	r2,r4,r2
   435d4:	10800404 	addi	r2,r2,16
   435d8:	110000c3 	ldbu	r4,3(r2)
   435dc:	00ffff84 	movi	r3,-2
   435e0:	20c6703a 	and	r3,r4,r3
   435e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
   435e8:	e0fffd03 	ldbu	r3,-12(fp)
   435ec:	e13ffe17 	ldw	r4,-8(fp)
   435f0:	1805883a 	mov	r2,r3
   435f4:	1085883a 	add	r2,r2,r2
   435f8:	10c5883a 	add	r2,r2,r3
   435fc:	2085883a 	add	r2,r4,r2
   43600:	10800404 	addi	r2,r2,16
   43604:	110000c3 	ldbu	r4,3(r2)
   43608:	00ffff44 	movi	r3,-3
   4360c:	20c6703a 	and	r3,r4,r3
   43610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
   43614:	e13ffd03 	ldbu	r4,-12(fp)
   43618:	e0bffd03 	ldbu	r2,-12(fp)
   4361c:	10000226 	beq	r2,zero,43628 <_ZN7XBOXONEC1EP3USB+0x15c>
   43620:	00c00044 	movi	r3,1
   43624:	00000106 	br	4362c <_ZN7XBOXONEC1EP3USB+0x160>
   43628:	00c003c4 	movi	r3,15
   4362c:	e17ffe17 	ldw	r5,-8(fp)
   43630:	2005883a 	mov	r2,r4
   43634:	1085883a 	add	r2,r2,r2
   43638:	1105883a 	add	r2,r2,r4
   4363c:	2885883a 	add	r2,r5,r2
   43640:	10800404 	addi	r2,r2,16
   43644:	18c7883a 	add	r3,r3,r3
   43648:	18cb883a 	add	r5,r3,r3
   4364c:	10c000c3 	ldbu	r3,3(r2)
   43650:	18c000cc 	andi	r3,r3,3
   43654:	1809883a 	mov	r4,r3
   43658:	2807883a 	mov	r3,r5
   4365c:	20c6b03a 	or	r3,r4,r3
   43660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
   43664:	e0bffd03 	ldbu	r2,-12(fp)
   43668:	10800044 	addi	r2,r2,1
   4366c:	e0bffd05 	stb	r2,-12(fp)
   43670:	003fba06 	br	4355c <__alt_data_end+0xfffc355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
   43674:	e0bffe17 	ldw	r2,-8(fp)
   43678:	10800317 	ldw	r2,12(r2)
   4367c:	10000626 	beq	r2,zero,43698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
   43680:	e0bffe17 	ldw	r2,-8(fp)
   43684:	10800317 	ldw	r2,12(r2)
   43688:	e0fffe17 	ldw	r3,-8(fp)
   4368c:	180b883a 	mov	r5,r3
   43690:	1009883a 	mov	r4,r2
   43694:	0044c3c0 	call	44c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
   43698:	0001883a 	nop
   4369c:	e037883a 	mov	sp,fp
   436a0:	dfc00117 	ldw	ra,4(sp)
   436a4:	df000017 	ldw	fp,0(sp)
   436a8:	dec00204 	addi	sp,sp,8
   436ac:	f800283a 	ret

000436b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
   436b0:	deffde04 	addi	sp,sp,-136
   436b4:	dfc02115 	stw	ra,132(sp)
   436b8:	df002015 	stw	fp,128(sp)
   436bc:	df002004 	addi	fp,sp,128
   436c0:	e13ffc15 	stw	r4,-16(fp)
   436c4:	2809883a 	mov	r4,r5
   436c8:	3007883a 	mov	r3,r6
   436cc:	3805883a 	mov	r2,r7
   436d0:	e13ffd05 	stb	r4,-12(fp)
   436d4:	e0fffe05 	stb	r3,-8(fp)
   436d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
   436dc:	e0bfe744 	addi	r2,fp,-99
   436e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
   436e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
   436e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
   436ec:	e0bffc17 	ldw	r2,-16(fp)
   436f0:	10800317 	ldw	r2,12(r2)
   436f4:	1009883a 	mov	r4,r2
   436f8:	0042c180 	call	42c18 <_ZN3USB14GetAddressPoolEv>
   436fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
   43700:	e0bffc17 	ldw	r2,-16(fp)
   43704:	10800403 	ldbu	r2,16(r2)
   43708:	10803fcc 	andi	r2,r2,255
   4370c:	10000226 	beq	r2,zero,43718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
   43710:	00bff644 	movi	r2,-39
   43714:	00017606 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
   43718:	e0bfe517 	ldw	r2,-108(fp)
   4371c:	10800017 	ldw	r2,0(r2)
   43720:	10800017 	ldw	r2,0(r2)
   43724:	000b883a 	mov	r5,zero
   43728:	e13fe517 	ldw	r4,-108(fp)
   4372c:	103ee83a 	callr	r2
   43730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
   43734:	e0bfe317 	ldw	r2,-116(fp)
   43738:	1000021e 	bne	r2,zero,43744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   4373c:	00bff584 	movi	r2,-42
   43740:	00016b06 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
   43744:	e0bfe317 	ldw	r2,-116(fp)
   43748:	10c00003 	ldbu	r3,0(r2)
   4374c:	11000043 	ldbu	r4,1(r2)
   43750:	2008923a 	slli	r4,r4,8
   43754:	20c6b03a 	or	r3,r4,r3
   43758:	11000083 	ldbu	r4,2(r2)
   4375c:	2008943a 	slli	r4,r4,16
   43760:	20c6b03a 	or	r3,r4,r3
   43764:	108000c3 	ldbu	r2,3(r2)
   43768:	1004963a 	slli	r2,r2,24
   4376c:	10c4b03a 	or	r2,r2,r3
   43770:	1000021e 	bne	r2,zero,4377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
   43774:	00bff5c4 	movi	r2,-41
   43778:	00015d06 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
   4377c:	e0bfe317 	ldw	r2,-116(fp)
   43780:	10c00003 	ldbu	r3,0(r2)
   43784:	11000043 	ldbu	r4,1(r2)
   43788:	2008923a 	slli	r4,r4,8
   4378c:	20c6b03a 	or	r3,r4,r3
   43790:	11000083 	ldbu	r4,2(r2)
   43794:	2008943a 	slli	r4,r4,16
   43798:	20c6b03a 	or	r3,r4,r3
   4379c:	108000c3 	ldbu	r2,3(r2)
   437a0:	1004963a 	slli	r2,r2,24
   437a4:	10c4b03a 	or	r2,r2,r3
   437a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
   437ac:	e0bffc17 	ldw	r2,-16(fp)
   437b0:	10c00444 	addi	r3,r2,17
   437b4:	e0bfe317 	ldw	r2,-116(fp)
   437b8:	19803fcc 	andi	r6,r3,255
   437bc:	11000003 	ldbu	r4,0(r2)
   437c0:	2008703a 	and	r4,r4,zero
   437c4:	200b883a 	mov	r5,r4
   437c8:	3009883a 	mov	r4,r6
   437cc:	2908b03a 	or	r4,r5,r4
   437d0:	11000005 	stb	r4,0(r2)
   437d4:	1808d23a 	srli	r4,r3,8
   437d8:	21803fcc 	andi	r6,r4,255
   437dc:	11000043 	ldbu	r4,1(r2)
   437e0:	2008703a 	and	r4,r4,zero
   437e4:	200b883a 	mov	r5,r4
   437e8:	3009883a 	mov	r4,r6
   437ec:	2908b03a 	or	r4,r5,r4
   437f0:	11000045 	stb	r4,1(r2)
   437f4:	1808d43a 	srli	r4,r3,16
   437f8:	21803fcc 	andi	r6,r4,255
   437fc:	11000083 	ldbu	r4,2(r2)
   43800:	2008703a 	and	r4,r4,zero
   43804:	200b883a 	mov	r5,r4
   43808:	3009883a 	mov	r4,r6
   4380c:	2908b03a 	or	r4,r5,r4
   43810:	11000085 	stb	r4,2(r2)
   43814:	180ad63a 	srli	r5,r3,24
   43818:	10c000c3 	ldbu	r3,3(r2)
   4381c:	1806703a 	and	r3,r3,zero
   43820:	1809883a 	mov	r4,r3
   43824:	2807883a 	mov	r3,r5
   43828:	20c6b03a 	or	r3,r4,r3
   4382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
   43830:	e0bfe317 	ldw	r2,-116(fp)
   43834:	e0ffff03 	ldbu	r3,-4(fp)
   43838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
   4383c:	e0bffc17 	ldw	r2,-16(fp)
   43840:	10c00317 	ldw	r3,12(r2)
   43844:	00800484 	movi	r2,18
   43848:	113fffcc 	andi	r4,r2,65535
   4384c:	e0bfe744 	addi	r2,fp,-99
   43850:	d8800015 	stw	r2,0(sp)
   43854:	200f883a 	mov	r7,r4
   43858:	000d883a 	mov	r6,zero
   4385c:	000b883a 	mov	r5,zero
   43860:	1809883a 	mov	r4,r3
   43864:	00428440 	call	42844 <_ZN3USB11getDevDescrEhhtPh>
   43868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
   4386c:	e0bfe317 	ldw	r2,-116(fp)
   43870:	e0ffe417 	ldw	r3,-112(fp)
   43874:	19403fcc 	andi	r5,r3,255
   43878:	10c00003 	ldbu	r3,0(r2)
   4387c:	1806703a 	and	r3,r3,zero
   43880:	1809883a 	mov	r4,r3
   43884:	2807883a 	mov	r3,r5
   43888:	20c6b03a 	or	r3,r4,r3
   4388c:	10c00005 	stb	r3,0(r2)
   43890:	e0ffe417 	ldw	r3,-112(fp)
   43894:	1806d23a 	srli	r3,r3,8
   43898:	19403fcc 	andi	r5,r3,255
   4389c:	10c00043 	ldbu	r3,1(r2)
   438a0:	1806703a 	and	r3,r3,zero
   438a4:	1809883a 	mov	r4,r3
   438a8:	2807883a 	mov	r3,r5
   438ac:	20c6b03a 	or	r3,r4,r3
   438b0:	10c00045 	stb	r3,1(r2)
   438b4:	e0ffe417 	ldw	r3,-112(fp)
   438b8:	1806d43a 	srli	r3,r3,16
   438bc:	19403fcc 	andi	r5,r3,255
   438c0:	10c00083 	ldbu	r3,2(r2)
   438c4:	1806703a 	and	r3,r3,zero
   438c8:	1809883a 	mov	r4,r3
   438cc:	2807883a 	mov	r3,r5
   438d0:	20c6b03a 	or	r3,r4,r3
   438d4:	10c00085 	stb	r3,2(r2)
   438d8:	e0ffe417 	ldw	r3,-112(fp)
   438dc:	180ad63a 	srli	r5,r3,24
   438e0:	10c000c3 	ldbu	r3,3(r2)
   438e4:	1806703a 	and	r3,r3,zero
   438e8:	1809883a 	mov	r4,r3
   438ec:	2807883a 	mov	r3,r5
   438f0:	20c6b03a 	or	r3,r4,r3
   438f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
   438f8:	e0bfe103 	ldbu	r2,-124(fp)
   438fc:	1000e61e 	bne	r2,zero,43c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
   43900:	e0bfe217 	ldw	r2,-120(fp)
   43904:	10c00203 	ldbu	r3,8(r2)
   43908:	10800243 	ldbu	r2,9(r2)
   4390c:	1004923a 	slli	r2,r2,8
   43910:	10c4b03a 	or	r2,r2,r3
   43914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
   43918:	e0bfe217 	ldw	r2,-120(fp)
   4391c:	10c00283 	ldbu	r3,10(r2)
   43920:	108002c3 	ldbu	r2,11(r2)
   43924:	1004923a 	slli	r2,r2,8
   43928:	10c4b03a 	or	r2,r2,r3
   4392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
   43930:	e0bffc17 	ldw	r2,-16(fp)
   43934:	10800017 	ldw	r2,0(r2)
   43938:	10800604 	addi	r2,r2,24
   4393c:	10800017 	ldw	r2,0(r2)
   43940:	e0ffe60b 	ldhu	r3,-104(fp)
   43944:	e13fe68b 	ldhu	r4,-102(fp)
   43948:	200d883a 	mov	r6,r4
   4394c:	180b883a 	mov	r5,r3
   43950:	e13ffc17 	ldw	r4,-16(fp)
   43954:	103ee83a 	callr	r2
   43958:	1080005c 	xori	r2,r2,1
   4395c:	10803fcc 	andi	r2,r2,255
   43960:	1000d51e 	bne	r2,zero,43cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
   43964:	e0bfe517 	ldw	r2,-108(fp)
   43968:	10800017 	ldw	r2,0(r2)
   4396c:	10800104 	addi	r2,r2,4
   43970:	10800017 	ldw	r2,0(r2)
   43974:	e0fffd03 	ldbu	r3,-12(fp)
   43978:	e13ffe03 	ldbu	r4,-8(fp)
   4397c:	200f883a 	mov	r7,r4
   43980:	000d883a 	mov	r6,zero
   43984:	180b883a 	mov	r5,r3
   43988:	e13fe517 	ldw	r4,-108(fp)
   4398c:	103ee83a 	callr	r2
   43990:	1007883a 	mov	r3,r2
   43994:	e0bffc17 	ldw	r2,-16(fp)
   43998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
   4399c:	e0bffc17 	ldw	r2,-16(fp)
   439a0:	10800403 	ldbu	r2,16(r2)
   439a4:	10803fcc 	andi	r2,r2,255
   439a8:	1000021e 	bne	r2,zero,439b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
   439ac:	00bff504 	movi	r2,-44
   439b0:	0000cf06 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
   439b4:	e0bfe217 	ldw	r2,-120(fp)
   439b8:	10c001c3 	ldbu	r3,7(r2)
   439bc:	e0bffc17 	ldw	r2,-16(fp)
   439c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
   439c4:	e0bffc17 	ldw	r2,-16(fp)
   439c8:	10c00317 	ldw	r3,12(r2)
   439cc:	e0bffc17 	ldw	r2,-16(fp)
   439d0:	10800403 	ldbu	r2,16(r2)
   439d4:	10803fcc 	andi	r2,r2,255
   439d8:	100f883a 	mov	r7,r2
   439dc:	000d883a 	mov	r6,zero
   439e0:	000b883a 	mov	r5,zero
   439e4:	1809883a 	mov	r4,r3
   439e8:	0042b000 	call	42b00 <_ZN3USB7setAddrEhhh>
   439ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
   439f0:	e0bfe103 	ldbu	r2,-124(fp)
   439f4:	10001026 	beq	r2,zero,43a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
   439f8:	e0bfe317 	ldw	r2,-116(fp)
   439fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
   43a00:	e0bfe517 	ldw	r2,-108(fp)
   43a04:	10800017 	ldw	r2,0(r2)
   43a08:	10800204 	addi	r2,r2,8
   43a0c:	10800017 	ldw	r2,0(r2)
   43a10:	e0fffc17 	ldw	r3,-16(fp)
   43a14:	18c00403 	ldbu	r3,16(r3)
   43a18:	18c03fcc 	andi	r3,r3,255
   43a1c:	180b883a 	mov	r5,r3
   43a20:	e13fe517 	ldw	r4,-108(fp)
   43a24:	103ee83a 	callr	r2
                bAddress = 0;
   43a28:	e0bffc17 	ldw	r2,-16(fp)
   43a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
   43a30:	e0bfe103 	ldbu	r2,-124(fp)
   43a34:	0000ae06 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
   43a38:	e0bfe317 	ldw	r2,-116(fp)
   43a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
   43a40:	e0bfe517 	ldw	r2,-108(fp)
   43a44:	10800017 	ldw	r2,0(r2)
   43a48:	10800017 	ldw	r2,0(r2)
   43a4c:	e0fffc17 	ldw	r3,-16(fp)
   43a50:	18c00403 	ldbu	r3,16(r3)
   43a54:	18c03fcc 	andi	r3,r3,255
   43a58:	180b883a 	mov	r5,r3
   43a5c:	e13fe517 	ldw	r4,-108(fp)
   43a60:	103ee83a 	callr	r2
   43a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
   43a68:	e0bfe317 	ldw	r2,-116(fp)
   43a6c:	1000021e 	bne	r2,zero,43a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   43a70:	00bff584 	movi	r2,-42
   43a74:	00009e06 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
   43a78:	e0bfe317 	ldw	r2,-116(fp)
   43a7c:	e0ffff03 	ldbu	r3,-4(fp)
   43a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
   43a84:	e0bffc17 	ldw	r2,-16(fp)
   43a88:	10c00317 	ldw	r3,12(r2)
   43a8c:	e0bffc17 	ldw	r2,-16(fp)
   43a90:	10800403 	ldbu	r2,16(r2)
   43a94:	11003fcc 	andi	r4,r2,255
   43a98:	e0bffc17 	ldw	r2,-16(fp)
   43a9c:	10800444 	addi	r2,r2,17
   43aa0:	100f883a 	mov	r7,r2
   43aa4:	01800044 	movi	r6,1
   43aa8:	200b883a 	mov	r5,r4
   43aac:	1809883a 	mov	r4,r3
   43ab0:	00408f40 	call	408f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
   43ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
   43ab8:	e0bfe103 	ldbu	r2,-124(fp)
   43abc:	1000781e 	bne	r2,zero,43ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
   43ac0:	e0bfe217 	ldw	r2,-120(fp)
   43ac4:	10800443 	ldbu	r2,17(r2)
   43ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
   43acc:	e0bfe703 	ldbu	r2,-100(fp)
   43ad0:	01402004 	movi	r5,128
   43ad4:	1009883a 	mov	r4,r2
   43ad8:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
   43adc:	e03fe145 	stb	zero,-123(fp)
   43ae0:	e0ffe143 	ldbu	r3,-123(fp)
   43ae4:	e0bfe703 	ldbu	r2,-100(fp)
   43ae8:	1880222e 	bgeu	r3,r2,43b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
   43aec:	e0bffc17 	ldw	r2,-16(fp)
   43af0:	10c00104 	addi	r3,r2,4
   43af4:	e0bfed04 	addi	r2,fp,-76
   43af8:	180b883a 	mov	r5,r3
   43afc:	1009883a 	mov	r4,r2
   43b00:	0044f240 	call	44f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
   43b04:	e0bffc17 	ldw	r2,-16(fp)
   43b08:	10c00317 	ldw	r3,12(r2)
   43b0c:	e0bffc17 	ldw	r2,-16(fp)
   43b10:	10800403 	ldbu	r2,16(r2)
   43b14:	11003fcc 	andi	r4,r2,255
   43b18:	e17fe143 	ldbu	r5,-123(fp)
   43b1c:	e0bfed04 	addi	r2,fp,-76
   43b20:	d8800015 	stw	r2,0(sp)
   43b24:	280f883a 	mov	r7,r5
   43b28:	000d883a 	mov	r6,zero
   43b2c:	200b883a 	mov	r5,r4
   43b30:	1809883a 	mov	r4,r3
   43b34:	00429600 	call	42960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
   43b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
   43b3c:	e0bfe103 	ldbu	r2,-124(fp)
   43b40:	10000226 	beq	r2,zero,43b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
   43b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
   43b48:	00006206 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
   43b4c:	e0bffc17 	ldw	r2,-16(fp)
   43b50:	108006c3 	ldbu	r2,27(r2)
   43b54:	10803fcc 	andi	r2,r2,255
   43b58:	108000f0 	cmpltui	r2,r2,3
   43b5c:	10000426 	beq	r2,zero,43b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
   43b60:	e0bfe143 	ldbu	r2,-123(fp)
   43b64:	10800044 	addi	r2,r2,1
   43b68:	e0bfe145 	stb	r2,-123(fp)
   43b6c:	003fdc06 	br	43ae0 <__alt_data_end+0xfffc3ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
   43b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
   43b74:	e0bffc17 	ldw	r2,-16(fp)
   43b78:	108006c3 	ldbu	r2,27(r2)
   43b7c:	10803fcc 	andi	r2,r2,255
   43b80:	108000e8 	cmpgeui	r2,r2,3
   43b84:	10004e26 	beq	r2,zero,43cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
   43b88:	e0bffc17 	ldw	r2,-16(fp)
   43b8c:	10c00317 	ldw	r3,12(r2)
   43b90:	e0bffc17 	ldw	r2,-16(fp)
   43b94:	10800403 	ldbu	r2,16(r2)
   43b98:	11003fcc 	andi	r4,r2,255
   43b9c:	e0bffc17 	ldw	r2,-16(fp)
   43ba0:	108006c3 	ldbu	r2,27(r2)
   43ba4:	11403fcc 	andi	r5,r2,255
   43ba8:	e0bffc17 	ldw	r2,-16(fp)
   43bac:	10800444 	addi	r2,r2,17
   43bb0:	100f883a 	mov	r7,r2
   43bb4:	280d883a 	mov	r6,r5
   43bb8:	200b883a 	mov	r5,r4
   43bbc:	1809883a 	mov	r4,r3
   43bc0:	00408f40 	call	408f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
   43bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
   43bc8:	e0bfe103 	ldbu	r2,-124(fp)
   43bcc:	1000361e 	bne	r2,zero,43ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
   43bd0:	01003204 	movi	r4,200
   43bd4:	00406840 	call	40684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
   43bd8:	e0bffc17 	ldw	r2,-16(fp)
   43bdc:	10c00317 	ldw	r3,12(r2)
   43be0:	e0bffc17 	ldw	r2,-16(fp)
   43be4:	10800403 	ldbu	r2,16(r2)
   43be8:	11003fcc 	andi	r4,r2,255
   43bec:	e0bffc17 	ldw	r2,-16(fp)
   43bf0:	10800443 	ldbu	r2,17(r2)
   43bf4:	11403fcc 	andi	r5,r2,255
   43bf8:	e0bffc17 	ldw	r2,-16(fp)
   43bfc:	10800683 	ldbu	r2,26(r2)
   43c00:	10803fcc 	andi	r2,r2,255
   43c04:	100f883a 	mov	r7,r2
   43c08:	280d883a 	mov	r6,r5
   43c0c:	200b883a 	mov	r5,r4
   43c10:	1809883a 	mov	r4,r3
   43c14:	0042b940 	call	42b94 <_ZN3USB7setConfEhhh>
   43c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
   43c1c:	e0bfe103 	ldbu	r2,-124(fp)
   43c20:	1000231e 	bne	r2,zero,43cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
   43c24:	01003204 	movi	r4,200
   43c28:	00406840 	call	40684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
   43c2c:	e0bffc17 	ldw	r2,-16(fp)
   43c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
   43c34:	00800144 	movi	r2,5
   43c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
   43c3c:	00800804 	movi	r2,32
   43c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
   43c44:	00800044 	movi	r2,1
   43c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
   43c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
   43c50:	e0bfebc4 	addi	r2,fp,-81
   43c54:	01800144 	movi	r6,5
   43c58:	100b883a 	mov	r5,r2
   43c5c:	e13ffc17 	ldw	r4,-16(fp)
   43c60:	00445780 	call	44578 <_ZN7XBOXONE11XboxCommandEPht>
   43c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
   43c68:	e0bfe103 	ldbu	r2,-124(fp)
   43c6c:	1000181e 	bne	r2,zero,43cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
   43c70:	e13ffc17 	ldw	r4,-16(fp)
   43c74:	00446180 	call	44618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
   43c78:	e0bffc17 	ldw	r2,-16(fp)
   43c7c:	00c00044 	movi	r3,1
   43c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
   43c84:	e0bffc17 	ldw	r2,-16(fp)
   43c88:	00c00044 	movi	r3,1
   43c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
   43c90:	0005883a 	mov	r2,zero
   43c94:	00001606 	br	43cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
   43c98:	0001883a 	nop
   43c9c:	00000d06 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
   43ca0:	0001883a 	nop
   43ca4:	00000b06 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
   43ca8:	0001883a 	nop
   43cac:	00000906 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
   43cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
   43cb4:	00000706 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
   43cb8:	0001883a 	nop
   43cbc:	00000106 	br	43cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
   43cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
   43cc4:	00bff444 	movi	r2,-47
   43cc8:	e0bfe105 	stb	r2,-124(fp)
   43ccc:	00000106 	br	43cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
   43cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
   43cd4:	e0bffc17 	ldw	r2,-16(fp)
   43cd8:	10800017 	ldw	r2,0(r2)
   43cdc:	10800204 	addi	r2,r2,8
   43ce0:	10800017 	ldw	r2,0(r2)
   43ce4:	e13ffc17 	ldw	r4,-16(fp)
   43ce8:	103ee83a 	callr	r2
        return rcode;
   43cec:	e0bfe103 	ldbu	r2,-124(fp)
}
   43cf0:	e037883a 	mov	sp,fp
   43cf4:	dfc00117 	ldw	ra,4(sp)
   43cf8:	df000017 	ldw	fp,0(sp)
   43cfc:	dec00204 	addi	sp,sp,8
   43d00:	f800283a 	ret

00043d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
   43d04:	defff904 	addi	sp,sp,-28
   43d08:	df000615 	stw	fp,24(sp)
   43d0c:	df000604 	addi	fp,sp,24
   43d10:	e13ffb15 	stw	r4,-20(fp)
   43d14:	3009883a 	mov	r4,r6
   43d18:	3807883a 	mov	r3,r7
   43d1c:	e0800117 	ldw	r2,4(fp)
   43d20:	e17ffc05 	stb	r5,-16(fp)
   43d24:	e13ffd05 	stb	r4,-12(fp)
   43d28:	e0fffe05 	stb	r3,-8(fp)
   43d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
   43d30:	e0bffb17 	ldw	r2,-20(fp)
   43d34:	e0fffc03 	ldbu	r3,-16(fp)
   43d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
   43d3c:	e0800217 	ldw	r2,8(fp)
   43d40:	108000c3 	ldbu	r2,3(r2)
   43d44:	10803fcc 	andi	r2,r2,255
   43d48:	108000cc 	andi	r2,r2,3
   43d4c:	108000d8 	cmpnei	r2,r2,3
   43d50:	1000361e 	bne	r2,zero,43e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
   43d54:	e0800217 	ldw	r2,8(fp)
   43d58:	10800083 	ldbu	r2,2(r2)
   43d5c:	10803fcc 	andi	r2,r2,255
   43d60:	1080201c 	xori	r2,r2,128
   43d64:	10bfe004 	addi	r2,r2,-128
   43d68:	1000020e 	bge	r2,zero,43d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
   43d6c:	00800084 	movi	r2,2
   43d70:	00000106 	br	43d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
   43d74:	00800044 	movi	r2,1
   43d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
   43d7c:	e0fffa03 	ldbu	r3,-24(fp)
   43d80:	e0800217 	ldw	r2,8(fp)
   43d84:	10800083 	ldbu	r2,2(r2)
   43d88:	108003cc 	andi	r2,r2,15
   43d8c:	100b883a 	mov	r5,r2
   43d90:	e13ffb17 	ldw	r4,-20(fp)
   43d94:	1805883a 	mov	r2,r3
   43d98:	1085883a 	add	r2,r2,r2
   43d9c:	10c5883a 	add	r2,r2,r3
   43da0:	2085883a 	add	r2,r4,r2
   43da4:	10800444 	addi	r2,r2,17
   43da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
   43dac:	e0fffa03 	ldbu	r3,-24(fp)
   43db0:	e0800217 	ldw	r2,8(fp)
   43db4:	11000103 	ldbu	r4,4(r2)
   43db8:	10800143 	ldbu	r2,5(r2)
   43dbc:	1004923a 	slli	r2,r2,8
   43dc0:	1104b03a 	or	r2,r2,r4
   43dc4:	100b883a 	mov	r5,r2
   43dc8:	e13ffb17 	ldw	r4,-20(fp)
   43dcc:	1805883a 	mov	r2,r3
   43dd0:	1085883a 	add	r2,r2,r2
   43dd4:	10c5883a 	add	r2,r2,r3
   43dd8:	2085883a 	add	r2,r4,r2
   43ddc:	10800484 	addi	r2,r2,18
   43de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
   43de4:	e0bffb17 	ldw	r2,-20(fp)
   43de8:	10c00903 	ldbu	r3,36(r2)
   43dec:	e0800217 	ldw	r2,8(fp)
   43df0:	10800183 	ldbu	r2,6(r2)
   43df4:	18c03fcc 	andi	r3,r3,255
   43df8:	10803fcc 	andi	r2,r2,255
   43dfc:	1880042e 	bgeu	r3,r2,43e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
   43e00:	e0800217 	ldw	r2,8(fp)
   43e04:	10c00183 	ldbu	r3,6(r2)
   43e08:	e0bffb17 	ldw	r2,-20(fp)
   43e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
   43e10:	e0bffb17 	ldw	r2,-20(fp)
   43e14:	108006c3 	ldbu	r2,27(r2)
   43e18:	10800044 	addi	r2,r2,1
   43e1c:	1007883a 	mov	r3,r2
   43e20:	e0bffb17 	ldw	r2,-20(fp)
   43e24:	10c006c5 	stb	r3,27(r2)
   43e28:	00000106 	br	43e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
   43e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
   43e30:	e037883a 	mov	sp,fp
   43e34:	df000017 	ldw	fp,0(sp)
   43e38:	dec00104 	addi	sp,sp,4
   43e3c:	f800283a 	ret

00043e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
   43e40:	213fff04 	addi	r4,r4,-4
   43e44:	0043d041 	jmpi	43d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00043e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
   43e48:	defffd04 	addi	sp,sp,-12
   43e4c:	df000215 	stw	fp,8(sp)
   43e50:	df000204 	addi	fp,sp,8
   43e54:	e13ffe15 	stw	r4,-8(fp)
   43e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
   43e5c:	0001883a 	nop
   43e60:	e037883a 	mov	sp,fp
   43e64:	df000017 	ldw	fp,0(sp)
   43e68:	dec00104 	addi	sp,sp,4
   43e6c:	f800283a 	ret

00043e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
   43e70:	defffd04 	addi	sp,sp,-12
   43e74:	dfc00215 	stw	ra,8(sp)
   43e78:	df000115 	stw	fp,4(sp)
   43e7c:	df000104 	addi	fp,sp,4
   43e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
   43e84:	e0bfff17 	ldw	r2,-4(fp)
   43e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
   43e8c:	e0bfff17 	ldw	r2,-4(fp)
   43e90:	10800317 	ldw	r2,12(r2)
   43e94:	1009883a 	mov	r4,r2
   43e98:	0042c180 	call	42c18 <_ZN3USB14GetAddressPoolEv>
   43e9c:	1009883a 	mov	r4,r2
   43ea0:	20800017 	ldw	r2,0(r4)
   43ea4:	10800204 	addi	r2,r2,8
   43ea8:	10800017 	ldw	r2,0(r2)
   43eac:	e0ffff17 	ldw	r3,-4(fp)
   43eb0:	18c00403 	ldbu	r3,16(r3)
   43eb4:	18c03fcc 	andi	r3,r3,255
   43eb8:	180b883a 	mov	r5,r3
   43ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
   43ec0:	e0bfff17 	ldw	r2,-4(fp)
   43ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
   43ec8:	e0bfff17 	ldw	r2,-4(fp)
   43ecc:	00c00044 	movi	r3,1
   43ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
   43ed4:	e0bfff17 	ldw	r2,-4(fp)
   43ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
   43edc:	e0bfff17 	ldw	r2,-4(fp)
   43ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
   43ee4:	e0bfff17 	ldw	r2,-4(fp)
   43ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
   43eec:	0005883a 	mov	r2,zero
}
   43ef0:	e037883a 	mov	sp,fp
   43ef4:	dfc00117 	ldw	ra,4(sp)
   43ef8:	df000017 	ldw	fp,0(sp)
   43efc:	dec00204 	addi	sp,sp,8
   43f00:	f800283a 	ret

00043f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
   43f04:	defffa04 	addi	sp,sp,-24
   43f08:	dfc00515 	stw	ra,20(sp)
   43f0c:	df000415 	stw	fp,16(sp)
   43f10:	df000404 	addi	fp,sp,16
   43f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
   43f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
   43f1c:	e0bfff17 	ldw	r2,-4(fp)
   43f20:	10800943 	ldbu	r2,37(r2)
   43f24:	1080005c 	xori	r2,r2,1
   43f28:	10803fcc 	andi	r2,r2,255
   43f2c:	10000226 	beq	r2,zero,43f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
   43f30:	0005883a 	mov	r2,zero
   43f34:	00002c06 	br	43fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
   43f38:	00406dc0 	call	406dc <_Z6millisv>
   43f3c:	1007883a 	mov	r3,r2
   43f40:	e0bfff17 	ldw	r2,-4(fp)
   43f44:	10800717 	ldw	r2,28(r2)
   43f48:	1885c83a 	sub	r2,r3,r2
   43f4c:	0084303a 	nor	r2,zero,r2
   43f50:	1004d7fa 	srli	r2,r2,31
   43f54:	10803fcc 	andi	r2,r2,255
   43f58:	10002226 	beq	r2,zero,43fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
   43f5c:	00406dc0 	call	406dc <_Z6millisv>
   43f60:	1007883a 	mov	r3,r2
   43f64:	e0bfff17 	ldw	r2,-4(fp)
   43f68:	10800903 	ldbu	r2,36(r2)
   43f6c:	10803fcc 	andi	r2,r2,255
   43f70:	1887883a 	add	r3,r3,r2
   43f74:	e0bfff17 	ldw	r2,-4(fp)
   43f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
   43f7c:	e0bfff17 	ldw	r2,-4(fp)
   43f80:	10800603 	ldbu	r2,24(r2)
   43f84:	10803fcc 	andi	r2,r2,255
   43f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
   43f8c:	e0bfff17 	ldw	r2,-4(fp)
   43f90:	11000317 	ldw	r4,12(r2)
   43f94:	e0bfff17 	ldw	r2,-4(fp)
   43f98:	10800403 	ldbu	r2,16(r2)
   43f9c:	11403fcc 	andi	r5,r2,255
   43fa0:	e0bfff17 	ldw	r2,-4(fp)
   43fa4:	108005c3 	ldbu	r2,23(r2)
   43fa8:	11803fcc 	andi	r6,r2,255
   43fac:	e0bfff17 	ldw	r2,-4(fp)
   43fb0:	10800f84 	addi	r2,r2,62
   43fb4:	e0ffff17 	ldw	r3,-4(fp)
   43fb8:	18c00903 	ldbu	r3,36(r3)
   43fbc:	18c03fcc 	andi	r3,r3,255
   43fc0:	e1fffe84 	addi	r7,fp,-6
   43fc4:	d8c00115 	stw	r3,4(sp)
   43fc8:	d8800015 	stw	r2,0(sp)
   43fcc:	0040eac0 	call	40eac <_ZN3USB10inTransferEhhPtPhh>
   43fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
   43fd4:	e0bffe43 	ldbu	r2,-7(fp)
   43fd8:	1000021e 	bne	r2,zero,43fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
   43fdc:	e13fff17 	ldw	r4,-4(fp)
   43fe0:	0043ffc0 	call	43ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
   43fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
   43fe8:	e037883a 	mov	sp,fp
   43fec:	dfc00117 	ldw	ra,4(sp)
   43ff0:	df000017 	ldw	fp,0(sp)
   43ff4:	dec00204 	addi	sp,sp,8
   43ff8:	f800283a 	ret

00043ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
   43ffc:	defffd04 	addi	sp,sp,-12
   44000:	df000215 	stw	fp,8(sp)
   44004:	df000204 	addi	fp,sp,8
   44008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
   4400c:	e0bfff17 	ldw	r2,-4(fp)
   44010:	10800f83 	ldbu	r2,62(r2)
   44014:	10803fcc 	andi	r2,r2,255
   44018:	108001d8 	cmpnei	r2,r2,7
   4401c:	10002f1e 	bne	r2,zero,440dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
   44020:	e0bfff17 	ldw	r2,-4(fp)
   44024:	10801083 	ldbu	r2,66(r2)
   44028:	10803fcc 	andi	r2,r2,255
   4402c:	10800058 	cmpnei	r2,r2,1
   44030:	10000a1e 	bne	r2,zero,4405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
   44034:	e0bfff17 	ldw	r2,-4(fp)
   44038:	10c0098b 	ldhu	r3,38(r2)
   4403c:	008001b4 	movhi	r2,6
   44040:	10938a84 	addi	r2,r2,20010
   44044:	1080000b 	ldhu	r2,0(r2)
   44048:	1884b03a 	or	r2,r3,r2
   4404c:	1007883a 	mov	r3,r2
   44050:	e0bfff17 	ldw	r2,-4(fp)
   44054:	10c0098d 	sth	r3,38(r2)
   44058:	00000b06 	br	44088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
   4405c:	e0bfff17 	ldw	r2,-4(fp)
   44060:	1080098b 	ldhu	r2,38(r2)
   44064:	1007883a 	mov	r3,r2
   44068:	008001b4 	movhi	r2,6
   4406c:	10938a84 	addi	r2,r2,20010
   44070:	1080000b 	ldhu	r2,0(r2)
   44074:	0084303a 	nor	r2,zero,r2
   44078:	1884703a 	and	r2,r3,r2
   4407c:	1007883a 	mov	r3,r2
   44080:	e0bfff17 	ldw	r2,-4(fp)
   44084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
   44088:	e0bfff17 	ldw	r2,-4(fp)
   4408c:	10c0098b 	ldhu	r3,38(r2)
   44090:	e0bfff17 	ldw	r2,-4(fp)
   44094:	10800a0b 	ldhu	r2,40(r2)
   44098:	18ffffcc 	andi	r3,r3,65535
   4409c:	10bfffcc 	andi	r2,r2,65535
   440a0:	18800e26 	beq	r3,r2,440dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
   440a4:	e0bfff17 	ldw	r2,-4(fp)
   440a8:	1080098b 	ldhu	r2,38(r2)
   440ac:	1007883a 	mov	r3,r2
   440b0:	e0bfff17 	ldw	r2,-4(fp)
   440b4:	10800a0b 	ldhu	r2,40(r2)
   440b8:	0084303a 	nor	r2,zero,r2
   440bc:	1884703a 	and	r2,r3,r2
   440c0:	1007883a 	mov	r3,r2
   440c4:	e0bfff17 	ldw	r2,-4(fp)
   440c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
   440cc:	e0bfff17 	ldw	r2,-4(fp)
   440d0:	10c0098b 	ldhu	r3,38(r2)
   440d4:	e0bfff17 	ldw	r2,-4(fp)
   440d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
   440dc:	e0bfff17 	ldw	r2,-4(fp)
   440e0:	10800f83 	ldbu	r2,62(r2)
   440e4:	10803fcc 	andi	r2,r2,255
   440e8:	10800820 	cmpeqi	r2,r2,32
   440ec:	1000b026 	beq	r2,zero,443b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
   440f0:	e0bfff17 	ldw	r2,-4(fp)
   440f4:	10c0098b 	ldhu	r3,38(r2)
   440f8:	008001b4 	movhi	r2,6
   440fc:	10938a84 	addi	r2,r2,20010
   44100:	1080000b 	ldhu	r2,0(r2)
   44104:	1884703a 	and	r2,r3,r2
   44108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
   4410c:	e0bfff17 	ldw	r2,-4(fp)
   44110:	108010c3 	ldbu	r2,67(r2)
   44114:	10803fcc 	andi	r2,r2,255
   44118:	108003cc 	andi	r2,r2,15
   4411c:	1004923a 	slli	r2,r2,8
   44120:	1007883a 	mov	r3,r2
   44124:	e0bffe0b 	ldhu	r2,-8(fp)
   44128:	1884b03a 	or	r2,r3,r2
   4412c:	1007883a 	mov	r3,r2
   44130:	e0bfff17 	ldw	r2,-4(fp)
   44134:	10801083 	ldbu	r2,66(r2)
   44138:	10803fcc 	andi	r2,r2,255
   4413c:	10803c0c 	andi	r2,r2,240
   44140:	1884b03a 	or	r2,r3,r2
   44144:	1007883a 	mov	r3,r2
   44148:	e0bfff17 	ldw	r2,-4(fp)
   4414c:	10801083 	ldbu	r2,66(r2)
   44150:	10803fcc 	andi	r2,r2,255
   44154:	1080030c 	andi	r2,r2,12
   44158:	100492ba 	slli	r2,r2,10
   4415c:	1884b03a 	or	r2,r3,r2
   44160:	1007883a 	mov	r3,r2
   44164:	e0bfff17 	ldw	r2,-4(fp)
   44168:	10801083 	ldbu	r2,66(r2)
   4416c:	10803fcc 	andi	r2,r2,255
   44170:	1080004c 	andi	r2,r2,1
   44174:	100490fa 	slli	r2,r2,3
   44178:	1884b03a 	or	r2,r3,r2
   4417c:	1007883a 	mov	r3,r2
   44180:	e0bfff17 	ldw	r2,-4(fp)
   44184:	108010c3 	ldbu	r2,67(r2)
   44188:	10803fcc 	andi	r2,r2,255
   4418c:	1080300c 	andi	r2,r2,192
   44190:	1004923a 	slli	r2,r2,8
   44194:	1884b03a 	or	r2,r3,r2
   44198:	1007883a 	mov	r3,r2
   4419c:	e0bfff17 	ldw	r2,-4(fp)
   441a0:	108010c3 	ldbu	r2,67(r2)
   441a4:	10803fcc 	andi	r2,r2,255
   441a8:	10800c0c 	andi	r2,r2,48
   441ac:	1005d13a 	srai	r2,r2,4
   441b0:	1884b03a 	or	r2,r3,r2
   441b4:	1007883a 	mov	r3,r2
   441b8:	e0bfff17 	ldw	r2,-4(fp)
   441bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
   441c0:	e0bfff17 	ldw	r2,-4(fp)
   441c4:	10801143 	ldbu	r2,69(r2)
   441c8:	10803fcc 	andi	r2,r2,255
   441cc:	1004923a 	slli	r2,r2,8
   441d0:	1007883a 	mov	r3,r2
   441d4:	e0bfff17 	ldw	r2,-4(fp)
   441d8:	10801103 	ldbu	r2,68(r2)
   441dc:	10803fcc 	andi	r2,r2,255
   441e0:	1884b03a 	or	r2,r3,r2
   441e4:	1007883a 	mov	r3,r2
   441e8:	e0bfff17 	ldw	r2,-4(fp)
   441ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
   441f0:	e0bfff17 	ldw	r2,-4(fp)
   441f4:	108011c3 	ldbu	r2,71(r2)
   441f8:	10803fcc 	andi	r2,r2,255
   441fc:	1004923a 	slli	r2,r2,8
   44200:	1007883a 	mov	r3,r2
   44204:	e0bfff17 	ldw	r2,-4(fp)
   44208:	10801183 	ldbu	r2,70(r2)
   4420c:	10803fcc 	andi	r2,r2,255
   44210:	1884b03a 	or	r2,r3,r2
   44214:	1007883a 	mov	r3,r2
   44218:	e0bfff17 	ldw	r2,-4(fp)
   4421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
   44220:	e0bfff17 	ldw	r2,-4(fp)
   44224:	10801243 	ldbu	r2,73(r2)
   44228:	10803fcc 	andi	r2,r2,255
   4422c:	1004923a 	slli	r2,r2,8
   44230:	1007883a 	mov	r3,r2
   44234:	e0bfff17 	ldw	r2,-4(fp)
   44238:	10801203 	ldbu	r2,72(r2)
   4423c:	10803fcc 	andi	r2,r2,255
   44240:	1884b03a 	or	r2,r3,r2
   44244:	1007883a 	mov	r3,r2
   44248:	e0bfff17 	ldw	r2,-4(fp)
   4424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
   44250:	e0bfff17 	ldw	r2,-4(fp)
   44254:	108012c3 	ldbu	r2,75(r2)
   44258:	10803fcc 	andi	r2,r2,255
   4425c:	1004923a 	slli	r2,r2,8
   44260:	1007883a 	mov	r3,r2
   44264:	e0bfff17 	ldw	r2,-4(fp)
   44268:	10801283 	ldbu	r2,74(r2)
   4426c:	10803fcc 	andi	r2,r2,255
   44270:	1884b03a 	or	r2,r3,r2
   44274:	1007883a 	mov	r3,r2
   44278:	e0bfff17 	ldw	r2,-4(fp)
   4427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
   44280:	e0bfff17 	ldw	r2,-4(fp)
   44284:	10801343 	ldbu	r2,77(r2)
   44288:	10803fcc 	andi	r2,r2,255
   4428c:	1004923a 	slli	r2,r2,8
   44290:	1007883a 	mov	r3,r2
   44294:	e0bfff17 	ldw	r2,-4(fp)
   44298:	10801303 	ldbu	r2,76(r2)
   4429c:	10803fcc 	andi	r2,r2,255
   442a0:	1884b03a 	or	r2,r3,r2
   442a4:	1007883a 	mov	r3,r2
   442a8:	e0bfff17 	ldw	r2,-4(fp)
   442ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
   442b0:	e0bfff17 	ldw	r2,-4(fp)
   442b4:	108013c3 	ldbu	r2,79(r2)
   442b8:	10803fcc 	andi	r2,r2,255
   442bc:	1004923a 	slli	r2,r2,8
   442c0:	1007883a 	mov	r3,r2
   442c4:	e0bfff17 	ldw	r2,-4(fp)
   442c8:	10801383 	ldbu	r2,78(r2)
   442cc:	10803fcc 	andi	r2,r2,255
   442d0:	1884b03a 	or	r2,r3,r2
   442d4:	1007883a 	mov	r3,r2
   442d8:	e0bfff17 	ldw	r2,-4(fp)
   442dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
   442e0:	e0bfff17 	ldw	r2,-4(fp)
   442e4:	10c0098b 	ldhu	r3,38(r2)
   442e8:	e0bfff17 	ldw	r2,-4(fp)
   442ec:	10800a0b 	ldhu	r2,40(r2)
   442f0:	18ffffcc 	andi	r3,r3,65535
   442f4:	10bfffcc 	andi	r2,r2,65535
   442f8:	18800e26 	beq	r3,r2,44334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
   442fc:	e0bfff17 	ldw	r2,-4(fp)
   44300:	1080098b 	ldhu	r2,38(r2)
   44304:	1007883a 	mov	r3,r2
   44308:	e0bfff17 	ldw	r2,-4(fp)
   4430c:	10800a0b 	ldhu	r2,40(r2)
   44310:	0084303a 	nor	r2,zero,r2
   44314:	1884703a 	and	r2,r3,r2
   44318:	1007883a 	mov	r3,r2
   4431c:	e0bfff17 	ldw	r2,-4(fp)
   44320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
   44324:	e0bfff17 	ldw	r2,-4(fp)
   44328:	10c0098b 	ldhu	r3,38(r2)
   4432c:	e0bfff17 	ldw	r2,-4(fp)
   44330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
   44334:	e0bfff17 	ldw	r2,-4(fp)
   44338:	10800d0b 	ldhu	r2,52(r2)
   4433c:	10bfffcc 	andi	r2,r2,65535
   44340:	10000726 	beq	r2,zero,44360 <_ZN7XBOXONE10readReportEv+0x364>
   44344:	e0bfff17 	ldw	r2,-4(fp)
   44348:	10800e0b 	ldhu	r2,56(r2)
   4434c:	10bfffcc 	andi	r2,r2,65535
   44350:	1000031e 	bne	r2,zero,44360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
   44354:	e0bfff17 	ldw	r2,-4(fp)
   44358:	00c00044 	movi	r3,1
   4435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
   44360:	e0bfff17 	ldw	r2,-4(fp)
   44364:	10c00d0b 	ldhu	r3,52(r2)
   44368:	e0bfff17 	ldw	r2,-4(fp)
   4436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
   44370:	e0bfff17 	ldw	r2,-4(fp)
   44374:	10800d8b 	ldhu	r2,54(r2)
   44378:	10bfffcc 	andi	r2,r2,65535
   4437c:	10000726 	beq	r2,zero,4439c <_ZN7XBOXONE10readReportEv+0x3a0>
   44380:	e0bfff17 	ldw	r2,-4(fp)
   44384:	10800e8b 	ldhu	r2,58(r2)
   44388:	10bfffcc 	andi	r2,r2,65535
   4438c:	1000031e 	bne	r2,zero,4439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
   44390:	e0bfff17 	ldw	r2,-4(fp)
   44394:	00c00044 	movi	r3,1
   44398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
   4439c:	e0bfff17 	ldw	r2,-4(fp)
   443a0:	10c00d8b 	ldhu	r3,54(r2)
   443a4:	e0bfff17 	ldw	r2,-4(fp)
   443a8:	10c00e8d 	sth	r3,58(r2)
   443ac:	00000106 	br	443b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
   443b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
   443b4:	e037883a 	mov	sp,fp
   443b8:	df000017 	ldw	fp,0(sp)
   443bc:	dec00104 	addi	sp,sp,4
   443c0:	f800283a 	ret

000443c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
   443c4:	defffd04 	addi	sp,sp,-12
   443c8:	df000215 	stw	fp,8(sp)
   443cc:	df000204 	addi	fp,sp,8
   443d0:	e13ffe15 	stw	r4,-8(fp)
   443d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
   443d8:	e0bfff17 	ldw	r2,-4(fp)
   443dc:	10800218 	cmpnei	r2,r2,8
   443e0:	1000031e 	bne	r2,zero,443f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
   443e4:	e0bffe17 	ldw	r2,-8(fp)
   443e8:	10800d0b 	ldhu	r2,52(r2)
   443ec:	00001306 	br	4443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
   443f0:	e0bfff17 	ldw	r2,-4(fp)
   443f4:	10800258 	cmpnei	r2,r2,9
   443f8:	1000031e 	bne	r2,zero,44408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
   443fc:	e0bffe17 	ldw	r2,-8(fp)
   44400:	10800d8b 	ldhu	r2,54(r2)
   44404:	00000d06 	br	4443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
   44408:	e0bffe17 	ldw	r2,-8(fp)
   4440c:	10c0098b 	ldhu	r3,38(r2)
   44410:	e0bfff17 	ldw	r2,-4(fp)
   44414:	10803fcc 	andi	r2,r2,255
   44418:	1089883a 	add	r4,r2,r2
   4441c:	008001b4 	movhi	r2,6
   44420:	10938284 	addi	r2,r2,19978
   44424:	2085883a 	add	r2,r4,r2
   44428:	1080000b 	ldhu	r2,0(r2)
   4442c:	1884703a 	and	r2,r3,r2
   44430:	10bfffcc 	andi	r2,r2,65535
   44434:	1004c03a 	cmpne	r2,r2,zero
   44438:	10803fcc 	andi	r2,r2,255
}
   4443c:	e037883a 	mov	sp,fp
   44440:	df000017 	ldw	fp,0(sp)
   44444:	dec00104 	addi	sp,sp,4
   44448:	f800283a 	ret

0004444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
   4444c:	defffc04 	addi	sp,sp,-16
   44450:	df000315 	stw	fp,12(sp)
   44454:	df000304 	addi	fp,sp,12
   44458:	e13ffe15 	stw	r4,-8(fp)
   4445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
   44460:	e0bfff17 	ldw	r2,-4(fp)
   44464:	10800218 	cmpnei	r2,r2,8
   44468:	10000a1e 	bne	r2,zero,44494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
   4446c:	e0bffe17 	ldw	r2,-8(fp)
   44470:	10800f03 	ldbu	r2,60(r2)
   44474:	10803fcc 	andi	r2,r2,255
   44478:	10000426 	beq	r2,zero,4448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
   4447c:	e0bffe17 	ldw	r2,-8(fp)
   44480:	10000f05 	stb	zero,60(r2)
                        return true;
   44484:	00800044 	movi	r2,1
   44488:	00002806 	br	4452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
   4448c:	0005883a 	mov	r2,zero
   44490:	00002606 	br	4452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
   44494:	e0bfff17 	ldw	r2,-4(fp)
   44498:	10800258 	cmpnei	r2,r2,9
   4449c:	10000a1e 	bne	r2,zero,444c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
   444a0:	e0bffe17 	ldw	r2,-8(fp)
   444a4:	10800f43 	ldbu	r2,61(r2)
   444a8:	10803fcc 	andi	r2,r2,255
   444ac:	10000426 	beq	r2,zero,444c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
   444b0:	e0bffe17 	ldw	r2,-8(fp)
   444b4:	10000f45 	stb	zero,61(r2)
                        return true;
   444b8:	00800044 	movi	r2,1
   444bc:	00001b06 	br	4452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
   444c0:	0005883a 	mov	r2,zero
   444c4:	00001906 	br	4452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
   444c8:	e0bfff17 	ldw	r2,-4(fp)
   444cc:	10803fcc 	andi	r2,r2,255
   444d0:	1087883a 	add	r3,r2,r2
   444d4:	008001b4 	movhi	r2,6
   444d8:	10938284 	addi	r2,r2,19978
   444dc:	1885883a 	add	r2,r3,r2
   444e0:	1080000b 	ldhu	r2,0(r2)
   444e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
   444e8:	e0bffe17 	ldw	r2,-8(fp)
   444ec:	10c00a8b 	ldhu	r3,42(r2)
   444f0:	e0bffd0b 	ldhu	r2,-12(fp)
   444f4:	1884703a 	and	r2,r3,r2
   444f8:	10bfffcc 	andi	r2,r2,65535
   444fc:	1004c03a 	cmpne	r2,r2,zero
   44500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
   44504:	e0bffe17 	ldw	r2,-8(fp)
   44508:	10800a8b 	ldhu	r2,42(r2)
   4450c:	1007883a 	mov	r3,r2
   44510:	e0bffd0b 	ldhu	r2,-12(fp)
   44514:	0084303a 	nor	r2,zero,r2
   44518:	1884703a 	and	r2,r3,r2
   4451c:	1007883a 	mov	r3,r2
   44520:	e0bffe17 	ldw	r2,-8(fp)
   44524:	10c00a8d 	sth	r3,42(r2)
        return click;
   44528:	e0bffd83 	ldbu	r2,-10(fp)
}
   4452c:	e037883a 	mov	sp,fp
   44530:	df000017 	ldw	fp,0(sp)
   44534:	dec00104 	addi	sp,sp,4
   44538:	f800283a 	ret

0004453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
   4453c:	defffd04 	addi	sp,sp,-12
   44540:	df000215 	stw	fp,8(sp)
   44544:	df000204 	addi	fp,sp,8
   44548:	e13ffe15 	stw	r4,-8(fp)
   4454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
   44550:	e0bfff17 	ldw	r2,-4(fp)
   44554:	e0fffe17 	ldw	r3,-8(fp)
   44558:	10800584 	addi	r2,r2,22
   4455c:	1085883a 	add	r2,r2,r2
   44560:	1885883a 	add	r2,r3,r2
   44564:	1080000b 	ldhu	r2,0(r2)
}
   44568:	e037883a 	mov	sp,fp
   4456c:	df000017 	ldw	fp,0(sp)
   44570:	dec00104 	addi	sp,sp,4
   44574:	f800283a 	ret

00044578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
   44578:	defff904 	addi	sp,sp,-28
   4457c:	dfc00615 	stw	ra,24(sp)
   44580:	df000515 	stw	fp,20(sp)
   44584:	df000504 	addi	fp,sp,20
   44588:	e13ffd15 	stw	r4,-12(fp)
   4458c:	e17ffe15 	stw	r5,-8(fp)
   44590:	3005883a 	mov	r2,r6
   44594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
   44598:	e0bffe17 	ldw	r2,-8(fp)
   4459c:	10c00084 	addi	r3,r2,2
   445a0:	e0bffd17 	ldw	r2,-12(fp)
   445a4:	10801f83 	ldbu	r2,126(r2)
   445a8:	11000044 	addi	r4,r2,1
   445ac:	200b883a 	mov	r5,r4
   445b0:	e13ffd17 	ldw	r4,-12(fp)
   445b4:	21401f85 	stb	r5,126(r4)
   445b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
   445bc:	e0bffd17 	ldw	r2,-12(fp)
   445c0:	10c00317 	ldw	r3,12(r2)
   445c4:	e0bffd17 	ldw	r2,-12(fp)
   445c8:	10800403 	ldbu	r2,16(r2)
   445cc:	11003fcc 	andi	r4,r2,255
   445d0:	e0bffd17 	ldw	r2,-12(fp)
   445d4:	10800503 	ldbu	r2,20(r2)
   445d8:	11403fcc 	andi	r5,r2,255
   445dc:	e1bfff0b 	ldhu	r6,-4(fp)
   445e0:	e0bffe17 	ldw	r2,-8(fp)
   445e4:	d8800015 	stw	r2,0(sp)
   445e8:	300f883a 	mov	r7,r6
   445ec:	280d883a 	mov	r6,r5
   445f0:	200b883a 	mov	r5,r4
   445f4:	1809883a 	mov	r4,r3
   445f8:	00412400 	call	41240 <_ZN3USB11outTransferEhhtPh>
   445fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
   44600:	e0bffc03 	ldbu	r2,-16(fp)
}
   44604:	e037883a 	mov	sp,fp
   44608:	dfc00117 	ldw	ra,4(sp)
   4460c:	df000017 	ldw	fp,0(sp)
   44610:	dec00204 	addi	sp,sp,8
   44614:	f800283a 	ret

00044618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
   44618:	defff904 	addi	sp,sp,-28
   4461c:	dfc00615 	stw	ra,24(sp)
   44620:	df000515 	stw	fp,20(sp)
   44624:	df000504 	addi	fp,sp,20
   44628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
   4462c:	00800244 	movi	r2,9
   44630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
   44634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
   44638:	00800244 	movi	r2,9
   4463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
   44640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
   44644:	008003c4 	movi	r2,15
   44648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
   4464c:	00800104 	movi	r2,4
   44650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
   44654:	00800104 	movi	r2,4
   44658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
   4465c:	00800804 	movi	r2,32
   44660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
   44664:	00800804 	movi	r2,32
   44668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
   4466c:	00bfe004 	movi	r2,-128
   44670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
   44674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
   44678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
   4467c:	01800344 	movi	r6,13
   44680:	e17ffb04 	addi	r5,fp,-20
   44684:	e13fff17 	ldw	r4,-4(fp)
   44688:	00445780 	call	44578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
   4468c:	e0bfff17 	ldw	r2,-4(fp)
   44690:	10800817 	ldw	r2,32(r2)
   44694:	10000326 	beq	r2,zero,446a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
   44698:	e0bfff17 	ldw	r2,-4(fp)
   4469c:	10800817 	ldw	r2,32(r2)
   446a0:	103ee83a 	callr	r2
}
   446a4:	0001883a 	nop
   446a8:	e037883a 	mov	sp,fp
   446ac:	dfc00117 	ldw	ra,4(sp)
   446b0:	df000017 	ldw	fp,0(sp)
   446b4:	dec00204 	addi	sp,sp,8
   446b8:	f800283a 	ret

000446bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
   446bc:	defff904 	addi	sp,sp,-28
   446c0:	dfc00615 	stw	ra,24(sp)
   446c4:	df000515 	stw	fp,20(sp)
   446c8:	df000504 	addi	fp,sp,20
   446cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
   446d0:	00800244 	movi	r2,9
   446d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
   446d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
   446dc:	00800244 	movi	r2,9
   446e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
   446e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
   446e8:	008003c4 	movi	r2,15
   446ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
   446f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
   446f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
   446f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
   446fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
   44700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
   44704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
   44708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
   4470c:	01800344 	movi	r6,13
   44710:	e17ffb04 	addi	r5,fp,-20
   44714:	e13fff17 	ldw	r4,-4(fp)
   44718:	00445780 	call	44578 <_ZN7XBOXONE11XboxCommandEPht>
}
   4471c:	0001883a 	nop
   44720:	e037883a 	mov	sp,fp
   44724:	dfc00117 	ldw	ra,4(sp)
   44728:	df000017 	ldw	fp,0(sp)
   4472c:	dec00204 	addi	sp,sp,8
   44730:	f800283a 	ret

00044734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
   44734:	defff504 	addi	sp,sp,-44
   44738:	dfc00a15 	stw	ra,40(sp)
   4473c:	df000915 	stw	fp,36(sp)
   44740:	df000904 	addi	fp,sp,36
   44744:	e13ffb15 	stw	r4,-20(fp)
   44748:	3009883a 	mov	r4,r6
   4474c:	3807883a 	mov	r3,r7
   44750:	e0800217 	ldw	r2,8(fp)
   44754:	e17ffc05 	stb	r5,-16(fp)
   44758:	e13ffd05 	stb	r4,-12(fp)
   4475c:	e0fffe05 	stb	r3,-8(fp)
   44760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
   44764:	00800244 	movi	r2,9
   44768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
   4476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
   44770:	00800244 	movi	r2,9
   44774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
   44778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
   4477c:	008003c4 	movi	r2,15
   44780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
   44784:	e0bffc03 	ldbu	r2,-16(fp)
   44788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
   4478c:	e0bffd03 	ldbu	r2,-12(fp)
   44790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
   44794:	e0bffe03 	ldbu	r2,-8(fp)
   44798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
   4479c:	e0bfff03 	ldbu	r2,-4(fp)
   447a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
   447a4:	00bfffc4 	movi	r2,-1
   447a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
   447ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
   447b0:	00bfffc4 	movi	r2,-1
   447b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
   447b8:	01800344 	movi	r6,13
   447bc:	e17ff704 	addi	r5,fp,-36
   447c0:	e13ffb17 	ldw	r4,-20(fp)
   447c4:	00445780 	call	44578 <_ZN7XBOXONE11XboxCommandEPht>
}
   447c8:	0001883a 	nop
   447cc:	e037883a 	mov	sp,fp
   447d0:	dfc00117 	ldw	ra,4(sp)
   447d4:	df000017 	ldw	fp,0(sp)
   447d8:	dec00204 	addi	sp,sp,8
   447dc:	f800283a 	ret

000447e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
   447e0:	defffe04 	addi	sp,sp,-8
   447e4:	df000115 	stw	fp,4(sp)
   447e8:	df000104 	addi	fp,sp,4
   447ec:	e13fff15 	stw	r4,-4(fp)
   447f0:	e0bfff17 	ldw	r2,-4(fp)
   447f4:	10000005 	stb	zero,0(r2)
   447f8:	e0bfff17 	ldw	r2,-4(fp)
   447fc:	10c00043 	ldbu	r3,1(r2)
   44800:	1806703a 	and	r3,r3,zero
   44804:	10c00045 	stb	r3,1(r2)
   44808:	10c00083 	ldbu	r3,2(r2)
   4480c:	1806703a 	and	r3,r3,zero
   44810:	10c00085 	stb	r3,2(r2)
   44814:	10c000c3 	ldbu	r3,3(r2)
   44818:	1806703a 	and	r3,r3,zero
   4481c:	10c000c5 	stb	r3,3(r2)
   44820:	10c00103 	ldbu	r3,4(r2)
   44824:	1806703a 	and	r3,r3,zero
   44828:	10c00105 	stb	r3,4(r2)
        };
   4482c:	0001883a 	nop
   44830:	e037883a 	mov	sp,fp
   44834:	df000017 	ldw	fp,0(sp)
   44838:	dec00104 	addi	sp,sp,4
   4483c:	f800283a 	ret

00044840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
   44840:	defffe04 	addi	sp,sp,-8
   44844:	df000115 	stw	fp,4(sp)
   44848:	df000104 	addi	fp,sp,4
   4484c:	e13fff15 	stw	r4,-4(fp)
   44850:	e0bfff17 	ldw	r2,-4(fp)
   44854:	10000015 	stw	zero,0(r2)
   44858:	e0bfff17 	ldw	r2,-4(fp)
   4485c:	10000105 	stb	zero,4(r2)
   44860:	e0bfff17 	ldw	r2,-4(fp)
   44864:	10000145 	stb	zero,5(r2)
        };
   44868:	0001883a 	nop
   4486c:	e037883a 	mov	sp,fp
   44870:	df000017 	ldw	fp,0(sp)
   44874:	dec00104 	addi	sp,sp,4
   44878:	f800283a 	ret

0004487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
   4487c:	defffd04 	addi	sp,sp,-12
   44880:	df000215 	stw	fp,8(sp)
   44884:	df000204 	addi	fp,sp,8
   44888:	e13ffe15 	stw	r4,-8(fp)
   4488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
   44890:	e0bfff17 	ldw	r2,-4(fp)
   44894:	10c00043 	ldbu	r3,1(r2)
   44898:	11000083 	ldbu	r4,2(r2)
   4489c:	2008923a 	slli	r4,r4,8
   448a0:	20c6b03a 	or	r3,r4,r3
   448a4:	110000c3 	ldbu	r4,3(r2)
   448a8:	2008943a 	slli	r4,r4,16
   448ac:	20c6b03a 	or	r3,r4,r3
   448b0:	10800103 	ldbu	r2,4(r2)
   448b4:	1004963a 	slli	r2,r2,24
   448b8:	10c4b03a 	or	r2,r2,r3
   448bc:	1007883a 	mov	r3,r2
   448c0:	e0bffe17 	ldw	r2,-8(fp)
   448c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
   448c8:	e0bfff17 	ldw	r2,-4(fp)
   448cc:	10c00003 	ldbu	r3,0(r2)
   448d0:	e0bffe17 	ldw	r2,-8(fp)
   448d4:	10c00145 	stb	r3,5(r2)
   448d8:	e0bffe17 	ldw	r2,-8(fp)
   448dc:	10c00143 	ldbu	r3,5(r2)
   448e0:	e0bffe17 	ldw	r2,-8(fp)
   448e4:	10c00105 	stb	r3,4(r2)
        };
   448e8:	0001883a 	nop
   448ec:	e037883a 	mov	sp,fp
   448f0:	df000017 	ldw	fp,0(sp)
   448f4:	dec00104 	addi	sp,sp,4
   448f8:	f800283a 	ret

000448fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
   448fc:	defffe04 	addi	sp,sp,-8
   44900:	df000115 	stw	fp,4(sp)
   44904:	df000104 	addi	fp,sp,4
   44908:	e13fff15 	stw	r4,-4(fp)
   4490c:	e0bfff17 	ldw	r2,-4(fp)
   44910:	10000015 	stw	zero,0(r2)
   44914:	e0bfff17 	ldw	r2,-4(fp)
   44918:	10000105 	stb	zero,4(r2)
   4491c:	e0bfff17 	ldw	r2,-4(fp)
   44920:	1000018d 	sth	zero,6(r2)
        };
   44924:	0001883a 	nop
   44928:	e037883a 	mov	sp,fp
   4492c:	df000017 	ldw	fp,0(sp)
   44930:	dec00104 	addi	sp,sp,4
   44934:	f800283a 	ret

00044938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
   44938:	defffd04 	addi	sp,sp,-12
   4493c:	df000215 	stw	fp,8(sp)
   44940:	df000204 	addi	fp,sp,8
   44944:	e13ffe15 	stw	r4,-8(fp)
   44948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
   4494c:	e0bfff17 	ldw	r2,-4(fp)
   44950:	10c00043 	ldbu	r3,1(r2)
   44954:	11000083 	ldbu	r4,2(r2)
   44958:	2008923a 	slli	r4,r4,8
   4495c:	20c6b03a 	or	r3,r4,r3
   44960:	110000c3 	ldbu	r4,3(r2)
   44964:	2008943a 	slli	r4,r4,16
   44968:	20c6b03a 	or	r3,r4,r3
   4496c:	10800103 	ldbu	r2,4(r2)
   44970:	1004963a 	slli	r2,r2,24
   44974:	10c4b03a 	or	r2,r2,r3
   44978:	1007883a 	mov	r3,r2
   4497c:	e0bffe17 	ldw	r2,-8(fp)
   44980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
   44984:	e0bffe17 	ldw	r2,-8(fp)
   44988:	1000018d 	sth	zero,6(r2)
        };
   4498c:	0001883a 	nop
   44990:	e037883a 	mov	sp,fp
   44994:	df000017 	ldw	fp,0(sp)
   44998:	dec00104 	addi	sp,sp,4
   4499c:	f800283a 	ret

000449a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
   449a0:	defffb04 	addi	sp,sp,-20
   449a4:	df000415 	stw	fp,16(sp)
   449a8:	df000404 	addi	fp,sp,16
   449ac:	e13ffc15 	stw	r4,-16(fp)
   449b0:	e17ffd15 	stw	r5,-12(fp)
   449b4:	e1bffe15 	stw	r6,-8(fp)
   449b8:	3805883a 	mov	r2,r7
   449bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
   449c0:	e0bffc17 	ldw	r2,-16(fp)
   449c4:	10800103 	ldbu	r2,4(r2)
   449c8:	10803fcc 	andi	r2,r2,255
   449cc:	10000326 	beq	r2,zero,449dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
   449d0:	10800060 	cmpeqi	r2,r2,1
   449d4:	10000a1e 	bne	r2,zero,44a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
   449d8:	00002906 	br	44a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
   449dc:	e0bffc17 	ldw	r2,-16(fp)
   449e0:	e0ffff0b 	ldhu	r3,-4(fp)
   449e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
   449e8:	e0bffc17 	ldw	r2,-16(fp)
   449ec:	10800103 	ldbu	r2,4(r2)
   449f0:	10800044 	addi	r2,r2,1
   449f4:	1007883a 	mov	r3,r2
   449f8:	e0bffc17 	ldw	r2,-16(fp)
   449fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
   44a00:	e0bffc17 	ldw	r2,-16(fp)
   44a04:	1080018b 	ldhu	r2,6(r2)
   44a08:	10bfffcc 	andi	r2,r2,65535
   44a0c:	10001626 	beq	r2,zero,44a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
   44a10:	e0bffe17 	ldw	r2,-8(fp)
   44a14:	1080000b 	ldhu	r2,0(r2)
   44a18:	10bfffcc 	andi	r2,r2,65535
   44a1c:	10001226 	beq	r2,zero,44a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
   44a20:	e0bffc17 	ldw	r2,-16(fp)
   44a24:	1080018b 	ldhu	r2,6(r2)
   44a28:	10bfffc4 	addi	r2,r2,-1
   44a2c:	1007883a 	mov	r3,r2
   44a30:	e0bffc17 	ldw	r2,-16(fp)
   44a34:	10c0018d 	sth	r3,6(r2)
   44a38:	e0bffd17 	ldw	r2,-12(fp)
   44a3c:	10800017 	ldw	r2,0(r2)
   44a40:	10c00044 	addi	r3,r2,1
   44a44:	e0bffd17 	ldw	r2,-12(fp)
   44a48:	10c00015 	stw	r3,0(r2)
   44a4c:	e0bffe17 	ldw	r2,-8(fp)
   44a50:	1080000b 	ldhu	r2,0(r2)
   44a54:	10bfffc4 	addi	r2,r2,-1
   44a58:	1007883a 	mov	r3,r2
   44a5c:	e0bffe17 	ldw	r2,-8(fp)
   44a60:	10c0000d 	sth	r3,0(r2)
   44a64:	003fe606 	br	44a00 <__alt_data_end+0xfffc4a00>

                                if(!countDown)
   44a68:	e0bffc17 	ldw	r2,-16(fp)
   44a6c:	1080018b 	ldhu	r2,6(r2)
   44a70:	10bfffcc 	andi	r2,r2,65535
   44a74:	1000021e 	bne	r2,zero,44a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
   44a78:	e0bffc17 	ldw	r2,-16(fp)
   44a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
   44a80:	e0bffc17 	ldw	r2,-16(fp)
   44a84:	1080018b 	ldhu	r2,6(r2)
   44a88:	10bfffcc 	andi	r2,r2,65535
   44a8c:	1005003a 	cmpeq	r2,r2,zero
        };
   44a90:	e037883a 	mov	sp,fp
   44a94:	df000017 	ldw	fp,0(sp)
   44a98:	dec00104 	addi	sp,sp,4
   44a9c:	f800283a 	ret

00044aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
   44aa0:	defffb04 	addi	sp,sp,-20
   44aa4:	df000415 	stw	fp,16(sp)
   44aa8:	df000404 	addi	fp,sp,16
   44aac:	e13ffc15 	stw	r4,-16(fp)
   44ab0:	2809883a 	mov	r4,r5
   44ab4:	3007883a 	mov	r3,r6
   44ab8:	3805883a 	mov	r2,r7
   44abc:	e13ffd05 	stb	r4,-12(fp)
   44ac0:	e0fffe05 	stb	r3,-8(fp)
   44ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
   44ac8:	0005883a 	mov	r2,zero
        }
   44acc:	e037883a 	mov	sp,fp
   44ad0:	df000017 	ldw	fp,0(sp)
   44ad4:	dec00104 	addi	sp,sp,4
   44ad8:	f800283a 	ret

00044adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
   44adc:	defffb04 	addi	sp,sp,-20
   44ae0:	df000415 	stw	fp,16(sp)
   44ae4:	df000404 	addi	fp,sp,16
   44ae8:	e13ffc15 	stw	r4,-16(fp)
   44aec:	2809883a 	mov	r4,r5
   44af0:	3007883a 	mov	r3,r6
   44af4:	3805883a 	mov	r2,r7
   44af8:	e13ffd05 	stb	r4,-12(fp)
   44afc:	e0fffe05 	stb	r3,-8(fp)
   44b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
   44b04:	0005883a 	mov	r2,zero
        }
   44b08:	e037883a 	mov	sp,fp
   44b0c:	df000017 	ldw	fp,0(sp)
   44b10:	dec00104 	addi	sp,sp,4
   44b14:	f800283a 	ret

00044b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
   44b18:	defffe04 	addi	sp,sp,-8
   44b1c:	df000115 	stw	fp,4(sp)
   44b20:	df000104 	addi	fp,sp,4
   44b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
   44b28:	0005883a 	mov	r2,zero
        }
   44b2c:	e037883a 	mov	sp,fp
   44b30:	df000017 	ldw	fp,0(sp)
   44b34:	dec00104 	addi	sp,sp,4
   44b38:	f800283a 	ret

00044b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
   44b3c:	defffe04 	addi	sp,sp,-8
   44b40:	df000115 	stw	fp,4(sp)
   44b44:	df000104 	addi	fp,sp,4
   44b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
   44b4c:	0005883a 	mov	r2,zero
        }
   44b50:	e037883a 	mov	sp,fp
   44b54:	df000017 	ldw	fp,0(sp)
   44b58:	dec00104 	addi	sp,sp,4
   44b5c:	f800283a 	ret

00044b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
   44b60:	defffe04 	addi	sp,sp,-8
   44b64:	df000115 	stw	fp,4(sp)
   44b68:	df000104 	addi	fp,sp,4
   44b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
   44b70:	0005883a 	mov	r2,zero
        }
   44b74:	e037883a 	mov	sp,fp
   44b78:	df000017 	ldw	fp,0(sp)
   44b7c:	dec00104 	addi	sp,sp,4
   44b80:	f800283a 	ret

00044b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
   44b84:	defffd04 	addi	sp,sp,-12
   44b88:	df000215 	stw	fp,8(sp)
   44b8c:	df000204 	addi	fp,sp,8
   44b90:	e13ffe15 	stw	r4,-8(fp)
   44b94:	2805883a 	mov	r2,r5
   44b98:	e0bfff05 	stb	r2,-4(fp)
                return;
   44b9c:	0001883a 	nop
        } // Note used for hubs only!
   44ba0:	e037883a 	mov	sp,fp
   44ba4:	df000017 	ldw	fp,0(sp)
   44ba8:	dec00104 	addi	sp,sp,4
   44bac:	f800283a 	ret

00044bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
   44bb0:	defffc04 	addi	sp,sp,-16
   44bb4:	df000315 	stw	fp,12(sp)
   44bb8:	df000304 	addi	fp,sp,12
   44bbc:	e13ffd15 	stw	r4,-12(fp)
   44bc0:	2807883a 	mov	r3,r5
   44bc4:	3005883a 	mov	r2,r6
   44bc8:	e0fffe0d 	sth	r3,-8(fp)
   44bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
   44bd0:	0005883a 	mov	r2,zero
        }
   44bd4:	e037883a 	mov	sp,fp
   44bd8:	df000017 	ldw	fp,0(sp)
   44bdc:	dec00104 	addi	sp,sp,4
   44be0:	f800283a 	ret

00044be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
   44be4:	defffd04 	addi	sp,sp,-12
   44be8:	df000215 	stw	fp,8(sp)
   44bec:	df000204 	addi	fp,sp,8
   44bf0:	e13ffe15 	stw	r4,-8(fp)
   44bf4:	2805883a 	mov	r2,r5
   44bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
   44bfc:	0005883a 	mov	r2,zero
        }
   44c00:	e037883a 	mov	sp,fp
   44c04:	df000017 	ldw	fp,0(sp)
   44c08:	dec00104 	addi	sp,sp,4
   44c0c:	f800283a 	ret

00044c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
   44c10:	defffd04 	addi	sp,sp,-12
   44c14:	df000215 	stw	fp,8(sp)
   44c18:	df000204 	addi	fp,sp,8
   44c1c:	e13ffe15 	stw	r4,-8(fp)
   44c20:	2805883a 	mov	r2,r5
   44c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
   44c28:	00800044 	movi	r2,1
        }
   44c2c:	e037883a 	mov	sp,fp
   44c30:	df000017 	ldw	fp,0(sp)
   44c34:	dec00104 	addi	sp,sp,4
   44c38:	f800283a 	ret

00044c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
   44c3c:	defffc04 	addi	sp,sp,-16
   44c40:	df000315 	stw	fp,12(sp)
   44c44:	df000304 	addi	fp,sp,12
   44c48:	e13ffe15 	stw	r4,-8(fp)
   44c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
   44c50:	e03ffd05 	stb	zero,-12(fp)
   44c54:	e0bffd03 	ldbu	r2,-12(fp)
   44c58:	10800428 	cmpgeui	r2,r2,16
   44c5c:	1000161e 	bne	r2,zero,44cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
   44c60:	e0bffd03 	ldbu	r2,-12(fp)
   44c64:	e0fffe17 	ldw	r3,-8(fp)
   44c68:	10800784 	addi	r2,r2,30
   44c6c:	1085883a 	add	r2,r2,r2
   44c70:	1085883a 	add	r2,r2,r2
   44c74:	1885883a 	add	r2,r3,r2
   44c78:	10800017 	ldw	r2,0(r2)
   44c7c:	10000a1e 	bne	r2,zero,44ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
   44c80:	e0bffd03 	ldbu	r2,-12(fp)
   44c84:	e0fffe17 	ldw	r3,-8(fp)
   44c88:	10800784 	addi	r2,r2,30
   44c8c:	1085883a 	add	r2,r2,r2
   44c90:	1085883a 	add	r2,r2,r2
   44c94:	1885883a 	add	r2,r3,r2
   44c98:	e0ffff17 	ldw	r3,-4(fp)
   44c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
   44ca0:	0005883a 	mov	r2,zero
   44ca4:	00000506 	br	44cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
   44ca8:	e0bffd03 	ldbu	r2,-12(fp)
   44cac:	10800044 	addi	r2,r2,1
   44cb0:	e0bffd05 	stb	r2,-12(fp)
   44cb4:	003fe706 	br	44c54 <__alt_data_end+0xfffc4c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
   44cb8:	00bff4c4 	movi	r2,-45
        };
   44cbc:	e037883a 	mov	sp,fp
   44cc0:	df000017 	ldw	fp,0(sp)
   44cc4:	dec00104 	addi	sp,sp,4
   44cc8:	f800283a 	ret

00044ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
   44ccc:	defffa04 	addi	sp,sp,-24
   44cd0:	df000515 	stw	fp,20(sp)
   44cd4:	df000504 	addi	fp,sp,20
   44cd8:	e13ffb15 	stw	r4,-20(fp)
   44cdc:	3009883a 	mov	r4,r6
   44ce0:	3807883a 	mov	r3,r7
   44ce4:	e0800117 	ldw	r2,4(fp)
   44ce8:	e17ffc05 	stb	r5,-16(fp)
   44cec:	e13ffd05 	stb	r4,-12(fp)
   44cf0:	e0fffe05 	stb	r3,-8(fp)
   44cf4:	e0bfff05 	stb	r2,-4(fp)
        };
   44cf8:	0001883a 	nop
   44cfc:	e037883a 	mov	sp,fp
   44d00:	df000017 	ldw	fp,0(sp)
   44d04:	dec00104 	addi	sp,sp,4
   44d08:	f800283a 	ret

00044d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
   44d0c:	defffe04 	addi	sp,sp,-8
   44d10:	df000115 	stw	fp,4(sp)
   44d14:	df000104 	addi	fp,sp,4
   44d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
   44d1c:	e0bfff17 	ldw	r2,-4(fp)
   44d20:	10800403 	ldbu	r2,16(r2)
        };
   44d24:	e037883a 	mov	sp,fp
   44d28:	df000017 	ldw	fp,0(sp)
   44d2c:	dec00104 	addi	sp,sp,4
   44d30:	f800283a 	ret

00044d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
   44d34:	defffe04 	addi	sp,sp,-8
   44d38:	df000115 	stw	fp,4(sp)
   44d3c:	df000104 	addi	fp,sp,4
   44d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
   44d44:	e0bfff17 	ldw	r2,-4(fp)
   44d48:	10800943 	ldbu	r2,37(r2)
        };
   44d4c:	e037883a 	mov	sp,fp
   44d50:	df000017 	ldw	fp,0(sp)
   44d54:	dec00104 	addi	sp,sp,4
   44d58:	f800283a 	ret

00044d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
   44d5c:	defffc04 	addi	sp,sp,-16
   44d60:	df000315 	stw	fp,12(sp)
   44d64:	df000304 	addi	fp,sp,12
   44d68:	e13ffd15 	stw	r4,-12(fp)
   44d6c:	2807883a 	mov	r3,r5
   44d70:	3005883a 	mov	r2,r6
   44d74:	e0fffe0d 	sth	r3,-8(fp)
   44d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
   44d7c:	e0bffe0b 	ldhu	r2,-8(fp)
   44d80:	108117a0 	cmpeqi	r2,r2,1118
   44d84:	10000f1e 	bne	r2,zero,44dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
   44d88:	e0bffe0b 	ldhu	r2,-8(fp)
   44d8c:	1081ce20 	cmpeqi	r2,r2,1848
   44d90:	10000c1e 	bne	r2,zero,44dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
   44d94:	e0bffe0b 	ldhu	r2,-8(fp)
   44d98:	10839be0 	cmpeqi	r2,r2,3695
   44d9c:	1000091e 	bne	r2,zero,44dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
   44da0:	e0bffe0b 	ldhu	r2,-8(fp)
   44da4:	1083c360 	cmpeqi	r2,r2,3853
   44da8:	1000061e 	bne	r2,zero,44dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
   44dac:	e0bffe0b 	ldhu	r2,-8(fp)
   44db0:	10854ca0 	cmpeqi	r2,r2,5426
   44db4:	1000031e 	bne	r2,zero,44dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
   44db8:	e0bffe0b 	ldhu	r2,-8(fp)
   44dbc:	10893198 	cmpnei	r2,r2,9414
   44dc0:	10002c1e 	bne	r2,zero,44e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
   44dc4:	e0bfff0b 	ldhu	r2,-4(fp)
   44dc8:	1080b460 	cmpeqi	r2,r2,721
   44dcc:	1000271e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
   44dd0:	e0bfff0b 	ldhu	r2,-4(fp)
   44dd4:	1080b760 	cmpeqi	r2,r2,733
   44dd8:	1000241e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44ddc:	e0bfff0b 	ldhu	r2,-4(fp)
   44de0:	1080b8e0 	cmpeqi	r2,r2,739
   44de4:	1000211e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44de8:	e0bfff0b 	ldhu	r2,-4(fp)
   44dec:	1080baa0 	cmpeqi	r2,r2,746
   44df0:	10001e1e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44df4:	e0bfff0b 	ldhu	r2,-4(fp)
   44df8:	10928060 	cmpeqi	r2,r2,18945
   44dfc:	10001b1e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
   44e00:	e0bfff0b 	ldhu	r2,-4(fp)
   44e04:	10804e60 	cmpeqi	r2,r2,313
   44e08:	1000181e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e0c:	e0bfff0b 	ldhu	r2,-4(fp)
   44e10:	108051a0 	cmpeqi	r2,r2,326
   44e14:	1000151e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e18:	e0bfff0b 	ldhu	r2,-4(fp)
   44e1c:	108019e0 	cmpeqi	r2,r2,103
   44e20:	1000121e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e24:	e0bfff0b 	ldhu	r2,-4(fp)
   44e28:	108280e0 	cmpeqi	r2,r2,2563
   44e2c:	10000f1e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
   44e30:	e0bfff0b 	ldhu	r2,-4(fp)
   44e34:	109506a0 	cmpeqi	r2,r2,21530
   44e38:	10000c1e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e3c:	e0bfff0b 	ldhu	r2,-4(fp)
   44e40:	10950aa0 	cmpeqi	r2,r2,21546
   44e44:	1000091e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e48:	e0bfff0b 	ldhu	r2,-4(fp)
   44e4c:	10950ea0 	cmpeqi	r2,r2,21562
   44e50:	1000061e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
   44e54:	e0bfff0b 	ldhu	r2,-4(fp)
   44e58:	1082c2a0 	cmpeqi	r2,r2,2826
   44e5c:	1000031e 	bne	r2,zero,44e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
   44e60:	e0bfff0b 	ldhu	r2,-4(fp)
   44e64:	1082c498 	cmpnei	r2,r2,2834
   44e68:	1000021e 	bne	r2,zero,44e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
   44e6c:	00800044 	movi	r2,1
   44e70:	00000106 	br	44e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
   44e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
   44e78:	e037883a 	mov	sp,fp
   44e7c:	df000017 	ldw	fp,0(sp)
   44e80:	dec00104 	addi	sp,sp,4
   44e84:	f800283a 	ret

00044e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
   44e88:	defffe04 	addi	sp,sp,-8
   44e8c:	df000115 	stw	fp,4(sp)
   44e90:	df000104 	addi	fp,sp,4
   44e94:	e13fff15 	stw	r4,-4(fp)
   44e98:	008001b4 	movhi	r2,6
   44e9c:	1093a704 	addi	r2,r2,20124
   44ea0:	e0ffff17 	ldw	r3,-4(fp)
   44ea4:	18800015 	stw	r2,0(r3)
   44ea8:	0001883a 	nop
   44eac:	e037883a 	mov	sp,fp
   44eb0:	df000017 	ldw	fp,0(sp)
   44eb4:	dec00104 	addi	sp,sp,4
   44eb8:	f800283a 	ret

00044ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
   44ebc:	defffe04 	addi	sp,sp,-8
   44ec0:	df000115 	stw	fp,4(sp)
   44ec4:	df000104 	addi	fp,sp,4
   44ec8:	e13fff15 	stw	r4,-4(fp)
   44ecc:	008001b4 	movhi	r2,6
   44ed0:	1093a104 	addi	r2,r2,20100
   44ed4:	e0ffff17 	ldw	r3,-4(fp)
   44ed8:	18800015 	stw	r2,0(r3)
   44edc:	0001883a 	nop
   44ee0:	e037883a 	mov	sp,fp
   44ee4:	df000017 	ldw	fp,0(sp)
   44ee8:	dec00104 	addi	sp,sp,4
   44eec:	f800283a 	ret

00044ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
   44ef0:	defffe04 	addi	sp,sp,-8
   44ef4:	df000115 	stw	fp,4(sp)
   44ef8:	df000104 	addi	fp,sp,4
   44efc:	e13fff15 	stw	r4,-4(fp)
   44f00:	008001b4 	movhi	r2,6
   44f04:	1093a404 	addi	r2,r2,20112
   44f08:	e0ffff17 	ldw	r3,-4(fp)
   44f0c:	18800015 	stw	r2,0(r3)
   44f10:	0001883a 	nop
   44f14:	e037883a 	mov	sp,fp
   44f18:	df000017 	ldw	fp,0(sp)
   44f1c:	dec00104 	addi	sp,sp,4
   44f20:	f800283a 	ret

00044f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
   44f24:	defffc04 	addi	sp,sp,-16
   44f28:	dfc00315 	stw	ra,12(sp)
   44f2c:	df000215 	stw	fp,8(sp)
   44f30:	df000204 	addi	fp,sp,8
   44f34:	e13ffe15 	stw	r4,-8(fp)
   44f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
   44f3c:	e0bffe17 	ldw	r2,-8(fp)
   44f40:	1009883a 	mov	r4,r2
   44f44:	0044ef00 	call	44ef0 <_ZN13USBReadParserC1Ev>
   44f48:	008001b4 	movhi	r2,6
   44f4c:	10939e04 	addi	r2,r2,20088
   44f50:	e0fffe17 	ldw	r3,-8(fp)
   44f54:	18800015 	stw	r2,0(r3)
   44f58:	e0bffe17 	ldw	r2,-8(fp)
   44f5c:	e0ffff17 	ldw	r3,-4(fp)
   44f60:	10c00115 	stw	r3,4(r2)
   44f64:	e0bffe17 	ldw	r2,-8(fp)
   44f68:	10800204 	addi	r2,r2,8
   44f6c:	1009883a 	mov	r4,r2
   44f70:	00447e00 	call	447e0 <_ZN16MultiValueBufferC1Ev>
   44f74:	e0bffe17 	ldw	r2,-8(fp)
   44f78:	10800404 	addi	r2,r2,16
   44f7c:	1009883a 	mov	r4,r2
   44f80:	00448400 	call	44840 <_ZN20MultiByteValueParserC1Ev>
   44f84:	e0bffe17 	ldw	r2,-8(fp)
   44f88:	10800604 	addi	r2,r2,24
   44f8c:	1009883a 	mov	r4,r2
   44f90:	00448fc0 	call	448fc <_ZN11ByteSkipperC1Ev>
   44f94:	e0bffe17 	ldw	r2,-8(fp)
   44f98:	10000c05 	stb	zero,48(r2)
   44f9c:	e0bffe17 	ldw	r2,-8(fp)
   44fa0:	10000c45 	stb	zero,49(r2)
   44fa4:	e0bffe17 	ldw	r2,-8(fp)
   44fa8:	10000c85 	stb	zero,50(r2)
   44fac:	e0bffe17 	ldw	r2,-8(fp)
   44fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
   44fb4:	e0bffe17 	ldw	r2,-8(fp)
   44fb8:	10c00804 	addi	r3,r2,32
   44fbc:	e0bffe17 	ldw	r2,-8(fp)
   44fc0:	19803fcc 	andi	r6,r3,255
   44fc4:	11000243 	ldbu	r4,9(r2)
   44fc8:	2008703a 	and	r4,r4,zero
   44fcc:	200b883a 	mov	r5,r4
   44fd0:	3009883a 	mov	r4,r6
   44fd4:	2908b03a 	or	r4,r5,r4
   44fd8:	11000245 	stb	r4,9(r2)
   44fdc:	1808d23a 	srli	r4,r3,8
   44fe0:	21803fcc 	andi	r6,r4,255
   44fe4:	11000283 	ldbu	r4,10(r2)
   44fe8:	2008703a 	and	r4,r4,zero
   44fec:	200b883a 	mov	r5,r4
   44ff0:	3009883a 	mov	r4,r6
   44ff4:	2908b03a 	or	r4,r5,r4
   44ff8:	11000285 	stb	r4,10(r2)
   44ffc:	1808d43a 	srli	r4,r3,16
   45000:	21803fcc 	andi	r6,r4,255
   45004:	110002c3 	ldbu	r4,11(r2)
   45008:	2008703a 	and	r4,r4,zero
   4500c:	200b883a 	mov	r5,r4
   45010:	3009883a 	mov	r4,r6
   45014:	2908b03a 	or	r4,r5,r4
   45018:	110002c5 	stb	r4,11(r2)
   4501c:	180ad63a 	srli	r5,r3,24
   45020:	10c00303 	ldbu	r3,12(r2)
   45024:	1806703a 	and	r3,r3,zero
   45028:	1809883a 	mov	r4,r3
   4502c:	2807883a 	mov	r3,r5
   45030:	20c6b03a 	or	r3,r4,r3
   45034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
   45038:	e0bffe17 	ldw	r2,-8(fp)
   4503c:	10c00404 	addi	r3,r2,16
   45040:	e0bffe17 	ldw	r2,-8(fp)
   45044:	10800204 	addi	r2,r2,8
   45048:	100b883a 	mov	r5,r2
   4504c:	1809883a 	mov	r4,r3
   45050:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
   45054:	e0bffe17 	ldw	r2,-8(fp)
   45058:	10c00604 	addi	r3,r2,24
   4505c:	e0bffe17 	ldw	r2,-8(fp)
   45060:	10800204 	addi	r2,r2,8
   45064:	100b883a 	mov	r5,r2
   45068:	1809883a 	mov	r4,r3
   4506c:	00449380 	call	44938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
   45070:	0001883a 	nop
   45074:	e037883a 	mov	sp,fp
   45078:	dfc00117 	ldw	ra,4(sp)
   4507c:	df000017 	ldw	fp,0(sp)
   45080:	dec00204 	addi	sp,sp,8
   45084:	f800283a 	ret

00045088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
   45088:	defff804 	addi	sp,sp,-32
   4508c:	dfc00715 	stw	ra,28(sp)
   45090:	df000615 	stw	fp,24(sp)
   45094:	df000604 	addi	fp,sp,24
   45098:	e13ffc15 	stw	r4,-16(fp)
   4509c:	2805883a 	mov	r2,r5
   450a0:	e1bffe15 	stw	r6,-8(fp)
   450a4:	e1ffff15 	stw	r7,-4(fp)
   450a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
   450ac:	e0bffd0b 	ldhu	r2,-12(fp)
   450b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
   450b4:	e0bffe17 	ldw	r2,-8(fp)
   450b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
   450bc:	e0bffa0b 	ldhu	r2,-24(fp)
   450c0:	10bfffcc 	andi	r2,r2,65535
   450c4:	10000a26 	beq	r2,zero,450f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
   450c8:	e0bffb04 	addi	r2,fp,-20
   450cc:	e1bffa04 	addi	r6,fp,-24
   450d0:	100b883a 	mov	r5,r2
   450d4:	e13ffc17 	ldw	r4,-16(fp)
   450d8:	00451040 	call	45104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
   450dc:	1080005c 	xori	r2,r2,1
   450e0:	10803fcc 	andi	r2,r2,255
   450e4:	1000011e 	bne	r2,zero,450ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
   450e8:	003ff406 	br	450bc <__alt_data_end+0xfffc50bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
   450ec:	0001883a 	nop
}
   450f0:	e037883a 	mov	sp,fp
   450f4:	dfc00117 	ldw	ra,4(sp)
   450f8:	df000017 	ldw	fp,0(sp)
   450fc:	dec00204 	addi	sp,sp,8
   45100:	f800283a 	ret

00045104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
   45104:	defff604 	addi	sp,sp,-40
   45108:	dfc00915 	stw	ra,36(sp)
   4510c:	df000815 	stw	fp,32(sp)
   45110:	df000804 	addi	fp,sp,32
   45114:	e13ffc15 	stw	r4,-16(fp)
   45118:	e17ffd15 	stw	r5,-12(fp)
   4511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
   45120:	e0bffc17 	ldw	r2,-16(fp)
   45124:	10800804 	addi	r2,r2,32
   45128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
   4512c:	e0bffc17 	ldw	r2,-16(fp)
   45130:	10800804 	addi	r2,r2,32
   45134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
   45138:	e0bffc17 	ldw	r2,-16(fp)
   4513c:	10800c03 	ldbu	r2,48(r2)
   45140:	10803fcc 	andi	r2,r2,255
   45144:	10c00168 	cmpgeui	r3,r2,5
   45148:	1801141e 	bne	r3,zero,4559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
   4514c:	100690ba 	slli	r3,r2,2
   45150:	00800134 	movhi	r2,4
   45154:	10945904 	addi	r2,r2,20836
   45158:	1885883a 	add	r2,r3,r2
   4515c:	10800017 	ldw	r2,0(r2)
   45160:	1000683a 	jmp	r2
   45164:	00045178 	rdprs	zero,zero,4421
   45168:	000451ac 	andhi	zero,zero,4422
   4516c:	00045234 	movhi	zero,4424
   45170:	000452c8 	cmpgei	zero,zero,4427
   45174:	00045334 	movhi	zero,4428
                case 0:
                        theBuffer.valueSize = 2;
   45178:	e0bffc17 	ldw	r2,-16(fp)
   4517c:	00c00084 	movi	r3,2
   45180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
   45184:	e0bffc17 	ldw	r2,-16(fp)
   45188:	10c00404 	addi	r3,r2,16
   4518c:	e0bffc17 	ldw	r2,-16(fp)
   45190:	10800204 	addi	r2,r2,8
   45194:	100b883a 	mov	r5,r2
   45198:	1809883a 	mov	r4,r3
   4519c:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
   451a0:	e0bffc17 	ldw	r2,-16(fp)
   451a4:	00c00044 	movi	r3,1
   451a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
   451ac:	e0bffc17 	ldw	r2,-16(fp)
   451b0:	10800404 	addi	r2,r2,16
   451b4:	e1bffe17 	ldw	r6,-8(fp)
   451b8:	e17ffd17 	ldw	r5,-12(fp)
   451bc:	1009883a 	mov	r4,r2
   451c0:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   451c4:	1080005c 	xori	r2,r2,1
   451c8:	10803fcc 	andi	r2,r2,255
   451cc:	10000226 	beq	r2,zero,451d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
   451d0:	0005883a 	mov	r2,zero
   451d4:	0000f206 	br	455a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
   451d8:	e0bffc17 	ldw	r2,-16(fp)
   451dc:	10c00217 	ldw	r3,8(r2)
   451e0:	1806d23a 	srli	r3,r3,8
   451e4:	10800317 	ldw	r2,12(r2)
   451e8:	10803fcc 	andi	r2,r2,255
   451ec:	1004963a 	slli	r2,r2,24
   451f0:	10c4b03a 	or	r2,r2,r3
   451f4:	10c00003 	ldbu	r3,0(r2)
   451f8:	e0bffc17 	ldw	r2,-16(fp)
   451fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
   45200:	e0bffc17 	ldw	r2,-16(fp)
   45204:	10c00217 	ldw	r3,8(r2)
   45208:	1806d23a 	srli	r3,r3,8
   4520c:	10800317 	ldw	r2,12(r2)
   45210:	10803fcc 	andi	r2,r2,255
   45214:	1004963a 	slli	r2,r2,24
   45218:	10c4b03a 	or	r2,r2,r3
   4521c:	10c00043 	ldbu	r3,1(r2)
   45220:	e0bffc17 	ldw	r2,-16(fp)
   45224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
   45228:	e0bffc17 	ldw	r2,-16(fp)
   4522c:	00c00084 	movi	r3,2
   45230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
   45234:	e0bffc17 	ldw	r2,-16(fp)
   45238:	10800804 	addi	r2,r2,32
   4523c:	10c00084 	addi	r3,r2,2
   45240:	e0bffc17 	ldw	r2,-16(fp)
   45244:	19803fcc 	andi	r6,r3,255
   45248:	11000243 	ldbu	r4,9(r2)
   4524c:	2008703a 	and	r4,r4,zero
   45250:	200b883a 	mov	r5,r4
   45254:	3009883a 	mov	r4,r6
   45258:	2908b03a 	or	r4,r5,r4
   4525c:	11000245 	stb	r4,9(r2)
   45260:	1808d23a 	srli	r4,r3,8
   45264:	21803fcc 	andi	r6,r4,255
   45268:	11000283 	ldbu	r4,10(r2)
   4526c:	2008703a 	and	r4,r4,zero
   45270:	200b883a 	mov	r5,r4
   45274:	3009883a 	mov	r4,r6
   45278:	2908b03a 	or	r4,r5,r4
   4527c:	11000285 	stb	r4,10(r2)
   45280:	1808d43a 	srli	r4,r3,16
   45284:	21803fcc 	andi	r6,r4,255
   45288:	110002c3 	ldbu	r4,11(r2)
   4528c:	2008703a 	and	r4,r4,zero
   45290:	200b883a 	mov	r5,r4
   45294:	3009883a 	mov	r4,r6
   45298:	2908b03a 	or	r4,r5,r4
   4529c:	110002c5 	stb	r4,11(r2)
   452a0:	180ad63a 	srli	r5,r3,24
   452a4:	10c00303 	ldbu	r3,12(r2)
   452a8:	1806703a 	and	r3,r3,zero
   452ac:	1809883a 	mov	r4,r3
   452b0:	2807883a 	mov	r3,r5
   452b4:	20c6b03a 	or	r3,r4,r3
   452b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
   452bc:	e0bffc17 	ldw	r2,-16(fp)
   452c0:	00c000c4 	movi	r3,3
   452c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
   452c8:	e0bffc17 	ldw	r2,-16(fp)
   452cc:	10800c83 	ldbu	r2,50(r2)
   452d0:	10803fcc 	andi	r2,r2,255
   452d4:	10c00120 	cmpeqi	r3,r2,4
   452d8:	1800021e 	bne	r3,zero,452e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
   452dc:	10800148 	cmpgei	r2,r2,5
   452e0:	00000306 	br	452f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
   452e4:	e0bffc17 	ldw	r2,-16(fp)
   452e8:	10000cc5 	stb	zero,51(r2)
                                        break;
   452ec:	00000106 	br	452f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
   452f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
   452f4:	e0bffc17 	ldw	r2,-16(fp)
   452f8:	10800c43 	ldbu	r2,49(r2)
   452fc:	10bfff84 	addi	r2,r2,-2
   45300:	1007883a 	mov	r3,r2
   45304:	e0bffc17 	ldw	r2,-16(fp)
   45308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
   4530c:	e0bffc17 	ldw	r2,-16(fp)
   45310:	10c00404 	addi	r3,r2,16
   45314:	e0bffc17 	ldw	r2,-16(fp)
   45318:	10800204 	addi	r2,r2,8
   4531c:	100b883a 	mov	r5,r2
   45320:	1809883a 	mov	r4,r3
   45324:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
   45328:	e0bffc17 	ldw	r2,-16(fp)
   4532c:	00c00104 	movi	r3,4
   45330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
   45334:	e0bffc17 	ldw	r2,-16(fp)
   45338:	10800c83 	ldbu	r2,50(r2)
   4533c:	10803fcc 	andi	r2,r2,255
   45340:	10c00120 	cmpeqi	r3,r2,4
   45344:	1800141e 	bne	r3,zero,45398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
   45348:	10c00160 	cmpeqi	r3,r2,5
   4534c:	1800311e 	bne	r3,zero,45414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
   45350:	108000a0 	cmpeqi	r2,r2,2
   45354:	10005a26 	beq	r2,zero,454c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
   45358:	e0bffc17 	ldw	r2,-16(fp)
   4535c:	10800404 	addi	r2,r2,16
   45360:	e1bffe17 	ldw	r6,-8(fp)
   45364:	e17ffd17 	ldw	r5,-12(fp)
   45368:	1009883a 	mov	r4,r2
   4536c:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   45370:	1080005c 	xori	r2,r2,1
   45374:	10803fcc 	andi	r2,r2,255
   45378:	10000226 	beq	r2,zero,45384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
   4537c:	0005883a 	mov	r2,zero
   45380:	00008706 	br	455a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
   45384:	e0bffa17 	ldw	r2,-24(fp)
   45388:	10c00143 	ldbu	r3,5(r2)
   4538c:	e0bffc17 	ldw	r2,-16(fp)
   45390:	10c00d05 	stb	r3,52(r2)
                                        break;
   45394:	00005e06 	br	45510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
   45398:	e0bffc17 	ldw	r2,-16(fp)
   4539c:	10800404 	addi	r2,r2,16
   453a0:	e1bffe17 	ldw	r6,-8(fp)
   453a4:	e17ffd17 	ldw	r5,-12(fp)
   453a8:	1009883a 	mov	r4,r2
   453ac:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   453b0:	1080005c 	xori	r2,r2,1
   453b4:	10803fcc 	andi	r2,r2,255
   453b8:	10000226 	beq	r2,zero,453c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
   453bc:	0005883a 	mov	r2,zero
   453c0:	00007706 	br	455a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
   453c4:	e0bffc17 	ldw	r2,-16(fp)
   453c8:	10800e03 	ldbu	r2,56(r2)
   453cc:	10803fcc 	andi	r2,r2,255
   453d0:	10004c1e 	bne	r2,zero,45504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
   453d4:	e0bffc17 	ldw	r2,-16(fp)
   453d8:	00c00044 	movi	r3,1
   453dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
   453e0:	e0bffb17 	ldw	r2,-20(fp)
   453e4:	10c00083 	ldbu	r3,2(r2)
   453e8:	e0bffc17 	ldw	r2,-16(fp)
   453ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
   453f0:	e0bffb17 	ldw	r2,-20(fp)
   453f4:	10c000c3 	ldbu	r3,3(r2)
   453f8:	e0bffc17 	ldw	r2,-16(fp)
   453fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
   45400:	e0bffb17 	ldw	r2,-20(fp)
   45404:	10c001c3 	ldbu	r3,7(r2)
   45408:	e0bffc17 	ldw	r2,-16(fp)
   4540c:	10c00d45 	stb	r3,53(r2)
                                        break;
   45410:	00003f06 	br	45510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
   45414:	e0bffc17 	ldw	r2,-16(fp)
   45418:	10800404 	addi	r2,r2,16
   4541c:	e1bffe17 	ldw	r6,-8(fp)
   45420:	e17ffd17 	ldw	r5,-12(fp)
   45424:	1009883a 	mov	r4,r2
   45428:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   4542c:	1080005c 	xori	r2,r2,1
   45430:	10803fcc 	andi	r2,r2,255
   45434:	10000226 	beq	r2,zero,45440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
   45438:	0005883a 	mov	r2,zero
   4543c:	00005806 	br	455a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
   45440:	e0bffc17 	ldw	r2,-16(fp)
   45444:	10800cc3 	ldbu	r2,51(r2)
   45448:	10803fcc 	andi	r2,r2,255
   4544c:	10002f26 	beq	r2,zero,4550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
   45450:	e0bffc17 	ldw	r2,-16(fp)
   45454:	10800117 	ldw	r2,4(r2)
   45458:	10002c26 	beq	r2,zero,4550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
   4545c:	e0bffc17 	ldw	r2,-16(fp)
   45460:	10800117 	ldw	r2,4(r2)
   45464:	10800017 	ldw	r2,0(r2)
   45468:	10800017 	ldw	r2,0(r2)
   4546c:	e0fffc17 	ldw	r3,-16(fp)
   45470:	1a000117 	ldw	r8,4(r3)
   45474:	e0fffc17 	ldw	r3,-16(fp)
   45478:	18c00d03 	ldbu	r3,52(r3)
   4547c:	19403fcc 	andi	r5,r3,255
   45480:	e0fffc17 	ldw	r3,-16(fp)
   45484:	18c00d83 	ldbu	r3,54(r3)
   45488:	19803fcc 	andi	r6,r3,255
   4548c:	e0fffc17 	ldw	r3,-16(fp)
   45490:	18c00dc3 	ldbu	r3,55(r3)
   45494:	19c03fcc 	andi	r7,r3,255
   45498:	e0fffc17 	ldw	r3,-16(fp)
   4549c:	18c00d43 	ldbu	r3,53(r3)
   454a0:	18c03fcc 	andi	r3,r3,255
   454a4:	e13ffc17 	ldw	r4,-16(fp)
   454a8:	21000804 	addi	r4,r4,32
   454ac:	d9000115 	stw	r4,4(sp)
   454b0:	d8c00015 	stw	r3,0(sp)
   454b4:	4009883a 	mov	r4,r8
   454b8:	103ee83a 	callr	r2
                                        break;
   454bc:	00001306 	br	4550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
   454c0:	e0bffc17 	ldw	r2,-16(fp)
   454c4:	10c00604 	addi	r3,r2,24
   454c8:	e0bffc17 	ldw	r2,-16(fp)
   454cc:	10800c43 	ldbu	r2,49(r2)
   454d0:	10803fcc 	andi	r2,r2,255
   454d4:	10bfff84 	addi	r2,r2,-2
   454d8:	10bfffcc 	andi	r2,r2,65535
   454dc:	100f883a 	mov	r7,r2
   454e0:	e1bffe17 	ldw	r6,-8(fp)
   454e4:	e17ffd17 	ldw	r5,-12(fp)
   454e8:	1809883a 	mov	r4,r3
   454ec:	00449a00 	call	449a0 <_ZN11ByteSkipper4SkipEPPhPtt>
   454f0:	1080005c 	xori	r2,r2,1
   454f4:	10803fcc 	andi	r2,r2,255
   454f8:	10000526 	beq	r2,zero,45510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
   454fc:	0005883a 	mov	r2,zero
   45500:	00002706 	br	455a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
   45504:	0001883a 	nop
   45508:	00000106 	br	45510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
   4550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
   45510:	e0bffc17 	ldw	r2,-16(fp)
   45514:	10c00804 	addi	r3,r2,32
   45518:	e0bffc17 	ldw	r2,-16(fp)
   4551c:	19803fcc 	andi	r6,r3,255
   45520:	11000243 	ldbu	r4,9(r2)
   45524:	2008703a 	and	r4,r4,zero
   45528:	200b883a 	mov	r5,r4
   4552c:	3009883a 	mov	r4,r6
   45530:	2908b03a 	or	r4,r5,r4
   45534:	11000245 	stb	r4,9(r2)
   45538:	1808d23a 	srli	r4,r3,8
   4553c:	21803fcc 	andi	r6,r4,255
   45540:	11000283 	ldbu	r4,10(r2)
   45544:	2008703a 	and	r4,r4,zero
   45548:	200b883a 	mov	r5,r4
   4554c:	3009883a 	mov	r4,r6
   45550:	2908b03a 	or	r4,r5,r4
   45554:	11000285 	stb	r4,10(r2)
   45558:	1808d43a 	srli	r4,r3,16
   4555c:	21803fcc 	andi	r6,r4,255
   45560:	110002c3 	ldbu	r4,11(r2)
   45564:	2008703a 	and	r4,r4,zero
   45568:	200b883a 	mov	r5,r4
   4556c:	3009883a 	mov	r4,r6
   45570:	2908b03a 	or	r4,r5,r4
   45574:	110002c5 	stb	r4,11(r2)
   45578:	180ad63a 	srli	r5,r3,24
   4557c:	10c00303 	ldbu	r3,12(r2)
   45580:	1806703a 	and	r3,r3,zero
   45584:	1809883a 	mov	r4,r3
   45588:	2807883a 	mov	r3,r5
   4558c:	20c6b03a 	or	r3,r4,r3
   45590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
   45594:	e0bffc17 	ldw	r2,-16(fp)
   45598:	10000c05 	stb	zero,48(r2)
        }
        return true;
   4559c:	00800044 	movi	r2,1
}
   455a0:	e037883a 	mov	sp,fp
   455a4:	dfc00117 	ldw	ra,4(sp)
   455a8:	df000017 	ldw	fp,0(sp)
   455ac:	dec00204 	addi	sp,sp,8
   455b0:	f800283a 	ret

000455b4 <_Z8set_notehhh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
   455b4:	defffb04 	addi	sp,sp,-20
   455b8:	df000415 	stw	fp,16(sp)
   455bc:	df000404 	addi	fp,sp,16
   455c0:	2807883a 	mov	r3,r5
   455c4:	3005883a 	mov	r2,r6
   455c8:	e13ffd05 	stb	r4,-12(fp)
   455cc:	e0fffe05 	stb	r3,-8(fp)
   455d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(note > 0x7F) {
   455d4:	e0bffe03 	ldbu	r2,-8(fp)
   455d8:	10803fcc 	andi	r2,r2,255
   455dc:	1080201c 	xori	r2,r2,128
   455e0:	10bfe004 	addi	r2,r2,-128
   455e4:	10001816 	blt	r2,zero,45648 <_Z8set_notehhh+0x94>
		return;
	}

	switch (channel) {
   455e8:	e0bffd03 	ldbu	r2,-12(fp)
   455ec:	10000126 	beq	r2,zero,455f4 <_Z8set_notehhh+0x40>
				set_val = 0x80 + vel;
			}
			synth->KEY[note] = set_val;
			break;
		default:
			break;
   455f0:	00001606 	br	4564c <_Z8set_notehhh+0x98>
		return;
	}

	switch (channel) {
		case 0:
			if(vel == 0x00) {
   455f4:	e0bfff03 	ldbu	r2,-4(fp)
   455f8:	1000081e 	bne	r2,zero,4561c <_Z8set_notehhh+0x68>
				set_val = synth->KEY[note];
   455fc:	d0f23f17 	ldw	r3,-14084(gp)
   45600:	e0bffe03 	ldbu	r2,-8(fp)
   45604:	1085883a 	add	r2,r2,r2
   45608:	1085883a 	add	r2,r2,r2
   4560c:	1885883a 	add	r2,r3,r2
   45610:	10800017 	ldw	r2,0(r2)
   45614:	e0bffc15 	stw	r2,-16(fp)
   45618:	00000306 	br	45628 <_Z8set_notehhh+0x74>
			}
			else {
				set_val = 0x80 + vel;
   4561c:	e0bfff03 	ldbu	r2,-4(fp)
   45620:	10802004 	addi	r2,r2,128
   45624:	e0bffc15 	stw	r2,-16(fp)
			}
			synth->KEY[note] = set_val;
   45628:	d0f23f17 	ldw	r3,-14084(gp)
   4562c:	e0bffe03 	ldbu	r2,-8(fp)
   45630:	1085883a 	add	r2,r2,r2
   45634:	1085883a 	add	r2,r2,r2
   45638:	1885883a 	add	r2,r3,r2
   4563c:	e0fffc17 	ldw	r3,-16(fp)
   45640:	10c00015 	stw	r3,0(r2)
			break;
   45644:	00000106 	br	4564c <_Z8set_notehhh+0x98>

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
	alt_u32 set_val;

	if(note > 0x7F) {
		return;
   45648:	0001883a 	nop
			synth->KEY[note] = set_val;
			break;
		default:
			break;
	}
}
   4564c:	e037883a 	mov	sp,fp
   45650:	df000017 	ldw	fp,0(sp)
   45654:	dec00104 	addi	sp,sp,4
   45658:	f800283a 	ret

0004565c <_Z8set_ctrlhhm>:

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
   4565c:	defffc04 	addi	sp,sp,-16
   45660:	df000315 	stw	fp,12(sp)
   45664:	df000304 	addi	fp,sp,12
   45668:	2007883a 	mov	r3,r4
   4566c:	2805883a 	mov	r2,r5
   45670:	e1bfff15 	stw	r6,-4(fp)
   45674:	e0fffd05 	stb	r3,-12(fp)
   45678:	e0bffe05 	stb	r2,-8(fp)
	switch (channel) {
   4567c:	e0bffd03 	ldbu	r2,-12(fp)
   45680:	10000126 	beq	r2,zero,45688 <_Z8set_ctrlhhm+0x2c>
		case 0:
			synth->CTRL[par] = val;
			break;
		default:
			break;
   45684:	00000906 	br	456ac <_Z8set_ctrlhhm+0x50>
}

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
	switch (channel) {
		case 0:
			synth->CTRL[par] = val;
   45688:	d0f23f17 	ldw	r3,-14084(gp)
   4568c:	e0bffe03 	ldbu	r2,-8(fp)
   45690:	10802004 	addi	r2,r2,128
   45694:	1085883a 	add	r2,r2,r2
   45698:	1085883a 	add	r2,r2,r2
   4569c:	1885883a 	add	r2,r3,r2
   456a0:	e0ffff17 	ldw	r3,-4(fp)
   456a4:	10c00015 	stw	r3,0(r2)
			break;
   456a8:	0001883a 	nop
		default:
			break;
	}
}
   456ac:	0001883a 	nop
   456b0:	e037883a 	mov	sp,fp
   456b4:	df000017 	ldw	fp,0(sp)
   456b8:	dec00104 	addi	sp,sp,4
   456bc:	f800283a 	ret

000456c0 <_Z9calc_adsrttttttttff>:

void calc_adsr(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
   456c0:	deffe904 	addi	sp,sp,-92
   456c4:	dfc01615 	stw	ra,88(sp)
   456c8:	df001515 	stw	fp,84(sp)
   456cc:	df001504 	addi	fp,sp,84
   456d0:	2015883a 	mov	r10,r4
   456d4:	2813883a 	mov	r9,r5
   456d8:	3011883a 	mov	r8,r6
   456dc:	380d883a 	mov	r6,r7
   456e0:	e1400217 	ldw	r5,8(fp)
   456e4:	e1000317 	ldw	r4,12(fp)
   456e8:	e0c00417 	ldw	r3,16(fp)
   456ec:	e0800517 	ldw	r2,20(fp)
   456f0:	e2bff80d 	sth	r10,-32(fp)
   456f4:	e27ff90d 	sth	r9,-28(fp)
   456f8:	e23ffa0d 	sth	r8,-24(fp)
   456fc:	e1bffb0d 	sth	r6,-20(fp)
   45700:	e17ffc0d 	sth	r5,-16(fp)
   45704:	e13ffd0d 	sth	r4,-12(fp)
   45708:	e0fffe0d 	sth	r3,-8(fp)
   4570c:	e0bfff0d 	sth	r2,-4(fp)

	alt_u16 att_m_seconds = att_h + att_l;
   45710:	e0fff80b 	ldhu	r3,-32(fp)
   45714:	e0bff90b 	ldhu	r2,-28(fp)
   45718:	1885883a 	add	r2,r3,r2
   4571c:	e0bff10d 	sth	r2,-60(fp)
	alt_u16 dec_m_seconds = dec_h + dec_l;
   45720:	e0fffa0b 	ldhu	r3,-24(fp)
   45724:	e0bffb0b 	ldhu	r2,-20(fp)
   45728:	1885883a 	add	r2,r3,r2
   4572c:	e0bff18d 	sth	r2,-58(fp)
	alt_u16 sus_m_seconds = sus_h + sus_l;
   45730:	e0fffc0b 	ldhu	r3,-16(fp)
   45734:	e0bffd0b 	ldhu	r2,-12(fp)
   45738:	1885883a 	add	r2,r3,r2
   4573c:	e0bff20d 	sth	r2,-56(fp)
	alt_u16 rel_m_seconds = rel_h + rel_l;
   45740:	e0fffe0b 	ldhu	r3,-8(fp)
   45744:	e0bfff0b 	ldhu	r2,-4(fp)
   45748:	1885883a 	add	r2,r3,r2
   4574c:	e0bff28d 	sth	r2,-54(fp)
	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	float p_att = peak_att + peak_sus;
   45750:	e1400717 	ldw	r5,28(fp)
   45754:	e1000617 	ldw	r4,24(fp)
   45758:	004dadc0 	call	4dadc <__addsf3>
   4575c:	1007883a 	mov	r3,r2
   45760:	e0fff015 	stw	r3,-64(fp)

	if (p_att > 2) p_att = 2;
   45764:	01500034 	movhi	r5,16384
   45768:	e13ff017 	ldw	r4,-64(fp)
   4576c:	004e3e40 	call	4e3e4 <__gesf2>
   45770:	0080020e 	bge	zero,r2,4577c <_Z9calc_adsrttttttttff+0xbc>
   45774:	00900034 	movhi	r2,16384
   45778:	e0bff015 	stw	r2,-64(fp)

	if (att_m_seconds > 5000) {
   4577c:	e0bff10b 	ldhu	r2,-60(fp)
   45780:	1084e270 	cmpltui	r2,r2,5001
   45784:	10008526 	beq	r2,zero,4599c <_Z9calc_adsrttttttttff+0x2dc>
		//printf("ERROR: Requested attack length is too long.\n");
		return;
	}
	if (dec_m_seconds > 5000) {
   45788:	e0bff18b 	ldhu	r2,-58(fp)
   4578c:	1084e270 	cmpltui	r2,r2,5001
   45790:	10008426 	beq	r2,zero,459a4 <_Z9calc_adsrttttttttff+0x2e4>
		//printf("ERROR: Requested decay length is too long.\n");
		return;
	}
	if (sus_m_seconds > 20000) {
   45794:	e0bff20b 	ldhu	r2,-56(fp)
   45798:	10938870 	cmpltui	r2,r2,20001
   4579c:	10008326 	beq	r2,zero,459ac <_Z9calc_adsrttttttttff+0x2ec>
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
	}
	if (sus_m_seconds < rel_m_seconds) {
   457a0:	e0fff20b 	ldhu	r3,-56(fp)
   457a4:	e0bff28b 	ldhu	r2,-54(fp)
   457a8:	18808236 	bltu	r3,r2,459b4 <_Z9calc_adsrttttttttff+0x2f4>
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
	}
	if (rel_m_seconds > 10000) {
   457ac:	e0bff28b 	ldhu	r2,-54(fp)
   457b0:	1089c470 	cmpltui	r2,r2,10001
   457b4:	10008126 	beq	r2,zero,459bc <_Z9calc_adsrttttttttff+0x2fc>
		//printf("ERROR: Requested release length is too long.\n");
		return;
	}

	PEAK_ATT = p_att * (alt_u32) 0x80000;
   457b8:	01524034 	movhi	r5,18688
   457bc:	e13ff017 	ldw	r4,-64(fp)
   457c0:	004e4a00 	call	4e4a0 <__mulsf3>
   457c4:	1007883a 	mov	r3,r2
   457c8:	1805883a 	mov	r2,r3
   457cc:	1009883a 	mov	r4,r2
   457d0:	004d8a00 	call	4d8a0 <__fixunssfsi>
   457d4:	e0bfeb15 	stw	r2,-84(fp)
	if(peak_att + peak_sus >= 2) PEAK_ATT = 0xFFFFF;
   457d8:	e1400717 	ldw	r5,28(fp)
   457dc:	e1000617 	ldw	r4,24(fp)
   457e0:	004dadc0 	call	4dadc <__addsf3>
   457e4:	1007883a 	mov	r3,r2
   457e8:	1805883a 	mov	r2,r3
   457ec:	01500034 	movhi	r5,16384
   457f0:	1009883a 	mov	r4,r2
   457f4:	004e3e40 	call	4e3e4 <__gesf2>
   457f8:	10000316 	blt	r2,zero,45808 <_Z9calc_adsrttttttttff+0x148>
   457fc:	00800434 	movhi	r2,16
   45800:	10bfffc4 	addi	r2,r2,-1
   45804:	e0bfeb15 	stw	r2,-84(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
   45808:	01524034 	movhi	r5,18688
   4580c:	e1000717 	ldw	r4,28(fp)
   45810:	004e4a00 	call	4e4a0 <__mulsf3>
   45814:	1007883a 	mov	r3,r2
   45818:	1805883a 	mov	r2,r3
   4581c:	1009883a 	mov	r4,r2
   45820:	004d8a00 	call	4d8a0 <__fixunssfsi>
   45824:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
   45828:	e0bff10b 	ldhu	r2,-60(fp)
   4582c:	016b1114 	movui	r5,44100
   45830:	1009883a 	mov	r4,r2
   45834:	004dab40 	call	4dab4 <__mulsi3>
   45838:	0140fa04 	movi	r5,1000
   4583c:	1009883a 	mov	r4,r2
   45840:	004d9000 	call	4d900 <__divsi3>
   45844:	e0bfec15 	stw	r2,-80(fp)
	if(!ATT_LEN) ATT_LEN = 1;
   45848:	e0bfec17 	ldw	r2,-80(fp)
   4584c:	1000021e 	bne	r2,zero,45858 <_Z9calc_adsrttttttttff+0x198>
   45850:	00800044 	movi	r2,1
   45854:	e0bfec15 	stw	r2,-80(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
   45858:	e17fec17 	ldw	r5,-80(fp)
   4585c:	e13feb17 	ldw	r4,-84(fp)
   45860:	004d9f80 	call	4d9f8 <__udivsi3>
   45864:	e0bff415 	stw	r2,-48(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
   45868:	e0bff18b 	ldhu	r2,-58(fp)
   4586c:	016b1114 	movui	r5,44100
   45870:	1009883a 	mov	r4,r2
   45874:	004dab40 	call	4dab4 <__mulsi3>
   45878:	0140fa04 	movi	r5,1000
   4587c:	1009883a 	mov	r4,r2
   45880:	004d9000 	call	4d900 <__divsi3>
   45884:	e0bfed15 	stw	r2,-76(fp)
	if(!DEC_LEN) DEC_LEN = 1;
   45888:	e0bfed17 	ldw	r2,-76(fp)
   4588c:	1000021e 	bne	r2,zero,45898 <_Z9calc_adsrttttttttff+0x1d8>
   45890:	00800044 	movi	r2,1
   45894:	e0bfed15 	stw	r2,-76(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
   45898:	e0ffeb17 	ldw	r3,-84(fp)
   4589c:	e0bff317 	ldw	r2,-52(fp)
   458a0:	1885c83a 	sub	r2,r3,r2
   458a4:	e17fed17 	ldw	r5,-76(fp)
   458a8:	1009883a 	mov	r4,r2
   458ac:	004d9f80 	call	4d9f8 <__udivsi3>
   458b0:	e0bff515 	stw	r2,-44(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
   458b4:	e0bff20b 	ldhu	r2,-56(fp)
   458b8:	016b1114 	movui	r5,44100
   458bc:	1009883a 	mov	r4,r2
   458c0:	004dab40 	call	4dab4 <__mulsi3>
   458c4:	0140fa04 	movi	r5,1000
   458c8:	1009883a 	mov	r4,r2
   458cc:	004d9000 	call	4d900 <__divsi3>
   458d0:	e0bfee15 	stw	r2,-72(fp)
	if(!SUS_LEN) SUS_LEN = 1;
   458d4:	e0bfee17 	ldw	r2,-72(fp)
   458d8:	1000021e 	bne	r2,zero,458e4 <_Z9calc_adsrttttttttff+0x224>
   458dc:	00800044 	movi	r2,1
   458e0:	e0bfee15 	stw	r2,-72(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
   458e4:	e17fee17 	ldw	r5,-72(fp)
   458e8:	e13ff317 	ldw	r4,-52(fp)
   458ec:	004d9f80 	call	4d9f8 <__udivsi3>
   458f0:	e0bff615 	stw	r2,-40(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
   458f4:	e0bff28b 	ldhu	r2,-54(fp)
   458f8:	016b1114 	movui	r5,44100
   458fc:	1009883a 	mov	r4,r2
   45900:	004dab40 	call	4dab4 <__mulsi3>
   45904:	0140fa04 	movi	r5,1000
   45908:	1009883a 	mov	r4,r2
   4590c:	004d9000 	call	4d900 <__divsi3>
   45910:	e0bfef15 	stw	r2,-68(fp)
	if(!REL_LEN) REL_LEN = 1;
   45914:	e0bfef17 	ldw	r2,-68(fp)
   45918:	1000021e 	bne	r2,zero,45924 <_Z9calc_adsrttttttttff+0x264>
   4591c:	00800044 	movi	r2,1
   45920:	e0bfef15 	stw	r2,-68(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
   45924:	e17fef17 	ldw	r5,-68(fp)
   45928:	e13ff317 	ldw	r4,-52(fp)
   4592c:	004d9f80 	call	4d9f8 <__udivsi3>
   45930:	e0bff715 	stw	r2,-36(fp)

	set_ctrl(0, PEAK_A, PEAK_ATT);
   45934:	e1bfeb17 	ldw	r6,-84(fp)
   45938:	000b883a 	mov	r5,zero
   4593c:	0009883a 	mov	r4,zero
   45940:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	set_ctrl(0, ATT_S, ATT_STEP);
   45944:	e1bff417 	ldw	r6,-48(fp)
   45948:	01400044 	movi	r5,1
   4594c:	0009883a 	mov	r4,zero
   45950:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	set_ctrl(0, DEC_S, DEC_STEP);
   45954:	e1bff517 	ldw	r6,-44(fp)
   45958:	01400084 	movi	r5,2
   4595c:	0009883a 	mov	r4,zero
   45960:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	set_ctrl(0, PEAK_S, PEAK_SUS);
   45964:	e1bff317 	ldw	r6,-52(fp)
   45968:	014000c4 	movi	r5,3
   4596c:	0009883a 	mov	r4,zero
   45970:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	set_ctrl(0, SUS_S, SUS_STEP);
   45974:	e1bff617 	ldw	r6,-40(fp)
   45978:	01400104 	movi	r5,4
   4597c:	0009883a 	mov	r4,zero
   45980:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	set_ctrl(0, REL_S, REL_STEP);
   45984:	e1bff717 	ldw	r6,-36(fp)
   45988:	01400144 	movi	r5,5
   4598c:	0009883a 	mov	r4,zero
   45990:	004565c0 	call	4565c <_Z8set_ctrlhhm>
	return;
   45994:	0001883a 	nop
   45998:	00000906 	br	459c0 <_Z9calc_adsrttttttttff+0x300>

	if (p_att > 2) p_att = 2;

	if (att_m_seconds > 5000) {
		//printf("ERROR: Requested attack length is too long.\n");
		return;
   4599c:	0001883a 	nop
   459a0:	00000706 	br	459c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (dec_m_seconds > 5000) {
		//printf("ERROR: Requested decay length is too long.\n");
		return;
   459a4:	0001883a 	nop
   459a8:	00000506 	br	459c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds > 20000) {
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
   459ac:	0001883a 	nop
   459b0:	00000306 	br	459c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds < rel_m_seconds) {
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
   459b4:	0001883a 	nop
   459b8:	00000106 	br	459c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (rel_m_seconds > 10000) {
		//printf("ERROR: Requested release length is too long.\n");
		return;
   459bc:	0001883a 	nop
	set_ctrl(0, DEC_S, DEC_STEP);
	set_ctrl(0, PEAK_S, PEAK_SUS);
	set_ctrl(0, SUS_S, SUS_STEP);
	set_ctrl(0, REL_S, REL_STEP);
	return;
}
   459c0:	e037883a 	mov	sp,fp
   459c4:	dfc00117 	ldw	ra,4(sp)
   459c8:	df000017 	ldw	fp,0(sp)
   459cc:	dec00204 	addi	sp,sp,8
   459d0:	f800283a 	ret

000459d4 <_Z9init_ctrlttttttttff>:

void init_ctrl(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
   459d4:	defff004 	addi	sp,sp,-64
   459d8:	dfc00f15 	stw	ra,60(sp)
   459dc:	df000e15 	stw	fp,56(sp)
   459e0:	df000e04 	addi	fp,sp,56
   459e4:	2015883a 	mov	r10,r4
   459e8:	2813883a 	mov	r9,r5
   459ec:	3011883a 	mov	r8,r6
   459f0:	380d883a 	mov	r6,r7
   459f4:	e1400217 	ldw	r5,8(fp)
   459f8:	e1000317 	ldw	r4,12(fp)
   459fc:	e0c00417 	ldw	r3,16(fp)
   45a00:	e0800517 	ldw	r2,20(fp)
   45a04:	e2bff80d 	sth	r10,-32(fp)
   45a08:	e27ff90d 	sth	r9,-28(fp)
   45a0c:	e23ffa0d 	sth	r8,-24(fp)
   45a10:	e1bffb0d 	sth	r6,-20(fp)
   45a14:	e17ffc0d 	sth	r5,-16(fp)
   45a18:	e13ffd0d 	sth	r4,-12(fp)
   45a1c:	e0fffe0d 	sth	r3,-8(fp)
   45a20:	e0bfff0d 	sth	r2,-4(fp)
	calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   45a24:	e23ff80b 	ldhu	r8,-32(fp)
   45a28:	e27ff90b 	ldhu	r9,-28(fp)
   45a2c:	e2bffa0b 	ldhu	r10,-24(fp)
   45a30:	e1fffb0b 	ldhu	r7,-20(fp)
   45a34:	e0bffc0b 	ldhu	r2,-16(fp)
   45a38:	e0fffd0b 	ldhu	r3,-12(fp)
   45a3c:	e13ffe0b 	ldhu	r4,-8(fp)
   45a40:	e17fff0b 	ldhu	r5,-4(fp)
   45a44:	e1800717 	ldw	r6,28(fp)
   45a48:	d9800515 	stw	r6,20(sp)
   45a4c:	e1800617 	ldw	r6,24(fp)
   45a50:	d9800415 	stw	r6,16(sp)
   45a54:	d9400315 	stw	r5,12(sp)
   45a58:	d9000215 	stw	r4,8(sp)
   45a5c:	d8c00115 	stw	r3,4(sp)
   45a60:	d8800015 	stw	r2,0(sp)
   45a64:	500d883a 	mov	r6,r10
   45a68:	480b883a 	mov	r5,r9
   45a6c:	4009883a 	mov	r4,r8
   45a70:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
	set_ctrl(0, BEND, 0x2000);
   45a74:	01880004 	movi	r6,8192
   45a78:	01400284 	movi	r5,10
   45a7c:	0009883a 	mov	r4,zero
   45a80:	004565c0 	call	4565c <_Z8set_ctrlhhm>
}
   45a84:	0001883a 	nop
   45a88:	e037883a 	mov	sp,fp
   45a8c:	dfc00117 	ldw	ra,4(sp)
   45a90:	df000017 	ldw	fp,0(sp)
   45a94:	dec00204 	addi	sp,sp,8
   45a98:	f800283a 	ret

00045a9c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
   45a9c:	defff904 	addi	sp,sp,-28
   45aa0:	dfc00615 	stw	ra,24(sp)
   45aa4:	df000515 	stw	fp,20(sp)
   45aa8:	df000504 	addi	fp,sp,20
   45aac:	e13ffc15 	stw	r4,-16(fp)
   45ab0:	e17ffd15 	stw	r5,-12(fp)
   45ab4:	3007883a 	mov	r3,r6
   45ab8:	3805883a 	mov	r2,r7
   45abc:	e0fffe05 	stb	r3,-8(fp)
   45ac0:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
   45ac4:	e0800217 	ldw	r2,8(fp)
   45ac8:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
   45acc:	e0bffc17 	ldw	r2,-16(fp)
   45ad0:	10800117 	ldw	r2,4(r2)
   45ad4:	1080004c 	andi	r2,r2,1
   45ad8:	1007883a 	mov	r3,r2
   45adc:	e0bffb17 	ldw	r2,-20(fp)
   45ae0:	10800003 	ldbu	r2,0(r2)
   45ae4:	1080004c 	andi	r2,r2,1
   45ae8:	18c03fcc 	andi	r3,r3,255
   45aec:	10803fcc 	andi	r2,r2,255
   45af0:	18801426 	beq	r3,r2,45b44 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
   45af4:	e0bffb17 	ldw	r2,-20(fp)
   45af8:	10800003 	ldbu	r2,0(r2)
   45afc:	1080004c 	andi	r2,r2,1
   45b00:	10803fcc 	andi	r2,r2,255
   45b04:	10000826 	beq	r2,zero,45b28 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
   45b08:	e0bffc17 	ldw	r2,-16(fp)
   45b0c:	10800017 	ldw	r2,0(r2)
   45b10:	10800304 	addi	r2,r2,12
   45b14:	10800017 	ldw	r2,0(r2)
   45b18:	e17ffb17 	ldw	r5,-20(fp)
   45b1c:	e13ffc17 	ldw	r4,-16(fp)
   45b20:	103ee83a 	callr	r2
   45b24:	00000706 	br	45b44 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
   45b28:	e0bffc17 	ldw	r2,-16(fp)
   45b2c:	10800017 	ldw	r2,0(r2)
   45b30:	10800204 	addi	r2,r2,8
   45b34:	10800017 	ldw	r2,0(r2)
   45b38:	e17ffb17 	ldw	r5,-20(fp)
   45b3c:	e13ffc17 	ldw	r4,-16(fp)
   45b40:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
   45b44:	e0bffc17 	ldw	r2,-16(fp)
   45b48:	10800117 	ldw	r2,4(r2)
   45b4c:	1004d07a 	srli	r2,r2,1
   45b50:	1080004c 	andi	r2,r2,1
   45b54:	1007883a 	mov	r3,r2
   45b58:	e0bffb17 	ldw	r2,-20(fp)
   45b5c:	10800003 	ldbu	r2,0(r2)
   45b60:	1004d07a 	srli	r2,r2,1
   45b64:	1080004c 	andi	r2,r2,1
   45b68:	18c03fcc 	andi	r3,r3,255
   45b6c:	10803fcc 	andi	r2,r2,255
   45b70:	18801426 	beq	r3,r2,45bc4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
   45b74:	e0bffb17 	ldw	r2,-20(fp)
   45b78:	10800003 	ldbu	r2,0(r2)
   45b7c:	1080008c 	andi	r2,r2,2
   45b80:	10803fcc 	andi	r2,r2,255
   45b84:	10000826 	beq	r2,zero,45ba8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
   45b88:	e0bffc17 	ldw	r2,-16(fp)
   45b8c:	10800017 	ldw	r2,0(r2)
   45b90:	10800504 	addi	r2,r2,20
   45b94:	10800017 	ldw	r2,0(r2)
   45b98:	e17ffb17 	ldw	r5,-20(fp)
   45b9c:	e13ffc17 	ldw	r4,-16(fp)
   45ba0:	103ee83a 	callr	r2
   45ba4:	00000706 	br	45bc4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
   45ba8:	e0bffc17 	ldw	r2,-16(fp)
   45bac:	10800017 	ldw	r2,0(r2)
   45bb0:	10800404 	addi	r2,r2,16
   45bb4:	10800017 	ldw	r2,0(r2)
   45bb8:	e17ffb17 	ldw	r5,-20(fp)
   45bbc:	e13ffc17 	ldw	r4,-16(fp)
   45bc0:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
   45bc4:	e0bffc17 	ldw	r2,-16(fp)
   45bc8:	10800117 	ldw	r2,4(r2)
   45bcc:	1004d0ba 	srli	r2,r2,2
   45bd0:	1080004c 	andi	r2,r2,1
   45bd4:	1007883a 	mov	r3,r2
   45bd8:	e0bffb17 	ldw	r2,-20(fp)
   45bdc:	10800003 	ldbu	r2,0(r2)
   45be0:	1004d0ba 	srli	r2,r2,2
   45be4:	1080004c 	andi	r2,r2,1
   45be8:	18c03fcc 	andi	r3,r3,255
   45bec:	10803fcc 	andi	r2,r2,255
   45bf0:	18801426 	beq	r3,r2,45c44 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
   45bf4:	e0bffb17 	ldw	r2,-20(fp)
   45bf8:	10800003 	ldbu	r2,0(r2)
   45bfc:	1080010c 	andi	r2,r2,4
   45c00:	10803fcc 	andi	r2,r2,255
   45c04:	10000826 	beq	r2,zero,45c28 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
   45c08:	e0bffc17 	ldw	r2,-16(fp)
   45c0c:	10800017 	ldw	r2,0(r2)
   45c10:	10800704 	addi	r2,r2,28
   45c14:	10800017 	ldw	r2,0(r2)
   45c18:	e17ffb17 	ldw	r5,-20(fp)
   45c1c:	e13ffc17 	ldw	r4,-16(fp)
   45c20:	103ee83a 	callr	r2
   45c24:	00000706 	br	45c44 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
   45c28:	e0bffc17 	ldw	r2,-16(fp)
   45c2c:	10800017 	ldw	r2,0(r2)
   45c30:	10800604 	addi	r2,r2,24
   45c34:	10800017 	ldw	r2,0(r2)
   45c38:	e17ffb17 	ldw	r5,-20(fp)
   45c3c:	e13ffc17 	ldw	r4,-16(fp)
   45c40:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
   45c44:	e0bffb17 	ldw	r2,-20(fp)
   45c48:	10800043 	ldbu	r2,1(r2)
   45c4c:	10803fcc 	andi	r2,r2,255
   45c50:	1080201c 	xori	r2,r2,128
   45c54:	10bfe004 	addi	r2,r2,-128
   45c58:	1000061e 	bne	r2,zero,45c74 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
   45c5c:	e0bffb17 	ldw	r2,-20(fp)
   45c60:	10800083 	ldbu	r2,2(r2)
   45c64:	10803fcc 	andi	r2,r2,255
   45c68:	1080201c 	xori	r2,r2,128
   45c6c:	10bfe004 	addi	r2,r2,-128
   45c70:	10000726 	beq	r2,zero,45c90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
   45c74:	e0bffc17 	ldw	r2,-16(fp)
   45c78:	10800017 	ldw	r2,0(r2)
   45c7c:	10800104 	addi	r2,r2,4
   45c80:	10800017 	ldw	r2,0(r2)
   45c84:	e17ffb17 	ldw	r5,-20(fp)
   45c88:	e13ffc17 	ldw	r4,-16(fp)
   45c8c:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
   45c90:	e0800217 	ldw	r2,8(fp)
   45c94:	10c00003 	ldbu	r3,0(r2)
   45c98:	e0bffc17 	ldw	r2,-16(fp)
   45c9c:	10c00105 	stb	r3,4(r2)
#endif

};
   45ca0:	0001883a 	nop
   45ca4:	e037883a 	mov	sp,fp
   45ca8:	dfc00117 	ldw	ra,4(sp)
   45cac:	df000017 	ldw	fp,0(sp)
   45cb0:	dec00204 	addi	sp,sp,8
   45cb4:	f800283a 	ret

00045cb8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
   45cb8:	defff804 	addi	sp,sp,-32
   45cbc:	dfc00715 	stw	ra,28(sp)
   45cc0:	df000615 	stw	fp,24(sp)
   45cc4:	df000604 	addi	fp,sp,24
   45cc8:	e13ffc15 	stw	r4,-16(fp)
   45ccc:	e17ffd15 	stw	r5,-12(fp)
   45cd0:	3007883a 	mov	r3,r6
   45cd4:	3805883a 	mov	r2,r7
   45cd8:	e0fffe05 	stb	r3,-8(fp)
   45cdc:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
   45ce0:	e0800217 	ldw	r2,8(fp)
   45ce4:	10800084 	addi	r2,r2,2
   45ce8:	10800003 	ldbu	r2,0(r2)
   45cec:	10803fcc 	andi	r2,r2,255
   45cf0:	10800058 	cmpnei	r2,r2,1
   45cf4:	10009926 	beq	r2,zero,45f5c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
   45cf8:	e0bffc17 	ldw	r2,-16(fp)
   45cfc:	10c00103 	ldbu	r3,4(r2)
   45d00:	e0800217 	ldw	r2,8(fp)
   45d04:	10800003 	ldbu	r2,0(r2)
   45d08:	18c03fcc 	andi	r3,r3,255
   45d0c:	10803fcc 	andi	r2,r2,255
   45d10:	18800e26 	beq	r3,r2,45d4c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
   45d14:	e0bffc17 	ldw	r2,-16(fp)
   45d18:	10800017 	ldw	r2,0(r2)
   45d1c:	10800204 	addi	r2,r2,8
   45d20:	10800017 	ldw	r2,0(r2)
   45d24:	e0fffc17 	ldw	r3,-16(fp)
   45d28:	18c00103 	ldbu	r3,4(r3)
   45d2c:	19003fcc 	andi	r4,r3,255
   45d30:	e0c00217 	ldw	r3,8(fp)
   45d34:	18c00003 	ldbu	r3,0(r3)
   45d38:	18c03fcc 	andi	r3,r3,255
   45d3c:	180d883a 	mov	r6,r3
   45d40:	200b883a 	mov	r5,r4
   45d44:	e13ffc17 	ldw	r4,-16(fp)
   45d48:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
   45d4c:	00800084 	movi	r2,2
   45d50:	e0bffa05 	stb	r2,-24(fp)
   45d54:	e0bffa03 	ldbu	r2,-24(fp)
   45d58:	10800228 	cmpgeui	r2,r2,8
   45d5c:	10006e1e 	bne	r2,zero,45f18 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
   45d60:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
   45d64:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
   45d68:	00800084 	movi	r2,2
   45d6c:	e0bffac5 	stb	r2,-21(fp)
   45d70:	e0bffac3 	ldbu	r2,-21(fp)
   45d74:	10800228 	cmpgeui	r2,r2,8
   45d78:	10002f1e 	bne	r2,zero,45e38 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
   45d7c:	e0bffa03 	ldbu	r2,-24(fp)
   45d80:	e0c00217 	ldw	r3,8(fp)
   45d84:	1885883a 	add	r2,r3,r2
   45d88:	11000003 	ldbu	r4,0(r2)
   45d8c:	e0bffac3 	ldbu	r2,-21(fp)
   45d90:	e0fffc17 	ldw	r3,-16(fp)
   45d94:	1885883a 	add	r2,r3,r2
   45d98:	10800104 	addi	r2,r2,4
   45d9c:	10800003 	ldbu	r2,0(r2)
   45da0:	20c03fcc 	andi	r3,r4,255
   45da4:	10803fcc 	andi	r2,r2,255
   45da8:	1880091e 	bne	r3,r2,45dd0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
   45dac:	e0bffa03 	ldbu	r2,-24(fp)
   45db0:	e0c00217 	ldw	r3,8(fp)
   45db4:	1885883a 	add	r2,r3,r2
   45db8:	10800003 	ldbu	r2,0(r2)
   45dbc:	10803fcc 	andi	r2,r2,255
   45dc0:	10800060 	cmpeqi	r2,r2,1
   45dc4:	1000021e 	bne	r2,zero,45dd0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
   45dc8:	00800044 	movi	r2,1
   45dcc:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
   45dd0:	e0bffac3 	ldbu	r2,-21(fp)
   45dd4:	e0c00217 	ldw	r3,8(fp)
   45dd8:	1885883a 	add	r2,r3,r2
   45ddc:	11000003 	ldbu	r4,0(r2)
   45de0:	e0bffa03 	ldbu	r2,-24(fp)
   45de4:	e0fffc17 	ldw	r3,-16(fp)
   45de8:	1885883a 	add	r2,r3,r2
   45dec:	10800104 	addi	r2,r2,4
   45df0:	10800003 	ldbu	r2,0(r2)
   45df4:	20c03fcc 	andi	r3,r4,255
   45df8:	10803fcc 	andi	r2,r2,255
   45dfc:	18800a1e 	bne	r3,r2,45e28 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
   45e00:	e0bffa03 	ldbu	r2,-24(fp)
   45e04:	e0fffc17 	ldw	r3,-16(fp)
   45e08:	1885883a 	add	r2,r3,r2
   45e0c:	10800104 	addi	r2,r2,4
   45e10:	10800003 	ldbu	r2,0(r2)
   45e14:	10803fcc 	andi	r2,r2,255
   45e18:	10800060 	cmpeqi	r2,r2,1
   45e1c:	1000021e 	bne	r2,zero,45e28 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
   45e20:	00800044 	movi	r2,1
   45e24:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
   45e28:	e0bffac3 	ldbu	r2,-21(fp)
   45e2c:	10800044 	addi	r2,r2,1
   45e30:	e0bffac5 	stb	r2,-21(fp)
   45e34:	003fce06 	br	45d70 <__alt_data_end+0xfffc5d70>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
   45e38:	e0bffa43 	ldbu	r2,-23(fp)
   45e3c:	1080005c 	xori	r2,r2,1
   45e40:	10803fcc 	andi	r2,r2,255
   45e44:	10001c26 	beq	r2,zero,45eb8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
   45e48:	e0bffc17 	ldw	r2,-16(fp)
   45e4c:	10800017 	ldw	r2,0(r2)
   45e50:	10800104 	addi	r2,r2,4
   45e54:	10800017 	ldw	r2,0(r2)
   45e58:	e0fffa03 	ldbu	r3,-24(fp)
   45e5c:	e1000217 	ldw	r4,8(fp)
   45e60:	20c7883a 	add	r3,r4,r3
   45e64:	18c00003 	ldbu	r3,0(r3)
   45e68:	18c03fcc 	andi	r3,r3,255
   45e6c:	180d883a 	mov	r6,r3
   45e70:	e17ffd17 	ldw	r5,-12(fp)
   45e74:	e13ffc17 	ldw	r4,-16(fp)
   45e78:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
   45e7c:	e0bffc17 	ldw	r2,-16(fp)
   45e80:	10800017 	ldw	r2,0(r2)
   45e84:	10800304 	addi	r2,r2,12
   45e88:	10800017 	ldw	r2,0(r2)
   45e8c:	e0c00217 	ldw	r3,8(fp)
   45e90:	18c00003 	ldbu	r3,0(r3)
   45e94:	19403fcc 	andi	r5,r3,255
   45e98:	e0fffa03 	ldbu	r3,-24(fp)
   45e9c:	e1000217 	ldw	r4,8(fp)
   45ea0:	20c7883a 	add	r3,r4,r3
   45ea4:	18c00003 	ldbu	r3,0(r3)
   45ea8:	18c03fcc 	andi	r3,r3,255
   45eac:	180d883a 	mov	r6,r3
   45eb0:	e13ffc17 	ldw	r4,-16(fp)
   45eb4:	103ee83a 	callr	r2
                }
                if (!up)
   45eb8:	e0bffa83 	ldbu	r2,-22(fp)
   45ebc:	1080005c 	xori	r2,r2,1
   45ec0:	10803fcc 	andi	r2,r2,255
   45ec4:	10001026 	beq	r2,zero,45f08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
   45ec8:	e0bffc17 	ldw	r2,-16(fp)
   45ecc:	10800017 	ldw	r2,0(r2)
   45ed0:	10800404 	addi	r2,r2,16
   45ed4:	10800017 	ldw	r2,0(r2)
   45ed8:	e0fffc17 	ldw	r3,-16(fp)
   45edc:	18c00103 	ldbu	r3,4(r3)
   45ee0:	19403fcc 	andi	r5,r3,255
   45ee4:	e0fffa03 	ldbu	r3,-24(fp)
   45ee8:	e13ffc17 	ldw	r4,-16(fp)
   45eec:	20c7883a 	add	r3,r4,r3
   45ef0:	18c00104 	addi	r3,r3,4
   45ef4:	18c00003 	ldbu	r3,0(r3)
   45ef8:	18c03fcc 	andi	r3,r3,255
   45efc:	180d883a 	mov	r6,r3
   45f00:	e13ffc17 	ldw	r4,-16(fp)
   45f04:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
   45f08:	e0bffa03 	ldbu	r2,-24(fp)
   45f0c:	10800044 	addi	r2,r2,1
   45f10:	e0bffa05 	stb	r2,-24(fp)
   45f14:	003f8f06 	br	45d54 <__alt_data_end+0xfffc5d54>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
   45f18:	e03ffb05 	stb	zero,-20(fp)
   45f1c:	e0bffb03 	ldbu	r2,-20(fp)
   45f20:	10800228 	cmpgeui	r2,r2,8
   45f24:	10000e1e 	bne	r2,zero,45f60 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
   45f28:	e0bffb03 	ldbu	r2,-20(fp)
   45f2c:	e0fffb03 	ldbu	r3,-20(fp)
   45f30:	e1000217 	ldw	r4,8(fp)
   45f34:	20c7883a 	add	r3,r4,r3
   45f38:	18c00003 	ldbu	r3,0(r3)
   45f3c:	e13ffc17 	ldw	r4,-16(fp)
   45f40:	2085883a 	add	r2,r4,r2
   45f44:	10800104 	addi	r2,r2,4
   45f48:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
   45f4c:	e0bffb03 	ldbu	r2,-20(fp)
   45f50:	10800044 	addi	r2,r2,1
   45f54:	e0bffb05 	stb	r2,-20(fp)
   45f58:	003ff006 	br	45f1c <__alt_data_end+0xfffc5f1c>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
   45f5c:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
   45f60:	e037883a 	mov	sp,fp
   45f64:	dfc00117 	ldw	ra,4(sp)
   45f68:	df000017 	ldw	fp,0(sp)
   45f6c:	dec00204 	addi	sp,sp,8
   45f70:	f800283a 	ret

00045f74 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
   45f74:	defffa04 	addi	sp,sp,-24
   45f78:	dfc00515 	stw	ra,20(sp)
   45f7c:	df000415 	stw	fp,16(sp)
   45f80:	df000404 	addi	fp,sp,16
   45f84:	e13ffd15 	stw	r4,-12(fp)
   45f88:	2807883a 	mov	r3,r5
   45f8c:	3005883a 	mov	r2,r6
   45f90:	e0fffe05 	stb	r3,-8(fp)
   45f94:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
   45f98:	e0bffe03 	ldbu	r2,-8(fp)
   45f9c:	1080088c 	andi	r2,r2,34
   45fa0:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
   45fa4:	e0bfff03 	ldbu	r2,-4(fp)
   45fa8:	10800130 	cmpltui	r2,r2,4
   45fac:	1000151e 	bne	r2,zero,46004 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
   45fb0:	e0bfff03 	ldbu	r2,-4(fp)
   45fb4:	108007a8 	cmpgeui	r2,r2,30
   45fb8:	1000121e 	bne	r2,zero,46004 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
   45fbc:	e0bffd17 	ldw	r2,-12(fp)
   45fc0:	10800317 	ldw	r2,12(r2)
   45fc4:	1080008c 	andi	r2,r2,2
   45fc8:	1000021e 	bne	r2,zero,45fd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
   45fcc:	e0bffc03 	ldbu	r2,-16(fp)
   45fd0:	1000061e 	bne	r2,zero,45fec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
   45fd4:	e0bffd17 	ldw	r2,-12(fp)
   45fd8:	10800317 	ldw	r2,12(r2)
   45fdc:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
   45fe0:	10000526 	beq	r2,zero,45ff8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
   45fe4:	e0bffc03 	ldbu	r2,-16(fp)
   45fe8:	1000031e 	bne	r2,zero,45ff8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
   45fec:	e0bfff03 	ldbu	r2,-4(fp)
   45ff0:	10800f44 	addi	r2,r2,61
   45ff4:	00008006 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
   45ff8:	e0bfff03 	ldbu	r2,-4(fp)
   45ffc:	10801744 	addi	r2,r2,93
   46000:	00007d06 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
   46004:	e0bfff03 	ldbu	r2,-4(fp)
   46008:	108007b0 	cmpltui	r2,r2,30
   4600c:	1000191e 	bne	r2,zero,46074 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
   46010:	e0bfff03 	ldbu	r2,-4(fp)
   46014:	10800a28 	cmpgeui	r2,r2,40
   46018:	1000161e 	bne	r2,zero,46074 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
   4601c:	e0bffc03 	ldbu	r2,-16(fp)
   46020:	10000c26 	beq	r2,zero,46054 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
   46024:	e0bffd17 	ldw	r2,-12(fp)
   46028:	10800017 	ldw	r2,0(r2)
   4602c:	10800504 	addi	r2,r2,20
   46030:	10800017 	ldw	r2,0(r2)
   46034:	e13ffd17 	ldw	r4,-12(fp)
   46038:	103ee83a 	callr	r2
   4603c:	1007883a 	mov	r3,r2
   46040:	e0bfff03 	ldbu	r2,-4(fp)
   46044:	10bff884 	addi	r2,r2,-30
   46048:	1885883a 	add	r2,r3,r2
   4604c:	10800003 	ldbu	r2,0(r2)
   46050:	00006906 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
   46054:	e0bfff03 	ldbu	r2,-4(fp)
   46058:	108009e0 	cmpeqi	r2,r2,39
   4605c:	1000031e 	bne	r2,zero,4606c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
   46060:	e0bfff03 	ldbu	r2,-4(fp)
   46064:	108004c4 	addi	r2,r2,19
   46068:	00006306 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
   4606c:	00800c04 	movi	r2,48
   46070:	00006106 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
   46074:	e0bfff03 	ldbu	r2,-4(fp)
   46078:	10801670 	cmpltui	r2,r2,89
   4607c:	10000a1e 	bne	r2,zero,460a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
   46080:	e0bfff03 	ldbu	r2,-4(fp)
   46084:	108018a8 	cmpgeui	r2,r2,98
   46088:	1000071e 	bne	r2,zero,460a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
   4608c:	e0bffd17 	ldw	r2,-12(fp)
   46090:	10800317 	ldw	r2,12(r2)
   46094:	1080004c 	andi	r2,r2,1
   46098:	10005626 	beq	r2,zero,461f4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
   4609c:	e0bfff03 	ldbu	r2,-4(fp)
   460a0:	10bff604 	addi	r2,r2,-40
   460a4:	00005406 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
   460a8:	e0bfff03 	ldbu	r2,-4(fp)
   460ac:	10800b70 	cmpltui	r2,r2,45
   460b0:	10001d1e 	bne	r2,zero,46128 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
   460b4:	e0bfff03 	ldbu	r2,-4(fp)
   460b8:	10800e68 	cmpgeui	r2,r2,57
   460bc:	10001a1e 	bne	r2,zero,46128 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
   460c0:	e0bffc03 	ldbu	r2,-16(fp)
   460c4:	10000c26 	beq	r2,zero,460f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
   460c8:	e0bffd17 	ldw	r2,-12(fp)
   460cc:	10800017 	ldw	r2,0(r2)
   460d0:	10800604 	addi	r2,r2,24
   460d4:	10800017 	ldw	r2,0(r2)
   460d8:	e13ffd17 	ldw	r4,-12(fp)
   460dc:	103ee83a 	callr	r2
   460e0:	1007883a 	mov	r3,r2
   460e4:	e0bfff03 	ldbu	r2,-4(fp)
   460e8:	10bff4c4 	addi	r2,r2,-45
   460ec:	1885883a 	add	r2,r3,r2
   460f0:	10800003 	ldbu	r2,0(r2)
   460f4:	00004006 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
   460f8:	e0bffd17 	ldw	r2,-12(fp)
   460fc:	10800017 	ldw	r2,0(r2)
   46100:	10800704 	addi	r2,r2,28
   46104:	10800017 	ldw	r2,0(r2)
   46108:	e13ffd17 	ldw	r4,-12(fp)
   4610c:	103ee83a 	callr	r2
   46110:	1007883a 	mov	r3,r2
   46114:	e0bfff03 	ldbu	r2,-4(fp)
   46118:	10bff4c4 	addi	r2,r2,-45
   4611c:	1885883a 	add	r2,r3,r2
   46120:	10800003 	ldbu	r2,0(r2)
   46124:	00003406 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
   46128:	e0bfff03 	ldbu	r2,-4(fp)
   4612c:	10801530 	cmpltui	r2,r2,84
   46130:	10000f1e 	bne	r2,zero,46170 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
   46134:	e0bfff03 	ldbu	r2,-4(fp)
   46138:	10801668 	cmpgeui	r2,r2,89
   4613c:	10000c1e 	bne	r2,zero,46170 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
   46140:	e0bffd17 	ldw	r2,-12(fp)
   46144:	10800017 	ldw	r2,0(r2)
   46148:	10800804 	addi	r2,r2,32
   4614c:	10800017 	ldw	r2,0(r2)
   46150:	e13ffd17 	ldw	r4,-12(fp)
   46154:	103ee83a 	callr	r2
   46158:	1007883a 	mov	r3,r2
   4615c:	e0bfff03 	ldbu	r2,-4(fp)
   46160:	10bfeb04 	addi	r2,r2,-84
   46164:	1885883a 	add	r2,r3,r2
   46168:	10800003 	ldbu	r2,0(r2)
   4616c:	00002206 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
   46170:	e0bfff03 	ldbu	r2,-4(fp)
   46174:	10c00b20 	cmpeqi	r3,r2,44
   46178:	18000a1e 	bne	r3,zero,461a4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
   4617c:	10c00b48 	cmpgei	r3,r2,45
   46180:	1800031e 	bne	r3,zero,46190 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
   46184:	10800a20 	cmpeqi	r2,r2,40
   46188:	1000081e 	bne	r2,zero,461ac <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
   4618c:	00001906 	br	461f4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
   46190:	10c018a0 	cmpeqi	r3,r2,98
   46194:	1800071e 	bne	r3,zero,461b4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
   46198:	108018e0 	cmpeqi	r2,r2,99
   4619c:	10000d1e 	bne	r2,zero,461d4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
   461a0:	00001406 	br	461f4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
   461a4:	00800804 	movi	r2,32
   461a8:	00001306 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
   461ac:	00800344 	movi	r2,13
   461b0:	00001106 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
   461b4:	e0bffd17 	ldw	r2,-12(fp)
   461b8:	10800317 	ldw	r2,12(r2)
   461bc:	1080004c 	andi	r2,r2,1
   461c0:	10000226 	beq	r2,zero,461cc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
   461c4:	00800c04 	movi	r2,48
   461c8:	00000b06 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
   461cc:	0005883a 	mov	r2,zero
   461d0:	00000906 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
   461d4:	e0bffd17 	ldw	r2,-12(fp)
   461d8:	10800317 	ldw	r2,12(r2)
   461dc:	1080004c 	andi	r2,r2,1
   461e0:	10000226 	beq	r2,zero,461ec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
   461e4:	00800b84 	movi	r2,46
   461e8:	00000306 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
   461ec:	0005883a 	mov	r2,zero
   461f0:	00000106 	br	461f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
   461f4:	0005883a 	mov	r2,zero
}
   461f8:	e037883a 	mov	sp,fp
   461fc:	dfc00117 	ldw	ra,4(sp)
   46200:	df000017 	ldw	fp,0(sp)
   46204:	dec00204 	addi	sp,sp,8
   46208:	f800283a 	ret

0004620c <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
   4620c:	defffd04 	addi	sp,sp,-12
   46210:	df000215 	stw	fp,8(sp)
   46214:	df000204 	addi	fp,sp,8
   46218:	e13ffe15 	stw	r4,-8(fp)
   4621c:	e17fff15 	stw	r5,-4(fp)
        };
   46220:	0001883a 	nop
   46224:	e037883a 	mov	sp,fp
   46228:	df000017 	ldw	fp,0(sp)
   4622c:	dec00104 	addi	sp,sp,4
   46230:	f800283a 	ret

00046234 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
   46234:	defffd04 	addi	sp,sp,-12
   46238:	df000215 	stw	fp,8(sp)
   4623c:	df000204 	addi	fp,sp,8
   46240:	e13ffe15 	stw	r4,-8(fp)
   46244:	e17fff15 	stw	r5,-4(fp)
        };
   46248:	0001883a 	nop
   4624c:	e037883a 	mov	sp,fp
   46250:	df000017 	ldw	fp,0(sp)
   46254:	dec00104 	addi	sp,sp,4
   46258:	f800283a 	ret

0004625c <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
   4625c:	defffd04 	addi	sp,sp,-12
   46260:	df000215 	stw	fp,8(sp)
   46264:	df000204 	addi	fp,sp,8
   46268:	e13ffe15 	stw	r4,-8(fp)
   4626c:	e17fff15 	stw	r5,-4(fp)
        };
   46270:	0001883a 	nop
   46274:	e037883a 	mov	sp,fp
   46278:	df000017 	ldw	fp,0(sp)
   4627c:	dec00104 	addi	sp,sp,4
   46280:	f800283a 	ret

00046284 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
   46284:	defffd04 	addi	sp,sp,-12
   46288:	df000215 	stw	fp,8(sp)
   4628c:	df000204 	addi	fp,sp,8
   46290:	e13ffe15 	stw	r4,-8(fp)
   46294:	e17fff15 	stw	r5,-4(fp)
        };
   46298:	0001883a 	nop
   4629c:	e037883a 	mov	sp,fp
   462a0:	df000017 	ldw	fp,0(sp)
   462a4:	dec00104 	addi	sp,sp,4
   462a8:	f800283a 	ret

000462ac <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
   462ac:	defffd04 	addi	sp,sp,-12
   462b0:	df000215 	stw	fp,8(sp)
   462b4:	df000204 	addi	fp,sp,8
   462b8:	e13ffe15 	stw	r4,-8(fp)
   462bc:	e17fff15 	stw	r5,-4(fp)
        };
   462c0:	0001883a 	nop
   462c4:	e037883a 	mov	sp,fp
   462c8:	df000017 	ldw	fp,0(sp)
   462cc:	dec00104 	addi	sp,sp,4
   462d0:	f800283a 	ret

000462d4 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
   462d4:	defffd04 	addi	sp,sp,-12
   462d8:	df000215 	stw	fp,8(sp)
   462dc:	df000204 	addi	fp,sp,8
   462e0:	e13ffe15 	stw	r4,-8(fp)
   462e4:	e17fff15 	stw	r5,-4(fp)
        };
   462e8:	0001883a 	nop
   462ec:	e037883a 	mov	sp,fp
   462f0:	df000017 	ldw	fp,0(sp)
   462f4:	dec00104 	addi	sp,sp,4
   462f8:	f800283a 	ret

000462fc <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
   462fc:	defffd04 	addi	sp,sp,-12
   46300:	df000215 	stw	fp,8(sp)
   46304:	df000204 	addi	fp,sp,8
   46308:	e13ffe15 	stw	r4,-8(fp)
   4630c:	e17fff15 	stw	r5,-4(fp)
        };
   46310:	0001883a 	nop
   46314:	e037883a 	mov	sp,fp
   46318:	df000017 	ldw	fp,0(sp)
   4631c:	dec00104 	addi	sp,sp,4
   46320:	f800283a 	ret

00046324 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
   46324:	defff704 	addi	sp,sp,-36
   46328:	dfc00815 	stw	ra,32(sp)
   4632c:	df000715 	stw	fp,28(sp)
   46330:	df000704 	addi	fp,sp,28
   46334:	e13ffd15 	stw	r4,-12(fp)
   46338:	e17ffe15 	stw	r5,-8(fp)
   4633c:	3005883a 	mov	r2,r6
   46340:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
   46344:	e0bffd17 	ldw	r2,-12(fp)
   46348:	10800303 	ldbu	r2,12(r2)
   4634c:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
   46350:	e0bfff03 	ldbu	r2,-4(fp)
   46354:	10c011e0 	cmpeqi	r3,r2,71
   46358:	1800271e 	bne	r3,zero,463f8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
   4635c:	10c014e0 	cmpeqi	r3,r2,83
   46360:	1800031e 	bne	r3,zero,46370 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
   46364:	10800e60 	cmpeqi	r2,r2,57
   46368:	1000111e 	bne	r2,zero,463b0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
   4636c:	00003506 	br	46444 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
   46370:	e0bffd17 	ldw	r2,-12(fp)
   46374:	10800317 	ldw	r2,12(r2)
   46378:	1080004c 	andi	r2,r2,1
   4637c:	0084303a 	nor	r2,zero,r2
   46380:	1080004c 	andi	r2,r2,1
   46384:	1007883a 	mov	r3,r2
   46388:	e0bffd17 	ldw	r2,-12(fp)
   4638c:	1940004c 	andi	r5,r3,1
   46390:	11000303 	ldbu	r4,12(r2)
   46394:	00ffff84 	movi	r3,-2
   46398:	20c6703a 	and	r3,r4,r3
   4639c:	1809883a 	mov	r4,r3
   463a0:	2807883a 	mov	r3,r5
   463a4:	20c6b03a 	or	r3,r4,r3
   463a8:	10c00305 	stb	r3,12(r2)
                                break;
   463ac:	00002506 	br	46444 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
   463b0:	e0bffd17 	ldw	r2,-12(fp)
   463b4:	10800317 	ldw	r2,12(r2)
   463b8:	1004d07a 	srli	r2,r2,1
   463bc:	1080004c 	andi	r2,r2,1
   463c0:	0084303a 	nor	r2,zero,r2
   463c4:	1080004c 	andi	r2,r2,1
   463c8:	1007883a 	mov	r3,r2
   463cc:	e0bffd17 	ldw	r2,-12(fp)
   463d0:	18c0004c 	andi	r3,r3,1
   463d4:	18cb883a 	add	r5,r3,r3
   463d8:	11000303 	ldbu	r4,12(r2)
   463dc:	00ffff44 	movi	r3,-3
   463e0:	20c6703a 	and	r3,r4,r3
   463e4:	1809883a 	mov	r4,r3
   463e8:	2807883a 	mov	r3,r5
   463ec:	20c6b03a 	or	r3,r4,r3
   463f0:	10c00305 	stb	r3,12(r2)
                                break;
   463f4:	00001306 	br	46444 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
   463f8:	e0bffd17 	ldw	r2,-12(fp)
   463fc:	10800317 	ldw	r2,12(r2)
   46400:	1004d0ba 	srli	r2,r2,2
   46404:	1080004c 	andi	r2,r2,1
   46408:	0084303a 	nor	r2,zero,r2
   4640c:	1080004c 	andi	r2,r2,1
   46410:	1007883a 	mov	r3,r2
   46414:	e0bffd17 	ldw	r2,-12(fp)
   46418:	18c0004c 	andi	r3,r3,1
   4641c:	18c7883a 	add	r3,r3,r3
   46420:	18cb883a 	add	r5,r3,r3
   46424:	11000303 	ldbu	r4,12(r2)
   46428:	00fffec4 	movi	r3,-5
   4642c:	20c6703a 	and	r3,r4,r3
   46430:	1809883a 	mov	r4,r3
   46434:	2807883a 	mov	r3,r5
   46438:	20c6b03a 	or	r3,r4,r3
   4643c:	10c00305 	stb	r3,12(r2)
                                break;
   46440:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
   46444:	e0bffd17 	ldw	r2,-12(fp)
   46448:	10800303 	ldbu	r2,12(r2)
   4644c:	10c03fcc 	andi	r3,r2,255
   46450:	e0bffc03 	ldbu	r2,-16(fp)
   46454:	18801026 	beq	r3,r2,46498 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
   46458:	e0bffe17 	ldw	r2,-8(fp)
   4645c:	10000e26 	beq	r2,zero,46498 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
   46460:	e0bffd17 	ldw	r2,-12(fp)
   46464:	10800303 	ldbu	r2,12(r2)
   46468:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
   4646c:	e0bffc44 	addi	r2,fp,-15
   46470:	d8800215 	stw	r2,8(sp)
   46474:	00800044 	movi	r2,1
   46478:	d8800115 	stw	r2,4(sp)
   4647c:	d8000015 	stw	zero,0(sp)
   46480:	01c00084 	movi	r7,2
   46484:	000d883a 	mov	r6,zero
   46488:	000b883a 	mov	r5,zero
   4648c:	e13ffe17 	ldw	r4,-8(fp)
   46490:	00494400 	call	49440 <_ZN6USBHID9SetReportEhhhhtPh>
   46494:	00000106 	br	4649c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
   46498:	0005883a 	mov	r2,zero
        };
   4649c:	e037883a 	mov	sp,fp
   464a0:	dfc00117 	ldw	ra,4(sp)
   464a4:	df000017 	ldw	fp,0(sp)
   464a8:	dec00204 	addi	sp,sp,8
   464ac:	f800283a 	ret

000464b0 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
   464b0:	defffc04 	addi	sp,sp,-16
   464b4:	df000315 	stw	fp,12(sp)
   464b8:	df000304 	addi	fp,sp,12
   464bc:	e13ffd15 	stw	r4,-12(fp)
   464c0:	2807883a 	mov	r3,r5
   464c4:	3005883a 	mov	r2,r6
   464c8:	e0fffe05 	stb	r3,-8(fp)
   464cc:	e0bfff05 	stb	r2,-4(fp)
        };
   464d0:	0001883a 	nop
   464d4:	e037883a 	mov	sp,fp
   464d8:	df000017 	ldw	fp,0(sp)
   464dc:	dec00104 	addi	sp,sp,4
   464e0:	f800283a 	ret

000464e4 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
   464e4:	defffc04 	addi	sp,sp,-16
   464e8:	df000315 	stw	fp,12(sp)
   464ec:	df000304 	addi	fp,sp,12
   464f0:	e13ffd15 	stw	r4,-12(fp)
   464f4:	2807883a 	mov	r3,r5
   464f8:	3005883a 	mov	r2,r6
   464fc:	e0fffe05 	stb	r3,-8(fp)
   46500:	e0bfff05 	stb	r2,-4(fp)
        };
   46504:	0001883a 	nop
   46508:	e037883a 	mov	sp,fp
   4650c:	df000017 	ldw	fp,0(sp)
   46510:	dec00104 	addi	sp,sp,4
   46514:	f800283a 	ret

00046518 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
   46518:	defffc04 	addi	sp,sp,-16
   4651c:	df000315 	stw	fp,12(sp)
   46520:	df000304 	addi	fp,sp,12
   46524:	e13ffd15 	stw	r4,-12(fp)
   46528:	2807883a 	mov	r3,r5
   4652c:	3005883a 	mov	r2,r6
   46530:	e0fffe05 	stb	r3,-8(fp)
   46534:	e0bfff05 	stb	r2,-4(fp)
        };
   46538:	0001883a 	nop
   4653c:	e037883a 	mov	sp,fp
   46540:	df000017 	ldw	fp,0(sp)
   46544:	dec00104 	addi	sp,sp,4
   46548:	f800283a 	ret

0004654c <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
   4654c:	defffe04 	addi	sp,sp,-8
   46550:	df000115 	stw	fp,4(sp)
   46554:	df000104 	addi	fp,sp,4
   46558:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
   4655c:	008001b4 	movhi	r2,6
   46560:	109c0384 	addi	r2,r2,28686
        };
   46564:	e037883a 	mov	sp,fp
   46568:	df000017 	ldw	fp,0(sp)
   4656c:	dec00104 	addi	sp,sp,4
   46570:	f800283a 	ret

00046574 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
   46574:	defffe04 	addi	sp,sp,-8
   46578:	df000115 	stw	fp,4(sp)
   4657c:	df000104 	addi	fp,sp,4
   46580:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
   46584:	008001b4 	movhi	r2,6
   46588:	109c0604 	addi	r2,r2,28696
        };
   4658c:	e037883a 	mov	sp,fp
   46590:	df000017 	ldw	fp,0(sp)
   46594:	dec00104 	addi	sp,sp,4
   46598:	f800283a 	ret

0004659c <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
   4659c:	defffe04 	addi	sp,sp,-8
   465a0:	df000115 	stw	fp,4(sp)
   465a4:	df000104 	addi	fp,sp,4
   465a8:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
   465ac:	008001b4 	movhi	r2,6
   465b0:	109c0904 	addi	r2,r2,28708
        };
   465b4:	e037883a 	mov	sp,fp
   465b8:	df000017 	ldw	fp,0(sp)
   465bc:	dec00104 	addi	sp,sp,4
   465c0:	f800283a 	ret

000465c4 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
   465c4:	defffe04 	addi	sp,sp,-8
   465c8:	df000115 	stw	fp,4(sp)
   465cc:	df000104 	addi	fp,sp,4
   465d0:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
   465d4:	d0a1e584 	addi	r2,gp,-30826
        };
   465d8:	e037883a 	mov	sp,fp
   465dc:	df000017 	ldw	fp,0(sp)
   465e0:	dec00104 	addi	sp,sp,4
   465e4:	f800283a 	ret

000465e8 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
   465e8:	defffc04 	addi	sp,sp,-16
   465ec:	dfc00315 	stw	ra,12(sp)
   465f0:	df000215 	stw	fp,8(sp)
   465f4:	df000204 	addi	fp,sp,8
   465f8:	2005883a 	mov	r2,r4
   465fc:	e17fff15 	stw	r5,-4(fp)
   46600:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
   46604:	d0e1ea17 	ldw	r3,-30808(gp)
   46608:	e0bfff17 	ldw	r2,-4(fp)
   4660c:	18800416 	blt	r3,r2,46620 <_Z9E_Notifycci+0x38>
        printf("%c", c);
   46610:	e0bffe07 	ldb	r2,-8(fp)
   46614:	1009883a 	mov	r4,r2
   46618:	00501380 	call	50138 <putchar>
   4661c:	00000106 	br	46624 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
   46620:	0001883a 	nop
        printf("%c", c);
}
   46624:	e037883a 	mov	sp,fp
   46628:	dfc00117 	ldw	ra,4(sp)
   4662c:	df000017 	ldw	fp,0(sp)
   46630:	dec00204 	addi	sp,sp,8
   46634:	f800283a 	ret

00046638 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
   46638:	defffb04 	addi	sp,sp,-20
   4663c:	dfc00415 	stw	ra,16(sp)
   46640:	df000315 	stw	fp,12(sp)
   46644:	df000304 	addi	fp,sp,12
   46648:	e13ffe15 	stw	r4,-8(fp)
   4664c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
   46650:	d0e1ea17 	ldw	r3,-30808(gp)
   46654:	e0bfff17 	ldw	r2,-4(fp)
   46658:	18801016 	blt	r3,r2,4669c <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
   4665c:	e0bffe17 	ldw	r2,-8(fp)
   46660:	10001026 	beq	r2,zero,466a4 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
   46664:	e0bffe17 	ldw	r2,-8(fp)
   46668:	10c00044 	addi	r3,r2,1
   4666c:	e0fffe15 	stw	r3,-8(fp)
   46670:	10800003 	ldbu	r2,0(r2)
   46674:	e0bffd05 	stb	r2,-12(fp)
   46678:	e0bffd07 	ldb	r2,-12(fp)
   4667c:	1004c03a 	cmpne	r2,r2,zero
   46680:	10803fcc 	andi	r2,r2,255
   46684:	10000826 	beq	r2,zero,466a8 <_Z8E_NotifyPKci+0x70>
   46688:	e0bffd07 	ldb	r2,-12(fp)
   4668c:	e17fff17 	ldw	r5,-4(fp)
   46690:	1009883a 	mov	r4,r2
   46694:	00465e80 	call	465e8 <_Z9E_Notifycci>
   46698:	003ff206 	br	46664 <__alt_data_end+0xfffc6664>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
   4669c:	0001883a 	nop
   466a0:	00000106 	br	466a8 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
   466a4:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
   466a8:	e037883a 	mov	sp,fp
   466ac:	dfc00117 	ldw	ra,4(sp)
   466b0:	df000017 	ldw	fp,0(sp)
   466b4:	dec00204 	addi	sp,sp,8
   466b8:	f800283a 	ret

000466bc <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
   466bc:	defffb04 	addi	sp,sp,-20
   466c0:	dfc00415 	stw	ra,16(sp)
   466c4:	df000315 	stw	fp,12(sp)
   466c8:	df000304 	addi	fp,sp,12
   466cc:	e13ffe15 	stw	r4,-8(fp)
   466d0:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
   466d4:	d0e1ea17 	ldw	r3,-30808(gp)
   466d8:	e0bfff17 	ldw	r2,-4(fp)
   466dc:	18801016 	blt	r3,r2,46720 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
   466e0:	e0bffe17 	ldw	r2,-8(fp)
   466e4:	10001026 	beq	r2,zero,46728 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
   466e8:	e0bffe17 	ldw	r2,-8(fp)
   466ec:	10c00044 	addi	r3,r2,1
   466f0:	e0fffe15 	stw	r3,-8(fp)
   466f4:	10800003 	ldbu	r2,0(r2)
   466f8:	e0bffd05 	stb	r2,-12(fp)
   466fc:	e0bffd07 	ldb	r2,-12(fp)
   46700:	1004c03a 	cmpne	r2,r2,zero
   46704:	10803fcc 	andi	r2,r2,255
   46708:	10000826 	beq	r2,zero,4672c <_Z11E_NotifyStrPKci+0x70>
   4670c:	e0bffd07 	ldb	r2,-12(fp)
   46710:	e17fff17 	ldw	r5,-4(fp)
   46714:	1009883a 	mov	r4,r2
   46718:	00465e80 	call	465e8 <_Z9E_Notifycci>
   4671c:	003ff206 	br	466e8 <__alt_data_end+0xfffc66e8>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
   46720:	0001883a 	nop
   46724:	00000106 	br	4672c <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
   46728:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
   4672c:	e037883a 	mov	sp,fp
   46730:	dfc00117 	ldw	ra,4(sp)
   46734:	df000017 	ldw	fp,0(sp)
   46738:	dec00204 	addi	sp,sp,8
   4673c:	f800283a 	ret

00046740 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
   46740:	defffd04 	addi	sp,sp,-12
   46744:	df000215 	stw	fp,8(sp)
   46748:	df000204 	addi	fp,sp,8
   4674c:	2005883a 	mov	r2,r4
   46750:	e17fff15 	stw	r5,-4(fp)
   46754:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
   46758:	e037883a 	mov	sp,fp
   4675c:	df000017 	ldw	fp,0(sp)
   46760:	dec00104 	addi	sp,sp,4
   46764:	f800283a 	ret

00046768 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
   46768:	defffc04 	addi	sp,sp,-16
   4676c:	df000315 	stw	fp,12(sp)
   46770:	df000304 	addi	fp,sp,12
   46774:	e13ffd15 	stw	r4,-12(fp)
   46778:	e17ffe15 	stw	r5,-8(fp)
   4677c:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
   46780:	e037883a 	mov	sp,fp
   46784:	df000017 	ldw	fp,0(sp)
   46788:	dec00104 	addi	sp,sp,4
   4678c:	f800283a 	ret

00046790 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
   46790:	defffc04 	addi	sp,sp,-16
   46794:	df000315 	stw	fp,12(sp)
   46798:	df000304 	addi	fp,sp,12
   4679c:	e13ffd15 	stw	r4,-12(fp)
   467a0:	e17ffe15 	stw	r5,-8(fp)
   467a4:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
   467a8:	e0bffd17 	ldw	r2,-12(fp)
   467ac:	10800017 	ldw	r2,0(r2)
   467b0:	1000021e 	bne	r2,zero,467bc <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
   467b4:	0005883a 	mov	r2,zero
   467b8:	00003306 	br	46888 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
   467bc:	e0bffd17 	ldw	r2,-12(fp)
   467c0:	10800103 	ldbu	r2,4(r2)
   467c4:	10803fcc 	andi	r2,r2,255
   467c8:	10002426 	beq	r2,zero,4685c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
   467cc:	e0bfff17 	ldw	r2,-4(fp)
   467d0:	1080000b 	ldhu	r2,0(r2)
   467d4:	10bfffcc 	andi	r2,r2,65535
   467d8:	10002026 	beq	r2,zero,4685c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
   467dc:	e0bffd17 	ldw	r2,-12(fp)
   467e0:	10800017 	ldw	r2,0(r2)
   467e4:	e0fffd17 	ldw	r3,-12(fp)
   467e8:	18c00143 	ldbu	r3,5(r3)
   467ec:	19003fcc 	andi	r4,r3,255
   467f0:	e0fffd17 	ldw	r3,-12(fp)
   467f4:	18c00103 	ldbu	r3,4(r3)
   467f8:	18c03fcc 	andi	r3,r3,255
   467fc:	20c7c83a 	sub	r3,r4,r3
   46800:	10c5883a 	add	r2,r2,r3
   46804:	e0fffe17 	ldw	r3,-8(fp)
   46808:	18c00017 	ldw	r3,0(r3)
   4680c:	18c00003 	ldbu	r3,0(r3)
   46810:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
   46814:	e0bffd17 	ldw	r2,-12(fp)
   46818:	10800103 	ldbu	r2,4(r2)
   4681c:	10bfffc4 	addi	r2,r2,-1
   46820:	1007883a 	mov	r3,r2
   46824:	e0bffd17 	ldw	r2,-12(fp)
   46828:	10c00105 	stb	r3,4(r2)
   4682c:	e0bfff17 	ldw	r2,-4(fp)
   46830:	1080000b 	ldhu	r2,0(r2)
   46834:	10bfffc4 	addi	r2,r2,-1
   46838:	1007883a 	mov	r3,r2
   4683c:	e0bfff17 	ldw	r2,-4(fp)
   46840:	10c0000d 	sth	r3,0(r2)
   46844:	e0bffe17 	ldw	r2,-8(fp)
   46848:	10800017 	ldw	r2,0(r2)
   4684c:	10c00044 	addi	r3,r2,1
   46850:	e0bffe17 	ldw	r2,-8(fp)
   46854:	10c00015 	stw	r3,0(r2)
   46858:	003fd806 	br	467bc <__alt_data_end+0xfffc67bc>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
   4685c:	e0bffd17 	ldw	r2,-12(fp)
   46860:	10800103 	ldbu	r2,4(r2)
   46864:	10803fcc 	andi	r2,r2,255
   46868:	10000226 	beq	r2,zero,46874 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
   4686c:	0005883a 	mov	r2,zero
   46870:	00000506 	br	46888 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
   46874:	e0bffd17 	ldw	r2,-12(fp)
   46878:	10c00143 	ldbu	r3,5(r2)
   4687c:	e0bffd17 	ldw	r2,-12(fp)
   46880:	10c00105 	stb	r3,4(r2)
        return true;
   46884:	00800044 	movi	r2,1
}
   46888:	e037883a 	mov	sp,fp
   4688c:	df000017 	ldw	fp,0(sp)
   46890:	dec00104 	addi	sp,sp,4
   46894:	f800283a 	ret

00046898 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
   46898:	defffa04 	addi	sp,sp,-24
   4689c:	dfc00515 	stw	ra,20(sp)
   468a0:	df000415 	stw	fp,16(sp)
   468a4:	df000404 	addi	fp,sp,16
   468a8:	e13ffc15 	stw	r4,-16(fp)
   468ac:	e17ffd15 	stw	r5,-12(fp)
   468b0:	e1bffe15 	stw	r6,-8(fp)
   468b4:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
   468b8:	e0bffc17 	ldw	r2,-16(fp)
   468bc:	10800003 	ldbu	r2,0(r2)
   468c0:	10803fcc 	andi	r2,r2,255
   468c4:	10c00060 	cmpeqi	r3,r2,1
   468c8:	1800181e 	bne	r3,zero,4692c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
   468cc:	10c00088 	cmpgei	r3,r2,2
   468d0:	1800021e 	bne	r3,zero,468dc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
   468d4:	10000626 	beq	r2,zero,468f0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
   468d8:	00007e06 	br	46ad4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
   468dc:	10c000a0 	cmpeqi	r3,r2,2
   468e0:	18004a1e 	bne	r3,zero,46a0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
   468e4:	108000e0 	cmpeqi	r2,r2,3
   468e8:	1000571e 	bne	r2,zero,46a48 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
   468ec:	00007906 	br	46ad4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
   468f0:	e0bffc17 	ldw	r2,-16(fp)
   468f4:	10800417 	ldw	r2,16(r2)
   468f8:	e0fffc17 	ldw	r3,-16(fp)
   468fc:	18c00303 	ldbu	r3,12(r3)
   46900:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
   46904:	e0bffc17 	ldw	r2,-16(fp)
   46908:	10c00504 	addi	r3,r2,20
   4690c:	e0bffc17 	ldw	r2,-16(fp)
   46910:	10800417 	ldw	r2,16(r2)
   46914:	100b883a 	mov	r5,r2
   46918:	1809883a 	mov	r4,r3
   4691c:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
   46920:	e0bffc17 	ldw	r2,-16(fp)
   46924:	00c00044 	movi	r3,1
   46928:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
   4692c:	e0bffc17 	ldw	r2,-16(fp)
   46930:	10800504 	addi	r2,r2,20
   46934:	e1bffe17 	ldw	r6,-8(fp)
   46938:	e17ffd17 	ldw	r5,-12(fp)
   4693c:	1009883a 	mov	r4,r2
   46940:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   46944:	1080005c 	xori	r2,r2,1
   46948:	10803fcc 	andi	r2,r2,255
   4694c:	10000226 	beq	r2,zero,46958 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
   46950:	0005883a 	mov	r2,zero
   46954:	00006006 	br	46ad8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
   46958:	e0bffc17 	ldw	r2,-16(fp)
   4695c:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
   46960:	e0bffc17 	ldw	r2,-16(fp)
   46964:	10800417 	ldw	r2,16(r2)
   46968:	10800003 	ldbu	r2,0(r2)
   4696c:	10803fcc 	andi	r2,r2,255
   46970:	10800130 	cmpltui	r2,r2,4
   46974:	10000e1e 	bne	r2,zero,469b0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
   46978:	e0bffc17 	ldw	r2,-16(fp)
   4697c:	10800417 	ldw	r2,16(r2)
   46980:	10c00043 	ldbu	r3,1(r2)
   46984:	11000083 	ldbu	r4,2(r2)
   46988:	2008923a 	slli	r4,r4,8
   4698c:	20c6b03a 	or	r3,r4,r3
   46990:	110000c3 	ldbu	r4,3(r2)
   46994:	2008943a 	slli	r4,r4,16
   46998:	20c6b03a 	or	r3,r4,r3
   4699c:	10800103 	ldbu	r2,4(r2)
   469a0:	1004963a 	slli	r2,r2,24
   469a4:	10c4b03a 	or	r2,r2,r3
   469a8:	10800017 	ldw	r2,0(r2)
   469ac:	00000e06 	br	469e8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
   469b0:	e0bffc17 	ldw	r2,-16(fp)
   469b4:	10800417 	ldw	r2,16(r2)
   469b8:	10c00043 	ldbu	r3,1(r2)
   469bc:	11000083 	ldbu	r4,2(r2)
   469c0:	2008923a 	slli	r4,r4,8
   469c4:	20c6b03a 	or	r3,r4,r3
   469c8:	110000c3 	ldbu	r4,3(r2)
   469cc:	2008943a 	slli	r4,r4,16
   469d0:	20c6b03a 	or	r3,r4,r3
   469d4:	10800103 	ldbu	r2,4(r2)
   469d8:	1004963a 	slli	r2,r2,24
   469dc:	10c4b03a 	or	r2,r2,r3
   469e0:	1080000b 	ldhu	r2,0(r2)
   469e4:	10bfffcc 	andi	r2,r2,65535
   469e8:	e0fffc17 	ldw	r3,-16(fp)
   469ec:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
   469f0:	e0bffc17 	ldw	r2,-16(fp)
   469f4:	10c00117 	ldw	r3,4(r2)
   469f8:	e0bffc17 	ldw	r2,-16(fp)
   469fc:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
   46a00:	e0bffc17 	ldw	r2,-16(fp)
   46a04:	00c00084 	movi	r3,2
   46a08:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
   46a0c:	e0bffc17 	ldw	r2,-16(fp)
   46a10:	10800417 	ldw	r2,16(r2)
   46a14:	e0fffc17 	ldw	r3,-16(fp)
   46a18:	18c00343 	ldbu	r3,13(r3)
   46a1c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
   46a20:	e0bffc17 	ldw	r2,-16(fp)
   46a24:	10c00504 	addi	r3,r2,20
   46a28:	e0bffc17 	ldw	r2,-16(fp)
   46a2c:	10800417 	ldw	r2,16(r2)
   46a30:	100b883a 	mov	r5,r2
   46a34:	1809883a 	mov	r4,r3
   46a38:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
   46a3c:	e0bffc17 	ldw	r2,-16(fp)
   46a40:	00c000c4 	movi	r3,3
   46a44:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
   46a48:	e0bffc17 	ldw	r2,-16(fp)
   46a4c:	10800217 	ldw	r2,8(r2)
   46a50:	10001e26 	beq	r2,zero,46acc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
   46a54:	e0bffc17 	ldw	r2,-16(fp)
   46a58:	10800504 	addi	r2,r2,20
   46a5c:	e1bffe17 	ldw	r6,-8(fp)
   46a60:	e17ffd17 	ldw	r5,-12(fp)
   46a64:	1009883a 	mov	r4,r2
   46a68:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   46a6c:	1080005c 	xori	r2,r2,1
   46a70:	10803fcc 	andi	r2,r2,255
   46a74:	10000226 	beq	r2,zero,46a80 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
   46a78:	0005883a 	mov	r2,zero
   46a7c:	00001606 	br	46ad8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
   46a80:	e0bfff17 	ldw	r2,-4(fp)
   46a84:	10000b26 	beq	r2,zero,46ab4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
   46a88:	e0bffc17 	ldw	r2,-16(fp)
   46a8c:	11000417 	ldw	r4,16(r2)
   46a90:	e0bffc17 	ldw	r2,-16(fp)
   46a94:	10c00117 	ldw	r3,4(r2)
   46a98:	e0bffc17 	ldw	r2,-16(fp)
   46a9c:	10800217 	ldw	r2,8(r2)
   46aa0:	1887c83a 	sub	r3,r3,r2
   46aa4:	e0bfff17 	ldw	r2,-4(fp)
   46aa8:	e1800217 	ldw	r6,8(fp)
   46aac:	180b883a 	mov	r5,r3
   46ab0:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
   46ab4:	e0bffc17 	ldw	r2,-16(fp)
   46ab8:	10800217 	ldw	r2,8(r2)
   46abc:	10ffffc4 	addi	r3,r2,-1
   46ac0:	e0bffc17 	ldw	r2,-16(fp)
   46ac4:	10c00215 	stw	r3,8(r2)
   46ac8:	003fdf06 	br	46a48 <__alt_data_end+0xfffc6a48>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
   46acc:	e0bffc17 	ldw	r2,-16(fp)
   46ad0:	10000005 	stb	zero,0(r2)
        }
        return true;
   46ad4:	00800044 	movi	r2,1
}
   46ad8:	e037883a 	mov	sp,fp
   46adc:	dfc00117 	ldw	ra,4(sp)
   46ae0:	df000017 	ldw	fp,0(sp)
   46ae4:	dec00204 	addi	sp,sp,8
   46ae8:	f800283a 	ret

00046aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
   46aec:	defff904 	addi	sp,sp,-28
   46af0:	dfc00615 	stw	ra,24(sp)
   46af4:	df000515 	stw	fp,20(sp)
   46af8:	df000504 	addi	fp,sp,20
   46afc:	e13ffd15 	stw	r4,-12(fp)
   46b00:	2807883a 	mov	r3,r5
   46b04:	3005883a 	mov	r2,r6
   46b08:	e0fffe05 	stb	r3,-8(fp)
   46b0c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
   46b10:	e0bfff0b 	ldhu	r2,-4(fp)
   46b14:	1005d23a 	srai	r2,r2,8
   46b18:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
   46b1c:	e0bfff0b 	ldhu	r2,-4(fp)
   46b20:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
   46b24:	e03ffb8d 	sth	zero,-18(fp)
   46b28:	e03ffc0d 	sth	zero,-16(fp)
   46b2c:	e0bffe03 	ldbu	r2,-8(fp)
   46b30:	e0bffbc5 	stb	r2,-17(fp)
   46b34:	e0bffb03 	ldbu	r2,-20(fp)
   46b38:	e0bffc05 	stb	r2,-16(fp)
   46b3c:	e0bffb43 	ldbu	r2,-19(fp)
   46b40:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
   46b44:	e0bffb84 	addi	r2,fp,-18
   46b48:	000f883a 	mov	r7,zero
   46b4c:	01800104 	movi	r6,4
   46b50:	100b883a 	mov	r5,r2
   46b54:	e13ffd17 	ldw	r4,-12(fp)
   46b58:	0061af40 	call	61af4 <alt_avalon_i2c_master_tx>
   46b5c:	1004c03a 	cmpne	r2,r2,zero
   46b60:	10803fcc 	andi	r2,r2,255
   46b64:	10000426 	beq	r2,zero,46b78 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error\n");
   46b68:	010001b4 	movhi	r4,6
   46b6c:	211c3704 	addi	r4,r4,28892
   46b70:	00502100 	call	50210 <puts>
	}
	return;
   46b74:	0001883a 	nop
   46b78:	0001883a 	nop
}
   46b7c:	e037883a 	mov	sp,fp
   46b80:	dfc00117 	ldw	ra,4(sp)
   46b84:	df000017 	ldw	fp,0(sp)
   46b88:	dec00204 	addi	sp,sp,8
   46b8c:	f800283a 	ret

00046b90 <_Z13I2Creg_DAP_wrP20ALT_AVALON_I2C_DEV_sht>:

void I2Creg_DAP_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
   46b90:	defff904 	addi	sp,sp,-28
   46b94:	dfc00615 	stw	ra,24(sp)
   46b98:	df000515 	stw	fp,20(sp)
   46b9c:	df000504 	addi	fp,sp,20
   46ba0:	e13ffd15 	stw	r4,-12(fp)
   46ba4:	2807883a 	mov	r3,r5
   46ba8:	3005883a 	mov	r2,r6
   46bac:	e0fffe05 	stb	r3,-8(fp)
   46bb0:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
   46bb4:	e0bfff0b 	ldhu	r2,-4(fp)
   46bb8:	1005d23a 	srai	r2,r2,8
   46bbc:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
   46bc0:	e0bfff0b 	ldhu	r2,-4(fp)
   46bc4:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x01, reg, val1, val2};
   46bc8:	e03ffb8d 	sth	zero,-18(fp)
   46bcc:	e03ffc0d 	sth	zero,-16(fp)
   46bd0:	00800044 	movi	r2,1
   46bd4:	e0bffb85 	stb	r2,-18(fp)
   46bd8:	e0bffe03 	ldbu	r2,-8(fp)
   46bdc:	e0bffbc5 	stb	r2,-17(fp)
   46be0:	e0bffb03 	ldbu	r2,-20(fp)
   46be4:	e0bffc05 	stb	r2,-16(fp)
   46be8:	e0bffb43 	ldbu	r2,-19(fp)
   46bec:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
   46bf0:	e0bffb84 	addi	r2,fp,-18
   46bf4:	000f883a 	mov	r7,zero
   46bf8:	01800104 	movi	r6,4
   46bfc:	100b883a 	mov	r5,r2
   46c00:	e13ffd17 	ldw	r4,-12(fp)
   46c04:	0061af40 	call	61af4 <alt_avalon_i2c_master_tx>
   46c08:	1004c03a 	cmpne	r2,r2,zero
   46c0c:	10803fcc 	andi	r2,r2,255
   46c10:	10000426 	beq	r2,zero,46c24 <_Z13I2Creg_DAP_wrP20ALT_AVALON_I2C_DEV_sht+0x94>
		printf("I2C Register Write Error\n");
   46c14:	010001b4 	movhi	r4,6
   46c18:	211c3704 	addi	r4,r4,28892
   46c1c:	00502100 	call	50210 <puts>
	}
	return;
   46c20:	0001883a 	nop
   46c24:	0001883a 	nop
}
   46c28:	e037883a 	mov	sp,fp
   46c2c:	dfc00117 	ldw	ra,4(sp)
   46c30:	df000017 	ldw	fp,0(sp)
   46c34:	dec00204 	addi	sp,sp,8
   46c38:	f800283a 	ret

00046c3c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
   46c3c:	defff604 	addi	sp,sp,-40
   46c40:	dfc00915 	stw	ra,36(sp)
   46c44:	df000815 	stw	fp,32(sp)
   46c48:	dc000715 	stw	r16,28(sp)
   46c4c:	df000804 	addi	fp,sp,32
   46c50:	e13ffb15 	stw	r4,-20(fp)
   46c54:	3009883a 	mov	r4,r6
   46c58:	e1fffe15 	stw	r7,-8(fp)
   46c5c:	e17ffc05 	stb	r5,-16(fp)
   46c60:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error\n");
	}
	return (data+nwords);
   46c64:	d809883a 	mov	r4,sp
   46c68:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
   46c6c:	e13ffd03 	ldbu	r4,-12(fp)
   46c70:	21000044 	addi	r4,r4,1
   46c74:	2109883a 	add	r4,r4,r4
   46c78:	213fffc4 	addi	r4,r4,-1
   46c7c:	e13ff915 	stw	r4,-28(fp)
   46c80:	200b883a 	mov	r5,r4
   46c84:	29400044 	addi	r5,r5,1
   46c88:	2819883a 	mov	r12,r5
   46c8c:	001b883a 	mov	r13,zero
   46c90:	600ad77a 	srli	r5,r12,29
   46c94:	681290fa 	slli	r9,r13,3
   46c98:	2a52b03a 	or	r9,r5,r9
   46c9c:	601090fa 	slli	r8,r12,3
   46ca0:	200b883a 	mov	r5,r4
   46ca4:	29400044 	addi	r5,r5,1
   46ca8:	2815883a 	mov	r10,r5
   46cac:	0017883a 	mov	r11,zero
   46cb0:	500ad77a 	srli	r5,r10,29
   46cb4:	580690fa 	slli	r3,r11,3
   46cb8:	28c6b03a 	or	r3,r5,r3
   46cbc:	500490fa 	slli	r2,r10,3
   46cc0:	2005883a 	mov	r2,r4
   46cc4:	10800044 	addi	r2,r2,1
   46cc8:	108000c4 	addi	r2,r2,3
   46ccc:	1004d0ba 	srli	r2,r2,2
   46cd0:	1085883a 	add	r2,r2,r2
   46cd4:	1085883a 	add	r2,r2,r2
   46cd8:	d8b7c83a 	sub	sp,sp,r2
   46cdc:	d805883a 	mov	r2,sp
   46ce0:	1005883a 	mov	r2,r2
   46ce4:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
   46ce8:	e0bffa17 	ldw	r2,-24(fp)
   46cec:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
   46cf0:	e0bffa17 	ldw	r2,-24(fp)
   46cf4:	e0fffc03 	ldbu	r3,-16(fp)
   46cf8:	10c00045 	stb	r3,1(r2)
	int i = 0;
   46cfc:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
   46d00:	e03ff815 	stw	zero,-32(fp)
   46d04:	e0bffd03 	ldbu	r2,-12(fp)
   46d08:	e0fff817 	ldw	r3,-32(fp)
   46d0c:	18801e0e 	bge	r3,r2,46d88 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
   46d10:	e0bff817 	ldw	r2,-32(fp)
   46d14:	10c00084 	addi	r3,r2,2
   46d18:	e0bff817 	ldw	r2,-32(fp)
   46d1c:	1085883a 	add	r2,r2,r2
   46d20:	1009883a 	mov	r4,r2
   46d24:	e0bffe17 	ldw	r2,-8(fp)
   46d28:	1105883a 	add	r2,r2,r4
   46d2c:	1080000b 	ldhu	r2,0(r2)
   46d30:	10bfffcc 	andi	r2,r2,65535
   46d34:	1005d23a 	srai	r2,r2,8
   46d38:	1009883a 	mov	r4,r2
   46d3c:	e0bffa17 	ldw	r2,-24(fp)
   46d40:	10c5883a 	add	r2,r2,r3
   46d44:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
   46d48:	e0bff817 	ldw	r2,-32(fp)
   46d4c:	10c000c4 	addi	r3,r2,3
   46d50:	e0bff817 	ldw	r2,-32(fp)
   46d54:	1085883a 	add	r2,r2,r2
   46d58:	1009883a 	mov	r4,r2
   46d5c:	e0bffe17 	ldw	r2,-8(fp)
   46d60:	1105883a 	add	r2,r2,r4
   46d64:	1080000b 	ldhu	r2,0(r2)
   46d68:	1009883a 	mov	r4,r2
   46d6c:	e0bffa17 	ldw	r2,-24(fp)
   46d70:	10c5883a 	add	r2,r2,r3
   46d74:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
   46d78:	e0bff817 	ldw	r2,-32(fp)
   46d7c:	10800044 	addi	r2,r2,1
   46d80:	e0bff815 	stw	r2,-32(fp)
   46d84:	003fdf06 	br	46d04 <__alt_data_end+0xfffc6d04>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
   46d88:	e0fffa17 	ldw	r3,-24(fp)
   46d8c:	e0bffd03 	ldbu	r2,-12(fp)
   46d90:	10800044 	addi	r2,r2,1
   46d94:	1085883a 	add	r2,r2,r2
   46d98:	000f883a 	mov	r7,zero
   46d9c:	100d883a 	mov	r6,r2
   46da0:	180b883a 	mov	r5,r3
   46da4:	e13ffb17 	ldw	r4,-20(fp)
   46da8:	0061af40 	call	61af4 <alt_avalon_i2c_master_tx>
   46dac:	1004c03a 	cmpne	r2,r2,zero
   46db0:	10803fcc 	andi	r2,r2,255
   46db4:	10000326 	beq	r2,zero,46dc4 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error\n");
   46db8:	010001b4 	movhi	r4,6
   46dbc:	211c3e04 	addi	r4,r4,28920
   46dc0:	00502100 	call	50210 <puts>
	}
	return (data+nwords);
   46dc4:	e0bffd03 	ldbu	r2,-12(fp)
   46dc8:	1085883a 	add	r2,r2,r2
   46dcc:	1007883a 	mov	r3,r2
   46dd0:	e0bffe17 	ldw	r2,-8(fp)
   46dd4:	10c5883a 	add	r2,r2,r3
   46dd8:	8037883a 	mov	sp,r16
}
   46ddc:	e6ffff04 	addi	sp,fp,-4
   46de0:	dfc00217 	ldw	ra,8(sp)
   46de4:	df000117 	ldw	fp,4(sp)
   46de8:	dc000017 	ldw	r16,0(sp)
   46dec:	dec00304 	addi	sp,sp,12
   46df0:	f800283a 	ret

00046df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
   46df4:	defff804 	addi	sp,sp,-32
   46df8:	dfc00715 	stw	ra,28(sp)
   46dfc:	df000615 	stw	fp,24(sp)
   46e00:	df000604 	addi	fp,sp,24
   46e04:	e13ffe15 	stw	r4,-8(fp)
   46e08:	2805883a 	mov	r2,r5
   46e0c:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
   46e10:	e03ffc8d 	sth	zero,-14(fp)
   46e14:	e0bfff03 	ldbu	r2,-4(fp)
   46e18:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
   46e1c:	e03ffd05 	stb	zero,-12(fp)
   46e20:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
   46e24:	e13ffd04 	addi	r4,fp,-12
   46e28:	e0fffc84 	addi	r3,fp,-14
   46e2c:	d8000115 	stw	zero,4(sp)
   46e30:	00800084 	movi	r2,2
   46e34:	d8800015 	stw	r2,0(sp)
   46e38:	200f883a 	mov	r7,r4
   46e3c:	01800084 	movi	r6,2
   46e40:	180b883a 	mov	r5,r3
   46e44:	e13ffe17 	ldw	r4,-8(fp)
   46e48:	0061d180 	call	61d18 <alt_avalon_i2c_master_tx_rx>
   46e4c:	1004c03a 	cmpne	r2,r2,zero
   46e50:	10803fcc 	andi	r2,r2,255
   46e54:	10000326 	beq	r2,zero,46e64 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error\n");
   46e58:	010001b4 	movhi	r4,6
   46e5c:	211c4404 	addi	r4,r4,28944
   46e60:	00502100 	call	50210 <puts>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
   46e64:	e0bffd03 	ldbu	r2,-12(fp)
   46e68:	10803fcc 	andi	r2,r2,255
   46e6c:	1004923a 	slli	r2,r2,8
   46e70:	1007883a 	mov	r3,r2
   46e74:	e0bffd43 	ldbu	r2,-11(fp)
   46e78:	10803fcc 	andi	r2,r2,255
   46e7c:	1884b03a 	or	r2,r3,r2
   46e80:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
   46e84:	e0bffc0b 	ldhu	r2,-16(fp)
}
   46e88:	e037883a 	mov	sp,fp
   46e8c:	dfc00117 	ldw	ra,4(sp)
   46e90:	df000017 	ldw	fp,0(sp)
   46e94:	dec00204 	addi	sp,sp,8
   46e98:	f800283a 	ret

00046e9c <_Z13I2Creg_DAP_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_DAP_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
   46e9c:	defff804 	addi	sp,sp,-32
   46ea0:	dfc00715 	stw	ra,28(sp)
   46ea4:	df000615 	stw	fp,24(sp)
   46ea8:	df000604 	addi	fp,sp,24
   46eac:	e13ffe15 	stw	r4,-8(fp)
   46eb0:	2805883a 	mov	r2,r5
   46eb4:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x01, reg};
   46eb8:	e03ffc8d 	sth	zero,-14(fp)
   46ebc:	00800044 	movi	r2,1
   46ec0:	e0bffc85 	stb	r2,-14(fp)
   46ec4:	e0bfff03 	ldbu	r2,-4(fp)
   46ec8:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
   46ecc:	e03ffd05 	stb	zero,-12(fp)
   46ed0:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
   46ed4:	e13ffd04 	addi	r4,fp,-12
   46ed8:	e0fffc84 	addi	r3,fp,-14
   46edc:	d8000115 	stw	zero,4(sp)
   46ee0:	00800084 	movi	r2,2
   46ee4:	d8800015 	stw	r2,0(sp)
   46ee8:	200f883a 	mov	r7,r4
   46eec:	01800084 	movi	r6,2
   46ef0:	180b883a 	mov	r5,r3
   46ef4:	e13ffe17 	ldw	r4,-8(fp)
   46ef8:	0061d180 	call	61d18 <alt_avalon_i2c_master_tx_rx>
   46efc:	1004c03a 	cmpne	r2,r2,zero
   46f00:	10803fcc 	andi	r2,r2,255
   46f04:	10000326 	beq	r2,zero,46f14 <_Z13I2Creg_DAP_rdP20ALT_AVALON_I2C_DEV_sh+0x78>
		printf("I2C Register Read Error\n");
   46f08:	010001b4 	movhi	r4,6
   46f0c:	211c4404 	addi	r4,r4,28944
   46f10:	00502100 	call	50210 <puts>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
   46f14:	e0bffd03 	ldbu	r2,-12(fp)
   46f18:	10803fcc 	andi	r2,r2,255
   46f1c:	1004923a 	slli	r2,r2,8
   46f20:	1007883a 	mov	r3,r2
   46f24:	e0bffd43 	ldbu	r2,-11(fp)
   46f28:	10803fcc 	andi	r2,r2,255
   46f2c:	1884b03a 	or	r2,r3,r2
   46f30:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
   46f34:	e0bffc0b 	ldhu	r2,-16(fp)
}
   46f38:	e037883a 	mov	sp,fp
   46f3c:	dfc00117 	ldw	ra,4(sp)
   46f40:	df000017 	ldw	fp,0(sp)
   46f44:	dec00204 	addi	sp,sp,8
   46f48:	f800283a 	ret

00046f4c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
   46f4c:	defff304 	addi	sp,sp,-52
   46f50:	dfc00c15 	stw	ra,48(sp)
   46f54:	df000b15 	stw	fp,44(sp)
   46f58:	dc000a15 	stw	r16,40(sp)
   46f5c:	df000b04 	addi	fp,sp,44
   46f60:	e13ffb15 	stw	r4,-20(fp)
   46f64:	3009883a 	mov	r4,r6
   46f68:	e1fffe15 	stw	r7,-8(fp)
   46f6c:	e17ffc05 	stb	r5,-16(fp)
   46f70:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error\n");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
   46f74:	d809883a 	mov	r4,sp
   46f78:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
   46f7c:	e03ffa0d 	sth	zero,-24(fp)
   46f80:	e13ffc03 	ldbu	r4,-16(fp)
   46f84:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
   46f88:	e13ffd03 	ldbu	r4,-12(fp)
   46f8c:	2109883a 	add	r4,r4,r4
   46f90:	213fffc4 	addi	r4,r4,-1
   46f94:	e13ff815 	stw	r4,-32(fp)
   46f98:	200b883a 	mov	r5,r4
   46f9c:	29400044 	addi	r5,r5,1
   46fa0:	2819883a 	mov	r12,r5
   46fa4:	001b883a 	mov	r13,zero
   46fa8:	600ad77a 	srli	r5,r12,29
   46fac:	681290fa 	slli	r9,r13,3
   46fb0:	2a52b03a 	or	r9,r5,r9
   46fb4:	601090fa 	slli	r8,r12,3
   46fb8:	200b883a 	mov	r5,r4
   46fbc:	29400044 	addi	r5,r5,1
   46fc0:	2815883a 	mov	r10,r5
   46fc4:	0017883a 	mov	r11,zero
   46fc8:	500ad77a 	srli	r5,r10,29
   46fcc:	580690fa 	slli	r3,r11,3
   46fd0:	28c6b03a 	or	r3,r5,r3
   46fd4:	500490fa 	slli	r2,r10,3
   46fd8:	2005883a 	mov	r2,r4
   46fdc:	10800044 	addi	r2,r2,1
   46fe0:	108000c4 	addi	r2,r2,3
   46fe4:	1004d0ba 	srli	r2,r2,2
   46fe8:	1085883a 	add	r2,r2,r2
   46fec:	1085883a 	add	r2,r2,r2
   46ff0:	d8b7c83a 	sub	sp,sp,r2
   46ff4:	d8800204 	addi	r2,sp,8
   46ff8:	1005883a 	mov	r2,r2
   46ffc:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
   47000:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
   47004:	e0fff917 	ldw	r3,-28(fp)
   47008:	e0bffd03 	ldbu	r2,-12(fp)
   4700c:	1085883a 	add	r2,r2,r2
   47010:	1009883a 	mov	r4,r2
   47014:	e0bffa04 	addi	r2,fp,-24
   47018:	d8000115 	stw	zero,4(sp)
   4701c:	d9000015 	stw	r4,0(sp)
   47020:	180f883a 	mov	r7,r3
   47024:	01800084 	movi	r6,2
   47028:	100b883a 	mov	r5,r2
   4702c:	e13ffb17 	ldw	r4,-20(fp)
   47030:	0061d180 	call	61d18 <alt_avalon_i2c_master_tx_rx>
   47034:	1004c03a 	cmpne	r2,r2,zero
   47038:	10803fcc 	andi	r2,r2,255
   4703c:	10000326 	beq	r2,zero,4704c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error\n");
   47040:	010001b4 	movhi	r4,6
   47044:	211c4a04 	addi	r4,r4,28968
   47048:	00502100 	call	50210 <puts>
	}
	for(i = 0; i < nwords; i++) {
   4704c:	e03ff715 	stw	zero,-36(fp)
   47050:	e0bffd03 	ldbu	r2,-12(fp)
   47054:	e0fff717 	ldw	r3,-36(fp)
   47058:	18801b0e 	bge	r3,r2,470c8 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
   4705c:	e0bff717 	ldw	r2,-36(fp)
   47060:	1085883a 	add	r2,r2,r2
   47064:	1007883a 	mov	r3,r2
   47068:	e0bffe17 	ldw	r2,-8(fp)
   4706c:	10c7883a 	add	r3,r2,r3
   47070:	e0bff717 	ldw	r2,-36(fp)
   47074:	1085883a 	add	r2,r2,r2
   47078:	1009883a 	mov	r4,r2
   4707c:	e0bff917 	ldw	r2,-28(fp)
   47080:	1105883a 	add	r2,r2,r4
   47084:	10800003 	ldbu	r2,0(r2)
   47088:	10803fcc 	andi	r2,r2,255
   4708c:	1004923a 	slli	r2,r2,8
   47090:	100b883a 	mov	r5,r2
   47094:	e0bff717 	ldw	r2,-36(fp)
   47098:	1085883a 	add	r2,r2,r2
   4709c:	10800044 	addi	r2,r2,1
   470a0:	e13ff917 	ldw	r4,-28(fp)
   470a4:	2085883a 	add	r2,r4,r2
   470a8:	10800003 	ldbu	r2,0(r2)
   470ac:	10803fcc 	andi	r2,r2,255
   470b0:	2884b03a 	or	r2,r5,r2
   470b4:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error\n");
	}
	for(i = 0; i < nwords; i++) {
   470b8:	e0bff717 	ldw	r2,-36(fp)
   470bc:	10800044 	addi	r2,r2,1
   470c0:	e0bff715 	stw	r2,-36(fp)
   470c4:	003fe206 	br	47050 <__alt_data_end+0xfffc7050>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
   470c8:	e0bffd03 	ldbu	r2,-12(fp)
   470cc:	1085883a 	add	r2,r2,r2
   470d0:	1007883a 	mov	r3,r2
   470d4:	e0bffe17 	ldw	r2,-8(fp)
   470d8:	10c5883a 	add	r2,r2,r3
   470dc:	8037883a 	mov	sp,r16
}
   470e0:	e6ffff04 	addi	sp,fp,-4
   470e4:	dfc00217 	ldw	ra,8(sp)
   470e8:	df000117 	ldw	fp,4(sp)
   470ec:	dc000017 	ldw	r16,0(sp)
   470f0:	dec00304 	addi	sp,sp,12
   470f4:	f800283a 	ret

000470f8 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
   470f8:	defffd04 	addi	sp,sp,-12
   470fc:	dfc00215 	stw	ra,8(sp)
   47100:	df000115 	stw	fp,4(sp)
   47104:	df000104 	addi	fp,sp,4
   47108:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
   4710c:	01400284 	movi	r5,10
   47110:	e13fff17 	ldw	r4,-4(fp)
   47114:	00618ec0 	call	618ec <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
   47118:	01902f04 	movi	r6,16572
   4711c:	01400c04 	movi	r5,48
   47120:	e13fff17 	ldw	r4,-4(fp)
   47124:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
   47128:	01801384 	movi	r6,78
   4712c:	01400a04 	movi	r5,40
   47130:	e13fff17 	ldw	r4,-4(fp)
   47134:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			//DAP_POWERUP |
			I2S_IN_POWERUP);
   47138:	01800844 	movi	r6,33
   4713c:	01400084 	movi	r5,2
   47140:	e13fff17 	ldw	r4,-4(fp)
   47144:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
   47148:	01800104 	movi	r6,4
   4714c:	01400104 	movi	r5,4
   47150:	e13fff17 	ldw	r4,-4(fp)
   47154:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
   47158:	000d883a 	mov	r6,zero
   4715c:	01400184 	movi	r5,6
   47160:	e13fff17 	ldw	r4,-4(fp)
   47164:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL,
			DAC_SELECT_I2S_IN /*
			DAP_SELECT_I2S_IN |
			DAC_SELECT_DAP*/);
   47168:	01800404 	movi	r6,16
   4716c:	01400284 	movi	r5,10
   47170:	e13fff17 	ldw	r4,-4(fp)
   47174:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	//I2Creg_DAP_wr(dev, DAP_CONTROL, DAP_EN);
	//I2Creg_DAP_wr(dev, DAP_BASS_ENHANCE, EN);
	//I2Creg_DAP_wr(dev, DAP_BASS_ENHANCE_CTRL, 0x050f);

}
   47178:	0001883a 	nop
   4717c:	e037883a 	mov	sp,fp
   47180:	dfc00117 	ldw	ra,4(sp)
   47184:	df000017 	ldw	fp,0(sp)
   47188:	dec00204 	addi	sp,sp,8
   4718c:	f800283a 	ret

00047190 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
   47190:	defffd04 	addi	sp,sp,-12
   47194:	dfc00215 	stw	ra,8(sp)
   47198:	df000115 	stw	fp,4(sp)
   4719c:	df000104 	addi	fp,sp,4
   471a0:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
   471a4:	018c0c04 	movi	r6,12336
   471a8:	01400884 	movi	r5,34
   471ac:	e13fff17 	ldw	r4,-4(fp)
   471b0:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
   471b4:	018f0f04 	movi	r6,15420
   471b8:	01400404 	movi	r5,16
   471bc:	e13fff17 	ldw	r4,-4(fp)
   471c0:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
   471c4:	01808004 	movi	r6,512
   471c8:	01400384 	movi	r5,14
   471cc:	e13fff17 	ldw	r4,-4(fp)
   471d0:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			EN_ZCD_HP |
			!MUTE_HP |
			MUTE_ADC);
   471d4:	01804844 	movi	r6,289
   471d8:	01400904 	movi	r5,36
   471dc:	e13fff17 	ldw	r4,-4(fp)
   471e0:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
   471e4:	0001883a 	nop
   471e8:	e037883a 	mov	sp,fp
   471ec:	dfc00117 	ldw	ra,4(sp)
   471f0:	df000017 	ldw	fp,0(sp)
   471f4:	dec00204 	addi	sp,sp,8
   471f8:	f800283a 	ret

000471fc <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
   471fc:	defffd04 	addi	sp,sp,-12
   47200:	dfc00215 	stw	ra,8(sp)
   47204:	df000115 	stw	fp,4(sp)
   47208:	df000104 	addi	fp,sp,4
   4720c:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
   47210:	000b883a 	mov	r5,zero
   47214:	e13fff17 	ldw	r4,-4(fp)
   47218:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4721c:	10bfffcc 	andi	r2,r2,65535
   47220:	100b883a 	mov	r5,r2
   47224:	010001b4 	movhi	r4,6
   47228:	211c5004 	addi	r4,r4,28992
   4722c:	00500f40 	call	500f4 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
   47230:	01400084 	movi	r5,2
   47234:	e13fff17 	ldw	r4,-4(fp)
   47238:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4723c:	10bfffcc 	andi	r2,r2,65535
   47240:	100b883a 	mov	r5,r2
   47244:	010001b4 	movhi	r4,6
   47248:	211c5304 	addi	r4,r4,29004
   4724c:	00500f40 	call	500f4 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
   47250:	01400104 	movi	r5,4
   47254:	e13fff17 	ldw	r4,-4(fp)
   47258:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4725c:	10bfffcc 	andi	r2,r2,65535
   47260:	100b883a 	mov	r5,r2
   47264:	010001b4 	movhi	r4,6
   47268:	211c5804 	addi	r4,r4,29024
   4726c:	00500f40 	call	500f4 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
   47270:	01400184 	movi	r5,6
   47274:	e13fff17 	ldw	r4,-4(fp)
   47278:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4727c:	10bfffcc 	andi	r2,r2,65535
   47280:	100b883a 	mov	r5,r2
   47284:	010001b4 	movhi	r4,6
   47288:	211c5d04 	addi	r4,r4,29044
   4728c:	00500f40 	call	500f4 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
   47290:	01400284 	movi	r5,10
   47294:	e13fff17 	ldw	r4,-4(fp)
   47298:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4729c:	10bfffcc 	andi	r2,r2,65535
   472a0:	100b883a 	mov	r5,r2
   472a4:	010001b4 	movhi	r4,6
   472a8:	211c6204 	addi	r4,r4,29064
   472ac:	00500f40 	call	500f4 <printf>
	printf("DAP_CONTROL:   	%X\n", I2Creg_DAP_rd(dev, DAP_CONTROL));
   472b0:	000b883a 	mov	r5,zero
   472b4:	e13fff17 	ldw	r4,-4(fp)
   472b8:	0046e9c0 	call	46e9c <_Z13I2Creg_DAP_rdP20ALT_AVALON_I2C_DEV_sh>
   472bc:	10bfffcc 	andi	r2,r2,65535
   472c0:	100b883a 	mov	r5,r2
   472c4:	010001b4 	movhi	r4,6
   472c8:	211c6704 	addi	r4,r4,29084
   472cc:	00500f40 	call	500f4 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
   472d0:	01400c04 	movi	r5,48
   472d4:	e13fff17 	ldw	r4,-4(fp)
   472d8:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   472dc:	10bfffcc 	andi	r2,r2,65535
   472e0:	100b883a 	mov	r5,r2
   472e4:	010001b4 	movhi	r4,6
   472e8:	211c6c04 	addi	r4,r4,29104
   472ec:	00500f40 	call	500f4 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
   472f0:	01400384 	movi	r5,14
   472f4:	e13fff17 	ldw	r4,-4(fp)
   472f8:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   472fc:	10bfffcc 	andi	r2,r2,65535
   47300:	100b883a 	mov	r5,r2
   47304:	010001b4 	movhi	r4,6
   47308:	211c7104 	addi	r4,r4,29124
   4730c:	00500f40 	call	500f4 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
   47310:	01400904 	movi	r5,36
   47314:	e13fff17 	ldw	r4,-4(fp)
   47318:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4731c:	10bfffcc 	andi	r2,r2,65535
   47320:	100b883a 	mov	r5,r2
   47324:	010001b4 	movhi	r4,6
   47328:	211c7604 	addi	r4,r4,29144
   4732c:	00500f40 	call	500f4 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
   47330:	01400e04 	movi	r5,56
   47334:	e13fff17 	ldw	r4,-4(fp)
   47338:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4733c:	10bfffcc 	andi	r2,r2,65535
   47340:	100b883a 	mov	r5,r2
   47344:	010001b4 	movhi	r4,6
   47348:	211c7b04 	addi	r4,r4,29164
   4734c:	00500f40 	call	500f4 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
   47350:	01400804 	movi	r5,32
   47354:	e13fff17 	ldw	r4,-4(fp)
   47358:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4735c:	10bfffcc 	andi	r2,r2,65535
   47360:	100b883a 	mov	r5,r2
   47364:	010001b4 	movhi	r4,6
   47368:	211c8004 	addi	r4,r4,29184
   4736c:	00500f40 	call	500f4 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
   47370:	01400404 	movi	r5,16
   47374:	e13fff17 	ldw	r4,-4(fp)
   47378:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4737c:	10bfffcc 	andi	r2,r2,65535
   47380:	100b883a 	mov	r5,r2
   47384:	010001b4 	movhi	r4,6
   47388:	211c8504 	addi	r4,r4,29204
   4738c:	00500f40 	call	500f4 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
   47390:	01400884 	movi	r5,34
   47394:	e13fff17 	ldw	r4,-4(fp)
   47398:	0046df40 	call	46df4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
   4739c:	10bfffcc 	andi	r2,r2,65535
   473a0:	100b883a 	mov	r5,r2
   473a4:	010001b4 	movhi	r4,6
   473a8:	211c8a04 	addi	r4,r4,29224
   473ac:	00500f40 	call	500f4 <printf>
}
   473b0:	0001883a 	nop
   473b4:	e037883a 	mov	sp,fp
   473b8:	dfc00117 	ldw	ra,4(sp)
   473bc:	df000017 	ldw	fp,0(sp)
   473c0:	dec00204 	addi	sp,sp,8
   473c4:	f800283a 	ret

000473c8 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
   473c8:	defffa04 	addi	sp,sp,-24
   473cc:	dfc00515 	stw	ra,20(sp)
   473d0:	df000415 	stw	fp,16(sp)
   473d4:	df000404 	addi	fp,sp,16
   473d8:	e13ffe15 	stw	r4,-8(fp)
   473dc:	2805883a 	mov	r2,r5
   473e0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = HP_MIN_VOL - vol;
   473e4:	e0bfff03 	ldbu	r2,-4(fp)
   473e8:	00c01fc4 	movi	r3,127
   473ec:	1885c83a 	sub	r2,r3,r2
   473f0:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
   473f4:	e0bffc17 	ldw	r2,-16(fp)
   473f8:	1004923a 	slli	r2,r2,8
   473fc:	1007883a 	mov	r3,r2
   47400:	e0bffc17 	ldw	r2,-16(fp)
   47404:	1884b03a 	or	r2,r3,r2
   47408:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, ANA_HP_CTRL, set_vol);
   4740c:	e0bffd0b 	ldhu	r2,-12(fp)
   47410:	100d883a 	mov	r6,r2
   47414:	01400884 	movi	r5,34
   47418:	e13ffe17 	ldw	r4,-8(fp)
   4741c:	0046aec0 	call	46aec <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
   47420:	0001883a 	nop
   47424:	e037883a 	mov	sp,fp
   47428:	dfc00117 	ldw	ra,4(sp)
   4742c:	df000017 	ldw	fp,0(sp)
   47430:	dec00204 	addi	sp,sp,8
   47434:	f800283a 	ret

00047438 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
   47438:	defffb04 	addi	sp,sp,-20
   4743c:	dfc00415 	stw	ra,16(sp)
   47440:	df000315 	stw	fp,12(sp)
   47444:	df000304 	addi	fp,sp,12
   47448:	e13ffe15 	stw	r4,-8(fp)
   4744c:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
   47450:	e0bffe17 	ldw	r2,-8(fp)
   47454:	1009883a 	mov	r4,r2
   47458:	0044e880 	call	44e88 <_ZN15USBDeviceConfigC1Ev>
   4745c:	e0bffe17 	ldw	r2,-8(fp)
   47460:	10800104 	addi	r2,r2,4
   47464:	1009883a 	mov	r4,r2
   47468:	00493400 	call	49340 <_ZN21UsbMidiConfigXtracterC1Ev>
   4746c:	008001b4 	movhi	r2,6
   47470:	109c9904 	addi	r2,r2,29284
   47474:	e0fffe17 	ldw	r3,-8(fp)
   47478:	18800015 	stw	r2,0(r3)
   4747c:	008001b4 	movhi	r2,6
   47480:	109ca504 	addi	r2,r2,29332
   47484:	e0fffe17 	ldw	r3,-8(fp)
   47488:	18800115 	stw	r2,4(r3)
   4748c:	e0bffe17 	ldw	r2,-8(fp)
   47490:	e0ffff17 	ldw	r3,-4(fp)
   47494:	10c00215 	stw	r3,8(r2)
   47498:	e0bffe17 	ldw	r2,-8(fp)
   4749c:	10000305 	stb	zero,12(r2)
   474a0:	e0bffe17 	ldw	r2,-8(fp)
   474a4:	10000345 	stb	zero,13(r2)
   474a8:	e0bffe17 	ldw	r2,-8(fp)
   474ac:	10001705 	stb	zero,92(r2)
   474b0:	e0bffe17 	ldw	r2,-8(fp)
   474b4:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
   474b8:	e03ffd05 	stb	zero,-12(fp)
   474bc:	e0bffd03 	ldbu	r2,-12(fp)
   474c0:	108000e8 	cmpgeui	r2,r2,3
   474c4:	10002d1e 	bne	r2,zero,4757c <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
   474c8:	e0fffd03 	ldbu	r3,-12(fp)
   474cc:	e13ffe17 	ldw	r4,-8(fp)
   474d0:	1805883a 	mov	r2,r3
   474d4:	1085883a 	add	r2,r2,r2
   474d8:	10c5883a 	add	r2,r2,r3
   474dc:	2085883a 	add	r2,r4,r2
   474e0:	108004c4 	addi	r2,r2,19
   474e4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
   474e8:	e13ffd03 	ldbu	r4,-12(fp)
   474ec:	e0bffd03 	ldbu	r2,-12(fp)
   474f0:	10000226 	beq	r2,zero,474fc <_ZN9USBH_MIDIC1EP3USB+0xc4>
   474f4:	0007883a 	mov	r3,zero
   474f8:	00000106 	br	47500 <_ZN9USBH_MIDIC1EP3USB+0xc8>
   474fc:	00c00204 	movi	r3,8
   47500:	e17ffe17 	ldw	r5,-8(fp)
   47504:	2005883a 	mov	r2,r4
   47508:	1085883a 	add	r2,r2,r2
   4750c:	1105883a 	add	r2,r2,r4
   47510:	2885883a 	add	r2,r5,r2
   47514:	10800504 	addi	r2,r2,20
   47518:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
   4751c:	e13ffd03 	ldbu	r4,-12(fp)
   47520:	e0bffd03 	ldbu	r2,-12(fp)
   47524:	10000226 	beq	r2,zero,47530 <_ZN9USBH_MIDIC1EP3USB+0xf8>
   47528:	00c00044 	movi	r3,1
   4752c:	00000106 	br	47534 <_ZN9USBH_MIDIC1EP3USB+0xfc>
   47530:	00c003c4 	movi	r3,15
   47534:	e17ffe17 	ldw	r5,-8(fp)
   47538:	2005883a 	mov	r2,r4
   4753c:	1085883a 	add	r2,r2,r2
   47540:	1105883a 	add	r2,r2,r4
   47544:	2885883a 	add	r2,r5,r2
   47548:	10800404 	addi	r2,r2,16
   4754c:	18c7883a 	add	r3,r3,r3
   47550:	18cb883a 	add	r5,r3,r3
   47554:	10c00143 	ldbu	r3,5(r2)
   47558:	18c000cc 	andi	r3,r3,3
   4755c:	1809883a 	mov	r4,r3
   47560:	2807883a 	mov	r3,r5
   47564:	20c6b03a 	or	r3,r4,r3
   47568:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
   4756c:	e0bffd03 	ldbu	r2,-12(fp)
   47570:	10800044 	addi	r2,r2,1
   47574:	e0bffd05 	stb	r2,-12(fp)
   47578:	003fd006 	br	474bc <__alt_data_end+0xfffc74bc>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
   4757c:	e0bffe17 	ldw	r2,-8(fp)
   47580:	10800217 	ldw	r2,8(r2)
   47584:	10000626 	beq	r2,zero,475a0 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
   47588:	e0bffe17 	ldw	r2,-8(fp)
   4758c:	10800217 	ldw	r2,8(r2)
   47590:	e0fffe17 	ldw	r3,-8(fp)
   47594:	180b883a 	mov	r5,r3
   47598:	1009883a 	mov	r4,r2
   4759c:	0044c3c0 	call	44c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
   475a0:	0001883a 	nop
   475a4:	e037883a 	mov	sp,fp
   475a8:	dfc00117 	ldw	ra,4(sp)
   475ac:	df000017 	ldw	fp,0(sp)
   475b0:	dec00204 	addi	sp,sp,8
   475b4:	f800283a 	ret

000475b8 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
   475b8:	deffe004 	addi	sp,sp,-128
   475bc:	dfc01f15 	stw	ra,124(sp)
   475c0:	df001e15 	stw	fp,120(sp)
   475c4:	df001e04 	addi	fp,sp,120
   475c8:	e13ffc15 	stw	r4,-16(fp)
   475cc:	2809883a 	mov	r4,r5
   475d0:	3007883a 	mov	r3,r6
   475d4:	3805883a 	mov	r2,r7
   475d8:	e13ffd05 	stb	r4,-12(fp)
   475dc:	e0fffe05 	stb	r3,-8(fp)
   475e0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
   475e4:	e0bfe944 	addi	r2,fp,-91
   475e8:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
   475ec:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
   475f0:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
   475f4:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
   475f8:	00800044 	movi	r2,1
   475fc:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
   47600:	00800044 	movi	r2,1
   47604:	e0bfe3c5 	stb	r2,-113(fp)
   47608:	e0bfe3c3 	ldbu	r2,-113(fp)
   4760c:	108000e8 	cmpgeui	r2,r2,3
   47610:	10001a1e 	bne	r2,zero,4767c <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
   47614:	e0ffe3c3 	ldbu	r3,-113(fp)
   47618:	e13ffc17 	ldw	r4,-16(fp)
   4761c:	1805883a 	mov	r2,r3
   47620:	1085883a 	add	r2,r2,r2
   47624:	10c5883a 	add	r2,r2,r3
   47628:	2085883a 	add	r2,r4,r2
   4762c:	10800404 	addi	r2,r2,16
   47630:	11000143 	ldbu	r4,5(r2)
   47634:	00ffff84 	movi	r3,-2
   47638:	20c6703a 	and	r3,r4,r3
   4763c:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
   47640:	e0ffe3c3 	ldbu	r3,-113(fp)
   47644:	e13ffc17 	ldw	r4,-16(fp)
   47648:	1805883a 	mov	r2,r3
   4764c:	1085883a 	add	r2,r2,r2
   47650:	10c5883a 	add	r2,r2,r3
   47654:	2085883a 	add	r2,r4,r2
   47658:	10800404 	addi	r2,r2,16
   4765c:	11000143 	ldbu	r4,5(r2)
   47660:	00ffff44 	movi	r3,-3
   47664:	20c6703a 	and	r3,r4,r3
   47668:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
   4766c:	e0bfe3c3 	ldbu	r2,-113(fp)
   47670:	10800044 	addi	r2,r2,1
   47674:	e0bfe3c5 	stb	r2,-113(fp)
   47678:	003fe306 	br	47608 <__alt_data_end+0xfffc7608>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
   4767c:	e0bffc17 	ldw	r2,-16(fp)
   47680:	10800217 	ldw	r2,8(r2)
   47684:	1009883a 	mov	r4,r2
   47688:	0042c180 	call	42c18 <_ZN3USB14GetAddressPoolEv>
   4768c:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
   47690:	e0bffc17 	ldw	r2,-16(fp)
   47694:	10800303 	ldbu	r2,12(r2)
   47698:	10803fcc 	andi	r2,r2,255
   4769c:	10000226 	beq	r2,zero,476a8 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
   476a0:	00bff644 	movi	r2,-39
   476a4:	0001c706 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
   476a8:	e0bfe817 	ldw	r2,-96(fp)
   476ac:	10800017 	ldw	r2,0(r2)
   476b0:	10800017 	ldw	r2,0(r2)
   476b4:	e0fffc17 	ldw	r3,-16(fp)
   476b8:	18c00303 	ldbu	r3,12(r3)
   476bc:	18c03fcc 	andi	r3,r3,255
   476c0:	180b883a 	mov	r5,r3
   476c4:	e13fe817 	ldw	r4,-96(fp)
   476c8:	103ee83a 	callr	r2
   476cc:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
   476d0:	e0bfe617 	ldw	r2,-104(fp)
   476d4:	1000021e 	bne	r2,zero,476e0 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   476d8:	00bff584 	movi	r2,-42
   476dc:	0001b906 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
   476e0:	e0bfe617 	ldw	r2,-104(fp)
   476e4:	10c00003 	ldbu	r3,0(r2)
   476e8:	11000043 	ldbu	r4,1(r2)
   476ec:	2008923a 	slli	r4,r4,8
   476f0:	20c6b03a 	or	r3,r4,r3
   476f4:	11000083 	ldbu	r4,2(r2)
   476f8:	2008943a 	slli	r4,r4,16
   476fc:	20c6b03a 	or	r3,r4,r3
   47700:	108000c3 	ldbu	r2,3(r2)
   47704:	1004963a 	slli	r2,r2,24
   47708:	10c4b03a 	or	r2,r2,r3
   4770c:	1000021e 	bne	r2,zero,47718 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
   47710:	00bff5c4 	movi	r2,-41
   47714:	0001ab06 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
   47718:	e0bfe617 	ldw	r2,-104(fp)
   4771c:	10c00003 	ldbu	r3,0(r2)
   47720:	11000043 	ldbu	r4,1(r2)
   47724:	2008923a 	slli	r4,r4,8
   47728:	20c6b03a 	or	r3,r4,r3
   4772c:	11000083 	ldbu	r4,2(r2)
   47730:	2008943a 	slli	r4,r4,16
   47734:	20c6b03a 	or	r3,r4,r3
   47738:	108000c3 	ldbu	r2,3(r2)
   4773c:	1004963a 	slli	r2,r2,24
   47740:	10c4b03a 	or	r2,r2,r3
   47744:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
   47748:	e0bffc17 	ldw	r2,-16(fp)
   4774c:	10c004c4 	addi	r3,r2,19
   47750:	e0bfe617 	ldw	r2,-104(fp)
   47754:	19803fcc 	andi	r6,r3,255
   47758:	11000003 	ldbu	r4,0(r2)
   4775c:	2008703a 	and	r4,r4,zero
   47760:	200b883a 	mov	r5,r4
   47764:	3009883a 	mov	r4,r6
   47768:	2908b03a 	or	r4,r5,r4
   4776c:	11000005 	stb	r4,0(r2)
   47770:	1808d23a 	srli	r4,r3,8
   47774:	21803fcc 	andi	r6,r4,255
   47778:	11000043 	ldbu	r4,1(r2)
   4777c:	2008703a 	and	r4,r4,zero
   47780:	200b883a 	mov	r5,r4
   47784:	3009883a 	mov	r4,r6
   47788:	2908b03a 	or	r4,r5,r4
   4778c:	11000045 	stb	r4,1(r2)
   47790:	1808d43a 	srli	r4,r3,16
   47794:	21803fcc 	andi	r6,r4,255
   47798:	11000083 	ldbu	r4,2(r2)
   4779c:	2008703a 	and	r4,r4,zero
   477a0:	200b883a 	mov	r5,r4
   477a4:	3009883a 	mov	r4,r6
   477a8:	2908b03a 	or	r4,r5,r4
   477ac:	11000085 	stb	r4,2(r2)
   477b0:	180ad63a 	srli	r5,r3,24
   477b4:	10c000c3 	ldbu	r3,3(r2)
   477b8:	1806703a 	and	r3,r3,zero
   477bc:	1809883a 	mov	r4,r3
   477c0:	2807883a 	mov	r3,r5
   477c4:	20c6b03a 	or	r3,r4,r3
   477c8:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
   477cc:	e0bfe617 	ldw	r2,-104(fp)
   477d0:	e0ffff03 	ldbu	r3,-4(fp)
   477d4:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
   477d8:	e0bffc17 	ldw	r2,-16(fp)
   477dc:	10c00217 	ldw	r3,8(r2)
   477e0:	e0bfe944 	addi	r2,fp,-91
   477e4:	d8800015 	stw	r2,0(sp)
   477e8:	01c00204 	movi	r7,8
   477ec:	000d883a 	mov	r6,zero
   477f0:	000b883a 	mov	r5,zero
   477f4:	1809883a 	mov	r4,r3
   477f8:	00428440 	call	42844 <_ZN3USB11getDevDescrEhhtPh>
   477fc:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
   47800:	e0bfe617 	ldw	r2,-104(fp)
   47804:	e0ffe717 	ldw	r3,-100(fp)
   47808:	19403fcc 	andi	r5,r3,255
   4780c:	10c00003 	ldbu	r3,0(r2)
   47810:	1806703a 	and	r3,r3,zero
   47814:	1809883a 	mov	r4,r3
   47818:	2807883a 	mov	r3,r5
   4781c:	20c6b03a 	or	r3,r4,r3
   47820:	10c00005 	stb	r3,0(r2)
   47824:	e0ffe717 	ldw	r3,-100(fp)
   47828:	1806d23a 	srli	r3,r3,8
   4782c:	19403fcc 	andi	r5,r3,255
   47830:	10c00043 	ldbu	r3,1(r2)
   47834:	1806703a 	and	r3,r3,zero
   47838:	1809883a 	mov	r4,r3
   4783c:	2807883a 	mov	r3,r5
   47840:	20c6b03a 	or	r3,r4,r3
   47844:	10c00045 	stb	r3,1(r2)
   47848:	e0ffe717 	ldw	r3,-100(fp)
   4784c:	1806d43a 	srli	r3,r3,16
   47850:	19403fcc 	andi	r5,r3,255
   47854:	10c00083 	ldbu	r3,2(r2)
   47858:	1806703a 	and	r3,r3,zero
   4785c:	1809883a 	mov	r4,r3
   47860:	2807883a 	mov	r3,r5
   47864:	20c6b03a 	or	r3,r4,r3
   47868:	10c00085 	stb	r3,2(r2)
   4786c:	e0ffe717 	ldw	r3,-100(fp)
   47870:	180ad63a 	srli	r5,r3,24
   47874:	10c000c3 	ldbu	r3,3(r2)
   47878:	1806703a 	and	r3,r3,zero
   4787c:	1809883a 	mov	r4,r3
   47880:	2807883a 	mov	r3,r5
   47884:	20c6b03a 	or	r3,r4,r3
   47888:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
   4788c:	e0bfe303 	ldbu	r2,-116(fp)
   47890:	10013a1e 	bne	r2,zero,47d7c <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
   47894:	e0bfe817 	ldw	r2,-96(fp)
   47898:	10800017 	ldw	r2,0(r2)
   4789c:	10800104 	addi	r2,r2,4
   478a0:	10800017 	ldw	r2,0(r2)
   478a4:	e0fffd03 	ldbu	r3,-12(fp)
   478a8:	e13ffe03 	ldbu	r4,-8(fp)
   478ac:	200f883a 	mov	r7,r4
   478b0:	000d883a 	mov	r6,zero
   478b4:	180b883a 	mov	r5,r3
   478b8:	e13fe817 	ldw	r4,-96(fp)
   478bc:	103ee83a 	callr	r2
   478c0:	1007883a 	mov	r3,r2
   478c4:	e0bffc17 	ldw	r2,-16(fp)
   478c8:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
   478cc:	e0bffc17 	ldw	r2,-16(fp)
   478d0:	10800303 	ldbu	r2,12(r2)
   478d4:	10803fcc 	andi	r2,r2,255
   478d8:	1000021e 	bne	r2,zero,478e4 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
   478dc:	00bff504 	movi	r2,-44
   478e0:	00013806 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
   478e4:	e0bfe517 	ldw	r2,-108(fp)
   478e8:	10c001c3 	ldbu	r3,7(r2)
   478ec:	e0bffc17 	ldw	r2,-16(fp)
   478f0:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
   478f4:	e0bffc17 	ldw	r2,-16(fp)
   478f8:	10c00217 	ldw	r3,8(r2)
   478fc:	e0bffc17 	ldw	r2,-16(fp)
   47900:	10800303 	ldbu	r2,12(r2)
   47904:	10803fcc 	andi	r2,r2,255
   47908:	100f883a 	mov	r7,r2
   4790c:	000d883a 	mov	r6,zero
   47910:	000b883a 	mov	r5,zero
   47914:	1809883a 	mov	r4,r3
   47918:	0042b000 	call	42b00 <_ZN3USB7setAddrEhhh>
   4791c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
   47920:	e0bfe303 	ldbu	r2,-116(fp)
   47924:	10001026 	beq	r2,zero,47968 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
   47928:	e0bfe617 	ldw	r2,-104(fp)
   4792c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
   47930:	e0bfe817 	ldw	r2,-96(fp)
   47934:	10800017 	ldw	r2,0(r2)
   47938:	10800204 	addi	r2,r2,8
   4793c:	10800017 	ldw	r2,0(r2)
   47940:	e0fffc17 	ldw	r3,-16(fp)
   47944:	18c00303 	ldbu	r3,12(r3)
   47948:	18c03fcc 	andi	r3,r3,255
   4794c:	180b883a 	mov	r5,r3
   47950:	e13fe817 	ldw	r4,-96(fp)
   47954:	103ee83a 	callr	r2
                bAddress = 0;
   47958:	e0bffc17 	ldw	r2,-16(fp)
   4795c:	10000305 	stb	zero,12(r2)
                return rcode;
   47960:	e0bfe303 	ldbu	r2,-116(fp)
   47964:	00011706 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
   47968:	e0bffc17 	ldw	r2,-16(fp)
   4796c:	10800303 	ldbu	r2,12(r2)
   47970:	10803fcc 	andi	r2,r2,255
   47974:	01402004 	movi	r5,128
   47978:	1009883a 	mov	r4,r2
   4797c:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
   47980:	e0bfe617 	ldw	r2,-104(fp)
   47984:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
   47988:	e0bfe817 	ldw	r2,-96(fp)
   4798c:	10800017 	ldw	r2,0(r2)
   47990:	10800017 	ldw	r2,0(r2)
   47994:	e0fffc17 	ldw	r3,-16(fp)
   47998:	18c00303 	ldbu	r3,12(r3)
   4799c:	18c03fcc 	andi	r3,r3,255
   479a0:	180b883a 	mov	r5,r3
   479a4:	e13fe817 	ldw	r4,-96(fp)
   479a8:	103ee83a 	callr	r2
   479ac:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
   479b0:	e0bfe617 	ldw	r2,-104(fp)
   479b4:	1000021e 	bne	r2,zero,479c0 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
   479b8:	00bff584 	movi	r2,-42
   479bc:	00010106 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
   479c0:	e0bfe617 	ldw	r2,-104(fp)
   479c4:	e0ffff03 	ldbu	r3,-4(fp)
   479c8:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
   479cc:	e0bffc17 	ldw	r2,-16(fp)
   479d0:	10c00217 	ldw	r3,8(r2)
   479d4:	e0bffc17 	ldw	r2,-16(fp)
   479d8:	10800303 	ldbu	r2,12(r2)
   479dc:	11003fcc 	andi	r4,r2,255
   479e0:	00800484 	movi	r2,18
   479e4:	117fffcc 	andi	r5,r2,65535
   479e8:	e0bfe944 	addi	r2,fp,-91
   479ec:	d8800015 	stw	r2,0(sp)
   479f0:	280f883a 	mov	r7,r5
   479f4:	000d883a 	mov	r6,zero
   479f8:	200b883a 	mov	r5,r4
   479fc:	1809883a 	mov	r4,r3
   47a00:	00428440 	call	42844 <_ZN3USB11getDevDescrEhhtPh>
   47a04:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
   47a08:	e0bfe303 	ldbu	r2,-116(fp)
   47a0c:	1000dd1e 	bne	r2,zero,47d84 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
   47a10:	e0bfe517 	ldw	r2,-108(fp)
   47a14:	10c00203 	ldbu	r3,8(r2)
   47a18:	10800243 	ldbu	r2,9(r2)
   47a1c:	1004923a 	slli	r2,r2,8
   47a20:	10c4b03a 	or	r2,r2,r3
   47a24:	1007883a 	mov	r3,r2
   47a28:	e0bffc17 	ldw	r2,-16(fp)
   47a2c:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
   47a30:	e0bfe517 	ldw	r2,-108(fp)
   47a34:	10c00283 	ldbu	r3,10(r2)
   47a38:	108002c3 	ldbu	r2,11(r2)
   47a3c:	1004923a 	slli	r2,r2,8
   47a40:	10c4b03a 	or	r2,r2,r3
   47a44:	1007883a 	mov	r3,r2
   47a48:	e0bffc17 	ldw	r2,-16(fp)
   47a4c:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
   47a50:	e0bfe517 	ldw	r2,-108(fp)
   47a54:	10800443 	ldbu	r2,17(r2)
   47a58:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
   47a5c:	e0bffc17 	ldw	r2,-16(fp)
   47a60:	10c00217 	ldw	r3,8(r2)
   47a64:	e0bffc17 	ldw	r2,-16(fp)
   47a68:	10800303 	ldbu	r2,12(r2)
   47a6c:	11003fcc 	andi	r4,r2,255
   47a70:	e0bffc17 	ldw	r2,-16(fp)
   47a74:	108004c4 	addi	r2,r2,19
   47a78:	100f883a 	mov	r7,r2
   47a7c:	01800044 	movi	r6,1
   47a80:	200b883a 	mov	r5,r4
   47a84:	1809883a 	mov	r4,r3
   47a88:	00408f40 	call	408f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
   47a8c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
   47a90:	e0bfe303 	ldbu	r2,-116(fp)
   47a94:	1000bd1e 	bne	r2,zero,47d8c <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
   47a98:	e0bffc17 	ldw	r2,-16(fp)
   47a9c:	1080040b 	ldhu	r2,16(r2)
   47aa0:	10bfffcc 	andi	r2,r2,65535
   47aa4:	01402004 	movi	r5,128
   47aa8:	1009883a 	mov	r4,r2
   47aac:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
   47ab0:	e0bffc17 	ldw	r2,-16(fp)
   47ab4:	1080038b 	ldhu	r2,14(r2)
   47ab8:	10bfffcc 	andi	r2,r2,65535
   47abc:	01402004 	movi	r5,128
   47ac0:	1009883a 	mov	r4,r2
   47ac4:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
   47ac8:	e0bfe903 	ldbu	r2,-92(fp)
   47acc:	01402004 	movi	r5,128
   47ad0:	1009883a 	mov	r4,r2
   47ad4:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
   47ad8:	e0bffc17 	ldw	r2,-16(fp)
   47adc:	00c000c4 	movi	r3,3
   47ae0:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
   47ae4:	e13ffc17 	ldw	r4,-16(fp)
   47ae8:	0047e500 	call	47e50 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
   47aec:	e03fe405 	stb	zero,-112(fp)
   47af0:	e0ffe403 	ldbu	r3,-112(fp)
   47af4:	e0bfe903 	ldbu	r2,-92(fp)
   47af8:	18802a2e 	bgeu	r3,r2,47ba4 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
   47afc:	e0bffc17 	ldw	r2,-16(fp)
   47b00:	10c00104 	addi	r3,r2,4
   47b04:	e0bfee04 	addi	r2,fp,-72
   47b08:	01800044 	movi	r6,1
   47b0c:	180b883a 	mov	r5,r3
   47b10:	1009883a 	mov	r4,r2
   47b14:	00489500 	call	48950 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
   47b18:	e0bffc17 	ldw	r2,-16(fp)
   47b1c:	10c00217 	ldw	r3,8(r2)
   47b20:	e0bffc17 	ldw	r2,-16(fp)
   47b24:	10800303 	ldbu	r2,12(r2)
   47b28:	11003fcc 	andi	r4,r2,255
   47b2c:	e17fe403 	ldbu	r5,-112(fp)
   47b30:	e0bfee04 	addi	r2,fp,-72
   47b34:	d8800015 	stw	r2,0(sp)
   47b38:	280f883a 	mov	r7,r5
   47b3c:	000d883a 	mov	r6,zero
   47b40:	200b883a 	mov	r5,r4
   47b44:	1809883a 	mov	r4,r3
   47b48:	00429600 	call	42960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
   47b4c:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
   47b50:	e0bfe303 	ldbu	r2,-116(fp)
   47b54:	10008f1e 	bne	r2,zero,47d94 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
   47b58:	e0bfee04 	addi	r2,fp,-72
   47b5c:	1009883a 	mov	r4,r2
   47b60:	004925c0 	call	4925c <_ZN14MidiDescParser9getNumEPsEv>
   47b64:	1007883a 	mov	r3,r2
   47b68:	e0bfe383 	ldbu	r2,-114(fp)
   47b6c:	10c5883a 	add	r2,r2,r3
   47b70:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
   47b74:	e0bfe383 	ldbu	r2,-114(fp)
   47b78:	108000b0 	cmpltui	r2,r2,2
   47b7c:	1000051e 	bne	r2,zero,47b94 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
   47b80:	e0bfee04 	addi	r2,fp,-72
   47b84:	1009883a 	mov	r4,r2
   47b88:	00492340 	call	49234 <_ZN14MidiDescParser12getConfValueEv>
   47b8c:	e0bfe345 	stb	r2,-115(fp)
   47b90:	00000406 	br	47ba4 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
   47b94:	e0bfe403 	ldbu	r2,-112(fp)
   47b98:	10800044 	addi	r2,r2,1
   47b9c:	e0bfe405 	stb	r2,-112(fp)
   47ba0:	003fd306 	br	47af0 <__alt_data_end+0xfffc7af0>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
   47ba4:	e0bfe383 	ldbu	r2,-114(fp)
   47ba8:	01402004 	movi	r5,128
   47bac:	1009883a 	mov	r4,r2
   47bb0:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
   47bb4:	e0bfe383 	ldbu	r2,-114(fp)
   47bb8:	10800058 	cmpnei	r2,r2,1
   47bbc:	1000321e 	bne	r2,zero,47c88 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
   47bc0:	e03fe445 	stb	zero,-111(fp)
   47bc4:	e0ffe443 	ldbu	r3,-111(fp)
   47bc8:	e0bfe903 	ldbu	r2,-92(fp)
   47bcc:	18802a2e 	bgeu	r3,r2,47c78 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
   47bd0:	e0bffc17 	ldw	r2,-16(fp)
   47bd4:	10c00104 	addi	r3,r2,4
   47bd8:	e0bfee04 	addi	r2,fp,-72
   47bdc:	000d883a 	mov	r6,zero
   47be0:	180b883a 	mov	r5,r3
   47be4:	1009883a 	mov	r4,r2
   47be8:	00489500 	call	48950 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
   47bec:	e0bffc17 	ldw	r2,-16(fp)
   47bf0:	10c00217 	ldw	r3,8(r2)
   47bf4:	e0bffc17 	ldw	r2,-16(fp)
   47bf8:	10800303 	ldbu	r2,12(r2)
   47bfc:	11003fcc 	andi	r4,r2,255
   47c00:	e17fe443 	ldbu	r5,-111(fp)
   47c04:	e0bfee04 	addi	r2,fp,-72
   47c08:	d8800015 	stw	r2,0(sp)
   47c0c:	280f883a 	mov	r7,r5
   47c10:	000d883a 	mov	r6,zero
   47c14:	200b883a 	mov	r5,r4
   47c18:	1809883a 	mov	r4,r3
   47c1c:	00429600 	call	42960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
   47c20:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
   47c24:	e0bfe303 	ldbu	r2,-116(fp)
   47c28:	10005c1e 	bne	r2,zero,47d9c <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
   47c2c:	e0bfee04 	addi	r2,fp,-72
   47c30:	1009883a 	mov	r4,r2
   47c34:	004925c0 	call	4925c <_ZN14MidiDescParser9getNumEPsEv>
   47c38:	1007883a 	mov	r3,r2
   47c3c:	e0bfe383 	ldbu	r2,-114(fp)
   47c40:	10c5883a 	add	r2,r2,r3
   47c44:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
   47c48:	e0bfe383 	ldbu	r2,-114(fp)
   47c4c:	108000b0 	cmpltui	r2,r2,2
   47c50:	1000051e 	bne	r2,zero,47c68 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
   47c54:	e0bfee04 	addi	r2,fp,-72
   47c58:	1009883a 	mov	r4,r2
   47c5c:	00492340 	call	49234 <_ZN14MidiDescParser12getConfValueEv>
   47c60:	e0bfe345 	stb	r2,-115(fp)
   47c64:	00000406 	br	47c78 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
   47c68:	e0bfe443 	ldbu	r2,-111(fp)
   47c6c:	10800044 	addi	r2,r2,1
   47c70:	e0bfe445 	stb	r2,-111(fp)
   47c74:	003fd306 	br	47bc4 <__alt_data_end+0xfffc7bc4>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
   47c78:	e0bfe383 	ldbu	r2,-114(fp)
   47c7c:	01402004 	movi	r5,128
   47c80:	1009883a 	mov	r4,r2
   47c84:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
   47c88:	e0bfe383 	ldbu	r2,-114(fp)
   47c8c:	108000a8 	cmpgeui	r2,r2,2
   47c90:	1000031e 	bne	r2,zero,47ca0 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
   47c94:	00bfffc4 	movi	r2,-1
   47c98:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
   47c9c:	00004206 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
   47ca0:	e0bffc17 	ldw	r2,-16(fp)
   47ca4:	10c00217 	ldw	r3,8(r2)
   47ca8:	e0bffc17 	ldw	r2,-16(fp)
   47cac:	10800303 	ldbu	r2,12(r2)
   47cb0:	11003fcc 	andi	r4,r2,255
   47cb4:	e0bffc17 	ldw	r2,-16(fp)
   47cb8:	108004c4 	addi	r2,r2,19
   47cbc:	100f883a 	mov	r7,r2
   47cc0:	018000c4 	movi	r6,3
   47cc4:	200b883a 	mov	r5,r4
   47cc8:	1809883a 	mov	r4,r3
   47ccc:	00408f40 	call	408f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
   47cd0:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
   47cd4:	e0bfe343 	ldbu	r2,-115(fp)
   47cd8:	01402004 	movi	r5,128
   47cdc:	1009883a 	mov	r4,r2
   47ce0:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
   47ce4:	e0bffc17 	ldw	r2,-16(fp)
   47ce8:	10800583 	ldbu	r2,22(r2)
   47cec:	10bfe004 	addi	r2,r2,-128
   47cf0:	10803fcc 	andi	r2,r2,255
   47cf4:	01402004 	movi	r5,128
   47cf8:	1009883a 	mov	r4,r2
   47cfc:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
   47d00:	e0bffc17 	ldw	r2,-16(fp)
   47d04:	10800643 	ldbu	r2,25(r2)
   47d08:	10803fcc 	andi	r2,r2,255
   47d0c:	01402004 	movi	r5,128
   47d10:	1009883a 	mov	r4,r2
   47d14:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
   47d18:	e0bffc17 	ldw	r2,-16(fp)
   47d1c:	10c00217 	ldw	r3,8(r2)
   47d20:	e0bffc17 	ldw	r2,-16(fp)
   47d24:	10800303 	ldbu	r2,12(r2)
   47d28:	10803fcc 	andi	r2,r2,255
   47d2c:	e13fe343 	ldbu	r4,-115(fp)
   47d30:	200f883a 	mov	r7,r4
   47d34:	000d883a 	mov	r6,zero
   47d38:	100b883a 	mov	r5,r2
   47d3c:	1809883a 	mov	r4,r3
   47d40:	0042b940 	call	42b94 <_ZN3USB7setConfEhhh>
   47d44:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
   47d48:	e0bfe303 	ldbu	r2,-116(fp)
   47d4c:	1000151e 	bne	r2,zero,47da4 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
   47d50:	e0bffc17 	ldw	r2,-16(fp)
   47d54:	10801817 	ldw	r2,96(r2)
   47d58:	10000326 	beq	r2,zero,47d68 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
   47d5c:	e0bffc17 	ldw	r2,-16(fp)
   47d60:	10801817 	ldw	r2,96(r2)
   47d64:	103ee83a 	callr	r2

        bPollEnable = true;
   47d68:	e0bffc17 	ldw	r2,-16(fp)
   47d6c:	00c00044 	movi	r3,1
   47d70:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
   47d74:	0005883a 	mov	r2,zero
   47d78:	00001206 	br	47dc4 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
   47d7c:	0001883a 	nop
   47d80:	00000906 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
   47d84:	0001883a 	nop
   47d88:	00000706 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
   47d8c:	0001883a 	nop
   47d90:	00000506 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
   47d94:	0001883a 	nop
   47d98:	00000306 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
   47d9c:	0001883a 	nop
   47da0:	00000106 	br	47da8 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
   47da4:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
   47da8:	e0bffc17 	ldw	r2,-16(fp)
   47dac:	10800017 	ldw	r2,0(r2)
   47db0:	10800204 	addi	r2,r2,8
   47db4:	10800017 	ldw	r2,0(r2)
   47db8:	e13ffc17 	ldw	r4,-16(fp)
   47dbc:	103ee83a 	callr	r2
        return rcode;
   47dc0:	e0bfe303 	ldbu	r2,-116(fp)
}
   47dc4:	e037883a 	mov	sp,fp
   47dc8:	dfc00117 	ldw	ra,4(sp)
   47dcc:	df000017 	ldw	fp,0(sp)
   47dd0:	dec00204 	addi	sp,sp,8
   47dd4:	f800283a 	ret

00047dd8 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
   47dd8:	defffd04 	addi	sp,sp,-12
   47ddc:	dfc00215 	stw	ra,8(sp)
   47de0:	df000115 	stw	fp,4(sp)
   47de4:	df000104 	addi	fp,sp,4
   47de8:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
   47dec:	e0bfff17 	ldw	r2,-4(fp)
   47df0:	10800217 	ldw	r2,8(r2)
   47df4:	1009883a 	mov	r4,r2
   47df8:	0042c180 	call	42c18 <_ZN3USB14GetAddressPoolEv>
   47dfc:	1009883a 	mov	r4,r2
   47e00:	20800017 	ldw	r2,0(r4)
   47e04:	10800204 	addi	r2,r2,8
   47e08:	10800017 	ldw	r2,0(r2)
   47e0c:	e0ffff17 	ldw	r3,-4(fp)
   47e10:	18c00303 	ldbu	r3,12(r3)
   47e14:	18c03fcc 	andi	r3,r3,255
   47e18:	180b883a 	mov	r5,r3
   47e1c:	103ee83a 	callr	r2
        bAddress     = 0;
   47e20:	e0bfff17 	ldw	r2,-4(fp)
   47e24:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
   47e28:	e0bfff17 	ldw	r2,-4(fp)
   47e2c:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
   47e30:	e0bfff17 	ldw	r2,-4(fp)
   47e34:	10001705 	stb	zero,92(r2)
        return 0;
   47e38:	0005883a 	mov	r2,zero
}
   47e3c:	e037883a 	mov	sp,fp
   47e40:	dfc00117 	ldw	ra,4(sp)
   47e44:	df000017 	ldw	fp,0(sp)
   47e48:	dec00204 	addi	sp,sp,8
   47e4c:	f800283a 	ret

00047e50 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
   47e50:	defffe04 	addi	sp,sp,-8
   47e54:	df000115 	stw	fp,4(sp)
   47e58:	df000104 	addi	fp,sp,4
   47e5c:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
   47e60:	e0bfff17 	ldw	r2,-4(fp)
   47e64:	1080040b 	ldhu	r2,16(r2)
   47e68:	10bfffcc 	andi	r2,r2,65535
   47e6c:	10848d58 	cmpnei	r2,r2,4661
   47e70:	1000351e 	bne	r2,zero,47f48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
   47e74:	e0bfff17 	ldw	r2,-4(fp)
   47e78:	1080038b 	ldhu	r2,14(r2)
   47e7c:	10bfffcc 	andi	r2,r2,65535
   47e80:	10800820 	cmpeqi	r2,r2,32
   47e84:	10000f1e 	bne	r2,zero,47ec4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
   47e88:	e0bfff17 	ldw	r2,-4(fp)
   47e8c:	1080038b 	ldhu	r2,14(r2)
   47e90:	10bfffcc 	andi	r2,r2,65535
   47e94:	10800da0 	cmpeqi	r2,r2,54
   47e98:	10000a1e 	bne	r2,zero,47ec4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
   47e9c:	e0bfff17 	ldw	r2,-4(fp)
   47ea0:	1080038b 	ldhu	r2,14(r2)
   47ea4:	10bfffcc 	andi	r2,r2,65535
   47ea8:	10801460 	cmpeqi	r2,r2,81
   47eac:	1000051e 	bne	r2,zero,47ec4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
   47eb0:	e0bfff17 	ldw	r2,-4(fp)
   47eb4:	1080038b 	ldhu	r2,14(r2)
   47eb8:	10bfffcc 	andi	r2,r2,65535
   47ebc:	10801a58 	cmpnei	r2,r2,105
   47ec0:	1000041e 	bne	r2,zero,47ed4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
   47ec4:	e0bfff17 	ldw	r2,-4(fp)
   47ec8:	00c00084 	movi	r3,2
   47ecc:	10c00485 	stb	r3,18(r2)
                        return;
   47ed0:	00001d06 	br	47f48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
   47ed4:	e0bfff17 	ldw	r2,-4(fp)
   47ed8:	1080038b 	ldhu	r2,14(r2)
   47edc:	10bfffcc 	andi	r2,r2,65535
   47ee0:	10800c30 	cmpltui	r2,r2,48
   47ee4:	1000051e 	bne	r2,zero,47efc <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
   47ee8:	e0bfff17 	ldw	r2,-4(fp)
   47eec:	1080038b 	ldhu	r2,14(r2)
   47ef0:	10bfffcc 	andi	r2,r2,65535
   47ef4:	10800cf0 	cmpltui	r2,r2,51
   47ef8:	10000f1e 	bne	r2,zero,47f38 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
   47efc:	e0bfff17 	ldw	r2,-4(fp)
   47f00:	1080038b 	ldhu	r2,14(r2)
   47f04:	10bfffcc 	andi	r2,r2,65535
   47f08:	10800d60 	cmpeqi	r2,r2,53
   47f0c:	10000a1e 	bne	r2,zero,47f38 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
   47f10:	e0bfff17 	ldw	r2,-4(fp)
   47f14:	1080038b 	ldhu	r2,14(r2)
   47f18:	10bfffcc 	andi	r2,r2,65535
   47f1c:	10801ef0 	cmpltui	r2,r2,123
   47f20:	1000091e 	bne	r2,zero,47f48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
   47f24:	e0bfff17 	ldw	r2,-4(fp)
   47f28:	1080038b 	ldhu	r2,14(r2)
   47f2c:	10bfffcc 	andi	r2,r2,65535
   47f30:	10801fa8 	cmpgeui	r2,r2,126
   47f34:	1000041e 	bne	r2,zero,47f48 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
   47f38:	e0bfff17 	ldw	r2,-4(fp)
   47f3c:	00c00084 	movi	r3,2
   47f40:	10c00485 	stb	r3,18(r2)
                        return;
   47f44:	0001883a 	nop
                }
        }
}
   47f48:	e037883a 	mov	sp,fp
   47f4c:	df000017 	ldw	fp,0(sp)
   47f50:	dec00104 	addi	sp,sp,4
   47f54:	f800283a 	ret

00047f58 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
   47f58:	defff804 	addi	sp,sp,-32
   47f5c:	dfc00715 	stw	ra,28(sp)
   47f60:	df000615 	stw	fp,24(sp)
   47f64:	df000604 	addi	fp,sp,24
   47f68:	e13ffd15 	stw	r4,-12(fp)
   47f6c:	e17ffe15 	stw	r5,-8(fp)
   47f70:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
   47f74:	e0bffd17 	ldw	r2,-12(fp)
   47f78:	108005c3 	ldbu	r2,23(r2)
   47f7c:	10c03fcc 	andi	r3,r2,255
   47f80:	e0bffe17 	ldw	r2,-8(fp)
   47f84:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
   47f88:	e0bffd17 	ldw	r2,-12(fp)
   47f8c:	10c00217 	ldw	r3,8(r2)
   47f90:	e0bffd17 	ldw	r2,-12(fp)
   47f94:	10800303 	ldbu	r2,12(r2)
   47f98:	11003fcc 	andi	r4,r2,255
   47f9c:	e0bffd17 	ldw	r2,-12(fp)
   47fa0:	10800583 	ldbu	r2,22(r2)
   47fa4:	11403fcc 	andi	r5,r2,255
   47fa8:	d8000115 	stw	zero,4(sp)
   47fac:	e0bfff17 	ldw	r2,-4(fp)
   47fb0:	d8800015 	stw	r2,0(sp)
   47fb4:	e1fffe17 	ldw	r7,-8(fp)
   47fb8:	280d883a 	mov	r6,r5
   47fbc:	200b883a 	mov	r5,r4
   47fc0:	1809883a 	mov	r4,r3
   47fc4:	0040eac0 	call	40eac <_ZN3USB10inTransferEhhPtPhh>
   47fc8:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
   47fcc:	e0bffe17 	ldw	r2,-8(fp)
   47fd0:	1080000b 	ldhu	r2,0(r2)
   47fd4:	10bfffcc 	andi	r2,r2,65535
   47fd8:	10800f28 	cmpgeui	r2,r2,60
   47fdc:	10000d1e 	bne	r2,zero,48014 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
   47fe0:	e0bffe17 	ldw	r2,-8(fp)
   47fe4:	1080000b 	ldhu	r2,0(r2)
   47fe8:	10bfffcc 	andi	r2,r2,65535
   47fec:	e0ffff17 	ldw	r3,-4(fp)
   47ff0:	1885883a 	add	r2,r3,r2
   47ff4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
   47ff8:	e0bffe17 	ldw	r2,-8(fp)
   47ffc:	1080000b 	ldhu	r2,0(r2)
   48000:	10bfffcc 	andi	r2,r2,65535
   48004:	10800044 	addi	r2,r2,1
   48008:	e0ffff17 	ldw	r3,-4(fp)
   4800c:	1885883a 	add	r2,r3,r2
   48010:	10000005 	stb	zero,0(r2)
        }
        return r;
   48014:	e0bffc03 	ldbu	r2,-16(fp)
}
   48018:	e037883a 	mov	sp,fp
   4801c:	dfc00117 	ldw	ra,4(sp)
   48020:	df000017 	ldw	fp,0(sp)
   48024:	dec00204 	addi	sp,sp,8
   48028:	f800283a 	ret

0004802c <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
   4802c:	defff904 	addi	sp,sp,-28
   48030:	dfc00615 	stw	ra,24(sp)
   48034:	df000515 	stw	fp,20(sp)
   48038:	df000504 	addi	fp,sp,20
   4803c:	e13ffd15 	stw	r4,-12(fp)
   48040:	e17ffe15 	stw	r5,-8(fp)
   48044:	3005883a 	mov	r2,r6
   48048:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
   4804c:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
   48050:	e0bffd17 	ldw	r2,-12(fp)
   48054:	10800343 	ldbu	r2,13(r2)
   48058:	1080005c 	xori	r2,r2,1
   4805c:	10803fcc 	andi	r2,r2,255
   48060:	10000226 	beq	r2,zero,4806c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
   48064:	0005883a 	mov	r2,zero
   48068:	00008506 	br	48280 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
   4806c:	e0bffd17 	ldw	r2,-12(fp)
   48070:	10801703 	ldbu	r2,92(r2)
   48074:	10803fcc 	andi	r2,r2,255
   48078:	10001826 	beq	r2,zero,480dc <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
   4807c:	e0bffd17 	ldw	r2,-12(fp)
   48080:	10801703 	ldbu	r2,92(r2)
   48084:	10803fcc 	andi	r2,r2,255
   48088:	10801028 	cmpgeui	r2,r2,64
   4808c:	1000131e 	bne	r2,zero,480dc <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
   48090:	e0bffd17 	ldw	r2,-12(fp)
   48094:	10801703 	ldbu	r2,92(r2)
   48098:	10803fcc 	andi	r2,r2,255
   4809c:	e0fffd17 	ldw	r3,-12(fp)
   480a0:	1885883a 	add	r2,r3,r2
   480a4:	10800704 	addi	r2,r2,28
   480a8:	10800003 	ldbu	r2,0(r2)
   480ac:	10803fcc 	andi	r2,r2,255
   480b0:	10002a1e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
   480b4:	e0bffd17 	ldw	r2,-12(fp)
   480b8:	10801703 	ldbu	r2,92(r2)
   480bc:	10803fcc 	andi	r2,r2,255
   480c0:	10800044 	addi	r2,r2,1
   480c4:	e0fffd17 	ldw	r3,-12(fp)
   480c8:	1885883a 	add	r2,r3,r2
   480cc:	10800704 	addi	r2,r2,28
   480d0:	10800003 	ldbu	r2,0(r2)
   480d4:	10803fcc 	andi	r2,r2,255
   480d8:	1000201e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
   480dc:	e0bffd17 	ldw	r2,-12(fp)
   480e0:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
   480e4:	e0bffd17 	ldw	r2,-12(fp)
   480e8:	10c00704 	addi	r3,r2,28
   480ec:	e0bffc04 	addi	r2,fp,-16
   480f0:	180d883a 	mov	r6,r3
   480f4:	100b883a 	mov	r5,r2
   480f8:	e13ffd17 	ldw	r4,-12(fp)
   480fc:	0047f580 	call	47f58 <_ZN9USBH_MIDI8RecvDataEPtPh>
   48100:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
   48104:	e0bffb03 	ldbu	r2,-20(fp)
   48108:	10000226 	beq	r2,zero,48114 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
   4810c:	0005883a 	mov	r2,zero
   48110:	00005b06 	br	48280 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
   48114:	e0bffd17 	ldw	r2,-12(fp)
   48118:	10800703 	ldbu	r2,28(r2)
   4811c:	10803fcc 	andi	r2,r2,255
   48120:	10000e1e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
   48124:	e0bffd17 	ldw	r2,-12(fp)
   48128:	10800743 	ldbu	r2,29(r2)
   4812c:	10803fcc 	andi	r2,r2,255
   48130:	10000a1e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
   48134:	e0bffd17 	ldw	r2,-12(fp)
   48138:	10800783 	ldbu	r2,30(r2)
   4813c:	10803fcc 	andi	r2,r2,255
   48140:	1000061e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
   48144:	e0bffd17 	ldw	r2,-12(fp)
   48148:	108007c3 	ldbu	r2,31(r2)
   4814c:	10803fcc 	andi	r2,r2,255
   48150:	1000021e 	bne	r2,zero,4815c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
   48154:	0005883a 	mov	r2,zero
   48158:	00004906 	br	48280 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
   4815c:	e0bffd17 	ldw	r2,-12(fp)
   48160:	10801703 	ldbu	r2,92(r2)
   48164:	10803fcc 	andi	r2,r2,255
   48168:	e0fffd17 	ldw	r3,-12(fp)
   4816c:	1885883a 	add	r2,r3,r2
   48170:	10800704 	addi	r2,r2,28
   48174:	10800003 	ldbu	r2,0(r2)
   48178:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
   4817c:	e0bfff03 	ldbu	r2,-4(fp)
   48180:	10000526 	beq	r2,zero,48198 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
   48184:	e0bffe17 	ldw	r2,-8(fp)
   48188:	10c00044 	addi	r3,r2,1
   4818c:	e0fffe15 	stw	r3,-8(fp)
   48190:	e0fffb43 	ldbu	r3,-19(fp)
   48194:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
   48198:	e0bffd17 	ldw	r2,-12(fp)
   4819c:	10801703 	ldbu	r2,92(r2)
   481a0:	10800044 	addi	r2,r2,1
   481a4:	1007883a 	mov	r3,r2
   481a8:	e0bffd17 	ldw	r2,-12(fp)
   481ac:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
   481b0:	e0bffe17 	ldw	r2,-8(fp)
   481b4:	10c00044 	addi	r3,r2,1
   481b8:	e0fffe15 	stw	r3,-8(fp)
   481bc:	e0fffd17 	ldw	r3,-12(fp)
   481c0:	18c01703 	ldbu	r3,92(r3)
   481c4:	19000044 	addi	r4,r3,1
   481c8:	200b883a 	mov	r5,r4
   481cc:	e13ffd17 	ldw	r4,-12(fp)
   481d0:	21401705 	stb	r5,92(r4)
   481d4:	18c03fcc 	andi	r3,r3,255
   481d8:	e13ffd17 	ldw	r4,-12(fp)
   481dc:	20c7883a 	add	r3,r4,r3
   481e0:	18c00704 	addi	r3,r3,28
   481e4:	18c00003 	ldbu	r3,0(r3)
   481e8:	e0fffb85 	stb	r3,-18(fp)
   481ec:	e0fffb83 	ldbu	r3,-18(fp)
   481f0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
   481f4:	e0bffe17 	ldw	r2,-8(fp)
   481f8:	10c00044 	addi	r3,r2,1
   481fc:	e0fffe15 	stw	r3,-8(fp)
   48200:	e0fffd17 	ldw	r3,-12(fp)
   48204:	18c01703 	ldbu	r3,92(r3)
   48208:	19000044 	addi	r4,r3,1
   4820c:	200b883a 	mov	r5,r4
   48210:	e13ffd17 	ldw	r4,-12(fp)
   48214:	21401705 	stb	r5,92(r4)
   48218:	18c03fcc 	andi	r3,r3,255
   4821c:	e13ffd17 	ldw	r4,-12(fp)
   48220:	20c7883a 	add	r3,r4,r3
   48224:	18c00704 	addi	r3,r3,28
   48228:	18c00003 	ldbu	r3,0(r3)
   4822c:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
   48230:	e0bffe17 	ldw	r2,-8(fp)
   48234:	10c00044 	addi	r3,r2,1
   48238:	e0fffe15 	stw	r3,-8(fp)
   4823c:	e0fffd17 	ldw	r3,-12(fp)
   48240:	18c01703 	ldbu	r3,92(r3)
   48244:	19000044 	addi	r4,r3,1
   48248:	200b883a 	mov	r5,r4
   4824c:	e13ffd17 	ldw	r4,-12(fp)
   48250:	21401705 	stb	r5,92(r4)
   48254:	18c03fcc 	andi	r3,r3,255
   48258:	e13ffd17 	ldw	r4,-12(fp)
   4825c:	20c7883a 	add	r3,r4,r3
   48260:	18c00704 	addi	r3,r3,28
   48264:	18c00003 	ldbu	r3,0(r3)
   48268:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
   4826c:	e0bffb43 	ldbu	r2,-19(fp)
   48270:	108003cc 	andi	r2,r2,15
   48274:	100b883a 	mov	r5,r2
   48278:	e13ffd17 	ldw	r4,-12(fp)
   4827c:	00492dc0 	call	492dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
   48280:	e037883a 	mov	sp,fp
   48284:	dfc00117 	ldw	ra,4(sp)
   48288:	df000017 	ldw	fp,0(sp)
   4828c:	dec00204 	addi	sp,sp,8
   48290:	f800283a 	ret

00048294 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
   48294:	defff804 	addi	sp,sp,-32
   48298:	dfc00715 	stw	ra,28(sp)
   4829c:	df000615 	stw	fp,24(sp)
   482a0:	df000604 	addi	fp,sp,24
   482a4:	e13ffd15 	stw	r4,-12(fp)
   482a8:	e17ffe15 	stw	r5,-8(fp)
   482ac:	3005883a 	mov	r2,r6
   482b0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
   482b4:	e0bffe17 	ldw	r2,-8(fp)
   482b8:	10800003 	ldbu	r2,0(r2)
   482bc:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
   482c0:	e0bffb03 	ldbu	r2,-20(fp)
   482c4:	100b883a 	mov	r5,r2
   482c8:	e13ffd17 	ldw	r4,-12(fp)
   482cc:	00492840 	call	49284 <_ZN9USBH_MIDI17convertStatus2CinEh>
   482d0:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
   482d4:	e0bffb03 	ldbu	r2,-20(fp)
   482d8:	10803c18 	cmpnei	r2,r2,240
   482dc:	10000b1e 	bne	r2,zero,4830c <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
   482e0:	e17ffe17 	ldw	r5,-8(fp)
   482e4:	e13ffd17 	ldw	r4,-12(fp)
   482e8:	00484540 	call	48454 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
   482ec:	10bfffcc 	andi	r2,r2,65535
   482f0:	e0ffff03 	ldbu	r3,-4(fp)
   482f4:	180f883a 	mov	r7,r3
   482f8:	100d883a 	mov	r6,r2
   482fc:	e17ffe17 	ldw	r5,-8(fp)
   48300:	e13ffd17 	ldw	r4,-12(fp)
   48304:	00484dc0 	call	484dc <_ZN9USBH_MIDI9SendSysExEPhth>
   48308:	00003406 	br	483dc <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
   4830c:	e0bfff03 	ldbu	r2,-4(fp)
   48310:	1004913a 	slli	r2,r2,4
   48314:	1007883a 	mov	r3,r2
   48318:	e0bffb43 	ldbu	r2,-19(fp)
   4831c:	1884b03a 	or	r2,r3,r2
   48320:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
   48324:	e0bffe17 	ldw	r2,-8(fp)
   48328:	10800003 	ldbu	r2,0(r2)
   4832c:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
   48330:	e0bffb43 	ldbu	r2,-19(fp)
   48334:	100b883a 	mov	r5,r2
   48338:	e13ffd17 	ldw	r4,-12(fp)
   4833c:	00492dc0 	call	492dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
   48340:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
   48344:	e0bffb83 	ldbu	r2,-18(fp)
   48348:	10c000a0 	cmpeqi	r3,r2,2
   4834c:	18000c1e 	bne	r3,zero,48380 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
   48350:	10c000e0 	cmpeqi	r3,r2,3
   48354:	1800031e 	bne	r3,zero,48364 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
   48358:	10800060 	cmpeqi	r2,r2,1
   4835c:	10000d1e 	bne	r2,zero,48394 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
   48360:	00000f06 	br	483a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
   48364:	e0bffe17 	ldw	r2,-8(fp)
   48368:	10800043 	ldbu	r2,1(r2)
   4836c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
   48370:	e0bffe17 	ldw	r2,-8(fp)
   48374:	10800083 	ldbu	r2,2(r2)
   48378:	e0bffc85 	stb	r2,-14(fp)
                break;
   4837c:	00000806 	br	483a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
   48380:	e0bffe17 	ldw	r2,-8(fp)
   48384:	10800043 	ldbu	r2,1(r2)
   48388:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
   4838c:	e03ffc85 	stb	zero,-14(fp)
                break;
   48390:	00000306 	br	483a0 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
   48394:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
   48398:	e03ffc85 	stb	zero,-14(fp)
                break;
   4839c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
   483a0:	e0bffd17 	ldw	r2,-12(fp)
   483a4:	10c00217 	ldw	r3,8(r2)
   483a8:	e0bffd17 	ldw	r2,-12(fp)
   483ac:	10800303 	ldbu	r2,12(r2)
   483b0:	11003fcc 	andi	r4,r2,255
   483b4:	e0bffd17 	ldw	r2,-12(fp)
   483b8:	10800643 	ldbu	r2,25(r2)
   483bc:	11403fcc 	andi	r5,r2,255
   483c0:	e0bffbc4 	addi	r2,fp,-17
   483c4:	d8800015 	stw	r2,0(sp)
   483c8:	01c00104 	movi	r7,4
   483cc:	280d883a 	mov	r6,r5
   483d0:	200b883a 	mov	r5,r4
   483d4:	1809883a 	mov	r4,r3
   483d8:	00412400 	call	41240 <_ZN3USB11outTransferEhhtPh>
}
   483dc:	e037883a 	mov	sp,fp
   483e0:	dfc00117 	ldw	ra,4(sp)
   483e4:	df000017 	ldw	fp,0(sp)
   483e8:	dec00204 	addi	sp,sp,8
   483ec:	f800283a 	ret

000483f0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
   483f0:	defffb04 	addi	sp,sp,-20
   483f4:	dfc00415 	stw	ra,16(sp)
   483f8:	df000315 	stw	fp,12(sp)
   483fc:	df000304 	addi	fp,sp,12
   48400:	e13ffd15 	stw	r4,-12(fp)
   48404:	2807883a 	mov	r3,r5
   48408:	3005883a 	mov	r2,r6
   4840c:	e0fffe05 	stb	r3,-8(fp)
   48410:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
   48414:	e0bfff03 	ldbu	r2,-4(fp)
   48418:	1000051e 	bne	r2,zero,48430 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
   4841c:	e0bffe03 	ldbu	r2,-8(fp)
   48420:	100b883a 	mov	r5,r2
   48424:	e13ffd17 	ldw	r4,-12(fp)
   48428:	00492840 	call	49284 <_ZN9USBH_MIDI17convertStatus2CinEh>
   4842c:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
   48430:	e0bfff03 	ldbu	r2,-4(fp)
   48434:	100b883a 	mov	r5,r2
   48438:	e13ffd17 	ldw	r4,-12(fp)
   4843c:	00492dc0 	call	492dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
   48440:	e037883a 	mov	sp,fp
   48444:	dfc00117 	ldw	ra,4(sp)
   48448:	df000017 	ldw	fp,0(sp)
   4844c:	dec00204 	addi	sp,sp,8
   48450:	f800283a 	ret

00048454 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
   48454:	defffc04 	addi	sp,sp,-16
   48458:	df000315 	stw	fp,12(sp)
   4845c:	df000304 	addi	fp,sp,12
   48460:	e13ffe15 	stw	r4,-8(fp)
   48464:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
   48468:	00800044 	movi	r2,1
   4846c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
   48470:	e0bfff17 	ldw	r2,-4(fp)
   48474:	10800003 	ldbu	r2,0(r2)
   48478:	10803fcc 	andi	r2,r2,255
   4847c:	10803c20 	cmpeqi	r2,r2,240
   48480:	1000021e 	bne	r2,zero,4848c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
   48484:	0005883a 	mov	r2,zero
   48488:	00001006 	br	484cc <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
   4848c:	e0bfff17 	ldw	r2,-4(fp)
   48490:	10800003 	ldbu	r2,0(r2)
   48494:	10803fcc 	andi	r2,r2,255
   48498:	10803de0 	cmpeqi	r2,r2,247
   4849c:	10000a1e 	bne	r2,zero,484c8 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
   484a0:	e0bfff17 	ldw	r2,-4(fp)
   484a4:	10800044 	addi	r2,r2,1
   484a8:	e0bfff15 	stw	r2,-4(fp)
                c++;
   484ac:	e0bffd0b 	ldhu	r2,-12(fp)
   484b0:	10800044 	addi	r2,r2,1
   484b4:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
   484b8:	e0bffd0b 	ldhu	r2,-12(fp)
   484bc:	10804070 	cmpltui	r2,r2,257
   484c0:	103ff21e 	bne	r2,zero,4848c <__alt_data_end+0xfffc848c>
                        c = 0;
   484c4:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
   484c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   484cc:	e037883a 	mov	sp,fp
   484d0:	df000017 	ldw	fp,0(sp)
   484d4:	dec00104 	addi	sp,sp,4
   484d8:	f800283a 	ret

000484dc <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
   484dc:	deffe704 	addi	sp,sp,-100
   484e0:	dfc01815 	stw	ra,96(sp)
   484e4:	df001715 	stw	fp,92(sp)
   484e8:	df001704 	addi	fp,sp,92
   484ec:	e13ffc15 	stw	r4,-16(fp)
   484f0:	e17ffd15 	stw	r5,-12(fp)
   484f4:	3007883a 	mov	r3,r6
   484f8:	3805883a 	mov	r2,r7
   484fc:	e0fffe0d 	sth	r3,-8(fp)
   48500:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
   48504:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
   48508:	e0bffe0b 	ldhu	r2,-8(fp)
   4850c:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
   48510:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
   48514:	e0bffc17 	ldw	r2,-16(fp)
   48518:	108005c3 	ldbu	r2,23(r2)
   4851c:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
   48520:	e0bffe0b 	ldhu	r2,-8(fp)
   48524:	01402004 	movi	r5,128
   48528:	1009883a 	mov	r4,r2
   4852c:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
   48530:	e0bfea8b 	ldhu	r2,-86(fp)
   48534:	1000b026 	beq	r2,zero,487f8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
   48538:	e0bfeb03 	ldbu	r2,-84(fp)
   4853c:	e0ffff03 	ldbu	r3,-4(fp)
   48540:	1806913a 	slli	r3,r3,4
   48544:	18c00114 	ori	r3,r3,4
   48548:	1809883a 	mov	r4,r3
   4854c:	e0ffeb84 	addi	r3,fp,-82
   48550:	1885883a 	add	r2,r3,r2
   48554:	11000005 	stb	r4,0(r2)

                switch ( n ) {
   48558:	e0bfea8b 	ldhu	r2,-86(fp)
   4855c:	10c000a0 	cmpeqi	r3,r2,2
   48560:	18002a1e 	bne	r3,zero,4860c <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
   48564:	10c000e0 	cmpeqi	r3,r2,3
   48568:	1800521e 	bne	r3,zero,486b4 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
   4856c:	10800060 	cmpeqi	r2,r2,1
   48570:	10005826 	beq	r2,zero,486d4 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
   48574:	e0bfeb03 	ldbu	r2,-84(fp)
   48578:	10c00044 	addi	r3,r2,1
   4857c:	e0ffeb05 	stb	r3,-84(fp)
   48580:	10803fcc 	andi	r2,r2,255
   48584:	e0ffff03 	ldbu	r3,-4(fp)
   48588:	1806913a 	slli	r3,r3,4
   4858c:	18c00154 	ori	r3,r3,5
   48590:	1809883a 	mov	r4,r3
   48594:	e0ffeb84 	addi	r3,fp,-82
   48598:	1885883a 	add	r2,r3,r2
   4859c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
   485a0:	e0bfeb03 	ldbu	r2,-84(fp)
   485a4:	10c00044 	addi	r3,r2,1
   485a8:	e0ffeb05 	stb	r3,-84(fp)
   485ac:	11003fcc 	andi	r4,r2,255
   485b0:	e0bffd17 	ldw	r2,-12(fp)
   485b4:	10c00044 	addi	r3,r2,1
   485b8:	e0fffd15 	stw	r3,-12(fp)
   485bc:	10c00003 	ldbu	r3,0(r2)
   485c0:	e0bfeb84 	addi	r2,fp,-82
   485c4:	1105883a 	add	r2,r2,r4
   485c8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
   485cc:	e0bfeb03 	ldbu	r2,-84(fp)
   485d0:	10c00044 	addi	r3,r2,1
   485d4:	e0ffeb05 	stb	r3,-84(fp)
   485d8:	10803fcc 	andi	r2,r2,255
   485dc:	e0ffeb84 	addi	r3,fp,-82
   485e0:	1885883a 	add	r2,r3,r2
   485e4:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
   485e8:	e0bfeb03 	ldbu	r2,-84(fp)
   485ec:	10c00044 	addi	r3,r2,1
   485f0:	e0ffeb05 	stb	r3,-84(fp)
   485f4:	10803fcc 	andi	r2,r2,255
   485f8:	e0ffeb84 	addi	r3,fp,-82
   485fc:	1885883a 	add	r2,r3,r2
   48600:	10000005 	stb	zero,0(r2)
                        n = 0;
   48604:	e03fea8d 	sth	zero,-86(fp)
                        break;
   48608:	00005a06 	br	48774 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
   4860c:	e0bfeb03 	ldbu	r2,-84(fp)
   48610:	10c00044 	addi	r3,r2,1
   48614:	e0ffeb05 	stb	r3,-84(fp)
   48618:	10803fcc 	andi	r2,r2,255
   4861c:	e0ffff03 	ldbu	r3,-4(fp)
   48620:	1806913a 	slli	r3,r3,4
   48624:	18c00194 	ori	r3,r3,6
   48628:	1809883a 	mov	r4,r3
   4862c:	e0ffeb84 	addi	r3,fp,-82
   48630:	1885883a 	add	r2,r3,r2
   48634:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
   48638:	e0bfeb03 	ldbu	r2,-84(fp)
   4863c:	10c00044 	addi	r3,r2,1
   48640:	e0ffeb05 	stb	r3,-84(fp)
   48644:	11003fcc 	andi	r4,r2,255
   48648:	e0bffd17 	ldw	r2,-12(fp)
   4864c:	10c00044 	addi	r3,r2,1
   48650:	e0fffd15 	stw	r3,-12(fp)
   48654:	10c00003 	ldbu	r3,0(r2)
   48658:	e0bfeb84 	addi	r2,fp,-82
   4865c:	1105883a 	add	r2,r2,r4
   48660:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
   48664:	e0bfeb03 	ldbu	r2,-84(fp)
   48668:	10c00044 	addi	r3,r2,1
   4866c:	e0ffeb05 	stb	r3,-84(fp)
   48670:	11003fcc 	andi	r4,r2,255
   48674:	e0bffd17 	ldw	r2,-12(fp)
   48678:	10c00044 	addi	r3,r2,1
   4867c:	e0fffd15 	stw	r3,-12(fp)
   48680:	10c00003 	ldbu	r3,0(r2)
   48684:	e0bfeb84 	addi	r2,fp,-82
   48688:	1105883a 	add	r2,r2,r4
   4868c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
   48690:	e0bfeb03 	ldbu	r2,-84(fp)
   48694:	10c00044 	addi	r3,r2,1
   48698:	e0ffeb05 	stb	r3,-84(fp)
   4869c:	10803fcc 	andi	r2,r2,255
   486a0:	e0ffeb84 	addi	r3,fp,-82
   486a4:	1885883a 	add	r2,r3,r2
   486a8:	10000005 	stb	zero,0(r2)
                        n = 0;
   486ac:	e03fea8d 	sth	zero,-86(fp)
                        break;
   486b0:	00003006 	br	48774 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
   486b4:	e0bfeb03 	ldbu	r2,-84(fp)
   486b8:	e0ffff03 	ldbu	r3,-4(fp)
   486bc:	1806913a 	slli	r3,r3,4
   486c0:	18c001d4 	ori	r3,r3,7
   486c4:	1809883a 	mov	r4,r3
   486c8:	e0ffeb84 	addi	r3,fp,-82
   486cc:	1885883a 	add	r2,r3,r2
   486d0:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
   486d4:	e0bfeb03 	ldbu	r2,-84(fp)
   486d8:	10800044 	addi	r2,r2,1
   486dc:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
   486e0:	e0bfeb03 	ldbu	r2,-84(fp)
   486e4:	10c00044 	addi	r3,r2,1
   486e8:	e0ffeb05 	stb	r3,-84(fp)
   486ec:	11003fcc 	andi	r4,r2,255
   486f0:	e0bffd17 	ldw	r2,-12(fp)
   486f4:	10c00044 	addi	r3,r2,1
   486f8:	e0fffd15 	stw	r3,-12(fp)
   486fc:	10c00003 	ldbu	r3,0(r2)
   48700:	e0bfeb84 	addi	r2,fp,-82
   48704:	1105883a 	add	r2,r2,r4
   48708:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
   4870c:	e0bfeb03 	ldbu	r2,-84(fp)
   48710:	10c00044 	addi	r3,r2,1
   48714:	e0ffeb05 	stb	r3,-84(fp)
   48718:	11003fcc 	andi	r4,r2,255
   4871c:	e0bffd17 	ldw	r2,-12(fp)
   48720:	10c00044 	addi	r3,r2,1
   48724:	e0fffd15 	stw	r3,-12(fp)
   48728:	10c00003 	ldbu	r3,0(r2)
   4872c:	e0bfeb84 	addi	r2,fp,-82
   48730:	1105883a 	add	r2,r2,r4
   48734:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
   48738:	e0bfeb03 	ldbu	r2,-84(fp)
   4873c:	10c00044 	addi	r3,r2,1
   48740:	e0ffeb05 	stb	r3,-84(fp)
   48744:	11003fcc 	andi	r4,r2,255
   48748:	e0bffd17 	ldw	r2,-12(fp)
   4874c:	10c00044 	addi	r3,r2,1
   48750:	e0fffd15 	stw	r3,-12(fp)
   48754:	10c00003 	ldbu	r3,0(r2)
   48758:	e0bfeb84 	addi	r2,fp,-82
   4875c:	1105883a 	add	r2,r2,r4
   48760:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
   48764:	e0bfea8b 	ldhu	r2,-86(fp)
   48768:	10bfff44 	addi	r2,r2,-3
   4876c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
   48770:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
   48774:	e0ffeb03 	ldbu	r3,-84(fp)
   48778:	e0bfeb43 	ldbu	r2,-83(fp)
   4877c:	1880022e 	bgeu	r3,r2,48788 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
   48780:	e0bfea8b 	ldhu	r2,-86(fp)
   48784:	103f6a1e 	bne	r2,zero,48530 <__alt_data_end+0xfffc8530>
                        USBTRACE2(" wptr:\t", wptr);
   48788:	e0bfeb03 	ldbu	r2,-84(fp)
   4878c:	01402004 	movi	r5,128
   48790:	1009883a 	mov	r4,r2
   48794:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
   48798:	e0bffc17 	ldw	r2,-16(fp)
   4879c:	10c00217 	ldw	r3,8(r2)
   487a0:	e0bffc17 	ldw	r2,-16(fp)
   487a4:	10800303 	ldbu	r2,12(r2)
   487a8:	11003fcc 	andi	r4,r2,255
   487ac:	e0bffc17 	ldw	r2,-16(fp)
   487b0:	10800643 	ldbu	r2,25(r2)
   487b4:	11403fcc 	andi	r5,r2,255
   487b8:	e1bfeb03 	ldbu	r6,-84(fp)
   487bc:	e0bfeb84 	addi	r2,fp,-82
   487c0:	d8800015 	stw	r2,0(sp)
   487c4:	300f883a 	mov	r7,r6
   487c8:	280d883a 	mov	r6,r5
   487cc:	200b883a 	mov	r5,r4
   487d0:	1809883a 	mov	r4,r3
   487d4:	00412400 	call	41240 <_ZN3USB11outTransferEhhtPh>
   487d8:	e0bfea05 	stb	r2,-88(fp)
   487dc:	e0bfea03 	ldbu	r2,-88(fp)
   487e0:	1004c03a 	cmpne	r2,r2,zero
   487e4:	10803fcc 	andi	r2,r2,255
   487e8:	1000021e 	bne	r2,zero,487f4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
   487ec:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
   487f0:	003f4f06 	br	48530 <__alt_data_end+0xfffc8530>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
   487f4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
   487f8:	e0bfea03 	ldbu	r2,-88(fp)
}
   487fc:	e037883a 	mov	sp,fp
   48800:	dfc00117 	ldw	ra,4(sp)
   48804:	df000017 	ldw	fp,0(sp)
   48808:	dec00204 	addi	sp,sp,8
   4880c:	f800283a 	ret

00048810 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
   48810:	defffb04 	addi	sp,sp,-20
   48814:	df000415 	stw	fp,16(sp)
   48818:	df000404 	addi	fp,sp,16
   4881c:	e13ffd15 	stw	r4,-12(fp)
   48820:	e17ffe15 	stw	r5,-8(fp)
   48824:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
   48828:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
   4882c:	e0bffe17 	ldw	r2,-8(fp)
   48830:	10800003 	ldbu	r2,0(r2)
   48834:	108003cc 	andi	r2,r2,15
   48838:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
   4883c:	e0bffc43 	ldbu	r2,-15(fp)
   48840:	1080030c 	andi	r2,r2,12
   48844:	10800120 	cmpeqi	r2,r2,4
   48848:	1000021e 	bne	r2,zero,48854 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
   4884c:	e0bffc03 	ldbu	r2,-16(fp)
   48850:	00003b06 	br	48940 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
   48854:	e0bffc43 	ldbu	r2,-15(fp)
   48858:	10c00160 	cmpeqi	r3,r2,5
   4885c:	18002e1e 	bne	r3,zero,48918 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
   48860:	10c00188 	cmpgei	r3,r2,6
   48864:	1800031e 	bne	r3,zero,48874 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
   48868:	10800120 	cmpeqi	r2,r2,4
   4886c:	1000061e 	bne	r2,zero,48888 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
   48870:	00003206 	br	4893c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
   48874:	10c001a0 	cmpeqi	r3,r2,6
   48878:	1800181e 	bne	r3,zero,488dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
   4887c:	108001e0 	cmpeqi	r2,r2,7
   48880:	1000011e 	bne	r2,zero,48888 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
   48884:	00002d06 	br	4893c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
   48888:	e0bfff17 	ldw	r2,-4(fp)
   4888c:	10c00044 	addi	r3,r2,1
   48890:	e0ffff15 	stw	r3,-4(fp)
   48894:	e0fffe17 	ldw	r3,-8(fp)
   48898:	18c00043 	ldbu	r3,1(r3)
   4889c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
   488a0:	e0bfff17 	ldw	r2,-4(fp)
   488a4:	10c00044 	addi	r3,r2,1
   488a8:	e0ffff15 	stw	r3,-4(fp)
   488ac:	e0fffe17 	ldw	r3,-8(fp)
   488b0:	18c00083 	ldbu	r3,2(r3)
   488b4:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
   488b8:	e0bfff17 	ldw	r2,-4(fp)
   488bc:	10c00044 	addi	r3,r2,1
   488c0:	e0ffff15 	stw	r3,-4(fp)
   488c4:	e0fffe17 	ldw	r3,-8(fp)
   488c8:	18c000c3 	ldbu	r3,3(r3)
   488cc:	10c00005 	stb	r3,0(r2)
                rc = 3;
   488d0:	008000c4 	movi	r2,3
   488d4:	e0bffc05 	stb	r2,-16(fp)
                break;
   488d8:	00001806 	br	4893c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
   488dc:	e0bfff17 	ldw	r2,-4(fp)
   488e0:	10c00044 	addi	r3,r2,1
   488e4:	e0ffff15 	stw	r3,-4(fp)
   488e8:	e0fffe17 	ldw	r3,-8(fp)
   488ec:	18c00043 	ldbu	r3,1(r3)
   488f0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
   488f4:	e0bfff17 	ldw	r2,-4(fp)
   488f8:	10c00044 	addi	r3,r2,1
   488fc:	e0ffff15 	stw	r3,-4(fp)
   48900:	e0fffe17 	ldw	r3,-8(fp)
   48904:	18c00083 	ldbu	r3,2(r3)
   48908:	10c00005 	stb	r3,0(r2)
                rc = 2;
   4890c:	00800084 	movi	r2,2
   48910:	e0bffc05 	stb	r2,-16(fp)
                break;
   48914:	00000906 	br	4893c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
   48918:	e0bfff17 	ldw	r2,-4(fp)
   4891c:	10c00044 	addi	r3,r2,1
   48920:	e0ffff15 	stw	r3,-4(fp)
   48924:	e0fffe17 	ldw	r3,-8(fp)
   48928:	18c00043 	ldbu	r3,1(r3)
   4892c:	10c00005 	stb	r3,0(r2)
                rc = 1;
   48930:	00800044 	movi	r2,1
   48934:	e0bffc05 	stb	r2,-16(fp)
                break;
   48938:	0001883a 	nop
            default:
                break;
        }
        return(rc);
   4893c:	e0bffc03 	ldbu	r2,-16(fp)
}
   48940:	e037883a 	mov	sp,fp
   48944:	df000017 	ldw	fp,0(sp)
   48948:	dec00104 	addi	sp,sp,4
   4894c:	f800283a 	ret

00048950 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
   48950:	defffb04 	addi	sp,sp,-20
   48954:	dfc00415 	stw	ra,16(sp)
   48958:	df000315 	stw	fp,12(sp)
   4895c:	df000304 	addi	fp,sp,12
   48960:	e13ffd15 	stw	r4,-12(fp)
   48964:	e17ffe15 	stw	r5,-8(fp)
   48968:	3005883a 	mov	r2,r6
   4896c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
   48970:	e0bffd17 	ldw	r2,-12(fp)
   48974:	1009883a 	mov	r4,r2
   48978:	0044ef00 	call	44ef0 <_ZN13USBReadParserC1Ev>
   4897c:	008001b4 	movhi	r2,6
   48980:	109ca804 	addi	r2,r2,29344
   48984:	e0fffd17 	ldw	r3,-12(fp)
   48988:	18800015 	stw	r2,0(r3)
   4898c:	e0bffd17 	ldw	r2,-12(fp)
   48990:	e0fffe17 	ldw	r3,-8(fp)
   48994:	10c00115 	stw	r3,4(r2)
   48998:	e0bffd17 	ldw	r2,-12(fp)
   4899c:	10800204 	addi	r2,r2,8
   489a0:	1009883a 	mov	r4,r2
   489a4:	00447e00 	call	447e0 <_ZN16MultiValueBufferC1Ev>
   489a8:	e0bffd17 	ldw	r2,-12(fp)
   489ac:	10800404 	addi	r2,r2,16
   489b0:	1009883a 	mov	r4,r2
   489b4:	00448400 	call	44840 <_ZN20MultiByteValueParserC1Ev>
   489b8:	e0bffd17 	ldw	r2,-12(fp)
   489bc:	10800604 	addi	r2,r2,24
   489c0:	1009883a 	mov	r4,r2
   489c4:	00448fc0 	call	448fc <_ZN11ByteSkipperC1Ev>
   489c8:	e0bffd17 	ldw	r2,-12(fp)
   489cc:	10000c05 	stb	zero,48(r2)
   489d0:	e0bffd17 	ldw	r2,-12(fp)
   489d4:	10000c45 	stb	zero,49(r2)
   489d8:	e0bffd17 	ldw	r2,-12(fp)
   489dc:	10000c85 	stb	zero,50(r2)
   489e0:	e0bffd17 	ldw	r2,-12(fp)
   489e4:	10000cc5 	stb	zero,51(r2)
   489e8:	e0bffd17 	ldw	r2,-12(fp)
   489ec:	e0ffff03 	ldbu	r3,-4(fp)
   489f0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
   489f4:	e0bffd17 	ldw	r2,-12(fp)
   489f8:	10c00804 	addi	r3,r2,32
   489fc:	e0bffd17 	ldw	r2,-12(fp)
   48a00:	19803fcc 	andi	r6,r3,255
   48a04:	11000243 	ldbu	r4,9(r2)
   48a08:	2008703a 	and	r4,r4,zero
   48a0c:	200b883a 	mov	r5,r4
   48a10:	3009883a 	mov	r4,r6
   48a14:	2908b03a 	or	r4,r5,r4
   48a18:	11000245 	stb	r4,9(r2)
   48a1c:	1808d23a 	srli	r4,r3,8
   48a20:	21803fcc 	andi	r6,r4,255
   48a24:	11000283 	ldbu	r4,10(r2)
   48a28:	2008703a 	and	r4,r4,zero
   48a2c:	200b883a 	mov	r5,r4
   48a30:	3009883a 	mov	r4,r6
   48a34:	2908b03a 	or	r4,r5,r4
   48a38:	11000285 	stb	r4,10(r2)
   48a3c:	1808d43a 	srli	r4,r3,16
   48a40:	21803fcc 	andi	r6,r4,255
   48a44:	110002c3 	ldbu	r4,11(r2)
   48a48:	2008703a 	and	r4,r4,zero
   48a4c:	200b883a 	mov	r5,r4
   48a50:	3009883a 	mov	r4,r6
   48a54:	2908b03a 	or	r4,r5,r4
   48a58:	110002c5 	stb	r4,11(r2)
   48a5c:	180ad63a 	srli	r5,r3,24
   48a60:	10c00303 	ldbu	r3,12(r2)
   48a64:	1806703a 	and	r3,r3,zero
   48a68:	1809883a 	mov	r4,r3
   48a6c:	2807883a 	mov	r3,r5
   48a70:	20c6b03a 	or	r3,r4,r3
   48a74:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
   48a78:	e0bffd17 	ldw	r2,-12(fp)
   48a7c:	10c00404 	addi	r3,r2,16
   48a80:	e0bffd17 	ldw	r2,-12(fp)
   48a84:	10800204 	addi	r2,r2,8
   48a88:	100b883a 	mov	r5,r2
   48a8c:	1809883a 	mov	r4,r3
   48a90:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
   48a94:	e0bffd17 	ldw	r2,-12(fp)
   48a98:	10c00604 	addi	r3,r2,24
   48a9c:	e0bffd17 	ldw	r2,-12(fp)
   48aa0:	10800204 	addi	r2,r2,8
   48aa4:	100b883a 	mov	r5,r2
   48aa8:	1809883a 	mov	r4,r3
   48aac:	00449380 	call	44938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
   48ab0:	0001883a 	nop
   48ab4:	e037883a 	mov	sp,fp
   48ab8:	dfc00117 	ldw	ra,4(sp)
   48abc:	df000017 	ldw	fp,0(sp)
   48ac0:	dec00204 	addi	sp,sp,8
   48ac4:	f800283a 	ret

00048ac8 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
   48ac8:	defff804 	addi	sp,sp,-32
   48acc:	dfc00715 	stw	ra,28(sp)
   48ad0:	df000615 	stw	fp,24(sp)
   48ad4:	df000604 	addi	fp,sp,24
   48ad8:	e13ffc15 	stw	r4,-16(fp)
   48adc:	2805883a 	mov	r2,r5
   48ae0:	e1bffe15 	stw	r6,-8(fp)
   48ae4:	e1ffff15 	stw	r7,-4(fp)
   48ae8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
   48aec:	e0bffd0b 	ldhu	r2,-12(fp)
   48af0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
   48af4:	e0bffe17 	ldw	r2,-8(fp)
   48af8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
   48afc:	e0bffa0b 	ldhu	r2,-24(fp)
   48b00:	10bfffcc 	andi	r2,r2,65535
   48b04:	10000a26 	beq	r2,zero,48b30 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
   48b08:	e0bffb04 	addi	r2,fp,-20
   48b0c:	e1bffa04 	addi	r6,fp,-24
   48b10:	100b883a 	mov	r5,r2
   48b14:	e13ffc17 	ldw	r4,-16(fp)
   48b18:	0048b440 	call	48b44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
   48b1c:	1080005c 	xori	r2,r2,1
   48b20:	10803fcc 	andi	r2,r2,255
   48b24:	1000011e 	bne	r2,zero,48b2c <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
   48b28:	003ff406 	br	48afc <__alt_data_end+0xfffc8afc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
   48b2c:	0001883a 	nop
}
   48b30:	e037883a 	mov	sp,fp
   48b34:	dfc00117 	ldw	ra,4(sp)
   48b38:	df000017 	ldw	fp,0(sp)
   48b3c:	dec00204 	addi	sp,sp,8
   48b40:	f800283a 	ret

00048b44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
   48b44:	defff604 	addi	sp,sp,-40
   48b48:	dfc00915 	stw	ra,36(sp)
   48b4c:	df000815 	stw	fp,32(sp)
   48b50:	df000804 	addi	fp,sp,32
   48b54:	e13ffc15 	stw	r4,-16(fp)
   48b58:	e17ffd15 	stw	r5,-12(fp)
   48b5c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
   48b60:	e0bffc17 	ldw	r2,-16(fp)
   48b64:	10800804 	addi	r2,r2,32
   48b68:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
   48b6c:	e0bffc17 	ldw	r2,-16(fp)
   48b70:	10800804 	addi	r2,r2,32
   48b74:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
   48b78:	e0bffc17 	ldw	r2,-16(fp)
   48b7c:	10800c03 	ldbu	r2,48(r2)
   48b80:	10803fcc 	andi	r2,r2,255
   48b84:	10c00168 	cmpgeui	r3,r2,5
   48b88:	1801411e 	bne	r3,zero,49090 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
   48b8c:	100690ba 	slli	r3,r2,2
   48b90:	00800174 	movhi	r2,5
   48b94:	10a2e904 	addi	r2,r2,-29788
   48b98:	1885883a 	add	r2,r3,r2
   48b9c:	10800017 	ldw	r2,0(r2)
   48ba0:	1000683a 	jmp	r2
   48ba4:	00048bb8 	rdprs	zero,zero,4654
   48ba8:	00048bec 	andhi	zero,zero,4655
   48bac:	00048c74 	movhi	zero,4657
   48bb0:	00048d08 	cmpgei	zero,zero,4660
   48bb4:	00048d74 	movhi	zero,4661
                case 0:
                        theBuffer.valueSize = 2;
   48bb8:	e0bffc17 	ldw	r2,-16(fp)
   48bbc:	00c00084 	movi	r3,2
   48bc0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
   48bc4:	e0bffc17 	ldw	r2,-16(fp)
   48bc8:	10c00404 	addi	r3,r2,16
   48bcc:	e0bffc17 	ldw	r2,-16(fp)
   48bd0:	10800204 	addi	r2,r2,8
   48bd4:	100b883a 	mov	r5,r2
   48bd8:	1809883a 	mov	r4,r3
   48bdc:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
   48be0:	e0bffc17 	ldw	r2,-16(fp)
   48be4:	00c00044 	movi	r3,1
   48be8:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
   48bec:	e0bffc17 	ldw	r2,-16(fp)
   48bf0:	10800404 	addi	r2,r2,16
   48bf4:	e1bffe17 	ldw	r6,-8(fp)
   48bf8:	e17ffd17 	ldw	r5,-12(fp)
   48bfc:	1009883a 	mov	r4,r2
   48c00:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   48c04:	1080005c 	xori	r2,r2,1
   48c08:	10803fcc 	andi	r2,r2,255
   48c0c:	10000226 	beq	r2,zero,48c18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
   48c10:	0005883a 	mov	r2,zero
   48c14:	00011f06 	br	49094 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
   48c18:	e0bffc17 	ldw	r2,-16(fp)
   48c1c:	10c00217 	ldw	r3,8(r2)
   48c20:	1806d23a 	srli	r3,r3,8
   48c24:	10800317 	ldw	r2,12(r2)
   48c28:	10803fcc 	andi	r2,r2,255
   48c2c:	1004963a 	slli	r2,r2,24
   48c30:	10c4b03a 	or	r2,r2,r3
   48c34:	10c00003 	ldbu	r3,0(r2)
   48c38:	e0bffc17 	ldw	r2,-16(fp)
   48c3c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
   48c40:	e0bffc17 	ldw	r2,-16(fp)
   48c44:	10c00217 	ldw	r3,8(r2)
   48c48:	1806d23a 	srli	r3,r3,8
   48c4c:	10800317 	ldw	r2,12(r2)
   48c50:	10803fcc 	andi	r2,r2,255
   48c54:	1004963a 	slli	r2,r2,24
   48c58:	10c4b03a 	or	r2,r2,r3
   48c5c:	10c00043 	ldbu	r3,1(r2)
   48c60:	e0bffc17 	ldw	r2,-16(fp)
   48c64:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
   48c68:	e0bffc17 	ldw	r2,-16(fp)
   48c6c:	00c00084 	movi	r3,2
   48c70:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
   48c74:	e0bffc17 	ldw	r2,-16(fp)
   48c78:	10800804 	addi	r2,r2,32
   48c7c:	10c00084 	addi	r3,r2,2
   48c80:	e0bffc17 	ldw	r2,-16(fp)
   48c84:	19803fcc 	andi	r6,r3,255
   48c88:	11000243 	ldbu	r4,9(r2)
   48c8c:	2008703a 	and	r4,r4,zero
   48c90:	200b883a 	mov	r5,r4
   48c94:	3009883a 	mov	r4,r6
   48c98:	2908b03a 	or	r4,r5,r4
   48c9c:	11000245 	stb	r4,9(r2)
   48ca0:	1808d23a 	srli	r4,r3,8
   48ca4:	21803fcc 	andi	r6,r4,255
   48ca8:	11000283 	ldbu	r4,10(r2)
   48cac:	2008703a 	and	r4,r4,zero
   48cb0:	200b883a 	mov	r5,r4
   48cb4:	3009883a 	mov	r4,r6
   48cb8:	2908b03a 	or	r4,r5,r4
   48cbc:	11000285 	stb	r4,10(r2)
   48cc0:	1808d43a 	srli	r4,r3,16
   48cc4:	21803fcc 	andi	r6,r4,255
   48cc8:	110002c3 	ldbu	r4,11(r2)
   48ccc:	2008703a 	and	r4,r4,zero
   48cd0:	200b883a 	mov	r5,r4
   48cd4:	3009883a 	mov	r4,r6
   48cd8:	2908b03a 	or	r4,r5,r4
   48cdc:	110002c5 	stb	r4,11(r2)
   48ce0:	180ad63a 	srli	r5,r3,24
   48ce4:	10c00303 	ldbu	r3,12(r2)
   48ce8:	1806703a 	and	r3,r3,zero
   48cec:	1809883a 	mov	r4,r3
   48cf0:	2807883a 	mov	r3,r5
   48cf4:	20c6b03a 	or	r3,r4,r3
   48cf8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
   48cfc:	e0bffc17 	ldw	r2,-16(fp)
   48d00:	00c000c4 	movi	r3,3
   48d04:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
   48d08:	e0bffc17 	ldw	r2,-16(fp)
   48d0c:	10800c83 	ldbu	r2,50(r2)
   48d10:	10803fcc 	andi	r2,r2,255
   48d14:	10c00120 	cmpeqi	r3,r2,4
   48d18:	1800021e 	bne	r3,zero,48d24 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
   48d1c:	10800148 	cmpgei	r2,r2,5
   48d20:	00000306 	br	48d30 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
   48d24:	e0bffc17 	ldw	r2,-16(fp)
   48d28:	10000d45 	stb	zero,53(r2)
                                        break;
   48d2c:	00000106 	br	48d34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
   48d30:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
   48d34:	e0bffc17 	ldw	r2,-16(fp)
   48d38:	10800c43 	ldbu	r2,49(r2)
   48d3c:	10bfff84 	addi	r2,r2,-2
   48d40:	1007883a 	mov	r3,r2
   48d44:	e0bffc17 	ldw	r2,-16(fp)
   48d48:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
   48d4c:	e0bffc17 	ldw	r2,-16(fp)
   48d50:	10c00404 	addi	r3,r2,16
   48d54:	e0bffc17 	ldw	r2,-16(fp)
   48d58:	10800204 	addi	r2,r2,8
   48d5c:	100b883a 	mov	r5,r2
   48d60:	1809883a 	mov	r4,r3
   48d64:	004487c0 	call	4487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
   48d68:	e0bffc17 	ldw	r2,-16(fp)
   48d6c:	00c00104 	movi	r3,4
   48d70:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
   48d74:	e0bffc17 	ldw	r2,-16(fp)
   48d78:	10800c83 	ldbu	r2,50(r2)
   48d7c:	10803fcc 	andi	r2,r2,255
   48d80:	10c00120 	cmpeqi	r3,r2,4
   48d84:	1800141e 	bne	r3,zero,48dd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
   48d88:	10c00160 	cmpeqi	r3,r2,5
   48d8c:	18005a1e 	bne	r3,zero,48ef8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
   48d90:	108000a0 	cmpeqi	r2,r2,2
   48d94:	10008526 	beq	r2,zero,48fac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
   48d98:	e0bffc17 	ldw	r2,-16(fp)
   48d9c:	10800404 	addi	r2,r2,16
   48da0:	e1bffe17 	ldw	r6,-8(fp)
   48da4:	e17ffd17 	ldw	r5,-12(fp)
   48da8:	1009883a 	mov	r4,r2
   48dac:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   48db0:	1080005c 	xori	r2,r2,1
   48db4:	10803fcc 	andi	r2,r2,255
   48db8:	10000226 	beq	r2,zero,48dc4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
   48dbc:	0005883a 	mov	r2,zero
   48dc0:	0000b406 	br	49094 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
   48dc4:	e0bffa17 	ldw	r2,-24(fp)
   48dc8:	10c00143 	ldbu	r3,5(r2)
   48dcc:	e0bffc17 	ldw	r2,-16(fp)
   48dd0:	10c00d85 	stb	r3,54(r2)
                                        break;
   48dd4:	00008b06 	br	49004 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
   48dd8:	e0bffc17 	ldw	r2,-16(fp)
   48ddc:	10800404 	addi	r2,r2,16
   48de0:	e1bffe17 	ldw	r6,-8(fp)
   48de4:	e17ffd17 	ldw	r5,-12(fp)
   48de8:	1009883a 	mov	r4,r2
   48dec:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   48df0:	1080005c 	xori	r2,r2,1
   48df4:	10803fcc 	andi	r2,r2,255
   48df8:	10000226 	beq	r2,zero,48e04 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
   48dfc:	0005883a 	mov	r2,zero
   48e00:	0000a406 	br	49094 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
   48e04:	e0bffb17 	ldw	r2,-20(fp)
   48e08:	10800083 	ldbu	r2,2(r2)
   48e0c:	10803fcc 	andi	r2,r2,255
   48e10:	01402004 	movi	r5,128
   48e14:	1009883a 	mov	r4,r2
   48e18:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
   48e1c:	e0bffb17 	ldw	r2,-20(fp)
   48e20:	108000c3 	ldbu	r2,3(r2)
   48e24:	10803fcc 	andi	r2,r2,255
   48e28:	01402004 	movi	r5,128
   48e2c:	1009883a 	mov	r4,r2
   48e30:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
   48e34:	e0bffb17 	ldw	r2,-20(fp)
   48e38:	10800103 	ldbu	r2,4(r2)
   48e3c:	10803fcc 	andi	r2,r2,255
   48e40:	01402004 	movi	r5,128
   48e44:	1009883a 	mov	r4,r2
   48e48:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
   48e4c:	e0bffb17 	ldw	r2,-20(fp)
   48e50:	10800143 	ldbu	r2,5(r2)
   48e54:	10803fcc 	andi	r2,r2,255
   48e58:	01402004 	movi	r5,128
   48e5c:	1009883a 	mov	r4,r2
   48e60:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
   48e64:	e0bffb17 	ldw	r2,-20(fp)
   48e68:	10800183 	ldbu	r2,6(r2)
   48e6c:	10803fcc 	andi	r2,r2,255
   48e70:	01402004 	movi	r5,128
   48e74:	1009883a 	mov	r4,r2
   48e78:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
   48e7c:	e0bffb17 	ldw	r2,-20(fp)
   48e80:	108001c3 	ldbu	r2,7(r2)
   48e84:	10803fcc 	andi	r2,r2,255
   48e88:	01402004 	movi	r5,128
   48e8c:	1009883a 	mov	r4,r2
   48e90:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
   48e94:	e0bffc17 	ldw	r2,-16(fp)
   48e98:	10800d03 	ldbu	r2,52(r2)
   48e9c:	10803fcc 	andi	r2,r2,255
   48ea0:	10000a26 	beq	r2,zero,48ecc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
   48ea4:	e0bffb17 	ldw	r2,-20(fp)
   48ea8:	10800143 	ldbu	r2,5(r2)
   48eac:	10803fcc 	andi	r2,r2,255
   48eb0:	10800058 	cmpnei	r2,r2,1
   48eb4:	10004e1e 	bne	r2,zero,48ff0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
   48eb8:	e0bffb17 	ldw	r2,-20(fp)
   48ebc:	10800183 	ldbu	r2,6(r2)
   48ec0:	10803fcc 	andi	r2,r2,255
   48ec4:	108000d8 	cmpnei	r2,r2,3
   48ec8:	1000491e 	bne	r2,zero,48ff0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
   48ecc:	e0bffc17 	ldw	r2,-16(fp)
   48ed0:	00c00044 	movi	r3,1
   48ed4:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
   48ed8:	e0bffc17 	ldw	r2,-16(fp)
   48edc:	10800cc3 	ldbu	r2,51(r2)
   48ee0:	10803fcc 	andi	r2,r2,255
   48ee4:	108000a8 	cmpgeui	r2,r2,2
   48ee8:	1000431e 	bne	r2,zero,48ff8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
   48eec:	e0bffc17 	ldw	r2,-16(fp)
   48ef0:	10000cc5 	stb	zero,51(r2)
                                        break;
   48ef4:	00004006 	br	48ff8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
   48ef8:	e0bffc17 	ldw	r2,-16(fp)
   48efc:	10800404 	addi	r2,r2,16
   48f00:	e1bffe17 	ldw	r6,-8(fp)
   48f04:	e17ffd17 	ldw	r5,-12(fp)
   48f08:	1009883a 	mov	r4,r2
   48f0c:	00467900 	call	46790 <_ZN20MultiByteValueParser5ParseEPPhPt>
   48f10:	1080005c 	xori	r2,r2,1
   48f14:	10803fcc 	andi	r2,r2,255
   48f18:	10000226 	beq	r2,zero,48f24 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
   48f1c:	0005883a 	mov	r2,zero
   48f20:	00005c06 	br	49094 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
   48f24:	e0bffc17 	ldw	r2,-16(fp)
   48f28:	10800d43 	ldbu	r2,53(r2)
   48f2c:	10803fcc 	andi	r2,r2,255
   48f30:	10003326 	beq	r2,zero,49000 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
   48f34:	e0bffc17 	ldw	r2,-16(fp)
   48f38:	10800cc3 	ldbu	r2,51(r2)
   48f3c:	10803fcc 	andi	r2,r2,255
   48f40:	108000a8 	cmpgeui	r2,r2,2
   48f44:	10002e1e 	bne	r2,zero,49000 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
   48f48:	e0bffc17 	ldw	r2,-16(fp)
   48f4c:	10800117 	ldw	r2,4(r2)
   48f50:	10800017 	ldw	r2,0(r2)
   48f54:	10800017 	ldw	r2,0(r2)
   48f58:	e0fffc17 	ldw	r3,-16(fp)
   48f5c:	19000117 	ldw	r4,4(r3)
   48f60:	e0fffc17 	ldw	r3,-16(fp)
   48f64:	18c00d83 	ldbu	r3,54(r3)
   48f68:	19403fcc 	andi	r5,r3,255
   48f6c:	e0fffc17 	ldw	r3,-16(fp)
   48f70:	18c00804 	addi	r3,r3,32
   48f74:	d8c00115 	stw	r3,4(sp)
   48f78:	d8000015 	stw	zero,0(sp)
   48f7c:	000f883a 	mov	r7,zero
   48f80:	000d883a 	mov	r6,zero
   48f84:	103ee83a 	callr	r2
   48f88:	10803fcc 	andi	r2,r2,255
   48f8c:	10001c26 	beq	r2,zero,49000 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
   48f90:	e0bffc17 	ldw	r2,-16(fp)
   48f94:	10800cc3 	ldbu	r2,51(r2)
   48f98:	10800044 	addi	r2,r2,1
   48f9c:	1007883a 	mov	r3,r2
   48fa0:	e0bffc17 	ldw	r2,-16(fp)
   48fa4:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
   48fa8:	00001506 	br	49000 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
   48fac:	e0bffc17 	ldw	r2,-16(fp)
   48fb0:	10c00604 	addi	r3,r2,24
   48fb4:	e0bffc17 	ldw	r2,-16(fp)
   48fb8:	10800c43 	ldbu	r2,49(r2)
   48fbc:	10803fcc 	andi	r2,r2,255
   48fc0:	10bfff84 	addi	r2,r2,-2
   48fc4:	10bfffcc 	andi	r2,r2,65535
   48fc8:	100f883a 	mov	r7,r2
   48fcc:	e1bffe17 	ldw	r6,-8(fp)
   48fd0:	e17ffd17 	ldw	r5,-12(fp)
   48fd4:	1809883a 	mov	r4,r3
   48fd8:	00449a00 	call	449a0 <_ZN11ByteSkipper4SkipEPPhPtt>
   48fdc:	1080005c 	xori	r2,r2,1
   48fe0:	10803fcc 	andi	r2,r2,255
   48fe4:	10000726 	beq	r2,zero,49004 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
   48fe8:	0005883a 	mov	r2,zero
   48fec:	00002906 	br	49094 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
   48ff0:	0001883a 	nop
   48ff4:	00000306 	br	49004 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
   48ff8:	0001883a 	nop
   48ffc:	00000106 	br	49004 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
   49000:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
   49004:	e0bffc17 	ldw	r2,-16(fp)
   49008:	10c00804 	addi	r3,r2,32
   4900c:	e0bffc17 	ldw	r2,-16(fp)
   49010:	19803fcc 	andi	r6,r3,255
   49014:	11000243 	ldbu	r4,9(r2)
   49018:	2008703a 	and	r4,r4,zero
   4901c:	200b883a 	mov	r5,r4
   49020:	3009883a 	mov	r4,r6
   49024:	2908b03a 	or	r4,r5,r4
   49028:	11000245 	stb	r4,9(r2)
   4902c:	1808d23a 	srli	r4,r3,8
   49030:	21803fcc 	andi	r6,r4,255
   49034:	11000283 	ldbu	r4,10(r2)
   49038:	2008703a 	and	r4,r4,zero
   4903c:	200b883a 	mov	r5,r4
   49040:	3009883a 	mov	r4,r6
   49044:	2908b03a 	or	r4,r5,r4
   49048:	11000285 	stb	r4,10(r2)
   4904c:	1808d43a 	srli	r4,r3,16
   49050:	21803fcc 	andi	r6,r4,255
   49054:	110002c3 	ldbu	r4,11(r2)
   49058:	2008703a 	and	r4,r4,zero
   4905c:	200b883a 	mov	r5,r4
   49060:	3009883a 	mov	r4,r6
   49064:	2908b03a 	or	r4,r5,r4
   49068:	110002c5 	stb	r4,11(r2)
   4906c:	180ad63a 	srli	r5,r3,24
   49070:	10c00303 	ldbu	r3,12(r2)
   49074:	1806703a 	and	r3,r3,zero
   49078:	1809883a 	mov	r4,r3
   4907c:	2807883a 	mov	r3,r5
   49080:	20c6b03a 	or	r3,r4,r3
   49084:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
   49088:	e0bffc17 	ldw	r2,-16(fp)
   4908c:	10000c05 	stb	zero,48(r2)
        }
        return true;
   49090:	00800044 	movi	r2,1
}
   49094:	e037883a 	mov	sp,fp
   49098:	dfc00117 	ldw	ra,4(sp)
   4909c:	df000017 	ldw	fp,0(sp)
   490a0:	dec00204 	addi	sp,sp,8
   490a4:	f800283a 	ret

000490a8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
   490a8:	defff904 	addi	sp,sp,-28
   490ac:	df000615 	stw	fp,24(sp)
   490b0:	df000604 	addi	fp,sp,24
   490b4:	e13ffb15 	stw	r4,-20(fp)
   490b8:	3009883a 	mov	r4,r6
   490bc:	3807883a 	mov	r3,r7
   490c0:	e0800117 	ldw	r2,4(fp)
   490c4:	e17ffc05 	stb	r5,-16(fp)
   490c8:	e13ffd05 	stb	r4,-12(fp)
   490cc:	e0fffe05 	stb	r3,-8(fp)
   490d0:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
   490d4:	e0800217 	ldw	r2,8(fp)
   490d8:	10c000c3 	ldbu	r3,3(r2)
   490dc:	e0bffb17 	ldw	r2,-20(fp)
   490e0:	10800483 	ldbu	r2,18(r2)
   490e4:	1884703a 	and	r2,r3,r2
   490e8:	10803fcc 	andi	r2,r2,255
   490ec:	10800098 	cmpnei	r2,r2,2
   490f0:	10001f1e 	bne	r2,zero,49170 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
   490f4:	e0800217 	ldw	r2,8(fp)
   490f8:	10800083 	ldbu	r2,2(r2)
   490fc:	10803fcc 	andi	r2,r2,255
   49100:	1080201c 	xori	r2,r2,128
   49104:	10bfe004 	addi	r2,r2,-128
   49108:	1000020e 	bge	r2,zero,49114 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
   4910c:	00800044 	movi	r2,1
   49110:	00000106 	br	49118 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
   49114:	00800084 	movi	r2,2
   49118:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
   4911c:	e0fffa03 	ldbu	r3,-24(fp)
   49120:	e0800217 	ldw	r2,8(fp)
   49124:	10800083 	ldbu	r2,2(r2)
   49128:	108003cc 	andi	r2,r2,15
   4912c:	100b883a 	mov	r5,r2
   49130:	e13ffb17 	ldw	r4,-20(fp)
   49134:	1805883a 	mov	r2,r3
   49138:	1085883a 	add	r2,r2,r2
   4913c:	10c5883a 	add	r2,r2,r3
   49140:	2085883a 	add	r2,r4,r2
   49144:	108004c4 	addi	r2,r2,19
   49148:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
   4914c:	e0800217 	ldw	r2,8(fp)
   49150:	10c00103 	ldbu	r3,4(r2)
   49154:	10800143 	ldbu	r2,5(r2)
   49158:	1004923a 	slli	r2,r2,8
   4915c:	10c4b03a 	or	r2,r2,r3
   49160:	10bfffcc 	andi	r2,r2,65535
   49164:	10801070 	cmpltui	r2,r2,65
   49168:	10000d1e 	bne	r2,zero,491a0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
   4916c:	00000206 	br	49178 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
   49170:	0005883a 	mov	r2,zero
   49174:	00001906 	br	491dc <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
   49178:	e0fffa03 	ldbu	r3,-24(fp)
   4917c:	e13ffb17 	ldw	r4,-20(fp)
   49180:	1805883a 	mov	r2,r3
   49184:	1085883a 	add	r2,r2,r2
   49188:	10c5883a 	add	r2,r2,r3
   4918c:	2085883a 	add	r2,r4,r2
   49190:	10800504 	addi	r2,r2,20
   49194:	00c01004 	movi	r3,64
   49198:	10c00005 	stb	r3,0(r2)
   4919c:	00000e06 	br	491d8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
   491a0:	e0fffa03 	ldbu	r3,-24(fp)
   491a4:	e0800217 	ldw	r2,8(fp)
   491a8:	11000103 	ldbu	r4,4(r2)
   491ac:	10800143 	ldbu	r2,5(r2)
   491b0:	1004923a 	slli	r2,r2,8
   491b4:	1104b03a 	or	r2,r2,r4
   491b8:	100b883a 	mov	r5,r2
   491bc:	e13ffb17 	ldw	r4,-20(fp)
   491c0:	1805883a 	mov	r2,r3
   491c4:	1085883a 	add	r2,r2,r2
   491c8:	10c5883a 	add	r2,r2,r3
   491cc:	2085883a 	add	r2,r4,r2
   491d0:	10800504 	addi	r2,r2,20
   491d4:	11400005 	stb	r5,0(r2)
        }

        return true;
   491d8:	00800044 	movi	r2,1
}
   491dc:	e037883a 	mov	sp,fp
   491e0:	df000017 	ldw	fp,0(sp)
   491e4:	dec00104 	addi	sp,sp,4
   491e8:	f800283a 	ret

000491ec <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
   491ec:	213fff04 	addi	r4,r4,-4
   491f0:	00490a81 	jmpi	490a8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

000491f4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
   491f4:	defffa04 	addi	sp,sp,-24
   491f8:	df000515 	stw	fp,20(sp)
   491fc:	df000504 	addi	fp,sp,20
   49200:	e13ffb15 	stw	r4,-20(fp)
   49204:	3009883a 	mov	r4,r6
   49208:	3807883a 	mov	r3,r7
   4920c:	e0800117 	ldw	r2,4(fp)
   49210:	e17ffc05 	stb	r5,-16(fp)
   49214:	e13ffd05 	stb	r4,-12(fp)
   49218:	e0fffe05 	stb	r3,-8(fp)
   4921c:	e0bfff05 	stb	r2,-4(fp)
                return true;
   49220:	00800044 	movi	r2,1
        };
   49224:	e037883a 	mov	sp,fp
   49228:	df000017 	ldw	fp,0(sp)
   4922c:	dec00104 	addi	sp,sp,4
   49230:	f800283a 	ret

00049234 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
   49234:	defffe04 	addi	sp,sp,-8
   49238:	df000115 	stw	fp,4(sp)
   4923c:	df000104 	addi	fp,sp,4
   49240:	e13fff15 	stw	r4,-4(fp)
   49244:	e0bfff17 	ldw	r2,-4(fp)
   49248:	10800d83 	ldbu	r2,54(r2)
   4924c:	e037883a 	mov	sp,fp
   49250:	df000017 	ldw	fp,0(sp)
   49254:	dec00104 	addi	sp,sp,4
   49258:	f800283a 	ret

0004925c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
   4925c:	defffe04 	addi	sp,sp,-8
   49260:	df000115 	stw	fp,4(sp)
   49264:	df000104 	addi	fp,sp,4
   49268:	e13fff15 	stw	r4,-4(fp)
   4926c:	e0bfff17 	ldw	r2,-4(fp)
   49270:	10800cc3 	ldbu	r2,51(r2)
   49274:	e037883a 	mov	sp,fp
   49278:	df000017 	ldw	fp,0(sp)
   4927c:	dec00104 	addi	sp,sp,4
   49280:	f800283a 	ret

00049284 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
   49284:	defffd04 	addi	sp,sp,-12
   49288:	df000215 	stw	fp,8(sp)
   4928c:	df000204 	addi	fp,sp,8
   49290:	e13ffe15 	stw	r4,-8(fp)
   49294:	2805883a 	mov	r2,r5
   49298:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
   4929c:	e0bfff03 	ldbu	r2,-4(fp)
   492a0:	10803c28 	cmpgeui	r2,r2,240
   492a4:	1000031e 	bne	r2,zero,492b4 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
   492a8:	e0bfff03 	ldbu	r2,-4(fp)
   492ac:	1004d13a 	srli	r2,r2,4
   492b0:	00000606 	br	492cc <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
   492b4:	e0bfff03 	ldbu	r2,-4(fp)
   492b8:	10c003cc 	andi	r3,r2,15
   492bc:	008001b4 	movhi	r2,6
   492c0:	109c9244 	addi	r2,r2,29257
   492c4:	1885883a 	add	r2,r3,r2
   492c8:	10800003 	ldbu	r2,0(r2)
        };
   492cc:	e037883a 	mov	sp,fp
   492d0:	df000017 	ldw	fp,0(sp)
   492d4:	dec00104 	addi	sp,sp,4
   492d8:	f800283a 	ret

000492dc <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
   492dc:	defffd04 	addi	sp,sp,-12
   492e0:	df000215 	stw	fp,8(sp)
   492e4:	df000204 	addi	fp,sp,8
   492e8:	e13ffe15 	stw	r4,-8(fp)
   492ec:	2805883a 	mov	r2,r5
   492f0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
   492f4:	e0ffff03 	ldbu	r3,-4(fp)
   492f8:	008001b4 	movhi	r2,6
   492fc:	109c8e44 	addi	r2,r2,29241
   49300:	1885883a 	add	r2,r3,r2
   49304:	10800003 	ldbu	r2,0(r2)
        };
   49308:	e037883a 	mov	sp,fp
   4930c:	df000017 	ldw	fp,0(sp)
   49310:	dec00104 	addi	sp,sp,4
   49314:	f800283a 	ret

00049318 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
   49318:	defffe04 	addi	sp,sp,-8
   4931c:	df000115 	stw	fp,4(sp)
   49320:	df000104 	addi	fp,sp,4
   49324:	e13fff15 	stw	r4,-4(fp)
   49328:	e0bfff17 	ldw	r2,-4(fp)
   4932c:	10800303 	ldbu	r2,12(r2)
   49330:	e037883a 	mov	sp,fp
   49334:	df000017 	ldw	fp,0(sp)
   49338:	dec00104 	addi	sp,sp,4
   4933c:	f800283a 	ret

00049340 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
   49340:	defffe04 	addi	sp,sp,-8
   49344:	df000115 	stw	fp,4(sp)
   49348:	df000104 	addi	fp,sp,4
   4934c:	e13fff15 	stw	r4,-4(fp)
   49350:	008001b4 	movhi	r2,6
   49354:	109cab04 	addi	r2,r2,29356
   49358:	e0ffff17 	ldw	r3,-4(fp)
   4935c:	18800015 	stw	r2,0(r3)
   49360:	0001883a 	nop
   49364:	e037883a 	mov	sp,fp
   49368:	df000017 	ldw	fp,0(sp)
   4936c:	dec00104 	addi	sp,sp,4
   49370:	f800283a 	ret

00049374 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
   49374:	defffd04 	addi	sp,sp,-12
   49378:	df000215 	stw	fp,8(sp)
   4937c:	df000204 	addi	fp,sp,8
   49380:	2005883a 	mov	r2,r4
   49384:	e17fff15 	stw	r5,-4(fp)
   49388:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
   4938c:	0001883a 	nop
   49390:	e037883a 	mov	sp,fp
   49394:	df000017 	ldw	fp,0(sp)
   49398:	dec00104 	addi	sp,sp,4
   4939c:	f800283a 	ret

000493a0 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
   493a0:	deffe204 	addi	sp,sp,-120
   493a4:	dfc01d15 	stw	ra,116(sp)
   493a8:	df001c15 	stw	fp,112(sp)
   493ac:	df001c04 	addi	fp,sp,112
   493b0:	e13ffd15 	stw	r4,-12(fp)
   493b4:	2805883a 	mov	r2,r5
   493b8:	e1bfff15 	stw	r6,-4(fp)
   493bc:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
   493c0:	00801004 	movi	r2,64
   493c4:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
   493c8:	e0bffd17 	ldw	r2,-12(fp)
   493cc:	11000217 	ldw	r4,8(r2)
   493d0:	e0bffd17 	ldw	r2,-12(fp)
   493d4:	10800303 	ldbu	r2,12(r2)
   493d8:	11403fcc 	andi	r5,r2,255
   493dc:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
   493e0:	e0ffff17 	ldw	r3,-4(fp)
   493e4:	d8c00715 	stw	r3,28(sp)
   493e8:	e0ffec84 	addi	r3,fp,-78
   493ec:	d8c00615 	stw	r3,24(sp)
   493f0:	00c01004 	movi	r3,64
   493f4:	d8c00515 	stw	r3,20(sp)
   493f8:	00c02004 	movi	r3,128
   493fc:	d8c00415 	stw	r3,16(sp)
   49400:	d8800315 	stw	r2,12(sp)
   49404:	00800884 	movi	r2,34
   49408:	d8800215 	stw	r2,8(sp)
   4940c:	d8000115 	stw	zero,4(sp)
   49410:	00800184 	movi	r2,6
   49414:	d8800015 	stw	r2,0(sp)
   49418:	01c02044 	movi	r7,129
   4941c:	000d883a 	mov	r6,zero
   49420:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
   49424:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
   49428:	e0bfec43 	ldbu	r2,-79(fp)
}
   4942c:	e037883a 	mov	sp,fp
   49430:	dfc00117 	ldw	ra,4(sp)
   49434:	df000017 	ldw	fp,0(sp)
   49438:	dec00204 	addi	sp,sp,8
   4943c:	f800283a 	ret

00049440 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
   49440:	defff004 	addi	sp,sp,-64
   49444:	dfc00f15 	stw	ra,60(sp)
   49448:	df000e15 	stw	fp,56(sp)
   4944c:	df000e04 	addi	fp,sp,56
   49450:	e13ffa15 	stw	r4,-24(fp)
   49454:	2811883a 	mov	r8,r5
   49458:	300b883a 	mov	r5,r6
   4945c:	3809883a 	mov	r4,r7
   49460:	e0c00217 	ldw	r3,8(fp)
   49464:	e0800317 	ldw	r2,12(fp)
   49468:	e23ffb05 	stb	r8,-20(fp)
   4946c:	e17ffc05 	stb	r5,-16(fp)
   49470:	e13ffd05 	stb	r4,-12(fp)
   49474:	e0fffe05 	stb	r3,-8(fp)
   49478:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
   4947c:	e0bffa17 	ldw	r2,-24(fp)
   49480:	12000217 	ldw	r8,8(r2)
   49484:	e0bffa17 	ldw	r2,-24(fp)
   49488:	10800303 	ldbu	r2,12(r2)
   4948c:	12403fcc 	andi	r9,r2,255
   49490:	e2bffb03 	ldbu	r10,-20(fp)
   49494:	e0bffe03 	ldbu	r2,-8(fp)
   49498:	e0fffd03 	ldbu	r3,-12(fp)
   4949c:	e13ffc03 	ldbu	r4,-16(fp)
   494a0:	e17fff0b 	ldhu	r5,-4(fp)
   494a4:	e1bfff0b 	ldhu	r6,-4(fp)
   494a8:	d8000715 	stw	zero,28(sp)
   494ac:	e1c00417 	ldw	r7,16(fp)
   494b0:	d9c00615 	stw	r7,24(sp)
   494b4:	d9800515 	stw	r6,20(sp)
   494b8:	d9400415 	stw	r5,16(sp)
   494bc:	d9000315 	stw	r4,12(sp)
   494c0:	d8c00215 	stw	r3,8(sp)
   494c4:	d8800115 	stw	r2,4(sp)
   494c8:	00800244 	movi	r2,9
   494cc:	d8800015 	stw	r2,0(sp)
   494d0:	01c00844 	movi	r7,33
   494d4:	500d883a 	mov	r6,r10
   494d8:	480b883a 	mov	r5,r9
   494dc:	4009883a 	mov	r4,r8
   494e0:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   494e4:	e037883a 	mov	sp,fp
   494e8:	dfc00117 	ldw	ra,4(sp)
   494ec:	df000017 	ldw	fp,0(sp)
   494f0:	dec00204 	addi	sp,sp,8
   494f4:	f800283a 	ret

000494f8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
   494f8:	defff004 	addi	sp,sp,-64
   494fc:	dfc00f15 	stw	ra,60(sp)
   49500:	df000e15 	stw	fp,56(sp)
   49504:	df000e04 	addi	fp,sp,56
   49508:	e13ffa15 	stw	r4,-24(fp)
   4950c:	2811883a 	mov	r8,r5
   49510:	300b883a 	mov	r5,r6
   49514:	3809883a 	mov	r4,r7
   49518:	e0c00217 	ldw	r3,8(fp)
   4951c:	e0800317 	ldw	r2,12(fp)
   49520:	e23ffb05 	stb	r8,-20(fp)
   49524:	e17ffc05 	stb	r5,-16(fp)
   49528:	e13ffd05 	stb	r4,-12(fp)
   4952c:	e0fffe05 	stb	r3,-8(fp)
   49530:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
   49534:	e0bffa17 	ldw	r2,-24(fp)
   49538:	12000217 	ldw	r8,8(r2)
   4953c:	e0bffa17 	ldw	r2,-24(fp)
   49540:	10800303 	ldbu	r2,12(r2)
   49544:	12403fcc 	andi	r9,r2,255
   49548:	e2bffb03 	ldbu	r10,-20(fp)
   4954c:	e0bffe03 	ldbu	r2,-8(fp)
   49550:	e0fffd03 	ldbu	r3,-12(fp)
   49554:	e13ffc03 	ldbu	r4,-16(fp)
   49558:	e17fff0b 	ldhu	r5,-4(fp)
   4955c:	e1bfff0b 	ldhu	r6,-4(fp)
   49560:	d8000715 	stw	zero,28(sp)
   49564:	e1c00417 	ldw	r7,16(fp)
   49568:	d9c00615 	stw	r7,24(sp)
   4956c:	d9800515 	stw	r6,20(sp)
   49570:	d9400415 	stw	r5,16(sp)
   49574:	d9000315 	stw	r4,12(sp)
   49578:	d8c00215 	stw	r3,8(sp)
   4957c:	d8800115 	stw	r2,4(sp)
   49580:	00800044 	movi	r2,1
   49584:	d8800015 	stw	r2,0(sp)
   49588:	01c02844 	movi	r7,161
   4958c:	500d883a 	mov	r6,r10
   49590:	480b883a 	mov	r5,r9
   49594:	4009883a 	mov	r4,r8
   49598:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   4959c:	e037883a 	mov	sp,fp
   495a0:	dfc00117 	ldw	ra,4(sp)
   495a4:	df000017 	ldw	fp,0(sp)
   495a8:	dec00204 	addi	sp,sp,8
   495ac:	f800283a 	ret

000495b0 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
   495b0:	defff204 	addi	sp,sp,-56
   495b4:	dfc00d15 	stw	ra,52(sp)
   495b8:	df000c15 	stw	fp,48(sp)
   495bc:	df000c04 	addi	fp,sp,48
   495c0:	e13ffc15 	stw	r4,-16(fp)
   495c4:	2807883a 	mov	r3,r5
   495c8:	3005883a 	mov	r2,r6
   495cc:	e1ffff15 	stw	r7,-4(fp)
   495d0:	e0fffd05 	stb	r3,-12(fp)
   495d4:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
   495d8:	e0bffc17 	ldw	r2,-16(fp)
   495dc:	12000217 	ldw	r8,8(r2)
   495e0:	e0bffc17 	ldw	r2,-16(fp)
   495e4:	10800303 	ldbu	r2,12(r2)
   495e8:	11403fcc 	andi	r5,r2,255
   495ec:	e0bffe03 	ldbu	r2,-8(fp)
   495f0:	e0fffd03 	ldbu	r3,-12(fp)
   495f4:	d8000715 	stw	zero,28(sp)
   495f8:	e13fff17 	ldw	r4,-4(fp)
   495fc:	d9000615 	stw	r4,24(sp)
   49600:	01000044 	movi	r4,1
   49604:	d9000515 	stw	r4,20(sp)
   49608:	01000044 	movi	r4,1
   4960c:	d9000415 	stw	r4,16(sp)
   49610:	d8c00315 	stw	r3,12(sp)
   49614:	d8000215 	stw	zero,8(sp)
   49618:	d8800115 	stw	r2,4(sp)
   4961c:	00800084 	movi	r2,2
   49620:	d8800015 	stw	r2,0(sp)
   49624:	01c02844 	movi	r7,161
   49628:	000d883a 	mov	r6,zero
   4962c:	4009883a 	mov	r4,r8
   49630:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   49634:	e037883a 	mov	sp,fp
   49638:	dfc00117 	ldw	ra,4(sp)
   4963c:	df000017 	ldw	fp,0(sp)
   49640:	dec00204 	addi	sp,sp,8
   49644:	f800283a 	ret

00049648 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
   49648:	defff204 	addi	sp,sp,-56
   4964c:	dfc00d15 	stw	ra,52(sp)
   49650:	df000c15 	stw	fp,48(sp)
   49654:	df000c04 	addi	fp,sp,48
   49658:	e13ffc15 	stw	r4,-16(fp)
   4965c:	2809883a 	mov	r4,r5
   49660:	3007883a 	mov	r3,r6
   49664:	3805883a 	mov	r2,r7
   49668:	e13ffd05 	stb	r4,-12(fp)
   4966c:	e0fffe05 	stb	r3,-8(fp)
   49670:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
   49674:	e0bffc17 	ldw	r2,-16(fp)
   49678:	12000217 	ldw	r8,8(r2)
   4967c:	e0bffc17 	ldw	r2,-16(fp)
   49680:	10800303 	ldbu	r2,12(r2)
   49684:	11403fcc 	andi	r5,r2,255
   49688:	e0bffe03 	ldbu	r2,-8(fp)
   4968c:	e0ffff03 	ldbu	r3,-4(fp)
   49690:	e13ffd03 	ldbu	r4,-12(fp)
   49694:	d8000715 	stw	zero,28(sp)
   49698:	d8000615 	stw	zero,24(sp)
   4969c:	d8000515 	stw	zero,20(sp)
   496a0:	d8000415 	stw	zero,16(sp)
   496a4:	d9000315 	stw	r4,12(sp)
   496a8:	d8c00215 	stw	r3,8(sp)
   496ac:	d8800115 	stw	r2,4(sp)
   496b0:	00800284 	movi	r2,10
   496b4:	d8800015 	stw	r2,0(sp)
   496b8:	01c00844 	movi	r7,33
   496bc:	000d883a 	mov	r6,zero
   496c0:	4009883a 	mov	r4,r8
   496c4:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   496c8:	e037883a 	mov	sp,fp
   496cc:	dfc00117 	ldw	ra,4(sp)
   496d0:	df000017 	ldw	fp,0(sp)
   496d4:	dec00204 	addi	sp,sp,8
   496d8:	f800283a 	ret

000496dc <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
   496dc:	defff304 	addi	sp,sp,-52
   496e0:	dfc00c15 	stw	ra,48(sp)
   496e4:	df000b15 	stw	fp,44(sp)
   496e8:	df000b04 	addi	fp,sp,44
   496ec:	e13ffd15 	stw	r4,-12(fp)
   496f0:	2807883a 	mov	r3,r5
   496f4:	3005883a 	mov	r2,r6
   496f8:	e0fffe05 	stb	r3,-8(fp)
   496fc:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
   49700:	e0bffd17 	ldw	r2,-12(fp)
   49704:	11000217 	ldw	r4,8(r2)
   49708:	e0bffd17 	ldw	r2,-12(fp)
   4970c:	10800303 	ldbu	r2,12(r2)
   49710:	11403fcc 	andi	r5,r2,255
   49714:	e0bfff03 	ldbu	r2,-4(fp)
   49718:	e0fffe03 	ldbu	r3,-8(fp)
   4971c:	d8000715 	stw	zero,28(sp)
   49720:	d8000615 	stw	zero,24(sp)
   49724:	d8000515 	stw	zero,20(sp)
   49728:	d8000415 	stw	zero,16(sp)
   4972c:	d8c00315 	stw	r3,12(sp)
   49730:	d8000215 	stw	zero,8(sp)
   49734:	d8800115 	stw	r2,4(sp)
   49738:	008002c4 	movi	r2,11
   4973c:	d8800015 	stw	r2,0(sp)
   49740:	01c00844 	movi	r7,33
   49744:	000d883a 	mov	r6,zero
   49748:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   4974c:	e037883a 	mov	sp,fp
   49750:	dfc00117 	ldw	ra,4(sp)
   49754:	df000017 	ldw	fp,0(sp)
   49758:	dec00204 	addi	sp,sp,8
   4975c:	f800283a 	ret

00049760 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
   49760:	defff304 	addi	sp,sp,-52
   49764:	dfc00c15 	stw	ra,48(sp)
   49768:	df000b15 	stw	fp,44(sp)
   4976c:	df000b04 	addi	fp,sp,44
   49770:	e13ffd15 	stw	r4,-12(fp)
   49774:	2805883a 	mov	r2,r5
   49778:	e1bfff15 	stw	r6,-4(fp)
   4977c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
   49780:	e0bffd17 	ldw	r2,-12(fp)
   49784:	11000217 	ldw	r4,8(r2)
   49788:	e0bffd17 	ldw	r2,-12(fp)
   4978c:	10800303 	ldbu	r2,12(r2)
   49790:	11403fcc 	andi	r5,r2,255
   49794:	e0bffe03 	ldbu	r2,-8(fp)
   49798:	d8000715 	stw	zero,28(sp)
   4979c:	e0ffff17 	ldw	r3,-4(fp)
   497a0:	d8c00615 	stw	r3,24(sp)
   497a4:	00c00044 	movi	r3,1
   497a8:	d8c00515 	stw	r3,20(sp)
   497ac:	00c00044 	movi	r3,1
   497b0:	d8c00415 	stw	r3,16(sp)
   497b4:	d8800315 	stw	r2,12(sp)
   497b8:	d8000215 	stw	zero,8(sp)
   497bc:	d8000115 	stw	zero,4(sp)
   497c0:	008000c4 	movi	r2,3
   497c4:	d8800015 	stw	r2,0(sp)
   497c8:	01c02844 	movi	r7,161
   497cc:	000d883a 	mov	r6,zero
   497d0:	0040b9c0 	call	40b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
   497d4:	e037883a 	mov	sp,fp
   497d8:	dfc00117 	ldw	ra,4(sp)
   497dc:	df000017 	ldw	fp,0(sp)
   497e0:	dec00204 	addi	sp,sp,8
   497e4:	f800283a 	ret

000497e8 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
   497e8:	defffc04 	addi	sp,sp,-16
   497ec:	dfc00315 	stw	ra,12(sp)
   497f0:	df000215 	stw	fp,8(sp)
   497f4:	df000204 	addi	fp,sp,8
   497f8:	e13ffe15 	stw	r4,-8(fp)
   497fc:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
   49800:	e0bfff17 	ldw	r2,-4(fp)
   49804:	10800003 	ldbu	r2,0(r2)
   49808:	10803fcc 	andi	r2,r2,255
   4980c:	01402004 	movi	r5,128
   49810:	1009883a 	mov	r4,r2
   49814:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
   49818:	e0bfff17 	ldw	r2,-4(fp)
   4981c:	10800043 	ldbu	r2,1(r2)
   49820:	10803fcc 	andi	r2,r2,255
   49824:	01402004 	movi	r5,128
   49828:	1009883a 	mov	r4,r2
   4982c:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
   49830:	e0bfff17 	ldw	r2,-4(fp)
   49834:	10800083 	ldbu	r2,2(r2)
   49838:	10803fcc 	andi	r2,r2,255
   4983c:	01402004 	movi	r5,128
   49840:	1009883a 	mov	r4,r2
   49844:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
   49848:	e0bfff17 	ldw	r2,-4(fp)
   4984c:	108000c3 	ldbu	r2,3(r2)
   49850:	10803fcc 	andi	r2,r2,255
   49854:	01402004 	movi	r5,128
   49858:	1009883a 	mov	r4,r2
   4985c:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
   49860:	e0bfff17 	ldw	r2,-4(fp)
   49864:	10c00103 	ldbu	r3,4(r2)
   49868:	10800143 	ldbu	r2,5(r2)
   4986c:	1004923a 	slli	r2,r2,8
   49870:	10c4b03a 	or	r2,r2,r3
   49874:	10bfffcc 	andi	r2,r2,65535
   49878:	01402004 	movi	r5,128
   4987c:	1009883a 	mov	r4,r2
   49880:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
   49884:	e0bfff17 	ldw	r2,-4(fp)
   49888:	10800183 	ldbu	r2,6(r2)
   4988c:	10803fcc 	andi	r2,r2,255
   49890:	01402004 	movi	r5,128
   49894:	1009883a 	mov	r4,r2
   49898:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>
}
   4989c:	0001883a 	nop
   498a0:	e037883a 	mov	sp,fp
   498a4:	dfc00117 	ldw	ra,4(sp)
   498a8:	df000017 	ldw	fp,0(sp)
   498ac:	dec00204 	addi	sp,sp,8
   498b0:	f800283a 	ret

000498b4 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
   498b4:	defffc04 	addi	sp,sp,-16
   498b8:	dfc00315 	stw	ra,12(sp)
   498bc:	df000215 	stw	fp,8(sp)
   498c0:	df000204 	addi	fp,sp,8
   498c4:	e13ffe15 	stw	r4,-8(fp)
   498c8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
   498cc:	e0bfff17 	ldw	r2,-4(fp)
   498d0:	10800003 	ldbu	r2,0(r2)
   498d4:	10803fcc 	andi	r2,r2,255
   498d8:	01402004 	movi	r5,128
   498dc:	1009883a 	mov	r4,r2
   498e0:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
   498e4:	e0bfff17 	ldw	r2,-4(fp)
   498e8:	10800043 	ldbu	r2,1(r2)
   498ec:	10803fcc 	andi	r2,r2,255
   498f0:	01402004 	movi	r5,128
   498f4:	1009883a 	mov	r4,r2
   498f8:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
   498fc:	e0bfff17 	ldw	r2,-4(fp)
   49900:	10c00083 	ldbu	r3,2(r2)
   49904:	108000c3 	ldbu	r2,3(r2)
   49908:	1004923a 	slli	r2,r2,8
   4990c:	10c4b03a 	or	r2,r2,r3
   49910:	10bfffcc 	andi	r2,r2,65535
   49914:	01402004 	movi	r5,128
   49918:	1009883a 	mov	r4,r2
   4991c:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
   49920:	e0bfff17 	ldw	r2,-4(fp)
   49924:	10800103 	ldbu	r2,4(r2)
   49928:	10803fcc 	andi	r2,r2,255
   4992c:	01402004 	movi	r5,128
   49930:	1009883a 	mov	r4,r2
   49934:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
   49938:	e0bfff17 	ldw	r2,-4(fp)
   4993c:	10800143 	ldbu	r2,5(r2)
   49940:	10803fcc 	andi	r2,r2,255
   49944:	01402004 	movi	r5,128
   49948:	1009883a 	mov	r4,r2
   4994c:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
   49950:	e0bfff17 	ldw	r2,-4(fp)
   49954:	10800183 	ldbu	r2,6(r2)
   49958:	10803fcc 	andi	r2,r2,255
   4995c:	01402004 	movi	r5,128
   49960:	1009883a 	mov	r4,r2
   49964:	0042dc80 	call	42dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
   49968:	e0bfff17 	ldw	r2,-4(fp)
   4996c:	10c001c3 	ldbu	r3,7(r2)
   49970:	10800203 	ldbu	r2,8(r2)
   49974:	1004923a 	slli	r2,r2,8
   49978:	10c4b03a 	or	r2,r2,r3
   4997c:	10bfffcc 	andi	r2,r2,65535
   49980:	01402004 	movi	r5,128
   49984:	1009883a 	mov	r4,r2
   49988:	00493740 	call	49374 <_Z10D_PrintHexItEvT_i>
}
   4998c:	0001883a 	nop
   49990:	e037883a 	mov	sp,fp
   49994:	dfc00117 	ldw	ra,4(sp)
   49998:	df000017 	ldw	fp,0(sp)
   4999c:	dec00204 	addi	sp,sp,8
   499a0:	f800283a 	ret

000499a4 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
   499a4:	defffd04 	addi	sp,sp,-12
   499a8:	dfc00215 	stw	ra,8(sp)
   499ac:	df000115 	stw	fp,4(sp)
   499b0:	df000104 	addi	fp,sp,4
   499b4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
   499b8:	010001f4 	movhi	r4,7
   499bc:	2124f304 	addi	r4,r4,-27700
   499c0:	00502100 	call	50210 <puts>
	vbusState = 0;
   499c4:	d0324045 	stb	zero,-14079(gp)
};
   499c8:	0001883a 	nop
   499cc:	e037883a 	mov	sp,fp
   499d0:	dfc00117 	ldw	ra,4(sp)
   499d4:	df000017 	ldw	fp,0(sp)
   499d8:	dec00204 	addi	sp,sp,8
   499dc:	f800283a 	ret

000499e0 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
   499e0:	defffe04 	addi	sp,sp,-8
   499e4:	df000115 	stw	fp,4(sp)
   499e8:	df000104 	addi	fp,sp,4
   499ec:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
   499f0:	d0b24043 	ldbu	r2,-14079(gp)
};
   499f4:	e037883a 	mov	sp,fp
   499f8:	df000017 	ldw	fp,0(sp)
   499fc:	dec00104 	addi	sp,sp,4
   49a00:	f800283a 	ret

00049a04 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
   49a04:	defff704 	addi	sp,sp,-36
   49a08:	dfc00815 	stw	ra,32(sp)
   49a0c:	df000715 	stw	fp,28(sp)
   49a10:	df000704 	addi	fp,sp,28
   49a14:	e13ffd15 	stw	r4,-12(fp)
   49a18:	2807883a 	mov	r3,r5
   49a1c:	3005883a 	mov	r2,r6
   49a20:	e0fffe05 	stb	r3,-8(fp)
   49a24:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
   49a28:	e03ffc45 	stb	zero,-15(fp)
   49a2c:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
   49a30:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
   49a34:	e0bffe03 	ldbu	r2,-8(fp)
   49a38:	10800084 	addi	r2,r2,2
   49a3c:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
   49a40:	e0bfff03 	ldbu	r2,-4(fp)
   49a44:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
   49a48:	e0fffc44 	addi	r3,fp,-15
   49a4c:	d8000215 	stw	zero,8(sp)
   49a50:	e0bffcc4 	addi	r2,fp,-13
   49a54:	d8800115 	stw	r2,4(sp)
   49a58:	d8000015 	stw	zero,0(sp)
   49a5c:	180f883a 	mov	r7,r3
   49a60:	01800084 	movi	r6,2
   49a64:	000b883a 	mov	r5,zero
   49a68:	01064804 	movi	r4,6432
   49a6c:	00634600 	call	63460 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
   49a70:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
   49a74:	0001883a 	nop
   49a78:	e037883a 	mov	sp,fp
   49a7c:	dfc00117 	ldw	ra,4(sp)
   49a80:	df000017 	ldw	fp,0(sp)
   49a84:	dec00204 	addi	sp,sp,8
   49a88:	f800283a 	ret

00049a8c <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
   49a8c:	defff304 	addi	sp,sp,-52
   49a90:	dfc00c15 	stw	ra,48(sp)
   49a94:	df000b15 	stw	fp,44(sp)
   49a98:	dc000a15 	stw	r16,40(sp)
   49a9c:	df000b04 	addi	fp,sp,44
   49aa0:	e13ffb15 	stw	r4,-20(fp)
   49aa4:	3009883a 	mov	r4,r6
   49aa8:	e1fffe15 	stw	r7,-8(fp)
   49aac:	e17ffc05 	stb	r5,-16(fp)
   49ab0:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
   49ab4:	d809883a 	mov	r4,sp
   49ab8:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
   49abc:	e13ffd03 	ldbu	r4,-12(fp)
   49ac0:	e13ff815 	stw	r4,-32(fp)
   49ac4:	200b883a 	mov	r5,r4
   49ac8:	29400044 	addi	r5,r5,1
   49acc:	2819883a 	mov	r12,r5
   49ad0:	001b883a 	mov	r13,zero
   49ad4:	600ad77a 	srli	r5,r12,29
   49ad8:	681290fa 	slli	r9,r13,3
   49adc:	2a52b03a 	or	r9,r5,r9
   49ae0:	601090fa 	slli	r8,r12,3
   49ae4:	200b883a 	mov	r5,r4
   49ae8:	29400044 	addi	r5,r5,1
   49aec:	2815883a 	mov	r10,r5
   49af0:	0017883a 	mov	r11,zero
   49af4:	500ad77a 	srli	r5,r10,29
   49af8:	580690fa 	slli	r3,r11,3
   49afc:	28c6b03a 	or	r3,r5,r3
   49b00:	500490fa 	slli	r2,r10,3
   49b04:	2005883a 	mov	r2,r4
   49b08:	10800044 	addi	r2,r2,1
   49b0c:	108000c4 	addi	r2,r2,3
   49b10:	1004d0ba 	srli	r2,r2,2
   49b14:	1085883a 	add	r2,r2,r2
   49b18:	1085883a 	add	r2,r2,r2
   49b1c:	d8b7c83a 	sub	sp,sp,r2
   49b20:	d8800304 	addi	r2,sp,12
   49b24:	1005883a 	mov	r2,r2
   49b28:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
   49b2c:	e0bffc03 	ldbu	r2,-16(fp)
   49b30:	10800084 	addi	r2,r2,2
   49b34:	1007883a 	mov	r3,r2
   49b38:	e0bff917 	ldw	r2,-28(fp)
   49b3c:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
   49b40:	e0bff917 	ldw	r2,-28(fp)
   49b44:	10800044 	addi	r2,r2,1
   49b48:	e0fffd03 	ldbu	r3,-12(fp)
   49b4c:	180d883a 	mov	r6,r3
   49b50:	e17ffe17 	ldw	r5,-8(fp)
   49b54:	1009883a 	mov	r4,r2
   49b58:	004fe540 	call	4fe54 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
   49b5c:	e0bffd03 	ldbu	r2,-12(fp)
   49b60:	10800044 	addi	r2,r2,1
   49b64:	1009883a 	mov	r4,r2
   49b68:	e0fff917 	ldw	r3,-28(fp)
   49b6c:	d8000215 	stw	zero,8(sp)
   49b70:	e0bffa44 	addi	r2,fp,-23
   49b74:	d8800115 	stw	r2,4(sp)
   49b78:	d8000015 	stw	zero,0(sp)
   49b7c:	180f883a 	mov	r7,r3
   49b80:	200d883a 	mov	r6,r4
   49b84:	000b883a 	mov	r5,zero
   49b88:	01064804 	movi	r4,6432
   49b8c:	00634600 	call	63460 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
   49b90:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
   49b94:	e0bffd03 	ldbu	r2,-12(fp)
   49b98:	e0fffe17 	ldw	r3,-8(fp)
   49b9c:	1885883a 	add	r2,r3,r2
   49ba0:	8037883a 	mov	sp,r16
}
   49ba4:	e6ffff04 	addi	sp,fp,-4
   49ba8:	dfc00217 	ldw	ra,8(sp)
   49bac:	df000117 	ldw	fp,4(sp)
   49bb0:	dc000017 	ldw	r16,0(sp)
   49bb4:	dec00304 	addi	sp,sp,12
   49bb8:	f800283a 	ret

00049bbc <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
   49bbc:	defffc04 	addi	sp,sp,-16
   49bc0:	dfc00315 	stw	ra,12(sp)
   49bc4:	df000215 	stw	fp,8(sp)
   49bc8:	df000204 	addi	fp,sp,8
   49bcc:	e13ffe15 	stw	r4,-8(fp)
   49bd0:	2805883a 	mov	r2,r5
   49bd4:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
   49bd8:	010001f4 	movhi	r4,7
   49bdc:	2124f904 	addi	r4,r4,-27676
   49be0:	00502100 	call	50210 <puts>
	regWr(rIOPINS1, data);
   49be4:	e0bfff03 	ldbu	r2,-4(fp)
   49be8:	100d883a 	mov	r6,r2
   49bec:	01402804 	movi	r5,160
   49bf0:	e13ffe17 	ldw	r4,-8(fp)
   49bf4:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
   49bf8:	e0bfff03 	ldbu	r2,-4(fp)
   49bfc:	1005d13a 	srai	r2,r2,4
   49c00:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
   49c04:	e0bfff03 	ldbu	r2,-4(fp)
   49c08:	100d883a 	mov	r6,r2
   49c0c:	01402a04 	movi	r5,168
   49c10:	e13ffe17 	ldw	r4,-8(fp)
   49c14:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	return;
   49c18:	0001883a 	nop
}
   49c1c:	e037883a 	mov	sp,fp
   49c20:	dfc00117 	ldw	ra,4(sp)
   49c24:	df000017 	ldw	fp,0(sp)
   49c28:	dec00204 	addi	sp,sp,8
   49c2c:	f800283a 	ret

00049c30 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
   49c30:	defff804 	addi	sp,sp,-32
   49c34:	dfc00715 	stw	ra,28(sp)
   49c38:	df000615 	stw	fp,24(sp)
   49c3c:	df000604 	addi	fp,sp,24
   49c40:	e13ffe15 	stw	r4,-8(fp)
   49c44:	2805883a 	mov	r2,r5
   49c48:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
   49c4c:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
   49c50:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
   49c54:	e0bfff03 	ldbu	r2,-4(fp)
   49c58:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
   49c5c:	e0fffd44 	addi	r3,fp,-11
   49c60:	d8000215 	stw	zero,8(sp)
   49c64:	e0bffd84 	addi	r2,fp,-10
   49c68:	d8800115 	stw	r2,4(sp)
   49c6c:	00800044 	movi	r2,1
   49c70:	d8800015 	stw	r2,0(sp)
   49c74:	180f883a 	mov	r7,r3
   49c78:	01800044 	movi	r6,1
   49c7c:	000b883a 	mov	r5,zero
   49c80:	01064804 	movi	r4,6432
   49c84:	00634600 	call	63460 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
   49c88:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
   49c8c:	e0bffd83 	ldbu	r2,-10(fp)
}
   49c90:	e037883a 	mov	sp,fp
   49c94:	dfc00117 	ldw	ra,4(sp)
   49c98:	df000017 	ldw	fp,0(sp)
   49c9c:	dec00204 	addi	sp,sp,8
   49ca0:	f800283a 	ret

00049ca4 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
   49ca4:	defff604 	addi	sp,sp,-40
   49ca8:	dfc00915 	stw	ra,36(sp)
   49cac:	df000815 	stw	fp,32(sp)
   49cb0:	df000804 	addi	fp,sp,32
   49cb4:	e13ffc15 	stw	r4,-16(fp)
   49cb8:	2807883a 	mov	r3,r5
   49cbc:	3005883a 	mov	r2,r6
   49cc0:	e1ffff15 	stw	r7,-4(fp)
   49cc4:	e0fffd05 	stb	r3,-12(fp)
   49cc8:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
   49ccc:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
   49cd0:	e0bffd03 	ldbu	r2,-12(fp)
   49cd4:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
   49cd8:	e0bffe03 	ldbu	r2,-8(fp)
   49cdc:	e13ffb44 	addi	r4,fp,-19
   49ce0:	d8000215 	stw	zero,8(sp)
   49ce4:	e0ffff17 	ldw	r3,-4(fp)
   49ce8:	d8c00115 	stw	r3,4(sp)
   49cec:	d8800015 	stw	r2,0(sp)
   49cf0:	200f883a 	mov	r7,r4
   49cf4:	01800044 	movi	r6,1
   49cf8:	000b883a 	mov	r5,zero
   49cfc:	01064804 	movi	r4,6432
   49d00:	00634600 	call	63460 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
   49d04:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
   49d08:	e0bffe03 	ldbu	r2,-8(fp)
   49d0c:	e0ffff17 	ldw	r3,-4(fp)
   49d10:	1885883a 	add	r2,r3,r2
}
   49d14:	e037883a 	mov	sp,fp
   49d18:	dfc00117 	ldw	ra,4(sp)
   49d1c:	df000017 	ldw	fp,0(sp)
   49d20:	dec00204 	addi	sp,sp,8
   49d24:	f800283a 	ret

00049d28 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
   49d28:	defffc04 	addi	sp,sp,-16
   49d2c:	dfc00315 	stw	ra,12(sp)
   49d30:	df000215 	stw	fp,8(sp)
   49d34:	df000204 	addi	fp,sp,8
   49d38:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
   49d3c:	010001f4 	movhi	r4,7
   49d40:	2124fd04 	addi	r4,r4,-27660
   49d44:	00502100 	call	50210 <puts>
	uint8_t gpin = 0;
   49d48:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
   49d4c:	01402a04 	movi	r5,168
   49d50:	e13fff17 	ldw	r4,-4(fp)
   49d54:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49d58:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
   49d5c:	e0fffe03 	ldbu	r3,-8(fp)
   49d60:	00bffc04 	movi	r2,-16
   49d64:	1884703a 	and	r2,r3,r2
   49d68:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
   49d6c:	01402804 	movi	r5,160
   49d70:	e13fff17 	ldw	r4,-4(fp)
   49d74:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49d78:	10803fcc 	andi	r2,r2,255
   49d7c:	1005d13a 	srai	r2,r2,4
   49d80:	1007883a 	mov	r3,r2
   49d84:	e0bffe03 	ldbu	r2,-8(fp)
   49d88:	1884b03a 	or	r2,r3,r2
   49d8c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
   49d90:	e0bffe03 	ldbu	r2,-8(fp)
}
   49d94:	e037883a 	mov	sp,fp
   49d98:	dfc00117 	ldw	ra,4(sp)
   49d9c:	df000017 	ldw	fp,0(sp)
   49da0:	dec00204 	addi	sp,sp,8
   49da4:	f800283a 	ret

00049da8 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
   49da8:	defffc04 	addi	sp,sp,-16
   49dac:	dfc00315 	stw	ra,12(sp)
   49db0:	df000215 	stw	fp,8(sp)
   49db4:	df000204 	addi	fp,sp,8
   49db8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
   49dbc:	010001f4 	movhi	r4,7
   49dc0:	21250104 	addi	r4,r4,-27644
   49dc4:	00502100 	call	50210 <puts>
	uint8_t gpout = 0;
   49dc8:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
   49dcc:	01402804 	movi	r5,160
   49dd0:	e13fff17 	ldw	r4,-4(fp)
   49dd4:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49dd8:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
   49ddc:	e0bffe03 	ldbu	r2,-8(fp)
   49de0:	108003cc 	andi	r2,r2,15
   49de4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
   49de8:	01402a04 	movi	r5,168
   49dec:	e13fff17 	ldw	r4,-4(fp)
   49df0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49df4:	10803fcc 	andi	r2,r2,255
   49df8:	1004913a 	slli	r2,r2,4
   49dfc:	1007883a 	mov	r3,r2
   49e00:	e0bffe03 	ldbu	r2,-8(fp)
   49e04:	1884b03a 	or	r2,r3,r2
   49e08:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
   49e0c:	e0bffe03 	ldbu	r2,-8(fp)
}
   49e10:	e037883a 	mov	sp,fp
   49e14:	dfc00117 	ldw	ra,4(sp)
   49e18:	df000017 	ldw	fp,0(sp)
   49e1c:	dec00204 	addi	sp,sp,8
   49e20:	f800283a 	ret

00049e24 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
   49e24:	defffc04 	addi	sp,sp,-16
   49e28:	dfc00315 	stw	ra,12(sp)
   49e2c:	df000215 	stw	fp,8(sp)
   49e30:	df000204 	addi	fp,sp,8
   49e34:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
   49e38:	010001f4 	movhi	r4,7
   49e3c:	21250704 	addi	r4,r4,-27620
   49e40:	00502100 	call	50210 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
   49e44:	0007883a 	mov	r3,zero
   49e48:	00866c04 	movi	r2,6576
   49e4c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
   49e50:	010003f4 	movhi	r4,15
   49e54:	21109004 	addi	r4,r4,16960
   49e58:	0060b980 	call	60b98 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
   49e5c:	00c00044 	movi	r3,1
   49e60:	00866c04 	movi	r2,6576
   49e64:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
   49e68:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
   49e6c:	01800804 	movi	r6,32
   49e70:	01401e04 	movi	r5,120
   49e74:	e13fff17 	ldw	r4,-4(fp)
   49e78:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
   49e7c:	000d883a 	mov	r6,zero
   49e80:	01401e04 	movi	r5,120
   49e84:	e13fff17 	ldw	r4,-4(fp)
   49e88:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
   49e8c:	e0bffe0b 	ldhu	r2,-8(fp)
   49e90:	10800044 	addi	r2,r2,1
   49e94:	e0bffe0d 	sth	r2,-8(fp)
   49e98:	e0bffe0b 	ldhu	r2,-8(fp)
   49e9c:	1004c03a 	cmpne	r2,r2,zero
   49ea0:	10803fcc 	andi	r2,r2,255
   49ea4:	10000a26 	beq	r2,zero,49ed0 <_ZN8MAX3421e5resetEv+0xac>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
   49ea8:	01401a04 	movi	r5,104
   49eac:	e13fff17 	ldw	r4,-4(fp)
   49eb0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49eb4:	10803fcc 	andi	r2,r2,255
   49eb8:	1080004c 	andi	r2,r2,1
   49ebc:	1004c03a 	cmpne	r2,r2,zero
   49ec0:	10803fcc 	andi	r2,r2,255
   49ec4:	1000011e 	bne	r2,zero,49ecc <_ZN8MAX3421e5resetEv+0xa8>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
   49ec8:	003ff006 	br	49e8c <__alt_data_end+0xfffc9e8c>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
   49ecc:	0001883a 	nop
		}
	}
	return ( i);
   49ed0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   49ed4:	e037883a 	mov	sp,fp
   49ed8:	dfc00117 	ldw	ra,4(sp)
   49edc:	df000017 	ldw	fp,0(sp)
   49ee0:	dec00204 	addi	sp,sp,8
   49ee4:	f800283a 	ret

00049ee8 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
   49ee8:	defffe04 	addi	sp,sp,-8
   49eec:	df000115 	stw	fp,4(sp)
   49ef0:	df000104 	addi	fp,sp,4
   49ef4:	2005883a 	mov	r2,r4
   49ef8:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
   49efc:	00800044 	movi	r2,1
}
   49f00:	e037883a 	mov	sp,fp
   49f04:	df000017 	ldw	fp,0(sp)
   49f08:	dec00104 	addi	sp,sp,4
   49f0c:	f800283a 	ret

00049f10 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
   49f10:	defffd04 	addi	sp,sp,-12
   49f14:	dfc00215 	stw	ra,8(sp)
   49f18:	df000115 	stw	fp,4(sp)
   49f1c:	df000104 	addi	fp,sp,4
   49f20:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
   49f24:	010001f4 	movhi	r4,7
   49f28:	21250b04 	addi	r4,r4,-27604
   49f2c:	00502100 	call	50210 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
   49f30:	01800604 	movi	r6,24
   49f34:	01402204 	movi	r5,136
   49f38:	e13fff17 	ldw	r4,-4(fp)
   49f3c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
   49f40:	e13fff17 	ldw	r4,-4(fp)
   49f44:	0049e240 	call	49e24 <_ZN8MAX3421e5resetEv>
   49f48:	10bfffcc 	andi	r2,r2,65535
   49f4c:	1005003a 	cmpeq	r2,r2,zero
   49f50:	10803fcc 	andi	r2,r2,255
   49f54:	10000226 	beq	r2,zero,49f60 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
   49f58:	00bfffc4 	movi	r2,-1
   49f5c:	00002006 	br	49fe0 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
   49f60:	01803044 	movi	r6,193
   49f64:	01403604 	movi	r5,216
   49f68:	e13fff17 	ldw	r4,-4(fp)
   49f6c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
   49f70:	01801804 	movi	r6,96
   49f74:	01403404 	movi	r5,208
   49f78:	e13fff17 	ldw	r4,-4(fp)
   49f7c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
   49f80:	01800104 	movi	r6,4
   49f84:	01403a04 	movi	r5,232
   49f88:	e13fff17 	ldw	r4,-4(fp)
   49f8c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
   49f90:	01403a04 	movi	r5,232
   49f94:	e13fff17 	ldw	r4,-4(fp)
   49f98:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   49f9c:	10803fcc 	andi	r2,r2,255
   49fa0:	1080010c 	andi	r2,r2,4
   49fa4:	1005003a 	cmpeq	r2,r2,zero
   49fa8:	10803fcc 	andi	r2,r2,255
   49fac:	10000126 	beq	r2,zero,49fb4 <_ZN8MAX3421e4InitEv+0xa4>
   49fb0:	003ff706 	br	49f90 <__alt_data_end+0xfffc9f90>

	busprobe(); //check if anything is connected
   49fb4:	e13fff17 	ldw	r4,-4(fp)
   49fb8:	004a10c0 	call	4a10c <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
   49fbc:	01800804 	movi	r6,32
   49fc0:	01403204 	movi	r5,200
   49fc4:	e13fff17 	ldw	r4,-4(fp)
   49fc8:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
   49fcc:	01800044 	movi	r6,1
   49fd0:	01402004 	movi	r5,128
   49fd4:	e13fff17 	ldw	r4,-4(fp)
   49fd8:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
   49fdc:	0005883a 	mov	r2,zero
}
   49fe0:	e037883a 	mov	sp,fp
   49fe4:	dfc00117 	ldw	ra,4(sp)
   49fe8:	df000017 	ldw	fp,0(sp)
   49fec:	dec00204 	addi	sp,sp,8
   49ff0:	f800283a 	ret

00049ff4 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
   49ff4:	defffc04 	addi	sp,sp,-16
   49ff8:	dfc00315 	stw	ra,12(sp)
   49ffc:	df000215 	stw	fp,8(sp)
   4a000:	df000204 	addi	fp,sp,8
   4a004:	e13ffe15 	stw	r4,-8(fp)
   4a008:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
   4a00c:	010001f4 	movhi	r4,7
   4a010:	21250f04 	addi	r4,r4,-27588
   4a014:	00502100 	call	50210 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
   4a018:	01800644 	movi	r6,25
   4a01c:	01402204 	movi	r5,136
   4a020:	e13ffe17 	ldw	r4,-8(fp)
   4a024:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
   4a028:	e13ffe17 	ldw	r4,-8(fp)
   4a02c:	0049e240 	call	49e24 <_ZN8MAX3421e5resetEv>
   4a030:	10bfffcc 	andi	r2,r2,65535
   4a034:	1005003a 	cmpeq	r2,r2,zero
   4a038:	10803fcc 	andi	r2,r2,255
   4a03c:	10000226 	beq	r2,zero,4a048 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
   4a040:	00bfffc4 	movi	r2,-1
   4a044:	00002c06 	br	4a0f8 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
   4a048:	e0bfff17 	ldw	r2,-4(fp)
   4a04c:	1080fa08 	cmpgei	r2,r2,1000
   4a050:	1000021e 	bne	r2,zero,4a05c <_ZN8MAX3421e4InitEi+0x68>
   4a054:	0080fa04 	movi	r2,1000
   4a058:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
   4a05c:	e0bfff17 	ldw	r2,-4(fp)
   4a060:	1009883a 	mov	r4,r2
   4a064:	00406840 	call	40684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
   4a068:	01803044 	movi	r6,193
   4a06c:	01403604 	movi	r5,216
   4a070:	e13ffe17 	ldw	r4,-8(fp)
   4a074:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
   4a078:	01801804 	movi	r6,96
   4a07c:	01403404 	movi	r5,208
   4a080:	e13ffe17 	ldw	r4,-8(fp)
   4a084:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
   4a088:	01800104 	movi	r6,4
   4a08c:	01403a04 	movi	r5,232
   4a090:	e13ffe17 	ldw	r4,-8(fp)
   4a094:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
   4a098:	01403a04 	movi	r5,232
   4a09c:	e13ffe17 	ldw	r4,-8(fp)
   4a0a0:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4a0a4:	10803fcc 	andi	r2,r2,255
   4a0a8:	1080010c 	andi	r2,r2,4
   4a0ac:	1005003a 	cmpeq	r2,r2,zero
   4a0b0:	10803fcc 	andi	r2,r2,255
   4a0b4:	10000126 	beq	r2,zero,4a0bc <_ZN8MAX3421e4InitEi+0xc8>
   4a0b8:	003ff706 	br	4a098 <__alt_data_end+0xfffca098>

	busprobe(); //check if anything is connected
   4a0bc:	e13ffe17 	ldw	r4,-8(fp)
   4a0c0:	004a10c0 	call	4a10c <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
   4a0c4:	01800804 	movi	r6,32
   4a0c8:	01403204 	movi	r5,200
   4a0cc:	e13ffe17 	ldw	r4,-8(fp)
   4a0d0:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
   4a0d4:	01800044 	movi	r6,1
   4a0d8:	01402004 	movi	r5,128
   4a0dc:	e13ffe17 	ldw	r4,-8(fp)
   4a0e0:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
   4a0e4:	01800604 	movi	r6,24
   4a0e8:	01402204 	movi	r5,136
   4a0ec:	e13ffe17 	ldw	r4,-8(fp)
   4a0f0:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
   4a0f4:	0005883a 	mov	r2,zero
}
   4a0f8:	e037883a 	mov	sp,fp
   4a0fc:	dfc00117 	ldw	ra,4(sp)
   4a100:	df000017 	ldw	fp,0(sp)
   4a104:	dec00204 	addi	sp,sp,8
   4a108:	f800283a 	ret

0004a10c <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
   4a10c:	defffc04 	addi	sp,sp,-16
   4a110:	dfc00315 	stw	ra,12(sp)
   4a114:	df000215 	stw	fp,8(sp)
   4a118:	df000204 	addi	fp,sp,8
   4a11c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
   4a120:	010001f4 	movhi	r4,7
   4a124:	21251504 	addi	r4,r4,-27564
   4a128:	00502100 	call	50210 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
   4a12c:	01403e04 	movi	r5,248
   4a130:	e13fff17 	ldw	r4,-4(fp)
   4a134:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4a138:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
   4a13c:	e0fffe03 	ldbu	r3,-8(fp)
   4a140:	00bff004 	movi	r2,-64
   4a144:	1884703a 	and	r2,r3,r2
   4a148:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
   4a14c:	e0bffe03 	ldbu	r2,-8(fp)
   4a150:	10c01020 	cmpeqi	r3,r2,64
   4a154:	1800251e 	bne	r3,zero,4a1ec <_ZN8MAX3421e8busprobeEv+0xe0>
   4a158:	10c01048 	cmpgei	r3,r2,65
   4a15c:	1800021e 	bne	r3,zero,4a168 <_ZN8MAX3421e8busprobeEv+0x5c>
   4a160:	10003b26 	beq	r2,zero,4a250 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
   4a164:	00004006 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
   4a168:	10c02020 	cmpeqi	r3,r2,128
   4a16c:	1800031e 	bne	r3,zero,4a17c <_ZN8MAX3421e8busprobeEv+0x70>
   4a170:	10803020 	cmpeqi	r2,r2,192
   4a174:	1000331e 	bne	r2,zero,4a244 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
   4a178:	00003b06 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
   4a17c:	01403604 	movi	r5,216
   4a180:	e13fff17 	ldw	r4,-4(fp)
   4a184:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4a188:	10803fcc 	andi	r2,r2,255
   4a18c:	1080008c 	andi	r2,r2,2
   4a190:	1005003a 	cmpeq	r2,r2,zero
   4a194:	10803fcc 	andi	r2,r2,255
   4a198:	10000a26 	beq	r2,zero,4a1c4 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
   4a19c:	010001f4 	movhi	r4,7
   4a1a0:	21251a04 	addi	r4,r4,-27544
   4a1a4:	00502100 	call	50210 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
   4a1a8:	01803244 	movi	r6,201
   4a1ac:	01403604 	movi	r5,216
   4a1b0:	e13fff17 	ldw	r4,-4(fp)
   4a1b4:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
   4a1b8:	00800084 	movi	r2,2
   4a1bc:	d0b24045 	stb	r2,-14079(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
   4a1c0:	00002906 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
   4a1c4:	010001f4 	movhi	r4,7
   4a1c8:	21252104 	addi	r4,r4,-27516
   4a1cc:	00502100 	call	50210 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
   4a1d0:	018032c4 	movi	r6,203
   4a1d4:	01403604 	movi	r5,216
   4a1d8:	e13fff17 	ldw	r4,-4(fp)
   4a1dc:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
   4a1e0:	008000c4 	movi	r2,3
   4a1e4:	d0b24045 	stb	r2,-14079(gp)
			}
			break;
   4a1e8:	00001f06 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
   4a1ec:	01403604 	movi	r5,216
   4a1f0:	e13fff17 	ldw	r4,-4(fp)
   4a1f4:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4a1f8:	10803fcc 	andi	r2,r2,255
   4a1fc:	1080008c 	andi	r2,r2,2
   4a200:	1005003a 	cmpeq	r2,r2,zero
   4a204:	10803fcc 	andi	r2,r2,255
   4a208:	10000726 	beq	r2,zero,4a228 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
   4a20c:	018032c4 	movi	r6,203
   4a210:	01403604 	movi	r5,216
   4a214:	e13fff17 	ldw	r4,-4(fp)
   4a218:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
   4a21c:	008000c4 	movi	r2,3
   4a220:	d0b24045 	stb	r2,-14079(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
   4a224:	00001006 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
   4a228:	01803244 	movi	r6,201
   4a22c:	01403604 	movi	r5,216
   4a230:	e13fff17 	ldw	r4,-4(fp)
   4a234:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
   4a238:	00800084 	movi	r2,2
   4a23c:	d0b24045 	stb	r2,-14079(gp)
			}
			break;
   4a240:	00000906 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
   4a244:	00800044 	movi	r2,1
   4a248:	d0b24045 	stb	r2,-14079(gp)
			break;
   4a24c:	00000606 	br	4a268 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
   4a250:	01803444 	movi	r6,209
   4a254:	01403604 	movi	r5,216
   4a258:	e13fff17 	ldw	r4,-4(fp)
   4a25c:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
   4a260:	d0324045 	stb	zero,-14079(gp)
			break;
   4a264:	0001883a 	nop
	}//end switch( bus_sample )
}
   4a268:	0001883a 	nop
   4a26c:	e037883a 	mov	sp,fp
   4a270:	dfc00117 	ldw	ra,4(sp)
   4a274:	df000017 	ldw	fp,0(sp)
   4a278:	dec00204 	addi	sp,sp,8
   4a27c:	f800283a 	ret

0004a280 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
   4a280:	defffc04 	addi	sp,sp,-16
   4a284:	dfc00315 	stw	ra,12(sp)
   4a288:	df000215 	stw	fp,8(sp)
   4a28c:	df000204 	addi	fp,sp,8
   4a290:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
   4a294:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
   4a298:	00867404 	movi	r2,6608
   4a29c:	10800003 	ldbu	r2,0(r2)
   4a2a0:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
   4a2a4:	00867404 	movi	r2,6608
   4a2a8:	10800037 	ldwio	r2,0(r2)
   4a2ac:	1005003a 	cmpeq	r2,r2,zero
   4a2b0:	10803fcc 	andi	r2,r2,255
   4a2b4:	10000326 	beq	r2,zero,4a2c4 <_ZN8MAX3421e4TaskEv+0x44>
		rcode = IntHandler();
   4a2b8:	e13fff17 	ldw	r4,-4(fp)
   4a2bc:	004a2dc0 	call	4a2dc <_ZN8MAX3421e10IntHandlerEv>
   4a2c0:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
   4a2c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   4a2c8:	e037883a 	mov	sp,fp
   4a2cc:	dfc00117 	ldw	ra,4(sp)
   4a2d0:	df000017 	ldw	fp,0(sp)
   4a2d4:	dec00204 	addi	sp,sp,8
   4a2d8:	f800283a 	ret

0004a2dc <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
   4a2dc:	defffc04 	addi	sp,sp,-16
   4a2e0:	dfc00315 	stw	ra,12(sp)
   4a2e4:	df000215 	stw	fp,8(sp)
   4a2e8:	df000204 	addi	fp,sp,8
   4a2ec:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
   4a2f0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
   4a2f4:	01403204 	movi	r5,200
   4a2f8:	e13fff17 	ldw	r4,-4(fp)
   4a2fc:	0049c300 	call	49c30 <_ZN8MAX3421e5regRdEh>
   4a300:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
   4a304:	e0bffe43 	ldbu	r2,-7(fp)
   4a308:	1080080c 	andi	r2,r2,32
   4a30c:	10000526 	beq	r2,zero,4a324 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
   4a310:	e13fff17 	ldw	r4,-4(fp)
   4a314:	004a10c0 	call	4a10c <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
   4a318:	e0bffe03 	ldbu	r2,-8(fp)
   4a31c:	10800814 	ori	r2,r2,32
   4a320:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
   4a324:	e0bffe03 	ldbu	r2,-8(fp)
   4a328:	100d883a 	mov	r6,r2
   4a32c:	01403204 	movi	r5,200
   4a330:	e13fff17 	ldw	r4,-4(fp)
   4a334:	0049a040 	call	49a04 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
   4a338:	e0bffe03 	ldbu	r2,-8(fp)
}
   4a33c:	e037883a 	mov	sp,fp
   4a340:	dfc00117 	ldw	ra,4(sp)
   4a344:	df000017 	ldw	fp,0(sp)
   4a348:	dec00204 	addi	sp,sp,8
   4a34c:	f800283a 	ret

0004a350 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
   4a350:	defffe04 	addi	sp,sp,-8
   4a354:	df000115 	stw	fp,4(sp)
   4a358:	df000104 	addi	fp,sp,4
   4a35c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
   4a360:	0005883a 	mov	r2,zero
}
   4a364:	e037883a 	mov	sp,fp
   4a368:	df000017 	ldw	fp,0(sp)
   4a36c:	dec00104 	addi	sp,sp,4
   4a370:	f800283a 	ret

0004a374 <_Z6onInitv>:
bool ped_flip = 0;

void MIDI_poll();

void onInit()
{
   4a374:	defff804 	addi	sp,sp,-32
   4a378:	dfc00715 	stw	ra,28(sp)
   4a37c:	df000615 	stw	fp,24(sp)
   4a380:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
   4a384:	010001f4 	movhi	r4,7
   4a388:	21084804 	addi	r4,r4,8480
   4a38c:	004b0200 	call	4b020 <_ZN9USBH_MIDI8idVendorEv>
   4a390:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
   4a394:	010001f4 	movhi	r4,7
   4a398:	21084804 	addi	r4,r4,8480
   4a39c:	004b0480 	call	4b048 <_ZN9USBH_MIDI9idProductEv>
   4a3a0:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
   4a3a4:	e0fffa0b 	ldhu	r3,-24(fp)
   4a3a8:	e13ffa8b 	ldhu	r4,-22(fp)
   4a3ac:	e0bffb04 	addi	r2,fp,-20
   4a3b0:	200f883a 	mov	r7,r4
   4a3b4:	180d883a 	mov	r6,r3
   4a3b8:	014001f4 	movhi	r5,7
   4a3bc:	296d5d04 	addi	r5,r5,-19084
   4a3c0:	1009883a 	mov	r4,r2
   4a3c4:	00505d40 	call	505d4 <sprintf>
  printf("%s\n", buf);
   4a3c8:	e0bffb04 	addi	r2,fp,-20
   4a3cc:	1009883a 	mov	r4,r2
   4a3d0:	00502100 	call	50210 <puts>
}
   4a3d4:	0001883a 	nop
   4a3d8:	e037883a 	mov	sp,fp
   4a3dc:	dfc00117 	ldw	ra,4(sp)
   4a3e0:	df000017 	ldw	fp,0(sp)
   4a3e4:	dec00204 	addi	sp,sp,8
   4a3e8:	f800283a 	ret

0004a3ec <_Z10MIDI_setupv>:

void MIDI_setup()
{
   4a3ec:	defffe04 	addi	sp,sp,-8
   4a3f0:	dfc00115 	stw	ra,4(sp)
   4a3f4:	df000015 	stw	fp,0(sp)
   4a3f8:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
   4a3fc:	010001f4 	movhi	r4,7
   4a400:	21081904 	addi	r4,r4,8292
   4a404:	0049f100 	call	49f10 <_ZN8MAX3421e4InitEv>
   4a408:	10803fcc 	andi	r2,r2,255
   4a40c:	1080201c 	xori	r2,r2,128
   4a410:	10bfe004 	addi	r2,r2,-128
   4a414:	10bfffe0 	cmpeqi	r2,r2,-1
   4a418:	10803fcc 	andi	r2,r2,255
   4a41c:	10000326 	beq	r2,zero,4a42c <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
   4a420:	010001f4 	movhi	r4,7
   4a424:	212d6204 	addi	r4,r4,-19064
   4a428:	00500f40 	call	500f4 <printf>
	printf ("USB Started\n\r");
   4a42c:	010001f4 	movhi	r4,7
   4a430:	212d6404 	addi	r4,r4,-19056
   4a434:	00500f40 	call	500f4 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
   4a438:	01400174 	movhi	r5,5
   4a43c:	2968dd04 	addi	r5,r5,-23692
   4a440:	010001f4 	movhi	r4,7
   4a444:	21084804 	addi	r4,r4,8480
   4a448:	004b0700 	call	4b070 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
   4a44c:	0001883a 	nop
   4a450:	e037883a 	mov	sp,fp
   4a454:	dfc00117 	ldw	ra,4(sp)
   4a458:	df000017 	ldw	fp,0(sp)
   4a45c:	dec00204 	addi	sp,sp,8
   4a460:	f800283a 	ret

0004a464 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
   4a464:	deffe504 	addi	sp,sp,-108
   4a468:	dfc01a15 	stw	ra,104(sp)
   4a46c:	df001915 	stw	fp,100(sp)
   4a470:	df001904 	addi	fp,sp,100
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
   4a474:	e0ffeec4 	addi	r3,fp,-69
   4a478:	e0bfff04 	addi	r2,fp,-4
   4a47c:	180d883a 	mov	r6,r3
   4a480:	100b883a 	mov	r5,r2
   4a484:	010001f4 	movhi	r4,7
   4a488:	21084804 	addi	r4,r4,8480
   4a48c:	0047f580 	call	47f58 <_ZN9USBH_MIDI8RecvDataEPtPh>
   4a490:	10803fcc 	andi	r2,r2,255
   4a494:	1005003a 	cmpeq	r2,r2,zero
   4a498:	10803fcc 	andi	r2,r2,255
   4a49c:	10024f26 	beq	r2,zero,4addc <_Z9MIDI_pollv+0x978>
		channel = (bufMidi[1] & 0x0F);
   4a4a0:	e0bfef03 	ldbu	r2,-68(fp)
   4a4a4:	108003cc 	andi	r2,r2,15
   4a4a8:	e0bfee05 	stb	r2,-72(fp)
		ctrl = bufMidi[2];
   4a4ac:	e0bfef43 	ldbu	r2,-67(fp)
   4a4b0:	e0bfee45 	stb	r2,-71(fp)
		par = bufMidi[3];
   4a4b4:	e0bfef83 	ldbu	r2,-66(fp)
   4a4b8:	e0bfee85 	stb	r2,-70(fp)
	switch (bufMidi[1] & 0xF0) {
   4a4bc:	e0bfef03 	ldbu	r2,-68(fp)
   4a4c0:	10803fcc 	andi	r2,r2,255
   4a4c4:	10803c0c 	andi	r2,r2,240
   4a4c8:	10c02420 	cmpeqi	r3,r2,144
   4a4cc:	18000a1e 	bne	r3,zero,4a4f8 <_Z9MIDI_pollv+0x94>
   4a4d0:	10c02448 	cmpgei	r3,r2,145
   4a4d4:	1800031e 	bne	r3,zero,4a4e4 <_Z9MIDI_pollv+0x80>
   4a4d8:	10802020 	cmpeqi	r2,r2,128
   4a4dc:	1000061e 	bne	r2,zero,4a4f8 <_Z9MIDI_pollv+0x94>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
   4a4e0:	00023e06 	br	4addc <_Z9MIDI_pollv+0x978>

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
   4a4e4:	10c02c20 	cmpeqi	r3,r2,176
   4a4e8:	18000b1e 	bne	r3,zero,4a518 <_Z9MIDI_pollv+0xb4>
   4a4ec:	10803820 	cmpeqi	r2,r2,224
   4a4f0:	10022f1e 	bne	r2,zero,4adb0 <_Z9MIDI_pollv+0x94c>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
   4a4f4:	00023906 	br	4addc <_Z9MIDI_pollv+0x978>
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
		case NOTE_OFF:
		case NOTE_ON:
			set_note(channel, ctrl, par);
   4a4f8:	e0bfee03 	ldbu	r2,-72(fp)
   4a4fc:	e0ffee43 	ldbu	r3,-71(fp)
   4a500:	e13fee83 	ldbu	r4,-70(fp)
   4a504:	200d883a 	mov	r6,r4
   4a508:	180b883a 	mov	r5,r3
   4a50c:	1009883a 	mov	r4,r2
   4a510:	00455b40 	call	455b4 <_Z8set_notehhh>
			break;
   4a514:	00023106 	br	4addc <_Z9MIDI_pollv+0x978>
		case CONTROL_CHANGE:
			long_par = par;
   4a518:	e0bfee83 	ldbu	r2,-70(fp)
   4a51c:	e0bfed15 	stw	r2,-76(fp)
			switch(ctrl) {
   4a520:	e0bfee43 	ldbu	r2,-71(fp)
   4a524:	10c01ba8 	cmpgeui	r3,r2,110
   4a528:	18021f1e 	bne	r3,zero,4ada8 <_Z9MIDI_pollv+0x944>
   4a52c:	100690ba 	slli	r3,r2,2
   4a530:	00800174 	movhi	r2,5
   4a534:	10a95104 	addi	r2,r2,-23228
   4a538:	1885883a 	add	r2,r3,r2
   4a53c:	10800017 	ldw	r2,0(r2)
   4a540:	1000683a 	jmp	r2
   4a544:	0004ada8 	cmpgeui	zero,zero,4790
   4a548:	0004a6fc 	xorhi	zero,zero,4763
   4a54c:	0004ada8 	cmpgeui	zero,zero,4790
   4a550:	0004a8d4 	movui	zero,4771
   4a554:	0004ada8 	cmpgeui	zero,zero,4790
   4a558:	0004ada8 	cmpgeui	zero,zero,4790
   4a55c:	0004ada8 	cmpgeui	zero,zero,4790
   4a560:	0004a714 	movui	zero,4764
   4a564:	0004ada8 	cmpgeui	zero,zero,4790
   4a568:	0004a774 	movhi	zero,4765
   4a56c:	0004ada8 	cmpgeui	zero,zero,4790
   4a570:	0004ada8 	cmpgeui	zero,zero,4790
   4a574:	0004ada8 	cmpgeui	zero,zero,4790
   4a578:	0004ada8 	cmpgeui	zero,zero,4790
   4a57c:	0004a78c 	andi	zero,zero,4766
   4a580:	0004ada8 	cmpgeui	zero,zero,4790
   4a584:	0004ada8 	cmpgeui	zero,zero,4790
   4a588:	0004ada8 	cmpgeui	zero,zero,4790
   4a58c:	0004ada8 	cmpgeui	zero,zero,4790
   4a590:	0004ada8 	cmpgeui	zero,zero,4790
   4a594:	0004ada8 	cmpgeui	zero,zero,4790
   4a598:	0004ada8 	cmpgeui	zero,zero,4790
   4a59c:	0004ada8 	cmpgeui	zero,zero,4790
   4a5a0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5a4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5a8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5ac:	0004ada8 	cmpgeui	zero,zero,4790
   4a5b0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5b4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5b8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5bc:	0004ada8 	cmpgeui	zero,zero,4790
   4a5c0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5c4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5c8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5cc:	0004ada8 	cmpgeui	zero,zero,4790
   4a5d0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5d4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5d8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5dc:	0004ada8 	cmpgeui	zero,zero,4790
   4a5e0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5e4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5e8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5ec:	0004ada8 	cmpgeui	zero,zero,4790
   4a5f0:	0004ada8 	cmpgeui	zero,zero,4790
   4a5f4:	0004ada8 	cmpgeui	zero,zero,4790
   4a5f8:	0004ada8 	cmpgeui	zero,zero,4790
   4a5fc:	0004ada8 	cmpgeui	zero,zero,4790
   4a600:	0004ada8 	cmpgeui	zero,zero,4790
   4a604:	0004ada8 	cmpgeui	zero,zero,4790
   4a608:	0004ada8 	cmpgeui	zero,zero,4790
   4a60c:	0004ada8 	cmpgeui	zero,zero,4790
   4a610:	0004ada8 	cmpgeui	zero,zero,4790
   4a614:	0004ada8 	cmpgeui	zero,zero,4790
   4a618:	0004ada8 	cmpgeui	zero,zero,4790
   4a61c:	0004ada8 	cmpgeui	zero,zero,4790
   4a620:	0004ada8 	cmpgeui	zero,zero,4790
   4a624:	0004ada8 	cmpgeui	zero,zero,4790
   4a628:	0004ada8 	cmpgeui	zero,zero,4790
   4a62c:	0004ada8 	cmpgeui	zero,zero,4790
   4a630:	0004ada8 	cmpgeui	zero,zero,4790
   4a634:	0004ada8 	cmpgeui	zero,zero,4790
   4a638:	0004ada8 	cmpgeui	zero,zero,4790
   4a63c:	0004ada8 	cmpgeui	zero,zero,4790
   4a640:	0004ada8 	cmpgeui	zero,zero,4790
   4a644:	0004a72c 	andhi	zero,zero,4764
   4a648:	0004ada8 	cmpgeui	zero,zero,4790
   4a64c:	0004ada8 	cmpgeui	zero,zero,4790
   4a650:	0004ada8 	cmpgeui	zero,zero,4790
   4a654:	0004ada8 	cmpgeui	zero,zero,4790
   4a658:	0004ada8 	cmpgeui	zero,zero,4790
   4a65c:	0004ada8 	cmpgeui	zero,zero,4790
   4a660:	0004ada8 	cmpgeui	zero,zero,4790
   4a664:	0004a96c 	andhi	zero,zero,4773
   4a668:	0004a7a4 	muli	zero,zero,4766
   4a66c:	0004ada8 	cmpgeui	zero,zero,4790
   4a670:	0004a83c 	xorhi	zero,zero,4768
   4a674:	0004ada8 	cmpgeui	zero,zero,4790
   4a678:	0004ada8 	cmpgeui	zero,zero,4790
   4a67c:	0004ada8 	cmpgeui	zero,zero,4790
   4a680:	0004ada8 	cmpgeui	zero,zero,4790
   4a684:	0004ada8 	cmpgeui	zero,zero,4790
   4a688:	0004ada8 	cmpgeui	zero,zero,4790
   4a68c:	0004a75c 	xori	zero,zero,4765
   4a690:	0004ada8 	cmpgeui	zero,zero,4790
   4a694:	0004ada8 	cmpgeui	zero,zero,4790
   4a698:	0004ada8 	cmpgeui	zero,zero,4790
   4a69c:	0004ada8 	cmpgeui	zero,zero,4790
   4a6a0:	0004ada8 	cmpgeui	zero,zero,4790
   4a6a4:	0004ada8 	cmpgeui	zero,zero,4790
   4a6a8:	0004ada8 	cmpgeui	zero,zero,4790
   4a6ac:	0004ada8 	cmpgeui	zero,zero,4790
   4a6b0:	0004ada8 	cmpgeui	zero,zero,4790
   4a6b4:	0004ada8 	cmpgeui	zero,zero,4790
   4a6b8:	0004ada8 	cmpgeui	zero,zero,4790
   4a6bc:	0004ada8 	cmpgeui	zero,zero,4790
   4a6c0:	0004ada8 	cmpgeui	zero,zero,4790
   4a6c4:	0004ada8 	cmpgeui	zero,zero,4790
   4a6c8:	0004ada8 	cmpgeui	zero,zero,4790
   4a6cc:	0004ada8 	cmpgeui	zero,zero,4790
   4a6d0:	0004ada8 	cmpgeui	zero,zero,4790
   4a6d4:	0004ada8 	cmpgeui	zero,zero,4790
   4a6d8:	0004ada8 	cmpgeui	zero,zero,4790
   4a6dc:	0004ada8 	cmpgeui	zero,zero,4790
   4a6e0:	0004ada8 	cmpgeui	zero,zero,4790
   4a6e4:	0004aa04 	movi	zero,4776
   4a6e8:	0004aa9c 	xori	zero,zero,4778
   4a6ec:	0004ab34 	movhi	zero,4780
   4a6f0:	0004abcc 	andi	zero,zero,4783
   4a6f4:	0004ac64 	muli	zero,zero,4785
   4a6f8:	0004ad08 	cmpgei	zero,zero,4788
				case MOD_WHEEL:
					set_ctrl(channel, MIX, long_par);
   4a6fc:	e0bfee03 	ldbu	r2,-72(fp)
   4a700:	e1bfed17 	ldw	r6,-76(fp)
   4a704:	014001c4 	movi	r5,7
   4a708:	1009883a 	mov	r4,r2
   4a70c:	004565c0 	call	4565c <_Z8set_ctrlhhm>
					break;
   4a710:	0001a606 	br	4adac <_Z9MIDI_pollv+0x948>
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
   4a714:	d0b24217 	ldw	r2,-14072(gp)
   4a718:	e0ffee83 	ldbu	r3,-70(fp)
   4a71c:	180b883a 	mov	r5,r3
   4a720:	1009883a 	mov	r4,r2
   4a724:	00473c80 	call	473c8 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
					break;
   4a728:	0001a006 	br	4adac <_Z9MIDI_pollv+0x948>
				case SUSTAIN_PEDAL:
					if(ped_flip) long_par = ~long_par;
   4a72c:	d0b24503 	ldbu	r2,-14060(gp)
   4a730:	10803fcc 	andi	r2,r2,255
   4a734:	10000326 	beq	r2,zero,4a744 <_Z9MIDI_pollv+0x2e0>
   4a738:	e0bfed17 	ldw	r2,-76(fp)
   4a73c:	0084303a 	nor	r2,zero,r2
   4a740:	e0bfed15 	stw	r2,-76(fp)
					set_ctrl(channel, SUS, long_par);
   4a744:	e0bfee03 	ldbu	r2,-72(fp)
   4a748:	e1bfed17 	ldw	r6,-76(fp)
   4a74c:	01400184 	movi	r5,6
   4a750:	1009883a 	mov	r4,r2
   4a754:	004565c0 	call	4565c <_Z8set_ctrlhhm>
					break;
   4a758:	00019406 	br	4adac <_Z9MIDI_pollv+0x948>
				case PEDAL_FLIP:
					set_ctrl(channel, PED_INV, long_par);
   4a75c:	e0bfee03 	ldbu	r2,-72(fp)
   4a760:	e1bfed17 	ldw	r6,-76(fp)
   4a764:	014002c4 	movi	r5,11
   4a768:	1009883a 	mov	r4,r2
   4a76c:	004565c0 	call	4565c <_Z8set_ctrlhhm>
					break;
   4a770:	00018e06 	br	4adac <_Z9MIDI_pollv+0x948>
				/*case MOD_WHEEL_ON:
					set_ctrl(channel, MOD_ON, long_par);
					break;*/
				case SAMPLE_1_SEL:
					set_ctrl(channel, SAMPLE_1, long_par);
   4a774:	e0bfee03 	ldbu	r2,-72(fp)
   4a778:	e1bfed17 	ldw	r6,-76(fp)
   4a77c:	01400204 	movi	r5,8
   4a780:	1009883a 	mov	r4,r2
   4a784:	004565c0 	call	4565c <_Z8set_ctrlhhm>
					break;
   4a788:	00018806 	br	4adac <_Z9MIDI_pollv+0x948>
				case SAMPLE_2_SEL:
					set_ctrl(channel, SAMPLE_2, long_par);
   4a78c:	e0bfee03 	ldbu	r2,-72(fp)
   4a790:	e1bfed17 	ldw	r6,-76(fp)
   4a794:	01400244 	movi	r5,9
   4a798:	1009883a 	mov	r4,r2
   4a79c:	004565c0 	call	4565c <_Z8set_ctrlhhm>
					break;
   4a7a0:	00018206 	br	4adac <_Z9MIDI_pollv+0x948>
				case ATT_TIME_H:
					att_h= (par * 5000) / 0x7F;
   4a7a4:	e0bfee83 	ldbu	r2,-70(fp)
   4a7a8:	0144e204 	movi	r5,5000
   4a7ac:	1009883a 	mov	r4,r2
   4a7b0:	004dab40 	call	4dab4 <__mulsi3>
   4a7b4:	01401fc4 	movi	r5,127
   4a7b8:	1009883a 	mov	r4,r2
   4a7bc:	004d9000 	call	4d900 <__divsi3>
   4a7c0:	d0b2430d 	sth	r2,-14068(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4a7c4:	d0b2430b 	ldhu	r2,-14068(gp)
   4a7c8:	123fffcc 	andi	r8,r2,65535
   4a7cc:	d0a5a20b 	ldhu	r2,-27000(gp)
   4a7d0:	127fffcc 	andi	r9,r2,65535
   4a7d4:	d0b2438b 	ldhu	r2,-14066(gp)
   4a7d8:	12bfffcc 	andi	r10,r2,65535
   4a7dc:	d0a5a28b 	ldhu	r2,-26998(gp)
   4a7e0:	12ffffcc 	andi	r11,r2,65535
   4a7e4:	d0a5a18b 	ldhu	r2,-27002(gp)
   4a7e8:	10bfffcc 	andi	r2,r2,65535
   4a7ec:	d0f2448b 	ldhu	r3,-14062(gp)
   4a7f0:	18ffffcc 	andi	r3,r3,65535
   4a7f4:	d132440b 	ldhu	r4,-14064(gp)
   4a7f8:	213fffcc 	andi	r4,r4,65535
   4a7fc:	d165a30b 	ldhu	r5,-26996(gp)
   4a800:	297fffcc 	andi	r5,r5,65535
   4a804:	d1a5a417 	ldw	r6,-26992(gp)
   4a808:	d1e5a517 	ldw	r7,-26988(gp)
   4a80c:	d9c00515 	stw	r7,20(sp)
   4a810:	d9800415 	stw	r6,16(sp)
   4a814:	d9400315 	stw	r5,12(sp)
   4a818:	d9000215 	stw	r4,8(sp)
   4a81c:	d8c00115 	stw	r3,4(sp)
   4a820:	d8800015 	stw	r2,0(sp)
   4a824:	580f883a 	mov	r7,r11
   4a828:	500d883a 	mov	r6,r10
   4a82c:	480b883a 	mov	r5,r9
   4a830:	4009883a 	mov	r4,r8
   4a834:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4a838:	00015c06 	br	4adac <_Z9MIDI_pollv+0x948>
				case DEC_TIME_H:
					dec_h = (par * 5000) / 0x7F;
   4a83c:	e0bfee83 	ldbu	r2,-70(fp)
   4a840:	0144e204 	movi	r5,5000
   4a844:	1009883a 	mov	r4,r2
   4a848:	004dab40 	call	4dab4 <__mulsi3>
   4a84c:	01401fc4 	movi	r5,127
   4a850:	1009883a 	mov	r4,r2
   4a854:	004d9000 	call	4d900 <__divsi3>
   4a858:	d0b2438d 	sth	r2,-14066(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4a85c:	d0b2430b 	ldhu	r2,-14068(gp)
   4a860:	123fffcc 	andi	r8,r2,65535
   4a864:	d0a5a20b 	ldhu	r2,-27000(gp)
   4a868:	127fffcc 	andi	r9,r2,65535
   4a86c:	d0b2438b 	ldhu	r2,-14066(gp)
   4a870:	12bfffcc 	andi	r10,r2,65535
   4a874:	d0a5a28b 	ldhu	r2,-26998(gp)
   4a878:	12ffffcc 	andi	r11,r2,65535
   4a87c:	d0a5a18b 	ldhu	r2,-27002(gp)
   4a880:	10bfffcc 	andi	r2,r2,65535
   4a884:	d0f2448b 	ldhu	r3,-14062(gp)
   4a888:	18ffffcc 	andi	r3,r3,65535
   4a88c:	d132440b 	ldhu	r4,-14064(gp)
   4a890:	213fffcc 	andi	r4,r4,65535
   4a894:	d165a30b 	ldhu	r5,-26996(gp)
   4a898:	297fffcc 	andi	r5,r5,65535
   4a89c:	d1a5a417 	ldw	r6,-26992(gp)
   4a8a0:	d1e5a517 	ldw	r7,-26988(gp)
   4a8a4:	d9c00515 	stw	r7,20(sp)
   4a8a8:	d9800415 	stw	r6,16(sp)
   4a8ac:	d9400315 	stw	r5,12(sp)
   4a8b0:	d9000215 	stw	r4,8(sp)
   4a8b4:	d8c00115 	stw	r3,4(sp)
   4a8b8:	d8800015 	stw	r2,0(sp)
   4a8bc:	580f883a 	mov	r7,r11
   4a8c0:	500d883a 	mov	r6,r10
   4a8c4:	480b883a 	mov	r5,r9
   4a8c8:	4009883a 	mov	r4,r8
   4a8cc:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4a8d0:	00013606 	br	4adac <_Z9MIDI_pollv+0x948>
				case SUS_TIME_H:
					sus_h = (par * 20000) / 0x7F;
   4a8d4:	e0bfee83 	ldbu	r2,-70(fp)
   4a8d8:	01538804 	movi	r5,20000
   4a8dc:	1009883a 	mov	r4,r2
   4a8e0:	004dab40 	call	4dab4 <__mulsi3>
   4a8e4:	01401fc4 	movi	r5,127
   4a8e8:	1009883a 	mov	r4,r2
   4a8ec:	004d9000 	call	4d900 <__divsi3>
   4a8f0:	d0a5a18d 	sth	r2,-27002(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4a8f4:	d0b2430b 	ldhu	r2,-14068(gp)
   4a8f8:	123fffcc 	andi	r8,r2,65535
   4a8fc:	d0a5a20b 	ldhu	r2,-27000(gp)
   4a900:	127fffcc 	andi	r9,r2,65535
   4a904:	d0b2438b 	ldhu	r2,-14066(gp)
   4a908:	12bfffcc 	andi	r10,r2,65535
   4a90c:	d0a5a28b 	ldhu	r2,-26998(gp)
   4a910:	12ffffcc 	andi	r11,r2,65535
   4a914:	d0a5a18b 	ldhu	r2,-27002(gp)
   4a918:	10bfffcc 	andi	r2,r2,65535
   4a91c:	d0f2448b 	ldhu	r3,-14062(gp)
   4a920:	18ffffcc 	andi	r3,r3,65535
   4a924:	d132440b 	ldhu	r4,-14064(gp)
   4a928:	213fffcc 	andi	r4,r4,65535
   4a92c:	d165a30b 	ldhu	r5,-26996(gp)
   4a930:	297fffcc 	andi	r5,r5,65535
   4a934:	d1a5a417 	ldw	r6,-26992(gp)
   4a938:	d1e5a517 	ldw	r7,-26988(gp)
   4a93c:	d9c00515 	stw	r7,20(sp)
   4a940:	d9800415 	stw	r6,16(sp)
   4a944:	d9400315 	stw	r5,12(sp)
   4a948:	d9000215 	stw	r4,8(sp)
   4a94c:	d8c00115 	stw	r3,4(sp)
   4a950:	d8800015 	stw	r2,0(sp)
   4a954:	580f883a 	mov	r7,r11
   4a958:	500d883a 	mov	r6,r10
   4a95c:	480b883a 	mov	r5,r9
   4a960:	4009883a 	mov	r4,r8
   4a964:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4a968:	00011006 	br	4adac <_Z9MIDI_pollv+0x948>
				case REL_TIME_H:
					rel_h = (par * 10000) / 0x7F;
   4a96c:	e0bfee83 	ldbu	r2,-70(fp)
   4a970:	0149c404 	movi	r5,10000
   4a974:	1009883a 	mov	r4,r2
   4a978:	004dab40 	call	4dab4 <__mulsi3>
   4a97c:	01401fc4 	movi	r5,127
   4a980:	1009883a 	mov	r4,r2
   4a984:	004d9000 	call	4d900 <__divsi3>
   4a988:	d0b2440d 	sth	r2,-14064(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4a98c:	d0b2430b 	ldhu	r2,-14068(gp)
   4a990:	123fffcc 	andi	r8,r2,65535
   4a994:	d0a5a20b 	ldhu	r2,-27000(gp)
   4a998:	127fffcc 	andi	r9,r2,65535
   4a99c:	d0b2438b 	ldhu	r2,-14066(gp)
   4a9a0:	12bfffcc 	andi	r10,r2,65535
   4a9a4:	d0a5a28b 	ldhu	r2,-26998(gp)
   4a9a8:	12ffffcc 	andi	r11,r2,65535
   4a9ac:	d0a5a18b 	ldhu	r2,-27002(gp)
   4a9b0:	10bfffcc 	andi	r2,r2,65535
   4a9b4:	d0f2448b 	ldhu	r3,-14062(gp)
   4a9b8:	18ffffcc 	andi	r3,r3,65535
   4a9bc:	d132440b 	ldhu	r4,-14064(gp)
   4a9c0:	213fffcc 	andi	r4,r4,65535
   4a9c4:	d165a30b 	ldhu	r5,-26996(gp)
   4a9c8:	297fffcc 	andi	r5,r5,65535
   4a9cc:	d1a5a417 	ldw	r6,-26992(gp)
   4a9d0:	d1e5a517 	ldw	r7,-26988(gp)
   4a9d4:	d9c00515 	stw	r7,20(sp)
   4a9d8:	d9800415 	stw	r6,16(sp)
   4a9dc:	d9400315 	stw	r5,12(sp)
   4a9e0:	d9000215 	stw	r4,8(sp)
   4a9e4:	d8c00115 	stw	r3,4(sp)
   4a9e8:	d8800015 	stw	r2,0(sp)
   4a9ec:	580f883a 	mov	r7,r11
   4a9f0:	500d883a 	mov	r6,r10
   4a9f4:	480b883a 	mov	r5,r9
   4a9f8:	4009883a 	mov	r4,r8
   4a9fc:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4aa00:	0000ea06 	br	4adac <_Z9MIDI_pollv+0x948>
				case ATT_TIME_L:
					att_l = (par * 200) / 0x7F;
   4aa04:	e0bfee83 	ldbu	r2,-70(fp)
   4aa08:	01403204 	movi	r5,200
   4aa0c:	1009883a 	mov	r4,r2
   4aa10:	004dab40 	call	4dab4 <__mulsi3>
   4aa14:	01401fc4 	movi	r5,127
   4aa18:	1009883a 	mov	r4,r2
   4aa1c:	004d9000 	call	4d900 <__divsi3>
   4aa20:	d0a5a20d 	sth	r2,-27000(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4aa24:	d0b2430b 	ldhu	r2,-14068(gp)
   4aa28:	123fffcc 	andi	r8,r2,65535
   4aa2c:	d0a5a20b 	ldhu	r2,-27000(gp)
   4aa30:	127fffcc 	andi	r9,r2,65535
   4aa34:	d0b2438b 	ldhu	r2,-14066(gp)
   4aa38:	12bfffcc 	andi	r10,r2,65535
   4aa3c:	d0a5a28b 	ldhu	r2,-26998(gp)
   4aa40:	12ffffcc 	andi	r11,r2,65535
   4aa44:	d0a5a18b 	ldhu	r2,-27002(gp)
   4aa48:	10bfffcc 	andi	r2,r2,65535
   4aa4c:	d0f2448b 	ldhu	r3,-14062(gp)
   4aa50:	18ffffcc 	andi	r3,r3,65535
   4aa54:	d132440b 	ldhu	r4,-14064(gp)
   4aa58:	213fffcc 	andi	r4,r4,65535
   4aa5c:	d165a30b 	ldhu	r5,-26996(gp)
   4aa60:	297fffcc 	andi	r5,r5,65535
   4aa64:	d1a5a417 	ldw	r6,-26992(gp)
   4aa68:	d1e5a517 	ldw	r7,-26988(gp)
   4aa6c:	d9c00515 	stw	r7,20(sp)
   4aa70:	d9800415 	stw	r6,16(sp)
   4aa74:	d9400315 	stw	r5,12(sp)
   4aa78:	d9000215 	stw	r4,8(sp)
   4aa7c:	d8c00115 	stw	r3,4(sp)
   4aa80:	d8800015 	stw	r2,0(sp)
   4aa84:	580f883a 	mov	r7,r11
   4aa88:	500d883a 	mov	r6,r10
   4aa8c:	480b883a 	mov	r5,r9
   4aa90:	4009883a 	mov	r4,r8
   4aa94:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4aa98:	0000c406 	br	4adac <_Z9MIDI_pollv+0x948>
				case DEC_TIME_L:
					dec_l = (par * 200) / 0x7F;
   4aa9c:	e0bfee83 	ldbu	r2,-70(fp)
   4aaa0:	01403204 	movi	r5,200
   4aaa4:	1009883a 	mov	r4,r2
   4aaa8:	004dab40 	call	4dab4 <__mulsi3>
   4aaac:	01401fc4 	movi	r5,127
   4aab0:	1009883a 	mov	r4,r2
   4aab4:	004d9000 	call	4d900 <__divsi3>
   4aab8:	d0a5a28d 	sth	r2,-26998(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4aabc:	d0b2430b 	ldhu	r2,-14068(gp)
   4aac0:	123fffcc 	andi	r8,r2,65535
   4aac4:	d0a5a20b 	ldhu	r2,-27000(gp)
   4aac8:	127fffcc 	andi	r9,r2,65535
   4aacc:	d0b2438b 	ldhu	r2,-14066(gp)
   4aad0:	12bfffcc 	andi	r10,r2,65535
   4aad4:	d0a5a28b 	ldhu	r2,-26998(gp)
   4aad8:	12ffffcc 	andi	r11,r2,65535
   4aadc:	d0a5a18b 	ldhu	r2,-27002(gp)
   4aae0:	10bfffcc 	andi	r2,r2,65535
   4aae4:	d0f2448b 	ldhu	r3,-14062(gp)
   4aae8:	18ffffcc 	andi	r3,r3,65535
   4aaec:	d132440b 	ldhu	r4,-14064(gp)
   4aaf0:	213fffcc 	andi	r4,r4,65535
   4aaf4:	d165a30b 	ldhu	r5,-26996(gp)
   4aaf8:	297fffcc 	andi	r5,r5,65535
   4aafc:	d1a5a417 	ldw	r6,-26992(gp)
   4ab00:	d1e5a517 	ldw	r7,-26988(gp)
   4ab04:	d9c00515 	stw	r7,20(sp)
   4ab08:	d9800415 	stw	r6,16(sp)
   4ab0c:	d9400315 	stw	r5,12(sp)
   4ab10:	d9000215 	stw	r4,8(sp)
   4ab14:	d8c00115 	stw	r3,4(sp)
   4ab18:	d8800015 	stw	r2,0(sp)
   4ab1c:	580f883a 	mov	r7,r11
   4ab20:	500d883a 	mov	r6,r10
   4ab24:	480b883a 	mov	r5,r9
   4ab28:	4009883a 	mov	r4,r8
   4ab2c:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4ab30:	00009e06 	br	4adac <_Z9MIDI_pollv+0x948>
				case SUS_TIME_L:
					sus_l = (par * 800) / 0x7F;
   4ab34:	e0bfee83 	ldbu	r2,-70(fp)
   4ab38:	0140c804 	movi	r5,800
   4ab3c:	1009883a 	mov	r4,r2
   4ab40:	004dab40 	call	4dab4 <__mulsi3>
   4ab44:	01401fc4 	movi	r5,127
   4ab48:	1009883a 	mov	r4,r2
   4ab4c:	004d9000 	call	4d900 <__divsi3>
   4ab50:	d0b2448d 	sth	r2,-14062(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4ab54:	d0b2430b 	ldhu	r2,-14068(gp)
   4ab58:	123fffcc 	andi	r8,r2,65535
   4ab5c:	d0a5a20b 	ldhu	r2,-27000(gp)
   4ab60:	127fffcc 	andi	r9,r2,65535
   4ab64:	d0b2438b 	ldhu	r2,-14066(gp)
   4ab68:	12bfffcc 	andi	r10,r2,65535
   4ab6c:	d0a5a28b 	ldhu	r2,-26998(gp)
   4ab70:	12ffffcc 	andi	r11,r2,65535
   4ab74:	d0a5a18b 	ldhu	r2,-27002(gp)
   4ab78:	10bfffcc 	andi	r2,r2,65535
   4ab7c:	d0f2448b 	ldhu	r3,-14062(gp)
   4ab80:	18ffffcc 	andi	r3,r3,65535
   4ab84:	d132440b 	ldhu	r4,-14064(gp)
   4ab88:	213fffcc 	andi	r4,r4,65535
   4ab8c:	d165a30b 	ldhu	r5,-26996(gp)
   4ab90:	297fffcc 	andi	r5,r5,65535
   4ab94:	d1a5a417 	ldw	r6,-26992(gp)
   4ab98:	d1e5a517 	ldw	r7,-26988(gp)
   4ab9c:	d9c00515 	stw	r7,20(sp)
   4aba0:	d9800415 	stw	r6,16(sp)
   4aba4:	d9400315 	stw	r5,12(sp)
   4aba8:	d9000215 	stw	r4,8(sp)
   4abac:	d8c00115 	stw	r3,4(sp)
   4abb0:	d8800015 	stw	r2,0(sp)
   4abb4:	580f883a 	mov	r7,r11
   4abb8:	500d883a 	mov	r6,r10
   4abbc:	480b883a 	mov	r5,r9
   4abc0:	4009883a 	mov	r4,r8
   4abc4:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4abc8:	00007806 	br	4adac <_Z9MIDI_pollv+0x948>
				case REL_TIME_L:
					rel_l = (par * 400) / 0x7F;
   4abcc:	e0bfee83 	ldbu	r2,-70(fp)
   4abd0:	01406404 	movi	r5,400
   4abd4:	1009883a 	mov	r4,r2
   4abd8:	004dab40 	call	4dab4 <__mulsi3>
   4abdc:	01401fc4 	movi	r5,127
   4abe0:	1009883a 	mov	r4,r2
   4abe4:	004d9000 	call	4d900 <__divsi3>
   4abe8:	d0a5a30d 	sth	r2,-26996(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4abec:	d0b2430b 	ldhu	r2,-14068(gp)
   4abf0:	123fffcc 	andi	r8,r2,65535
   4abf4:	d0a5a20b 	ldhu	r2,-27000(gp)
   4abf8:	127fffcc 	andi	r9,r2,65535
   4abfc:	d0b2438b 	ldhu	r2,-14066(gp)
   4ac00:	12bfffcc 	andi	r10,r2,65535
   4ac04:	d0a5a28b 	ldhu	r2,-26998(gp)
   4ac08:	12ffffcc 	andi	r11,r2,65535
   4ac0c:	d0a5a18b 	ldhu	r2,-27002(gp)
   4ac10:	10bfffcc 	andi	r2,r2,65535
   4ac14:	d0f2448b 	ldhu	r3,-14062(gp)
   4ac18:	18ffffcc 	andi	r3,r3,65535
   4ac1c:	d132440b 	ldhu	r4,-14064(gp)
   4ac20:	213fffcc 	andi	r4,r4,65535
   4ac24:	d165a30b 	ldhu	r5,-26996(gp)
   4ac28:	297fffcc 	andi	r5,r5,65535
   4ac2c:	d1a5a417 	ldw	r6,-26992(gp)
   4ac30:	d1e5a517 	ldw	r7,-26988(gp)
   4ac34:	d9c00515 	stw	r7,20(sp)
   4ac38:	d9800415 	stw	r6,16(sp)
   4ac3c:	d9400315 	stw	r5,12(sp)
   4ac40:	d9000215 	stw	r4,8(sp)
   4ac44:	d8c00115 	stw	r3,4(sp)
   4ac48:	d8800015 	stw	r2,0(sp)
   4ac4c:	580f883a 	mov	r7,r11
   4ac50:	500d883a 	mov	r6,r10
   4ac54:	480b883a 	mov	r5,r9
   4ac58:	4009883a 	mov	r4,r8
   4ac5c:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4ac60:	00005206 	br	4adac <_Z9MIDI_pollv+0x948>
				case PEAK_ATT:
					peak_att = (float) (par * 2) / 0x7F;
   4ac64:	e0bfee83 	ldbu	r2,-70(fp)
   4ac68:	1085883a 	add	r2,r2,r2
   4ac6c:	1009883a 	mov	r4,r2
   4ac70:	004ee240 	call	4ee24 <__floatsisf>
   4ac74:	1007883a 	mov	r3,r2
   4ac78:	0150bfb4 	movhi	r5,17150
   4ac7c:	1809883a 	mov	r4,r3
   4ac80:	004dfa40 	call	4dfa4 <__divsf3>
   4ac84:	1007883a 	mov	r3,r2
   4ac88:	1805883a 	mov	r2,r3
   4ac8c:	d0a5a415 	stw	r2,-26992(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4ac90:	d0b2430b 	ldhu	r2,-14068(gp)
   4ac94:	123fffcc 	andi	r8,r2,65535
   4ac98:	d0a5a20b 	ldhu	r2,-27000(gp)
   4ac9c:	127fffcc 	andi	r9,r2,65535
   4aca0:	d0b2438b 	ldhu	r2,-14066(gp)
   4aca4:	12bfffcc 	andi	r10,r2,65535
   4aca8:	d0a5a28b 	ldhu	r2,-26998(gp)
   4acac:	12ffffcc 	andi	r11,r2,65535
   4acb0:	d0a5a18b 	ldhu	r2,-27002(gp)
   4acb4:	10bfffcc 	andi	r2,r2,65535
   4acb8:	d0f2448b 	ldhu	r3,-14062(gp)
   4acbc:	18ffffcc 	andi	r3,r3,65535
   4acc0:	d132440b 	ldhu	r4,-14064(gp)
   4acc4:	213fffcc 	andi	r4,r4,65535
   4acc8:	d165a30b 	ldhu	r5,-26996(gp)
   4accc:	297fffcc 	andi	r5,r5,65535
   4acd0:	d1a5a417 	ldw	r6,-26992(gp)
   4acd4:	d1e5a517 	ldw	r7,-26988(gp)
   4acd8:	d9c00515 	stw	r7,20(sp)
   4acdc:	d9800415 	stw	r6,16(sp)
   4ace0:	d9400315 	stw	r5,12(sp)
   4ace4:	d9000215 	stw	r4,8(sp)
   4ace8:	d8c00115 	stw	r3,4(sp)
   4acec:	d8800015 	stw	r2,0(sp)
   4acf0:	580f883a 	mov	r7,r11
   4acf4:	500d883a 	mov	r6,r10
   4acf8:	480b883a 	mov	r5,r9
   4acfc:	4009883a 	mov	r4,r8
   4ad00:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4ad04:	00002906 	br	4adac <_Z9MIDI_pollv+0x948>
				case PEAK_SUS:
					peak_sus = (float) par / 0x7F;
   4ad08:	e0bfee83 	ldbu	r2,-70(fp)
   4ad0c:	1009883a 	mov	r4,r2
   4ad10:	004ef480 	call	4ef48 <__floatunsisf>
   4ad14:	1007883a 	mov	r3,r2
   4ad18:	0150bfb4 	movhi	r5,17150
   4ad1c:	1809883a 	mov	r4,r3
   4ad20:	004dfa40 	call	4dfa4 <__divsf3>
   4ad24:	1007883a 	mov	r3,r2
   4ad28:	1805883a 	mov	r2,r3
   4ad2c:	d0a5a515 	stw	r2,-26988(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4ad30:	d0b2430b 	ldhu	r2,-14068(gp)
   4ad34:	123fffcc 	andi	r8,r2,65535
   4ad38:	d0a5a20b 	ldhu	r2,-27000(gp)
   4ad3c:	127fffcc 	andi	r9,r2,65535
   4ad40:	d0b2438b 	ldhu	r2,-14066(gp)
   4ad44:	12bfffcc 	andi	r10,r2,65535
   4ad48:	d0a5a28b 	ldhu	r2,-26998(gp)
   4ad4c:	12ffffcc 	andi	r11,r2,65535
   4ad50:	d0a5a18b 	ldhu	r2,-27002(gp)
   4ad54:	10bfffcc 	andi	r2,r2,65535
   4ad58:	d0f2448b 	ldhu	r3,-14062(gp)
   4ad5c:	18ffffcc 	andi	r3,r3,65535
   4ad60:	d132440b 	ldhu	r4,-14064(gp)
   4ad64:	213fffcc 	andi	r4,r4,65535
   4ad68:	d165a30b 	ldhu	r5,-26996(gp)
   4ad6c:	297fffcc 	andi	r5,r5,65535
   4ad70:	d1a5a417 	ldw	r6,-26992(gp)
   4ad74:	d1e5a517 	ldw	r7,-26988(gp)
   4ad78:	d9c00515 	stw	r7,20(sp)
   4ad7c:	d9800415 	stw	r6,16(sp)
   4ad80:	d9400315 	stw	r5,12(sp)
   4ad84:	d9000215 	stw	r4,8(sp)
   4ad88:	d8c00115 	stw	r3,4(sp)
   4ad8c:	d8800015 	stw	r2,0(sp)
   4ad90:	580f883a 	mov	r7,r11
   4ad94:	500d883a 	mov	r6,r10
   4ad98:	480b883a 	mov	r5,r9
   4ad9c:	4009883a 	mov	r4,r8
   4ada0:	00456c00 	call	456c0 <_Z9calc_adsrttttttttff>
					break;
   4ada4:	00000106 	br	4adac <_Z9MIDI_pollv+0x948>
				default:
					break;
   4ada8:	0001883a 	nop
			}
			break;
   4adac:	00000b06 	br	4addc <_Z9MIDI_pollv+0x978>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
   4adb0:	e0bfee83 	ldbu	r2,-70(fp)
   4adb4:	100691fa 	slli	r3,r2,7
   4adb8:	e0bfee43 	ldbu	r2,-71(fp)
   4adbc:	1885883a 	add	r2,r3,r2
   4adc0:	e0bfed15 	stw	r2,-76(fp)
			set_ctrl(channel, BEND, long_par);
   4adc4:	e0bfee03 	ldbu	r2,-72(fp)
   4adc8:	e1bfed17 	ldw	r6,-76(fp)
   4adcc:	01400284 	movi	r5,10
   4add0:	1009883a 	mov	r4,r2
   4add4:	004565c0 	call	4565c <_Z8set_ctrlhhm>
			break;
   4add8:	0001883a 	nop
		default:
			break;
	}
  }
}
   4addc:	0001883a 	nop
   4ade0:	e037883a 	mov	sp,fp
   4ade4:	dfc00117 	ldw	ra,4(sp)
   4ade8:	df000017 	ldw	fp,0(sp)
   4adec:	dec00204 	addi	sp,sp,8
   4adf0:	f800283a 	ret

0004adf4 <main>:

int main() {
   4adf4:	defff804 	addi	sp,sp,-32
   4adf8:	dfc00715 	stw	ra,28(sp)
   4adfc:	df000615 	stw	fp,24(sp)
   4ae00:	df000604 	addi	fp,sp,24

	printf("Initializing SGTL5000...\n");
   4ae04:	010001f4 	movhi	r4,7
   4ae08:	212d6804 	addi	r4,r4,-19040
   4ae0c:	00502100 	call	50210 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   4ae10:	010001f4 	movhi	r4,7
   4ae14:	212d6f04 	addi	r4,r4,-19012
   4ae18:	006111c0 	call	6111c <alt_avalon_i2c_open>
   4ae1c:	d0b24215 	stw	r2,-14072(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
   4ae20:	d0b24217 	ldw	r2,-14072(gp)
   4ae24:	1000031e 	bne	r2,zero,4ae34 <main+0x40>
   4ae28:	010001f4 	movhi	r4,7
   4ae2c:	212d7204 	addi	r4,r4,-19000
   4ae30:	00502100 	call	50210 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
   4ae34:	d0b24217 	ldw	r2,-14072(gp)
   4ae38:	1009883a 	mov	r4,r2
   4ae3c:	00470f80 	call	470f8 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
   4ae40:	010001f4 	movhi	r4,7
   4ae44:	212d7a04 	addi	r4,r4,-18968
   4ae48:	00502100 	call	50210 <puts>
	SGTL5000audio_on(i2c_dev);
   4ae4c:	d0b24217 	ldw	r2,-14072(gp)
   4ae50:	1009883a 	mov	r4,r2
   4ae54:	00471900 	call	47190 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
   4ae58:	d0b24217 	ldw	r2,-14072(gp)
   4ae5c:	1009883a 	mov	r4,r2
   4ae60:	00471fc0 	call	471fc <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
   4ae64:	010001f4 	movhi	r4,7
   4ae68:	212d7f04 	addi	r4,r4,-18948
   4ae6c:	00502100 	call	50210 <puts>

	printf("Initializing ADSR...\n");
   4ae70:	010001f4 	movhi	r4,7
   4ae74:	212d8304 	addi	r4,r4,-18932
   4ae78:	00502100 	call	50210 <puts>
	init_ctrl(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
   4ae7c:	d0b2430b 	ldhu	r2,-14068(gp)
   4ae80:	123fffcc 	andi	r8,r2,65535
   4ae84:	d0a5a20b 	ldhu	r2,-27000(gp)
   4ae88:	127fffcc 	andi	r9,r2,65535
   4ae8c:	d0b2438b 	ldhu	r2,-14066(gp)
   4ae90:	12bfffcc 	andi	r10,r2,65535
   4ae94:	d0a5a28b 	ldhu	r2,-26998(gp)
   4ae98:	12ffffcc 	andi	r11,r2,65535
   4ae9c:	d0a5a18b 	ldhu	r2,-27002(gp)
   4aea0:	10bfffcc 	andi	r2,r2,65535
   4aea4:	d0f2448b 	ldhu	r3,-14062(gp)
   4aea8:	18ffffcc 	andi	r3,r3,65535
   4aeac:	d132440b 	ldhu	r4,-14064(gp)
   4aeb0:	213fffcc 	andi	r4,r4,65535
   4aeb4:	d165a30b 	ldhu	r5,-26996(gp)
   4aeb8:	297fffcc 	andi	r5,r5,65535
   4aebc:	d1a5a417 	ldw	r6,-26992(gp)
   4aec0:	d1e5a517 	ldw	r7,-26988(gp)
   4aec4:	d9c00515 	stw	r7,20(sp)
   4aec8:	d9800415 	stw	r6,16(sp)
   4aecc:	d9400315 	stw	r5,12(sp)
   4aed0:	d9000215 	stw	r4,8(sp)
   4aed4:	d8c00115 	stw	r3,4(sp)
   4aed8:	d8800015 	stw	r2,0(sp)
   4aedc:	580f883a 	mov	r7,r11
   4aee0:	500d883a 	mov	r6,r10
   4aee4:	480b883a 	mov	r5,r9
   4aee8:	4009883a 	mov	r4,r8
   4aeec:	00459d40 	call	459d4 <_Z9init_ctrlttttttttff>
	printf("ADSR set\n");
   4aef0:	010001f4 	movhi	r4,7
   4aef4:	212d8904 	addi	r4,r4,-18908
   4aef8:	00502100 	call	50210 <puts>

	MIDI_setup();
   4aefc:	004a3ec0 	call	4a3ec <_Z10MIDI_setupv>
	printf("MIDI set\n");
   4af00:	010001f4 	movhi	r4,7
   4af04:	212d8c04 	addi	r4,r4,-18896
   4af08:	00502100 	call	50210 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
   4af0c:	010001f4 	movhi	r4,7
   4af10:	21081904 	addi	r4,r4,8292
   4af14:	00407880 	call	40788 <_ZN3USB15getUsbTaskStateEv>
   4af18:	10803fcc 	andi	r2,r2,255
   4af1c:	10802418 	cmpnei	r2,r2,144
   4af20:	10803fcc 	andi	r2,r2,255
   4af24:	10000426 	beq	r2,zero,4af38 <main+0x144>
		Usb.Task();
   4af28:	010001f4 	movhi	r4,7
   4af2c:	21081904 	addi	r4,r4,8292
   4af30:	004181c0 	call	4181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
   4af34:	003ff506 	br	4af0c <__alt_data_end+0xfffcaf0c>
		Usb.Task();
	}
	printf("USB running\n");
   4af38:	010001f4 	movhi	r4,7
   4af3c:	212d8f04 	addi	r4,r4,-18884
   4af40:	00502100 	call	50210 <puts>

	while(1) {
		if ( Midi ) {
   4af44:	010001f4 	movhi	r4,7
   4af48:	21084804 	addi	r4,r4,8480
   4af4c:	004aff80 	call	4aff8 <_ZN9USBH_MIDIcvbEv>
   4af50:	10803fcc 	andi	r2,r2,255
   4af54:	103ffb26 	beq	r2,zero,4af44 <__alt_data_end+0xfffcaf44>
			MIDI_poll();
   4af58:	004a4640 	call	4a464 <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
   4af5c:	003ff906 	br	4af44 <__alt_data_end+0xfffcaf44>

0004af60 <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
   4af60:	defffc04 	addi	sp,sp,-16
   4af64:	dfc00315 	stw	ra,12(sp)
   4af68:	df000215 	stw	fp,8(sp)
   4af6c:	df000204 	addi	fp,sp,8
   4af70:	e13ffe15 	stw	r4,-8(fp)
   4af74:	e17fff15 	stw	r5,-4(fp)
   4af78:	e0bffe17 	ldw	r2,-8(fp)
   4af7c:	10800058 	cmpnei	r2,r2,1
   4af80:	10000b1e 	bne	r2,zero,4afb0 <_Z41__static_initialization_and_destruction_0ii+0x50>
   4af84:	e0ffff17 	ldw	r3,-4(fp)
   4af88:	00bfffd4 	movui	r2,65535
   4af8c:	1880081e 	bne	r3,r2,4afb0 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
   4af90:	010001f4 	movhi	r4,7
   4af94:	21081904 	addi	r4,r4,8292
   4af98:	00407040 	call	40704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
   4af9c:	014001f4 	movhi	r5,7
   4afa0:	29481904 	addi	r5,r5,8292
   4afa4:	010001f4 	movhi	r4,7
   4afa8:	21084804 	addi	r4,r4,8480
   4afac:	00474380 	call	47438 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
   4afb0:	0001883a 	nop
   4afb4:	e037883a 	mov	sp,fp
   4afb8:	dfc00117 	ldw	ra,4(sp)
   4afbc:	df000017 	ldw	fp,0(sp)
   4afc0:	dec00204 	addi	sp,sp,8
   4afc4:	f800283a 	ret

0004afc8 <_GLOBAL__sub_I_Usb>:
   4afc8:	defffe04 	addi	sp,sp,-8
   4afcc:	dfc00115 	stw	ra,4(sp)
   4afd0:	df000015 	stw	fp,0(sp)
   4afd4:	d839883a 	mov	fp,sp
   4afd8:	017fffd4 	movui	r5,65535
   4afdc:	01000044 	movi	r4,1
   4afe0:	004af600 	call	4af60 <_Z41__static_initialization_and_destruction_0ii>
   4afe4:	e037883a 	mov	sp,fp
   4afe8:	dfc00117 	ldw	ra,4(sp)
   4afec:	df000017 	ldw	fp,0(sp)
   4aff0:	dec00204 	addi	sp,sp,8
   4aff4:	f800283a 	ret

0004aff8 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
   4aff8:	defffe04 	addi	sp,sp,-8
   4affc:	df000115 	stw	fp,4(sp)
   4b000:	df000104 	addi	fp,sp,4
   4b004:	e13fff15 	stw	r4,-4(fp)
   4b008:	e0bfff17 	ldw	r2,-4(fp)
   4b00c:	10800343 	ldbu	r2,13(r2)
   4b010:	e037883a 	mov	sp,fp
   4b014:	df000017 	ldw	fp,0(sp)
   4b018:	dec00104 	addi	sp,sp,4
   4b01c:	f800283a 	ret

0004b020 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
   4b020:	defffe04 	addi	sp,sp,-8
   4b024:	df000115 	stw	fp,4(sp)
   4b028:	df000104 	addi	fp,sp,4
   4b02c:	e13fff15 	stw	r4,-4(fp)
   4b030:	e0bfff17 	ldw	r2,-4(fp)
   4b034:	1080040b 	ldhu	r2,16(r2)
   4b038:	e037883a 	mov	sp,fp
   4b03c:	df000017 	ldw	fp,0(sp)
   4b040:	dec00104 	addi	sp,sp,4
   4b044:	f800283a 	ret

0004b048 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
   4b048:	defffe04 	addi	sp,sp,-8
   4b04c:	df000115 	stw	fp,4(sp)
   4b050:	df000104 	addi	fp,sp,4
   4b054:	e13fff15 	stw	r4,-4(fp)
   4b058:	e0bfff17 	ldw	r2,-4(fp)
   4b05c:	1080038b 	ldhu	r2,14(r2)
   4b060:	e037883a 	mov	sp,fp
   4b064:	df000017 	ldw	fp,0(sp)
   4b068:	dec00104 	addi	sp,sp,4
   4b06c:	f800283a 	ret

0004b070 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
   4b070:	defffd04 	addi	sp,sp,-12
   4b074:	df000215 	stw	fp,8(sp)
   4b078:	df000204 	addi	fp,sp,8
   4b07c:	e13ffe15 	stw	r4,-8(fp)
   4b080:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
   4b084:	e0bffe17 	ldw	r2,-8(fp)
   4b088:	e0ffff17 	ldw	r3,-4(fp)
   4b08c:	10c01815 	stw	r3,96(r2)
        };
   4b090:	0001883a 	nop
   4b094:	e037883a 	mov	sp,fp
   4b098:	df000017 	ldw	fp,0(sp)
   4b09c:	dec00104 	addi	sp,sp,4
   4b0a0:	f800283a 	ret

0004b0a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   4b0a4:	008001f4 	movhi	r2,7
   4b0a8:	10ada104 	addi	r2,r2,-18812
   4b0ac:	20800015 	stw	r2,0(r4)
   4b0b0:	004be7c1 	jmpi	4be7c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0004b0b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   4b0b4:	defffe04 	addi	sp,sp,-8
   4b0b8:	008001f4 	movhi	r2,7
   4b0bc:	dc000015 	stw	r16,0(sp)
   4b0c0:	dfc00115 	stw	ra,4(sp)
   4b0c4:	10ada104 	addi	r2,r2,-18812
   4b0c8:	20800015 	stw	r2,0(r4)
   4b0cc:	2021883a 	mov	r16,r4
   4b0d0:	004be7c0 	call	4be7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   4b0d4:	8009883a 	mov	r4,r16
   4b0d8:	dfc00117 	ldw	ra,4(sp)
   4b0dc:	dc000017 	ldw	r16,0(sp)
   4b0e0:	dec00204 	addi	sp,sp,8
   4b0e4:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004b0e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   4b0e8:	defff504 	addi	sp,sp,-44
   4b0ec:	dc000115 	stw	r16,4(sp)
   4b0f0:	38800117 	ldw	r2,4(r7)
   4b0f4:	24000117 	ldw	r16,4(r4)
   4b0f8:	df000915 	stw	fp,36(sp)
   4b0fc:	ddc00815 	stw	r23,32(sp)
   4b100:	dd800715 	stw	r22,28(sp)
   4b104:	dcc00415 	stw	r19,16(sp)
   4b108:	dc800315 	stw	r18,12(sp)
   4b10c:	dc400215 	stw	r17,8(sp)
   4b110:	dfc00a15 	stw	ra,40(sp)
   4b114:	dd400615 	stw	r21,24(sp)
   4b118:	dd000515 	stw	r20,20(sp)
   4b11c:	2823883a 	mov	r17,r5
   4b120:	3039883a 	mov	fp,r6
   4b124:	dcc00b17 	ldw	r19,44(sp)
   4b128:	ddc00c17 	ldw	r23,48(sp)
   4b12c:	dd800d17 	ldw	r22,52(sp)
   4b130:	dc800e17 	ldw	r18,56(sp)
   4b134:	80800b26 	beq	r16,r2,4b164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
   4b138:	80c00007 	ldb	r3,0(r16)
   4b13c:	2029883a 	mov	r20,r4
   4b140:	01000a84 	movi	r4,42
   4b144:	382b883a 	mov	r21,r7
   4b148:	19001a26 	beq	r3,r4,4b1b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   4b14c:	100b883a 	mov	r5,r2
   4b150:	8009883a 	mov	r4,r16
   4b154:	d8c00015 	stw	r3,0(sp)
   4b158:	00506400 	call	50640 <strcmp>
   4b15c:	d8c00017 	ldw	r3,0(sp)
   4b160:	1000141e 	bne	r2,zero,4b1b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   4b164:	94c00015 	stw	r19,0(r18)
   4b168:	97000115 	stw	fp,4(r18)
   4b16c:	88002816 	blt	r17,zero,4b210 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
   4b170:	9c63883a 	add	r17,r19,r17
   4b174:	b4403226 	beq	r22,r17,4b240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   4b178:	00800044 	movi	r2,1
   4b17c:	90800315 	stw	r2,12(r18)
   4b180:	0005883a 	mov	r2,zero
   4b184:	dfc00a17 	ldw	ra,40(sp)
   4b188:	df000917 	ldw	fp,36(sp)
   4b18c:	ddc00817 	ldw	r23,32(sp)
   4b190:	dd800717 	ldw	r22,28(sp)
   4b194:	dd400617 	ldw	r21,24(sp)
   4b198:	dd000517 	ldw	r20,20(sp)
   4b19c:	dcc00417 	ldw	r19,16(sp)
   4b1a0:	dc800317 	ldw	r18,12(sp)
   4b1a4:	dc400217 	ldw	r17,8(sp)
   4b1a8:	dc000117 	ldw	r16,4(sp)
   4b1ac:	dec00b04 	addi	sp,sp,44
   4b1b0:	f800283a 	ret
   4b1b4:	9d801926 	beq	r19,r22,4b21c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
   4b1b8:	a1000217 	ldw	r4,8(r20)
   4b1bc:	a80f883a 	mov	r7,r21
   4b1c0:	e00d883a 	mov	r6,fp
   4b1c4:	20800017 	ldw	r2,0(r4)
   4b1c8:	dc800e15 	stw	r18,56(sp)
   4b1cc:	dd800d15 	stw	r22,52(sp)
   4b1d0:	ddc00c15 	stw	r23,48(sp)
   4b1d4:	dcc00b15 	stw	r19,44(sp)
   4b1d8:	10800717 	ldw	r2,28(r2)
   4b1dc:	880b883a 	mov	r5,r17
   4b1e0:	dfc00a17 	ldw	ra,40(sp)
   4b1e4:	df000917 	ldw	fp,36(sp)
   4b1e8:	ddc00817 	ldw	r23,32(sp)
   4b1ec:	dd800717 	ldw	r22,28(sp)
   4b1f0:	dd400617 	ldw	r21,24(sp)
   4b1f4:	dd000517 	ldw	r20,20(sp)
   4b1f8:	dcc00417 	ldw	r19,16(sp)
   4b1fc:	dc800317 	ldw	r18,12(sp)
   4b200:	dc400217 	ldw	r17,8(sp)
   4b204:	dc000117 	ldw	r16,4(sp)
   4b208:	dec00b04 	addi	sp,sp,44
   4b20c:	1000683a 	jmp	r2
   4b210:	00bfff84 	movi	r2,-2
   4b214:	88bfda1e 	bne	r17,r2,4b180 <__alt_data_end+0xfffcb180>
   4b218:	003fd706 	br	4b178 <__alt_data_end+0xfffcb178>
   4b21c:	b9400117 	ldw	r5,4(r23)
   4b220:	81400526 	beq	r16,r5,4b238 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   4b224:	00800a84 	movi	r2,42
   4b228:	18bfe326 	beq	r3,r2,4b1b8 <__alt_data_end+0xfffcb1b8>
   4b22c:	8009883a 	mov	r4,r16
   4b230:	00506400 	call	50640 <strcmp>
   4b234:	103fe01e 	bne	r2,zero,4b1b8 <__alt_data_end+0xfffcb1b8>
   4b238:	97000215 	stw	fp,8(r18)
   4b23c:	003fd006 	br	4b180 <__alt_data_end+0xfffcb180>
   4b240:	00800184 	movi	r2,6
   4b244:	003fcd06 	br	4b17c <__alt_data_end+0xfffcb17c>

0004b248 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   4b248:	defffa04 	addi	sp,sp,-24
   4b24c:	dc000215 	stw	r16,8(sp)
   4b250:	dc000617 	ldw	r16,24(sp)
   4b254:	dc800415 	stw	r18,16(sp)
   4b258:	dc400315 	stw	r17,12(sp)
   4b25c:	dfc00515 	stw	ra,20(sp)
   4b260:	2023883a 	mov	r17,r4
   4b264:	2825883a 	mov	r18,r5
   4b268:	81800b26 	beq	r16,r6,4b298 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   4b26c:	89000217 	ldw	r4,8(r17)
   4b270:	900b883a 	mov	r5,r18
   4b274:	20800017 	ldw	r2,0(r4)
   4b278:	dc000615 	stw	r16,24(sp)
   4b27c:	10800817 	ldw	r2,32(r2)
   4b280:	dfc00517 	ldw	ra,20(sp)
   4b284:	dc800417 	ldw	r18,16(sp)
   4b288:	dc400317 	ldw	r17,12(sp)
   4b28c:	dc000217 	ldw	r16,8(sp)
   4b290:	dec00604 	addi	sp,sp,24
   4b294:	1000683a 	jmp	r2
   4b298:	21000117 	ldw	r4,4(r4)
   4b29c:	39400117 	ldw	r5,4(r7)
   4b2a0:	21400926 	beq	r4,r5,4b2c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   4b2a4:	20c00007 	ldb	r3,0(r4)
   4b2a8:	00800a84 	movi	r2,42
   4b2ac:	18bfef26 	beq	r3,r2,4b26c <__alt_data_end+0xfffcb26c>
   4b2b0:	d9800015 	stw	r6,0(sp)
   4b2b4:	d9c00115 	stw	r7,4(sp)
   4b2b8:	00506400 	call	50640 <strcmp>
   4b2bc:	d9800017 	ldw	r6,0(sp)
   4b2c0:	d9c00117 	ldw	r7,4(sp)
   4b2c4:	103fe91e 	bne	r2,zero,4b26c <__alt_data_end+0xfffcb26c>
   4b2c8:	00800184 	movi	r2,6
   4b2cc:	dfc00517 	ldw	ra,20(sp)
   4b2d0:	dc800417 	ldw	r18,16(sp)
   4b2d4:	dc400317 	ldw	r17,12(sp)
   4b2d8:	dc000217 	ldw	r16,8(sp)
   4b2dc:	dec00604 	addi	sp,sp,24
   4b2e0:	f800283a 	ret

0004b2e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   4b2e4:	defffb04 	addi	sp,sp,-20
   4b2e8:	dcc00315 	stw	r19,12(sp)
   4b2ec:	dc800215 	stw	r18,8(sp)
   4b2f0:	dc400115 	stw	r17,4(sp)
   4b2f4:	dc000015 	stw	r16,0(sp)
   4b2f8:	dfc00415 	stw	ra,16(sp)
   4b2fc:	2027883a 	mov	r19,r4
   4b300:	2821883a 	mov	r16,r5
   4b304:	3023883a 	mov	r17,r6
   4b308:	3825883a 	mov	r18,r7
   4b30c:	004bec00 	call	4bec0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   4b310:	10c03fcc 	andi	r3,r2,255
   4b314:	18000726 	beq	r3,zero,4b334 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   4b318:	dfc00417 	ldw	ra,16(sp)
   4b31c:	dcc00317 	ldw	r19,12(sp)
   4b320:	dc800217 	ldw	r18,8(sp)
   4b324:	dc400117 	ldw	r17,4(sp)
   4b328:	dc000017 	ldw	r16,0(sp)
   4b32c:	dec00504 	addi	sp,sp,20
   4b330:	f800283a 	ret
   4b334:	99000217 	ldw	r4,8(r19)
   4b338:	900f883a 	mov	r7,r18
   4b33c:	880d883a 	mov	r6,r17
   4b340:	20800017 	ldw	r2,0(r4)
   4b344:	800b883a 	mov	r5,r16
   4b348:	10800617 	ldw	r2,24(r2)
   4b34c:	dfc00417 	ldw	ra,16(sp)
   4b350:	dcc00317 	ldw	r19,12(sp)
   4b354:	dc800217 	ldw	r18,8(sp)
   4b358:	dc400117 	ldw	r17,4(sp)
   4b35c:	dc000017 	ldw	r16,0(sp)
   4b360:	dec00504 	addi	sp,sp,20
   4b364:	1000683a 	jmp	r2

0004b368 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   4b368:	008001f4 	movhi	r2,7
   4b36c:	10adb904 	addi	r2,r2,-18716
   4b370:	20800015 	stw	r2,0(r4)
   4b374:	004be7c1 	jmpi	4be7c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0004b378 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   4b378:	defffe04 	addi	sp,sp,-8
   4b37c:	008001f4 	movhi	r2,7
   4b380:	dc000015 	stw	r16,0(sp)
   4b384:	dfc00115 	stw	ra,4(sp)
   4b388:	10adb904 	addi	r2,r2,-18716
   4b38c:	20800015 	stw	r2,0(r4)
   4b390:	2021883a 	mov	r16,r4
   4b394:	004be7c0 	call	4be7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   4b398:	8009883a 	mov	r4,r16
   4b39c:	dfc00117 	ldw	ra,4(sp)
   4b3a0:	dc000017 	ldw	r16,0(sp)
   4b3a4:	dec00204 	addi	sp,sp,8
   4b3a8:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004b3ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   4b3ac:	defff504 	addi	sp,sp,-44
   4b3b0:	dc400215 	stw	r17,8(sp)
   4b3b4:	dc400b17 	ldw	r17,44(sp)
   4b3b8:	df000915 	stw	fp,36(sp)
   4b3bc:	ddc00815 	stw	r23,32(sp)
   4b3c0:	dd800715 	stw	r22,28(sp)
   4b3c4:	dc000115 	stw	r16,4(sp)
   4b3c8:	dfc00a15 	stw	ra,40(sp)
   4b3cc:	dd400615 	stw	r21,24(sp)
   4b3d0:	dd000515 	stw	r20,20(sp)
   4b3d4:	dcc00415 	stw	r19,16(sp)
   4b3d8:	dc800315 	stw	r18,12(sp)
   4b3dc:	3039883a 	mov	fp,r6
   4b3e0:	2021883a 	mov	r16,r4
   4b3e4:	282d883a 	mov	r22,r5
   4b3e8:	382f883a 	mov	r23,r7
   4b3ec:	34402c26 	beq	r6,r17,4b4a0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
   4b3f0:	85000317 	ldw	r20,12(r16)
   4b3f4:	048000c4 	movi	r18,3
   4b3f8:	04ffff44 	movi	r19,-3
   4b3fc:	a484983a 	sll	r2,r20,r18
   4b400:	b80f883a 	mov	r7,r23
   4b404:	b00b883a 	mov	r5,r22
   4b408:	10800304 	addi	r2,r2,12
   4b40c:	80a1883a 	add	r16,r16,r2
   4b410:	a0001626 	beq	r20,zero,4b46c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
   4b414:	81800017 	ldw	r6,0(r16)
   4b418:	a53fffc4 	addi	r20,r20,-1
   4b41c:	3080008c 	andi	r2,r6,2
   4b420:	3540004c 	andi	r21,r6,1
   4b424:	10000d26 	beq	r2,zero,4b45c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
   4b428:	300dd23a 	srai	r6,r6,8
   4b42c:	a8000426 	beq	r21,zero,4b440 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
   4b430:	b4c00a26 	beq	r22,r19,4b45c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
   4b434:	e0800017 	ldw	r2,0(fp)
   4b438:	118d883a 	add	r6,r2,r6
   4b43c:	31800017 	ldw	r6,0(r6)
   4b440:	813fff17 	ldw	r4,-4(r16)
   4b444:	e18d883a 	add	r6,fp,r6
   4b448:	20800017 	ldw	r2,0(r4)
   4b44c:	dc400015 	stw	r17,0(sp)
   4b450:	10800817 	ldw	r2,32(r2)
   4b454:	103ee83a 	callr	r2
   4b458:	90801b16 	blt	r18,r2,4b4c8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
   4b45c:	843ffe04 	addi	r16,r16,-8
   4b460:	b80f883a 	mov	r7,r23
   4b464:	b00b883a 	mov	r5,r22
   4b468:	a03fea1e 	bne	r20,zero,4b414 <__alt_data_end+0xfffcb414>
   4b46c:	00800044 	movi	r2,1
   4b470:	dfc00a17 	ldw	ra,40(sp)
   4b474:	df000917 	ldw	fp,36(sp)
   4b478:	ddc00817 	ldw	r23,32(sp)
   4b47c:	dd800717 	ldw	r22,28(sp)
   4b480:	dd400617 	ldw	r21,24(sp)
   4b484:	dd000517 	ldw	r20,20(sp)
   4b488:	dcc00417 	ldw	r19,16(sp)
   4b48c:	dc800317 	ldw	r18,12(sp)
   4b490:	dc400217 	ldw	r17,8(sp)
   4b494:	dc000117 	ldw	r16,4(sp)
   4b498:	dec00b04 	addi	sp,sp,44
   4b49c:	f800283a 	ret
   4b4a0:	21000117 	ldw	r4,4(r4)
   4b4a4:	39400117 	ldw	r5,4(r7)
   4b4a8:	21400526 	beq	r4,r5,4b4c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
   4b4ac:	20c00007 	ldb	r3,0(r4)
   4b4b0:	00800a84 	movi	r2,42
   4b4b4:	18bfce26 	beq	r3,r2,4b3f0 <__alt_data_end+0xfffcb3f0>
   4b4b8:	00506400 	call	50640 <strcmp>
   4b4bc:	103fcc1e 	bne	r2,zero,4b3f0 <__alt_data_end+0xfffcb3f0>
   4b4c0:	00800184 	movi	r2,6
   4b4c4:	003fea06 	br	4b470 <__alt_data_end+0xfffcb470>
   4b4c8:	a83fe926 	beq	r21,zero,4b470 <__alt_data_end+0xfffcb470>
   4b4cc:	10800054 	ori	r2,r2,1
   4b4d0:	003fe706 	br	4b470 <__alt_data_end+0xfffcb470>

0004b4d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   4b4d4:	deffe804 	addi	sp,sp,-96
   4b4d8:	df001615 	stw	fp,88(sp)
   4b4dc:	df001b17 	ldw	fp,108(sp)
   4b4e0:	ddc01515 	stw	r23,84(sp)
   4b4e4:	dd001215 	stw	r20,72(sp)
   4b4e8:	e0800417 	ldw	r2,16(fp)
   4b4ec:	dcc01115 	stw	r19,68(sp)
   4b4f0:	dfc01715 	stw	ra,92(sp)
   4b4f4:	dd801415 	stw	r22,80(sp)
   4b4f8:	dd401315 	stw	r21,76(sp)
   4b4fc:	dc801015 	stw	r18,64(sp)
   4b500:	dc400f15 	stw	r17,60(sp)
   4b504:	dc000e15 	stw	r16,56(sp)
   4b508:	d9000b15 	stw	r4,44(sp)
   4b50c:	d9c00915 	stw	r7,36(sp)
   4b510:	1080040c 	andi	r2,r2,16
   4b514:	282f883a 	mov	r23,r5
   4b518:	3027883a 	mov	r19,r6
   4b51c:	dd001817 	ldw	r20,96(sp)
   4b520:	10000226 	beq	r2,zero,4b52c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
   4b524:	20800217 	ldw	r2,8(r4)
   4b528:	e0800415 	stw	r2,16(fp)
   4b52c:	d8c01a17 	ldw	r3,104(sp)
   4b530:	a0c0cb26 	beq	r20,r3,4b860 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
   4b534:	d8c00b17 	ldw	r3,44(sp)
   4b538:	1c000117 	ldw	r16,4(r3)
   4b53c:	d8c00917 	ldw	r3,36(sp)
   4b540:	19400117 	ldw	r5,4(r3)
   4b544:	2c000626 	beq	r5,r16,4b560 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
   4b548:	80c00007 	ldb	r3,0(r16)
   4b54c:	00800a84 	movi	r2,42
   4b550:	18801b26 	beq	r3,r2,4b5c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
   4b554:	8009883a 	mov	r4,r16
   4b558:	00506400 	call	50640 <strcmp>
   4b55c:	1000181e 	bne	r2,zero,4b5c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
   4b560:	e5000015 	stw	r20,0(fp)
   4b564:	e4c00115 	stw	r19,4(fp)
   4b568:	b8010916 	blt	r23,zero,4b990 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
   4b56c:	d8c01a17 	ldw	r3,104(sp)
   4b570:	a5d9883a 	add	r12,r20,r23
   4b574:	1b014126 	beq	r3,r12,4ba7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
   4b578:	00800044 	movi	r2,1
   4b57c:	e0800315 	stw	r2,12(fp)
   4b580:	0005883a 	mov	r2,zero
   4b584:	dfc01717 	ldw	ra,92(sp)
   4b588:	df001617 	ldw	fp,88(sp)
   4b58c:	ddc01517 	ldw	r23,84(sp)
   4b590:	dd801417 	ldw	r22,80(sp)
   4b594:	dd401317 	ldw	r21,76(sp)
   4b598:	dd001217 	ldw	r20,72(sp)
   4b59c:	dcc01117 	ldw	r19,68(sp)
   4b5a0:	dc801017 	ldw	r18,64(sp)
   4b5a4:	dc400f17 	ldw	r17,60(sp)
   4b5a8:	dc000e17 	ldw	r16,56(sp)
   4b5ac:	dec01804 	addi	sp,sp,96
   4b5b0:	f800283a 	ret
   4b5b4:	d8c00917 	ldw	r3,36(sp)
   4b5b8:	18800117 	ldw	r2,4(r3)
   4b5bc:	80bfe826 	beq	r16,r2,4b560 <__alt_data_end+0xfffcb560>
   4b5c0:	b800ef16 	blt	r23,zero,4b980 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
   4b5c4:	d8c01a17 	ldw	r3,104(sp)
   4b5c8:	1dedc83a 	sub	r22,r3,r23
   4b5cc:	e005883a 	mov	r2,fp
   4b5d0:	00c00044 	movi	r3,1
   4b5d4:	b039883a 	mov	fp,r22
   4b5d8:	0021883a 	mov	r16,zero
   4b5dc:	a02d883a 	mov	r22,r20
   4b5e0:	d8000a45 	stb	zero,41(sp)
   4b5e4:	d8c00a05 	stb	r3,40(sp)
   4b5e8:	048000c4 	movi	r18,3
   4b5ec:	1029883a 	mov	r20,r2
   4b5f0:	d8c00b17 	ldw	r3,44(sp)
   4b5f4:	b805883a 	mov	r2,r23
   4b5f8:	1ac00317 	ldw	r11,12(r3)
   4b5fc:	581490fa 	slli	r10,r11,3
   4b600:	52800304 	addi	r10,r10,12
   4b604:	1aab883a 	add	r21,r3,r10
   4b608:	b007883a 	mov	r3,r22
   4b60c:	582d883a 	mov	r22,r11
   4b610:	a82f883a 	mov	r23,r21
   4b614:	1823883a 	mov	r17,r3
   4b618:	102b883a 	mov	r21,r2
   4b61c:	b0005526 	beq	r22,zero,4b774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
   4b620:	b8800017 	ldw	r2,0(r23)
   4b624:	a1400417 	ldw	r5,16(r20)
   4b628:	d8000415 	stw	zero,16(sp)
   4b62c:	d8000515 	stw	zero,20(sp)
   4b630:	d8000615 	stw	zero,24(sp)
   4b634:	d8000715 	stw	zero,28(sp)
   4b638:	d9400815 	stw	r5,32(sp)
   4b63c:	1100004c 	andi	r4,r2,1
   4b640:	1007d23a 	srai	r3,r2,8
   4b644:	20007526 	beq	r4,zero,4b81c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
   4b648:	89000017 	ldw	r4,0(r17)
   4b64c:	99800054 	ori	r6,r19,1
   4b650:	20c7883a 	add	r3,r4,r3
   4b654:	18c00017 	ldw	r3,0(r3)
   4b658:	88c7883a 	add	r3,r17,r3
   4b65c:	e0000326 	beq	fp,zero,4b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
   4b660:	d9c00a03 	ldbu	r7,40(sp)
   4b664:	e0c9803a 	cmpltu	r4,fp,r3
   4b668:	21c07226 	beq	r4,r7,4b834 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
   4b66c:	1080008c 	andi	r2,r2,2
   4b670:	1000041e 	bne	r2,zero,4b684 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
   4b674:	013fff84 	movi	r4,-2
   4b678:	a9007126 	beq	r21,r4,4b840 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
   4b67c:	00bfff44 	movi	r2,-3
   4b680:	308c703a 	and	r6,r6,r2
   4b684:	b93fff17 	ldw	r4,-4(r23)
   4b688:	d9400404 	addi	r5,sp,16
   4b68c:	d9c00917 	ldw	r7,36(sp)
   4b690:	20800017 	ldw	r2,0(r4)
   4b694:	d9400315 	stw	r5,12(sp)
   4b698:	d9401a17 	ldw	r5,104(sp)
   4b69c:	d8c00015 	stw	r3,0(sp)
   4b6a0:	d9400215 	stw	r5,8(sp)
   4b6a4:	d9401917 	ldw	r5,100(sp)
   4b6a8:	d9400115 	stw	r5,4(sp)
   4b6ac:	10800717 	ldw	r2,28(r2)
   4b6b0:	a80b883a 	mov	r5,r21
   4b6b4:	103ee83a 	callr	r2
   4b6b8:	a1400217 	ldw	r5,8(r20)
   4b6bc:	d9000617 	ldw	r4,24(sp)
   4b6c0:	d8c00717 	ldw	r3,28(sp)
   4b6c4:	2908b03a 	or	r4,r5,r4
   4b6c8:	a1000215 	stw	r4,8(r20)
   4b6cc:	01400184 	movi	r5,6
   4b6d0:	1940a426 	beq	r3,r5,4b964 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
   4b6d4:	01400084 	movi	r5,2
   4b6d8:	1940a226 	beq	r3,r5,4b964 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
   4b6dc:	81403fcc 	andi	r5,r16,255
   4b6e0:	a1800017 	ldw	r6,0(r20)
   4b6e4:	28004f1e 	bne	r5,zero,4b824 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
   4b6e8:	30007926 	beq	r6,zero,4b8d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
   4b6ec:	d9400417 	ldw	r5,16(sp)
   4b6f0:	29806926 	beq	r5,r6,4b898 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
   4b6f4:	28006d26 	beq	r5,zero,4b8ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
   4b6f8:	a2800317 	ldw	r10,12(r20)
   4b6fc:	9100250e 	bge	r18,r4,4b794 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
   4b700:	2100004c 	andi	r4,r4,1
   4b704:	20000326 	beq	r4,zero,4b714 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
   4b708:	a0800417 	ldw	r2,16(r20)
   4b70c:	1080008c 	andi	r2,r2,2
   4b710:	1000201e 	bne	r2,zero,4b794 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
   4b714:	50004d1e 	bne	r10,zero,4b84c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
   4b718:	18002626 	beq	r3,zero,4b7b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
   4b71c:	02800044 	movi	r10,1
   4b720:	181b883a 	mov	r13,r3
   4b724:	1a84f03a 	xor	r2,r3,r10
   4b728:	501f883a 	mov	r15,r10
   4b72c:	90801f0e 	bge	r18,r2,4b7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
   4b730:	90c0880e 	bge	r18,r3,4b954 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
   4b734:	d9400417 	ldw	r5,16(sp)
   4b738:	1880008c 	andi	r2,r3,2
   4b73c:	d9000517 	ldw	r4,20(sp)
   4b740:	a1400015 	stw	r5,0(r20)
   4b744:	0021883a 	mov	r16,zero
   4b748:	a1000115 	stw	r4,4(r20)
   4b74c:	a0c00315 	stw	r3,12(r20)
   4b750:	10004f1e 	bne	r2,zero,4b890 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
   4b754:	6b40004c 	andi	r13,r13,1
   4b758:	68004d26 	beq	r13,zero,4b890 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
   4b75c:	a1000217 	ldw	r4,8(r20)
   4b760:	01400104 	movi	r5,4
   4b764:	21408826 	beq	r4,r5,4b988 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
   4b768:	b5bfffc4 	addi	r22,r22,-1
   4b76c:	bdfffe04 	addi	r23,r23,-8
   4b770:	b03fab1e 	bne	r22,zero,4b620 <__alt_data_end+0xfffcb620>
   4b774:	d8800a43 	ldbu	r2,41(sp)
   4b778:	a82f883a 	mov	r23,r21
   4b77c:	882d883a 	mov	r22,r17
   4b780:	10008126 	beq	r2,zero,4b988 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
   4b784:	dd400a03 	ldbu	r21,40(sp)
   4b788:	a8007f26 	beq	r21,zero,4b988 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
   4b78c:	d8000a05 	stb	zero,40(sp)
   4b790:	003f9706 	br	4b5f0 <__alt_data_end+0xfffcb5f0>
   4b794:	501f883a 	mov	r15,r10
   4b798:	181b883a 	mov	r13,r3
   4b79c:	02800b0e 	bge	zero,r10,4b7cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
   4b7a0:	00c0570e 	bge	zero,r3,4b900 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
   4b7a4:	1a84f03a 	xor	r2,r3,r10
   4b7a8:	90bfe116 	blt	r18,r2,4b730 <__alt_data_end+0xfffcb730>
   4b7ac:	1bc6703a 	and	r3,r3,r15
   4b7b0:	90c09916 	blt	r18,r3,4ba18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
   4b7b4:	01000044 	movi	r4,1
   4b7b8:	a1000315 	stw	r4,12(r20)
   4b7bc:	a0000015 	stw	zero,0(r20)
   4b7c0:	a1000217 	ldw	r4,8(r20)
   4b7c4:	04000044 	movi	r16,1
   4b7c8:	003fe506 	br	4b760 <__alt_data_end+0xfffcb760>
   4b7cc:	90c00a0e 	bge	r18,r3,4b7f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
   4b7d0:	1880004c 	andi	r2,r3,1
   4b7d4:	10000426 	beq	r2,zero,4b7e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
   4b7d8:	d9000b17 	ldw	r4,44(sp)
   4b7dc:	20800217 	ldw	r2,8(r4)
   4b7e0:	1080008c 	andi	r2,r2,2
   4b7e4:	1000041e 	bne	r2,zero,4b7f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
   4b7e8:	1880005c 	xori	r2,r3,1
   4b7ec:	90bfd216 	blt	r18,r2,4b738 <__alt_data_end+0xfffcb738>
   4b7f0:	03c00044 	movi	r15,1
   4b7f4:	003fed06 	br	4b7ac <__alt_data_end+0xfffcb7ac>
   4b7f8:	a8006e16 	blt	r21,zero,4b9b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
   4b7fc:	d8801a17 	ldw	r2,104(sp)
   4b800:	354d883a 	add	r6,r6,r21
   4b804:	11805026 	beq	r2,r6,4b948 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
   4b808:	00c0a50e 	bge	zero,r3,4baa0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
   4b80c:	03c00044 	movi	r15,1
   4b810:	1bc4f03a 	xor	r2,r3,r15
   4b814:	7815883a 	mov	r10,r15
   4b818:	003fc406 	br	4b72c <__alt_data_end+0xfffcb72c>
   4b81c:	980d883a 	mov	r6,r19
   4b820:	003f8d06 	br	4b658 <__alt_data_end+0xfffcb658>
   4b824:	303fb11e 	bne	r6,zero,4b6ec <__alt_data_end+0xfffcb6ec>
   4b828:	d9400417 	ldw	r5,16(sp)
   4b82c:	283fb21e 	bne	r5,zero,4b6f8 <__alt_data_end+0xfffcb6f8>
   4b830:	003fcb06 	br	4b760 <__alt_data_end+0xfffcb760>
   4b834:	00c00044 	movi	r3,1
   4b838:	d8c00a45 	stb	r3,41(sp)
   4b83c:	003fca06 	br	4b768 <__alt_data_end+0xfffcb768>
   4b840:	294000cc 	andi	r5,r5,3
   4b844:	283fc826 	beq	r5,zero,4b768 <__alt_data_end+0xfffcb768>
   4b848:	003f8c06 	br	4b67c <__alt_data_end+0xfffcb67c>
   4b84c:	18001a26 	beq	r3,zero,4b8b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
   4b850:	181b883a 	mov	r13,r3
   4b854:	501f883a 	mov	r15,r10
   4b858:	50c4f03a 	xor	r2,r10,r3
   4b85c:	003fb306 	br	4b72c <__alt_data_end+0xfffcb72c>
   4b860:	d8c00b17 	ldw	r3,44(sp)
   4b864:	1c000117 	ldw	r16,4(r3)
   4b868:	d8c01917 	ldw	r3,100(sp)
   4b86c:	19400117 	ldw	r5,4(r3)
   4b870:	81400626 	beq	r16,r5,4b88c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
   4b874:	80c00007 	ldb	r3,0(r16)
   4b878:	00800a84 	movi	r2,42
   4b87c:	18bf4d26 	beq	r3,r2,4b5b4 <__alt_data_end+0xfffcb5b4>
   4b880:	8009883a 	mov	r4,r16
   4b884:	00506400 	call	50640 <strcmp>
   4b888:	10005c1e 	bne	r2,zero,4b9fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
   4b88c:	e4c00215 	stw	r19,8(fp)
   4b890:	0005883a 	mov	r2,zero
   4b894:	003f3b06 	br	4b584 <__alt_data_end+0xfffcb584>
   4b898:	a0c00117 	ldw	r3,4(r20)
   4b89c:	d8800517 	ldw	r2,20(sp)
   4b8a0:	1884b03a 	or	r2,r3,r2
   4b8a4:	a0800115 	stw	r2,4(r20)
   4b8a8:	003fad06 	br	4b760 <__alt_data_end+0xfffcb760>
   4b8ac:	10803fcc 	andi	r2,r2,255
   4b8b0:	103f911e 	bne	r2,zero,4b6f8 <__alt_data_end+0xfffcb6f8>
   4b8b4:	003faa06 	br	4b760 <__alt_data_end+0xfffcb760>
   4b8b8:	501b883a 	mov	r13,r10
   4b8bc:	5080005c 	xori	r2,r10,1
   4b8c0:	5007883a 	mov	r3,r10
   4b8c4:	90bfbb0e 	bge	r18,r2,4b7b4 <__alt_data_end+0xfffcb7b4>
   4b8c8:	6880008c 	andi	r2,r13,2
   4b8cc:	003f9f06 	br	4b74c <__alt_data_end+0xfffcb74c>
   4b8d0:	d8c00417 	ldw	r3,16(sp)
   4b8d4:	d9400517 	ldw	r5,20(sp)
   4b8d8:	a0c00015 	stw	r3,0(r20)
   4b8dc:	a1400115 	stw	r5,4(r20)
   4b8e0:	18000526 	beq	r3,zero,4b8f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
   4b8e4:	20001626 	beq	r4,zero,4b940 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
   4b8e8:	d9400b17 	ldw	r5,44(sp)
   4b8ec:	28c00217 	ldw	r3,8(r5)
   4b8f0:	18c0004c 	andi	r3,r3,1
   4b8f4:	183f2326 	beq	r3,zero,4b584 <__alt_data_end+0xfffcb584>
   4b8f8:	1021883a 	mov	r16,r2
   4b8fc:	003f9806 	br	4b760 <__alt_data_end+0xfffcb760>
   4b900:	9280060e 	bge	r18,r10,4b91c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
   4b904:	5080004c 	andi	r2,r10,1
   4b908:	10002426 	beq	r2,zero,4b99c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
   4b90c:	d8c00b17 	ldw	r3,44(sp)
   4b910:	18800217 	ldw	r2,8(r3)
   4b914:	1080008c 	andi	r2,r2,2
   4b918:	10003c26 	beq	r2,zero,4ba0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
   4b91c:	d9400417 	ldw	r5,16(sp)
   4b920:	a8004216 	blt	r21,zero,4ba2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
   4b924:	d8c01a17 	ldw	r3,104(sp)
   4b928:	2d45883a 	add	r2,r5,r21
   4b92c:	18805726 	beq	r3,r2,4ba8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
   4b930:	7880005c 	xori	r2,r15,1
   4b934:	781b883a 	mov	r13,r15
   4b938:	5007883a 	mov	r3,r10
   4b93c:	003fe106 	br	4b8c4 <__alt_data_end+0xfffcb8c4>
   4b940:	1021883a 	mov	r16,r2
   4b944:	003f8806 	br	4b768 <__alt_data_end+0xfffcb768>
   4b948:	03c00184 	movi	r15,6
   4b94c:	00ffb016 	blt	zero,r3,4b810 <__alt_data_end+0xfffcb810>
   4b950:	7815883a 	mov	r10,r15
   4b954:	7880008c 	andi	r2,r15,2
   4b958:	781b883a 	mov	r13,r15
   4b95c:	5007883a 	mov	r3,r10
   4b960:	003f7a06 	br	4b74c <__alt_data_end+0xfffcb74c>
   4b964:	a039883a 	mov	fp,r20
   4b968:	e0c00315 	stw	r3,12(fp)
   4b96c:	d8c00417 	ldw	r3,16(sp)
   4b970:	a0c00015 	stw	r3,0(r20)
   4b974:	d8c00517 	ldw	r3,20(sp)
   4b978:	a0c00115 	stw	r3,4(r20)
   4b97c:	003f0106 	br	4b584 <__alt_data_end+0xfffcb584>
   4b980:	002d883a 	mov	r22,zero
   4b984:	003f1106 	br	4b5cc <__alt_data_end+0xfffcb5cc>
   4b988:	8005883a 	mov	r2,r16
   4b98c:	003efd06 	br	4b584 <__alt_data_end+0xfffcb584>
   4b990:	00bfff84 	movi	r2,-2
   4b994:	b8bfbe1e 	bne	r23,r2,4b890 <__alt_data_end+0xfffcb890>
   4b998:	003ef706 	br	4b578 <__alt_data_end+0xfffcb578>
   4b99c:	5080005c 	xori	r2,r10,1
   4b9a0:	90bf840e 	bge	r18,r2,4b7b4 <__alt_data_end+0xfffcb7b4>
   4b9a4:	501b883a 	mov	r13,r10
   4b9a8:	5080008c 	andi	r2,r10,2
   4b9ac:	5007883a 	mov	r3,r10
   4b9b0:	003f6606 	br	4b74c <__alt_data_end+0xfffcb74c>
   4b9b4:	013fff84 	movi	r4,-2
   4b9b8:	a9003226 	beq	r21,r4,4ba84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
   4b9bc:	d9400917 	ldw	r5,36(sp)
   4b9c0:	d9001a17 	ldw	r4,104(sp)
   4b9c4:	d9c01917 	ldw	r7,100(sp)
   4b9c8:	28800017 	ldw	r2,0(r5)
   4b9cc:	d9000015 	stw	r4,0(sp)
   4b9d0:	d9000917 	ldw	r4,36(sp)
   4b9d4:	10800817 	ldw	r2,32(r2)
   4b9d8:	a80b883a 	mov	r5,r21
   4b9dc:	d8c00d15 	stw	r3,52(sp)
   4b9e0:	db400c15 	stw	r13,48(sp)
   4b9e4:	103ee83a 	callr	r2
   4b9e8:	1015883a 	mov	r10,r2
   4b9ec:	101f883a 	mov	r15,r2
   4b9f0:	db400c17 	ldw	r13,48(sp)
   4b9f4:	d8c00d17 	ldw	r3,52(sp)
   4b9f8:	003f6906 	br	4b7a0 <__alt_data_end+0xfffcb7a0>
   4b9fc:	d8c00917 	ldw	r3,36(sp)
   4ba00:	19400117 	ldw	r5,4(r3)
   4ba04:	817ed31e 	bne	r16,r5,4b554 <__alt_data_end+0xfffcb554>
   4ba08:	003ed506 	br	4b560 <__alt_data_end+0xfffcb560>
   4ba0c:	5080005c 	xori	r2,r10,1
   4ba10:	90bfe416 	blt	r18,r2,4b9a4 <__alt_data_end+0xfffcb9a4>
   4ba14:	003f6706 	br	4b7b4 <__alt_data_end+0xfffcb7b4>
   4ba18:	00800084 	movi	r2,2
   4ba1c:	a0800315 	stw	r2,12(r20)
   4ba20:	a0000015 	stw	zero,0(r20)
   4ba24:	00800044 	movi	r2,1
   4ba28:	003ed606 	br	4b584 <__alt_data_end+0xfffcb584>
   4ba2c:	013fff84 	movi	r4,-2
   4ba30:	a9002526 	beq	r21,r4,4bac8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
   4ba34:	d8c00917 	ldw	r3,36(sp)
   4ba38:	d9c01917 	ldw	r7,100(sp)
   4ba3c:	d9000917 	ldw	r4,36(sp)
   4ba40:	18800017 	ldw	r2,0(r3)
   4ba44:	d8c01a17 	ldw	r3,104(sp)
   4ba48:	280d883a 	mov	r6,r5
   4ba4c:	a80b883a 	mov	r5,r21
   4ba50:	d8c00015 	stw	r3,0(sp)
   4ba54:	10800817 	ldw	r2,32(r2)
   4ba58:	da800c15 	stw	r10,48(sp)
   4ba5c:	dbc00d15 	stw	r15,52(sp)
   4ba60:	103ee83a 	callr	r2
   4ba64:	da800c17 	ldw	r10,48(sp)
   4ba68:	1007883a 	mov	r3,r2
   4ba6c:	101b883a 	mov	r13,r2
   4ba70:	dbc00d17 	ldw	r15,52(sp)
   4ba74:	1284f03a 	xor	r2,r2,r10
   4ba78:	003f2c06 	br	4b72c <__alt_data_end+0xfffcb72c>
   4ba7c:	00800184 	movi	r2,6
   4ba80:	003ebe06 	br	4b57c <__alt_data_end+0xfffcb57c>
   4ba84:	00ff4b0e 	bge	zero,r3,4b7b4 <__alt_data_end+0xfffcb7b4>
   4ba88:	003f6006 	br	4b80c <__alt_data_end+0xfffcb80c>
   4ba8c:	5080019c 	xori	r2,r10,6
   4ba90:	90800916 	blt	r18,r2,4bab8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
   4ba94:	50c0018c 	andi	r3,r10,6
   4ba98:	90ff460e 	bge	r18,r3,4b7b4 <__alt_data_end+0xfffcb7b4>
   4ba9c:	003fde06 	br	4ba18 <__alt_data_end+0xfffcba18>
   4baa0:	d8c01a17 	ldw	r3,104(sp)
   4baa4:	2d45883a 	add	r2,r5,r21
   4baa8:	18800326 	beq	r3,r2,4bab8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
   4baac:	02800044 	movi	r10,1
   4bab0:	501f883a 	mov	r15,r10
   4bab4:	003f9e06 	br	4b930 <__alt_data_end+0xfffcb930>
   4bab8:	03400184 	movi	r13,6
   4babc:	00800084 	movi	r2,2
   4bac0:	6807883a 	mov	r3,r13
   4bac4:	003f1d06 	br	4b73c <__alt_data_end+0xfffcb73c>
   4bac8:	501b883a 	mov	r13,r10
   4bacc:	5080005c 	xori	r2,r10,1
   4bad0:	5007883a 	mov	r3,r10
   4bad4:	003f7b06 	br	4b8c4 <__alt_data_end+0xfffcb8c4>

0004bad8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   4bad8:	deffef04 	addi	sp,sp,-68
   4badc:	ddc00e15 	stw	r23,56(sp)
   4bae0:	dd000b15 	stw	r20,44(sp)
   4bae4:	dc400815 	stw	r17,32(sp)
   4bae8:	3029883a 	mov	r20,r6
   4baec:	dfc01015 	stw	ra,64(sp)
   4baf0:	df000f15 	stw	fp,60(sp)
   4baf4:	dd800d15 	stw	r22,52(sp)
   4baf8:	dd400c15 	stw	r21,48(sp)
   4bafc:	dcc00a15 	stw	r19,40(sp)
   4bb00:	dc800915 	stw	r18,36(sp)
   4bb04:	dc000715 	stw	r16,28(sp)
   4bb08:	d9000515 	stw	r4,20(sp)
   4bb0c:	2823883a 	mov	r17,r5
   4bb10:	382f883a 	mov	r23,r7
   4bb14:	004bec00 	call	4bec0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   4bb18:	100d883a 	mov	r6,r2
   4bb1c:	10803fcc 	andi	r2,r2,255
   4bb20:	1000441e 	bne	r2,zero,4bc34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
   4bb24:	bc000217 	ldw	r16,8(r23)
   4bb28:	8080040c 	andi	r2,r16,16
   4bb2c:	10000226 	beq	r2,zero,4bb38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
   4bb30:	d8c00517 	ldw	r3,20(sp)
   4bb34:	1c000217 	ldw	r16,8(r3)
   4bb38:	d8c00517 	ldw	r3,20(sp)
   4bb3c:	d8800517 	ldw	r2,20(sp)
   4bb40:	1f000317 	ldw	fp,12(r3)
   4bb44:	e01090fa 	slli	r8,fp,3
   4bb48:	40c00304 	addi	r3,r8,12
   4bb4c:	10ed883a 	add	r22,r2,r3
   4bb50:	80c0004c 	andi	r3,r16,1
   4bb54:	42000204 	addi	r8,r8,8
   4bb58:	d8c00415 	stw	r3,16(sp)
   4bb5c:	122b883a 	add	r21,r2,r8
   4bb60:	e0003226 	beq	fp,zero,4bc2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
   4bb64:	b1800017 	ldw	r6,0(r22)
   4bb68:	d8000015 	stw	zero,0(sp)
   4bb6c:	d8000115 	stw	zero,4(sp)
   4bb70:	dc000215 	stw	r16,8(sp)
   4bb74:	d8000315 	stw	zero,12(sp)
   4bb78:	34c0008c 	andi	r19,r6,2
   4bb7c:	3480004c 	andi	r18,r6,1
   4bb80:	9800021e 	bne	r19,zero,4bb8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
   4bb84:	d8c00417 	ldw	r3,16(sp)
   4bb88:	18002426 	beq	r3,zero,4bc1c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
   4bb8c:	a0003626 	beq	r20,zero,4bc68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
   4bb90:	300dd23a 	srai	r6,r6,8
   4bb94:	90000326 	beq	r18,zero,4bba4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
   4bb98:	a0800017 	ldw	r2,0(r20)
   4bb9c:	118d883a 	add	r6,r2,r6
   4bba0:	31800017 	ldw	r6,0(r6)
   4bba4:	a18d883a 	add	r6,r20,r6
   4bba8:	a9000017 	ldw	r4,0(r21)
   4bbac:	d80f883a 	mov	r7,sp
   4bbb0:	880b883a 	mov	r5,r17
   4bbb4:	20800017 	ldw	r2,0(r4)
   4bbb8:	10800617 	ldw	r2,24(r2)
   4bbbc:	103ee83a 	callr	r2
   4bbc0:	100d883a 	mov	r6,r2
   4bbc4:	10803fcc 	andi	r2,r2,255
   4bbc8:	10001426 	beq	r2,zero,4bc1c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
   4bbcc:	d8800317 	ldw	r2,12(sp)
   4bbd0:	00c00204 	movi	r3,8
   4bbd4:	10c02626 	beq	r2,r3,4bc70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
   4bbd8:	d8800117 	ldw	r2,4(sp)
   4bbdc:	00c000c4 	movi	r3,3
   4bbe0:	1880040e 	bge	r3,r2,4bbf4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
   4bbe4:	9800031e 	bne	r19,zero,4bbf4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
   4bbe8:	00ffff44 	movi	r3,-3
   4bbec:	10c4703a 	and	r2,r2,r3
   4bbf0:	d8800115 	stw	r2,4(sp)
   4bbf4:	b9400317 	ldw	r5,12(r23)
   4bbf8:	28002126 	beq	r5,zero,4bc80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
   4bbfc:	b8800017 	ldw	r2,0(r23)
   4bc00:	d9000017 	ldw	r4,0(sp)
   4bc04:	11004d1e 	bne	r2,r4,4bd3c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
   4bc08:	10003126 	beq	r2,zero,4bcd0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
   4bc0c:	b9000117 	ldw	r4,4(r23)
   4bc10:	d8800117 	ldw	r2,4(sp)
   4bc14:	2084b03a 	or	r2,r4,r2
   4bc18:	b8800115 	stw	r2,4(r23)
   4bc1c:	e73fffc4 	addi	fp,fp,-1
   4bc20:	b5bffe04 	addi	r22,r22,-8
   4bc24:	ad7ffe04 	addi	r21,r21,-8
   4bc28:	e03fce1e 	bne	fp,zero,4bb64 <__alt_data_end+0xfffcbb64>
   4bc2c:	b9800117 	ldw	r6,4(r23)
   4bc30:	300cc03a 	cmpne	r6,r6,zero
   4bc34:	3005883a 	mov	r2,r6
   4bc38:	dfc01017 	ldw	ra,64(sp)
   4bc3c:	df000f17 	ldw	fp,60(sp)
   4bc40:	ddc00e17 	ldw	r23,56(sp)
   4bc44:	dd800d17 	ldw	r22,52(sp)
   4bc48:	dd400c17 	ldw	r21,48(sp)
   4bc4c:	dd000b17 	ldw	r20,44(sp)
   4bc50:	dcc00a17 	ldw	r19,40(sp)
   4bc54:	dc800917 	ldw	r18,36(sp)
   4bc58:	dc400817 	ldw	r17,32(sp)
   4bc5c:	dc000717 	ldw	r16,28(sp)
   4bc60:	dec01104 	addi	sp,sp,68
   4bc64:	f800283a 	ret
   4bc68:	000d883a 	mov	r6,zero
   4bc6c:	003fce06 	br	4bba8 <__alt_data_end+0xfffcbba8>
   4bc70:	903fd926 	beq	r18,zero,4bbd8 <__alt_data_end+0xfffcbbd8>
   4bc74:	a8800017 	ldw	r2,0(r21)
   4bc78:	d8800315 	stw	r2,12(sp)
   4bc7c:	003fd606 	br	4bbd8 <__alt_data_end+0xfffcbbd8>
   4bc80:	d9000017 	ldw	r4,0(sp)
   4bc84:	d8800117 	ldw	r2,4(sp)
   4bc88:	00c000c4 	movi	r3,3
   4bc8c:	b9000015 	stw	r4,0(r23)
   4bc90:	d9000217 	ldw	r4,8(sp)
   4bc94:	b8800115 	stw	r2,4(r23)
   4bc98:	b9000215 	stw	r4,8(r23)
   4bc9c:	d9000317 	ldw	r4,12(sp)
   4bca0:	b9000315 	stw	r4,12(r23)
   4bca4:	18bfe30e 	bge	r3,r2,4bc34 <__alt_data_end+0xfffcbc34>
   4bca8:	1100008c 	andi	r4,r2,2
   4bcac:	20001926 	beq	r4,zero,4bd14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
   4bcb0:	d8c00517 	ldw	r3,20(sp)
   4bcb4:	18800217 	ldw	r2,8(r3)
   4bcb8:	1080004c 	andi	r2,r2,1
   4bcbc:	103fdd26 	beq	r2,zero,4bc34 <__alt_data_end+0xfffcbc34>
   4bcc0:	e73fffc4 	addi	fp,fp,-1
   4bcc4:	b5bffe04 	addi	r22,r22,-8
   4bcc8:	ad7ffe04 	addi	r21,r21,-8
   4bccc:	003fd606 	br	4bc28 <__alt_data_end+0xfffcbc28>
   4bcd0:	d8800317 	ldw	r2,12(sp)
   4bcd4:	00c00204 	movi	r3,8
   4bcd8:	10c00b26 	beq	r2,r3,4bd08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
   4bcdc:	28c00a26 	beq	r5,r3,4bd08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
   4bce0:	11000117 	ldw	r4,4(r2)
   4bce4:	29400117 	ldw	r5,4(r5)
   4bce8:	217fc826 	beq	r4,r5,4bc0c <__alt_data_end+0xfffcbc0c>
   4bcec:	20800007 	ldb	r2,0(r4)
   4bcf0:	00c00a84 	movi	r3,42
   4bcf4:	10c00426 	beq	r2,r3,4bd08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
   4bcf8:	d9800615 	stw	r6,24(sp)
   4bcfc:	00506400 	call	50640 <strcmp>
   4bd00:	d9800617 	ldw	r6,24(sp)
   4bd04:	103fc126 	beq	r2,zero,4bc0c <__alt_data_end+0xfffcbc0c>
   4bd08:	00800084 	movi	r2,2
   4bd0c:	b8800115 	stw	r2,4(r23)
   4bd10:	003fc806 	br	4bc34 <__alt_data_end+0xfffcbc34>
   4bd14:	1080004c 	andi	r2,r2,1
   4bd18:	103fc626 	beq	r2,zero,4bc34 <__alt_data_end+0xfffcbc34>
   4bd1c:	d8c00517 	ldw	r3,20(sp)
   4bd20:	18800217 	ldw	r2,8(r3)
   4bd24:	1080008c 	andi	r2,r2,2
   4bd28:	103fc226 	beq	r2,zero,4bc34 <__alt_data_end+0xfffcbc34>
   4bd2c:	e73fffc4 	addi	fp,fp,-1
   4bd30:	b5bffe04 	addi	r22,r22,-8
   4bd34:	ad7ffe04 	addi	r21,r21,-8
   4bd38:	003fbb06 	br	4bc28 <__alt_data_end+0xfffcbc28>
   4bd3c:	00800084 	movi	r2,2
   4bd40:	b8000015 	stw	zero,0(r23)
   4bd44:	b8800115 	stw	r2,4(r23)
   4bd48:	003fba06 	br	4bc34 <__alt_data_end+0xfffcbc34>

0004bd4c <_ZNSt9type_infoD1Ev>:
   4bd4c:	f800283a 	ret

0004bd50 <_ZNKSt9type_info14__is_pointer_pEv>:
   4bd50:	0005883a 	mov	r2,zero
   4bd54:	f800283a 	ret

0004bd58 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   4bd58:	0005883a 	mov	r2,zero
   4bd5c:	f800283a 	ret

0004bd60 <_ZNSt9type_infoD0Ev>:
   4bd60:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004bd64 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   4bd64:	21000117 	ldw	r4,4(r4)
   4bd68:	29400117 	ldw	r5,4(r5)
   4bd6c:	21400c26 	beq	r4,r5,4bda0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   4bd70:	20c00007 	ldb	r3,0(r4)
   4bd74:	00800a84 	movi	r2,42
   4bd78:	18800726 	beq	r3,r2,4bd98 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   4bd7c:	deffff04 	addi	sp,sp,-4
   4bd80:	dfc00015 	stw	ra,0(sp)
   4bd84:	00506400 	call	50640 <strcmp>
   4bd88:	1005003a 	cmpeq	r2,r2,zero
   4bd8c:	dfc00017 	ldw	ra,0(sp)
   4bd90:	dec00104 	addi	sp,sp,4
   4bd94:	f800283a 	ret
   4bd98:	0005883a 	mov	r2,zero
   4bd9c:	f800283a 	ret
   4bda0:	00800044 	movi	r2,1
   4bda4:	f800283a 	ret

0004bda8 <_ZdlPv>:
   4bda8:	004f6341 	jmpi	4f634 <free>

0004bdac <__cxa_pure_virtual>:
   4bdac:	014001f4 	movhi	r5,7
   4bdb0:	deffff04 	addi	sp,sp,-4
   4bdb4:	296dce04 	addi	r5,r5,-18632
   4bdb8:	018006c4 	movi	r6,27
   4bdbc:	01000084 	movi	r4,2
   4bdc0:	dfc00015 	stw	ra,0(sp)
   4bdc4:	0060c040 	call	60c04 <write>
   4bdc8:	004c1740 	call	4c174 <_ZSt9terminatev>

0004bdcc <__cxa_deleted_virtual>:
   4bdcc:	014001f4 	movhi	r5,7
   4bdd0:	deffff04 	addi	sp,sp,-4
   4bdd4:	296dd504 	addi	r5,r5,-18604
   4bdd8:	01800784 	movi	r6,30
   4bddc:	01000084 	movi	r4,2
   4bde0:	dfc00015 	stw	ra,0(sp)
   4bde4:	0060c040 	call	60c04 <write>
   4bde8:	004c1740 	call	4c174 <_ZSt9terminatev>

0004bdec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   4bdec:	20800017 	ldw	r2,0(r4)
   4bdf0:	defffa04 	addi	sp,sp,-24
   4bdf4:	dc000415 	stw	r16,16(sp)
   4bdf8:	10800617 	ldw	r2,24(r2)
   4bdfc:	3021883a 	mov	r16,r6
   4be00:	31800017 	ldw	r6,0(r6)
   4be04:	00c00404 	movi	r3,16
   4be08:	d8c00215 	stw	r3,8(sp)
   4be0c:	dfc00515 	stw	ra,20(sp)
   4be10:	d8000015 	stw	zero,0(sp)
   4be14:	d8000115 	stw	zero,4(sp)
   4be18:	d8000315 	stw	zero,12(sp)
   4be1c:	d80f883a 	mov	r7,sp
   4be20:	103ee83a 	callr	r2
   4be24:	d8800117 	ldw	r2,4(sp)
   4be28:	00c00184 	movi	r3,6
   4be2c:	1080018c 	andi	r2,r2,6
   4be30:	10c00526 	beq	r2,r3,4be48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   4be34:	0005883a 	mov	r2,zero
   4be38:	dfc00517 	ldw	ra,20(sp)
   4be3c:	dc000417 	ldw	r16,16(sp)
   4be40:	dec00604 	addi	sp,sp,24
   4be44:	f800283a 	ret
   4be48:	d8c00017 	ldw	r3,0(sp)
   4be4c:	00800044 	movi	r2,1
   4be50:	80c00015 	stw	r3,0(r16)
   4be54:	dfc00517 	ldw	ra,20(sp)
   4be58:	dc000417 	ldw	r16,16(sp)
   4be5c:	dec00604 	addi	sp,sp,24
   4be60:	f800283a 	ret

0004be64 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   4be64:	d8800017 	ldw	r2,0(sp)
   4be68:	11800226 	beq	r2,r6,4be74 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   4be6c:	00800044 	movi	r2,1
   4be70:	f800283a 	ret
   4be74:	00800184 	movi	r2,6
   4be78:	f800283a 	ret

0004be7c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   4be7c:	008001f4 	movhi	r2,7
   4be80:	10adeb04 	addi	r2,r2,-18516
   4be84:	20800015 	stw	r2,0(r4)
   4be88:	004bd4c1 	jmpi	4bd4c <_ZNSt9type_infoD1Ev>

0004be8c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   4be8c:	defffe04 	addi	sp,sp,-8
   4be90:	008001f4 	movhi	r2,7
   4be94:	dc000015 	stw	r16,0(sp)
   4be98:	dfc00115 	stw	ra,4(sp)
   4be9c:	10adeb04 	addi	r2,r2,-18516
   4bea0:	20800015 	stw	r2,0(r4)
   4bea4:	2021883a 	mov	r16,r4
   4bea8:	004bd4c0 	call	4bd4c <_ZNSt9type_infoD1Ev>
   4beac:	8009883a 	mov	r4,r16
   4beb0:	dfc00117 	ldw	ra,4(sp)
   4beb4:	dc000017 	ldw	r16,0(sp)
   4beb8:	dec00204 	addi	sp,sp,8
   4bebc:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004bec0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   4bec0:	21000117 	ldw	r4,4(r4)
   4bec4:	29400117 	ldw	r5,4(r5)
   4bec8:	defffd04 	addi	sp,sp,-12
   4becc:	dc400115 	stw	r17,4(sp)
   4bed0:	dc000015 	stw	r16,0(sp)
   4bed4:	dfc00215 	stw	ra,8(sp)
   4bed8:	3023883a 	mov	r17,r6
   4bedc:	3821883a 	mov	r16,r7
   4bee0:	21400526 	beq	r4,r5,4bef8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   4bee4:	20c00007 	ldb	r3,0(r4)
   4bee8:	00800a84 	movi	r2,42
   4beec:	18800d26 	beq	r3,r2,4bf24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   4bef0:	00506400 	call	50640 <strcmp>
   4bef4:	10000b1e 	bne	r2,zero,4bf24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   4bef8:	00800204 	movi	r2,8
   4befc:	80800315 	stw	r2,12(r16)
   4bf00:	00800184 	movi	r2,6
   4bf04:	80800115 	stw	r2,4(r16)
   4bf08:	84400015 	stw	r17,0(r16)
   4bf0c:	00800044 	movi	r2,1
   4bf10:	dfc00217 	ldw	ra,8(sp)
   4bf14:	dc400117 	ldw	r17,4(sp)
   4bf18:	dc000017 	ldw	r16,0(sp)
   4bf1c:	dec00304 	addi	sp,sp,12
   4bf20:	f800283a 	ret
   4bf24:	0005883a 	mov	r2,zero
   4bf28:	003ff906 	br	4bf10 <__alt_data_end+0xfffcbf10>

0004bf2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   4bf2c:	defffa04 	addi	sp,sp,-24
   4bf30:	dc800415 	stw	r18,16(sp)
   4bf34:	d8800817 	ldw	r2,32(sp)
   4bf38:	dc800617 	ldw	r18,24(sp)
   4bf3c:	dc400315 	stw	r17,12(sp)
   4bf40:	dc000215 	stw	r16,8(sp)
   4bf44:	dfc00515 	stw	ra,20(sp)
   4bf48:	dc400917 	ldw	r17,36(sp)
   4bf4c:	24000117 	ldw	r16,4(r4)
   4bf50:	90801526 	beq	r18,r2,4bfa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
   4bf54:	39400117 	ldw	r5,4(r7)
   4bf58:	2c000826 	beq	r5,r16,4bf7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
   4bf5c:	80c00007 	ldb	r3,0(r16)
   4bf60:	00800a84 	movi	r2,42
   4bf64:	18800926 	beq	r3,r2,4bf8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   4bf68:	8009883a 	mov	r4,r16
   4bf6c:	d9800115 	stw	r6,4(sp)
   4bf70:	00506400 	call	50640 <strcmp>
   4bf74:	d9800117 	ldw	r6,4(sp)
   4bf78:	1000041e 	bne	r2,zero,4bf8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   4bf7c:	00800044 	movi	r2,1
   4bf80:	8c800015 	stw	r18,0(r17)
   4bf84:	89800115 	stw	r6,4(r17)
   4bf88:	88800315 	stw	r2,12(r17)
   4bf8c:	0005883a 	mov	r2,zero
   4bf90:	dfc00517 	ldw	ra,20(sp)
   4bf94:	dc800417 	ldw	r18,16(sp)
   4bf98:	dc400317 	ldw	r17,12(sp)
   4bf9c:	dc000217 	ldw	r16,8(sp)
   4bfa0:	dec00604 	addi	sp,sp,24
   4bfa4:	f800283a 	ret
   4bfa8:	d8800717 	ldw	r2,28(sp)
   4bfac:	11400117 	ldw	r5,4(r2)
   4bfb0:	81400a26 	beq	r16,r5,4bfdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   4bfb4:	80c00007 	ldb	r3,0(r16)
   4bfb8:	00800a84 	movi	r2,42
   4bfbc:	18800c26 	beq	r3,r2,4bff0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   4bfc0:	8009883a 	mov	r4,r16
   4bfc4:	d9800115 	stw	r6,4(sp)
   4bfc8:	d9c00015 	stw	r7,0(sp)
   4bfcc:	00506400 	call	50640 <strcmp>
   4bfd0:	d9800117 	ldw	r6,4(sp)
   4bfd4:	d9c00017 	ldw	r7,0(sp)
   4bfd8:	1000021e 	bne	r2,zero,4bfe4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   4bfdc:	89800215 	stw	r6,8(r17)
   4bfe0:	003fea06 	br	4bf8c <__alt_data_end+0xfffcbf8c>
   4bfe4:	39400117 	ldw	r5,4(r7)
   4bfe8:	817fdf1e 	bne	r16,r5,4bf68 <__alt_data_end+0xfffcbf68>
   4bfec:	003fe306 	br	4bf7c <__alt_data_end+0xfffcbf7c>
   4bff0:	38800117 	ldw	r2,4(r7)
   4bff4:	80bfe51e 	bne	r16,r2,4bf8c <__alt_data_end+0xfffcbf8c>
   4bff8:	003fe006 	br	4bf7c <__alt_data_end+0xfffcbf7c>

0004bffc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   4bffc:	20800117 	ldw	r2,4(r4)
   4c000:	28c00117 	ldw	r3,4(r5)
   4c004:	10c02926 	beq	r2,r3,4c0ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   4c008:	defffb04 	addi	sp,sp,-20
   4c00c:	dcc00315 	stw	r19,12(sp)
   4c010:	dc800215 	stw	r18,8(sp)
   4c014:	dc400115 	stw	r17,4(sp)
   4c018:	dc000015 	stw	r16,0(sp)
   4c01c:	dfc00415 	stw	ra,16(sp)
   4c020:	2821883a 	mov	r16,r5
   4c024:	11400007 	ldb	r5,0(r2)
   4c028:	2025883a 	mov	r18,r4
   4c02c:	01000a84 	movi	r4,42
   4c030:	3823883a 	mov	r17,r7
   4c034:	3027883a 	mov	r19,r6
   4c038:	29000626 	beq	r5,r4,4c054 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   4c03c:	180b883a 	mov	r5,r3
   4c040:	1009883a 	mov	r4,r2
   4c044:	00506400 	call	50640 <strcmp>
   4c048:	1000021e 	bne	r2,zero,4c054 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   4c04c:	00800044 	movi	r2,1
   4c050:	00000306 	br	4c060 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   4c054:	008000c4 	movi	r2,3
   4c058:	1440082e 	bgeu	r2,r17,4c07c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   4c05c:	0005883a 	mov	r2,zero
   4c060:	dfc00417 	ldw	ra,16(sp)
   4c064:	dcc00317 	ldw	r19,12(sp)
   4c068:	dc800217 	ldw	r18,8(sp)
   4c06c:	dc400117 	ldw	r17,4(sp)
   4c070:	dc000017 	ldw	r16,0(sp)
   4c074:	dec00504 	addi	sp,sp,20
   4c078:	f800283a 	ret
   4c07c:	80800017 	ldw	r2,0(r16)
   4c080:	980d883a 	mov	r6,r19
   4c084:	900b883a 	mov	r5,r18
   4c088:	10800517 	ldw	r2,20(r2)
   4c08c:	8009883a 	mov	r4,r16
   4c090:	dfc00417 	ldw	ra,16(sp)
   4c094:	dcc00317 	ldw	r19,12(sp)
   4c098:	dc800217 	ldw	r18,8(sp)
   4c09c:	dc400117 	ldw	r17,4(sp)
   4c0a0:	dc000017 	ldw	r16,0(sp)
   4c0a4:	dec00504 	addi	sp,sp,20
   4c0a8:	1000683a 	jmp	r2
   4c0ac:	00800044 	movi	r2,1
   4c0b0:	f800283a 	ret

0004c0b4 <_ZN10__cxxabiv111__terminateEPFvvE>:
   4c0b4:	00800174 	movhi	r2,5
   4c0b8:	deffef04 	addi	sp,sp,-68
   4c0bc:	10b28704 	addi	r2,r2,-13796
   4c0c0:	d8800615 	stw	r2,24(sp)
   4c0c4:	008001b4 	movhi	r2,6
   4c0c8:	10933004 	addi	r2,r2,19648
   4c0cc:	d8800715 	stw	r2,28(sp)
   4c0d0:	00800174 	movhi	r2,5
   4c0d4:	10b04304 	addi	r2,r2,-16116
   4c0d8:	d9000d15 	stw	r4,52(sp)
   4c0dc:	d809883a 	mov	r4,sp
   4c0e0:	d8800915 	stw	r2,36(sp)
   4c0e4:	dfc01015 	stw	ra,64(sp)
   4c0e8:	df000f15 	stw	fp,60(sp)
   4c0ec:	dec00815 	stw	sp,32(sp)
   4c0f0:	dec00a15 	stw	sp,40(sp)
   4c0f4:	004f2400 	call	4f240 <_Unwind_SjLj_Register>
   4c0f8:	00800044 	movi	r2,1
   4c0fc:	d8800115 	stw	r2,4(sp)
   4c100:	d8800d17 	ldw	r2,52(sp)
   4c104:	103ee83a 	callr	r2
   4c108:	004f5bc0 	call	4f5bc <abort>
   4c10c:	d8c00217 	ldw	r3,8(sp)
   4c110:	d8800117 	ldw	r2,4(sp)
   4c114:	d8c00d15 	stw	r3,52(sp)
   4c118:	d8c00317 	ldw	r3,12(sp)
   4c11c:	d8c00e15 	stw	r3,56(sp)
   4c120:	10000b26 	beq	r2,zero,4c150 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   4c124:	10bfffc4 	addi	r2,r2,-1
   4c128:	10000126 	beq	r2,zero,4c130 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   4c12c:	003b68fa 	trap	3
   4c130:	d8000115 	stw	zero,4(sp)
   4c134:	004d4600 	call	4d460 <__cxa_end_catch>
   4c138:	d8c00e17 	ldw	r3,56(sp)
   4c13c:	00bfffc4 	movi	r2,-1
   4c140:	18800826 	beq	r3,r2,4c164 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   4c144:	d9000d17 	ldw	r4,52(sp)
   4c148:	d8800115 	stw	r2,4(sp)
   4c14c:	004f43c0 	call	4f43c <_Unwind_SjLj_Resume>
   4c150:	d9000d17 	ldw	r4,52(sp)
   4c154:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4c158:	00800084 	movi	r2,2
   4c15c:	d8800115 	stw	r2,4(sp)
   4c160:	004f5bc0 	call	4f5bc <abort>
   4c164:	d8800e17 	ldw	r2,56(sp)
   4c168:	d9000d17 	ldw	r4,52(sp)
   4c16c:	d8800115 	stw	r2,4(sp)
   4c170:	004d01c0 	call	4d01c <__cxa_call_unexpected>

0004c174 <_ZSt9terminatev>:
   4c174:	008001f4 	movhi	r2,7
   4c178:	10bb6b04 	addi	r2,r2,-4692
   4c17c:	11000017 	ldw	r4,0(r2)
   4c180:	deffff04 	addi	sp,sp,-4
   4c184:	dfc00015 	stw	ra,0(sp)
   4c188:	004c0b40 	call	4c0b4 <_ZN10__cxxabiv111__terminateEPFvvE>

0004c18c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   4c18c:	deffff04 	addi	sp,sp,-4
   4c190:	dfc00015 	stw	ra,0(sp)
   4c194:	203ee83a 	callr	r4
   4c198:	004c1740 	call	4c174 <_ZSt9terminatev>

0004c19c <_ZSt10unexpectedv>:
   4c19c:	008001f4 	movhi	r2,7
   4c1a0:	10bb6a04 	addi	r2,r2,-4696
   4c1a4:	11000017 	ldw	r4,0(r2)
   4c1a8:	deffff04 	addi	sp,sp,-4
   4c1ac:	dfc00015 	stw	ra,0(sp)
   4c1b0:	004c18c0 	call	4c18c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0004c1b4 <_ZSt13set_terminatePFvvE>:
   4c1b4:	00c001f4 	movhi	r3,7
   4c1b8:	18fb6b04 	addi	r3,r3,-4692
   4c1bc:	18800017 	ldw	r2,0(r3)
   4c1c0:	19000015 	stw	r4,0(r3)
   4c1c4:	f800283a 	ret

0004c1c8 <_ZSt13get_terminatev>:
   4c1c8:	008001f4 	movhi	r2,7
   4c1cc:	10bb6b04 	addi	r2,r2,-4692
   4c1d0:	10800017 	ldw	r2,0(r2)
   4c1d4:	f800283a 	ret

0004c1d8 <_ZSt14set_unexpectedPFvvE>:
   4c1d8:	00c001f4 	movhi	r3,7
   4c1dc:	18fb6a04 	addi	r3,r3,-4696
   4c1e0:	18800017 	ldw	r2,0(r3)
   4c1e4:	19000015 	stw	r4,0(r3)
   4c1e8:	f800283a 	ret

0004c1ec <_ZSt14get_unexpectedv>:
   4c1ec:	008001f4 	movhi	r2,7
   4c1f0:	10bb6a04 	addi	r2,r2,-4696
   4c1f4:	10800017 	ldw	r2,0(r2)
   4c1f8:	f800283a 	ret

0004c1fc <_ZL21size_of_encoded_valueh>:
   4c1fc:	deffff04 	addi	sp,sp,-4
   4c200:	dfc00015 	stw	ra,0(sp)
   4c204:	20c03fcc 	andi	r3,r4,255
   4c208:	00803fc4 	movi	r2,255
   4c20c:	18802026 	beq	r3,r2,4c290 <_ZL21size_of_encoded_valueh+0x94>
   4c210:	210001cc 	andi	r4,r4,7
   4c214:	00800144 	movi	r2,5
   4c218:	11001c36 	bltu	r2,r4,4c28c <_ZL21size_of_encoded_valueh+0x90>
   4c21c:	200890ba 	slli	r4,r4,2
   4c220:	00800174 	movhi	r2,5
   4c224:	10b08d04 	addi	r2,r2,-15820
   4c228:	2089883a 	add	r4,r4,r2
   4c22c:	20800017 	ldw	r2,0(r4)
   4c230:	1000683a 	jmp	r2
   4c234:	0004c24c 	andi	zero,zero,4873
   4c238:	0004c28c 	andi	zero,zero,4874
   4c23c:	0004c25c 	xori	zero,zero,4873
   4c240:	0004c24c 	andi	zero,zero,4873
   4c244:	0004c27c 	xorhi	zero,zero,4873
   4c248:	0004c26c 	andhi	zero,zero,4873
   4c24c:	00800104 	movi	r2,4
   4c250:	dfc00017 	ldw	ra,0(sp)
   4c254:	dec00104 	addi	sp,sp,4
   4c258:	f800283a 	ret
   4c25c:	00800084 	movi	r2,2
   4c260:	dfc00017 	ldw	ra,0(sp)
   4c264:	dec00104 	addi	sp,sp,4
   4c268:	f800283a 	ret
   4c26c:	00800044 	movi	r2,1
   4c270:	dfc00017 	ldw	ra,0(sp)
   4c274:	dec00104 	addi	sp,sp,4
   4c278:	f800283a 	ret
   4c27c:	00800204 	movi	r2,8
   4c280:	dfc00017 	ldw	ra,0(sp)
   4c284:	dec00104 	addi	sp,sp,4
   4c288:	f800283a 	ret
   4c28c:	004f5bc0 	call	4f5bc <abort>
   4c290:	0005883a 	mov	r2,zero
   4c294:	dfc00017 	ldw	ra,0(sp)
   4c298:	dec00104 	addi	sp,sp,4
   4c29c:	f800283a 	ret

0004c2a0 <_ZL28read_encoded_value_with_basehjPKhPj>:
   4c2a0:	deffff04 	addi	sp,sp,-4
   4c2a4:	dfc00015 	stw	ra,0(sp)
   4c2a8:	20c03fcc 	andi	r3,r4,255
   4c2ac:	00801404 	movi	r2,80
   4c2b0:	18807326 	beq	r3,r2,4c480 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
   4c2b4:	20c003cc 	andi	r3,r4,15
   4c2b8:	00800304 	movi	r2,12
   4c2bc:	10c06f36 	bltu	r2,r3,4c47c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   4c2c0:	180690ba 	slli	r3,r3,2
   4c2c4:	02000174 	movhi	r8,5
   4c2c8:	4230b604 	addi	r8,r8,-15656
   4c2cc:	1a07883a 	add	r3,r3,r8
   4c2d0:	18800017 	ldw	r2,0(r3)
   4c2d4:	1000683a 	jmp	r2
   4c2d8:	0004c30c 	andi	zero,zero,4876
   4c2dc:	0004c428 	cmpgeui	zero,zero,4880
   4c2e0:	0004c464 	muli	zero,zero,4881
   4c2e4:	0004c30c 	andi	zero,zero,4876
   4c2e8:	0004c370 	cmpltui	zero,zero,4877
   4c2ec:	0004c3c4 	movi	zero,4879
   4c2f0:	0004c47c 	xorhi	zero,zero,4881
   4c2f4:	0004c47c 	xorhi	zero,zero,4881
   4c2f8:	0004c47c 	xorhi	zero,zero,4881
   4c2fc:	0004c3d0 	cmplti	zero,zero,4879
   4c300:	0004c3a0 	cmpeqi	zero,zero,4878
   4c304:	0004c30c 	andi	zero,zero,4876
   4c308:	0004c370 	cmpltui	zero,zero,4877
   4c30c:	30800043 	ldbu	r2,1(r6)
   4c310:	30c00083 	ldbu	r3,2(r6)
   4c314:	324000c3 	ldbu	r9,3(r6)
   4c318:	32000003 	ldbu	r8,0(r6)
   4c31c:	1004923a 	slli	r2,r2,8
   4c320:	1806943a 	slli	r3,r3,16
   4c324:	4812963a 	slli	r9,r9,24
   4c328:	1204b03a 	or	r2,r2,r8
   4c32c:	1884b03a 	or	r2,r3,r2
   4c330:	4886b03a 	or	r3,r9,r2
   4c334:	30800104 	addi	r2,r6,4
   4c338:	18000926 	beq	r3,zero,4c360 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   4c33c:	22001c0c 	andi	r8,r4,112
   4c340:	02400404 	movi	r9,16
   4c344:	42405726 	beq	r8,r9,4c4a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
   4c348:	21003fcc 	andi	r4,r4,255
   4c34c:	2100201c 	xori	r4,r4,128
   4c350:	213fe004 	addi	r4,r4,-128
   4c354:	1947883a 	add	r3,r3,r5
   4c358:	2000010e 	bge	r4,zero,4c360 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   4c35c:	18c00017 	ldw	r3,0(r3)
   4c360:	38c00015 	stw	r3,0(r7)
   4c364:	dfc00017 	ldw	ra,0(sp)
   4c368:	dec00104 	addi	sp,sp,4
   4c36c:	f800283a 	ret
   4c370:	30800043 	ldbu	r2,1(r6)
   4c374:	30c00083 	ldbu	r3,2(r6)
   4c378:	324000c3 	ldbu	r9,3(r6)
   4c37c:	32000003 	ldbu	r8,0(r6)
   4c380:	1004923a 	slli	r2,r2,8
   4c384:	1806943a 	slli	r3,r3,16
   4c388:	4812963a 	slli	r9,r9,24
   4c38c:	1204b03a 	or	r2,r2,r8
   4c390:	1884b03a 	or	r2,r3,r2
   4c394:	4886b03a 	or	r3,r9,r2
   4c398:	30800204 	addi	r2,r6,8
   4c39c:	003fe606 	br	4c338 <__alt_data_end+0xfffcc338>
   4c3a0:	30c00043 	ldbu	r3,1(r6)
   4c3a4:	32000003 	ldbu	r8,0(r6)
   4c3a8:	30800084 	addi	r2,r6,2
   4c3ac:	1806923a 	slli	r3,r3,8
   4c3b0:	1a06b03a 	or	r3,r3,r8
   4c3b4:	18ffffcc 	andi	r3,r3,65535
   4c3b8:	18e0001c 	xori	r3,r3,32768
   4c3bc:	18e00004 	addi	r3,r3,-32768
   4c3c0:	003fdd06 	br	4c338 <__alt_data_end+0xfffcc338>
   4c3c4:	30c00003 	ldbu	r3,0(r6)
   4c3c8:	30800044 	addi	r2,r6,1
   4c3cc:	003fda06 	br	4c338 <__alt_data_end+0xfffcc338>
   4c3d0:	3017883a 	mov	r11,r6
   4c3d4:	0007883a 	mov	r3,zero
   4c3d8:	0013883a 	mov	r9,zero
   4c3dc:	5a800003 	ldbu	r10,0(r11)
   4c3e0:	58800044 	addi	r2,r11,1
   4c3e4:	1017883a 	mov	r11,r2
   4c3e8:	52001fcc 	andi	r8,r10,127
   4c3ec:	4250983a 	sll	r8,r8,r9
   4c3f0:	53003fcc 	andi	r12,r10,255
   4c3f4:	6300201c 	xori	r12,r12,128
   4c3f8:	633fe004 	addi	r12,r12,-128
   4c3fc:	1a06b03a 	or	r3,r3,r8
   4c400:	4a4001c4 	addi	r9,r9,7
   4c404:	603ff516 	blt	r12,zero,4c3dc <__alt_data_end+0xfffcc3dc>
   4c408:	020007c4 	movi	r8,31
   4c40c:	427fca36 	bltu	r8,r9,4c338 <__alt_data_end+0xfffcc338>
   4c410:	5280100c 	andi	r10,r10,64
   4c414:	503fc826 	beq	r10,zero,4c338 <__alt_data_end+0xfffcc338>
   4c418:	023fffc4 	movi	r8,-1
   4c41c:	4252983a 	sll	r9,r8,r9
   4c420:	1a46b03a 	or	r3,r3,r9
   4c424:	003fc506 	br	4c33c <__alt_data_end+0xfffcc33c>
   4c428:	3017883a 	mov	r11,r6
   4c42c:	0007883a 	mov	r3,zero
   4c430:	0015883a 	mov	r10,zero
   4c434:	5a000003 	ldbu	r8,0(r11)
   4c438:	58800044 	addi	r2,r11,1
   4c43c:	1017883a 	mov	r11,r2
   4c440:	42401fcc 	andi	r9,r8,127
   4c444:	4a92983a 	sll	r9,r9,r10
   4c448:	42003fcc 	andi	r8,r8,255
   4c44c:	4200201c 	xori	r8,r8,128
   4c450:	423fe004 	addi	r8,r8,-128
   4c454:	1a46b03a 	or	r3,r3,r9
   4c458:	528001c4 	addi	r10,r10,7
   4c45c:	403ff516 	blt	r8,zero,4c434 <__alt_data_end+0xfffcc434>
   4c460:	003fb506 	br	4c338 <__alt_data_end+0xfffcc338>
   4c464:	30c00043 	ldbu	r3,1(r6)
   4c468:	32000003 	ldbu	r8,0(r6)
   4c46c:	30800084 	addi	r2,r6,2
   4c470:	1806923a 	slli	r3,r3,8
   4c474:	1a06b03a 	or	r3,r3,r8
   4c478:	003faf06 	br	4c338 <__alt_data_end+0xfffcc338>
   4c47c:	004f5bc0 	call	4f5bc <abort>
   4c480:	308000c4 	addi	r2,r6,3
   4c484:	00ffff04 	movi	r3,-4
   4c488:	10c4703a 	and	r2,r2,r3
   4c48c:	10c00017 	ldw	r3,0(r2)
   4c490:	10800104 	addi	r2,r2,4
   4c494:	38c00015 	stw	r3,0(r7)
   4c498:	dfc00017 	ldw	ra,0(sp)
   4c49c:	dec00104 	addi	sp,sp,4
   4c4a0:	f800283a 	ret
   4c4a4:	300b883a 	mov	r5,r6
   4c4a8:	003fa706 	br	4c348 <__alt_data_end+0xfffcc348>

0004c4ac <_ZL15get_ttype_entryP16lsda_header_infom>:
   4c4ac:	defffc04 	addi	sp,sp,-16
   4c4b0:	dfc00315 	stw	ra,12(sp)
   4c4b4:	dc000215 	stw	r16,8(sp)
   4c4b8:	2021883a 	mov	r16,r4
   4c4bc:	21000503 	ldbu	r4,20(r4)
   4c4c0:	d9400115 	stw	r5,4(sp)
   4c4c4:	004c1fc0 	call	4c1fc <_ZL21size_of_encoded_valueh>
   4c4c8:	d9400117 	ldw	r5,4(sp)
   4c4cc:	1009883a 	mov	r4,r2
   4c4d0:	004dab40 	call	4dab4 <__mulsi3>
   4c4d4:	81800317 	ldw	r6,12(r16)
   4c4d8:	81400217 	ldw	r5,8(r16)
   4c4dc:	81000503 	ldbu	r4,20(r16)
   4c4e0:	d80f883a 	mov	r7,sp
   4c4e4:	308dc83a 	sub	r6,r6,r2
   4c4e8:	004c2a00 	call	4c2a0 <_ZL28read_encoded_value_with_basehjPKhPj>
   4c4ec:	d8800017 	ldw	r2,0(sp)
   4c4f0:	dfc00317 	ldw	ra,12(sp)
   4c4f4:	dc000217 	ldw	r16,8(sp)
   4c4f8:	dec00404 	addi	sp,sp,16
   4c4fc:	f800283a 	ret

0004c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   4c500:	deffff04 	addi	sp,sp,-4
   4c504:	dfc00015 	stw	ra,0(sp)
   4c508:	20c03fcc 	andi	r3,r4,255
   4c50c:	00803fc4 	movi	r2,255
   4c510:	18800e26 	beq	r3,r2,4c54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   4c514:	20801c0c 	andi	r2,r4,112
   4c518:	00c00804 	movi	r3,32
   4c51c:	10c01726 	beq	r2,r3,4c57c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
   4c520:	18800e2e 	bgeu	r3,r2,4c55c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   4c524:	00c01004 	movi	r3,64
   4c528:	10c01026 	beq	r2,r3,4c56c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   4c52c:	00c01404 	movi	r3,80
   4c530:	10c00626 	beq	r2,r3,4c54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   4c534:	00c00c04 	movi	r3,48
   4c538:	10c00b1e 	bne	r2,r3,4c568 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   4c53c:	2809883a 	mov	r4,r5
   4c540:	dfc00017 	ldw	ra,0(sp)
   4c544:	dec00104 	addi	sp,sp,4
   4c548:	004f3181 	jmpi	4f318 <_Unwind_GetDataRelBase>
   4c54c:	0005883a 	mov	r2,zero
   4c550:	dfc00017 	ldw	ra,0(sp)
   4c554:	dec00104 	addi	sp,sp,4
   4c558:	f800283a 	ret
   4c55c:	103ffb26 	beq	r2,zero,4c54c <__alt_data_end+0xfffcc54c>
   4c560:	00c00404 	movi	r3,16
   4c564:	10fff926 	beq	r2,r3,4c54c <__alt_data_end+0xfffcc54c>
   4c568:	004f5bc0 	call	4f5bc <abort>
   4c56c:	2809883a 	mov	r4,r5
   4c570:	dfc00017 	ldw	ra,0(sp)
   4c574:	dec00104 	addi	sp,sp,4
   4c578:	004f3081 	jmpi	4f308 <_Unwind_GetRegionStart>
   4c57c:	2809883a 	mov	r4,r5
   4c580:	dfc00017 	ldw	ra,0(sp)
   4c584:	dec00104 	addi	sp,sp,4
   4c588:	004f3201 	jmpi	4f320 <_Unwind_GetTextRelBase>

0004c58c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   4c58c:	defffb04 	addi	sp,sp,-20
   4c590:	dcc00315 	stw	r19,12(sp)
   4c594:	dc400115 	stw	r17,4(sp)
   4c598:	dc000015 	stw	r16,0(sp)
   4c59c:	dfc00415 	stw	ra,16(sp)
   4c5a0:	dc800215 	stw	r18,8(sp)
   4c5a4:	2027883a 	mov	r19,r4
   4c5a8:	2821883a 	mov	r16,r5
   4c5ac:	3023883a 	mov	r17,r6
   4c5b0:	20003f26 	beq	r4,zero,4c6b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   4c5b4:	004f3080 	call	4f308 <_Unwind_GetRegionStart>
   4c5b8:	88800015 	stw	r2,0(r17)
   4c5bc:	84800003 	ldbu	r18,0(r16)
   4c5c0:	00c03fc4 	movi	r3,255
   4c5c4:	84000044 	addi	r16,r16,1
   4c5c8:	90c03726 	beq	r18,r3,4c6a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   4c5cc:	980b883a 	mov	r5,r19
   4c5d0:	9009883a 	mov	r4,r18
   4c5d4:	004c5000 	call	4c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   4c5d8:	800d883a 	mov	r6,r16
   4c5dc:	89c00104 	addi	r7,r17,4
   4c5e0:	100b883a 	mov	r5,r2
   4c5e4:	9009883a 	mov	r4,r18
   4c5e8:	004c2a00 	call	4c2a0 <_ZL28read_encoded_value_with_basehjPKhPj>
   4c5ec:	1021883a 	mov	r16,r2
   4c5f0:	80c00003 	ldbu	r3,0(r16)
   4c5f4:	01003fc4 	movi	r4,255
   4c5f8:	80800044 	addi	r2,r16,1
   4c5fc:	88c00505 	stb	r3,20(r17)
   4c600:	18c03fcc 	andi	r3,r3,255
   4c604:	19002c26 	beq	r3,r4,4c6b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   4c608:	100f883a 	mov	r7,r2
   4c60c:	000d883a 	mov	r6,zero
   4c610:	000b883a 	mov	r5,zero
   4c614:	38c00003 	ldbu	r3,0(r7)
   4c618:	10800044 	addi	r2,r2,1
   4c61c:	100f883a 	mov	r7,r2
   4c620:	19001fcc 	andi	r4,r3,127
   4c624:	2148983a 	sll	r4,r4,r5
   4c628:	18c03fcc 	andi	r3,r3,255
   4c62c:	18c0201c 	xori	r3,r3,128
   4c630:	18ffe004 	addi	r3,r3,-128
   4c634:	310cb03a 	or	r6,r6,r4
   4c638:	294001c4 	addi	r5,r5,7
   4c63c:	183ff516 	blt	r3,zero,4c614 <__alt_data_end+0xfffcc614>
   4c640:	118d883a 	add	r6,r2,r6
   4c644:	89800315 	stw	r6,12(r17)
   4c648:	10c00003 	ldbu	r3,0(r2)
   4c64c:	000d883a 	mov	r6,zero
   4c650:	10800044 	addi	r2,r2,1
   4c654:	88c00545 	stb	r3,21(r17)
   4c658:	000b883a 	mov	r5,zero
   4c65c:	10c00003 	ldbu	r3,0(r2)
   4c660:	10800044 	addi	r2,r2,1
   4c664:	19001fcc 	andi	r4,r3,127
   4c668:	2148983a 	sll	r4,r4,r5
   4c66c:	18c03fcc 	andi	r3,r3,255
   4c670:	18c0201c 	xori	r3,r3,128
   4c674:	18ffe004 	addi	r3,r3,-128
   4c678:	310cb03a 	or	r6,r6,r4
   4c67c:	294001c4 	addi	r5,r5,7
   4c680:	183ff616 	blt	r3,zero,4c65c <__alt_data_end+0xfffcc65c>
   4c684:	118d883a 	add	r6,r2,r6
   4c688:	89800415 	stw	r6,16(r17)
   4c68c:	dfc00417 	ldw	ra,16(sp)
   4c690:	dcc00317 	ldw	r19,12(sp)
   4c694:	dc800217 	ldw	r18,8(sp)
   4c698:	dc400117 	ldw	r17,4(sp)
   4c69c:	dc000017 	ldw	r16,0(sp)
   4c6a0:	dec00504 	addi	sp,sp,20
   4c6a4:	f800283a 	ret
   4c6a8:	88800115 	stw	r2,4(r17)
   4c6ac:	003fd006 	br	4c5f0 <__alt_data_end+0xfffcc5f0>
   4c6b0:	0005883a 	mov	r2,zero
   4c6b4:	003fc006 	br	4c5b8 <__alt_data_end+0xfffcc5b8>
   4c6b8:	88000315 	stw	zero,12(r17)
   4c6bc:	003fe206 	br	4c648 <__alt_data_end+0xfffcc648>

0004c6c0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
   4c6c0:	28800017 	ldw	r2,0(r5)
   4c6c4:	30c00017 	ldw	r3,0(r6)
   4c6c8:	defffb04 	addi	sp,sp,-20
   4c6cc:	10800217 	ldw	r2,8(r2)
   4c6d0:	dc400315 	stw	r17,12(sp)
   4c6d4:	dc000215 	stw	r16,8(sp)
   4c6d8:	d9400115 	stw	r5,4(sp)
   4c6dc:	dfc00415 	stw	ra,16(sp)
   4c6e0:	2021883a 	mov	r16,r4
   4c6e4:	d8c00015 	stw	r3,0(sp)
   4c6e8:	2809883a 	mov	r4,r5
   4c6ec:	3023883a 	mov	r17,r6
   4c6f0:	103ee83a 	callr	r2
   4c6f4:	10803fcc 	andi	r2,r2,255
   4c6f8:	d9400117 	ldw	r5,4(sp)
   4c6fc:	10000326 	beq	r2,zero,4c70c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
   4c700:	d8800017 	ldw	r2,0(sp)
   4c704:	10800017 	ldw	r2,0(r2)
   4c708:	d8800015 	stw	r2,0(sp)
   4c70c:	80800017 	ldw	r2,0(r16)
   4c710:	01c00044 	movi	r7,1
   4c714:	d80d883a 	mov	r6,sp
   4c718:	10800417 	ldw	r2,16(r2)
   4c71c:	8009883a 	mov	r4,r16
   4c720:	103ee83a 	callr	r2
   4c724:	10c03fcc 	andi	r3,r2,255
   4c728:	18000226 	beq	r3,zero,4c734 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
   4c72c:	d8c00017 	ldw	r3,0(sp)
   4c730:	88c00015 	stw	r3,0(r17)
   4c734:	dfc00417 	ldw	ra,16(sp)
   4c738:	dc400317 	ldw	r17,12(sp)
   4c73c:	dc000217 	ldw	r16,8(sp)
   4c740:	dec00504 	addi	sp,sp,20
   4c744:	f800283a 	ret

0004c748 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   4c748:	defff304 	addi	sp,sp,-52
   4c74c:	dc800615 	stw	r18,24(sp)
   4c750:	3825d23a 	srai	r18,r7,8
   4c754:	dd000815 	stw	r20,32(sp)
   4c758:	dcc00715 	stw	r19,28(sp)
   4c75c:	dfc00c15 	stw	ra,48(sp)
   4c760:	ddc00b15 	stw	r23,44(sp)
   4c764:	dd800a15 	stw	r22,40(sp)
   4c768:	dd400915 	stw	r21,36(sp)
   4c76c:	dc400515 	stw	r17,20(sp)
   4c770:	dc000415 	stw	r16,16(sp)
   4c774:	d9400215 	stw	r5,8(sp)
   4c778:	3827883a 	mov	r19,r7
   4c77c:	2029883a 	mov	r20,r4
   4c780:	9000010e 	bge	r18,zero,4c788 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
   4c784:	04a5c83a 	sub	r18,zero,r18
   4c788:	000b883a 	mov	r5,zero
   4c78c:	01000144 	movi	r4,5
   4c790:	d9800315 	stw	r6,12(sp)
   4c794:	004c5000 	call	4c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   4c798:	d9800317 	ldw	r6,12(sp)
   4c79c:	d9c00104 	addi	r7,sp,4
   4c7a0:	100b883a 	mov	r5,r2
   4c7a4:	01000144 	movi	r4,5
   4c7a8:	004c2a00 	call	4c2a0 <_ZL28read_encoded_value_with_basehjPKhPj>
   4c7ac:	017ffe44 	movi	r5,-7
   4c7b0:	1009883a 	mov	r4,r2
   4c7b4:	1021883a 	mov	r16,r2
   4c7b8:	004dab40 	call	4dab4 <__mulsi3>
   4c7bc:	102d883a 	mov	r22,r2
   4c7c0:	0023883a 	mov	r17,zero
   4c7c4:	85400003 	ldbu	r21,0(r16)
   4c7c8:	8009883a 	mov	r4,r16
   4c7cc:	014001c4 	movi	r5,7
   4c7d0:	004dab40 	call	4dab4 <__mulsi3>
   4c7d4:	a8c01fcc 	andi	r3,r21,127
   4c7d8:	1585883a 	add	r2,r2,r22
   4c7dc:	1886983a 	sll	r3,r3,r2
   4c7e0:	ad403fcc 	andi	r21,r21,255
   4c7e4:	ad40201c 	xori	r21,r21,128
   4c7e8:	ad7fe004 	addi	r21,r21,-128
   4c7ec:	84000044 	addi	r16,r16,1
   4c7f0:	88e2b03a 	or	r17,r17,r3
   4c7f4:	a83ff316 	blt	r21,zero,4c7c4 <__alt_data_end+0xfffcc7c4>
   4c7f8:	8461883a 	add	r16,r16,r17
   4c7fc:	017ffe44 	movi	r5,-7
   4c800:	8009883a 	mov	r4,r16
   4c804:	004dab40 	call	4dab4 <__mulsi3>
   4c808:	102d883a 	mov	r22,r2
   4c80c:	002b883a 	mov	r21,zero
   4c810:	84400003 	ldbu	r17,0(r16)
   4c814:	8009883a 	mov	r4,r16
   4c818:	014001c4 	movi	r5,7
   4c81c:	004dab40 	call	4dab4 <__mulsi3>
   4c820:	88c01fcc 	andi	r3,r17,127
   4c824:	1585883a 	add	r2,r2,r22
   4c828:	1886983a 	sll	r3,r3,r2
   4c82c:	8c403fcc 	andi	r17,r17,255
   4c830:	8c40201c 	xori	r17,r17,128
   4c834:	8c7fe004 	addi	r17,r17,-128
   4c838:	84000044 	addi	r16,r16,1
   4c83c:	a8eab03a 	or	r21,r21,r3
   4c840:	883ff316 	blt	r17,zero,4c810 <__alt_data_end+0xfffcc810>
   4c844:	94403fcc 	andi	r17,r18,255
   4c848:	8c7fffc4 	addi	r17,r17,-1
   4c84c:	8463883a 	add	r17,r16,r17
   4c850:	ad4000c4 	addi	r21,r21,3
   4c854:	00bfff04 	movi	r2,-4
   4c858:	ac21883a 	add	r16,r21,r16
   4c85c:	017ffe44 	movi	r5,-7
   4c860:	8809883a 	mov	r4,r17
   4c864:	80a0703a 	and	r16,r16,r2
   4c868:	004dab40 	call	4dab4 <__mulsi3>
   4c86c:	0025883a 	mov	r18,zero
   4c870:	102f883a 	mov	r23,r2
   4c874:	8d800003 	ldbu	r22,0(r17)
   4c878:	8809883a 	mov	r4,r17
   4c87c:	014001c4 	movi	r5,7
   4c880:	004dab40 	call	4dab4 <__mulsi3>
   4c884:	b0c01fcc 	andi	r3,r22,127
   4c888:	15c5883a 	add	r2,r2,r23
   4c88c:	1886983a 	sll	r3,r3,r2
   4c890:	b5803fcc 	andi	r22,r22,255
   4c894:	b580201c 	xori	r22,r22,128
   4c898:	8d400044 	addi	r21,r17,1
   4c89c:	b5bfe004 	addi	r22,r22,-128
   4c8a0:	90e4b03a 	or	r18,r18,r3
   4c8a4:	a823883a 	mov	r17,r21
   4c8a8:	b03ff216 	blt	r22,zero,4c874 <__alt_data_end+0xfffcc874>
   4c8ac:	9cc03fcc 	andi	r19,r19,255
   4c8b0:	90002426 	beq	r18,zero,4c944 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
   4c8b4:	9809883a 	mov	r4,r19
   4c8b8:	004c1fc0 	call	4c1fc <_ZL21size_of_encoded_valueh>
   4c8bc:	100b883a 	mov	r5,r2
   4c8c0:	913fffc4 	addi	r4,r18,-1
   4c8c4:	004dab40 	call	4dab4 <__mulsi3>
   4c8c8:	d9400d17 	ldw	r5,52(sp)
   4c8cc:	d80f883a 	mov	r7,sp
   4c8d0:	9809883a 	mov	r4,r19
   4c8d4:	140d883a 	add	r6,r2,r16
   4c8d8:	004c2a00 	call	4c2a0 <_ZL28read_encoded_value_with_basehjPKhPj>
   4c8dc:	d9000017 	ldw	r4,0(sp)
   4c8e0:	d9800204 	addi	r6,sp,8
   4c8e4:	a00b883a 	mov	r5,r20
   4c8e8:	004c6c00 	call	4c6c0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   4c8ec:	10c03fcc 	andi	r3,r2,255
   4c8f0:	1800151e 	bne	r3,zero,4c948 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
   4c8f4:	a809883a 	mov	r4,r21
   4c8f8:	017ffe44 	movi	r5,-7
   4c8fc:	004dab40 	call	4dab4 <__mulsi3>
   4c900:	102d883a 	mov	r22,r2
   4c904:	a809883a 	mov	r4,r21
   4c908:	0025883a 	mov	r18,zero
   4c90c:	24400003 	ldbu	r17,0(r4)
   4c910:	014001c4 	movi	r5,7
   4c914:	004dab40 	call	4dab4 <__mulsi3>
   4c918:	88c01fcc 	andi	r3,r17,127
   4c91c:	1585883a 	add	r2,r2,r22
   4c920:	1886983a 	sll	r3,r3,r2
   4c924:	8c403fcc 	andi	r17,r17,255
   4c928:	8c40201c 	xori	r17,r17,128
   4c92c:	ad400044 	addi	r21,r21,1
   4c930:	8c7fe004 	addi	r17,r17,-128
   4c934:	90e4b03a 	or	r18,r18,r3
   4c938:	a809883a 	mov	r4,r21
   4c93c:	883ff316 	blt	r17,zero,4c90c <__alt_data_end+0xfffcc90c>
   4c940:	003fdb06 	br	4c8b0 <__alt_data_end+0xfffcc8b0>
   4c944:	0005883a 	mov	r2,zero
   4c948:	dfc00c17 	ldw	ra,48(sp)
   4c94c:	ddc00b17 	ldw	r23,44(sp)
   4c950:	dd800a17 	ldw	r22,40(sp)
   4c954:	dd400917 	ldw	r21,36(sp)
   4c958:	dd000817 	ldw	r20,32(sp)
   4c95c:	dcc00717 	ldw	r19,28(sp)
   4c960:	dc800617 	ldw	r18,24(sp)
   4c964:	dc400517 	ldw	r17,20(sp)
   4c968:	dc000417 	ldw	r16,16(sp)
   4c96c:	dec00d04 	addi	sp,sp,52
   4c970:	f800283a 	ret

0004c974 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   4c974:	defffb04 	addi	sp,sp,-20
   4c978:	dc000115 	stw	r16,4(sp)
   4c97c:	24000317 	ldw	r16,12(r4)
   4c980:	01ce303a 	nor	r7,zero,r7
   4c984:	dc800315 	stw	r18,12(sp)
   4c988:	dc400215 	stw	r17,8(sp)
   4c98c:	dfc00415 	stw	ra,16(sp)
   4c990:	2023883a 	mov	r17,r4
   4c994:	2825883a 	mov	r18,r5
   4c998:	d9800015 	stw	r6,0(sp)
   4c99c:	81e1883a 	add	r16,r16,r7
   4c9a0:	800d883a 	mov	r6,r16
   4c9a4:	000b883a 	mov	r5,zero
   4c9a8:	0009883a 	mov	r4,zero
   4c9ac:	30800003 	ldbu	r2,0(r6)
   4c9b0:	84000044 	addi	r16,r16,1
   4c9b4:	800d883a 	mov	r6,r16
   4c9b8:	10c01fcc 	andi	r3,r2,127
   4c9bc:	1906983a 	sll	r3,r3,r4
   4c9c0:	10803fcc 	andi	r2,r2,255
   4c9c4:	1080201c 	xori	r2,r2,128
   4c9c8:	10bfe004 	addi	r2,r2,-128
   4c9cc:	28cab03a 	or	r5,r5,r3
   4c9d0:	210001c4 	addi	r4,r4,7
   4c9d4:	103ff516 	blt	r2,zero,4c9ac <__alt_data_end+0xfffcc9ac>
   4c9d8:	28000e26 	beq	r5,zero,4ca14 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   4c9dc:	8809883a 	mov	r4,r17
   4c9e0:	004c4ac0 	call	4c4ac <_ZL15get_ttype_entryP16lsda_header_infom>
   4c9e4:	d80d883a 	mov	r6,sp
   4c9e8:	900b883a 	mov	r5,r18
   4c9ec:	1009883a 	mov	r4,r2
   4c9f0:	004c6c00 	call	4c6c0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   4c9f4:	10c03fcc 	andi	r3,r2,255
   4c9f8:	183fe926 	beq	r3,zero,4c9a0 <__alt_data_end+0xfffcc9a0>
   4c9fc:	dfc00417 	ldw	ra,16(sp)
   4ca00:	dc800317 	ldw	r18,12(sp)
   4ca04:	dc400217 	ldw	r17,8(sp)
   4ca08:	dc000117 	ldw	r16,4(sp)
   4ca0c:	dec00504 	addi	sp,sp,20
   4ca10:	f800283a 	ret
   4ca14:	0005883a 	mov	r2,zero
   4ca18:	003ff806 	br	4c9fc <__alt_data_end+0xfffcc9fc>

0004ca1c <__gxx_personality_sj0>:
   4ca1c:	00800174 	movhi	r2,5
   4ca20:	deffdd04 	addi	sp,sp,-140
   4ca24:	10b28704 	addi	r2,r2,-13796
   4ca28:	d8800e15 	stw	r2,56(sp)
   4ca2c:	008001b4 	movhi	r2,6
   4ca30:	10933604 	addi	r2,r2,19672
   4ca34:	d8800f15 	stw	r2,60(sp)
   4ca38:	00800174 	movhi	r2,5
   4ca3c:	10b3fd04 	addi	r2,r2,-12300
   4ca40:	d9001515 	stw	r4,84(sp)
   4ca44:	d9000804 	addi	r4,sp,32
   4ca48:	d8801115 	stw	r2,68(sp)
   4ca4c:	dfc02215 	stw	ra,136(sp)
   4ca50:	df002115 	stw	fp,132(sp)
   4ca54:	dec01015 	stw	sp,64(sp)
   4ca58:	dec01215 	stw	sp,72(sp)
   4ca5c:	d9401915 	stw	r5,100(sp)
   4ca60:	d9801615 	stw	r6,88(sp)
   4ca64:	d9c01715 	stw	r7,92(sp)
   4ca68:	004f2400 	call	4f240 <_Unwind_SjLj_Register>
   4ca6c:	d8c01517 	ldw	r3,84(sp)
   4ca70:	d8000715 	stw	zero,28(sp)
   4ca74:	d8000615 	stw	zero,24(sp)
   4ca78:	00800044 	movi	r2,1
   4ca7c:	18800926 	beq	r3,r2,4caa4 <__gxx_personality_sj0+0x88>
   4ca80:	01c000c4 	movi	r7,3
   4ca84:	d9c01515 	stw	r7,84(sp)
   4ca88:	d9000804 	addi	r4,sp,32
   4ca8c:	004f2580 	call	4f258 <_Unwind_SjLj_Unregister>
   4ca90:	d8801517 	ldw	r2,84(sp)
   4ca94:	dfc02217 	ldw	ra,136(sp)
   4ca98:	df002117 	ldw	fp,132(sp)
   4ca9c:	dec02304 	addi	sp,sp,140
   4caa0:	f800283a 	ret
   4caa4:	d9001617 	ldw	r4,88(sp)
   4caa8:	00af3574 	movhi	r2,48341
   4caac:	d9c01717 	ldw	r7,92(sp)
   4cab0:	10b54004 	addi	r2,r2,-11008
   4cab4:	00ee2cb4 	movhi	r3,47282
   4cab8:	2085883a 	add	r2,r4,r2
   4cabc:	18eaaf04 	addi	r3,r3,-21828
   4cac0:	d8801b15 	stw	r2,108(sp)
   4cac4:	38c7883a 	add	r3,r7,r3
   4cac8:	1105803a 	cmpltu	r2,r2,r4
   4cacc:	10c7883a 	add	r3,r2,r3
   4cad0:	d8c01c15 	stw	r3,112(sp)
   4cad4:	d8c01917 	ldw	r3,100(sp)
   4cad8:	00800184 	movi	r2,6
   4cadc:	18805426 	beq	r3,r2,4cc30 <__gxx_personality_sj0+0x214>
   4cae0:	d9002417 	ldw	r4,144(sp)
   4cae4:	00bfffc4 	movi	r2,-1
   4cae8:	d8800915 	stw	r2,36(sp)
   4caec:	004f2fc0 	call	4f2fc <_Unwind_GetLanguageSpecificData>
   4caf0:	d8801a15 	stw	r2,104(sp)
   4caf4:	1000c926 	beq	r2,zero,4ce1c <__gxx_personality_sj0+0x400>
   4caf8:	d9002417 	ldw	r4,144(sp)
   4cafc:	d80d883a 	mov	r6,sp
   4cb00:	100b883a 	mov	r5,r2
   4cb04:	004c58c0 	call	4c58c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4cb08:	d9402417 	ldw	r5,144(sp)
   4cb0c:	d9000503 	ldbu	r4,20(sp)
   4cb10:	d8801515 	stw	r2,84(sp)
   4cb14:	004c5000 	call	4c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   4cb18:	d9002417 	ldw	r4,144(sp)
   4cb1c:	d9400604 	addi	r5,sp,24
   4cb20:	d8800215 	stw	r2,8(sp)
   4cb24:	004f2cc0 	call	4f2cc <_Unwind_GetIPInfo>
   4cb28:	d8c00617 	ldw	r3,24(sp)
   4cb2c:	18006126 	beq	r3,zero,4ccb4 <__gxx_personality_sj0+0x298>
   4cb30:	1000ba16 	blt	r2,zero,4ce1c <__gxx_personality_sj0+0x400>
   4cb34:	10002f1e 	bne	r2,zero,4cbf4 <__gxx_personality_sj0+0x1d8>
   4cb38:	d8001515 	stw	zero,84(sp)
   4cb3c:	d8001f15 	stw	zero,124(sp)
   4cb40:	d8001815 	stw	zero,96(sp)
   4cb44:	00c00044 	movi	r3,1
   4cb48:	d9001917 	ldw	r4,100(sp)
   4cb4c:	2080004c 	andi	r2,r4,1
   4cb50:	1000b51e 	bne	r2,zero,4ce28 <__gxx_personality_sj0+0x40c>
   4cb54:	d9001917 	ldw	r4,100(sp)
   4cb58:	2080020c 	andi	r2,r4,8
   4cb5c:	1000b71e 	bne	r2,zero,4ce3c <__gxx_personality_sj0+0x420>
   4cb60:	d9c01c17 	ldw	r7,112(sp)
   4cb64:	3800b826 	beq	r7,zero,4ce48 <__gxx_personality_sj0+0x42c>
   4cb68:	00800044 	movi	r2,1
   4cb6c:	1880b526 	beq	r3,r2,4ce44 <__gxx_personality_sj0+0x428>
   4cb70:	d9c01517 	ldw	r7,84(sp)
   4cb74:	3800f516 	blt	r7,zero,4cf4c <__gxx_personality_sj0+0x530>
   4cb78:	d9002417 	ldw	r4,144(sp)
   4cb7c:	d9802317 	ldw	r6,140(sp)
   4cb80:	00bfffc4 	movi	r2,-1
   4cb84:	000b883a 	mov	r5,zero
   4cb88:	d8800915 	stw	r2,36(sp)
   4cb8c:	004f2a00 	call	4f2a0 <_Unwind_SetGR>
   4cb90:	d9801517 	ldw	r6,84(sp)
   4cb94:	d9002417 	ldw	r4,144(sp)
   4cb98:	01400044 	movi	r5,1
   4cb9c:	004f2a00 	call	4f2a0 <_Unwind_SetGR>
   4cba0:	d9002417 	ldw	r4,144(sp)
   4cba4:	d9401f17 	ldw	r5,124(sp)
   4cba8:	004f2ec0 	call	4f2ec <_Unwind_SetIP>
   4cbac:	010001c4 	movi	r4,7
   4cbb0:	d9001515 	stw	r4,84(sp)
   4cbb4:	003fb406 	br	4ca88 <__alt_data_end+0xfffcca88>
   4cbb8:	000f883a 	mov	r7,zero
   4cbbc:	000d883a 	mov	r6,zero
   4cbc0:	19000003 	ldbu	r4,0(r3)
   4cbc4:	18c00044 	addi	r3,r3,1
   4cbc8:	d8c01515 	stw	r3,84(sp)
   4cbcc:	21401fcc 	andi	r5,r4,127
   4cbd0:	298a983a 	sll	r5,r5,r6
   4cbd4:	21003fcc 	andi	r4,r4,255
   4cbd8:	2100201c 	xori	r4,r4,128
   4cbdc:	213fe004 	addi	r4,r4,-128
   4cbe0:	394eb03a 	or	r7,r7,r5
   4cbe4:	318001c4 	addi	r6,r6,7
   4cbe8:	203ff516 	blt	r4,zero,4cbc0 <__alt_data_end+0xfffccbc0>
   4cbec:	10bfffc4 	addi	r2,r2,-1
   4cbf0:	10003226 	beq	r2,zero,4ccbc <__gxx_personality_sj0+0x2a0>
   4cbf4:	d9c01517 	ldw	r7,84(sp)
   4cbf8:	0011883a 	mov	r8,zero
   4cbfc:	000d883a 	mov	r6,zero
   4cc00:	39000003 	ldbu	r4,0(r7)
   4cc04:	38c00044 	addi	r3,r7,1
   4cc08:	180f883a 	mov	r7,r3
   4cc0c:	21401fcc 	andi	r5,r4,127
   4cc10:	298a983a 	sll	r5,r5,r6
   4cc14:	21003fcc 	andi	r4,r4,255
   4cc18:	2100201c 	xori	r4,r4,128
   4cc1c:	213fe004 	addi	r4,r4,-128
   4cc20:	4150b03a 	or	r8,r8,r5
   4cc24:	318001c4 	addi	r6,r6,7
   4cc28:	203ff516 	blt	r4,zero,4cc00 <__alt_data_end+0xfffccc00>
   4cc2c:	003fe206 	br	4cbb8 <__alt_data_end+0xfffccbb8>
   4cc30:	d9001c17 	ldw	r4,112(sp)
   4cc34:	203faa1e 	bne	r4,zero,4cae0 <__alt_data_end+0xfffccae0>
   4cc38:	d9c01517 	ldw	r7,84(sp)
   4cc3c:	d8801b17 	ldw	r2,108(sp)
   4cc40:	38bfa736 	bltu	r7,r2,4cae0 <__alt_data_end+0xfffccae0>
   4cc44:	d8c02317 	ldw	r3,140(sp)
   4cc48:	18fffe17 	ldw	r3,-8(r3)
   4cc4c:	d8c01f15 	stw	r3,124(sp)
   4cc50:	18008226 	beq	r3,zero,4ce5c <__gxx_personality_sj0+0x440>
   4cc54:	d9002317 	ldw	r4,140(sp)
   4cc58:	d9c02317 	ldw	r7,140(sp)
   4cc5c:	213ffb17 	ldw	r4,-20(r4)
   4cc60:	39fffd17 	ldw	r7,-12(r7)
   4cc64:	d9001515 	stw	r4,84(sp)
   4cc68:	d9c01a15 	stw	r7,104(sp)
   4cc6c:	d8801517 	ldw	r2,84(sp)
   4cc70:	103fc10e 	bge	r2,zero,4cb78 <__alt_data_end+0xfffccb78>
   4cc74:	d9002417 	ldw	r4,144(sp)
   4cc78:	d9401a17 	ldw	r5,104(sp)
   4cc7c:	d80d883a 	mov	r6,sp
   4cc80:	00bfffc4 	movi	r2,-1
   4cc84:	d8800915 	stw	r2,36(sp)
   4cc88:	004c58c0 	call	4c58c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4cc8c:	d9402417 	ldw	r5,144(sp)
   4cc90:	d9000503 	ldbu	r4,20(sp)
   4cc94:	004c5000 	call	4c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   4cc98:	d9000503 	ldbu	r4,20(sp)
   4cc9c:	d9402417 	ldw	r5,144(sp)
   4cca0:	d8800215 	stw	r2,8(sp)
   4cca4:	004c5000 	call	4c500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   4cca8:	d8c02317 	ldw	r3,140(sp)
   4ccac:	18bffe15 	stw	r2,-8(r3)
   4ccb0:	003fb106 	br	4cb78 <__alt_data_end+0xfffccb78>
   4ccb4:	10bfffc4 	addi	r2,r2,-1
   4ccb8:	003f9d06 	br	4cb30 <__alt_data_end+0xfffccb30>
   4ccbc:	42000044 	addi	r8,r8,1
   4ccc0:	da001f15 	stw	r8,124(sp)
   4ccc4:	38005326 	beq	r7,zero,4ce14 <__gxx_personality_sj0+0x3f8>
   4ccc8:	d8800417 	ldw	r2,16(sp)
   4cccc:	39ffffc4 	addi	r7,r7,-1
   4ccd0:	11c5883a 	add	r2,r2,r7
   4ccd4:	d8801815 	stw	r2,96(sp)
   4ccd8:	40005026 	beq	r8,zero,4ce1c <__gxx_personality_sj0+0x400>
   4ccdc:	10007426 	beq	r2,zero,4ceb0 <__gxx_personality_sj0+0x494>
   4cce0:	d8801917 	ldw	r2,100(sp)
   4cce4:	1080020c 	andi	r2,r2,8
   4cce8:	d8802015 	stw	r2,128(sp)
   4ccec:	1000a21e 	bne	r2,zero,4cf78 <__gxx_personality_sj0+0x55c>
   4ccf0:	d8c01c17 	ldw	r3,112(sp)
   4ccf4:	1800b026 	beq	r3,zero,4cfb8 <__gxx_personality_sj0+0x59c>
   4ccf8:	01c001f4 	movhi	r7,7
   4ccfc:	39fb7004 	addi	r7,r7,-4672
   4cd00:	d9c01e15 	stw	r7,120(sp)
   4cd04:	d8001d05 	stb	zero,116(sp)
   4cd08:	d8c01817 	ldw	r3,96(sp)
   4cd0c:	d8001515 	stw	zero,84(sp)
   4cd10:	0009883a 	mov	r4,zero
   4cd14:	19400003 	ldbu	r5,0(r3)
   4cd18:	18800044 	addi	r2,r3,1
   4cd1c:	d9c01517 	ldw	r7,84(sp)
   4cd20:	28c01fcc 	andi	r3,r5,127
   4cd24:	1906983a 	sll	r3,r3,r4
   4cd28:	29803fcc 	andi	r6,r5,255
   4cd2c:	3180201c 	xori	r6,r6,128
   4cd30:	38ceb03a 	or	r7,r7,r3
   4cd34:	d8801715 	stw	r2,92(sp)
   4cd38:	31bfe004 	addi	r6,r6,-128
   4cd3c:	d9c01515 	stw	r7,84(sp)
   4cd40:	210001c4 	addi	r4,r4,7
   4cd44:	1007883a 	mov	r3,r2
   4cd48:	303ff216 	blt	r6,zero,4cd14 <__alt_data_end+0xfffccd14>
   4cd4c:	00c007c4 	movi	r3,31
   4cd50:	19000836 	bltu	r3,r4,4cd74 <__gxx_personality_sj0+0x358>
   4cd54:	2940100c 	andi	r5,r5,64
   4cd58:	28000626 	beq	r5,zero,4cd74 <__gxx_personality_sj0+0x358>
   4cd5c:	01c00044 	movi	r7,1
   4cd60:	3908983a 	sll	r4,r7,r4
   4cd64:	d8c01517 	ldw	r3,84(sp)
   4cd68:	0109c83a 	sub	r4,zero,r4
   4cd6c:	1906b03a 	or	r3,r3,r4
   4cd70:	d8c01515 	stw	r3,84(sp)
   4cd74:	d8001615 	stw	zero,88(sp)
   4cd78:	0009883a 	mov	r4,zero
   4cd7c:	11400003 	ldbu	r5,0(r2)
   4cd80:	d9c01617 	ldw	r7,88(sp)
   4cd84:	10800044 	addi	r2,r2,1
   4cd88:	28c01fcc 	andi	r3,r5,127
   4cd8c:	1906983a 	sll	r3,r3,r4
   4cd90:	29803fcc 	andi	r6,r5,255
   4cd94:	3180201c 	xori	r6,r6,128
   4cd98:	38ceb03a 	or	r7,r7,r3
   4cd9c:	31bfe004 	addi	r6,r6,-128
   4cda0:	d9c01615 	stw	r7,88(sp)
   4cda4:	210001c4 	addi	r4,r4,7
   4cda8:	303ff416 	blt	r6,zero,4cd7c <__alt_data_end+0xfffccd7c>
   4cdac:	008007c4 	movi	r2,31
   4cdb0:	11000736 	bltu	r2,r4,4cdd0 <__gxx_personality_sj0+0x3b4>
   4cdb4:	2940100c 	andi	r5,r5,64
   4cdb8:	28000526 	beq	r5,zero,4cdd0 <__gxx_personality_sj0+0x3b4>
   4cdbc:	00c00044 	movi	r3,1
   4cdc0:	1908983a 	sll	r4,r3,r4
   4cdc4:	0109c83a 	sub	r4,zero,r4
   4cdc8:	390eb03a 	or	r7,r7,r4
   4cdcc:	d9c01615 	stw	r7,88(sp)
   4cdd0:	d9001517 	ldw	r4,84(sp)
   4cdd4:	20003c26 	beq	r4,zero,4cec8 <__gxx_personality_sj0+0x4ac>
   4cdd8:	01003e0e 	bge	zero,r4,4ced4 <__gxx_personality_sj0+0x4b8>
   4cddc:	01ffffc4 	movi	r7,-1
   4cde0:	200b883a 	mov	r5,r4
   4cde4:	d809883a 	mov	r4,sp
   4cde8:	d9c00915 	stw	r7,36(sp)
   4cdec:	004c4ac0 	call	4c4ac <_ZL15get_ttype_entryP16lsda_header_infom>
   4cdf0:	10005f26 	beq	r2,zero,4cf70 <__gxx_personality_sj0+0x554>
   4cdf4:	d8c01e17 	ldw	r3,120(sp)
   4cdf8:	1800571e 	bne	r3,zero,4cf58 <__gxx_personality_sj0+0x53c>
   4cdfc:	d9001617 	ldw	r4,88(sp)
   4ce00:	20002926 	beq	r4,zero,4cea8 <__gxx_personality_sj0+0x48c>
   4ce04:	d9c01717 	ldw	r7,92(sp)
   4ce08:	390f883a 	add	r7,r7,r4
   4ce0c:	d9c01815 	stw	r7,96(sp)
   4ce10:	003fbd06 	br	4cd08 <__alt_data_end+0xfffccd08>
   4ce14:	d8c01f17 	ldw	r3,124(sp)
   4ce18:	1800251e 	bne	r3,zero,4ceb0 <__gxx_personality_sj0+0x494>
   4ce1c:	01000204 	movi	r4,8
   4ce20:	d9001515 	stw	r4,84(sp)
   4ce24:	003f1806 	br	4ca88 <__alt_data_end+0xfffcca88>
   4ce28:	d8801c17 	ldw	r2,112(sp)
   4ce2c:	10000d26 	beq	r2,zero,4ce64 <__gxx_personality_sj0+0x448>
   4ce30:	00800184 	movi	r2,6
   4ce34:	d8801515 	stw	r2,84(sp)
   4ce38:	003f1306 	br	4ca88 <__alt_data_end+0xfffcca88>
   4ce3c:	00800044 	movi	r2,1
   4ce40:	18bf4d1e 	bne	r3,r2,4cb78 <__alt_data_end+0xfffccb78>
   4ce44:	004c1740 	call	4c174 <_ZSt9terminatev>
   4ce48:	d9001b17 	ldw	r4,108(sp)
   4ce4c:	00800044 	movi	r2,1
   4ce50:	113f4536 	bltu	r2,r4,4cb68 <__alt_data_end+0xfffccb68>
   4ce54:	00800044 	movi	r2,1
   4ce58:	18bf841e 	bne	r3,r2,4cc6c <__alt_data_end+0xfffccc6c>
   4ce5c:	d9002317 	ldw	r4,140(sp)
   4ce60:	004d7f80 	call	4d7f8 <__cxa_call_terminate>
   4ce64:	d8c01b17 	ldw	r3,108(sp)
   4ce68:	00800044 	movi	r2,1
   4ce6c:	10fff036 	bltu	r2,r3,4ce30 <__alt_data_end+0xfffcce30>
   4ce70:	d9002317 	ldw	r4,140(sp)
   4ce74:	d8801817 	ldw	r2,96(sp)
   4ce78:	d9c01517 	ldw	r7,84(sp)
   4ce7c:	d8c01a17 	ldw	r3,104(sp)
   4ce80:	20bffc15 	stw	r2,-16(r4)
   4ce84:	d8800717 	ldw	r2,28(sp)
   4ce88:	21fffb15 	stw	r7,-20(r4)
   4ce8c:	d9c01f17 	ldw	r7,124(sp)
   4ce90:	20bfff15 	stw	r2,-4(r4)
   4ce94:	00800184 	movi	r2,6
   4ce98:	20fffd15 	stw	r3,-12(r4)
   4ce9c:	21fffe15 	stw	r7,-8(r4)
   4cea0:	d8801515 	stw	r2,84(sp)
   4cea4:	003ef806 	br	4ca88 <__alt_data_end+0xfffcca88>
   4cea8:	d8801d03 	ldbu	r2,116(sp)
   4ceac:	103fdb26 	beq	r2,zero,4ce1c <__alt_data_end+0xfffcce1c>
   4ceb0:	d8c01917 	ldw	r3,100(sp)
   4ceb4:	1880004c 	andi	r2,r3,1
   4ceb8:	103fd81e 	bne	r2,zero,4ce1c <__alt_data_end+0xfffcce1c>
   4cebc:	d8001515 	stw	zero,84(sp)
   4cec0:	00c00084 	movi	r3,2
   4cec4:	003f2306 	br	4cb54 <__alt_data_end+0xfffccb54>
   4cec8:	00c00044 	movi	r3,1
   4cecc:	d8c01d05 	stb	r3,116(sp)
   4ced0:	003fca06 	br	4cdfc <__alt_data_end+0xfffccdfc>
   4ced4:	d9001e17 	ldw	r4,120(sp)
   4ced8:	20000426 	beq	r4,zero,4ceec <__gxx_personality_sj0+0x4d0>
   4cedc:	d9c02017 	ldw	r7,128(sp)
   4cee0:	3800021e 	bne	r7,zero,4ceec <__gxx_personality_sj0+0x4d0>
   4cee4:	d8801c17 	ldw	r2,112(sp)
   4cee8:	10002726 	beq	r2,zero,4cf88 <__gxx_personality_sj0+0x56c>
   4ceec:	d8801517 	ldw	r2,84(sp)
   4cef0:	000d883a 	mov	r6,zero
   4cef4:	000b883a 	mov	r5,zero
   4cef8:	0088303a 	nor	r4,zero,r2
   4cefc:	d8800317 	ldw	r2,12(sp)
   4cf00:	1109883a 	add	r4,r2,r4
   4cf04:	20800003 	ldbu	r2,0(r4)
   4cf08:	21000044 	addi	r4,r4,1
   4cf0c:	10c01fcc 	andi	r3,r2,127
   4cf10:	1946983a 	sll	r3,r3,r5
   4cf14:	10803fcc 	andi	r2,r2,255
   4cf18:	1080201c 	xori	r2,r2,128
   4cf1c:	10bfe004 	addi	r2,r2,-128
   4cf20:	30ccb03a 	or	r6,r6,r3
   4cf24:	294001c4 	addi	r5,r5,7
   4cf28:	103ff616 	blt	r2,zero,4cf04 <__alt_data_end+0xfffccf04>
   4cf2c:	3005003a 	cmpeq	r2,r6,zero
   4cf30:	10803fcc 	andi	r2,r2,255
   4cf34:	103fb126 	beq	r2,zero,4cdfc <__alt_data_end+0xfffccdfc>
   4cf38:	d9c01917 	ldw	r7,100(sp)
   4cf3c:	3880004c 	andi	r2,r7,1
   4cf40:	103fb91e 	bne	r2,zero,4ce28 <__alt_data_end+0xfffcce28>
   4cf44:	d8802017 	ldw	r2,128(sp)
   4cf48:	10002d26 	beq	r2,zero,4d000 <__gxx_personality_sj0+0x5e4>
   4cf4c:	00800044 	movi	r2,1
   4cf50:	d8800915 	stw	r2,36(sp)
   4cf54:	004c19c0 	call	4c19c <_ZSt10unexpectedv>
   4cf58:	d9800704 	addi	r6,sp,28
   4cf5c:	180b883a 	mov	r5,r3
   4cf60:	1009883a 	mov	r4,r2
   4cf64:	004c6c00 	call	4c6c0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   4cf68:	10803fcc 	andi	r2,r2,255
   4cf6c:	103fa326 	beq	r2,zero,4cdfc <__alt_data_end+0xfffccdfc>
   4cf70:	00c000c4 	movi	r3,3
   4cf74:	003ef406 	br	4cb48 <__alt_data_end+0xfffccb48>
   4cf78:	010001f4 	movhi	r4,7
   4cf7c:	213b6e04 	addi	r4,r4,-4680
   4cf80:	d9001e15 	stw	r4,120(sp)
   4cf84:	003f5f06 	br	4cd04 <__alt_data_end+0xfffccd04>
   4cf88:	d9001b17 	ldw	r4,108(sp)
   4cf8c:	00c00044 	movi	r3,1
   4cf90:	193fd636 	bltu	r3,r4,4ceec <__alt_data_end+0xfffcceec>
   4cf94:	01ffffc4 	movi	r7,-1
   4cf98:	d9c00915 	stw	r7,36(sp)
   4cf9c:	d9800717 	ldw	r6,28(sp)
   4cfa0:	d9c01517 	ldw	r7,84(sp)
   4cfa4:	d9401e17 	ldw	r5,120(sp)
   4cfa8:	d809883a 	mov	r4,sp
   4cfac:	004c9740 	call	4c974 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   4cfb0:	1080005c 	xori	r2,r2,1
   4cfb4:	003fde06 	br	4cf30 <__alt_data_end+0xfffccf30>
   4cfb8:	d9001b17 	ldw	r4,108(sp)
   4cfbc:	00800044 	movi	r2,1
   4cfc0:	113f4d36 	bltu	r2,r4,4ccf8 <__alt_data_end+0xfffcccf8>
   4cfc4:	d9c02317 	ldw	r7,140(sp)
   4cfc8:	38800017 	ldw	r2,0(r7)
   4cfcc:	1080004c 	andi	r2,r2,1
   4cfd0:	1000061e 	bne	r2,zero,4cfec <__gxx_personality_sj0+0x5d0>
   4cfd4:	d8c02317 	ldw	r3,140(sp)
   4cfd8:	18800504 	addi	r2,r3,20
   4cfdc:	d8800715 	stw	r2,28(sp)
   4cfe0:	10bff017 	ldw	r2,-64(r2)
   4cfe4:	d8801e15 	stw	r2,120(sp)
   4cfe8:	003f4606 	br	4cd04 <__alt_data_end+0xfffccd04>
   4cfec:	38bff517 	ldw	r2,-44(r7)
   4cff0:	003ffa06 	br	4cfdc <__alt_data_end+0xfffccfdc>
   4cff4:	d9000a17 	ldw	r4,40(sp)
   4cff8:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4cffc:	003f9106 	br	4ce44 <__alt_data_end+0xfffcce44>
   4d000:	d9c01c17 	ldw	r7,112(sp)
   4d004:	383eda1e 	bne	r7,zero,4cb70 <__alt_data_end+0xfffccb70>
   4d008:	d8c01b17 	ldw	r3,108(sp)
   4d00c:	00800044 	movi	r2,1
   4d010:	10fed736 	bltu	r2,r3,4cb70 <__alt_data_end+0xfffccb70>
   4d014:	00c000c4 	movi	r3,3
   4d018:	003f8e06 	br	4ce54 <__alt_data_end+0xfffcce54>

0004d01c <__cxa_call_unexpected>:
   4d01c:	00800174 	movhi	r2,5
   4d020:	deffe604 	addi	sp,sp,-104
   4d024:	10b28704 	addi	r2,r2,-13796
   4d028:	d8800d15 	stw	r2,52(sp)
   4d02c:	008001b4 	movhi	r2,6
   4d030:	10933a04 	addi	r2,r2,19688
   4d034:	d8800e15 	stw	r2,56(sp)
   4d038:	d8800104 	addi	r2,sp,4
   4d03c:	d8800f15 	stw	r2,60(sp)
   4d040:	00800174 	movhi	r2,5
   4d044:	10b42a04 	addi	r2,r2,-12120
   4d048:	d9001415 	stw	r4,80(sp)
   4d04c:	d9000704 	addi	r4,sp,28
   4d050:	dfc01915 	stw	ra,100(sp)
   4d054:	d8801015 	stw	r2,64(sp)
   4d058:	df001815 	stw	fp,96(sp)
   4d05c:	dec01115 	stw	sp,68(sp)
   4d060:	004f2400 	call	4f240 <_Unwind_SjLj_Register>
   4d064:	d9001417 	ldw	r4,80(sp)
   4d068:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4d06c:	d8c01417 	ldw	r3,80(sp)
   4d070:	18bffe17 	ldw	r2,-8(r3)
   4d074:	193ff717 	ldw	r4,-36(r3)
   4d078:	18fffd17 	ldw	r3,-12(r3)
   4d07c:	d8800315 	stw	r2,12(sp)
   4d080:	d8c01615 	stw	r3,88(sp)
   4d084:	d8c01417 	ldw	r3,80(sp)
   4d088:	18fffb17 	ldw	r3,-20(r3)
   4d08c:	d8c01515 	stw	r3,84(sp)
   4d090:	d8c01417 	ldw	r3,80(sp)
   4d094:	18fff817 	ldw	r3,-32(r3)
   4d098:	d8c01415 	stw	r3,80(sp)
   4d09c:	00c00044 	movi	r3,1
   4d0a0:	d8c00815 	stw	r3,32(sp)
   4d0a4:	004c18c0 	call	4c18c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   4d0a8:	d8c00917 	ldw	r3,36(sp)
   4d0ac:	d8800817 	ldw	r2,32(sp)
   4d0b0:	d8c01715 	stw	r3,92(sp)
   4d0b4:	10000a26 	beq	r2,zero,4d0e0 <__cxa_call_unexpected+0xc4>
   4d0b8:	10bfffc4 	addi	r2,r2,-1
   4d0bc:	10000126 	beq	r2,zero,4d0c4 <__cxa_call_unexpected+0xa8>
   4d0c0:	003b68fa 	trap	3
   4d0c4:	d8000815 	stw	zero,32(sp)
   4d0c8:	004d4600 	call	4d460 <__cxa_end_catch>
   4d0cc:	004d4600 	call	4d460 <__cxa_end_catch>
   4d0d0:	d9001717 	ldw	r4,92(sp)
   4d0d4:	00bfffc4 	movi	r2,-1
   4d0d8:	d8800815 	stw	r2,32(sp)
   4d0dc:	004f43c0 	call	4f43c <_Unwind_SjLj_Resume>
   4d0e0:	d9001717 	ldw	r4,92(sp)
   4d0e4:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4d0e8:	004d8500 	call	4d850 <__cxa_get_globals_fast>
   4d0ec:	10800017 	ldw	r2,0(r2)
   4d0f0:	10c00b17 	ldw	r3,44(r2)
   4d0f4:	18c0004c 	andi	r3,r3,1
   4d0f8:	18001e26 	beq	r3,zero,4d174 <__cxa_call_unexpected+0x158>
   4d0fc:	10800017 	ldw	r2,0(r2)
   4d100:	d8801715 	stw	r2,92(sp)
   4d104:	d8801517 	ldw	r2,84(sp)
   4d108:	00802b0e 	bge	zero,r2,4d1b8 <__cxa_call_unexpected+0x19c>
   4d10c:	d8c01717 	ldw	r3,92(sp)
   4d110:	d8800317 	ldw	r2,12(sp)
   4d114:	d9c01517 	ldw	r7,84(sp)
   4d118:	193ff017 	ldw	r4,-64(r3)
   4d11c:	d9801617 	ldw	r6,88(sp)
   4d120:	d8800015 	stw	r2,0(sp)
   4d124:	180b883a 	mov	r5,r3
   4d128:	00800084 	movi	r2,2
   4d12c:	d8800815 	stw	r2,32(sp)
   4d130:	004c7480 	call	4c748 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   4d134:	10803fcc 	andi	r2,r2,255
   4d138:	10001e1e 	bne	r2,zero,4d1b4 <__cxa_call_unexpected+0x198>
   4d13c:	d8800317 	ldw	r2,12(sp)
   4d140:	d9c01517 	ldw	r7,84(sp)
   4d144:	d9801617 	ldw	r6,88(sp)
   4d148:	010001f4 	movhi	r4,7
   4d14c:	d8800015 	stw	r2,0(sp)
   4d150:	212e0604 	addi	r4,r4,-18408
   4d154:	00800084 	movi	r2,2
   4d158:	000b883a 	mov	r5,zero
   4d15c:	d8800815 	stw	r2,32(sp)
   4d160:	004c7480 	call	4c748 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   4d164:	10803fcc 	andi	r2,r2,255
   4d168:	1000051e 	bne	r2,zero,4d180 <__cxa_call_unexpected+0x164>
   4d16c:	d9001417 	ldw	r4,80(sp)
   4d170:	004c0b40 	call	4c0b4 <_ZN10__cxxabiv111__terminateEPFvvE>
   4d174:	10801004 	addi	r2,r2,64
   4d178:	d8801715 	stw	r2,92(sp)
   4d17c:	003fe106 	br	4d104 <__alt_data_end+0xfffcd104>
   4d180:	01000104 	movi	r4,4
   4d184:	004d6940 	call	4d694 <__cxa_allocate_exception>
   4d188:	00c001f4 	movhi	r3,7
   4d18c:	18ee2104 	addi	r3,r3,-18300
   4d190:	01800174 	movhi	r6,5
   4d194:	014001f4 	movhi	r5,7
   4d198:	10c00015 	stw	r3,0(r2)
   4d19c:	31b61b04 	addi	r6,r6,-10132
   4d1a0:	00c00084 	movi	r3,2
   4d1a4:	296e0604 	addi	r5,r5,-18408
   4d1a8:	1009883a 	mov	r4,r2
   4d1ac:	d8c00815 	stw	r3,32(sp)
   4d1b0:	004d2900 	call	4d290 <__cxa_throw>
   4d1b4:	004d3200 	call	4d320 <__cxa_rethrow>
   4d1b8:	d9401617 	ldw	r5,88(sp)
   4d1bc:	00800084 	movi	r2,2
   4d1c0:	d9800104 	addi	r6,sp,4
   4d1c4:	0009883a 	mov	r4,zero
   4d1c8:	d8800815 	stw	r2,32(sp)
   4d1cc:	004c58c0 	call	4c58c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4d1d0:	d9801717 	ldw	r6,92(sp)
   4d1d4:	d9c01517 	ldw	r7,84(sp)
   4d1d8:	d9000104 	addi	r4,sp,4
   4d1dc:	317ff017 	ldw	r5,-64(r6)
   4d1e0:	004c9740 	call	4c974 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   4d1e4:	10803fcc 	andi	r2,r2,255
   4d1e8:	1000171e 	bne	r2,zero,4d248 <__cxa_call_unexpected+0x22c>
   4d1ec:	d9c01517 	ldw	r7,84(sp)
   4d1f0:	014001f4 	movhi	r5,7
   4d1f4:	00800084 	movi	r2,2
   4d1f8:	296e0604 	addi	r5,r5,-18408
   4d1fc:	000d883a 	mov	r6,zero
   4d200:	d9000104 	addi	r4,sp,4
   4d204:	d8800815 	stw	r2,32(sp)
   4d208:	004c9740 	call	4c974 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   4d20c:	10803fcc 	andi	r2,r2,255
   4d210:	103fd626 	beq	r2,zero,4d16c <__alt_data_end+0xfffcd16c>
   4d214:	01000104 	movi	r4,4
   4d218:	004d6940 	call	4d694 <__cxa_allocate_exception>
   4d21c:	00c001f4 	movhi	r3,7
   4d220:	18ee2104 	addi	r3,r3,-18300
   4d224:	01800174 	movhi	r6,5
   4d228:	014001f4 	movhi	r5,7
   4d22c:	10c00015 	stw	r3,0(r2)
   4d230:	31b61b04 	addi	r6,r6,-10132
   4d234:	00c00084 	movi	r3,2
   4d238:	296e0604 	addi	r5,r5,-18408
   4d23c:	1009883a 	mov	r4,r2
   4d240:	d8c00815 	stw	r3,32(sp)
   4d244:	004d2900 	call	4d290 <__cxa_throw>
   4d248:	004d3200 	call	4d320 <__cxa_rethrow>

0004d24c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   4d24c:	defffe04 	addi	sp,sp,-8
   4d250:	dfc00115 	stw	ra,4(sp)
   4d254:	dc000015 	stw	r16,0(sp)
   4d258:	00800044 	movi	r2,1
   4d25c:	11000a36 	bltu	r2,r4,4d288 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   4d260:	28bff617 	ldw	r2,-40(r5)
   4d264:	2c000504 	addi	r16,r5,20
   4d268:	10000226 	beq	r2,zero,4d274 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   4d26c:	8009883a 	mov	r4,r16
   4d270:	103ee83a 	callr	r2
   4d274:	8009883a 	mov	r4,r16
   4d278:	dfc00117 	ldw	ra,4(sp)
   4d27c:	dc000017 	ldw	r16,0(sp)
   4d280:	dec00204 	addi	sp,sp,8
   4d284:	004d6f41 	jmpi	4d6f4 <__cxa_free_exception>
   4d288:	293ff817 	ldw	r4,-32(r5)
   4d28c:	004c0b40 	call	4c0b4 <_ZN10__cxxabiv111__terminateEPFvvE>

0004d290 <__cxa_throw>:
   4d290:	defffb04 	addi	sp,sp,-20
   4d294:	dfc00415 	stw	ra,16(sp)
   4d298:	dcc00315 	stw	r19,12(sp)
   4d29c:	dc800215 	stw	r18,8(sp)
   4d2a0:	2827883a 	mov	r19,r5
   4d2a4:	3025883a 	mov	r18,r6
   4d2a8:	dc400115 	stw	r17,4(sp)
   4d2ac:	dc000015 	stw	r16,0(sp)
   4d2b0:	2021883a 	mov	r16,r4
   4d2b4:	004d85c0 	call	4d85c <__cxa_get_globals>
   4d2b8:	10c00117 	ldw	r3,4(r2)
   4d2bc:	847ffb04 	addi	r17,r16,-20
   4d2c0:	18c00044 	addi	r3,r3,1
   4d2c4:	10c00115 	stw	r3,4(r2)
   4d2c8:	00800044 	movi	r2,1
   4d2cc:	80bfef15 	stw	r2,-68(r16)
   4d2d0:	84fff015 	stw	r19,-64(r16)
   4d2d4:	84bff115 	stw	r18,-60(r16)
   4d2d8:	004c1ec0 	call	4c1ec <_ZSt14get_unexpectedv>
   4d2dc:	80bff215 	stw	r2,-56(r16)
   4d2e0:	004c1c80 	call	4c1c8 <_ZSt13get_terminatev>
   4d2e4:	80bff315 	stw	r2,-52(r16)
   4d2e8:	0090caf4 	movhi	r2,17195
   4d2ec:	108ac004 	addi	r2,r2,11008
   4d2f0:	80bffb15 	stw	r2,-20(r16)
   4d2f4:	0091d3b4 	movhi	r2,18254
   4d2f8:	109550c4 	addi	r2,r2,21827
   4d2fc:	80bffc15 	stw	r2,-16(r16)
   4d300:	00800174 	movhi	r2,5
   4d304:	10b49304 	addi	r2,r2,-11700
   4d308:	8809883a 	mov	r4,r17
   4d30c:	80bffd15 	stw	r2,-12(r16)
   4d310:	004f3280 	call	4f328 <_Unwind_SjLj_RaiseException>
   4d314:	8809883a 	mov	r4,r17
   4d318:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4d31c:	004c1740 	call	4c174 <_ZSt9terminatev>

0004d320 <__cxa_rethrow>:
   4d320:	defffe04 	addi	sp,sp,-8
   4d324:	dfc00115 	stw	ra,4(sp)
   4d328:	dc000015 	stw	r16,0(sp)
   4d32c:	004d85c0 	call	4d85c <__cxa_get_globals>
   4d330:	10c00117 	ldw	r3,4(r2)
   4d334:	11000017 	ldw	r4,0(r2)
   4d338:	18c00044 	addi	r3,r3,1
   4d33c:	10c00115 	stw	r3,4(r2)
   4d340:	20001126 	beq	r4,zero,4d388 <__cxa_rethrow+0x68>
   4d344:	21400b17 	ldw	r5,44(r4)
   4d348:	01ef3574 	movhi	r7,48341
   4d34c:	39f54004 	addi	r7,r7,-11008
   4d350:	29cf883a 	add	r7,r5,r7
   4d354:	20c00c17 	ldw	r3,48(r4)
   4d358:	394d803a 	cmpltu	r6,r7,r5
   4d35c:	016e2cb4 	movhi	r5,47282
   4d360:	296aaf04 	addi	r5,r5,-21828
   4d364:	1947883a 	add	r3,r3,r5
   4d368:	30c7883a 	add	r3,r6,r3
   4d36c:	18000726 	beq	r3,zero,4d38c <__cxa_rethrow+0x6c>
   4d370:	10000015 	stw	zero,0(r2)
   4d374:	24000b04 	addi	r16,r4,44
   4d378:	8009883a 	mov	r4,r16
   4d37c:	004f4800 	call	4f480 <_Unwind_SjLj_Resume_or_Rethrow>
   4d380:	8009883a 	mov	r4,r16
   4d384:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4d388:	004c1740 	call	4c174 <_ZSt9terminatev>
   4d38c:	00c00044 	movi	r3,1
   4d390:	19fff736 	bltu	r3,r7,4d370 <__alt_data_end+0xfffcd370>
   4d394:	20800517 	ldw	r2,20(r4)
   4d398:	0085c83a 	sub	r2,zero,r2
   4d39c:	20800515 	stw	r2,20(r4)
   4d3a0:	003ff406 	br	4d374 <__alt_data_end+0xfffcd374>

0004d3a4 <__cxa_get_exception_ptr>:
   4d3a4:	20bfff17 	ldw	r2,-4(r4)
   4d3a8:	f800283a 	ret

0004d3ac <__cxa_begin_catch>:
   4d3ac:	defffe04 	addi	sp,sp,-8
   4d3b0:	dc000015 	stw	r16,0(sp)
   4d3b4:	dfc00115 	stw	ra,4(sp)
   4d3b8:	2021883a 	mov	r16,r4
   4d3bc:	004d85c0 	call	4d85c <__cxa_get_globals>
   4d3c0:	81000017 	ldw	r4,0(r16)
   4d3c4:	80c00117 	ldw	r3,4(r16)
   4d3c8:	01af3574 	movhi	r6,48341
   4d3cc:	31b54004 	addi	r6,r6,-11008
   4d3d0:	016e2cb4 	movhi	r5,47282
   4d3d4:	296aaf04 	addi	r5,r5,-21828
   4d3d8:	218d883a 	add	r6,r4,r6
   4d3dc:	3109803a 	cmpltu	r4,r6,r4
   4d3e0:	1947883a 	add	r3,r3,r5
   4d3e4:	20c7883a 	add	r3,r4,r3
   4d3e8:	817ff504 	addi	r5,r16,-44
   4d3ec:	11000017 	ldw	r4,0(r2)
   4d3f0:	18000726 	beq	r3,zero,4d410 <__cxa_begin_catch+0x64>
   4d3f4:	2000191e 	bne	r4,zero,4d45c <__cxa_begin_catch+0xb0>
   4d3f8:	11400015 	stw	r5,0(r2)
   4d3fc:	0005883a 	mov	r2,zero
   4d400:	dfc00117 	ldw	ra,4(sp)
   4d404:	dc000017 	ldw	r16,0(sp)
   4d408:	dec00204 	addi	sp,sp,8
   4d40c:	f800283a 	ret
   4d410:	01c00044 	movi	r7,1
   4d414:	39bff736 	bltu	r7,r6,4d3f4 <__alt_data_end+0xfffcd3f4>
   4d418:	80fffa17 	ldw	r3,-24(r16)
   4d41c:	18000d16 	blt	r3,zero,4d454 <__cxa_begin_catch+0xa8>
   4d420:	18c00044 	addi	r3,r3,1
   4d424:	11800117 	ldw	r6,4(r2)
   4d428:	80fffa15 	stw	r3,-24(r16)
   4d42c:	30ffffc4 	addi	r3,r6,-1
   4d430:	10c00115 	stw	r3,4(r2)
   4d434:	21400226 	beq	r4,r5,4d440 <__cxa_begin_catch+0x94>
   4d438:	813ff915 	stw	r4,-28(r16)
   4d43c:	11400015 	stw	r5,0(r2)
   4d440:	80bfff17 	ldw	r2,-4(r16)
   4d444:	dfc00117 	ldw	ra,4(sp)
   4d448:	dc000017 	ldw	r16,0(sp)
   4d44c:	dec00204 	addi	sp,sp,8
   4d450:	f800283a 	ret
   4d454:	38c7c83a 	sub	r3,r7,r3
   4d458:	003ff206 	br	4d424 <__alt_data_end+0xfffcd424>
   4d45c:	004c1740 	call	4c174 <_ZSt9terminatev>

0004d460 <__cxa_end_catch>:
   4d460:	deffff04 	addi	sp,sp,-4
   4d464:	dfc00015 	stw	ra,0(sp)
   4d468:	004d8500 	call	4d850 <__cxa_get_globals_fast>
   4d46c:	11000017 	ldw	r4,0(r2)
   4d470:	20001426 	beq	r4,zero,4d4c4 <__cxa_end_catch+0x64>
   4d474:	21400b17 	ldw	r5,44(r4)
   4d478:	01ef3574 	movhi	r7,48341
   4d47c:	39f54004 	addi	r7,r7,-11008
   4d480:	29cf883a 	add	r7,r5,r7
   4d484:	20c00c17 	ldw	r3,48(r4)
   4d488:	394d803a 	cmpltu	r6,r7,r5
   4d48c:	016e2cb4 	movhi	r5,47282
   4d490:	296aaf04 	addi	r5,r5,-21828
   4d494:	1947883a 	add	r3,r3,r5
   4d498:	30c7883a 	add	r3,r6,r3
   4d49c:	18000c1e 	bne	r3,zero,4d4d0 <__cxa_end_catch+0x70>
   4d4a0:	00c00044 	movi	r3,1
   4d4a4:	19c00a36 	bltu	r3,r7,4d4d0 <__cxa_end_catch+0x70>
   4d4a8:	20c00517 	ldw	r3,20(r4)
   4d4ac:	18000d16 	blt	r3,zero,4d4e4 <__cxa_end_catch+0x84>
   4d4b0:	18ffffc4 	addi	r3,r3,-1
   4d4b4:	18001026 	beq	r3,zero,4d4f8 <__cxa_end_catch+0x98>
   4d4b8:	00bfffc4 	movi	r2,-1
   4d4bc:	18801426 	beq	r3,r2,4d510 <__cxa_end_catch+0xb0>
   4d4c0:	20c00515 	stw	r3,20(r4)
   4d4c4:	dfc00017 	ldw	ra,0(sp)
   4d4c8:	dec00104 	addi	sp,sp,4
   4d4cc:	f800283a 	ret
   4d4d0:	21000b04 	addi	r4,r4,44
   4d4d4:	10000015 	stw	zero,0(r2)
   4d4d8:	dfc00017 	ldw	ra,0(sp)
   4d4dc:	dec00104 	addi	sp,sp,4
   4d4e0:	004f4cc1 	jmpi	4f4cc <_Unwind_DeleteException>
   4d4e4:	18c00044 	addi	r3,r3,1
   4d4e8:	183ff51e 	bne	r3,zero,4d4c0 <__alt_data_end+0xfffcd4c0>
   4d4ec:	21400417 	ldw	r5,16(r4)
   4d4f0:	11400015 	stw	r5,0(r2)
   4d4f4:	003ff206 	br	4d4c0 <__alt_data_end+0xfffcd4c0>
   4d4f8:	20c00417 	ldw	r3,16(r4)
   4d4fc:	21000b04 	addi	r4,r4,44
   4d500:	10c00015 	stw	r3,0(r2)
   4d504:	dfc00017 	ldw	ra,0(sp)
   4d508:	dec00104 	addi	sp,sp,4
   4d50c:	004f4cc1 	jmpi	4f4cc <_Unwind_DeleteException>
   4d510:	004c1740 	call	4c174 <_ZSt9terminatev>

0004d514 <_ZSt18uncaught_exceptionv>:
   4d514:	deffff04 	addi	sp,sp,-4
   4d518:	dfc00015 	stw	ra,0(sp)
   4d51c:	004d85c0 	call	4d85c <__cxa_get_globals>
   4d520:	10800117 	ldw	r2,4(r2)
   4d524:	1004c03a 	cmpne	r2,r2,zero
   4d528:	dfc00017 	ldw	ra,0(sp)
   4d52c:	dec00104 	addi	sp,sp,4
   4d530:	f800283a 	ret

0004d534 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   4d534:	018001f4 	movhi	r6,7
   4d538:	31886104 	addi	r6,r6,8580
   4d53c:	31400117 	ldw	r5,4(r6)
   4d540:	223fff04 	addi	r8,r4,-4
   4d544:	227fff17 	ldw	r9,-4(r4)
   4d548:	28001326 	beq	r5,zero,4d598 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
   4d54c:	424f883a 	add	r7,r8,r9
   4d550:	29c01426 	beq	r5,r7,4d5a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
   4d554:	28c00117 	ldw	r3,4(r5)
   4d558:	18001c26 	beq	r3,zero,4d5cc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
   4d55c:	38c00336 	bltu	r7,r3,4d56c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
   4d560:	00001e06 	br	4d5dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
   4d564:	3880052e 	bgeu	r7,r2,4d57c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
   4d568:	1007883a 	mov	r3,r2
   4d56c:	18800117 	ldw	r2,4(r3)
   4d570:	29800104 	addi	r6,r5,4
   4d574:	180b883a 	mov	r5,r3
   4d578:	103ffa1e 	bne	r2,zero,4d564 <__alt_data_end+0xfffcd564>
   4d57c:	19400017 	ldw	r5,0(r3)
   4d580:	194f883a 	add	r7,r3,r5
   4d584:	41c00e26 	beq	r8,r7,4d5c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
   4d588:	20800015 	stw	r2,0(r4)
   4d58c:	30800017 	ldw	r2,0(r6)
   4d590:	12000115 	stw	r8,4(r2)
   4d594:	f800283a 	ret
   4d598:	20000015 	stw	zero,0(r4)
   4d59c:	32000115 	stw	r8,4(r6)
   4d5a0:	f800283a 	ret
   4d5a4:	28c00017 	ldw	r3,0(r5)
   4d5a8:	28800117 	ldw	r2,4(r5)
   4d5ac:	1a53883a 	add	r9,r3,r9
   4d5b0:	227fff15 	stw	r9,-4(r4)
   4d5b4:	20800015 	stw	r2,0(r4)
   4d5b8:	32000115 	stw	r8,4(r6)
   4d5bc:	f800283a 	ret
   4d5c0:	494b883a 	add	r5,r9,r5
   4d5c4:	19400015 	stw	r5,0(r3)
   4d5c8:	f800283a 	ret
   4d5cc:	0005883a 	mov	r2,zero
   4d5d0:	2807883a 	mov	r3,r5
   4d5d4:	31800104 	addi	r6,r6,4
   4d5d8:	003fe806 	br	4d57c <__alt_data_end+0xfffcd57c>
   4d5dc:	1805883a 	mov	r2,r3
   4d5e0:	31800104 	addi	r6,r6,4
   4d5e4:	2807883a 	mov	r3,r5
   4d5e8:	003fe406 	br	4d57c <__alt_data_end+0xfffcd57c>

0004d5ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   4d5ec:	20800104 	addi	r2,r4,4
   4d5f0:	00c001c4 	movi	r3,7
   4d5f4:	1880112e 	bgeu	r3,r2,4d63c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   4d5f8:	20c9883a 	add	r4,r4,r3
   4d5fc:	00bfff04 	movi	r2,-4
   4d600:	208a703a 	and	r5,r4,r2
   4d604:	018001f4 	movhi	r6,7
   4d608:	31886104 	addi	r6,r6,8580
   4d60c:	30c00117 	ldw	r3,4(r6)
   4d610:	18000826 	beq	r3,zero,4d634 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   4d614:	19000017 	ldw	r4,0(r3)
   4d618:	21400436 	bltu	r4,r5,4d62c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
   4d61c:	00001a06 	br	4d688 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
   4d620:	11000017 	ldw	r4,0(r2)
   4d624:	2140072e 	bgeu	r4,r5,4d644 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   4d628:	1007883a 	mov	r3,r2
   4d62c:	18800117 	ldw	r2,4(r3)
   4d630:	103ffb1e 	bne	r2,zero,4d620 <__alt_data_end+0xfffcd620>
   4d634:	0005883a 	mov	r2,zero
   4d638:	f800283a 	ret
   4d63c:	01400204 	movi	r5,8
   4d640:	003ff006 	br	4d604 <__alt_data_end+0xfffcd604>
   4d644:	18c00104 	addi	r3,r3,4
   4d648:	2149c83a 	sub	r4,r4,r5
   4d64c:	018001c4 	movi	r6,7
   4d650:	3100092e 	bgeu	r6,r4,4d678 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
   4d654:	11c00117 	ldw	r7,4(r2)
   4d658:	114d883a 	add	r6,r2,r5
   4d65c:	31000015 	stw	r4,0(r6)
   4d660:	31c00115 	stw	r7,4(r6)
   4d664:	18800017 	ldw	r2,0(r3)
   4d668:	11400015 	stw	r5,0(r2)
   4d66c:	19800015 	stw	r6,0(r3)
   4d670:	10800104 	addi	r2,r2,4
   4d674:	f800283a 	ret
   4d678:	11000117 	ldw	r4,4(r2)
   4d67c:	10800104 	addi	r2,r2,4
   4d680:	19000015 	stw	r4,0(r3)
   4d684:	f800283a 	ret
   4d688:	1805883a 	mov	r2,r3
   4d68c:	30c00104 	addi	r3,r6,4
   4d690:	003fed06 	br	4d648 <__alt_data_end+0xfffcd648>

0004d694 <__cxa_allocate_exception>:
   4d694:	defffd04 	addi	sp,sp,-12
   4d698:	dc400115 	stw	r17,4(sp)
   4d69c:	24401104 	addi	r17,r4,68
   4d6a0:	8809883a 	mov	r4,r17
   4d6a4:	dc000015 	stw	r16,0(sp)
   4d6a8:	dfc00215 	stw	ra,8(sp)
   4d6ac:	004f6200 	call	4f620 <malloc>
   4d6b0:	1021883a 	mov	r16,r2
   4d6b4:	10000a26 	beq	r2,zero,4d6e0 <__cxa_allocate_exception+0x4c>
   4d6b8:	01801104 	movi	r6,68
   4d6bc:	000b883a 	mov	r5,zero
   4d6c0:	8009883a 	mov	r4,r16
   4d6c4:	004ff9c0 	call	4ff9c <memset>
   4d6c8:	80801104 	addi	r2,r16,68
   4d6cc:	dfc00217 	ldw	ra,8(sp)
   4d6d0:	dc400117 	ldw	r17,4(sp)
   4d6d4:	dc000017 	ldw	r16,0(sp)
   4d6d8:	dec00304 	addi	sp,sp,12
   4d6dc:	f800283a 	ret
   4d6e0:	8809883a 	mov	r4,r17
   4d6e4:	004d5ec0 	call	4d5ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   4d6e8:	1021883a 	mov	r16,r2
   4d6ec:	103ff21e 	bne	r2,zero,4d6b8 <__alt_data_end+0xfffcd6b8>
   4d6f0:	004c1740 	call	4c174 <_ZSt9terminatev>

0004d6f4 <__cxa_free_exception>:
   4d6f4:	00c001f4 	movhi	r3,7
   4d6f8:	18c86104 	addi	r3,r3,8580
   4d6fc:	18800217 	ldw	r2,8(r3)
   4d700:	213fef04 	addi	r4,r4,-68
   4d704:	1100042e 	bgeu	r2,r4,4d718 <__cxa_free_exception+0x24>
   4d708:	18c00317 	ldw	r3,12(r3)
   4d70c:	10c5883a 	add	r2,r2,r3
   4d710:	2080012e 	bgeu	r4,r2,4d718 <__cxa_free_exception+0x24>
   4d714:	004d5341 	jmpi	4d534 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   4d718:	004f6341 	jmpi	4f634 <free>

0004d71c <__cxa_allocate_dependent_exception>:
   4d71c:	defffe04 	addi	sp,sp,-8
   4d720:	01001004 	movi	r4,64
   4d724:	dc000015 	stw	r16,0(sp)
   4d728:	dfc00115 	stw	ra,4(sp)
   4d72c:	004f6200 	call	4f620 <malloc>
   4d730:	1021883a 	mov	r16,r2
   4d734:	10000926 	beq	r2,zero,4d75c <__cxa_allocate_dependent_exception+0x40>
   4d738:	01801004 	movi	r6,64
   4d73c:	000b883a 	mov	r5,zero
   4d740:	8009883a 	mov	r4,r16
   4d744:	004ff9c0 	call	4ff9c <memset>
   4d748:	8005883a 	mov	r2,r16
   4d74c:	dfc00117 	ldw	ra,4(sp)
   4d750:	dc000017 	ldw	r16,0(sp)
   4d754:	dec00204 	addi	sp,sp,8
   4d758:	f800283a 	ret
   4d75c:	01001004 	movi	r4,64
   4d760:	004d5ec0 	call	4d5ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   4d764:	1021883a 	mov	r16,r2
   4d768:	103ff31e 	bne	r2,zero,4d738 <__alt_data_end+0xfffcd738>
   4d76c:	004c1740 	call	4c174 <_ZSt9terminatev>

0004d770 <__cxa_free_dependent_exception>:
   4d770:	014001f4 	movhi	r5,7
   4d774:	29486104 	addi	r5,r5,8580
   4d778:	28c00217 	ldw	r3,8(r5)
   4d77c:	2005883a 	mov	r2,r4
   4d780:	1900042e 	bgeu	r3,r4,4d794 <__cxa_free_dependent_exception+0x24>
   4d784:	29400317 	ldw	r5,12(r5)
   4d788:	1947883a 	add	r3,r3,r5
   4d78c:	20c0012e 	bgeu	r4,r3,4d794 <__cxa_free_dependent_exception+0x24>
   4d790:	004d5341 	jmpi	4d534 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   4d794:	1009883a 	mov	r4,r2
   4d798:	004f6341 	jmpi	4f634 <free>

0004d79c <_GLOBAL__sub_I___cxa_allocate_exception>:
   4d79c:	defffd04 	addi	sp,sp,-12
   4d7a0:	dc400115 	stw	r17,4(sp)
   4d7a4:	dc000015 	stw	r16,0(sp)
   4d7a8:	04424004 	movi	r17,2304
   4d7ac:	040001f4 	movhi	r16,7
   4d7b0:	84086104 	addi	r16,r16,8580
   4d7b4:	8809883a 	mov	r4,r17
   4d7b8:	dfc00215 	stw	ra,8(sp)
   4d7bc:	84400315 	stw	r17,12(r16)
   4d7c0:	004f6200 	call	4f620 <malloc>
   4d7c4:	80800215 	stw	r2,8(r16)
   4d7c8:	10000826 	beq	r2,zero,4d7ec <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
   4d7cc:	80800115 	stw	r2,4(r16)
   4d7d0:	14400015 	stw	r17,0(r2)
   4d7d4:	10000115 	stw	zero,4(r2)
   4d7d8:	dfc00217 	ldw	ra,8(sp)
   4d7dc:	dc400117 	ldw	r17,4(sp)
   4d7e0:	dc000017 	ldw	r16,0(sp)
   4d7e4:	dec00304 	addi	sp,sp,12
   4d7e8:	f800283a 	ret
   4d7ec:	80000315 	stw	zero,12(r16)
   4d7f0:	80000115 	stw	zero,4(r16)
   4d7f4:	003ff806 	br	4d7d8 <__alt_data_end+0xfffcd7d8>

0004d7f8 <__cxa_call_terminate>:
   4d7f8:	defffe04 	addi	sp,sp,-8
   4d7fc:	dfc00115 	stw	ra,4(sp)
   4d800:	dc000015 	stw	r16,0(sp)
   4d804:	20000d26 	beq	r4,zero,4d83c <__cxa_call_terminate+0x44>
   4d808:	2021883a 	mov	r16,r4
   4d80c:	004d3ac0 	call	4d3ac <__cxa_begin_catch>
   4d810:	80c00017 	ldw	r3,0(r16)
   4d814:	016f3574 	movhi	r5,48341
   4d818:	29754004 	addi	r5,r5,-11008
   4d81c:	194b883a 	add	r5,r3,r5
   4d820:	80800117 	ldw	r2,4(r16)
   4d824:	28c9803a 	cmpltu	r4,r5,r3
   4d828:	00ee2cb4 	movhi	r3,47282
   4d82c:	18eaaf04 	addi	r3,r3,-21828
   4d830:	10c5883a 	add	r2,r2,r3
   4d834:	2085883a 	add	r2,r4,r2
   4d838:	10000126 	beq	r2,zero,4d840 <__cxa_call_terminate+0x48>
   4d83c:	004c1740 	call	4c174 <_ZSt9terminatev>
   4d840:	00800044 	movi	r2,1
   4d844:	117ffd36 	bltu	r2,r5,4d83c <__alt_data_end+0xfffcd83c>
   4d848:	813ff817 	ldw	r4,-32(r16)
   4d84c:	004c0b40 	call	4c0b4 <_ZN10__cxxabiv111__terminateEPFvvE>

0004d850 <__cxa_get_globals_fast>:
   4d850:	008001f4 	movhi	r2,7
   4d854:	10880804 	addi	r2,r2,8224
   4d858:	f800283a 	ret

0004d85c <__cxa_get_globals>:
   4d85c:	008001f4 	movhi	r2,7
   4d860:	10880804 	addi	r2,r2,8224
   4d864:	f800283a 	ret

0004d868 <_ZNSt9exceptionD1Ev>:
   4d868:	f800283a 	ret

0004d86c <_ZNSt13bad_exceptionD1Ev>:
   4d86c:	f800283a 	ret

0004d870 <_ZNKSt9exception4whatEv>:
   4d870:	008001f4 	movhi	r2,7
   4d874:	10adf404 	addi	r2,r2,-18480
   4d878:	f800283a 	ret

0004d87c <_ZNKSt13bad_exception4whatEv>:
   4d87c:	008001f4 	movhi	r2,7
   4d880:	10adf804 	addi	r2,r2,-18464
   4d884:	f800283a 	ret

0004d888 <_ZNSt9exceptionD0Ev>:
   4d888:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004d88c <_ZNSt13bad_exceptionD0Ev>:
   4d88c:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004d890 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   4d890:	f800283a 	ret

0004d894 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   4d894:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004d898 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   4d898:	f800283a 	ret

0004d89c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   4d89c:	004bda81 	jmpi	4bda8 <_ZdlPv>

0004d8a0 <__fixunssfsi>:
   4d8a0:	defffd04 	addi	sp,sp,-12
   4d8a4:	dc000015 	stw	r16,0(sp)
   4d8a8:	0413c034 	movhi	r16,20224
   4d8ac:	800b883a 	mov	r5,r16
   4d8b0:	dc400115 	stw	r17,4(sp)
   4d8b4:	dfc00215 	stw	ra,8(sp)
   4d8b8:	2023883a 	mov	r17,r4
   4d8bc:	004e3e40 	call	4e3e4 <__gesf2>
   4d8c0:	1000070e 	bge	r2,zero,4d8e0 <__fixunssfsi+0x40>
   4d8c4:	8809883a 	mov	r4,r17
   4d8c8:	004edb40 	call	4edb4 <__fixsfsi>
   4d8cc:	dfc00217 	ldw	ra,8(sp)
   4d8d0:	dc400117 	ldw	r17,4(sp)
   4d8d4:	dc000017 	ldw	r16,0(sp)
   4d8d8:	dec00304 	addi	sp,sp,12
   4d8dc:	f800283a 	ret
   4d8e0:	800b883a 	mov	r5,r16
   4d8e4:	8809883a 	mov	r4,r17
   4d8e8:	004e8d00 	call	4e8d0 <__subsf3>
   4d8ec:	1009883a 	mov	r4,r2
   4d8f0:	004edb40 	call	4edb4 <__fixsfsi>
   4d8f4:	00e00034 	movhi	r3,32768
   4d8f8:	10c5883a 	add	r2,r2,r3
   4d8fc:	003ff306 	br	4d8cc <__alt_data_end+0xfffcd8cc>

0004d900 <__divsi3>:
   4d900:	20001b16 	blt	r4,zero,4d970 <__divsi3+0x70>
   4d904:	000f883a 	mov	r7,zero
   4d908:	28001616 	blt	r5,zero,4d964 <__divsi3+0x64>
   4d90c:	200d883a 	mov	r6,r4
   4d910:	29001a2e 	bgeu	r5,r4,4d97c <__divsi3+0x7c>
   4d914:	00800804 	movi	r2,32
   4d918:	00c00044 	movi	r3,1
   4d91c:	00000106 	br	4d924 <__divsi3+0x24>
   4d920:	10000d26 	beq	r2,zero,4d958 <__divsi3+0x58>
   4d924:	294b883a 	add	r5,r5,r5
   4d928:	10bfffc4 	addi	r2,r2,-1
   4d92c:	18c7883a 	add	r3,r3,r3
   4d930:	293ffb36 	bltu	r5,r4,4d920 <__alt_data_end+0xfffcd920>
   4d934:	0005883a 	mov	r2,zero
   4d938:	18000726 	beq	r3,zero,4d958 <__divsi3+0x58>
   4d93c:	0005883a 	mov	r2,zero
   4d940:	31400236 	bltu	r6,r5,4d94c <__divsi3+0x4c>
   4d944:	314dc83a 	sub	r6,r6,r5
   4d948:	10c4b03a 	or	r2,r2,r3
   4d94c:	1806d07a 	srli	r3,r3,1
   4d950:	280ad07a 	srli	r5,r5,1
   4d954:	183ffa1e 	bne	r3,zero,4d940 <__alt_data_end+0xfffcd940>
   4d958:	38000126 	beq	r7,zero,4d960 <__divsi3+0x60>
   4d95c:	0085c83a 	sub	r2,zero,r2
   4d960:	f800283a 	ret
   4d964:	014bc83a 	sub	r5,zero,r5
   4d968:	39c0005c 	xori	r7,r7,1
   4d96c:	003fe706 	br	4d90c <__alt_data_end+0xfffcd90c>
   4d970:	0109c83a 	sub	r4,zero,r4
   4d974:	01c00044 	movi	r7,1
   4d978:	003fe306 	br	4d908 <__alt_data_end+0xfffcd908>
   4d97c:	00c00044 	movi	r3,1
   4d980:	003fee06 	br	4d93c <__alt_data_end+0xfffcd93c>

0004d984 <__modsi3>:
   4d984:	20001716 	blt	r4,zero,4d9e4 <__modsi3+0x60>
   4d988:	000f883a 	mov	r7,zero
   4d98c:	2005883a 	mov	r2,r4
   4d990:	28001216 	blt	r5,zero,4d9dc <__modsi3+0x58>
   4d994:	2900162e 	bgeu	r5,r4,4d9f0 <__modsi3+0x6c>
   4d998:	01800804 	movi	r6,32
   4d99c:	00c00044 	movi	r3,1
   4d9a0:	00000106 	br	4d9a8 <__modsi3+0x24>
   4d9a4:	30000a26 	beq	r6,zero,4d9d0 <__modsi3+0x4c>
   4d9a8:	294b883a 	add	r5,r5,r5
   4d9ac:	31bfffc4 	addi	r6,r6,-1
   4d9b0:	18c7883a 	add	r3,r3,r3
   4d9b4:	293ffb36 	bltu	r5,r4,4d9a4 <__alt_data_end+0xfffcd9a4>
   4d9b8:	18000526 	beq	r3,zero,4d9d0 <__modsi3+0x4c>
   4d9bc:	1806d07a 	srli	r3,r3,1
   4d9c0:	11400136 	bltu	r2,r5,4d9c8 <__modsi3+0x44>
   4d9c4:	1145c83a 	sub	r2,r2,r5
   4d9c8:	280ad07a 	srli	r5,r5,1
   4d9cc:	183ffb1e 	bne	r3,zero,4d9bc <__alt_data_end+0xfffcd9bc>
   4d9d0:	38000126 	beq	r7,zero,4d9d8 <__modsi3+0x54>
   4d9d4:	0085c83a 	sub	r2,zero,r2
   4d9d8:	f800283a 	ret
   4d9dc:	014bc83a 	sub	r5,zero,r5
   4d9e0:	003fec06 	br	4d994 <__alt_data_end+0xfffcd994>
   4d9e4:	0109c83a 	sub	r4,zero,r4
   4d9e8:	01c00044 	movi	r7,1
   4d9ec:	003fe706 	br	4d98c <__alt_data_end+0xfffcd98c>
   4d9f0:	00c00044 	movi	r3,1
   4d9f4:	003ff106 	br	4d9bc <__alt_data_end+0xfffcd9bc>

0004d9f8 <__udivsi3>:
   4d9f8:	200d883a 	mov	r6,r4
   4d9fc:	2900152e 	bgeu	r5,r4,4da54 <__udivsi3+0x5c>
   4da00:	28001416 	blt	r5,zero,4da54 <__udivsi3+0x5c>
   4da04:	00800804 	movi	r2,32
   4da08:	00c00044 	movi	r3,1
   4da0c:	00000206 	br	4da18 <__udivsi3+0x20>
   4da10:	10000e26 	beq	r2,zero,4da4c <__udivsi3+0x54>
   4da14:	28000516 	blt	r5,zero,4da2c <__udivsi3+0x34>
   4da18:	294b883a 	add	r5,r5,r5
   4da1c:	10bfffc4 	addi	r2,r2,-1
   4da20:	18c7883a 	add	r3,r3,r3
   4da24:	293ffa36 	bltu	r5,r4,4da10 <__alt_data_end+0xfffcda10>
   4da28:	18000826 	beq	r3,zero,4da4c <__udivsi3+0x54>
   4da2c:	0005883a 	mov	r2,zero
   4da30:	31400236 	bltu	r6,r5,4da3c <__udivsi3+0x44>
   4da34:	314dc83a 	sub	r6,r6,r5
   4da38:	10c4b03a 	or	r2,r2,r3
   4da3c:	1806d07a 	srli	r3,r3,1
   4da40:	280ad07a 	srli	r5,r5,1
   4da44:	183ffa1e 	bne	r3,zero,4da30 <__alt_data_end+0xfffcda30>
   4da48:	f800283a 	ret
   4da4c:	0005883a 	mov	r2,zero
   4da50:	f800283a 	ret
   4da54:	00c00044 	movi	r3,1
   4da58:	003ff406 	br	4da2c <__alt_data_end+0xfffcda2c>

0004da5c <__umodsi3>:
   4da5c:	2005883a 	mov	r2,r4
   4da60:	2900122e 	bgeu	r5,r4,4daac <__umodsi3+0x50>
   4da64:	28001116 	blt	r5,zero,4daac <__umodsi3+0x50>
   4da68:	01800804 	movi	r6,32
   4da6c:	00c00044 	movi	r3,1
   4da70:	00000206 	br	4da7c <__umodsi3+0x20>
   4da74:	30000c26 	beq	r6,zero,4daa8 <__umodsi3+0x4c>
   4da78:	28000516 	blt	r5,zero,4da90 <__umodsi3+0x34>
   4da7c:	294b883a 	add	r5,r5,r5
   4da80:	31bfffc4 	addi	r6,r6,-1
   4da84:	18c7883a 	add	r3,r3,r3
   4da88:	293ffa36 	bltu	r5,r4,4da74 <__alt_data_end+0xfffcda74>
   4da8c:	18000626 	beq	r3,zero,4daa8 <__umodsi3+0x4c>
   4da90:	1806d07a 	srli	r3,r3,1
   4da94:	11400136 	bltu	r2,r5,4da9c <__umodsi3+0x40>
   4da98:	1145c83a 	sub	r2,r2,r5
   4da9c:	280ad07a 	srli	r5,r5,1
   4daa0:	183ffb1e 	bne	r3,zero,4da90 <__alt_data_end+0xfffcda90>
   4daa4:	f800283a 	ret
   4daa8:	f800283a 	ret
   4daac:	00c00044 	movi	r3,1
   4dab0:	003ff706 	br	4da90 <__alt_data_end+0xfffcda90>

0004dab4 <__mulsi3>:
   4dab4:	0005883a 	mov	r2,zero
   4dab8:	20000726 	beq	r4,zero,4dad8 <__mulsi3+0x24>
   4dabc:	20c0004c 	andi	r3,r4,1
   4dac0:	2008d07a 	srli	r4,r4,1
   4dac4:	18000126 	beq	r3,zero,4dacc <__mulsi3+0x18>
   4dac8:	1145883a 	add	r2,r2,r5
   4dacc:	294b883a 	add	r5,r5,r5
   4dad0:	203ffa1e 	bne	r4,zero,4dabc <__alt_data_end+0xfffcdabc>
   4dad4:	f800283a 	ret
   4dad8:	f800283a 	ret

0004dadc <__addsf3>:
   4dadc:	defffc04 	addi	sp,sp,-16
   4dae0:	2004d7fa 	srli	r2,r4,31
   4dae4:	280cd5fa 	srli	r6,r5,23
   4dae8:	dc000015 	stw	r16,0(sp)
   4daec:	00c02034 	movhi	r3,128
   4daf0:	2020d5fa 	srli	r16,r4,23
   4daf4:	280ed7fa 	srli	r7,r5,31
   4daf8:	18ffffc4 	addi	r3,r3,-1
   4dafc:	dc400115 	stw	r17,4(sp)
   4db00:	1908703a 	and	r4,r3,r4
   4db04:	194a703a 	and	r5,r3,r5
   4db08:	dfc00315 	stw	ra,12(sp)
   4db0c:	dc800215 	stw	r18,8(sp)
   4db10:	14403fcc 	andi	r17,r2,255
   4db14:	84003fcc 	andi	r16,r16,255
   4db18:	200890fa 	slli	r4,r4,3
   4db1c:	31803fcc 	andi	r6,r6,255
   4db20:	280a90fa 	slli	r5,r5,3
   4db24:	89c05026 	beq	r17,r7,4dc68 <__addsf3+0x18c>
   4db28:	8185c83a 	sub	r2,r16,r6
   4db2c:	00807a0e 	bge	zero,r2,4dd18 <__addsf3+0x23c>
   4db30:	30001e1e 	bne	r6,zero,4dbac <__addsf3+0xd0>
   4db34:	28006d1e 	bne	r5,zero,4dcec <__addsf3+0x210>
   4db38:	208001cc 	andi	r2,r4,7
   4db3c:	10000426 	beq	r2,zero,4db50 <__addsf3+0x74>
   4db40:	208003cc 	andi	r2,r4,15
   4db44:	00c00104 	movi	r3,4
   4db48:	10c00126 	beq	r2,r3,4db50 <__addsf3+0x74>
   4db4c:	20c9883a 	add	r4,r4,r3
   4db50:	2081002c 	andhi	r2,r4,1024
   4db54:	10003926 	beq	r2,zero,4dc3c <__addsf3+0x160>
   4db58:	84000044 	addi	r16,r16,1
   4db5c:	00803fc4 	movi	r2,255
   4db60:	80807826 	beq	r16,r2,4dd44 <__addsf3+0x268>
   4db64:	200891ba 	slli	r4,r4,6
   4db68:	8805883a 	mov	r2,r17
   4db6c:	2008d27a 	srli	r4,r4,9
   4db70:	84003fcc 	andi	r16,r16,255
   4db74:	800695fa 	slli	r3,r16,23
   4db78:	10803fcc 	andi	r2,r2,255
   4db7c:	04002034 	movhi	r16,128
   4db80:	843fffc4 	addi	r16,r16,-1
   4db84:	100497fa 	slli	r2,r2,31
   4db88:	2408703a 	and	r4,r4,r16
   4db8c:	20e0b03a 	or	r16,r4,r3
   4db90:	8084b03a 	or	r2,r16,r2
   4db94:	dfc00317 	ldw	ra,12(sp)
   4db98:	dc800217 	ldw	r18,8(sp)
   4db9c:	dc400117 	ldw	r17,4(sp)
   4dba0:	dc000017 	ldw	r16,0(sp)
   4dba4:	dec00404 	addi	sp,sp,16
   4dba8:	f800283a 	ret
   4dbac:	00c03fc4 	movi	r3,255
   4dbb0:	80ffe126 	beq	r16,r3,4db38 <__alt_data_end+0xfffcdb38>
   4dbb4:	29410034 	orhi	r5,r5,1024
   4dbb8:	00c006c4 	movi	r3,27
   4dbbc:	18807516 	blt	r3,r2,4dd94 <__addsf3+0x2b8>
   4dbc0:	00c00804 	movi	r3,32
   4dbc4:	1887c83a 	sub	r3,r3,r2
   4dbc8:	28c6983a 	sll	r3,r5,r3
   4dbcc:	288ad83a 	srl	r5,r5,r2
   4dbd0:	1804c03a 	cmpne	r2,r3,zero
   4dbd4:	288ab03a 	or	r5,r5,r2
   4dbd8:	2149c83a 	sub	r4,r4,r5
   4dbdc:	2081002c 	andhi	r2,r4,1024
   4dbe0:	10001426 	beq	r2,zero,4dc34 <__addsf3+0x158>
   4dbe4:	04810034 	movhi	r18,1024
   4dbe8:	94bfffc4 	addi	r18,r18,-1
   4dbec:	24a4703a 	and	r18,r4,r18
   4dbf0:	9009883a 	mov	r4,r18
   4dbf4:	004f5580 	call	4f558 <__clzsi2>
   4dbf8:	10bffec4 	addi	r2,r2,-5
   4dbfc:	90a4983a 	sll	r18,r18,r2
   4dc00:	14005416 	blt	r2,r16,4dd54 <__addsf3+0x278>
   4dc04:	1405c83a 	sub	r2,r2,r16
   4dc08:	11000044 	addi	r4,r2,1
   4dc0c:	00800804 	movi	r2,32
   4dc10:	1105c83a 	sub	r2,r2,r4
   4dc14:	9084983a 	sll	r2,r18,r2
   4dc18:	9124d83a 	srl	r18,r18,r4
   4dc1c:	0021883a 	mov	r16,zero
   4dc20:	1008c03a 	cmpne	r4,r2,zero
   4dc24:	9108b03a 	or	r4,r18,r4
   4dc28:	003fc306 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dc2c:	1000db26 	beq	r2,zero,4df9c <__addsf3+0x4c0>
   4dc30:	1009883a 	mov	r4,r2
   4dc34:	208001cc 	andi	r2,r4,7
   4dc38:	103fc11e 	bne	r2,zero,4db40 <__alt_data_end+0xfffcdb40>
   4dc3c:	2006d0fa 	srli	r3,r4,3
   4dc40:	01003fc4 	movi	r4,255
   4dc44:	8805883a 	mov	r2,r17
   4dc48:	8100241e 	bne	r16,r4,4dcdc <__addsf3+0x200>
   4dc4c:	18006e26 	beq	r3,zero,4de08 <__addsf3+0x32c>
   4dc50:	19001034 	orhi	r4,r3,64
   4dc54:	00c02034 	movhi	r3,128
   4dc58:	18ffffc4 	addi	r3,r3,-1
   4dc5c:	043fffc4 	movi	r16,-1
   4dc60:	20c8703a 	and	r4,r4,r3
   4dc64:	003fc206 	br	4db70 <__alt_data_end+0xfffcdb70>
   4dc68:	8187c83a 	sub	r3,r16,r6
   4dc6c:	00c03e0e 	bge	zero,r3,4dd68 <__addsf3+0x28c>
   4dc70:	30002326 	beq	r6,zero,4dd00 <__addsf3+0x224>
   4dc74:	01803fc4 	movi	r6,255
   4dc78:	81bfaf26 	beq	r16,r6,4db38 <__alt_data_end+0xfffcdb38>
   4dc7c:	29410034 	orhi	r5,r5,1024
   4dc80:	018006c4 	movi	r6,27
   4dc84:	30c07416 	blt	r6,r3,4de58 <__addsf3+0x37c>
   4dc88:	01800804 	movi	r6,32
   4dc8c:	30cdc83a 	sub	r6,r6,r3
   4dc90:	298c983a 	sll	r6,r5,r6
   4dc94:	28cad83a 	srl	r5,r5,r3
   4dc98:	3006c03a 	cmpne	r3,r6,zero
   4dc9c:	28cab03a 	or	r5,r5,r3
   4dca0:	2149883a 	add	r4,r4,r5
   4dca4:	20c1002c 	andhi	r3,r4,1024
   4dca8:	183fe226 	beq	r3,zero,4dc34 <__alt_data_end+0xfffcdc34>
   4dcac:	84000044 	addi	r16,r16,1
   4dcb0:	00c03fc4 	movi	r3,255
   4dcb4:	80c05426 	beq	r16,r3,4de08 <__addsf3+0x32c>
   4dcb8:	00bf0034 	movhi	r2,64512
   4dcbc:	10bfffc4 	addi	r2,r2,-1
   4dcc0:	20c0004c 	andi	r3,r4,1
   4dcc4:	2088703a 	and	r4,r4,r2
   4dcc8:	2008d07a 	srli	r4,r4,1
   4dccc:	20c8b03a 	or	r4,r4,r3
   4dcd0:	003f9906 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dcd4:	0007883a 	mov	r3,zero
   4dcd8:	0005883a 	mov	r2,zero
   4dcdc:	01002034 	movhi	r4,128
   4dce0:	213fffc4 	addi	r4,r4,-1
   4dce4:	1908703a 	and	r4,r3,r4
   4dce8:	003fa106 	br	4db70 <__alt_data_end+0xfffcdb70>
   4dcec:	10bfffc4 	addi	r2,r2,-1
   4dcf0:	103fb926 	beq	r2,zero,4dbd8 <__alt_data_end+0xfffcdbd8>
   4dcf4:	00c03fc4 	movi	r3,255
   4dcf8:	80ffaf1e 	bne	r16,r3,4dbb8 <__alt_data_end+0xfffcdbb8>
   4dcfc:	003f8e06 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dd00:	283f8d26 	beq	r5,zero,4db38 <__alt_data_end+0xfffcdb38>
   4dd04:	18ffffc4 	addi	r3,r3,-1
   4dd08:	183fe526 	beq	r3,zero,4dca0 <__alt_data_end+0xfffcdca0>
   4dd0c:	01803fc4 	movi	r6,255
   4dd10:	81bfdb1e 	bne	r16,r6,4dc80 <__alt_data_end+0xfffcdc80>
   4dd14:	003f8806 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dd18:	1000201e 	bne	r2,zero,4dd9c <__addsf3+0x2c0>
   4dd1c:	80800044 	addi	r2,r16,1
   4dd20:	10803fcc 	andi	r2,r2,255
   4dd24:	01800044 	movi	r6,1
   4dd28:	3080450e 	bge	r6,r2,4de40 <__addsf3+0x364>
   4dd2c:	2165c83a 	sub	r18,r4,r5
   4dd30:	90c1002c 	andhi	r3,r18,1024
   4dd34:	18002b26 	beq	r3,zero,4dde4 <__addsf3+0x308>
   4dd38:	2925c83a 	sub	r18,r5,r4
   4dd3c:	3823883a 	mov	r17,r7
   4dd40:	003fab06 	br	4dbf0 <__alt_data_end+0xfffcdbf0>
   4dd44:	8805883a 	mov	r2,r17
   4dd48:	043fffc4 	movi	r16,-1
   4dd4c:	0009883a 	mov	r4,zero
   4dd50:	003f8706 	br	4db70 <__alt_data_end+0xfffcdb70>
   4dd54:	013f0034 	movhi	r4,64512
   4dd58:	213fffc4 	addi	r4,r4,-1
   4dd5c:	80a1c83a 	sub	r16,r16,r2
   4dd60:	9108703a 	and	r4,r18,r4
   4dd64:	003f7406 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dd68:	1800411e 	bne	r3,zero,4de70 <__addsf3+0x394>
   4dd6c:	80c00044 	addi	r3,r16,1
   4dd70:	19c03fcc 	andi	r7,r3,255
   4dd74:	01800044 	movi	r6,1
   4dd78:	31c0260e 	bge	r6,r7,4de14 <__addsf3+0x338>
   4dd7c:	01803fc4 	movi	r6,255
   4dd80:	19802126 	beq	r3,r6,4de08 <__addsf3+0x32c>
   4dd84:	2149883a 	add	r4,r4,r5
   4dd88:	2008d07a 	srli	r4,r4,1
   4dd8c:	1821883a 	mov	r16,r3
   4dd90:	003f6906 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dd94:	01400044 	movi	r5,1
   4dd98:	003f8f06 	br	4dbd8 <__alt_data_end+0xfffcdbd8>
   4dd9c:	8000151e 	bne	r16,zero,4ddf4 <__addsf3+0x318>
   4dda0:	20002f26 	beq	r4,zero,4de60 <__addsf3+0x384>
   4dda4:	0084303a 	nor	r2,zero,r2
   4dda8:	10000a26 	beq	r2,zero,4ddd4 <__addsf3+0x2f8>
   4ddac:	00c03fc4 	movi	r3,255
   4ddb0:	30c02b26 	beq	r6,r3,4de60 <__addsf3+0x384>
   4ddb4:	00c006c4 	movi	r3,27
   4ddb8:	18806d16 	blt	r3,r2,4df70 <__addsf3+0x494>
   4ddbc:	00c00804 	movi	r3,32
   4ddc0:	1887c83a 	sub	r3,r3,r2
   4ddc4:	20c6983a 	sll	r3,r4,r3
   4ddc8:	2084d83a 	srl	r2,r4,r2
   4ddcc:	1808c03a 	cmpne	r4,r3,zero
   4ddd0:	1108b03a 	or	r4,r2,r4
   4ddd4:	2909c83a 	sub	r4,r5,r4
   4ddd8:	3021883a 	mov	r16,r6
   4dddc:	3823883a 	mov	r17,r7
   4dde0:	003f7e06 	br	4dbdc <__alt_data_end+0xfffcdbdc>
   4dde4:	903f821e 	bne	r18,zero,4dbf0 <__alt_data_end+0xfffcdbf0>
   4dde8:	0005883a 	mov	r2,zero
   4ddec:	0021883a 	mov	r16,zero
   4ddf0:	003fba06 	br	4dcdc <__alt_data_end+0xfffcdcdc>
   4ddf4:	00c03fc4 	movi	r3,255
   4ddf8:	30c01926 	beq	r6,r3,4de60 <__addsf3+0x384>
   4ddfc:	0085c83a 	sub	r2,zero,r2
   4de00:	21010034 	orhi	r4,r4,1024
   4de04:	003feb06 	br	4ddb4 <__alt_data_end+0xfffcddb4>
   4de08:	043fffc4 	movi	r16,-1
   4de0c:	0009883a 	mov	r4,zero
   4de10:	003f5706 	br	4db70 <__alt_data_end+0xfffcdb70>
   4de14:	80004a1e 	bne	r16,zero,4df40 <__addsf3+0x464>
   4de18:	20005926 	beq	r4,zero,4df80 <__addsf3+0x4a4>
   4de1c:	283f4626 	beq	r5,zero,4db38 <__alt_data_end+0xfffcdb38>
   4de20:	2149883a 	add	r4,r4,r5
   4de24:	2081002c 	andhi	r2,r4,1024
   4de28:	103f8226 	beq	r2,zero,4dc34 <__alt_data_end+0xfffcdc34>
   4de2c:	00bf0034 	movhi	r2,64512
   4de30:	10bfffc4 	addi	r2,r2,-1
   4de34:	3021883a 	mov	r16,r6
   4de38:	2088703a 	and	r4,r4,r2
   4de3c:	003f3e06 	br	4db38 <__alt_data_end+0xfffcdb38>
   4de40:	8000121e 	bne	r16,zero,4de8c <__addsf3+0x3b0>
   4de44:	2000261e 	bne	r4,zero,4dee0 <__addsf3+0x404>
   4de48:	283fa226 	beq	r5,zero,4dcd4 <__alt_data_end+0xfffcdcd4>
   4de4c:	2809883a 	mov	r4,r5
   4de50:	3823883a 	mov	r17,r7
   4de54:	003f3806 	br	4db38 <__alt_data_end+0xfffcdb38>
   4de58:	01400044 	movi	r5,1
   4de5c:	003f9006 	br	4dca0 <__alt_data_end+0xfffcdca0>
   4de60:	2809883a 	mov	r4,r5
   4de64:	3021883a 	mov	r16,r6
   4de68:	3823883a 	mov	r17,r7
   4de6c:	003f3206 	br	4db38 <__alt_data_end+0xfffcdb38>
   4de70:	80000c1e 	bne	r16,zero,4dea4 <__addsf3+0x3c8>
   4de74:	20002f26 	beq	r4,zero,4df34 <__addsf3+0x458>
   4de78:	00c6303a 	nor	r3,zero,r3
   4de7c:	18002b1e 	bne	r3,zero,4df2c <__addsf3+0x450>
   4de80:	2149883a 	add	r4,r4,r5
   4de84:	3021883a 	mov	r16,r6
   4de88:	003f8606 	br	4dca4 <__alt_data_end+0xfffcdca4>
   4de8c:	20001b1e 	bne	r4,zero,4defc <__addsf3+0x420>
   4de90:	28003926 	beq	r5,zero,4df78 <__addsf3+0x49c>
   4de94:	2809883a 	mov	r4,r5
   4de98:	3823883a 	mov	r17,r7
   4de9c:	04003fc4 	movi	r16,255
   4dea0:	003f2506 	br	4db38 <__alt_data_end+0xfffcdb38>
   4dea4:	01c03fc4 	movi	r7,255
   4dea8:	31c02226 	beq	r6,r7,4df34 <__addsf3+0x458>
   4deac:	00c7c83a 	sub	r3,zero,r3
   4deb0:	21010034 	orhi	r4,r4,1024
   4deb4:	01c006c4 	movi	r7,27
   4deb8:	38c03616 	blt	r7,r3,4df94 <__addsf3+0x4b8>
   4debc:	01c00804 	movi	r7,32
   4dec0:	38cfc83a 	sub	r7,r7,r3
   4dec4:	21ce983a 	sll	r7,r4,r7
   4dec8:	20c6d83a 	srl	r3,r4,r3
   4decc:	3808c03a 	cmpne	r4,r7,zero
   4ded0:	1906b03a 	or	r3,r3,r4
   4ded4:	1949883a 	add	r4,r3,r5
   4ded8:	3021883a 	mov	r16,r6
   4dedc:	003f7106 	br	4dca4 <__alt_data_end+0xfffcdca4>
   4dee0:	283f1526 	beq	r5,zero,4db38 <__alt_data_end+0xfffcdb38>
   4dee4:	2145c83a 	sub	r2,r4,r5
   4dee8:	10c1002c 	andhi	r3,r2,1024
   4deec:	183f4f26 	beq	r3,zero,4dc2c <__alt_data_end+0xfffcdc2c>
   4def0:	2909c83a 	sub	r4,r5,r4
   4def4:	3823883a 	mov	r17,r7
   4def8:	003f0f06 	br	4db38 <__alt_data_end+0xfffcdb38>
   4defc:	28001a26 	beq	r5,zero,4df68 <__addsf3+0x48c>
   4df00:	2008d0fa 	srli	r4,r4,3
   4df04:	2080102c 	andhi	r2,r4,64
   4df08:	10000526 	beq	r2,zero,4df20 <__addsf3+0x444>
   4df0c:	280ad0fa 	srli	r5,r5,3
   4df10:	2880102c 	andhi	r2,r5,64
   4df14:	1000021e 	bne	r2,zero,4df20 <__addsf3+0x444>
   4df18:	2809883a 	mov	r4,r5
   4df1c:	3823883a 	mov	r17,r7
   4df20:	200890fa 	slli	r4,r4,3
   4df24:	04003fc4 	movi	r16,255
   4df28:	003f0306 	br	4db38 <__alt_data_end+0xfffcdb38>
   4df2c:	01c03fc4 	movi	r7,255
   4df30:	31ffe01e 	bne	r6,r7,4deb4 <__alt_data_end+0xfffcdeb4>
   4df34:	2809883a 	mov	r4,r5
   4df38:	3021883a 	mov	r16,r6
   4df3c:	003efe06 	br	4db38 <__alt_data_end+0xfffcdb38>
   4df40:	20001126 	beq	r4,zero,4df88 <__addsf3+0x4ac>
   4df44:	28000826 	beq	r5,zero,4df68 <__addsf3+0x48c>
   4df48:	2008d0fa 	srli	r4,r4,3
   4df4c:	2080102c 	andhi	r2,r4,64
   4df50:	103ff326 	beq	r2,zero,4df20 <__alt_data_end+0xfffcdf20>
   4df54:	280ad0fa 	srli	r5,r5,3
   4df58:	2880102c 	andhi	r2,r5,64
   4df5c:	103ff01e 	bne	r2,zero,4df20 <__alt_data_end+0xfffcdf20>
   4df60:	2809883a 	mov	r4,r5
   4df64:	003fee06 	br	4df20 <__alt_data_end+0xfffcdf20>
   4df68:	04003fc4 	movi	r16,255
   4df6c:	003ef206 	br	4db38 <__alt_data_end+0xfffcdb38>
   4df70:	01000044 	movi	r4,1
   4df74:	003f9706 	br	4ddd4 <__alt_data_end+0xfffcddd4>
   4df78:	0005883a 	mov	r2,zero
   4df7c:	003f3406 	br	4dc50 <__alt_data_end+0xfffcdc50>
   4df80:	2809883a 	mov	r4,r5
   4df84:	003eec06 	br	4db38 <__alt_data_end+0xfffcdb38>
   4df88:	2809883a 	mov	r4,r5
   4df8c:	04003fc4 	movi	r16,255
   4df90:	003ee906 	br	4db38 <__alt_data_end+0xfffcdb38>
   4df94:	00c00044 	movi	r3,1
   4df98:	003fce06 	br	4ded4 <__alt_data_end+0xfffcded4>
   4df9c:	0005883a 	mov	r2,zero
   4dfa0:	003f4e06 	br	4dcdc <__alt_data_end+0xfffcdcdc>

0004dfa4 <__divsf3>:
   4dfa4:	defff504 	addi	sp,sp,-44
   4dfa8:	200cd5fa 	srli	r6,r4,23
   4dfac:	dcc00415 	stw	r19,16(sp)
   4dfb0:	2026d7fa 	srli	r19,r4,31
   4dfb4:	00c02034 	movhi	r3,128
   4dfb8:	dd800715 	stw	r22,28(sp)
   4dfbc:	dd000515 	stw	r20,20(sp)
   4dfc0:	dc800315 	stw	r18,12(sp)
   4dfc4:	18ffffc4 	addi	r3,r3,-1
   4dfc8:	dfc00a15 	stw	ra,40(sp)
   4dfcc:	df000915 	stw	fp,36(sp)
   4dfd0:	ddc00815 	stw	r23,32(sp)
   4dfd4:	dd400615 	stw	r21,24(sp)
   4dfd8:	dc400215 	stw	r17,8(sp)
   4dfdc:	dc000115 	stw	r16,4(sp)
   4dfe0:	35003fcc 	andi	r20,r6,255
   4dfe4:	1924703a 	and	r18,r3,r4
   4dfe8:	9d803fcc 	andi	r22,r19,255
   4dfec:	a0005226 	beq	r20,zero,4e138 <__divsf3+0x194>
   4dff0:	00803fc4 	movi	r2,255
   4dff4:	a0802e26 	beq	r20,r2,4e0b0 <__divsf3+0x10c>
   4dff8:	91002034 	orhi	r4,r18,128
   4dffc:	202490fa 	slli	r18,r4,3
   4e000:	a53fe044 	addi	r20,r20,-127
   4e004:	0021883a 	mov	r16,zero
   4e008:	002f883a 	mov	r23,zero
   4e00c:	280cd5fa 	srli	r6,r5,23
   4e010:	282ad7fa 	srli	r21,r5,31
   4e014:	00c02034 	movhi	r3,128
   4e018:	18ffffc4 	addi	r3,r3,-1
   4e01c:	31803fcc 	andi	r6,r6,255
   4e020:	1962703a 	and	r17,r3,r5
   4e024:	af003fcc 	andi	fp,r21,255
   4e028:	30004a26 	beq	r6,zero,4e154 <__divsf3+0x1b0>
   4e02c:	00803fc4 	movi	r2,255
   4e030:	30804526 	beq	r6,r2,4e148 <__divsf3+0x1a4>
   4e034:	89402034 	orhi	r5,r17,128
   4e038:	282290fa 	slli	r17,r5,3
   4e03c:	31bfe044 	addi	r6,r6,-127
   4e040:	000b883a 	mov	r5,zero
   4e044:	2c20b03a 	or	r16,r5,r16
   4e048:	802090ba 	slli	r16,r16,2
   4e04c:	00800174 	movhi	r2,5
   4e050:	10b81c04 	addi	r2,r2,-8080
   4e054:	80a1883a 	add	r16,r16,r2
   4e058:	81000017 	ldw	r4,0(r16)
   4e05c:	9d46f03a 	xor	r3,r19,r21
   4e060:	180f883a 	mov	r7,r3
   4e064:	18803fcc 	andi	r2,r3,255
   4e068:	a18dc83a 	sub	r6,r20,r6
   4e06c:	2000683a 	jmp	r4
   4e070:	0004e254 	movui	zero,5001
   4e074:	0004e0d8 	cmpnei	zero,zero,4995
   4e078:	0004e248 	cmpgei	zero,zero,5001
   4e07c:	0004e0c4 	movi	zero,4995
   4e080:	0004e248 	cmpgei	zero,zero,5001
   4e084:	0004e220 	cmpeqi	zero,zero,5000
   4e088:	0004e248 	cmpgei	zero,zero,5001
   4e08c:	0004e0c4 	movi	zero,4995
   4e090:	0004e0d8 	cmpnei	zero,zero,4995
   4e094:	0004e0d8 	cmpnei	zero,zero,4995
   4e098:	0004e220 	cmpeqi	zero,zero,5000
   4e09c:	0004e0c4 	movi	zero,4995
   4e0a0:	0004e334 	movhi	zero,5004
   4e0a4:	0004e334 	movhi	zero,5004
   4e0a8:	0004e334 	movhi	zero,5004
   4e0ac:	0004e2e8 	cmpgeui	zero,zero,5003
   4e0b0:	9000581e 	bne	r18,zero,4e214 <__divsf3+0x270>
   4e0b4:	04000204 	movi	r16,8
   4e0b8:	05c00084 	movi	r23,2
   4e0bc:	003fd306 	br	4e00c <__alt_data_end+0xfffce00c>
   4e0c0:	0023883a 	mov	r17,zero
   4e0c4:	e02d883a 	mov	r22,fp
   4e0c8:	282f883a 	mov	r23,r5
   4e0cc:	00800084 	movi	r2,2
   4e0d0:	b8808f1e 	bne	r23,r2,4e310 <__divsf3+0x36c>
   4e0d4:	b005883a 	mov	r2,r22
   4e0d8:	11c0004c 	andi	r7,r2,1
   4e0dc:	013fffc4 	movi	r4,-1
   4e0e0:	000d883a 	mov	r6,zero
   4e0e4:	21003fcc 	andi	r4,r4,255
   4e0e8:	200895fa 	slli	r4,r4,23
   4e0ec:	38803fcc 	andi	r2,r7,255
   4e0f0:	00c02034 	movhi	r3,128
   4e0f4:	100497fa 	slli	r2,r2,31
   4e0f8:	18ffffc4 	addi	r3,r3,-1
   4e0fc:	30c6703a 	and	r3,r6,r3
   4e100:	1906b03a 	or	r3,r3,r4
   4e104:	1884b03a 	or	r2,r3,r2
   4e108:	dfc00a17 	ldw	ra,40(sp)
   4e10c:	df000917 	ldw	fp,36(sp)
   4e110:	ddc00817 	ldw	r23,32(sp)
   4e114:	dd800717 	ldw	r22,28(sp)
   4e118:	dd400617 	ldw	r21,24(sp)
   4e11c:	dd000517 	ldw	r20,20(sp)
   4e120:	dcc00417 	ldw	r19,16(sp)
   4e124:	dc800317 	ldw	r18,12(sp)
   4e128:	dc400217 	ldw	r17,8(sp)
   4e12c:	dc000117 	ldw	r16,4(sp)
   4e130:	dec00b04 	addi	sp,sp,44
   4e134:	f800283a 	ret
   4e138:	90002b1e 	bne	r18,zero,4e1e8 <__divsf3+0x244>
   4e13c:	04000104 	movi	r16,4
   4e140:	05c00044 	movi	r23,1
   4e144:	003fb106 	br	4e00c <__alt_data_end+0xfffce00c>
   4e148:	8800251e 	bne	r17,zero,4e1e0 <__divsf3+0x23c>
   4e14c:	01400084 	movi	r5,2
   4e150:	00000206 	br	4e15c <__divsf3+0x1b8>
   4e154:	88001a1e 	bne	r17,zero,4e1c0 <__divsf3+0x21c>
   4e158:	01400044 	movi	r5,1
   4e15c:	8160b03a 	or	r16,r16,r5
   4e160:	802090ba 	slli	r16,r16,2
   4e164:	00c00174 	movhi	r3,5
   4e168:	18f86004 	addi	r3,r3,-7808
   4e16c:	80e1883a 	add	r16,r16,r3
   4e170:	80c00017 	ldw	r3,0(r16)
   4e174:	9d44f03a 	xor	r2,r19,r21
   4e178:	a18dc83a 	sub	r6,r20,r6
   4e17c:	1800683a 	jmp	r3
   4e180:	0004e0d8 	cmpnei	zero,zero,4995
   4e184:	0004e0d8 	cmpnei	zero,zero,4995
   4e188:	0004e324 	muli	zero,zero,5004
   4e18c:	0004e0c0 	call	4e0c <__alt_mem_onchip_memory2_0-0x3b1f4>
   4e190:	0004e324 	muli	zero,zero,5004
   4e194:	0004e220 	cmpeqi	zero,zero,5000
   4e198:	0004e324 	muli	zero,zero,5004
   4e19c:	0004e0c0 	call	4e0c <__alt_mem_onchip_memory2_0-0x3b1f4>
   4e1a0:	0004e0d8 	cmpnei	zero,zero,4995
   4e1a4:	0004e0d8 	cmpnei	zero,zero,4995
   4e1a8:	0004e220 	cmpeqi	zero,zero,5000
   4e1ac:	0004e0c0 	call	4e0c <__alt_mem_onchip_memory2_0-0x3b1f4>
   4e1b0:	0004e334 	movhi	zero,5004
   4e1b4:	0004e334 	movhi	zero,5004
   4e1b8:	0004e334 	movhi	zero,5004
   4e1bc:	0004e34c 	andi	zero,zero,5005
   4e1c0:	8809883a 	mov	r4,r17
   4e1c4:	004f5580 	call	4f558 <__clzsi2>
   4e1c8:	10fffec4 	addi	r3,r2,-5
   4e1cc:	10801d84 	addi	r2,r2,118
   4e1d0:	88e2983a 	sll	r17,r17,r3
   4e1d4:	008dc83a 	sub	r6,zero,r2
   4e1d8:	000b883a 	mov	r5,zero
   4e1dc:	003f9906 	br	4e044 <__alt_data_end+0xfffce044>
   4e1e0:	014000c4 	movi	r5,3
   4e1e4:	003f9706 	br	4e044 <__alt_data_end+0xfffce044>
   4e1e8:	9009883a 	mov	r4,r18
   4e1ec:	d9400015 	stw	r5,0(sp)
   4e1f0:	004f5580 	call	4f558 <__clzsi2>
   4e1f4:	10fffec4 	addi	r3,r2,-5
   4e1f8:	11801d84 	addi	r6,r2,118
   4e1fc:	90e4983a 	sll	r18,r18,r3
   4e200:	01a9c83a 	sub	r20,zero,r6
   4e204:	0021883a 	mov	r16,zero
   4e208:	002f883a 	mov	r23,zero
   4e20c:	d9400017 	ldw	r5,0(sp)
   4e210:	003f7e06 	br	4e00c <__alt_data_end+0xfffce00c>
   4e214:	04000304 	movi	r16,12
   4e218:	05c000c4 	movi	r23,3
   4e21c:	003f7b06 	br	4e00c <__alt_data_end+0xfffce00c>
   4e220:	01802034 	movhi	r6,128
   4e224:	000f883a 	mov	r7,zero
   4e228:	31bfffc4 	addi	r6,r6,-1
   4e22c:	013fffc4 	movi	r4,-1
   4e230:	003fac06 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e234:	01400044 	movi	r5,1
   4e238:	2909c83a 	sub	r4,r5,r4
   4e23c:	00c006c4 	movi	r3,27
   4e240:	19004b0e 	bge	r3,r4,4e370 <__divsf3+0x3cc>
   4e244:	114e703a 	and	r7,r2,r5
   4e248:	0009883a 	mov	r4,zero
   4e24c:	000d883a 	mov	r6,zero
   4e250:	003fa406 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e254:	9006917a 	slli	r3,r18,5
   4e258:	8822917a 	slli	r17,r17,5
   4e25c:	1c40372e 	bgeu	r3,r17,4e33c <__divsf3+0x398>
   4e260:	31bfffc4 	addi	r6,r6,-1
   4e264:	010006c4 	movi	r4,27
   4e268:	000b883a 	mov	r5,zero
   4e26c:	180f883a 	mov	r7,r3
   4e270:	294b883a 	add	r5,r5,r5
   4e274:	18c7883a 	add	r3,r3,r3
   4e278:	38000116 	blt	r7,zero,4e280 <__divsf3+0x2dc>
   4e27c:	1c400236 	bltu	r3,r17,4e288 <__divsf3+0x2e4>
   4e280:	1c47c83a 	sub	r3,r3,r17
   4e284:	29400054 	ori	r5,r5,1
   4e288:	213fffc4 	addi	r4,r4,-1
   4e28c:	203ff71e 	bne	r4,zero,4e26c <__alt_data_end+0xfffce26c>
   4e290:	1806c03a 	cmpne	r3,r3,zero
   4e294:	1962b03a 	or	r17,r3,r5
   4e298:	31001fc4 	addi	r4,r6,127
   4e29c:	013fe50e 	bge	zero,r4,4e234 <__alt_data_end+0xfffce234>
   4e2a0:	88c001cc 	andi	r3,r17,7
   4e2a4:	18000426 	beq	r3,zero,4e2b8 <__divsf3+0x314>
   4e2a8:	88c003cc 	andi	r3,r17,15
   4e2ac:	01400104 	movi	r5,4
   4e2b0:	19400126 	beq	r3,r5,4e2b8 <__divsf3+0x314>
   4e2b4:	8963883a 	add	r17,r17,r5
   4e2b8:	88c2002c 	andhi	r3,r17,2048
   4e2bc:	18000426 	beq	r3,zero,4e2d0 <__divsf3+0x32c>
   4e2c0:	00fe0034 	movhi	r3,63488
   4e2c4:	18ffffc4 	addi	r3,r3,-1
   4e2c8:	31002004 	addi	r4,r6,128
   4e2cc:	88e2703a 	and	r17,r17,r3
   4e2d0:	00c03f84 	movi	r3,254
   4e2d4:	193f8016 	blt	r3,r4,4e0d8 <__alt_data_end+0xfffce0d8>
   4e2d8:	880c91ba 	slli	r6,r17,6
   4e2dc:	11c0004c 	andi	r7,r2,1
   4e2e0:	300cd27a 	srli	r6,r6,9
   4e2e4:	003f7f06 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e2e8:	9080102c 	andhi	r2,r18,64
   4e2ec:	10000226 	beq	r2,zero,4e2f8 <__divsf3+0x354>
   4e2f0:	8880102c 	andhi	r2,r17,64
   4e2f4:	10001826 	beq	r2,zero,4e358 <__divsf3+0x3b4>
   4e2f8:	00802034 	movhi	r2,128
   4e2fc:	91801034 	orhi	r6,r18,64
   4e300:	10bfffc4 	addi	r2,r2,-1
   4e304:	980f883a 	mov	r7,r19
   4e308:	308c703a 	and	r6,r6,r2
   4e30c:	003fc706 	br	4e22c <__alt_data_end+0xfffce22c>
   4e310:	008000c4 	movi	r2,3
   4e314:	b8802d26 	beq	r23,r2,4e3cc <__divsf3+0x428>
   4e318:	00c00044 	movi	r3,1
   4e31c:	b005883a 	mov	r2,r22
   4e320:	b8ffdd1e 	bne	r23,r3,4e298 <__alt_data_end+0xfffce298>
   4e324:	11c0004c 	andi	r7,r2,1
   4e328:	0009883a 	mov	r4,zero
   4e32c:	000d883a 	mov	r6,zero
   4e330:	003f6c06 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e334:	9023883a 	mov	r17,r18
   4e338:	003f6406 	br	4e0cc <__alt_data_end+0xfffce0cc>
   4e33c:	1c47c83a 	sub	r3,r3,r17
   4e340:	01000684 	movi	r4,26
   4e344:	01400044 	movi	r5,1
   4e348:	003fc806 	br	4e26c <__alt_data_end+0xfffce26c>
   4e34c:	9080102c 	andhi	r2,r18,64
   4e350:	103fe926 	beq	r2,zero,4e2f8 <__alt_data_end+0xfffce2f8>
   4e354:	0023883a 	mov	r17,zero
   4e358:	00802034 	movhi	r2,128
   4e35c:	89801034 	orhi	r6,r17,64
   4e360:	10bfffc4 	addi	r2,r2,-1
   4e364:	a80f883a 	mov	r7,r21
   4e368:	308c703a 	and	r6,r6,r2
   4e36c:	003faf06 	br	4e22c <__alt_data_end+0xfffce22c>
   4e370:	01c00804 	movi	r7,32
   4e374:	390fc83a 	sub	r7,r7,r4
   4e378:	89ce983a 	sll	r7,r17,r7
   4e37c:	890ad83a 	srl	r5,r17,r4
   4e380:	380ec03a 	cmpne	r7,r7,zero
   4e384:	29cab03a 	or	r5,r5,r7
   4e388:	28c001cc 	andi	r3,r5,7
   4e38c:	18000426 	beq	r3,zero,4e3a0 <__divsf3+0x3fc>
   4e390:	28c003cc 	andi	r3,r5,15
   4e394:	01000104 	movi	r4,4
   4e398:	19000126 	beq	r3,r4,4e3a0 <__divsf3+0x3fc>
   4e39c:	290b883a 	add	r5,r5,r4
   4e3a0:	28c1002c 	andhi	r3,r5,1024
   4e3a4:	18000426 	beq	r3,zero,4e3b8 <__divsf3+0x414>
   4e3a8:	11c0004c 	andi	r7,r2,1
   4e3ac:	01000044 	movi	r4,1
   4e3b0:	000d883a 	mov	r6,zero
   4e3b4:	003f4b06 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e3b8:	280a91ba 	slli	r5,r5,6
   4e3bc:	11c0004c 	andi	r7,r2,1
   4e3c0:	0009883a 	mov	r4,zero
   4e3c4:	280cd27a 	srli	r6,r5,9
   4e3c8:	003f4606 	br	4e0e4 <__alt_data_end+0xfffce0e4>
   4e3cc:	00802034 	movhi	r2,128
   4e3d0:	89801034 	orhi	r6,r17,64
   4e3d4:	10bfffc4 	addi	r2,r2,-1
   4e3d8:	b00f883a 	mov	r7,r22
   4e3dc:	308c703a 	and	r6,r6,r2
   4e3e0:	003f9206 	br	4e22c <__alt_data_end+0xfffce22c>

0004e3e4 <__gesf2>:
   4e3e4:	2004d5fa 	srli	r2,r4,23
   4e3e8:	2806d5fa 	srli	r3,r5,23
   4e3ec:	01802034 	movhi	r6,128
   4e3f0:	31bfffc4 	addi	r6,r6,-1
   4e3f4:	10803fcc 	andi	r2,r2,255
   4e3f8:	01c03fc4 	movi	r7,255
   4e3fc:	3110703a 	and	r8,r6,r4
   4e400:	18c03fcc 	andi	r3,r3,255
   4e404:	314c703a 	and	r6,r6,r5
   4e408:	2008d7fa 	srli	r4,r4,31
   4e40c:	280ad7fa 	srli	r5,r5,31
   4e410:	11c01926 	beq	r2,r7,4e478 <__gesf2+0x94>
   4e414:	01c03fc4 	movi	r7,255
   4e418:	19c00f26 	beq	r3,r7,4e458 <__gesf2+0x74>
   4e41c:	1000061e 	bne	r2,zero,4e438 <__gesf2+0x54>
   4e420:	400f003a 	cmpeq	r7,r8,zero
   4e424:	1800071e 	bne	r3,zero,4e444 <__gesf2+0x60>
   4e428:	3000061e 	bne	r6,zero,4e444 <__gesf2+0x60>
   4e42c:	0005883a 	mov	r2,zero
   4e430:	40000e1e 	bne	r8,zero,4e46c <__gesf2+0x88>
   4e434:	f800283a 	ret
   4e438:	18000a1e 	bne	r3,zero,4e464 <__gesf2+0x80>
   4e43c:	30000b26 	beq	r6,zero,4e46c <__gesf2+0x88>
   4e440:	000f883a 	mov	r7,zero
   4e444:	29403fcc 	andi	r5,r5,255
   4e448:	38000726 	beq	r7,zero,4e468 <__gesf2+0x84>
   4e44c:	28000826 	beq	r5,zero,4e470 <__gesf2+0x8c>
   4e450:	00800044 	movi	r2,1
   4e454:	f800283a 	ret
   4e458:	303ff026 	beq	r6,zero,4e41c <__alt_data_end+0xfffce41c>
   4e45c:	00bfff84 	movi	r2,-2
   4e460:	f800283a 	ret
   4e464:	29403fcc 	andi	r5,r5,255
   4e468:	21400526 	beq	r4,r5,4e480 <__gesf2+0x9c>
   4e46c:	203ff826 	beq	r4,zero,4e450 <__alt_data_end+0xfffce450>
   4e470:	00bfffc4 	movi	r2,-1
   4e474:	f800283a 	ret
   4e478:	403fe626 	beq	r8,zero,4e414 <__alt_data_end+0xfffce414>
   4e47c:	003ff706 	br	4e45c <__alt_data_end+0xfffce45c>
   4e480:	18bffa16 	blt	r3,r2,4e46c <__alt_data_end+0xfffce46c>
   4e484:	10c00216 	blt	r2,r3,4e490 <__gesf2+0xac>
   4e488:	323ff836 	bltu	r6,r8,4e46c <__alt_data_end+0xfffce46c>
   4e48c:	4180022e 	bgeu	r8,r6,4e498 <__gesf2+0xb4>
   4e490:	203fef1e 	bne	r4,zero,4e450 <__alt_data_end+0xfffce450>
   4e494:	003ff606 	br	4e470 <__alt_data_end+0xfffce470>
   4e498:	0005883a 	mov	r2,zero
   4e49c:	f800283a 	ret

0004e4a0 <__mulsf3>:
   4e4a0:	defff504 	addi	sp,sp,-44
   4e4a4:	dc000115 	stw	r16,4(sp)
   4e4a8:	2020d5fa 	srli	r16,r4,23
   4e4ac:	dd400615 	stw	r21,24(sp)
   4e4b0:	202ad7fa 	srli	r21,r4,31
   4e4b4:	dc800315 	stw	r18,12(sp)
   4e4b8:	04802034 	movhi	r18,128
   4e4bc:	df000915 	stw	fp,36(sp)
   4e4c0:	dd000515 	stw	r20,20(sp)
   4e4c4:	94bfffc4 	addi	r18,r18,-1
   4e4c8:	dfc00a15 	stw	ra,40(sp)
   4e4cc:	ddc00815 	stw	r23,32(sp)
   4e4d0:	dd800715 	stw	r22,28(sp)
   4e4d4:	dcc00415 	stw	r19,16(sp)
   4e4d8:	dc400215 	stw	r17,8(sp)
   4e4dc:	84003fcc 	andi	r16,r16,255
   4e4e0:	9124703a 	and	r18,r18,r4
   4e4e4:	a829883a 	mov	r20,r21
   4e4e8:	af003fcc 	andi	fp,r21,255
   4e4ec:	80005426 	beq	r16,zero,4e640 <__mulsf3+0x1a0>
   4e4f0:	00803fc4 	movi	r2,255
   4e4f4:	80802f26 	beq	r16,r2,4e5b4 <__mulsf3+0x114>
   4e4f8:	91002034 	orhi	r4,r18,128
   4e4fc:	202490fa 	slli	r18,r4,3
   4e500:	843fe044 	addi	r16,r16,-127
   4e504:	0023883a 	mov	r17,zero
   4e508:	002f883a 	mov	r23,zero
   4e50c:	2804d5fa 	srli	r2,r5,23
   4e510:	282cd7fa 	srli	r22,r5,31
   4e514:	01002034 	movhi	r4,128
   4e518:	213fffc4 	addi	r4,r4,-1
   4e51c:	10803fcc 	andi	r2,r2,255
   4e520:	2166703a 	and	r19,r4,r5
   4e524:	b1803fcc 	andi	r6,r22,255
   4e528:	10004c26 	beq	r2,zero,4e65c <__mulsf3+0x1bc>
   4e52c:	00c03fc4 	movi	r3,255
   4e530:	10c04726 	beq	r2,r3,4e650 <__mulsf3+0x1b0>
   4e534:	99002034 	orhi	r4,r19,128
   4e538:	202690fa 	slli	r19,r4,3
   4e53c:	10bfe044 	addi	r2,r2,-127
   4e540:	0007883a 	mov	r3,zero
   4e544:	80a1883a 	add	r16,r16,r2
   4e548:	010003c4 	movi	r4,15
   4e54c:	1c44b03a 	or	r2,r3,r17
   4e550:	b56af03a 	xor	r21,r22,r21
   4e554:	81c00044 	addi	r7,r16,1
   4e558:	20806b36 	bltu	r4,r2,4e708 <__mulsf3+0x268>
   4e55c:	100490ba 	slli	r2,r2,2
   4e560:	01000174 	movhi	r4,5
   4e564:	21395d04 	addi	r4,r4,-6796
   4e568:	1105883a 	add	r2,r2,r4
   4e56c:	10800017 	ldw	r2,0(r2)
   4e570:	1000683a 	jmp	r2
   4e574:	0004e708 	cmpgei	zero,zero,5020
   4e578:	0004e5c8 	cmpgei	zero,zero,5015
   4e57c:	0004e5c8 	cmpgei	zero,zero,5015
   4e580:	0004e5c4 	movi	zero,5015
   4e584:	0004e6ec 	andhi	zero,zero,5019
   4e588:	0004e6ec 	andhi	zero,zero,5019
   4e58c:	0004e6d8 	cmpnei	zero,zero,5019
   4e590:	0004e5c4 	movi	zero,5015
   4e594:	0004e6ec 	andhi	zero,zero,5019
   4e598:	0004e6d8 	cmpnei	zero,zero,5019
   4e59c:	0004e6ec 	andhi	zero,zero,5019
   4e5a0:	0004e5c4 	movi	zero,5015
   4e5a4:	0004e6f8 	rdprs	zero,zero,5019
   4e5a8:	0004e6f8 	rdprs	zero,zero,5019
   4e5ac:	0004e6f8 	rdprs	zero,zero,5019
   4e5b0:	0004e808 	cmpgei	zero,zero,5024
   4e5b4:	90003b1e 	bne	r18,zero,4e6a4 <__mulsf3+0x204>
   4e5b8:	04400204 	movi	r17,8
   4e5bc:	05c00084 	movi	r23,2
   4e5c0:	003fd206 	br	4e50c <__alt_data_end+0xfffce50c>
   4e5c4:	302b883a 	mov	r21,r6
   4e5c8:	00800084 	movi	r2,2
   4e5cc:	18802626 	beq	r3,r2,4e668 <__mulsf3+0x1c8>
   4e5d0:	008000c4 	movi	r2,3
   4e5d4:	1880b826 	beq	r3,r2,4e8b8 <__mulsf3+0x418>
   4e5d8:	00800044 	movi	r2,1
   4e5dc:	1880af1e 	bne	r3,r2,4e89c <__mulsf3+0x3fc>
   4e5e0:	a829883a 	mov	r20,r21
   4e5e4:	0007883a 	mov	r3,zero
   4e5e8:	0009883a 	mov	r4,zero
   4e5ec:	18803fcc 	andi	r2,r3,255
   4e5f0:	100695fa 	slli	r3,r2,23
   4e5f4:	a0803fcc 	andi	r2,r20,255
   4e5f8:	100a97fa 	slli	r5,r2,31
   4e5fc:	00802034 	movhi	r2,128
   4e600:	10bfffc4 	addi	r2,r2,-1
   4e604:	2084703a 	and	r2,r4,r2
   4e608:	10c4b03a 	or	r2,r2,r3
   4e60c:	1144b03a 	or	r2,r2,r5
   4e610:	dfc00a17 	ldw	ra,40(sp)
   4e614:	df000917 	ldw	fp,36(sp)
   4e618:	ddc00817 	ldw	r23,32(sp)
   4e61c:	dd800717 	ldw	r22,28(sp)
   4e620:	dd400617 	ldw	r21,24(sp)
   4e624:	dd000517 	ldw	r20,20(sp)
   4e628:	dcc00417 	ldw	r19,16(sp)
   4e62c:	dc800317 	ldw	r18,12(sp)
   4e630:	dc400217 	ldw	r17,8(sp)
   4e634:	dc000117 	ldw	r16,4(sp)
   4e638:	dec00b04 	addi	sp,sp,44
   4e63c:	f800283a 	ret
   4e640:	90000d1e 	bne	r18,zero,4e678 <__mulsf3+0x1d8>
   4e644:	04400104 	movi	r17,4
   4e648:	05c00044 	movi	r23,1
   4e64c:	003faf06 	br	4e50c <__alt_data_end+0xfffce50c>
   4e650:	9806c03a 	cmpne	r3,r19,zero
   4e654:	18c00084 	addi	r3,r3,2
   4e658:	003fba06 	br	4e544 <__alt_data_end+0xfffce544>
   4e65c:	9800141e 	bne	r19,zero,4e6b0 <__mulsf3+0x210>
   4e660:	00c00044 	movi	r3,1
   4e664:	003fb706 	br	4e544 <__alt_data_end+0xfffce544>
   4e668:	a829883a 	mov	r20,r21
   4e66c:	00ffffc4 	movi	r3,-1
   4e670:	0009883a 	mov	r4,zero
   4e674:	003fdd06 	br	4e5ec <__alt_data_end+0xfffce5ec>
   4e678:	9009883a 	mov	r4,r18
   4e67c:	d9400015 	stw	r5,0(sp)
   4e680:	004f5580 	call	4f558 <__clzsi2>
   4e684:	10fffec4 	addi	r3,r2,-5
   4e688:	10801d84 	addi	r2,r2,118
   4e68c:	90e4983a 	sll	r18,r18,r3
   4e690:	00a1c83a 	sub	r16,zero,r2
   4e694:	0023883a 	mov	r17,zero
   4e698:	002f883a 	mov	r23,zero
   4e69c:	d9400017 	ldw	r5,0(sp)
   4e6a0:	003f9a06 	br	4e50c <__alt_data_end+0xfffce50c>
   4e6a4:	04400304 	movi	r17,12
   4e6a8:	05c000c4 	movi	r23,3
   4e6ac:	003f9706 	br	4e50c <__alt_data_end+0xfffce50c>
   4e6b0:	9809883a 	mov	r4,r19
   4e6b4:	d9800015 	stw	r6,0(sp)
   4e6b8:	004f5580 	call	4f558 <__clzsi2>
   4e6bc:	10fffec4 	addi	r3,r2,-5
   4e6c0:	10801d84 	addi	r2,r2,118
   4e6c4:	98e6983a 	sll	r19,r19,r3
   4e6c8:	0085c83a 	sub	r2,zero,r2
   4e6cc:	0007883a 	mov	r3,zero
   4e6d0:	d9800017 	ldw	r6,0(sp)
   4e6d4:	003f9b06 	br	4e544 <__alt_data_end+0xfffce544>
   4e6d8:	01002034 	movhi	r4,128
   4e6dc:	0029883a 	mov	r20,zero
   4e6e0:	213fffc4 	addi	r4,r4,-1
   4e6e4:	00ffffc4 	movi	r3,-1
   4e6e8:	003fc006 	br	4e5ec <__alt_data_end+0xfffce5ec>
   4e6ec:	9027883a 	mov	r19,r18
   4e6f0:	b807883a 	mov	r3,r23
   4e6f4:	003fb406 	br	4e5c8 <__alt_data_end+0xfffce5c8>
   4e6f8:	9027883a 	mov	r19,r18
   4e6fc:	e02b883a 	mov	r21,fp
   4e700:	b807883a 	mov	r3,r23
   4e704:	003fb006 	br	4e5c8 <__alt_data_end+0xfffce5c8>
   4e708:	9028d43a 	srli	r20,r18,16
   4e70c:	982cd43a 	srli	r22,r19,16
   4e710:	94bfffcc 	andi	r18,r18,65535
   4e714:	9cffffcc 	andi	r19,r19,65535
   4e718:	980b883a 	mov	r5,r19
   4e71c:	9009883a 	mov	r4,r18
   4e720:	d9c00015 	stw	r7,0(sp)
   4e724:	004dab40 	call	4dab4 <__mulsi3>
   4e728:	a00b883a 	mov	r5,r20
   4e72c:	9809883a 	mov	r4,r19
   4e730:	1023883a 	mov	r17,r2
   4e734:	004dab40 	call	4dab4 <__mulsi3>
   4e738:	a009883a 	mov	r4,r20
   4e73c:	b00b883a 	mov	r5,r22
   4e740:	1027883a 	mov	r19,r2
   4e744:	004dab40 	call	4dab4 <__mulsi3>
   4e748:	b00b883a 	mov	r5,r22
   4e74c:	9009883a 	mov	r4,r18
   4e750:	1029883a 	mov	r20,r2
   4e754:	004dab40 	call	4dab4 <__mulsi3>
   4e758:	8806d43a 	srli	r3,r17,16
   4e75c:	14c5883a 	add	r2,r2,r19
   4e760:	d9c00017 	ldw	r7,0(sp)
   4e764:	1885883a 	add	r2,r3,r2
   4e768:	14c0022e 	bgeu	r2,r19,4e774 <__mulsf3+0x2d4>
   4e76c:	00c00074 	movhi	r3,1
   4e770:	a0e9883a 	add	r20,r20,r3
   4e774:	1026943a 	slli	r19,r2,16
   4e778:	8c7fffcc 	andi	r17,r17,65535
   4e77c:	1004d43a 	srli	r2,r2,16
   4e780:	9c63883a 	add	r17,r19,r17
   4e784:	882691ba 	slli	r19,r17,6
   4e788:	1505883a 	add	r2,r2,r20
   4e78c:	8822d6ba 	srli	r17,r17,26
   4e790:	100891ba 	slli	r4,r2,6
   4e794:	9826c03a 	cmpne	r19,r19,zero
   4e798:	9c62b03a 	or	r17,r19,r17
   4e79c:	8926b03a 	or	r19,r17,r4
   4e7a0:	9882002c 	andhi	r2,r19,2048
   4e7a4:	10000426 	beq	r2,zero,4e7b8 <__mulsf3+0x318>
   4e7a8:	9804d07a 	srli	r2,r19,1
   4e7ac:	9900004c 	andi	r4,r19,1
   4e7b0:	3821883a 	mov	r16,r7
   4e7b4:	1126b03a 	or	r19,r2,r4
   4e7b8:	80c01fc4 	addi	r3,r16,127
   4e7bc:	00c0210e 	bge	zero,r3,4e844 <__mulsf3+0x3a4>
   4e7c0:	988001cc 	andi	r2,r19,7
   4e7c4:	10000426 	beq	r2,zero,4e7d8 <__mulsf3+0x338>
   4e7c8:	988003cc 	andi	r2,r19,15
   4e7cc:	01000104 	movi	r4,4
   4e7d0:	11000126 	beq	r2,r4,4e7d8 <__mulsf3+0x338>
   4e7d4:	9927883a 	add	r19,r19,r4
   4e7d8:	9882002c 	andhi	r2,r19,2048
   4e7dc:	10000426 	beq	r2,zero,4e7f0 <__mulsf3+0x350>
   4e7e0:	00be0034 	movhi	r2,63488
   4e7e4:	10bfffc4 	addi	r2,r2,-1
   4e7e8:	80c02004 	addi	r3,r16,128
   4e7ec:	98a6703a 	and	r19,r19,r2
   4e7f0:	00803f84 	movi	r2,254
   4e7f4:	10ff9c16 	blt	r2,r3,4e668 <__alt_data_end+0xfffce668>
   4e7f8:	980891ba 	slli	r4,r19,6
   4e7fc:	a829883a 	mov	r20,r21
   4e800:	2008d27a 	srli	r4,r4,9
   4e804:	003f7906 	br	4e5ec <__alt_data_end+0xfffce5ec>
   4e808:	9080102c 	andhi	r2,r18,64
   4e80c:	10000826 	beq	r2,zero,4e830 <__mulsf3+0x390>
   4e810:	9880102c 	andhi	r2,r19,64
   4e814:	1000061e 	bne	r2,zero,4e830 <__mulsf3+0x390>
   4e818:	00802034 	movhi	r2,128
   4e81c:	99001034 	orhi	r4,r19,64
   4e820:	10bfffc4 	addi	r2,r2,-1
   4e824:	b029883a 	mov	r20,r22
   4e828:	2088703a 	and	r4,r4,r2
   4e82c:	003fad06 	br	4e6e4 <__alt_data_end+0xfffce6e4>
   4e830:	00802034 	movhi	r2,128
   4e834:	91001034 	orhi	r4,r18,64
   4e838:	10bfffc4 	addi	r2,r2,-1
   4e83c:	2088703a 	and	r4,r4,r2
   4e840:	003fa806 	br	4e6e4 <__alt_data_end+0xfffce6e4>
   4e844:	00800044 	movi	r2,1
   4e848:	10c7c83a 	sub	r3,r2,r3
   4e84c:	008006c4 	movi	r2,27
   4e850:	10ff6316 	blt	r2,r3,4e5e0 <__alt_data_end+0xfffce5e0>
   4e854:	00800804 	movi	r2,32
   4e858:	10c5c83a 	sub	r2,r2,r3
   4e85c:	9884983a 	sll	r2,r19,r2
   4e860:	98c6d83a 	srl	r3,r19,r3
   4e864:	1004c03a 	cmpne	r2,r2,zero
   4e868:	1884b03a 	or	r2,r3,r2
   4e86c:	10c001cc 	andi	r3,r2,7
   4e870:	18000426 	beq	r3,zero,4e884 <__mulsf3+0x3e4>
   4e874:	10c003cc 	andi	r3,r2,15
   4e878:	01000104 	movi	r4,4
   4e87c:	19000126 	beq	r3,r4,4e884 <__mulsf3+0x3e4>
   4e880:	1105883a 	add	r2,r2,r4
   4e884:	10c1002c 	andhi	r3,r2,1024
   4e888:	18000626 	beq	r3,zero,4e8a4 <__mulsf3+0x404>
   4e88c:	a829883a 	mov	r20,r21
   4e890:	00c00044 	movi	r3,1
   4e894:	0009883a 	mov	r4,zero
   4e898:	003f5406 	br	4e5ec <__alt_data_end+0xfffce5ec>
   4e89c:	3821883a 	mov	r16,r7
   4e8a0:	003fc506 	br	4e7b8 <__alt_data_end+0xfffce7b8>
   4e8a4:	100491ba 	slli	r2,r2,6
   4e8a8:	a829883a 	mov	r20,r21
   4e8ac:	0007883a 	mov	r3,zero
   4e8b0:	1008d27a 	srli	r4,r2,9
   4e8b4:	003f4d06 	br	4e5ec <__alt_data_end+0xfffce5ec>
   4e8b8:	00802034 	movhi	r2,128
   4e8bc:	99001034 	orhi	r4,r19,64
   4e8c0:	10bfffc4 	addi	r2,r2,-1
   4e8c4:	a829883a 	mov	r20,r21
   4e8c8:	2088703a 	and	r4,r4,r2
   4e8cc:	003f8506 	br	4e6e4 <__alt_data_end+0xfffce6e4>

0004e8d0 <__subsf3>:
   4e8d0:	defffc04 	addi	sp,sp,-16
   4e8d4:	280cd5fa 	srli	r6,r5,23
   4e8d8:	dc000015 	stw	r16,0(sp)
   4e8dc:	01c02034 	movhi	r7,128
   4e8e0:	2020d5fa 	srli	r16,r4,23
   4e8e4:	39ffffc4 	addi	r7,r7,-1
   4e8e8:	3906703a 	and	r3,r7,r4
   4e8ec:	dc400115 	stw	r17,4(sp)
   4e8f0:	394e703a 	and	r7,r7,r5
   4e8f4:	2022d7fa 	srli	r17,r4,31
   4e8f8:	dfc00315 	stw	ra,12(sp)
   4e8fc:	dc800215 	stw	r18,8(sp)
   4e900:	31803fcc 	andi	r6,r6,255
   4e904:	01003fc4 	movi	r4,255
   4e908:	84003fcc 	andi	r16,r16,255
   4e90c:	180690fa 	slli	r3,r3,3
   4e910:	2804d7fa 	srli	r2,r5,31
   4e914:	380e90fa 	slli	r7,r7,3
   4e918:	31006d26 	beq	r6,r4,4ead0 <__subsf3+0x200>
   4e91c:	1080005c 	xori	r2,r2,1
   4e920:	8189c83a 	sub	r4,r16,r6
   4e924:	14404f26 	beq	r2,r17,4ea64 <__subsf3+0x194>
   4e928:	0100770e 	bge	zero,r4,4eb08 <__subsf3+0x238>
   4e92c:	30001e1e 	bne	r6,zero,4e9a8 <__subsf3+0xd8>
   4e930:	38006a1e 	bne	r7,zero,4eadc <__subsf3+0x20c>
   4e934:	188001cc 	andi	r2,r3,7
   4e938:	10000426 	beq	r2,zero,4e94c <__subsf3+0x7c>
   4e93c:	188003cc 	andi	r2,r3,15
   4e940:	01000104 	movi	r4,4
   4e944:	11000126 	beq	r2,r4,4e94c <__subsf3+0x7c>
   4e948:	1907883a 	add	r3,r3,r4
   4e94c:	1881002c 	andhi	r2,r3,1024
   4e950:	10003926 	beq	r2,zero,4ea38 <__subsf3+0x168>
   4e954:	84000044 	addi	r16,r16,1
   4e958:	00803fc4 	movi	r2,255
   4e95c:	80807526 	beq	r16,r2,4eb34 <__subsf3+0x264>
   4e960:	180691ba 	slli	r3,r3,6
   4e964:	8880004c 	andi	r2,r17,1
   4e968:	180ad27a 	srli	r5,r3,9
   4e96c:	84003fcc 	andi	r16,r16,255
   4e970:	800695fa 	slli	r3,r16,23
   4e974:	10803fcc 	andi	r2,r2,255
   4e978:	01002034 	movhi	r4,128
   4e97c:	213fffc4 	addi	r4,r4,-1
   4e980:	100497fa 	slli	r2,r2,31
   4e984:	2920703a 	and	r16,r5,r4
   4e988:	80e0b03a 	or	r16,r16,r3
   4e98c:	8084b03a 	or	r2,r16,r2
   4e990:	dfc00317 	ldw	ra,12(sp)
   4e994:	dc800217 	ldw	r18,8(sp)
   4e998:	dc400117 	ldw	r17,4(sp)
   4e99c:	dc000017 	ldw	r16,0(sp)
   4e9a0:	dec00404 	addi	sp,sp,16
   4e9a4:	f800283a 	ret
   4e9a8:	00803fc4 	movi	r2,255
   4e9ac:	80bfe126 	beq	r16,r2,4e934 <__alt_data_end+0xfffce934>
   4e9b0:	39c10034 	orhi	r7,r7,1024
   4e9b4:	008006c4 	movi	r2,27
   4e9b8:	11007416 	blt	r2,r4,4eb8c <__subsf3+0x2bc>
   4e9bc:	00800804 	movi	r2,32
   4e9c0:	1105c83a 	sub	r2,r2,r4
   4e9c4:	3884983a 	sll	r2,r7,r2
   4e9c8:	390ed83a 	srl	r7,r7,r4
   4e9cc:	1008c03a 	cmpne	r4,r2,zero
   4e9d0:	390eb03a 	or	r7,r7,r4
   4e9d4:	19c7c83a 	sub	r3,r3,r7
   4e9d8:	1881002c 	andhi	r2,r3,1024
   4e9dc:	10001426 	beq	r2,zero,4ea30 <__subsf3+0x160>
   4e9e0:	04810034 	movhi	r18,1024
   4e9e4:	94bfffc4 	addi	r18,r18,-1
   4e9e8:	1ca4703a 	and	r18,r3,r18
   4e9ec:	9009883a 	mov	r4,r18
   4e9f0:	004f5580 	call	4f558 <__clzsi2>
   4e9f4:	10bffec4 	addi	r2,r2,-5
   4e9f8:	90a4983a 	sll	r18,r18,r2
   4e9fc:	14005116 	blt	r2,r16,4eb44 <__subsf3+0x274>
   4ea00:	1405c83a 	sub	r2,r2,r16
   4ea04:	10c00044 	addi	r3,r2,1
   4ea08:	00800804 	movi	r2,32
   4ea0c:	10c5c83a 	sub	r2,r2,r3
   4ea10:	9084983a 	sll	r2,r18,r2
   4ea14:	90e4d83a 	srl	r18,r18,r3
   4ea18:	0021883a 	mov	r16,zero
   4ea1c:	1006c03a 	cmpne	r3,r2,zero
   4ea20:	90c6b03a 	or	r3,r18,r3
   4ea24:	003fc306 	br	4e934 <__alt_data_end+0xfffce934>
   4ea28:	2000e026 	beq	r4,zero,4edac <__subsf3+0x4dc>
   4ea2c:	2007883a 	mov	r3,r4
   4ea30:	188001cc 	andi	r2,r3,7
   4ea34:	103fc11e 	bne	r2,zero,4e93c <__alt_data_end+0xfffce93c>
   4ea38:	180ad0fa 	srli	r5,r3,3
   4ea3c:	00c03fc4 	movi	r3,255
   4ea40:	8880004c 	andi	r2,r17,1
   4ea44:	80c0031e 	bne	r16,r3,4ea54 <__subsf3+0x184>
   4ea48:	28006d26 	beq	r5,zero,4ec00 <__subsf3+0x330>
   4ea4c:	29401034 	orhi	r5,r5,64
   4ea50:	043fffc4 	movi	r16,-1
   4ea54:	00c02034 	movhi	r3,128
   4ea58:	18ffffc4 	addi	r3,r3,-1
   4ea5c:	28ca703a 	and	r5,r5,r3
   4ea60:	003fc206 	br	4e96c <__alt_data_end+0xfffce96c>
   4ea64:	01003c0e 	bge	zero,r4,4eb58 <__subsf3+0x288>
   4ea68:	30002126 	beq	r6,zero,4eaf0 <__subsf3+0x220>
   4ea6c:	01403fc4 	movi	r5,255
   4ea70:	817fb026 	beq	r16,r5,4e934 <__alt_data_end+0xfffce934>
   4ea74:	39c10034 	orhi	r7,r7,1024
   4ea78:	014006c4 	movi	r5,27
   4ea7c:	29007416 	blt	r5,r4,4ec50 <__subsf3+0x380>
   4ea80:	01400804 	movi	r5,32
   4ea84:	290bc83a 	sub	r5,r5,r4
   4ea88:	394a983a 	sll	r5,r7,r5
   4ea8c:	390ed83a 	srl	r7,r7,r4
   4ea90:	2808c03a 	cmpne	r4,r5,zero
   4ea94:	390eb03a 	or	r7,r7,r4
   4ea98:	19c7883a 	add	r3,r3,r7
   4ea9c:	1901002c 	andhi	r4,r3,1024
   4eaa0:	20003826 	beq	r4,zero,4eb84 <__subsf3+0x2b4>
   4eaa4:	84000044 	addi	r16,r16,1
   4eaa8:	01003fc4 	movi	r4,255
   4eaac:	81005426 	beq	r16,r4,4ec00 <__subsf3+0x330>
   4eab0:	1023883a 	mov	r17,r2
   4eab4:	00bf0034 	movhi	r2,64512
   4eab8:	10bfffc4 	addi	r2,r2,-1
   4eabc:	1900004c 	andi	r4,r3,1
   4eac0:	1886703a 	and	r3,r3,r2
   4eac4:	1806d07a 	srli	r3,r3,1
   4eac8:	1906b03a 	or	r3,r3,r4
   4eacc:	003f9906 	br	4e934 <__alt_data_end+0xfffce934>
   4ead0:	383f9226 	beq	r7,zero,4e91c <__alt_data_end+0xfffce91c>
   4ead4:	10803fcc 	andi	r2,r2,255
   4ead8:	003f9106 	br	4e920 <__alt_data_end+0xfffce920>
   4eadc:	213fffc4 	addi	r4,r4,-1
   4eae0:	203fbc26 	beq	r4,zero,4e9d4 <__alt_data_end+0xfffce9d4>
   4eae4:	00803fc4 	movi	r2,255
   4eae8:	80bfb21e 	bne	r16,r2,4e9b4 <__alt_data_end+0xfffce9b4>
   4eaec:	003f9106 	br	4e934 <__alt_data_end+0xfffce934>
   4eaf0:	383f9026 	beq	r7,zero,4e934 <__alt_data_end+0xfffce934>
   4eaf4:	213fffc4 	addi	r4,r4,-1
   4eaf8:	203fe726 	beq	r4,zero,4ea98 <__alt_data_end+0xfffcea98>
   4eafc:	01403fc4 	movi	r5,255
   4eb00:	817fdd1e 	bne	r16,r5,4ea78 <__alt_data_end+0xfffcea78>
   4eb04:	003f8b06 	br	4e934 <__alt_data_end+0xfffce934>
   4eb08:	2000221e 	bne	r4,zero,4eb94 <__subsf3+0x2c4>
   4eb0c:	81000044 	addi	r4,r16,1
   4eb10:	21003fcc 	andi	r4,r4,255
   4eb14:	01400044 	movi	r5,1
   4eb18:	2900470e 	bge	r5,r4,4ec38 <__subsf3+0x368>
   4eb1c:	19e5c83a 	sub	r18,r3,r7
   4eb20:	9141002c 	andhi	r5,r18,1024
   4eb24:	28002d26 	beq	r5,zero,4ebdc <__subsf3+0x30c>
   4eb28:	38e5c83a 	sub	r18,r7,r3
   4eb2c:	1023883a 	mov	r17,r2
   4eb30:	003fae06 	br	4e9ec <__alt_data_end+0xfffce9ec>
   4eb34:	8880004c 	andi	r2,r17,1
   4eb38:	043fffc4 	movi	r16,-1
   4eb3c:	000b883a 	mov	r5,zero
   4eb40:	003f8a06 	br	4e96c <__alt_data_end+0xfffce96c>
   4eb44:	00ff0034 	movhi	r3,64512
   4eb48:	18ffffc4 	addi	r3,r3,-1
   4eb4c:	80a1c83a 	sub	r16,r16,r2
   4eb50:	90c6703a 	and	r3,r18,r3
   4eb54:	003f7706 	br	4e934 <__alt_data_end+0xfffce934>
   4eb58:	2000431e 	bne	r4,zero,4ec68 <__subsf3+0x398>
   4eb5c:	81000044 	addi	r4,r16,1
   4eb60:	21803fcc 	andi	r6,r4,255
   4eb64:	01400044 	movi	r5,1
   4eb68:	2980280e 	bge	r5,r6,4ec0c <__subsf3+0x33c>
   4eb6c:	01403fc4 	movi	r5,255
   4eb70:	21402326 	beq	r4,r5,4ec00 <__subsf3+0x330>
   4eb74:	19c7883a 	add	r3,r3,r7
   4eb78:	1806d07a 	srli	r3,r3,1
   4eb7c:	2021883a 	mov	r16,r4
   4eb80:	003f6c06 	br	4e934 <__alt_data_end+0xfffce934>
   4eb84:	1023883a 	mov	r17,r2
   4eb88:	003fa906 	br	4ea30 <__alt_data_end+0xfffcea30>
   4eb8c:	01c00044 	movi	r7,1
   4eb90:	003f9006 	br	4e9d4 <__alt_data_end+0xfffce9d4>
   4eb94:	8000151e 	bne	r16,zero,4ebec <__subsf3+0x31c>
   4eb98:	18002f26 	beq	r3,zero,4ec58 <__subsf3+0x388>
   4eb9c:	0108303a 	nor	r4,zero,r4
   4eba0:	20000a26 	beq	r4,zero,4ebcc <__subsf3+0x2fc>
   4eba4:	01403fc4 	movi	r5,255
   4eba8:	31402b26 	beq	r6,r5,4ec58 <__subsf3+0x388>
   4ebac:	014006c4 	movi	r5,27
   4ebb0:	29006e16 	blt	r5,r4,4ed6c <__subsf3+0x49c>
   4ebb4:	01400804 	movi	r5,32
   4ebb8:	290bc83a 	sub	r5,r5,r4
   4ebbc:	194a983a 	sll	r5,r3,r5
   4ebc0:	1908d83a 	srl	r4,r3,r4
   4ebc4:	2806c03a 	cmpne	r3,r5,zero
   4ebc8:	20c6b03a 	or	r3,r4,r3
   4ebcc:	38c7c83a 	sub	r3,r7,r3
   4ebd0:	3021883a 	mov	r16,r6
   4ebd4:	1023883a 	mov	r17,r2
   4ebd8:	003f7f06 	br	4e9d8 <__alt_data_end+0xfffce9d8>
   4ebdc:	903f831e 	bne	r18,zero,4e9ec <__alt_data_end+0xfffce9ec>
   4ebe0:	0005883a 	mov	r2,zero
   4ebe4:	0021883a 	mov	r16,zero
   4ebe8:	003f9a06 	br	4ea54 <__alt_data_end+0xfffcea54>
   4ebec:	01403fc4 	movi	r5,255
   4ebf0:	31401926 	beq	r6,r5,4ec58 <__subsf3+0x388>
   4ebf4:	0109c83a 	sub	r4,zero,r4
   4ebf8:	18c10034 	orhi	r3,r3,1024
   4ebfc:	003feb06 	br	4ebac <__alt_data_end+0xfffcebac>
   4ec00:	043fffc4 	movi	r16,-1
   4ec04:	000b883a 	mov	r5,zero
   4ec08:	003f5806 	br	4e96c <__alt_data_end+0xfffce96c>
   4ec0c:	8000481e 	bne	r16,zero,4ed30 <__subsf3+0x460>
   4ec10:	18006226 	beq	r3,zero,4ed9c <__subsf3+0x4cc>
   4ec14:	383f4726 	beq	r7,zero,4e934 <__alt_data_end+0xfffce934>
   4ec18:	19c7883a 	add	r3,r3,r7
   4ec1c:	1881002c 	andhi	r2,r3,1024
   4ec20:	103f8326 	beq	r2,zero,4ea30 <__alt_data_end+0xfffcea30>
   4ec24:	00bf0034 	movhi	r2,64512
   4ec28:	10bfffc4 	addi	r2,r2,-1
   4ec2c:	2821883a 	mov	r16,r5
   4ec30:	1886703a 	and	r3,r3,r2
   4ec34:	003f3f06 	br	4e934 <__alt_data_end+0xfffce934>
   4ec38:	80001c1e 	bne	r16,zero,4ecac <__subsf3+0x3dc>
   4ec3c:	1800261e 	bne	r3,zero,4ecd8 <__subsf3+0x408>
   4ec40:	38004c26 	beq	r7,zero,4ed74 <__subsf3+0x4a4>
   4ec44:	3807883a 	mov	r3,r7
   4ec48:	1023883a 	mov	r17,r2
   4ec4c:	003f3906 	br	4e934 <__alt_data_end+0xfffce934>
   4ec50:	01c00044 	movi	r7,1
   4ec54:	003f9006 	br	4ea98 <__alt_data_end+0xfffcea98>
   4ec58:	3807883a 	mov	r3,r7
   4ec5c:	3021883a 	mov	r16,r6
   4ec60:	1023883a 	mov	r17,r2
   4ec64:	003f3306 	br	4e934 <__alt_data_end+0xfffce934>
   4ec68:	8000161e 	bne	r16,zero,4ecc4 <__subsf3+0x3f4>
   4ec6c:	18002d26 	beq	r3,zero,4ed24 <__subsf3+0x454>
   4ec70:	0108303a 	nor	r4,zero,r4
   4ec74:	20000a26 	beq	r4,zero,4eca0 <__subsf3+0x3d0>
   4ec78:	01403fc4 	movi	r5,255
   4ec7c:	31402926 	beq	r6,r5,4ed24 <__subsf3+0x454>
   4ec80:	014006c4 	movi	r5,27
   4ec84:	29004716 	blt	r5,r4,4eda4 <__subsf3+0x4d4>
   4ec88:	01400804 	movi	r5,32
   4ec8c:	290bc83a 	sub	r5,r5,r4
   4ec90:	194a983a 	sll	r5,r3,r5
   4ec94:	1908d83a 	srl	r4,r3,r4
   4ec98:	2806c03a 	cmpne	r3,r5,zero
   4ec9c:	20c6b03a 	or	r3,r4,r3
   4eca0:	19c7883a 	add	r3,r3,r7
   4eca4:	3021883a 	mov	r16,r6
   4eca8:	003f7c06 	br	4ea9c <__alt_data_end+0xfffcea9c>
   4ecac:	1800111e 	bne	r3,zero,4ecf4 <__subsf3+0x424>
   4ecb0:	38003326 	beq	r7,zero,4ed80 <__subsf3+0x4b0>
   4ecb4:	3807883a 	mov	r3,r7
   4ecb8:	1023883a 	mov	r17,r2
   4ecbc:	04003fc4 	movi	r16,255
   4ecc0:	003f1c06 	br	4e934 <__alt_data_end+0xfffce934>
   4ecc4:	01403fc4 	movi	r5,255
   4ecc8:	31401626 	beq	r6,r5,4ed24 <__subsf3+0x454>
   4eccc:	0109c83a 	sub	r4,zero,r4
   4ecd0:	18c10034 	orhi	r3,r3,1024
   4ecd4:	003fea06 	br	4ec80 <__alt_data_end+0xfffcec80>
   4ecd8:	383f1626 	beq	r7,zero,4e934 <__alt_data_end+0xfffce934>
   4ecdc:	19c9c83a 	sub	r4,r3,r7
   4ece0:	2141002c 	andhi	r5,r4,1024
   4ece4:	283f5026 	beq	r5,zero,4ea28 <__alt_data_end+0xfffcea28>
   4ece8:	38c7c83a 	sub	r3,r7,r3
   4ecec:	1023883a 	mov	r17,r2
   4ecf0:	003f1006 	br	4e934 <__alt_data_end+0xfffce934>
   4ecf4:	38001b26 	beq	r7,zero,4ed64 <__subsf3+0x494>
   4ecf8:	1806d0fa 	srli	r3,r3,3
   4ecfc:	1900102c 	andhi	r4,r3,64
   4ed00:	20000526 	beq	r4,zero,4ed18 <__subsf3+0x448>
   4ed04:	380ed0fa 	srli	r7,r7,3
   4ed08:	3900102c 	andhi	r4,r7,64
   4ed0c:	2000021e 	bne	r4,zero,4ed18 <__subsf3+0x448>
   4ed10:	3807883a 	mov	r3,r7
   4ed14:	1023883a 	mov	r17,r2
   4ed18:	180690fa 	slli	r3,r3,3
   4ed1c:	04003fc4 	movi	r16,255
   4ed20:	003f0406 	br	4e934 <__alt_data_end+0xfffce934>
   4ed24:	3807883a 	mov	r3,r7
   4ed28:	3021883a 	mov	r16,r6
   4ed2c:	003f0106 	br	4e934 <__alt_data_end+0xfffce934>
   4ed30:	18001726 	beq	r3,zero,4ed90 <__subsf3+0x4c0>
   4ed34:	38000b26 	beq	r7,zero,4ed64 <__subsf3+0x494>
   4ed38:	1806d0fa 	srli	r3,r3,3
   4ed3c:	1900102c 	andhi	r4,r3,64
   4ed40:	20000426 	beq	r4,zero,4ed54 <__subsf3+0x484>
   4ed44:	380ed0fa 	srli	r7,r7,3
   4ed48:	3900102c 	andhi	r4,r7,64
   4ed4c:	2000011e 	bne	r4,zero,4ed54 <__subsf3+0x484>
   4ed50:	3807883a 	mov	r3,r7
   4ed54:	180690fa 	slli	r3,r3,3
   4ed58:	1023883a 	mov	r17,r2
   4ed5c:	04003fc4 	movi	r16,255
   4ed60:	003ef406 	br	4e934 <__alt_data_end+0xfffce934>
   4ed64:	04003fc4 	movi	r16,255
   4ed68:	003ef206 	br	4e934 <__alt_data_end+0xfffce934>
   4ed6c:	00c00044 	movi	r3,1
   4ed70:	003f9606 	br	4ebcc <__alt_data_end+0xfffcebcc>
   4ed74:	000b883a 	mov	r5,zero
   4ed78:	0005883a 	mov	r2,zero
   4ed7c:	003f3506 	br	4ea54 <__alt_data_end+0xfffcea54>
   4ed80:	01402034 	movhi	r5,128
   4ed84:	297fffc4 	addi	r5,r5,-1
   4ed88:	0005883a 	mov	r2,zero
   4ed8c:	003f2f06 	br	4ea4c <__alt_data_end+0xfffcea4c>
   4ed90:	3807883a 	mov	r3,r7
   4ed94:	04003fc4 	movi	r16,255
   4ed98:	003ee606 	br	4e934 <__alt_data_end+0xfffce934>
   4ed9c:	3807883a 	mov	r3,r7
   4eda0:	003ee406 	br	4e934 <__alt_data_end+0xfffce934>
   4eda4:	00c00044 	movi	r3,1
   4eda8:	003fbd06 	br	4eca0 <__alt_data_end+0xfffceca0>
   4edac:	0005883a 	mov	r2,zero
   4edb0:	003f2806 	br	4ea54 <__alt_data_end+0xfffcea54>

0004edb4 <__fixsfsi>:
   4edb4:	200ad5fa 	srli	r5,r4,23
   4edb8:	00c02034 	movhi	r3,128
   4edbc:	18ffffc4 	addi	r3,r3,-1
   4edc0:	29403fcc 	andi	r5,r5,255
   4edc4:	00801f84 	movi	r2,126
   4edc8:	1906703a 	and	r3,r3,r4
   4edcc:	2008d7fa 	srli	r4,r4,31
   4edd0:	11400e0e 	bge	r2,r5,4ee0c <__fixsfsi+0x58>
   4edd4:	00802744 	movi	r2,157
   4edd8:	11400816 	blt	r2,r5,4edfc <__fixsfsi+0x48>
   4eddc:	00802544 	movi	r2,149
   4ede0:	18c02034 	orhi	r3,r3,128
   4ede4:	11400b0e 	bge	r2,r5,4ee14 <__fixsfsi+0x60>
   4ede8:	28bfda84 	addi	r2,r5,-150
   4edec:	1884983a 	sll	r2,r3,r2
   4edf0:	20000726 	beq	r4,zero,4ee10 <__fixsfsi+0x5c>
   4edf4:	0085c83a 	sub	r2,zero,r2
   4edf8:	f800283a 	ret
   4edfc:	00a00034 	movhi	r2,32768
   4ee00:	10bfffc4 	addi	r2,r2,-1
   4ee04:	2085883a 	add	r2,r4,r2
   4ee08:	f800283a 	ret
   4ee0c:	0005883a 	mov	r2,zero
   4ee10:	f800283a 	ret
   4ee14:	00802584 	movi	r2,150
   4ee18:	1145c83a 	sub	r2,r2,r5
   4ee1c:	1884d83a 	srl	r2,r3,r2
   4ee20:	003ff306 	br	4edf0 <__alt_data_end+0xfffcedf0>

0004ee24 <__floatsisf>:
   4ee24:	defffd04 	addi	sp,sp,-12
   4ee28:	dfc00215 	stw	ra,8(sp)
   4ee2c:	dc400115 	stw	r17,4(sp)
   4ee30:	dc000015 	stw	r16,0(sp)
   4ee34:	20003526 	beq	r4,zero,4ef0c <__floatsisf+0xe8>
   4ee38:	2021883a 	mov	r16,r4
   4ee3c:	2022d7fa 	srli	r17,r4,31
   4ee40:	20003616 	blt	r4,zero,4ef1c <__floatsisf+0xf8>
   4ee44:	8009883a 	mov	r4,r16
   4ee48:	004f5580 	call	4f558 <__clzsi2>
   4ee4c:	00c02784 	movi	r3,158
   4ee50:	1887c83a 	sub	r3,r3,r2
   4ee54:	01002584 	movi	r4,150
   4ee58:	20c01416 	blt	r4,r3,4eeac <__floatsisf+0x88>
   4ee5c:	20c9c83a 	sub	r4,r4,r3
   4ee60:	8120983a 	sll	r16,r16,r4
   4ee64:	00802034 	movhi	r2,128
   4ee68:	10bfffc4 	addi	r2,r2,-1
   4ee6c:	8809883a 	mov	r4,r17
   4ee70:	80a0703a 	and	r16,r16,r2
   4ee74:	18803fcc 	andi	r2,r3,255
   4ee78:	100695fa 	slli	r3,r2,23
   4ee7c:	20803fcc 	andi	r2,r4,255
   4ee80:	100897fa 	slli	r4,r2,31
   4ee84:	00802034 	movhi	r2,128
   4ee88:	10bfffc4 	addi	r2,r2,-1
   4ee8c:	8084703a 	and	r2,r16,r2
   4ee90:	10c4b03a 	or	r2,r2,r3
   4ee94:	1104b03a 	or	r2,r2,r4
   4ee98:	dfc00217 	ldw	ra,8(sp)
   4ee9c:	dc400117 	ldw	r17,4(sp)
   4eea0:	dc000017 	ldw	r16,0(sp)
   4eea4:	dec00304 	addi	sp,sp,12
   4eea8:	f800283a 	ret
   4eeac:	01002644 	movi	r4,153
   4eeb0:	20c01c16 	blt	r4,r3,4ef24 <__floatsisf+0x100>
   4eeb4:	20c9c83a 	sub	r4,r4,r3
   4eeb8:	8120983a 	sll	r16,r16,r4
   4eebc:	013f0034 	movhi	r4,64512
   4eec0:	213fffc4 	addi	r4,r4,-1
   4eec4:	814001cc 	andi	r5,r16,7
   4eec8:	8108703a 	and	r4,r16,r4
   4eecc:	28000426 	beq	r5,zero,4eee0 <__floatsisf+0xbc>
   4eed0:	840003cc 	andi	r16,r16,15
   4eed4:	01400104 	movi	r5,4
   4eed8:	81400126 	beq	r16,r5,4eee0 <__floatsisf+0xbc>
   4eedc:	2149883a 	add	r4,r4,r5
   4eee0:	2141002c 	andhi	r5,r4,1024
   4eee4:	28000526 	beq	r5,zero,4eefc <__floatsisf+0xd8>
   4eee8:	00c027c4 	movi	r3,159
   4eeec:	1887c83a 	sub	r3,r3,r2
   4eef0:	00bf0034 	movhi	r2,64512
   4eef4:	10bfffc4 	addi	r2,r2,-1
   4eef8:	2088703a 	and	r4,r4,r2
   4eefc:	202091ba 	slli	r16,r4,6
   4ef00:	8809883a 	mov	r4,r17
   4ef04:	8020d27a 	srli	r16,r16,9
   4ef08:	003fda06 	br	4ee74 <__alt_data_end+0xfffcee74>
   4ef0c:	0009883a 	mov	r4,zero
   4ef10:	0007883a 	mov	r3,zero
   4ef14:	0021883a 	mov	r16,zero
   4ef18:	003fd606 	br	4ee74 <__alt_data_end+0xfffcee74>
   4ef1c:	0121c83a 	sub	r16,zero,r4
   4ef20:	003fc806 	br	4ee44 <__alt_data_end+0xfffcee44>
   4ef24:	01002e44 	movi	r4,185
   4ef28:	20c9c83a 	sub	r4,r4,r3
   4ef2c:	01400144 	movi	r5,5
   4ef30:	8108983a 	sll	r4,r16,r4
   4ef34:	288bc83a 	sub	r5,r5,r2
   4ef38:	8160d83a 	srl	r16,r16,r5
   4ef3c:	2008c03a 	cmpne	r4,r4,zero
   4ef40:	8120b03a 	or	r16,r16,r4
   4ef44:	003fdd06 	br	4eebc <__alt_data_end+0xfffceebc>

0004ef48 <__floatunsisf>:
   4ef48:	defffe04 	addi	sp,sp,-8
   4ef4c:	dfc00115 	stw	ra,4(sp)
   4ef50:	dc000015 	stw	r16,0(sp)
   4ef54:	20002c26 	beq	r4,zero,4f008 <__floatunsisf+0xc0>
   4ef58:	2021883a 	mov	r16,r4
   4ef5c:	004f5580 	call	4f558 <__clzsi2>
   4ef60:	00c02784 	movi	r3,158
   4ef64:	1887c83a 	sub	r3,r3,r2
   4ef68:	01002584 	movi	r4,150
   4ef6c:	20c00f16 	blt	r4,r3,4efac <__floatunsisf+0x64>
   4ef70:	20c9c83a 	sub	r4,r4,r3
   4ef74:	8108983a 	sll	r4,r16,r4
   4ef78:	00802034 	movhi	r2,128
   4ef7c:	10bfffc4 	addi	r2,r2,-1
   4ef80:	2088703a 	and	r4,r4,r2
   4ef84:	18803fcc 	andi	r2,r3,255
   4ef88:	100695fa 	slli	r3,r2,23
   4ef8c:	00802034 	movhi	r2,128
   4ef90:	10bfffc4 	addi	r2,r2,-1
   4ef94:	2084703a 	and	r2,r4,r2
   4ef98:	10c4b03a 	or	r2,r2,r3
   4ef9c:	dfc00117 	ldw	ra,4(sp)
   4efa0:	dc000017 	ldw	r16,0(sp)
   4efa4:	dec00204 	addi	sp,sp,8
   4efa8:	f800283a 	ret
   4efac:	01002644 	movi	r4,153
   4efb0:	20c01816 	blt	r4,r3,4f014 <__floatunsisf+0xcc>
   4efb4:	20c9c83a 	sub	r4,r4,r3
   4efb8:	8108983a 	sll	r4,r16,r4
   4efbc:	017f0034 	movhi	r5,64512
   4efc0:	297fffc4 	addi	r5,r5,-1
   4efc4:	218001cc 	andi	r6,r4,7
   4efc8:	214a703a 	and	r5,r4,r5
   4efcc:	30000426 	beq	r6,zero,4efe0 <__floatunsisf+0x98>
   4efd0:	210003cc 	andi	r4,r4,15
   4efd4:	01800104 	movi	r6,4
   4efd8:	21800126 	beq	r4,r6,4efe0 <__floatunsisf+0x98>
   4efdc:	298b883a 	add	r5,r5,r6
   4efe0:	2901002c 	andhi	r4,r5,1024
   4efe4:	20000526 	beq	r4,zero,4effc <__floatunsisf+0xb4>
   4efe8:	00c027c4 	movi	r3,159
   4efec:	1887c83a 	sub	r3,r3,r2
   4eff0:	00bf0034 	movhi	r2,64512
   4eff4:	10bfffc4 	addi	r2,r2,-1
   4eff8:	288a703a 	and	r5,r5,r2
   4effc:	280891ba 	slli	r4,r5,6
   4f000:	2008d27a 	srli	r4,r4,9
   4f004:	003fdf06 	br	4ef84 <__alt_data_end+0xfffcef84>
   4f008:	0007883a 	mov	r3,zero
   4f00c:	0009883a 	mov	r4,zero
   4f010:	003fdc06 	br	4ef84 <__alt_data_end+0xfffcef84>
   4f014:	01402e44 	movi	r5,185
   4f018:	28cbc83a 	sub	r5,r5,r3
   4f01c:	01000144 	movi	r4,5
   4f020:	2089c83a 	sub	r4,r4,r2
   4f024:	814a983a 	sll	r5,r16,r5
   4f028:	8108d83a 	srl	r4,r16,r4
   4f02c:	2820c03a 	cmpne	r16,r5,zero
   4f030:	2408b03a 	or	r4,r4,r16
   4f034:	003fe106 	br	4efbc <__alt_data_end+0xfffcefbc>

0004f038 <_Unwind_ForcedUnwind_Phase2>:
   4f038:	defff404 	addi	sp,sp,-48
   4f03c:	dd800915 	stw	r22,36(sp)
   4f040:	058001f4 	movhi	r22,7
   4f044:	ddc00a15 	stw	r23,40(sp)
   4f048:	dd400815 	stw	r21,32(sp)
   4f04c:	dd000715 	stw	r20,28(sp)
   4f050:	dcc00615 	stw	r19,24(sp)
   4f054:	dc400415 	stw	r17,16(sp)
   4f058:	dc000315 	stw	r16,12(sp)
   4f05c:	dfc00b15 	stw	ra,44(sp)
   4f060:	dc800515 	stw	r18,20(sp)
   4f064:	2021883a 	mov	r16,r4
   4f068:	2823883a 	mov	r17,r5
   4f06c:	24c00317 	ldw	r19,12(r4)
   4f070:	25000417 	ldw	r20,16(r4)
   4f074:	28c00017 	ldw	r3,0(r5)
   4f078:	b5880a04 	addi	r22,r22,8232
   4f07c:	054001c4 	movi	r21,7
   4f080:	05c00204 	movi	r23,8
   4f084:	00001606 	br	4f0e0 <_Unwind_ForcedUnwind_Phase2+0xa8>
   4f088:	81800017 	ldw	r6,0(r16)
   4f08c:	81c00117 	ldw	r7,4(r16)
   4f090:	1c800617 	ldw	r18,24(r3)
   4f094:	dd000215 	stw	r20,8(sp)
   4f098:	dc400115 	stw	r17,4(sp)
   4f09c:	dc000015 	stw	r16,0(sp)
   4f0a0:	983ee83a 	callr	r19
   4f0a4:	01400284 	movi	r5,10
   4f0a8:	01000044 	movi	r4,1
   4f0ac:	1000241e 	bne	r2,zero,4f140 <_Unwind_ForcedUnwind_Phase2+0x108>
   4f0b0:	90000726 	beq	r18,zero,4f0d0 <_Unwind_ForcedUnwind_Phase2+0x98>
   4f0b4:	81800017 	ldw	r6,0(r16)
   4f0b8:	81c00117 	ldw	r7,4(r16)
   4f0bc:	dc400115 	stw	r17,4(sp)
   4f0c0:	dc000015 	stw	r16,0(sp)
   4f0c4:	903ee83a 	callr	r18
   4f0c8:	15401f26 	beq	r2,r21,4f148 <_Unwind_ForcedUnwind_Phase2+0x110>
   4f0cc:	15c01c1e 	bne	r2,r23,4f140 <_Unwind_ForcedUnwind_Phase2+0x108>
   4f0d0:	88800017 	ldw	r2,0(r17)
   4f0d4:	10c00017 	ldw	r3,0(r2)
   4f0d8:	b0c00015 	stw	r3,0(r22)
   4f0dc:	88c00015 	stw	r3,0(r17)
   4f0e0:	01400284 	movi	r5,10
   4f0e4:	01000044 	movi	r4,1
   4f0e8:	183fe71e 	bne	r3,zero,4f088 <__alt_data_end+0xfffcf088>
   4f0ec:	81800017 	ldw	r6,0(r16)
   4f0f0:	81c00117 	ldw	r7,4(r16)
   4f0f4:	01400684 	movi	r5,26
   4f0f8:	dd000215 	stw	r20,8(sp)
   4f0fc:	dc400115 	stw	r17,4(sp)
   4f100:	dc000015 	stw	r16,0(sp)
   4f104:	01000044 	movi	r4,1
   4f108:	983ee83a 	callr	r19
   4f10c:	10000c1e 	bne	r2,zero,4f140 <_Unwind_ForcedUnwind_Phase2+0x108>
   4f110:	00800144 	movi	r2,5
   4f114:	dfc00b17 	ldw	ra,44(sp)
   4f118:	ddc00a17 	ldw	r23,40(sp)
   4f11c:	dd800917 	ldw	r22,36(sp)
   4f120:	dd400817 	ldw	r21,32(sp)
   4f124:	dd000717 	ldw	r20,28(sp)
   4f128:	dcc00617 	ldw	r19,24(sp)
   4f12c:	dc800517 	ldw	r18,20(sp)
   4f130:	dc400417 	ldw	r17,16(sp)
   4f134:	dc000317 	ldw	r16,12(sp)
   4f138:	dec00c04 	addi	sp,sp,48
   4f13c:	f800283a 	ret
   4f140:	00800084 	movi	r2,2
   4f144:	003ff306 	br	4f114 <__alt_data_end+0xfffcf114>
   4f148:	a805883a 	mov	r2,r21
   4f14c:	003ff106 	br	4f114 <__alt_data_end+0xfffcf114>

0004f150 <_Unwind_RaiseException_Phase2>:
   4f150:	28c00017 	ldw	r3,0(r5)
   4f154:	defff804 	addi	sp,sp,-32
   4f158:	dcc00515 	stw	r19,20(sp)
   4f15c:	dc800415 	stw	r18,16(sp)
   4f160:	dc400315 	stw	r17,12(sp)
   4f164:	dc000215 	stw	r16,8(sp)
   4f168:	dfc00715 	stw	ra,28(sp)
   4f16c:	dd000615 	stw	r20,24(sp)
   4f170:	2823883a 	mov	r17,r5
   4f174:	2021883a 	mov	r16,r4
   4f178:	048001c4 	movi	r18,7
   4f17c:	04c00204 	movi	r19,8
   4f180:	18001326 	beq	r3,zero,4f1d0 <_Unwind_RaiseException_Phase2+0x80>
   4f184:	81000417 	ldw	r4,16(r16)
   4f188:	1a000617 	ldw	r8,24(r3)
   4f18c:	19001926 	beq	r3,r4,4f1f4 <_Unwind_RaiseException_Phase2+0xa4>
   4f190:	40000c26 	beq	r8,zero,4f1c4 <_Unwind_RaiseException_Phase2+0x74>
   4f194:	01400084 	movi	r5,2
   4f198:	0029883a 	mov	r20,zero
   4f19c:	81800017 	ldw	r6,0(r16)
   4f1a0:	81c00117 	ldw	r7,4(r16)
   4f1a4:	01000044 	movi	r4,1
   4f1a8:	dc400115 	stw	r17,4(sp)
   4f1ac:	dc000015 	stw	r16,0(sp)
   4f1b0:	403ee83a 	callr	r8
   4f1b4:	14801326 	beq	r2,r18,4f204 <_Unwind_RaiseException_Phase2+0xb4>
   4f1b8:	14c0051e 	bne	r2,r19,4f1d0 <_Unwind_RaiseException_Phase2+0x80>
   4f1bc:	a000131e 	bne	r20,zero,4f20c <_Unwind_RaiseException_Phase2+0xbc>
   4f1c0:	88c00017 	ldw	r3,0(r17)
   4f1c4:	18c00017 	ldw	r3,0(r3)
   4f1c8:	88c00015 	stw	r3,0(r17)
   4f1cc:	183fed1e 	bne	r3,zero,4f184 <__alt_data_end+0xfffcf184>
   4f1d0:	00800084 	movi	r2,2
   4f1d4:	dfc00717 	ldw	ra,28(sp)
   4f1d8:	dd000617 	ldw	r20,24(sp)
   4f1dc:	dcc00517 	ldw	r19,20(sp)
   4f1e0:	dc800417 	ldw	r18,16(sp)
   4f1e4:	dc400317 	ldw	r17,12(sp)
   4f1e8:	dc000217 	ldw	r16,8(sp)
   4f1ec:	dec00804 	addi	sp,sp,32
   4f1f0:	f800283a 	ret
   4f1f4:	40000526 	beq	r8,zero,4f20c <_Unwind_RaiseException_Phase2+0xbc>
   4f1f8:	01400184 	movi	r5,6
   4f1fc:	05000104 	movi	r20,4
   4f200:	003fe606 	br	4f19c <__alt_data_end+0xfffcf19c>
   4f204:	9005883a 	mov	r2,r18
   4f208:	003ff206 	br	4f1d4 <__alt_data_end+0xfffcf1d4>
   4f20c:	004f5bc0 	call	4f5bc <abort>

0004f210 <uw_install_context.isra.1>:
   4f210:	20c00017 	ldw	r3,0(r4)
   4f214:	deffff04 	addi	sp,sp,-4
   4f218:	014001f4 	movhi	r5,7
   4f21c:	19000917 	ldw	r4,36(r3)
   4f220:	df000015 	stw	fp,0(sp)
   4f224:	18800804 	addi	r2,r3,32
   4f228:	d839883a 	mov	fp,sp
   4f22c:	29480a04 	addi	r5,r5,8232
   4f230:	28c00015 	stw	r3,0(r5)
   4f234:	17000017 	ldw	fp,0(r2)
   4f238:	1ec00a17 	ldw	sp,40(r3)
   4f23c:	2000683a 	jmp	r4

0004f240 <_Unwind_SjLj_Register>:
   4f240:	008001f4 	movhi	r2,7
   4f244:	10880a04 	addi	r2,r2,8232
   4f248:	10c00017 	ldw	r3,0(r2)
   4f24c:	11000015 	stw	r4,0(r2)
   4f250:	20c00015 	stw	r3,0(r4)
   4f254:	f800283a 	ret

0004f258 <_Unwind_SjLj_Unregister>:
   4f258:	20c00017 	ldw	r3,0(r4)
   4f25c:	008001f4 	movhi	r2,7
   4f260:	10880a04 	addi	r2,r2,8232
   4f264:	10c00015 	stw	r3,0(r2)
   4f268:	f800283a 	ret

0004f26c <_Unwind_GetGR>:
   4f26c:	20800017 	ldw	r2,0(r4)
   4f270:	29400084 	addi	r5,r5,2
   4f274:	294b883a 	add	r5,r5,r5
   4f278:	294b883a 	add	r5,r5,r5
   4f27c:	114b883a 	add	r5,r2,r5
   4f280:	28800017 	ldw	r2,0(r5)
   4f284:	f800283a 	ret

0004f288 <_Unwind_GetCFA>:
   4f288:	20800017 	ldw	r2,0(r4)
   4f28c:	10000226 	beq	r2,zero,4f298 <_Unwind_GetCFA+0x10>
   4f290:	10800a17 	ldw	r2,40(r2)
   4f294:	f800283a 	ret
   4f298:	0005883a 	mov	r2,zero
   4f29c:	f800283a 	ret

0004f2a0 <_Unwind_SetGR>:
   4f2a0:	20800017 	ldw	r2,0(r4)
   4f2a4:	29400084 	addi	r5,r5,2
   4f2a8:	294b883a 	add	r5,r5,r5
   4f2ac:	294b883a 	add	r5,r5,r5
   4f2b0:	114b883a 	add	r5,r2,r5
   4f2b4:	29800015 	stw	r6,0(r5)
   4f2b8:	f800283a 	ret

0004f2bc <_Unwind_GetIP>:
   4f2bc:	20800017 	ldw	r2,0(r4)
   4f2c0:	10800117 	ldw	r2,4(r2)
   4f2c4:	10800044 	addi	r2,r2,1
   4f2c8:	f800283a 	ret

0004f2cc <_Unwind_GetIPInfo>:
   4f2cc:	20800017 	ldw	r2,0(r4)
   4f2d0:	28000015 	stw	zero,0(r5)
   4f2d4:	10000326 	beq	r2,zero,4f2e4 <_Unwind_GetIPInfo+0x18>
   4f2d8:	10800117 	ldw	r2,4(r2)
   4f2dc:	10800044 	addi	r2,r2,1
   4f2e0:	f800283a 	ret
   4f2e4:	0005883a 	mov	r2,zero
   4f2e8:	f800283a 	ret

0004f2ec <_Unwind_SetIP>:
   4f2ec:	20800017 	ldw	r2,0(r4)
   4f2f0:	297fffc4 	addi	r5,r5,-1
   4f2f4:	11400115 	stw	r5,4(r2)
   4f2f8:	f800283a 	ret

0004f2fc <_Unwind_GetLanguageSpecificData>:
   4f2fc:	20800017 	ldw	r2,0(r4)
   4f300:	10800717 	ldw	r2,28(r2)
   4f304:	f800283a 	ret

0004f308 <_Unwind_GetRegionStart>:
   4f308:	0005883a 	mov	r2,zero
   4f30c:	f800283a 	ret

0004f310 <_Unwind_FindEnclosingFunction>:
   4f310:	0005883a 	mov	r2,zero
   4f314:	f800283a 	ret

0004f318 <_Unwind_GetDataRelBase>:
   4f318:	0005883a 	mov	r2,zero
   4f31c:	f800283a 	ret

0004f320 <_Unwind_GetTextRelBase>:
   4f320:	0005883a 	mov	r2,zero
   4f324:	f800283a 	ret

0004f328 <_Unwind_SjLj_RaiseException>:
   4f328:	008001f4 	movhi	r2,7
   4f32c:	defff804 	addi	sp,sp,-32
   4f330:	10880a04 	addi	r2,r2,8232
   4f334:	dc800515 	stw	r18,20(sp)
   4f338:	14800017 	ldw	r18,0(r2)
   4f33c:	dfc00715 	stw	ra,28(sp)
   4f340:	dcc00615 	stw	r19,24(sp)
   4f344:	dc400415 	stw	r17,16(sp)
   4f348:	dc000315 	stw	r16,12(sp)
   4f34c:	dc800215 	stw	r18,8(sp)
   4f350:	90001426 	beq	r18,zero,4f3a4 <_Unwind_SjLj_RaiseException+0x7c>
   4f354:	2021883a 	mov	r16,r4
   4f358:	9005883a 	mov	r2,r18
   4f35c:	04400184 	movi	r17,6
   4f360:	04c00204 	movi	r19,8
   4f364:	10800617 	ldw	r2,24(r2)
   4f368:	10000a26 	beq	r2,zero,4f394 <_Unwind_SjLj_RaiseException+0x6c>
   4f36c:	81800017 	ldw	r6,0(r16)
   4f370:	81c00117 	ldw	r7,4(r16)
   4f374:	01400044 	movi	r5,1
   4f378:	d8c00204 	addi	r3,sp,8
   4f37c:	d8c00115 	stw	r3,4(sp)
   4f380:	dc000015 	stw	r16,0(sp)
   4f384:	2809883a 	mov	r4,r5
   4f388:	103ee83a 	callr	r2
   4f38c:	14400d26 	beq	r2,r17,4f3c4 <_Unwind_SjLj_RaiseException+0x9c>
   4f390:	14c0171e 	bne	r2,r19,4f3f0 <_Unwind_SjLj_RaiseException+0xc8>
   4f394:	d8800217 	ldw	r2,8(sp)
   4f398:	10800017 	ldw	r2,0(r2)
   4f39c:	d8800215 	stw	r2,8(sp)
   4f3a0:	103ff01e 	bne	r2,zero,4f364 <__alt_data_end+0xfffcf364>
   4f3a4:	00800144 	movi	r2,5
   4f3a8:	dfc00717 	ldw	ra,28(sp)
   4f3ac:	dcc00617 	ldw	r19,24(sp)
   4f3b0:	dc800517 	ldw	r18,20(sp)
   4f3b4:	dc400417 	ldw	r17,16(sp)
   4f3b8:	dc000317 	ldw	r16,12(sp)
   4f3bc:	dec00804 	addi	sp,sp,32
   4f3c0:	f800283a 	ret
   4f3c4:	d8800217 	ldw	r2,8(sp)
   4f3c8:	80000315 	stw	zero,12(r16)
   4f3cc:	d9400204 	addi	r5,sp,8
   4f3d0:	80800415 	stw	r2,16(r16)
   4f3d4:	8009883a 	mov	r4,r16
   4f3d8:	dc800215 	stw	r18,8(sp)
   4f3dc:	004f1500 	call	4f150 <_Unwind_RaiseException_Phase2>
   4f3e0:	00c001c4 	movi	r3,7
   4f3e4:	10fff01e 	bne	r2,r3,4f3a8 <__alt_data_end+0xfffcf3a8>
   4f3e8:	d9000204 	addi	r4,sp,8
   4f3ec:	004f2100 	call	4f210 <uw_install_context.isra.1>
   4f3f0:	008000c4 	movi	r2,3
   4f3f4:	003fec06 	br	4f3a8 <__alt_data_end+0xfffcf3a8>

0004f3f8 <_Unwind_SjLj_ForcedUnwind>:
   4f3f8:	00c001f4 	movhi	r3,7
   4f3fc:	18c80a04 	addi	r3,r3,8232
   4f400:	defffe04 	addi	sp,sp,-8
   4f404:	18c00017 	ldw	r3,0(r3)
   4f408:	dfc00115 	stw	ra,4(sp)
   4f40c:	21400315 	stw	r5,12(r4)
   4f410:	21800415 	stw	r6,16(r4)
   4f414:	d80b883a 	mov	r5,sp
   4f418:	d8c00015 	stw	r3,0(sp)
   4f41c:	004f0380 	call	4f038 <_Unwind_ForcedUnwind_Phase2>
   4f420:	00c001c4 	movi	r3,7
   4f424:	10c00326 	beq	r2,r3,4f434 <_Unwind_SjLj_ForcedUnwind+0x3c>
   4f428:	dfc00117 	ldw	ra,4(sp)
   4f42c:	dec00204 	addi	sp,sp,8
   4f430:	f800283a 	ret
   4f434:	d809883a 	mov	r4,sp
   4f438:	004f2100 	call	4f210 <uw_install_context.isra.1>

0004f43c <_Unwind_SjLj_Resume>:
   4f43c:	00c001f4 	movhi	r3,7
   4f440:	18c80a04 	addi	r3,r3,8232
   4f444:	18c00017 	ldw	r3,0(r3)
   4f448:	20800317 	ldw	r2,12(r4)
   4f44c:	defffe04 	addi	sp,sp,-8
   4f450:	dfc00115 	stw	ra,4(sp)
   4f454:	d8c00015 	stw	r3,0(sp)
   4f458:	d80b883a 	mov	r5,sp
   4f45c:	1000041e 	bne	r2,zero,4f470 <_Unwind_SjLj_Resume+0x34>
   4f460:	004f1500 	call	4f150 <_Unwind_RaiseException_Phase2>
   4f464:	00c001c4 	movi	r3,7
   4f468:	10c00326 	beq	r2,r3,4f478 <_Unwind_SjLj_Resume+0x3c>
   4f46c:	004f5bc0 	call	4f5bc <abort>
   4f470:	004f0380 	call	4f038 <_Unwind_ForcedUnwind_Phase2>
   4f474:	003ffb06 	br	4f464 <__alt_data_end+0xfffcf464>
   4f478:	d809883a 	mov	r4,sp
   4f47c:	004f2100 	call	4f210 <uw_install_context.isra.1>

0004f480 <_Unwind_SjLj_Resume_or_Rethrow>:
   4f480:	20800317 	ldw	r2,12(r4)
   4f484:	defffe04 	addi	sp,sp,-8
   4f488:	dfc00115 	stw	ra,4(sp)
   4f48c:	1000041e 	bne	r2,zero,4f4a0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   4f490:	004f3280 	call	4f328 <_Unwind_SjLj_RaiseException>
   4f494:	dfc00117 	ldw	ra,4(sp)
   4f498:	dec00204 	addi	sp,sp,8
   4f49c:	f800283a 	ret
   4f4a0:	008001f4 	movhi	r2,7
   4f4a4:	10880a04 	addi	r2,r2,8232
   4f4a8:	10800017 	ldw	r2,0(r2)
   4f4ac:	d80b883a 	mov	r5,sp
   4f4b0:	d8800015 	stw	r2,0(sp)
   4f4b4:	004f0380 	call	4f038 <_Unwind_ForcedUnwind_Phase2>
   4f4b8:	00c001c4 	movi	r3,7
   4f4bc:	10c00126 	beq	r2,r3,4f4c4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   4f4c0:	004f5bc0 	call	4f5bc <abort>
   4f4c4:	d809883a 	mov	r4,sp
   4f4c8:	004f2100 	call	4f210 <uw_install_context.isra.1>

0004f4cc <_Unwind_DeleteException>:
   4f4cc:	20800217 	ldw	r2,8(r4)
   4f4d0:	10000326 	beq	r2,zero,4f4e0 <_Unwind_DeleteException+0x14>
   4f4d4:	200b883a 	mov	r5,r4
   4f4d8:	01000044 	movi	r4,1
   4f4dc:	1000683a 	jmp	r2
   4f4e0:	f800283a 	ret

0004f4e4 <_Unwind_Backtrace>:
   4f4e4:	008001f4 	movhi	r2,7
   4f4e8:	10880a04 	addi	r2,r2,8232
   4f4ec:	10800017 	ldw	r2,0(r2)
   4f4f0:	defffc04 	addi	sp,sp,-16
   4f4f4:	dc400215 	stw	r17,8(sp)
   4f4f8:	dc000115 	stw	r16,4(sp)
   4f4fc:	dfc00315 	stw	ra,12(sp)
   4f500:	2023883a 	mov	r17,r4
   4f504:	2821883a 	mov	r16,r5
   4f508:	d8800015 	stw	r2,0(sp)
   4f50c:	00000506 	br	4f524 <_Unwind_Backtrace+0x40>
   4f510:	883ee83a 	callr	r17
   4f514:	10000e1e 	bne	r2,zero,4f550 <_Unwind_Backtrace+0x6c>
   4f518:	d8800017 	ldw	r2,0(sp)
   4f51c:	10800017 	ldw	r2,0(r2)
   4f520:	d8800015 	stw	r2,0(sp)
   4f524:	800b883a 	mov	r5,r16
   4f528:	d809883a 	mov	r4,sp
   4f52c:	103ff81e 	bne	r2,zero,4f510 <__alt_data_end+0xfffcf510>
   4f530:	883ee83a 	callr	r17
   4f534:	1000061e 	bne	r2,zero,4f550 <_Unwind_Backtrace+0x6c>
   4f538:	00800144 	movi	r2,5
   4f53c:	dfc00317 	ldw	ra,12(sp)
   4f540:	dc400217 	ldw	r17,8(sp)
   4f544:	dc000117 	ldw	r16,4(sp)
   4f548:	dec00404 	addi	sp,sp,16
   4f54c:	f800283a 	ret
   4f550:	008000c4 	movi	r2,3
   4f554:	003ff906 	br	4f53c <__alt_data_end+0xfffcf53c>

0004f558 <__clzsi2>:
   4f558:	00bfffd4 	movui	r2,65535
   4f55c:	11000536 	bltu	r2,r4,4f574 <__clzsi2+0x1c>
   4f560:	00803fc4 	movi	r2,255
   4f564:	11000f36 	bltu	r2,r4,4f5a4 <__clzsi2+0x4c>
   4f568:	00800804 	movi	r2,32
   4f56c:	0007883a 	mov	r3,zero
   4f570:	00000506 	br	4f588 <__clzsi2+0x30>
   4f574:	00804034 	movhi	r2,256
   4f578:	10bfffc4 	addi	r2,r2,-1
   4f57c:	11000c2e 	bgeu	r2,r4,4f5b0 <__clzsi2+0x58>
   4f580:	00800204 	movi	r2,8
   4f584:	00c00604 	movi	r3,24
   4f588:	20c8d83a 	srl	r4,r4,r3
   4f58c:	00c001f4 	movhi	r3,7
   4f590:	18ee2e04 	addi	r3,r3,-18248
   4f594:	1909883a 	add	r4,r3,r4
   4f598:	20c00003 	ldbu	r3,0(r4)
   4f59c:	10c5c83a 	sub	r2,r2,r3
   4f5a0:	f800283a 	ret
   4f5a4:	00800604 	movi	r2,24
   4f5a8:	00c00204 	movi	r3,8
   4f5ac:	003ff606 	br	4f588 <__alt_data_end+0xfffcf588>
   4f5b0:	00800404 	movi	r2,16
   4f5b4:	1007883a 	mov	r3,r2
   4f5b8:	003ff306 	br	4f588 <__alt_data_end+0xfffcf588>

0004f5bc <abort>:
   4f5bc:	deffff04 	addi	sp,sp,-4
   4f5c0:	01000184 	movi	r4,6
   4f5c4:	dfc00015 	stw	ra,0(sp)
   4f5c8:	00504cc0 	call	504cc <raise>
   4f5cc:	01000044 	movi	r4,1
   4f5d0:	006020c0 	call	6020c <_exit>

0004f5d4 <clock>:
   4f5d4:	008001f4 	movhi	r2,7
   4f5d8:	10bb7304 	addi	r2,r2,-4660
   4f5dc:	11000017 	ldw	r4,0(r2)
   4f5e0:	defffb04 	addi	sp,sp,-20
   4f5e4:	d80b883a 	mov	r5,sp
   4f5e8:	dfc00415 	stw	ra,16(sp)
   4f5ec:	0052a700 	call	52a70 <_times_r>
   4f5f0:	00ffffc4 	movi	r3,-1
   4f5f4:	10c00726 	beq	r2,r3,4f614 <clock+0x40>
   4f5f8:	d8c00017 	ldw	r3,0(sp)
   4f5fc:	d8800117 	ldw	r2,4(sp)
   4f600:	1885883a 	add	r2,r3,r2
   4f604:	d8c00217 	ldw	r3,8(sp)
   4f608:	10c7883a 	add	r3,r2,r3
   4f60c:	d8800317 	ldw	r2,12(sp)
   4f610:	1885883a 	add	r2,r3,r2
   4f614:	dfc00417 	ldw	ra,16(sp)
   4f618:	dec00504 	addi	sp,sp,20
   4f61c:	f800283a 	ret

0004f620 <malloc>:
   4f620:	008001f4 	movhi	r2,7
   4f624:	10bb7304 	addi	r2,r2,-4660
   4f628:	200b883a 	mov	r5,r4
   4f62c:	11000017 	ldw	r4,0(r2)
   4f630:	004f6481 	jmpi	4f648 <_malloc_r>

0004f634 <free>:
   4f634:	008001f4 	movhi	r2,7
   4f638:	10bb7304 	addi	r2,r2,-4660
   4f63c:	200b883a 	mov	r5,r4
   4f640:	11000017 	ldw	r4,0(r2)
   4f644:	0056fac1 	jmpi	56fac <_free_r>

0004f648 <_malloc_r>:
   4f648:	defff504 	addi	sp,sp,-44
   4f64c:	dc800315 	stw	r18,12(sp)
   4f650:	dfc00a15 	stw	ra,40(sp)
   4f654:	df000915 	stw	fp,36(sp)
   4f658:	ddc00815 	stw	r23,32(sp)
   4f65c:	dd800715 	stw	r22,28(sp)
   4f660:	dd400615 	stw	r21,24(sp)
   4f664:	dd000515 	stw	r20,20(sp)
   4f668:	dcc00415 	stw	r19,16(sp)
   4f66c:	dc400215 	stw	r17,8(sp)
   4f670:	dc000115 	stw	r16,4(sp)
   4f674:	288002c4 	addi	r2,r5,11
   4f678:	00c00584 	movi	r3,22
   4f67c:	2025883a 	mov	r18,r4
   4f680:	18807f2e 	bgeu	r3,r2,4f880 <_malloc_r+0x238>
   4f684:	047ffe04 	movi	r17,-8
   4f688:	1462703a 	and	r17,r2,r17
   4f68c:	8800a316 	blt	r17,zero,4f91c <_malloc_r+0x2d4>
   4f690:	8940a236 	bltu	r17,r5,4f91c <_malloc_r+0x2d4>
   4f694:	00608280 	call	60828 <__malloc_lock>
   4f698:	00807dc4 	movi	r2,503
   4f69c:	1441e92e 	bgeu	r2,r17,4fe44 <_malloc_r+0x7fc>
   4f6a0:	8804d27a 	srli	r2,r17,9
   4f6a4:	1000a126 	beq	r2,zero,4f92c <_malloc_r+0x2e4>
   4f6a8:	00c00104 	movi	r3,4
   4f6ac:	18811e36 	bltu	r3,r2,4fb28 <_malloc_r+0x4e0>
   4f6b0:	8804d1ba 	srli	r2,r17,6
   4f6b4:	12000e44 	addi	r8,r2,57
   4f6b8:	11c00e04 	addi	r7,r2,56
   4f6bc:	4209883a 	add	r4,r8,r8
   4f6c0:	04c001f4 	movhi	r19,7
   4f6c4:	2109883a 	add	r4,r4,r4
   4f6c8:	9cf01204 	addi	r19,r19,-16312
   4f6cc:	2109883a 	add	r4,r4,r4
   4f6d0:	9909883a 	add	r4,r19,r4
   4f6d4:	24000117 	ldw	r16,4(r4)
   4f6d8:	213ffe04 	addi	r4,r4,-8
   4f6dc:	24009726 	beq	r4,r16,4f93c <_malloc_r+0x2f4>
   4f6e0:	80800117 	ldw	r2,4(r16)
   4f6e4:	01bfff04 	movi	r6,-4
   4f6e8:	014003c4 	movi	r5,15
   4f6ec:	1184703a 	and	r2,r2,r6
   4f6f0:	1447c83a 	sub	r3,r2,r17
   4f6f4:	28c00716 	blt	r5,r3,4f714 <_malloc_r+0xcc>
   4f6f8:	1800920e 	bge	r3,zero,4f944 <_malloc_r+0x2fc>
   4f6fc:	84000317 	ldw	r16,12(r16)
   4f700:	24008e26 	beq	r4,r16,4f93c <_malloc_r+0x2f4>
   4f704:	80800117 	ldw	r2,4(r16)
   4f708:	1184703a 	and	r2,r2,r6
   4f70c:	1447c83a 	sub	r3,r2,r17
   4f710:	28fff90e 	bge	r5,r3,4f6f8 <__alt_data_end+0xfffcf6f8>
   4f714:	3809883a 	mov	r4,r7
   4f718:	018001f4 	movhi	r6,7
   4f71c:	9c000417 	ldw	r16,16(r19)
   4f720:	31b01204 	addi	r6,r6,-16312
   4f724:	32000204 	addi	r8,r6,8
   4f728:	82013426 	beq	r16,r8,4fbfc <_malloc_r+0x5b4>
   4f72c:	80c00117 	ldw	r3,4(r16)
   4f730:	00bfff04 	movi	r2,-4
   4f734:	188e703a 	and	r7,r3,r2
   4f738:	3c45c83a 	sub	r2,r7,r17
   4f73c:	00c003c4 	movi	r3,15
   4f740:	18811f16 	blt	r3,r2,4fbc0 <_malloc_r+0x578>
   4f744:	32000515 	stw	r8,20(r6)
   4f748:	32000415 	stw	r8,16(r6)
   4f74c:	10007f0e 	bge	r2,zero,4f94c <_malloc_r+0x304>
   4f750:	00807fc4 	movi	r2,511
   4f754:	11c0fd36 	bltu	r2,r7,4fb4c <_malloc_r+0x504>
   4f758:	3806d0fa 	srli	r3,r7,3
   4f75c:	01c00044 	movi	r7,1
   4f760:	30800117 	ldw	r2,4(r6)
   4f764:	19400044 	addi	r5,r3,1
   4f768:	294b883a 	add	r5,r5,r5
   4f76c:	1807d0ba 	srai	r3,r3,2
   4f770:	294b883a 	add	r5,r5,r5
   4f774:	294b883a 	add	r5,r5,r5
   4f778:	298b883a 	add	r5,r5,r6
   4f77c:	38c6983a 	sll	r3,r7,r3
   4f780:	29c00017 	ldw	r7,0(r5)
   4f784:	2a7ffe04 	addi	r9,r5,-8
   4f788:	1886b03a 	or	r3,r3,r2
   4f78c:	82400315 	stw	r9,12(r16)
   4f790:	81c00215 	stw	r7,8(r16)
   4f794:	30c00115 	stw	r3,4(r6)
   4f798:	2c000015 	stw	r16,0(r5)
   4f79c:	3c000315 	stw	r16,12(r7)
   4f7a0:	2005d0ba 	srai	r2,r4,2
   4f7a4:	01400044 	movi	r5,1
   4f7a8:	288a983a 	sll	r5,r5,r2
   4f7ac:	19406f36 	bltu	r3,r5,4f96c <_malloc_r+0x324>
   4f7b0:	28c4703a 	and	r2,r5,r3
   4f7b4:	10000a1e 	bne	r2,zero,4f7e0 <_malloc_r+0x198>
   4f7b8:	00bfff04 	movi	r2,-4
   4f7bc:	294b883a 	add	r5,r5,r5
   4f7c0:	2088703a 	and	r4,r4,r2
   4f7c4:	28c4703a 	and	r2,r5,r3
   4f7c8:	21000104 	addi	r4,r4,4
   4f7cc:	1000041e 	bne	r2,zero,4f7e0 <_malloc_r+0x198>
   4f7d0:	294b883a 	add	r5,r5,r5
   4f7d4:	28c4703a 	and	r2,r5,r3
   4f7d8:	21000104 	addi	r4,r4,4
   4f7dc:	103ffc26 	beq	r2,zero,4f7d0 <__alt_data_end+0xfffcf7d0>
   4f7e0:	02bfff04 	movi	r10,-4
   4f7e4:	024003c4 	movi	r9,15
   4f7e8:	21800044 	addi	r6,r4,1
   4f7ec:	318d883a 	add	r6,r6,r6
   4f7f0:	318d883a 	add	r6,r6,r6
   4f7f4:	318d883a 	add	r6,r6,r6
   4f7f8:	998d883a 	add	r6,r19,r6
   4f7fc:	333ffe04 	addi	r12,r6,-8
   4f800:	2017883a 	mov	r11,r4
   4f804:	31800104 	addi	r6,r6,4
   4f808:	34000017 	ldw	r16,0(r6)
   4f80c:	31fffd04 	addi	r7,r6,-12
   4f810:	81c0041e 	bne	r16,r7,4f824 <_malloc_r+0x1dc>
   4f814:	0000fb06 	br	4fc04 <_malloc_r+0x5bc>
   4f818:	1801030e 	bge	r3,zero,4fc28 <_malloc_r+0x5e0>
   4f81c:	84000317 	ldw	r16,12(r16)
   4f820:	81c0f826 	beq	r16,r7,4fc04 <_malloc_r+0x5bc>
   4f824:	80800117 	ldw	r2,4(r16)
   4f828:	1284703a 	and	r2,r2,r10
   4f82c:	1447c83a 	sub	r3,r2,r17
   4f830:	48fff90e 	bge	r9,r3,4f818 <__alt_data_end+0xfffcf818>
   4f834:	80800317 	ldw	r2,12(r16)
   4f838:	81000217 	ldw	r4,8(r16)
   4f83c:	89400054 	ori	r5,r17,1
   4f840:	81400115 	stw	r5,4(r16)
   4f844:	20800315 	stw	r2,12(r4)
   4f848:	11000215 	stw	r4,8(r2)
   4f84c:	8463883a 	add	r17,r16,r17
   4f850:	9c400515 	stw	r17,20(r19)
   4f854:	9c400415 	stw	r17,16(r19)
   4f858:	18800054 	ori	r2,r3,1
   4f85c:	88800115 	stw	r2,4(r17)
   4f860:	8a000315 	stw	r8,12(r17)
   4f864:	8a000215 	stw	r8,8(r17)
   4f868:	88e3883a 	add	r17,r17,r3
   4f86c:	88c00015 	stw	r3,0(r17)
   4f870:	9009883a 	mov	r4,r18
   4f874:	006084c0 	call	6084c <__malloc_unlock>
   4f878:	80800204 	addi	r2,r16,8
   4f87c:	00001b06 	br	4f8ec <_malloc_r+0x2a4>
   4f880:	04400404 	movi	r17,16
   4f884:	89402536 	bltu	r17,r5,4f91c <_malloc_r+0x2d4>
   4f888:	00608280 	call	60828 <__malloc_lock>
   4f88c:	00800184 	movi	r2,6
   4f890:	01000084 	movi	r4,2
   4f894:	04c001f4 	movhi	r19,7
   4f898:	1085883a 	add	r2,r2,r2
   4f89c:	9cf01204 	addi	r19,r19,-16312
   4f8a0:	1085883a 	add	r2,r2,r2
   4f8a4:	9885883a 	add	r2,r19,r2
   4f8a8:	14000117 	ldw	r16,4(r2)
   4f8ac:	10fffe04 	addi	r3,r2,-8
   4f8b0:	80c0d926 	beq	r16,r3,4fc18 <_malloc_r+0x5d0>
   4f8b4:	80c00117 	ldw	r3,4(r16)
   4f8b8:	81000317 	ldw	r4,12(r16)
   4f8bc:	00bfff04 	movi	r2,-4
   4f8c0:	1884703a 	and	r2,r3,r2
   4f8c4:	81400217 	ldw	r5,8(r16)
   4f8c8:	8085883a 	add	r2,r16,r2
   4f8cc:	10c00117 	ldw	r3,4(r2)
   4f8d0:	29000315 	stw	r4,12(r5)
   4f8d4:	21400215 	stw	r5,8(r4)
   4f8d8:	18c00054 	ori	r3,r3,1
   4f8dc:	10c00115 	stw	r3,4(r2)
   4f8e0:	9009883a 	mov	r4,r18
   4f8e4:	006084c0 	call	6084c <__malloc_unlock>
   4f8e8:	80800204 	addi	r2,r16,8
   4f8ec:	dfc00a17 	ldw	ra,40(sp)
   4f8f0:	df000917 	ldw	fp,36(sp)
   4f8f4:	ddc00817 	ldw	r23,32(sp)
   4f8f8:	dd800717 	ldw	r22,28(sp)
   4f8fc:	dd400617 	ldw	r21,24(sp)
   4f900:	dd000517 	ldw	r20,20(sp)
   4f904:	dcc00417 	ldw	r19,16(sp)
   4f908:	dc800317 	ldw	r18,12(sp)
   4f90c:	dc400217 	ldw	r17,8(sp)
   4f910:	dc000117 	ldw	r16,4(sp)
   4f914:	dec00b04 	addi	sp,sp,44
   4f918:	f800283a 	ret
   4f91c:	00800304 	movi	r2,12
   4f920:	90800015 	stw	r2,0(r18)
   4f924:	0005883a 	mov	r2,zero
   4f928:	003ff006 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4f92c:	01002004 	movi	r4,128
   4f930:	02001004 	movi	r8,64
   4f934:	01c00fc4 	movi	r7,63
   4f938:	003f6106 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4f93c:	4009883a 	mov	r4,r8
   4f940:	003f7506 	br	4f718 <__alt_data_end+0xfffcf718>
   4f944:	81000317 	ldw	r4,12(r16)
   4f948:	003fde06 	br	4f8c4 <__alt_data_end+0xfffcf8c4>
   4f94c:	81c5883a 	add	r2,r16,r7
   4f950:	11400117 	ldw	r5,4(r2)
   4f954:	9009883a 	mov	r4,r18
   4f958:	29400054 	ori	r5,r5,1
   4f95c:	11400115 	stw	r5,4(r2)
   4f960:	006084c0 	call	6084c <__malloc_unlock>
   4f964:	80800204 	addi	r2,r16,8
   4f968:	003fe006 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4f96c:	9c000217 	ldw	r16,8(r19)
   4f970:	00bfff04 	movi	r2,-4
   4f974:	85800117 	ldw	r22,4(r16)
   4f978:	b0ac703a 	and	r22,r22,r2
   4f97c:	b4400336 	bltu	r22,r17,4f98c <_malloc_r+0x344>
   4f980:	b445c83a 	sub	r2,r22,r17
   4f984:	00c003c4 	movi	r3,15
   4f988:	18805d16 	blt	r3,r2,4fb00 <_malloc_r+0x4b8>
   4f98c:	05c001f4 	movhi	r23,7
   4f990:	008001f4 	movhi	r2,7
   4f994:	10880d04 	addi	r2,r2,8244
   4f998:	bdfb7404 	addi	r23,r23,-4656
   4f99c:	15400017 	ldw	r21,0(r2)
   4f9a0:	b8c00017 	ldw	r3,0(r23)
   4f9a4:	00bfffc4 	movi	r2,-1
   4f9a8:	858d883a 	add	r6,r16,r22
   4f9ac:	8d6b883a 	add	r21,r17,r21
   4f9b0:	1880ea26 	beq	r3,r2,4fd5c <_malloc_r+0x714>
   4f9b4:	ad4403c4 	addi	r21,r21,4111
   4f9b8:	00bc0004 	movi	r2,-4096
   4f9bc:	a8aa703a 	and	r21,r21,r2
   4f9c0:	a80b883a 	mov	r5,r21
   4f9c4:	9009883a 	mov	r4,r18
   4f9c8:	d9800015 	stw	r6,0(sp)
   4f9cc:	00502240 	call	50224 <_sbrk_r>
   4f9d0:	1029883a 	mov	r20,r2
   4f9d4:	00bfffc4 	movi	r2,-1
   4f9d8:	d9800017 	ldw	r6,0(sp)
   4f9dc:	a080e826 	beq	r20,r2,4fd80 <_malloc_r+0x738>
   4f9e0:	a180a636 	bltu	r20,r6,4fc7c <_malloc_r+0x634>
   4f9e4:	070001f4 	movhi	fp,7
   4f9e8:	e7086504 	addi	fp,fp,8596
   4f9ec:	e0800017 	ldw	r2,0(fp)
   4f9f0:	a887883a 	add	r3,r21,r2
   4f9f4:	e0c00015 	stw	r3,0(fp)
   4f9f8:	3500e626 	beq	r6,r20,4fd94 <_malloc_r+0x74c>
   4f9fc:	b9000017 	ldw	r4,0(r23)
   4fa00:	00bfffc4 	movi	r2,-1
   4fa04:	2080ee26 	beq	r4,r2,4fdc0 <_malloc_r+0x778>
   4fa08:	a185c83a 	sub	r2,r20,r6
   4fa0c:	10c5883a 	add	r2,r2,r3
   4fa10:	e0800015 	stw	r2,0(fp)
   4fa14:	a0c001cc 	andi	r3,r20,7
   4fa18:	1800bc26 	beq	r3,zero,4fd0c <_malloc_r+0x6c4>
   4fa1c:	a0e9c83a 	sub	r20,r20,r3
   4fa20:	00840204 	movi	r2,4104
   4fa24:	a5000204 	addi	r20,r20,8
   4fa28:	10c7c83a 	sub	r3,r2,r3
   4fa2c:	a545883a 	add	r2,r20,r21
   4fa30:	1083ffcc 	andi	r2,r2,4095
   4fa34:	18abc83a 	sub	r21,r3,r2
   4fa38:	a80b883a 	mov	r5,r21
   4fa3c:	9009883a 	mov	r4,r18
   4fa40:	00502240 	call	50224 <_sbrk_r>
   4fa44:	00ffffc4 	movi	r3,-1
   4fa48:	10c0e126 	beq	r2,r3,4fdd0 <_malloc_r+0x788>
   4fa4c:	1505c83a 	sub	r2,r2,r20
   4fa50:	1545883a 	add	r2,r2,r21
   4fa54:	10800054 	ori	r2,r2,1
   4fa58:	e0c00017 	ldw	r3,0(fp)
   4fa5c:	9d000215 	stw	r20,8(r19)
   4fa60:	a0800115 	stw	r2,4(r20)
   4fa64:	a8c7883a 	add	r3,r21,r3
   4fa68:	e0c00015 	stw	r3,0(fp)
   4fa6c:	84c00e26 	beq	r16,r19,4faa8 <_malloc_r+0x460>
   4fa70:	018003c4 	movi	r6,15
   4fa74:	3580a72e 	bgeu	r6,r22,4fd14 <_malloc_r+0x6cc>
   4fa78:	81400117 	ldw	r5,4(r16)
   4fa7c:	013ffe04 	movi	r4,-8
   4fa80:	b0bffd04 	addi	r2,r22,-12
   4fa84:	1104703a 	and	r2,r2,r4
   4fa88:	2900004c 	andi	r4,r5,1
   4fa8c:	2088b03a 	or	r4,r4,r2
   4fa90:	81000115 	stw	r4,4(r16)
   4fa94:	01400144 	movi	r5,5
   4fa98:	8089883a 	add	r4,r16,r2
   4fa9c:	21400115 	stw	r5,4(r4)
   4faa0:	21400215 	stw	r5,8(r4)
   4faa4:	3080cd36 	bltu	r6,r2,4fddc <_malloc_r+0x794>
   4faa8:	008001f4 	movhi	r2,7
   4faac:	10880c04 	addi	r2,r2,8240
   4fab0:	11000017 	ldw	r4,0(r2)
   4fab4:	20c0012e 	bgeu	r4,r3,4fabc <_malloc_r+0x474>
   4fab8:	10c00015 	stw	r3,0(r2)
   4fabc:	008001f4 	movhi	r2,7
   4fac0:	10880b04 	addi	r2,r2,8236
   4fac4:	11000017 	ldw	r4,0(r2)
   4fac8:	9c000217 	ldw	r16,8(r19)
   4facc:	20c0012e 	bgeu	r4,r3,4fad4 <_malloc_r+0x48c>
   4fad0:	10c00015 	stw	r3,0(r2)
   4fad4:	80c00117 	ldw	r3,4(r16)
   4fad8:	00bfff04 	movi	r2,-4
   4fadc:	1886703a 	and	r3,r3,r2
   4fae0:	1c45c83a 	sub	r2,r3,r17
   4fae4:	1c400236 	bltu	r3,r17,4faf0 <_malloc_r+0x4a8>
   4fae8:	00c003c4 	movi	r3,15
   4faec:	18800416 	blt	r3,r2,4fb00 <_malloc_r+0x4b8>
   4faf0:	9009883a 	mov	r4,r18
   4faf4:	006084c0 	call	6084c <__malloc_unlock>
   4faf8:	0005883a 	mov	r2,zero
   4fafc:	003f7b06 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4fb00:	88c00054 	ori	r3,r17,1
   4fb04:	80c00115 	stw	r3,4(r16)
   4fb08:	8463883a 	add	r17,r16,r17
   4fb0c:	10800054 	ori	r2,r2,1
   4fb10:	9c400215 	stw	r17,8(r19)
   4fb14:	88800115 	stw	r2,4(r17)
   4fb18:	9009883a 	mov	r4,r18
   4fb1c:	006084c0 	call	6084c <__malloc_unlock>
   4fb20:	80800204 	addi	r2,r16,8
   4fb24:	003f7106 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4fb28:	00c00504 	movi	r3,20
   4fb2c:	18804a2e 	bgeu	r3,r2,4fc58 <_malloc_r+0x610>
   4fb30:	00c01504 	movi	r3,84
   4fb34:	18806e36 	bltu	r3,r2,4fcf0 <_malloc_r+0x6a8>
   4fb38:	8804d33a 	srli	r2,r17,12
   4fb3c:	12001bc4 	addi	r8,r2,111
   4fb40:	11c01b84 	addi	r7,r2,110
   4fb44:	4209883a 	add	r4,r8,r8
   4fb48:	003edd06 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4fb4c:	3804d27a 	srli	r2,r7,9
   4fb50:	00c00104 	movi	r3,4
   4fb54:	1880442e 	bgeu	r3,r2,4fc68 <_malloc_r+0x620>
   4fb58:	00c00504 	movi	r3,20
   4fb5c:	18808136 	bltu	r3,r2,4fd64 <_malloc_r+0x71c>
   4fb60:	11401704 	addi	r5,r2,92
   4fb64:	10c016c4 	addi	r3,r2,91
   4fb68:	294b883a 	add	r5,r5,r5
   4fb6c:	294b883a 	add	r5,r5,r5
   4fb70:	294b883a 	add	r5,r5,r5
   4fb74:	994b883a 	add	r5,r19,r5
   4fb78:	28800017 	ldw	r2,0(r5)
   4fb7c:	018001f4 	movhi	r6,7
   4fb80:	297ffe04 	addi	r5,r5,-8
   4fb84:	31b01204 	addi	r6,r6,-16312
   4fb88:	28806526 	beq	r5,r2,4fd20 <_malloc_r+0x6d8>
   4fb8c:	01bfff04 	movi	r6,-4
   4fb90:	10c00117 	ldw	r3,4(r2)
   4fb94:	1986703a 	and	r3,r3,r6
   4fb98:	38c0022e 	bgeu	r7,r3,4fba4 <_malloc_r+0x55c>
   4fb9c:	10800217 	ldw	r2,8(r2)
   4fba0:	28bffb1e 	bne	r5,r2,4fb90 <__alt_data_end+0xfffcfb90>
   4fba4:	11400317 	ldw	r5,12(r2)
   4fba8:	98c00117 	ldw	r3,4(r19)
   4fbac:	81400315 	stw	r5,12(r16)
   4fbb0:	80800215 	stw	r2,8(r16)
   4fbb4:	2c000215 	stw	r16,8(r5)
   4fbb8:	14000315 	stw	r16,12(r2)
   4fbbc:	003ef806 	br	4f7a0 <__alt_data_end+0xfffcf7a0>
   4fbc0:	88c00054 	ori	r3,r17,1
   4fbc4:	80c00115 	stw	r3,4(r16)
   4fbc8:	8463883a 	add	r17,r16,r17
   4fbcc:	34400515 	stw	r17,20(r6)
   4fbd0:	34400415 	stw	r17,16(r6)
   4fbd4:	10c00054 	ori	r3,r2,1
   4fbd8:	8a000315 	stw	r8,12(r17)
   4fbdc:	8a000215 	stw	r8,8(r17)
   4fbe0:	88c00115 	stw	r3,4(r17)
   4fbe4:	88a3883a 	add	r17,r17,r2
   4fbe8:	88800015 	stw	r2,0(r17)
   4fbec:	9009883a 	mov	r4,r18
   4fbf0:	006084c0 	call	6084c <__malloc_unlock>
   4fbf4:	80800204 	addi	r2,r16,8
   4fbf8:	003f3c06 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4fbfc:	30c00117 	ldw	r3,4(r6)
   4fc00:	003ee706 	br	4f7a0 <__alt_data_end+0xfffcf7a0>
   4fc04:	5ac00044 	addi	r11,r11,1
   4fc08:	588000cc 	andi	r2,r11,3
   4fc0c:	31800204 	addi	r6,r6,8
   4fc10:	103efd1e 	bne	r2,zero,4f808 <__alt_data_end+0xfffcf808>
   4fc14:	00002406 	br	4fca8 <_malloc_r+0x660>
   4fc18:	14000317 	ldw	r16,12(r2)
   4fc1c:	143f251e 	bne	r2,r16,4f8b4 <__alt_data_end+0xfffcf8b4>
   4fc20:	21000084 	addi	r4,r4,2
   4fc24:	003ebc06 	br	4f718 <__alt_data_end+0xfffcf718>
   4fc28:	8085883a 	add	r2,r16,r2
   4fc2c:	10c00117 	ldw	r3,4(r2)
   4fc30:	81000317 	ldw	r4,12(r16)
   4fc34:	81400217 	ldw	r5,8(r16)
   4fc38:	18c00054 	ori	r3,r3,1
   4fc3c:	10c00115 	stw	r3,4(r2)
   4fc40:	29000315 	stw	r4,12(r5)
   4fc44:	21400215 	stw	r5,8(r4)
   4fc48:	9009883a 	mov	r4,r18
   4fc4c:	006084c0 	call	6084c <__malloc_unlock>
   4fc50:	80800204 	addi	r2,r16,8
   4fc54:	003f2506 	br	4f8ec <__alt_data_end+0xfffcf8ec>
   4fc58:	12001704 	addi	r8,r2,92
   4fc5c:	11c016c4 	addi	r7,r2,91
   4fc60:	4209883a 	add	r4,r8,r8
   4fc64:	003e9606 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4fc68:	3804d1ba 	srli	r2,r7,6
   4fc6c:	11400e44 	addi	r5,r2,57
   4fc70:	10c00e04 	addi	r3,r2,56
   4fc74:	294b883a 	add	r5,r5,r5
   4fc78:	003fbc06 	br	4fb6c <__alt_data_end+0xfffcfb6c>
   4fc7c:	84ff5926 	beq	r16,r19,4f9e4 <__alt_data_end+0xfffcf9e4>
   4fc80:	008001f4 	movhi	r2,7
   4fc84:	10b01204 	addi	r2,r2,-16312
   4fc88:	14000217 	ldw	r16,8(r2)
   4fc8c:	00bfff04 	movi	r2,-4
   4fc90:	80c00117 	ldw	r3,4(r16)
   4fc94:	1886703a 	and	r3,r3,r2
   4fc98:	003f9106 	br	4fae0 <__alt_data_end+0xfffcfae0>
   4fc9c:	60800217 	ldw	r2,8(r12)
   4fca0:	213fffc4 	addi	r4,r4,-1
   4fca4:	1300651e 	bne	r2,r12,4fe3c <_malloc_r+0x7f4>
   4fca8:	208000cc 	andi	r2,r4,3
   4fcac:	633ffe04 	addi	r12,r12,-8
   4fcb0:	103ffa1e 	bne	r2,zero,4fc9c <__alt_data_end+0xfffcfc9c>
   4fcb4:	98800117 	ldw	r2,4(r19)
   4fcb8:	0146303a 	nor	r3,zero,r5
   4fcbc:	1884703a 	and	r2,r3,r2
   4fcc0:	98800115 	stw	r2,4(r19)
   4fcc4:	294b883a 	add	r5,r5,r5
   4fcc8:	117f2836 	bltu	r2,r5,4f96c <__alt_data_end+0xfffcf96c>
   4fccc:	283f2726 	beq	r5,zero,4f96c <__alt_data_end+0xfffcf96c>
   4fcd0:	2886703a 	and	r3,r5,r2
   4fcd4:	5809883a 	mov	r4,r11
   4fcd8:	183ec31e 	bne	r3,zero,4f7e8 <__alt_data_end+0xfffcf7e8>
   4fcdc:	294b883a 	add	r5,r5,r5
   4fce0:	2886703a 	and	r3,r5,r2
   4fce4:	21000104 	addi	r4,r4,4
   4fce8:	183ffc26 	beq	r3,zero,4fcdc <__alt_data_end+0xfffcfcdc>
   4fcec:	003ebe06 	br	4f7e8 <__alt_data_end+0xfffcf7e8>
   4fcf0:	00c05504 	movi	r3,340
   4fcf4:	18801236 	bltu	r3,r2,4fd40 <_malloc_r+0x6f8>
   4fcf8:	8804d3fa 	srli	r2,r17,15
   4fcfc:	12001e04 	addi	r8,r2,120
   4fd00:	11c01dc4 	addi	r7,r2,119
   4fd04:	4209883a 	add	r4,r8,r8
   4fd08:	003e6d06 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4fd0c:	00c40004 	movi	r3,4096
   4fd10:	003f4606 	br	4fa2c <__alt_data_end+0xfffcfa2c>
   4fd14:	00800044 	movi	r2,1
   4fd18:	a0800115 	stw	r2,4(r20)
   4fd1c:	003f7406 	br	4faf0 <__alt_data_end+0xfffcfaf0>
   4fd20:	1805d0ba 	srai	r2,r3,2
   4fd24:	01c00044 	movi	r7,1
   4fd28:	30c00117 	ldw	r3,4(r6)
   4fd2c:	388e983a 	sll	r7,r7,r2
   4fd30:	2805883a 	mov	r2,r5
   4fd34:	38c6b03a 	or	r3,r7,r3
   4fd38:	30c00115 	stw	r3,4(r6)
   4fd3c:	003f9b06 	br	4fbac <__alt_data_end+0xfffcfbac>
   4fd40:	00c15504 	movi	r3,1364
   4fd44:	18801a36 	bltu	r3,r2,4fdb0 <_malloc_r+0x768>
   4fd48:	8804d4ba 	srli	r2,r17,18
   4fd4c:	12001f44 	addi	r8,r2,125
   4fd50:	11c01f04 	addi	r7,r2,124
   4fd54:	4209883a 	add	r4,r8,r8
   4fd58:	003e5906 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4fd5c:	ad400404 	addi	r21,r21,16
   4fd60:	003f1706 	br	4f9c0 <__alt_data_end+0xfffcf9c0>
   4fd64:	00c01504 	movi	r3,84
   4fd68:	18802336 	bltu	r3,r2,4fdf8 <_malloc_r+0x7b0>
   4fd6c:	3804d33a 	srli	r2,r7,12
   4fd70:	11401bc4 	addi	r5,r2,111
   4fd74:	10c01b84 	addi	r3,r2,110
   4fd78:	294b883a 	add	r5,r5,r5
   4fd7c:	003f7b06 	br	4fb6c <__alt_data_end+0xfffcfb6c>
   4fd80:	9c000217 	ldw	r16,8(r19)
   4fd84:	00bfff04 	movi	r2,-4
   4fd88:	80c00117 	ldw	r3,4(r16)
   4fd8c:	1886703a 	and	r3,r3,r2
   4fd90:	003f5306 	br	4fae0 <__alt_data_end+0xfffcfae0>
   4fd94:	3083ffcc 	andi	r2,r6,4095
   4fd98:	103f181e 	bne	r2,zero,4f9fc <__alt_data_end+0xfffcf9fc>
   4fd9c:	99000217 	ldw	r4,8(r19)
   4fda0:	b545883a 	add	r2,r22,r21
   4fda4:	10800054 	ori	r2,r2,1
   4fda8:	20800115 	stw	r2,4(r4)
   4fdac:	003f3e06 	br	4faa8 <__alt_data_end+0xfffcfaa8>
   4fdb0:	01003f84 	movi	r4,254
   4fdb4:	02001fc4 	movi	r8,127
   4fdb8:	01c01f84 	movi	r7,126
   4fdbc:	003e4006 	br	4f6c0 <__alt_data_end+0xfffcf6c0>
   4fdc0:	008001f4 	movhi	r2,7
   4fdc4:	10bb7404 	addi	r2,r2,-4656
   4fdc8:	15000015 	stw	r20,0(r2)
   4fdcc:	003f1106 	br	4fa14 <__alt_data_end+0xfffcfa14>
   4fdd0:	00800044 	movi	r2,1
   4fdd4:	002b883a 	mov	r21,zero
   4fdd8:	003f1f06 	br	4fa58 <__alt_data_end+0xfffcfa58>
   4fddc:	81400204 	addi	r5,r16,8
   4fde0:	9009883a 	mov	r4,r18
   4fde4:	0056fac0 	call	56fac <_free_r>
   4fde8:	008001f4 	movhi	r2,7
   4fdec:	10886504 	addi	r2,r2,8596
   4fdf0:	10c00017 	ldw	r3,0(r2)
   4fdf4:	003f2c06 	br	4faa8 <__alt_data_end+0xfffcfaa8>
   4fdf8:	00c05504 	movi	r3,340
   4fdfc:	18800536 	bltu	r3,r2,4fe14 <_malloc_r+0x7cc>
   4fe00:	3804d3fa 	srli	r2,r7,15
   4fe04:	11401e04 	addi	r5,r2,120
   4fe08:	10c01dc4 	addi	r3,r2,119
   4fe0c:	294b883a 	add	r5,r5,r5
   4fe10:	003f5606 	br	4fb6c <__alt_data_end+0xfffcfb6c>
   4fe14:	00c15504 	movi	r3,1364
   4fe18:	18800536 	bltu	r3,r2,4fe30 <_malloc_r+0x7e8>
   4fe1c:	3804d4ba 	srli	r2,r7,18
   4fe20:	11401f44 	addi	r5,r2,125
   4fe24:	10c01f04 	addi	r3,r2,124
   4fe28:	294b883a 	add	r5,r5,r5
   4fe2c:	003f4f06 	br	4fb6c <__alt_data_end+0xfffcfb6c>
   4fe30:	01403f84 	movi	r5,254
   4fe34:	00c01f84 	movi	r3,126
   4fe38:	003f4c06 	br	4fb6c <__alt_data_end+0xfffcfb6c>
   4fe3c:	98800117 	ldw	r2,4(r19)
   4fe40:	003fa006 	br	4fcc4 <__alt_data_end+0xfffcfcc4>
   4fe44:	8808d0fa 	srli	r4,r17,3
   4fe48:	20800044 	addi	r2,r4,1
   4fe4c:	1085883a 	add	r2,r2,r2
   4fe50:	003e9006 	br	4f894 <__alt_data_end+0xfffcf894>

0004fe54 <memcpy>:
   4fe54:	defffd04 	addi	sp,sp,-12
   4fe58:	dfc00215 	stw	ra,8(sp)
   4fe5c:	dc400115 	stw	r17,4(sp)
   4fe60:	dc000015 	stw	r16,0(sp)
   4fe64:	00c003c4 	movi	r3,15
   4fe68:	2005883a 	mov	r2,r4
   4fe6c:	1980452e 	bgeu	r3,r6,4ff84 <memcpy+0x130>
   4fe70:	2906b03a 	or	r3,r5,r4
   4fe74:	18c000cc 	andi	r3,r3,3
   4fe78:	1800441e 	bne	r3,zero,4ff8c <memcpy+0x138>
   4fe7c:	347ffc04 	addi	r17,r6,-16
   4fe80:	8822d13a 	srli	r17,r17,4
   4fe84:	28c00104 	addi	r3,r5,4
   4fe88:	23400104 	addi	r13,r4,4
   4fe8c:	8820913a 	slli	r16,r17,4
   4fe90:	2b000204 	addi	r12,r5,8
   4fe94:	22c00204 	addi	r11,r4,8
   4fe98:	84000504 	addi	r16,r16,20
   4fe9c:	2a800304 	addi	r10,r5,12
   4fea0:	22400304 	addi	r9,r4,12
   4fea4:	2c21883a 	add	r16,r5,r16
   4fea8:	2811883a 	mov	r8,r5
   4feac:	200f883a 	mov	r7,r4
   4feb0:	41000017 	ldw	r4,0(r8)
   4feb4:	1fc00017 	ldw	ra,0(r3)
   4feb8:	63c00017 	ldw	r15,0(r12)
   4febc:	39000015 	stw	r4,0(r7)
   4fec0:	53800017 	ldw	r14,0(r10)
   4fec4:	6fc00015 	stw	ra,0(r13)
   4fec8:	5bc00015 	stw	r15,0(r11)
   4fecc:	4b800015 	stw	r14,0(r9)
   4fed0:	18c00404 	addi	r3,r3,16
   4fed4:	39c00404 	addi	r7,r7,16
   4fed8:	42000404 	addi	r8,r8,16
   4fedc:	6b400404 	addi	r13,r13,16
   4fee0:	63000404 	addi	r12,r12,16
   4fee4:	5ac00404 	addi	r11,r11,16
   4fee8:	52800404 	addi	r10,r10,16
   4feec:	4a400404 	addi	r9,r9,16
   4fef0:	1c3fef1e 	bne	r3,r16,4feb0 <__alt_data_end+0xfffcfeb0>
   4fef4:	89c00044 	addi	r7,r17,1
   4fef8:	380e913a 	slli	r7,r7,4
   4fefc:	310003cc 	andi	r4,r6,15
   4ff00:	02c000c4 	movi	r11,3
   4ff04:	11c7883a 	add	r3,r2,r7
   4ff08:	29cb883a 	add	r5,r5,r7
   4ff0c:	5900212e 	bgeu	r11,r4,4ff94 <memcpy+0x140>
   4ff10:	1813883a 	mov	r9,r3
   4ff14:	2811883a 	mov	r8,r5
   4ff18:	200f883a 	mov	r7,r4
   4ff1c:	42800017 	ldw	r10,0(r8)
   4ff20:	4a400104 	addi	r9,r9,4
   4ff24:	39ffff04 	addi	r7,r7,-4
   4ff28:	4abfff15 	stw	r10,-4(r9)
   4ff2c:	42000104 	addi	r8,r8,4
   4ff30:	59fffa36 	bltu	r11,r7,4ff1c <__alt_data_end+0xfffcff1c>
   4ff34:	213fff04 	addi	r4,r4,-4
   4ff38:	2008d0ba 	srli	r4,r4,2
   4ff3c:	318000cc 	andi	r6,r6,3
   4ff40:	21000044 	addi	r4,r4,1
   4ff44:	2109883a 	add	r4,r4,r4
   4ff48:	2109883a 	add	r4,r4,r4
   4ff4c:	1907883a 	add	r3,r3,r4
   4ff50:	290b883a 	add	r5,r5,r4
   4ff54:	30000626 	beq	r6,zero,4ff70 <memcpy+0x11c>
   4ff58:	198d883a 	add	r6,r3,r6
   4ff5c:	29c00003 	ldbu	r7,0(r5)
   4ff60:	18c00044 	addi	r3,r3,1
   4ff64:	29400044 	addi	r5,r5,1
   4ff68:	19ffffc5 	stb	r7,-1(r3)
   4ff6c:	19bffb1e 	bne	r3,r6,4ff5c <__alt_data_end+0xfffcff5c>
   4ff70:	dfc00217 	ldw	ra,8(sp)
   4ff74:	dc400117 	ldw	r17,4(sp)
   4ff78:	dc000017 	ldw	r16,0(sp)
   4ff7c:	dec00304 	addi	sp,sp,12
   4ff80:	f800283a 	ret
   4ff84:	2007883a 	mov	r3,r4
   4ff88:	003ff206 	br	4ff54 <__alt_data_end+0xfffcff54>
   4ff8c:	2007883a 	mov	r3,r4
   4ff90:	003ff106 	br	4ff58 <__alt_data_end+0xfffcff58>
   4ff94:	200d883a 	mov	r6,r4
   4ff98:	003fee06 	br	4ff54 <__alt_data_end+0xfffcff54>

0004ff9c <memset>:
   4ff9c:	20c000cc 	andi	r3,r4,3
   4ffa0:	2005883a 	mov	r2,r4
   4ffa4:	18004426 	beq	r3,zero,500b8 <memset+0x11c>
   4ffa8:	31ffffc4 	addi	r7,r6,-1
   4ffac:	30004026 	beq	r6,zero,500b0 <memset+0x114>
   4ffb0:	2813883a 	mov	r9,r5
   4ffb4:	200d883a 	mov	r6,r4
   4ffb8:	2007883a 	mov	r3,r4
   4ffbc:	00000406 	br	4ffd0 <memset+0x34>
   4ffc0:	3a3fffc4 	addi	r8,r7,-1
   4ffc4:	31800044 	addi	r6,r6,1
   4ffc8:	38003926 	beq	r7,zero,500b0 <memset+0x114>
   4ffcc:	400f883a 	mov	r7,r8
   4ffd0:	18c00044 	addi	r3,r3,1
   4ffd4:	32400005 	stb	r9,0(r6)
   4ffd8:	1a0000cc 	andi	r8,r3,3
   4ffdc:	403ff81e 	bne	r8,zero,4ffc0 <__alt_data_end+0xfffcffc0>
   4ffe0:	010000c4 	movi	r4,3
   4ffe4:	21c02d2e 	bgeu	r4,r7,5009c <memset+0x100>
   4ffe8:	29003fcc 	andi	r4,r5,255
   4ffec:	200c923a 	slli	r6,r4,8
   4fff0:	3108b03a 	or	r4,r6,r4
   4fff4:	200c943a 	slli	r6,r4,16
   4fff8:	218cb03a 	or	r6,r4,r6
   4fffc:	010003c4 	movi	r4,15
   50000:	21c0182e 	bgeu	r4,r7,50064 <memset+0xc8>
   50004:	3b3ffc04 	addi	r12,r7,-16
   50008:	6018d13a 	srli	r12,r12,4
   5000c:	1a000104 	addi	r8,r3,4
   50010:	1ac00204 	addi	r11,r3,8
   50014:	6008913a 	slli	r4,r12,4
   50018:	1a800304 	addi	r10,r3,12
   5001c:	1813883a 	mov	r9,r3
   50020:	21000504 	addi	r4,r4,20
   50024:	1909883a 	add	r4,r3,r4
   50028:	49800015 	stw	r6,0(r9)
   5002c:	41800015 	stw	r6,0(r8)
   50030:	59800015 	stw	r6,0(r11)
   50034:	51800015 	stw	r6,0(r10)
   50038:	42000404 	addi	r8,r8,16
   5003c:	4a400404 	addi	r9,r9,16
   50040:	5ac00404 	addi	r11,r11,16
   50044:	52800404 	addi	r10,r10,16
   50048:	413ff71e 	bne	r8,r4,50028 <__alt_data_end+0xfffd0028>
   5004c:	63000044 	addi	r12,r12,1
   50050:	6018913a 	slli	r12,r12,4
   50054:	39c003cc 	andi	r7,r7,15
   50058:	010000c4 	movi	r4,3
   5005c:	1b07883a 	add	r3,r3,r12
   50060:	21c00e2e 	bgeu	r4,r7,5009c <memset+0x100>
   50064:	1813883a 	mov	r9,r3
   50068:	3811883a 	mov	r8,r7
   5006c:	010000c4 	movi	r4,3
   50070:	49800015 	stw	r6,0(r9)
   50074:	423fff04 	addi	r8,r8,-4
   50078:	4a400104 	addi	r9,r9,4
   5007c:	223ffc36 	bltu	r4,r8,50070 <__alt_data_end+0xfffd0070>
   50080:	393fff04 	addi	r4,r7,-4
   50084:	2008d0ba 	srli	r4,r4,2
   50088:	39c000cc 	andi	r7,r7,3
   5008c:	21000044 	addi	r4,r4,1
   50090:	2109883a 	add	r4,r4,r4
   50094:	2109883a 	add	r4,r4,r4
   50098:	1907883a 	add	r3,r3,r4
   5009c:	38000526 	beq	r7,zero,500b4 <memset+0x118>
   500a0:	19cf883a 	add	r7,r3,r7
   500a4:	19400005 	stb	r5,0(r3)
   500a8:	18c00044 	addi	r3,r3,1
   500ac:	38fffd1e 	bne	r7,r3,500a4 <__alt_data_end+0xfffd00a4>
   500b0:	f800283a 	ret
   500b4:	f800283a 	ret
   500b8:	2007883a 	mov	r3,r4
   500bc:	300f883a 	mov	r7,r6
   500c0:	003fc706 	br	4ffe0 <__alt_data_end+0xfffcffe0>

000500c4 <_printf_r>:
   500c4:	defffd04 	addi	sp,sp,-12
   500c8:	2805883a 	mov	r2,r5
   500cc:	dfc00015 	stw	ra,0(sp)
   500d0:	d9800115 	stw	r6,4(sp)
   500d4:	d9c00215 	stw	r7,8(sp)
   500d8:	21400217 	ldw	r5,8(r4)
   500dc:	d9c00104 	addi	r7,sp,4
   500e0:	100d883a 	mov	r6,r2
   500e4:	0052a780 	call	52a78 <___vfprintf_internal_r>
   500e8:	dfc00017 	ldw	ra,0(sp)
   500ec:	dec00304 	addi	sp,sp,12
   500f0:	f800283a 	ret

000500f4 <printf>:
   500f4:	defffc04 	addi	sp,sp,-16
   500f8:	dfc00015 	stw	ra,0(sp)
   500fc:	d9400115 	stw	r5,4(sp)
   50100:	d9800215 	stw	r6,8(sp)
   50104:	d9c00315 	stw	r7,12(sp)
   50108:	008001f4 	movhi	r2,7
   5010c:	10bb7304 	addi	r2,r2,-4660
   50110:	10800017 	ldw	r2,0(r2)
   50114:	200b883a 	mov	r5,r4
   50118:	d9800104 	addi	r6,sp,4
   5011c:	11000217 	ldw	r4,8(r2)
   50120:	0054d540 	call	54d54 <__vfprintf_internal>
   50124:	dfc00017 	ldw	ra,0(sp)
   50128:	dec00404 	addi	sp,sp,16
   5012c:	f800283a 	ret

00050130 <_putchar_r>:
   50130:	21800217 	ldw	r6,8(r4)
   50134:	0058e9c1 	jmpi	58e9c <_putc_r>

00050138 <putchar>:
   50138:	008001f4 	movhi	r2,7
   5013c:	10bb7304 	addi	r2,r2,-4660
   50140:	200b883a 	mov	r5,r4
   50144:	11000017 	ldw	r4,0(r2)
   50148:	21800217 	ldw	r6,8(r4)
   5014c:	0058e9c1 	jmpi	58e9c <_putc_r>

00050150 <_puts_r>:
   50150:	defff604 	addi	sp,sp,-40
   50154:	dc000715 	stw	r16,28(sp)
   50158:	2021883a 	mov	r16,r4
   5015c:	2809883a 	mov	r4,r5
   50160:	dc400815 	stw	r17,32(sp)
   50164:	dfc00915 	stw	ra,36(sp)
   50168:	2823883a 	mov	r17,r5
   5016c:	005071c0 	call	5071c <strlen>
   50170:	10c00044 	addi	r3,r2,1
   50174:	d8800115 	stw	r2,4(sp)
   50178:	008001f4 	movhi	r2,7
   5017c:	10ae6f04 	addi	r2,r2,-17988
   50180:	d8800215 	stw	r2,8(sp)
   50184:	00800044 	movi	r2,1
   50188:	d8800315 	stw	r2,12(sp)
   5018c:	00800084 	movi	r2,2
   50190:	dc400015 	stw	r17,0(sp)
   50194:	d8c00615 	stw	r3,24(sp)
   50198:	dec00415 	stw	sp,16(sp)
   5019c:	d8800515 	stw	r2,20(sp)
   501a0:	80000226 	beq	r16,zero,501ac <_puts_r+0x5c>
   501a4:	80800e17 	ldw	r2,56(r16)
   501a8:	10001426 	beq	r2,zero,501fc <_puts_r+0xac>
   501ac:	81400217 	ldw	r5,8(r16)
   501b0:	2880030b 	ldhu	r2,12(r5)
   501b4:	10c8000c 	andi	r3,r2,8192
   501b8:	1800061e 	bne	r3,zero,501d4 <_puts_r+0x84>
   501bc:	29001917 	ldw	r4,100(r5)
   501c0:	00f7ffc4 	movi	r3,-8193
   501c4:	10880014 	ori	r2,r2,8192
   501c8:	20c6703a 	and	r3,r4,r3
   501cc:	2880030d 	sth	r2,12(r5)
   501d0:	28c01915 	stw	r3,100(r5)
   501d4:	d9800404 	addi	r6,sp,16
   501d8:	8009883a 	mov	r4,r16
   501dc:	00572bc0 	call	572bc <__sfvwrite_r>
   501e0:	1000091e 	bne	r2,zero,50208 <_puts_r+0xb8>
   501e4:	00800284 	movi	r2,10
   501e8:	dfc00917 	ldw	ra,36(sp)
   501ec:	dc400817 	ldw	r17,32(sp)
   501f0:	dc000717 	ldw	r16,28(sp)
   501f4:	dec00a04 	addi	sp,sp,40
   501f8:	f800283a 	ret
   501fc:	8009883a 	mov	r4,r16
   50200:	0056e380 	call	56e38 <__sinit>
   50204:	003fe906 	br	501ac <__alt_data_end+0xfffd01ac>
   50208:	00bfffc4 	movi	r2,-1
   5020c:	003ff606 	br	501e8 <__alt_data_end+0xfffd01e8>

00050210 <puts>:
   50210:	008001f4 	movhi	r2,7
   50214:	10bb7304 	addi	r2,r2,-4660
   50218:	200b883a 	mov	r5,r4
   5021c:	11000017 	ldw	r4,0(r2)
   50220:	00501501 	jmpi	50150 <_puts_r>

00050224 <_sbrk_r>:
   50224:	defffd04 	addi	sp,sp,-12
   50228:	dc000015 	stw	r16,0(sp)
   5022c:	040001f4 	movhi	r16,7
   50230:	dc400115 	stw	r17,4(sp)
   50234:	84080e04 	addi	r16,r16,8248
   50238:	2023883a 	mov	r17,r4
   5023c:	2809883a 	mov	r4,r5
   50240:	dfc00215 	stw	ra,8(sp)
   50244:	80000015 	stw	zero,0(r16)
   50248:	0060a340 	call	60a34 <sbrk>
   5024c:	00ffffc4 	movi	r3,-1
   50250:	10c00526 	beq	r2,r3,50268 <_sbrk_r+0x44>
   50254:	dfc00217 	ldw	ra,8(sp)
   50258:	dc400117 	ldw	r17,4(sp)
   5025c:	dc000017 	ldw	r16,0(sp)
   50260:	dec00304 	addi	sp,sp,12
   50264:	f800283a 	ret
   50268:	80c00017 	ldw	r3,0(r16)
   5026c:	183ff926 	beq	r3,zero,50254 <__alt_data_end+0xfffd0254>
   50270:	88c00015 	stw	r3,0(r17)
   50274:	003ff706 	br	50254 <__alt_data_end+0xfffd0254>

00050278 <_init_signal_r>:
   50278:	2080b717 	ldw	r2,732(r4)
   5027c:	10000226 	beq	r2,zero,50288 <_init_signal_r+0x10>
   50280:	0005883a 	mov	r2,zero
   50284:	f800283a 	ret
   50288:	defffe04 	addi	sp,sp,-8
   5028c:	01402004 	movi	r5,128
   50290:	dc000015 	stw	r16,0(sp)
   50294:	dfc00115 	stw	ra,4(sp)
   50298:	2021883a 	mov	r16,r4
   5029c:	004f6480 	call	4f648 <_malloc_r>
   502a0:	8080b715 	stw	r2,732(r16)
   502a4:	10000d26 	beq	r2,zero,502dc <_init_signal_r+0x64>
   502a8:	0007883a 	mov	r3,zero
   502ac:	01002004 	movi	r4,128
   502b0:	00000106 	br	502b8 <_init_signal_r+0x40>
   502b4:	8080b717 	ldw	r2,732(r16)
   502b8:	10c5883a 	add	r2,r2,r3
   502bc:	10000015 	stw	zero,0(r2)
   502c0:	18c00104 	addi	r3,r3,4
   502c4:	193ffb1e 	bne	r3,r4,502b4 <__alt_data_end+0xfffd02b4>
   502c8:	0005883a 	mov	r2,zero
   502cc:	dfc00117 	ldw	ra,4(sp)
   502d0:	dc000017 	ldw	r16,0(sp)
   502d4:	dec00204 	addi	sp,sp,8
   502d8:	f800283a 	ret
   502dc:	00bfffc4 	movi	r2,-1
   502e0:	003ffa06 	br	502cc <__alt_data_end+0xfffd02cc>

000502e4 <_signal_r>:
   502e4:	00c007c4 	movi	r3,31
   502e8:	19401536 	bltu	r3,r5,50340 <_signal_r+0x5c>
   502ec:	2080b717 	ldw	r2,732(r4)
   502f0:	defffc04 	addi	sp,sp,-16
   502f4:	dc800215 	stw	r18,8(sp)
   502f8:	dc400115 	stw	r17,4(sp)
   502fc:	dc000015 	stw	r16,0(sp)
   50300:	dfc00315 	stw	ra,12(sp)
   50304:	3023883a 	mov	r17,r6
   50308:	2021883a 	mov	r16,r4
   5030c:	2825883a 	mov	r18,r5
   50310:	10000f26 	beq	r2,zero,50350 <_signal_r+0x6c>
   50314:	948b883a 	add	r5,r18,r18
   50318:	294b883a 	add	r5,r5,r5
   5031c:	114b883a 	add	r5,r2,r5
   50320:	28800017 	ldw	r2,0(r5)
   50324:	2c400015 	stw	r17,0(r5)
   50328:	dfc00317 	ldw	ra,12(sp)
   5032c:	dc800217 	ldw	r18,8(sp)
   50330:	dc400117 	ldw	r17,4(sp)
   50334:	dc000017 	ldw	r16,0(sp)
   50338:	dec00404 	addi	sp,sp,16
   5033c:	f800283a 	ret
   50340:	00c00584 	movi	r3,22
   50344:	20c00015 	stw	r3,0(r4)
   50348:	00bfffc4 	movi	r2,-1
   5034c:	f800283a 	ret
   50350:	00502780 	call	50278 <_init_signal_r>
   50354:	1000021e 	bne	r2,zero,50360 <_signal_r+0x7c>
   50358:	8080b717 	ldw	r2,732(r16)
   5035c:	003fed06 	br	50314 <__alt_data_end+0xfffd0314>
   50360:	00bfffc4 	movi	r2,-1
   50364:	003ff006 	br	50328 <__alt_data_end+0xfffd0328>

00050368 <_raise_r>:
   50368:	008007c4 	movi	r2,31
   5036c:	11402936 	bltu	r2,r5,50414 <_raise_r+0xac>
   50370:	20c0b717 	ldw	r3,732(r4)
   50374:	defffd04 	addi	sp,sp,-12
   50378:	dc400115 	stw	r17,4(sp)
   5037c:	dc000015 	stw	r16,0(sp)
   50380:	dfc00215 	stw	ra,8(sp)
   50384:	2021883a 	mov	r16,r4
   50388:	2823883a 	mov	r17,r5
   5038c:	18001726 	beq	r3,zero,503ec <_raise_r+0x84>
   50390:	2945883a 	add	r2,r5,r5
   50394:	1085883a 	add	r2,r2,r2
   50398:	1887883a 	add	r3,r3,r2
   5039c:	19800017 	ldw	r6,0(r3)
   503a0:	30001226 	beq	r6,zero,503ec <_raise_r+0x84>
   503a4:	00800044 	movi	r2,1
   503a8:	30800e26 	beq	r6,r2,503e4 <_raise_r+0x7c>
   503ac:	013fffc4 	movi	r4,-1
   503b0:	31000926 	beq	r6,r4,503d8 <_raise_r+0x70>
   503b4:	18000015 	stw	zero,0(r3)
   503b8:	2809883a 	mov	r4,r5
   503bc:	303ee83a 	callr	r6
   503c0:	0005883a 	mov	r2,zero
   503c4:	dfc00217 	ldw	ra,8(sp)
   503c8:	dc400117 	ldw	r17,4(sp)
   503cc:	dc000017 	ldw	r16,0(sp)
   503d0:	dec00304 	addi	sp,sp,12
   503d4:	f800283a 	ret
   503d8:	00c00584 	movi	r3,22
   503dc:	80c00015 	stw	r3,0(r16)
   503e0:	003ff806 	br	503c4 <__alt_data_end+0xfffd03c4>
   503e4:	0005883a 	mov	r2,zero
   503e8:	003ff606 	br	503c4 <__alt_data_end+0xfffd03c4>
   503ec:	8009883a 	mov	r4,r16
   503f0:	00505780 	call	50578 <_getpid_r>
   503f4:	880d883a 	mov	r6,r17
   503f8:	100b883a 	mov	r5,r2
   503fc:	8009883a 	mov	r4,r16
   50400:	dfc00217 	ldw	ra,8(sp)
   50404:	dc400117 	ldw	r17,4(sp)
   50408:	dc000017 	ldw	r16,0(sp)
   5040c:	dec00304 	addi	sp,sp,12
   50410:	005051c1 	jmpi	5051c <_kill_r>
   50414:	00800584 	movi	r2,22
   50418:	20800015 	stw	r2,0(r4)
   5041c:	00bfffc4 	movi	r2,-1
   50420:	f800283a 	ret

00050424 <__sigtramp_r>:
   50424:	008007c4 	movi	r2,31
   50428:	11402436 	bltu	r2,r5,504bc <__sigtramp_r+0x98>
   5042c:	20c0b717 	ldw	r3,732(r4)
   50430:	defffd04 	addi	sp,sp,-12
   50434:	dc400115 	stw	r17,4(sp)
   50438:	dc000015 	stw	r16,0(sp)
   5043c:	dfc00215 	stw	ra,8(sp)
   50440:	2021883a 	mov	r16,r4
   50444:	2823883a 	mov	r17,r5
   50448:	18001826 	beq	r3,zero,504ac <__sigtramp_r+0x88>
   5044c:	8c45883a 	add	r2,r17,r17
   50450:	1085883a 	add	r2,r2,r2
   50454:	1885883a 	add	r2,r3,r2
   50458:	10c00017 	ldw	r3,0(r2)
   5045c:	18001126 	beq	r3,zero,504a4 <__sigtramp_r+0x80>
   50460:	013fffc4 	movi	r4,-1
   50464:	19000d26 	beq	r3,r4,5049c <__sigtramp_r+0x78>
   50468:	01000044 	movi	r4,1
   5046c:	19000926 	beq	r3,r4,50494 <__sigtramp_r+0x70>
   50470:	10000015 	stw	zero,0(r2)
   50474:	8809883a 	mov	r4,r17
   50478:	183ee83a 	callr	r3
   5047c:	0005883a 	mov	r2,zero
   50480:	dfc00217 	ldw	ra,8(sp)
   50484:	dc400117 	ldw	r17,4(sp)
   50488:	dc000017 	ldw	r16,0(sp)
   5048c:	dec00304 	addi	sp,sp,12
   50490:	f800283a 	ret
   50494:	008000c4 	movi	r2,3
   50498:	003ff906 	br	50480 <__alt_data_end+0xfffd0480>
   5049c:	00800084 	movi	r2,2
   504a0:	003ff706 	br	50480 <__alt_data_end+0xfffd0480>
   504a4:	00800044 	movi	r2,1
   504a8:	003ff506 	br	50480 <__alt_data_end+0xfffd0480>
   504ac:	00502780 	call	50278 <_init_signal_r>
   504b0:	1000041e 	bne	r2,zero,504c4 <__sigtramp_r+0xa0>
   504b4:	80c0b717 	ldw	r3,732(r16)
   504b8:	003fe406 	br	5044c <__alt_data_end+0xfffd044c>
   504bc:	00bfffc4 	movi	r2,-1
   504c0:	f800283a 	ret
   504c4:	00bfffc4 	movi	r2,-1
   504c8:	003fed06 	br	50480 <__alt_data_end+0xfffd0480>

000504cc <raise>:
   504cc:	008001f4 	movhi	r2,7
   504d0:	10bb7304 	addi	r2,r2,-4660
   504d4:	200b883a 	mov	r5,r4
   504d8:	11000017 	ldw	r4,0(r2)
   504dc:	00503681 	jmpi	50368 <_raise_r>

000504e0 <signal>:
   504e0:	008001f4 	movhi	r2,7
   504e4:	10bb7304 	addi	r2,r2,-4660
   504e8:	280d883a 	mov	r6,r5
   504ec:	200b883a 	mov	r5,r4
   504f0:	11000017 	ldw	r4,0(r2)
   504f4:	00502e41 	jmpi	502e4 <_signal_r>

000504f8 <_init_signal>:
   504f8:	008001f4 	movhi	r2,7
   504fc:	10bb7304 	addi	r2,r2,-4660
   50500:	11000017 	ldw	r4,0(r2)
   50504:	00502781 	jmpi	50278 <_init_signal_r>

00050508 <__sigtramp>:
   50508:	008001f4 	movhi	r2,7
   5050c:	10bb7304 	addi	r2,r2,-4660
   50510:	200b883a 	mov	r5,r4
   50514:	11000017 	ldw	r4,0(r2)
   50518:	00504241 	jmpi	50424 <__sigtramp_r>

0005051c <_kill_r>:
   5051c:	defffd04 	addi	sp,sp,-12
   50520:	2805883a 	mov	r2,r5
   50524:	dc000015 	stw	r16,0(sp)
   50528:	040001f4 	movhi	r16,7
   5052c:	dc400115 	stw	r17,4(sp)
   50530:	84080e04 	addi	r16,r16,8248
   50534:	2023883a 	mov	r17,r4
   50538:	300b883a 	mov	r5,r6
   5053c:	1009883a 	mov	r4,r2
   50540:	dfc00215 	stw	ra,8(sp)
   50544:	80000015 	stw	zero,0(r16)
   50548:	00604780 	call	60478 <kill>
   5054c:	00ffffc4 	movi	r3,-1
   50550:	10c00526 	beq	r2,r3,50568 <_kill_r+0x4c>
   50554:	dfc00217 	ldw	ra,8(sp)
   50558:	dc400117 	ldw	r17,4(sp)
   5055c:	dc000017 	ldw	r16,0(sp)
   50560:	dec00304 	addi	sp,sp,12
   50564:	f800283a 	ret
   50568:	80c00017 	ldw	r3,0(r16)
   5056c:	183ff926 	beq	r3,zero,50554 <__alt_data_end+0xfffd0554>
   50570:	88c00015 	stw	r3,0(r17)
   50574:	003ff706 	br	50554 <__alt_data_end+0xfffd0554>

00050578 <_getpid_r>:
   50578:	00603341 	jmpi	60334 <getpid>

0005057c <_sprintf_r>:
   5057c:	deffe404 	addi	sp,sp,-112
   50580:	2807883a 	mov	r3,r5
   50584:	dfc01a15 	stw	ra,104(sp)
   50588:	d9c01b15 	stw	r7,108(sp)
   5058c:	00a00034 	movhi	r2,32768
   50590:	10bfffc4 	addi	r2,r2,-1
   50594:	02008204 	movi	r8,520
   50598:	d8800215 	stw	r2,8(sp)
   5059c:	d8800515 	stw	r2,20(sp)
   505a0:	d9c01b04 	addi	r7,sp,108
   505a4:	d80b883a 	mov	r5,sp
   505a8:	00bfffc4 	movi	r2,-1
   505ac:	d8c00015 	stw	r3,0(sp)
   505b0:	d8c00415 	stw	r3,16(sp)
   505b4:	da00030d 	sth	r8,12(sp)
   505b8:	d880038d 	sth	r2,14(sp)
   505bc:	00507b40 	call	507b4 <___svfprintf_internal_r>
   505c0:	d8c00017 	ldw	r3,0(sp)
   505c4:	18000005 	stb	zero,0(r3)
   505c8:	dfc01a17 	ldw	ra,104(sp)
   505cc:	dec01c04 	addi	sp,sp,112
   505d0:	f800283a 	ret

000505d4 <sprintf>:
   505d4:	deffe304 	addi	sp,sp,-116
   505d8:	2007883a 	mov	r3,r4
   505dc:	dfc01a15 	stw	ra,104(sp)
   505e0:	d9801b15 	stw	r6,108(sp)
   505e4:	d9c01c15 	stw	r7,112(sp)
   505e8:	010001f4 	movhi	r4,7
   505ec:	213b7304 	addi	r4,r4,-4660
   505f0:	21000017 	ldw	r4,0(r4)
   505f4:	00a00034 	movhi	r2,32768
   505f8:	10bfffc4 	addi	r2,r2,-1
   505fc:	280d883a 	mov	r6,r5
   50600:	02008204 	movi	r8,520
   50604:	d8800215 	stw	r2,8(sp)
   50608:	d8800515 	stw	r2,20(sp)
   5060c:	d9c01b04 	addi	r7,sp,108
   50610:	d80b883a 	mov	r5,sp
   50614:	00bfffc4 	movi	r2,-1
   50618:	d8c00015 	stw	r3,0(sp)
   5061c:	d8c00415 	stw	r3,16(sp)
   50620:	da00030d 	sth	r8,12(sp)
   50624:	d880038d 	sth	r2,14(sp)
   50628:	00507b40 	call	507b4 <___svfprintf_internal_r>
   5062c:	d8c00017 	ldw	r3,0(sp)
   50630:	18000005 	stb	zero,0(r3)
   50634:	dfc01a17 	ldw	ra,104(sp)
   50638:	dec01d04 	addi	sp,sp,116
   5063c:	f800283a 	ret

00050640 <strcmp>:
   50640:	2144b03a 	or	r2,r4,r5
   50644:	108000cc 	andi	r2,r2,3
   50648:	1000171e 	bne	r2,zero,506a8 <strcmp+0x68>
   5064c:	20800017 	ldw	r2,0(r4)
   50650:	28c00017 	ldw	r3,0(r5)
   50654:	10c0141e 	bne	r2,r3,506a8 <strcmp+0x68>
   50658:	027fbff4 	movhi	r9,65279
   5065c:	4a7fbfc4 	addi	r9,r9,-257
   50660:	0086303a 	nor	r3,zero,r2
   50664:	02202074 	movhi	r8,32897
   50668:	1245883a 	add	r2,r2,r9
   5066c:	42202004 	addi	r8,r8,-32640
   50670:	10c4703a 	and	r2,r2,r3
   50674:	1204703a 	and	r2,r2,r8
   50678:	10000226 	beq	r2,zero,50684 <strcmp+0x44>
   5067c:	00002306 	br	5070c <strcmp+0xcc>
   50680:	1000221e 	bne	r2,zero,5070c <strcmp+0xcc>
   50684:	21000104 	addi	r4,r4,4
   50688:	20c00017 	ldw	r3,0(r4)
   5068c:	29400104 	addi	r5,r5,4
   50690:	29800017 	ldw	r6,0(r5)
   50694:	1a4f883a 	add	r7,r3,r9
   50698:	00c4303a 	nor	r2,zero,r3
   5069c:	3884703a 	and	r2,r7,r2
   506a0:	1204703a 	and	r2,r2,r8
   506a4:	19bff626 	beq	r3,r6,50680 <__alt_data_end+0xfffd0680>
   506a8:	20800003 	ldbu	r2,0(r4)
   506ac:	10c03fcc 	andi	r3,r2,255
   506b0:	18c0201c 	xori	r3,r3,128
   506b4:	18ffe004 	addi	r3,r3,-128
   506b8:	18000c26 	beq	r3,zero,506ec <strcmp+0xac>
   506bc:	29800007 	ldb	r6,0(r5)
   506c0:	19800326 	beq	r3,r6,506d0 <strcmp+0x90>
   506c4:	00001306 	br	50714 <strcmp+0xd4>
   506c8:	29800007 	ldb	r6,0(r5)
   506cc:	11800b1e 	bne	r2,r6,506fc <strcmp+0xbc>
   506d0:	21000044 	addi	r4,r4,1
   506d4:	20c00003 	ldbu	r3,0(r4)
   506d8:	29400044 	addi	r5,r5,1
   506dc:	18803fcc 	andi	r2,r3,255
   506e0:	1080201c 	xori	r2,r2,128
   506e4:	10bfe004 	addi	r2,r2,-128
   506e8:	103ff71e 	bne	r2,zero,506c8 <__alt_data_end+0xfffd06c8>
   506ec:	0007883a 	mov	r3,zero
   506f0:	28800003 	ldbu	r2,0(r5)
   506f4:	1885c83a 	sub	r2,r3,r2
   506f8:	f800283a 	ret
   506fc:	28800003 	ldbu	r2,0(r5)
   50700:	18c03fcc 	andi	r3,r3,255
   50704:	1885c83a 	sub	r2,r3,r2
   50708:	f800283a 	ret
   5070c:	0005883a 	mov	r2,zero
   50710:	f800283a 	ret
   50714:	10c03fcc 	andi	r3,r2,255
   50718:	003ff506 	br	506f0 <__alt_data_end+0xfffd06f0>

0005071c <strlen>:
   5071c:	208000cc 	andi	r2,r4,3
   50720:	10002026 	beq	r2,zero,507a4 <strlen+0x88>
   50724:	20800007 	ldb	r2,0(r4)
   50728:	10002026 	beq	r2,zero,507ac <strlen+0x90>
   5072c:	2005883a 	mov	r2,r4
   50730:	00000206 	br	5073c <strlen+0x20>
   50734:	10c00007 	ldb	r3,0(r2)
   50738:	18001826 	beq	r3,zero,5079c <strlen+0x80>
   5073c:	10800044 	addi	r2,r2,1
   50740:	10c000cc 	andi	r3,r2,3
   50744:	183ffb1e 	bne	r3,zero,50734 <__alt_data_end+0xfffd0734>
   50748:	10c00017 	ldw	r3,0(r2)
   5074c:	01ffbff4 	movhi	r7,65279
   50750:	39ffbfc4 	addi	r7,r7,-257
   50754:	00ca303a 	nor	r5,zero,r3
   50758:	01a02074 	movhi	r6,32897
   5075c:	19c7883a 	add	r3,r3,r7
   50760:	31a02004 	addi	r6,r6,-32640
   50764:	1946703a 	and	r3,r3,r5
   50768:	1986703a 	and	r3,r3,r6
   5076c:	1800091e 	bne	r3,zero,50794 <strlen+0x78>
   50770:	10800104 	addi	r2,r2,4
   50774:	10c00017 	ldw	r3,0(r2)
   50778:	19cb883a 	add	r5,r3,r7
   5077c:	00c6303a 	nor	r3,zero,r3
   50780:	28c6703a 	and	r3,r5,r3
   50784:	1986703a 	and	r3,r3,r6
   50788:	183ff926 	beq	r3,zero,50770 <__alt_data_end+0xfffd0770>
   5078c:	00000106 	br	50794 <strlen+0x78>
   50790:	10800044 	addi	r2,r2,1
   50794:	10c00007 	ldb	r3,0(r2)
   50798:	183ffd1e 	bne	r3,zero,50790 <__alt_data_end+0xfffd0790>
   5079c:	1105c83a 	sub	r2,r2,r4
   507a0:	f800283a 	ret
   507a4:	2005883a 	mov	r2,r4
   507a8:	003fe706 	br	50748 <__alt_data_end+0xfffd0748>
   507ac:	0005883a 	mov	r2,zero
   507b0:	f800283a 	ret

000507b4 <___svfprintf_internal_r>:
   507b4:	deffb704 	addi	sp,sp,-292
   507b8:	dfc04815 	stw	ra,288(sp)
   507bc:	ddc04615 	stw	r23,280(sp)
   507c0:	d9402d15 	stw	r5,180(sp)
   507c4:	d9003915 	stw	r4,228(sp)
   507c8:	302f883a 	mov	r23,r6
   507cc:	d9c02e15 	stw	r7,184(sp)
   507d0:	df004715 	stw	fp,284(sp)
   507d4:	dd804515 	stw	r22,276(sp)
   507d8:	dd404415 	stw	r21,272(sp)
   507dc:	dd004315 	stw	r20,268(sp)
   507e0:	dcc04215 	stw	r19,264(sp)
   507e4:	dc804115 	stw	r18,260(sp)
   507e8:	dc404015 	stw	r17,256(sp)
   507ec:	dc003f15 	stw	r16,252(sp)
   507f0:	00579b80 	call	579b8 <_localeconv_r>
   507f4:	10800017 	ldw	r2,0(r2)
   507f8:	1009883a 	mov	r4,r2
   507fc:	d8803415 	stw	r2,208(sp)
   50800:	005071c0 	call	5071c <strlen>
   50804:	d8c02d17 	ldw	r3,180(sp)
   50808:	d8803815 	stw	r2,224(sp)
   5080c:	1880030b 	ldhu	r2,12(r3)
   50810:	1080200c 	andi	r2,r2,128
   50814:	10000226 	beq	r2,zero,50820 <___svfprintf_internal_r+0x6c>
   50818:	18800417 	ldw	r2,16(r3)
   5081c:	1006b126 	beq	r2,zero,522e4 <___svfprintf_internal_r+0x1b30>
   50820:	dcc03917 	ldw	r19,228(sp)
   50824:	d8c00404 	addi	r3,sp,16
   50828:	054001f4 	movhi	r21,7
   5082c:	d9001e04 	addi	r4,sp,120
   50830:	ad6e8084 	addi	r21,r21,-17918
   50834:	d8c01e15 	stw	r3,120(sp)
   50838:	d8002015 	stw	zero,128(sp)
   5083c:	d8001f15 	stw	zero,124(sp)
   50840:	d8003315 	stw	zero,204(sp)
   50844:	d8003615 	stw	zero,216(sp)
   50848:	d8003715 	stw	zero,220(sp)
   5084c:	1811883a 	mov	r8,r3
   50850:	d8003a15 	stw	zero,232(sp)
   50854:	d8003b15 	stw	zero,236(sp)
   50858:	d8002f15 	stw	zero,188(sp)
   5085c:	d9002815 	stw	r4,160(sp)
   50860:	b8800007 	ldb	r2,0(r23)
   50864:	10027726 	beq	r2,zero,51244 <___svfprintf_internal_r+0xa90>
   50868:	00c00944 	movi	r3,37
   5086c:	b823883a 	mov	r17,r23
   50870:	10c0021e 	bne	r2,r3,5087c <___svfprintf_internal_r+0xc8>
   50874:	00001406 	br	508c8 <___svfprintf_internal_r+0x114>
   50878:	10c00326 	beq	r2,r3,50888 <___svfprintf_internal_r+0xd4>
   5087c:	8c400044 	addi	r17,r17,1
   50880:	88800007 	ldb	r2,0(r17)
   50884:	103ffc1e 	bne	r2,zero,50878 <__alt_data_end+0xfffd0878>
   50888:	8de1c83a 	sub	r16,r17,r23
   5088c:	80000e26 	beq	r16,zero,508c8 <___svfprintf_internal_r+0x114>
   50890:	d8c02017 	ldw	r3,128(sp)
   50894:	d8801f17 	ldw	r2,124(sp)
   50898:	45c00015 	stw	r23,0(r8)
   5089c:	1c07883a 	add	r3,r3,r16
   508a0:	10800044 	addi	r2,r2,1
   508a4:	d8c02015 	stw	r3,128(sp)
   508a8:	44000115 	stw	r16,4(r8)
   508ac:	d8801f15 	stw	r2,124(sp)
   508b0:	00c001c4 	movi	r3,7
   508b4:	18809916 	blt	r3,r2,50b1c <___svfprintf_internal_r+0x368>
   508b8:	42000204 	addi	r8,r8,8
   508bc:	d9402f17 	ldw	r5,188(sp)
   508c0:	2c0b883a 	add	r5,r5,r16
   508c4:	d9402f15 	stw	r5,188(sp)
   508c8:	88800007 	ldb	r2,0(r17)
   508cc:	10009a26 	beq	r2,zero,50b38 <___svfprintf_internal_r+0x384>
   508d0:	8dc00044 	addi	r23,r17,1
   508d4:	8c400047 	ldb	r17,1(r17)
   508d8:	0021883a 	mov	r16,zero
   508dc:	00bfffc4 	movi	r2,-1
   508e0:	0025883a 	mov	r18,zero
   508e4:	dc002905 	stb	r16,164(sp)
   508e8:	d8002785 	stb	zero,158(sp)
   508ec:	d8002b05 	stb	zero,172(sp)
   508f0:	d8802a15 	stw	r2,168(sp)
   508f4:	d8003115 	stw	zero,196(sp)
   508f8:	05001604 	movi	r20,88
   508fc:	05800244 	movi	r22,9
   50900:	4039883a 	mov	fp,r8
   50904:	9021883a 	mov	r16,r18
   50908:	bdc00044 	addi	r23,r23,1
   5090c:	88bff804 	addi	r2,r17,-32
   50910:	a0831e36 	bltu	r20,r2,5158c <___svfprintf_internal_r+0xdd8>
   50914:	100490ba 	slli	r2,r2,2
   50918:	00c00174 	movhi	r3,5
   5091c:	18c24b04 	addi	r3,r3,2348
   50920:	10c5883a 	add	r2,r2,r3
   50924:	10800017 	ldw	r2,0(r2)
   50928:	1000683a 	jmp	r2
   5092c:	000514d4 	movui	zero,5203
   50930:	0005158c 	andi	zero,zero,5206
   50934:	0005158c 	andi	zero,zero,5206
   50938:	000514c8 	cmpgei	zero,zero,5203
   5093c:	0005158c 	andi	zero,zero,5206
   50940:	0005158c 	andi	zero,zero,5206
   50944:	0005158c 	andi	zero,zero,5206
   50948:	0005158c 	andi	zero,zero,5206
   5094c:	0005158c 	andi	zero,zero,5206
   50950:	0005158c 	andi	zero,zero,5206
   50954:	00050b94 	movui	zero,5166
   50958:	000513d8 	cmpnei	zero,zero,5199
   5095c:	0005158c 	andi	zero,zero,5206
   50960:	00050aa0 	cmpeqi	zero,zero,5162
   50964:	00050bb8 	rdprs	zero,zero,5166
   50968:	0005158c 	andi	zero,zero,5206
   5096c:	00050c44 	movi	zero,5169
   50970:	00050c08 	cmpgei	zero,zero,5168
   50974:	00050c08 	cmpgei	zero,zero,5168
   50978:	00050c08 	cmpgei	zero,zero,5168
   5097c:	00050c08 	cmpgei	zero,zero,5168
   50980:	00050c08 	cmpgei	zero,zero,5168
   50984:	00050c08 	cmpgei	zero,zero,5168
   50988:	00050c08 	cmpgei	zero,zero,5168
   5098c:	00050c08 	cmpgei	zero,zero,5168
   50990:	00050c08 	cmpgei	zero,zero,5168
   50994:	0005158c 	andi	zero,zero,5206
   50998:	0005158c 	andi	zero,zero,5206
   5099c:	0005158c 	andi	zero,zero,5206
   509a0:	0005158c 	andi	zero,zero,5206
   509a4:	0005158c 	andi	zero,zero,5206
   509a8:	0005158c 	andi	zero,zero,5206
   509ac:	0005158c 	andi	zero,zero,5206
   509b0:	0005158c 	andi	zero,zero,5206
   509b4:	0005158c 	andi	zero,zero,5206
   509b8:	0005158c 	andi	zero,zero,5206
   509bc:	00050d08 	cmpgei	zero,zero,5172
   509c0:	00050c50 	cmplti	zero,zero,5169
   509c4:	0005158c 	andi	zero,zero,5206
   509c8:	00050c50 	cmplti	zero,zero,5169
   509cc:	0005158c 	andi	zero,zero,5206
   509d0:	0005158c 	andi	zero,zero,5206
   509d4:	0005158c 	andi	zero,zero,5206
   509d8:	0005158c 	andi	zero,zero,5206
   509dc:	00050cfc 	xorhi	zero,zero,5171
   509e0:	0005158c 	andi	zero,zero,5206
   509e4:	0005158c 	andi	zero,zero,5206
   509e8:	00050dd0 	cmplti	zero,zero,5175
   509ec:	0005158c 	andi	zero,zero,5206
   509f0:	0005158c 	andi	zero,zero,5206
   509f4:	0005158c 	andi	zero,zero,5206
   509f8:	0005158c 	andi	zero,zero,5206
   509fc:	0005158c 	andi	zero,zero,5206
   50a00:	0005124c 	andi	zero,zero,5193
   50a04:	0005158c 	andi	zero,zero,5206
   50a08:	0005158c 	andi	zero,zero,5206
   50a0c:	000512b8 	rdprs	zero,zero,5194
   50a10:	0005158c 	andi	zero,zero,5206
   50a14:	0005158c 	andi	zero,zero,5206
   50a18:	0005158c 	andi	zero,zero,5206
   50a1c:	0005158c 	andi	zero,zero,5206
   50a20:	0005158c 	andi	zero,zero,5206
   50a24:	0005158c 	andi	zero,zero,5206
   50a28:	0005158c 	andi	zero,zero,5206
   50a2c:	0005158c 	andi	zero,zero,5206
   50a30:	0005158c 	andi	zero,zero,5206
   50a34:	0005158c 	andi	zero,zero,5206
   50a38:	00051374 	movhi	zero,5197
   50a3c:	000514f4 	movhi	zero,5203
   50a40:	00050c50 	cmplti	zero,zero,5169
   50a44:	00050c50 	cmplti	zero,zero,5169
   50a48:	00050c50 	cmplti	zero,zero,5169
   50a4c:	00051568 	cmpgeui	zero,zero,5205
   50a50:	000514f4 	movhi	zero,5203
   50a54:	0005158c 	andi	zero,zero,5206
   50a58:	0005158c 	andi	zero,zero,5206
   50a5c:	00051514 	movui	zero,5204
   50a60:	0005158c 	andi	zero,zero,5206
   50a64:	00051528 	cmpgeui	zero,zero,5204
   50a68:	000513b8 	rdprs	zero,zero,5198
   50a6c:	00050aac 	andhi	zero,zero,5162
   50a70:	000513f0 	cmpltui	zero,zero,5199
   50a74:	0005158c 	andi	zero,zero,5206
   50a78:	000513fc 	xorhi	zero,zero,5199
   50a7c:	0005158c 	andi	zero,zero,5206
   50a80:	00051460 	cmpeqi	zero,zero,5201
   50a84:	0005158c 	andi	zero,zero,5206
   50a88:	0005158c 	andi	zero,zero,5206
   50a8c:	00051480 	call	5148 <__alt_mem_onchip_memory2_0-0x3aeb8>
   50a90:	d8c03117 	ldw	r3,196(sp)
   50a94:	d8802e15 	stw	r2,184(sp)
   50a98:	00c7c83a 	sub	r3,zero,r3
   50a9c:	d8c03115 	stw	r3,196(sp)
   50aa0:	84000114 	ori	r16,r16,4
   50aa4:	bc400007 	ldb	r17,0(r23)
   50aa8:	003f9706 	br	50908 <__alt_data_end+0xfffd0908>
   50aac:	00800c04 	movi	r2,48
   50ab0:	d8802705 	stb	r2,156(sp)
   50ab4:	00801e04 	movi	r2,120
   50ab8:	d8802745 	stb	r2,157(sp)
   50abc:	d9002a17 	ldw	r4,168(sp)
   50ac0:	d8802e17 	ldw	r2,184(sp)
   50ac4:	d8002785 	stb	zero,158(sp)
   50ac8:	e011883a 	mov	r8,fp
   50acc:	10c00104 	addi	r3,r2,4
   50ad0:	15000017 	ldw	r20,0(r2)
   50ad4:	002d883a 	mov	r22,zero
   50ad8:	80800094 	ori	r2,r16,2
   50adc:	2002b616 	blt	r4,zero,515b8 <___svfprintf_internal_r+0xe04>
   50ae0:	00bfdfc4 	movi	r2,-129
   50ae4:	80a4703a 	and	r18,r16,r2
   50ae8:	d8c02e15 	stw	r3,184(sp)
   50aec:	94800094 	ori	r18,r18,2
   50af0:	a002a01e 	bne	r20,zero,51574 <___svfprintf_internal_r+0xdc0>
   50af4:	014001f4 	movhi	r5,7
   50af8:	296e7904 	addi	r5,r5,-17948
   50afc:	d9403a15 	stw	r5,232(sp)
   50b00:	04401e04 	movi	r17,120
   50b04:	d8c02a17 	ldw	r3,168(sp)
   50b08:	0039883a 	mov	fp,zero
   50b0c:	1801e626 	beq	r3,zero,512a8 <___svfprintf_internal_r+0xaf4>
   50b10:	0029883a 	mov	r20,zero
   50b14:	002d883a 	mov	r22,zero
   50b18:	00020506 	br	51330 <___svfprintf_internal_r+0xb7c>
   50b1c:	d9402d17 	ldw	r5,180(sp)
   50b20:	d9801e04 	addi	r6,sp,120
   50b24:	9809883a 	mov	r4,r19
   50b28:	00597180 	call	59718 <__ssprint_r>
   50b2c:	1000081e 	bne	r2,zero,50b50 <___svfprintf_internal_r+0x39c>
   50b30:	da000404 	addi	r8,sp,16
   50b34:	003f6106 	br	508bc <__alt_data_end+0xfffd08bc>
   50b38:	d8802017 	ldw	r2,128(sp)
   50b3c:	10000426 	beq	r2,zero,50b50 <___svfprintf_internal_r+0x39c>
   50b40:	d9402d17 	ldw	r5,180(sp)
   50b44:	d9003917 	ldw	r4,228(sp)
   50b48:	d9801e04 	addi	r6,sp,120
   50b4c:	00597180 	call	59718 <__ssprint_r>
   50b50:	d8802d17 	ldw	r2,180(sp)
   50b54:	10c0030b 	ldhu	r3,12(r2)
   50b58:	d8802f17 	ldw	r2,188(sp)
   50b5c:	18c0100c 	andi	r3,r3,64
   50b60:	1806251e 	bne	r3,zero,523f8 <___svfprintf_internal_r+0x1c44>
   50b64:	dfc04817 	ldw	ra,288(sp)
   50b68:	df004717 	ldw	fp,284(sp)
   50b6c:	ddc04617 	ldw	r23,280(sp)
   50b70:	dd804517 	ldw	r22,276(sp)
   50b74:	dd404417 	ldw	r21,272(sp)
   50b78:	dd004317 	ldw	r20,268(sp)
   50b7c:	dcc04217 	ldw	r19,264(sp)
   50b80:	dc804117 	ldw	r18,260(sp)
   50b84:	dc404017 	ldw	r17,256(sp)
   50b88:	dc003f17 	ldw	r16,252(sp)
   50b8c:	dec04904 	addi	sp,sp,292
   50b90:	f800283a 	ret
   50b94:	d9002e17 	ldw	r4,184(sp)
   50b98:	d9402e17 	ldw	r5,184(sp)
   50b9c:	21000017 	ldw	r4,0(r4)
   50ba0:	28800104 	addi	r2,r5,4
   50ba4:	d9003115 	stw	r4,196(sp)
   50ba8:	203fb916 	blt	r4,zero,50a90 <__alt_data_end+0xfffd0a90>
   50bac:	d8802e15 	stw	r2,184(sp)
   50bb0:	bc400007 	ldb	r17,0(r23)
   50bb4:	003f5406 	br	50908 <__alt_data_end+0xfffd0908>
   50bb8:	bc400007 	ldb	r17,0(r23)
   50bbc:	01000a84 	movi	r4,42
   50bc0:	b8c00044 	addi	r3,r23,1
   50bc4:	89076926 	beq	r17,r4,5296c <___svfprintf_internal_r+0x21b8>
   50bc8:	8cbff404 	addi	r18,r17,-48
   50bcc:	b486b936 	bltu	r22,r18,526b4 <___svfprintf_internal_r+0x1f00>
   50bd0:	0009883a 	mov	r4,zero
   50bd4:	1823883a 	mov	r17,r3
   50bd8:	01400284 	movi	r5,10
   50bdc:	004dab40 	call	4dab4 <__mulsi3>
   50be0:	88c00007 	ldb	r3,0(r17)
   50be4:	1489883a 	add	r4,r2,r18
   50be8:	8dc00044 	addi	r23,r17,1
   50bec:	1cbff404 	addi	r18,r3,-48
   50bf0:	b823883a 	mov	r17,r23
   50bf4:	b4bff82e 	bgeu	r22,r18,50bd8 <__alt_data_end+0xfffd0bd8>
   50bf8:	1823883a 	mov	r17,r3
   50bfc:	20060416 	blt	r4,zero,52410 <___svfprintf_internal_r+0x1c5c>
   50c00:	d9002a15 	stw	r4,168(sp)
   50c04:	003f4106 	br	5090c <__alt_data_end+0xfffd090c>
   50c08:	8cbff404 	addi	r18,r17,-48
   50c0c:	d8003115 	stw	zero,196(sp)
   50c10:	0009883a 	mov	r4,zero
   50c14:	b823883a 	mov	r17,r23
   50c18:	01400284 	movi	r5,10
   50c1c:	004dab40 	call	4dab4 <__mulsi3>
   50c20:	88c00007 	ldb	r3,0(r17)
   50c24:	9089883a 	add	r4,r18,r2
   50c28:	bdc00044 	addi	r23,r23,1
   50c2c:	1cbff404 	addi	r18,r3,-48
   50c30:	b823883a 	mov	r17,r23
   50c34:	b4bff82e 	bgeu	r22,r18,50c18 <__alt_data_end+0xfffd0c18>
   50c38:	1823883a 	mov	r17,r3
   50c3c:	d9003115 	stw	r4,196(sp)
   50c40:	003f3206 	br	5090c <__alt_data_end+0xfffd090c>
   50c44:	84002014 	ori	r16,r16,128
   50c48:	bc400007 	ldb	r17,0(r23)
   50c4c:	003f2e06 	br	50908 <__alt_data_end+0xfffd0908>
   50c50:	8025883a 	mov	r18,r16
   50c54:	dc002903 	ldbu	r16,164(sp)
   50c58:	e011883a 	mov	r8,fp
   50c5c:	84003fcc 	andi	r16,r16,255
   50c60:	8007721e 	bne	r16,zero,52a2c <___svfprintf_internal_r+0x2278>
   50c64:	9080020c 	andi	r2,r18,8
   50c68:	1004a526 	beq	r2,zero,51f00 <___svfprintf_internal_r+0x174c>
   50c6c:	d9002e17 	ldw	r4,184(sp)
   50c70:	d9402e17 	ldw	r5,184(sp)
   50c74:	d8802e17 	ldw	r2,184(sp)
   50c78:	21000017 	ldw	r4,0(r4)
   50c7c:	29400117 	ldw	r5,4(r5)
   50c80:	10800204 	addi	r2,r2,8
   50c84:	d9003615 	stw	r4,216(sp)
   50c88:	d9403715 	stw	r5,220(sp)
   50c8c:	d8802e15 	stw	r2,184(sp)
   50c90:	d9003617 	ldw	r4,216(sp)
   50c94:	d9403717 	ldw	r5,220(sp)
   50c98:	da003e15 	stw	r8,248(sp)
   50c9c:	04000044 	movi	r16,1
   50ca0:	00595680 	call	59568 <__fpclassifyd>
   50ca4:	da003e17 	ldw	r8,248(sp)
   50ca8:	1404731e 	bne	r2,r16,51e78 <___svfprintf_internal_r+0x16c4>
   50cac:	d9003617 	ldw	r4,216(sp)
   50cb0:	d9403717 	ldw	r5,220(sp)
   50cb4:	000d883a 	mov	r6,zero
   50cb8:	000f883a 	mov	r7,zero
   50cbc:	005ec6c0 	call	5ec6c <__ledf2>
   50cc0:	da003e17 	ldw	r8,248(sp)
   50cc4:	10061b16 	blt	r2,zero,52534 <___svfprintf_internal_r+0x1d80>
   50cc8:	df002783 	ldbu	fp,158(sp)
   50ccc:	008011c4 	movi	r2,71
   50cd0:	1445810e 	bge	r2,r17,522d8 <___svfprintf_internal_r+0x1b24>
   50cd4:	040001f4 	movhi	r16,7
   50cd8:	842e7104 	addi	r16,r16,-17980
   50cdc:	00c000c4 	movi	r3,3
   50ce0:	00bfdfc4 	movi	r2,-129
   50ce4:	d8c02915 	stw	r3,164(sp)
   50ce8:	90a4703a 	and	r18,r18,r2
   50cec:	d8c02b15 	stw	r3,172(sp)
   50cf0:	d8002a15 	stw	zero,168(sp)
   50cf4:	d8003215 	stw	zero,200(sp)
   50cf8:	00006c06 	br	50eac <___svfprintf_internal_r+0x6f8>
   50cfc:	84000214 	ori	r16,r16,8
   50d00:	bc400007 	ldb	r17,0(r23)
   50d04:	003f0006 	br	50908 <__alt_data_end+0xfffd0908>
   50d08:	8025883a 	mov	r18,r16
   50d0c:	dc002903 	ldbu	r16,164(sp)
   50d10:	e011883a 	mov	r8,fp
   50d14:	84003fcc 	andi	r16,r16,255
   50d18:	80073f1e 	bne	r16,zero,52a18 <___svfprintf_internal_r+0x2264>
   50d1c:	94800414 	ori	r18,r18,16
   50d20:	9080080c 	andi	r2,r18,32
   50d24:	1003bb26 	beq	r2,zero,51c14 <___svfprintf_internal_r+0x1460>
   50d28:	d9002e17 	ldw	r4,184(sp)
   50d2c:	20800117 	ldw	r2,4(r4)
   50d30:	25000017 	ldw	r20,0(r4)
   50d34:	21000204 	addi	r4,r4,8
   50d38:	d9002e15 	stw	r4,184(sp)
   50d3c:	102d883a 	mov	r22,r2
   50d40:	1003bd16 	blt	r2,zero,51c38 <___svfprintf_internal_r+0x1484>
   50d44:	d9002a17 	ldw	r4,168(sp)
   50d48:	df002783 	ldbu	fp,158(sp)
   50d4c:	2003d016 	blt	r4,zero,51c90 <___svfprintf_internal_r+0x14dc>
   50d50:	00ffdfc4 	movi	r3,-129
   50d54:	a584b03a 	or	r2,r20,r22
   50d58:	90e4703a 	and	r18,r18,r3
   50d5c:	10015026 	beq	r2,zero,512a0 <___svfprintf_internal_r+0xaec>
   50d60:	b0037026 	beq	r22,zero,51b24 <___svfprintf_internal_r+0x1370>
   50d64:	dc402915 	stw	r17,164(sp)
   50d68:	dc001e04 	addi	r16,sp,120
   50d6c:	b023883a 	mov	r17,r22
   50d70:	402d883a 	mov	r22,r8
   50d74:	a009883a 	mov	r4,r20
   50d78:	880b883a 	mov	r5,r17
   50d7c:	01800284 	movi	r6,10
   50d80:	000f883a 	mov	r7,zero
   50d84:	005d2c80 	call	5d2c8 <__umoddi3>
   50d88:	10800c04 	addi	r2,r2,48
   50d8c:	843fffc4 	addi	r16,r16,-1
   50d90:	a009883a 	mov	r4,r20
   50d94:	880b883a 	mov	r5,r17
   50d98:	80800005 	stb	r2,0(r16)
   50d9c:	01800284 	movi	r6,10
   50da0:	000f883a 	mov	r7,zero
   50da4:	005cccc0 	call	5cccc <__udivdi3>
   50da8:	1029883a 	mov	r20,r2
   50dac:	10c4b03a 	or	r2,r2,r3
   50db0:	1823883a 	mov	r17,r3
   50db4:	103fef1e 	bne	r2,zero,50d74 <__alt_data_end+0xfffd0d74>
   50db8:	d8c02817 	ldw	r3,160(sp)
   50dbc:	dc402917 	ldw	r17,164(sp)
   50dc0:	b011883a 	mov	r8,r22
   50dc4:	1c07c83a 	sub	r3,r3,r16
   50dc8:	d8c02b15 	stw	r3,172(sp)
   50dcc:	00003106 	br	50e94 <___svfprintf_internal_r+0x6e0>
   50dd0:	8025883a 	mov	r18,r16
   50dd4:	dc002903 	ldbu	r16,164(sp)
   50dd8:	e011883a 	mov	r8,fp
   50ddc:	84003fcc 	andi	r16,r16,255
   50de0:	80070a1e 	bne	r16,zero,52a0c <___svfprintf_internal_r+0x2258>
   50de4:	94800414 	ori	r18,r18,16
   50de8:	9080080c 	andi	r2,r18,32
   50dec:	1002f626 	beq	r2,zero,519c8 <___svfprintf_internal_r+0x1214>
   50df0:	d9002e17 	ldw	r4,184(sp)
   50df4:	d9402a17 	ldw	r5,168(sp)
   50df8:	d8002785 	stb	zero,158(sp)
   50dfc:	20800204 	addi	r2,r4,8
   50e00:	25000017 	ldw	r20,0(r4)
   50e04:	25800117 	ldw	r22,4(r4)
   50e08:	28043716 	blt	r5,zero,51ee8 <___svfprintf_internal_r+0x1734>
   50e0c:	013fdfc4 	movi	r4,-129
   50e10:	a586b03a 	or	r3,r20,r22
   50e14:	d8802e15 	stw	r2,184(sp)
   50e18:	9124703a 	and	r18,r18,r4
   50e1c:	1802f71e 	bne	r3,zero,519fc <___svfprintf_internal_r+0x1248>
   50e20:	d9402a17 	ldw	r5,168(sp)
   50e24:	0039883a 	mov	fp,zero
   50e28:	2806df26 	beq	r5,zero,529a8 <___svfprintf_internal_r+0x21f4>
   50e2c:	0029883a 	mov	r20,zero
   50e30:	002d883a 	mov	r22,zero
   50e34:	dc001e04 	addi	r16,sp,120
   50e38:	a006d0fa 	srli	r3,r20,3
   50e3c:	b008977a 	slli	r4,r22,29
   50e40:	b02cd0fa 	srli	r22,r22,3
   50e44:	a50001cc 	andi	r20,r20,7
   50e48:	a0800c04 	addi	r2,r20,48
   50e4c:	843fffc4 	addi	r16,r16,-1
   50e50:	20e8b03a 	or	r20,r4,r3
   50e54:	80800005 	stb	r2,0(r16)
   50e58:	a586b03a 	or	r3,r20,r22
   50e5c:	183ff61e 	bne	r3,zero,50e38 <__alt_data_end+0xfffd0e38>
   50e60:	90c0004c 	andi	r3,r18,1
   50e64:	18013f26 	beq	r3,zero,51364 <___svfprintf_internal_r+0xbb0>
   50e68:	10803fcc 	andi	r2,r2,255
   50e6c:	1080201c 	xori	r2,r2,128
   50e70:	10bfe004 	addi	r2,r2,-128
   50e74:	00c00c04 	movi	r3,48
   50e78:	10c13a26 	beq	r2,r3,51364 <___svfprintf_internal_r+0xbb0>
   50e7c:	80ffffc5 	stb	r3,-1(r16)
   50e80:	d8c02817 	ldw	r3,160(sp)
   50e84:	80bfffc4 	addi	r2,r16,-1
   50e88:	1021883a 	mov	r16,r2
   50e8c:	1887c83a 	sub	r3,r3,r2
   50e90:	d8c02b15 	stw	r3,172(sp)
   50e94:	d8802b17 	ldw	r2,172(sp)
   50e98:	d9002a17 	ldw	r4,168(sp)
   50e9c:	1100010e 	bge	r2,r4,50ea4 <___svfprintf_internal_r+0x6f0>
   50ea0:	2005883a 	mov	r2,r4
   50ea4:	d8802915 	stw	r2,164(sp)
   50ea8:	d8003215 	stw	zero,200(sp)
   50eac:	e7003fcc 	andi	fp,fp,255
   50eb0:	e700201c 	xori	fp,fp,128
   50eb4:	e73fe004 	addi	fp,fp,-128
   50eb8:	e0000326 	beq	fp,zero,50ec8 <___svfprintf_internal_r+0x714>
   50ebc:	d8c02917 	ldw	r3,164(sp)
   50ec0:	18c00044 	addi	r3,r3,1
   50ec4:	d8c02915 	stw	r3,164(sp)
   50ec8:	90c0008c 	andi	r3,r18,2
   50ecc:	d8c02c15 	stw	r3,176(sp)
   50ed0:	18000326 	beq	r3,zero,50ee0 <___svfprintf_internal_r+0x72c>
   50ed4:	d8c02917 	ldw	r3,164(sp)
   50ed8:	18c00084 	addi	r3,r3,2
   50edc:	d8c02915 	stw	r3,164(sp)
   50ee0:	90c0210c 	andi	r3,r18,132
   50ee4:	d8c03015 	stw	r3,192(sp)
   50ee8:	1801c31e 	bne	r3,zero,515f8 <___svfprintf_internal_r+0xe44>
   50eec:	d9003117 	ldw	r4,196(sp)
   50ef0:	d8c02917 	ldw	r3,164(sp)
   50ef4:	20e9c83a 	sub	r20,r4,r3
   50ef8:	0501bf0e 	bge	zero,r20,515f8 <___svfprintf_internal_r+0xe44>
   50efc:	02400404 	movi	r9,16
   50f00:	d8c02017 	ldw	r3,128(sp)
   50f04:	d8801f17 	ldw	r2,124(sp)
   50f08:	4d053d0e 	bge	r9,r20,52400 <___svfprintf_internal_r+0x1c4c>
   50f0c:	014001f4 	movhi	r5,7
   50f10:	296e8484 	addi	r5,r5,-17902
   50f14:	dc403c15 	stw	r17,240(sp)
   50f18:	d9403515 	stw	r5,212(sp)
   50f1c:	a023883a 	mov	r17,r20
   50f20:	482d883a 	mov	r22,r9
   50f24:	9029883a 	mov	r20,r18
   50f28:	070001c4 	movi	fp,7
   50f2c:	8025883a 	mov	r18,r16
   50f30:	dc002d17 	ldw	r16,180(sp)
   50f34:	00000306 	br	50f44 <___svfprintf_internal_r+0x790>
   50f38:	8c7ffc04 	addi	r17,r17,-16
   50f3c:	42000204 	addi	r8,r8,8
   50f40:	b440130e 	bge	r22,r17,50f90 <___svfprintf_internal_r+0x7dc>
   50f44:	010001f4 	movhi	r4,7
   50f48:	18c00404 	addi	r3,r3,16
   50f4c:	10800044 	addi	r2,r2,1
   50f50:	212e8484 	addi	r4,r4,-17902
   50f54:	41000015 	stw	r4,0(r8)
   50f58:	45800115 	stw	r22,4(r8)
   50f5c:	d8c02015 	stw	r3,128(sp)
   50f60:	d8801f15 	stw	r2,124(sp)
   50f64:	e0bff40e 	bge	fp,r2,50f38 <__alt_data_end+0xfffd0f38>
   50f68:	d9801e04 	addi	r6,sp,120
   50f6c:	800b883a 	mov	r5,r16
   50f70:	9809883a 	mov	r4,r19
   50f74:	00597180 	call	59718 <__ssprint_r>
   50f78:	103ef51e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   50f7c:	8c7ffc04 	addi	r17,r17,-16
   50f80:	d8c02017 	ldw	r3,128(sp)
   50f84:	d8801f17 	ldw	r2,124(sp)
   50f88:	da000404 	addi	r8,sp,16
   50f8c:	b47fed16 	blt	r22,r17,50f44 <__alt_data_end+0xfffd0f44>
   50f90:	9021883a 	mov	r16,r18
   50f94:	a025883a 	mov	r18,r20
   50f98:	8829883a 	mov	r20,r17
   50f9c:	dc403c17 	ldw	r17,240(sp)
   50fa0:	d9403517 	ldw	r5,212(sp)
   50fa4:	a0c7883a 	add	r3,r20,r3
   50fa8:	10800044 	addi	r2,r2,1
   50fac:	41400015 	stw	r5,0(r8)
   50fb0:	45000115 	stw	r20,4(r8)
   50fb4:	d8c02015 	stw	r3,128(sp)
   50fb8:	d8801f15 	stw	r2,124(sp)
   50fbc:	010001c4 	movi	r4,7
   50fc0:	2082c116 	blt	r4,r2,51ac8 <___svfprintf_internal_r+0x1314>
   50fc4:	df002787 	ldb	fp,158(sp)
   50fc8:	42000204 	addi	r8,r8,8
   50fcc:	e0000c26 	beq	fp,zero,51000 <___svfprintf_internal_r+0x84c>
   50fd0:	d8801f17 	ldw	r2,124(sp)
   50fd4:	d9002784 	addi	r4,sp,158
   50fd8:	18c00044 	addi	r3,r3,1
   50fdc:	10800044 	addi	r2,r2,1
   50fe0:	41000015 	stw	r4,0(r8)
   50fe4:	01000044 	movi	r4,1
   50fe8:	41000115 	stw	r4,4(r8)
   50fec:	d8c02015 	stw	r3,128(sp)
   50ff0:	d8801f15 	stw	r2,124(sp)
   50ff4:	010001c4 	movi	r4,7
   50ff8:	20825a16 	blt	r4,r2,51964 <___svfprintf_internal_r+0x11b0>
   50ffc:	42000204 	addi	r8,r8,8
   51000:	d8802c17 	ldw	r2,176(sp)
   51004:	10000c26 	beq	r2,zero,51038 <___svfprintf_internal_r+0x884>
   51008:	d8801f17 	ldw	r2,124(sp)
   5100c:	d9002704 	addi	r4,sp,156
   51010:	18c00084 	addi	r3,r3,2
   51014:	10800044 	addi	r2,r2,1
   51018:	41000015 	stw	r4,0(r8)
   5101c:	01000084 	movi	r4,2
   51020:	41000115 	stw	r4,4(r8)
   51024:	d8c02015 	stw	r3,128(sp)
   51028:	d8801f15 	stw	r2,124(sp)
   5102c:	010001c4 	movi	r4,7
   51030:	20825416 	blt	r4,r2,51984 <___svfprintf_internal_r+0x11d0>
   51034:	42000204 	addi	r8,r8,8
   51038:	d9003017 	ldw	r4,192(sp)
   5103c:	00802004 	movi	r2,128
   51040:	2081b926 	beq	r4,r2,51728 <___svfprintf_internal_r+0xf74>
   51044:	d9402a17 	ldw	r5,168(sp)
   51048:	d8802b17 	ldw	r2,172(sp)
   5104c:	28adc83a 	sub	r22,r5,r2
   51050:	05802f0e 	bge	zero,r22,51110 <___svfprintf_internal_r+0x95c>
   51054:	07000404 	movi	fp,16
   51058:	d8801f17 	ldw	r2,124(sp)
   5105c:	e583e20e 	bge	fp,r22,51fe8 <___svfprintf_internal_r+0x1834>
   51060:	014001f4 	movhi	r5,7
   51064:	296e8084 	addi	r5,r5,-17918
   51068:	dc402a15 	stw	r17,168(sp)
   5106c:	d9402c15 	stw	r5,176(sp)
   51070:	b023883a 	mov	r17,r22
   51074:	050001c4 	movi	r20,7
   51078:	902d883a 	mov	r22,r18
   5107c:	8025883a 	mov	r18,r16
   51080:	dc002d17 	ldw	r16,180(sp)
   51084:	00000306 	br	51094 <___svfprintf_internal_r+0x8e0>
   51088:	8c7ffc04 	addi	r17,r17,-16
   5108c:	42000204 	addi	r8,r8,8
   51090:	e440110e 	bge	fp,r17,510d8 <___svfprintf_internal_r+0x924>
   51094:	18c00404 	addi	r3,r3,16
   51098:	10800044 	addi	r2,r2,1
   5109c:	45400015 	stw	r21,0(r8)
   510a0:	47000115 	stw	fp,4(r8)
   510a4:	d8c02015 	stw	r3,128(sp)
   510a8:	d8801f15 	stw	r2,124(sp)
   510ac:	a0bff60e 	bge	r20,r2,51088 <__alt_data_end+0xfffd1088>
   510b0:	d9801e04 	addi	r6,sp,120
   510b4:	800b883a 	mov	r5,r16
   510b8:	9809883a 	mov	r4,r19
   510bc:	00597180 	call	59718 <__ssprint_r>
   510c0:	103ea31e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   510c4:	8c7ffc04 	addi	r17,r17,-16
   510c8:	d8c02017 	ldw	r3,128(sp)
   510cc:	d8801f17 	ldw	r2,124(sp)
   510d0:	da000404 	addi	r8,sp,16
   510d4:	e47fef16 	blt	fp,r17,51094 <__alt_data_end+0xfffd1094>
   510d8:	9021883a 	mov	r16,r18
   510dc:	b025883a 	mov	r18,r22
   510e0:	882d883a 	mov	r22,r17
   510e4:	dc402a17 	ldw	r17,168(sp)
   510e8:	d9002c17 	ldw	r4,176(sp)
   510ec:	1d87883a 	add	r3,r3,r22
   510f0:	10800044 	addi	r2,r2,1
   510f4:	41000015 	stw	r4,0(r8)
   510f8:	45800115 	stw	r22,4(r8)
   510fc:	d8c02015 	stw	r3,128(sp)
   51100:	d8801f15 	stw	r2,124(sp)
   51104:	010001c4 	movi	r4,7
   51108:	20820e16 	blt	r4,r2,51944 <___svfprintf_internal_r+0x1190>
   5110c:	42000204 	addi	r8,r8,8
   51110:	9080400c 	andi	r2,r18,256
   51114:	10013a1e 	bne	r2,zero,51600 <___svfprintf_internal_r+0xe4c>
   51118:	d9402b17 	ldw	r5,172(sp)
   5111c:	d8801f17 	ldw	r2,124(sp)
   51120:	44000015 	stw	r16,0(r8)
   51124:	1947883a 	add	r3,r3,r5
   51128:	10800044 	addi	r2,r2,1
   5112c:	41400115 	stw	r5,4(r8)
   51130:	d8c02015 	stw	r3,128(sp)
   51134:	d8801f15 	stw	r2,124(sp)
   51138:	010001c4 	movi	r4,7
   5113c:	2081f316 	blt	r4,r2,5190c <___svfprintf_internal_r+0x1158>
   51140:	42000204 	addi	r8,r8,8
   51144:	9480010c 	andi	r18,r18,4
   51148:	90003226 	beq	r18,zero,51214 <___svfprintf_internal_r+0xa60>
   5114c:	d9403117 	ldw	r5,196(sp)
   51150:	d8802917 	ldw	r2,164(sp)
   51154:	28a1c83a 	sub	r16,r5,r2
   51158:	04002e0e 	bge	zero,r16,51214 <___svfprintf_internal_r+0xa60>
   5115c:	04400404 	movi	r17,16
   51160:	d8801f17 	ldw	r2,124(sp)
   51164:	8c04db0e 	bge	r17,r16,524d4 <___svfprintf_internal_r+0x1d20>
   51168:	014001f4 	movhi	r5,7
   5116c:	296e8484 	addi	r5,r5,-17902
   51170:	d9403515 	stw	r5,212(sp)
   51174:	048001c4 	movi	r18,7
   51178:	dd002d17 	ldw	r20,180(sp)
   5117c:	00000306 	br	5118c <___svfprintf_internal_r+0x9d8>
   51180:	843ffc04 	addi	r16,r16,-16
   51184:	42000204 	addi	r8,r8,8
   51188:	8c00130e 	bge	r17,r16,511d8 <___svfprintf_internal_r+0xa24>
   5118c:	010001f4 	movhi	r4,7
   51190:	18c00404 	addi	r3,r3,16
   51194:	10800044 	addi	r2,r2,1
   51198:	212e8484 	addi	r4,r4,-17902
   5119c:	41000015 	stw	r4,0(r8)
   511a0:	44400115 	stw	r17,4(r8)
   511a4:	d8c02015 	stw	r3,128(sp)
   511a8:	d8801f15 	stw	r2,124(sp)
   511ac:	90bff40e 	bge	r18,r2,51180 <__alt_data_end+0xfffd1180>
   511b0:	d9801e04 	addi	r6,sp,120
   511b4:	a00b883a 	mov	r5,r20
   511b8:	9809883a 	mov	r4,r19
   511bc:	00597180 	call	59718 <__ssprint_r>
   511c0:	103e631e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   511c4:	843ffc04 	addi	r16,r16,-16
   511c8:	d8c02017 	ldw	r3,128(sp)
   511cc:	d8801f17 	ldw	r2,124(sp)
   511d0:	da000404 	addi	r8,sp,16
   511d4:	8c3fed16 	blt	r17,r16,5118c <__alt_data_end+0xfffd118c>
   511d8:	d9403517 	ldw	r5,212(sp)
   511dc:	1c07883a 	add	r3,r3,r16
   511e0:	10800044 	addi	r2,r2,1
   511e4:	41400015 	stw	r5,0(r8)
   511e8:	44000115 	stw	r16,4(r8)
   511ec:	d8c02015 	stw	r3,128(sp)
   511f0:	d8801f15 	stw	r2,124(sp)
   511f4:	010001c4 	movi	r4,7
   511f8:	2080060e 	bge	r4,r2,51214 <___svfprintf_internal_r+0xa60>
   511fc:	d9402d17 	ldw	r5,180(sp)
   51200:	d9801e04 	addi	r6,sp,120
   51204:	9809883a 	mov	r4,r19
   51208:	00597180 	call	59718 <__ssprint_r>
   5120c:	103e501e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51210:	d8c02017 	ldw	r3,128(sp)
   51214:	d8803117 	ldw	r2,196(sp)
   51218:	d9002917 	ldw	r4,164(sp)
   5121c:	1100010e 	bge	r2,r4,51224 <___svfprintf_internal_r+0xa70>
   51220:	2005883a 	mov	r2,r4
   51224:	d9402f17 	ldw	r5,188(sp)
   51228:	288b883a 	add	r5,r5,r2
   5122c:	d9402f15 	stw	r5,188(sp)
   51230:	1801be1e 	bne	r3,zero,5192c <___svfprintf_internal_r+0x1178>
   51234:	b8800007 	ldb	r2,0(r23)
   51238:	d8001f15 	stw	zero,124(sp)
   5123c:	da000404 	addi	r8,sp,16
   51240:	103d891e 	bne	r2,zero,50868 <__alt_data_end+0xfffd0868>
   51244:	b823883a 	mov	r17,r23
   51248:	003d9f06 	br	508c8 <__alt_data_end+0xfffd08c8>
   5124c:	8025883a 	mov	r18,r16
   51250:	dc002903 	ldbu	r16,164(sp)
   51254:	e011883a 	mov	r8,fp
   51258:	84003fcc 	andi	r16,r16,255
   5125c:	8005e61e 	bne	r16,zero,529f8 <___svfprintf_internal_r+0x2244>
   51260:	94800414 	ori	r18,r18,16
   51264:	9080080c 	andi	r2,r18,32
   51268:	10022026 	beq	r2,zero,51aec <___svfprintf_internal_r+0x1338>
   5126c:	d9002e17 	ldw	r4,184(sp)
   51270:	d9402a17 	ldw	r5,168(sp)
   51274:	d8002785 	stb	zero,158(sp)
   51278:	20c00204 	addi	r3,r4,8
   5127c:	25000017 	ldw	r20,0(r4)
   51280:	25800117 	ldw	r22,4(r4)
   51284:	2803ad16 	blt	r5,zero,5213c <___svfprintf_internal_r+0x1988>
   51288:	013fdfc4 	movi	r4,-129
   5128c:	a584b03a 	or	r2,r20,r22
   51290:	d8c02e15 	stw	r3,184(sp)
   51294:	9124703a 	and	r18,r18,r4
   51298:	0039883a 	mov	fp,zero
   5129c:	103eb01e 	bne	r2,zero,50d60 <__alt_data_end+0xfffd0d60>
   512a0:	d8802a17 	ldw	r2,168(sp)
   512a4:	1002e71e 	bne	r2,zero,51e44 <___svfprintf_internal_r+0x1690>
   512a8:	d8002a15 	stw	zero,168(sp)
   512ac:	d8002b15 	stw	zero,172(sp)
   512b0:	dc001e04 	addi	r16,sp,120
   512b4:	003ef706 	br	50e94 <__alt_data_end+0xfffd0e94>
   512b8:	8025883a 	mov	r18,r16
   512bc:	dc002903 	ldbu	r16,164(sp)
   512c0:	e011883a 	mov	r8,fp
   512c4:	84003fcc 	andi	r16,r16,255
   512c8:	8005c81e 	bne	r16,zero,529ec <___svfprintf_internal_r+0x2238>
   512cc:	010001f4 	movhi	r4,7
   512d0:	212e7404 	addi	r4,r4,-17968
   512d4:	d9003a15 	stw	r4,232(sp)
   512d8:	9080080c 	andi	r2,r18,32
   512dc:	10007226 	beq	r2,zero,514a8 <___svfprintf_internal_r+0xcf4>
   512e0:	d9402e17 	ldw	r5,184(sp)
   512e4:	2d000017 	ldw	r20,0(r5)
   512e8:	2d800117 	ldw	r22,4(r5)
   512ec:	29400204 	addi	r5,r5,8
   512f0:	d9402e15 	stw	r5,184(sp)
   512f4:	9080004c 	andi	r2,r18,1
   512f8:	1001aa26 	beq	r2,zero,519a4 <___svfprintf_internal_r+0x11f0>
   512fc:	a584b03a 	or	r2,r20,r22
   51300:	10032526 	beq	r2,zero,51f98 <___svfprintf_internal_r+0x17e4>
   51304:	d8c02a17 	ldw	r3,168(sp)
   51308:	00800c04 	movi	r2,48
   5130c:	d8802705 	stb	r2,156(sp)
   51310:	dc402745 	stb	r17,157(sp)
   51314:	d8002785 	stb	zero,158(sp)
   51318:	90800094 	ori	r2,r18,2
   5131c:	1804a316 	blt	r3,zero,525ac <___svfprintf_internal_r+0x1df8>
   51320:	00bfdfc4 	movi	r2,-129
   51324:	90a4703a 	and	r18,r18,r2
   51328:	94800094 	ori	r18,r18,2
   5132c:	0039883a 	mov	fp,zero
   51330:	d9003a17 	ldw	r4,232(sp)
   51334:	dc001e04 	addi	r16,sp,120
   51338:	a08003cc 	andi	r2,r20,15
   5133c:	b006973a 	slli	r3,r22,28
   51340:	2085883a 	add	r2,r4,r2
   51344:	a028d13a 	srli	r20,r20,4
   51348:	10800003 	ldbu	r2,0(r2)
   5134c:	b02cd13a 	srli	r22,r22,4
   51350:	843fffc4 	addi	r16,r16,-1
   51354:	1d28b03a 	or	r20,r3,r20
   51358:	80800005 	stb	r2,0(r16)
   5135c:	a584b03a 	or	r2,r20,r22
   51360:	103ff51e 	bne	r2,zero,51338 <__alt_data_end+0xfffd1338>
   51364:	d8c02817 	ldw	r3,160(sp)
   51368:	1c07c83a 	sub	r3,r3,r16
   5136c:	d8c02b15 	stw	r3,172(sp)
   51370:	003ec806 	br	50e94 <__alt_data_end+0xfffd0e94>
   51374:	d8c02e17 	ldw	r3,184(sp)
   51378:	d9002e17 	ldw	r4,184(sp)
   5137c:	8025883a 	mov	r18,r16
   51380:	18800017 	ldw	r2,0(r3)
   51384:	21000104 	addi	r4,r4,4
   51388:	00c00044 	movi	r3,1
   5138c:	e011883a 	mov	r8,fp
   51390:	d8c02915 	stw	r3,164(sp)
   51394:	d8002785 	stb	zero,158(sp)
   51398:	d8801405 	stb	r2,80(sp)
   5139c:	d9002e15 	stw	r4,184(sp)
   513a0:	d8c02b15 	stw	r3,172(sp)
   513a4:	d8002a15 	stw	zero,168(sp)
   513a8:	d8003215 	stw	zero,200(sp)
   513ac:	dc001404 	addi	r16,sp,80
   513b0:	0039883a 	mov	fp,zero
   513b4:	003ec406 	br	50ec8 <__alt_data_end+0xfffd0ec8>
   513b8:	8025883a 	mov	r18,r16
   513bc:	dc002903 	ldbu	r16,164(sp)
   513c0:	e011883a 	mov	r8,fp
   513c4:	84003fcc 	andi	r16,r16,255
   513c8:	803e8726 	beq	r16,zero,50de8 <__alt_data_end+0xfffd0de8>
   513cc:	d8c02b03 	ldbu	r3,172(sp)
   513d0:	d8c02785 	stb	r3,158(sp)
   513d4:	003e8406 	br	50de8 <__alt_data_end+0xfffd0de8>
   513d8:	00c00044 	movi	r3,1
   513dc:	d8c02905 	stb	r3,164(sp)
   513e0:	00c00ac4 	movi	r3,43
   513e4:	d8c02b05 	stb	r3,172(sp)
   513e8:	bc400007 	ldb	r17,0(r23)
   513ec:	003d4606 	br	50908 <__alt_data_end+0xfffd0908>
   513f0:	84000814 	ori	r16,r16,32
   513f4:	bc400007 	ldb	r17,0(r23)
   513f8:	003d4306 	br	50908 <__alt_data_end+0xfffd0908>
   513fc:	d8802e17 	ldw	r2,184(sp)
   51400:	8025883a 	mov	r18,r16
   51404:	d8002785 	stb	zero,158(sp)
   51408:	14000017 	ldw	r16,0(r2)
   5140c:	e011883a 	mov	r8,fp
   51410:	15000104 	addi	r20,r2,4
   51414:	80042126 	beq	r16,zero,5249c <___svfprintf_internal_r+0x1ce8>
   51418:	d8c02a17 	ldw	r3,168(sp)
   5141c:	1803ee16 	blt	r3,zero,523d8 <___svfprintf_internal_r+0x1c24>
   51420:	180d883a 	mov	r6,r3
   51424:	000b883a 	mov	r5,zero
   51428:	8009883a 	mov	r4,r16
   5142c:	df003e15 	stw	fp,248(sp)
   51430:	0057ba40 	call	57ba4 <memchr>
   51434:	da003e17 	ldw	r8,248(sp)
   51438:	10046a26 	beq	r2,zero,525e4 <___svfprintf_internal_r+0x1e30>
   5143c:	1405c83a 	sub	r2,r2,r16
   51440:	d8802b15 	stw	r2,172(sp)
   51444:	1003ea16 	blt	r2,zero,523f0 <___svfprintf_internal_r+0x1c3c>
   51448:	df002783 	ldbu	fp,158(sp)
   5144c:	d8802915 	stw	r2,164(sp)
   51450:	dd002e15 	stw	r20,184(sp)
   51454:	d8002a15 	stw	zero,168(sp)
   51458:	d8003215 	stw	zero,200(sp)
   5145c:	003e9306 	br	50eac <__alt_data_end+0xfffd0eac>
   51460:	8025883a 	mov	r18,r16
   51464:	dc002903 	ldbu	r16,164(sp)
   51468:	e011883a 	mov	r8,fp
   5146c:	84003fcc 	andi	r16,r16,255
   51470:	803f7c26 	beq	r16,zero,51264 <__alt_data_end+0xfffd1264>
   51474:	d8c02b03 	ldbu	r3,172(sp)
   51478:	d8c02785 	stb	r3,158(sp)
   5147c:	003f7906 	br	51264 <__alt_data_end+0xfffd1264>
   51480:	8025883a 	mov	r18,r16
   51484:	dc002903 	ldbu	r16,164(sp)
   51488:	e011883a 	mov	r8,fp
   5148c:	84003fcc 	andi	r16,r16,255
   51490:	8005741e 	bne	r16,zero,52a64 <___svfprintf_internal_r+0x22b0>
   51494:	010001f4 	movhi	r4,7
   51498:	212e7904 	addi	r4,r4,-17948
   5149c:	d9003a15 	stw	r4,232(sp)
   514a0:	9080080c 	andi	r2,r18,32
   514a4:	103f8e1e 	bne	r2,zero,512e0 <__alt_data_end+0xfffd12e0>
   514a8:	9080040c 	andi	r2,r18,16
   514ac:	1002a726 	beq	r2,zero,51f4c <___svfprintf_internal_r+0x1798>
   514b0:	d8802e17 	ldw	r2,184(sp)
   514b4:	002d883a 	mov	r22,zero
   514b8:	15000017 	ldw	r20,0(r2)
   514bc:	10800104 	addi	r2,r2,4
   514c0:	d8802e15 	stw	r2,184(sp)
   514c4:	003f8b06 	br	512f4 <__alt_data_end+0xfffd12f4>
   514c8:	84000054 	ori	r16,r16,1
   514cc:	bc400007 	ldb	r17,0(r23)
   514d0:	003d0d06 	br	50908 <__alt_data_end+0xfffd0908>
   514d4:	d8802b07 	ldb	r2,172(sp)
   514d8:	1002a41e 	bne	r2,zero,51f6c <___svfprintf_internal_r+0x17b8>
   514dc:	00c00044 	movi	r3,1
   514e0:	d8c02905 	stb	r3,164(sp)
   514e4:	00c00804 	movi	r3,32
   514e8:	d8c02b05 	stb	r3,172(sp)
   514ec:	bc400007 	ldb	r17,0(r23)
   514f0:	003d0506 	br	50908 <__alt_data_end+0xfffd0908>
   514f4:	8025883a 	mov	r18,r16
   514f8:	dc002903 	ldbu	r16,164(sp)
   514fc:	e011883a 	mov	r8,fp
   51500:	84003fcc 	andi	r16,r16,255
   51504:	803e0626 	beq	r16,zero,50d20 <__alt_data_end+0xfffd0d20>
   51508:	d8c02b03 	ldbu	r3,172(sp)
   5150c:	d8c02785 	stb	r3,158(sp)
   51510:	003e0306 	br	50d20 <__alt_data_end+0xfffd0d20>
   51514:	bc400007 	ldb	r17,0(r23)
   51518:	00801b04 	movi	r2,108
   5151c:	88830a26 	beq	r17,r2,52148 <___svfprintf_internal_r+0x1994>
   51520:	84000414 	ori	r16,r16,16
   51524:	003cf806 	br	50908 <__alt_data_end+0xfffd0908>
   51528:	8025883a 	mov	r18,r16
   5152c:	dc002903 	ldbu	r16,164(sp)
   51530:	e011883a 	mov	r8,fp
   51534:	84003fcc 	andi	r16,r16,255
   51538:	8005471e 	bne	r16,zero,52a58 <___svfprintf_internal_r+0x22a4>
   5153c:	9080080c 	andi	r2,r18,32
   51540:	10028c26 	beq	r2,zero,51f74 <___svfprintf_internal_r+0x17c0>
   51544:	d9002e17 	ldw	r4,184(sp)
   51548:	d9402f17 	ldw	r5,188(sp)
   5154c:	20800017 	ldw	r2,0(r4)
   51550:	2807d7fa 	srai	r3,r5,31
   51554:	21000104 	addi	r4,r4,4
   51558:	d9002e15 	stw	r4,184(sp)
   5155c:	11400015 	stw	r5,0(r2)
   51560:	10c00115 	stw	r3,4(r2)
   51564:	003cbe06 	br	50860 <__alt_data_end+0xfffd0860>
   51568:	84001014 	ori	r16,r16,64
   5156c:	bc400007 	ldb	r17,0(r23)
   51570:	003ce506 	br	50908 <__alt_data_end+0xfffd0908>
   51574:	010001f4 	movhi	r4,7
   51578:	212e7904 	addi	r4,r4,-17948
   5157c:	0039883a 	mov	fp,zero
   51580:	d9003a15 	stw	r4,232(sp)
   51584:	04401e04 	movi	r17,120
   51588:	003f6906 	br	51330 <__alt_data_end+0xfffd1330>
   5158c:	8025883a 	mov	r18,r16
   51590:	dc002903 	ldbu	r16,164(sp)
   51594:	e011883a 	mov	r8,fp
   51598:	84003fcc 	andi	r16,r16,255
   5159c:	8005261e 	bne	r16,zero,52a38 <___svfprintf_internal_r+0x2284>
   515a0:	883d6526 	beq	r17,zero,50b38 <__alt_data_end+0xfffd0b38>
   515a4:	00c00044 	movi	r3,1
   515a8:	d8c02915 	stw	r3,164(sp)
   515ac:	dc401405 	stb	r17,80(sp)
   515b0:	d8002785 	stb	zero,158(sp)
   515b4:	003f7a06 	br	513a0 <__alt_data_end+0xfffd13a0>
   515b8:	010001f4 	movhi	r4,7
   515bc:	212e7904 	addi	r4,r4,-17948
   515c0:	d9003a15 	stw	r4,232(sp)
   515c4:	d8c02e15 	stw	r3,184(sp)
   515c8:	1025883a 	mov	r18,r2
   515cc:	04401e04 	movi	r17,120
   515d0:	a584b03a 	or	r2,r20,r22
   515d4:	1000fa1e 	bne	r2,zero,519c0 <___svfprintf_internal_r+0x120c>
   515d8:	0039883a 	mov	fp,zero
   515dc:	00800084 	movi	r2,2
   515e0:	10803fcc 	andi	r2,r2,255
   515e4:	00c00044 	movi	r3,1
   515e8:	10c21626 	beq	r2,r3,51e44 <___svfprintf_internal_r+0x1690>
   515ec:	00c00084 	movi	r3,2
   515f0:	10fe0e1e 	bne	r2,r3,50e2c <__alt_data_end+0xfffd0e2c>
   515f4:	003d4606 	br	50b10 <__alt_data_end+0xfffd0b10>
   515f8:	d8c02017 	ldw	r3,128(sp)
   515fc:	003e7306 	br	50fcc <__alt_data_end+0xfffd0fcc>
   51600:	00801944 	movi	r2,101
   51604:	14407c0e 	bge	r2,r17,517f8 <___svfprintf_internal_r+0x1044>
   51608:	d9003617 	ldw	r4,216(sp)
   5160c:	d9403717 	ldw	r5,220(sp)
   51610:	000d883a 	mov	r6,zero
   51614:	000f883a 	mov	r7,zero
   51618:	d8c03d15 	stw	r3,244(sp)
   5161c:	da003e15 	stw	r8,248(sp)
   51620:	005eb080 	call	5eb08 <__eqdf2>
   51624:	d8c03d17 	ldw	r3,244(sp)
   51628:	da003e17 	ldw	r8,248(sp)
   5162c:	1000f51e 	bne	r2,zero,51a04 <___svfprintf_internal_r+0x1250>
   51630:	d8801f17 	ldw	r2,124(sp)
   51634:	010001f4 	movhi	r4,7
   51638:	212e8004 	addi	r4,r4,-17920
   5163c:	18c00044 	addi	r3,r3,1
   51640:	10800044 	addi	r2,r2,1
   51644:	41000015 	stw	r4,0(r8)
   51648:	01000044 	movi	r4,1
   5164c:	41000115 	stw	r4,4(r8)
   51650:	d8c02015 	stw	r3,128(sp)
   51654:	d8801f15 	stw	r2,124(sp)
   51658:	010001c4 	movi	r4,7
   5165c:	20826616 	blt	r4,r2,51ff8 <___svfprintf_internal_r+0x1844>
   51660:	42000204 	addi	r8,r8,8
   51664:	d8802617 	ldw	r2,152(sp)
   51668:	d9403317 	ldw	r5,204(sp)
   5166c:	11400216 	blt	r2,r5,51678 <___svfprintf_internal_r+0xec4>
   51670:	9080004c 	andi	r2,r18,1
   51674:	103eb326 	beq	r2,zero,51144 <__alt_data_end+0xfffd1144>
   51678:	d8803817 	ldw	r2,224(sp)
   5167c:	d9003417 	ldw	r4,208(sp)
   51680:	d9403817 	ldw	r5,224(sp)
   51684:	1887883a 	add	r3,r3,r2
   51688:	d8801f17 	ldw	r2,124(sp)
   5168c:	41000015 	stw	r4,0(r8)
   51690:	41400115 	stw	r5,4(r8)
   51694:	10800044 	addi	r2,r2,1
   51698:	d8c02015 	stw	r3,128(sp)
   5169c:	d8801f15 	stw	r2,124(sp)
   516a0:	010001c4 	movi	r4,7
   516a4:	2082af16 	blt	r4,r2,52164 <___svfprintf_internal_r+0x19b0>
   516a8:	42000204 	addi	r8,r8,8
   516ac:	d8803317 	ldw	r2,204(sp)
   516b0:	143fffc4 	addi	r16,r2,-1
   516b4:	043ea30e 	bge	zero,r16,51144 <__alt_data_end+0xfffd1144>
   516b8:	04400404 	movi	r17,16
   516bc:	d8801f17 	ldw	r2,124(sp)
   516c0:	8c00860e 	bge	r17,r16,518dc <___svfprintf_internal_r+0x1128>
   516c4:	014001f4 	movhi	r5,7
   516c8:	296e8084 	addi	r5,r5,-17918
   516cc:	d9402c15 	stw	r5,176(sp)
   516d0:	058001c4 	movi	r22,7
   516d4:	dd002d17 	ldw	r20,180(sp)
   516d8:	00000306 	br	516e8 <___svfprintf_internal_r+0xf34>
   516dc:	42000204 	addi	r8,r8,8
   516e0:	843ffc04 	addi	r16,r16,-16
   516e4:	8c00800e 	bge	r17,r16,518e8 <___svfprintf_internal_r+0x1134>
   516e8:	18c00404 	addi	r3,r3,16
   516ec:	10800044 	addi	r2,r2,1
   516f0:	45400015 	stw	r21,0(r8)
   516f4:	44400115 	stw	r17,4(r8)
   516f8:	d8c02015 	stw	r3,128(sp)
   516fc:	d8801f15 	stw	r2,124(sp)
   51700:	b0bff60e 	bge	r22,r2,516dc <__alt_data_end+0xfffd16dc>
   51704:	d9801e04 	addi	r6,sp,120
   51708:	a00b883a 	mov	r5,r20
   5170c:	9809883a 	mov	r4,r19
   51710:	00597180 	call	59718 <__ssprint_r>
   51714:	103d0e1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51718:	d8c02017 	ldw	r3,128(sp)
   5171c:	d8801f17 	ldw	r2,124(sp)
   51720:	da000404 	addi	r8,sp,16
   51724:	003fee06 	br	516e0 <__alt_data_end+0xfffd16e0>
   51728:	d9403117 	ldw	r5,196(sp)
   5172c:	d8802917 	ldw	r2,164(sp)
   51730:	28adc83a 	sub	r22,r5,r2
   51734:	05be430e 	bge	zero,r22,51044 <__alt_data_end+0xfffd1044>
   51738:	07000404 	movi	fp,16
   5173c:	d8801f17 	ldw	r2,124(sp)
   51740:	e583a20e 	bge	fp,r22,525cc <___svfprintf_internal_r+0x1e18>
   51744:	014001f4 	movhi	r5,7
   51748:	296e8084 	addi	r5,r5,-17918
   5174c:	dc403015 	stw	r17,192(sp)
   51750:	d9402c15 	stw	r5,176(sp)
   51754:	b023883a 	mov	r17,r22
   51758:	050001c4 	movi	r20,7
   5175c:	902d883a 	mov	r22,r18
   51760:	8025883a 	mov	r18,r16
   51764:	dc002d17 	ldw	r16,180(sp)
   51768:	00000306 	br	51778 <___svfprintf_internal_r+0xfc4>
   5176c:	8c7ffc04 	addi	r17,r17,-16
   51770:	42000204 	addi	r8,r8,8
   51774:	e440110e 	bge	fp,r17,517bc <___svfprintf_internal_r+0x1008>
   51778:	18c00404 	addi	r3,r3,16
   5177c:	10800044 	addi	r2,r2,1
   51780:	45400015 	stw	r21,0(r8)
   51784:	47000115 	stw	fp,4(r8)
   51788:	d8c02015 	stw	r3,128(sp)
   5178c:	d8801f15 	stw	r2,124(sp)
   51790:	a0bff60e 	bge	r20,r2,5176c <__alt_data_end+0xfffd176c>
   51794:	d9801e04 	addi	r6,sp,120
   51798:	800b883a 	mov	r5,r16
   5179c:	9809883a 	mov	r4,r19
   517a0:	00597180 	call	59718 <__ssprint_r>
   517a4:	103cea1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   517a8:	8c7ffc04 	addi	r17,r17,-16
   517ac:	d8c02017 	ldw	r3,128(sp)
   517b0:	d8801f17 	ldw	r2,124(sp)
   517b4:	da000404 	addi	r8,sp,16
   517b8:	e47fef16 	blt	fp,r17,51778 <__alt_data_end+0xfffd1778>
   517bc:	9021883a 	mov	r16,r18
   517c0:	b025883a 	mov	r18,r22
   517c4:	882d883a 	mov	r22,r17
   517c8:	dc403017 	ldw	r17,192(sp)
   517cc:	d9002c17 	ldw	r4,176(sp)
   517d0:	1d87883a 	add	r3,r3,r22
   517d4:	10800044 	addi	r2,r2,1
   517d8:	41000015 	stw	r4,0(r8)
   517dc:	45800115 	stw	r22,4(r8)
   517e0:	d8c02015 	stw	r3,128(sp)
   517e4:	d8801f15 	stw	r2,124(sp)
   517e8:	010001c4 	movi	r4,7
   517ec:	20819a16 	blt	r4,r2,51e58 <___svfprintf_internal_r+0x16a4>
   517f0:	42000204 	addi	r8,r8,8
   517f4:	003e1306 	br	51044 <__alt_data_end+0xfffd1044>
   517f8:	d9403317 	ldw	r5,204(sp)
   517fc:	00800044 	movi	r2,1
   51800:	18c00044 	addi	r3,r3,1
   51804:	1141710e 	bge	r2,r5,51dcc <___svfprintf_internal_r+0x1618>
   51808:	dc401f17 	ldw	r17,124(sp)
   5180c:	00800044 	movi	r2,1
   51810:	40800115 	stw	r2,4(r8)
   51814:	8c400044 	addi	r17,r17,1
   51818:	44000015 	stw	r16,0(r8)
   5181c:	d8c02015 	stw	r3,128(sp)
   51820:	dc401f15 	stw	r17,124(sp)
   51824:	008001c4 	movi	r2,7
   51828:	14417416 	blt	r2,r17,51dfc <___svfprintf_internal_r+0x1648>
   5182c:	42000204 	addi	r8,r8,8
   51830:	d8803817 	ldw	r2,224(sp)
   51834:	d9003417 	ldw	r4,208(sp)
   51838:	8c400044 	addi	r17,r17,1
   5183c:	10c7883a 	add	r3,r2,r3
   51840:	40800115 	stw	r2,4(r8)
   51844:	41000015 	stw	r4,0(r8)
   51848:	d8c02015 	stw	r3,128(sp)
   5184c:	dc401f15 	stw	r17,124(sp)
   51850:	008001c4 	movi	r2,7
   51854:	14417216 	blt	r2,r17,51e20 <___svfprintf_internal_r+0x166c>
   51858:	45800204 	addi	r22,r8,8
   5185c:	d9003617 	ldw	r4,216(sp)
   51860:	d9403717 	ldw	r5,220(sp)
   51864:	000d883a 	mov	r6,zero
   51868:	000f883a 	mov	r7,zero
   5186c:	d8c03d15 	stw	r3,244(sp)
   51870:	005eb080 	call	5eb08 <__eqdf2>
   51874:	d8c03d17 	ldw	r3,244(sp)
   51878:	1000b326 	beq	r2,zero,51b48 <___svfprintf_internal_r+0x1394>
   5187c:	d9403317 	ldw	r5,204(sp)
   51880:	84000044 	addi	r16,r16,1
   51884:	8c400044 	addi	r17,r17,1
   51888:	28bfffc4 	addi	r2,r5,-1
   5188c:	1887883a 	add	r3,r3,r2
   51890:	b0800115 	stw	r2,4(r22)
   51894:	b4000015 	stw	r16,0(r22)
   51898:	d8c02015 	stw	r3,128(sp)
   5189c:	dc401f15 	stw	r17,124(sp)
   518a0:	008001c4 	movi	r2,7
   518a4:	1440d216 	blt	r2,r17,51bf0 <___svfprintf_internal_r+0x143c>
   518a8:	b5800204 	addi	r22,r22,8
   518ac:	d9003b17 	ldw	r4,236(sp)
   518b0:	df0022c4 	addi	fp,sp,139
   518b4:	8c400044 	addi	r17,r17,1
   518b8:	20c7883a 	add	r3,r4,r3
   518bc:	b7000015 	stw	fp,0(r22)
   518c0:	b1000115 	stw	r4,4(r22)
   518c4:	d8c02015 	stw	r3,128(sp)
   518c8:	dc401f15 	stw	r17,124(sp)
   518cc:	008001c4 	movi	r2,7
   518d0:	14400e16 	blt	r2,r17,5190c <___svfprintf_internal_r+0x1158>
   518d4:	b2000204 	addi	r8,r22,8
   518d8:	003e1a06 	br	51144 <__alt_data_end+0xfffd1144>
   518dc:	010001f4 	movhi	r4,7
   518e0:	212e8084 	addi	r4,r4,-17918
   518e4:	d9002c15 	stw	r4,176(sp)
   518e8:	d9002c17 	ldw	r4,176(sp)
   518ec:	1c07883a 	add	r3,r3,r16
   518f0:	44000115 	stw	r16,4(r8)
   518f4:	41000015 	stw	r4,0(r8)
   518f8:	10800044 	addi	r2,r2,1
   518fc:	d8c02015 	stw	r3,128(sp)
   51900:	d8801f15 	stw	r2,124(sp)
   51904:	010001c4 	movi	r4,7
   51908:	20be0d0e 	bge	r4,r2,51140 <__alt_data_end+0xfffd1140>
   5190c:	d9402d17 	ldw	r5,180(sp)
   51910:	d9801e04 	addi	r6,sp,120
   51914:	9809883a 	mov	r4,r19
   51918:	00597180 	call	59718 <__ssprint_r>
   5191c:	103c8c1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51920:	d8c02017 	ldw	r3,128(sp)
   51924:	da000404 	addi	r8,sp,16
   51928:	003e0606 	br	51144 <__alt_data_end+0xfffd1144>
   5192c:	d9402d17 	ldw	r5,180(sp)
   51930:	d9801e04 	addi	r6,sp,120
   51934:	9809883a 	mov	r4,r19
   51938:	00597180 	call	59718 <__ssprint_r>
   5193c:	103e3d26 	beq	r2,zero,51234 <__alt_data_end+0xfffd1234>
   51940:	003c8306 	br	50b50 <__alt_data_end+0xfffd0b50>
   51944:	d9402d17 	ldw	r5,180(sp)
   51948:	d9801e04 	addi	r6,sp,120
   5194c:	9809883a 	mov	r4,r19
   51950:	00597180 	call	59718 <__ssprint_r>
   51954:	103c7e1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51958:	d8c02017 	ldw	r3,128(sp)
   5195c:	da000404 	addi	r8,sp,16
   51960:	003deb06 	br	51110 <__alt_data_end+0xfffd1110>
   51964:	d9402d17 	ldw	r5,180(sp)
   51968:	d9801e04 	addi	r6,sp,120
   5196c:	9809883a 	mov	r4,r19
   51970:	00597180 	call	59718 <__ssprint_r>
   51974:	103c761e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51978:	d8c02017 	ldw	r3,128(sp)
   5197c:	da000404 	addi	r8,sp,16
   51980:	003d9f06 	br	51000 <__alt_data_end+0xfffd1000>
   51984:	d9402d17 	ldw	r5,180(sp)
   51988:	d9801e04 	addi	r6,sp,120
   5198c:	9809883a 	mov	r4,r19
   51990:	00597180 	call	59718 <__ssprint_r>
   51994:	103c6e1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51998:	d8c02017 	ldw	r3,128(sp)
   5199c:	da000404 	addi	r8,sp,16
   519a0:	003da506 	br	51038 <__alt_data_end+0xfffd1038>
   519a4:	d9402a17 	ldw	r5,168(sp)
   519a8:	d8002785 	stb	zero,158(sp)
   519ac:	283f0816 	blt	r5,zero,515d0 <__alt_data_end+0xfffd15d0>
   519b0:	00ffdfc4 	movi	r3,-129
   519b4:	a584b03a 	or	r2,r20,r22
   519b8:	90e4703a 	and	r18,r18,r3
   519bc:	103c5126 	beq	r2,zero,50b04 <__alt_data_end+0xfffd0b04>
   519c0:	0039883a 	mov	fp,zero
   519c4:	003e5a06 	br	51330 <__alt_data_end+0xfffd1330>
   519c8:	9080040c 	andi	r2,r18,16
   519cc:	10013d26 	beq	r2,zero,51ec4 <___svfprintf_internal_r+0x1710>
   519d0:	d8c02e17 	ldw	r3,184(sp)
   519d4:	d9002a17 	ldw	r4,168(sp)
   519d8:	d8002785 	stb	zero,158(sp)
   519dc:	18800104 	addi	r2,r3,4
   519e0:	1d000017 	ldw	r20,0(r3)
   519e4:	002d883a 	mov	r22,zero
   519e8:	20013f16 	blt	r4,zero,51ee8 <___svfprintf_internal_r+0x1734>
   519ec:	00ffdfc4 	movi	r3,-129
   519f0:	d8802e15 	stw	r2,184(sp)
   519f4:	90e4703a 	and	r18,r18,r3
   519f8:	a03d0926 	beq	r20,zero,50e20 <__alt_data_end+0xfffd0e20>
   519fc:	0039883a 	mov	fp,zero
   51a00:	003d0c06 	br	50e34 <__alt_data_end+0xfffd0e34>
   51a04:	dc402617 	ldw	r17,152(sp)
   51a08:	0441830e 	bge	zero,r17,52018 <___svfprintf_internal_r+0x1864>
   51a0c:	dc403217 	ldw	r17,200(sp)
   51a10:	d8803317 	ldw	r2,204(sp)
   51a14:	1440010e 	bge	r2,r17,51a1c <___svfprintf_internal_r+0x1268>
   51a18:	1023883a 	mov	r17,r2
   51a1c:	04400a0e 	bge	zero,r17,51a48 <___svfprintf_internal_r+0x1294>
   51a20:	d8801f17 	ldw	r2,124(sp)
   51a24:	1c47883a 	add	r3,r3,r17
   51a28:	44000015 	stw	r16,0(r8)
   51a2c:	10800044 	addi	r2,r2,1
   51a30:	44400115 	stw	r17,4(r8)
   51a34:	d8c02015 	stw	r3,128(sp)
   51a38:	d8801f15 	stw	r2,124(sp)
   51a3c:	010001c4 	movi	r4,7
   51a40:	20827516 	blt	r4,r2,52418 <___svfprintf_internal_r+0x1c64>
   51a44:	42000204 	addi	r8,r8,8
   51a48:	88027b16 	blt	r17,zero,52438 <___svfprintf_internal_r+0x1c84>
   51a4c:	d9003217 	ldw	r4,200(sp)
   51a50:	2463c83a 	sub	r17,r4,r17
   51a54:	0440990e 	bge	zero,r17,51cbc <___svfprintf_internal_r+0x1508>
   51a58:	05800404 	movi	r22,16
   51a5c:	d8801f17 	ldw	r2,124(sp)
   51a60:	b441530e 	bge	r22,r17,51fb0 <___svfprintf_internal_r+0x17fc>
   51a64:	010001f4 	movhi	r4,7
   51a68:	212e8084 	addi	r4,r4,-17918
   51a6c:	d9002c15 	stw	r4,176(sp)
   51a70:	070001c4 	movi	fp,7
   51a74:	dd002d17 	ldw	r20,180(sp)
   51a78:	00000306 	br	51a88 <___svfprintf_internal_r+0x12d4>
   51a7c:	42000204 	addi	r8,r8,8
   51a80:	8c7ffc04 	addi	r17,r17,-16
   51a84:	b4414d0e 	bge	r22,r17,51fbc <___svfprintf_internal_r+0x1808>
   51a88:	18c00404 	addi	r3,r3,16
   51a8c:	10800044 	addi	r2,r2,1
   51a90:	45400015 	stw	r21,0(r8)
   51a94:	45800115 	stw	r22,4(r8)
   51a98:	d8c02015 	stw	r3,128(sp)
   51a9c:	d8801f15 	stw	r2,124(sp)
   51aa0:	e0bff60e 	bge	fp,r2,51a7c <__alt_data_end+0xfffd1a7c>
   51aa4:	d9801e04 	addi	r6,sp,120
   51aa8:	a00b883a 	mov	r5,r20
   51aac:	9809883a 	mov	r4,r19
   51ab0:	00597180 	call	59718 <__ssprint_r>
   51ab4:	103c261e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51ab8:	d8c02017 	ldw	r3,128(sp)
   51abc:	d8801f17 	ldw	r2,124(sp)
   51ac0:	da000404 	addi	r8,sp,16
   51ac4:	003fee06 	br	51a80 <__alt_data_end+0xfffd1a80>
   51ac8:	d9402d17 	ldw	r5,180(sp)
   51acc:	d9801e04 	addi	r6,sp,120
   51ad0:	9809883a 	mov	r4,r19
   51ad4:	00597180 	call	59718 <__ssprint_r>
   51ad8:	103c1d1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51adc:	d8c02017 	ldw	r3,128(sp)
   51ae0:	df002787 	ldb	fp,158(sp)
   51ae4:	da000404 	addi	r8,sp,16
   51ae8:	003d3806 	br	50fcc <__alt_data_end+0xfffd0fcc>
   51aec:	9080040c 	andi	r2,r18,16
   51af0:	10005c26 	beq	r2,zero,51c64 <___svfprintf_internal_r+0x14b0>
   51af4:	d8c02e17 	ldw	r3,184(sp)
   51af8:	d9002a17 	ldw	r4,168(sp)
   51afc:	d8002785 	stb	zero,158(sp)
   51b00:	18800104 	addi	r2,r3,4
   51b04:	1d000017 	ldw	r20,0(r3)
   51b08:	002d883a 	mov	r22,zero
   51b0c:	20005e16 	blt	r4,zero,51c88 <___svfprintf_internal_r+0x14d4>
   51b10:	00ffdfc4 	movi	r3,-129
   51b14:	d8802e15 	stw	r2,184(sp)
   51b18:	90e4703a 	and	r18,r18,r3
   51b1c:	0039883a 	mov	fp,zero
   51b20:	a03ddf26 	beq	r20,zero,512a0 <__alt_data_end+0xfffd12a0>
   51b24:	00800244 	movi	r2,9
   51b28:	153c8e36 	bltu	r2,r20,50d64 <__alt_data_end+0xfffd0d64>
   51b2c:	a5000c04 	addi	r20,r20,48
   51b30:	dc001dc4 	addi	r16,sp,119
   51b34:	dd001dc5 	stb	r20,119(sp)
   51b38:	d8c02817 	ldw	r3,160(sp)
   51b3c:	1c07c83a 	sub	r3,r3,r16
   51b40:	d8c02b15 	stw	r3,172(sp)
   51b44:	003cd306 	br	50e94 <__alt_data_end+0xfffd0e94>
   51b48:	d8803317 	ldw	r2,204(sp)
   51b4c:	143fffc4 	addi	r16,r2,-1
   51b50:	043f560e 	bge	zero,r16,518ac <__alt_data_end+0xfffd18ac>
   51b54:	07000404 	movi	fp,16
   51b58:	e403530e 	bge	fp,r16,528a8 <___svfprintf_internal_r+0x20f4>
   51b5c:	014001f4 	movhi	r5,7
   51b60:	296e8084 	addi	r5,r5,-17918
   51b64:	d9402c15 	stw	r5,176(sp)
   51b68:	01c001c4 	movi	r7,7
   51b6c:	dd002d17 	ldw	r20,180(sp)
   51b70:	00000306 	br	51b80 <___svfprintf_internal_r+0x13cc>
   51b74:	843ffc04 	addi	r16,r16,-16
   51b78:	b5800204 	addi	r22,r22,8
   51b7c:	e400130e 	bge	fp,r16,51bcc <___svfprintf_internal_r+0x1418>
   51b80:	18c00404 	addi	r3,r3,16
   51b84:	8c400044 	addi	r17,r17,1
   51b88:	b5400015 	stw	r21,0(r22)
   51b8c:	b7000115 	stw	fp,4(r22)
   51b90:	d8c02015 	stw	r3,128(sp)
   51b94:	dc401f15 	stw	r17,124(sp)
   51b98:	3c7ff60e 	bge	r7,r17,51b74 <__alt_data_end+0xfffd1b74>
   51b9c:	d9801e04 	addi	r6,sp,120
   51ba0:	a00b883a 	mov	r5,r20
   51ba4:	9809883a 	mov	r4,r19
   51ba8:	d9c03d15 	stw	r7,244(sp)
   51bac:	00597180 	call	59718 <__ssprint_r>
   51bb0:	d9c03d17 	ldw	r7,244(sp)
   51bb4:	103be61e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51bb8:	843ffc04 	addi	r16,r16,-16
   51bbc:	d8c02017 	ldw	r3,128(sp)
   51bc0:	dc401f17 	ldw	r17,124(sp)
   51bc4:	dd800404 	addi	r22,sp,16
   51bc8:	e43fed16 	blt	fp,r16,51b80 <__alt_data_end+0xfffd1b80>
   51bcc:	d8802c17 	ldw	r2,176(sp)
   51bd0:	1c07883a 	add	r3,r3,r16
   51bd4:	8c400044 	addi	r17,r17,1
   51bd8:	b0800015 	stw	r2,0(r22)
   51bdc:	b4000115 	stw	r16,4(r22)
   51be0:	d8c02015 	stw	r3,128(sp)
   51be4:	dc401f15 	stw	r17,124(sp)
   51be8:	008001c4 	movi	r2,7
   51bec:	147f2e0e 	bge	r2,r17,518a8 <__alt_data_end+0xfffd18a8>
   51bf0:	d9402d17 	ldw	r5,180(sp)
   51bf4:	d9801e04 	addi	r6,sp,120
   51bf8:	9809883a 	mov	r4,r19
   51bfc:	00597180 	call	59718 <__ssprint_r>
   51c00:	103bd31e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51c04:	d8c02017 	ldw	r3,128(sp)
   51c08:	dc401f17 	ldw	r17,124(sp)
   51c0c:	dd800404 	addi	r22,sp,16
   51c10:	003f2606 	br	518ac <__alt_data_end+0xfffd18ac>
   51c14:	9080040c 	andi	r2,r18,16
   51c18:	1000c326 	beq	r2,zero,51f28 <___svfprintf_internal_r+0x1774>
   51c1c:	d9402e17 	ldw	r5,184(sp)
   51c20:	2d000017 	ldw	r20,0(r5)
   51c24:	29400104 	addi	r5,r5,4
   51c28:	d9402e15 	stw	r5,184(sp)
   51c2c:	a02dd7fa 	srai	r22,r20,31
   51c30:	b005883a 	mov	r2,r22
   51c34:	103c430e 	bge	r2,zero,50d44 <__alt_data_end+0xfffd0d44>
   51c38:	d9402a17 	ldw	r5,168(sp)
   51c3c:	0529c83a 	sub	r20,zero,r20
   51c40:	07000b44 	movi	fp,45
   51c44:	a004c03a 	cmpne	r2,r20,zero
   51c48:	05adc83a 	sub	r22,zero,r22
   51c4c:	df002785 	stb	fp,158(sp)
   51c50:	b0adc83a 	sub	r22,r22,r2
   51c54:	28022e16 	blt	r5,zero,52510 <___svfprintf_internal_r+0x1d5c>
   51c58:	00bfdfc4 	movi	r2,-129
   51c5c:	90a4703a 	and	r18,r18,r2
   51c60:	003c3f06 	br	50d60 <__alt_data_end+0xfffd0d60>
   51c64:	9080100c 	andi	r2,r18,64
   51c68:	d8002785 	stb	zero,158(sp)
   51c6c:	10012526 	beq	r2,zero,52104 <___svfprintf_internal_r+0x1950>
   51c70:	d9402e17 	ldw	r5,184(sp)
   51c74:	d8c02a17 	ldw	r3,168(sp)
   51c78:	002d883a 	mov	r22,zero
   51c7c:	28800104 	addi	r2,r5,4
   51c80:	2d00000b 	ldhu	r20,0(r5)
   51c84:	183fa20e 	bge	r3,zero,51b10 <__alt_data_end+0xfffd1b10>
   51c88:	d8802e15 	stw	r2,184(sp)
   51c8c:	0039883a 	mov	fp,zero
   51c90:	a584b03a 	or	r2,r20,r22
   51c94:	103c321e 	bne	r2,zero,50d60 <__alt_data_end+0xfffd0d60>
   51c98:	00800044 	movi	r2,1
   51c9c:	003e5006 	br	515e0 <__alt_data_end+0xfffd15e0>
   51ca0:	d9402d17 	ldw	r5,180(sp)
   51ca4:	d9801e04 	addi	r6,sp,120
   51ca8:	9809883a 	mov	r4,r19
   51cac:	00597180 	call	59718 <__ssprint_r>
   51cb0:	103ba71e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51cb4:	d8c02017 	ldw	r3,128(sp)
   51cb8:	da000404 	addi	r8,sp,16
   51cbc:	d9003217 	ldw	r4,200(sp)
   51cc0:	d8802617 	ldw	r2,152(sp)
   51cc4:	d9403317 	ldw	r5,204(sp)
   51cc8:	8123883a 	add	r17,r16,r4
   51ccc:	11400216 	blt	r2,r5,51cd8 <___svfprintf_internal_r+0x1524>
   51cd0:	9100004c 	andi	r4,r18,1
   51cd4:	20000d26 	beq	r4,zero,51d0c <___svfprintf_internal_r+0x1558>
   51cd8:	d9003817 	ldw	r4,224(sp)
   51cdc:	d9403417 	ldw	r5,208(sp)
   51ce0:	1907883a 	add	r3,r3,r4
   51ce4:	d9001f17 	ldw	r4,124(sp)
   51ce8:	41400015 	stw	r5,0(r8)
   51cec:	d9403817 	ldw	r5,224(sp)
   51cf0:	21000044 	addi	r4,r4,1
   51cf4:	d8c02015 	stw	r3,128(sp)
   51cf8:	41400115 	stw	r5,4(r8)
   51cfc:	d9001f15 	stw	r4,124(sp)
   51d00:	014001c4 	movi	r5,7
   51d04:	2901dc16 	blt	r5,r4,52478 <___svfprintf_internal_r+0x1cc4>
   51d08:	42000204 	addi	r8,r8,8
   51d0c:	d9003317 	ldw	r4,204(sp)
   51d10:	8121883a 	add	r16,r16,r4
   51d14:	2085c83a 	sub	r2,r4,r2
   51d18:	8461c83a 	sub	r16,r16,r17
   51d1c:	1400010e 	bge	r2,r16,51d24 <___svfprintf_internal_r+0x1570>
   51d20:	1021883a 	mov	r16,r2
   51d24:	04000a0e 	bge	zero,r16,51d50 <___svfprintf_internal_r+0x159c>
   51d28:	d9001f17 	ldw	r4,124(sp)
   51d2c:	1c07883a 	add	r3,r3,r16
   51d30:	44400015 	stw	r17,0(r8)
   51d34:	21000044 	addi	r4,r4,1
   51d38:	44000115 	stw	r16,4(r8)
   51d3c:	d8c02015 	stw	r3,128(sp)
   51d40:	d9001f15 	stw	r4,124(sp)
   51d44:	014001c4 	movi	r5,7
   51d48:	2901e616 	blt	r5,r4,524e4 <___svfprintf_internal_r+0x1d30>
   51d4c:	42000204 	addi	r8,r8,8
   51d50:	8001f616 	blt	r16,zero,5252c <___svfprintf_internal_r+0x1d78>
   51d54:	1421c83a 	sub	r16,r2,r16
   51d58:	043cfa0e 	bge	zero,r16,51144 <__alt_data_end+0xfffd1144>
   51d5c:	04400404 	movi	r17,16
   51d60:	d8801f17 	ldw	r2,124(sp)
   51d64:	8c3edd0e 	bge	r17,r16,518dc <__alt_data_end+0xfffd18dc>
   51d68:	014001f4 	movhi	r5,7
   51d6c:	296e8084 	addi	r5,r5,-17918
   51d70:	d9402c15 	stw	r5,176(sp)
   51d74:	058001c4 	movi	r22,7
   51d78:	dd002d17 	ldw	r20,180(sp)
   51d7c:	00000306 	br	51d8c <___svfprintf_internal_r+0x15d8>
   51d80:	42000204 	addi	r8,r8,8
   51d84:	843ffc04 	addi	r16,r16,-16
   51d88:	8c3ed70e 	bge	r17,r16,518e8 <__alt_data_end+0xfffd18e8>
   51d8c:	18c00404 	addi	r3,r3,16
   51d90:	10800044 	addi	r2,r2,1
   51d94:	45400015 	stw	r21,0(r8)
   51d98:	44400115 	stw	r17,4(r8)
   51d9c:	d8c02015 	stw	r3,128(sp)
   51da0:	d8801f15 	stw	r2,124(sp)
   51da4:	b0bff60e 	bge	r22,r2,51d80 <__alt_data_end+0xfffd1d80>
   51da8:	d9801e04 	addi	r6,sp,120
   51dac:	a00b883a 	mov	r5,r20
   51db0:	9809883a 	mov	r4,r19
   51db4:	00597180 	call	59718 <__ssprint_r>
   51db8:	103b651e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51dbc:	d8c02017 	ldw	r3,128(sp)
   51dc0:	d8801f17 	ldw	r2,124(sp)
   51dc4:	da000404 	addi	r8,sp,16
   51dc8:	003fee06 	br	51d84 <__alt_data_end+0xfffd1d84>
   51dcc:	9088703a 	and	r4,r18,r2
   51dd0:	203e8d1e 	bne	r4,zero,51808 <__alt_data_end+0xfffd1808>
   51dd4:	dc401f17 	ldw	r17,124(sp)
   51dd8:	40800115 	stw	r2,4(r8)
   51ddc:	44000015 	stw	r16,0(r8)
   51de0:	8c400044 	addi	r17,r17,1
   51de4:	d8c02015 	stw	r3,128(sp)
   51de8:	dc401f15 	stw	r17,124(sp)
   51dec:	008001c4 	movi	r2,7
   51df0:	147f7f16 	blt	r2,r17,51bf0 <__alt_data_end+0xfffd1bf0>
   51df4:	45800204 	addi	r22,r8,8
   51df8:	003eac06 	br	518ac <__alt_data_end+0xfffd18ac>
   51dfc:	d9402d17 	ldw	r5,180(sp)
   51e00:	d9801e04 	addi	r6,sp,120
   51e04:	9809883a 	mov	r4,r19
   51e08:	00597180 	call	59718 <__ssprint_r>
   51e0c:	103b501e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51e10:	d8c02017 	ldw	r3,128(sp)
   51e14:	dc401f17 	ldw	r17,124(sp)
   51e18:	da000404 	addi	r8,sp,16
   51e1c:	003e8406 	br	51830 <__alt_data_end+0xfffd1830>
   51e20:	d9402d17 	ldw	r5,180(sp)
   51e24:	d9801e04 	addi	r6,sp,120
   51e28:	9809883a 	mov	r4,r19
   51e2c:	00597180 	call	59718 <__ssprint_r>
   51e30:	103b471e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51e34:	d8c02017 	ldw	r3,128(sp)
   51e38:	dc401f17 	ldw	r17,124(sp)
   51e3c:	dd800404 	addi	r22,sp,16
   51e40:	003e8606 	br	5185c <__alt_data_end+0xfffd185c>
   51e44:	0029883a 	mov	r20,zero
   51e48:	a5000c04 	addi	r20,r20,48
   51e4c:	dc001dc4 	addi	r16,sp,119
   51e50:	dd001dc5 	stb	r20,119(sp)
   51e54:	003f3806 	br	51b38 <__alt_data_end+0xfffd1b38>
   51e58:	d9402d17 	ldw	r5,180(sp)
   51e5c:	d9801e04 	addi	r6,sp,120
   51e60:	9809883a 	mov	r4,r19
   51e64:	00597180 	call	59718 <__ssprint_r>
   51e68:	103b391e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   51e6c:	d8c02017 	ldw	r3,128(sp)
   51e70:	da000404 	addi	r8,sp,16
   51e74:	003c7306 	br	51044 <__alt_data_end+0xfffd1044>
   51e78:	d9003617 	ldw	r4,216(sp)
   51e7c:	d9403717 	ldw	r5,220(sp)
   51e80:	da003e15 	stw	r8,248(sp)
   51e84:	00595680 	call	59568 <__fpclassifyd>
   51e88:	da003e17 	ldw	r8,248(sp)
   51e8c:	1000bd1e 	bne	r2,zero,52184 <___svfprintf_internal_r+0x19d0>
   51e90:	008011c4 	movi	r2,71
   51e94:	14411e0e 	bge	r2,r17,52310 <___svfprintf_internal_r+0x1b5c>
   51e98:	040001f4 	movhi	r16,7
   51e9c:	842e7304 	addi	r16,r16,-17972
   51ea0:	00c000c4 	movi	r3,3
   51ea4:	00bfdfc4 	movi	r2,-129
   51ea8:	d8c02915 	stw	r3,164(sp)
   51eac:	90a4703a 	and	r18,r18,r2
   51eb0:	df002783 	ldbu	fp,158(sp)
   51eb4:	d8c02b15 	stw	r3,172(sp)
   51eb8:	d8002a15 	stw	zero,168(sp)
   51ebc:	d8003215 	stw	zero,200(sp)
   51ec0:	003bfa06 	br	50eac <__alt_data_end+0xfffd0eac>
   51ec4:	9080100c 	andi	r2,r18,64
   51ec8:	d8002785 	stb	zero,158(sp)
   51ecc:	10009426 	beq	r2,zero,52120 <___svfprintf_internal_r+0x196c>
   51ed0:	d9402e17 	ldw	r5,184(sp)
   51ed4:	d8c02a17 	ldw	r3,168(sp)
   51ed8:	002d883a 	mov	r22,zero
   51edc:	28800104 	addi	r2,r5,4
   51ee0:	2d00000b 	ldhu	r20,0(r5)
   51ee4:	183ec10e 	bge	r3,zero,519ec <__alt_data_end+0xfffd19ec>
   51ee8:	a586b03a 	or	r3,r20,r22
   51eec:	d8802e15 	stw	r2,184(sp)
   51ef0:	183ec21e 	bne	r3,zero,519fc <__alt_data_end+0xfffd19fc>
   51ef4:	0039883a 	mov	fp,zero
   51ef8:	0005883a 	mov	r2,zero
   51efc:	003db806 	br	515e0 <__alt_data_end+0xfffd15e0>
   51f00:	d8c02e17 	ldw	r3,184(sp)
   51f04:	d9002e17 	ldw	r4,184(sp)
   51f08:	d9402e17 	ldw	r5,184(sp)
   51f0c:	18c00017 	ldw	r3,0(r3)
   51f10:	21000117 	ldw	r4,4(r4)
   51f14:	29400204 	addi	r5,r5,8
   51f18:	d8c03615 	stw	r3,216(sp)
   51f1c:	d9003715 	stw	r4,220(sp)
   51f20:	d9402e15 	stw	r5,184(sp)
   51f24:	003b5a06 	br	50c90 <__alt_data_end+0xfffd0c90>
   51f28:	9080100c 	andi	r2,r18,64
   51f2c:	10010726 	beq	r2,zero,5234c <___svfprintf_internal_r+0x1b98>
   51f30:	d8802e17 	ldw	r2,184(sp)
   51f34:	1500000f 	ldh	r20,0(r2)
   51f38:	10800104 	addi	r2,r2,4
   51f3c:	d8802e15 	stw	r2,184(sp)
   51f40:	a02dd7fa 	srai	r22,r20,31
   51f44:	b005883a 	mov	r2,r22
   51f48:	003b7d06 	br	50d40 <__alt_data_end+0xfffd0d40>
   51f4c:	9080100c 	andi	r2,r18,64
   51f50:	10010526 	beq	r2,zero,52368 <___svfprintf_internal_r+0x1bb4>
   51f54:	d8c02e17 	ldw	r3,184(sp)
   51f58:	002d883a 	mov	r22,zero
   51f5c:	1d00000b 	ldhu	r20,0(r3)
   51f60:	18c00104 	addi	r3,r3,4
   51f64:	d8c02e15 	stw	r3,184(sp)
   51f68:	003ce206 	br	512f4 <__alt_data_end+0xfffd12f4>
   51f6c:	bc400007 	ldb	r17,0(r23)
   51f70:	003a6506 	br	50908 <__alt_data_end+0xfffd0908>
   51f74:	9080040c 	andi	r2,r18,16
   51f78:	10010126 	beq	r2,zero,52380 <___svfprintf_internal_r+0x1bcc>
   51f7c:	d8c02e17 	ldw	r3,184(sp)
   51f80:	d9002f17 	ldw	r4,188(sp)
   51f84:	18800017 	ldw	r2,0(r3)
   51f88:	18c00104 	addi	r3,r3,4
   51f8c:	d8c02e15 	stw	r3,184(sp)
   51f90:	11000015 	stw	r4,0(r2)
   51f94:	003a3206 	br	50860 <__alt_data_end+0xfffd0860>
   51f98:	d9002a17 	ldw	r4,168(sp)
   51f9c:	d8002785 	stb	zero,158(sp)
   51fa0:	203d8d16 	blt	r4,zero,515d8 <__alt_data_end+0xfffd15d8>
   51fa4:	00bfdfc4 	movi	r2,-129
   51fa8:	90a4703a 	and	r18,r18,r2
   51fac:	003ad506 	br	50b04 <__alt_data_end+0xfffd0b04>
   51fb0:	014001f4 	movhi	r5,7
   51fb4:	296e8084 	addi	r5,r5,-17918
   51fb8:	d9402c15 	stw	r5,176(sp)
   51fbc:	d9402c17 	ldw	r5,176(sp)
   51fc0:	1c47883a 	add	r3,r3,r17
   51fc4:	10800044 	addi	r2,r2,1
   51fc8:	41400015 	stw	r5,0(r8)
   51fcc:	44400115 	stw	r17,4(r8)
   51fd0:	d8c02015 	stw	r3,128(sp)
   51fd4:	d8801f15 	stw	r2,124(sp)
   51fd8:	010001c4 	movi	r4,7
   51fdc:	20bf3016 	blt	r4,r2,51ca0 <__alt_data_end+0xfffd1ca0>
   51fe0:	42000204 	addi	r8,r8,8
   51fe4:	003f3506 	br	51cbc <__alt_data_end+0xfffd1cbc>
   51fe8:	010001f4 	movhi	r4,7
   51fec:	212e8084 	addi	r4,r4,-17918
   51ff0:	d9002c15 	stw	r4,176(sp)
   51ff4:	003c3c06 	br	510e8 <__alt_data_end+0xfffd10e8>
   51ff8:	d9402d17 	ldw	r5,180(sp)
   51ffc:	d9801e04 	addi	r6,sp,120
   52000:	9809883a 	mov	r4,r19
   52004:	00597180 	call	59718 <__ssprint_r>
   52008:	103ad11e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   5200c:	d8c02017 	ldw	r3,128(sp)
   52010:	da000404 	addi	r8,sp,16
   52014:	003d9306 	br	51664 <__alt_data_end+0xfffd1664>
   52018:	d8801f17 	ldw	r2,124(sp)
   5201c:	014001f4 	movhi	r5,7
   52020:	01000044 	movi	r4,1
   52024:	18c00044 	addi	r3,r3,1
   52028:	10800044 	addi	r2,r2,1
   5202c:	296e8004 	addi	r5,r5,-17920
   52030:	41000115 	stw	r4,4(r8)
   52034:	41400015 	stw	r5,0(r8)
   52038:	d8c02015 	stw	r3,128(sp)
   5203c:	d8801f15 	stw	r2,124(sp)
   52040:	010001c4 	movi	r4,7
   52044:	2080b516 	blt	r4,r2,5231c <___svfprintf_internal_r+0x1b68>
   52048:	42000204 	addi	r8,r8,8
   5204c:	8800041e 	bne	r17,zero,52060 <___svfprintf_internal_r+0x18ac>
   52050:	d8803317 	ldw	r2,204(sp)
   52054:	1000021e 	bne	r2,zero,52060 <___svfprintf_internal_r+0x18ac>
   52058:	9080004c 	andi	r2,r18,1
   5205c:	103c3926 	beq	r2,zero,51144 <__alt_data_end+0xfffd1144>
   52060:	d9003817 	ldw	r4,224(sp)
   52064:	d8801f17 	ldw	r2,124(sp)
   52068:	d9403417 	ldw	r5,208(sp)
   5206c:	20c7883a 	add	r3,r4,r3
   52070:	10800044 	addi	r2,r2,1
   52074:	41000115 	stw	r4,4(r8)
   52078:	41400015 	stw	r5,0(r8)
   5207c:	d8c02015 	stw	r3,128(sp)
   52080:	d8801f15 	stw	r2,124(sp)
   52084:	010001c4 	movi	r4,7
   52088:	20818016 	blt	r4,r2,5268c <___svfprintf_internal_r+0x1ed8>
   5208c:	42000204 	addi	r8,r8,8
   52090:	0463c83a 	sub	r17,zero,r17
   52094:	0440cb0e 	bge	zero,r17,523c4 <___svfprintf_internal_r+0x1c10>
   52098:	05800404 	movi	r22,16
   5209c:	b440e80e 	bge	r22,r17,52440 <___svfprintf_internal_r+0x1c8c>
   520a0:	014001f4 	movhi	r5,7
   520a4:	296e8084 	addi	r5,r5,-17918
   520a8:	d9402c15 	stw	r5,176(sp)
   520ac:	070001c4 	movi	fp,7
   520b0:	dd002d17 	ldw	r20,180(sp)
   520b4:	00000306 	br	520c4 <___svfprintf_internal_r+0x1910>
   520b8:	42000204 	addi	r8,r8,8
   520bc:	8c7ffc04 	addi	r17,r17,-16
   520c0:	b440e20e 	bge	r22,r17,5244c <___svfprintf_internal_r+0x1c98>
   520c4:	18c00404 	addi	r3,r3,16
   520c8:	10800044 	addi	r2,r2,1
   520cc:	45400015 	stw	r21,0(r8)
   520d0:	45800115 	stw	r22,4(r8)
   520d4:	d8c02015 	stw	r3,128(sp)
   520d8:	d8801f15 	stw	r2,124(sp)
   520dc:	e0bff60e 	bge	fp,r2,520b8 <__alt_data_end+0xfffd20b8>
   520e0:	d9801e04 	addi	r6,sp,120
   520e4:	a00b883a 	mov	r5,r20
   520e8:	9809883a 	mov	r4,r19
   520ec:	00597180 	call	59718 <__ssprint_r>
   520f0:	103a971e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   520f4:	d8c02017 	ldw	r3,128(sp)
   520f8:	d8801f17 	ldw	r2,124(sp)
   520fc:	da000404 	addi	r8,sp,16
   52100:	003fee06 	br	520bc <__alt_data_end+0xfffd20bc>
   52104:	d9002e17 	ldw	r4,184(sp)
   52108:	d9402a17 	ldw	r5,168(sp)
   5210c:	002d883a 	mov	r22,zero
   52110:	20800104 	addi	r2,r4,4
   52114:	25000017 	ldw	r20,0(r4)
   52118:	283e7d0e 	bge	r5,zero,51b10 <__alt_data_end+0xfffd1b10>
   5211c:	003eda06 	br	51c88 <__alt_data_end+0xfffd1c88>
   52120:	d9002e17 	ldw	r4,184(sp)
   52124:	d9402a17 	ldw	r5,168(sp)
   52128:	002d883a 	mov	r22,zero
   5212c:	20800104 	addi	r2,r4,4
   52130:	25000017 	ldw	r20,0(r4)
   52134:	283e2d0e 	bge	r5,zero,519ec <__alt_data_end+0xfffd19ec>
   52138:	003f6b06 	br	51ee8 <__alt_data_end+0xfffd1ee8>
   5213c:	d8c02e15 	stw	r3,184(sp)
   52140:	0039883a 	mov	fp,zero
   52144:	003ed206 	br	51c90 <__alt_data_end+0xfffd1c90>
   52148:	bc400043 	ldbu	r17,1(r23)
   5214c:	84000814 	ori	r16,r16,32
   52150:	bdc00044 	addi	r23,r23,1
   52154:	8c403fcc 	andi	r17,r17,255
   52158:	8c40201c 	xori	r17,r17,128
   5215c:	8c7fe004 	addi	r17,r17,-128
   52160:	0039e906 	br	50908 <__alt_data_end+0xfffd0908>
   52164:	d9402d17 	ldw	r5,180(sp)
   52168:	d9801e04 	addi	r6,sp,120
   5216c:	9809883a 	mov	r4,r19
   52170:	00597180 	call	59718 <__ssprint_r>
   52174:	103a761e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   52178:	d8c02017 	ldw	r3,128(sp)
   5217c:	da000404 	addi	r8,sp,16
   52180:	003d4a06 	br	516ac <__alt_data_end+0xfffd16ac>
   52184:	d9002a17 	ldw	r4,168(sp)
   52188:	05bff7c4 	movi	r22,-33
   5218c:	00bfffc4 	movi	r2,-1
   52190:	8dac703a 	and	r22,r17,r22
   52194:	20806a26 	beq	r4,r2,52340 <___svfprintf_internal_r+0x1b8c>
   52198:	008011c4 	movi	r2,71
   5219c:	b0813726 	beq	r22,r2,5267c <___svfprintf_internal_r+0x1ec8>
   521a0:	d9003717 	ldw	r4,220(sp)
   521a4:	90c04014 	ori	r3,r18,256
   521a8:	d8c02c15 	stw	r3,176(sp)
   521ac:	20015d16 	blt	r4,zero,52724 <___svfprintf_internal_r+0x1f70>
   521b0:	dd003717 	ldw	r20,220(sp)
   521b4:	d8002905 	stb	zero,164(sp)
   521b8:	00801984 	movi	r2,102
   521bc:	88814026 	beq	r17,r2,526c0 <___svfprintf_internal_r+0x1f0c>
   521c0:	00801184 	movi	r2,70
   521c4:	88817126 	beq	r17,r2,5278c <___svfprintf_internal_r+0x1fd8>
   521c8:	00801144 	movi	r2,69
   521cc:	b0816226 	beq	r22,r2,52758 <___svfprintf_internal_r+0x1fa4>
   521d0:	d8c02a17 	ldw	r3,168(sp)
   521d4:	d8802104 	addi	r2,sp,132
   521d8:	d8800315 	stw	r2,12(sp)
   521dc:	d9403617 	ldw	r5,216(sp)
   521e0:	d8802504 	addi	r2,sp,148
   521e4:	d8800215 	stw	r2,8(sp)
   521e8:	d8802604 	addi	r2,sp,152
   521ec:	d8c00015 	stw	r3,0(sp)
   521f0:	d8800115 	stw	r2,4(sp)
   521f4:	01c00084 	movi	r7,2
   521f8:	a00d883a 	mov	r6,r20
   521fc:	9809883a 	mov	r4,r19
   52200:	d8c03d15 	stw	r3,244(sp)
   52204:	da003e15 	stw	r8,248(sp)
   52208:	00551a80 	call	551a8 <_dtoa_r>
   5220c:	1021883a 	mov	r16,r2
   52210:	008019c4 	movi	r2,103
   52214:	d8c03d17 	ldw	r3,244(sp)
   52218:	da003e17 	ldw	r8,248(sp)
   5221c:	8880e726 	beq	r17,r2,525bc <___svfprintf_internal_r+0x1e08>
   52220:	008011c4 	movi	r2,71
   52224:	8880d426 	beq	r17,r2,52578 <___svfprintf_internal_r+0x1dc4>
   52228:	80f9883a 	add	fp,r16,r3
   5222c:	d9003617 	ldw	r4,216(sp)
   52230:	000d883a 	mov	r6,zero
   52234:	000f883a 	mov	r7,zero
   52238:	a00b883a 	mov	r5,r20
   5223c:	da003e15 	stw	r8,248(sp)
   52240:	005eb080 	call	5eb08 <__eqdf2>
   52244:	da003e17 	ldw	r8,248(sp)
   52248:	1000e426 	beq	r2,zero,525dc <___svfprintf_internal_r+0x1e28>
   5224c:	d8802117 	ldw	r2,132(sp)
   52250:	1700062e 	bgeu	r2,fp,5226c <___svfprintf_internal_r+0x1ab8>
   52254:	01000c04 	movi	r4,48
   52258:	10c00044 	addi	r3,r2,1
   5225c:	d8c02115 	stw	r3,132(sp)
   52260:	11000005 	stb	r4,0(r2)
   52264:	d8802117 	ldw	r2,132(sp)
   52268:	173ffb36 	bltu	r2,fp,52258 <__alt_data_end+0xfffd2258>
   5226c:	1405c83a 	sub	r2,r2,r16
   52270:	d8803315 	stw	r2,204(sp)
   52274:	008011c4 	movi	r2,71
   52278:	b080c526 	beq	r22,r2,52590 <___svfprintf_internal_r+0x1ddc>
   5227c:	00801944 	movi	r2,101
   52280:	1441d80e 	bge	r2,r17,529e4 <___svfprintf_internal_r+0x2230>
   52284:	d8c02617 	ldw	r3,152(sp)
   52288:	00801984 	movi	r2,102
   5228c:	d8c03215 	stw	r3,200(sp)
   52290:	88813426 	beq	r17,r2,52764 <___svfprintf_internal_r+0x1fb0>
   52294:	d8c03217 	ldw	r3,200(sp)
   52298:	d9003317 	ldw	r4,204(sp)
   5229c:	19012516 	blt	r3,r4,52734 <___svfprintf_internal_r+0x1f80>
   522a0:	9480004c 	andi	r18,r18,1
   522a4:	9001841e 	bne	r18,zero,528b8 <___svfprintf_internal_r+0x2104>
   522a8:	1805883a 	mov	r2,r3
   522ac:	1801cb16 	blt	r3,zero,529dc <___svfprintf_internal_r+0x2228>
   522b0:	d8c03217 	ldw	r3,200(sp)
   522b4:	044019c4 	movi	r17,103
   522b8:	d8c02b15 	stw	r3,172(sp)
   522bc:	df002907 	ldb	fp,164(sp)
   522c0:	e000a61e 	bne	fp,zero,5255c <___svfprintf_internal_r+0x1da8>
   522c4:	df002783 	ldbu	fp,158(sp)
   522c8:	d8802915 	stw	r2,164(sp)
   522cc:	dc802c17 	ldw	r18,176(sp)
   522d0:	d8002a15 	stw	zero,168(sp)
   522d4:	003af506 	br	50eac <__alt_data_end+0xfffd0eac>
   522d8:	040001f4 	movhi	r16,7
   522dc:	842e7004 	addi	r16,r16,-17984
   522e0:	003a7e06 	br	50cdc <__alt_data_end+0xfffd0cdc>
   522e4:	d9003917 	ldw	r4,228(sp)
   522e8:	04001004 	movi	r16,64
   522ec:	800b883a 	mov	r5,r16
   522f0:	004f6480 	call	4f648 <_malloc_r>
   522f4:	d9002d17 	ldw	r4,180(sp)
   522f8:	20800015 	stw	r2,0(r4)
   522fc:	20800415 	stw	r2,16(r4)
   52300:	1001d026 	beq	r2,zero,52a44 <___svfprintf_internal_r+0x2290>
   52304:	d8802d17 	ldw	r2,180(sp)
   52308:	14000515 	stw	r16,20(r2)
   5230c:	00394406 	br	50820 <__alt_data_end+0xfffd0820>
   52310:	040001f4 	movhi	r16,7
   52314:	842e7204 	addi	r16,r16,-17976
   52318:	003ee106 	br	51ea0 <__alt_data_end+0xfffd1ea0>
   5231c:	d9402d17 	ldw	r5,180(sp)
   52320:	d9801e04 	addi	r6,sp,120
   52324:	9809883a 	mov	r4,r19
   52328:	00597180 	call	59718 <__ssprint_r>
   5232c:	103a081e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   52330:	dc402617 	ldw	r17,152(sp)
   52334:	d8c02017 	ldw	r3,128(sp)
   52338:	da000404 	addi	r8,sp,16
   5233c:	003f4306 	br	5204c <__alt_data_end+0xfffd204c>
   52340:	01400184 	movi	r5,6
   52344:	d9402a15 	stw	r5,168(sp)
   52348:	003f9506 	br	521a0 <__alt_data_end+0xfffd21a0>
   5234c:	d8c02e17 	ldw	r3,184(sp)
   52350:	1d000017 	ldw	r20,0(r3)
   52354:	18c00104 	addi	r3,r3,4
   52358:	d8c02e15 	stw	r3,184(sp)
   5235c:	a02dd7fa 	srai	r22,r20,31
   52360:	b005883a 	mov	r2,r22
   52364:	003a7606 	br	50d40 <__alt_data_end+0xfffd0d40>
   52368:	d9002e17 	ldw	r4,184(sp)
   5236c:	002d883a 	mov	r22,zero
   52370:	25000017 	ldw	r20,0(r4)
   52374:	21000104 	addi	r4,r4,4
   52378:	d9002e15 	stw	r4,184(sp)
   5237c:	003bdd06 	br	512f4 <__alt_data_end+0xfffd12f4>
   52380:	9480100c 	andi	r18,r18,64
   52384:	90006e26 	beq	r18,zero,52540 <___svfprintf_internal_r+0x1d8c>
   52388:	d9402e17 	ldw	r5,184(sp)
   5238c:	d8c02f17 	ldw	r3,188(sp)
   52390:	28800017 	ldw	r2,0(r5)
   52394:	29400104 	addi	r5,r5,4
   52398:	d9402e15 	stw	r5,184(sp)
   5239c:	10c0000d 	sth	r3,0(r2)
   523a0:	00392f06 	br	50860 <__alt_data_end+0xfffd0860>
   523a4:	d9402d17 	ldw	r5,180(sp)
   523a8:	d9801e04 	addi	r6,sp,120
   523ac:	9809883a 	mov	r4,r19
   523b0:	00597180 	call	59718 <__ssprint_r>
   523b4:	1039e61e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   523b8:	d8c02017 	ldw	r3,128(sp)
   523bc:	d8801f17 	ldw	r2,124(sp)
   523c0:	da000404 	addi	r8,sp,16
   523c4:	d9403317 	ldw	r5,204(sp)
   523c8:	10800044 	addi	r2,r2,1
   523cc:	44000015 	stw	r16,0(r8)
   523d0:	28c7883a 	add	r3,r5,r3
   523d4:	003b5506 	br	5112c <__alt_data_end+0xfffd112c>
   523d8:	8009883a 	mov	r4,r16
   523dc:	df003e15 	stw	fp,248(sp)
   523e0:	005071c0 	call	5071c <strlen>
   523e4:	d8802b15 	stw	r2,172(sp)
   523e8:	da003e17 	ldw	r8,248(sp)
   523ec:	103c160e 	bge	r2,zero,51448 <__alt_data_end+0xfffd1448>
   523f0:	0005883a 	mov	r2,zero
   523f4:	003c1406 	br	51448 <__alt_data_end+0xfffd1448>
   523f8:	00bfffc4 	movi	r2,-1
   523fc:	0039d906 	br	50b64 <__alt_data_end+0xfffd0b64>
   52400:	010001f4 	movhi	r4,7
   52404:	212e8484 	addi	r4,r4,-17902
   52408:	d9003515 	stw	r4,212(sp)
   5240c:	003ae406 	br	50fa0 <__alt_data_end+0xfffd0fa0>
   52410:	013fffc4 	movi	r4,-1
   52414:	0039fa06 	br	50c00 <__alt_data_end+0xfffd0c00>
   52418:	d9402d17 	ldw	r5,180(sp)
   5241c:	d9801e04 	addi	r6,sp,120
   52420:	9809883a 	mov	r4,r19
   52424:	00597180 	call	59718 <__ssprint_r>
   52428:	1039c91e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   5242c:	d8c02017 	ldw	r3,128(sp)
   52430:	da000404 	addi	r8,sp,16
   52434:	003d8406 	br	51a48 <__alt_data_end+0xfffd1a48>
   52438:	0023883a 	mov	r17,zero
   5243c:	003d8306 	br	51a4c <__alt_data_end+0xfffd1a4c>
   52440:	010001f4 	movhi	r4,7
   52444:	212e8084 	addi	r4,r4,-17918
   52448:	d9002c15 	stw	r4,176(sp)
   5244c:	d9002c17 	ldw	r4,176(sp)
   52450:	1c47883a 	add	r3,r3,r17
   52454:	10800044 	addi	r2,r2,1
   52458:	41000015 	stw	r4,0(r8)
   5245c:	44400115 	stw	r17,4(r8)
   52460:	d8c02015 	stw	r3,128(sp)
   52464:	d8801f15 	stw	r2,124(sp)
   52468:	010001c4 	movi	r4,7
   5246c:	20bfcd16 	blt	r4,r2,523a4 <__alt_data_end+0xfffd23a4>
   52470:	42000204 	addi	r8,r8,8
   52474:	003fd306 	br	523c4 <__alt_data_end+0xfffd23c4>
   52478:	d9402d17 	ldw	r5,180(sp)
   5247c:	d9801e04 	addi	r6,sp,120
   52480:	9809883a 	mov	r4,r19
   52484:	00597180 	call	59718 <__ssprint_r>
   52488:	1039b11e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   5248c:	d8802617 	ldw	r2,152(sp)
   52490:	d8c02017 	ldw	r3,128(sp)
   52494:	da000404 	addi	r8,sp,16
   52498:	003e1c06 	br	51d0c <__alt_data_end+0xfffd1d0c>
   5249c:	d8802a17 	ldw	r2,168(sp)
   524a0:	00c00184 	movi	r3,6
   524a4:	1880012e 	bgeu	r3,r2,524ac <___svfprintf_internal_r+0x1cf8>
   524a8:	1805883a 	mov	r2,r3
   524ac:	d8802b15 	stw	r2,172(sp)
   524b0:	1000f316 	blt	r2,zero,52880 <___svfprintf_internal_r+0x20cc>
   524b4:	040001f4 	movhi	r16,7
   524b8:	d8802915 	stw	r2,164(sp)
   524bc:	dd002e15 	stw	r20,184(sp)
   524c0:	d8002a15 	stw	zero,168(sp)
   524c4:	d8003215 	stw	zero,200(sp)
   524c8:	842e7e04 	addi	r16,r16,-17928
   524cc:	0039883a 	mov	fp,zero
   524d0:	003a7d06 	br	50ec8 <__alt_data_end+0xfffd0ec8>
   524d4:	010001f4 	movhi	r4,7
   524d8:	212e8484 	addi	r4,r4,-17902
   524dc:	d9003515 	stw	r4,212(sp)
   524e0:	003b3d06 	br	511d8 <__alt_data_end+0xfffd11d8>
   524e4:	d9402d17 	ldw	r5,180(sp)
   524e8:	d9801e04 	addi	r6,sp,120
   524ec:	9809883a 	mov	r4,r19
   524f0:	00597180 	call	59718 <__ssprint_r>
   524f4:	1039961e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   524f8:	d8802617 	ldw	r2,152(sp)
   524fc:	d9403317 	ldw	r5,204(sp)
   52500:	d8c02017 	ldw	r3,128(sp)
   52504:	da000404 	addi	r8,sp,16
   52508:	2885c83a 	sub	r2,r5,r2
   5250c:	003e1006 	br	51d50 <__alt_data_end+0xfffd1d50>
   52510:	00800044 	movi	r2,1
   52514:	10803fcc 	andi	r2,r2,255
   52518:	00c00044 	movi	r3,1
   5251c:	10fa1026 	beq	r2,r3,50d60 <__alt_data_end+0xfffd0d60>
   52520:	00c00084 	movi	r3,2
   52524:	10fb8226 	beq	r2,r3,51330 <__alt_data_end+0xfffd1330>
   52528:	003a4206 	br	50e34 <__alt_data_end+0xfffd0e34>
   5252c:	0021883a 	mov	r16,zero
   52530:	003e0806 	br	51d54 <__alt_data_end+0xfffd1d54>
   52534:	07000b44 	movi	fp,45
   52538:	df002785 	stb	fp,158(sp)
   5253c:	0039e306 	br	50ccc <__alt_data_end+0xfffd0ccc>
   52540:	d9002e17 	ldw	r4,184(sp)
   52544:	d9402f17 	ldw	r5,188(sp)
   52548:	20800017 	ldw	r2,0(r4)
   5254c:	21000104 	addi	r4,r4,4
   52550:	d9002e15 	stw	r4,184(sp)
   52554:	11400015 	stw	r5,0(r2)
   52558:	0038c106 	br	50860 <__alt_data_end+0xfffd0860>
   5255c:	00c00b44 	movi	r3,45
   52560:	d8c02785 	stb	r3,158(sp)
   52564:	d8802915 	stw	r2,164(sp)
   52568:	dc802c17 	ldw	r18,176(sp)
   5256c:	d8002a15 	stw	zero,168(sp)
   52570:	07000b44 	movi	fp,45
   52574:	003a5106 	br	50ebc <__alt_data_end+0xfffd0ebc>
   52578:	9080004c 	andi	r2,r18,1
   5257c:	1000941e 	bne	r2,zero,527d0 <___svfprintf_internal_r+0x201c>
   52580:	d8802117 	ldw	r2,132(sp)
   52584:	1405c83a 	sub	r2,r2,r16
   52588:	d8803315 	stw	r2,204(sp)
   5258c:	b441151e 	bne	r22,r17,529e4 <___svfprintf_internal_r+0x2230>
   52590:	dd802617 	ldw	r22,152(sp)
   52594:	00bfff44 	movi	r2,-3
   52598:	b0801a16 	blt	r22,r2,52604 <___svfprintf_internal_r+0x1e50>
   5259c:	d9402a17 	ldw	r5,168(sp)
   525a0:	2d801816 	blt	r5,r22,52604 <___svfprintf_internal_r+0x1e50>
   525a4:	dd803215 	stw	r22,200(sp)
   525a8:	003f3a06 	br	52294 <__alt_data_end+0xfffd2294>
   525ac:	1025883a 	mov	r18,r2
   525b0:	0039883a 	mov	fp,zero
   525b4:	00800084 	movi	r2,2
   525b8:	003fd606 	br	52514 <__alt_data_end+0xfffd2514>
   525bc:	9080004c 	andi	r2,r18,1
   525c0:	103f191e 	bne	r2,zero,52228 <__alt_data_end+0xfffd2228>
   525c4:	d8802117 	ldw	r2,132(sp)
   525c8:	003f2806 	br	5226c <__alt_data_end+0xfffd226c>
   525cc:	010001f4 	movhi	r4,7
   525d0:	212e8084 	addi	r4,r4,-17918
   525d4:	d9002c15 	stw	r4,176(sp)
   525d8:	003c7c06 	br	517cc <__alt_data_end+0xfffd17cc>
   525dc:	e005883a 	mov	r2,fp
   525e0:	003f2206 	br	5226c <__alt_data_end+0xfffd226c>
   525e4:	d9002a17 	ldw	r4,168(sp)
   525e8:	df002783 	ldbu	fp,158(sp)
   525ec:	dd002e15 	stw	r20,184(sp)
   525f0:	d9002915 	stw	r4,164(sp)
   525f4:	d9002b15 	stw	r4,172(sp)
   525f8:	d8002a15 	stw	zero,168(sp)
   525fc:	d8003215 	stw	zero,200(sp)
   52600:	003a2a06 	br	50eac <__alt_data_end+0xfffd0eac>
   52604:	8c7fff84 	addi	r17,r17,-2
   52608:	b5bfffc4 	addi	r22,r22,-1
   5260c:	dd802615 	stw	r22,152(sp)
   52610:	dc4022c5 	stb	r17,139(sp)
   52614:	b000c316 	blt	r22,zero,52924 <___svfprintf_internal_r+0x2170>
   52618:	00800ac4 	movi	r2,43
   5261c:	d8802305 	stb	r2,140(sp)
   52620:	00800244 	movi	r2,9
   52624:	15806e16 	blt	r2,r22,527e0 <___svfprintf_internal_r+0x202c>
   52628:	00800c04 	movi	r2,48
   5262c:	b5800c04 	addi	r22,r22,48
   52630:	d8802345 	stb	r2,141(sp)
   52634:	dd802385 	stb	r22,142(sp)
   52638:	d88023c4 	addi	r2,sp,143
   5263c:	df0022c4 	addi	fp,sp,139
   52640:	d8c03317 	ldw	r3,204(sp)
   52644:	1739c83a 	sub	fp,r2,fp
   52648:	d9003317 	ldw	r4,204(sp)
   5264c:	e0c7883a 	add	r3,fp,r3
   52650:	df003b15 	stw	fp,236(sp)
   52654:	d8c02b15 	stw	r3,172(sp)
   52658:	00800044 	movi	r2,1
   5265c:	1100b70e 	bge	r2,r4,5293c <___svfprintf_internal_r+0x2188>
   52660:	d8c02b17 	ldw	r3,172(sp)
   52664:	18c00044 	addi	r3,r3,1
   52668:	d8c02b15 	stw	r3,172(sp)
   5266c:	1805883a 	mov	r2,r3
   52670:	1800b016 	blt	r3,zero,52934 <___svfprintf_internal_r+0x2180>
   52674:	d8003215 	stw	zero,200(sp)
   52678:	003f1006 	br	522bc <__alt_data_end+0xfffd22bc>
   5267c:	d8802a17 	ldw	r2,168(sp)
   52680:	103ec71e 	bne	r2,zero,521a0 <__alt_data_end+0xfffd21a0>
   52684:	dc002a15 	stw	r16,168(sp)
   52688:	003ec506 	br	521a0 <__alt_data_end+0xfffd21a0>
   5268c:	d9402d17 	ldw	r5,180(sp)
   52690:	d9801e04 	addi	r6,sp,120
   52694:	9809883a 	mov	r4,r19
   52698:	00597180 	call	59718 <__ssprint_r>
   5269c:	10392c1e 	bne	r2,zero,50b50 <__alt_data_end+0xfffd0b50>
   526a0:	dc402617 	ldw	r17,152(sp)
   526a4:	d8c02017 	ldw	r3,128(sp)
   526a8:	d8801f17 	ldw	r2,124(sp)
   526ac:	da000404 	addi	r8,sp,16
   526b0:	003e7706 	br	52090 <__alt_data_end+0xfffd2090>
   526b4:	182f883a 	mov	r23,r3
   526b8:	d8002a15 	stw	zero,168(sp)
   526bc:	00389306 	br	5090c <__alt_data_end+0xfffd090c>
   526c0:	d8c02a17 	ldw	r3,168(sp)
   526c4:	d8802104 	addi	r2,sp,132
   526c8:	d8800315 	stw	r2,12(sp)
   526cc:	d9403617 	ldw	r5,216(sp)
   526d0:	d8802504 	addi	r2,sp,148
   526d4:	d8800215 	stw	r2,8(sp)
   526d8:	d8802604 	addi	r2,sp,152
   526dc:	d8c00015 	stw	r3,0(sp)
   526e0:	9809883a 	mov	r4,r19
   526e4:	d8800115 	stw	r2,4(sp)
   526e8:	01c000c4 	movi	r7,3
   526ec:	a00d883a 	mov	r6,r20
   526f0:	da003e15 	stw	r8,248(sp)
   526f4:	00551a80 	call	551a8 <_dtoa_r>
   526f8:	d9002a17 	ldw	r4,168(sp)
   526fc:	da003e17 	ldw	r8,248(sp)
   52700:	1021883a 	mov	r16,r2
   52704:	1139883a 	add	fp,r2,r4
   52708:	2007883a 	mov	r3,r4
   5270c:	81000007 	ldb	r4,0(r16)
   52710:	00800c04 	movi	r2,48
   52714:	20806f26 	beq	r4,r2,528d4 <___svfprintf_internal_r+0x2120>
   52718:	d8c02617 	ldw	r3,152(sp)
   5271c:	e0f9883a 	add	fp,fp,r3
   52720:	003ec206 	br	5222c <__alt_data_end+0xfffd222c>
   52724:	00c00b44 	movi	r3,45
   52728:	2520003c 	xorhi	r20,r4,32768
   5272c:	d8c02905 	stb	r3,164(sp)
   52730:	003ea106 	br	521b8 <__alt_data_end+0xfffd21b8>
   52734:	d8c03217 	ldw	r3,200(sp)
   52738:	00c0890e 	bge	zero,r3,52960 <___svfprintf_internal_r+0x21ac>
   5273c:	00800044 	movi	r2,1
   52740:	d9003317 	ldw	r4,204(sp)
   52744:	1105883a 	add	r2,r2,r4
   52748:	d8802b15 	stw	r2,172(sp)
   5274c:	10005f16 	blt	r2,zero,528cc <___svfprintf_internal_r+0x2118>
   52750:	044019c4 	movi	r17,103
   52754:	003ed906 	br	522bc <__alt_data_end+0xfffd22bc>
   52758:	d9002a17 	ldw	r4,168(sp)
   5275c:	20c00044 	addi	r3,r4,1
   52760:	003e9c06 	br	521d4 <__alt_data_end+0xfffd21d4>
   52764:	d9002a17 	ldw	r4,168(sp)
   52768:	00c0680e 	bge	zero,r3,5290c <___svfprintf_internal_r+0x2158>
   5276c:	2000461e 	bne	r4,zero,52888 <___svfprintf_internal_r+0x20d4>
   52770:	9480004c 	andi	r18,r18,1
   52774:	9000441e 	bne	r18,zero,52888 <___svfprintf_internal_r+0x20d4>
   52778:	1805883a 	mov	r2,r3
   5277c:	1800a116 	blt	r3,zero,52a04 <___svfprintf_internal_r+0x2250>
   52780:	d8c03217 	ldw	r3,200(sp)
   52784:	d8c02b15 	stw	r3,172(sp)
   52788:	003ecc06 	br	522bc <__alt_data_end+0xfffd22bc>
   5278c:	d9402a17 	ldw	r5,168(sp)
   52790:	d8802104 	addi	r2,sp,132
   52794:	d8800315 	stw	r2,12(sp)
   52798:	d9400015 	stw	r5,0(sp)
   5279c:	d8802504 	addi	r2,sp,148
   527a0:	d9403617 	ldw	r5,216(sp)
   527a4:	d8800215 	stw	r2,8(sp)
   527a8:	d8802604 	addi	r2,sp,152
   527ac:	d8800115 	stw	r2,4(sp)
   527b0:	01c000c4 	movi	r7,3
   527b4:	a00d883a 	mov	r6,r20
   527b8:	9809883a 	mov	r4,r19
   527bc:	da003e15 	stw	r8,248(sp)
   527c0:	00551a80 	call	551a8 <_dtoa_r>
   527c4:	d8c02a17 	ldw	r3,168(sp)
   527c8:	da003e17 	ldw	r8,248(sp)
   527cc:	1021883a 	mov	r16,r2
   527d0:	00801184 	movi	r2,70
   527d4:	80f9883a 	add	fp,r16,r3
   527d8:	88bfcc26 	beq	r17,r2,5270c <__alt_data_end+0xfffd270c>
   527dc:	003e9306 	br	5222c <__alt_data_end+0xfffd222c>
   527e0:	df0022c4 	addi	fp,sp,139
   527e4:	dc002a15 	stw	r16,168(sp)
   527e8:	9829883a 	mov	r20,r19
   527ec:	e021883a 	mov	r16,fp
   527f0:	4027883a 	mov	r19,r8
   527f4:	b009883a 	mov	r4,r22
   527f8:	01400284 	movi	r5,10
   527fc:	004d9840 	call	4d984 <__modsi3>
   52800:	10800c04 	addi	r2,r2,48
   52804:	843fffc4 	addi	r16,r16,-1
   52808:	b009883a 	mov	r4,r22
   5280c:	01400284 	movi	r5,10
   52810:	80800005 	stb	r2,0(r16)
   52814:	004d9000 	call	4d900 <__divsi3>
   52818:	102d883a 	mov	r22,r2
   5281c:	00800244 	movi	r2,9
   52820:	15bff416 	blt	r2,r22,527f4 <__alt_data_end+0xfffd27f4>
   52824:	9811883a 	mov	r8,r19
   52828:	b0800c04 	addi	r2,r22,48
   5282c:	a027883a 	mov	r19,r20
   52830:	8029883a 	mov	r20,r16
   52834:	a17fffc4 	addi	r5,r20,-1
   52838:	a0bfffc5 	stb	r2,-1(r20)
   5283c:	dc002a17 	ldw	r16,168(sp)
   52840:	2f00782e 	bgeu	r5,fp,52a24 <___svfprintf_internal_r+0x2270>
   52844:	d9c02384 	addi	r7,sp,142
   52848:	3d0fc83a 	sub	r7,r7,r20
   5284c:	d9002344 	addi	r4,sp,141
   52850:	e1cf883a 	add	r7,fp,r7
   52854:	00000106 	br	5285c <___svfprintf_internal_r+0x20a8>
   52858:	28800003 	ldbu	r2,0(r5)
   5285c:	20800005 	stb	r2,0(r4)
   52860:	21000044 	addi	r4,r4,1
   52864:	29400044 	addi	r5,r5,1
   52868:	21fffb1e 	bne	r4,r7,52858 <__alt_data_end+0xfffd2858>
   5286c:	d8802304 	addi	r2,sp,140
   52870:	1505c83a 	sub	r2,r2,r20
   52874:	d8c02344 	addi	r3,sp,141
   52878:	1885883a 	add	r2,r3,r2
   5287c:	003f7006 	br	52640 <__alt_data_end+0xfffd2640>
   52880:	0005883a 	mov	r2,zero
   52884:	003f0b06 	br	524b4 <__alt_data_end+0xfffd24b4>
   52888:	d9002a17 	ldw	r4,168(sp)
   5288c:	d8c03217 	ldw	r3,200(sp)
   52890:	20800044 	addi	r2,r4,1
   52894:	1885883a 	add	r2,r3,r2
   52898:	d8802b15 	stw	r2,172(sp)
   5289c:	103e870e 	bge	r2,zero,522bc <__alt_data_end+0xfffd22bc>
   528a0:	0005883a 	mov	r2,zero
   528a4:	003e8506 	br	522bc <__alt_data_end+0xfffd22bc>
   528a8:	010001f4 	movhi	r4,7
   528ac:	212e8084 	addi	r4,r4,-17918
   528b0:	d9002c15 	stw	r4,176(sp)
   528b4:	003cc506 	br	51bcc <__alt_data_end+0xfffd1bcc>
   528b8:	d8c03217 	ldw	r3,200(sp)
   528bc:	18c00044 	addi	r3,r3,1
   528c0:	d8c02b15 	stw	r3,172(sp)
   528c4:	1805883a 	mov	r2,r3
   528c8:	183fa10e 	bge	r3,zero,52750 <__alt_data_end+0xfffd2750>
   528cc:	0005883a 	mov	r2,zero
   528d0:	003f9f06 	br	52750 <__alt_data_end+0xfffd2750>
   528d4:	d9003617 	ldw	r4,216(sp)
   528d8:	000d883a 	mov	r6,zero
   528dc:	000f883a 	mov	r7,zero
   528e0:	a00b883a 	mov	r5,r20
   528e4:	d8c03d15 	stw	r3,244(sp)
   528e8:	da003e15 	stw	r8,248(sp)
   528ec:	005eb080 	call	5eb08 <__eqdf2>
   528f0:	d8c03d17 	ldw	r3,244(sp)
   528f4:	da003e17 	ldw	r8,248(sp)
   528f8:	103f8726 	beq	r2,zero,52718 <__alt_data_end+0xfffd2718>
   528fc:	00800044 	movi	r2,1
   52900:	10c7c83a 	sub	r3,r2,r3
   52904:	d8c02615 	stw	r3,152(sp)
   52908:	003f8406 	br	5271c <__alt_data_end+0xfffd271c>
   5290c:	20000e1e 	bne	r4,zero,52948 <___svfprintf_internal_r+0x2194>
   52910:	9480004c 	andi	r18,r18,1
   52914:	90000c1e 	bne	r18,zero,52948 <___svfprintf_internal_r+0x2194>
   52918:	00800044 	movi	r2,1
   5291c:	d8802b15 	stw	r2,172(sp)
   52920:	003e6606 	br	522bc <__alt_data_end+0xfffd22bc>
   52924:	00800b44 	movi	r2,45
   52928:	05adc83a 	sub	r22,zero,r22
   5292c:	d8802305 	stb	r2,140(sp)
   52930:	003f3b06 	br	52620 <__alt_data_end+0xfffd2620>
   52934:	0005883a 	mov	r2,zero
   52938:	003f4e06 	br	52674 <__alt_data_end+0xfffd2674>
   5293c:	90a4703a 	and	r18,r18,r2
   52940:	903f4a26 	beq	r18,zero,5266c <__alt_data_end+0xfffd266c>
   52944:	003f4606 	br	52660 <__alt_data_end+0xfffd2660>
   52948:	d8c02a17 	ldw	r3,168(sp)
   5294c:	18c00084 	addi	r3,r3,2
   52950:	d8c02b15 	stw	r3,172(sp)
   52954:	1805883a 	mov	r2,r3
   52958:	183e580e 	bge	r3,zero,522bc <__alt_data_end+0xfffd22bc>
   5295c:	003fd006 	br	528a0 <__alt_data_end+0xfffd28a0>
   52960:	00800084 	movi	r2,2
   52964:	10c5c83a 	sub	r2,r2,r3
   52968:	003f7506 	br	52740 <__alt_data_end+0xfffd2740>
   5296c:	d9402e17 	ldw	r5,184(sp)
   52970:	d9002e17 	ldw	r4,184(sp)
   52974:	bc400043 	ldbu	r17,1(r23)
   52978:	29400017 	ldw	r5,0(r5)
   5297c:	20800104 	addi	r2,r4,4
   52980:	d8802e15 	stw	r2,184(sp)
   52984:	d9402a15 	stw	r5,168(sp)
   52988:	182f883a 	mov	r23,r3
   5298c:	283df10e 	bge	r5,zero,52154 <__alt_data_end+0xfffd2154>
   52990:	8c403fcc 	andi	r17,r17,255
   52994:	017fffc4 	movi	r5,-1
   52998:	8c40201c 	xori	r17,r17,128
   5299c:	d9402a15 	stw	r5,168(sp)
   529a0:	8c7fe004 	addi	r17,r17,-128
   529a4:	0037d806 	br	50908 <__alt_data_end+0xfffd0908>
   529a8:	9080004c 	andi	r2,r18,1
   529ac:	0039883a 	mov	fp,zero
   529b0:	10000726 	beq	r2,zero,529d0 <___svfprintf_internal_r+0x221c>
   529b4:	d8c02817 	ldw	r3,160(sp)
   529b8:	dc001dc4 	addi	r16,sp,119
   529bc:	00800c04 	movi	r2,48
   529c0:	1c07c83a 	sub	r3,r3,r16
   529c4:	d8801dc5 	stb	r2,119(sp)
   529c8:	d8c02b15 	stw	r3,172(sp)
   529cc:	00393106 	br	50e94 <__alt_data_end+0xfffd0e94>
   529d0:	d8002b15 	stw	zero,172(sp)
   529d4:	dc001e04 	addi	r16,sp,120
   529d8:	00392e06 	br	50e94 <__alt_data_end+0xfffd0e94>
   529dc:	0005883a 	mov	r2,zero
   529e0:	003e3306 	br	522b0 <__alt_data_end+0xfffd22b0>
   529e4:	dd802617 	ldw	r22,152(sp)
   529e8:	003f0706 	br	52608 <__alt_data_end+0xfffd2608>
   529ec:	d8c02b03 	ldbu	r3,172(sp)
   529f0:	d8c02785 	stb	r3,158(sp)
   529f4:	003a3506 	br	512cc <__alt_data_end+0xfffd12cc>
   529f8:	d8c02b03 	ldbu	r3,172(sp)
   529fc:	d8c02785 	stb	r3,158(sp)
   52a00:	003a1706 	br	51260 <__alt_data_end+0xfffd1260>
   52a04:	0005883a 	mov	r2,zero
   52a08:	003f5d06 	br	52780 <__alt_data_end+0xfffd2780>
   52a0c:	d8c02b03 	ldbu	r3,172(sp)
   52a10:	d8c02785 	stb	r3,158(sp)
   52a14:	0038f306 	br	50de4 <__alt_data_end+0xfffd0de4>
   52a18:	d8c02b03 	ldbu	r3,172(sp)
   52a1c:	d8c02785 	stb	r3,158(sp)
   52a20:	0038be06 	br	50d1c <__alt_data_end+0xfffd0d1c>
   52a24:	d8802344 	addi	r2,sp,141
   52a28:	003f0506 	br	52640 <__alt_data_end+0xfffd2640>
   52a2c:	d8c02b03 	ldbu	r3,172(sp)
   52a30:	d8c02785 	stb	r3,158(sp)
   52a34:	00388b06 	br	50c64 <__alt_data_end+0xfffd0c64>
   52a38:	d8c02b03 	ldbu	r3,172(sp)
   52a3c:	d8c02785 	stb	r3,158(sp)
   52a40:	003ad706 	br	515a0 <__alt_data_end+0xfffd15a0>
   52a44:	d9403917 	ldw	r5,228(sp)
   52a48:	00800304 	movi	r2,12
   52a4c:	28800015 	stw	r2,0(r5)
   52a50:	00bfffc4 	movi	r2,-1
   52a54:	00384306 	br	50b64 <__alt_data_end+0xfffd0b64>
   52a58:	d8c02b03 	ldbu	r3,172(sp)
   52a5c:	d8c02785 	stb	r3,158(sp)
   52a60:	003ab606 	br	5153c <__alt_data_end+0xfffd153c>
   52a64:	d8c02b03 	ldbu	r3,172(sp)
   52a68:	d8c02785 	stb	r3,158(sp)
   52a6c:	003a8906 	br	51494 <__alt_data_end+0xfffd1494>

00052a70 <_times_r>:
   52a70:	2809883a 	mov	r4,r5
   52a74:	0060b201 	jmpi	60b20 <times>

00052a78 <___vfprintf_internal_r>:
   52a78:	deffb804 	addi	sp,sp,-288
   52a7c:	dfc04715 	stw	ra,284(sp)
   52a80:	ddc04515 	stw	r23,276(sp)
   52a84:	dd404315 	stw	r21,268(sp)
   52a88:	d9002d15 	stw	r4,180(sp)
   52a8c:	282f883a 	mov	r23,r5
   52a90:	302b883a 	mov	r21,r6
   52a94:	d9c02e15 	stw	r7,184(sp)
   52a98:	df004615 	stw	fp,280(sp)
   52a9c:	dd804415 	stw	r22,272(sp)
   52aa0:	dd004215 	stw	r20,264(sp)
   52aa4:	dcc04115 	stw	r19,260(sp)
   52aa8:	dc804015 	stw	r18,256(sp)
   52aac:	dc403f15 	stw	r17,252(sp)
   52ab0:	dc003e15 	stw	r16,248(sp)
   52ab4:	00579b80 	call	579b8 <_localeconv_r>
   52ab8:	10800017 	ldw	r2,0(r2)
   52abc:	1009883a 	mov	r4,r2
   52ac0:	d8803415 	stw	r2,208(sp)
   52ac4:	005071c0 	call	5071c <strlen>
   52ac8:	d8803715 	stw	r2,220(sp)
   52acc:	d8802d17 	ldw	r2,180(sp)
   52ad0:	10000226 	beq	r2,zero,52adc <___vfprintf_internal_r+0x64>
   52ad4:	10800e17 	ldw	r2,56(r2)
   52ad8:	1000fb26 	beq	r2,zero,52ec8 <___vfprintf_internal_r+0x450>
   52adc:	b880030b 	ldhu	r2,12(r23)
   52ae0:	10c8000c 	andi	r3,r2,8192
   52ae4:	1800061e 	bne	r3,zero,52b00 <___vfprintf_internal_r+0x88>
   52ae8:	b9001917 	ldw	r4,100(r23)
   52aec:	00f7ffc4 	movi	r3,-8193
   52af0:	10880014 	ori	r2,r2,8192
   52af4:	20c6703a 	and	r3,r4,r3
   52af8:	b880030d 	sth	r2,12(r23)
   52afc:	b8c01915 	stw	r3,100(r23)
   52b00:	10c0020c 	andi	r3,r2,8
   52b04:	1800c326 	beq	r3,zero,52e14 <___vfprintf_internal_r+0x39c>
   52b08:	b8c00417 	ldw	r3,16(r23)
   52b0c:	1800c126 	beq	r3,zero,52e14 <___vfprintf_internal_r+0x39c>
   52b10:	1080068c 	andi	r2,r2,26
   52b14:	00c00284 	movi	r3,10
   52b18:	10c0c626 	beq	r2,r3,52e34 <___vfprintf_internal_r+0x3bc>
   52b1c:	d8c00404 	addi	r3,sp,16
   52b20:	050001f4 	movhi	r20,7
   52b24:	d9001e04 	addi	r4,sp,120
   52b28:	a52e8884 	addi	r20,r20,-17886
   52b2c:	d8c01e15 	stw	r3,120(sp)
   52b30:	d8002015 	stw	zero,128(sp)
   52b34:	d8001f15 	stw	zero,124(sp)
   52b38:	d8003315 	stw	zero,204(sp)
   52b3c:	d8003615 	stw	zero,216(sp)
   52b40:	d8003815 	stw	zero,224(sp)
   52b44:	1811883a 	mov	r8,r3
   52b48:	d8003915 	stw	zero,228(sp)
   52b4c:	d8003a15 	stw	zero,232(sp)
   52b50:	d8002f15 	stw	zero,188(sp)
   52b54:	d9002815 	stw	r4,160(sp)
   52b58:	a8800007 	ldb	r2,0(r21)
   52b5c:	10028b26 	beq	r2,zero,5358c <___vfprintf_internal_r+0xb14>
   52b60:	00c00944 	movi	r3,37
   52b64:	a823883a 	mov	r17,r21
   52b68:	10c0021e 	bne	r2,r3,52b74 <___vfprintf_internal_r+0xfc>
   52b6c:	00001406 	br	52bc0 <___vfprintf_internal_r+0x148>
   52b70:	10c00326 	beq	r2,r3,52b80 <___vfprintf_internal_r+0x108>
   52b74:	8c400044 	addi	r17,r17,1
   52b78:	88800007 	ldb	r2,0(r17)
   52b7c:	103ffc1e 	bne	r2,zero,52b70 <__alt_data_end+0xfffd2b70>
   52b80:	8d61c83a 	sub	r16,r17,r21
   52b84:	80000e26 	beq	r16,zero,52bc0 <___vfprintf_internal_r+0x148>
   52b88:	d8c02017 	ldw	r3,128(sp)
   52b8c:	d8801f17 	ldw	r2,124(sp)
   52b90:	45400015 	stw	r21,0(r8)
   52b94:	1c07883a 	add	r3,r3,r16
   52b98:	10800044 	addi	r2,r2,1
   52b9c:	d8c02015 	stw	r3,128(sp)
   52ba0:	44000115 	stw	r16,4(r8)
   52ba4:	d8801f15 	stw	r2,124(sp)
   52ba8:	00c001c4 	movi	r3,7
   52bac:	1880a916 	blt	r3,r2,52e54 <___vfprintf_internal_r+0x3dc>
   52bb0:	42000204 	addi	r8,r8,8
   52bb4:	d9402f17 	ldw	r5,188(sp)
   52bb8:	2c0b883a 	add	r5,r5,r16
   52bbc:	d9402f15 	stw	r5,188(sp)
   52bc0:	88800007 	ldb	r2,0(r17)
   52bc4:	1000aa26 	beq	r2,zero,52e70 <___vfprintf_internal_r+0x3f8>
   52bc8:	8d400044 	addi	r21,r17,1
   52bcc:	8c400047 	ldb	r17,1(r17)
   52bd0:	0021883a 	mov	r16,zero
   52bd4:	00bfffc4 	movi	r2,-1
   52bd8:	0025883a 	mov	r18,zero
   52bdc:	dc002905 	stb	r16,164(sp)
   52be0:	d8002785 	stb	zero,158(sp)
   52be4:	d8002b05 	stb	zero,172(sp)
   52be8:	d8802a15 	stw	r2,168(sp)
   52bec:	d8003115 	stw	zero,196(sp)
   52bf0:	04c01604 	movi	r19,88
   52bf4:	05800244 	movi	r22,9
   52bf8:	9021883a 	mov	r16,r18
   52bfc:	4039883a 	mov	fp,r8
   52c00:	ad400044 	addi	r21,r21,1
   52c04:	88bff804 	addi	r2,r17,-32
   52c08:	98833236 	bltu	r19,r2,538d4 <___vfprintf_internal_r+0xe5c>
   52c0c:	100490ba 	slli	r2,r2,2
   52c10:	00c00174 	movhi	r3,5
   52c14:	18cb0904 	addi	r3,r3,11300
   52c18:	10c5883a 	add	r2,r2,r3
   52c1c:	10800017 	ldw	r2,0(r2)
   52c20:	1000683a 	jmp	r2
   52c24:	000537cc 	andi	zero,zero,5343
   52c28:	000538d4 	movui	zero,5347
   52c2c:	000538d4 	movui	zero,5347
   52c30:	000537ec 	andhi	zero,zero,5343
   52c34:	000538d4 	movui	zero,5347
   52c38:	000538d4 	movui	zero,5347
   52c3c:	000538d4 	movui	zero,5347
   52c40:	000538d4 	movui	zero,5347
   52c44:	000538d4 	movui	zero,5347
   52c48:	000538d4 	movui	zero,5347
   52c4c:	00052ed4 	movui	zero,5307
   52c50:	000536dc 	xori	zero,zero,5339
   52c54:	000538d4 	movui	zero,5347
   52c58:	00052d98 	cmpnei	zero,zero,5302
   52c5c:	00052ef8 	rdprs	zero,zero,5307
   52c60:	000538d4 	movui	zero,5347
   52c64:	00052f48 	cmpgei	zero,zero,5309
   52c68:	00052f54 	movui	zero,5309
   52c6c:	00052f54 	movui	zero,5309
   52c70:	00052f54 	movui	zero,5309
   52c74:	00052f54 	movui	zero,5309
   52c78:	00052f54 	movui	zero,5309
   52c7c:	00052f54 	movui	zero,5309
   52c80:	00052f54 	movui	zero,5309
   52c84:	00052f54 	movui	zero,5309
   52c88:	00052f54 	movui	zero,5309
   52c8c:	000538d4 	movui	zero,5347
   52c90:	000538d4 	movui	zero,5347
   52c94:	000538d4 	movui	zero,5347
   52c98:	000538d4 	movui	zero,5347
   52c9c:	000538d4 	movui	zero,5347
   52ca0:	000538d4 	movui	zero,5347
   52ca4:	000538d4 	movui	zero,5347
   52ca8:	000538d4 	movui	zero,5347
   52cac:	000538d4 	movui	zero,5347
   52cb0:	000538d4 	movui	zero,5347
   52cb4:	00052f90 	cmplti	zero,zero,5310
   52cb8:	00053058 	cmpnei	zero,zero,5313
   52cbc:	000538d4 	movui	zero,5347
   52cc0:	00053058 	cmpnei	zero,zero,5313
   52cc4:	000538d4 	movui	zero,5347
   52cc8:	000538d4 	movui	zero,5347
   52ccc:	000538d4 	movui	zero,5347
   52cd0:	000538d4 	movui	zero,5347
   52cd4:	00053104 	movi	zero,5316
   52cd8:	000538d4 	movui	zero,5347
   52cdc:	000538d4 	movui	zero,5347
   52ce0:	00053110 	cmplti	zero,zero,5316
   52ce4:	000538d4 	movui	zero,5347
   52ce8:	000538d4 	movui	zero,5347
   52cec:	000538d4 	movui	zero,5347
   52cf0:	000538d4 	movui	zero,5347
   52cf4:	000538d4 	movui	zero,5347
   52cf8:	00053594 	movui	zero,5334
   52cfc:	000538d4 	movui	zero,5347
   52d00:	000538d4 	movui	zero,5347
   52d04:	00053600 	call	5360 <__alt_mem_onchip_memory2_0-0x3aca0>
   52d08:	000538d4 	movui	zero,5347
   52d0c:	000538d4 	movui	zero,5347
   52d10:	000538d4 	movui	zero,5347
   52d14:	000538d4 	movui	zero,5347
   52d18:	000538d4 	movui	zero,5347
   52d1c:	000538d4 	movui	zero,5347
   52d20:	000538d4 	movui	zero,5347
   52d24:	000538d4 	movui	zero,5347
   52d28:	000538d4 	movui	zero,5347
   52d2c:	000538d4 	movui	zero,5347
   52d30:	00053878 	rdprs	zero,zero,5345
   52d34:	000537f8 	rdprs	zero,zero,5343
   52d38:	00053058 	cmpnei	zero,zero,5313
   52d3c:	00053058 	cmpnei	zero,zero,5313
   52d40:	00053058 	cmpnei	zero,zero,5313
   52d44:	00053818 	cmpnei	zero,zero,5344
   52d48:	000537f8 	rdprs	zero,zero,5343
   52d4c:	000538d4 	movui	zero,5347
   52d50:	000538d4 	movui	zero,5347
   52d54:	00053824 	muli	zero,zero,5344
   52d58:	000538d4 	movui	zero,5347
   52d5c:	00053838 	rdprs	zero,zero,5344
   52d60:	000536bc 	xorhi	zero,zero,5338
   52d64:	00052da4 	muli	zero,zero,5302
   52d68:	000536f4 	movhi	zero,5339
   52d6c:	000538d4 	movui	zero,5347
   52d70:	00053700 	call	5370 <__alt_mem_onchip_memory2_0-0x3ac90>
   52d74:	000538d4 	movui	zero,5347
   52d78:	00053764 	muli	zero,zero,5341
   52d7c:	000538d4 	movui	zero,5347
   52d80:	000538d4 	movui	zero,5347
   52d84:	00053784 	movi	zero,5342
   52d88:	d8c03117 	ldw	r3,196(sp)
   52d8c:	d8802e15 	stw	r2,184(sp)
   52d90:	00c7c83a 	sub	r3,zero,r3
   52d94:	d8c03115 	stw	r3,196(sp)
   52d98:	84000114 	ori	r16,r16,4
   52d9c:	ac400007 	ldb	r17,0(r21)
   52da0:	003f9706 	br	52c00 <__alt_data_end+0xfffd2c00>
   52da4:	00800c04 	movi	r2,48
   52da8:	d8802705 	stb	r2,156(sp)
   52dac:	00801e04 	movi	r2,120
   52db0:	d8802745 	stb	r2,157(sp)
   52db4:	d9002a17 	ldw	r4,168(sp)
   52db8:	d8802e17 	ldw	r2,184(sp)
   52dbc:	d8002785 	stb	zero,158(sp)
   52dc0:	e011883a 	mov	r8,fp
   52dc4:	10c00104 	addi	r3,r2,4
   52dc8:	14c00017 	ldw	r19,0(r2)
   52dcc:	002d883a 	mov	r22,zero
   52dd0:	80800094 	ori	r2,r16,2
   52dd4:	2002ca16 	blt	r4,zero,53900 <___vfprintf_internal_r+0xe88>
   52dd8:	00bfdfc4 	movi	r2,-129
   52ddc:	80a4703a 	and	r18,r16,r2
   52de0:	d8c02e15 	stw	r3,184(sp)
   52de4:	94800094 	ori	r18,r18,2
   52de8:	9802b41e 	bne	r19,zero,538bc <___vfprintf_internal_r+0xe44>
   52dec:	014001f4 	movhi	r5,7
   52df0:	296e7904 	addi	r5,r5,-17948
   52df4:	d9403915 	stw	r5,228(sp)
   52df8:	04401e04 	movi	r17,120
   52dfc:	d8802a17 	ldw	r2,168(sp)
   52e00:	0039883a 	mov	fp,zero
   52e04:	1001fa26 	beq	r2,zero,535f0 <___vfprintf_internal_r+0xb78>
   52e08:	0027883a 	mov	r19,zero
   52e0c:	002d883a 	mov	r22,zero
   52e10:	00021906 	br	53678 <___vfprintf_internal_r+0xc00>
   52e14:	d9002d17 	ldw	r4,180(sp)
   52e18:	b80b883a 	mov	r5,r23
   52e1c:	0054e2c0 	call	54e2c <__swsetup_r>
   52e20:	1005dc1e 	bne	r2,zero,54594 <___vfprintf_internal_r+0x1b1c>
   52e24:	b880030b 	ldhu	r2,12(r23)
   52e28:	00c00284 	movi	r3,10
   52e2c:	1080068c 	andi	r2,r2,26
   52e30:	10ff3a1e 	bne	r2,r3,52b1c <__alt_data_end+0xfffd2b1c>
   52e34:	b880038f 	ldh	r2,14(r23)
   52e38:	103f3816 	blt	r2,zero,52b1c <__alt_data_end+0xfffd2b1c>
   52e3c:	d9c02e17 	ldw	r7,184(sp)
   52e40:	d9002d17 	ldw	r4,180(sp)
   52e44:	a80d883a 	mov	r6,r21
   52e48:	b80b883a 	mov	r5,r23
   52e4c:	0054d700 	call	54d70 <__sbprintf>
   52e50:	00001106 	br	52e98 <___vfprintf_internal_r+0x420>
   52e54:	d9002d17 	ldw	r4,180(sp)
   52e58:	d9801e04 	addi	r6,sp,120
   52e5c:	b80b883a 	mov	r5,r23
   52e60:	005ad840 	call	5ad84 <__sprint_r>
   52e64:	1000081e 	bne	r2,zero,52e88 <___vfprintf_internal_r+0x410>
   52e68:	da000404 	addi	r8,sp,16
   52e6c:	003f5106 	br	52bb4 <__alt_data_end+0xfffd2bb4>
   52e70:	d8802017 	ldw	r2,128(sp)
   52e74:	10000426 	beq	r2,zero,52e88 <___vfprintf_internal_r+0x410>
   52e78:	d9002d17 	ldw	r4,180(sp)
   52e7c:	d9801e04 	addi	r6,sp,120
   52e80:	b80b883a 	mov	r5,r23
   52e84:	005ad840 	call	5ad84 <__sprint_r>
   52e88:	b880030b 	ldhu	r2,12(r23)
   52e8c:	1080100c 	andi	r2,r2,64
   52e90:	1005c01e 	bne	r2,zero,54594 <___vfprintf_internal_r+0x1b1c>
   52e94:	d8802f17 	ldw	r2,188(sp)
   52e98:	dfc04717 	ldw	ra,284(sp)
   52e9c:	df004617 	ldw	fp,280(sp)
   52ea0:	ddc04517 	ldw	r23,276(sp)
   52ea4:	dd804417 	ldw	r22,272(sp)
   52ea8:	dd404317 	ldw	r21,268(sp)
   52eac:	dd004217 	ldw	r20,264(sp)
   52eb0:	dcc04117 	ldw	r19,260(sp)
   52eb4:	dc804017 	ldw	r18,256(sp)
   52eb8:	dc403f17 	ldw	r17,252(sp)
   52ebc:	dc003e17 	ldw	r16,248(sp)
   52ec0:	dec04804 	addi	sp,sp,288
   52ec4:	f800283a 	ret
   52ec8:	d9002d17 	ldw	r4,180(sp)
   52ecc:	0056e380 	call	56e38 <__sinit>
   52ed0:	003f0206 	br	52adc <__alt_data_end+0xfffd2adc>
   52ed4:	d9002e17 	ldw	r4,184(sp)
   52ed8:	d9402e17 	ldw	r5,184(sp)
   52edc:	21000017 	ldw	r4,0(r4)
   52ee0:	28800104 	addi	r2,r5,4
   52ee4:	d9003115 	stw	r4,196(sp)
   52ee8:	203fa716 	blt	r4,zero,52d88 <__alt_data_end+0xfffd2d88>
   52eec:	d8802e15 	stw	r2,184(sp)
   52ef0:	ac400007 	ldb	r17,0(r21)
   52ef4:	003f4206 	br	52c00 <__alt_data_end+0xfffd2c00>
   52ef8:	ac400007 	ldb	r17,0(r21)
   52efc:	01000a84 	movi	r4,42
   52f00:	a8c00044 	addi	r3,r21,1
   52f04:	89075826 	beq	r17,r4,54c68 <___vfprintf_internal_r+0x21f0>
   52f08:	8cbff404 	addi	r18,r17,-48
   52f0c:	b486ae36 	bltu	r22,r18,549c8 <___vfprintf_internal_r+0x1f50>
   52f10:	0009883a 	mov	r4,zero
   52f14:	1823883a 	mov	r17,r3
   52f18:	01400284 	movi	r5,10
   52f1c:	004dab40 	call	4dab4 <__mulsi3>
   52f20:	88c00007 	ldb	r3,0(r17)
   52f24:	1489883a 	add	r4,r2,r18
   52f28:	8d400044 	addi	r21,r17,1
   52f2c:	1cbff404 	addi	r18,r3,-48
   52f30:	a823883a 	mov	r17,r21
   52f34:	b4bff82e 	bgeu	r22,r18,52f18 <__alt_data_end+0xfffd2f18>
   52f38:	1823883a 	mov	r17,r3
   52f3c:	2005f616 	blt	r4,zero,54718 <___vfprintf_internal_r+0x1ca0>
   52f40:	d9002a15 	stw	r4,168(sp)
   52f44:	003f2f06 	br	52c04 <__alt_data_end+0xfffd2c04>
   52f48:	84002014 	ori	r16,r16,128
   52f4c:	ac400007 	ldb	r17,0(r21)
   52f50:	003f2b06 	br	52c00 <__alt_data_end+0xfffd2c00>
   52f54:	8cbff404 	addi	r18,r17,-48
   52f58:	d8003115 	stw	zero,196(sp)
   52f5c:	0009883a 	mov	r4,zero
   52f60:	a823883a 	mov	r17,r21
   52f64:	01400284 	movi	r5,10
   52f68:	004dab40 	call	4dab4 <__mulsi3>
   52f6c:	88c00007 	ldb	r3,0(r17)
   52f70:	9089883a 	add	r4,r18,r2
   52f74:	ad400044 	addi	r21,r21,1
   52f78:	1cbff404 	addi	r18,r3,-48
   52f7c:	a823883a 	mov	r17,r21
   52f80:	b4bff82e 	bgeu	r22,r18,52f64 <__alt_data_end+0xfffd2f64>
   52f84:	1823883a 	mov	r17,r3
   52f88:	d9003115 	stw	r4,196(sp)
   52f8c:	003f1d06 	br	52c04 <__alt_data_end+0xfffd2c04>
   52f90:	8025883a 	mov	r18,r16
   52f94:	dc002903 	ldbu	r16,164(sp)
   52f98:	e011883a 	mov	r8,fp
   52f9c:	84003fcc 	andi	r16,r16,255
   52fa0:	8007531e 	bne	r16,zero,54cf0 <___vfprintf_internal_r+0x2278>
   52fa4:	94800414 	ori	r18,r18,16
   52fa8:	9080080c 	andi	r2,r18,32
   52fac:	1003a326 	beq	r2,zero,53e3c <___vfprintf_internal_r+0x13c4>
   52fb0:	d9002e17 	ldw	r4,184(sp)
   52fb4:	20800117 	ldw	r2,4(r4)
   52fb8:	24c00017 	ldw	r19,0(r4)
   52fbc:	21000204 	addi	r4,r4,8
   52fc0:	d9002e15 	stw	r4,184(sp)
   52fc4:	102d883a 	mov	r22,r2
   52fc8:	10047316 	blt	r2,zero,54198 <___vfprintf_internal_r+0x1720>
   52fcc:	d9002a17 	ldw	r4,168(sp)
   52fd0:	df002783 	ldbu	fp,158(sp)
   52fd4:	2003e416 	blt	r4,zero,53f68 <___vfprintf_internal_r+0x14f0>
   52fd8:	00ffdfc4 	movi	r3,-129
   52fdc:	9d84b03a 	or	r2,r19,r22
   52fe0:	90e4703a 	and	r18,r18,r3
   52fe4:	10018026 	beq	r2,zero,535e8 <___vfprintf_internal_r+0xb70>
   52fe8:	b003ab26 	beq	r22,zero,53e98 <___vfprintf_internal_r+0x1420>
   52fec:	dc402915 	stw	r17,164(sp)
   52ff0:	dc001e04 	addi	r16,sp,120
   52ff4:	b023883a 	mov	r17,r22
   52ff8:	402d883a 	mov	r22,r8
   52ffc:	9809883a 	mov	r4,r19
   53000:	880b883a 	mov	r5,r17
   53004:	01800284 	movi	r6,10
   53008:	000f883a 	mov	r7,zero
   5300c:	005d2c80 	call	5d2c8 <__umoddi3>
   53010:	10800c04 	addi	r2,r2,48
   53014:	843fffc4 	addi	r16,r16,-1
   53018:	9809883a 	mov	r4,r19
   5301c:	880b883a 	mov	r5,r17
   53020:	80800005 	stb	r2,0(r16)
   53024:	01800284 	movi	r6,10
   53028:	000f883a 	mov	r7,zero
   5302c:	005cccc0 	call	5cccc <__udivdi3>
   53030:	1027883a 	mov	r19,r2
   53034:	10c4b03a 	or	r2,r2,r3
   53038:	1823883a 	mov	r17,r3
   5303c:	103fef1e 	bne	r2,zero,52ffc <__alt_data_end+0xfffd2ffc>
   53040:	d8c02817 	ldw	r3,160(sp)
   53044:	dc402917 	ldw	r17,164(sp)
   53048:	b011883a 	mov	r8,r22
   5304c:	1c07c83a 	sub	r3,r3,r16
   53050:	d8c02b15 	stw	r3,172(sp)
   53054:	00005f06 	br	531d4 <___vfprintf_internal_r+0x75c>
   53058:	8025883a 	mov	r18,r16
   5305c:	dc002903 	ldbu	r16,164(sp)
   53060:	e011883a 	mov	r8,fp
   53064:	84003fcc 	andi	r16,r16,255
   53068:	80071e1e 	bne	r16,zero,54ce4 <___vfprintf_internal_r+0x226c>
   5306c:	9080020c 	andi	r2,r18,8
   53070:	1004af26 	beq	r2,zero,54330 <___vfprintf_internal_r+0x18b8>
   53074:	d9002e17 	ldw	r4,184(sp)
   53078:	d9402e17 	ldw	r5,184(sp)
   5307c:	d8802e17 	ldw	r2,184(sp)
   53080:	21000017 	ldw	r4,0(r4)
   53084:	29400117 	ldw	r5,4(r5)
   53088:	10800204 	addi	r2,r2,8
   5308c:	d9003615 	stw	r4,216(sp)
   53090:	d9403815 	stw	r5,224(sp)
   53094:	d8802e15 	stw	r2,184(sp)
   53098:	d9003617 	ldw	r4,216(sp)
   5309c:	d9403817 	ldw	r5,224(sp)
   530a0:	da003d15 	stw	r8,244(sp)
   530a4:	04000044 	movi	r16,1
   530a8:	00595680 	call	59568 <__fpclassifyd>
   530ac:	da003d17 	ldw	r8,244(sp)
   530b0:	1404441e 	bne	r2,r16,541c4 <___vfprintf_internal_r+0x174c>
   530b4:	d9003617 	ldw	r4,216(sp)
   530b8:	d9403817 	ldw	r5,224(sp)
   530bc:	000d883a 	mov	r6,zero
   530c0:	000f883a 	mov	r7,zero
   530c4:	005ec6c0 	call	5ec6c <__ledf2>
   530c8:	da003d17 	ldw	r8,244(sp)
   530cc:	1005e316 	blt	r2,zero,5485c <___vfprintf_internal_r+0x1de4>
   530d0:	df002783 	ldbu	fp,158(sp)
   530d4:	008011c4 	movi	r2,71
   530d8:	1445580e 	bge	r2,r17,5463c <___vfprintf_internal_r+0x1bc4>
   530dc:	040001f4 	movhi	r16,7
   530e0:	842e7104 	addi	r16,r16,-17980
   530e4:	00c000c4 	movi	r3,3
   530e8:	00bfdfc4 	movi	r2,-129
   530ec:	d8c02915 	stw	r3,164(sp)
   530f0:	90a4703a 	and	r18,r18,r2
   530f4:	d8c02b15 	stw	r3,172(sp)
   530f8:	d8002a15 	stw	zero,168(sp)
   530fc:	d8003215 	stw	zero,200(sp)
   53100:	00003a06 	br	531ec <___vfprintf_internal_r+0x774>
   53104:	84000214 	ori	r16,r16,8
   53108:	ac400007 	ldb	r17,0(r21)
   5310c:	003ebc06 	br	52c00 <__alt_data_end+0xfffd2c00>
   53110:	8025883a 	mov	r18,r16
   53114:	dc002903 	ldbu	r16,164(sp)
   53118:	e011883a 	mov	r8,fp
   5311c:	84003fcc 	andi	r16,r16,255
   53120:	8007001e 	bne	r16,zero,54d24 <___vfprintf_internal_r+0x22ac>
   53124:	94800414 	ori	r18,r18,16
   53128:	9080080c 	andi	r2,r18,32
   5312c:	1002fa26 	beq	r2,zero,53d18 <___vfprintf_internal_r+0x12a0>
   53130:	d9002e17 	ldw	r4,184(sp)
   53134:	d9402a17 	ldw	r5,168(sp)
   53138:	d8002785 	stb	zero,158(sp)
   5313c:	20800204 	addi	r2,r4,8
   53140:	24c00017 	ldw	r19,0(r4)
   53144:	25800117 	ldw	r22,4(r4)
   53148:	2804b116 	blt	r5,zero,54410 <___vfprintf_internal_r+0x1998>
   5314c:	013fdfc4 	movi	r4,-129
   53150:	9d86b03a 	or	r3,r19,r22
   53154:	d8802e15 	stw	r2,184(sp)
   53158:	9124703a 	and	r18,r18,r4
   5315c:	1802fb1e 	bne	r3,zero,53d4c <___vfprintf_internal_r+0x12d4>
   53160:	d8c02a17 	ldw	r3,168(sp)
   53164:	0039883a 	mov	fp,zero
   53168:	1805e526 	beq	r3,zero,54900 <___vfprintf_internal_r+0x1e88>
   5316c:	0027883a 	mov	r19,zero
   53170:	002d883a 	mov	r22,zero
   53174:	dc001e04 	addi	r16,sp,120
   53178:	9806d0fa 	srli	r3,r19,3
   5317c:	b008977a 	slli	r4,r22,29
   53180:	b02cd0fa 	srli	r22,r22,3
   53184:	9cc001cc 	andi	r19,r19,7
   53188:	98800c04 	addi	r2,r19,48
   5318c:	843fffc4 	addi	r16,r16,-1
   53190:	20e6b03a 	or	r19,r4,r3
   53194:	80800005 	stb	r2,0(r16)
   53198:	9d86b03a 	or	r3,r19,r22
   5319c:	183ff61e 	bne	r3,zero,53178 <__alt_data_end+0xfffd3178>
   531a0:	90c0004c 	andi	r3,r18,1
   531a4:	18014126 	beq	r3,zero,536ac <___vfprintf_internal_r+0xc34>
   531a8:	10803fcc 	andi	r2,r2,255
   531ac:	1080201c 	xori	r2,r2,128
   531b0:	10bfe004 	addi	r2,r2,-128
   531b4:	00c00c04 	movi	r3,48
   531b8:	10c13c26 	beq	r2,r3,536ac <___vfprintf_internal_r+0xc34>
   531bc:	80ffffc5 	stb	r3,-1(r16)
   531c0:	d8c02817 	ldw	r3,160(sp)
   531c4:	80bfffc4 	addi	r2,r16,-1
   531c8:	1021883a 	mov	r16,r2
   531cc:	1887c83a 	sub	r3,r3,r2
   531d0:	d8c02b15 	stw	r3,172(sp)
   531d4:	d8802b17 	ldw	r2,172(sp)
   531d8:	d9002a17 	ldw	r4,168(sp)
   531dc:	1100010e 	bge	r2,r4,531e4 <___vfprintf_internal_r+0x76c>
   531e0:	2005883a 	mov	r2,r4
   531e4:	d8802915 	stw	r2,164(sp)
   531e8:	d8003215 	stw	zero,200(sp)
   531ec:	e7003fcc 	andi	fp,fp,255
   531f0:	e700201c 	xori	fp,fp,128
   531f4:	e73fe004 	addi	fp,fp,-128
   531f8:	e0000326 	beq	fp,zero,53208 <___vfprintf_internal_r+0x790>
   531fc:	d8c02917 	ldw	r3,164(sp)
   53200:	18c00044 	addi	r3,r3,1
   53204:	d8c02915 	stw	r3,164(sp)
   53208:	90c0008c 	andi	r3,r18,2
   5320c:	d8c02c15 	stw	r3,176(sp)
   53210:	18000326 	beq	r3,zero,53220 <___vfprintf_internal_r+0x7a8>
   53214:	d8c02917 	ldw	r3,164(sp)
   53218:	18c00084 	addi	r3,r3,2
   5321c:	d8c02915 	stw	r3,164(sp)
   53220:	90c0210c 	andi	r3,r18,132
   53224:	d8c03015 	stw	r3,192(sp)
   53228:	1801c51e 	bne	r3,zero,53940 <___vfprintf_internal_r+0xec8>
   5322c:	d9003117 	ldw	r4,196(sp)
   53230:	d8c02917 	ldw	r3,164(sp)
   53234:	20e7c83a 	sub	r19,r4,r3
   53238:	04c1c10e 	bge	zero,r19,53940 <___vfprintf_internal_r+0xec8>
   5323c:	02400404 	movi	r9,16
   53240:	d8c02017 	ldw	r3,128(sp)
   53244:	d8801f17 	ldw	r2,124(sp)
   53248:	4cc52f0e 	bge	r9,r19,54708 <___vfprintf_internal_r+0x1c90>
   5324c:	014001f4 	movhi	r5,7
   53250:	296e8c84 	addi	r5,r5,-17870
   53254:	dc403b15 	stw	r17,236(sp)
   53258:	d9403515 	stw	r5,212(sp)
   5325c:	9823883a 	mov	r17,r19
   53260:	482d883a 	mov	r22,r9
   53264:	9027883a 	mov	r19,r18
   53268:	070001c4 	movi	fp,7
   5326c:	8025883a 	mov	r18,r16
   53270:	dc002d17 	ldw	r16,180(sp)
   53274:	00000306 	br	53284 <___vfprintf_internal_r+0x80c>
   53278:	8c7ffc04 	addi	r17,r17,-16
   5327c:	42000204 	addi	r8,r8,8
   53280:	b440130e 	bge	r22,r17,532d0 <___vfprintf_internal_r+0x858>
   53284:	010001f4 	movhi	r4,7
   53288:	18c00404 	addi	r3,r3,16
   5328c:	10800044 	addi	r2,r2,1
   53290:	212e8c84 	addi	r4,r4,-17870
   53294:	41000015 	stw	r4,0(r8)
   53298:	45800115 	stw	r22,4(r8)
   5329c:	d8c02015 	stw	r3,128(sp)
   532a0:	d8801f15 	stw	r2,124(sp)
   532a4:	e0bff40e 	bge	fp,r2,53278 <__alt_data_end+0xfffd3278>
   532a8:	d9801e04 	addi	r6,sp,120
   532ac:	b80b883a 	mov	r5,r23
   532b0:	8009883a 	mov	r4,r16
   532b4:	005ad840 	call	5ad84 <__sprint_r>
   532b8:	103ef31e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   532bc:	8c7ffc04 	addi	r17,r17,-16
   532c0:	d8c02017 	ldw	r3,128(sp)
   532c4:	d8801f17 	ldw	r2,124(sp)
   532c8:	da000404 	addi	r8,sp,16
   532cc:	b47fed16 	blt	r22,r17,53284 <__alt_data_end+0xfffd3284>
   532d0:	9021883a 	mov	r16,r18
   532d4:	9825883a 	mov	r18,r19
   532d8:	8827883a 	mov	r19,r17
   532dc:	dc403b17 	ldw	r17,236(sp)
   532e0:	d9403517 	ldw	r5,212(sp)
   532e4:	98c7883a 	add	r3,r19,r3
   532e8:	10800044 	addi	r2,r2,1
   532ec:	41400015 	stw	r5,0(r8)
   532f0:	44c00115 	stw	r19,4(r8)
   532f4:	d8c02015 	stw	r3,128(sp)
   532f8:	d8801f15 	stw	r2,124(sp)
   532fc:	010001c4 	movi	r4,7
   53300:	2082c516 	blt	r4,r2,53e18 <___vfprintf_internal_r+0x13a0>
   53304:	df002787 	ldb	fp,158(sp)
   53308:	42000204 	addi	r8,r8,8
   5330c:	e0000c26 	beq	fp,zero,53340 <___vfprintf_internal_r+0x8c8>
   53310:	d8801f17 	ldw	r2,124(sp)
   53314:	d9002784 	addi	r4,sp,158
   53318:	18c00044 	addi	r3,r3,1
   5331c:	10800044 	addi	r2,r2,1
   53320:	41000015 	stw	r4,0(r8)
   53324:	01000044 	movi	r4,1
   53328:	41000115 	stw	r4,4(r8)
   5332c:	d8c02015 	stw	r3,128(sp)
   53330:	d8801f15 	stw	r2,124(sp)
   53334:	010001c4 	movi	r4,7
   53338:	20825e16 	blt	r4,r2,53cb4 <___vfprintf_internal_r+0x123c>
   5333c:	42000204 	addi	r8,r8,8
   53340:	d8802c17 	ldw	r2,176(sp)
   53344:	10000c26 	beq	r2,zero,53378 <___vfprintf_internal_r+0x900>
   53348:	d8801f17 	ldw	r2,124(sp)
   5334c:	d9002704 	addi	r4,sp,156
   53350:	18c00084 	addi	r3,r3,2
   53354:	10800044 	addi	r2,r2,1
   53358:	41000015 	stw	r4,0(r8)
   5335c:	01000084 	movi	r4,2
   53360:	41000115 	stw	r4,4(r8)
   53364:	d8c02015 	stw	r3,128(sp)
   53368:	d8801f15 	stw	r2,124(sp)
   5336c:	010001c4 	movi	r4,7
   53370:	20825816 	blt	r4,r2,53cd4 <___vfprintf_internal_r+0x125c>
   53374:	42000204 	addi	r8,r8,8
   53378:	d9003017 	ldw	r4,192(sp)
   5337c:	00802004 	movi	r2,128
   53380:	2081bb26 	beq	r4,r2,53a70 <___vfprintf_internal_r+0xff8>
   53384:	d9402a17 	ldw	r5,168(sp)
   53388:	d8802b17 	ldw	r2,172(sp)
   5338c:	28adc83a 	sub	r22,r5,r2
   53390:	0580310e 	bge	zero,r22,53458 <___vfprintf_internal_r+0x9e0>
   53394:	07000404 	movi	fp,16
   53398:	d8801f17 	ldw	r2,124(sp)
   5339c:	e584360e 	bge	fp,r22,54478 <___vfprintf_internal_r+0x1a00>
   533a0:	014001f4 	movhi	r5,7
   533a4:	296e8884 	addi	r5,r5,-17886
   533a8:	dc402a15 	stw	r17,168(sp)
   533ac:	d9402c15 	stw	r5,176(sp)
   533b0:	b023883a 	mov	r17,r22
   533b4:	04c001c4 	movi	r19,7
   533b8:	a82d883a 	mov	r22,r21
   533bc:	902b883a 	mov	r21,r18
   533c0:	8025883a 	mov	r18,r16
   533c4:	dc002d17 	ldw	r16,180(sp)
   533c8:	00000306 	br	533d8 <___vfprintf_internal_r+0x960>
   533cc:	8c7ffc04 	addi	r17,r17,-16
   533d0:	42000204 	addi	r8,r8,8
   533d4:	e440110e 	bge	fp,r17,5341c <___vfprintf_internal_r+0x9a4>
   533d8:	18c00404 	addi	r3,r3,16
   533dc:	10800044 	addi	r2,r2,1
   533e0:	45000015 	stw	r20,0(r8)
   533e4:	47000115 	stw	fp,4(r8)
   533e8:	d8c02015 	stw	r3,128(sp)
   533ec:	d8801f15 	stw	r2,124(sp)
   533f0:	98bff60e 	bge	r19,r2,533cc <__alt_data_end+0xfffd33cc>
   533f4:	d9801e04 	addi	r6,sp,120
   533f8:	b80b883a 	mov	r5,r23
   533fc:	8009883a 	mov	r4,r16
   53400:	005ad840 	call	5ad84 <__sprint_r>
   53404:	103ea01e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53408:	8c7ffc04 	addi	r17,r17,-16
   5340c:	d8c02017 	ldw	r3,128(sp)
   53410:	d8801f17 	ldw	r2,124(sp)
   53414:	da000404 	addi	r8,sp,16
   53418:	e47fef16 	blt	fp,r17,533d8 <__alt_data_end+0xfffd33d8>
   5341c:	9021883a 	mov	r16,r18
   53420:	a825883a 	mov	r18,r21
   53424:	b02b883a 	mov	r21,r22
   53428:	882d883a 	mov	r22,r17
   5342c:	dc402a17 	ldw	r17,168(sp)
   53430:	d9002c17 	ldw	r4,176(sp)
   53434:	1d87883a 	add	r3,r3,r22
   53438:	10800044 	addi	r2,r2,1
   5343c:	41000015 	stw	r4,0(r8)
   53440:	45800115 	stw	r22,4(r8)
   53444:	d8c02015 	stw	r3,128(sp)
   53448:	d8801f15 	stw	r2,124(sp)
   5344c:	010001c4 	movi	r4,7
   53450:	20821016 	blt	r4,r2,53c94 <___vfprintf_internal_r+0x121c>
   53454:	42000204 	addi	r8,r8,8
   53458:	9080400c 	andi	r2,r18,256
   5345c:	10013a1e 	bne	r2,zero,53948 <___vfprintf_internal_r+0xed0>
   53460:	d9402b17 	ldw	r5,172(sp)
   53464:	d8801f17 	ldw	r2,124(sp)
   53468:	44000015 	stw	r16,0(r8)
   5346c:	1947883a 	add	r3,r3,r5
   53470:	10800044 	addi	r2,r2,1
   53474:	41400115 	stw	r5,4(r8)
   53478:	d8c02015 	stw	r3,128(sp)
   5347c:	d8801f15 	stw	r2,124(sp)
   53480:	010001c4 	movi	r4,7
   53484:	2081f516 	blt	r4,r2,53c5c <___vfprintf_internal_r+0x11e4>
   53488:	42000204 	addi	r8,r8,8
   5348c:	9480010c 	andi	r18,r18,4
   53490:	90003226 	beq	r18,zero,5355c <___vfprintf_internal_r+0xae4>
   53494:	d9403117 	ldw	r5,196(sp)
   53498:	d8802917 	ldw	r2,164(sp)
   5349c:	28a1c83a 	sub	r16,r5,r2
   534a0:	04002e0e 	bge	zero,r16,5355c <___vfprintf_internal_r+0xae4>
   534a4:	04400404 	movi	r17,16
   534a8:	d8801f17 	ldw	r2,124(sp)
   534ac:	8c04c40e 	bge	r17,r16,547c0 <___vfprintf_internal_r+0x1d48>
   534b0:	014001f4 	movhi	r5,7
   534b4:	296e8c84 	addi	r5,r5,-17870
   534b8:	d9403515 	stw	r5,212(sp)
   534bc:	048001c4 	movi	r18,7
   534c0:	dcc02d17 	ldw	r19,180(sp)
   534c4:	00000306 	br	534d4 <___vfprintf_internal_r+0xa5c>
   534c8:	843ffc04 	addi	r16,r16,-16
   534cc:	42000204 	addi	r8,r8,8
   534d0:	8c00130e 	bge	r17,r16,53520 <___vfprintf_internal_r+0xaa8>
   534d4:	010001f4 	movhi	r4,7
   534d8:	18c00404 	addi	r3,r3,16
   534dc:	10800044 	addi	r2,r2,1
   534e0:	212e8c84 	addi	r4,r4,-17870
   534e4:	41000015 	stw	r4,0(r8)
   534e8:	44400115 	stw	r17,4(r8)
   534ec:	d8c02015 	stw	r3,128(sp)
   534f0:	d8801f15 	stw	r2,124(sp)
   534f4:	90bff40e 	bge	r18,r2,534c8 <__alt_data_end+0xfffd34c8>
   534f8:	d9801e04 	addi	r6,sp,120
   534fc:	b80b883a 	mov	r5,r23
   53500:	9809883a 	mov	r4,r19
   53504:	005ad840 	call	5ad84 <__sprint_r>
   53508:	103e5f1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5350c:	843ffc04 	addi	r16,r16,-16
   53510:	d8c02017 	ldw	r3,128(sp)
   53514:	d8801f17 	ldw	r2,124(sp)
   53518:	da000404 	addi	r8,sp,16
   5351c:	8c3fed16 	blt	r17,r16,534d4 <__alt_data_end+0xfffd34d4>
   53520:	d9403517 	ldw	r5,212(sp)
   53524:	1c07883a 	add	r3,r3,r16
   53528:	10800044 	addi	r2,r2,1
   5352c:	41400015 	stw	r5,0(r8)
   53530:	44000115 	stw	r16,4(r8)
   53534:	d8c02015 	stw	r3,128(sp)
   53538:	d8801f15 	stw	r2,124(sp)
   5353c:	010001c4 	movi	r4,7
   53540:	2080060e 	bge	r4,r2,5355c <___vfprintf_internal_r+0xae4>
   53544:	d9002d17 	ldw	r4,180(sp)
   53548:	d9801e04 	addi	r6,sp,120
   5354c:	b80b883a 	mov	r5,r23
   53550:	005ad840 	call	5ad84 <__sprint_r>
   53554:	103e4c1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53558:	d8c02017 	ldw	r3,128(sp)
   5355c:	d8803117 	ldw	r2,196(sp)
   53560:	d9002917 	ldw	r4,164(sp)
   53564:	1100010e 	bge	r2,r4,5356c <___vfprintf_internal_r+0xaf4>
   53568:	2005883a 	mov	r2,r4
   5356c:	d9402f17 	ldw	r5,188(sp)
   53570:	288b883a 	add	r5,r5,r2
   53574:	d9402f15 	stw	r5,188(sp)
   53578:	1801c01e 	bne	r3,zero,53c7c <___vfprintf_internal_r+0x1204>
   5357c:	a8800007 	ldb	r2,0(r21)
   53580:	d8001f15 	stw	zero,124(sp)
   53584:	da000404 	addi	r8,sp,16
   53588:	103d751e 	bne	r2,zero,52b60 <__alt_data_end+0xfffd2b60>
   5358c:	a823883a 	mov	r17,r21
   53590:	003d8b06 	br	52bc0 <__alt_data_end+0xfffd2bc0>
   53594:	8025883a 	mov	r18,r16
   53598:	dc002903 	ldbu	r16,164(sp)
   5359c:	e011883a 	mov	r8,fp
   535a0:	84003fcc 	andi	r16,r16,255
   535a4:	8005e51e 	bne	r16,zero,54d3c <___vfprintf_internal_r+0x22c4>
   535a8:	94800414 	ori	r18,r18,16
   535ac:	9080080c 	andi	r2,r18,32
   535b0:	10022b26 	beq	r2,zero,53e60 <___vfprintf_internal_r+0x13e8>
   535b4:	d9002e17 	ldw	r4,184(sp)
   535b8:	d9402a17 	ldw	r5,168(sp)
   535bc:	d8002785 	stb	zero,158(sp)
   535c0:	20c00204 	addi	r3,r4,8
   535c4:	24c00017 	ldw	r19,0(r4)
   535c8:	25800117 	ldw	r22,4(r4)
   535cc:	28042e16 	blt	r5,zero,54688 <___vfprintf_internal_r+0x1c10>
   535d0:	013fdfc4 	movi	r4,-129
   535d4:	9d84b03a 	or	r2,r19,r22
   535d8:	d8c02e15 	stw	r3,184(sp)
   535dc:	9124703a 	and	r18,r18,r4
   535e0:	0039883a 	mov	fp,zero
   535e4:	103e801e 	bne	r2,zero,52fe8 <__alt_data_end+0xfffd2fe8>
   535e8:	d9002a17 	ldw	r4,168(sp)
   535ec:	2002e01e 	bne	r4,zero,54170 <___vfprintf_internal_r+0x16f8>
   535f0:	d8002a15 	stw	zero,168(sp)
   535f4:	d8002b15 	stw	zero,172(sp)
   535f8:	dc001e04 	addi	r16,sp,120
   535fc:	003ef506 	br	531d4 <__alt_data_end+0xfffd31d4>
   53600:	8025883a 	mov	r18,r16
   53604:	dc002903 	ldbu	r16,164(sp)
   53608:	e011883a 	mov	r8,fp
   5360c:	84003fcc 	andi	r16,r16,255
   53610:	8005ba1e 	bne	r16,zero,54cfc <___vfprintf_internal_r+0x2284>
   53614:	010001f4 	movhi	r4,7
   53618:	212e7404 	addi	r4,r4,-17968
   5361c:	d9003915 	stw	r4,228(sp)
   53620:	9080080c 	andi	r2,r18,32
   53624:	10006126 	beq	r2,zero,537ac <___vfprintf_internal_r+0xd34>
   53628:	d9402e17 	ldw	r5,184(sp)
   5362c:	2cc00017 	ldw	r19,0(r5)
   53630:	2d800117 	ldw	r22,4(r5)
   53634:	29400204 	addi	r5,r5,8
   53638:	d9402e15 	stw	r5,184(sp)
   5363c:	9080004c 	andi	r2,r18,1
   53640:	1001ac26 	beq	r2,zero,53cf4 <___vfprintf_internal_r+0x127c>
   53644:	9d84b03a 	or	r2,r19,r22
   53648:	10038526 	beq	r2,zero,54460 <___vfprintf_internal_r+0x19e8>
   5364c:	d8c02a17 	ldw	r3,168(sp)
   53650:	00800c04 	movi	r2,48
   53654:	d8802705 	stb	r2,156(sp)
   53658:	dc402745 	stb	r17,157(sp)
   5365c:	d8002785 	stb	zero,158(sp)
   53660:	90800094 	ori	r2,r18,2
   53664:	18047916 	blt	r3,zero,5484c <___vfprintf_internal_r+0x1dd4>
   53668:	00bfdfc4 	movi	r2,-129
   5366c:	90a4703a 	and	r18,r18,r2
   53670:	94800094 	ori	r18,r18,2
   53674:	0039883a 	mov	fp,zero
   53678:	d9003917 	ldw	r4,228(sp)
   5367c:	dc001e04 	addi	r16,sp,120
   53680:	988003cc 	andi	r2,r19,15
   53684:	b006973a 	slli	r3,r22,28
   53688:	2085883a 	add	r2,r4,r2
   5368c:	9826d13a 	srli	r19,r19,4
   53690:	10800003 	ldbu	r2,0(r2)
   53694:	b02cd13a 	srli	r22,r22,4
   53698:	843fffc4 	addi	r16,r16,-1
   5369c:	1ce6b03a 	or	r19,r3,r19
   536a0:	80800005 	stb	r2,0(r16)
   536a4:	9d84b03a 	or	r2,r19,r22
   536a8:	103ff51e 	bne	r2,zero,53680 <__alt_data_end+0xfffd3680>
   536ac:	d8c02817 	ldw	r3,160(sp)
   536b0:	1c07c83a 	sub	r3,r3,r16
   536b4:	d8c02b15 	stw	r3,172(sp)
   536b8:	003ec606 	br	531d4 <__alt_data_end+0xfffd31d4>
   536bc:	8025883a 	mov	r18,r16
   536c0:	dc002903 	ldbu	r16,164(sp)
   536c4:	e011883a 	mov	r8,fp
   536c8:	84003fcc 	andi	r16,r16,255
   536cc:	803e9626 	beq	r16,zero,53128 <__alt_data_end+0xfffd3128>
   536d0:	d8c02b03 	ldbu	r3,172(sp)
   536d4:	d8c02785 	stb	r3,158(sp)
   536d8:	003e9306 	br	53128 <__alt_data_end+0xfffd3128>
   536dc:	00c00044 	movi	r3,1
   536e0:	d8c02905 	stb	r3,164(sp)
   536e4:	00c00ac4 	movi	r3,43
   536e8:	d8c02b05 	stb	r3,172(sp)
   536ec:	ac400007 	ldb	r17,0(r21)
   536f0:	003d4306 	br	52c00 <__alt_data_end+0xfffd2c00>
   536f4:	84000814 	ori	r16,r16,32
   536f8:	ac400007 	ldb	r17,0(r21)
   536fc:	003d4006 	br	52c00 <__alt_data_end+0xfffd2c00>
   53700:	d8802e17 	ldw	r2,184(sp)
   53704:	8025883a 	mov	r18,r16
   53708:	d8002785 	stb	zero,158(sp)
   5370c:	14000017 	ldw	r16,0(r2)
   53710:	e011883a 	mov	r8,fp
   53714:	14c00104 	addi	r19,r2,4
   53718:	80042d26 	beq	r16,zero,547d0 <___vfprintf_internal_r+0x1d58>
   5371c:	d8c02a17 	ldw	r3,168(sp)
   53720:	1803e416 	blt	r3,zero,546b4 <___vfprintf_internal_r+0x1c3c>
   53724:	180d883a 	mov	r6,r3
   53728:	000b883a 	mov	r5,zero
   5372c:	8009883a 	mov	r4,r16
   53730:	df003d15 	stw	fp,244(sp)
   53734:	0057ba40 	call	57ba4 <memchr>
   53738:	da003d17 	ldw	r8,244(sp)
   5373c:	10046826 	beq	r2,zero,548e0 <___vfprintf_internal_r+0x1e68>
   53740:	1405c83a 	sub	r2,r2,r16
   53744:	d8802b15 	stw	r2,172(sp)
   53748:	1003e016 	blt	r2,zero,546cc <___vfprintf_internal_r+0x1c54>
   5374c:	df002783 	ldbu	fp,158(sp)
   53750:	d8802915 	stw	r2,164(sp)
   53754:	dcc02e15 	stw	r19,184(sp)
   53758:	d8002a15 	stw	zero,168(sp)
   5375c:	d8003215 	stw	zero,200(sp)
   53760:	003ea206 	br	531ec <__alt_data_end+0xfffd31ec>
   53764:	8025883a 	mov	r18,r16
   53768:	dc002903 	ldbu	r16,164(sp)
   5376c:	e011883a 	mov	r8,fp
   53770:	84003fcc 	andi	r16,r16,255
   53774:	803f8d26 	beq	r16,zero,535ac <__alt_data_end+0xfffd35ac>
   53778:	d8c02b03 	ldbu	r3,172(sp)
   5377c:	d8c02785 	stb	r3,158(sp)
   53780:	003f8a06 	br	535ac <__alt_data_end+0xfffd35ac>
   53784:	8025883a 	mov	r18,r16
   53788:	dc002903 	ldbu	r16,164(sp)
   5378c:	e011883a 	mov	r8,fp
   53790:	84003fcc 	andi	r16,r16,255
   53794:	8005661e 	bne	r16,zero,54d30 <___vfprintf_internal_r+0x22b8>
   53798:	010001f4 	movhi	r4,7
   5379c:	212e7904 	addi	r4,r4,-17948
   537a0:	d9003915 	stw	r4,228(sp)
   537a4:	9080080c 	andi	r2,r18,32
   537a8:	103f9f1e 	bne	r2,zero,53628 <__alt_data_end+0xfffd3628>
   537ac:	9080040c 	andi	r2,r18,16
   537b0:	1002eb26 	beq	r2,zero,54360 <___vfprintf_internal_r+0x18e8>
   537b4:	d8802e17 	ldw	r2,184(sp)
   537b8:	002d883a 	mov	r22,zero
   537bc:	14c00017 	ldw	r19,0(r2)
   537c0:	10800104 	addi	r2,r2,4
   537c4:	d8802e15 	stw	r2,184(sp)
   537c8:	003f9c06 	br	5363c <__alt_data_end+0xfffd363c>
   537cc:	d8802b07 	ldb	r2,172(sp)
   537d0:	1002e11e 	bne	r2,zero,54358 <___vfprintf_internal_r+0x18e0>
   537d4:	00c00044 	movi	r3,1
   537d8:	d8c02905 	stb	r3,164(sp)
   537dc:	00c00804 	movi	r3,32
   537e0:	d8c02b05 	stb	r3,172(sp)
   537e4:	ac400007 	ldb	r17,0(r21)
   537e8:	003d0506 	br	52c00 <__alt_data_end+0xfffd2c00>
   537ec:	84000054 	ori	r16,r16,1
   537f0:	ac400007 	ldb	r17,0(r21)
   537f4:	003d0206 	br	52c00 <__alt_data_end+0xfffd2c00>
   537f8:	8025883a 	mov	r18,r16
   537fc:	dc002903 	ldbu	r16,164(sp)
   53800:	e011883a 	mov	r8,fp
   53804:	84003fcc 	andi	r16,r16,255
   53808:	803de726 	beq	r16,zero,52fa8 <__alt_data_end+0xfffd2fa8>
   5380c:	d8c02b03 	ldbu	r3,172(sp)
   53810:	d8c02785 	stb	r3,158(sp)
   53814:	003de406 	br	52fa8 <__alt_data_end+0xfffd2fa8>
   53818:	84001014 	ori	r16,r16,64
   5381c:	ac400007 	ldb	r17,0(r21)
   53820:	003cf706 	br	52c00 <__alt_data_end+0xfffd2c00>
   53824:	ac400007 	ldb	r17,0(r21)
   53828:	00801b04 	movi	r2,108
   5382c:	88838f26 	beq	r17,r2,5466c <___vfprintf_internal_r+0x1bf4>
   53830:	84000414 	ori	r16,r16,16
   53834:	003cf206 	br	52c00 <__alt_data_end+0xfffd2c00>
   53838:	8025883a 	mov	r18,r16
   5383c:	dc002903 	ldbu	r16,164(sp)
   53840:	e011883a 	mov	r8,fp
   53844:	84003fcc 	andi	r16,r16,255
   53848:	80053f1e 	bne	r16,zero,54d48 <___vfprintf_internal_r+0x22d0>
   5384c:	9080080c 	andi	r2,r18,32
   53850:	1002d226 	beq	r2,zero,5439c <___vfprintf_internal_r+0x1924>
   53854:	d9002e17 	ldw	r4,184(sp)
   53858:	d9402f17 	ldw	r5,188(sp)
   5385c:	20800017 	ldw	r2,0(r4)
   53860:	2807d7fa 	srai	r3,r5,31
   53864:	21000104 	addi	r4,r4,4
   53868:	d9002e15 	stw	r4,184(sp)
   5386c:	11400015 	stw	r5,0(r2)
   53870:	10c00115 	stw	r3,4(r2)
   53874:	003cb806 	br	52b58 <__alt_data_end+0xfffd2b58>
   53878:	d8c02e17 	ldw	r3,184(sp)
   5387c:	d9002e17 	ldw	r4,184(sp)
   53880:	8025883a 	mov	r18,r16
   53884:	18800017 	ldw	r2,0(r3)
   53888:	21000104 	addi	r4,r4,4
   5388c:	00c00044 	movi	r3,1
   53890:	e011883a 	mov	r8,fp
   53894:	d8c02915 	stw	r3,164(sp)
   53898:	d8002785 	stb	zero,158(sp)
   5389c:	d8801405 	stb	r2,80(sp)
   538a0:	d9002e15 	stw	r4,184(sp)
   538a4:	d8c02b15 	stw	r3,172(sp)
   538a8:	d8002a15 	stw	zero,168(sp)
   538ac:	d8003215 	stw	zero,200(sp)
   538b0:	dc001404 	addi	r16,sp,80
   538b4:	0039883a 	mov	fp,zero
   538b8:	003e5306 	br	53208 <__alt_data_end+0xfffd3208>
   538bc:	010001f4 	movhi	r4,7
   538c0:	212e7904 	addi	r4,r4,-17948
   538c4:	0039883a 	mov	fp,zero
   538c8:	d9003915 	stw	r4,228(sp)
   538cc:	04401e04 	movi	r17,120
   538d0:	003f6906 	br	53678 <__alt_data_end+0xfffd3678>
   538d4:	8025883a 	mov	r18,r16
   538d8:	dc002903 	ldbu	r16,164(sp)
   538dc:	e011883a 	mov	r8,fp
   538e0:	84003fcc 	andi	r16,r16,255
   538e4:	8005081e 	bne	r16,zero,54d08 <___vfprintf_internal_r+0x2290>
   538e8:	883d6126 	beq	r17,zero,52e70 <__alt_data_end+0xfffd2e70>
   538ec:	00c00044 	movi	r3,1
   538f0:	d8c02915 	stw	r3,164(sp)
   538f4:	dc401405 	stb	r17,80(sp)
   538f8:	d8002785 	stb	zero,158(sp)
   538fc:	003fe906 	br	538a4 <__alt_data_end+0xfffd38a4>
   53900:	014001f4 	movhi	r5,7
   53904:	296e7904 	addi	r5,r5,-17948
   53908:	d9403915 	stw	r5,228(sp)
   5390c:	d8c02e15 	stw	r3,184(sp)
   53910:	1025883a 	mov	r18,r2
   53914:	04401e04 	movi	r17,120
   53918:	9d84b03a 	or	r2,r19,r22
   5391c:	1000fc1e 	bne	r2,zero,53d10 <___vfprintf_internal_r+0x1298>
   53920:	0039883a 	mov	fp,zero
   53924:	00800084 	movi	r2,2
   53928:	10803fcc 	andi	r2,r2,255
   5392c:	00c00044 	movi	r3,1
   53930:	10c20f26 	beq	r2,r3,54170 <___vfprintf_internal_r+0x16f8>
   53934:	00c00084 	movi	r3,2
   53938:	10fd3326 	beq	r2,r3,52e08 <__alt_data_end+0xfffd2e08>
   5393c:	003e0b06 	br	5316c <__alt_data_end+0xfffd316c>
   53940:	d8c02017 	ldw	r3,128(sp)
   53944:	003e7106 	br	5330c <__alt_data_end+0xfffd330c>
   53948:	00801944 	movi	r2,101
   5394c:	14407e0e 	bge	r2,r17,53b48 <___vfprintf_internal_r+0x10d0>
   53950:	d9003617 	ldw	r4,216(sp)
   53954:	d9403817 	ldw	r5,224(sp)
   53958:	000d883a 	mov	r6,zero
   5395c:	000f883a 	mov	r7,zero
   53960:	d8c03c15 	stw	r3,240(sp)
   53964:	da003d15 	stw	r8,244(sp)
   53968:	005eb080 	call	5eb08 <__eqdf2>
   5396c:	d8c03c17 	ldw	r3,240(sp)
   53970:	da003d17 	ldw	r8,244(sp)
   53974:	1000f71e 	bne	r2,zero,53d54 <___vfprintf_internal_r+0x12dc>
   53978:	d8801f17 	ldw	r2,124(sp)
   5397c:	010001f4 	movhi	r4,7
   53980:	212e8004 	addi	r4,r4,-17920
   53984:	18c00044 	addi	r3,r3,1
   53988:	10800044 	addi	r2,r2,1
   5398c:	41000015 	stw	r4,0(r8)
   53990:	01000044 	movi	r4,1
   53994:	41000115 	stw	r4,4(r8)
   53998:	d8c02015 	stw	r3,128(sp)
   5399c:	d8801f15 	stw	r2,124(sp)
   539a0:	010001c4 	movi	r4,7
   539a4:	2082b816 	blt	r4,r2,54488 <___vfprintf_internal_r+0x1a10>
   539a8:	42000204 	addi	r8,r8,8
   539ac:	d8802617 	ldw	r2,152(sp)
   539b0:	d9403317 	ldw	r5,204(sp)
   539b4:	11400216 	blt	r2,r5,539c0 <___vfprintf_internal_r+0xf48>
   539b8:	9080004c 	andi	r2,r18,1
   539bc:	103eb326 	beq	r2,zero,5348c <__alt_data_end+0xfffd348c>
   539c0:	d8803717 	ldw	r2,220(sp)
   539c4:	d9003417 	ldw	r4,208(sp)
   539c8:	d9403717 	ldw	r5,220(sp)
   539cc:	1887883a 	add	r3,r3,r2
   539d0:	d8801f17 	ldw	r2,124(sp)
   539d4:	41000015 	stw	r4,0(r8)
   539d8:	41400115 	stw	r5,4(r8)
   539dc:	10800044 	addi	r2,r2,1
   539e0:	d8c02015 	stw	r3,128(sp)
   539e4:	d8801f15 	stw	r2,124(sp)
   539e8:	010001c4 	movi	r4,7
   539ec:	20832916 	blt	r4,r2,54694 <___vfprintf_internal_r+0x1c1c>
   539f0:	42000204 	addi	r8,r8,8
   539f4:	d8803317 	ldw	r2,204(sp)
   539f8:	143fffc4 	addi	r16,r2,-1
   539fc:	043ea30e 	bge	zero,r16,5348c <__alt_data_end+0xfffd348c>
   53a00:	04400404 	movi	r17,16
   53a04:	d8801f17 	ldw	r2,124(sp)
   53a08:	8c00880e 	bge	r17,r16,53c2c <___vfprintf_internal_r+0x11b4>
   53a0c:	014001f4 	movhi	r5,7
   53a10:	296e8884 	addi	r5,r5,-17886
   53a14:	d9402c15 	stw	r5,176(sp)
   53a18:	058001c4 	movi	r22,7
   53a1c:	dcc02d17 	ldw	r19,180(sp)
   53a20:	00000306 	br	53a30 <___vfprintf_internal_r+0xfb8>
   53a24:	42000204 	addi	r8,r8,8
   53a28:	843ffc04 	addi	r16,r16,-16
   53a2c:	8c00820e 	bge	r17,r16,53c38 <___vfprintf_internal_r+0x11c0>
   53a30:	18c00404 	addi	r3,r3,16
   53a34:	10800044 	addi	r2,r2,1
   53a38:	45000015 	stw	r20,0(r8)
   53a3c:	44400115 	stw	r17,4(r8)
   53a40:	d8c02015 	stw	r3,128(sp)
   53a44:	d8801f15 	stw	r2,124(sp)
   53a48:	b0bff60e 	bge	r22,r2,53a24 <__alt_data_end+0xfffd3a24>
   53a4c:	d9801e04 	addi	r6,sp,120
   53a50:	b80b883a 	mov	r5,r23
   53a54:	9809883a 	mov	r4,r19
   53a58:	005ad840 	call	5ad84 <__sprint_r>
   53a5c:	103d0a1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53a60:	d8c02017 	ldw	r3,128(sp)
   53a64:	d8801f17 	ldw	r2,124(sp)
   53a68:	da000404 	addi	r8,sp,16
   53a6c:	003fee06 	br	53a28 <__alt_data_end+0xfffd3a28>
   53a70:	d9403117 	ldw	r5,196(sp)
   53a74:	d8802917 	ldw	r2,164(sp)
   53a78:	28adc83a 	sub	r22,r5,r2
   53a7c:	05be410e 	bge	zero,r22,53384 <__alt_data_end+0xfffd3384>
   53a80:	07000404 	movi	fp,16
   53a84:	d8801f17 	ldw	r2,124(sp)
   53a88:	e5838f0e 	bge	fp,r22,548c8 <___vfprintf_internal_r+0x1e50>
   53a8c:	014001f4 	movhi	r5,7
   53a90:	296e8884 	addi	r5,r5,-17886
   53a94:	dc403015 	stw	r17,192(sp)
   53a98:	d9402c15 	stw	r5,176(sp)
   53a9c:	b023883a 	mov	r17,r22
   53aa0:	04c001c4 	movi	r19,7
   53aa4:	a82d883a 	mov	r22,r21
   53aa8:	902b883a 	mov	r21,r18
   53aac:	8025883a 	mov	r18,r16
   53ab0:	dc002d17 	ldw	r16,180(sp)
   53ab4:	00000306 	br	53ac4 <___vfprintf_internal_r+0x104c>
   53ab8:	8c7ffc04 	addi	r17,r17,-16
   53abc:	42000204 	addi	r8,r8,8
   53ac0:	e440110e 	bge	fp,r17,53b08 <___vfprintf_internal_r+0x1090>
   53ac4:	18c00404 	addi	r3,r3,16
   53ac8:	10800044 	addi	r2,r2,1
   53acc:	45000015 	stw	r20,0(r8)
   53ad0:	47000115 	stw	fp,4(r8)
   53ad4:	d8c02015 	stw	r3,128(sp)
   53ad8:	d8801f15 	stw	r2,124(sp)
   53adc:	98bff60e 	bge	r19,r2,53ab8 <__alt_data_end+0xfffd3ab8>
   53ae0:	d9801e04 	addi	r6,sp,120
   53ae4:	b80b883a 	mov	r5,r23
   53ae8:	8009883a 	mov	r4,r16
   53aec:	005ad840 	call	5ad84 <__sprint_r>
   53af0:	103ce51e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53af4:	8c7ffc04 	addi	r17,r17,-16
   53af8:	d8c02017 	ldw	r3,128(sp)
   53afc:	d8801f17 	ldw	r2,124(sp)
   53b00:	da000404 	addi	r8,sp,16
   53b04:	e47fef16 	blt	fp,r17,53ac4 <__alt_data_end+0xfffd3ac4>
   53b08:	9021883a 	mov	r16,r18
   53b0c:	a825883a 	mov	r18,r21
   53b10:	b02b883a 	mov	r21,r22
   53b14:	882d883a 	mov	r22,r17
   53b18:	dc403017 	ldw	r17,192(sp)
   53b1c:	d9002c17 	ldw	r4,176(sp)
   53b20:	1d87883a 	add	r3,r3,r22
   53b24:	10800044 	addi	r2,r2,1
   53b28:	41000015 	stw	r4,0(r8)
   53b2c:	45800115 	stw	r22,4(r8)
   53b30:	d8c02015 	stw	r3,128(sp)
   53b34:	d8801f15 	stw	r2,124(sp)
   53b38:	010001c4 	movi	r4,7
   53b3c:	20818e16 	blt	r4,r2,54178 <___vfprintf_internal_r+0x1700>
   53b40:	42000204 	addi	r8,r8,8
   53b44:	003e0f06 	br	53384 <__alt_data_end+0xfffd3384>
   53b48:	d9403317 	ldw	r5,204(sp)
   53b4c:	00800044 	movi	r2,1
   53b50:	18c00044 	addi	r3,r3,1
   53b54:	1141530e 	bge	r2,r5,540a4 <___vfprintf_internal_r+0x162c>
   53b58:	dc401f17 	ldw	r17,124(sp)
   53b5c:	00800044 	movi	r2,1
   53b60:	40800115 	stw	r2,4(r8)
   53b64:	8c400044 	addi	r17,r17,1
   53b68:	44000015 	stw	r16,0(r8)
   53b6c:	d8c02015 	stw	r3,128(sp)
   53b70:	dc401f15 	stw	r17,124(sp)
   53b74:	008001c4 	movi	r2,7
   53b78:	14416b16 	blt	r2,r17,54128 <___vfprintf_internal_r+0x16b0>
   53b7c:	42000204 	addi	r8,r8,8
   53b80:	d8803717 	ldw	r2,220(sp)
   53b84:	d9003417 	ldw	r4,208(sp)
   53b88:	8c400044 	addi	r17,r17,1
   53b8c:	10c7883a 	add	r3,r2,r3
   53b90:	40800115 	stw	r2,4(r8)
   53b94:	41000015 	stw	r4,0(r8)
   53b98:	d8c02015 	stw	r3,128(sp)
   53b9c:	dc401f15 	stw	r17,124(sp)
   53ba0:	008001c4 	movi	r2,7
   53ba4:	14416916 	blt	r2,r17,5414c <___vfprintf_internal_r+0x16d4>
   53ba8:	45800204 	addi	r22,r8,8
   53bac:	d9003617 	ldw	r4,216(sp)
   53bb0:	d9403817 	ldw	r5,224(sp)
   53bb4:	000d883a 	mov	r6,zero
   53bb8:	000f883a 	mov	r7,zero
   53bbc:	d8c03c15 	stw	r3,240(sp)
   53bc0:	005eb080 	call	5eb08 <__eqdf2>
   53bc4:	d8c03c17 	ldw	r3,240(sp)
   53bc8:	1000bc26 	beq	r2,zero,53ebc <___vfprintf_internal_r+0x1444>
   53bcc:	d9403317 	ldw	r5,204(sp)
   53bd0:	84000044 	addi	r16,r16,1
   53bd4:	8c400044 	addi	r17,r17,1
   53bd8:	28bfffc4 	addi	r2,r5,-1
   53bdc:	1887883a 	add	r3,r3,r2
   53be0:	b0800115 	stw	r2,4(r22)
   53be4:	b4000015 	stw	r16,0(r22)
   53be8:	d8c02015 	stw	r3,128(sp)
   53bec:	dc401f15 	stw	r17,124(sp)
   53bf0:	008001c4 	movi	r2,7
   53bf4:	14414316 	blt	r2,r17,54104 <___vfprintf_internal_r+0x168c>
   53bf8:	b5800204 	addi	r22,r22,8
   53bfc:	d9003a17 	ldw	r4,232(sp)
   53c00:	df0022c4 	addi	fp,sp,139
   53c04:	8c400044 	addi	r17,r17,1
   53c08:	20c7883a 	add	r3,r4,r3
   53c0c:	b7000015 	stw	fp,0(r22)
   53c10:	b1000115 	stw	r4,4(r22)
   53c14:	d8c02015 	stw	r3,128(sp)
   53c18:	dc401f15 	stw	r17,124(sp)
   53c1c:	008001c4 	movi	r2,7
   53c20:	14400e16 	blt	r2,r17,53c5c <___vfprintf_internal_r+0x11e4>
   53c24:	b2000204 	addi	r8,r22,8
   53c28:	003e1806 	br	5348c <__alt_data_end+0xfffd348c>
   53c2c:	010001f4 	movhi	r4,7
   53c30:	212e8884 	addi	r4,r4,-17886
   53c34:	d9002c15 	stw	r4,176(sp)
   53c38:	d9002c17 	ldw	r4,176(sp)
   53c3c:	1c07883a 	add	r3,r3,r16
   53c40:	44000115 	stw	r16,4(r8)
   53c44:	41000015 	stw	r4,0(r8)
   53c48:	10800044 	addi	r2,r2,1
   53c4c:	d8c02015 	stw	r3,128(sp)
   53c50:	d8801f15 	stw	r2,124(sp)
   53c54:	010001c4 	movi	r4,7
   53c58:	20be0b0e 	bge	r4,r2,53488 <__alt_data_end+0xfffd3488>
   53c5c:	d9002d17 	ldw	r4,180(sp)
   53c60:	d9801e04 	addi	r6,sp,120
   53c64:	b80b883a 	mov	r5,r23
   53c68:	005ad840 	call	5ad84 <__sprint_r>
   53c6c:	103c861e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53c70:	d8c02017 	ldw	r3,128(sp)
   53c74:	da000404 	addi	r8,sp,16
   53c78:	003e0406 	br	5348c <__alt_data_end+0xfffd348c>
   53c7c:	d9002d17 	ldw	r4,180(sp)
   53c80:	d9801e04 	addi	r6,sp,120
   53c84:	b80b883a 	mov	r5,r23
   53c88:	005ad840 	call	5ad84 <__sprint_r>
   53c8c:	103e3b26 	beq	r2,zero,5357c <__alt_data_end+0xfffd357c>
   53c90:	003c7d06 	br	52e88 <__alt_data_end+0xfffd2e88>
   53c94:	d9002d17 	ldw	r4,180(sp)
   53c98:	d9801e04 	addi	r6,sp,120
   53c9c:	b80b883a 	mov	r5,r23
   53ca0:	005ad840 	call	5ad84 <__sprint_r>
   53ca4:	103c781e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53ca8:	d8c02017 	ldw	r3,128(sp)
   53cac:	da000404 	addi	r8,sp,16
   53cb0:	003de906 	br	53458 <__alt_data_end+0xfffd3458>
   53cb4:	d9002d17 	ldw	r4,180(sp)
   53cb8:	d9801e04 	addi	r6,sp,120
   53cbc:	b80b883a 	mov	r5,r23
   53cc0:	005ad840 	call	5ad84 <__sprint_r>
   53cc4:	103c701e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53cc8:	d8c02017 	ldw	r3,128(sp)
   53ccc:	da000404 	addi	r8,sp,16
   53cd0:	003d9b06 	br	53340 <__alt_data_end+0xfffd3340>
   53cd4:	d9002d17 	ldw	r4,180(sp)
   53cd8:	d9801e04 	addi	r6,sp,120
   53cdc:	b80b883a 	mov	r5,r23
   53ce0:	005ad840 	call	5ad84 <__sprint_r>
   53ce4:	103c681e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53ce8:	d8c02017 	ldw	r3,128(sp)
   53cec:	da000404 	addi	r8,sp,16
   53cf0:	003da106 	br	53378 <__alt_data_end+0xfffd3378>
   53cf4:	d9402a17 	ldw	r5,168(sp)
   53cf8:	d8002785 	stb	zero,158(sp)
   53cfc:	283f0616 	blt	r5,zero,53918 <__alt_data_end+0xfffd3918>
   53d00:	00ffdfc4 	movi	r3,-129
   53d04:	9d84b03a 	or	r2,r19,r22
   53d08:	90e4703a 	and	r18,r18,r3
   53d0c:	103c3b26 	beq	r2,zero,52dfc <__alt_data_end+0xfffd2dfc>
   53d10:	0039883a 	mov	fp,zero
   53d14:	003e5806 	br	53678 <__alt_data_end+0xfffd3678>
   53d18:	9080040c 	andi	r2,r18,16
   53d1c:	1001b326 	beq	r2,zero,543ec <___vfprintf_internal_r+0x1974>
   53d20:	d8c02e17 	ldw	r3,184(sp)
   53d24:	d9002a17 	ldw	r4,168(sp)
   53d28:	d8002785 	stb	zero,158(sp)
   53d2c:	18800104 	addi	r2,r3,4
   53d30:	1cc00017 	ldw	r19,0(r3)
   53d34:	002d883a 	mov	r22,zero
   53d38:	2001b516 	blt	r4,zero,54410 <___vfprintf_internal_r+0x1998>
   53d3c:	00ffdfc4 	movi	r3,-129
   53d40:	d8802e15 	stw	r2,184(sp)
   53d44:	90e4703a 	and	r18,r18,r3
   53d48:	983d0526 	beq	r19,zero,53160 <__alt_data_end+0xfffd3160>
   53d4c:	0039883a 	mov	fp,zero
   53d50:	003d0806 	br	53174 <__alt_data_end+0xfffd3174>
   53d54:	dc402617 	ldw	r17,152(sp)
   53d58:	0441d30e 	bge	zero,r17,544a8 <___vfprintf_internal_r+0x1a30>
   53d5c:	dc403217 	ldw	r17,200(sp)
   53d60:	d8803317 	ldw	r2,204(sp)
   53d64:	1440010e 	bge	r2,r17,53d6c <___vfprintf_internal_r+0x12f4>
   53d68:	1023883a 	mov	r17,r2
   53d6c:	04400a0e 	bge	zero,r17,53d98 <___vfprintf_internal_r+0x1320>
   53d70:	d8801f17 	ldw	r2,124(sp)
   53d74:	1c47883a 	add	r3,r3,r17
   53d78:	44000015 	stw	r16,0(r8)
   53d7c:	10800044 	addi	r2,r2,1
   53d80:	44400115 	stw	r17,4(r8)
   53d84:	d8c02015 	stw	r3,128(sp)
   53d88:	d8801f15 	stw	r2,124(sp)
   53d8c:	010001c4 	movi	r4,7
   53d90:	20826516 	blt	r4,r2,54728 <___vfprintf_internal_r+0x1cb0>
   53d94:	42000204 	addi	r8,r8,8
   53d98:	88026116 	blt	r17,zero,54720 <___vfprintf_internal_r+0x1ca8>
   53d9c:	d9003217 	ldw	r4,200(sp)
   53da0:	2463c83a 	sub	r17,r4,r17
   53da4:	04407b0e 	bge	zero,r17,53f94 <___vfprintf_internal_r+0x151c>
   53da8:	05800404 	movi	r22,16
   53dac:	d8801f17 	ldw	r2,124(sp)
   53db0:	b4419d0e 	bge	r22,r17,54428 <___vfprintf_internal_r+0x19b0>
   53db4:	010001f4 	movhi	r4,7
   53db8:	212e8884 	addi	r4,r4,-17886
   53dbc:	d9002c15 	stw	r4,176(sp)
   53dc0:	070001c4 	movi	fp,7
   53dc4:	dcc02d17 	ldw	r19,180(sp)
   53dc8:	00000306 	br	53dd8 <___vfprintf_internal_r+0x1360>
   53dcc:	42000204 	addi	r8,r8,8
   53dd0:	8c7ffc04 	addi	r17,r17,-16
   53dd4:	b441970e 	bge	r22,r17,54434 <___vfprintf_internal_r+0x19bc>
   53dd8:	18c00404 	addi	r3,r3,16
   53ddc:	10800044 	addi	r2,r2,1
   53de0:	45000015 	stw	r20,0(r8)
   53de4:	45800115 	stw	r22,4(r8)
   53de8:	d8c02015 	stw	r3,128(sp)
   53dec:	d8801f15 	stw	r2,124(sp)
   53df0:	e0bff60e 	bge	fp,r2,53dcc <__alt_data_end+0xfffd3dcc>
   53df4:	d9801e04 	addi	r6,sp,120
   53df8:	b80b883a 	mov	r5,r23
   53dfc:	9809883a 	mov	r4,r19
   53e00:	005ad840 	call	5ad84 <__sprint_r>
   53e04:	103c201e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53e08:	d8c02017 	ldw	r3,128(sp)
   53e0c:	d8801f17 	ldw	r2,124(sp)
   53e10:	da000404 	addi	r8,sp,16
   53e14:	003fee06 	br	53dd0 <__alt_data_end+0xfffd3dd0>
   53e18:	d9002d17 	ldw	r4,180(sp)
   53e1c:	d9801e04 	addi	r6,sp,120
   53e20:	b80b883a 	mov	r5,r23
   53e24:	005ad840 	call	5ad84 <__sprint_r>
   53e28:	103c171e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53e2c:	d8c02017 	ldw	r3,128(sp)
   53e30:	df002787 	ldb	fp,158(sp)
   53e34:	da000404 	addi	r8,sp,16
   53e38:	003d3406 	br	5330c <__alt_data_end+0xfffd330c>
   53e3c:	9080040c 	andi	r2,r18,16
   53e40:	10016126 	beq	r2,zero,543c8 <___vfprintf_internal_r+0x1950>
   53e44:	d9402e17 	ldw	r5,184(sp)
   53e48:	2cc00017 	ldw	r19,0(r5)
   53e4c:	29400104 	addi	r5,r5,4
   53e50:	d9402e15 	stw	r5,184(sp)
   53e54:	982dd7fa 	srai	r22,r19,31
   53e58:	b005883a 	mov	r2,r22
   53e5c:	003c5a06 	br	52fc8 <__alt_data_end+0xfffd2fc8>
   53e60:	9080040c 	andi	r2,r18,16
   53e64:	10003526 	beq	r2,zero,53f3c <___vfprintf_internal_r+0x14c4>
   53e68:	d8c02e17 	ldw	r3,184(sp)
   53e6c:	d9002a17 	ldw	r4,168(sp)
   53e70:	d8002785 	stb	zero,158(sp)
   53e74:	18800104 	addi	r2,r3,4
   53e78:	1cc00017 	ldw	r19,0(r3)
   53e7c:	002d883a 	mov	r22,zero
   53e80:	20003716 	blt	r4,zero,53f60 <___vfprintf_internal_r+0x14e8>
   53e84:	00ffdfc4 	movi	r3,-129
   53e88:	d8802e15 	stw	r2,184(sp)
   53e8c:	90e4703a 	and	r18,r18,r3
   53e90:	0039883a 	mov	fp,zero
   53e94:	983dd426 	beq	r19,zero,535e8 <__alt_data_end+0xfffd35e8>
   53e98:	00800244 	movi	r2,9
   53e9c:	14fc5336 	bltu	r2,r19,52fec <__alt_data_end+0xfffd2fec>
   53ea0:	d8c02817 	ldw	r3,160(sp)
   53ea4:	dc001dc4 	addi	r16,sp,119
   53ea8:	9cc00c04 	addi	r19,r19,48
   53eac:	1c07c83a 	sub	r3,r3,r16
   53eb0:	dcc01dc5 	stb	r19,119(sp)
   53eb4:	d8c02b15 	stw	r3,172(sp)
   53eb8:	003cc606 	br	531d4 <__alt_data_end+0xfffd31d4>
   53ebc:	d8803317 	ldw	r2,204(sp)
   53ec0:	143fffc4 	addi	r16,r2,-1
   53ec4:	043f4d0e 	bge	zero,r16,53bfc <__alt_data_end+0xfffd3bfc>
   53ec8:	07000404 	movi	fp,16
   53ecc:	e400810e 	bge	fp,r16,540d4 <___vfprintf_internal_r+0x165c>
   53ed0:	014001f4 	movhi	r5,7
   53ed4:	296e8884 	addi	r5,r5,-17886
   53ed8:	d9402c15 	stw	r5,176(sp)
   53edc:	01c001c4 	movi	r7,7
   53ee0:	dcc02d17 	ldw	r19,180(sp)
   53ee4:	00000306 	br	53ef4 <___vfprintf_internal_r+0x147c>
   53ee8:	b5800204 	addi	r22,r22,8
   53eec:	843ffc04 	addi	r16,r16,-16
   53ef0:	e4007b0e 	bge	fp,r16,540e0 <___vfprintf_internal_r+0x1668>
   53ef4:	18c00404 	addi	r3,r3,16
   53ef8:	8c400044 	addi	r17,r17,1
   53efc:	b5000015 	stw	r20,0(r22)
   53f00:	b7000115 	stw	fp,4(r22)
   53f04:	d8c02015 	stw	r3,128(sp)
   53f08:	dc401f15 	stw	r17,124(sp)
   53f0c:	3c7ff60e 	bge	r7,r17,53ee8 <__alt_data_end+0xfffd3ee8>
   53f10:	d9801e04 	addi	r6,sp,120
   53f14:	b80b883a 	mov	r5,r23
   53f18:	9809883a 	mov	r4,r19
   53f1c:	d9c03c15 	stw	r7,240(sp)
   53f20:	005ad840 	call	5ad84 <__sprint_r>
   53f24:	d9c03c17 	ldw	r7,240(sp)
   53f28:	103bd71e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53f2c:	d8c02017 	ldw	r3,128(sp)
   53f30:	dc401f17 	ldw	r17,124(sp)
   53f34:	dd800404 	addi	r22,sp,16
   53f38:	003fec06 	br	53eec <__alt_data_end+0xfffd3eec>
   53f3c:	9080100c 	andi	r2,r18,64
   53f40:	d8002785 	stb	zero,158(sp)
   53f44:	10010e26 	beq	r2,zero,54380 <___vfprintf_internal_r+0x1908>
   53f48:	d9402e17 	ldw	r5,184(sp)
   53f4c:	d8c02a17 	ldw	r3,168(sp)
   53f50:	002d883a 	mov	r22,zero
   53f54:	28800104 	addi	r2,r5,4
   53f58:	2cc0000b 	ldhu	r19,0(r5)
   53f5c:	183fc90e 	bge	r3,zero,53e84 <__alt_data_end+0xfffd3e84>
   53f60:	d8802e15 	stw	r2,184(sp)
   53f64:	0039883a 	mov	fp,zero
   53f68:	9d84b03a 	or	r2,r19,r22
   53f6c:	103c1e1e 	bne	r2,zero,52fe8 <__alt_data_end+0xfffd2fe8>
   53f70:	00800044 	movi	r2,1
   53f74:	003e6c06 	br	53928 <__alt_data_end+0xfffd3928>
   53f78:	d9002d17 	ldw	r4,180(sp)
   53f7c:	d9801e04 	addi	r6,sp,120
   53f80:	b80b883a 	mov	r5,r23
   53f84:	005ad840 	call	5ad84 <__sprint_r>
   53f88:	103bbf1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   53f8c:	d8c02017 	ldw	r3,128(sp)
   53f90:	da000404 	addi	r8,sp,16
   53f94:	d9003217 	ldw	r4,200(sp)
   53f98:	d8802617 	ldw	r2,152(sp)
   53f9c:	d9403317 	ldw	r5,204(sp)
   53fa0:	8123883a 	add	r17,r16,r4
   53fa4:	11400216 	blt	r2,r5,53fb0 <___vfprintf_internal_r+0x1538>
   53fa8:	9100004c 	andi	r4,r18,1
   53fac:	20000d26 	beq	r4,zero,53fe4 <___vfprintf_internal_r+0x156c>
   53fb0:	d9003717 	ldw	r4,220(sp)
   53fb4:	d9403417 	ldw	r5,208(sp)
   53fb8:	1907883a 	add	r3,r3,r4
   53fbc:	d9001f17 	ldw	r4,124(sp)
   53fc0:	41400015 	stw	r5,0(r8)
   53fc4:	d9403717 	ldw	r5,220(sp)
   53fc8:	21000044 	addi	r4,r4,1
   53fcc:	d8c02015 	stw	r3,128(sp)
   53fd0:	41400115 	stw	r5,4(r8)
   53fd4:	d9001f15 	stw	r4,124(sp)
   53fd8:	014001c4 	movi	r5,7
   53fdc:	2901e816 	blt	r5,r4,54780 <___vfprintf_internal_r+0x1d08>
   53fe0:	42000204 	addi	r8,r8,8
   53fe4:	d9003317 	ldw	r4,204(sp)
   53fe8:	8121883a 	add	r16,r16,r4
   53fec:	2085c83a 	sub	r2,r4,r2
   53ff0:	8461c83a 	sub	r16,r16,r17
   53ff4:	1400010e 	bge	r2,r16,53ffc <___vfprintf_internal_r+0x1584>
   53ff8:	1021883a 	mov	r16,r2
   53ffc:	04000a0e 	bge	zero,r16,54028 <___vfprintf_internal_r+0x15b0>
   54000:	d9001f17 	ldw	r4,124(sp)
   54004:	1c07883a 	add	r3,r3,r16
   54008:	44400015 	stw	r17,0(r8)
   5400c:	21000044 	addi	r4,r4,1
   54010:	44000115 	stw	r16,4(r8)
   54014:	d8c02015 	stw	r3,128(sp)
   54018:	d9001f15 	stw	r4,124(sp)
   5401c:	014001c4 	movi	r5,7
   54020:	2901fb16 	blt	r5,r4,54810 <___vfprintf_internal_r+0x1d98>
   54024:	42000204 	addi	r8,r8,8
   54028:	8001f716 	blt	r16,zero,54808 <___vfprintf_internal_r+0x1d90>
   5402c:	1421c83a 	sub	r16,r2,r16
   54030:	043d160e 	bge	zero,r16,5348c <__alt_data_end+0xfffd348c>
   54034:	04400404 	movi	r17,16
   54038:	d8801f17 	ldw	r2,124(sp)
   5403c:	8c3efb0e 	bge	r17,r16,53c2c <__alt_data_end+0xfffd3c2c>
   54040:	014001f4 	movhi	r5,7
   54044:	296e8884 	addi	r5,r5,-17886
   54048:	d9402c15 	stw	r5,176(sp)
   5404c:	058001c4 	movi	r22,7
   54050:	dcc02d17 	ldw	r19,180(sp)
   54054:	00000306 	br	54064 <___vfprintf_internal_r+0x15ec>
   54058:	42000204 	addi	r8,r8,8
   5405c:	843ffc04 	addi	r16,r16,-16
   54060:	8c3ef50e 	bge	r17,r16,53c38 <__alt_data_end+0xfffd3c38>
   54064:	18c00404 	addi	r3,r3,16
   54068:	10800044 	addi	r2,r2,1
   5406c:	45000015 	stw	r20,0(r8)
   54070:	44400115 	stw	r17,4(r8)
   54074:	d8c02015 	stw	r3,128(sp)
   54078:	d8801f15 	stw	r2,124(sp)
   5407c:	b0bff60e 	bge	r22,r2,54058 <__alt_data_end+0xfffd4058>
   54080:	d9801e04 	addi	r6,sp,120
   54084:	b80b883a 	mov	r5,r23
   54088:	9809883a 	mov	r4,r19
   5408c:	005ad840 	call	5ad84 <__sprint_r>
   54090:	103b7d1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54094:	d8c02017 	ldw	r3,128(sp)
   54098:	d8801f17 	ldw	r2,124(sp)
   5409c:	da000404 	addi	r8,sp,16
   540a0:	003fee06 	br	5405c <__alt_data_end+0xfffd405c>
   540a4:	9088703a 	and	r4,r18,r2
   540a8:	203eab1e 	bne	r4,zero,53b58 <__alt_data_end+0xfffd3b58>
   540ac:	dc401f17 	ldw	r17,124(sp)
   540b0:	40800115 	stw	r2,4(r8)
   540b4:	44000015 	stw	r16,0(r8)
   540b8:	8c400044 	addi	r17,r17,1
   540bc:	d8c02015 	stw	r3,128(sp)
   540c0:	dc401f15 	stw	r17,124(sp)
   540c4:	008001c4 	movi	r2,7
   540c8:	14400e16 	blt	r2,r17,54104 <___vfprintf_internal_r+0x168c>
   540cc:	45800204 	addi	r22,r8,8
   540d0:	003eca06 	br	53bfc <__alt_data_end+0xfffd3bfc>
   540d4:	010001f4 	movhi	r4,7
   540d8:	212e8884 	addi	r4,r4,-17886
   540dc:	d9002c15 	stw	r4,176(sp)
   540e0:	d8802c17 	ldw	r2,176(sp)
   540e4:	1c07883a 	add	r3,r3,r16
   540e8:	8c400044 	addi	r17,r17,1
   540ec:	b0800015 	stw	r2,0(r22)
   540f0:	b4000115 	stw	r16,4(r22)
   540f4:	d8c02015 	stw	r3,128(sp)
   540f8:	dc401f15 	stw	r17,124(sp)
   540fc:	008001c4 	movi	r2,7
   54100:	147ebd0e 	bge	r2,r17,53bf8 <__alt_data_end+0xfffd3bf8>
   54104:	d9002d17 	ldw	r4,180(sp)
   54108:	d9801e04 	addi	r6,sp,120
   5410c:	b80b883a 	mov	r5,r23
   54110:	005ad840 	call	5ad84 <__sprint_r>
   54114:	103b5c1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54118:	d8c02017 	ldw	r3,128(sp)
   5411c:	dc401f17 	ldw	r17,124(sp)
   54120:	dd800404 	addi	r22,sp,16
   54124:	003eb506 	br	53bfc <__alt_data_end+0xfffd3bfc>
   54128:	d9002d17 	ldw	r4,180(sp)
   5412c:	d9801e04 	addi	r6,sp,120
   54130:	b80b883a 	mov	r5,r23
   54134:	005ad840 	call	5ad84 <__sprint_r>
   54138:	103b531e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5413c:	d8c02017 	ldw	r3,128(sp)
   54140:	dc401f17 	ldw	r17,124(sp)
   54144:	da000404 	addi	r8,sp,16
   54148:	003e8d06 	br	53b80 <__alt_data_end+0xfffd3b80>
   5414c:	d9002d17 	ldw	r4,180(sp)
   54150:	d9801e04 	addi	r6,sp,120
   54154:	b80b883a 	mov	r5,r23
   54158:	005ad840 	call	5ad84 <__sprint_r>
   5415c:	103b4a1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54160:	d8c02017 	ldw	r3,128(sp)
   54164:	dc401f17 	ldw	r17,124(sp)
   54168:	dd800404 	addi	r22,sp,16
   5416c:	003e8f06 	br	53bac <__alt_data_end+0xfffd3bac>
   54170:	0027883a 	mov	r19,zero
   54174:	003f4a06 	br	53ea0 <__alt_data_end+0xfffd3ea0>
   54178:	d9002d17 	ldw	r4,180(sp)
   5417c:	d9801e04 	addi	r6,sp,120
   54180:	b80b883a 	mov	r5,r23
   54184:	005ad840 	call	5ad84 <__sprint_r>
   54188:	103b3f1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5418c:	d8c02017 	ldw	r3,128(sp)
   54190:	da000404 	addi	r8,sp,16
   54194:	003c7b06 	br	53384 <__alt_data_end+0xfffd3384>
   54198:	d9402a17 	ldw	r5,168(sp)
   5419c:	04e7c83a 	sub	r19,zero,r19
   541a0:	07000b44 	movi	fp,45
   541a4:	9804c03a 	cmpne	r2,r19,zero
   541a8:	05adc83a 	sub	r22,zero,r22
   541ac:	df002785 	stb	fp,158(sp)
   541b0:	b0adc83a 	sub	r22,r22,r2
   541b4:	28017b16 	blt	r5,zero,547a4 <___vfprintf_internal_r+0x1d2c>
   541b8:	00bfdfc4 	movi	r2,-129
   541bc:	90a4703a 	and	r18,r18,r2
   541c0:	003b8906 	br	52fe8 <__alt_data_end+0xfffd2fe8>
   541c4:	d9003617 	ldw	r4,216(sp)
   541c8:	d9403817 	ldw	r5,224(sp)
   541cc:	da003d15 	stw	r8,244(sp)
   541d0:	00595680 	call	59568 <__fpclassifyd>
   541d4:	da003d17 	ldw	r8,244(sp)
   541d8:	1000f026 	beq	r2,zero,5459c <___vfprintf_internal_r+0x1b24>
   541dc:	d9002a17 	ldw	r4,168(sp)
   541e0:	05bff7c4 	movi	r22,-33
   541e4:	00bfffc4 	movi	r2,-1
   541e8:	8dac703a 	and	r22,r17,r22
   541ec:	20820026 	beq	r4,r2,549f0 <___vfprintf_internal_r+0x1f78>
   541f0:	008011c4 	movi	r2,71
   541f4:	b081f726 	beq	r22,r2,549d4 <___vfprintf_internal_r+0x1f5c>
   541f8:	d9003817 	ldw	r4,224(sp)
   541fc:	90c04014 	ori	r3,r18,256
   54200:	d8c02c15 	stw	r3,176(sp)
   54204:	20021516 	blt	r4,zero,54a5c <___vfprintf_internal_r+0x1fe4>
   54208:	dcc03817 	ldw	r19,224(sp)
   5420c:	d8002905 	stb	zero,164(sp)
   54210:	00801984 	movi	r2,102
   54214:	8881f926 	beq	r17,r2,549fc <___vfprintf_internal_r+0x1f84>
   54218:	00801184 	movi	r2,70
   5421c:	88821c26 	beq	r17,r2,54a90 <___vfprintf_internal_r+0x2018>
   54220:	00801144 	movi	r2,69
   54224:	b081ef26 	beq	r22,r2,549e4 <___vfprintf_internal_r+0x1f6c>
   54228:	d8c02a17 	ldw	r3,168(sp)
   5422c:	d8802104 	addi	r2,sp,132
   54230:	d8800315 	stw	r2,12(sp)
   54234:	d9403617 	ldw	r5,216(sp)
   54238:	d8802504 	addi	r2,sp,148
   5423c:	d9002d17 	ldw	r4,180(sp)
   54240:	d8800215 	stw	r2,8(sp)
   54244:	d8802604 	addi	r2,sp,152
   54248:	d8c00015 	stw	r3,0(sp)
   5424c:	d8800115 	stw	r2,4(sp)
   54250:	01c00084 	movi	r7,2
   54254:	980d883a 	mov	r6,r19
   54258:	d8c03c15 	stw	r3,240(sp)
   5425c:	da003d15 	stw	r8,244(sp)
   54260:	00551a80 	call	551a8 <_dtoa_r>
   54264:	1021883a 	mov	r16,r2
   54268:	008019c4 	movi	r2,103
   5426c:	d8c03c17 	ldw	r3,240(sp)
   54270:	da003d17 	ldw	r8,244(sp)
   54274:	88817126 	beq	r17,r2,5483c <___vfprintf_internal_r+0x1dc4>
   54278:	008011c4 	movi	r2,71
   5427c:	88829126 	beq	r17,r2,54cc4 <___vfprintf_internal_r+0x224c>
   54280:	80f9883a 	add	fp,r16,r3
   54284:	d9003617 	ldw	r4,216(sp)
   54288:	000d883a 	mov	r6,zero
   5428c:	000f883a 	mov	r7,zero
   54290:	980b883a 	mov	r5,r19
   54294:	da003d15 	stw	r8,244(sp)
   54298:	005eb080 	call	5eb08 <__eqdf2>
   5429c:	da003d17 	ldw	r8,244(sp)
   542a0:	10018d26 	beq	r2,zero,548d8 <___vfprintf_internal_r+0x1e60>
   542a4:	d8802117 	ldw	r2,132(sp)
   542a8:	1700062e 	bgeu	r2,fp,542c4 <___vfprintf_internal_r+0x184c>
   542ac:	01000c04 	movi	r4,48
   542b0:	10c00044 	addi	r3,r2,1
   542b4:	d8c02115 	stw	r3,132(sp)
   542b8:	11000005 	stb	r4,0(r2)
   542bc:	d8802117 	ldw	r2,132(sp)
   542c0:	173ffb36 	bltu	r2,fp,542b0 <__alt_data_end+0xfffd42b0>
   542c4:	1405c83a 	sub	r2,r2,r16
   542c8:	d8803315 	stw	r2,204(sp)
   542cc:	008011c4 	movi	r2,71
   542d0:	b0817626 	beq	r22,r2,548ac <___vfprintf_internal_r+0x1e34>
   542d4:	00801944 	movi	r2,101
   542d8:	1442800e 	bge	r2,r17,54cdc <___vfprintf_internal_r+0x2264>
   542dc:	d8c02617 	ldw	r3,152(sp)
   542e0:	00801984 	movi	r2,102
   542e4:	d8c03215 	stw	r3,200(sp)
   542e8:	8881fe26 	beq	r17,r2,54ae4 <___vfprintf_internal_r+0x206c>
   542ec:	d8c03217 	ldw	r3,200(sp)
   542f0:	d9003317 	ldw	r4,204(sp)
   542f4:	1901dd16 	blt	r3,r4,54a6c <___vfprintf_internal_r+0x1ff4>
   542f8:	9480004c 	andi	r18,r18,1
   542fc:	90022b1e 	bne	r18,zero,54bac <___vfprintf_internal_r+0x2134>
   54300:	1805883a 	mov	r2,r3
   54304:	18028316 	blt	r3,zero,54d14 <___vfprintf_internal_r+0x229c>
   54308:	d8c03217 	ldw	r3,200(sp)
   5430c:	044019c4 	movi	r17,103
   54310:	d8c02b15 	stw	r3,172(sp)
   54314:	df002907 	ldb	fp,164(sp)
   54318:	e001531e 	bne	fp,zero,54868 <___vfprintf_internal_r+0x1df0>
   5431c:	df002783 	ldbu	fp,158(sp)
   54320:	d8802915 	stw	r2,164(sp)
   54324:	dc802c17 	ldw	r18,176(sp)
   54328:	d8002a15 	stw	zero,168(sp)
   5432c:	003baf06 	br	531ec <__alt_data_end+0xfffd31ec>
   54330:	d8c02e17 	ldw	r3,184(sp)
   54334:	d9002e17 	ldw	r4,184(sp)
   54338:	d9402e17 	ldw	r5,184(sp)
   5433c:	18c00017 	ldw	r3,0(r3)
   54340:	21000117 	ldw	r4,4(r4)
   54344:	29400204 	addi	r5,r5,8
   54348:	d8c03615 	stw	r3,216(sp)
   5434c:	d9003815 	stw	r4,224(sp)
   54350:	d9402e15 	stw	r5,184(sp)
   54354:	003b5006 	br	53098 <__alt_data_end+0xfffd3098>
   54358:	ac400007 	ldb	r17,0(r21)
   5435c:	003a2806 	br	52c00 <__alt_data_end+0xfffd2c00>
   54360:	9080100c 	andi	r2,r18,64
   54364:	1000a826 	beq	r2,zero,54608 <___vfprintf_internal_r+0x1b90>
   54368:	d8c02e17 	ldw	r3,184(sp)
   5436c:	002d883a 	mov	r22,zero
   54370:	1cc0000b 	ldhu	r19,0(r3)
   54374:	18c00104 	addi	r3,r3,4
   54378:	d8c02e15 	stw	r3,184(sp)
   5437c:	003caf06 	br	5363c <__alt_data_end+0xfffd363c>
   54380:	d9002e17 	ldw	r4,184(sp)
   54384:	d9402a17 	ldw	r5,168(sp)
   54388:	002d883a 	mov	r22,zero
   5438c:	20800104 	addi	r2,r4,4
   54390:	24c00017 	ldw	r19,0(r4)
   54394:	283ebb0e 	bge	r5,zero,53e84 <__alt_data_end+0xfffd3e84>
   54398:	003ef106 	br	53f60 <__alt_data_end+0xfffd3f60>
   5439c:	9080040c 	andi	r2,r18,16
   543a0:	1000921e 	bne	r2,zero,545ec <___vfprintf_internal_r+0x1b74>
   543a4:	9480100c 	andi	r18,r18,64
   543a8:	90013926 	beq	r18,zero,54890 <___vfprintf_internal_r+0x1e18>
   543ac:	d9402e17 	ldw	r5,184(sp)
   543b0:	d8c02f17 	ldw	r3,188(sp)
   543b4:	28800017 	ldw	r2,0(r5)
   543b8:	29400104 	addi	r5,r5,4
   543bc:	d9402e15 	stw	r5,184(sp)
   543c0:	10c0000d 	sth	r3,0(r2)
   543c4:	0039e406 	br	52b58 <__alt_data_end+0xfffd2b58>
   543c8:	9080100c 	andi	r2,r18,64
   543cc:	10008026 	beq	r2,zero,545d0 <___vfprintf_internal_r+0x1b58>
   543d0:	d8802e17 	ldw	r2,184(sp)
   543d4:	14c0000f 	ldh	r19,0(r2)
   543d8:	10800104 	addi	r2,r2,4
   543dc:	d8802e15 	stw	r2,184(sp)
   543e0:	982dd7fa 	srai	r22,r19,31
   543e4:	b005883a 	mov	r2,r22
   543e8:	003af706 	br	52fc8 <__alt_data_end+0xfffd2fc8>
   543ec:	9080100c 	andi	r2,r18,64
   543f0:	d8002785 	stb	zero,158(sp)
   543f4:	10008a1e 	bne	r2,zero,54620 <___vfprintf_internal_r+0x1ba8>
   543f8:	d9002e17 	ldw	r4,184(sp)
   543fc:	d9402a17 	ldw	r5,168(sp)
   54400:	002d883a 	mov	r22,zero
   54404:	20800104 	addi	r2,r4,4
   54408:	24c00017 	ldw	r19,0(r4)
   5440c:	283e4b0e 	bge	r5,zero,53d3c <__alt_data_end+0xfffd3d3c>
   54410:	9d86b03a 	or	r3,r19,r22
   54414:	d8802e15 	stw	r2,184(sp)
   54418:	183e4c1e 	bne	r3,zero,53d4c <__alt_data_end+0xfffd3d4c>
   5441c:	0039883a 	mov	fp,zero
   54420:	0005883a 	mov	r2,zero
   54424:	003d4006 	br	53928 <__alt_data_end+0xfffd3928>
   54428:	014001f4 	movhi	r5,7
   5442c:	296e8884 	addi	r5,r5,-17886
   54430:	d9402c15 	stw	r5,176(sp)
   54434:	d9402c17 	ldw	r5,176(sp)
   54438:	1c47883a 	add	r3,r3,r17
   5443c:	10800044 	addi	r2,r2,1
   54440:	41400015 	stw	r5,0(r8)
   54444:	44400115 	stw	r17,4(r8)
   54448:	d8c02015 	stw	r3,128(sp)
   5444c:	d8801f15 	stw	r2,124(sp)
   54450:	010001c4 	movi	r4,7
   54454:	20bec816 	blt	r4,r2,53f78 <__alt_data_end+0xfffd3f78>
   54458:	42000204 	addi	r8,r8,8
   5445c:	003ecd06 	br	53f94 <__alt_data_end+0xfffd3f94>
   54460:	d9002a17 	ldw	r4,168(sp)
   54464:	d8002785 	stb	zero,158(sp)
   54468:	203d2d16 	blt	r4,zero,53920 <__alt_data_end+0xfffd3920>
   5446c:	00bfdfc4 	movi	r2,-129
   54470:	90a4703a 	and	r18,r18,r2
   54474:	003a6106 	br	52dfc <__alt_data_end+0xfffd2dfc>
   54478:	010001f4 	movhi	r4,7
   5447c:	212e8884 	addi	r4,r4,-17886
   54480:	d9002c15 	stw	r4,176(sp)
   54484:	003bea06 	br	53430 <__alt_data_end+0xfffd3430>
   54488:	d9002d17 	ldw	r4,180(sp)
   5448c:	d9801e04 	addi	r6,sp,120
   54490:	b80b883a 	mov	r5,r23
   54494:	005ad840 	call	5ad84 <__sprint_r>
   54498:	103a7b1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5449c:	d8c02017 	ldw	r3,128(sp)
   544a0:	da000404 	addi	r8,sp,16
   544a4:	003d4106 	br	539ac <__alt_data_end+0xfffd39ac>
   544a8:	d8801f17 	ldw	r2,124(sp)
   544ac:	014001f4 	movhi	r5,7
   544b0:	01000044 	movi	r4,1
   544b4:	18c00044 	addi	r3,r3,1
   544b8:	10800044 	addi	r2,r2,1
   544bc:	296e8004 	addi	r5,r5,-17920
   544c0:	41000115 	stw	r4,4(r8)
   544c4:	41400015 	stw	r5,0(r8)
   544c8:	d8c02015 	stw	r3,128(sp)
   544cc:	d8801f15 	stw	r2,124(sp)
   544d0:	010001c4 	movi	r4,7
   544d4:	20805c16 	blt	r4,r2,54648 <___vfprintf_internal_r+0x1bd0>
   544d8:	42000204 	addi	r8,r8,8
   544dc:	8800041e 	bne	r17,zero,544f0 <___vfprintf_internal_r+0x1a78>
   544e0:	d8803317 	ldw	r2,204(sp)
   544e4:	1000021e 	bne	r2,zero,544f0 <___vfprintf_internal_r+0x1a78>
   544e8:	9080004c 	andi	r2,r18,1
   544ec:	103be726 	beq	r2,zero,5348c <__alt_data_end+0xfffd348c>
   544f0:	d9003717 	ldw	r4,220(sp)
   544f4:	d8801f17 	ldw	r2,124(sp)
   544f8:	d9403417 	ldw	r5,208(sp)
   544fc:	20c7883a 	add	r3,r4,r3
   54500:	10800044 	addi	r2,r2,1
   54504:	41000115 	stw	r4,4(r8)
   54508:	41400015 	stw	r5,0(r8)
   5450c:	d8c02015 	stw	r3,128(sp)
   54510:	d8801f15 	stw	r2,124(sp)
   54514:	010001c4 	movi	r4,7
   54518:	20812116 	blt	r4,r2,549a0 <___vfprintf_internal_r+0x1f28>
   5451c:	42000204 	addi	r8,r8,8
   54520:	0463c83a 	sub	r17,zero,r17
   54524:	0440730e 	bge	zero,r17,546f4 <___vfprintf_internal_r+0x1c7c>
   54528:	05800404 	movi	r22,16
   5452c:	b440860e 	bge	r22,r17,54748 <___vfprintf_internal_r+0x1cd0>
   54530:	014001f4 	movhi	r5,7
   54534:	296e8884 	addi	r5,r5,-17886
   54538:	d9402c15 	stw	r5,176(sp)
   5453c:	070001c4 	movi	fp,7
   54540:	dcc02d17 	ldw	r19,180(sp)
   54544:	00000306 	br	54554 <___vfprintf_internal_r+0x1adc>
   54548:	42000204 	addi	r8,r8,8
   5454c:	8c7ffc04 	addi	r17,r17,-16
   54550:	b440800e 	bge	r22,r17,54754 <___vfprintf_internal_r+0x1cdc>
   54554:	18c00404 	addi	r3,r3,16
   54558:	10800044 	addi	r2,r2,1
   5455c:	45000015 	stw	r20,0(r8)
   54560:	45800115 	stw	r22,4(r8)
   54564:	d8c02015 	stw	r3,128(sp)
   54568:	d8801f15 	stw	r2,124(sp)
   5456c:	e0bff60e 	bge	fp,r2,54548 <__alt_data_end+0xfffd4548>
   54570:	d9801e04 	addi	r6,sp,120
   54574:	b80b883a 	mov	r5,r23
   54578:	9809883a 	mov	r4,r19
   5457c:	005ad840 	call	5ad84 <__sprint_r>
   54580:	103a411e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54584:	d8c02017 	ldw	r3,128(sp)
   54588:	d8801f17 	ldw	r2,124(sp)
   5458c:	da000404 	addi	r8,sp,16
   54590:	003fee06 	br	5454c <__alt_data_end+0xfffd454c>
   54594:	00bfffc4 	movi	r2,-1
   54598:	003a3f06 	br	52e98 <__alt_data_end+0xfffd2e98>
   5459c:	008011c4 	movi	r2,71
   545a0:	1440b816 	blt	r2,r17,54884 <___vfprintf_internal_r+0x1e0c>
   545a4:	040001f4 	movhi	r16,7
   545a8:	842e7204 	addi	r16,r16,-17976
   545ac:	00c000c4 	movi	r3,3
   545b0:	00bfdfc4 	movi	r2,-129
   545b4:	d8c02915 	stw	r3,164(sp)
   545b8:	90a4703a 	and	r18,r18,r2
   545bc:	df002783 	ldbu	fp,158(sp)
   545c0:	d8c02b15 	stw	r3,172(sp)
   545c4:	d8002a15 	stw	zero,168(sp)
   545c8:	d8003215 	stw	zero,200(sp)
   545cc:	003b0706 	br	531ec <__alt_data_end+0xfffd31ec>
   545d0:	d8c02e17 	ldw	r3,184(sp)
   545d4:	1cc00017 	ldw	r19,0(r3)
   545d8:	18c00104 	addi	r3,r3,4
   545dc:	d8c02e15 	stw	r3,184(sp)
   545e0:	982dd7fa 	srai	r22,r19,31
   545e4:	b005883a 	mov	r2,r22
   545e8:	003a7706 	br	52fc8 <__alt_data_end+0xfffd2fc8>
   545ec:	d8c02e17 	ldw	r3,184(sp)
   545f0:	d9002f17 	ldw	r4,188(sp)
   545f4:	18800017 	ldw	r2,0(r3)
   545f8:	18c00104 	addi	r3,r3,4
   545fc:	d8c02e15 	stw	r3,184(sp)
   54600:	11000015 	stw	r4,0(r2)
   54604:	00395406 	br	52b58 <__alt_data_end+0xfffd2b58>
   54608:	d9002e17 	ldw	r4,184(sp)
   5460c:	002d883a 	mov	r22,zero
   54610:	24c00017 	ldw	r19,0(r4)
   54614:	21000104 	addi	r4,r4,4
   54618:	d9002e15 	stw	r4,184(sp)
   5461c:	003c0706 	br	5363c <__alt_data_end+0xfffd363c>
   54620:	d9402e17 	ldw	r5,184(sp)
   54624:	d8c02a17 	ldw	r3,168(sp)
   54628:	002d883a 	mov	r22,zero
   5462c:	28800104 	addi	r2,r5,4
   54630:	2cc0000b 	ldhu	r19,0(r5)
   54634:	183dc10e 	bge	r3,zero,53d3c <__alt_data_end+0xfffd3d3c>
   54638:	003f7506 	br	54410 <__alt_data_end+0xfffd4410>
   5463c:	040001f4 	movhi	r16,7
   54640:	842e7004 	addi	r16,r16,-17984
   54644:	003aa706 	br	530e4 <__alt_data_end+0xfffd30e4>
   54648:	d9002d17 	ldw	r4,180(sp)
   5464c:	d9801e04 	addi	r6,sp,120
   54650:	b80b883a 	mov	r5,r23
   54654:	005ad840 	call	5ad84 <__sprint_r>
   54658:	103a0b1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5465c:	dc402617 	ldw	r17,152(sp)
   54660:	d8c02017 	ldw	r3,128(sp)
   54664:	da000404 	addi	r8,sp,16
   54668:	003f9c06 	br	544dc <__alt_data_end+0xfffd44dc>
   5466c:	ac400043 	ldbu	r17,1(r21)
   54670:	84000814 	ori	r16,r16,32
   54674:	ad400044 	addi	r21,r21,1
   54678:	8c403fcc 	andi	r17,r17,255
   5467c:	8c40201c 	xori	r17,r17,128
   54680:	8c7fe004 	addi	r17,r17,-128
   54684:	00395e06 	br	52c00 <__alt_data_end+0xfffd2c00>
   54688:	d8c02e15 	stw	r3,184(sp)
   5468c:	0039883a 	mov	fp,zero
   54690:	003e3506 	br	53f68 <__alt_data_end+0xfffd3f68>
   54694:	d9002d17 	ldw	r4,180(sp)
   54698:	d9801e04 	addi	r6,sp,120
   5469c:	b80b883a 	mov	r5,r23
   546a0:	005ad840 	call	5ad84 <__sprint_r>
   546a4:	1039f81e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   546a8:	d8c02017 	ldw	r3,128(sp)
   546ac:	da000404 	addi	r8,sp,16
   546b0:	003cd006 	br	539f4 <__alt_data_end+0xfffd39f4>
   546b4:	8009883a 	mov	r4,r16
   546b8:	df003d15 	stw	fp,244(sp)
   546bc:	005071c0 	call	5071c <strlen>
   546c0:	d8802b15 	stw	r2,172(sp)
   546c4:	da003d17 	ldw	r8,244(sp)
   546c8:	103c200e 	bge	r2,zero,5374c <__alt_data_end+0xfffd374c>
   546cc:	0005883a 	mov	r2,zero
   546d0:	003c1e06 	br	5374c <__alt_data_end+0xfffd374c>
   546d4:	d9002d17 	ldw	r4,180(sp)
   546d8:	d9801e04 	addi	r6,sp,120
   546dc:	b80b883a 	mov	r5,r23
   546e0:	005ad840 	call	5ad84 <__sprint_r>
   546e4:	1039e81e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   546e8:	d8c02017 	ldw	r3,128(sp)
   546ec:	d8801f17 	ldw	r2,124(sp)
   546f0:	da000404 	addi	r8,sp,16
   546f4:	d9403317 	ldw	r5,204(sp)
   546f8:	10800044 	addi	r2,r2,1
   546fc:	44000015 	stw	r16,0(r8)
   54700:	28c7883a 	add	r3,r5,r3
   54704:	003b5b06 	br	53474 <__alt_data_end+0xfffd3474>
   54708:	010001f4 	movhi	r4,7
   5470c:	212e8c84 	addi	r4,r4,-17870
   54710:	d9003515 	stw	r4,212(sp)
   54714:	003af206 	br	532e0 <__alt_data_end+0xfffd32e0>
   54718:	013fffc4 	movi	r4,-1
   5471c:	003a0806 	br	52f40 <__alt_data_end+0xfffd2f40>
   54720:	0023883a 	mov	r17,zero
   54724:	003d9d06 	br	53d9c <__alt_data_end+0xfffd3d9c>
   54728:	d9002d17 	ldw	r4,180(sp)
   5472c:	d9801e04 	addi	r6,sp,120
   54730:	b80b883a 	mov	r5,r23
   54734:	005ad840 	call	5ad84 <__sprint_r>
   54738:	1039d31e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   5473c:	d8c02017 	ldw	r3,128(sp)
   54740:	da000404 	addi	r8,sp,16
   54744:	003d9406 	br	53d98 <__alt_data_end+0xfffd3d98>
   54748:	010001f4 	movhi	r4,7
   5474c:	212e8884 	addi	r4,r4,-17886
   54750:	d9002c15 	stw	r4,176(sp)
   54754:	d9002c17 	ldw	r4,176(sp)
   54758:	1c47883a 	add	r3,r3,r17
   5475c:	10800044 	addi	r2,r2,1
   54760:	41000015 	stw	r4,0(r8)
   54764:	44400115 	stw	r17,4(r8)
   54768:	d8c02015 	stw	r3,128(sp)
   5476c:	d8801f15 	stw	r2,124(sp)
   54770:	010001c4 	movi	r4,7
   54774:	20bfd716 	blt	r4,r2,546d4 <__alt_data_end+0xfffd46d4>
   54778:	42000204 	addi	r8,r8,8
   5477c:	003fdd06 	br	546f4 <__alt_data_end+0xfffd46f4>
   54780:	d9002d17 	ldw	r4,180(sp)
   54784:	d9801e04 	addi	r6,sp,120
   54788:	b80b883a 	mov	r5,r23
   5478c:	005ad840 	call	5ad84 <__sprint_r>
   54790:	1039bd1e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54794:	d8802617 	ldw	r2,152(sp)
   54798:	d8c02017 	ldw	r3,128(sp)
   5479c:	da000404 	addi	r8,sp,16
   547a0:	003e1006 	br	53fe4 <__alt_data_end+0xfffd3fe4>
   547a4:	00800044 	movi	r2,1
   547a8:	10803fcc 	andi	r2,r2,255
   547ac:	00c00044 	movi	r3,1
   547b0:	10fa0d26 	beq	r2,r3,52fe8 <__alt_data_end+0xfffd2fe8>
   547b4:	00c00084 	movi	r3,2
   547b8:	10fbaf26 	beq	r2,r3,53678 <__alt_data_end+0xfffd3678>
   547bc:	003a6d06 	br	53174 <__alt_data_end+0xfffd3174>
   547c0:	010001f4 	movhi	r4,7
   547c4:	212e8c84 	addi	r4,r4,-17870
   547c8:	d9003515 	stw	r4,212(sp)
   547cc:	003b5406 	br	53520 <__alt_data_end+0xfffd3520>
   547d0:	d8802a17 	ldw	r2,168(sp)
   547d4:	00c00184 	movi	r3,6
   547d8:	1880012e 	bgeu	r3,r2,547e0 <___vfprintf_internal_r+0x1d68>
   547dc:	1805883a 	mov	r2,r3
   547e0:	d8802b15 	stw	r2,172(sp)
   547e4:	1000ef16 	blt	r2,zero,54ba4 <___vfprintf_internal_r+0x212c>
   547e8:	040001f4 	movhi	r16,7
   547ec:	d8802915 	stw	r2,164(sp)
   547f0:	dcc02e15 	stw	r19,184(sp)
   547f4:	d8002a15 	stw	zero,168(sp)
   547f8:	d8003215 	stw	zero,200(sp)
   547fc:	842e7e04 	addi	r16,r16,-17928
   54800:	0039883a 	mov	fp,zero
   54804:	003a8006 	br	53208 <__alt_data_end+0xfffd3208>
   54808:	0021883a 	mov	r16,zero
   5480c:	003e0706 	br	5402c <__alt_data_end+0xfffd402c>
   54810:	d9002d17 	ldw	r4,180(sp)
   54814:	d9801e04 	addi	r6,sp,120
   54818:	b80b883a 	mov	r5,r23
   5481c:	005ad840 	call	5ad84 <__sprint_r>
   54820:	1039991e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   54824:	d8802617 	ldw	r2,152(sp)
   54828:	d9403317 	ldw	r5,204(sp)
   5482c:	d8c02017 	ldw	r3,128(sp)
   54830:	da000404 	addi	r8,sp,16
   54834:	2885c83a 	sub	r2,r5,r2
   54838:	003dfb06 	br	54028 <__alt_data_end+0xfffd4028>
   5483c:	9080004c 	andi	r2,r18,1
   54840:	103e8f1e 	bne	r2,zero,54280 <__alt_data_end+0xfffd4280>
   54844:	d8802117 	ldw	r2,132(sp)
   54848:	003e9e06 	br	542c4 <__alt_data_end+0xfffd42c4>
   5484c:	1025883a 	mov	r18,r2
   54850:	0039883a 	mov	fp,zero
   54854:	00800084 	movi	r2,2
   54858:	003fd306 	br	547a8 <__alt_data_end+0xfffd47a8>
   5485c:	07000b44 	movi	fp,45
   54860:	df002785 	stb	fp,158(sp)
   54864:	003a1b06 	br	530d4 <__alt_data_end+0xfffd30d4>
   54868:	00c00b44 	movi	r3,45
   5486c:	d8c02785 	stb	r3,158(sp)
   54870:	d8802915 	stw	r2,164(sp)
   54874:	dc802c17 	ldw	r18,176(sp)
   54878:	d8002a15 	stw	zero,168(sp)
   5487c:	07000b44 	movi	fp,45
   54880:	003a5e06 	br	531fc <__alt_data_end+0xfffd31fc>
   54884:	040001f4 	movhi	r16,7
   54888:	842e7304 	addi	r16,r16,-17972
   5488c:	003f4706 	br	545ac <__alt_data_end+0xfffd45ac>
   54890:	d9002e17 	ldw	r4,184(sp)
   54894:	d9402f17 	ldw	r5,188(sp)
   54898:	20800017 	ldw	r2,0(r4)
   5489c:	21000104 	addi	r4,r4,4
   548a0:	d9002e15 	stw	r4,184(sp)
   548a4:	11400015 	stw	r5,0(r2)
   548a8:	0038ab06 	br	52b58 <__alt_data_end+0xfffd2b58>
   548ac:	dd802617 	ldw	r22,152(sp)
   548b0:	00bfff44 	movi	r2,-3
   548b4:	b0801c16 	blt	r22,r2,54928 <___vfprintf_internal_r+0x1eb0>
   548b8:	d9402a17 	ldw	r5,168(sp)
   548bc:	2d801a16 	blt	r5,r22,54928 <___vfprintf_internal_r+0x1eb0>
   548c0:	dd803215 	stw	r22,200(sp)
   548c4:	003e8906 	br	542ec <__alt_data_end+0xfffd42ec>
   548c8:	010001f4 	movhi	r4,7
   548cc:	212e8884 	addi	r4,r4,-17886
   548d0:	d9002c15 	stw	r4,176(sp)
   548d4:	003c9106 	br	53b1c <__alt_data_end+0xfffd3b1c>
   548d8:	e005883a 	mov	r2,fp
   548dc:	003e7906 	br	542c4 <__alt_data_end+0xfffd42c4>
   548e0:	d9002a17 	ldw	r4,168(sp)
   548e4:	df002783 	ldbu	fp,158(sp)
   548e8:	dcc02e15 	stw	r19,184(sp)
   548ec:	d9002915 	stw	r4,164(sp)
   548f0:	d9002b15 	stw	r4,172(sp)
   548f4:	d8002a15 	stw	zero,168(sp)
   548f8:	d8003215 	stw	zero,200(sp)
   548fc:	003a3b06 	br	531ec <__alt_data_end+0xfffd31ec>
   54900:	9080004c 	andi	r2,r18,1
   54904:	0039883a 	mov	fp,zero
   54908:	10000426 	beq	r2,zero,5491c <___vfprintf_internal_r+0x1ea4>
   5490c:	00800c04 	movi	r2,48
   54910:	dc001dc4 	addi	r16,sp,119
   54914:	d8801dc5 	stb	r2,119(sp)
   54918:	003b6406 	br	536ac <__alt_data_end+0xfffd36ac>
   5491c:	d8002b15 	stw	zero,172(sp)
   54920:	dc001e04 	addi	r16,sp,120
   54924:	003a2b06 	br	531d4 <__alt_data_end+0xfffd31d4>
   54928:	8c7fff84 	addi	r17,r17,-2
   5492c:	b5bfffc4 	addi	r22,r22,-1
   54930:	dd802615 	stw	r22,152(sp)
   54934:	dc4022c5 	stb	r17,139(sp)
   54938:	b000bf16 	blt	r22,zero,54c38 <___vfprintf_internal_r+0x21c0>
   5493c:	00800ac4 	movi	r2,43
   54940:	d8802305 	stb	r2,140(sp)
   54944:	00800244 	movi	r2,9
   54948:	15807016 	blt	r2,r22,54b0c <___vfprintf_internal_r+0x2094>
   5494c:	00800c04 	movi	r2,48
   54950:	b5800c04 	addi	r22,r22,48
   54954:	d8802345 	stb	r2,141(sp)
   54958:	dd802385 	stb	r22,142(sp)
   5495c:	d88023c4 	addi	r2,sp,143
   54960:	df0022c4 	addi	fp,sp,139
   54964:	d8c03317 	ldw	r3,204(sp)
   54968:	1739c83a 	sub	fp,r2,fp
   5496c:	d9003317 	ldw	r4,204(sp)
   54970:	e0c7883a 	add	r3,fp,r3
   54974:	df003a15 	stw	fp,232(sp)
   54978:	d8c02b15 	stw	r3,172(sp)
   5497c:	00800044 	movi	r2,1
   54980:	1100b30e 	bge	r2,r4,54c50 <___vfprintf_internal_r+0x21d8>
   54984:	d8c02b17 	ldw	r3,172(sp)
   54988:	18c00044 	addi	r3,r3,1
   5498c:	d8c02b15 	stw	r3,172(sp)
   54990:	1805883a 	mov	r2,r3
   54994:	1800ac16 	blt	r3,zero,54c48 <___vfprintf_internal_r+0x21d0>
   54998:	d8003215 	stw	zero,200(sp)
   5499c:	003e5d06 	br	54314 <__alt_data_end+0xfffd4314>
   549a0:	d9002d17 	ldw	r4,180(sp)
   549a4:	d9801e04 	addi	r6,sp,120
   549a8:	b80b883a 	mov	r5,r23
   549ac:	005ad840 	call	5ad84 <__sprint_r>
   549b0:	1039351e 	bne	r2,zero,52e88 <__alt_data_end+0xfffd2e88>
   549b4:	dc402617 	ldw	r17,152(sp)
   549b8:	d8c02017 	ldw	r3,128(sp)
   549bc:	d8801f17 	ldw	r2,124(sp)
   549c0:	da000404 	addi	r8,sp,16
   549c4:	003ed606 	br	54520 <__alt_data_end+0xfffd4520>
   549c8:	182b883a 	mov	r21,r3
   549cc:	d8002a15 	stw	zero,168(sp)
   549d0:	00388c06 	br	52c04 <__alt_data_end+0xfffd2c04>
   549d4:	d8802a17 	ldw	r2,168(sp)
   549d8:	103e071e 	bne	r2,zero,541f8 <__alt_data_end+0xfffd41f8>
   549dc:	dc002a15 	stw	r16,168(sp)
   549e0:	003e0506 	br	541f8 <__alt_data_end+0xfffd41f8>
   549e4:	d9002a17 	ldw	r4,168(sp)
   549e8:	20c00044 	addi	r3,r4,1
   549ec:	003e0f06 	br	5422c <__alt_data_end+0xfffd422c>
   549f0:	01400184 	movi	r5,6
   549f4:	d9402a15 	stw	r5,168(sp)
   549f8:	003dff06 	br	541f8 <__alt_data_end+0xfffd41f8>
   549fc:	d8802104 	addi	r2,sp,132
   54a00:	d8800315 	stw	r2,12(sp)
   54a04:	d8802504 	addi	r2,sp,148
   54a08:	d8800215 	stw	r2,8(sp)
   54a0c:	d8802604 	addi	r2,sp,152
   54a10:	d8800115 	stw	r2,4(sp)
   54a14:	d8802a17 	ldw	r2,168(sp)
   54a18:	d9403617 	ldw	r5,216(sp)
   54a1c:	d9002d17 	ldw	r4,180(sp)
   54a20:	d8800015 	stw	r2,0(sp)
   54a24:	01c000c4 	movi	r7,3
   54a28:	980d883a 	mov	r6,r19
   54a2c:	da003d15 	stw	r8,244(sp)
   54a30:	00551a80 	call	551a8 <_dtoa_r>
   54a34:	d8c02a17 	ldw	r3,168(sp)
   54a38:	da003d17 	ldw	r8,244(sp)
   54a3c:	1021883a 	mov	r16,r2
   54a40:	10f9883a 	add	fp,r2,r3
   54a44:	81000007 	ldb	r4,0(r16)
   54a48:	00800c04 	movi	r2,48
   54a4c:	20805e26 	beq	r4,r2,54bc8 <___vfprintf_internal_r+0x2150>
   54a50:	d8c02617 	ldw	r3,152(sp)
   54a54:	e0f9883a 	add	fp,fp,r3
   54a58:	003e0a06 	br	54284 <__alt_data_end+0xfffd4284>
   54a5c:	00c00b44 	movi	r3,45
   54a60:	24e0003c 	xorhi	r19,r4,32768
   54a64:	d8c02905 	stb	r3,164(sp)
   54a68:	003de906 	br	54210 <__alt_data_end+0xfffd4210>
   54a6c:	d8c03217 	ldw	r3,200(sp)
   54a70:	00c07a0e 	bge	zero,r3,54c5c <___vfprintf_internal_r+0x21e4>
   54a74:	00800044 	movi	r2,1
   54a78:	d9003317 	ldw	r4,204(sp)
   54a7c:	1105883a 	add	r2,r2,r4
   54a80:	d8802b15 	stw	r2,172(sp)
   54a84:	10004e16 	blt	r2,zero,54bc0 <___vfprintf_internal_r+0x2148>
   54a88:	044019c4 	movi	r17,103
   54a8c:	003e2106 	br	54314 <__alt_data_end+0xfffd4314>
   54a90:	d9002a17 	ldw	r4,168(sp)
   54a94:	d8802104 	addi	r2,sp,132
   54a98:	d8800315 	stw	r2,12(sp)
   54a9c:	d9000015 	stw	r4,0(sp)
   54aa0:	d8802504 	addi	r2,sp,148
   54aa4:	d9403617 	ldw	r5,216(sp)
   54aa8:	d9002d17 	ldw	r4,180(sp)
   54aac:	d8800215 	stw	r2,8(sp)
   54ab0:	d8802604 	addi	r2,sp,152
   54ab4:	d8800115 	stw	r2,4(sp)
   54ab8:	01c000c4 	movi	r7,3
   54abc:	980d883a 	mov	r6,r19
   54ac0:	da003d15 	stw	r8,244(sp)
   54ac4:	00551a80 	call	551a8 <_dtoa_r>
   54ac8:	d8c02a17 	ldw	r3,168(sp)
   54acc:	da003d17 	ldw	r8,244(sp)
   54ad0:	1021883a 	mov	r16,r2
   54ad4:	00801184 	movi	r2,70
   54ad8:	80f9883a 	add	fp,r16,r3
   54adc:	88bfd926 	beq	r17,r2,54a44 <__alt_data_end+0xfffd4a44>
   54ae0:	003de806 	br	54284 <__alt_data_end+0xfffd4284>
   54ae4:	d9002a17 	ldw	r4,168(sp)
   54ae8:	00c04d0e 	bge	zero,r3,54c20 <___vfprintf_internal_r+0x21a8>
   54aec:	2000441e 	bne	r4,zero,54c00 <___vfprintf_internal_r+0x2188>
   54af0:	9480004c 	andi	r18,r18,1
   54af4:	9000421e 	bne	r18,zero,54c00 <___vfprintf_internal_r+0x2188>
   54af8:	1805883a 	mov	r2,r3
   54afc:	18006f16 	blt	r3,zero,54cbc <___vfprintf_internal_r+0x2244>
   54b00:	d8c03217 	ldw	r3,200(sp)
   54b04:	d8c02b15 	stw	r3,172(sp)
   54b08:	003e0206 	br	54314 <__alt_data_end+0xfffd4314>
   54b0c:	df0022c4 	addi	fp,sp,139
   54b10:	dc002a15 	stw	r16,168(sp)
   54b14:	4027883a 	mov	r19,r8
   54b18:	e021883a 	mov	r16,fp
   54b1c:	b009883a 	mov	r4,r22
   54b20:	01400284 	movi	r5,10
   54b24:	004d9840 	call	4d984 <__modsi3>
   54b28:	10800c04 	addi	r2,r2,48
   54b2c:	843fffc4 	addi	r16,r16,-1
   54b30:	b009883a 	mov	r4,r22
   54b34:	01400284 	movi	r5,10
   54b38:	80800005 	stb	r2,0(r16)
   54b3c:	004d9000 	call	4d900 <__divsi3>
   54b40:	102d883a 	mov	r22,r2
   54b44:	00800244 	movi	r2,9
   54b48:	15bff416 	blt	r2,r22,54b1c <__alt_data_end+0xfffd4b1c>
   54b4c:	9811883a 	mov	r8,r19
   54b50:	b0800c04 	addi	r2,r22,48
   54b54:	8027883a 	mov	r19,r16
   54b58:	997fffc4 	addi	r5,r19,-1
   54b5c:	98bfffc5 	stb	r2,-1(r19)
   54b60:	dc002a17 	ldw	r16,168(sp)
   54b64:	2f006d2e 	bgeu	r5,fp,54d1c <___vfprintf_internal_r+0x22a4>
   54b68:	d9c02384 	addi	r7,sp,142
   54b6c:	3ccfc83a 	sub	r7,r7,r19
   54b70:	d9002344 	addi	r4,sp,141
   54b74:	e1cf883a 	add	r7,fp,r7
   54b78:	00000106 	br	54b80 <___vfprintf_internal_r+0x2108>
   54b7c:	28800003 	ldbu	r2,0(r5)
   54b80:	20800005 	stb	r2,0(r4)
   54b84:	21000044 	addi	r4,r4,1
   54b88:	29400044 	addi	r5,r5,1
   54b8c:	393ffb1e 	bne	r7,r4,54b7c <__alt_data_end+0xfffd4b7c>
   54b90:	d8802304 	addi	r2,sp,140
   54b94:	14c5c83a 	sub	r2,r2,r19
   54b98:	d8c02344 	addi	r3,sp,141
   54b9c:	1885883a 	add	r2,r3,r2
   54ba0:	003f7006 	br	54964 <__alt_data_end+0xfffd4964>
   54ba4:	0005883a 	mov	r2,zero
   54ba8:	003f0f06 	br	547e8 <__alt_data_end+0xfffd47e8>
   54bac:	d8c03217 	ldw	r3,200(sp)
   54bb0:	18c00044 	addi	r3,r3,1
   54bb4:	d8c02b15 	stw	r3,172(sp)
   54bb8:	1805883a 	mov	r2,r3
   54bbc:	183fb20e 	bge	r3,zero,54a88 <__alt_data_end+0xfffd4a88>
   54bc0:	0005883a 	mov	r2,zero
   54bc4:	003fb006 	br	54a88 <__alt_data_end+0xfffd4a88>
   54bc8:	d9003617 	ldw	r4,216(sp)
   54bcc:	000d883a 	mov	r6,zero
   54bd0:	000f883a 	mov	r7,zero
   54bd4:	980b883a 	mov	r5,r19
   54bd8:	d8c03c15 	stw	r3,240(sp)
   54bdc:	da003d15 	stw	r8,244(sp)
   54be0:	005eb080 	call	5eb08 <__eqdf2>
   54be4:	d8c03c17 	ldw	r3,240(sp)
   54be8:	da003d17 	ldw	r8,244(sp)
   54bec:	103f9826 	beq	r2,zero,54a50 <__alt_data_end+0xfffd4a50>
   54bf0:	00800044 	movi	r2,1
   54bf4:	10c7c83a 	sub	r3,r2,r3
   54bf8:	d8c02615 	stw	r3,152(sp)
   54bfc:	003f9506 	br	54a54 <__alt_data_end+0xfffd4a54>
   54c00:	d9002a17 	ldw	r4,168(sp)
   54c04:	d8c03217 	ldw	r3,200(sp)
   54c08:	20800044 	addi	r2,r4,1
   54c0c:	1885883a 	add	r2,r3,r2
   54c10:	d8802b15 	stw	r2,172(sp)
   54c14:	103dbf0e 	bge	r2,zero,54314 <__alt_data_end+0xfffd4314>
   54c18:	0005883a 	mov	r2,zero
   54c1c:	003dbd06 	br	54314 <__alt_data_end+0xfffd4314>
   54c20:	2000201e 	bne	r4,zero,54ca4 <___vfprintf_internal_r+0x222c>
   54c24:	9480004c 	andi	r18,r18,1
   54c28:	90001e1e 	bne	r18,zero,54ca4 <___vfprintf_internal_r+0x222c>
   54c2c:	00800044 	movi	r2,1
   54c30:	d8802b15 	stw	r2,172(sp)
   54c34:	003db706 	br	54314 <__alt_data_end+0xfffd4314>
   54c38:	00800b44 	movi	r2,45
   54c3c:	05adc83a 	sub	r22,zero,r22
   54c40:	d8802305 	stb	r2,140(sp)
   54c44:	003f3f06 	br	54944 <__alt_data_end+0xfffd4944>
   54c48:	0005883a 	mov	r2,zero
   54c4c:	003f5206 	br	54998 <__alt_data_end+0xfffd4998>
   54c50:	90a4703a 	and	r18,r18,r2
   54c54:	903f4e26 	beq	r18,zero,54990 <__alt_data_end+0xfffd4990>
   54c58:	003f4a06 	br	54984 <__alt_data_end+0xfffd4984>
   54c5c:	00800084 	movi	r2,2
   54c60:	10c5c83a 	sub	r2,r2,r3
   54c64:	003f8406 	br	54a78 <__alt_data_end+0xfffd4a78>
   54c68:	d9402e17 	ldw	r5,184(sp)
   54c6c:	d9002e17 	ldw	r4,184(sp)
   54c70:	ac400043 	ldbu	r17,1(r21)
   54c74:	29400017 	ldw	r5,0(r5)
   54c78:	20800104 	addi	r2,r4,4
   54c7c:	d8802e15 	stw	r2,184(sp)
   54c80:	d9402a15 	stw	r5,168(sp)
   54c84:	182b883a 	mov	r21,r3
   54c88:	283e7b0e 	bge	r5,zero,54678 <__alt_data_end+0xfffd4678>
   54c8c:	8c403fcc 	andi	r17,r17,255
   54c90:	017fffc4 	movi	r5,-1
   54c94:	8c40201c 	xori	r17,r17,128
   54c98:	d9402a15 	stw	r5,168(sp)
   54c9c:	8c7fe004 	addi	r17,r17,-128
   54ca0:	0037d706 	br	52c00 <__alt_data_end+0xfffd2c00>
   54ca4:	d8c02a17 	ldw	r3,168(sp)
   54ca8:	18c00084 	addi	r3,r3,2
   54cac:	d8c02b15 	stw	r3,172(sp)
   54cb0:	1805883a 	mov	r2,r3
   54cb4:	183d970e 	bge	r3,zero,54314 <__alt_data_end+0xfffd4314>
   54cb8:	003fd706 	br	54c18 <__alt_data_end+0xfffd4c18>
   54cbc:	0005883a 	mov	r2,zero
   54cc0:	003f8f06 	br	54b00 <__alt_data_end+0xfffd4b00>
   54cc4:	9080004c 	andi	r2,r18,1
   54cc8:	103f821e 	bne	r2,zero,54ad4 <__alt_data_end+0xfffd4ad4>
   54ccc:	d8802117 	ldw	r2,132(sp)
   54cd0:	1405c83a 	sub	r2,r2,r16
   54cd4:	d8803315 	stw	r2,204(sp)
   54cd8:	b47ef426 	beq	r22,r17,548ac <__alt_data_end+0xfffd48ac>
   54cdc:	dd802617 	ldw	r22,152(sp)
   54ce0:	003f1206 	br	5492c <__alt_data_end+0xfffd492c>
   54ce4:	d8c02b03 	ldbu	r3,172(sp)
   54ce8:	d8c02785 	stb	r3,158(sp)
   54cec:	0038df06 	br	5306c <__alt_data_end+0xfffd306c>
   54cf0:	d8c02b03 	ldbu	r3,172(sp)
   54cf4:	d8c02785 	stb	r3,158(sp)
   54cf8:	0038aa06 	br	52fa4 <__alt_data_end+0xfffd2fa4>
   54cfc:	d8c02b03 	ldbu	r3,172(sp)
   54d00:	d8c02785 	stb	r3,158(sp)
   54d04:	003a4306 	br	53614 <__alt_data_end+0xfffd3614>
   54d08:	d8c02b03 	ldbu	r3,172(sp)
   54d0c:	d8c02785 	stb	r3,158(sp)
   54d10:	003af506 	br	538e8 <__alt_data_end+0xfffd38e8>
   54d14:	0005883a 	mov	r2,zero
   54d18:	003d7b06 	br	54308 <__alt_data_end+0xfffd4308>
   54d1c:	d8802344 	addi	r2,sp,141
   54d20:	003f1006 	br	54964 <__alt_data_end+0xfffd4964>
   54d24:	d8c02b03 	ldbu	r3,172(sp)
   54d28:	d8c02785 	stb	r3,158(sp)
   54d2c:	0038fd06 	br	53124 <__alt_data_end+0xfffd3124>
   54d30:	d8c02b03 	ldbu	r3,172(sp)
   54d34:	d8c02785 	stb	r3,158(sp)
   54d38:	003a9706 	br	53798 <__alt_data_end+0xfffd3798>
   54d3c:	d8c02b03 	ldbu	r3,172(sp)
   54d40:	d8c02785 	stb	r3,158(sp)
   54d44:	003a1806 	br	535a8 <__alt_data_end+0xfffd35a8>
   54d48:	d8c02b03 	ldbu	r3,172(sp)
   54d4c:	d8c02785 	stb	r3,158(sp)
   54d50:	003abe06 	br	5384c <__alt_data_end+0xfffd384c>

00054d54 <__vfprintf_internal>:
   54d54:	008001f4 	movhi	r2,7
   54d58:	10bb7304 	addi	r2,r2,-4660
   54d5c:	300f883a 	mov	r7,r6
   54d60:	280d883a 	mov	r6,r5
   54d64:	200b883a 	mov	r5,r4
   54d68:	11000017 	ldw	r4,0(r2)
   54d6c:	0052a781 	jmpi	52a78 <___vfprintf_internal_r>

00054d70 <__sbprintf>:
   54d70:	2880030b 	ldhu	r2,12(r5)
   54d74:	2ac01917 	ldw	r11,100(r5)
   54d78:	2a80038b 	ldhu	r10,14(r5)
   54d7c:	2a400717 	ldw	r9,28(r5)
   54d80:	2a000917 	ldw	r8,36(r5)
   54d84:	defee204 	addi	sp,sp,-1144
   54d88:	00c10004 	movi	r3,1024
   54d8c:	dc011a15 	stw	r16,1128(sp)
   54d90:	10bfff4c 	andi	r2,r2,65533
   54d94:	2821883a 	mov	r16,r5
   54d98:	d8cb883a 	add	r5,sp,r3
   54d9c:	dc811c15 	stw	r18,1136(sp)
   54da0:	dc411b15 	stw	r17,1132(sp)
   54da4:	dfc11d15 	stw	ra,1140(sp)
   54da8:	2025883a 	mov	r18,r4
   54dac:	d881030d 	sth	r2,1036(sp)
   54db0:	dac11915 	stw	r11,1124(sp)
   54db4:	da81038d 	sth	r10,1038(sp)
   54db8:	da410715 	stw	r9,1052(sp)
   54dbc:	da010915 	stw	r8,1060(sp)
   54dc0:	dec10015 	stw	sp,1024(sp)
   54dc4:	dec10415 	stw	sp,1040(sp)
   54dc8:	d8c10215 	stw	r3,1032(sp)
   54dcc:	d8c10515 	stw	r3,1044(sp)
   54dd0:	d8010615 	stw	zero,1048(sp)
   54dd4:	0052a780 	call	52a78 <___vfprintf_internal_r>
   54dd8:	1023883a 	mov	r17,r2
   54ddc:	10000416 	blt	r2,zero,54df0 <__sbprintf+0x80>
   54de0:	d9410004 	addi	r5,sp,1024
   54de4:	9009883a 	mov	r4,r18
   54de8:	0056a4c0 	call	56a4c <_fflush_r>
   54dec:	10000d1e 	bne	r2,zero,54e24 <__sbprintf+0xb4>
   54df0:	d881030b 	ldhu	r2,1036(sp)
   54df4:	1080100c 	andi	r2,r2,64
   54df8:	10000326 	beq	r2,zero,54e08 <__sbprintf+0x98>
   54dfc:	8080030b 	ldhu	r2,12(r16)
   54e00:	10801014 	ori	r2,r2,64
   54e04:	8080030d 	sth	r2,12(r16)
   54e08:	8805883a 	mov	r2,r17
   54e0c:	dfc11d17 	ldw	ra,1140(sp)
   54e10:	dc811c17 	ldw	r18,1136(sp)
   54e14:	dc411b17 	ldw	r17,1132(sp)
   54e18:	dc011a17 	ldw	r16,1128(sp)
   54e1c:	dec11e04 	addi	sp,sp,1144
   54e20:	f800283a 	ret
   54e24:	047fffc4 	movi	r17,-1
   54e28:	003ff106 	br	54df0 <__alt_data_end+0xfffd4df0>

00054e2c <__swsetup_r>:
   54e2c:	008001f4 	movhi	r2,7
   54e30:	defffd04 	addi	sp,sp,-12
   54e34:	10bb7304 	addi	r2,r2,-4660
   54e38:	dc400115 	stw	r17,4(sp)
   54e3c:	2023883a 	mov	r17,r4
   54e40:	11000017 	ldw	r4,0(r2)
   54e44:	dc000015 	stw	r16,0(sp)
   54e48:	dfc00215 	stw	ra,8(sp)
   54e4c:	2821883a 	mov	r16,r5
   54e50:	20000226 	beq	r4,zero,54e5c <__swsetup_r+0x30>
   54e54:	20800e17 	ldw	r2,56(r4)
   54e58:	10003126 	beq	r2,zero,54f20 <__swsetup_r+0xf4>
   54e5c:	8080030b 	ldhu	r2,12(r16)
   54e60:	10c0020c 	andi	r3,r2,8
   54e64:	1009883a 	mov	r4,r2
   54e68:	18000f26 	beq	r3,zero,54ea8 <__swsetup_r+0x7c>
   54e6c:	80c00417 	ldw	r3,16(r16)
   54e70:	18001526 	beq	r3,zero,54ec8 <__swsetup_r+0x9c>
   54e74:	1100004c 	andi	r4,r2,1
   54e78:	20001c1e 	bne	r4,zero,54eec <__swsetup_r+0xc0>
   54e7c:	1080008c 	andi	r2,r2,2
   54e80:	1000291e 	bne	r2,zero,54f28 <__swsetup_r+0xfc>
   54e84:	80800517 	ldw	r2,20(r16)
   54e88:	80800215 	stw	r2,8(r16)
   54e8c:	18001c26 	beq	r3,zero,54f00 <__swsetup_r+0xd4>
   54e90:	0005883a 	mov	r2,zero
   54e94:	dfc00217 	ldw	ra,8(sp)
   54e98:	dc400117 	ldw	r17,4(sp)
   54e9c:	dc000017 	ldw	r16,0(sp)
   54ea0:	dec00304 	addi	sp,sp,12
   54ea4:	f800283a 	ret
   54ea8:	2080040c 	andi	r2,r4,16
   54eac:	10002e26 	beq	r2,zero,54f68 <__swsetup_r+0x13c>
   54eb0:	2080010c 	andi	r2,r4,4
   54eb4:	10001e1e 	bne	r2,zero,54f30 <__swsetup_r+0x104>
   54eb8:	80c00417 	ldw	r3,16(r16)
   54ebc:	20800214 	ori	r2,r4,8
   54ec0:	8080030d 	sth	r2,12(r16)
   54ec4:	183feb1e 	bne	r3,zero,54e74 <__alt_data_end+0xfffd4e74>
   54ec8:	1100a00c 	andi	r4,r2,640
   54ecc:	01408004 	movi	r5,512
   54ed0:	217fe826 	beq	r4,r5,54e74 <__alt_data_end+0xfffd4e74>
   54ed4:	800b883a 	mov	r5,r16
   54ed8:	8809883a 	mov	r4,r17
   54edc:	00579e80 	call	579e8 <__smakebuf_r>
   54ee0:	8080030b 	ldhu	r2,12(r16)
   54ee4:	80c00417 	ldw	r3,16(r16)
   54ee8:	003fe206 	br	54e74 <__alt_data_end+0xfffd4e74>
   54eec:	80800517 	ldw	r2,20(r16)
   54ef0:	80000215 	stw	zero,8(r16)
   54ef4:	0085c83a 	sub	r2,zero,r2
   54ef8:	80800615 	stw	r2,24(r16)
   54efc:	183fe41e 	bne	r3,zero,54e90 <__alt_data_end+0xfffd4e90>
   54f00:	80c0030b 	ldhu	r3,12(r16)
   54f04:	0005883a 	mov	r2,zero
   54f08:	1900200c 	andi	r4,r3,128
   54f0c:	203fe126 	beq	r4,zero,54e94 <__alt_data_end+0xfffd4e94>
   54f10:	18c01014 	ori	r3,r3,64
   54f14:	80c0030d 	sth	r3,12(r16)
   54f18:	00bfffc4 	movi	r2,-1
   54f1c:	003fdd06 	br	54e94 <__alt_data_end+0xfffd4e94>
   54f20:	0056e380 	call	56e38 <__sinit>
   54f24:	003fcd06 	br	54e5c <__alt_data_end+0xfffd4e5c>
   54f28:	0005883a 	mov	r2,zero
   54f2c:	003fd606 	br	54e88 <__alt_data_end+0xfffd4e88>
   54f30:	81400c17 	ldw	r5,48(r16)
   54f34:	28000626 	beq	r5,zero,54f50 <__swsetup_r+0x124>
   54f38:	80801004 	addi	r2,r16,64
   54f3c:	28800326 	beq	r5,r2,54f4c <__swsetup_r+0x120>
   54f40:	8809883a 	mov	r4,r17
   54f44:	0056fac0 	call	56fac <_free_r>
   54f48:	8100030b 	ldhu	r4,12(r16)
   54f4c:	80000c15 	stw	zero,48(r16)
   54f50:	80c00417 	ldw	r3,16(r16)
   54f54:	00bff6c4 	movi	r2,-37
   54f58:	1108703a 	and	r4,r2,r4
   54f5c:	80000115 	stw	zero,4(r16)
   54f60:	80c00015 	stw	r3,0(r16)
   54f64:	003fd506 	br	54ebc <__alt_data_end+0xfffd4ebc>
   54f68:	00800244 	movi	r2,9
   54f6c:	88800015 	stw	r2,0(r17)
   54f70:	20801014 	ori	r2,r4,64
   54f74:	8080030d 	sth	r2,12(r16)
   54f78:	00bfffc4 	movi	r2,-1
   54f7c:	003fc506 	br	54e94 <__alt_data_end+0xfffd4e94>

00054f80 <quorem>:
   54f80:	defff204 	addi	sp,sp,-56
   54f84:	ddc00b15 	stw	r23,44(sp)
   54f88:	20800417 	ldw	r2,16(r4)
   54f8c:	2dc00417 	ldw	r23,16(r5)
   54f90:	dfc00d15 	stw	ra,52(sp)
   54f94:	df000c15 	stw	fp,48(sp)
   54f98:	dd800a15 	stw	r22,40(sp)
   54f9c:	dd400915 	stw	r21,36(sp)
   54fa0:	dd000815 	stw	r20,32(sp)
   54fa4:	dcc00715 	stw	r19,28(sp)
   54fa8:	dc800615 	stw	r18,24(sp)
   54fac:	dc400515 	stw	r17,20(sp)
   54fb0:	dc000415 	stw	r16,16(sp)
   54fb4:	15c07a16 	blt	r2,r23,551a0 <quorem+0x220>
   54fb8:	bdffffc4 	addi	r23,r23,-1
   54fbc:	bde9883a 	add	r20,r23,r23
   54fc0:	28c00504 	addi	r3,r5,20
   54fc4:	a529883a 	add	r20,r20,r20
   54fc8:	1d39883a 	add	fp,r3,r20
   54fcc:	24c00504 	addi	r19,r4,20
   54fd0:	d9400215 	stw	r5,8(sp)
   54fd4:	9d29883a 	add	r20,r19,r20
   54fd8:	e1400017 	ldw	r5,0(fp)
   54fdc:	d9000015 	stw	r4,0(sp)
   54fe0:	a1000017 	ldw	r4,0(r20)
   54fe4:	29400044 	addi	r5,r5,1
   54fe8:	d8c00115 	stw	r3,4(sp)
   54fec:	dd000315 	stw	r20,12(sp)
   54ff0:	004d9f80 	call	4d9f8 <__udivsi3>
   54ff4:	1025883a 	mov	r18,r2
   54ff8:	10003026 	beq	r2,zero,550bc <quorem+0x13c>
   54ffc:	dc400117 	ldw	r17,4(sp)
   55000:	9829883a 	mov	r20,r19
   55004:	002d883a 	mov	r22,zero
   55008:	0021883a 	mov	r16,zero
   5500c:	8d400017 	ldw	r21,0(r17)
   55010:	900b883a 	mov	r5,r18
   55014:	8c400104 	addi	r17,r17,4
   55018:	a93fffcc 	andi	r4,r21,65535
   5501c:	004dab40 	call	4dab4 <__mulsi3>
   55020:	a808d43a 	srli	r4,r21,16
   55024:	900b883a 	mov	r5,r18
   55028:	15ad883a 	add	r22,r2,r22
   5502c:	004dab40 	call	4dab4 <__mulsi3>
   55030:	a1000017 	ldw	r4,0(r20)
   55034:	b00cd43a 	srli	r6,r22,16
   55038:	b0ffffcc 	andi	r3,r22,65535
   5503c:	217fffcc 	andi	r5,r4,65535
   55040:	2c21883a 	add	r16,r5,r16
   55044:	80c7c83a 	sub	r3,r16,r3
   55048:	2008d43a 	srli	r4,r4,16
   5504c:	1185883a 	add	r2,r2,r6
   55050:	1821d43a 	srai	r16,r3,16
   55054:	117fffcc 	andi	r5,r2,65535
   55058:	2149c83a 	sub	r4,r4,r5
   5505c:	2421883a 	add	r16,r4,r16
   55060:	8008943a 	slli	r4,r16,16
   55064:	18ffffcc 	andi	r3,r3,65535
   55068:	102cd43a 	srli	r22,r2,16
   5506c:	20c8b03a 	or	r4,r4,r3
   55070:	a1000015 	stw	r4,0(r20)
   55074:	8021d43a 	srai	r16,r16,16
   55078:	a5000104 	addi	r20,r20,4
   5507c:	e47fe32e 	bgeu	fp,r17,5500c <__alt_data_end+0xfffd500c>
   55080:	d8c00317 	ldw	r3,12(sp)
   55084:	18800017 	ldw	r2,0(r3)
   55088:	10000c1e 	bne	r2,zero,550bc <quorem+0x13c>
   5508c:	18bfff04 	addi	r2,r3,-4
   55090:	9880082e 	bgeu	r19,r2,550b4 <quorem+0x134>
   55094:	18ffff17 	ldw	r3,-4(r3)
   55098:	18000326 	beq	r3,zero,550a8 <quorem+0x128>
   5509c:	00000506 	br	550b4 <quorem+0x134>
   550a0:	10c00017 	ldw	r3,0(r2)
   550a4:	1800031e 	bne	r3,zero,550b4 <quorem+0x134>
   550a8:	10bfff04 	addi	r2,r2,-4
   550ac:	bdffffc4 	addi	r23,r23,-1
   550b0:	98bffb36 	bltu	r19,r2,550a0 <__alt_data_end+0xfffd50a0>
   550b4:	d8c00017 	ldw	r3,0(sp)
   550b8:	1dc00415 	stw	r23,16(r3)
   550bc:	d9400217 	ldw	r5,8(sp)
   550c0:	d9000017 	ldw	r4,0(sp)
   550c4:	00587680 	call	58768 <__mcmp>
   550c8:	10002816 	blt	r2,zero,5516c <quorem+0x1ec>
   550cc:	dc400117 	ldw	r17,4(sp)
   550d0:	94800044 	addi	r18,r18,1
   550d4:	980d883a 	mov	r6,r19
   550d8:	0007883a 	mov	r3,zero
   550dc:	31000017 	ldw	r4,0(r6)
   550e0:	89400017 	ldw	r5,0(r17)
   550e4:	31800104 	addi	r6,r6,4
   550e8:	20bfffcc 	andi	r2,r4,65535
   550ec:	10c7883a 	add	r3,r2,r3
   550f0:	28bfffcc 	andi	r2,r5,65535
   550f4:	1885c83a 	sub	r2,r3,r2
   550f8:	280ad43a 	srli	r5,r5,16
   550fc:	2008d43a 	srli	r4,r4,16
   55100:	1007d43a 	srai	r3,r2,16
   55104:	10bfffcc 	andi	r2,r2,65535
   55108:	2149c83a 	sub	r4,r4,r5
   5510c:	20c9883a 	add	r4,r4,r3
   55110:	200a943a 	slli	r5,r4,16
   55114:	8c400104 	addi	r17,r17,4
   55118:	2007d43a 	srai	r3,r4,16
   5511c:	2884b03a 	or	r2,r5,r2
   55120:	30bfff15 	stw	r2,-4(r6)
   55124:	e47fed2e 	bgeu	fp,r17,550dc <__alt_data_end+0xfffd50dc>
   55128:	bdc5883a 	add	r2,r23,r23
   5512c:	1085883a 	add	r2,r2,r2
   55130:	9887883a 	add	r3,r19,r2
   55134:	18800017 	ldw	r2,0(r3)
   55138:	10000c1e 	bne	r2,zero,5516c <quorem+0x1ec>
   5513c:	18bfff04 	addi	r2,r3,-4
   55140:	9880082e 	bgeu	r19,r2,55164 <quorem+0x1e4>
   55144:	18ffff17 	ldw	r3,-4(r3)
   55148:	18000326 	beq	r3,zero,55158 <quorem+0x1d8>
   5514c:	00000506 	br	55164 <quorem+0x1e4>
   55150:	10c00017 	ldw	r3,0(r2)
   55154:	1800031e 	bne	r3,zero,55164 <quorem+0x1e4>
   55158:	10bfff04 	addi	r2,r2,-4
   5515c:	bdffffc4 	addi	r23,r23,-1
   55160:	98bffb36 	bltu	r19,r2,55150 <__alt_data_end+0xfffd5150>
   55164:	d8c00017 	ldw	r3,0(sp)
   55168:	1dc00415 	stw	r23,16(r3)
   5516c:	9005883a 	mov	r2,r18
   55170:	dfc00d17 	ldw	ra,52(sp)
   55174:	df000c17 	ldw	fp,48(sp)
   55178:	ddc00b17 	ldw	r23,44(sp)
   5517c:	dd800a17 	ldw	r22,40(sp)
   55180:	dd400917 	ldw	r21,36(sp)
   55184:	dd000817 	ldw	r20,32(sp)
   55188:	dcc00717 	ldw	r19,28(sp)
   5518c:	dc800617 	ldw	r18,24(sp)
   55190:	dc400517 	ldw	r17,20(sp)
   55194:	dc000417 	ldw	r16,16(sp)
   55198:	dec00e04 	addi	sp,sp,56
   5519c:	f800283a 	ret
   551a0:	0005883a 	mov	r2,zero
   551a4:	003ff206 	br	55170 <__alt_data_end+0xfffd5170>

000551a8 <_dtoa_r>:
   551a8:	20801017 	ldw	r2,64(r4)
   551ac:	deffde04 	addi	sp,sp,-136
   551b0:	df002015 	stw	fp,128(sp)
   551b4:	dcc01b15 	stw	r19,108(sp)
   551b8:	dc801a15 	stw	r18,104(sp)
   551bc:	dc401915 	stw	r17,100(sp)
   551c0:	dc001815 	stw	r16,96(sp)
   551c4:	dfc02115 	stw	ra,132(sp)
   551c8:	ddc01f15 	stw	r23,124(sp)
   551cc:	dd801e15 	stw	r22,120(sp)
   551d0:	dd401d15 	stw	r21,116(sp)
   551d4:	dd001c15 	stw	r20,112(sp)
   551d8:	d9c00315 	stw	r7,12(sp)
   551dc:	2039883a 	mov	fp,r4
   551e0:	3023883a 	mov	r17,r6
   551e4:	2825883a 	mov	r18,r5
   551e8:	dc002417 	ldw	r16,144(sp)
   551ec:	3027883a 	mov	r19,r6
   551f0:	10000826 	beq	r2,zero,55214 <_dtoa_r+0x6c>
   551f4:	21801117 	ldw	r6,68(r4)
   551f8:	00c00044 	movi	r3,1
   551fc:	100b883a 	mov	r5,r2
   55200:	1986983a 	sll	r3,r3,r6
   55204:	11800115 	stw	r6,4(r2)
   55208:	10c00215 	stw	r3,8(r2)
   5520c:	0057e8c0 	call	57e8c <_Bfree>
   55210:	e0001015 	stw	zero,64(fp)
   55214:	88002e16 	blt	r17,zero,552d0 <_dtoa_r+0x128>
   55218:	80000015 	stw	zero,0(r16)
   5521c:	889ffc2c 	andhi	r2,r17,32752
   55220:	00dffc34 	movhi	r3,32752
   55224:	10c01c26 	beq	r2,r3,55298 <_dtoa_r+0xf0>
   55228:	000d883a 	mov	r6,zero
   5522c:	000f883a 	mov	r7,zero
   55230:	9009883a 	mov	r4,r18
   55234:	980b883a 	mov	r5,r19
   55238:	005eb080 	call	5eb08 <__eqdf2>
   5523c:	10002b1e 	bne	r2,zero,552ec <_dtoa_r+0x144>
   55240:	d9c02317 	ldw	r7,140(sp)
   55244:	00800044 	movi	r2,1
   55248:	38800015 	stw	r2,0(r7)
   5524c:	d8802517 	ldw	r2,148(sp)
   55250:	10019e26 	beq	r2,zero,558cc <_dtoa_r+0x724>
   55254:	d8c02517 	ldw	r3,148(sp)
   55258:	008001f4 	movhi	r2,7
   5525c:	10ae8044 	addi	r2,r2,-17919
   55260:	18800015 	stw	r2,0(r3)
   55264:	10bfffc4 	addi	r2,r2,-1
   55268:	dfc02117 	ldw	ra,132(sp)
   5526c:	df002017 	ldw	fp,128(sp)
   55270:	ddc01f17 	ldw	r23,124(sp)
   55274:	dd801e17 	ldw	r22,120(sp)
   55278:	dd401d17 	ldw	r21,116(sp)
   5527c:	dd001c17 	ldw	r20,112(sp)
   55280:	dcc01b17 	ldw	r19,108(sp)
   55284:	dc801a17 	ldw	r18,104(sp)
   55288:	dc401917 	ldw	r17,100(sp)
   5528c:	dc001817 	ldw	r16,96(sp)
   55290:	dec02204 	addi	sp,sp,136
   55294:	f800283a 	ret
   55298:	d8c02317 	ldw	r3,140(sp)
   5529c:	0089c3c4 	movi	r2,9999
   552a0:	18800015 	stw	r2,0(r3)
   552a4:	90017726 	beq	r18,zero,55884 <_dtoa_r+0x6dc>
   552a8:	008001f4 	movhi	r2,7
   552ac:	10ae9404 	addi	r2,r2,-17840
   552b0:	d9002517 	ldw	r4,148(sp)
   552b4:	203fec26 	beq	r4,zero,55268 <__alt_data_end+0xfffd5268>
   552b8:	10c000c7 	ldb	r3,3(r2)
   552bc:	1801781e 	bne	r3,zero,558a0 <_dtoa_r+0x6f8>
   552c0:	10c000c4 	addi	r3,r2,3
   552c4:	d9802517 	ldw	r6,148(sp)
   552c8:	30c00015 	stw	r3,0(r6)
   552cc:	003fe606 	br	55268 <__alt_data_end+0xfffd5268>
   552d0:	04e00034 	movhi	r19,32768
   552d4:	9cffffc4 	addi	r19,r19,-1
   552d8:	00800044 	movi	r2,1
   552dc:	8ce6703a 	and	r19,r17,r19
   552e0:	80800015 	stw	r2,0(r16)
   552e4:	9823883a 	mov	r17,r19
   552e8:	003fcc06 	br	5521c <__alt_data_end+0xfffd521c>
   552ec:	d8800204 	addi	r2,sp,8
   552f0:	d8800015 	stw	r2,0(sp)
   552f4:	d9c00104 	addi	r7,sp,4
   552f8:	900b883a 	mov	r5,r18
   552fc:	980d883a 	mov	r6,r19
   55300:	e009883a 	mov	r4,fp
   55304:	8820d53a 	srli	r16,r17,20
   55308:	0058b340 	call	58b34 <__d2b>
   5530c:	d8800915 	stw	r2,36(sp)
   55310:	8001651e 	bne	r16,zero,558a8 <_dtoa_r+0x700>
   55314:	dd800217 	ldw	r22,8(sp)
   55318:	dc000117 	ldw	r16,4(sp)
   5531c:	00800804 	movi	r2,32
   55320:	b421883a 	add	r16,r22,r16
   55324:	80c10c84 	addi	r3,r16,1074
   55328:	10c2d10e 	bge	r2,r3,55e70 <_dtoa_r+0xcc8>
   5532c:	00801004 	movi	r2,64
   55330:	81010484 	addi	r4,r16,1042
   55334:	10c7c83a 	sub	r3,r2,r3
   55338:	9108d83a 	srl	r4,r18,r4
   5533c:	88e2983a 	sll	r17,r17,r3
   55340:	2448b03a 	or	r4,r4,r17
   55344:	00600240 	call	60024 <__floatunsidf>
   55348:	017f8434 	movhi	r5,65040
   5534c:	01800044 	movi	r6,1
   55350:	1009883a 	mov	r4,r2
   55354:	194b883a 	add	r5,r3,r5
   55358:	843fffc4 	addi	r16,r16,-1
   5535c:	d9801115 	stw	r6,68(sp)
   55360:	000d883a 	mov	r6,zero
   55364:	01cffe34 	movhi	r7,16376
   55368:	005f5cc0 	call	5f5cc <__subdf3>
   5536c:	0198dbf4 	movhi	r6,25455
   55370:	01cff4f4 	movhi	r7,16339
   55374:	3190d844 	addi	r6,r6,17249
   55378:	39e1e9c4 	addi	r7,r7,-30809
   5537c:	1009883a 	mov	r4,r2
   55380:	180b883a 	mov	r5,r3
   55384:	005ed600 	call	5ed60 <__muldf3>
   55388:	01a2d874 	movhi	r6,35681
   5538c:	01cff1f4 	movhi	r7,16327
   55390:	31b22cc4 	addi	r6,r6,-14157
   55394:	39e28a04 	addi	r7,r7,-30168
   55398:	180b883a 	mov	r5,r3
   5539c:	1009883a 	mov	r4,r2
   553a0:	005d88c0 	call	5d88c <__adddf3>
   553a4:	8009883a 	mov	r4,r16
   553a8:	1029883a 	mov	r20,r2
   553ac:	1823883a 	mov	r17,r3
   553b0:	005ff480 	call	5ff48 <__floatsidf>
   553b4:	019427f4 	movhi	r6,20639
   553b8:	01cff4f4 	movhi	r7,16339
   553bc:	319e7ec4 	addi	r6,r6,31227
   553c0:	39d104c4 	addi	r7,r7,17427
   553c4:	1009883a 	mov	r4,r2
   553c8:	180b883a 	mov	r5,r3
   553cc:	005ed600 	call	5ed60 <__muldf3>
   553d0:	100d883a 	mov	r6,r2
   553d4:	180f883a 	mov	r7,r3
   553d8:	a009883a 	mov	r4,r20
   553dc:	880b883a 	mov	r5,r17
   553e0:	005d88c0 	call	5d88c <__adddf3>
   553e4:	1009883a 	mov	r4,r2
   553e8:	180b883a 	mov	r5,r3
   553ec:	1029883a 	mov	r20,r2
   553f0:	1823883a 	mov	r17,r3
   553f4:	005fec80 	call	5fec8 <__fixdfsi>
   553f8:	000d883a 	mov	r6,zero
   553fc:	000f883a 	mov	r7,zero
   55400:	a009883a 	mov	r4,r20
   55404:	880b883a 	mov	r5,r17
   55408:	d8800515 	stw	r2,20(sp)
   5540c:	005ec6c0 	call	5ec6c <__ledf2>
   55410:	10028716 	blt	r2,zero,55e30 <_dtoa_r+0xc88>
   55414:	d8c00517 	ldw	r3,20(sp)
   55418:	00800584 	movi	r2,22
   5541c:	10c27536 	bltu	r2,r3,55df4 <_dtoa_r+0xc4c>
   55420:	180490fa 	slli	r2,r3,3
   55424:	00c001f4 	movhi	r3,7
   55428:	18eeaf04 	addi	r3,r3,-17732
   5542c:	1885883a 	add	r2,r3,r2
   55430:	11000017 	ldw	r4,0(r2)
   55434:	11400117 	ldw	r5,4(r2)
   55438:	900d883a 	mov	r6,r18
   5543c:	980f883a 	mov	r7,r19
   55440:	005eb900 	call	5eb90 <__gedf2>
   55444:	00828d0e 	bge	zero,r2,55e7c <_dtoa_r+0xcd4>
   55448:	d9000517 	ldw	r4,20(sp)
   5544c:	d8000e15 	stw	zero,56(sp)
   55450:	213fffc4 	addi	r4,r4,-1
   55454:	d9000515 	stw	r4,20(sp)
   55458:	b42dc83a 	sub	r22,r22,r16
   5545c:	b5bfffc4 	addi	r22,r22,-1
   55460:	b0026f16 	blt	r22,zero,55e20 <_dtoa_r+0xc78>
   55464:	d8000815 	stw	zero,32(sp)
   55468:	d9c00517 	ldw	r7,20(sp)
   5546c:	38026416 	blt	r7,zero,55e00 <_dtoa_r+0xc58>
   55470:	b1ed883a 	add	r22,r22,r7
   55474:	d9c00d15 	stw	r7,52(sp)
   55478:	d8000a15 	stw	zero,40(sp)
   5547c:	d9800317 	ldw	r6,12(sp)
   55480:	00800244 	movi	r2,9
   55484:	11811436 	bltu	r2,r6,558d8 <_dtoa_r+0x730>
   55488:	00800144 	movi	r2,5
   5548c:	1184e10e 	bge	r2,r6,56814 <_dtoa_r+0x166c>
   55490:	31bfff04 	addi	r6,r6,-4
   55494:	d9800315 	stw	r6,12(sp)
   55498:	0023883a 	mov	r17,zero
   5549c:	d9800317 	ldw	r6,12(sp)
   554a0:	008000c4 	movi	r2,3
   554a4:	30836726 	beq	r6,r2,56244 <_dtoa_r+0x109c>
   554a8:	1183410e 	bge	r2,r6,561b0 <_dtoa_r+0x1008>
   554ac:	d9c00317 	ldw	r7,12(sp)
   554b0:	00800104 	movi	r2,4
   554b4:	38827c26 	beq	r7,r2,55ea8 <_dtoa_r+0xd00>
   554b8:	00800144 	movi	r2,5
   554bc:	3884c41e 	bne	r7,r2,567d0 <_dtoa_r+0x1628>
   554c0:	00800044 	movi	r2,1
   554c4:	d8800b15 	stw	r2,44(sp)
   554c8:	d8c00517 	ldw	r3,20(sp)
   554cc:	d9002217 	ldw	r4,136(sp)
   554d0:	1907883a 	add	r3,r3,r4
   554d4:	19800044 	addi	r6,r3,1
   554d8:	d8c00c15 	stw	r3,48(sp)
   554dc:	d9800615 	stw	r6,24(sp)
   554e0:	0183a40e 	bge	zero,r6,56374 <_dtoa_r+0x11cc>
   554e4:	d9800617 	ldw	r6,24(sp)
   554e8:	3021883a 	mov	r16,r6
   554ec:	e0001115 	stw	zero,68(fp)
   554f0:	008005c4 	movi	r2,23
   554f4:	1184c92e 	bgeu	r2,r6,5681c <_dtoa_r+0x1674>
   554f8:	00c00044 	movi	r3,1
   554fc:	00800104 	movi	r2,4
   55500:	1085883a 	add	r2,r2,r2
   55504:	11000504 	addi	r4,r2,20
   55508:	180b883a 	mov	r5,r3
   5550c:	18c00044 	addi	r3,r3,1
   55510:	313ffb2e 	bgeu	r6,r4,55500 <__alt_data_end+0xfffd5500>
   55514:	e1401115 	stw	r5,68(fp)
   55518:	e009883a 	mov	r4,fp
   5551c:	0057de40 	call	57de4 <_Balloc>
   55520:	d8800715 	stw	r2,28(sp)
   55524:	e0801015 	stw	r2,64(fp)
   55528:	00800384 	movi	r2,14
   5552c:	1400f736 	bltu	r2,r16,5590c <_dtoa_r+0x764>
   55530:	8800f626 	beq	r17,zero,5590c <_dtoa_r+0x764>
   55534:	d9c00517 	ldw	r7,20(sp)
   55538:	01c39a0e 	bge	zero,r7,563a4 <_dtoa_r+0x11fc>
   5553c:	388003cc 	andi	r2,r7,15
   55540:	100490fa 	slli	r2,r2,3
   55544:	382bd13a 	srai	r21,r7,4
   55548:	00c001f4 	movhi	r3,7
   5554c:	18eeaf04 	addi	r3,r3,-17732
   55550:	1885883a 	add	r2,r3,r2
   55554:	a8c0040c 	andi	r3,r21,16
   55558:	12400017 	ldw	r9,0(r2)
   5555c:	12000117 	ldw	r8,4(r2)
   55560:	18037926 	beq	r3,zero,56348 <_dtoa_r+0x11a0>
   55564:	008001f4 	movhi	r2,7
   55568:	10aea504 	addi	r2,r2,-17772
   5556c:	11800817 	ldw	r6,32(r2)
   55570:	11c00917 	ldw	r7,36(r2)
   55574:	9009883a 	mov	r4,r18
   55578:	980b883a 	mov	r5,r19
   5557c:	da001715 	stw	r8,92(sp)
   55580:	da401615 	stw	r9,88(sp)
   55584:	005e1380 	call	5e138 <__divdf3>
   55588:	da001717 	ldw	r8,92(sp)
   5558c:	da401617 	ldw	r9,88(sp)
   55590:	ad4003cc 	andi	r21,r21,15
   55594:	040000c4 	movi	r16,3
   55598:	1023883a 	mov	r17,r2
   5559c:	1829883a 	mov	r20,r3
   555a0:	a8001126 	beq	r21,zero,555e8 <_dtoa_r+0x440>
   555a4:	05c001f4 	movhi	r23,7
   555a8:	bdeea504 	addi	r23,r23,-17772
   555ac:	4805883a 	mov	r2,r9
   555b0:	4007883a 	mov	r3,r8
   555b4:	a980004c 	andi	r6,r21,1
   555b8:	1009883a 	mov	r4,r2
   555bc:	a82bd07a 	srai	r21,r21,1
   555c0:	180b883a 	mov	r5,r3
   555c4:	30000426 	beq	r6,zero,555d8 <_dtoa_r+0x430>
   555c8:	b9800017 	ldw	r6,0(r23)
   555cc:	b9c00117 	ldw	r7,4(r23)
   555d0:	84000044 	addi	r16,r16,1
   555d4:	005ed600 	call	5ed60 <__muldf3>
   555d8:	bdc00204 	addi	r23,r23,8
   555dc:	a83ff51e 	bne	r21,zero,555b4 <__alt_data_end+0xfffd55b4>
   555e0:	1013883a 	mov	r9,r2
   555e4:	1811883a 	mov	r8,r3
   555e8:	480d883a 	mov	r6,r9
   555ec:	400f883a 	mov	r7,r8
   555f0:	8809883a 	mov	r4,r17
   555f4:	a00b883a 	mov	r5,r20
   555f8:	005e1380 	call	5e138 <__divdf3>
   555fc:	d8800f15 	stw	r2,60(sp)
   55600:	d8c01015 	stw	r3,64(sp)
   55604:	d8c00e17 	ldw	r3,56(sp)
   55608:	18000626 	beq	r3,zero,55624 <_dtoa_r+0x47c>
   5560c:	d9000f17 	ldw	r4,60(sp)
   55610:	d9401017 	ldw	r5,64(sp)
   55614:	000d883a 	mov	r6,zero
   55618:	01cffc34 	movhi	r7,16368
   5561c:	005ec6c0 	call	5ec6c <__ledf2>
   55620:	10040b16 	blt	r2,zero,56650 <_dtoa_r+0x14a8>
   55624:	8009883a 	mov	r4,r16
   55628:	005ff480 	call	5ff48 <__floatsidf>
   5562c:	d9800f17 	ldw	r6,60(sp)
   55630:	d9c01017 	ldw	r7,64(sp)
   55634:	1009883a 	mov	r4,r2
   55638:	180b883a 	mov	r5,r3
   5563c:	005ed600 	call	5ed60 <__muldf3>
   55640:	000d883a 	mov	r6,zero
   55644:	01d00734 	movhi	r7,16412
   55648:	1009883a 	mov	r4,r2
   5564c:	180b883a 	mov	r5,r3
   55650:	005d88c0 	call	5d88c <__adddf3>
   55654:	1021883a 	mov	r16,r2
   55658:	d8800617 	ldw	r2,24(sp)
   5565c:	047f3034 	movhi	r17,64704
   55660:	1c63883a 	add	r17,r3,r17
   55664:	10031826 	beq	r2,zero,562c8 <_dtoa_r+0x1120>
   55668:	d8c00517 	ldw	r3,20(sp)
   5566c:	db000617 	ldw	r12,24(sp)
   55670:	d8c01315 	stw	r3,76(sp)
   55674:	d9000b17 	ldw	r4,44(sp)
   55678:	20038f26 	beq	r4,zero,564b8 <_dtoa_r+0x1310>
   5567c:	60bfffc4 	addi	r2,r12,-1
   55680:	100490fa 	slli	r2,r2,3
   55684:	00c001f4 	movhi	r3,7
   55688:	18eeaf04 	addi	r3,r3,-17732
   5568c:	1885883a 	add	r2,r3,r2
   55690:	11800017 	ldw	r6,0(r2)
   55694:	11c00117 	ldw	r7,4(r2)
   55698:	d8800717 	ldw	r2,28(sp)
   5569c:	0009883a 	mov	r4,zero
   556a0:	014ff834 	movhi	r5,16352
   556a4:	db001615 	stw	r12,88(sp)
   556a8:	15c00044 	addi	r23,r2,1
   556ac:	005e1380 	call	5e138 <__divdf3>
   556b0:	800d883a 	mov	r6,r16
   556b4:	880f883a 	mov	r7,r17
   556b8:	1009883a 	mov	r4,r2
   556bc:	180b883a 	mov	r5,r3
   556c0:	005f5cc0 	call	5f5cc <__subdf3>
   556c4:	d9401017 	ldw	r5,64(sp)
   556c8:	d9000f17 	ldw	r4,60(sp)
   556cc:	102b883a 	mov	r21,r2
   556d0:	d8c01215 	stw	r3,72(sp)
   556d4:	005fec80 	call	5fec8 <__fixdfsi>
   556d8:	1009883a 	mov	r4,r2
   556dc:	1029883a 	mov	r20,r2
   556e0:	005ff480 	call	5ff48 <__floatsidf>
   556e4:	d9000f17 	ldw	r4,60(sp)
   556e8:	d9401017 	ldw	r5,64(sp)
   556ec:	100d883a 	mov	r6,r2
   556f0:	180f883a 	mov	r7,r3
   556f4:	005f5cc0 	call	5f5cc <__subdf3>
   556f8:	1823883a 	mov	r17,r3
   556fc:	d8c00717 	ldw	r3,28(sp)
   55700:	d9401217 	ldw	r5,72(sp)
   55704:	a2000c04 	addi	r8,r20,48
   55708:	1021883a 	mov	r16,r2
   5570c:	1a000005 	stb	r8,0(r3)
   55710:	800d883a 	mov	r6,r16
   55714:	880f883a 	mov	r7,r17
   55718:	a809883a 	mov	r4,r21
   5571c:	4029883a 	mov	r20,r8
   55720:	005eb900 	call	5eb90 <__gedf2>
   55724:	00841d16 	blt	zero,r2,5679c <_dtoa_r+0x15f4>
   55728:	800d883a 	mov	r6,r16
   5572c:	880f883a 	mov	r7,r17
   55730:	0009883a 	mov	r4,zero
   55734:	014ffc34 	movhi	r5,16368
   55738:	005f5cc0 	call	5f5cc <__subdf3>
   5573c:	d9401217 	ldw	r5,72(sp)
   55740:	100d883a 	mov	r6,r2
   55744:	180f883a 	mov	r7,r3
   55748:	a809883a 	mov	r4,r21
   5574c:	005eb900 	call	5eb90 <__gedf2>
   55750:	db001617 	ldw	r12,88(sp)
   55754:	00840e16 	blt	zero,r2,56790 <_dtoa_r+0x15e8>
   55758:	00800044 	movi	r2,1
   5575c:	13006b0e 	bge	r2,r12,5590c <_dtoa_r+0x764>
   55760:	d9000717 	ldw	r4,28(sp)
   55764:	dd800f15 	stw	r22,60(sp)
   55768:	dcc01015 	stw	r19,64(sp)
   5576c:	2319883a 	add	r12,r4,r12
   55770:	dcc01217 	ldw	r19,72(sp)
   55774:	602d883a 	mov	r22,r12
   55778:	dc801215 	stw	r18,72(sp)
   5577c:	b825883a 	mov	r18,r23
   55780:	00000906 	br	557a8 <_dtoa_r+0x600>
   55784:	005f5cc0 	call	5f5cc <__subdf3>
   55788:	a80d883a 	mov	r6,r21
   5578c:	980f883a 	mov	r7,r19
   55790:	1009883a 	mov	r4,r2
   55794:	180b883a 	mov	r5,r3
   55798:	005ec6c0 	call	5ec6c <__ledf2>
   5579c:	1003e816 	blt	r2,zero,56740 <_dtoa_r+0x1598>
   557a0:	b825883a 	mov	r18,r23
   557a4:	bd83e926 	beq	r23,r22,5674c <_dtoa_r+0x15a4>
   557a8:	a809883a 	mov	r4,r21
   557ac:	980b883a 	mov	r5,r19
   557b0:	000d883a 	mov	r6,zero
   557b4:	01d00934 	movhi	r7,16420
   557b8:	005ed600 	call	5ed60 <__muldf3>
   557bc:	000d883a 	mov	r6,zero
   557c0:	01d00934 	movhi	r7,16420
   557c4:	8009883a 	mov	r4,r16
   557c8:	880b883a 	mov	r5,r17
   557cc:	102b883a 	mov	r21,r2
   557d0:	1827883a 	mov	r19,r3
   557d4:	005ed600 	call	5ed60 <__muldf3>
   557d8:	180b883a 	mov	r5,r3
   557dc:	1009883a 	mov	r4,r2
   557e0:	1821883a 	mov	r16,r3
   557e4:	1023883a 	mov	r17,r2
   557e8:	005fec80 	call	5fec8 <__fixdfsi>
   557ec:	1009883a 	mov	r4,r2
   557f0:	1029883a 	mov	r20,r2
   557f4:	005ff480 	call	5ff48 <__floatsidf>
   557f8:	8809883a 	mov	r4,r17
   557fc:	800b883a 	mov	r5,r16
   55800:	100d883a 	mov	r6,r2
   55804:	180f883a 	mov	r7,r3
   55808:	005f5cc0 	call	5f5cc <__subdf3>
   5580c:	a5000c04 	addi	r20,r20,48
   55810:	a80d883a 	mov	r6,r21
   55814:	980f883a 	mov	r7,r19
   55818:	1009883a 	mov	r4,r2
   5581c:	180b883a 	mov	r5,r3
   55820:	95000005 	stb	r20,0(r18)
   55824:	1021883a 	mov	r16,r2
   55828:	1823883a 	mov	r17,r3
   5582c:	005ec6c0 	call	5ec6c <__ledf2>
   55830:	bdc00044 	addi	r23,r23,1
   55834:	800d883a 	mov	r6,r16
   55838:	880f883a 	mov	r7,r17
   5583c:	0009883a 	mov	r4,zero
   55840:	014ffc34 	movhi	r5,16368
   55844:	103fcf0e 	bge	r2,zero,55784 <__alt_data_end+0xfffd5784>
   55848:	d8c01317 	ldw	r3,76(sp)
   5584c:	d8c00515 	stw	r3,20(sp)
   55850:	d9400917 	ldw	r5,36(sp)
   55854:	e009883a 	mov	r4,fp
   55858:	0057e8c0 	call	57e8c <_Bfree>
   5585c:	d9000517 	ldw	r4,20(sp)
   55860:	d9802317 	ldw	r6,140(sp)
   55864:	d9c02517 	ldw	r7,148(sp)
   55868:	b8000005 	stb	zero,0(r23)
   5586c:	20800044 	addi	r2,r4,1
   55870:	30800015 	stw	r2,0(r6)
   55874:	3802aa26 	beq	r7,zero,56320 <_dtoa_r+0x1178>
   55878:	3dc00015 	stw	r23,0(r7)
   5587c:	d8800717 	ldw	r2,28(sp)
   55880:	003e7906 	br	55268 <__alt_data_end+0xfffd5268>
   55884:	00800434 	movhi	r2,16
   55888:	10bfffc4 	addi	r2,r2,-1
   5588c:	88a2703a 	and	r17,r17,r2
   55890:	883e851e 	bne	r17,zero,552a8 <__alt_data_end+0xfffd52a8>
   55894:	008001f4 	movhi	r2,7
   55898:	10ae9104 	addi	r2,r2,-17852
   5589c:	003e8406 	br	552b0 <__alt_data_end+0xfffd52b0>
   558a0:	10c00204 	addi	r3,r2,8
   558a4:	003e8706 	br	552c4 <__alt_data_end+0xfffd52c4>
   558a8:	01400434 	movhi	r5,16
   558ac:	297fffc4 	addi	r5,r5,-1
   558b0:	994a703a 	and	r5,r19,r5
   558b4:	9009883a 	mov	r4,r18
   558b8:	843f0044 	addi	r16,r16,-1023
   558bc:	294ffc34 	orhi	r5,r5,16368
   558c0:	dd800217 	ldw	r22,8(sp)
   558c4:	d8001115 	stw	zero,68(sp)
   558c8:	003ea506 	br	55360 <__alt_data_end+0xfffd5360>
   558cc:	008001f4 	movhi	r2,7
   558d0:	10ae8004 	addi	r2,r2,-17920
   558d4:	003e6406 	br	55268 <__alt_data_end+0xfffd5268>
   558d8:	e0001115 	stw	zero,68(fp)
   558dc:	000b883a 	mov	r5,zero
   558e0:	e009883a 	mov	r4,fp
   558e4:	0057de40 	call	57de4 <_Balloc>
   558e8:	01bfffc4 	movi	r6,-1
   558ec:	01c00044 	movi	r7,1
   558f0:	d8800715 	stw	r2,28(sp)
   558f4:	d9800c15 	stw	r6,48(sp)
   558f8:	e0801015 	stw	r2,64(fp)
   558fc:	d8000315 	stw	zero,12(sp)
   55900:	d9c00b15 	stw	r7,44(sp)
   55904:	d9800615 	stw	r6,24(sp)
   55908:	d8002215 	stw	zero,136(sp)
   5590c:	d8800117 	ldw	r2,4(sp)
   55910:	10008916 	blt	r2,zero,55b38 <_dtoa_r+0x990>
   55914:	d9000517 	ldw	r4,20(sp)
   55918:	00c00384 	movi	r3,14
   5591c:	19008616 	blt	r3,r4,55b38 <_dtoa_r+0x990>
   55920:	200490fa 	slli	r2,r4,3
   55924:	00c001f4 	movhi	r3,7
   55928:	d9802217 	ldw	r6,136(sp)
   5592c:	18eeaf04 	addi	r3,r3,-17732
   55930:	1885883a 	add	r2,r3,r2
   55934:	14000017 	ldw	r16,0(r2)
   55938:	14400117 	ldw	r17,4(r2)
   5593c:	30016316 	blt	r6,zero,55ecc <_dtoa_r+0xd24>
   55940:	800d883a 	mov	r6,r16
   55944:	880f883a 	mov	r7,r17
   55948:	9009883a 	mov	r4,r18
   5594c:	980b883a 	mov	r5,r19
   55950:	005e1380 	call	5e138 <__divdf3>
   55954:	180b883a 	mov	r5,r3
   55958:	1009883a 	mov	r4,r2
   5595c:	005fec80 	call	5fec8 <__fixdfsi>
   55960:	1009883a 	mov	r4,r2
   55964:	102b883a 	mov	r21,r2
   55968:	005ff480 	call	5ff48 <__floatsidf>
   5596c:	800d883a 	mov	r6,r16
   55970:	880f883a 	mov	r7,r17
   55974:	1009883a 	mov	r4,r2
   55978:	180b883a 	mov	r5,r3
   5597c:	005ed600 	call	5ed60 <__muldf3>
   55980:	100d883a 	mov	r6,r2
   55984:	180f883a 	mov	r7,r3
   55988:	9009883a 	mov	r4,r18
   5598c:	980b883a 	mov	r5,r19
   55990:	005f5cc0 	call	5f5cc <__subdf3>
   55994:	d9c00717 	ldw	r7,28(sp)
   55998:	1009883a 	mov	r4,r2
   5599c:	a8800c04 	addi	r2,r21,48
   559a0:	38800005 	stb	r2,0(r7)
   559a4:	3dc00044 	addi	r23,r7,1
   559a8:	d9c00617 	ldw	r7,24(sp)
   559ac:	01800044 	movi	r6,1
   559b0:	180b883a 	mov	r5,r3
   559b4:	2005883a 	mov	r2,r4
   559b8:	39803826 	beq	r7,r6,55a9c <_dtoa_r+0x8f4>
   559bc:	000d883a 	mov	r6,zero
   559c0:	01d00934 	movhi	r7,16420
   559c4:	005ed600 	call	5ed60 <__muldf3>
   559c8:	000d883a 	mov	r6,zero
   559cc:	000f883a 	mov	r7,zero
   559d0:	1009883a 	mov	r4,r2
   559d4:	180b883a 	mov	r5,r3
   559d8:	1025883a 	mov	r18,r2
   559dc:	1827883a 	mov	r19,r3
   559e0:	005eb080 	call	5eb08 <__eqdf2>
   559e4:	103f9a26 	beq	r2,zero,55850 <__alt_data_end+0xfffd5850>
   559e8:	d9c00617 	ldw	r7,24(sp)
   559ec:	d8c00717 	ldw	r3,28(sp)
   559f0:	b829883a 	mov	r20,r23
   559f4:	38bfffc4 	addi	r2,r7,-1
   559f8:	18ad883a 	add	r22,r3,r2
   559fc:	00000a06 	br	55a28 <_dtoa_r+0x880>
   55a00:	005ed600 	call	5ed60 <__muldf3>
   55a04:	000d883a 	mov	r6,zero
   55a08:	000f883a 	mov	r7,zero
   55a0c:	1009883a 	mov	r4,r2
   55a10:	180b883a 	mov	r5,r3
   55a14:	1025883a 	mov	r18,r2
   55a18:	1827883a 	mov	r19,r3
   55a1c:	b829883a 	mov	r20,r23
   55a20:	005eb080 	call	5eb08 <__eqdf2>
   55a24:	103f8a26 	beq	r2,zero,55850 <__alt_data_end+0xfffd5850>
   55a28:	800d883a 	mov	r6,r16
   55a2c:	880f883a 	mov	r7,r17
   55a30:	9009883a 	mov	r4,r18
   55a34:	980b883a 	mov	r5,r19
   55a38:	005e1380 	call	5e138 <__divdf3>
   55a3c:	180b883a 	mov	r5,r3
   55a40:	1009883a 	mov	r4,r2
   55a44:	005fec80 	call	5fec8 <__fixdfsi>
   55a48:	1009883a 	mov	r4,r2
   55a4c:	102b883a 	mov	r21,r2
   55a50:	005ff480 	call	5ff48 <__floatsidf>
   55a54:	800d883a 	mov	r6,r16
   55a58:	880f883a 	mov	r7,r17
   55a5c:	1009883a 	mov	r4,r2
   55a60:	180b883a 	mov	r5,r3
   55a64:	005ed600 	call	5ed60 <__muldf3>
   55a68:	100d883a 	mov	r6,r2
   55a6c:	180f883a 	mov	r7,r3
   55a70:	9009883a 	mov	r4,r18
   55a74:	980b883a 	mov	r5,r19
   55a78:	005f5cc0 	call	5f5cc <__subdf3>
   55a7c:	aa000c04 	addi	r8,r21,48
   55a80:	a2000005 	stb	r8,0(r20)
   55a84:	000d883a 	mov	r6,zero
   55a88:	01d00934 	movhi	r7,16420
   55a8c:	1009883a 	mov	r4,r2
   55a90:	180b883a 	mov	r5,r3
   55a94:	a5c00044 	addi	r23,r20,1
   55a98:	b53fd91e 	bne	r22,r20,55a00 <__alt_data_end+0xfffd5a00>
   55a9c:	100d883a 	mov	r6,r2
   55aa0:	180f883a 	mov	r7,r3
   55aa4:	1009883a 	mov	r4,r2
   55aa8:	180b883a 	mov	r5,r3
   55aac:	005d88c0 	call	5d88c <__adddf3>
   55ab0:	100d883a 	mov	r6,r2
   55ab4:	180f883a 	mov	r7,r3
   55ab8:	8009883a 	mov	r4,r16
   55abc:	880b883a 	mov	r5,r17
   55ac0:	1027883a 	mov	r19,r2
   55ac4:	1825883a 	mov	r18,r3
   55ac8:	005ec6c0 	call	5ec6c <__ledf2>
   55acc:	10000816 	blt	r2,zero,55af0 <_dtoa_r+0x948>
   55ad0:	980d883a 	mov	r6,r19
   55ad4:	900f883a 	mov	r7,r18
   55ad8:	8009883a 	mov	r4,r16
   55adc:	880b883a 	mov	r5,r17
   55ae0:	005eb080 	call	5eb08 <__eqdf2>
   55ae4:	103f5a1e 	bne	r2,zero,55850 <__alt_data_end+0xfffd5850>
   55ae8:	ad40004c 	andi	r21,r21,1
   55aec:	a83f5826 	beq	r21,zero,55850 <__alt_data_end+0xfffd5850>
   55af0:	bd3fffc3 	ldbu	r20,-1(r23)
   55af4:	b8bfffc4 	addi	r2,r23,-1
   55af8:	1007883a 	mov	r3,r2
   55afc:	01400e44 	movi	r5,57
   55b00:	d9800717 	ldw	r6,28(sp)
   55b04:	00000506 	br	55b1c <_dtoa_r+0x974>
   55b08:	18ffffc4 	addi	r3,r3,-1
   55b0c:	11824726 	beq	r2,r6,5642c <_dtoa_r+0x1284>
   55b10:	1d000003 	ldbu	r20,0(r3)
   55b14:	102f883a 	mov	r23,r2
   55b18:	10bfffc4 	addi	r2,r2,-1
   55b1c:	a1003fcc 	andi	r4,r20,255
   55b20:	2100201c 	xori	r4,r4,128
   55b24:	213fe004 	addi	r4,r4,-128
   55b28:	217ff726 	beq	r4,r5,55b08 <__alt_data_end+0xfffd5b08>
   55b2c:	a2000044 	addi	r8,r20,1
   55b30:	12000005 	stb	r8,0(r2)
   55b34:	003f4606 	br	55850 <__alt_data_end+0xfffd5850>
   55b38:	d9000b17 	ldw	r4,44(sp)
   55b3c:	2000c826 	beq	r4,zero,55e60 <_dtoa_r+0xcb8>
   55b40:	d9800317 	ldw	r6,12(sp)
   55b44:	00c00044 	movi	r3,1
   55b48:	1980f90e 	bge	r3,r6,55f30 <_dtoa_r+0xd88>
   55b4c:	d8800617 	ldw	r2,24(sp)
   55b50:	d8c00a17 	ldw	r3,40(sp)
   55b54:	157fffc4 	addi	r21,r2,-1
   55b58:	1d41f316 	blt	r3,r21,56328 <_dtoa_r+0x1180>
   55b5c:	1d6bc83a 	sub	r21,r3,r21
   55b60:	d9c00617 	ldw	r7,24(sp)
   55b64:	3802aa16 	blt	r7,zero,56610 <_dtoa_r+0x1468>
   55b68:	dd000817 	ldw	r20,32(sp)
   55b6c:	d8800617 	ldw	r2,24(sp)
   55b70:	d8c00817 	ldw	r3,32(sp)
   55b74:	01400044 	movi	r5,1
   55b78:	e009883a 	mov	r4,fp
   55b7c:	1887883a 	add	r3,r3,r2
   55b80:	d8c00815 	stw	r3,32(sp)
   55b84:	b0ad883a 	add	r22,r22,r2
   55b88:	00582180 	call	58218 <__i2b>
   55b8c:	1023883a 	mov	r17,r2
   55b90:	a0000826 	beq	r20,zero,55bb4 <_dtoa_r+0xa0c>
   55b94:	0580070e 	bge	zero,r22,55bb4 <_dtoa_r+0xa0c>
   55b98:	a005883a 	mov	r2,r20
   55b9c:	b500b916 	blt	r22,r20,55e84 <_dtoa_r+0xcdc>
   55ba0:	d9000817 	ldw	r4,32(sp)
   55ba4:	a0a9c83a 	sub	r20,r20,r2
   55ba8:	b0adc83a 	sub	r22,r22,r2
   55bac:	2089c83a 	sub	r4,r4,r2
   55bb0:	d9000815 	stw	r4,32(sp)
   55bb4:	d9800a17 	ldw	r6,40(sp)
   55bb8:	0181810e 	bge	zero,r6,561c0 <_dtoa_r+0x1018>
   55bbc:	d9c00b17 	ldw	r7,44(sp)
   55bc0:	3800b326 	beq	r7,zero,55e90 <_dtoa_r+0xce8>
   55bc4:	a800b226 	beq	r21,zero,55e90 <_dtoa_r+0xce8>
   55bc8:	880b883a 	mov	r5,r17
   55bcc:	a80d883a 	mov	r6,r21
   55bd0:	e009883a 	mov	r4,fp
   55bd4:	00584e00 	call	584e0 <__pow5mult>
   55bd8:	d9800917 	ldw	r6,36(sp)
   55bdc:	100b883a 	mov	r5,r2
   55be0:	e009883a 	mov	r4,fp
   55be4:	1023883a 	mov	r17,r2
   55be8:	00582540 	call	58254 <__multiply>
   55bec:	1021883a 	mov	r16,r2
   55bf0:	d8800a17 	ldw	r2,40(sp)
   55bf4:	d9400917 	ldw	r5,36(sp)
   55bf8:	e009883a 	mov	r4,fp
   55bfc:	1545c83a 	sub	r2,r2,r21
   55c00:	d8800a15 	stw	r2,40(sp)
   55c04:	0057e8c0 	call	57e8c <_Bfree>
   55c08:	d8c00a17 	ldw	r3,40(sp)
   55c0c:	18009f1e 	bne	r3,zero,55e8c <_dtoa_r+0xce4>
   55c10:	05c00044 	movi	r23,1
   55c14:	e009883a 	mov	r4,fp
   55c18:	b80b883a 	mov	r5,r23
   55c1c:	00582180 	call	58218 <__i2b>
   55c20:	d9000d17 	ldw	r4,52(sp)
   55c24:	102b883a 	mov	r21,r2
   55c28:	2000ce26 	beq	r4,zero,55f64 <_dtoa_r+0xdbc>
   55c2c:	200d883a 	mov	r6,r4
   55c30:	100b883a 	mov	r5,r2
   55c34:	e009883a 	mov	r4,fp
   55c38:	00584e00 	call	584e0 <__pow5mult>
   55c3c:	d9800317 	ldw	r6,12(sp)
   55c40:	102b883a 	mov	r21,r2
   55c44:	b981810e 	bge	r23,r6,5624c <_dtoa_r+0x10a4>
   55c48:	0027883a 	mov	r19,zero
   55c4c:	a8800417 	ldw	r2,16(r21)
   55c50:	05c00804 	movi	r23,32
   55c54:	10800104 	addi	r2,r2,4
   55c58:	1085883a 	add	r2,r2,r2
   55c5c:	1085883a 	add	r2,r2,r2
   55c60:	a885883a 	add	r2,r21,r2
   55c64:	11000017 	ldw	r4,0(r2)
   55c68:	00581000 	call	58100 <__hi0bits>
   55c6c:	b885c83a 	sub	r2,r23,r2
   55c70:	1585883a 	add	r2,r2,r22
   55c74:	108007cc 	andi	r2,r2,31
   55c78:	1000b326 	beq	r2,zero,55f48 <_dtoa_r+0xda0>
   55c7c:	00c00804 	movi	r3,32
   55c80:	1887c83a 	sub	r3,r3,r2
   55c84:	01000104 	movi	r4,4
   55c88:	20c2cd0e 	bge	r4,r3,567c0 <_dtoa_r+0x1618>
   55c8c:	00c00704 	movi	r3,28
   55c90:	1885c83a 	sub	r2,r3,r2
   55c94:	d8c00817 	ldw	r3,32(sp)
   55c98:	a0a9883a 	add	r20,r20,r2
   55c9c:	b0ad883a 	add	r22,r22,r2
   55ca0:	1887883a 	add	r3,r3,r2
   55ca4:	d8c00815 	stw	r3,32(sp)
   55ca8:	d9800817 	ldw	r6,32(sp)
   55cac:	0180040e 	bge	zero,r6,55cc0 <_dtoa_r+0xb18>
   55cb0:	800b883a 	mov	r5,r16
   55cb4:	e009883a 	mov	r4,fp
   55cb8:	00586200 	call	58620 <__lshift>
   55cbc:	1021883a 	mov	r16,r2
   55cc0:	0580050e 	bge	zero,r22,55cd8 <_dtoa_r+0xb30>
   55cc4:	a80b883a 	mov	r5,r21
   55cc8:	b00d883a 	mov	r6,r22
   55ccc:	e009883a 	mov	r4,fp
   55cd0:	00586200 	call	58620 <__lshift>
   55cd4:	102b883a 	mov	r21,r2
   55cd8:	d9c00e17 	ldw	r7,56(sp)
   55cdc:	3801211e 	bne	r7,zero,56164 <_dtoa_r+0xfbc>
   55ce0:	d9800617 	ldw	r6,24(sp)
   55ce4:	0181380e 	bge	zero,r6,561c8 <_dtoa_r+0x1020>
   55ce8:	d8c00b17 	ldw	r3,44(sp)
   55cec:	1800ab1e 	bne	r3,zero,55f9c <_dtoa_r+0xdf4>
   55cf0:	dc800717 	ldw	r18,28(sp)
   55cf4:	dcc00617 	ldw	r19,24(sp)
   55cf8:	9029883a 	mov	r20,r18
   55cfc:	00000206 	br	55d08 <_dtoa_r+0xb60>
   55d00:	0057eb40 	call	57eb4 <__multadd>
   55d04:	1021883a 	mov	r16,r2
   55d08:	a80b883a 	mov	r5,r21
   55d0c:	8009883a 	mov	r4,r16
   55d10:	0054f800 	call	54f80 <quorem>
   55d14:	10800c04 	addi	r2,r2,48
   55d18:	90800005 	stb	r2,0(r18)
   55d1c:	94800044 	addi	r18,r18,1
   55d20:	9507c83a 	sub	r3,r18,r20
   55d24:	000f883a 	mov	r7,zero
   55d28:	01800284 	movi	r6,10
   55d2c:	800b883a 	mov	r5,r16
   55d30:	e009883a 	mov	r4,fp
   55d34:	1cfff216 	blt	r3,r19,55d00 <__alt_data_end+0xfffd5d00>
   55d38:	1011883a 	mov	r8,r2
   55d3c:	d8800617 	ldw	r2,24(sp)
   55d40:	0082370e 	bge	zero,r2,56620 <_dtoa_r+0x1478>
   55d44:	d9000717 	ldw	r4,28(sp)
   55d48:	0025883a 	mov	r18,zero
   55d4c:	20af883a 	add	r23,r4,r2
   55d50:	01800044 	movi	r6,1
   55d54:	800b883a 	mov	r5,r16
   55d58:	e009883a 	mov	r4,fp
   55d5c:	da001715 	stw	r8,92(sp)
   55d60:	00586200 	call	58620 <__lshift>
   55d64:	a80b883a 	mov	r5,r21
   55d68:	1009883a 	mov	r4,r2
   55d6c:	d8800915 	stw	r2,36(sp)
   55d70:	00587680 	call	58768 <__mcmp>
   55d74:	da001717 	ldw	r8,92(sp)
   55d78:	0081800e 	bge	zero,r2,5637c <_dtoa_r+0x11d4>
   55d7c:	b93fffc3 	ldbu	r4,-1(r23)
   55d80:	b8bfffc4 	addi	r2,r23,-1
   55d84:	1007883a 	mov	r3,r2
   55d88:	01800e44 	movi	r6,57
   55d8c:	d9c00717 	ldw	r7,28(sp)
   55d90:	00000506 	br	55da8 <_dtoa_r+0xc00>
   55d94:	18ffffc4 	addi	r3,r3,-1
   55d98:	11c12326 	beq	r2,r7,56228 <_dtoa_r+0x1080>
   55d9c:	19000003 	ldbu	r4,0(r3)
   55da0:	102f883a 	mov	r23,r2
   55da4:	10bfffc4 	addi	r2,r2,-1
   55da8:	21403fcc 	andi	r5,r4,255
   55dac:	2940201c 	xori	r5,r5,128
   55db0:	297fe004 	addi	r5,r5,-128
   55db4:	29bff726 	beq	r5,r6,55d94 <__alt_data_end+0xfffd5d94>
   55db8:	21000044 	addi	r4,r4,1
   55dbc:	11000005 	stb	r4,0(r2)
   55dc0:	a80b883a 	mov	r5,r21
   55dc4:	e009883a 	mov	r4,fp
   55dc8:	0057e8c0 	call	57e8c <_Bfree>
   55dcc:	883ea026 	beq	r17,zero,55850 <__alt_data_end+0xfffd5850>
   55dd0:	90000426 	beq	r18,zero,55de4 <_dtoa_r+0xc3c>
   55dd4:	94400326 	beq	r18,r17,55de4 <_dtoa_r+0xc3c>
   55dd8:	900b883a 	mov	r5,r18
   55ddc:	e009883a 	mov	r4,fp
   55de0:	0057e8c0 	call	57e8c <_Bfree>
   55de4:	880b883a 	mov	r5,r17
   55de8:	e009883a 	mov	r4,fp
   55dec:	0057e8c0 	call	57e8c <_Bfree>
   55df0:	003e9706 	br	55850 <__alt_data_end+0xfffd5850>
   55df4:	01800044 	movi	r6,1
   55df8:	d9800e15 	stw	r6,56(sp)
   55dfc:	003d9606 	br	55458 <__alt_data_end+0xfffd5458>
   55e00:	d8800817 	ldw	r2,32(sp)
   55e04:	d8c00517 	ldw	r3,20(sp)
   55e08:	d8000d15 	stw	zero,52(sp)
   55e0c:	10c5c83a 	sub	r2,r2,r3
   55e10:	00c9c83a 	sub	r4,zero,r3
   55e14:	d8800815 	stw	r2,32(sp)
   55e18:	d9000a15 	stw	r4,40(sp)
   55e1c:	003d9706 	br	5547c <__alt_data_end+0xfffd547c>
   55e20:	05adc83a 	sub	r22,zero,r22
   55e24:	dd800815 	stw	r22,32(sp)
   55e28:	002d883a 	mov	r22,zero
   55e2c:	003d8e06 	br	55468 <__alt_data_end+0xfffd5468>
   55e30:	d9000517 	ldw	r4,20(sp)
   55e34:	005ff480 	call	5ff48 <__floatsidf>
   55e38:	100d883a 	mov	r6,r2
   55e3c:	180f883a 	mov	r7,r3
   55e40:	a009883a 	mov	r4,r20
   55e44:	880b883a 	mov	r5,r17
   55e48:	005eb080 	call	5eb08 <__eqdf2>
   55e4c:	103d7126 	beq	r2,zero,55414 <__alt_data_end+0xfffd5414>
   55e50:	d9c00517 	ldw	r7,20(sp)
   55e54:	39ffffc4 	addi	r7,r7,-1
   55e58:	d9c00515 	stw	r7,20(sp)
   55e5c:	003d6d06 	br	55414 <__alt_data_end+0xfffd5414>
   55e60:	dd400a17 	ldw	r21,40(sp)
   55e64:	dd000817 	ldw	r20,32(sp)
   55e68:	0023883a 	mov	r17,zero
   55e6c:	003f4806 	br	55b90 <__alt_data_end+0xfffd5b90>
   55e70:	10e3c83a 	sub	r17,r2,r3
   55e74:	9448983a 	sll	r4,r18,r17
   55e78:	003d3206 	br	55344 <__alt_data_end+0xfffd5344>
   55e7c:	d8000e15 	stw	zero,56(sp)
   55e80:	003d7506 	br	55458 <__alt_data_end+0xfffd5458>
   55e84:	b005883a 	mov	r2,r22
   55e88:	003f4506 	br	55ba0 <__alt_data_end+0xfffd5ba0>
   55e8c:	dc000915 	stw	r16,36(sp)
   55e90:	d9800a17 	ldw	r6,40(sp)
   55e94:	d9400917 	ldw	r5,36(sp)
   55e98:	e009883a 	mov	r4,fp
   55e9c:	00584e00 	call	584e0 <__pow5mult>
   55ea0:	1021883a 	mov	r16,r2
   55ea4:	003f5a06 	br	55c10 <__alt_data_end+0xfffd5c10>
   55ea8:	01c00044 	movi	r7,1
   55eac:	d9c00b15 	stw	r7,44(sp)
   55eb0:	d8802217 	ldw	r2,136(sp)
   55eb4:	0081280e 	bge	zero,r2,56358 <_dtoa_r+0x11b0>
   55eb8:	100d883a 	mov	r6,r2
   55ebc:	1021883a 	mov	r16,r2
   55ec0:	d8800c15 	stw	r2,48(sp)
   55ec4:	d8800615 	stw	r2,24(sp)
   55ec8:	003d8806 	br	554ec <__alt_data_end+0xfffd54ec>
   55ecc:	d8800617 	ldw	r2,24(sp)
   55ed0:	00be9b16 	blt	zero,r2,55940 <__alt_data_end+0xfffd5940>
   55ed4:	10010f1e 	bne	r2,zero,56314 <_dtoa_r+0x116c>
   55ed8:	880b883a 	mov	r5,r17
   55edc:	000d883a 	mov	r6,zero
   55ee0:	01d00534 	movhi	r7,16404
   55ee4:	8009883a 	mov	r4,r16
   55ee8:	005ed600 	call	5ed60 <__muldf3>
   55eec:	900d883a 	mov	r6,r18
   55ef0:	980f883a 	mov	r7,r19
   55ef4:	1009883a 	mov	r4,r2
   55ef8:	180b883a 	mov	r5,r3
   55efc:	005eb900 	call	5eb90 <__gedf2>
   55f00:	002b883a 	mov	r21,zero
   55f04:	0023883a 	mov	r17,zero
   55f08:	1000bf16 	blt	r2,zero,56208 <_dtoa_r+0x1060>
   55f0c:	d9802217 	ldw	r6,136(sp)
   55f10:	ddc00717 	ldw	r23,28(sp)
   55f14:	018c303a 	nor	r6,zero,r6
   55f18:	d9800515 	stw	r6,20(sp)
   55f1c:	a80b883a 	mov	r5,r21
   55f20:	e009883a 	mov	r4,fp
   55f24:	0057e8c0 	call	57e8c <_Bfree>
   55f28:	883e4926 	beq	r17,zero,55850 <__alt_data_end+0xfffd5850>
   55f2c:	003fad06 	br	55de4 <__alt_data_end+0xfffd5de4>
   55f30:	d9c01117 	ldw	r7,68(sp)
   55f34:	3801bc26 	beq	r7,zero,56628 <_dtoa_r+0x1480>
   55f38:	10810cc4 	addi	r2,r2,1075
   55f3c:	dd400a17 	ldw	r21,40(sp)
   55f40:	dd000817 	ldw	r20,32(sp)
   55f44:	003f0a06 	br	55b70 <__alt_data_end+0xfffd5b70>
   55f48:	00800704 	movi	r2,28
   55f4c:	d9000817 	ldw	r4,32(sp)
   55f50:	a0a9883a 	add	r20,r20,r2
   55f54:	b0ad883a 	add	r22,r22,r2
   55f58:	2089883a 	add	r4,r4,r2
   55f5c:	d9000815 	stw	r4,32(sp)
   55f60:	003f5106 	br	55ca8 <__alt_data_end+0xfffd5ca8>
   55f64:	d8c00317 	ldw	r3,12(sp)
   55f68:	b8c1fc0e 	bge	r23,r3,5675c <_dtoa_r+0x15b4>
   55f6c:	0027883a 	mov	r19,zero
   55f70:	b805883a 	mov	r2,r23
   55f74:	003f3e06 	br	55c70 <__alt_data_end+0xfffd5c70>
   55f78:	880b883a 	mov	r5,r17
   55f7c:	e009883a 	mov	r4,fp
   55f80:	000f883a 	mov	r7,zero
   55f84:	01800284 	movi	r6,10
   55f88:	0057eb40 	call	57eb4 <__multadd>
   55f8c:	d9000c17 	ldw	r4,48(sp)
   55f90:	1023883a 	mov	r17,r2
   55f94:	0102040e 	bge	zero,r4,567a8 <_dtoa_r+0x1600>
   55f98:	d9000615 	stw	r4,24(sp)
   55f9c:	0500050e 	bge	zero,r20,55fb4 <_dtoa_r+0xe0c>
   55fa0:	880b883a 	mov	r5,r17
   55fa4:	a00d883a 	mov	r6,r20
   55fa8:	e009883a 	mov	r4,fp
   55fac:	00586200 	call	58620 <__lshift>
   55fb0:	1023883a 	mov	r17,r2
   55fb4:	9801241e 	bne	r19,zero,56448 <_dtoa_r+0x12a0>
   55fb8:	8829883a 	mov	r20,r17
   55fbc:	d9000617 	ldw	r4,24(sp)
   55fc0:	dcc00717 	ldw	r19,28(sp)
   55fc4:	9480004c 	andi	r18,r18,1
   55fc8:	20bfffc4 	addi	r2,r4,-1
   55fcc:	9885883a 	add	r2,r19,r2
   55fd0:	d8800415 	stw	r2,16(sp)
   55fd4:	dc800615 	stw	r18,24(sp)
   55fd8:	a80b883a 	mov	r5,r21
   55fdc:	8009883a 	mov	r4,r16
   55fe0:	0054f800 	call	54f80 <quorem>
   55fe4:	880b883a 	mov	r5,r17
   55fe8:	8009883a 	mov	r4,r16
   55fec:	102f883a 	mov	r23,r2
   55ff0:	00587680 	call	58768 <__mcmp>
   55ff4:	a80b883a 	mov	r5,r21
   55ff8:	a00d883a 	mov	r6,r20
   55ffc:	e009883a 	mov	r4,fp
   56000:	102d883a 	mov	r22,r2
   56004:	00587c80 	call	587c8 <__mdiff>
   56008:	1007883a 	mov	r3,r2
   5600c:	10800317 	ldw	r2,12(r2)
   56010:	bc800c04 	addi	r18,r23,48
   56014:	180b883a 	mov	r5,r3
   56018:	10004e1e 	bne	r2,zero,56154 <_dtoa_r+0xfac>
   5601c:	8009883a 	mov	r4,r16
   56020:	d8c01615 	stw	r3,88(sp)
   56024:	00587680 	call	58768 <__mcmp>
   56028:	d8c01617 	ldw	r3,88(sp)
   5602c:	e009883a 	mov	r4,fp
   56030:	d8801615 	stw	r2,88(sp)
   56034:	180b883a 	mov	r5,r3
   56038:	0057e8c0 	call	57e8c <_Bfree>
   5603c:	d8801617 	ldw	r2,88(sp)
   56040:	1000041e 	bne	r2,zero,56054 <_dtoa_r+0xeac>
   56044:	d9800317 	ldw	r6,12(sp)
   56048:	3000021e 	bne	r6,zero,56054 <_dtoa_r+0xeac>
   5604c:	d8c00617 	ldw	r3,24(sp)
   56050:	18003726 	beq	r3,zero,56130 <_dtoa_r+0xf88>
   56054:	b0002016 	blt	r22,zero,560d8 <_dtoa_r+0xf30>
   56058:	b000041e 	bne	r22,zero,5606c <_dtoa_r+0xec4>
   5605c:	d9000317 	ldw	r4,12(sp)
   56060:	2000021e 	bne	r4,zero,5606c <_dtoa_r+0xec4>
   56064:	d8c00617 	ldw	r3,24(sp)
   56068:	18001b26 	beq	r3,zero,560d8 <_dtoa_r+0xf30>
   5606c:	00810716 	blt	zero,r2,5648c <_dtoa_r+0x12e4>
   56070:	d8c00417 	ldw	r3,16(sp)
   56074:	9d800044 	addi	r22,r19,1
   56078:	9c800005 	stb	r18,0(r19)
   5607c:	b02f883a 	mov	r23,r22
   56080:	98c10626 	beq	r19,r3,5649c <_dtoa_r+0x12f4>
   56084:	800b883a 	mov	r5,r16
   56088:	000f883a 	mov	r7,zero
   5608c:	01800284 	movi	r6,10
   56090:	e009883a 	mov	r4,fp
   56094:	0057eb40 	call	57eb4 <__multadd>
   56098:	1021883a 	mov	r16,r2
   5609c:	000f883a 	mov	r7,zero
   560a0:	01800284 	movi	r6,10
   560a4:	880b883a 	mov	r5,r17
   560a8:	e009883a 	mov	r4,fp
   560ac:	8d002526 	beq	r17,r20,56144 <_dtoa_r+0xf9c>
   560b0:	0057eb40 	call	57eb4 <__multadd>
   560b4:	a00b883a 	mov	r5,r20
   560b8:	000f883a 	mov	r7,zero
   560bc:	01800284 	movi	r6,10
   560c0:	e009883a 	mov	r4,fp
   560c4:	1023883a 	mov	r17,r2
   560c8:	0057eb40 	call	57eb4 <__multadd>
   560cc:	1029883a 	mov	r20,r2
   560d0:	b027883a 	mov	r19,r22
   560d4:	003fc006 	br	55fd8 <__alt_data_end+0xfffd5fd8>
   560d8:	9011883a 	mov	r8,r18
   560dc:	00800e0e 	bge	zero,r2,56118 <_dtoa_r+0xf70>
   560e0:	800b883a 	mov	r5,r16
   560e4:	01800044 	movi	r6,1
   560e8:	e009883a 	mov	r4,fp
   560ec:	da001715 	stw	r8,92(sp)
   560f0:	00586200 	call	58620 <__lshift>
   560f4:	a80b883a 	mov	r5,r21
   560f8:	1009883a 	mov	r4,r2
   560fc:	1021883a 	mov	r16,r2
   56100:	00587680 	call	58768 <__mcmp>
   56104:	da001717 	ldw	r8,92(sp)
   56108:	0081960e 	bge	zero,r2,56764 <_dtoa_r+0x15bc>
   5610c:	00800e44 	movi	r2,57
   56110:	40817026 	beq	r8,r2,566d4 <_dtoa_r+0x152c>
   56114:	ba000c44 	addi	r8,r23,49
   56118:	8825883a 	mov	r18,r17
   5611c:	9dc00044 	addi	r23,r19,1
   56120:	9a000005 	stb	r8,0(r19)
   56124:	a023883a 	mov	r17,r20
   56128:	dc000915 	stw	r16,36(sp)
   5612c:	003f2406 	br	55dc0 <__alt_data_end+0xfffd5dc0>
   56130:	00800e44 	movi	r2,57
   56134:	9011883a 	mov	r8,r18
   56138:	90816626 	beq	r18,r2,566d4 <_dtoa_r+0x152c>
   5613c:	05bff516 	blt	zero,r22,56114 <__alt_data_end+0xfffd6114>
   56140:	003ff506 	br	56118 <__alt_data_end+0xfffd6118>
   56144:	0057eb40 	call	57eb4 <__multadd>
   56148:	1023883a 	mov	r17,r2
   5614c:	1029883a 	mov	r20,r2
   56150:	003fdf06 	br	560d0 <__alt_data_end+0xfffd60d0>
   56154:	e009883a 	mov	r4,fp
   56158:	0057e8c0 	call	57e8c <_Bfree>
   5615c:	00800044 	movi	r2,1
   56160:	003fbc06 	br	56054 <__alt_data_end+0xfffd6054>
   56164:	a80b883a 	mov	r5,r21
   56168:	8009883a 	mov	r4,r16
   5616c:	00587680 	call	58768 <__mcmp>
   56170:	103edb0e 	bge	r2,zero,55ce0 <__alt_data_end+0xfffd5ce0>
   56174:	800b883a 	mov	r5,r16
   56178:	000f883a 	mov	r7,zero
   5617c:	01800284 	movi	r6,10
   56180:	e009883a 	mov	r4,fp
   56184:	0057eb40 	call	57eb4 <__multadd>
   56188:	1021883a 	mov	r16,r2
   5618c:	d8800517 	ldw	r2,20(sp)
   56190:	d8c00b17 	ldw	r3,44(sp)
   56194:	10bfffc4 	addi	r2,r2,-1
   56198:	d8800515 	stw	r2,20(sp)
   5619c:	183f761e 	bne	r3,zero,55f78 <__alt_data_end+0xfffd5f78>
   561a0:	d9000c17 	ldw	r4,48(sp)
   561a4:	0101730e 	bge	zero,r4,56774 <_dtoa_r+0x15cc>
   561a8:	d9000615 	stw	r4,24(sp)
   561ac:	003ed006 	br	55cf0 <__alt_data_end+0xfffd5cf0>
   561b0:	00800084 	movi	r2,2
   561b4:	3081861e 	bne	r6,r2,567d0 <_dtoa_r+0x1628>
   561b8:	d8000b15 	stw	zero,44(sp)
   561bc:	003f3c06 	br	55eb0 <__alt_data_end+0xfffd5eb0>
   561c0:	dc000917 	ldw	r16,36(sp)
   561c4:	003e9206 	br	55c10 <__alt_data_end+0xfffd5c10>
   561c8:	d9c00317 	ldw	r7,12(sp)
   561cc:	00800084 	movi	r2,2
   561d0:	11fec50e 	bge	r2,r7,55ce8 <__alt_data_end+0xfffd5ce8>
   561d4:	d9000617 	ldw	r4,24(sp)
   561d8:	20013c1e 	bne	r4,zero,566cc <_dtoa_r+0x1524>
   561dc:	a80b883a 	mov	r5,r21
   561e0:	000f883a 	mov	r7,zero
   561e4:	01800144 	movi	r6,5
   561e8:	e009883a 	mov	r4,fp
   561ec:	0057eb40 	call	57eb4 <__multadd>
   561f0:	100b883a 	mov	r5,r2
   561f4:	8009883a 	mov	r4,r16
   561f8:	102b883a 	mov	r21,r2
   561fc:	00587680 	call	58768 <__mcmp>
   56200:	dc000915 	stw	r16,36(sp)
   56204:	00bf410e 	bge	zero,r2,55f0c <__alt_data_end+0xfffd5f0c>
   56208:	d9c00717 	ldw	r7,28(sp)
   5620c:	00800c44 	movi	r2,49
   56210:	38800005 	stb	r2,0(r7)
   56214:	d8800517 	ldw	r2,20(sp)
   56218:	3dc00044 	addi	r23,r7,1
   5621c:	10800044 	addi	r2,r2,1
   56220:	d8800515 	stw	r2,20(sp)
   56224:	003f3d06 	br	55f1c <__alt_data_end+0xfffd5f1c>
   56228:	d9800517 	ldw	r6,20(sp)
   5622c:	d9c00717 	ldw	r7,28(sp)
   56230:	00800c44 	movi	r2,49
   56234:	31800044 	addi	r6,r6,1
   56238:	d9800515 	stw	r6,20(sp)
   5623c:	38800005 	stb	r2,0(r7)
   56240:	003edf06 	br	55dc0 <__alt_data_end+0xfffd5dc0>
   56244:	d8000b15 	stw	zero,44(sp)
   56248:	003c9f06 	br	554c8 <__alt_data_end+0xfffd54c8>
   5624c:	903e7e1e 	bne	r18,zero,55c48 <__alt_data_end+0xfffd5c48>
   56250:	00800434 	movhi	r2,16
   56254:	10bfffc4 	addi	r2,r2,-1
   56258:	9884703a 	and	r2,r19,r2
   5625c:	1000ea1e 	bne	r2,zero,56608 <_dtoa_r+0x1460>
   56260:	9cdffc2c 	andhi	r19,r19,32752
   56264:	9800e826 	beq	r19,zero,56608 <_dtoa_r+0x1460>
   56268:	d9c00817 	ldw	r7,32(sp)
   5626c:	b5800044 	addi	r22,r22,1
   56270:	04c00044 	movi	r19,1
   56274:	39c00044 	addi	r7,r7,1
   56278:	d9c00815 	stw	r7,32(sp)
   5627c:	d8800d17 	ldw	r2,52(sp)
   56280:	103e721e 	bne	r2,zero,55c4c <__alt_data_end+0xfffd5c4c>
   56284:	00800044 	movi	r2,1
   56288:	003e7906 	br	55c70 <__alt_data_end+0xfffd5c70>
   5628c:	8009883a 	mov	r4,r16
   56290:	005ff480 	call	5ff48 <__floatsidf>
   56294:	d9800f17 	ldw	r6,60(sp)
   56298:	d9c01017 	ldw	r7,64(sp)
   5629c:	1009883a 	mov	r4,r2
   562a0:	180b883a 	mov	r5,r3
   562a4:	005ed600 	call	5ed60 <__muldf3>
   562a8:	000d883a 	mov	r6,zero
   562ac:	01d00734 	movhi	r7,16412
   562b0:	1009883a 	mov	r4,r2
   562b4:	180b883a 	mov	r5,r3
   562b8:	005d88c0 	call	5d88c <__adddf3>
   562bc:	047f3034 	movhi	r17,64704
   562c0:	1021883a 	mov	r16,r2
   562c4:	1c63883a 	add	r17,r3,r17
   562c8:	d9000f17 	ldw	r4,60(sp)
   562cc:	d9401017 	ldw	r5,64(sp)
   562d0:	000d883a 	mov	r6,zero
   562d4:	01d00534 	movhi	r7,16404
   562d8:	005f5cc0 	call	5f5cc <__subdf3>
   562dc:	800d883a 	mov	r6,r16
   562e0:	880f883a 	mov	r7,r17
   562e4:	1009883a 	mov	r4,r2
   562e8:	180b883a 	mov	r5,r3
   562ec:	102b883a 	mov	r21,r2
   562f0:	1829883a 	mov	r20,r3
   562f4:	005eb900 	call	5eb90 <__gedf2>
   562f8:	00806c16 	blt	zero,r2,564ac <_dtoa_r+0x1304>
   562fc:	89e0003c 	xorhi	r7,r17,32768
   56300:	800d883a 	mov	r6,r16
   56304:	a809883a 	mov	r4,r21
   56308:	a00b883a 	mov	r5,r20
   5630c:	005ec6c0 	call	5ec6c <__ledf2>
   56310:	103d7e0e 	bge	r2,zero,5590c <__alt_data_end+0xfffd590c>
   56314:	002b883a 	mov	r21,zero
   56318:	0023883a 	mov	r17,zero
   5631c:	003efb06 	br	55f0c <__alt_data_end+0xfffd5f0c>
   56320:	d8800717 	ldw	r2,28(sp)
   56324:	003bd006 	br	55268 <__alt_data_end+0xfffd5268>
   56328:	d9000a17 	ldw	r4,40(sp)
   5632c:	d9800d17 	ldw	r6,52(sp)
   56330:	dd400a15 	stw	r21,40(sp)
   56334:	a905c83a 	sub	r2,r21,r4
   56338:	308d883a 	add	r6,r6,r2
   5633c:	d9800d15 	stw	r6,52(sp)
   56340:	002b883a 	mov	r21,zero
   56344:	003e0606 	br	55b60 <__alt_data_end+0xfffd5b60>
   56348:	9023883a 	mov	r17,r18
   5634c:	9829883a 	mov	r20,r19
   56350:	04000084 	movi	r16,2
   56354:	003c9206 	br	555a0 <__alt_data_end+0xfffd55a0>
   56358:	04000044 	movi	r16,1
   5635c:	dc000c15 	stw	r16,48(sp)
   56360:	dc000615 	stw	r16,24(sp)
   56364:	dc002215 	stw	r16,136(sp)
   56368:	e0001115 	stw	zero,68(fp)
   5636c:	000b883a 	mov	r5,zero
   56370:	003c6906 	br	55518 <__alt_data_end+0xfffd5518>
   56374:	3021883a 	mov	r16,r6
   56378:	003ffb06 	br	56368 <__alt_data_end+0xfffd6368>
   5637c:	1000021e 	bne	r2,zero,56388 <_dtoa_r+0x11e0>
   56380:	4200004c 	andi	r8,r8,1
   56384:	403e7d1e 	bne	r8,zero,55d7c <__alt_data_end+0xfffd5d7c>
   56388:	01000c04 	movi	r4,48
   5638c:	00000106 	br	56394 <_dtoa_r+0x11ec>
   56390:	102f883a 	mov	r23,r2
   56394:	b8bfffc4 	addi	r2,r23,-1
   56398:	10c00007 	ldb	r3,0(r2)
   5639c:	193ffc26 	beq	r3,r4,56390 <__alt_data_end+0xfffd6390>
   563a0:	003e8706 	br	55dc0 <__alt_data_end+0xfffd5dc0>
   563a4:	d8800517 	ldw	r2,20(sp)
   563a8:	00a3c83a 	sub	r17,zero,r2
   563ac:	8800a426 	beq	r17,zero,56640 <_dtoa_r+0x1498>
   563b0:	888003cc 	andi	r2,r17,15
   563b4:	100490fa 	slli	r2,r2,3
   563b8:	00c001f4 	movhi	r3,7
   563bc:	18eeaf04 	addi	r3,r3,-17732
   563c0:	1885883a 	add	r2,r3,r2
   563c4:	11800017 	ldw	r6,0(r2)
   563c8:	11c00117 	ldw	r7,4(r2)
   563cc:	9009883a 	mov	r4,r18
   563d0:	980b883a 	mov	r5,r19
   563d4:	8823d13a 	srai	r17,r17,4
   563d8:	005ed600 	call	5ed60 <__muldf3>
   563dc:	d8800f15 	stw	r2,60(sp)
   563e0:	d8c01015 	stw	r3,64(sp)
   563e4:	8800e826 	beq	r17,zero,56788 <_dtoa_r+0x15e0>
   563e8:	050001f4 	movhi	r20,7
   563ec:	a52ea504 	addi	r20,r20,-17772
   563f0:	04000084 	movi	r16,2
   563f4:	8980004c 	andi	r6,r17,1
   563f8:	1009883a 	mov	r4,r2
   563fc:	8823d07a 	srai	r17,r17,1
   56400:	180b883a 	mov	r5,r3
   56404:	30000426 	beq	r6,zero,56418 <_dtoa_r+0x1270>
   56408:	a1800017 	ldw	r6,0(r20)
   5640c:	a1c00117 	ldw	r7,4(r20)
   56410:	84000044 	addi	r16,r16,1
   56414:	005ed600 	call	5ed60 <__muldf3>
   56418:	a5000204 	addi	r20,r20,8
   5641c:	883ff51e 	bne	r17,zero,563f4 <__alt_data_end+0xfffd63f4>
   56420:	d8800f15 	stw	r2,60(sp)
   56424:	d8c01015 	stw	r3,64(sp)
   56428:	003c7606 	br	55604 <__alt_data_end+0xfffd5604>
   5642c:	00c00c04 	movi	r3,48
   56430:	10c00005 	stb	r3,0(r2)
   56434:	d8c00517 	ldw	r3,20(sp)
   56438:	bd3fffc3 	ldbu	r20,-1(r23)
   5643c:	18c00044 	addi	r3,r3,1
   56440:	d8c00515 	stw	r3,20(sp)
   56444:	003db906 	br	55b2c <__alt_data_end+0xfffd5b2c>
   56448:	89400117 	ldw	r5,4(r17)
   5644c:	e009883a 	mov	r4,fp
   56450:	0057de40 	call	57de4 <_Balloc>
   56454:	89800417 	ldw	r6,16(r17)
   56458:	89400304 	addi	r5,r17,12
   5645c:	11000304 	addi	r4,r2,12
   56460:	31800084 	addi	r6,r6,2
   56464:	318d883a 	add	r6,r6,r6
   56468:	318d883a 	add	r6,r6,r6
   5646c:	1027883a 	mov	r19,r2
   56470:	004fe540 	call	4fe54 <memcpy>
   56474:	01800044 	movi	r6,1
   56478:	980b883a 	mov	r5,r19
   5647c:	e009883a 	mov	r4,fp
   56480:	00586200 	call	58620 <__lshift>
   56484:	1029883a 	mov	r20,r2
   56488:	003ecc06 	br	55fbc <__alt_data_end+0xfffd5fbc>
   5648c:	00800e44 	movi	r2,57
   56490:	90809026 	beq	r18,r2,566d4 <_dtoa_r+0x152c>
   56494:	92000044 	addi	r8,r18,1
   56498:	003f1f06 	br	56118 <__alt_data_end+0xfffd6118>
   5649c:	9011883a 	mov	r8,r18
   564a0:	8825883a 	mov	r18,r17
   564a4:	a023883a 	mov	r17,r20
   564a8:	003e2906 	br	55d50 <__alt_data_end+0xfffd5d50>
   564ac:	002b883a 	mov	r21,zero
   564b0:	0023883a 	mov	r17,zero
   564b4:	003f5406 	br	56208 <__alt_data_end+0xfffd6208>
   564b8:	61bfffc4 	addi	r6,r12,-1
   564bc:	300490fa 	slli	r2,r6,3
   564c0:	00c001f4 	movhi	r3,7
   564c4:	18eeaf04 	addi	r3,r3,-17732
   564c8:	1885883a 	add	r2,r3,r2
   564cc:	11000017 	ldw	r4,0(r2)
   564d0:	11400117 	ldw	r5,4(r2)
   564d4:	d8800717 	ldw	r2,28(sp)
   564d8:	880f883a 	mov	r7,r17
   564dc:	d9801215 	stw	r6,72(sp)
   564e0:	800d883a 	mov	r6,r16
   564e4:	db001615 	stw	r12,88(sp)
   564e8:	15c00044 	addi	r23,r2,1
   564ec:	005ed600 	call	5ed60 <__muldf3>
   564f0:	d9401017 	ldw	r5,64(sp)
   564f4:	d9000f17 	ldw	r4,60(sp)
   564f8:	d8c01515 	stw	r3,84(sp)
   564fc:	d8801415 	stw	r2,80(sp)
   56500:	005fec80 	call	5fec8 <__fixdfsi>
   56504:	1009883a 	mov	r4,r2
   56508:	1021883a 	mov	r16,r2
   5650c:	005ff480 	call	5ff48 <__floatsidf>
   56510:	d9000f17 	ldw	r4,60(sp)
   56514:	d9401017 	ldw	r5,64(sp)
   56518:	100d883a 	mov	r6,r2
   5651c:	180f883a 	mov	r7,r3
   56520:	005f5cc0 	call	5f5cc <__subdf3>
   56524:	1829883a 	mov	r20,r3
   56528:	d8c00717 	ldw	r3,28(sp)
   5652c:	84000c04 	addi	r16,r16,48
   56530:	1023883a 	mov	r17,r2
   56534:	1c000005 	stb	r16,0(r3)
   56538:	db001617 	ldw	r12,88(sp)
   5653c:	00800044 	movi	r2,1
   56540:	60802226 	beq	r12,r2,565cc <_dtoa_r+0x1424>
   56544:	d9c00717 	ldw	r7,28(sp)
   56548:	8805883a 	mov	r2,r17
   5654c:	b82b883a 	mov	r21,r23
   56550:	3b19883a 	add	r12,r7,r12
   56554:	6023883a 	mov	r17,r12
   56558:	a007883a 	mov	r3,r20
   5655c:	dc800f15 	stw	r18,60(sp)
   56560:	000d883a 	mov	r6,zero
   56564:	01d00934 	movhi	r7,16420
   56568:	1009883a 	mov	r4,r2
   5656c:	180b883a 	mov	r5,r3
   56570:	005ed600 	call	5ed60 <__muldf3>
   56574:	180b883a 	mov	r5,r3
   56578:	1009883a 	mov	r4,r2
   5657c:	1829883a 	mov	r20,r3
   56580:	1025883a 	mov	r18,r2
   56584:	005fec80 	call	5fec8 <__fixdfsi>
   56588:	1009883a 	mov	r4,r2
   5658c:	1021883a 	mov	r16,r2
   56590:	005ff480 	call	5ff48 <__floatsidf>
   56594:	100d883a 	mov	r6,r2
   56598:	180f883a 	mov	r7,r3
   5659c:	9009883a 	mov	r4,r18
   565a0:	a00b883a 	mov	r5,r20
   565a4:	84000c04 	addi	r16,r16,48
   565a8:	005f5cc0 	call	5f5cc <__subdf3>
   565ac:	ad400044 	addi	r21,r21,1
   565b0:	ac3fffc5 	stb	r16,-1(r21)
   565b4:	ac7fea1e 	bne	r21,r17,56560 <__alt_data_end+0xfffd6560>
   565b8:	1023883a 	mov	r17,r2
   565bc:	d8801217 	ldw	r2,72(sp)
   565c0:	dc800f17 	ldw	r18,60(sp)
   565c4:	1829883a 	mov	r20,r3
   565c8:	b8af883a 	add	r23,r23,r2
   565cc:	d9001417 	ldw	r4,80(sp)
   565d0:	d9401517 	ldw	r5,84(sp)
   565d4:	000d883a 	mov	r6,zero
   565d8:	01cff834 	movhi	r7,16352
   565dc:	005d88c0 	call	5d88c <__adddf3>
   565e0:	880d883a 	mov	r6,r17
   565e4:	a00f883a 	mov	r7,r20
   565e8:	1009883a 	mov	r4,r2
   565ec:	180b883a 	mov	r5,r3
   565f0:	005ec6c0 	call	5ec6c <__ledf2>
   565f4:	10003e0e 	bge	r2,zero,566f0 <_dtoa_r+0x1548>
   565f8:	d9001317 	ldw	r4,76(sp)
   565fc:	bd3fffc3 	ldbu	r20,-1(r23)
   56600:	d9000515 	stw	r4,20(sp)
   56604:	003d3b06 	br	55af4 <__alt_data_end+0xfffd5af4>
   56608:	0027883a 	mov	r19,zero
   5660c:	003f1b06 	br	5627c <__alt_data_end+0xfffd627c>
   56610:	d8800817 	ldw	r2,32(sp)
   56614:	11e9c83a 	sub	r20,r2,r7
   56618:	0005883a 	mov	r2,zero
   5661c:	003d5406 	br	55b70 <__alt_data_end+0xfffd5b70>
   56620:	00800044 	movi	r2,1
   56624:	003dc706 	br	55d44 <__alt_data_end+0xfffd5d44>
   56628:	d8c00217 	ldw	r3,8(sp)
   5662c:	00800d84 	movi	r2,54
   56630:	dd400a17 	ldw	r21,40(sp)
   56634:	10c5c83a 	sub	r2,r2,r3
   56638:	dd000817 	ldw	r20,32(sp)
   5663c:	003d4c06 	br	55b70 <__alt_data_end+0xfffd5b70>
   56640:	dc800f15 	stw	r18,60(sp)
   56644:	dcc01015 	stw	r19,64(sp)
   56648:	04000084 	movi	r16,2
   5664c:	003bed06 	br	55604 <__alt_data_end+0xfffd5604>
   56650:	d9000617 	ldw	r4,24(sp)
   56654:	203f0d26 	beq	r4,zero,5628c <__alt_data_end+0xfffd628c>
   56658:	d9800c17 	ldw	r6,48(sp)
   5665c:	01bcab0e 	bge	zero,r6,5590c <__alt_data_end+0xfffd590c>
   56660:	d9401017 	ldw	r5,64(sp)
   56664:	d9000f17 	ldw	r4,60(sp)
   56668:	000d883a 	mov	r6,zero
   5666c:	01d00934 	movhi	r7,16420
   56670:	005ed600 	call	5ed60 <__muldf3>
   56674:	81000044 	addi	r4,r16,1
   56678:	d8800f15 	stw	r2,60(sp)
   5667c:	d8c01015 	stw	r3,64(sp)
   56680:	005ff480 	call	5ff48 <__floatsidf>
   56684:	d9800f17 	ldw	r6,60(sp)
   56688:	d9c01017 	ldw	r7,64(sp)
   5668c:	1009883a 	mov	r4,r2
   56690:	180b883a 	mov	r5,r3
   56694:	005ed600 	call	5ed60 <__muldf3>
   56698:	01d00734 	movhi	r7,16412
   5669c:	000d883a 	mov	r6,zero
   566a0:	1009883a 	mov	r4,r2
   566a4:	180b883a 	mov	r5,r3
   566a8:	005d88c0 	call	5d88c <__adddf3>
   566ac:	d9c00517 	ldw	r7,20(sp)
   566b0:	047f3034 	movhi	r17,64704
   566b4:	1021883a 	mov	r16,r2
   566b8:	39ffffc4 	addi	r7,r7,-1
   566bc:	d9c01315 	stw	r7,76(sp)
   566c0:	1c63883a 	add	r17,r3,r17
   566c4:	db000c17 	ldw	r12,48(sp)
   566c8:	003bea06 	br	55674 <__alt_data_end+0xfffd5674>
   566cc:	dc000915 	stw	r16,36(sp)
   566d0:	003e0e06 	br	55f0c <__alt_data_end+0xfffd5f0c>
   566d4:	01000e44 	movi	r4,57
   566d8:	8825883a 	mov	r18,r17
   566dc:	9dc00044 	addi	r23,r19,1
   566e0:	99000005 	stb	r4,0(r19)
   566e4:	a023883a 	mov	r17,r20
   566e8:	dc000915 	stw	r16,36(sp)
   566ec:	003da406 	br	55d80 <__alt_data_end+0xfffd5d80>
   566f0:	d9801417 	ldw	r6,80(sp)
   566f4:	d9c01517 	ldw	r7,84(sp)
   566f8:	0009883a 	mov	r4,zero
   566fc:	014ff834 	movhi	r5,16352
   56700:	005f5cc0 	call	5f5cc <__subdf3>
   56704:	880d883a 	mov	r6,r17
   56708:	a00f883a 	mov	r7,r20
   5670c:	1009883a 	mov	r4,r2
   56710:	180b883a 	mov	r5,r3
   56714:	005eb900 	call	5eb90 <__gedf2>
   56718:	00bc7c0e 	bge	zero,r2,5590c <__alt_data_end+0xfffd590c>
   5671c:	01000c04 	movi	r4,48
   56720:	00000106 	br	56728 <_dtoa_r+0x1580>
   56724:	102f883a 	mov	r23,r2
   56728:	b8bfffc4 	addi	r2,r23,-1
   5672c:	10c00007 	ldb	r3,0(r2)
   56730:	193ffc26 	beq	r3,r4,56724 <__alt_data_end+0xfffd6724>
   56734:	d9801317 	ldw	r6,76(sp)
   56738:	d9800515 	stw	r6,20(sp)
   5673c:	003c4406 	br	55850 <__alt_data_end+0xfffd5850>
   56740:	d9801317 	ldw	r6,76(sp)
   56744:	d9800515 	stw	r6,20(sp)
   56748:	003cea06 	br	55af4 <__alt_data_end+0xfffd5af4>
   5674c:	dd800f17 	ldw	r22,60(sp)
   56750:	dcc01017 	ldw	r19,64(sp)
   56754:	dc801217 	ldw	r18,72(sp)
   56758:	003c6c06 	br	5590c <__alt_data_end+0xfffd590c>
   5675c:	903e031e 	bne	r18,zero,55f6c <__alt_data_end+0xfffd5f6c>
   56760:	003ebb06 	br	56250 <__alt_data_end+0xfffd6250>
   56764:	103e6c1e 	bne	r2,zero,56118 <__alt_data_end+0xfffd6118>
   56768:	4080004c 	andi	r2,r8,1
   5676c:	103e6a26 	beq	r2,zero,56118 <__alt_data_end+0xfffd6118>
   56770:	003e6606 	br	5610c <__alt_data_end+0xfffd610c>
   56774:	d8c00317 	ldw	r3,12(sp)
   56778:	00800084 	movi	r2,2
   5677c:	10c02916 	blt	r2,r3,56824 <_dtoa_r+0x167c>
   56780:	d9000c17 	ldw	r4,48(sp)
   56784:	003e8806 	br	561a8 <__alt_data_end+0xfffd61a8>
   56788:	04000084 	movi	r16,2
   5678c:	003b9d06 	br	55604 <__alt_data_end+0xfffd5604>
   56790:	d9001317 	ldw	r4,76(sp)
   56794:	d9000515 	stw	r4,20(sp)
   56798:	003cd606 	br	55af4 <__alt_data_end+0xfffd5af4>
   5679c:	d8801317 	ldw	r2,76(sp)
   567a0:	d8800515 	stw	r2,20(sp)
   567a4:	003c2a06 	br	55850 <__alt_data_end+0xfffd5850>
   567a8:	d9800317 	ldw	r6,12(sp)
   567ac:	00800084 	movi	r2,2
   567b0:	11801516 	blt	r2,r6,56808 <_dtoa_r+0x1660>
   567b4:	d9c00c17 	ldw	r7,48(sp)
   567b8:	d9c00615 	stw	r7,24(sp)
   567bc:	003df706 	br	55f9c <__alt_data_end+0xfffd5f9c>
   567c0:	193d3926 	beq	r3,r4,55ca8 <__alt_data_end+0xfffd5ca8>
   567c4:	00c00f04 	movi	r3,60
   567c8:	1885c83a 	sub	r2,r3,r2
   567cc:	003ddf06 	br	55f4c <__alt_data_end+0xfffd5f4c>
   567d0:	e009883a 	mov	r4,fp
   567d4:	e0001115 	stw	zero,68(fp)
   567d8:	000b883a 	mov	r5,zero
   567dc:	0057de40 	call	57de4 <_Balloc>
   567e0:	d8800715 	stw	r2,28(sp)
   567e4:	d8c00717 	ldw	r3,28(sp)
   567e8:	00bfffc4 	movi	r2,-1
   567ec:	01000044 	movi	r4,1
   567f0:	d8800c15 	stw	r2,48(sp)
   567f4:	e0c01015 	stw	r3,64(fp)
   567f8:	d9000b15 	stw	r4,44(sp)
   567fc:	d8800615 	stw	r2,24(sp)
   56800:	d8002215 	stw	zero,136(sp)
   56804:	003c4106 	br	5590c <__alt_data_end+0xfffd590c>
   56808:	d8c00c17 	ldw	r3,48(sp)
   5680c:	d8c00615 	stw	r3,24(sp)
   56810:	003e7006 	br	561d4 <__alt_data_end+0xfffd61d4>
   56814:	04400044 	movi	r17,1
   56818:	003b2006 	br	5549c <__alt_data_end+0xfffd549c>
   5681c:	000b883a 	mov	r5,zero
   56820:	003b3d06 	br	55518 <__alt_data_end+0xfffd5518>
   56824:	d8800c17 	ldw	r2,48(sp)
   56828:	d8800615 	stw	r2,24(sp)
   5682c:	003e6906 	br	561d4 <__alt_data_end+0xfffd61d4>

00056830 <__sflush_r>:
   56830:	2880030b 	ldhu	r2,12(r5)
   56834:	defffb04 	addi	sp,sp,-20
   56838:	dcc00315 	stw	r19,12(sp)
   5683c:	dc400115 	stw	r17,4(sp)
   56840:	dfc00415 	stw	ra,16(sp)
   56844:	dc800215 	stw	r18,8(sp)
   56848:	dc000015 	stw	r16,0(sp)
   5684c:	10c0020c 	andi	r3,r2,8
   56850:	2823883a 	mov	r17,r5
   56854:	2027883a 	mov	r19,r4
   56858:	1800311e 	bne	r3,zero,56920 <__sflush_r+0xf0>
   5685c:	28c00117 	ldw	r3,4(r5)
   56860:	10820014 	ori	r2,r2,2048
   56864:	2880030d 	sth	r2,12(r5)
   56868:	00c04b0e 	bge	zero,r3,56998 <__sflush_r+0x168>
   5686c:	8a000a17 	ldw	r8,40(r17)
   56870:	40002326 	beq	r8,zero,56900 <__sflush_r+0xd0>
   56874:	9c000017 	ldw	r16,0(r19)
   56878:	10c4000c 	andi	r3,r2,4096
   5687c:	98000015 	stw	zero,0(r19)
   56880:	18004826 	beq	r3,zero,569a4 <__sflush_r+0x174>
   56884:	89801417 	ldw	r6,80(r17)
   56888:	10c0010c 	andi	r3,r2,4
   5688c:	18000626 	beq	r3,zero,568a8 <__sflush_r+0x78>
   56890:	88c00117 	ldw	r3,4(r17)
   56894:	88800c17 	ldw	r2,48(r17)
   56898:	30cdc83a 	sub	r6,r6,r3
   5689c:	10000226 	beq	r2,zero,568a8 <__sflush_r+0x78>
   568a0:	88800f17 	ldw	r2,60(r17)
   568a4:	308dc83a 	sub	r6,r6,r2
   568a8:	89400717 	ldw	r5,28(r17)
   568ac:	000f883a 	mov	r7,zero
   568b0:	9809883a 	mov	r4,r19
   568b4:	403ee83a 	callr	r8
   568b8:	00ffffc4 	movi	r3,-1
   568bc:	10c04426 	beq	r2,r3,569d0 <__sflush_r+0x1a0>
   568c0:	88c0030b 	ldhu	r3,12(r17)
   568c4:	89000417 	ldw	r4,16(r17)
   568c8:	88000115 	stw	zero,4(r17)
   568cc:	197dffcc 	andi	r5,r3,63487
   568d0:	8940030d 	sth	r5,12(r17)
   568d4:	89000015 	stw	r4,0(r17)
   568d8:	18c4000c 	andi	r3,r3,4096
   568dc:	18002c1e 	bne	r3,zero,56990 <__sflush_r+0x160>
   568e0:	89400c17 	ldw	r5,48(r17)
   568e4:	9c000015 	stw	r16,0(r19)
   568e8:	28000526 	beq	r5,zero,56900 <__sflush_r+0xd0>
   568ec:	88801004 	addi	r2,r17,64
   568f0:	28800226 	beq	r5,r2,568fc <__sflush_r+0xcc>
   568f4:	9809883a 	mov	r4,r19
   568f8:	0056fac0 	call	56fac <_free_r>
   568fc:	88000c15 	stw	zero,48(r17)
   56900:	0005883a 	mov	r2,zero
   56904:	dfc00417 	ldw	ra,16(sp)
   56908:	dcc00317 	ldw	r19,12(sp)
   5690c:	dc800217 	ldw	r18,8(sp)
   56910:	dc400117 	ldw	r17,4(sp)
   56914:	dc000017 	ldw	r16,0(sp)
   56918:	dec00504 	addi	sp,sp,20
   5691c:	f800283a 	ret
   56920:	2c800417 	ldw	r18,16(r5)
   56924:	903ff626 	beq	r18,zero,56900 <__alt_data_end+0xfffd6900>
   56928:	2c000017 	ldw	r16,0(r5)
   5692c:	108000cc 	andi	r2,r2,3
   56930:	2c800015 	stw	r18,0(r5)
   56934:	84a1c83a 	sub	r16,r16,r18
   56938:	1000131e 	bne	r2,zero,56988 <__sflush_r+0x158>
   5693c:	28800517 	ldw	r2,20(r5)
   56940:	88800215 	stw	r2,8(r17)
   56944:	04000316 	blt	zero,r16,56954 <__sflush_r+0x124>
   56948:	003fed06 	br	56900 <__alt_data_end+0xfffd6900>
   5694c:	90a5883a 	add	r18,r18,r2
   56950:	043feb0e 	bge	zero,r16,56900 <__alt_data_end+0xfffd6900>
   56954:	88800917 	ldw	r2,36(r17)
   56958:	89400717 	ldw	r5,28(r17)
   5695c:	800f883a 	mov	r7,r16
   56960:	900d883a 	mov	r6,r18
   56964:	9809883a 	mov	r4,r19
   56968:	103ee83a 	callr	r2
   5696c:	80a1c83a 	sub	r16,r16,r2
   56970:	00bff616 	blt	zero,r2,5694c <__alt_data_end+0xfffd694c>
   56974:	88c0030b 	ldhu	r3,12(r17)
   56978:	00bfffc4 	movi	r2,-1
   5697c:	18c01014 	ori	r3,r3,64
   56980:	88c0030d 	sth	r3,12(r17)
   56984:	003fdf06 	br	56904 <__alt_data_end+0xfffd6904>
   56988:	0005883a 	mov	r2,zero
   5698c:	003fec06 	br	56940 <__alt_data_end+0xfffd6940>
   56990:	88801415 	stw	r2,80(r17)
   56994:	003fd206 	br	568e0 <__alt_data_end+0xfffd68e0>
   56998:	28c00f17 	ldw	r3,60(r5)
   5699c:	00ffb316 	blt	zero,r3,5686c <__alt_data_end+0xfffd686c>
   569a0:	003fd706 	br	56900 <__alt_data_end+0xfffd6900>
   569a4:	89400717 	ldw	r5,28(r17)
   569a8:	000d883a 	mov	r6,zero
   569ac:	01c00044 	movi	r7,1
   569b0:	9809883a 	mov	r4,r19
   569b4:	403ee83a 	callr	r8
   569b8:	100d883a 	mov	r6,r2
   569bc:	00bfffc4 	movi	r2,-1
   569c0:	30801426 	beq	r6,r2,56a14 <__sflush_r+0x1e4>
   569c4:	8880030b 	ldhu	r2,12(r17)
   569c8:	8a000a17 	ldw	r8,40(r17)
   569cc:	003fae06 	br	56888 <__alt_data_end+0xfffd6888>
   569d0:	98c00017 	ldw	r3,0(r19)
   569d4:	183fba26 	beq	r3,zero,568c0 <__alt_data_end+0xfffd68c0>
   569d8:	01000744 	movi	r4,29
   569dc:	19000626 	beq	r3,r4,569f8 <__sflush_r+0x1c8>
   569e0:	01000584 	movi	r4,22
   569e4:	19000426 	beq	r3,r4,569f8 <__sflush_r+0x1c8>
   569e8:	88c0030b 	ldhu	r3,12(r17)
   569ec:	18c01014 	ori	r3,r3,64
   569f0:	88c0030d 	sth	r3,12(r17)
   569f4:	003fc306 	br	56904 <__alt_data_end+0xfffd6904>
   569f8:	8880030b 	ldhu	r2,12(r17)
   569fc:	88c00417 	ldw	r3,16(r17)
   56a00:	88000115 	stw	zero,4(r17)
   56a04:	10bdffcc 	andi	r2,r2,63487
   56a08:	8880030d 	sth	r2,12(r17)
   56a0c:	88c00015 	stw	r3,0(r17)
   56a10:	003fb306 	br	568e0 <__alt_data_end+0xfffd68e0>
   56a14:	98800017 	ldw	r2,0(r19)
   56a18:	103fea26 	beq	r2,zero,569c4 <__alt_data_end+0xfffd69c4>
   56a1c:	00c00744 	movi	r3,29
   56a20:	10c00226 	beq	r2,r3,56a2c <__sflush_r+0x1fc>
   56a24:	00c00584 	movi	r3,22
   56a28:	10c0031e 	bne	r2,r3,56a38 <__sflush_r+0x208>
   56a2c:	9c000015 	stw	r16,0(r19)
   56a30:	0005883a 	mov	r2,zero
   56a34:	003fb306 	br	56904 <__alt_data_end+0xfffd6904>
   56a38:	88c0030b 	ldhu	r3,12(r17)
   56a3c:	3005883a 	mov	r2,r6
   56a40:	18c01014 	ori	r3,r3,64
   56a44:	88c0030d 	sth	r3,12(r17)
   56a48:	003fae06 	br	56904 <__alt_data_end+0xfffd6904>

00056a4c <_fflush_r>:
   56a4c:	defffd04 	addi	sp,sp,-12
   56a50:	dc000115 	stw	r16,4(sp)
   56a54:	dfc00215 	stw	ra,8(sp)
   56a58:	2021883a 	mov	r16,r4
   56a5c:	20000226 	beq	r4,zero,56a68 <_fflush_r+0x1c>
   56a60:	20800e17 	ldw	r2,56(r4)
   56a64:	10000c26 	beq	r2,zero,56a98 <_fflush_r+0x4c>
   56a68:	2880030f 	ldh	r2,12(r5)
   56a6c:	1000051e 	bne	r2,zero,56a84 <_fflush_r+0x38>
   56a70:	0005883a 	mov	r2,zero
   56a74:	dfc00217 	ldw	ra,8(sp)
   56a78:	dc000117 	ldw	r16,4(sp)
   56a7c:	dec00304 	addi	sp,sp,12
   56a80:	f800283a 	ret
   56a84:	8009883a 	mov	r4,r16
   56a88:	dfc00217 	ldw	ra,8(sp)
   56a8c:	dc000117 	ldw	r16,4(sp)
   56a90:	dec00304 	addi	sp,sp,12
   56a94:	00568301 	jmpi	56830 <__sflush_r>
   56a98:	d9400015 	stw	r5,0(sp)
   56a9c:	0056e380 	call	56e38 <__sinit>
   56aa0:	d9400017 	ldw	r5,0(sp)
   56aa4:	003ff006 	br	56a68 <__alt_data_end+0xfffd6a68>

00056aa8 <fflush>:
   56aa8:	20000526 	beq	r4,zero,56ac0 <fflush+0x18>
   56aac:	008001f4 	movhi	r2,7
   56ab0:	10bb7304 	addi	r2,r2,-4660
   56ab4:	200b883a 	mov	r5,r4
   56ab8:	11000017 	ldw	r4,0(r2)
   56abc:	0056a4c1 	jmpi	56a4c <_fflush_r>
   56ac0:	008001f4 	movhi	r2,7
   56ac4:	10bb7204 	addi	r2,r2,-4664
   56ac8:	11000017 	ldw	r4,0(r2)
   56acc:	01400174 	movhi	r5,5
   56ad0:	295a9304 	addi	r5,r5,27212
   56ad4:	00578481 	jmpi	57848 <_fwalk_reent>

00056ad8 <__fp_unlock>:
   56ad8:	0005883a 	mov	r2,zero
   56adc:	f800283a 	ret

00056ae0 <_cleanup_r>:
   56ae0:	014001b4 	movhi	r5,6
   56ae4:	29719a04 	addi	r5,r5,-14744
   56ae8:	00578481 	jmpi	57848 <_fwalk_reent>

00056aec <__sinit.part.1>:
   56aec:	defff704 	addi	sp,sp,-36
   56af0:	00c00174 	movhi	r3,5
   56af4:	dfc00815 	stw	ra,32(sp)
   56af8:	ddc00715 	stw	r23,28(sp)
   56afc:	dd800615 	stw	r22,24(sp)
   56b00:	dd400515 	stw	r21,20(sp)
   56b04:	dd000415 	stw	r20,16(sp)
   56b08:	dcc00315 	stw	r19,12(sp)
   56b0c:	dc800215 	stw	r18,8(sp)
   56b10:	dc400115 	stw	r17,4(sp)
   56b14:	dc000015 	stw	r16,0(sp)
   56b18:	18dab804 	addi	r3,r3,27360
   56b1c:	24000117 	ldw	r16,4(r4)
   56b20:	20c00f15 	stw	r3,60(r4)
   56b24:	2080bb04 	addi	r2,r4,748
   56b28:	00c000c4 	movi	r3,3
   56b2c:	20c0b915 	stw	r3,740(r4)
   56b30:	2080ba15 	stw	r2,744(r4)
   56b34:	2000b815 	stw	zero,736(r4)
   56b38:	05c00204 	movi	r23,8
   56b3c:	00800104 	movi	r2,4
   56b40:	2025883a 	mov	r18,r4
   56b44:	b80d883a 	mov	r6,r23
   56b48:	81001704 	addi	r4,r16,92
   56b4c:	000b883a 	mov	r5,zero
   56b50:	80000015 	stw	zero,0(r16)
   56b54:	80000115 	stw	zero,4(r16)
   56b58:	80000215 	stw	zero,8(r16)
   56b5c:	8080030d 	sth	r2,12(r16)
   56b60:	80001915 	stw	zero,100(r16)
   56b64:	8000038d 	sth	zero,14(r16)
   56b68:	80000415 	stw	zero,16(r16)
   56b6c:	80000515 	stw	zero,20(r16)
   56b70:	80000615 	stw	zero,24(r16)
   56b74:	004ff9c0 	call	4ff9c <memset>
   56b78:	058001b4 	movhi	r22,6
   56b7c:	94400217 	ldw	r17,8(r18)
   56b80:	054001b4 	movhi	r21,6
   56b84:	050001b4 	movhi	r20,6
   56b88:	04c001b4 	movhi	r19,6
   56b8c:	b5a57704 	addi	r22,r22,-27172
   56b90:	ad658e04 	addi	r21,r21,-27080
   56b94:	a525ad04 	addi	r20,r20,-26956
   56b98:	9ce5c404 	addi	r19,r19,-26864
   56b9c:	85800815 	stw	r22,32(r16)
   56ba0:	85400915 	stw	r21,36(r16)
   56ba4:	85000a15 	stw	r20,40(r16)
   56ba8:	84c00b15 	stw	r19,44(r16)
   56bac:	84000715 	stw	r16,28(r16)
   56bb0:	00800284 	movi	r2,10
   56bb4:	8880030d 	sth	r2,12(r17)
   56bb8:	00800044 	movi	r2,1
   56bbc:	b80d883a 	mov	r6,r23
   56bc0:	89001704 	addi	r4,r17,92
   56bc4:	000b883a 	mov	r5,zero
   56bc8:	88000015 	stw	zero,0(r17)
   56bcc:	88000115 	stw	zero,4(r17)
   56bd0:	88000215 	stw	zero,8(r17)
   56bd4:	88001915 	stw	zero,100(r17)
   56bd8:	8880038d 	sth	r2,14(r17)
   56bdc:	88000415 	stw	zero,16(r17)
   56be0:	88000515 	stw	zero,20(r17)
   56be4:	88000615 	stw	zero,24(r17)
   56be8:	004ff9c0 	call	4ff9c <memset>
   56bec:	94000317 	ldw	r16,12(r18)
   56bf0:	00800484 	movi	r2,18
   56bf4:	8c400715 	stw	r17,28(r17)
   56bf8:	8d800815 	stw	r22,32(r17)
   56bfc:	8d400915 	stw	r21,36(r17)
   56c00:	8d000a15 	stw	r20,40(r17)
   56c04:	8cc00b15 	stw	r19,44(r17)
   56c08:	8080030d 	sth	r2,12(r16)
   56c0c:	00800084 	movi	r2,2
   56c10:	80000015 	stw	zero,0(r16)
   56c14:	80000115 	stw	zero,4(r16)
   56c18:	80000215 	stw	zero,8(r16)
   56c1c:	80001915 	stw	zero,100(r16)
   56c20:	8080038d 	sth	r2,14(r16)
   56c24:	80000415 	stw	zero,16(r16)
   56c28:	80000515 	stw	zero,20(r16)
   56c2c:	80000615 	stw	zero,24(r16)
   56c30:	b80d883a 	mov	r6,r23
   56c34:	000b883a 	mov	r5,zero
   56c38:	81001704 	addi	r4,r16,92
   56c3c:	004ff9c0 	call	4ff9c <memset>
   56c40:	00800044 	movi	r2,1
   56c44:	84000715 	stw	r16,28(r16)
   56c48:	85800815 	stw	r22,32(r16)
   56c4c:	85400915 	stw	r21,36(r16)
   56c50:	85000a15 	stw	r20,40(r16)
   56c54:	84c00b15 	stw	r19,44(r16)
   56c58:	90800e15 	stw	r2,56(r18)
   56c5c:	dfc00817 	ldw	ra,32(sp)
   56c60:	ddc00717 	ldw	r23,28(sp)
   56c64:	dd800617 	ldw	r22,24(sp)
   56c68:	dd400517 	ldw	r21,20(sp)
   56c6c:	dd000417 	ldw	r20,16(sp)
   56c70:	dcc00317 	ldw	r19,12(sp)
   56c74:	dc800217 	ldw	r18,8(sp)
   56c78:	dc400117 	ldw	r17,4(sp)
   56c7c:	dc000017 	ldw	r16,0(sp)
   56c80:	dec00904 	addi	sp,sp,36
   56c84:	f800283a 	ret

00056c88 <__fp_lock>:
   56c88:	0005883a 	mov	r2,zero
   56c8c:	f800283a 	ret

00056c90 <__sfmoreglue>:
   56c90:	defffc04 	addi	sp,sp,-16
   56c94:	dc800215 	stw	r18,8(sp)
   56c98:	2825883a 	mov	r18,r5
   56c9c:	dc000015 	stw	r16,0(sp)
   56ca0:	01401a04 	movi	r5,104
   56ca4:	2021883a 	mov	r16,r4
   56ca8:	913fffc4 	addi	r4,r18,-1
   56cac:	dfc00315 	stw	ra,12(sp)
   56cb0:	dc400115 	stw	r17,4(sp)
   56cb4:	004dab40 	call	4dab4 <__mulsi3>
   56cb8:	8009883a 	mov	r4,r16
   56cbc:	11401d04 	addi	r5,r2,116
   56cc0:	1023883a 	mov	r17,r2
   56cc4:	004f6480 	call	4f648 <_malloc_r>
   56cc8:	1021883a 	mov	r16,r2
   56ccc:	10000726 	beq	r2,zero,56cec <__sfmoreglue+0x5c>
   56cd0:	11000304 	addi	r4,r2,12
   56cd4:	10000015 	stw	zero,0(r2)
   56cd8:	14800115 	stw	r18,4(r2)
   56cdc:	11000215 	stw	r4,8(r2)
   56ce0:	89801a04 	addi	r6,r17,104
   56ce4:	000b883a 	mov	r5,zero
   56ce8:	004ff9c0 	call	4ff9c <memset>
   56cec:	8005883a 	mov	r2,r16
   56cf0:	dfc00317 	ldw	ra,12(sp)
   56cf4:	dc800217 	ldw	r18,8(sp)
   56cf8:	dc400117 	ldw	r17,4(sp)
   56cfc:	dc000017 	ldw	r16,0(sp)
   56d00:	dec00404 	addi	sp,sp,16
   56d04:	f800283a 	ret

00056d08 <__sfp>:
   56d08:	defffb04 	addi	sp,sp,-20
   56d0c:	dc000015 	stw	r16,0(sp)
   56d10:	040001f4 	movhi	r16,7
   56d14:	843b7204 	addi	r16,r16,-4664
   56d18:	dcc00315 	stw	r19,12(sp)
   56d1c:	2027883a 	mov	r19,r4
   56d20:	81000017 	ldw	r4,0(r16)
   56d24:	dfc00415 	stw	ra,16(sp)
   56d28:	dc800215 	stw	r18,8(sp)
   56d2c:	20800e17 	ldw	r2,56(r4)
   56d30:	dc400115 	stw	r17,4(sp)
   56d34:	1000021e 	bne	r2,zero,56d40 <__sfp+0x38>
   56d38:	0056aec0 	call	56aec <__sinit.part.1>
   56d3c:	81000017 	ldw	r4,0(r16)
   56d40:	2480b804 	addi	r18,r4,736
   56d44:	047fffc4 	movi	r17,-1
   56d48:	91000117 	ldw	r4,4(r18)
   56d4c:	94000217 	ldw	r16,8(r18)
   56d50:	213fffc4 	addi	r4,r4,-1
   56d54:	20000a16 	blt	r4,zero,56d80 <__sfp+0x78>
   56d58:	8080030f 	ldh	r2,12(r16)
   56d5c:	10000c26 	beq	r2,zero,56d90 <__sfp+0x88>
   56d60:	80c01d04 	addi	r3,r16,116
   56d64:	00000206 	br	56d70 <__sfp+0x68>
   56d68:	18bfe60f 	ldh	r2,-104(r3)
   56d6c:	10000826 	beq	r2,zero,56d90 <__sfp+0x88>
   56d70:	213fffc4 	addi	r4,r4,-1
   56d74:	1c3ffd04 	addi	r16,r3,-12
   56d78:	18c01a04 	addi	r3,r3,104
   56d7c:	247ffa1e 	bne	r4,r17,56d68 <__alt_data_end+0xfffd6d68>
   56d80:	90800017 	ldw	r2,0(r18)
   56d84:	10001d26 	beq	r2,zero,56dfc <__sfp+0xf4>
   56d88:	1025883a 	mov	r18,r2
   56d8c:	003fee06 	br	56d48 <__alt_data_end+0xfffd6d48>
   56d90:	00bfffc4 	movi	r2,-1
   56d94:	8080038d 	sth	r2,14(r16)
   56d98:	00800044 	movi	r2,1
   56d9c:	8080030d 	sth	r2,12(r16)
   56da0:	80001915 	stw	zero,100(r16)
   56da4:	80000015 	stw	zero,0(r16)
   56da8:	80000215 	stw	zero,8(r16)
   56dac:	80000115 	stw	zero,4(r16)
   56db0:	80000415 	stw	zero,16(r16)
   56db4:	80000515 	stw	zero,20(r16)
   56db8:	80000615 	stw	zero,24(r16)
   56dbc:	01800204 	movi	r6,8
   56dc0:	000b883a 	mov	r5,zero
   56dc4:	81001704 	addi	r4,r16,92
   56dc8:	004ff9c0 	call	4ff9c <memset>
   56dcc:	8005883a 	mov	r2,r16
   56dd0:	80000c15 	stw	zero,48(r16)
   56dd4:	80000d15 	stw	zero,52(r16)
   56dd8:	80001115 	stw	zero,68(r16)
   56ddc:	80001215 	stw	zero,72(r16)
   56de0:	dfc00417 	ldw	ra,16(sp)
   56de4:	dcc00317 	ldw	r19,12(sp)
   56de8:	dc800217 	ldw	r18,8(sp)
   56dec:	dc400117 	ldw	r17,4(sp)
   56df0:	dc000017 	ldw	r16,0(sp)
   56df4:	dec00504 	addi	sp,sp,20
   56df8:	f800283a 	ret
   56dfc:	01400104 	movi	r5,4
   56e00:	9809883a 	mov	r4,r19
   56e04:	0056c900 	call	56c90 <__sfmoreglue>
   56e08:	90800015 	stw	r2,0(r18)
   56e0c:	103fde1e 	bne	r2,zero,56d88 <__alt_data_end+0xfffd6d88>
   56e10:	00800304 	movi	r2,12
   56e14:	98800015 	stw	r2,0(r19)
   56e18:	0005883a 	mov	r2,zero
   56e1c:	003ff006 	br	56de0 <__alt_data_end+0xfffd6de0>

00056e20 <_cleanup>:
   56e20:	008001f4 	movhi	r2,7
   56e24:	10bb7204 	addi	r2,r2,-4664
   56e28:	11000017 	ldw	r4,0(r2)
   56e2c:	014001b4 	movhi	r5,6
   56e30:	29719a04 	addi	r5,r5,-14744
   56e34:	00578481 	jmpi	57848 <_fwalk_reent>

00056e38 <__sinit>:
   56e38:	20800e17 	ldw	r2,56(r4)
   56e3c:	10000126 	beq	r2,zero,56e44 <__sinit+0xc>
   56e40:	f800283a 	ret
   56e44:	0056aec1 	jmpi	56aec <__sinit.part.1>

00056e48 <__sfp_lock_acquire>:
   56e48:	f800283a 	ret

00056e4c <__sfp_lock_release>:
   56e4c:	f800283a 	ret

00056e50 <__sinit_lock_acquire>:
   56e50:	f800283a 	ret

00056e54 <__sinit_lock_release>:
   56e54:	f800283a 	ret

00056e58 <__fp_lock_all>:
   56e58:	008001f4 	movhi	r2,7
   56e5c:	10bb7304 	addi	r2,r2,-4660
   56e60:	11000017 	ldw	r4,0(r2)
   56e64:	01400174 	movhi	r5,5
   56e68:	295b2204 	addi	r5,r5,27784
   56e6c:	00577841 	jmpi	57784 <_fwalk>

00056e70 <__fp_unlock_all>:
   56e70:	008001f4 	movhi	r2,7
   56e74:	10bb7304 	addi	r2,r2,-4660
   56e78:	11000017 	ldw	r4,0(r2)
   56e7c:	01400174 	movhi	r5,5
   56e80:	295ab604 	addi	r5,r5,27352
   56e84:	00577841 	jmpi	57784 <_fwalk>

00056e88 <_malloc_trim_r>:
   56e88:	defffb04 	addi	sp,sp,-20
   56e8c:	dcc00315 	stw	r19,12(sp)
   56e90:	04c001f4 	movhi	r19,7
   56e94:	dc800215 	stw	r18,8(sp)
   56e98:	dc400115 	stw	r17,4(sp)
   56e9c:	dc000015 	stw	r16,0(sp)
   56ea0:	dfc00415 	stw	ra,16(sp)
   56ea4:	2821883a 	mov	r16,r5
   56ea8:	9cf01204 	addi	r19,r19,-16312
   56eac:	2025883a 	mov	r18,r4
   56eb0:	00608280 	call	60828 <__malloc_lock>
   56eb4:	98800217 	ldw	r2,8(r19)
   56eb8:	14400117 	ldw	r17,4(r2)
   56ebc:	00bfff04 	movi	r2,-4
   56ec0:	88a2703a 	and	r17,r17,r2
   56ec4:	8c21c83a 	sub	r16,r17,r16
   56ec8:	8403fbc4 	addi	r16,r16,4079
   56ecc:	8020d33a 	srli	r16,r16,12
   56ed0:	0083ffc4 	movi	r2,4095
   56ed4:	843fffc4 	addi	r16,r16,-1
   56ed8:	8020933a 	slli	r16,r16,12
   56edc:	1400060e 	bge	r2,r16,56ef8 <_malloc_trim_r+0x70>
   56ee0:	000b883a 	mov	r5,zero
   56ee4:	9009883a 	mov	r4,r18
   56ee8:	00502240 	call	50224 <_sbrk_r>
   56eec:	98c00217 	ldw	r3,8(r19)
   56ef0:	1c47883a 	add	r3,r3,r17
   56ef4:	10c00a26 	beq	r2,r3,56f20 <_malloc_trim_r+0x98>
   56ef8:	9009883a 	mov	r4,r18
   56efc:	006084c0 	call	6084c <__malloc_unlock>
   56f00:	0005883a 	mov	r2,zero
   56f04:	dfc00417 	ldw	ra,16(sp)
   56f08:	dcc00317 	ldw	r19,12(sp)
   56f0c:	dc800217 	ldw	r18,8(sp)
   56f10:	dc400117 	ldw	r17,4(sp)
   56f14:	dc000017 	ldw	r16,0(sp)
   56f18:	dec00504 	addi	sp,sp,20
   56f1c:	f800283a 	ret
   56f20:	040bc83a 	sub	r5,zero,r16
   56f24:	9009883a 	mov	r4,r18
   56f28:	00502240 	call	50224 <_sbrk_r>
   56f2c:	00ffffc4 	movi	r3,-1
   56f30:	10c00d26 	beq	r2,r3,56f68 <_malloc_trim_r+0xe0>
   56f34:	00c001f4 	movhi	r3,7
   56f38:	18c86504 	addi	r3,r3,8596
   56f3c:	18800017 	ldw	r2,0(r3)
   56f40:	99000217 	ldw	r4,8(r19)
   56f44:	8c23c83a 	sub	r17,r17,r16
   56f48:	8c400054 	ori	r17,r17,1
   56f4c:	1421c83a 	sub	r16,r2,r16
   56f50:	24400115 	stw	r17,4(r4)
   56f54:	9009883a 	mov	r4,r18
   56f58:	1c000015 	stw	r16,0(r3)
   56f5c:	006084c0 	call	6084c <__malloc_unlock>
   56f60:	00800044 	movi	r2,1
   56f64:	003fe706 	br	56f04 <__alt_data_end+0xfffd6f04>
   56f68:	000b883a 	mov	r5,zero
   56f6c:	9009883a 	mov	r4,r18
   56f70:	00502240 	call	50224 <_sbrk_r>
   56f74:	99000217 	ldw	r4,8(r19)
   56f78:	014003c4 	movi	r5,15
   56f7c:	1107c83a 	sub	r3,r2,r4
   56f80:	28ffdd0e 	bge	r5,r3,56ef8 <__alt_data_end+0xfffd6ef8>
   56f84:	014001f4 	movhi	r5,7
   56f88:	297b7404 	addi	r5,r5,-4656
   56f8c:	29400017 	ldw	r5,0(r5)
   56f90:	18c00054 	ori	r3,r3,1
   56f94:	20c00115 	stw	r3,4(r4)
   56f98:	00c001f4 	movhi	r3,7
   56f9c:	1145c83a 	sub	r2,r2,r5
   56fa0:	18c86504 	addi	r3,r3,8596
   56fa4:	18800015 	stw	r2,0(r3)
   56fa8:	003fd306 	br	56ef8 <__alt_data_end+0xfffd6ef8>

00056fac <_free_r>:
   56fac:	28004126 	beq	r5,zero,570b4 <_free_r+0x108>
   56fb0:	defffd04 	addi	sp,sp,-12
   56fb4:	dc400115 	stw	r17,4(sp)
   56fb8:	dc000015 	stw	r16,0(sp)
   56fbc:	2023883a 	mov	r17,r4
   56fc0:	2821883a 	mov	r16,r5
   56fc4:	dfc00215 	stw	ra,8(sp)
   56fc8:	00608280 	call	60828 <__malloc_lock>
   56fcc:	81ffff17 	ldw	r7,-4(r16)
   56fd0:	00bfff84 	movi	r2,-2
   56fd4:	010001f4 	movhi	r4,7
   56fd8:	81bffe04 	addi	r6,r16,-8
   56fdc:	3884703a 	and	r2,r7,r2
   56fe0:	21301204 	addi	r4,r4,-16312
   56fe4:	308b883a 	add	r5,r6,r2
   56fe8:	2a400117 	ldw	r9,4(r5)
   56fec:	22000217 	ldw	r8,8(r4)
   56ff0:	00ffff04 	movi	r3,-4
   56ff4:	48c6703a 	and	r3,r9,r3
   56ff8:	2a005726 	beq	r5,r8,57158 <_free_r+0x1ac>
   56ffc:	28c00115 	stw	r3,4(r5)
   57000:	39c0004c 	andi	r7,r7,1
   57004:	3800091e 	bne	r7,zero,5702c <_free_r+0x80>
   57008:	823ffe17 	ldw	r8,-8(r16)
   5700c:	22400204 	addi	r9,r4,8
   57010:	320dc83a 	sub	r6,r6,r8
   57014:	31c00217 	ldw	r7,8(r6)
   57018:	1205883a 	add	r2,r2,r8
   5701c:	3a406526 	beq	r7,r9,571b4 <_free_r+0x208>
   57020:	32000317 	ldw	r8,12(r6)
   57024:	3a000315 	stw	r8,12(r7)
   57028:	41c00215 	stw	r7,8(r8)
   5702c:	28cf883a 	add	r7,r5,r3
   57030:	39c00117 	ldw	r7,4(r7)
   57034:	39c0004c 	andi	r7,r7,1
   57038:	38003a26 	beq	r7,zero,57124 <_free_r+0x178>
   5703c:	10c00054 	ori	r3,r2,1
   57040:	30c00115 	stw	r3,4(r6)
   57044:	3087883a 	add	r3,r6,r2
   57048:	18800015 	stw	r2,0(r3)
   5704c:	00c07fc4 	movi	r3,511
   57050:	18801936 	bltu	r3,r2,570b8 <_free_r+0x10c>
   57054:	1004d0fa 	srli	r2,r2,3
   57058:	01c00044 	movi	r7,1
   5705c:	21400117 	ldw	r5,4(r4)
   57060:	10c00044 	addi	r3,r2,1
   57064:	18c7883a 	add	r3,r3,r3
   57068:	1005d0ba 	srai	r2,r2,2
   5706c:	18c7883a 	add	r3,r3,r3
   57070:	18c7883a 	add	r3,r3,r3
   57074:	1907883a 	add	r3,r3,r4
   57078:	3884983a 	sll	r2,r7,r2
   5707c:	19c00017 	ldw	r7,0(r3)
   57080:	1a3ffe04 	addi	r8,r3,-8
   57084:	1144b03a 	or	r2,r2,r5
   57088:	32000315 	stw	r8,12(r6)
   5708c:	31c00215 	stw	r7,8(r6)
   57090:	20800115 	stw	r2,4(r4)
   57094:	19800015 	stw	r6,0(r3)
   57098:	39800315 	stw	r6,12(r7)
   5709c:	8809883a 	mov	r4,r17
   570a0:	dfc00217 	ldw	ra,8(sp)
   570a4:	dc400117 	ldw	r17,4(sp)
   570a8:	dc000017 	ldw	r16,0(sp)
   570ac:	dec00304 	addi	sp,sp,12
   570b0:	006084c1 	jmpi	6084c <__malloc_unlock>
   570b4:	f800283a 	ret
   570b8:	100ad27a 	srli	r5,r2,9
   570bc:	00c00104 	movi	r3,4
   570c0:	19404a36 	bltu	r3,r5,571ec <_free_r+0x240>
   570c4:	100ad1ba 	srli	r5,r2,6
   570c8:	28c00e44 	addi	r3,r5,57
   570cc:	18c7883a 	add	r3,r3,r3
   570d0:	29400e04 	addi	r5,r5,56
   570d4:	18c7883a 	add	r3,r3,r3
   570d8:	18c7883a 	add	r3,r3,r3
   570dc:	1909883a 	add	r4,r3,r4
   570e0:	20c00017 	ldw	r3,0(r4)
   570e4:	01c001f4 	movhi	r7,7
   570e8:	213ffe04 	addi	r4,r4,-8
   570ec:	39f01204 	addi	r7,r7,-16312
   570f0:	20c04426 	beq	r4,r3,57204 <_free_r+0x258>
   570f4:	01ffff04 	movi	r7,-4
   570f8:	19400117 	ldw	r5,4(r3)
   570fc:	29ca703a 	and	r5,r5,r7
   57100:	1140022e 	bgeu	r2,r5,5710c <_free_r+0x160>
   57104:	18c00217 	ldw	r3,8(r3)
   57108:	20fffb1e 	bne	r4,r3,570f8 <__alt_data_end+0xfffd70f8>
   5710c:	19000317 	ldw	r4,12(r3)
   57110:	31000315 	stw	r4,12(r6)
   57114:	30c00215 	stw	r3,8(r6)
   57118:	21800215 	stw	r6,8(r4)
   5711c:	19800315 	stw	r6,12(r3)
   57120:	003fde06 	br	5709c <__alt_data_end+0xfffd709c>
   57124:	29c00217 	ldw	r7,8(r5)
   57128:	10c5883a 	add	r2,r2,r3
   5712c:	00c001f4 	movhi	r3,7
   57130:	18f01404 	addi	r3,r3,-16304
   57134:	38c03b26 	beq	r7,r3,57224 <_free_r+0x278>
   57138:	2a000317 	ldw	r8,12(r5)
   5713c:	11400054 	ori	r5,r2,1
   57140:	3087883a 	add	r3,r6,r2
   57144:	3a000315 	stw	r8,12(r7)
   57148:	41c00215 	stw	r7,8(r8)
   5714c:	31400115 	stw	r5,4(r6)
   57150:	18800015 	stw	r2,0(r3)
   57154:	003fbd06 	br	5704c <__alt_data_end+0xfffd704c>
   57158:	39c0004c 	andi	r7,r7,1
   5715c:	10c5883a 	add	r2,r2,r3
   57160:	3800071e 	bne	r7,zero,57180 <_free_r+0x1d4>
   57164:	81fffe17 	ldw	r7,-8(r16)
   57168:	31cdc83a 	sub	r6,r6,r7
   5716c:	30c00317 	ldw	r3,12(r6)
   57170:	31400217 	ldw	r5,8(r6)
   57174:	11c5883a 	add	r2,r2,r7
   57178:	28c00315 	stw	r3,12(r5)
   5717c:	19400215 	stw	r5,8(r3)
   57180:	10c00054 	ori	r3,r2,1
   57184:	30c00115 	stw	r3,4(r6)
   57188:	00c001f4 	movhi	r3,7
   5718c:	18fb7504 	addi	r3,r3,-4652
   57190:	18c00017 	ldw	r3,0(r3)
   57194:	21800215 	stw	r6,8(r4)
   57198:	10ffc036 	bltu	r2,r3,5709c <__alt_data_end+0xfffd709c>
   5719c:	008001f4 	movhi	r2,7
   571a0:	10880d04 	addi	r2,r2,8244
   571a4:	11400017 	ldw	r5,0(r2)
   571a8:	8809883a 	mov	r4,r17
   571ac:	0056e880 	call	56e88 <_malloc_trim_r>
   571b0:	003fba06 	br	5709c <__alt_data_end+0xfffd709c>
   571b4:	28c9883a 	add	r4,r5,r3
   571b8:	21000117 	ldw	r4,4(r4)
   571bc:	2100004c 	andi	r4,r4,1
   571c0:	2000391e 	bne	r4,zero,572a8 <_free_r+0x2fc>
   571c4:	29c00217 	ldw	r7,8(r5)
   571c8:	29000317 	ldw	r4,12(r5)
   571cc:	1885883a 	add	r2,r3,r2
   571d0:	10c00054 	ori	r3,r2,1
   571d4:	39000315 	stw	r4,12(r7)
   571d8:	21c00215 	stw	r7,8(r4)
   571dc:	30c00115 	stw	r3,4(r6)
   571e0:	308d883a 	add	r6,r6,r2
   571e4:	30800015 	stw	r2,0(r6)
   571e8:	003fac06 	br	5709c <__alt_data_end+0xfffd709c>
   571ec:	00c00504 	movi	r3,20
   571f0:	19401536 	bltu	r3,r5,57248 <_free_r+0x29c>
   571f4:	28c01704 	addi	r3,r5,92
   571f8:	18c7883a 	add	r3,r3,r3
   571fc:	294016c4 	addi	r5,r5,91
   57200:	003fb406 	br	570d4 <__alt_data_end+0xfffd70d4>
   57204:	280bd0ba 	srai	r5,r5,2
   57208:	00c00044 	movi	r3,1
   5720c:	38800117 	ldw	r2,4(r7)
   57210:	194a983a 	sll	r5,r3,r5
   57214:	2007883a 	mov	r3,r4
   57218:	2884b03a 	or	r2,r5,r2
   5721c:	38800115 	stw	r2,4(r7)
   57220:	003fbb06 	br	57110 <__alt_data_end+0xfffd7110>
   57224:	21800515 	stw	r6,20(r4)
   57228:	21800415 	stw	r6,16(r4)
   5722c:	10c00054 	ori	r3,r2,1
   57230:	31c00315 	stw	r7,12(r6)
   57234:	31c00215 	stw	r7,8(r6)
   57238:	30c00115 	stw	r3,4(r6)
   5723c:	308d883a 	add	r6,r6,r2
   57240:	30800015 	stw	r2,0(r6)
   57244:	003f9506 	br	5709c <__alt_data_end+0xfffd709c>
   57248:	00c01504 	movi	r3,84
   5724c:	19400536 	bltu	r3,r5,57264 <_free_r+0x2b8>
   57250:	100ad33a 	srli	r5,r2,12
   57254:	28c01bc4 	addi	r3,r5,111
   57258:	18c7883a 	add	r3,r3,r3
   5725c:	29401b84 	addi	r5,r5,110
   57260:	003f9c06 	br	570d4 <__alt_data_end+0xfffd70d4>
   57264:	00c05504 	movi	r3,340
   57268:	19400536 	bltu	r3,r5,57280 <_free_r+0x2d4>
   5726c:	100ad3fa 	srli	r5,r2,15
   57270:	28c01e04 	addi	r3,r5,120
   57274:	18c7883a 	add	r3,r3,r3
   57278:	29401dc4 	addi	r5,r5,119
   5727c:	003f9506 	br	570d4 <__alt_data_end+0xfffd70d4>
   57280:	00c15504 	movi	r3,1364
   57284:	19400536 	bltu	r3,r5,5729c <_free_r+0x2f0>
   57288:	100ad4ba 	srli	r5,r2,18
   5728c:	28c01f44 	addi	r3,r5,125
   57290:	18c7883a 	add	r3,r3,r3
   57294:	29401f04 	addi	r5,r5,124
   57298:	003f8e06 	br	570d4 <__alt_data_end+0xfffd70d4>
   5729c:	00c03f84 	movi	r3,254
   572a0:	01401f84 	movi	r5,126
   572a4:	003f8b06 	br	570d4 <__alt_data_end+0xfffd70d4>
   572a8:	10c00054 	ori	r3,r2,1
   572ac:	30c00115 	stw	r3,4(r6)
   572b0:	308d883a 	add	r6,r6,r2
   572b4:	30800015 	stw	r2,0(r6)
   572b8:	003f7806 	br	5709c <__alt_data_end+0xfffd709c>

000572bc <__sfvwrite_r>:
   572bc:	30800217 	ldw	r2,8(r6)
   572c0:	10006726 	beq	r2,zero,57460 <__sfvwrite_r+0x1a4>
   572c4:	28c0030b 	ldhu	r3,12(r5)
   572c8:	defff404 	addi	sp,sp,-48
   572cc:	dd400715 	stw	r21,28(sp)
   572d0:	dd000615 	stw	r20,24(sp)
   572d4:	dc000215 	stw	r16,8(sp)
   572d8:	dfc00b15 	stw	ra,44(sp)
   572dc:	df000a15 	stw	fp,40(sp)
   572e0:	ddc00915 	stw	r23,36(sp)
   572e4:	dd800815 	stw	r22,32(sp)
   572e8:	dcc00515 	stw	r19,20(sp)
   572ec:	dc800415 	stw	r18,16(sp)
   572f0:	dc400315 	stw	r17,12(sp)
   572f4:	1880020c 	andi	r2,r3,8
   572f8:	2821883a 	mov	r16,r5
   572fc:	202b883a 	mov	r21,r4
   57300:	3029883a 	mov	r20,r6
   57304:	10002726 	beq	r2,zero,573a4 <__sfvwrite_r+0xe8>
   57308:	28800417 	ldw	r2,16(r5)
   5730c:	10002526 	beq	r2,zero,573a4 <__sfvwrite_r+0xe8>
   57310:	1880008c 	andi	r2,r3,2
   57314:	a4400017 	ldw	r17,0(r20)
   57318:	10002a26 	beq	r2,zero,573c4 <__sfvwrite_r+0x108>
   5731c:	05a00034 	movhi	r22,32768
   57320:	0027883a 	mov	r19,zero
   57324:	0025883a 	mov	r18,zero
   57328:	b5bf0004 	addi	r22,r22,-1024
   5732c:	980d883a 	mov	r6,r19
   57330:	a809883a 	mov	r4,r21
   57334:	90004626 	beq	r18,zero,57450 <__sfvwrite_r+0x194>
   57338:	900f883a 	mov	r7,r18
   5733c:	b480022e 	bgeu	r22,r18,57348 <__sfvwrite_r+0x8c>
   57340:	01e00034 	movhi	r7,32768
   57344:	39ff0004 	addi	r7,r7,-1024
   57348:	80800917 	ldw	r2,36(r16)
   5734c:	81400717 	ldw	r5,28(r16)
   57350:	103ee83a 	callr	r2
   57354:	00805a0e 	bge	zero,r2,574c0 <__sfvwrite_r+0x204>
   57358:	a0c00217 	ldw	r3,8(r20)
   5735c:	98a7883a 	add	r19,r19,r2
   57360:	90a5c83a 	sub	r18,r18,r2
   57364:	1885c83a 	sub	r2,r3,r2
   57368:	a0800215 	stw	r2,8(r20)
   5736c:	103fef1e 	bne	r2,zero,5732c <__alt_data_end+0xfffd732c>
   57370:	0005883a 	mov	r2,zero
   57374:	dfc00b17 	ldw	ra,44(sp)
   57378:	df000a17 	ldw	fp,40(sp)
   5737c:	ddc00917 	ldw	r23,36(sp)
   57380:	dd800817 	ldw	r22,32(sp)
   57384:	dd400717 	ldw	r21,28(sp)
   57388:	dd000617 	ldw	r20,24(sp)
   5738c:	dcc00517 	ldw	r19,20(sp)
   57390:	dc800417 	ldw	r18,16(sp)
   57394:	dc400317 	ldw	r17,12(sp)
   57398:	dc000217 	ldw	r16,8(sp)
   5739c:	dec00c04 	addi	sp,sp,48
   573a0:	f800283a 	ret
   573a4:	800b883a 	mov	r5,r16
   573a8:	a809883a 	mov	r4,r21
   573ac:	0054e2c0 	call	54e2c <__swsetup_r>
   573b0:	1000ee1e 	bne	r2,zero,5776c <__sfvwrite_r+0x4b0>
   573b4:	80c0030b 	ldhu	r3,12(r16)
   573b8:	a4400017 	ldw	r17,0(r20)
   573bc:	1880008c 	andi	r2,r3,2
   573c0:	103fd61e 	bne	r2,zero,5731c <__alt_data_end+0xfffd731c>
   573c4:	1880004c 	andi	r2,r3,1
   573c8:	1000421e 	bne	r2,zero,574d4 <__sfvwrite_r+0x218>
   573cc:	0039883a 	mov	fp,zero
   573d0:	0025883a 	mov	r18,zero
   573d4:	90001a26 	beq	r18,zero,57440 <__sfvwrite_r+0x184>
   573d8:	1880800c 	andi	r2,r3,512
   573dc:	84c00217 	ldw	r19,8(r16)
   573e0:	10002126 	beq	r2,zero,57468 <__sfvwrite_r+0x1ac>
   573e4:	982f883a 	mov	r23,r19
   573e8:	94c09636 	bltu	r18,r19,57644 <__sfvwrite_r+0x388>
   573ec:	1881200c 	andi	r2,r3,1152
   573f0:	1000a11e 	bne	r2,zero,57678 <__sfvwrite_r+0x3bc>
   573f4:	81000017 	ldw	r4,0(r16)
   573f8:	b80d883a 	mov	r6,r23
   573fc:	e00b883a 	mov	r5,fp
   57400:	0057c880 	call	57c88 <memmove>
   57404:	80c00217 	ldw	r3,8(r16)
   57408:	81000017 	ldw	r4,0(r16)
   5740c:	9005883a 	mov	r2,r18
   57410:	1ce7c83a 	sub	r19,r3,r19
   57414:	25cf883a 	add	r7,r4,r23
   57418:	84c00215 	stw	r19,8(r16)
   5741c:	81c00015 	stw	r7,0(r16)
   57420:	a0c00217 	ldw	r3,8(r20)
   57424:	e0b9883a 	add	fp,fp,r2
   57428:	90a5c83a 	sub	r18,r18,r2
   5742c:	18a7c83a 	sub	r19,r3,r2
   57430:	a4c00215 	stw	r19,8(r20)
   57434:	983fce26 	beq	r19,zero,57370 <__alt_data_end+0xfffd7370>
   57438:	80c0030b 	ldhu	r3,12(r16)
   5743c:	903fe61e 	bne	r18,zero,573d8 <__alt_data_end+0xfffd73d8>
   57440:	8f000017 	ldw	fp,0(r17)
   57444:	8c800117 	ldw	r18,4(r17)
   57448:	8c400204 	addi	r17,r17,8
   5744c:	003fe106 	br	573d4 <__alt_data_end+0xfffd73d4>
   57450:	8cc00017 	ldw	r19,0(r17)
   57454:	8c800117 	ldw	r18,4(r17)
   57458:	8c400204 	addi	r17,r17,8
   5745c:	003fb306 	br	5732c <__alt_data_end+0xfffd732c>
   57460:	0005883a 	mov	r2,zero
   57464:	f800283a 	ret
   57468:	81000017 	ldw	r4,0(r16)
   5746c:	80800417 	ldw	r2,16(r16)
   57470:	11005a36 	bltu	r2,r4,575dc <__sfvwrite_r+0x320>
   57474:	85c00517 	ldw	r23,20(r16)
   57478:	95c05836 	bltu	r18,r23,575dc <__sfvwrite_r+0x320>
   5747c:	00a00034 	movhi	r2,32768
   57480:	10bfffc4 	addi	r2,r2,-1
   57484:	9009883a 	mov	r4,r18
   57488:	1480012e 	bgeu	r2,r18,57490 <__sfvwrite_r+0x1d4>
   5748c:	1009883a 	mov	r4,r2
   57490:	b80b883a 	mov	r5,r23
   57494:	004d9000 	call	4d900 <__divsi3>
   57498:	b80b883a 	mov	r5,r23
   5749c:	1009883a 	mov	r4,r2
   574a0:	004dab40 	call	4dab4 <__mulsi3>
   574a4:	81400717 	ldw	r5,28(r16)
   574a8:	80c00917 	ldw	r3,36(r16)
   574ac:	100f883a 	mov	r7,r2
   574b0:	e00d883a 	mov	r6,fp
   574b4:	a809883a 	mov	r4,r21
   574b8:	183ee83a 	callr	r3
   574bc:	00bfd816 	blt	zero,r2,57420 <__alt_data_end+0xfffd7420>
   574c0:	8080030b 	ldhu	r2,12(r16)
   574c4:	10801014 	ori	r2,r2,64
   574c8:	8080030d 	sth	r2,12(r16)
   574cc:	00bfffc4 	movi	r2,-1
   574d0:	003fa806 	br	57374 <__alt_data_end+0xfffd7374>
   574d4:	0027883a 	mov	r19,zero
   574d8:	0011883a 	mov	r8,zero
   574dc:	0039883a 	mov	fp,zero
   574e0:	0025883a 	mov	r18,zero
   574e4:	90001f26 	beq	r18,zero,57564 <__sfvwrite_r+0x2a8>
   574e8:	40005a26 	beq	r8,zero,57654 <__sfvwrite_r+0x398>
   574ec:	982d883a 	mov	r22,r19
   574f0:	94c0012e 	bgeu	r18,r19,574f8 <__sfvwrite_r+0x23c>
   574f4:	902d883a 	mov	r22,r18
   574f8:	81000017 	ldw	r4,0(r16)
   574fc:	80800417 	ldw	r2,16(r16)
   57500:	b02f883a 	mov	r23,r22
   57504:	81c00517 	ldw	r7,20(r16)
   57508:	1100032e 	bgeu	r2,r4,57518 <__sfvwrite_r+0x25c>
   5750c:	80c00217 	ldw	r3,8(r16)
   57510:	38c7883a 	add	r3,r7,r3
   57514:	1d801816 	blt	r3,r22,57578 <__sfvwrite_r+0x2bc>
   57518:	b1c03e16 	blt	r22,r7,57614 <__sfvwrite_r+0x358>
   5751c:	80800917 	ldw	r2,36(r16)
   57520:	81400717 	ldw	r5,28(r16)
   57524:	e00d883a 	mov	r6,fp
   57528:	da000115 	stw	r8,4(sp)
   5752c:	a809883a 	mov	r4,r21
   57530:	103ee83a 	callr	r2
   57534:	102f883a 	mov	r23,r2
   57538:	da000117 	ldw	r8,4(sp)
   5753c:	00bfe00e 	bge	zero,r2,574c0 <__alt_data_end+0xfffd74c0>
   57540:	9de7c83a 	sub	r19,r19,r23
   57544:	98001f26 	beq	r19,zero,575c4 <__sfvwrite_r+0x308>
   57548:	a0800217 	ldw	r2,8(r20)
   5754c:	e5f9883a 	add	fp,fp,r23
   57550:	95e5c83a 	sub	r18,r18,r23
   57554:	15efc83a 	sub	r23,r2,r23
   57558:	a5c00215 	stw	r23,8(r20)
   5755c:	b83f8426 	beq	r23,zero,57370 <__alt_data_end+0xfffd7370>
   57560:	903fe11e 	bne	r18,zero,574e8 <__alt_data_end+0xfffd74e8>
   57564:	8f000017 	ldw	fp,0(r17)
   57568:	8c800117 	ldw	r18,4(r17)
   5756c:	0011883a 	mov	r8,zero
   57570:	8c400204 	addi	r17,r17,8
   57574:	003fdb06 	br	574e4 <__alt_data_end+0xfffd74e4>
   57578:	180d883a 	mov	r6,r3
   5757c:	e00b883a 	mov	r5,fp
   57580:	da000115 	stw	r8,4(sp)
   57584:	d8c00015 	stw	r3,0(sp)
   57588:	0057c880 	call	57c88 <memmove>
   5758c:	d8c00017 	ldw	r3,0(sp)
   57590:	80800017 	ldw	r2,0(r16)
   57594:	800b883a 	mov	r5,r16
   57598:	a809883a 	mov	r4,r21
   5759c:	10c5883a 	add	r2,r2,r3
   575a0:	80800015 	stw	r2,0(r16)
   575a4:	d8c00015 	stw	r3,0(sp)
   575a8:	0056a4c0 	call	56a4c <_fflush_r>
   575ac:	d8c00017 	ldw	r3,0(sp)
   575b0:	da000117 	ldw	r8,4(sp)
   575b4:	103fc21e 	bne	r2,zero,574c0 <__alt_data_end+0xfffd74c0>
   575b8:	182f883a 	mov	r23,r3
   575bc:	9de7c83a 	sub	r19,r19,r23
   575c0:	983fe11e 	bne	r19,zero,57548 <__alt_data_end+0xfffd7548>
   575c4:	800b883a 	mov	r5,r16
   575c8:	a809883a 	mov	r4,r21
   575cc:	0056a4c0 	call	56a4c <_fflush_r>
   575d0:	103fbb1e 	bne	r2,zero,574c0 <__alt_data_end+0xfffd74c0>
   575d4:	0011883a 	mov	r8,zero
   575d8:	003fdb06 	br	57548 <__alt_data_end+0xfffd7548>
   575dc:	94c0012e 	bgeu	r18,r19,575e4 <__sfvwrite_r+0x328>
   575e0:	9027883a 	mov	r19,r18
   575e4:	980d883a 	mov	r6,r19
   575e8:	e00b883a 	mov	r5,fp
   575ec:	0057c880 	call	57c88 <memmove>
   575f0:	80800217 	ldw	r2,8(r16)
   575f4:	80c00017 	ldw	r3,0(r16)
   575f8:	14c5c83a 	sub	r2,r2,r19
   575fc:	1cc7883a 	add	r3,r3,r19
   57600:	80800215 	stw	r2,8(r16)
   57604:	80c00015 	stw	r3,0(r16)
   57608:	10004326 	beq	r2,zero,57718 <__sfvwrite_r+0x45c>
   5760c:	9805883a 	mov	r2,r19
   57610:	003f8306 	br	57420 <__alt_data_end+0xfffd7420>
   57614:	b00d883a 	mov	r6,r22
   57618:	e00b883a 	mov	r5,fp
   5761c:	da000115 	stw	r8,4(sp)
   57620:	0057c880 	call	57c88 <memmove>
   57624:	80800217 	ldw	r2,8(r16)
   57628:	80c00017 	ldw	r3,0(r16)
   5762c:	da000117 	ldw	r8,4(sp)
   57630:	1585c83a 	sub	r2,r2,r22
   57634:	1dad883a 	add	r22,r3,r22
   57638:	80800215 	stw	r2,8(r16)
   5763c:	85800015 	stw	r22,0(r16)
   57640:	003fbf06 	br	57540 <__alt_data_end+0xfffd7540>
   57644:	81000017 	ldw	r4,0(r16)
   57648:	9027883a 	mov	r19,r18
   5764c:	902f883a 	mov	r23,r18
   57650:	003f6906 	br	573f8 <__alt_data_end+0xfffd73f8>
   57654:	900d883a 	mov	r6,r18
   57658:	01400284 	movi	r5,10
   5765c:	e009883a 	mov	r4,fp
   57660:	0057ba40 	call	57ba4 <memchr>
   57664:	10003e26 	beq	r2,zero,57760 <__sfvwrite_r+0x4a4>
   57668:	10800044 	addi	r2,r2,1
   5766c:	1727c83a 	sub	r19,r2,fp
   57670:	02000044 	movi	r8,1
   57674:	003f9d06 	br	574ec <__alt_data_end+0xfffd74ec>
   57678:	80800517 	ldw	r2,20(r16)
   5767c:	81400417 	ldw	r5,16(r16)
   57680:	81c00017 	ldw	r7,0(r16)
   57684:	10a7883a 	add	r19,r2,r2
   57688:	9885883a 	add	r2,r19,r2
   5768c:	1026d7fa 	srli	r19,r2,31
   57690:	396dc83a 	sub	r22,r7,r5
   57694:	b1000044 	addi	r4,r22,1
   57698:	9885883a 	add	r2,r19,r2
   5769c:	1027d07a 	srai	r19,r2,1
   576a0:	2485883a 	add	r2,r4,r18
   576a4:	980d883a 	mov	r6,r19
   576a8:	9880022e 	bgeu	r19,r2,576b4 <__sfvwrite_r+0x3f8>
   576ac:	1027883a 	mov	r19,r2
   576b0:	100d883a 	mov	r6,r2
   576b4:	18c1000c 	andi	r3,r3,1024
   576b8:	18001c26 	beq	r3,zero,5772c <__sfvwrite_r+0x470>
   576bc:	300b883a 	mov	r5,r6
   576c0:	a809883a 	mov	r4,r21
   576c4:	004f6480 	call	4f648 <_malloc_r>
   576c8:	102f883a 	mov	r23,r2
   576cc:	10002926 	beq	r2,zero,57774 <__sfvwrite_r+0x4b8>
   576d0:	81400417 	ldw	r5,16(r16)
   576d4:	b00d883a 	mov	r6,r22
   576d8:	1009883a 	mov	r4,r2
   576dc:	004fe540 	call	4fe54 <memcpy>
   576e0:	8080030b 	ldhu	r2,12(r16)
   576e4:	00fedfc4 	movi	r3,-1153
   576e8:	10c4703a 	and	r2,r2,r3
   576ec:	10802014 	ori	r2,r2,128
   576f0:	8080030d 	sth	r2,12(r16)
   576f4:	bd89883a 	add	r4,r23,r22
   576f8:	9d8fc83a 	sub	r7,r19,r22
   576fc:	85c00415 	stw	r23,16(r16)
   57700:	84c00515 	stw	r19,20(r16)
   57704:	81000015 	stw	r4,0(r16)
   57708:	9027883a 	mov	r19,r18
   5770c:	81c00215 	stw	r7,8(r16)
   57710:	902f883a 	mov	r23,r18
   57714:	003f3806 	br	573f8 <__alt_data_end+0xfffd73f8>
   57718:	800b883a 	mov	r5,r16
   5771c:	a809883a 	mov	r4,r21
   57720:	0056a4c0 	call	56a4c <_fflush_r>
   57724:	103fb926 	beq	r2,zero,5760c <__alt_data_end+0xfffd760c>
   57728:	003f6506 	br	574c0 <__alt_data_end+0xfffd74c0>
   5772c:	a809883a 	mov	r4,r21
   57730:	00590040 	call	59004 <_realloc_r>
   57734:	102f883a 	mov	r23,r2
   57738:	103fee1e 	bne	r2,zero,576f4 <__alt_data_end+0xfffd76f4>
   5773c:	81400417 	ldw	r5,16(r16)
   57740:	a809883a 	mov	r4,r21
   57744:	0056fac0 	call	56fac <_free_r>
   57748:	8080030b 	ldhu	r2,12(r16)
   5774c:	00ffdfc4 	movi	r3,-129
   57750:	1884703a 	and	r2,r3,r2
   57754:	00c00304 	movi	r3,12
   57758:	a8c00015 	stw	r3,0(r21)
   5775c:	003f5906 	br	574c4 <__alt_data_end+0xfffd74c4>
   57760:	94c00044 	addi	r19,r18,1
   57764:	02000044 	movi	r8,1
   57768:	003f6006 	br	574ec <__alt_data_end+0xfffd74ec>
   5776c:	00bfffc4 	movi	r2,-1
   57770:	003f0006 	br	57374 <__alt_data_end+0xfffd7374>
   57774:	00800304 	movi	r2,12
   57778:	a8800015 	stw	r2,0(r21)
   5777c:	8080030b 	ldhu	r2,12(r16)
   57780:	003f5006 	br	574c4 <__alt_data_end+0xfffd74c4>

00057784 <_fwalk>:
   57784:	defff704 	addi	sp,sp,-36
   57788:	dd000415 	stw	r20,16(sp)
   5778c:	dfc00815 	stw	ra,32(sp)
   57790:	ddc00715 	stw	r23,28(sp)
   57794:	dd800615 	stw	r22,24(sp)
   57798:	dd400515 	stw	r21,20(sp)
   5779c:	dcc00315 	stw	r19,12(sp)
   577a0:	dc800215 	stw	r18,8(sp)
   577a4:	dc400115 	stw	r17,4(sp)
   577a8:	dc000015 	stw	r16,0(sp)
   577ac:	2500b804 	addi	r20,r4,736
   577b0:	a0002326 	beq	r20,zero,57840 <_fwalk+0xbc>
   577b4:	282b883a 	mov	r21,r5
   577b8:	002f883a 	mov	r23,zero
   577bc:	05800044 	movi	r22,1
   577c0:	04ffffc4 	movi	r19,-1
   577c4:	a4400117 	ldw	r17,4(r20)
   577c8:	a4800217 	ldw	r18,8(r20)
   577cc:	8c7fffc4 	addi	r17,r17,-1
   577d0:	88000d16 	blt	r17,zero,57808 <_fwalk+0x84>
   577d4:	94000304 	addi	r16,r18,12
   577d8:	94800384 	addi	r18,r18,14
   577dc:	8080000b 	ldhu	r2,0(r16)
   577e0:	8c7fffc4 	addi	r17,r17,-1
   577e4:	813ffd04 	addi	r4,r16,-12
   577e8:	b080042e 	bgeu	r22,r2,577fc <_fwalk+0x78>
   577ec:	9080000f 	ldh	r2,0(r18)
   577f0:	14c00226 	beq	r2,r19,577fc <_fwalk+0x78>
   577f4:	a83ee83a 	callr	r21
   577f8:	b8aeb03a 	or	r23,r23,r2
   577fc:	84001a04 	addi	r16,r16,104
   57800:	94801a04 	addi	r18,r18,104
   57804:	8cfff51e 	bne	r17,r19,577dc <__alt_data_end+0xfffd77dc>
   57808:	a5000017 	ldw	r20,0(r20)
   5780c:	a03fed1e 	bne	r20,zero,577c4 <__alt_data_end+0xfffd77c4>
   57810:	b805883a 	mov	r2,r23
   57814:	dfc00817 	ldw	ra,32(sp)
   57818:	ddc00717 	ldw	r23,28(sp)
   5781c:	dd800617 	ldw	r22,24(sp)
   57820:	dd400517 	ldw	r21,20(sp)
   57824:	dd000417 	ldw	r20,16(sp)
   57828:	dcc00317 	ldw	r19,12(sp)
   5782c:	dc800217 	ldw	r18,8(sp)
   57830:	dc400117 	ldw	r17,4(sp)
   57834:	dc000017 	ldw	r16,0(sp)
   57838:	dec00904 	addi	sp,sp,36
   5783c:	f800283a 	ret
   57840:	002f883a 	mov	r23,zero
   57844:	003ff206 	br	57810 <__alt_data_end+0xfffd7810>

00057848 <_fwalk_reent>:
   57848:	defff704 	addi	sp,sp,-36
   5784c:	dd000415 	stw	r20,16(sp)
   57850:	dfc00815 	stw	ra,32(sp)
   57854:	ddc00715 	stw	r23,28(sp)
   57858:	dd800615 	stw	r22,24(sp)
   5785c:	dd400515 	stw	r21,20(sp)
   57860:	dcc00315 	stw	r19,12(sp)
   57864:	dc800215 	stw	r18,8(sp)
   57868:	dc400115 	stw	r17,4(sp)
   5786c:	dc000015 	stw	r16,0(sp)
   57870:	2500b804 	addi	r20,r4,736
   57874:	a0002326 	beq	r20,zero,57904 <_fwalk_reent+0xbc>
   57878:	282b883a 	mov	r21,r5
   5787c:	2027883a 	mov	r19,r4
   57880:	002f883a 	mov	r23,zero
   57884:	05800044 	movi	r22,1
   57888:	04bfffc4 	movi	r18,-1
   5788c:	a4400117 	ldw	r17,4(r20)
   57890:	a4000217 	ldw	r16,8(r20)
   57894:	8c7fffc4 	addi	r17,r17,-1
   57898:	88000c16 	blt	r17,zero,578cc <_fwalk_reent+0x84>
   5789c:	84000304 	addi	r16,r16,12
   578a0:	8080000b 	ldhu	r2,0(r16)
   578a4:	8c7fffc4 	addi	r17,r17,-1
   578a8:	817ffd04 	addi	r5,r16,-12
   578ac:	b080052e 	bgeu	r22,r2,578c4 <_fwalk_reent+0x7c>
   578b0:	8080008f 	ldh	r2,2(r16)
   578b4:	9809883a 	mov	r4,r19
   578b8:	14800226 	beq	r2,r18,578c4 <_fwalk_reent+0x7c>
   578bc:	a83ee83a 	callr	r21
   578c0:	b8aeb03a 	or	r23,r23,r2
   578c4:	84001a04 	addi	r16,r16,104
   578c8:	8cbff51e 	bne	r17,r18,578a0 <__alt_data_end+0xfffd78a0>
   578cc:	a5000017 	ldw	r20,0(r20)
   578d0:	a03fee1e 	bne	r20,zero,5788c <__alt_data_end+0xfffd788c>
   578d4:	b805883a 	mov	r2,r23
   578d8:	dfc00817 	ldw	ra,32(sp)
   578dc:	ddc00717 	ldw	r23,28(sp)
   578e0:	dd800617 	ldw	r22,24(sp)
   578e4:	dd400517 	ldw	r21,20(sp)
   578e8:	dd000417 	ldw	r20,16(sp)
   578ec:	dcc00317 	ldw	r19,12(sp)
   578f0:	dc800217 	ldw	r18,8(sp)
   578f4:	dc400117 	ldw	r17,4(sp)
   578f8:	dc000017 	ldw	r16,0(sp)
   578fc:	dec00904 	addi	sp,sp,36
   57900:	f800283a 	ret
   57904:	002f883a 	mov	r23,zero
   57908:	003ff206 	br	578d4 <__alt_data_end+0xfffd78d4>

0005790c <_setlocale_r>:
   5790c:	30001b26 	beq	r6,zero,5797c <_setlocale_r+0x70>
   57910:	014001f4 	movhi	r5,7
   57914:	defffe04 	addi	sp,sp,-8
   57918:	296e9504 	addi	r5,r5,-17836
   5791c:	3009883a 	mov	r4,r6
   57920:	dc000015 	stw	r16,0(sp)
   57924:	dfc00115 	stw	ra,4(sp)
   57928:	3021883a 	mov	r16,r6
   5792c:	00506400 	call	50640 <strcmp>
   57930:	1000061e 	bne	r2,zero,5794c <_setlocale_r+0x40>
   57934:	008001f4 	movhi	r2,7
   57938:	10ae6e04 	addi	r2,r2,-17992
   5793c:	dfc00117 	ldw	ra,4(sp)
   57940:	dc000017 	ldw	r16,0(sp)
   57944:	dec00204 	addi	sp,sp,8
   57948:	f800283a 	ret
   5794c:	014001f4 	movhi	r5,7
   57950:	296e6e04 	addi	r5,r5,-17992
   57954:	8009883a 	mov	r4,r16
   57958:	00506400 	call	50640 <strcmp>
   5795c:	103ff526 	beq	r2,zero,57934 <__alt_data_end+0xfffd7934>
   57960:	014001f4 	movhi	r5,7
   57964:	296e7804 	addi	r5,r5,-17952
   57968:	8009883a 	mov	r4,r16
   5796c:	00506400 	call	50640 <strcmp>
   57970:	103ff026 	beq	r2,zero,57934 <__alt_data_end+0xfffd7934>
   57974:	0005883a 	mov	r2,zero
   57978:	003ff006 	br	5793c <__alt_data_end+0xfffd793c>
   5797c:	008001f4 	movhi	r2,7
   57980:	10ae6e04 	addi	r2,r2,-17992
   57984:	f800283a 	ret

00057988 <__locale_charset>:
   57988:	008001f4 	movhi	r2,7
   5798c:	10b11c04 	addi	r2,r2,-15248
   57990:	f800283a 	ret

00057994 <__locale_mb_cur_max>:
   57994:	008001f4 	movhi	r2,7
   57998:	10bb7604 	addi	r2,r2,-4648
   5799c:	10800017 	ldw	r2,0(r2)
   579a0:	f800283a 	ret

000579a4 <__locale_msgcharset>:
   579a4:	008001f4 	movhi	r2,7
   579a8:	10b11404 	addi	r2,r2,-15280
   579ac:	f800283a 	ret

000579b0 <__locale_cjk_lang>:
   579b0:	0005883a 	mov	r2,zero
   579b4:	f800283a 	ret

000579b8 <_localeconv_r>:
   579b8:	008001f4 	movhi	r2,7
   579bc:	10b12404 	addi	r2,r2,-15216
   579c0:	f800283a 	ret

000579c4 <setlocale>:
   579c4:	008001f4 	movhi	r2,7
   579c8:	10bb7304 	addi	r2,r2,-4660
   579cc:	280d883a 	mov	r6,r5
   579d0:	200b883a 	mov	r5,r4
   579d4:	11000017 	ldw	r4,0(r2)
   579d8:	005790c1 	jmpi	5790c <_setlocale_r>

000579dc <localeconv>:
   579dc:	008001f4 	movhi	r2,7
   579e0:	10b12404 	addi	r2,r2,-15216
   579e4:	f800283a 	ret

000579e8 <__smakebuf_r>:
   579e8:	2880030b 	ldhu	r2,12(r5)
   579ec:	10c0008c 	andi	r3,r2,2
   579f0:	1800411e 	bne	r3,zero,57af8 <__smakebuf_r+0x110>
   579f4:	deffec04 	addi	sp,sp,-80
   579f8:	dc000f15 	stw	r16,60(sp)
   579fc:	2821883a 	mov	r16,r5
   57a00:	2940038f 	ldh	r5,14(r5)
   57a04:	dc401015 	stw	r17,64(sp)
   57a08:	dfc01315 	stw	ra,76(sp)
   57a0c:	dcc01215 	stw	r19,72(sp)
   57a10:	dc801115 	stw	r18,68(sp)
   57a14:	2023883a 	mov	r17,r4
   57a18:	28001c16 	blt	r5,zero,57a8c <__smakebuf_r+0xa4>
   57a1c:	d80d883a 	mov	r6,sp
   57a20:	005c9740 	call	5c974 <_fstat_r>
   57a24:	10001816 	blt	r2,zero,57a88 <__smakebuf_r+0xa0>
   57a28:	d8800117 	ldw	r2,4(sp)
   57a2c:	00e00014 	movui	r3,32768
   57a30:	10bc000c 	andi	r2,r2,61440
   57a34:	14c80020 	cmpeqi	r19,r2,8192
   57a38:	10c03726 	beq	r2,r3,57b18 <__smakebuf_r+0x130>
   57a3c:	80c0030b 	ldhu	r3,12(r16)
   57a40:	18c20014 	ori	r3,r3,2048
   57a44:	80c0030d 	sth	r3,12(r16)
   57a48:	00c80004 	movi	r3,8192
   57a4c:	10c0521e 	bne	r2,r3,57b98 <__smakebuf_r+0x1b0>
   57a50:	8140038f 	ldh	r5,14(r16)
   57a54:	8809883a 	mov	r4,r17
   57a58:	005c9d00 	call	5c9d0 <_isatty_r>
   57a5c:	10004c26 	beq	r2,zero,57b90 <__smakebuf_r+0x1a8>
   57a60:	8080030b 	ldhu	r2,12(r16)
   57a64:	80c010c4 	addi	r3,r16,67
   57a68:	80c00015 	stw	r3,0(r16)
   57a6c:	10800054 	ori	r2,r2,1
   57a70:	8080030d 	sth	r2,12(r16)
   57a74:	00800044 	movi	r2,1
   57a78:	80c00415 	stw	r3,16(r16)
   57a7c:	80800515 	stw	r2,20(r16)
   57a80:	04810004 	movi	r18,1024
   57a84:	00000706 	br	57aa4 <__smakebuf_r+0xbc>
   57a88:	8080030b 	ldhu	r2,12(r16)
   57a8c:	10c0200c 	andi	r3,r2,128
   57a90:	18001f1e 	bne	r3,zero,57b10 <__smakebuf_r+0x128>
   57a94:	04810004 	movi	r18,1024
   57a98:	10820014 	ori	r2,r2,2048
   57a9c:	8080030d 	sth	r2,12(r16)
   57aa0:	0027883a 	mov	r19,zero
   57aa4:	900b883a 	mov	r5,r18
   57aa8:	8809883a 	mov	r4,r17
   57aac:	004f6480 	call	4f648 <_malloc_r>
   57ab0:	10002c26 	beq	r2,zero,57b64 <__smakebuf_r+0x17c>
   57ab4:	80c0030b 	ldhu	r3,12(r16)
   57ab8:	01000174 	movhi	r4,5
   57abc:	211ab804 	addi	r4,r4,27360
   57ac0:	89000f15 	stw	r4,60(r17)
   57ac4:	18c02014 	ori	r3,r3,128
   57ac8:	80c0030d 	sth	r3,12(r16)
   57acc:	80800015 	stw	r2,0(r16)
   57ad0:	80800415 	stw	r2,16(r16)
   57ad4:	84800515 	stw	r18,20(r16)
   57ad8:	98001a1e 	bne	r19,zero,57b44 <__smakebuf_r+0x15c>
   57adc:	dfc01317 	ldw	ra,76(sp)
   57ae0:	dcc01217 	ldw	r19,72(sp)
   57ae4:	dc801117 	ldw	r18,68(sp)
   57ae8:	dc401017 	ldw	r17,64(sp)
   57aec:	dc000f17 	ldw	r16,60(sp)
   57af0:	dec01404 	addi	sp,sp,80
   57af4:	f800283a 	ret
   57af8:	288010c4 	addi	r2,r5,67
   57afc:	28800015 	stw	r2,0(r5)
   57b00:	28800415 	stw	r2,16(r5)
   57b04:	00800044 	movi	r2,1
   57b08:	28800515 	stw	r2,20(r5)
   57b0c:	f800283a 	ret
   57b10:	04801004 	movi	r18,64
   57b14:	003fe006 	br	57a98 <__alt_data_end+0xfffd7a98>
   57b18:	81000a17 	ldw	r4,40(r16)
   57b1c:	00c001b4 	movhi	r3,6
   57b20:	18e5ad04 	addi	r3,r3,-26956
   57b24:	20ffc51e 	bne	r4,r3,57a3c <__alt_data_end+0xfffd7a3c>
   57b28:	8080030b 	ldhu	r2,12(r16)
   57b2c:	04810004 	movi	r18,1024
   57b30:	84801315 	stw	r18,76(r16)
   57b34:	1484b03a 	or	r2,r2,r18
   57b38:	8080030d 	sth	r2,12(r16)
   57b3c:	0027883a 	mov	r19,zero
   57b40:	003fd806 	br	57aa4 <__alt_data_end+0xfffd7aa4>
   57b44:	8140038f 	ldh	r5,14(r16)
   57b48:	8809883a 	mov	r4,r17
   57b4c:	005c9d00 	call	5c9d0 <_isatty_r>
   57b50:	103fe226 	beq	r2,zero,57adc <__alt_data_end+0xfffd7adc>
   57b54:	8080030b 	ldhu	r2,12(r16)
   57b58:	10800054 	ori	r2,r2,1
   57b5c:	8080030d 	sth	r2,12(r16)
   57b60:	003fde06 	br	57adc <__alt_data_end+0xfffd7adc>
   57b64:	8080030b 	ldhu	r2,12(r16)
   57b68:	10c0800c 	andi	r3,r2,512
   57b6c:	183fdb1e 	bne	r3,zero,57adc <__alt_data_end+0xfffd7adc>
   57b70:	10800094 	ori	r2,r2,2
   57b74:	80c010c4 	addi	r3,r16,67
   57b78:	8080030d 	sth	r2,12(r16)
   57b7c:	00800044 	movi	r2,1
   57b80:	80c00015 	stw	r3,0(r16)
   57b84:	80c00415 	stw	r3,16(r16)
   57b88:	80800515 	stw	r2,20(r16)
   57b8c:	003fd306 	br	57adc <__alt_data_end+0xfffd7adc>
   57b90:	04810004 	movi	r18,1024
   57b94:	003fc306 	br	57aa4 <__alt_data_end+0xfffd7aa4>
   57b98:	0027883a 	mov	r19,zero
   57b9c:	04810004 	movi	r18,1024
   57ba0:	003fc006 	br	57aa4 <__alt_data_end+0xfffd7aa4>

00057ba4 <memchr>:
   57ba4:	208000cc 	andi	r2,r4,3
   57ba8:	280f883a 	mov	r7,r5
   57bac:	10003426 	beq	r2,zero,57c80 <memchr+0xdc>
   57bb0:	30bfffc4 	addi	r2,r6,-1
   57bb4:	30001a26 	beq	r6,zero,57c20 <memchr+0x7c>
   57bb8:	20c00003 	ldbu	r3,0(r4)
   57bbc:	29803fcc 	andi	r6,r5,255
   57bc0:	30c0051e 	bne	r6,r3,57bd8 <memchr+0x34>
   57bc4:	00001806 	br	57c28 <memchr+0x84>
   57bc8:	10001526 	beq	r2,zero,57c20 <memchr+0x7c>
   57bcc:	20c00003 	ldbu	r3,0(r4)
   57bd0:	10bfffc4 	addi	r2,r2,-1
   57bd4:	30c01426 	beq	r6,r3,57c28 <memchr+0x84>
   57bd8:	21000044 	addi	r4,r4,1
   57bdc:	20c000cc 	andi	r3,r4,3
   57be0:	183ff91e 	bne	r3,zero,57bc8 <__alt_data_end+0xfffd7bc8>
   57be4:	020000c4 	movi	r8,3
   57be8:	40801136 	bltu	r8,r2,57c30 <memchr+0x8c>
   57bec:	10000c26 	beq	r2,zero,57c20 <memchr+0x7c>
   57bf0:	20c00003 	ldbu	r3,0(r4)
   57bf4:	29403fcc 	andi	r5,r5,255
   57bf8:	28c00b26 	beq	r5,r3,57c28 <memchr+0x84>
   57bfc:	20c00044 	addi	r3,r4,1
   57c00:	39803fcc 	andi	r6,r7,255
   57c04:	2089883a 	add	r4,r4,r2
   57c08:	00000306 	br	57c18 <memchr+0x74>
   57c0c:	18c00044 	addi	r3,r3,1
   57c10:	197fffc3 	ldbu	r5,-1(r3)
   57c14:	31400526 	beq	r6,r5,57c2c <memchr+0x88>
   57c18:	1805883a 	mov	r2,r3
   57c1c:	20fffb1e 	bne	r4,r3,57c0c <__alt_data_end+0xfffd7c0c>
   57c20:	0005883a 	mov	r2,zero
   57c24:	f800283a 	ret
   57c28:	2005883a 	mov	r2,r4
   57c2c:	f800283a 	ret
   57c30:	28c03fcc 	andi	r3,r5,255
   57c34:	1812923a 	slli	r9,r3,8
   57c38:	02ffbff4 	movhi	r11,65279
   57c3c:	02a02074 	movhi	r10,32897
   57c40:	48d2b03a 	or	r9,r9,r3
   57c44:	4806943a 	slli	r3,r9,16
   57c48:	5affbfc4 	addi	r11,r11,-257
   57c4c:	52a02004 	addi	r10,r10,-32640
   57c50:	48d2b03a 	or	r9,r9,r3
   57c54:	20c00017 	ldw	r3,0(r4)
   57c58:	48c6f03a 	xor	r3,r9,r3
   57c5c:	1acd883a 	add	r6,r3,r11
   57c60:	00c6303a 	nor	r3,zero,r3
   57c64:	30c6703a 	and	r3,r6,r3
   57c68:	1a86703a 	and	r3,r3,r10
   57c6c:	183fe01e 	bne	r3,zero,57bf0 <__alt_data_end+0xfffd7bf0>
   57c70:	10bfff04 	addi	r2,r2,-4
   57c74:	21000104 	addi	r4,r4,4
   57c78:	40bff636 	bltu	r8,r2,57c54 <__alt_data_end+0xfffd7c54>
   57c7c:	003fdb06 	br	57bec <__alt_data_end+0xfffd7bec>
   57c80:	3005883a 	mov	r2,r6
   57c84:	003fd706 	br	57be4 <__alt_data_end+0xfffd7be4>

00057c88 <memmove>:
   57c88:	2005883a 	mov	r2,r4
   57c8c:	29000b2e 	bgeu	r5,r4,57cbc <memmove+0x34>
   57c90:	298f883a 	add	r7,r5,r6
   57c94:	21c0092e 	bgeu	r4,r7,57cbc <memmove+0x34>
   57c98:	2187883a 	add	r3,r4,r6
   57c9c:	198bc83a 	sub	r5,r3,r6
   57ca0:	30004826 	beq	r6,zero,57dc4 <memmove+0x13c>
   57ca4:	39ffffc4 	addi	r7,r7,-1
   57ca8:	39000003 	ldbu	r4,0(r7)
   57cac:	18ffffc4 	addi	r3,r3,-1
   57cb0:	19000005 	stb	r4,0(r3)
   57cb4:	28fffb1e 	bne	r5,r3,57ca4 <__alt_data_end+0xfffd7ca4>
   57cb8:	f800283a 	ret
   57cbc:	00c003c4 	movi	r3,15
   57cc0:	1980412e 	bgeu	r3,r6,57dc8 <memmove+0x140>
   57cc4:	2886b03a 	or	r3,r5,r2
   57cc8:	18c000cc 	andi	r3,r3,3
   57ccc:	1800401e 	bne	r3,zero,57dd0 <memmove+0x148>
   57cd0:	33fffc04 	addi	r15,r6,-16
   57cd4:	781ed13a 	srli	r15,r15,4
   57cd8:	28c00104 	addi	r3,r5,4
   57cdc:	13400104 	addi	r13,r2,4
   57ce0:	781c913a 	slli	r14,r15,4
   57ce4:	2b000204 	addi	r12,r5,8
   57ce8:	12c00204 	addi	r11,r2,8
   57cec:	73800504 	addi	r14,r14,20
   57cf0:	2a800304 	addi	r10,r5,12
   57cf4:	12400304 	addi	r9,r2,12
   57cf8:	2b9d883a 	add	r14,r5,r14
   57cfc:	2811883a 	mov	r8,r5
   57d00:	100f883a 	mov	r7,r2
   57d04:	41000017 	ldw	r4,0(r8)
   57d08:	39c00404 	addi	r7,r7,16
   57d0c:	18c00404 	addi	r3,r3,16
   57d10:	393ffc15 	stw	r4,-16(r7)
   57d14:	193ffc17 	ldw	r4,-16(r3)
   57d18:	6b400404 	addi	r13,r13,16
   57d1c:	5ac00404 	addi	r11,r11,16
   57d20:	693ffc15 	stw	r4,-16(r13)
   57d24:	61000017 	ldw	r4,0(r12)
   57d28:	4a400404 	addi	r9,r9,16
   57d2c:	42000404 	addi	r8,r8,16
   57d30:	593ffc15 	stw	r4,-16(r11)
   57d34:	51000017 	ldw	r4,0(r10)
   57d38:	63000404 	addi	r12,r12,16
   57d3c:	52800404 	addi	r10,r10,16
   57d40:	493ffc15 	stw	r4,-16(r9)
   57d44:	1bbfef1e 	bne	r3,r14,57d04 <__alt_data_end+0xfffd7d04>
   57d48:	79000044 	addi	r4,r15,1
   57d4c:	2008913a 	slli	r4,r4,4
   57d50:	328003cc 	andi	r10,r6,15
   57d54:	02c000c4 	movi	r11,3
   57d58:	1107883a 	add	r3,r2,r4
   57d5c:	290b883a 	add	r5,r5,r4
   57d60:	5a801e2e 	bgeu	r11,r10,57ddc <memmove+0x154>
   57d64:	1813883a 	mov	r9,r3
   57d68:	2811883a 	mov	r8,r5
   57d6c:	500f883a 	mov	r7,r10
   57d70:	41000017 	ldw	r4,0(r8)
   57d74:	4a400104 	addi	r9,r9,4
   57d78:	39ffff04 	addi	r7,r7,-4
   57d7c:	493fff15 	stw	r4,-4(r9)
   57d80:	42000104 	addi	r8,r8,4
   57d84:	59fffa36 	bltu	r11,r7,57d70 <__alt_data_end+0xfffd7d70>
   57d88:	513fff04 	addi	r4,r10,-4
   57d8c:	2008d0ba 	srli	r4,r4,2
   57d90:	318000cc 	andi	r6,r6,3
   57d94:	21000044 	addi	r4,r4,1
   57d98:	2109883a 	add	r4,r4,r4
   57d9c:	2109883a 	add	r4,r4,r4
   57da0:	1907883a 	add	r3,r3,r4
   57da4:	290b883a 	add	r5,r5,r4
   57da8:	30000b26 	beq	r6,zero,57dd8 <memmove+0x150>
   57dac:	198d883a 	add	r6,r3,r6
   57db0:	29c00003 	ldbu	r7,0(r5)
   57db4:	18c00044 	addi	r3,r3,1
   57db8:	29400044 	addi	r5,r5,1
   57dbc:	19ffffc5 	stb	r7,-1(r3)
   57dc0:	19bffb1e 	bne	r3,r6,57db0 <__alt_data_end+0xfffd7db0>
   57dc4:	f800283a 	ret
   57dc8:	1007883a 	mov	r3,r2
   57dcc:	003ff606 	br	57da8 <__alt_data_end+0xfffd7da8>
   57dd0:	1007883a 	mov	r3,r2
   57dd4:	003ff506 	br	57dac <__alt_data_end+0xfffd7dac>
   57dd8:	f800283a 	ret
   57ddc:	500d883a 	mov	r6,r10
   57de0:	003ff106 	br	57da8 <__alt_data_end+0xfffd7da8>

00057de4 <_Balloc>:
   57de4:	20801317 	ldw	r2,76(r4)
   57de8:	defffc04 	addi	sp,sp,-16
   57dec:	dc400115 	stw	r17,4(sp)
   57df0:	dc000015 	stw	r16,0(sp)
   57df4:	dfc00315 	stw	ra,12(sp)
   57df8:	dc800215 	stw	r18,8(sp)
   57dfc:	2023883a 	mov	r17,r4
   57e00:	2821883a 	mov	r16,r5
   57e04:	10000f26 	beq	r2,zero,57e44 <_Balloc+0x60>
   57e08:	8407883a 	add	r3,r16,r16
   57e0c:	18c7883a 	add	r3,r3,r3
   57e10:	10c7883a 	add	r3,r2,r3
   57e14:	18800017 	ldw	r2,0(r3)
   57e18:	10001126 	beq	r2,zero,57e60 <_Balloc+0x7c>
   57e1c:	11000017 	ldw	r4,0(r2)
   57e20:	19000015 	stw	r4,0(r3)
   57e24:	10000415 	stw	zero,16(r2)
   57e28:	10000315 	stw	zero,12(r2)
   57e2c:	dfc00317 	ldw	ra,12(sp)
   57e30:	dc800217 	ldw	r18,8(sp)
   57e34:	dc400117 	ldw	r17,4(sp)
   57e38:	dc000017 	ldw	r16,0(sp)
   57e3c:	dec00404 	addi	sp,sp,16
   57e40:	f800283a 	ret
   57e44:	01800844 	movi	r6,33
   57e48:	01400104 	movi	r5,4
   57e4c:	005c58c0 	call	5c58c <_calloc_r>
   57e50:	88801315 	stw	r2,76(r17)
   57e54:	103fec1e 	bne	r2,zero,57e08 <__alt_data_end+0xfffd7e08>
   57e58:	0005883a 	mov	r2,zero
   57e5c:	003ff306 	br	57e2c <__alt_data_end+0xfffd7e2c>
   57e60:	01400044 	movi	r5,1
   57e64:	2c24983a 	sll	r18,r5,r16
   57e68:	8809883a 	mov	r4,r17
   57e6c:	91800144 	addi	r6,r18,5
   57e70:	318d883a 	add	r6,r6,r6
   57e74:	318d883a 	add	r6,r6,r6
   57e78:	005c58c0 	call	5c58c <_calloc_r>
   57e7c:	103ff626 	beq	r2,zero,57e58 <__alt_data_end+0xfffd7e58>
   57e80:	14000115 	stw	r16,4(r2)
   57e84:	14800215 	stw	r18,8(r2)
   57e88:	003fe606 	br	57e24 <__alt_data_end+0xfffd7e24>

00057e8c <_Bfree>:
   57e8c:	28000826 	beq	r5,zero,57eb0 <_Bfree+0x24>
   57e90:	28c00117 	ldw	r3,4(r5)
   57e94:	20801317 	ldw	r2,76(r4)
   57e98:	18c7883a 	add	r3,r3,r3
   57e9c:	18c7883a 	add	r3,r3,r3
   57ea0:	10c5883a 	add	r2,r2,r3
   57ea4:	10c00017 	ldw	r3,0(r2)
   57ea8:	28c00015 	stw	r3,0(r5)
   57eac:	11400015 	stw	r5,0(r2)
   57eb0:	f800283a 	ret

00057eb4 <__multadd>:
   57eb4:	defff704 	addi	sp,sp,-36
   57eb8:	dc800215 	stw	r18,8(sp)
   57ebc:	2c800417 	ldw	r18,16(r5)
   57ec0:	dd800615 	stw	r22,24(sp)
   57ec4:	dd400515 	stw	r21,20(sp)
   57ec8:	dd000415 	stw	r20,16(sp)
   57ecc:	dcc00315 	stw	r19,12(sp)
   57ed0:	dc400115 	stw	r17,4(sp)
   57ed4:	dc000015 	stw	r16,0(sp)
   57ed8:	dfc00815 	stw	ra,32(sp)
   57edc:	ddc00715 	stw	r23,28(sp)
   57ee0:	2827883a 	mov	r19,r5
   57ee4:	2029883a 	mov	r20,r4
   57ee8:	3023883a 	mov	r17,r6
   57eec:	3821883a 	mov	r16,r7
   57ef0:	2d400504 	addi	r21,r5,20
   57ef4:	002d883a 	mov	r22,zero
   57ef8:	adc00017 	ldw	r23,0(r21)
   57efc:	880b883a 	mov	r5,r17
   57f00:	ad400104 	addi	r21,r21,4
   57f04:	b93fffcc 	andi	r4,r23,65535
   57f08:	004dab40 	call	4dab4 <__mulsi3>
   57f0c:	b808d43a 	srli	r4,r23,16
   57f10:	880b883a 	mov	r5,r17
   57f14:	1421883a 	add	r16,r2,r16
   57f18:	004dab40 	call	4dab4 <__mulsi3>
   57f1c:	800ed43a 	srli	r7,r16,16
   57f20:	80ffffcc 	andi	r3,r16,65535
   57f24:	b5800044 	addi	r22,r22,1
   57f28:	11c5883a 	add	r2,r2,r7
   57f2c:	100e943a 	slli	r7,r2,16
   57f30:	1020d43a 	srli	r16,r2,16
   57f34:	38c7883a 	add	r3,r7,r3
   57f38:	a8ffff15 	stw	r3,-4(r21)
   57f3c:	b4bfee16 	blt	r22,r18,57ef8 <__alt_data_end+0xfffd7ef8>
   57f40:	80000926 	beq	r16,zero,57f68 <__multadd+0xb4>
   57f44:	98800217 	ldw	r2,8(r19)
   57f48:	9080130e 	bge	r18,r2,57f98 <__multadd+0xe4>
   57f4c:	90800144 	addi	r2,r18,5
   57f50:	1085883a 	add	r2,r2,r2
   57f54:	1085883a 	add	r2,r2,r2
   57f58:	9885883a 	add	r2,r19,r2
   57f5c:	14000015 	stw	r16,0(r2)
   57f60:	94800044 	addi	r18,r18,1
   57f64:	9c800415 	stw	r18,16(r19)
   57f68:	9805883a 	mov	r2,r19
   57f6c:	dfc00817 	ldw	ra,32(sp)
   57f70:	ddc00717 	ldw	r23,28(sp)
   57f74:	dd800617 	ldw	r22,24(sp)
   57f78:	dd400517 	ldw	r21,20(sp)
   57f7c:	dd000417 	ldw	r20,16(sp)
   57f80:	dcc00317 	ldw	r19,12(sp)
   57f84:	dc800217 	ldw	r18,8(sp)
   57f88:	dc400117 	ldw	r17,4(sp)
   57f8c:	dc000017 	ldw	r16,0(sp)
   57f90:	dec00904 	addi	sp,sp,36
   57f94:	f800283a 	ret
   57f98:	99400117 	ldw	r5,4(r19)
   57f9c:	a009883a 	mov	r4,r20
   57fa0:	29400044 	addi	r5,r5,1
   57fa4:	0057de40 	call	57de4 <_Balloc>
   57fa8:	99800417 	ldw	r6,16(r19)
   57fac:	99400304 	addi	r5,r19,12
   57fb0:	11000304 	addi	r4,r2,12
   57fb4:	31800084 	addi	r6,r6,2
   57fb8:	318d883a 	add	r6,r6,r6
   57fbc:	318d883a 	add	r6,r6,r6
   57fc0:	1023883a 	mov	r17,r2
   57fc4:	004fe540 	call	4fe54 <memcpy>
   57fc8:	98000a26 	beq	r19,zero,57ff4 <__multadd+0x140>
   57fcc:	98c00117 	ldw	r3,4(r19)
   57fd0:	a0801317 	ldw	r2,76(r20)
   57fd4:	18c7883a 	add	r3,r3,r3
   57fd8:	18c7883a 	add	r3,r3,r3
   57fdc:	10c5883a 	add	r2,r2,r3
   57fe0:	10c00017 	ldw	r3,0(r2)
   57fe4:	98c00015 	stw	r3,0(r19)
   57fe8:	14c00015 	stw	r19,0(r2)
   57fec:	8827883a 	mov	r19,r17
   57ff0:	003fd606 	br	57f4c <__alt_data_end+0xfffd7f4c>
   57ff4:	8827883a 	mov	r19,r17
   57ff8:	003fd406 	br	57f4c <__alt_data_end+0xfffd7f4c>

00057ffc <__s2b>:
   57ffc:	defff904 	addi	sp,sp,-28
   58000:	dc400115 	stw	r17,4(sp)
   58004:	dc000015 	stw	r16,0(sp)
   58008:	2023883a 	mov	r17,r4
   5800c:	2821883a 	mov	r16,r5
   58010:	39000204 	addi	r4,r7,8
   58014:	01400244 	movi	r5,9
   58018:	dcc00315 	stw	r19,12(sp)
   5801c:	dc800215 	stw	r18,8(sp)
   58020:	dfc00615 	stw	ra,24(sp)
   58024:	dd400515 	stw	r21,20(sp)
   58028:	dd000415 	stw	r20,16(sp)
   5802c:	3825883a 	mov	r18,r7
   58030:	3027883a 	mov	r19,r6
   58034:	004d9000 	call	4d900 <__divsi3>
   58038:	00c00044 	movi	r3,1
   5803c:	000b883a 	mov	r5,zero
   58040:	1880030e 	bge	r3,r2,58050 <__s2b+0x54>
   58044:	18c7883a 	add	r3,r3,r3
   58048:	29400044 	addi	r5,r5,1
   5804c:	18bffd16 	blt	r3,r2,58044 <__alt_data_end+0xfffd8044>
   58050:	8809883a 	mov	r4,r17
   58054:	0057de40 	call	57de4 <_Balloc>
   58058:	d8c00717 	ldw	r3,28(sp)
   5805c:	10c00515 	stw	r3,20(r2)
   58060:	00c00044 	movi	r3,1
   58064:	10c00415 	stw	r3,16(r2)
   58068:	00c00244 	movi	r3,9
   5806c:	1cc0210e 	bge	r3,r19,580f4 <__s2b+0xf8>
   58070:	80eb883a 	add	r21,r16,r3
   58074:	a829883a 	mov	r20,r21
   58078:	84e1883a 	add	r16,r16,r19
   5807c:	a1c00007 	ldb	r7,0(r20)
   58080:	01800284 	movi	r6,10
   58084:	a5000044 	addi	r20,r20,1
   58088:	100b883a 	mov	r5,r2
   5808c:	39fff404 	addi	r7,r7,-48
   58090:	8809883a 	mov	r4,r17
   58094:	0057eb40 	call	57eb4 <__multadd>
   58098:	a43ff81e 	bne	r20,r16,5807c <__alt_data_end+0xfffd807c>
   5809c:	ace1883a 	add	r16,r21,r19
   580a0:	843ffe04 	addi	r16,r16,-8
   580a4:	9c800a0e 	bge	r19,r18,580d0 <__s2b+0xd4>
   580a8:	94e5c83a 	sub	r18,r18,r19
   580ac:	84a5883a 	add	r18,r16,r18
   580b0:	81c00007 	ldb	r7,0(r16)
   580b4:	01800284 	movi	r6,10
   580b8:	84000044 	addi	r16,r16,1
   580bc:	100b883a 	mov	r5,r2
   580c0:	39fff404 	addi	r7,r7,-48
   580c4:	8809883a 	mov	r4,r17
   580c8:	0057eb40 	call	57eb4 <__multadd>
   580cc:	84bff81e 	bne	r16,r18,580b0 <__alt_data_end+0xfffd80b0>
   580d0:	dfc00617 	ldw	ra,24(sp)
   580d4:	dd400517 	ldw	r21,20(sp)
   580d8:	dd000417 	ldw	r20,16(sp)
   580dc:	dcc00317 	ldw	r19,12(sp)
   580e0:	dc800217 	ldw	r18,8(sp)
   580e4:	dc400117 	ldw	r17,4(sp)
   580e8:	dc000017 	ldw	r16,0(sp)
   580ec:	dec00704 	addi	sp,sp,28
   580f0:	f800283a 	ret
   580f4:	84000284 	addi	r16,r16,10
   580f8:	1827883a 	mov	r19,r3
   580fc:	003fe906 	br	580a4 <__alt_data_end+0xfffd80a4>

00058100 <__hi0bits>:
   58100:	20bfffec 	andhi	r2,r4,65535
   58104:	1000141e 	bne	r2,zero,58158 <__hi0bits+0x58>
   58108:	2008943a 	slli	r4,r4,16
   5810c:	00800404 	movi	r2,16
   58110:	20ffc02c 	andhi	r3,r4,65280
   58114:	1800021e 	bne	r3,zero,58120 <__hi0bits+0x20>
   58118:	2008923a 	slli	r4,r4,8
   5811c:	10800204 	addi	r2,r2,8
   58120:	20fc002c 	andhi	r3,r4,61440
   58124:	1800021e 	bne	r3,zero,58130 <__hi0bits+0x30>
   58128:	2008913a 	slli	r4,r4,4
   5812c:	10800104 	addi	r2,r2,4
   58130:	20f0002c 	andhi	r3,r4,49152
   58134:	1800031e 	bne	r3,zero,58144 <__hi0bits+0x44>
   58138:	2109883a 	add	r4,r4,r4
   5813c:	10800084 	addi	r2,r2,2
   58140:	2109883a 	add	r4,r4,r4
   58144:	20000316 	blt	r4,zero,58154 <__hi0bits+0x54>
   58148:	2110002c 	andhi	r4,r4,16384
   5814c:	2000041e 	bne	r4,zero,58160 <__hi0bits+0x60>
   58150:	00800804 	movi	r2,32
   58154:	f800283a 	ret
   58158:	0005883a 	mov	r2,zero
   5815c:	003fec06 	br	58110 <__alt_data_end+0xfffd8110>
   58160:	10800044 	addi	r2,r2,1
   58164:	f800283a 	ret

00058168 <__lo0bits>:
   58168:	20c00017 	ldw	r3,0(r4)
   5816c:	188001cc 	andi	r2,r3,7
   58170:	10000826 	beq	r2,zero,58194 <__lo0bits+0x2c>
   58174:	1880004c 	andi	r2,r3,1
   58178:	1000211e 	bne	r2,zero,58200 <__lo0bits+0x98>
   5817c:	1880008c 	andi	r2,r3,2
   58180:	1000211e 	bne	r2,zero,58208 <__lo0bits+0xa0>
   58184:	1806d0ba 	srli	r3,r3,2
   58188:	00800084 	movi	r2,2
   5818c:	20c00015 	stw	r3,0(r4)
   58190:	f800283a 	ret
   58194:	18bfffcc 	andi	r2,r3,65535
   58198:	10001326 	beq	r2,zero,581e8 <__lo0bits+0x80>
   5819c:	0005883a 	mov	r2,zero
   581a0:	19403fcc 	andi	r5,r3,255
   581a4:	2800021e 	bne	r5,zero,581b0 <__lo0bits+0x48>
   581a8:	1806d23a 	srli	r3,r3,8
   581ac:	10800204 	addi	r2,r2,8
   581b0:	194003cc 	andi	r5,r3,15
   581b4:	2800021e 	bne	r5,zero,581c0 <__lo0bits+0x58>
   581b8:	1806d13a 	srli	r3,r3,4
   581bc:	10800104 	addi	r2,r2,4
   581c0:	194000cc 	andi	r5,r3,3
   581c4:	2800021e 	bne	r5,zero,581d0 <__lo0bits+0x68>
   581c8:	1806d0ba 	srli	r3,r3,2
   581cc:	10800084 	addi	r2,r2,2
   581d0:	1940004c 	andi	r5,r3,1
   581d4:	2800081e 	bne	r5,zero,581f8 <__lo0bits+0x90>
   581d8:	1806d07a 	srli	r3,r3,1
   581dc:	1800051e 	bne	r3,zero,581f4 <__lo0bits+0x8c>
   581e0:	00800804 	movi	r2,32
   581e4:	f800283a 	ret
   581e8:	1806d43a 	srli	r3,r3,16
   581ec:	00800404 	movi	r2,16
   581f0:	003feb06 	br	581a0 <__alt_data_end+0xfffd81a0>
   581f4:	10800044 	addi	r2,r2,1
   581f8:	20c00015 	stw	r3,0(r4)
   581fc:	f800283a 	ret
   58200:	0005883a 	mov	r2,zero
   58204:	f800283a 	ret
   58208:	1806d07a 	srli	r3,r3,1
   5820c:	00800044 	movi	r2,1
   58210:	20c00015 	stw	r3,0(r4)
   58214:	f800283a 	ret

00058218 <__i2b>:
   58218:	defffd04 	addi	sp,sp,-12
   5821c:	dc000015 	stw	r16,0(sp)
   58220:	04000044 	movi	r16,1
   58224:	dc400115 	stw	r17,4(sp)
   58228:	2823883a 	mov	r17,r5
   5822c:	800b883a 	mov	r5,r16
   58230:	dfc00215 	stw	ra,8(sp)
   58234:	0057de40 	call	57de4 <_Balloc>
   58238:	14400515 	stw	r17,20(r2)
   5823c:	14000415 	stw	r16,16(r2)
   58240:	dfc00217 	ldw	ra,8(sp)
   58244:	dc400117 	ldw	r17,4(sp)
   58248:	dc000017 	ldw	r16,0(sp)
   5824c:	dec00304 	addi	sp,sp,12
   58250:	f800283a 	ret

00058254 <__multiply>:
   58254:	deffef04 	addi	sp,sp,-68
   58258:	dc400815 	stw	r17,32(sp)
   5825c:	dc000715 	stw	r16,28(sp)
   58260:	34400417 	ldw	r17,16(r6)
   58264:	2c000417 	ldw	r16,16(r5)
   58268:	dd800d15 	stw	r22,52(sp)
   5826c:	dc800915 	stw	r18,36(sp)
   58270:	dfc01015 	stw	ra,64(sp)
   58274:	df000f15 	stw	fp,60(sp)
   58278:	ddc00e15 	stw	r23,56(sp)
   5827c:	dd400c15 	stw	r21,48(sp)
   58280:	dd000b15 	stw	r20,44(sp)
   58284:	dcc00a15 	stw	r19,40(sp)
   58288:	2825883a 	mov	r18,r5
   5828c:	302d883a 	mov	r22,r6
   58290:	8440050e 	bge	r16,r17,582a8 <__multiply+0x54>
   58294:	8007883a 	mov	r3,r16
   58298:	3025883a 	mov	r18,r6
   5829c:	8821883a 	mov	r16,r17
   582a0:	282d883a 	mov	r22,r5
   582a4:	1823883a 	mov	r17,r3
   582a8:	90800217 	ldw	r2,8(r18)
   582ac:	8447883a 	add	r3,r16,r17
   582b0:	d8c00215 	stw	r3,8(sp)
   582b4:	91400117 	ldw	r5,4(r18)
   582b8:	10c0010e 	bge	r2,r3,582c0 <__multiply+0x6c>
   582bc:	29400044 	addi	r5,r5,1
   582c0:	0057de40 	call	57de4 <_Balloc>
   582c4:	d8c00217 	ldw	r3,8(sp)
   582c8:	d8800615 	stw	r2,24(sp)
   582cc:	18eb883a 	add	r21,r3,r3
   582d0:	ad6b883a 	add	r21,r21,r21
   582d4:	10c00504 	addi	r3,r2,20
   582d8:	1d6b883a 	add	r21,r3,r21
   582dc:	d8c00115 	stw	r3,4(sp)
   582e0:	dd400315 	stw	r21,12(sp)
   582e4:	1805883a 	mov	r2,r3
   582e8:	1d40042e 	bgeu	r3,r21,582fc <__multiply+0xa8>
   582ec:	d8c00317 	ldw	r3,12(sp)
   582f0:	10000015 	stw	zero,0(r2)
   582f4:	10800104 	addi	r2,r2,4
   582f8:	10fffc36 	bltu	r2,r3,582ec <__alt_data_end+0xfffd82ec>
   582fc:	8c63883a 	add	r17,r17,r17
   58300:	b5800504 	addi	r22,r22,20
   58304:	8c63883a 	add	r17,r17,r17
   58308:	94800504 	addi	r18,r18,20
   5830c:	8421883a 	add	r16,r16,r16
   58310:	b463883a 	add	r17,r22,r17
   58314:	8421883a 	add	r16,r16,r16
   58318:	dd800015 	stw	r22,0(sp)
   5831c:	dc800415 	stw	r18,16(sp)
   58320:	dc400515 	stw	r17,20(sp)
   58324:	9429883a 	add	r20,r18,r16
   58328:	b4404f2e 	bgeu	r22,r17,58468 <__multiply+0x214>
   5832c:	d8c00017 	ldw	r3,0(sp)
   58330:	1c800017 	ldw	r18,0(r3)
   58334:	947fffcc 	andi	r17,r18,65535
   58338:	88001e26 	beq	r17,zero,583b4 <__multiply+0x160>
   5833c:	dd800117 	ldw	r22,4(sp)
   58340:	dd400417 	ldw	r21,16(sp)
   58344:	0027883a 	mov	r19,zero
   58348:	ac800017 	ldw	r18,0(r21)
   5834c:	b4000017 	ldw	r16,0(r22)
   58350:	880b883a 	mov	r5,r17
   58354:	913fffcc 	andi	r4,r18,65535
   58358:	004dab40 	call	4dab4 <__mulsi3>
   5835c:	9008d43a 	srli	r4,r18,16
   58360:	84bfffcc 	andi	r18,r16,65535
   58364:	1485883a 	add	r2,r2,r18
   58368:	14e5883a 	add	r18,r2,r19
   5836c:	8020d43a 	srli	r16,r16,16
   58370:	9026d43a 	srli	r19,r18,16
   58374:	880b883a 	mov	r5,r17
   58378:	004dab40 	call	4dab4 <__mulsi3>
   5837c:	1405883a 	add	r2,r2,r16
   58380:	14e1883a 	add	r16,r2,r19
   58384:	90ffffcc 	andi	r3,r18,65535
   58388:	8024943a 	slli	r18,r16,16
   5838c:	ad400104 	addi	r21,r21,4
   58390:	b005883a 	mov	r2,r22
   58394:	90c6b03a 	or	r3,r18,r3
   58398:	b0c00015 	stw	r3,0(r22)
   5839c:	8026d43a 	srli	r19,r16,16
   583a0:	b5800104 	addi	r22,r22,4
   583a4:	ad3fe836 	bltu	r21,r20,58348 <__alt_data_end+0xfffd8348>
   583a8:	d8c00017 	ldw	r3,0(sp)
   583ac:	14c00115 	stw	r19,4(r2)
   583b0:	1c800017 	ldw	r18,0(r3)
   583b4:	9024d43a 	srli	r18,r18,16
   583b8:	90002226 	beq	r18,zero,58444 <__multiply+0x1f0>
   583bc:	d8c00117 	ldw	r3,4(sp)
   583c0:	dd800417 	ldw	r22,16(sp)
   583c4:	002f883a 	mov	r23,zero
   583c8:	1f000017 	ldw	fp,0(r3)
   583cc:	1823883a 	mov	r17,r3
   583d0:	182b883a 	mov	r21,r3
   583d4:	e021883a 	mov	r16,fp
   583d8:	00000106 	br	583e0 <__multiply+0x18c>
   583dc:	982b883a 	mov	r21,r19
   583e0:	b100000b 	ldhu	r4,0(r22)
   583e4:	8020d43a 	srli	r16,r16,16
   583e8:	900b883a 	mov	r5,r18
   583ec:	004dab40 	call	4dab4 <__mulsi3>
   583f0:	1405883a 	add	r2,r2,r16
   583f4:	15ef883a 	add	r23,r2,r23
   583f8:	b804943a 	slli	r2,r23,16
   583fc:	e0ffffcc 	andi	r3,fp,65535
   58400:	8c400104 	addi	r17,r17,4
   58404:	10c6b03a 	or	r3,r2,r3
   58408:	88ffff15 	stw	r3,-4(r17)
   5840c:	b5800104 	addi	r22,r22,4
   58410:	b13fff17 	ldw	r4,-4(r22)
   58414:	acc00104 	addi	r19,r21,4
   58418:	900b883a 	mov	r5,r18
   5841c:	2008d43a 	srli	r4,r4,16
   58420:	9c000017 	ldw	r16,0(r19)
   58424:	004dab40 	call	4dab4 <__mulsi3>
   58428:	b806d43a 	srli	r3,r23,16
   5842c:	813fffcc 	andi	r4,r16,65535
   58430:	1105883a 	add	r2,r2,r4
   58434:	10f9883a 	add	fp,r2,r3
   58438:	e02ed43a 	srli	r23,fp,16
   5843c:	b53fe736 	bltu	r22,r20,583dc <__alt_data_end+0xfffd83dc>
   58440:	af000115 	stw	fp,4(r21)
   58444:	d8c00017 	ldw	r3,0(sp)
   58448:	d9000517 	ldw	r4,20(sp)
   5844c:	18c00104 	addi	r3,r3,4
   58450:	d8c00015 	stw	r3,0(sp)
   58454:	d8c00117 	ldw	r3,4(sp)
   58458:	18c00104 	addi	r3,r3,4
   5845c:	d8c00115 	stw	r3,4(sp)
   58460:	d8c00017 	ldw	r3,0(sp)
   58464:	193fb136 	bltu	r3,r4,5832c <__alt_data_end+0xfffd832c>
   58468:	d8c00217 	ldw	r3,8(sp)
   5846c:	00c00c0e 	bge	zero,r3,584a0 <__multiply+0x24c>
   58470:	d8c00317 	ldw	r3,12(sp)
   58474:	18bfff17 	ldw	r2,-4(r3)
   58478:	1d7fff04 	addi	r21,r3,-4
   5847c:	10000326 	beq	r2,zero,5848c <__multiply+0x238>
   58480:	00000706 	br	584a0 <__multiply+0x24c>
   58484:	a8800017 	ldw	r2,0(r21)
   58488:	1000051e 	bne	r2,zero,584a0 <__multiply+0x24c>
   5848c:	d8c00217 	ldw	r3,8(sp)
   58490:	ad7fff04 	addi	r21,r21,-4
   58494:	18ffffc4 	addi	r3,r3,-1
   58498:	d8c00215 	stw	r3,8(sp)
   5849c:	183ff91e 	bne	r3,zero,58484 <__alt_data_end+0xfffd8484>
   584a0:	d8c00617 	ldw	r3,24(sp)
   584a4:	d9000217 	ldw	r4,8(sp)
   584a8:	1805883a 	mov	r2,r3
   584ac:	19000415 	stw	r4,16(r3)
   584b0:	dfc01017 	ldw	ra,64(sp)
   584b4:	df000f17 	ldw	fp,60(sp)
   584b8:	ddc00e17 	ldw	r23,56(sp)
   584bc:	dd800d17 	ldw	r22,52(sp)
   584c0:	dd400c17 	ldw	r21,48(sp)
   584c4:	dd000b17 	ldw	r20,44(sp)
   584c8:	dcc00a17 	ldw	r19,40(sp)
   584cc:	dc800917 	ldw	r18,36(sp)
   584d0:	dc400817 	ldw	r17,32(sp)
   584d4:	dc000717 	ldw	r16,28(sp)
   584d8:	dec01104 	addi	sp,sp,68
   584dc:	f800283a 	ret

000584e0 <__pow5mult>:
   584e0:	defffa04 	addi	sp,sp,-24
   584e4:	dcc00315 	stw	r19,12(sp)
   584e8:	dc000015 	stw	r16,0(sp)
   584ec:	dfc00515 	stw	ra,20(sp)
   584f0:	dd000415 	stw	r20,16(sp)
   584f4:	dc800215 	stw	r18,8(sp)
   584f8:	dc400115 	stw	r17,4(sp)
   584fc:	308000cc 	andi	r2,r6,3
   58500:	3021883a 	mov	r16,r6
   58504:	2027883a 	mov	r19,r4
   58508:	10002f1e 	bne	r2,zero,585c8 <__pow5mult+0xe8>
   5850c:	2825883a 	mov	r18,r5
   58510:	8021d0ba 	srai	r16,r16,2
   58514:	80001a26 	beq	r16,zero,58580 <__pow5mult+0xa0>
   58518:	9c401217 	ldw	r17,72(r19)
   5851c:	8800061e 	bne	r17,zero,58538 <__pow5mult+0x58>
   58520:	00003406 	br	585f4 <__pow5mult+0x114>
   58524:	8021d07a 	srai	r16,r16,1
   58528:	80001526 	beq	r16,zero,58580 <__pow5mult+0xa0>
   5852c:	88800017 	ldw	r2,0(r17)
   58530:	10001c26 	beq	r2,zero,585a4 <__pow5mult+0xc4>
   58534:	1023883a 	mov	r17,r2
   58538:	8080004c 	andi	r2,r16,1
   5853c:	103ff926 	beq	r2,zero,58524 <__alt_data_end+0xfffd8524>
   58540:	880d883a 	mov	r6,r17
   58544:	900b883a 	mov	r5,r18
   58548:	9809883a 	mov	r4,r19
   5854c:	00582540 	call	58254 <__multiply>
   58550:	90001b26 	beq	r18,zero,585c0 <__pow5mult+0xe0>
   58554:	91000117 	ldw	r4,4(r18)
   58558:	98c01317 	ldw	r3,76(r19)
   5855c:	8021d07a 	srai	r16,r16,1
   58560:	2109883a 	add	r4,r4,r4
   58564:	2109883a 	add	r4,r4,r4
   58568:	1907883a 	add	r3,r3,r4
   5856c:	19000017 	ldw	r4,0(r3)
   58570:	91000015 	stw	r4,0(r18)
   58574:	1c800015 	stw	r18,0(r3)
   58578:	1025883a 	mov	r18,r2
   5857c:	803feb1e 	bne	r16,zero,5852c <__alt_data_end+0xfffd852c>
   58580:	9005883a 	mov	r2,r18
   58584:	dfc00517 	ldw	ra,20(sp)
   58588:	dd000417 	ldw	r20,16(sp)
   5858c:	dcc00317 	ldw	r19,12(sp)
   58590:	dc800217 	ldw	r18,8(sp)
   58594:	dc400117 	ldw	r17,4(sp)
   58598:	dc000017 	ldw	r16,0(sp)
   5859c:	dec00604 	addi	sp,sp,24
   585a0:	f800283a 	ret
   585a4:	880d883a 	mov	r6,r17
   585a8:	880b883a 	mov	r5,r17
   585ac:	9809883a 	mov	r4,r19
   585b0:	00582540 	call	58254 <__multiply>
   585b4:	88800015 	stw	r2,0(r17)
   585b8:	10000015 	stw	zero,0(r2)
   585bc:	003fdd06 	br	58534 <__alt_data_end+0xfffd8534>
   585c0:	1025883a 	mov	r18,r2
   585c4:	003fd706 	br	58524 <__alt_data_end+0xfffd8524>
   585c8:	10bfffc4 	addi	r2,r2,-1
   585cc:	1085883a 	add	r2,r2,r2
   585d0:	00c001f4 	movhi	r3,7
   585d4:	18ee9804 	addi	r3,r3,-17824
   585d8:	1085883a 	add	r2,r2,r2
   585dc:	1885883a 	add	r2,r3,r2
   585e0:	11800017 	ldw	r6,0(r2)
   585e4:	000f883a 	mov	r7,zero
   585e8:	0057eb40 	call	57eb4 <__multadd>
   585ec:	1025883a 	mov	r18,r2
   585f0:	003fc706 	br	58510 <__alt_data_end+0xfffd8510>
   585f4:	05000044 	movi	r20,1
   585f8:	a00b883a 	mov	r5,r20
   585fc:	9809883a 	mov	r4,r19
   58600:	0057de40 	call	57de4 <_Balloc>
   58604:	1023883a 	mov	r17,r2
   58608:	00809c44 	movi	r2,625
   5860c:	88800515 	stw	r2,20(r17)
   58610:	8d000415 	stw	r20,16(r17)
   58614:	9c401215 	stw	r17,72(r19)
   58618:	88000015 	stw	zero,0(r17)
   5861c:	003fc606 	br	58538 <__alt_data_end+0xfffd8538>

00058620 <__lshift>:
   58620:	defff904 	addi	sp,sp,-28
   58624:	dd400515 	stw	r21,20(sp)
   58628:	dcc00315 	stw	r19,12(sp)
   5862c:	302bd17a 	srai	r21,r6,5
   58630:	2cc00417 	ldw	r19,16(r5)
   58634:	28800217 	ldw	r2,8(r5)
   58638:	dd000415 	stw	r20,16(sp)
   5863c:	ace7883a 	add	r19,r21,r19
   58640:	dc800215 	stw	r18,8(sp)
   58644:	dc400115 	stw	r17,4(sp)
   58648:	dc000015 	stw	r16,0(sp)
   5864c:	dfc00615 	stw	ra,24(sp)
   58650:	9c000044 	addi	r16,r19,1
   58654:	2823883a 	mov	r17,r5
   58658:	3029883a 	mov	r20,r6
   5865c:	2025883a 	mov	r18,r4
   58660:	29400117 	ldw	r5,4(r5)
   58664:	1400030e 	bge	r2,r16,58674 <__lshift+0x54>
   58668:	1085883a 	add	r2,r2,r2
   5866c:	29400044 	addi	r5,r5,1
   58670:	143ffd16 	blt	r2,r16,58668 <__alt_data_end+0xfffd8668>
   58674:	9009883a 	mov	r4,r18
   58678:	0057de40 	call	57de4 <_Balloc>
   5867c:	10c00504 	addi	r3,r2,20
   58680:	0540070e 	bge	zero,r21,586a0 <__lshift+0x80>
   58684:	ad6b883a 	add	r21,r21,r21
   58688:	ad6b883a 	add	r21,r21,r21
   5868c:	1809883a 	mov	r4,r3
   58690:	1d47883a 	add	r3,r3,r21
   58694:	20000015 	stw	zero,0(r4)
   58698:	21000104 	addi	r4,r4,4
   5869c:	193ffd1e 	bne	r3,r4,58694 <__alt_data_end+0xfffd8694>
   586a0:	8a000417 	ldw	r8,16(r17)
   586a4:	89000504 	addi	r4,r17,20
   586a8:	a18007cc 	andi	r6,r20,31
   586ac:	4211883a 	add	r8,r8,r8
   586b0:	4211883a 	add	r8,r8,r8
   586b4:	2211883a 	add	r8,r4,r8
   586b8:	30002326 	beq	r6,zero,58748 <__lshift+0x128>
   586bc:	02400804 	movi	r9,32
   586c0:	4993c83a 	sub	r9,r9,r6
   586c4:	000b883a 	mov	r5,zero
   586c8:	21c00017 	ldw	r7,0(r4)
   586cc:	1815883a 	mov	r10,r3
   586d0:	18c00104 	addi	r3,r3,4
   586d4:	398e983a 	sll	r7,r7,r6
   586d8:	21000104 	addi	r4,r4,4
   586dc:	394ab03a 	or	r5,r7,r5
   586e0:	197fff15 	stw	r5,-4(r3)
   586e4:	217fff17 	ldw	r5,-4(r4)
   586e8:	2a4ad83a 	srl	r5,r5,r9
   586ec:	223ff636 	bltu	r4,r8,586c8 <__alt_data_end+0xfffd86c8>
   586f0:	51400115 	stw	r5,4(r10)
   586f4:	28001a1e 	bne	r5,zero,58760 <__lshift+0x140>
   586f8:	843fffc4 	addi	r16,r16,-1
   586fc:	14000415 	stw	r16,16(r2)
   58700:	88000826 	beq	r17,zero,58724 <__lshift+0x104>
   58704:	89000117 	ldw	r4,4(r17)
   58708:	90c01317 	ldw	r3,76(r18)
   5870c:	2109883a 	add	r4,r4,r4
   58710:	2109883a 	add	r4,r4,r4
   58714:	1907883a 	add	r3,r3,r4
   58718:	19000017 	ldw	r4,0(r3)
   5871c:	89000015 	stw	r4,0(r17)
   58720:	1c400015 	stw	r17,0(r3)
   58724:	dfc00617 	ldw	ra,24(sp)
   58728:	dd400517 	ldw	r21,20(sp)
   5872c:	dd000417 	ldw	r20,16(sp)
   58730:	dcc00317 	ldw	r19,12(sp)
   58734:	dc800217 	ldw	r18,8(sp)
   58738:	dc400117 	ldw	r17,4(sp)
   5873c:	dc000017 	ldw	r16,0(sp)
   58740:	dec00704 	addi	sp,sp,28
   58744:	f800283a 	ret
   58748:	21400017 	ldw	r5,0(r4)
   5874c:	18c00104 	addi	r3,r3,4
   58750:	21000104 	addi	r4,r4,4
   58754:	197fff15 	stw	r5,-4(r3)
   58758:	223ffb36 	bltu	r4,r8,58748 <__alt_data_end+0xfffd8748>
   5875c:	003fe606 	br	586f8 <__alt_data_end+0xfffd86f8>
   58760:	9c000084 	addi	r16,r19,2
   58764:	003fe406 	br	586f8 <__alt_data_end+0xfffd86f8>

00058768 <__mcmp>:
   58768:	20800417 	ldw	r2,16(r4)
   5876c:	28c00417 	ldw	r3,16(r5)
   58770:	10c5c83a 	sub	r2,r2,r3
   58774:	1000111e 	bne	r2,zero,587bc <__mcmp+0x54>
   58778:	18c7883a 	add	r3,r3,r3
   5877c:	18c7883a 	add	r3,r3,r3
   58780:	21000504 	addi	r4,r4,20
   58784:	29400504 	addi	r5,r5,20
   58788:	20c5883a 	add	r2,r4,r3
   5878c:	28cb883a 	add	r5,r5,r3
   58790:	00000106 	br	58798 <__mcmp+0x30>
   58794:	20800a2e 	bgeu	r4,r2,587c0 <__mcmp+0x58>
   58798:	10bfff04 	addi	r2,r2,-4
   5879c:	297fff04 	addi	r5,r5,-4
   587a0:	11800017 	ldw	r6,0(r2)
   587a4:	28c00017 	ldw	r3,0(r5)
   587a8:	30fffa26 	beq	r6,r3,58794 <__alt_data_end+0xfffd8794>
   587ac:	30c00236 	bltu	r6,r3,587b8 <__mcmp+0x50>
   587b0:	00800044 	movi	r2,1
   587b4:	f800283a 	ret
   587b8:	00bfffc4 	movi	r2,-1
   587bc:	f800283a 	ret
   587c0:	0005883a 	mov	r2,zero
   587c4:	f800283a 	ret

000587c8 <__mdiff>:
   587c8:	28c00417 	ldw	r3,16(r5)
   587cc:	30800417 	ldw	r2,16(r6)
   587d0:	defffa04 	addi	sp,sp,-24
   587d4:	dcc00315 	stw	r19,12(sp)
   587d8:	dc800215 	stw	r18,8(sp)
   587dc:	dfc00515 	stw	ra,20(sp)
   587e0:	dd000415 	stw	r20,16(sp)
   587e4:	dc400115 	stw	r17,4(sp)
   587e8:	dc000015 	stw	r16,0(sp)
   587ec:	1887c83a 	sub	r3,r3,r2
   587f0:	2825883a 	mov	r18,r5
   587f4:	3027883a 	mov	r19,r6
   587f8:	1800141e 	bne	r3,zero,5884c <__mdiff+0x84>
   587fc:	1085883a 	add	r2,r2,r2
   58800:	1085883a 	add	r2,r2,r2
   58804:	2a000504 	addi	r8,r5,20
   58808:	34000504 	addi	r16,r6,20
   5880c:	4087883a 	add	r3,r8,r2
   58810:	8085883a 	add	r2,r16,r2
   58814:	00000106 	br	5881c <__mdiff+0x54>
   58818:	40c0592e 	bgeu	r8,r3,58980 <__mdiff+0x1b8>
   5881c:	18ffff04 	addi	r3,r3,-4
   58820:	10bfff04 	addi	r2,r2,-4
   58824:	19c00017 	ldw	r7,0(r3)
   58828:	11400017 	ldw	r5,0(r2)
   5882c:	397ffa26 	beq	r7,r5,58818 <__alt_data_end+0xfffd8818>
   58830:	3940592e 	bgeu	r7,r5,58998 <__mdiff+0x1d0>
   58834:	9005883a 	mov	r2,r18
   58838:	4023883a 	mov	r17,r8
   5883c:	9825883a 	mov	r18,r19
   58840:	05000044 	movi	r20,1
   58844:	1027883a 	mov	r19,r2
   58848:	00000406 	br	5885c <__mdiff+0x94>
   5884c:	18005616 	blt	r3,zero,589a8 <__mdiff+0x1e0>
   58850:	34400504 	addi	r17,r6,20
   58854:	2c000504 	addi	r16,r5,20
   58858:	0029883a 	mov	r20,zero
   5885c:	91400117 	ldw	r5,4(r18)
   58860:	0057de40 	call	57de4 <_Balloc>
   58864:	92400417 	ldw	r9,16(r18)
   58868:	9b000417 	ldw	r12,16(r19)
   5886c:	12c00504 	addi	r11,r2,20
   58870:	4a51883a 	add	r8,r9,r9
   58874:	6319883a 	add	r12,r12,r12
   58878:	4211883a 	add	r8,r8,r8
   5887c:	6319883a 	add	r12,r12,r12
   58880:	15000315 	stw	r20,12(r2)
   58884:	8211883a 	add	r8,r16,r8
   58888:	8b19883a 	add	r12,r17,r12
   5888c:	0007883a 	mov	r3,zero
   58890:	81400017 	ldw	r5,0(r16)
   58894:	89c00017 	ldw	r7,0(r17)
   58898:	59800104 	addi	r6,r11,4
   5889c:	293fffcc 	andi	r4,r5,65535
   588a0:	20c7883a 	add	r3,r4,r3
   588a4:	393fffcc 	andi	r4,r7,65535
   588a8:	1909c83a 	sub	r4,r3,r4
   588ac:	280ad43a 	srli	r5,r5,16
   588b0:	380ed43a 	srli	r7,r7,16
   588b4:	2007d43a 	srai	r3,r4,16
   588b8:	213fffcc 	andi	r4,r4,65535
   588bc:	29cbc83a 	sub	r5,r5,r7
   588c0:	28c7883a 	add	r3,r5,r3
   588c4:	180a943a 	slli	r5,r3,16
   588c8:	8c400104 	addi	r17,r17,4
   588cc:	84000104 	addi	r16,r16,4
   588d0:	2908b03a 	or	r4,r5,r4
   588d4:	59000015 	stw	r4,0(r11)
   588d8:	1807d43a 	srai	r3,r3,16
   588dc:	3015883a 	mov	r10,r6
   588e0:	3017883a 	mov	r11,r6
   588e4:	8b3fea36 	bltu	r17,r12,58890 <__alt_data_end+0xfffd8890>
   588e8:	8200162e 	bgeu	r16,r8,58944 <__mdiff+0x17c>
   588ec:	8017883a 	mov	r11,r16
   588f0:	59400017 	ldw	r5,0(r11)
   588f4:	31800104 	addi	r6,r6,4
   588f8:	5ac00104 	addi	r11,r11,4
   588fc:	293fffcc 	andi	r4,r5,65535
   58900:	20c7883a 	add	r3,r4,r3
   58904:	280ed43a 	srli	r7,r5,16
   58908:	180bd43a 	srai	r5,r3,16
   5890c:	193fffcc 	andi	r4,r3,65535
   58910:	3947883a 	add	r3,r7,r5
   58914:	180a943a 	slli	r5,r3,16
   58918:	1807d43a 	srai	r3,r3,16
   5891c:	2908b03a 	or	r4,r5,r4
   58920:	313fff15 	stw	r4,-4(r6)
   58924:	5a3ff236 	bltu	r11,r8,588f0 <__alt_data_end+0xfffd88f0>
   58928:	0406303a 	nor	r3,zero,r16
   5892c:	1a07883a 	add	r3,r3,r8
   58930:	1806d0ba 	srli	r3,r3,2
   58934:	18c00044 	addi	r3,r3,1
   58938:	18c7883a 	add	r3,r3,r3
   5893c:	18c7883a 	add	r3,r3,r3
   58940:	50d5883a 	add	r10,r10,r3
   58944:	50ffff04 	addi	r3,r10,-4
   58948:	2000041e 	bne	r4,zero,5895c <__mdiff+0x194>
   5894c:	18ffff04 	addi	r3,r3,-4
   58950:	19000017 	ldw	r4,0(r3)
   58954:	4a7fffc4 	addi	r9,r9,-1
   58958:	203ffc26 	beq	r4,zero,5894c <__alt_data_end+0xfffd894c>
   5895c:	12400415 	stw	r9,16(r2)
   58960:	dfc00517 	ldw	ra,20(sp)
   58964:	dd000417 	ldw	r20,16(sp)
   58968:	dcc00317 	ldw	r19,12(sp)
   5896c:	dc800217 	ldw	r18,8(sp)
   58970:	dc400117 	ldw	r17,4(sp)
   58974:	dc000017 	ldw	r16,0(sp)
   58978:	dec00604 	addi	sp,sp,24
   5897c:	f800283a 	ret
   58980:	000b883a 	mov	r5,zero
   58984:	0057de40 	call	57de4 <_Balloc>
   58988:	00c00044 	movi	r3,1
   5898c:	10c00415 	stw	r3,16(r2)
   58990:	10000515 	stw	zero,20(r2)
   58994:	003ff206 	br	58960 <__alt_data_end+0xfffd8960>
   58998:	8023883a 	mov	r17,r16
   5899c:	0029883a 	mov	r20,zero
   589a0:	4021883a 	mov	r16,r8
   589a4:	003fad06 	br	5885c <__alt_data_end+0xfffd885c>
   589a8:	9005883a 	mov	r2,r18
   589ac:	94400504 	addi	r17,r18,20
   589b0:	9c000504 	addi	r16,r19,20
   589b4:	9825883a 	mov	r18,r19
   589b8:	05000044 	movi	r20,1
   589bc:	1027883a 	mov	r19,r2
   589c0:	003fa606 	br	5885c <__alt_data_end+0xfffd885c>

000589c4 <__ulp>:
   589c4:	295ffc2c 	andhi	r5,r5,32752
   589c8:	00bf3034 	movhi	r2,64704
   589cc:	2887883a 	add	r3,r5,r2
   589d0:	00c0020e 	bge	zero,r3,589dc <__ulp+0x18>
   589d4:	0005883a 	mov	r2,zero
   589d8:	f800283a 	ret
   589dc:	00c7c83a 	sub	r3,zero,r3
   589e0:	1807d53a 	srai	r3,r3,20
   589e4:	008004c4 	movi	r2,19
   589e8:	10c00b0e 	bge	r2,r3,58a18 <__ulp+0x54>
   589ec:	18bffb04 	addi	r2,r3,-20
   589f0:	01000784 	movi	r4,30
   589f4:	0007883a 	mov	r3,zero
   589f8:	20800516 	blt	r4,r2,58a10 <__ulp+0x4c>
   589fc:	010007c4 	movi	r4,31
   58a00:	2089c83a 	sub	r4,r4,r2
   58a04:	00800044 	movi	r2,1
   58a08:	1104983a 	sll	r2,r2,r4
   58a0c:	f800283a 	ret
   58a10:	00800044 	movi	r2,1
   58a14:	f800283a 	ret
   58a18:	01400234 	movhi	r5,8
   58a1c:	28c7d83a 	sra	r3,r5,r3
   58a20:	0005883a 	mov	r2,zero
   58a24:	f800283a 	ret

00058a28 <__b2d>:
   58a28:	defffa04 	addi	sp,sp,-24
   58a2c:	dc000015 	stw	r16,0(sp)
   58a30:	24000417 	ldw	r16,16(r4)
   58a34:	dc400115 	stw	r17,4(sp)
   58a38:	24400504 	addi	r17,r4,20
   58a3c:	8421883a 	add	r16,r16,r16
   58a40:	8421883a 	add	r16,r16,r16
   58a44:	8c21883a 	add	r16,r17,r16
   58a48:	dc800215 	stw	r18,8(sp)
   58a4c:	84bfff17 	ldw	r18,-4(r16)
   58a50:	dd000415 	stw	r20,16(sp)
   58a54:	dcc00315 	stw	r19,12(sp)
   58a58:	9009883a 	mov	r4,r18
   58a5c:	2829883a 	mov	r20,r5
   58a60:	dfc00515 	stw	ra,20(sp)
   58a64:	00581000 	call	58100 <__hi0bits>
   58a68:	00c00804 	movi	r3,32
   58a6c:	1889c83a 	sub	r4,r3,r2
   58a70:	a1000015 	stw	r4,0(r20)
   58a74:	01000284 	movi	r4,10
   58a78:	84ffff04 	addi	r19,r16,-4
   58a7c:	20801216 	blt	r4,r2,58ac8 <__b2d+0xa0>
   58a80:	018002c4 	movi	r6,11
   58a84:	308dc83a 	sub	r6,r6,r2
   58a88:	9186d83a 	srl	r3,r18,r6
   58a8c:	18cffc34 	orhi	r3,r3,16368
   58a90:	8cc0212e 	bgeu	r17,r19,58b18 <__b2d+0xf0>
   58a94:	813ffe17 	ldw	r4,-8(r16)
   58a98:	218cd83a 	srl	r6,r4,r6
   58a9c:	10800544 	addi	r2,r2,21
   58aa0:	9084983a 	sll	r2,r18,r2
   58aa4:	1184b03a 	or	r2,r2,r6
   58aa8:	dfc00517 	ldw	ra,20(sp)
   58aac:	dd000417 	ldw	r20,16(sp)
   58ab0:	dcc00317 	ldw	r19,12(sp)
   58ab4:	dc800217 	ldw	r18,8(sp)
   58ab8:	dc400117 	ldw	r17,4(sp)
   58abc:	dc000017 	ldw	r16,0(sp)
   58ac0:	dec00604 	addi	sp,sp,24
   58ac4:	f800283a 	ret
   58ac8:	8cc00f2e 	bgeu	r17,r19,58b08 <__b2d+0xe0>
   58acc:	117ffd44 	addi	r5,r2,-11
   58ad0:	80bffe17 	ldw	r2,-8(r16)
   58ad4:	28000e26 	beq	r5,zero,58b10 <__b2d+0xe8>
   58ad8:	1949c83a 	sub	r4,r3,r5
   58adc:	9164983a 	sll	r18,r18,r5
   58ae0:	1106d83a 	srl	r3,r2,r4
   58ae4:	81bffe04 	addi	r6,r16,-8
   58ae8:	948ffc34 	orhi	r18,r18,16368
   58aec:	90c6b03a 	or	r3,r18,r3
   58af0:	89800e2e 	bgeu	r17,r6,58b2c <__b2d+0x104>
   58af4:	81bffd17 	ldw	r6,-12(r16)
   58af8:	1144983a 	sll	r2,r2,r5
   58afc:	310ad83a 	srl	r5,r6,r4
   58b00:	2884b03a 	or	r2,r5,r2
   58b04:	003fe806 	br	58aa8 <__alt_data_end+0xfffd8aa8>
   58b08:	10bffd44 	addi	r2,r2,-11
   58b0c:	1000041e 	bne	r2,zero,58b20 <__b2d+0xf8>
   58b10:	90cffc34 	orhi	r3,r18,16368
   58b14:	003fe406 	br	58aa8 <__alt_data_end+0xfffd8aa8>
   58b18:	000d883a 	mov	r6,zero
   58b1c:	003fdf06 	br	58a9c <__alt_data_end+0xfffd8a9c>
   58b20:	90a4983a 	sll	r18,r18,r2
   58b24:	0005883a 	mov	r2,zero
   58b28:	003ff906 	br	58b10 <__alt_data_end+0xfffd8b10>
   58b2c:	1144983a 	sll	r2,r2,r5
   58b30:	003fdd06 	br	58aa8 <__alt_data_end+0xfffd8aa8>

00058b34 <__d2b>:
   58b34:	defff804 	addi	sp,sp,-32
   58b38:	dc000215 	stw	r16,8(sp)
   58b3c:	3021883a 	mov	r16,r6
   58b40:	dc400315 	stw	r17,12(sp)
   58b44:	8022907a 	slli	r17,r16,1
   58b48:	dd000615 	stw	r20,24(sp)
   58b4c:	2829883a 	mov	r20,r5
   58b50:	01400044 	movi	r5,1
   58b54:	dcc00515 	stw	r19,20(sp)
   58b58:	dc800415 	stw	r18,16(sp)
   58b5c:	dfc00715 	stw	ra,28(sp)
   58b60:	3825883a 	mov	r18,r7
   58b64:	8822d57a 	srli	r17,r17,21
   58b68:	0057de40 	call	57de4 <_Balloc>
   58b6c:	1027883a 	mov	r19,r2
   58b70:	00800434 	movhi	r2,16
   58b74:	10bfffc4 	addi	r2,r2,-1
   58b78:	808c703a 	and	r6,r16,r2
   58b7c:	88000126 	beq	r17,zero,58b84 <__d2b+0x50>
   58b80:	31800434 	orhi	r6,r6,16
   58b84:	d9800015 	stw	r6,0(sp)
   58b88:	a0002426 	beq	r20,zero,58c1c <__d2b+0xe8>
   58b8c:	d9000104 	addi	r4,sp,4
   58b90:	dd000115 	stw	r20,4(sp)
   58b94:	00581680 	call	58168 <__lo0bits>
   58b98:	d8c00017 	ldw	r3,0(sp)
   58b9c:	10002f1e 	bne	r2,zero,58c5c <__d2b+0x128>
   58ba0:	d9000117 	ldw	r4,4(sp)
   58ba4:	99000515 	stw	r4,20(r19)
   58ba8:	1821003a 	cmpeq	r16,r3,zero
   58bac:	01000084 	movi	r4,2
   58bb0:	2421c83a 	sub	r16,r4,r16
   58bb4:	98c00615 	stw	r3,24(r19)
   58bb8:	9c000415 	stw	r16,16(r19)
   58bbc:	88001f1e 	bne	r17,zero,58c3c <__d2b+0x108>
   58bc0:	10bef384 	addi	r2,r2,-1074
   58bc4:	90800015 	stw	r2,0(r18)
   58bc8:	00900034 	movhi	r2,16384
   58bcc:	10bfffc4 	addi	r2,r2,-1
   58bd0:	8085883a 	add	r2,r16,r2
   58bd4:	1085883a 	add	r2,r2,r2
   58bd8:	1085883a 	add	r2,r2,r2
   58bdc:	9885883a 	add	r2,r19,r2
   58be0:	11000517 	ldw	r4,20(r2)
   58be4:	8020917a 	slli	r16,r16,5
   58be8:	00581000 	call	58100 <__hi0bits>
   58bec:	d8c00817 	ldw	r3,32(sp)
   58bf0:	8085c83a 	sub	r2,r16,r2
   58bf4:	18800015 	stw	r2,0(r3)
   58bf8:	9805883a 	mov	r2,r19
   58bfc:	dfc00717 	ldw	ra,28(sp)
   58c00:	dd000617 	ldw	r20,24(sp)
   58c04:	dcc00517 	ldw	r19,20(sp)
   58c08:	dc800417 	ldw	r18,16(sp)
   58c0c:	dc400317 	ldw	r17,12(sp)
   58c10:	dc000217 	ldw	r16,8(sp)
   58c14:	dec00804 	addi	sp,sp,32
   58c18:	f800283a 	ret
   58c1c:	d809883a 	mov	r4,sp
   58c20:	00581680 	call	58168 <__lo0bits>
   58c24:	d8c00017 	ldw	r3,0(sp)
   58c28:	04000044 	movi	r16,1
   58c2c:	9c000415 	stw	r16,16(r19)
   58c30:	98c00515 	stw	r3,20(r19)
   58c34:	10800804 	addi	r2,r2,32
   58c38:	883fe126 	beq	r17,zero,58bc0 <__alt_data_end+0xfffd8bc0>
   58c3c:	00c00d44 	movi	r3,53
   58c40:	8c7ef344 	addi	r17,r17,-1075
   58c44:	88a3883a 	add	r17,r17,r2
   58c48:	1885c83a 	sub	r2,r3,r2
   58c4c:	d8c00817 	ldw	r3,32(sp)
   58c50:	94400015 	stw	r17,0(r18)
   58c54:	18800015 	stw	r2,0(r3)
   58c58:	003fe706 	br	58bf8 <__alt_data_end+0xfffd8bf8>
   58c5c:	01000804 	movi	r4,32
   58c60:	2089c83a 	sub	r4,r4,r2
   58c64:	1908983a 	sll	r4,r3,r4
   58c68:	d9400117 	ldw	r5,4(sp)
   58c6c:	1886d83a 	srl	r3,r3,r2
   58c70:	2148b03a 	or	r4,r4,r5
   58c74:	99000515 	stw	r4,20(r19)
   58c78:	d8c00015 	stw	r3,0(sp)
   58c7c:	003fca06 	br	58ba8 <__alt_data_end+0xfffd8ba8>

00058c80 <__ratio>:
   58c80:	defff904 	addi	sp,sp,-28
   58c84:	dc400315 	stw	r17,12(sp)
   58c88:	2823883a 	mov	r17,r5
   58c8c:	d9400104 	addi	r5,sp,4
   58c90:	dfc00615 	stw	ra,24(sp)
   58c94:	dcc00515 	stw	r19,20(sp)
   58c98:	dc800415 	stw	r18,16(sp)
   58c9c:	2027883a 	mov	r19,r4
   58ca0:	dc000215 	stw	r16,8(sp)
   58ca4:	0058a280 	call	58a28 <__b2d>
   58ca8:	d80b883a 	mov	r5,sp
   58cac:	8809883a 	mov	r4,r17
   58cb0:	1025883a 	mov	r18,r2
   58cb4:	1821883a 	mov	r16,r3
   58cb8:	0058a280 	call	58a28 <__b2d>
   58cbc:	8a000417 	ldw	r8,16(r17)
   58cc0:	99000417 	ldw	r4,16(r19)
   58cc4:	d9400117 	ldw	r5,4(sp)
   58cc8:	2209c83a 	sub	r4,r4,r8
   58ccc:	2010917a 	slli	r8,r4,5
   58cd0:	d9000017 	ldw	r4,0(sp)
   58cd4:	2909c83a 	sub	r4,r5,r4
   58cd8:	4109883a 	add	r4,r8,r4
   58cdc:	01000e0e 	bge	zero,r4,58d18 <__ratio+0x98>
   58ce0:	2008953a 	slli	r4,r4,20
   58ce4:	2421883a 	add	r16,r4,r16
   58ce8:	100d883a 	mov	r6,r2
   58cec:	180f883a 	mov	r7,r3
   58cf0:	9009883a 	mov	r4,r18
   58cf4:	800b883a 	mov	r5,r16
   58cf8:	005e1380 	call	5e138 <__divdf3>
   58cfc:	dfc00617 	ldw	ra,24(sp)
   58d00:	dcc00517 	ldw	r19,20(sp)
   58d04:	dc800417 	ldw	r18,16(sp)
   58d08:	dc400317 	ldw	r17,12(sp)
   58d0c:	dc000217 	ldw	r16,8(sp)
   58d10:	dec00704 	addi	sp,sp,28
   58d14:	f800283a 	ret
   58d18:	2008953a 	slli	r4,r4,20
   58d1c:	1907c83a 	sub	r3,r3,r4
   58d20:	003ff106 	br	58ce8 <__alt_data_end+0xfffd8ce8>

00058d24 <_mprec_log10>:
   58d24:	defffe04 	addi	sp,sp,-8
   58d28:	dc000015 	stw	r16,0(sp)
   58d2c:	dfc00115 	stw	ra,4(sp)
   58d30:	008005c4 	movi	r2,23
   58d34:	2021883a 	mov	r16,r4
   58d38:	11000d0e 	bge	r2,r4,58d70 <_mprec_log10+0x4c>
   58d3c:	0005883a 	mov	r2,zero
   58d40:	00cffc34 	movhi	r3,16368
   58d44:	843fffc4 	addi	r16,r16,-1
   58d48:	000d883a 	mov	r6,zero
   58d4c:	01d00934 	movhi	r7,16420
   58d50:	1009883a 	mov	r4,r2
   58d54:	180b883a 	mov	r5,r3
   58d58:	005ed600 	call	5ed60 <__muldf3>
   58d5c:	803ff91e 	bne	r16,zero,58d44 <__alt_data_end+0xfffd8d44>
   58d60:	dfc00117 	ldw	ra,4(sp)
   58d64:	dc000017 	ldw	r16,0(sp)
   58d68:	dec00204 	addi	sp,sp,8
   58d6c:	f800283a 	ret
   58d70:	202090fa 	slli	r16,r4,3
   58d74:	008001f4 	movhi	r2,7
   58d78:	10aeaf04 	addi	r2,r2,-17732
   58d7c:	1421883a 	add	r16,r2,r16
   58d80:	80800017 	ldw	r2,0(r16)
   58d84:	80c00117 	ldw	r3,4(r16)
   58d88:	dfc00117 	ldw	ra,4(sp)
   58d8c:	dc000017 	ldw	r16,0(sp)
   58d90:	dec00204 	addi	sp,sp,8
   58d94:	f800283a 	ret

00058d98 <__copybits>:
   58d98:	297fffc4 	addi	r5,r5,-1
   58d9c:	280fd17a 	srai	r7,r5,5
   58da0:	30c00417 	ldw	r3,16(r6)
   58da4:	30800504 	addi	r2,r6,20
   58da8:	39c00044 	addi	r7,r7,1
   58dac:	18c7883a 	add	r3,r3,r3
   58db0:	39cf883a 	add	r7,r7,r7
   58db4:	18c7883a 	add	r3,r3,r3
   58db8:	39cf883a 	add	r7,r7,r7
   58dbc:	10c7883a 	add	r3,r2,r3
   58dc0:	21cf883a 	add	r7,r4,r7
   58dc4:	10c00d2e 	bgeu	r2,r3,58dfc <__copybits+0x64>
   58dc8:	200b883a 	mov	r5,r4
   58dcc:	12000017 	ldw	r8,0(r2)
   58dd0:	29400104 	addi	r5,r5,4
   58dd4:	10800104 	addi	r2,r2,4
   58dd8:	2a3fff15 	stw	r8,-4(r5)
   58ddc:	10fffb36 	bltu	r2,r3,58dcc <__alt_data_end+0xfffd8dcc>
   58de0:	1985c83a 	sub	r2,r3,r6
   58de4:	10bffac4 	addi	r2,r2,-21
   58de8:	1004d0ba 	srli	r2,r2,2
   58dec:	10800044 	addi	r2,r2,1
   58df0:	1085883a 	add	r2,r2,r2
   58df4:	1085883a 	add	r2,r2,r2
   58df8:	2089883a 	add	r4,r4,r2
   58dfc:	21c0032e 	bgeu	r4,r7,58e0c <__copybits+0x74>
   58e00:	20000015 	stw	zero,0(r4)
   58e04:	21000104 	addi	r4,r4,4
   58e08:	21fffd36 	bltu	r4,r7,58e00 <__alt_data_end+0xfffd8e00>
   58e0c:	f800283a 	ret

00058e10 <__any_on>:
   58e10:	20c00417 	ldw	r3,16(r4)
   58e14:	2805d17a 	srai	r2,r5,5
   58e18:	21000504 	addi	r4,r4,20
   58e1c:	18800d0e 	bge	r3,r2,58e54 <__any_on+0x44>
   58e20:	18c7883a 	add	r3,r3,r3
   58e24:	18c7883a 	add	r3,r3,r3
   58e28:	20c7883a 	add	r3,r4,r3
   58e2c:	20c0192e 	bgeu	r4,r3,58e94 <__any_on+0x84>
   58e30:	18bfff17 	ldw	r2,-4(r3)
   58e34:	18ffff04 	addi	r3,r3,-4
   58e38:	1000041e 	bne	r2,zero,58e4c <__any_on+0x3c>
   58e3c:	20c0142e 	bgeu	r4,r3,58e90 <__any_on+0x80>
   58e40:	18ffff04 	addi	r3,r3,-4
   58e44:	19400017 	ldw	r5,0(r3)
   58e48:	283ffc26 	beq	r5,zero,58e3c <__alt_data_end+0xfffd8e3c>
   58e4c:	00800044 	movi	r2,1
   58e50:	f800283a 	ret
   58e54:	10c00a0e 	bge	r2,r3,58e80 <__any_on+0x70>
   58e58:	1085883a 	add	r2,r2,r2
   58e5c:	1085883a 	add	r2,r2,r2
   58e60:	294007cc 	andi	r5,r5,31
   58e64:	2087883a 	add	r3,r4,r2
   58e68:	283ff026 	beq	r5,zero,58e2c <__alt_data_end+0xfffd8e2c>
   58e6c:	19800017 	ldw	r6,0(r3)
   58e70:	3144d83a 	srl	r2,r6,r5
   58e74:	114a983a 	sll	r5,r2,r5
   58e78:	317ff41e 	bne	r6,r5,58e4c <__alt_data_end+0xfffd8e4c>
   58e7c:	003feb06 	br	58e2c <__alt_data_end+0xfffd8e2c>
   58e80:	1085883a 	add	r2,r2,r2
   58e84:	1085883a 	add	r2,r2,r2
   58e88:	2087883a 	add	r3,r4,r2
   58e8c:	003fe706 	br	58e2c <__alt_data_end+0xfffd8e2c>
   58e90:	f800283a 	ret
   58e94:	0005883a 	mov	r2,zero
   58e98:	f800283a 	ret

00058e9c <_putc_r>:
   58e9c:	defffc04 	addi	sp,sp,-16
   58ea0:	dc000215 	stw	r16,8(sp)
   58ea4:	dfc00315 	stw	ra,12(sp)
   58ea8:	2021883a 	mov	r16,r4
   58eac:	20000226 	beq	r4,zero,58eb8 <_putc_r+0x1c>
   58eb0:	20800e17 	ldw	r2,56(r4)
   58eb4:	10001b26 	beq	r2,zero,58f24 <_putc_r+0x88>
   58eb8:	30800217 	ldw	r2,8(r6)
   58ebc:	10bfffc4 	addi	r2,r2,-1
   58ec0:	30800215 	stw	r2,8(r6)
   58ec4:	10000a16 	blt	r2,zero,58ef0 <_putc_r+0x54>
   58ec8:	30800017 	ldw	r2,0(r6)
   58ecc:	11400005 	stb	r5,0(r2)
   58ed0:	30800017 	ldw	r2,0(r6)
   58ed4:	10c00044 	addi	r3,r2,1
   58ed8:	30c00015 	stw	r3,0(r6)
   58edc:	10800003 	ldbu	r2,0(r2)
   58ee0:	dfc00317 	ldw	ra,12(sp)
   58ee4:	dc000217 	ldw	r16,8(sp)
   58ee8:	dec00404 	addi	sp,sp,16
   58eec:	f800283a 	ret
   58ef0:	30c00617 	ldw	r3,24(r6)
   58ef4:	10c00616 	blt	r2,r3,58f10 <_putc_r+0x74>
   58ef8:	30800017 	ldw	r2,0(r6)
   58efc:	00c00284 	movi	r3,10
   58f00:	11400005 	stb	r5,0(r2)
   58f04:	30800017 	ldw	r2,0(r6)
   58f08:	11400003 	ldbu	r5,0(r2)
   58f0c:	28fff11e 	bne	r5,r3,58ed4 <__alt_data_end+0xfffd8ed4>
   58f10:	8009883a 	mov	r4,r16
   58f14:	dfc00317 	ldw	ra,12(sp)
   58f18:	dc000217 	ldw	r16,8(sp)
   58f1c:	dec00404 	addi	sp,sp,16
   58f20:	005c3801 	jmpi	5c380 <__swbuf_r>
   58f24:	d9400015 	stw	r5,0(sp)
   58f28:	d9800115 	stw	r6,4(sp)
   58f2c:	0056e380 	call	56e38 <__sinit>
   58f30:	d9800117 	ldw	r6,4(sp)
   58f34:	d9400017 	ldw	r5,0(sp)
   58f38:	003fdf06 	br	58eb8 <__alt_data_end+0xfffd8eb8>

00058f3c <putc>:
   58f3c:	008001f4 	movhi	r2,7
   58f40:	defffc04 	addi	sp,sp,-16
   58f44:	10bb7304 	addi	r2,r2,-4660
   58f48:	dc000115 	stw	r16,4(sp)
   58f4c:	14000017 	ldw	r16,0(r2)
   58f50:	dc400215 	stw	r17,8(sp)
   58f54:	dfc00315 	stw	ra,12(sp)
   58f58:	2023883a 	mov	r17,r4
   58f5c:	80000226 	beq	r16,zero,58f68 <putc+0x2c>
   58f60:	80800e17 	ldw	r2,56(r16)
   58f64:	10001a26 	beq	r2,zero,58fd0 <putc+0x94>
   58f68:	28800217 	ldw	r2,8(r5)
   58f6c:	10bfffc4 	addi	r2,r2,-1
   58f70:	28800215 	stw	r2,8(r5)
   58f74:	10000b16 	blt	r2,zero,58fa4 <putc+0x68>
   58f78:	28800017 	ldw	r2,0(r5)
   58f7c:	14400005 	stb	r17,0(r2)
   58f80:	28800017 	ldw	r2,0(r5)
   58f84:	10c00044 	addi	r3,r2,1
   58f88:	28c00015 	stw	r3,0(r5)
   58f8c:	10800003 	ldbu	r2,0(r2)
   58f90:	dfc00317 	ldw	ra,12(sp)
   58f94:	dc400217 	ldw	r17,8(sp)
   58f98:	dc000117 	ldw	r16,4(sp)
   58f9c:	dec00404 	addi	sp,sp,16
   58fa0:	f800283a 	ret
   58fa4:	28c00617 	ldw	r3,24(r5)
   58fa8:	10c00e16 	blt	r2,r3,58fe4 <putc+0xa8>
   58fac:	28800017 	ldw	r2,0(r5)
   58fb0:	01000284 	movi	r4,10
   58fb4:	14400005 	stb	r17,0(r2)
   58fb8:	28800017 	ldw	r2,0(r5)
   58fbc:	10c00003 	ldbu	r3,0(r2)
   58fc0:	193ff01e 	bne	r3,r4,58f84 <__alt_data_end+0xfffd8f84>
   58fc4:	280d883a 	mov	r6,r5
   58fc8:	180b883a 	mov	r5,r3
   58fcc:	00000706 	br	58fec <putc+0xb0>
   58fd0:	8009883a 	mov	r4,r16
   58fd4:	d9400015 	stw	r5,0(sp)
   58fd8:	0056e380 	call	56e38 <__sinit>
   58fdc:	d9400017 	ldw	r5,0(sp)
   58fe0:	003fe106 	br	58f68 <__alt_data_end+0xfffd8f68>
   58fe4:	280d883a 	mov	r6,r5
   58fe8:	880b883a 	mov	r5,r17
   58fec:	8009883a 	mov	r4,r16
   58ff0:	dfc00317 	ldw	ra,12(sp)
   58ff4:	dc400217 	ldw	r17,8(sp)
   58ff8:	dc000117 	ldw	r16,4(sp)
   58ffc:	dec00404 	addi	sp,sp,16
   59000:	005c3801 	jmpi	5c380 <__swbuf_r>

00059004 <_realloc_r>:
   59004:	defff604 	addi	sp,sp,-40
   59008:	dc800215 	stw	r18,8(sp)
   5900c:	dfc00915 	stw	ra,36(sp)
   59010:	df000815 	stw	fp,32(sp)
   59014:	ddc00715 	stw	r23,28(sp)
   59018:	dd800615 	stw	r22,24(sp)
   5901c:	dd400515 	stw	r21,20(sp)
   59020:	dd000415 	stw	r20,16(sp)
   59024:	dcc00315 	stw	r19,12(sp)
   59028:	dc400115 	stw	r17,4(sp)
   5902c:	dc000015 	stw	r16,0(sp)
   59030:	3025883a 	mov	r18,r6
   59034:	2800b726 	beq	r5,zero,59314 <_realloc_r+0x310>
   59038:	282b883a 	mov	r21,r5
   5903c:	2029883a 	mov	r20,r4
   59040:	00608280 	call	60828 <__malloc_lock>
   59044:	a8bfff17 	ldw	r2,-4(r21)
   59048:	043fff04 	movi	r16,-4
   5904c:	90c002c4 	addi	r3,r18,11
   59050:	01000584 	movi	r4,22
   59054:	acfffe04 	addi	r19,r21,-8
   59058:	1420703a 	and	r16,r2,r16
   5905c:	20c0332e 	bgeu	r4,r3,5912c <_realloc_r+0x128>
   59060:	047ffe04 	movi	r17,-8
   59064:	1c62703a 	and	r17,r3,r17
   59068:	8807883a 	mov	r3,r17
   5906c:	88005816 	blt	r17,zero,591d0 <_realloc_r+0x1cc>
   59070:	8c805736 	bltu	r17,r18,591d0 <_realloc_r+0x1cc>
   59074:	80c0300e 	bge	r16,r3,59138 <_realloc_r+0x134>
   59078:	070001f4 	movhi	fp,7
   5907c:	e7301204 	addi	fp,fp,-16312
   59080:	e1c00217 	ldw	r7,8(fp)
   59084:	9c09883a 	add	r4,r19,r16
   59088:	22000117 	ldw	r8,4(r4)
   5908c:	21c06326 	beq	r4,r7,5921c <_realloc_r+0x218>
   59090:	017fff84 	movi	r5,-2
   59094:	414a703a 	and	r5,r8,r5
   59098:	214b883a 	add	r5,r4,r5
   5909c:	29800117 	ldw	r6,4(r5)
   590a0:	3180004c 	andi	r6,r6,1
   590a4:	30003f26 	beq	r6,zero,591a4 <_realloc_r+0x1a0>
   590a8:	1080004c 	andi	r2,r2,1
   590ac:	10008326 	beq	r2,zero,592bc <_realloc_r+0x2b8>
   590b0:	900b883a 	mov	r5,r18
   590b4:	a009883a 	mov	r4,r20
   590b8:	004f6480 	call	4f648 <_malloc_r>
   590bc:	1025883a 	mov	r18,r2
   590c0:	10011e26 	beq	r2,zero,5953c <_realloc_r+0x538>
   590c4:	a93fff17 	ldw	r4,-4(r21)
   590c8:	10fffe04 	addi	r3,r2,-8
   590cc:	00bfff84 	movi	r2,-2
   590d0:	2084703a 	and	r2,r4,r2
   590d4:	9885883a 	add	r2,r19,r2
   590d8:	1880ee26 	beq	r3,r2,59494 <_realloc_r+0x490>
   590dc:	81bfff04 	addi	r6,r16,-4
   590e0:	00800904 	movi	r2,36
   590e4:	1180b836 	bltu	r2,r6,593c8 <_realloc_r+0x3c4>
   590e8:	00c004c4 	movi	r3,19
   590ec:	19809636 	bltu	r3,r6,59348 <_realloc_r+0x344>
   590f0:	9005883a 	mov	r2,r18
   590f4:	a807883a 	mov	r3,r21
   590f8:	19000017 	ldw	r4,0(r3)
   590fc:	11000015 	stw	r4,0(r2)
   59100:	19000117 	ldw	r4,4(r3)
   59104:	11000115 	stw	r4,4(r2)
   59108:	18c00217 	ldw	r3,8(r3)
   5910c:	10c00215 	stw	r3,8(r2)
   59110:	a80b883a 	mov	r5,r21
   59114:	a009883a 	mov	r4,r20
   59118:	0056fac0 	call	56fac <_free_r>
   5911c:	a009883a 	mov	r4,r20
   59120:	006084c0 	call	6084c <__malloc_unlock>
   59124:	9005883a 	mov	r2,r18
   59128:	00001206 	br	59174 <_realloc_r+0x170>
   5912c:	00c00404 	movi	r3,16
   59130:	1823883a 	mov	r17,r3
   59134:	003fce06 	br	59070 <__alt_data_end+0xfffd9070>
   59138:	a825883a 	mov	r18,r21
   5913c:	8445c83a 	sub	r2,r16,r17
   59140:	00c003c4 	movi	r3,15
   59144:	18802636 	bltu	r3,r2,591e0 <_realloc_r+0x1dc>
   59148:	99800117 	ldw	r6,4(r19)
   5914c:	9c07883a 	add	r3,r19,r16
   59150:	3180004c 	andi	r6,r6,1
   59154:	3420b03a 	or	r16,r6,r16
   59158:	9c000115 	stw	r16,4(r19)
   5915c:	18800117 	ldw	r2,4(r3)
   59160:	10800054 	ori	r2,r2,1
   59164:	18800115 	stw	r2,4(r3)
   59168:	a009883a 	mov	r4,r20
   5916c:	006084c0 	call	6084c <__malloc_unlock>
   59170:	9005883a 	mov	r2,r18
   59174:	dfc00917 	ldw	ra,36(sp)
   59178:	df000817 	ldw	fp,32(sp)
   5917c:	ddc00717 	ldw	r23,28(sp)
   59180:	dd800617 	ldw	r22,24(sp)
   59184:	dd400517 	ldw	r21,20(sp)
   59188:	dd000417 	ldw	r20,16(sp)
   5918c:	dcc00317 	ldw	r19,12(sp)
   59190:	dc800217 	ldw	r18,8(sp)
   59194:	dc400117 	ldw	r17,4(sp)
   59198:	dc000017 	ldw	r16,0(sp)
   5919c:	dec00a04 	addi	sp,sp,40
   591a0:	f800283a 	ret
   591a4:	017fff04 	movi	r5,-4
   591a8:	414a703a 	and	r5,r8,r5
   591ac:	814d883a 	add	r6,r16,r5
   591b0:	30c01f16 	blt	r6,r3,59230 <_realloc_r+0x22c>
   591b4:	20800317 	ldw	r2,12(r4)
   591b8:	20c00217 	ldw	r3,8(r4)
   591bc:	a825883a 	mov	r18,r21
   591c0:	3021883a 	mov	r16,r6
   591c4:	18800315 	stw	r2,12(r3)
   591c8:	10c00215 	stw	r3,8(r2)
   591cc:	003fdb06 	br	5913c <__alt_data_end+0xfffd913c>
   591d0:	00800304 	movi	r2,12
   591d4:	a0800015 	stw	r2,0(r20)
   591d8:	0005883a 	mov	r2,zero
   591dc:	003fe506 	br	59174 <__alt_data_end+0xfffd9174>
   591e0:	98c00117 	ldw	r3,4(r19)
   591e4:	9c4b883a 	add	r5,r19,r17
   591e8:	11000054 	ori	r4,r2,1
   591ec:	18c0004c 	andi	r3,r3,1
   591f0:	1c62b03a 	or	r17,r3,r17
   591f4:	9c400115 	stw	r17,4(r19)
   591f8:	29000115 	stw	r4,4(r5)
   591fc:	2885883a 	add	r2,r5,r2
   59200:	10c00117 	ldw	r3,4(r2)
   59204:	29400204 	addi	r5,r5,8
   59208:	a009883a 	mov	r4,r20
   5920c:	18c00054 	ori	r3,r3,1
   59210:	10c00115 	stw	r3,4(r2)
   59214:	0056fac0 	call	56fac <_free_r>
   59218:	003fd306 	br	59168 <__alt_data_end+0xfffd9168>
   5921c:	017fff04 	movi	r5,-4
   59220:	414a703a 	and	r5,r8,r5
   59224:	89800404 	addi	r6,r17,16
   59228:	8151883a 	add	r8,r16,r5
   5922c:	4180590e 	bge	r8,r6,59394 <_realloc_r+0x390>
   59230:	1080004c 	andi	r2,r2,1
   59234:	103f9e1e 	bne	r2,zero,590b0 <__alt_data_end+0xfffd90b0>
   59238:	adbffe17 	ldw	r22,-8(r21)
   5923c:	00bfff04 	movi	r2,-4
   59240:	9dadc83a 	sub	r22,r19,r22
   59244:	b1800117 	ldw	r6,4(r22)
   59248:	3084703a 	and	r2,r6,r2
   5924c:	20002026 	beq	r4,zero,592d0 <_realloc_r+0x2cc>
   59250:	80af883a 	add	r23,r16,r2
   59254:	b96f883a 	add	r23,r23,r5
   59258:	21c05f26 	beq	r4,r7,593d8 <_realloc_r+0x3d4>
   5925c:	b8c01c16 	blt	r23,r3,592d0 <_realloc_r+0x2cc>
   59260:	20800317 	ldw	r2,12(r4)
   59264:	20c00217 	ldw	r3,8(r4)
   59268:	81bfff04 	addi	r6,r16,-4
   5926c:	01000904 	movi	r4,36
   59270:	18800315 	stw	r2,12(r3)
   59274:	10c00215 	stw	r3,8(r2)
   59278:	b0c00217 	ldw	r3,8(r22)
   5927c:	b0800317 	ldw	r2,12(r22)
   59280:	b4800204 	addi	r18,r22,8
   59284:	18800315 	stw	r2,12(r3)
   59288:	10c00215 	stw	r3,8(r2)
   5928c:	21801b36 	bltu	r4,r6,592fc <_realloc_r+0x2f8>
   59290:	008004c4 	movi	r2,19
   59294:	1180352e 	bgeu	r2,r6,5936c <_realloc_r+0x368>
   59298:	a8800017 	ldw	r2,0(r21)
   5929c:	b0800215 	stw	r2,8(r22)
   592a0:	a8800117 	ldw	r2,4(r21)
   592a4:	b0800315 	stw	r2,12(r22)
   592a8:	008006c4 	movi	r2,27
   592ac:	11807f36 	bltu	r2,r6,594ac <_realloc_r+0x4a8>
   592b0:	b0800404 	addi	r2,r22,16
   592b4:	ad400204 	addi	r21,r21,8
   592b8:	00002d06 	br	59370 <_realloc_r+0x36c>
   592bc:	adbffe17 	ldw	r22,-8(r21)
   592c0:	00bfff04 	movi	r2,-4
   592c4:	9dadc83a 	sub	r22,r19,r22
   592c8:	b1000117 	ldw	r4,4(r22)
   592cc:	2084703a 	and	r2,r4,r2
   592d0:	b03f7726 	beq	r22,zero,590b0 <__alt_data_end+0xfffd90b0>
   592d4:	80af883a 	add	r23,r16,r2
   592d8:	b8ff7516 	blt	r23,r3,590b0 <__alt_data_end+0xfffd90b0>
   592dc:	b0800317 	ldw	r2,12(r22)
   592e0:	b0c00217 	ldw	r3,8(r22)
   592e4:	81bfff04 	addi	r6,r16,-4
   592e8:	01000904 	movi	r4,36
   592ec:	18800315 	stw	r2,12(r3)
   592f0:	10c00215 	stw	r3,8(r2)
   592f4:	b4800204 	addi	r18,r22,8
   592f8:	21bfe52e 	bgeu	r4,r6,59290 <__alt_data_end+0xfffd9290>
   592fc:	a80b883a 	mov	r5,r21
   59300:	9009883a 	mov	r4,r18
   59304:	0057c880 	call	57c88 <memmove>
   59308:	b821883a 	mov	r16,r23
   5930c:	b027883a 	mov	r19,r22
   59310:	003f8a06 	br	5913c <__alt_data_end+0xfffd913c>
   59314:	300b883a 	mov	r5,r6
   59318:	dfc00917 	ldw	ra,36(sp)
   5931c:	df000817 	ldw	fp,32(sp)
   59320:	ddc00717 	ldw	r23,28(sp)
   59324:	dd800617 	ldw	r22,24(sp)
   59328:	dd400517 	ldw	r21,20(sp)
   5932c:	dd000417 	ldw	r20,16(sp)
   59330:	dcc00317 	ldw	r19,12(sp)
   59334:	dc800217 	ldw	r18,8(sp)
   59338:	dc400117 	ldw	r17,4(sp)
   5933c:	dc000017 	ldw	r16,0(sp)
   59340:	dec00a04 	addi	sp,sp,40
   59344:	004f6481 	jmpi	4f648 <_malloc_r>
   59348:	a8c00017 	ldw	r3,0(r21)
   5934c:	90c00015 	stw	r3,0(r18)
   59350:	a8c00117 	ldw	r3,4(r21)
   59354:	90c00115 	stw	r3,4(r18)
   59358:	00c006c4 	movi	r3,27
   5935c:	19804536 	bltu	r3,r6,59474 <_realloc_r+0x470>
   59360:	90800204 	addi	r2,r18,8
   59364:	a8c00204 	addi	r3,r21,8
   59368:	003f6306 	br	590f8 <__alt_data_end+0xfffd90f8>
   5936c:	9005883a 	mov	r2,r18
   59370:	a8c00017 	ldw	r3,0(r21)
   59374:	b821883a 	mov	r16,r23
   59378:	b027883a 	mov	r19,r22
   5937c:	10c00015 	stw	r3,0(r2)
   59380:	a8c00117 	ldw	r3,4(r21)
   59384:	10c00115 	stw	r3,4(r2)
   59388:	a8c00217 	ldw	r3,8(r21)
   5938c:	10c00215 	stw	r3,8(r2)
   59390:	003f6a06 	br	5913c <__alt_data_end+0xfffd913c>
   59394:	9c67883a 	add	r19,r19,r17
   59398:	4445c83a 	sub	r2,r8,r17
   5939c:	e4c00215 	stw	r19,8(fp)
   593a0:	10800054 	ori	r2,r2,1
   593a4:	98800115 	stw	r2,4(r19)
   593a8:	a8bfff17 	ldw	r2,-4(r21)
   593ac:	a009883a 	mov	r4,r20
   593b0:	1080004c 	andi	r2,r2,1
   593b4:	1462b03a 	or	r17,r2,r17
   593b8:	ac7fff15 	stw	r17,-4(r21)
   593bc:	006084c0 	call	6084c <__malloc_unlock>
   593c0:	a805883a 	mov	r2,r21
   593c4:	003f6b06 	br	59174 <__alt_data_end+0xfffd9174>
   593c8:	a80b883a 	mov	r5,r21
   593cc:	9009883a 	mov	r4,r18
   593d0:	0057c880 	call	57c88 <memmove>
   593d4:	003f4e06 	br	59110 <__alt_data_end+0xfffd9110>
   593d8:	89000404 	addi	r4,r17,16
   593dc:	b93fbc16 	blt	r23,r4,592d0 <__alt_data_end+0xfffd92d0>
   593e0:	b0800317 	ldw	r2,12(r22)
   593e4:	b0c00217 	ldw	r3,8(r22)
   593e8:	81bfff04 	addi	r6,r16,-4
   593ec:	01000904 	movi	r4,36
   593f0:	18800315 	stw	r2,12(r3)
   593f4:	10c00215 	stw	r3,8(r2)
   593f8:	b4800204 	addi	r18,r22,8
   593fc:	21804336 	bltu	r4,r6,5950c <_realloc_r+0x508>
   59400:	008004c4 	movi	r2,19
   59404:	11803f2e 	bgeu	r2,r6,59504 <_realloc_r+0x500>
   59408:	a8800017 	ldw	r2,0(r21)
   5940c:	b0800215 	stw	r2,8(r22)
   59410:	a8800117 	ldw	r2,4(r21)
   59414:	b0800315 	stw	r2,12(r22)
   59418:	008006c4 	movi	r2,27
   5941c:	11803f36 	bltu	r2,r6,5951c <_realloc_r+0x518>
   59420:	b0800404 	addi	r2,r22,16
   59424:	ad400204 	addi	r21,r21,8
   59428:	a8c00017 	ldw	r3,0(r21)
   5942c:	10c00015 	stw	r3,0(r2)
   59430:	a8c00117 	ldw	r3,4(r21)
   59434:	10c00115 	stw	r3,4(r2)
   59438:	a8c00217 	ldw	r3,8(r21)
   5943c:	10c00215 	stw	r3,8(r2)
   59440:	b447883a 	add	r3,r22,r17
   59444:	bc45c83a 	sub	r2,r23,r17
   59448:	e0c00215 	stw	r3,8(fp)
   5944c:	10800054 	ori	r2,r2,1
   59450:	18800115 	stw	r2,4(r3)
   59454:	b0800117 	ldw	r2,4(r22)
   59458:	a009883a 	mov	r4,r20
   5945c:	1080004c 	andi	r2,r2,1
   59460:	1462b03a 	or	r17,r2,r17
   59464:	b4400115 	stw	r17,4(r22)
   59468:	006084c0 	call	6084c <__malloc_unlock>
   5946c:	9005883a 	mov	r2,r18
   59470:	003f4006 	br	59174 <__alt_data_end+0xfffd9174>
   59474:	a8c00217 	ldw	r3,8(r21)
   59478:	90c00215 	stw	r3,8(r18)
   5947c:	a8c00317 	ldw	r3,12(r21)
   59480:	90c00315 	stw	r3,12(r18)
   59484:	30801126 	beq	r6,r2,594cc <_realloc_r+0x4c8>
   59488:	90800404 	addi	r2,r18,16
   5948c:	a8c00404 	addi	r3,r21,16
   59490:	003f1906 	br	590f8 <__alt_data_end+0xfffd90f8>
   59494:	90ffff17 	ldw	r3,-4(r18)
   59498:	00bfff04 	movi	r2,-4
   5949c:	a825883a 	mov	r18,r21
   594a0:	1884703a 	and	r2,r3,r2
   594a4:	80a1883a 	add	r16,r16,r2
   594a8:	003f2406 	br	5913c <__alt_data_end+0xfffd913c>
   594ac:	a8800217 	ldw	r2,8(r21)
   594b0:	b0800415 	stw	r2,16(r22)
   594b4:	a8800317 	ldw	r2,12(r21)
   594b8:	b0800515 	stw	r2,20(r22)
   594bc:	31000a26 	beq	r6,r4,594e8 <_realloc_r+0x4e4>
   594c0:	b0800604 	addi	r2,r22,24
   594c4:	ad400404 	addi	r21,r21,16
   594c8:	003fa906 	br	59370 <__alt_data_end+0xfffd9370>
   594cc:	a9000417 	ldw	r4,16(r21)
   594d0:	90800604 	addi	r2,r18,24
   594d4:	a8c00604 	addi	r3,r21,24
   594d8:	91000415 	stw	r4,16(r18)
   594dc:	a9000517 	ldw	r4,20(r21)
   594e0:	91000515 	stw	r4,20(r18)
   594e4:	003f0406 	br	590f8 <__alt_data_end+0xfffd90f8>
   594e8:	a8c00417 	ldw	r3,16(r21)
   594ec:	ad400604 	addi	r21,r21,24
   594f0:	b0800804 	addi	r2,r22,32
   594f4:	b0c00615 	stw	r3,24(r22)
   594f8:	a8ffff17 	ldw	r3,-4(r21)
   594fc:	b0c00715 	stw	r3,28(r22)
   59500:	003f9b06 	br	59370 <__alt_data_end+0xfffd9370>
   59504:	9005883a 	mov	r2,r18
   59508:	003fc706 	br	59428 <__alt_data_end+0xfffd9428>
   5950c:	a80b883a 	mov	r5,r21
   59510:	9009883a 	mov	r4,r18
   59514:	0057c880 	call	57c88 <memmove>
   59518:	003fc906 	br	59440 <__alt_data_end+0xfffd9440>
   5951c:	a8800217 	ldw	r2,8(r21)
   59520:	b0800415 	stw	r2,16(r22)
   59524:	a8800317 	ldw	r2,12(r21)
   59528:	b0800515 	stw	r2,20(r22)
   5952c:	31000726 	beq	r6,r4,5954c <_realloc_r+0x548>
   59530:	b0800604 	addi	r2,r22,24
   59534:	ad400404 	addi	r21,r21,16
   59538:	003fbb06 	br	59428 <__alt_data_end+0xfffd9428>
   5953c:	a009883a 	mov	r4,r20
   59540:	006084c0 	call	6084c <__malloc_unlock>
   59544:	0005883a 	mov	r2,zero
   59548:	003f0a06 	br	59174 <__alt_data_end+0xfffd9174>
   5954c:	a8c00417 	ldw	r3,16(r21)
   59550:	ad400604 	addi	r21,r21,24
   59554:	b0800804 	addi	r2,r22,32
   59558:	b0c00615 	stw	r3,24(r22)
   5955c:	a8ffff17 	ldw	r3,-4(r21)
   59560:	b0c00715 	stw	r3,28(r22)
   59564:	003fb006 	br	59428 <__alt_data_end+0xfffd9428>

00059568 <__fpclassifyd>:
   59568:	00a00034 	movhi	r2,32768
   5956c:	10bfffc4 	addi	r2,r2,-1
   59570:	2884703a 	and	r2,r5,r2
   59574:	10000726 	beq	r2,zero,59594 <__fpclassifyd+0x2c>
   59578:	00fffc34 	movhi	r3,65520
   5957c:	019ff834 	movhi	r6,32736
   59580:	28c7883a 	add	r3,r5,r3
   59584:	31bfffc4 	addi	r6,r6,-1
   59588:	30c00536 	bltu	r6,r3,595a0 <__fpclassifyd+0x38>
   5958c:	00800104 	movi	r2,4
   59590:	f800283a 	ret
   59594:	2000021e 	bne	r4,zero,595a0 <__fpclassifyd+0x38>
   59598:	00800084 	movi	r2,2
   5959c:	f800283a 	ret
   595a0:	00dffc34 	movhi	r3,32752
   595a4:	019ff834 	movhi	r6,32736
   595a8:	28cb883a 	add	r5,r5,r3
   595ac:	31bfffc4 	addi	r6,r6,-1
   595b0:	317ff62e 	bgeu	r6,r5,5958c <__alt_data_end+0xfffd958c>
   595b4:	01400434 	movhi	r5,16
   595b8:	297fffc4 	addi	r5,r5,-1
   595bc:	28800236 	bltu	r5,r2,595c8 <__fpclassifyd+0x60>
   595c0:	008000c4 	movi	r2,3
   595c4:	f800283a 	ret
   595c8:	10c00226 	beq	r2,r3,595d4 <__fpclassifyd+0x6c>
   595cc:	0005883a 	mov	r2,zero
   595d0:	f800283a 	ret
   595d4:	2005003a 	cmpeq	r2,r4,zero
   595d8:	f800283a 	ret

000595dc <__sread>:
   595dc:	defffe04 	addi	sp,sp,-8
   595e0:	dc000015 	stw	r16,0(sp)
   595e4:	2821883a 	mov	r16,r5
   595e8:	2940038f 	ldh	r5,14(r5)
   595ec:	dfc00115 	stw	ra,4(sp)
   595f0:	005ca840 	call	5ca84 <_read_r>
   595f4:	10000716 	blt	r2,zero,59614 <__sread+0x38>
   595f8:	80c01417 	ldw	r3,80(r16)
   595fc:	1887883a 	add	r3,r3,r2
   59600:	80c01415 	stw	r3,80(r16)
   59604:	dfc00117 	ldw	ra,4(sp)
   59608:	dc000017 	ldw	r16,0(sp)
   5960c:	dec00204 	addi	sp,sp,8
   59610:	f800283a 	ret
   59614:	80c0030b 	ldhu	r3,12(r16)
   59618:	18fbffcc 	andi	r3,r3,61439
   5961c:	80c0030d 	sth	r3,12(r16)
   59620:	dfc00117 	ldw	ra,4(sp)
   59624:	dc000017 	ldw	r16,0(sp)
   59628:	dec00204 	addi	sp,sp,8
   5962c:	f800283a 	ret

00059630 <__seofread>:
   59630:	0005883a 	mov	r2,zero
   59634:	f800283a 	ret

00059638 <__swrite>:
   59638:	2880030b 	ldhu	r2,12(r5)
   5963c:	defffb04 	addi	sp,sp,-20
   59640:	dcc00315 	stw	r19,12(sp)
   59644:	dc800215 	stw	r18,8(sp)
   59648:	dc400115 	stw	r17,4(sp)
   5964c:	dc000015 	stw	r16,0(sp)
   59650:	dfc00415 	stw	ra,16(sp)
   59654:	10c0400c 	andi	r3,r2,256
   59658:	2821883a 	mov	r16,r5
   5965c:	2023883a 	mov	r17,r4
   59660:	3025883a 	mov	r18,r6
   59664:	3827883a 	mov	r19,r7
   59668:	18000526 	beq	r3,zero,59680 <__swrite+0x48>
   5966c:	2940038f 	ldh	r5,14(r5)
   59670:	01c00084 	movi	r7,2
   59674:	000d883a 	mov	r6,zero
   59678:	005ca240 	call	5ca24 <_lseek_r>
   5967c:	8080030b 	ldhu	r2,12(r16)
   59680:	8140038f 	ldh	r5,14(r16)
   59684:	10bbffcc 	andi	r2,r2,61439
   59688:	980f883a 	mov	r7,r19
   5968c:	900d883a 	mov	r6,r18
   59690:	8809883a 	mov	r4,r17
   59694:	8080030d 	sth	r2,12(r16)
   59698:	dfc00417 	ldw	ra,16(sp)
   5969c:	dcc00317 	ldw	r19,12(sp)
   596a0:	dc800217 	ldw	r18,8(sp)
   596a4:	dc400117 	ldw	r17,4(sp)
   596a8:	dc000017 	ldw	r16,0(sp)
   596ac:	dec00504 	addi	sp,sp,20
   596b0:	005c4d81 	jmpi	5c4d8 <_write_r>

000596b4 <__sseek>:
   596b4:	defffe04 	addi	sp,sp,-8
   596b8:	dc000015 	stw	r16,0(sp)
   596bc:	2821883a 	mov	r16,r5
   596c0:	2940038f 	ldh	r5,14(r5)
   596c4:	dfc00115 	stw	ra,4(sp)
   596c8:	005ca240 	call	5ca24 <_lseek_r>
   596cc:	00ffffc4 	movi	r3,-1
   596d0:	10c00826 	beq	r2,r3,596f4 <__sseek+0x40>
   596d4:	80c0030b 	ldhu	r3,12(r16)
   596d8:	80801415 	stw	r2,80(r16)
   596dc:	18c40014 	ori	r3,r3,4096
   596e0:	80c0030d 	sth	r3,12(r16)
   596e4:	dfc00117 	ldw	ra,4(sp)
   596e8:	dc000017 	ldw	r16,0(sp)
   596ec:	dec00204 	addi	sp,sp,8
   596f0:	f800283a 	ret
   596f4:	80c0030b 	ldhu	r3,12(r16)
   596f8:	18fbffcc 	andi	r3,r3,61439
   596fc:	80c0030d 	sth	r3,12(r16)
   59700:	dfc00117 	ldw	ra,4(sp)
   59704:	dc000017 	ldw	r16,0(sp)
   59708:	dec00204 	addi	sp,sp,8
   5970c:	f800283a 	ret

00059710 <__sclose>:
   59710:	2940038f 	ldh	r5,14(r5)
   59714:	005c5381 	jmpi	5c538 <_close_r>

00059718 <__ssprint_r>:
   59718:	30800217 	ldw	r2,8(r6)
   5971c:	defff604 	addi	sp,sp,-40
   59720:	dc800215 	stw	r18,8(sp)
   59724:	dfc00915 	stw	ra,36(sp)
   59728:	df000815 	stw	fp,32(sp)
   5972c:	ddc00715 	stw	r23,28(sp)
   59730:	dd800615 	stw	r22,24(sp)
   59734:	dd400515 	stw	r21,20(sp)
   59738:	dd000415 	stw	r20,16(sp)
   5973c:	dcc00315 	stw	r19,12(sp)
   59740:	dc400115 	stw	r17,4(sp)
   59744:	dc000015 	stw	r16,0(sp)
   59748:	3025883a 	mov	r18,r6
   5974c:	10005826 	beq	r2,zero,598b0 <__ssprint_r+0x198>
   59750:	2027883a 	mov	r19,r4
   59754:	35c00017 	ldw	r23,0(r6)
   59758:	29000017 	ldw	r4,0(r5)
   5975c:	28800217 	ldw	r2,8(r5)
   59760:	2823883a 	mov	r17,r5
   59764:	0039883a 	mov	fp,zero
   59768:	0021883a 	mov	r16,zero
   5976c:	80003926 	beq	r16,zero,59854 <__ssprint_r+0x13c>
   59770:	102b883a 	mov	r21,r2
   59774:	102d883a 	mov	r22,r2
   59778:	80803a36 	bltu	r16,r2,59864 <__ssprint_r+0x14c>
   5977c:	88c0030b 	ldhu	r3,12(r17)
   59780:	1881200c 	andi	r2,r3,1152
   59784:	10002626 	beq	r2,zero,59820 <__ssprint_r+0x108>
   59788:	88800517 	ldw	r2,20(r17)
   5978c:	89400417 	ldw	r5,16(r17)
   59790:	81800044 	addi	r6,r16,1
   59794:	108f883a 	add	r7,r2,r2
   59798:	3885883a 	add	r2,r7,r2
   5979c:	100ed7fa 	srli	r7,r2,31
   597a0:	216dc83a 	sub	r22,r4,r5
   597a4:	3589883a 	add	r4,r6,r22
   597a8:	3885883a 	add	r2,r7,r2
   597ac:	102bd07a 	srai	r21,r2,1
   597b0:	a80d883a 	mov	r6,r21
   597b4:	a900022e 	bgeu	r21,r4,597c0 <__ssprint_r+0xa8>
   597b8:	202b883a 	mov	r21,r4
   597bc:	200d883a 	mov	r6,r4
   597c0:	18c1000c 	andi	r3,r3,1024
   597c4:	18002a26 	beq	r3,zero,59870 <__ssprint_r+0x158>
   597c8:	300b883a 	mov	r5,r6
   597cc:	9809883a 	mov	r4,r19
   597d0:	004f6480 	call	4f648 <_malloc_r>
   597d4:	1029883a 	mov	r20,r2
   597d8:	10002c26 	beq	r2,zero,5988c <__ssprint_r+0x174>
   597dc:	89400417 	ldw	r5,16(r17)
   597e0:	b00d883a 	mov	r6,r22
   597e4:	1009883a 	mov	r4,r2
   597e8:	004fe540 	call	4fe54 <memcpy>
   597ec:	8880030b 	ldhu	r2,12(r17)
   597f0:	00fedfc4 	movi	r3,-1153
   597f4:	10c4703a 	and	r2,r2,r3
   597f8:	10802014 	ori	r2,r2,128
   597fc:	8880030d 	sth	r2,12(r17)
   59800:	a589883a 	add	r4,r20,r22
   59804:	adadc83a 	sub	r22,r21,r22
   59808:	8d400515 	stw	r21,20(r17)
   5980c:	8d800215 	stw	r22,8(r17)
   59810:	8d000415 	stw	r20,16(r17)
   59814:	89000015 	stw	r4,0(r17)
   59818:	802b883a 	mov	r21,r16
   5981c:	802d883a 	mov	r22,r16
   59820:	b00d883a 	mov	r6,r22
   59824:	e00b883a 	mov	r5,fp
   59828:	0057c880 	call	57c88 <memmove>
   5982c:	88800217 	ldw	r2,8(r17)
   59830:	89000017 	ldw	r4,0(r17)
   59834:	90c00217 	ldw	r3,8(r18)
   59838:	1545c83a 	sub	r2,r2,r21
   5983c:	2589883a 	add	r4,r4,r22
   59840:	88800215 	stw	r2,8(r17)
   59844:	89000015 	stw	r4,0(r17)
   59848:	1c21c83a 	sub	r16,r3,r16
   5984c:	94000215 	stw	r16,8(r18)
   59850:	80001726 	beq	r16,zero,598b0 <__ssprint_r+0x198>
   59854:	bf000017 	ldw	fp,0(r23)
   59858:	bc000117 	ldw	r16,4(r23)
   5985c:	bdc00204 	addi	r23,r23,8
   59860:	003fc206 	br	5976c <__alt_data_end+0xfffd976c>
   59864:	802b883a 	mov	r21,r16
   59868:	802d883a 	mov	r22,r16
   5986c:	003fec06 	br	59820 <__alt_data_end+0xfffd9820>
   59870:	9809883a 	mov	r4,r19
   59874:	00590040 	call	59004 <_realloc_r>
   59878:	1029883a 	mov	r20,r2
   5987c:	103fe01e 	bne	r2,zero,59800 <__alt_data_end+0xfffd9800>
   59880:	89400417 	ldw	r5,16(r17)
   59884:	9809883a 	mov	r4,r19
   59888:	0056fac0 	call	56fac <_free_r>
   5988c:	88c0030b 	ldhu	r3,12(r17)
   59890:	00800304 	movi	r2,12
   59894:	98800015 	stw	r2,0(r19)
   59898:	18c01014 	ori	r3,r3,64
   5989c:	88c0030d 	sth	r3,12(r17)
   598a0:	00bfffc4 	movi	r2,-1
   598a4:	90000215 	stw	zero,8(r18)
   598a8:	90000115 	stw	zero,4(r18)
   598ac:	00000206 	br	598b8 <__ssprint_r+0x1a0>
   598b0:	90000115 	stw	zero,4(r18)
   598b4:	0005883a 	mov	r2,zero
   598b8:	dfc00917 	ldw	ra,36(sp)
   598bc:	df000817 	ldw	fp,32(sp)
   598c0:	ddc00717 	ldw	r23,28(sp)
   598c4:	dd800617 	ldw	r22,24(sp)
   598c8:	dd400517 	ldw	r21,20(sp)
   598cc:	dd000417 	ldw	r20,16(sp)
   598d0:	dcc00317 	ldw	r19,12(sp)
   598d4:	dc800217 	ldw	r18,8(sp)
   598d8:	dc400117 	ldw	r17,4(sp)
   598dc:	dc000017 	ldw	r16,0(sp)
   598e0:	dec00a04 	addi	sp,sp,40
   598e4:	f800283a 	ret

000598e8 <___svfiprintf_internal_r>:
   598e8:	2880030b 	ldhu	r2,12(r5)
   598ec:	deffc804 	addi	sp,sp,-224
   598f0:	dcc03115 	stw	r19,196(sp)
   598f4:	dfc03715 	stw	ra,220(sp)
   598f8:	df003615 	stw	fp,216(sp)
   598fc:	ddc03515 	stw	r23,212(sp)
   59900:	dd803415 	stw	r22,208(sp)
   59904:	dd403315 	stw	r21,204(sp)
   59908:	dd003215 	stw	r20,200(sp)
   5990c:	dc803015 	stw	r18,192(sp)
   59910:	dc402f15 	stw	r17,188(sp)
   59914:	dc002e15 	stw	r16,184(sp)
   59918:	d9402315 	stw	r5,140(sp)
   5991c:	d9002715 	stw	r4,156(sp)
   59920:	1080200c 	andi	r2,r2,128
   59924:	d9c02415 	stw	r7,144(sp)
   59928:	3027883a 	mov	r19,r6
   5992c:	10000226 	beq	r2,zero,59938 <___svfiprintf_internal_r+0x50>
   59930:	28800417 	ldw	r2,16(r5)
   59934:	10046d26 	beq	r2,zero,5aaec <___svfiprintf_internal_r+0x1204>
   59938:	d8801a04 	addi	r2,sp,104
   5993c:	d8c019c4 	addi	r3,sp,103
   59940:	058001f4 	movhi	r22,7
   59944:	10c9c83a 	sub	r4,r2,r3
   59948:	b5aee104 	addi	r22,r22,-17532
   5994c:	d8801e15 	stw	r2,120(sp)
   59950:	d8c01f15 	stw	r3,124(sp)
   59954:	dec01a15 	stw	sp,104(sp)
   59958:	d8001c15 	stw	zero,112(sp)
   5995c:	d8001b15 	stw	zero,108(sp)
   59960:	d811883a 	mov	r8,sp
   59964:	d8002915 	stw	zero,164(sp)
   59968:	d8002615 	stw	zero,152(sp)
   5996c:	d9002c15 	stw	r4,176(sp)
   59970:	98800007 	ldb	r2,0(r19)
   59974:	10031426 	beq	r2,zero,5a5c8 <___svfiprintf_internal_r+0xce0>
   59978:	00c00944 	movi	r3,37
   5997c:	9825883a 	mov	r18,r19
   59980:	10c0021e 	bne	r2,r3,5998c <___svfiprintf_internal_r+0xa4>
   59984:	00001406 	br	599d8 <___svfiprintf_internal_r+0xf0>
   59988:	10c00326 	beq	r2,r3,59998 <___svfiprintf_internal_r+0xb0>
   5998c:	94800044 	addi	r18,r18,1
   59990:	90800007 	ldb	r2,0(r18)
   59994:	103ffc1e 	bne	r2,zero,59988 <__alt_data_end+0xfffd9988>
   59998:	94e1c83a 	sub	r16,r18,r19
   5999c:	80000e26 	beq	r16,zero,599d8 <___svfiprintf_internal_r+0xf0>
   599a0:	d8c01c17 	ldw	r3,112(sp)
   599a4:	d8801b17 	ldw	r2,108(sp)
   599a8:	44c00015 	stw	r19,0(r8)
   599ac:	1c07883a 	add	r3,r3,r16
   599b0:	10800044 	addi	r2,r2,1
   599b4:	d8c01c15 	stw	r3,112(sp)
   599b8:	44000115 	stw	r16,4(r8)
   599bc:	d8801b15 	stw	r2,108(sp)
   599c0:	00c001c4 	movi	r3,7
   599c4:	18835c16 	blt	r3,r2,5a738 <___svfiprintf_internal_r+0xe50>
   599c8:	42000204 	addi	r8,r8,8
   599cc:	d9402617 	ldw	r5,152(sp)
   599d0:	2c0b883a 	add	r5,r5,r16
   599d4:	d9402615 	stw	r5,152(sp)
   599d8:	90800007 	ldb	r2,0(r18)
   599dc:	1002fc26 	beq	r2,zero,5a5d0 <___svfiprintf_internal_r+0xce8>
   599e0:	0023883a 	mov	r17,zero
   599e4:	00bfffc4 	movi	r2,-1
   599e8:	0021883a 	mov	r16,zero
   599ec:	94c00044 	addi	r19,r18,1
   599f0:	90c00047 	ldb	r3,1(r18)
   599f4:	dc402105 	stb	r17,132(sp)
   599f8:	d8001d85 	stb	zero,118(sp)
   599fc:	002b883a 	mov	r21,zero
   59a00:	d8802015 	stw	r2,128(sp)
   59a04:	d8002515 	stw	zero,148(sp)
   59a08:	04801604 	movi	r18,88
   59a0c:	05000244 	movi	r20,9
   59a10:	402f883a 	mov	r23,r8
   59a14:	8023883a 	mov	r17,r16
   59a18:	9cc00044 	addi	r19,r19,1
   59a1c:	18bff804 	addi	r2,r3,-32
   59a20:	9081fb36 	bltu	r18,r2,5a210 <___svfiprintf_internal_r+0x928>
   59a24:	100490ba 	slli	r2,r2,2
   59a28:	010001b4 	movhi	r4,6
   59a2c:	21268f04 	addi	r4,r4,-26052
   59a30:	1105883a 	add	r2,r2,r4
   59a34:	10800017 	ldw	r2,0(r2)
   59a38:	1000683a 	jmp	r2
   59a3c:	00059c3c 	xorhi	zero,zero,5744
   59a40:	0005a210 	cmplti	zero,zero,5768
   59a44:	0005a210 	cmplti	zero,zero,5768
   59a48:	00059c30 	cmpltui	zero,zero,5744
   59a4c:	0005a210 	cmplti	zero,zero,5768
   59a50:	0005a210 	cmplti	zero,zero,5768
   59a54:	0005a210 	cmplti	zero,zero,5768
   59a58:	0005a210 	cmplti	zero,zero,5768
   59a5c:	0005a210 	cmplti	zero,zero,5768
   59a60:	0005a210 	cmplti	zero,zero,5768
   59a64:	00059ba0 	cmpeqi	zero,zero,5742
   59a68:	00059d9c 	xori	zero,zero,5750
   59a6c:	0005a210 	cmplti	zero,zero,5768
   59a70:	00059bc8 	cmpgei	zero,zero,5743
   59a74:	0005a24c 	andi	zero,zero,5769
   59a78:	0005a210 	cmplti	zero,zero,5768
   59a7c:	0005a240 	call	5a24 <__alt_mem_onchip_memory2_0-0x3a5dc>
   59a80:	0005a1d4 	movui	zero,5767
   59a84:	0005a1d4 	movui	zero,5767
   59a88:	0005a1d4 	movui	zero,5767
   59a8c:	0005a1d4 	movui	zero,5767
   59a90:	0005a1d4 	movui	zero,5767
   59a94:	0005a1d4 	movui	zero,5767
   59a98:	0005a1d4 	movui	zero,5767
   59a9c:	0005a1d4 	movui	zero,5767
   59aa0:	0005a1d4 	movui	zero,5767
   59aa4:	0005a210 	cmplti	zero,zero,5768
   59aa8:	0005a210 	cmplti	zero,zero,5768
   59aac:	0005a210 	cmplti	zero,zero,5768
   59ab0:	0005a210 	cmplti	zero,zero,5768
   59ab4:	0005a210 	cmplti	zero,zero,5768
   59ab8:	0005a210 	cmplti	zero,zero,5768
   59abc:	0005a210 	cmplti	zero,zero,5768
   59ac0:	0005a210 	cmplti	zero,zero,5768
   59ac4:	0005a210 	cmplti	zero,zero,5768
   59ac8:	0005a210 	cmplti	zero,zero,5768
   59acc:	0005a158 	cmpnei	zero,zero,5765
   59ad0:	0005a210 	cmplti	zero,zero,5768
   59ad4:	0005a210 	cmplti	zero,zero,5768
   59ad8:	0005a210 	cmplti	zero,zero,5768
   59adc:	0005a210 	cmplti	zero,zero,5768
   59ae0:	0005a210 	cmplti	zero,zero,5768
   59ae4:	0005a210 	cmplti	zero,zero,5768
   59ae8:	0005a210 	cmplti	zero,zero,5768
   59aec:	0005a210 	cmplti	zero,zero,5768
   59af0:	0005a210 	cmplti	zero,zero,5768
   59af4:	0005a210 	cmplti	zero,zero,5768
   59af8:	0005a308 	cmpgei	zero,zero,5772
   59afc:	0005a210 	cmplti	zero,zero,5768
   59b00:	0005a210 	cmplti	zero,zero,5768
   59b04:	0005a210 	cmplti	zero,zero,5768
   59b08:	0005a210 	cmplti	zero,zero,5768
   59b0c:	0005a210 	cmplti	zero,zero,5768
   59b10:	0005a294 	movui	zero,5770
   59b14:	0005a210 	cmplti	zero,zero,5768
   59b18:	0005a210 	cmplti	zero,zero,5768
   59b1c:	00059f94 	movui	zero,5758
   59b20:	0005a210 	cmplti	zero,zero,5768
   59b24:	0005a210 	cmplti	zero,zero,5768
   59b28:	0005a210 	cmplti	zero,zero,5768
   59b2c:	0005a210 	cmplti	zero,zero,5768
   59b30:	0005a210 	cmplti	zero,zero,5768
   59b34:	0005a210 	cmplti	zero,zero,5768
   59b38:	0005a210 	cmplti	zero,zero,5768
   59b3c:	0005a210 	cmplti	zero,zero,5768
   59b40:	0005a210 	cmplti	zero,zero,5768
   59b44:	0005a210 	cmplti	zero,zero,5768
   59b48:	00059e60 	cmpeqi	zero,zero,5753
   59b4c:	0005a044 	movi	zero,5761
   59b50:	0005a210 	cmplti	zero,zero,5768
   59b54:	0005a210 	cmplti	zero,zero,5768
   59b58:	0005a210 	cmplti	zero,zero,5768
   59b5c:	0005a038 	rdprs	zero,zero,5760
   59b60:	0005a044 	movi	zero,5761
   59b64:	0005a210 	cmplti	zero,zero,5768
   59b68:	0005a210 	cmplti	zero,zero,5768
   59b6c:	0005a024 	muli	zero,zero,5760
   59b70:	0005a210 	cmplti	zero,zero,5768
   59b74:	00059fe4 	muli	zero,zero,5759
   59b78:	00059db0 	cmpltui	zero,zero,5750
   59b7c:	00059bd4 	movui	zero,5743
   59b80:	0005a14c 	andi	zero,zero,5765
   59b84:	0005a210 	cmplti	zero,zero,5768
   59b88:	0005a0f8 	rdprs	zero,zero,5763
   59b8c:	0005a210 	cmplti	zero,zero,5768
   59b90:	00059d14 	movui	zero,5748
   59b94:	0005a210 	cmplti	zero,zero,5768
   59b98:	0005a210 	cmplti	zero,zero,5768
   59b9c:	00059c60 	cmpeqi	zero,zero,5745
   59ba0:	d9002417 	ldw	r4,144(sp)
   59ba4:	d9402417 	ldw	r5,144(sp)
   59ba8:	21000017 	ldw	r4,0(r4)
   59bac:	28800104 	addi	r2,r5,4
   59bb0:	d9002515 	stw	r4,148(sp)
   59bb4:	20032b0e 	bge	r4,zero,5a864 <___svfiprintf_internal_r+0xf7c>
   59bb8:	d8c02517 	ldw	r3,148(sp)
   59bbc:	d8802415 	stw	r2,144(sp)
   59bc0:	00c7c83a 	sub	r3,zero,r3
   59bc4:	d8c02515 	stw	r3,148(sp)
   59bc8:	8c400114 	ori	r17,r17,4
   59bcc:	98c00007 	ldb	r3,0(r19)
   59bd0:	003f9106 	br	59a18 <__alt_data_end+0xfffd9a18>
   59bd4:	00800c04 	movi	r2,48
   59bd8:	d9402417 	ldw	r5,144(sp)
   59bdc:	d9002017 	ldw	r4,128(sp)
   59be0:	d8801d05 	stb	r2,116(sp)
   59be4:	00801e04 	movi	r2,120
   59be8:	d8801d45 	stb	r2,117(sp)
   59bec:	d8001d85 	stb	zero,118(sp)
   59bf0:	b811883a 	mov	r8,r23
   59bf4:	28c00104 	addi	r3,r5,4
   59bf8:	2c800017 	ldw	r18,0(r5)
   59bfc:	0029883a 	mov	r20,zero
   59c00:	88800094 	ori	r2,r17,2
   59c04:	20036316 	blt	r4,zero,5a994 <___svfiprintf_internal_r+0x10ac>
   59c08:	00bfdfc4 	movi	r2,-129
   59c0c:	88a0703a 	and	r16,r17,r2
   59c10:	d8c02415 	stw	r3,144(sp)
   59c14:	84000094 	ori	r16,r16,2
   59c18:	90031c26 	beq	r18,zero,5a88c <___svfiprintf_internal_r+0xfa4>
   59c1c:	014001f4 	movhi	r5,7
   59c20:	296e7904 	addi	r5,r5,-17948
   59c24:	002b883a 	mov	r21,zero
   59c28:	d9402915 	stw	r5,164(sp)
   59c2c:	00002906 	br	59cd4 <___svfiprintf_internal_r+0x3ec>
   59c30:	8c400054 	ori	r17,r17,1
   59c34:	98c00007 	ldb	r3,0(r19)
   59c38:	003f7706 	br	59a18 <__alt_data_end+0xfffd9a18>
   59c3c:	a8803fcc 	andi	r2,r21,255
   59c40:	1080201c 	xori	r2,r2,128
   59c44:	10bfe004 	addi	r2,r2,-128
   59c48:	10032a1e 	bne	r2,zero,5a8f4 <___svfiprintf_internal_r+0x100c>
   59c4c:	00c00044 	movi	r3,1
   59c50:	d8c02105 	stb	r3,132(sp)
   59c54:	05400804 	movi	r21,32
   59c58:	98c00007 	ldb	r3,0(r19)
   59c5c:	003f6e06 	br	59a18 <__alt_data_end+0xfffd9a18>
   59c60:	8821883a 	mov	r16,r17
   59c64:	dc402103 	ldbu	r17,132(sp)
   59c68:	b811883a 	mov	r8,r23
   59c6c:	8c403fcc 	andi	r17,r17,255
   59c70:	8803f01e 	bne	r17,zero,5ac34 <___svfiprintf_internal_r+0x134c>
   59c74:	008001f4 	movhi	r2,7
   59c78:	10ae7904 	addi	r2,r2,-17948
   59c7c:	d8802915 	stw	r2,164(sp)
   59c80:	8080080c 	andi	r2,r16,32
   59c84:	1000cd26 	beq	r2,zero,59fbc <___svfiprintf_internal_r+0x6d4>
   59c88:	d9002417 	ldw	r4,144(sp)
   59c8c:	24800017 	ldw	r18,0(r4)
   59c90:	25000117 	ldw	r20,4(r4)
   59c94:	21000204 	addi	r4,r4,8
   59c98:	d9002415 	stw	r4,144(sp)
   59c9c:	8080004c 	andi	r2,r16,1
   59ca0:	1002c726 	beq	r2,zero,5a7c0 <___svfiprintf_internal_r+0xed8>
   59ca4:	9504b03a 	or	r2,r18,r20
   59ca8:	1003061e 	bne	r2,zero,5a8c4 <___svfiprintf_internal_r+0xfdc>
   59cac:	d9002017 	ldw	r4,128(sp)
   59cb0:	d8001d85 	stb	zero,118(sp)
   59cb4:	20033e16 	blt	r4,zero,5a9b0 <___svfiprintf_internal_r+0x10c8>
   59cb8:	00bfdfc4 	movi	r2,-129
   59cbc:	80a0703a 	and	r16,r16,r2
   59cc0:	d9402017 	ldw	r5,128(sp)
   59cc4:	002b883a 	mov	r21,zero
   59cc8:	28002826 	beq	r5,zero,59d6c <___svfiprintf_internal_r+0x484>
   59ccc:	0025883a 	mov	r18,zero
   59cd0:	0029883a 	mov	r20,zero
   59cd4:	d9002917 	ldw	r4,164(sp)
   59cd8:	dc401a04 	addi	r17,sp,104
   59cdc:	908003cc 	andi	r2,r18,15
   59ce0:	a006973a 	slli	r3,r20,28
   59ce4:	2085883a 	add	r2,r4,r2
   59ce8:	9024d13a 	srli	r18,r18,4
   59cec:	10800003 	ldbu	r2,0(r2)
   59cf0:	a028d13a 	srli	r20,r20,4
   59cf4:	8c7fffc4 	addi	r17,r17,-1
   59cf8:	1ca4b03a 	or	r18,r3,r18
   59cfc:	88800005 	stb	r2,0(r17)
   59d00:	9504b03a 	or	r2,r18,r20
   59d04:	103ff51e 	bne	r2,zero,59cdc <__alt_data_end+0xfffd9cdc>
   59d08:	d8801e17 	ldw	r2,120(sp)
   59d0c:	1469c83a 	sub	r20,r2,r17
   59d10:	00001906 	br	59d78 <___svfiprintf_internal_r+0x490>
   59d14:	8821883a 	mov	r16,r17
   59d18:	dc402103 	ldbu	r17,132(sp)
   59d1c:	b811883a 	mov	r8,r23
   59d20:	8c403fcc 	andi	r17,r17,255
   59d24:	8803d01e 	bne	r17,zero,5ac68 <___svfiprintf_internal_r+0x1380>
   59d28:	8080080c 	andi	r2,r16,32
   59d2c:	10016126 	beq	r2,zero,5a2b4 <___svfiprintf_internal_r+0x9cc>
   59d30:	d9002417 	ldw	r4,144(sp)
   59d34:	d9402017 	ldw	r5,128(sp)
   59d38:	d8001d85 	stb	zero,118(sp)
   59d3c:	20c00204 	addi	r3,r4,8
   59d40:	24800017 	ldw	r18,0(r4)
   59d44:	25000117 	ldw	r20,4(r4)
   59d48:	28030f16 	blt	r5,zero,5a988 <___svfiprintf_internal_r+0x10a0>
   59d4c:	013fdfc4 	movi	r4,-129
   59d50:	9504b03a 	or	r2,r18,r20
   59d54:	d8c02415 	stw	r3,144(sp)
   59d58:	8120703a 	and	r16,r16,r4
   59d5c:	002b883a 	mov	r21,zero
   59d60:	1000cd1e 	bne	r2,zero,5a098 <___svfiprintf_internal_r+0x7b0>
   59d64:	d8c02017 	ldw	r3,128(sp)
   59d68:	1803141e 	bne	r3,zero,5a9bc <___svfiprintf_internal_r+0x10d4>
   59d6c:	d8002015 	stw	zero,128(sp)
   59d70:	0029883a 	mov	r20,zero
   59d74:	dc401a04 	addi	r17,sp,104
   59d78:	dc802017 	ldw	r18,128(sp)
   59d7c:	9500010e 	bge	r18,r20,59d84 <___svfiprintf_internal_r+0x49c>
   59d80:	a025883a 	mov	r18,r20
   59d84:	ad403fcc 	andi	r21,r21,255
   59d88:	ad40201c 	xori	r21,r21,128
   59d8c:	ad7fe004 	addi	r21,r21,-128
   59d90:	a8003f26 	beq	r21,zero,59e90 <___svfiprintf_internal_r+0x5a8>
   59d94:	94800044 	addi	r18,r18,1
   59d98:	00003d06 	br	59e90 <___svfiprintf_internal_r+0x5a8>
   59d9c:	00c00044 	movi	r3,1
   59da0:	d8c02105 	stb	r3,132(sp)
   59da4:	05400ac4 	movi	r21,43
   59da8:	98c00007 	ldb	r3,0(r19)
   59dac:	003f1a06 	br	59a18 <__alt_data_end+0xfffd9a18>
   59db0:	8821883a 	mov	r16,r17
   59db4:	dc402103 	ldbu	r17,132(sp)
   59db8:	b811883a 	mov	r8,r23
   59dbc:	8c403fcc 	andi	r17,r17,255
   59dc0:	8803a71e 	bne	r17,zero,5ac60 <___svfiprintf_internal_r+0x1378>
   59dc4:	8080080c 	andi	r2,r16,32
   59dc8:	10015726 	beq	r2,zero,5a328 <___svfiprintf_internal_r+0xa40>
   59dcc:	d8c02417 	ldw	r3,144(sp)
   59dd0:	d9002017 	ldw	r4,128(sp)
   59dd4:	d8001d85 	stb	zero,118(sp)
   59dd8:	18800204 	addi	r2,r3,8
   59ddc:	1c800017 	ldw	r18,0(r3)
   59de0:	1d000117 	ldw	r20,4(r3)
   59de4:	2002db16 	blt	r4,zero,5a954 <___svfiprintf_internal_r+0x106c>
   59de8:	013fdfc4 	movi	r4,-129
   59dec:	9506b03a 	or	r3,r18,r20
   59df0:	d8802415 	stw	r2,144(sp)
   59df4:	8120703a 	and	r16,r16,r4
   59df8:	18015826 	beq	r3,zero,5a35c <___svfiprintf_internal_r+0xa74>
   59dfc:	002b883a 	mov	r21,zero
   59e00:	dc401a04 	addi	r17,sp,104
   59e04:	9006d0fa 	srli	r3,r18,3
   59e08:	a008977a 	slli	r4,r20,29
   59e0c:	a028d0fa 	srli	r20,r20,3
   59e10:	948001cc 	andi	r18,r18,7
   59e14:	90800c04 	addi	r2,r18,48
   59e18:	8c7fffc4 	addi	r17,r17,-1
   59e1c:	20e4b03a 	or	r18,r4,r3
   59e20:	88800005 	stb	r2,0(r17)
   59e24:	9506b03a 	or	r3,r18,r20
   59e28:	183ff61e 	bne	r3,zero,59e04 <__alt_data_end+0xfffd9e04>
   59e2c:	80c0004c 	andi	r3,r16,1
   59e30:	18028926 	beq	r3,zero,5a858 <___svfiprintf_internal_r+0xf70>
   59e34:	10803fcc 	andi	r2,r2,255
   59e38:	1080201c 	xori	r2,r2,128
   59e3c:	10bfe004 	addi	r2,r2,-128
   59e40:	00c00c04 	movi	r3,48
   59e44:	10ffb026 	beq	r2,r3,59d08 <__alt_data_end+0xfffd9d08>
   59e48:	88ffffc5 	stb	r3,-1(r17)
   59e4c:	d8c01e17 	ldw	r3,120(sp)
   59e50:	88bfffc4 	addi	r2,r17,-1
   59e54:	1023883a 	mov	r17,r2
   59e58:	18a9c83a 	sub	r20,r3,r2
   59e5c:	003fc606 	br	59d78 <__alt_data_end+0xfffd9d78>
   59e60:	d8c02417 	ldw	r3,144(sp)
   59e64:	04800044 	movi	r18,1
   59e68:	8821883a 	mov	r16,r17
   59e6c:	18800017 	ldw	r2,0(r3)
   59e70:	18c00104 	addi	r3,r3,4
   59e74:	b811883a 	mov	r8,r23
   59e78:	d8001d85 	stb	zero,118(sp)
   59e7c:	d8801005 	stb	r2,64(sp)
   59e80:	d8c02415 	stw	r3,144(sp)
   59e84:	9029883a 	mov	r20,r18
   59e88:	dc401004 	addi	r17,sp,64
   59e8c:	d8002015 	stw	zero,128(sp)
   59e90:	80c0008c 	andi	r3,r16,2
   59e94:	d8c02115 	stw	r3,132(sp)
   59e98:	18000126 	beq	r3,zero,59ea0 <___svfiprintf_internal_r+0x5b8>
   59e9c:	94800084 	addi	r18,r18,2
   59ea0:	80c0210c 	andi	r3,r16,132
   59ea4:	d8c02215 	stw	r3,136(sp)
   59ea8:	1801321e 	bne	r3,zero,5a374 <___svfiprintf_internal_r+0xa8c>
   59eac:	d9002517 	ldw	r4,148(sp)
   59eb0:	24b9c83a 	sub	fp,r4,r18
   59eb4:	07012f0e 	bge	zero,fp,5a374 <___svfiprintf_internal_r+0xa8c>
   59eb8:	02400404 	movi	r9,16
   59ebc:	d8c01c17 	ldw	r3,112(sp)
   59ec0:	d8801b17 	ldw	r2,108(sp)
   59ec4:	4f03250e 	bge	r9,fp,5ab5c <___svfiprintf_internal_r+0x1274>
   59ec8:	010001f4 	movhi	r4,7
   59ecc:	212ee504 	addi	r4,r4,-17516
   59ed0:	dc002a15 	stw	r16,168(sp)
   59ed4:	dc402b15 	stw	r17,172(sp)
   59ed8:	d9002815 	stw	r4,160(sp)
   59edc:	e023883a 	mov	r17,fp
   59ee0:	482f883a 	mov	r23,r9
   59ee4:	9839883a 	mov	fp,r19
   59ee8:	054001c4 	movi	r21,7
   59eec:	9027883a 	mov	r19,r18
   59ef0:	dc002717 	ldw	r16,156(sp)
   59ef4:	dc802317 	ldw	r18,140(sp)
   59ef8:	00000306 	br	59f08 <___svfiprintf_internal_r+0x620>
   59efc:	8c7ffc04 	addi	r17,r17,-16
   59f00:	42000204 	addi	r8,r8,8
   59f04:	bc40130e 	bge	r23,r17,59f54 <___svfiprintf_internal_r+0x66c>
   59f08:	014001f4 	movhi	r5,7
   59f0c:	18c00404 	addi	r3,r3,16
   59f10:	10800044 	addi	r2,r2,1
   59f14:	296ee504 	addi	r5,r5,-17516
   59f18:	41400015 	stw	r5,0(r8)
   59f1c:	45c00115 	stw	r23,4(r8)
   59f20:	d8c01c15 	stw	r3,112(sp)
   59f24:	d8801b15 	stw	r2,108(sp)
   59f28:	a8bff40e 	bge	r21,r2,59efc <__alt_data_end+0xfffd9efc>
   59f2c:	d9801a04 	addi	r6,sp,104
   59f30:	900b883a 	mov	r5,r18
   59f34:	8009883a 	mov	r4,r16
   59f38:	00597180 	call	59718 <__ssprint_r>
   59f3c:	1001aa1e 	bne	r2,zero,5a5e8 <___svfiprintf_internal_r+0xd00>
   59f40:	8c7ffc04 	addi	r17,r17,-16
   59f44:	d8c01c17 	ldw	r3,112(sp)
   59f48:	d8801b17 	ldw	r2,108(sp)
   59f4c:	d811883a 	mov	r8,sp
   59f50:	bc7fed16 	blt	r23,r17,59f08 <__alt_data_end+0xfffd9f08>
   59f54:	9825883a 	mov	r18,r19
   59f58:	dc002a17 	ldw	r16,168(sp)
   59f5c:	e027883a 	mov	r19,fp
   59f60:	8839883a 	mov	fp,r17
   59f64:	dc402b17 	ldw	r17,172(sp)
   59f68:	d9002817 	ldw	r4,160(sp)
   59f6c:	e0c7883a 	add	r3,fp,r3
   59f70:	10800044 	addi	r2,r2,1
   59f74:	41000015 	stw	r4,0(r8)
   59f78:	47000115 	stw	fp,4(r8)
   59f7c:	d8c01c15 	stw	r3,112(sp)
   59f80:	d8801b15 	stw	r2,108(sp)
   59f84:	010001c4 	movi	r4,7
   59f88:	20821616 	blt	r4,r2,5a7e4 <___svfiprintf_internal_r+0xefc>
   59f8c:	42000204 	addi	r8,r8,8
   59f90:	0000fa06 	br	5a37c <___svfiprintf_internal_r+0xa94>
   59f94:	8821883a 	mov	r16,r17
   59f98:	dc402103 	ldbu	r17,132(sp)
   59f9c:	b811883a 	mov	r8,r23
   59fa0:	8c403fcc 	andi	r17,r17,255
   59fa4:	8803361e 	bne	r17,zero,5ac80 <___svfiprintf_internal_r+0x1398>
   59fa8:	014001f4 	movhi	r5,7
   59fac:	296e7404 	addi	r5,r5,-17968
   59fb0:	d9402915 	stw	r5,164(sp)
   59fb4:	8080080c 	andi	r2,r16,32
   59fb8:	103f331e 	bne	r2,zero,59c88 <__alt_data_end+0xfffd9c88>
   59fbc:	8080040c 	andi	r2,r16,16
   59fc0:	1002551e 	bne	r2,zero,5a918 <___svfiprintf_internal_r+0x1030>
   59fc4:	8080100c 	andi	r2,r16,64
   59fc8:	1002a626 	beq	r2,zero,5aa64 <___svfiprintf_internal_r+0x117c>
   59fcc:	d8802417 	ldw	r2,144(sp)
   59fd0:	0029883a 	mov	r20,zero
   59fd4:	1480000b 	ldhu	r18,0(r2)
   59fd8:	10800104 	addi	r2,r2,4
   59fdc:	d8802415 	stw	r2,144(sp)
   59fe0:	003f2e06 	br	59c9c <__alt_data_end+0xfffd9c9c>
   59fe4:	8821883a 	mov	r16,r17
   59fe8:	dc402103 	ldbu	r17,132(sp)
   59fec:	b811883a 	mov	r8,r23
   59ff0:	8c403fcc 	andi	r17,r17,255
   59ff4:	88030b1e 	bne	r17,zero,5ac24 <___svfiprintf_internal_r+0x133c>
   59ff8:	8080080c 	andi	r2,r16,32
   59ffc:	1002271e 	bne	r2,zero,5a89c <___svfiprintf_internal_r+0xfb4>
   5a000:	8080040c 	andi	r2,r16,16
   5a004:	10028e26 	beq	r2,zero,5aa40 <___svfiprintf_internal_r+0x1158>
   5a008:	d8c02417 	ldw	r3,144(sp)
   5a00c:	d9002617 	ldw	r4,152(sp)
   5a010:	18800017 	ldw	r2,0(r3)
   5a014:	18c00104 	addi	r3,r3,4
   5a018:	d8c02415 	stw	r3,144(sp)
   5a01c:	11000015 	stw	r4,0(r2)
   5a020:	003e5306 	br	59970 <__alt_data_end+0xfffd9970>
   5a024:	98c00007 	ldb	r3,0(r19)
   5a028:	01401b04 	movi	r5,108
   5a02c:	19424f26 	beq	r3,r5,5a96c <___svfiprintf_internal_r+0x1084>
   5a030:	8c400414 	ori	r17,r17,16
   5a034:	003e7806 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a038:	8c401014 	ori	r17,r17,64
   5a03c:	98c00007 	ldb	r3,0(r19)
   5a040:	003e7506 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a044:	8821883a 	mov	r16,r17
   5a048:	dc402103 	ldbu	r17,132(sp)
   5a04c:	b811883a 	mov	r8,r23
   5a050:	8c403fcc 	andi	r17,r17,255
   5a054:	8802fe1e 	bne	r17,zero,5ac50 <___svfiprintf_internal_r+0x1368>
   5a058:	8080080c 	andi	r2,r16,32
   5a05c:	10004626 	beq	r2,zero,5a178 <___svfiprintf_internal_r+0x890>
   5a060:	d9002417 	ldw	r4,144(sp)
   5a064:	20800117 	ldw	r2,4(r4)
   5a068:	24800017 	ldw	r18,0(r4)
   5a06c:	21000204 	addi	r4,r4,8
   5a070:	d9002415 	stw	r4,144(sp)
   5a074:	1029883a 	mov	r20,r2
   5a078:	10004a16 	blt	r2,zero,5a1a4 <___svfiprintf_internal_r+0x8bc>
   5a07c:	d9002017 	ldw	r4,128(sp)
   5a080:	dd401d83 	ldbu	r21,118(sp)
   5a084:	2001eb16 	blt	r4,zero,5a834 <___svfiprintf_internal_r+0xf4c>
   5a088:	00ffdfc4 	movi	r3,-129
   5a08c:	9504b03a 	or	r2,r18,r20
   5a090:	80e0703a 	and	r16,r16,r3
   5a094:	103f3326 	beq	r2,zero,59d64 <__alt_data_end+0xfffd9d64>
   5a098:	a0009426 	beq	r20,zero,5a2ec <___svfiprintf_internal_r+0xa04>
   5a09c:	dc401a04 	addi	r17,sp,104
   5a0a0:	402f883a 	mov	r23,r8
   5a0a4:	9009883a 	mov	r4,r18
   5a0a8:	a00b883a 	mov	r5,r20
   5a0ac:	01800284 	movi	r6,10
   5a0b0:	000f883a 	mov	r7,zero
   5a0b4:	005d2c80 	call	5d2c8 <__umoddi3>
   5a0b8:	10800c04 	addi	r2,r2,48
   5a0bc:	8c7fffc4 	addi	r17,r17,-1
   5a0c0:	9009883a 	mov	r4,r18
   5a0c4:	a00b883a 	mov	r5,r20
   5a0c8:	88800005 	stb	r2,0(r17)
   5a0cc:	01800284 	movi	r6,10
   5a0d0:	000f883a 	mov	r7,zero
   5a0d4:	005cccc0 	call	5cccc <__udivdi3>
   5a0d8:	1025883a 	mov	r18,r2
   5a0dc:	10c4b03a 	or	r2,r2,r3
   5a0e0:	1829883a 	mov	r20,r3
   5a0e4:	103fef1e 	bne	r2,zero,5a0a4 <__alt_data_end+0xfffda0a4>
   5a0e8:	d9001e17 	ldw	r4,120(sp)
   5a0ec:	b811883a 	mov	r8,r23
   5a0f0:	2469c83a 	sub	r20,r4,r17
   5a0f4:	003f2006 	br	59d78 <__alt_data_end+0xfffd9d78>
   5a0f8:	d8802417 	ldw	r2,144(sp)
   5a0fc:	8821883a 	mov	r16,r17
   5a100:	d8001d85 	stb	zero,118(sp)
   5a104:	14400017 	ldw	r17,0(r2)
   5a108:	b811883a 	mov	r8,r23
   5a10c:	15c00104 	addi	r23,r2,4
   5a110:	88026c26 	beq	r17,zero,5aac4 <___svfiprintf_internal_r+0x11dc>
   5a114:	d8c02017 	ldw	r3,128(sp)
   5a118:	18025f16 	blt	r3,zero,5aa98 <___svfiprintf_internal_r+0x11b0>
   5a11c:	180d883a 	mov	r6,r3
   5a120:	000b883a 	mov	r5,zero
   5a124:	8809883a 	mov	r4,r17
   5a128:	da002d15 	stw	r8,180(sp)
   5a12c:	0057ba40 	call	57ba4 <memchr>
   5a130:	da002d17 	ldw	r8,180(sp)
   5a134:	1002a526 	beq	r2,zero,5abcc <___svfiprintf_internal_r+0x12e4>
   5a138:	1469c83a 	sub	r20,r2,r17
   5a13c:	dd401d83 	ldbu	r21,118(sp)
   5a140:	ddc02415 	stw	r23,144(sp)
   5a144:	d8002015 	stw	zero,128(sp)
   5a148:	003f0b06 	br	59d78 <__alt_data_end+0xfffd9d78>
   5a14c:	8c400814 	ori	r17,r17,32
   5a150:	98c00007 	ldb	r3,0(r19)
   5a154:	003e3006 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a158:	8821883a 	mov	r16,r17
   5a15c:	dc402103 	ldbu	r17,132(sp)
   5a160:	b811883a 	mov	r8,r23
   5a164:	8c403fcc 	andi	r17,r17,255
   5a168:	8802b01e 	bne	r17,zero,5ac2c <___svfiprintf_internal_r+0x1344>
   5a16c:	84000414 	ori	r16,r16,16
   5a170:	8080080c 	andi	r2,r16,32
   5a174:	103fba1e 	bne	r2,zero,5a060 <__alt_data_end+0xfffda060>
   5a178:	8080040c 	andi	r2,r16,16
   5a17c:	1001df1e 	bne	r2,zero,5a8fc <___svfiprintf_internal_r+0x1014>
   5a180:	8080100c 	andi	r2,r16,64
   5a184:	10023d26 	beq	r2,zero,5aa7c <___svfiprintf_internal_r+0x1194>
   5a188:	d8802417 	ldw	r2,144(sp)
   5a18c:	1480000f 	ldh	r18,0(r2)
   5a190:	10800104 	addi	r2,r2,4
   5a194:	d8802415 	stw	r2,144(sp)
   5a198:	9029d7fa 	srai	r20,r18,31
   5a19c:	a005883a 	mov	r2,r20
   5a1a0:	103fb60e 	bge	r2,zero,5a07c <__alt_data_end+0xfffda07c>
   5a1a4:	d9402017 	ldw	r5,128(sp)
   5a1a8:	04a5c83a 	sub	r18,zero,r18
   5a1ac:	05400b44 	movi	r21,45
   5a1b0:	9004c03a 	cmpne	r2,r18,zero
   5a1b4:	0529c83a 	sub	r20,zero,r20
   5a1b8:	dd401d85 	stb	r21,118(sp)
   5a1bc:	a0a9c83a 	sub	r20,r20,r2
   5a1c0:	28026c16 	blt	r5,zero,5ab74 <___svfiprintf_internal_r+0x128c>
   5a1c4:	00bfdfc4 	movi	r2,-129
   5a1c8:	80a0703a 	and	r16,r16,r2
   5a1cc:	a03fb31e 	bne	r20,zero,5a09c <__alt_data_end+0xfffda09c>
   5a1d0:	00004606 	br	5a2ec <___svfiprintf_internal_r+0xa04>
   5a1d4:	9839883a 	mov	fp,r19
   5a1d8:	d8002515 	stw	zero,148(sp)
   5a1dc:	1c3ff404 	addi	r16,r3,-48
   5a1e0:	0009883a 	mov	r4,zero
   5a1e4:	01400284 	movi	r5,10
   5a1e8:	004dab40 	call	4dab4 <__mulsi3>
   5a1ec:	e0c00007 	ldb	r3,0(fp)
   5a1f0:	8089883a 	add	r4,r16,r2
   5a1f4:	9cc00044 	addi	r19,r19,1
   5a1f8:	1c3ff404 	addi	r16,r3,-48
   5a1fc:	9839883a 	mov	fp,r19
   5a200:	a43ff82e 	bgeu	r20,r16,5a1e4 <__alt_data_end+0xfffda1e4>
   5a204:	d9002515 	stw	r4,148(sp)
   5a208:	18bff804 	addi	r2,r3,-32
   5a20c:	90be052e 	bgeu	r18,r2,59a24 <__alt_data_end+0xfffd9a24>
   5a210:	8821883a 	mov	r16,r17
   5a214:	dc402103 	ldbu	r17,132(sp)
   5a218:	b811883a 	mov	r8,r23
   5a21c:	8c403fcc 	andi	r17,r17,255
   5a220:	88028d1e 	bne	r17,zero,5ac58 <___svfiprintf_internal_r+0x1370>
   5a224:	1800ea26 	beq	r3,zero,5a5d0 <___svfiprintf_internal_r+0xce8>
   5a228:	04800044 	movi	r18,1
   5a22c:	d8c01005 	stb	r3,64(sp)
   5a230:	d8001d85 	stb	zero,118(sp)
   5a234:	9029883a 	mov	r20,r18
   5a238:	dc401004 	addi	r17,sp,64
   5a23c:	003f1306 	br	59e8c <__alt_data_end+0xfffd9e8c>
   5a240:	8c402014 	ori	r17,r17,128
   5a244:	98c00007 	ldb	r3,0(r19)
   5a248:	003df306 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a24c:	98c00007 	ldb	r3,0(r19)
   5a250:	01000a84 	movi	r4,42
   5a254:	9f000044 	addi	fp,r19,1
   5a258:	19026326 	beq	r3,r4,5abe8 <___svfiprintf_internal_r+0x1300>
   5a25c:	1c3ff404 	addi	r16,r3,-48
   5a260:	0009883a 	mov	r4,zero
   5a264:	a4025636 	bltu	r20,r16,5abc0 <___svfiprintf_internal_r+0x12d8>
   5a268:	01400284 	movi	r5,10
   5a26c:	004dab40 	call	4dab4 <__mulsi3>
   5a270:	e0c00007 	ldb	r3,0(fp)
   5a274:	1409883a 	add	r4,r2,r16
   5a278:	e4c00044 	addi	r19,fp,1
   5a27c:	1c3ff404 	addi	r16,r3,-48
   5a280:	9839883a 	mov	fp,r19
   5a284:	a43ff82e 	bgeu	r20,r16,5a268 <__alt_data_end+0xfffda268>
   5a288:	20020c16 	blt	r4,zero,5aabc <___svfiprintf_internal_r+0x11d4>
   5a28c:	d9002015 	stw	r4,128(sp)
   5a290:	003de206 	br	59a1c <__alt_data_end+0xfffd9a1c>
   5a294:	8821883a 	mov	r16,r17
   5a298:	dc402103 	ldbu	r17,132(sp)
   5a29c:	b811883a 	mov	r8,r23
   5a2a0:	8c403fcc 	andi	r17,r17,255
   5a2a4:	8802721e 	bne	r17,zero,5ac70 <___svfiprintf_internal_r+0x1388>
   5a2a8:	84000414 	ori	r16,r16,16
   5a2ac:	8080080c 	andi	r2,r16,32
   5a2b0:	103e9f1e 	bne	r2,zero,59d30 <__alt_data_end+0xfffd9d30>
   5a2b4:	8080040c 	andi	r2,r16,16
   5a2b8:	10015326 	beq	r2,zero,5a808 <___svfiprintf_internal_r+0xf20>
   5a2bc:	d8c02417 	ldw	r3,144(sp)
   5a2c0:	d9002017 	ldw	r4,128(sp)
   5a2c4:	d8001d85 	stb	zero,118(sp)
   5a2c8:	18800104 	addi	r2,r3,4
   5a2cc:	1c800017 	ldw	r18,0(r3)
   5a2d0:	0029883a 	mov	r20,zero
   5a2d4:	20015516 	blt	r4,zero,5a82c <___svfiprintf_internal_r+0xf44>
   5a2d8:	00ffdfc4 	movi	r3,-129
   5a2dc:	d8802415 	stw	r2,144(sp)
   5a2e0:	80e0703a 	and	r16,r16,r3
   5a2e4:	002b883a 	mov	r21,zero
   5a2e8:	903e9e26 	beq	r18,zero,59d64 <__alt_data_end+0xfffd9d64>
   5a2ec:	00800244 	movi	r2,9
   5a2f0:	14bf6a36 	bltu	r2,r18,5a09c <__alt_data_end+0xfffda09c>
   5a2f4:	94800c04 	addi	r18,r18,48
   5a2f8:	dc8019c5 	stb	r18,103(sp)
   5a2fc:	dd002c17 	ldw	r20,176(sp)
   5a300:	dc4019c4 	addi	r17,sp,103
   5a304:	003e9c06 	br	59d78 <__alt_data_end+0xfffd9d78>
   5a308:	8821883a 	mov	r16,r17
   5a30c:	dc402103 	ldbu	r17,132(sp)
   5a310:	b811883a 	mov	r8,r23
   5a314:	8c403fcc 	andi	r17,r17,255
   5a318:	8802571e 	bne	r17,zero,5ac78 <___svfiprintf_internal_r+0x1390>
   5a31c:	84000414 	ori	r16,r16,16
   5a320:	8080080c 	andi	r2,r16,32
   5a324:	103ea91e 	bne	r2,zero,59dcc <__alt_data_end+0xfffd9dcc>
   5a328:	8080040c 	andi	r2,r16,16
   5a32c:	10018026 	beq	r2,zero,5a930 <___svfiprintf_internal_r+0x1048>
   5a330:	d9402417 	ldw	r5,144(sp)
   5a334:	d8c02017 	ldw	r3,128(sp)
   5a338:	d8001d85 	stb	zero,118(sp)
   5a33c:	28800104 	addi	r2,r5,4
   5a340:	2c800017 	ldw	r18,0(r5)
   5a344:	0029883a 	mov	r20,zero
   5a348:	18018216 	blt	r3,zero,5a954 <___svfiprintf_internal_r+0x106c>
   5a34c:	00ffdfc4 	movi	r3,-129
   5a350:	d8802415 	stw	r2,144(sp)
   5a354:	80e0703a 	and	r16,r16,r3
   5a358:	903ea81e 	bne	r18,zero,59dfc <__alt_data_end+0xfffd9dfc>
   5a35c:	d8802017 	ldw	r2,128(sp)
   5a360:	002b883a 	mov	r21,zero
   5a364:	1001f226 	beq	r2,zero,5ab30 <___svfiprintf_internal_r+0x1248>
   5a368:	0025883a 	mov	r18,zero
   5a36c:	0029883a 	mov	r20,zero
   5a370:	003ea306 	br	59e00 <__alt_data_end+0xfffd9e00>
   5a374:	d8c01c17 	ldw	r3,112(sp)
   5a378:	d8801b17 	ldw	r2,108(sp)
   5a37c:	d9001d87 	ldb	r4,118(sp)
   5a380:	20000b26 	beq	r4,zero,5a3b0 <___svfiprintf_internal_r+0xac8>
   5a384:	d9001d84 	addi	r4,sp,118
   5a388:	18c00044 	addi	r3,r3,1
   5a38c:	10800044 	addi	r2,r2,1
   5a390:	41000015 	stw	r4,0(r8)
   5a394:	01000044 	movi	r4,1
   5a398:	41000115 	stw	r4,4(r8)
   5a39c:	d8c01c15 	stw	r3,112(sp)
   5a3a0:	d8801b15 	stw	r2,108(sp)
   5a3a4:	010001c4 	movi	r4,7
   5a3a8:	2080f316 	blt	r4,r2,5a778 <___svfiprintf_internal_r+0xe90>
   5a3ac:	42000204 	addi	r8,r8,8
   5a3b0:	d9402117 	ldw	r5,132(sp)
   5a3b4:	28000b26 	beq	r5,zero,5a3e4 <___svfiprintf_internal_r+0xafc>
   5a3b8:	d9001d04 	addi	r4,sp,116
   5a3bc:	18c00084 	addi	r3,r3,2
   5a3c0:	10800044 	addi	r2,r2,1
   5a3c4:	41000015 	stw	r4,0(r8)
   5a3c8:	01000084 	movi	r4,2
   5a3cc:	41000115 	stw	r4,4(r8)
   5a3d0:	d8c01c15 	stw	r3,112(sp)
   5a3d4:	d8801b15 	stw	r2,108(sp)
   5a3d8:	010001c4 	movi	r4,7
   5a3dc:	2080ef16 	blt	r4,r2,5a79c <___svfiprintf_internal_r+0xeb4>
   5a3e0:	42000204 	addi	r8,r8,8
   5a3e4:	d9402217 	ldw	r5,136(sp)
   5a3e8:	01002004 	movi	r4,128
   5a3ec:	29008f26 	beq	r5,r4,5a62c <___svfiprintf_internal_r+0xd44>
   5a3f0:	d9002017 	ldw	r4,128(sp)
   5a3f4:	252fc83a 	sub	r23,r4,r20
   5a3f8:	05c0310e 	bge	zero,r23,5a4c0 <___svfiprintf_internal_r+0xbd8>
   5a3fc:	07000404 	movi	fp,16
   5a400:	e5c17d0e 	bge	fp,r23,5a9f8 <___svfiprintf_internal_r+0x1110>
   5a404:	010001f4 	movhi	r4,7
   5a408:	212ee104 	addi	r4,r4,-17532
   5a40c:	dc002015 	stw	r16,128(sp)
   5a410:	dc402215 	stw	r17,136(sp)
   5a414:	d9002115 	stw	r4,132(sp)
   5a418:	b823883a 	mov	r17,r23
   5a41c:	054001c4 	movi	r21,7
   5a420:	982f883a 	mov	r23,r19
   5a424:	dc002717 	ldw	r16,156(sp)
   5a428:	9027883a 	mov	r19,r18
   5a42c:	dc802317 	ldw	r18,140(sp)
   5a430:	00000306 	br	5a440 <___svfiprintf_internal_r+0xb58>
   5a434:	8c7ffc04 	addi	r17,r17,-16
   5a438:	42000204 	addi	r8,r8,8
   5a43c:	e440110e 	bge	fp,r17,5a484 <___svfiprintf_internal_r+0xb9c>
   5a440:	18c00404 	addi	r3,r3,16
   5a444:	10800044 	addi	r2,r2,1
   5a448:	45800015 	stw	r22,0(r8)
   5a44c:	47000115 	stw	fp,4(r8)
   5a450:	d8c01c15 	stw	r3,112(sp)
   5a454:	d8801b15 	stw	r2,108(sp)
   5a458:	a8bff60e 	bge	r21,r2,5a434 <__alt_data_end+0xfffda434>
   5a45c:	d9801a04 	addi	r6,sp,104
   5a460:	900b883a 	mov	r5,r18
   5a464:	8009883a 	mov	r4,r16
   5a468:	00597180 	call	59718 <__ssprint_r>
   5a46c:	10005e1e 	bne	r2,zero,5a5e8 <___svfiprintf_internal_r+0xd00>
   5a470:	8c7ffc04 	addi	r17,r17,-16
   5a474:	d8c01c17 	ldw	r3,112(sp)
   5a478:	d8801b17 	ldw	r2,108(sp)
   5a47c:	d811883a 	mov	r8,sp
   5a480:	e47fef16 	blt	fp,r17,5a440 <__alt_data_end+0xfffda440>
   5a484:	9825883a 	mov	r18,r19
   5a488:	dc002017 	ldw	r16,128(sp)
   5a48c:	b827883a 	mov	r19,r23
   5a490:	882f883a 	mov	r23,r17
   5a494:	dc402217 	ldw	r17,136(sp)
   5a498:	d9402117 	ldw	r5,132(sp)
   5a49c:	1dc7883a 	add	r3,r3,r23
   5a4a0:	10800044 	addi	r2,r2,1
   5a4a4:	41400015 	stw	r5,0(r8)
   5a4a8:	45c00115 	stw	r23,4(r8)
   5a4ac:	d8c01c15 	stw	r3,112(sp)
   5a4b0:	d8801b15 	stw	r2,108(sp)
   5a4b4:	010001c4 	movi	r4,7
   5a4b8:	2080a616 	blt	r4,r2,5a754 <___svfiprintf_internal_r+0xe6c>
   5a4bc:	42000204 	addi	r8,r8,8
   5a4c0:	a0c7883a 	add	r3,r20,r3
   5a4c4:	10800044 	addi	r2,r2,1
   5a4c8:	44400015 	stw	r17,0(r8)
   5a4cc:	45000115 	stw	r20,4(r8)
   5a4d0:	d8c01c15 	stw	r3,112(sp)
   5a4d4:	d8801b15 	stw	r2,108(sp)
   5a4d8:	010001c4 	movi	r4,7
   5a4dc:	20808816 	blt	r4,r2,5a700 <___svfiprintf_internal_r+0xe18>
   5a4e0:	42000204 	addi	r8,r8,8
   5a4e4:	8400010c 	andi	r16,r16,4
   5a4e8:	80002c26 	beq	r16,zero,5a59c <___svfiprintf_internal_r+0xcb4>
   5a4ec:	d8802517 	ldw	r2,148(sp)
   5a4f0:	14a1c83a 	sub	r16,r2,r18
   5a4f4:	0400290e 	bge	zero,r16,5a59c <___svfiprintf_internal_r+0xcb4>
   5a4f8:	04400404 	movi	r17,16
   5a4fc:	d8801b17 	ldw	r2,108(sp)
   5a500:	8c01a70e 	bge	r17,r16,5aba0 <___svfiprintf_internal_r+0x12b8>
   5a504:	014001f4 	movhi	r5,7
   5a508:	296ee504 	addi	r5,r5,-17516
   5a50c:	d9402815 	stw	r5,160(sp)
   5a510:	050001c4 	movi	r20,7
   5a514:	dd402717 	ldw	r21,156(sp)
   5a518:	ddc02317 	ldw	r23,140(sp)
   5a51c:	00000306 	br	5a52c <___svfiprintf_internal_r+0xc44>
   5a520:	843ffc04 	addi	r16,r16,-16
   5a524:	42000204 	addi	r8,r8,8
   5a528:	8c00130e 	bge	r17,r16,5a578 <___svfiprintf_internal_r+0xc90>
   5a52c:	010001f4 	movhi	r4,7
   5a530:	18c00404 	addi	r3,r3,16
   5a534:	10800044 	addi	r2,r2,1
   5a538:	212ee504 	addi	r4,r4,-17516
   5a53c:	41000015 	stw	r4,0(r8)
   5a540:	44400115 	stw	r17,4(r8)
   5a544:	d8c01c15 	stw	r3,112(sp)
   5a548:	d8801b15 	stw	r2,108(sp)
   5a54c:	a0bff40e 	bge	r20,r2,5a520 <__alt_data_end+0xfffda520>
   5a550:	d9801a04 	addi	r6,sp,104
   5a554:	b80b883a 	mov	r5,r23
   5a558:	a809883a 	mov	r4,r21
   5a55c:	00597180 	call	59718 <__ssprint_r>
   5a560:	1000211e 	bne	r2,zero,5a5e8 <___svfiprintf_internal_r+0xd00>
   5a564:	843ffc04 	addi	r16,r16,-16
   5a568:	d8c01c17 	ldw	r3,112(sp)
   5a56c:	d8801b17 	ldw	r2,108(sp)
   5a570:	d811883a 	mov	r8,sp
   5a574:	8c3fed16 	blt	r17,r16,5a52c <__alt_data_end+0xfffda52c>
   5a578:	d9402817 	ldw	r5,160(sp)
   5a57c:	1c07883a 	add	r3,r3,r16
   5a580:	10800044 	addi	r2,r2,1
   5a584:	41400015 	stw	r5,0(r8)
   5a588:	44000115 	stw	r16,4(r8)
   5a58c:	d8c01c15 	stw	r3,112(sp)
   5a590:	d8801b15 	stw	r2,108(sp)
   5a594:	010001c4 	movi	r4,7
   5a598:	2080b516 	blt	r4,r2,5a870 <___svfiprintf_internal_r+0xf88>
   5a59c:	d8802517 	ldw	r2,148(sp)
   5a5a0:	1480010e 	bge	r2,r18,5a5a8 <___svfiprintf_internal_r+0xcc0>
   5a5a4:	9005883a 	mov	r2,r18
   5a5a8:	d9002617 	ldw	r4,152(sp)
   5a5ac:	2089883a 	add	r4,r4,r2
   5a5b0:	d9002615 	stw	r4,152(sp)
   5a5b4:	18005a1e 	bne	r3,zero,5a720 <___svfiprintf_internal_r+0xe38>
   5a5b8:	98800007 	ldb	r2,0(r19)
   5a5bc:	d8001b15 	stw	zero,108(sp)
   5a5c0:	d811883a 	mov	r8,sp
   5a5c4:	103cec1e 	bne	r2,zero,59978 <__alt_data_end+0xfffd9978>
   5a5c8:	9825883a 	mov	r18,r19
   5a5cc:	003d0206 	br	599d8 <__alt_data_end+0xfffd99d8>
   5a5d0:	d8801c17 	ldw	r2,112(sp)
   5a5d4:	10000426 	beq	r2,zero,5a5e8 <___svfiprintf_internal_r+0xd00>
   5a5d8:	d9402317 	ldw	r5,140(sp)
   5a5dc:	d9002717 	ldw	r4,156(sp)
   5a5e0:	d9801a04 	addi	r6,sp,104
   5a5e4:	00597180 	call	59718 <__ssprint_r>
   5a5e8:	d9402317 	ldw	r5,140(sp)
   5a5ec:	d8802617 	ldw	r2,152(sp)
   5a5f0:	28c0030b 	ldhu	r3,12(r5)
   5a5f4:	18c0100c 	andi	r3,r3,64
   5a5f8:	18015c1e 	bne	r3,zero,5ab6c <___svfiprintf_internal_r+0x1284>
   5a5fc:	dfc03717 	ldw	ra,220(sp)
   5a600:	df003617 	ldw	fp,216(sp)
   5a604:	ddc03517 	ldw	r23,212(sp)
   5a608:	dd803417 	ldw	r22,208(sp)
   5a60c:	dd403317 	ldw	r21,204(sp)
   5a610:	dd003217 	ldw	r20,200(sp)
   5a614:	dcc03117 	ldw	r19,196(sp)
   5a618:	dc803017 	ldw	r18,192(sp)
   5a61c:	dc402f17 	ldw	r17,188(sp)
   5a620:	dc002e17 	ldw	r16,184(sp)
   5a624:	dec03804 	addi	sp,sp,224
   5a628:	f800283a 	ret
   5a62c:	d9002517 	ldw	r4,148(sp)
   5a630:	24afc83a 	sub	r23,r4,r18
   5a634:	05ff6e0e 	bge	zero,r23,5a3f0 <__alt_data_end+0xfffda3f0>
   5a638:	07000404 	movi	fp,16
   5a63c:	e5c15c0e 	bge	fp,r23,5abb0 <___svfiprintf_internal_r+0x12c8>
   5a640:	010001f4 	movhi	r4,7
   5a644:	212ee104 	addi	r4,r4,-17532
   5a648:	dc002215 	stw	r16,136(sp)
   5a64c:	dc402815 	stw	r17,160(sp)
   5a650:	d9002115 	stw	r4,132(sp)
   5a654:	b823883a 	mov	r17,r23
   5a658:	054001c4 	movi	r21,7
   5a65c:	982f883a 	mov	r23,r19
   5a660:	dc002717 	ldw	r16,156(sp)
   5a664:	9027883a 	mov	r19,r18
   5a668:	dc802317 	ldw	r18,140(sp)
   5a66c:	00000306 	br	5a67c <___svfiprintf_internal_r+0xd94>
   5a670:	8c7ffc04 	addi	r17,r17,-16
   5a674:	42000204 	addi	r8,r8,8
   5a678:	e440110e 	bge	fp,r17,5a6c0 <___svfiprintf_internal_r+0xdd8>
   5a67c:	18c00404 	addi	r3,r3,16
   5a680:	10800044 	addi	r2,r2,1
   5a684:	45800015 	stw	r22,0(r8)
   5a688:	47000115 	stw	fp,4(r8)
   5a68c:	d8c01c15 	stw	r3,112(sp)
   5a690:	d8801b15 	stw	r2,108(sp)
   5a694:	a8bff60e 	bge	r21,r2,5a670 <__alt_data_end+0xfffda670>
   5a698:	d9801a04 	addi	r6,sp,104
   5a69c:	900b883a 	mov	r5,r18
   5a6a0:	8009883a 	mov	r4,r16
   5a6a4:	00597180 	call	59718 <__ssprint_r>
   5a6a8:	103fcf1e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a6ac:	8c7ffc04 	addi	r17,r17,-16
   5a6b0:	d8c01c17 	ldw	r3,112(sp)
   5a6b4:	d8801b17 	ldw	r2,108(sp)
   5a6b8:	d811883a 	mov	r8,sp
   5a6bc:	e47fef16 	blt	fp,r17,5a67c <__alt_data_end+0xfffda67c>
   5a6c0:	9825883a 	mov	r18,r19
   5a6c4:	dc002217 	ldw	r16,136(sp)
   5a6c8:	b827883a 	mov	r19,r23
   5a6cc:	882f883a 	mov	r23,r17
   5a6d0:	dc402817 	ldw	r17,160(sp)
   5a6d4:	d9402117 	ldw	r5,132(sp)
   5a6d8:	1dc7883a 	add	r3,r3,r23
   5a6dc:	10800044 	addi	r2,r2,1
   5a6e0:	41400015 	stw	r5,0(r8)
   5a6e4:	45c00115 	stw	r23,4(r8)
   5a6e8:	d8c01c15 	stw	r3,112(sp)
   5a6ec:	d8801b15 	stw	r2,108(sp)
   5a6f0:	010001c4 	movi	r4,7
   5a6f4:	2080b716 	blt	r4,r2,5a9d4 <___svfiprintf_internal_r+0x10ec>
   5a6f8:	42000204 	addi	r8,r8,8
   5a6fc:	003f3c06 	br	5a3f0 <__alt_data_end+0xfffda3f0>
   5a700:	d9402317 	ldw	r5,140(sp)
   5a704:	d9002717 	ldw	r4,156(sp)
   5a708:	d9801a04 	addi	r6,sp,104
   5a70c:	00597180 	call	59718 <__ssprint_r>
   5a710:	103fb51e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a714:	d8c01c17 	ldw	r3,112(sp)
   5a718:	d811883a 	mov	r8,sp
   5a71c:	003f7106 	br	5a4e4 <__alt_data_end+0xfffda4e4>
   5a720:	d9402317 	ldw	r5,140(sp)
   5a724:	d9002717 	ldw	r4,156(sp)
   5a728:	d9801a04 	addi	r6,sp,104
   5a72c:	00597180 	call	59718 <__ssprint_r>
   5a730:	103fa126 	beq	r2,zero,5a5b8 <__alt_data_end+0xfffda5b8>
   5a734:	003fac06 	br	5a5e8 <__alt_data_end+0xfffda5e8>
   5a738:	d9402317 	ldw	r5,140(sp)
   5a73c:	d9002717 	ldw	r4,156(sp)
   5a740:	d9801a04 	addi	r6,sp,104
   5a744:	00597180 	call	59718 <__ssprint_r>
   5a748:	103fa71e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a74c:	d811883a 	mov	r8,sp
   5a750:	003c9e06 	br	599cc <__alt_data_end+0xfffd99cc>
   5a754:	d9402317 	ldw	r5,140(sp)
   5a758:	d9002717 	ldw	r4,156(sp)
   5a75c:	d9801a04 	addi	r6,sp,104
   5a760:	00597180 	call	59718 <__ssprint_r>
   5a764:	103fa01e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a768:	d8c01c17 	ldw	r3,112(sp)
   5a76c:	d8801b17 	ldw	r2,108(sp)
   5a770:	d811883a 	mov	r8,sp
   5a774:	003f5206 	br	5a4c0 <__alt_data_end+0xfffda4c0>
   5a778:	d9402317 	ldw	r5,140(sp)
   5a77c:	d9002717 	ldw	r4,156(sp)
   5a780:	d9801a04 	addi	r6,sp,104
   5a784:	00597180 	call	59718 <__ssprint_r>
   5a788:	103f971e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a78c:	d8c01c17 	ldw	r3,112(sp)
   5a790:	d8801b17 	ldw	r2,108(sp)
   5a794:	d811883a 	mov	r8,sp
   5a798:	003f0506 	br	5a3b0 <__alt_data_end+0xfffda3b0>
   5a79c:	d9402317 	ldw	r5,140(sp)
   5a7a0:	d9002717 	ldw	r4,156(sp)
   5a7a4:	d9801a04 	addi	r6,sp,104
   5a7a8:	00597180 	call	59718 <__ssprint_r>
   5a7ac:	103f8e1e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a7b0:	d8c01c17 	ldw	r3,112(sp)
   5a7b4:	d8801b17 	ldw	r2,108(sp)
   5a7b8:	d811883a 	mov	r8,sp
   5a7bc:	003f0906 	br	5a3e4 <__alt_data_end+0xfffda3e4>
   5a7c0:	d9402017 	ldw	r5,128(sp)
   5a7c4:	d8001d85 	stb	zero,118(sp)
   5a7c8:	28007716 	blt	r5,zero,5a9a8 <___svfiprintf_internal_r+0x10c0>
   5a7cc:	00ffdfc4 	movi	r3,-129
   5a7d0:	9504b03a 	or	r2,r18,r20
   5a7d4:	80e0703a 	and	r16,r16,r3
   5a7d8:	103d3926 	beq	r2,zero,59cc0 <__alt_data_end+0xfffd9cc0>
   5a7dc:	002b883a 	mov	r21,zero
   5a7e0:	003d3c06 	br	59cd4 <__alt_data_end+0xfffd9cd4>
   5a7e4:	d9402317 	ldw	r5,140(sp)
   5a7e8:	d9002717 	ldw	r4,156(sp)
   5a7ec:	d9801a04 	addi	r6,sp,104
   5a7f0:	00597180 	call	59718 <__ssprint_r>
   5a7f4:	103f7c1e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a7f8:	d8c01c17 	ldw	r3,112(sp)
   5a7fc:	d8801b17 	ldw	r2,108(sp)
   5a800:	d811883a 	mov	r8,sp
   5a804:	003edd06 	br	5a37c <__alt_data_end+0xfffda37c>
   5a808:	8080100c 	andi	r2,r16,64
   5a80c:	d8001d85 	stb	zero,118(sp)
   5a810:	10008426 	beq	r2,zero,5aa24 <___svfiprintf_internal_r+0x113c>
   5a814:	d9402417 	ldw	r5,144(sp)
   5a818:	d8c02017 	ldw	r3,128(sp)
   5a81c:	0029883a 	mov	r20,zero
   5a820:	28800104 	addi	r2,r5,4
   5a824:	2c80000b 	ldhu	r18,0(r5)
   5a828:	183eab0e 	bge	r3,zero,5a2d8 <__alt_data_end+0xfffda2d8>
   5a82c:	d8802415 	stw	r2,144(sp)
   5a830:	002b883a 	mov	r21,zero
   5a834:	9504b03a 	or	r2,r18,r20
   5a838:	103e171e 	bne	r2,zero,5a098 <__alt_data_end+0xfffda098>
   5a83c:	00800044 	movi	r2,1
   5a840:	10803fcc 	andi	r2,r2,255
   5a844:	00c00044 	movi	r3,1
   5a848:	10c05c26 	beq	r2,r3,5a9bc <___svfiprintf_internal_r+0x10d4>
   5a84c:	00c00084 	movi	r3,2
   5a850:	10fd1e26 	beq	r2,r3,59ccc <__alt_data_end+0xfffd9ccc>
   5a854:	003ec406 	br	5a368 <__alt_data_end+0xfffda368>
   5a858:	d9401e17 	ldw	r5,120(sp)
   5a85c:	2c69c83a 	sub	r20,r5,r17
   5a860:	003d4506 	br	59d78 <__alt_data_end+0xfffd9d78>
   5a864:	d8802415 	stw	r2,144(sp)
   5a868:	98c00007 	ldb	r3,0(r19)
   5a86c:	003c6a06 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a870:	d9402317 	ldw	r5,140(sp)
   5a874:	d9002717 	ldw	r4,156(sp)
   5a878:	d9801a04 	addi	r6,sp,104
   5a87c:	00597180 	call	59718 <__ssprint_r>
   5a880:	103f591e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a884:	d8c01c17 	ldw	r3,112(sp)
   5a888:	003f4406 	br	5a59c <__alt_data_end+0xfffda59c>
   5a88c:	014001f4 	movhi	r5,7
   5a890:	296e7904 	addi	r5,r5,-17948
   5a894:	d9402915 	stw	r5,164(sp)
   5a898:	003d0906 	br	59cc0 <__alt_data_end+0xfffd9cc0>
   5a89c:	d8c02417 	ldw	r3,144(sp)
   5a8a0:	d9002617 	ldw	r4,152(sp)
   5a8a4:	d9402417 	ldw	r5,144(sp)
   5a8a8:	18800017 	ldw	r2,0(r3)
   5a8ac:	2007d7fa 	srai	r3,r4,31
   5a8b0:	29400104 	addi	r5,r5,4
   5a8b4:	d9402415 	stw	r5,144(sp)
   5a8b8:	11000015 	stw	r4,0(r2)
   5a8bc:	10c00115 	stw	r3,4(r2)
   5a8c0:	003c2b06 	br	59970 <__alt_data_end+0xfffd9970>
   5a8c4:	d8c01d45 	stb	r3,117(sp)
   5a8c8:	d8c02017 	ldw	r3,128(sp)
   5a8cc:	00800c04 	movi	r2,48
   5a8d0:	d8801d05 	stb	r2,116(sp)
   5a8d4:	d8001d85 	stb	zero,118(sp)
   5a8d8:	80800094 	ori	r2,r16,2
   5a8dc:	1800ac16 	blt	r3,zero,5ab90 <___svfiprintf_internal_r+0x12a8>
   5a8e0:	00bfdfc4 	movi	r2,-129
   5a8e4:	80a0703a 	and	r16,r16,r2
   5a8e8:	84000094 	ori	r16,r16,2
   5a8ec:	002b883a 	mov	r21,zero
   5a8f0:	003cf806 	br	59cd4 <__alt_data_end+0xfffd9cd4>
   5a8f4:	98c00007 	ldb	r3,0(r19)
   5a8f8:	003c4706 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a8fc:	d9402417 	ldw	r5,144(sp)
   5a900:	2c800017 	ldw	r18,0(r5)
   5a904:	29400104 	addi	r5,r5,4
   5a908:	d9402415 	stw	r5,144(sp)
   5a90c:	9029d7fa 	srai	r20,r18,31
   5a910:	a005883a 	mov	r2,r20
   5a914:	003dd806 	br	5a078 <__alt_data_end+0xfffda078>
   5a918:	d9402417 	ldw	r5,144(sp)
   5a91c:	0029883a 	mov	r20,zero
   5a920:	2c800017 	ldw	r18,0(r5)
   5a924:	29400104 	addi	r5,r5,4
   5a928:	d9402415 	stw	r5,144(sp)
   5a92c:	003cdb06 	br	59c9c <__alt_data_end+0xfffd9c9c>
   5a930:	8080100c 	andi	r2,r16,64
   5a934:	d8001d85 	stb	zero,118(sp)
   5a938:	10003326 	beq	r2,zero,5aa08 <___svfiprintf_internal_r+0x1120>
   5a93c:	d9002417 	ldw	r4,144(sp)
   5a940:	d9402017 	ldw	r5,128(sp)
   5a944:	0029883a 	mov	r20,zero
   5a948:	20800104 	addi	r2,r4,4
   5a94c:	2480000b 	ldhu	r18,0(r4)
   5a950:	283e7e0e 	bge	r5,zero,5a34c <__alt_data_end+0xfffda34c>
   5a954:	9506b03a 	or	r3,r18,r20
   5a958:	d8802415 	stw	r2,144(sp)
   5a95c:	183d271e 	bne	r3,zero,59dfc <__alt_data_end+0xfffd9dfc>
   5a960:	002b883a 	mov	r21,zero
   5a964:	0005883a 	mov	r2,zero
   5a968:	003fb506 	br	5a840 <__alt_data_end+0xfffda840>
   5a96c:	98c00043 	ldbu	r3,1(r19)
   5a970:	8c400814 	ori	r17,r17,32
   5a974:	9cc00044 	addi	r19,r19,1
   5a978:	18c03fcc 	andi	r3,r3,255
   5a97c:	18c0201c 	xori	r3,r3,128
   5a980:	18ffe004 	addi	r3,r3,-128
   5a984:	003c2406 	br	59a18 <__alt_data_end+0xfffd9a18>
   5a988:	d8c02415 	stw	r3,144(sp)
   5a98c:	002b883a 	mov	r21,zero
   5a990:	003fa806 	br	5a834 <__alt_data_end+0xfffda834>
   5a994:	010001f4 	movhi	r4,7
   5a998:	212e7904 	addi	r4,r4,-17948
   5a99c:	d9002915 	stw	r4,164(sp)
   5a9a0:	d8c02415 	stw	r3,144(sp)
   5a9a4:	1021883a 	mov	r16,r2
   5a9a8:	9504b03a 	or	r2,r18,r20
   5a9ac:	103f8b1e 	bne	r2,zero,5a7dc <__alt_data_end+0xfffda7dc>
   5a9b0:	002b883a 	mov	r21,zero
   5a9b4:	00800084 	movi	r2,2
   5a9b8:	003fa106 	br	5a840 <__alt_data_end+0xfffda840>
   5a9bc:	0025883a 	mov	r18,zero
   5a9c0:	94800c04 	addi	r18,r18,48
   5a9c4:	dc8019c5 	stb	r18,103(sp)
   5a9c8:	dd002c17 	ldw	r20,176(sp)
   5a9cc:	dc4019c4 	addi	r17,sp,103
   5a9d0:	003ce906 	br	59d78 <__alt_data_end+0xfffd9d78>
   5a9d4:	d9402317 	ldw	r5,140(sp)
   5a9d8:	d9002717 	ldw	r4,156(sp)
   5a9dc:	d9801a04 	addi	r6,sp,104
   5a9e0:	00597180 	call	59718 <__ssprint_r>
   5a9e4:	103f001e 	bne	r2,zero,5a5e8 <__alt_data_end+0xfffda5e8>
   5a9e8:	d8c01c17 	ldw	r3,112(sp)
   5a9ec:	d8801b17 	ldw	r2,108(sp)
   5a9f0:	d811883a 	mov	r8,sp
   5a9f4:	003e7e06 	br	5a3f0 <__alt_data_end+0xfffda3f0>
   5a9f8:	014001f4 	movhi	r5,7
   5a9fc:	296ee104 	addi	r5,r5,-17532
   5aa00:	d9402115 	stw	r5,132(sp)
   5aa04:	003ea406 	br	5a498 <__alt_data_end+0xfffda498>
   5aa08:	d8c02417 	ldw	r3,144(sp)
   5aa0c:	d9002017 	ldw	r4,128(sp)
   5aa10:	0029883a 	mov	r20,zero
   5aa14:	18800104 	addi	r2,r3,4
   5aa18:	1c800017 	ldw	r18,0(r3)
   5aa1c:	203e4b0e 	bge	r4,zero,5a34c <__alt_data_end+0xfffda34c>
   5aa20:	003fcc06 	br	5a954 <__alt_data_end+0xfffda954>
   5aa24:	d9002417 	ldw	r4,144(sp)
   5aa28:	d9402017 	ldw	r5,128(sp)
   5aa2c:	0029883a 	mov	r20,zero
   5aa30:	20800104 	addi	r2,r4,4
   5aa34:	24800017 	ldw	r18,0(r4)
   5aa38:	283e270e 	bge	r5,zero,5a2d8 <__alt_data_end+0xfffda2d8>
   5aa3c:	003f7b06 	br	5a82c <__alt_data_end+0xfffda82c>
   5aa40:	8400100c 	andi	r16,r16,64
   5aa44:	80003326 	beq	r16,zero,5ab14 <___svfiprintf_internal_r+0x122c>
   5aa48:	d9402417 	ldw	r5,144(sp)
   5aa4c:	d8c02617 	ldw	r3,152(sp)
   5aa50:	28800017 	ldw	r2,0(r5)
   5aa54:	29400104 	addi	r5,r5,4
   5aa58:	d9402415 	stw	r5,144(sp)
   5aa5c:	10c0000d 	sth	r3,0(r2)
   5aa60:	003bc306 	br	59970 <__alt_data_end+0xfffd9970>
   5aa64:	d9002417 	ldw	r4,144(sp)
   5aa68:	0029883a 	mov	r20,zero
   5aa6c:	24800017 	ldw	r18,0(r4)
   5aa70:	21000104 	addi	r4,r4,4
   5aa74:	d9002415 	stw	r4,144(sp)
   5aa78:	003c8806 	br	59c9c <__alt_data_end+0xfffd9c9c>
   5aa7c:	d8c02417 	ldw	r3,144(sp)
   5aa80:	1c800017 	ldw	r18,0(r3)
   5aa84:	18c00104 	addi	r3,r3,4
   5aa88:	d8c02415 	stw	r3,144(sp)
   5aa8c:	9029d7fa 	srai	r20,r18,31
   5aa90:	a005883a 	mov	r2,r20
   5aa94:	003d7806 	br	5a078 <__alt_data_end+0xfffda078>
   5aa98:	8809883a 	mov	r4,r17
   5aa9c:	da002d15 	stw	r8,180(sp)
   5aaa0:	005071c0 	call	5071c <strlen>
   5aaa4:	1029883a 	mov	r20,r2
   5aaa8:	dd401d83 	ldbu	r21,118(sp)
   5aaac:	ddc02415 	stw	r23,144(sp)
   5aab0:	d8002015 	stw	zero,128(sp)
   5aab4:	da002d17 	ldw	r8,180(sp)
   5aab8:	003caf06 	br	59d78 <__alt_data_end+0xfffd9d78>
   5aabc:	013fffc4 	movi	r4,-1
   5aac0:	003df206 	br	5a28c <__alt_data_end+0xfffda28c>
   5aac4:	dd002017 	ldw	r20,128(sp)
   5aac8:	00800184 	movi	r2,6
   5aacc:	1500012e 	bgeu	r2,r20,5aad4 <___svfiprintf_internal_r+0x11ec>
   5aad0:	1029883a 	mov	r20,r2
   5aad4:	a025883a 	mov	r18,r20
   5aad8:	a0004116 	blt	r20,zero,5abe0 <___svfiprintf_internal_r+0x12f8>
   5aadc:	044001f4 	movhi	r17,7
   5aae0:	ddc02415 	stw	r23,144(sp)
   5aae4:	8c6e7e04 	addi	r17,r17,-17928
   5aae8:	003ce806 	br	59e8c <__alt_data_end+0xfffd9e8c>
   5aaec:	04001004 	movi	r16,64
   5aaf0:	800b883a 	mov	r5,r16
   5aaf4:	004f6480 	call	4f648 <_malloc_r>
   5aaf8:	d8c02317 	ldw	r3,140(sp)
   5aafc:	18800015 	stw	r2,0(r3)
   5ab00:	18800415 	stw	r2,16(r3)
   5ab04:	10004d26 	beq	r2,zero,5ac3c <___svfiprintf_internal_r+0x1354>
   5ab08:	d9402317 	ldw	r5,140(sp)
   5ab0c:	2c000515 	stw	r16,20(r5)
   5ab10:	003b8906 	br	59938 <__alt_data_end+0xfffd9938>
   5ab14:	d9002417 	ldw	r4,144(sp)
   5ab18:	d9402617 	ldw	r5,152(sp)
   5ab1c:	20800017 	ldw	r2,0(r4)
   5ab20:	21000104 	addi	r4,r4,4
   5ab24:	d9002415 	stw	r4,144(sp)
   5ab28:	11400015 	stw	r5,0(r2)
   5ab2c:	003b9006 	br	59970 <__alt_data_end+0xfffd9970>
   5ab30:	8080004c 	andi	r2,r16,1
   5ab34:	002b883a 	mov	r21,zero
   5ab38:	10000526 	beq	r2,zero,5ab50 <___svfiprintf_internal_r+0x1268>
   5ab3c:	00800c04 	movi	r2,48
   5ab40:	d88019c5 	stb	r2,103(sp)
   5ab44:	dd002c17 	ldw	r20,176(sp)
   5ab48:	dc4019c4 	addi	r17,sp,103
   5ab4c:	003c8a06 	br	59d78 <__alt_data_end+0xfffd9d78>
   5ab50:	0029883a 	mov	r20,zero
   5ab54:	dc401a04 	addi	r17,sp,104
   5ab58:	003c8706 	br	59d78 <__alt_data_end+0xfffd9d78>
   5ab5c:	014001f4 	movhi	r5,7
   5ab60:	296ee504 	addi	r5,r5,-17516
   5ab64:	d9402815 	stw	r5,160(sp)
   5ab68:	003cff06 	br	59f68 <__alt_data_end+0xfffd9f68>
   5ab6c:	00bfffc4 	movi	r2,-1
   5ab70:	003ea206 	br	5a5fc <__alt_data_end+0xfffda5fc>
   5ab74:	00800044 	movi	r2,1
   5ab78:	10803fcc 	andi	r2,r2,255
   5ab7c:	00c00044 	movi	r3,1
   5ab80:	10fd4526 	beq	r2,r3,5a098 <__alt_data_end+0xfffda098>
   5ab84:	00c00084 	movi	r3,2
   5ab88:	10fc5226 	beq	r2,r3,59cd4 <__alt_data_end+0xfffd9cd4>
   5ab8c:	003c9c06 	br	59e00 <__alt_data_end+0xfffd9e00>
   5ab90:	1021883a 	mov	r16,r2
   5ab94:	002b883a 	mov	r21,zero
   5ab98:	00800084 	movi	r2,2
   5ab9c:	003ff606 	br	5ab78 <__alt_data_end+0xfffdab78>
   5aba0:	010001f4 	movhi	r4,7
   5aba4:	212ee504 	addi	r4,r4,-17516
   5aba8:	d9002815 	stw	r4,160(sp)
   5abac:	003e7206 	br	5a578 <__alt_data_end+0xfffda578>
   5abb0:	014001f4 	movhi	r5,7
   5abb4:	296ee104 	addi	r5,r5,-17532
   5abb8:	d9402115 	stw	r5,132(sp)
   5abbc:	003ec506 	br	5a6d4 <__alt_data_end+0xfffda6d4>
   5abc0:	e027883a 	mov	r19,fp
   5abc4:	d8002015 	stw	zero,128(sp)
   5abc8:	003b9406 	br	59a1c <__alt_data_end+0xfffd9a1c>
   5abcc:	dd002017 	ldw	r20,128(sp)
   5abd0:	dd401d83 	ldbu	r21,118(sp)
   5abd4:	ddc02415 	stw	r23,144(sp)
   5abd8:	d8002015 	stw	zero,128(sp)
   5abdc:	003c6606 	br	59d78 <__alt_data_end+0xfffd9d78>
   5abe0:	0025883a 	mov	r18,zero
   5abe4:	003fbd06 	br	5aadc <__alt_data_end+0xfffdaadc>
   5abe8:	d9402417 	ldw	r5,144(sp)
   5abec:	d8c02417 	ldw	r3,144(sp)
   5abf0:	29400017 	ldw	r5,0(r5)
   5abf4:	19000104 	addi	r4,r3,4
   5abf8:	d9002415 	stw	r4,144(sp)
   5abfc:	d9402015 	stw	r5,128(sp)
   5ac00:	98c00043 	ldbu	r3,1(r19)
   5ac04:	e027883a 	mov	r19,fp
   5ac08:	283f5b0e 	bge	r5,zero,5a978 <__alt_data_end+0xfffda978>
   5ac0c:	18c03fcc 	andi	r3,r3,255
   5ac10:	013fffc4 	movi	r4,-1
   5ac14:	18c0201c 	xori	r3,r3,128
   5ac18:	d9002015 	stw	r4,128(sp)
   5ac1c:	18ffe004 	addi	r3,r3,-128
   5ac20:	003b7d06 	br	59a18 <__alt_data_end+0xfffd9a18>
   5ac24:	dd401d85 	stb	r21,118(sp)
   5ac28:	003cf306 	br	59ff8 <__alt_data_end+0xfffd9ff8>
   5ac2c:	dd401d85 	stb	r21,118(sp)
   5ac30:	003d4e06 	br	5a16c <__alt_data_end+0xfffda16c>
   5ac34:	dd401d85 	stb	r21,118(sp)
   5ac38:	003c0e06 	br	59c74 <__alt_data_end+0xfffd9c74>
   5ac3c:	d9002717 	ldw	r4,156(sp)
   5ac40:	00800304 	movi	r2,12
   5ac44:	20800015 	stw	r2,0(r4)
   5ac48:	00bfffc4 	movi	r2,-1
   5ac4c:	003e6b06 	br	5a5fc <__alt_data_end+0xfffda5fc>
   5ac50:	dd401d85 	stb	r21,118(sp)
   5ac54:	003d0006 	br	5a058 <__alt_data_end+0xfffda058>
   5ac58:	dd401d85 	stb	r21,118(sp)
   5ac5c:	003d7106 	br	5a224 <__alt_data_end+0xfffda224>
   5ac60:	dd401d85 	stb	r21,118(sp)
   5ac64:	003c5706 	br	59dc4 <__alt_data_end+0xfffd9dc4>
   5ac68:	dd401d85 	stb	r21,118(sp)
   5ac6c:	003c2e06 	br	59d28 <__alt_data_end+0xfffd9d28>
   5ac70:	dd401d85 	stb	r21,118(sp)
   5ac74:	003d8c06 	br	5a2a8 <__alt_data_end+0xfffda2a8>
   5ac78:	dd401d85 	stb	r21,118(sp)
   5ac7c:	003da706 	br	5a31c <__alt_data_end+0xfffda31c>
   5ac80:	dd401d85 	stb	r21,118(sp)
   5ac84:	003cc806 	br	59fa8 <__alt_data_end+0xfffd9fa8>

0005ac88 <__sprint_r.part.0>:
   5ac88:	28801917 	ldw	r2,100(r5)
   5ac8c:	defff604 	addi	sp,sp,-40
   5ac90:	dd400515 	stw	r21,20(sp)
   5ac94:	dfc00915 	stw	ra,36(sp)
   5ac98:	df000815 	stw	fp,32(sp)
   5ac9c:	ddc00715 	stw	r23,28(sp)
   5aca0:	dd800615 	stw	r22,24(sp)
   5aca4:	dd000415 	stw	r20,16(sp)
   5aca8:	dcc00315 	stw	r19,12(sp)
   5acac:	dc800215 	stw	r18,8(sp)
   5acb0:	dc400115 	stw	r17,4(sp)
   5acb4:	dc000015 	stw	r16,0(sp)
   5acb8:	1088000c 	andi	r2,r2,8192
   5acbc:	302b883a 	mov	r21,r6
   5acc0:	10002e26 	beq	r2,zero,5ad7c <__sprint_r.part.0+0xf4>
   5acc4:	30800217 	ldw	r2,8(r6)
   5acc8:	35800017 	ldw	r22,0(r6)
   5accc:	10002926 	beq	r2,zero,5ad74 <__sprint_r.part.0+0xec>
   5acd0:	2827883a 	mov	r19,r5
   5acd4:	2029883a 	mov	r20,r4
   5acd8:	b5c00104 	addi	r23,r22,4
   5acdc:	04bfffc4 	movi	r18,-1
   5ace0:	bc400017 	ldw	r17,0(r23)
   5ace4:	b4000017 	ldw	r16,0(r22)
   5ace8:	0039883a 	mov	fp,zero
   5acec:	8822d0ba 	srli	r17,r17,2
   5acf0:	8800031e 	bne	r17,zero,5ad00 <__sprint_r.part.0+0x78>
   5acf4:	00001806 	br	5ad58 <__sprint_r.part.0+0xd0>
   5acf8:	84000104 	addi	r16,r16,4
   5acfc:	8f001526 	beq	r17,fp,5ad54 <__sprint_r.part.0+0xcc>
   5ad00:	81400017 	ldw	r5,0(r16)
   5ad04:	980d883a 	mov	r6,r19
   5ad08:	a009883a 	mov	r4,r20
   5ad0c:	005c8d00 	call	5c8d0 <_fputwc_r>
   5ad10:	e7000044 	addi	fp,fp,1
   5ad14:	14bff81e 	bne	r2,r18,5acf8 <__alt_data_end+0xfffdacf8>
   5ad18:	9005883a 	mov	r2,r18
   5ad1c:	a8000215 	stw	zero,8(r21)
   5ad20:	a8000115 	stw	zero,4(r21)
   5ad24:	dfc00917 	ldw	ra,36(sp)
   5ad28:	df000817 	ldw	fp,32(sp)
   5ad2c:	ddc00717 	ldw	r23,28(sp)
   5ad30:	dd800617 	ldw	r22,24(sp)
   5ad34:	dd400517 	ldw	r21,20(sp)
   5ad38:	dd000417 	ldw	r20,16(sp)
   5ad3c:	dcc00317 	ldw	r19,12(sp)
   5ad40:	dc800217 	ldw	r18,8(sp)
   5ad44:	dc400117 	ldw	r17,4(sp)
   5ad48:	dc000017 	ldw	r16,0(sp)
   5ad4c:	dec00a04 	addi	sp,sp,40
   5ad50:	f800283a 	ret
   5ad54:	a8800217 	ldw	r2,8(r21)
   5ad58:	8c63883a 	add	r17,r17,r17
   5ad5c:	8c63883a 	add	r17,r17,r17
   5ad60:	1445c83a 	sub	r2,r2,r17
   5ad64:	a8800215 	stw	r2,8(r21)
   5ad68:	b5800204 	addi	r22,r22,8
   5ad6c:	bdc00204 	addi	r23,r23,8
   5ad70:	103fdb1e 	bne	r2,zero,5ace0 <__alt_data_end+0xfffdace0>
   5ad74:	0005883a 	mov	r2,zero
   5ad78:	003fe806 	br	5ad1c <__alt_data_end+0xfffdad1c>
   5ad7c:	00572bc0 	call	572bc <__sfvwrite_r>
   5ad80:	003fe606 	br	5ad1c <__alt_data_end+0xfffdad1c>

0005ad84 <__sprint_r>:
   5ad84:	30c00217 	ldw	r3,8(r6)
   5ad88:	18000126 	beq	r3,zero,5ad90 <__sprint_r+0xc>
   5ad8c:	005ac881 	jmpi	5ac88 <__sprint_r.part.0>
   5ad90:	30000115 	stw	zero,4(r6)
   5ad94:	0005883a 	mov	r2,zero
   5ad98:	f800283a 	ret

0005ad9c <___vfiprintf_internal_r>:
   5ad9c:	deffca04 	addi	sp,sp,-216
   5ada0:	dd403115 	stw	r21,196(sp)
   5ada4:	dfc03515 	stw	ra,212(sp)
   5ada8:	df003415 	stw	fp,208(sp)
   5adac:	ddc03315 	stw	r23,204(sp)
   5adb0:	dd803215 	stw	r22,200(sp)
   5adb4:	dd003015 	stw	r20,192(sp)
   5adb8:	dcc02f15 	stw	r19,188(sp)
   5adbc:	dc802e15 	stw	r18,184(sp)
   5adc0:	dc402d15 	stw	r17,180(sp)
   5adc4:	dc002c15 	stw	r16,176(sp)
   5adc8:	d9002115 	stw	r4,132(sp)
   5adcc:	d9402015 	stw	r5,128(sp)
   5add0:	d9c02215 	stw	r7,136(sp)
   5add4:	302b883a 	mov	r21,r6
   5add8:	20000226 	beq	r4,zero,5ade4 <___vfiprintf_internal_r+0x48>
   5addc:	20800e17 	ldw	r2,56(r4)
   5ade0:	1000cf26 	beq	r2,zero,5b120 <___vfiprintf_internal_r+0x384>
   5ade4:	d8c02017 	ldw	r3,128(sp)
   5ade8:	1880030b 	ldhu	r2,12(r3)
   5adec:	10c8000c 	andi	r3,r2,8192
   5adf0:	1800071e 	bne	r3,zero,5ae10 <___vfiprintf_internal_r+0x74>
   5adf4:	d9402017 	ldw	r5,128(sp)
   5adf8:	00f7ffc4 	movi	r3,-8193
   5adfc:	10880014 	ori	r2,r2,8192
   5ae00:	29001917 	ldw	r4,100(r5)
   5ae04:	2880030d 	sth	r2,12(r5)
   5ae08:	20c6703a 	and	r3,r4,r3
   5ae0c:	28c01915 	stw	r3,100(r5)
   5ae10:	10c0020c 	andi	r3,r2,8
   5ae14:	1800a526 	beq	r3,zero,5b0ac <___vfiprintf_internal_r+0x310>
   5ae18:	d9002017 	ldw	r4,128(sp)
   5ae1c:	20c00417 	ldw	r3,16(r4)
   5ae20:	1800a226 	beq	r3,zero,5b0ac <___vfiprintf_internal_r+0x310>
   5ae24:	1080068c 	andi	r2,r2,26
   5ae28:	00c00284 	movi	r3,10
   5ae2c:	10c0a826 	beq	r2,r3,5b0d0 <___vfiprintf_internal_r+0x334>
   5ae30:	d9001a04 	addi	r4,sp,104
   5ae34:	d94019c4 	addi	r5,sp,103
   5ae38:	048001f4 	movhi	r18,7
   5ae3c:	2145c83a 	sub	r2,r4,r5
   5ae40:	94aee904 	addi	r18,r18,-17500
   5ae44:	d9001e15 	stw	r4,120(sp)
   5ae48:	d9401f15 	stw	r5,124(sp)
   5ae4c:	dec01a15 	stw	sp,104(sp)
   5ae50:	d8001c15 	stw	zero,112(sp)
   5ae54:	d8001b15 	stw	zero,108(sp)
   5ae58:	d811883a 	mov	r8,sp
   5ae5c:	d8002615 	stw	zero,152(sp)
   5ae60:	d8002415 	stw	zero,144(sp)
   5ae64:	d8802815 	stw	r2,160(sp)
   5ae68:	a82d883a 	mov	r22,r21
   5ae6c:	b0800007 	ldb	r2,0(r22)
   5ae70:	10040d26 	beq	r2,zero,5bea8 <___vfiprintf_internal_r+0x110c>
   5ae74:	00c00944 	movi	r3,37
   5ae78:	b029883a 	mov	r20,r22
   5ae7c:	10c0021e 	bne	r2,r3,5ae88 <___vfiprintf_internal_r+0xec>
   5ae80:	00001606 	br	5aedc <___vfiprintf_internal_r+0x140>
   5ae84:	10c00326 	beq	r2,r3,5ae94 <___vfiprintf_internal_r+0xf8>
   5ae88:	a5000044 	addi	r20,r20,1
   5ae8c:	a0800007 	ldb	r2,0(r20)
   5ae90:	103ffc1e 	bne	r2,zero,5ae84 <__alt_data_end+0xfffdae84>
   5ae94:	a5a1c83a 	sub	r16,r20,r22
   5ae98:	80001026 	beq	r16,zero,5aedc <___vfiprintf_internal_r+0x140>
   5ae9c:	d8c01c17 	ldw	r3,112(sp)
   5aea0:	d8801b17 	ldw	r2,108(sp)
   5aea4:	45800015 	stw	r22,0(r8)
   5aea8:	80c7883a 	add	r3,r16,r3
   5aeac:	10800044 	addi	r2,r2,1
   5aeb0:	44000115 	stw	r16,4(r8)
   5aeb4:	d8c01c15 	stw	r3,112(sp)
   5aeb8:	d8801b15 	stw	r2,108(sp)
   5aebc:	010001c4 	movi	r4,7
   5aec0:	2080750e 	bge	r4,r2,5b098 <___vfiprintf_internal_r+0x2fc>
   5aec4:	1803951e 	bne	r3,zero,5bd1c <___vfiprintf_internal_r+0xf80>
   5aec8:	d8c02417 	ldw	r3,144(sp)
   5aecc:	d8001b15 	stw	zero,108(sp)
   5aed0:	d811883a 	mov	r8,sp
   5aed4:	1c07883a 	add	r3,r3,r16
   5aed8:	d8c02415 	stw	r3,144(sp)
   5aedc:	a0800007 	ldb	r2,0(r20)
   5aee0:	1002e026 	beq	r2,zero,5ba64 <___vfiprintf_internal_r+0xcc8>
   5aee4:	a5800044 	addi	r22,r20,1
   5aee8:	a0c00047 	ldb	r3,1(r20)
   5aeec:	d8001d85 	stb	zero,118(sp)
   5aef0:	0027883a 	mov	r19,zero
   5aef4:	d8002305 	stb	zero,140(sp)
   5aef8:	043fffc4 	movi	r16,-1
   5aefc:	d8002515 	stw	zero,148(sp)
   5af00:	0023883a 	mov	r17,zero
   5af04:	05001604 	movi	r20,88
   5af08:	05400244 	movi	r21,9
   5af0c:	402f883a 	mov	r23,r8
   5af10:	b5800044 	addi	r22,r22,1
   5af14:	18bff804 	addi	r2,r3,-32
   5af18:	a0827736 	bltu	r20,r2,5b8f8 <___vfiprintf_internal_r+0xb5c>
   5af1c:	100490ba 	slli	r2,r2,2
   5af20:	010001b4 	movhi	r4,6
   5af24:	212bcd04 	addi	r4,r4,-20684
   5af28:	1105883a 	add	r2,r2,r4
   5af2c:	10800017 	ldw	r2,0(r2)
   5af30:	1000683a 	jmp	r2
   5af34:	0005b5f8 	rdprs	zero,zero,5847
   5af38:	0005b8f8 	rdprs	zero,zero,5859
   5af3c:	0005b8f8 	rdprs	zero,zero,5859
   5af40:	0005b614 	movui	zero,5848
   5af44:	0005b8f8 	rdprs	zero,zero,5859
   5af48:	0005b8f8 	rdprs	zero,zero,5859
   5af4c:	0005b8f8 	rdprs	zero,zero,5859
   5af50:	0005b8f8 	rdprs	zero,zero,5859
   5af54:	0005b8f8 	rdprs	zero,zero,5859
   5af58:	0005b8f8 	rdprs	zero,zero,5859
   5af5c:	0005b81c 	xori	zero,zero,5856
   5af60:	0005b840 	call	5b84 <__alt_mem_onchip_memory2_0-0x3a47c>
   5af64:	0005b8f8 	rdprs	zero,zero,5859
   5af68:	0005b138 	rdprs	zero,zero,5828
   5af6c:	0005b854 	movui	zero,5857
   5af70:	0005b8f8 	rdprs	zero,zero,5859
   5af74:	0005b620 	cmpeqi	zero,zero,5848
   5af78:	0005b62c 	andhi	zero,zero,5848
   5af7c:	0005b62c 	andhi	zero,zero,5848
   5af80:	0005b62c 	andhi	zero,zero,5848
   5af84:	0005b62c 	andhi	zero,zero,5848
   5af88:	0005b62c 	andhi	zero,zero,5848
   5af8c:	0005b62c 	andhi	zero,zero,5848
   5af90:	0005b62c 	andhi	zero,zero,5848
   5af94:	0005b62c 	andhi	zero,zero,5848
   5af98:	0005b62c 	andhi	zero,zero,5848
   5af9c:	0005b8f8 	rdprs	zero,zero,5859
   5afa0:	0005b8f8 	rdprs	zero,zero,5859
   5afa4:	0005b8f8 	rdprs	zero,zero,5859
   5afa8:	0005b8f8 	rdprs	zero,zero,5859
   5afac:	0005b8f8 	rdprs	zero,zero,5859
   5afb0:	0005b8f8 	rdprs	zero,zero,5859
   5afb4:	0005b8f8 	rdprs	zero,zero,5859
   5afb8:	0005b8f8 	rdprs	zero,zero,5859
   5afbc:	0005b8f8 	rdprs	zero,zero,5859
   5afc0:	0005b8f8 	rdprs	zero,zero,5859
   5afc4:	0005b66c 	andhi	zero,zero,5849
   5afc8:	0005b8f8 	rdprs	zero,zero,5859
   5afcc:	0005b8f8 	rdprs	zero,zero,5859
   5afd0:	0005b8f8 	rdprs	zero,zero,5859
   5afd4:	0005b8f8 	rdprs	zero,zero,5859
   5afd8:	0005b8f8 	rdprs	zero,zero,5859
   5afdc:	0005b8f8 	rdprs	zero,zero,5859
   5afe0:	0005b8f8 	rdprs	zero,zero,5859
   5afe4:	0005b8f8 	rdprs	zero,zero,5859
   5afe8:	0005b8f8 	rdprs	zero,zero,5859
   5afec:	0005b8f8 	rdprs	zero,zero,5859
   5aff0:	0005b6a8 	cmpgeui	zero,zero,5850
   5aff4:	0005b8f8 	rdprs	zero,zero,5859
   5aff8:	0005b8f8 	rdprs	zero,zero,5859
   5affc:	0005b8f8 	rdprs	zero,zero,5859
   5b000:	0005b8f8 	rdprs	zero,zero,5859
   5b004:	0005b8f8 	rdprs	zero,zero,5859
   5b008:	0005b704 	movi	zero,5852
   5b00c:	0005b8f8 	rdprs	zero,zero,5859
   5b010:	0005b8f8 	rdprs	zero,zero,5859
   5b014:	0005b778 	rdprs	zero,zero,5853
   5b018:	0005b8f8 	rdprs	zero,zero,5859
   5b01c:	0005b8f8 	rdprs	zero,zero,5859
   5b020:	0005b8f8 	rdprs	zero,zero,5859
   5b024:	0005b8f8 	rdprs	zero,zero,5859
   5b028:	0005b8f8 	rdprs	zero,zero,5859
   5b02c:	0005b8f8 	rdprs	zero,zero,5859
   5b030:	0005b8f8 	rdprs	zero,zero,5859
   5b034:	0005b8f8 	rdprs	zero,zero,5859
   5b038:	0005b8f8 	rdprs	zero,zero,5859
   5b03c:	0005b8f8 	rdprs	zero,zero,5859
   5b040:	0005b520 	cmpeqi	zero,zero,5844
   5b044:	0005b550 	cmplti	zero,zero,5845
   5b048:	0005b8f8 	rdprs	zero,zero,5859
   5b04c:	0005b8f8 	rdprs	zero,zero,5859
   5b050:	0005b8f8 	rdprs	zero,zero,5859
   5b054:	0005b8a0 	cmpeqi	zero,zero,5858
   5b058:	0005b550 	cmplti	zero,zero,5845
   5b05c:	0005b8f8 	rdprs	zero,zero,5859
   5b060:	0005b8f8 	rdprs	zero,zero,5859
   5b064:	0005b3f8 	rdprs	zero,zero,5839
   5b068:	0005b8f8 	rdprs	zero,zero,5859
   5b06c:	0005b40c 	andi	zero,zero,5840
   5b070:	0005b444 	movi	zero,5841
   5b074:	0005b144 	movi	zero,5829
   5b078:	0005b3ec 	andhi	zero,zero,5839
   5b07c:	0005b8f8 	rdprs	zero,zero,5859
   5b080:	0005b7b8 	rdprs	zero,zero,5854
   5b084:	0005b8f8 	rdprs	zero,zero,5859
   5b088:	0005b804 	movi	zero,5856
   5b08c:	0005b8f8 	rdprs	zero,zero,5859
   5b090:	0005b8f8 	rdprs	zero,zero,5859
   5b094:	0005b4c8 	cmpgei	zero,zero,5843
   5b098:	42000204 	addi	r8,r8,8
   5b09c:	d8c02417 	ldw	r3,144(sp)
   5b0a0:	1c07883a 	add	r3,r3,r16
   5b0a4:	d8c02415 	stw	r3,144(sp)
   5b0a8:	003f8c06 	br	5aedc <__alt_data_end+0xfffdaedc>
   5b0ac:	d9402017 	ldw	r5,128(sp)
   5b0b0:	d9002117 	ldw	r4,132(sp)
   5b0b4:	0054e2c0 	call	54e2c <__swsetup_r>
   5b0b8:	1003c11e 	bne	r2,zero,5bfc0 <___vfiprintf_internal_r+0x1224>
   5b0bc:	d9402017 	ldw	r5,128(sp)
   5b0c0:	00c00284 	movi	r3,10
   5b0c4:	2880030b 	ldhu	r2,12(r5)
   5b0c8:	1080068c 	andi	r2,r2,26
   5b0cc:	10ff581e 	bne	r2,r3,5ae30 <__alt_data_end+0xfffdae30>
   5b0d0:	d8c02017 	ldw	r3,128(sp)
   5b0d4:	1880038f 	ldh	r2,14(r3)
   5b0d8:	103f5516 	blt	r2,zero,5ae30 <__alt_data_end+0xfffdae30>
   5b0dc:	d9c02217 	ldw	r7,136(sp)
   5b0e0:	d9002117 	ldw	r4,132(sp)
   5b0e4:	a80d883a 	mov	r6,r21
   5b0e8:	180b883a 	mov	r5,r3
   5b0ec:	005c2c40 	call	5c2c4 <__sbprintf>
   5b0f0:	dfc03517 	ldw	ra,212(sp)
   5b0f4:	df003417 	ldw	fp,208(sp)
   5b0f8:	ddc03317 	ldw	r23,204(sp)
   5b0fc:	dd803217 	ldw	r22,200(sp)
   5b100:	dd403117 	ldw	r21,196(sp)
   5b104:	dd003017 	ldw	r20,192(sp)
   5b108:	dcc02f17 	ldw	r19,188(sp)
   5b10c:	dc802e17 	ldw	r18,184(sp)
   5b110:	dc402d17 	ldw	r17,180(sp)
   5b114:	dc002c17 	ldw	r16,176(sp)
   5b118:	dec03604 	addi	sp,sp,216
   5b11c:	f800283a 	ret
   5b120:	0056e380 	call	56e38 <__sinit>
   5b124:	003f2f06 	br	5ade4 <__alt_data_end+0xfffdade4>
   5b128:	d8c02517 	ldw	r3,148(sp)
   5b12c:	d8802215 	stw	r2,136(sp)
   5b130:	00c7c83a 	sub	r3,zero,r3
   5b134:	d8c02515 	stw	r3,148(sp)
   5b138:	8c400114 	ori	r17,r17,4
   5b13c:	b0c00007 	ldb	r3,0(r22)
   5b140:	003f7306 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b144:	00800c04 	movi	r2,48
   5b148:	d9402217 	ldw	r5,136(sp)
   5b14c:	d8801d05 	stb	r2,116(sp)
   5b150:	00801e04 	movi	r2,120
   5b154:	d8801d45 	stb	r2,117(sp)
   5b158:	d8001d85 	stb	zero,118(sp)
   5b15c:	b811883a 	mov	r8,r23
   5b160:	28c00104 	addi	r3,r5,4
   5b164:	2cc00017 	ldw	r19,0(r5)
   5b168:	0029883a 	mov	r20,zero
   5b16c:	88800094 	ori	r2,r17,2
   5b170:	80032516 	blt	r16,zero,5be08 <___vfiprintf_internal_r+0x106c>
   5b174:	00bfdfc4 	movi	r2,-129
   5b178:	88a2703a 	and	r17,r17,r2
   5b17c:	d8c02215 	stw	r3,136(sp)
   5b180:	8c400094 	ori	r17,r17,2
   5b184:	98032a1e 	bne	r19,zero,5be30 <___vfiprintf_internal_r+0x1094>
   5b188:	008001f4 	movhi	r2,7
   5b18c:	10ae7904 	addi	r2,r2,-17948
   5b190:	d8802615 	stw	r2,152(sp)
   5b194:	002b883a 	mov	r21,zero
   5b198:	8001741e 	bne	r16,zero,5b76c <___vfiprintf_internal_r+0x9d0>
   5b19c:	0021883a 	mov	r16,zero
   5b1a0:	0029883a 	mov	r20,zero
   5b1a4:	ddc01a04 	addi	r23,sp,104
   5b1a8:	8027883a 	mov	r19,r16
   5b1ac:	8500010e 	bge	r16,r20,5b1b4 <___vfiprintf_internal_r+0x418>
   5b1b0:	a027883a 	mov	r19,r20
   5b1b4:	ad403fcc 	andi	r21,r21,255
   5b1b8:	ad40201c 	xori	r21,r21,128
   5b1bc:	ad7fe004 	addi	r21,r21,-128
   5b1c0:	a8000126 	beq	r21,zero,5b1c8 <___vfiprintf_internal_r+0x42c>
   5b1c4:	9cc00044 	addi	r19,r19,1
   5b1c8:	89c0008c 	andi	r7,r17,2
   5b1cc:	38000126 	beq	r7,zero,5b1d4 <___vfiprintf_internal_r+0x438>
   5b1d0:	9cc00084 	addi	r19,r19,2
   5b1d4:	88c0210c 	andi	r3,r17,132
   5b1d8:	1801dd1e 	bne	r3,zero,5b950 <___vfiprintf_internal_r+0xbb4>
   5b1dc:	d9402517 	ldw	r5,148(sp)
   5b1e0:	2cebc83a 	sub	r21,r5,r19
   5b1e4:	0541da0e 	bge	zero,r21,5b950 <___vfiprintf_internal_r+0xbb4>
   5b1e8:	07000404 	movi	fp,16
   5b1ec:	d8801c17 	ldw	r2,112(sp)
   5b1f0:	e543be0e 	bge	fp,r21,5c0ec <___vfiprintf_internal_r+0x1350>
   5b1f4:	014001f4 	movhi	r5,7
   5b1f8:	296eed04 	addi	r5,r5,-17484
   5b1fc:	dc002715 	stw	r16,156(sp)
   5b200:	d9801b17 	ldw	r6,108(sp)
   5b204:	a821883a 	mov	r16,r21
   5b208:	d9402315 	stw	r5,140(sp)
   5b20c:	028001c4 	movi	r10,7
   5b210:	d9c02915 	stw	r7,164(sp)
   5b214:	182b883a 	mov	r21,r3
   5b218:	00000506 	br	5b230 <___vfiprintf_internal_r+0x494>
   5b21c:	31000084 	addi	r4,r6,2
   5b220:	42000204 	addi	r8,r8,8
   5b224:	180d883a 	mov	r6,r3
   5b228:	843ffc04 	addi	r16,r16,-16
   5b22c:	e4000f0e 	bge	fp,r16,5b26c <___vfiprintf_internal_r+0x4d0>
   5b230:	010001f4 	movhi	r4,7
   5b234:	10800404 	addi	r2,r2,16
   5b238:	30c00044 	addi	r3,r6,1
   5b23c:	212eed04 	addi	r4,r4,-17484
   5b240:	41000015 	stw	r4,0(r8)
   5b244:	47000115 	stw	fp,4(r8)
   5b248:	d8801c15 	stw	r2,112(sp)
   5b24c:	d8c01b15 	stw	r3,108(sp)
   5b250:	50fff20e 	bge	r10,r3,5b21c <__alt_data_end+0xfffdb21c>
   5b254:	1001b21e 	bne	r2,zero,5b920 <___vfiprintf_internal_r+0xb84>
   5b258:	843ffc04 	addi	r16,r16,-16
   5b25c:	000d883a 	mov	r6,zero
   5b260:	01000044 	movi	r4,1
   5b264:	d811883a 	mov	r8,sp
   5b268:	e43ff116 	blt	fp,r16,5b230 <__alt_data_end+0xfffdb230>
   5b26c:	a807883a 	mov	r3,r21
   5b270:	d9c02917 	ldw	r7,164(sp)
   5b274:	802b883a 	mov	r21,r16
   5b278:	dc002717 	ldw	r16,156(sp)
   5b27c:	d9402317 	ldw	r5,140(sp)
   5b280:	a885883a 	add	r2,r21,r2
   5b284:	45400115 	stw	r21,4(r8)
   5b288:	41400015 	stw	r5,0(r8)
   5b28c:	d8801c15 	stw	r2,112(sp)
   5b290:	d9001b15 	stw	r4,108(sp)
   5b294:	014001c4 	movi	r5,7
   5b298:	29026216 	blt	r5,r4,5bc24 <___vfiprintf_internal_r+0xe88>
   5b29c:	d9801d87 	ldb	r6,118(sp)
   5b2a0:	42000204 	addi	r8,r8,8
   5b2a4:	21400044 	addi	r5,r4,1
   5b2a8:	3001ae1e 	bne	r6,zero,5b964 <___vfiprintf_internal_r+0xbc8>
   5b2ac:	3801bb26 	beq	r7,zero,5b99c <___vfiprintf_internal_r+0xc00>
   5b2b0:	d9001d04 	addi	r4,sp,116
   5b2b4:	10800084 	addi	r2,r2,2
   5b2b8:	41000015 	stw	r4,0(r8)
   5b2bc:	01000084 	movi	r4,2
   5b2c0:	41000115 	stw	r4,4(r8)
   5b2c4:	d8801c15 	stw	r2,112(sp)
   5b2c8:	d9401b15 	stw	r5,108(sp)
   5b2cc:	010001c4 	movi	r4,7
   5b2d0:	2142680e 	bge	r4,r5,5bc74 <___vfiprintf_internal_r+0xed8>
   5b2d4:	1002b11e 	bne	r2,zero,5bd9c <___vfiprintf_internal_r+0x1000>
   5b2d8:	01802004 	movi	r6,128
   5b2dc:	01400044 	movi	r5,1
   5b2e0:	0009883a 	mov	r4,zero
   5b2e4:	d811883a 	mov	r8,sp
   5b2e8:	1981ae1e 	bne	r3,r6,5b9a4 <___vfiprintf_internal_r+0xc08>
   5b2ec:	d8c02517 	ldw	r3,148(sp)
   5b2f0:	1cf9c83a 	sub	fp,r3,r19
   5b2f4:	0701ab0e 	bge	zero,fp,5b9a4 <___vfiprintf_internal_r+0xc08>
   5b2f8:	05400404 	movi	r21,16
   5b2fc:	af03a90e 	bge	r21,fp,5c1a4 <___vfiprintf_internal_r+0x1408>
   5b300:	014001f4 	movhi	r5,7
   5b304:	296ee904 	addi	r5,r5,-17500
   5b308:	d9402315 	stw	r5,140(sp)
   5b30c:	01c001c4 	movi	r7,7
   5b310:	00000506 	br	5b328 <___vfiprintf_internal_r+0x58c>
   5b314:	21800084 	addi	r6,r4,2
   5b318:	42000204 	addi	r8,r8,8
   5b31c:	1809883a 	mov	r4,r3
   5b320:	e73ffc04 	addi	fp,fp,-16
   5b324:	af000d0e 	bge	r21,fp,5b35c <___vfiprintf_internal_r+0x5c0>
   5b328:	10800404 	addi	r2,r2,16
   5b32c:	20c00044 	addi	r3,r4,1
   5b330:	44800015 	stw	r18,0(r8)
   5b334:	45400115 	stw	r21,4(r8)
   5b338:	d8801c15 	stw	r2,112(sp)
   5b33c:	d8c01b15 	stw	r3,108(sp)
   5b340:	38fff40e 	bge	r7,r3,5b314 <__alt_data_end+0xfffdb314>
   5b344:	10022b1e 	bne	r2,zero,5bbf4 <___vfiprintf_internal_r+0xe58>
   5b348:	e73ffc04 	addi	fp,fp,-16
   5b34c:	01800044 	movi	r6,1
   5b350:	0009883a 	mov	r4,zero
   5b354:	d811883a 	mov	r8,sp
   5b358:	af3ff316 	blt	r21,fp,5b328 <__alt_data_end+0xfffdb328>
   5b35c:	d8c02317 	ldw	r3,140(sp)
   5b360:	1705883a 	add	r2,r2,fp
   5b364:	47000115 	stw	fp,4(r8)
   5b368:	40c00015 	stw	r3,0(r8)
   5b36c:	d8801c15 	stw	r2,112(sp)
   5b370:	d9801b15 	stw	r6,108(sp)
   5b374:	00c001c4 	movi	r3,7
   5b378:	19829416 	blt	r3,r6,5bdcc <___vfiprintf_internal_r+0x1030>
   5b37c:	8521c83a 	sub	r16,r16,r20
   5b380:	42000204 	addi	r8,r8,8
   5b384:	31400044 	addi	r5,r6,1
   5b388:	3009883a 	mov	r4,r6
   5b38c:	04018716 	blt	zero,r16,5b9ac <___vfiprintf_internal_r+0xc10>
   5b390:	a085883a 	add	r2,r20,r2
   5b394:	45c00015 	stw	r23,0(r8)
   5b398:	45000115 	stw	r20,4(r8)
   5b39c:	d8801c15 	stw	r2,112(sp)
   5b3a0:	d9401b15 	stw	r5,108(sp)
   5b3a4:	00c001c4 	movi	r3,7
   5b3a8:	1941c20e 	bge	r3,r5,5bab4 <___vfiprintf_internal_r+0xd18>
   5b3ac:	1002531e 	bne	r2,zero,5bcfc <___vfiprintf_internal_r+0xf60>
   5b3b0:	d8001b15 	stw	zero,108(sp)
   5b3b4:	8c40010c 	andi	r17,r17,4
   5b3b8:	88023226 	beq	r17,zero,5bc84 <___vfiprintf_internal_r+0xee8>
   5b3bc:	d9002517 	ldw	r4,148(sp)
   5b3c0:	24e3c83a 	sub	r17,r4,r19
   5b3c4:	04432916 	blt	zero,r17,5c06c <___vfiprintf_internal_r+0x12d0>
   5b3c8:	d8802517 	ldw	r2,148(sp)
   5b3cc:	14c0010e 	bge	r2,r19,5b3d4 <___vfiprintf_internal_r+0x638>
   5b3d0:	9805883a 	mov	r2,r19
   5b3d4:	d8c02417 	ldw	r3,144(sp)
   5b3d8:	1887883a 	add	r3,r3,r2
   5b3dc:	d8c02415 	stw	r3,144(sp)
   5b3e0:	d8001b15 	stw	zero,108(sp)
   5b3e4:	d811883a 	mov	r8,sp
   5b3e8:	003ea006 	br	5ae6c <__alt_data_end+0xfffdae6c>
   5b3ec:	8c400814 	ori	r17,r17,32
   5b3f0:	b0c00007 	ldb	r3,0(r22)
   5b3f4:	003ec606 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b3f8:	b0c00007 	ldb	r3,0(r22)
   5b3fc:	00801b04 	movi	r2,108
   5b400:	18832026 	beq	r3,r2,5c084 <___vfiprintf_internal_r+0x12e8>
   5b404:	8c400414 	ori	r17,r17,16
   5b408:	003ec106 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b40c:	9cc03fcc 	andi	r19,r19,255
   5b410:	b811883a 	mov	r8,r23
   5b414:	9803981e 	bne	r19,zero,5c278 <___vfiprintf_internal_r+0x14dc>
   5b418:	8880080c 	andi	r2,r17,32
   5b41c:	1002be26 	beq	r2,zero,5bf18 <___vfiprintf_internal_r+0x117c>
   5b420:	d9002217 	ldw	r4,136(sp)
   5b424:	d9402417 	ldw	r5,144(sp)
   5b428:	20800017 	ldw	r2,0(r4)
   5b42c:	2807d7fa 	srai	r3,r5,31
   5b430:	21000104 	addi	r4,r4,4
   5b434:	d9002215 	stw	r4,136(sp)
   5b438:	11400015 	stw	r5,0(r2)
   5b43c:	10c00115 	stw	r3,4(r2)
   5b440:	003e8a06 	br	5ae6c <__alt_data_end+0xfffdae6c>
   5b444:	9cc03fcc 	andi	r19,r19,255
   5b448:	b811883a 	mov	r8,r23
   5b44c:	9803871e 	bne	r19,zero,5c26c <___vfiprintf_internal_r+0x14d0>
   5b450:	8880080c 	andi	r2,r17,32
   5b454:	10009a26 	beq	r2,zero,5b6c0 <___vfiprintf_internal_r+0x924>
   5b458:	d9002217 	ldw	r4,136(sp)
   5b45c:	d8001d85 	stb	zero,118(sp)
   5b460:	20800204 	addi	r2,r4,8
   5b464:	24c00017 	ldw	r19,0(r4)
   5b468:	25000117 	ldw	r20,4(r4)
   5b46c:	8002a416 	blt	r16,zero,5bf00 <___vfiprintf_internal_r+0x1164>
   5b470:	013fdfc4 	movi	r4,-129
   5b474:	9d06b03a 	or	r3,r19,r20
   5b478:	d8802215 	stw	r2,136(sp)
   5b47c:	8922703a 	and	r17,r17,r4
   5b480:	18009b26 	beq	r3,zero,5b6f0 <___vfiprintf_internal_r+0x954>
   5b484:	002b883a 	mov	r21,zero
   5b488:	ddc01a04 	addi	r23,sp,104
   5b48c:	9806d0fa 	srli	r3,r19,3
   5b490:	a008977a 	slli	r4,r20,29
   5b494:	a028d0fa 	srli	r20,r20,3
   5b498:	9cc001cc 	andi	r19,r19,7
   5b49c:	98800c04 	addi	r2,r19,48
   5b4a0:	bdffffc4 	addi	r23,r23,-1
   5b4a4:	20e6b03a 	or	r19,r4,r3
   5b4a8:	b8800005 	stb	r2,0(r23)
   5b4ac:	9d06b03a 	or	r3,r19,r20
   5b4b0:	183ff61e 	bne	r3,zero,5b48c <__alt_data_end+0xfffdb48c>
   5b4b4:	88c0004c 	andi	r3,r17,1
   5b4b8:	18021f1e 	bne	r3,zero,5bd38 <___vfiprintf_internal_r+0xf9c>
   5b4bc:	d9401e17 	ldw	r5,120(sp)
   5b4c0:	2de9c83a 	sub	r20,r5,r23
   5b4c4:	003f3806 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5b4c8:	9cc03fcc 	andi	r19,r19,255
   5b4cc:	b811883a 	mov	r8,r23
   5b4d0:	98034f1e 	bne	r19,zero,5c210 <___vfiprintf_internal_r+0x1474>
   5b4d4:	008001f4 	movhi	r2,7
   5b4d8:	10ae7904 	addi	r2,r2,-17948
   5b4dc:	d8802615 	stw	r2,152(sp)
   5b4e0:	8880080c 	andi	r2,r17,32
   5b4e4:	1000ac26 	beq	r2,zero,5b798 <___vfiprintf_internal_r+0x9fc>
   5b4e8:	d9002217 	ldw	r4,136(sp)
   5b4ec:	24c00017 	ldw	r19,0(r4)
   5b4f0:	25000117 	ldw	r20,4(r4)
   5b4f4:	21000204 	addi	r4,r4,8
   5b4f8:	d9002215 	stw	r4,136(sp)
   5b4fc:	8880004c 	andi	r2,r17,1
   5b500:	1001e726 	beq	r2,zero,5bca0 <___vfiprintf_internal_r+0xf04>
   5b504:	9d04b03a 	or	r2,r19,r20
   5b508:	10025c1e 	bne	r2,zero,5be7c <___vfiprintf_internal_r+0x10e0>
   5b50c:	d8001d85 	stb	zero,118(sp)
   5b510:	80024416 	blt	r16,zero,5be24 <___vfiprintf_internal_r+0x1088>
   5b514:	00bfdfc4 	movi	r2,-129
   5b518:	88a2703a 	and	r17,r17,r2
   5b51c:	003f1d06 	br	5b194 <__alt_data_end+0xfffdb194>
   5b520:	d8c02217 	ldw	r3,136(sp)
   5b524:	04c00044 	movi	r19,1
   5b528:	b811883a 	mov	r8,r23
   5b52c:	18800017 	ldw	r2,0(r3)
   5b530:	18c00104 	addi	r3,r3,4
   5b534:	d8001d85 	stb	zero,118(sp)
   5b538:	d8801005 	stb	r2,64(sp)
   5b53c:	d8c02215 	stw	r3,136(sp)
   5b540:	9829883a 	mov	r20,r19
   5b544:	ddc01004 	addi	r23,sp,64
   5b548:	0021883a 	mov	r16,zero
   5b54c:	003f1e06 	br	5b1c8 <__alt_data_end+0xfffdb1c8>
   5b550:	9cc03fcc 	andi	r19,r19,255
   5b554:	b811883a 	mov	r8,r23
   5b558:	9803331e 	bne	r19,zero,5c228 <___vfiprintf_internal_r+0x148c>
   5b55c:	8880080c 	andi	r2,r17,32
   5b560:	10004826 	beq	r2,zero,5b684 <___vfiprintf_internal_r+0x8e8>
   5b564:	d9002217 	ldw	r4,136(sp)
   5b568:	20800117 	ldw	r2,4(r4)
   5b56c:	24c00017 	ldw	r19,0(r4)
   5b570:	21000204 	addi	r4,r4,8
   5b574:	d9002215 	stw	r4,136(sp)
   5b578:	1029883a 	mov	r20,r2
   5b57c:	10024c16 	blt	r2,zero,5beb0 <___vfiprintf_internal_r+0x1114>
   5b580:	dd401d83 	ldbu	r21,118(sp)
   5b584:	80007116 	blt	r16,zero,5b74c <___vfiprintf_internal_r+0x9b0>
   5b588:	00ffdfc4 	movi	r3,-129
   5b58c:	9d04b03a 	or	r2,r19,r20
   5b590:	88e2703a 	and	r17,r17,r3
   5b594:	1000d126 	beq	r2,zero,5b8dc <___vfiprintf_internal_r+0xb40>
   5b598:	a0023526 	beq	r20,zero,5be70 <___vfiprintf_internal_r+0x10d4>
   5b59c:	ddc01a04 	addi	r23,sp,104
   5b5a0:	4039883a 	mov	fp,r8
   5b5a4:	9809883a 	mov	r4,r19
   5b5a8:	a00b883a 	mov	r5,r20
   5b5ac:	01800284 	movi	r6,10
   5b5b0:	000f883a 	mov	r7,zero
   5b5b4:	005d2c80 	call	5d2c8 <__umoddi3>
   5b5b8:	10800c04 	addi	r2,r2,48
   5b5bc:	bdffffc4 	addi	r23,r23,-1
   5b5c0:	9809883a 	mov	r4,r19
   5b5c4:	a00b883a 	mov	r5,r20
   5b5c8:	b8800005 	stb	r2,0(r23)
   5b5cc:	01800284 	movi	r6,10
   5b5d0:	000f883a 	mov	r7,zero
   5b5d4:	005cccc0 	call	5cccc <__udivdi3>
   5b5d8:	1027883a 	mov	r19,r2
   5b5dc:	10c4b03a 	or	r2,r2,r3
   5b5e0:	1829883a 	mov	r20,r3
   5b5e4:	103fef1e 	bne	r2,zero,5b5a4 <__alt_data_end+0xfffdb5a4>
   5b5e8:	d9001e17 	ldw	r4,120(sp)
   5b5ec:	e011883a 	mov	r8,fp
   5b5f0:	25e9c83a 	sub	r20,r4,r23
   5b5f4:	003eec06 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5b5f8:	d8802307 	ldb	r2,140(sp)
   5b5fc:	1002361e 	bne	r2,zero,5bed8 <___vfiprintf_internal_r+0x113c>
   5b600:	00c00804 	movi	r3,32
   5b604:	d8c02305 	stb	r3,140(sp)
   5b608:	04c00044 	movi	r19,1
   5b60c:	b0c00007 	ldb	r3,0(r22)
   5b610:	003e3f06 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b614:	8c400054 	ori	r17,r17,1
   5b618:	b0c00007 	ldb	r3,0(r22)
   5b61c:	003e3c06 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b620:	8c402014 	ori	r17,r17,128
   5b624:	b0c00007 	ldb	r3,0(r22)
   5b628:	003e3906 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b62c:	dc002715 	stw	r16,156(sp)
   5b630:	d8002515 	stw	zero,148(sp)
   5b634:	1f3ff404 	addi	fp,r3,-48
   5b638:	0009883a 	mov	r4,zero
   5b63c:	b021883a 	mov	r16,r22
   5b640:	01400284 	movi	r5,10
   5b644:	004dab40 	call	4dab4 <__mulsi3>
   5b648:	80c00007 	ldb	r3,0(r16)
   5b64c:	e089883a 	add	r4,fp,r2
   5b650:	b5800044 	addi	r22,r22,1
   5b654:	1f3ff404 	addi	fp,r3,-48
   5b658:	b021883a 	mov	r16,r22
   5b65c:	af3ff82e 	bgeu	r21,fp,5b640 <__alt_data_end+0xfffdb640>
   5b660:	d9002515 	stw	r4,148(sp)
   5b664:	dc002717 	ldw	r16,156(sp)
   5b668:	003e2a06 	br	5af14 <__alt_data_end+0xfffdaf14>
   5b66c:	9cc03fcc 	andi	r19,r19,255
   5b670:	b811883a 	mov	r8,r23
   5b674:	9802e91e 	bne	r19,zero,5c21c <___vfiprintf_internal_r+0x1480>
   5b678:	8c400414 	ori	r17,r17,16
   5b67c:	8880080c 	andi	r2,r17,32
   5b680:	103fb81e 	bne	r2,zero,5b564 <__alt_data_end+0xfffdb564>
   5b684:	8880040c 	andi	r2,r17,16
   5b688:	10022e26 	beq	r2,zero,5bf44 <___vfiprintf_internal_r+0x11a8>
   5b68c:	d9402217 	ldw	r5,136(sp)
   5b690:	2cc00017 	ldw	r19,0(r5)
   5b694:	29400104 	addi	r5,r5,4
   5b698:	d9402215 	stw	r5,136(sp)
   5b69c:	9829d7fa 	srai	r20,r19,31
   5b6a0:	a005883a 	mov	r2,r20
   5b6a4:	003fb506 	br	5b57c <__alt_data_end+0xfffdb57c>
   5b6a8:	9cc03fcc 	andi	r19,r19,255
   5b6ac:	b811883a 	mov	r8,r23
   5b6b0:	9802fa1e 	bne	r19,zero,5c29c <___vfiprintf_internal_r+0x1500>
   5b6b4:	8c400414 	ori	r17,r17,16
   5b6b8:	8880080c 	andi	r2,r17,32
   5b6bc:	103f661e 	bne	r2,zero,5b458 <__alt_data_end+0xfffdb458>
   5b6c0:	8880040c 	andi	r2,r17,16
   5b6c4:	10020626 	beq	r2,zero,5bee0 <___vfiprintf_internal_r+0x1144>
   5b6c8:	d9402217 	ldw	r5,136(sp)
   5b6cc:	d8001d85 	stb	zero,118(sp)
   5b6d0:	0029883a 	mov	r20,zero
   5b6d4:	28800104 	addi	r2,r5,4
   5b6d8:	2cc00017 	ldw	r19,0(r5)
   5b6dc:	80020816 	blt	r16,zero,5bf00 <___vfiprintf_internal_r+0x1164>
   5b6e0:	00ffdfc4 	movi	r3,-129
   5b6e4:	d8802215 	stw	r2,136(sp)
   5b6e8:	88e2703a 	and	r17,r17,r3
   5b6ec:	983f651e 	bne	r19,zero,5b484 <__alt_data_end+0xfffdb484>
   5b6f0:	002b883a 	mov	r21,zero
   5b6f4:	8002cf26 	beq	r16,zero,5c234 <___vfiprintf_internal_r+0x1498>
   5b6f8:	0027883a 	mov	r19,zero
   5b6fc:	0029883a 	mov	r20,zero
   5b700:	003f6106 	br	5b488 <__alt_data_end+0xfffdb488>
   5b704:	9cc03fcc 	andi	r19,r19,255
   5b708:	b811883a 	mov	r8,r23
   5b70c:	9802e01e 	bne	r19,zero,5c290 <___vfiprintf_internal_r+0x14f4>
   5b710:	8c400414 	ori	r17,r17,16
   5b714:	8880080c 	andi	r2,r17,32
   5b718:	1000641e 	bne	r2,zero,5b8ac <___vfiprintf_internal_r+0xb10>
   5b71c:	8880040c 	andi	r2,r17,16
   5b720:	1001c81e 	bne	r2,zero,5be44 <___vfiprintf_internal_r+0x10a8>
   5b724:	8880100c 	andi	r2,r17,64
   5b728:	d8001d85 	stb	zero,118(sp)
   5b72c:	1002281e 	bne	r2,zero,5bfd0 <___vfiprintf_internal_r+0x1234>
   5b730:	d9002217 	ldw	r4,136(sp)
   5b734:	0029883a 	mov	r20,zero
   5b738:	20800104 	addi	r2,r4,4
   5b73c:	24c00017 	ldw	r19,0(r4)
   5b740:	8001c60e 	bge	r16,zero,5be5c <___vfiprintf_internal_r+0x10c0>
   5b744:	d8802215 	stw	r2,136(sp)
   5b748:	002b883a 	mov	r21,zero
   5b74c:	9d04b03a 	or	r2,r19,r20
   5b750:	103f911e 	bne	r2,zero,5b598 <__alt_data_end+0xfffdb598>
   5b754:	00800044 	movi	r2,1
   5b758:	10803fcc 	andi	r2,r2,255
   5b75c:	00c00044 	movi	r3,1
   5b760:	10c05f26 	beq	r2,r3,5b8e0 <___vfiprintf_internal_r+0xb44>
   5b764:	00c00084 	movi	r3,2
   5b768:	10ffe31e 	bne	r2,r3,5b6f8 <__alt_data_end+0xfffdb6f8>
   5b76c:	0027883a 	mov	r19,zero
   5b770:	0029883a 	mov	r20,zero
   5b774:	00015106 	br	5bcbc <___vfiprintf_internal_r+0xf20>
   5b778:	9cc03fcc 	andi	r19,r19,255
   5b77c:	b811883a 	mov	r8,r23
   5b780:	9802c01e 	bne	r19,zero,5c284 <___vfiprintf_internal_r+0x14e8>
   5b784:	014001f4 	movhi	r5,7
   5b788:	296e7404 	addi	r5,r5,-17968
   5b78c:	d9402615 	stw	r5,152(sp)
   5b790:	8880080c 	andi	r2,r17,32
   5b794:	103f541e 	bne	r2,zero,5b4e8 <__alt_data_end+0xfffdb4e8>
   5b798:	8880040c 	andi	r2,r17,16
   5b79c:	1001f226 	beq	r2,zero,5bf68 <___vfiprintf_internal_r+0x11cc>
   5b7a0:	d9402217 	ldw	r5,136(sp)
   5b7a4:	0029883a 	mov	r20,zero
   5b7a8:	2cc00017 	ldw	r19,0(r5)
   5b7ac:	29400104 	addi	r5,r5,4
   5b7b0:	d9402215 	stw	r5,136(sp)
   5b7b4:	003f5106 	br	5b4fc <__alt_data_end+0xfffdb4fc>
   5b7b8:	d8c02217 	ldw	r3,136(sp)
   5b7bc:	b811883a 	mov	r8,r23
   5b7c0:	d8001d85 	stb	zero,118(sp)
   5b7c4:	1dc00017 	ldw	r23,0(r3)
   5b7c8:	1f000104 	addi	fp,r3,4
   5b7cc:	b8025926 	beq	r23,zero,5c134 <___vfiprintf_internal_r+0x1398>
   5b7d0:	80023316 	blt	r16,zero,5c0a0 <___vfiprintf_internal_r+0x1304>
   5b7d4:	800d883a 	mov	r6,r16
   5b7d8:	000b883a 	mov	r5,zero
   5b7dc:	b809883a 	mov	r4,r23
   5b7e0:	da002a15 	stw	r8,168(sp)
   5b7e4:	0057ba40 	call	57ba4 <memchr>
   5b7e8:	da002a17 	ldw	r8,168(sp)
   5b7ec:	10026826 	beq	r2,zero,5c190 <___vfiprintf_internal_r+0x13f4>
   5b7f0:	15e9c83a 	sub	r20,r2,r23
   5b7f4:	dd401d83 	ldbu	r21,118(sp)
   5b7f8:	df002215 	stw	fp,136(sp)
   5b7fc:	0021883a 	mov	r16,zero
   5b800:	003e6906 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5b804:	9cc03fcc 	andi	r19,r19,255
   5b808:	b811883a 	mov	r8,r23
   5b80c:	983fc126 	beq	r19,zero,5b714 <__alt_data_end+0xfffdb714>
   5b810:	d8c02303 	ldbu	r3,140(sp)
   5b814:	d8c01d85 	stb	r3,118(sp)
   5b818:	003fbe06 	br	5b714 <__alt_data_end+0xfffdb714>
   5b81c:	d9002217 	ldw	r4,136(sp)
   5b820:	d9402217 	ldw	r5,136(sp)
   5b824:	21000017 	ldw	r4,0(r4)
   5b828:	28800104 	addi	r2,r5,4
   5b82c:	d9002515 	stw	r4,148(sp)
   5b830:	203e3d16 	blt	r4,zero,5b128 <__alt_data_end+0xfffdb128>
   5b834:	d8802215 	stw	r2,136(sp)
   5b838:	b0c00007 	ldb	r3,0(r22)
   5b83c:	003db406 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b840:	00c00ac4 	movi	r3,43
   5b844:	d8c02305 	stb	r3,140(sp)
   5b848:	04c00044 	movi	r19,1
   5b84c:	b0c00007 	ldb	r3,0(r22)
   5b850:	003daf06 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b854:	b0c00007 	ldb	r3,0(r22)
   5b858:	01000a84 	movi	r4,42
   5b85c:	b4000044 	addi	r16,r22,1
   5b860:	19025e26 	beq	r3,r4,5c1dc <___vfiprintf_internal_r+0x1440>
   5b864:	1f3ff404 	addi	fp,r3,-48
   5b868:	0009883a 	mov	r4,zero
   5b86c:	af025236 	bltu	r21,fp,5c1b8 <___vfiprintf_internal_r+0x141c>
   5b870:	01400284 	movi	r5,10
   5b874:	004dab40 	call	4dab4 <__mulsi3>
   5b878:	80c00007 	ldb	r3,0(r16)
   5b87c:	1709883a 	add	r4,r2,fp
   5b880:	85800044 	addi	r22,r16,1
   5b884:	1f3ff404 	addi	fp,r3,-48
   5b888:	b021883a 	mov	r16,r22
   5b88c:	af3ff82e 	bgeu	r21,fp,5b870 <__alt_data_end+0xfffdb870>
   5b890:	2021883a 	mov	r16,r4
   5b894:	203d9f0e 	bge	r4,zero,5af14 <__alt_data_end+0xfffdaf14>
   5b898:	043fffc4 	movi	r16,-1
   5b89c:	003d9d06 	br	5af14 <__alt_data_end+0xfffdaf14>
   5b8a0:	8c401014 	ori	r17,r17,64
   5b8a4:	b0c00007 	ldb	r3,0(r22)
   5b8a8:	003d9906 	br	5af10 <__alt_data_end+0xfffdaf10>
   5b8ac:	d9002217 	ldw	r4,136(sp)
   5b8b0:	d8001d85 	stb	zero,118(sp)
   5b8b4:	20c00204 	addi	r3,r4,8
   5b8b8:	24c00017 	ldw	r19,0(r4)
   5b8bc:	25000117 	ldw	r20,4(r4)
   5b8c0:	8001e716 	blt	r16,zero,5c060 <___vfiprintf_internal_r+0x12c4>
   5b8c4:	013fdfc4 	movi	r4,-129
   5b8c8:	9d04b03a 	or	r2,r19,r20
   5b8cc:	d8c02215 	stw	r3,136(sp)
   5b8d0:	8922703a 	and	r17,r17,r4
   5b8d4:	002b883a 	mov	r21,zero
   5b8d8:	103f2f1e 	bne	r2,zero,5b598 <__alt_data_end+0xfffdb598>
   5b8dc:	803e2f26 	beq	r16,zero,5b19c <__alt_data_end+0xfffdb19c>
   5b8e0:	0027883a 	mov	r19,zero
   5b8e4:	9cc00c04 	addi	r19,r19,48
   5b8e8:	dcc019c5 	stb	r19,103(sp)
   5b8ec:	dd002817 	ldw	r20,160(sp)
   5b8f0:	ddc019c4 	addi	r23,sp,103
   5b8f4:	003e2c06 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5b8f8:	9cc03fcc 	andi	r19,r19,255
   5b8fc:	b811883a 	mov	r8,r23
   5b900:	9802571e 	bne	r19,zero,5c260 <___vfiprintf_internal_r+0x14c4>
   5b904:	18005726 	beq	r3,zero,5ba64 <___vfiprintf_internal_r+0xcc8>
   5b908:	04c00044 	movi	r19,1
   5b90c:	d8c01005 	stb	r3,64(sp)
   5b910:	d8001d85 	stb	zero,118(sp)
   5b914:	9829883a 	mov	r20,r19
   5b918:	ddc01004 	addi	r23,sp,64
   5b91c:	003f0a06 	br	5b548 <__alt_data_end+0xfffdb548>
   5b920:	d9402017 	ldw	r5,128(sp)
   5b924:	d9002117 	ldw	r4,132(sp)
   5b928:	d9801a04 	addi	r6,sp,104
   5b92c:	da802a15 	stw	r10,168(sp)
   5b930:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5b934:	da802a17 	ldw	r10,168(sp)
   5b938:	1000501e 	bne	r2,zero,5ba7c <___vfiprintf_internal_r+0xce0>
   5b93c:	d9801b17 	ldw	r6,108(sp)
   5b940:	d8801c17 	ldw	r2,112(sp)
   5b944:	d811883a 	mov	r8,sp
   5b948:	31000044 	addi	r4,r6,1
   5b94c:	003e3606 	br	5b228 <__alt_data_end+0xfffdb228>
   5b950:	d9001b17 	ldw	r4,108(sp)
   5b954:	d8801c17 	ldw	r2,112(sp)
   5b958:	21400044 	addi	r5,r4,1
   5b95c:	d9801d87 	ldb	r6,118(sp)
   5b960:	303e5226 	beq	r6,zero,5b2ac <__alt_data_end+0xfffdb2ac>
   5b964:	01800044 	movi	r6,1
   5b968:	d9001d84 	addi	r4,sp,118
   5b96c:	1185883a 	add	r2,r2,r6
   5b970:	41000015 	stw	r4,0(r8)
   5b974:	41800115 	stw	r6,4(r8)
   5b978:	d8801c15 	stw	r2,112(sp)
   5b97c:	d9401b15 	stw	r5,108(sp)
   5b980:	010001c4 	movi	r4,7
   5b984:	2140b00e 	bge	r4,r5,5bc48 <___vfiprintf_internal_r+0xeac>
   5b988:	1000f61e 	bne	r2,zero,5bd64 <___vfiprintf_internal_r+0xfc8>
   5b98c:	3800b31e 	bne	r7,zero,5bc5c <___vfiprintf_internal_r+0xec0>
   5b990:	0009883a 	mov	r4,zero
   5b994:	300b883a 	mov	r5,r6
   5b998:	d811883a 	mov	r8,sp
   5b99c:	01802004 	movi	r6,128
   5b9a0:	19be5226 	beq	r3,r6,5b2ec <__alt_data_end+0xfffdb2ec>
   5b9a4:	8521c83a 	sub	r16,r16,r20
   5b9a8:	043e790e 	bge	zero,r16,5b390 <__alt_data_end+0xfffdb390>
   5b9ac:	05400404 	movi	r21,16
   5b9b0:	ac01b00e 	bge	r21,r16,5c074 <___vfiprintf_internal_r+0x12d8>
   5b9b4:	014001f4 	movhi	r5,7
   5b9b8:	296ee904 	addi	r5,r5,-17500
   5b9bc:	d9402315 	stw	r5,140(sp)
   5b9c0:	070001c4 	movi	fp,7
   5b9c4:	00000506 	br	5b9dc <___vfiprintf_internal_r+0xc40>
   5b9c8:	21400084 	addi	r5,r4,2
   5b9cc:	42000204 	addi	r8,r8,8
   5b9d0:	1809883a 	mov	r4,r3
   5b9d4:	843ffc04 	addi	r16,r16,-16
   5b9d8:	ac000d0e 	bge	r21,r16,5ba10 <___vfiprintf_internal_r+0xc74>
   5b9dc:	10800404 	addi	r2,r2,16
   5b9e0:	20c00044 	addi	r3,r4,1
   5b9e4:	44800015 	stw	r18,0(r8)
   5b9e8:	45400115 	stw	r21,4(r8)
   5b9ec:	d8801c15 	stw	r2,112(sp)
   5b9f0:	d8c01b15 	stw	r3,108(sp)
   5b9f4:	e0fff40e 	bge	fp,r3,5b9c8 <__alt_data_end+0xfffdb9c8>
   5b9f8:	1000101e 	bne	r2,zero,5ba3c <___vfiprintf_internal_r+0xca0>
   5b9fc:	843ffc04 	addi	r16,r16,-16
   5ba00:	01400044 	movi	r5,1
   5ba04:	0009883a 	mov	r4,zero
   5ba08:	d811883a 	mov	r8,sp
   5ba0c:	ac3ff316 	blt	r21,r16,5b9dc <__alt_data_end+0xfffdb9dc>
   5ba10:	d8c02317 	ldw	r3,140(sp)
   5ba14:	1405883a 	add	r2,r2,r16
   5ba18:	44000115 	stw	r16,4(r8)
   5ba1c:	40c00015 	stw	r3,0(r8)
   5ba20:	d8801c15 	stw	r2,112(sp)
   5ba24:	d9401b15 	stw	r5,108(sp)
   5ba28:	00c001c4 	movi	r3,7
   5ba2c:	19401916 	blt	r3,r5,5ba94 <___vfiprintf_internal_r+0xcf8>
   5ba30:	42000204 	addi	r8,r8,8
   5ba34:	29400044 	addi	r5,r5,1
   5ba38:	003e5506 	br	5b390 <__alt_data_end+0xfffdb390>
   5ba3c:	d9402017 	ldw	r5,128(sp)
   5ba40:	d9002117 	ldw	r4,132(sp)
   5ba44:	d9801a04 	addi	r6,sp,104
   5ba48:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5ba4c:	10000b1e 	bne	r2,zero,5ba7c <___vfiprintf_internal_r+0xce0>
   5ba50:	d9001b17 	ldw	r4,108(sp)
   5ba54:	d8801c17 	ldw	r2,112(sp)
   5ba58:	d811883a 	mov	r8,sp
   5ba5c:	21400044 	addi	r5,r4,1
   5ba60:	003fdc06 	br	5b9d4 <__alt_data_end+0xfffdb9d4>
   5ba64:	d8801c17 	ldw	r2,112(sp)
   5ba68:	10000426 	beq	r2,zero,5ba7c <___vfiprintf_internal_r+0xce0>
   5ba6c:	d9402017 	ldw	r5,128(sp)
   5ba70:	d9002117 	ldw	r4,132(sp)
   5ba74:	d9801a04 	addi	r6,sp,104
   5ba78:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5ba7c:	d9402017 	ldw	r5,128(sp)
   5ba80:	2880030b 	ldhu	r2,12(r5)
   5ba84:	1080100c 	andi	r2,r2,64
   5ba88:	10014d1e 	bne	r2,zero,5bfc0 <___vfiprintf_internal_r+0x1224>
   5ba8c:	d8802417 	ldw	r2,144(sp)
   5ba90:	003d9706 	br	5b0f0 <__alt_data_end+0xfffdb0f0>
   5ba94:	1000d21e 	bne	r2,zero,5bde0 <___vfiprintf_internal_r+0x1044>
   5ba98:	00c00044 	movi	r3,1
   5ba9c:	a005883a 	mov	r2,r20
   5baa0:	ddc00015 	stw	r23,0(sp)
   5baa4:	dd000115 	stw	r20,4(sp)
   5baa8:	dd001c15 	stw	r20,112(sp)
   5baac:	d8c01b15 	stw	r3,108(sp)
   5bab0:	d811883a 	mov	r8,sp
   5bab4:	42000204 	addi	r8,r8,8
   5bab8:	8c40010c 	andi	r17,r17,4
   5babc:	88004026 	beq	r17,zero,5bbc0 <___vfiprintf_internal_r+0xe24>
   5bac0:	d9002517 	ldw	r4,148(sp)
   5bac4:	24e3c83a 	sub	r17,r4,r19
   5bac8:	04403d0e 	bge	zero,r17,5bbc0 <___vfiprintf_internal_r+0xe24>
   5bacc:	04000404 	movi	r16,16
   5bad0:	8441a90e 	bge	r16,r17,5c178 <___vfiprintf_internal_r+0x13dc>
   5bad4:	00c001f4 	movhi	r3,7
   5bad8:	18eeed04 	addi	r3,r3,-17484
   5badc:	d9001b17 	ldw	r4,108(sp)
   5bae0:	d8c02315 	stw	r3,140(sp)
   5bae4:	050001c4 	movi	r20,7
   5bae8:	dd402117 	ldw	r21,132(sp)
   5baec:	ddc02017 	ldw	r23,128(sp)
   5baf0:	00000506 	br	5bb08 <___vfiprintf_internal_r+0xd6c>
   5baf4:	21400084 	addi	r5,r4,2
   5baf8:	42000204 	addi	r8,r8,8
   5bafc:	1809883a 	mov	r4,r3
   5bb00:	8c7ffc04 	addi	r17,r17,-16
   5bb04:	84400f0e 	bge	r16,r17,5bb44 <___vfiprintf_internal_r+0xda8>
   5bb08:	014001f4 	movhi	r5,7
   5bb0c:	10800404 	addi	r2,r2,16
   5bb10:	20c00044 	addi	r3,r4,1
   5bb14:	296eed04 	addi	r5,r5,-17484
   5bb18:	41400015 	stw	r5,0(r8)
   5bb1c:	44000115 	stw	r16,4(r8)
   5bb20:	d8801c15 	stw	r2,112(sp)
   5bb24:	d8c01b15 	stw	r3,108(sp)
   5bb28:	a0fff20e 	bge	r20,r3,5baf4 <__alt_data_end+0xfffdbaf4>
   5bb2c:	1000141e 	bne	r2,zero,5bb80 <___vfiprintf_internal_r+0xde4>
   5bb30:	8c7ffc04 	addi	r17,r17,-16
   5bb34:	01400044 	movi	r5,1
   5bb38:	0009883a 	mov	r4,zero
   5bb3c:	d811883a 	mov	r8,sp
   5bb40:	847ff116 	blt	r16,r17,5bb08 <__alt_data_end+0xfffdbb08>
   5bb44:	d8c02317 	ldw	r3,140(sp)
   5bb48:	1445883a 	add	r2,r2,r17
   5bb4c:	44400115 	stw	r17,4(r8)
   5bb50:	40c00015 	stw	r3,0(r8)
   5bb54:	d8801c15 	stw	r2,112(sp)
   5bb58:	d9401b15 	stw	r5,108(sp)
   5bb5c:	00c001c4 	movi	r3,7
   5bb60:	1940170e 	bge	r3,r5,5bbc0 <___vfiprintf_internal_r+0xe24>
   5bb64:	1000101e 	bne	r2,zero,5bba8 <___vfiprintf_internal_r+0xe0c>
   5bb68:	d8802517 	ldw	r2,148(sp)
   5bb6c:	14c11616 	blt	r2,r19,5bfc8 <___vfiprintf_internal_r+0x122c>
   5bb70:	d9002417 	ldw	r4,144(sp)
   5bb74:	2089883a 	add	r4,r4,r2
   5bb78:	d9002415 	stw	r4,144(sp)
   5bb7c:	003e1806 	br	5b3e0 <__alt_data_end+0xfffdb3e0>
   5bb80:	d9801a04 	addi	r6,sp,104
   5bb84:	b80b883a 	mov	r5,r23
   5bb88:	a809883a 	mov	r4,r21
   5bb8c:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bb90:	103fba1e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bb94:	d9001b17 	ldw	r4,108(sp)
   5bb98:	d8801c17 	ldw	r2,112(sp)
   5bb9c:	d811883a 	mov	r8,sp
   5bba0:	21400044 	addi	r5,r4,1
   5bba4:	003fd606 	br	5bb00 <__alt_data_end+0xfffdbb00>
   5bba8:	d9402017 	ldw	r5,128(sp)
   5bbac:	d9002117 	ldw	r4,132(sp)
   5bbb0:	d9801a04 	addi	r6,sp,104
   5bbb4:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bbb8:	103fb01e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bbbc:	d8801c17 	ldw	r2,112(sp)
   5bbc0:	d8c02517 	ldw	r3,148(sp)
   5bbc4:	1cc0010e 	bge	r3,r19,5bbcc <___vfiprintf_internal_r+0xe30>
   5bbc8:	9807883a 	mov	r3,r19
   5bbcc:	d9002417 	ldw	r4,144(sp)
   5bbd0:	20c9883a 	add	r4,r4,r3
   5bbd4:	d9002415 	stw	r4,144(sp)
   5bbd8:	103e0126 	beq	r2,zero,5b3e0 <__alt_data_end+0xfffdb3e0>
   5bbdc:	d9402017 	ldw	r5,128(sp)
   5bbe0:	d9002117 	ldw	r4,132(sp)
   5bbe4:	d9801a04 	addi	r6,sp,104
   5bbe8:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bbec:	103dfc26 	beq	r2,zero,5b3e0 <__alt_data_end+0xfffdb3e0>
   5bbf0:	003fa206 	br	5ba7c <__alt_data_end+0xfffdba7c>
   5bbf4:	d9402017 	ldw	r5,128(sp)
   5bbf8:	d9002117 	ldw	r4,132(sp)
   5bbfc:	d9801a04 	addi	r6,sp,104
   5bc00:	d9c02b15 	stw	r7,172(sp)
   5bc04:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bc08:	d9c02b17 	ldw	r7,172(sp)
   5bc0c:	103f9b1e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bc10:	d9001b17 	ldw	r4,108(sp)
   5bc14:	d8801c17 	ldw	r2,112(sp)
   5bc18:	d811883a 	mov	r8,sp
   5bc1c:	21800044 	addi	r6,r4,1
   5bc20:	003dbf06 	br	5b320 <__alt_data_end+0xfffdb320>
   5bc24:	1000d81e 	bne	r2,zero,5bf88 <___vfiprintf_internal_r+0x11ec>
   5bc28:	d9001d87 	ldb	r4,118(sp)
   5bc2c:	20000a26 	beq	r4,zero,5bc58 <___vfiprintf_internal_r+0xebc>
   5bc30:	00800044 	movi	r2,1
   5bc34:	d9001d84 	addi	r4,sp,118
   5bc38:	100b883a 	mov	r5,r2
   5bc3c:	d9000015 	stw	r4,0(sp)
   5bc40:	d8800115 	stw	r2,4(sp)
   5bc44:	d811883a 	mov	r8,sp
   5bc48:	2809883a 	mov	r4,r5
   5bc4c:	42000204 	addi	r8,r8,8
   5bc50:	29400044 	addi	r5,r5,1
   5bc54:	003d9506 	br	5b2ac <__alt_data_end+0xfffdb2ac>
   5bc58:	3800fd26 	beq	r7,zero,5c050 <___vfiprintf_internal_r+0x12b4>
   5bc5c:	00800084 	movi	r2,2
   5bc60:	d9001d04 	addi	r4,sp,116
   5bc64:	d9000015 	stw	r4,0(sp)
   5bc68:	d8800115 	stw	r2,4(sp)
   5bc6c:	01400044 	movi	r5,1
   5bc70:	d811883a 	mov	r8,sp
   5bc74:	2809883a 	mov	r4,r5
   5bc78:	42000204 	addi	r8,r8,8
   5bc7c:	29400044 	addi	r5,r5,1
   5bc80:	003f4606 	br	5b99c <__alt_data_end+0xfffdb99c>
   5bc84:	d8802517 	ldw	r2,148(sp)
   5bc88:	14c0010e 	bge	r2,r19,5bc90 <___vfiprintf_internal_r+0xef4>
   5bc8c:	9805883a 	mov	r2,r19
   5bc90:	d9402417 	ldw	r5,144(sp)
   5bc94:	288b883a 	add	r5,r5,r2
   5bc98:	d9402415 	stw	r5,144(sp)
   5bc9c:	003dd006 	br	5b3e0 <__alt_data_end+0xfffdb3e0>
   5bca0:	d8001d85 	stb	zero,118(sp)
   5bca4:	80005d16 	blt	r16,zero,5be1c <___vfiprintf_internal_r+0x1080>
   5bca8:	00ffdfc4 	movi	r3,-129
   5bcac:	9d04b03a 	or	r2,r19,r20
   5bcb0:	88e2703a 	and	r17,r17,r3
   5bcb4:	103d3726 	beq	r2,zero,5b194 <__alt_data_end+0xfffdb194>
   5bcb8:	002b883a 	mov	r21,zero
   5bcbc:	d9002617 	ldw	r4,152(sp)
   5bcc0:	ddc01a04 	addi	r23,sp,104
   5bcc4:	988003cc 	andi	r2,r19,15
   5bcc8:	a006973a 	slli	r3,r20,28
   5bccc:	2085883a 	add	r2,r4,r2
   5bcd0:	9826d13a 	srli	r19,r19,4
   5bcd4:	10800003 	ldbu	r2,0(r2)
   5bcd8:	a028d13a 	srli	r20,r20,4
   5bcdc:	bdffffc4 	addi	r23,r23,-1
   5bce0:	1ce6b03a 	or	r19,r3,r19
   5bce4:	b8800005 	stb	r2,0(r23)
   5bce8:	9d04b03a 	or	r2,r19,r20
   5bcec:	103ff51e 	bne	r2,zero,5bcc4 <__alt_data_end+0xfffdbcc4>
   5bcf0:	d8801e17 	ldw	r2,120(sp)
   5bcf4:	15e9c83a 	sub	r20,r2,r23
   5bcf8:	003d2b06 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5bcfc:	d9402017 	ldw	r5,128(sp)
   5bd00:	d9002117 	ldw	r4,132(sp)
   5bd04:	d9801a04 	addi	r6,sp,104
   5bd08:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bd0c:	103f5b1e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bd10:	d8801c17 	ldw	r2,112(sp)
   5bd14:	d811883a 	mov	r8,sp
   5bd18:	003f6706 	br	5bab8 <__alt_data_end+0xfffdbab8>
   5bd1c:	d9402017 	ldw	r5,128(sp)
   5bd20:	d9002117 	ldw	r4,132(sp)
   5bd24:	d9801a04 	addi	r6,sp,104
   5bd28:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bd2c:	103f531e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bd30:	d811883a 	mov	r8,sp
   5bd34:	003cd906 	br	5b09c <__alt_data_end+0xfffdb09c>
   5bd38:	10803fcc 	andi	r2,r2,255
   5bd3c:	1080201c 	xori	r2,r2,128
   5bd40:	10bfe004 	addi	r2,r2,-128
   5bd44:	00c00c04 	movi	r3,48
   5bd48:	10ffe926 	beq	r2,r3,5bcf0 <__alt_data_end+0xfffdbcf0>
   5bd4c:	b8ffffc5 	stb	r3,-1(r23)
   5bd50:	d8c01e17 	ldw	r3,120(sp)
   5bd54:	b8bfffc4 	addi	r2,r23,-1
   5bd58:	102f883a 	mov	r23,r2
   5bd5c:	18a9c83a 	sub	r20,r3,r2
   5bd60:	003d1106 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5bd64:	d9402017 	ldw	r5,128(sp)
   5bd68:	d9002117 	ldw	r4,132(sp)
   5bd6c:	d9801a04 	addi	r6,sp,104
   5bd70:	d8c02a15 	stw	r3,168(sp)
   5bd74:	d9c02b15 	stw	r7,172(sp)
   5bd78:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bd7c:	d8c02a17 	ldw	r3,168(sp)
   5bd80:	d9c02b17 	ldw	r7,172(sp)
   5bd84:	103f3d1e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bd88:	d9001b17 	ldw	r4,108(sp)
   5bd8c:	d8801c17 	ldw	r2,112(sp)
   5bd90:	d811883a 	mov	r8,sp
   5bd94:	21400044 	addi	r5,r4,1
   5bd98:	003d4406 	br	5b2ac <__alt_data_end+0xfffdb2ac>
   5bd9c:	d9402017 	ldw	r5,128(sp)
   5bda0:	d9002117 	ldw	r4,132(sp)
   5bda4:	d9801a04 	addi	r6,sp,104
   5bda8:	d8c02a15 	stw	r3,168(sp)
   5bdac:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bdb0:	d8c02a17 	ldw	r3,168(sp)
   5bdb4:	103f311e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bdb8:	d9001b17 	ldw	r4,108(sp)
   5bdbc:	d8801c17 	ldw	r2,112(sp)
   5bdc0:	d811883a 	mov	r8,sp
   5bdc4:	21400044 	addi	r5,r4,1
   5bdc8:	003ef406 	br	5b99c <__alt_data_end+0xfffdb99c>
   5bdcc:	1000bd1e 	bne	r2,zero,5c0c4 <___vfiprintf_internal_r+0x1328>
   5bdd0:	01400044 	movi	r5,1
   5bdd4:	0009883a 	mov	r4,zero
   5bdd8:	d811883a 	mov	r8,sp
   5bddc:	003ef106 	br	5b9a4 <__alt_data_end+0xfffdb9a4>
   5bde0:	d9402017 	ldw	r5,128(sp)
   5bde4:	d9002117 	ldw	r4,132(sp)
   5bde8:	d9801a04 	addi	r6,sp,104
   5bdec:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bdf0:	103f221e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bdf4:	d9401b17 	ldw	r5,108(sp)
   5bdf8:	d8801c17 	ldw	r2,112(sp)
   5bdfc:	d811883a 	mov	r8,sp
   5be00:	29400044 	addi	r5,r5,1
   5be04:	003d6206 	br	5b390 <__alt_data_end+0xfffdb390>
   5be08:	014001f4 	movhi	r5,7
   5be0c:	296e7904 	addi	r5,r5,-17948
   5be10:	d9402615 	stw	r5,152(sp)
   5be14:	d8c02215 	stw	r3,136(sp)
   5be18:	1023883a 	mov	r17,r2
   5be1c:	9d04b03a 	or	r2,r19,r20
   5be20:	103fa51e 	bne	r2,zero,5bcb8 <__alt_data_end+0xfffdbcb8>
   5be24:	002b883a 	mov	r21,zero
   5be28:	00800084 	movi	r2,2
   5be2c:	003e4a06 	br	5b758 <__alt_data_end+0xfffdb758>
   5be30:	014001f4 	movhi	r5,7
   5be34:	296e7904 	addi	r5,r5,-17948
   5be38:	002b883a 	mov	r21,zero
   5be3c:	d9402615 	stw	r5,152(sp)
   5be40:	003f9e06 	br	5bcbc <__alt_data_end+0xfffdbcbc>
   5be44:	d9402217 	ldw	r5,136(sp)
   5be48:	d8001d85 	stb	zero,118(sp)
   5be4c:	0029883a 	mov	r20,zero
   5be50:	28800104 	addi	r2,r5,4
   5be54:	2cc00017 	ldw	r19,0(r5)
   5be58:	803e3a16 	blt	r16,zero,5b744 <__alt_data_end+0xfffdb744>
   5be5c:	00ffdfc4 	movi	r3,-129
   5be60:	d8802215 	stw	r2,136(sp)
   5be64:	88e2703a 	and	r17,r17,r3
   5be68:	002b883a 	mov	r21,zero
   5be6c:	983e9b26 	beq	r19,zero,5b8dc <__alt_data_end+0xfffdb8dc>
   5be70:	00800244 	movi	r2,9
   5be74:	14fdc936 	bltu	r2,r19,5b59c <__alt_data_end+0xfffdb59c>
   5be78:	003e9a06 	br	5b8e4 <__alt_data_end+0xfffdb8e4>
   5be7c:	00800c04 	movi	r2,48
   5be80:	d8c01d45 	stb	r3,117(sp)
   5be84:	d8801d05 	stb	r2,116(sp)
   5be88:	d8001d85 	stb	zero,118(sp)
   5be8c:	88c00094 	ori	r3,r17,2
   5be90:	80009c16 	blt	r16,zero,5c104 <___vfiprintf_internal_r+0x1368>
   5be94:	00bfdfc4 	movi	r2,-129
   5be98:	88a2703a 	and	r17,r17,r2
   5be9c:	8c400094 	ori	r17,r17,2
   5bea0:	002b883a 	mov	r21,zero
   5bea4:	003f8506 	br	5bcbc <__alt_data_end+0xfffdbcbc>
   5bea8:	b029883a 	mov	r20,r22
   5beac:	003c0b06 	br	5aedc <__alt_data_end+0xfffdaedc>
   5beb0:	04e7c83a 	sub	r19,zero,r19
   5beb4:	05400b44 	movi	r21,45
   5beb8:	9804c03a 	cmpne	r2,r19,zero
   5bebc:	0529c83a 	sub	r20,zero,r20
   5bec0:	dd401d85 	stb	r21,118(sp)
   5bec4:	a0a9c83a 	sub	r20,r20,r2
   5bec8:	80009716 	blt	r16,zero,5c128 <___vfiprintf_internal_r+0x138c>
   5becc:	00bfdfc4 	movi	r2,-129
   5bed0:	88a2703a 	and	r17,r17,r2
   5bed4:	003db006 	br	5b598 <__alt_data_end+0xfffdb598>
   5bed8:	b0c00007 	ldb	r3,0(r22)
   5bedc:	003c0c06 	br	5af10 <__alt_data_end+0xfffdaf10>
   5bee0:	8880100c 	andi	r2,r17,64
   5bee4:	d8001d85 	stb	zero,118(sp)
   5bee8:	1000461e 	bne	r2,zero,5c004 <___vfiprintf_internal_r+0x1268>
   5beec:	d9002217 	ldw	r4,136(sp)
   5bef0:	0029883a 	mov	r20,zero
   5bef4:	20800104 	addi	r2,r4,4
   5bef8:	24c00017 	ldw	r19,0(r4)
   5befc:	803df80e 	bge	r16,zero,5b6e0 <__alt_data_end+0xfffdb6e0>
   5bf00:	9d06b03a 	or	r3,r19,r20
   5bf04:	d8802215 	stw	r2,136(sp)
   5bf08:	183d5e1e 	bne	r3,zero,5b484 <__alt_data_end+0xfffdb484>
   5bf0c:	002b883a 	mov	r21,zero
   5bf10:	0005883a 	mov	r2,zero
   5bf14:	003e1006 	br	5b758 <__alt_data_end+0xfffdb758>
   5bf18:	8880040c 	andi	r2,r17,16
   5bf1c:	1000321e 	bne	r2,zero,5bfe8 <___vfiprintf_internal_r+0x124c>
   5bf20:	8c40100c 	andi	r17,r17,64
   5bf24:	88008d26 	beq	r17,zero,5c15c <___vfiprintf_internal_r+0x13c0>
   5bf28:	d9402217 	ldw	r5,136(sp)
   5bf2c:	d8c02417 	ldw	r3,144(sp)
   5bf30:	28800017 	ldw	r2,0(r5)
   5bf34:	29400104 	addi	r5,r5,4
   5bf38:	d9402215 	stw	r5,136(sp)
   5bf3c:	10c0000d 	sth	r3,0(r2)
   5bf40:	003bca06 	br	5ae6c <__alt_data_end+0xfffdae6c>
   5bf44:	8880100c 	andi	r2,r17,64
   5bf48:	10003a26 	beq	r2,zero,5c034 <___vfiprintf_internal_r+0x1298>
   5bf4c:	d8802217 	ldw	r2,136(sp)
   5bf50:	14c0000f 	ldh	r19,0(r2)
   5bf54:	10800104 	addi	r2,r2,4
   5bf58:	d8802215 	stw	r2,136(sp)
   5bf5c:	9829d7fa 	srai	r20,r19,31
   5bf60:	a005883a 	mov	r2,r20
   5bf64:	003d8506 	br	5b57c <__alt_data_end+0xfffdb57c>
   5bf68:	8880100c 	andi	r2,r17,64
   5bf6c:	10002b26 	beq	r2,zero,5c01c <___vfiprintf_internal_r+0x1280>
   5bf70:	d8802217 	ldw	r2,136(sp)
   5bf74:	0029883a 	mov	r20,zero
   5bf78:	14c0000b 	ldhu	r19,0(r2)
   5bf7c:	10800104 	addi	r2,r2,4
   5bf80:	d8802215 	stw	r2,136(sp)
   5bf84:	003d5d06 	br	5b4fc <__alt_data_end+0xfffdb4fc>
   5bf88:	d9402017 	ldw	r5,128(sp)
   5bf8c:	d9002117 	ldw	r4,132(sp)
   5bf90:	d9801a04 	addi	r6,sp,104
   5bf94:	d8c02a15 	stw	r3,168(sp)
   5bf98:	d9c02b15 	stw	r7,172(sp)
   5bf9c:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5bfa0:	d8c02a17 	ldw	r3,168(sp)
   5bfa4:	d9c02b17 	ldw	r7,172(sp)
   5bfa8:	103eb41e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5bfac:	d9001b17 	ldw	r4,108(sp)
   5bfb0:	d8801c17 	ldw	r2,112(sp)
   5bfb4:	d811883a 	mov	r8,sp
   5bfb8:	21400044 	addi	r5,r4,1
   5bfbc:	003e6706 	br	5b95c <__alt_data_end+0xfffdb95c>
   5bfc0:	00bfffc4 	movi	r2,-1
   5bfc4:	003c4a06 	br	5b0f0 <__alt_data_end+0xfffdb0f0>
   5bfc8:	9805883a 	mov	r2,r19
   5bfcc:	003ee806 	br	5bb70 <__alt_data_end+0xfffdbb70>
   5bfd0:	d8c02217 	ldw	r3,136(sp)
   5bfd4:	0029883a 	mov	r20,zero
   5bfd8:	18800104 	addi	r2,r3,4
   5bfdc:	1cc0000b 	ldhu	r19,0(r3)
   5bfe0:	803f9e0e 	bge	r16,zero,5be5c <__alt_data_end+0xfffdbe5c>
   5bfe4:	003dd706 	br	5b744 <__alt_data_end+0xfffdb744>
   5bfe8:	d8c02217 	ldw	r3,136(sp)
   5bfec:	d9002417 	ldw	r4,144(sp)
   5bff0:	18800017 	ldw	r2,0(r3)
   5bff4:	18c00104 	addi	r3,r3,4
   5bff8:	d8c02215 	stw	r3,136(sp)
   5bffc:	11000015 	stw	r4,0(r2)
   5c000:	003b9a06 	br	5ae6c <__alt_data_end+0xfffdae6c>
   5c004:	d8c02217 	ldw	r3,136(sp)
   5c008:	0029883a 	mov	r20,zero
   5c00c:	18800104 	addi	r2,r3,4
   5c010:	1cc0000b 	ldhu	r19,0(r3)
   5c014:	803db20e 	bge	r16,zero,5b6e0 <__alt_data_end+0xfffdb6e0>
   5c018:	003fb906 	br	5bf00 <__alt_data_end+0xfffdbf00>
   5c01c:	d9002217 	ldw	r4,136(sp)
   5c020:	0029883a 	mov	r20,zero
   5c024:	24c00017 	ldw	r19,0(r4)
   5c028:	21000104 	addi	r4,r4,4
   5c02c:	d9002215 	stw	r4,136(sp)
   5c030:	003d3206 	br	5b4fc <__alt_data_end+0xfffdb4fc>
   5c034:	d8c02217 	ldw	r3,136(sp)
   5c038:	1cc00017 	ldw	r19,0(r3)
   5c03c:	18c00104 	addi	r3,r3,4
   5c040:	d8c02215 	stw	r3,136(sp)
   5c044:	9829d7fa 	srai	r20,r19,31
   5c048:	a005883a 	mov	r2,r20
   5c04c:	003d4b06 	br	5b57c <__alt_data_end+0xfffdb57c>
   5c050:	0009883a 	mov	r4,zero
   5c054:	01400044 	movi	r5,1
   5c058:	d811883a 	mov	r8,sp
   5c05c:	003e4f06 	br	5b99c <__alt_data_end+0xfffdb99c>
   5c060:	d8c02215 	stw	r3,136(sp)
   5c064:	002b883a 	mov	r21,zero
   5c068:	003db806 	br	5b74c <__alt_data_end+0xfffdb74c>
   5c06c:	d811883a 	mov	r8,sp
   5c070:	003e9606 	br	5bacc <__alt_data_end+0xfffdbacc>
   5c074:	010001f4 	movhi	r4,7
   5c078:	212ee904 	addi	r4,r4,-17500
   5c07c:	d9002315 	stw	r4,140(sp)
   5c080:	003e6306 	br	5ba10 <__alt_data_end+0xfffdba10>
   5c084:	b0c00043 	ldbu	r3,1(r22)
   5c088:	8c400814 	ori	r17,r17,32
   5c08c:	b5800044 	addi	r22,r22,1
   5c090:	18c03fcc 	andi	r3,r3,255
   5c094:	18c0201c 	xori	r3,r3,128
   5c098:	18ffe004 	addi	r3,r3,-128
   5c09c:	003b9c06 	br	5af10 <__alt_data_end+0xfffdaf10>
   5c0a0:	b809883a 	mov	r4,r23
   5c0a4:	da002a15 	stw	r8,168(sp)
   5c0a8:	005071c0 	call	5071c <strlen>
   5c0ac:	1029883a 	mov	r20,r2
   5c0b0:	dd401d83 	ldbu	r21,118(sp)
   5c0b4:	df002215 	stw	fp,136(sp)
   5c0b8:	0021883a 	mov	r16,zero
   5c0bc:	da002a17 	ldw	r8,168(sp)
   5c0c0:	003c3906 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5c0c4:	d9402017 	ldw	r5,128(sp)
   5c0c8:	d9002117 	ldw	r4,132(sp)
   5c0cc:	d9801a04 	addi	r6,sp,104
   5c0d0:	005ac880 	call	5ac88 <__sprint_r.part.0>
   5c0d4:	103e691e 	bne	r2,zero,5ba7c <__alt_data_end+0xfffdba7c>
   5c0d8:	d9001b17 	ldw	r4,108(sp)
   5c0dc:	d8801c17 	ldw	r2,112(sp)
   5c0e0:	d811883a 	mov	r8,sp
   5c0e4:	21400044 	addi	r5,r4,1
   5c0e8:	003e2e06 	br	5b9a4 <__alt_data_end+0xfffdb9a4>
   5c0ec:	010001f4 	movhi	r4,7
   5c0f0:	212eed04 	addi	r4,r4,-17484
   5c0f4:	d9002315 	stw	r4,140(sp)
   5c0f8:	d9001b17 	ldw	r4,108(sp)
   5c0fc:	21000044 	addi	r4,r4,1
   5c100:	003c5e06 	br	5b27c <__alt_data_end+0xfffdb27c>
   5c104:	002b883a 	mov	r21,zero
   5c108:	00800084 	movi	r2,2
   5c10c:	10803fcc 	andi	r2,r2,255
   5c110:	01000044 	movi	r4,1
   5c114:	11002b26 	beq	r2,r4,5c1c4 <___vfiprintf_internal_r+0x1428>
   5c118:	01000084 	movi	r4,2
   5c11c:	11002b1e 	bne	r2,r4,5c1cc <___vfiprintf_internal_r+0x1430>
   5c120:	1823883a 	mov	r17,r3
   5c124:	003ee506 	br	5bcbc <__alt_data_end+0xfffdbcbc>
   5c128:	8807883a 	mov	r3,r17
   5c12c:	00800044 	movi	r2,1
   5c130:	003ff606 	br	5c10c <__alt_data_end+0xfffdc10c>
   5c134:	00800184 	movi	r2,6
   5c138:	1400012e 	bgeu	r2,r16,5c140 <___vfiprintf_internal_r+0x13a4>
   5c13c:	1021883a 	mov	r16,r2
   5c140:	8029883a 	mov	r20,r16
   5c144:	8027883a 	mov	r19,r16
   5c148:	80002216 	blt	r16,zero,5c1d4 <___vfiprintf_internal_r+0x1438>
   5c14c:	05c001f4 	movhi	r23,7
   5c150:	df002215 	stw	fp,136(sp)
   5c154:	bdee7e04 	addi	r23,r23,-17928
   5c158:	003cfb06 	br	5b548 <__alt_data_end+0xfffdb548>
   5c15c:	d9002217 	ldw	r4,136(sp)
   5c160:	d9402417 	ldw	r5,144(sp)
   5c164:	20800017 	ldw	r2,0(r4)
   5c168:	21000104 	addi	r4,r4,4
   5c16c:	d9002215 	stw	r4,136(sp)
   5c170:	11400015 	stw	r5,0(r2)
   5c174:	003b3d06 	br	5ae6c <__alt_data_end+0xfffdae6c>
   5c178:	014001f4 	movhi	r5,7
   5c17c:	296eed04 	addi	r5,r5,-17484
   5c180:	d9402315 	stw	r5,140(sp)
   5c184:	d9401b17 	ldw	r5,108(sp)
   5c188:	29400044 	addi	r5,r5,1
   5c18c:	003e6d06 	br	5bb44 <__alt_data_end+0xfffdbb44>
   5c190:	8029883a 	mov	r20,r16
   5c194:	dd401d83 	ldbu	r21,118(sp)
   5c198:	df002215 	stw	fp,136(sp)
   5c19c:	0021883a 	mov	r16,zero
   5c1a0:	003c0106 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5c1a4:	00c001f4 	movhi	r3,7
   5c1a8:	18eee904 	addi	r3,r3,-17500
   5c1ac:	d8c02315 	stw	r3,140(sp)
   5c1b0:	280d883a 	mov	r6,r5
   5c1b4:	003c6906 	br	5b35c <__alt_data_end+0xfffdb35c>
   5c1b8:	802d883a 	mov	r22,r16
   5c1bc:	0021883a 	mov	r16,zero
   5c1c0:	003b5406 	br	5af14 <__alt_data_end+0xfffdaf14>
   5c1c4:	1823883a 	mov	r17,r3
   5c1c8:	003cf306 	br	5b598 <__alt_data_end+0xfffdb598>
   5c1cc:	1823883a 	mov	r17,r3
   5c1d0:	003cad06 	br	5b488 <__alt_data_end+0xfffdb488>
   5c1d4:	0027883a 	mov	r19,zero
   5c1d8:	003fdc06 	br	5c14c <__alt_data_end+0xfffdc14c>
   5c1dc:	d9402217 	ldw	r5,136(sp)
   5c1e0:	8005883a 	mov	r2,r16
   5c1e4:	b0c00043 	ldbu	r3,1(r22)
   5c1e8:	2c000017 	ldw	r16,0(r5)
   5c1ec:	29000104 	addi	r4,r5,4
   5c1f0:	d9002215 	stw	r4,136(sp)
   5c1f4:	102d883a 	mov	r22,r2
   5c1f8:	803fa50e 	bge	r16,zero,5c090 <__alt_data_end+0xfffdc090>
   5c1fc:	18c03fcc 	andi	r3,r3,255
   5c200:	18c0201c 	xori	r3,r3,128
   5c204:	043fffc4 	movi	r16,-1
   5c208:	18ffe004 	addi	r3,r3,-128
   5c20c:	003b4006 	br	5af10 <__alt_data_end+0xfffdaf10>
   5c210:	d9402303 	ldbu	r5,140(sp)
   5c214:	d9401d85 	stb	r5,118(sp)
   5c218:	003cae06 	br	5b4d4 <__alt_data_end+0xfffdb4d4>
   5c21c:	d8c02303 	ldbu	r3,140(sp)
   5c220:	d8c01d85 	stb	r3,118(sp)
   5c224:	003d1406 	br	5b678 <__alt_data_end+0xfffdb678>
   5c228:	d8c02303 	ldbu	r3,140(sp)
   5c22c:	d8c01d85 	stb	r3,118(sp)
   5c230:	003cca06 	br	5b55c <__alt_data_end+0xfffdb55c>
   5c234:	8880004c 	andi	r2,r17,1
   5c238:	002b883a 	mov	r21,zero
   5c23c:	10000526 	beq	r2,zero,5c254 <___vfiprintf_internal_r+0x14b8>
   5c240:	00800c04 	movi	r2,48
   5c244:	d88019c5 	stb	r2,103(sp)
   5c248:	dd002817 	ldw	r20,160(sp)
   5c24c:	ddc019c4 	addi	r23,sp,103
   5c250:	003bd506 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5c254:	0029883a 	mov	r20,zero
   5c258:	ddc01a04 	addi	r23,sp,104
   5c25c:	003bd206 	br	5b1a8 <__alt_data_end+0xfffdb1a8>
   5c260:	d9002303 	ldbu	r4,140(sp)
   5c264:	d9001d85 	stb	r4,118(sp)
   5c268:	003da606 	br	5b904 <__alt_data_end+0xfffdb904>
   5c26c:	d8c02303 	ldbu	r3,140(sp)
   5c270:	d8c01d85 	stb	r3,118(sp)
   5c274:	003c7606 	br	5b450 <__alt_data_end+0xfffdb450>
   5c278:	d8c02303 	ldbu	r3,140(sp)
   5c27c:	d8c01d85 	stb	r3,118(sp)
   5c280:	003c6506 	br	5b418 <__alt_data_end+0xfffdb418>
   5c284:	d9002303 	ldbu	r4,140(sp)
   5c288:	d9001d85 	stb	r4,118(sp)
   5c28c:	003d3d06 	br	5b784 <__alt_data_end+0xfffdb784>
   5c290:	d8c02303 	ldbu	r3,140(sp)
   5c294:	d8c01d85 	stb	r3,118(sp)
   5c298:	003d1d06 	br	5b710 <__alt_data_end+0xfffdb710>
   5c29c:	d8c02303 	ldbu	r3,140(sp)
   5c2a0:	d8c01d85 	stb	r3,118(sp)
   5c2a4:	003d0306 	br	5b6b4 <__alt_data_end+0xfffdb6b4>

0005c2a8 <__vfiprintf_internal>:
   5c2a8:	008001f4 	movhi	r2,7
   5c2ac:	10bb7304 	addi	r2,r2,-4660
   5c2b0:	300f883a 	mov	r7,r6
   5c2b4:	280d883a 	mov	r6,r5
   5c2b8:	200b883a 	mov	r5,r4
   5c2bc:	11000017 	ldw	r4,0(r2)
   5c2c0:	005ad9c1 	jmpi	5ad9c <___vfiprintf_internal_r>

0005c2c4 <__sbprintf>:
   5c2c4:	2880030b 	ldhu	r2,12(r5)
   5c2c8:	2ac01917 	ldw	r11,100(r5)
   5c2cc:	2a80038b 	ldhu	r10,14(r5)
   5c2d0:	2a400717 	ldw	r9,28(r5)
   5c2d4:	2a000917 	ldw	r8,36(r5)
   5c2d8:	defee204 	addi	sp,sp,-1144
   5c2dc:	00c10004 	movi	r3,1024
   5c2e0:	dc011a15 	stw	r16,1128(sp)
   5c2e4:	10bfff4c 	andi	r2,r2,65533
   5c2e8:	2821883a 	mov	r16,r5
   5c2ec:	d8cb883a 	add	r5,sp,r3
   5c2f0:	dc811c15 	stw	r18,1136(sp)
   5c2f4:	dc411b15 	stw	r17,1132(sp)
   5c2f8:	dfc11d15 	stw	ra,1140(sp)
   5c2fc:	2025883a 	mov	r18,r4
   5c300:	d881030d 	sth	r2,1036(sp)
   5c304:	dac11915 	stw	r11,1124(sp)
   5c308:	da81038d 	sth	r10,1038(sp)
   5c30c:	da410715 	stw	r9,1052(sp)
   5c310:	da010915 	stw	r8,1060(sp)
   5c314:	dec10015 	stw	sp,1024(sp)
   5c318:	dec10415 	stw	sp,1040(sp)
   5c31c:	d8c10215 	stw	r3,1032(sp)
   5c320:	d8c10515 	stw	r3,1044(sp)
   5c324:	d8010615 	stw	zero,1048(sp)
   5c328:	005ad9c0 	call	5ad9c <___vfiprintf_internal_r>
   5c32c:	1023883a 	mov	r17,r2
   5c330:	10000416 	blt	r2,zero,5c344 <__sbprintf+0x80>
   5c334:	d9410004 	addi	r5,sp,1024
   5c338:	9009883a 	mov	r4,r18
   5c33c:	0056a4c0 	call	56a4c <_fflush_r>
   5c340:	10000d1e 	bne	r2,zero,5c378 <__sbprintf+0xb4>
   5c344:	d881030b 	ldhu	r2,1036(sp)
   5c348:	1080100c 	andi	r2,r2,64
   5c34c:	10000326 	beq	r2,zero,5c35c <__sbprintf+0x98>
   5c350:	8080030b 	ldhu	r2,12(r16)
   5c354:	10801014 	ori	r2,r2,64
   5c358:	8080030d 	sth	r2,12(r16)
   5c35c:	8805883a 	mov	r2,r17
   5c360:	dfc11d17 	ldw	ra,1140(sp)
   5c364:	dc811c17 	ldw	r18,1136(sp)
   5c368:	dc411b17 	ldw	r17,1132(sp)
   5c36c:	dc011a17 	ldw	r16,1128(sp)
   5c370:	dec11e04 	addi	sp,sp,1144
   5c374:	f800283a 	ret
   5c378:	047fffc4 	movi	r17,-1
   5c37c:	003ff106 	br	5c344 <__alt_data_end+0xfffdc344>

0005c380 <__swbuf_r>:
   5c380:	defffb04 	addi	sp,sp,-20
   5c384:	dcc00315 	stw	r19,12(sp)
   5c388:	dc800215 	stw	r18,8(sp)
   5c38c:	dc000015 	stw	r16,0(sp)
   5c390:	dfc00415 	stw	ra,16(sp)
   5c394:	dc400115 	stw	r17,4(sp)
   5c398:	2025883a 	mov	r18,r4
   5c39c:	2827883a 	mov	r19,r5
   5c3a0:	3021883a 	mov	r16,r6
   5c3a4:	20000226 	beq	r4,zero,5c3b0 <__swbuf_r+0x30>
   5c3a8:	20800e17 	ldw	r2,56(r4)
   5c3ac:	10004226 	beq	r2,zero,5c4b8 <__swbuf_r+0x138>
   5c3b0:	80800617 	ldw	r2,24(r16)
   5c3b4:	8100030b 	ldhu	r4,12(r16)
   5c3b8:	80800215 	stw	r2,8(r16)
   5c3bc:	2080020c 	andi	r2,r4,8
   5c3c0:	10003626 	beq	r2,zero,5c49c <__swbuf_r+0x11c>
   5c3c4:	80c00417 	ldw	r3,16(r16)
   5c3c8:	18003426 	beq	r3,zero,5c49c <__swbuf_r+0x11c>
   5c3cc:	2088000c 	andi	r2,r4,8192
   5c3d0:	9c403fcc 	andi	r17,r19,255
   5c3d4:	10001a26 	beq	r2,zero,5c440 <__swbuf_r+0xc0>
   5c3d8:	80800017 	ldw	r2,0(r16)
   5c3dc:	81000517 	ldw	r4,20(r16)
   5c3e0:	10c7c83a 	sub	r3,r2,r3
   5c3e4:	1900200e 	bge	r3,r4,5c468 <__swbuf_r+0xe8>
   5c3e8:	18c00044 	addi	r3,r3,1
   5c3ec:	81000217 	ldw	r4,8(r16)
   5c3f0:	11400044 	addi	r5,r2,1
   5c3f4:	81400015 	stw	r5,0(r16)
   5c3f8:	213fffc4 	addi	r4,r4,-1
   5c3fc:	81000215 	stw	r4,8(r16)
   5c400:	14c00005 	stb	r19,0(r2)
   5c404:	80800517 	ldw	r2,20(r16)
   5c408:	10c01e26 	beq	r2,r3,5c484 <__swbuf_r+0x104>
   5c40c:	8080030b 	ldhu	r2,12(r16)
   5c410:	1080004c 	andi	r2,r2,1
   5c414:	10000226 	beq	r2,zero,5c420 <__swbuf_r+0xa0>
   5c418:	00800284 	movi	r2,10
   5c41c:	88801926 	beq	r17,r2,5c484 <__swbuf_r+0x104>
   5c420:	8805883a 	mov	r2,r17
   5c424:	dfc00417 	ldw	ra,16(sp)
   5c428:	dcc00317 	ldw	r19,12(sp)
   5c42c:	dc800217 	ldw	r18,8(sp)
   5c430:	dc400117 	ldw	r17,4(sp)
   5c434:	dc000017 	ldw	r16,0(sp)
   5c438:	dec00504 	addi	sp,sp,20
   5c43c:	f800283a 	ret
   5c440:	81401917 	ldw	r5,100(r16)
   5c444:	00b7ffc4 	movi	r2,-8193
   5c448:	21080014 	ori	r4,r4,8192
   5c44c:	2884703a 	and	r2,r5,r2
   5c450:	80801915 	stw	r2,100(r16)
   5c454:	80800017 	ldw	r2,0(r16)
   5c458:	8100030d 	sth	r4,12(r16)
   5c45c:	81000517 	ldw	r4,20(r16)
   5c460:	10c7c83a 	sub	r3,r2,r3
   5c464:	193fe016 	blt	r3,r4,5c3e8 <__alt_data_end+0xfffdc3e8>
   5c468:	800b883a 	mov	r5,r16
   5c46c:	9009883a 	mov	r4,r18
   5c470:	0056a4c0 	call	56a4c <_fflush_r>
   5c474:	1000071e 	bne	r2,zero,5c494 <__swbuf_r+0x114>
   5c478:	80800017 	ldw	r2,0(r16)
   5c47c:	00c00044 	movi	r3,1
   5c480:	003fda06 	br	5c3ec <__alt_data_end+0xfffdc3ec>
   5c484:	800b883a 	mov	r5,r16
   5c488:	9009883a 	mov	r4,r18
   5c48c:	0056a4c0 	call	56a4c <_fflush_r>
   5c490:	103fe326 	beq	r2,zero,5c420 <__alt_data_end+0xfffdc420>
   5c494:	00bfffc4 	movi	r2,-1
   5c498:	003fe206 	br	5c424 <__alt_data_end+0xfffdc424>
   5c49c:	800b883a 	mov	r5,r16
   5c4a0:	9009883a 	mov	r4,r18
   5c4a4:	0054e2c0 	call	54e2c <__swsetup_r>
   5c4a8:	103ffa1e 	bne	r2,zero,5c494 <__alt_data_end+0xfffdc494>
   5c4ac:	8100030b 	ldhu	r4,12(r16)
   5c4b0:	80c00417 	ldw	r3,16(r16)
   5c4b4:	003fc506 	br	5c3cc <__alt_data_end+0xfffdc3cc>
   5c4b8:	0056e380 	call	56e38 <__sinit>
   5c4bc:	003fbc06 	br	5c3b0 <__alt_data_end+0xfffdc3b0>

0005c4c0 <__swbuf>:
   5c4c0:	008001f4 	movhi	r2,7
   5c4c4:	10bb7304 	addi	r2,r2,-4660
   5c4c8:	280d883a 	mov	r6,r5
   5c4cc:	200b883a 	mov	r5,r4
   5c4d0:	11000017 	ldw	r4,0(r2)
   5c4d4:	005c3801 	jmpi	5c380 <__swbuf_r>

0005c4d8 <_write_r>:
   5c4d8:	defffd04 	addi	sp,sp,-12
   5c4dc:	2805883a 	mov	r2,r5
   5c4e0:	dc000015 	stw	r16,0(sp)
   5c4e4:	040001f4 	movhi	r16,7
   5c4e8:	dc400115 	stw	r17,4(sp)
   5c4ec:	300b883a 	mov	r5,r6
   5c4f0:	84080e04 	addi	r16,r16,8248
   5c4f4:	2023883a 	mov	r17,r4
   5c4f8:	380d883a 	mov	r6,r7
   5c4fc:	1009883a 	mov	r4,r2
   5c500:	dfc00215 	stw	ra,8(sp)
   5c504:	80000015 	stw	zero,0(r16)
   5c508:	0060c040 	call	60c04 <write>
   5c50c:	00ffffc4 	movi	r3,-1
   5c510:	10c00526 	beq	r2,r3,5c528 <_write_r+0x50>
   5c514:	dfc00217 	ldw	ra,8(sp)
   5c518:	dc400117 	ldw	r17,4(sp)
   5c51c:	dc000017 	ldw	r16,0(sp)
   5c520:	dec00304 	addi	sp,sp,12
   5c524:	f800283a 	ret
   5c528:	80c00017 	ldw	r3,0(r16)
   5c52c:	183ff926 	beq	r3,zero,5c514 <__alt_data_end+0xfffdc514>
   5c530:	88c00015 	stw	r3,0(r17)
   5c534:	003ff706 	br	5c514 <__alt_data_end+0xfffdc514>

0005c538 <_close_r>:
   5c538:	defffd04 	addi	sp,sp,-12
   5c53c:	dc000015 	stw	r16,0(sp)
   5c540:	040001f4 	movhi	r16,7
   5c544:	dc400115 	stw	r17,4(sp)
   5c548:	84080e04 	addi	r16,r16,8248
   5c54c:	2023883a 	mov	r17,r4
   5c550:	2809883a 	mov	r4,r5
   5c554:	dfc00215 	stw	ra,8(sp)
   5c558:	80000015 	stw	zero,0(r16)
   5c55c:	00601080 	call	60108 <close>
   5c560:	00ffffc4 	movi	r3,-1
   5c564:	10c00526 	beq	r2,r3,5c57c <_close_r+0x44>
   5c568:	dfc00217 	ldw	ra,8(sp)
   5c56c:	dc400117 	ldw	r17,4(sp)
   5c570:	dc000017 	ldw	r16,0(sp)
   5c574:	dec00304 	addi	sp,sp,12
   5c578:	f800283a 	ret
   5c57c:	80c00017 	ldw	r3,0(r16)
   5c580:	183ff926 	beq	r3,zero,5c568 <__alt_data_end+0xfffdc568>
   5c584:	88c00015 	stw	r3,0(r17)
   5c588:	003ff706 	br	5c568 <__alt_data_end+0xfffdc568>

0005c58c <_calloc_r>:
   5c58c:	defffe04 	addi	sp,sp,-8
   5c590:	2805883a 	mov	r2,r5
   5c594:	dc000015 	stw	r16,0(sp)
   5c598:	300b883a 	mov	r5,r6
   5c59c:	2021883a 	mov	r16,r4
   5c5a0:	1009883a 	mov	r4,r2
   5c5a4:	dfc00115 	stw	ra,4(sp)
   5c5a8:	004dab40 	call	4dab4 <__mulsi3>
   5c5ac:	100b883a 	mov	r5,r2
   5c5b0:	8009883a 	mov	r4,r16
   5c5b4:	004f6480 	call	4f648 <_malloc_r>
   5c5b8:	10002926 	beq	r2,zero,5c660 <_calloc_r+0xd4>
   5c5bc:	11bfff17 	ldw	r6,-4(r2)
   5c5c0:	1021883a 	mov	r16,r2
   5c5c4:	00bfff04 	movi	r2,-4
   5c5c8:	308c703a 	and	r6,r6,r2
   5c5cc:	00c00904 	movi	r3,36
   5c5d0:	308d883a 	add	r6,r6,r2
   5c5d4:	19801636 	bltu	r3,r6,5c630 <_calloc_r+0xa4>
   5c5d8:	008004c4 	movi	r2,19
   5c5dc:	11800b2e 	bgeu	r2,r6,5c60c <_calloc_r+0x80>
   5c5e0:	80000015 	stw	zero,0(r16)
   5c5e4:	80000115 	stw	zero,4(r16)
   5c5e8:	008006c4 	movi	r2,27
   5c5ec:	11801a2e 	bgeu	r2,r6,5c658 <_calloc_r+0xcc>
   5c5f0:	80000215 	stw	zero,8(r16)
   5c5f4:	80000315 	stw	zero,12(r16)
   5c5f8:	30c0151e 	bne	r6,r3,5c650 <_calloc_r+0xc4>
   5c5fc:	80000415 	stw	zero,16(r16)
   5c600:	80800604 	addi	r2,r16,24
   5c604:	80000515 	stw	zero,20(r16)
   5c608:	00000106 	br	5c610 <_calloc_r+0x84>
   5c60c:	8005883a 	mov	r2,r16
   5c610:	10000015 	stw	zero,0(r2)
   5c614:	10000115 	stw	zero,4(r2)
   5c618:	10000215 	stw	zero,8(r2)
   5c61c:	8005883a 	mov	r2,r16
   5c620:	dfc00117 	ldw	ra,4(sp)
   5c624:	dc000017 	ldw	r16,0(sp)
   5c628:	dec00204 	addi	sp,sp,8
   5c62c:	f800283a 	ret
   5c630:	000b883a 	mov	r5,zero
   5c634:	8009883a 	mov	r4,r16
   5c638:	004ff9c0 	call	4ff9c <memset>
   5c63c:	8005883a 	mov	r2,r16
   5c640:	dfc00117 	ldw	ra,4(sp)
   5c644:	dc000017 	ldw	r16,0(sp)
   5c648:	dec00204 	addi	sp,sp,8
   5c64c:	f800283a 	ret
   5c650:	80800404 	addi	r2,r16,16
   5c654:	003fee06 	br	5c610 <__alt_data_end+0xfffdc610>
   5c658:	80800204 	addi	r2,r16,8
   5c65c:	003fec06 	br	5c610 <__alt_data_end+0xfffdc610>
   5c660:	0005883a 	mov	r2,zero
   5c664:	003fee06 	br	5c620 <__alt_data_end+0xfffdc620>

0005c668 <_fclose_r>:
   5c668:	28003926 	beq	r5,zero,5c750 <_fclose_r+0xe8>
   5c66c:	defffc04 	addi	sp,sp,-16
   5c670:	dc400115 	stw	r17,4(sp)
   5c674:	dc000015 	stw	r16,0(sp)
   5c678:	dfc00315 	stw	ra,12(sp)
   5c67c:	dc800215 	stw	r18,8(sp)
   5c680:	2023883a 	mov	r17,r4
   5c684:	2821883a 	mov	r16,r5
   5c688:	20000226 	beq	r4,zero,5c694 <_fclose_r+0x2c>
   5c68c:	20800e17 	ldw	r2,56(r4)
   5c690:	10002726 	beq	r2,zero,5c730 <_fclose_r+0xc8>
   5c694:	8080030f 	ldh	r2,12(r16)
   5c698:	1000071e 	bne	r2,zero,5c6b8 <_fclose_r+0x50>
   5c69c:	0005883a 	mov	r2,zero
   5c6a0:	dfc00317 	ldw	ra,12(sp)
   5c6a4:	dc800217 	ldw	r18,8(sp)
   5c6a8:	dc400117 	ldw	r17,4(sp)
   5c6ac:	dc000017 	ldw	r16,0(sp)
   5c6b0:	dec00404 	addi	sp,sp,16
   5c6b4:	f800283a 	ret
   5c6b8:	800b883a 	mov	r5,r16
   5c6bc:	8809883a 	mov	r4,r17
   5c6c0:	00568300 	call	56830 <__sflush_r>
   5c6c4:	1025883a 	mov	r18,r2
   5c6c8:	80800b17 	ldw	r2,44(r16)
   5c6cc:	10000426 	beq	r2,zero,5c6e0 <_fclose_r+0x78>
   5c6d0:	81400717 	ldw	r5,28(r16)
   5c6d4:	8809883a 	mov	r4,r17
   5c6d8:	103ee83a 	callr	r2
   5c6dc:	10001616 	blt	r2,zero,5c738 <_fclose_r+0xd0>
   5c6e0:	8080030b 	ldhu	r2,12(r16)
   5c6e4:	1080200c 	andi	r2,r2,128
   5c6e8:	1000151e 	bne	r2,zero,5c740 <_fclose_r+0xd8>
   5c6ec:	81400c17 	ldw	r5,48(r16)
   5c6f0:	28000526 	beq	r5,zero,5c708 <_fclose_r+0xa0>
   5c6f4:	80801004 	addi	r2,r16,64
   5c6f8:	28800226 	beq	r5,r2,5c704 <_fclose_r+0x9c>
   5c6fc:	8809883a 	mov	r4,r17
   5c700:	0056fac0 	call	56fac <_free_r>
   5c704:	80000c15 	stw	zero,48(r16)
   5c708:	81401117 	ldw	r5,68(r16)
   5c70c:	28000326 	beq	r5,zero,5c71c <_fclose_r+0xb4>
   5c710:	8809883a 	mov	r4,r17
   5c714:	0056fac0 	call	56fac <_free_r>
   5c718:	80001115 	stw	zero,68(r16)
   5c71c:	0056e480 	call	56e48 <__sfp_lock_acquire>
   5c720:	8000030d 	sth	zero,12(r16)
   5c724:	0056e4c0 	call	56e4c <__sfp_lock_release>
   5c728:	9005883a 	mov	r2,r18
   5c72c:	003fdc06 	br	5c6a0 <__alt_data_end+0xfffdc6a0>
   5c730:	0056e380 	call	56e38 <__sinit>
   5c734:	003fd706 	br	5c694 <__alt_data_end+0xfffdc694>
   5c738:	04bfffc4 	movi	r18,-1
   5c73c:	003fe806 	br	5c6e0 <__alt_data_end+0xfffdc6e0>
   5c740:	81400417 	ldw	r5,16(r16)
   5c744:	8809883a 	mov	r4,r17
   5c748:	0056fac0 	call	56fac <_free_r>
   5c74c:	003fe706 	br	5c6ec <__alt_data_end+0xfffdc6ec>
   5c750:	0005883a 	mov	r2,zero
   5c754:	f800283a 	ret

0005c758 <fclose>:
   5c758:	008001f4 	movhi	r2,7
   5c75c:	10bb7304 	addi	r2,r2,-4660
   5c760:	200b883a 	mov	r5,r4
   5c764:	11000017 	ldw	r4,0(r2)
   5c768:	005c6681 	jmpi	5c668 <_fclose_r>

0005c76c <__fputwc>:
   5c76c:	defff804 	addi	sp,sp,-32
   5c770:	dcc00415 	stw	r19,16(sp)
   5c774:	dc800315 	stw	r18,12(sp)
   5c778:	dc000115 	stw	r16,4(sp)
   5c77c:	dfc00715 	stw	ra,28(sp)
   5c780:	dd400615 	stw	r21,24(sp)
   5c784:	dd000515 	stw	r20,20(sp)
   5c788:	dc400215 	stw	r17,8(sp)
   5c78c:	2027883a 	mov	r19,r4
   5c790:	2825883a 	mov	r18,r5
   5c794:	3021883a 	mov	r16,r6
   5c798:	00579940 	call	57994 <__locale_mb_cur_max>
   5c79c:	00c00044 	movi	r3,1
   5c7a0:	10c03e26 	beq	r2,r3,5c89c <__fputwc+0x130>
   5c7a4:	81c01704 	addi	r7,r16,92
   5c7a8:	900d883a 	mov	r6,r18
   5c7ac:	d80b883a 	mov	r5,sp
   5c7b0:	9809883a 	mov	r4,r19
   5c7b4:	005cae40 	call	5cae4 <_wcrtomb_r>
   5c7b8:	1029883a 	mov	r20,r2
   5c7bc:	00bfffc4 	movi	r2,-1
   5c7c0:	a0802026 	beq	r20,r2,5c844 <__fputwc+0xd8>
   5c7c4:	d9400003 	ldbu	r5,0(sp)
   5c7c8:	a0001c26 	beq	r20,zero,5c83c <__fputwc+0xd0>
   5c7cc:	0023883a 	mov	r17,zero
   5c7d0:	05400284 	movi	r21,10
   5c7d4:	00000906 	br	5c7fc <__fputwc+0x90>
   5c7d8:	80800017 	ldw	r2,0(r16)
   5c7dc:	11400005 	stb	r5,0(r2)
   5c7e0:	80c00017 	ldw	r3,0(r16)
   5c7e4:	18c00044 	addi	r3,r3,1
   5c7e8:	80c00015 	stw	r3,0(r16)
   5c7ec:	8c400044 	addi	r17,r17,1
   5c7f0:	dc45883a 	add	r2,sp,r17
   5c7f4:	8d00112e 	bgeu	r17,r20,5c83c <__fputwc+0xd0>
   5c7f8:	11400003 	ldbu	r5,0(r2)
   5c7fc:	80c00217 	ldw	r3,8(r16)
   5c800:	18ffffc4 	addi	r3,r3,-1
   5c804:	80c00215 	stw	r3,8(r16)
   5c808:	183ff30e 	bge	r3,zero,5c7d8 <__alt_data_end+0xfffdc7d8>
   5c80c:	80800617 	ldw	r2,24(r16)
   5c810:	18801916 	blt	r3,r2,5c878 <__fputwc+0x10c>
   5c814:	80800017 	ldw	r2,0(r16)
   5c818:	11400005 	stb	r5,0(r2)
   5c81c:	80800017 	ldw	r2,0(r16)
   5c820:	10c00003 	ldbu	r3,0(r2)
   5c824:	10800044 	addi	r2,r2,1
   5c828:	1d402326 	beq	r3,r21,5c8b8 <__fputwc+0x14c>
   5c82c:	80800015 	stw	r2,0(r16)
   5c830:	8c400044 	addi	r17,r17,1
   5c834:	dc45883a 	add	r2,sp,r17
   5c838:	8d3fef36 	bltu	r17,r20,5c7f8 <__alt_data_end+0xfffdc7f8>
   5c83c:	9005883a 	mov	r2,r18
   5c840:	00000406 	br	5c854 <__fputwc+0xe8>
   5c844:	80c0030b 	ldhu	r3,12(r16)
   5c848:	a005883a 	mov	r2,r20
   5c84c:	18c01014 	ori	r3,r3,64
   5c850:	80c0030d 	sth	r3,12(r16)
   5c854:	dfc00717 	ldw	ra,28(sp)
   5c858:	dd400617 	ldw	r21,24(sp)
   5c85c:	dd000517 	ldw	r20,20(sp)
   5c860:	dcc00417 	ldw	r19,16(sp)
   5c864:	dc800317 	ldw	r18,12(sp)
   5c868:	dc400217 	ldw	r17,8(sp)
   5c86c:	dc000117 	ldw	r16,4(sp)
   5c870:	dec00804 	addi	sp,sp,32
   5c874:	f800283a 	ret
   5c878:	800d883a 	mov	r6,r16
   5c87c:	29403fcc 	andi	r5,r5,255
   5c880:	9809883a 	mov	r4,r19
   5c884:	005c3800 	call	5c380 <__swbuf_r>
   5c888:	10bfffe0 	cmpeqi	r2,r2,-1
   5c88c:	10803fcc 	andi	r2,r2,255
   5c890:	103fd626 	beq	r2,zero,5c7ec <__alt_data_end+0xfffdc7ec>
   5c894:	00bfffc4 	movi	r2,-1
   5c898:	003fee06 	br	5c854 <__alt_data_end+0xfffdc854>
   5c89c:	90ffffc4 	addi	r3,r18,-1
   5c8a0:	01003f84 	movi	r4,254
   5c8a4:	20ffbf36 	bltu	r4,r3,5c7a4 <__alt_data_end+0xfffdc7a4>
   5c8a8:	900b883a 	mov	r5,r18
   5c8ac:	dc800005 	stb	r18,0(sp)
   5c8b0:	1029883a 	mov	r20,r2
   5c8b4:	003fc506 	br	5c7cc <__alt_data_end+0xfffdc7cc>
   5c8b8:	800d883a 	mov	r6,r16
   5c8bc:	a80b883a 	mov	r5,r21
   5c8c0:	9809883a 	mov	r4,r19
   5c8c4:	005c3800 	call	5c380 <__swbuf_r>
   5c8c8:	10bfffe0 	cmpeqi	r2,r2,-1
   5c8cc:	003fef06 	br	5c88c <__alt_data_end+0xfffdc88c>

0005c8d0 <_fputwc_r>:
   5c8d0:	3080030b 	ldhu	r2,12(r6)
   5c8d4:	10c8000c 	andi	r3,r2,8192
   5c8d8:	1800051e 	bne	r3,zero,5c8f0 <_fputwc_r+0x20>
   5c8dc:	30c01917 	ldw	r3,100(r6)
   5c8e0:	10880014 	ori	r2,r2,8192
   5c8e4:	3080030d 	sth	r2,12(r6)
   5c8e8:	18880014 	ori	r2,r3,8192
   5c8ec:	30801915 	stw	r2,100(r6)
   5c8f0:	005c76c1 	jmpi	5c76c <__fputwc>

0005c8f4 <fputwc>:
   5c8f4:	008001f4 	movhi	r2,7
   5c8f8:	defffc04 	addi	sp,sp,-16
   5c8fc:	10bb7304 	addi	r2,r2,-4660
   5c900:	dc000115 	stw	r16,4(sp)
   5c904:	14000017 	ldw	r16,0(r2)
   5c908:	dc400215 	stw	r17,8(sp)
   5c90c:	dfc00315 	stw	ra,12(sp)
   5c910:	2023883a 	mov	r17,r4
   5c914:	80000226 	beq	r16,zero,5c920 <fputwc+0x2c>
   5c918:	80800e17 	ldw	r2,56(r16)
   5c91c:	10001026 	beq	r2,zero,5c960 <fputwc+0x6c>
   5c920:	2880030b 	ldhu	r2,12(r5)
   5c924:	10c8000c 	andi	r3,r2,8192
   5c928:	1800051e 	bne	r3,zero,5c940 <fputwc+0x4c>
   5c92c:	28c01917 	ldw	r3,100(r5)
   5c930:	10880014 	ori	r2,r2,8192
   5c934:	2880030d 	sth	r2,12(r5)
   5c938:	18880014 	ori	r2,r3,8192
   5c93c:	28801915 	stw	r2,100(r5)
   5c940:	280d883a 	mov	r6,r5
   5c944:	8009883a 	mov	r4,r16
   5c948:	880b883a 	mov	r5,r17
   5c94c:	dfc00317 	ldw	ra,12(sp)
   5c950:	dc400217 	ldw	r17,8(sp)
   5c954:	dc000117 	ldw	r16,4(sp)
   5c958:	dec00404 	addi	sp,sp,16
   5c95c:	005c76c1 	jmpi	5c76c <__fputwc>
   5c960:	8009883a 	mov	r4,r16
   5c964:	d9400015 	stw	r5,0(sp)
   5c968:	0056e380 	call	56e38 <__sinit>
   5c96c:	d9400017 	ldw	r5,0(sp)
   5c970:	003feb06 	br	5c920 <__alt_data_end+0xfffdc920>

0005c974 <_fstat_r>:
   5c974:	defffd04 	addi	sp,sp,-12
   5c978:	2805883a 	mov	r2,r5
   5c97c:	dc000015 	stw	r16,0(sp)
   5c980:	040001f4 	movhi	r16,7
   5c984:	dc400115 	stw	r17,4(sp)
   5c988:	84080e04 	addi	r16,r16,8248
   5c98c:	2023883a 	mov	r17,r4
   5c990:	300b883a 	mov	r5,r6
   5c994:	1009883a 	mov	r4,r2
   5c998:	dfc00215 	stw	ra,8(sp)
   5c99c:	80000015 	stw	zero,0(r16)
   5c9a0:	006027c0 	call	6027c <fstat>
   5c9a4:	00ffffc4 	movi	r3,-1
   5c9a8:	10c00526 	beq	r2,r3,5c9c0 <_fstat_r+0x4c>
   5c9ac:	dfc00217 	ldw	ra,8(sp)
   5c9b0:	dc400117 	ldw	r17,4(sp)
   5c9b4:	dc000017 	ldw	r16,0(sp)
   5c9b8:	dec00304 	addi	sp,sp,12
   5c9bc:	f800283a 	ret
   5c9c0:	80c00017 	ldw	r3,0(r16)
   5c9c4:	183ff926 	beq	r3,zero,5c9ac <__alt_data_end+0xfffdc9ac>
   5c9c8:	88c00015 	stw	r3,0(r17)
   5c9cc:	003ff706 	br	5c9ac <__alt_data_end+0xfffdc9ac>

0005c9d0 <_isatty_r>:
   5c9d0:	defffd04 	addi	sp,sp,-12
   5c9d4:	dc000015 	stw	r16,0(sp)
   5c9d8:	040001f4 	movhi	r16,7
   5c9dc:	dc400115 	stw	r17,4(sp)
   5c9e0:	84080e04 	addi	r16,r16,8248
   5c9e4:	2023883a 	mov	r17,r4
   5c9e8:	2809883a 	mov	r4,r5
   5c9ec:	dfc00215 	stw	ra,8(sp)
   5c9f0:	80000015 	stw	zero,0(r16)
   5c9f4:	00603900 	call	60390 <isatty>
   5c9f8:	00ffffc4 	movi	r3,-1
   5c9fc:	10c00526 	beq	r2,r3,5ca14 <_isatty_r+0x44>
   5ca00:	dfc00217 	ldw	ra,8(sp)
   5ca04:	dc400117 	ldw	r17,4(sp)
   5ca08:	dc000017 	ldw	r16,0(sp)
   5ca0c:	dec00304 	addi	sp,sp,12
   5ca10:	f800283a 	ret
   5ca14:	80c00017 	ldw	r3,0(r16)
   5ca18:	183ff926 	beq	r3,zero,5ca00 <__alt_data_end+0xfffdca00>
   5ca1c:	88c00015 	stw	r3,0(r17)
   5ca20:	003ff706 	br	5ca00 <__alt_data_end+0xfffdca00>

0005ca24 <_lseek_r>:
   5ca24:	defffd04 	addi	sp,sp,-12
   5ca28:	2805883a 	mov	r2,r5
   5ca2c:	dc000015 	stw	r16,0(sp)
   5ca30:	040001f4 	movhi	r16,7
   5ca34:	dc400115 	stw	r17,4(sp)
   5ca38:	300b883a 	mov	r5,r6
   5ca3c:	84080e04 	addi	r16,r16,8248
   5ca40:	2023883a 	mov	r17,r4
   5ca44:	380d883a 	mov	r6,r7
   5ca48:	1009883a 	mov	r4,r2
   5ca4c:	dfc00215 	stw	ra,8(sp)
   5ca50:	80000015 	stw	zero,0(r16)
   5ca54:	00606d00 	call	606d0 <lseek>
   5ca58:	00ffffc4 	movi	r3,-1
   5ca5c:	10c00526 	beq	r2,r3,5ca74 <_lseek_r+0x50>
   5ca60:	dfc00217 	ldw	ra,8(sp)
   5ca64:	dc400117 	ldw	r17,4(sp)
   5ca68:	dc000017 	ldw	r16,0(sp)
   5ca6c:	dec00304 	addi	sp,sp,12
   5ca70:	f800283a 	ret
   5ca74:	80c00017 	ldw	r3,0(r16)
   5ca78:	183ff926 	beq	r3,zero,5ca60 <__alt_data_end+0xfffdca60>
   5ca7c:	88c00015 	stw	r3,0(r17)
   5ca80:	003ff706 	br	5ca60 <__alt_data_end+0xfffdca60>

0005ca84 <_read_r>:
   5ca84:	defffd04 	addi	sp,sp,-12
   5ca88:	2805883a 	mov	r2,r5
   5ca8c:	dc000015 	stw	r16,0(sp)
   5ca90:	040001f4 	movhi	r16,7
   5ca94:	dc400115 	stw	r17,4(sp)
   5ca98:	300b883a 	mov	r5,r6
   5ca9c:	84080e04 	addi	r16,r16,8248
   5caa0:	2023883a 	mov	r17,r4
   5caa4:	380d883a 	mov	r6,r7
   5caa8:	1009883a 	mov	r4,r2
   5caac:	dfc00215 	stw	ra,8(sp)
   5cab0:	80000015 	stw	zero,0(r16)
   5cab4:	00608ac0 	call	608ac <read>
   5cab8:	00ffffc4 	movi	r3,-1
   5cabc:	10c00526 	beq	r2,r3,5cad4 <_read_r+0x50>
   5cac0:	dfc00217 	ldw	ra,8(sp)
   5cac4:	dc400117 	ldw	r17,4(sp)
   5cac8:	dc000017 	ldw	r16,0(sp)
   5cacc:	dec00304 	addi	sp,sp,12
   5cad0:	f800283a 	ret
   5cad4:	80c00017 	ldw	r3,0(r16)
   5cad8:	183ff926 	beq	r3,zero,5cac0 <__alt_data_end+0xfffdcac0>
   5cadc:	88c00015 	stw	r3,0(r17)
   5cae0:	003ff706 	br	5cac0 <__alt_data_end+0xfffdcac0>

0005cae4 <_wcrtomb_r>:
   5cae4:	defff604 	addi	sp,sp,-40
   5cae8:	008001f4 	movhi	r2,7
   5caec:	dc800815 	stw	r18,32(sp)
   5caf0:	dc400715 	stw	r17,28(sp)
   5caf4:	dc000615 	stw	r16,24(sp)
   5caf8:	10bb7704 	addi	r2,r2,-4644
   5cafc:	dfc00915 	stw	ra,36(sp)
   5cb00:	2021883a 	mov	r16,r4
   5cb04:	3823883a 	mov	r17,r7
   5cb08:	14800017 	ldw	r18,0(r2)
   5cb0c:	28001426 	beq	r5,zero,5cb60 <_wcrtomb_r+0x7c>
   5cb10:	d9400415 	stw	r5,16(sp)
   5cb14:	d9800515 	stw	r6,20(sp)
   5cb18:	00579880 	call	57988 <__locale_charset>
   5cb1c:	d9800517 	ldw	r6,20(sp)
   5cb20:	d9400417 	ldw	r5,16(sp)
   5cb24:	100f883a 	mov	r7,r2
   5cb28:	dc400015 	stw	r17,0(sp)
   5cb2c:	8009883a 	mov	r4,r16
   5cb30:	903ee83a 	callr	r18
   5cb34:	00ffffc4 	movi	r3,-1
   5cb38:	10c0031e 	bne	r2,r3,5cb48 <_wcrtomb_r+0x64>
   5cb3c:	88000015 	stw	zero,0(r17)
   5cb40:	00c02284 	movi	r3,138
   5cb44:	80c00015 	stw	r3,0(r16)
   5cb48:	dfc00917 	ldw	ra,36(sp)
   5cb4c:	dc800817 	ldw	r18,32(sp)
   5cb50:	dc400717 	ldw	r17,28(sp)
   5cb54:	dc000617 	ldw	r16,24(sp)
   5cb58:	dec00a04 	addi	sp,sp,40
   5cb5c:	f800283a 	ret
   5cb60:	00579880 	call	57988 <__locale_charset>
   5cb64:	100f883a 	mov	r7,r2
   5cb68:	dc400015 	stw	r17,0(sp)
   5cb6c:	000d883a 	mov	r6,zero
   5cb70:	d9400104 	addi	r5,sp,4
   5cb74:	8009883a 	mov	r4,r16
   5cb78:	903ee83a 	callr	r18
   5cb7c:	003fed06 	br	5cb34 <__alt_data_end+0xfffdcb34>

0005cb80 <wcrtomb>:
   5cb80:	defff604 	addi	sp,sp,-40
   5cb84:	008001f4 	movhi	r2,7
   5cb88:	dc800615 	stw	r18,24(sp)
   5cb8c:	dc400515 	stw	r17,20(sp)
   5cb90:	10bb7304 	addi	r2,r2,-4660
   5cb94:	dfc00915 	stw	ra,36(sp)
   5cb98:	dd000815 	stw	r20,32(sp)
   5cb9c:	dcc00715 	stw	r19,28(sp)
   5cba0:	dc000415 	stw	r16,16(sp)
   5cba4:	3025883a 	mov	r18,r6
   5cba8:	14400017 	ldw	r17,0(r2)
   5cbac:	20001926 	beq	r4,zero,5cc14 <wcrtomb+0x94>
   5cbb0:	008001f4 	movhi	r2,7
   5cbb4:	10bb7704 	addi	r2,r2,-4644
   5cbb8:	15000017 	ldw	r20,0(r2)
   5cbbc:	2021883a 	mov	r16,r4
   5cbc0:	2827883a 	mov	r19,r5
   5cbc4:	00579880 	call	57988 <__locale_charset>
   5cbc8:	100f883a 	mov	r7,r2
   5cbcc:	dc800015 	stw	r18,0(sp)
   5cbd0:	980d883a 	mov	r6,r19
   5cbd4:	800b883a 	mov	r5,r16
   5cbd8:	8809883a 	mov	r4,r17
   5cbdc:	a03ee83a 	callr	r20
   5cbe0:	00ffffc4 	movi	r3,-1
   5cbe4:	10c0031e 	bne	r2,r3,5cbf4 <wcrtomb+0x74>
   5cbe8:	90000015 	stw	zero,0(r18)
   5cbec:	00c02284 	movi	r3,138
   5cbf0:	88c00015 	stw	r3,0(r17)
   5cbf4:	dfc00917 	ldw	ra,36(sp)
   5cbf8:	dd000817 	ldw	r20,32(sp)
   5cbfc:	dcc00717 	ldw	r19,28(sp)
   5cc00:	dc800617 	ldw	r18,24(sp)
   5cc04:	dc400517 	ldw	r17,20(sp)
   5cc08:	dc000417 	ldw	r16,16(sp)
   5cc0c:	dec00a04 	addi	sp,sp,40
   5cc10:	f800283a 	ret
   5cc14:	008001f4 	movhi	r2,7
   5cc18:	10bb7704 	addi	r2,r2,-4644
   5cc1c:	14000017 	ldw	r16,0(r2)
   5cc20:	00579880 	call	57988 <__locale_charset>
   5cc24:	100f883a 	mov	r7,r2
   5cc28:	dc800015 	stw	r18,0(sp)
   5cc2c:	000d883a 	mov	r6,zero
   5cc30:	d9400104 	addi	r5,sp,4
   5cc34:	8809883a 	mov	r4,r17
   5cc38:	803ee83a 	callr	r16
   5cc3c:	003fe806 	br	5cbe0 <__alt_data_end+0xfffdcbe0>

0005cc40 <__ascii_wctomb>:
   5cc40:	28000526 	beq	r5,zero,5cc58 <__ascii_wctomb+0x18>
   5cc44:	00803fc4 	movi	r2,255
   5cc48:	11800536 	bltu	r2,r6,5cc60 <__ascii_wctomb+0x20>
   5cc4c:	29800005 	stb	r6,0(r5)
   5cc50:	00800044 	movi	r2,1
   5cc54:	f800283a 	ret
   5cc58:	0005883a 	mov	r2,zero
   5cc5c:	f800283a 	ret
   5cc60:	00802284 	movi	r2,138
   5cc64:	20800015 	stw	r2,0(r4)
   5cc68:	00bfffc4 	movi	r2,-1
   5cc6c:	f800283a 	ret

0005cc70 <_wctomb_r>:
   5cc70:	008001f4 	movhi	r2,7
   5cc74:	defff904 	addi	sp,sp,-28
   5cc78:	10bb7704 	addi	r2,r2,-4644
   5cc7c:	dfc00615 	stw	ra,24(sp)
   5cc80:	dc400515 	stw	r17,20(sp)
   5cc84:	dc000415 	stw	r16,16(sp)
   5cc88:	3823883a 	mov	r17,r7
   5cc8c:	14000017 	ldw	r16,0(r2)
   5cc90:	d9000115 	stw	r4,4(sp)
   5cc94:	d9400215 	stw	r5,8(sp)
   5cc98:	d9800315 	stw	r6,12(sp)
   5cc9c:	00579880 	call	57988 <__locale_charset>
   5cca0:	d9800317 	ldw	r6,12(sp)
   5cca4:	d9400217 	ldw	r5,8(sp)
   5cca8:	d9000117 	ldw	r4,4(sp)
   5ccac:	100f883a 	mov	r7,r2
   5ccb0:	dc400015 	stw	r17,0(sp)
   5ccb4:	803ee83a 	callr	r16
   5ccb8:	dfc00617 	ldw	ra,24(sp)
   5ccbc:	dc400517 	ldw	r17,20(sp)
   5ccc0:	dc000417 	ldw	r16,16(sp)
   5ccc4:	dec00704 	addi	sp,sp,28
   5ccc8:	f800283a 	ret

0005cccc <__udivdi3>:
   5cccc:	defff404 	addi	sp,sp,-48
   5ccd0:	dcc00515 	stw	r19,20(sp)
   5ccd4:	dc000215 	stw	r16,8(sp)
   5ccd8:	dfc00b15 	stw	ra,44(sp)
   5ccdc:	df000a15 	stw	fp,40(sp)
   5cce0:	ddc00915 	stw	r23,36(sp)
   5cce4:	dd800815 	stw	r22,32(sp)
   5cce8:	dd400715 	stw	r21,28(sp)
   5ccec:	dd000615 	stw	r20,24(sp)
   5ccf0:	dc800415 	stw	r18,16(sp)
   5ccf4:	dc400315 	stw	r17,12(sp)
   5ccf8:	2027883a 	mov	r19,r4
   5ccfc:	2821883a 	mov	r16,r5
   5cd00:	3800461e 	bne	r7,zero,5ce1c <__udivdi3+0x150>
   5cd04:	3023883a 	mov	r17,r6
   5cd08:	2025883a 	mov	r18,r4
   5cd0c:	2980572e 	bgeu	r5,r6,5ce6c <__udivdi3+0x1a0>
   5cd10:	00bfffd4 	movui	r2,65535
   5cd14:	282d883a 	mov	r22,r5
   5cd18:	1180b236 	bltu	r2,r6,5cfe4 <__udivdi3+0x318>
   5cd1c:	00803fc4 	movi	r2,255
   5cd20:	1185803a 	cmpltu	r2,r2,r6
   5cd24:	100490fa 	slli	r2,r2,3
   5cd28:	3086d83a 	srl	r3,r6,r2
   5cd2c:	010001f4 	movhi	r4,7
   5cd30:	212e2e04 	addi	r4,r4,-18248
   5cd34:	20c7883a 	add	r3,r4,r3
   5cd38:	18c00003 	ldbu	r3,0(r3)
   5cd3c:	1885883a 	add	r2,r3,r2
   5cd40:	00c00804 	movi	r3,32
   5cd44:	1887c83a 	sub	r3,r3,r2
   5cd48:	18000526 	beq	r3,zero,5cd60 <__udivdi3+0x94>
   5cd4c:	80e0983a 	sll	r16,r16,r3
   5cd50:	9884d83a 	srl	r2,r19,r2
   5cd54:	30e2983a 	sll	r17,r6,r3
   5cd58:	98e4983a 	sll	r18,r19,r3
   5cd5c:	142cb03a 	or	r22,r2,r16
   5cd60:	882ad43a 	srli	r21,r17,16
   5cd64:	b009883a 	mov	r4,r22
   5cd68:	8d3fffcc 	andi	r20,r17,65535
   5cd6c:	a80b883a 	mov	r5,r21
   5cd70:	004da5c0 	call	4da5c <__umodsi3>
   5cd74:	b009883a 	mov	r4,r22
   5cd78:	a80b883a 	mov	r5,r21
   5cd7c:	1027883a 	mov	r19,r2
   5cd80:	004d9f80 	call	4d9f8 <__udivsi3>
   5cd84:	100b883a 	mov	r5,r2
   5cd88:	a009883a 	mov	r4,r20
   5cd8c:	102d883a 	mov	r22,r2
   5cd90:	004dab40 	call	4dab4 <__mulsi3>
   5cd94:	9826943a 	slli	r19,r19,16
   5cd98:	9006d43a 	srli	r3,r18,16
   5cd9c:	1cc6b03a 	or	r3,r3,r19
   5cda0:	1880052e 	bgeu	r3,r2,5cdb8 <__udivdi3+0xec>
   5cda4:	1c47883a 	add	r3,r3,r17
   5cda8:	b13fffc4 	addi	r4,r22,-1
   5cdac:	1c400136 	bltu	r3,r17,5cdb4 <__udivdi3+0xe8>
   5cdb0:	18814236 	bltu	r3,r2,5d2bc <__udivdi3+0x5f0>
   5cdb4:	202d883a 	mov	r22,r4
   5cdb8:	18a1c83a 	sub	r16,r3,r2
   5cdbc:	8009883a 	mov	r4,r16
   5cdc0:	a80b883a 	mov	r5,r21
   5cdc4:	004da5c0 	call	4da5c <__umodsi3>
   5cdc8:	1027883a 	mov	r19,r2
   5cdcc:	8009883a 	mov	r4,r16
   5cdd0:	a80b883a 	mov	r5,r21
   5cdd4:	9826943a 	slli	r19,r19,16
   5cdd8:	004d9f80 	call	4d9f8 <__udivsi3>
   5cddc:	100b883a 	mov	r5,r2
   5cde0:	a009883a 	mov	r4,r20
   5cde4:	94bfffcc 	andi	r18,r18,65535
   5cde8:	1021883a 	mov	r16,r2
   5cdec:	94e4b03a 	or	r18,r18,r19
   5cdf0:	004dab40 	call	4dab4 <__mulsi3>
   5cdf4:	9080052e 	bgeu	r18,r2,5ce0c <__udivdi3+0x140>
   5cdf8:	8ca5883a 	add	r18,r17,r18
   5cdfc:	80ffffc4 	addi	r3,r16,-1
   5ce00:	94410c36 	bltu	r18,r17,5d234 <__udivdi3+0x568>
   5ce04:	90810b2e 	bgeu	r18,r2,5d234 <__udivdi3+0x568>
   5ce08:	843fff84 	addi	r16,r16,-2
   5ce0c:	b004943a 	slli	r2,r22,16
   5ce10:	0007883a 	mov	r3,zero
   5ce14:	1404b03a 	or	r2,r2,r16
   5ce18:	00005e06 	br	5cf94 <__udivdi3+0x2c8>
   5ce1c:	29c05b36 	bltu	r5,r7,5cf8c <__udivdi3+0x2c0>
   5ce20:	00bfffd4 	movui	r2,65535
   5ce24:	11c0672e 	bgeu	r2,r7,5cfc4 <__udivdi3+0x2f8>
   5ce28:	00804034 	movhi	r2,256
   5ce2c:	10bfffc4 	addi	r2,r2,-1
   5ce30:	11c10a36 	bltu	r2,r7,5d25c <__udivdi3+0x590>
   5ce34:	00800404 	movi	r2,16
   5ce38:	3886d83a 	srl	r3,r7,r2
   5ce3c:	010001f4 	movhi	r4,7
   5ce40:	212e2e04 	addi	r4,r4,-18248
   5ce44:	20c7883a 	add	r3,r4,r3
   5ce48:	18c00003 	ldbu	r3,0(r3)
   5ce4c:	05c00804 	movi	r23,32
   5ce50:	1885883a 	add	r2,r3,r2
   5ce54:	b8afc83a 	sub	r23,r23,r2
   5ce58:	b800671e 	bne	r23,zero,5cff8 <__udivdi3+0x32c>
   5ce5c:	3c010536 	bltu	r7,r16,5d274 <__udivdi3+0x5a8>
   5ce60:	9985403a 	cmpgeu	r2,r19,r6
   5ce64:	0007883a 	mov	r3,zero
   5ce68:	00004a06 	br	5cf94 <__udivdi3+0x2c8>
   5ce6c:	3000041e 	bne	r6,zero,5ce80 <__udivdi3+0x1b4>
   5ce70:	000b883a 	mov	r5,zero
   5ce74:	01000044 	movi	r4,1
   5ce78:	004d9f80 	call	4d9f8 <__udivsi3>
   5ce7c:	1023883a 	mov	r17,r2
   5ce80:	00bfffd4 	movui	r2,65535
   5ce84:	1440532e 	bgeu	r2,r17,5cfd4 <__udivdi3+0x308>
   5ce88:	00804034 	movhi	r2,256
   5ce8c:	10bfffc4 	addi	r2,r2,-1
   5ce90:	1440f436 	bltu	r2,r17,5d264 <__udivdi3+0x598>
   5ce94:	00800404 	movi	r2,16
   5ce98:	8886d83a 	srl	r3,r17,r2
   5ce9c:	010001f4 	movhi	r4,7
   5cea0:	212e2e04 	addi	r4,r4,-18248
   5cea4:	20c7883a 	add	r3,r4,r3
   5cea8:	18c00003 	ldbu	r3,0(r3)
   5ceac:	1885883a 	add	r2,r3,r2
   5ceb0:	00c00804 	movi	r3,32
   5ceb4:	1887c83a 	sub	r3,r3,r2
   5ceb8:	1800a51e 	bne	r3,zero,5d150 <__udivdi3+0x484>
   5cebc:	882ad43a 	srli	r21,r17,16
   5cec0:	8461c83a 	sub	r16,r16,r17
   5cec4:	8d3fffcc 	andi	r20,r17,65535
   5cec8:	00c00044 	movi	r3,1
   5cecc:	a80b883a 	mov	r5,r21
   5ced0:	8009883a 	mov	r4,r16
   5ced4:	d8c00115 	stw	r3,4(sp)
   5ced8:	004da5c0 	call	4da5c <__umodsi3>
   5cedc:	a80b883a 	mov	r5,r21
   5cee0:	8009883a 	mov	r4,r16
   5cee4:	1027883a 	mov	r19,r2
   5cee8:	004d9f80 	call	4d9f8 <__udivsi3>
   5ceec:	a00b883a 	mov	r5,r20
   5cef0:	1009883a 	mov	r4,r2
   5cef4:	102d883a 	mov	r22,r2
   5cef8:	004dab40 	call	4dab4 <__mulsi3>
   5cefc:	9826943a 	slli	r19,r19,16
   5cf00:	900ed43a 	srli	r7,r18,16
   5cf04:	d8c00117 	ldw	r3,4(sp)
   5cf08:	3cceb03a 	or	r7,r7,r19
   5cf0c:	3880052e 	bgeu	r7,r2,5cf24 <__udivdi3+0x258>
   5cf10:	3c4f883a 	add	r7,r7,r17
   5cf14:	b13fffc4 	addi	r4,r22,-1
   5cf18:	3c400136 	bltu	r7,r17,5cf20 <__udivdi3+0x254>
   5cf1c:	3880e436 	bltu	r7,r2,5d2b0 <__udivdi3+0x5e4>
   5cf20:	202d883a 	mov	r22,r4
   5cf24:	38a1c83a 	sub	r16,r7,r2
   5cf28:	8009883a 	mov	r4,r16
   5cf2c:	a80b883a 	mov	r5,r21
   5cf30:	d8c00115 	stw	r3,4(sp)
   5cf34:	004da5c0 	call	4da5c <__umodsi3>
   5cf38:	1027883a 	mov	r19,r2
   5cf3c:	8009883a 	mov	r4,r16
   5cf40:	a80b883a 	mov	r5,r21
   5cf44:	9826943a 	slli	r19,r19,16
   5cf48:	004d9f80 	call	4d9f8 <__udivsi3>
   5cf4c:	a00b883a 	mov	r5,r20
   5cf50:	1009883a 	mov	r4,r2
   5cf54:	94bfffcc 	andi	r18,r18,65535
   5cf58:	1021883a 	mov	r16,r2
   5cf5c:	94e4b03a 	or	r18,r18,r19
   5cf60:	004dab40 	call	4dab4 <__mulsi3>
   5cf64:	d8c00117 	ldw	r3,4(sp)
   5cf68:	9080052e 	bgeu	r18,r2,5cf80 <__udivdi3+0x2b4>
   5cf6c:	8ca5883a 	add	r18,r17,r18
   5cf70:	813fffc4 	addi	r4,r16,-1
   5cf74:	9440ad36 	bltu	r18,r17,5d22c <__udivdi3+0x560>
   5cf78:	9080ac2e 	bgeu	r18,r2,5d22c <__udivdi3+0x560>
   5cf7c:	843fff84 	addi	r16,r16,-2
   5cf80:	b004943a 	slli	r2,r22,16
   5cf84:	1404b03a 	or	r2,r2,r16
   5cf88:	00000206 	br	5cf94 <__udivdi3+0x2c8>
   5cf8c:	0007883a 	mov	r3,zero
   5cf90:	0005883a 	mov	r2,zero
   5cf94:	dfc00b17 	ldw	ra,44(sp)
   5cf98:	df000a17 	ldw	fp,40(sp)
   5cf9c:	ddc00917 	ldw	r23,36(sp)
   5cfa0:	dd800817 	ldw	r22,32(sp)
   5cfa4:	dd400717 	ldw	r21,28(sp)
   5cfa8:	dd000617 	ldw	r20,24(sp)
   5cfac:	dcc00517 	ldw	r19,20(sp)
   5cfb0:	dc800417 	ldw	r18,16(sp)
   5cfb4:	dc400317 	ldw	r17,12(sp)
   5cfb8:	dc000217 	ldw	r16,8(sp)
   5cfbc:	dec00c04 	addi	sp,sp,48
   5cfc0:	f800283a 	ret
   5cfc4:	00803fc4 	movi	r2,255
   5cfc8:	11c5803a 	cmpltu	r2,r2,r7
   5cfcc:	100490fa 	slli	r2,r2,3
   5cfd0:	003f9906 	br	5ce38 <__alt_data_end+0xfffdce38>
   5cfd4:	00803fc4 	movi	r2,255
   5cfd8:	1445803a 	cmpltu	r2,r2,r17
   5cfdc:	100490fa 	slli	r2,r2,3
   5cfe0:	003fad06 	br	5ce98 <__alt_data_end+0xfffdce98>
   5cfe4:	00804034 	movhi	r2,256
   5cfe8:	10bfffc4 	addi	r2,r2,-1
   5cfec:	11809f36 	bltu	r2,r6,5d26c <__udivdi3+0x5a0>
   5cff0:	00800404 	movi	r2,16
   5cff4:	003f4c06 	br	5cd28 <__alt_data_end+0xfffdcd28>
   5cff8:	3dce983a 	sll	r7,r7,r23
   5cffc:	30b8d83a 	srl	fp,r6,r2
   5d000:	80a2d83a 	srl	r17,r16,r2
   5d004:	35cc983a 	sll	r6,r6,r23
   5d008:	3f38b03a 	or	fp,r7,fp
   5d00c:	e024d43a 	srli	r18,fp,16
   5d010:	9884d83a 	srl	r2,r19,r2
   5d014:	85e0983a 	sll	r16,r16,r23
   5d018:	8809883a 	mov	r4,r17
   5d01c:	900b883a 	mov	r5,r18
   5d020:	d9800015 	stw	r6,0(sp)
   5d024:	1420b03a 	or	r16,r2,r16
   5d028:	004da5c0 	call	4da5c <__umodsi3>
   5d02c:	900b883a 	mov	r5,r18
   5d030:	8809883a 	mov	r4,r17
   5d034:	1029883a 	mov	r20,r2
   5d038:	e5bfffcc 	andi	r22,fp,65535
   5d03c:	004d9f80 	call	4d9f8 <__udivsi3>
   5d040:	100b883a 	mov	r5,r2
   5d044:	b009883a 	mov	r4,r22
   5d048:	102b883a 	mov	r21,r2
   5d04c:	004dab40 	call	4dab4 <__mulsi3>
   5d050:	a028943a 	slli	r20,r20,16
   5d054:	8006d43a 	srli	r3,r16,16
   5d058:	1d06b03a 	or	r3,r3,r20
   5d05c:	1880042e 	bgeu	r3,r2,5d070 <__udivdi3+0x3a4>
   5d060:	1f07883a 	add	r3,r3,fp
   5d064:	a93fffc4 	addi	r4,r21,-1
   5d068:	1f00892e 	bgeu	r3,fp,5d290 <__udivdi3+0x5c4>
   5d06c:	202b883a 	mov	r21,r4
   5d070:	18a3c83a 	sub	r17,r3,r2
   5d074:	8809883a 	mov	r4,r17
   5d078:	900b883a 	mov	r5,r18
   5d07c:	004da5c0 	call	4da5c <__umodsi3>
   5d080:	1029883a 	mov	r20,r2
   5d084:	8809883a 	mov	r4,r17
   5d088:	900b883a 	mov	r5,r18
   5d08c:	a028943a 	slli	r20,r20,16
   5d090:	004d9f80 	call	4d9f8 <__udivsi3>
   5d094:	100b883a 	mov	r5,r2
   5d098:	b009883a 	mov	r4,r22
   5d09c:	843fffcc 	andi	r16,r16,65535
   5d0a0:	1023883a 	mov	r17,r2
   5d0a4:	8520b03a 	or	r16,r16,r20
   5d0a8:	004dab40 	call	4dab4 <__mulsi3>
   5d0ac:	8080042e 	bgeu	r16,r2,5d0c0 <__udivdi3+0x3f4>
   5d0b0:	8721883a 	add	r16,r16,fp
   5d0b4:	88ffffc4 	addi	r3,r17,-1
   5d0b8:	8700712e 	bgeu	r16,fp,5d280 <__udivdi3+0x5b4>
   5d0bc:	1823883a 	mov	r17,r3
   5d0c0:	a80e943a 	slli	r7,r21,16
   5d0c4:	d8c00017 	ldw	r3,0(sp)
   5d0c8:	80a1c83a 	sub	r16,r16,r2
   5d0cc:	3c64b03a 	or	r18,r7,r17
   5d0d0:	1d3fffcc 	andi	r20,r3,65535
   5d0d4:	9022d43a 	srli	r17,r18,16
   5d0d8:	95bfffcc 	andi	r22,r18,65535
   5d0dc:	a00b883a 	mov	r5,r20
   5d0e0:	b009883a 	mov	r4,r22
   5d0e4:	182ad43a 	srli	r21,r3,16
   5d0e8:	004dab40 	call	4dab4 <__mulsi3>
   5d0ec:	a00b883a 	mov	r5,r20
   5d0f0:	8809883a 	mov	r4,r17
   5d0f4:	1039883a 	mov	fp,r2
   5d0f8:	004dab40 	call	4dab4 <__mulsi3>
   5d0fc:	8809883a 	mov	r4,r17
   5d100:	a80b883a 	mov	r5,r21
   5d104:	1029883a 	mov	r20,r2
   5d108:	004dab40 	call	4dab4 <__mulsi3>
   5d10c:	a80b883a 	mov	r5,r21
   5d110:	b009883a 	mov	r4,r22
   5d114:	1023883a 	mov	r17,r2
   5d118:	004dab40 	call	4dab4 <__mulsi3>
   5d11c:	e006d43a 	srli	r3,fp,16
   5d120:	1505883a 	add	r2,r2,r20
   5d124:	1887883a 	add	r3,r3,r2
   5d128:	1d00022e 	bgeu	r3,r20,5d134 <__udivdi3+0x468>
   5d12c:	00800074 	movhi	r2,1
   5d130:	88a3883a 	add	r17,r17,r2
   5d134:	1804d43a 	srli	r2,r3,16
   5d138:	1463883a 	add	r17,r2,r17
   5d13c:	84404436 	bltu	r16,r17,5d250 <__udivdi3+0x584>
   5d140:	84403e26 	beq	r16,r17,5d23c <__udivdi3+0x570>
   5d144:	9005883a 	mov	r2,r18
   5d148:	0007883a 	mov	r3,zero
   5d14c:	003f9106 	br	5cf94 <__alt_data_end+0xfffdcf94>
   5d150:	88e2983a 	sll	r17,r17,r3
   5d154:	80aed83a 	srl	r23,r16,r2
   5d158:	80e0983a 	sll	r16,r16,r3
   5d15c:	882ad43a 	srli	r21,r17,16
   5d160:	9884d83a 	srl	r2,r19,r2
   5d164:	b809883a 	mov	r4,r23
   5d168:	a80b883a 	mov	r5,r21
   5d16c:	98e4983a 	sll	r18,r19,r3
   5d170:	142cb03a 	or	r22,r2,r16
   5d174:	004da5c0 	call	4da5c <__umodsi3>
   5d178:	b809883a 	mov	r4,r23
   5d17c:	a80b883a 	mov	r5,r21
   5d180:	1027883a 	mov	r19,r2
   5d184:	8d3fffcc 	andi	r20,r17,65535
   5d188:	004d9f80 	call	4d9f8 <__udivsi3>
   5d18c:	a009883a 	mov	r4,r20
   5d190:	100b883a 	mov	r5,r2
   5d194:	102f883a 	mov	r23,r2
   5d198:	004dab40 	call	4dab4 <__mulsi3>
   5d19c:	9826943a 	slli	r19,r19,16
   5d1a0:	b008d43a 	srli	r4,r22,16
   5d1a4:	24c8b03a 	or	r4,r4,r19
   5d1a8:	2080062e 	bgeu	r4,r2,5d1c4 <__udivdi3+0x4f8>
   5d1ac:	2449883a 	add	r4,r4,r17
   5d1b0:	b8ffffc4 	addi	r3,r23,-1
   5d1b4:	24403c36 	bltu	r4,r17,5d2a8 <__udivdi3+0x5dc>
   5d1b8:	20803b2e 	bgeu	r4,r2,5d2a8 <__udivdi3+0x5dc>
   5d1bc:	bdffff84 	addi	r23,r23,-2
   5d1c0:	2449883a 	add	r4,r4,r17
   5d1c4:	20a1c83a 	sub	r16,r4,r2
   5d1c8:	a80b883a 	mov	r5,r21
   5d1cc:	8009883a 	mov	r4,r16
   5d1d0:	004da5c0 	call	4da5c <__umodsi3>
   5d1d4:	a80b883a 	mov	r5,r21
   5d1d8:	8009883a 	mov	r4,r16
   5d1dc:	1027883a 	mov	r19,r2
   5d1e0:	004d9f80 	call	4d9f8 <__udivsi3>
   5d1e4:	a009883a 	mov	r4,r20
   5d1e8:	100b883a 	mov	r5,r2
   5d1ec:	9826943a 	slli	r19,r19,16
   5d1f0:	1039883a 	mov	fp,r2
   5d1f4:	004dab40 	call	4dab4 <__mulsi3>
   5d1f8:	b13fffcc 	andi	r4,r22,65535
   5d1fc:	24c8b03a 	or	r4,r4,r19
   5d200:	2080062e 	bgeu	r4,r2,5d21c <__udivdi3+0x550>
   5d204:	2449883a 	add	r4,r4,r17
   5d208:	e0ffffc4 	addi	r3,fp,-1
   5d20c:	24402436 	bltu	r4,r17,5d2a0 <__udivdi3+0x5d4>
   5d210:	2080232e 	bgeu	r4,r2,5d2a0 <__udivdi3+0x5d4>
   5d214:	e73fff84 	addi	fp,fp,-2
   5d218:	2449883a 	add	r4,r4,r17
   5d21c:	b82e943a 	slli	r23,r23,16
   5d220:	20a1c83a 	sub	r16,r4,r2
   5d224:	bf06b03a 	or	r3,r23,fp
   5d228:	003f2806 	br	5cecc <__alt_data_end+0xfffdcecc>
   5d22c:	2021883a 	mov	r16,r4
   5d230:	003f5306 	br	5cf80 <__alt_data_end+0xfffdcf80>
   5d234:	1821883a 	mov	r16,r3
   5d238:	003ef406 	br	5ce0c <__alt_data_end+0xfffdce0c>
   5d23c:	1806943a 	slli	r3,r3,16
   5d240:	9de6983a 	sll	r19,r19,r23
   5d244:	e73fffcc 	andi	fp,fp,65535
   5d248:	1f07883a 	add	r3,r3,fp
   5d24c:	98ffbd2e 	bgeu	r19,r3,5d144 <__alt_data_end+0xfffdd144>
   5d250:	90bfffc4 	addi	r2,r18,-1
   5d254:	0007883a 	mov	r3,zero
   5d258:	003f4e06 	br	5cf94 <__alt_data_end+0xfffdcf94>
   5d25c:	00800604 	movi	r2,24
   5d260:	003ef506 	br	5ce38 <__alt_data_end+0xfffdce38>
   5d264:	00800604 	movi	r2,24
   5d268:	003f0b06 	br	5ce98 <__alt_data_end+0xfffdce98>
   5d26c:	00800604 	movi	r2,24
   5d270:	003ead06 	br	5cd28 <__alt_data_end+0xfffdcd28>
   5d274:	0007883a 	mov	r3,zero
   5d278:	00800044 	movi	r2,1
   5d27c:	003f4506 	br	5cf94 <__alt_data_end+0xfffdcf94>
   5d280:	80bf8e2e 	bgeu	r16,r2,5d0bc <__alt_data_end+0xfffdd0bc>
   5d284:	8c7fff84 	addi	r17,r17,-2
   5d288:	8721883a 	add	r16,r16,fp
   5d28c:	003f8c06 	br	5d0c0 <__alt_data_end+0xfffdd0c0>
   5d290:	18bf762e 	bgeu	r3,r2,5d06c <__alt_data_end+0xfffdd06c>
   5d294:	ad7fff84 	addi	r21,r21,-2
   5d298:	1f07883a 	add	r3,r3,fp
   5d29c:	003f7406 	br	5d070 <__alt_data_end+0xfffdd070>
   5d2a0:	1839883a 	mov	fp,r3
   5d2a4:	003fdd06 	br	5d21c <__alt_data_end+0xfffdd21c>
   5d2a8:	182f883a 	mov	r23,r3
   5d2ac:	003fc506 	br	5d1c4 <__alt_data_end+0xfffdd1c4>
   5d2b0:	b5bfff84 	addi	r22,r22,-2
   5d2b4:	3c4f883a 	add	r7,r7,r17
   5d2b8:	003f1a06 	br	5cf24 <__alt_data_end+0xfffdcf24>
   5d2bc:	b5bfff84 	addi	r22,r22,-2
   5d2c0:	1c47883a 	add	r3,r3,r17
   5d2c4:	003ebc06 	br	5cdb8 <__alt_data_end+0xfffdcdb8>

0005d2c8 <__umoddi3>:
   5d2c8:	defff304 	addi	sp,sp,-52
   5d2cc:	df000b15 	stw	fp,44(sp)
   5d2d0:	dc400415 	stw	r17,16(sp)
   5d2d4:	dc000315 	stw	r16,12(sp)
   5d2d8:	dfc00c15 	stw	ra,48(sp)
   5d2dc:	ddc00a15 	stw	r23,40(sp)
   5d2e0:	dd800915 	stw	r22,36(sp)
   5d2e4:	dd400815 	stw	r21,32(sp)
   5d2e8:	dd000715 	stw	r20,28(sp)
   5d2ec:	dcc00615 	stw	r19,24(sp)
   5d2f0:	dc800515 	stw	r18,20(sp)
   5d2f4:	2021883a 	mov	r16,r4
   5d2f8:	2823883a 	mov	r17,r5
   5d2fc:	2839883a 	mov	fp,r5
   5d300:	3800401e 	bne	r7,zero,5d404 <__umoddi3+0x13c>
   5d304:	3027883a 	mov	r19,r6
   5d308:	2029883a 	mov	r20,r4
   5d30c:	2980552e 	bgeu	r5,r6,5d464 <__umoddi3+0x19c>
   5d310:	00bfffd4 	movui	r2,65535
   5d314:	1180a236 	bltu	r2,r6,5d5a0 <__umoddi3+0x2d8>
   5d318:	01003fc4 	movi	r4,255
   5d31c:	2189803a 	cmpltu	r4,r4,r6
   5d320:	200890fa 	slli	r4,r4,3
   5d324:	3104d83a 	srl	r2,r6,r4
   5d328:	00c001f4 	movhi	r3,7
   5d32c:	18ee2e04 	addi	r3,r3,-18248
   5d330:	1885883a 	add	r2,r3,r2
   5d334:	10c00003 	ldbu	r3,0(r2)
   5d338:	00800804 	movi	r2,32
   5d33c:	1909883a 	add	r4,r3,r4
   5d340:	1125c83a 	sub	r18,r2,r4
   5d344:	90000526 	beq	r18,zero,5d35c <__umoddi3+0x94>
   5d348:	8ca2983a 	sll	r17,r17,r18
   5d34c:	8108d83a 	srl	r4,r16,r4
   5d350:	34a6983a 	sll	r19,r6,r18
   5d354:	84a8983a 	sll	r20,r16,r18
   5d358:	2478b03a 	or	fp,r4,r17
   5d35c:	982cd43a 	srli	r22,r19,16
   5d360:	e009883a 	mov	r4,fp
   5d364:	9dffffcc 	andi	r23,r19,65535
   5d368:	b00b883a 	mov	r5,r22
   5d36c:	004da5c0 	call	4da5c <__umodsi3>
   5d370:	b00b883a 	mov	r5,r22
   5d374:	e009883a 	mov	r4,fp
   5d378:	102b883a 	mov	r21,r2
   5d37c:	004d9f80 	call	4d9f8 <__udivsi3>
   5d380:	100b883a 	mov	r5,r2
   5d384:	b809883a 	mov	r4,r23
   5d388:	004dab40 	call	4dab4 <__mulsi3>
   5d38c:	a82a943a 	slli	r21,r21,16
   5d390:	a006d43a 	srli	r3,r20,16
   5d394:	1d46b03a 	or	r3,r3,r21
   5d398:	1880032e 	bgeu	r3,r2,5d3a8 <__umoddi3+0xe0>
   5d39c:	1cc7883a 	add	r3,r3,r19
   5d3a0:	1cc00136 	bltu	r3,r19,5d3a8 <__umoddi3+0xe0>
   5d3a4:	18813136 	bltu	r3,r2,5d86c <__umoddi3+0x5a4>
   5d3a8:	18a1c83a 	sub	r16,r3,r2
   5d3ac:	b00b883a 	mov	r5,r22
   5d3b0:	8009883a 	mov	r4,r16
   5d3b4:	004da5c0 	call	4da5c <__umodsi3>
   5d3b8:	b00b883a 	mov	r5,r22
   5d3bc:	8009883a 	mov	r4,r16
   5d3c0:	1023883a 	mov	r17,r2
   5d3c4:	004d9f80 	call	4d9f8 <__udivsi3>
   5d3c8:	100b883a 	mov	r5,r2
   5d3cc:	b809883a 	mov	r4,r23
   5d3d0:	8822943a 	slli	r17,r17,16
   5d3d4:	004dab40 	call	4dab4 <__mulsi3>
   5d3d8:	a0ffffcc 	andi	r3,r20,65535
   5d3dc:	1c46b03a 	or	r3,r3,r17
   5d3e0:	1880042e 	bgeu	r3,r2,5d3f4 <__umoddi3+0x12c>
   5d3e4:	1cc7883a 	add	r3,r3,r19
   5d3e8:	1cc00236 	bltu	r3,r19,5d3f4 <__umoddi3+0x12c>
   5d3ec:	1880012e 	bgeu	r3,r2,5d3f4 <__umoddi3+0x12c>
   5d3f0:	1cc7883a 	add	r3,r3,r19
   5d3f4:	1885c83a 	sub	r2,r3,r2
   5d3f8:	1484d83a 	srl	r2,r2,r18
   5d3fc:	0007883a 	mov	r3,zero
   5d400:	00005306 	br	5d550 <__umoddi3+0x288>
   5d404:	29c05036 	bltu	r5,r7,5d548 <__umoddi3+0x280>
   5d408:	00bfffd4 	movui	r2,65535
   5d40c:	11c05c2e 	bgeu	r2,r7,5d580 <__umoddi3+0x2b8>
   5d410:	00804034 	movhi	r2,256
   5d414:	10bfffc4 	addi	r2,r2,-1
   5d418:	11c10636 	bltu	r2,r7,5d834 <__umoddi3+0x56c>
   5d41c:	01000404 	movi	r4,16
   5d420:	3904d83a 	srl	r2,r7,r4
   5d424:	00c001f4 	movhi	r3,7
   5d428:	18ee2e04 	addi	r3,r3,-18248
   5d42c:	1885883a 	add	r2,r3,r2
   5d430:	14c00003 	ldbu	r19,0(r2)
   5d434:	00c00804 	movi	r3,32
   5d438:	9927883a 	add	r19,r19,r4
   5d43c:	1ce9c83a 	sub	r20,r3,r19
   5d440:	a0005c1e 	bne	r20,zero,5d5b4 <__umoddi3+0x2ec>
   5d444:	3c400136 	bltu	r7,r17,5d44c <__umoddi3+0x184>
   5d448:	81810a36 	bltu	r16,r6,5d874 <__umoddi3+0x5ac>
   5d44c:	8185c83a 	sub	r2,r16,r6
   5d450:	89e3c83a 	sub	r17,r17,r7
   5d454:	8089803a 	cmpltu	r4,r16,r2
   5d458:	8939c83a 	sub	fp,r17,r4
   5d45c:	e007883a 	mov	r3,fp
   5d460:	00003b06 	br	5d550 <__umoddi3+0x288>
   5d464:	3000041e 	bne	r6,zero,5d478 <__umoddi3+0x1b0>
   5d468:	000b883a 	mov	r5,zero
   5d46c:	01000044 	movi	r4,1
   5d470:	004d9f80 	call	4d9f8 <__udivsi3>
   5d474:	1027883a 	mov	r19,r2
   5d478:	00bfffd4 	movui	r2,65535
   5d47c:	14c0442e 	bgeu	r2,r19,5d590 <__umoddi3+0x2c8>
   5d480:	00804034 	movhi	r2,256
   5d484:	10bfffc4 	addi	r2,r2,-1
   5d488:	14c0ec36 	bltu	r2,r19,5d83c <__umoddi3+0x574>
   5d48c:	00800404 	movi	r2,16
   5d490:	9886d83a 	srl	r3,r19,r2
   5d494:	010001f4 	movhi	r4,7
   5d498:	212e2e04 	addi	r4,r4,-18248
   5d49c:	20c7883a 	add	r3,r4,r3
   5d4a0:	18c00003 	ldbu	r3,0(r3)
   5d4a4:	1887883a 	add	r3,r3,r2
   5d4a8:	00800804 	movi	r2,32
   5d4ac:	10e5c83a 	sub	r18,r2,r3
   5d4b0:	9000ab1e 	bne	r18,zero,5d760 <__umoddi3+0x498>
   5d4b4:	982cd43a 	srli	r22,r19,16
   5d4b8:	8ce3c83a 	sub	r17,r17,r19
   5d4bc:	9dffffcc 	andi	r23,r19,65535
   5d4c0:	b00b883a 	mov	r5,r22
   5d4c4:	8809883a 	mov	r4,r17
   5d4c8:	004da5c0 	call	4da5c <__umodsi3>
   5d4cc:	b00b883a 	mov	r5,r22
   5d4d0:	8809883a 	mov	r4,r17
   5d4d4:	102b883a 	mov	r21,r2
   5d4d8:	004d9f80 	call	4d9f8 <__udivsi3>
   5d4dc:	b80b883a 	mov	r5,r23
   5d4e0:	1009883a 	mov	r4,r2
   5d4e4:	004dab40 	call	4dab4 <__mulsi3>
   5d4e8:	a82a943a 	slli	r21,r21,16
   5d4ec:	a006d43a 	srli	r3,r20,16
   5d4f0:	1d46b03a 	or	r3,r3,r21
   5d4f4:	1880042e 	bgeu	r3,r2,5d508 <__umoddi3+0x240>
   5d4f8:	1cc7883a 	add	r3,r3,r19
   5d4fc:	1cc00236 	bltu	r3,r19,5d508 <__umoddi3+0x240>
   5d500:	1880012e 	bgeu	r3,r2,5d508 <__umoddi3+0x240>
   5d504:	1cc7883a 	add	r3,r3,r19
   5d508:	18a1c83a 	sub	r16,r3,r2
   5d50c:	b00b883a 	mov	r5,r22
   5d510:	8009883a 	mov	r4,r16
   5d514:	004da5c0 	call	4da5c <__umodsi3>
   5d518:	1023883a 	mov	r17,r2
   5d51c:	b00b883a 	mov	r5,r22
   5d520:	8009883a 	mov	r4,r16
   5d524:	004d9f80 	call	4d9f8 <__udivsi3>
   5d528:	8822943a 	slli	r17,r17,16
   5d52c:	b80b883a 	mov	r5,r23
   5d530:	1009883a 	mov	r4,r2
   5d534:	004dab40 	call	4dab4 <__mulsi3>
   5d538:	a53fffcc 	andi	r20,r20,65535
   5d53c:	a446b03a 	or	r3,r20,r17
   5d540:	18bfac2e 	bgeu	r3,r2,5d3f4 <__alt_data_end+0xfffdd3f4>
   5d544:	003fa706 	br	5d3e4 <__alt_data_end+0xfffdd3e4>
   5d548:	2005883a 	mov	r2,r4
   5d54c:	2807883a 	mov	r3,r5
   5d550:	dfc00c17 	ldw	ra,48(sp)
   5d554:	df000b17 	ldw	fp,44(sp)
   5d558:	ddc00a17 	ldw	r23,40(sp)
   5d55c:	dd800917 	ldw	r22,36(sp)
   5d560:	dd400817 	ldw	r21,32(sp)
   5d564:	dd000717 	ldw	r20,28(sp)
   5d568:	dcc00617 	ldw	r19,24(sp)
   5d56c:	dc800517 	ldw	r18,20(sp)
   5d570:	dc400417 	ldw	r17,16(sp)
   5d574:	dc000317 	ldw	r16,12(sp)
   5d578:	dec00d04 	addi	sp,sp,52
   5d57c:	f800283a 	ret
   5d580:	04c03fc4 	movi	r19,255
   5d584:	99c9803a 	cmpltu	r4,r19,r7
   5d588:	200890fa 	slli	r4,r4,3
   5d58c:	003fa406 	br	5d420 <__alt_data_end+0xfffdd420>
   5d590:	00803fc4 	movi	r2,255
   5d594:	14c5803a 	cmpltu	r2,r2,r19
   5d598:	100490fa 	slli	r2,r2,3
   5d59c:	003fbc06 	br	5d490 <__alt_data_end+0xfffdd490>
   5d5a0:	00804034 	movhi	r2,256
   5d5a4:	10bfffc4 	addi	r2,r2,-1
   5d5a8:	1180a636 	bltu	r2,r6,5d844 <__umoddi3+0x57c>
   5d5ac:	01000404 	movi	r4,16
   5d5b0:	003f5c06 	br	5d324 <__alt_data_end+0xfffdd324>
   5d5b4:	3d0e983a 	sll	r7,r7,r20
   5d5b8:	34ead83a 	srl	r21,r6,r19
   5d5bc:	8cc6d83a 	srl	r3,r17,r19
   5d5c0:	8d10983a 	sll	r8,r17,r20
   5d5c4:	3d6ab03a 	or	r21,r7,r21
   5d5c8:	a82cd43a 	srli	r22,r21,16
   5d5cc:	84e2d83a 	srl	r17,r16,r19
   5d5d0:	1809883a 	mov	r4,r3
   5d5d4:	b00b883a 	mov	r5,r22
   5d5d8:	8a22b03a 	or	r17,r17,r8
   5d5dc:	3524983a 	sll	r18,r6,r20
   5d5e0:	dc400015 	stw	r17,0(sp)
   5d5e4:	d8c00115 	stw	r3,4(sp)
   5d5e8:	004da5c0 	call	4da5c <__umodsi3>
   5d5ec:	d8c00117 	ldw	r3,4(sp)
   5d5f0:	b00b883a 	mov	r5,r22
   5d5f4:	1039883a 	mov	fp,r2
   5d5f8:	1809883a 	mov	r4,r3
   5d5fc:	004d9f80 	call	4d9f8 <__udivsi3>
   5d600:	adffffcc 	andi	r23,r21,65535
   5d604:	100b883a 	mov	r5,r2
   5d608:	b809883a 	mov	r4,r23
   5d60c:	1023883a 	mov	r17,r2
   5d610:	004dab40 	call	4dab4 <__mulsi3>
   5d614:	d9400017 	ldw	r5,0(sp)
   5d618:	e008943a 	slli	r4,fp,16
   5d61c:	8520983a 	sll	r16,r16,r20
   5d620:	2806d43a 	srli	r3,r5,16
   5d624:	1906b03a 	or	r3,r3,r4
   5d628:	1880042e 	bgeu	r3,r2,5d63c <__umoddi3+0x374>
   5d62c:	1d47883a 	add	r3,r3,r21
   5d630:	893fffc4 	addi	r4,r17,-1
   5d634:	1d40892e 	bgeu	r3,r21,5d85c <__umoddi3+0x594>
   5d638:	2023883a 	mov	r17,r4
   5d63c:	18b9c83a 	sub	fp,r3,r2
   5d640:	b00b883a 	mov	r5,r22
   5d644:	e009883a 	mov	r4,fp
   5d648:	004da5c0 	call	4da5c <__umodsi3>
   5d64c:	b00b883a 	mov	r5,r22
   5d650:	e009883a 	mov	r4,fp
   5d654:	d8800215 	stw	r2,8(sp)
   5d658:	004d9f80 	call	4d9f8 <__udivsi3>
   5d65c:	100b883a 	mov	r5,r2
   5d660:	b809883a 	mov	r4,r23
   5d664:	102d883a 	mov	r22,r2
   5d668:	004dab40 	call	4dab4 <__mulsi3>
   5d66c:	d9800217 	ldw	r6,8(sp)
   5d670:	d8c00017 	ldw	r3,0(sp)
   5d674:	300c943a 	slli	r6,r6,16
   5d678:	1a3fffcc 	andi	r8,r3,65535
   5d67c:	4190b03a 	or	r8,r8,r6
   5d680:	4080042e 	bgeu	r8,r2,5d694 <__umoddi3+0x3cc>
   5d684:	4551883a 	add	r8,r8,r21
   5d688:	b0ffffc4 	addi	r3,r22,-1
   5d68c:	45406f2e 	bgeu	r8,r21,5d84c <__umoddi3+0x584>
   5d690:	182d883a 	mov	r22,r3
   5d694:	880e943a 	slli	r7,r17,16
   5d698:	9006d43a 	srli	r3,r18,16
   5d69c:	91bfffcc 	andi	r6,r18,65535
   5d6a0:	3dacb03a 	or	r22,r7,r22
   5d6a4:	b02ed43a 	srli	r23,r22,16
   5d6a8:	b5bfffcc 	andi	r22,r22,65535
   5d6ac:	300b883a 	mov	r5,r6
   5d6b0:	b009883a 	mov	r4,r22
   5d6b4:	40a3c83a 	sub	r17,r8,r2
   5d6b8:	d8c00115 	stw	r3,4(sp)
   5d6bc:	d9800215 	stw	r6,8(sp)
   5d6c0:	004dab40 	call	4dab4 <__mulsi3>
   5d6c4:	d9800217 	ldw	r6,8(sp)
   5d6c8:	b809883a 	mov	r4,r23
   5d6cc:	1039883a 	mov	fp,r2
   5d6d0:	300b883a 	mov	r5,r6
   5d6d4:	004dab40 	call	4dab4 <__mulsi3>
   5d6d8:	d8c00117 	ldw	r3,4(sp)
   5d6dc:	b809883a 	mov	r4,r23
   5d6e0:	d8800215 	stw	r2,8(sp)
   5d6e4:	180b883a 	mov	r5,r3
   5d6e8:	004dab40 	call	4dab4 <__mulsi3>
   5d6ec:	d8c00117 	ldw	r3,4(sp)
   5d6f0:	b009883a 	mov	r4,r22
   5d6f4:	102f883a 	mov	r23,r2
   5d6f8:	180b883a 	mov	r5,r3
   5d6fc:	004dab40 	call	4dab4 <__mulsi3>
   5d700:	d9800217 	ldw	r6,8(sp)
   5d704:	e006d43a 	srli	r3,fp,16
   5d708:	1185883a 	add	r2,r2,r6
   5d70c:	1885883a 	add	r2,r3,r2
   5d710:	1180022e 	bgeu	r2,r6,5d71c <__umoddi3+0x454>
   5d714:	00c00074 	movhi	r3,1
   5d718:	b8ef883a 	add	r23,r23,r3
   5d71c:	1006d43a 	srli	r3,r2,16
   5d720:	1004943a 	slli	r2,r2,16
   5d724:	e73fffcc 	andi	fp,fp,65535
   5d728:	1dc7883a 	add	r3,r3,r23
   5d72c:	1739883a 	add	fp,r2,fp
   5d730:	88c03a36 	bltu	r17,r3,5d81c <__umoddi3+0x554>
   5d734:	88c05126 	beq	r17,r3,5d87c <__umoddi3+0x5b4>
   5d738:	88c9c83a 	sub	r4,r17,r3
   5d73c:	e00f883a 	mov	r7,fp
   5d740:	81cfc83a 	sub	r7,r16,r7
   5d744:	81c7803a 	cmpltu	r3,r16,r7
   5d748:	20c7c83a 	sub	r3,r4,r3
   5d74c:	1cc4983a 	sll	r2,r3,r19
   5d750:	3d0ed83a 	srl	r7,r7,r20
   5d754:	1d06d83a 	srl	r3,r3,r20
   5d758:	11c4b03a 	or	r2,r2,r7
   5d75c:	003f7c06 	br	5d550 <__alt_data_end+0xfffdd550>
   5d760:	9ca6983a 	sll	r19,r19,r18
   5d764:	88f8d83a 	srl	fp,r17,r3
   5d768:	80c4d83a 	srl	r2,r16,r3
   5d76c:	982cd43a 	srli	r22,r19,16
   5d770:	8ca2983a 	sll	r17,r17,r18
   5d774:	e009883a 	mov	r4,fp
   5d778:	b00b883a 	mov	r5,r22
   5d77c:	146ab03a 	or	r21,r2,r17
   5d780:	004da5c0 	call	4da5c <__umodsi3>
   5d784:	b00b883a 	mov	r5,r22
   5d788:	e009883a 	mov	r4,fp
   5d78c:	1029883a 	mov	r20,r2
   5d790:	9dffffcc 	andi	r23,r19,65535
   5d794:	004d9f80 	call	4d9f8 <__udivsi3>
   5d798:	b809883a 	mov	r4,r23
   5d79c:	100b883a 	mov	r5,r2
   5d7a0:	004dab40 	call	4dab4 <__mulsi3>
   5d7a4:	a008943a 	slli	r4,r20,16
   5d7a8:	a806d43a 	srli	r3,r21,16
   5d7ac:	84a8983a 	sll	r20,r16,r18
   5d7b0:	1906b03a 	or	r3,r3,r4
   5d7b4:	1880042e 	bgeu	r3,r2,5d7c8 <__umoddi3+0x500>
   5d7b8:	1cc7883a 	add	r3,r3,r19
   5d7bc:	1cc00236 	bltu	r3,r19,5d7c8 <__umoddi3+0x500>
   5d7c0:	1880012e 	bgeu	r3,r2,5d7c8 <__umoddi3+0x500>
   5d7c4:	1cc7883a 	add	r3,r3,r19
   5d7c8:	18a3c83a 	sub	r17,r3,r2
   5d7cc:	b00b883a 	mov	r5,r22
   5d7d0:	8809883a 	mov	r4,r17
   5d7d4:	004da5c0 	call	4da5c <__umodsi3>
   5d7d8:	b00b883a 	mov	r5,r22
   5d7dc:	8809883a 	mov	r4,r17
   5d7e0:	1021883a 	mov	r16,r2
   5d7e4:	004d9f80 	call	4d9f8 <__udivsi3>
   5d7e8:	100b883a 	mov	r5,r2
   5d7ec:	b809883a 	mov	r4,r23
   5d7f0:	8020943a 	slli	r16,r16,16
   5d7f4:	004dab40 	call	4dab4 <__mulsi3>
   5d7f8:	a8ffffcc 	andi	r3,r21,65535
   5d7fc:	1c06b03a 	or	r3,r3,r16
   5d800:	1880042e 	bgeu	r3,r2,5d814 <__umoddi3+0x54c>
   5d804:	1cc7883a 	add	r3,r3,r19
   5d808:	1cc00236 	bltu	r3,r19,5d814 <__umoddi3+0x54c>
   5d80c:	1880012e 	bgeu	r3,r2,5d814 <__umoddi3+0x54c>
   5d810:	1cc7883a 	add	r3,r3,r19
   5d814:	18a3c83a 	sub	r17,r3,r2
   5d818:	003f2906 	br	5d4c0 <__alt_data_end+0xfffdd4c0>
   5d81c:	e48fc83a 	sub	r7,fp,r18
   5d820:	1d49c83a 	sub	r4,r3,r21
   5d824:	e1f9803a 	cmpltu	fp,fp,r7
   5d828:	2739c83a 	sub	fp,r4,fp
   5d82c:	8f09c83a 	sub	r4,r17,fp
   5d830:	003fc306 	br	5d740 <__alt_data_end+0xfffdd740>
   5d834:	01000604 	movi	r4,24
   5d838:	003ef906 	br	5d420 <__alt_data_end+0xfffdd420>
   5d83c:	00800604 	movi	r2,24
   5d840:	003f1306 	br	5d490 <__alt_data_end+0xfffdd490>
   5d844:	01000604 	movi	r4,24
   5d848:	003eb606 	br	5d324 <__alt_data_end+0xfffdd324>
   5d84c:	40bf902e 	bgeu	r8,r2,5d690 <__alt_data_end+0xfffdd690>
   5d850:	b5bfff84 	addi	r22,r22,-2
   5d854:	4551883a 	add	r8,r8,r21
   5d858:	003f8e06 	br	5d694 <__alt_data_end+0xfffdd694>
   5d85c:	18bf762e 	bgeu	r3,r2,5d638 <__alt_data_end+0xfffdd638>
   5d860:	8c7fff84 	addi	r17,r17,-2
   5d864:	1d47883a 	add	r3,r3,r21
   5d868:	003f7406 	br	5d63c <__alt_data_end+0xfffdd63c>
   5d86c:	1cc7883a 	add	r3,r3,r19
   5d870:	003ecd06 	br	5d3a8 <__alt_data_end+0xfffdd3a8>
   5d874:	8005883a 	mov	r2,r16
   5d878:	003ef806 	br	5d45c <__alt_data_end+0xfffdd45c>
   5d87c:	873fe736 	bltu	r16,fp,5d81c <__alt_data_end+0xfffdd81c>
   5d880:	e00f883a 	mov	r7,fp
   5d884:	0009883a 	mov	r4,zero
   5d888:	003fad06 	br	5d740 <__alt_data_end+0xfffdd740>

0005d88c <__adddf3>:
   5d88c:	02c00434 	movhi	r11,16
   5d890:	5affffc4 	addi	r11,r11,-1
   5d894:	2806d7fa 	srli	r3,r5,31
   5d898:	2ad4703a 	and	r10,r5,r11
   5d89c:	3ad2703a 	and	r9,r7,r11
   5d8a0:	3804d53a 	srli	r2,r7,20
   5d8a4:	3018d77a 	srli	r12,r6,29
   5d8a8:	280ad53a 	srli	r5,r5,20
   5d8ac:	501490fa 	slli	r10,r10,3
   5d8b0:	2010d77a 	srli	r8,r4,29
   5d8b4:	481290fa 	slli	r9,r9,3
   5d8b8:	380ed7fa 	srli	r7,r7,31
   5d8bc:	defffb04 	addi	sp,sp,-20
   5d8c0:	dc800215 	stw	r18,8(sp)
   5d8c4:	dc400115 	stw	r17,4(sp)
   5d8c8:	dc000015 	stw	r16,0(sp)
   5d8cc:	dfc00415 	stw	ra,16(sp)
   5d8d0:	dcc00315 	stw	r19,12(sp)
   5d8d4:	1c803fcc 	andi	r18,r3,255
   5d8d8:	2c01ffcc 	andi	r16,r5,2047
   5d8dc:	5210b03a 	or	r8,r10,r8
   5d8e0:	202290fa 	slli	r17,r4,3
   5d8e4:	1081ffcc 	andi	r2,r2,2047
   5d8e8:	4b12b03a 	or	r9,r9,r12
   5d8ec:	300c90fa 	slli	r6,r6,3
   5d8f0:	91c07526 	beq	r18,r7,5dac8 <__adddf3+0x23c>
   5d8f4:	8087c83a 	sub	r3,r16,r2
   5d8f8:	00c0ab0e 	bge	zero,r3,5dba8 <__adddf3+0x31c>
   5d8fc:	10002a1e 	bne	r2,zero,5d9a8 <__adddf3+0x11c>
   5d900:	4984b03a 	or	r2,r9,r6
   5d904:	1000961e 	bne	r2,zero,5db60 <__adddf3+0x2d4>
   5d908:	888001cc 	andi	r2,r17,7
   5d90c:	10000726 	beq	r2,zero,5d92c <__adddf3+0xa0>
   5d910:	888003cc 	andi	r2,r17,15
   5d914:	00c00104 	movi	r3,4
   5d918:	10c00426 	beq	r2,r3,5d92c <__adddf3+0xa0>
   5d91c:	88c7883a 	add	r3,r17,r3
   5d920:	1c63803a 	cmpltu	r17,r3,r17
   5d924:	4451883a 	add	r8,r8,r17
   5d928:	1823883a 	mov	r17,r3
   5d92c:	4080202c 	andhi	r2,r8,128
   5d930:	10005926 	beq	r2,zero,5da98 <__adddf3+0x20c>
   5d934:	84000044 	addi	r16,r16,1
   5d938:	0081ffc4 	movi	r2,2047
   5d93c:	8080ba26 	beq	r16,r2,5dc28 <__adddf3+0x39c>
   5d940:	00bfe034 	movhi	r2,65408
   5d944:	10bfffc4 	addi	r2,r2,-1
   5d948:	4090703a 	and	r8,r8,r2
   5d94c:	4004977a 	slli	r2,r8,29
   5d950:	4010927a 	slli	r8,r8,9
   5d954:	8822d0fa 	srli	r17,r17,3
   5d958:	8401ffcc 	andi	r16,r16,2047
   5d95c:	4010d33a 	srli	r8,r8,12
   5d960:	9007883a 	mov	r3,r18
   5d964:	1444b03a 	or	r2,r2,r17
   5d968:	8401ffcc 	andi	r16,r16,2047
   5d96c:	8020953a 	slli	r16,r16,20
   5d970:	18c03fcc 	andi	r3,r3,255
   5d974:	01000434 	movhi	r4,16
   5d978:	213fffc4 	addi	r4,r4,-1
   5d97c:	180697fa 	slli	r3,r3,31
   5d980:	4110703a 	and	r8,r8,r4
   5d984:	4410b03a 	or	r8,r8,r16
   5d988:	40c6b03a 	or	r3,r8,r3
   5d98c:	dfc00417 	ldw	ra,16(sp)
   5d990:	dcc00317 	ldw	r19,12(sp)
   5d994:	dc800217 	ldw	r18,8(sp)
   5d998:	dc400117 	ldw	r17,4(sp)
   5d99c:	dc000017 	ldw	r16,0(sp)
   5d9a0:	dec00504 	addi	sp,sp,20
   5d9a4:	f800283a 	ret
   5d9a8:	0081ffc4 	movi	r2,2047
   5d9ac:	80bfd626 	beq	r16,r2,5d908 <__alt_data_end+0xfffdd908>
   5d9b0:	4a402034 	orhi	r9,r9,128
   5d9b4:	00800e04 	movi	r2,56
   5d9b8:	10c09f16 	blt	r2,r3,5dc38 <__adddf3+0x3ac>
   5d9bc:	008007c4 	movi	r2,31
   5d9c0:	10c0c216 	blt	r2,r3,5dccc <__adddf3+0x440>
   5d9c4:	00800804 	movi	r2,32
   5d9c8:	10c5c83a 	sub	r2,r2,r3
   5d9cc:	488a983a 	sll	r5,r9,r2
   5d9d0:	30c8d83a 	srl	r4,r6,r3
   5d9d4:	3084983a 	sll	r2,r6,r2
   5d9d8:	48c6d83a 	srl	r3,r9,r3
   5d9dc:	290cb03a 	or	r6,r5,r4
   5d9e0:	1004c03a 	cmpne	r2,r2,zero
   5d9e4:	308cb03a 	or	r6,r6,r2
   5d9e8:	898dc83a 	sub	r6,r17,r6
   5d9ec:	89a3803a 	cmpltu	r17,r17,r6
   5d9f0:	40d1c83a 	sub	r8,r8,r3
   5d9f4:	4451c83a 	sub	r8,r8,r17
   5d9f8:	3023883a 	mov	r17,r6
   5d9fc:	4080202c 	andhi	r2,r8,128
   5da00:	10002326 	beq	r2,zero,5da90 <__adddf3+0x204>
   5da04:	04c02034 	movhi	r19,128
   5da08:	9cffffc4 	addi	r19,r19,-1
   5da0c:	44e6703a 	and	r19,r8,r19
   5da10:	98007626 	beq	r19,zero,5dbec <__adddf3+0x360>
   5da14:	9809883a 	mov	r4,r19
   5da18:	004f5580 	call	4f558 <__clzsi2>
   5da1c:	10fffe04 	addi	r3,r2,-8
   5da20:	010007c4 	movi	r4,31
   5da24:	20c07716 	blt	r4,r3,5dc04 <__adddf3+0x378>
   5da28:	00800804 	movi	r2,32
   5da2c:	10c5c83a 	sub	r2,r2,r3
   5da30:	8884d83a 	srl	r2,r17,r2
   5da34:	98d0983a 	sll	r8,r19,r3
   5da38:	88e2983a 	sll	r17,r17,r3
   5da3c:	1204b03a 	or	r2,r2,r8
   5da40:	1c007416 	blt	r3,r16,5dc14 <__adddf3+0x388>
   5da44:	1c21c83a 	sub	r16,r3,r16
   5da48:	82000044 	addi	r8,r16,1
   5da4c:	00c007c4 	movi	r3,31
   5da50:	1a009116 	blt	r3,r8,5dc98 <__adddf3+0x40c>
   5da54:	00c00804 	movi	r3,32
   5da58:	1a07c83a 	sub	r3,r3,r8
   5da5c:	8a08d83a 	srl	r4,r17,r8
   5da60:	88e2983a 	sll	r17,r17,r3
   5da64:	10c6983a 	sll	r3,r2,r3
   5da68:	1210d83a 	srl	r8,r2,r8
   5da6c:	8804c03a 	cmpne	r2,r17,zero
   5da70:	1906b03a 	or	r3,r3,r4
   5da74:	18a2b03a 	or	r17,r3,r2
   5da78:	0021883a 	mov	r16,zero
   5da7c:	003fa206 	br	5d908 <__alt_data_end+0xfffdd908>
   5da80:	1890b03a 	or	r8,r3,r2
   5da84:	40017d26 	beq	r8,zero,5e07c <__adddf3+0x7f0>
   5da88:	1011883a 	mov	r8,r2
   5da8c:	1823883a 	mov	r17,r3
   5da90:	888001cc 	andi	r2,r17,7
   5da94:	103f9e1e 	bne	r2,zero,5d910 <__alt_data_end+0xfffdd910>
   5da98:	4004977a 	slli	r2,r8,29
   5da9c:	8822d0fa 	srli	r17,r17,3
   5daa0:	4010d0fa 	srli	r8,r8,3
   5daa4:	9007883a 	mov	r3,r18
   5daa8:	1444b03a 	or	r2,r2,r17
   5daac:	0101ffc4 	movi	r4,2047
   5dab0:	81002426 	beq	r16,r4,5db44 <__adddf3+0x2b8>
   5dab4:	8120703a 	and	r16,r16,r4
   5dab8:	01000434 	movhi	r4,16
   5dabc:	213fffc4 	addi	r4,r4,-1
   5dac0:	4110703a 	and	r8,r8,r4
   5dac4:	003fa806 	br	5d968 <__alt_data_end+0xfffdd968>
   5dac8:	8089c83a 	sub	r4,r16,r2
   5dacc:	01005e0e 	bge	zero,r4,5dc48 <__adddf3+0x3bc>
   5dad0:	10002b26 	beq	r2,zero,5db80 <__adddf3+0x2f4>
   5dad4:	0081ffc4 	movi	r2,2047
   5dad8:	80bf8b26 	beq	r16,r2,5d908 <__alt_data_end+0xfffdd908>
   5dadc:	4a402034 	orhi	r9,r9,128
   5dae0:	00800e04 	movi	r2,56
   5dae4:	1100a40e 	bge	r2,r4,5dd78 <__adddf3+0x4ec>
   5dae8:	498cb03a 	or	r6,r9,r6
   5daec:	300ac03a 	cmpne	r5,r6,zero
   5daf0:	0013883a 	mov	r9,zero
   5daf4:	2c4b883a 	add	r5,r5,r17
   5daf8:	2c63803a 	cmpltu	r17,r5,r17
   5dafc:	4a11883a 	add	r8,r9,r8
   5db00:	8a11883a 	add	r8,r17,r8
   5db04:	2823883a 	mov	r17,r5
   5db08:	4080202c 	andhi	r2,r8,128
   5db0c:	103fe026 	beq	r2,zero,5da90 <__alt_data_end+0xfffdda90>
   5db10:	84000044 	addi	r16,r16,1
   5db14:	0081ffc4 	movi	r2,2047
   5db18:	8080d226 	beq	r16,r2,5de64 <__adddf3+0x5d8>
   5db1c:	00bfe034 	movhi	r2,65408
   5db20:	10bfffc4 	addi	r2,r2,-1
   5db24:	4090703a 	and	r8,r8,r2
   5db28:	880ad07a 	srli	r5,r17,1
   5db2c:	400897fa 	slli	r4,r8,31
   5db30:	88c0004c 	andi	r3,r17,1
   5db34:	28e2b03a 	or	r17,r5,r3
   5db38:	4010d07a 	srli	r8,r8,1
   5db3c:	2462b03a 	or	r17,r4,r17
   5db40:	003f7106 	br	5d908 <__alt_data_end+0xfffdd908>
   5db44:	4088b03a 	or	r4,r8,r2
   5db48:	20014526 	beq	r4,zero,5e060 <__adddf3+0x7d4>
   5db4c:	01000434 	movhi	r4,16
   5db50:	42000234 	orhi	r8,r8,8
   5db54:	213fffc4 	addi	r4,r4,-1
   5db58:	4110703a 	and	r8,r8,r4
   5db5c:	003f8206 	br	5d968 <__alt_data_end+0xfffdd968>
   5db60:	18ffffc4 	addi	r3,r3,-1
   5db64:	1800491e 	bne	r3,zero,5dc8c <__adddf3+0x400>
   5db68:	898bc83a 	sub	r5,r17,r6
   5db6c:	8963803a 	cmpltu	r17,r17,r5
   5db70:	4251c83a 	sub	r8,r8,r9
   5db74:	4451c83a 	sub	r8,r8,r17
   5db78:	2823883a 	mov	r17,r5
   5db7c:	003f9f06 	br	5d9fc <__alt_data_end+0xfffdd9fc>
   5db80:	4984b03a 	or	r2,r9,r6
   5db84:	103f6026 	beq	r2,zero,5d908 <__alt_data_end+0xfffdd908>
   5db88:	213fffc4 	addi	r4,r4,-1
   5db8c:	2000931e 	bne	r4,zero,5dddc <__adddf3+0x550>
   5db90:	898d883a 	add	r6,r17,r6
   5db94:	3463803a 	cmpltu	r17,r6,r17
   5db98:	4251883a 	add	r8,r8,r9
   5db9c:	8a11883a 	add	r8,r17,r8
   5dba0:	3023883a 	mov	r17,r6
   5dba4:	003fd806 	br	5db08 <__alt_data_end+0xfffddb08>
   5dba8:	1800541e 	bne	r3,zero,5dcfc <__adddf3+0x470>
   5dbac:	80800044 	addi	r2,r16,1
   5dbb0:	1081ffcc 	andi	r2,r2,2047
   5dbb4:	00c00044 	movi	r3,1
   5dbb8:	1880a00e 	bge	r3,r2,5de3c <__adddf3+0x5b0>
   5dbbc:	8989c83a 	sub	r4,r17,r6
   5dbc0:	8905803a 	cmpltu	r2,r17,r4
   5dbc4:	4267c83a 	sub	r19,r8,r9
   5dbc8:	98a7c83a 	sub	r19,r19,r2
   5dbcc:	9880202c 	andhi	r2,r19,128
   5dbd0:	10006326 	beq	r2,zero,5dd60 <__adddf3+0x4d4>
   5dbd4:	3463c83a 	sub	r17,r6,r17
   5dbd8:	4a07c83a 	sub	r3,r9,r8
   5dbdc:	344d803a 	cmpltu	r6,r6,r17
   5dbe0:	19a7c83a 	sub	r19,r3,r6
   5dbe4:	3825883a 	mov	r18,r7
   5dbe8:	983f8a1e 	bne	r19,zero,5da14 <__alt_data_end+0xfffdda14>
   5dbec:	8809883a 	mov	r4,r17
   5dbf0:	004f5580 	call	4f558 <__clzsi2>
   5dbf4:	10800804 	addi	r2,r2,32
   5dbf8:	10fffe04 	addi	r3,r2,-8
   5dbfc:	010007c4 	movi	r4,31
   5dc00:	20ff890e 	bge	r4,r3,5da28 <__alt_data_end+0xfffdda28>
   5dc04:	10bff604 	addi	r2,r2,-40
   5dc08:	8884983a 	sll	r2,r17,r2
   5dc0c:	0023883a 	mov	r17,zero
   5dc10:	1c3f8c0e 	bge	r3,r16,5da44 <__alt_data_end+0xfffdda44>
   5dc14:	023fe034 	movhi	r8,65408
   5dc18:	423fffc4 	addi	r8,r8,-1
   5dc1c:	80e1c83a 	sub	r16,r16,r3
   5dc20:	1210703a 	and	r8,r2,r8
   5dc24:	003f3806 	br	5d908 <__alt_data_end+0xfffdd908>
   5dc28:	9007883a 	mov	r3,r18
   5dc2c:	0011883a 	mov	r8,zero
   5dc30:	0005883a 	mov	r2,zero
   5dc34:	003f4c06 	br	5d968 <__alt_data_end+0xfffdd968>
   5dc38:	498cb03a 	or	r6,r9,r6
   5dc3c:	300cc03a 	cmpne	r6,r6,zero
   5dc40:	0007883a 	mov	r3,zero
   5dc44:	003f6806 	br	5d9e8 <__alt_data_end+0xfffdd9e8>
   5dc48:	20009c1e 	bne	r4,zero,5debc <__adddf3+0x630>
   5dc4c:	80800044 	addi	r2,r16,1
   5dc50:	1141ffcc 	andi	r5,r2,2047
   5dc54:	01000044 	movi	r4,1
   5dc58:	2140670e 	bge	r4,r5,5ddf8 <__adddf3+0x56c>
   5dc5c:	0101ffc4 	movi	r4,2047
   5dc60:	11007f26 	beq	r2,r4,5de60 <__adddf3+0x5d4>
   5dc64:	898d883a 	add	r6,r17,r6
   5dc68:	4247883a 	add	r3,r8,r9
   5dc6c:	3451803a 	cmpltu	r8,r6,r17
   5dc70:	40d1883a 	add	r8,r8,r3
   5dc74:	402297fa 	slli	r17,r8,31
   5dc78:	300cd07a 	srli	r6,r6,1
   5dc7c:	4010d07a 	srli	r8,r8,1
   5dc80:	1021883a 	mov	r16,r2
   5dc84:	89a2b03a 	or	r17,r17,r6
   5dc88:	003f1f06 	br	5d908 <__alt_data_end+0xfffdd908>
   5dc8c:	0081ffc4 	movi	r2,2047
   5dc90:	80bf481e 	bne	r16,r2,5d9b4 <__alt_data_end+0xfffdd9b4>
   5dc94:	003f1c06 	br	5d908 <__alt_data_end+0xfffdd908>
   5dc98:	843ff844 	addi	r16,r16,-31
   5dc9c:	01000804 	movi	r4,32
   5dca0:	1406d83a 	srl	r3,r2,r16
   5dca4:	41005026 	beq	r8,r4,5dde8 <__adddf3+0x55c>
   5dca8:	01001004 	movi	r4,64
   5dcac:	2211c83a 	sub	r8,r4,r8
   5dcb0:	1204983a 	sll	r2,r2,r8
   5dcb4:	88a2b03a 	or	r17,r17,r2
   5dcb8:	8822c03a 	cmpne	r17,r17,zero
   5dcbc:	1c62b03a 	or	r17,r3,r17
   5dcc0:	0011883a 	mov	r8,zero
   5dcc4:	0021883a 	mov	r16,zero
   5dcc8:	003f7106 	br	5da90 <__alt_data_end+0xfffdda90>
   5dccc:	193ff804 	addi	r4,r3,-32
   5dcd0:	00800804 	movi	r2,32
   5dcd4:	4908d83a 	srl	r4,r9,r4
   5dcd8:	18804526 	beq	r3,r2,5ddf0 <__adddf3+0x564>
   5dcdc:	00801004 	movi	r2,64
   5dce0:	10c5c83a 	sub	r2,r2,r3
   5dce4:	4886983a 	sll	r3,r9,r2
   5dce8:	198cb03a 	or	r6,r3,r6
   5dcec:	300cc03a 	cmpne	r6,r6,zero
   5dcf0:	218cb03a 	or	r6,r4,r6
   5dcf4:	0007883a 	mov	r3,zero
   5dcf8:	003f3b06 	br	5d9e8 <__alt_data_end+0xfffdd9e8>
   5dcfc:	80002a26 	beq	r16,zero,5dda8 <__adddf3+0x51c>
   5dd00:	0101ffc4 	movi	r4,2047
   5dd04:	11006826 	beq	r2,r4,5dea8 <__adddf3+0x61c>
   5dd08:	00c7c83a 	sub	r3,zero,r3
   5dd0c:	42002034 	orhi	r8,r8,128
   5dd10:	01000e04 	movi	r4,56
   5dd14:	20c07c16 	blt	r4,r3,5df08 <__adddf3+0x67c>
   5dd18:	010007c4 	movi	r4,31
   5dd1c:	20c0da16 	blt	r4,r3,5e088 <__adddf3+0x7fc>
   5dd20:	01000804 	movi	r4,32
   5dd24:	20c9c83a 	sub	r4,r4,r3
   5dd28:	4114983a 	sll	r10,r8,r4
   5dd2c:	88cad83a 	srl	r5,r17,r3
   5dd30:	8908983a 	sll	r4,r17,r4
   5dd34:	40c6d83a 	srl	r3,r8,r3
   5dd38:	5162b03a 	or	r17,r10,r5
   5dd3c:	2008c03a 	cmpne	r4,r4,zero
   5dd40:	8922b03a 	or	r17,r17,r4
   5dd44:	3463c83a 	sub	r17,r6,r17
   5dd48:	48c7c83a 	sub	r3,r9,r3
   5dd4c:	344d803a 	cmpltu	r6,r6,r17
   5dd50:	1991c83a 	sub	r8,r3,r6
   5dd54:	1021883a 	mov	r16,r2
   5dd58:	3825883a 	mov	r18,r7
   5dd5c:	003f2706 	br	5d9fc <__alt_data_end+0xfffdd9fc>
   5dd60:	24d0b03a 	or	r8,r4,r19
   5dd64:	40001b1e 	bne	r8,zero,5ddd4 <__adddf3+0x548>
   5dd68:	0005883a 	mov	r2,zero
   5dd6c:	0007883a 	mov	r3,zero
   5dd70:	0021883a 	mov	r16,zero
   5dd74:	003f4d06 	br	5daac <__alt_data_end+0xfffddaac>
   5dd78:	008007c4 	movi	r2,31
   5dd7c:	11003c16 	blt	r2,r4,5de70 <__adddf3+0x5e4>
   5dd80:	00800804 	movi	r2,32
   5dd84:	1105c83a 	sub	r2,r2,r4
   5dd88:	488e983a 	sll	r7,r9,r2
   5dd8c:	310ad83a 	srl	r5,r6,r4
   5dd90:	3084983a 	sll	r2,r6,r2
   5dd94:	4912d83a 	srl	r9,r9,r4
   5dd98:	394ab03a 	or	r5,r7,r5
   5dd9c:	1004c03a 	cmpne	r2,r2,zero
   5dda0:	288ab03a 	or	r5,r5,r2
   5dda4:	003f5306 	br	5daf4 <__alt_data_end+0xfffddaf4>
   5dda8:	4448b03a 	or	r4,r8,r17
   5ddac:	20003e26 	beq	r4,zero,5dea8 <__adddf3+0x61c>
   5ddb0:	00c6303a 	nor	r3,zero,r3
   5ddb4:	18003a1e 	bne	r3,zero,5dea0 <__adddf3+0x614>
   5ddb8:	3463c83a 	sub	r17,r6,r17
   5ddbc:	4a07c83a 	sub	r3,r9,r8
   5ddc0:	344d803a 	cmpltu	r6,r6,r17
   5ddc4:	1991c83a 	sub	r8,r3,r6
   5ddc8:	1021883a 	mov	r16,r2
   5ddcc:	3825883a 	mov	r18,r7
   5ddd0:	003f0a06 	br	5d9fc <__alt_data_end+0xfffdd9fc>
   5ddd4:	2023883a 	mov	r17,r4
   5ddd8:	003f0d06 	br	5da10 <__alt_data_end+0xfffdda10>
   5dddc:	0081ffc4 	movi	r2,2047
   5dde0:	80bf3f1e 	bne	r16,r2,5dae0 <__alt_data_end+0xfffddae0>
   5dde4:	003ec806 	br	5d908 <__alt_data_end+0xfffdd908>
   5dde8:	0005883a 	mov	r2,zero
   5ddec:	003fb106 	br	5dcb4 <__alt_data_end+0xfffddcb4>
   5ddf0:	0007883a 	mov	r3,zero
   5ddf4:	003fbc06 	br	5dce8 <__alt_data_end+0xfffddce8>
   5ddf8:	4444b03a 	or	r2,r8,r17
   5ddfc:	8000871e 	bne	r16,zero,5e01c <__adddf3+0x790>
   5de00:	1000ba26 	beq	r2,zero,5e0ec <__adddf3+0x860>
   5de04:	4984b03a 	or	r2,r9,r6
   5de08:	103ebf26 	beq	r2,zero,5d908 <__alt_data_end+0xfffdd908>
   5de0c:	8985883a 	add	r2,r17,r6
   5de10:	4247883a 	add	r3,r8,r9
   5de14:	1451803a 	cmpltu	r8,r2,r17
   5de18:	40d1883a 	add	r8,r8,r3
   5de1c:	40c0202c 	andhi	r3,r8,128
   5de20:	1023883a 	mov	r17,r2
   5de24:	183f1a26 	beq	r3,zero,5da90 <__alt_data_end+0xfffdda90>
   5de28:	00bfe034 	movhi	r2,65408
   5de2c:	10bfffc4 	addi	r2,r2,-1
   5de30:	2021883a 	mov	r16,r4
   5de34:	4090703a 	and	r8,r8,r2
   5de38:	003eb306 	br	5d908 <__alt_data_end+0xfffdd908>
   5de3c:	4444b03a 	or	r2,r8,r17
   5de40:	8000291e 	bne	r16,zero,5dee8 <__adddf3+0x65c>
   5de44:	10004b1e 	bne	r2,zero,5df74 <__adddf3+0x6e8>
   5de48:	4990b03a 	or	r8,r9,r6
   5de4c:	40008b26 	beq	r8,zero,5e07c <__adddf3+0x7f0>
   5de50:	4811883a 	mov	r8,r9
   5de54:	3023883a 	mov	r17,r6
   5de58:	3825883a 	mov	r18,r7
   5de5c:	003eaa06 	br	5d908 <__alt_data_end+0xfffdd908>
   5de60:	1021883a 	mov	r16,r2
   5de64:	0011883a 	mov	r8,zero
   5de68:	0005883a 	mov	r2,zero
   5de6c:	003f0f06 	br	5daac <__alt_data_end+0xfffddaac>
   5de70:	217ff804 	addi	r5,r4,-32
   5de74:	00800804 	movi	r2,32
   5de78:	494ad83a 	srl	r5,r9,r5
   5de7c:	20807d26 	beq	r4,r2,5e074 <__adddf3+0x7e8>
   5de80:	00801004 	movi	r2,64
   5de84:	1109c83a 	sub	r4,r2,r4
   5de88:	4912983a 	sll	r9,r9,r4
   5de8c:	498cb03a 	or	r6,r9,r6
   5de90:	300cc03a 	cmpne	r6,r6,zero
   5de94:	298ab03a 	or	r5,r5,r6
   5de98:	0013883a 	mov	r9,zero
   5de9c:	003f1506 	br	5daf4 <__alt_data_end+0xfffddaf4>
   5dea0:	0101ffc4 	movi	r4,2047
   5dea4:	113f9a1e 	bne	r2,r4,5dd10 <__alt_data_end+0xfffddd10>
   5dea8:	4811883a 	mov	r8,r9
   5deac:	3023883a 	mov	r17,r6
   5deb0:	1021883a 	mov	r16,r2
   5deb4:	3825883a 	mov	r18,r7
   5deb8:	003e9306 	br	5d908 <__alt_data_end+0xfffdd908>
   5debc:	8000161e 	bne	r16,zero,5df18 <__adddf3+0x68c>
   5dec0:	444ab03a 	or	r5,r8,r17
   5dec4:	28005126 	beq	r5,zero,5e00c <__adddf3+0x780>
   5dec8:	0108303a 	nor	r4,zero,r4
   5decc:	20004d1e 	bne	r4,zero,5e004 <__adddf3+0x778>
   5ded0:	89a3883a 	add	r17,r17,r6
   5ded4:	4253883a 	add	r9,r8,r9
   5ded8:	898d803a 	cmpltu	r6,r17,r6
   5dedc:	3251883a 	add	r8,r6,r9
   5dee0:	1021883a 	mov	r16,r2
   5dee4:	003f0806 	br	5db08 <__alt_data_end+0xfffddb08>
   5dee8:	1000301e 	bne	r2,zero,5dfac <__adddf3+0x720>
   5deec:	4984b03a 	or	r2,r9,r6
   5def0:	10007126 	beq	r2,zero,5e0b8 <__adddf3+0x82c>
   5def4:	4811883a 	mov	r8,r9
   5def8:	3023883a 	mov	r17,r6
   5defc:	3825883a 	mov	r18,r7
   5df00:	0401ffc4 	movi	r16,2047
   5df04:	003e8006 	br	5d908 <__alt_data_end+0xfffdd908>
   5df08:	4462b03a 	or	r17,r8,r17
   5df0c:	8822c03a 	cmpne	r17,r17,zero
   5df10:	0007883a 	mov	r3,zero
   5df14:	003f8b06 	br	5dd44 <__alt_data_end+0xfffddd44>
   5df18:	0141ffc4 	movi	r5,2047
   5df1c:	11403b26 	beq	r2,r5,5e00c <__adddf3+0x780>
   5df20:	0109c83a 	sub	r4,zero,r4
   5df24:	42002034 	orhi	r8,r8,128
   5df28:	01400e04 	movi	r5,56
   5df2c:	29006716 	blt	r5,r4,5e0cc <__adddf3+0x840>
   5df30:	014007c4 	movi	r5,31
   5df34:	29007016 	blt	r5,r4,5e0f8 <__adddf3+0x86c>
   5df38:	01400804 	movi	r5,32
   5df3c:	290bc83a 	sub	r5,r5,r4
   5df40:	4154983a 	sll	r10,r8,r5
   5df44:	890ed83a 	srl	r7,r17,r4
   5df48:	894a983a 	sll	r5,r17,r5
   5df4c:	4108d83a 	srl	r4,r8,r4
   5df50:	51e2b03a 	or	r17,r10,r7
   5df54:	280ac03a 	cmpne	r5,r5,zero
   5df58:	8962b03a 	or	r17,r17,r5
   5df5c:	89a3883a 	add	r17,r17,r6
   5df60:	2253883a 	add	r9,r4,r9
   5df64:	898d803a 	cmpltu	r6,r17,r6
   5df68:	3251883a 	add	r8,r6,r9
   5df6c:	1021883a 	mov	r16,r2
   5df70:	003ee506 	br	5db08 <__alt_data_end+0xfffddb08>
   5df74:	4984b03a 	or	r2,r9,r6
   5df78:	103e6326 	beq	r2,zero,5d908 <__alt_data_end+0xfffdd908>
   5df7c:	8987c83a 	sub	r3,r17,r6
   5df80:	88c9803a 	cmpltu	r4,r17,r3
   5df84:	4245c83a 	sub	r2,r8,r9
   5df88:	1105c83a 	sub	r2,r2,r4
   5df8c:	1100202c 	andhi	r4,r2,128
   5df90:	203ebb26 	beq	r4,zero,5da80 <__alt_data_end+0xfffdda80>
   5df94:	3463c83a 	sub	r17,r6,r17
   5df98:	4a07c83a 	sub	r3,r9,r8
   5df9c:	344d803a 	cmpltu	r6,r6,r17
   5dfa0:	1991c83a 	sub	r8,r3,r6
   5dfa4:	3825883a 	mov	r18,r7
   5dfa8:	003e5706 	br	5d908 <__alt_data_end+0xfffdd908>
   5dfac:	4984b03a 	or	r2,r9,r6
   5dfb0:	10002e26 	beq	r2,zero,5e06c <__adddf3+0x7e0>
   5dfb4:	4004d0fa 	srli	r2,r8,3
   5dfb8:	8822d0fa 	srli	r17,r17,3
   5dfbc:	4010977a 	slli	r8,r8,29
   5dfc0:	10c0022c 	andhi	r3,r2,8
   5dfc4:	4462b03a 	or	r17,r8,r17
   5dfc8:	18000826 	beq	r3,zero,5dfec <__adddf3+0x760>
   5dfcc:	4808d0fa 	srli	r4,r9,3
   5dfd0:	20c0022c 	andhi	r3,r4,8
   5dfd4:	1800051e 	bne	r3,zero,5dfec <__adddf3+0x760>
   5dfd8:	300cd0fa 	srli	r6,r6,3
   5dfdc:	4806977a 	slli	r3,r9,29
   5dfe0:	2005883a 	mov	r2,r4
   5dfe4:	3825883a 	mov	r18,r7
   5dfe8:	19a2b03a 	or	r17,r3,r6
   5dfec:	8810d77a 	srli	r8,r17,29
   5dff0:	100490fa 	slli	r2,r2,3
   5dff4:	882290fa 	slli	r17,r17,3
   5dff8:	0401ffc4 	movi	r16,2047
   5dffc:	4090b03a 	or	r8,r8,r2
   5e000:	003e4106 	br	5d908 <__alt_data_end+0xfffdd908>
   5e004:	0141ffc4 	movi	r5,2047
   5e008:	117fc71e 	bne	r2,r5,5df28 <__alt_data_end+0xfffddf28>
   5e00c:	4811883a 	mov	r8,r9
   5e010:	3023883a 	mov	r17,r6
   5e014:	1021883a 	mov	r16,r2
   5e018:	003e3b06 	br	5d908 <__alt_data_end+0xfffdd908>
   5e01c:	10002f26 	beq	r2,zero,5e0dc <__adddf3+0x850>
   5e020:	4984b03a 	or	r2,r9,r6
   5e024:	10001126 	beq	r2,zero,5e06c <__adddf3+0x7e0>
   5e028:	4004d0fa 	srli	r2,r8,3
   5e02c:	8822d0fa 	srli	r17,r17,3
   5e030:	4010977a 	slli	r8,r8,29
   5e034:	10c0022c 	andhi	r3,r2,8
   5e038:	4462b03a 	or	r17,r8,r17
   5e03c:	183feb26 	beq	r3,zero,5dfec <__alt_data_end+0xfffddfec>
   5e040:	4808d0fa 	srli	r4,r9,3
   5e044:	20c0022c 	andhi	r3,r4,8
   5e048:	183fe81e 	bne	r3,zero,5dfec <__alt_data_end+0xfffddfec>
   5e04c:	300cd0fa 	srli	r6,r6,3
   5e050:	4806977a 	slli	r3,r9,29
   5e054:	2005883a 	mov	r2,r4
   5e058:	19a2b03a 	or	r17,r3,r6
   5e05c:	003fe306 	br	5dfec <__alt_data_end+0xfffddfec>
   5e060:	0011883a 	mov	r8,zero
   5e064:	0005883a 	mov	r2,zero
   5e068:	003e3f06 	br	5d968 <__alt_data_end+0xfffdd968>
   5e06c:	0401ffc4 	movi	r16,2047
   5e070:	003e2506 	br	5d908 <__alt_data_end+0xfffdd908>
   5e074:	0013883a 	mov	r9,zero
   5e078:	003f8406 	br	5de8c <__alt_data_end+0xfffdde8c>
   5e07c:	0005883a 	mov	r2,zero
   5e080:	0007883a 	mov	r3,zero
   5e084:	003e8906 	br	5daac <__alt_data_end+0xfffddaac>
   5e088:	197ff804 	addi	r5,r3,-32
   5e08c:	01000804 	movi	r4,32
   5e090:	414ad83a 	srl	r5,r8,r5
   5e094:	19002426 	beq	r3,r4,5e128 <__adddf3+0x89c>
   5e098:	01001004 	movi	r4,64
   5e09c:	20c7c83a 	sub	r3,r4,r3
   5e0a0:	40c6983a 	sll	r3,r8,r3
   5e0a4:	1c46b03a 	or	r3,r3,r17
   5e0a8:	1806c03a 	cmpne	r3,r3,zero
   5e0ac:	28e2b03a 	or	r17,r5,r3
   5e0b0:	0007883a 	mov	r3,zero
   5e0b4:	003f2306 	br	5dd44 <__alt_data_end+0xfffddd44>
   5e0b8:	0007883a 	mov	r3,zero
   5e0bc:	5811883a 	mov	r8,r11
   5e0c0:	00bfffc4 	movi	r2,-1
   5e0c4:	0401ffc4 	movi	r16,2047
   5e0c8:	003e7806 	br	5daac <__alt_data_end+0xfffddaac>
   5e0cc:	4462b03a 	or	r17,r8,r17
   5e0d0:	8822c03a 	cmpne	r17,r17,zero
   5e0d4:	0009883a 	mov	r4,zero
   5e0d8:	003fa006 	br	5df5c <__alt_data_end+0xfffddf5c>
   5e0dc:	4811883a 	mov	r8,r9
   5e0e0:	3023883a 	mov	r17,r6
   5e0e4:	0401ffc4 	movi	r16,2047
   5e0e8:	003e0706 	br	5d908 <__alt_data_end+0xfffdd908>
   5e0ec:	4811883a 	mov	r8,r9
   5e0f0:	3023883a 	mov	r17,r6
   5e0f4:	003e0406 	br	5d908 <__alt_data_end+0xfffdd908>
   5e0f8:	21fff804 	addi	r7,r4,-32
   5e0fc:	01400804 	movi	r5,32
   5e100:	41ced83a 	srl	r7,r8,r7
   5e104:	21400a26 	beq	r4,r5,5e130 <__adddf3+0x8a4>
   5e108:	01401004 	movi	r5,64
   5e10c:	2909c83a 	sub	r4,r5,r4
   5e110:	4108983a 	sll	r4,r8,r4
   5e114:	2448b03a 	or	r4,r4,r17
   5e118:	2008c03a 	cmpne	r4,r4,zero
   5e11c:	3922b03a 	or	r17,r7,r4
   5e120:	0009883a 	mov	r4,zero
   5e124:	003f8d06 	br	5df5c <__alt_data_end+0xfffddf5c>
   5e128:	0007883a 	mov	r3,zero
   5e12c:	003fdd06 	br	5e0a4 <__alt_data_end+0xfffde0a4>
   5e130:	0009883a 	mov	r4,zero
   5e134:	003ff706 	br	5e114 <__alt_data_end+0xfffde114>

0005e138 <__divdf3>:
   5e138:	defff004 	addi	sp,sp,-64
   5e13c:	dc800815 	stw	r18,32(sp)
   5e140:	2824d53a 	srli	r18,r5,20
   5e144:	dd800c15 	stw	r22,48(sp)
   5e148:	282cd7fa 	srli	r22,r5,31
   5e14c:	dc000615 	stw	r16,24(sp)
   5e150:	04000434 	movhi	r16,16
   5e154:	843fffc4 	addi	r16,r16,-1
   5e158:	dfc00f15 	stw	ra,60(sp)
   5e15c:	df000e15 	stw	fp,56(sp)
   5e160:	ddc00d15 	stw	r23,52(sp)
   5e164:	dd400b15 	stw	r21,44(sp)
   5e168:	dd000a15 	stw	r20,40(sp)
   5e16c:	dcc00915 	stw	r19,36(sp)
   5e170:	dc400715 	stw	r17,28(sp)
   5e174:	9481ffcc 	andi	r18,r18,2047
   5e178:	2c20703a 	and	r16,r5,r16
   5e17c:	b2003fcc 	andi	r8,r22,255
   5e180:	90006126 	beq	r18,zero,5e308 <__divdf3+0x1d0>
   5e184:	0081ffc4 	movi	r2,2047
   5e188:	202b883a 	mov	r21,r4
   5e18c:	90803726 	beq	r18,r2,5e26c <__divdf3+0x134>
   5e190:	80800434 	orhi	r2,r16,16
   5e194:	100490fa 	slli	r2,r2,3
   5e198:	2020d77a 	srli	r16,r4,29
   5e19c:	202a90fa 	slli	r21,r4,3
   5e1a0:	94bf0044 	addi	r18,r18,-1023
   5e1a4:	80a0b03a 	or	r16,r16,r2
   5e1a8:	0013883a 	mov	r9,zero
   5e1ac:	000b883a 	mov	r5,zero
   5e1b0:	3806d53a 	srli	r3,r7,20
   5e1b4:	382ed7fa 	srli	r23,r7,31
   5e1b8:	04400434 	movhi	r17,16
   5e1bc:	8c7fffc4 	addi	r17,r17,-1
   5e1c0:	18c1ffcc 	andi	r3,r3,2047
   5e1c4:	3029883a 	mov	r20,r6
   5e1c8:	3c62703a 	and	r17,r7,r17
   5e1cc:	bf003fcc 	andi	fp,r23,255
   5e1d0:	18006e26 	beq	r3,zero,5e38c <__divdf3+0x254>
   5e1d4:	0081ffc4 	movi	r2,2047
   5e1d8:	18806626 	beq	r3,r2,5e374 <__divdf3+0x23c>
   5e1dc:	88800434 	orhi	r2,r17,16
   5e1e0:	100490fa 	slli	r2,r2,3
   5e1e4:	3022d77a 	srli	r17,r6,29
   5e1e8:	302890fa 	slli	r20,r6,3
   5e1ec:	18ff0044 	addi	r3,r3,-1023
   5e1f0:	88a2b03a 	or	r17,r17,r2
   5e1f4:	000f883a 	mov	r7,zero
   5e1f8:	b5e6f03a 	xor	r19,r22,r23
   5e1fc:	3a4cb03a 	or	r6,r7,r9
   5e200:	008003c4 	movi	r2,15
   5e204:	9809883a 	mov	r4,r19
   5e208:	90c7c83a 	sub	r3,r18,r3
   5e20c:	9cc03fcc 	andi	r19,r19,255
   5e210:	11809636 	bltu	r2,r6,5e46c <__divdf3+0x334>
   5e214:	300c90ba 	slli	r6,r6,2
   5e218:	008001b4 	movhi	r2,6
   5e21c:	10b88b04 	addi	r2,r2,-7636
   5e220:	308d883a 	add	r6,r6,r2
   5e224:	30800017 	ldw	r2,0(r6)
   5e228:	1000683a 	jmp	r2
   5e22c:	0005e46c 	andhi	zero,zero,6033
   5e230:	0005e2a4 	muli	zero,zero,6026
   5e234:	0005e45c 	xori	zero,zero,6033
   5e238:	0005e298 	cmpnei	zero,zero,6026
   5e23c:	0005e45c 	xori	zero,zero,6033
   5e240:	0005e430 	cmpltui	zero,zero,6032
   5e244:	0005e45c 	xori	zero,zero,6033
   5e248:	0005e298 	cmpnei	zero,zero,6026
   5e24c:	0005e2a4 	muli	zero,zero,6026
   5e250:	0005e2a4 	muli	zero,zero,6026
   5e254:	0005e430 	cmpltui	zero,zero,6032
   5e258:	0005e298 	cmpnei	zero,zero,6026
   5e25c:	0005e288 	cmpgei	zero,zero,6026
   5e260:	0005e288 	cmpgei	zero,zero,6026
   5e264:	0005e288 	cmpgei	zero,zero,6026
   5e268:	0005e7f4 	movhi	zero,6047
   5e26c:	2404b03a 	or	r2,r4,r16
   5e270:	10006c1e 	bne	r2,zero,5e424 <__divdf3+0x2ec>
   5e274:	02400204 	movi	r9,8
   5e278:	0021883a 	mov	r16,zero
   5e27c:	002b883a 	mov	r21,zero
   5e280:	01400084 	movi	r5,2
   5e284:	003fca06 	br	5e1b0 <__alt_data_end+0xfffde1b0>
   5e288:	8023883a 	mov	r17,r16
   5e28c:	a829883a 	mov	r20,r21
   5e290:	4039883a 	mov	fp,r8
   5e294:	280f883a 	mov	r7,r5
   5e298:	00800084 	movi	r2,2
   5e29c:	3881601e 	bne	r7,r2,5e820 <__divdf3+0x6e8>
   5e2a0:	e027883a 	mov	r19,fp
   5e2a4:	9900004c 	andi	r4,r19,1
   5e2a8:	0081ffc4 	movi	r2,2047
   5e2ac:	0021883a 	mov	r16,zero
   5e2b0:	002b883a 	mov	r21,zero
   5e2b4:	1004953a 	slli	r2,r2,20
   5e2b8:	20c03fcc 	andi	r3,r4,255
   5e2bc:	01400434 	movhi	r5,16
   5e2c0:	297fffc4 	addi	r5,r5,-1
   5e2c4:	180697fa 	slli	r3,r3,31
   5e2c8:	8160703a 	and	r16,r16,r5
   5e2cc:	80a0b03a 	or	r16,r16,r2
   5e2d0:	80c6b03a 	or	r3,r16,r3
   5e2d4:	a805883a 	mov	r2,r21
   5e2d8:	dfc00f17 	ldw	ra,60(sp)
   5e2dc:	df000e17 	ldw	fp,56(sp)
   5e2e0:	ddc00d17 	ldw	r23,52(sp)
   5e2e4:	dd800c17 	ldw	r22,48(sp)
   5e2e8:	dd400b17 	ldw	r21,44(sp)
   5e2ec:	dd000a17 	ldw	r20,40(sp)
   5e2f0:	dcc00917 	ldw	r19,36(sp)
   5e2f4:	dc800817 	ldw	r18,32(sp)
   5e2f8:	dc400717 	ldw	r17,28(sp)
   5e2fc:	dc000617 	ldw	r16,24(sp)
   5e300:	dec01004 	addi	sp,sp,64
   5e304:	f800283a 	ret
   5e308:	2404b03a 	or	r2,r4,r16
   5e30c:	2023883a 	mov	r17,r4
   5e310:	10003f26 	beq	r2,zero,5e410 <__divdf3+0x2d8>
   5e314:	80015e26 	beq	r16,zero,5e890 <__divdf3+0x758>
   5e318:	8009883a 	mov	r4,r16
   5e31c:	d9800215 	stw	r6,8(sp)
   5e320:	d9c00515 	stw	r7,20(sp)
   5e324:	da000415 	stw	r8,16(sp)
   5e328:	004f5580 	call	4f558 <__clzsi2>
   5e32c:	d9800217 	ldw	r6,8(sp)
   5e330:	d9c00517 	ldw	r7,20(sp)
   5e334:	da000417 	ldw	r8,16(sp)
   5e338:	113ffd44 	addi	r4,r2,-11
   5e33c:	00c00704 	movi	r3,28
   5e340:	19014f16 	blt	r3,r4,5e880 <__divdf3+0x748>
   5e344:	00c00744 	movi	r3,29
   5e348:	157ffe04 	addi	r21,r2,-8
   5e34c:	1907c83a 	sub	r3,r3,r4
   5e350:	8560983a 	sll	r16,r16,r21
   5e354:	88c6d83a 	srl	r3,r17,r3
   5e358:	8d6a983a 	sll	r21,r17,r21
   5e35c:	1c20b03a 	or	r16,r3,r16
   5e360:	1080fcc4 	addi	r2,r2,1011
   5e364:	00a5c83a 	sub	r18,zero,r2
   5e368:	0013883a 	mov	r9,zero
   5e36c:	000b883a 	mov	r5,zero
   5e370:	003f8f06 	br	5e1b0 <__alt_data_end+0xfffde1b0>
   5e374:	3444b03a 	or	r2,r6,r17
   5e378:	1000231e 	bne	r2,zero,5e408 <__divdf3+0x2d0>
   5e37c:	0023883a 	mov	r17,zero
   5e380:	0029883a 	mov	r20,zero
   5e384:	01c00084 	movi	r7,2
   5e388:	003f9b06 	br	5e1f8 <__alt_data_end+0xfffde1f8>
   5e38c:	3444b03a 	or	r2,r6,r17
   5e390:	10001926 	beq	r2,zero,5e3f8 <__divdf3+0x2c0>
   5e394:	88014b26 	beq	r17,zero,5e8c4 <__divdf3+0x78c>
   5e398:	8809883a 	mov	r4,r17
   5e39c:	d9400115 	stw	r5,4(sp)
   5e3a0:	d9800215 	stw	r6,8(sp)
   5e3a4:	da000415 	stw	r8,16(sp)
   5e3a8:	da400315 	stw	r9,12(sp)
   5e3ac:	004f5580 	call	4f558 <__clzsi2>
   5e3b0:	d9400117 	ldw	r5,4(sp)
   5e3b4:	d9800217 	ldw	r6,8(sp)
   5e3b8:	da000417 	ldw	r8,16(sp)
   5e3bc:	da400317 	ldw	r9,12(sp)
   5e3c0:	113ffd44 	addi	r4,r2,-11
   5e3c4:	00c00704 	movi	r3,28
   5e3c8:	19013a16 	blt	r3,r4,5e8b4 <__divdf3+0x77c>
   5e3cc:	00c00744 	movi	r3,29
   5e3d0:	153ffe04 	addi	r20,r2,-8
   5e3d4:	1907c83a 	sub	r3,r3,r4
   5e3d8:	8d22983a 	sll	r17,r17,r20
   5e3dc:	30c6d83a 	srl	r3,r6,r3
   5e3e0:	3528983a 	sll	r20,r6,r20
   5e3e4:	1c62b03a 	or	r17,r3,r17
   5e3e8:	1080fcc4 	addi	r2,r2,1011
   5e3ec:	0087c83a 	sub	r3,zero,r2
   5e3f0:	000f883a 	mov	r7,zero
   5e3f4:	003f8006 	br	5e1f8 <__alt_data_end+0xfffde1f8>
   5e3f8:	0023883a 	mov	r17,zero
   5e3fc:	0029883a 	mov	r20,zero
   5e400:	01c00044 	movi	r7,1
   5e404:	003f7c06 	br	5e1f8 <__alt_data_end+0xfffde1f8>
   5e408:	01c000c4 	movi	r7,3
   5e40c:	003f7a06 	br	5e1f8 <__alt_data_end+0xfffde1f8>
   5e410:	02400104 	movi	r9,4
   5e414:	0021883a 	mov	r16,zero
   5e418:	002b883a 	mov	r21,zero
   5e41c:	01400044 	movi	r5,1
   5e420:	003f6306 	br	5e1b0 <__alt_data_end+0xfffde1b0>
   5e424:	02400304 	movi	r9,12
   5e428:	014000c4 	movi	r5,3
   5e42c:	003f6006 	br	5e1b0 <__alt_data_end+0xfffde1b0>
   5e430:	04000434 	movhi	r16,16
   5e434:	0009883a 	mov	r4,zero
   5e438:	843fffc4 	addi	r16,r16,-1
   5e43c:	057fffc4 	movi	r21,-1
   5e440:	0081ffc4 	movi	r2,2047
   5e444:	003f9b06 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5e448:	00c00044 	movi	r3,1
   5e44c:	1887c83a 	sub	r3,r3,r2
   5e450:	01000e04 	movi	r4,56
   5e454:	20c1530e 	bge	r4,r3,5e9a4 <__divdf3+0x86c>
   5e458:	9900004c 	andi	r4,r19,1
   5e45c:	0005883a 	mov	r2,zero
   5e460:	0021883a 	mov	r16,zero
   5e464:	002b883a 	mov	r21,zero
   5e468:	003f9206 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5e46c:	8c012e36 	bltu	r17,r16,5e928 <__divdf3+0x7f0>
   5e470:	84412c26 	beq	r16,r17,5e924 <__divdf3+0x7ec>
   5e474:	a82f883a 	mov	r23,r21
   5e478:	18ffffc4 	addi	r3,r3,-1
   5e47c:	002b883a 	mov	r21,zero
   5e480:	a004d63a 	srli	r2,r20,24
   5e484:	8822923a 	slli	r17,r17,8
   5e488:	a028923a 	slli	r20,r20,8
   5e48c:	8009883a 	mov	r4,r16
   5e490:	88acb03a 	or	r22,r17,r2
   5e494:	dd000015 	stw	r20,0(sp)
   5e498:	b028d43a 	srli	r20,r22,16
   5e49c:	d8c00215 	stw	r3,8(sp)
   5e4a0:	b4bfffcc 	andi	r18,r22,65535
   5e4a4:	a00b883a 	mov	r5,r20
   5e4a8:	004d9f80 	call	4d9f8 <__udivsi3>
   5e4ac:	100b883a 	mov	r5,r2
   5e4b0:	9009883a 	mov	r4,r18
   5e4b4:	1023883a 	mov	r17,r2
   5e4b8:	004dab40 	call	4dab4 <__mulsi3>
   5e4bc:	8009883a 	mov	r4,r16
   5e4c0:	a00b883a 	mov	r5,r20
   5e4c4:	1039883a 	mov	fp,r2
   5e4c8:	004da5c0 	call	4da5c <__umodsi3>
   5e4cc:	1004943a 	slli	r2,r2,16
   5e4d0:	b808d43a 	srli	r4,r23,16
   5e4d4:	d8c00217 	ldw	r3,8(sp)
   5e4d8:	2084b03a 	or	r2,r4,r2
   5e4dc:	1700062e 	bgeu	r2,fp,5e4f8 <__divdf3+0x3c0>
   5e4e0:	1585883a 	add	r2,r2,r22
   5e4e4:	893fffc4 	addi	r4,r17,-1
   5e4e8:	15811d36 	bltu	r2,r22,5e960 <__divdf3+0x828>
   5e4ec:	17011c2e 	bgeu	r2,fp,5e960 <__divdf3+0x828>
   5e4f0:	8c7fff84 	addi	r17,r17,-2
   5e4f4:	1585883a 	add	r2,r2,r22
   5e4f8:	1739c83a 	sub	fp,r2,fp
   5e4fc:	a00b883a 	mov	r5,r20
   5e500:	e009883a 	mov	r4,fp
   5e504:	d8c00215 	stw	r3,8(sp)
   5e508:	004d9f80 	call	4d9f8 <__udivsi3>
   5e50c:	100b883a 	mov	r5,r2
   5e510:	9009883a 	mov	r4,r18
   5e514:	1021883a 	mov	r16,r2
   5e518:	004dab40 	call	4dab4 <__mulsi3>
   5e51c:	a00b883a 	mov	r5,r20
   5e520:	e009883a 	mov	r4,fp
   5e524:	d8800415 	stw	r2,16(sp)
   5e528:	004da5c0 	call	4da5c <__umodsi3>
   5e52c:	1004943a 	slli	r2,r2,16
   5e530:	da000417 	ldw	r8,16(sp)
   5e534:	bdffffcc 	andi	r23,r23,65535
   5e538:	b884b03a 	or	r2,r23,r2
   5e53c:	d8c00217 	ldw	r3,8(sp)
   5e540:	1200062e 	bgeu	r2,r8,5e55c <__divdf3+0x424>
   5e544:	1585883a 	add	r2,r2,r22
   5e548:	813fffc4 	addi	r4,r16,-1
   5e54c:	15810236 	bltu	r2,r22,5e958 <__divdf3+0x820>
   5e550:	1201012e 	bgeu	r2,r8,5e958 <__divdf3+0x820>
   5e554:	843fff84 	addi	r16,r16,-2
   5e558:	1585883a 	add	r2,r2,r22
   5e55c:	8822943a 	slli	r17,r17,16
   5e560:	d9800017 	ldw	r6,0(sp)
   5e564:	1211c83a 	sub	r8,r2,r8
   5e568:	8c22b03a 	or	r17,r17,r16
   5e56c:	373fffcc 	andi	fp,r6,65535
   5e570:	8abfffcc 	andi	r10,r17,65535
   5e574:	8820d43a 	srli	r16,r17,16
   5e578:	5009883a 	mov	r4,r10
   5e57c:	e00b883a 	mov	r5,fp
   5e580:	302ed43a 	srli	r23,r6,16
   5e584:	d8c00215 	stw	r3,8(sp)
   5e588:	da000415 	stw	r8,16(sp)
   5e58c:	da800115 	stw	r10,4(sp)
   5e590:	004dab40 	call	4dab4 <__mulsi3>
   5e594:	800b883a 	mov	r5,r16
   5e598:	e009883a 	mov	r4,fp
   5e59c:	d8800515 	stw	r2,20(sp)
   5e5a0:	004dab40 	call	4dab4 <__mulsi3>
   5e5a4:	8009883a 	mov	r4,r16
   5e5a8:	b80b883a 	mov	r5,r23
   5e5ac:	d8800315 	stw	r2,12(sp)
   5e5b0:	004dab40 	call	4dab4 <__mulsi3>
   5e5b4:	da800117 	ldw	r10,4(sp)
   5e5b8:	b80b883a 	mov	r5,r23
   5e5bc:	1021883a 	mov	r16,r2
   5e5c0:	5009883a 	mov	r4,r10
   5e5c4:	004dab40 	call	4dab4 <__mulsi3>
   5e5c8:	d9c00517 	ldw	r7,20(sp)
   5e5cc:	da400317 	ldw	r9,12(sp)
   5e5d0:	d8c00217 	ldw	r3,8(sp)
   5e5d4:	3808d43a 	srli	r4,r7,16
   5e5d8:	1245883a 	add	r2,r2,r9
   5e5dc:	da000417 	ldw	r8,16(sp)
   5e5e0:	2085883a 	add	r2,r4,r2
   5e5e4:	1240022e 	bgeu	r2,r9,5e5f0 <__divdf3+0x4b8>
   5e5e8:	01000074 	movhi	r4,1
   5e5ec:	8121883a 	add	r16,r16,r4
   5e5f0:	1008d43a 	srli	r4,r2,16
   5e5f4:	1004943a 	slli	r2,r2,16
   5e5f8:	39ffffcc 	andi	r7,r7,65535
   5e5fc:	2409883a 	add	r4,r4,r16
   5e600:	11c5883a 	add	r2,r2,r7
   5e604:	4100bb36 	bltu	r8,r4,5e8f4 <__divdf3+0x7bc>
   5e608:	4100d726 	beq	r8,r4,5e968 <__divdf3+0x830>
   5e60c:	4109c83a 	sub	r4,r8,r4
   5e610:	a8a1c83a 	sub	r16,r21,r2
   5e614:	ac2b803a 	cmpltu	r21,r21,r16
   5e618:	256bc83a 	sub	r21,r4,r21
   5e61c:	b540d926 	beq	r22,r21,5e984 <__divdf3+0x84c>
   5e620:	a00b883a 	mov	r5,r20
   5e624:	a809883a 	mov	r4,r21
   5e628:	d8c00215 	stw	r3,8(sp)
   5e62c:	004d9f80 	call	4d9f8 <__udivsi3>
   5e630:	100b883a 	mov	r5,r2
   5e634:	9009883a 	mov	r4,r18
   5e638:	d8800515 	stw	r2,20(sp)
   5e63c:	004dab40 	call	4dab4 <__mulsi3>
   5e640:	a809883a 	mov	r4,r21
   5e644:	a00b883a 	mov	r5,r20
   5e648:	d8800415 	stw	r2,16(sp)
   5e64c:	004da5c0 	call	4da5c <__umodsi3>
   5e650:	1004943a 	slli	r2,r2,16
   5e654:	8008d43a 	srli	r4,r16,16
   5e658:	da000417 	ldw	r8,16(sp)
   5e65c:	d8c00217 	ldw	r3,8(sp)
   5e660:	2084b03a 	or	r2,r4,r2
   5e664:	d9c00517 	ldw	r7,20(sp)
   5e668:	1200062e 	bgeu	r2,r8,5e684 <__divdf3+0x54c>
   5e66c:	1585883a 	add	r2,r2,r22
   5e670:	393fffc4 	addi	r4,r7,-1
   5e674:	1580c536 	bltu	r2,r22,5e98c <__divdf3+0x854>
   5e678:	1200c42e 	bgeu	r2,r8,5e98c <__divdf3+0x854>
   5e67c:	39ffff84 	addi	r7,r7,-2
   5e680:	1585883a 	add	r2,r2,r22
   5e684:	122bc83a 	sub	r21,r2,r8
   5e688:	a00b883a 	mov	r5,r20
   5e68c:	a809883a 	mov	r4,r21
   5e690:	d8c00215 	stw	r3,8(sp)
   5e694:	d9c00515 	stw	r7,20(sp)
   5e698:	004d9f80 	call	4d9f8 <__udivsi3>
   5e69c:	9009883a 	mov	r4,r18
   5e6a0:	100b883a 	mov	r5,r2
   5e6a4:	d8800415 	stw	r2,16(sp)
   5e6a8:	004dab40 	call	4dab4 <__mulsi3>
   5e6ac:	a809883a 	mov	r4,r21
   5e6b0:	a00b883a 	mov	r5,r20
   5e6b4:	1025883a 	mov	r18,r2
   5e6b8:	004da5c0 	call	4da5c <__umodsi3>
   5e6bc:	1004943a 	slli	r2,r2,16
   5e6c0:	813fffcc 	andi	r4,r16,65535
   5e6c4:	d8c00217 	ldw	r3,8(sp)
   5e6c8:	20a0b03a 	or	r16,r4,r2
   5e6cc:	d9c00517 	ldw	r7,20(sp)
   5e6d0:	da000417 	ldw	r8,16(sp)
   5e6d4:	8480062e 	bgeu	r16,r18,5e6f0 <__divdf3+0x5b8>
   5e6d8:	85a1883a 	add	r16,r16,r22
   5e6dc:	40bfffc4 	addi	r2,r8,-1
   5e6e0:	8580ac36 	bltu	r16,r22,5e994 <__divdf3+0x85c>
   5e6e4:	8480ab2e 	bgeu	r16,r18,5e994 <__divdf3+0x85c>
   5e6e8:	423fff84 	addi	r8,r8,-2
   5e6ec:	85a1883a 	add	r16,r16,r22
   5e6f0:	3804943a 	slli	r2,r7,16
   5e6f4:	84a1c83a 	sub	r16,r16,r18
   5e6f8:	e009883a 	mov	r4,fp
   5e6fc:	1228b03a 	or	r20,r2,r8
   5e700:	a1ffffcc 	andi	r7,r20,65535
   5e704:	a024d43a 	srli	r18,r20,16
   5e708:	380b883a 	mov	r5,r7
   5e70c:	d8c00215 	stw	r3,8(sp)
   5e710:	d9c00515 	stw	r7,20(sp)
   5e714:	004dab40 	call	4dab4 <__mulsi3>
   5e718:	900b883a 	mov	r5,r18
   5e71c:	e009883a 	mov	r4,fp
   5e720:	102b883a 	mov	r21,r2
   5e724:	004dab40 	call	4dab4 <__mulsi3>
   5e728:	900b883a 	mov	r5,r18
   5e72c:	b809883a 	mov	r4,r23
   5e730:	1039883a 	mov	fp,r2
   5e734:	004dab40 	call	4dab4 <__mulsi3>
   5e738:	d9c00517 	ldw	r7,20(sp)
   5e73c:	b80b883a 	mov	r5,r23
   5e740:	1025883a 	mov	r18,r2
   5e744:	3809883a 	mov	r4,r7
   5e748:	004dab40 	call	4dab4 <__mulsi3>
   5e74c:	a808d43a 	srli	r4,r21,16
   5e750:	1705883a 	add	r2,r2,fp
   5e754:	d8c00217 	ldw	r3,8(sp)
   5e758:	2085883a 	add	r2,r4,r2
   5e75c:	1700022e 	bgeu	r2,fp,5e768 <__divdf3+0x630>
   5e760:	01000074 	movhi	r4,1
   5e764:	9125883a 	add	r18,r18,r4
   5e768:	1008d43a 	srli	r4,r2,16
   5e76c:	1004943a 	slli	r2,r2,16
   5e770:	ad7fffcc 	andi	r21,r21,65535
   5e774:	2489883a 	add	r4,r4,r18
   5e778:	1545883a 	add	r2,r2,r21
   5e77c:	81003836 	bltu	r16,r4,5e860 <__divdf3+0x728>
   5e780:	81003626 	beq	r16,r4,5e85c <__divdf3+0x724>
   5e784:	a5000054 	ori	r20,r20,1
   5e788:	1880ffc4 	addi	r2,r3,1023
   5e78c:	00bf2e0e 	bge	zero,r2,5e448 <__alt_data_end+0xfffde448>
   5e790:	a10001cc 	andi	r4,r20,7
   5e794:	20000726 	beq	r4,zero,5e7b4 <__divdf3+0x67c>
   5e798:	a10003cc 	andi	r4,r20,15
   5e79c:	01400104 	movi	r5,4
   5e7a0:	21400426 	beq	r4,r5,5e7b4 <__divdf3+0x67c>
   5e7a4:	a149883a 	add	r4,r20,r5
   5e7a8:	2529803a 	cmpltu	r20,r4,r20
   5e7ac:	8d23883a 	add	r17,r17,r20
   5e7b0:	2029883a 	mov	r20,r4
   5e7b4:	8900402c 	andhi	r4,r17,256
   5e7b8:	20000426 	beq	r4,zero,5e7cc <__divdf3+0x694>
   5e7bc:	18810004 	addi	r2,r3,1024
   5e7c0:	00ffc034 	movhi	r3,65280
   5e7c4:	18ffffc4 	addi	r3,r3,-1
   5e7c8:	88e2703a 	and	r17,r17,r3
   5e7cc:	00c1ff84 	movi	r3,2046
   5e7d0:	18beb416 	blt	r3,r2,5e2a4 <__alt_data_end+0xfffde2a4>
   5e7d4:	a028d0fa 	srli	r20,r20,3
   5e7d8:	882a977a 	slli	r21,r17,29
   5e7dc:	8820927a 	slli	r16,r17,9
   5e7e0:	1081ffcc 	andi	r2,r2,2047
   5e7e4:	ad2ab03a 	or	r21,r21,r20
   5e7e8:	8020d33a 	srli	r16,r16,12
   5e7ec:	9900004c 	andi	r4,r19,1
   5e7f0:	003eb006 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5e7f4:	8080022c 	andhi	r2,r16,8
   5e7f8:	10001226 	beq	r2,zero,5e844 <__divdf3+0x70c>
   5e7fc:	8880022c 	andhi	r2,r17,8
   5e800:	1000101e 	bne	r2,zero,5e844 <__divdf3+0x70c>
   5e804:	00800434 	movhi	r2,16
   5e808:	8c000234 	orhi	r16,r17,8
   5e80c:	10bfffc4 	addi	r2,r2,-1
   5e810:	b809883a 	mov	r4,r23
   5e814:	80a0703a 	and	r16,r16,r2
   5e818:	a02b883a 	mov	r21,r20
   5e81c:	003f0806 	br	5e440 <__alt_data_end+0xfffde440>
   5e820:	008000c4 	movi	r2,3
   5e824:	3880b126 	beq	r7,r2,5eaec <__divdf3+0x9b4>
   5e828:	00800044 	movi	r2,1
   5e82c:	38805b1e 	bne	r7,r2,5e99c <__divdf3+0x864>
   5e830:	e009883a 	mov	r4,fp
   5e834:	0005883a 	mov	r2,zero
   5e838:	0021883a 	mov	r16,zero
   5e83c:	002b883a 	mov	r21,zero
   5e840:	003e9c06 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5e844:	00800434 	movhi	r2,16
   5e848:	84000234 	orhi	r16,r16,8
   5e84c:	10bfffc4 	addi	r2,r2,-1
   5e850:	b009883a 	mov	r4,r22
   5e854:	80a0703a 	and	r16,r16,r2
   5e858:	003ef906 	br	5e440 <__alt_data_end+0xfffde440>
   5e85c:	103fca26 	beq	r2,zero,5e788 <__alt_data_end+0xfffde788>
   5e860:	b421883a 	add	r16,r22,r16
   5e864:	a17fffc4 	addi	r5,r20,-1
   5e868:	8580422e 	bgeu	r16,r22,5e974 <__divdf3+0x83c>
   5e86c:	2829883a 	mov	r20,r5
   5e870:	813fc41e 	bne	r16,r4,5e784 <__alt_data_end+0xfffde784>
   5e874:	d9800017 	ldw	r6,0(sp)
   5e878:	30bfc21e 	bne	r6,r2,5e784 <__alt_data_end+0xfffde784>
   5e87c:	003fc206 	br	5e788 <__alt_data_end+0xfffde788>
   5e880:	143ff604 	addi	r16,r2,-40
   5e884:	8c20983a 	sll	r16,r17,r16
   5e888:	002b883a 	mov	r21,zero
   5e88c:	003eb406 	br	5e360 <__alt_data_end+0xfffde360>
   5e890:	d9800215 	stw	r6,8(sp)
   5e894:	d9c00515 	stw	r7,20(sp)
   5e898:	da000415 	stw	r8,16(sp)
   5e89c:	004f5580 	call	4f558 <__clzsi2>
   5e8a0:	10800804 	addi	r2,r2,32
   5e8a4:	da000417 	ldw	r8,16(sp)
   5e8a8:	d9c00517 	ldw	r7,20(sp)
   5e8ac:	d9800217 	ldw	r6,8(sp)
   5e8b0:	003ea106 	br	5e338 <__alt_data_end+0xfffde338>
   5e8b4:	147ff604 	addi	r17,r2,-40
   5e8b8:	3462983a 	sll	r17,r6,r17
   5e8bc:	0029883a 	mov	r20,zero
   5e8c0:	003ec906 	br	5e3e8 <__alt_data_end+0xfffde3e8>
   5e8c4:	3009883a 	mov	r4,r6
   5e8c8:	d9400115 	stw	r5,4(sp)
   5e8cc:	d9800215 	stw	r6,8(sp)
   5e8d0:	da000415 	stw	r8,16(sp)
   5e8d4:	da400315 	stw	r9,12(sp)
   5e8d8:	004f5580 	call	4f558 <__clzsi2>
   5e8dc:	10800804 	addi	r2,r2,32
   5e8e0:	da400317 	ldw	r9,12(sp)
   5e8e4:	da000417 	ldw	r8,16(sp)
   5e8e8:	d9800217 	ldw	r6,8(sp)
   5e8ec:	d9400117 	ldw	r5,4(sp)
   5e8f0:	003eb306 	br	5e3c0 <__alt_data_end+0xfffde3c0>
   5e8f4:	d9800017 	ldw	r6,0(sp)
   5e8f8:	a9ab883a 	add	r21,r21,r6
   5e8fc:	a98b803a 	cmpltu	r5,r21,r6
   5e900:	2d8b883a 	add	r5,r5,r22
   5e904:	2a11883a 	add	r8,r5,r8
   5e908:	897fffc4 	addi	r5,r17,-1
   5e90c:	b2000c2e 	bgeu	r22,r8,5e940 <__divdf3+0x808>
   5e910:	41003f36 	bltu	r8,r4,5ea10 <__divdf3+0x8d8>
   5e914:	22006c26 	beq	r4,r8,5eac8 <__divdf3+0x990>
   5e918:	4109c83a 	sub	r4,r8,r4
   5e91c:	2823883a 	mov	r17,r5
   5e920:	003f3b06 	br	5e610 <__alt_data_end+0xfffde610>
   5e924:	ad3ed336 	bltu	r21,r20,5e474 <__alt_data_end+0xfffde474>
   5e928:	a804d07a 	srli	r2,r21,1
   5e92c:	802e97fa 	slli	r23,r16,31
   5e930:	a82a97fa 	slli	r21,r21,31
   5e934:	8020d07a 	srli	r16,r16,1
   5e938:	b8aeb03a 	or	r23,r23,r2
   5e93c:	003ed006 	br	5e480 <__alt_data_end+0xfffde480>
   5e940:	b23ff51e 	bne	r22,r8,5e918 <__alt_data_end+0xfffde918>
   5e944:	d9800017 	ldw	r6,0(sp)
   5e948:	a9bff12e 	bgeu	r21,r6,5e910 <__alt_data_end+0xfffde910>
   5e94c:	b109c83a 	sub	r4,r22,r4
   5e950:	2823883a 	mov	r17,r5
   5e954:	003f2e06 	br	5e610 <__alt_data_end+0xfffde610>
   5e958:	2021883a 	mov	r16,r4
   5e95c:	003eff06 	br	5e55c <__alt_data_end+0xfffde55c>
   5e960:	2023883a 	mov	r17,r4
   5e964:	003ee406 	br	5e4f8 <__alt_data_end+0xfffde4f8>
   5e968:	a8bfe236 	bltu	r21,r2,5e8f4 <__alt_data_end+0xfffde8f4>
   5e96c:	0009883a 	mov	r4,zero
   5e970:	003f2706 	br	5e610 <__alt_data_end+0xfffde610>
   5e974:	81002d36 	bltu	r16,r4,5ea2c <__divdf3+0x8f4>
   5e978:	24005626 	beq	r4,r16,5ead4 <__divdf3+0x99c>
   5e97c:	2829883a 	mov	r20,r5
   5e980:	003f8006 	br	5e784 <__alt_data_end+0xfffde784>
   5e984:	053fffc4 	movi	r20,-1
   5e988:	003f7f06 	br	5e788 <__alt_data_end+0xfffde788>
   5e98c:	200f883a 	mov	r7,r4
   5e990:	003f3c06 	br	5e684 <__alt_data_end+0xfffde684>
   5e994:	1011883a 	mov	r8,r2
   5e998:	003f5506 	br	5e6f0 <__alt_data_end+0xfffde6f0>
   5e99c:	e027883a 	mov	r19,fp
   5e9a0:	003f7906 	br	5e788 <__alt_data_end+0xfffde788>
   5e9a4:	010007c4 	movi	r4,31
   5e9a8:	20c02816 	blt	r4,r3,5ea4c <__divdf3+0x914>
   5e9ac:	00800804 	movi	r2,32
   5e9b0:	10c5c83a 	sub	r2,r2,r3
   5e9b4:	888a983a 	sll	r5,r17,r2
   5e9b8:	a0c8d83a 	srl	r4,r20,r3
   5e9bc:	a084983a 	sll	r2,r20,r2
   5e9c0:	88e2d83a 	srl	r17,r17,r3
   5e9c4:	2906b03a 	or	r3,r5,r4
   5e9c8:	1004c03a 	cmpne	r2,r2,zero
   5e9cc:	1886b03a 	or	r3,r3,r2
   5e9d0:	188001cc 	andi	r2,r3,7
   5e9d4:	10000726 	beq	r2,zero,5e9f4 <__divdf3+0x8bc>
   5e9d8:	188003cc 	andi	r2,r3,15
   5e9dc:	01000104 	movi	r4,4
   5e9e0:	11000426 	beq	r2,r4,5e9f4 <__divdf3+0x8bc>
   5e9e4:	1805883a 	mov	r2,r3
   5e9e8:	10c00104 	addi	r3,r2,4
   5e9ec:	1885803a 	cmpltu	r2,r3,r2
   5e9f0:	88a3883a 	add	r17,r17,r2
   5e9f4:	8880202c 	andhi	r2,r17,128
   5e9f8:	10002926 	beq	r2,zero,5eaa0 <__divdf3+0x968>
   5e9fc:	9900004c 	andi	r4,r19,1
   5ea00:	00800044 	movi	r2,1
   5ea04:	0021883a 	mov	r16,zero
   5ea08:	002b883a 	mov	r21,zero
   5ea0c:	003e2906 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5ea10:	d9800017 	ldw	r6,0(sp)
   5ea14:	8c7fff84 	addi	r17,r17,-2
   5ea18:	a9ab883a 	add	r21,r21,r6
   5ea1c:	a98b803a 	cmpltu	r5,r21,r6
   5ea20:	2d8b883a 	add	r5,r5,r22
   5ea24:	2a11883a 	add	r8,r5,r8
   5ea28:	003ef806 	br	5e60c <__alt_data_end+0xfffde60c>
   5ea2c:	d9800017 	ldw	r6,0(sp)
   5ea30:	318f883a 	add	r7,r6,r6
   5ea34:	398b803a 	cmpltu	r5,r7,r6
   5ea38:	2d8d883a 	add	r6,r5,r22
   5ea3c:	81a1883a 	add	r16,r16,r6
   5ea40:	a17fff84 	addi	r5,r20,-2
   5ea44:	d9c00015 	stw	r7,0(sp)
   5ea48:	003f8806 	br	5e86c <__alt_data_end+0xfffde86c>
   5ea4c:	013ff844 	movi	r4,-31
   5ea50:	2085c83a 	sub	r2,r4,r2
   5ea54:	8888d83a 	srl	r4,r17,r2
   5ea58:	00800804 	movi	r2,32
   5ea5c:	18802126 	beq	r3,r2,5eae4 <__divdf3+0x9ac>
   5ea60:	04001004 	movi	r16,64
   5ea64:	80c7c83a 	sub	r3,r16,r3
   5ea68:	88e0983a 	sll	r16,r17,r3
   5ea6c:	8504b03a 	or	r2,r16,r20
   5ea70:	1004c03a 	cmpne	r2,r2,zero
   5ea74:	2084b03a 	or	r2,r4,r2
   5ea78:	144001cc 	andi	r17,r2,7
   5ea7c:	88000d1e 	bne	r17,zero,5eab4 <__divdf3+0x97c>
   5ea80:	0021883a 	mov	r16,zero
   5ea84:	102ad0fa 	srli	r21,r2,3
   5ea88:	9900004c 	andi	r4,r19,1
   5ea8c:	0005883a 	mov	r2,zero
   5ea90:	ac6ab03a 	or	r21,r21,r17
   5ea94:	003e0706 	br	5e2b4 <__alt_data_end+0xfffde2b4>
   5ea98:	1007883a 	mov	r3,r2
   5ea9c:	0023883a 	mov	r17,zero
   5eaa0:	8820927a 	slli	r16,r17,9
   5eaa4:	1805883a 	mov	r2,r3
   5eaa8:	8822977a 	slli	r17,r17,29
   5eaac:	8020d33a 	srli	r16,r16,12
   5eab0:	003ff406 	br	5ea84 <__alt_data_end+0xfffdea84>
   5eab4:	10c003cc 	andi	r3,r2,15
   5eab8:	01000104 	movi	r4,4
   5eabc:	193ff626 	beq	r3,r4,5ea98 <__alt_data_end+0xfffdea98>
   5eac0:	0023883a 	mov	r17,zero
   5eac4:	003fc806 	br	5e9e8 <__alt_data_end+0xfffde9e8>
   5eac8:	a8bfd136 	bltu	r21,r2,5ea10 <__alt_data_end+0xfffdea10>
   5eacc:	2823883a 	mov	r17,r5
   5ead0:	003fa606 	br	5e96c <__alt_data_end+0xfffde96c>
   5ead4:	d9800017 	ldw	r6,0(sp)
   5ead8:	30bfd436 	bltu	r6,r2,5ea2c <__alt_data_end+0xfffdea2c>
   5eadc:	2829883a 	mov	r20,r5
   5eae0:	003f6406 	br	5e874 <__alt_data_end+0xfffde874>
   5eae4:	0021883a 	mov	r16,zero
   5eae8:	003fe006 	br	5ea6c <__alt_data_end+0xfffdea6c>
   5eaec:	00800434 	movhi	r2,16
   5eaf0:	8c000234 	orhi	r16,r17,8
   5eaf4:	10bfffc4 	addi	r2,r2,-1
   5eaf8:	e009883a 	mov	r4,fp
   5eafc:	80a0703a 	and	r16,r16,r2
   5eb00:	a02b883a 	mov	r21,r20
   5eb04:	003e4e06 	br	5e440 <__alt_data_end+0xfffde440>

0005eb08 <__eqdf2>:
   5eb08:	2804d53a 	srli	r2,r5,20
   5eb0c:	3806d53a 	srli	r3,r7,20
   5eb10:	02000434 	movhi	r8,16
   5eb14:	423fffc4 	addi	r8,r8,-1
   5eb18:	1081ffcc 	andi	r2,r2,2047
   5eb1c:	0281ffc4 	movi	r10,2047
   5eb20:	2a12703a 	and	r9,r5,r8
   5eb24:	18c1ffcc 	andi	r3,r3,2047
   5eb28:	3a10703a 	and	r8,r7,r8
   5eb2c:	280ad7fa 	srli	r5,r5,31
   5eb30:	380ed7fa 	srli	r7,r7,31
   5eb34:	12801026 	beq	r2,r10,5eb78 <__eqdf2+0x70>
   5eb38:	0281ffc4 	movi	r10,2047
   5eb3c:	1a800a26 	beq	r3,r10,5eb68 <__eqdf2+0x60>
   5eb40:	10c00226 	beq	r2,r3,5eb4c <__eqdf2+0x44>
   5eb44:	00800044 	movi	r2,1
   5eb48:	f800283a 	ret
   5eb4c:	4a3ffd1e 	bne	r9,r8,5eb44 <__alt_data_end+0xfffdeb44>
   5eb50:	21bffc1e 	bne	r4,r6,5eb44 <__alt_data_end+0xfffdeb44>
   5eb54:	29c00c26 	beq	r5,r7,5eb88 <__eqdf2+0x80>
   5eb58:	103ffa1e 	bne	r2,zero,5eb44 <__alt_data_end+0xfffdeb44>
   5eb5c:	2244b03a 	or	r2,r4,r9
   5eb60:	1004c03a 	cmpne	r2,r2,zero
   5eb64:	f800283a 	ret
   5eb68:	3214b03a 	or	r10,r6,r8
   5eb6c:	503ff426 	beq	r10,zero,5eb40 <__alt_data_end+0xfffdeb40>
   5eb70:	00800044 	movi	r2,1
   5eb74:	f800283a 	ret
   5eb78:	2254b03a 	or	r10,r4,r9
   5eb7c:	503fee26 	beq	r10,zero,5eb38 <__alt_data_end+0xfffdeb38>
   5eb80:	00800044 	movi	r2,1
   5eb84:	f800283a 	ret
   5eb88:	0005883a 	mov	r2,zero
   5eb8c:	f800283a 	ret

0005eb90 <__gedf2>:
   5eb90:	2804d53a 	srli	r2,r5,20
   5eb94:	3806d53a 	srli	r3,r7,20
   5eb98:	02000434 	movhi	r8,16
   5eb9c:	423fffc4 	addi	r8,r8,-1
   5eba0:	1081ffcc 	andi	r2,r2,2047
   5eba4:	0241ffc4 	movi	r9,2047
   5eba8:	2a14703a 	and	r10,r5,r8
   5ebac:	18c1ffcc 	andi	r3,r3,2047
   5ebb0:	3a10703a 	and	r8,r7,r8
   5ebb4:	280ad7fa 	srli	r5,r5,31
   5ebb8:	380ed7fa 	srli	r7,r7,31
   5ebbc:	12401d26 	beq	r2,r9,5ec34 <__gedf2+0xa4>
   5ebc0:	0241ffc4 	movi	r9,2047
   5ebc4:	1a401226 	beq	r3,r9,5ec10 <__gedf2+0x80>
   5ebc8:	1000081e 	bne	r2,zero,5ebec <__gedf2+0x5c>
   5ebcc:	2296b03a 	or	r11,r4,r10
   5ebd0:	5813003a 	cmpeq	r9,r11,zero
   5ebd4:	1800091e 	bne	r3,zero,5ebfc <__gedf2+0x6c>
   5ebd8:	3218b03a 	or	r12,r6,r8
   5ebdc:	6000071e 	bne	r12,zero,5ebfc <__gedf2+0x6c>
   5ebe0:	0005883a 	mov	r2,zero
   5ebe4:	5800101e 	bne	r11,zero,5ec28 <__gedf2+0x98>
   5ebe8:	f800283a 	ret
   5ebec:	18000c1e 	bne	r3,zero,5ec20 <__gedf2+0x90>
   5ebf0:	3212b03a 	or	r9,r6,r8
   5ebf4:	48000c26 	beq	r9,zero,5ec28 <__gedf2+0x98>
   5ebf8:	0013883a 	mov	r9,zero
   5ebfc:	39c03fcc 	andi	r7,r7,255
   5ec00:	48000826 	beq	r9,zero,5ec24 <__gedf2+0x94>
   5ec04:	38000926 	beq	r7,zero,5ec2c <__gedf2+0x9c>
   5ec08:	00800044 	movi	r2,1
   5ec0c:	f800283a 	ret
   5ec10:	3212b03a 	or	r9,r6,r8
   5ec14:	483fec26 	beq	r9,zero,5ebc8 <__alt_data_end+0xfffdebc8>
   5ec18:	00bfff84 	movi	r2,-2
   5ec1c:	f800283a 	ret
   5ec20:	39c03fcc 	andi	r7,r7,255
   5ec24:	29c00626 	beq	r5,r7,5ec40 <__gedf2+0xb0>
   5ec28:	283ff726 	beq	r5,zero,5ec08 <__alt_data_end+0xfffdec08>
   5ec2c:	00bfffc4 	movi	r2,-1
   5ec30:	f800283a 	ret
   5ec34:	2292b03a 	or	r9,r4,r10
   5ec38:	483fe126 	beq	r9,zero,5ebc0 <__alt_data_end+0xfffdebc0>
   5ec3c:	003ff606 	br	5ec18 <__alt_data_end+0xfffdec18>
   5ec40:	18bff916 	blt	r3,r2,5ec28 <__alt_data_end+0xfffdec28>
   5ec44:	10c00316 	blt	r2,r3,5ec54 <__gedf2+0xc4>
   5ec48:	42bff736 	bltu	r8,r10,5ec28 <__alt_data_end+0xfffdec28>
   5ec4c:	52000326 	beq	r10,r8,5ec5c <__gedf2+0xcc>
   5ec50:	5200042e 	bgeu	r10,r8,5ec64 <__gedf2+0xd4>
   5ec54:	283fec1e 	bne	r5,zero,5ec08 <__alt_data_end+0xfffdec08>
   5ec58:	003ff406 	br	5ec2c <__alt_data_end+0xfffdec2c>
   5ec5c:	313ff236 	bltu	r6,r4,5ec28 <__alt_data_end+0xfffdec28>
   5ec60:	21bffc36 	bltu	r4,r6,5ec54 <__alt_data_end+0xfffdec54>
   5ec64:	0005883a 	mov	r2,zero
   5ec68:	f800283a 	ret

0005ec6c <__ledf2>:
   5ec6c:	2804d53a 	srli	r2,r5,20
   5ec70:	3810d53a 	srli	r8,r7,20
   5ec74:	00c00434 	movhi	r3,16
   5ec78:	18ffffc4 	addi	r3,r3,-1
   5ec7c:	1081ffcc 	andi	r2,r2,2047
   5ec80:	0241ffc4 	movi	r9,2047
   5ec84:	28d4703a 	and	r10,r5,r3
   5ec88:	4201ffcc 	andi	r8,r8,2047
   5ec8c:	38c6703a 	and	r3,r7,r3
   5ec90:	280ad7fa 	srli	r5,r5,31
   5ec94:	380ed7fa 	srli	r7,r7,31
   5ec98:	12401f26 	beq	r2,r9,5ed18 <__ledf2+0xac>
   5ec9c:	0241ffc4 	movi	r9,2047
   5eca0:	42401426 	beq	r8,r9,5ecf4 <__ledf2+0x88>
   5eca4:	1000091e 	bne	r2,zero,5eccc <__ledf2+0x60>
   5eca8:	2296b03a 	or	r11,r4,r10
   5ecac:	5813003a 	cmpeq	r9,r11,zero
   5ecb0:	29403fcc 	andi	r5,r5,255
   5ecb4:	40000a1e 	bne	r8,zero,5ece0 <__ledf2+0x74>
   5ecb8:	30d8b03a 	or	r12,r6,r3
   5ecbc:	6000081e 	bne	r12,zero,5ece0 <__ledf2+0x74>
   5ecc0:	0005883a 	mov	r2,zero
   5ecc4:	5800111e 	bne	r11,zero,5ed0c <__ledf2+0xa0>
   5ecc8:	f800283a 	ret
   5eccc:	29403fcc 	andi	r5,r5,255
   5ecd0:	40000c1e 	bne	r8,zero,5ed04 <__ledf2+0x98>
   5ecd4:	30d2b03a 	or	r9,r6,r3
   5ecd8:	48000c26 	beq	r9,zero,5ed0c <__ledf2+0xa0>
   5ecdc:	0013883a 	mov	r9,zero
   5ece0:	39c03fcc 	andi	r7,r7,255
   5ece4:	48000826 	beq	r9,zero,5ed08 <__ledf2+0x9c>
   5ece8:	38001126 	beq	r7,zero,5ed30 <__ledf2+0xc4>
   5ecec:	00800044 	movi	r2,1
   5ecf0:	f800283a 	ret
   5ecf4:	30d2b03a 	or	r9,r6,r3
   5ecf8:	483fea26 	beq	r9,zero,5eca4 <__alt_data_end+0xfffdeca4>
   5ecfc:	00800084 	movi	r2,2
   5ed00:	f800283a 	ret
   5ed04:	39c03fcc 	andi	r7,r7,255
   5ed08:	39400726 	beq	r7,r5,5ed28 <__ledf2+0xbc>
   5ed0c:	2800081e 	bne	r5,zero,5ed30 <__ledf2+0xc4>
   5ed10:	00800044 	movi	r2,1
   5ed14:	f800283a 	ret
   5ed18:	2292b03a 	or	r9,r4,r10
   5ed1c:	483fdf26 	beq	r9,zero,5ec9c <__alt_data_end+0xfffdec9c>
   5ed20:	00800084 	movi	r2,2
   5ed24:	f800283a 	ret
   5ed28:	4080030e 	bge	r8,r2,5ed38 <__ledf2+0xcc>
   5ed2c:	383fef26 	beq	r7,zero,5ecec <__alt_data_end+0xfffdecec>
   5ed30:	00bfffc4 	movi	r2,-1
   5ed34:	f800283a 	ret
   5ed38:	123feb16 	blt	r2,r8,5ece8 <__alt_data_end+0xfffdece8>
   5ed3c:	1abff336 	bltu	r3,r10,5ed0c <__alt_data_end+0xfffded0c>
   5ed40:	50c00326 	beq	r10,r3,5ed50 <__ledf2+0xe4>
   5ed44:	50c0042e 	bgeu	r10,r3,5ed58 <__ledf2+0xec>
   5ed48:	283fe81e 	bne	r5,zero,5ecec <__alt_data_end+0xfffdecec>
   5ed4c:	003ff806 	br	5ed30 <__alt_data_end+0xfffded30>
   5ed50:	313fee36 	bltu	r6,r4,5ed0c <__alt_data_end+0xfffded0c>
   5ed54:	21bffc36 	bltu	r4,r6,5ed48 <__alt_data_end+0xfffded48>
   5ed58:	0005883a 	mov	r2,zero
   5ed5c:	f800283a 	ret

0005ed60 <__muldf3>:
   5ed60:	deffee04 	addi	sp,sp,-72
   5ed64:	dd000c15 	stw	r20,48(sp)
   5ed68:	2828d53a 	srli	r20,r5,20
   5ed6c:	ddc00f15 	stw	r23,60(sp)
   5ed70:	282ed7fa 	srli	r23,r5,31
   5ed74:	dc000815 	stw	r16,32(sp)
   5ed78:	04000434 	movhi	r16,16
   5ed7c:	dcc00b15 	stw	r19,44(sp)
   5ed80:	843fffc4 	addi	r16,r16,-1
   5ed84:	dfc01115 	stw	ra,68(sp)
   5ed88:	df001015 	stw	fp,64(sp)
   5ed8c:	dd800e15 	stw	r22,56(sp)
   5ed90:	dd400d15 	stw	r21,52(sp)
   5ed94:	dc800a15 	stw	r18,40(sp)
   5ed98:	dc400915 	stw	r17,36(sp)
   5ed9c:	a501ffcc 	andi	r20,r20,2047
   5eda0:	2c20703a 	and	r16,r5,r16
   5eda4:	b827883a 	mov	r19,r23
   5eda8:	ba403fcc 	andi	r9,r23,255
   5edac:	a0006026 	beq	r20,zero,5ef30 <__muldf3+0x1d0>
   5edb0:	0081ffc4 	movi	r2,2047
   5edb4:	202d883a 	mov	r22,r4
   5edb8:	a0803626 	beq	r20,r2,5ee94 <__muldf3+0x134>
   5edbc:	84000434 	orhi	r16,r16,16
   5edc0:	200ad77a 	srli	r5,r4,29
   5edc4:	800490fa 	slli	r2,r16,3
   5edc8:	202c90fa 	slli	r22,r4,3
   5edcc:	a53f0044 	addi	r20,r20,-1023
   5edd0:	28a0b03a 	or	r16,r5,r2
   5edd4:	002b883a 	mov	r21,zero
   5edd8:	000b883a 	mov	r5,zero
   5eddc:	3804d53a 	srli	r2,r7,20
   5ede0:	3838d7fa 	srli	fp,r7,31
   5ede4:	04400434 	movhi	r17,16
   5ede8:	8c7fffc4 	addi	r17,r17,-1
   5edec:	1081ffcc 	andi	r2,r2,2047
   5edf0:	3025883a 	mov	r18,r6
   5edf4:	3c62703a 	and	r17,r7,r17
   5edf8:	e2803fcc 	andi	r10,fp,255
   5edfc:	10006d26 	beq	r2,zero,5efb4 <__muldf3+0x254>
   5ee00:	00c1ffc4 	movi	r3,2047
   5ee04:	10c06526 	beq	r2,r3,5ef9c <__muldf3+0x23c>
   5ee08:	8c400434 	orhi	r17,r17,16
   5ee0c:	300ed77a 	srli	r7,r6,29
   5ee10:	880690fa 	slli	r3,r17,3
   5ee14:	302490fa 	slli	r18,r6,3
   5ee18:	10bf0044 	addi	r2,r2,-1023
   5ee1c:	38e2b03a 	or	r17,r7,r3
   5ee20:	000f883a 	mov	r7,zero
   5ee24:	a087883a 	add	r3,r20,r2
   5ee28:	010003c4 	movi	r4,15
   5ee2c:	3d44b03a 	or	r2,r7,r21
   5ee30:	e5ccf03a 	xor	r6,fp,r23
   5ee34:	1a000044 	addi	r8,r3,1
   5ee38:	20809b36 	bltu	r4,r2,5f0a8 <__muldf3+0x348>
   5ee3c:	100490ba 	slli	r2,r2,2
   5ee40:	010001b4 	movhi	r4,6
   5ee44:	213b9504 	addi	r4,r4,-4524
   5ee48:	1105883a 	add	r2,r2,r4
   5ee4c:	10800017 	ldw	r2,0(r2)
   5ee50:	1000683a 	jmp	r2
   5ee54:	0005f0a8 	cmpgeui	zero,zero,6082
   5ee58:	0005eeb4 	movhi	zero,6074
   5ee5c:	0005eeb4 	movhi	zero,6074
   5ee60:	0005eeb0 	cmpltui	zero,zero,6074
   5ee64:	0005f084 	movi	zero,6082
   5ee68:	0005f084 	movi	zero,6082
   5ee6c:	0005f06c 	andhi	zero,zero,6081
   5ee70:	0005eeb0 	cmpltui	zero,zero,6074
   5ee74:	0005f084 	movi	zero,6082
   5ee78:	0005f06c 	andhi	zero,zero,6081
   5ee7c:	0005f084 	movi	zero,6082
   5ee80:	0005eeb0 	cmpltui	zero,zero,6074
   5ee84:	0005f094 	movui	zero,6082
   5ee88:	0005f094 	movui	zero,6082
   5ee8c:	0005f094 	movui	zero,6082
   5ee90:	0005f3f4 	movhi	zero,6095
   5ee94:	2404b03a 	or	r2,r4,r16
   5ee98:	1000711e 	bne	r2,zero,5f060 <__muldf3+0x300>
   5ee9c:	05400204 	movi	r21,8
   5eea0:	0021883a 	mov	r16,zero
   5eea4:	002d883a 	mov	r22,zero
   5eea8:	01400084 	movi	r5,2
   5eeac:	003fcb06 	br	5eddc <__alt_data_end+0xfffdeddc>
   5eeb0:	500d883a 	mov	r6,r10
   5eeb4:	00800084 	movi	r2,2
   5eeb8:	38805926 	beq	r7,r2,5f020 <__muldf3+0x2c0>
   5eebc:	008000c4 	movi	r2,3
   5eec0:	3881bb26 	beq	r7,r2,5f5b0 <__muldf3+0x850>
   5eec4:	00800044 	movi	r2,1
   5eec8:	3881961e 	bne	r7,r2,5f524 <__muldf3+0x7c4>
   5eecc:	3027883a 	mov	r19,r6
   5eed0:	0005883a 	mov	r2,zero
   5eed4:	0021883a 	mov	r16,zero
   5eed8:	002d883a 	mov	r22,zero
   5eedc:	1004953a 	slli	r2,r2,20
   5eee0:	98c03fcc 	andi	r3,r19,255
   5eee4:	04400434 	movhi	r17,16
   5eee8:	8c7fffc4 	addi	r17,r17,-1
   5eeec:	180697fa 	slli	r3,r3,31
   5eef0:	8460703a 	and	r16,r16,r17
   5eef4:	80a0b03a 	or	r16,r16,r2
   5eef8:	80c6b03a 	or	r3,r16,r3
   5eefc:	b005883a 	mov	r2,r22
   5ef00:	dfc01117 	ldw	ra,68(sp)
   5ef04:	df001017 	ldw	fp,64(sp)
   5ef08:	ddc00f17 	ldw	r23,60(sp)
   5ef0c:	dd800e17 	ldw	r22,56(sp)
   5ef10:	dd400d17 	ldw	r21,52(sp)
   5ef14:	dd000c17 	ldw	r20,48(sp)
   5ef18:	dcc00b17 	ldw	r19,44(sp)
   5ef1c:	dc800a17 	ldw	r18,40(sp)
   5ef20:	dc400917 	ldw	r17,36(sp)
   5ef24:	dc000817 	ldw	r16,32(sp)
   5ef28:	dec01204 	addi	sp,sp,72
   5ef2c:	f800283a 	ret
   5ef30:	2404b03a 	or	r2,r4,r16
   5ef34:	202b883a 	mov	r21,r4
   5ef38:	10004426 	beq	r2,zero,5f04c <__muldf3+0x2ec>
   5ef3c:	80015126 	beq	r16,zero,5f484 <__muldf3+0x724>
   5ef40:	8009883a 	mov	r4,r16
   5ef44:	d9800715 	stw	r6,28(sp)
   5ef48:	d9c00215 	stw	r7,8(sp)
   5ef4c:	da400415 	stw	r9,16(sp)
   5ef50:	004f5580 	call	4f558 <__clzsi2>
   5ef54:	d9800717 	ldw	r6,28(sp)
   5ef58:	d9c00217 	ldw	r7,8(sp)
   5ef5c:	da400417 	ldw	r9,16(sp)
   5ef60:	113ffd44 	addi	r4,r2,-11
   5ef64:	00c00704 	movi	r3,28
   5ef68:	19014216 	blt	r3,r4,5f474 <__muldf3+0x714>
   5ef6c:	00c00744 	movi	r3,29
   5ef70:	15bffe04 	addi	r22,r2,-8
   5ef74:	1907c83a 	sub	r3,r3,r4
   5ef78:	85a0983a 	sll	r16,r16,r22
   5ef7c:	a8c6d83a 	srl	r3,r21,r3
   5ef80:	adac983a 	sll	r22,r21,r22
   5ef84:	1c20b03a 	or	r16,r3,r16
   5ef88:	1080fcc4 	addi	r2,r2,1011
   5ef8c:	00a9c83a 	sub	r20,zero,r2
   5ef90:	002b883a 	mov	r21,zero
   5ef94:	000b883a 	mov	r5,zero
   5ef98:	003f9006 	br	5eddc <__alt_data_end+0xfffdeddc>
   5ef9c:	3446b03a 	or	r3,r6,r17
   5efa0:	1800281e 	bne	r3,zero,5f044 <__muldf3+0x2e4>
   5efa4:	0023883a 	mov	r17,zero
   5efa8:	0025883a 	mov	r18,zero
   5efac:	01c00084 	movi	r7,2
   5efb0:	003f9c06 	br	5ee24 <__alt_data_end+0xfffdee24>
   5efb4:	3446b03a 	or	r3,r6,r17
   5efb8:	18001e26 	beq	r3,zero,5f034 <__muldf3+0x2d4>
   5efbc:	88012126 	beq	r17,zero,5f444 <__muldf3+0x6e4>
   5efc0:	8809883a 	mov	r4,r17
   5efc4:	d9400215 	stw	r5,8(sp)
   5efc8:	d9800715 	stw	r6,28(sp)
   5efcc:	da400415 	stw	r9,16(sp)
   5efd0:	da800315 	stw	r10,12(sp)
   5efd4:	004f5580 	call	4f558 <__clzsi2>
   5efd8:	d9400217 	ldw	r5,8(sp)
   5efdc:	d9800717 	ldw	r6,28(sp)
   5efe0:	da400417 	ldw	r9,16(sp)
   5efe4:	da800317 	ldw	r10,12(sp)
   5efe8:	113ffd44 	addi	r4,r2,-11
   5efec:	00c00704 	movi	r3,28
   5eff0:	19011016 	blt	r3,r4,5f434 <__muldf3+0x6d4>
   5eff4:	00c00744 	movi	r3,29
   5eff8:	14bffe04 	addi	r18,r2,-8
   5effc:	1907c83a 	sub	r3,r3,r4
   5f000:	8ca2983a 	sll	r17,r17,r18
   5f004:	30c6d83a 	srl	r3,r6,r3
   5f008:	34a4983a 	sll	r18,r6,r18
   5f00c:	1c62b03a 	or	r17,r3,r17
   5f010:	1080fcc4 	addi	r2,r2,1011
   5f014:	0085c83a 	sub	r2,zero,r2
   5f018:	000f883a 	mov	r7,zero
   5f01c:	003f8106 	br	5ee24 <__alt_data_end+0xfffdee24>
   5f020:	3027883a 	mov	r19,r6
   5f024:	0081ffc4 	movi	r2,2047
   5f028:	0021883a 	mov	r16,zero
   5f02c:	002d883a 	mov	r22,zero
   5f030:	003faa06 	br	5eedc <__alt_data_end+0xfffdeedc>
   5f034:	0023883a 	mov	r17,zero
   5f038:	0025883a 	mov	r18,zero
   5f03c:	01c00044 	movi	r7,1
   5f040:	003f7806 	br	5ee24 <__alt_data_end+0xfffdee24>
   5f044:	01c000c4 	movi	r7,3
   5f048:	003f7606 	br	5ee24 <__alt_data_end+0xfffdee24>
   5f04c:	05400104 	movi	r21,4
   5f050:	0021883a 	mov	r16,zero
   5f054:	002d883a 	mov	r22,zero
   5f058:	01400044 	movi	r5,1
   5f05c:	003f5f06 	br	5eddc <__alt_data_end+0xfffdeddc>
   5f060:	05400304 	movi	r21,12
   5f064:	014000c4 	movi	r5,3
   5f068:	003f5c06 	br	5eddc <__alt_data_end+0xfffdeddc>
   5f06c:	04000434 	movhi	r16,16
   5f070:	0027883a 	mov	r19,zero
   5f074:	843fffc4 	addi	r16,r16,-1
   5f078:	05bfffc4 	movi	r22,-1
   5f07c:	0081ffc4 	movi	r2,2047
   5f080:	003f9606 	br	5eedc <__alt_data_end+0xfffdeedc>
   5f084:	8023883a 	mov	r17,r16
   5f088:	b025883a 	mov	r18,r22
   5f08c:	280f883a 	mov	r7,r5
   5f090:	003f8806 	br	5eeb4 <__alt_data_end+0xfffdeeb4>
   5f094:	8023883a 	mov	r17,r16
   5f098:	b025883a 	mov	r18,r22
   5f09c:	480d883a 	mov	r6,r9
   5f0a0:	280f883a 	mov	r7,r5
   5f0a4:	003f8306 	br	5eeb4 <__alt_data_end+0xfffdeeb4>
   5f0a8:	b026d43a 	srli	r19,r22,16
   5f0ac:	902ed43a 	srli	r23,r18,16
   5f0b0:	b5bfffcc 	andi	r22,r22,65535
   5f0b4:	94bfffcc 	andi	r18,r18,65535
   5f0b8:	b00b883a 	mov	r5,r22
   5f0bc:	9009883a 	mov	r4,r18
   5f0c0:	d8c00515 	stw	r3,20(sp)
   5f0c4:	d9800715 	stw	r6,28(sp)
   5f0c8:	da000615 	stw	r8,24(sp)
   5f0cc:	004dab40 	call	4dab4 <__mulsi3>
   5f0d0:	980b883a 	mov	r5,r19
   5f0d4:	9009883a 	mov	r4,r18
   5f0d8:	1029883a 	mov	r20,r2
   5f0dc:	004dab40 	call	4dab4 <__mulsi3>
   5f0e0:	b80b883a 	mov	r5,r23
   5f0e4:	9809883a 	mov	r4,r19
   5f0e8:	102b883a 	mov	r21,r2
   5f0ec:	004dab40 	call	4dab4 <__mulsi3>
   5f0f0:	b809883a 	mov	r4,r23
   5f0f4:	b00b883a 	mov	r5,r22
   5f0f8:	1039883a 	mov	fp,r2
   5f0fc:	004dab40 	call	4dab4 <__mulsi3>
   5f100:	a008d43a 	srli	r4,r20,16
   5f104:	1545883a 	add	r2,r2,r21
   5f108:	d8c00517 	ldw	r3,20(sp)
   5f10c:	2085883a 	add	r2,r4,r2
   5f110:	d9800717 	ldw	r6,28(sp)
   5f114:	da000617 	ldw	r8,24(sp)
   5f118:	1540022e 	bgeu	r2,r21,5f124 <__muldf3+0x3c4>
   5f11c:	01000074 	movhi	r4,1
   5f120:	e139883a 	add	fp,fp,r4
   5f124:	100e943a 	slli	r7,r2,16
   5f128:	1004d43a 	srli	r2,r2,16
   5f12c:	882ad43a 	srli	r21,r17,16
   5f130:	a53fffcc 	andi	r20,r20,65535
   5f134:	8c7fffcc 	andi	r17,r17,65535
   5f138:	3d29883a 	add	r20,r7,r20
   5f13c:	b00b883a 	mov	r5,r22
   5f140:	8809883a 	mov	r4,r17
   5f144:	d8c00515 	stw	r3,20(sp)
   5f148:	d9800715 	stw	r6,28(sp)
   5f14c:	da000615 	stw	r8,24(sp)
   5f150:	dd000115 	stw	r20,4(sp)
   5f154:	d8800015 	stw	r2,0(sp)
   5f158:	004dab40 	call	4dab4 <__mulsi3>
   5f15c:	980b883a 	mov	r5,r19
   5f160:	8809883a 	mov	r4,r17
   5f164:	d8800215 	stw	r2,8(sp)
   5f168:	004dab40 	call	4dab4 <__mulsi3>
   5f16c:	9809883a 	mov	r4,r19
   5f170:	a80b883a 	mov	r5,r21
   5f174:	1029883a 	mov	r20,r2
   5f178:	004dab40 	call	4dab4 <__mulsi3>
   5f17c:	b00b883a 	mov	r5,r22
   5f180:	a809883a 	mov	r4,r21
   5f184:	d8800415 	stw	r2,16(sp)
   5f188:	004dab40 	call	4dab4 <__mulsi3>
   5f18c:	d9c00217 	ldw	r7,8(sp)
   5f190:	1505883a 	add	r2,r2,r20
   5f194:	d8c00517 	ldw	r3,20(sp)
   5f198:	3826d43a 	srli	r19,r7,16
   5f19c:	d9800717 	ldw	r6,28(sp)
   5f1a0:	da000617 	ldw	r8,24(sp)
   5f1a4:	9885883a 	add	r2,r19,r2
   5f1a8:	da400417 	ldw	r9,16(sp)
   5f1ac:	1500022e 	bgeu	r2,r20,5f1b8 <__muldf3+0x458>
   5f1b0:	01000074 	movhi	r4,1
   5f1b4:	4913883a 	add	r9,r9,r4
   5f1b8:	1028d43a 	srli	r20,r2,16
   5f1bc:	1004943a 	slli	r2,r2,16
   5f1c0:	802cd43a 	srli	r22,r16,16
   5f1c4:	843fffcc 	andi	r16,r16,65535
   5f1c8:	3cffffcc 	andi	r19,r7,65535
   5f1cc:	9009883a 	mov	r4,r18
   5f1d0:	800b883a 	mov	r5,r16
   5f1d4:	a269883a 	add	r20,r20,r9
   5f1d8:	d8c00515 	stw	r3,20(sp)
   5f1dc:	d9800715 	stw	r6,28(sp)
   5f1e0:	da000615 	stw	r8,24(sp)
   5f1e4:	14e7883a 	add	r19,r2,r19
   5f1e8:	004dab40 	call	4dab4 <__mulsi3>
   5f1ec:	9009883a 	mov	r4,r18
   5f1f0:	b00b883a 	mov	r5,r22
   5f1f4:	d8800315 	stw	r2,12(sp)
   5f1f8:	004dab40 	call	4dab4 <__mulsi3>
   5f1fc:	b809883a 	mov	r4,r23
   5f200:	b00b883a 	mov	r5,r22
   5f204:	d8800215 	stw	r2,8(sp)
   5f208:	004dab40 	call	4dab4 <__mulsi3>
   5f20c:	b80b883a 	mov	r5,r23
   5f210:	8009883a 	mov	r4,r16
   5f214:	d8800415 	stw	r2,16(sp)
   5f218:	004dab40 	call	4dab4 <__mulsi3>
   5f21c:	da800317 	ldw	r10,12(sp)
   5f220:	d9c00217 	ldw	r7,8(sp)
   5f224:	d9000017 	ldw	r4,0(sp)
   5f228:	502ed43a 	srli	r23,r10,16
   5f22c:	11c5883a 	add	r2,r2,r7
   5f230:	24e5883a 	add	r18,r4,r19
   5f234:	b885883a 	add	r2,r23,r2
   5f238:	d8c00517 	ldw	r3,20(sp)
   5f23c:	d9800717 	ldw	r6,28(sp)
   5f240:	da000617 	ldw	r8,24(sp)
   5f244:	da400417 	ldw	r9,16(sp)
   5f248:	11c0022e 	bgeu	r2,r7,5f254 <__muldf3+0x4f4>
   5f24c:	01000074 	movhi	r4,1
   5f250:	4913883a 	add	r9,r9,r4
   5f254:	100ed43a 	srli	r7,r2,16
   5f258:	1004943a 	slli	r2,r2,16
   5f25c:	55ffffcc 	andi	r23,r10,65535
   5f260:	3a53883a 	add	r9,r7,r9
   5f264:	8809883a 	mov	r4,r17
   5f268:	800b883a 	mov	r5,r16
   5f26c:	d8c00515 	stw	r3,20(sp)
   5f270:	d9800715 	stw	r6,28(sp)
   5f274:	da000615 	stw	r8,24(sp)
   5f278:	da400415 	stw	r9,16(sp)
   5f27c:	15ef883a 	add	r23,r2,r23
   5f280:	004dab40 	call	4dab4 <__mulsi3>
   5f284:	8809883a 	mov	r4,r17
   5f288:	b00b883a 	mov	r5,r22
   5f28c:	d8800215 	stw	r2,8(sp)
   5f290:	004dab40 	call	4dab4 <__mulsi3>
   5f294:	b00b883a 	mov	r5,r22
   5f298:	a809883a 	mov	r4,r21
   5f29c:	d8800315 	stw	r2,12(sp)
   5f2a0:	004dab40 	call	4dab4 <__mulsi3>
   5f2a4:	8009883a 	mov	r4,r16
   5f2a8:	a80b883a 	mov	r5,r21
   5f2ac:	1023883a 	mov	r17,r2
   5f2b0:	004dab40 	call	4dab4 <__mulsi3>
   5f2b4:	d9c00217 	ldw	r7,8(sp)
   5f2b8:	da800317 	ldw	r10,12(sp)
   5f2bc:	d8c00517 	ldw	r3,20(sp)
   5f2c0:	3808d43a 	srli	r4,r7,16
   5f2c4:	1285883a 	add	r2,r2,r10
   5f2c8:	d9800717 	ldw	r6,28(sp)
   5f2cc:	2085883a 	add	r2,r4,r2
   5f2d0:	da000617 	ldw	r8,24(sp)
   5f2d4:	da400417 	ldw	r9,16(sp)
   5f2d8:	1280022e 	bgeu	r2,r10,5f2e4 <__muldf3+0x584>
   5f2dc:	01000074 	movhi	r4,1
   5f2e0:	8923883a 	add	r17,r17,r4
   5f2e4:	1008943a 	slli	r4,r2,16
   5f2e8:	39ffffcc 	andi	r7,r7,65535
   5f2ec:	e4b9883a 	add	fp,fp,r18
   5f2f0:	21cf883a 	add	r7,r4,r7
   5f2f4:	e4e7803a 	cmpltu	r19,fp,r19
   5f2f8:	3d0f883a 	add	r7,r7,r20
   5f2fc:	bf39883a 	add	fp,r23,fp
   5f300:	99c9883a 	add	r4,r19,r7
   5f304:	e5ef803a 	cmpltu	r23,fp,r23
   5f308:	490b883a 	add	r5,r9,r4
   5f30c:	1004d43a 	srli	r2,r2,16
   5f310:	b965883a 	add	r18,r23,r5
   5f314:	24c9803a 	cmpltu	r4,r4,r19
   5f318:	3d29803a 	cmpltu	r20,r7,r20
   5f31c:	a128b03a 	or	r20,r20,r4
   5f320:	95ef803a 	cmpltu	r23,r18,r23
   5f324:	2a53803a 	cmpltu	r9,r5,r9
   5f328:	a0a9883a 	add	r20,r20,r2
   5f32c:	4deeb03a 	or	r23,r9,r23
   5f330:	a5ef883a 	add	r23,r20,r23
   5f334:	bc63883a 	add	r17,r23,r17
   5f338:	e004927a 	slli	r2,fp,9
   5f33c:	d9000117 	ldw	r4,4(sp)
   5f340:	882e927a 	slli	r23,r17,9
   5f344:	9022d5fa 	srli	r17,r18,23
   5f348:	e038d5fa 	srli	fp,fp,23
   5f34c:	1104b03a 	or	r2,r2,r4
   5f350:	9024927a 	slli	r18,r18,9
   5f354:	1004c03a 	cmpne	r2,r2,zero
   5f358:	bc62b03a 	or	r17,r23,r17
   5f35c:	1738b03a 	or	fp,r2,fp
   5f360:	8880402c 	andhi	r2,r17,256
   5f364:	e4a4b03a 	or	r18,fp,r18
   5f368:	10000726 	beq	r2,zero,5f388 <__muldf3+0x628>
   5f36c:	9006d07a 	srli	r3,r18,1
   5f370:	880497fa 	slli	r2,r17,31
   5f374:	9480004c 	andi	r18,r18,1
   5f378:	8822d07a 	srli	r17,r17,1
   5f37c:	1ca4b03a 	or	r18,r3,r18
   5f380:	14a4b03a 	or	r18,r2,r18
   5f384:	4007883a 	mov	r3,r8
   5f388:	1880ffc4 	addi	r2,r3,1023
   5f38c:	0080460e 	bge	zero,r2,5f4a8 <__muldf3+0x748>
   5f390:	910001cc 	andi	r4,r18,7
   5f394:	20000726 	beq	r4,zero,5f3b4 <__muldf3+0x654>
   5f398:	910003cc 	andi	r4,r18,15
   5f39c:	01400104 	movi	r5,4
   5f3a0:	21400426 	beq	r4,r5,5f3b4 <__muldf3+0x654>
   5f3a4:	9149883a 	add	r4,r18,r5
   5f3a8:	24a5803a 	cmpltu	r18,r4,r18
   5f3ac:	8ca3883a 	add	r17,r17,r18
   5f3b0:	2025883a 	mov	r18,r4
   5f3b4:	8900402c 	andhi	r4,r17,256
   5f3b8:	20000426 	beq	r4,zero,5f3cc <__muldf3+0x66c>
   5f3bc:	18810004 	addi	r2,r3,1024
   5f3c0:	00ffc034 	movhi	r3,65280
   5f3c4:	18ffffc4 	addi	r3,r3,-1
   5f3c8:	88e2703a 	and	r17,r17,r3
   5f3cc:	00c1ff84 	movi	r3,2046
   5f3d0:	18bf1316 	blt	r3,r2,5f020 <__alt_data_end+0xfffdf020>
   5f3d4:	882c977a 	slli	r22,r17,29
   5f3d8:	9024d0fa 	srli	r18,r18,3
   5f3dc:	8822927a 	slli	r17,r17,9
   5f3e0:	1081ffcc 	andi	r2,r2,2047
   5f3e4:	b4acb03a 	or	r22,r22,r18
   5f3e8:	8820d33a 	srli	r16,r17,12
   5f3ec:	3027883a 	mov	r19,r6
   5f3f0:	003eba06 	br	5eedc <__alt_data_end+0xfffdeedc>
   5f3f4:	8080022c 	andhi	r2,r16,8
   5f3f8:	10000926 	beq	r2,zero,5f420 <__muldf3+0x6c0>
   5f3fc:	8880022c 	andhi	r2,r17,8
   5f400:	1000071e 	bne	r2,zero,5f420 <__muldf3+0x6c0>
   5f404:	00800434 	movhi	r2,16
   5f408:	8c000234 	orhi	r16,r17,8
   5f40c:	10bfffc4 	addi	r2,r2,-1
   5f410:	e027883a 	mov	r19,fp
   5f414:	80a0703a 	and	r16,r16,r2
   5f418:	902d883a 	mov	r22,r18
   5f41c:	003f1706 	br	5f07c <__alt_data_end+0xfffdf07c>
   5f420:	00800434 	movhi	r2,16
   5f424:	84000234 	orhi	r16,r16,8
   5f428:	10bfffc4 	addi	r2,r2,-1
   5f42c:	80a0703a 	and	r16,r16,r2
   5f430:	003f1206 	br	5f07c <__alt_data_end+0xfffdf07c>
   5f434:	147ff604 	addi	r17,r2,-40
   5f438:	3462983a 	sll	r17,r6,r17
   5f43c:	0025883a 	mov	r18,zero
   5f440:	003ef306 	br	5f010 <__alt_data_end+0xfffdf010>
   5f444:	3009883a 	mov	r4,r6
   5f448:	d9400215 	stw	r5,8(sp)
   5f44c:	d9800715 	stw	r6,28(sp)
   5f450:	da400415 	stw	r9,16(sp)
   5f454:	da800315 	stw	r10,12(sp)
   5f458:	004f5580 	call	4f558 <__clzsi2>
   5f45c:	10800804 	addi	r2,r2,32
   5f460:	da800317 	ldw	r10,12(sp)
   5f464:	da400417 	ldw	r9,16(sp)
   5f468:	d9800717 	ldw	r6,28(sp)
   5f46c:	d9400217 	ldw	r5,8(sp)
   5f470:	003edd06 	br	5efe8 <__alt_data_end+0xfffdefe8>
   5f474:	143ff604 	addi	r16,r2,-40
   5f478:	ac20983a 	sll	r16,r21,r16
   5f47c:	002d883a 	mov	r22,zero
   5f480:	003ec106 	br	5ef88 <__alt_data_end+0xfffdef88>
   5f484:	d9800715 	stw	r6,28(sp)
   5f488:	d9c00215 	stw	r7,8(sp)
   5f48c:	da400415 	stw	r9,16(sp)
   5f490:	004f5580 	call	4f558 <__clzsi2>
   5f494:	10800804 	addi	r2,r2,32
   5f498:	da400417 	ldw	r9,16(sp)
   5f49c:	d9c00217 	ldw	r7,8(sp)
   5f4a0:	d9800717 	ldw	r6,28(sp)
   5f4a4:	003eae06 	br	5ef60 <__alt_data_end+0xfffdef60>
   5f4a8:	00c00044 	movi	r3,1
   5f4ac:	1887c83a 	sub	r3,r3,r2
   5f4b0:	01000e04 	movi	r4,56
   5f4b4:	20fe8516 	blt	r4,r3,5eecc <__alt_data_end+0xfffdeecc>
   5f4b8:	010007c4 	movi	r4,31
   5f4bc:	20c01b16 	blt	r4,r3,5f52c <__muldf3+0x7cc>
   5f4c0:	00800804 	movi	r2,32
   5f4c4:	10c5c83a 	sub	r2,r2,r3
   5f4c8:	888a983a 	sll	r5,r17,r2
   5f4cc:	90c8d83a 	srl	r4,r18,r3
   5f4d0:	9084983a 	sll	r2,r18,r2
   5f4d4:	88e2d83a 	srl	r17,r17,r3
   5f4d8:	2906b03a 	or	r3,r5,r4
   5f4dc:	1004c03a 	cmpne	r2,r2,zero
   5f4e0:	1886b03a 	or	r3,r3,r2
   5f4e4:	188001cc 	andi	r2,r3,7
   5f4e8:	10000726 	beq	r2,zero,5f508 <__muldf3+0x7a8>
   5f4ec:	188003cc 	andi	r2,r3,15
   5f4f0:	01000104 	movi	r4,4
   5f4f4:	11000426 	beq	r2,r4,5f508 <__muldf3+0x7a8>
   5f4f8:	1805883a 	mov	r2,r3
   5f4fc:	10c00104 	addi	r3,r2,4
   5f500:	1885803a 	cmpltu	r2,r3,r2
   5f504:	88a3883a 	add	r17,r17,r2
   5f508:	8880202c 	andhi	r2,r17,128
   5f50c:	10001c26 	beq	r2,zero,5f580 <__muldf3+0x820>
   5f510:	3027883a 	mov	r19,r6
   5f514:	00800044 	movi	r2,1
   5f518:	0021883a 	mov	r16,zero
   5f51c:	002d883a 	mov	r22,zero
   5f520:	003e6e06 	br	5eedc <__alt_data_end+0xfffdeedc>
   5f524:	4007883a 	mov	r3,r8
   5f528:	003f9706 	br	5f388 <__alt_data_end+0xfffdf388>
   5f52c:	017ff844 	movi	r5,-31
   5f530:	2885c83a 	sub	r2,r5,r2
   5f534:	888ad83a 	srl	r5,r17,r2
   5f538:	00800804 	movi	r2,32
   5f53c:	18801a26 	beq	r3,r2,5f5a8 <__muldf3+0x848>
   5f540:	01001004 	movi	r4,64
   5f544:	20c7c83a 	sub	r3,r4,r3
   5f548:	88e2983a 	sll	r17,r17,r3
   5f54c:	8ca4b03a 	or	r18,r17,r18
   5f550:	9004c03a 	cmpne	r2,r18,zero
   5f554:	2884b03a 	or	r2,r5,r2
   5f558:	144001cc 	andi	r17,r2,7
   5f55c:	88000d1e 	bne	r17,zero,5f594 <__muldf3+0x834>
   5f560:	0021883a 	mov	r16,zero
   5f564:	102cd0fa 	srli	r22,r2,3
   5f568:	3027883a 	mov	r19,r6
   5f56c:	0005883a 	mov	r2,zero
   5f570:	b46cb03a 	or	r22,r22,r17
   5f574:	003e5906 	br	5eedc <__alt_data_end+0xfffdeedc>
   5f578:	1007883a 	mov	r3,r2
   5f57c:	0023883a 	mov	r17,zero
   5f580:	8820927a 	slli	r16,r17,9
   5f584:	1805883a 	mov	r2,r3
   5f588:	8822977a 	slli	r17,r17,29
   5f58c:	8020d33a 	srli	r16,r16,12
   5f590:	003ff406 	br	5f564 <__alt_data_end+0xfffdf564>
   5f594:	10c003cc 	andi	r3,r2,15
   5f598:	01000104 	movi	r4,4
   5f59c:	193ff626 	beq	r3,r4,5f578 <__alt_data_end+0xfffdf578>
   5f5a0:	0023883a 	mov	r17,zero
   5f5a4:	003fd506 	br	5f4fc <__alt_data_end+0xfffdf4fc>
   5f5a8:	0023883a 	mov	r17,zero
   5f5ac:	003fe706 	br	5f54c <__alt_data_end+0xfffdf54c>
   5f5b0:	00800434 	movhi	r2,16
   5f5b4:	8c000234 	orhi	r16,r17,8
   5f5b8:	10bfffc4 	addi	r2,r2,-1
   5f5bc:	3027883a 	mov	r19,r6
   5f5c0:	80a0703a 	and	r16,r16,r2
   5f5c4:	902d883a 	mov	r22,r18
   5f5c8:	003eac06 	br	5f07c <__alt_data_end+0xfffdf07c>

0005f5cc <__subdf3>:
   5f5cc:	02000434 	movhi	r8,16
   5f5d0:	423fffc4 	addi	r8,r8,-1
   5f5d4:	defffb04 	addi	sp,sp,-20
   5f5d8:	2a14703a 	and	r10,r5,r8
   5f5dc:	3812d53a 	srli	r9,r7,20
   5f5e0:	3a10703a 	and	r8,r7,r8
   5f5e4:	2006d77a 	srli	r3,r4,29
   5f5e8:	3004d77a 	srli	r2,r6,29
   5f5ec:	dc000015 	stw	r16,0(sp)
   5f5f0:	501490fa 	slli	r10,r10,3
   5f5f4:	2820d53a 	srli	r16,r5,20
   5f5f8:	401090fa 	slli	r8,r8,3
   5f5fc:	dc800215 	stw	r18,8(sp)
   5f600:	dc400115 	stw	r17,4(sp)
   5f604:	dfc00415 	stw	ra,16(sp)
   5f608:	202290fa 	slli	r17,r4,3
   5f60c:	dcc00315 	stw	r19,12(sp)
   5f610:	4a41ffcc 	andi	r9,r9,2047
   5f614:	0101ffc4 	movi	r4,2047
   5f618:	2824d7fa 	srli	r18,r5,31
   5f61c:	8401ffcc 	andi	r16,r16,2047
   5f620:	50c6b03a 	or	r3,r10,r3
   5f624:	380ed7fa 	srli	r7,r7,31
   5f628:	408ab03a 	or	r5,r8,r2
   5f62c:	300c90fa 	slli	r6,r6,3
   5f630:	49009626 	beq	r9,r4,5f88c <__subdf3+0x2c0>
   5f634:	39c0005c 	xori	r7,r7,1
   5f638:	8245c83a 	sub	r2,r16,r9
   5f63c:	3c807426 	beq	r7,r18,5f810 <__subdf3+0x244>
   5f640:	0080af0e 	bge	zero,r2,5f900 <__subdf3+0x334>
   5f644:	48002a1e 	bne	r9,zero,5f6f0 <__subdf3+0x124>
   5f648:	2988b03a 	or	r4,r5,r6
   5f64c:	20009a1e 	bne	r4,zero,5f8b8 <__subdf3+0x2ec>
   5f650:	888001cc 	andi	r2,r17,7
   5f654:	10000726 	beq	r2,zero,5f674 <__subdf3+0xa8>
   5f658:	888003cc 	andi	r2,r17,15
   5f65c:	01000104 	movi	r4,4
   5f660:	11000426 	beq	r2,r4,5f674 <__subdf3+0xa8>
   5f664:	890b883a 	add	r5,r17,r4
   5f668:	2c63803a 	cmpltu	r17,r5,r17
   5f66c:	1c47883a 	add	r3,r3,r17
   5f670:	2823883a 	mov	r17,r5
   5f674:	1880202c 	andhi	r2,r3,128
   5f678:	10005926 	beq	r2,zero,5f7e0 <__subdf3+0x214>
   5f67c:	84000044 	addi	r16,r16,1
   5f680:	0081ffc4 	movi	r2,2047
   5f684:	8080be26 	beq	r16,r2,5f980 <__subdf3+0x3b4>
   5f688:	017fe034 	movhi	r5,65408
   5f68c:	297fffc4 	addi	r5,r5,-1
   5f690:	1946703a 	and	r3,r3,r5
   5f694:	1804977a 	slli	r2,r3,29
   5f698:	1806927a 	slli	r3,r3,9
   5f69c:	8822d0fa 	srli	r17,r17,3
   5f6a0:	8401ffcc 	andi	r16,r16,2047
   5f6a4:	180ad33a 	srli	r5,r3,12
   5f6a8:	9100004c 	andi	r4,r18,1
   5f6ac:	1444b03a 	or	r2,r2,r17
   5f6b0:	80c1ffcc 	andi	r3,r16,2047
   5f6b4:	1820953a 	slli	r16,r3,20
   5f6b8:	20c03fcc 	andi	r3,r4,255
   5f6bc:	180897fa 	slli	r4,r3,31
   5f6c0:	00c00434 	movhi	r3,16
   5f6c4:	18ffffc4 	addi	r3,r3,-1
   5f6c8:	28c6703a 	and	r3,r5,r3
   5f6cc:	1c06b03a 	or	r3,r3,r16
   5f6d0:	1906b03a 	or	r3,r3,r4
   5f6d4:	dfc00417 	ldw	ra,16(sp)
   5f6d8:	dcc00317 	ldw	r19,12(sp)
   5f6dc:	dc800217 	ldw	r18,8(sp)
   5f6e0:	dc400117 	ldw	r17,4(sp)
   5f6e4:	dc000017 	ldw	r16,0(sp)
   5f6e8:	dec00504 	addi	sp,sp,20
   5f6ec:	f800283a 	ret
   5f6f0:	0101ffc4 	movi	r4,2047
   5f6f4:	813fd626 	beq	r16,r4,5f650 <__alt_data_end+0xfffdf650>
   5f6f8:	29402034 	orhi	r5,r5,128
   5f6fc:	01000e04 	movi	r4,56
   5f700:	2080a316 	blt	r4,r2,5f990 <__subdf3+0x3c4>
   5f704:	010007c4 	movi	r4,31
   5f708:	2080c616 	blt	r4,r2,5fa24 <__subdf3+0x458>
   5f70c:	01000804 	movi	r4,32
   5f710:	2089c83a 	sub	r4,r4,r2
   5f714:	2910983a 	sll	r8,r5,r4
   5f718:	308ed83a 	srl	r7,r6,r2
   5f71c:	3108983a 	sll	r4,r6,r4
   5f720:	2884d83a 	srl	r2,r5,r2
   5f724:	41ccb03a 	or	r6,r8,r7
   5f728:	2008c03a 	cmpne	r4,r4,zero
   5f72c:	310cb03a 	or	r6,r6,r4
   5f730:	898dc83a 	sub	r6,r17,r6
   5f734:	89a3803a 	cmpltu	r17,r17,r6
   5f738:	1887c83a 	sub	r3,r3,r2
   5f73c:	1c47c83a 	sub	r3,r3,r17
   5f740:	3023883a 	mov	r17,r6
   5f744:	1880202c 	andhi	r2,r3,128
   5f748:	10002326 	beq	r2,zero,5f7d8 <__subdf3+0x20c>
   5f74c:	04c02034 	movhi	r19,128
   5f750:	9cffffc4 	addi	r19,r19,-1
   5f754:	1ce6703a 	and	r19,r3,r19
   5f758:	98007a26 	beq	r19,zero,5f944 <__subdf3+0x378>
   5f75c:	9809883a 	mov	r4,r19
   5f760:	004f5580 	call	4f558 <__clzsi2>
   5f764:	113ffe04 	addi	r4,r2,-8
   5f768:	00c007c4 	movi	r3,31
   5f76c:	19007b16 	blt	r3,r4,5f95c <__subdf3+0x390>
   5f770:	00800804 	movi	r2,32
   5f774:	1105c83a 	sub	r2,r2,r4
   5f778:	8884d83a 	srl	r2,r17,r2
   5f77c:	9906983a 	sll	r3,r19,r4
   5f780:	8922983a 	sll	r17,r17,r4
   5f784:	10c4b03a 	or	r2,r2,r3
   5f788:	24007816 	blt	r4,r16,5f96c <__subdf3+0x3a0>
   5f78c:	2421c83a 	sub	r16,r4,r16
   5f790:	80c00044 	addi	r3,r16,1
   5f794:	010007c4 	movi	r4,31
   5f798:	20c09516 	blt	r4,r3,5f9f0 <__subdf3+0x424>
   5f79c:	01400804 	movi	r5,32
   5f7a0:	28cbc83a 	sub	r5,r5,r3
   5f7a4:	88c8d83a 	srl	r4,r17,r3
   5f7a8:	8962983a 	sll	r17,r17,r5
   5f7ac:	114a983a 	sll	r5,r2,r5
   5f7b0:	10c6d83a 	srl	r3,r2,r3
   5f7b4:	8804c03a 	cmpne	r2,r17,zero
   5f7b8:	290ab03a 	or	r5,r5,r4
   5f7bc:	28a2b03a 	or	r17,r5,r2
   5f7c0:	0021883a 	mov	r16,zero
   5f7c4:	003fa206 	br	5f650 <__alt_data_end+0xfffdf650>
   5f7c8:	2090b03a 	or	r8,r4,r2
   5f7cc:	40018e26 	beq	r8,zero,5fe08 <__subdf3+0x83c>
   5f7d0:	1007883a 	mov	r3,r2
   5f7d4:	2023883a 	mov	r17,r4
   5f7d8:	888001cc 	andi	r2,r17,7
   5f7dc:	103f9e1e 	bne	r2,zero,5f658 <__alt_data_end+0xfffdf658>
   5f7e0:	1804977a 	slli	r2,r3,29
   5f7e4:	8822d0fa 	srli	r17,r17,3
   5f7e8:	1810d0fa 	srli	r8,r3,3
   5f7ec:	9100004c 	andi	r4,r18,1
   5f7f0:	1444b03a 	or	r2,r2,r17
   5f7f4:	00c1ffc4 	movi	r3,2047
   5f7f8:	80c02826 	beq	r16,r3,5f89c <__subdf3+0x2d0>
   5f7fc:	01400434 	movhi	r5,16
   5f800:	297fffc4 	addi	r5,r5,-1
   5f804:	80e0703a 	and	r16,r16,r3
   5f808:	414a703a 	and	r5,r8,r5
   5f80c:	003fa806 	br	5f6b0 <__alt_data_end+0xfffdf6b0>
   5f810:	0080630e 	bge	zero,r2,5f9a0 <__subdf3+0x3d4>
   5f814:	48003026 	beq	r9,zero,5f8d8 <__subdf3+0x30c>
   5f818:	0101ffc4 	movi	r4,2047
   5f81c:	813f8c26 	beq	r16,r4,5f650 <__alt_data_end+0xfffdf650>
   5f820:	29402034 	orhi	r5,r5,128
   5f824:	01000e04 	movi	r4,56
   5f828:	2080a90e 	bge	r4,r2,5fad0 <__subdf3+0x504>
   5f82c:	298cb03a 	or	r6,r5,r6
   5f830:	3012c03a 	cmpne	r9,r6,zero
   5f834:	0005883a 	mov	r2,zero
   5f838:	4c53883a 	add	r9,r9,r17
   5f83c:	4c63803a 	cmpltu	r17,r9,r17
   5f840:	10c7883a 	add	r3,r2,r3
   5f844:	88c7883a 	add	r3,r17,r3
   5f848:	4823883a 	mov	r17,r9
   5f84c:	1880202c 	andhi	r2,r3,128
   5f850:	1000d026 	beq	r2,zero,5fb94 <__subdf3+0x5c8>
   5f854:	84000044 	addi	r16,r16,1
   5f858:	0081ffc4 	movi	r2,2047
   5f85c:	8080fe26 	beq	r16,r2,5fc58 <__subdf3+0x68c>
   5f860:	00bfe034 	movhi	r2,65408
   5f864:	10bfffc4 	addi	r2,r2,-1
   5f868:	1886703a 	and	r3,r3,r2
   5f86c:	880ad07a 	srli	r5,r17,1
   5f870:	180497fa 	slli	r2,r3,31
   5f874:	8900004c 	andi	r4,r17,1
   5f878:	2922b03a 	or	r17,r5,r4
   5f87c:	1806d07a 	srli	r3,r3,1
   5f880:	1462b03a 	or	r17,r2,r17
   5f884:	3825883a 	mov	r18,r7
   5f888:	003f7106 	br	5f650 <__alt_data_end+0xfffdf650>
   5f88c:	2984b03a 	or	r2,r5,r6
   5f890:	103f6826 	beq	r2,zero,5f634 <__alt_data_end+0xfffdf634>
   5f894:	39c03fcc 	andi	r7,r7,255
   5f898:	003f6706 	br	5f638 <__alt_data_end+0xfffdf638>
   5f89c:	4086b03a 	or	r3,r8,r2
   5f8a0:	18015226 	beq	r3,zero,5fdec <__subdf3+0x820>
   5f8a4:	00c00434 	movhi	r3,16
   5f8a8:	41400234 	orhi	r5,r8,8
   5f8ac:	18ffffc4 	addi	r3,r3,-1
   5f8b0:	28ca703a 	and	r5,r5,r3
   5f8b4:	003f7e06 	br	5f6b0 <__alt_data_end+0xfffdf6b0>
   5f8b8:	10bfffc4 	addi	r2,r2,-1
   5f8bc:	1000491e 	bne	r2,zero,5f9e4 <__subdf3+0x418>
   5f8c0:	898fc83a 	sub	r7,r17,r6
   5f8c4:	89e3803a 	cmpltu	r17,r17,r7
   5f8c8:	1947c83a 	sub	r3,r3,r5
   5f8cc:	1c47c83a 	sub	r3,r3,r17
   5f8d0:	3823883a 	mov	r17,r7
   5f8d4:	003f9b06 	br	5f744 <__alt_data_end+0xfffdf744>
   5f8d8:	2988b03a 	or	r4,r5,r6
   5f8dc:	203f5c26 	beq	r4,zero,5f650 <__alt_data_end+0xfffdf650>
   5f8e0:	10bfffc4 	addi	r2,r2,-1
   5f8e4:	1000931e 	bne	r2,zero,5fb34 <__subdf3+0x568>
   5f8e8:	898d883a 	add	r6,r17,r6
   5f8ec:	3463803a 	cmpltu	r17,r6,r17
   5f8f0:	1947883a 	add	r3,r3,r5
   5f8f4:	88c7883a 	add	r3,r17,r3
   5f8f8:	3023883a 	mov	r17,r6
   5f8fc:	003fd306 	br	5f84c <__alt_data_end+0xfffdf84c>
   5f900:	1000541e 	bne	r2,zero,5fa54 <__subdf3+0x488>
   5f904:	80800044 	addi	r2,r16,1
   5f908:	1081ffcc 	andi	r2,r2,2047
   5f90c:	01000044 	movi	r4,1
   5f910:	2080a20e 	bge	r4,r2,5fb9c <__subdf3+0x5d0>
   5f914:	8989c83a 	sub	r4,r17,r6
   5f918:	8905803a 	cmpltu	r2,r17,r4
   5f91c:	1967c83a 	sub	r19,r3,r5
   5f920:	98a7c83a 	sub	r19,r19,r2
   5f924:	9880202c 	andhi	r2,r19,128
   5f928:	10006326 	beq	r2,zero,5fab8 <__subdf3+0x4ec>
   5f92c:	3463c83a 	sub	r17,r6,r17
   5f930:	28c7c83a 	sub	r3,r5,r3
   5f934:	344d803a 	cmpltu	r6,r6,r17
   5f938:	19a7c83a 	sub	r19,r3,r6
   5f93c:	3825883a 	mov	r18,r7
   5f940:	983f861e 	bne	r19,zero,5f75c <__alt_data_end+0xfffdf75c>
   5f944:	8809883a 	mov	r4,r17
   5f948:	004f5580 	call	4f558 <__clzsi2>
   5f94c:	10800804 	addi	r2,r2,32
   5f950:	113ffe04 	addi	r4,r2,-8
   5f954:	00c007c4 	movi	r3,31
   5f958:	193f850e 	bge	r3,r4,5f770 <__alt_data_end+0xfffdf770>
   5f95c:	10bff604 	addi	r2,r2,-40
   5f960:	8884983a 	sll	r2,r17,r2
   5f964:	0023883a 	mov	r17,zero
   5f968:	243f880e 	bge	r4,r16,5f78c <__alt_data_end+0xfffdf78c>
   5f96c:	00ffe034 	movhi	r3,65408
   5f970:	18ffffc4 	addi	r3,r3,-1
   5f974:	8121c83a 	sub	r16,r16,r4
   5f978:	10c6703a 	and	r3,r2,r3
   5f97c:	003f3406 	br	5f650 <__alt_data_end+0xfffdf650>
   5f980:	9100004c 	andi	r4,r18,1
   5f984:	000b883a 	mov	r5,zero
   5f988:	0005883a 	mov	r2,zero
   5f98c:	003f4806 	br	5f6b0 <__alt_data_end+0xfffdf6b0>
   5f990:	298cb03a 	or	r6,r5,r6
   5f994:	300cc03a 	cmpne	r6,r6,zero
   5f998:	0005883a 	mov	r2,zero
   5f99c:	003f6406 	br	5f730 <__alt_data_end+0xfffdf730>
   5f9a0:	10009a1e 	bne	r2,zero,5fc0c <__subdf3+0x640>
   5f9a4:	82400044 	addi	r9,r16,1
   5f9a8:	4881ffcc 	andi	r2,r9,2047
   5f9ac:	02800044 	movi	r10,1
   5f9b0:	5080670e 	bge	r10,r2,5fb50 <__subdf3+0x584>
   5f9b4:	0081ffc4 	movi	r2,2047
   5f9b8:	4880af26 	beq	r9,r2,5fc78 <__subdf3+0x6ac>
   5f9bc:	898d883a 	add	r6,r17,r6
   5f9c0:	1945883a 	add	r2,r3,r5
   5f9c4:	3447803a 	cmpltu	r3,r6,r17
   5f9c8:	1887883a 	add	r3,r3,r2
   5f9cc:	182297fa 	slli	r17,r3,31
   5f9d0:	300cd07a 	srli	r6,r6,1
   5f9d4:	1806d07a 	srli	r3,r3,1
   5f9d8:	4821883a 	mov	r16,r9
   5f9dc:	89a2b03a 	or	r17,r17,r6
   5f9e0:	003f1b06 	br	5f650 <__alt_data_end+0xfffdf650>
   5f9e4:	0101ffc4 	movi	r4,2047
   5f9e8:	813f441e 	bne	r16,r4,5f6fc <__alt_data_end+0xfffdf6fc>
   5f9ec:	003f1806 	br	5f650 <__alt_data_end+0xfffdf650>
   5f9f0:	843ff844 	addi	r16,r16,-31
   5f9f4:	01400804 	movi	r5,32
   5f9f8:	1408d83a 	srl	r4,r2,r16
   5f9fc:	19405026 	beq	r3,r5,5fb40 <__subdf3+0x574>
   5fa00:	01401004 	movi	r5,64
   5fa04:	28c7c83a 	sub	r3,r5,r3
   5fa08:	10c4983a 	sll	r2,r2,r3
   5fa0c:	88a2b03a 	or	r17,r17,r2
   5fa10:	8822c03a 	cmpne	r17,r17,zero
   5fa14:	2462b03a 	or	r17,r4,r17
   5fa18:	0007883a 	mov	r3,zero
   5fa1c:	0021883a 	mov	r16,zero
   5fa20:	003f6d06 	br	5f7d8 <__alt_data_end+0xfffdf7d8>
   5fa24:	11fff804 	addi	r7,r2,-32
   5fa28:	01000804 	movi	r4,32
   5fa2c:	29ced83a 	srl	r7,r5,r7
   5fa30:	11004526 	beq	r2,r4,5fb48 <__subdf3+0x57c>
   5fa34:	01001004 	movi	r4,64
   5fa38:	2089c83a 	sub	r4,r4,r2
   5fa3c:	2904983a 	sll	r2,r5,r4
   5fa40:	118cb03a 	or	r6,r2,r6
   5fa44:	300cc03a 	cmpne	r6,r6,zero
   5fa48:	398cb03a 	or	r6,r7,r6
   5fa4c:	0005883a 	mov	r2,zero
   5fa50:	003f3706 	br	5f730 <__alt_data_end+0xfffdf730>
   5fa54:	80002a26 	beq	r16,zero,5fb00 <__subdf3+0x534>
   5fa58:	0101ffc4 	movi	r4,2047
   5fa5c:	49006626 	beq	r9,r4,5fbf8 <__subdf3+0x62c>
   5fa60:	0085c83a 	sub	r2,zero,r2
   5fa64:	18c02034 	orhi	r3,r3,128
   5fa68:	01000e04 	movi	r4,56
   5fa6c:	20807e16 	blt	r4,r2,5fc68 <__subdf3+0x69c>
   5fa70:	010007c4 	movi	r4,31
   5fa74:	2080e716 	blt	r4,r2,5fe14 <__subdf3+0x848>
   5fa78:	01000804 	movi	r4,32
   5fa7c:	2089c83a 	sub	r4,r4,r2
   5fa80:	1914983a 	sll	r10,r3,r4
   5fa84:	8890d83a 	srl	r8,r17,r2
   5fa88:	8908983a 	sll	r4,r17,r4
   5fa8c:	1884d83a 	srl	r2,r3,r2
   5fa90:	5222b03a 	or	r17,r10,r8
   5fa94:	2006c03a 	cmpne	r3,r4,zero
   5fa98:	88e2b03a 	or	r17,r17,r3
   5fa9c:	3463c83a 	sub	r17,r6,r17
   5faa0:	2885c83a 	sub	r2,r5,r2
   5faa4:	344d803a 	cmpltu	r6,r6,r17
   5faa8:	1187c83a 	sub	r3,r2,r6
   5faac:	4821883a 	mov	r16,r9
   5fab0:	3825883a 	mov	r18,r7
   5fab4:	003f2306 	br	5f744 <__alt_data_end+0xfffdf744>
   5fab8:	24d0b03a 	or	r8,r4,r19
   5fabc:	40001b1e 	bne	r8,zero,5fb2c <__subdf3+0x560>
   5fac0:	0005883a 	mov	r2,zero
   5fac4:	0009883a 	mov	r4,zero
   5fac8:	0021883a 	mov	r16,zero
   5facc:	003f4906 	br	5f7f4 <__alt_data_end+0xfffdf7f4>
   5fad0:	010007c4 	movi	r4,31
   5fad4:	20803a16 	blt	r4,r2,5fbc0 <__subdf3+0x5f4>
   5fad8:	01000804 	movi	r4,32
   5fadc:	2089c83a 	sub	r4,r4,r2
   5fae0:	2912983a 	sll	r9,r5,r4
   5fae4:	3090d83a 	srl	r8,r6,r2
   5fae8:	3108983a 	sll	r4,r6,r4
   5faec:	2884d83a 	srl	r2,r5,r2
   5faf0:	4a12b03a 	or	r9,r9,r8
   5faf4:	2008c03a 	cmpne	r4,r4,zero
   5faf8:	4912b03a 	or	r9,r9,r4
   5fafc:	003f4e06 	br	5f838 <__alt_data_end+0xfffdf838>
   5fb00:	1c48b03a 	or	r4,r3,r17
   5fb04:	20003c26 	beq	r4,zero,5fbf8 <__subdf3+0x62c>
   5fb08:	0084303a 	nor	r2,zero,r2
   5fb0c:	1000381e 	bne	r2,zero,5fbf0 <__subdf3+0x624>
   5fb10:	3463c83a 	sub	r17,r6,r17
   5fb14:	28c5c83a 	sub	r2,r5,r3
   5fb18:	344d803a 	cmpltu	r6,r6,r17
   5fb1c:	1187c83a 	sub	r3,r2,r6
   5fb20:	4821883a 	mov	r16,r9
   5fb24:	3825883a 	mov	r18,r7
   5fb28:	003f0606 	br	5f744 <__alt_data_end+0xfffdf744>
   5fb2c:	2023883a 	mov	r17,r4
   5fb30:	003f0906 	br	5f758 <__alt_data_end+0xfffdf758>
   5fb34:	0101ffc4 	movi	r4,2047
   5fb38:	813f3a1e 	bne	r16,r4,5f824 <__alt_data_end+0xfffdf824>
   5fb3c:	003ec406 	br	5f650 <__alt_data_end+0xfffdf650>
   5fb40:	0005883a 	mov	r2,zero
   5fb44:	003fb106 	br	5fa0c <__alt_data_end+0xfffdfa0c>
   5fb48:	0005883a 	mov	r2,zero
   5fb4c:	003fbc06 	br	5fa40 <__alt_data_end+0xfffdfa40>
   5fb50:	1c44b03a 	or	r2,r3,r17
   5fb54:	80008e1e 	bne	r16,zero,5fd90 <__subdf3+0x7c4>
   5fb58:	1000c826 	beq	r2,zero,5fe7c <__subdf3+0x8b0>
   5fb5c:	2984b03a 	or	r2,r5,r6
   5fb60:	103ebb26 	beq	r2,zero,5f650 <__alt_data_end+0xfffdf650>
   5fb64:	8989883a 	add	r4,r17,r6
   5fb68:	1945883a 	add	r2,r3,r5
   5fb6c:	2447803a 	cmpltu	r3,r4,r17
   5fb70:	1887883a 	add	r3,r3,r2
   5fb74:	1880202c 	andhi	r2,r3,128
   5fb78:	2023883a 	mov	r17,r4
   5fb7c:	103f1626 	beq	r2,zero,5f7d8 <__alt_data_end+0xfffdf7d8>
   5fb80:	00bfe034 	movhi	r2,65408
   5fb84:	10bfffc4 	addi	r2,r2,-1
   5fb88:	5021883a 	mov	r16,r10
   5fb8c:	1886703a 	and	r3,r3,r2
   5fb90:	003eaf06 	br	5f650 <__alt_data_end+0xfffdf650>
   5fb94:	3825883a 	mov	r18,r7
   5fb98:	003f0f06 	br	5f7d8 <__alt_data_end+0xfffdf7d8>
   5fb9c:	1c44b03a 	or	r2,r3,r17
   5fba0:	8000251e 	bne	r16,zero,5fc38 <__subdf3+0x66c>
   5fba4:	1000661e 	bne	r2,zero,5fd40 <__subdf3+0x774>
   5fba8:	2990b03a 	or	r8,r5,r6
   5fbac:	40009626 	beq	r8,zero,5fe08 <__subdf3+0x83c>
   5fbb0:	2807883a 	mov	r3,r5
   5fbb4:	3023883a 	mov	r17,r6
   5fbb8:	3825883a 	mov	r18,r7
   5fbbc:	003ea406 	br	5f650 <__alt_data_end+0xfffdf650>
   5fbc0:	127ff804 	addi	r9,r2,-32
   5fbc4:	01000804 	movi	r4,32
   5fbc8:	2a52d83a 	srl	r9,r5,r9
   5fbcc:	11008c26 	beq	r2,r4,5fe00 <__subdf3+0x834>
   5fbd0:	01001004 	movi	r4,64
   5fbd4:	2085c83a 	sub	r2,r4,r2
   5fbd8:	2884983a 	sll	r2,r5,r2
   5fbdc:	118cb03a 	or	r6,r2,r6
   5fbe0:	300cc03a 	cmpne	r6,r6,zero
   5fbe4:	4992b03a 	or	r9,r9,r6
   5fbe8:	0005883a 	mov	r2,zero
   5fbec:	003f1206 	br	5f838 <__alt_data_end+0xfffdf838>
   5fbf0:	0101ffc4 	movi	r4,2047
   5fbf4:	493f9c1e 	bne	r9,r4,5fa68 <__alt_data_end+0xfffdfa68>
   5fbf8:	2807883a 	mov	r3,r5
   5fbfc:	3023883a 	mov	r17,r6
   5fc00:	4821883a 	mov	r16,r9
   5fc04:	3825883a 	mov	r18,r7
   5fc08:	003e9106 	br	5f650 <__alt_data_end+0xfffdf650>
   5fc0c:	80001f1e 	bne	r16,zero,5fc8c <__subdf3+0x6c0>
   5fc10:	1c48b03a 	or	r4,r3,r17
   5fc14:	20005a26 	beq	r4,zero,5fd80 <__subdf3+0x7b4>
   5fc18:	0084303a 	nor	r2,zero,r2
   5fc1c:	1000561e 	bne	r2,zero,5fd78 <__subdf3+0x7ac>
   5fc20:	89a3883a 	add	r17,r17,r6
   5fc24:	1945883a 	add	r2,r3,r5
   5fc28:	898d803a 	cmpltu	r6,r17,r6
   5fc2c:	3087883a 	add	r3,r6,r2
   5fc30:	4821883a 	mov	r16,r9
   5fc34:	003f0506 	br	5f84c <__alt_data_end+0xfffdf84c>
   5fc38:	10002b1e 	bne	r2,zero,5fce8 <__subdf3+0x71c>
   5fc3c:	2984b03a 	or	r2,r5,r6
   5fc40:	10008026 	beq	r2,zero,5fe44 <__subdf3+0x878>
   5fc44:	2807883a 	mov	r3,r5
   5fc48:	3023883a 	mov	r17,r6
   5fc4c:	3825883a 	mov	r18,r7
   5fc50:	0401ffc4 	movi	r16,2047
   5fc54:	003e7e06 	br	5f650 <__alt_data_end+0xfffdf650>
   5fc58:	3809883a 	mov	r4,r7
   5fc5c:	0011883a 	mov	r8,zero
   5fc60:	0005883a 	mov	r2,zero
   5fc64:	003ee306 	br	5f7f4 <__alt_data_end+0xfffdf7f4>
   5fc68:	1c62b03a 	or	r17,r3,r17
   5fc6c:	8822c03a 	cmpne	r17,r17,zero
   5fc70:	0005883a 	mov	r2,zero
   5fc74:	003f8906 	br	5fa9c <__alt_data_end+0xfffdfa9c>
   5fc78:	3809883a 	mov	r4,r7
   5fc7c:	4821883a 	mov	r16,r9
   5fc80:	0011883a 	mov	r8,zero
   5fc84:	0005883a 	mov	r2,zero
   5fc88:	003eda06 	br	5f7f4 <__alt_data_end+0xfffdf7f4>
   5fc8c:	0101ffc4 	movi	r4,2047
   5fc90:	49003b26 	beq	r9,r4,5fd80 <__subdf3+0x7b4>
   5fc94:	0085c83a 	sub	r2,zero,r2
   5fc98:	18c02034 	orhi	r3,r3,128
   5fc9c:	01000e04 	movi	r4,56
   5fca0:	20806e16 	blt	r4,r2,5fe5c <__subdf3+0x890>
   5fca4:	010007c4 	movi	r4,31
   5fca8:	20807716 	blt	r4,r2,5fe88 <__subdf3+0x8bc>
   5fcac:	01000804 	movi	r4,32
   5fcb0:	2089c83a 	sub	r4,r4,r2
   5fcb4:	1914983a 	sll	r10,r3,r4
   5fcb8:	8890d83a 	srl	r8,r17,r2
   5fcbc:	8908983a 	sll	r4,r17,r4
   5fcc0:	1884d83a 	srl	r2,r3,r2
   5fcc4:	5222b03a 	or	r17,r10,r8
   5fcc8:	2006c03a 	cmpne	r3,r4,zero
   5fccc:	88e2b03a 	or	r17,r17,r3
   5fcd0:	89a3883a 	add	r17,r17,r6
   5fcd4:	1145883a 	add	r2,r2,r5
   5fcd8:	898d803a 	cmpltu	r6,r17,r6
   5fcdc:	3087883a 	add	r3,r6,r2
   5fce0:	4821883a 	mov	r16,r9
   5fce4:	003ed906 	br	5f84c <__alt_data_end+0xfffdf84c>
   5fce8:	2984b03a 	or	r2,r5,r6
   5fcec:	10004226 	beq	r2,zero,5fdf8 <__subdf3+0x82c>
   5fcf0:	1808d0fa 	srli	r4,r3,3
   5fcf4:	8822d0fa 	srli	r17,r17,3
   5fcf8:	1806977a 	slli	r3,r3,29
   5fcfc:	2080022c 	andhi	r2,r4,8
   5fd00:	1c62b03a 	or	r17,r3,r17
   5fd04:	10000826 	beq	r2,zero,5fd28 <__subdf3+0x75c>
   5fd08:	2812d0fa 	srli	r9,r5,3
   5fd0c:	4880022c 	andhi	r2,r9,8
   5fd10:	1000051e 	bne	r2,zero,5fd28 <__subdf3+0x75c>
   5fd14:	300cd0fa 	srli	r6,r6,3
   5fd18:	2804977a 	slli	r2,r5,29
   5fd1c:	4809883a 	mov	r4,r9
   5fd20:	3825883a 	mov	r18,r7
   5fd24:	11a2b03a 	or	r17,r2,r6
   5fd28:	8806d77a 	srli	r3,r17,29
   5fd2c:	200890fa 	slli	r4,r4,3
   5fd30:	882290fa 	slli	r17,r17,3
   5fd34:	0401ffc4 	movi	r16,2047
   5fd38:	1906b03a 	or	r3,r3,r4
   5fd3c:	003e4406 	br	5f650 <__alt_data_end+0xfffdf650>
   5fd40:	2984b03a 	or	r2,r5,r6
   5fd44:	103e4226 	beq	r2,zero,5f650 <__alt_data_end+0xfffdf650>
   5fd48:	8989c83a 	sub	r4,r17,r6
   5fd4c:	8911803a 	cmpltu	r8,r17,r4
   5fd50:	1945c83a 	sub	r2,r3,r5
   5fd54:	1205c83a 	sub	r2,r2,r8
   5fd58:	1200202c 	andhi	r8,r2,128
   5fd5c:	403e9a26 	beq	r8,zero,5f7c8 <__alt_data_end+0xfffdf7c8>
   5fd60:	3463c83a 	sub	r17,r6,r17
   5fd64:	28c5c83a 	sub	r2,r5,r3
   5fd68:	344d803a 	cmpltu	r6,r6,r17
   5fd6c:	1187c83a 	sub	r3,r2,r6
   5fd70:	3825883a 	mov	r18,r7
   5fd74:	003e3606 	br	5f650 <__alt_data_end+0xfffdf650>
   5fd78:	0101ffc4 	movi	r4,2047
   5fd7c:	493fc71e 	bne	r9,r4,5fc9c <__alt_data_end+0xfffdfc9c>
   5fd80:	2807883a 	mov	r3,r5
   5fd84:	3023883a 	mov	r17,r6
   5fd88:	4821883a 	mov	r16,r9
   5fd8c:	003e3006 	br	5f650 <__alt_data_end+0xfffdf650>
   5fd90:	10003626 	beq	r2,zero,5fe6c <__subdf3+0x8a0>
   5fd94:	2984b03a 	or	r2,r5,r6
   5fd98:	10001726 	beq	r2,zero,5fdf8 <__subdf3+0x82c>
   5fd9c:	1808d0fa 	srli	r4,r3,3
   5fda0:	8822d0fa 	srli	r17,r17,3
   5fda4:	1806977a 	slli	r3,r3,29
   5fda8:	2080022c 	andhi	r2,r4,8
   5fdac:	1c62b03a 	or	r17,r3,r17
   5fdb0:	10000726 	beq	r2,zero,5fdd0 <__subdf3+0x804>
   5fdb4:	2812d0fa 	srli	r9,r5,3
   5fdb8:	4880022c 	andhi	r2,r9,8
   5fdbc:	1000041e 	bne	r2,zero,5fdd0 <__subdf3+0x804>
   5fdc0:	300cd0fa 	srli	r6,r6,3
   5fdc4:	2804977a 	slli	r2,r5,29
   5fdc8:	4809883a 	mov	r4,r9
   5fdcc:	11a2b03a 	or	r17,r2,r6
   5fdd0:	8806d77a 	srli	r3,r17,29
   5fdd4:	200890fa 	slli	r4,r4,3
   5fdd8:	882290fa 	slli	r17,r17,3
   5fddc:	3825883a 	mov	r18,r7
   5fde0:	1906b03a 	or	r3,r3,r4
   5fde4:	0401ffc4 	movi	r16,2047
   5fde8:	003e1906 	br	5f650 <__alt_data_end+0xfffdf650>
   5fdec:	000b883a 	mov	r5,zero
   5fdf0:	0005883a 	mov	r2,zero
   5fdf4:	003e2e06 	br	5f6b0 <__alt_data_end+0xfffdf6b0>
   5fdf8:	0401ffc4 	movi	r16,2047
   5fdfc:	003e1406 	br	5f650 <__alt_data_end+0xfffdf650>
   5fe00:	0005883a 	mov	r2,zero
   5fe04:	003f7506 	br	5fbdc <__alt_data_end+0xfffdfbdc>
   5fe08:	0005883a 	mov	r2,zero
   5fe0c:	0009883a 	mov	r4,zero
   5fe10:	003e7806 	br	5f7f4 <__alt_data_end+0xfffdf7f4>
   5fe14:	123ff804 	addi	r8,r2,-32
   5fe18:	01000804 	movi	r4,32
   5fe1c:	1a10d83a 	srl	r8,r3,r8
   5fe20:	11002526 	beq	r2,r4,5feb8 <__subdf3+0x8ec>
   5fe24:	01001004 	movi	r4,64
   5fe28:	2085c83a 	sub	r2,r4,r2
   5fe2c:	1884983a 	sll	r2,r3,r2
   5fe30:	1444b03a 	or	r2,r2,r17
   5fe34:	1004c03a 	cmpne	r2,r2,zero
   5fe38:	40a2b03a 	or	r17,r8,r2
   5fe3c:	0005883a 	mov	r2,zero
   5fe40:	003f1606 	br	5fa9c <__alt_data_end+0xfffdfa9c>
   5fe44:	02000434 	movhi	r8,16
   5fe48:	0009883a 	mov	r4,zero
   5fe4c:	423fffc4 	addi	r8,r8,-1
   5fe50:	00bfffc4 	movi	r2,-1
   5fe54:	0401ffc4 	movi	r16,2047
   5fe58:	003e6606 	br	5f7f4 <__alt_data_end+0xfffdf7f4>
   5fe5c:	1c62b03a 	or	r17,r3,r17
   5fe60:	8822c03a 	cmpne	r17,r17,zero
   5fe64:	0005883a 	mov	r2,zero
   5fe68:	003f9906 	br	5fcd0 <__alt_data_end+0xfffdfcd0>
   5fe6c:	2807883a 	mov	r3,r5
   5fe70:	3023883a 	mov	r17,r6
   5fe74:	0401ffc4 	movi	r16,2047
   5fe78:	003df506 	br	5f650 <__alt_data_end+0xfffdf650>
   5fe7c:	2807883a 	mov	r3,r5
   5fe80:	3023883a 	mov	r17,r6
   5fe84:	003df206 	br	5f650 <__alt_data_end+0xfffdf650>
   5fe88:	123ff804 	addi	r8,r2,-32
   5fe8c:	01000804 	movi	r4,32
   5fe90:	1a10d83a 	srl	r8,r3,r8
   5fe94:	11000a26 	beq	r2,r4,5fec0 <__subdf3+0x8f4>
   5fe98:	01001004 	movi	r4,64
   5fe9c:	2085c83a 	sub	r2,r4,r2
   5fea0:	1884983a 	sll	r2,r3,r2
   5fea4:	1444b03a 	or	r2,r2,r17
   5fea8:	1004c03a 	cmpne	r2,r2,zero
   5feac:	40a2b03a 	or	r17,r8,r2
   5feb0:	0005883a 	mov	r2,zero
   5feb4:	003f8606 	br	5fcd0 <__alt_data_end+0xfffdfcd0>
   5feb8:	0005883a 	mov	r2,zero
   5febc:	003fdc06 	br	5fe30 <__alt_data_end+0xfffdfe30>
   5fec0:	0005883a 	mov	r2,zero
   5fec4:	003ff706 	br	5fea4 <__alt_data_end+0xfffdfea4>

0005fec8 <__fixdfsi>:
   5fec8:	280cd53a 	srli	r6,r5,20
   5fecc:	00c00434 	movhi	r3,16
   5fed0:	18ffffc4 	addi	r3,r3,-1
   5fed4:	3181ffcc 	andi	r6,r6,2047
   5fed8:	01c0ff84 	movi	r7,1022
   5fedc:	28c6703a 	and	r3,r5,r3
   5fee0:	280ad7fa 	srli	r5,r5,31
   5fee4:	3980120e 	bge	r7,r6,5ff30 <__fixdfsi+0x68>
   5fee8:	00810744 	movi	r2,1053
   5feec:	11800c16 	blt	r2,r6,5ff20 <__fixdfsi+0x58>
   5fef0:	00810cc4 	movi	r2,1075
   5fef4:	1185c83a 	sub	r2,r2,r6
   5fef8:	01c007c4 	movi	r7,31
   5fefc:	18c00434 	orhi	r3,r3,16
   5ff00:	38800d16 	blt	r7,r2,5ff38 <__fixdfsi+0x70>
   5ff04:	31befb44 	addi	r6,r6,-1043
   5ff08:	2084d83a 	srl	r2,r4,r2
   5ff0c:	1986983a 	sll	r3,r3,r6
   5ff10:	1884b03a 	or	r2,r3,r2
   5ff14:	28000726 	beq	r5,zero,5ff34 <__fixdfsi+0x6c>
   5ff18:	0085c83a 	sub	r2,zero,r2
   5ff1c:	f800283a 	ret
   5ff20:	00a00034 	movhi	r2,32768
   5ff24:	10bfffc4 	addi	r2,r2,-1
   5ff28:	2885883a 	add	r2,r5,r2
   5ff2c:	f800283a 	ret
   5ff30:	0005883a 	mov	r2,zero
   5ff34:	f800283a 	ret
   5ff38:	008104c4 	movi	r2,1043
   5ff3c:	1185c83a 	sub	r2,r2,r6
   5ff40:	1884d83a 	srl	r2,r3,r2
   5ff44:	003ff306 	br	5ff14 <__alt_data_end+0xfffdff14>

0005ff48 <__floatsidf>:
   5ff48:	defffd04 	addi	sp,sp,-12
   5ff4c:	dfc00215 	stw	ra,8(sp)
   5ff50:	dc400115 	stw	r17,4(sp)
   5ff54:	dc000015 	stw	r16,0(sp)
   5ff58:	20002b26 	beq	r4,zero,60008 <__floatsidf+0xc0>
   5ff5c:	2023883a 	mov	r17,r4
   5ff60:	2020d7fa 	srli	r16,r4,31
   5ff64:	20002d16 	blt	r4,zero,6001c <__floatsidf+0xd4>
   5ff68:	8809883a 	mov	r4,r17
   5ff6c:	004f5580 	call	4f558 <__clzsi2>
   5ff70:	01410784 	movi	r5,1054
   5ff74:	288bc83a 	sub	r5,r5,r2
   5ff78:	01010cc4 	movi	r4,1075
   5ff7c:	2149c83a 	sub	r4,r4,r5
   5ff80:	00c007c4 	movi	r3,31
   5ff84:	1900160e 	bge	r3,r4,5ffe0 <__floatsidf+0x98>
   5ff88:	00c104c4 	movi	r3,1043
   5ff8c:	1947c83a 	sub	r3,r3,r5
   5ff90:	88c6983a 	sll	r3,r17,r3
   5ff94:	00800434 	movhi	r2,16
   5ff98:	10bfffc4 	addi	r2,r2,-1
   5ff9c:	1886703a 	and	r3,r3,r2
   5ffa0:	2941ffcc 	andi	r5,r5,2047
   5ffa4:	800d883a 	mov	r6,r16
   5ffa8:	0005883a 	mov	r2,zero
   5ffac:	280a953a 	slli	r5,r5,20
   5ffb0:	31803fcc 	andi	r6,r6,255
   5ffb4:	01000434 	movhi	r4,16
   5ffb8:	300c97fa 	slli	r6,r6,31
   5ffbc:	213fffc4 	addi	r4,r4,-1
   5ffc0:	1906703a 	and	r3,r3,r4
   5ffc4:	1946b03a 	or	r3,r3,r5
   5ffc8:	1986b03a 	or	r3,r3,r6
   5ffcc:	dfc00217 	ldw	ra,8(sp)
   5ffd0:	dc400117 	ldw	r17,4(sp)
   5ffd4:	dc000017 	ldw	r16,0(sp)
   5ffd8:	dec00304 	addi	sp,sp,12
   5ffdc:	f800283a 	ret
   5ffe0:	00c002c4 	movi	r3,11
   5ffe4:	1887c83a 	sub	r3,r3,r2
   5ffe8:	88c6d83a 	srl	r3,r17,r3
   5ffec:	8904983a 	sll	r2,r17,r4
   5fff0:	01000434 	movhi	r4,16
   5fff4:	213fffc4 	addi	r4,r4,-1
   5fff8:	2941ffcc 	andi	r5,r5,2047
   5fffc:	1906703a 	and	r3,r3,r4
   60000:	800d883a 	mov	r6,r16
   60004:	003fe906 	br	5ffac <__alt_data_end+0xfffdffac>
   60008:	000d883a 	mov	r6,zero
   6000c:	000b883a 	mov	r5,zero
   60010:	0007883a 	mov	r3,zero
   60014:	0005883a 	mov	r2,zero
   60018:	003fe406 	br	5ffac <__alt_data_end+0xfffdffac>
   6001c:	0123c83a 	sub	r17,zero,r4
   60020:	003fd106 	br	5ff68 <__alt_data_end+0xfffdff68>

00060024 <__floatunsidf>:
   60024:	defffe04 	addi	sp,sp,-8
   60028:	dc000015 	stw	r16,0(sp)
   6002c:	dfc00115 	stw	ra,4(sp)
   60030:	2021883a 	mov	r16,r4
   60034:	20002226 	beq	r4,zero,600c0 <__floatunsidf+0x9c>
   60038:	004f5580 	call	4f558 <__clzsi2>
   6003c:	01010784 	movi	r4,1054
   60040:	2089c83a 	sub	r4,r4,r2
   60044:	01810cc4 	movi	r6,1075
   60048:	310dc83a 	sub	r6,r6,r4
   6004c:	00c007c4 	movi	r3,31
   60050:	1980120e 	bge	r3,r6,6009c <__floatunsidf+0x78>
   60054:	00c104c4 	movi	r3,1043
   60058:	1907c83a 	sub	r3,r3,r4
   6005c:	80ca983a 	sll	r5,r16,r3
   60060:	00800434 	movhi	r2,16
   60064:	10bfffc4 	addi	r2,r2,-1
   60068:	2101ffcc 	andi	r4,r4,2047
   6006c:	0021883a 	mov	r16,zero
   60070:	288a703a 	and	r5,r5,r2
   60074:	2008953a 	slli	r4,r4,20
   60078:	00c00434 	movhi	r3,16
   6007c:	18ffffc4 	addi	r3,r3,-1
   60080:	28c6703a 	and	r3,r5,r3
   60084:	8005883a 	mov	r2,r16
   60088:	1906b03a 	or	r3,r3,r4
   6008c:	dfc00117 	ldw	ra,4(sp)
   60090:	dc000017 	ldw	r16,0(sp)
   60094:	dec00204 	addi	sp,sp,8
   60098:	f800283a 	ret
   6009c:	00c002c4 	movi	r3,11
   600a0:	188bc83a 	sub	r5,r3,r2
   600a4:	814ad83a 	srl	r5,r16,r5
   600a8:	00c00434 	movhi	r3,16
   600ac:	18ffffc4 	addi	r3,r3,-1
   600b0:	81a0983a 	sll	r16,r16,r6
   600b4:	2101ffcc 	andi	r4,r4,2047
   600b8:	28ca703a 	and	r5,r5,r3
   600bc:	003fed06 	br	60074 <__alt_data_end+0xfffe0074>
   600c0:	0009883a 	mov	r4,zero
   600c4:	000b883a 	mov	r5,zero
   600c8:	003fea06 	br	60074 <__alt_data_end+0xfffe0074>

000600cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   600cc:	defffe04 	addi	sp,sp,-8
   600d0:	dfc00115 	stw	ra,4(sp)
   600d4:	df000015 	stw	fp,0(sp)
   600d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   600dc:	d0a5bb17 	ldw	r2,-26900(gp)
   600e0:	10000326 	beq	r2,zero,600f0 <alt_get_errno+0x24>
   600e4:	d0a5bb17 	ldw	r2,-26900(gp)
   600e8:	103ee83a 	callr	r2
   600ec:	00000106 	br	600f4 <alt_get_errno+0x28>
   600f0:	d0b24c04 	addi	r2,gp,-14032
}
   600f4:	e037883a 	mov	sp,fp
   600f8:	dfc00117 	ldw	ra,4(sp)
   600fc:	df000017 	ldw	fp,0(sp)
   60100:	dec00204 	addi	sp,sp,8
   60104:	f800283a 	ret

00060108 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   60108:	defffb04 	addi	sp,sp,-20
   6010c:	dfc00415 	stw	ra,16(sp)
   60110:	df000315 	stw	fp,12(sp)
   60114:	df000304 	addi	fp,sp,12
   60118:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   6011c:	e0bfff17 	ldw	r2,-4(fp)
   60120:	10000816 	blt	r2,zero,60144 <close+0x3c>
   60124:	01400304 	movi	r5,12
   60128:	e13fff17 	ldw	r4,-4(fp)
   6012c:	004dab40 	call	4dab4 <__mulsi3>
   60130:	1007883a 	mov	r3,r2
   60134:	008001f4 	movhi	r2,7
   60138:	10b13c04 	addi	r2,r2,-15120
   6013c:	1885883a 	add	r2,r3,r2
   60140:	00000106 	br	60148 <close+0x40>
   60144:	0005883a 	mov	r2,zero
   60148:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   6014c:	e0bffd17 	ldw	r2,-12(fp)
   60150:	10001926 	beq	r2,zero,601b8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   60154:	e0bffd17 	ldw	r2,-12(fp)
   60158:	10800017 	ldw	r2,0(r2)
   6015c:	10800417 	ldw	r2,16(r2)
   60160:	10000626 	beq	r2,zero,6017c <close+0x74>
   60164:	e0bffd17 	ldw	r2,-12(fp)
   60168:	10800017 	ldw	r2,0(r2)
   6016c:	10800417 	ldw	r2,16(r2)
   60170:	e13ffd17 	ldw	r4,-12(fp)
   60174:	103ee83a 	callr	r2
   60178:	00000106 	br	60180 <close+0x78>
   6017c:	0005883a 	mov	r2,zero
   60180:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   60184:	e13fff17 	ldw	r4,-4(fp)
   60188:	00609b00 	call	609b0 <alt_release_fd>
    if (rval < 0)
   6018c:	e0bffe17 	ldw	r2,-8(fp)
   60190:	1000070e 	bge	r2,zero,601b0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   60194:	00600cc0 	call	600cc <alt_get_errno>
   60198:	1007883a 	mov	r3,r2
   6019c:	e0bffe17 	ldw	r2,-8(fp)
   601a0:	0085c83a 	sub	r2,zero,r2
   601a4:	18800015 	stw	r2,0(r3)
      return -1;
   601a8:	00bfffc4 	movi	r2,-1
   601ac:	00000706 	br	601cc <close+0xc4>
    }
    return 0;
   601b0:	0005883a 	mov	r2,zero
   601b4:	00000506 	br	601cc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   601b8:	00600cc0 	call	600cc <alt_get_errno>
   601bc:	1007883a 	mov	r3,r2
   601c0:	00801444 	movi	r2,81
   601c4:	18800015 	stw	r2,0(r3)
    return -1;
   601c8:	00bfffc4 	movi	r2,-1
  }
}
   601cc:	e037883a 	mov	sp,fp
   601d0:	dfc00117 	ldw	ra,4(sp)
   601d4:	df000017 	ldw	fp,0(sp)
   601d8:	dec00204 	addi	sp,sp,8
   601dc:	f800283a 	ret

000601e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   601e0:	defffc04 	addi	sp,sp,-16
   601e4:	df000315 	stw	fp,12(sp)
   601e8:	df000304 	addi	fp,sp,12
   601ec:	e13ffd15 	stw	r4,-12(fp)
   601f0:	e17ffe15 	stw	r5,-8(fp)
   601f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   601f8:	e0bfff17 	ldw	r2,-4(fp)
}
   601fc:	e037883a 	mov	sp,fp
   60200:	df000017 	ldw	fp,0(sp)
   60204:	dec00104 	addi	sp,sp,4
   60208:	f800283a 	ret

0006020c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   6020c:	defffd04 	addi	sp,sp,-12
   60210:	df000215 	stw	fp,8(sp)
   60214:	df000204 	addi	fp,sp,8
   60218:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   6021c:	0001883a 	nop
   60220:	e0bfff17 	ldw	r2,-4(fp)
   60224:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   60228:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   6022c:	10000226 	beq	r2,zero,60238 <_exit+0x2c>
    ALT_SIM_FAIL();
   60230:	002af070 	cmpltui	zero,zero,43969
   60234:	00000106 	br	6023c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   60238:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   6023c:	003fff06 	br	6023c <__alt_data_end+0xfffe023c>

00060240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60240:	defffe04 	addi	sp,sp,-8
   60244:	dfc00115 	stw	ra,4(sp)
   60248:	df000015 	stw	fp,0(sp)
   6024c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   60250:	d0a5bb17 	ldw	r2,-26900(gp)
   60254:	10000326 	beq	r2,zero,60264 <alt_get_errno+0x24>
   60258:	d0a5bb17 	ldw	r2,-26900(gp)
   6025c:	103ee83a 	callr	r2
   60260:	00000106 	br	60268 <alt_get_errno+0x28>
   60264:	d0b24c04 	addi	r2,gp,-14032
}
   60268:	e037883a 	mov	sp,fp
   6026c:	dfc00117 	ldw	ra,4(sp)
   60270:	df000017 	ldw	fp,0(sp)
   60274:	dec00204 	addi	sp,sp,8
   60278:	f800283a 	ret

0006027c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   6027c:	defffb04 	addi	sp,sp,-20
   60280:	dfc00415 	stw	ra,16(sp)
   60284:	df000315 	stw	fp,12(sp)
   60288:	df000304 	addi	fp,sp,12
   6028c:	e13ffe15 	stw	r4,-8(fp)
   60290:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   60294:	e0bffe17 	ldw	r2,-8(fp)
   60298:	10000816 	blt	r2,zero,602bc <fstat+0x40>
   6029c:	01400304 	movi	r5,12
   602a0:	e13ffe17 	ldw	r4,-8(fp)
   602a4:	004dab40 	call	4dab4 <__mulsi3>
   602a8:	1007883a 	mov	r3,r2
   602ac:	008001f4 	movhi	r2,7
   602b0:	10b13c04 	addi	r2,r2,-15120
   602b4:	1885883a 	add	r2,r3,r2
   602b8:	00000106 	br	602c0 <fstat+0x44>
   602bc:	0005883a 	mov	r2,zero
   602c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   602c4:	e0bffd17 	ldw	r2,-12(fp)
   602c8:	10001026 	beq	r2,zero,6030c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   602cc:	e0bffd17 	ldw	r2,-12(fp)
   602d0:	10800017 	ldw	r2,0(r2)
   602d4:	10800817 	ldw	r2,32(r2)
   602d8:	10000726 	beq	r2,zero,602f8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   602dc:	e0bffd17 	ldw	r2,-12(fp)
   602e0:	10800017 	ldw	r2,0(r2)
   602e4:	10800817 	ldw	r2,32(r2)
   602e8:	e17fff17 	ldw	r5,-4(fp)
   602ec:	e13ffd17 	ldw	r4,-12(fp)
   602f0:	103ee83a 	callr	r2
   602f4:	00000a06 	br	60320 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   602f8:	e0bfff17 	ldw	r2,-4(fp)
   602fc:	00c80004 	movi	r3,8192
   60300:	10c00115 	stw	r3,4(r2)
      return 0;
   60304:	0005883a 	mov	r2,zero
   60308:	00000506 	br	60320 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   6030c:	00602400 	call	60240 <alt_get_errno>
   60310:	1007883a 	mov	r3,r2
   60314:	00801444 	movi	r2,81
   60318:	18800015 	stw	r2,0(r3)
    return -1;
   6031c:	00bfffc4 	movi	r2,-1
  }
}
   60320:	e037883a 	mov	sp,fp
   60324:	dfc00117 	ldw	ra,4(sp)
   60328:	df000017 	ldw	fp,0(sp)
   6032c:	dec00204 	addi	sp,sp,8
   60330:	f800283a 	ret

00060334 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   60334:	deffff04 	addi	sp,sp,-4
   60338:	df000015 	stw	fp,0(sp)
   6033c:	d839883a 	mov	fp,sp
  return 0;
   60340:	0005883a 	mov	r2,zero
}
   60344:	e037883a 	mov	sp,fp
   60348:	df000017 	ldw	fp,0(sp)
   6034c:	dec00104 	addi	sp,sp,4
   60350:	f800283a 	ret

00060354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60354:	defffe04 	addi	sp,sp,-8
   60358:	dfc00115 	stw	ra,4(sp)
   6035c:	df000015 	stw	fp,0(sp)
   60360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   60364:	d0a5bb17 	ldw	r2,-26900(gp)
   60368:	10000326 	beq	r2,zero,60378 <alt_get_errno+0x24>
   6036c:	d0a5bb17 	ldw	r2,-26900(gp)
   60370:	103ee83a 	callr	r2
   60374:	00000106 	br	6037c <alt_get_errno+0x28>
   60378:	d0b24c04 	addi	r2,gp,-14032
}
   6037c:	e037883a 	mov	sp,fp
   60380:	dfc00117 	ldw	ra,4(sp)
   60384:	df000017 	ldw	fp,0(sp)
   60388:	dec00204 	addi	sp,sp,8
   6038c:	f800283a 	ret

00060390 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   60390:	deffed04 	addi	sp,sp,-76
   60394:	dfc01215 	stw	ra,72(sp)
   60398:	df001115 	stw	fp,68(sp)
   6039c:	df001104 	addi	fp,sp,68
   603a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   603a4:	e0bfff17 	ldw	r2,-4(fp)
   603a8:	10000816 	blt	r2,zero,603cc <isatty+0x3c>
   603ac:	01400304 	movi	r5,12
   603b0:	e13fff17 	ldw	r4,-4(fp)
   603b4:	004dab40 	call	4dab4 <__mulsi3>
   603b8:	1007883a 	mov	r3,r2
   603bc:	008001f4 	movhi	r2,7
   603c0:	10b13c04 	addi	r2,r2,-15120
   603c4:	1885883a 	add	r2,r3,r2
   603c8:	00000106 	br	603d0 <isatty+0x40>
   603cc:	0005883a 	mov	r2,zero
   603d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   603d4:	e0bfef17 	ldw	r2,-68(fp)
   603d8:	10000e26 	beq	r2,zero,60414 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   603dc:	e0bfef17 	ldw	r2,-68(fp)
   603e0:	10800017 	ldw	r2,0(r2)
   603e4:	10800817 	ldw	r2,32(r2)
   603e8:	1000021e 	bne	r2,zero,603f4 <isatty+0x64>
    {
      return 1;
   603ec:	00800044 	movi	r2,1
   603f0:	00000d06 	br	60428 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   603f4:	e0bff004 	addi	r2,fp,-64
   603f8:	100b883a 	mov	r5,r2
   603fc:	e13fff17 	ldw	r4,-4(fp)
   60400:	006027c0 	call	6027c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   60404:	e0bff117 	ldw	r2,-60(fp)
   60408:	10880020 	cmpeqi	r2,r2,8192
   6040c:	10803fcc 	andi	r2,r2,255
   60410:	00000506 	br	60428 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   60414:	00603540 	call	60354 <alt_get_errno>
   60418:	1007883a 	mov	r3,r2
   6041c:	00801444 	movi	r2,81
   60420:	18800015 	stw	r2,0(r3)
    return 0;
   60424:	0005883a 	mov	r2,zero
  }
}
   60428:	e037883a 	mov	sp,fp
   6042c:	dfc00117 	ldw	ra,4(sp)
   60430:	df000017 	ldw	fp,0(sp)
   60434:	dec00204 	addi	sp,sp,8
   60438:	f800283a 	ret

0006043c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6043c:	defffe04 	addi	sp,sp,-8
   60440:	dfc00115 	stw	ra,4(sp)
   60444:	df000015 	stw	fp,0(sp)
   60448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6044c:	d0a5bb17 	ldw	r2,-26900(gp)
   60450:	10000326 	beq	r2,zero,60460 <alt_get_errno+0x24>
   60454:	d0a5bb17 	ldw	r2,-26900(gp)
   60458:	103ee83a 	callr	r2
   6045c:	00000106 	br	60464 <alt_get_errno+0x28>
   60460:	d0b24c04 	addi	r2,gp,-14032
}
   60464:	e037883a 	mov	sp,fp
   60468:	dfc00117 	ldw	ra,4(sp)
   6046c:	df000017 	ldw	fp,0(sp)
   60470:	dec00204 	addi	sp,sp,8
   60474:	f800283a 	ret

00060478 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   60478:	defffb04 	addi	sp,sp,-20
   6047c:	dfc00415 	stw	ra,16(sp)
   60480:	df000315 	stw	fp,12(sp)
   60484:	df000304 	addi	fp,sp,12
   60488:	e13ffe15 	stw	r4,-8(fp)
   6048c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   60490:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   60494:	e0bffe17 	ldw	r2,-8(fp)
   60498:	00802f16 	blt	zero,r2,60558 <kill+0xe0>
  {
    switch (sig)
   6049c:	e0bfff17 	ldw	r2,-4(fp)
   604a0:	10800828 	cmpgeui	r2,r2,32
   604a4:	1000291e 	bne	r2,zero,6054c <kill+0xd4>
   604a8:	e0bfff17 	ldw	r2,-4(fp)
   604ac:	100690ba 	slli	r3,r2,2
   604b0:	008001b4 	movhi	r2,6
   604b4:	10813104 	addi	r2,r2,1220
   604b8:	1885883a 	add	r2,r3,r2
   604bc:	10800017 	ldw	r2,0(r2)
   604c0:	1000683a 	jmp	r2
   604c4:	0006056c 	andhi	zero,zero,6165
   604c8:	0006054c 	andi	zero,zero,6165
   604cc:	0006054c 	andi	zero,zero,6165
   604d0:	00060544 	movi	zero,6165
   604d4:	00060544 	movi	zero,6165
   604d8:	00060544 	movi	zero,6165
   604dc:	00060544 	movi	zero,6165
   604e0:	0006054c 	andi	zero,zero,6165
   604e4:	00060544 	movi	zero,6165
   604e8:	00060544 	movi	zero,6165
   604ec:	00060544 	movi	zero,6165
   604f0:	00060544 	movi	zero,6165
   604f4:	00060544 	movi	zero,6165
   604f8:	00060544 	movi	zero,6165
   604fc:	00060544 	movi	zero,6165
   60500:	00060544 	movi	zero,6165
   60504:	0006056c 	andhi	zero,zero,6165
   60508:	0006054c 	andi	zero,zero,6165
   6050c:	0006054c 	andi	zero,zero,6165
   60510:	0006054c 	andi	zero,zero,6165
   60514:	0006056c 	andhi	zero,zero,6165
   60518:	0006054c 	andi	zero,zero,6165
   6051c:	0006054c 	andi	zero,zero,6165
   60520:	00060544 	movi	zero,6165
   60524:	00060544 	movi	zero,6165
   60528:	00060544 	movi	zero,6165
   6052c:	00060544 	movi	zero,6165
   60530:	00060544 	movi	zero,6165
   60534:	0006054c 	andi	zero,zero,6165
   60538:	0006054c 	andi	zero,zero,6165
   6053c:	00060544 	movi	zero,6165
   60540:	00060544 	movi	zero,6165
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   60544:	0009883a 	mov	r4,zero
   60548:	006020c0 	call	6020c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   6054c:	00800584 	movi	r2,22
   60550:	e0bffd15 	stw	r2,-12(fp)
   60554:	00000606 	br	60570 <kill+0xf8>
    }
  }

  else if (pid > 0)
   60558:	e0bffe17 	ldw	r2,-8(fp)
   6055c:	0080040e 	bge	zero,r2,60570 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   60560:	008000c4 	movi	r2,3
   60564:	e0bffd15 	stw	r2,-12(fp)
   60568:	00000106 	br	60570 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   6056c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   60570:	e0bffd17 	ldw	r2,-12(fp)
   60574:	10000626 	beq	r2,zero,60590 <kill+0x118>
  {
    ALT_ERRNO = status;
   60578:	006043c0 	call	6043c <alt_get_errno>
   6057c:	1007883a 	mov	r3,r2
   60580:	e0bffd17 	ldw	r2,-12(fp)
   60584:	18800015 	stw	r2,0(r3)
    return -1;
   60588:	00bfffc4 	movi	r2,-1
   6058c:	00000106 	br	60594 <kill+0x11c>
  }

  return 0;
   60590:	0005883a 	mov	r2,zero
}
   60594:	e037883a 	mov	sp,fp
   60598:	dfc00117 	ldw	ra,4(sp)
   6059c:	df000017 	ldw	fp,0(sp)
   605a0:	dec00204 	addi	sp,sp,8
   605a4:	f800283a 	ret

000605a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   605a8:	defffc04 	addi	sp,sp,-16
   605ac:	df000315 	stw	fp,12(sp)
   605b0:	df000304 	addi	fp,sp,12
   605b4:	e13ffd15 	stw	r4,-12(fp)
   605b8:	e17ffe15 	stw	r5,-8(fp)
   605bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   605c0:	e0fffe17 	ldw	r3,-8(fp)
   605c4:	e0bffd17 	ldw	r2,-12(fp)
   605c8:	18800c26 	beq	r3,r2,605fc <alt_load_section+0x54>
  {
    while( to != end )
   605cc:	00000806 	br	605f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   605d0:	e0bffe17 	ldw	r2,-8(fp)
   605d4:	10c00104 	addi	r3,r2,4
   605d8:	e0fffe15 	stw	r3,-8(fp)
   605dc:	e0fffd17 	ldw	r3,-12(fp)
   605e0:	19000104 	addi	r4,r3,4
   605e4:	e13ffd15 	stw	r4,-12(fp)
   605e8:	18c00017 	ldw	r3,0(r3)
   605ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   605f0:	e0fffe17 	ldw	r3,-8(fp)
   605f4:	e0bfff17 	ldw	r2,-4(fp)
   605f8:	18bff51e 	bne	r3,r2,605d0 <__alt_data_end+0xfffe05d0>
    {
      *to++ = *from++;
    }
  }
}
   605fc:	0001883a 	nop
   60600:	e037883a 	mov	sp,fp
   60604:	df000017 	ldw	fp,0(sp)
   60608:	dec00104 	addi	sp,sp,4
   6060c:	f800283a 	ret

00060610 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   60610:	defffe04 	addi	sp,sp,-8
   60614:	dfc00115 	stw	ra,4(sp)
   60618:	df000015 	stw	fp,0(sp)
   6061c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   60620:	018001f4 	movhi	r6,7
   60624:	31bb8404 	addi	r6,r6,-4592
   60628:	014001f4 	movhi	r5,7
   6062c:	296f0904 	addi	r5,r5,-17372
   60630:	010001f4 	movhi	r4,7
   60634:	213b8404 	addi	r4,r4,-4592
   60638:	00605a80 	call	605a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   6063c:	01800134 	movhi	r6,4
   60640:	31808c04 	addi	r6,r6,560
   60644:	01400134 	movhi	r5,4
   60648:	29400804 	addi	r5,r5,32
   6064c:	01000134 	movhi	r4,4
   60650:	21000804 	addi	r4,r4,32
   60654:	00605a80 	call	605a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   60658:	018001f4 	movhi	r6,7
   6065c:	31af0904 	addi	r6,r6,-17372
   60660:	014001b4 	movhi	r5,6
   60664:	29534004 	addi	r5,r5,19712
   60668:	010001b4 	movhi	r4,6
   6066c:	21134004 	addi	r4,r4,19712
   60670:	00605a80 	call	605a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   60674:	00639d40 	call	639d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   60678:	0063c240 	call	63c24 <alt_icache_flush_all>
}
   6067c:	0001883a 	nop
   60680:	e037883a 	mov	sp,fp
   60684:	dfc00117 	ldw	ra,4(sp)
   60688:	df000017 	ldw	fp,0(sp)
   6068c:	dec00204 	addi	sp,sp,8
   60690:	f800283a 	ret

00060694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60694:	defffe04 	addi	sp,sp,-8
   60698:	dfc00115 	stw	ra,4(sp)
   6069c:	df000015 	stw	fp,0(sp)
   606a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   606a4:	d0a5bb17 	ldw	r2,-26900(gp)
   606a8:	10000326 	beq	r2,zero,606b8 <alt_get_errno+0x24>
   606ac:	d0a5bb17 	ldw	r2,-26900(gp)
   606b0:	103ee83a 	callr	r2
   606b4:	00000106 	br	606bc <alt_get_errno+0x28>
   606b8:	d0b24c04 	addi	r2,gp,-14032
}
   606bc:	e037883a 	mov	sp,fp
   606c0:	dfc00117 	ldw	ra,4(sp)
   606c4:	df000017 	ldw	fp,0(sp)
   606c8:	dec00204 	addi	sp,sp,8
   606cc:	f800283a 	ret

000606d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   606d0:	defff904 	addi	sp,sp,-28
   606d4:	dfc00615 	stw	ra,24(sp)
   606d8:	df000515 	stw	fp,20(sp)
   606dc:	df000504 	addi	fp,sp,20
   606e0:	e13ffd15 	stw	r4,-12(fp)
   606e4:	e17ffe15 	stw	r5,-8(fp)
   606e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   606ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   606f0:	e0bffd17 	ldw	r2,-12(fp)
   606f4:	10000816 	blt	r2,zero,60718 <lseek+0x48>
   606f8:	01400304 	movi	r5,12
   606fc:	e13ffd17 	ldw	r4,-12(fp)
   60700:	004dab40 	call	4dab4 <__mulsi3>
   60704:	1007883a 	mov	r3,r2
   60708:	008001f4 	movhi	r2,7
   6070c:	10b13c04 	addi	r2,r2,-15120
   60710:	1885883a 	add	r2,r3,r2
   60714:	00000106 	br	6071c <lseek+0x4c>
   60718:	0005883a 	mov	r2,zero
   6071c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   60720:	e0bffc17 	ldw	r2,-16(fp)
   60724:	10001026 	beq	r2,zero,60768 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   60728:	e0bffc17 	ldw	r2,-16(fp)
   6072c:	10800017 	ldw	r2,0(r2)
   60730:	10800717 	ldw	r2,28(r2)
   60734:	10000926 	beq	r2,zero,6075c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   60738:	e0bffc17 	ldw	r2,-16(fp)
   6073c:	10800017 	ldw	r2,0(r2)
   60740:	10800717 	ldw	r2,28(r2)
   60744:	e1bfff17 	ldw	r6,-4(fp)
   60748:	e17ffe17 	ldw	r5,-8(fp)
   6074c:	e13ffc17 	ldw	r4,-16(fp)
   60750:	103ee83a 	callr	r2
   60754:	e0bffb15 	stw	r2,-20(fp)
   60758:	00000506 	br	60770 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   6075c:	00bfde84 	movi	r2,-134
   60760:	e0bffb15 	stw	r2,-20(fp)
   60764:	00000206 	br	60770 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   60768:	00bfebc4 	movi	r2,-81
   6076c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   60770:	e0bffb17 	ldw	r2,-20(fp)
   60774:	1000070e 	bge	r2,zero,60794 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   60778:	00606940 	call	60694 <alt_get_errno>
   6077c:	1007883a 	mov	r3,r2
   60780:	e0bffb17 	ldw	r2,-20(fp)
   60784:	0085c83a 	sub	r2,zero,r2
   60788:	18800015 	stw	r2,0(r3)
    rc = -1;
   6078c:	00bfffc4 	movi	r2,-1
   60790:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   60794:	e0bffb17 	ldw	r2,-20(fp)
}
   60798:	e037883a 	mov	sp,fp
   6079c:	dfc00117 	ldw	ra,4(sp)
   607a0:	df000017 	ldw	fp,0(sp)
   607a4:	dec00204 	addi	sp,sp,8
   607a8:	f800283a 	ret

000607ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   607ac:	defffd04 	addi	sp,sp,-12
   607b0:	dfc00215 	stw	ra,8(sp)
   607b4:	df000115 	stw	fp,4(sp)
   607b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   607bc:	0009883a 	mov	r4,zero
   607c0:	0060d380 	call	60d38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   607c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   607c8:	0060d700 	call	60d70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   607cc:	018001f4 	movhi	r6,7
   607d0:	31aef404 	addi	r6,r6,-17456
   607d4:	014001f4 	movhi	r5,7
   607d8:	296ef404 	addi	r5,r5,-17456
   607dc:	010001f4 	movhi	r4,7
   607e0:	212ef404 	addi	r4,r4,-17456
   607e4:	0063fc80 	call	63fc8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   607e8:	0063ad40 	call	63ad4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   607ec:	010001b4 	movhi	r4,6
   607f0:	210ecd04 	addi	r4,r4,15156
   607f4:	00649600 	call	64960 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   607f8:	d0b25017 	ldw	r2,-14016(gp)
   607fc:	d0f25117 	ldw	r3,-14012(gp)
   60800:	d1325217 	ldw	r4,-14008(gp)
   60804:	200d883a 	mov	r6,r4
   60808:	180b883a 	mov	r5,r3
   6080c:	1009883a 	mov	r4,r2
   60810:	004adf40 	call	4adf4 <main>
   60814:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   60818:	01000044 	movi	r4,1
   6081c:	00601080 	call	60108 <close>
  exit (result);
   60820:	e13fff17 	ldw	r4,-4(fp)
   60824:	00649740 	call	64974 <exit>

00060828 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   60828:	defffe04 	addi	sp,sp,-8
   6082c:	df000115 	stw	fp,4(sp)
   60830:	df000104 	addi	fp,sp,4
   60834:	e13fff15 	stw	r4,-4(fp)
}
   60838:	0001883a 	nop
   6083c:	e037883a 	mov	sp,fp
   60840:	df000017 	ldw	fp,0(sp)
   60844:	dec00104 	addi	sp,sp,4
   60848:	f800283a 	ret

0006084c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   6084c:	defffe04 	addi	sp,sp,-8
   60850:	df000115 	stw	fp,4(sp)
   60854:	df000104 	addi	fp,sp,4
   60858:	e13fff15 	stw	r4,-4(fp)
}
   6085c:	0001883a 	nop
   60860:	e037883a 	mov	sp,fp
   60864:	df000017 	ldw	fp,0(sp)
   60868:	dec00104 	addi	sp,sp,4
   6086c:	f800283a 	ret

00060870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60870:	defffe04 	addi	sp,sp,-8
   60874:	dfc00115 	stw	ra,4(sp)
   60878:	df000015 	stw	fp,0(sp)
   6087c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   60880:	d0a5bb17 	ldw	r2,-26900(gp)
   60884:	10000326 	beq	r2,zero,60894 <alt_get_errno+0x24>
   60888:	d0a5bb17 	ldw	r2,-26900(gp)
   6088c:	103ee83a 	callr	r2
   60890:	00000106 	br	60898 <alt_get_errno+0x28>
   60894:	d0b24c04 	addi	r2,gp,-14032
}
   60898:	e037883a 	mov	sp,fp
   6089c:	dfc00117 	ldw	ra,4(sp)
   608a0:	df000017 	ldw	fp,0(sp)
   608a4:	dec00204 	addi	sp,sp,8
   608a8:	f800283a 	ret

000608ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   608ac:	defff904 	addi	sp,sp,-28
   608b0:	dfc00615 	stw	ra,24(sp)
   608b4:	df000515 	stw	fp,20(sp)
   608b8:	df000504 	addi	fp,sp,20
   608bc:	e13ffd15 	stw	r4,-12(fp)
   608c0:	e17ffe15 	stw	r5,-8(fp)
   608c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   608c8:	e0bffd17 	ldw	r2,-12(fp)
   608cc:	10000816 	blt	r2,zero,608f0 <read+0x44>
   608d0:	01400304 	movi	r5,12
   608d4:	e13ffd17 	ldw	r4,-12(fp)
   608d8:	004dab40 	call	4dab4 <__mulsi3>
   608dc:	1007883a 	mov	r3,r2
   608e0:	008001f4 	movhi	r2,7
   608e4:	10b13c04 	addi	r2,r2,-15120
   608e8:	1885883a 	add	r2,r3,r2
   608ec:	00000106 	br	608f4 <read+0x48>
   608f0:	0005883a 	mov	r2,zero
   608f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   608f8:	e0bffb17 	ldw	r2,-20(fp)
   608fc:	10002226 	beq	r2,zero,60988 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   60900:	e0bffb17 	ldw	r2,-20(fp)
   60904:	10800217 	ldw	r2,8(r2)
   60908:	108000cc 	andi	r2,r2,3
   6090c:	10800060 	cmpeqi	r2,r2,1
   60910:	1000181e 	bne	r2,zero,60974 <read+0xc8>
        (fd->dev->read))
   60914:	e0bffb17 	ldw	r2,-20(fp)
   60918:	10800017 	ldw	r2,0(r2)
   6091c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   60920:	10001426 	beq	r2,zero,60974 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   60924:	e0bffb17 	ldw	r2,-20(fp)
   60928:	10800017 	ldw	r2,0(r2)
   6092c:	10800517 	ldw	r2,20(r2)
   60930:	e0ffff17 	ldw	r3,-4(fp)
   60934:	180d883a 	mov	r6,r3
   60938:	e17ffe17 	ldw	r5,-8(fp)
   6093c:	e13ffb17 	ldw	r4,-20(fp)
   60940:	103ee83a 	callr	r2
   60944:	e0bffc15 	stw	r2,-16(fp)
   60948:	e0bffc17 	ldw	r2,-16(fp)
   6094c:	1000070e 	bge	r2,zero,6096c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   60950:	00608700 	call	60870 <alt_get_errno>
   60954:	1007883a 	mov	r3,r2
   60958:	e0bffc17 	ldw	r2,-16(fp)
   6095c:	0085c83a 	sub	r2,zero,r2
   60960:	18800015 	stw	r2,0(r3)
          return -1;
   60964:	00bfffc4 	movi	r2,-1
   60968:	00000c06 	br	6099c <read+0xf0>
        }
        return rval;
   6096c:	e0bffc17 	ldw	r2,-16(fp)
   60970:	00000a06 	br	6099c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   60974:	00608700 	call	60870 <alt_get_errno>
   60978:	1007883a 	mov	r3,r2
   6097c:	00800344 	movi	r2,13
   60980:	18800015 	stw	r2,0(r3)
   60984:	00000406 	br	60998 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   60988:	00608700 	call	60870 <alt_get_errno>
   6098c:	1007883a 	mov	r3,r2
   60990:	00801444 	movi	r2,81
   60994:	18800015 	stw	r2,0(r3)
  }
  return -1;
   60998:	00bfffc4 	movi	r2,-1
}
   6099c:	e037883a 	mov	sp,fp
   609a0:	dfc00117 	ldw	ra,4(sp)
   609a4:	df000017 	ldw	fp,0(sp)
   609a8:	dec00204 	addi	sp,sp,8
   609ac:	f800283a 	ret

000609b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   609b0:	defffc04 	addi	sp,sp,-16
   609b4:	dfc00315 	stw	ra,12(sp)
   609b8:	df000215 	stw	fp,8(sp)
   609bc:	dc000115 	stw	r16,4(sp)
   609c0:	df000204 	addi	fp,sp,8
   609c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   609c8:	e0bffe17 	ldw	r2,-8(fp)
   609cc:	108000d0 	cmplti	r2,r2,3
   609d0:	1000111e 	bne	r2,zero,60a18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   609d4:	040001f4 	movhi	r16,7
   609d8:	84313c04 	addi	r16,r16,-15120
   609dc:	e0bffe17 	ldw	r2,-8(fp)
   609e0:	01400304 	movi	r5,12
   609e4:	1009883a 	mov	r4,r2
   609e8:	004dab40 	call	4dab4 <__mulsi3>
   609ec:	8085883a 	add	r2,r16,r2
   609f0:	10800204 	addi	r2,r2,8
   609f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   609f8:	040001f4 	movhi	r16,7
   609fc:	84313c04 	addi	r16,r16,-15120
   60a00:	e0bffe17 	ldw	r2,-8(fp)
   60a04:	01400304 	movi	r5,12
   60a08:	1009883a 	mov	r4,r2
   60a0c:	004dab40 	call	4dab4 <__mulsi3>
   60a10:	8085883a 	add	r2,r16,r2
   60a14:	10000015 	stw	zero,0(r2)
  }
}
   60a18:	0001883a 	nop
   60a1c:	e6ffff04 	addi	sp,fp,-4
   60a20:	dfc00217 	ldw	ra,8(sp)
   60a24:	df000117 	ldw	fp,4(sp)
   60a28:	dc000017 	ldw	r16,0(sp)
   60a2c:	dec00304 	addi	sp,sp,12
   60a30:	f800283a 	ret

00060a34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   60a34:	defff904 	addi	sp,sp,-28
   60a38:	df000615 	stw	fp,24(sp)
   60a3c:	df000604 	addi	fp,sp,24
   60a40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   60a44:	0005303a 	rdctl	r2,status
   60a48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   60a4c:	e0fffe17 	ldw	r3,-8(fp)
   60a50:	00bfff84 	movi	r2,-2
   60a54:	1884703a 	and	r2,r3,r2
   60a58:	1001703a 	wrctl	status,r2
  
  return context;
   60a5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   60a60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   60a64:	d0a5bc17 	ldw	r2,-26896(gp)
   60a68:	10c000c4 	addi	r3,r2,3
   60a6c:	00bfff04 	movi	r2,-4
   60a70:	1884703a 	and	r2,r3,r2
   60a74:	d0a5bc15 	stw	r2,-26896(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   60a78:	d0e5bc17 	ldw	r3,-26896(gp)
   60a7c:	e0bfff17 	ldw	r2,-4(fp)
   60a80:	1887883a 	add	r3,r3,r2
   60a84:	00800234 	movhi	r2,8
   60a88:	10800004 	addi	r2,r2,0
   60a8c:	10c0062e 	bgeu	r2,r3,60aa8 <sbrk+0x74>
   60a90:	e0bffb17 	ldw	r2,-20(fp)
   60a94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   60a98:	e0bffa17 	ldw	r2,-24(fp)
   60a9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   60aa0:	00bfffc4 	movi	r2,-1
   60aa4:	00000b06 	br	60ad4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   60aa8:	d0a5bc17 	ldw	r2,-26896(gp)
   60aac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   60ab0:	d0e5bc17 	ldw	r3,-26896(gp)
   60ab4:	e0bfff17 	ldw	r2,-4(fp)
   60ab8:	1885883a 	add	r2,r3,r2
   60abc:	d0a5bc15 	stw	r2,-26896(gp)
   60ac0:	e0bffb17 	ldw	r2,-20(fp)
   60ac4:	e0bffc15 	stw	r2,-16(fp)
   60ac8:	e0bffc17 	ldw	r2,-16(fp)
   60acc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   60ad0:	e0bffd17 	ldw	r2,-12(fp)
} 
   60ad4:	e037883a 	mov	sp,fp
   60ad8:	df000017 	ldw	fp,0(sp)
   60adc:	dec00104 	addi	sp,sp,4
   60ae0:	f800283a 	ret

00060ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60ae4:	defffe04 	addi	sp,sp,-8
   60ae8:	dfc00115 	stw	ra,4(sp)
   60aec:	df000015 	stw	fp,0(sp)
   60af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   60af4:	d0a5bb17 	ldw	r2,-26900(gp)
   60af8:	10000326 	beq	r2,zero,60b08 <alt_get_errno+0x24>
   60afc:	d0a5bb17 	ldw	r2,-26900(gp)
   60b00:	103ee83a 	callr	r2
   60b04:	00000106 	br	60b0c <alt_get_errno+0x28>
   60b08:	d0b24c04 	addi	r2,gp,-14032
}
   60b0c:	e037883a 	mov	sp,fp
   60b10:	dfc00117 	ldw	ra,4(sp)
   60b14:	df000017 	ldw	fp,0(sp)
   60b18:	dec00204 	addi	sp,sp,8
   60b1c:	f800283a 	ret

00060b20 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   60b20:	defffc04 	addi	sp,sp,-16
   60b24:	dfc00315 	stw	ra,12(sp)
   60b28:	df000215 	stw	fp,8(sp)
   60b2c:	df000204 	addi	fp,sp,8
   60b30:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   60b34:	d0b25517 	ldw	r2,-13996(gp)
  clock_t ticks = alt_nticks(); 
   60b38:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   60b3c:	d0b25417 	ldw	r2,-14000(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   60b40:	1000061e 	bne	r2,zero,60b5c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   60b44:	0060ae40 	call	60ae4 <alt_get_errno>
   60b48:	1007883a 	mov	r3,r2
   60b4c:	00801604 	movi	r2,88
   60b50:	18800015 	stw	r2,0(r3)
    return 0;
   60b54:	0005883a 	mov	r2,zero
   60b58:	00000a06 	br	60b84 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   60b5c:	e0bfff17 	ldw	r2,-4(fp)
   60b60:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   60b64:	e0bfff17 	ldw	r2,-4(fp)
   60b68:	e0fffe17 	ldw	r3,-8(fp)
   60b6c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   60b70:	e0bfff17 	ldw	r2,-4(fp)
   60b74:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   60b78:	e0bfff17 	ldw	r2,-4(fp)
   60b7c:	10000315 	stw	zero,12(r2)

  return ticks;
   60b80:	e0bffe17 	ldw	r2,-8(fp)
}
   60b84:	e037883a 	mov	sp,fp
   60b88:	dfc00117 	ldw	ra,4(sp)
   60b8c:	df000017 	ldw	fp,0(sp)
   60b90:	dec00204 	addi	sp,sp,8
   60b94:	f800283a 	ret

00060b98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   60b98:	defffd04 	addi	sp,sp,-12
   60b9c:	dfc00215 	stw	ra,8(sp)
   60ba0:	df000115 	stw	fp,4(sp)
   60ba4:	df000104 	addi	fp,sp,4
   60ba8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   60bac:	e13fff17 	ldw	r4,-4(fp)
   60bb0:	006387c0 	call	6387c <alt_busy_sleep>
}
   60bb4:	e037883a 	mov	sp,fp
   60bb8:	dfc00117 	ldw	ra,4(sp)
   60bbc:	df000017 	ldw	fp,0(sp)
   60bc0:	dec00204 	addi	sp,sp,8
   60bc4:	f800283a 	ret

00060bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   60bc8:	defffe04 	addi	sp,sp,-8
   60bcc:	dfc00115 	stw	ra,4(sp)
   60bd0:	df000015 	stw	fp,0(sp)
   60bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   60bd8:	d0a5bb17 	ldw	r2,-26900(gp)
   60bdc:	10000326 	beq	r2,zero,60bec <alt_get_errno+0x24>
   60be0:	d0a5bb17 	ldw	r2,-26900(gp)
   60be4:	103ee83a 	callr	r2
   60be8:	00000106 	br	60bf0 <alt_get_errno+0x28>
   60bec:	d0b24c04 	addi	r2,gp,-14032
}
   60bf0:	e037883a 	mov	sp,fp
   60bf4:	dfc00117 	ldw	ra,4(sp)
   60bf8:	df000017 	ldw	fp,0(sp)
   60bfc:	dec00204 	addi	sp,sp,8
   60c00:	f800283a 	ret

00060c04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   60c04:	defff904 	addi	sp,sp,-28
   60c08:	dfc00615 	stw	ra,24(sp)
   60c0c:	df000515 	stw	fp,20(sp)
   60c10:	df000504 	addi	fp,sp,20
   60c14:	e13ffd15 	stw	r4,-12(fp)
   60c18:	e17ffe15 	stw	r5,-8(fp)
   60c1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   60c20:	e0bffd17 	ldw	r2,-12(fp)
   60c24:	10000816 	blt	r2,zero,60c48 <write+0x44>
   60c28:	01400304 	movi	r5,12
   60c2c:	e13ffd17 	ldw	r4,-12(fp)
   60c30:	004dab40 	call	4dab4 <__mulsi3>
   60c34:	1007883a 	mov	r3,r2
   60c38:	008001f4 	movhi	r2,7
   60c3c:	10b13c04 	addi	r2,r2,-15120
   60c40:	1885883a 	add	r2,r3,r2
   60c44:	00000106 	br	60c4c <write+0x48>
   60c48:	0005883a 	mov	r2,zero
   60c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   60c50:	e0bffb17 	ldw	r2,-20(fp)
   60c54:	10002126 	beq	r2,zero,60cdc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   60c58:	e0bffb17 	ldw	r2,-20(fp)
   60c5c:	10800217 	ldw	r2,8(r2)
   60c60:	108000cc 	andi	r2,r2,3
   60c64:	10001826 	beq	r2,zero,60cc8 <write+0xc4>
   60c68:	e0bffb17 	ldw	r2,-20(fp)
   60c6c:	10800017 	ldw	r2,0(r2)
   60c70:	10800617 	ldw	r2,24(r2)
   60c74:	10001426 	beq	r2,zero,60cc8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   60c78:	e0bffb17 	ldw	r2,-20(fp)
   60c7c:	10800017 	ldw	r2,0(r2)
   60c80:	10800617 	ldw	r2,24(r2)
   60c84:	e0ffff17 	ldw	r3,-4(fp)
   60c88:	180d883a 	mov	r6,r3
   60c8c:	e17ffe17 	ldw	r5,-8(fp)
   60c90:	e13ffb17 	ldw	r4,-20(fp)
   60c94:	103ee83a 	callr	r2
   60c98:	e0bffc15 	stw	r2,-16(fp)
   60c9c:	e0bffc17 	ldw	r2,-16(fp)
   60ca0:	1000070e 	bge	r2,zero,60cc0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   60ca4:	0060bc80 	call	60bc8 <alt_get_errno>
   60ca8:	1007883a 	mov	r3,r2
   60cac:	e0bffc17 	ldw	r2,-16(fp)
   60cb0:	0085c83a 	sub	r2,zero,r2
   60cb4:	18800015 	stw	r2,0(r3)
        return -1;
   60cb8:	00bfffc4 	movi	r2,-1
   60cbc:	00000c06 	br	60cf0 <write+0xec>
      }
      return rval;
   60cc0:	e0bffc17 	ldw	r2,-16(fp)
   60cc4:	00000a06 	br	60cf0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   60cc8:	0060bc80 	call	60bc8 <alt_get_errno>
   60ccc:	1007883a 	mov	r3,r2
   60cd0:	00800344 	movi	r2,13
   60cd4:	18800015 	stw	r2,0(r3)
   60cd8:	00000406 	br	60cec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   60cdc:	0060bc80 	call	60bc8 <alt_get_errno>
   60ce0:	1007883a 	mov	r3,r2
   60ce4:	00801444 	movi	r2,81
   60ce8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   60cec:	00bfffc4 	movi	r2,-1
}
   60cf0:	e037883a 	mov	sp,fp
   60cf4:	dfc00117 	ldw	ra,4(sp)
   60cf8:	df000017 	ldw	fp,0(sp)
   60cfc:	dec00204 	addi	sp,sp,8
   60d00:	f800283a 	ret

00060d04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   60d04:	defffd04 	addi	sp,sp,-12
   60d08:	dfc00215 	stw	ra,8(sp)
   60d0c:	df000115 	stw	fp,4(sp)
   60d10:	df000104 	addi	fp,sp,4
   60d14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   60d18:	d165b804 	addi	r5,gp,-26912
   60d1c:	e13fff17 	ldw	r4,-4(fp)
   60d20:	0063a300 	call	63a30 <alt_dev_llist_insert>
}
   60d24:	e037883a 	mov	sp,fp
   60d28:	dfc00117 	ldw	ra,4(sp)
   60d2c:	df000017 	ldw	fp,0(sp)
   60d30:	dec00204 	addi	sp,sp,8
   60d34:	f800283a 	ret

00060d38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   60d38:	defffd04 	addi	sp,sp,-12
   60d3c:	dfc00215 	stw	ra,8(sp)
   60d40:	df000115 	stw	fp,4(sp)
   60d44:	df000104 	addi	fp,sp,4
   60d48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   60d4c:	00646d40 	call	646d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   60d50:	00800044 	movi	r2,1
   60d54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   60d58:	0001883a 	nop
   60d5c:	e037883a 	mov	sp,fp
   60d60:	dfc00117 	ldw	ra,4(sp)
   60d64:	df000017 	ldw	fp,0(sp)
   60d68:	dec00204 	addi	sp,sp,8
   60d6c:	f800283a 	ret

00060d70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   60d70:	defffe04 	addi	sp,sp,-8
   60d74:	dfc00115 	stw	ra,4(sp)
   60d78:	df000015 	stw	fp,0(sp)
   60d7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   60d80:	01c0fa04 	movi	r7,1000
   60d84:	01800084 	movi	r6,2
   60d88:	000b883a 	mov	r5,zero
   60d8c:	01062004 	movi	r4,6272
   60d90:	00636d40 	call	636d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   60d94:	010001f4 	movhi	r4,7
   60d98:	21319c04 	addi	r4,r4,-14736
   60d9c:	00610300 	call	61030 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   60da0:	01800044 	movi	r6,1
   60da4:	000b883a 	mov	r5,zero
   60da8:	010001f4 	movhi	r4,7
   60dac:	2131b404 	addi	r4,r4,-14640
   60db0:	0062b5c0 	call	62b5c <altera_avalon_jtag_uart_init>
   60db4:	010001f4 	movhi	r4,7
   60db8:	2131aa04 	addi	r4,r4,-14680
   60dbc:	0060d040 	call	60d04 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   60dc0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   60dc4:	0001883a 	nop
}
   60dc8:	0001883a 	nop
   60dcc:	e037883a 	mov	sp,fp
   60dd0:	dfc00117 	ldw	ra,4(sp)
   60dd4:	df000017 	ldw	fp,0(sp)
   60dd8:	dec00204 	addi	sp,sp,8
   60ddc:	f800283a 	ret

00060de0 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   60de0:	defff904 	addi	sp,sp,-28
   60de4:	dfc00615 	stw	ra,24(sp)
   60de8:	df000515 	stw	fp,20(sp)
   60dec:	df000504 	addi	fp,sp,20
   60df0:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   60df4:	008000b4 	movhi	r2,2
   60df8:	10a1a804 	addi	r2,r2,-31072
   60dfc:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   60e00:	e0bfff17 	ldw	r2,-4(fp)
   60e04:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   60e08:	e0bffc17 	ldw	r2,-16(fp)
   60e0c:	10800717 	ldw	r2,28(r2)
   60e10:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   60e14:	e0bffd17 	ldw	r2,-12(fp)
   60e18:	10800217 	ldw	r2,8(r2)
   60e1c:	10800098 	cmpnei	r2,r2,2
   60e20:	1000251e 	bne	r2,zero,60eb8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   60e24:	e0bffd17 	ldw	r2,-12(fp)
   60e28:	10c00017 	ldw	r3,0(r2)
   60e2c:	e0bffd17 	ldw	r2,-12(fp)
   60e30:	10800117 	ldw	r2,4(r2)
   60e34:	e13ffe04 	addi	r4,fp,-8
   60e38:	200f883a 	mov	r7,r4
   60e3c:	100d883a 	mov	r6,r2
   60e40:	180b883a 	mov	r5,r3
   60e44:	e13ffc17 	ldw	r4,-16(fp)
   60e48:	00615900 	call	61590 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   60e4c:	e0bffd17 	ldw	r2,-12(fp)
   60e50:	10c00117 	ldw	r3,4(r2)
   60e54:	e0bffe17 	ldw	r2,-8(fp)
   60e58:	1887c83a 	sub	r3,r3,r2
   60e5c:	e0bffd17 	ldw	r2,-12(fp)
   60e60:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   60e64:	e0bffd17 	ldw	r2,-12(fp)
   60e68:	10c00017 	ldw	r3,0(r2)
   60e6c:	e0bffe17 	ldw	r2,-8(fp)
   60e70:	1887883a 	add	r3,r3,r2
   60e74:	e0bffd17 	ldw	r2,-12(fp)
   60e78:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   60e7c:	e0bffd17 	ldw	r2,-12(fp)
   60e80:	10800117 	ldw	r2,4(r2)
   60e84:	10000c26 	beq	r2,zero,60eb8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   60e88:	01400704 	movi	r5,28
   60e8c:	e13ffc17 	ldw	r4,-16(fp)
   60e90:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   60e94:	01400084 	movi	r5,2
   60e98:	e13ffc17 	ldw	r4,-16(fp)
   60e9c:	00627ec0 	call	627ec <alt_avalon_i2c_int_enable>
   60ea0:	00000e06 	br	60edc <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   60ea4:	e0bffb17 	ldw	r2,-20(fp)
   60ea8:	10bfffc4 	addi	r2,r2,-1
   60eac:	e0bffb15 	stw	r2,-20(fp)
   60eb0:	e0bffb17 	ldw	r2,-20(fp)
   60eb4:	10000426 	beq	r2,zero,60ec8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   60eb8:	e13ffc17 	ldw	r4,-16(fp)
   60ebc:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   60ec0:	103ff81e 	bne	r2,zero,60ea4 <__alt_data_end+0xfffe0ea4>
   60ec4:	00000106 	br	60ecc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   60ec8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   60ecc:	e13ffc17 	ldw	r4,-16(fp)
   60ed0:	00611f40 	call	611f4 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   60ed4:	e0bffd17 	ldw	r2,-12(fp)
   60ed8:	10000215 	stw	zero,8(r2)
}
   60edc:	e037883a 	mov	sp,fp
   60ee0:	dfc00117 	ldw	ra,4(sp)
   60ee4:	df000017 	ldw	fp,0(sp)
   60ee8:	dec00204 	addi	sp,sp,8
   60eec:	f800283a 	ret

00060ef0 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   60ef0:	defffc04 	addi	sp,sp,-16
   60ef4:	dfc00315 	stw	ra,12(sp)
   60ef8:	df000215 	stw	fp,8(sp)
   60efc:	df000204 	addi	fp,sp,8
   60f00:	e13ffe15 	stw	r4,-8(fp)
   60f04:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   60f08:	e0bfff17 	ldw	r2,-4(fp)
   60f0c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   60f10:	e1ffff17 	ldw	r7,-4(fp)
   60f14:	000d883a 	mov	r6,zero
   60f18:	014001b4 	movhi	r5,6
   60f1c:	29437804 	addi	r5,r5,3552
   60f20:	e13ffe17 	ldw	r4,-8(fp)
   60f24:	0060fdc0 	call	60fdc <alt_avalon_i2c_register_callback>
}
   60f28:	0001883a 	nop
   60f2c:	e037883a 	mov	sp,fp
   60f30:	dfc00117 	ldw	ra,4(sp)
   60f34:	df000017 	ldw	fp,0(sp)
   60f38:	dec00204 	addi	sp,sp,8
   60f3c:	f800283a 	ret

00060f40 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   60f40:	defff904 	addi	sp,sp,-28
   60f44:	dfc00615 	stw	ra,24(sp)
   60f48:	df000515 	stw	fp,20(sp)
   60f4c:	df000504 	addi	fp,sp,20
   60f50:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   60f54:	e0bfff17 	ldw	r2,-4(fp)
   60f58:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   60f5c:	014007c4 	movi	r5,31
   60f60:	e13ffb17 	ldw	r4,-20(fp)
   60f64:	00627840 	call	62784 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   60f68:	01400704 	movi	r5,28
   60f6c:	e13ffb17 	ldw	r4,-20(fp)
   60f70:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   60f74:	e0bffb17 	ldw	r2,-20(fp)
   60f78:	10800617 	ldw	r2,24(r2)
   60f7c:	10001126 	beq	r2,zero,60fc4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   60f80:	0005303a 	rdctl	r2,status
   60f84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   60f88:	e0fffd17 	ldw	r3,-12(fp)
   60f8c:	00bfff84 	movi	r2,-2
   60f90:	1884703a 	and	r2,r3,r2
   60f94:	1001703a 	wrctl	status,r2
  
  return context;
   60f98:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   60f9c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   60fa0:	e0bffb17 	ldw	r2,-20(fp)
   60fa4:	10800617 	ldw	r2,24(r2)
   60fa8:	e13ffb17 	ldw	r4,-20(fp)
   60fac:	103ee83a 	callr	r2
   60fb0:	e0bffc17 	ldw	r2,-16(fp)
   60fb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   60fb8:	e0bffe17 	ldw	r2,-8(fp)
   60fbc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   60fc0:	0001883a 	nop
   60fc4:	0001883a 	nop
}
   60fc8:	e037883a 	mov	sp,fp
   60fcc:	dfc00117 	ldw	ra,4(sp)
   60fd0:	df000017 	ldw	fp,0(sp)
   60fd4:	dec00204 	addi	sp,sp,8
   60fd8:	f800283a 	ret

00060fdc <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   60fdc:	defffb04 	addi	sp,sp,-20
   60fe0:	df000415 	stw	fp,16(sp)
   60fe4:	df000404 	addi	fp,sp,16
   60fe8:	e13ffc15 	stw	r4,-16(fp)
   60fec:	e17ffd15 	stw	r5,-12(fp)
   60ff0:	e1bffe15 	stw	r6,-8(fp)
   60ff4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   60ff8:	e0bffc17 	ldw	r2,-16(fp)
   60ffc:	e0fffd17 	ldw	r3,-12(fp)
   61000:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   61004:	e0bffc17 	ldw	r2,-16(fp)
   61008:	e0ffff17 	ldw	r3,-4(fp)
   6100c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   61010:	e0bffc17 	ldw	r2,-16(fp)
   61014:	e0fffe17 	ldw	r3,-8(fp)
   61018:	10c00815 	stw	r3,32(r2)

    return ;
   6101c:	0001883a 	nop
}
   61020:	e037883a 	mov	sp,fp
   61024:	df000017 	ldw	fp,0(sp)
   61028:	dec00104 	addi	sp,sp,4
   6102c:	f800283a 	ret

00061030 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   61030:	defff704 	addi	sp,sp,-36
   61034:	dfc00815 	stw	ra,32(sp)
   61038:	df000715 	stw	fp,28(sp)
   6103c:	df000704 	addi	fp,sp,28
   61040:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   61044:	e13fff17 	ldw	r4,-4(fp)
   61048:	00611f40 	call	611f4 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   6104c:	014007c4 	movi	r5,31
   61050:	e13fff17 	ldw	r4,-4(fp)
   61054:	00627840 	call	62784 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   61058:	01400704 	movi	r5,28
   6105c:	e13fff17 	ldw	r4,-4(fp)
   61060:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   61064:	014000c4 	movi	r5,3
   61068:	e13fff17 	ldw	r4,-4(fp)
   6106c:	00629900 	call	62990 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   61070:	014000c4 	movi	r5,3
   61074:	e13fff17 	ldw	r4,-4(fp)
   61078:	00628e00 	call	628e0 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   6107c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   61080:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   61084:	e0bffb04 	addi	r2,fp,-20
   61088:	018000b4 	movhi	r6,2
   6108c:	31a1a804 	addi	r6,r6,-31072
   61090:	100b883a 	mov	r5,r2
   61094:	e13fff17 	ldw	r4,-4(fp)
   61098:	00614500 	call	61450 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   6109c:	e0bffb04 	addi	r2,fp,-20
   610a0:	100b883a 	mov	r5,r2
   610a4:	e13fff17 	ldw	r4,-4(fp)
   610a8:	00612f00 	call	612f0 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   610ac:	d165bd04 	addi	r5,gp,-26892
   610b0:	e13fff17 	ldw	r4,-4(fp)
   610b4:	0063a300 	call	63a30 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   610b8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   610bc:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   610c0:	e0bffa17 	ldw	r2,-24(fp)
   610c4:	10000c1e 	bne	r2,zero,610f8 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   610c8:	e0bfff17 	ldw	r2,-4(fp)
   610cc:	10c00417 	ldw	r3,16(r2)
   610d0:	e0bfff17 	ldw	r2,-4(fp)
   610d4:	10800517 	ldw	r2,20(r2)
   610d8:	d8000015 	stw	zero,0(sp)
   610dc:	e1ffff17 	ldw	r7,-4(fp)
   610e0:	018001b4 	movhi	r6,6
   610e4:	3183d004 	addi	r6,r6,3904
   610e8:	100b883a 	mov	r5,r2
   610ec:	1809883a 	mov	r4,r3
   610f0:	0063c440 	call	63c44 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   610f4:	00000406 	br	61108 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   610f8:	010001f4 	movhi	r4,7
   610fc:	212f0104 	addi	r4,r4,-17404
   61100:	00642c80 	call	642c8 <alt_printf>
    }

    return;
   61104:	0001883a 	nop

}
   61108:	e037883a 	mov	sp,fp
   6110c:	dfc00117 	ldw	ra,4(sp)
   61110:	df000017 	ldw	fp,0(sp)
   61114:	dec00204 	addi	sp,sp,8
   61118:	f800283a 	ret

0006111c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   6111c:	defffc04 	addi	sp,sp,-16
   61120:	dfc00315 	stw	ra,12(sp)
   61124:	df000215 	stw	fp,8(sp)
   61128:	df000204 	addi	fp,sp,8
   6112c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   61130:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   61134:	d165bd04 	addi	r5,gp,-26892
   61138:	e13fff17 	ldw	r4,-4(fp)
   6113c:	0063b940 	call	63b94 <alt_find_dev>
   61140:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   61144:	e0bffe17 	ldw	r2,-8(fp)
}
   61148:	e037883a 	mov	sp,fp
   6114c:	dfc00117 	ldw	ra,4(sp)
   61150:	df000017 	ldw	fp,0(sp)
   61154:	dec00204 	addi	sp,sp,8
   61158:	f800283a 	ret

0006115c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   6115c:	defffc04 	addi	sp,sp,-16
   61160:	df000315 	stw	fp,12(sp)
   61164:	df000304 	addi	fp,sp,12
   61168:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   6116c:	e0bfff17 	ldw	r2,-4(fp)
   61170:	10800717 	ldw	r2,28(r2)
   61174:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   61178:	e0bfff17 	ldw	r2,-4(fp)
   6117c:	10800317 	ldw	r2,12(r2)
   61180:	10800204 	addi	r2,r2,8
   61184:	10800037 	ldwio	r2,0(r2)
   61188:	1080004c 	andi	r2,r2,1
   6118c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   61190:	e0bffe17 	ldw	r2,-8(fp)
   61194:	10000226 	beq	r2,zero,611a0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   61198:	00bffe44 	movi	r2,-7
   6119c:	00001106 	br	611e4 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   611a0:	e0bfff17 	ldw	r2,-4(fp)
   611a4:	10c00617 	ldw	r3,24(r2)
   611a8:	008001b4 	movhi	r2,6
   611ac:	10837804 	addi	r2,r2,3552
   611b0:	1880021e 	bne	r3,r2,611bc <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   611b4:	e0bffd17 	ldw	r2,-12(fp)
   611b8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   611bc:	e0bfff17 	ldw	r2,-4(fp)
   611c0:	10800317 	ldw	r2,12(r2)
   611c4:	10800204 	addi	r2,r2,8
   611c8:	e0ffff17 	ldw	r3,-4(fp)
   611cc:	18c00317 	ldw	r3,12(r3)
   611d0:	18c00204 	addi	r3,r3,8
   611d4:	18c00037 	ldwio	r3,0(r3)
   611d8:	18c00054 	ori	r3,r3,1
   611dc:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   611e0:	0005883a 	mov	r2,zero
}
   611e4:	e037883a 	mov	sp,fp
   611e8:	df000017 	ldw	fp,0(sp)
   611ec:	dec00104 	addi	sp,sp,4
   611f0:	f800283a 	ret

000611f4 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   611f4:	defffe04 	addi	sp,sp,-8
   611f8:	df000115 	stw	fp,4(sp)
   611fc:	df000104 	addi	fp,sp,4
   61200:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   61204:	e0bfff17 	ldw	r2,-4(fp)
   61208:	10800317 	ldw	r2,12(r2)
   6120c:	10800204 	addi	r2,r2,8
   61210:	e0ffff17 	ldw	r3,-4(fp)
   61214:	18c00317 	ldw	r3,12(r3)
   61218:	18c00204 	addi	r3,r3,8
   6121c:	19000037 	ldwio	r4,0(r3)
   61220:	00ffff84 	movi	r3,-2
   61224:	20c6703a 	and	r3,r4,r3
   61228:	10c00035 	stwio	r3,0(r2)

}
   6122c:	0001883a 	nop
   61230:	e037883a 	mov	sp,fp
   61234:	df000017 	ldw	fp,0(sp)
   61238:	dec00104 	addi	sp,sp,4
   6123c:	f800283a 	ret

00061240 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   61240:	defffd04 	addi	sp,sp,-12
   61244:	df000215 	stw	fp,8(sp)
   61248:	df000204 	addi	fp,sp,8
   6124c:	e13ffe15 	stw	r4,-8(fp)
   61250:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   61254:	e0bffe17 	ldw	r2,-8(fp)
   61258:	10c00d17 	ldw	r3,52(r2)
   6125c:	e0bfff17 	ldw	r2,-4(fp)
   61260:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   61264:	e0bffe17 	ldw	r2,-8(fp)
   61268:	10800317 	ldw	r2,12(r2)
   6126c:	10800204 	addi	r2,r2,8
   61270:	10800037 	ldwio	r2,0(r2)
   61274:	1080008c 	andi	r2,r2,2
   61278:	1005d07a 	srai	r2,r2,1
   6127c:	1007883a 	mov	r3,r2
   61280:	e0bfff17 	ldw	r2,-4(fp)
   61284:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   61288:	e0bffe17 	ldw	r2,-8(fp)
   6128c:	10800317 	ldw	r2,12(r2)
   61290:	10800904 	addi	r2,r2,36
   61294:	10800037 	ldwio	r2,0(r2)
   61298:	1007883a 	mov	r3,r2
   6129c:	e0bfff17 	ldw	r2,-4(fp)
   612a0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   612a4:	e0bffe17 	ldw	r2,-8(fp)
   612a8:	10800317 	ldw	r2,12(r2)
   612ac:	10800804 	addi	r2,r2,32
   612b0:	10800037 	ldwio	r2,0(r2)
   612b4:	1007883a 	mov	r3,r2
   612b8:	e0bfff17 	ldw	r2,-4(fp)
   612bc:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   612c0:	e0bffe17 	ldw	r2,-8(fp)
   612c4:	10800317 	ldw	r2,12(r2)
   612c8:	10800a04 	addi	r2,r2,40
   612cc:	10800037 	ldwio	r2,0(r2)
   612d0:	1007883a 	mov	r3,r2
   612d4:	e0bfff17 	ldw	r2,-4(fp)
   612d8:	10c0030d 	sth	r3,12(r2)
}
   612dc:	0001883a 	nop
   612e0:	e037883a 	mov	sp,fp
   612e4:	df000017 	ldw	fp,0(sp)
   612e8:	dec00104 	addi	sp,sp,4
   612ec:	f800283a 	ret

000612f0 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   612f0:	defffd04 	addi	sp,sp,-12
   612f4:	df000215 	stw	fp,8(sp)
   612f8:	df000204 	addi	fp,sp,8
   612fc:	e13ffe15 	stw	r4,-8(fp)
   61300:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   61304:	e0bfff17 	ldw	r2,-4(fp)
   61308:	10c00017 	ldw	r3,0(r2)
   6130c:	e0bffe17 	ldw	r2,-8(fp)
   61310:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   61314:	e0bffe17 	ldw	r2,-8(fp)
   61318:	10800317 	ldw	r2,12(r2)
   6131c:	10c00204 	addi	r3,r2,8
   61320:	e0bffe17 	ldw	r2,-8(fp)
   61324:	10800317 	ldw	r2,12(r2)
   61328:	10800204 	addi	r2,r2,8
   6132c:	10800037 	ldwio	r2,0(r2)
   61330:	1009883a 	mov	r4,r2
   61334:	00bfff44 	movi	r2,-3
   61338:	2088703a 	and	r4,r4,r2
   6133c:	e0bfff17 	ldw	r2,-4(fp)
   61340:	10800117 	ldw	r2,4(r2)
   61344:	1085883a 	add	r2,r2,r2
   61348:	1080008c 	andi	r2,r2,2
   6134c:	2084b03a 	or	r2,r4,r2
   61350:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   61354:	e0bffe17 	ldw	r2,-8(fp)
   61358:	10800317 	ldw	r2,12(r2)
   6135c:	10800904 	addi	r2,r2,36
   61360:	e0ffff17 	ldw	r3,-4(fp)
   61364:	18c0020b 	ldhu	r3,8(r3)
   61368:	18ffffcc 	andi	r3,r3,65535
   6136c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   61370:	e0bffe17 	ldw	r2,-8(fp)
   61374:	10800317 	ldw	r2,12(r2)
   61378:	10800804 	addi	r2,r2,32
   6137c:	e0ffff17 	ldw	r3,-4(fp)
   61380:	18c0028b 	ldhu	r3,10(r3)
   61384:	18ffffcc 	andi	r3,r3,65535
   61388:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   6138c:	e0bffe17 	ldw	r2,-8(fp)
   61390:	10800317 	ldw	r2,12(r2)
   61394:	10800a04 	addi	r2,r2,40
   61398:	e0ffff17 	ldw	r3,-4(fp)
   6139c:	18c0030b 	ldhu	r3,12(r3)
   613a0:	18ffffcc 	andi	r3,r3,65535
   613a4:	10c00035 	stwio	r3,0(r2)
}
   613a8:	0001883a 	nop
   613ac:	e037883a 	mov	sp,fp
   613b0:	df000017 	ldw	fp,0(sp)
   613b4:	dec00104 	addi	sp,sp,4
   613b8:	f800283a 	ret

000613bc <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   613bc:	defffb04 	addi	sp,sp,-20
   613c0:	dfc00415 	stw	ra,16(sp)
   613c4:	df000315 	stw	fp,12(sp)
   613c8:	df000304 	addi	fp,sp,12
   613cc:	e13ffd15 	stw	r4,-12(fp)
   613d0:	e17ffe15 	stw	r5,-8(fp)
   613d4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   613d8:	e0bffe17 	ldw	r2,-8(fp)
   613dc:	1080028b 	ldhu	r2,10(r2)
   613e0:	10bfffcc 	andi	r2,r2,65535
   613e4:	10000426 	beq	r2,zero,613f8 <alt_avalon_i2c_master_config_speed_get+0x3c>
   613e8:	e0bffe17 	ldw	r2,-8(fp)
   613ec:	1080020b 	ldhu	r2,8(r2)
   613f0:	10bfffcc 	andi	r2,r2,65535
   613f4:	1000021e 	bne	r2,zero,61400 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   613f8:	00bfff44 	movi	r2,-3
   613fc:	00000f06 	br	6143c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   61400:	e0bffd17 	ldw	r2,-12(fp)
   61404:	11000c17 	ldw	r4,48(r2)
   61408:	e0bffe17 	ldw	r2,-8(fp)
   6140c:	1080028b 	ldhu	r2,10(r2)
   61410:	10ffffcc 	andi	r3,r2,65535
   61414:	e0bffe17 	ldw	r2,-8(fp)
   61418:	1080020b 	ldhu	r2,8(r2)
   6141c:	10bfffcc 	andi	r2,r2,65535
   61420:	1885883a 	add	r2,r3,r2
   61424:	100b883a 	mov	r5,r2
   61428:	004d9f80 	call	4d9f8 <__udivsi3>
   6142c:	1007883a 	mov	r3,r2
   61430:	e0bfff17 	ldw	r2,-4(fp)
   61434:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   61438:	0005883a 	mov	r2,zero
}
   6143c:	e037883a 	mov	sp,fp
   61440:	dfc00117 	ldw	ra,4(sp)
   61444:	df000017 	ldw	fp,0(sp)
   61448:	dec00204 	addi	sp,sp,8
   6144c:	f800283a 	ret

00061450 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   61450:	defff904 	addi	sp,sp,-28
   61454:	dfc00615 	stw	ra,24(sp)
   61458:	df000515 	stw	fp,20(sp)
   6145c:	df000504 	addi	fp,sp,20
   61460:	e13ffd15 	stw	r4,-12(fp)
   61464:	e17ffe15 	stw	r5,-8(fp)
   61468:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   6146c:	e0ffff17 	ldw	r3,-4(fp)
   61470:	008001b4 	movhi	r2,6
   61474:	1086a004 	addi	r2,r2,6784
   61478:	10c00436 	bltu	r2,r3,6148c <alt_avalon_i2c_master_config_speed_set+0x3c>
   6147c:	e0bfff17 	ldw	r2,-4(fp)
   61480:	10000226 	beq	r2,zero,6148c <alt_avalon_i2c_master_config_speed_set+0x3c>
   61484:	e0bfff17 	ldw	r2,-4(fp)
   61488:	1000021e 	bne	r2,zero,61494 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   6148c:	00bfff04 	movi	r2,-4
   61490:	00002906 	br	61538 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   61494:	e0bffd17 	ldw	r2,-12(fp)
   61498:	10c00c17 	ldw	r3,48(r2)
   6149c:	e0bfff17 	ldw	r2,-4(fp)
   614a0:	1085883a 	add	r2,r2,r2
   614a4:	100b883a 	mov	r5,r2
   614a8:	1809883a 	mov	r4,r3
   614ac:	004d9f80 	call	4d9f8 <__udivsi3>
   614b0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   614b4:	e0bffb17 	ldw	r2,-20(fp)
   614b8:	10800f04 	addi	r2,r2,60
   614bc:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   614c0:	e0bffb17 	ldw	r2,-20(fp)
   614c4:	10bff104 	addi	r2,r2,-60
   614c8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   614cc:	e0ffff17 	ldw	r3,-4(fp)
   614d0:	008000b4 	movhi	r2,2
   614d4:	10a1a804 	addi	r2,r2,-31072
   614d8:	10c0042e 	bgeu	r2,r3,614ec <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   614dc:	e0bffe17 	ldw	r2,-8(fp)
   614e0:	00c00044 	movi	r3,1
   614e4:	10c00115 	stw	r3,4(r2)
   614e8:	00000206 	br	614f4 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   614ec:	e0bffe17 	ldw	r2,-8(fp)
   614f0:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   614f4:	e0bffb17 	ldw	r2,-20(fp)
   614f8:	1007883a 	mov	r3,r2
   614fc:	e0bffe17 	ldw	r2,-8(fp)
   61500:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   61504:	e0bffc17 	ldw	r2,-16(fp)
   61508:	1007883a 	mov	r3,r2
   6150c:	e0bffe17 	ldw	r2,-8(fp)
   61510:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   61514:	e0bffb17 	ldw	r2,-20(fp)
   61518:	1007883a 	mov	r3,r2
   6151c:	e0bffb17 	ldw	r2,-20(fp)
   61520:	1004d07a 	srli	r2,r2,1
   61524:	1885c83a 	sub	r2,r3,r2
   61528:	1007883a 	mov	r3,r2
   6152c:	e0bffe17 	ldw	r2,-8(fp)
   61530:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   61534:	0005883a 	mov	r2,zero

}
   61538:	e037883a 	mov	sp,fp
   6153c:	dfc00117 	ldw	ra,4(sp)
   61540:	df000017 	ldw	fp,0(sp)
   61544:	dec00204 	addi	sp,sp,8
   61548:	f800283a 	ret

0006154c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   6154c:	defffe04 	addi	sp,sp,-8
   61550:	df000115 	stw	fp,4(sp)
   61554:	df000104 	addi	fp,sp,4
   61558:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   6155c:	e0bfff17 	ldw	r2,-4(fp)
   61560:	10800317 	ldw	r2,12(r2)
   61564:	10800504 	addi	r2,r2,20
   61568:	10800037 	ldwio	r2,0(r2)
   6156c:	1080004c 	andi	r2,r2,1
   61570:	10000226 	beq	r2,zero,6157c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   61574:	00800044 	movi	r2,1
   61578:	00000106 	br	61580 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   6157c:	0005883a 	mov	r2,zero
}
   61580:	e037883a 	mov	sp,fp
   61584:	df000017 	ldw	fp,0(sp)
   61588:	dec00104 	addi	sp,sp,4
   6158c:	f800283a 	ret

00061590 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   61590:	defffb04 	addi	sp,sp,-20
   61594:	df000415 	stw	fp,16(sp)
   61598:	df000404 	addi	fp,sp,16
   6159c:	e13ffc15 	stw	r4,-16(fp)
   615a0:	e17ffd15 	stw	r5,-12(fp)
   615a4:	e1bffe15 	stw	r6,-8(fp)
   615a8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   615ac:	e0bfff17 	ldw	r2,-4(fp)
   615b0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   615b4:	00001406 	br	61608 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   615b8:	e0bfff17 	ldw	r2,-4(fp)
   615bc:	10800017 	ldw	r2,0(r2)
   615c0:	e0fffd17 	ldw	r3,-12(fp)
   615c4:	1885883a 	add	r2,r3,r2
   615c8:	e0fffc17 	ldw	r3,-16(fp)
   615cc:	18c00317 	ldw	r3,12(r3)
   615d0:	18c00104 	addi	r3,r3,4
   615d4:	18c00037 	ldwio	r3,0(r3)
   615d8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   615dc:	e0bfff17 	ldw	r2,-4(fp)
   615e0:	10800017 	ldw	r2,0(r2)
   615e4:	10c00044 	addi	r3,r2,1
   615e8:	e0bfff17 	ldw	r2,-4(fp)
   615ec:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   615f0:	e0bfff17 	ldw	r2,-4(fp)
   615f4:	10c00017 	ldw	r3,0(r2)
   615f8:	e0bffe17 	ldw	r2,-8(fp)
   615fc:	1880021e 	bne	r3,r2,61608 <alt_avalon_i2c_rx_read_available+0x78>
   61600:	e0bffe17 	ldw	r2,-8(fp)
   61604:	1000061e 	bne	r2,zero,61620 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   61608:	e0bffc17 	ldw	r2,-16(fp)
   6160c:	10800317 	ldw	r2,12(r2)
   61610:	10800704 	addi	r2,r2,28
   61614:	10800037 	ldwio	r2,0(r2)
   61618:	103fe71e 	bne	r2,zero,615b8 <__alt_data_end+0xfffe15b8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   6161c:	00000106 	br	61624 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   61620:	0001883a 	nop
    }
}
   61624:	0001883a 	nop
   61628:	e037883a 	mov	sp,fp
   6162c:	df000017 	ldw	fp,0(sp)
   61630:	dec00104 	addi	sp,sp,4
   61634:	f800283a 	ret

00061638 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   61638:	defffa04 	addi	sp,sp,-24
   6163c:	dfc00515 	stw	ra,20(sp)
   61640:	df000415 	stw	fp,16(sp)
   61644:	df000404 	addi	fp,sp,16
   61648:	e13ffe15 	stw	r4,-8(fp)
   6164c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   61650:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   61654:	008000b4 	movhi	r2,2
   61658:	10a1a804 	addi	r2,r2,-31072
   6165c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   61660:	00000d06 	br	61698 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   61664:	e0bffd17 	ldw	r2,-12(fp)
   61668:	108002a8 	cmpgeui	r2,r2,10
   6166c:	1000021e 	bne	r2,zero,61678 <alt_avalon_i2c_rx_read+0x40>
   61670:	0109c404 	movi	r4,10000
   61674:	006387c0 	call	6387c <alt_busy_sleep>
      if (--timeout == 0)
   61678:	e0bffd17 	ldw	r2,-12(fp)
   6167c:	10bfffc4 	addi	r2,r2,-1
   61680:	e0bffd15 	stw	r2,-12(fp)
   61684:	e0bffd17 	ldw	r2,-12(fp)
   61688:	1000031e 	bne	r2,zero,61698 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   6168c:	00bfff84 	movi	r2,-2
   61690:	e0bffc15 	stw	r2,-16(fp)
        break;
   61694:	00000506 	br	616ac <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   61698:	e0bffe17 	ldw	r2,-8(fp)
   6169c:	10800317 	ldw	r2,12(r2)
   616a0:	10800704 	addi	r2,r2,28
   616a4:	10800037 	ldwio	r2,0(r2)
   616a8:	103fee26 	beq	r2,zero,61664 <__alt_data_end+0xfffe1664>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   616ac:	e0bffe17 	ldw	r2,-8(fp)
   616b0:	10800317 	ldw	r2,12(r2)
   616b4:	10800104 	addi	r2,r2,4
   616b8:	10800037 	ldwio	r2,0(r2)
   616bc:	1007883a 	mov	r3,r2
   616c0:	e0bfff17 	ldw	r2,-4(fp)
   616c4:	10c00005 	stb	r3,0(r2)
        
    return status;
   616c8:	e0bffc17 	ldw	r2,-16(fp)
}
   616cc:	e037883a 	mov	sp,fp
   616d0:	dfc00117 	ldw	ra,4(sp)
   616d4:	df000017 	ldw	fp,0(sp)
   616d8:	dec00204 	addi	sp,sp,8
   616dc:	f800283a 	ret

000616e0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   616e0:	defff804 	addi	sp,sp,-32
   616e4:	dfc00715 	stw	ra,28(sp)
   616e8:	df000615 	stw	fp,24(sp)
   616ec:	df000604 	addi	fp,sp,24
   616f0:	e13ffc15 	stw	r4,-16(fp)
   616f4:	2809883a 	mov	r4,r5
   616f8:	3007883a 	mov	r3,r6
   616fc:	3805883a 	mov	r2,r7
   61700:	e13ffd05 	stb	r4,-12(fp)
   61704:	e0fffe05 	stb	r3,-8(fp)
   61708:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   6170c:	0089c404 	movi	r2,10000
   61710:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   61714:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   61718:	00000c06 	br	6174c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   6171c:	e0bffa17 	ldw	r2,-24(fp)
   61720:	108002a8 	cmpgeui	r2,r2,10
   61724:	1000021e 	bne	r2,zero,61730 <alt_avalon_i2c_cmd_write+0x50>
   61728:	0109c404 	movi	r4,10000
   6172c:	006387c0 	call	6387c <alt_busy_sleep>
      if (--timeout == 0)
   61730:	e0bffa17 	ldw	r2,-24(fp)
   61734:	10bfffc4 	addi	r2,r2,-1
   61738:	e0bffa15 	stw	r2,-24(fp)
   6173c:	e0bffa17 	ldw	r2,-24(fp)
   61740:	1000021e 	bne	r2,zero,6174c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   61744:	00bfff84 	movi	r2,-2
   61748:	00001906 	br	617b0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   6174c:	e0bffc17 	ldw	r2,-16(fp)
   61750:	10800317 	ldw	r2,12(r2)
   61754:	10800404 	addi	r2,r2,16
   61758:	10800037 	ldwio	r2,0(r2)
   6175c:	1080004c 	andi	r2,r2,1
   61760:	103fee26 	beq	r2,zero,6171c <__alt_data_end+0xfffe171c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   61764:	e0bffc17 	ldw	r2,-16(fp)
   61768:	10800317 	ldw	r2,12(r2)
   6176c:	e13ffd03 	ldbu	r4,-12(fp)
   61770:	e0fffe03 	ldbu	r3,-8(fp)
   61774:	1806927a 	slli	r3,r3,9
   61778:	20c8b03a 	or	r4,r4,r3
   6177c:	e0ffff03 	ldbu	r3,-4(fp)
   61780:	1806923a 	slli	r3,r3,8
   61784:	20c6b03a 	or	r3,r4,r3
   61788:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   6178c:	e0bffb04 	addi	r2,fp,-20
   61790:	100b883a 	mov	r5,r2
   61794:	e13ffc17 	ldw	r4,-16(fp)
   61798:	00619200 	call	61920 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   6179c:	e0bffb04 	addi	r2,fp,-20
   617a0:	100b883a 	mov	r5,r2
   617a4:	e13ffc17 	ldw	r4,-16(fp)
   617a8:	006196c0 	call	6196c <alt_avalon_i2c_check_arblost>
    
    return status;
   617ac:	e0bffb17 	ldw	r2,-20(fp)
}
   617b0:	e037883a 	mov	sp,fp
   617b4:	dfc00117 	ldw	ra,4(sp)
   617b8:	df000017 	ldw	fp,0(sp)
   617bc:	dec00204 	addi	sp,sp,8
   617c0:	f800283a 	ret

000617c4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   617c4:	defffa04 	addi	sp,sp,-24
   617c8:	dfc00515 	stw	ra,20(sp)
   617cc:	df000415 	stw	fp,16(sp)
   617d0:	df000404 	addi	fp,sp,16
   617d4:	e13ffd15 	stw	r4,-12(fp)
   617d8:	e17ffe15 	stw	r5,-8(fp)
   617dc:	3005883a 	mov	r2,r6
   617e0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   617e4:	e0bffd17 	ldw	r2,-12(fp)
   617e8:	10800d17 	ldw	r2,52(r2)
   617ec:	10800058 	cmpnei	r2,r2,1
   617f0:	10001c1e 	bne	r2,zero,61864 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   617f4:	e0bffd17 	ldw	r2,-12(fp)
   617f8:	10800917 	ldw	r2,36(r2)
   617fc:	109e0014 	ori	r2,r2,30720
   61800:	1004d1fa 	srli	r2,r2,7
   61804:	1007883a 	mov	r3,r2
   61808:	00bfff84 	movi	r2,-2
   6180c:	1884703a 	and	r2,r3,r2
   61810:	1007883a 	mov	r3,r2
   61814:	e0bffe17 	ldw	r2,-8(fp)
   61818:	1884b03a 	or	r2,r3,r2
   6181c:	10803fcc 	andi	r2,r2,255
   61820:	e0ffff03 	ldbu	r3,-4(fp)
   61824:	000f883a 	mov	r7,zero
   61828:	180d883a 	mov	r6,r3
   6182c:	100b883a 	mov	r5,r2
   61830:	e13ffd17 	ldw	r4,-12(fp)
   61834:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   61838:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   6183c:	e0bffd17 	ldw	r2,-12(fp)
   61840:	10800917 	ldw	r2,36(r2)
   61844:	10803fcc 	andi	r2,r2,255
   61848:	000f883a 	mov	r7,zero
   6184c:	000d883a 	mov	r6,zero
   61850:	100b883a 	mov	r5,r2
   61854:	e13ffd17 	ldw	r4,-12(fp)
   61858:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   6185c:	e0bffc15 	stw	r2,-16(fp)
   61860:	00000e06 	br	6189c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   61864:	e0bffd17 	ldw	r2,-12(fp)
   61868:	10800917 	ldw	r2,36(r2)
   6186c:	1085883a 	add	r2,r2,r2
   61870:	1007883a 	mov	r3,r2
   61874:	e0bffe17 	ldw	r2,-8(fp)
   61878:	1884b03a 	or	r2,r3,r2
   6187c:	10803fcc 	andi	r2,r2,255
   61880:	e0ffff03 	ldbu	r3,-4(fp)
   61884:	000f883a 	mov	r7,zero
   61888:	180d883a 	mov	r6,r3
   6188c:	100b883a 	mov	r5,r2
   61890:	e13ffd17 	ldw	r4,-12(fp)
   61894:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   61898:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   6189c:	e0bffc17 	ldw	r2,-16(fp)
}
   618a0:	e037883a 	mov	sp,fp
   618a4:	dfc00117 	ldw	ra,4(sp)
   618a8:	df000017 	ldw	fp,0(sp)
   618ac:	dec00204 	addi	sp,sp,8
   618b0:	f800283a 	ret

000618b4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   618b4:	defffd04 	addi	sp,sp,-12
   618b8:	df000215 	stw	fp,8(sp)
   618bc:	df000204 	addi	fp,sp,8
   618c0:	e13ffe15 	stw	r4,-8(fp)
   618c4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   618c8:	e0bffe17 	ldw	r2,-8(fp)
   618cc:	10c00917 	ldw	r3,36(r2)
   618d0:	e0bfff17 	ldw	r2,-4(fp)
   618d4:	10c00015 	stw	r3,0(r2)
}
   618d8:	0001883a 	nop
   618dc:	e037883a 	mov	sp,fp
   618e0:	df000017 	ldw	fp,0(sp)
   618e4:	dec00104 	addi	sp,sp,4
   618e8:	f800283a 	ret

000618ec <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   618ec:	defffd04 	addi	sp,sp,-12
   618f0:	df000215 	stw	fp,8(sp)
   618f4:	df000204 	addi	fp,sp,8
   618f8:	e13ffe15 	stw	r4,-8(fp)
   618fc:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   61900:	e0bffe17 	ldw	r2,-8(fp)
   61904:	e0ffff17 	ldw	r3,-4(fp)
   61908:	10c00915 	stw	r3,36(r2)
}
   6190c:	0001883a 	nop
   61910:	e037883a 	mov	sp,fp
   61914:	df000017 	ldw	fp,0(sp)
   61918:	dec00104 	addi	sp,sp,4
   6191c:	f800283a 	ret

00061920 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   61920:	defffd04 	addi	sp,sp,-12
   61924:	df000215 	stw	fp,8(sp)
   61928:	df000204 	addi	fp,sp,8
   6192c:	e13ffe15 	stw	r4,-8(fp)
   61930:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   61934:	e0bffe17 	ldw	r2,-8(fp)
   61938:	10800317 	ldw	r2,12(r2)
   6193c:	10800404 	addi	r2,r2,16
   61940:	10800037 	ldwio	r2,0(r2)
   61944:	1080010c 	andi	r2,r2,4
   61948:	10000326 	beq	r2,zero,61958 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   6194c:	e0bfff17 	ldw	r2,-4(fp)
   61950:	00fffec4 	movi	r3,-5
   61954:	10c00015 	stw	r3,0(r2)
    }
}
   61958:	0001883a 	nop
   6195c:	e037883a 	mov	sp,fp
   61960:	df000017 	ldw	fp,0(sp)
   61964:	dec00104 	addi	sp,sp,4
   61968:	f800283a 	ret

0006196c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   6196c:	defffd04 	addi	sp,sp,-12
   61970:	df000215 	stw	fp,8(sp)
   61974:	df000204 	addi	fp,sp,8
   61978:	e13ffe15 	stw	r4,-8(fp)
   6197c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   61980:	e0bffe17 	ldw	r2,-8(fp)
   61984:	10800317 	ldw	r2,12(r2)
   61988:	10800404 	addi	r2,r2,16
   6198c:	10800037 	ldwio	r2,0(r2)
   61990:	1080020c 	andi	r2,r2,8
   61994:	10000326 	beq	r2,zero,619a4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   61998:	e0bfff17 	ldw	r2,-4(fp)
   6199c:	00fffe84 	movi	r3,-6
   619a0:	10c00015 	stw	r3,0(r2)
    }
}
   619a4:	0001883a 	nop
   619a8:	e037883a 	mov	sp,fp
   619ac:	df000017 	ldw	fp,0(sp)
   619b0:	dec00104 	addi	sp,sp,4
   619b4:	f800283a 	ret

000619b8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   619b8:	defff804 	addi	sp,sp,-32
   619bc:	dfc00715 	stw	ra,28(sp)
   619c0:	df000615 	stw	fp,24(sp)
   619c4:	df000604 	addi	fp,sp,24
   619c8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   619cc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   619d0:	e0bfff17 	ldw	r2,-4(fp)
   619d4:	10800717 	ldw	r2,28(r2)
   619d8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   619dc:	e0bffb17 	ldw	r2,-20(fp)
   619e0:	10800117 	ldw	r2,4(r2)
   619e4:	10800044 	addi	r2,r2,1
   619e8:	0149c404 	movi	r5,10000
   619ec:	1009883a 	mov	r4,r2
   619f0:	004dab40 	call	4dab4 <__mulsi3>
   619f4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   619f8:	e0bffd04 	addi	r2,fp,-12
   619fc:	100b883a 	mov	r5,r2
   61a00:	e13fff17 	ldw	r4,-4(fp)
   61a04:	00628500 	call	62850 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   61a08:	e0bffd17 	ldw	r2,-12(fp)
   61a0c:	100b883a 	mov	r5,r2
   61a10:	e13fff17 	ldw	r4,-4(fp)
   61a14:	00627840 	call	62784 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   61a18:	e0bffc04 	addi	r2,fp,-16
   61a1c:	100b883a 	mov	r5,r2
   61a20:	e13fff17 	ldw	r4,-4(fp)
   61a24:	00619200 	call	61920 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   61a28:	e0bffc17 	ldw	r2,-16(fp)
   61a2c:	10002226 	beq	r2,zero,61ab8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   61a30:	e0bffb17 	ldw	r2,-20(fp)
   61a34:	10800217 	ldw	r2,8(r2)
   61a38:	10001d26 	beq	r2,zero,61ab0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   61a3c:	00000d06 	br	61a74 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   61a40:	e0bffa17 	ldw	r2,-24(fp)
   61a44:	108002a8 	cmpgeui	r2,r2,10
   61a48:	1000021e 	bne	r2,zero,61a54 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   61a4c:	0109c404 	movi	r4,10000
   61a50:	006387c0 	call	6387c <alt_busy_sleep>
              if (--timeout == 0)
   61a54:	e0bffa17 	ldw	r2,-24(fp)
   61a58:	10bfffc4 	addi	r2,r2,-1
   61a5c:	e0bffa15 	stw	r2,-24(fp)
   61a60:	e0bffa17 	ldw	r2,-24(fp)
   61a64:	1000031e 	bne	r2,zero,61a74 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   61a68:	00bfff84 	movi	r2,-2
   61a6c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   61a70:	00000306 	br	61a80 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   61a74:	e13fff17 	ldw	r4,-4(fp)
   61a78:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   61a7c:	103ff01e 	bne	r2,zero,61a40 <__alt_data_end+0xfffe1a40>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   61a80:	e0bffb17 	ldw	r2,-20(fp)
   61a84:	10800017 	ldw	r2,0(r2)
   61a88:	e0fffe04 	addi	r3,fp,-8
   61a8c:	180f883a 	mov	r7,r3
   61a90:	000d883a 	mov	r6,zero
   61a94:	100b883a 	mov	r5,r2
   61a98:	e13fff17 	ldw	r4,-4(fp)
   61a9c:	00615900 	call	61590 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   61aa0:	e13fff17 	ldw	r4,-4(fp)
   61aa4:	00611f40 	call	611f4 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   61aa8:	e0bffb17 	ldw	r2,-20(fp)
   61aac:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   61ab0:	e0bffc17 	ldw	r2,-16(fp)
   61ab4:	00000a06 	br	61ae0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   61ab8:	e0bffb17 	ldw	r2,-20(fp)
   61abc:	10800217 	ldw	r2,8(r2)
   61ac0:	10000626 	beq	r2,zero,61adc <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   61ac4:	e0bffd17 	ldw	r2,-12(fp)
   61ac8:	100b883a 	mov	r5,r2
   61acc:	e13fff17 	ldw	r4,-4(fp)
   61ad0:	00627ec0 	call	627ec <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   61ad4:	00bffe44 	movi	r2,-7
   61ad8:	00000106 	br	61ae0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   61adc:	0005883a 	mov	r2,zero
}
   61ae0:	e037883a 	mov	sp,fp
   61ae4:	dfc00117 	ldw	ra,4(sp)
   61ae8:	df000017 	ldw	fp,0(sp)
   61aec:	dec00204 	addi	sp,sp,8
   61af0:	f800283a 	ret

00061af4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   61af4:	defff704 	addi	sp,sp,-36
   61af8:	dfc00815 	stw	ra,32(sp)
   61afc:	df000715 	stw	fp,28(sp)
   61b00:	df000704 	addi	fp,sp,28
   61b04:	e13ffc15 	stw	r4,-16(fp)
   61b08:	e17ffd15 	stw	r5,-12(fp)
   61b0c:	e1bffe15 	stw	r6,-8(fp)
   61b10:	3805883a 	mov	r2,r7
   61b14:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   61b18:	0089c404 	movi	r2,10000
   61b1c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   61b20:	00002206 	br	61bac <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   61b24:	e0bffb17 	ldw	r2,-20(fp)
   61b28:	108002a8 	cmpgeui	r2,r2,10
   61b2c:	1000021e 	bne	r2,zero,61b38 <alt_avalon_i2c_master_tx+0x44>
   61b30:	0109c404 	movi	r4,10000
   61b34:	006387c0 	call	6387c <alt_busy_sleep>
      if (use_interrupts)
   61b38:	e0bfff03 	ldbu	r2,-4(fp)
   61b3c:	10000926 	beq	r2,zero,61b64 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   61b40:	00800044 	movi	r2,1
   61b44:	d8800015 	stw	r2,0(sp)
   61b48:	000f883a 	mov	r7,zero
   61b4c:	e1bffe17 	ldw	r6,-8(fp)
   61b50:	e17ffd17 	ldw	r5,-12(fp)
   61b54:	e13ffc17 	ldw	r4,-16(fp)
   61b58:	00620a00 	call	620a0 <alt_avalon_i2c_master_transmit_using_interrupts>
   61b5c:	e0bffa15 	stw	r2,-24(fp)
   61b60:	00000806 	br	61b84 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   61b64:	00800044 	movi	r2,1
   61b68:	d8800015 	stw	r2,0(sp)
   61b6c:	000f883a 	mov	r7,zero
   61b70:	e1bffe17 	ldw	r6,-8(fp)
   61b74:	e17ffd17 	ldw	r5,-12(fp)
   61b78:	e13ffc17 	ldw	r4,-16(fp)
   61b7c:	0061ee00 	call	61ee0 <alt_avalon_i2c_master_transmit>
   61b80:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61b84:	e0bffa17 	ldw	r2,-24(fp)
   61b88:	10bffea0 	cmpeqi	r2,r2,-6
   61b8c:	1000061e 	bne	r2,zero,61ba8 <alt_avalon_i2c_master_tx+0xb4>
   61b90:	e0bffa17 	ldw	r2,-24(fp)
   61b94:	10bffee0 	cmpeqi	r2,r2,-5
   61b98:	1000031e 	bne	r2,zero,61ba8 <alt_avalon_i2c_master_tx+0xb4>
   61b9c:	e0bffa17 	ldw	r2,-24(fp)
   61ba0:	10bffe58 	cmpnei	r2,r2,-7
   61ba4:	1000061e 	bne	r2,zero,61bc0 <alt_avalon_i2c_master_tx+0xcc>
   61ba8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   61bac:	e0bffb17 	ldw	r2,-20(fp)
   61bb0:	10ffffc4 	addi	r3,r2,-1
   61bb4:	e0fffb15 	stw	r3,-20(fp)
   61bb8:	103fda1e 	bne	r2,zero,61b24 <__alt_data_end+0xfffe1b24>
   61bbc:	00000106 	br	61bc4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   61bc0:	0001883a 	nop
    }

    return status;
   61bc4:	e0bffa17 	ldw	r2,-24(fp)
}        
   61bc8:	e037883a 	mov	sp,fp
   61bcc:	dfc00117 	ldw	ra,4(sp)
   61bd0:	df000017 	ldw	fp,0(sp)
   61bd4:	dec00204 	addi	sp,sp,8
   61bd8:	f800283a 	ret

00061bdc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   61bdc:	defff704 	addi	sp,sp,-36
   61be0:	dfc00815 	stw	ra,32(sp)
   61be4:	df000715 	stw	fp,28(sp)
   61be8:	df000704 	addi	fp,sp,28
   61bec:	e13ffc15 	stw	r4,-16(fp)
   61bf0:	e17ffd15 	stw	r5,-12(fp)
   61bf4:	e1bffe15 	stw	r6,-8(fp)
   61bf8:	3805883a 	mov	r2,r7
   61bfc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   61c00:	0089c404 	movi	r2,10000
   61c04:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   61c08:	e0bfff03 	ldbu	r2,-4(fp)
   61c0c:	10003426 	beq	r2,zero,61ce0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   61c10:	00001706 	br	61c70 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   61c14:	e0bffb17 	ldw	r2,-20(fp)
   61c18:	108002a8 	cmpgeui	r2,r2,10
   61c1c:	1000021e 	bne	r2,zero,61c28 <alt_avalon_i2c_master_rx+0x4c>
   61c20:	0109c404 	movi	r4,10000
   61c24:	006387c0 	call	6387c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   61c28:	00800044 	movi	r2,1
   61c2c:	d8800015 	stw	r2,0(sp)
   61c30:	000f883a 	mov	r7,zero
   61c34:	e1bffe17 	ldw	r6,-8(fp)
   61c38:	e17ffd17 	ldw	r5,-12(fp)
   61c3c:	e13ffc17 	ldw	r4,-16(fp)
   61c40:	00624bc0 	call	624bc <alt_avalon_i2c_master_receive_using_interrupts>
   61c44:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61c48:	e0bffa17 	ldw	r2,-24(fp)
   61c4c:	10bffea0 	cmpeqi	r2,r2,-6
   61c50:	1000061e 	bne	r2,zero,61c6c <alt_avalon_i2c_master_rx+0x90>
   61c54:	e0bffa17 	ldw	r2,-24(fp)
   61c58:	10bffee0 	cmpeqi	r2,r2,-5
   61c5c:	1000031e 	bne	r2,zero,61c6c <alt_avalon_i2c_master_rx+0x90>
   61c60:	e0bffa17 	ldw	r2,-24(fp)
   61c64:	10bffe58 	cmpnei	r2,r2,-7
   61c68:	1000221e 	bne	r2,zero,61cf4 <alt_avalon_i2c_master_rx+0x118>
   61c6c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   61c70:	e0bffb17 	ldw	r2,-20(fp)
   61c74:	10ffffc4 	addi	r3,r2,-1
   61c78:	e0fffb15 	stw	r3,-20(fp)
   61c7c:	103fe51e 	bne	r2,zero,61c14 <__alt_data_end+0xfffe1c14>
   61c80:	00001f06 	br	61d00 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   61c84:	e0bffb17 	ldw	r2,-20(fp)
   61c88:	108002a8 	cmpgeui	r2,r2,10
   61c8c:	1000021e 	bne	r2,zero,61c98 <alt_avalon_i2c_master_rx+0xbc>
   61c90:	0109c404 	movi	r4,10000
   61c94:	006387c0 	call	6387c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   61c98:	00800044 	movi	r2,1
   61c9c:	d8800015 	stw	r2,0(sp)
   61ca0:	000f883a 	mov	r7,zero
   61ca4:	e1bffe17 	ldw	r6,-8(fp)
   61ca8:	e17ffd17 	ldw	r5,-12(fp)
   61cac:	e13ffc17 	ldw	r4,-16(fp)
   61cb0:	00622ac0 	call	622ac <alt_avalon_i2c_master_receive>
   61cb4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61cb8:	e0bffa17 	ldw	r2,-24(fp)
   61cbc:	10bffea0 	cmpeqi	r2,r2,-6
   61cc0:	1000061e 	bne	r2,zero,61cdc <alt_avalon_i2c_master_rx+0x100>
   61cc4:	e0bffa17 	ldw	r2,-24(fp)
   61cc8:	10bffee0 	cmpeqi	r2,r2,-5
   61ccc:	1000031e 	bne	r2,zero,61cdc <alt_avalon_i2c_master_rx+0x100>
   61cd0:	e0bffa17 	ldw	r2,-24(fp)
   61cd4:	10bffe58 	cmpnei	r2,r2,-7
   61cd8:	1000081e 	bne	r2,zero,61cfc <alt_avalon_i2c_master_rx+0x120>
   61cdc:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   61ce0:	e0bffb17 	ldw	r2,-20(fp)
   61ce4:	10ffffc4 	addi	r3,r2,-1
   61ce8:	e0fffb15 	stw	r3,-20(fp)
   61cec:	103fe51e 	bne	r2,zero,61c84 <__alt_data_end+0xfffe1c84>
   61cf0:	00000306 	br	61d00 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   61cf4:	0001883a 	nop
   61cf8:	00000106 	br	61d00 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   61cfc:	0001883a 	nop
      }
    }
    
    return status;
   61d00:	e0bffa17 	ldw	r2,-24(fp)
}        
   61d04:	e037883a 	mov	sp,fp
   61d08:	dfc00117 	ldw	ra,4(sp)
   61d0c:	df000017 	ldw	fp,0(sp)
   61d10:	dec00204 	addi	sp,sp,8
   61d14:	f800283a 	ret

00061d18 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   61d18:	defff604 	addi	sp,sp,-40
   61d1c:	dfc00915 	stw	ra,36(sp)
   61d20:	df000815 	stw	fp,32(sp)
   61d24:	df000804 	addi	fp,sp,32
   61d28:	e13ffb15 	stw	r4,-20(fp)
   61d2c:	e17ffc15 	stw	r5,-16(fp)
   61d30:	e1bffd15 	stw	r6,-12(fp)
   61d34:	e1fffe15 	stw	r7,-8(fp)
   61d38:	e0800317 	ldw	r2,12(fp)
   61d3c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   61d40:	0089c404 	movi	r2,10000
   61d44:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   61d48:	e0bfff03 	ldbu	r2,-4(fp)
   61d4c:	10005626 	beq	r2,zero,61ea8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   61d50:	00002806 	br	61df4 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   61d54:	e0bffa17 	ldw	r2,-24(fp)
   61d58:	108002a8 	cmpgeui	r2,r2,10
   61d5c:	1000021e 	bne	r2,zero,61d68 <alt_avalon_i2c_master_tx_rx+0x50>
   61d60:	0109c404 	movi	r4,10000
   61d64:	006387c0 	call	6387c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   61d68:	d8000015 	stw	zero,0(sp)
   61d6c:	000f883a 	mov	r7,zero
   61d70:	e1bffd17 	ldw	r6,-12(fp)
   61d74:	e17ffc17 	ldw	r5,-16(fp)
   61d78:	e13ffb17 	ldw	r4,-20(fp)
   61d7c:	00620a00 	call	620a0 <alt_avalon_i2c_master_transmit_using_interrupts>
   61d80:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61d84:	e0bff917 	ldw	r2,-28(fp)
   61d88:	10bffea0 	cmpeqi	r2,r2,-6
   61d8c:	1000191e 	bne	r2,zero,61df4 <alt_avalon_i2c_master_tx_rx+0xdc>
   61d90:	e0bff917 	ldw	r2,-28(fp)
   61d94:	10bffee0 	cmpeqi	r2,r2,-5
   61d98:	1000161e 	bne	r2,zero,61df4 <alt_avalon_i2c_master_tx_rx+0xdc>
   61d9c:	e0bff917 	ldw	r2,-28(fp)
   61da0:	10bffe58 	cmpnei	r2,r2,-7
   61da4:	1000011e 	bne	r2,zero,61dac <alt_avalon_i2c_master_tx_rx+0x94>
   61da8:	00001206 	br	61df4 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   61dac:	00800044 	movi	r2,1
   61db0:	d8800015 	stw	r2,0(sp)
   61db4:	01c00044 	movi	r7,1
   61db8:	e1800217 	ldw	r6,8(fp)
   61dbc:	e17ffe17 	ldw	r5,-8(fp)
   61dc0:	e13ffb17 	ldw	r4,-20(fp)
   61dc4:	00624bc0 	call	624bc <alt_avalon_i2c_master_receive_using_interrupts>
   61dc8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61dcc:	e0bff917 	ldw	r2,-28(fp)
   61dd0:	10bffea0 	cmpeqi	r2,r2,-6
   61dd4:	1000061e 	bne	r2,zero,61df0 <alt_avalon_i2c_master_tx_rx+0xd8>
   61dd8:	e0bff917 	ldw	r2,-28(fp)
   61ddc:	10bffee0 	cmpeqi	r2,r2,-5
   61de0:	1000031e 	bne	r2,zero,61df0 <alt_avalon_i2c_master_tx_rx+0xd8>
   61de4:	e0bff917 	ldw	r2,-28(fp)
   61de8:	10bffe58 	cmpnei	r2,r2,-7
   61dec:	1000331e 	bne	r2,zero,61ebc <alt_avalon_i2c_master_tx_rx+0x1a4>
   61df0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   61df4:	e0bffa17 	ldw	r2,-24(fp)
   61df8:	10ffffc4 	addi	r3,r2,-1
   61dfc:	e0fffa15 	stw	r3,-24(fp)
   61e00:	103fd41e 	bne	r2,zero,61d54 <__alt_data_end+0xfffe1d54>
   61e04:	00003006 	br	61ec8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   61e08:	e0bffa17 	ldw	r2,-24(fp)
   61e0c:	108002a8 	cmpgeui	r2,r2,10
   61e10:	1000021e 	bne	r2,zero,61e1c <alt_avalon_i2c_master_tx_rx+0x104>
   61e14:	0109c404 	movi	r4,10000
   61e18:	006387c0 	call	6387c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   61e1c:	d8000015 	stw	zero,0(sp)
   61e20:	000f883a 	mov	r7,zero
   61e24:	e1bffd17 	ldw	r6,-12(fp)
   61e28:	e17ffc17 	ldw	r5,-16(fp)
   61e2c:	e13ffb17 	ldw	r4,-20(fp)
   61e30:	0061ee00 	call	61ee0 <alt_avalon_i2c_master_transmit>
   61e34:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61e38:	e0bff917 	ldw	r2,-28(fp)
   61e3c:	10bffea0 	cmpeqi	r2,r2,-6
   61e40:	1000191e 	bne	r2,zero,61ea8 <alt_avalon_i2c_master_tx_rx+0x190>
   61e44:	e0bff917 	ldw	r2,-28(fp)
   61e48:	10bffee0 	cmpeqi	r2,r2,-5
   61e4c:	1000161e 	bne	r2,zero,61ea8 <alt_avalon_i2c_master_tx_rx+0x190>
   61e50:	e0bff917 	ldw	r2,-28(fp)
   61e54:	10bffe58 	cmpnei	r2,r2,-7
   61e58:	1000011e 	bne	r2,zero,61e60 <alt_avalon_i2c_master_tx_rx+0x148>
   61e5c:	00001206 	br	61ea8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   61e60:	00800044 	movi	r2,1
   61e64:	d8800015 	stw	r2,0(sp)
   61e68:	01c00044 	movi	r7,1
   61e6c:	e1800217 	ldw	r6,8(fp)
   61e70:	e17ffe17 	ldw	r5,-8(fp)
   61e74:	e13ffb17 	ldw	r4,-20(fp)
   61e78:	00622ac0 	call	622ac <alt_avalon_i2c_master_receive>
   61e7c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   61e80:	e0bff917 	ldw	r2,-28(fp)
   61e84:	10bffea0 	cmpeqi	r2,r2,-6
   61e88:	1000061e 	bne	r2,zero,61ea4 <alt_avalon_i2c_master_tx_rx+0x18c>
   61e8c:	e0bff917 	ldw	r2,-28(fp)
   61e90:	10bffee0 	cmpeqi	r2,r2,-5
   61e94:	1000031e 	bne	r2,zero,61ea4 <alt_avalon_i2c_master_tx_rx+0x18c>
   61e98:	e0bff917 	ldw	r2,-28(fp)
   61e9c:	10bffe58 	cmpnei	r2,r2,-7
   61ea0:	1000081e 	bne	r2,zero,61ec4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   61ea4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   61ea8:	e0bffa17 	ldw	r2,-24(fp)
   61eac:	10ffffc4 	addi	r3,r2,-1
   61eb0:	e0fffa15 	stw	r3,-24(fp)
   61eb4:	103fd41e 	bne	r2,zero,61e08 <__alt_data_end+0xfffe1e08>
   61eb8:	00000306 	br	61ec8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   61ebc:	0001883a 	nop
   61ec0:	00000106 	br	61ec8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   61ec4:	0001883a 	nop
      }
    }
    
    return status;
   61ec8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   61ecc:	e037883a 	mov	sp,fp
   61ed0:	dfc00117 	ldw	ra,4(sp)
   61ed4:	df000017 	ldw	fp,0(sp)
   61ed8:	dec00204 	addi	sp,sp,8
   61edc:	f800283a 	ret

00061ee0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   61ee0:	defff704 	addi	sp,sp,-36
   61ee4:	dfc00815 	stw	ra,32(sp)
   61ee8:	df000715 	stw	fp,28(sp)
   61eec:	df000704 	addi	fp,sp,28
   61ef0:	e13ffb15 	stw	r4,-20(fp)
   61ef4:	e17ffc15 	stw	r5,-16(fp)
   61ef8:	e1bffd15 	stw	r6,-12(fp)
   61efc:	3807883a 	mov	r3,r7
   61f00:	e0800217 	ldw	r2,8(fp)
   61f04:	e0fffe05 	stb	r3,-8(fp)
   61f08:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   61f0c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   61f10:	0149c404 	movi	r5,10000
   61f14:	e13ffd17 	ldw	r4,-12(fp)
   61f18:	004dab40 	call	4dab4 <__mulsi3>
   61f1c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   61f20:	e0bffd17 	ldw	r2,-12(fp)
   61f24:	1000021e 	bne	r2,zero,61f30 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   61f28:	0005883a 	mov	r2,zero
   61f2c:	00005706 	br	6208c <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   61f30:	e0bffe03 	ldbu	r2,-8(fp)
   61f34:	10000a1e 	bne	r2,zero,61f60 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   61f38:	e13ffb17 	ldw	r4,-20(fp)
   61f3c:	006115c0 	call	6115c <alt_avalon_i2c_enable>
   61f40:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   61f44:	e0bffa17 	ldw	r2,-24(fp)
   61f48:	10000226 	beq	r2,zero,61f54 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   61f4c:	e0bffa17 	ldw	r2,-24(fp)
   61f50:	00004e06 	br	6208c <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   61f54:	01400704 	movi	r5,28
   61f58:	e13ffb17 	ldw	r4,-20(fp)
   61f5c:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   61f60:	e0bffe03 	ldbu	r2,-8(fp)
   61f64:	100d883a 	mov	r6,r2
   61f68:	000b883a 	mov	r5,zero
   61f6c:	e13ffb17 	ldw	r4,-20(fp)
   61f70:	00617c40 	call	617c4 <alt_avalon_i2c_send_address>
   61f74:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   61f78:	e0bffa17 	ldw	r2,-24(fp)
   61f7c:	1000271e 	bne	r2,zero,6201c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   61f80:	00000f06 	br	61fc0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   61f84:	e0bffc17 	ldw	r2,-16(fp)
   61f88:	10800003 	ldbu	r2,0(r2)
   61f8c:	10803fcc 	andi	r2,r2,255
   61f90:	000f883a 	mov	r7,zero
   61f94:	000d883a 	mov	r6,zero
   61f98:	100b883a 	mov	r5,r2
   61f9c:	e13ffb17 	ldw	r4,-20(fp)
   61fa0:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   61fa4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   61fa8:	e0bffc17 	ldw	r2,-16(fp)
   61fac:	10800044 	addi	r2,r2,1
   61fb0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   61fb4:	e0bffd17 	ldw	r2,-12(fp)
   61fb8:	10bfffc4 	addi	r2,r2,-1
   61fbc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   61fc0:	e0bffd17 	ldw	r2,-12(fp)
   61fc4:	108000b0 	cmpltui	r2,r2,2
   61fc8:	1000021e 	bne	r2,zero,61fd4 <alt_avalon_i2c_master_transmit+0xf4>
   61fcc:	e0bffa17 	ldw	r2,-24(fp)
   61fd0:	103fec26 	beq	r2,zero,61f84 <__alt_data_end+0xfffe1f84>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   61fd4:	e0bffa17 	ldw	r2,-24(fp)
   61fd8:	1000101e 	bne	r2,zero,6201c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   61fdc:	e0bffc17 	ldw	r2,-16(fp)
   61fe0:	10800003 	ldbu	r2,0(r2)
   61fe4:	10803fcc 	andi	r2,r2,255
   61fe8:	e0ffff03 	ldbu	r3,-4(fp)
   61fec:	180f883a 	mov	r7,r3
   61ff0:	000d883a 	mov	r6,zero
   61ff4:	100b883a 	mov	r5,r2
   61ff8:	e13ffb17 	ldw	r4,-20(fp)
   61ffc:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   62000:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   62004:	e0bffc17 	ldw	r2,-16(fp)
   62008:	10800044 	addi	r2,r2,1
   6200c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   62010:	e0bffd17 	ldw	r2,-12(fp)
   62014:	10bfffc4 	addi	r2,r2,-1
   62018:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   6201c:	e0bfff03 	ldbu	r2,-4(fp)
   62020:	1000101e 	bne	r2,zero,62064 <alt_avalon_i2c_master_transmit+0x184>
   62024:	e0bffa17 	ldw	r2,-24(fp)
   62028:	10001726 	beq	r2,zero,62088 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   6202c:	00000d06 	br	62064 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   62030:	e0bff917 	ldw	r2,-28(fp)
   62034:	108002a8 	cmpgeui	r2,r2,10
   62038:	1000021e 	bne	r2,zero,62044 <alt_avalon_i2c_master_transmit+0x164>
   6203c:	0109c404 	movi	r4,10000
   62040:	006387c0 	call	6387c <alt_busy_sleep>
            if (--timeout == 0)
   62044:	e0bff917 	ldw	r2,-28(fp)
   62048:	10bfffc4 	addi	r2,r2,-1
   6204c:	e0bff915 	stw	r2,-28(fp)
   62050:	e0bff917 	ldw	r2,-28(fp)
   62054:	1000031e 	bne	r2,zero,62064 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   62058:	00bfff84 	movi	r2,-2
   6205c:	e0bffa15 	stw	r2,-24(fp)
               break;
   62060:	00000306 	br	62070 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   62064:	e13ffb17 	ldw	r4,-20(fp)
   62068:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   6206c:	103ff01e 	bne	r2,zero,62030 <__alt_data_end+0xfffe2030>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   62070:	e0bffa04 	addi	r2,fp,-24
   62074:	100b883a 	mov	r5,r2
   62078:	e13ffb17 	ldw	r4,-20(fp)
   6207c:	00619200 	call	61920 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   62080:	e13ffb17 	ldw	r4,-20(fp)
   62084:	00611f40 	call	611f4 <alt_avalon_i2c_disable>
    }


    return status;
   62088:	e0bffa17 	ldw	r2,-24(fp)
}
   6208c:	e037883a 	mov	sp,fp
   62090:	dfc00117 	ldw	ra,4(sp)
   62094:	df000017 	ldw	fp,0(sp)
   62098:	dec00204 	addi	sp,sp,8
   6209c:	f800283a 	ret

000620a0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   620a0:	defff604 	addi	sp,sp,-40
   620a4:	dfc00915 	stw	ra,36(sp)
   620a8:	df000815 	stw	fp,32(sp)
   620ac:	df000804 	addi	fp,sp,32
   620b0:	e13ffb15 	stw	r4,-20(fp)
   620b4:	e17ffc15 	stw	r5,-16(fp)
   620b8:	e1bffd15 	stw	r6,-12(fp)
   620bc:	3807883a 	mov	r3,r7
   620c0:	e0800217 	ldw	r2,8(fp)
   620c4:	e0fffe05 	stb	r3,-8(fp)
   620c8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   620cc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   620d0:	0149c404 	movi	r5,10000
   620d4:	e13ffd17 	ldw	r4,-12(fp)
   620d8:	004dab40 	call	4dab4 <__mulsi3>
   620dc:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   620e0:	e0bffb17 	ldw	r2,-20(fp)
   620e4:	10800717 	ldw	r2,28(r2)
   620e8:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   620ec:	e0bffd17 	ldw	r2,-12(fp)
   620f0:	1000021e 	bne	r2,zero,620fc <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   620f4:	0005883a 	mov	r2,zero
   620f8:	00006706 	br	62298 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   620fc:	e0bffb17 	ldw	r2,-20(fp)
   62100:	10c00617 	ldw	r3,24(r2)
   62104:	008001b4 	movhi	r2,6
   62108:	10837804 	addi	r2,r2,3552
   6210c:	18800226 	beq	r3,r2,62118 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   62110:	00bfff44 	movi	r2,-3
   62114:	00006006 	br	62298 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   62118:	e0bffe03 	ldbu	r2,-8(fp)
   6211c:	10000a1e 	bne	r2,zero,62148 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   62120:	e13ffb17 	ldw	r4,-20(fp)
   62124:	006115c0 	call	6115c <alt_avalon_i2c_enable>
   62128:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   6212c:	e0bff817 	ldw	r2,-32(fp)
   62130:	10000226 	beq	r2,zero,6213c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   62134:	e0bff817 	ldw	r2,-32(fp)
   62138:	00005706 	br	62298 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   6213c:	01400704 	movi	r5,28
   62140:	e13ffb17 	ldw	r4,-20(fp)
   62144:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   62148:	e0bffe03 	ldbu	r2,-8(fp)
   6214c:	100d883a 	mov	r6,r2
   62150:	000b883a 	mov	r5,zero
   62154:	e13ffb17 	ldw	r4,-20(fp)
   62158:	00617c40 	call	617c4 <alt_avalon_i2c_send_address>
   6215c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   62160:	e0bff817 	ldw	r2,-32(fp)
   62164:	1000271e 	bne	r2,zero,62204 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   62168:	00000f06 	br	621a8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   6216c:	e0bffc17 	ldw	r2,-16(fp)
   62170:	10800003 	ldbu	r2,0(r2)
   62174:	10803fcc 	andi	r2,r2,255
   62178:	000f883a 	mov	r7,zero
   6217c:	000d883a 	mov	r6,zero
   62180:	100b883a 	mov	r5,r2
   62184:	e13ffb17 	ldw	r4,-20(fp)
   62188:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   6218c:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   62190:	e0bffc17 	ldw	r2,-16(fp)
   62194:	10800044 	addi	r2,r2,1
   62198:	e0bffc15 	stw	r2,-16(fp)
            --size;
   6219c:	e0bffd17 	ldw	r2,-12(fp)
   621a0:	10bfffc4 	addi	r2,r2,-1
   621a4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   621a8:	e0bffd17 	ldw	r2,-12(fp)
   621ac:	108000b0 	cmpltui	r2,r2,2
   621b0:	1000021e 	bne	r2,zero,621bc <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   621b4:	e0bff817 	ldw	r2,-32(fp)
   621b8:	103fec26 	beq	r2,zero,6216c <__alt_data_end+0xfffe216c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   621bc:	e0bff817 	ldw	r2,-32(fp)
   621c0:	1000101e 	bne	r2,zero,62204 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   621c4:	e0bffc17 	ldw	r2,-16(fp)
   621c8:	10800003 	ldbu	r2,0(r2)
   621cc:	10803fcc 	andi	r2,r2,255
   621d0:	e0ffff03 	ldbu	r3,-4(fp)
   621d4:	180f883a 	mov	r7,r3
   621d8:	000d883a 	mov	r6,zero
   621dc:	100b883a 	mov	r5,r2
   621e0:	e13ffb17 	ldw	r4,-20(fp)
   621e4:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   621e8:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   621ec:	e0bffc17 	ldw	r2,-16(fp)
   621f0:	10800044 	addi	r2,r2,1
   621f4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   621f8:	e0bffd17 	ldw	r2,-12(fp)
   621fc:	10bfffc4 	addi	r2,r2,-1
   62200:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   62204:	e0bff817 	ldw	r2,-32(fp)
   62208:	10001426 	beq	r2,zero,6225c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   6220c:	00000d06 	br	62244 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   62210:	e0bff917 	ldw	r2,-28(fp)
   62214:	108002a8 	cmpgeui	r2,r2,10
   62218:	1000021e 	bne	r2,zero,62224 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   6221c:	0109c404 	movi	r4,10000
   62220:	006387c0 	call	6387c <alt_busy_sleep>
            if (--timeout == 0)
   62224:	e0bff917 	ldw	r2,-28(fp)
   62228:	10bfffc4 	addi	r2,r2,-1
   6222c:	e0bff915 	stw	r2,-28(fp)
   62230:	e0bff917 	ldw	r2,-28(fp)
   62234:	1000031e 	bne	r2,zero,62244 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   62238:	00bfff84 	movi	r2,-2
   6223c:	e0bff815 	stw	r2,-32(fp)
               break;
   62240:	00000306 	br	62250 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   62244:	e13ffb17 	ldw	r4,-20(fp)
   62248:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   6224c:	103ff01e 	bne	r2,zero,62210 <__alt_data_end+0xfffe2210>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   62250:	e13ffb17 	ldw	r4,-20(fp)
   62254:	00611f40 	call	611f4 <alt_avalon_i2c_disable>
   62258:	00000e06 	br	62294 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   6225c:	e0bfff03 	ldbu	r2,-4(fp)
   62260:	10000c26 	beq	r2,zero,62294 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   62264:	01400704 	movi	r5,28
   62268:	e13ffb17 	ldw	r4,-20(fp)
   6226c:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   62270:	000b883a 	mov	r5,zero
   62274:	e13ffb17 	ldw	r4,-20(fp)
   62278:	00629900 	call	62990 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   6227c:	e0bffa17 	ldw	r2,-24(fp)
   62280:	00c00044 	movi	r3,1
   62284:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   62288:	01400044 	movi	r5,1
   6228c:	e13ffb17 	ldw	r4,-20(fp)
   62290:	00627ec0 	call	627ec <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   62294:	e0bff817 	ldw	r2,-32(fp)
}
   62298:	e037883a 	mov	sp,fp
   6229c:	dfc00117 	ldw	ra,4(sp)
   622a0:	df000017 	ldw	fp,0(sp)
   622a4:	dec00204 	addi	sp,sp,8
   622a8:	f800283a 	ret

000622ac <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   622ac:	defff404 	addi	sp,sp,-48
   622b0:	dfc00b15 	stw	ra,44(sp)
   622b4:	df000a15 	stw	fp,40(sp)
   622b8:	df000a04 	addi	fp,sp,40
   622bc:	e13ffb15 	stw	r4,-20(fp)
   622c0:	e17ffc15 	stw	r5,-16(fp)
   622c4:	e1bffd15 	stw	r6,-12(fp)
   622c8:	3807883a 	mov	r3,r7
   622cc:	e0800217 	ldw	r2,8(fp)
   622d0:	e0fffe05 	stb	r3,-8(fp)
   622d4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   622d8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   622dc:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   622e0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   622e4:	e0bffd17 	ldw	r2,-12(fp)
   622e8:	1000021e 	bne	r2,zero,622f4 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   622ec:	0005883a 	mov	r2,zero
   622f0:	00006d06 	br	624a8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   622f4:	e0bffe03 	ldbu	r2,-8(fp)
   622f8:	10000a1e 	bne	r2,zero,62324 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   622fc:	e13ffb17 	ldw	r4,-20(fp)
   62300:	006115c0 	call	6115c <alt_avalon_i2c_enable>
   62304:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   62308:	e0bff917 	ldw	r2,-28(fp)
   6230c:	10000226 	beq	r2,zero,62318 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   62310:	e0bff917 	ldw	r2,-28(fp)
   62314:	00006406 	br	624a8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   62318:	01400704 	movi	r5,28
   6231c:	e13ffb17 	ldw	r4,-20(fp)
   62320:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   62324:	e0bffe03 	ldbu	r2,-8(fp)
   62328:	100d883a 	mov	r6,r2
   6232c:	01400044 	movi	r5,1
   62330:	e13ffb17 	ldw	r4,-20(fp)
   62334:	00617c40 	call	617c4 <alt_avalon_i2c_send_address>
   62338:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   6233c:	e0bff917 	ldw	r2,-28(fp)
   62340:	1000341e 	bne	r2,zero,62414 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   62344:	00001906 	br	623ac <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   62348:	000f883a 	mov	r7,zero
   6234c:	000d883a 	mov	r6,zero
   62350:	000b883a 	mov	r5,zero
   62354:	e13ffb17 	ldw	r4,-20(fp)
   62358:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   6235c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   62360:	e0bff817 	ldw	r2,-32(fp)
   62364:	10800044 	addi	r2,r2,1
   62368:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   6236c:	e0bff917 	ldw	r2,-28(fp)
   62370:	10000e1e 	bne	r2,zero,623ac <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   62374:	e0bffa04 	addi	r2,fp,-24
   62378:	100f883a 	mov	r7,r2
   6237c:	000d883a 	mov	r6,zero
   62380:	e17ffc17 	ldw	r5,-16(fp)
   62384:	e13ffb17 	ldw	r4,-20(fp)
   62388:	00615900 	call	61590 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   6238c:	e0bffa17 	ldw	r2,-24(fp)
   62390:	e0fffc17 	ldw	r3,-16(fp)
   62394:	1885883a 	add	r2,r3,r2
   62398:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   6239c:	e0bffa17 	ldw	r2,-24(fp)
   623a0:	e0fff717 	ldw	r3,-36(fp)
   623a4:	1885883a 	add	r2,r3,r2
   623a8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   623ac:	e0bffd17 	ldw	r2,-12(fp)
   623b0:	10bfffc4 	addi	r2,r2,-1
   623b4:	e0fff817 	ldw	r3,-32(fp)
   623b8:	1880022e 	bgeu	r3,r2,623c4 <alt_avalon_i2c_master_receive+0x118>
   623bc:	e0bff917 	ldw	r2,-28(fp)
   623c0:	103fe126 	beq	r2,zero,62348 <__alt_data_end+0xfffe2348>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   623c4:	e0bff917 	ldw	r2,-28(fp)
   623c8:	1000121e 	bne	r2,zero,62414 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   623cc:	e0bfff03 	ldbu	r2,-4(fp)
   623d0:	100f883a 	mov	r7,r2
   623d4:	000d883a 	mov	r6,zero
   623d8:	000b883a 	mov	r5,zero
   623dc:	e13ffb17 	ldw	r4,-20(fp)
   623e0:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   623e4:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   623e8:	00000a06 	br	62414 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   623ec:	e17ffc17 	ldw	r5,-16(fp)
   623f0:	e13ffb17 	ldw	r4,-20(fp)
   623f4:	00616380 	call	61638 <alt_avalon_i2c_rx_read>
   623f8:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   623fc:	e0bffc17 	ldw	r2,-16(fp)
   62400:	10800044 	addi	r2,r2,1
   62404:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   62408:	e0bff717 	ldw	r2,-36(fp)
   6240c:	10800044 	addi	r2,r2,1
   62410:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   62414:	e0fff717 	ldw	r3,-36(fp)
   62418:	e0bffd17 	ldw	r2,-12(fp)
   6241c:	1880022e 	bgeu	r3,r2,62428 <alt_avalon_i2c_master_receive+0x17c>
   62420:	e0bff917 	ldw	r2,-28(fp)
   62424:	103ff126 	beq	r2,zero,623ec <__alt_data_end+0xfffe23ec>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   62428:	e0bfff03 	ldbu	r2,-4(fp)
   6242c:	1000021e 	bne	r2,zero,62438 <alt_avalon_i2c_master_receive+0x18c>
   62430:	e0bff917 	ldw	r2,-28(fp)
   62434:	10001b26 	beq	r2,zero,624a4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   62438:	0149c404 	movi	r5,10000
   6243c:	e13ffd17 	ldw	r4,-12(fp)
   62440:	004dab40 	call	4dab4 <__mulsi3>
   62444:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   62448:	00000d06 	br	62480 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   6244c:	e0bff617 	ldw	r2,-40(fp)
   62450:	108002a8 	cmpgeui	r2,r2,10
   62454:	1000021e 	bne	r2,zero,62460 <alt_avalon_i2c_master_receive+0x1b4>
   62458:	0109c404 	movi	r4,10000
   6245c:	006387c0 	call	6387c <alt_busy_sleep>
            if (--timeout == 0)
   62460:	e0bff617 	ldw	r2,-40(fp)
   62464:	10bfffc4 	addi	r2,r2,-1
   62468:	e0bff615 	stw	r2,-40(fp)
   6246c:	e0bff617 	ldw	r2,-40(fp)
   62470:	1000031e 	bne	r2,zero,62480 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   62474:	00bfff84 	movi	r2,-2
   62478:	e0bff915 	stw	r2,-28(fp)
               break;
   6247c:	00000306 	br	6248c <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   62480:	e13ffb17 	ldw	r4,-20(fp)
   62484:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   62488:	103ff01e 	bne	r2,zero,6244c <__alt_data_end+0xfffe244c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   6248c:	e0bff904 	addi	r2,fp,-28
   62490:	100b883a 	mov	r5,r2
   62494:	e13ffb17 	ldw	r4,-20(fp)
   62498:	00619200 	call	61920 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   6249c:	e13ffb17 	ldw	r4,-20(fp)
   624a0:	00611f40 	call	611f4 <alt_avalon_i2c_disable>
    }

    return status;
   624a4:	e0bff917 	ldw	r2,-28(fp)
}
   624a8:	e037883a 	mov	sp,fp
   624ac:	dfc00117 	ldw	ra,4(sp)
   624b0:	df000017 	ldw	fp,0(sp)
   624b4:	dec00204 	addi	sp,sp,8
   624b8:	f800283a 	ret

000624bc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   624bc:	defff504 	addi	sp,sp,-44
   624c0:	dfc00a15 	stw	ra,40(sp)
   624c4:	df000915 	stw	fp,36(sp)
   624c8:	df000904 	addi	fp,sp,36
   624cc:	e13ffb15 	stw	r4,-20(fp)
   624d0:	e17ffc15 	stw	r5,-16(fp)
   624d4:	e1bffd15 	stw	r6,-12(fp)
   624d8:	3807883a 	mov	r3,r7
   624dc:	e0800217 	ldw	r2,8(fp)
   624e0:	e0fffe05 	stb	r3,-8(fp)
   624e4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   624e8:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   624ec:	e0bffb17 	ldw	r2,-20(fp)
   624f0:	10800717 	ldw	r2,28(r2)
   624f4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   624f8:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   624fc:	e0bffd17 	ldw	r2,-12(fp)
   62500:	1000021e 	bne	r2,zero,6250c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   62504:	0005883a 	mov	r2,zero
   62508:	00006306 	br	62698 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   6250c:	e0bffb17 	ldw	r2,-20(fp)
   62510:	10c00617 	ldw	r3,24(r2)
   62514:	008001b4 	movhi	r2,6
   62518:	10837804 	addi	r2,r2,3552
   6251c:	18800226 	beq	r3,r2,62528 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   62520:	00bfff44 	movi	r2,-3
   62524:	00005c06 	br	62698 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   62528:	e0bffe03 	ldbu	r2,-8(fp)
   6252c:	10000a1e 	bne	r2,zero,62558 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   62530:	e13ffb17 	ldw	r4,-20(fp)
   62534:	006115c0 	call	6115c <alt_avalon_i2c_enable>
   62538:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   6253c:	e0bff717 	ldw	r2,-36(fp)
   62540:	10000226 	beq	r2,zero,6254c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   62544:	e0bff717 	ldw	r2,-36(fp)
   62548:	00005306 	br	62698 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   6254c:	01400704 	movi	r5,28
   62550:	e13ffb17 	ldw	r4,-20(fp)
   62554:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   62558:	e0bffe03 	ldbu	r2,-8(fp)
   6255c:	100d883a 	mov	r6,r2
   62560:	01400044 	movi	r5,1
   62564:	e13ffb17 	ldw	r4,-20(fp)
   62568:	00617c40 	call	617c4 <alt_avalon_i2c_send_address>
   6256c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   62570:	e0bff717 	ldw	r2,-36(fp)
   62574:	1000191e 	bne	r2,zero,625dc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   62578:	00000906 	br	625a0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   6257c:	000f883a 	mov	r7,zero
   62580:	000d883a 	mov	r6,zero
   62584:	000b883a 	mov	r5,zero
   62588:	e13ffb17 	ldw	r4,-20(fp)
   6258c:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   62590:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   62594:	e0bff917 	ldw	r2,-28(fp)
   62598:	10800044 	addi	r2,r2,1
   6259c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   625a0:	e0bffd17 	ldw	r2,-12(fp)
   625a4:	10bfffc4 	addi	r2,r2,-1
   625a8:	e0fff917 	ldw	r3,-28(fp)
   625ac:	1880022e 	bgeu	r3,r2,625b8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   625b0:	e0bff717 	ldw	r2,-36(fp)
   625b4:	103ff126 	beq	r2,zero,6257c <__alt_data_end+0xfffe257c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   625b8:	e0bff717 	ldw	r2,-36(fp)
   625bc:	1000071e 	bne	r2,zero,625dc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   625c0:	e0bfff03 	ldbu	r2,-4(fp)
   625c4:	100f883a 	mov	r7,r2
   625c8:	000d883a 	mov	r6,zero
   625cc:	000b883a 	mov	r5,zero
   625d0:	e13ffb17 	ldw	r4,-20(fp)
   625d4:	00616e00 	call	616e0 <alt_avalon_i2c_cmd_write>
   625d8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   625dc:	e0bff717 	ldw	r2,-36(fp)
   625e0:	10001826 	beq	r2,zero,62644 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   625e4:	0149c404 	movi	r5,10000
   625e8:	e13ffd17 	ldw	r4,-12(fp)
   625ec:	004dab40 	call	4dab4 <__mulsi3>
   625f0:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   625f4:	00000d06 	br	6262c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   625f8:	e0bff817 	ldw	r2,-32(fp)
   625fc:	108002a8 	cmpgeui	r2,r2,10
   62600:	1000021e 	bne	r2,zero,6260c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   62604:	0109c404 	movi	r4,10000
   62608:	006387c0 	call	6387c <alt_busy_sleep>
            if (--timeout == 0)
   6260c:	e0bff817 	ldw	r2,-32(fp)
   62610:	10bfffc4 	addi	r2,r2,-1
   62614:	e0bff815 	stw	r2,-32(fp)
   62618:	e0bff817 	ldw	r2,-32(fp)
   6261c:	1000031e 	bne	r2,zero,6262c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   62620:	00bfff84 	movi	r2,-2
   62624:	e0bff715 	stw	r2,-36(fp)
               break;
   62628:	00000306 	br	62638 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   6262c:	e13ffb17 	ldw	r4,-20(fp)
   62630:	006154c0 	call	6154c <alt_avalon_i2c_is_busy>
   62634:	103ff01e 	bne	r2,zero,625f8 <__alt_data_end+0xfffe25f8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   62638:	e13ffb17 	ldw	r4,-20(fp)
   6263c:	00611f40 	call	611f4 <alt_avalon_i2c_disable>
   62640:	00001406 	br	62694 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   62644:	e0bfff03 	ldbu	r2,-4(fp)
   62648:	10001226 	beq	r2,zero,62694 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   6264c:	01400704 	movi	r5,28
   62650:	e13ffb17 	ldw	r4,-20(fp)
   62654:	00627480 	call	62748 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   62658:	000b883a 	mov	r5,zero
   6265c:	e13ffb17 	ldw	r4,-20(fp)
   62660:	00628e00 	call	628e0 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   62664:	e0bffa17 	ldw	r2,-24(fp)
   62668:	00c00084 	movi	r3,2
   6266c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   62670:	e0bffa17 	ldw	r2,-24(fp)
   62674:	e0fffc17 	ldw	r3,-16(fp)
   62678:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   6267c:	e0bffa17 	ldw	r2,-24(fp)
   62680:	e0fffd17 	ldw	r3,-12(fp)
   62684:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   62688:	01400084 	movi	r5,2
   6268c:	e13ffb17 	ldw	r4,-20(fp)
   62690:	00627ec0 	call	627ec <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   62694:	e0bff717 	ldw	r2,-36(fp)
}
   62698:	e037883a 	mov	sp,fp
   6269c:	dfc00117 	ldw	ra,4(sp)
   626a0:	df000017 	ldw	fp,0(sp)
   626a4:	dec00204 	addi	sp,sp,8
   626a8:	f800283a 	ret

000626ac <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   626ac:	defffd04 	addi	sp,sp,-12
   626b0:	df000215 	stw	fp,8(sp)
   626b4:	df000204 	addi	fp,sp,8
   626b8:	e13ffe15 	stw	r4,-8(fp)
   626bc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   626c0:	e0bffe17 	ldw	r2,-8(fp)
   626c4:	10800317 	ldw	r2,12(r2)
   626c8:	10800404 	addi	r2,r2,16
   626cc:	10c00037 	ldwio	r3,0(r2)
   626d0:	e0bffe17 	ldw	r2,-8(fp)
   626d4:	10800317 	ldw	r2,12(r2)
   626d8:	10800304 	addi	r2,r2,12
   626dc:	10800037 	ldwio	r2,0(r2)
   626e0:	1884703a 	and	r2,r3,r2
   626e4:	1007883a 	mov	r3,r2
   626e8:	e0bfff17 	ldw	r2,-4(fp)
   626ec:	10c00015 	stw	r3,0(r2)
}
   626f0:	0001883a 	nop
   626f4:	e037883a 	mov	sp,fp
   626f8:	df000017 	ldw	fp,0(sp)
   626fc:	dec00104 	addi	sp,sp,4
   62700:	f800283a 	ret

00062704 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   62704:	defffd04 	addi	sp,sp,-12
   62708:	df000215 	stw	fp,8(sp)
   6270c:	df000204 	addi	fp,sp,8
   62710:	e13ffe15 	stw	r4,-8(fp)
   62714:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   62718:	e0bffe17 	ldw	r2,-8(fp)
   6271c:	10800317 	ldw	r2,12(r2)
   62720:	10800404 	addi	r2,r2,16
   62724:	10800037 	ldwio	r2,0(r2)
   62728:	1007883a 	mov	r3,r2
   6272c:	e0bfff17 	ldw	r2,-4(fp)
   62730:	10c00015 	stw	r3,0(r2)
}
   62734:	0001883a 	nop
   62738:	e037883a 	mov	sp,fp
   6273c:	df000017 	ldw	fp,0(sp)
   62740:	dec00104 	addi	sp,sp,4
   62744:	f800283a 	ret

00062748 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   62748:	defffd04 	addi	sp,sp,-12
   6274c:	df000215 	stw	fp,8(sp)
   62750:	df000204 	addi	fp,sp,8
   62754:	e13ffe15 	stw	r4,-8(fp)
   62758:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   6275c:	e0bffe17 	ldw	r2,-8(fp)
   62760:	10800317 	ldw	r2,12(r2)
   62764:	10800404 	addi	r2,r2,16
   62768:	e0ffff17 	ldw	r3,-4(fp)
   6276c:	10c00035 	stwio	r3,0(r2)
}
   62770:	0001883a 	nop
   62774:	e037883a 	mov	sp,fp
   62778:	df000017 	ldw	fp,0(sp)
   6277c:	dec00104 	addi	sp,sp,4
   62780:	f800283a 	ret

00062784 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   62784:	defffb04 	addi	sp,sp,-20
   62788:	dfc00415 	stw	ra,16(sp)
   6278c:	df000315 	stw	fp,12(sp)
   62790:	df000304 	addi	fp,sp,12
   62794:	e13ffe15 	stw	r4,-8(fp)
   62798:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   6279c:	e17ffd04 	addi	r5,fp,-12
   627a0:	e13ffe17 	ldw	r4,-8(fp)
   627a4:	00628500 	call	62850 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   627a8:	e0bfff17 	ldw	r2,-4(fp)
   627ac:	0086303a 	nor	r3,zero,r2
   627b0:	e0bffd17 	ldw	r2,-12(fp)
   627b4:	1884703a 	and	r2,r3,r2
   627b8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   627bc:	e0bffe17 	ldw	r2,-8(fp)
   627c0:	10800317 	ldw	r2,12(r2)
   627c4:	10800304 	addi	r2,r2,12
   627c8:	e0fffd17 	ldw	r3,-12(fp)
   627cc:	18c007cc 	andi	r3,r3,31
   627d0:	10c00035 	stwio	r3,0(r2)
}
   627d4:	0001883a 	nop
   627d8:	e037883a 	mov	sp,fp
   627dc:	dfc00117 	ldw	ra,4(sp)
   627e0:	df000017 	ldw	fp,0(sp)
   627e4:	dec00204 	addi	sp,sp,8
   627e8:	f800283a 	ret

000627ec <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   627ec:	defffb04 	addi	sp,sp,-20
   627f0:	dfc00415 	stw	ra,16(sp)
   627f4:	df000315 	stw	fp,12(sp)
   627f8:	df000304 	addi	fp,sp,12
   627fc:	e13ffe15 	stw	r4,-8(fp)
   62800:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   62804:	e17ffd04 	addi	r5,fp,-12
   62808:	e13ffe17 	ldw	r4,-8(fp)
   6280c:	00628500 	call	62850 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   62810:	e0fffd17 	ldw	r3,-12(fp)
   62814:	e0bfff17 	ldw	r2,-4(fp)
   62818:	1884b03a 	or	r2,r3,r2
   6281c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   62820:	e0bffe17 	ldw	r2,-8(fp)
   62824:	10800317 	ldw	r2,12(r2)
   62828:	10800304 	addi	r2,r2,12
   6282c:	e0fffd17 	ldw	r3,-12(fp)
   62830:	18c007cc 	andi	r3,r3,31
   62834:	10c00035 	stwio	r3,0(r2)
}
   62838:	0001883a 	nop
   6283c:	e037883a 	mov	sp,fp
   62840:	dfc00117 	ldw	ra,4(sp)
   62844:	df000017 	ldw	fp,0(sp)
   62848:	dec00204 	addi	sp,sp,8
   6284c:	f800283a 	ret

00062850 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   62850:	defffd04 	addi	sp,sp,-12
   62854:	df000215 	stw	fp,8(sp)
   62858:	df000204 	addi	fp,sp,8
   6285c:	e13ffe15 	stw	r4,-8(fp)
   62860:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   62864:	e0bffe17 	ldw	r2,-8(fp)
   62868:	10800317 	ldw	r2,12(r2)
   6286c:	10800304 	addi	r2,r2,12
   62870:	10800037 	ldwio	r2,0(r2)
   62874:	10c007cc 	andi	r3,r2,31
   62878:	e0bfff17 	ldw	r2,-4(fp)
   6287c:	10c00015 	stw	r3,0(r2)
}
   62880:	0001883a 	nop
   62884:	e037883a 	mov	sp,fp
   62888:	df000017 	ldw	fp,0(sp)
   6288c:	dec00104 	addi	sp,sp,4
   62890:	f800283a 	ret

00062894 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   62894:	defffd04 	addi	sp,sp,-12
   62898:	df000215 	stw	fp,8(sp)
   6289c:	df000204 	addi	fp,sp,8
   628a0:	e13ffe15 	stw	r4,-8(fp)
   628a4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   628a8:	e0bffe17 	ldw	r2,-8(fp)
   628ac:	10800317 	ldw	r2,12(r2)
   628b0:	10800204 	addi	r2,r2,8
   628b4:	10800037 	ldwio	r2,0(r2)
   628b8:	10800c0c 	andi	r2,r2,48
   628bc:	1005d13a 	srai	r2,r2,4
   628c0:	1007883a 	mov	r3,r2
   628c4:	e0bfff17 	ldw	r2,-4(fp)
   628c8:	10c00015 	stw	r3,0(r2)
}
   628cc:	0001883a 	nop
   628d0:	e037883a 	mov	sp,fp
   628d4:	df000017 	ldw	fp,0(sp)
   628d8:	dec00104 	addi	sp,sp,4
   628dc:	f800283a 	ret

000628e0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   628e0:	defffd04 	addi	sp,sp,-12
   628e4:	df000215 	stw	fp,8(sp)
   628e8:	df000204 	addi	fp,sp,8
   628ec:	e13ffe15 	stw	r4,-8(fp)
   628f0:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   628f4:	e0bffe17 	ldw	r2,-8(fp)
   628f8:	10800317 	ldw	r2,12(r2)
   628fc:	10800204 	addi	r2,r2,8
   62900:	e0fffe17 	ldw	r3,-8(fp)
   62904:	18c00317 	ldw	r3,12(r3)
   62908:	18c00204 	addi	r3,r3,8
   6290c:	18c00037 	ldwio	r3,0(r3)
   62910:	1809883a 	mov	r4,r3
   62914:	00fff3c4 	movi	r3,-49
   62918:	20c8703a 	and	r4,r4,r3
   6291c:	e0ffff17 	ldw	r3,-4(fp)
   62920:	1806913a 	slli	r3,r3,4
   62924:	18c00c0c 	andi	r3,r3,48
   62928:	20c6b03a 	or	r3,r4,r3
   6292c:	10c00035 	stwio	r3,0(r2)
}
   62930:	0001883a 	nop
   62934:	e037883a 	mov	sp,fp
   62938:	df000017 	ldw	fp,0(sp)
   6293c:	dec00104 	addi	sp,sp,4
   62940:	f800283a 	ret

00062944 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   62944:	defffd04 	addi	sp,sp,-12
   62948:	df000215 	stw	fp,8(sp)
   6294c:	df000204 	addi	fp,sp,8
   62950:	e13ffe15 	stw	r4,-8(fp)
   62954:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   62958:	e0bffe17 	ldw	r2,-8(fp)
   6295c:	10800317 	ldw	r2,12(r2)
   62960:	10800204 	addi	r2,r2,8
   62964:	10800037 	ldwio	r2,0(r2)
   62968:	1080030c 	andi	r2,r2,12
   6296c:	1005d0ba 	srai	r2,r2,2
   62970:	1007883a 	mov	r3,r2
   62974:	e0bfff17 	ldw	r2,-4(fp)
   62978:	10c00015 	stw	r3,0(r2)
}
   6297c:	0001883a 	nop
   62980:	e037883a 	mov	sp,fp
   62984:	df000017 	ldw	fp,0(sp)
   62988:	dec00104 	addi	sp,sp,4
   6298c:	f800283a 	ret

00062990 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   62990:	defffd04 	addi	sp,sp,-12
   62994:	df000215 	stw	fp,8(sp)
   62998:	df000204 	addi	fp,sp,8
   6299c:	e13ffe15 	stw	r4,-8(fp)
   629a0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   629a4:	e0bffe17 	ldw	r2,-8(fp)
   629a8:	10800317 	ldw	r2,12(r2)
   629ac:	10c00204 	addi	r3,r2,8
   629b0:	e0bffe17 	ldw	r2,-8(fp)
   629b4:	10800317 	ldw	r2,12(r2)
   629b8:	10800204 	addi	r2,r2,8
   629bc:	10800037 	ldwio	r2,0(r2)
   629c0:	1009883a 	mov	r4,r2
   629c4:	00bffcc4 	movi	r2,-13
   629c8:	2088703a 	and	r4,r4,r2
   629cc:	e0bfff17 	ldw	r2,-4(fp)
   629d0:	1085883a 	add	r2,r2,r2
   629d4:	1085883a 	add	r2,r2,r2
   629d8:	1080030c 	andi	r2,r2,12
   629dc:	2084b03a 	or	r2,r4,r2
   629e0:	18800035 	stwio	r2,0(r3)
}
   629e4:	0001883a 	nop
   629e8:	e037883a 	mov	sp,fp
   629ec:	df000017 	ldw	fp,0(sp)
   629f0:	dec00104 	addi	sp,sp,4
   629f4:	f800283a 	ret

000629f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   629f8:	defffa04 	addi	sp,sp,-24
   629fc:	dfc00515 	stw	ra,20(sp)
   62a00:	df000415 	stw	fp,16(sp)
   62a04:	df000404 	addi	fp,sp,16
   62a08:	e13ffd15 	stw	r4,-12(fp)
   62a0c:	e17ffe15 	stw	r5,-8(fp)
   62a10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   62a14:	e0bffd17 	ldw	r2,-12(fp)
   62a18:	10800017 	ldw	r2,0(r2)
   62a1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   62a20:	e0bffc17 	ldw	r2,-16(fp)
   62a24:	10c00a04 	addi	r3,r2,40
   62a28:	e0bffd17 	ldw	r2,-12(fp)
   62a2c:	10800217 	ldw	r2,8(r2)
   62a30:	100f883a 	mov	r7,r2
   62a34:	e1bfff17 	ldw	r6,-4(fp)
   62a38:	e17ffe17 	ldw	r5,-8(fp)
   62a3c:	1809883a 	mov	r4,r3
   62a40:	00630200 	call	63020 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   62a44:	e037883a 	mov	sp,fp
   62a48:	dfc00117 	ldw	ra,4(sp)
   62a4c:	df000017 	ldw	fp,0(sp)
   62a50:	dec00204 	addi	sp,sp,8
   62a54:	f800283a 	ret

00062a58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   62a58:	defffa04 	addi	sp,sp,-24
   62a5c:	dfc00515 	stw	ra,20(sp)
   62a60:	df000415 	stw	fp,16(sp)
   62a64:	df000404 	addi	fp,sp,16
   62a68:	e13ffd15 	stw	r4,-12(fp)
   62a6c:	e17ffe15 	stw	r5,-8(fp)
   62a70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   62a74:	e0bffd17 	ldw	r2,-12(fp)
   62a78:	10800017 	ldw	r2,0(r2)
   62a7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   62a80:	e0bffc17 	ldw	r2,-16(fp)
   62a84:	10c00a04 	addi	r3,r2,40
   62a88:	e0bffd17 	ldw	r2,-12(fp)
   62a8c:	10800217 	ldw	r2,8(r2)
   62a90:	100f883a 	mov	r7,r2
   62a94:	e1bfff17 	ldw	r6,-4(fp)
   62a98:	e17ffe17 	ldw	r5,-8(fp)
   62a9c:	1809883a 	mov	r4,r3
   62aa0:	006323c0 	call	6323c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   62aa4:	e037883a 	mov	sp,fp
   62aa8:	dfc00117 	ldw	ra,4(sp)
   62aac:	df000017 	ldw	fp,0(sp)
   62ab0:	dec00204 	addi	sp,sp,8
   62ab4:	f800283a 	ret

00062ab8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   62ab8:	defffc04 	addi	sp,sp,-16
   62abc:	dfc00315 	stw	ra,12(sp)
   62ac0:	df000215 	stw	fp,8(sp)
   62ac4:	df000204 	addi	fp,sp,8
   62ac8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   62acc:	e0bfff17 	ldw	r2,-4(fp)
   62ad0:	10800017 	ldw	r2,0(r2)
   62ad4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   62ad8:	e0bffe17 	ldw	r2,-8(fp)
   62adc:	10c00a04 	addi	r3,r2,40
   62ae0:	e0bfff17 	ldw	r2,-4(fp)
   62ae4:	10800217 	ldw	r2,8(r2)
   62ae8:	100b883a 	mov	r5,r2
   62aec:	1809883a 	mov	r4,r3
   62af0:	0062ec80 	call	62ec8 <altera_avalon_jtag_uart_close>
}
   62af4:	e037883a 	mov	sp,fp
   62af8:	dfc00117 	ldw	ra,4(sp)
   62afc:	df000017 	ldw	fp,0(sp)
   62b00:	dec00204 	addi	sp,sp,8
   62b04:	f800283a 	ret

00062b08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   62b08:	defffa04 	addi	sp,sp,-24
   62b0c:	dfc00515 	stw	ra,20(sp)
   62b10:	df000415 	stw	fp,16(sp)
   62b14:	df000404 	addi	fp,sp,16
   62b18:	e13ffd15 	stw	r4,-12(fp)
   62b1c:	e17ffe15 	stw	r5,-8(fp)
   62b20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   62b24:	e0bffd17 	ldw	r2,-12(fp)
   62b28:	10800017 	ldw	r2,0(r2)
   62b2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   62b30:	e0bffc17 	ldw	r2,-16(fp)
   62b34:	10800a04 	addi	r2,r2,40
   62b38:	e1bfff17 	ldw	r6,-4(fp)
   62b3c:	e17ffe17 	ldw	r5,-8(fp)
   62b40:	1009883a 	mov	r4,r2
   62b44:	0062f300 	call	62f30 <altera_avalon_jtag_uart_ioctl>
}
   62b48:	e037883a 	mov	sp,fp
   62b4c:	dfc00117 	ldw	ra,4(sp)
   62b50:	df000017 	ldw	fp,0(sp)
   62b54:	dec00204 	addi	sp,sp,8
   62b58:	f800283a 	ret

00062b5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   62b5c:	defffa04 	addi	sp,sp,-24
   62b60:	dfc00515 	stw	ra,20(sp)
   62b64:	df000415 	stw	fp,16(sp)
   62b68:	df000404 	addi	fp,sp,16
   62b6c:	e13ffd15 	stw	r4,-12(fp)
   62b70:	e17ffe15 	stw	r5,-8(fp)
   62b74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   62b78:	e0bffd17 	ldw	r2,-12(fp)
   62b7c:	00c00044 	movi	r3,1
   62b80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   62b84:	e0bffd17 	ldw	r2,-12(fp)
   62b88:	10800017 	ldw	r2,0(r2)
   62b8c:	10800104 	addi	r2,r2,4
   62b90:	1007883a 	mov	r3,r2
   62b94:	e0bffd17 	ldw	r2,-12(fp)
   62b98:	10800817 	ldw	r2,32(r2)
   62b9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   62ba0:	e0bffe17 	ldw	r2,-8(fp)
   62ba4:	e0ffff17 	ldw	r3,-4(fp)
   62ba8:	d8000015 	stw	zero,0(sp)
   62bac:	e1fffd17 	ldw	r7,-12(fp)
   62bb0:	018001b4 	movhi	r6,6
   62bb4:	318b0704 	addi	r6,r6,11292
   62bb8:	180b883a 	mov	r5,r3
   62bbc:	1009883a 	mov	r4,r2
   62bc0:	0063c440 	call	63c44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   62bc4:	e0bffd17 	ldw	r2,-12(fp)
   62bc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   62bcc:	e0bffd17 	ldw	r2,-12(fp)
   62bd0:	10800204 	addi	r2,r2,8
   62bd4:	d0f25417 	ldw	r3,-14000(gp)
   62bd8:	e1fffd17 	ldw	r7,-12(fp)
   62bdc:	018001b4 	movhi	r6,6
   62be0:	318b8a04 	addi	r6,r6,11816
   62be4:	180b883a 	mov	r5,r3
   62be8:	1009883a 	mov	r4,r2
   62bec:	00637500 	call	63750 <alt_alarm_start>
   62bf0:	1000040e 	bge	r2,zero,62c04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   62bf4:	e0fffd17 	ldw	r3,-12(fp)
   62bf8:	00a00034 	movhi	r2,32768
   62bfc:	10bfffc4 	addi	r2,r2,-1
   62c00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   62c04:	0001883a 	nop
   62c08:	e037883a 	mov	sp,fp
   62c0c:	dfc00117 	ldw	ra,4(sp)
   62c10:	df000017 	ldw	fp,0(sp)
   62c14:	dec00204 	addi	sp,sp,8
   62c18:	f800283a 	ret

00062c1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   62c1c:	defff804 	addi	sp,sp,-32
   62c20:	df000715 	stw	fp,28(sp)
   62c24:	df000704 	addi	fp,sp,28
   62c28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   62c2c:	e0bfff17 	ldw	r2,-4(fp)
   62c30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   62c34:	e0bffb17 	ldw	r2,-20(fp)
   62c38:	10800017 	ldw	r2,0(r2)
   62c3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   62c40:	e0bffc17 	ldw	r2,-16(fp)
   62c44:	10800104 	addi	r2,r2,4
   62c48:	10800037 	ldwio	r2,0(r2)
   62c4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   62c50:	e0bffd17 	ldw	r2,-12(fp)
   62c54:	1080c00c 	andi	r2,r2,768
   62c58:	10006d26 	beq	r2,zero,62e10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   62c5c:	e0bffd17 	ldw	r2,-12(fp)
   62c60:	1080400c 	andi	r2,r2,256
   62c64:	10003526 	beq	r2,zero,62d3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   62c68:	00800074 	movhi	r2,1
   62c6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   62c70:	e0bffb17 	ldw	r2,-20(fp)
   62c74:	10800a17 	ldw	r2,40(r2)
   62c78:	10800044 	addi	r2,r2,1
   62c7c:	1081ffcc 	andi	r2,r2,2047
   62c80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   62c84:	e0bffb17 	ldw	r2,-20(fp)
   62c88:	10c00b17 	ldw	r3,44(r2)
   62c8c:	e0bffe17 	ldw	r2,-8(fp)
   62c90:	18801526 	beq	r3,r2,62ce8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   62c94:	e0bffc17 	ldw	r2,-16(fp)
   62c98:	10800037 	ldwio	r2,0(r2)
   62c9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   62ca0:	e0bff917 	ldw	r2,-28(fp)
   62ca4:	10a0000c 	andi	r2,r2,32768
   62ca8:	10001126 	beq	r2,zero,62cf0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   62cac:	e0bffb17 	ldw	r2,-20(fp)
   62cb0:	10800a17 	ldw	r2,40(r2)
   62cb4:	e0fff917 	ldw	r3,-28(fp)
   62cb8:	1809883a 	mov	r4,r3
   62cbc:	e0fffb17 	ldw	r3,-20(fp)
   62cc0:	1885883a 	add	r2,r3,r2
   62cc4:	10800e04 	addi	r2,r2,56
   62cc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   62ccc:	e0bffb17 	ldw	r2,-20(fp)
   62cd0:	10800a17 	ldw	r2,40(r2)
   62cd4:	10800044 	addi	r2,r2,1
   62cd8:	10c1ffcc 	andi	r3,r2,2047
   62cdc:	e0bffb17 	ldw	r2,-20(fp)
   62ce0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   62ce4:	003fe206 	br	62c70 <__alt_data_end+0xfffe2c70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   62ce8:	0001883a 	nop
   62cec:	00000106 	br	62cf4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   62cf0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   62cf4:	e0bff917 	ldw	r2,-28(fp)
   62cf8:	10bfffec 	andhi	r2,r2,65535
   62cfc:	10000f26 	beq	r2,zero,62d3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   62d00:	e0bffb17 	ldw	r2,-20(fp)
   62d04:	10c00817 	ldw	r3,32(r2)
   62d08:	00bfff84 	movi	r2,-2
   62d0c:	1886703a 	and	r3,r3,r2
   62d10:	e0bffb17 	ldw	r2,-20(fp)
   62d14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   62d18:	e0bffc17 	ldw	r2,-16(fp)
   62d1c:	10800104 	addi	r2,r2,4
   62d20:	1007883a 	mov	r3,r2
   62d24:	e0bffb17 	ldw	r2,-20(fp)
   62d28:	10800817 	ldw	r2,32(r2)
   62d2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   62d30:	e0bffc17 	ldw	r2,-16(fp)
   62d34:	10800104 	addi	r2,r2,4
   62d38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   62d3c:	e0bffd17 	ldw	r2,-12(fp)
   62d40:	1080800c 	andi	r2,r2,512
   62d44:	103fbe26 	beq	r2,zero,62c40 <__alt_data_end+0xfffe2c40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   62d48:	e0bffd17 	ldw	r2,-12(fp)
   62d4c:	1004d43a 	srli	r2,r2,16
   62d50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   62d54:	00001406 	br	62da8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   62d58:	e0bffc17 	ldw	r2,-16(fp)
   62d5c:	e0fffb17 	ldw	r3,-20(fp)
   62d60:	18c00d17 	ldw	r3,52(r3)
   62d64:	e13ffb17 	ldw	r4,-20(fp)
   62d68:	20c7883a 	add	r3,r4,r3
   62d6c:	18c20e04 	addi	r3,r3,2104
   62d70:	18c00003 	ldbu	r3,0(r3)
   62d74:	18c03fcc 	andi	r3,r3,255
   62d78:	18c0201c 	xori	r3,r3,128
   62d7c:	18ffe004 	addi	r3,r3,-128
   62d80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   62d84:	e0bffb17 	ldw	r2,-20(fp)
   62d88:	10800d17 	ldw	r2,52(r2)
   62d8c:	10800044 	addi	r2,r2,1
   62d90:	10c1ffcc 	andi	r3,r2,2047
   62d94:	e0bffb17 	ldw	r2,-20(fp)
   62d98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   62d9c:	e0bffa17 	ldw	r2,-24(fp)
   62da0:	10bfffc4 	addi	r2,r2,-1
   62da4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   62da8:	e0bffa17 	ldw	r2,-24(fp)
   62dac:	10000526 	beq	r2,zero,62dc4 <altera_avalon_jtag_uart_irq+0x1a8>
   62db0:	e0bffb17 	ldw	r2,-20(fp)
   62db4:	10c00d17 	ldw	r3,52(r2)
   62db8:	e0bffb17 	ldw	r2,-20(fp)
   62dbc:	10800c17 	ldw	r2,48(r2)
   62dc0:	18bfe51e 	bne	r3,r2,62d58 <__alt_data_end+0xfffe2d58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   62dc4:	e0bffa17 	ldw	r2,-24(fp)
   62dc8:	103f9d26 	beq	r2,zero,62c40 <__alt_data_end+0xfffe2c40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   62dcc:	e0bffb17 	ldw	r2,-20(fp)
   62dd0:	10c00817 	ldw	r3,32(r2)
   62dd4:	00bfff44 	movi	r2,-3
   62dd8:	1886703a 	and	r3,r3,r2
   62ddc:	e0bffb17 	ldw	r2,-20(fp)
   62de0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   62de4:	e0bffb17 	ldw	r2,-20(fp)
   62de8:	10800017 	ldw	r2,0(r2)
   62dec:	10800104 	addi	r2,r2,4
   62df0:	1007883a 	mov	r3,r2
   62df4:	e0bffb17 	ldw	r2,-20(fp)
   62df8:	10800817 	ldw	r2,32(r2)
   62dfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   62e00:	e0bffc17 	ldw	r2,-16(fp)
   62e04:	10800104 	addi	r2,r2,4
   62e08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   62e0c:	003f8c06 	br	62c40 <__alt_data_end+0xfffe2c40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   62e10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   62e14:	0001883a 	nop
   62e18:	e037883a 	mov	sp,fp
   62e1c:	df000017 	ldw	fp,0(sp)
   62e20:	dec00104 	addi	sp,sp,4
   62e24:	f800283a 	ret

00062e28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   62e28:	defff804 	addi	sp,sp,-32
   62e2c:	df000715 	stw	fp,28(sp)
   62e30:	df000704 	addi	fp,sp,28
   62e34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   62e38:	e0bffb17 	ldw	r2,-20(fp)
   62e3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   62e40:	e0bff917 	ldw	r2,-28(fp)
   62e44:	10800017 	ldw	r2,0(r2)
   62e48:	10800104 	addi	r2,r2,4
   62e4c:	10800037 	ldwio	r2,0(r2)
   62e50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   62e54:	e0bffa17 	ldw	r2,-24(fp)
   62e58:	1081000c 	andi	r2,r2,1024
   62e5c:	10000b26 	beq	r2,zero,62e8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   62e60:	e0bff917 	ldw	r2,-28(fp)
   62e64:	10800017 	ldw	r2,0(r2)
   62e68:	10800104 	addi	r2,r2,4
   62e6c:	1007883a 	mov	r3,r2
   62e70:	e0bff917 	ldw	r2,-28(fp)
   62e74:	10800817 	ldw	r2,32(r2)
   62e78:	10810014 	ori	r2,r2,1024
   62e7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   62e80:	e0bff917 	ldw	r2,-28(fp)
   62e84:	10000915 	stw	zero,36(r2)
   62e88:	00000a06 	br	62eb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   62e8c:	e0bff917 	ldw	r2,-28(fp)
   62e90:	10c00917 	ldw	r3,36(r2)
   62e94:	00a00034 	movhi	r2,32768
   62e98:	10bfff04 	addi	r2,r2,-4
   62e9c:	10c00536 	bltu	r2,r3,62eb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   62ea0:	e0bff917 	ldw	r2,-28(fp)
   62ea4:	10800917 	ldw	r2,36(r2)
   62ea8:	10c00044 	addi	r3,r2,1
   62eac:	e0bff917 	ldw	r2,-28(fp)
   62eb0:	10c00915 	stw	r3,36(r2)
   62eb4:	d0b25417 	ldw	r2,-14000(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   62eb8:	e037883a 	mov	sp,fp
   62ebc:	df000017 	ldw	fp,0(sp)
   62ec0:	dec00104 	addi	sp,sp,4
   62ec4:	f800283a 	ret

00062ec8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   62ec8:	defffd04 	addi	sp,sp,-12
   62ecc:	df000215 	stw	fp,8(sp)
   62ed0:	df000204 	addi	fp,sp,8
   62ed4:	e13ffe15 	stw	r4,-8(fp)
   62ed8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   62edc:	00000506 	br	62ef4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   62ee0:	e0bfff17 	ldw	r2,-4(fp)
   62ee4:	1090000c 	andi	r2,r2,16384
   62ee8:	10000226 	beq	r2,zero,62ef4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   62eec:	00bffd44 	movi	r2,-11
   62ef0:	00000b06 	br	62f20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   62ef4:	e0bffe17 	ldw	r2,-8(fp)
   62ef8:	10c00d17 	ldw	r3,52(r2)
   62efc:	e0bffe17 	ldw	r2,-8(fp)
   62f00:	10800c17 	ldw	r2,48(r2)
   62f04:	18800526 	beq	r3,r2,62f1c <altera_avalon_jtag_uart_close+0x54>
   62f08:	e0bffe17 	ldw	r2,-8(fp)
   62f0c:	10c00917 	ldw	r3,36(r2)
   62f10:	e0bffe17 	ldw	r2,-8(fp)
   62f14:	10800117 	ldw	r2,4(r2)
   62f18:	18bff136 	bltu	r3,r2,62ee0 <__alt_data_end+0xfffe2ee0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   62f1c:	0005883a 	mov	r2,zero
}
   62f20:	e037883a 	mov	sp,fp
   62f24:	df000017 	ldw	fp,0(sp)
   62f28:	dec00104 	addi	sp,sp,4
   62f2c:	f800283a 	ret

00062f30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   62f30:	defffa04 	addi	sp,sp,-24
   62f34:	df000515 	stw	fp,20(sp)
   62f38:	df000504 	addi	fp,sp,20
   62f3c:	e13ffd15 	stw	r4,-12(fp)
   62f40:	e17ffe15 	stw	r5,-8(fp)
   62f44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   62f48:	00bff9c4 	movi	r2,-25
   62f4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   62f50:	e0bffe17 	ldw	r2,-8(fp)
   62f54:	10da8060 	cmpeqi	r3,r2,27137
   62f58:	1800031e 	bne	r3,zero,62f68 <altera_avalon_jtag_uart_ioctl+0x38>
   62f5c:	109a80a0 	cmpeqi	r2,r2,27138
   62f60:	1000181e 	bne	r2,zero,62fc4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   62f64:	00002906 	br	6300c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   62f68:	e0bffd17 	ldw	r2,-12(fp)
   62f6c:	10c00117 	ldw	r3,4(r2)
   62f70:	00a00034 	movhi	r2,32768
   62f74:	10bfffc4 	addi	r2,r2,-1
   62f78:	18802126 	beq	r3,r2,63000 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   62f7c:	e0bfff17 	ldw	r2,-4(fp)
   62f80:	10800017 	ldw	r2,0(r2)
   62f84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   62f88:	e0bffc17 	ldw	r2,-16(fp)
   62f8c:	10800090 	cmplti	r2,r2,2
   62f90:	1000061e 	bne	r2,zero,62fac <altera_avalon_jtag_uart_ioctl+0x7c>
   62f94:	e0fffc17 	ldw	r3,-16(fp)
   62f98:	00a00034 	movhi	r2,32768
   62f9c:	10bfffc4 	addi	r2,r2,-1
   62fa0:	18800226 	beq	r3,r2,62fac <altera_avalon_jtag_uart_ioctl+0x7c>
   62fa4:	e0bffc17 	ldw	r2,-16(fp)
   62fa8:	00000206 	br	62fb4 <altera_avalon_jtag_uart_ioctl+0x84>
   62fac:	00a00034 	movhi	r2,32768
   62fb0:	10bfff84 	addi	r2,r2,-2
   62fb4:	e0fffd17 	ldw	r3,-12(fp)
   62fb8:	18800115 	stw	r2,4(r3)
      rc = 0;
   62fbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   62fc0:	00000f06 	br	63000 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   62fc4:	e0bffd17 	ldw	r2,-12(fp)
   62fc8:	10c00117 	ldw	r3,4(r2)
   62fcc:	00a00034 	movhi	r2,32768
   62fd0:	10bfffc4 	addi	r2,r2,-1
   62fd4:	18800c26 	beq	r3,r2,63008 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   62fd8:	e0bffd17 	ldw	r2,-12(fp)
   62fdc:	10c00917 	ldw	r3,36(r2)
   62fe0:	e0bffd17 	ldw	r2,-12(fp)
   62fe4:	10800117 	ldw	r2,4(r2)
   62fe8:	1885803a 	cmpltu	r2,r3,r2
   62fec:	10c03fcc 	andi	r3,r2,255
   62ff0:	e0bfff17 	ldw	r2,-4(fp)
   62ff4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   62ff8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   62ffc:	00000206 	br	63008 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   63000:	0001883a 	nop
   63004:	00000106 	br	6300c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   63008:	0001883a 	nop

  default:
    break;
  }

  return rc;
   6300c:	e0bffb17 	ldw	r2,-20(fp)
}
   63010:	e037883a 	mov	sp,fp
   63014:	df000017 	ldw	fp,0(sp)
   63018:	dec00104 	addi	sp,sp,4
   6301c:	f800283a 	ret

00063020 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   63020:	defff304 	addi	sp,sp,-52
   63024:	dfc00c15 	stw	ra,48(sp)
   63028:	df000b15 	stw	fp,44(sp)
   6302c:	df000b04 	addi	fp,sp,44
   63030:	e13ffc15 	stw	r4,-16(fp)
   63034:	e17ffd15 	stw	r5,-12(fp)
   63038:	e1bffe15 	stw	r6,-8(fp)
   6303c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   63040:	e0bffd17 	ldw	r2,-12(fp)
   63044:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   63048:	00004706 	br	63168 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   6304c:	e0bffc17 	ldw	r2,-16(fp)
   63050:	10800a17 	ldw	r2,40(r2)
   63054:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   63058:	e0bffc17 	ldw	r2,-16(fp)
   6305c:	10800b17 	ldw	r2,44(r2)
   63060:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   63064:	e0fff717 	ldw	r3,-36(fp)
   63068:	e0bff817 	ldw	r2,-32(fp)
   6306c:	18800536 	bltu	r3,r2,63084 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   63070:	e0fff717 	ldw	r3,-36(fp)
   63074:	e0bff817 	ldw	r2,-32(fp)
   63078:	1885c83a 	sub	r2,r3,r2
   6307c:	e0bff615 	stw	r2,-40(fp)
   63080:	00000406 	br	63094 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   63084:	00c20004 	movi	r3,2048
   63088:	e0bff817 	ldw	r2,-32(fp)
   6308c:	1885c83a 	sub	r2,r3,r2
   63090:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   63094:	e0bff617 	ldw	r2,-40(fp)
   63098:	10001e26 	beq	r2,zero,63114 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   6309c:	e0fffe17 	ldw	r3,-8(fp)
   630a0:	e0bff617 	ldw	r2,-40(fp)
   630a4:	1880022e 	bgeu	r3,r2,630b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   630a8:	e0bffe17 	ldw	r2,-8(fp)
   630ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   630b0:	e0bffc17 	ldw	r2,-16(fp)
   630b4:	10c00e04 	addi	r3,r2,56
   630b8:	e0bff817 	ldw	r2,-32(fp)
   630bc:	1885883a 	add	r2,r3,r2
   630c0:	e1bff617 	ldw	r6,-40(fp)
   630c4:	100b883a 	mov	r5,r2
   630c8:	e13ff517 	ldw	r4,-44(fp)
   630cc:	004fe540 	call	4fe54 <memcpy>
      ptr   += n;
   630d0:	e0fff517 	ldw	r3,-44(fp)
   630d4:	e0bff617 	ldw	r2,-40(fp)
   630d8:	1885883a 	add	r2,r3,r2
   630dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   630e0:	e0fffe17 	ldw	r3,-8(fp)
   630e4:	e0bff617 	ldw	r2,-40(fp)
   630e8:	1885c83a 	sub	r2,r3,r2
   630ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   630f0:	e0fff817 	ldw	r3,-32(fp)
   630f4:	e0bff617 	ldw	r2,-40(fp)
   630f8:	1885883a 	add	r2,r3,r2
   630fc:	10c1ffcc 	andi	r3,r2,2047
   63100:	e0bffc17 	ldw	r2,-16(fp)
   63104:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   63108:	e0bffe17 	ldw	r2,-8(fp)
   6310c:	00bfcf16 	blt	zero,r2,6304c <__alt_data_end+0xfffe304c>
   63110:	00000106 	br	63118 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   63114:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   63118:	e0fff517 	ldw	r3,-44(fp)
   6311c:	e0bffd17 	ldw	r2,-12(fp)
   63120:	1880141e 	bne	r3,r2,63174 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   63124:	e0bfff17 	ldw	r2,-4(fp)
   63128:	1090000c 	andi	r2,r2,16384
   6312c:	1000131e 	bne	r2,zero,6317c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   63130:	0001883a 	nop
   63134:	e0bffc17 	ldw	r2,-16(fp)
   63138:	10c00a17 	ldw	r3,40(r2)
   6313c:	e0bff717 	ldw	r2,-36(fp)
   63140:	1880051e 	bne	r3,r2,63158 <altera_avalon_jtag_uart_read+0x138>
   63144:	e0bffc17 	ldw	r2,-16(fp)
   63148:	10c00917 	ldw	r3,36(r2)
   6314c:	e0bffc17 	ldw	r2,-16(fp)
   63150:	10800117 	ldw	r2,4(r2)
   63154:	18bff736 	bltu	r3,r2,63134 <__alt_data_end+0xfffe3134>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   63158:	e0bffc17 	ldw	r2,-16(fp)
   6315c:	10c00a17 	ldw	r3,40(r2)
   63160:	e0bff717 	ldw	r2,-36(fp)
   63164:	18800726 	beq	r3,r2,63184 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   63168:	e0bffe17 	ldw	r2,-8(fp)
   6316c:	00bfb716 	blt	zero,r2,6304c <__alt_data_end+0xfffe304c>
   63170:	00000506 	br	63188 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   63174:	0001883a 	nop
   63178:	00000306 	br	63188 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   6317c:	0001883a 	nop
   63180:	00000106 	br	63188 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   63184:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   63188:	e0fff517 	ldw	r3,-44(fp)
   6318c:	e0bffd17 	ldw	r2,-12(fp)
   63190:	18801826 	beq	r3,r2,631f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63194:	0005303a 	rdctl	r2,status
   63198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6319c:	e0fffb17 	ldw	r3,-20(fp)
   631a0:	00bfff84 	movi	r2,-2
   631a4:	1884703a 	and	r2,r3,r2
   631a8:	1001703a 	wrctl	status,r2
  
  return context;
   631ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   631b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   631b4:	e0bffc17 	ldw	r2,-16(fp)
   631b8:	10800817 	ldw	r2,32(r2)
   631bc:	10c00054 	ori	r3,r2,1
   631c0:	e0bffc17 	ldw	r2,-16(fp)
   631c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   631c8:	e0bffc17 	ldw	r2,-16(fp)
   631cc:	10800017 	ldw	r2,0(r2)
   631d0:	10800104 	addi	r2,r2,4
   631d4:	1007883a 	mov	r3,r2
   631d8:	e0bffc17 	ldw	r2,-16(fp)
   631dc:	10800817 	ldw	r2,32(r2)
   631e0:	18800035 	stwio	r2,0(r3)
   631e4:	e0bffa17 	ldw	r2,-24(fp)
   631e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   631ec:	e0bff917 	ldw	r2,-28(fp)
   631f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   631f4:	e0fff517 	ldw	r3,-44(fp)
   631f8:	e0bffd17 	ldw	r2,-12(fp)
   631fc:	18800426 	beq	r3,r2,63210 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   63200:	e0fff517 	ldw	r3,-44(fp)
   63204:	e0bffd17 	ldw	r2,-12(fp)
   63208:	1885c83a 	sub	r2,r3,r2
   6320c:	00000606 	br	63228 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   63210:	e0bfff17 	ldw	r2,-4(fp)
   63214:	1090000c 	andi	r2,r2,16384
   63218:	10000226 	beq	r2,zero,63224 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   6321c:	00bffd44 	movi	r2,-11
   63220:	00000106 	br	63228 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   63224:	00bffec4 	movi	r2,-5
}
   63228:	e037883a 	mov	sp,fp
   6322c:	dfc00117 	ldw	ra,4(sp)
   63230:	df000017 	ldw	fp,0(sp)
   63234:	dec00204 	addi	sp,sp,8
   63238:	f800283a 	ret

0006323c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   6323c:	defff304 	addi	sp,sp,-52
   63240:	dfc00c15 	stw	ra,48(sp)
   63244:	df000b15 	stw	fp,44(sp)
   63248:	df000b04 	addi	fp,sp,44
   6324c:	e13ffc15 	stw	r4,-16(fp)
   63250:	e17ffd15 	stw	r5,-12(fp)
   63254:	e1bffe15 	stw	r6,-8(fp)
   63258:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   6325c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   63260:	e0bffd17 	ldw	r2,-12(fp)
   63264:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   63268:	00003706 	br	63348 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   6326c:	e0bffc17 	ldw	r2,-16(fp)
   63270:	10800c17 	ldw	r2,48(r2)
   63274:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   63278:	e0bffc17 	ldw	r2,-16(fp)
   6327c:	10800d17 	ldw	r2,52(r2)
   63280:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   63284:	e0fff917 	ldw	r3,-28(fp)
   63288:	e0bff517 	ldw	r2,-44(fp)
   6328c:	1880062e 	bgeu	r3,r2,632a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   63290:	e0fff517 	ldw	r3,-44(fp)
   63294:	e0bff917 	ldw	r2,-28(fp)
   63298:	1885c83a 	sub	r2,r3,r2
   6329c:	10bfffc4 	addi	r2,r2,-1
   632a0:	e0bff615 	stw	r2,-40(fp)
   632a4:	00000b06 	br	632d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   632a8:	e0bff517 	ldw	r2,-44(fp)
   632ac:	10000526 	beq	r2,zero,632c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   632b0:	00c20004 	movi	r3,2048
   632b4:	e0bff917 	ldw	r2,-28(fp)
   632b8:	1885c83a 	sub	r2,r3,r2
   632bc:	e0bff615 	stw	r2,-40(fp)
   632c0:	00000406 	br	632d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   632c4:	00c1ffc4 	movi	r3,2047
   632c8:	e0bff917 	ldw	r2,-28(fp)
   632cc:	1885c83a 	sub	r2,r3,r2
   632d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   632d4:	e0bff617 	ldw	r2,-40(fp)
   632d8:	10001e26 	beq	r2,zero,63354 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   632dc:	e0fffe17 	ldw	r3,-8(fp)
   632e0:	e0bff617 	ldw	r2,-40(fp)
   632e4:	1880022e 	bgeu	r3,r2,632f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   632e8:	e0bffe17 	ldw	r2,-8(fp)
   632ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   632f0:	e0bffc17 	ldw	r2,-16(fp)
   632f4:	10c20e04 	addi	r3,r2,2104
   632f8:	e0bff917 	ldw	r2,-28(fp)
   632fc:	1885883a 	add	r2,r3,r2
   63300:	e1bff617 	ldw	r6,-40(fp)
   63304:	e17ffd17 	ldw	r5,-12(fp)
   63308:	1009883a 	mov	r4,r2
   6330c:	004fe540 	call	4fe54 <memcpy>
      ptr   += n;
   63310:	e0fffd17 	ldw	r3,-12(fp)
   63314:	e0bff617 	ldw	r2,-40(fp)
   63318:	1885883a 	add	r2,r3,r2
   6331c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   63320:	e0fffe17 	ldw	r3,-8(fp)
   63324:	e0bff617 	ldw	r2,-40(fp)
   63328:	1885c83a 	sub	r2,r3,r2
   6332c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   63330:	e0fff917 	ldw	r3,-28(fp)
   63334:	e0bff617 	ldw	r2,-40(fp)
   63338:	1885883a 	add	r2,r3,r2
   6333c:	10c1ffcc 	andi	r3,r2,2047
   63340:	e0bffc17 	ldw	r2,-16(fp)
   63344:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   63348:	e0bffe17 	ldw	r2,-8(fp)
   6334c:	00bfc716 	blt	zero,r2,6326c <__alt_data_end+0xfffe326c>
   63350:	00000106 	br	63358 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   63354:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63358:	0005303a 	rdctl	r2,status
   6335c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63360:	e0fffb17 	ldw	r3,-20(fp)
   63364:	00bfff84 	movi	r2,-2
   63368:	1884703a 	and	r2,r3,r2
   6336c:	1001703a 	wrctl	status,r2
  
  return context;
   63370:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   63374:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   63378:	e0bffc17 	ldw	r2,-16(fp)
   6337c:	10800817 	ldw	r2,32(r2)
   63380:	10c00094 	ori	r3,r2,2
   63384:	e0bffc17 	ldw	r2,-16(fp)
   63388:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   6338c:	e0bffc17 	ldw	r2,-16(fp)
   63390:	10800017 	ldw	r2,0(r2)
   63394:	10800104 	addi	r2,r2,4
   63398:	1007883a 	mov	r3,r2
   6339c:	e0bffc17 	ldw	r2,-16(fp)
   633a0:	10800817 	ldw	r2,32(r2)
   633a4:	18800035 	stwio	r2,0(r3)
   633a8:	e0bffa17 	ldw	r2,-24(fp)
   633ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   633b0:	e0bff817 	ldw	r2,-32(fp)
   633b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   633b8:	e0bffe17 	ldw	r2,-8(fp)
   633bc:	0080100e 	bge	zero,r2,63400 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   633c0:	e0bfff17 	ldw	r2,-4(fp)
   633c4:	1090000c 	andi	r2,r2,16384
   633c8:	1000101e 	bne	r2,zero,6340c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   633cc:	0001883a 	nop
   633d0:	e0bffc17 	ldw	r2,-16(fp)
   633d4:	10c00d17 	ldw	r3,52(r2)
   633d8:	e0bff517 	ldw	r2,-44(fp)
   633dc:	1880051e 	bne	r3,r2,633f4 <altera_avalon_jtag_uart_write+0x1b8>
   633e0:	e0bffc17 	ldw	r2,-16(fp)
   633e4:	10c00917 	ldw	r3,36(r2)
   633e8:	e0bffc17 	ldw	r2,-16(fp)
   633ec:	10800117 	ldw	r2,4(r2)
   633f0:	18bff736 	bltu	r3,r2,633d0 <__alt_data_end+0xfffe33d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   633f4:	e0bffc17 	ldw	r2,-16(fp)
   633f8:	10800917 	ldw	r2,36(r2)
   633fc:	1000051e 	bne	r2,zero,63414 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   63400:	e0bffe17 	ldw	r2,-8(fp)
   63404:	00bfd016 	blt	zero,r2,63348 <__alt_data_end+0xfffe3348>
   63408:	00000306 	br	63418 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   6340c:	0001883a 	nop
   63410:	00000106 	br	63418 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   63414:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   63418:	e0fffd17 	ldw	r3,-12(fp)
   6341c:	e0bff717 	ldw	r2,-36(fp)
   63420:	18800426 	beq	r3,r2,63434 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   63424:	e0fffd17 	ldw	r3,-12(fp)
   63428:	e0bff717 	ldw	r2,-36(fp)
   6342c:	1885c83a 	sub	r2,r3,r2
   63430:	00000606 	br	6344c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   63434:	e0bfff17 	ldw	r2,-4(fp)
   63438:	1090000c 	andi	r2,r2,16384
   6343c:	10000226 	beq	r2,zero,63448 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   63440:	00bffd44 	movi	r2,-11
   63444:	00000106 	br	6344c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   63448:	00bffec4 	movi	r2,-5
}
   6344c:	e037883a 	mov	sp,fp
   63450:	dfc00117 	ldw	ra,4(sp)
   63454:	df000017 	ldw	fp,0(sp)
   63458:	dec00204 	addi	sp,sp,8
   6345c:	f800283a 	ret

00063460 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   63460:	defff404 	addi	sp,sp,-48
   63464:	df000b15 	stw	fp,44(sp)
   63468:	df000b04 	addi	fp,sp,44
   6346c:	e13ffc15 	stw	r4,-16(fp)
   63470:	e17ffd15 	stw	r5,-12(fp)
   63474:	e1bffe15 	stw	r6,-8(fp)
   63478:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   6347c:	e0ffff17 	ldw	r3,-4(fp)
   63480:	e0bffe17 	ldw	r2,-8(fp)
   63484:	1885883a 	add	r2,r3,r2
   63488:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   6348c:	e0c00217 	ldw	r3,8(fp)
   63490:	e0800117 	ldw	r2,4(fp)
   63494:	1885883a 	add	r2,r3,r2
   63498:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   6349c:	e0800117 	ldw	r2,4(fp)
   634a0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   634a4:	e0bffe17 	ldw	r2,-8(fp)
   634a8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   634ac:	00800044 	movi	r2,1
   634b0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   634b4:	e0bffc17 	ldw	r2,-16(fp)
   634b8:	10800504 	addi	r2,r2,20
   634bc:	1009883a 	mov	r4,r2
   634c0:	00c00044 	movi	r3,1
   634c4:	e0bffd17 	ldw	r2,-12(fp)
   634c8:	1884983a 	sll	r2,r3,r2
   634cc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   634d0:	e0800317 	ldw	r2,12(fp)
   634d4:	1080008c 	andi	r2,r2,2
   634d8:	1000051e 	bne	r2,zero,634f0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   634dc:	e0bffc17 	ldw	r2,-16(fp)
   634e0:	10800304 	addi	r2,r2,12
   634e4:	1007883a 	mov	r3,r2
   634e8:	00810004 	movi	r2,1024
   634ec:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   634f0:	e0bffc17 	ldw	r2,-16(fp)
   634f4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   634f8:	e0bffc17 	ldw	r2,-16(fp)
   634fc:	10800204 	addi	r2,r2,8
   63500:	10800037 	ldwio	r2,0(r2)
   63504:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   63508:	e0bffa17 	ldw	r2,-24(fp)
   6350c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   63510:	10000226 	beq	r2,zero,6351c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   63514:	e0bff717 	ldw	r2,-36(fp)
   63518:	1000031e 	bne	r2,zero,63528 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   6351c:	e0bffa17 	ldw	r2,-24(fp)
   63520:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   63524:	103ff426 	beq	r2,zero,634f8 <__alt_data_end+0xfffe34f8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   63528:	e0bffa17 	ldw	r2,-24(fp)
   6352c:	1080100c 	andi	r2,r2,64
   63530:	10001e26 	beq	r2,zero,635ac <alt_avalon_spi_command+0x14c>
   63534:	e0bff717 	ldw	r2,-36(fp)
   63538:	00801c0e 	bge	zero,r2,635ac <alt_avalon_spi_command+0x14c>
    {
      credits--;
   6353c:	e0bff717 	ldw	r2,-36(fp)
   63540:	10bfffc4 	addi	r2,r2,-1
   63544:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   63548:	e0ffff17 	ldw	r3,-4(fp)
   6354c:	e0bff817 	ldw	r2,-32(fp)
   63550:	18800a2e 	bgeu	r3,r2,6357c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   63554:	e0bffc17 	ldw	r2,-16(fp)
   63558:	10800104 	addi	r2,r2,4
   6355c:	1009883a 	mov	r4,r2
   63560:	e0bfff17 	ldw	r2,-4(fp)
   63564:	10c00044 	addi	r3,r2,1
   63568:	e0ffff15 	stw	r3,-4(fp)
   6356c:	10800003 	ldbu	r2,0(r2)
   63570:	10803fcc 	andi	r2,r2,255
   63574:	20800035 	stwio	r2,0(r4)
   63578:	00000c06 	br	635ac <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   6357c:	e0bff517 	ldw	r2,-44(fp)
   63580:	10000826 	beq	r2,zero,635a4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   63584:	e0bff517 	ldw	r2,-44(fp)
   63588:	10bfffc4 	addi	r2,r2,-1
   6358c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   63590:	e0bffc17 	ldw	r2,-16(fp)
   63594:	10800104 	addi	r2,r2,4
   63598:	0007883a 	mov	r3,zero
   6359c:	10c00035 	stwio	r3,0(r2)
   635a0:	00000206 	br	635ac <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   635a4:	00bf0004 	movi	r2,-1024
   635a8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   635ac:	e0bffa17 	ldw	r2,-24(fp)
   635b0:	1080200c 	andi	r2,r2,128
   635b4:	103fd026 	beq	r2,zero,634f8 <__alt_data_end+0xfffe34f8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   635b8:	e0bffc17 	ldw	r2,-16(fp)
   635bc:	10800037 	ldwio	r2,0(r2)
   635c0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   635c4:	e0bff617 	ldw	r2,-40(fp)
   635c8:	10000426 	beq	r2,zero,635dc <alt_avalon_spi_command+0x17c>
        read_ignore--;
   635cc:	e0bff617 	ldw	r2,-40(fp)
   635d0:	10bfffc4 	addi	r2,r2,-1
   635d4:	e0bff615 	stw	r2,-40(fp)
   635d8:	00000506 	br	635f0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   635dc:	e0800217 	ldw	r2,8(fp)
   635e0:	10c00044 	addi	r3,r2,1
   635e4:	e0c00215 	stw	r3,8(fp)
   635e8:	e0fffb17 	ldw	r3,-20(fp)
   635ec:	10c00005 	stb	r3,0(r2)
      credits++;
   635f0:	e0bff717 	ldw	r2,-36(fp)
   635f4:	10800044 	addi	r2,r2,1
   635f8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   635fc:	e0bff617 	ldw	r2,-40(fp)
   63600:	103fbd1e 	bne	r2,zero,634f8 <__alt_data_end+0xfffe34f8>
   63604:	e0c00217 	ldw	r3,8(fp)
   63608:	e0bff917 	ldw	r2,-28(fp)
   6360c:	18bfba1e 	bne	r3,r2,634f8 <__alt_data_end+0xfffe34f8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   63610:	e0bffc17 	ldw	r2,-16(fp)
   63614:	10800204 	addi	r2,r2,8
   63618:	10800037 	ldwio	r2,0(r2)
   6361c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   63620:	e0bffa17 	ldw	r2,-24(fp)
   63624:	1080080c 	andi	r2,r2,32
   63628:	103ff926 	beq	r2,zero,63610 <__alt_data_end+0xfffe3610>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   6362c:	e0800317 	ldw	r2,12(fp)
   63630:	1080004c 	andi	r2,r2,1
   63634:	1000041e 	bne	r2,zero,63648 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   63638:	e0bffc17 	ldw	r2,-16(fp)
   6363c:	10800304 	addi	r2,r2,12
   63640:	0007883a 	mov	r3,zero
   63644:	10c00035 	stwio	r3,0(r2)

  return read_length;
   63648:	e0800117 	ldw	r2,4(fp)
}
   6364c:	e037883a 	mov	sp,fp
   63650:	df000017 	ldw	fp,0(sp)
   63654:	dec00104 	addi	sp,sp,4
   63658:	f800283a 	ret

0006365c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   6365c:	defffa04 	addi	sp,sp,-24
   63660:	dfc00515 	stw	ra,20(sp)
   63664:	df000415 	stw	fp,16(sp)
   63668:	df000404 	addi	fp,sp,16
   6366c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   63670:	0007883a 	mov	r3,zero
   63674:	e0bfff17 	ldw	r2,-4(fp)
   63678:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   6367c:	e0bfff17 	ldw	r2,-4(fp)
   63680:	10800104 	addi	r2,r2,4
   63684:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63688:	0005303a 	rdctl	r2,status
   6368c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63690:	e0fffd17 	ldw	r3,-12(fp)
   63694:	00bfff84 	movi	r2,-2
   63698:	1884703a 	and	r2,r3,r2
   6369c:	1001703a 	wrctl	status,r2
  
  return context;
   636a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   636a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   636a8:	00645cc0 	call	645cc <alt_tick>
   636ac:	e0bffc17 	ldw	r2,-16(fp)
   636b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   636b4:	e0bffe17 	ldw	r2,-8(fp)
   636b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   636bc:	0001883a 	nop
   636c0:	e037883a 	mov	sp,fp
   636c4:	dfc00117 	ldw	ra,4(sp)
   636c8:	df000017 	ldw	fp,0(sp)
   636cc:	dec00204 	addi	sp,sp,8
   636d0:	f800283a 	ret

000636d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   636d4:	defff804 	addi	sp,sp,-32
   636d8:	dfc00715 	stw	ra,28(sp)
   636dc:	df000615 	stw	fp,24(sp)
   636e0:	df000604 	addi	fp,sp,24
   636e4:	e13ffc15 	stw	r4,-16(fp)
   636e8:	e17ffd15 	stw	r5,-12(fp)
   636ec:	e1bffe15 	stw	r6,-8(fp)
   636f0:	e1ffff15 	stw	r7,-4(fp)
   636f4:	e0bfff17 	ldw	r2,-4(fp)
   636f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   636fc:	d0b25417 	ldw	r2,-14000(gp)
   63700:	1000021e 	bne	r2,zero,6370c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   63704:	e0bffb17 	ldw	r2,-20(fp)
   63708:	d0b25415 	stw	r2,-14000(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   6370c:	e0bffc17 	ldw	r2,-16(fp)
   63710:	10800104 	addi	r2,r2,4
   63714:	00c001c4 	movi	r3,7
   63718:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   6371c:	d8000015 	stw	zero,0(sp)
   63720:	e1fffc17 	ldw	r7,-16(fp)
   63724:	018001b4 	movhi	r6,6
   63728:	318d9704 	addi	r6,r6,13916
   6372c:	e17ffe17 	ldw	r5,-8(fp)
   63730:	e13ffd17 	ldw	r4,-12(fp)
   63734:	0063c440 	call	63c44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   63738:	0001883a 	nop
   6373c:	e037883a 	mov	sp,fp
   63740:	dfc00117 	ldw	ra,4(sp)
   63744:	df000017 	ldw	fp,0(sp)
   63748:	dec00204 	addi	sp,sp,8
   6374c:	f800283a 	ret

00063750 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   63750:	defff504 	addi	sp,sp,-44
   63754:	df000a15 	stw	fp,40(sp)
   63758:	df000a04 	addi	fp,sp,40
   6375c:	e13ffc15 	stw	r4,-16(fp)
   63760:	e17ffd15 	stw	r5,-12(fp)
   63764:	e1bffe15 	stw	r6,-8(fp)
   63768:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   6376c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   63770:	d0b25417 	ldw	r2,-14000(gp)
  
  if (alt_ticks_per_second ())
   63774:	10003c26 	beq	r2,zero,63868 <alt_alarm_start+0x118>
  {
    if (alarm)
   63778:	e0bffc17 	ldw	r2,-16(fp)
   6377c:	10003826 	beq	r2,zero,63860 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   63780:	e0bffc17 	ldw	r2,-16(fp)
   63784:	e0fffe17 	ldw	r3,-8(fp)
   63788:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   6378c:	e0bffc17 	ldw	r2,-16(fp)
   63790:	e0ffff17 	ldw	r3,-4(fp)
   63794:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63798:	0005303a 	rdctl	r2,status
   6379c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   637a0:	e0fff917 	ldw	r3,-28(fp)
   637a4:	00bfff84 	movi	r2,-2
   637a8:	1884703a 	and	r2,r3,r2
   637ac:	1001703a 	wrctl	status,r2
  
  return context;
   637b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   637b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   637b8:	d0b25517 	ldw	r2,-13996(gp)
      
      current_nticks = alt_nticks();
   637bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   637c0:	e0fffd17 	ldw	r3,-12(fp)
   637c4:	e0bff617 	ldw	r2,-40(fp)
   637c8:	1885883a 	add	r2,r3,r2
   637cc:	10c00044 	addi	r3,r2,1
   637d0:	e0bffc17 	ldw	r2,-16(fp)
   637d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   637d8:	e0bffc17 	ldw	r2,-16(fp)
   637dc:	10c00217 	ldw	r3,8(r2)
   637e0:	e0bff617 	ldw	r2,-40(fp)
   637e4:	1880042e 	bgeu	r3,r2,637f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   637e8:	e0bffc17 	ldw	r2,-16(fp)
   637ec:	00c00044 	movi	r3,1
   637f0:	10c00405 	stb	r3,16(r2)
   637f4:	00000206 	br	63800 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   637f8:	e0bffc17 	ldw	r2,-16(fp)
   637fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   63800:	e0bffc17 	ldw	r2,-16(fp)
   63804:	d0e5c004 	addi	r3,gp,-26880
   63808:	e0fffa15 	stw	r3,-24(fp)
   6380c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   63810:	e0bffb17 	ldw	r2,-20(fp)
   63814:	e0fffa17 	ldw	r3,-24(fp)
   63818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   6381c:	e0bffa17 	ldw	r2,-24(fp)
   63820:	10c00017 	ldw	r3,0(r2)
   63824:	e0bffb17 	ldw	r2,-20(fp)
   63828:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   6382c:	e0bffa17 	ldw	r2,-24(fp)
   63830:	10800017 	ldw	r2,0(r2)
   63834:	e0fffb17 	ldw	r3,-20(fp)
   63838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   6383c:	e0bffa17 	ldw	r2,-24(fp)
   63840:	e0fffb17 	ldw	r3,-20(fp)
   63844:	10c00015 	stw	r3,0(r2)
   63848:	e0bff817 	ldw	r2,-32(fp)
   6384c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   63850:	e0bff717 	ldw	r2,-36(fp)
   63854:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   63858:	0005883a 	mov	r2,zero
   6385c:	00000306 	br	6386c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   63860:	00bffa84 	movi	r2,-22
   63864:	00000106 	br	6386c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   63868:	00bfde84 	movi	r2,-134
  }
}
   6386c:	e037883a 	mov	sp,fp
   63870:	df000017 	ldw	fp,0(sp)
   63874:	dec00104 	addi	sp,sp,4
   63878:	f800283a 	ret

0006387c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   6387c:	defffa04 	addi	sp,sp,-24
   63880:	dfc00515 	stw	ra,20(sp)
   63884:	df000415 	stw	fp,16(sp)
   63888:	df000404 	addi	fp,sp,16
   6388c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   63890:	00800244 	movi	r2,9
   63894:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   63898:	014003f4 	movhi	r5,15
   6389c:	29509004 	addi	r5,r5,16960
   638a0:	e13ffd17 	ldw	r4,-12(fp)
   638a4:	004dab40 	call	4dab4 <__mulsi3>
   638a8:	100b883a 	mov	r5,r2
   638ac:	01017db4 	movhi	r4,1526
   638b0:	21384004 	addi	r4,r4,-7936
   638b4:	004d9f80 	call	4d9f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   638b8:	100b883a 	mov	r5,r2
   638bc:	01200034 	movhi	r4,32768
   638c0:	213fffc4 	addi	r4,r4,-1
   638c4:	004d9f80 	call	4d9f8 <__udivsi3>
   638c8:	100b883a 	mov	r5,r2
   638cc:	e13fff17 	ldw	r4,-4(fp)
   638d0:	004d9f80 	call	4d9f8 <__udivsi3>
   638d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   638d8:	e0bffe17 	ldw	r2,-8(fp)
   638dc:	10002a26 	beq	r2,zero,63988 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   638e0:	e03ffc15 	stw	zero,-16(fp)
   638e4:	00001706 	br	63944 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   638e8:	00a00034 	movhi	r2,32768
   638ec:	10bfffc4 	addi	r2,r2,-1
   638f0:	10bfffc4 	addi	r2,r2,-1
   638f4:	103ffe1e 	bne	r2,zero,638f0 <__alt_data_end+0xfffe38f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   638f8:	014003f4 	movhi	r5,15
   638fc:	29509004 	addi	r5,r5,16960
   63900:	e13ffd17 	ldw	r4,-12(fp)
   63904:	004dab40 	call	4dab4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   63908:	100b883a 	mov	r5,r2
   6390c:	01017db4 	movhi	r4,1526
   63910:	21384004 	addi	r4,r4,-7936
   63914:	004d9f80 	call	4d9f8 <__udivsi3>
   63918:	100b883a 	mov	r5,r2
   6391c:	01200034 	movhi	r4,32768
   63920:	213fffc4 	addi	r4,r4,-1
   63924:	004d9f80 	call	4d9f8 <__udivsi3>
   63928:	1007883a 	mov	r3,r2
   6392c:	e0bfff17 	ldw	r2,-4(fp)
   63930:	10c5c83a 	sub	r2,r2,r3
   63934:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   63938:	e0bffc17 	ldw	r2,-16(fp)
   6393c:	10800044 	addi	r2,r2,1
   63940:	e0bffc15 	stw	r2,-16(fp)
   63944:	e0fffc17 	ldw	r3,-16(fp)
   63948:	e0bffe17 	ldw	r2,-8(fp)
   6394c:	18bfe616 	blt	r3,r2,638e8 <__alt_data_end+0xfffe38e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   63950:	014003f4 	movhi	r5,15
   63954:	29509004 	addi	r5,r5,16960
   63958:	e13ffd17 	ldw	r4,-12(fp)
   6395c:	004dab40 	call	4dab4 <__mulsi3>
   63960:	100b883a 	mov	r5,r2
   63964:	01017db4 	movhi	r4,1526
   63968:	21384004 	addi	r4,r4,-7936
   6396c:	004d9f80 	call	4d9f8 <__udivsi3>
   63970:	e17fff17 	ldw	r5,-4(fp)
   63974:	1009883a 	mov	r4,r2
   63978:	004dab40 	call	4dab4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   6397c:	10bfffc4 	addi	r2,r2,-1
   63980:	103ffe1e 	bne	r2,zero,6397c <__alt_data_end+0xfffe397c>
   63984:	00000d06 	br	639bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   63988:	014003f4 	movhi	r5,15
   6398c:	29509004 	addi	r5,r5,16960
   63990:	e13ffd17 	ldw	r4,-12(fp)
   63994:	004dab40 	call	4dab4 <__mulsi3>
   63998:	100b883a 	mov	r5,r2
   6399c:	01017db4 	movhi	r4,1526
   639a0:	21384004 	addi	r4,r4,-7936
   639a4:	004d9f80 	call	4d9f8 <__udivsi3>
   639a8:	e17fff17 	ldw	r5,-4(fp)
   639ac:	1009883a 	mov	r4,r2
   639b0:	004dab40 	call	4dab4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   639b4:	10bfffc4 	addi	r2,r2,-1
   639b8:	00bffe16 	blt	zero,r2,639b4 <__alt_data_end+0xfffe39b4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   639bc:	0005883a 	mov	r2,zero
}
   639c0:	e037883a 	mov	sp,fp
   639c4:	dfc00117 	ldw	ra,4(sp)
   639c8:	df000017 	ldw	fp,0(sp)
   639cc:	dec00204 	addi	sp,sp,8
   639d0:	f800283a 	ret

000639d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   639d4:	deffff04 	addi	sp,sp,-4
   639d8:	df000015 	stw	fp,0(sp)
   639dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   639e0:	0001883a 	nop
   639e4:	e037883a 	mov	sp,fp
   639e8:	df000017 	ldw	fp,0(sp)
   639ec:	dec00104 	addi	sp,sp,4
   639f0:	f800283a 	ret

000639f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   639f4:	defffe04 	addi	sp,sp,-8
   639f8:	dfc00115 	stw	ra,4(sp)
   639fc:	df000015 	stw	fp,0(sp)
   63a00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   63a04:	d0a5bb17 	ldw	r2,-26900(gp)
   63a08:	10000326 	beq	r2,zero,63a18 <alt_get_errno+0x24>
   63a0c:	d0a5bb17 	ldw	r2,-26900(gp)
   63a10:	103ee83a 	callr	r2
   63a14:	00000106 	br	63a1c <alt_get_errno+0x28>
   63a18:	d0b24c04 	addi	r2,gp,-14032
}
   63a1c:	e037883a 	mov	sp,fp
   63a20:	dfc00117 	ldw	ra,4(sp)
   63a24:	df000017 	ldw	fp,0(sp)
   63a28:	dec00204 	addi	sp,sp,8
   63a2c:	f800283a 	ret

00063a30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   63a30:	defffa04 	addi	sp,sp,-24
   63a34:	dfc00515 	stw	ra,20(sp)
   63a38:	df000415 	stw	fp,16(sp)
   63a3c:	df000404 	addi	fp,sp,16
   63a40:	e13ffe15 	stw	r4,-8(fp)
   63a44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   63a48:	e0bffe17 	ldw	r2,-8(fp)
   63a4c:	10000326 	beq	r2,zero,63a5c <alt_dev_llist_insert+0x2c>
   63a50:	e0bffe17 	ldw	r2,-8(fp)
   63a54:	10800217 	ldw	r2,8(r2)
   63a58:	1000061e 	bne	r2,zero,63a74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   63a5c:	00639f40 	call	639f4 <alt_get_errno>
   63a60:	1007883a 	mov	r3,r2
   63a64:	00800584 	movi	r2,22
   63a68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   63a6c:	00bffa84 	movi	r2,-22
   63a70:	00001306 	br	63ac0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   63a74:	e0bffe17 	ldw	r2,-8(fp)
   63a78:	e0ffff17 	ldw	r3,-4(fp)
   63a7c:	e0fffc15 	stw	r3,-16(fp)
   63a80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   63a84:	e0bffd17 	ldw	r2,-12(fp)
   63a88:	e0fffc17 	ldw	r3,-16(fp)
   63a8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   63a90:	e0bffc17 	ldw	r2,-16(fp)
   63a94:	10c00017 	ldw	r3,0(r2)
   63a98:	e0bffd17 	ldw	r2,-12(fp)
   63a9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   63aa0:	e0bffc17 	ldw	r2,-16(fp)
   63aa4:	10800017 	ldw	r2,0(r2)
   63aa8:	e0fffd17 	ldw	r3,-12(fp)
   63aac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   63ab0:	e0bffc17 	ldw	r2,-16(fp)
   63ab4:	e0fffd17 	ldw	r3,-12(fp)
   63ab8:	10c00015 	stw	r3,0(r2)

  return 0;  
   63abc:	0005883a 	mov	r2,zero
}
   63ac0:	e037883a 	mov	sp,fp
   63ac4:	dfc00117 	ldw	ra,4(sp)
   63ac8:	df000017 	ldw	fp,0(sp)
   63acc:	dec00204 	addi	sp,sp,8
   63ad0:	f800283a 	ret

00063ad4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   63ad4:	defffd04 	addi	sp,sp,-12
   63ad8:	dfc00215 	stw	ra,8(sp)
   63adc:	df000115 	stw	fp,4(sp)
   63ae0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   63ae4:	008001b4 	movhi	r2,6
   63ae8:	10933f04 	addi	r2,r2,19708
   63aec:	e0bfff15 	stw	r2,-4(fp)
   63af0:	00000606 	br	63b0c <_do_ctors+0x38>
        (*ctor) (); 
   63af4:	e0bfff17 	ldw	r2,-4(fp)
   63af8:	10800017 	ldw	r2,0(r2)
   63afc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   63b00:	e0bfff17 	ldw	r2,-4(fp)
   63b04:	10bfff04 	addi	r2,r2,-4
   63b08:	e0bfff15 	stw	r2,-4(fp)
   63b0c:	e0ffff17 	ldw	r3,-4(fp)
   63b10:	008001b4 	movhi	r2,6
   63b14:	10933e04 	addi	r2,r2,19704
   63b18:	18bff62e 	bgeu	r3,r2,63af4 <__alt_data_end+0xfffe3af4>
        (*ctor) (); 
}
   63b1c:	0001883a 	nop
   63b20:	e037883a 	mov	sp,fp
   63b24:	dfc00117 	ldw	ra,4(sp)
   63b28:	df000017 	ldw	fp,0(sp)
   63b2c:	dec00204 	addi	sp,sp,8
   63b30:	f800283a 	ret

00063b34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   63b34:	defffd04 	addi	sp,sp,-12
   63b38:	dfc00215 	stw	ra,8(sp)
   63b3c:	df000115 	stw	fp,4(sp)
   63b40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   63b44:	008001b4 	movhi	r2,6
   63b48:	10933f04 	addi	r2,r2,19708
   63b4c:	e0bfff15 	stw	r2,-4(fp)
   63b50:	00000606 	br	63b6c <_do_dtors+0x38>
        (*dtor) (); 
   63b54:	e0bfff17 	ldw	r2,-4(fp)
   63b58:	10800017 	ldw	r2,0(r2)
   63b5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   63b60:	e0bfff17 	ldw	r2,-4(fp)
   63b64:	10bfff04 	addi	r2,r2,-4
   63b68:	e0bfff15 	stw	r2,-4(fp)
   63b6c:	e0ffff17 	ldw	r3,-4(fp)
   63b70:	008001b4 	movhi	r2,6
   63b74:	10934004 	addi	r2,r2,19712
   63b78:	18bff62e 	bgeu	r3,r2,63b54 <__alt_data_end+0xfffe3b54>
        (*dtor) (); 
}
   63b7c:	0001883a 	nop
   63b80:	e037883a 	mov	sp,fp
   63b84:	dfc00117 	ldw	ra,4(sp)
   63b88:	df000017 	ldw	fp,0(sp)
   63b8c:	dec00204 	addi	sp,sp,8
   63b90:	f800283a 	ret

00063b94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   63b94:	defffa04 	addi	sp,sp,-24
   63b98:	dfc00515 	stw	ra,20(sp)
   63b9c:	df000415 	stw	fp,16(sp)
   63ba0:	df000404 	addi	fp,sp,16
   63ba4:	e13ffe15 	stw	r4,-8(fp)
   63ba8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   63bac:	e0bfff17 	ldw	r2,-4(fp)
   63bb0:	10800017 	ldw	r2,0(r2)
   63bb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   63bb8:	e13ffe17 	ldw	r4,-8(fp)
   63bbc:	005071c0 	call	5071c <strlen>
   63bc0:	10800044 	addi	r2,r2,1
   63bc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   63bc8:	00000d06 	br	63c00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   63bcc:	e0bffc17 	ldw	r2,-16(fp)
   63bd0:	10800217 	ldw	r2,8(r2)
   63bd4:	e0fffd17 	ldw	r3,-12(fp)
   63bd8:	180d883a 	mov	r6,r3
   63bdc:	e17ffe17 	ldw	r5,-8(fp)
   63be0:	1009883a 	mov	r4,r2
   63be4:	00649ac0 	call	649ac <memcmp>
   63be8:	1000021e 	bne	r2,zero,63bf4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   63bec:	e0bffc17 	ldw	r2,-16(fp)
   63bf0:	00000706 	br	63c10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   63bf4:	e0bffc17 	ldw	r2,-16(fp)
   63bf8:	10800017 	ldw	r2,0(r2)
   63bfc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   63c00:	e0fffc17 	ldw	r3,-16(fp)
   63c04:	e0bfff17 	ldw	r2,-4(fp)
   63c08:	18bff01e 	bne	r3,r2,63bcc <__alt_data_end+0xfffe3bcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   63c0c:	0005883a 	mov	r2,zero
}
   63c10:	e037883a 	mov	sp,fp
   63c14:	dfc00117 	ldw	ra,4(sp)
   63c18:	df000017 	ldw	fp,0(sp)
   63c1c:	dec00204 	addi	sp,sp,8
   63c20:	f800283a 	ret

00063c24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   63c24:	deffff04 	addi	sp,sp,-4
   63c28:	df000015 	stw	fp,0(sp)
   63c2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   63c30:	0001883a 	nop
   63c34:	e037883a 	mov	sp,fp
   63c38:	df000017 	ldw	fp,0(sp)
   63c3c:	dec00104 	addi	sp,sp,4
   63c40:	f800283a 	ret

00063c44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   63c44:	defff904 	addi	sp,sp,-28
   63c48:	dfc00615 	stw	ra,24(sp)
   63c4c:	df000515 	stw	fp,20(sp)
   63c50:	df000504 	addi	fp,sp,20
   63c54:	e13ffc15 	stw	r4,-16(fp)
   63c58:	e17ffd15 	stw	r5,-12(fp)
   63c5c:	e1bffe15 	stw	r6,-8(fp)
   63c60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   63c64:	e0800217 	ldw	r2,8(fp)
   63c68:	d8800015 	stw	r2,0(sp)
   63c6c:	e1ffff17 	ldw	r7,-4(fp)
   63c70:	e1bffe17 	ldw	r6,-8(fp)
   63c74:	e17ffd17 	ldw	r5,-12(fp)
   63c78:	e13ffc17 	ldw	r4,-16(fp)
   63c7c:	0063df40 	call	63df4 <alt_iic_isr_register>
}  
   63c80:	e037883a 	mov	sp,fp
   63c84:	dfc00117 	ldw	ra,4(sp)
   63c88:	df000017 	ldw	fp,0(sp)
   63c8c:	dec00204 	addi	sp,sp,8
   63c90:	f800283a 	ret

00063c94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   63c94:	defff904 	addi	sp,sp,-28
   63c98:	df000615 	stw	fp,24(sp)
   63c9c:	df000604 	addi	fp,sp,24
   63ca0:	e13ffe15 	stw	r4,-8(fp)
   63ca4:	e17fff15 	stw	r5,-4(fp)
   63ca8:	e0bfff17 	ldw	r2,-4(fp)
   63cac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63cb0:	0005303a 	rdctl	r2,status
   63cb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63cb8:	e0fffb17 	ldw	r3,-20(fp)
   63cbc:	00bfff84 	movi	r2,-2
   63cc0:	1884703a 	and	r2,r3,r2
   63cc4:	1001703a 	wrctl	status,r2
  
  return context;
   63cc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   63ccc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   63cd0:	00c00044 	movi	r3,1
   63cd4:	e0bffa17 	ldw	r2,-24(fp)
   63cd8:	1884983a 	sll	r2,r3,r2
   63cdc:	1007883a 	mov	r3,r2
   63ce0:	d0b25317 	ldw	r2,-14004(gp)
   63ce4:	1884b03a 	or	r2,r3,r2
   63ce8:	d0b25315 	stw	r2,-14004(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   63cec:	d0b25317 	ldw	r2,-14004(gp)
   63cf0:	100170fa 	wrctl	ienable,r2
   63cf4:	e0bffc17 	ldw	r2,-16(fp)
   63cf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   63cfc:	e0bffd17 	ldw	r2,-12(fp)
   63d00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   63d04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   63d08:	0001883a 	nop
}
   63d0c:	e037883a 	mov	sp,fp
   63d10:	df000017 	ldw	fp,0(sp)
   63d14:	dec00104 	addi	sp,sp,4
   63d18:	f800283a 	ret

00063d1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   63d1c:	defff904 	addi	sp,sp,-28
   63d20:	df000615 	stw	fp,24(sp)
   63d24:	df000604 	addi	fp,sp,24
   63d28:	e13ffe15 	stw	r4,-8(fp)
   63d2c:	e17fff15 	stw	r5,-4(fp)
   63d30:	e0bfff17 	ldw	r2,-4(fp)
   63d34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63d38:	0005303a 	rdctl	r2,status
   63d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63d40:	e0fffb17 	ldw	r3,-20(fp)
   63d44:	00bfff84 	movi	r2,-2
   63d48:	1884703a 	and	r2,r3,r2
   63d4c:	1001703a 	wrctl	status,r2
  
  return context;
   63d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   63d54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   63d58:	00c00044 	movi	r3,1
   63d5c:	e0bffa17 	ldw	r2,-24(fp)
   63d60:	1884983a 	sll	r2,r3,r2
   63d64:	0084303a 	nor	r2,zero,r2
   63d68:	1007883a 	mov	r3,r2
   63d6c:	d0b25317 	ldw	r2,-14004(gp)
   63d70:	1884703a 	and	r2,r3,r2
   63d74:	d0b25315 	stw	r2,-14004(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   63d78:	d0b25317 	ldw	r2,-14004(gp)
   63d7c:	100170fa 	wrctl	ienable,r2
   63d80:	e0bffc17 	ldw	r2,-16(fp)
   63d84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   63d88:	e0bffd17 	ldw	r2,-12(fp)
   63d8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   63d90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   63d94:	0001883a 	nop
}
   63d98:	e037883a 	mov	sp,fp
   63d9c:	df000017 	ldw	fp,0(sp)
   63da0:	dec00104 	addi	sp,sp,4
   63da4:	f800283a 	ret

00063da8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   63da8:	defffc04 	addi	sp,sp,-16
   63dac:	df000315 	stw	fp,12(sp)
   63db0:	df000304 	addi	fp,sp,12
   63db4:	e13ffe15 	stw	r4,-8(fp)
   63db8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   63dbc:	000530fa 	rdctl	r2,ienable
   63dc0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   63dc4:	00c00044 	movi	r3,1
   63dc8:	e0bfff17 	ldw	r2,-4(fp)
   63dcc:	1884983a 	sll	r2,r3,r2
   63dd0:	1007883a 	mov	r3,r2
   63dd4:	e0bffd17 	ldw	r2,-12(fp)
   63dd8:	1884703a 	and	r2,r3,r2
   63ddc:	1004c03a 	cmpne	r2,r2,zero
   63de0:	10803fcc 	andi	r2,r2,255
}
   63de4:	e037883a 	mov	sp,fp
   63de8:	df000017 	ldw	fp,0(sp)
   63dec:	dec00104 	addi	sp,sp,4
   63df0:	f800283a 	ret

00063df4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   63df4:	defff504 	addi	sp,sp,-44
   63df8:	dfc00a15 	stw	ra,40(sp)
   63dfc:	df000915 	stw	fp,36(sp)
   63e00:	df000904 	addi	fp,sp,36
   63e04:	e13ffc15 	stw	r4,-16(fp)
   63e08:	e17ffd15 	stw	r5,-12(fp)
   63e0c:	e1bffe15 	stw	r6,-8(fp)
   63e10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   63e14:	00bffa84 	movi	r2,-22
   63e18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   63e1c:	e0bffd17 	ldw	r2,-12(fp)
   63e20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   63e24:	e0bff817 	ldw	r2,-32(fp)
   63e28:	10800808 	cmpgei	r2,r2,32
   63e2c:	1000271e 	bne	r2,zero,63ecc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63e30:	0005303a 	rdctl	r2,status
   63e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63e38:	e0fffb17 	ldw	r3,-20(fp)
   63e3c:	00bfff84 	movi	r2,-2
   63e40:	1884703a 	and	r2,r3,r2
   63e44:	1001703a 	wrctl	status,r2
  
  return context;
   63e48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   63e4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   63e50:	008001f4 	movhi	r2,7
   63e54:	10886f04 	addi	r2,r2,8636
   63e58:	e0fff817 	ldw	r3,-32(fp)
   63e5c:	180690fa 	slli	r3,r3,3
   63e60:	10c5883a 	add	r2,r2,r3
   63e64:	e0fffe17 	ldw	r3,-8(fp)
   63e68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   63e6c:	008001f4 	movhi	r2,7
   63e70:	10886f04 	addi	r2,r2,8636
   63e74:	e0fff817 	ldw	r3,-32(fp)
   63e78:	180690fa 	slli	r3,r3,3
   63e7c:	10c5883a 	add	r2,r2,r3
   63e80:	10800104 	addi	r2,r2,4
   63e84:	e0ffff17 	ldw	r3,-4(fp)
   63e88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   63e8c:	e0bffe17 	ldw	r2,-8(fp)
   63e90:	10000526 	beq	r2,zero,63ea8 <alt_iic_isr_register+0xb4>
   63e94:	e0bff817 	ldw	r2,-32(fp)
   63e98:	100b883a 	mov	r5,r2
   63e9c:	e13ffc17 	ldw	r4,-16(fp)
   63ea0:	0063c940 	call	63c94 <alt_ic_irq_enable>
   63ea4:	00000406 	br	63eb8 <alt_iic_isr_register+0xc4>
   63ea8:	e0bff817 	ldw	r2,-32(fp)
   63eac:	100b883a 	mov	r5,r2
   63eb0:	e13ffc17 	ldw	r4,-16(fp)
   63eb4:	0063d1c0 	call	63d1c <alt_ic_irq_disable>
   63eb8:	e0bff715 	stw	r2,-36(fp)
   63ebc:	e0bffa17 	ldw	r2,-24(fp)
   63ec0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   63ec4:	e0bff917 	ldw	r2,-28(fp)
   63ec8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   63ecc:	e0bff717 	ldw	r2,-36(fp)
}
   63ed0:	e037883a 	mov	sp,fp
   63ed4:	dfc00117 	ldw	ra,4(sp)
   63ed8:	df000017 	ldw	fp,0(sp)
   63edc:	dec00204 	addi	sp,sp,8
   63ee0:	f800283a 	ret

00063ee4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   63ee4:	defff804 	addi	sp,sp,-32
   63ee8:	dfc00715 	stw	ra,28(sp)
   63eec:	df000615 	stw	fp,24(sp)
   63ef0:	dc000515 	stw	r16,20(sp)
   63ef4:	df000604 	addi	fp,sp,24
   63ef8:	e13ffb15 	stw	r4,-20(fp)
   63efc:	e17ffc15 	stw	r5,-16(fp)
   63f00:	e1bffd15 	stw	r6,-12(fp)
   63f04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   63f08:	e1bffe17 	ldw	r6,-8(fp)
   63f0c:	e17ffd17 	ldw	r5,-12(fp)
   63f10:	e13ffc17 	ldw	r4,-16(fp)
   63f14:	006416c0 	call	6416c <open>
   63f18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   63f1c:	e0bffa17 	ldw	r2,-24(fp)
   63f20:	10002216 	blt	r2,zero,63fac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   63f24:	040001f4 	movhi	r16,7
   63f28:	84313c04 	addi	r16,r16,-15120
   63f2c:	e0bffa17 	ldw	r2,-24(fp)
   63f30:	01400304 	movi	r5,12
   63f34:	1009883a 	mov	r4,r2
   63f38:	004dab40 	call	4dab4 <__mulsi3>
   63f3c:	8085883a 	add	r2,r16,r2
   63f40:	10c00017 	ldw	r3,0(r2)
   63f44:	e0bffb17 	ldw	r2,-20(fp)
   63f48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   63f4c:	040001f4 	movhi	r16,7
   63f50:	84313c04 	addi	r16,r16,-15120
   63f54:	e0bffa17 	ldw	r2,-24(fp)
   63f58:	01400304 	movi	r5,12
   63f5c:	1009883a 	mov	r4,r2
   63f60:	004dab40 	call	4dab4 <__mulsi3>
   63f64:	8085883a 	add	r2,r16,r2
   63f68:	10800104 	addi	r2,r2,4
   63f6c:	10c00017 	ldw	r3,0(r2)
   63f70:	e0bffb17 	ldw	r2,-20(fp)
   63f74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   63f78:	040001f4 	movhi	r16,7
   63f7c:	84313c04 	addi	r16,r16,-15120
   63f80:	e0bffa17 	ldw	r2,-24(fp)
   63f84:	01400304 	movi	r5,12
   63f88:	1009883a 	mov	r4,r2
   63f8c:	004dab40 	call	4dab4 <__mulsi3>
   63f90:	8085883a 	add	r2,r16,r2
   63f94:	10800204 	addi	r2,r2,8
   63f98:	10c00017 	ldw	r3,0(r2)
   63f9c:	e0bffb17 	ldw	r2,-20(fp)
   63fa0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   63fa4:	e13ffa17 	ldw	r4,-24(fp)
   63fa8:	00609b00 	call	609b0 <alt_release_fd>
  }
} 
   63fac:	0001883a 	nop
   63fb0:	e6ffff04 	addi	sp,fp,-4
   63fb4:	dfc00217 	ldw	ra,8(sp)
   63fb8:	df000117 	ldw	fp,4(sp)
   63fbc:	dc000017 	ldw	r16,0(sp)
   63fc0:	dec00304 	addi	sp,sp,12
   63fc4:	f800283a 	ret

00063fc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   63fc8:	defffb04 	addi	sp,sp,-20
   63fcc:	dfc00415 	stw	ra,16(sp)
   63fd0:	df000315 	stw	fp,12(sp)
   63fd4:	df000304 	addi	fp,sp,12
   63fd8:	e13ffd15 	stw	r4,-12(fp)
   63fdc:	e17ffe15 	stw	r5,-8(fp)
   63fe0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   63fe4:	01c07fc4 	movi	r7,511
   63fe8:	01800044 	movi	r6,1
   63fec:	e17ffd17 	ldw	r5,-12(fp)
   63ff0:	010001f4 	movhi	r4,7
   63ff4:	21313f04 	addi	r4,r4,-15108
   63ff8:	0063ee40 	call	63ee4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   63ffc:	01c07fc4 	movi	r7,511
   64000:	000d883a 	mov	r6,zero
   64004:	e17ffe17 	ldw	r5,-8(fp)
   64008:	010001f4 	movhi	r4,7
   6400c:	21313c04 	addi	r4,r4,-15120
   64010:	0063ee40 	call	63ee4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   64014:	01c07fc4 	movi	r7,511
   64018:	01800044 	movi	r6,1
   6401c:	e17fff17 	ldw	r5,-4(fp)
   64020:	010001f4 	movhi	r4,7
   64024:	21314204 	addi	r4,r4,-15096
   64028:	0063ee40 	call	63ee4 <alt_open_fd>
}  
   6402c:	0001883a 	nop
   64030:	e037883a 	mov	sp,fp
   64034:	dfc00117 	ldw	ra,4(sp)
   64038:	df000017 	ldw	fp,0(sp)
   6403c:	dec00204 	addi	sp,sp,8
   64040:	f800283a 	ret

00064044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   64044:	defffe04 	addi	sp,sp,-8
   64048:	dfc00115 	stw	ra,4(sp)
   6404c:	df000015 	stw	fp,0(sp)
   64050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   64054:	d0a5bb17 	ldw	r2,-26900(gp)
   64058:	10000326 	beq	r2,zero,64068 <alt_get_errno+0x24>
   6405c:	d0a5bb17 	ldw	r2,-26900(gp)
   64060:	103ee83a 	callr	r2
   64064:	00000106 	br	6406c <alt_get_errno+0x28>
   64068:	d0b24c04 	addi	r2,gp,-14032
}
   6406c:	e037883a 	mov	sp,fp
   64070:	dfc00117 	ldw	ra,4(sp)
   64074:	df000017 	ldw	fp,0(sp)
   64078:	dec00204 	addi	sp,sp,8
   6407c:	f800283a 	ret

00064080 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   64080:	defffb04 	addi	sp,sp,-20
   64084:	dfc00415 	stw	ra,16(sp)
   64088:	df000315 	stw	fp,12(sp)
   6408c:	dc000215 	stw	r16,8(sp)
   64090:	df000304 	addi	fp,sp,12
   64094:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   64098:	e0bffe17 	ldw	r2,-8(fp)
   6409c:	10800217 	ldw	r2,8(r2)
   640a0:	10d00034 	orhi	r3,r2,16384
   640a4:	e0bffe17 	ldw	r2,-8(fp)
   640a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   640ac:	e03ffd15 	stw	zero,-12(fp)
   640b0:	00002306 	br	64140 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   640b4:	040001f4 	movhi	r16,7
   640b8:	84313c04 	addi	r16,r16,-15120
   640bc:	e0bffd17 	ldw	r2,-12(fp)
   640c0:	01400304 	movi	r5,12
   640c4:	1009883a 	mov	r4,r2
   640c8:	004dab40 	call	4dab4 <__mulsi3>
   640cc:	8085883a 	add	r2,r16,r2
   640d0:	10c00017 	ldw	r3,0(r2)
   640d4:	e0bffe17 	ldw	r2,-8(fp)
   640d8:	10800017 	ldw	r2,0(r2)
   640dc:	1880151e 	bne	r3,r2,64134 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   640e0:	040001f4 	movhi	r16,7
   640e4:	84313c04 	addi	r16,r16,-15120
   640e8:	e0bffd17 	ldw	r2,-12(fp)
   640ec:	01400304 	movi	r5,12
   640f0:	1009883a 	mov	r4,r2
   640f4:	004dab40 	call	4dab4 <__mulsi3>
   640f8:	8085883a 	add	r2,r16,r2
   640fc:	10800204 	addi	r2,r2,8
   64100:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   64104:	10000b0e 	bge	r2,zero,64134 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   64108:	01400304 	movi	r5,12
   6410c:	e13ffd17 	ldw	r4,-12(fp)
   64110:	004dab40 	call	4dab4 <__mulsi3>
   64114:	1007883a 	mov	r3,r2
   64118:	008001f4 	movhi	r2,7
   6411c:	10b13c04 	addi	r2,r2,-15120
   64120:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   64124:	e0bffe17 	ldw	r2,-8(fp)
   64128:	18800226 	beq	r3,r2,64134 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   6412c:	00bffcc4 	movi	r2,-13
   64130:	00000806 	br	64154 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   64134:	e0bffd17 	ldw	r2,-12(fp)
   64138:	10800044 	addi	r2,r2,1
   6413c:	e0bffd15 	stw	r2,-12(fp)
   64140:	d0a5ba17 	ldw	r2,-26904(gp)
   64144:	1007883a 	mov	r3,r2
   64148:	e0bffd17 	ldw	r2,-12(fp)
   6414c:	18bfd92e 	bgeu	r3,r2,640b4 <__alt_data_end+0xfffe40b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   64150:	0005883a 	mov	r2,zero
}
   64154:	e6ffff04 	addi	sp,fp,-4
   64158:	dfc00217 	ldw	ra,8(sp)
   6415c:	df000117 	ldw	fp,4(sp)
   64160:	dc000017 	ldw	r16,0(sp)
   64164:	dec00304 	addi	sp,sp,12
   64168:	f800283a 	ret

0006416c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   6416c:	defff604 	addi	sp,sp,-40
   64170:	dfc00915 	stw	ra,36(sp)
   64174:	df000815 	stw	fp,32(sp)
   64178:	df000804 	addi	fp,sp,32
   6417c:	e13ffd15 	stw	r4,-12(fp)
   64180:	e17ffe15 	stw	r5,-8(fp)
   64184:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   64188:	00bfffc4 	movi	r2,-1
   6418c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   64190:	00bffb44 	movi	r2,-19
   64194:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   64198:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   6419c:	d165b804 	addi	r5,gp,-26912
   641a0:	e13ffd17 	ldw	r4,-12(fp)
   641a4:	0063b940 	call	63b94 <alt_find_dev>
   641a8:	e0bff815 	stw	r2,-32(fp)
   641ac:	e0bff817 	ldw	r2,-32(fp)
   641b0:	1000051e 	bne	r2,zero,641c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   641b4:	e13ffd17 	ldw	r4,-12(fp)
   641b8:	00646f80 	call	646f8 <alt_find_file>
   641bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   641c0:	00800044 	movi	r2,1
   641c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   641c8:	e0bff817 	ldw	r2,-32(fp)
   641cc:	10002b26 	beq	r2,zero,6427c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   641d0:	e13ff817 	ldw	r4,-32(fp)
   641d4:	00648000 	call	64800 <alt_get_fd>
   641d8:	e0bff915 	stw	r2,-28(fp)
   641dc:	e0bff917 	ldw	r2,-28(fp)
   641e0:	1000030e 	bge	r2,zero,641f0 <open+0x84>
    {
      status = index;
   641e4:	e0bff917 	ldw	r2,-28(fp)
   641e8:	e0bffa15 	stw	r2,-24(fp)
   641ec:	00002506 	br	64284 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   641f0:	01400304 	movi	r5,12
   641f4:	e13ff917 	ldw	r4,-28(fp)
   641f8:	004dab40 	call	4dab4 <__mulsi3>
   641fc:	1007883a 	mov	r3,r2
   64200:	008001f4 	movhi	r2,7
   64204:	10b13c04 	addi	r2,r2,-15120
   64208:	1885883a 	add	r2,r3,r2
   6420c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   64210:	e0fffe17 	ldw	r3,-8(fp)
   64214:	00900034 	movhi	r2,16384
   64218:	10bfffc4 	addi	r2,r2,-1
   6421c:	1886703a 	and	r3,r3,r2
   64220:	e0bffc17 	ldw	r2,-16(fp)
   64224:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   64228:	e0bffb17 	ldw	r2,-20(fp)
   6422c:	1000051e 	bne	r2,zero,64244 <open+0xd8>
   64230:	e13ffc17 	ldw	r4,-16(fp)
   64234:	00640800 	call	64080 <alt_file_locked>
   64238:	e0bffa15 	stw	r2,-24(fp)
   6423c:	e0bffa17 	ldw	r2,-24(fp)
   64240:	10001016 	blt	r2,zero,64284 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   64244:	e0bff817 	ldw	r2,-32(fp)
   64248:	10800317 	ldw	r2,12(r2)
   6424c:	10000826 	beq	r2,zero,64270 <open+0x104>
   64250:	e0bff817 	ldw	r2,-32(fp)
   64254:	10800317 	ldw	r2,12(r2)
   64258:	e1ffff17 	ldw	r7,-4(fp)
   6425c:	e1bffe17 	ldw	r6,-8(fp)
   64260:	e17ffd17 	ldw	r5,-12(fp)
   64264:	e13ffc17 	ldw	r4,-16(fp)
   64268:	103ee83a 	callr	r2
   6426c:	00000106 	br	64274 <open+0x108>
   64270:	0005883a 	mov	r2,zero
   64274:	e0bffa15 	stw	r2,-24(fp)
   64278:	00000206 	br	64284 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   6427c:	00bffb44 	movi	r2,-19
   64280:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   64284:	e0bffa17 	ldw	r2,-24(fp)
   64288:	1000090e 	bge	r2,zero,642b0 <open+0x144>
  {
    alt_release_fd (index);  
   6428c:	e13ff917 	ldw	r4,-28(fp)
   64290:	00609b00 	call	609b0 <alt_release_fd>
    ALT_ERRNO = -status;
   64294:	00640440 	call	64044 <alt_get_errno>
   64298:	1007883a 	mov	r3,r2
   6429c:	e0bffa17 	ldw	r2,-24(fp)
   642a0:	0085c83a 	sub	r2,zero,r2
   642a4:	18800015 	stw	r2,0(r3)
    return -1;
   642a8:	00bfffc4 	movi	r2,-1
   642ac:	00000106 	br	642b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   642b0:	e0bff917 	ldw	r2,-28(fp)
}
   642b4:	e037883a 	mov	sp,fp
   642b8:	dfc00117 	ldw	ra,4(sp)
   642bc:	df000017 	ldw	fp,0(sp)
   642c0:	dec00204 	addi	sp,sp,8
   642c4:	f800283a 	ret

000642c8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   642c8:	defff204 	addi	sp,sp,-56
   642cc:	dfc00a15 	stw	ra,40(sp)
   642d0:	df000915 	stw	fp,36(sp)
   642d4:	df000904 	addi	fp,sp,36
   642d8:	e13fff15 	stw	r4,-4(fp)
   642dc:	e1400215 	stw	r5,8(fp)
   642e0:	e1800315 	stw	r6,12(fp)
   642e4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   642e8:	e0800204 	addi	r2,fp,8
   642ec:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   642f0:	e0bfff17 	ldw	r2,-4(fp)
   642f4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   642f8:	00006f06 	br	644b8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   642fc:	e0bff807 	ldb	r2,-32(fp)
   64300:	10800960 	cmpeqi	r2,r2,37
   64304:	1000041e 	bne	r2,zero,64318 <alt_printf+0x50>
        {
            alt_putchar(c);
   64308:	e0bff807 	ldb	r2,-32(fp)
   6430c:	1009883a 	mov	r4,r2
   64310:	00644f40 	call	644f4 <alt_putchar>
   64314:	00006806 	br	644b8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   64318:	e0bff717 	ldw	r2,-36(fp)
   6431c:	10c00044 	addi	r3,r2,1
   64320:	e0fff715 	stw	r3,-36(fp)
   64324:	10800003 	ldbu	r2,0(r2)
   64328:	e0bff805 	stb	r2,-32(fp)
   6432c:	e0bff807 	ldb	r2,-32(fp)
   64330:	10006926 	beq	r2,zero,644d8 <alt_printf+0x210>
            {
                if (c == '%')
   64334:	e0bff807 	ldb	r2,-32(fp)
   64338:	10800958 	cmpnei	r2,r2,37
   6433c:	1000041e 	bne	r2,zero,64350 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   64340:	e0bff807 	ldb	r2,-32(fp)
   64344:	1009883a 	mov	r4,r2
   64348:	00644f40 	call	644f4 <alt_putchar>
   6434c:	00005a06 	br	644b8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   64350:	e0bff807 	ldb	r2,-32(fp)
   64354:	108018d8 	cmpnei	r2,r2,99
   64358:	1000081e 	bne	r2,zero,6437c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   6435c:	e0bffe17 	ldw	r2,-8(fp)
   64360:	10c00104 	addi	r3,r2,4
   64364:	e0fffe15 	stw	r3,-8(fp)
   64368:	10800017 	ldw	r2,0(r2)
   6436c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   64370:	e13ffd17 	ldw	r4,-12(fp)
   64374:	00644f40 	call	644f4 <alt_putchar>
   64378:	00004f06 	br	644b8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   6437c:	e0bff807 	ldb	r2,-32(fp)
   64380:	10801e18 	cmpnei	r2,r2,120
   64384:	1000341e 	bne	r2,zero,64458 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   64388:	e0bffe17 	ldw	r2,-8(fp)
   6438c:	10c00104 	addi	r3,r2,4
   64390:	e0fffe15 	stw	r3,-8(fp)
   64394:	10800017 	ldw	r2,0(r2)
   64398:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   6439c:	e0bffb17 	ldw	r2,-20(fp)
   643a0:	1000031e 	bne	r2,zero,643b0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   643a4:	01000c04 	movi	r4,48
   643a8:	00644f40 	call	644f4 <alt_putchar>
                        continue;
   643ac:	00004206 	br	644b8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   643b0:	00800704 	movi	r2,28
   643b4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   643b8:	00000306 	br	643c8 <alt_printf+0x100>
                        digit_shift -= 4;
   643bc:	e0bff917 	ldw	r2,-28(fp)
   643c0:	10bfff04 	addi	r2,r2,-4
   643c4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   643c8:	00c003c4 	movi	r3,15
   643cc:	e0bff917 	ldw	r2,-28(fp)
   643d0:	1884983a 	sll	r2,r3,r2
   643d4:	1007883a 	mov	r3,r2
   643d8:	e0bffb17 	ldw	r2,-20(fp)
   643dc:	1884703a 	and	r2,r3,r2
   643e0:	103ff626 	beq	r2,zero,643bc <__alt_data_end+0xfffe43bc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   643e4:	00001906 	br	6444c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   643e8:	00c003c4 	movi	r3,15
   643ec:	e0bff917 	ldw	r2,-28(fp)
   643f0:	1884983a 	sll	r2,r3,r2
   643f4:	1007883a 	mov	r3,r2
   643f8:	e0bffb17 	ldw	r2,-20(fp)
   643fc:	1886703a 	and	r3,r3,r2
   64400:	e0bff917 	ldw	r2,-28(fp)
   64404:	1884d83a 	srl	r2,r3,r2
   64408:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   6440c:	e0bffc17 	ldw	r2,-16(fp)
   64410:	108002a8 	cmpgeui	r2,r2,10
   64414:	1000041e 	bne	r2,zero,64428 <alt_printf+0x160>
                            c = '0' + digit;
   64418:	e0bffc17 	ldw	r2,-16(fp)
   6441c:	10800c04 	addi	r2,r2,48
   64420:	e0bff805 	stb	r2,-32(fp)
   64424:	00000306 	br	64434 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   64428:	e0bffc17 	ldw	r2,-16(fp)
   6442c:	108015c4 	addi	r2,r2,87
   64430:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   64434:	e0bff807 	ldb	r2,-32(fp)
   64438:	1009883a 	mov	r4,r2
   6443c:	00644f40 	call	644f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   64440:	e0bff917 	ldw	r2,-28(fp)
   64444:	10bfff04 	addi	r2,r2,-4
   64448:	e0bff915 	stw	r2,-28(fp)
   6444c:	e0bff917 	ldw	r2,-28(fp)
   64450:	103fe50e 	bge	r2,zero,643e8 <__alt_data_end+0xfffe43e8>
   64454:	00001806 	br	644b8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   64458:	e0bff807 	ldb	r2,-32(fp)
   6445c:	10801cd8 	cmpnei	r2,r2,115
   64460:	1000151e 	bne	r2,zero,644b8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   64464:	e0bffe17 	ldw	r2,-8(fp)
   64468:	10c00104 	addi	r3,r2,4
   6446c:	e0fffe15 	stw	r3,-8(fp)
   64470:	10800017 	ldw	r2,0(r2)
   64474:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   64478:	00000906 	br	644a0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   6447c:	e0bffa17 	ldw	r2,-24(fp)
   64480:	10c00044 	addi	r3,r2,1
   64484:	e0fffa15 	stw	r3,-24(fp)
   64488:	10800003 	ldbu	r2,0(r2)
   6448c:	10803fcc 	andi	r2,r2,255
   64490:	1080201c 	xori	r2,r2,128
   64494:	10bfe004 	addi	r2,r2,-128
   64498:	1009883a 	mov	r4,r2
   6449c:	00644f40 	call	644f4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   644a0:	e0bffa17 	ldw	r2,-24(fp)
   644a4:	10800003 	ldbu	r2,0(r2)
   644a8:	10803fcc 	andi	r2,r2,255
   644ac:	1080201c 	xori	r2,r2,128
   644b0:	10bfe004 	addi	r2,r2,-128
   644b4:	103ff11e 	bne	r2,zero,6447c <__alt_data_end+0xfffe447c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   644b8:	e0bff717 	ldw	r2,-36(fp)
   644bc:	10c00044 	addi	r3,r2,1
   644c0:	e0fff715 	stw	r3,-36(fp)
   644c4:	10800003 	ldbu	r2,0(r2)
   644c8:	e0bff805 	stb	r2,-32(fp)
   644cc:	e0bff807 	ldb	r2,-32(fp)
   644d0:	103f8a1e 	bne	r2,zero,642fc <__alt_data_end+0xfffe42fc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   644d4:	00000106 	br	644dc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   644d8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   644dc:	0001883a 	nop
   644e0:	e037883a 	mov	sp,fp
   644e4:	dfc00117 	ldw	ra,4(sp)
   644e8:	df000017 	ldw	fp,0(sp)
   644ec:	dec00504 	addi	sp,sp,20
   644f0:	f800283a 	ret

000644f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   644f4:	defffd04 	addi	sp,sp,-12
   644f8:	dfc00215 	stw	ra,8(sp)
   644fc:	df000115 	stw	fp,4(sp)
   64500:	df000104 	addi	fp,sp,4
   64504:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   64508:	d0a5b117 	ldw	r2,-26940(gp)
   6450c:	10800217 	ldw	r2,8(r2)
   64510:	100b883a 	mov	r5,r2
   64514:	e13fff17 	ldw	r4,-4(fp)
   64518:	0058f3c0 	call	58f3c <putc>
#endif
#endif
}
   6451c:	e037883a 	mov	sp,fp
   64520:	dfc00117 	ldw	ra,4(sp)
   64524:	df000017 	ldw	fp,0(sp)
   64528:	dec00204 	addi	sp,sp,8
   6452c:	f800283a 	ret

00064530 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   64530:	defffa04 	addi	sp,sp,-24
   64534:	df000515 	stw	fp,20(sp)
   64538:	df000504 	addi	fp,sp,20
   6453c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   64540:	0005303a 	rdctl	r2,status
   64544:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   64548:	e0fffc17 	ldw	r3,-16(fp)
   6454c:	00bfff84 	movi	r2,-2
   64550:	1884703a 	and	r2,r3,r2
   64554:	1001703a 	wrctl	status,r2
  
  return context;
   64558:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   6455c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   64560:	e0bfff17 	ldw	r2,-4(fp)
   64564:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   64568:	e0bffd17 	ldw	r2,-12(fp)
   6456c:	10800017 	ldw	r2,0(r2)
   64570:	e0fffd17 	ldw	r3,-12(fp)
   64574:	18c00117 	ldw	r3,4(r3)
   64578:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   6457c:	e0bffd17 	ldw	r2,-12(fp)
   64580:	10800117 	ldw	r2,4(r2)
   64584:	e0fffd17 	ldw	r3,-12(fp)
   64588:	18c00017 	ldw	r3,0(r3)
   6458c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   64590:	e0bffd17 	ldw	r2,-12(fp)
   64594:	e0fffd17 	ldw	r3,-12(fp)
   64598:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   6459c:	e0bffd17 	ldw	r2,-12(fp)
   645a0:	e0fffd17 	ldw	r3,-12(fp)
   645a4:	10c00015 	stw	r3,0(r2)
   645a8:	e0bffb17 	ldw	r2,-20(fp)
   645ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   645b0:	e0bffe17 	ldw	r2,-8(fp)
   645b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   645b8:	0001883a 	nop
   645bc:	e037883a 	mov	sp,fp
   645c0:	df000017 	ldw	fp,0(sp)
   645c4:	dec00104 	addi	sp,sp,4
   645c8:	f800283a 	ret

000645cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   645cc:	defffb04 	addi	sp,sp,-20
   645d0:	dfc00415 	stw	ra,16(sp)
   645d4:	df000315 	stw	fp,12(sp)
   645d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   645dc:	d0a5c017 	ldw	r2,-26880(gp)
   645e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   645e4:	d0b25517 	ldw	r2,-13996(gp)
   645e8:	10800044 	addi	r2,r2,1
   645ec:	d0b25515 	stw	r2,-13996(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   645f0:	00002e06 	br	646ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   645f4:	e0bffd17 	ldw	r2,-12(fp)
   645f8:	10800017 	ldw	r2,0(r2)
   645fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   64600:	e0bffd17 	ldw	r2,-12(fp)
   64604:	10800403 	ldbu	r2,16(r2)
   64608:	10803fcc 	andi	r2,r2,255
   6460c:	10000426 	beq	r2,zero,64620 <alt_tick+0x54>
   64610:	d0b25517 	ldw	r2,-13996(gp)
   64614:	1000021e 	bne	r2,zero,64620 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   64618:	e0bffd17 	ldw	r2,-12(fp)
   6461c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   64620:	e0bffd17 	ldw	r2,-12(fp)
   64624:	10800217 	ldw	r2,8(r2)
   64628:	d0f25517 	ldw	r3,-13996(gp)
   6462c:	18801d36 	bltu	r3,r2,646a4 <alt_tick+0xd8>
   64630:	e0bffd17 	ldw	r2,-12(fp)
   64634:	10800403 	ldbu	r2,16(r2)
   64638:	10803fcc 	andi	r2,r2,255
   6463c:	1000191e 	bne	r2,zero,646a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   64640:	e0bffd17 	ldw	r2,-12(fp)
   64644:	10800317 	ldw	r2,12(r2)
   64648:	e0fffd17 	ldw	r3,-12(fp)
   6464c:	18c00517 	ldw	r3,20(r3)
   64650:	1809883a 	mov	r4,r3
   64654:	103ee83a 	callr	r2
   64658:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   6465c:	e0bfff17 	ldw	r2,-4(fp)
   64660:	1000031e 	bne	r2,zero,64670 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   64664:	e13ffd17 	ldw	r4,-12(fp)
   64668:	00645300 	call	64530 <alt_alarm_stop>
   6466c:	00000d06 	br	646a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   64670:	e0bffd17 	ldw	r2,-12(fp)
   64674:	10c00217 	ldw	r3,8(r2)
   64678:	e0bfff17 	ldw	r2,-4(fp)
   6467c:	1887883a 	add	r3,r3,r2
   64680:	e0bffd17 	ldw	r2,-12(fp)
   64684:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   64688:	e0bffd17 	ldw	r2,-12(fp)
   6468c:	10c00217 	ldw	r3,8(r2)
   64690:	d0b25517 	ldw	r2,-13996(gp)
   64694:	1880032e 	bgeu	r3,r2,646a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   64698:	e0bffd17 	ldw	r2,-12(fp)
   6469c:	00c00044 	movi	r3,1
   646a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   646a4:	e0bffe17 	ldw	r2,-8(fp)
   646a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   646ac:	e0fffd17 	ldw	r3,-12(fp)
   646b0:	d0a5c004 	addi	r2,gp,-26880
   646b4:	18bfcf1e 	bne	r3,r2,645f4 <__alt_data_end+0xfffe45f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   646b8:	0001883a 	nop
}
   646bc:	0001883a 	nop
   646c0:	e037883a 	mov	sp,fp
   646c4:	dfc00117 	ldw	ra,4(sp)
   646c8:	df000017 	ldw	fp,0(sp)
   646cc:	dec00204 	addi	sp,sp,8
   646d0:	f800283a 	ret

000646d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   646d4:	deffff04 	addi	sp,sp,-4
   646d8:	df000015 	stw	fp,0(sp)
   646dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   646e0:	000170fa 	wrctl	ienable,zero
}
   646e4:	0001883a 	nop
   646e8:	e037883a 	mov	sp,fp
   646ec:	df000017 	ldw	fp,0(sp)
   646f0:	dec00104 	addi	sp,sp,4
   646f4:	f800283a 	ret

000646f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   646f8:	defffb04 	addi	sp,sp,-20
   646fc:	dfc00415 	stw	ra,16(sp)
   64700:	df000315 	stw	fp,12(sp)
   64704:	df000304 	addi	fp,sp,12
   64708:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   6470c:	d0a5b617 	ldw	r2,-26920(gp)
   64710:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   64714:	00003106 	br	647dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   64718:	e0bffd17 	ldw	r2,-12(fp)
   6471c:	10800217 	ldw	r2,8(r2)
   64720:	1009883a 	mov	r4,r2
   64724:	005071c0 	call	5071c <strlen>
   64728:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   6472c:	e0bffd17 	ldw	r2,-12(fp)
   64730:	10c00217 	ldw	r3,8(r2)
   64734:	e0bffe17 	ldw	r2,-8(fp)
   64738:	10bfffc4 	addi	r2,r2,-1
   6473c:	1885883a 	add	r2,r3,r2
   64740:	10800003 	ldbu	r2,0(r2)
   64744:	10803fcc 	andi	r2,r2,255
   64748:	1080201c 	xori	r2,r2,128
   6474c:	10bfe004 	addi	r2,r2,-128
   64750:	10800bd8 	cmpnei	r2,r2,47
   64754:	1000031e 	bne	r2,zero,64764 <alt_find_file+0x6c>
    {
      len -= 1;
   64758:	e0bffe17 	ldw	r2,-8(fp)
   6475c:	10bfffc4 	addi	r2,r2,-1
   64760:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   64764:	e0bffe17 	ldw	r2,-8(fp)
   64768:	e0ffff17 	ldw	r3,-4(fp)
   6476c:	1885883a 	add	r2,r3,r2
   64770:	10800003 	ldbu	r2,0(r2)
   64774:	10803fcc 	andi	r2,r2,255
   64778:	1080201c 	xori	r2,r2,128
   6477c:	10bfe004 	addi	r2,r2,-128
   64780:	10800be0 	cmpeqi	r2,r2,47
   64784:	1000081e 	bne	r2,zero,647a8 <alt_find_file+0xb0>
   64788:	e0bffe17 	ldw	r2,-8(fp)
   6478c:	e0ffff17 	ldw	r3,-4(fp)
   64790:	1885883a 	add	r2,r3,r2
   64794:	10800003 	ldbu	r2,0(r2)
   64798:	10803fcc 	andi	r2,r2,255
   6479c:	1080201c 	xori	r2,r2,128
   647a0:	10bfe004 	addi	r2,r2,-128
   647a4:	10000a1e 	bne	r2,zero,647d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   647a8:	e0bffd17 	ldw	r2,-12(fp)
   647ac:	10800217 	ldw	r2,8(r2)
   647b0:	e0fffe17 	ldw	r3,-8(fp)
   647b4:	180d883a 	mov	r6,r3
   647b8:	e17fff17 	ldw	r5,-4(fp)
   647bc:	1009883a 	mov	r4,r2
   647c0:	00649ac0 	call	649ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   647c4:	1000021e 	bne	r2,zero,647d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   647c8:	e0bffd17 	ldw	r2,-12(fp)
   647cc:	00000706 	br	647ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   647d0:	e0bffd17 	ldw	r2,-12(fp)
   647d4:	10800017 	ldw	r2,0(r2)
   647d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   647dc:	e0fffd17 	ldw	r3,-12(fp)
   647e0:	d0a5b604 	addi	r2,gp,-26920
   647e4:	18bfcc1e 	bne	r3,r2,64718 <__alt_data_end+0xfffe4718>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   647e8:	0005883a 	mov	r2,zero
}
   647ec:	e037883a 	mov	sp,fp
   647f0:	dfc00117 	ldw	ra,4(sp)
   647f4:	df000017 	ldw	fp,0(sp)
   647f8:	dec00204 	addi	sp,sp,8
   647fc:	f800283a 	ret

00064800 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   64800:	defffa04 	addi	sp,sp,-24
   64804:	dfc00515 	stw	ra,20(sp)
   64808:	df000415 	stw	fp,16(sp)
   6480c:	dc000315 	stw	r16,12(sp)
   64810:	df000404 	addi	fp,sp,16
   64814:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   64818:	00bffa04 	movi	r2,-24
   6481c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   64820:	e03ffc15 	stw	zero,-16(fp)
   64824:	00001d06 	br	6489c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   64828:	040001f4 	movhi	r16,7
   6482c:	84313c04 	addi	r16,r16,-15120
   64830:	e0bffc17 	ldw	r2,-16(fp)
   64834:	01400304 	movi	r5,12
   64838:	1009883a 	mov	r4,r2
   6483c:	004dab40 	call	4dab4 <__mulsi3>
   64840:	8085883a 	add	r2,r16,r2
   64844:	10800017 	ldw	r2,0(r2)
   64848:	1000111e 	bne	r2,zero,64890 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   6484c:	040001f4 	movhi	r16,7
   64850:	84313c04 	addi	r16,r16,-15120
   64854:	e0bffc17 	ldw	r2,-16(fp)
   64858:	01400304 	movi	r5,12
   6485c:	1009883a 	mov	r4,r2
   64860:	004dab40 	call	4dab4 <__mulsi3>
   64864:	8085883a 	add	r2,r16,r2
   64868:	e0fffe17 	ldw	r3,-8(fp)
   6486c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   64870:	d0e5ba17 	ldw	r3,-26904(gp)
   64874:	e0bffc17 	ldw	r2,-16(fp)
   64878:	1880020e 	bge	r3,r2,64884 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   6487c:	e0bffc17 	ldw	r2,-16(fp)
   64880:	d0a5ba15 	stw	r2,-26904(gp)
      }
      rc = i;
   64884:	e0bffc17 	ldw	r2,-16(fp)
   64888:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   6488c:	00000606 	br	648a8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   64890:	e0bffc17 	ldw	r2,-16(fp)
   64894:	10800044 	addi	r2,r2,1
   64898:	e0bffc15 	stw	r2,-16(fp)
   6489c:	e0bffc17 	ldw	r2,-16(fp)
   648a0:	10800810 	cmplti	r2,r2,32
   648a4:	103fe01e 	bne	r2,zero,64828 <__alt_data_end+0xfffe4828>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   648a8:	e0bffd17 	ldw	r2,-12(fp)
}
   648ac:	e6ffff04 	addi	sp,fp,-4
   648b0:	dfc00217 	ldw	ra,8(sp)
   648b4:	df000117 	ldw	fp,4(sp)
   648b8:	dc000017 	ldw	r16,0(sp)
   648bc:	dec00304 	addi	sp,sp,12
   648c0:	f800283a 	ret

000648c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   648c4:	defffe04 	addi	sp,sp,-8
   648c8:	df000115 	stw	fp,4(sp)
   648cc:	df000104 	addi	fp,sp,4
   648d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   648d4:	e0bfff17 	ldw	r2,-4(fp)
   648d8:	10bffe84 	addi	r2,r2,-6
   648dc:	10c00428 	cmpgeui	r3,r2,16
   648e0:	18001a1e 	bne	r3,zero,6494c <alt_exception_cause_generated_bad_addr+0x88>
   648e4:	100690ba 	slli	r3,r2,2
   648e8:	008001b4 	movhi	r2,6
   648ec:	10923f04 	addi	r2,r2,18684
   648f0:	1885883a 	add	r2,r3,r2
   648f4:	10800017 	ldw	r2,0(r2)
   648f8:	1000683a 	jmp	r2
   648fc:	0006493c 	xorhi	zero,zero,6436
   64900:	0006493c 	xorhi	zero,zero,6436
   64904:	0006494c 	andi	zero,zero,6437
   64908:	0006494c 	andi	zero,zero,6437
   6490c:	0006494c 	andi	zero,zero,6437
   64910:	0006493c 	xorhi	zero,zero,6436
   64914:	00064944 	movi	zero,6437
   64918:	0006494c 	andi	zero,zero,6437
   6491c:	0006493c 	xorhi	zero,zero,6436
   64920:	0006493c 	xorhi	zero,zero,6436
   64924:	0006494c 	andi	zero,zero,6437
   64928:	0006493c 	xorhi	zero,zero,6436
   6492c:	00064944 	movi	zero,6437
   64930:	0006494c 	andi	zero,zero,6437
   64934:	0006494c 	andi	zero,zero,6437
   64938:	0006493c 	xorhi	zero,zero,6436
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   6493c:	00800044 	movi	r2,1
   64940:	00000306 	br	64950 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   64944:	0005883a 	mov	r2,zero
   64948:	00000106 	br	64950 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   6494c:	0005883a 	mov	r2,zero
  }
}
   64950:	e037883a 	mov	sp,fp
   64954:	df000017 	ldw	fp,0(sp)
   64958:	dec00104 	addi	sp,sp,4
   6495c:	f800283a 	ret

00064960 <atexit>:
   64960:	200b883a 	mov	r5,r4
   64964:	000f883a 	mov	r7,zero
   64968:	000d883a 	mov	r6,zero
   6496c:	0009883a 	mov	r4,zero
   64970:	0064a281 	jmpi	64a28 <__register_exitproc>

00064974 <exit>:
   64974:	defffe04 	addi	sp,sp,-8
   64978:	000b883a 	mov	r5,zero
   6497c:	dc000015 	stw	r16,0(sp)
   64980:	dfc00115 	stw	ra,4(sp)
   64984:	2021883a 	mov	r16,r4
   64988:	0064b400 	call	64b40 <__call_exitprocs>
   6498c:	008001f4 	movhi	r2,7
   64990:	10bb7204 	addi	r2,r2,-4664
   64994:	11000017 	ldw	r4,0(r2)
   64998:	20800f17 	ldw	r2,60(r4)
   6499c:	10000126 	beq	r2,zero,649a4 <exit+0x30>
   649a0:	103ee83a 	callr	r2
   649a4:	8009883a 	mov	r4,r16
   649a8:	006020c0 	call	6020c <_exit>

000649ac <memcmp>:
   649ac:	01c000c4 	movi	r7,3
   649b0:	3980192e 	bgeu	r7,r6,64a18 <memcmp+0x6c>
   649b4:	2144b03a 	or	r2,r4,r5
   649b8:	11c4703a 	and	r2,r2,r7
   649bc:	10000f26 	beq	r2,zero,649fc <memcmp+0x50>
   649c0:	20800003 	ldbu	r2,0(r4)
   649c4:	28c00003 	ldbu	r3,0(r5)
   649c8:	10c0151e 	bne	r2,r3,64a20 <memcmp+0x74>
   649cc:	31bfff84 	addi	r6,r6,-2
   649d0:	01ffffc4 	movi	r7,-1
   649d4:	00000406 	br	649e8 <memcmp+0x3c>
   649d8:	20800003 	ldbu	r2,0(r4)
   649dc:	28c00003 	ldbu	r3,0(r5)
   649e0:	31bfffc4 	addi	r6,r6,-1
   649e4:	10c00e1e 	bne	r2,r3,64a20 <memcmp+0x74>
   649e8:	21000044 	addi	r4,r4,1
   649ec:	29400044 	addi	r5,r5,1
   649f0:	31fff91e 	bne	r6,r7,649d8 <__alt_data_end+0xfffe49d8>
   649f4:	0005883a 	mov	r2,zero
   649f8:	f800283a 	ret
   649fc:	20c00017 	ldw	r3,0(r4)
   64a00:	28800017 	ldw	r2,0(r5)
   64a04:	18bfee1e 	bne	r3,r2,649c0 <__alt_data_end+0xfffe49c0>
   64a08:	31bfff04 	addi	r6,r6,-4
   64a0c:	21000104 	addi	r4,r4,4
   64a10:	29400104 	addi	r5,r5,4
   64a14:	39bff936 	bltu	r7,r6,649fc <__alt_data_end+0xfffe49fc>
   64a18:	303fe91e 	bne	r6,zero,649c0 <__alt_data_end+0xfffe49c0>
   64a1c:	003ff506 	br	649f4 <__alt_data_end+0xfffe49f4>
   64a20:	10c5c83a 	sub	r2,r2,r3
   64a24:	f800283a 	ret

00064a28 <__register_exitproc>:
   64a28:	defffa04 	addi	sp,sp,-24
   64a2c:	dc000315 	stw	r16,12(sp)
   64a30:	040001f4 	movhi	r16,7
   64a34:	843b7204 	addi	r16,r16,-4664
   64a38:	80c00017 	ldw	r3,0(r16)
   64a3c:	dc400415 	stw	r17,16(sp)
   64a40:	dfc00515 	stw	ra,20(sp)
   64a44:	18805217 	ldw	r2,328(r3)
   64a48:	2023883a 	mov	r17,r4
   64a4c:	10003726 	beq	r2,zero,64b2c <__register_exitproc+0x104>
   64a50:	10c00117 	ldw	r3,4(r2)
   64a54:	010007c4 	movi	r4,31
   64a58:	20c00e16 	blt	r4,r3,64a94 <__register_exitproc+0x6c>
   64a5c:	1a000044 	addi	r8,r3,1
   64a60:	8800221e 	bne	r17,zero,64aec <__register_exitproc+0xc4>
   64a64:	18c00084 	addi	r3,r3,2
   64a68:	18c7883a 	add	r3,r3,r3
   64a6c:	18c7883a 	add	r3,r3,r3
   64a70:	12000115 	stw	r8,4(r2)
   64a74:	10c7883a 	add	r3,r2,r3
   64a78:	19400015 	stw	r5,0(r3)
   64a7c:	0005883a 	mov	r2,zero
   64a80:	dfc00517 	ldw	ra,20(sp)
   64a84:	dc400417 	ldw	r17,16(sp)
   64a88:	dc000317 	ldw	r16,12(sp)
   64a8c:	dec00604 	addi	sp,sp,24
   64a90:	f800283a 	ret
   64a94:	00800174 	movhi	r2,5
   64a98:	10bd8804 	addi	r2,r2,-2528
   64a9c:	10002626 	beq	r2,zero,64b38 <__register_exitproc+0x110>
   64aa0:	01006404 	movi	r4,400
   64aa4:	d9400015 	stw	r5,0(sp)
   64aa8:	d9800115 	stw	r6,4(sp)
   64aac:	d9c00215 	stw	r7,8(sp)
   64ab0:	004f6200 	call	4f620 <malloc>
   64ab4:	d9400017 	ldw	r5,0(sp)
   64ab8:	d9800117 	ldw	r6,4(sp)
   64abc:	d9c00217 	ldw	r7,8(sp)
   64ac0:	10001d26 	beq	r2,zero,64b38 <__register_exitproc+0x110>
   64ac4:	81000017 	ldw	r4,0(r16)
   64ac8:	10000115 	stw	zero,4(r2)
   64acc:	02000044 	movi	r8,1
   64ad0:	22405217 	ldw	r9,328(r4)
   64ad4:	0007883a 	mov	r3,zero
   64ad8:	12400015 	stw	r9,0(r2)
   64adc:	20805215 	stw	r2,328(r4)
   64ae0:	10006215 	stw	zero,392(r2)
   64ae4:	10006315 	stw	zero,396(r2)
   64ae8:	883fde26 	beq	r17,zero,64a64 <__alt_data_end+0xfffe4a64>
   64aec:	18c9883a 	add	r4,r3,r3
   64af0:	2109883a 	add	r4,r4,r4
   64af4:	1109883a 	add	r4,r2,r4
   64af8:	21802215 	stw	r6,136(r4)
   64afc:	01800044 	movi	r6,1
   64b00:	12406217 	ldw	r9,392(r2)
   64b04:	30cc983a 	sll	r6,r6,r3
   64b08:	4992b03a 	or	r9,r9,r6
   64b0c:	12406215 	stw	r9,392(r2)
   64b10:	21c04215 	stw	r7,264(r4)
   64b14:	01000084 	movi	r4,2
   64b18:	893fd21e 	bne	r17,r4,64a64 <__alt_data_end+0xfffe4a64>
   64b1c:	11006317 	ldw	r4,396(r2)
   64b20:	218cb03a 	or	r6,r4,r6
   64b24:	11806315 	stw	r6,396(r2)
   64b28:	003fce06 	br	64a64 <__alt_data_end+0xfffe4a64>
   64b2c:	18805304 	addi	r2,r3,332
   64b30:	18805215 	stw	r2,328(r3)
   64b34:	003fc606 	br	64a50 <__alt_data_end+0xfffe4a50>
   64b38:	00bfffc4 	movi	r2,-1
   64b3c:	003fd006 	br	64a80 <__alt_data_end+0xfffe4a80>

00064b40 <__call_exitprocs>:
   64b40:	defff504 	addi	sp,sp,-44
   64b44:	df000915 	stw	fp,36(sp)
   64b48:	dd400615 	stw	r21,24(sp)
   64b4c:	dc800315 	stw	r18,12(sp)
   64b50:	dfc00a15 	stw	ra,40(sp)
   64b54:	ddc00815 	stw	r23,32(sp)
   64b58:	dd800715 	stw	r22,28(sp)
   64b5c:	dd000515 	stw	r20,20(sp)
   64b60:	dcc00415 	stw	r19,16(sp)
   64b64:	dc400215 	stw	r17,8(sp)
   64b68:	dc000115 	stw	r16,4(sp)
   64b6c:	d9000015 	stw	r4,0(sp)
   64b70:	2839883a 	mov	fp,r5
   64b74:	04800044 	movi	r18,1
   64b78:	057fffc4 	movi	r21,-1
   64b7c:	008001f4 	movhi	r2,7
   64b80:	10bb7204 	addi	r2,r2,-4664
   64b84:	12000017 	ldw	r8,0(r2)
   64b88:	45005217 	ldw	r20,328(r8)
   64b8c:	44c05204 	addi	r19,r8,328
   64b90:	a0001c26 	beq	r20,zero,64c04 <__call_exitprocs+0xc4>
   64b94:	a0800117 	ldw	r2,4(r20)
   64b98:	15ffffc4 	addi	r23,r2,-1
   64b9c:	b8000d16 	blt	r23,zero,64bd4 <__call_exitprocs+0x94>
   64ba0:	14000044 	addi	r16,r2,1
   64ba4:	8421883a 	add	r16,r16,r16
   64ba8:	8421883a 	add	r16,r16,r16
   64bac:	84402004 	addi	r17,r16,128
   64bb0:	a463883a 	add	r17,r20,r17
   64bb4:	a421883a 	add	r16,r20,r16
   64bb8:	e0001e26 	beq	fp,zero,64c34 <__call_exitprocs+0xf4>
   64bbc:	80804017 	ldw	r2,256(r16)
   64bc0:	e0801c26 	beq	fp,r2,64c34 <__call_exitprocs+0xf4>
   64bc4:	bdffffc4 	addi	r23,r23,-1
   64bc8:	843fff04 	addi	r16,r16,-4
   64bcc:	8c7fff04 	addi	r17,r17,-4
   64bd0:	bd7ff91e 	bne	r23,r21,64bb8 <__alt_data_end+0xfffe4bb8>
   64bd4:	00800174 	movhi	r2,5
   64bd8:	10bd8d04 	addi	r2,r2,-2508
   64bdc:	10000926 	beq	r2,zero,64c04 <__call_exitprocs+0xc4>
   64be0:	a0800117 	ldw	r2,4(r20)
   64be4:	1000301e 	bne	r2,zero,64ca8 <__call_exitprocs+0x168>
   64be8:	a0800017 	ldw	r2,0(r20)
   64bec:	10003226 	beq	r2,zero,64cb8 <__call_exitprocs+0x178>
   64bf0:	a009883a 	mov	r4,r20
   64bf4:	98800015 	stw	r2,0(r19)
   64bf8:	004f6340 	call	4f634 <free>
   64bfc:	9d000017 	ldw	r20,0(r19)
   64c00:	a03fe41e 	bne	r20,zero,64b94 <__alt_data_end+0xfffe4b94>
   64c04:	dfc00a17 	ldw	ra,40(sp)
   64c08:	df000917 	ldw	fp,36(sp)
   64c0c:	ddc00817 	ldw	r23,32(sp)
   64c10:	dd800717 	ldw	r22,28(sp)
   64c14:	dd400617 	ldw	r21,24(sp)
   64c18:	dd000517 	ldw	r20,20(sp)
   64c1c:	dcc00417 	ldw	r19,16(sp)
   64c20:	dc800317 	ldw	r18,12(sp)
   64c24:	dc400217 	ldw	r17,8(sp)
   64c28:	dc000117 	ldw	r16,4(sp)
   64c2c:	dec00b04 	addi	sp,sp,44
   64c30:	f800283a 	ret
   64c34:	a0800117 	ldw	r2,4(r20)
   64c38:	80c00017 	ldw	r3,0(r16)
   64c3c:	10bfffc4 	addi	r2,r2,-1
   64c40:	15c01426 	beq	r2,r23,64c94 <__call_exitprocs+0x154>
   64c44:	80000015 	stw	zero,0(r16)
   64c48:	183fde26 	beq	r3,zero,64bc4 <__alt_data_end+0xfffe4bc4>
   64c4c:	95c8983a 	sll	r4,r18,r23
   64c50:	a0806217 	ldw	r2,392(r20)
   64c54:	a5800117 	ldw	r22,4(r20)
   64c58:	2084703a 	and	r2,r4,r2
   64c5c:	10000b26 	beq	r2,zero,64c8c <__call_exitprocs+0x14c>
   64c60:	a0806317 	ldw	r2,396(r20)
   64c64:	2088703a 	and	r4,r4,r2
   64c68:	20000c1e 	bne	r4,zero,64c9c <__call_exitprocs+0x15c>
   64c6c:	89400017 	ldw	r5,0(r17)
   64c70:	d9000017 	ldw	r4,0(sp)
   64c74:	183ee83a 	callr	r3
   64c78:	a0800117 	ldw	r2,4(r20)
   64c7c:	15bfbf1e 	bne	r2,r22,64b7c <__alt_data_end+0xfffe4b7c>
   64c80:	98800017 	ldw	r2,0(r19)
   64c84:	153fcf26 	beq	r2,r20,64bc4 <__alt_data_end+0xfffe4bc4>
   64c88:	003fbc06 	br	64b7c <__alt_data_end+0xfffe4b7c>
   64c8c:	183ee83a 	callr	r3
   64c90:	003ff906 	br	64c78 <__alt_data_end+0xfffe4c78>
   64c94:	a5c00115 	stw	r23,4(r20)
   64c98:	003feb06 	br	64c48 <__alt_data_end+0xfffe4c48>
   64c9c:	89000017 	ldw	r4,0(r17)
   64ca0:	183ee83a 	callr	r3
   64ca4:	003ff406 	br	64c78 <__alt_data_end+0xfffe4c78>
   64ca8:	a0800017 	ldw	r2,0(r20)
   64cac:	a027883a 	mov	r19,r20
   64cb0:	1029883a 	mov	r20,r2
   64cb4:	003fb606 	br	64b90 <__alt_data_end+0xfffe4b90>
   64cb8:	0005883a 	mov	r2,zero
   64cbc:	003ffb06 	br	64cac <__alt_data_end+0xfffe4cac>
   64cc0:	01110bff 	0x1110bff
   64cc4:	01010004 	movi	r4,1024
   64cc8:	7f000105 	stb	fp,4(r15)
   64ccc:	007d0000 	call	7d000 <_gp+0x78f8>
   64cd0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   64cd4:	01883a00 	call	1883a0 <__alt_data_end+0x1083a0>
   64cd8:	010d0bff 	0x10d0bff
   64cdc:	01010002 	0x1010002
	...
   64ce8:	010d0bff 	0x10d0bff
   64cec:	01010004 	movi	r4,1024
   64cf0:	00000100 	call	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   64cf4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   64cf8:	0004afc8 	cmpgei	zero,zero,4799
   64cfc:	0004d79c 	xori	zero,zero,4958
