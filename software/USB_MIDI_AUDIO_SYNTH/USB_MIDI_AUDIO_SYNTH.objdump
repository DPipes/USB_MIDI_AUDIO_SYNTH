
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002ac2c memsz 0x0002ac2c flags r-x
    LOAD off    0x0002bc4c vaddr 0x0002ac4c paddr 0x0002de30 align 2**12
         filesz 0x000031e4 memsz 0x000031e4 flags rw-
    LOAD off    0x0002f014 vaddr 0x00031014 paddr 0x00031014 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00023938  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000070e4  00023b68  00023b68  00024b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031e4  0002ac4c  0002de30  0002bc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00031014  00031014  0002f014  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000312c0  000312c0  0002ee30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a98  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005343f  00000000  00000000  000308f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010da0  00000000  00000000  00083d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015711  00000000  00000000  00094acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a2c  00000000  00000000  000aa1e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ff45  00000000  00000000  000afc0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000243a9  00000000  00000000  000bfb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e3efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c10  00000000  00000000  000e3f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ff5ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000ff5ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ff5f2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ff5f3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ff5f4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ff5f8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ff5fc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000ff600  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000ff60b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000ff616  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000ff621  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000ff635  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000ff660  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00094ca6  00000000  00000000  00104ae7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023b68 l    d  .rodata	00000000 .rodata
0002ac4c l    d  .rwdata	00000000 .rwdata
00031014 l    d  .bss	00000000 .bss
000312c0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002c730 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c731 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c732 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c733 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002c734 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c735 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c736 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c737 l     O .rwdata	00000001 _ZL9SPI_MODE3
00031014 l     O .bss	00000001 _ZL9usb_error
00031015 l     O .bss	00000001 _ZL14usb_task_state
00031018 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002c740 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c741 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c742 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c743 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c744 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00023c72 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003900 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002c764 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002c768 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c769 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c76a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c76b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c76c l     O .rwdata	00000002 _ZL9pstrSpace
0002c770 l     O .rwdata	00000003 _ZL8pstrCRLF
0002c774 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c778 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c77c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c780 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00023f10 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00023f24 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00023f30 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00023f3c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00023f48 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00023f54 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00023f64 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c788 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c790 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c798 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c7a0 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00023f70 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00023f7c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c7a4 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c7a8 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00023f88 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00023f98 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c7b0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c7b8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00023fa8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c7c0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00023fb8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c7c8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00023fd0 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c7cc l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00023fdc l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00023fe8 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c7d4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c7dc l     O .rwdata	00000006 _ZL14pstrUsageMouse
00023ff4 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00024000 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c7e4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c7ec l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002400c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002401c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c7f4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c7f8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c7fc l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c800 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c804 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c808 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c80c l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c814 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c81c l     O .rwdata	00000006 _ZL14pstrUsageWheel
00024030 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0002403c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00024048 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00024054 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c824 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c82c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c830 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c834 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c838 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c83c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c844 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c84c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c854 l     O .rwdata	00000004 _ZL12pstrUsageVno
00024064 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00024074 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00024080 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0002408c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002409c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000240a8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000240b4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000240c8 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000240d8 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000240e8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000240f8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00024108 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00024118 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00024128 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00024138 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00024144 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00024154 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00024168 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0002417c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00024188 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00024194 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000241a0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000241ac l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000241b8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000241c4 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000241d0 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000241dc l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000241e8 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000241f4 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00024200 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00024210 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002421c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002422c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0002423c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0002424c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002425c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0002426c l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00024284 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002429c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000242b4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000242c4 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000242d4 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000242e4 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000242f4 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00024304 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00024314 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00024324 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00024334 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00024344 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00024354 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0002436c l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0002437c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00024390 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000243a0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000243ac l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000243b8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000243c4 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c858 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000243d0 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000243e0 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000243f4 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00024408 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00024418 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00024428 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00024434 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00024448 l     O .rodata	00000009 _ZL17pstrUsageElevator
00024454 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c860 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00024464 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00024470 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
0002447c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0002448c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0002449c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c868 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000244a8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000244b4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000244c0 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c870 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c878 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c880 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c888 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000244cc l     O .rodata	00000009 _ZL17pstrUsageSteering
000244d8 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000244e4 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000244f0 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c890 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000244fc l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002450c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00024518 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00024524 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c898 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00024530 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c8a0 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c8a8 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0002453c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00024548 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00024554 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00024560 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c8b0 l     O .rwdata	00000005 _ZL13pstrUsageVest
0002456c l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00024578 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00024584 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00024594 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000245a4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000245b0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000245bc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c8b8 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c8bc l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c8c4 l     O .rwdata	00000005 _ZL13pstrUsageRate
000245c8 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000245d4 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000245e4 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000245f4 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024604 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00024610 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002461c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c8cc l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c8d4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c8dc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c8e4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c8ec l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c8f4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c8fc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c904 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c90c l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c914 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c91c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c924 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00024628 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024634 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00024640 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c92c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c934 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c93c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c944 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c94c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0002464c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0002465c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c954 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c95c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00024668 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00024678 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00024688 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00024698 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000246a8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000246b8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000246c8 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000246d8 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
000246e8 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c960 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
000246f8 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c968 l     O .rwdata	00000005 _ZL13pstrUsageBump
00024708 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024714 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c970 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00024720 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0002472c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c978 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00024738 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00024748 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00024754 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00024760 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
0002476c l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00024780 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00024790 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000247a0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000247ac l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000247b8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000247d0 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
000247e4 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000247fc l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00024810 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0002481c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00024828 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c980 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c988 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c990 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c994 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c99c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c9a0 l     O .rwdata	00000005 _ZL13pstrUsageMute
00024834 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00024840 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00024850 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c9a8 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00024860 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00024870 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c9b0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c9b8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
0002487c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00024890 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c9c0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c9c4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
0002489c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000248b0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c9c8 l     O .rwdata	00000005 _ZL13pstrUsageRing
000248bc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
000248c8 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c9d0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c9d8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c9e0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c9e8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
000248d4 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c9f0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c9f8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
000248e0 l     O .rodata	00000009 _ZL17pstrUsageCoverage
000248ec l     O .rodata	0000000b _ZL18pstrUsageNightMode
000248f8 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024904 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c9fc l     O .rwdata	00000005 _ZL19pstrUsageConference
00024910 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002ca04 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002ca0c l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002ca14 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0002491c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002ca1c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002ca24 l     O .rwdata	00000006 _ZL14pstrUsageReady
00024928 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024934 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002ca2c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002ca34 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002ca38 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002ca3c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002ca44 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00024940 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002ca4c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002ca54 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002ca5c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002ca60 l     O .rwdata	00000006 _ZL14pstrUsageError
0002494c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0002495c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00024970 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002ca68 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00024988 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00024994 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000249a4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002ca70 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
000249b4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
000249c4 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
000249d8 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
000249ec l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00024a00 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024a14 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002ca78 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024a24 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00024a30 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002ca80 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00024a3c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00024a48 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002ca88 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00024a58 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00024a64 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002ca90 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002ca98 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00024a70 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00024a7c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002caa0 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002caa8 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002cab0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002cab8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00024a88 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002cac0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002cac8 l     O .rwdata	00000005 _ZL13pstrUsagePark
00024a94 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00024aa0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002cad0 l     O .rwdata	00000005 _ZL13pstrUsageLine
00024aac l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024ab8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024ac4 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00024ad0 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024adc l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002cad8 l     O .rwdata	00000005 _ZL13pstrUsageSend
00024ae8 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024af4 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00024b00 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024b0c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024b18 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024b24 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002cae0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024b34 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00024b44 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00024b58 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00024b6c l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00024b80 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00024b94 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00024ba4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024bb4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024bc8 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024bd8 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024be8 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024bf8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024c04 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00024c10 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024c1c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002cae4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002caec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002caf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002caf4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002caf8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002cafc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002cb00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002cb04 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002cb08 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002cb0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002cb10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002cb14 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002cb18 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002cb1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002cb20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002cb24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002cb28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00024c30 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00024c40 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00024c4c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00024c58 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002cb2c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002cb30 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002cb38 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002cb40 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002cb48 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00024c64 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00024c70 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002cb50 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00024c7c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002cb58 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00024c88 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002cb60 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00024c94 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00024ca0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00024cac l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00024cb8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00024cc4 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00024cd4 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00024ce4 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00024cf0 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00024cfc l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002cb68 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00024d0c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00024d1c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002cb70 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002cb78 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00024d28 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00024d34 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00024d40 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00024d4c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00024d5c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002cb7c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002cb84 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00024d68 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00024d78 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00024d84 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00024d90 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00024d9c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00024da8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00024db4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00024dc0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00024dd0 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00024ddc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00024de8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00024df4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002cb8c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002cb94 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00024e04 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00024e14 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00024e20 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00024e2c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00024e3c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00024e4c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002cb9c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002cba4 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00024e5c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002cbac l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002cbb4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002cbbc l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002cbc4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002cbcc l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00024e68 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00024e74 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002cbd4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002cbdc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00024e80 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00024e8c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00024e98 l     O .rodata	00000009 _ZL17pstrUsageTracking
00024ea4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00024eb0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002cbe4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00024ebc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002cbec l     O .rwdata	00000005 _ZL13pstrUsageMark
00024ec8 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00024ed4 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00024ee0 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00024eec l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00024efc l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00024f10 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00024f20 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00024f30 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00024f3c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00024f48 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00024f54 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00024f60 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002cbf4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002cbf8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002cc00 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002cc08 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00024f6c l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00024f78 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002cc10 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002cc18 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002cc1c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002cc24 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002cc2c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00024f84 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00024f90 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00024f9c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00024fa8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002cc34 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00024fb4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00024fc0 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00024fcc l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00024fd8 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00024fe8 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00024ff8 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025004 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00025010 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002501c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002cc3c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002cc44 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00025028 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025034 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002cc4c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00025040 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00025050 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00025060 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002506c l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00025078 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00025084 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002cc54 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002cc5c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00025090 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002509c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000250a8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000250b4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002cc64 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000250c4 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000250d0 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002cc6c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002cc74 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002cc7c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000250e0 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000250ec l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000250f8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025104 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00025110 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00025120 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025134 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00025140 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00025154 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00025164 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00025170 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00025180 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00025190 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000251a0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000251ac l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000251bc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000251c8 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000251d8 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000251e8 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000251f8 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00025208 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002521c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002cc84 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002522c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00025240 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00025254 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00025264 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00025274 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00025284 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00025290 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002529c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000252a8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000252b4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000252c0 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000252d0 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000252e8 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000252f4 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00025300 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002530c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00025318 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00025324 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00025330 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00025344 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002cc8c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00025350 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002cc94 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002535c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00025368 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00025378 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00025384 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00025394 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000253a4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000253b4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000253c0 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000253cc l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000253d8 l     O .rodata	00000009 _ZL16pstrUsageALClock
000253e4 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000253f4 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00025400 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002540c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00025418 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00025424 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00025438 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00025448 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00025454 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00025468 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00025474 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00025484 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00025498 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000254ac l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000254c0 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000254d0 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000254e8 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000254fc l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002550c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002551c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002cc9c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002cca4 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00025530 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ccac l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002ccb4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002ccbc l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002ccc4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002553c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002cccc l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002ccd4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002ccdc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002cce4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00025548 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00025554 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002ccec l     O .rwdata	00000008 _ZL15pstrUsageACFind
00025560 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00025570 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002ccf4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002ccfc l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002cd04 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002cd0c l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002cd14 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002557c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00025588 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00025598 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000255a8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002cd1c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000255b4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000255c0 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000255cc l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002cd24 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000255d8 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000255e4 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000255f4 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00025600 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00025610 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00025620 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002562c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00025638 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002cd2c l     O .rwdata	00000007 _ZL14pstrUsageACPan
00025648 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00025654 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00025664 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002cd34 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002cd3c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002cd44 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002cd4c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00025674 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00025680 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002cd54 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0002568c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00025698 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000256a4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000256b0 l     O .rodata	0000000a _ZL17pstrUsageACResize
000256bc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000256c8 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000256d4 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000256e0 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
000256ec l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
000256f8 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025704 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00025710 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00025720 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00025730 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00025740 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00025750 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002575c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002576c l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00025778 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00025788 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00025798 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000257a8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000257b4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000257c0 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000257cc l     O .rodata	0000000b _ZL18pstrUsageACPromote
000257d8 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002cd5c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002cd64 l     O .rwdata	00000006 _ZL13pstrUsageACNo
000257e4 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002cd6c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002cd74 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
000257f0 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002cd7c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
000257fc l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002580c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00025818 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00025828 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00025838 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00025848 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002cd84 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002cd8c l     O .rwdata	00000008 _ZL15pstrUsageACLock
00025854 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002cd94 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00025860 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002586c l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002587c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00025888 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00025898 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000258a4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000258b0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
000258bc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
000258c8 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
000258d4 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
000258e0 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002cd9c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002cda4 l     O .rwdata	00000008 _ZL15pstrUsageACSort
000258ec l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
000258f8 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002cdac l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00025908 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025914 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00025920 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00025930 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00025940 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002594c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00025958 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00025964 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002cdb4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00025970 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002597c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00025988 l     O .rodata	00000009 _ZL16pstrUsageACReply
00025994 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000259a4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002cdbc l     O .rwdata	00000007 _ZL15pstrUsageACSend
000259b0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002cdc4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002cdcc l     O .rwdata	00000008 _ZL19pstrUsageACDownload
000259bc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
000259c8 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
000259d4 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
000259e0 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
000259ec l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
000259f8 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025a04 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00025a10 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025a1c l     O .rodata	0000000a _ZL17pstrUsageACRename
00025a28 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025a34 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00025a40 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00025a4c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00025a58 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002cdd4 l     O .rwdata	00000004 _ZL12pstrUsagePen
00025a64 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00025a70 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00025a7c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00025a88 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00025a94 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002cdd8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00025aa4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002cde0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00025ab0 l     O .rodata	00000009 _ZL17pstrUsageArmature
00025abc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00025ad0 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002cde8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002cdf0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002cdf8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00025ae0 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025aec l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025af8 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ce00 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002ce08 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002ce10 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002ce14 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025b04 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00025b10 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00025b20 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00025b30 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002ce1c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002ce24 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002ce2c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002ce34 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00025b40 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002ce3c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002ce44 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00025b4c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002ce4c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002ce54 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00025b58 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00025b64 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00025b74 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00025b80 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00025b90 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00025b9c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00025bac l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025bb8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025bc8 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025bd4 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025be4 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025bf4 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00025c00 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025c0c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025c18 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025c24 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00025c30 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025c3c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00025c48 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00025c58 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00025c68 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002ce5c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002ce60 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002ce64 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002ce6c l     O .rwdata	00000005 _ZL16pstrUsageColumns
00025c74 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00025c80 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00025c8c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00025c98 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002ce74 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00025ca4 l     O .rodata	00000009 _ZL17pstrUsageFontData
00025cb0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00025cbc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00025cc8 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00025cd8 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00025ce8 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00025cf8 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00025d04 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00025d10 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00025d1c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00025d28 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00025d34 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00025d40 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00025d4c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00025d58 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00025d64 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00025d74 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00025d84 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00025d94 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00025da0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00025dac l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00025dbc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002ce7c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00025dc8 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00025dd8 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00025de8 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00025df4 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00025e00 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00025e10 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00025e20 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00025e30 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00025e40 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00025e4c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00025e58 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00025e64 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00025e74 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00025e84 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00025e94 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00025ea4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002ce84 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ce8c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00025eb4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ce94 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ce9c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002cea4 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ceac l     O .rwdata	00000006 _ZL14pstrUsagePrint
00025ec0 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ceb4 l     O .rwdata	00000005 _ZL13pstrUsageCine
00025ecc l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002cebc l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002cec4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00025ed8 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00025ee8 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00025ef8 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00025f08 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00025f14 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00025f20 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00025f34 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00025f48 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00025f5c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00025f70 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00025f80 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00025f90 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00025f9c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00025fa8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00025fb8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002ced8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ced9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ceda l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cedb l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002cee0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cee1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cee2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cee3 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002cee4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cee5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cee6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cee7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00026212 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00026222 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008ac0 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002cef0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cef1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cef2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cef3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002cef4 l     O .rwdata	00000002 _ZL9pstrSpace
0002cef8 l     O .rwdata	00000003 _ZL8pstrCRLF
0002cefc l     O .rwdata	00000002 _ZL13pstrSingleTab
0002cf00 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002cf04 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002cf08 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000262ec l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00026300 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0002630c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00026318 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00026324 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00026330 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00026340 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002cf10 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002cf18 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002cf20 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002cf28 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0002634c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00026358 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002cf2c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002cf30 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00026364 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00026374 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002cf38 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002cf40 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00026384 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002cf48 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00026394 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002cf50 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000263ac l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002cf54 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000263b8 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000263c4 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002cf5c l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002cf64 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000263d0 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000263dc l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002cf6c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002cf74 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000263e8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000263f8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002cf7c l     O .rwdata	00000002 _ZL10pstrUsageX
0002cf80 l     O .rwdata	00000002 _ZL10pstrUsageY
0002cf84 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002cf88 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002cf8c l     O .rwdata	00000003 _ZL11pstrUsageRy
0002cf90 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002cf94 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002cf9c l     O .rwdata	00000005 _ZL13pstrUsageDial
0002cfa4 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0002640c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00026418 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00026424 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00026430 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002cfac l     O .rwdata	00000006 _ZL14pstrUsageStart
0002cfb4 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002cfb8 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002cfbc l     O .rwdata	00000003 _ZL11pstrUsageVy
0002cfc0 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002cfc4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002cfcc l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002cfd4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002cfdc l     O .rwdata	00000004 _ZL12pstrUsageVno
00026440 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00026450 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0002645c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00026468 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00026478 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00026484 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00026490 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000264a4 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000264b4 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000264c4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000264d4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000264e4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000264f4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00026504 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00026514 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00026520 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00026530 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00026544 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00026558 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00026564 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00026570 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0002657c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00026588 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00026594 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000265a0 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000265ac l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000265b8 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000265c4 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000265d0 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000265dc l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000265ec l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000265f8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00026608 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00026618 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00026628 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00026638 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00026648 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00026660 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00026678 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00026690 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000266a0 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000266b0 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000266c0 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000266d0 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000266e0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000266f0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00026700 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00026710 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00026720 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00026730 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00026748 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00026758 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0002676c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0002677c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00026788 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00026794 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000267a0 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002cfe0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000267ac l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000267bc l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000267d0 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000267e4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000267f4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00026804 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00026810 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00026824 l     O .rodata	00000009 _ZL17pstrUsageElevator
00026830 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002cfe8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00026840 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002684c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00026858 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00026868 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00026878 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002cff0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00026884 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00026890 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002689c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002cff8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d000 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d008 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d010 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000268a8 l     O .rodata	00000009 _ZL17pstrUsageSteering
000268b4 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000268c0 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000268cc l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d018 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000268d8 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000268e8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000268f4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00026900 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d020 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002690c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d028 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d030 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00026918 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00026924 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00026930 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0002693c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d038 l     O .rwdata	00000005 _ZL13pstrUsageVest
00026948 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00026954 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00026960 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00026970 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00026980 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002698c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00026998 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d040 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d044 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d04c l     O .rwdata	00000005 _ZL13pstrUsageRate
000269a4 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000269b0 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000269c0 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
000269d0 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000269e0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000269ec l     O .rodata	0000000b _ZL18pstrUsageStickType
000269f8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d054 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d05c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d064 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d06c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d074 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d07c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d084 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d08c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d094 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d09c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d0a4 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d0ac l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00026a04 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00026a10 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026a1c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d0b4 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d0bc l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d0c4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d0cc l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d0d4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00026a28 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00026a38 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d0dc l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d0e4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00026a44 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00026a54 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00026a64 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00026a74 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00026a84 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00026a94 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00026aa4 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00026ab4 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00026ac4 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d0e8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00026ad4 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d0f0 l     O .rwdata	00000005 _ZL13pstrUsageBump
00026ae4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00026af0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d0f8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026afc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026b08 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d100 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00026b14 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00026b24 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00026b30 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026b3c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026b48 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00026b5c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00026b6c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00026b7c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00026b88 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00026b94 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00026bac l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026bc0 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026bd8 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026bec l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026bf8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00026c04 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d108 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d110 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d118 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d11c l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d124 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d128 l     O .rwdata	00000005 _ZL13pstrUsageMute
00026c10 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026c1c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026c2c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d130 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026c3c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026c4c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d138 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d140 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00026c58 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00026c6c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d148 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d14c l     O .rwdata	00000004 _ZL12pstrUsageCLV
00026c78 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00026c8c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d150 l     O .rwdata	00000005 _ZL13pstrUsageRing
00026c98 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00026ca4 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d158 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d160 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d168 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d170 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00026cb0 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d178 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d180 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00026cbc l     O .rodata	00000009 _ZL17pstrUsageCoverage
00026cc8 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00026cd4 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00026ce0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d184 l     O .rwdata	00000005 _ZL19pstrUsageConference
00026cec l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d18c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d194 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d19c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00026cf8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d1a4 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d1ac l     O .rwdata	00000006 _ZL14pstrUsageReady
00026d04 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00026d10 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d1b4 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d1bc l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d1c0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d1c4 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d1cc l     O .rwdata	00000007 _ZL15pstrUsageRewind
00026d1c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d1d4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d1dc l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d1e4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d1e8 l     O .rwdata	00000006 _ZL14pstrUsageError
00026d28 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00026d38 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00026d4c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d1f0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00026d64 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00026d70 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00026d80 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d1f8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00026d90 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00026da0 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00026db4 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00026dc8 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00026ddc l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00026df0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d200 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00026e00 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00026e0c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d208 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00026e18 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00026e24 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d210 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00026e34 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00026e40 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d218 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d220 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00026e4c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00026e58 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d228 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d230 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d238 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d240 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00026e64 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d248 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d250 l     O .rwdata	00000005 _ZL13pstrUsagePark
00026e70 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00026e7c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d258 l     O .rwdata	00000005 _ZL13pstrUsageLine
00026e88 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00026e94 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00026ea0 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00026eac l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00026eb8 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d260 l     O .rwdata	00000005 _ZL13pstrUsageSend
00026ec4 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00026ed0 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00026edc l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00026ee8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00026ef4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00026f00 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d268 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00026f10 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00026f20 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00026f34 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00026f48 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00026f5c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00026f70 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00026f80 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00026f90 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00026fa4 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00026fb4 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00026fc4 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00026fd4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00026fe0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00026fec l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00026ff8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d26c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d274 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d278 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d27c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d280 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d284 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d288 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d28c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d290 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d294 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d298 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d29c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d2a0 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d2a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d2a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d2ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d2b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0002700c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0002701c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027028 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027034 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d2b4 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d2b8 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d2c0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d2c8 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d2d0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027040 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0002704c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d2d8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027058 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d2e0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027064 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d2e8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027070 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002707c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027088 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027094 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
000270a0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
000270b0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000270c0 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000270cc l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000270d8 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d2f0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000270e8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000270f8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d2f8 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d300 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027104 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027110 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002711c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027128 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00027138 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d304 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d30c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00027144 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00027154 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00027160 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0002716c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00027178 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00027184 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00027190 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002719c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
000271ac l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000271b8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
000271c4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000271d0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d314 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d31c l     O .rwdata	00000005 _ZL13pstrUsageHelp
000271e0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000271f0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000271fc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00027208 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00027218 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00027228 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d324 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d32c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00027238 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d334 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d33c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d344 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d34c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d354 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00027244 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00027250 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d35c l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d364 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002725c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00027268 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00027274 l     O .rodata	00000009 _ZL17pstrUsageTracking
00027280 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002728c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d36c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00027298 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d374 l     O .rwdata	00000005 _ZL13pstrUsageMark
000272a4 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000272b0 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000272bc l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
000272c8 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000272d8 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000272ec l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000272fc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002730c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00027318 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00027324 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00027330 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002733c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d37c l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d380 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d388 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d390 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00027348 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00027354 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d398 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d3a0 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d3a4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d3ac l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d3b4 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00027360 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0002736c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00027378 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00027384 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d3bc l     O .rwdata	00000005 _ZL13pstrUsageSlow
00027390 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002739c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000273a8 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000273b4 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000273c4 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000273d4 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000273e0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000273ec l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000273f8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d3c4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d3cc l     O .rwdata	00000007 _ZL15pstrUsageMotion
00027404 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00027410 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d3d4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002741c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002742c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002743c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00027448 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00027454 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00027460 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d3dc l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d3e4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002746c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00027478 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00027484 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00027490 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d3ec l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000274a0 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000274ac l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d3f4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d3fc l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d404 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000274bc l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000274c8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000274d4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000274e0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000274ec l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000274fc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00027510 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002751c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00027530 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00027540 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002754c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002755c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002756c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002757c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00027588 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00027598 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000275a4 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000275b4 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000275c4 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000275d4 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000275e4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000275f8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d40c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00027608 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002761c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00027630 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00027640 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00027650 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00027660 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002766c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00027678 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00027684 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00027690 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002769c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000276ac l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000276c4 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000276d0 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000276dc l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000276e8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000276f4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00027700 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002770c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00027720 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d414 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002772c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d41c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00027738 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00027744 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00027754 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00027760 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00027770 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00027780 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00027790 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002779c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000277a8 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000277b4 l     O .rodata	00000009 _ZL16pstrUsageALClock
000277c0 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000277d0 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000277dc l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000277e8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000277f4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00027800 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00027814 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00027824 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00027830 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00027844 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00027850 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00027860 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00027874 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00027888 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002789c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000278ac l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000278c4 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000278d8 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000278e8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000278f8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d424 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d42c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002790c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d434 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d43c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d444 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d44c l     O .rwdata	00000008 _ZL15pstrUsageACSave
00027918 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d454 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d45c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d464 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d46c l     O .rwdata	00000007 _ZL14pstrUsageACCut
00027924 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00027930 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d474 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002793c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002794c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d47c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d484 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d48c l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d494 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d49c l     O .rwdata	00000008 _ZL15pstrUsageACStop
00027958 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00027964 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00027974 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00027984 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d4a4 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00027990 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002799c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000279a8 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d4ac l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000279b4 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000279c0 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
000279d0 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000279dc l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000279ec l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000279fc l     O .rodata	0000000a _ZL17pstrUsageACScroll
00027a08 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00027a14 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d4b4 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00027a24 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00027a30 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00027a40 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d4bc l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d4c4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d4cc l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d4d4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00027a50 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00027a5c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d4dc l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00027a68 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00027a74 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00027a80 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00027a8c l     O .rodata	0000000a _ZL17pstrUsageACResize
00027a98 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00027aa4 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00027ab0 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027abc l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027ac8 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00027ad4 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00027ae0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027aec l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027afc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027b0c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027b1c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027b2c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027b38 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027b48 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00027b54 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00027b64 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00027b74 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00027b84 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00027b90 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00027b9c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00027ba8 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00027bb4 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d4e4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d4ec l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027bc0 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d4f4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d4fc l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027bcc l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d504 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027bd8 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027be8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00027bf4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00027c04 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00027c14 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00027c24 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d50c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d514 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027c30 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d51c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027c3c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027c48 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00027c58 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00027c64 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00027c74 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00027c80 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00027c8c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00027c98 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00027ca4 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00027cb0 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00027cbc l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d524 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d52c l     O .rwdata	00000008 _ZL15pstrUsageACSort
00027cc8 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00027cd4 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d534 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00027ce4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00027cf0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00027cfc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00027d0c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00027d1c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00027d28 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00027d34 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00027d40 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d53c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00027d4c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00027d58 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00027d64 l     O .rodata	00000009 _ZL16pstrUsageACReply
00027d70 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00027d80 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d544 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00027d8c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d54c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d554 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00027d98 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00027da4 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00027db0 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00027dbc l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00027dc8 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00027dd4 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00027de0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00027dec l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00027df8 l     O .rodata	0000000a _ZL17pstrUsageACRename
00027e04 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00027e10 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00027e1c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00027e28 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00027e34 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d55c l     O .rwdata	00000004 _ZL12pstrUsagePen
00027e40 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00027e4c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00027e58 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00027e64 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00027e70 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d560 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00027e80 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d568 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00027e8c l     O .rodata	00000009 _ZL17pstrUsageArmature
00027e98 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00027eac l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d570 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d578 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d580 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00027ebc l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00027ec8 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00027ed4 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d588 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d590 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d598 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d59c l     O .rwdata	00000005 _ZL16pstrUsageQuality
00027ee0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00027eec l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00027efc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00027f0c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d5a4 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d5ac l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d5b4 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d5bc l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00027f1c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d5c4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d5cc l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00027f28 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d5d4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d5dc l     O .rwdata	00000007 _ZL15pstrUsageEraser
00027f34 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00027f40 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00027f50 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00027f5c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00027f6c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00027f78 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00027f88 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00027f94 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00027fa4 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00027fb0 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00027fc0 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00027fd0 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00027fdc l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00027fe8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00027ff4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028000 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002800c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028018 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028024 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028034 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028044 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d5e4 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d5e8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d5ec l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d5f4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028050 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002805c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028068 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028074 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d5fc l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028080 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002808c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028098 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
000280a4 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
000280b4 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
000280c4 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
000280d4 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
000280e0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
000280ec l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
000280f8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028104 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028110 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002811c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028128 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028134 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00028140 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00028150 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00028160 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00028170 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002817c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00028188 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00028198 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d604 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
000281a4 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
000281b4 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
000281c4 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
000281d0 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
000281dc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
000281ec l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
000281fc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002820c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002821c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00028228 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00028234 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00028240 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00028250 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00028260 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00028270 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00028280 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d60c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d614 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00028290 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d61c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d624 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d62c l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d634 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002829c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d63c l     O .rwdata	00000005 _ZL13pstrUsageCine
000282a8 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d644 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d64c l     O .rwdata	00000006 _ZL14pstrUsageDepth
000282b4 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
000282c4 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
000282d4 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
000282e4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
000282f0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
000282fc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00028310 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00028324 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00028338 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002834c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002835c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002836c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00028378 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00028384 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00028394 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d652 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d653 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d654 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d655 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d658 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d659 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d65a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d65b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d65c l     O .rwdata	00000002 _ZL9pstrSpace
0002d660 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d664 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d668 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d66c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d670 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00028474 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00028488 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00028494 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000284a0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000284ac l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000284b8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000284c8 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d678 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d680 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d688 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d690 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000284d4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000284e0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d694 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d698 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000284ec l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000284fc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d6a0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d6a8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0002850c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d6b0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0002851c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d6b8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00028534 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d6bc l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00028540 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0002854c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d6c4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d6cc l     O .rwdata	00000006 _ZL14pstrUsageMouse
00028558 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00028564 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d6d4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d6dc l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00028570 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00028580 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d6e4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d6e8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d6ec l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d6f0 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d6f4 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d6f8 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d6fc l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d704 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d70c l     O .rwdata	00000006 _ZL14pstrUsageWheel
00028594 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000285a0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000285ac l     O .rodata	0000000b _ZL18pstrUsageByteCount
000285b8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d714 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d71c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d720 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d724 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d728 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d72c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d734 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d73c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d744 l     O .rwdata	00000004 _ZL12pstrUsageVno
000285c8 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000285d8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000285e4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000285f0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00028600 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002860c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00028618 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002862c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002863c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002864c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002865c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0002866c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0002867c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0002868c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0002869c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000286a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000286b8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000286cc l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000286e0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000286ec l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000286f8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00028704 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00028710 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002871c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00028728 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00028734 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00028740 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002874c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00028758 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00028764 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00028774 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00028780 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00028790 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000287a0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000287b0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000287c0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000287d0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000287e8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00028800 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00028818 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00028828 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00028838 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00028848 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00028858 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00028868 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00028878 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00028888 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00028898 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000288a8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000288b8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000288d0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000288e0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000288f4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00028904 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00028910 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002891c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00028928 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d748 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00028934 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00028944 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00028958 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002896c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002897c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002898c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00028998 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000289ac l     O .rodata	00000009 _ZL17pstrUsageElevator
000289b8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d750 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000289c8 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000289d4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000289e0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000289f0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00028a00 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d758 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028a0c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00028a18 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00028a24 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d760 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d768 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d770 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d778 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00028a30 l     O .rodata	00000009 _ZL17pstrUsageSteering
00028a3c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00028a48 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00028a54 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d780 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00028a60 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00028a70 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00028a7c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00028a88 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d788 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00028a94 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d790 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d798 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00028aa0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00028aac l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028ab8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00028ac4 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d7a0 l     O .rwdata	00000005 _ZL13pstrUsageVest
00028ad0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028adc l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028ae8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028af8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028b08 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00028b14 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00028b20 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d7a8 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d7ac l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d7b4 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028b2c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028b38 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028b48 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00028b58 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00028b68 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00028b74 l     O .rodata	0000000b _ZL18pstrUsageStickType
00028b80 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d7bc l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d7c4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d7cc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d7d4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d7dc l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d7e4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d7ec l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d7f4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d7fc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d804 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d80c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d814 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00028b8c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00028b98 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00028ba4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d81c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d824 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d82c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d834 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d83c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00028bb0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028bc0 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d844 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d84c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028bcc l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028bdc l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028bec l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028bfc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028c0c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028c1c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028c2c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028c3c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028c4c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d850 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00028c5c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d858 l     O .rwdata	00000005 _ZL13pstrUsageBump
00028c6c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00028c78 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d860 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00028c84 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00028c90 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d868 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00028c9c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00028cac l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00028cb8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00028cc4 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00028cd0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00028ce4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00028cf4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00028d04 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00028d10 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00028d1c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00028d34 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00028d48 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00028d60 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00028d74 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00028d80 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00028d8c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d870 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d878 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d880 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d884 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d88c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d890 l     O .rwdata	00000005 _ZL13pstrUsageMute
00028d98 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00028da4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00028db4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d898 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00028dc4 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00028dd4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d8a0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d8a8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00028de0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00028df4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d8b0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d8b4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00028e00 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00028e14 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d8b8 l     O .rwdata	00000005 _ZL13pstrUsageRing
00028e20 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00028e2c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d8c0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d8c8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d8d0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d8d8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00028e38 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d8e0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d8e8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00028e44 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00028e50 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00028e5c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00028e68 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d8ec l     O .rwdata	00000005 _ZL19pstrUsageConference
00028e74 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d8f4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d8fc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d904 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00028e80 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d90c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d914 l     O .rwdata	00000006 _ZL14pstrUsageReady
00028e8c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00028e98 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d91c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d924 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d928 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d92c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d934 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00028ea4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d93c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d944 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d94c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d950 l     O .rwdata	00000006 _ZL14pstrUsageError
00028eb0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00028ec0 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00028ed4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d958 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00028eec l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00028ef8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00028f08 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d960 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00028f18 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00028f28 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00028f3c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00028f50 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00028f64 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00028f78 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d968 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00028f88 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00028f94 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d970 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00028fa0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00028fac l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d978 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00028fbc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00028fc8 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d980 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d988 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00028fd4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00028fe0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d990 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d998 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d9a0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d9a8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00028fec l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d9b0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d9b8 l     O .rwdata	00000005 _ZL13pstrUsagePark
00028ff8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029004 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d9c0 l     O .rwdata	00000005 _ZL13pstrUsageLine
00029010 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0002901c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00029028 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029034 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00029040 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d9c8 l     O .rwdata	00000005 _ZL13pstrUsageSend
0002904c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00029058 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00029064 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00029070 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0002907c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00029088 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d9d0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00029098 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
000290a8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
000290bc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000290d0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000290e4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000290f8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00029108 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00029118 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0002912c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0002913c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0002914c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0002915c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00029168 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00029174 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00029180 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d9d4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d9dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d9e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d9e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d9e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d9ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d9f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d9f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d9f8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d9fc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002da00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002da04 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002da08 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002da0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002da10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002da14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002da18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00029194 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
000291a4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
000291b0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
000291bc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002da1c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002da20 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002da28 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002da30 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002da38 l     O .rwdata	00000006 _ZL14pstrUsageSleep
000291c8 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
000291d4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002da40 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
000291e0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002da48 l     O .rwdata	00000005 _ZL13pstrUsageMenu
000291ec l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002da50 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000291f8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00029204 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00029210 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002921c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00029228 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00029238 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00029248 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00029254 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00029260 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002da58 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00029270 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00029280 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002da60 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002da68 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002928c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00029298 l     O .rodata	0000000a _ZL17pstrUsageModeStep
000292a4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
000292b0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
000292c0 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002da6c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002da74 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
000292cc l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000292dc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000292e8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000292f4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00029300 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002930c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00029318 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00029324 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00029334 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00029340 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002934c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00029358 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002da7c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002da84 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00029368 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00029378 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00029384 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00029390 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
000293a0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000293b0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002da8c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002da94 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
000293c0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002da9c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002daa4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002daac l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002dab4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002dabc l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000293cc l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000293d8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002dac4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002dacc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000293e4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000293f0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000293fc l     O .rodata	00000009 _ZL17pstrUsageTracking
00029408 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00029414 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002dad4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00029420 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002dadc l     O .rwdata	00000005 _ZL13pstrUsageMark
0002942c l     O .rodata	00000009 _ZL18pstrUsageClearMark
00029438 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00029444 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00029450 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00029460 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00029474 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00029484 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00029494 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000294a0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000294ac l     O .rodata	0000000b _ZL18pstrUsageStopEject
000294b8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000294c4 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002dae4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002dae8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002daf0 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002daf8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
000294d0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000294dc l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002db00 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002db08 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002db0c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002db14 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002db1c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000294e8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000294f4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00029500 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002950c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002db24 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00029518 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00029524 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00029530 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002953c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002954c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002955c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00029568 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00029574 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00029580 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002db2c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002db34 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002958c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00029598 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002db3c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000295a4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
000295b4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000295c4 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000295d0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000295dc l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000295e8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002db44 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002db4c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000295f4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00029600 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002960c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00029618 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002db54 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00029628 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00029634 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002db5c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002db64 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002db6c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00029644 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00029650 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002965c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00029668 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00029674 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00029684 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00029698 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000296a4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000296b8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000296c8 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000296d4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000296e4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000296f4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00029704 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00029710 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00029720 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002972c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002973c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002974c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002975c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002976c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00029780 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002db74 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00029790 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000297a4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000297b8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000297c8 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000297d8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000297e8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000297f4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00029800 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002980c l     O .rodata	00000009 _ZL16pstrUsageALLogon
00029818 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00029824 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00029834 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002984c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00029858 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00029864 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00029870 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002987c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00029888 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00029894 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000298a8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002db7c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000298b4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002db84 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000298c0 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000298cc l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000298dc l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000298e8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000298f8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00029908 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00029918 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00029924 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00029930 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002993c l     O .rodata	00000009 _ZL16pstrUsageALClock
00029948 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00029958 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00029964 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00029970 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002997c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00029988 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002999c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000299ac l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000299b8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000299cc l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000299d8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000299e8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000299fc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00029a10 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00029a24 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00029a34 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00029a4c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00029a60 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00029a70 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00029a80 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002db8c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002db94 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00029a94 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002db9c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dba4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002dbac l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002dbb4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00029aa0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002dbbc l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002dbc4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002dbcc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002dbd4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00029aac l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029ab8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dbdc l     O .rwdata	00000008 _ZL15pstrUsageACFind
00029ac4 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00029ad4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dbe4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002dbec l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002dbf4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002dbfc l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002dc04 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00029ae0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029aec l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029afc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029b0c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002dc0c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029b18 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00029b24 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00029b30 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002dc14 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029b3c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029b48 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00029b58 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00029b64 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00029b74 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00029b84 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00029b90 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00029b9c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002dc1c l     O .rwdata	00000007 _ZL14pstrUsageACPan
00029bac l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029bb8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029bc8 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002dc24 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002dc2c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002dc34 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002dc3c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029bd8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00029be4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002dc44 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029bf0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029bfc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029c08 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00029c14 l     O .rodata	0000000a _ZL17pstrUsageACResize
00029c20 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029c2c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029c38 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00029c44 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029c50 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00029c5c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00029c68 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00029c74 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00029c84 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00029c94 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00029ca4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00029cb4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00029cc0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00029cd0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00029cdc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00029cec l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00029cfc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00029d0c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00029d18 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00029d24 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00029d30 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00029d3c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002dc4c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002dc54 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00029d48 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002dc5c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002dc64 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00029d54 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002dc6c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00029d60 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00029d70 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00029d7c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00029d8c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00029d9c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00029dac l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002dc74 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002dc7c l     O .rwdata	00000008 _ZL15pstrUsageACLock
00029db8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002dc84 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00029dc4 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00029dd0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00029de0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00029dec l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00029dfc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00029e08 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00029e14 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00029e20 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00029e2c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00029e38 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00029e44 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dc8c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dc94 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00029e50 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00029e5c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dc9c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00029e6c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00029e78 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00029e84 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00029e94 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00029ea4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00029eb0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00029ebc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00029ec8 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dca4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00029ed4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00029ee0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00029eec l     O .rodata	00000009 _ZL16pstrUsageACReply
00029ef8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00029f08 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dcac l     O .rwdata	00000007 _ZL15pstrUsageACSend
00029f14 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dcb4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dcbc l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00029f20 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00029f2c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00029f38 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00029f44 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00029f50 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00029f5c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00029f68 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00029f74 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00029f80 l     O .rodata	0000000a _ZL17pstrUsageACRename
00029f8c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00029f98 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00029fa4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00029fb0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00029fbc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dcc4 l     O .rwdata	00000004 _ZL12pstrUsagePen
00029fc8 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00029fd4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00029fe0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00029fec l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00029ff8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dcc8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002a008 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dcd0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002a014 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002a020 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002a034 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dcd8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dce0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dce8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002a044 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002a050 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002a05c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dcf0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dcf8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dd00 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dd04 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002a068 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002a074 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002a084 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002a094 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dd0c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dd14 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dd1c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dd24 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002a0a4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dd2c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dd34 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002a0b0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dd3c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dd44 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002a0bc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002a0c8 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002a0d8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002a0e4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002a0f4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002a100 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002a110 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002a11c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002a12c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002a138 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002a148 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002a158 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002a164 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002a170 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002a17c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002a188 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002a194 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002a1a0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002a1ac l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002a1bc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002a1cc l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dd4c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dd50 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dd54 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dd5c l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002a1d8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002a1e4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002a1f0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002a1fc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dd64 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002a208 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002a214 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002a220 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002a22c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002a23c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002a24c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002a25c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002a268 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002a274 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002a280 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002a28c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002a298 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002a2a4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002a2b0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002a2bc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002a2c8 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002a2d8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002a2e8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002a2f8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002a304 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002a310 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002a320 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dd6c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002a32c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002a33c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002a34c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002a358 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002a364 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002a374 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002a384 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002a394 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002a3a4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002a3b0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002a3bc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002a3c8 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002a3d8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002a3e8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002a3f8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002a408 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dd74 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dd7c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002a418 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dd84 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dd8c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dd94 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dd9c l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002a424 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dda4 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002a430 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ddac l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002ddb4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002a43c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002a44c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002a45c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002a46c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002a478 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002a484 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002a498 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002a4ac l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002a4c0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002a4d4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002a4e4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002a4f4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002a500 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002a50c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002a51c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002a52a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002a53a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002ddbc l     O .rwdata	00000004 _ZL5synth
0000a3b0 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a418 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b64c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b6f0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b8fc l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b950 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b9dc l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000bb10 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000bb98 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bdc4 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c69c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c984 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00031188 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000ca3c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000cbec l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00031024 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000de9c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0003102c l     O .bss	00000004 fc_static
0000dfb4 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000e074 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002ac4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aa2a l     O .rodata	00000010 zeroes.4389
0002aa3a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aa4a l     O .rodata	00000010 zeroes.4404
00013bd4 l     F .text	000000bc __sbprintf
0002aa5a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00013de4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001593c l     F .text	00000008 __fp_unlock
00015950 l     F .text	0000019c __sinit.part.1
00015aec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002b498 l     O .rwdata	00000020 lc_ctype_charset
0002b478 l     O .rwdata	00000020 lc_message_charset
0002b4b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002aa88 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002abac l     O .rodata	00000010 zeroes.4333
0002abbc l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00019aec l     F .text	000000fc __sprint_r.part.0
0002abcc l     O .rodata	00000010 zeroes.4349
0001b128 l     F .text	000000bc __sbprintf
0002abdc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001ef30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001f044 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001f0a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001f1b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001f2a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001f40c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001f4f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f6d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002de18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001f948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001fa2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fb68 l     F .text	00000034 alt_dev_reg
0002b698 l     O .rwdata	00000038 i2c_0
0002b6d0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001fc48 l     F .text	00000110 optional_irq_callback
0001fda8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021a84 l     F .text	0000020c altera_avalon_jtag_uart_irq
00021c90 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000224c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002285c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022d4c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022eac l     F .text	0000003c alt_get_errno
00022ee8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00031064 g     O .bss	00000004 alt_instruction_exception_handler
0000cb44 g     F .text	00000028 __cxa_free_exception
00023cd8  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ef9c g     F .text	00000018 putchar
0000b1a0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017b88 g     F .text	00000074 _mprec_log10
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b5ec g     F .text	00000018 _ZSt10unexpectedv
00017c74 g     F .text	0000008c __any_on
0001b834 g     F .text	00000054 _isatty_r
0002aa94 g     O .rodata	00000028 __mprec_tinytens
0001f610 g     F .text	0000007c alt_main
000068a0 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000efb4 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
000311c0 g     O .bss	00000100 alt_irq
0000cce0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000092cc g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001b888 g     F .text	00000060 _lseek_r
0000e130 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002de30 g       *ABS*	00000000 __flash_rwdata_start
00006240 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001d96c g     F .text	00000088 .hidden __eqdf2
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000024c8 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c770 g     F .text	00000084 __cxa_rethrow
0000e0bc g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b628 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006ae4 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000e120 g     F .text	00000010 .hidden _Unwind_GetIP
000312c0 g       *ABS*	00000000 __alt_heap_start
00008c0c  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000f380 g     F .text	0000005c _kill_r
00006e50 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000ef58 g     F .text	0000003c printf
00023cfc  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001b948 g     F .text	0000009c _wcrtomb_r
0000f148 g     F .text	00000084 _signal_r
00005fc8  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
00018518 g     F .text	0000005c __sseek
00015c9c g     F .text	00000010 __sinit
0001b1e4 g     F .text	00000140 __swbuf_r
00009940 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000cbc0 g     F .text	0000002c __cxa_free_dependent_exception
0000a4f4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00016770 g     F .text	0000007c _setlocale_r
0002a670  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00015af4 g     F .text	00000078 __sfmoreglue
000204a0 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f6b0 g     F .text	00000024 __malloc_unlock
000051b0 g     F .text	00000080 _Z8set_notehh
0000cce0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
0000855c g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000af28 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008cf4  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	0000030c _ZN3USB11ConfiguringEhhb
0000c964 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000cf2c g     F .text	00000440 .hidden __divsf3
000216b8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009d14 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b21c g     F .text	00000020 __cxa_deleted_virtual
00020224 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002938  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008db8 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009750 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00016aec g     F .text	0000015c memmove
00005ce4  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000ccb8 g     F .text	00000004 _ZNSt9exceptionD2Ev
00015c84 g     F .text	00000018 _cleanup
0000a1cc g     F .text	00000088 _Z7controlv
00020f08 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00016c48 g     F .text	000000a8 _Balloc
0000dd3c g     F .text	00000070 .hidden __fixsfsi
00003a3c g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001d9f4 g     F .text	000000dc .hidden __gtdf2
00003b00 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002a8a4  w    O .rodata	00000014 _ZTVSt13bad_exception
0002353c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001f984 g     F .text	00000078 times
00008c74  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000e16c g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002c74c  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
000084e0 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004908  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001b7d8 g     F .text	0000005c _fstat_r
0000941c g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0003103c g     O .bss	00000004 errno
00005a24 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00018494 g     F .text	00000008 __seofread
00008fc8 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0001874c g     F .text	000013a0 ___svfiprintf_internal_r
0000e348 g     F .text	00000074 .hidden _Unwind_Backtrace
00031050 g     O .bss	00000004 alt_argv
000030c8 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00034730 g       *ABS*	00000000 _gp
0001f9fc g     F .text	00000030 usleep
000216fc g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000d858 g     F .text	000004e4 .hidden __subsf3
00007e6c g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002cee8  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001f198 g     F .text	00000020 getpid
0000c46c g     F .text	00000230 __cxa_call_unexpected
0000c7f4 g     F .text	00000008 __cxa_get_exception_ptr
000203b4 g     F .text	00000044 alt_avalon_i2c_is_busy
0002b518 g     O .rwdata	00000180 alt_fd_list
00009178 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023c48  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006e50 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004214 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ef94 g     F .text	00000008 _putchar_r
0000e25c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00020158 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000e0ec g     F .text	00000018 .hidden _Unwind_GetCFA
0000b604 g     F .text	00000014 _ZSt13set_terminatePFvvE
000229fc g     F .text	00000090 alt_find_dev
00023c3c  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
000118d4 g     F .text	00000008 _times_r
0000ecb8 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005dac  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000cb6c g     F .text	00000054 __cxa_allocate_dependent_exception
00015944 g     F .text	0000000c _cleanup_r
0000b2b4 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001edac g     F .text	000000dc .hidden __floatsidf
00023cf0  w    O .rodata	0000000c _ZTV13USBReadParser
00022e30 g     F .text	0000007c alt_io_redirect
0001dad0 g     F .text	000000f4 .hidden __ltdf2
0000475c  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023b68 g       *ABS*	00000000 __DTOR_END__
0000b2cc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020d48 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000f074 g     F .text	00000014 puts
0002a6f8  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0002372c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007ef4 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
00009200 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
000183cc g     F .text	00000074 __fpclassifyd
00009e9c g     F .text	00000330 _Z9MIDI_pollv
00017ae4 g     F .text	000000a4 __ratio
0001b10c g     F .text	0000001c __vfiprintf_internal
00007970 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00021e88 g     F .text	0000021c altera_avalon_jtag_uart_read
0000e484 g     F .text	00000014 malloc
0000ef28 g     F .text	00000030 _printf_r
0000ce48 g     F .text	00000064 .hidden __udivsi3
0001f1f4 g     F .text	000000ac isatty
0000f1cc g     F .text	000000bc _raise_r
000093bc g     F .text	0000003c _ZN8MAX3421eC2Ev
0002aae4 g     O .rodata	000000c8 __mprec_tens
00006b50 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000167ec g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004714  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001ffc4 g     F .text	00000098 alt_avalon_i2c_enable
00031038 g     O .bss	00000004 __malloc_top_pad
0000f3dc g     F .text	00000004 _getpid_r
000215ec g     F .text	00000068 alt_avalon_i2c_int_disable
0003101c g     O .bss	00000001 usb_task_state
0002ddf8 g     O .rwdata	00000004 __mb_cur_max
0001681c g     F .text	0000000c _localeconv_r
0000a7b8 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003a6c g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00006fd0 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
0001707c g     F .text	0000003c __i2b
00016120 g     F .text	000004c8 __sfvwrite_r
0000b44c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000f288 g     F .text	000000a8 __sigtramp_r
00008228 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
000029f0  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000f088 g     F .text	00000054 _sbrk_r
0002a740  w    O .rodata	00000020 _ZTVSt9type_info
0000480c  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009060 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001b8e8 g     F .text	00000060 _read_r
0000ccc0 g     F .text	0000000c _ZNKSt9exception4whatEv
00005230 g     F .text	0000004c _Z8set_adsrhm
0002de10 g     O .rwdata	00000004 alt_max_fd
00006098 g     F .text	00000050 _Z9E_Notifycci
00008368 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001b4cc g     F .text	000000f0 _fclose_r
0001590c g     F .text	00000030 fflush
00009dac g     F .text	00000078 _Z6onInitv
00031034 g     O .bss	00000004 __malloc_max_sbrked_mem
000096c8 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
00021114 g     F .text	00000210 alt_avalon_i2c_master_receive
000262a8  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c6f0 g     F .text	000008ac .hidden __adddf3
0002a6a4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004838  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008ac0 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001788c g     F .text	0000010c __b2d
0001c12c g     F .text	000005c4 .hidden __umoddi3
0001f534 g     F .text	000000dc lseek
00005dd4  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b310 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000061f0 g     F .text	00000028 _Z8E_Notifyhi
0000b1f8 g     F .text	00000004 _ZdlPv
00021654 g     F .text	00000064 alt_avalon_i2c_int_enable
0002dde8 g     O .rwdata	00000004 _global_impure_ptr
0000a7c8 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00017e68 g     F .text	00000564 _realloc_r
000312c0 g       *ABS*	00000000 __bss_end
00022c5c g     F .text	000000f0 alt_iic_isr_register
00023434 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000e0a4 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001bb30 g     F .text	000005fc .hidden __udivdi3
00021514 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b734 g     F .text	00000024 _fputwc_r
0002aabc g     O .rodata	00000028 __mprec_bigtens
00016e60 g     F .text	00000104 __s2b
0000e420 g     F .text	00000018 abort
0001ee88 g     F .text	000000a8 .hidden __floatunsidf
0002606c  w    O .rodata	00000014 _ZTS17MouseReportParser
000175cc g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008d30  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000032ac g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c8b0 g     F .text	000000b4 __cxa_end_catch
000090f4 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015cbc g     F .text	00000018 __fp_lock_all
00023d34  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00022c10 g     F .text	0000004c alt_ic_irq_enabled
0000ccbc g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002cbc  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005d84  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00023398 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00026234  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001fe44 g     F .text	00000054 alt_avalon_i2c_register_callback
00031058 g     O .bss	00000004 alt_irq_active
0001fe98 g     F .text	000000ec alt_avalon_i2c_init
0000b5c4 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002b4f0 g     O .rwdata	00000028 alt_dev_null
0000a7fc g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00005ffc  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cce8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00002e68  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002790 g     F .text	00000084 _ZN3USB7setConfEhhh
00008c04 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002a79c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0002283c g     F .text	00000020 alt_dcache_flush_all
00016f64 g     F .text	00000068 __hi0bits
000262b4  w    O .rodata	0000000c _ZTI14MidiDescParser
00009918 g     F .text	00000028 _Z10Vbus_powerb
0002ddd0  w    O .rwdata	00000008 _ZTISt9exception
0001ed2c g     F .text	00000080 .hidden __fixdfsi
00026080  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a448  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002de30 g       *ABS*	00000000 __ram_rwdata_end
0000b19c g     F .text	00000004 _ZNSt9type_infoD1Ev
0002de08 g     O .rwdata	00000008 alt_dev_list
0000cce8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001fa68 g     F .text	00000100 write
00017d00 g     F .text	000000a0 _putc_r
00009d88 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
000207d4 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b1b0 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004930  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000d36c g     F .text	000000bc .hidden __gtsf2
000215b0 g     F .text	0000003c alt_avalon_i2c_int_clear
00008d8c  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00023c28  w    O .rodata	00000014 _ZTV11AddressPool
0002ac4c g       *ABS*	00000000 __ram_rodata_end
0001f0e0 g     F .text	000000b8 fstat
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001f2dc g     F .text	00000130 kill
00006074  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001dad0 g     F .text	000000f4 .hidden __ledf2
00023d5c  w    O .rodata	00000020 _ZTI7XBOXONE
0002de1c g     O .rwdata	00000008 alt_avalon_i2c_list
0000469c  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00025fc6 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00017344 g     F .text	00000140 __pow5mult
00004c84  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
00019c00 g     F .text	0000150c ___vfiprintf_internal_r
00031048 g     O .bss	00000004 __nlocale_changed
0000ceac g     F .text	00000058 .hidden __umodsi3
0000b1a8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004478  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009e24 g     F .text	00000078 _Z10MIDI_setupv
00002308 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b618 g     F .text	00000010 _ZSt13get_terminatev
000312c0 g       *ABS*	00000000 end
00023ce4  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
000095dc g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00005f94  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000e330 g     F .text	00000018 .hidden _Unwind_DeleteException
000219c4 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005d5c  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001ff84 g     F .text	00000040 alt_avalon_i2c_open
00025fdc g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b37c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a7b8 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002cedc g     O .rwdata	00000004 UsbDEBUGlvl
00023b60 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0002095c g     F .text	000000e8 alt_avalon_i2c_master_tx
0002253c g     F .text	0000007c alt_avalon_timer_sc_init
0000e3bc g     F .text	00000064 .hidden __clzsi2
0000b23c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000220a4 g     F .text	00000224 altera_avalon_jtag_uart_write
00015cac g     F .text	00000004 __sfp_lock_acquire
0002a82c  w    O .rodata	00000012 _ZTSSt13bad_exception
00016a08 g     F .text	000000e4 memchr
000118dc g     F .text	000022dc ___vfprintf_internal_r
0000f3e0 g     F .text	00000058 _sprintf_r
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00015e10 g     F .text	00000310 _free_r
00023130 g     F .text	0000022c alt_printf
000167f8 g     F .text	00000010 __locale_mb_cur_max
000239a8 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00031044 g     O .bss	00000004 __mlocale_changed
0001fd58 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002ddf0 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003a44 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0003105c g     O .bss	00000004 _alt_tick_rate
0002a730  w    O .rodata	0000000d _ZTSSt9type_info
00021324 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b1fc g     F .text	00000020 __cxa_pure_virtual
00023c14  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00023d9c  w    O .rodata	00000010 _ZTS13USBReadParser
00021748 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00017484 g     F .text	00000148 __lshift
000222c8 g     F .text	000001fc alt_avalon_spi_command
00031060 g     O .bss	00000004 _alt_nticks
0000f344 g     F .text	00000018 signal
0001f710 g     F .text	00000104 read
0000554c g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001fbd4 g     F .text	00000074 alt_sys_init
00023c98  w    O .rodata	00000040 _ZTV7XBOXONE
0001857c g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00023890 g     F .text	00000118 __register_exitproc
000026fc g     F .text	00000094 _ZN3USB7setAddrEhhh
000060e8 g     F .text	00000084 _Z8E_NotifyPKci
00026270  w    O .rodata	0000000c _ZTV14MidiDescParser
00008c9c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00002efc  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a538 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00005f60  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
000048c8  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00020b80 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000170b8 g     F .text	0000028c __multiply
00002654 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002ceca g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00021d30 g     F .text	00000068 altera_avalon_jtag_uart_close
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000cf04 g     F .text	00000028 .hidden __mulsi3
0002ac4c g       *ABS*	00000000 __ram_rwdata_start
0000e18c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023b68 g       *ABS*	00000000 __ram_rodata_start
00031198 g     O .bss	00000028 __malloc_current_mallinfo
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000e2a0 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00017998 g     F .text	0000014c __d2b
0002a8cc  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000b19c g     F .text	00000004 _ZNSt9type_infoD2Ev
00008c4c  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004534  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002c738  w    O .rwdata	00000008 _ZTI11AddressPool
0000ccec g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a734 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000262c0  w    O .rodata	00000011 _ZTS14MidiDescParser
0002a6d0  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00021860 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023668 g     F .text	000000c4 alt_get_fd
00005768 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
000226e4 g     F .text	00000158 alt_busy_sleep
00006640 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002dde0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001b39c g     F .text	00000054 _close_r
00023814 g     F .text	0000007c memcmp
000203f8 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00021920 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007a44 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000312c0 g       *ABS*	00000000 __alt_stack_base
00021970 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000527c g     F .text	000002d0 _Z9calc_adsrtttf
0000a4f4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007cac g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004174 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00013c90 g     F .text	00000154 __swsetup_r
0000e2e4 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031020 g     O .bss	00000004 i2c_dev
0001cf9c g     F .text	000009d0 .hidden __divdf3
0000a498  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015b6c g     F .text	00000118 __sfp
00017bfc g     F .text	00000078 __copybits
0000b1a0 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002b070 g     O .rwdata	00000408 __malloc_av_
000044f8  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015cb8 g     F .text	00000004 __sinit_lock_release
0001dbc4 g     F .text	0000086c .hidden __muldf3
00018440 g     F .text	00000054 __sread
00004aec  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002a890  w    O .rodata	00000014 _ZTVSt9exception
0000cce4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002838  w    F .text	00000034 _ZN11AddressPoolC2Ev
00023560 g     F .text	00000108 alt_find_file
000047e0  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00022898 g     F .text	000000a4 alt_dev_llist_insert
0001f68c g     F .text	00000024 __malloc_lock
0001f898 g     F .text	000000b0 sbrk
0000f618 g     F .text	000022bc ___svfprintf_internal_r
00020820 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00020788 g     F .text	0000004c alt_avalon_i2c_check_nack
0002a7cc  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c6e0 g     F .text	00000090 __cxa_throw
000158b0 g     F .text	0000005c _fflush_r
0000e150 g     F .text	00000010 .hidden _Unwind_SetIP
00006a4c g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001b3f0 g     F .text	000000dc _calloc_r
00023d88  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00006218 g     F .text	00000028 _Z8E_Notifydi
00007868 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00031014 g       *ABS*	00000000 __bss_start
0002c75c  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000ee00 g     F .text	00000128 memset
00008368 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00004d00  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a254 g     F .text	0000015c main
00009650 g     F .text	00000078 _ZN8MAX3421e5regRdEh
0000984c g     F .text	000000cc _ZN8MAX3421e5resetEv
00020754 g     F .text	00000034 alt_avalon_i2c_master_target_set
00031054 g     O .bss	00000004 alt_envp
00023dac  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031030 g     O .bss	00000004 __malloc_max_total_mem
000218c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0003101d g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001b324 g     F .text	00000018 __swbuf
0000cca0 g     F .text	0000000c __cxa_get_globals_fast
0002156c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006cfc g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
000093bc g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002814  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00018574 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001b5bc g     F .text	00000014 fclose
0000a4c0  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004048 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
0000616c g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
0001400c g     F .text	00001688 _dtoa_r
0000e4ac g     F .text	0000080c _malloc_r
0001baa4 g     F .text	00000030 __ascii_wctomb
0000cccc g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002de14 g     O .rwdata	00000004 alt_errno
00026060  w    O .rodata	0000000c _ZTI17MouseReportParser
0000f35c g     F .text	00000010 _init_signal
0000255c g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
000067f8 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002a7c0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000042b8 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
000165e8 g     F .text	000000c4 _fwalk
000093f8 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00002e00  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000ccbc g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00017da0 g     F .text	000000c8 putc
0000cd50 g     F .text	00000084 .hidden __divsi3
000262d4  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00015cec g     F .text	00000124 _malloc_trim_r
00023b68 g       *ABS*	00000000 __CTOR_END__
0000d428 g     F .text	00000430 .hidden __mulsf3
000046d8  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008d58  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026014  w    O .rodata	00000028 _ZTV17MouseReportParser
0000f4a4 g     F .text	000000dc strcmp
000030c8 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023b68 g       *ABS*	00000000 __flash_rodata_start
0002a8b8  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a470  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023b68 g       *ABS*	00000000 __DTOR_LIST__
0002627c  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001d96c g     F .text	00000088 .hidden __nedf2
0001fb9c g     F .text	00000038 alt_irq_init
0001f814 g     F .text	00000084 alt_release_fd
0000a504 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023d7c  w    O .rodata	00000009 _ZTS7XBOXONE
0000f438 g     F .text	0000006c sprintf
0002a8e0 g     O .rodata	00000100 .hidden __clz_tab
00031040 g     O .bss	00000004 _PathLocale
000237c8 g     F .text	00000014 atexit
0000d36c g     F .text	000000bc .hidden __gesf2
0001b33c g     F .text	00000060 _write_r
00002440 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
000029c4  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
00016828 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00025fe8  w    O .rodata	0000002c _ZTV20KeyboardReportParser
000097d0 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000e184 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002a704  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000cc48 g     F .text	00000058 __cxa_call_terminate
0002ddec g     O .rwdata	00000004 _impure_ptr
0002ddd8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023c64  w    O .rodata	0000000e _ZTS11AddressPool
0003104c g     O .bss	00000004 alt_argc
00003000  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00015694 g     F .text	0000021c __sflush_r
00008d58  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00002c50  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0002299c g     F .text	00000060 _do_dtors
00031124 g     O .bss	00000064 Midi
00016814 g     F .text	00000008 __locale_cjk_lang
0002071c g     F .text	00000038 alt_avalon_i2c_master_target_get
0002062c g     F .text	000000f0 alt_avalon_i2c_send_address
0000b63c g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002838  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
00017828 g     F .text	00000064 __ulp
0000e174 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00015cd4 g     F .text	00000018 __fp_unlock_all
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004138 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004780  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002de00 g     O .rwdata	00000008 alt_fs_list
0002a86c  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00026048  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004aec  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000e160 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000047ac  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c7fc g     F .text	000000b4 __cxa_begin_catch
00004330 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b2cc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b5dc g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005d34  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00016840 g     F .text	0000000c localeconv
00009b3c g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004958  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000ccdc g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000217f8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ddcc g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006dd0 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008e58 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022aac g     F .text	00000050 alt_ic_isr_register
0002005c g     F .text	0000004c alt_avalon_i2c_disable
0000cae4 g     F .text	00000060 __cxa_allocate_exception
0002a698  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002de30 g       *ABS*	00000000 _edata
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000312c0 g       *ABS*	00000000 _end
0000a924 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000be6c g     F .text	00000600 __gxx_personality_sj0
0001b5d0 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00021d98 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002c754  w    O .rwdata	00000008 _ZTI13USBReadParser
000200a8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000ccb8 g     F .text	00000004 _ZNSt9exceptionD1Ev
00022b84 g     F .text	0000008c alt_ic_irq_disable
00005cbc  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
0001849c g     F .text	0000007c __swrite
0002ddf4 g     O .rwdata	00000004 __malloc_trim_threshold
00016808 g     F .text	0000000c __locale_msgcharset
000237dc g     F .text	00000038 exit
0000e104 g     F .text	0000001c .hidden _Unwind_SetGR
00005d0c  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
000166ac g     F .text	000000c4 _fwalk_reent
0000a698 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000ddac g     F .text	000000f0 .hidden __floatunsisf
0001762c g     F .text	000001fc __mdiff
0000b504 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cdd4 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00015cb0 g     F .text	00000004 __sfp_lock_release
0002a840  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00006024  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003bf8 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
000202b8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009a24 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
00020548 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00026288  w    O .rodata	00000020 _ZTI9USBH_MIDI
00003fc0 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000ccf0 g     F .text	00000060 .hidden __fixunssfsi
000077f0 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001f070 g     F .text	00000034 _exit
000225b8 g     F .text	0000012c alt_alarm_start
0002603c  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007e08 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000e0d0 g     F .text	0000001c .hidden _Unwind_GetGR
0000ccac g     F .text	0000000c __cxa_get_globals
00006348 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
0001684c g     F .text	000001bc __smakebuf_r
0002ddc8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004738  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000f580 g     F .text	00000098 strlen
0000f0dc g     F .text	0000006c _init_signal_r
0002ddc0  w    O .rwdata	00000008 _ZTISt9type_info
00022fd4 g     F .text	0000015c open
0001d9f4 g     F .text	000000dc .hidden __gedf2
0002335c g     F .text	0000003c alt_putchar
0002a81c  w    O .rodata	0000000d _ZTSSt9exception
0000e438 g     F .text	0000004c clock
0000604c  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009cb0 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00025fd0 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
000094a8 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002ddfc g     O .rwdata	00000004 __wctomb
0000ccd8 g     F .text	00000004 _ZNSt9exceptionD0Ev
00019be8 g     F .text	00000018 __sprint_r
00022a8c g     F .text	00000020 alt_icache_flush_all
0000e17c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00031068 g     O .bss	000000bc Usb
0002de24 g     O .rwdata	00000004 alt_priority_mask
000044f8  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00022afc g     F .text	00000088 alt_ic_irq_enable
00013bb8 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001bad4 g     F .text	0000005c _wctomb_r
0001e430 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003900 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016fcc g     F .text	000000b0 __lo0bits
0002de28 g     O .rwdata	00000008 alt_alarm_list
0002293c g     F .text	00000060 _do_ctors
00023d28  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f36c g     F .text	00000014 __sigtramp
00008f10 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001b9e4 g     F .text	000000c0 wcrtomb
0001ef6c g     F .text	000000d8 close
000217ac g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002a84c  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001f474 g     F .text	00000084 alt_load
00020a44 g     F .text	0000013c alt_avalon_i2c_master_rx
0000b1b4 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0000459c  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b758 g     F .text	00000080 fputwc
0000f330 g     F .text	00000014 raise
0002ced0  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000e498 g     F .text	00000014 free
00015cb4 g     F .text	00000004 __sinit_lock_acquire
00016d18 g     F .text	00000148 __multadd
0000b2dc g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00016cf0 g     F .text	00000028 _Bfree
0000659c g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10847004 	addi	r2,r2,4544
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10847004 	addi	r2,r2,4544
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b24d17 	ldw	r2,-14028(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b24d17 	ldw	r2,-14028(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d691cc14 	ori	gp,gp,18224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10840514 	ori	r2,r2,4116

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c4b014 	ori	r3,r3,4800

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001f4740 	call	1f474 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001f6100 	call	1f610 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210eda04 	addi	r4,r4,15208
     28c:	000f0740 	call	f074 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210edd04 	addi	r4,r4,15220
     2d0:	000f0740 	call	f074 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210ee204 	addi	r4,r4,15240
     304:	000f0740 	call	f074 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210ee504 	addi	r4,r4,15252
     340:	000f0740 	call	f074 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210ee904 	addi	r4,r4,15268
     374:	000f0740 	call	f074 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210eed04 	addi	r4,r4,15284
     3b0:	000f0740 	call	f074 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210ef004 	addi	r4,r4,15296
     3ec:	000f0740 	call	f074 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210ef304 	addi	r4,r4,15308
     428:	000f0740 	call	f074 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210ef604 	addi	r4,r4,15320
     464:	000f0740 	call	f074 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210ef904 	addi	r4,r4,15332
     4a0:	000f0740 	call	f074 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210efd04 	addi	r4,r4,15348
     4dc:	000f0740 	call	f074 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210f0104 	addi	r4,r4,15364
     510:	000f0740 	call	f074 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000cf040 	call	cf04 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000ce480 	call	ce48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000ce480 	call	ce48 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000ce480 	call	ce48 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000cf040 	call	cf04 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000ce480 	call	ce48 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000ce480 	call	ce48 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000cf040 	call	cf04 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000ce480 	call	ce48 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000cf040 	call	cf04 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000cf040 	call	cf04 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000ce480 	call	ce48 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000cf040 	call	cf04 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000e4380 	call	e438 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000e4380 	call	e438 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000e4380 	call	e438 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00093bc0 	call	93bc <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	000286c0 	call	286c <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23945 	stb	r2,-14107(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23943 	ldbu	r2,-14107(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23945 	stb	r2,-14107(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00094a80 	call	94a8 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00096c80 	call	96c8 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00094a80 	call	94a8 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009cb00 	call	9cb0 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00093f80 	call	93f8 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23943 	ldbu	r2,-14107(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23943 	ldbu	r2,-14107(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23a15 	stw	r2,-14104(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23945 	stb	r2,-14107(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23943 	ldbu	r2,-14107(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23a17 	ldw	r2,-14104(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23945 	stb	r2,-14107(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23945 	stb	r2,-14107(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23945 	stb	r2,-14107(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23a15 	stw	r2,-14104(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23a17 	ldw	r2,-14104(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23945 	stb	r2,-14107(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b23905 	stb	r2,-14108(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b23945 	stb	r2,-14107(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	00029f00 	call	29f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	0002c500 	call	2c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff005 	stb	zero,-64(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00009106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff005 	stb	r2,-64(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff003 	ldbu	r2,-64(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff003 	ldbu	r2,-64(fp)
    222c:	00003106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)

        devConfig[0]->GetAddress();
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	10801e17 	ldw	r2,120(r2)
    2280:	10800017 	ldw	r2,0(r2)
    2284:	10800404 	addi	r2,r2,16
    2288:	10800017 	ldw	r2,0(r2)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	18c01e17 	ldw	r3,120(r3)
    2294:	1809883a 	mov	r4,r3
    2298:	103ee83a 	callr	r2
        devConfig[0]->DEVSUBCLASSOK(subklass);
    229c:	e0bffc17 	ldw	r2,-16(fp)
    22a0:	10801e17 	ldw	r2,120(r2)
    22a4:	10800017 	ldw	r2,0(r2)
    22a8:	10800804 	addi	r2,r2,32
    22ac:	10800017 	ldw	r2,0(r2)
    22b0:	e0fffc17 	ldw	r3,-16(fp)
    22b4:	18c01e17 	ldw	r3,120(r3)
    22b8:	e13ff643 	ldbu	r4,-39(fp)
    22bc:	200b883a 	mov	r5,r4
    22c0:	1809883a 	mov	r4,r3
    22c4:	103ee83a 	callr	r2
        rcode = AttemptConfig(0, parent, port, lowspeed);
    22c8:	e0fffd03 	ldbu	r3,-12(fp)
    22cc:	e13ffe03 	ldbu	r4,-8(fp)
    22d0:	e0bfff03 	ldbu	r2,-4(fp)
    22d4:	d8800015 	stw	r2,0(sp)
    22d8:	200f883a 	mov	r7,r4
    22dc:	180d883a 	mov	r6,r3
    22e0:	000b883a 	mov	r5,zero
    22e4:	e13ffc17 	ldw	r4,-16(fp)
    22e8:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    22ec:	e0bff005 	stb	r2,-64(fp)
        return rcode;
    22f0:	e0bff003 	ldbu	r2,-64(fp)
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);

        return rcode;
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    2308:	defffb04 	addi	sp,sp,-20
    230c:	dfc00415 	stw	ra,16(sp)
    2310:	df000315 	stw	fp,12(sp)
    2314:	df000304 	addi	fp,sp,12
    2318:	e13ffe15 	stw	r4,-8(fp)
    231c:	2805883a 	mov	r2,r5
    2320:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2324:	e0bfff03 	ldbu	r2,-4(fp)
    2328:	1000021e 	bne	r2,zero,2334 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    232c:	0005883a 	mov	r2,zero
    2330:	00003e06 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2334:	e03ffd05 	stb	zero,-12(fp)
    2338:	e0bffd03 	ldbu	r2,-12(fp)
    233c:	10800428 	cmpgeui	r2,r2,16
    2340:	1000391e 	bne	r2,zero,2428 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2344:	e0bffd03 	ldbu	r2,-12(fp)
    2348:	e0fffe17 	ldw	r3,-8(fp)
    234c:	10800784 	addi	r2,r2,30
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	1885883a 	add	r2,r3,r2
    235c:	10800017 	ldw	r2,0(r2)
    2360:	10002c26 	beq	r2,zero,2414 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2364:	e0bffd03 	ldbu	r2,-12(fp)
    2368:	e0fffe17 	ldw	r3,-8(fp)
    236c:	10800784 	addi	r2,r2,30
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1885883a 	add	r2,r3,r2
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800017 	ldw	r2,0(r2)
    2384:	10800404 	addi	r2,r2,16
    2388:	10c00017 	ldw	r3,0(r2)
    238c:	e0bffd03 	ldbu	r2,-12(fp)
    2390:	e13ffe17 	ldw	r4,-8(fp)
    2394:	10800784 	addi	r2,r2,30
    2398:	1085883a 	add	r2,r2,r2
    239c:	1085883a 	add	r2,r2,r2
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	10800017 	ldw	r2,0(r2)
    23a8:	1009883a 	mov	r4,r2
    23ac:	183ee83a 	callr	r3
    23b0:	10c03fcc 	andi	r3,r2,255
    23b4:	e0bfff03 	ldbu	r2,-4(fp)
    23b8:	1885003a 	cmpeq	r2,r3,r2
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	10001526 	beq	r2,zero,2418 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    23c4:	e0bffd03 	ldbu	r2,-12(fp)
    23c8:	e0fffe17 	ldw	r3,-8(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800204 	addi	r2,r2,8
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bffd03 	ldbu	r2,-12(fp)
    23f0:	e13ffe17 	ldw	r4,-8(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	1009883a 	mov	r4,r2
    240c:	183ee83a 	callr	r3
    2410:	00000606 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2414:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2418:	e0bffd03 	ldbu	r2,-12(fp)
    241c:	10800044 	addi	r2,r2,1
    2420:	e0bffd05 	stb	r2,-12(fp)
    2424:	003fc406 	br	2338 <__alt_data_end+0xfc002338>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2428:	0005883a 	mov	r2,zero
        printf("END\n");
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2440:	defff204 	addi	sp,sp,-56
    2444:	dfc00d15 	stw	ra,52(sp)
    2448:	df000c15 	stw	fp,48(sp)
    244c:	df000c04 	addi	fp,sp,48
    2450:	e13ffc15 	stw	r4,-16(fp)
    2454:	2809883a 	mov	r4,r5
    2458:	3007883a 	mov	r3,r6
    245c:	3805883a 	mov	r2,r7
    2460:	e13ffd05 	stb	r4,-12(fp)
    2464:	e0fffe05 	stb	r3,-8(fp)
    2468:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    246c:	e17ffd03 	ldbu	r5,-12(fp)
    2470:	e1bffe03 	ldbu	r6,-8(fp)
    2474:	e0bfff0b 	ldhu	r2,-4(fp)
    2478:	e0ffff0b 	ldhu	r3,-4(fp)
    247c:	d8000715 	stw	zero,28(sp)
    2480:	e1000217 	ldw	r4,8(fp)
    2484:	d9000615 	stw	r4,24(sp)
    2488:	d8c00515 	stw	r3,20(sp)
    248c:	d8800415 	stw	r2,16(sp)
    2490:	d8000315 	stw	zero,12(sp)
    2494:	00800044 	movi	r2,1
    2498:	d8800215 	stw	r2,8(sp)
    249c:	d8000115 	stw	zero,4(sp)
    24a0:	00800184 	movi	r2,6
    24a4:	d8800015 	stw	r2,0(sp)
    24a8:	01c02004 	movi	r7,128
    24ac:	e13ffc17 	ldw	r4,-16(fp)
    24b0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    24b4:	e037883a 	mov	sp,fp
    24b8:	dfc00117 	ldw	ra,4(sp)
    24bc:	df000017 	ldw	fp,0(sp)
    24c0:	dec00204 	addi	sp,sp,8
    24c4:	f800283a 	ret

000024c8 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    24c8:	defff104 	addi	sp,sp,-60
    24cc:	dfc00e15 	stw	ra,56(sp)
    24d0:	df000d15 	stw	fp,52(sp)
    24d4:	df000d04 	addi	fp,sp,52
    24d8:	e13ffb15 	stw	r4,-20(fp)
    24dc:	3009883a 	mov	r4,r6
    24e0:	3807883a 	mov	r3,r7
    24e4:	e0800217 	ldw	r2,8(fp)
    24e8:	e17ffc05 	stb	r5,-16(fp)
    24ec:	e13ffd05 	stb	r4,-12(fp)
    24f0:	e0fffe0d 	sth	r3,-8(fp)
    24f4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    24f8:	e23ffc03 	ldbu	r8,-16(fp)
    24fc:	e1bffd03 	ldbu	r6,-12(fp)
    2500:	e0bfff03 	ldbu	r2,-4(fp)
    2504:	e0fffe0b 	ldhu	r3,-8(fp)
    2508:	e13ffe0b 	ldhu	r4,-8(fp)
    250c:	d8000715 	stw	zero,28(sp)
    2510:	e1400317 	ldw	r5,12(fp)
    2514:	d9400615 	stw	r5,24(sp)
    2518:	d9000515 	stw	r4,20(sp)
    251c:	d8c00415 	stw	r3,16(sp)
    2520:	d8000315 	stw	zero,12(sp)
    2524:	00c00084 	movi	r3,2
    2528:	d8c00215 	stw	r3,8(sp)
    252c:	d8800115 	stw	r2,4(sp)
    2530:	00800184 	movi	r2,6
    2534:	d8800015 	stw	r2,0(sp)
    2538:	01c02004 	movi	r7,128
    253c:	400b883a 	mov	r5,r8
    2540:	e13ffb17 	ldw	r4,-20(fp)
    2544:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    255c:	deffdf04 	addi	sp,sp,-132
    2560:	dfc02015 	stw	ra,128(sp)
    2564:	df001f15 	stw	fp,124(sp)
    2568:	df001f04 	addi	fp,sp,124
    256c:	e13ffc15 	stw	r4,-16(fp)
    2570:	2809883a 	mov	r4,r5
    2574:	3007883a 	mov	r3,r6
    2578:	3805883a 	mov	r2,r7
    257c:	e13ffd05 	stb	r4,-12(fp)
    2580:	e0fffe05 	stb	r3,-8(fp)
    2584:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2588:	00801004 	movi	r2,64
    258c:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2590:	e0bfec04 	addi	r2,fp,-80
    2594:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2598:	e13ffd03 	ldbu	r4,-12(fp)
    259c:	e17ffe03 	ldbu	r5,-8(fp)
    25a0:	e0bfff03 	ldbu	r2,-4(fp)
    25a4:	e0ffec04 	addi	r3,fp,-80
    25a8:	d8c00115 	stw	r3,4(sp)
    25ac:	d8800015 	stw	r2,0(sp)
    25b0:	01c00244 	movi	r7,9
    25b4:	280d883a 	mov	r6,r5
    25b8:	200b883a 	mov	r5,r4
    25bc:	e13ffc17 	ldw	r4,-16(fp)
    25c0:	00024c80 	call	24c8 <_ZN3USB12getConfDescrEhhthPh>
    25c4:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    25c8:	e0bfeb03 	ldbu	r2,-84(fp)
    25cc:	10000226 	beq	r2,zero,25d8 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    25d0:	e0bfeb03 	ldbu	r2,-84(fp)
    25d4:	00001a06 	br	2640 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    25d8:	e0bfea17 	ldw	r2,-88(fp)
    25dc:	10c00083 	ldbu	r3,2(r2)
    25e0:	108000c3 	ldbu	r2,3(r2)
    25e4:	1004923a 	slli	r2,r2,8
    25e8:	10c4b03a 	or	r2,r2,r3
    25ec:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    25f0:	e17ffd03 	ldbu	r5,-12(fp)
    25f4:	e1bffe03 	ldbu	r6,-8(fp)
    25f8:	e0bfff03 	ldbu	r2,-4(fp)
    25fc:	e0ffeb8b 	ldhu	r3,-82(fp)
    2600:	e1000217 	ldw	r4,8(fp)
    2604:	d9000715 	stw	r4,28(sp)
    2608:	e13fec04 	addi	r4,fp,-80
    260c:	d9000615 	stw	r4,24(sp)
    2610:	01001004 	movi	r4,64
    2614:	d9000515 	stw	r4,20(sp)
    2618:	d8c00415 	stw	r3,16(sp)
    261c:	d8000315 	stw	zero,12(sp)
    2620:	00c00084 	movi	r3,2
    2624:	d8c00215 	stw	r3,8(sp)
    2628:	d8800115 	stw	r2,4(sp)
    262c:	00800184 	movi	r2,6
    2630:	d8800015 	stw	r2,0(sp)
    2634:	01c02004 	movi	r7,128
    2638:	e13ffc17 	ldw	r4,-16(fp)
    263c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2640:	e037883a 	mov	sp,fp
    2644:	dfc00117 	ldw	ra,4(sp)
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00204 	addi	sp,sp,8
    2650:	f800283a 	ret

00002654 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2654:	defff004 	addi	sp,sp,-64
    2658:	dfc00f15 	stw	ra,60(sp)
    265c:	df000e15 	stw	fp,56(sp)
    2660:	df000e04 	addi	fp,sp,56
    2664:	e13ffa15 	stw	r4,-24(fp)
    2668:	2811883a 	mov	r8,r5
    266c:	300b883a 	mov	r5,r6
    2670:	3809883a 	mov	r4,r7
    2674:	e0c00217 	ldw	r3,8(fp)
    2678:	e0800317 	ldw	r2,12(fp)
    267c:	e23ffb05 	stb	r8,-20(fp)
    2680:	e17ffc05 	stb	r5,-16(fp)
    2684:	e13ffd0d 	sth	r4,-12(fp)
    2688:	e0fffe05 	stb	r3,-8(fp)
    268c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2690:	e23ffb03 	ldbu	r8,-20(fp)
    2694:	e27ffc03 	ldbu	r9,-16(fp)
    2698:	e0bffe03 	ldbu	r2,-8(fp)
    269c:	e0ffff0b 	ldhu	r3,-4(fp)
    26a0:	e13ffd0b 	ldhu	r4,-12(fp)
    26a4:	e17ffd0b 	ldhu	r5,-12(fp)
    26a8:	d8000715 	stw	zero,28(sp)
    26ac:	e1800417 	ldw	r6,16(fp)
    26b0:	d9800615 	stw	r6,24(sp)
    26b4:	d9400515 	stw	r5,20(sp)
    26b8:	d9000415 	stw	r4,16(sp)
    26bc:	d8c00315 	stw	r3,12(sp)
    26c0:	00c000c4 	movi	r3,3
    26c4:	d8c00215 	stw	r3,8(sp)
    26c8:	d8800115 	stw	r2,4(sp)
    26cc:	00800184 	movi	r2,6
    26d0:	d8800015 	stw	r2,0(sp)
    26d4:	01c02004 	movi	r7,128
    26d8:	480d883a 	mov	r6,r9
    26dc:	400b883a 	mov	r5,r8
    26e0:	e13ffa17 	ldw	r4,-24(fp)
    26e4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    26e8:	e037883a 	mov	sp,fp
    26ec:	dfc00117 	ldw	ra,4(sp)
    26f0:	df000017 	ldw	fp,0(sp)
    26f4:	dec00204 	addi	sp,sp,8
    26f8:	f800283a 	ret

000026fc <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    26fc:	defff104 	addi	sp,sp,-60
    2700:	dfc00e15 	stw	ra,56(sp)
    2704:	df000d15 	stw	fp,52(sp)
    2708:	df000d04 	addi	fp,sp,52
    270c:	e13ffc15 	stw	r4,-16(fp)
    2710:	2809883a 	mov	r4,r5
    2714:	3007883a 	mov	r3,r6
    2718:	3805883a 	mov	r2,r7
    271c:	e13ffd05 	stb	r4,-12(fp)
    2720:	e0fffe05 	stb	r3,-8(fp)
    2724:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2728:	e0fffd03 	ldbu	r3,-12(fp)
    272c:	e13ffe03 	ldbu	r4,-8(fp)
    2730:	e0bfff03 	ldbu	r2,-4(fp)
    2734:	d8000715 	stw	zero,28(sp)
    2738:	d8000615 	stw	zero,24(sp)
    273c:	d8000515 	stw	zero,20(sp)
    2740:	d8000415 	stw	zero,16(sp)
    2744:	d8000315 	stw	zero,12(sp)
    2748:	d8000215 	stw	zero,8(sp)
    274c:	d8800115 	stw	r2,4(sp)
    2750:	00800144 	movi	r2,5
    2754:	d8800015 	stw	r2,0(sp)
    2758:	000f883a 	mov	r7,zero
    275c:	200d883a 	mov	r6,r4
    2760:	180b883a 	mov	r5,r3
    2764:	e13ffc17 	ldw	r4,-16(fp)
    2768:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    276c:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2770:	01004b04 	movi	r4,300
    2774:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2778:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2790:	defff204 	addi	sp,sp,-56
    2794:	dfc00d15 	stw	ra,52(sp)
    2798:	df000c15 	stw	fp,48(sp)
    279c:	df000c04 	addi	fp,sp,48
    27a0:	e13ffc15 	stw	r4,-16(fp)
    27a4:	2809883a 	mov	r4,r5
    27a8:	3007883a 	mov	r3,r6
    27ac:	3805883a 	mov	r2,r7
    27b0:	e13ffd05 	stb	r4,-12(fp)
    27b4:	e0fffe05 	stb	r3,-8(fp)
    27b8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    27bc:	e0fffd03 	ldbu	r3,-12(fp)
    27c0:	e13ffe03 	ldbu	r4,-8(fp)
    27c4:	e0bfff03 	ldbu	r2,-4(fp)
    27c8:	d8000715 	stw	zero,28(sp)
    27cc:	d8000615 	stw	zero,24(sp)
    27d0:	d8000515 	stw	zero,20(sp)
    27d4:	d8000415 	stw	zero,16(sp)
    27d8:	d8000315 	stw	zero,12(sp)
    27dc:	d8000215 	stw	zero,8(sp)
    27e0:	d8800115 	stw	r2,4(sp)
    27e4:	00800244 	movi	r2,9
    27e8:	d8800015 	stw	r2,0(sp)
    27ec:	000f883a 	mov	r7,zero
    27f0:	200d883a 	mov	r6,r4
    27f4:	180b883a 	mov	r5,r3
    27f8:	e13ffc17 	ldw	r4,-16(fp)
    27fc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2800:	e037883a 	mov	sp,fp
    2804:	dfc00117 	ldw	ra,4(sp)
    2808:	df000017 	ldw	fp,0(sp)
    280c:	dec00204 	addi	sp,sp,8
    2810:	f800283a 	ret

00002814 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2814:	defffe04 	addi	sp,sp,-8
    2818:	df000115 	stw	fp,4(sp)
    281c:	df000104 	addi	fp,sp,4
    2820:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2824:	e0bfff17 	ldw	r2,-4(fp)
        };
    2828:	e037883a 	mov	sp,fp
    282c:	df000017 	ldw	fp,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2838:	defffe04 	addi	sp,sp,-8
    283c:	df000115 	stw	fp,4(sp)
    2840:	df000104 	addi	fp,sp,4
    2844:	e13fff15 	stw	r4,-4(fp)
    2848:	008000b4 	movhi	r2,2
    284c:	108f0c04 	addi	r2,r2,15408
    2850:	e0ffff17 	ldw	r3,-4(fp)
    2854:	18800015 	stw	r2,0(r3)
    2858:	0001883a 	nop
    285c:	e037883a 	mov	sp,fp
    2860:	df000017 	ldw	fp,0(sp)
    2864:	dec00104 	addi	sp,sp,4
    2868:	f800283a 	ret

0000286c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dfc00215 	stw	ra,8(sp)
    2874:	df000115 	stw	fp,4(sp)
    2878:	df000104 	addi	fp,sp,4
    287c:	e13fff15 	stw	r4,-4(fp)
    2880:	e0bfff17 	ldw	r2,-4(fp)
    2884:	1009883a 	mov	r4,r2
    2888:	00028380 	call	2838 <_ZN11AddressPoolC1Ev>
    288c:	008000b4 	movhi	r2,2
    2890:	108f0704 	addi	r2,r2,15388
    2894:	e0ffff17 	ldw	r3,-4(fp)
    2898:	18800015 	stw	r2,0(r3)
    289c:	e0bfff17 	ldw	r2,-4(fp)
    28a0:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    28a4:	000b883a 	mov	r5,zero
    28a8:	e13fff17 	ldw	r4,-4(fp)
    28ac:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    28b0:	e0bfff17 	ldw	r2,-4(fp)
    28b4:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00104 	addi	r3,r2,4
    28c0:	e0bfff17 	ldw	r2,-4(fp)
    28c4:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    28c8:	e0bfff17 	ldw	r2,-4(fp)
    28cc:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    28d0:	e0bfff17 	ldw	r2,-4(fp)
    28d4:	00c00204 	movi	r3,8
    28d8:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	11000183 	ldbu	r4,6(r2)
    28e4:	00ffff84 	movi	r3,-2
    28e8:	20c6703a 	and	r3,r4,r3
    28ec:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    28f0:	e0bfff17 	ldw	r2,-4(fp)
    28f4:	11000183 	ldbu	r4,6(r2)
    28f8:	00ffff44 	movi	r3,-3
    28fc:	20c6703a 	and	r3,r4,r3
    2900:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2904:	e0bfff17 	ldw	r2,-4(fp)
    2908:	10c00183 	ldbu	r3,6(r2)
    290c:	18c000cc 	andi	r3,r3,3
    2910:	18c00f14 	ori	r3,r3,60
    2914:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2918:	e13fff17 	ldw	r4,-4(fp)
    291c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2920:	0001883a 	nop
    2924:	e037883a 	mov	sp,fp
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	df000017 	ldw	fp,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret

00002938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2938:	defffa04 	addi	sp,sp,-24
    293c:	dfc00515 	stw	ra,20(sp)
    2940:	df000415 	stw	fp,16(sp)
    2944:	dc000315 	stw	r16,12(sp)
    2948:	df000404 	addi	fp,sp,16
    294c:	e13ffd15 	stw	r4,-12(fp)
    2950:	2805883a 	mov	r2,r5
    2954:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2958:	e0bffe03 	ldbu	r2,-8(fp)
    295c:	1000031e 	bne	r2,zero,296c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800204 	addi	r2,r2,8
    2968:	00001006 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    296c:	e0bffe03 	ldbu	r2,-8(fp)
    2970:	100b883a 	mov	r5,r2
    2974:	e13ffd17 	ldw	r4,-12(fp)
    2978:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    297c:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2980:	e0bffc03 	ldbu	r2,-16(fp)
    2984:	10000826 	beq	r2,zero,29a8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	14000204 	addi	r16,r2,8
    2990:	e0bffc03 	ldbu	r2,-16(fp)
    2994:	014001c4 	movi	r5,7
    2998:	1009883a 	mov	r4,r2
    299c:	000cf040 	call	cf04 <__mulsi3>
    29a0:	8085883a 	add	r2,r16,r2
    29a4:	00000106 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    29a8:	0005883a 	mov	r2,zero
        };
    29ac:	e6ffff04 	addi	sp,fp,-4
    29b0:	dfc00217 	ldw	ra,8(sp)
    29b4:	df000117 	ldw	fp,4(sp)
    29b8:	dc000017 	ldw	r16,0(sp)
    29bc:	dec00304 	addi	sp,sp,12
    29c0:	f800283a 	ret

000029c4 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    29c4:	defffd04 	addi	sp,sp,-12
    29c8:	df000215 	stw	fp,8(sp)
    29cc:	df000204 	addi	fp,sp,8
    29d0:	2005883a 	mov	r2,r4
    29d4:	e17fff15 	stw	r5,-4(fp)
    29d8:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    29dc:	0001883a 	nop
    29e0:	e037883a 	mov	sp,fp
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00104 	addi	sp,sp,4
    29ec:	f800283a 	ret

000029f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    29f0:	defff804 	addi	sp,sp,-32
    29f4:	dfc00715 	stw	ra,28(sp)
    29f8:	df000615 	stw	fp,24(sp)
    29fc:	dc000515 	stw	r16,20(sp)
    2a00:	df000604 	addi	fp,sp,24
    2a04:	e13ffb15 	stw	r4,-20(fp)
    2a08:	2809883a 	mov	r4,r5
    2a0c:	3007883a 	mov	r3,r6
    2a10:	3805883a 	mov	r2,r7
    2a14:	e13ffc05 	stb	r4,-16(fp)
    2a18:	e0fffd05 	stb	r3,-12(fp)
    2a1c:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2a20:	e0bffc03 	ldbu	r2,-16(fp)
    2a24:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2a28:	e0fffa43 	ldbu	r3,-23(fp)
    2a2c:	00bfe004 	movi	r2,-128
    2a30:	1884703a 	and	r2,r3,r2
    2a34:	10803fcc 	andi	r2,r2,255
    2a38:	1000031e 	bne	r2,zero,2a48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2a3c:	e0bffe03 	ldbu	r2,-8(fp)
    2a40:	10800230 	cmpltui	r2,r2,8
    2a44:	1000021e 	bne	r2,zero,2a50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2a48:	0005883a 	mov	r2,zero
    2a4c:	00007a06 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2a50:	e0bffd03 	ldbu	r2,-12(fp)
    2a54:	10000726 	beq	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2a58:	e0bffb17 	ldw	r2,-20(fp)
    2a5c:	108001c3 	ldbu	r2,7(r2)
    2a60:	10803fcc 	andi	r2,r2,255
    2a64:	108001d8 	cmpnei	r2,r2,7
    2a68:	1000021e 	bne	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2a6c:	0005883a 	mov	r2,zero
    2a70:	00007106 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2a74:	000b883a 	mov	r5,zero
    2a78:	e13ffb17 	ldw	r4,-20(fp)
    2a7c:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2a80:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2a84:	e0bffa03 	ldbu	r2,-24(fp)
    2a88:	1000021e 	bne	r2,zero,2a94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2a8c:	0005883a 	mov	r2,zero
    2a90:	00006906 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2a94:	e0bffa43 	ldbu	r2,-23(fp)
    2a98:	10803fcc 	andi	r2,r2,255
    2a9c:	1000241e 	bne	r2,zero,2b30 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2aa0:	e0bffd03 	ldbu	r2,-12(fp)
    2aa4:	10001026 	beq	r2,zero,2ae8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2aa8:	e0bffa03 	ldbu	r2,-24(fp)
    2aac:	e43ffb17 	ldw	r16,-20(fp)
    2ab0:	014001c4 	movi	r5,7
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	000cf040 	call	cf04 <__mulsi3>
    2abc:	8085883a 	add	r2,r16,r2
    2ac0:	10800304 	addi	r2,r2,12
    2ac4:	00c01044 	movi	r3,65
    2ac8:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2acc:	e0bffb17 	ldw	r2,-20(fp)
    2ad0:	108001c3 	ldbu	r2,7(r2)
    2ad4:	10800044 	addi	r2,r2,1
    2ad8:	1007883a 	mov	r3,r2
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	10c001c5 	stb	r3,7(r2)
    2ae4:	00000906 	br	2b0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2ae8:	e0bffa03 	ldbu	r2,-24(fp)
    2aec:	e43ffb17 	ldw	r16,-20(fp)
    2af0:	014001c4 	movi	r5,7
    2af4:	1009883a 	mov	r4,r2
    2af8:	000cf040 	call	cf04 <__mulsi3>
    2afc:	8085883a 	add	r2,r16,r2
    2b00:	10800304 	addi	r2,r2,12
    2b04:	00c00044 	movi	r3,1
    2b08:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2b0c:	e0bffa03 	ldbu	r2,-24(fp)
    2b10:	e43ffb17 	ldw	r16,-20(fp)
    2b14:	014001c4 	movi	r5,7
    2b18:	1009883a 	mov	r4,r2
    2b1c:	000cf040 	call	cf04 <__mulsi3>
    2b20:	8085883a 	add	r2,r16,r2
    2b24:	10800304 	addi	r2,r2,12
    2b28:	10800003 	ldbu	r2,0(r2)
    2b2c:	00004206 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2b30:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2b34:	e0bffa43 	ldbu	r2,-23(fp)
    2b38:	108001cc 	andi	r2,r2,7
    2b3c:	108001cc 	andi	r2,r2,7
    2b40:	100890fa 	slli	r4,r2,3
    2b44:	e0fffa83 	ldbu	r3,-22(fp)
    2b48:	00bff1c4 	movi	r2,-57
    2b4c:	1884703a 	and	r2,r3,r2
    2b50:	1007883a 	mov	r3,r2
    2b54:	2005883a 	mov	r2,r4
    2b58:	1884b03a 	or	r2,r3,r2
    2b5c:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2b60:	e0bffd03 	ldbu	r2,-12(fp)
    2b64:	10001526 	beq	r2,zero,2bbc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2b68:	e0bffa83 	ldbu	r2,-22(fp)
    2b6c:	10801014 	ori	r2,r2,64
    2b70:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2b74:	e0bffb17 	ldw	r2,-20(fp)
    2b78:	108001c3 	ldbu	r2,7(r2)
    2b7c:	10800044 	addi	r2,r2,1
    2b80:	1007883a 	mov	r3,r2
    2b84:	e0bffb17 	ldw	r2,-20(fp)
    2b88:	10c001c5 	stb	r3,7(r2)
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	108001c3 	ldbu	r2,7(r2)
    2b94:	108001cc 	andi	r2,r2,7
    2b98:	110001cc 	andi	r4,r2,7
    2b9c:	e0fffa83 	ldbu	r3,-22(fp)
    2ba0:	00bffe04 	movi	r2,-8
    2ba4:	1884703a 	and	r2,r3,r2
    2ba8:	1007883a 	mov	r3,r2
    2bac:	2005883a 	mov	r2,r4
    2bb0:	1884b03a 	or	r2,r3,r2
    2bb4:	e0bffa85 	stb	r2,-22(fp)
    2bb8:	00000e06 	br	2bf4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2bbc:	e0fffa83 	ldbu	r3,-22(fp)
    2bc0:	00bfefc4 	movi	r2,-65
    2bc4:	1884703a 	and	r2,r3,r2
    2bc8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2bcc:	e0bffe03 	ldbu	r2,-8(fp)
    2bd0:	108001cc 	andi	r2,r2,7
    2bd4:	110001cc 	andi	r4,r2,7
    2bd8:	e0fffa83 	ldbu	r3,-22(fp)
    2bdc:	00bffe04 	movi	r2,-8
    2be0:	1884703a 	and	r2,r3,r2
    2be4:	1007883a 	mov	r3,r2
    2be8:	2005883a 	mov	r2,r4
    2bec:	1884b03a 	or	r2,r3,r2
    2bf0:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2bf4:	e0bffa03 	ldbu	r2,-24(fp)
    2bf8:	e43ffb17 	ldw	r16,-20(fp)
    2bfc:	014001c4 	movi	r5,7
    2c00:	1009883a 	mov	r4,r2
    2c04:	000cf040 	call	cf04 <__mulsi3>
    2c08:	8085883a 	add	r2,r16,r2
    2c0c:	10800304 	addi	r2,r2,12
    2c10:	e0fffa83 	ldbu	r3,-22(fp)
    2c14:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    2c18:	e0bffa03 	ldbu	r2,-24(fp)
    2c1c:	e43ffb17 	ldw	r16,-20(fp)
    2c20:	014001c4 	movi	r5,7
    2c24:	1009883a 	mov	r4,r2
    2c28:	000cf040 	call	cf04 <__mulsi3>
    2c2c:	8085883a 	add	r2,r16,r2
    2c30:	10800304 	addi	r2,r2,12
    2c34:	10800003 	ldbu	r2,0(r2)
        };
    2c38:	e6ffff04 	addi	sp,fp,-4
    2c3c:	dfc00217 	ldw	ra,8(sp)
    2c40:	df000117 	ldw	fp,4(sp)
    2c44:	dc000017 	ldw	r16,0(sp)
    2c48:	dec00304 	addi	sp,sp,12
    2c4c:	f800283a 	ret

00002c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    2c50:	defffb04 	addi	sp,sp,-20
    2c54:	dfc00415 	stw	ra,16(sp)
    2c58:	df000315 	stw	fp,12(sp)
    2c5c:	df000304 	addi	fp,sp,12
    2c60:	e13ffe15 	stw	r4,-8(fp)
    2c64:	2805883a 	mov	r2,r5
    2c68:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    2c6c:	e0bfff03 	ldbu	r2,-4(fp)
    2c70:	10801058 	cmpnei	r2,r2,65
    2c74:	1000031e 	bne	r2,zero,2c84 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    2c78:	e13ffe17 	ldw	r4,-8(fp)
    2c7c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    2c80:	00000906 	br	2ca8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    2c84:	e0bfff03 	ldbu	r2,-4(fp)
    2c88:	100b883a 	mov	r5,r2
    2c8c:	e13ffe17 	ldw	r4,-8(fp)
    2c90:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2c94:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    2c98:	e0bffd03 	ldbu	r2,-12(fp)
    2c9c:	100b883a 	mov	r5,r2
    2ca0:	e13ffe17 	ldw	r4,-8(fp)
    2ca4:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    2ca8:	e037883a 	mov	sp,fp
    2cac:	dfc00117 	ldw	ra,4(sp)
    2cb0:	df000017 	ldw	fp,0(sp)
    2cb4:	dec00204 	addi	sp,sp,8
    2cb8:	f800283a 	ret

00002cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    2cbc:	defffa04 	addi	sp,sp,-24
    2cc0:	dfc00515 	stw	ra,20(sp)
    2cc4:	df000415 	stw	fp,16(sp)
    2cc8:	dc400315 	stw	r17,12(sp)
    2ccc:	dc000215 	stw	r16,8(sp)
    2cd0:	df000404 	addi	fp,sp,16
    2cd4:	e13ffc15 	stw	r4,-16(fp)
    2cd8:	2805883a 	mov	r2,r5
    2cdc:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    2ce0:	e0bffd03 	ldbu	r2,-12(fp)
    2ce4:	e43ffc17 	ldw	r16,-16(fp)
    2ce8:	014001c4 	movi	r5,7
    2cec:	1009883a 	mov	r4,r2
    2cf0:	000cf040 	call	cf04 <__mulsi3>
    2cf4:	8085883a 	add	r2,r16,r2
    2cf8:	10800304 	addi	r2,r2,12
    2cfc:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    2d00:	e0bffd03 	ldbu	r2,-12(fp)
    2d04:	e43ffc17 	ldw	r16,-16(fp)
    2d08:	014001c4 	movi	r5,7
    2d0c:	1009883a 	mov	r4,r2
    2d10:	000cf040 	call	cf04 <__mulsi3>
    2d14:	8085883a 	add	r2,r16,r2
    2d18:	10800344 	addi	r2,r2,13
    2d1c:	00c00044 	movi	r3,1
    2d20:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    2d24:	e0bffd03 	ldbu	r2,-12(fp)
    2d28:	e43ffc17 	ldw	r16,-16(fp)
    2d2c:	014001c4 	movi	r5,7
    2d30:	1009883a 	mov	r4,r2
    2d34:	000cf040 	call	cf04 <__mulsi3>
    2d38:	8085883a 	add	r2,r16,r2
    2d3c:	10800384 	addi	r2,r2,14
    2d40:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    2d44:	e0fffd03 	ldbu	r3,-12(fp)
    2d48:	e0bffc17 	ldw	r2,-16(fp)
    2d4c:	14000104 	addi	r16,r2,4
    2d50:	e47ffc17 	ldw	r17,-16(fp)
    2d54:	014001c4 	movi	r5,7
    2d58:	1809883a 	mov	r4,r3
    2d5c:	000cf040 	call	cf04 <__mulsi3>
    2d60:	8885883a 	add	r2,r17,r2
    2d64:	10800204 	addi	r2,r2,8
    2d68:	81403fcc 	andi	r5,r16,255
    2d6c:	10c00003 	ldbu	r3,0(r2)
    2d70:	1806703a 	and	r3,r3,zero
    2d74:	1809883a 	mov	r4,r3
    2d78:	2807883a 	mov	r3,r5
    2d7c:	20c6b03a 	or	r3,r4,r3
    2d80:	10c00005 	stb	r3,0(r2)
    2d84:	8006d23a 	srli	r3,r16,8
    2d88:	19403fcc 	andi	r5,r3,255
    2d8c:	10c00043 	ldbu	r3,1(r2)
    2d90:	1806703a 	and	r3,r3,zero
    2d94:	1809883a 	mov	r4,r3
    2d98:	2807883a 	mov	r3,r5
    2d9c:	20c6b03a 	or	r3,r4,r3
    2da0:	10c00045 	stb	r3,1(r2)
    2da4:	8006d43a 	srli	r3,r16,16
    2da8:	19403fcc 	andi	r5,r3,255
    2dac:	10c00083 	ldbu	r3,2(r2)
    2db0:	1806703a 	and	r3,r3,zero
    2db4:	1809883a 	mov	r4,r3
    2db8:	2807883a 	mov	r3,r5
    2dbc:	20c6b03a 	or	r3,r4,r3
    2dc0:	10c00085 	stb	r3,2(r2)
    2dc4:	800ad63a 	srli	r5,r16,24
    2dc8:	10c000c3 	ldbu	r3,3(r2)
    2dcc:	1806703a 	and	r3,r3,zero
    2dd0:	1809883a 	mov	r4,r3
    2dd4:	2807883a 	mov	r3,r5
    2dd8:	20c6b03a 	or	r3,r4,r3
    2ddc:	10c000c5 	stb	r3,3(r2)
        };
    2de0:	0001883a 	nop
    2de4:	e6fffe04 	addi	sp,fp,-8
    2de8:	dfc00317 	ldw	ra,12(sp)
    2dec:	df000217 	ldw	fp,8(sp)
    2df0:	dc400117 	ldw	r17,4(sp)
    2df4:	dc000017 	ldw	r16,0(sp)
    2df8:	dec00404 	addi	sp,sp,16
    2dfc:	f800283a 	ret

00002e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    2e00:	defffc04 	addi	sp,sp,-16
    2e04:	dfc00315 	stw	ra,12(sp)
    2e08:	df000215 	stw	fp,8(sp)
    2e0c:	df000204 	addi	fp,sp,8
    2e10:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e14:	00800044 	movi	r2,1
    2e18:	e0bffe05 	stb	r2,-8(fp)
    2e1c:	e0bffe03 	ldbu	r2,-8(fp)
    2e20:	10800428 	cmpgeui	r2,r2,16
    2e24:	1000081e 	bne	r2,zero,2e48 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    2e28:	e0bffe03 	ldbu	r2,-8(fp)
    2e2c:	100b883a 	mov	r5,r2
    2e30:	e13fff17 	ldw	r4,-4(fp)
    2e34:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e38:	e0bffe03 	ldbu	r2,-8(fp)
    2e3c:	10800044 	addi	r2,r2,1
    2e40:	e0bffe05 	stb	r2,-8(fp)
    2e44:	003ff506 	br	2e1c <__alt_data_end+0xfc002e1c>
                        InitEntry(i);

                hubCounter = 0;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	100001c5 	stb	zero,7(r2)
        };
    2e50:	0001883a 	nop
    2e54:	e037883a 	mov	sp,fp
    2e58:	dfc00117 	ldw	ra,4(sp)
    2e5c:	df000017 	ldw	fp,0(sp)
    2e60:	dec00204 	addi	sp,sp,8
    2e64:	f800283a 	ret

00002e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    2e68:	defffa04 	addi	sp,sp,-24
    2e6c:	dfc00515 	stw	ra,20(sp)
    2e70:	df000415 	stw	fp,16(sp)
    2e74:	dc000315 	stw	r16,12(sp)
    2e78:	df000404 	addi	fp,sp,16
    2e7c:	e13ffd15 	stw	r4,-12(fp)
    2e80:	2805883a 	mov	r2,r5
    2e84:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2e88:	00800044 	movi	r2,1
    2e8c:	e0bffc05 	stb	r2,-16(fp)
    2e90:	e0bffc03 	ldbu	r2,-16(fp)
    2e94:	10800428 	cmpgeui	r2,r2,16
    2e98:	1000111e 	bne	r2,zero,2ee0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    2e9c:	e0bffc03 	ldbu	r2,-16(fp)
    2ea0:	e43ffd17 	ldw	r16,-12(fp)
    2ea4:	014001c4 	movi	r5,7
    2ea8:	1009883a 	mov	r4,r2
    2eac:	000cf040 	call	cf04 <__mulsi3>
    2eb0:	8085883a 	add	r2,r16,r2
    2eb4:	10800304 	addi	r2,r2,12
    2eb8:	10800003 	ldbu	r2,0(r2)
    2ebc:	10c03fcc 	andi	r3,r2,255
    2ec0:	e0bffe03 	ldbu	r2,-8(fp)
    2ec4:	1880021e 	bne	r3,r2,2ed0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    2ec8:	e0bffc03 	ldbu	r2,-16(fp)
    2ecc:	00000506 	br	2ee4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2ed0:	e0bffc03 	ldbu	r2,-16(fp)
    2ed4:	10800044 	addi	r2,r2,1
    2ed8:	e0bffc05 	stb	r2,-16(fp)
    2edc:	003fec06 	br	2e90 <__alt_data_end+0xfc002e90>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    2ee0:	0005883a 	mov	r2,zero
        };
    2ee4:	e6ffff04 	addi	sp,fp,-4
    2ee8:	dfc00217 	ldw	ra,8(sp)
    2eec:	df000117 	ldw	fp,4(sp)
    2ef0:	dc000017 	ldw	r16,0(sp)
    2ef4:	dec00304 	addi	sp,sp,12
    2ef8:	f800283a 	ret

00002efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    2efc:	defffa04 	addi	sp,sp,-24
    2f00:	dfc00515 	stw	ra,20(sp)
    2f04:	df000415 	stw	fp,16(sp)
    2f08:	dc000315 	stw	r16,12(sp)
    2f0c:	df000404 	addi	fp,sp,16
    2f10:	e13ffd15 	stw	r4,-12(fp)
    2f14:	2805883a 	mov	r2,r5
    2f18:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    2f1c:	e0bffe03 	ldbu	r2,-8(fp)
    2f20:	10003026 	beq	r2,zero,2fe4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    2f24:	e0bffe03 	ldbu	r2,-8(fp)
    2f28:	e43ffd17 	ldw	r16,-12(fp)
    2f2c:	014001c4 	movi	r5,7
    2f30:	1009883a 	mov	r4,r2
    2f34:	000cf040 	call	cf04 <__mulsi3>
    2f38:	8085883a 	add	r2,r16,r2
    2f3c:	10800304 	addi	r2,r2,12
    2f40:	10800003 	ldbu	r2,0(r2)
    2f44:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    2f48:	e0bffc43 	ldbu	r2,-15(fp)
    2f4c:	1080100c 	andi	r2,r2,64
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	10001e26 	beq	r2,zero,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f58:	00800044 	movi	r2,1
    2f5c:	e0bffc05 	stb	r2,-16(fp)
    2f60:	e0bffc03 	ldbu	r2,-16(fp)
    2f64:	100d883a 	mov	r6,r2
    2f68:	e17ffc43 	ldbu	r5,-15(fp)
    2f6c:	e13ffd17 	ldw	r4,-12(fp)
    2f70:	00030000 	call	3000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    2f74:	e0bffc05 	stb	r2,-16(fp)
    2f78:	e0bffc03 	ldbu	r2,-16(fp)
    2f7c:	1004c03a 	cmpne	r2,r2,zero
    2f80:	10803fcc 	andi	r2,r2,255
    2f84:	10000526 	beq	r2,zero,2f9c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    2f88:	e0bffc03 	ldbu	r2,-16(fp)
    2f8c:	100b883a 	mov	r5,r2
    2f90:	e13ffd17 	ldw	r4,-12(fp)
    2f94:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f98:	003ff106 	br	2f60 <__alt_data_end+0xfc002f60>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c001c3 	ldbu	r3,7(r2)
    2fa4:	e0bffc43 	ldbu	r2,-15(fp)
    2fa8:	108001cc 	andi	r2,r2,7
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	10803fcc 	andi	r2,r2,255
    2fb4:	1880061e 	bne	r3,r2,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	108001c3 	ldbu	r2,7(r2)
    2fc0:	10bfffc4 	addi	r2,r2,-1
    2fc4:	1007883a 	mov	r3,r2
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	100b883a 	mov	r5,r2
    2fd8:	e13ffd17 	ldw	r4,-12(fp)
    2fdc:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    2fe0:	00000106 	br	2fe8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    2fe4:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    2fe8:	e6ffff04 	addi	sp,fp,-4
    2fec:	dfc00217 	ldw	ra,8(sp)
    2ff0:	df000117 	ldw	fp,4(sp)
    2ff4:	dc000017 	ldw	r16,0(sp)
    2ff8:	dec00304 	addi	sp,sp,12
    2ffc:	f800283a 	ret

00003000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3000:	defff904 	addi	sp,sp,-28
    3004:	dfc00615 	stw	ra,24(sp)
    3008:	df000515 	stw	fp,20(sp)
    300c:	dc000415 	stw	r16,16(sp)
    3010:	df000504 	addi	fp,sp,20
    3014:	e13ffc15 	stw	r4,-16(fp)
    3018:	e17ffd05 	stb	r5,-12(fp)
    301c:	3005883a 	mov	r2,r6
    3020:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3024:	e0bffe03 	ldbu	r2,-8(fp)
    3028:	10000526 	beq	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    302c:	e0bffe03 	ldbu	r2,-8(fp)
    3030:	10800428 	cmpgeui	r2,r2,16
    3034:	1000021e 	bne	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3038:	e0bffe03 	ldbu	r2,-8(fp)
    303c:	00000106 	br	3044 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3040:	00800044 	movi	r2,1
    3044:	e0bffb05 	stb	r2,-20(fp)
    3048:	e0bffb03 	ldbu	r2,-20(fp)
    304c:	10800428 	cmpgeui	r2,r2,16
    3050:	1000161e 	bne	r2,zero,30ac <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3054:	e0bffb03 	ldbu	r2,-20(fp)
    3058:	e43ffc17 	ldw	r16,-16(fp)
    305c:	014001c4 	movi	r5,7
    3060:	1009883a 	mov	r4,r2
    3064:	000cf040 	call	cf04 <__mulsi3>
    3068:	8085883a 	add	r2,r16,r2
    306c:	10800304 	addi	r2,r2,12
    3070:	10800003 	ldbu	r2,0(r2)
    3074:	1004d0fa 	srli	r2,r2,3
    3078:	108001cc 	andi	r2,r2,7
    307c:	1007883a 	mov	r3,r2
    3080:	e0bffd03 	ldbu	r2,-12(fp)
    3084:	108001cc 	andi	r2,r2,7
    3088:	18c03fcc 	andi	r3,r3,255
    308c:	10803fcc 	andi	r2,r2,255
    3090:	1880021e 	bne	r3,r2,309c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3094:	e0bffb03 	ldbu	r2,-20(fp)
    3098:	00000506 	br	30b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    309c:	e0bffb03 	ldbu	r2,-20(fp)
    30a0:	10800044 	addi	r2,r2,1
    30a4:	e0bffb05 	stb	r2,-20(fp)
    30a8:	003fe706 	br	3048 <__alt_data_end+0xfc003048>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    30ac:	0005883a 	mov	r2,zero
        };
    30b0:	e6ffff04 	addi	sp,fp,-4
    30b4:	dfc00217 	ldw	ra,8(sp)
    30b8:	df000117 	ldw	fp,4(sp)
    30bc:	dc000017 	ldw	r16,0(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret

000030c8 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    30c8:	defffb04 	addi	sp,sp,-20
    30cc:	dfc00415 	stw	ra,16(sp)
    30d0:	df000315 	stw	fp,12(sp)
    30d4:	df000304 	addi	fp,sp,12
    30d8:	e13ffe15 	stw	r4,-8(fp)
    30dc:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    30e0:	e0bffe17 	ldw	r2,-8(fp)
    30e4:	1009883a 	mov	r4,r2
    30e8:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	10800104 	addi	r2,r2,4
    30f4:	1009883a 	mov	r4,r2
    30f8:	0004ab80 	call	4ab8 <_ZN17UsbConfigXtracterC1Ev>
    30fc:	008000b4 	movhi	r2,2
    3100:	108f2804 	addi	r2,r2,15520
    3104:	e0fffe17 	ldw	r3,-8(fp)
    3108:	18800015 	stw	r2,0(r3)
    310c:	008000b4 	movhi	r2,2
    3110:	108f3504 	addi	r2,r2,15572
    3114:	e0fffe17 	ldw	r3,-8(fp)
    3118:	18800115 	stw	r2,4(r3)
    311c:	e0bffe17 	ldw	r2,-8(fp)
    3120:	e0ffff17 	ldw	r3,-4(fp)
    3124:	10c00315 	stw	r3,12(r2)
    3128:	e0bffe17 	ldw	r2,-8(fp)
    312c:	10000405 	stb	zero,16(r2)
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	00c00044 	movi	r3,1
    3138:	10c006c5 	stb	r3,27(r2)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	10000715 	stw	zero,28(r2)
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10000905 	stb	zero,36(r2)
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3154:	e03ffd05 	stb	zero,-12(fp)
    3158:	e0bffd03 	ldbu	r2,-12(fp)
    315c:	108000e8 	cmpgeui	r2,r2,3
    3160:	1000431e 	bne	r2,zero,3270 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3164:	e0fffd03 	ldbu	r3,-12(fp)
    3168:	e13ffe17 	ldw	r4,-8(fp)
    316c:	1805883a 	mov	r2,r3
    3170:	1085883a 	add	r2,r2,r2
    3174:	10c5883a 	add	r2,r2,r3
    3178:	2085883a 	add	r2,r4,r2
    317c:	10800444 	addi	r2,r2,17
    3180:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3184:	e13ffd03 	ldbu	r4,-12(fp)
    3188:	e0bffd03 	ldbu	r2,-12(fp)
    318c:	10000226 	beq	r2,zero,3198 <_ZN7XBOXONEC1EP3USB+0xd0>
    3190:	0007883a 	mov	r3,zero
    3194:	00000106 	br	319c <_ZN7XBOXONEC1EP3USB+0xd4>
    3198:	00c00204 	movi	r3,8
    319c:	e17ffe17 	ldw	r5,-8(fp)
    31a0:	2005883a 	mov	r2,r4
    31a4:	1085883a 	add	r2,r2,r2
    31a8:	1105883a 	add	r2,r2,r4
    31ac:	2885883a 	add	r2,r5,r2
    31b0:	10800484 	addi	r2,r2,18
    31b4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    31b8:	e0fffd03 	ldbu	r3,-12(fp)
    31bc:	e13ffe17 	ldw	r4,-8(fp)
    31c0:	1805883a 	mov	r2,r3
    31c4:	1085883a 	add	r2,r2,r2
    31c8:	10c5883a 	add	r2,r2,r3
    31cc:	2085883a 	add	r2,r4,r2
    31d0:	10800404 	addi	r2,r2,16
    31d4:	110000c3 	ldbu	r4,3(r2)
    31d8:	00ffff84 	movi	r3,-2
    31dc:	20c6703a 	and	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    31e4:	e0fffd03 	ldbu	r3,-12(fp)
    31e8:	e13ffe17 	ldw	r4,-8(fp)
    31ec:	1805883a 	mov	r2,r3
    31f0:	1085883a 	add	r2,r2,r2
    31f4:	10c5883a 	add	r2,r2,r3
    31f8:	2085883a 	add	r2,r4,r2
    31fc:	10800404 	addi	r2,r2,16
    3200:	110000c3 	ldbu	r4,3(r2)
    3204:	00ffff44 	movi	r3,-3
    3208:	20c6703a 	and	r3,r4,r3
    320c:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3210:	e13ffd03 	ldbu	r4,-12(fp)
    3214:	e0bffd03 	ldbu	r2,-12(fp)
    3218:	10000226 	beq	r2,zero,3224 <_ZN7XBOXONEC1EP3USB+0x15c>
    321c:	00c00044 	movi	r3,1
    3220:	00000106 	br	3228 <_ZN7XBOXONEC1EP3USB+0x160>
    3224:	00c003c4 	movi	r3,15
    3228:	e17ffe17 	ldw	r5,-8(fp)
    322c:	2005883a 	mov	r2,r4
    3230:	1085883a 	add	r2,r2,r2
    3234:	1105883a 	add	r2,r2,r4
    3238:	2885883a 	add	r2,r5,r2
    323c:	10800404 	addi	r2,r2,16
    3240:	18c7883a 	add	r3,r3,r3
    3244:	18cb883a 	add	r5,r3,r3
    3248:	10c000c3 	ldbu	r3,3(r2)
    324c:	18c000cc 	andi	r3,r3,3
    3250:	1809883a 	mov	r4,r3
    3254:	2807883a 	mov	r3,r5
    3258:	20c6b03a 	or	r3,r4,r3
    325c:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3260:	e0bffd03 	ldbu	r2,-12(fp)
    3264:	10800044 	addi	r2,r2,1
    3268:	e0bffd05 	stb	r2,-12(fp)
    326c:	003fba06 	br	3158 <__alt_data_end+0xfc003158>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	10800317 	ldw	r2,12(r2)
    3278:	10000626 	beq	r2,zero,3294 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800317 	ldw	r2,12(r2)
    3284:	e0fffe17 	ldw	r3,-8(fp)
    3288:	180b883a 	mov	r5,r3
    328c:	1009883a 	mov	r4,r2
    3290:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3294:	0001883a 	nop
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00117 	ldw	ra,4(sp)
    32a0:	df000017 	ldw	fp,0(sp)
    32a4:	dec00204 	addi	sp,sp,8
    32a8:	f800283a 	ret

000032ac <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    32ac:	deffde04 	addi	sp,sp,-136
    32b0:	dfc02115 	stw	ra,132(sp)
    32b4:	df002015 	stw	fp,128(sp)
    32b8:	df002004 	addi	fp,sp,128
    32bc:	e13ffc15 	stw	r4,-16(fp)
    32c0:	2809883a 	mov	r4,r5
    32c4:	3007883a 	mov	r3,r6
    32c8:	3805883a 	mov	r2,r7
    32cc:	e13ffd05 	stb	r4,-12(fp)
    32d0:	e0fffe05 	stb	r3,-8(fp)
    32d4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    32d8:	e0bfe744 	addi	r2,fp,-99
    32dc:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    32e0:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    32e4:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    32e8:	e0bffc17 	ldw	r2,-16(fp)
    32ec:	10800317 	ldw	r2,12(r2)
    32f0:	1009883a 	mov	r4,r2
    32f4:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    32f8:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    32fc:	e0bffc17 	ldw	r2,-16(fp)
    3300:	10800403 	ldbu	r2,16(r2)
    3304:	10803fcc 	andi	r2,r2,255
    3308:	10000226 	beq	r2,zero,3314 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    330c:	00bff644 	movi	r2,-39
    3310:	00017606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3314:	e0bfe517 	ldw	r2,-108(fp)
    3318:	10800017 	ldw	r2,0(r2)
    331c:	10800017 	ldw	r2,0(r2)
    3320:	000b883a 	mov	r5,zero
    3324:	e13fe517 	ldw	r4,-108(fp)
    3328:	103ee83a 	callr	r2
    332c:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3330:	e0bfe317 	ldw	r2,-116(fp)
    3334:	1000021e 	bne	r2,zero,3340 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3338:	00bff584 	movi	r2,-42
    333c:	00016b06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3340:	e0bfe317 	ldw	r2,-116(fp)
    3344:	10c00003 	ldbu	r3,0(r2)
    3348:	11000043 	ldbu	r4,1(r2)
    334c:	2008923a 	slli	r4,r4,8
    3350:	20c6b03a 	or	r3,r4,r3
    3354:	11000083 	ldbu	r4,2(r2)
    3358:	2008943a 	slli	r4,r4,16
    335c:	20c6b03a 	or	r3,r4,r3
    3360:	108000c3 	ldbu	r2,3(r2)
    3364:	1004963a 	slli	r2,r2,24
    3368:	10c4b03a 	or	r2,r2,r3
    336c:	1000021e 	bne	r2,zero,3378 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3370:	00bff5c4 	movi	r2,-41
    3374:	00015d06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3378:	e0bfe317 	ldw	r2,-116(fp)
    337c:	10c00003 	ldbu	r3,0(r2)
    3380:	11000043 	ldbu	r4,1(r2)
    3384:	2008923a 	slli	r4,r4,8
    3388:	20c6b03a 	or	r3,r4,r3
    338c:	11000083 	ldbu	r4,2(r2)
    3390:	2008943a 	slli	r4,r4,16
    3394:	20c6b03a 	or	r3,r4,r3
    3398:	108000c3 	ldbu	r2,3(r2)
    339c:	1004963a 	slli	r2,r2,24
    33a0:	10c4b03a 	or	r2,r2,r3
    33a4:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    33a8:	e0bffc17 	ldw	r2,-16(fp)
    33ac:	10c00444 	addi	r3,r2,17
    33b0:	e0bfe317 	ldw	r2,-116(fp)
    33b4:	19803fcc 	andi	r6,r3,255
    33b8:	11000003 	ldbu	r4,0(r2)
    33bc:	2008703a 	and	r4,r4,zero
    33c0:	200b883a 	mov	r5,r4
    33c4:	3009883a 	mov	r4,r6
    33c8:	2908b03a 	or	r4,r5,r4
    33cc:	11000005 	stb	r4,0(r2)
    33d0:	1808d23a 	srli	r4,r3,8
    33d4:	21803fcc 	andi	r6,r4,255
    33d8:	11000043 	ldbu	r4,1(r2)
    33dc:	2008703a 	and	r4,r4,zero
    33e0:	200b883a 	mov	r5,r4
    33e4:	3009883a 	mov	r4,r6
    33e8:	2908b03a 	or	r4,r5,r4
    33ec:	11000045 	stb	r4,1(r2)
    33f0:	1808d43a 	srli	r4,r3,16
    33f4:	21803fcc 	andi	r6,r4,255
    33f8:	11000083 	ldbu	r4,2(r2)
    33fc:	2008703a 	and	r4,r4,zero
    3400:	200b883a 	mov	r5,r4
    3404:	3009883a 	mov	r4,r6
    3408:	2908b03a 	or	r4,r5,r4
    340c:	11000085 	stb	r4,2(r2)
    3410:	180ad63a 	srli	r5,r3,24
    3414:	10c000c3 	ldbu	r3,3(r2)
    3418:	1806703a 	and	r3,r3,zero
    341c:	1809883a 	mov	r4,r3
    3420:	2807883a 	mov	r3,r5
    3424:	20c6b03a 	or	r3,r4,r3
    3428:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    342c:	e0bfe317 	ldw	r2,-116(fp)
    3430:	e0ffff03 	ldbu	r3,-4(fp)
    3434:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3438:	e0bffc17 	ldw	r2,-16(fp)
    343c:	10c00317 	ldw	r3,12(r2)
    3440:	00800484 	movi	r2,18
    3444:	113fffcc 	andi	r4,r2,65535
    3448:	e0bfe744 	addi	r2,fp,-99
    344c:	d8800015 	stw	r2,0(sp)
    3450:	200f883a 	mov	r7,r4
    3454:	000d883a 	mov	r6,zero
    3458:	000b883a 	mov	r5,zero
    345c:	1809883a 	mov	r4,r3
    3460:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    3464:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3468:	e0bfe317 	ldw	r2,-116(fp)
    346c:	e0ffe417 	ldw	r3,-112(fp)
    3470:	19403fcc 	andi	r5,r3,255
    3474:	10c00003 	ldbu	r3,0(r2)
    3478:	1806703a 	and	r3,r3,zero
    347c:	1809883a 	mov	r4,r3
    3480:	2807883a 	mov	r3,r5
    3484:	20c6b03a 	or	r3,r4,r3
    3488:	10c00005 	stb	r3,0(r2)
    348c:	e0ffe417 	ldw	r3,-112(fp)
    3490:	1806d23a 	srli	r3,r3,8
    3494:	19403fcc 	andi	r5,r3,255
    3498:	10c00043 	ldbu	r3,1(r2)
    349c:	1806703a 	and	r3,r3,zero
    34a0:	1809883a 	mov	r4,r3
    34a4:	2807883a 	mov	r3,r5
    34a8:	20c6b03a 	or	r3,r4,r3
    34ac:	10c00045 	stb	r3,1(r2)
    34b0:	e0ffe417 	ldw	r3,-112(fp)
    34b4:	1806d43a 	srli	r3,r3,16
    34b8:	19403fcc 	andi	r5,r3,255
    34bc:	10c00083 	ldbu	r3,2(r2)
    34c0:	1806703a 	and	r3,r3,zero
    34c4:	1809883a 	mov	r4,r3
    34c8:	2807883a 	mov	r3,r5
    34cc:	20c6b03a 	or	r3,r4,r3
    34d0:	10c00085 	stb	r3,2(r2)
    34d4:	e0ffe417 	ldw	r3,-112(fp)
    34d8:	180ad63a 	srli	r5,r3,24
    34dc:	10c000c3 	ldbu	r3,3(r2)
    34e0:	1806703a 	and	r3,r3,zero
    34e4:	1809883a 	mov	r4,r3
    34e8:	2807883a 	mov	r3,r5
    34ec:	20c6b03a 	or	r3,r4,r3
    34f0:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    34f4:	e0bfe103 	ldbu	r2,-124(fp)
    34f8:	1000e61e 	bne	r2,zero,3894 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    34fc:	e0bfe217 	ldw	r2,-120(fp)
    3500:	10c00203 	ldbu	r3,8(r2)
    3504:	10800243 	ldbu	r2,9(r2)
    3508:	1004923a 	slli	r2,r2,8
    350c:	10c4b03a 	or	r2,r2,r3
    3510:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3514:	e0bfe217 	ldw	r2,-120(fp)
    3518:	10c00283 	ldbu	r3,10(r2)
    351c:	108002c3 	ldbu	r2,11(r2)
    3520:	1004923a 	slli	r2,r2,8
    3524:	10c4b03a 	or	r2,r2,r3
    3528:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    352c:	e0bffc17 	ldw	r2,-16(fp)
    3530:	10800017 	ldw	r2,0(r2)
    3534:	10800604 	addi	r2,r2,24
    3538:	10800017 	ldw	r2,0(r2)
    353c:	e0ffe60b 	ldhu	r3,-104(fp)
    3540:	e13fe68b 	ldhu	r4,-102(fp)
    3544:	200d883a 	mov	r6,r4
    3548:	180b883a 	mov	r5,r3
    354c:	e13ffc17 	ldw	r4,-16(fp)
    3550:	103ee83a 	callr	r2
    3554:	1080005c 	xori	r2,r2,1
    3558:	10803fcc 	andi	r2,r2,255
    355c:	1000d51e 	bne	r2,zero,38b4 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3560:	e0bfe517 	ldw	r2,-108(fp)
    3564:	10800017 	ldw	r2,0(r2)
    3568:	10800104 	addi	r2,r2,4
    356c:	10800017 	ldw	r2,0(r2)
    3570:	e0fffd03 	ldbu	r3,-12(fp)
    3574:	e13ffe03 	ldbu	r4,-8(fp)
    3578:	200f883a 	mov	r7,r4
    357c:	000d883a 	mov	r6,zero
    3580:	180b883a 	mov	r5,r3
    3584:	e13fe517 	ldw	r4,-108(fp)
    3588:	103ee83a 	callr	r2
    358c:	1007883a 	mov	r3,r2
    3590:	e0bffc17 	ldw	r2,-16(fp)
    3594:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3598:	e0bffc17 	ldw	r2,-16(fp)
    359c:	10800403 	ldbu	r2,16(r2)
    35a0:	10803fcc 	andi	r2,r2,255
    35a4:	1000021e 	bne	r2,zero,35b0 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    35a8:	00bff504 	movi	r2,-44
    35ac:	0000cf06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    35b0:	e0bfe217 	ldw	r2,-120(fp)
    35b4:	10c001c3 	ldbu	r3,7(r2)
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    35c0:	e0bffc17 	ldw	r2,-16(fp)
    35c4:	10c00317 	ldw	r3,12(r2)
    35c8:	e0bffc17 	ldw	r2,-16(fp)
    35cc:	10800403 	ldbu	r2,16(r2)
    35d0:	10803fcc 	andi	r2,r2,255
    35d4:	100f883a 	mov	r7,r2
    35d8:	000d883a 	mov	r6,zero
    35dc:	000b883a 	mov	r5,zero
    35e0:	1809883a 	mov	r4,r3
    35e4:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    35e8:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    35ec:	e0bfe103 	ldbu	r2,-124(fp)
    35f0:	10001026 	beq	r2,zero,3634 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    35f4:	e0bfe317 	ldw	r2,-116(fp)
    35f8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    35fc:	e0bfe517 	ldw	r2,-108(fp)
    3600:	10800017 	ldw	r2,0(r2)
    3604:	10800204 	addi	r2,r2,8
    3608:	10800017 	ldw	r2,0(r2)
    360c:	e0fffc17 	ldw	r3,-16(fp)
    3610:	18c00403 	ldbu	r3,16(r3)
    3614:	18c03fcc 	andi	r3,r3,255
    3618:	180b883a 	mov	r5,r3
    361c:	e13fe517 	ldw	r4,-108(fp)
    3620:	103ee83a 	callr	r2
                bAddress = 0;
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    362c:	e0bfe103 	ldbu	r2,-124(fp)
    3630:	0000ae06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3634:	e0bfe317 	ldw	r2,-116(fp)
    3638:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	e0fffc17 	ldw	r3,-16(fp)
    364c:	18c00403 	ldbu	r3,16(r3)
    3650:	18c03fcc 	andi	r3,r3,255
    3654:	180b883a 	mov	r5,r3
    3658:	e13fe517 	ldw	r4,-108(fp)
    365c:	103ee83a 	callr	r2
    3660:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3664:	e0bfe317 	ldw	r2,-116(fp)
    3668:	1000021e 	bne	r2,zero,3674 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    366c:	00bff584 	movi	r2,-42
    3670:	00009e06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3674:	e0bfe317 	ldw	r2,-116(fp)
    3678:	e0ffff03 	ldbu	r3,-4(fp)
    367c:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	10c00317 	ldw	r3,12(r2)
    3688:	e0bffc17 	ldw	r2,-16(fp)
    368c:	10800403 	ldbu	r2,16(r2)
    3690:	11003fcc 	andi	r4,r2,255
    3694:	e0bffc17 	ldw	r2,-16(fp)
    3698:	10800444 	addi	r2,r2,17
    369c:	100f883a 	mov	r7,r2
    36a0:	01800044 	movi	r6,1
    36a4:	200b883a 	mov	r5,r4
    36a8:	1809883a 	mov	r4,r3
    36ac:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    36b0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    36b4:	e0bfe103 	ldbu	r2,-124(fp)
    36b8:	1000781e 	bne	r2,zero,389c <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    36bc:	e0bfe217 	ldw	r2,-120(fp)
    36c0:	10800443 	ldbu	r2,17(r2)
    36c4:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    36c8:	e0bfe703 	ldbu	r2,-100(fp)
    36cc:	01402004 	movi	r5,128
    36d0:	1009883a 	mov	r4,r2
    36d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    36d8:	e03fe145 	stb	zero,-123(fp)
    36dc:	e0ffe143 	ldbu	r3,-123(fp)
    36e0:	e0bfe703 	ldbu	r2,-100(fp)
    36e4:	1880222e 	bgeu	r3,r2,3770 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    36e8:	e0bffc17 	ldw	r2,-16(fp)
    36ec:	10c00104 	addi	r3,r2,4
    36f0:	e0bfed04 	addi	r2,fp,-76
    36f4:	180b883a 	mov	r5,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	0004b200 	call	4b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10c00317 	ldw	r3,12(r2)
    3708:	e0bffc17 	ldw	r2,-16(fp)
    370c:	10800403 	ldbu	r2,16(r2)
    3710:	11003fcc 	andi	r4,r2,255
    3714:	e17fe143 	ldbu	r5,-123(fp)
    3718:	e0bfed04 	addi	r2,fp,-76
    371c:	d8800015 	stw	r2,0(sp)
    3720:	280f883a 	mov	r7,r5
    3724:	000d883a 	mov	r6,zero
    3728:	200b883a 	mov	r5,r4
    372c:	1809883a 	mov	r4,r3
    3730:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3734:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3738:	e0bfe103 	ldbu	r2,-124(fp)
    373c:	10000226 	beq	r2,zero,3748 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3740:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3744:	00006206 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	108006c3 	ldbu	r2,27(r2)
    3750:	10803fcc 	andi	r2,r2,255
    3754:	108000f0 	cmpltui	r2,r2,3
    3758:	10000426 	beq	r2,zero,376c <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    375c:	e0bfe143 	ldbu	r2,-123(fp)
    3760:	10800044 	addi	r2,r2,1
    3764:	e0bfe145 	stb	r2,-123(fp)
    3768:	003fdc06 	br	36dc <__alt_data_end+0xfc0036dc>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    376c:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3770:	e0bffc17 	ldw	r2,-16(fp)
    3774:	108006c3 	ldbu	r2,27(r2)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	108000e8 	cmpgeui	r2,r2,3
    3780:	10004e26 	beq	r2,zero,38bc <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3784:	e0bffc17 	ldw	r2,-16(fp)
    3788:	10c00317 	ldw	r3,12(r2)
    378c:	e0bffc17 	ldw	r2,-16(fp)
    3790:	10800403 	ldbu	r2,16(r2)
    3794:	11003fcc 	andi	r4,r2,255
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	108006c3 	ldbu	r2,27(r2)
    37a0:	11403fcc 	andi	r5,r2,255
    37a4:	e0bffc17 	ldw	r2,-16(fp)
    37a8:	10800444 	addi	r2,r2,17
    37ac:	100f883a 	mov	r7,r2
    37b0:	280d883a 	mov	r6,r5
    37b4:	200b883a 	mov	r5,r4
    37b8:	1809883a 	mov	r4,r3
    37bc:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    37c0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    37c4:	e0bfe103 	ldbu	r2,-124(fp)
    37c8:	1000361e 	bne	r2,zero,38a4 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    37cc:	01003204 	movi	r4,200
    37d0:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    37d4:	e0bffc17 	ldw	r2,-16(fp)
    37d8:	10c00317 	ldw	r3,12(r2)
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10800403 	ldbu	r2,16(r2)
    37e4:	11003fcc 	andi	r4,r2,255
    37e8:	e0bffc17 	ldw	r2,-16(fp)
    37ec:	10800443 	ldbu	r2,17(r2)
    37f0:	11403fcc 	andi	r5,r2,255
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	10800683 	ldbu	r2,26(r2)
    37fc:	10803fcc 	andi	r2,r2,255
    3800:	100f883a 	mov	r7,r2
    3804:	280d883a 	mov	r6,r5
    3808:	200b883a 	mov	r5,r4
    380c:	1809883a 	mov	r4,r3
    3810:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    3814:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3818:	e0bfe103 	ldbu	r2,-124(fp)
    381c:	1000231e 	bne	r2,zero,38ac <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3820:	01003204 	movi	r4,200
    3824:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3828:	e0bffc17 	ldw	r2,-16(fp)
    382c:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3830:	00800144 	movi	r2,5
    3834:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3838:	00800804 	movi	r2,32
    383c:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3840:	00800044 	movi	r2,1
    3844:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3848:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    384c:	e0bfebc4 	addi	r2,fp,-81
    3850:	01800144 	movi	r6,5
    3854:	100b883a 	mov	r5,r2
    3858:	e13ffc17 	ldw	r4,-16(fp)
    385c:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
    3860:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3864:	e0bfe103 	ldbu	r2,-124(fp)
    3868:	1000181e 	bne	r2,zero,38cc <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    386c:	e13ffc17 	ldw	r4,-16(fp)
    3870:	00042140 	call	4214 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	00c00044 	movi	r3,1
    387c:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	00c00044 	movi	r3,1
    3888:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    388c:	0005883a 	mov	r2,zero
    3890:	00001606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3894:	0001883a 	nop
    3898:	00000d06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    389c:	0001883a 	nop
    38a0:	00000b06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    38a4:	0001883a 	nop
    38a8:	00000906 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    38ac:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    38b0:	00000706 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    38b4:	0001883a 	nop
    38b8:	00000106 	br	38c0 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    38bc:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    38c0:	00bff444 	movi	r2,-47
    38c4:	e0bfe105 	stb	r2,-124(fp)
    38c8:	00000106 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    38cc:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10800017 	ldw	r2,0(r2)
    38d8:	10800204 	addi	r2,r2,8
    38dc:	10800017 	ldw	r2,0(r2)
    38e0:	e13ffc17 	ldw	r4,-16(fp)
    38e4:	103ee83a 	callr	r2
        return rcode;
    38e8:	e0bfe103 	ldbu	r2,-124(fp)
}
    38ec:	e037883a 	mov	sp,fp
    38f0:	dfc00117 	ldw	ra,4(sp)
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00204 	addi	sp,sp,8
    38fc:	f800283a 	ret

00003900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3900:	defff904 	addi	sp,sp,-28
    3904:	df000615 	stw	fp,24(sp)
    3908:	df000604 	addi	fp,sp,24
    390c:	e13ffb15 	stw	r4,-20(fp)
    3910:	3009883a 	mov	r4,r6
    3914:	3807883a 	mov	r3,r7
    3918:	e0800117 	ldw	r2,4(fp)
    391c:	e17ffc05 	stb	r5,-16(fp)
    3920:	e13ffd05 	stb	r4,-12(fp)
    3924:	e0fffe05 	stb	r3,-8(fp)
    3928:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    392c:	e0bffb17 	ldw	r2,-20(fp)
    3930:	e0fffc03 	ldbu	r3,-16(fp)
    3934:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3938:	e0800217 	ldw	r2,8(fp)
    393c:	108000c3 	ldbu	r2,3(r2)
    3940:	10803fcc 	andi	r2,r2,255
    3944:	108000cc 	andi	r2,r2,3
    3948:	108000d8 	cmpnei	r2,r2,3
    394c:	1000361e 	bne	r2,zero,3a28 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3950:	e0800217 	ldw	r2,8(fp)
    3954:	10800083 	ldbu	r2,2(r2)
    3958:	10803fcc 	andi	r2,r2,255
    395c:	1080201c 	xori	r2,r2,128
    3960:	10bfe004 	addi	r2,r2,-128
    3964:	1000020e 	bge	r2,zero,3970 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3968:	00800084 	movi	r2,2
    396c:	00000106 	br	3974 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3970:	00800044 	movi	r2,1
    3974:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3978:	e0fffa03 	ldbu	r3,-24(fp)
    397c:	e0800217 	ldw	r2,8(fp)
    3980:	10800083 	ldbu	r2,2(r2)
    3984:	108003cc 	andi	r2,r2,15
    3988:	100b883a 	mov	r5,r2
    398c:	e13ffb17 	ldw	r4,-20(fp)
    3990:	1805883a 	mov	r2,r3
    3994:	1085883a 	add	r2,r2,r2
    3998:	10c5883a 	add	r2,r2,r3
    399c:	2085883a 	add	r2,r4,r2
    39a0:	10800444 	addi	r2,r2,17
    39a4:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    39a8:	e0fffa03 	ldbu	r3,-24(fp)
    39ac:	e0800217 	ldw	r2,8(fp)
    39b0:	11000103 	ldbu	r4,4(r2)
    39b4:	10800143 	ldbu	r2,5(r2)
    39b8:	1004923a 	slli	r2,r2,8
    39bc:	1104b03a 	or	r2,r2,r4
    39c0:	100b883a 	mov	r5,r2
    39c4:	e13ffb17 	ldw	r4,-20(fp)
    39c8:	1805883a 	mov	r2,r3
    39cc:	1085883a 	add	r2,r2,r2
    39d0:	10c5883a 	add	r2,r2,r3
    39d4:	2085883a 	add	r2,r4,r2
    39d8:	10800484 	addi	r2,r2,18
    39dc:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    39e0:	e0bffb17 	ldw	r2,-20(fp)
    39e4:	10c00903 	ldbu	r3,36(r2)
    39e8:	e0800217 	ldw	r2,8(fp)
    39ec:	10800183 	ldbu	r2,6(r2)
    39f0:	18c03fcc 	andi	r3,r3,255
    39f4:	10803fcc 	andi	r2,r2,255
    39f8:	1880042e 	bgeu	r3,r2,3a0c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    39fc:	e0800217 	ldw	r2,8(fp)
    3a00:	10c00183 	ldbu	r3,6(r2)
    3a04:	e0bffb17 	ldw	r2,-20(fp)
    3a08:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	108006c3 	ldbu	r2,27(r2)
    3a14:	10800044 	addi	r2,r2,1
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10c006c5 	stb	r3,27(r2)
    3a24:	00000106 	br	3a2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3a28:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	df000017 	ldw	fp,0(sp)
    3a34:	dec00104 	addi	sp,sp,4
    3a38:	f800283a 	ret

00003a3c <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3a3c:	213fff04 	addi	r4,r4,-4
    3a40:	00039001 	jmpi	3900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003a44 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3a44:	defffd04 	addi	sp,sp,-12
    3a48:	df000215 	stw	fp,8(sp)
    3a4c:	df000204 	addi	fp,sp,8
    3a50:	e13ffe15 	stw	r4,-8(fp)
    3a54:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3a58:	0001883a 	nop
    3a5c:	e037883a 	mov	sp,fp
    3a60:	df000017 	ldw	fp,0(sp)
    3a64:	dec00104 	addi	sp,sp,4
    3a68:	f800283a 	ret

00003a6c <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3a6c:	defffd04 	addi	sp,sp,-12
    3a70:	dfc00215 	stw	ra,8(sp)
    3a74:	df000115 	stw	fp,4(sp)
    3a78:	df000104 	addi	fp,sp,4
    3a7c:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3a88:	e0bfff17 	ldw	r2,-4(fp)
    3a8c:	10800317 	ldw	r2,12(r2)
    3a90:	1009883a 	mov	r4,r2
    3a94:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    3a98:	1009883a 	mov	r4,r2
    3a9c:	20800017 	ldw	r2,0(r4)
    3aa0:	10800204 	addi	r2,r2,8
    3aa4:	10800017 	ldw	r2,0(r2)
    3aa8:	e0ffff17 	ldw	r3,-4(fp)
    3aac:	18c00403 	ldbu	r3,16(r3)
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	180b883a 	mov	r5,r3
    3ab8:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3abc:	e0bfff17 	ldw	r2,-4(fp)
    3ac0:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	00c00044 	movi	r3,1
    3acc:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ae0:	e0bfff17 	ldw	r2,-4(fp)
    3ae4:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3ae8:	0005883a 	mov	r2,zero
}
    3aec:	e037883a 	mov	sp,fp
    3af0:	dfc00117 	ldw	ra,4(sp)
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00204 	addi	sp,sp,8
    3afc:	f800283a 	ret

00003b00 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3b00:	defffa04 	addi	sp,sp,-24
    3b04:	dfc00515 	stw	ra,20(sp)
    3b08:	df000415 	stw	fp,16(sp)
    3b0c:	df000404 	addi	fp,sp,16
    3b10:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3b14:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3b18:	e0bfff17 	ldw	r2,-4(fp)
    3b1c:	10800943 	ldbu	r2,37(r2)
    3b20:	1080005c 	xori	r2,r2,1
    3b24:	10803fcc 	andi	r2,r2,255
    3b28:	10000226 	beq	r2,zero,3b34 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3b2c:	0005883a 	mov	r2,zero
    3b30:	00002c06 	br	3be4 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3b34:	00006dc0 	call	6dc <_Z6millisv>
    3b38:	1007883a 	mov	r3,r2
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	10800717 	ldw	r2,28(r2)
    3b44:	1885c83a 	sub	r2,r3,r2
    3b48:	0084303a 	nor	r2,zero,r2
    3b4c:	1004d7fa 	srli	r2,r2,31
    3b50:	10803fcc 	andi	r2,r2,255
    3b54:	10002226 	beq	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3b58:	00006dc0 	call	6dc <_Z6millisv>
    3b5c:	1007883a 	mov	r3,r2
    3b60:	e0bfff17 	ldw	r2,-4(fp)
    3b64:	10800903 	ldbu	r2,36(r2)
    3b68:	10803fcc 	andi	r2,r2,255
    3b6c:	1887883a 	add	r3,r3,r2
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3b78:	e0bfff17 	ldw	r2,-4(fp)
    3b7c:	10800603 	ldbu	r2,24(r2)
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3b88:	e0bfff17 	ldw	r2,-4(fp)
    3b8c:	11000317 	ldw	r4,12(r2)
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11403fcc 	andi	r5,r2,255
    3b9c:	e0bfff17 	ldw	r2,-4(fp)
    3ba0:	108005c3 	ldbu	r2,23(r2)
    3ba4:	11803fcc 	andi	r6,r2,255
    3ba8:	e0bfff17 	ldw	r2,-4(fp)
    3bac:	10800f84 	addi	r2,r2,62
    3bb0:	e0ffff17 	ldw	r3,-4(fp)
    3bb4:	18c00903 	ldbu	r3,36(r3)
    3bb8:	18c03fcc 	andi	r3,r3,255
    3bbc:	e1fffe84 	addi	r7,fp,-6
    3bc0:	d8c00115 	stw	r3,4(sp)
    3bc4:	d8800015 	stw	r2,0(sp)
    3bc8:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3bcc:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3bd0:	e0bffe43 	ldbu	r2,-7(fp)
    3bd4:	1000021e 	bne	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3bd8:	e13fff17 	ldw	r4,-4(fp)
    3bdc:	0003bf80 	call	3bf8 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3be0:	e0bffe03 	ldbu	r2,-8(fp)
}
    3be4:	e037883a 	mov	sp,fp
    3be8:	dfc00117 	ldw	ra,4(sp)
    3bec:	df000017 	ldw	fp,0(sp)
    3bf0:	dec00204 	addi	sp,sp,8
    3bf4:	f800283a 	ret

00003bf8 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3bf8:	defffd04 	addi	sp,sp,-12
    3bfc:	df000215 	stw	fp,8(sp)
    3c00:	df000204 	addi	fp,sp,8
    3c04:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    3c08:	e0bfff17 	ldw	r2,-4(fp)
    3c0c:	10800f83 	ldbu	r2,62(r2)
    3c10:	10803fcc 	andi	r2,r2,255
    3c14:	108001d8 	cmpnei	r2,r2,7
    3c18:	10002f1e 	bne	r2,zero,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    3c1c:	e0bfff17 	ldw	r2,-4(fp)
    3c20:	10801083 	ldbu	r2,66(r2)
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	10800058 	cmpnei	r2,r2,1
    3c2c:	10000a1e 	bne	r2,zero,3c58 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c30:	e0bfff17 	ldw	r2,-4(fp)
    3c34:	10c0098b 	ldhu	r3,38(r2)
    3c38:	008000b4 	movhi	r2,2
    3c3c:	108f2484 	addi	r2,r2,15506
    3c40:	1080000b 	ldhu	r2,0(r2)
    3c44:	1884b03a 	or	r2,r3,r2
    3c48:	1007883a 	mov	r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10c0098d 	sth	r3,38(r2)
    3c54:	00000b06 	br	3c84 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	1080098b 	ldhu	r2,38(r2)
    3c60:	1007883a 	mov	r3,r2
    3c64:	008000b4 	movhi	r2,2
    3c68:	108f2484 	addi	r2,r2,15506
    3c6c:	1080000b 	ldhu	r2,0(r2)
    3c70:	0084303a 	nor	r2,zero,r2
    3c74:	1884703a 	and	r2,r3,r2
    3c78:	1007883a 	mov	r3,r2
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10c0098b 	ldhu	r3,38(r2)
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	10800a0b 	ldhu	r2,40(r2)
    3c94:	18ffffcc 	andi	r3,r3,65535
    3c98:	10bfffcc 	andi	r2,r2,65535
    3c9c:	18800e26 	beq	r3,r2,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ca0:	e0bfff17 	ldw	r2,-4(fp)
    3ca4:	1080098b 	ldhu	r2,38(r2)
    3ca8:	1007883a 	mov	r3,r2
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10800a0b 	ldhu	r2,40(r2)
    3cb4:	0084303a 	nor	r2,zero,r2
    3cb8:	1884703a 	and	r2,r3,r2
    3cbc:	1007883a 	mov	r3,r2
    3cc0:	e0bfff17 	ldw	r2,-4(fp)
    3cc4:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    3cc8:	e0bfff17 	ldw	r2,-4(fp)
    3ccc:	10c0098b 	ldhu	r3,38(r2)
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    3cd8:	e0bfff17 	ldw	r2,-4(fp)
    3cdc:	10800f83 	ldbu	r2,62(r2)
    3ce0:	10803fcc 	andi	r2,r2,255
    3ce4:	10800820 	cmpeqi	r2,r2,32
    3ce8:	1000b026 	beq	r2,zero,3fac <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    3cec:	e0bfff17 	ldw	r2,-4(fp)
    3cf0:	10c0098b 	ldhu	r3,38(r2)
    3cf4:	008000b4 	movhi	r2,2
    3cf8:	108f2484 	addi	r2,r2,15506
    3cfc:	1080000b 	ldhu	r2,0(r2)
    3d00:	1884703a 	and	r2,r3,r2
    3d04:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    3d08:	e0bfff17 	ldw	r2,-4(fp)
    3d0c:	108010c3 	ldbu	r2,67(r2)
    3d10:	10803fcc 	andi	r2,r2,255
    3d14:	108003cc 	andi	r2,r2,15
    3d18:	1004923a 	slli	r2,r2,8
    3d1c:	1007883a 	mov	r3,r2
    3d20:	e0bffe0b 	ldhu	r2,-8(fp)
    3d24:	1884b03a 	or	r2,r3,r2
    3d28:	1007883a 	mov	r3,r2
    3d2c:	e0bfff17 	ldw	r2,-4(fp)
    3d30:	10801083 	ldbu	r2,66(r2)
    3d34:	10803fcc 	andi	r2,r2,255
    3d38:	10803c0c 	andi	r2,r2,240
    3d3c:	1884b03a 	or	r2,r3,r2
    3d40:	1007883a 	mov	r3,r2
    3d44:	e0bfff17 	ldw	r2,-4(fp)
    3d48:	10801083 	ldbu	r2,66(r2)
    3d4c:	10803fcc 	andi	r2,r2,255
    3d50:	1080030c 	andi	r2,r2,12
    3d54:	100492ba 	slli	r2,r2,10
    3d58:	1884b03a 	or	r2,r3,r2
    3d5c:	1007883a 	mov	r3,r2
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	10801083 	ldbu	r2,66(r2)
    3d68:	10803fcc 	andi	r2,r2,255
    3d6c:	1080004c 	andi	r2,r2,1
    3d70:	100490fa 	slli	r2,r2,3
    3d74:	1884b03a 	or	r2,r3,r2
    3d78:	1007883a 	mov	r3,r2
    3d7c:	e0bfff17 	ldw	r2,-4(fp)
    3d80:	108010c3 	ldbu	r2,67(r2)
    3d84:	10803fcc 	andi	r2,r2,255
    3d88:	1080300c 	andi	r2,r2,192
    3d8c:	1004923a 	slli	r2,r2,8
    3d90:	1884b03a 	or	r2,r3,r2
    3d94:	1007883a 	mov	r3,r2
    3d98:	e0bfff17 	ldw	r2,-4(fp)
    3d9c:	108010c3 	ldbu	r2,67(r2)
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	10800c0c 	andi	r2,r2,48
    3da8:	1005d13a 	srai	r2,r2,4
    3dac:	1884b03a 	or	r2,r3,r2
    3db0:	1007883a 	mov	r3,r2
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    3dbc:	e0bfff17 	ldw	r2,-4(fp)
    3dc0:	10801143 	ldbu	r2,69(r2)
    3dc4:	10803fcc 	andi	r2,r2,255
    3dc8:	1004923a 	slli	r2,r2,8
    3dcc:	1007883a 	mov	r3,r2
    3dd0:	e0bfff17 	ldw	r2,-4(fp)
    3dd4:	10801103 	ldbu	r2,68(r2)
    3dd8:	10803fcc 	andi	r2,r2,255
    3ddc:	1884b03a 	or	r2,r3,r2
    3de0:	1007883a 	mov	r3,r2
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	108011c3 	ldbu	r2,71(r2)
    3df4:	10803fcc 	andi	r2,r2,255
    3df8:	1004923a 	slli	r2,r2,8
    3dfc:	1007883a 	mov	r3,r2
    3e00:	e0bfff17 	ldw	r2,-4(fp)
    3e04:	10801183 	ldbu	r2,70(r2)
    3e08:	10803fcc 	andi	r2,r2,255
    3e0c:	1884b03a 	or	r2,r3,r2
    3e10:	1007883a 	mov	r3,r2
    3e14:	e0bfff17 	ldw	r2,-4(fp)
    3e18:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10801243 	ldbu	r2,73(r2)
    3e24:	10803fcc 	andi	r2,r2,255
    3e28:	1004923a 	slli	r2,r2,8
    3e2c:	1007883a 	mov	r3,r2
    3e30:	e0bfff17 	ldw	r2,-4(fp)
    3e34:	10801203 	ldbu	r2,72(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	1884b03a 	or	r2,r3,r2
    3e40:	1007883a 	mov	r3,r2
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    3e4c:	e0bfff17 	ldw	r2,-4(fp)
    3e50:	108012c3 	ldbu	r2,75(r2)
    3e54:	10803fcc 	andi	r2,r2,255
    3e58:	1004923a 	slli	r2,r2,8
    3e5c:	1007883a 	mov	r3,r2
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	10801283 	ldbu	r2,74(r2)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	1884b03a 	or	r2,r3,r2
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    3e7c:	e0bfff17 	ldw	r2,-4(fp)
    3e80:	10801343 	ldbu	r2,77(r2)
    3e84:	10803fcc 	andi	r2,r2,255
    3e88:	1004923a 	slli	r2,r2,8
    3e8c:	1007883a 	mov	r3,r2
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10801303 	ldbu	r2,76(r2)
    3e98:	10803fcc 	andi	r2,r2,255
    3e9c:	1884b03a 	or	r2,r3,r2
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bfff17 	ldw	r2,-4(fp)
    3ea8:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	108013c3 	ldbu	r2,79(r2)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1004923a 	slli	r2,r2,8
    3ebc:	1007883a 	mov	r3,r2
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10801383 	ldbu	r2,78(r2)
    3ec8:	10803fcc 	andi	r2,r2,255
    3ecc:	1884b03a 	or	r2,r3,r2
    3ed0:	1007883a 	mov	r3,r2
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10c0098b 	ldhu	r3,38(r2)
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10800a0b 	ldhu	r2,40(r2)
    3eec:	18ffffcc 	andi	r3,r3,65535
    3ef0:	10bfffcc 	andi	r2,r2,65535
    3ef4:	18800e26 	beq	r3,r2,3f30 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	1080098b 	ldhu	r2,38(r2)
    3f00:	1007883a 	mov	r3,r2
    3f04:	e0bfff17 	ldw	r2,-4(fp)
    3f08:	10800a0b 	ldhu	r2,40(r2)
    3f0c:	0084303a 	nor	r2,zero,r2
    3f10:	1884703a 	and	r2,r3,r2
    3f14:	1007883a 	mov	r3,r2
    3f18:	e0bfff17 	ldw	r2,-4(fp)
    3f1c:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c0098b 	ldhu	r3,38(r2)
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10800d0b 	ldhu	r2,52(r2)
    3f38:	10bfffcc 	andi	r2,r2,65535
    3f3c:	10000726 	beq	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800e0b 	ldhu	r2,56(r2)
    3f48:	10bfffcc 	andi	r2,r2,65535
    3f4c:	1000031e 	bne	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	00c00044 	movi	r3,1
    3f58:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	10c00d0b 	ldhu	r3,52(r2)
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10800d8b 	ldhu	r2,54(r2)
    3f74:	10bfffcc 	andi	r2,r2,65535
    3f78:	10000726 	beq	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800e8b 	ldhu	r2,58(r2)
    3f84:	10bfffcc 	andi	r2,r2,65535
    3f88:	1000031e 	bne	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	00c00044 	movi	r3,1
    3f94:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    3f98:	e0bfff17 	ldw	r2,-4(fp)
    3f9c:	10c00d8b 	ldhu	r3,54(r2)
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	10c00e8d 	sth	r3,58(r2)
    3fa8:	00000106 	br	3fb0 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    3fac:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    3fb0:	e037883a 	mov	sp,fp
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00104 	addi	sp,sp,4
    3fbc:	f800283a 	ret

00003fc0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    3fc0:	defffd04 	addi	sp,sp,-12
    3fc4:	df000215 	stw	fp,8(sp)
    3fc8:	df000204 	addi	fp,sp,8
    3fcc:	e13ffe15 	stw	r4,-8(fp)
    3fd0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10800218 	cmpnei	r2,r2,8
    3fdc:	1000031e 	bne	r2,zero,3fec <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10800d0b 	ldhu	r2,52(r2)
    3fe8:	00001306 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    3fec:	e0bfff17 	ldw	r2,-4(fp)
    3ff0:	10800258 	cmpnei	r2,r2,9
    3ff4:	1000031e 	bne	r2,zero,4004 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    3ff8:	e0bffe17 	ldw	r2,-8(fp)
    3ffc:	10800d8b 	ldhu	r2,54(r2)
    4000:	00000d06 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4004:	e0bffe17 	ldw	r2,-8(fp)
    4008:	10c0098b 	ldhu	r3,38(r2)
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10803fcc 	andi	r2,r2,255
    4014:	1089883a 	add	r4,r2,r2
    4018:	008000b4 	movhi	r2,2
    401c:	108f1c84 	addi	r2,r2,15474
    4020:	2085883a 	add	r2,r4,r2
    4024:	1080000b 	ldhu	r2,0(r2)
    4028:	1884703a 	and	r2,r3,r2
    402c:	10bfffcc 	andi	r2,r2,65535
    4030:	1004c03a 	cmpne	r2,r2,zero
    4034:	10803fcc 	andi	r2,r2,255
}
    4038:	e037883a 	mov	sp,fp
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00104 	addi	sp,sp,4
    4044:	f800283a 	ret

00004048 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4048:	defffc04 	addi	sp,sp,-16
    404c:	df000315 	stw	fp,12(sp)
    4050:	df000304 	addi	fp,sp,12
    4054:	e13ffe15 	stw	r4,-8(fp)
    4058:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	10800218 	cmpnei	r2,r2,8
    4064:	10000a1e 	bne	r2,zero,4090 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	10800f03 	ldbu	r2,60(r2)
    4070:	10803fcc 	andi	r2,r2,255
    4074:	10000426 	beq	r2,zero,4088 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4078:	e0bffe17 	ldw	r2,-8(fp)
    407c:	10000f05 	stb	zero,60(r2)
                        return true;
    4080:	00800044 	movi	r2,1
    4084:	00002806 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4088:	0005883a 	mov	r2,zero
    408c:	00002606 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800258 	cmpnei	r2,r2,9
    4098:	10000a1e 	bne	r2,zero,40c4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    409c:	e0bffe17 	ldw	r2,-8(fp)
    40a0:	10800f43 	ldbu	r2,61(r2)
    40a4:	10803fcc 	andi	r2,r2,255
    40a8:	10000426 	beq	r2,zero,40bc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10000f45 	stb	zero,61(r2)
                        return true;
    40b4:	00800044 	movi	r2,1
    40b8:	00001b06 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    40bc:	0005883a 	mov	r2,zero
    40c0:	00001906 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10803fcc 	andi	r2,r2,255
    40cc:	1087883a 	add	r3,r2,r2
    40d0:	008000b4 	movhi	r2,2
    40d4:	108f1c84 	addi	r2,r2,15474
    40d8:	1885883a 	add	r2,r3,r2
    40dc:	1080000b 	ldhu	r2,0(r2)
    40e0:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    40e4:	e0bffe17 	ldw	r2,-8(fp)
    40e8:	10c00a8b 	ldhu	r3,42(r2)
    40ec:	e0bffd0b 	ldhu	r2,-12(fp)
    40f0:	1884703a 	and	r2,r3,r2
    40f4:	10bfffcc 	andi	r2,r2,65535
    40f8:	1004c03a 	cmpne	r2,r2,zero
    40fc:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4100:	e0bffe17 	ldw	r2,-8(fp)
    4104:	10800a8b 	ldhu	r2,42(r2)
    4108:	1007883a 	mov	r3,r2
    410c:	e0bffd0b 	ldhu	r2,-12(fp)
    4110:	0084303a 	nor	r2,zero,r2
    4114:	1884703a 	and	r2,r3,r2
    4118:	1007883a 	mov	r3,r2
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00a8d 	sth	r3,42(r2)
        return click;
    4124:	e0bffd83 	ldbu	r2,-10(fp)
}
    4128:	e037883a 	mov	sp,fp
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00104 	addi	sp,sp,4
    4134:	f800283a 	ret

00004138 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4138:	defffd04 	addi	sp,sp,-12
    413c:	df000215 	stw	fp,8(sp)
    4140:	df000204 	addi	fp,sp,8
    4144:	e13ffe15 	stw	r4,-8(fp)
    4148:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	e0fffe17 	ldw	r3,-8(fp)
    4154:	10800584 	addi	r2,r2,22
    4158:	1085883a 	add	r2,r2,r2
    415c:	1885883a 	add	r2,r3,r2
    4160:	1080000b 	ldhu	r2,0(r2)
}
    4164:	e037883a 	mov	sp,fp
    4168:	df000017 	ldw	fp,0(sp)
    416c:	dec00104 	addi	sp,sp,4
    4170:	f800283a 	ret

00004174 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4174:	defff904 	addi	sp,sp,-28
    4178:	dfc00615 	stw	ra,24(sp)
    417c:	df000515 	stw	fp,20(sp)
    4180:	df000504 	addi	fp,sp,20
    4184:	e13ffd15 	stw	r4,-12(fp)
    4188:	e17ffe15 	stw	r5,-8(fp)
    418c:	3005883a 	mov	r2,r6
    4190:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4194:	e0bffe17 	ldw	r2,-8(fp)
    4198:	10c00084 	addi	r3,r2,2
    419c:	e0bffd17 	ldw	r2,-12(fp)
    41a0:	10801f83 	ldbu	r2,126(r2)
    41a4:	11000044 	addi	r4,r2,1
    41a8:	200b883a 	mov	r5,r4
    41ac:	e13ffd17 	ldw	r4,-12(fp)
    41b0:	21401f85 	stb	r5,126(r4)
    41b4:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    41b8:	e0bffd17 	ldw	r2,-12(fp)
    41bc:	10c00317 	ldw	r3,12(r2)
    41c0:	e0bffd17 	ldw	r2,-12(fp)
    41c4:	10800403 	ldbu	r2,16(r2)
    41c8:	11003fcc 	andi	r4,r2,255
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800503 	ldbu	r2,20(r2)
    41d4:	11403fcc 	andi	r5,r2,255
    41d8:	e1bfff0b 	ldhu	r6,-4(fp)
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	d8800015 	stw	r2,0(sp)
    41e4:	300f883a 	mov	r7,r6
    41e8:	280d883a 	mov	r6,r5
    41ec:	200b883a 	mov	r5,r4
    41f0:	1809883a 	mov	r4,r3
    41f4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    41f8:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    41fc:	e0bffc03 	ldbu	r2,-16(fp)
}
    4200:	e037883a 	mov	sp,fp
    4204:	dfc00117 	ldw	ra,4(sp)
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00204 	addi	sp,sp,8
    4210:	f800283a 	ret

00004214 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4214:	defff904 	addi	sp,sp,-28
    4218:	dfc00615 	stw	ra,24(sp)
    421c:	df000515 	stw	fp,20(sp)
    4220:	df000504 	addi	fp,sp,20
    4224:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4228:	00800244 	movi	r2,9
    422c:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4230:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4234:	00800244 	movi	r2,9
    4238:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    423c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4240:	008003c4 	movi	r2,15
    4244:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4248:	00800104 	movi	r2,4
    424c:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4250:	00800104 	movi	r2,4
    4254:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4258:	00800804 	movi	r2,32
    425c:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4260:	00800804 	movi	r2,32
    4264:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4268:	00bfe004 	movi	r2,-128
    426c:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4270:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4274:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4278:	01800344 	movi	r6,13
    427c:	e17ffb04 	addi	r5,fp,-20
    4280:	e13fff17 	ldw	r4,-4(fp)
    4284:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10800817 	ldw	r2,32(r2)
    4290:	10000326 	beq	r2,zero,42a0 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10800817 	ldw	r2,32(r2)
    429c:	103ee83a 	callr	r2
}
    42a0:	0001883a 	nop
    42a4:	e037883a 	mov	sp,fp
    42a8:	dfc00117 	ldw	ra,4(sp)
    42ac:	df000017 	ldw	fp,0(sp)
    42b0:	dec00204 	addi	sp,sp,8
    42b4:	f800283a 	ret

000042b8 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    42b8:	defff904 	addi	sp,sp,-28
    42bc:	dfc00615 	stw	ra,24(sp)
    42c0:	df000515 	stw	fp,20(sp)
    42c4:	df000504 	addi	fp,sp,20
    42c8:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    42cc:	00800244 	movi	r2,9
    42d0:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    42d4:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    42d8:	00800244 	movi	r2,9
    42dc:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    42e0:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    42e4:	008003c4 	movi	r2,15
    42e8:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    42ec:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    42f0:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    42f4:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    42f8:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    42fc:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4300:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4304:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4308:	01800344 	movi	r6,13
    430c:	e17ffb04 	addi	r5,fp,-20
    4310:	e13fff17 	ldw	r4,-4(fp)
    4314:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    4318:	0001883a 	nop
    431c:	e037883a 	mov	sp,fp
    4320:	dfc00117 	ldw	ra,4(sp)
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00204 	addi	sp,sp,8
    432c:	f800283a 	ret

00004330 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4330:	defff504 	addi	sp,sp,-44
    4334:	dfc00a15 	stw	ra,40(sp)
    4338:	df000915 	stw	fp,36(sp)
    433c:	df000904 	addi	fp,sp,36
    4340:	e13ffb15 	stw	r4,-20(fp)
    4344:	3009883a 	mov	r4,r6
    4348:	3807883a 	mov	r3,r7
    434c:	e0800217 	ldw	r2,8(fp)
    4350:	e17ffc05 	stb	r5,-16(fp)
    4354:	e13ffd05 	stb	r4,-12(fp)
    4358:	e0fffe05 	stb	r3,-8(fp)
    435c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4360:	00800244 	movi	r2,9
    4364:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4368:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    436c:	00800244 	movi	r2,9
    4370:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4374:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4378:	008003c4 	movi	r2,15
    437c:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4380:	e0bffc03 	ldbu	r2,-16(fp)
    4384:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4388:	e0bffd03 	ldbu	r2,-12(fp)
    438c:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4390:	e0bffe03 	ldbu	r2,-8(fp)
    4394:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4398:	e0bfff03 	ldbu	r2,-4(fp)
    439c:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    43a0:	00bfffc4 	movi	r2,-1
    43a4:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    43a8:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    43ac:	00bfffc4 	movi	r2,-1
    43b0:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    43b4:	01800344 	movi	r6,13
    43b8:	e17ff704 	addi	r5,fp,-36
    43bc:	e13ffb17 	ldw	r4,-20(fp)
    43c0:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    43c4:	0001883a 	nop
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    43dc:	defffe04 	addi	sp,sp,-8
    43e0:	df000115 	stw	fp,4(sp)
    43e4:	df000104 	addi	fp,sp,4
    43e8:	e13fff15 	stw	r4,-4(fp)
    43ec:	e0bfff17 	ldw	r2,-4(fp)
    43f0:	10000005 	stb	zero,0(r2)
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10c00043 	ldbu	r3,1(r2)
    43fc:	1806703a 	and	r3,r3,zero
    4400:	10c00045 	stb	r3,1(r2)
    4404:	10c00083 	ldbu	r3,2(r2)
    4408:	1806703a 	and	r3,r3,zero
    440c:	10c00085 	stb	r3,2(r2)
    4410:	10c000c3 	ldbu	r3,3(r2)
    4414:	1806703a 	and	r3,r3,zero
    4418:	10c000c5 	stb	r3,3(r2)
    441c:	10c00103 	ldbu	r3,4(r2)
    4420:	1806703a 	and	r3,r3,zero
    4424:	10c00105 	stb	r3,4(r2)
        };
    4428:	0001883a 	nop
    442c:	e037883a 	mov	sp,fp
    4430:	df000017 	ldw	fp,0(sp)
    4434:	dec00104 	addi	sp,sp,4
    4438:	f800283a 	ret

0000443c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    443c:	defffe04 	addi	sp,sp,-8
    4440:	df000115 	stw	fp,4(sp)
    4444:	df000104 	addi	fp,sp,4
    4448:	e13fff15 	stw	r4,-4(fp)
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10000015 	stw	zero,0(r2)
    4454:	e0bfff17 	ldw	r2,-4(fp)
    4458:	10000105 	stb	zero,4(r2)
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10000145 	stb	zero,5(r2)
        };
    4464:	0001883a 	nop
    4468:	e037883a 	mov	sp,fp
    446c:	df000017 	ldw	fp,0(sp)
    4470:	dec00104 	addi	sp,sp,4
    4474:	f800283a 	ret

00004478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4478:	defffd04 	addi	sp,sp,-12
    447c:	df000215 	stw	fp,8(sp)
    4480:	df000204 	addi	fp,sp,8
    4484:	e13ffe15 	stw	r4,-8(fp)
    4488:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10c00043 	ldbu	r3,1(r2)
    4494:	11000083 	ldbu	r4,2(r2)
    4498:	2008923a 	slli	r4,r4,8
    449c:	20c6b03a 	or	r3,r4,r3
    44a0:	110000c3 	ldbu	r4,3(r2)
    44a4:	2008943a 	slli	r4,r4,16
    44a8:	20c6b03a 	or	r3,r4,r3
    44ac:	10800103 	ldbu	r2,4(r2)
    44b0:	1004963a 	slli	r2,r2,24
    44b4:	10c4b03a 	or	r2,r2,r3
    44b8:	1007883a 	mov	r3,r2
    44bc:	e0bffe17 	ldw	r2,-8(fp)
    44c0:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    44c4:	e0bfff17 	ldw	r2,-4(fp)
    44c8:	10c00003 	ldbu	r3,0(r2)
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00145 	stb	r3,5(r2)
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10c00143 	ldbu	r3,5(r2)
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	10c00105 	stb	r3,4(r2)
        };
    44e4:	0001883a 	nop
    44e8:	e037883a 	mov	sp,fp
    44ec:	df000017 	ldw	fp,0(sp)
    44f0:	dec00104 	addi	sp,sp,4
    44f4:	f800283a 	ret

000044f8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    44f8:	defffe04 	addi	sp,sp,-8
    44fc:	df000115 	stw	fp,4(sp)
    4500:	df000104 	addi	fp,sp,4
    4504:	e13fff15 	stw	r4,-4(fp)
    4508:	e0bfff17 	ldw	r2,-4(fp)
    450c:	10000015 	stw	zero,0(r2)
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	10000105 	stb	zero,4(r2)
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	1000018d 	sth	zero,6(r2)
        };
    4520:	0001883a 	nop
    4524:	e037883a 	mov	sp,fp
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00104 	addi	sp,sp,4
    4530:	f800283a 	ret

00004534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4534:	defffd04 	addi	sp,sp,-12
    4538:	df000215 	stw	fp,8(sp)
    453c:	df000204 	addi	fp,sp,8
    4540:	e13ffe15 	stw	r4,-8(fp)
    4544:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4548:	e0bfff17 	ldw	r2,-4(fp)
    454c:	10c00043 	ldbu	r3,1(r2)
    4550:	11000083 	ldbu	r4,2(r2)
    4554:	2008923a 	slli	r4,r4,8
    4558:	20c6b03a 	or	r3,r4,r3
    455c:	110000c3 	ldbu	r4,3(r2)
    4560:	2008943a 	slli	r4,r4,16
    4564:	20c6b03a 	or	r3,r4,r3
    4568:	10800103 	ldbu	r2,4(r2)
    456c:	1004963a 	slli	r2,r2,24
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	1007883a 	mov	r3,r2
    4578:	e0bffe17 	ldw	r2,-8(fp)
    457c:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	1000018d 	sth	zero,6(r2)
        };
    4588:	0001883a 	nop
    458c:	e037883a 	mov	sp,fp
    4590:	df000017 	ldw	fp,0(sp)
    4594:	dec00104 	addi	sp,sp,4
    4598:	f800283a 	ret

0000459c <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    459c:	defffb04 	addi	sp,sp,-20
    45a0:	df000415 	stw	fp,16(sp)
    45a4:	df000404 	addi	fp,sp,16
    45a8:	e13ffc15 	stw	r4,-16(fp)
    45ac:	e17ffd15 	stw	r5,-12(fp)
    45b0:	e1bffe15 	stw	r6,-8(fp)
    45b4:	3805883a 	mov	r2,r7
    45b8:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	10800103 	ldbu	r2,4(r2)
    45c4:	10803fcc 	andi	r2,r2,255
    45c8:	10000326 	beq	r2,zero,45d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    45cc:	10800060 	cmpeqi	r2,r2,1
    45d0:	10000a1e 	bne	r2,zero,45fc <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    45d4:	00002906 	br	467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	e0ffff0b 	ldhu	r3,-4(fp)
    45e0:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	10800103 	ldbu	r2,4(r2)
    45ec:	10800044 	addi	r2,r2,1
    45f0:	1007883a 	mov	r3,r2
    45f4:	e0bffc17 	ldw	r2,-16(fp)
    45f8:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    45fc:	e0bffc17 	ldw	r2,-16(fp)
    4600:	1080018b 	ldhu	r2,6(r2)
    4604:	10bfffcc 	andi	r2,r2,65535
    4608:	10001626 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	1080000b 	ldhu	r2,0(r2)
    4614:	10bfffcc 	andi	r2,r2,65535
    4618:	10001226 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    461c:	e0bffc17 	ldw	r2,-16(fp)
    4620:	1080018b 	ldhu	r2,6(r2)
    4624:	10bfffc4 	addi	r2,r2,-1
    4628:	1007883a 	mov	r3,r2
    462c:	e0bffc17 	ldw	r2,-16(fp)
    4630:	10c0018d 	sth	r3,6(r2)
    4634:	e0bffd17 	ldw	r2,-12(fp)
    4638:	10800017 	ldw	r2,0(r2)
    463c:	10c00044 	addi	r3,r2,1
    4640:	e0bffd17 	ldw	r2,-12(fp)
    4644:	10c00015 	stw	r3,0(r2)
    4648:	e0bffe17 	ldw	r2,-8(fp)
    464c:	1080000b 	ldhu	r2,0(r2)
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	1007883a 	mov	r3,r2
    4658:	e0bffe17 	ldw	r2,-8(fp)
    465c:	10c0000d 	sth	r3,0(r2)
    4660:	003fe606 	br	45fc <__alt_data_end+0xfc0045fc>

                                if(!countDown)
    4664:	e0bffc17 	ldw	r2,-16(fp)
    4668:	1080018b 	ldhu	r2,6(r2)
    466c:	10bfffcc 	andi	r2,r2,65535
    4670:	1000021e 	bne	r2,zero,467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	1080018b 	ldhu	r2,6(r2)
    4684:	10bfffcc 	andi	r2,r2,65535
    4688:	1005003a 	cmpeq	r2,r2,zero
        };
    468c:	e037883a 	mov	sp,fp
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00104 	addi	sp,sp,4
    4698:	f800283a 	ret

0000469c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    469c:	defffb04 	addi	sp,sp,-20
    46a0:	df000415 	stw	fp,16(sp)
    46a4:	df000404 	addi	fp,sp,16
    46a8:	e13ffc15 	stw	r4,-16(fp)
    46ac:	2809883a 	mov	r4,r5
    46b0:	3007883a 	mov	r3,r6
    46b4:	3805883a 	mov	r2,r7
    46b8:	e13ffd05 	stb	r4,-12(fp)
    46bc:	e0fffe05 	stb	r3,-8(fp)
    46c0:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    46c4:	0005883a 	mov	r2,zero
        }
    46c8:	e037883a 	mov	sp,fp
    46cc:	df000017 	ldw	fp,0(sp)
    46d0:	dec00104 	addi	sp,sp,4
    46d4:	f800283a 	ret

000046d8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    46d8:	defffb04 	addi	sp,sp,-20
    46dc:	df000415 	stw	fp,16(sp)
    46e0:	df000404 	addi	fp,sp,16
    46e4:	e13ffc15 	stw	r4,-16(fp)
    46e8:	2809883a 	mov	r4,r5
    46ec:	3007883a 	mov	r3,r6
    46f0:	3805883a 	mov	r2,r7
    46f4:	e13ffd05 	stb	r4,-12(fp)
    46f8:	e0fffe05 	stb	r3,-8(fp)
    46fc:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4700:	0005883a 	mov	r2,zero
        }
    4704:	e037883a 	mov	sp,fp
    4708:	df000017 	ldw	fp,0(sp)
    470c:	dec00104 	addi	sp,sp,4
    4710:	f800283a 	ret

00004714 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4714:	defffe04 	addi	sp,sp,-8
    4718:	df000115 	stw	fp,4(sp)
    471c:	df000104 	addi	fp,sp,4
    4720:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4724:	0005883a 	mov	r2,zero
        }
    4728:	e037883a 	mov	sp,fp
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00104 	addi	sp,sp,4
    4734:	f800283a 	ret

00004738 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4738:	defffe04 	addi	sp,sp,-8
    473c:	df000115 	stw	fp,4(sp)
    4740:	df000104 	addi	fp,sp,4
    4744:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4748:	0005883a 	mov	r2,zero
        }
    474c:	e037883a 	mov	sp,fp
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00104 	addi	sp,sp,4
    4758:	f800283a 	ret

0000475c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    475c:	defffe04 	addi	sp,sp,-8
    4760:	df000115 	stw	fp,4(sp)
    4764:	df000104 	addi	fp,sp,4
    4768:	e13fff15 	stw	r4,-4(fp)
                return 0;
    476c:	0005883a 	mov	r2,zero
        }
    4770:	e037883a 	mov	sp,fp
    4774:	df000017 	ldw	fp,0(sp)
    4778:	dec00104 	addi	sp,sp,4
    477c:	f800283a 	ret

00004780 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4780:	defffd04 	addi	sp,sp,-12
    4784:	df000215 	stw	fp,8(sp)
    4788:	df000204 	addi	fp,sp,8
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	2805883a 	mov	r2,r5
    4794:	e0bfff05 	stb	r2,-4(fp)
                return;
    4798:	0001883a 	nop
        } // Note used for hubs only!
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    47ac:	defffc04 	addi	sp,sp,-16
    47b0:	df000315 	stw	fp,12(sp)
    47b4:	df000304 	addi	fp,sp,12
    47b8:	e13ffd15 	stw	r4,-12(fp)
    47bc:	2807883a 	mov	r3,r5
    47c0:	3005883a 	mov	r2,r6
    47c4:	e0fffe0d 	sth	r3,-8(fp)
    47c8:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    47cc:	0005883a 	mov	r2,zero
        }
    47d0:	e037883a 	mov	sp,fp
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00104 	addi	sp,sp,4
    47dc:	f800283a 	ret

000047e0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    47e0:	defffd04 	addi	sp,sp,-12
    47e4:	df000215 	stw	fp,8(sp)
    47e8:	df000204 	addi	fp,sp,8
    47ec:	e13ffe15 	stw	r4,-8(fp)
    47f0:	2805883a 	mov	r2,r5
    47f4:	e0bfff05 	stb	r2,-4(fp)
                return false;
    47f8:	0005883a 	mov	r2,zero
        }
    47fc:	e037883a 	mov	sp,fp
    4800:	df000017 	ldw	fp,0(sp)
    4804:	dec00104 	addi	sp,sp,4
    4808:	f800283a 	ret

0000480c <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    480c:	defffd04 	addi	sp,sp,-12
    4810:	df000215 	stw	fp,8(sp)
    4814:	df000204 	addi	fp,sp,8
    4818:	e13ffe15 	stw	r4,-8(fp)
    481c:	2805883a 	mov	r2,r5
    4820:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4824:	00800044 	movi	r2,1
        }
    4828:	e037883a 	mov	sp,fp
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00104 	addi	sp,sp,4
    4834:	f800283a 	ret

00004838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4838:	defffc04 	addi	sp,sp,-16
    483c:	df000315 	stw	fp,12(sp)
    4840:	df000304 	addi	fp,sp,12
    4844:	e13ffe15 	stw	r4,-8(fp)
    4848:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    484c:	e03ffd05 	stb	zero,-12(fp)
    4850:	e0bffd03 	ldbu	r2,-12(fp)
    4854:	10800428 	cmpgeui	r2,r2,16
    4858:	1000161e 	bne	r2,zero,48b4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    485c:	e0bffd03 	ldbu	r2,-12(fp)
    4860:	e0fffe17 	ldw	r3,-8(fp)
    4864:	10800784 	addi	r2,r2,30
    4868:	1085883a 	add	r2,r2,r2
    486c:	1085883a 	add	r2,r2,r2
    4870:	1885883a 	add	r2,r3,r2
    4874:	10800017 	ldw	r2,0(r2)
    4878:	10000a1e 	bne	r2,zero,48a4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    487c:	e0bffd03 	ldbu	r2,-12(fp)
    4880:	e0fffe17 	ldw	r3,-8(fp)
    4884:	10800784 	addi	r2,r2,30
    4888:	1085883a 	add	r2,r2,r2
    488c:	1085883a 	add	r2,r2,r2
    4890:	1885883a 	add	r2,r3,r2
    4894:	e0ffff17 	ldw	r3,-4(fp)
    4898:	10c00015 	stw	r3,0(r2)
                                return 0;
    489c:	0005883a 	mov	r2,zero
    48a0:	00000506 	br	48b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    48a4:	e0bffd03 	ldbu	r2,-12(fp)
    48a8:	10800044 	addi	r2,r2,1
    48ac:	e0bffd05 	stb	r2,-12(fp)
    48b0:	003fe706 	br	4850 <__alt_data_end+0xfc004850>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    48b4:	00bff4c4 	movi	r2,-45
        };
    48b8:	e037883a 	mov	sp,fp
    48bc:	df000017 	ldw	fp,0(sp)
    48c0:	dec00104 	addi	sp,sp,4
    48c4:	f800283a 	ret

000048c8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    48c8:	defffa04 	addi	sp,sp,-24
    48cc:	df000515 	stw	fp,20(sp)
    48d0:	df000504 	addi	fp,sp,20
    48d4:	e13ffb15 	stw	r4,-20(fp)
    48d8:	3009883a 	mov	r4,r6
    48dc:	3807883a 	mov	r3,r7
    48e0:	e0800117 	ldw	r2,4(fp)
    48e4:	e17ffc05 	stb	r5,-16(fp)
    48e8:	e13ffd05 	stb	r4,-12(fp)
    48ec:	e0fffe05 	stb	r3,-8(fp)
    48f0:	e0bfff05 	stb	r2,-4(fp)
        };
    48f4:	0001883a 	nop
    48f8:	e037883a 	mov	sp,fp
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	f800283a 	ret

00004908 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4908:	defffe04 	addi	sp,sp,-8
    490c:	df000115 	stw	fp,4(sp)
    4910:	df000104 	addi	fp,sp,4
    4914:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4918:	e0bfff17 	ldw	r2,-4(fp)
    491c:	10800403 	ldbu	r2,16(r2)
        };
    4920:	e037883a 	mov	sp,fp
    4924:	df000017 	ldw	fp,0(sp)
    4928:	dec00104 	addi	sp,sp,4
    492c:	f800283a 	ret

00004930 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4930:	defffe04 	addi	sp,sp,-8
    4934:	df000115 	stw	fp,4(sp)
    4938:	df000104 	addi	fp,sp,4
    493c:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10800943 	ldbu	r2,37(r2)
        };
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4958:	defffc04 	addi	sp,sp,-16
    495c:	df000315 	stw	fp,12(sp)
    4960:	df000304 	addi	fp,sp,12
    4964:	e13ffd15 	stw	r4,-12(fp)
    4968:	2807883a 	mov	r3,r5
    496c:	3005883a 	mov	r2,r6
    4970:	e0fffe0d 	sth	r3,-8(fp)
    4974:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4978:	e0bffe0b 	ldhu	r2,-8(fp)
    497c:	108117a0 	cmpeqi	r2,r2,1118
    4980:	10000f1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4984:	e0bffe0b 	ldhu	r2,-8(fp)
    4988:	1081ce20 	cmpeqi	r2,r2,1848
    498c:	10000c1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4990:	e0bffe0b 	ldhu	r2,-8(fp)
    4994:	10839be0 	cmpeqi	r2,r2,3695
    4998:	1000091e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    499c:	e0bffe0b 	ldhu	r2,-8(fp)
    49a0:	1083c360 	cmpeqi	r2,r2,3853
    49a4:	1000061e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49a8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ac:	10854ca0 	cmpeqi	r2,r2,5426
    49b0:	1000031e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49b4:	e0bffe0b 	ldhu	r2,-8(fp)
    49b8:	10893198 	cmpnei	r2,r2,9414
    49bc:	10002c1e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    49c0:	e0bfff0b 	ldhu	r2,-4(fp)
    49c4:	1080b460 	cmpeqi	r2,r2,721
    49c8:	1000271e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    49cc:	e0bfff0b 	ldhu	r2,-4(fp)
    49d0:	1080b760 	cmpeqi	r2,r2,733
    49d4:	1000241e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49d8:	e0bfff0b 	ldhu	r2,-4(fp)
    49dc:	1080b8e0 	cmpeqi	r2,r2,739
    49e0:	1000211e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49e4:	e0bfff0b 	ldhu	r2,-4(fp)
    49e8:	1080baa0 	cmpeqi	r2,r2,746
    49ec:	10001e1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49f0:	e0bfff0b 	ldhu	r2,-4(fp)
    49f4:	10928060 	cmpeqi	r2,r2,18945
    49f8:	10001b1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    49fc:	e0bfff0b 	ldhu	r2,-4(fp)
    4a00:	10804e60 	cmpeqi	r2,r2,313
    4a04:	1000181e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a08:	e0bfff0b 	ldhu	r2,-4(fp)
    4a0c:	108051a0 	cmpeqi	r2,r2,326
    4a10:	1000151e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a14:	e0bfff0b 	ldhu	r2,-4(fp)
    4a18:	108019e0 	cmpeqi	r2,r2,103
    4a1c:	1000121e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a20:	e0bfff0b 	ldhu	r2,-4(fp)
    4a24:	108280e0 	cmpeqi	r2,r2,2563
    4a28:	10000f1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4a2c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a30:	109506a0 	cmpeqi	r2,r2,21530
    4a34:	10000c1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a38:	e0bfff0b 	ldhu	r2,-4(fp)
    4a3c:	10950aa0 	cmpeqi	r2,r2,21546
    4a40:	1000091e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a44:	e0bfff0b 	ldhu	r2,-4(fp)
    4a48:	10950ea0 	cmpeqi	r2,r2,21562
    4a4c:	1000061e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a50:	e0bfff0b 	ldhu	r2,-4(fp)
    4a54:	1082c2a0 	cmpeqi	r2,r2,2826
    4a58:	1000031e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4a5c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a60:	1082c498 	cmpnei	r2,r2,2834
    4a64:	1000021e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4a68:	00800044 	movi	r2,1
    4a6c:	00000106 	br	4a74 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4a70:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4a84:	defffe04 	addi	sp,sp,-8
    4a88:	df000115 	stw	fp,4(sp)
    4a8c:	df000104 	addi	fp,sp,4
    4a90:	e13fff15 	stw	r4,-4(fp)
    4a94:	008000b4 	movhi	r2,2
    4a98:	108f4104 	addi	r2,r2,15620
    4a9c:	e0ffff17 	ldw	r3,-4(fp)
    4aa0:	18800015 	stw	r2,0(r3)
    4aa4:	0001883a 	nop
    4aa8:	e037883a 	mov	sp,fp
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00104 	addi	sp,sp,4
    4ab4:	f800283a 	ret

00004ab8 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ab8:	defffe04 	addi	sp,sp,-8
    4abc:	df000115 	stw	fp,4(sp)
    4ac0:	df000104 	addi	fp,sp,4
    4ac4:	e13fff15 	stw	r4,-4(fp)
    4ac8:	008000b4 	movhi	r2,2
    4acc:	108f3b04 	addi	r2,r2,15596
    4ad0:	e0ffff17 	ldw	r3,-4(fp)
    4ad4:	18800015 	stw	r2,0(r3)
    4ad8:	0001883a 	nop
    4adc:	e037883a 	mov	sp,fp
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00104 	addi	sp,sp,4
    4ae8:	f800283a 	ret

00004aec <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4aec:	defffe04 	addi	sp,sp,-8
    4af0:	df000115 	stw	fp,4(sp)
    4af4:	df000104 	addi	fp,sp,4
    4af8:	e13fff15 	stw	r4,-4(fp)
    4afc:	008000b4 	movhi	r2,2
    4b00:	108f3e04 	addi	r2,r2,15608
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	18800015 	stw	r2,0(r3)
    4b0c:	0001883a 	nop
    4b10:	e037883a 	mov	sp,fp
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00104 	addi	sp,sp,4
    4b1c:	f800283a 	ret

00004b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4b20:	defffc04 	addi	sp,sp,-16
    4b24:	dfc00315 	stw	ra,12(sp)
    4b28:	df000215 	stw	fp,8(sp)
    4b2c:	df000204 	addi	fp,sp,8
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	1009883a 	mov	r4,r2
    4b40:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    4b44:	008000b4 	movhi	r2,2
    4b48:	108f3804 	addi	r2,r2,15584
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	18800015 	stw	r2,0(r3)
    4b54:	e0bffe17 	ldw	r2,-8(fp)
    4b58:	e0ffff17 	ldw	r3,-4(fp)
    4b5c:	10c00115 	stw	r3,4(r2)
    4b60:	e0bffe17 	ldw	r2,-8(fp)
    4b64:	10800204 	addi	r2,r2,8
    4b68:	1009883a 	mov	r4,r2
    4b6c:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    4b70:	e0bffe17 	ldw	r2,-8(fp)
    4b74:	10800404 	addi	r2,r2,16
    4b78:	1009883a 	mov	r4,r2
    4b7c:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    4b80:	e0bffe17 	ldw	r2,-8(fp)
    4b84:	10800604 	addi	r2,r2,24
    4b88:	1009883a 	mov	r4,r2
    4b8c:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    4b90:	e0bffe17 	ldw	r2,-8(fp)
    4b94:	10000c05 	stb	zero,48(r2)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	10000c45 	stb	zero,49(r2)
    4ba0:	e0bffe17 	ldw	r2,-8(fp)
    4ba4:	10000c85 	stb	zero,50(r2)
    4ba8:	e0bffe17 	ldw	r2,-8(fp)
    4bac:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10c00804 	addi	r3,r2,32
    4bb8:	e0bffe17 	ldw	r2,-8(fp)
    4bbc:	19803fcc 	andi	r6,r3,255
    4bc0:	11000243 	ldbu	r4,9(r2)
    4bc4:	2008703a 	and	r4,r4,zero
    4bc8:	200b883a 	mov	r5,r4
    4bcc:	3009883a 	mov	r4,r6
    4bd0:	2908b03a 	or	r4,r5,r4
    4bd4:	11000245 	stb	r4,9(r2)
    4bd8:	1808d23a 	srli	r4,r3,8
    4bdc:	21803fcc 	andi	r6,r4,255
    4be0:	11000283 	ldbu	r4,10(r2)
    4be4:	2008703a 	and	r4,r4,zero
    4be8:	200b883a 	mov	r5,r4
    4bec:	3009883a 	mov	r4,r6
    4bf0:	2908b03a 	or	r4,r5,r4
    4bf4:	11000285 	stb	r4,10(r2)
    4bf8:	1808d43a 	srli	r4,r3,16
    4bfc:	21803fcc 	andi	r6,r4,255
    4c00:	110002c3 	ldbu	r4,11(r2)
    4c04:	2008703a 	and	r4,r4,zero
    4c08:	200b883a 	mov	r5,r4
    4c0c:	3009883a 	mov	r4,r6
    4c10:	2908b03a 	or	r4,r5,r4
    4c14:	110002c5 	stb	r4,11(r2)
    4c18:	180ad63a 	srli	r5,r3,24
    4c1c:	10c00303 	ldbu	r3,12(r2)
    4c20:	1806703a 	and	r3,r3,zero
    4c24:	1809883a 	mov	r4,r3
    4c28:	2807883a 	mov	r3,r5
    4c2c:	20c6b03a 	or	r3,r4,r3
    4c30:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    4c34:	e0bffe17 	ldw	r2,-8(fp)
    4c38:	10c00404 	addi	r3,r2,16
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	10800204 	addi	r2,r2,8
    4c44:	100b883a 	mov	r5,r2
    4c48:	1809883a 	mov	r4,r3
    4c4c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10c00604 	addi	r3,r2,24
    4c58:	e0bffe17 	ldw	r2,-8(fp)
    4c5c:	10800204 	addi	r2,r2,8
    4c60:	100b883a 	mov	r5,r2
    4c64:	1809883a 	mov	r4,r3
    4c68:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    4c6c:	0001883a 	nop
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    4c84:	defff804 	addi	sp,sp,-32
    4c88:	dfc00715 	stw	ra,28(sp)
    4c8c:	df000615 	stw	fp,24(sp)
    4c90:	df000604 	addi	fp,sp,24
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	2805883a 	mov	r2,r5
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
    4ca4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    4ca8:	e0bffd0b 	ldhu	r2,-12(fp)
    4cac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    4cb0:	e0bffe17 	ldw	r2,-8(fp)
    4cb4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    4cb8:	e0bffa0b 	ldhu	r2,-24(fp)
    4cbc:	10bfffcc 	andi	r2,r2,65535
    4cc0:	10000a26 	beq	r2,zero,4cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    4cc4:	e0bffb04 	addi	r2,fp,-20
    4cc8:	e1bffa04 	addi	r6,fp,-24
    4ccc:	100b883a 	mov	r5,r2
    4cd0:	e13ffc17 	ldw	r4,-16(fp)
    4cd4:	0004d000 	call	4d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    4cd8:	1080005c 	xori	r2,r2,1
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	1000011e 	bne	r2,zero,4ce8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    4ce4:	003ff406 	br	4cb8 <__alt_data_end+0xfc004cb8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    4ce8:	0001883a 	nop
}
    4cec:	e037883a 	mov	sp,fp
    4cf0:	dfc00117 	ldw	ra,4(sp)
    4cf4:	df000017 	ldw	fp,0(sp)
    4cf8:	dec00204 	addi	sp,sp,8
    4cfc:	f800283a 	ret

00004d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    4d00:	defff604 	addi	sp,sp,-40
    4d04:	dfc00915 	stw	ra,36(sp)
    4d08:	df000815 	stw	fp,32(sp)
    4d0c:	df000804 	addi	fp,sp,32
    4d10:	e13ffc15 	stw	r4,-16(fp)
    4d14:	e17ffd15 	stw	r5,-12(fp)
    4d18:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	10800804 	addi	r2,r2,32
    4d24:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	10800804 	addi	r2,r2,32
    4d30:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800c03 	ldbu	r2,48(r2)
    4d3c:	10803fcc 	andi	r2,r2,255
    4d40:	10c00168 	cmpgeui	r3,r2,5
    4d44:	1801141e 	bne	r3,zero,5198 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    4d48:	100690ba 	slli	r3,r2,2
    4d4c:	00800034 	movhi	r2,0
    4d50:	10935804 	addi	r2,r2,19808
    4d54:	1885883a 	add	r2,r3,r2
    4d58:	10800017 	ldw	r2,0(r2)
    4d5c:	1000683a 	jmp	r2
    4d60:	00004d74 	movhi	zero,309
    4d64:	00004da8 	cmpgeui	zero,zero,310
    4d68:	00004e30 	cmpltui	zero,zero,312
    4d6c:	00004ec4 	movi	zero,315
    4d70:	00004f30 	cmpltui	zero,zero,316
                case 0:
                        theBuffer.valueSize = 2;
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	00c00084 	movi	r3,2
    4d7c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4d80:	e0bffc17 	ldw	r2,-16(fp)
    4d84:	10c00404 	addi	r3,r2,16
    4d88:	e0bffc17 	ldw	r2,-16(fp)
    4d8c:	10800204 	addi	r2,r2,8
    4d90:	100b883a 	mov	r5,r2
    4d94:	1809883a 	mov	r4,r3
    4d98:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    4d9c:	e0bffc17 	ldw	r2,-16(fp)
    4da0:	00c00044 	movi	r3,1
    4da4:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	10800404 	addi	r2,r2,16
    4db0:	e1bffe17 	ldw	r6,-8(fp)
    4db4:	e17ffd17 	ldw	r5,-12(fp)
    4db8:	1009883a 	mov	r4,r2
    4dbc:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4dc0:	1080005c 	xori	r2,r2,1
    4dc4:	10803fcc 	andi	r2,r2,255
    4dc8:	10000226 	beq	r2,zero,4dd4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    4dcc:	0005883a 	mov	r2,zero
    4dd0:	0000f206 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10c00217 	ldw	r3,8(r2)
    4ddc:	1806d23a 	srli	r3,r3,8
    4de0:	10800317 	ldw	r2,12(r2)
    4de4:	10803fcc 	andi	r2,r2,255
    4de8:	1004963a 	slli	r2,r2,24
    4dec:	10c4b03a 	or	r2,r2,r3
    4df0:	10c00003 	ldbu	r3,0(r2)
    4df4:	e0bffc17 	ldw	r2,-16(fp)
    4df8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    4dfc:	e0bffc17 	ldw	r2,-16(fp)
    4e00:	10c00217 	ldw	r3,8(r2)
    4e04:	1806d23a 	srli	r3,r3,8
    4e08:	10800317 	ldw	r2,12(r2)
    4e0c:	10803fcc 	andi	r2,r2,255
    4e10:	1004963a 	slli	r2,r2,24
    4e14:	10c4b03a 	or	r2,r2,r3
    4e18:	10c00043 	ldbu	r3,1(r2)
    4e1c:	e0bffc17 	ldw	r2,-16(fp)
    4e20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    4e24:	e0bffc17 	ldw	r2,-16(fp)
    4e28:	00c00084 	movi	r3,2
    4e2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    4e30:	e0bffc17 	ldw	r2,-16(fp)
    4e34:	10800804 	addi	r2,r2,32
    4e38:	10c00084 	addi	r3,r2,2
    4e3c:	e0bffc17 	ldw	r2,-16(fp)
    4e40:	19803fcc 	andi	r6,r3,255
    4e44:	11000243 	ldbu	r4,9(r2)
    4e48:	2008703a 	and	r4,r4,zero
    4e4c:	200b883a 	mov	r5,r4
    4e50:	3009883a 	mov	r4,r6
    4e54:	2908b03a 	or	r4,r5,r4
    4e58:	11000245 	stb	r4,9(r2)
    4e5c:	1808d23a 	srli	r4,r3,8
    4e60:	21803fcc 	andi	r6,r4,255
    4e64:	11000283 	ldbu	r4,10(r2)
    4e68:	2008703a 	and	r4,r4,zero
    4e6c:	200b883a 	mov	r5,r4
    4e70:	3009883a 	mov	r4,r6
    4e74:	2908b03a 	or	r4,r5,r4
    4e78:	11000285 	stb	r4,10(r2)
    4e7c:	1808d43a 	srli	r4,r3,16
    4e80:	21803fcc 	andi	r6,r4,255
    4e84:	110002c3 	ldbu	r4,11(r2)
    4e88:	2008703a 	and	r4,r4,zero
    4e8c:	200b883a 	mov	r5,r4
    4e90:	3009883a 	mov	r4,r6
    4e94:	2908b03a 	or	r4,r5,r4
    4e98:	110002c5 	stb	r4,11(r2)
    4e9c:	180ad63a 	srli	r5,r3,24
    4ea0:	10c00303 	ldbu	r3,12(r2)
    4ea4:	1806703a 	and	r3,r3,zero
    4ea8:	1809883a 	mov	r4,r3
    4eac:	2807883a 	mov	r3,r5
    4eb0:	20c6b03a 	or	r3,r4,r3
    4eb4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    4eb8:	e0bffc17 	ldw	r2,-16(fp)
    4ebc:	00c000c4 	movi	r3,3
    4ec0:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    4ec4:	e0bffc17 	ldw	r2,-16(fp)
    4ec8:	10800c83 	ldbu	r2,50(r2)
    4ecc:	10803fcc 	andi	r2,r2,255
    4ed0:	10c00120 	cmpeqi	r3,r2,4
    4ed4:	1800021e 	bne	r3,zero,4ee0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    4ed8:	10800148 	cmpgei	r2,r2,5
    4edc:	00000306 	br	4eec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    4ee0:	e0bffc17 	ldw	r2,-16(fp)
    4ee4:	10000cc5 	stb	zero,51(r2)
                                        break;
    4ee8:	00000106 	br	4ef0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    4eec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	10800c43 	ldbu	r2,49(r2)
    4ef8:	10bfff84 	addi	r2,r2,-2
    4efc:	1007883a 	mov	r3,r2
    4f00:	e0bffc17 	ldw	r2,-16(fp)
    4f04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4f08:	e0bffc17 	ldw	r2,-16(fp)
    4f0c:	10c00404 	addi	r3,r2,16
    4f10:	e0bffc17 	ldw	r2,-16(fp)
    4f14:	10800204 	addi	r2,r2,8
    4f18:	100b883a 	mov	r5,r2
    4f1c:	1809883a 	mov	r4,r3
    4f20:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    4f24:	e0bffc17 	ldw	r2,-16(fp)
    4f28:	00c00104 	movi	r3,4
    4f2c:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    4f30:	e0bffc17 	ldw	r2,-16(fp)
    4f34:	10800c83 	ldbu	r2,50(r2)
    4f38:	10803fcc 	andi	r2,r2,255
    4f3c:	10c00120 	cmpeqi	r3,r2,4
    4f40:	1800141e 	bne	r3,zero,4f94 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    4f44:	10c00160 	cmpeqi	r3,r2,5
    4f48:	1800311e 	bne	r3,zero,5010 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    4f4c:	108000a0 	cmpeqi	r2,r2,2
    4f50:	10005a26 	beq	r2,zero,50bc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    4f54:	e0bffc17 	ldw	r2,-16(fp)
    4f58:	10800404 	addi	r2,r2,16
    4f5c:	e1bffe17 	ldw	r6,-8(fp)
    4f60:	e17ffd17 	ldw	r5,-12(fp)
    4f64:	1009883a 	mov	r4,r2
    4f68:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4f6c:	1080005c 	xori	r2,r2,1
    4f70:	10803fcc 	andi	r2,r2,255
    4f74:	10000226 	beq	r2,zero,4f80 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    4f78:	0005883a 	mov	r2,zero
    4f7c:	00008706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    4f80:	e0bffa17 	ldw	r2,-24(fp)
    4f84:	10c00143 	ldbu	r3,5(r2)
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	10c00d05 	stb	r3,52(r2)
                                        break;
    4f90:	00005e06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    4f94:	e0bffc17 	ldw	r2,-16(fp)
    4f98:	10800404 	addi	r2,r2,16
    4f9c:	e1bffe17 	ldw	r6,-8(fp)
    4fa0:	e17ffd17 	ldw	r5,-12(fp)
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4fac:	1080005c 	xori	r2,r2,1
    4fb0:	10803fcc 	andi	r2,r2,255
    4fb4:	10000226 	beq	r2,zero,4fc0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    4fb8:	0005883a 	mov	r2,zero
    4fbc:	00007706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	10800e03 	ldbu	r2,56(r2)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	10004c1e 	bne	r2,zero,5100 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	00c00044 	movi	r3,1
    4fd8:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    4fdc:	e0bffb17 	ldw	r2,-20(fp)
    4fe0:	10c00083 	ldbu	r3,2(r2)
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	10c000c3 	ldbu	r3,3(r2)
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
    5000:	10c001c3 	ldbu	r3,7(r2)
    5004:	e0bffc17 	ldw	r2,-16(fp)
    5008:	10c00d45 	stb	r3,53(r2)
                                        break;
    500c:	00003f06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5010:	e0bffc17 	ldw	r2,-16(fp)
    5014:	10800404 	addi	r2,r2,16
    5018:	e1bffe17 	ldw	r6,-8(fp)
    501c:	e17ffd17 	ldw	r5,-12(fp)
    5020:	1009883a 	mov	r4,r2
    5024:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5028:	1080005c 	xori	r2,r2,1
    502c:	10803fcc 	andi	r2,r2,255
    5030:	10000226 	beq	r2,zero,503c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5034:	0005883a 	mov	r2,zero
    5038:	00005806 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    503c:	e0bffc17 	ldw	r2,-16(fp)
    5040:	10800cc3 	ldbu	r2,51(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	10002f26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    504c:	e0bffc17 	ldw	r2,-16(fp)
    5050:	10800117 	ldw	r2,4(r2)
    5054:	10002c26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10800117 	ldw	r2,4(r2)
    5060:	10800017 	ldw	r2,0(r2)
    5064:	10800017 	ldw	r2,0(r2)
    5068:	e0fffc17 	ldw	r3,-16(fp)
    506c:	1a000117 	ldw	r8,4(r3)
    5070:	e0fffc17 	ldw	r3,-16(fp)
    5074:	18c00d03 	ldbu	r3,52(r3)
    5078:	19403fcc 	andi	r5,r3,255
    507c:	e0fffc17 	ldw	r3,-16(fp)
    5080:	18c00d83 	ldbu	r3,54(r3)
    5084:	19803fcc 	andi	r6,r3,255
    5088:	e0fffc17 	ldw	r3,-16(fp)
    508c:	18c00dc3 	ldbu	r3,55(r3)
    5090:	19c03fcc 	andi	r7,r3,255
    5094:	e0fffc17 	ldw	r3,-16(fp)
    5098:	18c00d43 	ldbu	r3,53(r3)
    509c:	18c03fcc 	andi	r3,r3,255
    50a0:	e13ffc17 	ldw	r4,-16(fp)
    50a4:	21000804 	addi	r4,r4,32
    50a8:	d9000115 	stw	r4,4(sp)
    50ac:	d8c00015 	stw	r3,0(sp)
    50b0:	4009883a 	mov	r4,r8
    50b4:	103ee83a 	callr	r2
                                        break;
    50b8:	00001306 	br	5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    50bc:	e0bffc17 	ldw	r2,-16(fp)
    50c0:	10c00604 	addi	r3,r2,24
    50c4:	e0bffc17 	ldw	r2,-16(fp)
    50c8:	10800c43 	ldbu	r2,49(r2)
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	10bfff84 	addi	r2,r2,-2
    50d4:	10bfffcc 	andi	r2,r2,65535
    50d8:	100f883a 	mov	r7,r2
    50dc:	e1bffe17 	ldw	r6,-8(fp)
    50e0:	e17ffd17 	ldw	r5,-12(fp)
    50e4:	1809883a 	mov	r4,r3
    50e8:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    50ec:	1080005c 	xori	r2,r2,1
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	10000526 	beq	r2,zero,510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    50f8:	0005883a 	mov	r2,zero
    50fc:	00002706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5100:	0001883a 	nop
    5104:	00000106 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    5108:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    510c:	e0bffc17 	ldw	r2,-16(fp)
    5110:	10c00804 	addi	r3,r2,32
    5114:	e0bffc17 	ldw	r2,-16(fp)
    5118:	19803fcc 	andi	r6,r3,255
    511c:	11000243 	ldbu	r4,9(r2)
    5120:	2008703a 	and	r4,r4,zero
    5124:	200b883a 	mov	r5,r4
    5128:	3009883a 	mov	r4,r6
    512c:	2908b03a 	or	r4,r5,r4
    5130:	11000245 	stb	r4,9(r2)
    5134:	1808d23a 	srli	r4,r3,8
    5138:	21803fcc 	andi	r6,r4,255
    513c:	11000283 	ldbu	r4,10(r2)
    5140:	2008703a 	and	r4,r4,zero
    5144:	200b883a 	mov	r5,r4
    5148:	3009883a 	mov	r4,r6
    514c:	2908b03a 	or	r4,r5,r4
    5150:	11000285 	stb	r4,10(r2)
    5154:	1808d43a 	srli	r4,r3,16
    5158:	21803fcc 	andi	r6,r4,255
    515c:	110002c3 	ldbu	r4,11(r2)
    5160:	2008703a 	and	r4,r4,zero
    5164:	200b883a 	mov	r5,r4
    5168:	3009883a 	mov	r4,r6
    516c:	2908b03a 	or	r4,r5,r4
    5170:	110002c5 	stb	r4,11(r2)
    5174:	180ad63a 	srli	r5,r3,24
    5178:	10c00303 	ldbu	r3,12(r2)
    517c:	1806703a 	and	r3,r3,zero
    5180:	1809883a 	mov	r4,r3
    5184:	2807883a 	mov	r3,r5
    5188:	20c6b03a 	or	r3,r4,r3
    518c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5198:	00800044 	movi	r2,1
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	df000315 	stw	fp,12(sp)
    51b8:	df000304 	addi	fp,sp,12
    51bc:	2007883a 	mov	r3,r4
    51c0:	2805883a 	mov	r2,r5
    51c4:	e0fffe05 	stb	r3,-8(fp)
    51c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0x00) {
    51cc:	e0bfff03 	ldbu	r2,-4(fp)
    51d0:	1000081e 	bne	r2,zero,51f4 <_Z8set_notehh+0x44>
		set_val = synth->KEY[note];
    51d4:	d0e00d17 	ldw	r3,-32716(gp)
    51d8:	e0bffe03 	ldbu	r2,-8(fp)
    51dc:	1085883a 	add	r2,r2,r2
    51e0:	1085883a 	add	r2,r2,r2
    51e4:	1885883a 	add	r2,r3,r2
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	e0bffd15 	stw	r2,-12(fp)
    51f0:	00000306 	br	5200 <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    51f4:	e0bfff03 	ldbu	r2,-4(fp)
    51f8:	10802004 	addi	r2,r2,128
    51fc:	e0bffd15 	stw	r2,-12(fp)
	}

	synth->KEY[note] = set_val;
    5200:	d0e00d17 	ldw	r3,-32716(gp)
    5204:	e0bffe03 	ldbu	r2,-8(fp)
    5208:	1085883a 	add	r2,r2,r2
    520c:	1085883a 	add	r2,r2,r2
    5210:	1885883a 	add	r2,r3,r2
    5214:	e0fffd17 	ldw	r3,-12(fp)
    5218:	10c00015 	stw	r3,0(r2)
}
    521c:	0001883a 	nop
    5220:	e037883a 	mov	sp,fp
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00104 	addi	sp,sp,4
    522c:	f800283a 	ret

00005230 <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    5230:	defffd04 	addi	sp,sp,-12
    5234:	df000215 	stw	fp,8(sp)
    5238:	df000204 	addi	fp,sp,8
    523c:	2005883a 	mov	r2,r4
    5240:	e17fff15 	stw	r5,-4(fp)
    5244:	e0bffe05 	stb	r2,-8(fp)
	synth->ADSR[par] = val;
    5248:	d0e00d17 	ldw	r3,-32716(gp)
    524c:	e0bffe03 	ldbu	r2,-8(fp)
    5250:	10802004 	addi	r2,r2,128
    5254:	1085883a 	add	r2,r2,r2
    5258:	1085883a 	add	r2,r2,r2
    525c:	1885883a 	add	r2,r3,r2
    5260:	e0ffff17 	ldw	r3,-4(fp)
    5264:	10c00015 	stw	r3,0(r2)
}
    5268:	0001883a 	nop
    526c:	e037883a 	mov	sp,fp
    5270:	df000017 	ldw	fp,0(sp)
    5274:	dec00104 	addi	sp,sp,4
    5278:	f800283a 	ret

0000527c <_Z9calc_adsrtttf>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 rel_m_seconds, float peak_amp) {
    527c:	defff204 	addi	sp,sp,-56
    5280:	dfc00d15 	stw	ra,52(sp)
    5284:	df000c15 	stw	fp,48(sp)
    5288:	dc000b15 	stw	r16,44(sp)
    528c:	df000c04 	addi	fp,sp,48
    5290:	2807883a 	mov	r3,r5
    5294:	3005883a 	mov	r2,r6
    5298:	e1fffe15 	stw	r7,-8(fp)
    529c:	e13ffb0d 	sth	r4,-20(fp)
    52a0:	e0fffc0d 	sth	r3,-16(fp)
    52a4:	e0bffd0d 	sth	r2,-12(fp)

	alt_u32 ATT_LEN, ATT_STEP, PEAK_ATT, DEC_LEN, DEC_STEP, REL_LEN, REL_STEP;

	if (att_m_seconds > 5000) {
    52a8:	e0bffb0b 	ldhu	r2,-20(fp)
    52ac:	1084e270 	cmpltui	r2,r2,5001
    52b0:	1000041e 	bne	r2,zero,52c4 <_Z9calc_adsrtttf+0x48>
		printf("ERRROR: Requested attack length is too long.\n");
    52b4:	010000b4 	movhi	r4,2
    52b8:	210f7004 	addi	r4,r4,15808
    52bc:	000f0740 	call	f074 <puts>
		return;
    52c0:	00009c06 	br	5534 <_Z9calc_adsrtttf+0x2b8>
	}
	if (dec_m_seconds > 5000) {
    52c4:	e0bffc0b 	ldhu	r2,-16(fp)
    52c8:	1084e270 	cmpltui	r2,r2,5001
    52cc:	1000041e 	bne	r2,zero,52e0 <_Z9calc_adsrtttf+0x64>
		printf("ERRROR: Requested decay length is too long.\n");
    52d0:	010000b4 	movhi	r4,2
    52d4:	210f7c04 	addi	r4,r4,15856
    52d8:	000f0740 	call	f074 <puts>
		return;
    52dc:	00009506 	br	5534 <_Z9calc_adsrtttf+0x2b8>
	}
	if (rel_m_seconds > 10000) {
    52e0:	e0bffd0b 	ldhu	r2,-12(fp)
    52e4:	1089c470 	cmpltui	r2,r2,10001
    52e8:	1000041e 	bne	r2,zero,52fc <_Z9calc_adsrtttf+0x80>
		printf("ERRROR: Requested release length is too long.\n");
    52ec:	010000b4 	movhi	r4,2
    52f0:	210f8704 	addi	r4,r4,15900
    52f4:	000f0740 	call	f074 <puts>
		return;
    52f8:	00008e06 	br	5534 <_Z9calc_adsrtttf+0x2b8>
	}
	if (peak_amp > (float) 1.9) {
    52fc:	014ffcf4 	movhi	r5,16371
    5300:	294cccc4 	addi	r5,r5,13107
    5304:	e13ffe17 	ldw	r4,-8(fp)
    5308:	000d36c0 	call	d36c <__gesf2>
    530c:	0080040e 	bge	zero,r2,5320 <_Z9calc_adsrtttf+0xa4>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    5310:	010000b4 	movhi	r4,2
    5314:	210f9304 	addi	r4,r4,15948
    5318:	000f0740 	call	f074 <puts>
		return;
    531c:	00008506 	br	5534 <_Z9calc_adsrtttf+0x2b8>
	}

	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5320:	e0bffb0b 	ldhu	r2,-20(fp)
    5324:	016b1114 	movui	r5,44100
    5328:	1009883a 	mov	r4,r2
    532c:	000cf040 	call	cf04 <__mulsi3>
    5330:	0140fa04 	movi	r5,1000
    5334:	1009883a 	mov	r4,r2
    5338:	000cd500 	call	cd50 <__divsi3>
    533c:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = (peak_amp * (alt_u32) 0x80000) / ATT_LEN;
    5340:	01524034 	movhi	r5,18688
    5344:	e13ffe17 	ldw	r4,-8(fp)
    5348:	000d4280 	call	d428 <__mulsf3>
    534c:	1007883a 	mov	r3,r2
    5350:	1821883a 	mov	r16,r3
    5354:	e13ff417 	ldw	r4,-48(fp)
    5358:	000ddac0 	call	ddac <__floatunsisf>
    535c:	1007883a 	mov	r3,r2
    5360:	180b883a 	mov	r5,r3
    5364:	8009883a 	mov	r4,r16
    5368:	000cf2c0 	call	cf2c <__divsf3>
    536c:	1007883a 	mov	r3,r2
    5370:	1805883a 	mov	r2,r3
    5374:	1009883a 	mov	r4,r2
    5378:	000ccf00 	call	ccf0 <__fixunssfsi>
    537c:	e0bff515 	stw	r2,-44(fp)
	PEAK_ATT = ATT_LEN * ATT_STEP;
    5380:	e17ff517 	ldw	r5,-44(fp)
    5384:	e13ff417 	ldw	r4,-48(fp)
    5388:	000cf040 	call	cf04 <__mulsi3>
    538c:	e0bff615 	stw	r2,-40(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    5390:	e0bffc0b 	ldhu	r2,-16(fp)
    5394:	016b1114 	movui	r5,44100
    5398:	1009883a 	mov	r4,r2
    539c:	000cf040 	call	cf04 <__mulsi3>
    53a0:	0140fa04 	movi	r5,1000
    53a4:	1009883a 	mov	r4,r2
    53a8:	000cd500 	call	cd50 <__divsi3>
    53ac:	e0bff715 	stw	r2,-36(fp)
	DEC_STEP = ((peak_amp - 1) * (alt_u32) 0x80000) / DEC_LEN;
    53b0:	014fe034 	movhi	r5,16256
    53b4:	e13ffe17 	ldw	r4,-8(fp)
    53b8:	000d8580 	call	d858 <__subsf3>
    53bc:	1007883a 	mov	r3,r2
    53c0:	1805883a 	mov	r2,r3
    53c4:	01524034 	movhi	r5,18688
    53c8:	1009883a 	mov	r4,r2
    53cc:	000d4280 	call	d428 <__mulsf3>
    53d0:	1007883a 	mov	r3,r2
    53d4:	1821883a 	mov	r16,r3
    53d8:	e13ff717 	ldw	r4,-36(fp)
    53dc:	000ddac0 	call	ddac <__floatunsisf>
    53e0:	1007883a 	mov	r3,r2
    53e4:	180b883a 	mov	r5,r3
    53e8:	8009883a 	mov	r4,r16
    53ec:	000cf2c0 	call	cf2c <__divsf3>
    53f0:	1007883a 	mov	r3,r2
    53f4:	1805883a 	mov	r2,r3
    53f8:	1009883a 	mov	r4,r2
    53fc:	000ccf00 	call	ccf0 <__fixunssfsi>
    5400:	e0bff815 	stw	r2,-32(fp)
	REL_LEN = (rel_m_seconds * 44100) / 1000;
    5404:	e0bffd0b 	ldhu	r2,-12(fp)
    5408:	016b1114 	movui	r5,44100
    540c:	1009883a 	mov	r4,r2
    5410:	000cf040 	call	cf04 <__mulsi3>
    5414:	0140fa04 	movi	r5,1000
    5418:	1009883a 	mov	r4,r2
    541c:	000cd500 	call	cd50 <__divsi3>
    5420:	e0bff915 	stw	r2,-28(fp)
	REL_STEP = ((alt_u32) 0x80000) / REL_LEN;
    5424:	e17ff917 	ldw	r5,-28(fp)
    5428:	01000234 	movhi	r4,8
    542c:	000ce480 	call	ce48 <__udivsi3>
    5430:	e0bffa15 	stw	r2,-24(fp)

	set_adsr(PEAK_A, PEAK_ATT);
    5434:	e17ff617 	ldw	r5,-40(fp)
    5438:	0009883a 	mov	r4,zero
    543c:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("PEAK_ATT Set:  %X\n", synth->ADSR[PEAK_A]);
    5440:	d0a00d17 	ldw	r2,-32716(gp)
    5444:	10808017 	ldw	r2,512(r2)
    5448:	100b883a 	mov	r5,r2
    544c:	010000b4 	movhi	r4,2
    5450:	210fa104 	addi	r4,r4,16004
    5454:	000ef580 	call	ef58 <printf>
	set_adsr(ATT_L, ATT_LEN);
    5458:	e17ff417 	ldw	r5,-48(fp)
    545c:	01000044 	movi	r4,1
    5460:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("ATT_LEN Set:   %X\n", synth->ADSR[ATT_L]);
    5464:	d0a00d17 	ldw	r2,-32716(gp)
    5468:	10808117 	ldw	r2,516(r2)
    546c:	100b883a 	mov	r5,r2
    5470:	010000b4 	movhi	r4,2
    5474:	210fa604 	addi	r4,r4,16024
    5478:	000ef580 	call	ef58 <printf>
	set_adsr(ATT_S, ATT_STEP);
    547c:	e17ff517 	ldw	r5,-44(fp)
    5480:	01000084 	movi	r4,2
    5484:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("ATT_STEP Set:  %X\n", synth->ADSR[ATT_S]);
    5488:	d0a00d17 	ldw	r2,-32716(gp)
    548c:	10808217 	ldw	r2,520(r2)
    5490:	100b883a 	mov	r5,r2
    5494:	010000b4 	movhi	r4,2
    5498:	210fab04 	addi	r4,r4,16044
    549c:	000ef580 	call	ef58 <printf>
	set_adsr(DEC_L, DEC_LEN);
    54a0:	e17ff717 	ldw	r5,-36(fp)
    54a4:	010000c4 	movi	r4,3
    54a8:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("DEC_LEN Set:   %X\n", synth->ADSR[DEC_L]);
    54ac:	d0a00d17 	ldw	r2,-32716(gp)
    54b0:	10808317 	ldw	r2,524(r2)
    54b4:	100b883a 	mov	r5,r2
    54b8:	010000b4 	movhi	r4,2
    54bc:	210fb004 	addi	r4,r4,16064
    54c0:	000ef580 	call	ef58 <printf>
	set_adsr(DEC_S, DEC_STEP);
    54c4:	e17ff817 	ldw	r5,-32(fp)
    54c8:	01000104 	movi	r4,4
    54cc:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("DEC_STEP Set:  %X\n", synth->ADSR[DEC_S]);
    54d0:	d0a00d17 	ldw	r2,-32716(gp)
    54d4:	10808417 	ldw	r2,528(r2)
    54d8:	100b883a 	mov	r5,r2
    54dc:	010000b4 	movhi	r4,2
    54e0:	210fb504 	addi	r4,r4,16084
    54e4:	000ef580 	call	ef58 <printf>
	set_adsr(REL_L, REL_LEN);
    54e8:	e17ff917 	ldw	r5,-28(fp)
    54ec:	01000144 	movi	r4,5
    54f0:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("REL_LEN Set:   %X\n", synth->ADSR[REL_L]);
    54f4:	d0a00d17 	ldw	r2,-32716(gp)
    54f8:	10808517 	ldw	r2,532(r2)
    54fc:	100b883a 	mov	r5,r2
    5500:	010000b4 	movhi	r4,2
    5504:	210fba04 	addi	r4,r4,16104
    5508:	000ef580 	call	ef58 <printf>
	set_adsr(REL_S, REL_STEP);
    550c:	e17ffa17 	ldw	r5,-24(fp)
    5510:	01000184 	movi	r4,6
    5514:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("REL_STEP Set:  %X\n", synth->ADSR[REL_S]);
    5518:	d0a00d17 	ldw	r2,-32716(gp)
    551c:	10808617 	ldw	r2,536(r2)
    5520:	100b883a 	mov	r5,r2
    5524:	010000b4 	movhi	r4,2
    5528:	210fbf04 	addi	r4,r4,16124
    552c:	000ef580 	call	ef58 <printf>

	return;
    5530:	0001883a 	nop
}
    5534:	e6ffff04 	addi	sp,fp,-4
    5538:	dfc00217 	ldw	ra,8(sp)
    553c:	df000117 	ldw	fp,4(sp)
    5540:	dc000017 	ldw	r16,0(sp)
    5544:	dec00304 	addi	sp,sp,12
    5548:	f800283a 	ret

0000554c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    554c:	defff904 	addi	sp,sp,-28
    5550:	dfc00615 	stw	ra,24(sp)
    5554:	df000515 	stw	fp,20(sp)
    5558:	df000504 	addi	fp,sp,20
    555c:	e13ffc15 	stw	r4,-16(fp)
    5560:	e17ffd15 	stw	r5,-12(fp)
    5564:	3007883a 	mov	r3,r6
    5568:	3805883a 	mov	r2,r7
    556c:	e0fffe05 	stb	r3,-8(fp)
    5570:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5574:	e0800217 	ldw	r2,8(fp)
    5578:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    557c:	e0bffc17 	ldw	r2,-16(fp)
    5580:	10800117 	ldw	r2,4(r2)
    5584:	1080004c 	andi	r2,r2,1
    5588:	1007883a 	mov	r3,r2
    558c:	e0bffb17 	ldw	r2,-20(fp)
    5590:	10800003 	ldbu	r2,0(r2)
    5594:	1080004c 	andi	r2,r2,1
    5598:	18c03fcc 	andi	r3,r3,255
    559c:	10803fcc 	andi	r2,r2,255
    55a0:	18801426 	beq	r3,r2,55f4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    55a4:	e0bffb17 	ldw	r2,-20(fp)
    55a8:	10800003 	ldbu	r2,0(r2)
    55ac:	1080004c 	andi	r2,r2,1
    55b0:	10803fcc 	andi	r2,r2,255
    55b4:	10000826 	beq	r2,zero,55d8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    55b8:	e0bffc17 	ldw	r2,-16(fp)
    55bc:	10800017 	ldw	r2,0(r2)
    55c0:	10800304 	addi	r2,r2,12
    55c4:	10800017 	ldw	r2,0(r2)
    55c8:	e17ffb17 	ldw	r5,-20(fp)
    55cc:	e13ffc17 	ldw	r4,-16(fp)
    55d0:	103ee83a 	callr	r2
    55d4:	00000706 	br	55f4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    55d8:	e0bffc17 	ldw	r2,-16(fp)
    55dc:	10800017 	ldw	r2,0(r2)
    55e0:	10800204 	addi	r2,r2,8
    55e4:	10800017 	ldw	r2,0(r2)
    55e8:	e17ffb17 	ldw	r5,-20(fp)
    55ec:	e13ffc17 	ldw	r4,-16(fp)
    55f0:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    55f4:	e0bffc17 	ldw	r2,-16(fp)
    55f8:	10800117 	ldw	r2,4(r2)
    55fc:	1004d07a 	srli	r2,r2,1
    5600:	1080004c 	andi	r2,r2,1
    5604:	1007883a 	mov	r3,r2
    5608:	e0bffb17 	ldw	r2,-20(fp)
    560c:	10800003 	ldbu	r2,0(r2)
    5610:	1004d07a 	srli	r2,r2,1
    5614:	1080004c 	andi	r2,r2,1
    5618:	18c03fcc 	andi	r3,r3,255
    561c:	10803fcc 	andi	r2,r2,255
    5620:	18801426 	beq	r3,r2,5674 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5624:	e0bffb17 	ldw	r2,-20(fp)
    5628:	10800003 	ldbu	r2,0(r2)
    562c:	1080008c 	andi	r2,r2,2
    5630:	10803fcc 	andi	r2,r2,255
    5634:	10000826 	beq	r2,zero,5658 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5638:	e0bffc17 	ldw	r2,-16(fp)
    563c:	10800017 	ldw	r2,0(r2)
    5640:	10800504 	addi	r2,r2,20
    5644:	10800017 	ldw	r2,0(r2)
    5648:	e17ffb17 	ldw	r5,-20(fp)
    564c:	e13ffc17 	ldw	r4,-16(fp)
    5650:	103ee83a 	callr	r2
    5654:	00000706 	br	5674 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5658:	e0bffc17 	ldw	r2,-16(fp)
    565c:	10800017 	ldw	r2,0(r2)
    5660:	10800404 	addi	r2,r2,16
    5664:	10800017 	ldw	r2,0(r2)
    5668:	e17ffb17 	ldw	r5,-20(fp)
    566c:	e13ffc17 	ldw	r4,-16(fp)
    5670:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5674:	e0bffc17 	ldw	r2,-16(fp)
    5678:	10800117 	ldw	r2,4(r2)
    567c:	1004d0ba 	srli	r2,r2,2
    5680:	1080004c 	andi	r2,r2,1
    5684:	1007883a 	mov	r3,r2
    5688:	e0bffb17 	ldw	r2,-20(fp)
    568c:	10800003 	ldbu	r2,0(r2)
    5690:	1004d0ba 	srli	r2,r2,2
    5694:	1080004c 	andi	r2,r2,1
    5698:	18c03fcc 	andi	r3,r3,255
    569c:	10803fcc 	andi	r2,r2,255
    56a0:	18801426 	beq	r3,r2,56f4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    56a4:	e0bffb17 	ldw	r2,-20(fp)
    56a8:	10800003 	ldbu	r2,0(r2)
    56ac:	1080010c 	andi	r2,r2,4
    56b0:	10803fcc 	andi	r2,r2,255
    56b4:	10000826 	beq	r2,zero,56d8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    56b8:	e0bffc17 	ldw	r2,-16(fp)
    56bc:	10800017 	ldw	r2,0(r2)
    56c0:	10800704 	addi	r2,r2,28
    56c4:	10800017 	ldw	r2,0(r2)
    56c8:	e17ffb17 	ldw	r5,-20(fp)
    56cc:	e13ffc17 	ldw	r4,-16(fp)
    56d0:	103ee83a 	callr	r2
    56d4:	00000706 	br	56f4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    56d8:	e0bffc17 	ldw	r2,-16(fp)
    56dc:	10800017 	ldw	r2,0(r2)
    56e0:	10800604 	addi	r2,r2,24
    56e4:	10800017 	ldw	r2,0(r2)
    56e8:	e17ffb17 	ldw	r5,-20(fp)
    56ec:	e13ffc17 	ldw	r4,-16(fp)
    56f0:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    56f4:	e0bffb17 	ldw	r2,-20(fp)
    56f8:	10800043 	ldbu	r2,1(r2)
    56fc:	10803fcc 	andi	r2,r2,255
    5700:	1080201c 	xori	r2,r2,128
    5704:	10bfe004 	addi	r2,r2,-128
    5708:	1000061e 	bne	r2,zero,5724 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    570c:	e0bffb17 	ldw	r2,-20(fp)
    5710:	10800083 	ldbu	r2,2(r2)
    5714:	10803fcc 	andi	r2,r2,255
    5718:	1080201c 	xori	r2,r2,128
    571c:	10bfe004 	addi	r2,r2,-128
    5720:	10000726 	beq	r2,zero,5740 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5724:	e0bffc17 	ldw	r2,-16(fp)
    5728:	10800017 	ldw	r2,0(r2)
    572c:	10800104 	addi	r2,r2,4
    5730:	10800017 	ldw	r2,0(r2)
    5734:	e17ffb17 	ldw	r5,-20(fp)
    5738:	e13ffc17 	ldw	r4,-16(fp)
    573c:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5740:	e0800217 	ldw	r2,8(fp)
    5744:	10c00003 	ldbu	r3,0(r2)
    5748:	e0bffc17 	ldw	r2,-16(fp)
    574c:	10c00105 	stb	r3,4(r2)
#endif

};
    5750:	0001883a 	nop
    5754:	e037883a 	mov	sp,fp
    5758:	dfc00117 	ldw	ra,4(sp)
    575c:	df000017 	ldw	fp,0(sp)
    5760:	dec00204 	addi	sp,sp,8
    5764:	f800283a 	ret

00005768 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5768:	defff804 	addi	sp,sp,-32
    576c:	dfc00715 	stw	ra,28(sp)
    5770:	df000615 	stw	fp,24(sp)
    5774:	df000604 	addi	fp,sp,24
    5778:	e13ffc15 	stw	r4,-16(fp)
    577c:	e17ffd15 	stw	r5,-12(fp)
    5780:	3007883a 	mov	r3,r6
    5784:	3805883a 	mov	r2,r7
    5788:	e0fffe05 	stb	r3,-8(fp)
    578c:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5790:	e0800217 	ldw	r2,8(fp)
    5794:	10800084 	addi	r2,r2,2
    5798:	10800003 	ldbu	r2,0(r2)
    579c:	10803fcc 	andi	r2,r2,255
    57a0:	10800058 	cmpnei	r2,r2,1
    57a4:	10009926 	beq	r2,zero,5a0c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    57a8:	e0bffc17 	ldw	r2,-16(fp)
    57ac:	10c00103 	ldbu	r3,4(r2)
    57b0:	e0800217 	ldw	r2,8(fp)
    57b4:	10800003 	ldbu	r2,0(r2)
    57b8:	18c03fcc 	andi	r3,r3,255
    57bc:	10803fcc 	andi	r2,r2,255
    57c0:	18800e26 	beq	r3,r2,57fc <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    57c4:	e0bffc17 	ldw	r2,-16(fp)
    57c8:	10800017 	ldw	r2,0(r2)
    57cc:	10800204 	addi	r2,r2,8
    57d0:	10800017 	ldw	r2,0(r2)
    57d4:	e0fffc17 	ldw	r3,-16(fp)
    57d8:	18c00103 	ldbu	r3,4(r3)
    57dc:	19003fcc 	andi	r4,r3,255
    57e0:	e0c00217 	ldw	r3,8(fp)
    57e4:	18c00003 	ldbu	r3,0(r3)
    57e8:	18c03fcc 	andi	r3,r3,255
    57ec:	180d883a 	mov	r6,r3
    57f0:	200b883a 	mov	r5,r4
    57f4:	e13ffc17 	ldw	r4,-16(fp)
    57f8:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    57fc:	00800084 	movi	r2,2
    5800:	e0bffa05 	stb	r2,-24(fp)
    5804:	e0bffa03 	ldbu	r2,-24(fp)
    5808:	10800228 	cmpgeui	r2,r2,8
    580c:	10006e1e 	bne	r2,zero,59c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5810:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5814:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5818:	00800084 	movi	r2,2
    581c:	e0bffac5 	stb	r2,-21(fp)
    5820:	e0bffac3 	ldbu	r2,-21(fp)
    5824:	10800228 	cmpgeui	r2,r2,8
    5828:	10002f1e 	bne	r2,zero,58e8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    582c:	e0bffa03 	ldbu	r2,-24(fp)
    5830:	e0c00217 	ldw	r3,8(fp)
    5834:	1885883a 	add	r2,r3,r2
    5838:	11000003 	ldbu	r4,0(r2)
    583c:	e0bffac3 	ldbu	r2,-21(fp)
    5840:	e0fffc17 	ldw	r3,-16(fp)
    5844:	1885883a 	add	r2,r3,r2
    5848:	10800104 	addi	r2,r2,4
    584c:	10800003 	ldbu	r2,0(r2)
    5850:	20c03fcc 	andi	r3,r4,255
    5854:	10803fcc 	andi	r2,r2,255
    5858:	1880091e 	bne	r3,r2,5880 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    585c:	e0bffa03 	ldbu	r2,-24(fp)
    5860:	e0c00217 	ldw	r3,8(fp)
    5864:	1885883a 	add	r2,r3,r2
    5868:	10800003 	ldbu	r2,0(r2)
    586c:	10803fcc 	andi	r2,r2,255
    5870:	10800060 	cmpeqi	r2,r2,1
    5874:	1000021e 	bne	r2,zero,5880 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5878:	00800044 	movi	r2,1
    587c:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5880:	e0bffac3 	ldbu	r2,-21(fp)
    5884:	e0c00217 	ldw	r3,8(fp)
    5888:	1885883a 	add	r2,r3,r2
    588c:	11000003 	ldbu	r4,0(r2)
    5890:	e0bffa03 	ldbu	r2,-24(fp)
    5894:	e0fffc17 	ldw	r3,-16(fp)
    5898:	1885883a 	add	r2,r3,r2
    589c:	10800104 	addi	r2,r2,4
    58a0:	10800003 	ldbu	r2,0(r2)
    58a4:	20c03fcc 	andi	r3,r4,255
    58a8:	10803fcc 	andi	r2,r2,255
    58ac:	18800a1e 	bne	r3,r2,58d8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    58b0:	e0bffa03 	ldbu	r2,-24(fp)
    58b4:	e0fffc17 	ldw	r3,-16(fp)
    58b8:	1885883a 	add	r2,r3,r2
    58bc:	10800104 	addi	r2,r2,4
    58c0:	10800003 	ldbu	r2,0(r2)
    58c4:	10803fcc 	andi	r2,r2,255
    58c8:	10800060 	cmpeqi	r2,r2,1
    58cc:	1000021e 	bne	r2,zero,58d8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    58d0:	00800044 	movi	r2,1
    58d4:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    58d8:	e0bffac3 	ldbu	r2,-21(fp)
    58dc:	10800044 	addi	r2,r2,1
    58e0:	e0bffac5 	stb	r2,-21(fp)
    58e4:	003fce06 	br	5820 <__alt_data_end+0xfc005820>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    58e8:	e0bffa43 	ldbu	r2,-23(fp)
    58ec:	1080005c 	xori	r2,r2,1
    58f0:	10803fcc 	andi	r2,r2,255
    58f4:	10001c26 	beq	r2,zero,5968 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    58f8:	e0bffc17 	ldw	r2,-16(fp)
    58fc:	10800017 	ldw	r2,0(r2)
    5900:	10800104 	addi	r2,r2,4
    5904:	10800017 	ldw	r2,0(r2)
    5908:	e0fffa03 	ldbu	r3,-24(fp)
    590c:	e1000217 	ldw	r4,8(fp)
    5910:	20c7883a 	add	r3,r4,r3
    5914:	18c00003 	ldbu	r3,0(r3)
    5918:	18c03fcc 	andi	r3,r3,255
    591c:	180d883a 	mov	r6,r3
    5920:	e17ffd17 	ldw	r5,-12(fp)
    5924:	e13ffc17 	ldw	r4,-16(fp)
    5928:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    592c:	e0bffc17 	ldw	r2,-16(fp)
    5930:	10800017 	ldw	r2,0(r2)
    5934:	10800304 	addi	r2,r2,12
    5938:	10800017 	ldw	r2,0(r2)
    593c:	e0c00217 	ldw	r3,8(fp)
    5940:	18c00003 	ldbu	r3,0(r3)
    5944:	19403fcc 	andi	r5,r3,255
    5948:	e0fffa03 	ldbu	r3,-24(fp)
    594c:	e1000217 	ldw	r4,8(fp)
    5950:	20c7883a 	add	r3,r4,r3
    5954:	18c00003 	ldbu	r3,0(r3)
    5958:	18c03fcc 	andi	r3,r3,255
    595c:	180d883a 	mov	r6,r3
    5960:	e13ffc17 	ldw	r4,-16(fp)
    5964:	103ee83a 	callr	r2
                }
                if (!up)
    5968:	e0bffa83 	ldbu	r2,-22(fp)
    596c:	1080005c 	xori	r2,r2,1
    5970:	10803fcc 	andi	r2,r2,255
    5974:	10001026 	beq	r2,zero,59b8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5978:	e0bffc17 	ldw	r2,-16(fp)
    597c:	10800017 	ldw	r2,0(r2)
    5980:	10800404 	addi	r2,r2,16
    5984:	10800017 	ldw	r2,0(r2)
    5988:	e0fffc17 	ldw	r3,-16(fp)
    598c:	18c00103 	ldbu	r3,4(r3)
    5990:	19403fcc 	andi	r5,r3,255
    5994:	e0fffa03 	ldbu	r3,-24(fp)
    5998:	e13ffc17 	ldw	r4,-16(fp)
    599c:	20c7883a 	add	r3,r4,r3
    59a0:	18c00104 	addi	r3,r3,4
    59a4:	18c00003 	ldbu	r3,0(r3)
    59a8:	18c03fcc 	andi	r3,r3,255
    59ac:	180d883a 	mov	r6,r3
    59b0:	e13ffc17 	ldw	r4,-16(fp)
    59b4:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    59b8:	e0bffa03 	ldbu	r2,-24(fp)
    59bc:	10800044 	addi	r2,r2,1
    59c0:	e0bffa05 	stb	r2,-24(fp)
    59c4:	003f8f06 	br	5804 <__alt_data_end+0xfc005804>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    59c8:	e03ffb05 	stb	zero,-20(fp)
    59cc:	e0bffb03 	ldbu	r2,-20(fp)
    59d0:	10800228 	cmpgeui	r2,r2,8
    59d4:	10000e1e 	bne	r2,zero,5a10 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    59d8:	e0bffb03 	ldbu	r2,-20(fp)
    59dc:	e0fffb03 	ldbu	r3,-20(fp)
    59e0:	e1000217 	ldw	r4,8(fp)
    59e4:	20c7883a 	add	r3,r4,r3
    59e8:	18c00003 	ldbu	r3,0(r3)
    59ec:	e13ffc17 	ldw	r4,-16(fp)
    59f0:	2085883a 	add	r2,r4,r2
    59f4:	10800104 	addi	r2,r2,4
    59f8:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    59fc:	e0bffb03 	ldbu	r2,-20(fp)
    5a00:	10800044 	addi	r2,r2,1
    5a04:	e0bffb05 	stb	r2,-20(fp)
    5a08:	003ff006 	br	59cc <__alt_data_end+0xfc0059cc>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5a0c:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5a10:	e037883a 	mov	sp,fp
    5a14:	dfc00117 	ldw	ra,4(sp)
    5a18:	df000017 	ldw	fp,0(sp)
    5a1c:	dec00204 	addi	sp,sp,8
    5a20:	f800283a 	ret

00005a24 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5a24:	defffa04 	addi	sp,sp,-24
    5a28:	dfc00515 	stw	ra,20(sp)
    5a2c:	df000415 	stw	fp,16(sp)
    5a30:	df000404 	addi	fp,sp,16
    5a34:	e13ffd15 	stw	r4,-12(fp)
    5a38:	2807883a 	mov	r3,r5
    5a3c:	3005883a 	mov	r2,r6
    5a40:	e0fffe05 	stb	r3,-8(fp)
    5a44:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5a48:	e0bffe03 	ldbu	r2,-8(fp)
    5a4c:	1080088c 	andi	r2,r2,34
    5a50:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5a54:	e0bfff03 	ldbu	r2,-4(fp)
    5a58:	10800130 	cmpltui	r2,r2,4
    5a5c:	1000151e 	bne	r2,zero,5ab4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5a60:	e0bfff03 	ldbu	r2,-4(fp)
    5a64:	108007a8 	cmpgeui	r2,r2,30
    5a68:	1000121e 	bne	r2,zero,5ab4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5a6c:	e0bffd17 	ldw	r2,-12(fp)
    5a70:	10800317 	ldw	r2,12(r2)
    5a74:	1080008c 	andi	r2,r2,2
    5a78:	1000021e 	bne	r2,zero,5a84 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5a7c:	e0bffc03 	ldbu	r2,-16(fp)
    5a80:	1000061e 	bne	r2,zero,5a9c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5a84:	e0bffd17 	ldw	r2,-12(fp)
    5a88:	10800317 	ldw	r2,12(r2)
    5a8c:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5a90:	10000526 	beq	r2,zero,5aa8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5a94:	e0bffc03 	ldbu	r2,-16(fp)
    5a98:	1000031e 	bne	r2,zero,5aa8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5a9c:	e0bfff03 	ldbu	r2,-4(fp)
    5aa0:	10800f44 	addi	r2,r2,61
    5aa4:	00008006 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5aa8:	e0bfff03 	ldbu	r2,-4(fp)
    5aac:	10801744 	addi	r2,r2,93
    5ab0:	00007d06 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5ab4:	e0bfff03 	ldbu	r2,-4(fp)
    5ab8:	108007b0 	cmpltui	r2,r2,30
    5abc:	1000191e 	bne	r2,zero,5b24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5ac0:	e0bfff03 	ldbu	r2,-4(fp)
    5ac4:	10800a28 	cmpgeui	r2,r2,40
    5ac8:	1000161e 	bne	r2,zero,5b24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5acc:	e0bffc03 	ldbu	r2,-16(fp)
    5ad0:	10000c26 	beq	r2,zero,5b04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5ad4:	e0bffd17 	ldw	r2,-12(fp)
    5ad8:	10800017 	ldw	r2,0(r2)
    5adc:	10800504 	addi	r2,r2,20
    5ae0:	10800017 	ldw	r2,0(r2)
    5ae4:	e13ffd17 	ldw	r4,-12(fp)
    5ae8:	103ee83a 	callr	r2
    5aec:	1007883a 	mov	r3,r2
    5af0:	e0bfff03 	ldbu	r2,-4(fp)
    5af4:	10bff884 	addi	r2,r2,-30
    5af8:	1885883a 	add	r2,r3,r2
    5afc:	10800003 	ldbu	r2,0(r2)
    5b00:	00006906 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5b04:	e0bfff03 	ldbu	r2,-4(fp)
    5b08:	108009e0 	cmpeqi	r2,r2,39
    5b0c:	1000031e 	bne	r2,zero,5b1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5b10:	e0bfff03 	ldbu	r2,-4(fp)
    5b14:	108004c4 	addi	r2,r2,19
    5b18:	00006306 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5b1c:	00800c04 	movi	r2,48
    5b20:	00006106 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5b24:	e0bfff03 	ldbu	r2,-4(fp)
    5b28:	10801670 	cmpltui	r2,r2,89
    5b2c:	10000a1e 	bne	r2,zero,5b58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5b30:	e0bfff03 	ldbu	r2,-4(fp)
    5b34:	108018a8 	cmpgeui	r2,r2,98
    5b38:	1000071e 	bne	r2,zero,5b58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5b3c:	e0bffd17 	ldw	r2,-12(fp)
    5b40:	10800317 	ldw	r2,12(r2)
    5b44:	1080004c 	andi	r2,r2,1
    5b48:	10005626 	beq	r2,zero,5ca4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5b4c:	e0bfff03 	ldbu	r2,-4(fp)
    5b50:	10bff604 	addi	r2,r2,-40
    5b54:	00005406 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5b58:	e0bfff03 	ldbu	r2,-4(fp)
    5b5c:	10800b70 	cmpltui	r2,r2,45
    5b60:	10001d1e 	bne	r2,zero,5bd8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5b64:	e0bfff03 	ldbu	r2,-4(fp)
    5b68:	10800e68 	cmpgeui	r2,r2,57
    5b6c:	10001a1e 	bne	r2,zero,5bd8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5b70:	e0bffc03 	ldbu	r2,-16(fp)
    5b74:	10000c26 	beq	r2,zero,5ba8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5b78:	e0bffd17 	ldw	r2,-12(fp)
    5b7c:	10800017 	ldw	r2,0(r2)
    5b80:	10800604 	addi	r2,r2,24
    5b84:	10800017 	ldw	r2,0(r2)
    5b88:	e13ffd17 	ldw	r4,-12(fp)
    5b8c:	103ee83a 	callr	r2
    5b90:	1007883a 	mov	r3,r2
    5b94:	e0bfff03 	ldbu	r2,-4(fp)
    5b98:	10bff4c4 	addi	r2,r2,-45
    5b9c:	1885883a 	add	r2,r3,r2
    5ba0:	10800003 	ldbu	r2,0(r2)
    5ba4:	00004006 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5ba8:	e0bffd17 	ldw	r2,-12(fp)
    5bac:	10800017 	ldw	r2,0(r2)
    5bb0:	10800704 	addi	r2,r2,28
    5bb4:	10800017 	ldw	r2,0(r2)
    5bb8:	e13ffd17 	ldw	r4,-12(fp)
    5bbc:	103ee83a 	callr	r2
    5bc0:	1007883a 	mov	r3,r2
    5bc4:	e0bfff03 	ldbu	r2,-4(fp)
    5bc8:	10bff4c4 	addi	r2,r2,-45
    5bcc:	1885883a 	add	r2,r3,r2
    5bd0:	10800003 	ldbu	r2,0(r2)
    5bd4:	00003406 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5bd8:	e0bfff03 	ldbu	r2,-4(fp)
    5bdc:	10801530 	cmpltui	r2,r2,84
    5be0:	10000f1e 	bne	r2,zero,5c20 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5be4:	e0bfff03 	ldbu	r2,-4(fp)
    5be8:	10801668 	cmpgeui	r2,r2,89
    5bec:	10000c1e 	bne	r2,zero,5c20 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5bf0:	e0bffd17 	ldw	r2,-12(fp)
    5bf4:	10800017 	ldw	r2,0(r2)
    5bf8:	10800804 	addi	r2,r2,32
    5bfc:	10800017 	ldw	r2,0(r2)
    5c00:	e13ffd17 	ldw	r4,-12(fp)
    5c04:	103ee83a 	callr	r2
    5c08:	1007883a 	mov	r3,r2
    5c0c:	e0bfff03 	ldbu	r2,-4(fp)
    5c10:	10bfeb04 	addi	r2,r2,-84
    5c14:	1885883a 	add	r2,r3,r2
    5c18:	10800003 	ldbu	r2,0(r2)
    5c1c:	00002206 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5c20:	e0bfff03 	ldbu	r2,-4(fp)
    5c24:	10c00b20 	cmpeqi	r3,r2,44
    5c28:	18000a1e 	bne	r3,zero,5c54 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5c2c:	10c00b48 	cmpgei	r3,r2,45
    5c30:	1800031e 	bne	r3,zero,5c40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5c34:	10800a20 	cmpeqi	r2,r2,40
    5c38:	1000081e 	bne	r2,zero,5c5c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5c3c:	00001906 	br	5ca4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5c40:	10c018a0 	cmpeqi	r3,r2,98
    5c44:	1800071e 	bne	r3,zero,5c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5c48:	108018e0 	cmpeqi	r2,r2,99
    5c4c:	10000d1e 	bne	r2,zero,5c84 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5c50:	00001406 	br	5ca4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5c54:	00800804 	movi	r2,32
    5c58:	00001306 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5c5c:	00800344 	movi	r2,13
    5c60:	00001106 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5c64:	e0bffd17 	ldw	r2,-12(fp)
    5c68:	10800317 	ldw	r2,12(r2)
    5c6c:	1080004c 	andi	r2,r2,1
    5c70:	10000226 	beq	r2,zero,5c7c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5c74:	00800c04 	movi	r2,48
    5c78:	00000b06 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c7c:	0005883a 	mov	r2,zero
    5c80:	00000906 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5c84:	e0bffd17 	ldw	r2,-12(fp)
    5c88:	10800317 	ldw	r2,12(r2)
    5c8c:	1080004c 	andi	r2,r2,1
    5c90:	10000226 	beq	r2,zero,5c9c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5c94:	00800b84 	movi	r2,46
    5c98:	00000306 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c9c:	0005883a 	mov	r2,zero
    5ca0:	00000106 	br	5ca8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5ca4:	0005883a 	mov	r2,zero
}
    5ca8:	e037883a 	mov	sp,fp
    5cac:	dfc00117 	ldw	ra,4(sp)
    5cb0:	df000017 	ldw	fp,0(sp)
    5cb4:	dec00204 	addi	sp,sp,8
    5cb8:	f800283a 	ret

00005cbc <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5cbc:	defffd04 	addi	sp,sp,-12
    5cc0:	df000215 	stw	fp,8(sp)
    5cc4:	df000204 	addi	fp,sp,8
    5cc8:	e13ffe15 	stw	r4,-8(fp)
    5ccc:	e17fff15 	stw	r5,-4(fp)
        };
    5cd0:	0001883a 	nop
    5cd4:	e037883a 	mov	sp,fp
    5cd8:	df000017 	ldw	fp,0(sp)
    5cdc:	dec00104 	addi	sp,sp,4
    5ce0:	f800283a 	ret

00005ce4 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5ce4:	defffd04 	addi	sp,sp,-12
    5ce8:	df000215 	stw	fp,8(sp)
    5cec:	df000204 	addi	fp,sp,8
    5cf0:	e13ffe15 	stw	r4,-8(fp)
    5cf4:	e17fff15 	stw	r5,-4(fp)
        };
    5cf8:	0001883a 	nop
    5cfc:	e037883a 	mov	sp,fp
    5d00:	df000017 	ldw	fp,0(sp)
    5d04:	dec00104 	addi	sp,sp,4
    5d08:	f800283a 	ret

00005d0c <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d0c:	defffd04 	addi	sp,sp,-12
    5d10:	df000215 	stw	fp,8(sp)
    5d14:	df000204 	addi	fp,sp,8
    5d18:	e13ffe15 	stw	r4,-8(fp)
    5d1c:	e17fff15 	stw	r5,-4(fp)
        };
    5d20:	0001883a 	nop
    5d24:	e037883a 	mov	sp,fp
    5d28:	df000017 	ldw	fp,0(sp)
    5d2c:	dec00104 	addi	sp,sp,4
    5d30:	f800283a 	ret

00005d34 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d34:	defffd04 	addi	sp,sp,-12
    5d38:	df000215 	stw	fp,8(sp)
    5d3c:	df000204 	addi	fp,sp,8
    5d40:	e13ffe15 	stw	r4,-8(fp)
    5d44:	e17fff15 	stw	r5,-4(fp)
        };
    5d48:	0001883a 	nop
    5d4c:	e037883a 	mov	sp,fp
    5d50:	df000017 	ldw	fp,0(sp)
    5d54:	dec00104 	addi	sp,sp,4
    5d58:	f800283a 	ret

00005d5c <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d5c:	defffd04 	addi	sp,sp,-12
    5d60:	df000215 	stw	fp,8(sp)
    5d64:	df000204 	addi	fp,sp,8
    5d68:	e13ffe15 	stw	r4,-8(fp)
    5d6c:	e17fff15 	stw	r5,-4(fp)
        };
    5d70:	0001883a 	nop
    5d74:	e037883a 	mov	sp,fp
    5d78:	df000017 	ldw	fp,0(sp)
    5d7c:	dec00104 	addi	sp,sp,4
    5d80:	f800283a 	ret

00005d84 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d84:	defffd04 	addi	sp,sp,-12
    5d88:	df000215 	stw	fp,8(sp)
    5d8c:	df000204 	addi	fp,sp,8
    5d90:	e13ffe15 	stw	r4,-8(fp)
    5d94:	e17fff15 	stw	r5,-4(fp)
        };
    5d98:	0001883a 	nop
    5d9c:	e037883a 	mov	sp,fp
    5da0:	df000017 	ldw	fp,0(sp)
    5da4:	dec00104 	addi	sp,sp,4
    5da8:	f800283a 	ret

00005dac <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dac:	defffd04 	addi	sp,sp,-12
    5db0:	df000215 	stw	fp,8(sp)
    5db4:	df000204 	addi	fp,sp,8
    5db8:	e13ffe15 	stw	r4,-8(fp)
    5dbc:	e17fff15 	stw	r5,-4(fp)
        };
    5dc0:	0001883a 	nop
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	df000017 	ldw	fp,0(sp)
    5dcc:	dec00104 	addi	sp,sp,4
    5dd0:	f800283a 	ret

00005dd4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5dd4:	defff704 	addi	sp,sp,-36
    5dd8:	dfc00815 	stw	ra,32(sp)
    5ddc:	df000715 	stw	fp,28(sp)
    5de0:	df000704 	addi	fp,sp,28
    5de4:	e13ffd15 	stw	r4,-12(fp)
    5de8:	e17ffe15 	stw	r5,-8(fp)
    5dec:	3005883a 	mov	r2,r6
    5df0:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5df4:	e0bffd17 	ldw	r2,-12(fp)
    5df8:	10800303 	ldbu	r2,12(r2)
    5dfc:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5e00:	e0bfff03 	ldbu	r2,-4(fp)
    5e04:	10c011e0 	cmpeqi	r3,r2,71
    5e08:	1800271e 	bne	r3,zero,5ea8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5e0c:	10c014e0 	cmpeqi	r3,r2,83
    5e10:	1800031e 	bne	r3,zero,5e20 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5e14:	10800e60 	cmpeqi	r2,r2,57
    5e18:	1000111e 	bne	r2,zero,5e60 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5e1c:	00003506 	br	5ef4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5e20:	e0bffd17 	ldw	r2,-12(fp)
    5e24:	10800317 	ldw	r2,12(r2)
    5e28:	1080004c 	andi	r2,r2,1
    5e2c:	0084303a 	nor	r2,zero,r2
    5e30:	1080004c 	andi	r2,r2,1
    5e34:	1007883a 	mov	r3,r2
    5e38:	e0bffd17 	ldw	r2,-12(fp)
    5e3c:	1940004c 	andi	r5,r3,1
    5e40:	11000303 	ldbu	r4,12(r2)
    5e44:	00ffff84 	movi	r3,-2
    5e48:	20c6703a 	and	r3,r4,r3
    5e4c:	1809883a 	mov	r4,r3
    5e50:	2807883a 	mov	r3,r5
    5e54:	20c6b03a 	or	r3,r4,r3
    5e58:	10c00305 	stb	r3,12(r2)
                                break;
    5e5c:	00002506 	br	5ef4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5e60:	e0bffd17 	ldw	r2,-12(fp)
    5e64:	10800317 	ldw	r2,12(r2)
    5e68:	1004d07a 	srli	r2,r2,1
    5e6c:	1080004c 	andi	r2,r2,1
    5e70:	0084303a 	nor	r2,zero,r2
    5e74:	1080004c 	andi	r2,r2,1
    5e78:	1007883a 	mov	r3,r2
    5e7c:	e0bffd17 	ldw	r2,-12(fp)
    5e80:	18c0004c 	andi	r3,r3,1
    5e84:	18cb883a 	add	r5,r3,r3
    5e88:	11000303 	ldbu	r4,12(r2)
    5e8c:	00ffff44 	movi	r3,-3
    5e90:	20c6703a 	and	r3,r4,r3
    5e94:	1809883a 	mov	r4,r3
    5e98:	2807883a 	mov	r3,r5
    5e9c:	20c6b03a 	or	r3,r4,r3
    5ea0:	10c00305 	stb	r3,12(r2)
                                break;
    5ea4:	00001306 	br	5ef4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5ea8:	e0bffd17 	ldw	r2,-12(fp)
    5eac:	10800317 	ldw	r2,12(r2)
    5eb0:	1004d0ba 	srli	r2,r2,2
    5eb4:	1080004c 	andi	r2,r2,1
    5eb8:	0084303a 	nor	r2,zero,r2
    5ebc:	1080004c 	andi	r2,r2,1
    5ec0:	1007883a 	mov	r3,r2
    5ec4:	e0bffd17 	ldw	r2,-12(fp)
    5ec8:	18c0004c 	andi	r3,r3,1
    5ecc:	18c7883a 	add	r3,r3,r3
    5ed0:	18cb883a 	add	r5,r3,r3
    5ed4:	11000303 	ldbu	r4,12(r2)
    5ed8:	00fffec4 	movi	r3,-5
    5edc:	20c6703a 	and	r3,r4,r3
    5ee0:	1809883a 	mov	r4,r3
    5ee4:	2807883a 	mov	r3,r5
    5ee8:	20c6b03a 	or	r3,r4,r3
    5eec:	10c00305 	stb	r3,12(r2)
                                break;
    5ef0:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	10800303 	ldbu	r2,12(r2)
    5efc:	10c03fcc 	andi	r3,r2,255
    5f00:	e0bffc03 	ldbu	r2,-16(fp)
    5f04:	18801026 	beq	r3,r2,5f48 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5f08:	e0bffe17 	ldw	r2,-8(fp)
    5f0c:	10000e26 	beq	r2,zero,5f48 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5f10:	e0bffd17 	ldw	r2,-12(fp)
    5f14:	10800303 	ldbu	r2,12(r2)
    5f18:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5f1c:	e0bffc44 	addi	r2,fp,-15
    5f20:	d8800215 	stw	r2,8(sp)
    5f24:	00800044 	movi	r2,1
    5f28:	d8800115 	stw	r2,4(sp)
    5f2c:	d8000015 	stw	zero,0(sp)
    5f30:	01c00084 	movi	r7,2
    5f34:	000d883a 	mov	r6,zero
    5f38:	000b883a 	mov	r5,zero
    5f3c:	e13ffe17 	ldw	r4,-8(fp)
    5f40:	0008e580 	call	8e58 <_ZN6USBHID9SetReportEhhhhtPh>
    5f44:	00000106 	br	5f4c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5f48:	0005883a 	mov	r2,zero
        };
    5f4c:	e037883a 	mov	sp,fp
    5f50:	dfc00117 	ldw	ra,4(sp)
    5f54:	df000017 	ldw	fp,0(sp)
    5f58:	dec00204 	addi	sp,sp,8
    5f5c:	f800283a 	ret

00005f60 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    5f60:	defffc04 	addi	sp,sp,-16
    5f64:	df000315 	stw	fp,12(sp)
    5f68:	df000304 	addi	fp,sp,12
    5f6c:	e13ffd15 	stw	r4,-12(fp)
    5f70:	2807883a 	mov	r3,r5
    5f74:	3005883a 	mov	r2,r6
    5f78:	e0fffe05 	stb	r3,-8(fp)
    5f7c:	e0bfff05 	stb	r2,-4(fp)
        };
    5f80:	0001883a 	nop
    5f84:	e037883a 	mov	sp,fp
    5f88:	df000017 	ldw	fp,0(sp)
    5f8c:	dec00104 	addi	sp,sp,4
    5f90:	f800283a 	ret

00005f94 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5f94:	defffc04 	addi	sp,sp,-16
    5f98:	df000315 	stw	fp,12(sp)
    5f9c:	df000304 	addi	fp,sp,12
    5fa0:	e13ffd15 	stw	r4,-12(fp)
    5fa4:	2807883a 	mov	r3,r5
    5fa8:	3005883a 	mov	r2,r6
    5fac:	e0fffe05 	stb	r3,-8(fp)
    5fb0:	e0bfff05 	stb	r2,-4(fp)
        };
    5fb4:	0001883a 	nop
    5fb8:	e037883a 	mov	sp,fp
    5fbc:	df000017 	ldw	fp,0(sp)
    5fc0:	dec00104 	addi	sp,sp,4
    5fc4:	f800283a 	ret

00005fc8 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    5fc8:	defffc04 	addi	sp,sp,-16
    5fcc:	df000315 	stw	fp,12(sp)
    5fd0:	df000304 	addi	fp,sp,12
    5fd4:	e13ffd15 	stw	r4,-12(fp)
    5fd8:	2807883a 	mov	r3,r5
    5fdc:	3005883a 	mov	r2,r6
    5fe0:	e0fffe05 	stb	r3,-8(fp)
    5fe4:	e0bfff05 	stb	r2,-4(fp)
        };
    5fe8:	0001883a 	nop
    5fec:	e037883a 	mov	sp,fp
    5ff0:	df000017 	ldw	fp,0(sp)
    5ff4:	dec00104 	addi	sp,sp,4
    5ff8:	f800283a 	ret

00005ffc <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    5ffc:	defffe04 	addi	sp,sp,-8
    6000:	df000115 	stw	fp,4(sp)
    6004:	df000104 	addi	fp,sp,4
    6008:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    600c:	008000b4 	movhi	r2,2
    6010:	1097f184 	addi	r2,r2,24518
        };
    6014:	e037883a 	mov	sp,fp
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00104 	addi	sp,sp,4
    6020:	f800283a 	ret

00006024 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    6024:	defffe04 	addi	sp,sp,-8
    6028:	df000115 	stw	fp,4(sp)
    602c:	df000104 	addi	fp,sp,4
    6030:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    6034:	008000b4 	movhi	r2,2
    6038:	1097f404 	addi	r2,r2,24528
        };
    603c:	e037883a 	mov	sp,fp
    6040:	df000017 	ldw	fp,0(sp)
    6044:	dec00104 	addi	sp,sp,4
    6048:	f800283a 	ret

0000604c <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    604c:	defffe04 	addi	sp,sp,-8
    6050:	df000115 	stw	fp,4(sp)
    6054:	df000104 	addi	fp,sp,4
    6058:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    605c:	008000b4 	movhi	r2,2
    6060:	1097f704 	addi	r2,r2,24540
        };
    6064:	e037883a 	mov	sp,fp
    6068:	df000017 	ldw	fp,0(sp)
    606c:	dec00104 	addi	sp,sp,4
    6070:	f800283a 	ret

00006074 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6074:	defffe04 	addi	sp,sp,-8
    6078:	df000115 	stw	fp,4(sp)
    607c:	df000104 	addi	fp,sp,4
    6080:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6084:	d0a1e684 	addi	r2,gp,-30822
        };
    6088:	e037883a 	mov	sp,fp
    608c:	df000017 	ldw	fp,0(sp)
    6090:	dec00104 	addi	sp,sp,4
    6094:	f800283a 	ret

00006098 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6098:	defffc04 	addi	sp,sp,-16
    609c:	dfc00315 	stw	ra,12(sp)
    60a0:	df000215 	stw	fp,8(sp)
    60a4:	df000204 	addi	fp,sp,8
    60a8:	2005883a 	mov	r2,r4
    60ac:	e17fff15 	stw	r5,-4(fp)
    60b0:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    60b4:	d0e1eb17 	ldw	r3,-30804(gp)
    60b8:	e0bfff17 	ldw	r2,-4(fp)
    60bc:	18800416 	blt	r3,r2,60d0 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    60c0:	e0bffe07 	ldb	r2,-8(fp)
    60c4:	1009883a 	mov	r4,r2
    60c8:	000ef9c0 	call	ef9c <putchar>
    60cc:	00000106 	br	60d4 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    60d0:	0001883a 	nop
        printf("%c", c);
}
    60d4:	e037883a 	mov	sp,fp
    60d8:	dfc00117 	ldw	ra,4(sp)
    60dc:	df000017 	ldw	fp,0(sp)
    60e0:	dec00204 	addi	sp,sp,8
    60e4:	f800283a 	ret

000060e8 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    60e8:	defffb04 	addi	sp,sp,-20
    60ec:	dfc00415 	stw	ra,16(sp)
    60f0:	df000315 	stw	fp,12(sp)
    60f4:	df000304 	addi	fp,sp,12
    60f8:	e13ffe15 	stw	r4,-8(fp)
    60fc:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6100:	d0e1eb17 	ldw	r3,-30804(gp)
    6104:	e0bfff17 	ldw	r2,-4(fp)
    6108:	18801016 	blt	r3,r2,614c <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    610c:	e0bffe17 	ldw	r2,-8(fp)
    6110:	10001026 	beq	r2,zero,6154 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    6114:	e0bffe17 	ldw	r2,-8(fp)
    6118:	10c00044 	addi	r3,r2,1
    611c:	e0fffe15 	stw	r3,-8(fp)
    6120:	10800003 	ldbu	r2,0(r2)
    6124:	e0bffd05 	stb	r2,-12(fp)
    6128:	e0bffd07 	ldb	r2,-12(fp)
    612c:	1004c03a 	cmpne	r2,r2,zero
    6130:	10803fcc 	andi	r2,r2,255
    6134:	10000826 	beq	r2,zero,6158 <_Z8E_NotifyPKci+0x70>
    6138:	e0bffd07 	ldb	r2,-12(fp)
    613c:	e17fff17 	ldw	r5,-4(fp)
    6140:	1009883a 	mov	r4,r2
    6144:	00060980 	call	6098 <_Z9E_Notifycci>
    6148:	003ff206 	br	6114 <__alt_data_end+0xfc006114>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    614c:	0001883a 	nop
    6150:	00000106 	br	6158 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    6154:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    6158:	e037883a 	mov	sp,fp
    615c:	dfc00117 	ldw	ra,4(sp)
    6160:	df000017 	ldw	fp,0(sp)
    6164:	dec00204 	addi	sp,sp,8
    6168:	f800283a 	ret

0000616c <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    616c:	defffb04 	addi	sp,sp,-20
    6170:	dfc00415 	stw	ra,16(sp)
    6174:	df000315 	stw	fp,12(sp)
    6178:	df000304 	addi	fp,sp,12
    617c:	e13ffe15 	stw	r4,-8(fp)
    6180:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6184:	d0e1eb17 	ldw	r3,-30804(gp)
    6188:	e0bfff17 	ldw	r2,-4(fp)
    618c:	18801016 	blt	r3,r2,61d0 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6190:	e0bffe17 	ldw	r2,-8(fp)
    6194:	10001026 	beq	r2,zero,61d8 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6198:	e0bffe17 	ldw	r2,-8(fp)
    619c:	10c00044 	addi	r3,r2,1
    61a0:	e0fffe15 	stw	r3,-8(fp)
    61a4:	10800003 	ldbu	r2,0(r2)
    61a8:	e0bffd05 	stb	r2,-12(fp)
    61ac:	e0bffd07 	ldb	r2,-12(fp)
    61b0:	1004c03a 	cmpne	r2,r2,zero
    61b4:	10803fcc 	andi	r2,r2,255
    61b8:	10000826 	beq	r2,zero,61dc <_Z11E_NotifyStrPKci+0x70>
    61bc:	e0bffd07 	ldb	r2,-12(fp)
    61c0:	e17fff17 	ldw	r5,-4(fp)
    61c4:	1009883a 	mov	r4,r2
    61c8:	00060980 	call	6098 <_Z9E_Notifycci>
    61cc:	003ff206 	br	6198 <__alt_data_end+0xfc006198>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    61d0:	0001883a 	nop
    61d4:	00000106 	br	61dc <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    61d8:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    61dc:	e037883a 	mov	sp,fp
    61e0:	dfc00117 	ldw	ra,4(sp)
    61e4:	df000017 	ldw	fp,0(sp)
    61e8:	dec00204 	addi	sp,sp,8
    61ec:	f800283a 	ret

000061f0 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    61f0:	defffd04 	addi	sp,sp,-12
    61f4:	df000215 	stw	fp,8(sp)
    61f8:	df000204 	addi	fp,sp,8
    61fc:	2005883a 	mov	r2,r4
    6200:	e17fff15 	stw	r5,-4(fp)
    6204:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6208:	e037883a 	mov	sp,fp
    620c:	df000017 	ldw	fp,0(sp)
    6210:	dec00104 	addi	sp,sp,4
    6214:	f800283a 	ret

00006218 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    6218:	defffc04 	addi	sp,sp,-16
    621c:	df000315 	stw	fp,12(sp)
    6220:	df000304 	addi	fp,sp,12
    6224:	e13ffd15 	stw	r4,-12(fp)
    6228:	e17ffe15 	stw	r5,-8(fp)
    622c:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    6230:	e037883a 	mov	sp,fp
    6234:	df000017 	ldw	fp,0(sp)
    6238:	dec00104 	addi	sp,sp,4
    623c:	f800283a 	ret

00006240 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    6240:	defffc04 	addi	sp,sp,-16
    6244:	df000315 	stw	fp,12(sp)
    6248:	df000304 	addi	fp,sp,12
    624c:	e13ffd15 	stw	r4,-12(fp)
    6250:	e17ffe15 	stw	r5,-8(fp)
    6254:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    6258:	e0bffd17 	ldw	r2,-12(fp)
    625c:	10800017 	ldw	r2,0(r2)
    6260:	1000021e 	bne	r2,zero,626c <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6264:	0005883a 	mov	r2,zero
    6268:	00003306 	br	6338 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    626c:	e0bffd17 	ldw	r2,-12(fp)
    6270:	10800103 	ldbu	r2,4(r2)
    6274:	10803fcc 	andi	r2,r2,255
    6278:	10002426 	beq	r2,zero,630c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    627c:	e0bfff17 	ldw	r2,-4(fp)
    6280:	1080000b 	ldhu	r2,0(r2)
    6284:	10bfffcc 	andi	r2,r2,65535
    6288:	10002026 	beq	r2,zero,630c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    628c:	e0bffd17 	ldw	r2,-12(fp)
    6290:	10800017 	ldw	r2,0(r2)
    6294:	e0fffd17 	ldw	r3,-12(fp)
    6298:	18c00143 	ldbu	r3,5(r3)
    629c:	19003fcc 	andi	r4,r3,255
    62a0:	e0fffd17 	ldw	r3,-12(fp)
    62a4:	18c00103 	ldbu	r3,4(r3)
    62a8:	18c03fcc 	andi	r3,r3,255
    62ac:	20c7c83a 	sub	r3,r4,r3
    62b0:	10c5883a 	add	r2,r2,r3
    62b4:	e0fffe17 	ldw	r3,-8(fp)
    62b8:	18c00017 	ldw	r3,0(r3)
    62bc:	18c00003 	ldbu	r3,0(r3)
    62c0:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    62c4:	e0bffd17 	ldw	r2,-12(fp)
    62c8:	10800103 	ldbu	r2,4(r2)
    62cc:	10bfffc4 	addi	r2,r2,-1
    62d0:	1007883a 	mov	r3,r2
    62d4:	e0bffd17 	ldw	r2,-12(fp)
    62d8:	10c00105 	stb	r3,4(r2)
    62dc:	e0bfff17 	ldw	r2,-4(fp)
    62e0:	1080000b 	ldhu	r2,0(r2)
    62e4:	10bfffc4 	addi	r2,r2,-1
    62e8:	1007883a 	mov	r3,r2
    62ec:	e0bfff17 	ldw	r2,-4(fp)
    62f0:	10c0000d 	sth	r3,0(r2)
    62f4:	e0bffe17 	ldw	r2,-8(fp)
    62f8:	10800017 	ldw	r2,0(r2)
    62fc:	10c00044 	addi	r3,r2,1
    6300:	e0bffe17 	ldw	r2,-8(fp)
    6304:	10c00015 	stw	r3,0(r2)
    6308:	003fd806 	br	626c <__alt_data_end+0xfc00626c>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    630c:	e0bffd17 	ldw	r2,-12(fp)
    6310:	10800103 	ldbu	r2,4(r2)
    6314:	10803fcc 	andi	r2,r2,255
    6318:	10000226 	beq	r2,zero,6324 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    631c:	0005883a 	mov	r2,zero
    6320:	00000506 	br	6338 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    6324:	e0bffd17 	ldw	r2,-12(fp)
    6328:	10c00143 	ldbu	r3,5(r2)
    632c:	e0bffd17 	ldw	r2,-12(fp)
    6330:	10c00105 	stb	r3,4(r2)
        return true;
    6334:	00800044 	movi	r2,1
}
    6338:	e037883a 	mov	sp,fp
    633c:	df000017 	ldw	fp,0(sp)
    6340:	dec00104 	addi	sp,sp,4
    6344:	f800283a 	ret

00006348 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    6348:	defffa04 	addi	sp,sp,-24
    634c:	dfc00515 	stw	ra,20(sp)
    6350:	df000415 	stw	fp,16(sp)
    6354:	df000404 	addi	fp,sp,16
    6358:	e13ffc15 	stw	r4,-16(fp)
    635c:	e17ffd15 	stw	r5,-12(fp)
    6360:	e1bffe15 	stw	r6,-8(fp)
    6364:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    6368:	e0bffc17 	ldw	r2,-16(fp)
    636c:	10800003 	ldbu	r2,0(r2)
    6370:	10803fcc 	andi	r2,r2,255
    6374:	10c00060 	cmpeqi	r3,r2,1
    6378:	1800181e 	bne	r3,zero,63dc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    637c:	10c00088 	cmpgei	r3,r2,2
    6380:	1800021e 	bne	r3,zero,638c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6384:	10000626 	beq	r2,zero,63a0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6388:	00007e06 	br	6584 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    638c:	10c000a0 	cmpeqi	r3,r2,2
    6390:	18004a1e 	bne	r3,zero,64bc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6394:	108000e0 	cmpeqi	r2,r2,3
    6398:	1000571e 	bne	r2,zero,64f8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    639c:	00007906 	br	6584 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    63a0:	e0bffc17 	ldw	r2,-16(fp)
    63a4:	10800417 	ldw	r2,16(r2)
    63a8:	e0fffc17 	ldw	r3,-16(fp)
    63ac:	18c00303 	ldbu	r3,12(r3)
    63b0:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    63b4:	e0bffc17 	ldw	r2,-16(fp)
    63b8:	10c00504 	addi	r3,r2,20
    63bc:	e0bffc17 	ldw	r2,-16(fp)
    63c0:	10800417 	ldw	r2,16(r2)
    63c4:	100b883a 	mov	r5,r2
    63c8:	1809883a 	mov	r4,r3
    63cc:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    63d0:	e0bffc17 	ldw	r2,-16(fp)
    63d4:	00c00044 	movi	r3,1
    63d8:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    63dc:	e0bffc17 	ldw	r2,-16(fp)
    63e0:	10800504 	addi	r2,r2,20
    63e4:	e1bffe17 	ldw	r6,-8(fp)
    63e8:	e17ffd17 	ldw	r5,-12(fp)
    63ec:	1009883a 	mov	r4,r2
    63f0:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    63f4:	1080005c 	xori	r2,r2,1
    63f8:	10803fcc 	andi	r2,r2,255
    63fc:	10000226 	beq	r2,zero,6408 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6400:	0005883a 	mov	r2,zero
    6404:	00006006 	br	6588 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6408:	e0bffc17 	ldw	r2,-16(fp)
    640c:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6410:	e0bffc17 	ldw	r2,-16(fp)
    6414:	10800417 	ldw	r2,16(r2)
    6418:	10800003 	ldbu	r2,0(r2)
    641c:	10803fcc 	andi	r2,r2,255
    6420:	10800130 	cmpltui	r2,r2,4
    6424:	10000e1e 	bne	r2,zero,6460 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    6428:	e0bffc17 	ldw	r2,-16(fp)
    642c:	10800417 	ldw	r2,16(r2)
    6430:	10c00043 	ldbu	r3,1(r2)
    6434:	11000083 	ldbu	r4,2(r2)
    6438:	2008923a 	slli	r4,r4,8
    643c:	20c6b03a 	or	r3,r4,r3
    6440:	110000c3 	ldbu	r4,3(r2)
    6444:	2008943a 	slli	r4,r4,16
    6448:	20c6b03a 	or	r3,r4,r3
    644c:	10800103 	ldbu	r2,4(r2)
    6450:	1004963a 	slli	r2,r2,24
    6454:	10c4b03a 	or	r2,r2,r3
    6458:	10800017 	ldw	r2,0(r2)
    645c:	00000e06 	br	6498 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    6460:	e0bffc17 	ldw	r2,-16(fp)
    6464:	10800417 	ldw	r2,16(r2)
    6468:	10c00043 	ldbu	r3,1(r2)
    646c:	11000083 	ldbu	r4,2(r2)
    6470:	2008923a 	slli	r4,r4,8
    6474:	20c6b03a 	or	r3,r4,r3
    6478:	110000c3 	ldbu	r4,3(r2)
    647c:	2008943a 	slli	r4,r4,16
    6480:	20c6b03a 	or	r3,r4,r3
    6484:	10800103 	ldbu	r2,4(r2)
    6488:	1004963a 	slli	r2,r2,24
    648c:	10c4b03a 	or	r2,r2,r3
    6490:	1080000b 	ldhu	r2,0(r2)
    6494:	10bfffcc 	andi	r2,r2,65535
    6498:	e0fffc17 	ldw	r3,-16(fp)
    649c:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    64a0:	e0bffc17 	ldw	r2,-16(fp)
    64a4:	10c00117 	ldw	r3,4(r2)
    64a8:	e0bffc17 	ldw	r2,-16(fp)
    64ac:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	00c00084 	movi	r3,2
    64b8:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    64bc:	e0bffc17 	ldw	r2,-16(fp)
    64c0:	10800417 	ldw	r2,16(r2)
    64c4:	e0fffc17 	ldw	r3,-16(fp)
    64c8:	18c00343 	ldbu	r3,13(r3)
    64cc:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    64d0:	e0bffc17 	ldw	r2,-16(fp)
    64d4:	10c00504 	addi	r3,r2,20
    64d8:	e0bffc17 	ldw	r2,-16(fp)
    64dc:	10800417 	ldw	r2,16(r2)
    64e0:	100b883a 	mov	r5,r2
    64e4:	1809883a 	mov	r4,r3
    64e8:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    64ec:	e0bffc17 	ldw	r2,-16(fp)
    64f0:	00c000c4 	movi	r3,3
    64f4:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    64f8:	e0bffc17 	ldw	r2,-16(fp)
    64fc:	10800217 	ldw	r2,8(r2)
    6500:	10001e26 	beq	r2,zero,657c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	10800504 	addi	r2,r2,20
    650c:	e1bffe17 	ldw	r6,-8(fp)
    6510:	e17ffd17 	ldw	r5,-12(fp)
    6514:	1009883a 	mov	r4,r2
    6518:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    651c:	1080005c 	xori	r2,r2,1
    6520:	10803fcc 	andi	r2,r2,255
    6524:	10000226 	beq	r2,zero,6530 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    6528:	0005883a 	mov	r2,zero
    652c:	00001606 	br	6588 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    6530:	e0bfff17 	ldw	r2,-4(fp)
    6534:	10000b26 	beq	r2,zero,6564 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    6538:	e0bffc17 	ldw	r2,-16(fp)
    653c:	11000417 	ldw	r4,16(r2)
    6540:	e0bffc17 	ldw	r2,-16(fp)
    6544:	10c00117 	ldw	r3,4(r2)
    6548:	e0bffc17 	ldw	r2,-16(fp)
    654c:	10800217 	ldw	r2,8(r2)
    6550:	1887c83a 	sub	r3,r3,r2
    6554:	e0bfff17 	ldw	r2,-4(fp)
    6558:	e1800217 	ldw	r6,8(fp)
    655c:	180b883a 	mov	r5,r3
    6560:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6564:	e0bffc17 	ldw	r2,-16(fp)
    6568:	10800217 	ldw	r2,8(r2)
    656c:	10ffffc4 	addi	r3,r2,-1
    6570:	e0bffc17 	ldw	r2,-16(fp)
    6574:	10c00215 	stw	r3,8(r2)
    6578:	003fdf06 	br	64f8 <__alt_data_end+0xfc0064f8>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    657c:	e0bffc17 	ldw	r2,-16(fp)
    6580:	10000005 	stb	zero,0(r2)
        }
        return true;
    6584:	00800044 	movi	r2,1
}
    6588:	e037883a 	mov	sp,fp
    658c:	dfc00117 	ldw	ra,4(sp)
    6590:	df000017 	ldw	fp,0(sp)
    6594:	dec00204 	addi	sp,sp,8
    6598:	f800283a 	ret

0000659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    659c:	defff904 	addi	sp,sp,-28
    65a0:	dfc00615 	stw	ra,24(sp)
    65a4:	df000515 	stw	fp,20(sp)
    65a8:	df000504 	addi	fp,sp,20
    65ac:	e13ffd15 	stw	r4,-12(fp)
    65b0:	2807883a 	mov	r3,r5
    65b4:	3005883a 	mov	r2,r6
    65b8:	e0fffe05 	stb	r3,-8(fp)
    65bc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    65c0:	e0bfff0b 	ldhu	r2,-4(fp)
    65c4:	1005d23a 	srai	r2,r2,8
    65c8:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    65cc:	e0bfff0b 	ldhu	r2,-4(fp)
    65d0:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    65d4:	e03ffb8d 	sth	zero,-18(fp)
    65d8:	e03ffc0d 	sth	zero,-16(fp)
    65dc:	e0bffe03 	ldbu	r2,-8(fp)
    65e0:	e0bffbc5 	stb	r2,-17(fp)
    65e4:	e0bffb03 	ldbu	r2,-20(fp)
    65e8:	e0bffc05 	stb	r2,-16(fp)
    65ec:	e0bffb43 	ldbu	r2,-19(fp)
    65f0:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    65f4:	e0bffb84 	addi	r2,fp,-18
    65f8:	000f883a 	mov	r7,zero
    65fc:	01800104 	movi	r6,4
    6600:	100b883a 	mov	r5,r2
    6604:	e13ffd17 	ldw	r4,-12(fp)
    6608:	002095c0 	call	2095c <alt_avalon_i2c_master_tx>
    660c:	1004c03a 	cmpne	r2,r2,zero
    6610:	10803fcc 	andi	r2,r2,255
    6614:	10000426 	beq	r2,zero,6628 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6618:	010000b4 	movhi	r4,2
    661c:	21182504 	addi	r4,r4,24724
    6620:	000ef580 	call	ef58 <printf>
	}
	return;
    6624:	0001883a 	nop
    6628:	0001883a 	nop
}
    662c:	e037883a 	mov	sp,fp
    6630:	dfc00117 	ldw	ra,4(sp)
    6634:	df000017 	ldw	fp,0(sp)
    6638:	dec00204 	addi	sp,sp,8
    663c:	f800283a 	ret

00006640 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6640:	defff604 	addi	sp,sp,-40
    6644:	dfc00915 	stw	ra,36(sp)
    6648:	df000815 	stw	fp,32(sp)
    664c:	dc000715 	stw	r16,28(sp)
    6650:	df000804 	addi	fp,sp,32
    6654:	e13ffb15 	stw	r4,-20(fp)
    6658:	3009883a 	mov	r4,r6
    665c:	e1fffe15 	stw	r7,-8(fp)
    6660:	e17ffc05 	stb	r5,-16(fp)
    6664:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6668:	d809883a 	mov	r4,sp
    666c:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6670:	e13ffd03 	ldbu	r4,-12(fp)
    6674:	21000044 	addi	r4,r4,1
    6678:	2109883a 	add	r4,r4,r4
    667c:	213fffc4 	addi	r4,r4,-1
    6680:	e13ff915 	stw	r4,-28(fp)
    6684:	200b883a 	mov	r5,r4
    6688:	29400044 	addi	r5,r5,1
    668c:	2819883a 	mov	r12,r5
    6690:	001b883a 	mov	r13,zero
    6694:	600ad77a 	srli	r5,r12,29
    6698:	681290fa 	slli	r9,r13,3
    669c:	2a52b03a 	or	r9,r5,r9
    66a0:	601090fa 	slli	r8,r12,3
    66a4:	200b883a 	mov	r5,r4
    66a8:	29400044 	addi	r5,r5,1
    66ac:	2815883a 	mov	r10,r5
    66b0:	0017883a 	mov	r11,zero
    66b4:	500ad77a 	srli	r5,r10,29
    66b8:	580690fa 	slli	r3,r11,3
    66bc:	28c6b03a 	or	r3,r5,r3
    66c0:	500490fa 	slli	r2,r10,3
    66c4:	2005883a 	mov	r2,r4
    66c8:	10800044 	addi	r2,r2,1
    66cc:	108000c4 	addi	r2,r2,3
    66d0:	1004d0ba 	srli	r2,r2,2
    66d4:	1085883a 	add	r2,r2,r2
    66d8:	1085883a 	add	r2,r2,r2
    66dc:	d8b7c83a 	sub	sp,sp,r2
    66e0:	d805883a 	mov	r2,sp
    66e4:	1005883a 	mov	r2,r2
    66e8:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    66ec:	e0bffa17 	ldw	r2,-24(fp)
    66f0:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    66f4:	e0bffa17 	ldw	r2,-24(fp)
    66f8:	e0fffc03 	ldbu	r3,-16(fp)
    66fc:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6700:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6704:	e03ff815 	stw	zero,-32(fp)
    6708:	e0bffd03 	ldbu	r2,-12(fp)
    670c:	e0fff817 	ldw	r3,-32(fp)
    6710:	18801e0e 	bge	r3,r2,678c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6714:	e0bff817 	ldw	r2,-32(fp)
    6718:	10c00084 	addi	r3,r2,2
    671c:	e0bff817 	ldw	r2,-32(fp)
    6720:	1085883a 	add	r2,r2,r2
    6724:	1009883a 	mov	r4,r2
    6728:	e0bffe17 	ldw	r2,-8(fp)
    672c:	1105883a 	add	r2,r2,r4
    6730:	1080000b 	ldhu	r2,0(r2)
    6734:	10bfffcc 	andi	r2,r2,65535
    6738:	1005d23a 	srai	r2,r2,8
    673c:	1009883a 	mov	r4,r2
    6740:	e0bffa17 	ldw	r2,-24(fp)
    6744:	10c5883a 	add	r2,r2,r3
    6748:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    674c:	e0bff817 	ldw	r2,-32(fp)
    6750:	10c000c4 	addi	r3,r2,3
    6754:	e0bff817 	ldw	r2,-32(fp)
    6758:	1085883a 	add	r2,r2,r2
    675c:	1009883a 	mov	r4,r2
    6760:	e0bffe17 	ldw	r2,-8(fp)
    6764:	1105883a 	add	r2,r2,r4
    6768:	1080000b 	ldhu	r2,0(r2)
    676c:	1009883a 	mov	r4,r2
    6770:	e0bffa17 	ldw	r2,-24(fp)
    6774:	10c5883a 	add	r2,r2,r3
    6778:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    677c:	e0bff817 	ldw	r2,-32(fp)
    6780:	10800044 	addi	r2,r2,1
    6784:	e0bff815 	stw	r2,-32(fp)
    6788:	003fdf06 	br	6708 <__alt_data_end+0xfc006708>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    678c:	e0fffa17 	ldw	r3,-24(fp)
    6790:	e0bffd03 	ldbu	r2,-12(fp)
    6794:	10800044 	addi	r2,r2,1
    6798:	1085883a 	add	r2,r2,r2
    679c:	000f883a 	mov	r7,zero
    67a0:	100d883a 	mov	r6,r2
    67a4:	180b883a 	mov	r5,r3
    67a8:	e13ffb17 	ldw	r4,-20(fp)
    67ac:	002095c0 	call	2095c <alt_avalon_i2c_master_tx>
    67b0:	1004c03a 	cmpne	r2,r2,zero
    67b4:	10803fcc 	andi	r2,r2,255
    67b8:	10000326 	beq	r2,zero,67c8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    67bc:	010000b4 	movhi	r4,2
    67c0:	21182c04 	addi	r4,r4,24752
    67c4:	000ef580 	call	ef58 <printf>
	}
	return (data+nwords);
    67c8:	e0bffd03 	ldbu	r2,-12(fp)
    67cc:	1085883a 	add	r2,r2,r2
    67d0:	1007883a 	mov	r3,r2
    67d4:	e0bffe17 	ldw	r2,-8(fp)
    67d8:	10c5883a 	add	r2,r2,r3
    67dc:	8037883a 	mov	sp,r16
}
    67e0:	e6ffff04 	addi	sp,fp,-4
    67e4:	dfc00217 	ldw	ra,8(sp)
    67e8:	df000117 	ldw	fp,4(sp)
    67ec:	dc000017 	ldw	r16,0(sp)
    67f0:	dec00304 	addi	sp,sp,12
    67f4:	f800283a 	ret

000067f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    67f8:	defff804 	addi	sp,sp,-32
    67fc:	dfc00715 	stw	ra,28(sp)
    6800:	df000615 	stw	fp,24(sp)
    6804:	df000604 	addi	fp,sp,24
    6808:	e13ffe15 	stw	r4,-8(fp)
    680c:	2805883a 	mov	r2,r5
    6810:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6814:	e03ffc8d 	sth	zero,-14(fp)
    6818:	e0bfff03 	ldbu	r2,-4(fp)
    681c:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6820:	e03ffd05 	stb	zero,-12(fp)
    6824:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6828:	e13ffd04 	addi	r4,fp,-12
    682c:	e0fffc84 	addi	r3,fp,-14
    6830:	d8000115 	stw	zero,4(sp)
    6834:	00800084 	movi	r2,2
    6838:	d8800015 	stw	r2,0(sp)
    683c:	200f883a 	mov	r7,r4
    6840:	01800084 	movi	r6,2
    6844:	180b883a 	mov	r5,r3
    6848:	e13ffe17 	ldw	r4,-8(fp)
    684c:	0020b800 	call	20b80 <alt_avalon_i2c_master_tx_rx>
    6850:	1004c03a 	cmpne	r2,r2,zero
    6854:	10803fcc 	andi	r2,r2,255
    6858:	10000326 	beq	r2,zero,6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    685c:	010000b4 	movhi	r4,2
    6860:	21183204 	addi	r4,r4,24776
    6864:	000ef580 	call	ef58 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6868:	e0bffd03 	ldbu	r2,-12(fp)
    686c:	10803fcc 	andi	r2,r2,255
    6870:	1004923a 	slli	r2,r2,8
    6874:	1007883a 	mov	r3,r2
    6878:	e0bffd43 	ldbu	r2,-11(fp)
    687c:	10803fcc 	andi	r2,r2,255
    6880:	1884b03a 	or	r2,r3,r2
    6884:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6888:	e0bffc0b 	ldhu	r2,-16(fp)
}
    688c:	e037883a 	mov	sp,fp
    6890:	dfc00117 	ldw	ra,4(sp)
    6894:	df000017 	ldw	fp,0(sp)
    6898:	dec00204 	addi	sp,sp,8
    689c:	f800283a 	ret

000068a0 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    68a0:	defff304 	addi	sp,sp,-52
    68a4:	dfc00c15 	stw	ra,48(sp)
    68a8:	df000b15 	stw	fp,44(sp)
    68ac:	dc000a15 	stw	r16,40(sp)
    68b0:	df000b04 	addi	fp,sp,44
    68b4:	e13ffb15 	stw	r4,-20(fp)
    68b8:	3009883a 	mov	r4,r6
    68bc:	e1fffe15 	stw	r7,-8(fp)
    68c0:	e17ffc05 	stb	r5,-16(fp)
    68c4:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    68c8:	d809883a 	mov	r4,sp
    68cc:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    68d0:	e03ffa0d 	sth	zero,-24(fp)
    68d4:	e13ffc03 	ldbu	r4,-16(fp)
    68d8:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    68dc:	e13ffd03 	ldbu	r4,-12(fp)
    68e0:	2109883a 	add	r4,r4,r4
    68e4:	213fffc4 	addi	r4,r4,-1
    68e8:	e13ff815 	stw	r4,-32(fp)
    68ec:	200b883a 	mov	r5,r4
    68f0:	29400044 	addi	r5,r5,1
    68f4:	2819883a 	mov	r12,r5
    68f8:	001b883a 	mov	r13,zero
    68fc:	600ad77a 	srli	r5,r12,29
    6900:	681290fa 	slli	r9,r13,3
    6904:	2a52b03a 	or	r9,r5,r9
    6908:	601090fa 	slli	r8,r12,3
    690c:	200b883a 	mov	r5,r4
    6910:	29400044 	addi	r5,r5,1
    6914:	2815883a 	mov	r10,r5
    6918:	0017883a 	mov	r11,zero
    691c:	500ad77a 	srli	r5,r10,29
    6920:	580690fa 	slli	r3,r11,3
    6924:	28c6b03a 	or	r3,r5,r3
    6928:	500490fa 	slli	r2,r10,3
    692c:	2005883a 	mov	r2,r4
    6930:	10800044 	addi	r2,r2,1
    6934:	108000c4 	addi	r2,r2,3
    6938:	1004d0ba 	srli	r2,r2,2
    693c:	1085883a 	add	r2,r2,r2
    6940:	1085883a 	add	r2,r2,r2
    6944:	d8b7c83a 	sub	sp,sp,r2
    6948:	d8800204 	addi	r2,sp,8
    694c:	1005883a 	mov	r2,r2
    6950:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6954:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6958:	e0fff917 	ldw	r3,-28(fp)
    695c:	e0bffd03 	ldbu	r2,-12(fp)
    6960:	1085883a 	add	r2,r2,r2
    6964:	1009883a 	mov	r4,r2
    6968:	e0bffa04 	addi	r2,fp,-24
    696c:	d8000115 	stw	zero,4(sp)
    6970:	d9000015 	stw	r4,0(sp)
    6974:	180f883a 	mov	r7,r3
    6978:	01800084 	movi	r6,2
    697c:	100b883a 	mov	r5,r2
    6980:	e13ffb17 	ldw	r4,-20(fp)
    6984:	0020b800 	call	20b80 <alt_avalon_i2c_master_tx_rx>
    6988:	1004c03a 	cmpne	r2,r2,zero
    698c:	10803fcc 	andi	r2,r2,255
    6990:	10000326 	beq	r2,zero,69a0 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6994:	010000b4 	movhi	r4,2
    6998:	21183804 	addi	r4,r4,24800
    699c:	000ef580 	call	ef58 <printf>
	}
	for(i = 0; i < nwords; i++) {
    69a0:	e03ff715 	stw	zero,-36(fp)
    69a4:	e0bffd03 	ldbu	r2,-12(fp)
    69a8:	e0fff717 	ldw	r3,-36(fp)
    69ac:	18801b0e 	bge	r3,r2,6a1c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    69b0:	e0bff717 	ldw	r2,-36(fp)
    69b4:	1085883a 	add	r2,r2,r2
    69b8:	1007883a 	mov	r3,r2
    69bc:	e0bffe17 	ldw	r2,-8(fp)
    69c0:	10c7883a 	add	r3,r2,r3
    69c4:	e0bff717 	ldw	r2,-36(fp)
    69c8:	1085883a 	add	r2,r2,r2
    69cc:	1009883a 	mov	r4,r2
    69d0:	e0bff917 	ldw	r2,-28(fp)
    69d4:	1105883a 	add	r2,r2,r4
    69d8:	10800003 	ldbu	r2,0(r2)
    69dc:	10803fcc 	andi	r2,r2,255
    69e0:	1004923a 	slli	r2,r2,8
    69e4:	100b883a 	mov	r5,r2
    69e8:	e0bff717 	ldw	r2,-36(fp)
    69ec:	1085883a 	add	r2,r2,r2
    69f0:	10800044 	addi	r2,r2,1
    69f4:	e13ff917 	ldw	r4,-28(fp)
    69f8:	2085883a 	add	r2,r4,r2
    69fc:	10800003 	ldbu	r2,0(r2)
    6a00:	10803fcc 	andi	r2,r2,255
    6a04:	2884b03a 	or	r2,r5,r2
    6a08:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6a0c:	e0bff717 	ldw	r2,-36(fp)
    6a10:	10800044 	addi	r2,r2,1
    6a14:	e0bff715 	stw	r2,-36(fp)
    6a18:	003fe206 	br	69a4 <__alt_data_end+0xfc0069a4>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6a1c:	e0bffd03 	ldbu	r2,-12(fp)
    6a20:	1085883a 	add	r2,r2,r2
    6a24:	1007883a 	mov	r3,r2
    6a28:	e0bffe17 	ldw	r2,-8(fp)
    6a2c:	10c5883a 	add	r2,r2,r3
    6a30:	8037883a 	mov	sp,r16
}
    6a34:	e6ffff04 	addi	sp,fp,-4
    6a38:	dfc00217 	ldw	ra,8(sp)
    6a3c:	df000117 	ldw	fp,4(sp)
    6a40:	dc000017 	ldw	r16,0(sp)
    6a44:	dec00304 	addi	sp,sp,12
    6a48:	f800283a 	ret

00006a4c <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6a4c:	defffd04 	addi	sp,sp,-12
    6a50:	dfc00215 	stw	ra,8(sp)
    6a54:	df000115 	stw	fp,4(sp)
    6a58:	df000104 	addi	fp,sp,4
    6a5c:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6a60:	01400284 	movi	r5,10
    6a64:	e13fff17 	ldw	r4,-4(fp)
    6a68:	00207540 	call	20754 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6a6c:	01902f04 	movi	r6,16572
    6a70:	01400c04 	movi	r5,48
    6a74:	e13fff17 	ldw	r4,-4(fp)
    6a78:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6a7c:	01801384 	movi	r6,78
    6a80:	01400a04 	movi	r5,40
    6a84:	e13fff17 	ldw	r4,-4(fp)
    6a88:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6a8c:	01800844 	movi	r6,33
    6a90:	01400084 	movi	r5,2
    6a94:	e13fff17 	ldw	r4,-4(fp)
    6a98:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6a9c:	01800104 	movi	r6,4
    6aa0:	01400104 	movi	r5,4
    6aa4:	e13fff17 	ldw	r4,-4(fp)
    6aa8:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6aac:	000d883a 	mov	r6,zero
    6ab0:	01400184 	movi	r5,6
    6ab4:	e13fff17 	ldw	r4,-4(fp)
    6ab8:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6abc:	01800404 	movi	r6,16
    6ac0:	01400284 	movi	r5,10
    6ac4:	e13fff17 	ldw	r4,-4(fp)
    6ac8:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6acc:	0001883a 	nop
    6ad0:	e037883a 	mov	sp,fp
    6ad4:	dfc00117 	ldw	ra,4(sp)
    6ad8:	df000017 	ldw	fp,0(sp)
    6adc:	dec00204 	addi	sp,sp,8
    6ae0:	f800283a 	ret

00006ae4 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6ae4:	defffd04 	addi	sp,sp,-12
    6ae8:	dfc00215 	stw	ra,8(sp)
    6aec:	df000115 	stw	fp,4(sp)
    6af0:	df000104 	addi	fp,sp,4
    6af4:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6af8:	01901004 	movi	r6,16448
    6afc:	01400884 	movi	r5,34
    6b00:	e13fff17 	ldw	r4,-4(fp)
    6b04:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6b08:	019c1c04 	movi	r6,28784
    6b0c:	01400404 	movi	r5,16
    6b10:	e13fff17 	ldw	r4,-4(fp)
    6b14:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6b18:	01808004 	movi	r6,512
    6b1c:	01400384 	movi	r5,14
    6b20:	e13fff17 	ldw	r4,-4(fp)
    6b24:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6b28:	01804044 	movi	r6,257
    6b2c:	01400904 	movi	r5,36
    6b30:	e13fff17 	ldw	r4,-4(fp)
    6b34:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b38:	0001883a 	nop
    6b3c:	e037883a 	mov	sp,fp
    6b40:	dfc00117 	ldw	ra,4(sp)
    6b44:	df000017 	ldw	fp,0(sp)
    6b48:	dec00204 	addi	sp,sp,8
    6b4c:	f800283a 	ret

00006b50 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6b50:	defffd04 	addi	sp,sp,-12
    6b54:	dfc00215 	stw	ra,8(sp)
    6b58:	df000115 	stw	fp,4(sp)
    6b5c:	df000104 	addi	fp,sp,4
    6b60:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6b64:	000b883a 	mov	r5,zero
    6b68:	e13fff17 	ldw	r4,-4(fp)
    6b6c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b70:	10bfffcc 	andi	r2,r2,65535
    6b74:	100b883a 	mov	r5,r2
    6b78:	010000b4 	movhi	r4,2
    6b7c:	21183e04 	addi	r4,r4,24824
    6b80:	000ef580 	call	ef58 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6b84:	01400084 	movi	r5,2
    6b88:	e13fff17 	ldw	r4,-4(fp)
    6b8c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6b90:	10bfffcc 	andi	r2,r2,65535
    6b94:	100b883a 	mov	r5,r2
    6b98:	010000b4 	movhi	r4,2
    6b9c:	21184104 	addi	r4,r4,24836
    6ba0:	000ef580 	call	ef58 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6ba4:	01400104 	movi	r5,4
    6ba8:	e13fff17 	ldw	r4,-4(fp)
    6bac:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bb0:	10bfffcc 	andi	r2,r2,65535
    6bb4:	100b883a 	mov	r5,r2
    6bb8:	010000b4 	movhi	r4,2
    6bbc:	21184604 	addi	r4,r4,24856
    6bc0:	000ef580 	call	ef58 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6bc4:	01400184 	movi	r5,6
    6bc8:	e13fff17 	ldw	r4,-4(fp)
    6bcc:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bd0:	10bfffcc 	andi	r2,r2,65535
    6bd4:	100b883a 	mov	r5,r2
    6bd8:	010000b4 	movhi	r4,2
    6bdc:	21184b04 	addi	r4,r4,24876
    6be0:	000ef580 	call	ef58 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6be4:	01400284 	movi	r5,10
    6be8:	e13fff17 	ldw	r4,-4(fp)
    6bec:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6bf0:	10bfffcc 	andi	r2,r2,65535
    6bf4:	100b883a 	mov	r5,r2
    6bf8:	010000b4 	movhi	r4,2
    6bfc:	21185004 	addi	r4,r4,24896
    6c00:	000ef580 	call	ef58 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6c04:	01400c04 	movi	r5,48
    6c08:	e13fff17 	ldw	r4,-4(fp)
    6c0c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c10:	10bfffcc 	andi	r2,r2,65535
    6c14:	100b883a 	mov	r5,r2
    6c18:	010000b4 	movhi	r4,2
    6c1c:	21185504 	addi	r4,r4,24916
    6c20:	000ef580 	call	ef58 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6c24:	01400384 	movi	r5,14
    6c28:	e13fff17 	ldw	r4,-4(fp)
    6c2c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c30:	10bfffcc 	andi	r2,r2,65535
    6c34:	100b883a 	mov	r5,r2
    6c38:	010000b4 	movhi	r4,2
    6c3c:	21185a04 	addi	r4,r4,24936
    6c40:	000ef580 	call	ef58 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6c44:	01400904 	movi	r5,36
    6c48:	e13fff17 	ldw	r4,-4(fp)
    6c4c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c50:	10bfffcc 	andi	r2,r2,65535
    6c54:	100b883a 	mov	r5,r2
    6c58:	010000b4 	movhi	r4,2
    6c5c:	21185f04 	addi	r4,r4,24956
    6c60:	000ef580 	call	ef58 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6c64:	01400e04 	movi	r5,56
    6c68:	e13fff17 	ldw	r4,-4(fp)
    6c6c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c70:	10bfffcc 	andi	r2,r2,65535
    6c74:	100b883a 	mov	r5,r2
    6c78:	010000b4 	movhi	r4,2
    6c7c:	21186404 	addi	r4,r4,24976
    6c80:	000ef580 	call	ef58 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6c84:	01400804 	movi	r5,32
    6c88:	e13fff17 	ldw	r4,-4(fp)
    6c8c:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c90:	10bfffcc 	andi	r2,r2,65535
    6c94:	100b883a 	mov	r5,r2
    6c98:	010000b4 	movhi	r4,2
    6c9c:	21186904 	addi	r4,r4,24996
    6ca0:	000ef580 	call	ef58 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6ca4:	01400404 	movi	r5,16
    6ca8:	e13fff17 	ldw	r4,-4(fp)
    6cac:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cb0:	10bfffcc 	andi	r2,r2,65535
    6cb4:	100b883a 	mov	r5,r2
    6cb8:	010000b4 	movhi	r4,2
    6cbc:	21186e04 	addi	r4,r4,25016
    6cc0:	000ef580 	call	ef58 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6cc4:	01400884 	movi	r5,34
    6cc8:	e13fff17 	ldw	r4,-4(fp)
    6ccc:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cd0:	10bfffcc 	andi	r2,r2,65535
    6cd4:	100b883a 	mov	r5,r2
    6cd8:	010000b4 	movhi	r4,2
    6cdc:	21187304 	addi	r4,r4,25036
    6ce0:	000ef580 	call	ef58 <printf>
}
    6ce4:	0001883a 	nop
    6ce8:	e037883a 	mov	sp,fp
    6cec:	dfc00117 	ldw	ra,4(sp)
    6cf0:	df000017 	ldw	fp,0(sp)
    6cf4:	dec00204 	addi	sp,sp,8
    6cf8:	f800283a 	ret

00006cfc <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6cfc:	defffc04 	addi	sp,sp,-16
    6d00:	dfc00315 	stw	ra,12(sp)
    6d04:	df000215 	stw	fp,8(sp)
    6d08:	df000204 	addi	fp,sp,8
    6d0c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6d10:	01400404 	movi	r5,16
    6d14:	e13fff17 	ldw	r4,-4(fp)
    6d18:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d1c:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6d20:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6d24:	e0bffe8b 	ldhu	r2,-6(fp)
    6d28:	100b883a 	mov	r5,r2
    6d2c:	010000b4 	movhi	r4,2
    6d30:	21187804 	addi	r4,r4,25056
    6d34:	000ef580 	call	ef58 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6d38:	e0bffe8b 	ldhu	r2,-6(fp)
    6d3c:	1005d23a 	srai	r2,r2,8
    6d40:	10800084 	addi	r2,r2,2
    6d44:	100b883a 	mov	r5,r2
    6d48:	010000b4 	movhi	r4,2
    6d4c:	21187c04 	addi	r4,r4,25072
    6d50:	000ef580 	call	ef58 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6d54:	01400f04 	movi	r5,60
    6d58:	010000b4 	movhi	r4,2
    6d5c:	21187f04 	addi	r4,r4,25084
    6d60:	000ef580 	call	ef58 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6d64:	e0bffe8b 	ldhu	r2,-6(fp)
    6d68:	1005d23a 	srai	r2,r2,8
    6d6c:	10bfff84 	addi	r2,r2,-2
    6d70:	10800f48 	cmpgei	r2,r2,61
    6d74:	1000031e 	bne	r2,zero,6d84 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6d78:	008f0f04 	movi	r2,15420
    6d7c:	e0bffe0d 	sth	r2,-8(fp)
    6d80:	00000306 	br	6d90 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6d84:	e0bffe8b 	ldhu	r2,-6(fp)
    6d88:	10bf7f84 	addi	r2,r2,-514
    6d8c:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6d90:	e0bffe0b 	ldhu	r2,-8(fp)
    6d94:	100b883a 	mov	r5,r2
    6d98:	010000b4 	movhi	r4,2
    6d9c:	21188204 	addi	r4,r4,25096
    6da0:	000ef580 	call	ef58 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6da4:	e0bffe0b 	ldhu	r2,-8(fp)
    6da8:	100d883a 	mov	r6,r2
    6dac:	01400404 	movi	r5,16
    6db0:	e13fff17 	ldw	r4,-4(fp)
    6db4:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6db8:	0001883a 	nop
    6dbc:	e037883a 	mov	sp,fp
    6dc0:	dfc00117 	ldw	ra,4(sp)
    6dc4:	df000017 	ldw	fp,0(sp)
    6dc8:	dec00204 	addi	sp,sp,8
    6dcc:	f800283a 	ret

00006dd0 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6dd0:	defffc04 	addi	sp,sp,-16
    6dd4:	dfc00315 	stw	ra,12(sp)
    6dd8:	df000215 	stw	fp,8(sp)
    6ddc:	df000204 	addi	fp,sp,8
    6de0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6de4:	01400404 	movi	r5,16
    6de8:	e13fff17 	ldw	r4,-4(fp)
    6dec:	00067f80 	call	67f8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6df0:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6df4:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6df8:	e0bffe8b 	ldhu	r2,-6(fp)
    6dfc:	1005d23a 	srai	r2,r2,8
    6e00:	10800084 	addi	r2,r2,2
    6e04:	10803c10 	cmplti	r2,r2,240
    6e08:	1000031e 	bne	r2,zero,6e18 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6e0c:	00bc3c04 	movi	r2,-3856
    6e10:	e0bffe0d 	sth	r2,-8(fp)
    6e14:	00000306 	br	6e24 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6e18:	e0bffe8b 	ldhu	r2,-6(fp)
    6e1c:	10808084 	addi	r2,r2,514
    6e20:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e24:	e0bffe0b 	ldhu	r2,-8(fp)
    6e28:	100d883a 	mov	r6,r2
    6e2c:	01400404 	movi	r5,16
    6e30:	e13fff17 	ldw	r4,-4(fp)
    6e34:	000659c0 	call	659c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6e38:	0001883a 	nop
    6e3c:	e037883a 	mov	sp,fp
    6e40:	dfc00117 	ldw	ra,4(sp)
    6e44:	df000017 	ldw	fp,0(sp)
    6e48:	dec00204 	addi	sp,sp,8
    6e4c:	f800283a 	ret

00006e50 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6e50:	defffb04 	addi	sp,sp,-20
    6e54:	dfc00415 	stw	ra,16(sp)
    6e58:	df000315 	stw	fp,12(sp)
    6e5c:	df000304 	addi	fp,sp,12
    6e60:	e13ffe15 	stw	r4,-8(fp)
    6e64:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6e68:	e0bffe17 	ldw	r2,-8(fp)
    6e6c:	1009883a 	mov	r4,r2
    6e70:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    6e74:	e0bffe17 	ldw	r2,-8(fp)
    6e78:	10800104 	addi	r2,r2,4
    6e7c:	1009883a 	mov	r4,r2
    6e80:	0008d580 	call	8d58 <_ZN21UsbMidiConfigXtracterC1Ev>
    6e84:	008000b4 	movhi	r2,2
    6e88:	10988f04 	addi	r2,r2,25148
    6e8c:	e0fffe17 	ldw	r3,-8(fp)
    6e90:	18800015 	stw	r2,0(r3)
    6e94:	008000b4 	movhi	r2,2
    6e98:	10989b04 	addi	r2,r2,25196
    6e9c:	e0fffe17 	ldw	r3,-8(fp)
    6ea0:	18800115 	stw	r2,4(r3)
    6ea4:	e0bffe17 	ldw	r2,-8(fp)
    6ea8:	e0ffff17 	ldw	r3,-4(fp)
    6eac:	10c00215 	stw	r3,8(r2)
    6eb0:	e0bffe17 	ldw	r2,-8(fp)
    6eb4:	10000305 	stb	zero,12(r2)
    6eb8:	e0bffe17 	ldw	r2,-8(fp)
    6ebc:	10000345 	stb	zero,13(r2)
    6ec0:	e0bffe17 	ldw	r2,-8(fp)
    6ec4:	10001705 	stb	zero,92(r2)
    6ec8:	e0bffe17 	ldw	r2,-8(fp)
    6ecc:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6ed0:	e03ffd05 	stb	zero,-12(fp)
    6ed4:	e0bffd03 	ldbu	r2,-12(fp)
    6ed8:	108000e8 	cmpgeui	r2,r2,3
    6edc:	10002d1e 	bne	r2,zero,6f94 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6ee0:	e0fffd03 	ldbu	r3,-12(fp)
    6ee4:	e13ffe17 	ldw	r4,-8(fp)
    6ee8:	1805883a 	mov	r2,r3
    6eec:	1085883a 	add	r2,r2,r2
    6ef0:	10c5883a 	add	r2,r2,r3
    6ef4:	2085883a 	add	r2,r4,r2
    6ef8:	108004c4 	addi	r2,r2,19
    6efc:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6f00:	e13ffd03 	ldbu	r4,-12(fp)
    6f04:	e0bffd03 	ldbu	r2,-12(fp)
    6f08:	10000226 	beq	r2,zero,6f14 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6f0c:	0007883a 	mov	r3,zero
    6f10:	00000106 	br	6f18 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6f14:	00c00204 	movi	r3,8
    6f18:	e17ffe17 	ldw	r5,-8(fp)
    6f1c:	2005883a 	mov	r2,r4
    6f20:	1085883a 	add	r2,r2,r2
    6f24:	1105883a 	add	r2,r2,r4
    6f28:	2885883a 	add	r2,r5,r2
    6f2c:	10800504 	addi	r2,r2,20
    6f30:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6f34:	e13ffd03 	ldbu	r4,-12(fp)
    6f38:	e0bffd03 	ldbu	r2,-12(fp)
    6f3c:	10000226 	beq	r2,zero,6f48 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6f40:	00c00044 	movi	r3,1
    6f44:	00000106 	br	6f4c <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6f48:	00c003c4 	movi	r3,15
    6f4c:	e17ffe17 	ldw	r5,-8(fp)
    6f50:	2005883a 	mov	r2,r4
    6f54:	1085883a 	add	r2,r2,r2
    6f58:	1105883a 	add	r2,r2,r4
    6f5c:	2885883a 	add	r2,r5,r2
    6f60:	10800404 	addi	r2,r2,16
    6f64:	18c7883a 	add	r3,r3,r3
    6f68:	18cb883a 	add	r5,r3,r3
    6f6c:	10c00143 	ldbu	r3,5(r2)
    6f70:	18c000cc 	andi	r3,r3,3
    6f74:	1809883a 	mov	r4,r3
    6f78:	2807883a 	mov	r3,r5
    6f7c:	20c6b03a 	or	r3,r4,r3
    6f80:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f84:	e0bffd03 	ldbu	r2,-12(fp)
    6f88:	10800044 	addi	r2,r2,1
    6f8c:	e0bffd05 	stb	r2,-12(fp)
    6f90:	003fd006 	br	6ed4 <__alt_data_end+0xfc006ed4>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    6f94:	e0bffe17 	ldw	r2,-8(fp)
    6f98:	10800217 	ldw	r2,8(r2)
    6f9c:	10000626 	beq	r2,zero,6fb8 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    6fa0:	e0bffe17 	ldw	r2,-8(fp)
    6fa4:	10800217 	ldw	r2,8(r2)
    6fa8:	e0fffe17 	ldw	r3,-8(fp)
    6fac:	180b883a 	mov	r5,r3
    6fb0:	1009883a 	mov	r4,r2
    6fb4:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    6fb8:	0001883a 	nop
    6fbc:	e037883a 	mov	sp,fp
    6fc0:	dfc00117 	ldw	ra,4(sp)
    6fc4:	df000017 	ldw	fp,0(sp)
    6fc8:	dec00204 	addi	sp,sp,8
    6fcc:	f800283a 	ret

00006fd0 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    6fd0:	deffe004 	addi	sp,sp,-128
    6fd4:	dfc01f15 	stw	ra,124(sp)
    6fd8:	df001e15 	stw	fp,120(sp)
    6fdc:	df001e04 	addi	fp,sp,120
    6fe0:	e13ffc15 	stw	r4,-16(fp)
    6fe4:	2809883a 	mov	r4,r5
    6fe8:	3007883a 	mov	r3,r6
    6fec:	3805883a 	mov	r2,r7
    6ff0:	e13ffd05 	stb	r4,-12(fp)
    6ff4:	e0fffe05 	stb	r3,-8(fp)
    6ff8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    6ffc:	e0bfe944 	addi	r2,fp,-91
    7000:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    7004:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    7008:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    700c:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    7010:	00800044 	movi	r2,1
    7014:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7018:	00800044 	movi	r2,1
    701c:	e0bfe3c5 	stb	r2,-113(fp)
    7020:	e0bfe3c3 	ldbu	r2,-113(fp)
    7024:	108000e8 	cmpgeui	r2,r2,3
    7028:	10001a1e 	bne	r2,zero,7094 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    702c:	e0ffe3c3 	ldbu	r3,-113(fp)
    7030:	e13ffc17 	ldw	r4,-16(fp)
    7034:	1805883a 	mov	r2,r3
    7038:	1085883a 	add	r2,r2,r2
    703c:	10c5883a 	add	r2,r2,r3
    7040:	2085883a 	add	r2,r4,r2
    7044:	10800404 	addi	r2,r2,16
    7048:	11000143 	ldbu	r4,5(r2)
    704c:	00ffff84 	movi	r3,-2
    7050:	20c6703a 	and	r3,r4,r3
    7054:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    7058:	e0ffe3c3 	ldbu	r3,-113(fp)
    705c:	e13ffc17 	ldw	r4,-16(fp)
    7060:	1805883a 	mov	r2,r3
    7064:	1085883a 	add	r2,r2,r2
    7068:	10c5883a 	add	r2,r2,r3
    706c:	2085883a 	add	r2,r4,r2
    7070:	10800404 	addi	r2,r2,16
    7074:	11000143 	ldbu	r4,5(r2)
    7078:	00ffff44 	movi	r3,-3
    707c:	20c6703a 	and	r3,r4,r3
    7080:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7084:	e0bfe3c3 	ldbu	r2,-113(fp)
    7088:	10800044 	addi	r2,r2,1
    708c:	e0bfe3c5 	stb	r2,-113(fp)
    7090:	003fe306 	br	7020 <__alt_data_end+0xfc007020>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7094:	e0bffc17 	ldw	r2,-16(fp)
    7098:	10800217 	ldw	r2,8(r2)
    709c:	1009883a 	mov	r4,r2
    70a0:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    70a4:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    70a8:	e0bffc17 	ldw	r2,-16(fp)
    70ac:	10800303 	ldbu	r2,12(r2)
    70b0:	10803fcc 	andi	r2,r2,255
    70b4:	10000226 	beq	r2,zero,70c0 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    70b8:	00bff644 	movi	r2,-39
    70bc:	0001c706 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    70c0:	e0bfe817 	ldw	r2,-96(fp)
    70c4:	10800017 	ldw	r2,0(r2)
    70c8:	10800017 	ldw	r2,0(r2)
    70cc:	e0fffc17 	ldw	r3,-16(fp)
    70d0:	18c00303 	ldbu	r3,12(r3)
    70d4:	18c03fcc 	andi	r3,r3,255
    70d8:	180b883a 	mov	r5,r3
    70dc:	e13fe817 	ldw	r4,-96(fp)
    70e0:	103ee83a 	callr	r2
    70e4:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    70e8:	e0bfe617 	ldw	r2,-104(fp)
    70ec:	1000021e 	bne	r2,zero,70f8 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    70f0:	00bff584 	movi	r2,-42
    70f4:	0001b906 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    70f8:	e0bfe617 	ldw	r2,-104(fp)
    70fc:	10c00003 	ldbu	r3,0(r2)
    7100:	11000043 	ldbu	r4,1(r2)
    7104:	2008923a 	slli	r4,r4,8
    7108:	20c6b03a 	or	r3,r4,r3
    710c:	11000083 	ldbu	r4,2(r2)
    7110:	2008943a 	slli	r4,r4,16
    7114:	20c6b03a 	or	r3,r4,r3
    7118:	108000c3 	ldbu	r2,3(r2)
    711c:	1004963a 	slli	r2,r2,24
    7120:	10c4b03a 	or	r2,r2,r3
    7124:	1000021e 	bne	r2,zero,7130 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    7128:	00bff5c4 	movi	r2,-41
    712c:	0001ab06 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    7130:	e0bfe617 	ldw	r2,-104(fp)
    7134:	10c00003 	ldbu	r3,0(r2)
    7138:	11000043 	ldbu	r4,1(r2)
    713c:	2008923a 	slli	r4,r4,8
    7140:	20c6b03a 	or	r3,r4,r3
    7144:	11000083 	ldbu	r4,2(r2)
    7148:	2008943a 	slli	r4,r4,16
    714c:	20c6b03a 	or	r3,r4,r3
    7150:	108000c3 	ldbu	r2,3(r2)
    7154:	1004963a 	slli	r2,r2,24
    7158:	10c4b03a 	or	r2,r2,r3
    715c:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7160:	e0bffc17 	ldw	r2,-16(fp)
    7164:	10c004c4 	addi	r3,r2,19
    7168:	e0bfe617 	ldw	r2,-104(fp)
    716c:	19803fcc 	andi	r6,r3,255
    7170:	11000003 	ldbu	r4,0(r2)
    7174:	2008703a 	and	r4,r4,zero
    7178:	200b883a 	mov	r5,r4
    717c:	3009883a 	mov	r4,r6
    7180:	2908b03a 	or	r4,r5,r4
    7184:	11000005 	stb	r4,0(r2)
    7188:	1808d23a 	srli	r4,r3,8
    718c:	21803fcc 	andi	r6,r4,255
    7190:	11000043 	ldbu	r4,1(r2)
    7194:	2008703a 	and	r4,r4,zero
    7198:	200b883a 	mov	r5,r4
    719c:	3009883a 	mov	r4,r6
    71a0:	2908b03a 	or	r4,r5,r4
    71a4:	11000045 	stb	r4,1(r2)
    71a8:	1808d43a 	srli	r4,r3,16
    71ac:	21803fcc 	andi	r6,r4,255
    71b0:	11000083 	ldbu	r4,2(r2)
    71b4:	2008703a 	and	r4,r4,zero
    71b8:	200b883a 	mov	r5,r4
    71bc:	3009883a 	mov	r4,r6
    71c0:	2908b03a 	or	r4,r5,r4
    71c4:	11000085 	stb	r4,2(r2)
    71c8:	180ad63a 	srli	r5,r3,24
    71cc:	10c000c3 	ldbu	r3,3(r2)
    71d0:	1806703a 	and	r3,r3,zero
    71d4:	1809883a 	mov	r4,r3
    71d8:	2807883a 	mov	r3,r5
    71dc:	20c6b03a 	or	r3,r4,r3
    71e0:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    71e4:	e0bfe617 	ldw	r2,-104(fp)
    71e8:	e0ffff03 	ldbu	r3,-4(fp)
    71ec:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    71f0:	e0bffc17 	ldw	r2,-16(fp)
    71f4:	10c00217 	ldw	r3,8(r2)
    71f8:	e0bfe944 	addi	r2,fp,-91
    71fc:	d8800015 	stw	r2,0(sp)
    7200:	01c00204 	movi	r7,8
    7204:	000d883a 	mov	r6,zero
    7208:	000b883a 	mov	r5,zero
    720c:	1809883a 	mov	r4,r3
    7210:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    7214:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    7218:	e0bfe617 	ldw	r2,-104(fp)
    721c:	e0ffe717 	ldw	r3,-100(fp)
    7220:	19403fcc 	andi	r5,r3,255
    7224:	10c00003 	ldbu	r3,0(r2)
    7228:	1806703a 	and	r3,r3,zero
    722c:	1809883a 	mov	r4,r3
    7230:	2807883a 	mov	r3,r5
    7234:	20c6b03a 	or	r3,r4,r3
    7238:	10c00005 	stb	r3,0(r2)
    723c:	e0ffe717 	ldw	r3,-100(fp)
    7240:	1806d23a 	srli	r3,r3,8
    7244:	19403fcc 	andi	r5,r3,255
    7248:	10c00043 	ldbu	r3,1(r2)
    724c:	1806703a 	and	r3,r3,zero
    7250:	1809883a 	mov	r4,r3
    7254:	2807883a 	mov	r3,r5
    7258:	20c6b03a 	or	r3,r4,r3
    725c:	10c00045 	stb	r3,1(r2)
    7260:	e0ffe717 	ldw	r3,-100(fp)
    7264:	1806d43a 	srli	r3,r3,16
    7268:	19403fcc 	andi	r5,r3,255
    726c:	10c00083 	ldbu	r3,2(r2)
    7270:	1806703a 	and	r3,r3,zero
    7274:	1809883a 	mov	r4,r3
    7278:	2807883a 	mov	r3,r5
    727c:	20c6b03a 	or	r3,r4,r3
    7280:	10c00085 	stb	r3,2(r2)
    7284:	e0ffe717 	ldw	r3,-100(fp)
    7288:	180ad63a 	srli	r5,r3,24
    728c:	10c000c3 	ldbu	r3,3(r2)
    7290:	1806703a 	and	r3,r3,zero
    7294:	1809883a 	mov	r4,r3
    7298:	2807883a 	mov	r3,r5
    729c:	20c6b03a 	or	r3,r4,r3
    72a0:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    72a4:	e0bfe303 	ldbu	r2,-116(fp)
    72a8:	10013a1e 	bne	r2,zero,7794 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    72ac:	e0bfe817 	ldw	r2,-96(fp)
    72b0:	10800017 	ldw	r2,0(r2)
    72b4:	10800104 	addi	r2,r2,4
    72b8:	10800017 	ldw	r2,0(r2)
    72bc:	e0fffd03 	ldbu	r3,-12(fp)
    72c0:	e13ffe03 	ldbu	r4,-8(fp)
    72c4:	200f883a 	mov	r7,r4
    72c8:	000d883a 	mov	r6,zero
    72cc:	180b883a 	mov	r5,r3
    72d0:	e13fe817 	ldw	r4,-96(fp)
    72d4:	103ee83a 	callr	r2
    72d8:	1007883a 	mov	r3,r2
    72dc:	e0bffc17 	ldw	r2,-16(fp)
    72e0:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    72e4:	e0bffc17 	ldw	r2,-16(fp)
    72e8:	10800303 	ldbu	r2,12(r2)
    72ec:	10803fcc 	andi	r2,r2,255
    72f0:	1000021e 	bne	r2,zero,72fc <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    72f4:	00bff504 	movi	r2,-44
    72f8:	00013806 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    72fc:	e0bfe517 	ldw	r2,-108(fp)
    7300:	10c001c3 	ldbu	r3,7(r2)
    7304:	e0bffc17 	ldw	r2,-16(fp)
    7308:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    730c:	e0bffc17 	ldw	r2,-16(fp)
    7310:	10c00217 	ldw	r3,8(r2)
    7314:	e0bffc17 	ldw	r2,-16(fp)
    7318:	10800303 	ldbu	r2,12(r2)
    731c:	10803fcc 	andi	r2,r2,255
    7320:	100f883a 	mov	r7,r2
    7324:	000d883a 	mov	r6,zero
    7328:	000b883a 	mov	r5,zero
    732c:	1809883a 	mov	r4,r3
    7330:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    7334:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7338:	e0bfe303 	ldbu	r2,-116(fp)
    733c:	10001026 	beq	r2,zero,7380 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    7340:	e0bfe617 	ldw	r2,-104(fp)
    7344:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    7348:	e0bfe817 	ldw	r2,-96(fp)
    734c:	10800017 	ldw	r2,0(r2)
    7350:	10800204 	addi	r2,r2,8
    7354:	10800017 	ldw	r2,0(r2)
    7358:	e0fffc17 	ldw	r3,-16(fp)
    735c:	18c00303 	ldbu	r3,12(r3)
    7360:	18c03fcc 	andi	r3,r3,255
    7364:	180b883a 	mov	r5,r3
    7368:	e13fe817 	ldw	r4,-96(fp)
    736c:	103ee83a 	callr	r2
                bAddress = 0;
    7370:	e0bffc17 	ldw	r2,-16(fp)
    7374:	10000305 	stb	zero,12(r2)
                return rcode;
    7378:	e0bfe303 	ldbu	r2,-116(fp)
    737c:	00011706 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7380:	e0bffc17 	ldw	r2,-16(fp)
    7384:	10800303 	ldbu	r2,12(r2)
    7388:	10803fcc 	andi	r2,r2,255
    738c:	01402004 	movi	r5,128
    7390:	1009883a 	mov	r4,r2
    7394:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7398:	e0bfe617 	ldw	r2,-104(fp)
    739c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    73a0:	e0bfe817 	ldw	r2,-96(fp)
    73a4:	10800017 	ldw	r2,0(r2)
    73a8:	10800017 	ldw	r2,0(r2)
    73ac:	e0fffc17 	ldw	r3,-16(fp)
    73b0:	18c00303 	ldbu	r3,12(r3)
    73b4:	18c03fcc 	andi	r3,r3,255
    73b8:	180b883a 	mov	r5,r3
    73bc:	e13fe817 	ldw	r4,-96(fp)
    73c0:	103ee83a 	callr	r2
    73c4:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    73c8:	e0bfe617 	ldw	r2,-104(fp)
    73cc:	1000021e 	bne	r2,zero,73d8 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    73d0:	00bff584 	movi	r2,-42
    73d4:	00010106 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    73d8:	e0bfe617 	ldw	r2,-104(fp)
    73dc:	e0ffff03 	ldbu	r3,-4(fp)
    73e0:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    73e4:	e0bffc17 	ldw	r2,-16(fp)
    73e8:	10c00217 	ldw	r3,8(r2)
    73ec:	e0bffc17 	ldw	r2,-16(fp)
    73f0:	10800303 	ldbu	r2,12(r2)
    73f4:	11003fcc 	andi	r4,r2,255
    73f8:	00800484 	movi	r2,18
    73fc:	117fffcc 	andi	r5,r2,65535
    7400:	e0bfe944 	addi	r2,fp,-91
    7404:	d8800015 	stw	r2,0(sp)
    7408:	280f883a 	mov	r7,r5
    740c:	000d883a 	mov	r6,zero
    7410:	200b883a 	mov	r5,r4
    7414:	1809883a 	mov	r4,r3
    7418:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    741c:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    7420:	e0bfe303 	ldbu	r2,-116(fp)
    7424:	1000dd1e 	bne	r2,zero,779c <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    7428:	e0bfe517 	ldw	r2,-108(fp)
    742c:	10c00203 	ldbu	r3,8(r2)
    7430:	10800243 	ldbu	r2,9(r2)
    7434:	1004923a 	slli	r2,r2,8
    7438:	10c4b03a 	or	r2,r2,r3
    743c:	1007883a 	mov	r3,r2
    7440:	e0bffc17 	ldw	r2,-16(fp)
    7444:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    7448:	e0bfe517 	ldw	r2,-108(fp)
    744c:	10c00283 	ldbu	r3,10(r2)
    7450:	108002c3 	ldbu	r2,11(r2)
    7454:	1004923a 	slli	r2,r2,8
    7458:	10c4b03a 	or	r2,r2,r3
    745c:	1007883a 	mov	r3,r2
    7460:	e0bffc17 	ldw	r2,-16(fp)
    7464:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7468:	e0bfe517 	ldw	r2,-108(fp)
    746c:	10800443 	ldbu	r2,17(r2)
    7470:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7474:	e0bffc17 	ldw	r2,-16(fp)
    7478:	10c00217 	ldw	r3,8(r2)
    747c:	e0bffc17 	ldw	r2,-16(fp)
    7480:	10800303 	ldbu	r2,12(r2)
    7484:	11003fcc 	andi	r4,r2,255
    7488:	e0bffc17 	ldw	r2,-16(fp)
    748c:	108004c4 	addi	r2,r2,19
    7490:	100f883a 	mov	r7,r2
    7494:	01800044 	movi	r6,1
    7498:	200b883a 	mov	r5,r4
    749c:	1809883a 	mov	r4,r3
    74a0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    74a4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    74a8:	e0bfe303 	ldbu	r2,-116(fp)
    74ac:	1000bd1e 	bne	r2,zero,77a4 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    74b0:	e0bffc17 	ldw	r2,-16(fp)
    74b4:	1080040b 	ldhu	r2,16(r2)
    74b8:	10bfffcc 	andi	r2,r2,65535
    74bc:	01402004 	movi	r5,128
    74c0:	1009883a 	mov	r4,r2
    74c4:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    74c8:	e0bffc17 	ldw	r2,-16(fp)
    74cc:	1080038b 	ldhu	r2,14(r2)
    74d0:	10bfffcc 	andi	r2,r2,65535
    74d4:	01402004 	movi	r5,128
    74d8:	1009883a 	mov	r4,r2
    74dc:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    74e0:	e0bfe903 	ldbu	r2,-92(fp)
    74e4:	01402004 	movi	r5,128
    74e8:	1009883a 	mov	r4,r2
    74ec:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    74f0:	e0bffc17 	ldw	r2,-16(fp)
    74f4:	00c000c4 	movi	r3,3
    74f8:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    74fc:	e13ffc17 	ldw	r4,-16(fp)
    7500:	00078680 	call	7868 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7504:	e03fe405 	stb	zero,-112(fp)
    7508:	e0ffe403 	ldbu	r3,-112(fp)
    750c:	e0bfe903 	ldbu	r2,-92(fp)
    7510:	18802a2e 	bgeu	r3,r2,75bc <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    7514:	e0bffc17 	ldw	r2,-16(fp)
    7518:	10c00104 	addi	r3,r2,4
    751c:	e0bfee04 	addi	r2,fp,-72
    7520:	01800044 	movi	r6,1
    7524:	180b883a 	mov	r5,r3
    7528:	1009883a 	mov	r4,r2
    752c:	00083680 	call	8368 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7530:	e0bffc17 	ldw	r2,-16(fp)
    7534:	10c00217 	ldw	r3,8(r2)
    7538:	e0bffc17 	ldw	r2,-16(fp)
    753c:	10800303 	ldbu	r2,12(r2)
    7540:	11003fcc 	andi	r4,r2,255
    7544:	e17fe403 	ldbu	r5,-112(fp)
    7548:	e0bfee04 	addi	r2,fp,-72
    754c:	d8800015 	stw	r2,0(sp)
    7550:	280f883a 	mov	r7,r5
    7554:	000d883a 	mov	r6,zero
    7558:	200b883a 	mov	r5,r4
    755c:	1809883a 	mov	r4,r3
    7560:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7564:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7568:	e0bfe303 	ldbu	r2,-116(fp)
    756c:	10008f1e 	bne	r2,zero,77ac <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7570:	e0bfee04 	addi	r2,fp,-72
    7574:	1009883a 	mov	r4,r2
    7578:	0008c740 	call	8c74 <_ZN14MidiDescParser9getNumEPsEv>
    757c:	1007883a 	mov	r3,r2
    7580:	e0bfe383 	ldbu	r2,-114(fp)
    7584:	10c5883a 	add	r2,r2,r3
    7588:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    758c:	e0bfe383 	ldbu	r2,-114(fp)
    7590:	108000b0 	cmpltui	r2,r2,2
    7594:	1000051e 	bne	r2,zero,75ac <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7598:	e0bfee04 	addi	r2,fp,-72
    759c:	1009883a 	mov	r4,r2
    75a0:	0008c4c0 	call	8c4c <_ZN14MidiDescParser12getConfValueEv>
    75a4:	e0bfe345 	stb	r2,-115(fp)
    75a8:	00000406 	br	75bc <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    75ac:	e0bfe403 	ldbu	r2,-112(fp)
    75b0:	10800044 	addi	r2,r2,1
    75b4:	e0bfe405 	stb	r2,-112(fp)
    75b8:	003fd306 	br	7508 <__alt_data_end+0xfc007508>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    75bc:	e0bfe383 	ldbu	r2,-114(fp)
    75c0:	01402004 	movi	r5,128
    75c4:	1009883a 	mov	r4,r2
    75c8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    75cc:	e0bfe383 	ldbu	r2,-114(fp)
    75d0:	10800058 	cmpnei	r2,r2,1
    75d4:	1000321e 	bne	r2,zero,76a0 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    75d8:	e03fe445 	stb	zero,-111(fp)
    75dc:	e0ffe443 	ldbu	r3,-111(fp)
    75e0:	e0bfe903 	ldbu	r2,-92(fp)
    75e4:	18802a2e 	bgeu	r3,r2,7690 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    75e8:	e0bffc17 	ldw	r2,-16(fp)
    75ec:	10c00104 	addi	r3,r2,4
    75f0:	e0bfee04 	addi	r2,fp,-72
    75f4:	000d883a 	mov	r6,zero
    75f8:	180b883a 	mov	r5,r3
    75fc:	1009883a 	mov	r4,r2
    7600:	00083680 	call	8368 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7604:	e0bffc17 	ldw	r2,-16(fp)
    7608:	10c00217 	ldw	r3,8(r2)
    760c:	e0bffc17 	ldw	r2,-16(fp)
    7610:	10800303 	ldbu	r2,12(r2)
    7614:	11003fcc 	andi	r4,r2,255
    7618:	e17fe443 	ldbu	r5,-111(fp)
    761c:	e0bfee04 	addi	r2,fp,-72
    7620:	d8800015 	stw	r2,0(sp)
    7624:	280f883a 	mov	r7,r5
    7628:	000d883a 	mov	r6,zero
    762c:	200b883a 	mov	r5,r4
    7630:	1809883a 	mov	r4,r3
    7634:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7638:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    763c:	e0bfe303 	ldbu	r2,-116(fp)
    7640:	10005c1e 	bne	r2,zero,77b4 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7644:	e0bfee04 	addi	r2,fp,-72
    7648:	1009883a 	mov	r4,r2
    764c:	0008c740 	call	8c74 <_ZN14MidiDescParser9getNumEPsEv>
    7650:	1007883a 	mov	r3,r2
    7654:	e0bfe383 	ldbu	r2,-114(fp)
    7658:	10c5883a 	add	r2,r2,r3
    765c:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7660:	e0bfe383 	ldbu	r2,-114(fp)
    7664:	108000b0 	cmpltui	r2,r2,2
    7668:	1000051e 	bne	r2,zero,7680 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    766c:	e0bfee04 	addi	r2,fp,-72
    7670:	1009883a 	mov	r4,r2
    7674:	0008c4c0 	call	8c4c <_ZN14MidiDescParser12getConfValueEv>
    7678:	e0bfe345 	stb	r2,-115(fp)
    767c:	00000406 	br	7690 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7680:	e0bfe443 	ldbu	r2,-111(fp)
    7684:	10800044 	addi	r2,r2,1
    7688:	e0bfe445 	stb	r2,-111(fp)
    768c:	003fd306 	br	75dc <__alt_data_end+0xfc0075dc>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7690:	e0bfe383 	ldbu	r2,-114(fp)
    7694:	01402004 	movi	r5,128
    7698:	1009883a 	mov	r4,r2
    769c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    76a0:	e0bfe383 	ldbu	r2,-114(fp)
    76a4:	108000a8 	cmpgeui	r2,r2,2
    76a8:	1000031e 	bne	r2,zero,76b8 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    76ac:	00bfffc4 	movi	r2,-1
    76b0:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    76b4:	00004206 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    76b8:	e0bffc17 	ldw	r2,-16(fp)
    76bc:	10c00217 	ldw	r3,8(r2)
    76c0:	e0bffc17 	ldw	r2,-16(fp)
    76c4:	10800303 	ldbu	r2,12(r2)
    76c8:	11003fcc 	andi	r4,r2,255
    76cc:	e0bffc17 	ldw	r2,-16(fp)
    76d0:	108004c4 	addi	r2,r2,19
    76d4:	100f883a 	mov	r7,r2
    76d8:	018000c4 	movi	r6,3
    76dc:	200b883a 	mov	r5,r4
    76e0:	1809883a 	mov	r4,r3
    76e4:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    76e8:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    76ec:	e0bfe343 	ldbu	r2,-115(fp)
    76f0:	01402004 	movi	r5,128
    76f4:	1009883a 	mov	r4,r2
    76f8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10800583 	ldbu	r2,22(r2)
    7704:	10bfe004 	addi	r2,r2,-128
    7708:	10803fcc 	andi	r2,r2,255
    770c:	01402004 	movi	r5,128
    7710:	1009883a 	mov	r4,r2
    7714:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7718:	e0bffc17 	ldw	r2,-16(fp)
    771c:	10800643 	ldbu	r2,25(r2)
    7720:	10803fcc 	andi	r2,r2,255
    7724:	01402004 	movi	r5,128
    7728:	1009883a 	mov	r4,r2
    772c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7730:	e0bffc17 	ldw	r2,-16(fp)
    7734:	10c00217 	ldw	r3,8(r2)
    7738:	e0bffc17 	ldw	r2,-16(fp)
    773c:	10800303 	ldbu	r2,12(r2)
    7740:	10803fcc 	andi	r2,r2,255
    7744:	e13fe343 	ldbu	r4,-115(fp)
    7748:	200f883a 	mov	r7,r4
    774c:	000d883a 	mov	r6,zero
    7750:	100b883a 	mov	r5,r2
    7754:	1809883a 	mov	r4,r3
    7758:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    775c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7760:	e0bfe303 	ldbu	r2,-116(fp)
    7764:	1000151e 	bne	r2,zero,77bc <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7768:	e0bffc17 	ldw	r2,-16(fp)
    776c:	10801817 	ldw	r2,96(r2)
    7770:	10000326 	beq	r2,zero,7780 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7774:	e0bffc17 	ldw	r2,-16(fp)
    7778:	10801817 	ldw	r2,96(r2)
    777c:	103ee83a 	callr	r2

        bPollEnable = true;
    7780:	e0bffc17 	ldw	r2,-16(fp)
    7784:	00c00044 	movi	r3,1
    7788:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    778c:	0005883a 	mov	r2,zero
    7790:	00001206 	br	77dc <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7794:	0001883a 	nop
    7798:	00000906 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    779c:	0001883a 	nop
    77a0:	00000706 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    77a4:	0001883a 	nop
    77a8:	00000506 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    77ac:	0001883a 	nop
    77b0:	00000306 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    77b4:	0001883a 	nop
    77b8:	00000106 	br	77c0 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    77bc:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    77c0:	e0bffc17 	ldw	r2,-16(fp)
    77c4:	10800017 	ldw	r2,0(r2)
    77c8:	10800204 	addi	r2,r2,8
    77cc:	10800017 	ldw	r2,0(r2)
    77d0:	e13ffc17 	ldw	r4,-16(fp)
    77d4:	103ee83a 	callr	r2
        return rcode;
    77d8:	e0bfe303 	ldbu	r2,-116(fp)
}
    77dc:	e037883a 	mov	sp,fp
    77e0:	dfc00117 	ldw	ra,4(sp)
    77e4:	df000017 	ldw	fp,0(sp)
    77e8:	dec00204 	addi	sp,sp,8
    77ec:	f800283a 	ret

000077f0 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    77f0:	defffd04 	addi	sp,sp,-12
    77f4:	dfc00215 	stw	ra,8(sp)
    77f8:	df000115 	stw	fp,4(sp)
    77fc:	df000104 	addi	fp,sp,4
    7800:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7804:	e0bfff17 	ldw	r2,-4(fp)
    7808:	10800217 	ldw	r2,8(r2)
    780c:	1009883a 	mov	r4,r2
    7810:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    7814:	1009883a 	mov	r4,r2
    7818:	20800017 	ldw	r2,0(r4)
    781c:	10800204 	addi	r2,r2,8
    7820:	10800017 	ldw	r2,0(r2)
    7824:	e0ffff17 	ldw	r3,-4(fp)
    7828:	18c00303 	ldbu	r3,12(r3)
    782c:	18c03fcc 	andi	r3,r3,255
    7830:	180b883a 	mov	r5,r3
    7834:	103ee83a 	callr	r2
        bAddress     = 0;
    7838:	e0bfff17 	ldw	r2,-4(fp)
    783c:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7840:	e0bfff17 	ldw	r2,-4(fp)
    7844:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7848:	e0bfff17 	ldw	r2,-4(fp)
    784c:	10001705 	stb	zero,92(r2)
        return 0;
    7850:	0005883a 	mov	r2,zero
}
    7854:	e037883a 	mov	sp,fp
    7858:	dfc00117 	ldw	ra,4(sp)
    785c:	df000017 	ldw	fp,0(sp)
    7860:	dec00204 	addi	sp,sp,8
    7864:	f800283a 	ret

00007868 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7868:	defffe04 	addi	sp,sp,-8
    786c:	df000115 	stw	fp,4(sp)
    7870:	df000104 	addi	fp,sp,4
    7874:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7878:	e0bfff17 	ldw	r2,-4(fp)
    787c:	1080040b 	ldhu	r2,16(r2)
    7880:	10bfffcc 	andi	r2,r2,65535
    7884:	10848d58 	cmpnei	r2,r2,4661
    7888:	1000351e 	bne	r2,zero,7960 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    788c:	e0bfff17 	ldw	r2,-4(fp)
    7890:	1080038b 	ldhu	r2,14(r2)
    7894:	10bfffcc 	andi	r2,r2,65535
    7898:	10800820 	cmpeqi	r2,r2,32
    789c:	10000f1e 	bne	r2,zero,78dc <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    78a0:	e0bfff17 	ldw	r2,-4(fp)
    78a4:	1080038b 	ldhu	r2,14(r2)
    78a8:	10bfffcc 	andi	r2,r2,65535
    78ac:	10800da0 	cmpeqi	r2,r2,54
    78b0:	10000a1e 	bne	r2,zero,78dc <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    78b4:	e0bfff17 	ldw	r2,-4(fp)
    78b8:	1080038b 	ldhu	r2,14(r2)
    78bc:	10bfffcc 	andi	r2,r2,65535
    78c0:	10801460 	cmpeqi	r2,r2,81
    78c4:	1000051e 	bne	r2,zero,78dc <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    78c8:	e0bfff17 	ldw	r2,-4(fp)
    78cc:	1080038b 	ldhu	r2,14(r2)
    78d0:	10bfffcc 	andi	r2,r2,65535
    78d4:	10801a58 	cmpnei	r2,r2,105
    78d8:	1000041e 	bne	r2,zero,78ec <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    78dc:	e0bfff17 	ldw	r2,-4(fp)
    78e0:	00c00084 	movi	r3,2
    78e4:	10c00485 	stb	r3,18(r2)
                        return;
    78e8:	00001d06 	br	7960 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    78ec:	e0bfff17 	ldw	r2,-4(fp)
    78f0:	1080038b 	ldhu	r2,14(r2)
    78f4:	10bfffcc 	andi	r2,r2,65535
    78f8:	10800c30 	cmpltui	r2,r2,48
    78fc:	1000051e 	bne	r2,zero,7914 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7900:	e0bfff17 	ldw	r2,-4(fp)
    7904:	1080038b 	ldhu	r2,14(r2)
    7908:	10bfffcc 	andi	r2,r2,65535
    790c:	10800cf0 	cmpltui	r2,r2,51
    7910:	10000f1e 	bne	r2,zero,7950 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7914:	e0bfff17 	ldw	r2,-4(fp)
    7918:	1080038b 	ldhu	r2,14(r2)
    791c:	10bfffcc 	andi	r2,r2,65535
    7920:	10800d60 	cmpeqi	r2,r2,53
    7924:	10000a1e 	bne	r2,zero,7950 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7928:	e0bfff17 	ldw	r2,-4(fp)
    792c:	1080038b 	ldhu	r2,14(r2)
    7930:	10bfffcc 	andi	r2,r2,65535
    7934:	10801ef0 	cmpltui	r2,r2,123
    7938:	1000091e 	bne	r2,zero,7960 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    793c:	e0bfff17 	ldw	r2,-4(fp)
    7940:	1080038b 	ldhu	r2,14(r2)
    7944:	10bfffcc 	andi	r2,r2,65535
    7948:	10801fa8 	cmpgeui	r2,r2,126
    794c:	1000041e 	bne	r2,zero,7960 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7950:	e0bfff17 	ldw	r2,-4(fp)
    7954:	00c00084 	movi	r3,2
    7958:	10c00485 	stb	r3,18(r2)
                        return;
    795c:	0001883a 	nop
                }
        }
}
    7960:	e037883a 	mov	sp,fp
    7964:	df000017 	ldw	fp,0(sp)
    7968:	dec00104 	addi	sp,sp,4
    796c:	f800283a 	ret

00007970 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7970:	defff804 	addi	sp,sp,-32
    7974:	dfc00715 	stw	ra,28(sp)
    7978:	df000615 	stw	fp,24(sp)
    797c:	df000604 	addi	fp,sp,24
    7980:	e13ffd15 	stw	r4,-12(fp)
    7984:	e17ffe15 	stw	r5,-8(fp)
    7988:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    798c:	e0bffd17 	ldw	r2,-12(fp)
    7990:	108005c3 	ldbu	r2,23(r2)
    7994:	10c03fcc 	andi	r3,r2,255
    7998:	e0bffe17 	ldw	r2,-8(fp)
    799c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    79a0:	e0bffd17 	ldw	r2,-12(fp)
    79a4:	10c00217 	ldw	r3,8(r2)
    79a8:	e0bffd17 	ldw	r2,-12(fp)
    79ac:	10800303 	ldbu	r2,12(r2)
    79b0:	11003fcc 	andi	r4,r2,255
    79b4:	e0bffd17 	ldw	r2,-12(fp)
    79b8:	10800583 	ldbu	r2,22(r2)
    79bc:	11403fcc 	andi	r5,r2,255
    79c0:	d8000115 	stw	zero,4(sp)
    79c4:	e0bfff17 	ldw	r2,-4(fp)
    79c8:	d8800015 	stw	r2,0(sp)
    79cc:	e1fffe17 	ldw	r7,-8(fp)
    79d0:	280d883a 	mov	r6,r5
    79d4:	200b883a 	mov	r5,r4
    79d8:	1809883a 	mov	r4,r3
    79dc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    79e0:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    79e4:	e0bffe17 	ldw	r2,-8(fp)
    79e8:	1080000b 	ldhu	r2,0(r2)
    79ec:	10bfffcc 	andi	r2,r2,65535
    79f0:	10800f28 	cmpgeui	r2,r2,60
    79f4:	10000d1e 	bne	r2,zero,7a2c <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    79f8:	e0bffe17 	ldw	r2,-8(fp)
    79fc:	1080000b 	ldhu	r2,0(r2)
    7a00:	10bfffcc 	andi	r2,r2,65535
    7a04:	e0ffff17 	ldw	r3,-4(fp)
    7a08:	1885883a 	add	r2,r3,r2
    7a0c:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7a10:	e0bffe17 	ldw	r2,-8(fp)
    7a14:	1080000b 	ldhu	r2,0(r2)
    7a18:	10bfffcc 	andi	r2,r2,65535
    7a1c:	10800044 	addi	r2,r2,1
    7a20:	e0ffff17 	ldw	r3,-4(fp)
    7a24:	1885883a 	add	r2,r3,r2
    7a28:	10000005 	stb	zero,0(r2)
        }
        return r;
    7a2c:	e0bffc03 	ldbu	r2,-16(fp)
}
    7a30:	e037883a 	mov	sp,fp
    7a34:	dfc00117 	ldw	ra,4(sp)
    7a38:	df000017 	ldw	fp,0(sp)
    7a3c:	dec00204 	addi	sp,sp,8
    7a40:	f800283a 	ret

00007a44 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7a44:	defff904 	addi	sp,sp,-28
    7a48:	dfc00615 	stw	ra,24(sp)
    7a4c:	df000515 	stw	fp,20(sp)
    7a50:	df000504 	addi	fp,sp,20
    7a54:	e13ffd15 	stw	r4,-12(fp)
    7a58:	e17ffe15 	stw	r5,-8(fp)
    7a5c:	3005883a 	mov	r2,r6
    7a60:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7a64:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7a68:	e0bffd17 	ldw	r2,-12(fp)
    7a6c:	10800343 	ldbu	r2,13(r2)
    7a70:	1080005c 	xori	r2,r2,1
    7a74:	10803fcc 	andi	r2,r2,255
    7a78:	10000226 	beq	r2,zero,7a84 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7a7c:	0005883a 	mov	r2,zero
    7a80:	00008506 	br	7c98 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7a84:	e0bffd17 	ldw	r2,-12(fp)
    7a88:	10801703 	ldbu	r2,92(r2)
    7a8c:	10803fcc 	andi	r2,r2,255
    7a90:	10001826 	beq	r2,zero,7af4 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7a94:	e0bffd17 	ldw	r2,-12(fp)
    7a98:	10801703 	ldbu	r2,92(r2)
    7a9c:	10803fcc 	andi	r2,r2,255
    7aa0:	10801028 	cmpgeui	r2,r2,64
    7aa4:	1000131e 	bne	r2,zero,7af4 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7aa8:	e0bffd17 	ldw	r2,-12(fp)
    7aac:	10801703 	ldbu	r2,92(r2)
    7ab0:	10803fcc 	andi	r2,r2,255
    7ab4:	e0fffd17 	ldw	r3,-12(fp)
    7ab8:	1885883a 	add	r2,r3,r2
    7abc:	10800704 	addi	r2,r2,28
    7ac0:	10800003 	ldbu	r2,0(r2)
    7ac4:	10803fcc 	andi	r2,r2,255
    7ac8:	10002a1e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7acc:	e0bffd17 	ldw	r2,-12(fp)
    7ad0:	10801703 	ldbu	r2,92(r2)
    7ad4:	10803fcc 	andi	r2,r2,255
    7ad8:	10800044 	addi	r2,r2,1
    7adc:	e0fffd17 	ldw	r3,-12(fp)
    7ae0:	1885883a 	add	r2,r3,r2
    7ae4:	10800704 	addi	r2,r2,28
    7ae8:	10800003 	ldbu	r2,0(r2)
    7aec:	10803fcc 	andi	r2,r2,255
    7af0:	1000201e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7af4:	e0bffd17 	ldw	r2,-12(fp)
    7af8:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7afc:	e0bffd17 	ldw	r2,-12(fp)
    7b00:	10c00704 	addi	r3,r2,28
    7b04:	e0bffc04 	addi	r2,fp,-16
    7b08:	180d883a 	mov	r6,r3
    7b0c:	100b883a 	mov	r5,r2
    7b10:	e13ffd17 	ldw	r4,-12(fp)
    7b14:	00079700 	call	7970 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7b18:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7b1c:	e0bffb03 	ldbu	r2,-20(fp)
    7b20:	10000226 	beq	r2,zero,7b2c <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7b24:	0005883a 	mov	r2,zero
    7b28:	00005b06 	br	7c98 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7b2c:	e0bffd17 	ldw	r2,-12(fp)
    7b30:	10800703 	ldbu	r2,28(r2)
    7b34:	10803fcc 	andi	r2,r2,255
    7b38:	10000e1e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b3c:	e0bffd17 	ldw	r2,-12(fp)
    7b40:	10800743 	ldbu	r2,29(r2)
    7b44:	10803fcc 	andi	r2,r2,255
    7b48:	10000a1e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b4c:	e0bffd17 	ldw	r2,-12(fp)
    7b50:	10800783 	ldbu	r2,30(r2)
    7b54:	10803fcc 	andi	r2,r2,255
    7b58:	1000061e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b5c:	e0bffd17 	ldw	r2,-12(fp)
    7b60:	108007c3 	ldbu	r2,31(r2)
    7b64:	10803fcc 	andi	r2,r2,255
    7b68:	1000021e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7b6c:	0005883a 	mov	r2,zero
    7b70:	00004906 	br	7c98 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7b74:	e0bffd17 	ldw	r2,-12(fp)
    7b78:	10801703 	ldbu	r2,92(r2)
    7b7c:	10803fcc 	andi	r2,r2,255
    7b80:	e0fffd17 	ldw	r3,-12(fp)
    7b84:	1885883a 	add	r2,r3,r2
    7b88:	10800704 	addi	r2,r2,28
    7b8c:	10800003 	ldbu	r2,0(r2)
    7b90:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7b94:	e0bfff03 	ldbu	r2,-4(fp)
    7b98:	10000526 	beq	r2,zero,7bb0 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7b9c:	e0bffe17 	ldw	r2,-8(fp)
    7ba0:	10c00044 	addi	r3,r2,1
    7ba4:	e0fffe15 	stw	r3,-8(fp)
    7ba8:	e0fffb43 	ldbu	r3,-19(fp)
    7bac:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7bb0:	e0bffd17 	ldw	r2,-12(fp)
    7bb4:	10801703 	ldbu	r2,92(r2)
    7bb8:	10800044 	addi	r2,r2,1
    7bbc:	1007883a 	mov	r3,r2
    7bc0:	e0bffd17 	ldw	r2,-12(fp)
    7bc4:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7bc8:	e0bffe17 	ldw	r2,-8(fp)
    7bcc:	10c00044 	addi	r3,r2,1
    7bd0:	e0fffe15 	stw	r3,-8(fp)
    7bd4:	e0fffd17 	ldw	r3,-12(fp)
    7bd8:	18c01703 	ldbu	r3,92(r3)
    7bdc:	19000044 	addi	r4,r3,1
    7be0:	200b883a 	mov	r5,r4
    7be4:	e13ffd17 	ldw	r4,-12(fp)
    7be8:	21401705 	stb	r5,92(r4)
    7bec:	18c03fcc 	andi	r3,r3,255
    7bf0:	e13ffd17 	ldw	r4,-12(fp)
    7bf4:	20c7883a 	add	r3,r4,r3
    7bf8:	18c00704 	addi	r3,r3,28
    7bfc:	18c00003 	ldbu	r3,0(r3)
    7c00:	e0fffb85 	stb	r3,-18(fp)
    7c04:	e0fffb83 	ldbu	r3,-18(fp)
    7c08:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7c0c:	e0bffe17 	ldw	r2,-8(fp)
    7c10:	10c00044 	addi	r3,r2,1
    7c14:	e0fffe15 	stw	r3,-8(fp)
    7c18:	e0fffd17 	ldw	r3,-12(fp)
    7c1c:	18c01703 	ldbu	r3,92(r3)
    7c20:	19000044 	addi	r4,r3,1
    7c24:	200b883a 	mov	r5,r4
    7c28:	e13ffd17 	ldw	r4,-12(fp)
    7c2c:	21401705 	stb	r5,92(r4)
    7c30:	18c03fcc 	andi	r3,r3,255
    7c34:	e13ffd17 	ldw	r4,-12(fp)
    7c38:	20c7883a 	add	r3,r4,r3
    7c3c:	18c00704 	addi	r3,r3,28
    7c40:	18c00003 	ldbu	r3,0(r3)
    7c44:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7c48:	e0bffe17 	ldw	r2,-8(fp)
    7c4c:	10c00044 	addi	r3,r2,1
    7c50:	e0fffe15 	stw	r3,-8(fp)
    7c54:	e0fffd17 	ldw	r3,-12(fp)
    7c58:	18c01703 	ldbu	r3,92(r3)
    7c5c:	19000044 	addi	r4,r3,1
    7c60:	200b883a 	mov	r5,r4
    7c64:	e13ffd17 	ldw	r4,-12(fp)
    7c68:	21401705 	stb	r5,92(r4)
    7c6c:	18c03fcc 	andi	r3,r3,255
    7c70:	e13ffd17 	ldw	r4,-12(fp)
    7c74:	20c7883a 	add	r3,r4,r3
    7c78:	18c00704 	addi	r3,r3,28
    7c7c:	18c00003 	ldbu	r3,0(r3)
    7c80:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7c84:	e0bffb43 	ldbu	r2,-19(fp)
    7c88:	108003cc 	andi	r2,r2,15
    7c8c:	100b883a 	mov	r5,r2
    7c90:	e13ffd17 	ldw	r4,-12(fp)
    7c94:	0008cf40 	call	8cf4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7c98:	e037883a 	mov	sp,fp
    7c9c:	dfc00117 	ldw	ra,4(sp)
    7ca0:	df000017 	ldw	fp,0(sp)
    7ca4:	dec00204 	addi	sp,sp,8
    7ca8:	f800283a 	ret

00007cac <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7cac:	defff804 	addi	sp,sp,-32
    7cb0:	dfc00715 	stw	ra,28(sp)
    7cb4:	df000615 	stw	fp,24(sp)
    7cb8:	df000604 	addi	fp,sp,24
    7cbc:	e13ffd15 	stw	r4,-12(fp)
    7cc0:	e17ffe15 	stw	r5,-8(fp)
    7cc4:	3005883a 	mov	r2,r6
    7cc8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7ccc:	e0bffe17 	ldw	r2,-8(fp)
    7cd0:	10800003 	ldbu	r2,0(r2)
    7cd4:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7cd8:	e0bffb03 	ldbu	r2,-20(fp)
    7cdc:	100b883a 	mov	r5,r2
    7ce0:	e13ffd17 	ldw	r4,-12(fp)
    7ce4:	0008c9c0 	call	8c9c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7ce8:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7cec:	e0bffb03 	ldbu	r2,-20(fp)
    7cf0:	10803c18 	cmpnei	r2,r2,240
    7cf4:	10000b1e 	bne	r2,zero,7d24 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7cf8:	e17ffe17 	ldw	r5,-8(fp)
    7cfc:	e13ffd17 	ldw	r4,-12(fp)
    7d00:	0007e6c0 	call	7e6c <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7d04:	10bfffcc 	andi	r2,r2,65535
    7d08:	e0ffff03 	ldbu	r3,-4(fp)
    7d0c:	180f883a 	mov	r7,r3
    7d10:	100d883a 	mov	r6,r2
    7d14:	e17ffe17 	ldw	r5,-8(fp)
    7d18:	e13ffd17 	ldw	r4,-12(fp)
    7d1c:	0007ef40 	call	7ef4 <_ZN9USBH_MIDI9SendSysExEPhth>
    7d20:	00003406 	br	7df4 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7d24:	e0bfff03 	ldbu	r2,-4(fp)
    7d28:	1004913a 	slli	r2,r2,4
    7d2c:	1007883a 	mov	r3,r2
    7d30:	e0bffb43 	ldbu	r2,-19(fp)
    7d34:	1884b03a 	or	r2,r3,r2
    7d38:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7d3c:	e0bffe17 	ldw	r2,-8(fp)
    7d40:	10800003 	ldbu	r2,0(r2)
    7d44:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7d48:	e0bffb43 	ldbu	r2,-19(fp)
    7d4c:	100b883a 	mov	r5,r2
    7d50:	e13ffd17 	ldw	r4,-12(fp)
    7d54:	0008cf40 	call	8cf4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7d58:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7d5c:	e0bffb83 	ldbu	r2,-18(fp)
    7d60:	10c000a0 	cmpeqi	r3,r2,2
    7d64:	18000c1e 	bne	r3,zero,7d98 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7d68:	10c000e0 	cmpeqi	r3,r2,3
    7d6c:	1800031e 	bne	r3,zero,7d7c <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7d70:	10800060 	cmpeqi	r2,r2,1
    7d74:	10000d1e 	bne	r2,zero,7dac <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7d78:	00000f06 	br	7db8 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7d7c:	e0bffe17 	ldw	r2,-8(fp)
    7d80:	10800043 	ldbu	r2,1(r2)
    7d84:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7d88:	e0bffe17 	ldw	r2,-8(fp)
    7d8c:	10800083 	ldbu	r2,2(r2)
    7d90:	e0bffc85 	stb	r2,-14(fp)
                break;
    7d94:	00000806 	br	7db8 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7d98:	e0bffe17 	ldw	r2,-8(fp)
    7d9c:	10800043 	ldbu	r2,1(r2)
    7da0:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7da4:	e03ffc85 	stb	zero,-14(fp)
                break;
    7da8:	00000306 	br	7db8 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7dac:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7db0:	e03ffc85 	stb	zero,-14(fp)
                break;
    7db4:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7db8:	e0bffd17 	ldw	r2,-12(fp)
    7dbc:	10c00217 	ldw	r3,8(r2)
    7dc0:	e0bffd17 	ldw	r2,-12(fp)
    7dc4:	10800303 	ldbu	r2,12(r2)
    7dc8:	11003fcc 	andi	r4,r2,255
    7dcc:	e0bffd17 	ldw	r2,-12(fp)
    7dd0:	10800643 	ldbu	r2,25(r2)
    7dd4:	11403fcc 	andi	r5,r2,255
    7dd8:	e0bffbc4 	addi	r2,fp,-17
    7ddc:	d8800015 	stw	r2,0(sp)
    7de0:	01c00104 	movi	r7,4
    7de4:	280d883a 	mov	r6,r5
    7de8:	200b883a 	mov	r5,r4
    7dec:	1809883a 	mov	r4,r3
    7df0:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7df4:	e037883a 	mov	sp,fp
    7df8:	dfc00117 	ldw	ra,4(sp)
    7dfc:	df000017 	ldw	fp,0(sp)
    7e00:	dec00204 	addi	sp,sp,8
    7e04:	f800283a 	ret

00007e08 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7e08:	defffb04 	addi	sp,sp,-20
    7e0c:	dfc00415 	stw	ra,16(sp)
    7e10:	df000315 	stw	fp,12(sp)
    7e14:	df000304 	addi	fp,sp,12
    7e18:	e13ffd15 	stw	r4,-12(fp)
    7e1c:	2807883a 	mov	r3,r5
    7e20:	3005883a 	mov	r2,r6
    7e24:	e0fffe05 	stb	r3,-8(fp)
    7e28:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7e2c:	e0bfff03 	ldbu	r2,-4(fp)
    7e30:	1000051e 	bne	r2,zero,7e48 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7e34:	e0bffe03 	ldbu	r2,-8(fp)
    7e38:	100b883a 	mov	r5,r2
    7e3c:	e13ffd17 	ldw	r4,-12(fp)
    7e40:	0008c9c0 	call	8c9c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7e44:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7e48:	e0bfff03 	ldbu	r2,-4(fp)
    7e4c:	100b883a 	mov	r5,r2
    7e50:	e13ffd17 	ldw	r4,-12(fp)
    7e54:	0008cf40 	call	8cf4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7e58:	e037883a 	mov	sp,fp
    7e5c:	dfc00117 	ldw	ra,4(sp)
    7e60:	df000017 	ldw	fp,0(sp)
    7e64:	dec00204 	addi	sp,sp,8
    7e68:	f800283a 	ret

00007e6c <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7e6c:	defffc04 	addi	sp,sp,-16
    7e70:	df000315 	stw	fp,12(sp)
    7e74:	df000304 	addi	fp,sp,12
    7e78:	e13ffe15 	stw	r4,-8(fp)
    7e7c:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7e80:	00800044 	movi	r2,1
    7e84:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7e88:	e0bfff17 	ldw	r2,-4(fp)
    7e8c:	10800003 	ldbu	r2,0(r2)
    7e90:	10803fcc 	andi	r2,r2,255
    7e94:	10803c20 	cmpeqi	r2,r2,240
    7e98:	1000021e 	bne	r2,zero,7ea4 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7e9c:	0005883a 	mov	r2,zero
    7ea0:	00001006 	br	7ee4 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7ea4:	e0bfff17 	ldw	r2,-4(fp)
    7ea8:	10800003 	ldbu	r2,0(r2)
    7eac:	10803fcc 	andi	r2,r2,255
    7eb0:	10803de0 	cmpeqi	r2,r2,247
    7eb4:	10000a1e 	bne	r2,zero,7ee0 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7eb8:	e0bfff17 	ldw	r2,-4(fp)
    7ebc:	10800044 	addi	r2,r2,1
    7ec0:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7ec4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ec8:	10800044 	addi	r2,r2,1
    7ecc:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7ed0:	e0bffd0b 	ldhu	r2,-12(fp)
    7ed4:	10804070 	cmpltui	r2,r2,257
    7ed8:	103ff21e 	bne	r2,zero,7ea4 <__alt_data_end+0xfc007ea4>
                        c = 0;
    7edc:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7ee0:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7ee4:	e037883a 	mov	sp,fp
    7ee8:	df000017 	ldw	fp,0(sp)
    7eec:	dec00104 	addi	sp,sp,4
    7ef0:	f800283a 	ret

00007ef4 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7ef4:	deffe704 	addi	sp,sp,-100
    7ef8:	dfc01815 	stw	ra,96(sp)
    7efc:	df001715 	stw	fp,92(sp)
    7f00:	df001704 	addi	fp,sp,92
    7f04:	e13ffc15 	stw	r4,-16(fp)
    7f08:	e17ffd15 	stw	r5,-12(fp)
    7f0c:	3007883a 	mov	r3,r6
    7f10:	3805883a 	mov	r2,r7
    7f14:	e0fffe0d 	sth	r3,-8(fp)
    7f18:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7f1c:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7f20:	e0bffe0b 	ldhu	r2,-8(fp)
    7f24:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7f28:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7f2c:	e0bffc17 	ldw	r2,-16(fp)
    7f30:	108005c3 	ldbu	r2,23(r2)
    7f34:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7f38:	e0bffe0b 	ldhu	r2,-8(fp)
    7f3c:	01402004 	movi	r5,128
    7f40:	1009883a 	mov	r4,r2
    7f44:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7f48:	e0bfea8b 	ldhu	r2,-86(fp)
    7f4c:	1000b026 	beq	r2,zero,8210 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7f50:	e0bfeb03 	ldbu	r2,-84(fp)
    7f54:	e0ffff03 	ldbu	r3,-4(fp)
    7f58:	1806913a 	slli	r3,r3,4
    7f5c:	18c00114 	ori	r3,r3,4
    7f60:	1809883a 	mov	r4,r3
    7f64:	e0ffeb84 	addi	r3,fp,-82
    7f68:	1885883a 	add	r2,r3,r2
    7f6c:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    7f70:	e0bfea8b 	ldhu	r2,-86(fp)
    7f74:	10c000a0 	cmpeqi	r3,r2,2
    7f78:	18002a1e 	bne	r3,zero,8024 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    7f7c:	10c000e0 	cmpeqi	r3,r2,3
    7f80:	1800521e 	bne	r3,zero,80cc <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    7f84:	10800060 	cmpeqi	r2,r2,1
    7f88:	10005826 	beq	r2,zero,80ec <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    7f8c:	e0bfeb03 	ldbu	r2,-84(fp)
    7f90:	10c00044 	addi	r3,r2,1
    7f94:	e0ffeb05 	stb	r3,-84(fp)
    7f98:	10803fcc 	andi	r2,r2,255
    7f9c:	e0ffff03 	ldbu	r3,-4(fp)
    7fa0:	1806913a 	slli	r3,r3,4
    7fa4:	18c00154 	ori	r3,r3,5
    7fa8:	1809883a 	mov	r4,r3
    7fac:	e0ffeb84 	addi	r3,fp,-82
    7fb0:	1885883a 	add	r2,r3,r2
    7fb4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    7fb8:	e0bfeb03 	ldbu	r2,-84(fp)
    7fbc:	10c00044 	addi	r3,r2,1
    7fc0:	e0ffeb05 	stb	r3,-84(fp)
    7fc4:	11003fcc 	andi	r4,r2,255
    7fc8:	e0bffd17 	ldw	r2,-12(fp)
    7fcc:	10c00044 	addi	r3,r2,1
    7fd0:	e0fffd15 	stw	r3,-12(fp)
    7fd4:	10c00003 	ldbu	r3,0(r2)
    7fd8:	e0bfeb84 	addi	r2,fp,-82
    7fdc:	1105883a 	add	r2,r2,r4
    7fe0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    7fe4:	e0bfeb03 	ldbu	r2,-84(fp)
    7fe8:	10c00044 	addi	r3,r2,1
    7fec:	e0ffeb05 	stb	r3,-84(fp)
    7ff0:	10803fcc 	andi	r2,r2,255
    7ff4:	e0ffeb84 	addi	r3,fp,-82
    7ff8:	1885883a 	add	r2,r3,r2
    7ffc:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    8000:	e0bfeb03 	ldbu	r2,-84(fp)
    8004:	10c00044 	addi	r3,r2,1
    8008:	e0ffeb05 	stb	r3,-84(fp)
    800c:	10803fcc 	andi	r2,r2,255
    8010:	e0ffeb84 	addi	r3,fp,-82
    8014:	1885883a 	add	r2,r3,r2
    8018:	10000005 	stb	zero,0(r2)
                        n = 0;
    801c:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8020:	00005a06 	br	818c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    8024:	e0bfeb03 	ldbu	r2,-84(fp)
    8028:	10c00044 	addi	r3,r2,1
    802c:	e0ffeb05 	stb	r3,-84(fp)
    8030:	10803fcc 	andi	r2,r2,255
    8034:	e0ffff03 	ldbu	r3,-4(fp)
    8038:	1806913a 	slli	r3,r3,4
    803c:	18c00194 	ori	r3,r3,6
    8040:	1809883a 	mov	r4,r3
    8044:	e0ffeb84 	addi	r3,fp,-82
    8048:	1885883a 	add	r2,r3,r2
    804c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8050:	e0bfeb03 	ldbu	r2,-84(fp)
    8054:	10c00044 	addi	r3,r2,1
    8058:	e0ffeb05 	stb	r3,-84(fp)
    805c:	11003fcc 	andi	r4,r2,255
    8060:	e0bffd17 	ldw	r2,-12(fp)
    8064:	10c00044 	addi	r3,r2,1
    8068:	e0fffd15 	stw	r3,-12(fp)
    806c:	10c00003 	ldbu	r3,0(r2)
    8070:	e0bfeb84 	addi	r2,fp,-82
    8074:	1105883a 	add	r2,r2,r4
    8078:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    807c:	e0bfeb03 	ldbu	r2,-84(fp)
    8080:	10c00044 	addi	r3,r2,1
    8084:	e0ffeb05 	stb	r3,-84(fp)
    8088:	11003fcc 	andi	r4,r2,255
    808c:	e0bffd17 	ldw	r2,-12(fp)
    8090:	10c00044 	addi	r3,r2,1
    8094:	e0fffd15 	stw	r3,-12(fp)
    8098:	10c00003 	ldbu	r3,0(r2)
    809c:	e0bfeb84 	addi	r2,fp,-82
    80a0:	1105883a 	add	r2,r2,r4
    80a4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    80a8:	e0bfeb03 	ldbu	r2,-84(fp)
    80ac:	10c00044 	addi	r3,r2,1
    80b0:	e0ffeb05 	stb	r3,-84(fp)
    80b4:	10803fcc 	andi	r2,r2,255
    80b8:	e0ffeb84 	addi	r3,fp,-82
    80bc:	1885883a 	add	r2,r3,r2
    80c0:	10000005 	stb	zero,0(r2)
                        n = 0;
    80c4:	e03fea8d 	sth	zero,-86(fp)
                        break;
    80c8:	00003006 	br	818c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    80cc:	e0bfeb03 	ldbu	r2,-84(fp)
    80d0:	e0ffff03 	ldbu	r3,-4(fp)
    80d4:	1806913a 	slli	r3,r3,4
    80d8:	18c001d4 	ori	r3,r3,7
    80dc:	1809883a 	mov	r4,r3
    80e0:	e0ffeb84 	addi	r3,fp,-82
    80e4:	1885883a 	add	r2,r3,r2
    80e8:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    80ec:	e0bfeb03 	ldbu	r2,-84(fp)
    80f0:	10800044 	addi	r2,r2,1
    80f4:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    80f8:	e0bfeb03 	ldbu	r2,-84(fp)
    80fc:	10c00044 	addi	r3,r2,1
    8100:	e0ffeb05 	stb	r3,-84(fp)
    8104:	11003fcc 	andi	r4,r2,255
    8108:	e0bffd17 	ldw	r2,-12(fp)
    810c:	10c00044 	addi	r3,r2,1
    8110:	e0fffd15 	stw	r3,-12(fp)
    8114:	10c00003 	ldbu	r3,0(r2)
    8118:	e0bfeb84 	addi	r2,fp,-82
    811c:	1105883a 	add	r2,r2,r4
    8120:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8124:	e0bfeb03 	ldbu	r2,-84(fp)
    8128:	10c00044 	addi	r3,r2,1
    812c:	e0ffeb05 	stb	r3,-84(fp)
    8130:	11003fcc 	andi	r4,r2,255
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	10c00044 	addi	r3,r2,1
    813c:	e0fffd15 	stw	r3,-12(fp)
    8140:	10c00003 	ldbu	r3,0(r2)
    8144:	e0bfeb84 	addi	r2,fp,-82
    8148:	1105883a 	add	r2,r2,r4
    814c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8150:	e0bfeb03 	ldbu	r2,-84(fp)
    8154:	10c00044 	addi	r3,r2,1
    8158:	e0ffeb05 	stb	r3,-84(fp)
    815c:	11003fcc 	andi	r4,r2,255
    8160:	e0bffd17 	ldw	r2,-12(fp)
    8164:	10c00044 	addi	r3,r2,1
    8168:	e0fffd15 	stw	r3,-12(fp)
    816c:	10c00003 	ldbu	r3,0(r2)
    8170:	e0bfeb84 	addi	r2,fp,-82
    8174:	1105883a 	add	r2,r2,r4
    8178:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    817c:	e0bfea8b 	ldhu	r2,-86(fp)
    8180:	10bfff44 	addi	r2,r2,-3
    8184:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8188:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    818c:	e0ffeb03 	ldbu	r3,-84(fp)
    8190:	e0bfeb43 	ldbu	r2,-83(fp)
    8194:	1880022e 	bgeu	r3,r2,81a0 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8198:	e0bfea8b 	ldhu	r2,-86(fp)
    819c:	103f6a1e 	bne	r2,zero,7f48 <__alt_data_end+0xfc007f48>
                        USBTRACE2(" wptr:\t", wptr);
    81a0:	e0bfeb03 	ldbu	r2,-84(fp)
    81a4:	01402004 	movi	r5,128
    81a8:	1009883a 	mov	r4,r2
    81ac:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    81b0:	e0bffc17 	ldw	r2,-16(fp)
    81b4:	10c00217 	ldw	r3,8(r2)
    81b8:	e0bffc17 	ldw	r2,-16(fp)
    81bc:	10800303 	ldbu	r2,12(r2)
    81c0:	11003fcc 	andi	r4,r2,255
    81c4:	e0bffc17 	ldw	r2,-16(fp)
    81c8:	10800643 	ldbu	r2,25(r2)
    81cc:	11403fcc 	andi	r5,r2,255
    81d0:	e1bfeb03 	ldbu	r6,-84(fp)
    81d4:	e0bfeb84 	addi	r2,fp,-82
    81d8:	d8800015 	stw	r2,0(sp)
    81dc:	300f883a 	mov	r7,r6
    81e0:	280d883a 	mov	r6,r5
    81e4:	200b883a 	mov	r5,r4
    81e8:	1809883a 	mov	r4,r3
    81ec:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    81f0:	e0bfea05 	stb	r2,-88(fp)
    81f4:	e0bfea03 	ldbu	r2,-88(fp)
    81f8:	1004c03a 	cmpne	r2,r2,zero
    81fc:	10803fcc 	andi	r2,r2,255
    8200:	1000021e 	bne	r2,zero,820c <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    8204:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8208:	003f4f06 	br	7f48 <__alt_data_end+0xfc007f48>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    820c:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    8210:	e0bfea03 	ldbu	r2,-88(fp)
}
    8214:	e037883a 	mov	sp,fp
    8218:	dfc00117 	ldw	ra,4(sp)
    821c:	df000017 	ldw	fp,0(sp)
    8220:	dec00204 	addi	sp,sp,8
    8224:	f800283a 	ret

00008228 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    8228:	defffb04 	addi	sp,sp,-20
    822c:	df000415 	stw	fp,16(sp)
    8230:	df000404 	addi	fp,sp,16
    8234:	e13ffd15 	stw	r4,-12(fp)
    8238:	e17ffe15 	stw	r5,-8(fp)
    823c:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    8240:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    8244:	e0bffe17 	ldw	r2,-8(fp)
    8248:	10800003 	ldbu	r2,0(r2)
    824c:	108003cc 	andi	r2,r2,15
    8250:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    8254:	e0bffc43 	ldbu	r2,-15(fp)
    8258:	1080030c 	andi	r2,r2,12
    825c:	10800120 	cmpeqi	r2,r2,4
    8260:	1000021e 	bne	r2,zero,826c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8264:	e0bffc03 	ldbu	r2,-16(fp)
    8268:	00003b06 	br	8358 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    826c:	e0bffc43 	ldbu	r2,-15(fp)
    8270:	10c00160 	cmpeqi	r3,r2,5
    8274:	18002e1e 	bne	r3,zero,8330 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8278:	10c00188 	cmpgei	r3,r2,6
    827c:	1800031e 	bne	r3,zero,828c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8280:	10800120 	cmpeqi	r2,r2,4
    8284:	1000061e 	bne	r2,zero,82a0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8288:	00003206 	br	8354 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    828c:	10c001a0 	cmpeqi	r3,r2,6
    8290:	1800181e 	bne	r3,zero,82f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8294:	108001e0 	cmpeqi	r2,r2,7
    8298:	1000011e 	bne	r2,zero,82a0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    829c:	00002d06 	br	8354 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    82a0:	e0bfff17 	ldw	r2,-4(fp)
    82a4:	10c00044 	addi	r3,r2,1
    82a8:	e0ffff15 	stw	r3,-4(fp)
    82ac:	e0fffe17 	ldw	r3,-8(fp)
    82b0:	18c00043 	ldbu	r3,1(r3)
    82b4:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    82b8:	e0bfff17 	ldw	r2,-4(fp)
    82bc:	10c00044 	addi	r3,r2,1
    82c0:	e0ffff15 	stw	r3,-4(fp)
    82c4:	e0fffe17 	ldw	r3,-8(fp)
    82c8:	18c00083 	ldbu	r3,2(r3)
    82cc:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    82d0:	e0bfff17 	ldw	r2,-4(fp)
    82d4:	10c00044 	addi	r3,r2,1
    82d8:	e0ffff15 	stw	r3,-4(fp)
    82dc:	e0fffe17 	ldw	r3,-8(fp)
    82e0:	18c000c3 	ldbu	r3,3(r3)
    82e4:	10c00005 	stb	r3,0(r2)
                rc = 3;
    82e8:	008000c4 	movi	r2,3
    82ec:	e0bffc05 	stb	r2,-16(fp)
                break;
    82f0:	00001806 	br	8354 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    82f4:	e0bfff17 	ldw	r2,-4(fp)
    82f8:	10c00044 	addi	r3,r2,1
    82fc:	e0ffff15 	stw	r3,-4(fp)
    8300:	e0fffe17 	ldw	r3,-8(fp)
    8304:	18c00043 	ldbu	r3,1(r3)
    8308:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    830c:	e0bfff17 	ldw	r2,-4(fp)
    8310:	10c00044 	addi	r3,r2,1
    8314:	e0ffff15 	stw	r3,-4(fp)
    8318:	e0fffe17 	ldw	r3,-8(fp)
    831c:	18c00083 	ldbu	r3,2(r3)
    8320:	10c00005 	stb	r3,0(r2)
                rc = 2;
    8324:	00800084 	movi	r2,2
    8328:	e0bffc05 	stb	r2,-16(fp)
                break;
    832c:	00000906 	br	8354 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    8330:	e0bfff17 	ldw	r2,-4(fp)
    8334:	10c00044 	addi	r3,r2,1
    8338:	e0ffff15 	stw	r3,-4(fp)
    833c:	e0fffe17 	ldw	r3,-8(fp)
    8340:	18c00043 	ldbu	r3,1(r3)
    8344:	10c00005 	stb	r3,0(r2)
                rc = 1;
    8348:	00800044 	movi	r2,1
    834c:	e0bffc05 	stb	r2,-16(fp)
                break;
    8350:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    8354:	e0bffc03 	ldbu	r2,-16(fp)
}
    8358:	e037883a 	mov	sp,fp
    835c:	df000017 	ldw	fp,0(sp)
    8360:	dec00104 	addi	sp,sp,4
    8364:	f800283a 	ret

00008368 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8368:	defffb04 	addi	sp,sp,-20
    836c:	dfc00415 	stw	ra,16(sp)
    8370:	df000315 	stw	fp,12(sp)
    8374:	df000304 	addi	fp,sp,12
    8378:	e13ffd15 	stw	r4,-12(fp)
    837c:	e17ffe15 	stw	r5,-8(fp)
    8380:	3005883a 	mov	r2,r6
    8384:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8388:	e0bffd17 	ldw	r2,-12(fp)
    838c:	1009883a 	mov	r4,r2
    8390:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    8394:	008000b4 	movhi	r2,2
    8398:	10989e04 	addi	r2,r2,25208
    839c:	e0fffd17 	ldw	r3,-12(fp)
    83a0:	18800015 	stw	r2,0(r3)
    83a4:	e0bffd17 	ldw	r2,-12(fp)
    83a8:	e0fffe17 	ldw	r3,-8(fp)
    83ac:	10c00115 	stw	r3,4(r2)
    83b0:	e0bffd17 	ldw	r2,-12(fp)
    83b4:	10800204 	addi	r2,r2,8
    83b8:	1009883a 	mov	r4,r2
    83bc:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    83c0:	e0bffd17 	ldw	r2,-12(fp)
    83c4:	10800404 	addi	r2,r2,16
    83c8:	1009883a 	mov	r4,r2
    83cc:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    83d0:	e0bffd17 	ldw	r2,-12(fp)
    83d4:	10800604 	addi	r2,r2,24
    83d8:	1009883a 	mov	r4,r2
    83dc:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    83e0:	e0bffd17 	ldw	r2,-12(fp)
    83e4:	10000c05 	stb	zero,48(r2)
    83e8:	e0bffd17 	ldw	r2,-12(fp)
    83ec:	10000c45 	stb	zero,49(r2)
    83f0:	e0bffd17 	ldw	r2,-12(fp)
    83f4:	10000c85 	stb	zero,50(r2)
    83f8:	e0bffd17 	ldw	r2,-12(fp)
    83fc:	10000cc5 	stb	zero,51(r2)
    8400:	e0bffd17 	ldw	r2,-12(fp)
    8404:	e0ffff03 	ldbu	r3,-4(fp)
    8408:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    840c:	e0bffd17 	ldw	r2,-12(fp)
    8410:	10c00804 	addi	r3,r2,32
    8414:	e0bffd17 	ldw	r2,-12(fp)
    8418:	19803fcc 	andi	r6,r3,255
    841c:	11000243 	ldbu	r4,9(r2)
    8420:	2008703a 	and	r4,r4,zero
    8424:	200b883a 	mov	r5,r4
    8428:	3009883a 	mov	r4,r6
    842c:	2908b03a 	or	r4,r5,r4
    8430:	11000245 	stb	r4,9(r2)
    8434:	1808d23a 	srli	r4,r3,8
    8438:	21803fcc 	andi	r6,r4,255
    843c:	11000283 	ldbu	r4,10(r2)
    8440:	2008703a 	and	r4,r4,zero
    8444:	200b883a 	mov	r5,r4
    8448:	3009883a 	mov	r4,r6
    844c:	2908b03a 	or	r4,r5,r4
    8450:	11000285 	stb	r4,10(r2)
    8454:	1808d43a 	srli	r4,r3,16
    8458:	21803fcc 	andi	r6,r4,255
    845c:	110002c3 	ldbu	r4,11(r2)
    8460:	2008703a 	and	r4,r4,zero
    8464:	200b883a 	mov	r5,r4
    8468:	3009883a 	mov	r4,r6
    846c:	2908b03a 	or	r4,r5,r4
    8470:	110002c5 	stb	r4,11(r2)
    8474:	180ad63a 	srli	r5,r3,24
    8478:	10c00303 	ldbu	r3,12(r2)
    847c:	1806703a 	and	r3,r3,zero
    8480:	1809883a 	mov	r4,r3
    8484:	2807883a 	mov	r3,r5
    8488:	20c6b03a 	or	r3,r4,r3
    848c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8490:	e0bffd17 	ldw	r2,-12(fp)
    8494:	10c00404 	addi	r3,r2,16
    8498:	e0bffd17 	ldw	r2,-12(fp)
    849c:	10800204 	addi	r2,r2,8
    84a0:	100b883a 	mov	r5,r2
    84a4:	1809883a 	mov	r4,r3
    84a8:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	10c00604 	addi	r3,r2,24
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	10800204 	addi	r2,r2,8
    84bc:	100b883a 	mov	r5,r2
    84c0:	1809883a 	mov	r4,r3
    84c4:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    84c8:	0001883a 	nop
    84cc:	e037883a 	mov	sp,fp
    84d0:	dfc00117 	ldw	ra,4(sp)
    84d4:	df000017 	ldw	fp,0(sp)
    84d8:	dec00204 	addi	sp,sp,8
    84dc:	f800283a 	ret

000084e0 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    84e0:	defff804 	addi	sp,sp,-32
    84e4:	dfc00715 	stw	ra,28(sp)
    84e8:	df000615 	stw	fp,24(sp)
    84ec:	df000604 	addi	fp,sp,24
    84f0:	e13ffc15 	stw	r4,-16(fp)
    84f4:	2805883a 	mov	r2,r5
    84f8:	e1bffe15 	stw	r6,-8(fp)
    84fc:	e1ffff15 	stw	r7,-4(fp)
    8500:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    8504:	e0bffd0b 	ldhu	r2,-12(fp)
    8508:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    850c:	e0bffe17 	ldw	r2,-8(fp)
    8510:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    8514:	e0bffa0b 	ldhu	r2,-24(fp)
    8518:	10bfffcc 	andi	r2,r2,65535
    851c:	10000a26 	beq	r2,zero,8548 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    8520:	e0bffb04 	addi	r2,fp,-20
    8524:	e1bffa04 	addi	r6,fp,-24
    8528:	100b883a 	mov	r5,r2
    852c:	e13ffc17 	ldw	r4,-16(fp)
    8530:	000855c0 	call	855c <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    8534:	1080005c 	xori	r2,r2,1
    8538:	10803fcc 	andi	r2,r2,255
    853c:	1000011e 	bne	r2,zero,8544 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    8540:	003ff406 	br	8514 <__alt_data_end+0xfc008514>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    8544:	0001883a 	nop
}
    8548:	e037883a 	mov	sp,fp
    854c:	dfc00117 	ldw	ra,4(sp)
    8550:	df000017 	ldw	fp,0(sp)
    8554:	dec00204 	addi	sp,sp,8
    8558:	f800283a 	ret

0000855c <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    855c:	defff604 	addi	sp,sp,-40
    8560:	dfc00915 	stw	ra,36(sp)
    8564:	df000815 	stw	fp,32(sp)
    8568:	df000804 	addi	fp,sp,32
    856c:	e13ffc15 	stw	r4,-16(fp)
    8570:	e17ffd15 	stw	r5,-12(fp)
    8574:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8578:	e0bffc17 	ldw	r2,-16(fp)
    857c:	10800804 	addi	r2,r2,32
    8580:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8584:	e0bffc17 	ldw	r2,-16(fp)
    8588:	10800804 	addi	r2,r2,32
    858c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8590:	e0bffc17 	ldw	r2,-16(fp)
    8594:	10800c03 	ldbu	r2,48(r2)
    8598:	10803fcc 	andi	r2,r2,255
    859c:	10c00168 	cmpgeui	r3,r2,5
    85a0:	1801411e 	bne	r3,zero,8aa8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    85a4:	100690ba 	slli	r3,r2,2
    85a8:	00800074 	movhi	r2,1
    85ac:	10a16f04 	addi	r2,r2,-31300
    85b0:	1885883a 	add	r2,r3,r2
    85b4:	10800017 	ldw	r2,0(r2)
    85b8:	1000683a 	jmp	r2
    85bc:	000085d0 	cmplti	zero,zero,535
    85c0:	00008604 	movi	zero,536
    85c4:	0000868c 	andi	zero,zero,538
    85c8:	00008720 	cmpeqi	zero,zero,540
    85cc:	0000878c 	andi	zero,zero,542
                case 0:
                        theBuffer.valueSize = 2;
    85d0:	e0bffc17 	ldw	r2,-16(fp)
    85d4:	00c00084 	movi	r3,2
    85d8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    85dc:	e0bffc17 	ldw	r2,-16(fp)
    85e0:	10c00404 	addi	r3,r2,16
    85e4:	e0bffc17 	ldw	r2,-16(fp)
    85e8:	10800204 	addi	r2,r2,8
    85ec:	100b883a 	mov	r5,r2
    85f0:	1809883a 	mov	r4,r3
    85f4:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    85f8:	e0bffc17 	ldw	r2,-16(fp)
    85fc:	00c00044 	movi	r3,1
    8600:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    8604:	e0bffc17 	ldw	r2,-16(fp)
    8608:	10800404 	addi	r2,r2,16
    860c:	e1bffe17 	ldw	r6,-8(fp)
    8610:	e17ffd17 	ldw	r5,-12(fp)
    8614:	1009883a 	mov	r4,r2
    8618:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    861c:	1080005c 	xori	r2,r2,1
    8620:	10803fcc 	andi	r2,r2,255
    8624:	10000226 	beq	r2,zero,8630 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8628:	0005883a 	mov	r2,zero
    862c:	00011f06 	br	8aac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	10c00217 	ldw	r3,8(r2)
    8638:	1806d23a 	srli	r3,r3,8
    863c:	10800317 	ldw	r2,12(r2)
    8640:	10803fcc 	andi	r2,r2,255
    8644:	1004963a 	slli	r2,r2,24
    8648:	10c4b03a 	or	r2,r2,r3
    864c:	10c00003 	ldbu	r3,0(r2)
    8650:	e0bffc17 	ldw	r2,-16(fp)
    8654:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8658:	e0bffc17 	ldw	r2,-16(fp)
    865c:	10c00217 	ldw	r3,8(r2)
    8660:	1806d23a 	srli	r3,r3,8
    8664:	10800317 	ldw	r2,12(r2)
    8668:	10803fcc 	andi	r2,r2,255
    866c:	1004963a 	slli	r2,r2,24
    8670:	10c4b03a 	or	r2,r2,r3
    8674:	10c00043 	ldbu	r3,1(r2)
    8678:	e0bffc17 	ldw	r2,-16(fp)
    867c:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8680:	e0bffc17 	ldw	r2,-16(fp)
    8684:	00c00084 	movi	r3,2
    8688:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    868c:	e0bffc17 	ldw	r2,-16(fp)
    8690:	10800804 	addi	r2,r2,32
    8694:	10c00084 	addi	r3,r2,2
    8698:	e0bffc17 	ldw	r2,-16(fp)
    869c:	19803fcc 	andi	r6,r3,255
    86a0:	11000243 	ldbu	r4,9(r2)
    86a4:	2008703a 	and	r4,r4,zero
    86a8:	200b883a 	mov	r5,r4
    86ac:	3009883a 	mov	r4,r6
    86b0:	2908b03a 	or	r4,r5,r4
    86b4:	11000245 	stb	r4,9(r2)
    86b8:	1808d23a 	srli	r4,r3,8
    86bc:	21803fcc 	andi	r6,r4,255
    86c0:	11000283 	ldbu	r4,10(r2)
    86c4:	2008703a 	and	r4,r4,zero
    86c8:	200b883a 	mov	r5,r4
    86cc:	3009883a 	mov	r4,r6
    86d0:	2908b03a 	or	r4,r5,r4
    86d4:	11000285 	stb	r4,10(r2)
    86d8:	1808d43a 	srli	r4,r3,16
    86dc:	21803fcc 	andi	r6,r4,255
    86e0:	110002c3 	ldbu	r4,11(r2)
    86e4:	2008703a 	and	r4,r4,zero
    86e8:	200b883a 	mov	r5,r4
    86ec:	3009883a 	mov	r4,r6
    86f0:	2908b03a 	or	r4,r5,r4
    86f4:	110002c5 	stb	r4,11(r2)
    86f8:	180ad63a 	srli	r5,r3,24
    86fc:	10c00303 	ldbu	r3,12(r2)
    8700:	1806703a 	and	r3,r3,zero
    8704:	1809883a 	mov	r4,r3
    8708:	2807883a 	mov	r3,r5
    870c:	20c6b03a 	or	r3,r4,r3
    8710:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8714:	e0bffc17 	ldw	r2,-16(fp)
    8718:	00c000c4 	movi	r3,3
    871c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8720:	e0bffc17 	ldw	r2,-16(fp)
    8724:	10800c83 	ldbu	r2,50(r2)
    8728:	10803fcc 	andi	r2,r2,255
    872c:	10c00120 	cmpeqi	r3,r2,4
    8730:	1800021e 	bne	r3,zero,873c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8734:	10800148 	cmpgei	r2,r2,5
    8738:	00000306 	br	8748 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    873c:	e0bffc17 	ldw	r2,-16(fp)
    8740:	10000d45 	stb	zero,53(r2)
                                        break;
    8744:	00000106 	br	874c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8748:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    874c:	e0bffc17 	ldw	r2,-16(fp)
    8750:	10800c43 	ldbu	r2,49(r2)
    8754:	10bfff84 	addi	r2,r2,-2
    8758:	1007883a 	mov	r3,r2
    875c:	e0bffc17 	ldw	r2,-16(fp)
    8760:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8764:	e0bffc17 	ldw	r2,-16(fp)
    8768:	10c00404 	addi	r3,r2,16
    876c:	e0bffc17 	ldw	r2,-16(fp)
    8770:	10800204 	addi	r2,r2,8
    8774:	100b883a 	mov	r5,r2
    8778:	1809883a 	mov	r4,r3
    877c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8780:	e0bffc17 	ldw	r2,-16(fp)
    8784:	00c00104 	movi	r3,4
    8788:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    878c:	e0bffc17 	ldw	r2,-16(fp)
    8790:	10800c83 	ldbu	r2,50(r2)
    8794:	10803fcc 	andi	r2,r2,255
    8798:	10c00120 	cmpeqi	r3,r2,4
    879c:	1800141e 	bne	r3,zero,87f0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    87a0:	10c00160 	cmpeqi	r3,r2,5
    87a4:	18005a1e 	bne	r3,zero,8910 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    87a8:	108000a0 	cmpeqi	r2,r2,2
    87ac:	10008526 	beq	r2,zero,89c4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    87b0:	e0bffc17 	ldw	r2,-16(fp)
    87b4:	10800404 	addi	r2,r2,16
    87b8:	e1bffe17 	ldw	r6,-8(fp)
    87bc:	e17ffd17 	ldw	r5,-12(fp)
    87c0:	1009883a 	mov	r4,r2
    87c4:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    87c8:	1080005c 	xori	r2,r2,1
    87cc:	10803fcc 	andi	r2,r2,255
    87d0:	10000226 	beq	r2,zero,87dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    87d4:	0005883a 	mov	r2,zero
    87d8:	0000b406 	br	8aac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    87dc:	e0bffa17 	ldw	r2,-24(fp)
    87e0:	10c00143 	ldbu	r3,5(r2)
    87e4:	e0bffc17 	ldw	r2,-16(fp)
    87e8:	10c00d85 	stb	r3,54(r2)
                                        break;
    87ec:	00008b06 	br	8a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    87f0:	e0bffc17 	ldw	r2,-16(fp)
    87f4:	10800404 	addi	r2,r2,16
    87f8:	e1bffe17 	ldw	r6,-8(fp)
    87fc:	e17ffd17 	ldw	r5,-12(fp)
    8800:	1009883a 	mov	r4,r2
    8804:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8808:	1080005c 	xori	r2,r2,1
    880c:	10803fcc 	andi	r2,r2,255
    8810:	10000226 	beq	r2,zero,881c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8814:	0005883a 	mov	r2,zero
    8818:	0000a406 	br	8aac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    881c:	e0bffb17 	ldw	r2,-20(fp)
    8820:	10800083 	ldbu	r2,2(r2)
    8824:	10803fcc 	andi	r2,r2,255
    8828:	01402004 	movi	r5,128
    882c:	1009883a 	mov	r4,r2
    8830:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8834:	e0bffb17 	ldw	r2,-20(fp)
    8838:	108000c3 	ldbu	r2,3(r2)
    883c:	10803fcc 	andi	r2,r2,255
    8840:	01402004 	movi	r5,128
    8844:	1009883a 	mov	r4,r2
    8848:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    884c:	e0bffb17 	ldw	r2,-20(fp)
    8850:	10800103 	ldbu	r2,4(r2)
    8854:	10803fcc 	andi	r2,r2,255
    8858:	01402004 	movi	r5,128
    885c:	1009883a 	mov	r4,r2
    8860:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8864:	e0bffb17 	ldw	r2,-20(fp)
    8868:	10800143 	ldbu	r2,5(r2)
    886c:	10803fcc 	andi	r2,r2,255
    8870:	01402004 	movi	r5,128
    8874:	1009883a 	mov	r4,r2
    8878:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    887c:	e0bffb17 	ldw	r2,-20(fp)
    8880:	10800183 	ldbu	r2,6(r2)
    8884:	10803fcc 	andi	r2,r2,255
    8888:	01402004 	movi	r5,128
    888c:	1009883a 	mov	r4,r2
    8890:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8894:	e0bffb17 	ldw	r2,-20(fp)
    8898:	108001c3 	ldbu	r2,7(r2)
    889c:	10803fcc 	andi	r2,r2,255
    88a0:	01402004 	movi	r5,128
    88a4:	1009883a 	mov	r4,r2
    88a8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    88ac:	e0bffc17 	ldw	r2,-16(fp)
    88b0:	10800d03 	ldbu	r2,52(r2)
    88b4:	10803fcc 	andi	r2,r2,255
    88b8:	10000a26 	beq	r2,zero,88e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    88bc:	e0bffb17 	ldw	r2,-20(fp)
    88c0:	10800143 	ldbu	r2,5(r2)
    88c4:	10803fcc 	andi	r2,r2,255
    88c8:	10800058 	cmpnei	r2,r2,1
    88cc:	10004e1e 	bne	r2,zero,8a08 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    88d0:	e0bffb17 	ldw	r2,-20(fp)
    88d4:	10800183 	ldbu	r2,6(r2)
    88d8:	10803fcc 	andi	r2,r2,255
    88dc:	108000d8 	cmpnei	r2,r2,3
    88e0:	1000491e 	bne	r2,zero,8a08 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    88e4:	e0bffc17 	ldw	r2,-16(fp)
    88e8:	00c00044 	movi	r3,1
    88ec:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    88f0:	e0bffc17 	ldw	r2,-16(fp)
    88f4:	10800cc3 	ldbu	r2,51(r2)
    88f8:	10803fcc 	andi	r2,r2,255
    88fc:	108000a8 	cmpgeui	r2,r2,2
    8900:	1000431e 	bne	r2,zero,8a10 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8904:	e0bffc17 	ldw	r2,-16(fp)
    8908:	10000cc5 	stb	zero,51(r2)
                                        break;
    890c:	00004006 	br	8a10 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8910:	e0bffc17 	ldw	r2,-16(fp)
    8914:	10800404 	addi	r2,r2,16
    8918:	e1bffe17 	ldw	r6,-8(fp)
    891c:	e17ffd17 	ldw	r5,-12(fp)
    8920:	1009883a 	mov	r4,r2
    8924:	00062400 	call	6240 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8928:	1080005c 	xori	r2,r2,1
    892c:	10803fcc 	andi	r2,r2,255
    8930:	10000226 	beq	r2,zero,893c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8934:	0005883a 	mov	r2,zero
    8938:	00005c06 	br	8aac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    893c:	e0bffc17 	ldw	r2,-16(fp)
    8940:	10800d43 	ldbu	r2,53(r2)
    8944:	10803fcc 	andi	r2,r2,255
    8948:	10003326 	beq	r2,zero,8a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	10800cc3 	ldbu	r2,51(r2)
    8954:	10803fcc 	andi	r2,r2,255
    8958:	108000a8 	cmpgeui	r2,r2,2
    895c:	10002e1e 	bne	r2,zero,8a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8960:	e0bffc17 	ldw	r2,-16(fp)
    8964:	10800117 	ldw	r2,4(r2)
    8968:	10800017 	ldw	r2,0(r2)
    896c:	10800017 	ldw	r2,0(r2)
    8970:	e0fffc17 	ldw	r3,-16(fp)
    8974:	19000117 	ldw	r4,4(r3)
    8978:	e0fffc17 	ldw	r3,-16(fp)
    897c:	18c00d83 	ldbu	r3,54(r3)
    8980:	19403fcc 	andi	r5,r3,255
    8984:	e0fffc17 	ldw	r3,-16(fp)
    8988:	18c00804 	addi	r3,r3,32
    898c:	d8c00115 	stw	r3,4(sp)
    8990:	d8000015 	stw	zero,0(sp)
    8994:	000f883a 	mov	r7,zero
    8998:	000d883a 	mov	r6,zero
    899c:	103ee83a 	callr	r2
    89a0:	10803fcc 	andi	r2,r2,255
    89a4:	10001c26 	beq	r2,zero,8a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	10800cc3 	ldbu	r2,51(r2)
    89b0:	10800044 	addi	r2,r2,1
    89b4:	1007883a 	mov	r3,r2
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    89c0:	00001506 	br	8a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    89c4:	e0bffc17 	ldw	r2,-16(fp)
    89c8:	10c00604 	addi	r3,r2,24
    89cc:	e0bffc17 	ldw	r2,-16(fp)
    89d0:	10800c43 	ldbu	r2,49(r2)
    89d4:	10803fcc 	andi	r2,r2,255
    89d8:	10bfff84 	addi	r2,r2,-2
    89dc:	10bfffcc 	andi	r2,r2,65535
    89e0:	100f883a 	mov	r7,r2
    89e4:	e1bffe17 	ldw	r6,-8(fp)
    89e8:	e17ffd17 	ldw	r5,-12(fp)
    89ec:	1809883a 	mov	r4,r3
    89f0:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    89f4:	1080005c 	xori	r2,r2,1
    89f8:	10803fcc 	andi	r2,r2,255
    89fc:	10000726 	beq	r2,zero,8a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8a00:	0005883a 	mov	r2,zero
    8a04:	00002906 	br	8aac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8a08:	0001883a 	nop
    8a0c:	00000306 	br	8a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8a10:	0001883a 	nop
    8a14:	00000106 	br	8a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8a18:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
    8a20:	10c00804 	addi	r3,r2,32
    8a24:	e0bffc17 	ldw	r2,-16(fp)
    8a28:	19803fcc 	andi	r6,r3,255
    8a2c:	11000243 	ldbu	r4,9(r2)
    8a30:	2008703a 	and	r4,r4,zero
    8a34:	200b883a 	mov	r5,r4
    8a38:	3009883a 	mov	r4,r6
    8a3c:	2908b03a 	or	r4,r5,r4
    8a40:	11000245 	stb	r4,9(r2)
    8a44:	1808d23a 	srli	r4,r3,8
    8a48:	21803fcc 	andi	r6,r4,255
    8a4c:	11000283 	ldbu	r4,10(r2)
    8a50:	2008703a 	and	r4,r4,zero
    8a54:	200b883a 	mov	r5,r4
    8a58:	3009883a 	mov	r4,r6
    8a5c:	2908b03a 	or	r4,r5,r4
    8a60:	11000285 	stb	r4,10(r2)
    8a64:	1808d43a 	srli	r4,r3,16
    8a68:	21803fcc 	andi	r6,r4,255
    8a6c:	110002c3 	ldbu	r4,11(r2)
    8a70:	2008703a 	and	r4,r4,zero
    8a74:	200b883a 	mov	r5,r4
    8a78:	3009883a 	mov	r4,r6
    8a7c:	2908b03a 	or	r4,r5,r4
    8a80:	110002c5 	stb	r4,11(r2)
    8a84:	180ad63a 	srli	r5,r3,24
    8a88:	10c00303 	ldbu	r3,12(r2)
    8a8c:	1806703a 	and	r3,r3,zero
    8a90:	1809883a 	mov	r4,r3
    8a94:	2807883a 	mov	r3,r5
    8a98:	20c6b03a 	or	r3,r4,r3
    8a9c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8aa0:	e0bffc17 	ldw	r2,-16(fp)
    8aa4:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8aa8:	00800044 	movi	r2,1
}
    8aac:	e037883a 	mov	sp,fp
    8ab0:	dfc00117 	ldw	ra,4(sp)
    8ab4:	df000017 	ldw	fp,0(sp)
    8ab8:	dec00204 	addi	sp,sp,8
    8abc:	f800283a 	ret

00008ac0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8ac0:	defff904 	addi	sp,sp,-28
    8ac4:	df000615 	stw	fp,24(sp)
    8ac8:	df000604 	addi	fp,sp,24
    8acc:	e13ffb15 	stw	r4,-20(fp)
    8ad0:	3009883a 	mov	r4,r6
    8ad4:	3807883a 	mov	r3,r7
    8ad8:	e0800117 	ldw	r2,4(fp)
    8adc:	e17ffc05 	stb	r5,-16(fp)
    8ae0:	e13ffd05 	stb	r4,-12(fp)
    8ae4:	e0fffe05 	stb	r3,-8(fp)
    8ae8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8aec:	e0800217 	ldw	r2,8(fp)
    8af0:	10c000c3 	ldbu	r3,3(r2)
    8af4:	e0bffb17 	ldw	r2,-20(fp)
    8af8:	10800483 	ldbu	r2,18(r2)
    8afc:	1884703a 	and	r2,r3,r2
    8b00:	10803fcc 	andi	r2,r2,255
    8b04:	10800098 	cmpnei	r2,r2,2
    8b08:	10001f1e 	bne	r2,zero,8b88 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8b0c:	e0800217 	ldw	r2,8(fp)
    8b10:	10800083 	ldbu	r2,2(r2)
    8b14:	10803fcc 	andi	r2,r2,255
    8b18:	1080201c 	xori	r2,r2,128
    8b1c:	10bfe004 	addi	r2,r2,-128
    8b20:	1000020e 	bge	r2,zero,8b2c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8b24:	00800044 	movi	r2,1
    8b28:	00000106 	br	8b30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8b2c:	00800084 	movi	r2,2
    8b30:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8b34:	e0fffa03 	ldbu	r3,-24(fp)
    8b38:	e0800217 	ldw	r2,8(fp)
    8b3c:	10800083 	ldbu	r2,2(r2)
    8b40:	108003cc 	andi	r2,r2,15
    8b44:	100b883a 	mov	r5,r2
    8b48:	e13ffb17 	ldw	r4,-20(fp)
    8b4c:	1805883a 	mov	r2,r3
    8b50:	1085883a 	add	r2,r2,r2
    8b54:	10c5883a 	add	r2,r2,r3
    8b58:	2085883a 	add	r2,r4,r2
    8b5c:	108004c4 	addi	r2,r2,19
    8b60:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8b64:	e0800217 	ldw	r2,8(fp)
    8b68:	10c00103 	ldbu	r3,4(r2)
    8b6c:	10800143 	ldbu	r2,5(r2)
    8b70:	1004923a 	slli	r2,r2,8
    8b74:	10c4b03a 	or	r2,r2,r3
    8b78:	10bfffcc 	andi	r2,r2,65535
    8b7c:	10801070 	cmpltui	r2,r2,65
    8b80:	10000d1e 	bne	r2,zero,8bb8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8b84:	00000206 	br	8b90 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8b88:	0005883a 	mov	r2,zero
    8b8c:	00001906 	br	8bf4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8b90:	e0fffa03 	ldbu	r3,-24(fp)
    8b94:	e13ffb17 	ldw	r4,-20(fp)
    8b98:	1805883a 	mov	r2,r3
    8b9c:	1085883a 	add	r2,r2,r2
    8ba0:	10c5883a 	add	r2,r2,r3
    8ba4:	2085883a 	add	r2,r4,r2
    8ba8:	10800504 	addi	r2,r2,20
    8bac:	00c01004 	movi	r3,64
    8bb0:	10c00005 	stb	r3,0(r2)
    8bb4:	00000e06 	br	8bf0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8bb8:	e0fffa03 	ldbu	r3,-24(fp)
    8bbc:	e0800217 	ldw	r2,8(fp)
    8bc0:	11000103 	ldbu	r4,4(r2)
    8bc4:	10800143 	ldbu	r2,5(r2)
    8bc8:	1004923a 	slli	r2,r2,8
    8bcc:	1104b03a 	or	r2,r2,r4
    8bd0:	100b883a 	mov	r5,r2
    8bd4:	e13ffb17 	ldw	r4,-20(fp)
    8bd8:	1805883a 	mov	r2,r3
    8bdc:	1085883a 	add	r2,r2,r2
    8be0:	10c5883a 	add	r2,r2,r3
    8be4:	2085883a 	add	r2,r4,r2
    8be8:	10800504 	addi	r2,r2,20
    8bec:	11400005 	stb	r5,0(r2)
        }

        return true;
    8bf0:	00800044 	movi	r2,1
}
    8bf4:	e037883a 	mov	sp,fp
    8bf8:	df000017 	ldw	fp,0(sp)
    8bfc:	dec00104 	addi	sp,sp,4
    8c00:	f800283a 	ret

00008c04 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8c04:	213fff04 	addi	r4,r4,-4
    8c08:	0008ac01 	jmpi	8ac0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008c0c <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8c0c:	defffa04 	addi	sp,sp,-24
    8c10:	df000515 	stw	fp,20(sp)
    8c14:	df000504 	addi	fp,sp,20
    8c18:	e13ffb15 	stw	r4,-20(fp)
    8c1c:	3009883a 	mov	r4,r6
    8c20:	3807883a 	mov	r3,r7
    8c24:	e0800117 	ldw	r2,4(fp)
    8c28:	e17ffc05 	stb	r5,-16(fp)
    8c2c:	e13ffd05 	stb	r4,-12(fp)
    8c30:	e0fffe05 	stb	r3,-8(fp)
    8c34:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8c38:	00800044 	movi	r2,1
        };
    8c3c:	e037883a 	mov	sp,fp
    8c40:	df000017 	ldw	fp,0(sp)
    8c44:	dec00104 	addi	sp,sp,4
    8c48:	f800283a 	ret

00008c4c <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8c4c:	defffe04 	addi	sp,sp,-8
    8c50:	df000115 	stw	fp,4(sp)
    8c54:	df000104 	addi	fp,sp,4
    8c58:	e13fff15 	stw	r4,-4(fp)
    8c5c:	e0bfff17 	ldw	r2,-4(fp)
    8c60:	10800d83 	ldbu	r2,54(r2)
    8c64:	e037883a 	mov	sp,fp
    8c68:	df000017 	ldw	fp,0(sp)
    8c6c:	dec00104 	addi	sp,sp,4
    8c70:	f800283a 	ret

00008c74 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8c74:	defffe04 	addi	sp,sp,-8
    8c78:	df000115 	stw	fp,4(sp)
    8c7c:	df000104 	addi	fp,sp,4
    8c80:	e13fff15 	stw	r4,-4(fp)
    8c84:	e0bfff17 	ldw	r2,-4(fp)
    8c88:	10800cc3 	ldbu	r2,51(r2)
    8c8c:	e037883a 	mov	sp,fp
    8c90:	df000017 	ldw	fp,0(sp)
    8c94:	dec00104 	addi	sp,sp,4
    8c98:	f800283a 	ret

00008c9c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8c9c:	defffd04 	addi	sp,sp,-12
    8ca0:	df000215 	stw	fp,8(sp)
    8ca4:	df000204 	addi	fp,sp,8
    8ca8:	e13ffe15 	stw	r4,-8(fp)
    8cac:	2805883a 	mov	r2,r5
    8cb0:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8cb4:	e0bfff03 	ldbu	r2,-4(fp)
    8cb8:	10803c28 	cmpgeui	r2,r2,240
    8cbc:	1000031e 	bne	r2,zero,8ccc <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8cc0:	e0bfff03 	ldbu	r2,-4(fp)
    8cc4:	1004d13a 	srli	r2,r2,4
    8cc8:	00000606 	br	8ce4 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8ccc:	e0bfff03 	ldbu	r2,-4(fp)
    8cd0:	10c003cc 	andi	r3,r2,15
    8cd4:	008000b4 	movhi	r2,2
    8cd8:	10988884 	addi	r2,r2,25122
    8cdc:	1885883a 	add	r2,r3,r2
    8ce0:	10800003 	ldbu	r2,0(r2)
        };
    8ce4:	e037883a 	mov	sp,fp
    8ce8:	df000017 	ldw	fp,0(sp)
    8cec:	dec00104 	addi	sp,sp,4
    8cf0:	f800283a 	ret

00008cf4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8cf4:	defffd04 	addi	sp,sp,-12
    8cf8:	df000215 	stw	fp,8(sp)
    8cfc:	df000204 	addi	fp,sp,8
    8d00:	e13ffe15 	stw	r4,-8(fp)
    8d04:	2805883a 	mov	r2,r5
    8d08:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8d0c:	e0ffff03 	ldbu	r3,-4(fp)
    8d10:	008000b4 	movhi	r2,2
    8d14:	10988484 	addi	r2,r2,25106
    8d18:	1885883a 	add	r2,r3,r2
    8d1c:	10800003 	ldbu	r2,0(r2)
        };
    8d20:	e037883a 	mov	sp,fp
    8d24:	df000017 	ldw	fp,0(sp)
    8d28:	dec00104 	addi	sp,sp,4
    8d2c:	f800283a 	ret

00008d30 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8d30:	defffe04 	addi	sp,sp,-8
    8d34:	df000115 	stw	fp,4(sp)
    8d38:	df000104 	addi	fp,sp,4
    8d3c:	e13fff15 	stw	r4,-4(fp)
    8d40:	e0bfff17 	ldw	r2,-4(fp)
    8d44:	10800303 	ldbu	r2,12(r2)
    8d48:	e037883a 	mov	sp,fp
    8d4c:	df000017 	ldw	fp,0(sp)
    8d50:	dec00104 	addi	sp,sp,4
    8d54:	f800283a 	ret

00008d58 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8d58:	defffe04 	addi	sp,sp,-8
    8d5c:	df000115 	stw	fp,4(sp)
    8d60:	df000104 	addi	fp,sp,4
    8d64:	e13fff15 	stw	r4,-4(fp)
    8d68:	008000b4 	movhi	r2,2
    8d6c:	1098a104 	addi	r2,r2,25220
    8d70:	e0ffff17 	ldw	r3,-4(fp)
    8d74:	18800015 	stw	r2,0(r3)
    8d78:	0001883a 	nop
    8d7c:	e037883a 	mov	sp,fp
    8d80:	df000017 	ldw	fp,0(sp)
    8d84:	dec00104 	addi	sp,sp,4
    8d88:	f800283a 	ret

00008d8c <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8d8c:	defffd04 	addi	sp,sp,-12
    8d90:	df000215 	stw	fp,8(sp)
    8d94:	df000204 	addi	fp,sp,8
    8d98:	2005883a 	mov	r2,r4
    8d9c:	e17fff15 	stw	r5,-4(fp)
    8da0:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8da4:	0001883a 	nop
    8da8:	e037883a 	mov	sp,fp
    8dac:	df000017 	ldw	fp,0(sp)
    8db0:	dec00104 	addi	sp,sp,4
    8db4:	f800283a 	ret

00008db8 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8db8:	deffe204 	addi	sp,sp,-120
    8dbc:	dfc01d15 	stw	ra,116(sp)
    8dc0:	df001c15 	stw	fp,112(sp)
    8dc4:	df001c04 	addi	fp,sp,112
    8dc8:	e13ffd15 	stw	r4,-12(fp)
    8dcc:	2805883a 	mov	r2,r5
    8dd0:	e1bfff15 	stw	r6,-4(fp)
    8dd4:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8dd8:	00801004 	movi	r2,64
    8ddc:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8de0:	e0bffd17 	ldw	r2,-12(fp)
    8de4:	11000217 	ldw	r4,8(r2)
    8de8:	e0bffd17 	ldw	r2,-12(fp)
    8dec:	10800303 	ldbu	r2,12(r2)
    8df0:	11403fcc 	andi	r5,r2,255
    8df4:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8df8:	e0ffff17 	ldw	r3,-4(fp)
    8dfc:	d8c00715 	stw	r3,28(sp)
    8e00:	e0ffec84 	addi	r3,fp,-78
    8e04:	d8c00615 	stw	r3,24(sp)
    8e08:	00c01004 	movi	r3,64
    8e0c:	d8c00515 	stw	r3,20(sp)
    8e10:	00c02004 	movi	r3,128
    8e14:	d8c00415 	stw	r3,16(sp)
    8e18:	d8800315 	stw	r2,12(sp)
    8e1c:	00800884 	movi	r2,34
    8e20:	d8800215 	stw	r2,8(sp)
    8e24:	d8000115 	stw	zero,4(sp)
    8e28:	00800184 	movi	r2,6
    8e2c:	d8800015 	stw	r2,0(sp)
    8e30:	01c02044 	movi	r7,129
    8e34:	000d883a 	mov	r6,zero
    8e38:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8e3c:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8e40:	e0bfec43 	ldbu	r2,-79(fp)
}
    8e44:	e037883a 	mov	sp,fp
    8e48:	dfc00117 	ldw	ra,4(sp)
    8e4c:	df000017 	ldw	fp,0(sp)
    8e50:	dec00204 	addi	sp,sp,8
    8e54:	f800283a 	ret

00008e58 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8e58:	defff004 	addi	sp,sp,-64
    8e5c:	dfc00f15 	stw	ra,60(sp)
    8e60:	df000e15 	stw	fp,56(sp)
    8e64:	df000e04 	addi	fp,sp,56
    8e68:	e13ffa15 	stw	r4,-24(fp)
    8e6c:	2811883a 	mov	r8,r5
    8e70:	300b883a 	mov	r5,r6
    8e74:	3809883a 	mov	r4,r7
    8e78:	e0c00217 	ldw	r3,8(fp)
    8e7c:	e0800317 	ldw	r2,12(fp)
    8e80:	e23ffb05 	stb	r8,-20(fp)
    8e84:	e17ffc05 	stb	r5,-16(fp)
    8e88:	e13ffd05 	stb	r4,-12(fp)
    8e8c:	e0fffe05 	stb	r3,-8(fp)
    8e90:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8e94:	e0bffa17 	ldw	r2,-24(fp)
    8e98:	12000217 	ldw	r8,8(r2)
    8e9c:	e0bffa17 	ldw	r2,-24(fp)
    8ea0:	10800303 	ldbu	r2,12(r2)
    8ea4:	12403fcc 	andi	r9,r2,255
    8ea8:	e2bffb03 	ldbu	r10,-20(fp)
    8eac:	e0bffe03 	ldbu	r2,-8(fp)
    8eb0:	e0fffd03 	ldbu	r3,-12(fp)
    8eb4:	e13ffc03 	ldbu	r4,-16(fp)
    8eb8:	e17fff0b 	ldhu	r5,-4(fp)
    8ebc:	e1bfff0b 	ldhu	r6,-4(fp)
    8ec0:	d8000715 	stw	zero,28(sp)
    8ec4:	e1c00417 	ldw	r7,16(fp)
    8ec8:	d9c00615 	stw	r7,24(sp)
    8ecc:	d9800515 	stw	r6,20(sp)
    8ed0:	d9400415 	stw	r5,16(sp)
    8ed4:	d9000315 	stw	r4,12(sp)
    8ed8:	d8c00215 	stw	r3,8(sp)
    8edc:	d8800115 	stw	r2,4(sp)
    8ee0:	00800244 	movi	r2,9
    8ee4:	d8800015 	stw	r2,0(sp)
    8ee8:	01c00844 	movi	r7,33
    8eec:	500d883a 	mov	r6,r10
    8ef0:	480b883a 	mov	r5,r9
    8ef4:	4009883a 	mov	r4,r8
    8ef8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8efc:	e037883a 	mov	sp,fp
    8f00:	dfc00117 	ldw	ra,4(sp)
    8f04:	df000017 	ldw	fp,0(sp)
    8f08:	dec00204 	addi	sp,sp,8
    8f0c:	f800283a 	ret

00008f10 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8f10:	defff004 	addi	sp,sp,-64
    8f14:	dfc00f15 	stw	ra,60(sp)
    8f18:	df000e15 	stw	fp,56(sp)
    8f1c:	df000e04 	addi	fp,sp,56
    8f20:	e13ffa15 	stw	r4,-24(fp)
    8f24:	2811883a 	mov	r8,r5
    8f28:	300b883a 	mov	r5,r6
    8f2c:	3809883a 	mov	r4,r7
    8f30:	e0c00217 	ldw	r3,8(fp)
    8f34:	e0800317 	ldw	r2,12(fp)
    8f38:	e23ffb05 	stb	r8,-20(fp)
    8f3c:	e17ffc05 	stb	r5,-16(fp)
    8f40:	e13ffd05 	stb	r4,-12(fp)
    8f44:	e0fffe05 	stb	r3,-8(fp)
    8f48:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8f4c:	e0bffa17 	ldw	r2,-24(fp)
    8f50:	12000217 	ldw	r8,8(r2)
    8f54:	e0bffa17 	ldw	r2,-24(fp)
    8f58:	10800303 	ldbu	r2,12(r2)
    8f5c:	12403fcc 	andi	r9,r2,255
    8f60:	e2bffb03 	ldbu	r10,-20(fp)
    8f64:	e0bffe03 	ldbu	r2,-8(fp)
    8f68:	e0fffd03 	ldbu	r3,-12(fp)
    8f6c:	e13ffc03 	ldbu	r4,-16(fp)
    8f70:	e17fff0b 	ldhu	r5,-4(fp)
    8f74:	e1bfff0b 	ldhu	r6,-4(fp)
    8f78:	d8000715 	stw	zero,28(sp)
    8f7c:	e1c00417 	ldw	r7,16(fp)
    8f80:	d9c00615 	stw	r7,24(sp)
    8f84:	d9800515 	stw	r6,20(sp)
    8f88:	d9400415 	stw	r5,16(sp)
    8f8c:	d9000315 	stw	r4,12(sp)
    8f90:	d8c00215 	stw	r3,8(sp)
    8f94:	d8800115 	stw	r2,4(sp)
    8f98:	00800044 	movi	r2,1
    8f9c:	d8800015 	stw	r2,0(sp)
    8fa0:	01c02844 	movi	r7,161
    8fa4:	500d883a 	mov	r6,r10
    8fa8:	480b883a 	mov	r5,r9
    8fac:	4009883a 	mov	r4,r8
    8fb0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8fb4:	e037883a 	mov	sp,fp
    8fb8:	dfc00117 	ldw	ra,4(sp)
    8fbc:	df000017 	ldw	fp,0(sp)
    8fc0:	dec00204 	addi	sp,sp,8
    8fc4:	f800283a 	ret

00008fc8 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    8fc8:	defff204 	addi	sp,sp,-56
    8fcc:	dfc00d15 	stw	ra,52(sp)
    8fd0:	df000c15 	stw	fp,48(sp)
    8fd4:	df000c04 	addi	fp,sp,48
    8fd8:	e13ffc15 	stw	r4,-16(fp)
    8fdc:	2807883a 	mov	r3,r5
    8fe0:	3005883a 	mov	r2,r6
    8fe4:	e1ffff15 	stw	r7,-4(fp)
    8fe8:	e0fffd05 	stb	r3,-12(fp)
    8fec:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    8ff0:	e0bffc17 	ldw	r2,-16(fp)
    8ff4:	12000217 	ldw	r8,8(r2)
    8ff8:	e0bffc17 	ldw	r2,-16(fp)
    8ffc:	10800303 	ldbu	r2,12(r2)
    9000:	11403fcc 	andi	r5,r2,255
    9004:	e0bffe03 	ldbu	r2,-8(fp)
    9008:	e0fffd03 	ldbu	r3,-12(fp)
    900c:	d8000715 	stw	zero,28(sp)
    9010:	e13fff17 	ldw	r4,-4(fp)
    9014:	d9000615 	stw	r4,24(sp)
    9018:	01000044 	movi	r4,1
    901c:	d9000515 	stw	r4,20(sp)
    9020:	01000044 	movi	r4,1
    9024:	d9000415 	stw	r4,16(sp)
    9028:	d8c00315 	stw	r3,12(sp)
    902c:	d8000215 	stw	zero,8(sp)
    9030:	d8800115 	stw	r2,4(sp)
    9034:	00800084 	movi	r2,2
    9038:	d8800015 	stw	r2,0(sp)
    903c:	01c02844 	movi	r7,161
    9040:	000d883a 	mov	r6,zero
    9044:	4009883a 	mov	r4,r8
    9048:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    904c:	e037883a 	mov	sp,fp
    9050:	dfc00117 	ldw	ra,4(sp)
    9054:	df000017 	ldw	fp,0(sp)
    9058:	dec00204 	addi	sp,sp,8
    905c:	f800283a 	ret

00009060 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9060:	defff204 	addi	sp,sp,-56
    9064:	dfc00d15 	stw	ra,52(sp)
    9068:	df000c15 	stw	fp,48(sp)
    906c:	df000c04 	addi	fp,sp,48
    9070:	e13ffc15 	stw	r4,-16(fp)
    9074:	2809883a 	mov	r4,r5
    9078:	3007883a 	mov	r3,r6
    907c:	3805883a 	mov	r2,r7
    9080:	e13ffd05 	stb	r4,-12(fp)
    9084:	e0fffe05 	stb	r3,-8(fp)
    9088:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    908c:	e0bffc17 	ldw	r2,-16(fp)
    9090:	12000217 	ldw	r8,8(r2)
    9094:	e0bffc17 	ldw	r2,-16(fp)
    9098:	10800303 	ldbu	r2,12(r2)
    909c:	11403fcc 	andi	r5,r2,255
    90a0:	e0bffe03 	ldbu	r2,-8(fp)
    90a4:	e0ffff03 	ldbu	r3,-4(fp)
    90a8:	e13ffd03 	ldbu	r4,-12(fp)
    90ac:	d8000715 	stw	zero,28(sp)
    90b0:	d8000615 	stw	zero,24(sp)
    90b4:	d8000515 	stw	zero,20(sp)
    90b8:	d8000415 	stw	zero,16(sp)
    90bc:	d9000315 	stw	r4,12(sp)
    90c0:	d8c00215 	stw	r3,8(sp)
    90c4:	d8800115 	stw	r2,4(sp)
    90c8:	00800284 	movi	r2,10
    90cc:	d8800015 	stw	r2,0(sp)
    90d0:	01c00844 	movi	r7,33
    90d4:	000d883a 	mov	r6,zero
    90d8:	4009883a 	mov	r4,r8
    90dc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90e0:	e037883a 	mov	sp,fp
    90e4:	dfc00117 	ldw	ra,4(sp)
    90e8:	df000017 	ldw	fp,0(sp)
    90ec:	dec00204 	addi	sp,sp,8
    90f0:	f800283a 	ret

000090f4 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    90f4:	defff304 	addi	sp,sp,-52
    90f8:	dfc00c15 	stw	ra,48(sp)
    90fc:	df000b15 	stw	fp,44(sp)
    9100:	df000b04 	addi	fp,sp,44
    9104:	e13ffd15 	stw	r4,-12(fp)
    9108:	2807883a 	mov	r3,r5
    910c:	3005883a 	mov	r2,r6
    9110:	e0fffe05 	stb	r3,-8(fp)
    9114:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    9118:	e0bffd17 	ldw	r2,-12(fp)
    911c:	11000217 	ldw	r4,8(r2)
    9120:	e0bffd17 	ldw	r2,-12(fp)
    9124:	10800303 	ldbu	r2,12(r2)
    9128:	11403fcc 	andi	r5,r2,255
    912c:	e0bfff03 	ldbu	r2,-4(fp)
    9130:	e0fffe03 	ldbu	r3,-8(fp)
    9134:	d8000715 	stw	zero,28(sp)
    9138:	d8000615 	stw	zero,24(sp)
    913c:	d8000515 	stw	zero,20(sp)
    9140:	d8000415 	stw	zero,16(sp)
    9144:	d8c00315 	stw	r3,12(sp)
    9148:	d8000215 	stw	zero,8(sp)
    914c:	d8800115 	stw	r2,4(sp)
    9150:	008002c4 	movi	r2,11
    9154:	d8800015 	stw	r2,0(sp)
    9158:	01c00844 	movi	r7,33
    915c:	000d883a 	mov	r6,zero
    9160:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9164:	e037883a 	mov	sp,fp
    9168:	dfc00117 	ldw	ra,4(sp)
    916c:	df000017 	ldw	fp,0(sp)
    9170:	dec00204 	addi	sp,sp,8
    9174:	f800283a 	ret

00009178 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9178:	defff304 	addi	sp,sp,-52
    917c:	dfc00c15 	stw	ra,48(sp)
    9180:	df000b15 	stw	fp,44(sp)
    9184:	df000b04 	addi	fp,sp,44
    9188:	e13ffd15 	stw	r4,-12(fp)
    918c:	2805883a 	mov	r2,r5
    9190:	e1bfff15 	stw	r6,-4(fp)
    9194:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9198:	e0bffd17 	ldw	r2,-12(fp)
    919c:	11000217 	ldw	r4,8(r2)
    91a0:	e0bffd17 	ldw	r2,-12(fp)
    91a4:	10800303 	ldbu	r2,12(r2)
    91a8:	11403fcc 	andi	r5,r2,255
    91ac:	e0bffe03 	ldbu	r2,-8(fp)
    91b0:	d8000715 	stw	zero,28(sp)
    91b4:	e0ffff17 	ldw	r3,-4(fp)
    91b8:	d8c00615 	stw	r3,24(sp)
    91bc:	00c00044 	movi	r3,1
    91c0:	d8c00515 	stw	r3,20(sp)
    91c4:	00c00044 	movi	r3,1
    91c8:	d8c00415 	stw	r3,16(sp)
    91cc:	d8800315 	stw	r2,12(sp)
    91d0:	d8000215 	stw	zero,8(sp)
    91d4:	d8000115 	stw	zero,4(sp)
    91d8:	008000c4 	movi	r2,3
    91dc:	d8800015 	stw	r2,0(sp)
    91e0:	01c02844 	movi	r7,161
    91e4:	000d883a 	mov	r6,zero
    91e8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    91ec:	e037883a 	mov	sp,fp
    91f0:	dfc00117 	ldw	ra,4(sp)
    91f4:	df000017 	ldw	fp,0(sp)
    91f8:	dec00204 	addi	sp,sp,8
    91fc:	f800283a 	ret

00009200 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    9200:	defffc04 	addi	sp,sp,-16
    9204:	dfc00315 	stw	ra,12(sp)
    9208:	df000215 	stw	fp,8(sp)
    920c:	df000204 	addi	fp,sp,8
    9210:	e13ffe15 	stw	r4,-8(fp)
    9214:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    9218:	e0bfff17 	ldw	r2,-4(fp)
    921c:	10800003 	ldbu	r2,0(r2)
    9220:	10803fcc 	andi	r2,r2,255
    9224:	01402004 	movi	r5,128
    9228:	1009883a 	mov	r4,r2
    922c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    9230:	e0bfff17 	ldw	r2,-4(fp)
    9234:	10800043 	ldbu	r2,1(r2)
    9238:	10803fcc 	andi	r2,r2,255
    923c:	01402004 	movi	r5,128
    9240:	1009883a 	mov	r4,r2
    9244:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    9248:	e0bfff17 	ldw	r2,-4(fp)
    924c:	10800083 	ldbu	r2,2(r2)
    9250:	10803fcc 	andi	r2,r2,255
    9254:	01402004 	movi	r5,128
    9258:	1009883a 	mov	r4,r2
    925c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9260:	e0bfff17 	ldw	r2,-4(fp)
    9264:	108000c3 	ldbu	r2,3(r2)
    9268:	10803fcc 	andi	r2,r2,255
    926c:	01402004 	movi	r5,128
    9270:	1009883a 	mov	r4,r2
    9274:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9278:	e0bfff17 	ldw	r2,-4(fp)
    927c:	10c00103 	ldbu	r3,4(r2)
    9280:	10800143 	ldbu	r2,5(r2)
    9284:	1004923a 	slli	r2,r2,8
    9288:	10c4b03a 	or	r2,r2,r3
    928c:	10bfffcc 	andi	r2,r2,65535
    9290:	01402004 	movi	r5,128
    9294:	1009883a 	mov	r4,r2
    9298:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    929c:	e0bfff17 	ldw	r2,-4(fp)
    92a0:	10800183 	ldbu	r2,6(r2)
    92a4:	10803fcc 	andi	r2,r2,255
    92a8:	01402004 	movi	r5,128
    92ac:	1009883a 	mov	r4,r2
    92b0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
}
    92b4:	0001883a 	nop
    92b8:	e037883a 	mov	sp,fp
    92bc:	dfc00117 	ldw	ra,4(sp)
    92c0:	df000017 	ldw	fp,0(sp)
    92c4:	dec00204 	addi	sp,sp,8
    92c8:	f800283a 	ret

000092cc <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    92cc:	defffc04 	addi	sp,sp,-16
    92d0:	dfc00315 	stw	ra,12(sp)
    92d4:	df000215 	stw	fp,8(sp)
    92d8:	df000204 	addi	fp,sp,8
    92dc:	e13ffe15 	stw	r4,-8(fp)
    92e0:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    92e4:	e0bfff17 	ldw	r2,-4(fp)
    92e8:	10800003 	ldbu	r2,0(r2)
    92ec:	10803fcc 	andi	r2,r2,255
    92f0:	01402004 	movi	r5,128
    92f4:	1009883a 	mov	r4,r2
    92f8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    92fc:	e0bfff17 	ldw	r2,-4(fp)
    9300:	10800043 	ldbu	r2,1(r2)
    9304:	10803fcc 	andi	r2,r2,255
    9308:	01402004 	movi	r5,128
    930c:	1009883a 	mov	r4,r2
    9310:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    9314:	e0bfff17 	ldw	r2,-4(fp)
    9318:	10c00083 	ldbu	r3,2(r2)
    931c:	108000c3 	ldbu	r2,3(r2)
    9320:	1004923a 	slli	r2,r2,8
    9324:	10c4b03a 	or	r2,r2,r3
    9328:	10bfffcc 	andi	r2,r2,65535
    932c:	01402004 	movi	r5,128
    9330:	1009883a 	mov	r4,r2
    9334:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    9338:	e0bfff17 	ldw	r2,-4(fp)
    933c:	10800103 	ldbu	r2,4(r2)
    9340:	10803fcc 	andi	r2,r2,255
    9344:	01402004 	movi	r5,128
    9348:	1009883a 	mov	r4,r2
    934c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    9350:	e0bfff17 	ldw	r2,-4(fp)
    9354:	10800143 	ldbu	r2,5(r2)
    9358:	10803fcc 	andi	r2,r2,255
    935c:	01402004 	movi	r5,128
    9360:	1009883a 	mov	r4,r2
    9364:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9368:	e0bfff17 	ldw	r2,-4(fp)
    936c:	10800183 	ldbu	r2,6(r2)
    9370:	10803fcc 	andi	r2,r2,255
    9374:	01402004 	movi	r5,128
    9378:	1009883a 	mov	r4,r2
    937c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9380:	e0bfff17 	ldw	r2,-4(fp)
    9384:	10c001c3 	ldbu	r3,7(r2)
    9388:	10800203 	ldbu	r2,8(r2)
    938c:	1004923a 	slli	r2,r2,8
    9390:	10c4b03a 	or	r2,r2,r3
    9394:	10bfffcc 	andi	r2,r2,65535
    9398:	01402004 	movi	r5,128
    939c:	1009883a 	mov	r4,r2
    93a0:	0008d8c0 	call	8d8c <_Z10D_PrintHexItEvT_i>
}
    93a4:	0001883a 	nop
    93a8:	e037883a 	mov	sp,fp
    93ac:	dfc00117 	ldw	ra,4(sp)
    93b0:	df000017 	ldw	fp,0(sp)
    93b4:	dec00204 	addi	sp,sp,8
    93b8:	f800283a 	ret

000093bc <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    93bc:	defffd04 	addi	sp,sp,-12
    93c0:	dfc00215 	stw	ra,8(sp)
    93c4:	df000115 	stw	fp,4(sp)
    93c8:	df000104 	addi	fp,sp,4
    93cc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    93d0:	010000f4 	movhi	r4,3
    93d4:	2120e904 	addi	r4,r4,-31836
    93d8:	000f0740 	call	f074 <puts>
	vbusState = 0;
    93dc:	d0323b45 	stb	zero,-14099(gp)
};
    93e0:	0001883a 	nop
    93e4:	e037883a 	mov	sp,fp
    93e8:	dfc00117 	ldw	ra,4(sp)
    93ec:	df000017 	ldw	fp,0(sp)
    93f0:	dec00204 	addi	sp,sp,8
    93f4:	f800283a 	ret

000093f8 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    93f8:	defffe04 	addi	sp,sp,-8
    93fc:	df000115 	stw	fp,4(sp)
    9400:	df000104 	addi	fp,sp,4
    9404:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    9408:	d0b23b43 	ldbu	r2,-14099(gp)
};
    940c:	e037883a 	mov	sp,fp
    9410:	df000017 	ldw	fp,0(sp)
    9414:	dec00104 	addi	sp,sp,4
    9418:	f800283a 	ret

0000941c <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    941c:	defff704 	addi	sp,sp,-36
    9420:	dfc00815 	stw	ra,32(sp)
    9424:	df000715 	stw	fp,28(sp)
    9428:	df000704 	addi	fp,sp,28
    942c:	e13ffd15 	stw	r4,-12(fp)
    9430:	2807883a 	mov	r3,r5
    9434:	3005883a 	mov	r2,r6
    9438:	e0fffe05 	stb	r3,-8(fp)
    943c:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    9440:	e03ffc45 	stb	zero,-15(fp)
    9444:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9448:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    944c:	e0bffe03 	ldbu	r2,-8(fp)
    9450:	10800084 	addi	r2,r2,2
    9454:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    9458:	e0bfff03 	ldbu	r2,-4(fp)
    945c:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9460:	e0fffc44 	addi	r3,fp,-15
    9464:	d8000215 	stw	zero,8(sp)
    9468:	e0bffcc4 	addi	r2,fp,-13
    946c:	d8800115 	stw	r2,4(sp)
    9470:	d8000015 	stw	zero,0(sp)
    9474:	180f883a 	mov	r7,r3
    9478:	01800084 	movi	r6,2
    947c:	000b883a 	mov	r5,zero
    9480:	01010034 	movhi	r4,1024
    9484:	21044804 	addi	r4,r4,4384
    9488:	00222c80 	call	222c8 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    948c:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9490:	0001883a 	nop
    9494:	e037883a 	mov	sp,fp
    9498:	dfc00117 	ldw	ra,4(sp)
    949c:	df000017 	ldw	fp,0(sp)
    94a0:	dec00204 	addi	sp,sp,8
    94a4:	f800283a 	ret

000094a8 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    94a8:	defff304 	addi	sp,sp,-52
    94ac:	dfc00c15 	stw	ra,48(sp)
    94b0:	df000b15 	stw	fp,44(sp)
    94b4:	dc000a15 	stw	r16,40(sp)
    94b8:	df000b04 	addi	fp,sp,44
    94bc:	e13ffb15 	stw	r4,-20(fp)
    94c0:	3009883a 	mov	r4,r6
    94c4:	e1fffe15 	stw	r7,-8(fp)
    94c8:	e17ffc05 	stb	r5,-16(fp)
    94cc:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    94d0:	d809883a 	mov	r4,sp
    94d4:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    94d8:	e13ffd03 	ldbu	r4,-12(fp)
    94dc:	e13ff815 	stw	r4,-32(fp)
    94e0:	200b883a 	mov	r5,r4
    94e4:	29400044 	addi	r5,r5,1
    94e8:	2819883a 	mov	r12,r5
    94ec:	001b883a 	mov	r13,zero
    94f0:	600ad77a 	srli	r5,r12,29
    94f4:	681290fa 	slli	r9,r13,3
    94f8:	2a52b03a 	or	r9,r5,r9
    94fc:	601090fa 	slli	r8,r12,3
    9500:	200b883a 	mov	r5,r4
    9504:	29400044 	addi	r5,r5,1
    9508:	2815883a 	mov	r10,r5
    950c:	0017883a 	mov	r11,zero
    9510:	500ad77a 	srli	r5,r10,29
    9514:	580690fa 	slli	r3,r11,3
    9518:	28c6b03a 	or	r3,r5,r3
    951c:	500490fa 	slli	r2,r10,3
    9520:	2005883a 	mov	r2,r4
    9524:	10800044 	addi	r2,r2,1
    9528:	108000c4 	addi	r2,r2,3
    952c:	1004d0ba 	srli	r2,r2,2
    9530:	1085883a 	add	r2,r2,r2
    9534:	1085883a 	add	r2,r2,r2
    9538:	d8b7c83a 	sub	sp,sp,r2
    953c:	d8800304 	addi	r2,sp,12
    9540:	1005883a 	mov	r2,r2
    9544:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9548:	e0bffc03 	ldbu	r2,-16(fp)
    954c:	10800084 	addi	r2,r2,2
    9550:	1007883a 	mov	r3,r2
    9554:	e0bff917 	ldw	r2,-28(fp)
    9558:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    955c:	e0bff917 	ldw	r2,-28(fp)
    9560:	10800044 	addi	r2,r2,1
    9564:	e0fffd03 	ldbu	r3,-12(fp)
    9568:	180d883a 	mov	r6,r3
    956c:	e17ffe17 	ldw	r5,-8(fp)
    9570:	1009883a 	mov	r4,r2
    9574:	000ecb80 	call	ecb8 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9578:	e0bffd03 	ldbu	r2,-12(fp)
    957c:	10800044 	addi	r2,r2,1
    9580:	1009883a 	mov	r4,r2
    9584:	e0fff917 	ldw	r3,-28(fp)
    9588:	d8000215 	stw	zero,8(sp)
    958c:	e0bffa44 	addi	r2,fp,-23
    9590:	d8800115 	stw	r2,4(sp)
    9594:	d8000015 	stw	zero,0(sp)
    9598:	180f883a 	mov	r7,r3
    959c:	200d883a 	mov	r6,r4
    95a0:	000b883a 	mov	r5,zero
    95a4:	01010034 	movhi	r4,1024
    95a8:	21044804 	addi	r4,r4,4384
    95ac:	00222c80 	call	222c8 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    95b0:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    95b4:	e0bffd03 	ldbu	r2,-12(fp)
    95b8:	e0fffe17 	ldw	r3,-8(fp)
    95bc:	1885883a 	add	r2,r3,r2
    95c0:	8037883a 	mov	sp,r16
}
    95c4:	e6ffff04 	addi	sp,fp,-4
    95c8:	dfc00217 	ldw	ra,8(sp)
    95cc:	df000117 	ldw	fp,4(sp)
    95d0:	dc000017 	ldw	r16,0(sp)
    95d4:	dec00304 	addi	sp,sp,12
    95d8:	f800283a 	ret

000095dc <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    95dc:	defffc04 	addi	sp,sp,-16
    95e0:	dfc00315 	stw	ra,12(sp)
    95e4:	df000215 	stw	fp,8(sp)
    95e8:	df000204 	addi	fp,sp,8
    95ec:	e13ffe15 	stw	r4,-8(fp)
    95f0:	2805883a 	mov	r2,r5
    95f4:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    95f8:	010000f4 	movhi	r4,3
    95fc:	2120ef04 	addi	r4,r4,-31812
    9600:	000f0740 	call	f074 <puts>
	regWr(rIOPINS1, data);
    9604:	e0bfff03 	ldbu	r2,-4(fp)
    9608:	100d883a 	mov	r6,r2
    960c:	01402804 	movi	r5,160
    9610:	e13ffe17 	ldw	r4,-8(fp)
    9614:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9618:	e0bfff03 	ldbu	r2,-4(fp)
    961c:	1005d13a 	srai	r2,r2,4
    9620:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    9624:	e0bfff03 	ldbu	r2,-4(fp)
    9628:	100d883a 	mov	r6,r2
    962c:	01402a04 	movi	r5,168
    9630:	e13ffe17 	ldw	r4,-8(fp)
    9634:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	return;
    9638:	0001883a 	nop
}
    963c:	e037883a 	mov	sp,fp
    9640:	dfc00117 	ldw	ra,4(sp)
    9644:	df000017 	ldw	fp,0(sp)
    9648:	dec00204 	addi	sp,sp,8
    964c:	f800283a 	ret

00009650 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9650:	defff804 	addi	sp,sp,-32
    9654:	dfc00715 	stw	ra,28(sp)
    9658:	df000615 	stw	fp,24(sp)
    965c:	df000604 	addi	fp,sp,24
    9660:	e13ffe15 	stw	r4,-8(fp)
    9664:	2805883a 	mov	r2,r5
    9668:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    966c:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9670:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9674:	e0bfff03 	ldbu	r2,-4(fp)
    9678:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    967c:	e0fffd44 	addi	r3,fp,-11
    9680:	d8000215 	stw	zero,8(sp)
    9684:	e0bffd84 	addi	r2,fp,-10
    9688:	d8800115 	stw	r2,4(sp)
    968c:	00800044 	movi	r2,1
    9690:	d8800015 	stw	r2,0(sp)
    9694:	180f883a 	mov	r7,r3
    9698:	01800044 	movi	r6,1
    969c:	000b883a 	mov	r5,zero
    96a0:	01010034 	movhi	r4,1024
    96a4:	21044804 	addi	r4,r4,4384
    96a8:	00222c80 	call	222c8 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    96ac:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    96b0:	e0bffd83 	ldbu	r2,-10(fp)
}
    96b4:	e037883a 	mov	sp,fp
    96b8:	dfc00117 	ldw	ra,4(sp)
    96bc:	df000017 	ldw	fp,0(sp)
    96c0:	dec00204 	addi	sp,sp,8
    96c4:	f800283a 	ret

000096c8 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    96c8:	defff604 	addi	sp,sp,-40
    96cc:	dfc00915 	stw	ra,36(sp)
    96d0:	df000815 	stw	fp,32(sp)
    96d4:	df000804 	addi	fp,sp,32
    96d8:	e13ffc15 	stw	r4,-16(fp)
    96dc:	2807883a 	mov	r3,r5
    96e0:	3005883a 	mov	r2,r6
    96e4:	e1ffff15 	stw	r7,-4(fp)
    96e8:	e0fffd05 	stb	r3,-12(fp)
    96ec:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    96f0:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    96f4:	e0bffd03 	ldbu	r2,-12(fp)
    96f8:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    96fc:	e0bffe03 	ldbu	r2,-8(fp)
    9700:	e13ffb44 	addi	r4,fp,-19
    9704:	d8000215 	stw	zero,8(sp)
    9708:	e0ffff17 	ldw	r3,-4(fp)
    970c:	d8c00115 	stw	r3,4(sp)
    9710:	d8800015 	stw	r2,0(sp)
    9714:	200f883a 	mov	r7,r4
    9718:	01800044 	movi	r6,1
    971c:	000b883a 	mov	r5,zero
    9720:	01010034 	movhi	r4,1024
    9724:	21044804 	addi	r4,r4,4384
    9728:	00222c80 	call	222c8 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    972c:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9730:	e0bffe03 	ldbu	r2,-8(fp)
    9734:	e0ffff17 	ldw	r3,-4(fp)
    9738:	1885883a 	add	r2,r3,r2
}
    973c:	e037883a 	mov	sp,fp
    9740:	dfc00117 	ldw	ra,4(sp)
    9744:	df000017 	ldw	fp,0(sp)
    9748:	dec00204 	addi	sp,sp,8
    974c:	f800283a 	ret

00009750 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9750:	defffc04 	addi	sp,sp,-16
    9754:	dfc00315 	stw	ra,12(sp)
    9758:	df000215 	stw	fp,8(sp)
    975c:	df000204 	addi	fp,sp,8
    9760:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9764:	010000f4 	movhi	r4,3
    9768:	2120f304 	addi	r4,r4,-31796
    976c:	000f0740 	call	f074 <puts>
	uint8_t gpin = 0;
    9770:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9774:	01402a04 	movi	r5,168
    9778:	e13fff17 	ldw	r4,-4(fp)
    977c:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9780:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9784:	e0fffe03 	ldbu	r3,-8(fp)
    9788:	00bffc04 	movi	r2,-16
    978c:	1884703a 	and	r2,r3,r2
    9790:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9794:	01402804 	movi	r5,160
    9798:	e13fff17 	ldw	r4,-4(fp)
    979c:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    97a0:	10803fcc 	andi	r2,r2,255
    97a4:	1005d13a 	srai	r2,r2,4
    97a8:	1007883a 	mov	r3,r2
    97ac:	e0bffe03 	ldbu	r2,-8(fp)
    97b0:	1884b03a 	or	r2,r3,r2
    97b4:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    97b8:	e0bffe03 	ldbu	r2,-8(fp)
}
    97bc:	e037883a 	mov	sp,fp
    97c0:	dfc00117 	ldw	ra,4(sp)
    97c4:	df000017 	ldw	fp,0(sp)
    97c8:	dec00204 	addi	sp,sp,8
    97cc:	f800283a 	ret

000097d0 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    97d0:	defffc04 	addi	sp,sp,-16
    97d4:	dfc00315 	stw	ra,12(sp)
    97d8:	df000215 	stw	fp,8(sp)
    97dc:	df000204 	addi	fp,sp,8
    97e0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    97e4:	010000f4 	movhi	r4,3
    97e8:	2120f704 	addi	r4,r4,-31780
    97ec:	000f0740 	call	f074 <puts>
	uint8_t gpout = 0;
    97f0:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    97f4:	01402804 	movi	r5,160
    97f8:	e13fff17 	ldw	r4,-4(fp)
    97fc:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9800:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9804:	e0bffe03 	ldbu	r2,-8(fp)
    9808:	108003cc 	andi	r2,r2,15
    980c:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9810:	01402a04 	movi	r5,168
    9814:	e13fff17 	ldw	r4,-4(fp)
    9818:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    981c:	10803fcc 	andi	r2,r2,255
    9820:	1004913a 	slli	r2,r2,4
    9824:	1007883a 	mov	r3,r2
    9828:	e0bffe03 	ldbu	r2,-8(fp)
    982c:	1884b03a 	or	r2,r3,r2
    9830:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9834:	e0bffe03 	ldbu	r2,-8(fp)
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    984c:	defffc04 	addi	sp,sp,-16
    9850:	dfc00315 	stw	ra,12(sp)
    9854:	df000215 	stw	fp,8(sp)
    9858:	df000204 	addi	fp,sp,8
    985c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9860:	010000f4 	movhi	r4,3
    9864:	2120fd04 	addi	r4,r4,-31756
    9868:	000f0740 	call	f074 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    986c:	0007883a 	mov	r3,zero
    9870:	00810034 	movhi	r2,1024
    9874:	10847404 	addi	r2,r2,4560
    9878:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    987c:	010003f4 	movhi	r4,15
    9880:	21109004 	addi	r4,r4,16960
    9884:	001f9fc0 	call	1f9fc <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9888:	00c00044 	movi	r3,1
    988c:	00810034 	movhi	r2,1024
    9890:	10847404 	addi	r2,r2,4560
    9894:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9898:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    989c:	01800804 	movi	r6,32
    98a0:	01401e04 	movi	r5,120
    98a4:	e13fff17 	ldw	r4,-4(fp)
    98a8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    98ac:	000d883a 	mov	r6,zero
    98b0:	01401e04 	movi	r5,120
    98b4:	e13fff17 	ldw	r4,-4(fp)
    98b8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    98bc:	e0bffe0b 	ldhu	r2,-8(fp)
    98c0:	10800044 	addi	r2,r2,1
    98c4:	e0bffe0d 	sth	r2,-8(fp)
    98c8:	e0bffe0b 	ldhu	r2,-8(fp)
    98cc:	1004c03a 	cmpne	r2,r2,zero
    98d0:	10803fcc 	andi	r2,r2,255
    98d4:	10000a26 	beq	r2,zero,9900 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    98d8:	01401a04 	movi	r5,104
    98dc:	e13fff17 	ldw	r4,-4(fp)
    98e0:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    98e4:	10803fcc 	andi	r2,r2,255
    98e8:	1080004c 	andi	r2,r2,1
    98ec:	1004c03a 	cmpne	r2,r2,zero
    98f0:	10803fcc 	andi	r2,r2,255
    98f4:	1000011e 	bne	r2,zero,98fc <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    98f8:	003ff006 	br	98bc <__alt_data_end+0xfc0098bc>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    98fc:	0001883a 	nop
		}
	}
	return ( i);
    9900:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9904:	e037883a 	mov	sp,fp
    9908:	dfc00117 	ldw	ra,4(sp)
    990c:	df000017 	ldw	fp,0(sp)
    9910:	dec00204 	addi	sp,sp,8
    9914:	f800283a 	ret

00009918 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9918:	defffe04 	addi	sp,sp,-8
    991c:	df000115 	stw	fp,4(sp)
    9920:	df000104 	addi	fp,sp,4
    9924:	2005883a 	mov	r2,r4
    9928:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    992c:	00800044 	movi	r2,1
}
    9930:	e037883a 	mov	sp,fp
    9934:	df000017 	ldw	fp,0(sp)
    9938:	dec00104 	addi	sp,sp,4
    993c:	f800283a 	ret

00009940 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9940:	defffd04 	addi	sp,sp,-12
    9944:	dfc00215 	stw	ra,8(sp)
    9948:	df000115 	stw	fp,4(sp)
    994c:	df000104 	addi	fp,sp,4
    9950:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9954:	010000f4 	movhi	r4,3
    9958:	21210104 	addi	r4,r4,-31740
    995c:	000f0740 	call	f074 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9960:	01800604 	movi	r6,24
    9964:	01402204 	movi	r5,136
    9968:	e13fff17 	ldw	r4,-4(fp)
    996c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9970:	e13fff17 	ldw	r4,-4(fp)
    9974:	000984c0 	call	984c <_ZN8MAX3421e5resetEv>
    9978:	10bfffcc 	andi	r2,r2,65535
    997c:	1005003a 	cmpeq	r2,r2,zero
    9980:	10803fcc 	andi	r2,r2,255
    9984:	10000226 	beq	r2,zero,9990 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9988:	00bfffc4 	movi	r2,-1
    998c:	00002006 	br	9a10 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9990:	01803044 	movi	r6,193
    9994:	01403604 	movi	r5,216
    9998:	e13fff17 	ldw	r4,-4(fp)
    999c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    99a0:	01801804 	movi	r6,96
    99a4:	01403404 	movi	r5,208
    99a8:	e13fff17 	ldw	r4,-4(fp)
    99ac:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    99b0:	01800104 	movi	r6,4
    99b4:	01403a04 	movi	r5,232
    99b8:	e13fff17 	ldw	r4,-4(fp)
    99bc:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    99c0:	01403a04 	movi	r5,232
    99c4:	e13fff17 	ldw	r4,-4(fp)
    99c8:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    99cc:	10803fcc 	andi	r2,r2,255
    99d0:	1080010c 	andi	r2,r2,4
    99d4:	1005003a 	cmpeq	r2,r2,zero
    99d8:	10803fcc 	andi	r2,r2,255
    99dc:	10000126 	beq	r2,zero,99e4 <_ZN8MAX3421e4InitEv+0xa4>
    99e0:	003ff706 	br	99c0 <__alt_data_end+0xfc0099c0>

	busprobe(); //check if anything is connected
    99e4:	e13fff17 	ldw	r4,-4(fp)
    99e8:	0009b3c0 	call	9b3c <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    99ec:	01800804 	movi	r6,32
    99f0:	01403204 	movi	r5,200
    99f4:	e13fff17 	ldw	r4,-4(fp)
    99f8:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    99fc:	01800044 	movi	r6,1
    9a00:	01402004 	movi	r5,128
    9a04:	e13fff17 	ldw	r4,-4(fp)
    9a08:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9a0c:	0005883a 	mov	r2,zero
}
    9a10:	e037883a 	mov	sp,fp
    9a14:	dfc00117 	ldw	ra,4(sp)
    9a18:	df000017 	ldw	fp,0(sp)
    9a1c:	dec00204 	addi	sp,sp,8
    9a20:	f800283a 	ret

00009a24 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9a24:	defffc04 	addi	sp,sp,-16
    9a28:	dfc00315 	stw	ra,12(sp)
    9a2c:	df000215 	stw	fp,8(sp)
    9a30:	df000204 	addi	fp,sp,8
    9a34:	e13ffe15 	stw	r4,-8(fp)
    9a38:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9a3c:	010000f4 	movhi	r4,3
    9a40:	21210504 	addi	r4,r4,-31724
    9a44:	000f0740 	call	f074 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9a48:	01800644 	movi	r6,25
    9a4c:	01402204 	movi	r5,136
    9a50:	e13ffe17 	ldw	r4,-8(fp)
    9a54:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9a58:	e13ffe17 	ldw	r4,-8(fp)
    9a5c:	000984c0 	call	984c <_ZN8MAX3421e5resetEv>
    9a60:	10bfffcc 	andi	r2,r2,65535
    9a64:	1005003a 	cmpeq	r2,r2,zero
    9a68:	10803fcc 	andi	r2,r2,255
    9a6c:	10000226 	beq	r2,zero,9a78 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9a70:	00bfffc4 	movi	r2,-1
    9a74:	00002c06 	br	9b28 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9a78:	e0bfff17 	ldw	r2,-4(fp)
    9a7c:	1080fa08 	cmpgei	r2,r2,1000
    9a80:	1000021e 	bne	r2,zero,9a8c <_ZN8MAX3421e4InitEi+0x68>
    9a84:	0080fa04 	movi	r2,1000
    9a88:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9a8c:	e0bfff17 	ldw	r2,-4(fp)
    9a90:	1009883a 	mov	r4,r2
    9a94:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a98:	01803044 	movi	r6,193
    9a9c:	01403604 	movi	r5,216
    9aa0:	e13ffe17 	ldw	r4,-8(fp)
    9aa4:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9aa8:	01801804 	movi	r6,96
    9aac:	01403404 	movi	r5,208
    9ab0:	e13ffe17 	ldw	r4,-8(fp)
    9ab4:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9ab8:	01800104 	movi	r6,4
    9abc:	01403a04 	movi	r5,232
    9ac0:	e13ffe17 	ldw	r4,-8(fp)
    9ac4:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9ac8:	01403a04 	movi	r5,232
    9acc:	e13ffe17 	ldw	r4,-8(fp)
    9ad0:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	1080010c 	andi	r2,r2,4
    9adc:	1005003a 	cmpeq	r2,r2,zero
    9ae0:	10803fcc 	andi	r2,r2,255
    9ae4:	10000126 	beq	r2,zero,9aec <_ZN8MAX3421e4InitEi+0xc8>
    9ae8:	003ff706 	br	9ac8 <__alt_data_end+0xfc009ac8>

	busprobe(); //check if anything is connected
    9aec:	e13ffe17 	ldw	r4,-8(fp)
    9af0:	0009b3c0 	call	9b3c <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9af4:	01800804 	movi	r6,32
    9af8:	01403204 	movi	r5,200
    9afc:	e13ffe17 	ldw	r4,-8(fp)
    9b00:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9b04:	01800044 	movi	r6,1
    9b08:	01402004 	movi	r5,128
    9b0c:	e13ffe17 	ldw	r4,-8(fp)
    9b10:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9b14:	01800604 	movi	r6,24
    9b18:	01402204 	movi	r5,136
    9b1c:	e13ffe17 	ldw	r4,-8(fp)
    9b20:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9b24:	0005883a 	mov	r2,zero
}
    9b28:	e037883a 	mov	sp,fp
    9b2c:	dfc00117 	ldw	ra,4(sp)
    9b30:	df000017 	ldw	fp,0(sp)
    9b34:	dec00204 	addi	sp,sp,8
    9b38:	f800283a 	ret

00009b3c <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9b3c:	defffc04 	addi	sp,sp,-16
    9b40:	dfc00315 	stw	ra,12(sp)
    9b44:	df000215 	stw	fp,8(sp)
    9b48:	df000204 	addi	fp,sp,8
    9b4c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9b50:	010000f4 	movhi	r4,3
    9b54:	21210b04 	addi	r4,r4,-31700
    9b58:	000f0740 	call	f074 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9b5c:	01403e04 	movi	r5,248
    9b60:	e13fff17 	ldw	r4,-4(fp)
    9b64:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9b68:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9b6c:	e0fffe03 	ldbu	r3,-8(fp)
    9b70:	00bff004 	movi	r2,-64
    9b74:	1884703a 	and	r2,r3,r2
    9b78:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9b7c:	e0bffe03 	ldbu	r2,-8(fp)
    9b80:	10c01020 	cmpeqi	r3,r2,64
    9b84:	1800251e 	bne	r3,zero,9c1c <_ZN8MAX3421e8busprobeEv+0xe0>
    9b88:	10c01048 	cmpgei	r3,r2,65
    9b8c:	1800021e 	bne	r3,zero,9b98 <_ZN8MAX3421e8busprobeEv+0x5c>
    9b90:	10003b26 	beq	r2,zero,9c80 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9b94:	00004006 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9b98:	10c02020 	cmpeqi	r3,r2,128
    9b9c:	1800031e 	bne	r3,zero,9bac <_ZN8MAX3421e8busprobeEv+0x70>
    9ba0:	10803020 	cmpeqi	r2,r2,192
    9ba4:	1000331e 	bne	r2,zero,9c74 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9ba8:	00003b06 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9bac:	01403604 	movi	r5,216
    9bb0:	e13fff17 	ldw	r4,-4(fp)
    9bb4:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9bb8:	10803fcc 	andi	r2,r2,255
    9bbc:	1080008c 	andi	r2,r2,2
    9bc0:	1005003a 	cmpeq	r2,r2,zero
    9bc4:	10803fcc 	andi	r2,r2,255
    9bc8:	10000a26 	beq	r2,zero,9bf4 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9bcc:	010000f4 	movhi	r4,3
    9bd0:	21211004 	addi	r4,r4,-31680
    9bd4:	000f0740 	call	f074 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9bd8:	01803244 	movi	r6,201
    9bdc:	01403604 	movi	r5,216
    9be0:	e13fff17 	ldw	r4,-4(fp)
    9be4:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9be8:	00800084 	movi	r2,2
    9bec:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9bf0:	00002906 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9bf4:	010000f4 	movhi	r4,3
    9bf8:	21211704 	addi	r4,r4,-31652
    9bfc:	000f0740 	call	f074 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9c00:	018032c4 	movi	r6,203
    9c04:	01403604 	movi	r5,216
    9c08:	e13fff17 	ldw	r4,-4(fp)
    9c0c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9c10:	008000c4 	movi	r2,3
    9c14:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9c18:	00001f06 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c1c:	01403604 	movi	r5,216
    9c20:	e13fff17 	ldw	r4,-4(fp)
    9c24:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9c28:	10803fcc 	andi	r2,r2,255
    9c2c:	1080008c 	andi	r2,r2,2
    9c30:	1005003a 	cmpeq	r2,r2,zero
    9c34:	10803fcc 	andi	r2,r2,255
    9c38:	10000726 	beq	r2,zero,9c58 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9c3c:	018032c4 	movi	r6,203
    9c40:	01403604 	movi	r5,216
    9c44:	e13fff17 	ldw	r4,-4(fp)
    9c48:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9c4c:	008000c4 	movi	r2,3
    9c50:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9c54:	00001006 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c58:	01803244 	movi	r6,201
    9c5c:	01403604 	movi	r5,216
    9c60:	e13fff17 	ldw	r4,-4(fp)
    9c64:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9c68:	00800084 	movi	r2,2
    9c6c:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9c70:	00000906 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9c74:	00800044 	movi	r2,1
    9c78:	d0b23b45 	stb	r2,-14099(gp)
			break;
    9c7c:	00000606 	br	9c98 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9c80:	01803444 	movi	r6,209
    9c84:	01403604 	movi	r5,216
    9c88:	e13fff17 	ldw	r4,-4(fp)
    9c8c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9c90:	d0323b45 	stb	zero,-14099(gp)
			break;
    9c94:	0001883a 	nop
	}//end switch( bus_sample )
}
    9c98:	0001883a 	nop
    9c9c:	e037883a 	mov	sp,fp
    9ca0:	dfc00117 	ldw	ra,4(sp)
    9ca4:	df000017 	ldw	fp,0(sp)
    9ca8:	dec00204 	addi	sp,sp,8
    9cac:	f800283a 	ret

00009cb0 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9cb0:	defffc04 	addi	sp,sp,-16
    9cb4:	dfc00315 	stw	ra,12(sp)
    9cb8:	df000215 	stw	fp,8(sp)
    9cbc:	df000204 	addi	fp,sp,8
    9cc0:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9cc4:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9cc8:	00810034 	movhi	r2,1024
    9ccc:	10847c04 	addi	r2,r2,4592
    9cd0:	10800003 	ldbu	r2,0(r2)
    9cd4:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9cd8:	00810034 	movhi	r2,1024
    9cdc:	10847c04 	addi	r2,r2,4592
    9ce0:	10800037 	ldwio	r2,0(r2)
    9ce4:	1005003a 	cmpeq	r2,r2,zero
    9ce8:	10803fcc 	andi	r2,r2,255
    9cec:	10000326 	beq	r2,zero,9cfc <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9cf0:	e13fff17 	ldw	r4,-4(fp)
    9cf4:	0009d140 	call	9d14 <_ZN8MAX3421e10IntHandlerEv>
    9cf8:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9cfc:	e0bffe03 	ldbu	r2,-8(fp)
}
    9d00:	e037883a 	mov	sp,fp
    9d04:	dfc00117 	ldw	ra,4(sp)
    9d08:	df000017 	ldw	fp,0(sp)
    9d0c:	dec00204 	addi	sp,sp,8
    9d10:	f800283a 	ret

00009d14 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9d14:	defffc04 	addi	sp,sp,-16
    9d18:	dfc00315 	stw	ra,12(sp)
    9d1c:	df000215 	stw	fp,8(sp)
    9d20:	df000204 	addi	fp,sp,8
    9d24:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9d28:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9d2c:	01403204 	movi	r5,200
    9d30:	e13fff17 	ldw	r4,-4(fp)
    9d34:	00096500 	call	9650 <_ZN8MAX3421e5regRdEh>
    9d38:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9d3c:	e0bffe43 	ldbu	r2,-7(fp)
    9d40:	1080080c 	andi	r2,r2,32
    9d44:	10000526 	beq	r2,zero,9d5c <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9d48:	e13fff17 	ldw	r4,-4(fp)
    9d4c:	0009b3c0 	call	9b3c <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9d50:	e0bffe03 	ldbu	r2,-8(fp)
    9d54:	10800814 	ori	r2,r2,32
    9d58:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9d5c:	e0bffe03 	ldbu	r2,-8(fp)
    9d60:	100d883a 	mov	r6,r2
    9d64:	01403204 	movi	r5,200
    9d68:	e13fff17 	ldw	r4,-4(fp)
    9d6c:	000941c0 	call	941c <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9d70:	e0bffe03 	ldbu	r2,-8(fp)
}
    9d74:	e037883a 	mov	sp,fp
    9d78:	dfc00117 	ldw	ra,4(sp)
    9d7c:	df000017 	ldw	fp,0(sp)
    9d80:	dec00204 	addi	sp,sp,8
    9d84:	f800283a 	ret

00009d88 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9d88:	defffe04 	addi	sp,sp,-8
    9d8c:	df000115 	stw	fp,4(sp)
    9d90:	df000104 	addi	fp,sp,4
    9d94:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9d98:	0005883a 	mov	r2,zero
}
    9d9c:	e037883a 	mov	sp,fp
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00104 	addi	sp,sp,4
    9da8:	f800283a 	ret

00009dac <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev;

void MIDI_poll();

void onInit()
{
    9dac:	defff804 	addi	sp,sp,-32
    9db0:	dfc00715 	stw	ra,28(sp)
    9db4:	df000615 	stw	fp,24(sp)
    9db8:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9dbc:	010000f4 	movhi	r4,3
    9dc0:	21044904 	addi	r4,r4,4388
    9dc4:	000a4700 	call	a470 <_ZN9USBH_MIDI8idVendorEv>
    9dc8:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9dcc:	010000f4 	movhi	r4,3
    9dd0:	21044904 	addi	r4,r4,4388
    9dd4:	000a4980 	call	a498 <_ZN9USBH_MIDI9idProductEv>
    9dd8:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9ddc:	e0fffa0b 	ldhu	r3,-24(fp)
    9de0:	e13ffa8b 	ldhu	r4,-22(fp)
    9de4:	e0bffb04 	addi	r2,fp,-20
    9de8:	200f883a 	mov	r7,r4
    9dec:	180d883a 	mov	r6,r3
    9df0:	014000f4 	movhi	r5,3
    9df4:	29695304 	addi	r5,r5,-23220
    9df8:	1009883a 	mov	r4,r2
    9dfc:	000f4380 	call	f438 <sprintf>
  printf("%s\n", buf);
    9e00:	e0bffb04 	addi	r2,fp,-20
    9e04:	1009883a 	mov	r4,r2
    9e08:	000f0740 	call	f074 <puts>
}
    9e0c:	0001883a 	nop
    9e10:	e037883a 	mov	sp,fp
    9e14:	dfc00117 	ldw	ra,4(sp)
    9e18:	df000017 	ldw	fp,0(sp)
    9e1c:	dec00204 	addi	sp,sp,8
    9e20:	f800283a 	ret

00009e24 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9e24:	defffe04 	addi	sp,sp,-8
    9e28:	dfc00115 	stw	ra,4(sp)
    9e2c:	df000015 	stw	fp,0(sp)
    9e30:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9e34:	010000f4 	movhi	r4,3
    9e38:	21041a04 	addi	r4,r4,4200
    9e3c:	00099400 	call	9940 <_ZN8MAX3421e4InitEv>
    9e40:	10803fcc 	andi	r2,r2,255
    9e44:	1080201c 	xori	r2,r2,128
    9e48:	10bfe004 	addi	r2,r2,-128
    9e4c:	10bfffe0 	cmpeqi	r2,r2,-1
    9e50:	10803fcc 	andi	r2,r2,255
    9e54:	10000326 	beq	r2,zero,9e64 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9e58:	010000f4 	movhi	r4,3
    9e5c:	21295804 	addi	r4,r4,-23200
    9e60:	000ef580 	call	ef58 <printf>
	printf ("USB Started\n\r");
    9e64:	010000f4 	movhi	r4,3
    9e68:	21295a04 	addi	r4,r4,-23192
    9e6c:	000ef580 	call	ef58 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9e70:	01400074 	movhi	r5,1
    9e74:	29676b04 	addi	r5,r5,-25172
    9e78:	010000f4 	movhi	r4,3
    9e7c:	21044904 	addi	r4,r4,4388
    9e80:	000a4c00 	call	a4c0 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9e84:	0001883a 	nop
    9e88:	e037883a 	mov	sp,fp
    9e8c:	dfc00117 	ldw	ra,4(sp)
    9e90:	df000017 	ldw	fp,0(sp)
    9e94:	dec00204 	addi	sp,sp,8
    9e98:	f800283a 	ret

00009e9c <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    9e9c:	deffea04 	addi	sp,sp,-88
    9ea0:	dfc01515 	stw	ra,84(sp)
    9ea4:	df001415 	stw	fp,80(sp)
    9ea8:	df001404 	addi	fp,sp,80
  uint8_t note, vel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9eac:	e0ffef04 	addi	r3,fp,-68
    9eb0:	e0bfff04 	addi	r2,fp,-4
    9eb4:	180d883a 	mov	r6,r3
    9eb8:	100b883a 	mov	r5,r2
    9ebc:	010000f4 	movhi	r4,3
    9ec0:	21044904 	addi	r4,r4,4388
    9ec4:	00079700 	call	7970 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9ec8:	10803fcc 	andi	r2,r2,255
    9ecc:	1005003a 	cmpeq	r2,r2,zero
    9ed0:	10803fcc 	andi	r2,r2,255
    9ed4:	1000b726 	beq	r2,zero,a1b4 <_Z9MIDI_pollv+0x318>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    9ed8:	e03fec15 	stw	zero,-80(fp)
    9edc:	e0bfec17 	ldw	r2,-80(fp)
    9ee0:	10801008 	cmpgei	r2,r2,64
    9ee4:	1000b11e 	bne	r2,zero,a1ac <_Z9MIDI_pollv+0x310>
    	switch (bufMidi[i] & 0xF0) {
    9ee8:	e0ffef04 	addi	r3,fp,-68
    9eec:	e0bfec17 	ldw	r2,-80(fp)
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	10800003 	ldbu	r2,0(r2)
    9ef8:	10803fcc 	andi	r2,r2,255
    9efc:	10803c0c 	andi	r2,r2,240
    9f00:	10c02420 	cmpeqi	r3,r2,144
    9f04:	18000a1e 	bne	r3,zero,9f30 <_Z9MIDI_pollv+0x94>
    9f08:	10c02448 	cmpgei	r3,r2,145
    9f0c:	1800031e 	bne	r3,zero,9f1c <_Z9MIDI_pollv+0x80>
    9f10:	10802020 	cmpeqi	r2,r2,128
    9f14:	1000061e 	bne	r2,zero,9f30 <_Z9MIDI_pollv+0x94>
				printf("%X\t", bufMidi[i]);
				printf("%X\t", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9f18:	0000a006 	br	a19c <_Z9MIDI_pollv+0x300>
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & 0xF0) {
    9f1c:	10c02c20 	cmpeqi	r3,r2,176
    9f20:	1800451e 	bne	r3,zero,a038 <_Z9MIDI_pollv+0x19c>
    9f24:	10803820 	cmpeqi	r2,r2,224
    9f28:	10007a1e 	bne	r2,zero,a114 <_Z9MIDI_pollv+0x278>
				printf("%X\t", bufMidi[i]);
				printf("%X\t", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9f2c:	00009b06 	br	a19c <_Z9MIDI_pollv+0x300>
  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & 0xF0) {
			case NOTE_OFF:
			case NOTE_ON:
				note = bufMidi[i+1];
    9f30:	e0bfec17 	ldw	r2,-80(fp)
    9f34:	10800044 	addi	r2,r2,1
    9f38:	e0ffef04 	addi	r3,fp,-68
    9f3c:	1885883a 	add	r2,r3,r2
    9f40:	10800003 	ldbu	r2,0(r2)
    9f44:	e0bfed05 	stb	r2,-76(fp)
				vel = bufMidi[i+2];
    9f48:	e0bfec17 	ldw	r2,-80(fp)
    9f4c:	10800084 	addi	r2,r2,2
    9f50:	e0ffef04 	addi	r3,fp,-68
    9f54:	1885883a 	add	r2,r3,r2
    9f58:	10800003 	ldbu	r2,0(r2)
    9f5c:	e0bfed45 	stb	r2,-75(fp)
				if(!(bufMidi[i] & 0x0F)) {
    9f60:	e0ffef04 	addi	r3,fp,-68
    9f64:	e0bfec17 	ldw	r2,-80(fp)
    9f68:	1885883a 	add	r2,r3,r2
    9f6c:	10800003 	ldbu	r2,0(r2)
    9f70:	10803fcc 	andi	r2,r2,255
    9f74:	108003cc 	andi	r2,r2,15
    9f78:	1000871e 	bne	r2,zero,a198 <_Z9MIDI_pollv+0x2fc>
					if (vel) printf("Note On\t");
    9f7c:	e0bfed43 	ldbu	r2,-75(fp)
    9f80:	10000426 	beq	r2,zero,9f94 <_Z9MIDI_pollv+0xf8>
    9f84:	010000f4 	movhi	r4,3
    9f88:	21295e04 	addi	r4,r4,-23176
    9f8c:	000ef580 	call	ef58 <printf>
    9f90:	00000306 	br	9fa0 <_Z9MIDI_pollv+0x104>
					else printf("Note Off\t");
    9f94:	010000f4 	movhi	r4,3
    9f98:	21296104 	addi	r4,r4,-23164
    9f9c:	000ef580 	call	ef58 <printf>
					printf("%X\t", bufMidi[i]);
    9fa0:	e0ffef04 	addi	r3,fp,-68
    9fa4:	e0bfec17 	ldw	r2,-80(fp)
    9fa8:	1885883a 	add	r2,r3,r2
    9fac:	10800003 	ldbu	r2,0(r2)
    9fb0:	10803fcc 	andi	r2,r2,255
    9fb4:	100b883a 	mov	r5,r2
    9fb8:	010000f4 	movhi	r4,3
    9fbc:	21296404 	addi	r4,r4,-23152
    9fc0:	000ef580 	call	ef58 <printf>
					printf("%X\t", bufMidi[i+1]);
    9fc4:	e0bfec17 	ldw	r2,-80(fp)
    9fc8:	10800044 	addi	r2,r2,1
    9fcc:	e0ffef04 	addi	r3,fp,-68
    9fd0:	1885883a 	add	r2,r3,r2
    9fd4:	10800003 	ldbu	r2,0(r2)
    9fd8:	10803fcc 	andi	r2,r2,255
    9fdc:	100b883a 	mov	r5,r2
    9fe0:	010000f4 	movhi	r4,3
    9fe4:	21296404 	addi	r4,r4,-23152
    9fe8:	000ef580 	call	ef58 <printf>
					printf("%X\n", bufMidi[i+2]);
    9fec:	e0bfec17 	ldw	r2,-80(fp)
    9ff0:	10800084 	addi	r2,r2,2
    9ff4:	e0ffef04 	addi	r3,fp,-68
    9ff8:	1885883a 	add	r2,r3,r2
    9ffc:	10800003 	ldbu	r2,0(r2)
    a000:	10803fcc 	andi	r2,r2,255
    a004:	100b883a 	mov	r5,r2
    a008:	010000f4 	movhi	r4,3
    a00c:	21296504 	addi	r4,r4,-23148
    a010:	000ef580 	call	ef58 <printf>
					i += 2;
    a014:	e0bfec17 	ldw	r2,-80(fp)
    a018:	10800084 	addi	r2,r2,2
    a01c:	e0bfec15 	stw	r2,-80(fp)
					set_note(note, vel);
    a020:	e0bfed03 	ldbu	r2,-76(fp)
    a024:	e0ffed43 	ldbu	r3,-75(fp)
    a028:	180b883a 	mov	r5,r3
    a02c:	1009883a 	mov	r4,r2
    a030:	00051b00 	call	51b0 <_Z8set_notehh>
				}
				break;
    a034:	00005806 	br	a198 <_Z9MIDI_pollv+0x2fc>
			case CONTROL_CHANGE:
				//PEDAL CONTROLS HERE
				ctrl = bufMidi[i+1];
    a038:	e0bfec17 	ldw	r2,-80(fp)
    a03c:	10800044 	addi	r2,r2,1
    a040:	e0ffef04 	addi	r3,fp,-68
    a044:	1885883a 	add	r2,r3,r2
    a048:	10800003 	ldbu	r2,0(r2)
    a04c:	e0bfed85 	stb	r2,-74(fp)
				par = bufMidi[i+2];
    a050:	e0bfec17 	ldw	r2,-80(fp)
    a054:	10800084 	addi	r2,r2,2
    a058:	e0ffef04 	addi	r3,fp,-68
    a05c:	1885883a 	add	r2,r3,r2
    a060:	10800003 	ldbu	r2,0(r2)
    a064:	e0bfedc5 	stb	r2,-73(fp)
				long_par = par;
    a068:	e0bfedc3 	ldbu	r2,-73(fp)
    a06c:	e0bfee15 	stw	r2,-72(fp)
				switch(ctrl) {
    a070:	e0bfed83 	ldbu	r2,-74(fp)
    a074:	10c00060 	cmpeqi	r3,r2,1
    a078:	1800061e 	bne	r3,zero,a094 <_Z9MIDI_pollv+0x1f8>
    a07c:	10801020 	cmpeqi	r2,r2,64
    a080:	10001226 	beq	r2,zero,a0cc <_Z9MIDI_pollv+0x230>
					case SUSTAIN_PEDAL:
						set_adsr(SUS, long_par);
    a084:	e17fee17 	ldw	r5,-72(fp)
    a088:	010001c4 	movi	r4,7
    a08c:	00052300 	call	5230 <_Z8set_adsrhm>
						break;
    a090:	00001c06 	br	a104 <_Z9MIDI_pollv+0x268>
					case MOD_WHEEL:
						printf("Mod Wheel\t");
    a094:	010000f4 	movhi	r4,3
    a098:	21296604 	addi	r4,r4,-23144
    a09c:	000ef580 	call	ef58 <printf>
						printf("%X\t", ctrl);
    a0a0:	e0bfed83 	ldbu	r2,-74(fp)
    a0a4:	100b883a 	mov	r5,r2
    a0a8:	010000f4 	movhi	r4,3
    a0ac:	21296404 	addi	r4,r4,-23152
    a0b0:	000ef580 	call	ef58 <printf>
						printf("%X\n", par);
    a0b4:	e0bfedc3 	ldbu	r2,-73(fp)
    a0b8:	100b883a 	mov	r5,r2
    a0bc:	010000f4 	movhi	r4,3
    a0c0:	21296504 	addi	r4,r4,-23148
    a0c4:	000ef580 	call	ef58 <printf>
						break;
    a0c8:	00000e06 	br	a104 <_Z9MIDI_pollv+0x268>
					default:
						printf("Other Control Change\t");
    a0cc:	010000f4 	movhi	r4,3
    a0d0:	21296904 	addi	r4,r4,-23132
    a0d4:	000ef580 	call	ef58 <printf>
						printf("%X\t", ctrl);
    a0d8:	e0bfed83 	ldbu	r2,-74(fp)
    a0dc:	100b883a 	mov	r5,r2
    a0e0:	010000f4 	movhi	r4,3
    a0e4:	21296404 	addi	r4,r4,-23152
    a0e8:	000ef580 	call	ef58 <printf>
						printf("%X\n", par);
    a0ec:	e0bfedc3 	ldbu	r2,-73(fp)
    a0f0:	100b883a 	mov	r5,r2
    a0f4:	010000f4 	movhi	r4,3
    a0f8:	21296504 	addi	r4,r4,-23148
    a0fc:	000ef580 	call	ef58 <printf>
						break;
    a100:	0001883a 	nop
				}
				i += 2;
    a104:	e0bfec17 	ldw	r2,-80(fp)
    a108:	10800084 	addi	r2,r2,2
    a10c:	e0bfec15 	stw	r2,-80(fp)
				break;
    a110:	00002206 	br	a19c <_Z9MIDI_pollv+0x300>
			case PITCH_BEND:
				//PITCH WHEEL CONTROLS HERE
				printf("Pitch Bend\t");
    a114:	010000f4 	movhi	r4,3
    a118:	21296f04 	addi	r4,r4,-23108
    a11c:	000ef580 	call	ef58 <printf>
				printf("%X\t", bufMidi[i]);
    a120:	e0ffef04 	addi	r3,fp,-68
    a124:	e0bfec17 	ldw	r2,-80(fp)
    a128:	1885883a 	add	r2,r3,r2
    a12c:	10800003 	ldbu	r2,0(r2)
    a130:	10803fcc 	andi	r2,r2,255
    a134:	100b883a 	mov	r5,r2
    a138:	010000f4 	movhi	r4,3
    a13c:	21296404 	addi	r4,r4,-23152
    a140:	000ef580 	call	ef58 <printf>
				printf("%X\t", bufMidi[i+1]);
    a144:	e0bfec17 	ldw	r2,-80(fp)
    a148:	10800044 	addi	r2,r2,1
    a14c:	e0ffef04 	addi	r3,fp,-68
    a150:	1885883a 	add	r2,r3,r2
    a154:	10800003 	ldbu	r2,0(r2)
    a158:	10803fcc 	andi	r2,r2,255
    a15c:	100b883a 	mov	r5,r2
    a160:	010000f4 	movhi	r4,3
    a164:	21296404 	addi	r4,r4,-23152
    a168:	000ef580 	call	ef58 <printf>
				printf("%X\n", bufMidi[i+2]);
    a16c:	e0bfec17 	ldw	r2,-80(fp)
    a170:	10800084 	addi	r2,r2,2
    a174:	e0ffef04 	addi	r3,fp,-68
    a178:	1885883a 	add	r2,r3,r2
    a17c:	10800003 	ldbu	r2,0(r2)
    a180:	10803fcc 	andi	r2,r2,255
    a184:	100b883a 	mov	r5,r2
    a188:	010000f4 	movhi	r4,3
    a18c:	21296504 	addi	r4,r4,-23148
    a190:	000ef580 	call	ef58 <printf>
				break;
    a194:	00000106 	br	a19c <_Z9MIDI_pollv+0x300>
					printf("%X\t", bufMidi[i+1]);
					printf("%X\n", bufMidi[i+2]);
					i += 2;
					set_note(note, vel);
				}
				break;
    a198:	0001883a 	nop
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    a19c:	e0bfec17 	ldw	r2,-80(fp)
    a1a0:	10800044 	addi	r2,r2,1
    a1a4:	e0bfec15 	stw	r2,-80(fp)
    a1a8:	003f4c06 	br	9edc <__alt_data_end+0xfc009edc>
				break;
			default:
				break;
    	}
    }
    printf("\n");
    a1ac:	01000284 	movi	r4,10
    a1b0:	000ef9c0 	call	ef9c <putchar>
  }
}
    a1b4:	0001883a 	nop
    a1b8:	e037883a 	mov	sp,fp
    a1bc:	dfc00117 	ldw	ra,4(sp)
    a1c0:	df000017 	ldw	fp,0(sp)
    a1c4:	dec00204 	addi	sp,sp,8
    a1c8:	f800283a 	ret

0000a1cc <_Z7controlv>:

void control() {
    a1cc:	defffd04 	addi	sp,sp,-12
    a1d0:	dfc00215 	stw	ra,8(sp)
    a1d4:	df000115 	stw	fp,4(sp)
    a1d8:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a1dc:	00810034 	movhi	r2,1024
    a1e0:	10848804 	addi	r2,r2,4640
    a1e4:	10800037 	ldwio	r2,0(r2)
    a1e8:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a1ec:	e0bfff03 	ldbu	r2,-4(fp)
    a1f0:	1080004c 	andi	r2,r2,1
    a1f4:	1000031e 	bne	r2,zero,a204 <_Z7controlv+0x38>
    a1f8:	e0bfff03 	ldbu	r2,-4(fp)
    a1fc:	1080008c 	andi	r2,r2,2
    a200:	10000e26 	beq	r2,zero,a23c <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a204:	e0bfff03 	ldbu	r2,-4(fp)
    a208:	1080004c 	andi	r2,r2,1
    a20c:	1000041e 	bne	r2,zero,a220 <_Z7controlv+0x54>
    a210:	d0b23c17 	ldw	r2,-14096(gp)
    a214:	1009883a 	mov	r4,r2
    a218:	0006cfc0 	call	6cfc <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a21c:	00000706 	br	a23c <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a220:	e0bfff03 	ldbu	r2,-4(fp)
    a224:	1080008c 	andi	r2,r2,2
    a228:	1000041e 	bne	r2,zero,a23c <_Z7controlv+0x70>
    a22c:	d0b23c17 	ldw	r2,-14096(gp)
    a230:	1009883a 	mov	r4,r2
    a234:	0006dd00 	call	6dd0 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a238:	00000006 	br	a23c <_Z7controlv+0x70>
    a23c:	0001883a 	nop
    a240:	e037883a 	mov	sp,fp
    a244:	dfc00117 	ldw	ra,4(sp)
    a248:	df000017 	ldw	fp,0(sp)
    a24c:	dec00204 	addi	sp,sp,8
    a250:	f800283a 	ret

0000a254 <main>:

int main() {
    a254:	defffb04 	addi	sp,sp,-20
    a258:	dfc00415 	stw	ra,16(sp)
    a25c:	df000315 	stw	fp,12(sp)
    a260:	df000304 	addi	fp,sp,12

	uint8_t timer;

	//Initial ADSR values
	alt_u16 att_m_seconds = 10;
    a264:	00800284 	movi	r2,10
    a268:	e0bffd8d 	sth	r2,-10(fp)
	alt_u16 dec_m_seconds = 30;
    a26c:	00800784 	movi	r2,30
    a270:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16 rel_m_seconds = 80;
    a274:	00801404 	movi	r2,80
    a278:	e0bffe8d 	sth	r2,-6(fp)
	float peak_amp = 1.9;
    a27c:	008ffcf4 	movhi	r2,16371
    a280:	108cccc4 	addi	r2,r2,13107
    a284:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a288:	010000f4 	movhi	r4,3
    a28c:	21297204 	addi	r4,r4,-23096
    a290:	000f0740 	call	f074 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a294:	010000f4 	movhi	r4,3
    a298:	21297904 	addi	r4,r4,-23068
    a29c:	001ff840 	call	1ff84 <alt_avalon_i2c_open>
    a2a0:	d0b23c15 	stw	r2,-14096(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a2a4:	d0b23c17 	ldw	r2,-14096(gp)
    a2a8:	1000031e 	bne	r2,zero,a2b8 <main+0x64>
    a2ac:	010000f4 	movhi	r4,3
    a2b0:	21297c04 	addi	r4,r4,-23056
    a2b4:	000f0740 	call	f074 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a2b8:	d0b23c17 	ldw	r2,-14096(gp)
    a2bc:	1009883a 	mov	r4,r2
    a2c0:	0006a4c0 	call	6a4c <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a2c4:	010000f4 	movhi	r4,3
    a2c8:	21298404 	addi	r4,r4,-23024
    a2cc:	000f0740 	call	f074 <puts>
	SGTL5000audio_on(i2c_dev);
    a2d0:	d0b23c17 	ldw	r2,-14096(gp)
    a2d4:	1009883a 	mov	r4,r2
    a2d8:	0006ae40 	call	6ae4 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    a2dc:	d0b23c17 	ldw	r2,-14096(gp)
    a2e0:	1009883a 	mov	r4,r2
    a2e4:	0006b500 	call	6b50 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    a2e8:	010000f4 	movhi	r4,3
    a2ec:	21298904 	addi	r4,r4,-23004
    a2f0:	000f0740 	call	f074 <puts>

	printf("Initializing ADSR...\n");
    a2f4:	010000f4 	movhi	r4,3
    a2f8:	21298d04 	addi	r4,r4,-22988
    a2fc:	000f0740 	call	f074 <puts>
	calc_adsr(att_m_seconds, dec_m_seconds, rel_m_seconds, peak_amp);
    a300:	e0bffd8b 	ldhu	r2,-10(fp)
    a304:	e0fffe0b 	ldhu	r3,-8(fp)
    a308:	e13ffe8b 	ldhu	r4,-6(fp)
    a30c:	e1ffff17 	ldw	r7,-4(fp)
    a310:	200d883a 	mov	r6,r4
    a314:	180b883a 	mov	r5,r3
    a318:	1009883a 	mov	r4,r2
    a31c:	000527c0 	call	527c <_Z9calc_adsrtttf>
	printf("ADSR set\n");
    a320:	010000f4 	movhi	r4,3
    a324:	21299304 	addi	r4,r4,-22964
    a328:	000f0740 	call	f074 <puts>

	MIDI_setup();
    a32c:	0009e240 	call	9e24 <_Z10MIDI_setupv>
	printf("MIDI set\n");
    a330:	010000f4 	movhi	r4,3
    a334:	21299604 	addi	r4,r4,-22952
    a338:	000f0740 	call	f074 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a33c:	010000f4 	movhi	r4,3
    a340:	21041a04 	addi	r4,r4,4200
    a344:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a348:	10803fcc 	andi	r2,r2,255
    a34c:	10802418 	cmpnei	r2,r2,144
    a350:	10803fcc 	andi	r2,r2,255
    a354:	10000426 	beq	r2,zero,a368 <main+0x114>
		Usb.Task();
    a358:	010000f4 	movhi	r4,3
    a35c:	21041a04 	addi	r4,r4,4200
    a360:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a364:	003ff506 	br	a33c <__alt_data_end+0xfc00a33c>
		Usb.Task();
	}
	printf("USB running\n");
    a368:	010000f4 	movhi	r4,3
    a36c:	21299904 	addi	r4,r4,-22940
    a370:	000f0740 	call	f074 <puts>

	while(1) {
		if ( Midi ) {
    a374:	010000f4 	movhi	r4,3
    a378:	21044904 	addi	r4,r4,4388
    a37c:	000a4480 	call	a448 <_ZN9USBH_MIDIcvbEv>
    a380:	10803fcc 	andi	r2,r2,255
    a384:	10000126 	beq	r2,zero,a38c <main+0x138>
			MIDI_poll();
    a388:	0009e9c0 	call	9e9c <_Z9MIDI_pollv>
		}
		timer ++;
    a38c:	e0bffd03 	ldbu	r2,-12(fp)
    a390:	10800044 	addi	r2,r2,1
    a394:	e0bffd05 	stb	r2,-12(fp)
		if (timer & 0x40) {
    a398:	e0bffd03 	ldbu	r2,-12(fp)
    a39c:	1080100c 	andi	r2,r2,64
    a3a0:	103ff426 	beq	r2,zero,a374 <__alt_data_end+0xfc00a374>
			control();
    a3a4:	000a1cc0 	call	a1cc <_Z7controlv>
			timer = 0;
    a3a8:	e03ffd05 	stb	zero,-12(fp)
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    a3ac:	003ff106 	br	a374 <__alt_data_end+0xfc00a374>

0000a3b0 <_Z41__static_initialization_and_destruction_0ii>:
		if (timer & 0x40) {
			control();
			timer = 0;
		}
	}
}
    a3b0:	defffc04 	addi	sp,sp,-16
    a3b4:	dfc00315 	stw	ra,12(sp)
    a3b8:	df000215 	stw	fp,8(sp)
    a3bc:	df000204 	addi	fp,sp,8
    a3c0:	e13ffe15 	stw	r4,-8(fp)
    a3c4:	e17fff15 	stw	r5,-4(fp)
    a3c8:	e0bffe17 	ldw	r2,-8(fp)
    a3cc:	10800058 	cmpnei	r2,r2,1
    a3d0:	10000b1e 	bne	r2,zero,a400 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a3d4:	e0ffff17 	ldw	r3,-4(fp)
    a3d8:	00bfffd4 	movui	r2,65535
    a3dc:	1880081e 	bne	r3,r2,a400 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    a3e0:	010000f4 	movhi	r4,3
    a3e4:	21041a04 	addi	r4,r4,4200
    a3e8:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    a3ec:	014000f4 	movhi	r5,3
    a3f0:	29441a04 	addi	r5,r5,4200
    a3f4:	010000f4 	movhi	r4,3
    a3f8:	21044904 	addi	r4,r4,4388
    a3fc:	0006e500 	call	6e50 <_ZN9USBH_MIDIC1EP3USB>
		if (timer & 0x40) {
			control();
			timer = 0;
		}
	}
}
    a400:	0001883a 	nop
    a404:	e037883a 	mov	sp,fp
    a408:	dfc00117 	ldw	ra,4(sp)
    a40c:	df000017 	ldw	fp,0(sp)
    a410:	dec00204 	addi	sp,sp,8
    a414:	f800283a 	ret

0000a418 <_GLOBAL__sub_I_Usb>:
    a418:	defffe04 	addi	sp,sp,-8
    a41c:	dfc00115 	stw	ra,4(sp)
    a420:	df000015 	stw	fp,0(sp)
    a424:	d839883a 	mov	fp,sp
    a428:	017fffd4 	movui	r5,65535
    a42c:	01000044 	movi	r4,1
    a430:	000a3b00 	call	a3b0 <_Z41__static_initialization_and_destruction_0ii>
    a434:	e037883a 	mov	sp,fp
    a438:	dfc00117 	ldw	ra,4(sp)
    a43c:	df000017 	ldw	fp,0(sp)
    a440:	dec00204 	addi	sp,sp,8
    a444:	f800283a 	ret

0000a448 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a448:	defffe04 	addi	sp,sp,-8
    a44c:	df000115 	stw	fp,4(sp)
    a450:	df000104 	addi	fp,sp,4
    a454:	e13fff15 	stw	r4,-4(fp)
    a458:	e0bfff17 	ldw	r2,-4(fp)
    a45c:	10800343 	ldbu	r2,13(r2)
    a460:	e037883a 	mov	sp,fp
    a464:	df000017 	ldw	fp,0(sp)
    a468:	dec00104 	addi	sp,sp,4
    a46c:	f800283a 	ret

0000a470 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a470:	defffe04 	addi	sp,sp,-8
    a474:	df000115 	stw	fp,4(sp)
    a478:	df000104 	addi	fp,sp,4
    a47c:	e13fff15 	stw	r4,-4(fp)
    a480:	e0bfff17 	ldw	r2,-4(fp)
    a484:	1080040b 	ldhu	r2,16(r2)
    a488:	e037883a 	mov	sp,fp
    a48c:	df000017 	ldw	fp,0(sp)
    a490:	dec00104 	addi	sp,sp,4
    a494:	f800283a 	ret

0000a498 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a498:	defffe04 	addi	sp,sp,-8
    a49c:	df000115 	stw	fp,4(sp)
    a4a0:	df000104 	addi	fp,sp,4
    a4a4:	e13fff15 	stw	r4,-4(fp)
    a4a8:	e0bfff17 	ldw	r2,-4(fp)
    a4ac:	1080038b 	ldhu	r2,14(r2)
    a4b0:	e037883a 	mov	sp,fp
    a4b4:	df000017 	ldw	fp,0(sp)
    a4b8:	dec00104 	addi	sp,sp,4
    a4bc:	f800283a 	ret

0000a4c0 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a4c0:	defffd04 	addi	sp,sp,-12
    a4c4:	df000215 	stw	fp,8(sp)
    a4c8:	df000204 	addi	fp,sp,8
    a4cc:	e13ffe15 	stw	r4,-8(fp)
    a4d0:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a4d4:	e0bffe17 	ldw	r2,-8(fp)
    a4d8:	e0ffff17 	ldw	r3,-4(fp)
    a4dc:	10c01815 	stw	r3,96(r2)
        };
    a4e0:	0001883a 	nop
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	df000017 	ldw	fp,0(sp)
    a4ec:	dec00104 	addi	sp,sp,4
    a4f0:	f800283a 	ret

0000a4f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a4f4:	008000f4 	movhi	r2,3
    a4f8:	10a9ab04 	addi	r2,r2,-22868
    a4fc:	20800015 	stw	r2,0(r4)
    a500:	000b2cc1 	jmpi	b2cc <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a504 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a504:	defffe04 	addi	sp,sp,-8
    a508:	008000f4 	movhi	r2,3
    a50c:	dc000015 	stw	r16,0(sp)
    a510:	dfc00115 	stw	ra,4(sp)
    a514:	10a9ab04 	addi	r2,r2,-22868
    a518:	20800015 	stw	r2,0(r4)
    a51c:	2021883a 	mov	r16,r4
    a520:	000b2cc0 	call	b2cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a524:	8009883a 	mov	r4,r16
    a528:	dfc00117 	ldw	ra,4(sp)
    a52c:	dc000017 	ldw	r16,0(sp)
    a530:	dec00204 	addi	sp,sp,8
    a534:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000a538 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a538:	defff504 	addi	sp,sp,-44
    a53c:	dc000115 	stw	r16,4(sp)
    a540:	38800117 	ldw	r2,4(r7)
    a544:	24000117 	ldw	r16,4(r4)
    a548:	df000915 	stw	fp,36(sp)
    a54c:	ddc00815 	stw	r23,32(sp)
    a550:	dd800715 	stw	r22,28(sp)
    a554:	dcc00415 	stw	r19,16(sp)
    a558:	dc800315 	stw	r18,12(sp)
    a55c:	dc400215 	stw	r17,8(sp)
    a560:	dfc00a15 	stw	ra,40(sp)
    a564:	dd400615 	stw	r21,24(sp)
    a568:	dd000515 	stw	r20,20(sp)
    a56c:	2823883a 	mov	r17,r5
    a570:	3039883a 	mov	fp,r6
    a574:	dcc00b17 	ldw	r19,44(sp)
    a578:	ddc00c17 	ldw	r23,48(sp)
    a57c:	dd800d17 	ldw	r22,52(sp)
    a580:	dc800e17 	ldw	r18,56(sp)
    a584:	80800b26 	beq	r16,r2,a5b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a588:	80c00007 	ldb	r3,0(r16)
    a58c:	2029883a 	mov	r20,r4
    a590:	01000a84 	movi	r4,42
    a594:	382b883a 	mov	r21,r7
    a598:	19001a26 	beq	r3,r4,a604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a59c:	100b883a 	mov	r5,r2
    a5a0:	8009883a 	mov	r4,r16
    a5a4:	d8c00015 	stw	r3,0(sp)
    a5a8:	000f4a40 	call	f4a4 <strcmp>
    a5ac:	d8c00017 	ldw	r3,0(sp)
    a5b0:	1000141e 	bne	r2,zero,a604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a5b4:	94c00015 	stw	r19,0(r18)
    a5b8:	97000115 	stw	fp,4(r18)
    a5bc:	88002816 	blt	r17,zero,a660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a5c0:	9c63883a 	add	r17,r19,r17
    a5c4:	b4403226 	beq	r22,r17,a690 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a5c8:	00800044 	movi	r2,1
    a5cc:	90800315 	stw	r2,12(r18)
    a5d0:	0005883a 	mov	r2,zero
    a5d4:	dfc00a17 	ldw	ra,40(sp)
    a5d8:	df000917 	ldw	fp,36(sp)
    a5dc:	ddc00817 	ldw	r23,32(sp)
    a5e0:	dd800717 	ldw	r22,28(sp)
    a5e4:	dd400617 	ldw	r21,24(sp)
    a5e8:	dd000517 	ldw	r20,20(sp)
    a5ec:	dcc00417 	ldw	r19,16(sp)
    a5f0:	dc800317 	ldw	r18,12(sp)
    a5f4:	dc400217 	ldw	r17,8(sp)
    a5f8:	dc000117 	ldw	r16,4(sp)
    a5fc:	dec00b04 	addi	sp,sp,44
    a600:	f800283a 	ret
    a604:	9d801926 	beq	r19,r22,a66c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a608:	a1000217 	ldw	r4,8(r20)
    a60c:	a80f883a 	mov	r7,r21
    a610:	e00d883a 	mov	r6,fp
    a614:	20800017 	ldw	r2,0(r4)
    a618:	dc800e15 	stw	r18,56(sp)
    a61c:	dd800d15 	stw	r22,52(sp)
    a620:	ddc00c15 	stw	r23,48(sp)
    a624:	dcc00b15 	stw	r19,44(sp)
    a628:	10800717 	ldw	r2,28(r2)
    a62c:	880b883a 	mov	r5,r17
    a630:	dfc00a17 	ldw	ra,40(sp)
    a634:	df000917 	ldw	fp,36(sp)
    a638:	ddc00817 	ldw	r23,32(sp)
    a63c:	dd800717 	ldw	r22,28(sp)
    a640:	dd400617 	ldw	r21,24(sp)
    a644:	dd000517 	ldw	r20,20(sp)
    a648:	dcc00417 	ldw	r19,16(sp)
    a64c:	dc800317 	ldw	r18,12(sp)
    a650:	dc400217 	ldw	r17,8(sp)
    a654:	dc000117 	ldw	r16,4(sp)
    a658:	dec00b04 	addi	sp,sp,44
    a65c:	1000683a 	jmp	r2
    a660:	00bfff84 	movi	r2,-2
    a664:	88bfda1e 	bne	r17,r2,a5d0 <__alt_data_end+0xfc00a5d0>
    a668:	003fd706 	br	a5c8 <__alt_data_end+0xfc00a5c8>
    a66c:	b9400117 	ldw	r5,4(r23)
    a670:	81400526 	beq	r16,r5,a688 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a674:	00800a84 	movi	r2,42
    a678:	18bfe326 	beq	r3,r2,a608 <__alt_data_end+0xfc00a608>
    a67c:	8009883a 	mov	r4,r16
    a680:	000f4a40 	call	f4a4 <strcmp>
    a684:	103fe01e 	bne	r2,zero,a608 <__alt_data_end+0xfc00a608>
    a688:	97000215 	stw	fp,8(r18)
    a68c:	003fd006 	br	a5d0 <__alt_data_end+0xfc00a5d0>
    a690:	00800184 	movi	r2,6
    a694:	003fcd06 	br	a5cc <__alt_data_end+0xfc00a5cc>

0000a698 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a698:	defffa04 	addi	sp,sp,-24
    a69c:	dc000215 	stw	r16,8(sp)
    a6a0:	dc000617 	ldw	r16,24(sp)
    a6a4:	dc800415 	stw	r18,16(sp)
    a6a8:	dc400315 	stw	r17,12(sp)
    a6ac:	dfc00515 	stw	ra,20(sp)
    a6b0:	2023883a 	mov	r17,r4
    a6b4:	2825883a 	mov	r18,r5
    a6b8:	81800b26 	beq	r16,r6,a6e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a6bc:	89000217 	ldw	r4,8(r17)
    a6c0:	900b883a 	mov	r5,r18
    a6c4:	20800017 	ldw	r2,0(r4)
    a6c8:	dc000615 	stw	r16,24(sp)
    a6cc:	10800817 	ldw	r2,32(r2)
    a6d0:	dfc00517 	ldw	ra,20(sp)
    a6d4:	dc800417 	ldw	r18,16(sp)
    a6d8:	dc400317 	ldw	r17,12(sp)
    a6dc:	dc000217 	ldw	r16,8(sp)
    a6e0:	dec00604 	addi	sp,sp,24
    a6e4:	1000683a 	jmp	r2
    a6e8:	21000117 	ldw	r4,4(r4)
    a6ec:	39400117 	ldw	r5,4(r7)
    a6f0:	21400926 	beq	r4,r5,a718 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a6f4:	20c00007 	ldb	r3,0(r4)
    a6f8:	00800a84 	movi	r2,42
    a6fc:	18bfef26 	beq	r3,r2,a6bc <__alt_data_end+0xfc00a6bc>
    a700:	d9800015 	stw	r6,0(sp)
    a704:	d9c00115 	stw	r7,4(sp)
    a708:	000f4a40 	call	f4a4 <strcmp>
    a70c:	d9800017 	ldw	r6,0(sp)
    a710:	d9c00117 	ldw	r7,4(sp)
    a714:	103fe91e 	bne	r2,zero,a6bc <__alt_data_end+0xfc00a6bc>
    a718:	00800184 	movi	r2,6
    a71c:	dfc00517 	ldw	ra,20(sp)
    a720:	dc800417 	ldw	r18,16(sp)
    a724:	dc400317 	ldw	r17,12(sp)
    a728:	dc000217 	ldw	r16,8(sp)
    a72c:	dec00604 	addi	sp,sp,24
    a730:	f800283a 	ret

0000a734 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a734:	defffb04 	addi	sp,sp,-20
    a738:	dcc00315 	stw	r19,12(sp)
    a73c:	dc800215 	stw	r18,8(sp)
    a740:	dc400115 	stw	r17,4(sp)
    a744:	dc000015 	stw	r16,0(sp)
    a748:	dfc00415 	stw	ra,16(sp)
    a74c:	2027883a 	mov	r19,r4
    a750:	2821883a 	mov	r16,r5
    a754:	3023883a 	mov	r17,r6
    a758:	3825883a 	mov	r18,r7
    a75c:	000b3100 	call	b310 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a760:	10c03fcc 	andi	r3,r2,255
    a764:	18000726 	beq	r3,zero,a784 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a768:	dfc00417 	ldw	ra,16(sp)
    a76c:	dcc00317 	ldw	r19,12(sp)
    a770:	dc800217 	ldw	r18,8(sp)
    a774:	dc400117 	ldw	r17,4(sp)
    a778:	dc000017 	ldw	r16,0(sp)
    a77c:	dec00504 	addi	sp,sp,20
    a780:	f800283a 	ret
    a784:	99000217 	ldw	r4,8(r19)
    a788:	900f883a 	mov	r7,r18
    a78c:	880d883a 	mov	r6,r17
    a790:	20800017 	ldw	r2,0(r4)
    a794:	800b883a 	mov	r5,r16
    a798:	10800617 	ldw	r2,24(r2)
    a79c:	dfc00417 	ldw	ra,16(sp)
    a7a0:	dcc00317 	ldw	r19,12(sp)
    a7a4:	dc800217 	ldw	r18,8(sp)
    a7a8:	dc400117 	ldw	r17,4(sp)
    a7ac:	dc000017 	ldw	r16,0(sp)
    a7b0:	dec00504 	addi	sp,sp,20
    a7b4:	1000683a 	jmp	r2

0000a7b8 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a7b8:	008000f4 	movhi	r2,3
    a7bc:	10a9c304 	addi	r2,r2,-22772
    a7c0:	20800015 	stw	r2,0(r4)
    a7c4:	000b2cc1 	jmpi	b2cc <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a7c8 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a7c8:	defffe04 	addi	sp,sp,-8
    a7cc:	008000f4 	movhi	r2,3
    a7d0:	dc000015 	stw	r16,0(sp)
    a7d4:	dfc00115 	stw	ra,4(sp)
    a7d8:	10a9c304 	addi	r2,r2,-22772
    a7dc:	20800015 	stw	r2,0(r4)
    a7e0:	2021883a 	mov	r16,r4
    a7e4:	000b2cc0 	call	b2cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a7e8:	8009883a 	mov	r4,r16
    a7ec:	dfc00117 	ldw	ra,4(sp)
    a7f0:	dc000017 	ldw	r16,0(sp)
    a7f4:	dec00204 	addi	sp,sp,8
    a7f8:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000a7fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a7fc:	defff504 	addi	sp,sp,-44
    a800:	dc400215 	stw	r17,8(sp)
    a804:	dc400b17 	ldw	r17,44(sp)
    a808:	df000915 	stw	fp,36(sp)
    a80c:	ddc00815 	stw	r23,32(sp)
    a810:	dd800715 	stw	r22,28(sp)
    a814:	dc000115 	stw	r16,4(sp)
    a818:	dfc00a15 	stw	ra,40(sp)
    a81c:	dd400615 	stw	r21,24(sp)
    a820:	dd000515 	stw	r20,20(sp)
    a824:	dcc00415 	stw	r19,16(sp)
    a828:	dc800315 	stw	r18,12(sp)
    a82c:	3039883a 	mov	fp,r6
    a830:	2021883a 	mov	r16,r4
    a834:	282d883a 	mov	r22,r5
    a838:	382f883a 	mov	r23,r7
    a83c:	34402c26 	beq	r6,r17,a8f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a840:	85000317 	ldw	r20,12(r16)
    a844:	048000c4 	movi	r18,3
    a848:	04ffff44 	movi	r19,-3
    a84c:	a484983a 	sll	r2,r20,r18
    a850:	b80f883a 	mov	r7,r23
    a854:	b00b883a 	mov	r5,r22
    a858:	10800304 	addi	r2,r2,12
    a85c:	80a1883a 	add	r16,r16,r2
    a860:	a0001626 	beq	r20,zero,a8bc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a864:	81800017 	ldw	r6,0(r16)
    a868:	a53fffc4 	addi	r20,r20,-1
    a86c:	3080008c 	andi	r2,r6,2
    a870:	3540004c 	andi	r21,r6,1
    a874:	10000d26 	beq	r2,zero,a8ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a878:	300dd23a 	srai	r6,r6,8
    a87c:	a8000426 	beq	r21,zero,a890 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a880:	b4c00a26 	beq	r22,r19,a8ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a884:	e0800017 	ldw	r2,0(fp)
    a888:	118d883a 	add	r6,r2,r6
    a88c:	31800017 	ldw	r6,0(r6)
    a890:	813fff17 	ldw	r4,-4(r16)
    a894:	e18d883a 	add	r6,fp,r6
    a898:	20800017 	ldw	r2,0(r4)
    a89c:	dc400015 	stw	r17,0(sp)
    a8a0:	10800817 	ldw	r2,32(r2)
    a8a4:	103ee83a 	callr	r2
    a8a8:	90801b16 	blt	r18,r2,a918 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a8ac:	843ffe04 	addi	r16,r16,-8
    a8b0:	b80f883a 	mov	r7,r23
    a8b4:	b00b883a 	mov	r5,r22
    a8b8:	a03fea1e 	bne	r20,zero,a864 <__alt_data_end+0xfc00a864>
    a8bc:	00800044 	movi	r2,1
    a8c0:	dfc00a17 	ldw	ra,40(sp)
    a8c4:	df000917 	ldw	fp,36(sp)
    a8c8:	ddc00817 	ldw	r23,32(sp)
    a8cc:	dd800717 	ldw	r22,28(sp)
    a8d0:	dd400617 	ldw	r21,24(sp)
    a8d4:	dd000517 	ldw	r20,20(sp)
    a8d8:	dcc00417 	ldw	r19,16(sp)
    a8dc:	dc800317 	ldw	r18,12(sp)
    a8e0:	dc400217 	ldw	r17,8(sp)
    a8e4:	dc000117 	ldw	r16,4(sp)
    a8e8:	dec00b04 	addi	sp,sp,44
    a8ec:	f800283a 	ret
    a8f0:	21000117 	ldw	r4,4(r4)
    a8f4:	39400117 	ldw	r5,4(r7)
    a8f8:	21400526 	beq	r4,r5,a910 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a8fc:	20c00007 	ldb	r3,0(r4)
    a900:	00800a84 	movi	r2,42
    a904:	18bfce26 	beq	r3,r2,a840 <__alt_data_end+0xfc00a840>
    a908:	000f4a40 	call	f4a4 <strcmp>
    a90c:	103fcc1e 	bne	r2,zero,a840 <__alt_data_end+0xfc00a840>
    a910:	00800184 	movi	r2,6
    a914:	003fea06 	br	a8c0 <__alt_data_end+0xfc00a8c0>
    a918:	a83fe926 	beq	r21,zero,a8c0 <__alt_data_end+0xfc00a8c0>
    a91c:	10800054 	ori	r2,r2,1
    a920:	003fe706 	br	a8c0 <__alt_data_end+0xfc00a8c0>

0000a924 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a924:	deffe804 	addi	sp,sp,-96
    a928:	df001615 	stw	fp,88(sp)
    a92c:	df001b17 	ldw	fp,108(sp)
    a930:	ddc01515 	stw	r23,84(sp)
    a934:	dd001215 	stw	r20,72(sp)
    a938:	e0800417 	ldw	r2,16(fp)
    a93c:	dcc01115 	stw	r19,68(sp)
    a940:	dfc01715 	stw	ra,92(sp)
    a944:	dd801415 	stw	r22,80(sp)
    a948:	dd401315 	stw	r21,76(sp)
    a94c:	dc801015 	stw	r18,64(sp)
    a950:	dc400f15 	stw	r17,60(sp)
    a954:	dc000e15 	stw	r16,56(sp)
    a958:	d9000b15 	stw	r4,44(sp)
    a95c:	d9c00915 	stw	r7,36(sp)
    a960:	1080040c 	andi	r2,r2,16
    a964:	282f883a 	mov	r23,r5
    a968:	3027883a 	mov	r19,r6
    a96c:	dd001817 	ldw	r20,96(sp)
    a970:	10000226 	beq	r2,zero,a97c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a974:	20800217 	ldw	r2,8(r4)
    a978:	e0800415 	stw	r2,16(fp)
    a97c:	d8c01a17 	ldw	r3,104(sp)
    a980:	a0c0cb26 	beq	r20,r3,acb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a984:	d8c00b17 	ldw	r3,44(sp)
    a988:	1c000117 	ldw	r16,4(r3)
    a98c:	d8c00917 	ldw	r3,36(sp)
    a990:	19400117 	ldw	r5,4(r3)
    a994:	2c000626 	beq	r5,r16,a9b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a998:	80c00007 	ldb	r3,0(r16)
    a99c:	00800a84 	movi	r2,42
    a9a0:	18801b26 	beq	r3,r2,aa10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a9a4:	8009883a 	mov	r4,r16
    a9a8:	000f4a40 	call	f4a4 <strcmp>
    a9ac:	1000181e 	bne	r2,zero,aa10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a9b0:	e5000015 	stw	r20,0(fp)
    a9b4:	e4c00115 	stw	r19,4(fp)
    a9b8:	b8010916 	blt	r23,zero,ade0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a9bc:	d8c01a17 	ldw	r3,104(sp)
    a9c0:	a5d9883a 	add	r12,r20,r23
    a9c4:	1b014126 	beq	r3,r12,aecc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a9c8:	00800044 	movi	r2,1
    a9cc:	e0800315 	stw	r2,12(fp)
    a9d0:	0005883a 	mov	r2,zero
    a9d4:	dfc01717 	ldw	ra,92(sp)
    a9d8:	df001617 	ldw	fp,88(sp)
    a9dc:	ddc01517 	ldw	r23,84(sp)
    a9e0:	dd801417 	ldw	r22,80(sp)
    a9e4:	dd401317 	ldw	r21,76(sp)
    a9e8:	dd001217 	ldw	r20,72(sp)
    a9ec:	dcc01117 	ldw	r19,68(sp)
    a9f0:	dc801017 	ldw	r18,64(sp)
    a9f4:	dc400f17 	ldw	r17,60(sp)
    a9f8:	dc000e17 	ldw	r16,56(sp)
    a9fc:	dec01804 	addi	sp,sp,96
    aa00:	f800283a 	ret
    aa04:	d8c00917 	ldw	r3,36(sp)
    aa08:	18800117 	ldw	r2,4(r3)
    aa0c:	80bfe826 	beq	r16,r2,a9b0 <__alt_data_end+0xfc00a9b0>
    aa10:	b800ef16 	blt	r23,zero,add0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    aa14:	d8c01a17 	ldw	r3,104(sp)
    aa18:	1dedc83a 	sub	r22,r3,r23
    aa1c:	e005883a 	mov	r2,fp
    aa20:	00c00044 	movi	r3,1
    aa24:	b039883a 	mov	fp,r22
    aa28:	0021883a 	mov	r16,zero
    aa2c:	a02d883a 	mov	r22,r20
    aa30:	d8000a45 	stb	zero,41(sp)
    aa34:	d8c00a05 	stb	r3,40(sp)
    aa38:	048000c4 	movi	r18,3
    aa3c:	1029883a 	mov	r20,r2
    aa40:	d8c00b17 	ldw	r3,44(sp)
    aa44:	b805883a 	mov	r2,r23
    aa48:	1ac00317 	ldw	r11,12(r3)
    aa4c:	581490fa 	slli	r10,r11,3
    aa50:	52800304 	addi	r10,r10,12
    aa54:	1aab883a 	add	r21,r3,r10
    aa58:	b007883a 	mov	r3,r22
    aa5c:	582d883a 	mov	r22,r11
    aa60:	a82f883a 	mov	r23,r21
    aa64:	1823883a 	mov	r17,r3
    aa68:	102b883a 	mov	r21,r2
    aa6c:	b0005526 	beq	r22,zero,abc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    aa70:	b8800017 	ldw	r2,0(r23)
    aa74:	a1400417 	ldw	r5,16(r20)
    aa78:	d8000415 	stw	zero,16(sp)
    aa7c:	d8000515 	stw	zero,20(sp)
    aa80:	d8000615 	stw	zero,24(sp)
    aa84:	d8000715 	stw	zero,28(sp)
    aa88:	d9400815 	stw	r5,32(sp)
    aa8c:	1100004c 	andi	r4,r2,1
    aa90:	1007d23a 	srai	r3,r2,8
    aa94:	20007526 	beq	r4,zero,ac6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    aa98:	89000017 	ldw	r4,0(r17)
    aa9c:	99800054 	ori	r6,r19,1
    aaa0:	20c7883a 	add	r3,r4,r3
    aaa4:	18c00017 	ldw	r3,0(r3)
    aaa8:	88c7883a 	add	r3,r17,r3
    aaac:	e0000326 	beq	fp,zero,aabc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    aab0:	d9c00a03 	ldbu	r7,40(sp)
    aab4:	e0c9803a 	cmpltu	r4,fp,r3
    aab8:	21c07226 	beq	r4,r7,ac84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    aabc:	1080008c 	andi	r2,r2,2
    aac0:	1000041e 	bne	r2,zero,aad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    aac4:	013fff84 	movi	r4,-2
    aac8:	a9007126 	beq	r21,r4,ac90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    aacc:	00bfff44 	movi	r2,-3
    aad0:	308c703a 	and	r6,r6,r2
    aad4:	b93fff17 	ldw	r4,-4(r23)
    aad8:	d9400404 	addi	r5,sp,16
    aadc:	d9c00917 	ldw	r7,36(sp)
    aae0:	20800017 	ldw	r2,0(r4)
    aae4:	d9400315 	stw	r5,12(sp)
    aae8:	d9401a17 	ldw	r5,104(sp)
    aaec:	d8c00015 	stw	r3,0(sp)
    aaf0:	d9400215 	stw	r5,8(sp)
    aaf4:	d9401917 	ldw	r5,100(sp)
    aaf8:	d9400115 	stw	r5,4(sp)
    aafc:	10800717 	ldw	r2,28(r2)
    ab00:	a80b883a 	mov	r5,r21
    ab04:	103ee83a 	callr	r2
    ab08:	a1400217 	ldw	r5,8(r20)
    ab0c:	d9000617 	ldw	r4,24(sp)
    ab10:	d8c00717 	ldw	r3,28(sp)
    ab14:	2908b03a 	or	r4,r5,r4
    ab18:	a1000215 	stw	r4,8(r20)
    ab1c:	01400184 	movi	r5,6
    ab20:	1940a426 	beq	r3,r5,adb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    ab24:	01400084 	movi	r5,2
    ab28:	1940a226 	beq	r3,r5,adb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    ab2c:	81403fcc 	andi	r5,r16,255
    ab30:	a1800017 	ldw	r6,0(r20)
    ab34:	28004f1e 	bne	r5,zero,ac74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    ab38:	30007926 	beq	r6,zero,ad20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    ab3c:	d9400417 	ldw	r5,16(sp)
    ab40:	29806926 	beq	r5,r6,ace8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    ab44:	28006d26 	beq	r5,zero,acfc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    ab48:	a2800317 	ldw	r10,12(r20)
    ab4c:	9100250e 	bge	r18,r4,abe4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    ab50:	2100004c 	andi	r4,r4,1
    ab54:	20000326 	beq	r4,zero,ab64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    ab58:	a0800417 	ldw	r2,16(r20)
    ab5c:	1080008c 	andi	r2,r2,2
    ab60:	1000201e 	bne	r2,zero,abe4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    ab64:	50004d1e 	bne	r10,zero,ac9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    ab68:	18002626 	beq	r3,zero,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    ab6c:	02800044 	movi	r10,1
    ab70:	181b883a 	mov	r13,r3
    ab74:	1a84f03a 	xor	r2,r3,r10
    ab78:	501f883a 	mov	r15,r10
    ab7c:	90801f0e 	bge	r18,r2,abfc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    ab80:	90c0880e 	bge	r18,r3,ada4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    ab84:	d9400417 	ldw	r5,16(sp)
    ab88:	1880008c 	andi	r2,r3,2
    ab8c:	d9000517 	ldw	r4,20(sp)
    ab90:	a1400015 	stw	r5,0(r20)
    ab94:	0021883a 	mov	r16,zero
    ab98:	a1000115 	stw	r4,4(r20)
    ab9c:	a0c00315 	stw	r3,12(r20)
    aba0:	10004f1e 	bne	r2,zero,ace0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    aba4:	6b40004c 	andi	r13,r13,1
    aba8:	68004d26 	beq	r13,zero,ace0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    abac:	a1000217 	ldw	r4,8(r20)
    abb0:	01400104 	movi	r5,4
    abb4:	21408826 	beq	r4,r5,add8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    abb8:	b5bfffc4 	addi	r22,r22,-1
    abbc:	bdfffe04 	addi	r23,r23,-8
    abc0:	b03fab1e 	bne	r22,zero,aa70 <__alt_data_end+0xfc00aa70>
    abc4:	d8800a43 	ldbu	r2,41(sp)
    abc8:	a82f883a 	mov	r23,r21
    abcc:	882d883a 	mov	r22,r17
    abd0:	10008126 	beq	r2,zero,add8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    abd4:	dd400a03 	ldbu	r21,40(sp)
    abd8:	a8007f26 	beq	r21,zero,add8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    abdc:	d8000a05 	stb	zero,40(sp)
    abe0:	003f9706 	br	aa40 <__alt_data_end+0xfc00aa40>
    abe4:	501f883a 	mov	r15,r10
    abe8:	181b883a 	mov	r13,r3
    abec:	02800b0e 	bge	zero,r10,ac1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    abf0:	00c0570e 	bge	zero,r3,ad50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    abf4:	1a84f03a 	xor	r2,r3,r10
    abf8:	90bfe116 	blt	r18,r2,ab80 <__alt_data_end+0xfc00ab80>
    abfc:	1bc6703a 	and	r3,r3,r15
    ac00:	90c09916 	blt	r18,r3,ae68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    ac04:	01000044 	movi	r4,1
    ac08:	a1000315 	stw	r4,12(r20)
    ac0c:	a0000015 	stw	zero,0(r20)
    ac10:	a1000217 	ldw	r4,8(r20)
    ac14:	04000044 	movi	r16,1
    ac18:	003fe506 	br	abb0 <__alt_data_end+0xfc00abb0>
    ac1c:	90c00a0e 	bge	r18,r3,ac48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    ac20:	1880004c 	andi	r2,r3,1
    ac24:	10000426 	beq	r2,zero,ac38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    ac28:	d9000b17 	ldw	r4,44(sp)
    ac2c:	20800217 	ldw	r2,8(r4)
    ac30:	1080008c 	andi	r2,r2,2
    ac34:	1000041e 	bne	r2,zero,ac48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    ac38:	1880005c 	xori	r2,r3,1
    ac3c:	90bfd216 	blt	r18,r2,ab88 <__alt_data_end+0xfc00ab88>
    ac40:	03c00044 	movi	r15,1
    ac44:	003fed06 	br	abfc <__alt_data_end+0xfc00abfc>
    ac48:	a8006e16 	blt	r21,zero,ae04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    ac4c:	d8801a17 	ldw	r2,104(sp)
    ac50:	354d883a 	add	r6,r6,r21
    ac54:	11805026 	beq	r2,r6,ad98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    ac58:	00c0a50e 	bge	zero,r3,aef0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    ac5c:	03c00044 	movi	r15,1
    ac60:	1bc4f03a 	xor	r2,r3,r15
    ac64:	7815883a 	mov	r10,r15
    ac68:	003fc406 	br	ab7c <__alt_data_end+0xfc00ab7c>
    ac6c:	980d883a 	mov	r6,r19
    ac70:	003f8d06 	br	aaa8 <__alt_data_end+0xfc00aaa8>
    ac74:	303fb11e 	bne	r6,zero,ab3c <__alt_data_end+0xfc00ab3c>
    ac78:	d9400417 	ldw	r5,16(sp)
    ac7c:	283fb21e 	bne	r5,zero,ab48 <__alt_data_end+0xfc00ab48>
    ac80:	003fcb06 	br	abb0 <__alt_data_end+0xfc00abb0>
    ac84:	00c00044 	movi	r3,1
    ac88:	d8c00a45 	stb	r3,41(sp)
    ac8c:	003fca06 	br	abb8 <__alt_data_end+0xfc00abb8>
    ac90:	294000cc 	andi	r5,r5,3
    ac94:	283fc826 	beq	r5,zero,abb8 <__alt_data_end+0xfc00abb8>
    ac98:	003f8c06 	br	aacc <__alt_data_end+0xfc00aacc>
    ac9c:	18001a26 	beq	r3,zero,ad08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    aca0:	181b883a 	mov	r13,r3
    aca4:	501f883a 	mov	r15,r10
    aca8:	50c4f03a 	xor	r2,r10,r3
    acac:	003fb306 	br	ab7c <__alt_data_end+0xfc00ab7c>
    acb0:	d8c00b17 	ldw	r3,44(sp)
    acb4:	1c000117 	ldw	r16,4(r3)
    acb8:	d8c01917 	ldw	r3,100(sp)
    acbc:	19400117 	ldw	r5,4(r3)
    acc0:	81400626 	beq	r16,r5,acdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    acc4:	80c00007 	ldb	r3,0(r16)
    acc8:	00800a84 	movi	r2,42
    accc:	18bf4d26 	beq	r3,r2,aa04 <__alt_data_end+0xfc00aa04>
    acd0:	8009883a 	mov	r4,r16
    acd4:	000f4a40 	call	f4a4 <strcmp>
    acd8:	10005c1e 	bne	r2,zero,ae4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    acdc:	e4c00215 	stw	r19,8(fp)
    ace0:	0005883a 	mov	r2,zero
    ace4:	003f3b06 	br	a9d4 <__alt_data_end+0xfc00a9d4>
    ace8:	a0c00117 	ldw	r3,4(r20)
    acec:	d8800517 	ldw	r2,20(sp)
    acf0:	1884b03a 	or	r2,r3,r2
    acf4:	a0800115 	stw	r2,4(r20)
    acf8:	003fad06 	br	abb0 <__alt_data_end+0xfc00abb0>
    acfc:	10803fcc 	andi	r2,r2,255
    ad00:	103f911e 	bne	r2,zero,ab48 <__alt_data_end+0xfc00ab48>
    ad04:	003faa06 	br	abb0 <__alt_data_end+0xfc00abb0>
    ad08:	501b883a 	mov	r13,r10
    ad0c:	5080005c 	xori	r2,r10,1
    ad10:	5007883a 	mov	r3,r10
    ad14:	90bfbb0e 	bge	r18,r2,ac04 <__alt_data_end+0xfc00ac04>
    ad18:	6880008c 	andi	r2,r13,2
    ad1c:	003f9f06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    ad20:	d8c00417 	ldw	r3,16(sp)
    ad24:	d9400517 	ldw	r5,20(sp)
    ad28:	a0c00015 	stw	r3,0(r20)
    ad2c:	a1400115 	stw	r5,4(r20)
    ad30:	18000526 	beq	r3,zero,ad48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    ad34:	20001626 	beq	r4,zero,ad90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    ad38:	d9400b17 	ldw	r5,44(sp)
    ad3c:	28c00217 	ldw	r3,8(r5)
    ad40:	18c0004c 	andi	r3,r3,1
    ad44:	183f2326 	beq	r3,zero,a9d4 <__alt_data_end+0xfc00a9d4>
    ad48:	1021883a 	mov	r16,r2
    ad4c:	003f9806 	br	abb0 <__alt_data_end+0xfc00abb0>
    ad50:	9280060e 	bge	r18,r10,ad6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    ad54:	5080004c 	andi	r2,r10,1
    ad58:	10002426 	beq	r2,zero,adec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ad5c:	d8c00b17 	ldw	r3,44(sp)
    ad60:	18800217 	ldw	r2,8(r3)
    ad64:	1080008c 	andi	r2,r2,2
    ad68:	10003c26 	beq	r2,zero,ae5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ad6c:	d9400417 	ldw	r5,16(sp)
    ad70:	a8004216 	blt	r21,zero,ae7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ad74:	d8c01a17 	ldw	r3,104(sp)
    ad78:	2d45883a 	add	r2,r5,r21
    ad7c:	18805726 	beq	r3,r2,aedc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ad80:	7880005c 	xori	r2,r15,1
    ad84:	781b883a 	mov	r13,r15
    ad88:	5007883a 	mov	r3,r10
    ad8c:	003fe106 	br	ad14 <__alt_data_end+0xfc00ad14>
    ad90:	1021883a 	mov	r16,r2
    ad94:	003f8806 	br	abb8 <__alt_data_end+0xfc00abb8>
    ad98:	03c00184 	movi	r15,6
    ad9c:	00ffb016 	blt	zero,r3,ac60 <__alt_data_end+0xfc00ac60>
    ada0:	7815883a 	mov	r10,r15
    ada4:	7880008c 	andi	r2,r15,2
    ada8:	781b883a 	mov	r13,r15
    adac:	5007883a 	mov	r3,r10
    adb0:	003f7a06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    adb4:	a039883a 	mov	fp,r20
    adb8:	e0c00315 	stw	r3,12(fp)
    adbc:	d8c00417 	ldw	r3,16(sp)
    adc0:	a0c00015 	stw	r3,0(r20)
    adc4:	d8c00517 	ldw	r3,20(sp)
    adc8:	a0c00115 	stw	r3,4(r20)
    adcc:	003f0106 	br	a9d4 <__alt_data_end+0xfc00a9d4>
    add0:	002d883a 	mov	r22,zero
    add4:	003f1106 	br	aa1c <__alt_data_end+0xfc00aa1c>
    add8:	8005883a 	mov	r2,r16
    addc:	003efd06 	br	a9d4 <__alt_data_end+0xfc00a9d4>
    ade0:	00bfff84 	movi	r2,-2
    ade4:	b8bfbe1e 	bne	r23,r2,ace0 <__alt_data_end+0xfc00ace0>
    ade8:	003ef706 	br	a9c8 <__alt_data_end+0xfc00a9c8>
    adec:	5080005c 	xori	r2,r10,1
    adf0:	90bf840e 	bge	r18,r2,ac04 <__alt_data_end+0xfc00ac04>
    adf4:	501b883a 	mov	r13,r10
    adf8:	5080008c 	andi	r2,r10,2
    adfc:	5007883a 	mov	r3,r10
    ae00:	003f6606 	br	ab9c <__alt_data_end+0xfc00ab9c>
    ae04:	013fff84 	movi	r4,-2
    ae08:	a9003226 	beq	r21,r4,aed4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    ae0c:	d9400917 	ldw	r5,36(sp)
    ae10:	d9001a17 	ldw	r4,104(sp)
    ae14:	d9c01917 	ldw	r7,100(sp)
    ae18:	28800017 	ldw	r2,0(r5)
    ae1c:	d9000015 	stw	r4,0(sp)
    ae20:	d9000917 	ldw	r4,36(sp)
    ae24:	10800817 	ldw	r2,32(r2)
    ae28:	a80b883a 	mov	r5,r21
    ae2c:	d8c00d15 	stw	r3,52(sp)
    ae30:	db400c15 	stw	r13,48(sp)
    ae34:	103ee83a 	callr	r2
    ae38:	1015883a 	mov	r10,r2
    ae3c:	101f883a 	mov	r15,r2
    ae40:	db400c17 	ldw	r13,48(sp)
    ae44:	d8c00d17 	ldw	r3,52(sp)
    ae48:	003f6906 	br	abf0 <__alt_data_end+0xfc00abf0>
    ae4c:	d8c00917 	ldw	r3,36(sp)
    ae50:	19400117 	ldw	r5,4(r3)
    ae54:	817ed31e 	bne	r16,r5,a9a4 <__alt_data_end+0xfc00a9a4>
    ae58:	003ed506 	br	a9b0 <__alt_data_end+0xfc00a9b0>
    ae5c:	5080005c 	xori	r2,r10,1
    ae60:	90bfe416 	blt	r18,r2,adf4 <__alt_data_end+0xfc00adf4>
    ae64:	003f6706 	br	ac04 <__alt_data_end+0xfc00ac04>
    ae68:	00800084 	movi	r2,2
    ae6c:	a0800315 	stw	r2,12(r20)
    ae70:	a0000015 	stw	zero,0(r20)
    ae74:	00800044 	movi	r2,1
    ae78:	003ed606 	br	a9d4 <__alt_data_end+0xfc00a9d4>
    ae7c:	013fff84 	movi	r4,-2
    ae80:	a9002526 	beq	r21,r4,af18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ae84:	d8c00917 	ldw	r3,36(sp)
    ae88:	d9c01917 	ldw	r7,100(sp)
    ae8c:	d9000917 	ldw	r4,36(sp)
    ae90:	18800017 	ldw	r2,0(r3)
    ae94:	d8c01a17 	ldw	r3,104(sp)
    ae98:	280d883a 	mov	r6,r5
    ae9c:	a80b883a 	mov	r5,r21
    aea0:	d8c00015 	stw	r3,0(sp)
    aea4:	10800817 	ldw	r2,32(r2)
    aea8:	da800c15 	stw	r10,48(sp)
    aeac:	dbc00d15 	stw	r15,52(sp)
    aeb0:	103ee83a 	callr	r2
    aeb4:	da800c17 	ldw	r10,48(sp)
    aeb8:	1007883a 	mov	r3,r2
    aebc:	101b883a 	mov	r13,r2
    aec0:	dbc00d17 	ldw	r15,52(sp)
    aec4:	1284f03a 	xor	r2,r2,r10
    aec8:	003f2c06 	br	ab7c <__alt_data_end+0xfc00ab7c>
    aecc:	00800184 	movi	r2,6
    aed0:	003ebe06 	br	a9cc <__alt_data_end+0xfc00a9cc>
    aed4:	00ff4b0e 	bge	zero,r3,ac04 <__alt_data_end+0xfc00ac04>
    aed8:	003f6006 	br	ac5c <__alt_data_end+0xfc00ac5c>
    aedc:	5080019c 	xori	r2,r10,6
    aee0:	90800916 	blt	r18,r2,af08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    aee4:	50c0018c 	andi	r3,r10,6
    aee8:	90ff460e 	bge	r18,r3,ac04 <__alt_data_end+0xfc00ac04>
    aeec:	003fde06 	br	ae68 <__alt_data_end+0xfc00ae68>
    aef0:	d8c01a17 	ldw	r3,104(sp)
    aef4:	2d45883a 	add	r2,r5,r21
    aef8:	18800326 	beq	r3,r2,af08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    aefc:	02800044 	movi	r10,1
    af00:	501f883a 	mov	r15,r10
    af04:	003f9e06 	br	ad80 <__alt_data_end+0xfc00ad80>
    af08:	03400184 	movi	r13,6
    af0c:	00800084 	movi	r2,2
    af10:	6807883a 	mov	r3,r13
    af14:	003f1d06 	br	ab8c <__alt_data_end+0xfc00ab8c>
    af18:	501b883a 	mov	r13,r10
    af1c:	5080005c 	xori	r2,r10,1
    af20:	5007883a 	mov	r3,r10
    af24:	003f7b06 	br	ad14 <__alt_data_end+0xfc00ad14>

0000af28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    af28:	deffef04 	addi	sp,sp,-68
    af2c:	ddc00e15 	stw	r23,56(sp)
    af30:	dd000b15 	stw	r20,44(sp)
    af34:	dc400815 	stw	r17,32(sp)
    af38:	3029883a 	mov	r20,r6
    af3c:	dfc01015 	stw	ra,64(sp)
    af40:	df000f15 	stw	fp,60(sp)
    af44:	dd800d15 	stw	r22,52(sp)
    af48:	dd400c15 	stw	r21,48(sp)
    af4c:	dcc00a15 	stw	r19,40(sp)
    af50:	dc800915 	stw	r18,36(sp)
    af54:	dc000715 	stw	r16,28(sp)
    af58:	d9000515 	stw	r4,20(sp)
    af5c:	2823883a 	mov	r17,r5
    af60:	382f883a 	mov	r23,r7
    af64:	000b3100 	call	b310 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    af68:	100d883a 	mov	r6,r2
    af6c:	10803fcc 	andi	r2,r2,255
    af70:	1000441e 	bne	r2,zero,b084 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    af74:	bc000217 	ldw	r16,8(r23)
    af78:	8080040c 	andi	r2,r16,16
    af7c:	10000226 	beq	r2,zero,af88 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    af80:	d8c00517 	ldw	r3,20(sp)
    af84:	1c000217 	ldw	r16,8(r3)
    af88:	d8c00517 	ldw	r3,20(sp)
    af8c:	d8800517 	ldw	r2,20(sp)
    af90:	1f000317 	ldw	fp,12(r3)
    af94:	e01090fa 	slli	r8,fp,3
    af98:	40c00304 	addi	r3,r8,12
    af9c:	10ed883a 	add	r22,r2,r3
    afa0:	80c0004c 	andi	r3,r16,1
    afa4:	42000204 	addi	r8,r8,8
    afa8:	d8c00415 	stw	r3,16(sp)
    afac:	122b883a 	add	r21,r2,r8
    afb0:	e0003226 	beq	fp,zero,b07c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    afb4:	b1800017 	ldw	r6,0(r22)
    afb8:	d8000015 	stw	zero,0(sp)
    afbc:	d8000115 	stw	zero,4(sp)
    afc0:	dc000215 	stw	r16,8(sp)
    afc4:	d8000315 	stw	zero,12(sp)
    afc8:	34c0008c 	andi	r19,r6,2
    afcc:	3480004c 	andi	r18,r6,1
    afd0:	9800021e 	bne	r19,zero,afdc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    afd4:	d8c00417 	ldw	r3,16(sp)
    afd8:	18002426 	beq	r3,zero,b06c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    afdc:	a0003626 	beq	r20,zero,b0b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    afe0:	300dd23a 	srai	r6,r6,8
    afe4:	90000326 	beq	r18,zero,aff4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    afe8:	a0800017 	ldw	r2,0(r20)
    afec:	118d883a 	add	r6,r2,r6
    aff0:	31800017 	ldw	r6,0(r6)
    aff4:	a18d883a 	add	r6,r20,r6
    aff8:	a9000017 	ldw	r4,0(r21)
    affc:	d80f883a 	mov	r7,sp
    b000:	880b883a 	mov	r5,r17
    b004:	20800017 	ldw	r2,0(r4)
    b008:	10800617 	ldw	r2,24(r2)
    b00c:	103ee83a 	callr	r2
    b010:	100d883a 	mov	r6,r2
    b014:	10803fcc 	andi	r2,r2,255
    b018:	10001426 	beq	r2,zero,b06c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b01c:	d8800317 	ldw	r2,12(sp)
    b020:	00c00204 	movi	r3,8
    b024:	10c02626 	beq	r2,r3,b0c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    b028:	d8800117 	ldw	r2,4(sp)
    b02c:	00c000c4 	movi	r3,3
    b030:	1880040e 	bge	r3,r2,b044 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b034:	9800031e 	bne	r19,zero,b044 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b038:	00ffff44 	movi	r3,-3
    b03c:	10c4703a 	and	r2,r2,r3
    b040:	d8800115 	stw	r2,4(sp)
    b044:	b9400317 	ldw	r5,12(r23)
    b048:	28002126 	beq	r5,zero,b0d0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    b04c:	b8800017 	ldw	r2,0(r23)
    b050:	d9000017 	ldw	r4,0(sp)
    b054:	11004d1e 	bne	r2,r4,b18c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    b058:	10003126 	beq	r2,zero,b120 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    b05c:	b9000117 	ldw	r4,4(r23)
    b060:	d8800117 	ldw	r2,4(sp)
    b064:	2084b03a 	or	r2,r4,r2
    b068:	b8800115 	stw	r2,4(r23)
    b06c:	e73fffc4 	addi	fp,fp,-1
    b070:	b5bffe04 	addi	r22,r22,-8
    b074:	ad7ffe04 	addi	r21,r21,-8
    b078:	e03fce1e 	bne	fp,zero,afb4 <__alt_data_end+0xfc00afb4>
    b07c:	b9800117 	ldw	r6,4(r23)
    b080:	300cc03a 	cmpne	r6,r6,zero
    b084:	3005883a 	mov	r2,r6
    b088:	dfc01017 	ldw	ra,64(sp)
    b08c:	df000f17 	ldw	fp,60(sp)
    b090:	ddc00e17 	ldw	r23,56(sp)
    b094:	dd800d17 	ldw	r22,52(sp)
    b098:	dd400c17 	ldw	r21,48(sp)
    b09c:	dd000b17 	ldw	r20,44(sp)
    b0a0:	dcc00a17 	ldw	r19,40(sp)
    b0a4:	dc800917 	ldw	r18,36(sp)
    b0a8:	dc400817 	ldw	r17,32(sp)
    b0ac:	dc000717 	ldw	r16,28(sp)
    b0b0:	dec01104 	addi	sp,sp,68
    b0b4:	f800283a 	ret
    b0b8:	000d883a 	mov	r6,zero
    b0bc:	003fce06 	br	aff8 <__alt_data_end+0xfc00aff8>
    b0c0:	903fd926 	beq	r18,zero,b028 <__alt_data_end+0xfc00b028>
    b0c4:	a8800017 	ldw	r2,0(r21)
    b0c8:	d8800315 	stw	r2,12(sp)
    b0cc:	003fd606 	br	b028 <__alt_data_end+0xfc00b028>
    b0d0:	d9000017 	ldw	r4,0(sp)
    b0d4:	d8800117 	ldw	r2,4(sp)
    b0d8:	00c000c4 	movi	r3,3
    b0dc:	b9000015 	stw	r4,0(r23)
    b0e0:	d9000217 	ldw	r4,8(sp)
    b0e4:	b8800115 	stw	r2,4(r23)
    b0e8:	b9000215 	stw	r4,8(r23)
    b0ec:	d9000317 	ldw	r4,12(sp)
    b0f0:	b9000315 	stw	r4,12(r23)
    b0f4:	18bfe30e 	bge	r3,r2,b084 <__alt_data_end+0xfc00b084>
    b0f8:	1100008c 	andi	r4,r2,2
    b0fc:	20001926 	beq	r4,zero,b164 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    b100:	d8c00517 	ldw	r3,20(sp)
    b104:	18800217 	ldw	r2,8(r3)
    b108:	1080004c 	andi	r2,r2,1
    b10c:	103fdd26 	beq	r2,zero,b084 <__alt_data_end+0xfc00b084>
    b110:	e73fffc4 	addi	fp,fp,-1
    b114:	b5bffe04 	addi	r22,r22,-8
    b118:	ad7ffe04 	addi	r21,r21,-8
    b11c:	003fd606 	br	b078 <__alt_data_end+0xfc00b078>
    b120:	d8800317 	ldw	r2,12(sp)
    b124:	00c00204 	movi	r3,8
    b128:	10c00b26 	beq	r2,r3,b158 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b12c:	28c00a26 	beq	r5,r3,b158 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b130:	11000117 	ldw	r4,4(r2)
    b134:	29400117 	ldw	r5,4(r5)
    b138:	217fc826 	beq	r4,r5,b05c <__alt_data_end+0xfc00b05c>
    b13c:	20800007 	ldb	r2,0(r4)
    b140:	00c00a84 	movi	r3,42
    b144:	10c00426 	beq	r2,r3,b158 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b148:	d9800615 	stw	r6,24(sp)
    b14c:	000f4a40 	call	f4a4 <strcmp>
    b150:	d9800617 	ldw	r6,24(sp)
    b154:	103fc126 	beq	r2,zero,b05c <__alt_data_end+0xfc00b05c>
    b158:	00800084 	movi	r2,2
    b15c:	b8800115 	stw	r2,4(r23)
    b160:	003fc806 	br	b084 <__alt_data_end+0xfc00b084>
    b164:	1080004c 	andi	r2,r2,1
    b168:	103fc626 	beq	r2,zero,b084 <__alt_data_end+0xfc00b084>
    b16c:	d8c00517 	ldw	r3,20(sp)
    b170:	18800217 	ldw	r2,8(r3)
    b174:	1080008c 	andi	r2,r2,2
    b178:	103fc226 	beq	r2,zero,b084 <__alt_data_end+0xfc00b084>
    b17c:	e73fffc4 	addi	fp,fp,-1
    b180:	b5bffe04 	addi	r22,r22,-8
    b184:	ad7ffe04 	addi	r21,r21,-8
    b188:	003fbb06 	br	b078 <__alt_data_end+0xfc00b078>
    b18c:	00800084 	movi	r2,2
    b190:	b8000015 	stw	zero,0(r23)
    b194:	b8800115 	stw	r2,4(r23)
    b198:	003fba06 	br	b084 <__alt_data_end+0xfc00b084>

0000b19c <_ZNSt9type_infoD1Ev>:
    b19c:	f800283a 	ret

0000b1a0 <_ZNKSt9type_info14__is_pointer_pEv>:
    b1a0:	0005883a 	mov	r2,zero
    b1a4:	f800283a 	ret

0000b1a8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    b1a8:	0005883a 	mov	r2,zero
    b1ac:	f800283a 	ret

0000b1b0 <_ZNSt9type_infoD0Ev>:
    b1b0:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000b1b4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b1b4:	21000117 	ldw	r4,4(r4)
    b1b8:	29400117 	ldw	r5,4(r5)
    b1bc:	21400c26 	beq	r4,r5,b1f0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b1c0:	20c00007 	ldb	r3,0(r4)
    b1c4:	00800a84 	movi	r2,42
    b1c8:	18800726 	beq	r3,r2,b1e8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b1cc:	deffff04 	addi	sp,sp,-4
    b1d0:	dfc00015 	stw	ra,0(sp)
    b1d4:	000f4a40 	call	f4a4 <strcmp>
    b1d8:	1005003a 	cmpeq	r2,r2,zero
    b1dc:	dfc00017 	ldw	ra,0(sp)
    b1e0:	dec00104 	addi	sp,sp,4
    b1e4:	f800283a 	ret
    b1e8:	0005883a 	mov	r2,zero
    b1ec:	f800283a 	ret
    b1f0:	00800044 	movi	r2,1
    b1f4:	f800283a 	ret

0000b1f8 <_ZdlPv>:
    b1f8:	000e4981 	jmpi	e498 <free>

0000b1fc <__cxa_pure_virtual>:
    b1fc:	014000f4 	movhi	r5,3
    b200:	deffff04 	addi	sp,sp,-4
    b204:	2969d804 	addi	r5,r5,-22688
    b208:	018006c4 	movi	r6,27
    b20c:	01000084 	movi	r4,2
    b210:	dfc00015 	stw	ra,0(sp)
    b214:	001fa680 	call	1fa68 <write>
    b218:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000b21c <__cxa_deleted_virtual>:
    b21c:	014000f4 	movhi	r5,3
    b220:	deffff04 	addi	sp,sp,-4
    b224:	2969df04 	addi	r5,r5,-22660
    b228:	01800784 	movi	r6,30
    b22c:	01000084 	movi	r4,2
    b230:	dfc00015 	stw	ra,0(sp)
    b234:	001fa680 	call	1fa68 <write>
    b238:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000b23c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b23c:	20800017 	ldw	r2,0(r4)
    b240:	defffa04 	addi	sp,sp,-24
    b244:	dc000415 	stw	r16,16(sp)
    b248:	10800617 	ldw	r2,24(r2)
    b24c:	3021883a 	mov	r16,r6
    b250:	31800017 	ldw	r6,0(r6)
    b254:	00c00404 	movi	r3,16
    b258:	d8c00215 	stw	r3,8(sp)
    b25c:	dfc00515 	stw	ra,20(sp)
    b260:	d8000015 	stw	zero,0(sp)
    b264:	d8000115 	stw	zero,4(sp)
    b268:	d8000315 	stw	zero,12(sp)
    b26c:	d80f883a 	mov	r7,sp
    b270:	103ee83a 	callr	r2
    b274:	d8800117 	ldw	r2,4(sp)
    b278:	00c00184 	movi	r3,6
    b27c:	1080018c 	andi	r2,r2,6
    b280:	10c00526 	beq	r2,r3,b298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b284:	0005883a 	mov	r2,zero
    b288:	dfc00517 	ldw	ra,20(sp)
    b28c:	dc000417 	ldw	r16,16(sp)
    b290:	dec00604 	addi	sp,sp,24
    b294:	f800283a 	ret
    b298:	d8c00017 	ldw	r3,0(sp)
    b29c:	00800044 	movi	r2,1
    b2a0:	80c00015 	stw	r3,0(r16)
    b2a4:	dfc00517 	ldw	ra,20(sp)
    b2a8:	dc000417 	ldw	r16,16(sp)
    b2ac:	dec00604 	addi	sp,sp,24
    b2b0:	f800283a 	ret

0000b2b4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b2b4:	d8800017 	ldw	r2,0(sp)
    b2b8:	11800226 	beq	r2,r6,b2c4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b2bc:	00800044 	movi	r2,1
    b2c0:	f800283a 	ret
    b2c4:	00800184 	movi	r2,6
    b2c8:	f800283a 	ret

0000b2cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b2cc:	008000f4 	movhi	r2,3
    b2d0:	10a9f504 	addi	r2,r2,-22572
    b2d4:	20800015 	stw	r2,0(r4)
    b2d8:	000b19c1 	jmpi	b19c <_ZNSt9type_infoD1Ev>

0000b2dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b2dc:	defffe04 	addi	sp,sp,-8
    b2e0:	008000f4 	movhi	r2,3
    b2e4:	dc000015 	stw	r16,0(sp)
    b2e8:	dfc00115 	stw	ra,4(sp)
    b2ec:	10a9f504 	addi	r2,r2,-22572
    b2f0:	20800015 	stw	r2,0(r4)
    b2f4:	2021883a 	mov	r16,r4
    b2f8:	000b19c0 	call	b19c <_ZNSt9type_infoD1Ev>
    b2fc:	8009883a 	mov	r4,r16
    b300:	dfc00117 	ldw	ra,4(sp)
    b304:	dc000017 	ldw	r16,0(sp)
    b308:	dec00204 	addi	sp,sp,8
    b30c:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000b310 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b310:	21000117 	ldw	r4,4(r4)
    b314:	29400117 	ldw	r5,4(r5)
    b318:	defffd04 	addi	sp,sp,-12
    b31c:	dc400115 	stw	r17,4(sp)
    b320:	dc000015 	stw	r16,0(sp)
    b324:	dfc00215 	stw	ra,8(sp)
    b328:	3023883a 	mov	r17,r6
    b32c:	3821883a 	mov	r16,r7
    b330:	21400526 	beq	r4,r5,b348 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b334:	20c00007 	ldb	r3,0(r4)
    b338:	00800a84 	movi	r2,42
    b33c:	18800d26 	beq	r3,r2,b374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b340:	000f4a40 	call	f4a4 <strcmp>
    b344:	10000b1e 	bne	r2,zero,b374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b348:	00800204 	movi	r2,8
    b34c:	80800315 	stw	r2,12(r16)
    b350:	00800184 	movi	r2,6
    b354:	80800115 	stw	r2,4(r16)
    b358:	84400015 	stw	r17,0(r16)
    b35c:	00800044 	movi	r2,1
    b360:	dfc00217 	ldw	ra,8(sp)
    b364:	dc400117 	ldw	r17,4(sp)
    b368:	dc000017 	ldw	r16,0(sp)
    b36c:	dec00304 	addi	sp,sp,12
    b370:	f800283a 	ret
    b374:	0005883a 	mov	r2,zero
    b378:	003ff906 	br	b360 <__alt_data_end+0xfc00b360>

0000b37c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b37c:	defffa04 	addi	sp,sp,-24
    b380:	dc800415 	stw	r18,16(sp)
    b384:	d8800817 	ldw	r2,32(sp)
    b388:	dc800617 	ldw	r18,24(sp)
    b38c:	dc400315 	stw	r17,12(sp)
    b390:	dc000215 	stw	r16,8(sp)
    b394:	dfc00515 	stw	ra,20(sp)
    b398:	dc400917 	ldw	r17,36(sp)
    b39c:	24000117 	ldw	r16,4(r4)
    b3a0:	90801526 	beq	r18,r2,b3f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b3a4:	39400117 	ldw	r5,4(r7)
    b3a8:	2c000826 	beq	r5,r16,b3cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b3ac:	80c00007 	ldb	r3,0(r16)
    b3b0:	00800a84 	movi	r2,42
    b3b4:	18800926 	beq	r3,r2,b3dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b3b8:	8009883a 	mov	r4,r16
    b3bc:	d9800115 	stw	r6,4(sp)
    b3c0:	000f4a40 	call	f4a4 <strcmp>
    b3c4:	d9800117 	ldw	r6,4(sp)
    b3c8:	1000041e 	bne	r2,zero,b3dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b3cc:	00800044 	movi	r2,1
    b3d0:	8c800015 	stw	r18,0(r17)
    b3d4:	89800115 	stw	r6,4(r17)
    b3d8:	88800315 	stw	r2,12(r17)
    b3dc:	0005883a 	mov	r2,zero
    b3e0:	dfc00517 	ldw	ra,20(sp)
    b3e4:	dc800417 	ldw	r18,16(sp)
    b3e8:	dc400317 	ldw	r17,12(sp)
    b3ec:	dc000217 	ldw	r16,8(sp)
    b3f0:	dec00604 	addi	sp,sp,24
    b3f4:	f800283a 	ret
    b3f8:	d8800717 	ldw	r2,28(sp)
    b3fc:	11400117 	ldw	r5,4(r2)
    b400:	81400a26 	beq	r16,r5,b42c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b404:	80c00007 	ldb	r3,0(r16)
    b408:	00800a84 	movi	r2,42
    b40c:	18800c26 	beq	r3,r2,b440 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b410:	8009883a 	mov	r4,r16
    b414:	d9800115 	stw	r6,4(sp)
    b418:	d9c00015 	stw	r7,0(sp)
    b41c:	000f4a40 	call	f4a4 <strcmp>
    b420:	d9800117 	ldw	r6,4(sp)
    b424:	d9c00017 	ldw	r7,0(sp)
    b428:	1000021e 	bne	r2,zero,b434 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b42c:	89800215 	stw	r6,8(r17)
    b430:	003fea06 	br	b3dc <__alt_data_end+0xfc00b3dc>
    b434:	39400117 	ldw	r5,4(r7)
    b438:	817fdf1e 	bne	r16,r5,b3b8 <__alt_data_end+0xfc00b3b8>
    b43c:	003fe306 	br	b3cc <__alt_data_end+0xfc00b3cc>
    b440:	38800117 	ldw	r2,4(r7)
    b444:	80bfe51e 	bne	r16,r2,b3dc <__alt_data_end+0xfc00b3dc>
    b448:	003fe006 	br	b3cc <__alt_data_end+0xfc00b3cc>

0000b44c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b44c:	20800117 	ldw	r2,4(r4)
    b450:	28c00117 	ldw	r3,4(r5)
    b454:	10c02926 	beq	r2,r3,b4fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b458:	defffb04 	addi	sp,sp,-20
    b45c:	dcc00315 	stw	r19,12(sp)
    b460:	dc800215 	stw	r18,8(sp)
    b464:	dc400115 	stw	r17,4(sp)
    b468:	dc000015 	stw	r16,0(sp)
    b46c:	dfc00415 	stw	ra,16(sp)
    b470:	2821883a 	mov	r16,r5
    b474:	11400007 	ldb	r5,0(r2)
    b478:	2025883a 	mov	r18,r4
    b47c:	01000a84 	movi	r4,42
    b480:	3823883a 	mov	r17,r7
    b484:	3027883a 	mov	r19,r6
    b488:	29000626 	beq	r5,r4,b4a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b48c:	180b883a 	mov	r5,r3
    b490:	1009883a 	mov	r4,r2
    b494:	000f4a40 	call	f4a4 <strcmp>
    b498:	1000021e 	bne	r2,zero,b4a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b49c:	00800044 	movi	r2,1
    b4a0:	00000306 	br	b4b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b4a4:	008000c4 	movi	r2,3
    b4a8:	1440082e 	bgeu	r2,r17,b4cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b4ac:	0005883a 	mov	r2,zero
    b4b0:	dfc00417 	ldw	ra,16(sp)
    b4b4:	dcc00317 	ldw	r19,12(sp)
    b4b8:	dc800217 	ldw	r18,8(sp)
    b4bc:	dc400117 	ldw	r17,4(sp)
    b4c0:	dc000017 	ldw	r16,0(sp)
    b4c4:	dec00504 	addi	sp,sp,20
    b4c8:	f800283a 	ret
    b4cc:	80800017 	ldw	r2,0(r16)
    b4d0:	980d883a 	mov	r6,r19
    b4d4:	900b883a 	mov	r5,r18
    b4d8:	10800517 	ldw	r2,20(r2)
    b4dc:	8009883a 	mov	r4,r16
    b4e0:	dfc00417 	ldw	ra,16(sp)
    b4e4:	dcc00317 	ldw	r19,12(sp)
    b4e8:	dc800217 	ldw	r18,8(sp)
    b4ec:	dc400117 	ldw	r17,4(sp)
    b4f0:	dc000017 	ldw	r16,0(sp)
    b4f4:	dec00504 	addi	sp,sp,20
    b4f8:	1000683a 	jmp	r2
    b4fc:	00800044 	movi	r2,1
    b500:	f800283a 	ret

0000b504 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b504:	00800074 	movhi	r2,1
    b508:	deffef04 	addi	sp,sp,-68
    b50c:	10af9b04 	addi	r2,r2,-16788
    b510:	d8800615 	stw	r2,24(sp)
    b514:	008000b4 	movhi	r2,2
    b518:	108eca04 	addi	r2,r2,15144
    b51c:	d8800715 	stw	r2,28(sp)
    b520:	00800074 	movhi	r2,1
    b524:	10ad5704 	addi	r2,r2,-19108
    b528:	d9000d15 	stw	r4,52(sp)
    b52c:	d809883a 	mov	r4,sp
    b530:	d8800915 	stw	r2,36(sp)
    b534:	dfc01015 	stw	ra,64(sp)
    b538:	df000f15 	stw	fp,60(sp)
    b53c:	dec00815 	stw	sp,32(sp)
    b540:	dec00a15 	stw	sp,40(sp)
    b544:	000e0a40 	call	e0a4 <_Unwind_SjLj_Register>
    b548:	00800044 	movi	r2,1
    b54c:	d8800115 	stw	r2,4(sp)
    b550:	d8800d17 	ldw	r2,52(sp)
    b554:	103ee83a 	callr	r2
    b558:	000e4200 	call	e420 <abort>
    b55c:	d8c00217 	ldw	r3,8(sp)
    b560:	d8800117 	ldw	r2,4(sp)
    b564:	d8c00d15 	stw	r3,52(sp)
    b568:	d8c00317 	ldw	r3,12(sp)
    b56c:	d8c00e15 	stw	r3,56(sp)
    b570:	10000b26 	beq	r2,zero,b5a0 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b574:	10bfffc4 	addi	r2,r2,-1
    b578:	10000126 	beq	r2,zero,b580 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b57c:	003b68fa 	trap	3
    b580:	d8000115 	stw	zero,4(sp)
    b584:	000c8b00 	call	c8b0 <__cxa_end_catch>
    b588:	d8c00e17 	ldw	r3,56(sp)
    b58c:	00bfffc4 	movi	r2,-1
    b590:	18800826 	beq	r3,r2,b5b4 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b594:	d9000d17 	ldw	r4,52(sp)
    b598:	d8800115 	stw	r2,4(sp)
    b59c:	000e2a00 	call	e2a0 <_Unwind_SjLj_Resume>
    b5a0:	d9000d17 	ldw	r4,52(sp)
    b5a4:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    b5a8:	00800084 	movi	r2,2
    b5ac:	d8800115 	stw	r2,4(sp)
    b5b0:	000e4200 	call	e420 <abort>
    b5b4:	d8800e17 	ldw	r2,56(sp)
    b5b8:	d9000d17 	ldw	r4,52(sp)
    b5bc:	d8800115 	stw	r2,4(sp)
    b5c0:	000c46c0 	call	c46c <__cxa_call_unexpected>

0000b5c4 <_ZSt9terminatev>:
    b5c4:	008000f4 	movhi	r2,3
    b5c8:	10b77304 	addi	r2,r2,-8756
    b5cc:	11000017 	ldw	r4,0(r2)
    b5d0:	deffff04 	addi	sp,sp,-4
    b5d4:	dfc00015 	stw	ra,0(sp)
    b5d8:	000b5040 	call	b504 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b5dc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b5dc:	deffff04 	addi	sp,sp,-4
    b5e0:	dfc00015 	stw	ra,0(sp)
    b5e4:	203ee83a 	callr	r4
    b5e8:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000b5ec <_ZSt10unexpectedv>:
    b5ec:	008000f4 	movhi	r2,3
    b5f0:	10b77204 	addi	r2,r2,-8760
    b5f4:	11000017 	ldw	r4,0(r2)
    b5f8:	deffff04 	addi	sp,sp,-4
    b5fc:	dfc00015 	stw	ra,0(sp)
    b600:	000b5dc0 	call	b5dc <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b604 <_ZSt13set_terminatePFvvE>:
    b604:	00c000f4 	movhi	r3,3
    b608:	18f77304 	addi	r3,r3,-8756
    b60c:	18800017 	ldw	r2,0(r3)
    b610:	19000015 	stw	r4,0(r3)
    b614:	f800283a 	ret

0000b618 <_ZSt13get_terminatev>:
    b618:	008000f4 	movhi	r2,3
    b61c:	10b77304 	addi	r2,r2,-8756
    b620:	10800017 	ldw	r2,0(r2)
    b624:	f800283a 	ret

0000b628 <_ZSt14set_unexpectedPFvvE>:
    b628:	00c000f4 	movhi	r3,3
    b62c:	18f77204 	addi	r3,r3,-8760
    b630:	18800017 	ldw	r2,0(r3)
    b634:	19000015 	stw	r4,0(r3)
    b638:	f800283a 	ret

0000b63c <_ZSt14get_unexpectedv>:
    b63c:	008000f4 	movhi	r2,3
    b640:	10b77204 	addi	r2,r2,-8760
    b644:	10800017 	ldw	r2,0(r2)
    b648:	f800283a 	ret

0000b64c <_ZL21size_of_encoded_valueh>:
    b64c:	deffff04 	addi	sp,sp,-4
    b650:	dfc00015 	stw	ra,0(sp)
    b654:	20c03fcc 	andi	r3,r4,255
    b658:	00803fc4 	movi	r2,255
    b65c:	18802026 	beq	r3,r2,b6e0 <_ZL21size_of_encoded_valueh+0x94>
    b660:	210001cc 	andi	r4,r4,7
    b664:	00800144 	movi	r2,5
    b668:	11001c36 	bltu	r2,r4,b6dc <_ZL21size_of_encoded_valueh+0x90>
    b66c:	200890ba 	slli	r4,r4,2
    b670:	00800074 	movhi	r2,1
    b674:	10ada104 	addi	r2,r2,-18812
    b678:	2089883a 	add	r4,r4,r2
    b67c:	20800017 	ldw	r2,0(r4)
    b680:	1000683a 	jmp	r2
    b684:	0000b69c 	xori	zero,zero,730
    b688:	0000b6dc 	xori	zero,zero,731
    b68c:	0000b6ac 	andhi	zero,zero,730
    b690:	0000b69c 	xori	zero,zero,730
    b694:	0000b6cc 	andi	zero,zero,731
    b698:	0000b6bc 	xorhi	zero,zero,730
    b69c:	00800104 	movi	r2,4
    b6a0:	dfc00017 	ldw	ra,0(sp)
    b6a4:	dec00104 	addi	sp,sp,4
    b6a8:	f800283a 	ret
    b6ac:	00800084 	movi	r2,2
    b6b0:	dfc00017 	ldw	ra,0(sp)
    b6b4:	dec00104 	addi	sp,sp,4
    b6b8:	f800283a 	ret
    b6bc:	00800044 	movi	r2,1
    b6c0:	dfc00017 	ldw	ra,0(sp)
    b6c4:	dec00104 	addi	sp,sp,4
    b6c8:	f800283a 	ret
    b6cc:	00800204 	movi	r2,8
    b6d0:	dfc00017 	ldw	ra,0(sp)
    b6d4:	dec00104 	addi	sp,sp,4
    b6d8:	f800283a 	ret
    b6dc:	000e4200 	call	e420 <abort>
    b6e0:	0005883a 	mov	r2,zero
    b6e4:	dfc00017 	ldw	ra,0(sp)
    b6e8:	dec00104 	addi	sp,sp,4
    b6ec:	f800283a 	ret

0000b6f0 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b6f0:	deffff04 	addi	sp,sp,-4
    b6f4:	dfc00015 	stw	ra,0(sp)
    b6f8:	20c03fcc 	andi	r3,r4,255
    b6fc:	00801404 	movi	r2,80
    b700:	18807326 	beq	r3,r2,b8d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b704:	20c003cc 	andi	r3,r4,15
    b708:	00800304 	movi	r2,12
    b70c:	10c06f36 	bltu	r2,r3,b8cc <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b710:	180690ba 	slli	r3,r3,2
    b714:	02000074 	movhi	r8,1
    b718:	422dca04 	addi	r8,r8,-18648
    b71c:	1a07883a 	add	r3,r3,r8
    b720:	18800017 	ldw	r2,0(r3)
    b724:	1000683a 	jmp	r2
    b728:	0000b75c 	xori	zero,zero,733
    b72c:	0000b878 	rdprs	zero,zero,737
    b730:	0000b8b4 	movhi	zero,738
    b734:	0000b75c 	xori	zero,zero,733
    b738:	0000b7c0 	call	b7c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x16c>
    b73c:	0000b814 	movui	zero,736
    b740:	0000b8cc 	andi	zero,zero,739
    b744:	0000b8cc 	andi	zero,zero,739
    b748:	0000b8cc 	andi	zero,zero,739
    b74c:	0000b820 	cmpeqi	zero,zero,736
    b750:	0000b7f0 	cmpltui	zero,zero,735
    b754:	0000b75c 	xori	zero,zero,733
    b758:	0000b7c0 	call	b7c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x16c>
    b75c:	30800043 	ldbu	r2,1(r6)
    b760:	30c00083 	ldbu	r3,2(r6)
    b764:	324000c3 	ldbu	r9,3(r6)
    b768:	32000003 	ldbu	r8,0(r6)
    b76c:	1004923a 	slli	r2,r2,8
    b770:	1806943a 	slli	r3,r3,16
    b774:	4812963a 	slli	r9,r9,24
    b778:	1204b03a 	or	r2,r2,r8
    b77c:	1884b03a 	or	r2,r3,r2
    b780:	4886b03a 	or	r3,r9,r2
    b784:	30800104 	addi	r2,r6,4
    b788:	18000926 	beq	r3,zero,b7b0 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b78c:	22001c0c 	andi	r8,r4,112
    b790:	02400404 	movi	r9,16
    b794:	42405726 	beq	r8,r9,b8f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b798:	21003fcc 	andi	r4,r4,255
    b79c:	2100201c 	xori	r4,r4,128
    b7a0:	213fe004 	addi	r4,r4,-128
    b7a4:	1947883a 	add	r3,r3,r5
    b7a8:	2000010e 	bge	r4,zero,b7b0 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b7ac:	18c00017 	ldw	r3,0(r3)
    b7b0:	38c00015 	stw	r3,0(r7)
    b7b4:	dfc00017 	ldw	ra,0(sp)
    b7b8:	dec00104 	addi	sp,sp,4
    b7bc:	f800283a 	ret
    b7c0:	30800043 	ldbu	r2,1(r6)
    b7c4:	30c00083 	ldbu	r3,2(r6)
    b7c8:	324000c3 	ldbu	r9,3(r6)
    b7cc:	32000003 	ldbu	r8,0(r6)
    b7d0:	1004923a 	slli	r2,r2,8
    b7d4:	1806943a 	slli	r3,r3,16
    b7d8:	4812963a 	slli	r9,r9,24
    b7dc:	1204b03a 	or	r2,r2,r8
    b7e0:	1884b03a 	or	r2,r3,r2
    b7e4:	4886b03a 	or	r3,r9,r2
    b7e8:	30800204 	addi	r2,r6,8
    b7ec:	003fe606 	br	b788 <__alt_data_end+0xfc00b788>
    b7f0:	30c00043 	ldbu	r3,1(r6)
    b7f4:	32000003 	ldbu	r8,0(r6)
    b7f8:	30800084 	addi	r2,r6,2
    b7fc:	1806923a 	slli	r3,r3,8
    b800:	1a06b03a 	or	r3,r3,r8
    b804:	18ffffcc 	andi	r3,r3,65535
    b808:	18e0001c 	xori	r3,r3,32768
    b80c:	18e00004 	addi	r3,r3,-32768
    b810:	003fdd06 	br	b788 <__alt_data_end+0xfc00b788>
    b814:	30c00003 	ldbu	r3,0(r6)
    b818:	30800044 	addi	r2,r6,1
    b81c:	003fda06 	br	b788 <__alt_data_end+0xfc00b788>
    b820:	3017883a 	mov	r11,r6
    b824:	0007883a 	mov	r3,zero
    b828:	0013883a 	mov	r9,zero
    b82c:	5a800003 	ldbu	r10,0(r11)
    b830:	58800044 	addi	r2,r11,1
    b834:	1017883a 	mov	r11,r2
    b838:	52001fcc 	andi	r8,r10,127
    b83c:	4250983a 	sll	r8,r8,r9
    b840:	53003fcc 	andi	r12,r10,255
    b844:	6300201c 	xori	r12,r12,128
    b848:	633fe004 	addi	r12,r12,-128
    b84c:	1a06b03a 	or	r3,r3,r8
    b850:	4a4001c4 	addi	r9,r9,7
    b854:	603ff516 	blt	r12,zero,b82c <__alt_data_end+0xfc00b82c>
    b858:	020007c4 	movi	r8,31
    b85c:	427fca36 	bltu	r8,r9,b788 <__alt_data_end+0xfc00b788>
    b860:	5280100c 	andi	r10,r10,64
    b864:	503fc826 	beq	r10,zero,b788 <__alt_data_end+0xfc00b788>
    b868:	023fffc4 	movi	r8,-1
    b86c:	4252983a 	sll	r9,r8,r9
    b870:	1a46b03a 	or	r3,r3,r9
    b874:	003fc506 	br	b78c <__alt_data_end+0xfc00b78c>
    b878:	3017883a 	mov	r11,r6
    b87c:	0007883a 	mov	r3,zero
    b880:	0015883a 	mov	r10,zero
    b884:	5a000003 	ldbu	r8,0(r11)
    b888:	58800044 	addi	r2,r11,1
    b88c:	1017883a 	mov	r11,r2
    b890:	42401fcc 	andi	r9,r8,127
    b894:	4a92983a 	sll	r9,r9,r10
    b898:	42003fcc 	andi	r8,r8,255
    b89c:	4200201c 	xori	r8,r8,128
    b8a0:	423fe004 	addi	r8,r8,-128
    b8a4:	1a46b03a 	or	r3,r3,r9
    b8a8:	528001c4 	addi	r10,r10,7
    b8ac:	403ff516 	blt	r8,zero,b884 <__alt_data_end+0xfc00b884>
    b8b0:	003fb506 	br	b788 <__alt_data_end+0xfc00b788>
    b8b4:	30c00043 	ldbu	r3,1(r6)
    b8b8:	32000003 	ldbu	r8,0(r6)
    b8bc:	30800084 	addi	r2,r6,2
    b8c0:	1806923a 	slli	r3,r3,8
    b8c4:	1a06b03a 	or	r3,r3,r8
    b8c8:	003faf06 	br	b788 <__alt_data_end+0xfc00b788>
    b8cc:	000e4200 	call	e420 <abort>
    b8d0:	308000c4 	addi	r2,r6,3
    b8d4:	00ffff04 	movi	r3,-4
    b8d8:	10c4703a 	and	r2,r2,r3
    b8dc:	10c00017 	ldw	r3,0(r2)
    b8e0:	10800104 	addi	r2,r2,4
    b8e4:	38c00015 	stw	r3,0(r7)
    b8e8:	dfc00017 	ldw	ra,0(sp)
    b8ec:	dec00104 	addi	sp,sp,4
    b8f0:	f800283a 	ret
    b8f4:	300b883a 	mov	r5,r6
    b8f8:	003fa706 	br	b798 <__alt_data_end+0xfc00b798>

0000b8fc <_ZL15get_ttype_entryP16lsda_header_infom>:
    b8fc:	defffc04 	addi	sp,sp,-16
    b900:	dfc00315 	stw	ra,12(sp)
    b904:	dc000215 	stw	r16,8(sp)
    b908:	2021883a 	mov	r16,r4
    b90c:	21000503 	ldbu	r4,20(r4)
    b910:	d9400115 	stw	r5,4(sp)
    b914:	000b64c0 	call	b64c <_ZL21size_of_encoded_valueh>
    b918:	d9400117 	ldw	r5,4(sp)
    b91c:	1009883a 	mov	r4,r2
    b920:	000cf040 	call	cf04 <__mulsi3>
    b924:	81800317 	ldw	r6,12(r16)
    b928:	81400217 	ldw	r5,8(r16)
    b92c:	81000503 	ldbu	r4,20(r16)
    b930:	d80f883a 	mov	r7,sp
    b934:	308dc83a 	sub	r6,r6,r2
    b938:	000b6f00 	call	b6f0 <_ZL28read_encoded_value_with_basehjPKhPj>
    b93c:	d8800017 	ldw	r2,0(sp)
    b940:	dfc00317 	ldw	ra,12(sp)
    b944:	dc000217 	ldw	r16,8(sp)
    b948:	dec00404 	addi	sp,sp,16
    b94c:	f800283a 	ret

0000b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b950:	deffff04 	addi	sp,sp,-4
    b954:	dfc00015 	stw	ra,0(sp)
    b958:	20c03fcc 	andi	r3,r4,255
    b95c:	00803fc4 	movi	r2,255
    b960:	18800e26 	beq	r3,r2,b99c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b964:	20801c0c 	andi	r2,r4,112
    b968:	00c00804 	movi	r3,32
    b96c:	10c01726 	beq	r2,r3,b9cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b970:	18800e2e 	bgeu	r3,r2,b9ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b974:	00c01004 	movi	r3,64
    b978:	10c01026 	beq	r2,r3,b9bc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b97c:	00c01404 	movi	r3,80
    b980:	10c00626 	beq	r2,r3,b99c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b984:	00c00c04 	movi	r3,48
    b988:	10c00b1e 	bne	r2,r3,b9b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b98c:	2809883a 	mov	r4,r5
    b990:	dfc00017 	ldw	ra,0(sp)
    b994:	dec00104 	addi	sp,sp,4
    b998:	000e17c1 	jmpi	e17c <_Unwind_GetDataRelBase>
    b99c:	0005883a 	mov	r2,zero
    b9a0:	dfc00017 	ldw	ra,0(sp)
    b9a4:	dec00104 	addi	sp,sp,4
    b9a8:	f800283a 	ret
    b9ac:	103ffb26 	beq	r2,zero,b99c <__alt_data_end+0xfc00b99c>
    b9b0:	00c00404 	movi	r3,16
    b9b4:	10fff926 	beq	r2,r3,b99c <__alt_data_end+0xfc00b99c>
    b9b8:	000e4200 	call	e420 <abort>
    b9bc:	2809883a 	mov	r4,r5
    b9c0:	dfc00017 	ldw	ra,0(sp)
    b9c4:	dec00104 	addi	sp,sp,4
    b9c8:	000e16c1 	jmpi	e16c <_Unwind_GetRegionStart>
    b9cc:	2809883a 	mov	r4,r5
    b9d0:	dfc00017 	ldw	ra,0(sp)
    b9d4:	dec00104 	addi	sp,sp,4
    b9d8:	000e1841 	jmpi	e184 <_Unwind_GetTextRelBase>

0000b9dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b9dc:	defffb04 	addi	sp,sp,-20
    b9e0:	dcc00315 	stw	r19,12(sp)
    b9e4:	dc400115 	stw	r17,4(sp)
    b9e8:	dc000015 	stw	r16,0(sp)
    b9ec:	dfc00415 	stw	ra,16(sp)
    b9f0:	dc800215 	stw	r18,8(sp)
    b9f4:	2027883a 	mov	r19,r4
    b9f8:	2821883a 	mov	r16,r5
    b9fc:	3023883a 	mov	r17,r6
    ba00:	20003f26 	beq	r4,zero,bb00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    ba04:	000e16c0 	call	e16c <_Unwind_GetRegionStart>
    ba08:	88800015 	stw	r2,0(r17)
    ba0c:	84800003 	ldbu	r18,0(r16)
    ba10:	00c03fc4 	movi	r3,255
    ba14:	84000044 	addi	r16,r16,1
    ba18:	90c03726 	beq	r18,r3,baf8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    ba1c:	980b883a 	mov	r5,r19
    ba20:	9009883a 	mov	r4,r18
    ba24:	000b9500 	call	b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    ba28:	800d883a 	mov	r6,r16
    ba2c:	89c00104 	addi	r7,r17,4
    ba30:	100b883a 	mov	r5,r2
    ba34:	9009883a 	mov	r4,r18
    ba38:	000b6f00 	call	b6f0 <_ZL28read_encoded_value_with_basehjPKhPj>
    ba3c:	1021883a 	mov	r16,r2
    ba40:	80c00003 	ldbu	r3,0(r16)
    ba44:	01003fc4 	movi	r4,255
    ba48:	80800044 	addi	r2,r16,1
    ba4c:	88c00505 	stb	r3,20(r17)
    ba50:	18c03fcc 	andi	r3,r3,255
    ba54:	19002c26 	beq	r3,r4,bb08 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    ba58:	100f883a 	mov	r7,r2
    ba5c:	000d883a 	mov	r6,zero
    ba60:	000b883a 	mov	r5,zero
    ba64:	38c00003 	ldbu	r3,0(r7)
    ba68:	10800044 	addi	r2,r2,1
    ba6c:	100f883a 	mov	r7,r2
    ba70:	19001fcc 	andi	r4,r3,127
    ba74:	2148983a 	sll	r4,r4,r5
    ba78:	18c03fcc 	andi	r3,r3,255
    ba7c:	18c0201c 	xori	r3,r3,128
    ba80:	18ffe004 	addi	r3,r3,-128
    ba84:	310cb03a 	or	r6,r6,r4
    ba88:	294001c4 	addi	r5,r5,7
    ba8c:	183ff516 	blt	r3,zero,ba64 <__alt_data_end+0xfc00ba64>
    ba90:	118d883a 	add	r6,r2,r6
    ba94:	89800315 	stw	r6,12(r17)
    ba98:	10c00003 	ldbu	r3,0(r2)
    ba9c:	000d883a 	mov	r6,zero
    baa0:	10800044 	addi	r2,r2,1
    baa4:	88c00545 	stb	r3,21(r17)
    baa8:	000b883a 	mov	r5,zero
    baac:	10c00003 	ldbu	r3,0(r2)
    bab0:	10800044 	addi	r2,r2,1
    bab4:	19001fcc 	andi	r4,r3,127
    bab8:	2148983a 	sll	r4,r4,r5
    babc:	18c03fcc 	andi	r3,r3,255
    bac0:	18c0201c 	xori	r3,r3,128
    bac4:	18ffe004 	addi	r3,r3,-128
    bac8:	310cb03a 	or	r6,r6,r4
    bacc:	294001c4 	addi	r5,r5,7
    bad0:	183ff616 	blt	r3,zero,baac <__alt_data_end+0xfc00baac>
    bad4:	118d883a 	add	r6,r2,r6
    bad8:	89800415 	stw	r6,16(r17)
    badc:	dfc00417 	ldw	ra,16(sp)
    bae0:	dcc00317 	ldw	r19,12(sp)
    bae4:	dc800217 	ldw	r18,8(sp)
    bae8:	dc400117 	ldw	r17,4(sp)
    baec:	dc000017 	ldw	r16,0(sp)
    baf0:	dec00504 	addi	sp,sp,20
    baf4:	f800283a 	ret
    baf8:	88800115 	stw	r2,4(r17)
    bafc:	003fd006 	br	ba40 <__alt_data_end+0xfc00ba40>
    bb00:	0005883a 	mov	r2,zero
    bb04:	003fc006 	br	ba08 <__alt_data_end+0xfc00ba08>
    bb08:	88000315 	stw	zero,12(r17)
    bb0c:	003fe206 	br	ba98 <__alt_data_end+0xfc00ba98>

0000bb10 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    bb10:	28800017 	ldw	r2,0(r5)
    bb14:	30c00017 	ldw	r3,0(r6)
    bb18:	defffb04 	addi	sp,sp,-20
    bb1c:	10800217 	ldw	r2,8(r2)
    bb20:	dc400315 	stw	r17,12(sp)
    bb24:	dc000215 	stw	r16,8(sp)
    bb28:	d9400115 	stw	r5,4(sp)
    bb2c:	dfc00415 	stw	ra,16(sp)
    bb30:	2021883a 	mov	r16,r4
    bb34:	d8c00015 	stw	r3,0(sp)
    bb38:	2809883a 	mov	r4,r5
    bb3c:	3023883a 	mov	r17,r6
    bb40:	103ee83a 	callr	r2
    bb44:	10803fcc 	andi	r2,r2,255
    bb48:	d9400117 	ldw	r5,4(sp)
    bb4c:	10000326 	beq	r2,zero,bb5c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    bb50:	d8800017 	ldw	r2,0(sp)
    bb54:	10800017 	ldw	r2,0(r2)
    bb58:	d8800015 	stw	r2,0(sp)
    bb5c:	80800017 	ldw	r2,0(r16)
    bb60:	01c00044 	movi	r7,1
    bb64:	d80d883a 	mov	r6,sp
    bb68:	10800417 	ldw	r2,16(r2)
    bb6c:	8009883a 	mov	r4,r16
    bb70:	103ee83a 	callr	r2
    bb74:	10c03fcc 	andi	r3,r2,255
    bb78:	18000226 	beq	r3,zero,bb84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    bb7c:	d8c00017 	ldw	r3,0(sp)
    bb80:	88c00015 	stw	r3,0(r17)
    bb84:	dfc00417 	ldw	ra,16(sp)
    bb88:	dc400317 	ldw	r17,12(sp)
    bb8c:	dc000217 	ldw	r16,8(sp)
    bb90:	dec00504 	addi	sp,sp,20
    bb94:	f800283a 	ret

0000bb98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    bb98:	defff304 	addi	sp,sp,-52
    bb9c:	dc800615 	stw	r18,24(sp)
    bba0:	3825d23a 	srai	r18,r7,8
    bba4:	dd000815 	stw	r20,32(sp)
    bba8:	dcc00715 	stw	r19,28(sp)
    bbac:	dfc00c15 	stw	ra,48(sp)
    bbb0:	ddc00b15 	stw	r23,44(sp)
    bbb4:	dd800a15 	stw	r22,40(sp)
    bbb8:	dd400915 	stw	r21,36(sp)
    bbbc:	dc400515 	stw	r17,20(sp)
    bbc0:	dc000415 	stw	r16,16(sp)
    bbc4:	d9400215 	stw	r5,8(sp)
    bbc8:	3827883a 	mov	r19,r7
    bbcc:	2029883a 	mov	r20,r4
    bbd0:	9000010e 	bge	r18,zero,bbd8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    bbd4:	04a5c83a 	sub	r18,zero,r18
    bbd8:	000b883a 	mov	r5,zero
    bbdc:	01000144 	movi	r4,5
    bbe0:	d9800315 	stw	r6,12(sp)
    bbe4:	000b9500 	call	b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bbe8:	d9800317 	ldw	r6,12(sp)
    bbec:	d9c00104 	addi	r7,sp,4
    bbf0:	100b883a 	mov	r5,r2
    bbf4:	01000144 	movi	r4,5
    bbf8:	000b6f00 	call	b6f0 <_ZL28read_encoded_value_with_basehjPKhPj>
    bbfc:	017ffe44 	movi	r5,-7
    bc00:	1009883a 	mov	r4,r2
    bc04:	1021883a 	mov	r16,r2
    bc08:	000cf040 	call	cf04 <__mulsi3>
    bc0c:	102d883a 	mov	r22,r2
    bc10:	0023883a 	mov	r17,zero
    bc14:	85400003 	ldbu	r21,0(r16)
    bc18:	8009883a 	mov	r4,r16
    bc1c:	014001c4 	movi	r5,7
    bc20:	000cf040 	call	cf04 <__mulsi3>
    bc24:	a8c01fcc 	andi	r3,r21,127
    bc28:	1585883a 	add	r2,r2,r22
    bc2c:	1886983a 	sll	r3,r3,r2
    bc30:	ad403fcc 	andi	r21,r21,255
    bc34:	ad40201c 	xori	r21,r21,128
    bc38:	ad7fe004 	addi	r21,r21,-128
    bc3c:	84000044 	addi	r16,r16,1
    bc40:	88e2b03a 	or	r17,r17,r3
    bc44:	a83ff316 	blt	r21,zero,bc14 <__alt_data_end+0xfc00bc14>
    bc48:	8461883a 	add	r16,r16,r17
    bc4c:	017ffe44 	movi	r5,-7
    bc50:	8009883a 	mov	r4,r16
    bc54:	000cf040 	call	cf04 <__mulsi3>
    bc58:	102d883a 	mov	r22,r2
    bc5c:	002b883a 	mov	r21,zero
    bc60:	84400003 	ldbu	r17,0(r16)
    bc64:	8009883a 	mov	r4,r16
    bc68:	014001c4 	movi	r5,7
    bc6c:	000cf040 	call	cf04 <__mulsi3>
    bc70:	88c01fcc 	andi	r3,r17,127
    bc74:	1585883a 	add	r2,r2,r22
    bc78:	1886983a 	sll	r3,r3,r2
    bc7c:	8c403fcc 	andi	r17,r17,255
    bc80:	8c40201c 	xori	r17,r17,128
    bc84:	8c7fe004 	addi	r17,r17,-128
    bc88:	84000044 	addi	r16,r16,1
    bc8c:	a8eab03a 	or	r21,r21,r3
    bc90:	883ff316 	blt	r17,zero,bc60 <__alt_data_end+0xfc00bc60>
    bc94:	94403fcc 	andi	r17,r18,255
    bc98:	8c7fffc4 	addi	r17,r17,-1
    bc9c:	8463883a 	add	r17,r16,r17
    bca0:	ad4000c4 	addi	r21,r21,3
    bca4:	00bfff04 	movi	r2,-4
    bca8:	ac21883a 	add	r16,r21,r16
    bcac:	017ffe44 	movi	r5,-7
    bcb0:	8809883a 	mov	r4,r17
    bcb4:	80a0703a 	and	r16,r16,r2
    bcb8:	000cf040 	call	cf04 <__mulsi3>
    bcbc:	0025883a 	mov	r18,zero
    bcc0:	102f883a 	mov	r23,r2
    bcc4:	8d800003 	ldbu	r22,0(r17)
    bcc8:	8809883a 	mov	r4,r17
    bccc:	014001c4 	movi	r5,7
    bcd0:	000cf040 	call	cf04 <__mulsi3>
    bcd4:	b0c01fcc 	andi	r3,r22,127
    bcd8:	15c5883a 	add	r2,r2,r23
    bcdc:	1886983a 	sll	r3,r3,r2
    bce0:	b5803fcc 	andi	r22,r22,255
    bce4:	b580201c 	xori	r22,r22,128
    bce8:	8d400044 	addi	r21,r17,1
    bcec:	b5bfe004 	addi	r22,r22,-128
    bcf0:	90e4b03a 	or	r18,r18,r3
    bcf4:	a823883a 	mov	r17,r21
    bcf8:	b03ff216 	blt	r22,zero,bcc4 <__alt_data_end+0xfc00bcc4>
    bcfc:	9cc03fcc 	andi	r19,r19,255
    bd00:	90002426 	beq	r18,zero,bd94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bd04:	9809883a 	mov	r4,r19
    bd08:	000b64c0 	call	b64c <_ZL21size_of_encoded_valueh>
    bd0c:	100b883a 	mov	r5,r2
    bd10:	913fffc4 	addi	r4,r18,-1
    bd14:	000cf040 	call	cf04 <__mulsi3>
    bd18:	d9400d17 	ldw	r5,52(sp)
    bd1c:	d80f883a 	mov	r7,sp
    bd20:	9809883a 	mov	r4,r19
    bd24:	140d883a 	add	r6,r2,r16
    bd28:	000b6f00 	call	b6f0 <_ZL28read_encoded_value_with_basehjPKhPj>
    bd2c:	d9000017 	ldw	r4,0(sp)
    bd30:	d9800204 	addi	r6,sp,8
    bd34:	a00b883a 	mov	r5,r20
    bd38:	000bb100 	call	bb10 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bd3c:	10c03fcc 	andi	r3,r2,255
    bd40:	1800151e 	bne	r3,zero,bd98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bd44:	a809883a 	mov	r4,r21
    bd48:	017ffe44 	movi	r5,-7
    bd4c:	000cf040 	call	cf04 <__mulsi3>
    bd50:	102d883a 	mov	r22,r2
    bd54:	a809883a 	mov	r4,r21
    bd58:	0025883a 	mov	r18,zero
    bd5c:	24400003 	ldbu	r17,0(r4)
    bd60:	014001c4 	movi	r5,7
    bd64:	000cf040 	call	cf04 <__mulsi3>
    bd68:	88c01fcc 	andi	r3,r17,127
    bd6c:	1585883a 	add	r2,r2,r22
    bd70:	1886983a 	sll	r3,r3,r2
    bd74:	8c403fcc 	andi	r17,r17,255
    bd78:	8c40201c 	xori	r17,r17,128
    bd7c:	ad400044 	addi	r21,r21,1
    bd80:	8c7fe004 	addi	r17,r17,-128
    bd84:	90e4b03a 	or	r18,r18,r3
    bd88:	a809883a 	mov	r4,r21
    bd8c:	883ff316 	blt	r17,zero,bd5c <__alt_data_end+0xfc00bd5c>
    bd90:	003fdb06 	br	bd00 <__alt_data_end+0xfc00bd00>
    bd94:	0005883a 	mov	r2,zero
    bd98:	dfc00c17 	ldw	ra,48(sp)
    bd9c:	ddc00b17 	ldw	r23,44(sp)
    bda0:	dd800a17 	ldw	r22,40(sp)
    bda4:	dd400917 	ldw	r21,36(sp)
    bda8:	dd000817 	ldw	r20,32(sp)
    bdac:	dcc00717 	ldw	r19,28(sp)
    bdb0:	dc800617 	ldw	r18,24(sp)
    bdb4:	dc400517 	ldw	r17,20(sp)
    bdb8:	dc000417 	ldw	r16,16(sp)
    bdbc:	dec00d04 	addi	sp,sp,52
    bdc0:	f800283a 	ret

0000bdc4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bdc4:	defffb04 	addi	sp,sp,-20
    bdc8:	dc000115 	stw	r16,4(sp)
    bdcc:	24000317 	ldw	r16,12(r4)
    bdd0:	01ce303a 	nor	r7,zero,r7
    bdd4:	dc800315 	stw	r18,12(sp)
    bdd8:	dc400215 	stw	r17,8(sp)
    bddc:	dfc00415 	stw	ra,16(sp)
    bde0:	2023883a 	mov	r17,r4
    bde4:	2825883a 	mov	r18,r5
    bde8:	d9800015 	stw	r6,0(sp)
    bdec:	81e1883a 	add	r16,r16,r7
    bdf0:	800d883a 	mov	r6,r16
    bdf4:	000b883a 	mov	r5,zero
    bdf8:	0009883a 	mov	r4,zero
    bdfc:	30800003 	ldbu	r2,0(r6)
    be00:	84000044 	addi	r16,r16,1
    be04:	800d883a 	mov	r6,r16
    be08:	10c01fcc 	andi	r3,r2,127
    be0c:	1906983a 	sll	r3,r3,r4
    be10:	10803fcc 	andi	r2,r2,255
    be14:	1080201c 	xori	r2,r2,128
    be18:	10bfe004 	addi	r2,r2,-128
    be1c:	28cab03a 	or	r5,r5,r3
    be20:	210001c4 	addi	r4,r4,7
    be24:	103ff516 	blt	r2,zero,bdfc <__alt_data_end+0xfc00bdfc>
    be28:	28000e26 	beq	r5,zero,be64 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    be2c:	8809883a 	mov	r4,r17
    be30:	000b8fc0 	call	b8fc <_ZL15get_ttype_entryP16lsda_header_infom>
    be34:	d80d883a 	mov	r6,sp
    be38:	900b883a 	mov	r5,r18
    be3c:	1009883a 	mov	r4,r2
    be40:	000bb100 	call	bb10 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    be44:	10c03fcc 	andi	r3,r2,255
    be48:	183fe926 	beq	r3,zero,bdf0 <__alt_data_end+0xfc00bdf0>
    be4c:	dfc00417 	ldw	ra,16(sp)
    be50:	dc800317 	ldw	r18,12(sp)
    be54:	dc400217 	ldw	r17,8(sp)
    be58:	dc000117 	ldw	r16,4(sp)
    be5c:	dec00504 	addi	sp,sp,20
    be60:	f800283a 	ret
    be64:	0005883a 	mov	r2,zero
    be68:	003ff806 	br	be4c <__alt_data_end+0xfc00be4c>

0000be6c <__gxx_personality_sj0>:
    be6c:	00800074 	movhi	r2,1
    be70:	deffdd04 	addi	sp,sp,-140
    be74:	10af9b04 	addi	r2,r2,-16788
    be78:	d8800e15 	stw	r2,56(sp)
    be7c:	008000b4 	movhi	r2,2
    be80:	108ed004 	addi	r2,r2,15168
    be84:	d8800f15 	stw	r2,60(sp)
    be88:	00800074 	movhi	r2,1
    be8c:	10b11104 	addi	r2,r2,-15292
    be90:	d9001515 	stw	r4,84(sp)
    be94:	d9000804 	addi	r4,sp,32
    be98:	d8801115 	stw	r2,68(sp)
    be9c:	dfc02215 	stw	ra,136(sp)
    bea0:	df002115 	stw	fp,132(sp)
    bea4:	dec01015 	stw	sp,64(sp)
    bea8:	dec01215 	stw	sp,72(sp)
    beac:	d9401915 	stw	r5,100(sp)
    beb0:	d9801615 	stw	r6,88(sp)
    beb4:	d9c01715 	stw	r7,92(sp)
    beb8:	000e0a40 	call	e0a4 <_Unwind_SjLj_Register>
    bebc:	d8c01517 	ldw	r3,84(sp)
    bec0:	d8000715 	stw	zero,28(sp)
    bec4:	d8000615 	stw	zero,24(sp)
    bec8:	00800044 	movi	r2,1
    becc:	18800926 	beq	r3,r2,bef4 <__gxx_personality_sj0+0x88>
    bed0:	01c000c4 	movi	r7,3
    bed4:	d9c01515 	stw	r7,84(sp)
    bed8:	d9000804 	addi	r4,sp,32
    bedc:	000e0bc0 	call	e0bc <_Unwind_SjLj_Unregister>
    bee0:	d8801517 	ldw	r2,84(sp)
    bee4:	dfc02217 	ldw	ra,136(sp)
    bee8:	df002117 	ldw	fp,132(sp)
    beec:	dec02304 	addi	sp,sp,140
    bef0:	f800283a 	ret
    bef4:	d9001617 	ldw	r4,88(sp)
    bef8:	00af3574 	movhi	r2,48341
    befc:	d9c01717 	ldw	r7,92(sp)
    bf00:	10b54004 	addi	r2,r2,-11008
    bf04:	00ee2cb4 	movhi	r3,47282
    bf08:	2085883a 	add	r2,r4,r2
    bf0c:	18eaaf04 	addi	r3,r3,-21828
    bf10:	d8801b15 	stw	r2,108(sp)
    bf14:	38c7883a 	add	r3,r7,r3
    bf18:	1105803a 	cmpltu	r2,r2,r4
    bf1c:	10c7883a 	add	r3,r2,r3
    bf20:	d8c01c15 	stw	r3,112(sp)
    bf24:	d8c01917 	ldw	r3,100(sp)
    bf28:	00800184 	movi	r2,6
    bf2c:	18805426 	beq	r3,r2,c080 <__gxx_personality_sj0+0x214>
    bf30:	d9002417 	ldw	r4,144(sp)
    bf34:	00bfffc4 	movi	r2,-1
    bf38:	d8800915 	stw	r2,36(sp)
    bf3c:	000e1600 	call	e160 <_Unwind_GetLanguageSpecificData>
    bf40:	d8801a15 	stw	r2,104(sp)
    bf44:	1000c926 	beq	r2,zero,c26c <__gxx_personality_sj0+0x400>
    bf48:	d9002417 	ldw	r4,144(sp)
    bf4c:	d80d883a 	mov	r6,sp
    bf50:	100b883a 	mov	r5,r2
    bf54:	000b9dc0 	call	b9dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bf58:	d9402417 	ldw	r5,144(sp)
    bf5c:	d9000503 	ldbu	r4,20(sp)
    bf60:	d8801515 	stw	r2,84(sp)
    bf64:	000b9500 	call	b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf68:	d9002417 	ldw	r4,144(sp)
    bf6c:	d9400604 	addi	r5,sp,24
    bf70:	d8800215 	stw	r2,8(sp)
    bf74:	000e1300 	call	e130 <_Unwind_GetIPInfo>
    bf78:	d8c00617 	ldw	r3,24(sp)
    bf7c:	18006126 	beq	r3,zero,c104 <__gxx_personality_sj0+0x298>
    bf80:	1000ba16 	blt	r2,zero,c26c <__gxx_personality_sj0+0x400>
    bf84:	10002f1e 	bne	r2,zero,c044 <__gxx_personality_sj0+0x1d8>
    bf88:	d8001515 	stw	zero,84(sp)
    bf8c:	d8001f15 	stw	zero,124(sp)
    bf90:	d8001815 	stw	zero,96(sp)
    bf94:	00c00044 	movi	r3,1
    bf98:	d9001917 	ldw	r4,100(sp)
    bf9c:	2080004c 	andi	r2,r4,1
    bfa0:	1000b51e 	bne	r2,zero,c278 <__gxx_personality_sj0+0x40c>
    bfa4:	d9001917 	ldw	r4,100(sp)
    bfa8:	2080020c 	andi	r2,r4,8
    bfac:	1000b71e 	bne	r2,zero,c28c <__gxx_personality_sj0+0x420>
    bfb0:	d9c01c17 	ldw	r7,112(sp)
    bfb4:	3800b826 	beq	r7,zero,c298 <__gxx_personality_sj0+0x42c>
    bfb8:	00800044 	movi	r2,1
    bfbc:	1880b526 	beq	r3,r2,c294 <__gxx_personality_sj0+0x428>
    bfc0:	d9c01517 	ldw	r7,84(sp)
    bfc4:	3800f516 	blt	r7,zero,c39c <__gxx_personality_sj0+0x530>
    bfc8:	d9002417 	ldw	r4,144(sp)
    bfcc:	d9802317 	ldw	r6,140(sp)
    bfd0:	00bfffc4 	movi	r2,-1
    bfd4:	000b883a 	mov	r5,zero
    bfd8:	d8800915 	stw	r2,36(sp)
    bfdc:	000e1040 	call	e104 <_Unwind_SetGR>
    bfe0:	d9801517 	ldw	r6,84(sp)
    bfe4:	d9002417 	ldw	r4,144(sp)
    bfe8:	01400044 	movi	r5,1
    bfec:	000e1040 	call	e104 <_Unwind_SetGR>
    bff0:	d9002417 	ldw	r4,144(sp)
    bff4:	d9401f17 	ldw	r5,124(sp)
    bff8:	000e1500 	call	e150 <_Unwind_SetIP>
    bffc:	010001c4 	movi	r4,7
    c000:	d9001515 	stw	r4,84(sp)
    c004:	003fb406 	br	bed8 <__alt_data_end+0xfc00bed8>
    c008:	000f883a 	mov	r7,zero
    c00c:	000d883a 	mov	r6,zero
    c010:	19000003 	ldbu	r4,0(r3)
    c014:	18c00044 	addi	r3,r3,1
    c018:	d8c01515 	stw	r3,84(sp)
    c01c:	21401fcc 	andi	r5,r4,127
    c020:	298a983a 	sll	r5,r5,r6
    c024:	21003fcc 	andi	r4,r4,255
    c028:	2100201c 	xori	r4,r4,128
    c02c:	213fe004 	addi	r4,r4,-128
    c030:	394eb03a 	or	r7,r7,r5
    c034:	318001c4 	addi	r6,r6,7
    c038:	203ff516 	blt	r4,zero,c010 <__alt_data_end+0xfc00c010>
    c03c:	10bfffc4 	addi	r2,r2,-1
    c040:	10003226 	beq	r2,zero,c10c <__gxx_personality_sj0+0x2a0>
    c044:	d9c01517 	ldw	r7,84(sp)
    c048:	0011883a 	mov	r8,zero
    c04c:	000d883a 	mov	r6,zero
    c050:	39000003 	ldbu	r4,0(r7)
    c054:	38c00044 	addi	r3,r7,1
    c058:	180f883a 	mov	r7,r3
    c05c:	21401fcc 	andi	r5,r4,127
    c060:	298a983a 	sll	r5,r5,r6
    c064:	21003fcc 	andi	r4,r4,255
    c068:	2100201c 	xori	r4,r4,128
    c06c:	213fe004 	addi	r4,r4,-128
    c070:	4150b03a 	or	r8,r8,r5
    c074:	318001c4 	addi	r6,r6,7
    c078:	203ff516 	blt	r4,zero,c050 <__alt_data_end+0xfc00c050>
    c07c:	003fe206 	br	c008 <__alt_data_end+0xfc00c008>
    c080:	d9001c17 	ldw	r4,112(sp)
    c084:	203faa1e 	bne	r4,zero,bf30 <__alt_data_end+0xfc00bf30>
    c088:	d9c01517 	ldw	r7,84(sp)
    c08c:	d8801b17 	ldw	r2,108(sp)
    c090:	38bfa736 	bltu	r7,r2,bf30 <__alt_data_end+0xfc00bf30>
    c094:	d8c02317 	ldw	r3,140(sp)
    c098:	18fffe17 	ldw	r3,-8(r3)
    c09c:	d8c01f15 	stw	r3,124(sp)
    c0a0:	18008226 	beq	r3,zero,c2ac <__gxx_personality_sj0+0x440>
    c0a4:	d9002317 	ldw	r4,140(sp)
    c0a8:	d9c02317 	ldw	r7,140(sp)
    c0ac:	213ffb17 	ldw	r4,-20(r4)
    c0b0:	39fffd17 	ldw	r7,-12(r7)
    c0b4:	d9001515 	stw	r4,84(sp)
    c0b8:	d9c01a15 	stw	r7,104(sp)
    c0bc:	d8801517 	ldw	r2,84(sp)
    c0c0:	103fc10e 	bge	r2,zero,bfc8 <__alt_data_end+0xfc00bfc8>
    c0c4:	d9002417 	ldw	r4,144(sp)
    c0c8:	d9401a17 	ldw	r5,104(sp)
    c0cc:	d80d883a 	mov	r6,sp
    c0d0:	00bfffc4 	movi	r2,-1
    c0d4:	d8800915 	stw	r2,36(sp)
    c0d8:	000b9dc0 	call	b9dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c0dc:	d9402417 	ldw	r5,144(sp)
    c0e0:	d9000503 	ldbu	r4,20(sp)
    c0e4:	000b9500 	call	b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c0e8:	d9000503 	ldbu	r4,20(sp)
    c0ec:	d9402417 	ldw	r5,144(sp)
    c0f0:	d8800215 	stw	r2,8(sp)
    c0f4:	000b9500 	call	b950 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c0f8:	d8c02317 	ldw	r3,140(sp)
    c0fc:	18bffe15 	stw	r2,-8(r3)
    c100:	003fb106 	br	bfc8 <__alt_data_end+0xfc00bfc8>
    c104:	10bfffc4 	addi	r2,r2,-1
    c108:	003f9d06 	br	bf80 <__alt_data_end+0xfc00bf80>
    c10c:	42000044 	addi	r8,r8,1
    c110:	da001f15 	stw	r8,124(sp)
    c114:	38005326 	beq	r7,zero,c264 <__gxx_personality_sj0+0x3f8>
    c118:	d8800417 	ldw	r2,16(sp)
    c11c:	39ffffc4 	addi	r7,r7,-1
    c120:	11c5883a 	add	r2,r2,r7
    c124:	d8801815 	stw	r2,96(sp)
    c128:	40005026 	beq	r8,zero,c26c <__gxx_personality_sj0+0x400>
    c12c:	10007426 	beq	r2,zero,c300 <__gxx_personality_sj0+0x494>
    c130:	d8801917 	ldw	r2,100(sp)
    c134:	1080020c 	andi	r2,r2,8
    c138:	d8802015 	stw	r2,128(sp)
    c13c:	1000a21e 	bne	r2,zero,c3c8 <__gxx_personality_sj0+0x55c>
    c140:	d8c01c17 	ldw	r3,112(sp)
    c144:	1800b026 	beq	r3,zero,c408 <__gxx_personality_sj0+0x59c>
    c148:	01c000f4 	movhi	r7,3
    c14c:	39f77804 	addi	r7,r7,-8736
    c150:	d9c01e15 	stw	r7,120(sp)
    c154:	d8001d05 	stb	zero,116(sp)
    c158:	d8c01817 	ldw	r3,96(sp)
    c15c:	d8001515 	stw	zero,84(sp)
    c160:	0009883a 	mov	r4,zero
    c164:	19400003 	ldbu	r5,0(r3)
    c168:	18800044 	addi	r2,r3,1
    c16c:	d9c01517 	ldw	r7,84(sp)
    c170:	28c01fcc 	andi	r3,r5,127
    c174:	1906983a 	sll	r3,r3,r4
    c178:	29803fcc 	andi	r6,r5,255
    c17c:	3180201c 	xori	r6,r6,128
    c180:	38ceb03a 	or	r7,r7,r3
    c184:	d8801715 	stw	r2,92(sp)
    c188:	31bfe004 	addi	r6,r6,-128
    c18c:	d9c01515 	stw	r7,84(sp)
    c190:	210001c4 	addi	r4,r4,7
    c194:	1007883a 	mov	r3,r2
    c198:	303ff216 	blt	r6,zero,c164 <__alt_data_end+0xfc00c164>
    c19c:	00c007c4 	movi	r3,31
    c1a0:	19000836 	bltu	r3,r4,c1c4 <__gxx_personality_sj0+0x358>
    c1a4:	2940100c 	andi	r5,r5,64
    c1a8:	28000626 	beq	r5,zero,c1c4 <__gxx_personality_sj0+0x358>
    c1ac:	01c00044 	movi	r7,1
    c1b0:	3908983a 	sll	r4,r7,r4
    c1b4:	d8c01517 	ldw	r3,84(sp)
    c1b8:	0109c83a 	sub	r4,zero,r4
    c1bc:	1906b03a 	or	r3,r3,r4
    c1c0:	d8c01515 	stw	r3,84(sp)
    c1c4:	d8001615 	stw	zero,88(sp)
    c1c8:	0009883a 	mov	r4,zero
    c1cc:	11400003 	ldbu	r5,0(r2)
    c1d0:	d9c01617 	ldw	r7,88(sp)
    c1d4:	10800044 	addi	r2,r2,1
    c1d8:	28c01fcc 	andi	r3,r5,127
    c1dc:	1906983a 	sll	r3,r3,r4
    c1e0:	29803fcc 	andi	r6,r5,255
    c1e4:	3180201c 	xori	r6,r6,128
    c1e8:	38ceb03a 	or	r7,r7,r3
    c1ec:	31bfe004 	addi	r6,r6,-128
    c1f0:	d9c01615 	stw	r7,88(sp)
    c1f4:	210001c4 	addi	r4,r4,7
    c1f8:	303ff416 	blt	r6,zero,c1cc <__alt_data_end+0xfc00c1cc>
    c1fc:	008007c4 	movi	r2,31
    c200:	11000736 	bltu	r2,r4,c220 <__gxx_personality_sj0+0x3b4>
    c204:	2940100c 	andi	r5,r5,64
    c208:	28000526 	beq	r5,zero,c220 <__gxx_personality_sj0+0x3b4>
    c20c:	00c00044 	movi	r3,1
    c210:	1908983a 	sll	r4,r3,r4
    c214:	0109c83a 	sub	r4,zero,r4
    c218:	390eb03a 	or	r7,r7,r4
    c21c:	d9c01615 	stw	r7,88(sp)
    c220:	d9001517 	ldw	r4,84(sp)
    c224:	20003c26 	beq	r4,zero,c318 <__gxx_personality_sj0+0x4ac>
    c228:	01003e0e 	bge	zero,r4,c324 <__gxx_personality_sj0+0x4b8>
    c22c:	01ffffc4 	movi	r7,-1
    c230:	200b883a 	mov	r5,r4
    c234:	d809883a 	mov	r4,sp
    c238:	d9c00915 	stw	r7,36(sp)
    c23c:	000b8fc0 	call	b8fc <_ZL15get_ttype_entryP16lsda_header_infom>
    c240:	10005f26 	beq	r2,zero,c3c0 <__gxx_personality_sj0+0x554>
    c244:	d8c01e17 	ldw	r3,120(sp)
    c248:	1800571e 	bne	r3,zero,c3a8 <__gxx_personality_sj0+0x53c>
    c24c:	d9001617 	ldw	r4,88(sp)
    c250:	20002926 	beq	r4,zero,c2f8 <__gxx_personality_sj0+0x48c>
    c254:	d9c01717 	ldw	r7,92(sp)
    c258:	390f883a 	add	r7,r7,r4
    c25c:	d9c01815 	stw	r7,96(sp)
    c260:	003fbd06 	br	c158 <__alt_data_end+0xfc00c158>
    c264:	d8c01f17 	ldw	r3,124(sp)
    c268:	1800251e 	bne	r3,zero,c300 <__gxx_personality_sj0+0x494>
    c26c:	01000204 	movi	r4,8
    c270:	d9001515 	stw	r4,84(sp)
    c274:	003f1806 	br	bed8 <__alt_data_end+0xfc00bed8>
    c278:	d8801c17 	ldw	r2,112(sp)
    c27c:	10000d26 	beq	r2,zero,c2b4 <__gxx_personality_sj0+0x448>
    c280:	00800184 	movi	r2,6
    c284:	d8801515 	stw	r2,84(sp)
    c288:	003f1306 	br	bed8 <__alt_data_end+0xfc00bed8>
    c28c:	00800044 	movi	r2,1
    c290:	18bf4d1e 	bne	r3,r2,bfc8 <__alt_data_end+0xfc00bfc8>
    c294:	000b5c40 	call	b5c4 <_ZSt9terminatev>
    c298:	d9001b17 	ldw	r4,108(sp)
    c29c:	00800044 	movi	r2,1
    c2a0:	113f4536 	bltu	r2,r4,bfb8 <__alt_data_end+0xfc00bfb8>
    c2a4:	00800044 	movi	r2,1
    c2a8:	18bf841e 	bne	r3,r2,c0bc <__alt_data_end+0xfc00c0bc>
    c2ac:	d9002317 	ldw	r4,140(sp)
    c2b0:	000cc480 	call	cc48 <__cxa_call_terminate>
    c2b4:	d8c01b17 	ldw	r3,108(sp)
    c2b8:	00800044 	movi	r2,1
    c2bc:	10fff036 	bltu	r2,r3,c280 <__alt_data_end+0xfc00c280>
    c2c0:	d9002317 	ldw	r4,140(sp)
    c2c4:	d8801817 	ldw	r2,96(sp)
    c2c8:	d9c01517 	ldw	r7,84(sp)
    c2cc:	d8c01a17 	ldw	r3,104(sp)
    c2d0:	20bffc15 	stw	r2,-16(r4)
    c2d4:	d8800717 	ldw	r2,28(sp)
    c2d8:	21fffb15 	stw	r7,-20(r4)
    c2dc:	d9c01f17 	ldw	r7,124(sp)
    c2e0:	20bfff15 	stw	r2,-4(r4)
    c2e4:	00800184 	movi	r2,6
    c2e8:	20fffd15 	stw	r3,-12(r4)
    c2ec:	21fffe15 	stw	r7,-8(r4)
    c2f0:	d8801515 	stw	r2,84(sp)
    c2f4:	003ef806 	br	bed8 <__alt_data_end+0xfc00bed8>
    c2f8:	d8801d03 	ldbu	r2,116(sp)
    c2fc:	103fdb26 	beq	r2,zero,c26c <__alt_data_end+0xfc00c26c>
    c300:	d8c01917 	ldw	r3,100(sp)
    c304:	1880004c 	andi	r2,r3,1
    c308:	103fd81e 	bne	r2,zero,c26c <__alt_data_end+0xfc00c26c>
    c30c:	d8001515 	stw	zero,84(sp)
    c310:	00c00084 	movi	r3,2
    c314:	003f2306 	br	bfa4 <__alt_data_end+0xfc00bfa4>
    c318:	00c00044 	movi	r3,1
    c31c:	d8c01d05 	stb	r3,116(sp)
    c320:	003fca06 	br	c24c <__alt_data_end+0xfc00c24c>
    c324:	d9001e17 	ldw	r4,120(sp)
    c328:	20000426 	beq	r4,zero,c33c <__gxx_personality_sj0+0x4d0>
    c32c:	d9c02017 	ldw	r7,128(sp)
    c330:	3800021e 	bne	r7,zero,c33c <__gxx_personality_sj0+0x4d0>
    c334:	d8801c17 	ldw	r2,112(sp)
    c338:	10002726 	beq	r2,zero,c3d8 <__gxx_personality_sj0+0x56c>
    c33c:	d8801517 	ldw	r2,84(sp)
    c340:	000d883a 	mov	r6,zero
    c344:	000b883a 	mov	r5,zero
    c348:	0088303a 	nor	r4,zero,r2
    c34c:	d8800317 	ldw	r2,12(sp)
    c350:	1109883a 	add	r4,r2,r4
    c354:	20800003 	ldbu	r2,0(r4)
    c358:	21000044 	addi	r4,r4,1
    c35c:	10c01fcc 	andi	r3,r2,127
    c360:	1946983a 	sll	r3,r3,r5
    c364:	10803fcc 	andi	r2,r2,255
    c368:	1080201c 	xori	r2,r2,128
    c36c:	10bfe004 	addi	r2,r2,-128
    c370:	30ccb03a 	or	r6,r6,r3
    c374:	294001c4 	addi	r5,r5,7
    c378:	103ff616 	blt	r2,zero,c354 <__alt_data_end+0xfc00c354>
    c37c:	3005003a 	cmpeq	r2,r6,zero
    c380:	10803fcc 	andi	r2,r2,255
    c384:	103fb126 	beq	r2,zero,c24c <__alt_data_end+0xfc00c24c>
    c388:	d9c01917 	ldw	r7,100(sp)
    c38c:	3880004c 	andi	r2,r7,1
    c390:	103fb91e 	bne	r2,zero,c278 <__alt_data_end+0xfc00c278>
    c394:	d8802017 	ldw	r2,128(sp)
    c398:	10002d26 	beq	r2,zero,c450 <__gxx_personality_sj0+0x5e4>
    c39c:	00800044 	movi	r2,1
    c3a0:	d8800915 	stw	r2,36(sp)
    c3a4:	000b5ec0 	call	b5ec <_ZSt10unexpectedv>
    c3a8:	d9800704 	addi	r6,sp,28
    c3ac:	180b883a 	mov	r5,r3
    c3b0:	1009883a 	mov	r4,r2
    c3b4:	000bb100 	call	bb10 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c3b8:	10803fcc 	andi	r2,r2,255
    c3bc:	103fa326 	beq	r2,zero,c24c <__alt_data_end+0xfc00c24c>
    c3c0:	00c000c4 	movi	r3,3
    c3c4:	003ef406 	br	bf98 <__alt_data_end+0xfc00bf98>
    c3c8:	010000f4 	movhi	r4,3
    c3cc:	21377604 	addi	r4,r4,-8744
    c3d0:	d9001e15 	stw	r4,120(sp)
    c3d4:	003f5f06 	br	c154 <__alt_data_end+0xfc00c154>
    c3d8:	d9001b17 	ldw	r4,108(sp)
    c3dc:	00c00044 	movi	r3,1
    c3e0:	193fd636 	bltu	r3,r4,c33c <__alt_data_end+0xfc00c33c>
    c3e4:	01ffffc4 	movi	r7,-1
    c3e8:	d9c00915 	stw	r7,36(sp)
    c3ec:	d9800717 	ldw	r6,28(sp)
    c3f0:	d9c01517 	ldw	r7,84(sp)
    c3f4:	d9401e17 	ldw	r5,120(sp)
    c3f8:	d809883a 	mov	r4,sp
    c3fc:	000bdc40 	call	bdc4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c400:	1080005c 	xori	r2,r2,1
    c404:	003fde06 	br	c380 <__alt_data_end+0xfc00c380>
    c408:	d9001b17 	ldw	r4,108(sp)
    c40c:	00800044 	movi	r2,1
    c410:	113f4d36 	bltu	r2,r4,c148 <__alt_data_end+0xfc00c148>
    c414:	d9c02317 	ldw	r7,140(sp)
    c418:	38800017 	ldw	r2,0(r7)
    c41c:	1080004c 	andi	r2,r2,1
    c420:	1000061e 	bne	r2,zero,c43c <__gxx_personality_sj0+0x5d0>
    c424:	d8c02317 	ldw	r3,140(sp)
    c428:	18800504 	addi	r2,r3,20
    c42c:	d8800715 	stw	r2,28(sp)
    c430:	10bff017 	ldw	r2,-64(r2)
    c434:	d8801e15 	stw	r2,120(sp)
    c438:	003f4606 	br	c154 <__alt_data_end+0xfc00c154>
    c43c:	38bff517 	ldw	r2,-44(r7)
    c440:	003ffa06 	br	c42c <__alt_data_end+0xfc00c42c>
    c444:	d9000a17 	ldw	r4,40(sp)
    c448:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    c44c:	003f9106 	br	c294 <__alt_data_end+0xfc00c294>
    c450:	d9c01c17 	ldw	r7,112(sp)
    c454:	383eda1e 	bne	r7,zero,bfc0 <__alt_data_end+0xfc00bfc0>
    c458:	d8c01b17 	ldw	r3,108(sp)
    c45c:	00800044 	movi	r2,1
    c460:	10fed736 	bltu	r2,r3,bfc0 <__alt_data_end+0xfc00bfc0>
    c464:	00c000c4 	movi	r3,3
    c468:	003f8e06 	br	c2a4 <__alt_data_end+0xfc00c2a4>

0000c46c <__cxa_call_unexpected>:
    c46c:	00800074 	movhi	r2,1
    c470:	deffe604 	addi	sp,sp,-104
    c474:	10af9b04 	addi	r2,r2,-16788
    c478:	d8800d15 	stw	r2,52(sp)
    c47c:	008000b4 	movhi	r2,2
    c480:	108ed404 	addi	r2,r2,15184
    c484:	d8800e15 	stw	r2,56(sp)
    c488:	d8800104 	addi	r2,sp,4
    c48c:	d8800f15 	stw	r2,60(sp)
    c490:	00800074 	movhi	r2,1
    c494:	10b13e04 	addi	r2,r2,-15112
    c498:	d9001415 	stw	r4,80(sp)
    c49c:	d9000704 	addi	r4,sp,28
    c4a0:	dfc01915 	stw	ra,100(sp)
    c4a4:	d8801015 	stw	r2,64(sp)
    c4a8:	df001815 	stw	fp,96(sp)
    c4ac:	dec01115 	stw	sp,68(sp)
    c4b0:	000e0a40 	call	e0a4 <_Unwind_SjLj_Register>
    c4b4:	d9001417 	ldw	r4,80(sp)
    c4b8:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    c4bc:	d8c01417 	ldw	r3,80(sp)
    c4c0:	18bffe17 	ldw	r2,-8(r3)
    c4c4:	193ff717 	ldw	r4,-36(r3)
    c4c8:	18fffd17 	ldw	r3,-12(r3)
    c4cc:	d8800315 	stw	r2,12(sp)
    c4d0:	d8c01615 	stw	r3,88(sp)
    c4d4:	d8c01417 	ldw	r3,80(sp)
    c4d8:	18fffb17 	ldw	r3,-20(r3)
    c4dc:	d8c01515 	stw	r3,84(sp)
    c4e0:	d8c01417 	ldw	r3,80(sp)
    c4e4:	18fff817 	ldw	r3,-32(r3)
    c4e8:	d8c01415 	stw	r3,80(sp)
    c4ec:	00c00044 	movi	r3,1
    c4f0:	d8c00815 	stw	r3,32(sp)
    c4f4:	000b5dc0 	call	b5dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c4f8:	d8c00917 	ldw	r3,36(sp)
    c4fc:	d8800817 	ldw	r2,32(sp)
    c500:	d8c01715 	stw	r3,92(sp)
    c504:	10000a26 	beq	r2,zero,c530 <__cxa_call_unexpected+0xc4>
    c508:	10bfffc4 	addi	r2,r2,-1
    c50c:	10000126 	beq	r2,zero,c514 <__cxa_call_unexpected+0xa8>
    c510:	003b68fa 	trap	3
    c514:	d8000815 	stw	zero,32(sp)
    c518:	000c8b00 	call	c8b0 <__cxa_end_catch>
    c51c:	000c8b00 	call	c8b0 <__cxa_end_catch>
    c520:	d9001717 	ldw	r4,92(sp)
    c524:	00bfffc4 	movi	r2,-1
    c528:	d8800815 	stw	r2,32(sp)
    c52c:	000e2a00 	call	e2a0 <_Unwind_SjLj_Resume>
    c530:	d9001717 	ldw	r4,92(sp)
    c534:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    c538:	000cca00 	call	cca0 <__cxa_get_globals_fast>
    c53c:	10800017 	ldw	r2,0(r2)
    c540:	10c00b17 	ldw	r3,44(r2)
    c544:	18c0004c 	andi	r3,r3,1
    c548:	18001e26 	beq	r3,zero,c5c4 <__cxa_call_unexpected+0x158>
    c54c:	10800017 	ldw	r2,0(r2)
    c550:	d8801715 	stw	r2,92(sp)
    c554:	d8801517 	ldw	r2,84(sp)
    c558:	00802b0e 	bge	zero,r2,c608 <__cxa_call_unexpected+0x19c>
    c55c:	d8c01717 	ldw	r3,92(sp)
    c560:	d8800317 	ldw	r2,12(sp)
    c564:	d9c01517 	ldw	r7,84(sp)
    c568:	193ff017 	ldw	r4,-64(r3)
    c56c:	d9801617 	ldw	r6,88(sp)
    c570:	d8800015 	stw	r2,0(sp)
    c574:	180b883a 	mov	r5,r3
    c578:	00800084 	movi	r2,2
    c57c:	d8800815 	stw	r2,32(sp)
    c580:	000bb980 	call	bb98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c584:	10803fcc 	andi	r2,r2,255
    c588:	10001e1e 	bne	r2,zero,c604 <__cxa_call_unexpected+0x198>
    c58c:	d8800317 	ldw	r2,12(sp)
    c590:	d9c01517 	ldw	r7,84(sp)
    c594:	d9801617 	ldw	r6,88(sp)
    c598:	010000f4 	movhi	r4,3
    c59c:	d8800015 	stw	r2,0(sp)
    c5a0:	212a1004 	addi	r4,r4,-22464
    c5a4:	00800084 	movi	r2,2
    c5a8:	000b883a 	mov	r5,zero
    c5ac:	d8800815 	stw	r2,32(sp)
    c5b0:	000bb980 	call	bb98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c5b4:	10803fcc 	andi	r2,r2,255
    c5b8:	1000051e 	bne	r2,zero,c5d0 <__cxa_call_unexpected+0x164>
    c5bc:	d9001417 	ldw	r4,80(sp)
    c5c0:	000b5040 	call	b504 <_ZN10__cxxabiv111__terminateEPFvvE>
    c5c4:	10801004 	addi	r2,r2,64
    c5c8:	d8801715 	stw	r2,92(sp)
    c5cc:	003fe106 	br	c554 <__alt_data_end+0xfc00c554>
    c5d0:	01000104 	movi	r4,4
    c5d4:	000cae40 	call	cae4 <__cxa_allocate_exception>
    c5d8:	00c000f4 	movhi	r3,3
    c5dc:	18ea2b04 	addi	r3,r3,-22356
    c5e0:	01800074 	movhi	r6,1
    c5e4:	014000f4 	movhi	r5,3
    c5e8:	10c00015 	stw	r3,0(r2)
    c5ec:	31b32f04 	addi	r6,r6,-13124
    c5f0:	00c00084 	movi	r3,2
    c5f4:	296a1004 	addi	r5,r5,-22464
    c5f8:	1009883a 	mov	r4,r2
    c5fc:	d8c00815 	stw	r3,32(sp)
    c600:	000c6e00 	call	c6e0 <__cxa_throw>
    c604:	000c7700 	call	c770 <__cxa_rethrow>
    c608:	d9401617 	ldw	r5,88(sp)
    c60c:	00800084 	movi	r2,2
    c610:	d9800104 	addi	r6,sp,4
    c614:	0009883a 	mov	r4,zero
    c618:	d8800815 	stw	r2,32(sp)
    c61c:	000b9dc0 	call	b9dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c620:	d9801717 	ldw	r6,92(sp)
    c624:	d9c01517 	ldw	r7,84(sp)
    c628:	d9000104 	addi	r4,sp,4
    c62c:	317ff017 	ldw	r5,-64(r6)
    c630:	000bdc40 	call	bdc4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c634:	10803fcc 	andi	r2,r2,255
    c638:	1000171e 	bne	r2,zero,c698 <__cxa_call_unexpected+0x22c>
    c63c:	d9c01517 	ldw	r7,84(sp)
    c640:	014000f4 	movhi	r5,3
    c644:	00800084 	movi	r2,2
    c648:	296a1004 	addi	r5,r5,-22464
    c64c:	000d883a 	mov	r6,zero
    c650:	d9000104 	addi	r4,sp,4
    c654:	d8800815 	stw	r2,32(sp)
    c658:	000bdc40 	call	bdc4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c65c:	10803fcc 	andi	r2,r2,255
    c660:	103fd626 	beq	r2,zero,c5bc <__alt_data_end+0xfc00c5bc>
    c664:	01000104 	movi	r4,4
    c668:	000cae40 	call	cae4 <__cxa_allocate_exception>
    c66c:	00c000f4 	movhi	r3,3
    c670:	18ea2b04 	addi	r3,r3,-22356
    c674:	01800074 	movhi	r6,1
    c678:	014000f4 	movhi	r5,3
    c67c:	10c00015 	stw	r3,0(r2)
    c680:	31b32f04 	addi	r6,r6,-13124
    c684:	00c00084 	movi	r3,2
    c688:	296a1004 	addi	r5,r5,-22464
    c68c:	1009883a 	mov	r4,r2
    c690:	d8c00815 	stw	r3,32(sp)
    c694:	000c6e00 	call	c6e0 <__cxa_throw>
    c698:	000c7700 	call	c770 <__cxa_rethrow>

0000c69c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c69c:	defffe04 	addi	sp,sp,-8
    c6a0:	dfc00115 	stw	ra,4(sp)
    c6a4:	dc000015 	stw	r16,0(sp)
    c6a8:	00800044 	movi	r2,1
    c6ac:	11000a36 	bltu	r2,r4,c6d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c6b0:	28bff617 	ldw	r2,-40(r5)
    c6b4:	2c000504 	addi	r16,r5,20
    c6b8:	10000226 	beq	r2,zero,c6c4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c6bc:	8009883a 	mov	r4,r16
    c6c0:	103ee83a 	callr	r2
    c6c4:	8009883a 	mov	r4,r16
    c6c8:	dfc00117 	ldw	ra,4(sp)
    c6cc:	dc000017 	ldw	r16,0(sp)
    c6d0:	dec00204 	addi	sp,sp,8
    c6d4:	000cb441 	jmpi	cb44 <__cxa_free_exception>
    c6d8:	293ff817 	ldw	r4,-32(r5)
    c6dc:	000b5040 	call	b504 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c6e0 <__cxa_throw>:
    c6e0:	defffb04 	addi	sp,sp,-20
    c6e4:	dfc00415 	stw	ra,16(sp)
    c6e8:	dcc00315 	stw	r19,12(sp)
    c6ec:	dc800215 	stw	r18,8(sp)
    c6f0:	2827883a 	mov	r19,r5
    c6f4:	3025883a 	mov	r18,r6
    c6f8:	dc400115 	stw	r17,4(sp)
    c6fc:	dc000015 	stw	r16,0(sp)
    c700:	2021883a 	mov	r16,r4
    c704:	000ccac0 	call	ccac <__cxa_get_globals>
    c708:	10c00117 	ldw	r3,4(r2)
    c70c:	847ffb04 	addi	r17,r16,-20
    c710:	18c00044 	addi	r3,r3,1
    c714:	10c00115 	stw	r3,4(r2)
    c718:	00800044 	movi	r2,1
    c71c:	80bfef15 	stw	r2,-68(r16)
    c720:	84fff015 	stw	r19,-64(r16)
    c724:	84bff115 	stw	r18,-60(r16)
    c728:	000b63c0 	call	b63c <_ZSt14get_unexpectedv>
    c72c:	80bff215 	stw	r2,-56(r16)
    c730:	000b6180 	call	b618 <_ZSt13get_terminatev>
    c734:	80bff315 	stw	r2,-52(r16)
    c738:	0090caf4 	movhi	r2,17195
    c73c:	108ac004 	addi	r2,r2,11008
    c740:	80bffb15 	stw	r2,-20(r16)
    c744:	0091d3b4 	movhi	r2,18254
    c748:	109550c4 	addi	r2,r2,21827
    c74c:	80bffc15 	stw	r2,-16(r16)
    c750:	00800074 	movhi	r2,1
    c754:	10b1a704 	addi	r2,r2,-14692
    c758:	8809883a 	mov	r4,r17
    c75c:	80bffd15 	stw	r2,-12(r16)
    c760:	000e18c0 	call	e18c <_Unwind_SjLj_RaiseException>
    c764:	8809883a 	mov	r4,r17
    c768:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    c76c:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000c770 <__cxa_rethrow>:
    c770:	defffe04 	addi	sp,sp,-8
    c774:	dfc00115 	stw	ra,4(sp)
    c778:	dc000015 	stw	r16,0(sp)
    c77c:	000ccac0 	call	ccac <__cxa_get_globals>
    c780:	10c00117 	ldw	r3,4(r2)
    c784:	11000017 	ldw	r4,0(r2)
    c788:	18c00044 	addi	r3,r3,1
    c78c:	10c00115 	stw	r3,4(r2)
    c790:	20001126 	beq	r4,zero,c7d8 <__cxa_rethrow+0x68>
    c794:	21400b17 	ldw	r5,44(r4)
    c798:	01ef3574 	movhi	r7,48341
    c79c:	39f54004 	addi	r7,r7,-11008
    c7a0:	29cf883a 	add	r7,r5,r7
    c7a4:	20c00c17 	ldw	r3,48(r4)
    c7a8:	394d803a 	cmpltu	r6,r7,r5
    c7ac:	016e2cb4 	movhi	r5,47282
    c7b0:	296aaf04 	addi	r5,r5,-21828
    c7b4:	1947883a 	add	r3,r3,r5
    c7b8:	30c7883a 	add	r3,r6,r3
    c7bc:	18000726 	beq	r3,zero,c7dc <__cxa_rethrow+0x6c>
    c7c0:	10000015 	stw	zero,0(r2)
    c7c4:	24000b04 	addi	r16,r4,44
    c7c8:	8009883a 	mov	r4,r16
    c7cc:	000e2e40 	call	e2e4 <_Unwind_SjLj_Resume_or_Rethrow>
    c7d0:	8009883a 	mov	r4,r16
    c7d4:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    c7d8:	000b5c40 	call	b5c4 <_ZSt9terminatev>
    c7dc:	00c00044 	movi	r3,1
    c7e0:	19fff736 	bltu	r3,r7,c7c0 <__alt_data_end+0xfc00c7c0>
    c7e4:	20800517 	ldw	r2,20(r4)
    c7e8:	0085c83a 	sub	r2,zero,r2
    c7ec:	20800515 	stw	r2,20(r4)
    c7f0:	003ff406 	br	c7c4 <__alt_data_end+0xfc00c7c4>

0000c7f4 <__cxa_get_exception_ptr>:
    c7f4:	20bfff17 	ldw	r2,-4(r4)
    c7f8:	f800283a 	ret

0000c7fc <__cxa_begin_catch>:
    c7fc:	defffe04 	addi	sp,sp,-8
    c800:	dc000015 	stw	r16,0(sp)
    c804:	dfc00115 	stw	ra,4(sp)
    c808:	2021883a 	mov	r16,r4
    c80c:	000ccac0 	call	ccac <__cxa_get_globals>
    c810:	81000017 	ldw	r4,0(r16)
    c814:	80c00117 	ldw	r3,4(r16)
    c818:	01af3574 	movhi	r6,48341
    c81c:	31b54004 	addi	r6,r6,-11008
    c820:	016e2cb4 	movhi	r5,47282
    c824:	296aaf04 	addi	r5,r5,-21828
    c828:	218d883a 	add	r6,r4,r6
    c82c:	3109803a 	cmpltu	r4,r6,r4
    c830:	1947883a 	add	r3,r3,r5
    c834:	20c7883a 	add	r3,r4,r3
    c838:	817ff504 	addi	r5,r16,-44
    c83c:	11000017 	ldw	r4,0(r2)
    c840:	18000726 	beq	r3,zero,c860 <__cxa_begin_catch+0x64>
    c844:	2000191e 	bne	r4,zero,c8ac <__cxa_begin_catch+0xb0>
    c848:	11400015 	stw	r5,0(r2)
    c84c:	0005883a 	mov	r2,zero
    c850:	dfc00117 	ldw	ra,4(sp)
    c854:	dc000017 	ldw	r16,0(sp)
    c858:	dec00204 	addi	sp,sp,8
    c85c:	f800283a 	ret
    c860:	01c00044 	movi	r7,1
    c864:	39bff736 	bltu	r7,r6,c844 <__alt_data_end+0xfc00c844>
    c868:	80fffa17 	ldw	r3,-24(r16)
    c86c:	18000d16 	blt	r3,zero,c8a4 <__cxa_begin_catch+0xa8>
    c870:	18c00044 	addi	r3,r3,1
    c874:	11800117 	ldw	r6,4(r2)
    c878:	80fffa15 	stw	r3,-24(r16)
    c87c:	30ffffc4 	addi	r3,r6,-1
    c880:	10c00115 	stw	r3,4(r2)
    c884:	21400226 	beq	r4,r5,c890 <__cxa_begin_catch+0x94>
    c888:	813ff915 	stw	r4,-28(r16)
    c88c:	11400015 	stw	r5,0(r2)
    c890:	80bfff17 	ldw	r2,-4(r16)
    c894:	dfc00117 	ldw	ra,4(sp)
    c898:	dc000017 	ldw	r16,0(sp)
    c89c:	dec00204 	addi	sp,sp,8
    c8a0:	f800283a 	ret
    c8a4:	38c7c83a 	sub	r3,r7,r3
    c8a8:	003ff206 	br	c874 <__alt_data_end+0xfc00c874>
    c8ac:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000c8b0 <__cxa_end_catch>:
    c8b0:	deffff04 	addi	sp,sp,-4
    c8b4:	dfc00015 	stw	ra,0(sp)
    c8b8:	000cca00 	call	cca0 <__cxa_get_globals_fast>
    c8bc:	11000017 	ldw	r4,0(r2)
    c8c0:	20001426 	beq	r4,zero,c914 <__cxa_end_catch+0x64>
    c8c4:	21400b17 	ldw	r5,44(r4)
    c8c8:	01ef3574 	movhi	r7,48341
    c8cc:	39f54004 	addi	r7,r7,-11008
    c8d0:	29cf883a 	add	r7,r5,r7
    c8d4:	20c00c17 	ldw	r3,48(r4)
    c8d8:	394d803a 	cmpltu	r6,r7,r5
    c8dc:	016e2cb4 	movhi	r5,47282
    c8e0:	296aaf04 	addi	r5,r5,-21828
    c8e4:	1947883a 	add	r3,r3,r5
    c8e8:	30c7883a 	add	r3,r6,r3
    c8ec:	18000c1e 	bne	r3,zero,c920 <__cxa_end_catch+0x70>
    c8f0:	00c00044 	movi	r3,1
    c8f4:	19c00a36 	bltu	r3,r7,c920 <__cxa_end_catch+0x70>
    c8f8:	20c00517 	ldw	r3,20(r4)
    c8fc:	18000d16 	blt	r3,zero,c934 <__cxa_end_catch+0x84>
    c900:	18ffffc4 	addi	r3,r3,-1
    c904:	18001026 	beq	r3,zero,c948 <__cxa_end_catch+0x98>
    c908:	00bfffc4 	movi	r2,-1
    c90c:	18801426 	beq	r3,r2,c960 <__cxa_end_catch+0xb0>
    c910:	20c00515 	stw	r3,20(r4)
    c914:	dfc00017 	ldw	ra,0(sp)
    c918:	dec00104 	addi	sp,sp,4
    c91c:	f800283a 	ret
    c920:	21000b04 	addi	r4,r4,44
    c924:	10000015 	stw	zero,0(r2)
    c928:	dfc00017 	ldw	ra,0(sp)
    c92c:	dec00104 	addi	sp,sp,4
    c930:	000e3301 	jmpi	e330 <_Unwind_DeleteException>
    c934:	18c00044 	addi	r3,r3,1
    c938:	183ff51e 	bne	r3,zero,c910 <__alt_data_end+0xfc00c910>
    c93c:	21400417 	ldw	r5,16(r4)
    c940:	11400015 	stw	r5,0(r2)
    c944:	003ff206 	br	c910 <__alt_data_end+0xfc00c910>
    c948:	20c00417 	ldw	r3,16(r4)
    c94c:	21000b04 	addi	r4,r4,44
    c950:	10c00015 	stw	r3,0(r2)
    c954:	dfc00017 	ldw	ra,0(sp)
    c958:	dec00104 	addi	sp,sp,4
    c95c:	000e3301 	jmpi	e330 <_Unwind_DeleteException>
    c960:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000c964 <_ZSt18uncaught_exceptionv>:
    c964:	deffff04 	addi	sp,sp,-4
    c968:	dfc00015 	stw	ra,0(sp)
    c96c:	000ccac0 	call	ccac <__cxa_get_globals>
    c970:	10800117 	ldw	r2,4(r2)
    c974:	1004c03a 	cmpne	r2,r2,zero
    c978:	dfc00017 	ldw	ra,0(sp)
    c97c:	dec00104 	addi	sp,sp,4
    c980:	f800283a 	ret

0000c984 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c984:	018000f4 	movhi	r6,3
    c988:	31846204 	addi	r6,r6,4488
    c98c:	31400117 	ldw	r5,4(r6)
    c990:	223fff04 	addi	r8,r4,-4
    c994:	227fff17 	ldw	r9,-4(r4)
    c998:	28001326 	beq	r5,zero,c9e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c99c:	424f883a 	add	r7,r8,r9
    c9a0:	29c01426 	beq	r5,r7,c9f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c9a4:	28c00117 	ldw	r3,4(r5)
    c9a8:	18001c26 	beq	r3,zero,ca1c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c9ac:	38c00336 	bltu	r7,r3,c9bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c9b0:	00001e06 	br	ca2c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c9b4:	3880052e 	bgeu	r7,r2,c9cc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c9b8:	1007883a 	mov	r3,r2
    c9bc:	18800117 	ldw	r2,4(r3)
    c9c0:	29800104 	addi	r6,r5,4
    c9c4:	180b883a 	mov	r5,r3
    c9c8:	103ffa1e 	bne	r2,zero,c9b4 <__alt_data_end+0xfc00c9b4>
    c9cc:	19400017 	ldw	r5,0(r3)
    c9d0:	194f883a 	add	r7,r3,r5
    c9d4:	41c00e26 	beq	r8,r7,ca10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c9d8:	20800015 	stw	r2,0(r4)
    c9dc:	30800017 	ldw	r2,0(r6)
    c9e0:	12000115 	stw	r8,4(r2)
    c9e4:	f800283a 	ret
    c9e8:	20000015 	stw	zero,0(r4)
    c9ec:	32000115 	stw	r8,4(r6)
    c9f0:	f800283a 	ret
    c9f4:	28c00017 	ldw	r3,0(r5)
    c9f8:	28800117 	ldw	r2,4(r5)
    c9fc:	1a53883a 	add	r9,r3,r9
    ca00:	227fff15 	stw	r9,-4(r4)
    ca04:	20800015 	stw	r2,0(r4)
    ca08:	32000115 	stw	r8,4(r6)
    ca0c:	f800283a 	ret
    ca10:	494b883a 	add	r5,r9,r5
    ca14:	19400015 	stw	r5,0(r3)
    ca18:	f800283a 	ret
    ca1c:	0005883a 	mov	r2,zero
    ca20:	2807883a 	mov	r3,r5
    ca24:	31800104 	addi	r6,r6,4
    ca28:	003fe806 	br	c9cc <__alt_data_end+0xfc00c9cc>
    ca2c:	1805883a 	mov	r2,r3
    ca30:	31800104 	addi	r6,r6,4
    ca34:	2807883a 	mov	r3,r5
    ca38:	003fe406 	br	c9cc <__alt_data_end+0xfc00c9cc>

0000ca3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    ca3c:	20800104 	addi	r2,r4,4
    ca40:	00c001c4 	movi	r3,7
    ca44:	1880112e 	bgeu	r3,r2,ca8c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    ca48:	20c9883a 	add	r4,r4,r3
    ca4c:	00bfff04 	movi	r2,-4
    ca50:	208a703a 	and	r5,r4,r2
    ca54:	018000f4 	movhi	r6,3
    ca58:	31846204 	addi	r6,r6,4488
    ca5c:	30c00117 	ldw	r3,4(r6)
    ca60:	18000826 	beq	r3,zero,ca84 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    ca64:	19000017 	ldw	r4,0(r3)
    ca68:	21400436 	bltu	r4,r5,ca7c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    ca6c:	00001a06 	br	cad8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    ca70:	11000017 	ldw	r4,0(r2)
    ca74:	2140072e 	bgeu	r4,r5,ca94 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    ca78:	1007883a 	mov	r3,r2
    ca7c:	18800117 	ldw	r2,4(r3)
    ca80:	103ffb1e 	bne	r2,zero,ca70 <__alt_data_end+0xfc00ca70>
    ca84:	0005883a 	mov	r2,zero
    ca88:	f800283a 	ret
    ca8c:	01400204 	movi	r5,8
    ca90:	003ff006 	br	ca54 <__alt_data_end+0xfc00ca54>
    ca94:	18c00104 	addi	r3,r3,4
    ca98:	2149c83a 	sub	r4,r4,r5
    ca9c:	018001c4 	movi	r6,7
    caa0:	3100092e 	bgeu	r6,r4,cac8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    caa4:	11c00117 	ldw	r7,4(r2)
    caa8:	114d883a 	add	r6,r2,r5
    caac:	31000015 	stw	r4,0(r6)
    cab0:	31c00115 	stw	r7,4(r6)
    cab4:	18800017 	ldw	r2,0(r3)
    cab8:	11400015 	stw	r5,0(r2)
    cabc:	19800015 	stw	r6,0(r3)
    cac0:	10800104 	addi	r2,r2,4
    cac4:	f800283a 	ret
    cac8:	11000117 	ldw	r4,4(r2)
    cacc:	10800104 	addi	r2,r2,4
    cad0:	19000015 	stw	r4,0(r3)
    cad4:	f800283a 	ret
    cad8:	1805883a 	mov	r2,r3
    cadc:	30c00104 	addi	r3,r6,4
    cae0:	003fed06 	br	ca98 <__alt_data_end+0xfc00ca98>

0000cae4 <__cxa_allocate_exception>:
    cae4:	defffd04 	addi	sp,sp,-12
    cae8:	dc400115 	stw	r17,4(sp)
    caec:	24401104 	addi	r17,r4,68
    caf0:	8809883a 	mov	r4,r17
    caf4:	dc000015 	stw	r16,0(sp)
    caf8:	dfc00215 	stw	ra,8(sp)
    cafc:	000e4840 	call	e484 <malloc>
    cb00:	1021883a 	mov	r16,r2
    cb04:	10000a26 	beq	r2,zero,cb30 <__cxa_allocate_exception+0x4c>
    cb08:	01801104 	movi	r6,68
    cb0c:	000b883a 	mov	r5,zero
    cb10:	8009883a 	mov	r4,r16
    cb14:	000ee000 	call	ee00 <memset>
    cb18:	80801104 	addi	r2,r16,68
    cb1c:	dfc00217 	ldw	ra,8(sp)
    cb20:	dc400117 	ldw	r17,4(sp)
    cb24:	dc000017 	ldw	r16,0(sp)
    cb28:	dec00304 	addi	sp,sp,12
    cb2c:	f800283a 	ret
    cb30:	8809883a 	mov	r4,r17
    cb34:	000ca3c0 	call	ca3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    cb38:	1021883a 	mov	r16,r2
    cb3c:	103ff21e 	bne	r2,zero,cb08 <__alt_data_end+0xfc00cb08>
    cb40:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000cb44 <__cxa_free_exception>:
    cb44:	00c000f4 	movhi	r3,3
    cb48:	18c46204 	addi	r3,r3,4488
    cb4c:	18800217 	ldw	r2,8(r3)
    cb50:	213fef04 	addi	r4,r4,-68
    cb54:	1100042e 	bgeu	r2,r4,cb68 <__cxa_free_exception+0x24>
    cb58:	18c00317 	ldw	r3,12(r3)
    cb5c:	10c5883a 	add	r2,r2,r3
    cb60:	2080012e 	bgeu	r4,r2,cb68 <__cxa_free_exception+0x24>
    cb64:	000c9841 	jmpi	c984 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cb68:	000e4981 	jmpi	e498 <free>

0000cb6c <__cxa_allocate_dependent_exception>:
    cb6c:	defffe04 	addi	sp,sp,-8
    cb70:	01001004 	movi	r4,64
    cb74:	dc000015 	stw	r16,0(sp)
    cb78:	dfc00115 	stw	ra,4(sp)
    cb7c:	000e4840 	call	e484 <malloc>
    cb80:	1021883a 	mov	r16,r2
    cb84:	10000926 	beq	r2,zero,cbac <__cxa_allocate_dependent_exception+0x40>
    cb88:	01801004 	movi	r6,64
    cb8c:	000b883a 	mov	r5,zero
    cb90:	8009883a 	mov	r4,r16
    cb94:	000ee000 	call	ee00 <memset>
    cb98:	8005883a 	mov	r2,r16
    cb9c:	dfc00117 	ldw	ra,4(sp)
    cba0:	dc000017 	ldw	r16,0(sp)
    cba4:	dec00204 	addi	sp,sp,8
    cba8:	f800283a 	ret
    cbac:	01001004 	movi	r4,64
    cbb0:	000ca3c0 	call	ca3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    cbb4:	1021883a 	mov	r16,r2
    cbb8:	103ff31e 	bne	r2,zero,cb88 <__alt_data_end+0xfc00cb88>
    cbbc:	000b5c40 	call	b5c4 <_ZSt9terminatev>

0000cbc0 <__cxa_free_dependent_exception>:
    cbc0:	014000f4 	movhi	r5,3
    cbc4:	29446204 	addi	r5,r5,4488
    cbc8:	28c00217 	ldw	r3,8(r5)
    cbcc:	2005883a 	mov	r2,r4
    cbd0:	1900042e 	bgeu	r3,r4,cbe4 <__cxa_free_dependent_exception+0x24>
    cbd4:	29400317 	ldw	r5,12(r5)
    cbd8:	1947883a 	add	r3,r3,r5
    cbdc:	20c0012e 	bgeu	r4,r3,cbe4 <__cxa_free_dependent_exception+0x24>
    cbe0:	000c9841 	jmpi	c984 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cbe4:	1009883a 	mov	r4,r2
    cbe8:	000e4981 	jmpi	e498 <free>

0000cbec <_GLOBAL__sub_I___cxa_allocate_exception>:
    cbec:	defffd04 	addi	sp,sp,-12
    cbf0:	dc400115 	stw	r17,4(sp)
    cbf4:	dc000015 	stw	r16,0(sp)
    cbf8:	04424004 	movi	r17,2304
    cbfc:	040000f4 	movhi	r16,3
    cc00:	84046204 	addi	r16,r16,4488
    cc04:	8809883a 	mov	r4,r17
    cc08:	dfc00215 	stw	ra,8(sp)
    cc0c:	84400315 	stw	r17,12(r16)
    cc10:	000e4840 	call	e484 <malloc>
    cc14:	80800215 	stw	r2,8(r16)
    cc18:	10000826 	beq	r2,zero,cc3c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    cc1c:	80800115 	stw	r2,4(r16)
    cc20:	14400015 	stw	r17,0(r2)
    cc24:	10000115 	stw	zero,4(r2)
    cc28:	dfc00217 	ldw	ra,8(sp)
    cc2c:	dc400117 	ldw	r17,4(sp)
    cc30:	dc000017 	ldw	r16,0(sp)
    cc34:	dec00304 	addi	sp,sp,12
    cc38:	f800283a 	ret
    cc3c:	80000315 	stw	zero,12(r16)
    cc40:	80000115 	stw	zero,4(r16)
    cc44:	003ff806 	br	cc28 <__alt_data_end+0xfc00cc28>

0000cc48 <__cxa_call_terminate>:
    cc48:	defffe04 	addi	sp,sp,-8
    cc4c:	dfc00115 	stw	ra,4(sp)
    cc50:	dc000015 	stw	r16,0(sp)
    cc54:	20000d26 	beq	r4,zero,cc8c <__cxa_call_terminate+0x44>
    cc58:	2021883a 	mov	r16,r4
    cc5c:	000c7fc0 	call	c7fc <__cxa_begin_catch>
    cc60:	80c00017 	ldw	r3,0(r16)
    cc64:	016f3574 	movhi	r5,48341
    cc68:	29754004 	addi	r5,r5,-11008
    cc6c:	194b883a 	add	r5,r3,r5
    cc70:	80800117 	ldw	r2,4(r16)
    cc74:	28c9803a 	cmpltu	r4,r5,r3
    cc78:	00ee2cb4 	movhi	r3,47282
    cc7c:	18eaaf04 	addi	r3,r3,-21828
    cc80:	10c5883a 	add	r2,r2,r3
    cc84:	2085883a 	add	r2,r4,r2
    cc88:	10000126 	beq	r2,zero,cc90 <__cxa_call_terminate+0x48>
    cc8c:	000b5c40 	call	b5c4 <_ZSt9terminatev>
    cc90:	00800044 	movi	r2,1
    cc94:	117ffd36 	bltu	r2,r5,cc8c <__alt_data_end+0xfc00cc8c>
    cc98:	813ff817 	ldw	r4,-32(r16)
    cc9c:	000b5040 	call	b504 <_ZN10__cxxabiv111__terminateEPFvvE>

0000cca0 <__cxa_get_globals_fast>:
    cca0:	008000f4 	movhi	r2,3
    cca4:	10840904 	addi	r2,r2,4132
    cca8:	f800283a 	ret

0000ccac <__cxa_get_globals>:
    ccac:	008000f4 	movhi	r2,3
    ccb0:	10840904 	addi	r2,r2,4132
    ccb4:	f800283a 	ret

0000ccb8 <_ZNSt9exceptionD1Ev>:
    ccb8:	f800283a 	ret

0000ccbc <_ZNSt13bad_exceptionD1Ev>:
    ccbc:	f800283a 	ret

0000ccc0 <_ZNKSt9exception4whatEv>:
    ccc0:	008000f4 	movhi	r2,3
    ccc4:	10a9fe04 	addi	r2,r2,-22536
    ccc8:	f800283a 	ret

0000cccc <_ZNKSt13bad_exception4whatEv>:
    cccc:	008000f4 	movhi	r2,3
    ccd0:	10aa0204 	addi	r2,r2,-22520
    ccd4:	f800283a 	ret

0000ccd8 <_ZNSt9exceptionD0Ev>:
    ccd8:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000ccdc <_ZNSt13bad_exceptionD0Ev>:
    ccdc:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000cce0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cce0:	f800283a 	ret

0000cce4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cce4:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000cce8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cce8:	f800283a 	ret

0000ccec <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    ccec:	000b1f81 	jmpi	b1f8 <_ZdlPv>

0000ccf0 <__fixunssfsi>:
    ccf0:	defffd04 	addi	sp,sp,-12
    ccf4:	dc000015 	stw	r16,0(sp)
    ccf8:	0413c034 	movhi	r16,20224
    ccfc:	800b883a 	mov	r5,r16
    cd00:	dc400115 	stw	r17,4(sp)
    cd04:	dfc00215 	stw	ra,8(sp)
    cd08:	2023883a 	mov	r17,r4
    cd0c:	000d36c0 	call	d36c <__gesf2>
    cd10:	1000070e 	bge	r2,zero,cd30 <__fixunssfsi+0x40>
    cd14:	8809883a 	mov	r4,r17
    cd18:	000dd3c0 	call	dd3c <__fixsfsi>
    cd1c:	dfc00217 	ldw	ra,8(sp)
    cd20:	dc400117 	ldw	r17,4(sp)
    cd24:	dc000017 	ldw	r16,0(sp)
    cd28:	dec00304 	addi	sp,sp,12
    cd2c:	f800283a 	ret
    cd30:	800b883a 	mov	r5,r16
    cd34:	8809883a 	mov	r4,r17
    cd38:	000d8580 	call	d858 <__subsf3>
    cd3c:	1009883a 	mov	r4,r2
    cd40:	000dd3c0 	call	dd3c <__fixsfsi>
    cd44:	00e00034 	movhi	r3,32768
    cd48:	10c5883a 	add	r2,r2,r3
    cd4c:	003ff306 	br	cd1c <__alt_data_end+0xfc00cd1c>

0000cd50 <__divsi3>:
    cd50:	20001b16 	blt	r4,zero,cdc0 <__divsi3+0x70>
    cd54:	000f883a 	mov	r7,zero
    cd58:	28001616 	blt	r5,zero,cdb4 <__divsi3+0x64>
    cd5c:	200d883a 	mov	r6,r4
    cd60:	29001a2e 	bgeu	r5,r4,cdcc <__divsi3+0x7c>
    cd64:	00800804 	movi	r2,32
    cd68:	00c00044 	movi	r3,1
    cd6c:	00000106 	br	cd74 <__divsi3+0x24>
    cd70:	10000d26 	beq	r2,zero,cda8 <__divsi3+0x58>
    cd74:	294b883a 	add	r5,r5,r5
    cd78:	10bfffc4 	addi	r2,r2,-1
    cd7c:	18c7883a 	add	r3,r3,r3
    cd80:	293ffb36 	bltu	r5,r4,cd70 <__alt_data_end+0xfc00cd70>
    cd84:	0005883a 	mov	r2,zero
    cd88:	18000726 	beq	r3,zero,cda8 <__divsi3+0x58>
    cd8c:	0005883a 	mov	r2,zero
    cd90:	31400236 	bltu	r6,r5,cd9c <__divsi3+0x4c>
    cd94:	314dc83a 	sub	r6,r6,r5
    cd98:	10c4b03a 	or	r2,r2,r3
    cd9c:	1806d07a 	srli	r3,r3,1
    cda0:	280ad07a 	srli	r5,r5,1
    cda4:	183ffa1e 	bne	r3,zero,cd90 <__alt_data_end+0xfc00cd90>
    cda8:	38000126 	beq	r7,zero,cdb0 <__divsi3+0x60>
    cdac:	0085c83a 	sub	r2,zero,r2
    cdb0:	f800283a 	ret
    cdb4:	014bc83a 	sub	r5,zero,r5
    cdb8:	39c0005c 	xori	r7,r7,1
    cdbc:	003fe706 	br	cd5c <__alt_data_end+0xfc00cd5c>
    cdc0:	0109c83a 	sub	r4,zero,r4
    cdc4:	01c00044 	movi	r7,1
    cdc8:	003fe306 	br	cd58 <__alt_data_end+0xfc00cd58>
    cdcc:	00c00044 	movi	r3,1
    cdd0:	003fee06 	br	cd8c <__alt_data_end+0xfc00cd8c>

0000cdd4 <__modsi3>:
    cdd4:	20001716 	blt	r4,zero,ce34 <__modsi3+0x60>
    cdd8:	000f883a 	mov	r7,zero
    cddc:	2005883a 	mov	r2,r4
    cde0:	28001216 	blt	r5,zero,ce2c <__modsi3+0x58>
    cde4:	2900162e 	bgeu	r5,r4,ce40 <__modsi3+0x6c>
    cde8:	01800804 	movi	r6,32
    cdec:	00c00044 	movi	r3,1
    cdf0:	00000106 	br	cdf8 <__modsi3+0x24>
    cdf4:	30000a26 	beq	r6,zero,ce20 <__modsi3+0x4c>
    cdf8:	294b883a 	add	r5,r5,r5
    cdfc:	31bfffc4 	addi	r6,r6,-1
    ce00:	18c7883a 	add	r3,r3,r3
    ce04:	293ffb36 	bltu	r5,r4,cdf4 <__alt_data_end+0xfc00cdf4>
    ce08:	18000526 	beq	r3,zero,ce20 <__modsi3+0x4c>
    ce0c:	1806d07a 	srli	r3,r3,1
    ce10:	11400136 	bltu	r2,r5,ce18 <__modsi3+0x44>
    ce14:	1145c83a 	sub	r2,r2,r5
    ce18:	280ad07a 	srli	r5,r5,1
    ce1c:	183ffb1e 	bne	r3,zero,ce0c <__alt_data_end+0xfc00ce0c>
    ce20:	38000126 	beq	r7,zero,ce28 <__modsi3+0x54>
    ce24:	0085c83a 	sub	r2,zero,r2
    ce28:	f800283a 	ret
    ce2c:	014bc83a 	sub	r5,zero,r5
    ce30:	003fec06 	br	cde4 <__alt_data_end+0xfc00cde4>
    ce34:	0109c83a 	sub	r4,zero,r4
    ce38:	01c00044 	movi	r7,1
    ce3c:	003fe706 	br	cddc <__alt_data_end+0xfc00cddc>
    ce40:	00c00044 	movi	r3,1
    ce44:	003ff106 	br	ce0c <__alt_data_end+0xfc00ce0c>

0000ce48 <__udivsi3>:
    ce48:	200d883a 	mov	r6,r4
    ce4c:	2900152e 	bgeu	r5,r4,cea4 <__udivsi3+0x5c>
    ce50:	28001416 	blt	r5,zero,cea4 <__udivsi3+0x5c>
    ce54:	00800804 	movi	r2,32
    ce58:	00c00044 	movi	r3,1
    ce5c:	00000206 	br	ce68 <__udivsi3+0x20>
    ce60:	10000e26 	beq	r2,zero,ce9c <__udivsi3+0x54>
    ce64:	28000516 	blt	r5,zero,ce7c <__udivsi3+0x34>
    ce68:	294b883a 	add	r5,r5,r5
    ce6c:	10bfffc4 	addi	r2,r2,-1
    ce70:	18c7883a 	add	r3,r3,r3
    ce74:	293ffa36 	bltu	r5,r4,ce60 <__alt_data_end+0xfc00ce60>
    ce78:	18000826 	beq	r3,zero,ce9c <__udivsi3+0x54>
    ce7c:	0005883a 	mov	r2,zero
    ce80:	31400236 	bltu	r6,r5,ce8c <__udivsi3+0x44>
    ce84:	314dc83a 	sub	r6,r6,r5
    ce88:	10c4b03a 	or	r2,r2,r3
    ce8c:	1806d07a 	srli	r3,r3,1
    ce90:	280ad07a 	srli	r5,r5,1
    ce94:	183ffa1e 	bne	r3,zero,ce80 <__alt_data_end+0xfc00ce80>
    ce98:	f800283a 	ret
    ce9c:	0005883a 	mov	r2,zero
    cea0:	f800283a 	ret
    cea4:	00c00044 	movi	r3,1
    cea8:	003ff406 	br	ce7c <__alt_data_end+0xfc00ce7c>

0000ceac <__umodsi3>:
    ceac:	2005883a 	mov	r2,r4
    ceb0:	2900122e 	bgeu	r5,r4,cefc <__umodsi3+0x50>
    ceb4:	28001116 	blt	r5,zero,cefc <__umodsi3+0x50>
    ceb8:	01800804 	movi	r6,32
    cebc:	00c00044 	movi	r3,1
    cec0:	00000206 	br	cecc <__umodsi3+0x20>
    cec4:	30000c26 	beq	r6,zero,cef8 <__umodsi3+0x4c>
    cec8:	28000516 	blt	r5,zero,cee0 <__umodsi3+0x34>
    cecc:	294b883a 	add	r5,r5,r5
    ced0:	31bfffc4 	addi	r6,r6,-1
    ced4:	18c7883a 	add	r3,r3,r3
    ced8:	293ffa36 	bltu	r5,r4,cec4 <__alt_data_end+0xfc00cec4>
    cedc:	18000626 	beq	r3,zero,cef8 <__umodsi3+0x4c>
    cee0:	1806d07a 	srli	r3,r3,1
    cee4:	11400136 	bltu	r2,r5,ceec <__umodsi3+0x40>
    cee8:	1145c83a 	sub	r2,r2,r5
    ceec:	280ad07a 	srli	r5,r5,1
    cef0:	183ffb1e 	bne	r3,zero,cee0 <__alt_data_end+0xfc00cee0>
    cef4:	f800283a 	ret
    cef8:	f800283a 	ret
    cefc:	00c00044 	movi	r3,1
    cf00:	003ff706 	br	cee0 <__alt_data_end+0xfc00cee0>

0000cf04 <__mulsi3>:
    cf04:	0005883a 	mov	r2,zero
    cf08:	20000726 	beq	r4,zero,cf28 <__mulsi3+0x24>
    cf0c:	20c0004c 	andi	r3,r4,1
    cf10:	2008d07a 	srli	r4,r4,1
    cf14:	18000126 	beq	r3,zero,cf1c <__mulsi3+0x18>
    cf18:	1145883a 	add	r2,r2,r5
    cf1c:	294b883a 	add	r5,r5,r5
    cf20:	203ffa1e 	bne	r4,zero,cf0c <__alt_data_end+0xfc00cf0c>
    cf24:	f800283a 	ret
    cf28:	f800283a 	ret

0000cf2c <__divsf3>:
    cf2c:	defff504 	addi	sp,sp,-44
    cf30:	200cd5fa 	srli	r6,r4,23
    cf34:	dcc00415 	stw	r19,16(sp)
    cf38:	2026d7fa 	srli	r19,r4,31
    cf3c:	00c02034 	movhi	r3,128
    cf40:	dd800715 	stw	r22,28(sp)
    cf44:	dd000515 	stw	r20,20(sp)
    cf48:	dc800315 	stw	r18,12(sp)
    cf4c:	18ffffc4 	addi	r3,r3,-1
    cf50:	dfc00a15 	stw	ra,40(sp)
    cf54:	df000915 	stw	fp,36(sp)
    cf58:	ddc00815 	stw	r23,32(sp)
    cf5c:	dd400615 	stw	r21,24(sp)
    cf60:	dc400215 	stw	r17,8(sp)
    cf64:	dc000115 	stw	r16,4(sp)
    cf68:	35003fcc 	andi	r20,r6,255
    cf6c:	1924703a 	and	r18,r3,r4
    cf70:	9d803fcc 	andi	r22,r19,255
    cf74:	a0005226 	beq	r20,zero,d0c0 <__divsf3+0x194>
    cf78:	00803fc4 	movi	r2,255
    cf7c:	a0802e26 	beq	r20,r2,d038 <__divsf3+0x10c>
    cf80:	91002034 	orhi	r4,r18,128
    cf84:	202490fa 	slli	r18,r4,3
    cf88:	a53fe044 	addi	r20,r20,-127
    cf8c:	0021883a 	mov	r16,zero
    cf90:	002f883a 	mov	r23,zero
    cf94:	280cd5fa 	srli	r6,r5,23
    cf98:	282ad7fa 	srli	r21,r5,31
    cf9c:	00c02034 	movhi	r3,128
    cfa0:	18ffffc4 	addi	r3,r3,-1
    cfa4:	31803fcc 	andi	r6,r6,255
    cfa8:	1962703a 	and	r17,r3,r5
    cfac:	af003fcc 	andi	fp,r21,255
    cfb0:	30004a26 	beq	r6,zero,d0dc <__divsf3+0x1b0>
    cfb4:	00803fc4 	movi	r2,255
    cfb8:	30804526 	beq	r6,r2,d0d0 <__divsf3+0x1a4>
    cfbc:	89402034 	orhi	r5,r17,128
    cfc0:	282290fa 	slli	r17,r5,3
    cfc4:	31bfe044 	addi	r6,r6,-127
    cfc8:	000b883a 	mov	r5,zero
    cfcc:	2c20b03a 	or	r16,r5,r16
    cfd0:	802090ba 	slli	r16,r16,2
    cfd4:	00800074 	movhi	r2,1
    cfd8:	10b3fe04 	addi	r2,r2,-12296
    cfdc:	80a1883a 	add	r16,r16,r2
    cfe0:	81000017 	ldw	r4,0(r16)
    cfe4:	9d46f03a 	xor	r3,r19,r21
    cfe8:	180f883a 	mov	r7,r3
    cfec:	18803fcc 	andi	r2,r3,255
    cff0:	a18dc83a 	sub	r6,r20,r6
    cff4:	2000683a 	jmp	r4
    cff8:	0000d1dc 	xori	zero,zero,839
    cffc:	0000d060 	cmpeqi	zero,zero,833
    d000:	0000d1d0 	cmplti	zero,zero,839
    d004:	0000d04c 	andi	zero,zero,833
    d008:	0000d1d0 	cmplti	zero,zero,839
    d00c:	0000d1a8 	cmpgeui	zero,zero,838
    d010:	0000d1d0 	cmplti	zero,zero,839
    d014:	0000d04c 	andi	zero,zero,833
    d018:	0000d060 	cmpeqi	zero,zero,833
    d01c:	0000d060 	cmpeqi	zero,zero,833
    d020:	0000d1a8 	cmpgeui	zero,zero,838
    d024:	0000d04c 	andi	zero,zero,833
    d028:	0000d2bc 	xorhi	zero,zero,842
    d02c:	0000d2bc 	xorhi	zero,zero,842
    d030:	0000d2bc 	xorhi	zero,zero,842
    d034:	0000d270 	cmpltui	zero,zero,841
    d038:	9000581e 	bne	r18,zero,d19c <__divsf3+0x270>
    d03c:	04000204 	movi	r16,8
    d040:	05c00084 	movi	r23,2
    d044:	003fd306 	br	cf94 <__alt_data_end+0xfc00cf94>
    d048:	0023883a 	mov	r17,zero
    d04c:	e02d883a 	mov	r22,fp
    d050:	282f883a 	mov	r23,r5
    d054:	00800084 	movi	r2,2
    d058:	b8808f1e 	bne	r23,r2,d298 <__divsf3+0x36c>
    d05c:	b005883a 	mov	r2,r22
    d060:	11c0004c 	andi	r7,r2,1
    d064:	013fffc4 	movi	r4,-1
    d068:	000d883a 	mov	r6,zero
    d06c:	21003fcc 	andi	r4,r4,255
    d070:	200895fa 	slli	r4,r4,23
    d074:	38803fcc 	andi	r2,r7,255
    d078:	00c02034 	movhi	r3,128
    d07c:	100497fa 	slli	r2,r2,31
    d080:	18ffffc4 	addi	r3,r3,-1
    d084:	30c6703a 	and	r3,r6,r3
    d088:	1906b03a 	or	r3,r3,r4
    d08c:	1884b03a 	or	r2,r3,r2
    d090:	dfc00a17 	ldw	ra,40(sp)
    d094:	df000917 	ldw	fp,36(sp)
    d098:	ddc00817 	ldw	r23,32(sp)
    d09c:	dd800717 	ldw	r22,28(sp)
    d0a0:	dd400617 	ldw	r21,24(sp)
    d0a4:	dd000517 	ldw	r20,20(sp)
    d0a8:	dcc00417 	ldw	r19,16(sp)
    d0ac:	dc800317 	ldw	r18,12(sp)
    d0b0:	dc400217 	ldw	r17,8(sp)
    d0b4:	dc000117 	ldw	r16,4(sp)
    d0b8:	dec00b04 	addi	sp,sp,44
    d0bc:	f800283a 	ret
    d0c0:	90002b1e 	bne	r18,zero,d170 <__divsf3+0x244>
    d0c4:	04000104 	movi	r16,4
    d0c8:	05c00044 	movi	r23,1
    d0cc:	003fb106 	br	cf94 <__alt_data_end+0xfc00cf94>
    d0d0:	8800251e 	bne	r17,zero,d168 <__divsf3+0x23c>
    d0d4:	01400084 	movi	r5,2
    d0d8:	00000206 	br	d0e4 <__divsf3+0x1b8>
    d0dc:	88001a1e 	bne	r17,zero,d148 <__divsf3+0x21c>
    d0e0:	01400044 	movi	r5,1
    d0e4:	8160b03a 	or	r16,r16,r5
    d0e8:	802090ba 	slli	r16,r16,2
    d0ec:	00c00074 	movhi	r3,1
    d0f0:	18f44204 	addi	r3,r3,-12024
    d0f4:	80e1883a 	add	r16,r16,r3
    d0f8:	80c00017 	ldw	r3,0(r16)
    d0fc:	9d44f03a 	xor	r2,r19,r21
    d100:	a18dc83a 	sub	r6,r20,r6
    d104:	1800683a 	jmp	r3
    d108:	0000d060 	cmpeqi	zero,zero,833
    d10c:	0000d060 	cmpeqi	zero,zero,833
    d110:	0000d2ac 	andhi	zero,zero,842
    d114:	0000d048 	cmpgei	zero,zero,833
    d118:	0000d2ac 	andhi	zero,zero,842
    d11c:	0000d1a8 	cmpgeui	zero,zero,838
    d120:	0000d2ac 	andhi	zero,zero,842
    d124:	0000d048 	cmpgei	zero,zero,833
    d128:	0000d060 	cmpeqi	zero,zero,833
    d12c:	0000d060 	cmpeqi	zero,zero,833
    d130:	0000d1a8 	cmpgeui	zero,zero,838
    d134:	0000d048 	cmpgei	zero,zero,833
    d138:	0000d2bc 	xorhi	zero,zero,842
    d13c:	0000d2bc 	xorhi	zero,zero,842
    d140:	0000d2bc 	xorhi	zero,zero,842
    d144:	0000d2d4 	movui	zero,843
    d148:	8809883a 	mov	r4,r17
    d14c:	000e3bc0 	call	e3bc <__clzsi2>
    d150:	10fffec4 	addi	r3,r2,-5
    d154:	10801d84 	addi	r2,r2,118
    d158:	88e2983a 	sll	r17,r17,r3
    d15c:	008dc83a 	sub	r6,zero,r2
    d160:	000b883a 	mov	r5,zero
    d164:	003f9906 	br	cfcc <__alt_data_end+0xfc00cfcc>
    d168:	014000c4 	movi	r5,3
    d16c:	003f9706 	br	cfcc <__alt_data_end+0xfc00cfcc>
    d170:	9009883a 	mov	r4,r18
    d174:	d9400015 	stw	r5,0(sp)
    d178:	000e3bc0 	call	e3bc <__clzsi2>
    d17c:	10fffec4 	addi	r3,r2,-5
    d180:	11801d84 	addi	r6,r2,118
    d184:	90e4983a 	sll	r18,r18,r3
    d188:	01a9c83a 	sub	r20,zero,r6
    d18c:	0021883a 	mov	r16,zero
    d190:	002f883a 	mov	r23,zero
    d194:	d9400017 	ldw	r5,0(sp)
    d198:	003f7e06 	br	cf94 <__alt_data_end+0xfc00cf94>
    d19c:	04000304 	movi	r16,12
    d1a0:	05c000c4 	movi	r23,3
    d1a4:	003f7b06 	br	cf94 <__alt_data_end+0xfc00cf94>
    d1a8:	01802034 	movhi	r6,128
    d1ac:	000f883a 	mov	r7,zero
    d1b0:	31bfffc4 	addi	r6,r6,-1
    d1b4:	013fffc4 	movi	r4,-1
    d1b8:	003fac06 	br	d06c <__alt_data_end+0xfc00d06c>
    d1bc:	01400044 	movi	r5,1
    d1c0:	2909c83a 	sub	r4,r5,r4
    d1c4:	00c006c4 	movi	r3,27
    d1c8:	19004b0e 	bge	r3,r4,d2f8 <__divsf3+0x3cc>
    d1cc:	114e703a 	and	r7,r2,r5
    d1d0:	0009883a 	mov	r4,zero
    d1d4:	000d883a 	mov	r6,zero
    d1d8:	003fa406 	br	d06c <__alt_data_end+0xfc00d06c>
    d1dc:	9006917a 	slli	r3,r18,5
    d1e0:	8822917a 	slli	r17,r17,5
    d1e4:	1c40372e 	bgeu	r3,r17,d2c4 <__divsf3+0x398>
    d1e8:	31bfffc4 	addi	r6,r6,-1
    d1ec:	010006c4 	movi	r4,27
    d1f0:	000b883a 	mov	r5,zero
    d1f4:	180f883a 	mov	r7,r3
    d1f8:	294b883a 	add	r5,r5,r5
    d1fc:	18c7883a 	add	r3,r3,r3
    d200:	38000116 	blt	r7,zero,d208 <__divsf3+0x2dc>
    d204:	1c400236 	bltu	r3,r17,d210 <__divsf3+0x2e4>
    d208:	1c47c83a 	sub	r3,r3,r17
    d20c:	29400054 	ori	r5,r5,1
    d210:	213fffc4 	addi	r4,r4,-1
    d214:	203ff71e 	bne	r4,zero,d1f4 <__alt_data_end+0xfc00d1f4>
    d218:	1806c03a 	cmpne	r3,r3,zero
    d21c:	1962b03a 	or	r17,r3,r5
    d220:	31001fc4 	addi	r4,r6,127
    d224:	013fe50e 	bge	zero,r4,d1bc <__alt_data_end+0xfc00d1bc>
    d228:	88c001cc 	andi	r3,r17,7
    d22c:	18000426 	beq	r3,zero,d240 <__divsf3+0x314>
    d230:	88c003cc 	andi	r3,r17,15
    d234:	01400104 	movi	r5,4
    d238:	19400126 	beq	r3,r5,d240 <__divsf3+0x314>
    d23c:	8963883a 	add	r17,r17,r5
    d240:	88c2002c 	andhi	r3,r17,2048
    d244:	18000426 	beq	r3,zero,d258 <__divsf3+0x32c>
    d248:	00fe0034 	movhi	r3,63488
    d24c:	18ffffc4 	addi	r3,r3,-1
    d250:	31002004 	addi	r4,r6,128
    d254:	88e2703a 	and	r17,r17,r3
    d258:	00c03f84 	movi	r3,254
    d25c:	193f8016 	blt	r3,r4,d060 <__alt_data_end+0xfc00d060>
    d260:	880c91ba 	slli	r6,r17,6
    d264:	11c0004c 	andi	r7,r2,1
    d268:	300cd27a 	srli	r6,r6,9
    d26c:	003f7f06 	br	d06c <__alt_data_end+0xfc00d06c>
    d270:	9080102c 	andhi	r2,r18,64
    d274:	10000226 	beq	r2,zero,d280 <__divsf3+0x354>
    d278:	8880102c 	andhi	r2,r17,64
    d27c:	10001826 	beq	r2,zero,d2e0 <__divsf3+0x3b4>
    d280:	00802034 	movhi	r2,128
    d284:	91801034 	orhi	r6,r18,64
    d288:	10bfffc4 	addi	r2,r2,-1
    d28c:	980f883a 	mov	r7,r19
    d290:	308c703a 	and	r6,r6,r2
    d294:	003fc706 	br	d1b4 <__alt_data_end+0xfc00d1b4>
    d298:	008000c4 	movi	r2,3
    d29c:	b8802d26 	beq	r23,r2,d354 <__divsf3+0x428>
    d2a0:	00c00044 	movi	r3,1
    d2a4:	b005883a 	mov	r2,r22
    d2a8:	b8ffdd1e 	bne	r23,r3,d220 <__alt_data_end+0xfc00d220>
    d2ac:	11c0004c 	andi	r7,r2,1
    d2b0:	0009883a 	mov	r4,zero
    d2b4:	000d883a 	mov	r6,zero
    d2b8:	003f6c06 	br	d06c <__alt_data_end+0xfc00d06c>
    d2bc:	9023883a 	mov	r17,r18
    d2c0:	003f6406 	br	d054 <__alt_data_end+0xfc00d054>
    d2c4:	1c47c83a 	sub	r3,r3,r17
    d2c8:	01000684 	movi	r4,26
    d2cc:	01400044 	movi	r5,1
    d2d0:	003fc806 	br	d1f4 <__alt_data_end+0xfc00d1f4>
    d2d4:	9080102c 	andhi	r2,r18,64
    d2d8:	103fe926 	beq	r2,zero,d280 <__alt_data_end+0xfc00d280>
    d2dc:	0023883a 	mov	r17,zero
    d2e0:	00802034 	movhi	r2,128
    d2e4:	89801034 	orhi	r6,r17,64
    d2e8:	10bfffc4 	addi	r2,r2,-1
    d2ec:	a80f883a 	mov	r7,r21
    d2f0:	308c703a 	and	r6,r6,r2
    d2f4:	003faf06 	br	d1b4 <__alt_data_end+0xfc00d1b4>
    d2f8:	01c00804 	movi	r7,32
    d2fc:	390fc83a 	sub	r7,r7,r4
    d300:	89ce983a 	sll	r7,r17,r7
    d304:	890ad83a 	srl	r5,r17,r4
    d308:	380ec03a 	cmpne	r7,r7,zero
    d30c:	29cab03a 	or	r5,r5,r7
    d310:	28c001cc 	andi	r3,r5,7
    d314:	18000426 	beq	r3,zero,d328 <__divsf3+0x3fc>
    d318:	28c003cc 	andi	r3,r5,15
    d31c:	01000104 	movi	r4,4
    d320:	19000126 	beq	r3,r4,d328 <__divsf3+0x3fc>
    d324:	290b883a 	add	r5,r5,r4
    d328:	28c1002c 	andhi	r3,r5,1024
    d32c:	18000426 	beq	r3,zero,d340 <__divsf3+0x414>
    d330:	11c0004c 	andi	r7,r2,1
    d334:	01000044 	movi	r4,1
    d338:	000d883a 	mov	r6,zero
    d33c:	003f4b06 	br	d06c <__alt_data_end+0xfc00d06c>
    d340:	280a91ba 	slli	r5,r5,6
    d344:	11c0004c 	andi	r7,r2,1
    d348:	0009883a 	mov	r4,zero
    d34c:	280cd27a 	srli	r6,r5,9
    d350:	003f4606 	br	d06c <__alt_data_end+0xfc00d06c>
    d354:	00802034 	movhi	r2,128
    d358:	89801034 	orhi	r6,r17,64
    d35c:	10bfffc4 	addi	r2,r2,-1
    d360:	b00f883a 	mov	r7,r22
    d364:	308c703a 	and	r6,r6,r2
    d368:	003f9206 	br	d1b4 <__alt_data_end+0xfc00d1b4>

0000d36c <__gesf2>:
    d36c:	2004d5fa 	srli	r2,r4,23
    d370:	2806d5fa 	srli	r3,r5,23
    d374:	01802034 	movhi	r6,128
    d378:	31bfffc4 	addi	r6,r6,-1
    d37c:	10803fcc 	andi	r2,r2,255
    d380:	01c03fc4 	movi	r7,255
    d384:	3110703a 	and	r8,r6,r4
    d388:	18c03fcc 	andi	r3,r3,255
    d38c:	314c703a 	and	r6,r6,r5
    d390:	2008d7fa 	srli	r4,r4,31
    d394:	280ad7fa 	srli	r5,r5,31
    d398:	11c01926 	beq	r2,r7,d400 <__gesf2+0x94>
    d39c:	01c03fc4 	movi	r7,255
    d3a0:	19c00f26 	beq	r3,r7,d3e0 <__gesf2+0x74>
    d3a4:	1000061e 	bne	r2,zero,d3c0 <__gesf2+0x54>
    d3a8:	400f003a 	cmpeq	r7,r8,zero
    d3ac:	1800071e 	bne	r3,zero,d3cc <__gesf2+0x60>
    d3b0:	3000061e 	bne	r6,zero,d3cc <__gesf2+0x60>
    d3b4:	0005883a 	mov	r2,zero
    d3b8:	40000e1e 	bne	r8,zero,d3f4 <__gesf2+0x88>
    d3bc:	f800283a 	ret
    d3c0:	18000a1e 	bne	r3,zero,d3ec <__gesf2+0x80>
    d3c4:	30000b26 	beq	r6,zero,d3f4 <__gesf2+0x88>
    d3c8:	000f883a 	mov	r7,zero
    d3cc:	29403fcc 	andi	r5,r5,255
    d3d0:	38000726 	beq	r7,zero,d3f0 <__gesf2+0x84>
    d3d4:	28000826 	beq	r5,zero,d3f8 <__gesf2+0x8c>
    d3d8:	00800044 	movi	r2,1
    d3dc:	f800283a 	ret
    d3e0:	303ff026 	beq	r6,zero,d3a4 <__alt_data_end+0xfc00d3a4>
    d3e4:	00bfff84 	movi	r2,-2
    d3e8:	f800283a 	ret
    d3ec:	29403fcc 	andi	r5,r5,255
    d3f0:	21400526 	beq	r4,r5,d408 <__gesf2+0x9c>
    d3f4:	203ff826 	beq	r4,zero,d3d8 <__alt_data_end+0xfc00d3d8>
    d3f8:	00bfffc4 	movi	r2,-1
    d3fc:	f800283a 	ret
    d400:	403fe626 	beq	r8,zero,d39c <__alt_data_end+0xfc00d39c>
    d404:	003ff706 	br	d3e4 <__alt_data_end+0xfc00d3e4>
    d408:	18bffa16 	blt	r3,r2,d3f4 <__alt_data_end+0xfc00d3f4>
    d40c:	10c00216 	blt	r2,r3,d418 <__gesf2+0xac>
    d410:	323ff836 	bltu	r6,r8,d3f4 <__alt_data_end+0xfc00d3f4>
    d414:	4180022e 	bgeu	r8,r6,d420 <__gesf2+0xb4>
    d418:	203fef1e 	bne	r4,zero,d3d8 <__alt_data_end+0xfc00d3d8>
    d41c:	003ff606 	br	d3f8 <__alt_data_end+0xfc00d3f8>
    d420:	0005883a 	mov	r2,zero
    d424:	f800283a 	ret

0000d428 <__mulsf3>:
    d428:	defff504 	addi	sp,sp,-44
    d42c:	dc000115 	stw	r16,4(sp)
    d430:	2020d5fa 	srli	r16,r4,23
    d434:	dd400615 	stw	r21,24(sp)
    d438:	202ad7fa 	srli	r21,r4,31
    d43c:	dc800315 	stw	r18,12(sp)
    d440:	04802034 	movhi	r18,128
    d444:	df000915 	stw	fp,36(sp)
    d448:	dd000515 	stw	r20,20(sp)
    d44c:	94bfffc4 	addi	r18,r18,-1
    d450:	dfc00a15 	stw	ra,40(sp)
    d454:	ddc00815 	stw	r23,32(sp)
    d458:	dd800715 	stw	r22,28(sp)
    d45c:	dcc00415 	stw	r19,16(sp)
    d460:	dc400215 	stw	r17,8(sp)
    d464:	84003fcc 	andi	r16,r16,255
    d468:	9124703a 	and	r18,r18,r4
    d46c:	a829883a 	mov	r20,r21
    d470:	af003fcc 	andi	fp,r21,255
    d474:	80005426 	beq	r16,zero,d5c8 <__mulsf3+0x1a0>
    d478:	00803fc4 	movi	r2,255
    d47c:	80802f26 	beq	r16,r2,d53c <__mulsf3+0x114>
    d480:	91002034 	orhi	r4,r18,128
    d484:	202490fa 	slli	r18,r4,3
    d488:	843fe044 	addi	r16,r16,-127
    d48c:	0023883a 	mov	r17,zero
    d490:	002f883a 	mov	r23,zero
    d494:	2804d5fa 	srli	r2,r5,23
    d498:	282cd7fa 	srli	r22,r5,31
    d49c:	01002034 	movhi	r4,128
    d4a0:	213fffc4 	addi	r4,r4,-1
    d4a4:	10803fcc 	andi	r2,r2,255
    d4a8:	2166703a 	and	r19,r4,r5
    d4ac:	b1803fcc 	andi	r6,r22,255
    d4b0:	10004c26 	beq	r2,zero,d5e4 <__mulsf3+0x1bc>
    d4b4:	00c03fc4 	movi	r3,255
    d4b8:	10c04726 	beq	r2,r3,d5d8 <__mulsf3+0x1b0>
    d4bc:	99002034 	orhi	r4,r19,128
    d4c0:	202690fa 	slli	r19,r4,3
    d4c4:	10bfe044 	addi	r2,r2,-127
    d4c8:	0007883a 	mov	r3,zero
    d4cc:	80a1883a 	add	r16,r16,r2
    d4d0:	010003c4 	movi	r4,15
    d4d4:	1c44b03a 	or	r2,r3,r17
    d4d8:	b56af03a 	xor	r21,r22,r21
    d4dc:	81c00044 	addi	r7,r16,1
    d4e0:	20806b36 	bltu	r4,r2,d690 <__mulsf3+0x268>
    d4e4:	100490ba 	slli	r2,r2,2
    d4e8:	01000074 	movhi	r4,1
    d4ec:	21353f04 	addi	r4,r4,-11012
    d4f0:	1105883a 	add	r2,r2,r4
    d4f4:	10800017 	ldw	r2,0(r2)
    d4f8:	1000683a 	jmp	r2
    d4fc:	0000d690 	cmplti	zero,zero,858
    d500:	0000d550 	cmplti	zero,zero,853
    d504:	0000d550 	cmplti	zero,zero,853
    d508:	0000d54c 	andi	zero,zero,853
    d50c:	0000d674 	movhi	zero,857
    d510:	0000d674 	movhi	zero,857
    d514:	0000d660 	cmpeqi	zero,zero,857
    d518:	0000d54c 	andi	zero,zero,853
    d51c:	0000d674 	movhi	zero,857
    d520:	0000d660 	cmpeqi	zero,zero,857
    d524:	0000d674 	movhi	zero,857
    d528:	0000d54c 	andi	zero,zero,853
    d52c:	0000d680 	call	d68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1cc>
    d530:	0000d680 	call	d68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1cc>
    d534:	0000d680 	call	d68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1cc>
    d538:	0000d790 	cmplti	zero,zero,862
    d53c:	90003b1e 	bne	r18,zero,d62c <__mulsf3+0x204>
    d540:	04400204 	movi	r17,8
    d544:	05c00084 	movi	r23,2
    d548:	003fd206 	br	d494 <__alt_data_end+0xfc00d494>
    d54c:	302b883a 	mov	r21,r6
    d550:	00800084 	movi	r2,2
    d554:	18802626 	beq	r3,r2,d5f0 <__mulsf3+0x1c8>
    d558:	008000c4 	movi	r2,3
    d55c:	1880b826 	beq	r3,r2,d840 <__mulsf3+0x418>
    d560:	00800044 	movi	r2,1
    d564:	1880af1e 	bne	r3,r2,d824 <__mulsf3+0x3fc>
    d568:	a829883a 	mov	r20,r21
    d56c:	0007883a 	mov	r3,zero
    d570:	0009883a 	mov	r4,zero
    d574:	18803fcc 	andi	r2,r3,255
    d578:	100695fa 	slli	r3,r2,23
    d57c:	a0803fcc 	andi	r2,r20,255
    d580:	100a97fa 	slli	r5,r2,31
    d584:	00802034 	movhi	r2,128
    d588:	10bfffc4 	addi	r2,r2,-1
    d58c:	2084703a 	and	r2,r4,r2
    d590:	10c4b03a 	or	r2,r2,r3
    d594:	1144b03a 	or	r2,r2,r5
    d598:	dfc00a17 	ldw	ra,40(sp)
    d59c:	df000917 	ldw	fp,36(sp)
    d5a0:	ddc00817 	ldw	r23,32(sp)
    d5a4:	dd800717 	ldw	r22,28(sp)
    d5a8:	dd400617 	ldw	r21,24(sp)
    d5ac:	dd000517 	ldw	r20,20(sp)
    d5b0:	dcc00417 	ldw	r19,16(sp)
    d5b4:	dc800317 	ldw	r18,12(sp)
    d5b8:	dc400217 	ldw	r17,8(sp)
    d5bc:	dc000117 	ldw	r16,4(sp)
    d5c0:	dec00b04 	addi	sp,sp,44
    d5c4:	f800283a 	ret
    d5c8:	90000d1e 	bne	r18,zero,d600 <__mulsf3+0x1d8>
    d5cc:	04400104 	movi	r17,4
    d5d0:	05c00044 	movi	r23,1
    d5d4:	003faf06 	br	d494 <__alt_data_end+0xfc00d494>
    d5d8:	9806c03a 	cmpne	r3,r19,zero
    d5dc:	18c00084 	addi	r3,r3,2
    d5e0:	003fba06 	br	d4cc <__alt_data_end+0xfc00d4cc>
    d5e4:	9800141e 	bne	r19,zero,d638 <__mulsf3+0x210>
    d5e8:	00c00044 	movi	r3,1
    d5ec:	003fb706 	br	d4cc <__alt_data_end+0xfc00d4cc>
    d5f0:	a829883a 	mov	r20,r21
    d5f4:	00ffffc4 	movi	r3,-1
    d5f8:	0009883a 	mov	r4,zero
    d5fc:	003fdd06 	br	d574 <__alt_data_end+0xfc00d574>
    d600:	9009883a 	mov	r4,r18
    d604:	d9400015 	stw	r5,0(sp)
    d608:	000e3bc0 	call	e3bc <__clzsi2>
    d60c:	10fffec4 	addi	r3,r2,-5
    d610:	10801d84 	addi	r2,r2,118
    d614:	90e4983a 	sll	r18,r18,r3
    d618:	00a1c83a 	sub	r16,zero,r2
    d61c:	0023883a 	mov	r17,zero
    d620:	002f883a 	mov	r23,zero
    d624:	d9400017 	ldw	r5,0(sp)
    d628:	003f9a06 	br	d494 <__alt_data_end+0xfc00d494>
    d62c:	04400304 	movi	r17,12
    d630:	05c000c4 	movi	r23,3
    d634:	003f9706 	br	d494 <__alt_data_end+0xfc00d494>
    d638:	9809883a 	mov	r4,r19
    d63c:	d9800015 	stw	r6,0(sp)
    d640:	000e3bc0 	call	e3bc <__clzsi2>
    d644:	10fffec4 	addi	r3,r2,-5
    d648:	10801d84 	addi	r2,r2,118
    d64c:	98e6983a 	sll	r19,r19,r3
    d650:	0085c83a 	sub	r2,zero,r2
    d654:	0007883a 	mov	r3,zero
    d658:	d9800017 	ldw	r6,0(sp)
    d65c:	003f9b06 	br	d4cc <__alt_data_end+0xfc00d4cc>
    d660:	01002034 	movhi	r4,128
    d664:	0029883a 	mov	r20,zero
    d668:	213fffc4 	addi	r4,r4,-1
    d66c:	00ffffc4 	movi	r3,-1
    d670:	003fc006 	br	d574 <__alt_data_end+0xfc00d574>
    d674:	9027883a 	mov	r19,r18
    d678:	b807883a 	mov	r3,r23
    d67c:	003fb406 	br	d550 <__alt_data_end+0xfc00d550>
    d680:	9027883a 	mov	r19,r18
    d684:	e02b883a 	mov	r21,fp
    d688:	b807883a 	mov	r3,r23
    d68c:	003fb006 	br	d550 <__alt_data_end+0xfc00d550>
    d690:	9028d43a 	srli	r20,r18,16
    d694:	982cd43a 	srli	r22,r19,16
    d698:	94bfffcc 	andi	r18,r18,65535
    d69c:	9cffffcc 	andi	r19,r19,65535
    d6a0:	980b883a 	mov	r5,r19
    d6a4:	9009883a 	mov	r4,r18
    d6a8:	d9c00015 	stw	r7,0(sp)
    d6ac:	000cf040 	call	cf04 <__mulsi3>
    d6b0:	a00b883a 	mov	r5,r20
    d6b4:	9809883a 	mov	r4,r19
    d6b8:	1023883a 	mov	r17,r2
    d6bc:	000cf040 	call	cf04 <__mulsi3>
    d6c0:	a009883a 	mov	r4,r20
    d6c4:	b00b883a 	mov	r5,r22
    d6c8:	1027883a 	mov	r19,r2
    d6cc:	000cf040 	call	cf04 <__mulsi3>
    d6d0:	b00b883a 	mov	r5,r22
    d6d4:	9009883a 	mov	r4,r18
    d6d8:	1029883a 	mov	r20,r2
    d6dc:	000cf040 	call	cf04 <__mulsi3>
    d6e0:	8806d43a 	srli	r3,r17,16
    d6e4:	14c5883a 	add	r2,r2,r19
    d6e8:	d9c00017 	ldw	r7,0(sp)
    d6ec:	1885883a 	add	r2,r3,r2
    d6f0:	14c0022e 	bgeu	r2,r19,d6fc <__mulsf3+0x2d4>
    d6f4:	00c00074 	movhi	r3,1
    d6f8:	a0e9883a 	add	r20,r20,r3
    d6fc:	1026943a 	slli	r19,r2,16
    d700:	8c7fffcc 	andi	r17,r17,65535
    d704:	1004d43a 	srli	r2,r2,16
    d708:	9c63883a 	add	r17,r19,r17
    d70c:	882691ba 	slli	r19,r17,6
    d710:	1505883a 	add	r2,r2,r20
    d714:	8822d6ba 	srli	r17,r17,26
    d718:	100891ba 	slli	r4,r2,6
    d71c:	9826c03a 	cmpne	r19,r19,zero
    d720:	9c62b03a 	or	r17,r19,r17
    d724:	8926b03a 	or	r19,r17,r4
    d728:	9882002c 	andhi	r2,r19,2048
    d72c:	10000426 	beq	r2,zero,d740 <__mulsf3+0x318>
    d730:	9804d07a 	srli	r2,r19,1
    d734:	9900004c 	andi	r4,r19,1
    d738:	3821883a 	mov	r16,r7
    d73c:	1126b03a 	or	r19,r2,r4
    d740:	80c01fc4 	addi	r3,r16,127
    d744:	00c0210e 	bge	zero,r3,d7cc <__mulsf3+0x3a4>
    d748:	988001cc 	andi	r2,r19,7
    d74c:	10000426 	beq	r2,zero,d760 <__mulsf3+0x338>
    d750:	988003cc 	andi	r2,r19,15
    d754:	01000104 	movi	r4,4
    d758:	11000126 	beq	r2,r4,d760 <__mulsf3+0x338>
    d75c:	9927883a 	add	r19,r19,r4
    d760:	9882002c 	andhi	r2,r19,2048
    d764:	10000426 	beq	r2,zero,d778 <__mulsf3+0x350>
    d768:	00be0034 	movhi	r2,63488
    d76c:	10bfffc4 	addi	r2,r2,-1
    d770:	80c02004 	addi	r3,r16,128
    d774:	98a6703a 	and	r19,r19,r2
    d778:	00803f84 	movi	r2,254
    d77c:	10ff9c16 	blt	r2,r3,d5f0 <__alt_data_end+0xfc00d5f0>
    d780:	980891ba 	slli	r4,r19,6
    d784:	a829883a 	mov	r20,r21
    d788:	2008d27a 	srli	r4,r4,9
    d78c:	003f7906 	br	d574 <__alt_data_end+0xfc00d574>
    d790:	9080102c 	andhi	r2,r18,64
    d794:	10000826 	beq	r2,zero,d7b8 <__mulsf3+0x390>
    d798:	9880102c 	andhi	r2,r19,64
    d79c:	1000061e 	bne	r2,zero,d7b8 <__mulsf3+0x390>
    d7a0:	00802034 	movhi	r2,128
    d7a4:	99001034 	orhi	r4,r19,64
    d7a8:	10bfffc4 	addi	r2,r2,-1
    d7ac:	b029883a 	mov	r20,r22
    d7b0:	2088703a 	and	r4,r4,r2
    d7b4:	003fad06 	br	d66c <__alt_data_end+0xfc00d66c>
    d7b8:	00802034 	movhi	r2,128
    d7bc:	91001034 	orhi	r4,r18,64
    d7c0:	10bfffc4 	addi	r2,r2,-1
    d7c4:	2088703a 	and	r4,r4,r2
    d7c8:	003fa806 	br	d66c <__alt_data_end+0xfc00d66c>
    d7cc:	00800044 	movi	r2,1
    d7d0:	10c7c83a 	sub	r3,r2,r3
    d7d4:	008006c4 	movi	r2,27
    d7d8:	10ff6316 	blt	r2,r3,d568 <__alt_data_end+0xfc00d568>
    d7dc:	00800804 	movi	r2,32
    d7e0:	10c5c83a 	sub	r2,r2,r3
    d7e4:	9884983a 	sll	r2,r19,r2
    d7e8:	98c6d83a 	srl	r3,r19,r3
    d7ec:	1004c03a 	cmpne	r2,r2,zero
    d7f0:	1884b03a 	or	r2,r3,r2
    d7f4:	10c001cc 	andi	r3,r2,7
    d7f8:	18000426 	beq	r3,zero,d80c <__mulsf3+0x3e4>
    d7fc:	10c003cc 	andi	r3,r2,15
    d800:	01000104 	movi	r4,4
    d804:	19000126 	beq	r3,r4,d80c <__mulsf3+0x3e4>
    d808:	1105883a 	add	r2,r2,r4
    d80c:	10c1002c 	andhi	r3,r2,1024
    d810:	18000626 	beq	r3,zero,d82c <__mulsf3+0x404>
    d814:	a829883a 	mov	r20,r21
    d818:	00c00044 	movi	r3,1
    d81c:	0009883a 	mov	r4,zero
    d820:	003f5406 	br	d574 <__alt_data_end+0xfc00d574>
    d824:	3821883a 	mov	r16,r7
    d828:	003fc506 	br	d740 <__alt_data_end+0xfc00d740>
    d82c:	100491ba 	slli	r2,r2,6
    d830:	a829883a 	mov	r20,r21
    d834:	0007883a 	mov	r3,zero
    d838:	1008d27a 	srli	r4,r2,9
    d83c:	003f4d06 	br	d574 <__alt_data_end+0xfc00d574>
    d840:	00802034 	movhi	r2,128
    d844:	99001034 	orhi	r4,r19,64
    d848:	10bfffc4 	addi	r2,r2,-1
    d84c:	a829883a 	mov	r20,r21
    d850:	2088703a 	and	r4,r4,r2
    d854:	003f8506 	br	d66c <__alt_data_end+0xfc00d66c>

0000d858 <__subsf3>:
    d858:	defffc04 	addi	sp,sp,-16
    d85c:	280cd5fa 	srli	r6,r5,23
    d860:	dc000015 	stw	r16,0(sp)
    d864:	01c02034 	movhi	r7,128
    d868:	2020d5fa 	srli	r16,r4,23
    d86c:	39ffffc4 	addi	r7,r7,-1
    d870:	3906703a 	and	r3,r7,r4
    d874:	dc400115 	stw	r17,4(sp)
    d878:	394e703a 	and	r7,r7,r5
    d87c:	2022d7fa 	srli	r17,r4,31
    d880:	dfc00315 	stw	ra,12(sp)
    d884:	dc800215 	stw	r18,8(sp)
    d888:	31803fcc 	andi	r6,r6,255
    d88c:	01003fc4 	movi	r4,255
    d890:	84003fcc 	andi	r16,r16,255
    d894:	180690fa 	slli	r3,r3,3
    d898:	2804d7fa 	srli	r2,r5,31
    d89c:	380e90fa 	slli	r7,r7,3
    d8a0:	31006d26 	beq	r6,r4,da58 <__subsf3+0x200>
    d8a4:	1080005c 	xori	r2,r2,1
    d8a8:	8189c83a 	sub	r4,r16,r6
    d8ac:	14404f26 	beq	r2,r17,d9ec <__subsf3+0x194>
    d8b0:	0100770e 	bge	zero,r4,da90 <__subsf3+0x238>
    d8b4:	30001e1e 	bne	r6,zero,d930 <__subsf3+0xd8>
    d8b8:	38006a1e 	bne	r7,zero,da64 <__subsf3+0x20c>
    d8bc:	188001cc 	andi	r2,r3,7
    d8c0:	10000426 	beq	r2,zero,d8d4 <__subsf3+0x7c>
    d8c4:	188003cc 	andi	r2,r3,15
    d8c8:	01000104 	movi	r4,4
    d8cc:	11000126 	beq	r2,r4,d8d4 <__subsf3+0x7c>
    d8d0:	1907883a 	add	r3,r3,r4
    d8d4:	1881002c 	andhi	r2,r3,1024
    d8d8:	10003926 	beq	r2,zero,d9c0 <__subsf3+0x168>
    d8dc:	84000044 	addi	r16,r16,1
    d8e0:	00803fc4 	movi	r2,255
    d8e4:	80807526 	beq	r16,r2,dabc <__subsf3+0x264>
    d8e8:	180691ba 	slli	r3,r3,6
    d8ec:	8880004c 	andi	r2,r17,1
    d8f0:	180ad27a 	srli	r5,r3,9
    d8f4:	84003fcc 	andi	r16,r16,255
    d8f8:	800695fa 	slli	r3,r16,23
    d8fc:	10803fcc 	andi	r2,r2,255
    d900:	01002034 	movhi	r4,128
    d904:	213fffc4 	addi	r4,r4,-1
    d908:	100497fa 	slli	r2,r2,31
    d90c:	2920703a 	and	r16,r5,r4
    d910:	80e0b03a 	or	r16,r16,r3
    d914:	8084b03a 	or	r2,r16,r2
    d918:	dfc00317 	ldw	ra,12(sp)
    d91c:	dc800217 	ldw	r18,8(sp)
    d920:	dc400117 	ldw	r17,4(sp)
    d924:	dc000017 	ldw	r16,0(sp)
    d928:	dec00404 	addi	sp,sp,16
    d92c:	f800283a 	ret
    d930:	00803fc4 	movi	r2,255
    d934:	80bfe126 	beq	r16,r2,d8bc <__alt_data_end+0xfc00d8bc>
    d938:	39c10034 	orhi	r7,r7,1024
    d93c:	008006c4 	movi	r2,27
    d940:	11007416 	blt	r2,r4,db14 <__subsf3+0x2bc>
    d944:	00800804 	movi	r2,32
    d948:	1105c83a 	sub	r2,r2,r4
    d94c:	3884983a 	sll	r2,r7,r2
    d950:	390ed83a 	srl	r7,r7,r4
    d954:	1008c03a 	cmpne	r4,r2,zero
    d958:	390eb03a 	or	r7,r7,r4
    d95c:	19c7c83a 	sub	r3,r3,r7
    d960:	1881002c 	andhi	r2,r3,1024
    d964:	10001426 	beq	r2,zero,d9b8 <__subsf3+0x160>
    d968:	04810034 	movhi	r18,1024
    d96c:	94bfffc4 	addi	r18,r18,-1
    d970:	1ca4703a 	and	r18,r3,r18
    d974:	9009883a 	mov	r4,r18
    d978:	000e3bc0 	call	e3bc <__clzsi2>
    d97c:	10bffec4 	addi	r2,r2,-5
    d980:	90a4983a 	sll	r18,r18,r2
    d984:	14005116 	blt	r2,r16,dacc <__subsf3+0x274>
    d988:	1405c83a 	sub	r2,r2,r16
    d98c:	10c00044 	addi	r3,r2,1
    d990:	00800804 	movi	r2,32
    d994:	10c5c83a 	sub	r2,r2,r3
    d998:	9084983a 	sll	r2,r18,r2
    d99c:	90e4d83a 	srl	r18,r18,r3
    d9a0:	0021883a 	mov	r16,zero
    d9a4:	1006c03a 	cmpne	r3,r2,zero
    d9a8:	90c6b03a 	or	r3,r18,r3
    d9ac:	003fc306 	br	d8bc <__alt_data_end+0xfc00d8bc>
    d9b0:	2000e026 	beq	r4,zero,dd34 <__subsf3+0x4dc>
    d9b4:	2007883a 	mov	r3,r4
    d9b8:	188001cc 	andi	r2,r3,7
    d9bc:	103fc11e 	bne	r2,zero,d8c4 <__alt_data_end+0xfc00d8c4>
    d9c0:	180ad0fa 	srli	r5,r3,3
    d9c4:	00c03fc4 	movi	r3,255
    d9c8:	8880004c 	andi	r2,r17,1
    d9cc:	80c0031e 	bne	r16,r3,d9dc <__subsf3+0x184>
    d9d0:	28006d26 	beq	r5,zero,db88 <__subsf3+0x330>
    d9d4:	29401034 	orhi	r5,r5,64
    d9d8:	043fffc4 	movi	r16,-1
    d9dc:	00c02034 	movhi	r3,128
    d9e0:	18ffffc4 	addi	r3,r3,-1
    d9e4:	28ca703a 	and	r5,r5,r3
    d9e8:	003fc206 	br	d8f4 <__alt_data_end+0xfc00d8f4>
    d9ec:	01003c0e 	bge	zero,r4,dae0 <__subsf3+0x288>
    d9f0:	30002126 	beq	r6,zero,da78 <__subsf3+0x220>
    d9f4:	01403fc4 	movi	r5,255
    d9f8:	817fb026 	beq	r16,r5,d8bc <__alt_data_end+0xfc00d8bc>
    d9fc:	39c10034 	orhi	r7,r7,1024
    da00:	014006c4 	movi	r5,27
    da04:	29007416 	blt	r5,r4,dbd8 <__subsf3+0x380>
    da08:	01400804 	movi	r5,32
    da0c:	290bc83a 	sub	r5,r5,r4
    da10:	394a983a 	sll	r5,r7,r5
    da14:	390ed83a 	srl	r7,r7,r4
    da18:	2808c03a 	cmpne	r4,r5,zero
    da1c:	390eb03a 	or	r7,r7,r4
    da20:	19c7883a 	add	r3,r3,r7
    da24:	1901002c 	andhi	r4,r3,1024
    da28:	20003826 	beq	r4,zero,db0c <__subsf3+0x2b4>
    da2c:	84000044 	addi	r16,r16,1
    da30:	01003fc4 	movi	r4,255
    da34:	81005426 	beq	r16,r4,db88 <__subsf3+0x330>
    da38:	1023883a 	mov	r17,r2
    da3c:	00bf0034 	movhi	r2,64512
    da40:	10bfffc4 	addi	r2,r2,-1
    da44:	1900004c 	andi	r4,r3,1
    da48:	1886703a 	and	r3,r3,r2
    da4c:	1806d07a 	srli	r3,r3,1
    da50:	1906b03a 	or	r3,r3,r4
    da54:	003f9906 	br	d8bc <__alt_data_end+0xfc00d8bc>
    da58:	383f9226 	beq	r7,zero,d8a4 <__alt_data_end+0xfc00d8a4>
    da5c:	10803fcc 	andi	r2,r2,255
    da60:	003f9106 	br	d8a8 <__alt_data_end+0xfc00d8a8>
    da64:	213fffc4 	addi	r4,r4,-1
    da68:	203fbc26 	beq	r4,zero,d95c <__alt_data_end+0xfc00d95c>
    da6c:	00803fc4 	movi	r2,255
    da70:	80bfb21e 	bne	r16,r2,d93c <__alt_data_end+0xfc00d93c>
    da74:	003f9106 	br	d8bc <__alt_data_end+0xfc00d8bc>
    da78:	383f9026 	beq	r7,zero,d8bc <__alt_data_end+0xfc00d8bc>
    da7c:	213fffc4 	addi	r4,r4,-1
    da80:	203fe726 	beq	r4,zero,da20 <__alt_data_end+0xfc00da20>
    da84:	01403fc4 	movi	r5,255
    da88:	817fdd1e 	bne	r16,r5,da00 <__alt_data_end+0xfc00da00>
    da8c:	003f8b06 	br	d8bc <__alt_data_end+0xfc00d8bc>
    da90:	2000221e 	bne	r4,zero,db1c <__subsf3+0x2c4>
    da94:	81000044 	addi	r4,r16,1
    da98:	21003fcc 	andi	r4,r4,255
    da9c:	01400044 	movi	r5,1
    daa0:	2900470e 	bge	r5,r4,dbc0 <__subsf3+0x368>
    daa4:	19e5c83a 	sub	r18,r3,r7
    daa8:	9141002c 	andhi	r5,r18,1024
    daac:	28002d26 	beq	r5,zero,db64 <__subsf3+0x30c>
    dab0:	38e5c83a 	sub	r18,r7,r3
    dab4:	1023883a 	mov	r17,r2
    dab8:	003fae06 	br	d974 <__alt_data_end+0xfc00d974>
    dabc:	8880004c 	andi	r2,r17,1
    dac0:	043fffc4 	movi	r16,-1
    dac4:	000b883a 	mov	r5,zero
    dac8:	003f8a06 	br	d8f4 <__alt_data_end+0xfc00d8f4>
    dacc:	00ff0034 	movhi	r3,64512
    dad0:	18ffffc4 	addi	r3,r3,-1
    dad4:	80a1c83a 	sub	r16,r16,r2
    dad8:	90c6703a 	and	r3,r18,r3
    dadc:	003f7706 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dae0:	2000431e 	bne	r4,zero,dbf0 <__subsf3+0x398>
    dae4:	81000044 	addi	r4,r16,1
    dae8:	21803fcc 	andi	r6,r4,255
    daec:	01400044 	movi	r5,1
    daf0:	2980280e 	bge	r5,r6,db94 <__subsf3+0x33c>
    daf4:	01403fc4 	movi	r5,255
    daf8:	21402326 	beq	r4,r5,db88 <__subsf3+0x330>
    dafc:	19c7883a 	add	r3,r3,r7
    db00:	1806d07a 	srli	r3,r3,1
    db04:	2021883a 	mov	r16,r4
    db08:	003f6c06 	br	d8bc <__alt_data_end+0xfc00d8bc>
    db0c:	1023883a 	mov	r17,r2
    db10:	003fa906 	br	d9b8 <__alt_data_end+0xfc00d9b8>
    db14:	01c00044 	movi	r7,1
    db18:	003f9006 	br	d95c <__alt_data_end+0xfc00d95c>
    db1c:	8000151e 	bne	r16,zero,db74 <__subsf3+0x31c>
    db20:	18002f26 	beq	r3,zero,dbe0 <__subsf3+0x388>
    db24:	0108303a 	nor	r4,zero,r4
    db28:	20000a26 	beq	r4,zero,db54 <__subsf3+0x2fc>
    db2c:	01403fc4 	movi	r5,255
    db30:	31402b26 	beq	r6,r5,dbe0 <__subsf3+0x388>
    db34:	014006c4 	movi	r5,27
    db38:	29006e16 	blt	r5,r4,dcf4 <__subsf3+0x49c>
    db3c:	01400804 	movi	r5,32
    db40:	290bc83a 	sub	r5,r5,r4
    db44:	194a983a 	sll	r5,r3,r5
    db48:	1908d83a 	srl	r4,r3,r4
    db4c:	2806c03a 	cmpne	r3,r5,zero
    db50:	20c6b03a 	or	r3,r4,r3
    db54:	38c7c83a 	sub	r3,r7,r3
    db58:	3021883a 	mov	r16,r6
    db5c:	1023883a 	mov	r17,r2
    db60:	003f7f06 	br	d960 <__alt_data_end+0xfc00d960>
    db64:	903f831e 	bne	r18,zero,d974 <__alt_data_end+0xfc00d974>
    db68:	0005883a 	mov	r2,zero
    db6c:	0021883a 	mov	r16,zero
    db70:	003f9a06 	br	d9dc <__alt_data_end+0xfc00d9dc>
    db74:	01403fc4 	movi	r5,255
    db78:	31401926 	beq	r6,r5,dbe0 <__subsf3+0x388>
    db7c:	0109c83a 	sub	r4,zero,r4
    db80:	18c10034 	orhi	r3,r3,1024
    db84:	003feb06 	br	db34 <__alt_data_end+0xfc00db34>
    db88:	043fffc4 	movi	r16,-1
    db8c:	000b883a 	mov	r5,zero
    db90:	003f5806 	br	d8f4 <__alt_data_end+0xfc00d8f4>
    db94:	8000481e 	bne	r16,zero,dcb8 <__subsf3+0x460>
    db98:	18006226 	beq	r3,zero,dd24 <__subsf3+0x4cc>
    db9c:	383f4726 	beq	r7,zero,d8bc <__alt_data_end+0xfc00d8bc>
    dba0:	19c7883a 	add	r3,r3,r7
    dba4:	1881002c 	andhi	r2,r3,1024
    dba8:	103f8326 	beq	r2,zero,d9b8 <__alt_data_end+0xfc00d9b8>
    dbac:	00bf0034 	movhi	r2,64512
    dbb0:	10bfffc4 	addi	r2,r2,-1
    dbb4:	2821883a 	mov	r16,r5
    dbb8:	1886703a 	and	r3,r3,r2
    dbbc:	003f3f06 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dbc0:	80001c1e 	bne	r16,zero,dc34 <__subsf3+0x3dc>
    dbc4:	1800261e 	bne	r3,zero,dc60 <__subsf3+0x408>
    dbc8:	38004c26 	beq	r7,zero,dcfc <__subsf3+0x4a4>
    dbcc:	3807883a 	mov	r3,r7
    dbd0:	1023883a 	mov	r17,r2
    dbd4:	003f3906 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dbd8:	01c00044 	movi	r7,1
    dbdc:	003f9006 	br	da20 <__alt_data_end+0xfc00da20>
    dbe0:	3807883a 	mov	r3,r7
    dbe4:	3021883a 	mov	r16,r6
    dbe8:	1023883a 	mov	r17,r2
    dbec:	003f3306 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dbf0:	8000161e 	bne	r16,zero,dc4c <__subsf3+0x3f4>
    dbf4:	18002d26 	beq	r3,zero,dcac <__subsf3+0x454>
    dbf8:	0108303a 	nor	r4,zero,r4
    dbfc:	20000a26 	beq	r4,zero,dc28 <__subsf3+0x3d0>
    dc00:	01403fc4 	movi	r5,255
    dc04:	31402926 	beq	r6,r5,dcac <__subsf3+0x454>
    dc08:	014006c4 	movi	r5,27
    dc0c:	29004716 	blt	r5,r4,dd2c <__subsf3+0x4d4>
    dc10:	01400804 	movi	r5,32
    dc14:	290bc83a 	sub	r5,r5,r4
    dc18:	194a983a 	sll	r5,r3,r5
    dc1c:	1908d83a 	srl	r4,r3,r4
    dc20:	2806c03a 	cmpne	r3,r5,zero
    dc24:	20c6b03a 	or	r3,r4,r3
    dc28:	19c7883a 	add	r3,r3,r7
    dc2c:	3021883a 	mov	r16,r6
    dc30:	003f7c06 	br	da24 <__alt_data_end+0xfc00da24>
    dc34:	1800111e 	bne	r3,zero,dc7c <__subsf3+0x424>
    dc38:	38003326 	beq	r7,zero,dd08 <__subsf3+0x4b0>
    dc3c:	3807883a 	mov	r3,r7
    dc40:	1023883a 	mov	r17,r2
    dc44:	04003fc4 	movi	r16,255
    dc48:	003f1c06 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dc4c:	01403fc4 	movi	r5,255
    dc50:	31401626 	beq	r6,r5,dcac <__subsf3+0x454>
    dc54:	0109c83a 	sub	r4,zero,r4
    dc58:	18c10034 	orhi	r3,r3,1024
    dc5c:	003fea06 	br	dc08 <__alt_data_end+0xfc00dc08>
    dc60:	383f1626 	beq	r7,zero,d8bc <__alt_data_end+0xfc00d8bc>
    dc64:	19c9c83a 	sub	r4,r3,r7
    dc68:	2141002c 	andhi	r5,r4,1024
    dc6c:	283f5026 	beq	r5,zero,d9b0 <__alt_data_end+0xfc00d9b0>
    dc70:	38c7c83a 	sub	r3,r7,r3
    dc74:	1023883a 	mov	r17,r2
    dc78:	003f1006 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dc7c:	38001b26 	beq	r7,zero,dcec <__subsf3+0x494>
    dc80:	1806d0fa 	srli	r3,r3,3
    dc84:	1900102c 	andhi	r4,r3,64
    dc88:	20000526 	beq	r4,zero,dca0 <__subsf3+0x448>
    dc8c:	380ed0fa 	srli	r7,r7,3
    dc90:	3900102c 	andhi	r4,r7,64
    dc94:	2000021e 	bne	r4,zero,dca0 <__subsf3+0x448>
    dc98:	3807883a 	mov	r3,r7
    dc9c:	1023883a 	mov	r17,r2
    dca0:	180690fa 	slli	r3,r3,3
    dca4:	04003fc4 	movi	r16,255
    dca8:	003f0406 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dcac:	3807883a 	mov	r3,r7
    dcb0:	3021883a 	mov	r16,r6
    dcb4:	003f0106 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dcb8:	18001726 	beq	r3,zero,dd18 <__subsf3+0x4c0>
    dcbc:	38000b26 	beq	r7,zero,dcec <__subsf3+0x494>
    dcc0:	1806d0fa 	srli	r3,r3,3
    dcc4:	1900102c 	andhi	r4,r3,64
    dcc8:	20000426 	beq	r4,zero,dcdc <__subsf3+0x484>
    dccc:	380ed0fa 	srli	r7,r7,3
    dcd0:	3900102c 	andhi	r4,r7,64
    dcd4:	2000011e 	bne	r4,zero,dcdc <__subsf3+0x484>
    dcd8:	3807883a 	mov	r3,r7
    dcdc:	180690fa 	slli	r3,r3,3
    dce0:	1023883a 	mov	r17,r2
    dce4:	04003fc4 	movi	r16,255
    dce8:	003ef406 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dcec:	04003fc4 	movi	r16,255
    dcf0:	003ef206 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dcf4:	00c00044 	movi	r3,1
    dcf8:	003f9606 	br	db54 <__alt_data_end+0xfc00db54>
    dcfc:	000b883a 	mov	r5,zero
    dd00:	0005883a 	mov	r2,zero
    dd04:	003f3506 	br	d9dc <__alt_data_end+0xfc00d9dc>
    dd08:	01402034 	movhi	r5,128
    dd0c:	297fffc4 	addi	r5,r5,-1
    dd10:	0005883a 	mov	r2,zero
    dd14:	003f2f06 	br	d9d4 <__alt_data_end+0xfc00d9d4>
    dd18:	3807883a 	mov	r3,r7
    dd1c:	04003fc4 	movi	r16,255
    dd20:	003ee606 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dd24:	3807883a 	mov	r3,r7
    dd28:	003ee406 	br	d8bc <__alt_data_end+0xfc00d8bc>
    dd2c:	00c00044 	movi	r3,1
    dd30:	003fbd06 	br	dc28 <__alt_data_end+0xfc00dc28>
    dd34:	0005883a 	mov	r2,zero
    dd38:	003f2806 	br	d9dc <__alt_data_end+0xfc00d9dc>

0000dd3c <__fixsfsi>:
    dd3c:	200ad5fa 	srli	r5,r4,23
    dd40:	00c02034 	movhi	r3,128
    dd44:	18ffffc4 	addi	r3,r3,-1
    dd48:	29403fcc 	andi	r5,r5,255
    dd4c:	00801f84 	movi	r2,126
    dd50:	1906703a 	and	r3,r3,r4
    dd54:	2008d7fa 	srli	r4,r4,31
    dd58:	11400e0e 	bge	r2,r5,dd94 <__fixsfsi+0x58>
    dd5c:	00802744 	movi	r2,157
    dd60:	11400816 	blt	r2,r5,dd84 <__fixsfsi+0x48>
    dd64:	00802544 	movi	r2,149
    dd68:	18c02034 	orhi	r3,r3,128
    dd6c:	11400b0e 	bge	r2,r5,dd9c <__fixsfsi+0x60>
    dd70:	28bfda84 	addi	r2,r5,-150
    dd74:	1884983a 	sll	r2,r3,r2
    dd78:	20000726 	beq	r4,zero,dd98 <__fixsfsi+0x5c>
    dd7c:	0085c83a 	sub	r2,zero,r2
    dd80:	f800283a 	ret
    dd84:	00a00034 	movhi	r2,32768
    dd88:	10bfffc4 	addi	r2,r2,-1
    dd8c:	2085883a 	add	r2,r4,r2
    dd90:	f800283a 	ret
    dd94:	0005883a 	mov	r2,zero
    dd98:	f800283a 	ret
    dd9c:	00802584 	movi	r2,150
    dda0:	1145c83a 	sub	r2,r2,r5
    dda4:	1884d83a 	srl	r2,r3,r2
    dda8:	003ff306 	br	dd78 <__alt_data_end+0xfc00dd78>

0000ddac <__floatunsisf>:
    ddac:	defffe04 	addi	sp,sp,-8
    ddb0:	dfc00115 	stw	ra,4(sp)
    ddb4:	dc000015 	stw	r16,0(sp)
    ddb8:	20002c26 	beq	r4,zero,de6c <__floatunsisf+0xc0>
    ddbc:	2021883a 	mov	r16,r4
    ddc0:	000e3bc0 	call	e3bc <__clzsi2>
    ddc4:	00c02784 	movi	r3,158
    ddc8:	1887c83a 	sub	r3,r3,r2
    ddcc:	01002584 	movi	r4,150
    ddd0:	20c00f16 	blt	r4,r3,de10 <__floatunsisf+0x64>
    ddd4:	20c9c83a 	sub	r4,r4,r3
    ddd8:	8108983a 	sll	r4,r16,r4
    dddc:	00802034 	movhi	r2,128
    dde0:	10bfffc4 	addi	r2,r2,-1
    dde4:	2088703a 	and	r4,r4,r2
    dde8:	18803fcc 	andi	r2,r3,255
    ddec:	100695fa 	slli	r3,r2,23
    ddf0:	00802034 	movhi	r2,128
    ddf4:	10bfffc4 	addi	r2,r2,-1
    ddf8:	2084703a 	and	r2,r4,r2
    ddfc:	10c4b03a 	or	r2,r2,r3
    de00:	dfc00117 	ldw	ra,4(sp)
    de04:	dc000017 	ldw	r16,0(sp)
    de08:	dec00204 	addi	sp,sp,8
    de0c:	f800283a 	ret
    de10:	01002644 	movi	r4,153
    de14:	20c01816 	blt	r4,r3,de78 <__floatunsisf+0xcc>
    de18:	20c9c83a 	sub	r4,r4,r3
    de1c:	8108983a 	sll	r4,r16,r4
    de20:	017f0034 	movhi	r5,64512
    de24:	297fffc4 	addi	r5,r5,-1
    de28:	218001cc 	andi	r6,r4,7
    de2c:	214a703a 	and	r5,r4,r5
    de30:	30000426 	beq	r6,zero,de44 <__floatunsisf+0x98>
    de34:	210003cc 	andi	r4,r4,15
    de38:	01800104 	movi	r6,4
    de3c:	21800126 	beq	r4,r6,de44 <__floatunsisf+0x98>
    de40:	298b883a 	add	r5,r5,r6
    de44:	2901002c 	andhi	r4,r5,1024
    de48:	20000526 	beq	r4,zero,de60 <__floatunsisf+0xb4>
    de4c:	00c027c4 	movi	r3,159
    de50:	1887c83a 	sub	r3,r3,r2
    de54:	00bf0034 	movhi	r2,64512
    de58:	10bfffc4 	addi	r2,r2,-1
    de5c:	288a703a 	and	r5,r5,r2
    de60:	280891ba 	slli	r4,r5,6
    de64:	2008d27a 	srli	r4,r4,9
    de68:	003fdf06 	br	dde8 <__alt_data_end+0xfc00dde8>
    de6c:	0007883a 	mov	r3,zero
    de70:	0009883a 	mov	r4,zero
    de74:	003fdc06 	br	dde8 <__alt_data_end+0xfc00dde8>
    de78:	01402e44 	movi	r5,185
    de7c:	28cbc83a 	sub	r5,r5,r3
    de80:	01000144 	movi	r4,5
    de84:	2089c83a 	sub	r4,r4,r2
    de88:	814a983a 	sll	r5,r16,r5
    de8c:	8108d83a 	srl	r4,r16,r4
    de90:	2820c03a 	cmpne	r16,r5,zero
    de94:	2408b03a 	or	r4,r4,r16
    de98:	003fe106 	br	de20 <__alt_data_end+0xfc00de20>

0000de9c <_Unwind_ForcedUnwind_Phase2>:
    de9c:	defff404 	addi	sp,sp,-48
    dea0:	dd800915 	stw	r22,36(sp)
    dea4:	058000f4 	movhi	r22,3
    dea8:	ddc00a15 	stw	r23,40(sp)
    deac:	dd400815 	stw	r21,32(sp)
    deb0:	dd000715 	stw	r20,28(sp)
    deb4:	dcc00615 	stw	r19,24(sp)
    deb8:	dc400415 	stw	r17,16(sp)
    debc:	dc000315 	stw	r16,12(sp)
    dec0:	dfc00b15 	stw	ra,44(sp)
    dec4:	dc800515 	stw	r18,20(sp)
    dec8:	2021883a 	mov	r16,r4
    decc:	2823883a 	mov	r17,r5
    ded0:	24c00317 	ldw	r19,12(r4)
    ded4:	25000417 	ldw	r20,16(r4)
    ded8:	28c00017 	ldw	r3,0(r5)
    dedc:	b5840b04 	addi	r22,r22,4140
    dee0:	054001c4 	movi	r21,7
    dee4:	05c00204 	movi	r23,8
    dee8:	00001606 	br	df44 <_Unwind_ForcedUnwind_Phase2+0xa8>
    deec:	81800017 	ldw	r6,0(r16)
    def0:	81c00117 	ldw	r7,4(r16)
    def4:	1c800617 	ldw	r18,24(r3)
    def8:	dd000215 	stw	r20,8(sp)
    defc:	dc400115 	stw	r17,4(sp)
    df00:	dc000015 	stw	r16,0(sp)
    df04:	983ee83a 	callr	r19
    df08:	01400284 	movi	r5,10
    df0c:	01000044 	movi	r4,1
    df10:	1000241e 	bne	r2,zero,dfa4 <_Unwind_ForcedUnwind_Phase2+0x108>
    df14:	90000726 	beq	r18,zero,df34 <_Unwind_ForcedUnwind_Phase2+0x98>
    df18:	81800017 	ldw	r6,0(r16)
    df1c:	81c00117 	ldw	r7,4(r16)
    df20:	dc400115 	stw	r17,4(sp)
    df24:	dc000015 	stw	r16,0(sp)
    df28:	903ee83a 	callr	r18
    df2c:	15401f26 	beq	r2,r21,dfac <_Unwind_ForcedUnwind_Phase2+0x110>
    df30:	15c01c1e 	bne	r2,r23,dfa4 <_Unwind_ForcedUnwind_Phase2+0x108>
    df34:	88800017 	ldw	r2,0(r17)
    df38:	10c00017 	ldw	r3,0(r2)
    df3c:	b0c00015 	stw	r3,0(r22)
    df40:	88c00015 	stw	r3,0(r17)
    df44:	01400284 	movi	r5,10
    df48:	01000044 	movi	r4,1
    df4c:	183fe71e 	bne	r3,zero,deec <__alt_data_end+0xfc00deec>
    df50:	81800017 	ldw	r6,0(r16)
    df54:	81c00117 	ldw	r7,4(r16)
    df58:	01400684 	movi	r5,26
    df5c:	dd000215 	stw	r20,8(sp)
    df60:	dc400115 	stw	r17,4(sp)
    df64:	dc000015 	stw	r16,0(sp)
    df68:	01000044 	movi	r4,1
    df6c:	983ee83a 	callr	r19
    df70:	10000c1e 	bne	r2,zero,dfa4 <_Unwind_ForcedUnwind_Phase2+0x108>
    df74:	00800144 	movi	r2,5
    df78:	dfc00b17 	ldw	ra,44(sp)
    df7c:	ddc00a17 	ldw	r23,40(sp)
    df80:	dd800917 	ldw	r22,36(sp)
    df84:	dd400817 	ldw	r21,32(sp)
    df88:	dd000717 	ldw	r20,28(sp)
    df8c:	dcc00617 	ldw	r19,24(sp)
    df90:	dc800517 	ldw	r18,20(sp)
    df94:	dc400417 	ldw	r17,16(sp)
    df98:	dc000317 	ldw	r16,12(sp)
    df9c:	dec00c04 	addi	sp,sp,48
    dfa0:	f800283a 	ret
    dfa4:	00800084 	movi	r2,2
    dfa8:	003ff306 	br	df78 <__alt_data_end+0xfc00df78>
    dfac:	a805883a 	mov	r2,r21
    dfb0:	003ff106 	br	df78 <__alt_data_end+0xfc00df78>

0000dfb4 <_Unwind_RaiseException_Phase2>:
    dfb4:	28c00017 	ldw	r3,0(r5)
    dfb8:	defff804 	addi	sp,sp,-32
    dfbc:	dcc00515 	stw	r19,20(sp)
    dfc0:	dc800415 	stw	r18,16(sp)
    dfc4:	dc400315 	stw	r17,12(sp)
    dfc8:	dc000215 	stw	r16,8(sp)
    dfcc:	dfc00715 	stw	ra,28(sp)
    dfd0:	dd000615 	stw	r20,24(sp)
    dfd4:	2823883a 	mov	r17,r5
    dfd8:	2021883a 	mov	r16,r4
    dfdc:	048001c4 	movi	r18,7
    dfe0:	04c00204 	movi	r19,8
    dfe4:	18001326 	beq	r3,zero,e034 <_Unwind_RaiseException_Phase2+0x80>
    dfe8:	81000417 	ldw	r4,16(r16)
    dfec:	1a000617 	ldw	r8,24(r3)
    dff0:	19001926 	beq	r3,r4,e058 <_Unwind_RaiseException_Phase2+0xa4>
    dff4:	40000c26 	beq	r8,zero,e028 <_Unwind_RaiseException_Phase2+0x74>
    dff8:	01400084 	movi	r5,2
    dffc:	0029883a 	mov	r20,zero
    e000:	81800017 	ldw	r6,0(r16)
    e004:	81c00117 	ldw	r7,4(r16)
    e008:	01000044 	movi	r4,1
    e00c:	dc400115 	stw	r17,4(sp)
    e010:	dc000015 	stw	r16,0(sp)
    e014:	403ee83a 	callr	r8
    e018:	14801326 	beq	r2,r18,e068 <_Unwind_RaiseException_Phase2+0xb4>
    e01c:	14c0051e 	bne	r2,r19,e034 <_Unwind_RaiseException_Phase2+0x80>
    e020:	a000131e 	bne	r20,zero,e070 <_Unwind_RaiseException_Phase2+0xbc>
    e024:	88c00017 	ldw	r3,0(r17)
    e028:	18c00017 	ldw	r3,0(r3)
    e02c:	88c00015 	stw	r3,0(r17)
    e030:	183fed1e 	bne	r3,zero,dfe8 <__alt_data_end+0xfc00dfe8>
    e034:	00800084 	movi	r2,2
    e038:	dfc00717 	ldw	ra,28(sp)
    e03c:	dd000617 	ldw	r20,24(sp)
    e040:	dcc00517 	ldw	r19,20(sp)
    e044:	dc800417 	ldw	r18,16(sp)
    e048:	dc400317 	ldw	r17,12(sp)
    e04c:	dc000217 	ldw	r16,8(sp)
    e050:	dec00804 	addi	sp,sp,32
    e054:	f800283a 	ret
    e058:	40000526 	beq	r8,zero,e070 <_Unwind_RaiseException_Phase2+0xbc>
    e05c:	01400184 	movi	r5,6
    e060:	05000104 	movi	r20,4
    e064:	003fe606 	br	e000 <__alt_data_end+0xfc00e000>
    e068:	9005883a 	mov	r2,r18
    e06c:	003ff206 	br	e038 <__alt_data_end+0xfc00e038>
    e070:	000e4200 	call	e420 <abort>

0000e074 <uw_install_context.isra.1>:
    e074:	20c00017 	ldw	r3,0(r4)
    e078:	deffff04 	addi	sp,sp,-4
    e07c:	014000f4 	movhi	r5,3
    e080:	19000917 	ldw	r4,36(r3)
    e084:	df000015 	stw	fp,0(sp)
    e088:	18800804 	addi	r2,r3,32
    e08c:	d839883a 	mov	fp,sp
    e090:	29440b04 	addi	r5,r5,4140
    e094:	28c00015 	stw	r3,0(r5)
    e098:	17000017 	ldw	fp,0(r2)
    e09c:	1ec00a17 	ldw	sp,40(r3)
    e0a0:	2000683a 	jmp	r4

0000e0a4 <_Unwind_SjLj_Register>:
    e0a4:	008000f4 	movhi	r2,3
    e0a8:	10840b04 	addi	r2,r2,4140
    e0ac:	10c00017 	ldw	r3,0(r2)
    e0b0:	11000015 	stw	r4,0(r2)
    e0b4:	20c00015 	stw	r3,0(r4)
    e0b8:	f800283a 	ret

0000e0bc <_Unwind_SjLj_Unregister>:
    e0bc:	20c00017 	ldw	r3,0(r4)
    e0c0:	008000f4 	movhi	r2,3
    e0c4:	10840b04 	addi	r2,r2,4140
    e0c8:	10c00015 	stw	r3,0(r2)
    e0cc:	f800283a 	ret

0000e0d0 <_Unwind_GetGR>:
    e0d0:	20800017 	ldw	r2,0(r4)
    e0d4:	29400084 	addi	r5,r5,2
    e0d8:	294b883a 	add	r5,r5,r5
    e0dc:	294b883a 	add	r5,r5,r5
    e0e0:	114b883a 	add	r5,r2,r5
    e0e4:	28800017 	ldw	r2,0(r5)
    e0e8:	f800283a 	ret

0000e0ec <_Unwind_GetCFA>:
    e0ec:	20800017 	ldw	r2,0(r4)
    e0f0:	10000226 	beq	r2,zero,e0fc <_Unwind_GetCFA+0x10>
    e0f4:	10800a17 	ldw	r2,40(r2)
    e0f8:	f800283a 	ret
    e0fc:	0005883a 	mov	r2,zero
    e100:	f800283a 	ret

0000e104 <_Unwind_SetGR>:
    e104:	20800017 	ldw	r2,0(r4)
    e108:	29400084 	addi	r5,r5,2
    e10c:	294b883a 	add	r5,r5,r5
    e110:	294b883a 	add	r5,r5,r5
    e114:	114b883a 	add	r5,r2,r5
    e118:	29800015 	stw	r6,0(r5)
    e11c:	f800283a 	ret

0000e120 <_Unwind_GetIP>:
    e120:	20800017 	ldw	r2,0(r4)
    e124:	10800117 	ldw	r2,4(r2)
    e128:	10800044 	addi	r2,r2,1
    e12c:	f800283a 	ret

0000e130 <_Unwind_GetIPInfo>:
    e130:	20800017 	ldw	r2,0(r4)
    e134:	28000015 	stw	zero,0(r5)
    e138:	10000326 	beq	r2,zero,e148 <_Unwind_GetIPInfo+0x18>
    e13c:	10800117 	ldw	r2,4(r2)
    e140:	10800044 	addi	r2,r2,1
    e144:	f800283a 	ret
    e148:	0005883a 	mov	r2,zero
    e14c:	f800283a 	ret

0000e150 <_Unwind_SetIP>:
    e150:	20800017 	ldw	r2,0(r4)
    e154:	297fffc4 	addi	r5,r5,-1
    e158:	11400115 	stw	r5,4(r2)
    e15c:	f800283a 	ret

0000e160 <_Unwind_GetLanguageSpecificData>:
    e160:	20800017 	ldw	r2,0(r4)
    e164:	10800717 	ldw	r2,28(r2)
    e168:	f800283a 	ret

0000e16c <_Unwind_GetRegionStart>:
    e16c:	0005883a 	mov	r2,zero
    e170:	f800283a 	ret

0000e174 <_Unwind_FindEnclosingFunction>:
    e174:	0005883a 	mov	r2,zero
    e178:	f800283a 	ret

0000e17c <_Unwind_GetDataRelBase>:
    e17c:	0005883a 	mov	r2,zero
    e180:	f800283a 	ret

0000e184 <_Unwind_GetTextRelBase>:
    e184:	0005883a 	mov	r2,zero
    e188:	f800283a 	ret

0000e18c <_Unwind_SjLj_RaiseException>:
    e18c:	008000f4 	movhi	r2,3
    e190:	defff804 	addi	sp,sp,-32
    e194:	10840b04 	addi	r2,r2,4140
    e198:	dc800515 	stw	r18,20(sp)
    e19c:	14800017 	ldw	r18,0(r2)
    e1a0:	dfc00715 	stw	ra,28(sp)
    e1a4:	dcc00615 	stw	r19,24(sp)
    e1a8:	dc400415 	stw	r17,16(sp)
    e1ac:	dc000315 	stw	r16,12(sp)
    e1b0:	dc800215 	stw	r18,8(sp)
    e1b4:	90001426 	beq	r18,zero,e208 <_Unwind_SjLj_RaiseException+0x7c>
    e1b8:	2021883a 	mov	r16,r4
    e1bc:	9005883a 	mov	r2,r18
    e1c0:	04400184 	movi	r17,6
    e1c4:	04c00204 	movi	r19,8
    e1c8:	10800617 	ldw	r2,24(r2)
    e1cc:	10000a26 	beq	r2,zero,e1f8 <_Unwind_SjLj_RaiseException+0x6c>
    e1d0:	81800017 	ldw	r6,0(r16)
    e1d4:	81c00117 	ldw	r7,4(r16)
    e1d8:	01400044 	movi	r5,1
    e1dc:	d8c00204 	addi	r3,sp,8
    e1e0:	d8c00115 	stw	r3,4(sp)
    e1e4:	dc000015 	stw	r16,0(sp)
    e1e8:	2809883a 	mov	r4,r5
    e1ec:	103ee83a 	callr	r2
    e1f0:	14400d26 	beq	r2,r17,e228 <_Unwind_SjLj_RaiseException+0x9c>
    e1f4:	14c0171e 	bne	r2,r19,e254 <_Unwind_SjLj_RaiseException+0xc8>
    e1f8:	d8800217 	ldw	r2,8(sp)
    e1fc:	10800017 	ldw	r2,0(r2)
    e200:	d8800215 	stw	r2,8(sp)
    e204:	103ff01e 	bne	r2,zero,e1c8 <__alt_data_end+0xfc00e1c8>
    e208:	00800144 	movi	r2,5
    e20c:	dfc00717 	ldw	ra,28(sp)
    e210:	dcc00617 	ldw	r19,24(sp)
    e214:	dc800517 	ldw	r18,20(sp)
    e218:	dc400417 	ldw	r17,16(sp)
    e21c:	dc000317 	ldw	r16,12(sp)
    e220:	dec00804 	addi	sp,sp,32
    e224:	f800283a 	ret
    e228:	d8800217 	ldw	r2,8(sp)
    e22c:	80000315 	stw	zero,12(r16)
    e230:	d9400204 	addi	r5,sp,8
    e234:	80800415 	stw	r2,16(r16)
    e238:	8009883a 	mov	r4,r16
    e23c:	dc800215 	stw	r18,8(sp)
    e240:	000dfb40 	call	dfb4 <_Unwind_RaiseException_Phase2>
    e244:	00c001c4 	movi	r3,7
    e248:	10fff01e 	bne	r2,r3,e20c <__alt_data_end+0xfc00e20c>
    e24c:	d9000204 	addi	r4,sp,8
    e250:	000e0740 	call	e074 <uw_install_context.isra.1>
    e254:	008000c4 	movi	r2,3
    e258:	003fec06 	br	e20c <__alt_data_end+0xfc00e20c>

0000e25c <_Unwind_SjLj_ForcedUnwind>:
    e25c:	00c000f4 	movhi	r3,3
    e260:	18c40b04 	addi	r3,r3,4140
    e264:	defffe04 	addi	sp,sp,-8
    e268:	18c00017 	ldw	r3,0(r3)
    e26c:	dfc00115 	stw	ra,4(sp)
    e270:	21400315 	stw	r5,12(r4)
    e274:	21800415 	stw	r6,16(r4)
    e278:	d80b883a 	mov	r5,sp
    e27c:	d8c00015 	stw	r3,0(sp)
    e280:	000de9c0 	call	de9c <_Unwind_ForcedUnwind_Phase2>
    e284:	00c001c4 	movi	r3,7
    e288:	10c00326 	beq	r2,r3,e298 <_Unwind_SjLj_ForcedUnwind+0x3c>
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	dec00204 	addi	sp,sp,8
    e294:	f800283a 	ret
    e298:	d809883a 	mov	r4,sp
    e29c:	000e0740 	call	e074 <uw_install_context.isra.1>

0000e2a0 <_Unwind_SjLj_Resume>:
    e2a0:	00c000f4 	movhi	r3,3
    e2a4:	18c40b04 	addi	r3,r3,4140
    e2a8:	18c00017 	ldw	r3,0(r3)
    e2ac:	20800317 	ldw	r2,12(r4)
    e2b0:	defffe04 	addi	sp,sp,-8
    e2b4:	dfc00115 	stw	ra,4(sp)
    e2b8:	d8c00015 	stw	r3,0(sp)
    e2bc:	d80b883a 	mov	r5,sp
    e2c0:	1000041e 	bne	r2,zero,e2d4 <_Unwind_SjLj_Resume+0x34>
    e2c4:	000dfb40 	call	dfb4 <_Unwind_RaiseException_Phase2>
    e2c8:	00c001c4 	movi	r3,7
    e2cc:	10c00326 	beq	r2,r3,e2dc <_Unwind_SjLj_Resume+0x3c>
    e2d0:	000e4200 	call	e420 <abort>
    e2d4:	000de9c0 	call	de9c <_Unwind_ForcedUnwind_Phase2>
    e2d8:	003ffb06 	br	e2c8 <__alt_data_end+0xfc00e2c8>
    e2dc:	d809883a 	mov	r4,sp
    e2e0:	000e0740 	call	e074 <uw_install_context.isra.1>

0000e2e4 <_Unwind_SjLj_Resume_or_Rethrow>:
    e2e4:	20800317 	ldw	r2,12(r4)
    e2e8:	defffe04 	addi	sp,sp,-8
    e2ec:	dfc00115 	stw	ra,4(sp)
    e2f0:	1000041e 	bne	r2,zero,e304 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    e2f4:	000e18c0 	call	e18c <_Unwind_SjLj_RaiseException>
    e2f8:	dfc00117 	ldw	ra,4(sp)
    e2fc:	dec00204 	addi	sp,sp,8
    e300:	f800283a 	ret
    e304:	008000f4 	movhi	r2,3
    e308:	10840b04 	addi	r2,r2,4140
    e30c:	10800017 	ldw	r2,0(r2)
    e310:	d80b883a 	mov	r5,sp
    e314:	d8800015 	stw	r2,0(sp)
    e318:	000de9c0 	call	de9c <_Unwind_ForcedUnwind_Phase2>
    e31c:	00c001c4 	movi	r3,7
    e320:	10c00126 	beq	r2,r3,e328 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    e324:	000e4200 	call	e420 <abort>
    e328:	d809883a 	mov	r4,sp
    e32c:	000e0740 	call	e074 <uw_install_context.isra.1>

0000e330 <_Unwind_DeleteException>:
    e330:	20800217 	ldw	r2,8(r4)
    e334:	10000326 	beq	r2,zero,e344 <_Unwind_DeleteException+0x14>
    e338:	200b883a 	mov	r5,r4
    e33c:	01000044 	movi	r4,1
    e340:	1000683a 	jmp	r2
    e344:	f800283a 	ret

0000e348 <_Unwind_Backtrace>:
    e348:	008000f4 	movhi	r2,3
    e34c:	10840b04 	addi	r2,r2,4140
    e350:	10800017 	ldw	r2,0(r2)
    e354:	defffc04 	addi	sp,sp,-16
    e358:	dc400215 	stw	r17,8(sp)
    e35c:	dc000115 	stw	r16,4(sp)
    e360:	dfc00315 	stw	ra,12(sp)
    e364:	2023883a 	mov	r17,r4
    e368:	2821883a 	mov	r16,r5
    e36c:	d8800015 	stw	r2,0(sp)
    e370:	00000506 	br	e388 <_Unwind_Backtrace+0x40>
    e374:	883ee83a 	callr	r17
    e378:	10000e1e 	bne	r2,zero,e3b4 <_Unwind_Backtrace+0x6c>
    e37c:	d8800017 	ldw	r2,0(sp)
    e380:	10800017 	ldw	r2,0(r2)
    e384:	d8800015 	stw	r2,0(sp)
    e388:	800b883a 	mov	r5,r16
    e38c:	d809883a 	mov	r4,sp
    e390:	103ff81e 	bne	r2,zero,e374 <__alt_data_end+0xfc00e374>
    e394:	883ee83a 	callr	r17
    e398:	1000061e 	bne	r2,zero,e3b4 <_Unwind_Backtrace+0x6c>
    e39c:	00800144 	movi	r2,5
    e3a0:	dfc00317 	ldw	ra,12(sp)
    e3a4:	dc400217 	ldw	r17,8(sp)
    e3a8:	dc000117 	ldw	r16,4(sp)
    e3ac:	dec00404 	addi	sp,sp,16
    e3b0:	f800283a 	ret
    e3b4:	008000c4 	movi	r2,3
    e3b8:	003ff906 	br	e3a0 <__alt_data_end+0xfc00e3a0>

0000e3bc <__clzsi2>:
    e3bc:	00bfffd4 	movui	r2,65535
    e3c0:	11000536 	bltu	r2,r4,e3d8 <__clzsi2+0x1c>
    e3c4:	00803fc4 	movi	r2,255
    e3c8:	11000f36 	bltu	r2,r4,e408 <__clzsi2+0x4c>
    e3cc:	00800804 	movi	r2,32
    e3d0:	0007883a 	mov	r3,zero
    e3d4:	00000506 	br	e3ec <__clzsi2+0x30>
    e3d8:	00804034 	movhi	r2,256
    e3dc:	10bfffc4 	addi	r2,r2,-1
    e3e0:	11000c2e 	bgeu	r2,r4,e414 <__clzsi2+0x58>
    e3e4:	00800204 	movi	r2,8
    e3e8:	00c00604 	movi	r3,24
    e3ec:	20c8d83a 	srl	r4,r4,r3
    e3f0:	00c000f4 	movhi	r3,3
    e3f4:	18ea3804 	addi	r3,r3,-22304
    e3f8:	1909883a 	add	r4,r3,r4
    e3fc:	20c00003 	ldbu	r3,0(r4)
    e400:	10c5c83a 	sub	r2,r2,r3
    e404:	f800283a 	ret
    e408:	00800604 	movi	r2,24
    e40c:	00c00204 	movi	r3,8
    e410:	003ff606 	br	e3ec <__alt_data_end+0xfc00e3ec>
    e414:	00800404 	movi	r2,16
    e418:	1007883a 	mov	r3,r2
    e41c:	003ff306 	br	e3ec <__alt_data_end+0xfc00e3ec>

0000e420 <abort>:
    e420:	deffff04 	addi	sp,sp,-4
    e424:	01000184 	movi	r4,6
    e428:	dfc00015 	stw	ra,0(sp)
    e42c:	000f3300 	call	f330 <raise>
    e430:	01000044 	movi	r4,1
    e434:	001f0700 	call	1f070 <_exit>

0000e438 <clock>:
    e438:	008000f4 	movhi	r2,3
    e43c:	10b77b04 	addi	r2,r2,-8724
    e440:	11000017 	ldw	r4,0(r2)
    e444:	defffb04 	addi	sp,sp,-20
    e448:	d80b883a 	mov	r5,sp
    e44c:	dfc00415 	stw	ra,16(sp)
    e450:	00118d40 	call	118d4 <_times_r>
    e454:	00ffffc4 	movi	r3,-1
    e458:	10c00726 	beq	r2,r3,e478 <clock+0x40>
    e45c:	d8c00017 	ldw	r3,0(sp)
    e460:	d8800117 	ldw	r2,4(sp)
    e464:	1885883a 	add	r2,r3,r2
    e468:	d8c00217 	ldw	r3,8(sp)
    e46c:	10c7883a 	add	r3,r2,r3
    e470:	d8800317 	ldw	r2,12(sp)
    e474:	1885883a 	add	r2,r3,r2
    e478:	dfc00417 	ldw	ra,16(sp)
    e47c:	dec00504 	addi	sp,sp,20
    e480:	f800283a 	ret

0000e484 <malloc>:
    e484:	008000f4 	movhi	r2,3
    e488:	10b77b04 	addi	r2,r2,-8724
    e48c:	200b883a 	mov	r5,r4
    e490:	11000017 	ldw	r4,0(r2)
    e494:	000e4ac1 	jmpi	e4ac <_malloc_r>

0000e498 <free>:
    e498:	008000f4 	movhi	r2,3
    e49c:	10b77b04 	addi	r2,r2,-8724
    e4a0:	200b883a 	mov	r5,r4
    e4a4:	11000017 	ldw	r4,0(r2)
    e4a8:	0015e101 	jmpi	15e10 <_free_r>

0000e4ac <_malloc_r>:
    e4ac:	defff504 	addi	sp,sp,-44
    e4b0:	dc800315 	stw	r18,12(sp)
    e4b4:	dfc00a15 	stw	ra,40(sp)
    e4b8:	df000915 	stw	fp,36(sp)
    e4bc:	ddc00815 	stw	r23,32(sp)
    e4c0:	dd800715 	stw	r22,28(sp)
    e4c4:	dd400615 	stw	r21,24(sp)
    e4c8:	dd000515 	stw	r20,20(sp)
    e4cc:	dcc00415 	stw	r19,16(sp)
    e4d0:	dc400215 	stw	r17,8(sp)
    e4d4:	dc000115 	stw	r16,4(sp)
    e4d8:	288002c4 	addi	r2,r5,11
    e4dc:	00c00584 	movi	r3,22
    e4e0:	2025883a 	mov	r18,r4
    e4e4:	18807f2e 	bgeu	r3,r2,e6e4 <_malloc_r+0x238>
    e4e8:	047ffe04 	movi	r17,-8
    e4ec:	1462703a 	and	r17,r2,r17
    e4f0:	8800a316 	blt	r17,zero,e780 <_malloc_r+0x2d4>
    e4f4:	8940a236 	bltu	r17,r5,e780 <_malloc_r+0x2d4>
    e4f8:	001f68c0 	call	1f68c <__malloc_lock>
    e4fc:	00807dc4 	movi	r2,503
    e500:	1441e92e 	bgeu	r2,r17,eca8 <_malloc_r+0x7fc>
    e504:	8804d27a 	srli	r2,r17,9
    e508:	1000a126 	beq	r2,zero,e790 <_malloc_r+0x2e4>
    e50c:	00c00104 	movi	r3,4
    e510:	18811e36 	bltu	r3,r2,e98c <_malloc_r+0x4e0>
    e514:	8804d1ba 	srli	r2,r17,6
    e518:	12000e44 	addi	r8,r2,57
    e51c:	11c00e04 	addi	r7,r2,56
    e520:	4209883a 	add	r4,r8,r8
    e524:	04c000f4 	movhi	r19,3
    e528:	2109883a 	add	r4,r4,r4
    e52c:	9cec1c04 	addi	r19,r19,-20368
    e530:	2109883a 	add	r4,r4,r4
    e534:	9909883a 	add	r4,r19,r4
    e538:	24000117 	ldw	r16,4(r4)
    e53c:	213ffe04 	addi	r4,r4,-8
    e540:	24009726 	beq	r4,r16,e7a0 <_malloc_r+0x2f4>
    e544:	80800117 	ldw	r2,4(r16)
    e548:	01bfff04 	movi	r6,-4
    e54c:	014003c4 	movi	r5,15
    e550:	1184703a 	and	r2,r2,r6
    e554:	1447c83a 	sub	r3,r2,r17
    e558:	28c00716 	blt	r5,r3,e578 <_malloc_r+0xcc>
    e55c:	1800920e 	bge	r3,zero,e7a8 <_malloc_r+0x2fc>
    e560:	84000317 	ldw	r16,12(r16)
    e564:	24008e26 	beq	r4,r16,e7a0 <_malloc_r+0x2f4>
    e568:	80800117 	ldw	r2,4(r16)
    e56c:	1184703a 	and	r2,r2,r6
    e570:	1447c83a 	sub	r3,r2,r17
    e574:	28fff90e 	bge	r5,r3,e55c <__alt_data_end+0xfc00e55c>
    e578:	3809883a 	mov	r4,r7
    e57c:	018000f4 	movhi	r6,3
    e580:	9c000417 	ldw	r16,16(r19)
    e584:	31ac1c04 	addi	r6,r6,-20368
    e588:	32000204 	addi	r8,r6,8
    e58c:	82013426 	beq	r16,r8,ea60 <_malloc_r+0x5b4>
    e590:	80c00117 	ldw	r3,4(r16)
    e594:	00bfff04 	movi	r2,-4
    e598:	188e703a 	and	r7,r3,r2
    e59c:	3c45c83a 	sub	r2,r7,r17
    e5a0:	00c003c4 	movi	r3,15
    e5a4:	18811f16 	blt	r3,r2,ea24 <_malloc_r+0x578>
    e5a8:	32000515 	stw	r8,20(r6)
    e5ac:	32000415 	stw	r8,16(r6)
    e5b0:	10007f0e 	bge	r2,zero,e7b0 <_malloc_r+0x304>
    e5b4:	00807fc4 	movi	r2,511
    e5b8:	11c0fd36 	bltu	r2,r7,e9b0 <_malloc_r+0x504>
    e5bc:	3806d0fa 	srli	r3,r7,3
    e5c0:	01c00044 	movi	r7,1
    e5c4:	30800117 	ldw	r2,4(r6)
    e5c8:	19400044 	addi	r5,r3,1
    e5cc:	294b883a 	add	r5,r5,r5
    e5d0:	1807d0ba 	srai	r3,r3,2
    e5d4:	294b883a 	add	r5,r5,r5
    e5d8:	294b883a 	add	r5,r5,r5
    e5dc:	298b883a 	add	r5,r5,r6
    e5e0:	38c6983a 	sll	r3,r7,r3
    e5e4:	29c00017 	ldw	r7,0(r5)
    e5e8:	2a7ffe04 	addi	r9,r5,-8
    e5ec:	1886b03a 	or	r3,r3,r2
    e5f0:	82400315 	stw	r9,12(r16)
    e5f4:	81c00215 	stw	r7,8(r16)
    e5f8:	30c00115 	stw	r3,4(r6)
    e5fc:	2c000015 	stw	r16,0(r5)
    e600:	3c000315 	stw	r16,12(r7)
    e604:	2005d0ba 	srai	r2,r4,2
    e608:	01400044 	movi	r5,1
    e60c:	288a983a 	sll	r5,r5,r2
    e610:	19406f36 	bltu	r3,r5,e7d0 <_malloc_r+0x324>
    e614:	28c4703a 	and	r2,r5,r3
    e618:	10000a1e 	bne	r2,zero,e644 <_malloc_r+0x198>
    e61c:	00bfff04 	movi	r2,-4
    e620:	294b883a 	add	r5,r5,r5
    e624:	2088703a 	and	r4,r4,r2
    e628:	28c4703a 	and	r2,r5,r3
    e62c:	21000104 	addi	r4,r4,4
    e630:	1000041e 	bne	r2,zero,e644 <_malloc_r+0x198>
    e634:	294b883a 	add	r5,r5,r5
    e638:	28c4703a 	and	r2,r5,r3
    e63c:	21000104 	addi	r4,r4,4
    e640:	103ffc26 	beq	r2,zero,e634 <__alt_data_end+0xfc00e634>
    e644:	02bfff04 	movi	r10,-4
    e648:	024003c4 	movi	r9,15
    e64c:	21800044 	addi	r6,r4,1
    e650:	318d883a 	add	r6,r6,r6
    e654:	318d883a 	add	r6,r6,r6
    e658:	318d883a 	add	r6,r6,r6
    e65c:	998d883a 	add	r6,r19,r6
    e660:	333ffe04 	addi	r12,r6,-8
    e664:	2017883a 	mov	r11,r4
    e668:	31800104 	addi	r6,r6,4
    e66c:	34000017 	ldw	r16,0(r6)
    e670:	31fffd04 	addi	r7,r6,-12
    e674:	81c0041e 	bne	r16,r7,e688 <_malloc_r+0x1dc>
    e678:	0000fb06 	br	ea68 <_malloc_r+0x5bc>
    e67c:	1801030e 	bge	r3,zero,ea8c <_malloc_r+0x5e0>
    e680:	84000317 	ldw	r16,12(r16)
    e684:	81c0f826 	beq	r16,r7,ea68 <_malloc_r+0x5bc>
    e688:	80800117 	ldw	r2,4(r16)
    e68c:	1284703a 	and	r2,r2,r10
    e690:	1447c83a 	sub	r3,r2,r17
    e694:	48fff90e 	bge	r9,r3,e67c <__alt_data_end+0xfc00e67c>
    e698:	80800317 	ldw	r2,12(r16)
    e69c:	81000217 	ldw	r4,8(r16)
    e6a0:	89400054 	ori	r5,r17,1
    e6a4:	81400115 	stw	r5,4(r16)
    e6a8:	20800315 	stw	r2,12(r4)
    e6ac:	11000215 	stw	r4,8(r2)
    e6b0:	8463883a 	add	r17,r16,r17
    e6b4:	9c400515 	stw	r17,20(r19)
    e6b8:	9c400415 	stw	r17,16(r19)
    e6bc:	18800054 	ori	r2,r3,1
    e6c0:	88800115 	stw	r2,4(r17)
    e6c4:	8a000315 	stw	r8,12(r17)
    e6c8:	8a000215 	stw	r8,8(r17)
    e6cc:	88e3883a 	add	r17,r17,r3
    e6d0:	88c00015 	stw	r3,0(r17)
    e6d4:	9009883a 	mov	r4,r18
    e6d8:	001f6b00 	call	1f6b0 <__malloc_unlock>
    e6dc:	80800204 	addi	r2,r16,8
    e6e0:	00001b06 	br	e750 <_malloc_r+0x2a4>
    e6e4:	04400404 	movi	r17,16
    e6e8:	89402536 	bltu	r17,r5,e780 <_malloc_r+0x2d4>
    e6ec:	001f68c0 	call	1f68c <__malloc_lock>
    e6f0:	00800184 	movi	r2,6
    e6f4:	01000084 	movi	r4,2
    e6f8:	04c000f4 	movhi	r19,3
    e6fc:	1085883a 	add	r2,r2,r2
    e700:	9cec1c04 	addi	r19,r19,-20368
    e704:	1085883a 	add	r2,r2,r2
    e708:	9885883a 	add	r2,r19,r2
    e70c:	14000117 	ldw	r16,4(r2)
    e710:	10fffe04 	addi	r3,r2,-8
    e714:	80c0d926 	beq	r16,r3,ea7c <_malloc_r+0x5d0>
    e718:	80c00117 	ldw	r3,4(r16)
    e71c:	81000317 	ldw	r4,12(r16)
    e720:	00bfff04 	movi	r2,-4
    e724:	1884703a 	and	r2,r3,r2
    e728:	81400217 	ldw	r5,8(r16)
    e72c:	8085883a 	add	r2,r16,r2
    e730:	10c00117 	ldw	r3,4(r2)
    e734:	29000315 	stw	r4,12(r5)
    e738:	21400215 	stw	r5,8(r4)
    e73c:	18c00054 	ori	r3,r3,1
    e740:	10c00115 	stw	r3,4(r2)
    e744:	9009883a 	mov	r4,r18
    e748:	001f6b00 	call	1f6b0 <__malloc_unlock>
    e74c:	80800204 	addi	r2,r16,8
    e750:	dfc00a17 	ldw	ra,40(sp)
    e754:	df000917 	ldw	fp,36(sp)
    e758:	ddc00817 	ldw	r23,32(sp)
    e75c:	dd800717 	ldw	r22,28(sp)
    e760:	dd400617 	ldw	r21,24(sp)
    e764:	dd000517 	ldw	r20,20(sp)
    e768:	dcc00417 	ldw	r19,16(sp)
    e76c:	dc800317 	ldw	r18,12(sp)
    e770:	dc400217 	ldw	r17,8(sp)
    e774:	dc000117 	ldw	r16,4(sp)
    e778:	dec00b04 	addi	sp,sp,44
    e77c:	f800283a 	ret
    e780:	00800304 	movi	r2,12
    e784:	90800015 	stw	r2,0(r18)
    e788:	0005883a 	mov	r2,zero
    e78c:	003ff006 	br	e750 <__alt_data_end+0xfc00e750>
    e790:	01002004 	movi	r4,128
    e794:	02001004 	movi	r8,64
    e798:	01c00fc4 	movi	r7,63
    e79c:	003f6106 	br	e524 <__alt_data_end+0xfc00e524>
    e7a0:	4009883a 	mov	r4,r8
    e7a4:	003f7506 	br	e57c <__alt_data_end+0xfc00e57c>
    e7a8:	81000317 	ldw	r4,12(r16)
    e7ac:	003fde06 	br	e728 <__alt_data_end+0xfc00e728>
    e7b0:	81c5883a 	add	r2,r16,r7
    e7b4:	11400117 	ldw	r5,4(r2)
    e7b8:	9009883a 	mov	r4,r18
    e7bc:	29400054 	ori	r5,r5,1
    e7c0:	11400115 	stw	r5,4(r2)
    e7c4:	001f6b00 	call	1f6b0 <__malloc_unlock>
    e7c8:	80800204 	addi	r2,r16,8
    e7cc:	003fe006 	br	e750 <__alt_data_end+0xfc00e750>
    e7d0:	9c000217 	ldw	r16,8(r19)
    e7d4:	00bfff04 	movi	r2,-4
    e7d8:	85800117 	ldw	r22,4(r16)
    e7dc:	b0ac703a 	and	r22,r22,r2
    e7e0:	b4400336 	bltu	r22,r17,e7f0 <_malloc_r+0x344>
    e7e4:	b445c83a 	sub	r2,r22,r17
    e7e8:	00c003c4 	movi	r3,15
    e7ec:	18805d16 	blt	r3,r2,e964 <_malloc_r+0x4b8>
    e7f0:	05c000f4 	movhi	r23,3
    e7f4:	008000f4 	movhi	r2,3
    e7f8:	10840e04 	addi	r2,r2,4152
    e7fc:	bdf77c04 	addi	r23,r23,-8720
    e800:	15400017 	ldw	r21,0(r2)
    e804:	b8c00017 	ldw	r3,0(r23)
    e808:	00bfffc4 	movi	r2,-1
    e80c:	858d883a 	add	r6,r16,r22
    e810:	8d6b883a 	add	r21,r17,r21
    e814:	1880ea26 	beq	r3,r2,ebc0 <_malloc_r+0x714>
    e818:	ad4403c4 	addi	r21,r21,4111
    e81c:	00bc0004 	movi	r2,-4096
    e820:	a8aa703a 	and	r21,r21,r2
    e824:	a80b883a 	mov	r5,r21
    e828:	9009883a 	mov	r4,r18
    e82c:	d9800015 	stw	r6,0(sp)
    e830:	000f0880 	call	f088 <_sbrk_r>
    e834:	1029883a 	mov	r20,r2
    e838:	00bfffc4 	movi	r2,-1
    e83c:	d9800017 	ldw	r6,0(sp)
    e840:	a080e826 	beq	r20,r2,ebe4 <_malloc_r+0x738>
    e844:	a180a636 	bltu	r20,r6,eae0 <_malloc_r+0x634>
    e848:	070000f4 	movhi	fp,3
    e84c:	e7046604 	addi	fp,fp,4504
    e850:	e0800017 	ldw	r2,0(fp)
    e854:	a887883a 	add	r3,r21,r2
    e858:	e0c00015 	stw	r3,0(fp)
    e85c:	3500e626 	beq	r6,r20,ebf8 <_malloc_r+0x74c>
    e860:	b9000017 	ldw	r4,0(r23)
    e864:	00bfffc4 	movi	r2,-1
    e868:	2080ee26 	beq	r4,r2,ec24 <_malloc_r+0x778>
    e86c:	a185c83a 	sub	r2,r20,r6
    e870:	10c5883a 	add	r2,r2,r3
    e874:	e0800015 	stw	r2,0(fp)
    e878:	a0c001cc 	andi	r3,r20,7
    e87c:	1800bc26 	beq	r3,zero,eb70 <_malloc_r+0x6c4>
    e880:	a0e9c83a 	sub	r20,r20,r3
    e884:	00840204 	movi	r2,4104
    e888:	a5000204 	addi	r20,r20,8
    e88c:	10c7c83a 	sub	r3,r2,r3
    e890:	a545883a 	add	r2,r20,r21
    e894:	1083ffcc 	andi	r2,r2,4095
    e898:	18abc83a 	sub	r21,r3,r2
    e89c:	a80b883a 	mov	r5,r21
    e8a0:	9009883a 	mov	r4,r18
    e8a4:	000f0880 	call	f088 <_sbrk_r>
    e8a8:	00ffffc4 	movi	r3,-1
    e8ac:	10c0e126 	beq	r2,r3,ec34 <_malloc_r+0x788>
    e8b0:	1505c83a 	sub	r2,r2,r20
    e8b4:	1545883a 	add	r2,r2,r21
    e8b8:	10800054 	ori	r2,r2,1
    e8bc:	e0c00017 	ldw	r3,0(fp)
    e8c0:	9d000215 	stw	r20,8(r19)
    e8c4:	a0800115 	stw	r2,4(r20)
    e8c8:	a8c7883a 	add	r3,r21,r3
    e8cc:	e0c00015 	stw	r3,0(fp)
    e8d0:	84c00e26 	beq	r16,r19,e90c <_malloc_r+0x460>
    e8d4:	018003c4 	movi	r6,15
    e8d8:	3580a72e 	bgeu	r6,r22,eb78 <_malloc_r+0x6cc>
    e8dc:	81400117 	ldw	r5,4(r16)
    e8e0:	013ffe04 	movi	r4,-8
    e8e4:	b0bffd04 	addi	r2,r22,-12
    e8e8:	1104703a 	and	r2,r2,r4
    e8ec:	2900004c 	andi	r4,r5,1
    e8f0:	2088b03a 	or	r4,r4,r2
    e8f4:	81000115 	stw	r4,4(r16)
    e8f8:	01400144 	movi	r5,5
    e8fc:	8089883a 	add	r4,r16,r2
    e900:	21400115 	stw	r5,4(r4)
    e904:	21400215 	stw	r5,8(r4)
    e908:	3080cd36 	bltu	r6,r2,ec40 <_malloc_r+0x794>
    e90c:	008000f4 	movhi	r2,3
    e910:	10840d04 	addi	r2,r2,4148
    e914:	11000017 	ldw	r4,0(r2)
    e918:	20c0012e 	bgeu	r4,r3,e920 <_malloc_r+0x474>
    e91c:	10c00015 	stw	r3,0(r2)
    e920:	008000f4 	movhi	r2,3
    e924:	10840c04 	addi	r2,r2,4144
    e928:	11000017 	ldw	r4,0(r2)
    e92c:	9c000217 	ldw	r16,8(r19)
    e930:	20c0012e 	bgeu	r4,r3,e938 <_malloc_r+0x48c>
    e934:	10c00015 	stw	r3,0(r2)
    e938:	80c00117 	ldw	r3,4(r16)
    e93c:	00bfff04 	movi	r2,-4
    e940:	1886703a 	and	r3,r3,r2
    e944:	1c45c83a 	sub	r2,r3,r17
    e948:	1c400236 	bltu	r3,r17,e954 <_malloc_r+0x4a8>
    e94c:	00c003c4 	movi	r3,15
    e950:	18800416 	blt	r3,r2,e964 <_malloc_r+0x4b8>
    e954:	9009883a 	mov	r4,r18
    e958:	001f6b00 	call	1f6b0 <__malloc_unlock>
    e95c:	0005883a 	mov	r2,zero
    e960:	003f7b06 	br	e750 <__alt_data_end+0xfc00e750>
    e964:	88c00054 	ori	r3,r17,1
    e968:	80c00115 	stw	r3,4(r16)
    e96c:	8463883a 	add	r17,r16,r17
    e970:	10800054 	ori	r2,r2,1
    e974:	9c400215 	stw	r17,8(r19)
    e978:	88800115 	stw	r2,4(r17)
    e97c:	9009883a 	mov	r4,r18
    e980:	001f6b00 	call	1f6b0 <__malloc_unlock>
    e984:	80800204 	addi	r2,r16,8
    e988:	003f7106 	br	e750 <__alt_data_end+0xfc00e750>
    e98c:	00c00504 	movi	r3,20
    e990:	18804a2e 	bgeu	r3,r2,eabc <_malloc_r+0x610>
    e994:	00c01504 	movi	r3,84
    e998:	18806e36 	bltu	r3,r2,eb54 <_malloc_r+0x6a8>
    e99c:	8804d33a 	srli	r2,r17,12
    e9a0:	12001bc4 	addi	r8,r2,111
    e9a4:	11c01b84 	addi	r7,r2,110
    e9a8:	4209883a 	add	r4,r8,r8
    e9ac:	003edd06 	br	e524 <__alt_data_end+0xfc00e524>
    e9b0:	3804d27a 	srli	r2,r7,9
    e9b4:	00c00104 	movi	r3,4
    e9b8:	1880442e 	bgeu	r3,r2,eacc <_malloc_r+0x620>
    e9bc:	00c00504 	movi	r3,20
    e9c0:	18808136 	bltu	r3,r2,ebc8 <_malloc_r+0x71c>
    e9c4:	11401704 	addi	r5,r2,92
    e9c8:	10c016c4 	addi	r3,r2,91
    e9cc:	294b883a 	add	r5,r5,r5
    e9d0:	294b883a 	add	r5,r5,r5
    e9d4:	294b883a 	add	r5,r5,r5
    e9d8:	994b883a 	add	r5,r19,r5
    e9dc:	28800017 	ldw	r2,0(r5)
    e9e0:	018000f4 	movhi	r6,3
    e9e4:	297ffe04 	addi	r5,r5,-8
    e9e8:	31ac1c04 	addi	r6,r6,-20368
    e9ec:	28806526 	beq	r5,r2,eb84 <_malloc_r+0x6d8>
    e9f0:	01bfff04 	movi	r6,-4
    e9f4:	10c00117 	ldw	r3,4(r2)
    e9f8:	1986703a 	and	r3,r3,r6
    e9fc:	38c0022e 	bgeu	r7,r3,ea08 <_malloc_r+0x55c>
    ea00:	10800217 	ldw	r2,8(r2)
    ea04:	28bffb1e 	bne	r5,r2,e9f4 <__alt_data_end+0xfc00e9f4>
    ea08:	11400317 	ldw	r5,12(r2)
    ea0c:	98c00117 	ldw	r3,4(r19)
    ea10:	81400315 	stw	r5,12(r16)
    ea14:	80800215 	stw	r2,8(r16)
    ea18:	2c000215 	stw	r16,8(r5)
    ea1c:	14000315 	stw	r16,12(r2)
    ea20:	003ef806 	br	e604 <__alt_data_end+0xfc00e604>
    ea24:	88c00054 	ori	r3,r17,1
    ea28:	80c00115 	stw	r3,4(r16)
    ea2c:	8463883a 	add	r17,r16,r17
    ea30:	34400515 	stw	r17,20(r6)
    ea34:	34400415 	stw	r17,16(r6)
    ea38:	10c00054 	ori	r3,r2,1
    ea3c:	8a000315 	stw	r8,12(r17)
    ea40:	8a000215 	stw	r8,8(r17)
    ea44:	88c00115 	stw	r3,4(r17)
    ea48:	88a3883a 	add	r17,r17,r2
    ea4c:	88800015 	stw	r2,0(r17)
    ea50:	9009883a 	mov	r4,r18
    ea54:	001f6b00 	call	1f6b0 <__malloc_unlock>
    ea58:	80800204 	addi	r2,r16,8
    ea5c:	003f3c06 	br	e750 <__alt_data_end+0xfc00e750>
    ea60:	30c00117 	ldw	r3,4(r6)
    ea64:	003ee706 	br	e604 <__alt_data_end+0xfc00e604>
    ea68:	5ac00044 	addi	r11,r11,1
    ea6c:	588000cc 	andi	r2,r11,3
    ea70:	31800204 	addi	r6,r6,8
    ea74:	103efd1e 	bne	r2,zero,e66c <__alt_data_end+0xfc00e66c>
    ea78:	00002406 	br	eb0c <_malloc_r+0x660>
    ea7c:	14000317 	ldw	r16,12(r2)
    ea80:	143f251e 	bne	r2,r16,e718 <__alt_data_end+0xfc00e718>
    ea84:	21000084 	addi	r4,r4,2
    ea88:	003ebc06 	br	e57c <__alt_data_end+0xfc00e57c>
    ea8c:	8085883a 	add	r2,r16,r2
    ea90:	10c00117 	ldw	r3,4(r2)
    ea94:	81000317 	ldw	r4,12(r16)
    ea98:	81400217 	ldw	r5,8(r16)
    ea9c:	18c00054 	ori	r3,r3,1
    eaa0:	10c00115 	stw	r3,4(r2)
    eaa4:	29000315 	stw	r4,12(r5)
    eaa8:	21400215 	stw	r5,8(r4)
    eaac:	9009883a 	mov	r4,r18
    eab0:	001f6b00 	call	1f6b0 <__malloc_unlock>
    eab4:	80800204 	addi	r2,r16,8
    eab8:	003f2506 	br	e750 <__alt_data_end+0xfc00e750>
    eabc:	12001704 	addi	r8,r2,92
    eac0:	11c016c4 	addi	r7,r2,91
    eac4:	4209883a 	add	r4,r8,r8
    eac8:	003e9606 	br	e524 <__alt_data_end+0xfc00e524>
    eacc:	3804d1ba 	srli	r2,r7,6
    ead0:	11400e44 	addi	r5,r2,57
    ead4:	10c00e04 	addi	r3,r2,56
    ead8:	294b883a 	add	r5,r5,r5
    eadc:	003fbc06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    eae0:	84ff5926 	beq	r16,r19,e848 <__alt_data_end+0xfc00e848>
    eae4:	008000f4 	movhi	r2,3
    eae8:	10ac1c04 	addi	r2,r2,-20368
    eaec:	14000217 	ldw	r16,8(r2)
    eaf0:	00bfff04 	movi	r2,-4
    eaf4:	80c00117 	ldw	r3,4(r16)
    eaf8:	1886703a 	and	r3,r3,r2
    eafc:	003f9106 	br	e944 <__alt_data_end+0xfc00e944>
    eb00:	60800217 	ldw	r2,8(r12)
    eb04:	213fffc4 	addi	r4,r4,-1
    eb08:	1300651e 	bne	r2,r12,eca0 <_malloc_r+0x7f4>
    eb0c:	208000cc 	andi	r2,r4,3
    eb10:	633ffe04 	addi	r12,r12,-8
    eb14:	103ffa1e 	bne	r2,zero,eb00 <__alt_data_end+0xfc00eb00>
    eb18:	98800117 	ldw	r2,4(r19)
    eb1c:	0146303a 	nor	r3,zero,r5
    eb20:	1884703a 	and	r2,r3,r2
    eb24:	98800115 	stw	r2,4(r19)
    eb28:	294b883a 	add	r5,r5,r5
    eb2c:	117f2836 	bltu	r2,r5,e7d0 <__alt_data_end+0xfc00e7d0>
    eb30:	283f2726 	beq	r5,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    eb34:	2886703a 	and	r3,r5,r2
    eb38:	5809883a 	mov	r4,r11
    eb3c:	183ec31e 	bne	r3,zero,e64c <__alt_data_end+0xfc00e64c>
    eb40:	294b883a 	add	r5,r5,r5
    eb44:	2886703a 	and	r3,r5,r2
    eb48:	21000104 	addi	r4,r4,4
    eb4c:	183ffc26 	beq	r3,zero,eb40 <__alt_data_end+0xfc00eb40>
    eb50:	003ebe06 	br	e64c <__alt_data_end+0xfc00e64c>
    eb54:	00c05504 	movi	r3,340
    eb58:	18801236 	bltu	r3,r2,eba4 <_malloc_r+0x6f8>
    eb5c:	8804d3fa 	srli	r2,r17,15
    eb60:	12001e04 	addi	r8,r2,120
    eb64:	11c01dc4 	addi	r7,r2,119
    eb68:	4209883a 	add	r4,r8,r8
    eb6c:	003e6d06 	br	e524 <__alt_data_end+0xfc00e524>
    eb70:	00c40004 	movi	r3,4096
    eb74:	003f4606 	br	e890 <__alt_data_end+0xfc00e890>
    eb78:	00800044 	movi	r2,1
    eb7c:	a0800115 	stw	r2,4(r20)
    eb80:	003f7406 	br	e954 <__alt_data_end+0xfc00e954>
    eb84:	1805d0ba 	srai	r2,r3,2
    eb88:	01c00044 	movi	r7,1
    eb8c:	30c00117 	ldw	r3,4(r6)
    eb90:	388e983a 	sll	r7,r7,r2
    eb94:	2805883a 	mov	r2,r5
    eb98:	38c6b03a 	or	r3,r7,r3
    eb9c:	30c00115 	stw	r3,4(r6)
    eba0:	003f9b06 	br	ea10 <__alt_data_end+0xfc00ea10>
    eba4:	00c15504 	movi	r3,1364
    eba8:	18801a36 	bltu	r3,r2,ec14 <_malloc_r+0x768>
    ebac:	8804d4ba 	srli	r2,r17,18
    ebb0:	12001f44 	addi	r8,r2,125
    ebb4:	11c01f04 	addi	r7,r2,124
    ebb8:	4209883a 	add	r4,r8,r8
    ebbc:	003e5906 	br	e524 <__alt_data_end+0xfc00e524>
    ebc0:	ad400404 	addi	r21,r21,16
    ebc4:	003f1706 	br	e824 <__alt_data_end+0xfc00e824>
    ebc8:	00c01504 	movi	r3,84
    ebcc:	18802336 	bltu	r3,r2,ec5c <_malloc_r+0x7b0>
    ebd0:	3804d33a 	srli	r2,r7,12
    ebd4:	11401bc4 	addi	r5,r2,111
    ebd8:	10c01b84 	addi	r3,r2,110
    ebdc:	294b883a 	add	r5,r5,r5
    ebe0:	003f7b06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    ebe4:	9c000217 	ldw	r16,8(r19)
    ebe8:	00bfff04 	movi	r2,-4
    ebec:	80c00117 	ldw	r3,4(r16)
    ebf0:	1886703a 	and	r3,r3,r2
    ebf4:	003f5306 	br	e944 <__alt_data_end+0xfc00e944>
    ebf8:	3083ffcc 	andi	r2,r6,4095
    ebfc:	103f181e 	bne	r2,zero,e860 <__alt_data_end+0xfc00e860>
    ec00:	99000217 	ldw	r4,8(r19)
    ec04:	b545883a 	add	r2,r22,r21
    ec08:	10800054 	ori	r2,r2,1
    ec0c:	20800115 	stw	r2,4(r4)
    ec10:	003f3e06 	br	e90c <__alt_data_end+0xfc00e90c>
    ec14:	01003f84 	movi	r4,254
    ec18:	02001fc4 	movi	r8,127
    ec1c:	01c01f84 	movi	r7,126
    ec20:	003e4006 	br	e524 <__alt_data_end+0xfc00e524>
    ec24:	008000f4 	movhi	r2,3
    ec28:	10b77c04 	addi	r2,r2,-8720
    ec2c:	15000015 	stw	r20,0(r2)
    ec30:	003f1106 	br	e878 <__alt_data_end+0xfc00e878>
    ec34:	00800044 	movi	r2,1
    ec38:	002b883a 	mov	r21,zero
    ec3c:	003f1f06 	br	e8bc <__alt_data_end+0xfc00e8bc>
    ec40:	81400204 	addi	r5,r16,8
    ec44:	9009883a 	mov	r4,r18
    ec48:	0015e100 	call	15e10 <_free_r>
    ec4c:	008000f4 	movhi	r2,3
    ec50:	10846604 	addi	r2,r2,4504
    ec54:	10c00017 	ldw	r3,0(r2)
    ec58:	003f2c06 	br	e90c <__alt_data_end+0xfc00e90c>
    ec5c:	00c05504 	movi	r3,340
    ec60:	18800536 	bltu	r3,r2,ec78 <_malloc_r+0x7cc>
    ec64:	3804d3fa 	srli	r2,r7,15
    ec68:	11401e04 	addi	r5,r2,120
    ec6c:	10c01dc4 	addi	r3,r2,119
    ec70:	294b883a 	add	r5,r5,r5
    ec74:	003f5606 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    ec78:	00c15504 	movi	r3,1364
    ec7c:	18800536 	bltu	r3,r2,ec94 <_malloc_r+0x7e8>
    ec80:	3804d4ba 	srli	r2,r7,18
    ec84:	11401f44 	addi	r5,r2,125
    ec88:	10c01f04 	addi	r3,r2,124
    ec8c:	294b883a 	add	r5,r5,r5
    ec90:	003f4f06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    ec94:	01403f84 	movi	r5,254
    ec98:	00c01f84 	movi	r3,126
    ec9c:	003f4c06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    eca0:	98800117 	ldw	r2,4(r19)
    eca4:	003fa006 	br	eb28 <__alt_data_end+0xfc00eb28>
    eca8:	8808d0fa 	srli	r4,r17,3
    ecac:	20800044 	addi	r2,r4,1
    ecb0:	1085883a 	add	r2,r2,r2
    ecb4:	003e9006 	br	e6f8 <__alt_data_end+0xfc00e6f8>

0000ecb8 <memcpy>:
    ecb8:	defffd04 	addi	sp,sp,-12
    ecbc:	dfc00215 	stw	ra,8(sp)
    ecc0:	dc400115 	stw	r17,4(sp)
    ecc4:	dc000015 	stw	r16,0(sp)
    ecc8:	00c003c4 	movi	r3,15
    eccc:	2005883a 	mov	r2,r4
    ecd0:	1980452e 	bgeu	r3,r6,ede8 <memcpy+0x130>
    ecd4:	2906b03a 	or	r3,r5,r4
    ecd8:	18c000cc 	andi	r3,r3,3
    ecdc:	1800441e 	bne	r3,zero,edf0 <memcpy+0x138>
    ece0:	347ffc04 	addi	r17,r6,-16
    ece4:	8822d13a 	srli	r17,r17,4
    ece8:	28c00104 	addi	r3,r5,4
    ecec:	23400104 	addi	r13,r4,4
    ecf0:	8820913a 	slli	r16,r17,4
    ecf4:	2b000204 	addi	r12,r5,8
    ecf8:	22c00204 	addi	r11,r4,8
    ecfc:	84000504 	addi	r16,r16,20
    ed00:	2a800304 	addi	r10,r5,12
    ed04:	22400304 	addi	r9,r4,12
    ed08:	2c21883a 	add	r16,r5,r16
    ed0c:	2811883a 	mov	r8,r5
    ed10:	200f883a 	mov	r7,r4
    ed14:	41000017 	ldw	r4,0(r8)
    ed18:	1fc00017 	ldw	ra,0(r3)
    ed1c:	63c00017 	ldw	r15,0(r12)
    ed20:	39000015 	stw	r4,0(r7)
    ed24:	53800017 	ldw	r14,0(r10)
    ed28:	6fc00015 	stw	ra,0(r13)
    ed2c:	5bc00015 	stw	r15,0(r11)
    ed30:	4b800015 	stw	r14,0(r9)
    ed34:	18c00404 	addi	r3,r3,16
    ed38:	39c00404 	addi	r7,r7,16
    ed3c:	42000404 	addi	r8,r8,16
    ed40:	6b400404 	addi	r13,r13,16
    ed44:	63000404 	addi	r12,r12,16
    ed48:	5ac00404 	addi	r11,r11,16
    ed4c:	52800404 	addi	r10,r10,16
    ed50:	4a400404 	addi	r9,r9,16
    ed54:	1c3fef1e 	bne	r3,r16,ed14 <__alt_data_end+0xfc00ed14>
    ed58:	89c00044 	addi	r7,r17,1
    ed5c:	380e913a 	slli	r7,r7,4
    ed60:	310003cc 	andi	r4,r6,15
    ed64:	02c000c4 	movi	r11,3
    ed68:	11c7883a 	add	r3,r2,r7
    ed6c:	29cb883a 	add	r5,r5,r7
    ed70:	5900212e 	bgeu	r11,r4,edf8 <memcpy+0x140>
    ed74:	1813883a 	mov	r9,r3
    ed78:	2811883a 	mov	r8,r5
    ed7c:	200f883a 	mov	r7,r4
    ed80:	42800017 	ldw	r10,0(r8)
    ed84:	4a400104 	addi	r9,r9,4
    ed88:	39ffff04 	addi	r7,r7,-4
    ed8c:	4abfff15 	stw	r10,-4(r9)
    ed90:	42000104 	addi	r8,r8,4
    ed94:	59fffa36 	bltu	r11,r7,ed80 <__alt_data_end+0xfc00ed80>
    ed98:	213fff04 	addi	r4,r4,-4
    ed9c:	2008d0ba 	srli	r4,r4,2
    eda0:	318000cc 	andi	r6,r6,3
    eda4:	21000044 	addi	r4,r4,1
    eda8:	2109883a 	add	r4,r4,r4
    edac:	2109883a 	add	r4,r4,r4
    edb0:	1907883a 	add	r3,r3,r4
    edb4:	290b883a 	add	r5,r5,r4
    edb8:	30000626 	beq	r6,zero,edd4 <memcpy+0x11c>
    edbc:	198d883a 	add	r6,r3,r6
    edc0:	29c00003 	ldbu	r7,0(r5)
    edc4:	18c00044 	addi	r3,r3,1
    edc8:	29400044 	addi	r5,r5,1
    edcc:	19ffffc5 	stb	r7,-1(r3)
    edd0:	19bffb1e 	bne	r3,r6,edc0 <__alt_data_end+0xfc00edc0>
    edd4:	dfc00217 	ldw	ra,8(sp)
    edd8:	dc400117 	ldw	r17,4(sp)
    eddc:	dc000017 	ldw	r16,0(sp)
    ede0:	dec00304 	addi	sp,sp,12
    ede4:	f800283a 	ret
    ede8:	2007883a 	mov	r3,r4
    edec:	003ff206 	br	edb8 <__alt_data_end+0xfc00edb8>
    edf0:	2007883a 	mov	r3,r4
    edf4:	003ff106 	br	edbc <__alt_data_end+0xfc00edbc>
    edf8:	200d883a 	mov	r6,r4
    edfc:	003fee06 	br	edb8 <__alt_data_end+0xfc00edb8>

0000ee00 <memset>:
    ee00:	20c000cc 	andi	r3,r4,3
    ee04:	2005883a 	mov	r2,r4
    ee08:	18004426 	beq	r3,zero,ef1c <memset+0x11c>
    ee0c:	31ffffc4 	addi	r7,r6,-1
    ee10:	30004026 	beq	r6,zero,ef14 <memset+0x114>
    ee14:	2813883a 	mov	r9,r5
    ee18:	200d883a 	mov	r6,r4
    ee1c:	2007883a 	mov	r3,r4
    ee20:	00000406 	br	ee34 <memset+0x34>
    ee24:	3a3fffc4 	addi	r8,r7,-1
    ee28:	31800044 	addi	r6,r6,1
    ee2c:	38003926 	beq	r7,zero,ef14 <memset+0x114>
    ee30:	400f883a 	mov	r7,r8
    ee34:	18c00044 	addi	r3,r3,1
    ee38:	32400005 	stb	r9,0(r6)
    ee3c:	1a0000cc 	andi	r8,r3,3
    ee40:	403ff81e 	bne	r8,zero,ee24 <__alt_data_end+0xfc00ee24>
    ee44:	010000c4 	movi	r4,3
    ee48:	21c02d2e 	bgeu	r4,r7,ef00 <memset+0x100>
    ee4c:	29003fcc 	andi	r4,r5,255
    ee50:	200c923a 	slli	r6,r4,8
    ee54:	3108b03a 	or	r4,r6,r4
    ee58:	200c943a 	slli	r6,r4,16
    ee5c:	218cb03a 	or	r6,r4,r6
    ee60:	010003c4 	movi	r4,15
    ee64:	21c0182e 	bgeu	r4,r7,eec8 <memset+0xc8>
    ee68:	3b3ffc04 	addi	r12,r7,-16
    ee6c:	6018d13a 	srli	r12,r12,4
    ee70:	1a000104 	addi	r8,r3,4
    ee74:	1ac00204 	addi	r11,r3,8
    ee78:	6008913a 	slli	r4,r12,4
    ee7c:	1a800304 	addi	r10,r3,12
    ee80:	1813883a 	mov	r9,r3
    ee84:	21000504 	addi	r4,r4,20
    ee88:	1909883a 	add	r4,r3,r4
    ee8c:	49800015 	stw	r6,0(r9)
    ee90:	41800015 	stw	r6,0(r8)
    ee94:	59800015 	stw	r6,0(r11)
    ee98:	51800015 	stw	r6,0(r10)
    ee9c:	42000404 	addi	r8,r8,16
    eea0:	4a400404 	addi	r9,r9,16
    eea4:	5ac00404 	addi	r11,r11,16
    eea8:	52800404 	addi	r10,r10,16
    eeac:	413ff71e 	bne	r8,r4,ee8c <__alt_data_end+0xfc00ee8c>
    eeb0:	63000044 	addi	r12,r12,1
    eeb4:	6018913a 	slli	r12,r12,4
    eeb8:	39c003cc 	andi	r7,r7,15
    eebc:	010000c4 	movi	r4,3
    eec0:	1b07883a 	add	r3,r3,r12
    eec4:	21c00e2e 	bgeu	r4,r7,ef00 <memset+0x100>
    eec8:	1813883a 	mov	r9,r3
    eecc:	3811883a 	mov	r8,r7
    eed0:	010000c4 	movi	r4,3
    eed4:	49800015 	stw	r6,0(r9)
    eed8:	423fff04 	addi	r8,r8,-4
    eedc:	4a400104 	addi	r9,r9,4
    eee0:	223ffc36 	bltu	r4,r8,eed4 <__alt_data_end+0xfc00eed4>
    eee4:	393fff04 	addi	r4,r7,-4
    eee8:	2008d0ba 	srli	r4,r4,2
    eeec:	39c000cc 	andi	r7,r7,3
    eef0:	21000044 	addi	r4,r4,1
    eef4:	2109883a 	add	r4,r4,r4
    eef8:	2109883a 	add	r4,r4,r4
    eefc:	1907883a 	add	r3,r3,r4
    ef00:	38000526 	beq	r7,zero,ef18 <memset+0x118>
    ef04:	19cf883a 	add	r7,r3,r7
    ef08:	19400005 	stb	r5,0(r3)
    ef0c:	18c00044 	addi	r3,r3,1
    ef10:	38fffd1e 	bne	r7,r3,ef08 <__alt_data_end+0xfc00ef08>
    ef14:	f800283a 	ret
    ef18:	f800283a 	ret
    ef1c:	2007883a 	mov	r3,r4
    ef20:	300f883a 	mov	r7,r6
    ef24:	003fc706 	br	ee44 <__alt_data_end+0xfc00ee44>

0000ef28 <_printf_r>:
    ef28:	defffd04 	addi	sp,sp,-12
    ef2c:	2805883a 	mov	r2,r5
    ef30:	dfc00015 	stw	ra,0(sp)
    ef34:	d9800115 	stw	r6,4(sp)
    ef38:	d9c00215 	stw	r7,8(sp)
    ef3c:	21400217 	ldw	r5,8(r4)
    ef40:	d9c00104 	addi	r7,sp,4
    ef44:	100d883a 	mov	r6,r2
    ef48:	00118dc0 	call	118dc <___vfprintf_internal_r>
    ef4c:	dfc00017 	ldw	ra,0(sp)
    ef50:	dec00304 	addi	sp,sp,12
    ef54:	f800283a 	ret

0000ef58 <printf>:
    ef58:	defffc04 	addi	sp,sp,-16
    ef5c:	dfc00015 	stw	ra,0(sp)
    ef60:	d9400115 	stw	r5,4(sp)
    ef64:	d9800215 	stw	r6,8(sp)
    ef68:	d9c00315 	stw	r7,12(sp)
    ef6c:	008000f4 	movhi	r2,3
    ef70:	10b77b04 	addi	r2,r2,-8724
    ef74:	10800017 	ldw	r2,0(r2)
    ef78:	200b883a 	mov	r5,r4
    ef7c:	d9800104 	addi	r6,sp,4
    ef80:	11000217 	ldw	r4,8(r2)
    ef84:	0013bb80 	call	13bb8 <__vfprintf_internal>
    ef88:	dfc00017 	ldw	ra,0(sp)
    ef8c:	dec00404 	addi	sp,sp,16
    ef90:	f800283a 	ret

0000ef94 <_putchar_r>:
    ef94:	21800217 	ldw	r6,8(r4)
    ef98:	0017d001 	jmpi	17d00 <_putc_r>

0000ef9c <putchar>:
    ef9c:	008000f4 	movhi	r2,3
    efa0:	10b77b04 	addi	r2,r2,-8724
    efa4:	200b883a 	mov	r5,r4
    efa8:	11000017 	ldw	r4,0(r2)
    efac:	21800217 	ldw	r6,8(r4)
    efb0:	0017d001 	jmpi	17d00 <_putc_r>

0000efb4 <_puts_r>:
    efb4:	defff604 	addi	sp,sp,-40
    efb8:	dc000715 	stw	r16,28(sp)
    efbc:	2021883a 	mov	r16,r4
    efc0:	2809883a 	mov	r4,r5
    efc4:	dc400815 	stw	r17,32(sp)
    efc8:	dfc00915 	stw	ra,36(sp)
    efcc:	2823883a 	mov	r17,r5
    efd0:	000f5800 	call	f580 <strlen>
    efd4:	10c00044 	addi	r3,r2,1
    efd8:	d8800115 	stw	r2,4(sp)
    efdc:	008000f4 	movhi	r2,3
    efe0:	10aa7904 	addi	r2,r2,-22044
    efe4:	d8800215 	stw	r2,8(sp)
    efe8:	00800044 	movi	r2,1
    efec:	d8800315 	stw	r2,12(sp)
    eff0:	00800084 	movi	r2,2
    eff4:	dc400015 	stw	r17,0(sp)
    eff8:	d8c00615 	stw	r3,24(sp)
    effc:	dec00415 	stw	sp,16(sp)
    f000:	d8800515 	stw	r2,20(sp)
    f004:	80000226 	beq	r16,zero,f010 <_puts_r+0x5c>
    f008:	80800e17 	ldw	r2,56(r16)
    f00c:	10001426 	beq	r2,zero,f060 <_puts_r+0xac>
    f010:	81400217 	ldw	r5,8(r16)
    f014:	2880030b 	ldhu	r2,12(r5)
    f018:	10c8000c 	andi	r3,r2,8192
    f01c:	1800061e 	bne	r3,zero,f038 <_puts_r+0x84>
    f020:	29001917 	ldw	r4,100(r5)
    f024:	00f7ffc4 	movi	r3,-8193
    f028:	10880014 	ori	r2,r2,8192
    f02c:	20c6703a 	and	r3,r4,r3
    f030:	2880030d 	sth	r2,12(r5)
    f034:	28c01915 	stw	r3,100(r5)
    f038:	d9800404 	addi	r6,sp,16
    f03c:	8009883a 	mov	r4,r16
    f040:	00161200 	call	16120 <__sfvwrite_r>
    f044:	1000091e 	bne	r2,zero,f06c <_puts_r+0xb8>
    f048:	00800284 	movi	r2,10
    f04c:	dfc00917 	ldw	ra,36(sp)
    f050:	dc400817 	ldw	r17,32(sp)
    f054:	dc000717 	ldw	r16,28(sp)
    f058:	dec00a04 	addi	sp,sp,40
    f05c:	f800283a 	ret
    f060:	8009883a 	mov	r4,r16
    f064:	0015c9c0 	call	15c9c <__sinit>
    f068:	003fe906 	br	f010 <__alt_data_end+0xfc00f010>
    f06c:	00bfffc4 	movi	r2,-1
    f070:	003ff606 	br	f04c <__alt_data_end+0xfc00f04c>

0000f074 <puts>:
    f074:	008000f4 	movhi	r2,3
    f078:	10b77b04 	addi	r2,r2,-8724
    f07c:	200b883a 	mov	r5,r4
    f080:	11000017 	ldw	r4,0(r2)
    f084:	000efb41 	jmpi	efb4 <_puts_r>

0000f088 <_sbrk_r>:
    f088:	defffd04 	addi	sp,sp,-12
    f08c:	dc000015 	stw	r16,0(sp)
    f090:	040000f4 	movhi	r16,3
    f094:	dc400115 	stw	r17,4(sp)
    f098:	84040f04 	addi	r16,r16,4156
    f09c:	2023883a 	mov	r17,r4
    f0a0:	2809883a 	mov	r4,r5
    f0a4:	dfc00215 	stw	ra,8(sp)
    f0a8:	80000015 	stw	zero,0(r16)
    f0ac:	001f8980 	call	1f898 <sbrk>
    f0b0:	00ffffc4 	movi	r3,-1
    f0b4:	10c00526 	beq	r2,r3,f0cc <_sbrk_r+0x44>
    f0b8:	dfc00217 	ldw	ra,8(sp)
    f0bc:	dc400117 	ldw	r17,4(sp)
    f0c0:	dc000017 	ldw	r16,0(sp)
    f0c4:	dec00304 	addi	sp,sp,12
    f0c8:	f800283a 	ret
    f0cc:	80c00017 	ldw	r3,0(r16)
    f0d0:	183ff926 	beq	r3,zero,f0b8 <__alt_data_end+0xfc00f0b8>
    f0d4:	88c00015 	stw	r3,0(r17)
    f0d8:	003ff706 	br	f0b8 <__alt_data_end+0xfc00f0b8>

0000f0dc <_init_signal_r>:
    f0dc:	2080b717 	ldw	r2,732(r4)
    f0e0:	10000226 	beq	r2,zero,f0ec <_init_signal_r+0x10>
    f0e4:	0005883a 	mov	r2,zero
    f0e8:	f800283a 	ret
    f0ec:	defffe04 	addi	sp,sp,-8
    f0f0:	01402004 	movi	r5,128
    f0f4:	dc000015 	stw	r16,0(sp)
    f0f8:	dfc00115 	stw	ra,4(sp)
    f0fc:	2021883a 	mov	r16,r4
    f100:	000e4ac0 	call	e4ac <_malloc_r>
    f104:	8080b715 	stw	r2,732(r16)
    f108:	10000d26 	beq	r2,zero,f140 <_init_signal_r+0x64>
    f10c:	0007883a 	mov	r3,zero
    f110:	01002004 	movi	r4,128
    f114:	00000106 	br	f11c <_init_signal_r+0x40>
    f118:	8080b717 	ldw	r2,732(r16)
    f11c:	10c5883a 	add	r2,r2,r3
    f120:	10000015 	stw	zero,0(r2)
    f124:	18c00104 	addi	r3,r3,4
    f128:	193ffb1e 	bne	r3,r4,f118 <__alt_data_end+0xfc00f118>
    f12c:	0005883a 	mov	r2,zero
    f130:	dfc00117 	ldw	ra,4(sp)
    f134:	dc000017 	ldw	r16,0(sp)
    f138:	dec00204 	addi	sp,sp,8
    f13c:	f800283a 	ret
    f140:	00bfffc4 	movi	r2,-1
    f144:	003ffa06 	br	f130 <__alt_data_end+0xfc00f130>

0000f148 <_signal_r>:
    f148:	00c007c4 	movi	r3,31
    f14c:	19401536 	bltu	r3,r5,f1a4 <_signal_r+0x5c>
    f150:	2080b717 	ldw	r2,732(r4)
    f154:	defffc04 	addi	sp,sp,-16
    f158:	dc800215 	stw	r18,8(sp)
    f15c:	dc400115 	stw	r17,4(sp)
    f160:	dc000015 	stw	r16,0(sp)
    f164:	dfc00315 	stw	ra,12(sp)
    f168:	3023883a 	mov	r17,r6
    f16c:	2021883a 	mov	r16,r4
    f170:	2825883a 	mov	r18,r5
    f174:	10000f26 	beq	r2,zero,f1b4 <_signal_r+0x6c>
    f178:	948b883a 	add	r5,r18,r18
    f17c:	294b883a 	add	r5,r5,r5
    f180:	114b883a 	add	r5,r2,r5
    f184:	28800017 	ldw	r2,0(r5)
    f188:	2c400015 	stw	r17,0(r5)
    f18c:	dfc00317 	ldw	ra,12(sp)
    f190:	dc800217 	ldw	r18,8(sp)
    f194:	dc400117 	ldw	r17,4(sp)
    f198:	dc000017 	ldw	r16,0(sp)
    f19c:	dec00404 	addi	sp,sp,16
    f1a0:	f800283a 	ret
    f1a4:	00c00584 	movi	r3,22
    f1a8:	20c00015 	stw	r3,0(r4)
    f1ac:	00bfffc4 	movi	r2,-1
    f1b0:	f800283a 	ret
    f1b4:	000f0dc0 	call	f0dc <_init_signal_r>
    f1b8:	1000021e 	bne	r2,zero,f1c4 <_signal_r+0x7c>
    f1bc:	8080b717 	ldw	r2,732(r16)
    f1c0:	003fed06 	br	f178 <__alt_data_end+0xfc00f178>
    f1c4:	00bfffc4 	movi	r2,-1
    f1c8:	003ff006 	br	f18c <__alt_data_end+0xfc00f18c>

0000f1cc <_raise_r>:
    f1cc:	008007c4 	movi	r2,31
    f1d0:	11402936 	bltu	r2,r5,f278 <_raise_r+0xac>
    f1d4:	20c0b717 	ldw	r3,732(r4)
    f1d8:	defffd04 	addi	sp,sp,-12
    f1dc:	dc400115 	stw	r17,4(sp)
    f1e0:	dc000015 	stw	r16,0(sp)
    f1e4:	dfc00215 	stw	ra,8(sp)
    f1e8:	2021883a 	mov	r16,r4
    f1ec:	2823883a 	mov	r17,r5
    f1f0:	18001726 	beq	r3,zero,f250 <_raise_r+0x84>
    f1f4:	2945883a 	add	r2,r5,r5
    f1f8:	1085883a 	add	r2,r2,r2
    f1fc:	1887883a 	add	r3,r3,r2
    f200:	19800017 	ldw	r6,0(r3)
    f204:	30001226 	beq	r6,zero,f250 <_raise_r+0x84>
    f208:	00800044 	movi	r2,1
    f20c:	30800e26 	beq	r6,r2,f248 <_raise_r+0x7c>
    f210:	013fffc4 	movi	r4,-1
    f214:	31000926 	beq	r6,r4,f23c <_raise_r+0x70>
    f218:	18000015 	stw	zero,0(r3)
    f21c:	2809883a 	mov	r4,r5
    f220:	303ee83a 	callr	r6
    f224:	0005883a 	mov	r2,zero
    f228:	dfc00217 	ldw	ra,8(sp)
    f22c:	dc400117 	ldw	r17,4(sp)
    f230:	dc000017 	ldw	r16,0(sp)
    f234:	dec00304 	addi	sp,sp,12
    f238:	f800283a 	ret
    f23c:	00c00584 	movi	r3,22
    f240:	80c00015 	stw	r3,0(r16)
    f244:	003ff806 	br	f228 <__alt_data_end+0xfc00f228>
    f248:	0005883a 	mov	r2,zero
    f24c:	003ff606 	br	f228 <__alt_data_end+0xfc00f228>
    f250:	8009883a 	mov	r4,r16
    f254:	000f3dc0 	call	f3dc <_getpid_r>
    f258:	880d883a 	mov	r6,r17
    f25c:	100b883a 	mov	r5,r2
    f260:	8009883a 	mov	r4,r16
    f264:	dfc00217 	ldw	ra,8(sp)
    f268:	dc400117 	ldw	r17,4(sp)
    f26c:	dc000017 	ldw	r16,0(sp)
    f270:	dec00304 	addi	sp,sp,12
    f274:	000f3801 	jmpi	f380 <_kill_r>
    f278:	00800584 	movi	r2,22
    f27c:	20800015 	stw	r2,0(r4)
    f280:	00bfffc4 	movi	r2,-1
    f284:	f800283a 	ret

0000f288 <__sigtramp_r>:
    f288:	008007c4 	movi	r2,31
    f28c:	11402436 	bltu	r2,r5,f320 <__sigtramp_r+0x98>
    f290:	20c0b717 	ldw	r3,732(r4)
    f294:	defffd04 	addi	sp,sp,-12
    f298:	dc400115 	stw	r17,4(sp)
    f29c:	dc000015 	stw	r16,0(sp)
    f2a0:	dfc00215 	stw	ra,8(sp)
    f2a4:	2021883a 	mov	r16,r4
    f2a8:	2823883a 	mov	r17,r5
    f2ac:	18001826 	beq	r3,zero,f310 <__sigtramp_r+0x88>
    f2b0:	8c45883a 	add	r2,r17,r17
    f2b4:	1085883a 	add	r2,r2,r2
    f2b8:	1885883a 	add	r2,r3,r2
    f2bc:	10c00017 	ldw	r3,0(r2)
    f2c0:	18001126 	beq	r3,zero,f308 <__sigtramp_r+0x80>
    f2c4:	013fffc4 	movi	r4,-1
    f2c8:	19000d26 	beq	r3,r4,f300 <__sigtramp_r+0x78>
    f2cc:	01000044 	movi	r4,1
    f2d0:	19000926 	beq	r3,r4,f2f8 <__sigtramp_r+0x70>
    f2d4:	10000015 	stw	zero,0(r2)
    f2d8:	8809883a 	mov	r4,r17
    f2dc:	183ee83a 	callr	r3
    f2e0:	0005883a 	mov	r2,zero
    f2e4:	dfc00217 	ldw	ra,8(sp)
    f2e8:	dc400117 	ldw	r17,4(sp)
    f2ec:	dc000017 	ldw	r16,0(sp)
    f2f0:	dec00304 	addi	sp,sp,12
    f2f4:	f800283a 	ret
    f2f8:	008000c4 	movi	r2,3
    f2fc:	003ff906 	br	f2e4 <__alt_data_end+0xfc00f2e4>
    f300:	00800084 	movi	r2,2
    f304:	003ff706 	br	f2e4 <__alt_data_end+0xfc00f2e4>
    f308:	00800044 	movi	r2,1
    f30c:	003ff506 	br	f2e4 <__alt_data_end+0xfc00f2e4>
    f310:	000f0dc0 	call	f0dc <_init_signal_r>
    f314:	1000041e 	bne	r2,zero,f328 <__sigtramp_r+0xa0>
    f318:	80c0b717 	ldw	r3,732(r16)
    f31c:	003fe406 	br	f2b0 <__alt_data_end+0xfc00f2b0>
    f320:	00bfffc4 	movi	r2,-1
    f324:	f800283a 	ret
    f328:	00bfffc4 	movi	r2,-1
    f32c:	003fed06 	br	f2e4 <__alt_data_end+0xfc00f2e4>

0000f330 <raise>:
    f330:	008000f4 	movhi	r2,3
    f334:	10b77b04 	addi	r2,r2,-8724
    f338:	200b883a 	mov	r5,r4
    f33c:	11000017 	ldw	r4,0(r2)
    f340:	000f1cc1 	jmpi	f1cc <_raise_r>

0000f344 <signal>:
    f344:	008000f4 	movhi	r2,3
    f348:	10b77b04 	addi	r2,r2,-8724
    f34c:	280d883a 	mov	r6,r5
    f350:	200b883a 	mov	r5,r4
    f354:	11000017 	ldw	r4,0(r2)
    f358:	000f1481 	jmpi	f148 <_signal_r>

0000f35c <_init_signal>:
    f35c:	008000f4 	movhi	r2,3
    f360:	10b77b04 	addi	r2,r2,-8724
    f364:	11000017 	ldw	r4,0(r2)
    f368:	000f0dc1 	jmpi	f0dc <_init_signal_r>

0000f36c <__sigtramp>:
    f36c:	008000f4 	movhi	r2,3
    f370:	10b77b04 	addi	r2,r2,-8724
    f374:	200b883a 	mov	r5,r4
    f378:	11000017 	ldw	r4,0(r2)
    f37c:	000f2881 	jmpi	f288 <__sigtramp_r>

0000f380 <_kill_r>:
    f380:	defffd04 	addi	sp,sp,-12
    f384:	2805883a 	mov	r2,r5
    f388:	dc000015 	stw	r16,0(sp)
    f38c:	040000f4 	movhi	r16,3
    f390:	dc400115 	stw	r17,4(sp)
    f394:	84040f04 	addi	r16,r16,4156
    f398:	2023883a 	mov	r17,r4
    f39c:	300b883a 	mov	r5,r6
    f3a0:	1009883a 	mov	r4,r2
    f3a4:	dfc00215 	stw	ra,8(sp)
    f3a8:	80000015 	stw	zero,0(r16)
    f3ac:	001f2dc0 	call	1f2dc <kill>
    f3b0:	00ffffc4 	movi	r3,-1
    f3b4:	10c00526 	beq	r2,r3,f3cc <_kill_r+0x4c>
    f3b8:	dfc00217 	ldw	ra,8(sp)
    f3bc:	dc400117 	ldw	r17,4(sp)
    f3c0:	dc000017 	ldw	r16,0(sp)
    f3c4:	dec00304 	addi	sp,sp,12
    f3c8:	f800283a 	ret
    f3cc:	80c00017 	ldw	r3,0(r16)
    f3d0:	183ff926 	beq	r3,zero,f3b8 <__alt_data_end+0xfc00f3b8>
    f3d4:	88c00015 	stw	r3,0(r17)
    f3d8:	003ff706 	br	f3b8 <__alt_data_end+0xfc00f3b8>

0000f3dc <_getpid_r>:
    f3dc:	001f1981 	jmpi	1f198 <getpid>

0000f3e0 <_sprintf_r>:
    f3e0:	deffe404 	addi	sp,sp,-112
    f3e4:	2807883a 	mov	r3,r5
    f3e8:	dfc01a15 	stw	ra,104(sp)
    f3ec:	d9c01b15 	stw	r7,108(sp)
    f3f0:	00a00034 	movhi	r2,32768
    f3f4:	10bfffc4 	addi	r2,r2,-1
    f3f8:	02008204 	movi	r8,520
    f3fc:	d8800215 	stw	r2,8(sp)
    f400:	d8800515 	stw	r2,20(sp)
    f404:	d9c01b04 	addi	r7,sp,108
    f408:	d80b883a 	mov	r5,sp
    f40c:	00bfffc4 	movi	r2,-1
    f410:	d8c00015 	stw	r3,0(sp)
    f414:	d8c00415 	stw	r3,16(sp)
    f418:	da00030d 	sth	r8,12(sp)
    f41c:	d880038d 	sth	r2,14(sp)
    f420:	000f6180 	call	f618 <___svfprintf_internal_r>
    f424:	d8c00017 	ldw	r3,0(sp)
    f428:	18000005 	stb	zero,0(r3)
    f42c:	dfc01a17 	ldw	ra,104(sp)
    f430:	dec01c04 	addi	sp,sp,112
    f434:	f800283a 	ret

0000f438 <sprintf>:
    f438:	deffe304 	addi	sp,sp,-116
    f43c:	2007883a 	mov	r3,r4
    f440:	dfc01a15 	stw	ra,104(sp)
    f444:	d9801b15 	stw	r6,108(sp)
    f448:	d9c01c15 	stw	r7,112(sp)
    f44c:	010000f4 	movhi	r4,3
    f450:	21377b04 	addi	r4,r4,-8724
    f454:	21000017 	ldw	r4,0(r4)
    f458:	00a00034 	movhi	r2,32768
    f45c:	10bfffc4 	addi	r2,r2,-1
    f460:	280d883a 	mov	r6,r5
    f464:	02008204 	movi	r8,520
    f468:	d8800215 	stw	r2,8(sp)
    f46c:	d8800515 	stw	r2,20(sp)
    f470:	d9c01b04 	addi	r7,sp,108
    f474:	d80b883a 	mov	r5,sp
    f478:	00bfffc4 	movi	r2,-1
    f47c:	d8c00015 	stw	r3,0(sp)
    f480:	d8c00415 	stw	r3,16(sp)
    f484:	da00030d 	sth	r8,12(sp)
    f488:	d880038d 	sth	r2,14(sp)
    f48c:	000f6180 	call	f618 <___svfprintf_internal_r>
    f490:	d8c00017 	ldw	r3,0(sp)
    f494:	18000005 	stb	zero,0(r3)
    f498:	dfc01a17 	ldw	ra,104(sp)
    f49c:	dec01d04 	addi	sp,sp,116
    f4a0:	f800283a 	ret

0000f4a4 <strcmp>:
    f4a4:	2144b03a 	or	r2,r4,r5
    f4a8:	108000cc 	andi	r2,r2,3
    f4ac:	1000171e 	bne	r2,zero,f50c <strcmp+0x68>
    f4b0:	20800017 	ldw	r2,0(r4)
    f4b4:	28c00017 	ldw	r3,0(r5)
    f4b8:	10c0141e 	bne	r2,r3,f50c <strcmp+0x68>
    f4bc:	027fbff4 	movhi	r9,65279
    f4c0:	4a7fbfc4 	addi	r9,r9,-257
    f4c4:	0086303a 	nor	r3,zero,r2
    f4c8:	02202074 	movhi	r8,32897
    f4cc:	1245883a 	add	r2,r2,r9
    f4d0:	42202004 	addi	r8,r8,-32640
    f4d4:	10c4703a 	and	r2,r2,r3
    f4d8:	1204703a 	and	r2,r2,r8
    f4dc:	10000226 	beq	r2,zero,f4e8 <strcmp+0x44>
    f4e0:	00002306 	br	f570 <strcmp+0xcc>
    f4e4:	1000221e 	bne	r2,zero,f570 <strcmp+0xcc>
    f4e8:	21000104 	addi	r4,r4,4
    f4ec:	20c00017 	ldw	r3,0(r4)
    f4f0:	29400104 	addi	r5,r5,4
    f4f4:	29800017 	ldw	r6,0(r5)
    f4f8:	1a4f883a 	add	r7,r3,r9
    f4fc:	00c4303a 	nor	r2,zero,r3
    f500:	3884703a 	and	r2,r7,r2
    f504:	1204703a 	and	r2,r2,r8
    f508:	19bff626 	beq	r3,r6,f4e4 <__alt_data_end+0xfc00f4e4>
    f50c:	20800003 	ldbu	r2,0(r4)
    f510:	10c03fcc 	andi	r3,r2,255
    f514:	18c0201c 	xori	r3,r3,128
    f518:	18ffe004 	addi	r3,r3,-128
    f51c:	18000c26 	beq	r3,zero,f550 <strcmp+0xac>
    f520:	29800007 	ldb	r6,0(r5)
    f524:	19800326 	beq	r3,r6,f534 <strcmp+0x90>
    f528:	00001306 	br	f578 <strcmp+0xd4>
    f52c:	29800007 	ldb	r6,0(r5)
    f530:	11800b1e 	bne	r2,r6,f560 <strcmp+0xbc>
    f534:	21000044 	addi	r4,r4,1
    f538:	20c00003 	ldbu	r3,0(r4)
    f53c:	29400044 	addi	r5,r5,1
    f540:	18803fcc 	andi	r2,r3,255
    f544:	1080201c 	xori	r2,r2,128
    f548:	10bfe004 	addi	r2,r2,-128
    f54c:	103ff71e 	bne	r2,zero,f52c <__alt_data_end+0xfc00f52c>
    f550:	0007883a 	mov	r3,zero
    f554:	28800003 	ldbu	r2,0(r5)
    f558:	1885c83a 	sub	r2,r3,r2
    f55c:	f800283a 	ret
    f560:	28800003 	ldbu	r2,0(r5)
    f564:	18c03fcc 	andi	r3,r3,255
    f568:	1885c83a 	sub	r2,r3,r2
    f56c:	f800283a 	ret
    f570:	0005883a 	mov	r2,zero
    f574:	f800283a 	ret
    f578:	10c03fcc 	andi	r3,r2,255
    f57c:	003ff506 	br	f554 <__alt_data_end+0xfc00f554>

0000f580 <strlen>:
    f580:	208000cc 	andi	r2,r4,3
    f584:	10002026 	beq	r2,zero,f608 <strlen+0x88>
    f588:	20800007 	ldb	r2,0(r4)
    f58c:	10002026 	beq	r2,zero,f610 <strlen+0x90>
    f590:	2005883a 	mov	r2,r4
    f594:	00000206 	br	f5a0 <strlen+0x20>
    f598:	10c00007 	ldb	r3,0(r2)
    f59c:	18001826 	beq	r3,zero,f600 <strlen+0x80>
    f5a0:	10800044 	addi	r2,r2,1
    f5a4:	10c000cc 	andi	r3,r2,3
    f5a8:	183ffb1e 	bne	r3,zero,f598 <__alt_data_end+0xfc00f598>
    f5ac:	10c00017 	ldw	r3,0(r2)
    f5b0:	01ffbff4 	movhi	r7,65279
    f5b4:	39ffbfc4 	addi	r7,r7,-257
    f5b8:	00ca303a 	nor	r5,zero,r3
    f5bc:	01a02074 	movhi	r6,32897
    f5c0:	19c7883a 	add	r3,r3,r7
    f5c4:	31a02004 	addi	r6,r6,-32640
    f5c8:	1946703a 	and	r3,r3,r5
    f5cc:	1986703a 	and	r3,r3,r6
    f5d0:	1800091e 	bne	r3,zero,f5f8 <strlen+0x78>
    f5d4:	10800104 	addi	r2,r2,4
    f5d8:	10c00017 	ldw	r3,0(r2)
    f5dc:	19cb883a 	add	r5,r3,r7
    f5e0:	00c6303a 	nor	r3,zero,r3
    f5e4:	28c6703a 	and	r3,r5,r3
    f5e8:	1986703a 	and	r3,r3,r6
    f5ec:	183ff926 	beq	r3,zero,f5d4 <__alt_data_end+0xfc00f5d4>
    f5f0:	00000106 	br	f5f8 <strlen+0x78>
    f5f4:	10800044 	addi	r2,r2,1
    f5f8:	10c00007 	ldb	r3,0(r2)
    f5fc:	183ffd1e 	bne	r3,zero,f5f4 <__alt_data_end+0xfc00f5f4>
    f600:	1105c83a 	sub	r2,r2,r4
    f604:	f800283a 	ret
    f608:	2005883a 	mov	r2,r4
    f60c:	003fe706 	br	f5ac <__alt_data_end+0xfc00f5ac>
    f610:	0005883a 	mov	r2,zero
    f614:	f800283a 	ret

0000f618 <___svfprintf_internal_r>:
    f618:	deffb704 	addi	sp,sp,-292
    f61c:	dfc04815 	stw	ra,288(sp)
    f620:	ddc04615 	stw	r23,280(sp)
    f624:	d9402d15 	stw	r5,180(sp)
    f628:	d9003915 	stw	r4,228(sp)
    f62c:	302f883a 	mov	r23,r6
    f630:	d9c02e15 	stw	r7,184(sp)
    f634:	df004715 	stw	fp,284(sp)
    f638:	dd804515 	stw	r22,276(sp)
    f63c:	dd404415 	stw	r21,272(sp)
    f640:	dd004315 	stw	r20,268(sp)
    f644:	dcc04215 	stw	r19,264(sp)
    f648:	dc804115 	stw	r18,260(sp)
    f64c:	dc404015 	stw	r17,256(sp)
    f650:	dc003f15 	stw	r16,252(sp)
    f654:	001681c0 	call	1681c <_localeconv_r>
    f658:	10800017 	ldw	r2,0(r2)
    f65c:	1009883a 	mov	r4,r2
    f660:	d8803415 	stw	r2,208(sp)
    f664:	000f5800 	call	f580 <strlen>
    f668:	d8c02d17 	ldw	r3,180(sp)
    f66c:	d8803815 	stw	r2,224(sp)
    f670:	1880030b 	ldhu	r2,12(r3)
    f674:	1080200c 	andi	r2,r2,128
    f678:	10000226 	beq	r2,zero,f684 <___svfprintf_internal_r+0x6c>
    f67c:	18800417 	ldw	r2,16(r3)
    f680:	1006b126 	beq	r2,zero,11148 <___svfprintf_internal_r+0x1b30>
    f684:	dcc03917 	ldw	r19,228(sp)
    f688:	d8c00404 	addi	r3,sp,16
    f68c:	054000f4 	movhi	r21,3
    f690:	d9001e04 	addi	r4,sp,120
    f694:	ad6a8a84 	addi	r21,r21,-21974
    f698:	d8c01e15 	stw	r3,120(sp)
    f69c:	d8002015 	stw	zero,128(sp)
    f6a0:	d8001f15 	stw	zero,124(sp)
    f6a4:	d8003315 	stw	zero,204(sp)
    f6a8:	d8003615 	stw	zero,216(sp)
    f6ac:	d8003715 	stw	zero,220(sp)
    f6b0:	1811883a 	mov	r8,r3
    f6b4:	d8003a15 	stw	zero,232(sp)
    f6b8:	d8003b15 	stw	zero,236(sp)
    f6bc:	d8002f15 	stw	zero,188(sp)
    f6c0:	d9002815 	stw	r4,160(sp)
    f6c4:	b8800007 	ldb	r2,0(r23)
    f6c8:	10027726 	beq	r2,zero,100a8 <___svfprintf_internal_r+0xa90>
    f6cc:	00c00944 	movi	r3,37
    f6d0:	b823883a 	mov	r17,r23
    f6d4:	10c0021e 	bne	r2,r3,f6e0 <___svfprintf_internal_r+0xc8>
    f6d8:	00001406 	br	f72c <___svfprintf_internal_r+0x114>
    f6dc:	10c00326 	beq	r2,r3,f6ec <___svfprintf_internal_r+0xd4>
    f6e0:	8c400044 	addi	r17,r17,1
    f6e4:	88800007 	ldb	r2,0(r17)
    f6e8:	103ffc1e 	bne	r2,zero,f6dc <__alt_data_end+0xfc00f6dc>
    f6ec:	8de1c83a 	sub	r16,r17,r23
    f6f0:	80000e26 	beq	r16,zero,f72c <___svfprintf_internal_r+0x114>
    f6f4:	d8c02017 	ldw	r3,128(sp)
    f6f8:	d8801f17 	ldw	r2,124(sp)
    f6fc:	45c00015 	stw	r23,0(r8)
    f700:	1c07883a 	add	r3,r3,r16
    f704:	10800044 	addi	r2,r2,1
    f708:	d8c02015 	stw	r3,128(sp)
    f70c:	44000115 	stw	r16,4(r8)
    f710:	d8801f15 	stw	r2,124(sp)
    f714:	00c001c4 	movi	r3,7
    f718:	18809916 	blt	r3,r2,f980 <___svfprintf_internal_r+0x368>
    f71c:	42000204 	addi	r8,r8,8
    f720:	d9402f17 	ldw	r5,188(sp)
    f724:	2c0b883a 	add	r5,r5,r16
    f728:	d9402f15 	stw	r5,188(sp)
    f72c:	88800007 	ldb	r2,0(r17)
    f730:	10009a26 	beq	r2,zero,f99c <___svfprintf_internal_r+0x384>
    f734:	8dc00044 	addi	r23,r17,1
    f738:	8c400047 	ldb	r17,1(r17)
    f73c:	0021883a 	mov	r16,zero
    f740:	00bfffc4 	movi	r2,-1
    f744:	0025883a 	mov	r18,zero
    f748:	dc002905 	stb	r16,164(sp)
    f74c:	d8002785 	stb	zero,158(sp)
    f750:	d8002b05 	stb	zero,172(sp)
    f754:	d8802a15 	stw	r2,168(sp)
    f758:	d8003115 	stw	zero,196(sp)
    f75c:	05001604 	movi	r20,88
    f760:	05800244 	movi	r22,9
    f764:	4039883a 	mov	fp,r8
    f768:	9021883a 	mov	r16,r18
    f76c:	bdc00044 	addi	r23,r23,1
    f770:	88bff804 	addi	r2,r17,-32
    f774:	a0831e36 	bltu	r20,r2,103f0 <___svfprintf_internal_r+0xdd8>
    f778:	100490ba 	slli	r2,r2,2
    f77c:	00c00074 	movhi	r3,1
    f780:	18fde404 	addi	r3,r3,-2160
    f784:	10c5883a 	add	r2,r2,r3
    f788:	10800017 	ldw	r2,0(r2)
    f78c:	1000683a 	jmp	r2
    f790:	00010338 	rdprs	zero,zero,1036
    f794:	000103f0 	cmpltui	zero,zero,1039
    f798:	000103f0 	cmpltui	zero,zero,1039
    f79c:	0001032c 	andhi	zero,zero,1036
    f7a0:	000103f0 	cmpltui	zero,zero,1039
    f7a4:	000103f0 	cmpltui	zero,zero,1039
    f7a8:	000103f0 	cmpltui	zero,zero,1039
    f7ac:	000103f0 	cmpltui	zero,zero,1039
    f7b0:	000103f0 	cmpltui	zero,zero,1039
    f7b4:	000103f0 	cmpltui	zero,zero,1039
    f7b8:	0000f9f8 	rdprs	zero,zero,999
    f7bc:	0001023c 	xorhi	zero,zero,1032
    f7c0:	000103f0 	cmpltui	zero,zero,1039
    f7c4:	0000f904 	movi	zero,996
    f7c8:	0000fa1c 	xori	zero,zero,1000
    f7cc:	000103f0 	cmpltui	zero,zero,1039
    f7d0:	0000faa8 	cmpgeui	zero,zero,1002
    f7d4:	0000fa6c 	andhi	zero,zero,1001
    f7d8:	0000fa6c 	andhi	zero,zero,1001
    f7dc:	0000fa6c 	andhi	zero,zero,1001
    f7e0:	0000fa6c 	andhi	zero,zero,1001
    f7e4:	0000fa6c 	andhi	zero,zero,1001
    f7e8:	0000fa6c 	andhi	zero,zero,1001
    f7ec:	0000fa6c 	andhi	zero,zero,1001
    f7f0:	0000fa6c 	andhi	zero,zero,1001
    f7f4:	0000fa6c 	andhi	zero,zero,1001
    f7f8:	000103f0 	cmpltui	zero,zero,1039
    f7fc:	000103f0 	cmpltui	zero,zero,1039
    f800:	000103f0 	cmpltui	zero,zero,1039
    f804:	000103f0 	cmpltui	zero,zero,1039
    f808:	000103f0 	cmpltui	zero,zero,1039
    f80c:	000103f0 	cmpltui	zero,zero,1039
    f810:	000103f0 	cmpltui	zero,zero,1039
    f814:	000103f0 	cmpltui	zero,zero,1039
    f818:	000103f0 	cmpltui	zero,zero,1039
    f81c:	000103f0 	cmpltui	zero,zero,1039
    f820:	0000fb6c 	andhi	zero,zero,1005
    f824:	0000fab4 	movhi	zero,1002
    f828:	000103f0 	cmpltui	zero,zero,1039
    f82c:	0000fab4 	movhi	zero,1002
    f830:	000103f0 	cmpltui	zero,zero,1039
    f834:	000103f0 	cmpltui	zero,zero,1039
    f838:	000103f0 	cmpltui	zero,zero,1039
    f83c:	000103f0 	cmpltui	zero,zero,1039
    f840:	0000fb60 	cmpeqi	zero,zero,1005
    f844:	000103f0 	cmpltui	zero,zero,1039
    f848:	000103f0 	cmpltui	zero,zero,1039
    f84c:	0000fc34 	movhi	zero,1008
    f850:	000103f0 	cmpltui	zero,zero,1039
    f854:	000103f0 	cmpltui	zero,zero,1039
    f858:	000103f0 	cmpltui	zero,zero,1039
    f85c:	000103f0 	cmpltui	zero,zero,1039
    f860:	000103f0 	cmpltui	zero,zero,1039
    f864:	000100b0 	cmpltui	zero,zero,1026
    f868:	000103f0 	cmpltui	zero,zero,1039
    f86c:	000103f0 	cmpltui	zero,zero,1039
    f870:	0001011c 	xori	zero,zero,1028
    f874:	000103f0 	cmpltui	zero,zero,1039
    f878:	000103f0 	cmpltui	zero,zero,1039
    f87c:	000103f0 	cmpltui	zero,zero,1039
    f880:	000103f0 	cmpltui	zero,zero,1039
    f884:	000103f0 	cmpltui	zero,zero,1039
    f888:	000103f0 	cmpltui	zero,zero,1039
    f88c:	000103f0 	cmpltui	zero,zero,1039
    f890:	000103f0 	cmpltui	zero,zero,1039
    f894:	000103f0 	cmpltui	zero,zero,1039
    f898:	000103f0 	cmpltui	zero,zero,1039
    f89c:	000101d8 	cmpnei	zero,zero,1031
    f8a0:	00010358 	cmpnei	zero,zero,1037
    f8a4:	0000fab4 	movhi	zero,1002
    f8a8:	0000fab4 	movhi	zero,1002
    f8ac:	0000fab4 	movhi	zero,1002
    f8b0:	000103cc 	andi	zero,zero,1039
    f8b4:	00010358 	cmpnei	zero,zero,1037
    f8b8:	000103f0 	cmpltui	zero,zero,1039
    f8bc:	000103f0 	cmpltui	zero,zero,1039
    f8c0:	00010378 	rdprs	zero,zero,1037
    f8c4:	000103f0 	cmpltui	zero,zero,1039
    f8c8:	0001038c 	andi	zero,zero,1038
    f8cc:	0001021c 	xori	zero,zero,1032
    f8d0:	0000f910 	cmplti	zero,zero,996
    f8d4:	00010254 	movui	zero,1033
    f8d8:	000103f0 	cmpltui	zero,zero,1039
    f8dc:	00010260 	cmpeqi	zero,zero,1033
    f8e0:	000103f0 	cmpltui	zero,zero,1039
    f8e4:	000102c4 	movi	zero,1035
    f8e8:	000103f0 	cmpltui	zero,zero,1039
    f8ec:	000103f0 	cmpltui	zero,zero,1039
    f8f0:	000102e4 	muli	zero,zero,1035
    f8f4:	d8c03117 	ldw	r3,196(sp)
    f8f8:	d8802e15 	stw	r2,184(sp)
    f8fc:	00c7c83a 	sub	r3,zero,r3
    f900:	d8c03115 	stw	r3,196(sp)
    f904:	84000114 	ori	r16,r16,4
    f908:	bc400007 	ldb	r17,0(r23)
    f90c:	003f9706 	br	f76c <__alt_data_end+0xfc00f76c>
    f910:	00800c04 	movi	r2,48
    f914:	d8802705 	stb	r2,156(sp)
    f918:	00801e04 	movi	r2,120
    f91c:	d8802745 	stb	r2,157(sp)
    f920:	d9002a17 	ldw	r4,168(sp)
    f924:	d8802e17 	ldw	r2,184(sp)
    f928:	d8002785 	stb	zero,158(sp)
    f92c:	e011883a 	mov	r8,fp
    f930:	10c00104 	addi	r3,r2,4
    f934:	15000017 	ldw	r20,0(r2)
    f938:	002d883a 	mov	r22,zero
    f93c:	80800094 	ori	r2,r16,2
    f940:	2002b616 	blt	r4,zero,1041c <___svfprintf_internal_r+0xe04>
    f944:	00bfdfc4 	movi	r2,-129
    f948:	80a4703a 	and	r18,r16,r2
    f94c:	d8c02e15 	stw	r3,184(sp)
    f950:	94800094 	ori	r18,r18,2
    f954:	a002a01e 	bne	r20,zero,103d8 <___svfprintf_internal_r+0xdc0>
    f958:	014000f4 	movhi	r5,3
    f95c:	296a8304 	addi	r5,r5,-22004
    f960:	d9403a15 	stw	r5,232(sp)
    f964:	04401e04 	movi	r17,120
    f968:	d8c02a17 	ldw	r3,168(sp)
    f96c:	0039883a 	mov	fp,zero
    f970:	1801e626 	beq	r3,zero,1010c <___svfprintf_internal_r+0xaf4>
    f974:	0029883a 	mov	r20,zero
    f978:	002d883a 	mov	r22,zero
    f97c:	00020506 	br	10194 <___svfprintf_internal_r+0xb7c>
    f980:	d9402d17 	ldw	r5,180(sp)
    f984:	d9801e04 	addi	r6,sp,120
    f988:	9809883a 	mov	r4,r19
    f98c:	001857c0 	call	1857c <__ssprint_r>
    f990:	1000081e 	bne	r2,zero,f9b4 <___svfprintf_internal_r+0x39c>
    f994:	da000404 	addi	r8,sp,16
    f998:	003f6106 	br	f720 <__alt_data_end+0xfc00f720>
    f99c:	d8802017 	ldw	r2,128(sp)
    f9a0:	10000426 	beq	r2,zero,f9b4 <___svfprintf_internal_r+0x39c>
    f9a4:	d9402d17 	ldw	r5,180(sp)
    f9a8:	d9003917 	ldw	r4,228(sp)
    f9ac:	d9801e04 	addi	r6,sp,120
    f9b0:	001857c0 	call	1857c <__ssprint_r>
    f9b4:	d8802d17 	ldw	r2,180(sp)
    f9b8:	10c0030b 	ldhu	r3,12(r2)
    f9bc:	d8802f17 	ldw	r2,188(sp)
    f9c0:	18c0100c 	andi	r3,r3,64
    f9c4:	1806251e 	bne	r3,zero,1125c <___svfprintf_internal_r+0x1c44>
    f9c8:	dfc04817 	ldw	ra,288(sp)
    f9cc:	df004717 	ldw	fp,284(sp)
    f9d0:	ddc04617 	ldw	r23,280(sp)
    f9d4:	dd804517 	ldw	r22,276(sp)
    f9d8:	dd404417 	ldw	r21,272(sp)
    f9dc:	dd004317 	ldw	r20,268(sp)
    f9e0:	dcc04217 	ldw	r19,264(sp)
    f9e4:	dc804117 	ldw	r18,260(sp)
    f9e8:	dc404017 	ldw	r17,256(sp)
    f9ec:	dc003f17 	ldw	r16,252(sp)
    f9f0:	dec04904 	addi	sp,sp,292
    f9f4:	f800283a 	ret
    f9f8:	d9002e17 	ldw	r4,184(sp)
    f9fc:	d9402e17 	ldw	r5,184(sp)
    fa00:	21000017 	ldw	r4,0(r4)
    fa04:	28800104 	addi	r2,r5,4
    fa08:	d9003115 	stw	r4,196(sp)
    fa0c:	203fb916 	blt	r4,zero,f8f4 <__alt_data_end+0xfc00f8f4>
    fa10:	d8802e15 	stw	r2,184(sp)
    fa14:	bc400007 	ldb	r17,0(r23)
    fa18:	003f5406 	br	f76c <__alt_data_end+0xfc00f76c>
    fa1c:	bc400007 	ldb	r17,0(r23)
    fa20:	01000a84 	movi	r4,42
    fa24:	b8c00044 	addi	r3,r23,1
    fa28:	89076926 	beq	r17,r4,117d0 <___svfprintf_internal_r+0x21b8>
    fa2c:	8cbff404 	addi	r18,r17,-48
    fa30:	b486b936 	bltu	r22,r18,11518 <___svfprintf_internal_r+0x1f00>
    fa34:	0009883a 	mov	r4,zero
    fa38:	1823883a 	mov	r17,r3
    fa3c:	01400284 	movi	r5,10
    fa40:	000cf040 	call	cf04 <__mulsi3>
    fa44:	88c00007 	ldb	r3,0(r17)
    fa48:	1489883a 	add	r4,r2,r18
    fa4c:	8dc00044 	addi	r23,r17,1
    fa50:	1cbff404 	addi	r18,r3,-48
    fa54:	b823883a 	mov	r17,r23
    fa58:	b4bff82e 	bgeu	r22,r18,fa3c <__alt_data_end+0xfc00fa3c>
    fa5c:	1823883a 	mov	r17,r3
    fa60:	20060416 	blt	r4,zero,11274 <___svfprintf_internal_r+0x1c5c>
    fa64:	d9002a15 	stw	r4,168(sp)
    fa68:	003f4106 	br	f770 <__alt_data_end+0xfc00f770>
    fa6c:	8cbff404 	addi	r18,r17,-48
    fa70:	d8003115 	stw	zero,196(sp)
    fa74:	0009883a 	mov	r4,zero
    fa78:	b823883a 	mov	r17,r23
    fa7c:	01400284 	movi	r5,10
    fa80:	000cf040 	call	cf04 <__mulsi3>
    fa84:	88c00007 	ldb	r3,0(r17)
    fa88:	9089883a 	add	r4,r18,r2
    fa8c:	bdc00044 	addi	r23,r23,1
    fa90:	1cbff404 	addi	r18,r3,-48
    fa94:	b823883a 	mov	r17,r23
    fa98:	b4bff82e 	bgeu	r22,r18,fa7c <__alt_data_end+0xfc00fa7c>
    fa9c:	1823883a 	mov	r17,r3
    faa0:	d9003115 	stw	r4,196(sp)
    faa4:	003f3206 	br	f770 <__alt_data_end+0xfc00f770>
    faa8:	84002014 	ori	r16,r16,128
    faac:	bc400007 	ldb	r17,0(r23)
    fab0:	003f2e06 	br	f76c <__alt_data_end+0xfc00f76c>
    fab4:	8025883a 	mov	r18,r16
    fab8:	dc002903 	ldbu	r16,164(sp)
    fabc:	e011883a 	mov	r8,fp
    fac0:	84003fcc 	andi	r16,r16,255
    fac4:	8007721e 	bne	r16,zero,11890 <___svfprintf_internal_r+0x2278>
    fac8:	9080020c 	andi	r2,r18,8
    facc:	1004a526 	beq	r2,zero,10d64 <___svfprintf_internal_r+0x174c>
    fad0:	d9002e17 	ldw	r4,184(sp)
    fad4:	d9402e17 	ldw	r5,184(sp)
    fad8:	d8802e17 	ldw	r2,184(sp)
    fadc:	21000017 	ldw	r4,0(r4)
    fae0:	29400117 	ldw	r5,4(r5)
    fae4:	10800204 	addi	r2,r2,8
    fae8:	d9003615 	stw	r4,216(sp)
    faec:	d9403715 	stw	r5,220(sp)
    faf0:	d8802e15 	stw	r2,184(sp)
    faf4:	d9003617 	ldw	r4,216(sp)
    faf8:	d9403717 	ldw	r5,220(sp)
    fafc:	da003e15 	stw	r8,248(sp)
    fb00:	04000044 	movi	r16,1
    fb04:	00183cc0 	call	183cc <__fpclassifyd>
    fb08:	da003e17 	ldw	r8,248(sp)
    fb0c:	1404731e 	bne	r2,r16,10cdc <___svfprintf_internal_r+0x16c4>
    fb10:	d9003617 	ldw	r4,216(sp)
    fb14:	d9403717 	ldw	r5,220(sp)
    fb18:	000d883a 	mov	r6,zero
    fb1c:	000f883a 	mov	r7,zero
    fb20:	001dad00 	call	1dad0 <__ledf2>
    fb24:	da003e17 	ldw	r8,248(sp)
    fb28:	10061b16 	blt	r2,zero,11398 <___svfprintf_internal_r+0x1d80>
    fb2c:	df002783 	ldbu	fp,158(sp)
    fb30:	008011c4 	movi	r2,71
    fb34:	1445810e 	bge	r2,r17,1113c <___svfprintf_internal_r+0x1b24>
    fb38:	040000f4 	movhi	r16,3
    fb3c:	842a7b04 	addi	r16,r16,-22036
    fb40:	00c000c4 	movi	r3,3
    fb44:	00bfdfc4 	movi	r2,-129
    fb48:	d8c02915 	stw	r3,164(sp)
    fb4c:	90a4703a 	and	r18,r18,r2
    fb50:	d8c02b15 	stw	r3,172(sp)
    fb54:	d8002a15 	stw	zero,168(sp)
    fb58:	d8003215 	stw	zero,200(sp)
    fb5c:	00006c06 	br	fd10 <___svfprintf_internal_r+0x6f8>
    fb60:	84000214 	ori	r16,r16,8
    fb64:	bc400007 	ldb	r17,0(r23)
    fb68:	003f0006 	br	f76c <__alt_data_end+0xfc00f76c>
    fb6c:	8025883a 	mov	r18,r16
    fb70:	dc002903 	ldbu	r16,164(sp)
    fb74:	e011883a 	mov	r8,fp
    fb78:	84003fcc 	andi	r16,r16,255
    fb7c:	80073f1e 	bne	r16,zero,1187c <___svfprintf_internal_r+0x2264>
    fb80:	94800414 	ori	r18,r18,16
    fb84:	9080080c 	andi	r2,r18,32
    fb88:	1003bb26 	beq	r2,zero,10a78 <___svfprintf_internal_r+0x1460>
    fb8c:	d9002e17 	ldw	r4,184(sp)
    fb90:	20800117 	ldw	r2,4(r4)
    fb94:	25000017 	ldw	r20,0(r4)
    fb98:	21000204 	addi	r4,r4,8
    fb9c:	d9002e15 	stw	r4,184(sp)
    fba0:	102d883a 	mov	r22,r2
    fba4:	1003bd16 	blt	r2,zero,10a9c <___svfprintf_internal_r+0x1484>
    fba8:	d9002a17 	ldw	r4,168(sp)
    fbac:	df002783 	ldbu	fp,158(sp)
    fbb0:	2003d016 	blt	r4,zero,10af4 <___svfprintf_internal_r+0x14dc>
    fbb4:	00ffdfc4 	movi	r3,-129
    fbb8:	a584b03a 	or	r2,r20,r22
    fbbc:	90e4703a 	and	r18,r18,r3
    fbc0:	10015026 	beq	r2,zero,10104 <___svfprintf_internal_r+0xaec>
    fbc4:	b0037026 	beq	r22,zero,10988 <___svfprintf_internal_r+0x1370>
    fbc8:	dc402915 	stw	r17,164(sp)
    fbcc:	dc001e04 	addi	r16,sp,120
    fbd0:	b023883a 	mov	r17,r22
    fbd4:	402d883a 	mov	r22,r8
    fbd8:	a009883a 	mov	r4,r20
    fbdc:	880b883a 	mov	r5,r17
    fbe0:	01800284 	movi	r6,10
    fbe4:	000f883a 	mov	r7,zero
    fbe8:	001c12c0 	call	1c12c <__umoddi3>
    fbec:	10800c04 	addi	r2,r2,48
    fbf0:	843fffc4 	addi	r16,r16,-1
    fbf4:	a009883a 	mov	r4,r20
    fbf8:	880b883a 	mov	r5,r17
    fbfc:	80800005 	stb	r2,0(r16)
    fc00:	01800284 	movi	r6,10
    fc04:	000f883a 	mov	r7,zero
    fc08:	001bb300 	call	1bb30 <__udivdi3>
    fc0c:	1029883a 	mov	r20,r2
    fc10:	10c4b03a 	or	r2,r2,r3
    fc14:	1823883a 	mov	r17,r3
    fc18:	103fef1e 	bne	r2,zero,fbd8 <__alt_data_end+0xfc00fbd8>
    fc1c:	d8c02817 	ldw	r3,160(sp)
    fc20:	dc402917 	ldw	r17,164(sp)
    fc24:	b011883a 	mov	r8,r22
    fc28:	1c07c83a 	sub	r3,r3,r16
    fc2c:	d8c02b15 	stw	r3,172(sp)
    fc30:	00003106 	br	fcf8 <___svfprintf_internal_r+0x6e0>
    fc34:	8025883a 	mov	r18,r16
    fc38:	dc002903 	ldbu	r16,164(sp)
    fc3c:	e011883a 	mov	r8,fp
    fc40:	84003fcc 	andi	r16,r16,255
    fc44:	80070a1e 	bne	r16,zero,11870 <___svfprintf_internal_r+0x2258>
    fc48:	94800414 	ori	r18,r18,16
    fc4c:	9080080c 	andi	r2,r18,32
    fc50:	1002f626 	beq	r2,zero,1082c <___svfprintf_internal_r+0x1214>
    fc54:	d9002e17 	ldw	r4,184(sp)
    fc58:	d9402a17 	ldw	r5,168(sp)
    fc5c:	d8002785 	stb	zero,158(sp)
    fc60:	20800204 	addi	r2,r4,8
    fc64:	25000017 	ldw	r20,0(r4)
    fc68:	25800117 	ldw	r22,4(r4)
    fc6c:	28043716 	blt	r5,zero,10d4c <___svfprintf_internal_r+0x1734>
    fc70:	013fdfc4 	movi	r4,-129
    fc74:	a586b03a 	or	r3,r20,r22
    fc78:	d8802e15 	stw	r2,184(sp)
    fc7c:	9124703a 	and	r18,r18,r4
    fc80:	1802f71e 	bne	r3,zero,10860 <___svfprintf_internal_r+0x1248>
    fc84:	d9402a17 	ldw	r5,168(sp)
    fc88:	0039883a 	mov	fp,zero
    fc8c:	2806df26 	beq	r5,zero,1180c <___svfprintf_internal_r+0x21f4>
    fc90:	0029883a 	mov	r20,zero
    fc94:	002d883a 	mov	r22,zero
    fc98:	dc001e04 	addi	r16,sp,120
    fc9c:	a006d0fa 	srli	r3,r20,3
    fca0:	b008977a 	slli	r4,r22,29
    fca4:	b02cd0fa 	srli	r22,r22,3
    fca8:	a50001cc 	andi	r20,r20,7
    fcac:	a0800c04 	addi	r2,r20,48
    fcb0:	843fffc4 	addi	r16,r16,-1
    fcb4:	20e8b03a 	or	r20,r4,r3
    fcb8:	80800005 	stb	r2,0(r16)
    fcbc:	a586b03a 	or	r3,r20,r22
    fcc0:	183ff61e 	bne	r3,zero,fc9c <__alt_data_end+0xfc00fc9c>
    fcc4:	90c0004c 	andi	r3,r18,1
    fcc8:	18013f26 	beq	r3,zero,101c8 <___svfprintf_internal_r+0xbb0>
    fccc:	10803fcc 	andi	r2,r2,255
    fcd0:	1080201c 	xori	r2,r2,128
    fcd4:	10bfe004 	addi	r2,r2,-128
    fcd8:	00c00c04 	movi	r3,48
    fcdc:	10c13a26 	beq	r2,r3,101c8 <___svfprintf_internal_r+0xbb0>
    fce0:	80ffffc5 	stb	r3,-1(r16)
    fce4:	d8c02817 	ldw	r3,160(sp)
    fce8:	80bfffc4 	addi	r2,r16,-1
    fcec:	1021883a 	mov	r16,r2
    fcf0:	1887c83a 	sub	r3,r3,r2
    fcf4:	d8c02b15 	stw	r3,172(sp)
    fcf8:	d8802b17 	ldw	r2,172(sp)
    fcfc:	d9002a17 	ldw	r4,168(sp)
    fd00:	1100010e 	bge	r2,r4,fd08 <___svfprintf_internal_r+0x6f0>
    fd04:	2005883a 	mov	r2,r4
    fd08:	d8802915 	stw	r2,164(sp)
    fd0c:	d8003215 	stw	zero,200(sp)
    fd10:	e7003fcc 	andi	fp,fp,255
    fd14:	e700201c 	xori	fp,fp,128
    fd18:	e73fe004 	addi	fp,fp,-128
    fd1c:	e0000326 	beq	fp,zero,fd2c <___svfprintf_internal_r+0x714>
    fd20:	d8c02917 	ldw	r3,164(sp)
    fd24:	18c00044 	addi	r3,r3,1
    fd28:	d8c02915 	stw	r3,164(sp)
    fd2c:	90c0008c 	andi	r3,r18,2
    fd30:	d8c02c15 	stw	r3,176(sp)
    fd34:	18000326 	beq	r3,zero,fd44 <___svfprintf_internal_r+0x72c>
    fd38:	d8c02917 	ldw	r3,164(sp)
    fd3c:	18c00084 	addi	r3,r3,2
    fd40:	d8c02915 	stw	r3,164(sp)
    fd44:	90c0210c 	andi	r3,r18,132
    fd48:	d8c03015 	stw	r3,192(sp)
    fd4c:	1801c31e 	bne	r3,zero,1045c <___svfprintf_internal_r+0xe44>
    fd50:	d9003117 	ldw	r4,196(sp)
    fd54:	d8c02917 	ldw	r3,164(sp)
    fd58:	20e9c83a 	sub	r20,r4,r3
    fd5c:	0501bf0e 	bge	zero,r20,1045c <___svfprintf_internal_r+0xe44>
    fd60:	02400404 	movi	r9,16
    fd64:	d8c02017 	ldw	r3,128(sp)
    fd68:	d8801f17 	ldw	r2,124(sp)
    fd6c:	4d053d0e 	bge	r9,r20,11264 <___svfprintf_internal_r+0x1c4c>
    fd70:	014000f4 	movhi	r5,3
    fd74:	296a8e84 	addi	r5,r5,-21958
    fd78:	dc403c15 	stw	r17,240(sp)
    fd7c:	d9403515 	stw	r5,212(sp)
    fd80:	a023883a 	mov	r17,r20
    fd84:	482d883a 	mov	r22,r9
    fd88:	9029883a 	mov	r20,r18
    fd8c:	070001c4 	movi	fp,7
    fd90:	8025883a 	mov	r18,r16
    fd94:	dc002d17 	ldw	r16,180(sp)
    fd98:	00000306 	br	fda8 <___svfprintf_internal_r+0x790>
    fd9c:	8c7ffc04 	addi	r17,r17,-16
    fda0:	42000204 	addi	r8,r8,8
    fda4:	b440130e 	bge	r22,r17,fdf4 <___svfprintf_internal_r+0x7dc>
    fda8:	010000f4 	movhi	r4,3
    fdac:	18c00404 	addi	r3,r3,16
    fdb0:	10800044 	addi	r2,r2,1
    fdb4:	212a8e84 	addi	r4,r4,-21958
    fdb8:	41000015 	stw	r4,0(r8)
    fdbc:	45800115 	stw	r22,4(r8)
    fdc0:	d8c02015 	stw	r3,128(sp)
    fdc4:	d8801f15 	stw	r2,124(sp)
    fdc8:	e0bff40e 	bge	fp,r2,fd9c <__alt_data_end+0xfc00fd9c>
    fdcc:	d9801e04 	addi	r6,sp,120
    fdd0:	800b883a 	mov	r5,r16
    fdd4:	9809883a 	mov	r4,r19
    fdd8:	001857c0 	call	1857c <__ssprint_r>
    fddc:	103ef51e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
    fde0:	8c7ffc04 	addi	r17,r17,-16
    fde4:	d8c02017 	ldw	r3,128(sp)
    fde8:	d8801f17 	ldw	r2,124(sp)
    fdec:	da000404 	addi	r8,sp,16
    fdf0:	b47fed16 	blt	r22,r17,fda8 <__alt_data_end+0xfc00fda8>
    fdf4:	9021883a 	mov	r16,r18
    fdf8:	a025883a 	mov	r18,r20
    fdfc:	8829883a 	mov	r20,r17
    fe00:	dc403c17 	ldw	r17,240(sp)
    fe04:	d9403517 	ldw	r5,212(sp)
    fe08:	a0c7883a 	add	r3,r20,r3
    fe0c:	10800044 	addi	r2,r2,1
    fe10:	41400015 	stw	r5,0(r8)
    fe14:	45000115 	stw	r20,4(r8)
    fe18:	d8c02015 	stw	r3,128(sp)
    fe1c:	d8801f15 	stw	r2,124(sp)
    fe20:	010001c4 	movi	r4,7
    fe24:	2082c116 	blt	r4,r2,1092c <___svfprintf_internal_r+0x1314>
    fe28:	df002787 	ldb	fp,158(sp)
    fe2c:	42000204 	addi	r8,r8,8
    fe30:	e0000c26 	beq	fp,zero,fe64 <___svfprintf_internal_r+0x84c>
    fe34:	d8801f17 	ldw	r2,124(sp)
    fe38:	d9002784 	addi	r4,sp,158
    fe3c:	18c00044 	addi	r3,r3,1
    fe40:	10800044 	addi	r2,r2,1
    fe44:	41000015 	stw	r4,0(r8)
    fe48:	01000044 	movi	r4,1
    fe4c:	41000115 	stw	r4,4(r8)
    fe50:	d8c02015 	stw	r3,128(sp)
    fe54:	d8801f15 	stw	r2,124(sp)
    fe58:	010001c4 	movi	r4,7
    fe5c:	20825a16 	blt	r4,r2,107c8 <___svfprintf_internal_r+0x11b0>
    fe60:	42000204 	addi	r8,r8,8
    fe64:	d8802c17 	ldw	r2,176(sp)
    fe68:	10000c26 	beq	r2,zero,fe9c <___svfprintf_internal_r+0x884>
    fe6c:	d8801f17 	ldw	r2,124(sp)
    fe70:	d9002704 	addi	r4,sp,156
    fe74:	18c00084 	addi	r3,r3,2
    fe78:	10800044 	addi	r2,r2,1
    fe7c:	41000015 	stw	r4,0(r8)
    fe80:	01000084 	movi	r4,2
    fe84:	41000115 	stw	r4,4(r8)
    fe88:	d8c02015 	stw	r3,128(sp)
    fe8c:	d8801f15 	stw	r2,124(sp)
    fe90:	010001c4 	movi	r4,7
    fe94:	20825416 	blt	r4,r2,107e8 <___svfprintf_internal_r+0x11d0>
    fe98:	42000204 	addi	r8,r8,8
    fe9c:	d9003017 	ldw	r4,192(sp)
    fea0:	00802004 	movi	r2,128
    fea4:	2081b926 	beq	r4,r2,1058c <___svfprintf_internal_r+0xf74>
    fea8:	d9402a17 	ldw	r5,168(sp)
    feac:	d8802b17 	ldw	r2,172(sp)
    feb0:	28adc83a 	sub	r22,r5,r2
    feb4:	05802f0e 	bge	zero,r22,ff74 <___svfprintf_internal_r+0x95c>
    feb8:	07000404 	movi	fp,16
    febc:	d8801f17 	ldw	r2,124(sp)
    fec0:	e583e20e 	bge	fp,r22,10e4c <___svfprintf_internal_r+0x1834>
    fec4:	014000f4 	movhi	r5,3
    fec8:	296a8a84 	addi	r5,r5,-21974
    fecc:	dc402a15 	stw	r17,168(sp)
    fed0:	d9402c15 	stw	r5,176(sp)
    fed4:	b023883a 	mov	r17,r22
    fed8:	050001c4 	movi	r20,7
    fedc:	902d883a 	mov	r22,r18
    fee0:	8025883a 	mov	r18,r16
    fee4:	dc002d17 	ldw	r16,180(sp)
    fee8:	00000306 	br	fef8 <___svfprintf_internal_r+0x8e0>
    feec:	8c7ffc04 	addi	r17,r17,-16
    fef0:	42000204 	addi	r8,r8,8
    fef4:	e440110e 	bge	fp,r17,ff3c <___svfprintf_internal_r+0x924>
    fef8:	18c00404 	addi	r3,r3,16
    fefc:	10800044 	addi	r2,r2,1
    ff00:	45400015 	stw	r21,0(r8)
    ff04:	47000115 	stw	fp,4(r8)
    ff08:	d8c02015 	stw	r3,128(sp)
    ff0c:	d8801f15 	stw	r2,124(sp)
    ff10:	a0bff60e 	bge	r20,r2,feec <__alt_data_end+0xfc00feec>
    ff14:	d9801e04 	addi	r6,sp,120
    ff18:	800b883a 	mov	r5,r16
    ff1c:	9809883a 	mov	r4,r19
    ff20:	001857c0 	call	1857c <__ssprint_r>
    ff24:	103ea31e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
    ff28:	8c7ffc04 	addi	r17,r17,-16
    ff2c:	d8c02017 	ldw	r3,128(sp)
    ff30:	d8801f17 	ldw	r2,124(sp)
    ff34:	da000404 	addi	r8,sp,16
    ff38:	e47fef16 	blt	fp,r17,fef8 <__alt_data_end+0xfc00fef8>
    ff3c:	9021883a 	mov	r16,r18
    ff40:	b025883a 	mov	r18,r22
    ff44:	882d883a 	mov	r22,r17
    ff48:	dc402a17 	ldw	r17,168(sp)
    ff4c:	d9002c17 	ldw	r4,176(sp)
    ff50:	1d87883a 	add	r3,r3,r22
    ff54:	10800044 	addi	r2,r2,1
    ff58:	41000015 	stw	r4,0(r8)
    ff5c:	45800115 	stw	r22,4(r8)
    ff60:	d8c02015 	stw	r3,128(sp)
    ff64:	d8801f15 	stw	r2,124(sp)
    ff68:	010001c4 	movi	r4,7
    ff6c:	20820e16 	blt	r4,r2,107a8 <___svfprintf_internal_r+0x1190>
    ff70:	42000204 	addi	r8,r8,8
    ff74:	9080400c 	andi	r2,r18,256
    ff78:	10013a1e 	bne	r2,zero,10464 <___svfprintf_internal_r+0xe4c>
    ff7c:	d9402b17 	ldw	r5,172(sp)
    ff80:	d8801f17 	ldw	r2,124(sp)
    ff84:	44000015 	stw	r16,0(r8)
    ff88:	1947883a 	add	r3,r3,r5
    ff8c:	10800044 	addi	r2,r2,1
    ff90:	41400115 	stw	r5,4(r8)
    ff94:	d8c02015 	stw	r3,128(sp)
    ff98:	d8801f15 	stw	r2,124(sp)
    ff9c:	010001c4 	movi	r4,7
    ffa0:	2081f316 	blt	r4,r2,10770 <___svfprintf_internal_r+0x1158>
    ffa4:	42000204 	addi	r8,r8,8
    ffa8:	9480010c 	andi	r18,r18,4
    ffac:	90003226 	beq	r18,zero,10078 <___svfprintf_internal_r+0xa60>
    ffb0:	d9403117 	ldw	r5,196(sp)
    ffb4:	d8802917 	ldw	r2,164(sp)
    ffb8:	28a1c83a 	sub	r16,r5,r2
    ffbc:	04002e0e 	bge	zero,r16,10078 <___svfprintf_internal_r+0xa60>
    ffc0:	04400404 	movi	r17,16
    ffc4:	d8801f17 	ldw	r2,124(sp)
    ffc8:	8c04db0e 	bge	r17,r16,11338 <___svfprintf_internal_r+0x1d20>
    ffcc:	014000f4 	movhi	r5,3
    ffd0:	296a8e84 	addi	r5,r5,-21958
    ffd4:	d9403515 	stw	r5,212(sp)
    ffd8:	048001c4 	movi	r18,7
    ffdc:	dd002d17 	ldw	r20,180(sp)
    ffe0:	00000306 	br	fff0 <___svfprintf_internal_r+0x9d8>
    ffe4:	843ffc04 	addi	r16,r16,-16
    ffe8:	42000204 	addi	r8,r8,8
    ffec:	8c00130e 	bge	r17,r16,1003c <___svfprintf_internal_r+0xa24>
    fff0:	010000f4 	movhi	r4,3
    fff4:	18c00404 	addi	r3,r3,16
    fff8:	10800044 	addi	r2,r2,1
    fffc:	212a8e84 	addi	r4,r4,-21958
   10000:	41000015 	stw	r4,0(r8)
   10004:	44400115 	stw	r17,4(r8)
   10008:	d8c02015 	stw	r3,128(sp)
   1000c:	d8801f15 	stw	r2,124(sp)
   10010:	90bff40e 	bge	r18,r2,ffe4 <__alt_data_end+0xfc00ffe4>
   10014:	d9801e04 	addi	r6,sp,120
   10018:	a00b883a 	mov	r5,r20
   1001c:	9809883a 	mov	r4,r19
   10020:	001857c0 	call	1857c <__ssprint_r>
   10024:	103e631e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10028:	843ffc04 	addi	r16,r16,-16
   1002c:	d8c02017 	ldw	r3,128(sp)
   10030:	d8801f17 	ldw	r2,124(sp)
   10034:	da000404 	addi	r8,sp,16
   10038:	8c3fed16 	blt	r17,r16,fff0 <__alt_data_end+0xfc00fff0>
   1003c:	d9403517 	ldw	r5,212(sp)
   10040:	1c07883a 	add	r3,r3,r16
   10044:	10800044 	addi	r2,r2,1
   10048:	41400015 	stw	r5,0(r8)
   1004c:	44000115 	stw	r16,4(r8)
   10050:	d8c02015 	stw	r3,128(sp)
   10054:	d8801f15 	stw	r2,124(sp)
   10058:	010001c4 	movi	r4,7
   1005c:	2080060e 	bge	r4,r2,10078 <___svfprintf_internal_r+0xa60>
   10060:	d9402d17 	ldw	r5,180(sp)
   10064:	d9801e04 	addi	r6,sp,120
   10068:	9809883a 	mov	r4,r19
   1006c:	001857c0 	call	1857c <__ssprint_r>
   10070:	103e501e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10074:	d8c02017 	ldw	r3,128(sp)
   10078:	d8803117 	ldw	r2,196(sp)
   1007c:	d9002917 	ldw	r4,164(sp)
   10080:	1100010e 	bge	r2,r4,10088 <___svfprintf_internal_r+0xa70>
   10084:	2005883a 	mov	r2,r4
   10088:	d9402f17 	ldw	r5,188(sp)
   1008c:	288b883a 	add	r5,r5,r2
   10090:	d9402f15 	stw	r5,188(sp)
   10094:	1801be1e 	bne	r3,zero,10790 <___svfprintf_internal_r+0x1178>
   10098:	b8800007 	ldb	r2,0(r23)
   1009c:	d8001f15 	stw	zero,124(sp)
   100a0:	da000404 	addi	r8,sp,16
   100a4:	103d891e 	bne	r2,zero,f6cc <__alt_data_end+0xfc00f6cc>
   100a8:	b823883a 	mov	r17,r23
   100ac:	003d9f06 	br	f72c <__alt_data_end+0xfc00f72c>
   100b0:	8025883a 	mov	r18,r16
   100b4:	dc002903 	ldbu	r16,164(sp)
   100b8:	e011883a 	mov	r8,fp
   100bc:	84003fcc 	andi	r16,r16,255
   100c0:	8005e61e 	bne	r16,zero,1185c <___svfprintf_internal_r+0x2244>
   100c4:	94800414 	ori	r18,r18,16
   100c8:	9080080c 	andi	r2,r18,32
   100cc:	10022026 	beq	r2,zero,10950 <___svfprintf_internal_r+0x1338>
   100d0:	d9002e17 	ldw	r4,184(sp)
   100d4:	d9402a17 	ldw	r5,168(sp)
   100d8:	d8002785 	stb	zero,158(sp)
   100dc:	20c00204 	addi	r3,r4,8
   100e0:	25000017 	ldw	r20,0(r4)
   100e4:	25800117 	ldw	r22,4(r4)
   100e8:	2803ad16 	blt	r5,zero,10fa0 <___svfprintf_internal_r+0x1988>
   100ec:	013fdfc4 	movi	r4,-129
   100f0:	a584b03a 	or	r2,r20,r22
   100f4:	d8c02e15 	stw	r3,184(sp)
   100f8:	9124703a 	and	r18,r18,r4
   100fc:	0039883a 	mov	fp,zero
   10100:	103eb01e 	bne	r2,zero,fbc4 <__alt_data_end+0xfc00fbc4>
   10104:	d8802a17 	ldw	r2,168(sp)
   10108:	1002e71e 	bne	r2,zero,10ca8 <___svfprintf_internal_r+0x1690>
   1010c:	d8002a15 	stw	zero,168(sp)
   10110:	d8002b15 	stw	zero,172(sp)
   10114:	dc001e04 	addi	r16,sp,120
   10118:	003ef706 	br	fcf8 <__alt_data_end+0xfc00fcf8>
   1011c:	8025883a 	mov	r18,r16
   10120:	dc002903 	ldbu	r16,164(sp)
   10124:	e011883a 	mov	r8,fp
   10128:	84003fcc 	andi	r16,r16,255
   1012c:	8005c81e 	bne	r16,zero,11850 <___svfprintf_internal_r+0x2238>
   10130:	010000f4 	movhi	r4,3
   10134:	212a7e04 	addi	r4,r4,-22024
   10138:	d9003a15 	stw	r4,232(sp)
   1013c:	9080080c 	andi	r2,r18,32
   10140:	10007226 	beq	r2,zero,1030c <___svfprintf_internal_r+0xcf4>
   10144:	d9402e17 	ldw	r5,184(sp)
   10148:	2d000017 	ldw	r20,0(r5)
   1014c:	2d800117 	ldw	r22,4(r5)
   10150:	29400204 	addi	r5,r5,8
   10154:	d9402e15 	stw	r5,184(sp)
   10158:	9080004c 	andi	r2,r18,1
   1015c:	1001aa26 	beq	r2,zero,10808 <___svfprintf_internal_r+0x11f0>
   10160:	a584b03a 	or	r2,r20,r22
   10164:	10032526 	beq	r2,zero,10dfc <___svfprintf_internal_r+0x17e4>
   10168:	d8c02a17 	ldw	r3,168(sp)
   1016c:	00800c04 	movi	r2,48
   10170:	d8802705 	stb	r2,156(sp)
   10174:	dc402745 	stb	r17,157(sp)
   10178:	d8002785 	stb	zero,158(sp)
   1017c:	90800094 	ori	r2,r18,2
   10180:	1804a316 	blt	r3,zero,11410 <___svfprintf_internal_r+0x1df8>
   10184:	00bfdfc4 	movi	r2,-129
   10188:	90a4703a 	and	r18,r18,r2
   1018c:	94800094 	ori	r18,r18,2
   10190:	0039883a 	mov	fp,zero
   10194:	d9003a17 	ldw	r4,232(sp)
   10198:	dc001e04 	addi	r16,sp,120
   1019c:	a08003cc 	andi	r2,r20,15
   101a0:	b006973a 	slli	r3,r22,28
   101a4:	2085883a 	add	r2,r4,r2
   101a8:	a028d13a 	srli	r20,r20,4
   101ac:	10800003 	ldbu	r2,0(r2)
   101b0:	b02cd13a 	srli	r22,r22,4
   101b4:	843fffc4 	addi	r16,r16,-1
   101b8:	1d28b03a 	or	r20,r3,r20
   101bc:	80800005 	stb	r2,0(r16)
   101c0:	a584b03a 	or	r2,r20,r22
   101c4:	103ff51e 	bne	r2,zero,1019c <__alt_data_end+0xfc01019c>
   101c8:	d8c02817 	ldw	r3,160(sp)
   101cc:	1c07c83a 	sub	r3,r3,r16
   101d0:	d8c02b15 	stw	r3,172(sp)
   101d4:	003ec806 	br	fcf8 <__alt_data_end+0xfc00fcf8>
   101d8:	d8c02e17 	ldw	r3,184(sp)
   101dc:	d9002e17 	ldw	r4,184(sp)
   101e0:	8025883a 	mov	r18,r16
   101e4:	18800017 	ldw	r2,0(r3)
   101e8:	21000104 	addi	r4,r4,4
   101ec:	00c00044 	movi	r3,1
   101f0:	e011883a 	mov	r8,fp
   101f4:	d8c02915 	stw	r3,164(sp)
   101f8:	d8002785 	stb	zero,158(sp)
   101fc:	d8801405 	stb	r2,80(sp)
   10200:	d9002e15 	stw	r4,184(sp)
   10204:	d8c02b15 	stw	r3,172(sp)
   10208:	d8002a15 	stw	zero,168(sp)
   1020c:	d8003215 	stw	zero,200(sp)
   10210:	dc001404 	addi	r16,sp,80
   10214:	0039883a 	mov	fp,zero
   10218:	003ec406 	br	fd2c <__alt_data_end+0xfc00fd2c>
   1021c:	8025883a 	mov	r18,r16
   10220:	dc002903 	ldbu	r16,164(sp)
   10224:	e011883a 	mov	r8,fp
   10228:	84003fcc 	andi	r16,r16,255
   1022c:	803e8726 	beq	r16,zero,fc4c <__alt_data_end+0xfc00fc4c>
   10230:	d8c02b03 	ldbu	r3,172(sp)
   10234:	d8c02785 	stb	r3,158(sp)
   10238:	003e8406 	br	fc4c <__alt_data_end+0xfc00fc4c>
   1023c:	00c00044 	movi	r3,1
   10240:	d8c02905 	stb	r3,164(sp)
   10244:	00c00ac4 	movi	r3,43
   10248:	d8c02b05 	stb	r3,172(sp)
   1024c:	bc400007 	ldb	r17,0(r23)
   10250:	003d4606 	br	f76c <__alt_data_end+0xfc00f76c>
   10254:	84000814 	ori	r16,r16,32
   10258:	bc400007 	ldb	r17,0(r23)
   1025c:	003d4306 	br	f76c <__alt_data_end+0xfc00f76c>
   10260:	d8802e17 	ldw	r2,184(sp)
   10264:	8025883a 	mov	r18,r16
   10268:	d8002785 	stb	zero,158(sp)
   1026c:	14000017 	ldw	r16,0(r2)
   10270:	e011883a 	mov	r8,fp
   10274:	15000104 	addi	r20,r2,4
   10278:	80042126 	beq	r16,zero,11300 <___svfprintf_internal_r+0x1ce8>
   1027c:	d8c02a17 	ldw	r3,168(sp)
   10280:	1803ee16 	blt	r3,zero,1123c <___svfprintf_internal_r+0x1c24>
   10284:	180d883a 	mov	r6,r3
   10288:	000b883a 	mov	r5,zero
   1028c:	8009883a 	mov	r4,r16
   10290:	df003e15 	stw	fp,248(sp)
   10294:	0016a080 	call	16a08 <memchr>
   10298:	da003e17 	ldw	r8,248(sp)
   1029c:	10046a26 	beq	r2,zero,11448 <___svfprintf_internal_r+0x1e30>
   102a0:	1405c83a 	sub	r2,r2,r16
   102a4:	d8802b15 	stw	r2,172(sp)
   102a8:	1003ea16 	blt	r2,zero,11254 <___svfprintf_internal_r+0x1c3c>
   102ac:	df002783 	ldbu	fp,158(sp)
   102b0:	d8802915 	stw	r2,164(sp)
   102b4:	dd002e15 	stw	r20,184(sp)
   102b8:	d8002a15 	stw	zero,168(sp)
   102bc:	d8003215 	stw	zero,200(sp)
   102c0:	003e9306 	br	fd10 <__alt_data_end+0xfc00fd10>
   102c4:	8025883a 	mov	r18,r16
   102c8:	dc002903 	ldbu	r16,164(sp)
   102cc:	e011883a 	mov	r8,fp
   102d0:	84003fcc 	andi	r16,r16,255
   102d4:	803f7c26 	beq	r16,zero,100c8 <__alt_data_end+0xfc0100c8>
   102d8:	d8c02b03 	ldbu	r3,172(sp)
   102dc:	d8c02785 	stb	r3,158(sp)
   102e0:	003f7906 	br	100c8 <__alt_data_end+0xfc0100c8>
   102e4:	8025883a 	mov	r18,r16
   102e8:	dc002903 	ldbu	r16,164(sp)
   102ec:	e011883a 	mov	r8,fp
   102f0:	84003fcc 	andi	r16,r16,255
   102f4:	8005741e 	bne	r16,zero,118c8 <___svfprintf_internal_r+0x22b0>
   102f8:	010000f4 	movhi	r4,3
   102fc:	212a8304 	addi	r4,r4,-22004
   10300:	d9003a15 	stw	r4,232(sp)
   10304:	9080080c 	andi	r2,r18,32
   10308:	103f8e1e 	bne	r2,zero,10144 <__alt_data_end+0xfc010144>
   1030c:	9080040c 	andi	r2,r18,16
   10310:	1002a726 	beq	r2,zero,10db0 <___svfprintf_internal_r+0x1798>
   10314:	d8802e17 	ldw	r2,184(sp)
   10318:	002d883a 	mov	r22,zero
   1031c:	15000017 	ldw	r20,0(r2)
   10320:	10800104 	addi	r2,r2,4
   10324:	d8802e15 	stw	r2,184(sp)
   10328:	003f8b06 	br	10158 <__alt_data_end+0xfc010158>
   1032c:	84000054 	ori	r16,r16,1
   10330:	bc400007 	ldb	r17,0(r23)
   10334:	003d0d06 	br	f76c <__alt_data_end+0xfc00f76c>
   10338:	d8802b07 	ldb	r2,172(sp)
   1033c:	1002a41e 	bne	r2,zero,10dd0 <___svfprintf_internal_r+0x17b8>
   10340:	00c00044 	movi	r3,1
   10344:	d8c02905 	stb	r3,164(sp)
   10348:	00c00804 	movi	r3,32
   1034c:	d8c02b05 	stb	r3,172(sp)
   10350:	bc400007 	ldb	r17,0(r23)
   10354:	003d0506 	br	f76c <__alt_data_end+0xfc00f76c>
   10358:	8025883a 	mov	r18,r16
   1035c:	dc002903 	ldbu	r16,164(sp)
   10360:	e011883a 	mov	r8,fp
   10364:	84003fcc 	andi	r16,r16,255
   10368:	803e0626 	beq	r16,zero,fb84 <__alt_data_end+0xfc00fb84>
   1036c:	d8c02b03 	ldbu	r3,172(sp)
   10370:	d8c02785 	stb	r3,158(sp)
   10374:	003e0306 	br	fb84 <__alt_data_end+0xfc00fb84>
   10378:	bc400007 	ldb	r17,0(r23)
   1037c:	00801b04 	movi	r2,108
   10380:	88830a26 	beq	r17,r2,10fac <___svfprintf_internal_r+0x1994>
   10384:	84000414 	ori	r16,r16,16
   10388:	003cf806 	br	f76c <__alt_data_end+0xfc00f76c>
   1038c:	8025883a 	mov	r18,r16
   10390:	dc002903 	ldbu	r16,164(sp)
   10394:	e011883a 	mov	r8,fp
   10398:	84003fcc 	andi	r16,r16,255
   1039c:	8005471e 	bne	r16,zero,118bc <___svfprintf_internal_r+0x22a4>
   103a0:	9080080c 	andi	r2,r18,32
   103a4:	10028c26 	beq	r2,zero,10dd8 <___svfprintf_internal_r+0x17c0>
   103a8:	d9002e17 	ldw	r4,184(sp)
   103ac:	d9402f17 	ldw	r5,188(sp)
   103b0:	20800017 	ldw	r2,0(r4)
   103b4:	2807d7fa 	srai	r3,r5,31
   103b8:	21000104 	addi	r4,r4,4
   103bc:	d9002e15 	stw	r4,184(sp)
   103c0:	11400015 	stw	r5,0(r2)
   103c4:	10c00115 	stw	r3,4(r2)
   103c8:	003cbe06 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   103cc:	84001014 	ori	r16,r16,64
   103d0:	bc400007 	ldb	r17,0(r23)
   103d4:	003ce506 	br	f76c <__alt_data_end+0xfc00f76c>
   103d8:	010000f4 	movhi	r4,3
   103dc:	212a8304 	addi	r4,r4,-22004
   103e0:	0039883a 	mov	fp,zero
   103e4:	d9003a15 	stw	r4,232(sp)
   103e8:	04401e04 	movi	r17,120
   103ec:	003f6906 	br	10194 <__alt_data_end+0xfc010194>
   103f0:	8025883a 	mov	r18,r16
   103f4:	dc002903 	ldbu	r16,164(sp)
   103f8:	e011883a 	mov	r8,fp
   103fc:	84003fcc 	andi	r16,r16,255
   10400:	8005261e 	bne	r16,zero,1189c <___svfprintf_internal_r+0x2284>
   10404:	883d6526 	beq	r17,zero,f99c <__alt_data_end+0xfc00f99c>
   10408:	00c00044 	movi	r3,1
   1040c:	d8c02915 	stw	r3,164(sp)
   10410:	dc401405 	stb	r17,80(sp)
   10414:	d8002785 	stb	zero,158(sp)
   10418:	003f7a06 	br	10204 <__alt_data_end+0xfc010204>
   1041c:	010000f4 	movhi	r4,3
   10420:	212a8304 	addi	r4,r4,-22004
   10424:	d9003a15 	stw	r4,232(sp)
   10428:	d8c02e15 	stw	r3,184(sp)
   1042c:	1025883a 	mov	r18,r2
   10430:	04401e04 	movi	r17,120
   10434:	a584b03a 	or	r2,r20,r22
   10438:	1000fa1e 	bne	r2,zero,10824 <___svfprintf_internal_r+0x120c>
   1043c:	0039883a 	mov	fp,zero
   10440:	00800084 	movi	r2,2
   10444:	10803fcc 	andi	r2,r2,255
   10448:	00c00044 	movi	r3,1
   1044c:	10c21626 	beq	r2,r3,10ca8 <___svfprintf_internal_r+0x1690>
   10450:	00c00084 	movi	r3,2
   10454:	10fe0e1e 	bne	r2,r3,fc90 <__alt_data_end+0xfc00fc90>
   10458:	003d4606 	br	f974 <__alt_data_end+0xfc00f974>
   1045c:	d8c02017 	ldw	r3,128(sp)
   10460:	003e7306 	br	fe30 <__alt_data_end+0xfc00fe30>
   10464:	00801944 	movi	r2,101
   10468:	14407c0e 	bge	r2,r17,1065c <___svfprintf_internal_r+0x1044>
   1046c:	d9003617 	ldw	r4,216(sp)
   10470:	d9403717 	ldw	r5,220(sp)
   10474:	000d883a 	mov	r6,zero
   10478:	000f883a 	mov	r7,zero
   1047c:	d8c03d15 	stw	r3,244(sp)
   10480:	da003e15 	stw	r8,248(sp)
   10484:	001d96c0 	call	1d96c <__eqdf2>
   10488:	d8c03d17 	ldw	r3,244(sp)
   1048c:	da003e17 	ldw	r8,248(sp)
   10490:	1000f51e 	bne	r2,zero,10868 <___svfprintf_internal_r+0x1250>
   10494:	d8801f17 	ldw	r2,124(sp)
   10498:	010000f4 	movhi	r4,3
   1049c:	212a8a04 	addi	r4,r4,-21976
   104a0:	18c00044 	addi	r3,r3,1
   104a4:	10800044 	addi	r2,r2,1
   104a8:	41000015 	stw	r4,0(r8)
   104ac:	01000044 	movi	r4,1
   104b0:	41000115 	stw	r4,4(r8)
   104b4:	d8c02015 	stw	r3,128(sp)
   104b8:	d8801f15 	stw	r2,124(sp)
   104bc:	010001c4 	movi	r4,7
   104c0:	20826616 	blt	r4,r2,10e5c <___svfprintf_internal_r+0x1844>
   104c4:	42000204 	addi	r8,r8,8
   104c8:	d8802617 	ldw	r2,152(sp)
   104cc:	d9403317 	ldw	r5,204(sp)
   104d0:	11400216 	blt	r2,r5,104dc <___svfprintf_internal_r+0xec4>
   104d4:	9080004c 	andi	r2,r18,1
   104d8:	103eb326 	beq	r2,zero,ffa8 <__alt_data_end+0xfc00ffa8>
   104dc:	d8803817 	ldw	r2,224(sp)
   104e0:	d9003417 	ldw	r4,208(sp)
   104e4:	d9403817 	ldw	r5,224(sp)
   104e8:	1887883a 	add	r3,r3,r2
   104ec:	d8801f17 	ldw	r2,124(sp)
   104f0:	41000015 	stw	r4,0(r8)
   104f4:	41400115 	stw	r5,4(r8)
   104f8:	10800044 	addi	r2,r2,1
   104fc:	d8c02015 	stw	r3,128(sp)
   10500:	d8801f15 	stw	r2,124(sp)
   10504:	010001c4 	movi	r4,7
   10508:	2082af16 	blt	r4,r2,10fc8 <___svfprintf_internal_r+0x19b0>
   1050c:	42000204 	addi	r8,r8,8
   10510:	d8803317 	ldw	r2,204(sp)
   10514:	143fffc4 	addi	r16,r2,-1
   10518:	043ea30e 	bge	zero,r16,ffa8 <__alt_data_end+0xfc00ffa8>
   1051c:	04400404 	movi	r17,16
   10520:	d8801f17 	ldw	r2,124(sp)
   10524:	8c00860e 	bge	r17,r16,10740 <___svfprintf_internal_r+0x1128>
   10528:	014000f4 	movhi	r5,3
   1052c:	296a8a84 	addi	r5,r5,-21974
   10530:	d9402c15 	stw	r5,176(sp)
   10534:	058001c4 	movi	r22,7
   10538:	dd002d17 	ldw	r20,180(sp)
   1053c:	00000306 	br	1054c <___svfprintf_internal_r+0xf34>
   10540:	42000204 	addi	r8,r8,8
   10544:	843ffc04 	addi	r16,r16,-16
   10548:	8c00800e 	bge	r17,r16,1074c <___svfprintf_internal_r+0x1134>
   1054c:	18c00404 	addi	r3,r3,16
   10550:	10800044 	addi	r2,r2,1
   10554:	45400015 	stw	r21,0(r8)
   10558:	44400115 	stw	r17,4(r8)
   1055c:	d8c02015 	stw	r3,128(sp)
   10560:	d8801f15 	stw	r2,124(sp)
   10564:	b0bff60e 	bge	r22,r2,10540 <__alt_data_end+0xfc010540>
   10568:	d9801e04 	addi	r6,sp,120
   1056c:	a00b883a 	mov	r5,r20
   10570:	9809883a 	mov	r4,r19
   10574:	001857c0 	call	1857c <__ssprint_r>
   10578:	103d0e1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   1057c:	d8c02017 	ldw	r3,128(sp)
   10580:	d8801f17 	ldw	r2,124(sp)
   10584:	da000404 	addi	r8,sp,16
   10588:	003fee06 	br	10544 <__alt_data_end+0xfc010544>
   1058c:	d9403117 	ldw	r5,196(sp)
   10590:	d8802917 	ldw	r2,164(sp)
   10594:	28adc83a 	sub	r22,r5,r2
   10598:	05be430e 	bge	zero,r22,fea8 <__alt_data_end+0xfc00fea8>
   1059c:	07000404 	movi	fp,16
   105a0:	d8801f17 	ldw	r2,124(sp)
   105a4:	e583a20e 	bge	fp,r22,11430 <___svfprintf_internal_r+0x1e18>
   105a8:	014000f4 	movhi	r5,3
   105ac:	296a8a84 	addi	r5,r5,-21974
   105b0:	dc403015 	stw	r17,192(sp)
   105b4:	d9402c15 	stw	r5,176(sp)
   105b8:	b023883a 	mov	r17,r22
   105bc:	050001c4 	movi	r20,7
   105c0:	902d883a 	mov	r22,r18
   105c4:	8025883a 	mov	r18,r16
   105c8:	dc002d17 	ldw	r16,180(sp)
   105cc:	00000306 	br	105dc <___svfprintf_internal_r+0xfc4>
   105d0:	8c7ffc04 	addi	r17,r17,-16
   105d4:	42000204 	addi	r8,r8,8
   105d8:	e440110e 	bge	fp,r17,10620 <___svfprintf_internal_r+0x1008>
   105dc:	18c00404 	addi	r3,r3,16
   105e0:	10800044 	addi	r2,r2,1
   105e4:	45400015 	stw	r21,0(r8)
   105e8:	47000115 	stw	fp,4(r8)
   105ec:	d8c02015 	stw	r3,128(sp)
   105f0:	d8801f15 	stw	r2,124(sp)
   105f4:	a0bff60e 	bge	r20,r2,105d0 <__alt_data_end+0xfc0105d0>
   105f8:	d9801e04 	addi	r6,sp,120
   105fc:	800b883a 	mov	r5,r16
   10600:	9809883a 	mov	r4,r19
   10604:	001857c0 	call	1857c <__ssprint_r>
   10608:	103cea1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   1060c:	8c7ffc04 	addi	r17,r17,-16
   10610:	d8c02017 	ldw	r3,128(sp)
   10614:	d8801f17 	ldw	r2,124(sp)
   10618:	da000404 	addi	r8,sp,16
   1061c:	e47fef16 	blt	fp,r17,105dc <__alt_data_end+0xfc0105dc>
   10620:	9021883a 	mov	r16,r18
   10624:	b025883a 	mov	r18,r22
   10628:	882d883a 	mov	r22,r17
   1062c:	dc403017 	ldw	r17,192(sp)
   10630:	d9002c17 	ldw	r4,176(sp)
   10634:	1d87883a 	add	r3,r3,r22
   10638:	10800044 	addi	r2,r2,1
   1063c:	41000015 	stw	r4,0(r8)
   10640:	45800115 	stw	r22,4(r8)
   10644:	d8c02015 	stw	r3,128(sp)
   10648:	d8801f15 	stw	r2,124(sp)
   1064c:	010001c4 	movi	r4,7
   10650:	20819a16 	blt	r4,r2,10cbc <___svfprintf_internal_r+0x16a4>
   10654:	42000204 	addi	r8,r8,8
   10658:	003e1306 	br	fea8 <__alt_data_end+0xfc00fea8>
   1065c:	d9403317 	ldw	r5,204(sp)
   10660:	00800044 	movi	r2,1
   10664:	18c00044 	addi	r3,r3,1
   10668:	1141710e 	bge	r2,r5,10c30 <___svfprintf_internal_r+0x1618>
   1066c:	dc401f17 	ldw	r17,124(sp)
   10670:	00800044 	movi	r2,1
   10674:	40800115 	stw	r2,4(r8)
   10678:	8c400044 	addi	r17,r17,1
   1067c:	44000015 	stw	r16,0(r8)
   10680:	d8c02015 	stw	r3,128(sp)
   10684:	dc401f15 	stw	r17,124(sp)
   10688:	008001c4 	movi	r2,7
   1068c:	14417416 	blt	r2,r17,10c60 <___svfprintf_internal_r+0x1648>
   10690:	42000204 	addi	r8,r8,8
   10694:	d8803817 	ldw	r2,224(sp)
   10698:	d9003417 	ldw	r4,208(sp)
   1069c:	8c400044 	addi	r17,r17,1
   106a0:	10c7883a 	add	r3,r2,r3
   106a4:	40800115 	stw	r2,4(r8)
   106a8:	41000015 	stw	r4,0(r8)
   106ac:	d8c02015 	stw	r3,128(sp)
   106b0:	dc401f15 	stw	r17,124(sp)
   106b4:	008001c4 	movi	r2,7
   106b8:	14417216 	blt	r2,r17,10c84 <___svfprintf_internal_r+0x166c>
   106bc:	45800204 	addi	r22,r8,8
   106c0:	d9003617 	ldw	r4,216(sp)
   106c4:	d9403717 	ldw	r5,220(sp)
   106c8:	000d883a 	mov	r6,zero
   106cc:	000f883a 	mov	r7,zero
   106d0:	d8c03d15 	stw	r3,244(sp)
   106d4:	001d96c0 	call	1d96c <__eqdf2>
   106d8:	d8c03d17 	ldw	r3,244(sp)
   106dc:	1000b326 	beq	r2,zero,109ac <___svfprintf_internal_r+0x1394>
   106e0:	d9403317 	ldw	r5,204(sp)
   106e4:	84000044 	addi	r16,r16,1
   106e8:	8c400044 	addi	r17,r17,1
   106ec:	28bfffc4 	addi	r2,r5,-1
   106f0:	1887883a 	add	r3,r3,r2
   106f4:	b0800115 	stw	r2,4(r22)
   106f8:	b4000015 	stw	r16,0(r22)
   106fc:	d8c02015 	stw	r3,128(sp)
   10700:	dc401f15 	stw	r17,124(sp)
   10704:	008001c4 	movi	r2,7
   10708:	1440d216 	blt	r2,r17,10a54 <___svfprintf_internal_r+0x143c>
   1070c:	b5800204 	addi	r22,r22,8
   10710:	d9003b17 	ldw	r4,236(sp)
   10714:	df0022c4 	addi	fp,sp,139
   10718:	8c400044 	addi	r17,r17,1
   1071c:	20c7883a 	add	r3,r4,r3
   10720:	b7000015 	stw	fp,0(r22)
   10724:	b1000115 	stw	r4,4(r22)
   10728:	d8c02015 	stw	r3,128(sp)
   1072c:	dc401f15 	stw	r17,124(sp)
   10730:	008001c4 	movi	r2,7
   10734:	14400e16 	blt	r2,r17,10770 <___svfprintf_internal_r+0x1158>
   10738:	b2000204 	addi	r8,r22,8
   1073c:	003e1a06 	br	ffa8 <__alt_data_end+0xfc00ffa8>
   10740:	010000f4 	movhi	r4,3
   10744:	212a8a84 	addi	r4,r4,-21974
   10748:	d9002c15 	stw	r4,176(sp)
   1074c:	d9002c17 	ldw	r4,176(sp)
   10750:	1c07883a 	add	r3,r3,r16
   10754:	44000115 	stw	r16,4(r8)
   10758:	41000015 	stw	r4,0(r8)
   1075c:	10800044 	addi	r2,r2,1
   10760:	d8c02015 	stw	r3,128(sp)
   10764:	d8801f15 	stw	r2,124(sp)
   10768:	010001c4 	movi	r4,7
   1076c:	20be0d0e 	bge	r4,r2,ffa4 <__alt_data_end+0xfc00ffa4>
   10770:	d9402d17 	ldw	r5,180(sp)
   10774:	d9801e04 	addi	r6,sp,120
   10778:	9809883a 	mov	r4,r19
   1077c:	001857c0 	call	1857c <__ssprint_r>
   10780:	103c8c1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10784:	d8c02017 	ldw	r3,128(sp)
   10788:	da000404 	addi	r8,sp,16
   1078c:	003e0606 	br	ffa8 <__alt_data_end+0xfc00ffa8>
   10790:	d9402d17 	ldw	r5,180(sp)
   10794:	d9801e04 	addi	r6,sp,120
   10798:	9809883a 	mov	r4,r19
   1079c:	001857c0 	call	1857c <__ssprint_r>
   107a0:	103e3d26 	beq	r2,zero,10098 <__alt_data_end+0xfc010098>
   107a4:	003c8306 	br	f9b4 <__alt_data_end+0xfc00f9b4>
   107a8:	d9402d17 	ldw	r5,180(sp)
   107ac:	d9801e04 	addi	r6,sp,120
   107b0:	9809883a 	mov	r4,r19
   107b4:	001857c0 	call	1857c <__ssprint_r>
   107b8:	103c7e1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   107bc:	d8c02017 	ldw	r3,128(sp)
   107c0:	da000404 	addi	r8,sp,16
   107c4:	003deb06 	br	ff74 <__alt_data_end+0xfc00ff74>
   107c8:	d9402d17 	ldw	r5,180(sp)
   107cc:	d9801e04 	addi	r6,sp,120
   107d0:	9809883a 	mov	r4,r19
   107d4:	001857c0 	call	1857c <__ssprint_r>
   107d8:	103c761e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   107dc:	d8c02017 	ldw	r3,128(sp)
   107e0:	da000404 	addi	r8,sp,16
   107e4:	003d9f06 	br	fe64 <__alt_data_end+0xfc00fe64>
   107e8:	d9402d17 	ldw	r5,180(sp)
   107ec:	d9801e04 	addi	r6,sp,120
   107f0:	9809883a 	mov	r4,r19
   107f4:	001857c0 	call	1857c <__ssprint_r>
   107f8:	103c6e1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   107fc:	d8c02017 	ldw	r3,128(sp)
   10800:	da000404 	addi	r8,sp,16
   10804:	003da506 	br	fe9c <__alt_data_end+0xfc00fe9c>
   10808:	d9402a17 	ldw	r5,168(sp)
   1080c:	d8002785 	stb	zero,158(sp)
   10810:	283f0816 	blt	r5,zero,10434 <__alt_data_end+0xfc010434>
   10814:	00ffdfc4 	movi	r3,-129
   10818:	a584b03a 	or	r2,r20,r22
   1081c:	90e4703a 	and	r18,r18,r3
   10820:	103c5126 	beq	r2,zero,f968 <__alt_data_end+0xfc00f968>
   10824:	0039883a 	mov	fp,zero
   10828:	003e5a06 	br	10194 <__alt_data_end+0xfc010194>
   1082c:	9080040c 	andi	r2,r18,16
   10830:	10013d26 	beq	r2,zero,10d28 <___svfprintf_internal_r+0x1710>
   10834:	d8c02e17 	ldw	r3,184(sp)
   10838:	d9002a17 	ldw	r4,168(sp)
   1083c:	d8002785 	stb	zero,158(sp)
   10840:	18800104 	addi	r2,r3,4
   10844:	1d000017 	ldw	r20,0(r3)
   10848:	002d883a 	mov	r22,zero
   1084c:	20013f16 	blt	r4,zero,10d4c <___svfprintf_internal_r+0x1734>
   10850:	00ffdfc4 	movi	r3,-129
   10854:	d8802e15 	stw	r2,184(sp)
   10858:	90e4703a 	and	r18,r18,r3
   1085c:	a03d0926 	beq	r20,zero,fc84 <__alt_data_end+0xfc00fc84>
   10860:	0039883a 	mov	fp,zero
   10864:	003d0c06 	br	fc98 <__alt_data_end+0xfc00fc98>
   10868:	dc402617 	ldw	r17,152(sp)
   1086c:	0441830e 	bge	zero,r17,10e7c <___svfprintf_internal_r+0x1864>
   10870:	dc403217 	ldw	r17,200(sp)
   10874:	d8803317 	ldw	r2,204(sp)
   10878:	1440010e 	bge	r2,r17,10880 <___svfprintf_internal_r+0x1268>
   1087c:	1023883a 	mov	r17,r2
   10880:	04400a0e 	bge	zero,r17,108ac <___svfprintf_internal_r+0x1294>
   10884:	d8801f17 	ldw	r2,124(sp)
   10888:	1c47883a 	add	r3,r3,r17
   1088c:	44000015 	stw	r16,0(r8)
   10890:	10800044 	addi	r2,r2,1
   10894:	44400115 	stw	r17,4(r8)
   10898:	d8c02015 	stw	r3,128(sp)
   1089c:	d8801f15 	stw	r2,124(sp)
   108a0:	010001c4 	movi	r4,7
   108a4:	20827516 	blt	r4,r2,1127c <___svfprintf_internal_r+0x1c64>
   108a8:	42000204 	addi	r8,r8,8
   108ac:	88027b16 	blt	r17,zero,1129c <___svfprintf_internal_r+0x1c84>
   108b0:	d9003217 	ldw	r4,200(sp)
   108b4:	2463c83a 	sub	r17,r4,r17
   108b8:	0440990e 	bge	zero,r17,10b20 <___svfprintf_internal_r+0x1508>
   108bc:	05800404 	movi	r22,16
   108c0:	d8801f17 	ldw	r2,124(sp)
   108c4:	b441530e 	bge	r22,r17,10e14 <___svfprintf_internal_r+0x17fc>
   108c8:	010000f4 	movhi	r4,3
   108cc:	212a8a84 	addi	r4,r4,-21974
   108d0:	d9002c15 	stw	r4,176(sp)
   108d4:	070001c4 	movi	fp,7
   108d8:	dd002d17 	ldw	r20,180(sp)
   108dc:	00000306 	br	108ec <___svfprintf_internal_r+0x12d4>
   108e0:	42000204 	addi	r8,r8,8
   108e4:	8c7ffc04 	addi	r17,r17,-16
   108e8:	b4414d0e 	bge	r22,r17,10e20 <___svfprintf_internal_r+0x1808>
   108ec:	18c00404 	addi	r3,r3,16
   108f0:	10800044 	addi	r2,r2,1
   108f4:	45400015 	stw	r21,0(r8)
   108f8:	45800115 	stw	r22,4(r8)
   108fc:	d8c02015 	stw	r3,128(sp)
   10900:	d8801f15 	stw	r2,124(sp)
   10904:	e0bff60e 	bge	fp,r2,108e0 <__alt_data_end+0xfc0108e0>
   10908:	d9801e04 	addi	r6,sp,120
   1090c:	a00b883a 	mov	r5,r20
   10910:	9809883a 	mov	r4,r19
   10914:	001857c0 	call	1857c <__ssprint_r>
   10918:	103c261e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   1091c:	d8c02017 	ldw	r3,128(sp)
   10920:	d8801f17 	ldw	r2,124(sp)
   10924:	da000404 	addi	r8,sp,16
   10928:	003fee06 	br	108e4 <__alt_data_end+0xfc0108e4>
   1092c:	d9402d17 	ldw	r5,180(sp)
   10930:	d9801e04 	addi	r6,sp,120
   10934:	9809883a 	mov	r4,r19
   10938:	001857c0 	call	1857c <__ssprint_r>
   1093c:	103c1d1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10940:	d8c02017 	ldw	r3,128(sp)
   10944:	df002787 	ldb	fp,158(sp)
   10948:	da000404 	addi	r8,sp,16
   1094c:	003d3806 	br	fe30 <__alt_data_end+0xfc00fe30>
   10950:	9080040c 	andi	r2,r18,16
   10954:	10005c26 	beq	r2,zero,10ac8 <___svfprintf_internal_r+0x14b0>
   10958:	d8c02e17 	ldw	r3,184(sp)
   1095c:	d9002a17 	ldw	r4,168(sp)
   10960:	d8002785 	stb	zero,158(sp)
   10964:	18800104 	addi	r2,r3,4
   10968:	1d000017 	ldw	r20,0(r3)
   1096c:	002d883a 	mov	r22,zero
   10970:	20005e16 	blt	r4,zero,10aec <___svfprintf_internal_r+0x14d4>
   10974:	00ffdfc4 	movi	r3,-129
   10978:	d8802e15 	stw	r2,184(sp)
   1097c:	90e4703a 	and	r18,r18,r3
   10980:	0039883a 	mov	fp,zero
   10984:	a03ddf26 	beq	r20,zero,10104 <__alt_data_end+0xfc010104>
   10988:	00800244 	movi	r2,9
   1098c:	153c8e36 	bltu	r2,r20,fbc8 <__alt_data_end+0xfc00fbc8>
   10990:	a5000c04 	addi	r20,r20,48
   10994:	dc001dc4 	addi	r16,sp,119
   10998:	dd001dc5 	stb	r20,119(sp)
   1099c:	d8c02817 	ldw	r3,160(sp)
   109a0:	1c07c83a 	sub	r3,r3,r16
   109a4:	d8c02b15 	stw	r3,172(sp)
   109a8:	003cd306 	br	fcf8 <__alt_data_end+0xfc00fcf8>
   109ac:	d8803317 	ldw	r2,204(sp)
   109b0:	143fffc4 	addi	r16,r2,-1
   109b4:	043f560e 	bge	zero,r16,10710 <__alt_data_end+0xfc010710>
   109b8:	07000404 	movi	fp,16
   109bc:	e403530e 	bge	fp,r16,1170c <___svfprintf_internal_r+0x20f4>
   109c0:	014000f4 	movhi	r5,3
   109c4:	296a8a84 	addi	r5,r5,-21974
   109c8:	d9402c15 	stw	r5,176(sp)
   109cc:	01c001c4 	movi	r7,7
   109d0:	dd002d17 	ldw	r20,180(sp)
   109d4:	00000306 	br	109e4 <___svfprintf_internal_r+0x13cc>
   109d8:	843ffc04 	addi	r16,r16,-16
   109dc:	b5800204 	addi	r22,r22,8
   109e0:	e400130e 	bge	fp,r16,10a30 <___svfprintf_internal_r+0x1418>
   109e4:	18c00404 	addi	r3,r3,16
   109e8:	8c400044 	addi	r17,r17,1
   109ec:	b5400015 	stw	r21,0(r22)
   109f0:	b7000115 	stw	fp,4(r22)
   109f4:	d8c02015 	stw	r3,128(sp)
   109f8:	dc401f15 	stw	r17,124(sp)
   109fc:	3c7ff60e 	bge	r7,r17,109d8 <__alt_data_end+0xfc0109d8>
   10a00:	d9801e04 	addi	r6,sp,120
   10a04:	a00b883a 	mov	r5,r20
   10a08:	9809883a 	mov	r4,r19
   10a0c:	d9c03d15 	stw	r7,244(sp)
   10a10:	001857c0 	call	1857c <__ssprint_r>
   10a14:	d9c03d17 	ldw	r7,244(sp)
   10a18:	103be61e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10a1c:	843ffc04 	addi	r16,r16,-16
   10a20:	d8c02017 	ldw	r3,128(sp)
   10a24:	dc401f17 	ldw	r17,124(sp)
   10a28:	dd800404 	addi	r22,sp,16
   10a2c:	e43fed16 	blt	fp,r16,109e4 <__alt_data_end+0xfc0109e4>
   10a30:	d8802c17 	ldw	r2,176(sp)
   10a34:	1c07883a 	add	r3,r3,r16
   10a38:	8c400044 	addi	r17,r17,1
   10a3c:	b0800015 	stw	r2,0(r22)
   10a40:	b4000115 	stw	r16,4(r22)
   10a44:	d8c02015 	stw	r3,128(sp)
   10a48:	dc401f15 	stw	r17,124(sp)
   10a4c:	008001c4 	movi	r2,7
   10a50:	147f2e0e 	bge	r2,r17,1070c <__alt_data_end+0xfc01070c>
   10a54:	d9402d17 	ldw	r5,180(sp)
   10a58:	d9801e04 	addi	r6,sp,120
   10a5c:	9809883a 	mov	r4,r19
   10a60:	001857c0 	call	1857c <__ssprint_r>
   10a64:	103bd31e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10a68:	d8c02017 	ldw	r3,128(sp)
   10a6c:	dc401f17 	ldw	r17,124(sp)
   10a70:	dd800404 	addi	r22,sp,16
   10a74:	003f2606 	br	10710 <__alt_data_end+0xfc010710>
   10a78:	9080040c 	andi	r2,r18,16
   10a7c:	1000c326 	beq	r2,zero,10d8c <___svfprintf_internal_r+0x1774>
   10a80:	d9402e17 	ldw	r5,184(sp)
   10a84:	2d000017 	ldw	r20,0(r5)
   10a88:	29400104 	addi	r5,r5,4
   10a8c:	d9402e15 	stw	r5,184(sp)
   10a90:	a02dd7fa 	srai	r22,r20,31
   10a94:	b005883a 	mov	r2,r22
   10a98:	103c430e 	bge	r2,zero,fba8 <__alt_data_end+0xfc00fba8>
   10a9c:	d9402a17 	ldw	r5,168(sp)
   10aa0:	0529c83a 	sub	r20,zero,r20
   10aa4:	07000b44 	movi	fp,45
   10aa8:	a004c03a 	cmpne	r2,r20,zero
   10aac:	05adc83a 	sub	r22,zero,r22
   10ab0:	df002785 	stb	fp,158(sp)
   10ab4:	b0adc83a 	sub	r22,r22,r2
   10ab8:	28022e16 	blt	r5,zero,11374 <___svfprintf_internal_r+0x1d5c>
   10abc:	00bfdfc4 	movi	r2,-129
   10ac0:	90a4703a 	and	r18,r18,r2
   10ac4:	003c3f06 	br	fbc4 <__alt_data_end+0xfc00fbc4>
   10ac8:	9080100c 	andi	r2,r18,64
   10acc:	d8002785 	stb	zero,158(sp)
   10ad0:	10012526 	beq	r2,zero,10f68 <___svfprintf_internal_r+0x1950>
   10ad4:	d9402e17 	ldw	r5,184(sp)
   10ad8:	d8c02a17 	ldw	r3,168(sp)
   10adc:	002d883a 	mov	r22,zero
   10ae0:	28800104 	addi	r2,r5,4
   10ae4:	2d00000b 	ldhu	r20,0(r5)
   10ae8:	183fa20e 	bge	r3,zero,10974 <__alt_data_end+0xfc010974>
   10aec:	d8802e15 	stw	r2,184(sp)
   10af0:	0039883a 	mov	fp,zero
   10af4:	a584b03a 	or	r2,r20,r22
   10af8:	103c321e 	bne	r2,zero,fbc4 <__alt_data_end+0xfc00fbc4>
   10afc:	00800044 	movi	r2,1
   10b00:	003e5006 	br	10444 <__alt_data_end+0xfc010444>
   10b04:	d9402d17 	ldw	r5,180(sp)
   10b08:	d9801e04 	addi	r6,sp,120
   10b0c:	9809883a 	mov	r4,r19
   10b10:	001857c0 	call	1857c <__ssprint_r>
   10b14:	103ba71e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10b18:	d8c02017 	ldw	r3,128(sp)
   10b1c:	da000404 	addi	r8,sp,16
   10b20:	d9003217 	ldw	r4,200(sp)
   10b24:	d8802617 	ldw	r2,152(sp)
   10b28:	d9403317 	ldw	r5,204(sp)
   10b2c:	8123883a 	add	r17,r16,r4
   10b30:	11400216 	blt	r2,r5,10b3c <___svfprintf_internal_r+0x1524>
   10b34:	9100004c 	andi	r4,r18,1
   10b38:	20000d26 	beq	r4,zero,10b70 <___svfprintf_internal_r+0x1558>
   10b3c:	d9003817 	ldw	r4,224(sp)
   10b40:	d9403417 	ldw	r5,208(sp)
   10b44:	1907883a 	add	r3,r3,r4
   10b48:	d9001f17 	ldw	r4,124(sp)
   10b4c:	41400015 	stw	r5,0(r8)
   10b50:	d9403817 	ldw	r5,224(sp)
   10b54:	21000044 	addi	r4,r4,1
   10b58:	d8c02015 	stw	r3,128(sp)
   10b5c:	41400115 	stw	r5,4(r8)
   10b60:	d9001f15 	stw	r4,124(sp)
   10b64:	014001c4 	movi	r5,7
   10b68:	2901dc16 	blt	r5,r4,112dc <___svfprintf_internal_r+0x1cc4>
   10b6c:	42000204 	addi	r8,r8,8
   10b70:	d9003317 	ldw	r4,204(sp)
   10b74:	8121883a 	add	r16,r16,r4
   10b78:	2085c83a 	sub	r2,r4,r2
   10b7c:	8461c83a 	sub	r16,r16,r17
   10b80:	1400010e 	bge	r2,r16,10b88 <___svfprintf_internal_r+0x1570>
   10b84:	1021883a 	mov	r16,r2
   10b88:	04000a0e 	bge	zero,r16,10bb4 <___svfprintf_internal_r+0x159c>
   10b8c:	d9001f17 	ldw	r4,124(sp)
   10b90:	1c07883a 	add	r3,r3,r16
   10b94:	44400015 	stw	r17,0(r8)
   10b98:	21000044 	addi	r4,r4,1
   10b9c:	44000115 	stw	r16,4(r8)
   10ba0:	d8c02015 	stw	r3,128(sp)
   10ba4:	d9001f15 	stw	r4,124(sp)
   10ba8:	014001c4 	movi	r5,7
   10bac:	2901e616 	blt	r5,r4,11348 <___svfprintf_internal_r+0x1d30>
   10bb0:	42000204 	addi	r8,r8,8
   10bb4:	8001f616 	blt	r16,zero,11390 <___svfprintf_internal_r+0x1d78>
   10bb8:	1421c83a 	sub	r16,r2,r16
   10bbc:	043cfa0e 	bge	zero,r16,ffa8 <__alt_data_end+0xfc00ffa8>
   10bc0:	04400404 	movi	r17,16
   10bc4:	d8801f17 	ldw	r2,124(sp)
   10bc8:	8c3edd0e 	bge	r17,r16,10740 <__alt_data_end+0xfc010740>
   10bcc:	014000f4 	movhi	r5,3
   10bd0:	296a8a84 	addi	r5,r5,-21974
   10bd4:	d9402c15 	stw	r5,176(sp)
   10bd8:	058001c4 	movi	r22,7
   10bdc:	dd002d17 	ldw	r20,180(sp)
   10be0:	00000306 	br	10bf0 <___svfprintf_internal_r+0x15d8>
   10be4:	42000204 	addi	r8,r8,8
   10be8:	843ffc04 	addi	r16,r16,-16
   10bec:	8c3ed70e 	bge	r17,r16,1074c <__alt_data_end+0xfc01074c>
   10bf0:	18c00404 	addi	r3,r3,16
   10bf4:	10800044 	addi	r2,r2,1
   10bf8:	45400015 	stw	r21,0(r8)
   10bfc:	44400115 	stw	r17,4(r8)
   10c00:	d8c02015 	stw	r3,128(sp)
   10c04:	d8801f15 	stw	r2,124(sp)
   10c08:	b0bff60e 	bge	r22,r2,10be4 <__alt_data_end+0xfc010be4>
   10c0c:	d9801e04 	addi	r6,sp,120
   10c10:	a00b883a 	mov	r5,r20
   10c14:	9809883a 	mov	r4,r19
   10c18:	001857c0 	call	1857c <__ssprint_r>
   10c1c:	103b651e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10c20:	d8c02017 	ldw	r3,128(sp)
   10c24:	d8801f17 	ldw	r2,124(sp)
   10c28:	da000404 	addi	r8,sp,16
   10c2c:	003fee06 	br	10be8 <__alt_data_end+0xfc010be8>
   10c30:	9088703a 	and	r4,r18,r2
   10c34:	203e8d1e 	bne	r4,zero,1066c <__alt_data_end+0xfc01066c>
   10c38:	dc401f17 	ldw	r17,124(sp)
   10c3c:	40800115 	stw	r2,4(r8)
   10c40:	44000015 	stw	r16,0(r8)
   10c44:	8c400044 	addi	r17,r17,1
   10c48:	d8c02015 	stw	r3,128(sp)
   10c4c:	dc401f15 	stw	r17,124(sp)
   10c50:	008001c4 	movi	r2,7
   10c54:	147f7f16 	blt	r2,r17,10a54 <__alt_data_end+0xfc010a54>
   10c58:	45800204 	addi	r22,r8,8
   10c5c:	003eac06 	br	10710 <__alt_data_end+0xfc010710>
   10c60:	d9402d17 	ldw	r5,180(sp)
   10c64:	d9801e04 	addi	r6,sp,120
   10c68:	9809883a 	mov	r4,r19
   10c6c:	001857c0 	call	1857c <__ssprint_r>
   10c70:	103b501e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10c74:	d8c02017 	ldw	r3,128(sp)
   10c78:	dc401f17 	ldw	r17,124(sp)
   10c7c:	da000404 	addi	r8,sp,16
   10c80:	003e8406 	br	10694 <__alt_data_end+0xfc010694>
   10c84:	d9402d17 	ldw	r5,180(sp)
   10c88:	d9801e04 	addi	r6,sp,120
   10c8c:	9809883a 	mov	r4,r19
   10c90:	001857c0 	call	1857c <__ssprint_r>
   10c94:	103b471e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10c98:	d8c02017 	ldw	r3,128(sp)
   10c9c:	dc401f17 	ldw	r17,124(sp)
   10ca0:	dd800404 	addi	r22,sp,16
   10ca4:	003e8606 	br	106c0 <__alt_data_end+0xfc0106c0>
   10ca8:	0029883a 	mov	r20,zero
   10cac:	a5000c04 	addi	r20,r20,48
   10cb0:	dc001dc4 	addi	r16,sp,119
   10cb4:	dd001dc5 	stb	r20,119(sp)
   10cb8:	003f3806 	br	1099c <__alt_data_end+0xfc01099c>
   10cbc:	d9402d17 	ldw	r5,180(sp)
   10cc0:	d9801e04 	addi	r6,sp,120
   10cc4:	9809883a 	mov	r4,r19
   10cc8:	001857c0 	call	1857c <__ssprint_r>
   10ccc:	103b391e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10cd0:	d8c02017 	ldw	r3,128(sp)
   10cd4:	da000404 	addi	r8,sp,16
   10cd8:	003c7306 	br	fea8 <__alt_data_end+0xfc00fea8>
   10cdc:	d9003617 	ldw	r4,216(sp)
   10ce0:	d9403717 	ldw	r5,220(sp)
   10ce4:	da003e15 	stw	r8,248(sp)
   10ce8:	00183cc0 	call	183cc <__fpclassifyd>
   10cec:	da003e17 	ldw	r8,248(sp)
   10cf0:	1000bd1e 	bne	r2,zero,10fe8 <___svfprintf_internal_r+0x19d0>
   10cf4:	008011c4 	movi	r2,71
   10cf8:	14411e0e 	bge	r2,r17,11174 <___svfprintf_internal_r+0x1b5c>
   10cfc:	040000f4 	movhi	r16,3
   10d00:	842a7d04 	addi	r16,r16,-22028
   10d04:	00c000c4 	movi	r3,3
   10d08:	00bfdfc4 	movi	r2,-129
   10d0c:	d8c02915 	stw	r3,164(sp)
   10d10:	90a4703a 	and	r18,r18,r2
   10d14:	df002783 	ldbu	fp,158(sp)
   10d18:	d8c02b15 	stw	r3,172(sp)
   10d1c:	d8002a15 	stw	zero,168(sp)
   10d20:	d8003215 	stw	zero,200(sp)
   10d24:	003bfa06 	br	fd10 <__alt_data_end+0xfc00fd10>
   10d28:	9080100c 	andi	r2,r18,64
   10d2c:	d8002785 	stb	zero,158(sp)
   10d30:	10009426 	beq	r2,zero,10f84 <___svfprintf_internal_r+0x196c>
   10d34:	d9402e17 	ldw	r5,184(sp)
   10d38:	d8c02a17 	ldw	r3,168(sp)
   10d3c:	002d883a 	mov	r22,zero
   10d40:	28800104 	addi	r2,r5,4
   10d44:	2d00000b 	ldhu	r20,0(r5)
   10d48:	183ec10e 	bge	r3,zero,10850 <__alt_data_end+0xfc010850>
   10d4c:	a586b03a 	or	r3,r20,r22
   10d50:	d8802e15 	stw	r2,184(sp)
   10d54:	183ec21e 	bne	r3,zero,10860 <__alt_data_end+0xfc010860>
   10d58:	0039883a 	mov	fp,zero
   10d5c:	0005883a 	mov	r2,zero
   10d60:	003db806 	br	10444 <__alt_data_end+0xfc010444>
   10d64:	d8c02e17 	ldw	r3,184(sp)
   10d68:	d9002e17 	ldw	r4,184(sp)
   10d6c:	d9402e17 	ldw	r5,184(sp)
   10d70:	18c00017 	ldw	r3,0(r3)
   10d74:	21000117 	ldw	r4,4(r4)
   10d78:	29400204 	addi	r5,r5,8
   10d7c:	d8c03615 	stw	r3,216(sp)
   10d80:	d9003715 	stw	r4,220(sp)
   10d84:	d9402e15 	stw	r5,184(sp)
   10d88:	003b5a06 	br	faf4 <__alt_data_end+0xfc00faf4>
   10d8c:	9080100c 	andi	r2,r18,64
   10d90:	10010726 	beq	r2,zero,111b0 <___svfprintf_internal_r+0x1b98>
   10d94:	d8802e17 	ldw	r2,184(sp)
   10d98:	1500000f 	ldh	r20,0(r2)
   10d9c:	10800104 	addi	r2,r2,4
   10da0:	d8802e15 	stw	r2,184(sp)
   10da4:	a02dd7fa 	srai	r22,r20,31
   10da8:	b005883a 	mov	r2,r22
   10dac:	003b7d06 	br	fba4 <__alt_data_end+0xfc00fba4>
   10db0:	9080100c 	andi	r2,r18,64
   10db4:	10010526 	beq	r2,zero,111cc <___svfprintf_internal_r+0x1bb4>
   10db8:	d8c02e17 	ldw	r3,184(sp)
   10dbc:	002d883a 	mov	r22,zero
   10dc0:	1d00000b 	ldhu	r20,0(r3)
   10dc4:	18c00104 	addi	r3,r3,4
   10dc8:	d8c02e15 	stw	r3,184(sp)
   10dcc:	003ce206 	br	10158 <__alt_data_end+0xfc010158>
   10dd0:	bc400007 	ldb	r17,0(r23)
   10dd4:	003a6506 	br	f76c <__alt_data_end+0xfc00f76c>
   10dd8:	9080040c 	andi	r2,r18,16
   10ddc:	10010126 	beq	r2,zero,111e4 <___svfprintf_internal_r+0x1bcc>
   10de0:	d8c02e17 	ldw	r3,184(sp)
   10de4:	d9002f17 	ldw	r4,188(sp)
   10de8:	18800017 	ldw	r2,0(r3)
   10dec:	18c00104 	addi	r3,r3,4
   10df0:	d8c02e15 	stw	r3,184(sp)
   10df4:	11000015 	stw	r4,0(r2)
   10df8:	003a3206 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   10dfc:	d9002a17 	ldw	r4,168(sp)
   10e00:	d8002785 	stb	zero,158(sp)
   10e04:	203d8d16 	blt	r4,zero,1043c <__alt_data_end+0xfc01043c>
   10e08:	00bfdfc4 	movi	r2,-129
   10e0c:	90a4703a 	and	r18,r18,r2
   10e10:	003ad506 	br	f968 <__alt_data_end+0xfc00f968>
   10e14:	014000f4 	movhi	r5,3
   10e18:	296a8a84 	addi	r5,r5,-21974
   10e1c:	d9402c15 	stw	r5,176(sp)
   10e20:	d9402c17 	ldw	r5,176(sp)
   10e24:	1c47883a 	add	r3,r3,r17
   10e28:	10800044 	addi	r2,r2,1
   10e2c:	41400015 	stw	r5,0(r8)
   10e30:	44400115 	stw	r17,4(r8)
   10e34:	d8c02015 	stw	r3,128(sp)
   10e38:	d8801f15 	stw	r2,124(sp)
   10e3c:	010001c4 	movi	r4,7
   10e40:	20bf3016 	blt	r4,r2,10b04 <__alt_data_end+0xfc010b04>
   10e44:	42000204 	addi	r8,r8,8
   10e48:	003f3506 	br	10b20 <__alt_data_end+0xfc010b20>
   10e4c:	010000f4 	movhi	r4,3
   10e50:	212a8a84 	addi	r4,r4,-21974
   10e54:	d9002c15 	stw	r4,176(sp)
   10e58:	003c3c06 	br	ff4c <__alt_data_end+0xfc00ff4c>
   10e5c:	d9402d17 	ldw	r5,180(sp)
   10e60:	d9801e04 	addi	r6,sp,120
   10e64:	9809883a 	mov	r4,r19
   10e68:	001857c0 	call	1857c <__ssprint_r>
   10e6c:	103ad11e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10e70:	d8c02017 	ldw	r3,128(sp)
   10e74:	da000404 	addi	r8,sp,16
   10e78:	003d9306 	br	104c8 <__alt_data_end+0xfc0104c8>
   10e7c:	d8801f17 	ldw	r2,124(sp)
   10e80:	014000f4 	movhi	r5,3
   10e84:	01000044 	movi	r4,1
   10e88:	18c00044 	addi	r3,r3,1
   10e8c:	10800044 	addi	r2,r2,1
   10e90:	296a8a04 	addi	r5,r5,-21976
   10e94:	41000115 	stw	r4,4(r8)
   10e98:	41400015 	stw	r5,0(r8)
   10e9c:	d8c02015 	stw	r3,128(sp)
   10ea0:	d8801f15 	stw	r2,124(sp)
   10ea4:	010001c4 	movi	r4,7
   10ea8:	2080b516 	blt	r4,r2,11180 <___svfprintf_internal_r+0x1b68>
   10eac:	42000204 	addi	r8,r8,8
   10eb0:	8800041e 	bne	r17,zero,10ec4 <___svfprintf_internal_r+0x18ac>
   10eb4:	d8803317 	ldw	r2,204(sp)
   10eb8:	1000021e 	bne	r2,zero,10ec4 <___svfprintf_internal_r+0x18ac>
   10ebc:	9080004c 	andi	r2,r18,1
   10ec0:	103c3926 	beq	r2,zero,ffa8 <__alt_data_end+0xfc00ffa8>
   10ec4:	d9003817 	ldw	r4,224(sp)
   10ec8:	d8801f17 	ldw	r2,124(sp)
   10ecc:	d9403417 	ldw	r5,208(sp)
   10ed0:	20c7883a 	add	r3,r4,r3
   10ed4:	10800044 	addi	r2,r2,1
   10ed8:	41000115 	stw	r4,4(r8)
   10edc:	41400015 	stw	r5,0(r8)
   10ee0:	d8c02015 	stw	r3,128(sp)
   10ee4:	d8801f15 	stw	r2,124(sp)
   10ee8:	010001c4 	movi	r4,7
   10eec:	20818016 	blt	r4,r2,114f0 <___svfprintf_internal_r+0x1ed8>
   10ef0:	42000204 	addi	r8,r8,8
   10ef4:	0463c83a 	sub	r17,zero,r17
   10ef8:	0440cb0e 	bge	zero,r17,11228 <___svfprintf_internal_r+0x1c10>
   10efc:	05800404 	movi	r22,16
   10f00:	b440e80e 	bge	r22,r17,112a4 <___svfprintf_internal_r+0x1c8c>
   10f04:	014000f4 	movhi	r5,3
   10f08:	296a8a84 	addi	r5,r5,-21974
   10f0c:	d9402c15 	stw	r5,176(sp)
   10f10:	070001c4 	movi	fp,7
   10f14:	dd002d17 	ldw	r20,180(sp)
   10f18:	00000306 	br	10f28 <___svfprintf_internal_r+0x1910>
   10f1c:	42000204 	addi	r8,r8,8
   10f20:	8c7ffc04 	addi	r17,r17,-16
   10f24:	b440e20e 	bge	r22,r17,112b0 <___svfprintf_internal_r+0x1c98>
   10f28:	18c00404 	addi	r3,r3,16
   10f2c:	10800044 	addi	r2,r2,1
   10f30:	45400015 	stw	r21,0(r8)
   10f34:	45800115 	stw	r22,4(r8)
   10f38:	d8c02015 	stw	r3,128(sp)
   10f3c:	d8801f15 	stw	r2,124(sp)
   10f40:	e0bff60e 	bge	fp,r2,10f1c <__alt_data_end+0xfc010f1c>
   10f44:	d9801e04 	addi	r6,sp,120
   10f48:	a00b883a 	mov	r5,r20
   10f4c:	9809883a 	mov	r4,r19
   10f50:	001857c0 	call	1857c <__ssprint_r>
   10f54:	103a971e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10f58:	d8c02017 	ldw	r3,128(sp)
   10f5c:	d8801f17 	ldw	r2,124(sp)
   10f60:	da000404 	addi	r8,sp,16
   10f64:	003fee06 	br	10f20 <__alt_data_end+0xfc010f20>
   10f68:	d9002e17 	ldw	r4,184(sp)
   10f6c:	d9402a17 	ldw	r5,168(sp)
   10f70:	002d883a 	mov	r22,zero
   10f74:	20800104 	addi	r2,r4,4
   10f78:	25000017 	ldw	r20,0(r4)
   10f7c:	283e7d0e 	bge	r5,zero,10974 <__alt_data_end+0xfc010974>
   10f80:	003eda06 	br	10aec <__alt_data_end+0xfc010aec>
   10f84:	d9002e17 	ldw	r4,184(sp)
   10f88:	d9402a17 	ldw	r5,168(sp)
   10f8c:	002d883a 	mov	r22,zero
   10f90:	20800104 	addi	r2,r4,4
   10f94:	25000017 	ldw	r20,0(r4)
   10f98:	283e2d0e 	bge	r5,zero,10850 <__alt_data_end+0xfc010850>
   10f9c:	003f6b06 	br	10d4c <__alt_data_end+0xfc010d4c>
   10fa0:	d8c02e15 	stw	r3,184(sp)
   10fa4:	0039883a 	mov	fp,zero
   10fa8:	003ed206 	br	10af4 <__alt_data_end+0xfc010af4>
   10fac:	bc400043 	ldbu	r17,1(r23)
   10fb0:	84000814 	ori	r16,r16,32
   10fb4:	bdc00044 	addi	r23,r23,1
   10fb8:	8c403fcc 	andi	r17,r17,255
   10fbc:	8c40201c 	xori	r17,r17,128
   10fc0:	8c7fe004 	addi	r17,r17,-128
   10fc4:	0039e906 	br	f76c <__alt_data_end+0xfc00f76c>
   10fc8:	d9402d17 	ldw	r5,180(sp)
   10fcc:	d9801e04 	addi	r6,sp,120
   10fd0:	9809883a 	mov	r4,r19
   10fd4:	001857c0 	call	1857c <__ssprint_r>
   10fd8:	103a761e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   10fdc:	d8c02017 	ldw	r3,128(sp)
   10fe0:	da000404 	addi	r8,sp,16
   10fe4:	003d4a06 	br	10510 <__alt_data_end+0xfc010510>
   10fe8:	d9002a17 	ldw	r4,168(sp)
   10fec:	05bff7c4 	movi	r22,-33
   10ff0:	00bfffc4 	movi	r2,-1
   10ff4:	8dac703a 	and	r22,r17,r22
   10ff8:	20806a26 	beq	r4,r2,111a4 <___svfprintf_internal_r+0x1b8c>
   10ffc:	008011c4 	movi	r2,71
   11000:	b0813726 	beq	r22,r2,114e0 <___svfprintf_internal_r+0x1ec8>
   11004:	d9003717 	ldw	r4,220(sp)
   11008:	90c04014 	ori	r3,r18,256
   1100c:	d8c02c15 	stw	r3,176(sp)
   11010:	20015d16 	blt	r4,zero,11588 <___svfprintf_internal_r+0x1f70>
   11014:	dd003717 	ldw	r20,220(sp)
   11018:	d8002905 	stb	zero,164(sp)
   1101c:	00801984 	movi	r2,102
   11020:	88814026 	beq	r17,r2,11524 <___svfprintf_internal_r+0x1f0c>
   11024:	00801184 	movi	r2,70
   11028:	88817126 	beq	r17,r2,115f0 <___svfprintf_internal_r+0x1fd8>
   1102c:	00801144 	movi	r2,69
   11030:	b0816226 	beq	r22,r2,115bc <___svfprintf_internal_r+0x1fa4>
   11034:	d8c02a17 	ldw	r3,168(sp)
   11038:	d8802104 	addi	r2,sp,132
   1103c:	d8800315 	stw	r2,12(sp)
   11040:	d9403617 	ldw	r5,216(sp)
   11044:	d8802504 	addi	r2,sp,148
   11048:	d8800215 	stw	r2,8(sp)
   1104c:	d8802604 	addi	r2,sp,152
   11050:	d8c00015 	stw	r3,0(sp)
   11054:	d8800115 	stw	r2,4(sp)
   11058:	01c00084 	movi	r7,2
   1105c:	a00d883a 	mov	r6,r20
   11060:	9809883a 	mov	r4,r19
   11064:	d8c03d15 	stw	r3,244(sp)
   11068:	da003e15 	stw	r8,248(sp)
   1106c:	001400c0 	call	1400c <_dtoa_r>
   11070:	1021883a 	mov	r16,r2
   11074:	008019c4 	movi	r2,103
   11078:	d8c03d17 	ldw	r3,244(sp)
   1107c:	da003e17 	ldw	r8,248(sp)
   11080:	8880e726 	beq	r17,r2,11420 <___svfprintf_internal_r+0x1e08>
   11084:	008011c4 	movi	r2,71
   11088:	8880d426 	beq	r17,r2,113dc <___svfprintf_internal_r+0x1dc4>
   1108c:	80f9883a 	add	fp,r16,r3
   11090:	d9003617 	ldw	r4,216(sp)
   11094:	000d883a 	mov	r6,zero
   11098:	000f883a 	mov	r7,zero
   1109c:	a00b883a 	mov	r5,r20
   110a0:	da003e15 	stw	r8,248(sp)
   110a4:	001d96c0 	call	1d96c <__eqdf2>
   110a8:	da003e17 	ldw	r8,248(sp)
   110ac:	1000e426 	beq	r2,zero,11440 <___svfprintf_internal_r+0x1e28>
   110b0:	d8802117 	ldw	r2,132(sp)
   110b4:	1700062e 	bgeu	r2,fp,110d0 <___svfprintf_internal_r+0x1ab8>
   110b8:	01000c04 	movi	r4,48
   110bc:	10c00044 	addi	r3,r2,1
   110c0:	d8c02115 	stw	r3,132(sp)
   110c4:	11000005 	stb	r4,0(r2)
   110c8:	d8802117 	ldw	r2,132(sp)
   110cc:	173ffb36 	bltu	r2,fp,110bc <__alt_data_end+0xfc0110bc>
   110d0:	1405c83a 	sub	r2,r2,r16
   110d4:	d8803315 	stw	r2,204(sp)
   110d8:	008011c4 	movi	r2,71
   110dc:	b080c526 	beq	r22,r2,113f4 <___svfprintf_internal_r+0x1ddc>
   110e0:	00801944 	movi	r2,101
   110e4:	1441d80e 	bge	r2,r17,11848 <___svfprintf_internal_r+0x2230>
   110e8:	d8c02617 	ldw	r3,152(sp)
   110ec:	00801984 	movi	r2,102
   110f0:	d8c03215 	stw	r3,200(sp)
   110f4:	88813426 	beq	r17,r2,115c8 <___svfprintf_internal_r+0x1fb0>
   110f8:	d8c03217 	ldw	r3,200(sp)
   110fc:	d9003317 	ldw	r4,204(sp)
   11100:	19012516 	blt	r3,r4,11598 <___svfprintf_internal_r+0x1f80>
   11104:	9480004c 	andi	r18,r18,1
   11108:	9001841e 	bne	r18,zero,1171c <___svfprintf_internal_r+0x2104>
   1110c:	1805883a 	mov	r2,r3
   11110:	1801cb16 	blt	r3,zero,11840 <___svfprintf_internal_r+0x2228>
   11114:	d8c03217 	ldw	r3,200(sp)
   11118:	044019c4 	movi	r17,103
   1111c:	d8c02b15 	stw	r3,172(sp)
   11120:	df002907 	ldb	fp,164(sp)
   11124:	e000a61e 	bne	fp,zero,113c0 <___svfprintf_internal_r+0x1da8>
   11128:	df002783 	ldbu	fp,158(sp)
   1112c:	d8802915 	stw	r2,164(sp)
   11130:	dc802c17 	ldw	r18,176(sp)
   11134:	d8002a15 	stw	zero,168(sp)
   11138:	003af506 	br	fd10 <__alt_data_end+0xfc00fd10>
   1113c:	040000f4 	movhi	r16,3
   11140:	842a7a04 	addi	r16,r16,-22040
   11144:	003a7e06 	br	fb40 <__alt_data_end+0xfc00fb40>
   11148:	d9003917 	ldw	r4,228(sp)
   1114c:	04001004 	movi	r16,64
   11150:	800b883a 	mov	r5,r16
   11154:	000e4ac0 	call	e4ac <_malloc_r>
   11158:	d9002d17 	ldw	r4,180(sp)
   1115c:	20800015 	stw	r2,0(r4)
   11160:	20800415 	stw	r2,16(r4)
   11164:	1001d026 	beq	r2,zero,118a8 <___svfprintf_internal_r+0x2290>
   11168:	d8802d17 	ldw	r2,180(sp)
   1116c:	14000515 	stw	r16,20(r2)
   11170:	00394406 	br	f684 <__alt_data_end+0xfc00f684>
   11174:	040000f4 	movhi	r16,3
   11178:	842a7c04 	addi	r16,r16,-22032
   1117c:	003ee106 	br	10d04 <__alt_data_end+0xfc010d04>
   11180:	d9402d17 	ldw	r5,180(sp)
   11184:	d9801e04 	addi	r6,sp,120
   11188:	9809883a 	mov	r4,r19
   1118c:	001857c0 	call	1857c <__ssprint_r>
   11190:	103a081e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   11194:	dc402617 	ldw	r17,152(sp)
   11198:	d8c02017 	ldw	r3,128(sp)
   1119c:	da000404 	addi	r8,sp,16
   111a0:	003f4306 	br	10eb0 <__alt_data_end+0xfc010eb0>
   111a4:	01400184 	movi	r5,6
   111a8:	d9402a15 	stw	r5,168(sp)
   111ac:	003f9506 	br	11004 <__alt_data_end+0xfc011004>
   111b0:	d8c02e17 	ldw	r3,184(sp)
   111b4:	1d000017 	ldw	r20,0(r3)
   111b8:	18c00104 	addi	r3,r3,4
   111bc:	d8c02e15 	stw	r3,184(sp)
   111c0:	a02dd7fa 	srai	r22,r20,31
   111c4:	b005883a 	mov	r2,r22
   111c8:	003a7606 	br	fba4 <__alt_data_end+0xfc00fba4>
   111cc:	d9002e17 	ldw	r4,184(sp)
   111d0:	002d883a 	mov	r22,zero
   111d4:	25000017 	ldw	r20,0(r4)
   111d8:	21000104 	addi	r4,r4,4
   111dc:	d9002e15 	stw	r4,184(sp)
   111e0:	003bdd06 	br	10158 <__alt_data_end+0xfc010158>
   111e4:	9480100c 	andi	r18,r18,64
   111e8:	90006e26 	beq	r18,zero,113a4 <___svfprintf_internal_r+0x1d8c>
   111ec:	d9402e17 	ldw	r5,184(sp)
   111f0:	d8c02f17 	ldw	r3,188(sp)
   111f4:	28800017 	ldw	r2,0(r5)
   111f8:	29400104 	addi	r5,r5,4
   111fc:	d9402e15 	stw	r5,184(sp)
   11200:	10c0000d 	sth	r3,0(r2)
   11204:	00392f06 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   11208:	d9402d17 	ldw	r5,180(sp)
   1120c:	d9801e04 	addi	r6,sp,120
   11210:	9809883a 	mov	r4,r19
   11214:	001857c0 	call	1857c <__ssprint_r>
   11218:	1039e61e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   1121c:	d8c02017 	ldw	r3,128(sp)
   11220:	d8801f17 	ldw	r2,124(sp)
   11224:	da000404 	addi	r8,sp,16
   11228:	d9403317 	ldw	r5,204(sp)
   1122c:	10800044 	addi	r2,r2,1
   11230:	44000015 	stw	r16,0(r8)
   11234:	28c7883a 	add	r3,r5,r3
   11238:	003b5506 	br	ff90 <__alt_data_end+0xfc00ff90>
   1123c:	8009883a 	mov	r4,r16
   11240:	df003e15 	stw	fp,248(sp)
   11244:	000f5800 	call	f580 <strlen>
   11248:	d8802b15 	stw	r2,172(sp)
   1124c:	da003e17 	ldw	r8,248(sp)
   11250:	103c160e 	bge	r2,zero,102ac <__alt_data_end+0xfc0102ac>
   11254:	0005883a 	mov	r2,zero
   11258:	003c1406 	br	102ac <__alt_data_end+0xfc0102ac>
   1125c:	00bfffc4 	movi	r2,-1
   11260:	0039d906 	br	f9c8 <__alt_data_end+0xfc00f9c8>
   11264:	010000f4 	movhi	r4,3
   11268:	212a8e84 	addi	r4,r4,-21958
   1126c:	d9003515 	stw	r4,212(sp)
   11270:	003ae406 	br	fe04 <__alt_data_end+0xfc00fe04>
   11274:	013fffc4 	movi	r4,-1
   11278:	0039fa06 	br	fa64 <__alt_data_end+0xfc00fa64>
   1127c:	d9402d17 	ldw	r5,180(sp)
   11280:	d9801e04 	addi	r6,sp,120
   11284:	9809883a 	mov	r4,r19
   11288:	001857c0 	call	1857c <__ssprint_r>
   1128c:	1039c91e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   11290:	d8c02017 	ldw	r3,128(sp)
   11294:	da000404 	addi	r8,sp,16
   11298:	003d8406 	br	108ac <__alt_data_end+0xfc0108ac>
   1129c:	0023883a 	mov	r17,zero
   112a0:	003d8306 	br	108b0 <__alt_data_end+0xfc0108b0>
   112a4:	010000f4 	movhi	r4,3
   112a8:	212a8a84 	addi	r4,r4,-21974
   112ac:	d9002c15 	stw	r4,176(sp)
   112b0:	d9002c17 	ldw	r4,176(sp)
   112b4:	1c47883a 	add	r3,r3,r17
   112b8:	10800044 	addi	r2,r2,1
   112bc:	41000015 	stw	r4,0(r8)
   112c0:	44400115 	stw	r17,4(r8)
   112c4:	d8c02015 	stw	r3,128(sp)
   112c8:	d8801f15 	stw	r2,124(sp)
   112cc:	010001c4 	movi	r4,7
   112d0:	20bfcd16 	blt	r4,r2,11208 <__alt_data_end+0xfc011208>
   112d4:	42000204 	addi	r8,r8,8
   112d8:	003fd306 	br	11228 <__alt_data_end+0xfc011228>
   112dc:	d9402d17 	ldw	r5,180(sp)
   112e0:	d9801e04 	addi	r6,sp,120
   112e4:	9809883a 	mov	r4,r19
   112e8:	001857c0 	call	1857c <__ssprint_r>
   112ec:	1039b11e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   112f0:	d8802617 	ldw	r2,152(sp)
   112f4:	d8c02017 	ldw	r3,128(sp)
   112f8:	da000404 	addi	r8,sp,16
   112fc:	003e1c06 	br	10b70 <__alt_data_end+0xfc010b70>
   11300:	d8802a17 	ldw	r2,168(sp)
   11304:	00c00184 	movi	r3,6
   11308:	1880012e 	bgeu	r3,r2,11310 <___svfprintf_internal_r+0x1cf8>
   1130c:	1805883a 	mov	r2,r3
   11310:	d8802b15 	stw	r2,172(sp)
   11314:	1000f316 	blt	r2,zero,116e4 <___svfprintf_internal_r+0x20cc>
   11318:	040000f4 	movhi	r16,3
   1131c:	d8802915 	stw	r2,164(sp)
   11320:	dd002e15 	stw	r20,184(sp)
   11324:	d8002a15 	stw	zero,168(sp)
   11328:	d8003215 	stw	zero,200(sp)
   1132c:	842a8804 	addi	r16,r16,-21984
   11330:	0039883a 	mov	fp,zero
   11334:	003a7d06 	br	fd2c <__alt_data_end+0xfc00fd2c>
   11338:	010000f4 	movhi	r4,3
   1133c:	212a8e84 	addi	r4,r4,-21958
   11340:	d9003515 	stw	r4,212(sp)
   11344:	003b3d06 	br	1003c <__alt_data_end+0xfc01003c>
   11348:	d9402d17 	ldw	r5,180(sp)
   1134c:	d9801e04 	addi	r6,sp,120
   11350:	9809883a 	mov	r4,r19
   11354:	001857c0 	call	1857c <__ssprint_r>
   11358:	1039961e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   1135c:	d8802617 	ldw	r2,152(sp)
   11360:	d9403317 	ldw	r5,204(sp)
   11364:	d8c02017 	ldw	r3,128(sp)
   11368:	da000404 	addi	r8,sp,16
   1136c:	2885c83a 	sub	r2,r5,r2
   11370:	003e1006 	br	10bb4 <__alt_data_end+0xfc010bb4>
   11374:	00800044 	movi	r2,1
   11378:	10803fcc 	andi	r2,r2,255
   1137c:	00c00044 	movi	r3,1
   11380:	10fa1026 	beq	r2,r3,fbc4 <__alt_data_end+0xfc00fbc4>
   11384:	00c00084 	movi	r3,2
   11388:	10fb8226 	beq	r2,r3,10194 <__alt_data_end+0xfc010194>
   1138c:	003a4206 	br	fc98 <__alt_data_end+0xfc00fc98>
   11390:	0021883a 	mov	r16,zero
   11394:	003e0806 	br	10bb8 <__alt_data_end+0xfc010bb8>
   11398:	07000b44 	movi	fp,45
   1139c:	df002785 	stb	fp,158(sp)
   113a0:	0039e306 	br	fb30 <__alt_data_end+0xfc00fb30>
   113a4:	d9002e17 	ldw	r4,184(sp)
   113a8:	d9402f17 	ldw	r5,188(sp)
   113ac:	20800017 	ldw	r2,0(r4)
   113b0:	21000104 	addi	r4,r4,4
   113b4:	d9002e15 	stw	r4,184(sp)
   113b8:	11400015 	stw	r5,0(r2)
   113bc:	0038c106 	br	f6c4 <__alt_data_end+0xfc00f6c4>
   113c0:	00c00b44 	movi	r3,45
   113c4:	d8c02785 	stb	r3,158(sp)
   113c8:	d8802915 	stw	r2,164(sp)
   113cc:	dc802c17 	ldw	r18,176(sp)
   113d0:	d8002a15 	stw	zero,168(sp)
   113d4:	07000b44 	movi	fp,45
   113d8:	003a5106 	br	fd20 <__alt_data_end+0xfc00fd20>
   113dc:	9080004c 	andi	r2,r18,1
   113e0:	1000941e 	bne	r2,zero,11634 <___svfprintf_internal_r+0x201c>
   113e4:	d8802117 	ldw	r2,132(sp)
   113e8:	1405c83a 	sub	r2,r2,r16
   113ec:	d8803315 	stw	r2,204(sp)
   113f0:	b441151e 	bne	r22,r17,11848 <___svfprintf_internal_r+0x2230>
   113f4:	dd802617 	ldw	r22,152(sp)
   113f8:	00bfff44 	movi	r2,-3
   113fc:	b0801a16 	blt	r22,r2,11468 <___svfprintf_internal_r+0x1e50>
   11400:	d9402a17 	ldw	r5,168(sp)
   11404:	2d801816 	blt	r5,r22,11468 <___svfprintf_internal_r+0x1e50>
   11408:	dd803215 	stw	r22,200(sp)
   1140c:	003f3a06 	br	110f8 <__alt_data_end+0xfc0110f8>
   11410:	1025883a 	mov	r18,r2
   11414:	0039883a 	mov	fp,zero
   11418:	00800084 	movi	r2,2
   1141c:	003fd606 	br	11378 <__alt_data_end+0xfc011378>
   11420:	9080004c 	andi	r2,r18,1
   11424:	103f191e 	bne	r2,zero,1108c <__alt_data_end+0xfc01108c>
   11428:	d8802117 	ldw	r2,132(sp)
   1142c:	003f2806 	br	110d0 <__alt_data_end+0xfc0110d0>
   11430:	010000f4 	movhi	r4,3
   11434:	212a8a84 	addi	r4,r4,-21974
   11438:	d9002c15 	stw	r4,176(sp)
   1143c:	003c7c06 	br	10630 <__alt_data_end+0xfc010630>
   11440:	e005883a 	mov	r2,fp
   11444:	003f2206 	br	110d0 <__alt_data_end+0xfc0110d0>
   11448:	d9002a17 	ldw	r4,168(sp)
   1144c:	df002783 	ldbu	fp,158(sp)
   11450:	dd002e15 	stw	r20,184(sp)
   11454:	d9002915 	stw	r4,164(sp)
   11458:	d9002b15 	stw	r4,172(sp)
   1145c:	d8002a15 	stw	zero,168(sp)
   11460:	d8003215 	stw	zero,200(sp)
   11464:	003a2a06 	br	fd10 <__alt_data_end+0xfc00fd10>
   11468:	8c7fff84 	addi	r17,r17,-2
   1146c:	b5bfffc4 	addi	r22,r22,-1
   11470:	dd802615 	stw	r22,152(sp)
   11474:	dc4022c5 	stb	r17,139(sp)
   11478:	b000c316 	blt	r22,zero,11788 <___svfprintf_internal_r+0x2170>
   1147c:	00800ac4 	movi	r2,43
   11480:	d8802305 	stb	r2,140(sp)
   11484:	00800244 	movi	r2,9
   11488:	15806e16 	blt	r2,r22,11644 <___svfprintf_internal_r+0x202c>
   1148c:	00800c04 	movi	r2,48
   11490:	b5800c04 	addi	r22,r22,48
   11494:	d8802345 	stb	r2,141(sp)
   11498:	dd802385 	stb	r22,142(sp)
   1149c:	d88023c4 	addi	r2,sp,143
   114a0:	df0022c4 	addi	fp,sp,139
   114a4:	d8c03317 	ldw	r3,204(sp)
   114a8:	1739c83a 	sub	fp,r2,fp
   114ac:	d9003317 	ldw	r4,204(sp)
   114b0:	e0c7883a 	add	r3,fp,r3
   114b4:	df003b15 	stw	fp,236(sp)
   114b8:	d8c02b15 	stw	r3,172(sp)
   114bc:	00800044 	movi	r2,1
   114c0:	1100b70e 	bge	r2,r4,117a0 <___svfprintf_internal_r+0x2188>
   114c4:	d8c02b17 	ldw	r3,172(sp)
   114c8:	18c00044 	addi	r3,r3,1
   114cc:	d8c02b15 	stw	r3,172(sp)
   114d0:	1805883a 	mov	r2,r3
   114d4:	1800b016 	blt	r3,zero,11798 <___svfprintf_internal_r+0x2180>
   114d8:	d8003215 	stw	zero,200(sp)
   114dc:	003f1006 	br	11120 <__alt_data_end+0xfc011120>
   114e0:	d8802a17 	ldw	r2,168(sp)
   114e4:	103ec71e 	bne	r2,zero,11004 <__alt_data_end+0xfc011004>
   114e8:	dc002a15 	stw	r16,168(sp)
   114ec:	003ec506 	br	11004 <__alt_data_end+0xfc011004>
   114f0:	d9402d17 	ldw	r5,180(sp)
   114f4:	d9801e04 	addi	r6,sp,120
   114f8:	9809883a 	mov	r4,r19
   114fc:	001857c0 	call	1857c <__ssprint_r>
   11500:	10392c1e 	bne	r2,zero,f9b4 <__alt_data_end+0xfc00f9b4>
   11504:	dc402617 	ldw	r17,152(sp)
   11508:	d8c02017 	ldw	r3,128(sp)
   1150c:	d8801f17 	ldw	r2,124(sp)
   11510:	da000404 	addi	r8,sp,16
   11514:	003e7706 	br	10ef4 <__alt_data_end+0xfc010ef4>
   11518:	182f883a 	mov	r23,r3
   1151c:	d8002a15 	stw	zero,168(sp)
   11520:	00389306 	br	f770 <__alt_data_end+0xfc00f770>
   11524:	d8c02a17 	ldw	r3,168(sp)
   11528:	d8802104 	addi	r2,sp,132
   1152c:	d8800315 	stw	r2,12(sp)
   11530:	d9403617 	ldw	r5,216(sp)
   11534:	d8802504 	addi	r2,sp,148
   11538:	d8800215 	stw	r2,8(sp)
   1153c:	d8802604 	addi	r2,sp,152
   11540:	d8c00015 	stw	r3,0(sp)
   11544:	9809883a 	mov	r4,r19
   11548:	d8800115 	stw	r2,4(sp)
   1154c:	01c000c4 	movi	r7,3
   11550:	a00d883a 	mov	r6,r20
   11554:	da003e15 	stw	r8,248(sp)
   11558:	001400c0 	call	1400c <_dtoa_r>
   1155c:	d9002a17 	ldw	r4,168(sp)
   11560:	da003e17 	ldw	r8,248(sp)
   11564:	1021883a 	mov	r16,r2
   11568:	1139883a 	add	fp,r2,r4
   1156c:	2007883a 	mov	r3,r4
   11570:	81000007 	ldb	r4,0(r16)
   11574:	00800c04 	movi	r2,48
   11578:	20806f26 	beq	r4,r2,11738 <___svfprintf_internal_r+0x2120>
   1157c:	d8c02617 	ldw	r3,152(sp)
   11580:	e0f9883a 	add	fp,fp,r3
   11584:	003ec206 	br	11090 <__alt_data_end+0xfc011090>
   11588:	00c00b44 	movi	r3,45
   1158c:	2520003c 	xorhi	r20,r4,32768
   11590:	d8c02905 	stb	r3,164(sp)
   11594:	003ea106 	br	1101c <__alt_data_end+0xfc01101c>
   11598:	d8c03217 	ldw	r3,200(sp)
   1159c:	00c0890e 	bge	zero,r3,117c4 <___svfprintf_internal_r+0x21ac>
   115a0:	00800044 	movi	r2,1
   115a4:	d9003317 	ldw	r4,204(sp)
   115a8:	1105883a 	add	r2,r2,r4
   115ac:	d8802b15 	stw	r2,172(sp)
   115b0:	10005f16 	blt	r2,zero,11730 <___svfprintf_internal_r+0x2118>
   115b4:	044019c4 	movi	r17,103
   115b8:	003ed906 	br	11120 <__alt_data_end+0xfc011120>
   115bc:	d9002a17 	ldw	r4,168(sp)
   115c0:	20c00044 	addi	r3,r4,1
   115c4:	003e9c06 	br	11038 <__alt_data_end+0xfc011038>
   115c8:	d9002a17 	ldw	r4,168(sp)
   115cc:	00c0680e 	bge	zero,r3,11770 <___svfprintf_internal_r+0x2158>
   115d0:	2000461e 	bne	r4,zero,116ec <___svfprintf_internal_r+0x20d4>
   115d4:	9480004c 	andi	r18,r18,1
   115d8:	9000441e 	bne	r18,zero,116ec <___svfprintf_internal_r+0x20d4>
   115dc:	1805883a 	mov	r2,r3
   115e0:	1800a116 	blt	r3,zero,11868 <___svfprintf_internal_r+0x2250>
   115e4:	d8c03217 	ldw	r3,200(sp)
   115e8:	d8c02b15 	stw	r3,172(sp)
   115ec:	003ecc06 	br	11120 <__alt_data_end+0xfc011120>
   115f0:	d9402a17 	ldw	r5,168(sp)
   115f4:	d8802104 	addi	r2,sp,132
   115f8:	d8800315 	stw	r2,12(sp)
   115fc:	d9400015 	stw	r5,0(sp)
   11600:	d8802504 	addi	r2,sp,148
   11604:	d9403617 	ldw	r5,216(sp)
   11608:	d8800215 	stw	r2,8(sp)
   1160c:	d8802604 	addi	r2,sp,152
   11610:	d8800115 	stw	r2,4(sp)
   11614:	01c000c4 	movi	r7,3
   11618:	a00d883a 	mov	r6,r20
   1161c:	9809883a 	mov	r4,r19
   11620:	da003e15 	stw	r8,248(sp)
   11624:	001400c0 	call	1400c <_dtoa_r>
   11628:	d8c02a17 	ldw	r3,168(sp)
   1162c:	da003e17 	ldw	r8,248(sp)
   11630:	1021883a 	mov	r16,r2
   11634:	00801184 	movi	r2,70
   11638:	80f9883a 	add	fp,r16,r3
   1163c:	88bfcc26 	beq	r17,r2,11570 <__alt_data_end+0xfc011570>
   11640:	003e9306 	br	11090 <__alt_data_end+0xfc011090>
   11644:	df0022c4 	addi	fp,sp,139
   11648:	dc002a15 	stw	r16,168(sp)
   1164c:	9829883a 	mov	r20,r19
   11650:	e021883a 	mov	r16,fp
   11654:	4027883a 	mov	r19,r8
   11658:	b009883a 	mov	r4,r22
   1165c:	01400284 	movi	r5,10
   11660:	000cdd40 	call	cdd4 <__modsi3>
   11664:	10800c04 	addi	r2,r2,48
   11668:	843fffc4 	addi	r16,r16,-1
   1166c:	b009883a 	mov	r4,r22
   11670:	01400284 	movi	r5,10
   11674:	80800005 	stb	r2,0(r16)
   11678:	000cd500 	call	cd50 <__divsi3>
   1167c:	102d883a 	mov	r22,r2
   11680:	00800244 	movi	r2,9
   11684:	15bff416 	blt	r2,r22,11658 <__alt_data_end+0xfc011658>
   11688:	9811883a 	mov	r8,r19
   1168c:	b0800c04 	addi	r2,r22,48
   11690:	a027883a 	mov	r19,r20
   11694:	8029883a 	mov	r20,r16
   11698:	a17fffc4 	addi	r5,r20,-1
   1169c:	a0bfffc5 	stb	r2,-1(r20)
   116a0:	dc002a17 	ldw	r16,168(sp)
   116a4:	2f00782e 	bgeu	r5,fp,11888 <___svfprintf_internal_r+0x2270>
   116a8:	d9c02384 	addi	r7,sp,142
   116ac:	3d0fc83a 	sub	r7,r7,r20
   116b0:	d9002344 	addi	r4,sp,141
   116b4:	e1cf883a 	add	r7,fp,r7
   116b8:	00000106 	br	116c0 <___svfprintf_internal_r+0x20a8>
   116bc:	28800003 	ldbu	r2,0(r5)
   116c0:	20800005 	stb	r2,0(r4)
   116c4:	21000044 	addi	r4,r4,1
   116c8:	29400044 	addi	r5,r5,1
   116cc:	21fffb1e 	bne	r4,r7,116bc <__alt_data_end+0xfc0116bc>
   116d0:	d8802304 	addi	r2,sp,140
   116d4:	1505c83a 	sub	r2,r2,r20
   116d8:	d8c02344 	addi	r3,sp,141
   116dc:	1885883a 	add	r2,r3,r2
   116e0:	003f7006 	br	114a4 <__alt_data_end+0xfc0114a4>
   116e4:	0005883a 	mov	r2,zero
   116e8:	003f0b06 	br	11318 <__alt_data_end+0xfc011318>
   116ec:	d9002a17 	ldw	r4,168(sp)
   116f0:	d8c03217 	ldw	r3,200(sp)
   116f4:	20800044 	addi	r2,r4,1
   116f8:	1885883a 	add	r2,r3,r2
   116fc:	d8802b15 	stw	r2,172(sp)
   11700:	103e870e 	bge	r2,zero,11120 <__alt_data_end+0xfc011120>
   11704:	0005883a 	mov	r2,zero
   11708:	003e8506 	br	11120 <__alt_data_end+0xfc011120>
   1170c:	010000f4 	movhi	r4,3
   11710:	212a8a84 	addi	r4,r4,-21974
   11714:	d9002c15 	stw	r4,176(sp)
   11718:	003cc506 	br	10a30 <__alt_data_end+0xfc010a30>
   1171c:	d8c03217 	ldw	r3,200(sp)
   11720:	18c00044 	addi	r3,r3,1
   11724:	d8c02b15 	stw	r3,172(sp)
   11728:	1805883a 	mov	r2,r3
   1172c:	183fa10e 	bge	r3,zero,115b4 <__alt_data_end+0xfc0115b4>
   11730:	0005883a 	mov	r2,zero
   11734:	003f9f06 	br	115b4 <__alt_data_end+0xfc0115b4>
   11738:	d9003617 	ldw	r4,216(sp)
   1173c:	000d883a 	mov	r6,zero
   11740:	000f883a 	mov	r7,zero
   11744:	a00b883a 	mov	r5,r20
   11748:	d8c03d15 	stw	r3,244(sp)
   1174c:	da003e15 	stw	r8,248(sp)
   11750:	001d96c0 	call	1d96c <__eqdf2>
   11754:	d8c03d17 	ldw	r3,244(sp)
   11758:	da003e17 	ldw	r8,248(sp)
   1175c:	103f8726 	beq	r2,zero,1157c <__alt_data_end+0xfc01157c>
   11760:	00800044 	movi	r2,1
   11764:	10c7c83a 	sub	r3,r2,r3
   11768:	d8c02615 	stw	r3,152(sp)
   1176c:	003f8406 	br	11580 <__alt_data_end+0xfc011580>
   11770:	20000e1e 	bne	r4,zero,117ac <___svfprintf_internal_r+0x2194>
   11774:	9480004c 	andi	r18,r18,1
   11778:	90000c1e 	bne	r18,zero,117ac <___svfprintf_internal_r+0x2194>
   1177c:	00800044 	movi	r2,1
   11780:	d8802b15 	stw	r2,172(sp)
   11784:	003e6606 	br	11120 <__alt_data_end+0xfc011120>
   11788:	00800b44 	movi	r2,45
   1178c:	05adc83a 	sub	r22,zero,r22
   11790:	d8802305 	stb	r2,140(sp)
   11794:	003f3b06 	br	11484 <__alt_data_end+0xfc011484>
   11798:	0005883a 	mov	r2,zero
   1179c:	003f4e06 	br	114d8 <__alt_data_end+0xfc0114d8>
   117a0:	90a4703a 	and	r18,r18,r2
   117a4:	903f4a26 	beq	r18,zero,114d0 <__alt_data_end+0xfc0114d0>
   117a8:	003f4606 	br	114c4 <__alt_data_end+0xfc0114c4>
   117ac:	d8c02a17 	ldw	r3,168(sp)
   117b0:	18c00084 	addi	r3,r3,2
   117b4:	d8c02b15 	stw	r3,172(sp)
   117b8:	1805883a 	mov	r2,r3
   117bc:	183e580e 	bge	r3,zero,11120 <__alt_data_end+0xfc011120>
   117c0:	003fd006 	br	11704 <__alt_data_end+0xfc011704>
   117c4:	00800084 	movi	r2,2
   117c8:	10c5c83a 	sub	r2,r2,r3
   117cc:	003f7506 	br	115a4 <__alt_data_end+0xfc0115a4>
   117d0:	d9402e17 	ldw	r5,184(sp)
   117d4:	d9002e17 	ldw	r4,184(sp)
   117d8:	bc400043 	ldbu	r17,1(r23)
   117dc:	29400017 	ldw	r5,0(r5)
   117e0:	20800104 	addi	r2,r4,4
   117e4:	d8802e15 	stw	r2,184(sp)
   117e8:	d9402a15 	stw	r5,168(sp)
   117ec:	182f883a 	mov	r23,r3
   117f0:	283df10e 	bge	r5,zero,10fb8 <__alt_data_end+0xfc010fb8>
   117f4:	8c403fcc 	andi	r17,r17,255
   117f8:	017fffc4 	movi	r5,-1
   117fc:	8c40201c 	xori	r17,r17,128
   11800:	d9402a15 	stw	r5,168(sp)
   11804:	8c7fe004 	addi	r17,r17,-128
   11808:	0037d806 	br	f76c <__alt_data_end+0xfc00f76c>
   1180c:	9080004c 	andi	r2,r18,1
   11810:	0039883a 	mov	fp,zero
   11814:	10000726 	beq	r2,zero,11834 <___svfprintf_internal_r+0x221c>
   11818:	d8c02817 	ldw	r3,160(sp)
   1181c:	dc001dc4 	addi	r16,sp,119
   11820:	00800c04 	movi	r2,48
   11824:	1c07c83a 	sub	r3,r3,r16
   11828:	d8801dc5 	stb	r2,119(sp)
   1182c:	d8c02b15 	stw	r3,172(sp)
   11830:	00393106 	br	fcf8 <__alt_data_end+0xfc00fcf8>
   11834:	d8002b15 	stw	zero,172(sp)
   11838:	dc001e04 	addi	r16,sp,120
   1183c:	00392e06 	br	fcf8 <__alt_data_end+0xfc00fcf8>
   11840:	0005883a 	mov	r2,zero
   11844:	003e3306 	br	11114 <__alt_data_end+0xfc011114>
   11848:	dd802617 	ldw	r22,152(sp)
   1184c:	003f0706 	br	1146c <__alt_data_end+0xfc01146c>
   11850:	d8c02b03 	ldbu	r3,172(sp)
   11854:	d8c02785 	stb	r3,158(sp)
   11858:	003a3506 	br	10130 <__alt_data_end+0xfc010130>
   1185c:	d8c02b03 	ldbu	r3,172(sp)
   11860:	d8c02785 	stb	r3,158(sp)
   11864:	003a1706 	br	100c4 <__alt_data_end+0xfc0100c4>
   11868:	0005883a 	mov	r2,zero
   1186c:	003f5d06 	br	115e4 <__alt_data_end+0xfc0115e4>
   11870:	d8c02b03 	ldbu	r3,172(sp)
   11874:	d8c02785 	stb	r3,158(sp)
   11878:	0038f306 	br	fc48 <__alt_data_end+0xfc00fc48>
   1187c:	d8c02b03 	ldbu	r3,172(sp)
   11880:	d8c02785 	stb	r3,158(sp)
   11884:	0038be06 	br	fb80 <__alt_data_end+0xfc00fb80>
   11888:	d8802344 	addi	r2,sp,141
   1188c:	003f0506 	br	114a4 <__alt_data_end+0xfc0114a4>
   11890:	d8c02b03 	ldbu	r3,172(sp)
   11894:	d8c02785 	stb	r3,158(sp)
   11898:	00388b06 	br	fac8 <__alt_data_end+0xfc00fac8>
   1189c:	d8c02b03 	ldbu	r3,172(sp)
   118a0:	d8c02785 	stb	r3,158(sp)
   118a4:	003ad706 	br	10404 <__alt_data_end+0xfc010404>
   118a8:	d9403917 	ldw	r5,228(sp)
   118ac:	00800304 	movi	r2,12
   118b0:	28800015 	stw	r2,0(r5)
   118b4:	00bfffc4 	movi	r2,-1
   118b8:	00384306 	br	f9c8 <__alt_data_end+0xfc00f9c8>
   118bc:	d8c02b03 	ldbu	r3,172(sp)
   118c0:	d8c02785 	stb	r3,158(sp)
   118c4:	003ab606 	br	103a0 <__alt_data_end+0xfc0103a0>
   118c8:	d8c02b03 	ldbu	r3,172(sp)
   118cc:	d8c02785 	stb	r3,158(sp)
   118d0:	003a8906 	br	102f8 <__alt_data_end+0xfc0102f8>

000118d4 <_times_r>:
   118d4:	2809883a 	mov	r4,r5
   118d8:	001f9841 	jmpi	1f984 <times>

000118dc <___vfprintf_internal_r>:
   118dc:	deffb804 	addi	sp,sp,-288
   118e0:	dfc04715 	stw	ra,284(sp)
   118e4:	ddc04515 	stw	r23,276(sp)
   118e8:	dd404315 	stw	r21,268(sp)
   118ec:	d9002d15 	stw	r4,180(sp)
   118f0:	282f883a 	mov	r23,r5
   118f4:	302b883a 	mov	r21,r6
   118f8:	d9c02e15 	stw	r7,184(sp)
   118fc:	df004615 	stw	fp,280(sp)
   11900:	dd804415 	stw	r22,272(sp)
   11904:	dd004215 	stw	r20,264(sp)
   11908:	dcc04115 	stw	r19,260(sp)
   1190c:	dc804015 	stw	r18,256(sp)
   11910:	dc403f15 	stw	r17,252(sp)
   11914:	dc003e15 	stw	r16,248(sp)
   11918:	001681c0 	call	1681c <_localeconv_r>
   1191c:	10800017 	ldw	r2,0(r2)
   11920:	1009883a 	mov	r4,r2
   11924:	d8803415 	stw	r2,208(sp)
   11928:	000f5800 	call	f580 <strlen>
   1192c:	d8803715 	stw	r2,220(sp)
   11930:	d8802d17 	ldw	r2,180(sp)
   11934:	10000226 	beq	r2,zero,11940 <___vfprintf_internal_r+0x64>
   11938:	10800e17 	ldw	r2,56(r2)
   1193c:	1000fb26 	beq	r2,zero,11d2c <___vfprintf_internal_r+0x450>
   11940:	b880030b 	ldhu	r2,12(r23)
   11944:	10c8000c 	andi	r3,r2,8192
   11948:	1800061e 	bne	r3,zero,11964 <___vfprintf_internal_r+0x88>
   1194c:	b9001917 	ldw	r4,100(r23)
   11950:	00f7ffc4 	movi	r3,-8193
   11954:	10880014 	ori	r2,r2,8192
   11958:	20c6703a 	and	r3,r4,r3
   1195c:	b880030d 	sth	r2,12(r23)
   11960:	b8c01915 	stw	r3,100(r23)
   11964:	10c0020c 	andi	r3,r2,8
   11968:	1800c326 	beq	r3,zero,11c78 <___vfprintf_internal_r+0x39c>
   1196c:	b8c00417 	ldw	r3,16(r23)
   11970:	1800c126 	beq	r3,zero,11c78 <___vfprintf_internal_r+0x39c>
   11974:	1080068c 	andi	r2,r2,26
   11978:	00c00284 	movi	r3,10
   1197c:	10c0c626 	beq	r2,r3,11c98 <___vfprintf_internal_r+0x3bc>
   11980:	d8c00404 	addi	r3,sp,16
   11984:	050000f4 	movhi	r20,3
   11988:	d9001e04 	addi	r4,sp,120
   1198c:	a52a9284 	addi	r20,r20,-21942
   11990:	d8c01e15 	stw	r3,120(sp)
   11994:	d8002015 	stw	zero,128(sp)
   11998:	d8001f15 	stw	zero,124(sp)
   1199c:	d8003315 	stw	zero,204(sp)
   119a0:	d8003615 	stw	zero,216(sp)
   119a4:	d8003815 	stw	zero,224(sp)
   119a8:	1811883a 	mov	r8,r3
   119ac:	d8003915 	stw	zero,228(sp)
   119b0:	d8003a15 	stw	zero,232(sp)
   119b4:	d8002f15 	stw	zero,188(sp)
   119b8:	d9002815 	stw	r4,160(sp)
   119bc:	a8800007 	ldb	r2,0(r21)
   119c0:	10028b26 	beq	r2,zero,123f0 <___vfprintf_internal_r+0xb14>
   119c4:	00c00944 	movi	r3,37
   119c8:	a823883a 	mov	r17,r21
   119cc:	10c0021e 	bne	r2,r3,119d8 <___vfprintf_internal_r+0xfc>
   119d0:	00001406 	br	11a24 <___vfprintf_internal_r+0x148>
   119d4:	10c00326 	beq	r2,r3,119e4 <___vfprintf_internal_r+0x108>
   119d8:	8c400044 	addi	r17,r17,1
   119dc:	88800007 	ldb	r2,0(r17)
   119e0:	103ffc1e 	bne	r2,zero,119d4 <__alt_data_end+0xfc0119d4>
   119e4:	8d61c83a 	sub	r16,r17,r21
   119e8:	80000e26 	beq	r16,zero,11a24 <___vfprintf_internal_r+0x148>
   119ec:	d8c02017 	ldw	r3,128(sp)
   119f0:	d8801f17 	ldw	r2,124(sp)
   119f4:	45400015 	stw	r21,0(r8)
   119f8:	1c07883a 	add	r3,r3,r16
   119fc:	10800044 	addi	r2,r2,1
   11a00:	d8c02015 	stw	r3,128(sp)
   11a04:	44000115 	stw	r16,4(r8)
   11a08:	d8801f15 	stw	r2,124(sp)
   11a0c:	00c001c4 	movi	r3,7
   11a10:	1880a916 	blt	r3,r2,11cb8 <___vfprintf_internal_r+0x3dc>
   11a14:	42000204 	addi	r8,r8,8
   11a18:	d9402f17 	ldw	r5,188(sp)
   11a1c:	2c0b883a 	add	r5,r5,r16
   11a20:	d9402f15 	stw	r5,188(sp)
   11a24:	88800007 	ldb	r2,0(r17)
   11a28:	1000aa26 	beq	r2,zero,11cd4 <___vfprintf_internal_r+0x3f8>
   11a2c:	8d400044 	addi	r21,r17,1
   11a30:	8c400047 	ldb	r17,1(r17)
   11a34:	0021883a 	mov	r16,zero
   11a38:	00bfffc4 	movi	r2,-1
   11a3c:	0025883a 	mov	r18,zero
   11a40:	dc002905 	stb	r16,164(sp)
   11a44:	d8002785 	stb	zero,158(sp)
   11a48:	d8002b05 	stb	zero,172(sp)
   11a4c:	d8802a15 	stw	r2,168(sp)
   11a50:	d8003115 	stw	zero,196(sp)
   11a54:	04c01604 	movi	r19,88
   11a58:	05800244 	movi	r22,9
   11a5c:	9021883a 	mov	r16,r18
   11a60:	4039883a 	mov	fp,r8
   11a64:	ad400044 	addi	r21,r21,1
   11a68:	88bff804 	addi	r2,r17,-32
   11a6c:	98833236 	bltu	r19,r2,12738 <___vfprintf_internal_r+0xe5c>
   11a70:	100490ba 	slli	r2,r2,2
   11a74:	00c00074 	movhi	r3,1
   11a78:	18c6a204 	addi	r3,r3,6792
   11a7c:	10c5883a 	add	r2,r2,r3
   11a80:	10800017 	ldw	r2,0(r2)
   11a84:	1000683a 	jmp	r2
   11a88:	00012630 	cmpltui	zero,zero,1176
   11a8c:	00012738 	rdprs	zero,zero,1180
   11a90:	00012738 	rdprs	zero,zero,1180
   11a94:	00012650 	cmplti	zero,zero,1177
   11a98:	00012738 	rdprs	zero,zero,1180
   11a9c:	00012738 	rdprs	zero,zero,1180
   11aa0:	00012738 	rdprs	zero,zero,1180
   11aa4:	00012738 	rdprs	zero,zero,1180
   11aa8:	00012738 	rdprs	zero,zero,1180
   11aac:	00012738 	rdprs	zero,zero,1180
   11ab0:	00011d38 	rdprs	zero,zero,1140
   11ab4:	00012540 	call	1254 <_ZN3USB11outTransferEhhtPh+0x14>
   11ab8:	00012738 	rdprs	zero,zero,1180
   11abc:	00011bfc 	xorhi	zero,zero,1135
   11ac0:	00011d5c 	xori	zero,zero,1141
   11ac4:	00012738 	rdprs	zero,zero,1180
   11ac8:	00011dac 	andhi	zero,zero,1142
   11acc:	00011db8 	rdprs	zero,zero,1142
   11ad0:	00011db8 	rdprs	zero,zero,1142
   11ad4:	00011db8 	rdprs	zero,zero,1142
   11ad8:	00011db8 	rdprs	zero,zero,1142
   11adc:	00011db8 	rdprs	zero,zero,1142
   11ae0:	00011db8 	rdprs	zero,zero,1142
   11ae4:	00011db8 	rdprs	zero,zero,1142
   11ae8:	00011db8 	rdprs	zero,zero,1142
   11aec:	00011db8 	rdprs	zero,zero,1142
   11af0:	00012738 	rdprs	zero,zero,1180
   11af4:	00012738 	rdprs	zero,zero,1180
   11af8:	00012738 	rdprs	zero,zero,1180
   11afc:	00012738 	rdprs	zero,zero,1180
   11b00:	00012738 	rdprs	zero,zero,1180
   11b04:	00012738 	rdprs	zero,zero,1180
   11b08:	00012738 	rdprs	zero,zero,1180
   11b0c:	00012738 	rdprs	zero,zero,1180
   11b10:	00012738 	rdprs	zero,zero,1180
   11b14:	00012738 	rdprs	zero,zero,1180
   11b18:	00011df4 	movhi	zero,1143
   11b1c:	00011ebc 	xorhi	zero,zero,1146
   11b20:	00012738 	rdprs	zero,zero,1180
   11b24:	00011ebc 	xorhi	zero,zero,1146
   11b28:	00012738 	rdprs	zero,zero,1180
   11b2c:	00012738 	rdprs	zero,zero,1180
   11b30:	00012738 	rdprs	zero,zero,1180
   11b34:	00012738 	rdprs	zero,zero,1180
   11b38:	00011f68 	cmpgeui	zero,zero,1149
   11b3c:	00012738 	rdprs	zero,zero,1180
   11b40:	00012738 	rdprs	zero,zero,1180
   11b44:	00011f74 	movhi	zero,1149
   11b48:	00012738 	rdprs	zero,zero,1180
   11b4c:	00012738 	rdprs	zero,zero,1180
   11b50:	00012738 	rdprs	zero,zero,1180
   11b54:	00012738 	rdprs	zero,zero,1180
   11b58:	00012738 	rdprs	zero,zero,1180
   11b5c:	000123f8 	rdprs	zero,zero,1167
   11b60:	00012738 	rdprs	zero,zero,1180
   11b64:	00012738 	rdprs	zero,zero,1180
   11b68:	00012464 	muli	zero,zero,1169
   11b6c:	00012738 	rdprs	zero,zero,1180
   11b70:	00012738 	rdprs	zero,zero,1180
   11b74:	00012738 	rdprs	zero,zero,1180
   11b78:	00012738 	rdprs	zero,zero,1180
   11b7c:	00012738 	rdprs	zero,zero,1180
   11b80:	00012738 	rdprs	zero,zero,1180
   11b84:	00012738 	rdprs	zero,zero,1180
   11b88:	00012738 	rdprs	zero,zero,1180
   11b8c:	00012738 	rdprs	zero,zero,1180
   11b90:	00012738 	rdprs	zero,zero,1180
   11b94:	000126dc 	xori	zero,zero,1179
   11b98:	0001265c 	xori	zero,zero,1177
   11b9c:	00011ebc 	xorhi	zero,zero,1146
   11ba0:	00011ebc 	xorhi	zero,zero,1146
   11ba4:	00011ebc 	xorhi	zero,zero,1146
   11ba8:	0001267c 	xorhi	zero,zero,1177
   11bac:	0001265c 	xori	zero,zero,1177
   11bb0:	00012738 	rdprs	zero,zero,1180
   11bb4:	00012738 	rdprs	zero,zero,1180
   11bb8:	00012688 	cmpgei	zero,zero,1178
   11bbc:	00012738 	rdprs	zero,zero,1180
   11bc0:	0001269c 	xori	zero,zero,1178
   11bc4:	00012520 	cmpeqi	zero,zero,1172
   11bc8:	00011c08 	cmpgei	zero,zero,1136
   11bcc:	00012558 	cmpnei	zero,zero,1173
   11bd0:	00012738 	rdprs	zero,zero,1180
   11bd4:	00012564 	muli	zero,zero,1173
   11bd8:	00012738 	rdprs	zero,zero,1180
   11bdc:	000125c8 	cmpgei	zero,zero,1175
   11be0:	00012738 	rdprs	zero,zero,1180
   11be4:	00012738 	rdprs	zero,zero,1180
   11be8:	000125e8 	cmpgeui	zero,zero,1175
   11bec:	d8c03117 	ldw	r3,196(sp)
   11bf0:	d8802e15 	stw	r2,184(sp)
   11bf4:	00c7c83a 	sub	r3,zero,r3
   11bf8:	d8c03115 	stw	r3,196(sp)
   11bfc:	84000114 	ori	r16,r16,4
   11c00:	ac400007 	ldb	r17,0(r21)
   11c04:	003f9706 	br	11a64 <__alt_data_end+0xfc011a64>
   11c08:	00800c04 	movi	r2,48
   11c0c:	d8802705 	stb	r2,156(sp)
   11c10:	00801e04 	movi	r2,120
   11c14:	d8802745 	stb	r2,157(sp)
   11c18:	d9002a17 	ldw	r4,168(sp)
   11c1c:	d8802e17 	ldw	r2,184(sp)
   11c20:	d8002785 	stb	zero,158(sp)
   11c24:	e011883a 	mov	r8,fp
   11c28:	10c00104 	addi	r3,r2,4
   11c2c:	14c00017 	ldw	r19,0(r2)
   11c30:	002d883a 	mov	r22,zero
   11c34:	80800094 	ori	r2,r16,2
   11c38:	2002ca16 	blt	r4,zero,12764 <___vfprintf_internal_r+0xe88>
   11c3c:	00bfdfc4 	movi	r2,-129
   11c40:	80a4703a 	and	r18,r16,r2
   11c44:	d8c02e15 	stw	r3,184(sp)
   11c48:	94800094 	ori	r18,r18,2
   11c4c:	9802b41e 	bne	r19,zero,12720 <___vfprintf_internal_r+0xe44>
   11c50:	014000f4 	movhi	r5,3
   11c54:	296a8304 	addi	r5,r5,-22004
   11c58:	d9403915 	stw	r5,228(sp)
   11c5c:	04401e04 	movi	r17,120
   11c60:	d8802a17 	ldw	r2,168(sp)
   11c64:	0039883a 	mov	fp,zero
   11c68:	1001fa26 	beq	r2,zero,12454 <___vfprintf_internal_r+0xb78>
   11c6c:	0027883a 	mov	r19,zero
   11c70:	002d883a 	mov	r22,zero
   11c74:	00021906 	br	124dc <___vfprintf_internal_r+0xc00>
   11c78:	d9002d17 	ldw	r4,180(sp)
   11c7c:	b80b883a 	mov	r5,r23
   11c80:	0013c900 	call	13c90 <__swsetup_r>
   11c84:	1005dc1e 	bne	r2,zero,133f8 <___vfprintf_internal_r+0x1b1c>
   11c88:	b880030b 	ldhu	r2,12(r23)
   11c8c:	00c00284 	movi	r3,10
   11c90:	1080068c 	andi	r2,r2,26
   11c94:	10ff3a1e 	bne	r2,r3,11980 <__alt_data_end+0xfc011980>
   11c98:	b880038f 	ldh	r2,14(r23)
   11c9c:	103f3816 	blt	r2,zero,11980 <__alt_data_end+0xfc011980>
   11ca0:	d9c02e17 	ldw	r7,184(sp)
   11ca4:	d9002d17 	ldw	r4,180(sp)
   11ca8:	a80d883a 	mov	r6,r21
   11cac:	b80b883a 	mov	r5,r23
   11cb0:	0013bd40 	call	13bd4 <__sbprintf>
   11cb4:	00001106 	br	11cfc <___vfprintf_internal_r+0x420>
   11cb8:	d9002d17 	ldw	r4,180(sp)
   11cbc:	d9801e04 	addi	r6,sp,120
   11cc0:	b80b883a 	mov	r5,r23
   11cc4:	0019be80 	call	19be8 <__sprint_r>
   11cc8:	1000081e 	bne	r2,zero,11cec <___vfprintf_internal_r+0x410>
   11ccc:	da000404 	addi	r8,sp,16
   11cd0:	003f5106 	br	11a18 <__alt_data_end+0xfc011a18>
   11cd4:	d8802017 	ldw	r2,128(sp)
   11cd8:	10000426 	beq	r2,zero,11cec <___vfprintf_internal_r+0x410>
   11cdc:	d9002d17 	ldw	r4,180(sp)
   11ce0:	d9801e04 	addi	r6,sp,120
   11ce4:	b80b883a 	mov	r5,r23
   11ce8:	0019be80 	call	19be8 <__sprint_r>
   11cec:	b880030b 	ldhu	r2,12(r23)
   11cf0:	1080100c 	andi	r2,r2,64
   11cf4:	1005c01e 	bne	r2,zero,133f8 <___vfprintf_internal_r+0x1b1c>
   11cf8:	d8802f17 	ldw	r2,188(sp)
   11cfc:	dfc04717 	ldw	ra,284(sp)
   11d00:	df004617 	ldw	fp,280(sp)
   11d04:	ddc04517 	ldw	r23,276(sp)
   11d08:	dd804417 	ldw	r22,272(sp)
   11d0c:	dd404317 	ldw	r21,268(sp)
   11d10:	dd004217 	ldw	r20,264(sp)
   11d14:	dcc04117 	ldw	r19,260(sp)
   11d18:	dc804017 	ldw	r18,256(sp)
   11d1c:	dc403f17 	ldw	r17,252(sp)
   11d20:	dc003e17 	ldw	r16,248(sp)
   11d24:	dec04804 	addi	sp,sp,288
   11d28:	f800283a 	ret
   11d2c:	d9002d17 	ldw	r4,180(sp)
   11d30:	0015c9c0 	call	15c9c <__sinit>
   11d34:	003f0206 	br	11940 <__alt_data_end+0xfc011940>
   11d38:	d9002e17 	ldw	r4,184(sp)
   11d3c:	d9402e17 	ldw	r5,184(sp)
   11d40:	21000017 	ldw	r4,0(r4)
   11d44:	28800104 	addi	r2,r5,4
   11d48:	d9003115 	stw	r4,196(sp)
   11d4c:	203fa716 	blt	r4,zero,11bec <__alt_data_end+0xfc011bec>
   11d50:	d8802e15 	stw	r2,184(sp)
   11d54:	ac400007 	ldb	r17,0(r21)
   11d58:	003f4206 	br	11a64 <__alt_data_end+0xfc011a64>
   11d5c:	ac400007 	ldb	r17,0(r21)
   11d60:	01000a84 	movi	r4,42
   11d64:	a8c00044 	addi	r3,r21,1
   11d68:	89075826 	beq	r17,r4,13acc <___vfprintf_internal_r+0x21f0>
   11d6c:	8cbff404 	addi	r18,r17,-48
   11d70:	b486ae36 	bltu	r22,r18,1382c <___vfprintf_internal_r+0x1f50>
   11d74:	0009883a 	mov	r4,zero
   11d78:	1823883a 	mov	r17,r3
   11d7c:	01400284 	movi	r5,10
   11d80:	000cf040 	call	cf04 <__mulsi3>
   11d84:	88c00007 	ldb	r3,0(r17)
   11d88:	1489883a 	add	r4,r2,r18
   11d8c:	8d400044 	addi	r21,r17,1
   11d90:	1cbff404 	addi	r18,r3,-48
   11d94:	a823883a 	mov	r17,r21
   11d98:	b4bff82e 	bgeu	r22,r18,11d7c <__alt_data_end+0xfc011d7c>
   11d9c:	1823883a 	mov	r17,r3
   11da0:	2005f616 	blt	r4,zero,1357c <___vfprintf_internal_r+0x1ca0>
   11da4:	d9002a15 	stw	r4,168(sp)
   11da8:	003f2f06 	br	11a68 <__alt_data_end+0xfc011a68>
   11dac:	84002014 	ori	r16,r16,128
   11db0:	ac400007 	ldb	r17,0(r21)
   11db4:	003f2b06 	br	11a64 <__alt_data_end+0xfc011a64>
   11db8:	8cbff404 	addi	r18,r17,-48
   11dbc:	d8003115 	stw	zero,196(sp)
   11dc0:	0009883a 	mov	r4,zero
   11dc4:	a823883a 	mov	r17,r21
   11dc8:	01400284 	movi	r5,10
   11dcc:	000cf040 	call	cf04 <__mulsi3>
   11dd0:	88c00007 	ldb	r3,0(r17)
   11dd4:	9089883a 	add	r4,r18,r2
   11dd8:	ad400044 	addi	r21,r21,1
   11ddc:	1cbff404 	addi	r18,r3,-48
   11de0:	a823883a 	mov	r17,r21
   11de4:	b4bff82e 	bgeu	r22,r18,11dc8 <__alt_data_end+0xfc011dc8>
   11de8:	1823883a 	mov	r17,r3
   11dec:	d9003115 	stw	r4,196(sp)
   11df0:	003f1d06 	br	11a68 <__alt_data_end+0xfc011a68>
   11df4:	8025883a 	mov	r18,r16
   11df8:	dc002903 	ldbu	r16,164(sp)
   11dfc:	e011883a 	mov	r8,fp
   11e00:	84003fcc 	andi	r16,r16,255
   11e04:	8007531e 	bne	r16,zero,13b54 <___vfprintf_internal_r+0x2278>
   11e08:	94800414 	ori	r18,r18,16
   11e0c:	9080080c 	andi	r2,r18,32
   11e10:	1003a326 	beq	r2,zero,12ca0 <___vfprintf_internal_r+0x13c4>
   11e14:	d9002e17 	ldw	r4,184(sp)
   11e18:	20800117 	ldw	r2,4(r4)
   11e1c:	24c00017 	ldw	r19,0(r4)
   11e20:	21000204 	addi	r4,r4,8
   11e24:	d9002e15 	stw	r4,184(sp)
   11e28:	102d883a 	mov	r22,r2
   11e2c:	10047316 	blt	r2,zero,12ffc <___vfprintf_internal_r+0x1720>
   11e30:	d9002a17 	ldw	r4,168(sp)
   11e34:	df002783 	ldbu	fp,158(sp)
   11e38:	2003e416 	blt	r4,zero,12dcc <___vfprintf_internal_r+0x14f0>
   11e3c:	00ffdfc4 	movi	r3,-129
   11e40:	9d84b03a 	or	r2,r19,r22
   11e44:	90e4703a 	and	r18,r18,r3
   11e48:	10018026 	beq	r2,zero,1244c <___vfprintf_internal_r+0xb70>
   11e4c:	b003ab26 	beq	r22,zero,12cfc <___vfprintf_internal_r+0x1420>
   11e50:	dc402915 	stw	r17,164(sp)
   11e54:	dc001e04 	addi	r16,sp,120
   11e58:	b023883a 	mov	r17,r22
   11e5c:	402d883a 	mov	r22,r8
   11e60:	9809883a 	mov	r4,r19
   11e64:	880b883a 	mov	r5,r17
   11e68:	01800284 	movi	r6,10
   11e6c:	000f883a 	mov	r7,zero
   11e70:	001c12c0 	call	1c12c <__umoddi3>
   11e74:	10800c04 	addi	r2,r2,48
   11e78:	843fffc4 	addi	r16,r16,-1
   11e7c:	9809883a 	mov	r4,r19
   11e80:	880b883a 	mov	r5,r17
   11e84:	80800005 	stb	r2,0(r16)
   11e88:	01800284 	movi	r6,10
   11e8c:	000f883a 	mov	r7,zero
   11e90:	001bb300 	call	1bb30 <__udivdi3>
   11e94:	1027883a 	mov	r19,r2
   11e98:	10c4b03a 	or	r2,r2,r3
   11e9c:	1823883a 	mov	r17,r3
   11ea0:	103fef1e 	bne	r2,zero,11e60 <__alt_data_end+0xfc011e60>
   11ea4:	d8c02817 	ldw	r3,160(sp)
   11ea8:	dc402917 	ldw	r17,164(sp)
   11eac:	b011883a 	mov	r8,r22
   11eb0:	1c07c83a 	sub	r3,r3,r16
   11eb4:	d8c02b15 	stw	r3,172(sp)
   11eb8:	00005f06 	br	12038 <___vfprintf_internal_r+0x75c>
   11ebc:	8025883a 	mov	r18,r16
   11ec0:	dc002903 	ldbu	r16,164(sp)
   11ec4:	e011883a 	mov	r8,fp
   11ec8:	84003fcc 	andi	r16,r16,255
   11ecc:	80071e1e 	bne	r16,zero,13b48 <___vfprintf_internal_r+0x226c>
   11ed0:	9080020c 	andi	r2,r18,8
   11ed4:	1004af26 	beq	r2,zero,13194 <___vfprintf_internal_r+0x18b8>
   11ed8:	d9002e17 	ldw	r4,184(sp)
   11edc:	d9402e17 	ldw	r5,184(sp)
   11ee0:	d8802e17 	ldw	r2,184(sp)
   11ee4:	21000017 	ldw	r4,0(r4)
   11ee8:	29400117 	ldw	r5,4(r5)
   11eec:	10800204 	addi	r2,r2,8
   11ef0:	d9003615 	stw	r4,216(sp)
   11ef4:	d9403815 	stw	r5,224(sp)
   11ef8:	d8802e15 	stw	r2,184(sp)
   11efc:	d9003617 	ldw	r4,216(sp)
   11f00:	d9403817 	ldw	r5,224(sp)
   11f04:	da003d15 	stw	r8,244(sp)
   11f08:	04000044 	movi	r16,1
   11f0c:	00183cc0 	call	183cc <__fpclassifyd>
   11f10:	da003d17 	ldw	r8,244(sp)
   11f14:	1404441e 	bne	r2,r16,13028 <___vfprintf_internal_r+0x174c>
   11f18:	d9003617 	ldw	r4,216(sp)
   11f1c:	d9403817 	ldw	r5,224(sp)
   11f20:	000d883a 	mov	r6,zero
   11f24:	000f883a 	mov	r7,zero
   11f28:	001dad00 	call	1dad0 <__ledf2>
   11f2c:	da003d17 	ldw	r8,244(sp)
   11f30:	1005e316 	blt	r2,zero,136c0 <___vfprintf_internal_r+0x1de4>
   11f34:	df002783 	ldbu	fp,158(sp)
   11f38:	008011c4 	movi	r2,71
   11f3c:	1445580e 	bge	r2,r17,134a0 <___vfprintf_internal_r+0x1bc4>
   11f40:	040000f4 	movhi	r16,3
   11f44:	842a7b04 	addi	r16,r16,-22036
   11f48:	00c000c4 	movi	r3,3
   11f4c:	00bfdfc4 	movi	r2,-129
   11f50:	d8c02915 	stw	r3,164(sp)
   11f54:	90a4703a 	and	r18,r18,r2
   11f58:	d8c02b15 	stw	r3,172(sp)
   11f5c:	d8002a15 	stw	zero,168(sp)
   11f60:	d8003215 	stw	zero,200(sp)
   11f64:	00003a06 	br	12050 <___vfprintf_internal_r+0x774>
   11f68:	84000214 	ori	r16,r16,8
   11f6c:	ac400007 	ldb	r17,0(r21)
   11f70:	003ebc06 	br	11a64 <__alt_data_end+0xfc011a64>
   11f74:	8025883a 	mov	r18,r16
   11f78:	dc002903 	ldbu	r16,164(sp)
   11f7c:	e011883a 	mov	r8,fp
   11f80:	84003fcc 	andi	r16,r16,255
   11f84:	8007001e 	bne	r16,zero,13b88 <___vfprintf_internal_r+0x22ac>
   11f88:	94800414 	ori	r18,r18,16
   11f8c:	9080080c 	andi	r2,r18,32
   11f90:	1002fa26 	beq	r2,zero,12b7c <___vfprintf_internal_r+0x12a0>
   11f94:	d9002e17 	ldw	r4,184(sp)
   11f98:	d9402a17 	ldw	r5,168(sp)
   11f9c:	d8002785 	stb	zero,158(sp)
   11fa0:	20800204 	addi	r2,r4,8
   11fa4:	24c00017 	ldw	r19,0(r4)
   11fa8:	25800117 	ldw	r22,4(r4)
   11fac:	2804b116 	blt	r5,zero,13274 <___vfprintf_internal_r+0x1998>
   11fb0:	013fdfc4 	movi	r4,-129
   11fb4:	9d86b03a 	or	r3,r19,r22
   11fb8:	d8802e15 	stw	r2,184(sp)
   11fbc:	9124703a 	and	r18,r18,r4
   11fc0:	1802fb1e 	bne	r3,zero,12bb0 <___vfprintf_internal_r+0x12d4>
   11fc4:	d8c02a17 	ldw	r3,168(sp)
   11fc8:	0039883a 	mov	fp,zero
   11fcc:	1805e526 	beq	r3,zero,13764 <___vfprintf_internal_r+0x1e88>
   11fd0:	0027883a 	mov	r19,zero
   11fd4:	002d883a 	mov	r22,zero
   11fd8:	dc001e04 	addi	r16,sp,120
   11fdc:	9806d0fa 	srli	r3,r19,3
   11fe0:	b008977a 	slli	r4,r22,29
   11fe4:	b02cd0fa 	srli	r22,r22,3
   11fe8:	9cc001cc 	andi	r19,r19,7
   11fec:	98800c04 	addi	r2,r19,48
   11ff0:	843fffc4 	addi	r16,r16,-1
   11ff4:	20e6b03a 	or	r19,r4,r3
   11ff8:	80800005 	stb	r2,0(r16)
   11ffc:	9d86b03a 	or	r3,r19,r22
   12000:	183ff61e 	bne	r3,zero,11fdc <__alt_data_end+0xfc011fdc>
   12004:	90c0004c 	andi	r3,r18,1
   12008:	18014126 	beq	r3,zero,12510 <___vfprintf_internal_r+0xc34>
   1200c:	10803fcc 	andi	r2,r2,255
   12010:	1080201c 	xori	r2,r2,128
   12014:	10bfe004 	addi	r2,r2,-128
   12018:	00c00c04 	movi	r3,48
   1201c:	10c13c26 	beq	r2,r3,12510 <___vfprintf_internal_r+0xc34>
   12020:	80ffffc5 	stb	r3,-1(r16)
   12024:	d8c02817 	ldw	r3,160(sp)
   12028:	80bfffc4 	addi	r2,r16,-1
   1202c:	1021883a 	mov	r16,r2
   12030:	1887c83a 	sub	r3,r3,r2
   12034:	d8c02b15 	stw	r3,172(sp)
   12038:	d8802b17 	ldw	r2,172(sp)
   1203c:	d9002a17 	ldw	r4,168(sp)
   12040:	1100010e 	bge	r2,r4,12048 <___vfprintf_internal_r+0x76c>
   12044:	2005883a 	mov	r2,r4
   12048:	d8802915 	stw	r2,164(sp)
   1204c:	d8003215 	stw	zero,200(sp)
   12050:	e7003fcc 	andi	fp,fp,255
   12054:	e700201c 	xori	fp,fp,128
   12058:	e73fe004 	addi	fp,fp,-128
   1205c:	e0000326 	beq	fp,zero,1206c <___vfprintf_internal_r+0x790>
   12060:	d8c02917 	ldw	r3,164(sp)
   12064:	18c00044 	addi	r3,r3,1
   12068:	d8c02915 	stw	r3,164(sp)
   1206c:	90c0008c 	andi	r3,r18,2
   12070:	d8c02c15 	stw	r3,176(sp)
   12074:	18000326 	beq	r3,zero,12084 <___vfprintf_internal_r+0x7a8>
   12078:	d8c02917 	ldw	r3,164(sp)
   1207c:	18c00084 	addi	r3,r3,2
   12080:	d8c02915 	stw	r3,164(sp)
   12084:	90c0210c 	andi	r3,r18,132
   12088:	d8c03015 	stw	r3,192(sp)
   1208c:	1801c51e 	bne	r3,zero,127a4 <___vfprintf_internal_r+0xec8>
   12090:	d9003117 	ldw	r4,196(sp)
   12094:	d8c02917 	ldw	r3,164(sp)
   12098:	20e7c83a 	sub	r19,r4,r3
   1209c:	04c1c10e 	bge	zero,r19,127a4 <___vfprintf_internal_r+0xec8>
   120a0:	02400404 	movi	r9,16
   120a4:	d8c02017 	ldw	r3,128(sp)
   120a8:	d8801f17 	ldw	r2,124(sp)
   120ac:	4cc52f0e 	bge	r9,r19,1356c <___vfprintf_internal_r+0x1c90>
   120b0:	014000f4 	movhi	r5,3
   120b4:	296a9684 	addi	r5,r5,-21926
   120b8:	dc403b15 	stw	r17,236(sp)
   120bc:	d9403515 	stw	r5,212(sp)
   120c0:	9823883a 	mov	r17,r19
   120c4:	482d883a 	mov	r22,r9
   120c8:	9027883a 	mov	r19,r18
   120cc:	070001c4 	movi	fp,7
   120d0:	8025883a 	mov	r18,r16
   120d4:	dc002d17 	ldw	r16,180(sp)
   120d8:	00000306 	br	120e8 <___vfprintf_internal_r+0x80c>
   120dc:	8c7ffc04 	addi	r17,r17,-16
   120e0:	42000204 	addi	r8,r8,8
   120e4:	b440130e 	bge	r22,r17,12134 <___vfprintf_internal_r+0x858>
   120e8:	010000f4 	movhi	r4,3
   120ec:	18c00404 	addi	r3,r3,16
   120f0:	10800044 	addi	r2,r2,1
   120f4:	212a9684 	addi	r4,r4,-21926
   120f8:	41000015 	stw	r4,0(r8)
   120fc:	45800115 	stw	r22,4(r8)
   12100:	d8c02015 	stw	r3,128(sp)
   12104:	d8801f15 	stw	r2,124(sp)
   12108:	e0bff40e 	bge	fp,r2,120dc <__alt_data_end+0xfc0120dc>
   1210c:	d9801e04 	addi	r6,sp,120
   12110:	b80b883a 	mov	r5,r23
   12114:	8009883a 	mov	r4,r16
   12118:	0019be80 	call	19be8 <__sprint_r>
   1211c:	103ef31e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12120:	8c7ffc04 	addi	r17,r17,-16
   12124:	d8c02017 	ldw	r3,128(sp)
   12128:	d8801f17 	ldw	r2,124(sp)
   1212c:	da000404 	addi	r8,sp,16
   12130:	b47fed16 	blt	r22,r17,120e8 <__alt_data_end+0xfc0120e8>
   12134:	9021883a 	mov	r16,r18
   12138:	9825883a 	mov	r18,r19
   1213c:	8827883a 	mov	r19,r17
   12140:	dc403b17 	ldw	r17,236(sp)
   12144:	d9403517 	ldw	r5,212(sp)
   12148:	98c7883a 	add	r3,r19,r3
   1214c:	10800044 	addi	r2,r2,1
   12150:	41400015 	stw	r5,0(r8)
   12154:	44c00115 	stw	r19,4(r8)
   12158:	d8c02015 	stw	r3,128(sp)
   1215c:	d8801f15 	stw	r2,124(sp)
   12160:	010001c4 	movi	r4,7
   12164:	2082c516 	blt	r4,r2,12c7c <___vfprintf_internal_r+0x13a0>
   12168:	df002787 	ldb	fp,158(sp)
   1216c:	42000204 	addi	r8,r8,8
   12170:	e0000c26 	beq	fp,zero,121a4 <___vfprintf_internal_r+0x8c8>
   12174:	d8801f17 	ldw	r2,124(sp)
   12178:	d9002784 	addi	r4,sp,158
   1217c:	18c00044 	addi	r3,r3,1
   12180:	10800044 	addi	r2,r2,1
   12184:	41000015 	stw	r4,0(r8)
   12188:	01000044 	movi	r4,1
   1218c:	41000115 	stw	r4,4(r8)
   12190:	d8c02015 	stw	r3,128(sp)
   12194:	d8801f15 	stw	r2,124(sp)
   12198:	010001c4 	movi	r4,7
   1219c:	20825e16 	blt	r4,r2,12b18 <___vfprintf_internal_r+0x123c>
   121a0:	42000204 	addi	r8,r8,8
   121a4:	d8802c17 	ldw	r2,176(sp)
   121a8:	10000c26 	beq	r2,zero,121dc <___vfprintf_internal_r+0x900>
   121ac:	d8801f17 	ldw	r2,124(sp)
   121b0:	d9002704 	addi	r4,sp,156
   121b4:	18c00084 	addi	r3,r3,2
   121b8:	10800044 	addi	r2,r2,1
   121bc:	41000015 	stw	r4,0(r8)
   121c0:	01000084 	movi	r4,2
   121c4:	41000115 	stw	r4,4(r8)
   121c8:	d8c02015 	stw	r3,128(sp)
   121cc:	d8801f15 	stw	r2,124(sp)
   121d0:	010001c4 	movi	r4,7
   121d4:	20825816 	blt	r4,r2,12b38 <___vfprintf_internal_r+0x125c>
   121d8:	42000204 	addi	r8,r8,8
   121dc:	d9003017 	ldw	r4,192(sp)
   121e0:	00802004 	movi	r2,128
   121e4:	2081bb26 	beq	r4,r2,128d4 <___vfprintf_internal_r+0xff8>
   121e8:	d9402a17 	ldw	r5,168(sp)
   121ec:	d8802b17 	ldw	r2,172(sp)
   121f0:	28adc83a 	sub	r22,r5,r2
   121f4:	0580310e 	bge	zero,r22,122bc <___vfprintf_internal_r+0x9e0>
   121f8:	07000404 	movi	fp,16
   121fc:	d8801f17 	ldw	r2,124(sp)
   12200:	e584360e 	bge	fp,r22,132dc <___vfprintf_internal_r+0x1a00>
   12204:	014000f4 	movhi	r5,3
   12208:	296a9284 	addi	r5,r5,-21942
   1220c:	dc402a15 	stw	r17,168(sp)
   12210:	d9402c15 	stw	r5,176(sp)
   12214:	b023883a 	mov	r17,r22
   12218:	04c001c4 	movi	r19,7
   1221c:	a82d883a 	mov	r22,r21
   12220:	902b883a 	mov	r21,r18
   12224:	8025883a 	mov	r18,r16
   12228:	dc002d17 	ldw	r16,180(sp)
   1222c:	00000306 	br	1223c <___vfprintf_internal_r+0x960>
   12230:	8c7ffc04 	addi	r17,r17,-16
   12234:	42000204 	addi	r8,r8,8
   12238:	e440110e 	bge	fp,r17,12280 <___vfprintf_internal_r+0x9a4>
   1223c:	18c00404 	addi	r3,r3,16
   12240:	10800044 	addi	r2,r2,1
   12244:	45000015 	stw	r20,0(r8)
   12248:	47000115 	stw	fp,4(r8)
   1224c:	d8c02015 	stw	r3,128(sp)
   12250:	d8801f15 	stw	r2,124(sp)
   12254:	98bff60e 	bge	r19,r2,12230 <__alt_data_end+0xfc012230>
   12258:	d9801e04 	addi	r6,sp,120
   1225c:	b80b883a 	mov	r5,r23
   12260:	8009883a 	mov	r4,r16
   12264:	0019be80 	call	19be8 <__sprint_r>
   12268:	103ea01e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   1226c:	8c7ffc04 	addi	r17,r17,-16
   12270:	d8c02017 	ldw	r3,128(sp)
   12274:	d8801f17 	ldw	r2,124(sp)
   12278:	da000404 	addi	r8,sp,16
   1227c:	e47fef16 	blt	fp,r17,1223c <__alt_data_end+0xfc01223c>
   12280:	9021883a 	mov	r16,r18
   12284:	a825883a 	mov	r18,r21
   12288:	b02b883a 	mov	r21,r22
   1228c:	882d883a 	mov	r22,r17
   12290:	dc402a17 	ldw	r17,168(sp)
   12294:	d9002c17 	ldw	r4,176(sp)
   12298:	1d87883a 	add	r3,r3,r22
   1229c:	10800044 	addi	r2,r2,1
   122a0:	41000015 	stw	r4,0(r8)
   122a4:	45800115 	stw	r22,4(r8)
   122a8:	d8c02015 	stw	r3,128(sp)
   122ac:	d8801f15 	stw	r2,124(sp)
   122b0:	010001c4 	movi	r4,7
   122b4:	20821016 	blt	r4,r2,12af8 <___vfprintf_internal_r+0x121c>
   122b8:	42000204 	addi	r8,r8,8
   122bc:	9080400c 	andi	r2,r18,256
   122c0:	10013a1e 	bne	r2,zero,127ac <___vfprintf_internal_r+0xed0>
   122c4:	d9402b17 	ldw	r5,172(sp)
   122c8:	d8801f17 	ldw	r2,124(sp)
   122cc:	44000015 	stw	r16,0(r8)
   122d0:	1947883a 	add	r3,r3,r5
   122d4:	10800044 	addi	r2,r2,1
   122d8:	41400115 	stw	r5,4(r8)
   122dc:	d8c02015 	stw	r3,128(sp)
   122e0:	d8801f15 	stw	r2,124(sp)
   122e4:	010001c4 	movi	r4,7
   122e8:	2081f516 	blt	r4,r2,12ac0 <___vfprintf_internal_r+0x11e4>
   122ec:	42000204 	addi	r8,r8,8
   122f0:	9480010c 	andi	r18,r18,4
   122f4:	90003226 	beq	r18,zero,123c0 <___vfprintf_internal_r+0xae4>
   122f8:	d9403117 	ldw	r5,196(sp)
   122fc:	d8802917 	ldw	r2,164(sp)
   12300:	28a1c83a 	sub	r16,r5,r2
   12304:	04002e0e 	bge	zero,r16,123c0 <___vfprintf_internal_r+0xae4>
   12308:	04400404 	movi	r17,16
   1230c:	d8801f17 	ldw	r2,124(sp)
   12310:	8c04c40e 	bge	r17,r16,13624 <___vfprintf_internal_r+0x1d48>
   12314:	014000f4 	movhi	r5,3
   12318:	296a9684 	addi	r5,r5,-21926
   1231c:	d9403515 	stw	r5,212(sp)
   12320:	048001c4 	movi	r18,7
   12324:	dcc02d17 	ldw	r19,180(sp)
   12328:	00000306 	br	12338 <___vfprintf_internal_r+0xa5c>
   1232c:	843ffc04 	addi	r16,r16,-16
   12330:	42000204 	addi	r8,r8,8
   12334:	8c00130e 	bge	r17,r16,12384 <___vfprintf_internal_r+0xaa8>
   12338:	010000f4 	movhi	r4,3
   1233c:	18c00404 	addi	r3,r3,16
   12340:	10800044 	addi	r2,r2,1
   12344:	212a9684 	addi	r4,r4,-21926
   12348:	41000015 	stw	r4,0(r8)
   1234c:	44400115 	stw	r17,4(r8)
   12350:	d8c02015 	stw	r3,128(sp)
   12354:	d8801f15 	stw	r2,124(sp)
   12358:	90bff40e 	bge	r18,r2,1232c <__alt_data_end+0xfc01232c>
   1235c:	d9801e04 	addi	r6,sp,120
   12360:	b80b883a 	mov	r5,r23
   12364:	9809883a 	mov	r4,r19
   12368:	0019be80 	call	19be8 <__sprint_r>
   1236c:	103e5f1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12370:	843ffc04 	addi	r16,r16,-16
   12374:	d8c02017 	ldw	r3,128(sp)
   12378:	d8801f17 	ldw	r2,124(sp)
   1237c:	da000404 	addi	r8,sp,16
   12380:	8c3fed16 	blt	r17,r16,12338 <__alt_data_end+0xfc012338>
   12384:	d9403517 	ldw	r5,212(sp)
   12388:	1c07883a 	add	r3,r3,r16
   1238c:	10800044 	addi	r2,r2,1
   12390:	41400015 	stw	r5,0(r8)
   12394:	44000115 	stw	r16,4(r8)
   12398:	d8c02015 	stw	r3,128(sp)
   1239c:	d8801f15 	stw	r2,124(sp)
   123a0:	010001c4 	movi	r4,7
   123a4:	2080060e 	bge	r4,r2,123c0 <___vfprintf_internal_r+0xae4>
   123a8:	d9002d17 	ldw	r4,180(sp)
   123ac:	d9801e04 	addi	r6,sp,120
   123b0:	b80b883a 	mov	r5,r23
   123b4:	0019be80 	call	19be8 <__sprint_r>
   123b8:	103e4c1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   123bc:	d8c02017 	ldw	r3,128(sp)
   123c0:	d8803117 	ldw	r2,196(sp)
   123c4:	d9002917 	ldw	r4,164(sp)
   123c8:	1100010e 	bge	r2,r4,123d0 <___vfprintf_internal_r+0xaf4>
   123cc:	2005883a 	mov	r2,r4
   123d0:	d9402f17 	ldw	r5,188(sp)
   123d4:	288b883a 	add	r5,r5,r2
   123d8:	d9402f15 	stw	r5,188(sp)
   123dc:	1801c01e 	bne	r3,zero,12ae0 <___vfprintf_internal_r+0x1204>
   123e0:	a8800007 	ldb	r2,0(r21)
   123e4:	d8001f15 	stw	zero,124(sp)
   123e8:	da000404 	addi	r8,sp,16
   123ec:	103d751e 	bne	r2,zero,119c4 <__alt_data_end+0xfc0119c4>
   123f0:	a823883a 	mov	r17,r21
   123f4:	003d8b06 	br	11a24 <__alt_data_end+0xfc011a24>
   123f8:	8025883a 	mov	r18,r16
   123fc:	dc002903 	ldbu	r16,164(sp)
   12400:	e011883a 	mov	r8,fp
   12404:	84003fcc 	andi	r16,r16,255
   12408:	8005e51e 	bne	r16,zero,13ba0 <___vfprintf_internal_r+0x22c4>
   1240c:	94800414 	ori	r18,r18,16
   12410:	9080080c 	andi	r2,r18,32
   12414:	10022b26 	beq	r2,zero,12cc4 <___vfprintf_internal_r+0x13e8>
   12418:	d9002e17 	ldw	r4,184(sp)
   1241c:	d9402a17 	ldw	r5,168(sp)
   12420:	d8002785 	stb	zero,158(sp)
   12424:	20c00204 	addi	r3,r4,8
   12428:	24c00017 	ldw	r19,0(r4)
   1242c:	25800117 	ldw	r22,4(r4)
   12430:	28042e16 	blt	r5,zero,134ec <___vfprintf_internal_r+0x1c10>
   12434:	013fdfc4 	movi	r4,-129
   12438:	9d84b03a 	or	r2,r19,r22
   1243c:	d8c02e15 	stw	r3,184(sp)
   12440:	9124703a 	and	r18,r18,r4
   12444:	0039883a 	mov	fp,zero
   12448:	103e801e 	bne	r2,zero,11e4c <__alt_data_end+0xfc011e4c>
   1244c:	d9002a17 	ldw	r4,168(sp)
   12450:	2002e01e 	bne	r4,zero,12fd4 <___vfprintf_internal_r+0x16f8>
   12454:	d8002a15 	stw	zero,168(sp)
   12458:	d8002b15 	stw	zero,172(sp)
   1245c:	dc001e04 	addi	r16,sp,120
   12460:	003ef506 	br	12038 <__alt_data_end+0xfc012038>
   12464:	8025883a 	mov	r18,r16
   12468:	dc002903 	ldbu	r16,164(sp)
   1246c:	e011883a 	mov	r8,fp
   12470:	84003fcc 	andi	r16,r16,255
   12474:	8005ba1e 	bne	r16,zero,13b60 <___vfprintf_internal_r+0x2284>
   12478:	010000f4 	movhi	r4,3
   1247c:	212a7e04 	addi	r4,r4,-22024
   12480:	d9003915 	stw	r4,228(sp)
   12484:	9080080c 	andi	r2,r18,32
   12488:	10006126 	beq	r2,zero,12610 <___vfprintf_internal_r+0xd34>
   1248c:	d9402e17 	ldw	r5,184(sp)
   12490:	2cc00017 	ldw	r19,0(r5)
   12494:	2d800117 	ldw	r22,4(r5)
   12498:	29400204 	addi	r5,r5,8
   1249c:	d9402e15 	stw	r5,184(sp)
   124a0:	9080004c 	andi	r2,r18,1
   124a4:	1001ac26 	beq	r2,zero,12b58 <___vfprintf_internal_r+0x127c>
   124a8:	9d84b03a 	or	r2,r19,r22
   124ac:	10038526 	beq	r2,zero,132c4 <___vfprintf_internal_r+0x19e8>
   124b0:	d8c02a17 	ldw	r3,168(sp)
   124b4:	00800c04 	movi	r2,48
   124b8:	d8802705 	stb	r2,156(sp)
   124bc:	dc402745 	stb	r17,157(sp)
   124c0:	d8002785 	stb	zero,158(sp)
   124c4:	90800094 	ori	r2,r18,2
   124c8:	18047916 	blt	r3,zero,136b0 <___vfprintf_internal_r+0x1dd4>
   124cc:	00bfdfc4 	movi	r2,-129
   124d0:	90a4703a 	and	r18,r18,r2
   124d4:	94800094 	ori	r18,r18,2
   124d8:	0039883a 	mov	fp,zero
   124dc:	d9003917 	ldw	r4,228(sp)
   124e0:	dc001e04 	addi	r16,sp,120
   124e4:	988003cc 	andi	r2,r19,15
   124e8:	b006973a 	slli	r3,r22,28
   124ec:	2085883a 	add	r2,r4,r2
   124f0:	9826d13a 	srli	r19,r19,4
   124f4:	10800003 	ldbu	r2,0(r2)
   124f8:	b02cd13a 	srli	r22,r22,4
   124fc:	843fffc4 	addi	r16,r16,-1
   12500:	1ce6b03a 	or	r19,r3,r19
   12504:	80800005 	stb	r2,0(r16)
   12508:	9d84b03a 	or	r2,r19,r22
   1250c:	103ff51e 	bne	r2,zero,124e4 <__alt_data_end+0xfc0124e4>
   12510:	d8c02817 	ldw	r3,160(sp)
   12514:	1c07c83a 	sub	r3,r3,r16
   12518:	d8c02b15 	stw	r3,172(sp)
   1251c:	003ec606 	br	12038 <__alt_data_end+0xfc012038>
   12520:	8025883a 	mov	r18,r16
   12524:	dc002903 	ldbu	r16,164(sp)
   12528:	e011883a 	mov	r8,fp
   1252c:	84003fcc 	andi	r16,r16,255
   12530:	803e9626 	beq	r16,zero,11f8c <__alt_data_end+0xfc011f8c>
   12534:	d8c02b03 	ldbu	r3,172(sp)
   12538:	d8c02785 	stb	r3,158(sp)
   1253c:	003e9306 	br	11f8c <__alt_data_end+0xfc011f8c>
   12540:	00c00044 	movi	r3,1
   12544:	d8c02905 	stb	r3,164(sp)
   12548:	00c00ac4 	movi	r3,43
   1254c:	d8c02b05 	stb	r3,172(sp)
   12550:	ac400007 	ldb	r17,0(r21)
   12554:	003d4306 	br	11a64 <__alt_data_end+0xfc011a64>
   12558:	84000814 	ori	r16,r16,32
   1255c:	ac400007 	ldb	r17,0(r21)
   12560:	003d4006 	br	11a64 <__alt_data_end+0xfc011a64>
   12564:	d8802e17 	ldw	r2,184(sp)
   12568:	8025883a 	mov	r18,r16
   1256c:	d8002785 	stb	zero,158(sp)
   12570:	14000017 	ldw	r16,0(r2)
   12574:	e011883a 	mov	r8,fp
   12578:	14c00104 	addi	r19,r2,4
   1257c:	80042d26 	beq	r16,zero,13634 <___vfprintf_internal_r+0x1d58>
   12580:	d8c02a17 	ldw	r3,168(sp)
   12584:	1803e416 	blt	r3,zero,13518 <___vfprintf_internal_r+0x1c3c>
   12588:	180d883a 	mov	r6,r3
   1258c:	000b883a 	mov	r5,zero
   12590:	8009883a 	mov	r4,r16
   12594:	df003d15 	stw	fp,244(sp)
   12598:	0016a080 	call	16a08 <memchr>
   1259c:	da003d17 	ldw	r8,244(sp)
   125a0:	10046826 	beq	r2,zero,13744 <___vfprintf_internal_r+0x1e68>
   125a4:	1405c83a 	sub	r2,r2,r16
   125a8:	d8802b15 	stw	r2,172(sp)
   125ac:	1003e016 	blt	r2,zero,13530 <___vfprintf_internal_r+0x1c54>
   125b0:	df002783 	ldbu	fp,158(sp)
   125b4:	d8802915 	stw	r2,164(sp)
   125b8:	dcc02e15 	stw	r19,184(sp)
   125bc:	d8002a15 	stw	zero,168(sp)
   125c0:	d8003215 	stw	zero,200(sp)
   125c4:	003ea206 	br	12050 <__alt_data_end+0xfc012050>
   125c8:	8025883a 	mov	r18,r16
   125cc:	dc002903 	ldbu	r16,164(sp)
   125d0:	e011883a 	mov	r8,fp
   125d4:	84003fcc 	andi	r16,r16,255
   125d8:	803f8d26 	beq	r16,zero,12410 <__alt_data_end+0xfc012410>
   125dc:	d8c02b03 	ldbu	r3,172(sp)
   125e0:	d8c02785 	stb	r3,158(sp)
   125e4:	003f8a06 	br	12410 <__alt_data_end+0xfc012410>
   125e8:	8025883a 	mov	r18,r16
   125ec:	dc002903 	ldbu	r16,164(sp)
   125f0:	e011883a 	mov	r8,fp
   125f4:	84003fcc 	andi	r16,r16,255
   125f8:	8005661e 	bne	r16,zero,13b94 <___vfprintf_internal_r+0x22b8>
   125fc:	010000f4 	movhi	r4,3
   12600:	212a8304 	addi	r4,r4,-22004
   12604:	d9003915 	stw	r4,228(sp)
   12608:	9080080c 	andi	r2,r18,32
   1260c:	103f9f1e 	bne	r2,zero,1248c <__alt_data_end+0xfc01248c>
   12610:	9080040c 	andi	r2,r18,16
   12614:	1002eb26 	beq	r2,zero,131c4 <___vfprintf_internal_r+0x18e8>
   12618:	d8802e17 	ldw	r2,184(sp)
   1261c:	002d883a 	mov	r22,zero
   12620:	14c00017 	ldw	r19,0(r2)
   12624:	10800104 	addi	r2,r2,4
   12628:	d8802e15 	stw	r2,184(sp)
   1262c:	003f9c06 	br	124a0 <__alt_data_end+0xfc0124a0>
   12630:	d8802b07 	ldb	r2,172(sp)
   12634:	1002e11e 	bne	r2,zero,131bc <___vfprintf_internal_r+0x18e0>
   12638:	00c00044 	movi	r3,1
   1263c:	d8c02905 	stb	r3,164(sp)
   12640:	00c00804 	movi	r3,32
   12644:	d8c02b05 	stb	r3,172(sp)
   12648:	ac400007 	ldb	r17,0(r21)
   1264c:	003d0506 	br	11a64 <__alt_data_end+0xfc011a64>
   12650:	84000054 	ori	r16,r16,1
   12654:	ac400007 	ldb	r17,0(r21)
   12658:	003d0206 	br	11a64 <__alt_data_end+0xfc011a64>
   1265c:	8025883a 	mov	r18,r16
   12660:	dc002903 	ldbu	r16,164(sp)
   12664:	e011883a 	mov	r8,fp
   12668:	84003fcc 	andi	r16,r16,255
   1266c:	803de726 	beq	r16,zero,11e0c <__alt_data_end+0xfc011e0c>
   12670:	d8c02b03 	ldbu	r3,172(sp)
   12674:	d8c02785 	stb	r3,158(sp)
   12678:	003de406 	br	11e0c <__alt_data_end+0xfc011e0c>
   1267c:	84001014 	ori	r16,r16,64
   12680:	ac400007 	ldb	r17,0(r21)
   12684:	003cf706 	br	11a64 <__alt_data_end+0xfc011a64>
   12688:	ac400007 	ldb	r17,0(r21)
   1268c:	00801b04 	movi	r2,108
   12690:	88838f26 	beq	r17,r2,134d0 <___vfprintf_internal_r+0x1bf4>
   12694:	84000414 	ori	r16,r16,16
   12698:	003cf206 	br	11a64 <__alt_data_end+0xfc011a64>
   1269c:	8025883a 	mov	r18,r16
   126a0:	dc002903 	ldbu	r16,164(sp)
   126a4:	e011883a 	mov	r8,fp
   126a8:	84003fcc 	andi	r16,r16,255
   126ac:	80053f1e 	bne	r16,zero,13bac <___vfprintf_internal_r+0x22d0>
   126b0:	9080080c 	andi	r2,r18,32
   126b4:	1002d226 	beq	r2,zero,13200 <___vfprintf_internal_r+0x1924>
   126b8:	d9002e17 	ldw	r4,184(sp)
   126bc:	d9402f17 	ldw	r5,188(sp)
   126c0:	20800017 	ldw	r2,0(r4)
   126c4:	2807d7fa 	srai	r3,r5,31
   126c8:	21000104 	addi	r4,r4,4
   126cc:	d9002e15 	stw	r4,184(sp)
   126d0:	11400015 	stw	r5,0(r2)
   126d4:	10c00115 	stw	r3,4(r2)
   126d8:	003cb806 	br	119bc <__alt_data_end+0xfc0119bc>
   126dc:	d8c02e17 	ldw	r3,184(sp)
   126e0:	d9002e17 	ldw	r4,184(sp)
   126e4:	8025883a 	mov	r18,r16
   126e8:	18800017 	ldw	r2,0(r3)
   126ec:	21000104 	addi	r4,r4,4
   126f0:	00c00044 	movi	r3,1
   126f4:	e011883a 	mov	r8,fp
   126f8:	d8c02915 	stw	r3,164(sp)
   126fc:	d8002785 	stb	zero,158(sp)
   12700:	d8801405 	stb	r2,80(sp)
   12704:	d9002e15 	stw	r4,184(sp)
   12708:	d8c02b15 	stw	r3,172(sp)
   1270c:	d8002a15 	stw	zero,168(sp)
   12710:	d8003215 	stw	zero,200(sp)
   12714:	dc001404 	addi	r16,sp,80
   12718:	0039883a 	mov	fp,zero
   1271c:	003e5306 	br	1206c <__alt_data_end+0xfc01206c>
   12720:	010000f4 	movhi	r4,3
   12724:	212a8304 	addi	r4,r4,-22004
   12728:	0039883a 	mov	fp,zero
   1272c:	d9003915 	stw	r4,228(sp)
   12730:	04401e04 	movi	r17,120
   12734:	003f6906 	br	124dc <__alt_data_end+0xfc0124dc>
   12738:	8025883a 	mov	r18,r16
   1273c:	dc002903 	ldbu	r16,164(sp)
   12740:	e011883a 	mov	r8,fp
   12744:	84003fcc 	andi	r16,r16,255
   12748:	8005081e 	bne	r16,zero,13b6c <___vfprintf_internal_r+0x2290>
   1274c:	883d6126 	beq	r17,zero,11cd4 <__alt_data_end+0xfc011cd4>
   12750:	00c00044 	movi	r3,1
   12754:	d8c02915 	stw	r3,164(sp)
   12758:	dc401405 	stb	r17,80(sp)
   1275c:	d8002785 	stb	zero,158(sp)
   12760:	003fe906 	br	12708 <__alt_data_end+0xfc012708>
   12764:	014000f4 	movhi	r5,3
   12768:	296a8304 	addi	r5,r5,-22004
   1276c:	d9403915 	stw	r5,228(sp)
   12770:	d8c02e15 	stw	r3,184(sp)
   12774:	1025883a 	mov	r18,r2
   12778:	04401e04 	movi	r17,120
   1277c:	9d84b03a 	or	r2,r19,r22
   12780:	1000fc1e 	bne	r2,zero,12b74 <___vfprintf_internal_r+0x1298>
   12784:	0039883a 	mov	fp,zero
   12788:	00800084 	movi	r2,2
   1278c:	10803fcc 	andi	r2,r2,255
   12790:	00c00044 	movi	r3,1
   12794:	10c20f26 	beq	r2,r3,12fd4 <___vfprintf_internal_r+0x16f8>
   12798:	00c00084 	movi	r3,2
   1279c:	10fd3326 	beq	r2,r3,11c6c <__alt_data_end+0xfc011c6c>
   127a0:	003e0b06 	br	11fd0 <__alt_data_end+0xfc011fd0>
   127a4:	d8c02017 	ldw	r3,128(sp)
   127a8:	003e7106 	br	12170 <__alt_data_end+0xfc012170>
   127ac:	00801944 	movi	r2,101
   127b0:	14407e0e 	bge	r2,r17,129ac <___vfprintf_internal_r+0x10d0>
   127b4:	d9003617 	ldw	r4,216(sp)
   127b8:	d9403817 	ldw	r5,224(sp)
   127bc:	000d883a 	mov	r6,zero
   127c0:	000f883a 	mov	r7,zero
   127c4:	d8c03c15 	stw	r3,240(sp)
   127c8:	da003d15 	stw	r8,244(sp)
   127cc:	001d96c0 	call	1d96c <__eqdf2>
   127d0:	d8c03c17 	ldw	r3,240(sp)
   127d4:	da003d17 	ldw	r8,244(sp)
   127d8:	1000f71e 	bne	r2,zero,12bb8 <___vfprintf_internal_r+0x12dc>
   127dc:	d8801f17 	ldw	r2,124(sp)
   127e0:	010000f4 	movhi	r4,3
   127e4:	212a8a04 	addi	r4,r4,-21976
   127e8:	18c00044 	addi	r3,r3,1
   127ec:	10800044 	addi	r2,r2,1
   127f0:	41000015 	stw	r4,0(r8)
   127f4:	01000044 	movi	r4,1
   127f8:	41000115 	stw	r4,4(r8)
   127fc:	d8c02015 	stw	r3,128(sp)
   12800:	d8801f15 	stw	r2,124(sp)
   12804:	010001c4 	movi	r4,7
   12808:	2082b816 	blt	r4,r2,132ec <___vfprintf_internal_r+0x1a10>
   1280c:	42000204 	addi	r8,r8,8
   12810:	d8802617 	ldw	r2,152(sp)
   12814:	d9403317 	ldw	r5,204(sp)
   12818:	11400216 	blt	r2,r5,12824 <___vfprintf_internal_r+0xf48>
   1281c:	9080004c 	andi	r2,r18,1
   12820:	103eb326 	beq	r2,zero,122f0 <__alt_data_end+0xfc0122f0>
   12824:	d8803717 	ldw	r2,220(sp)
   12828:	d9003417 	ldw	r4,208(sp)
   1282c:	d9403717 	ldw	r5,220(sp)
   12830:	1887883a 	add	r3,r3,r2
   12834:	d8801f17 	ldw	r2,124(sp)
   12838:	41000015 	stw	r4,0(r8)
   1283c:	41400115 	stw	r5,4(r8)
   12840:	10800044 	addi	r2,r2,1
   12844:	d8c02015 	stw	r3,128(sp)
   12848:	d8801f15 	stw	r2,124(sp)
   1284c:	010001c4 	movi	r4,7
   12850:	20832916 	blt	r4,r2,134f8 <___vfprintf_internal_r+0x1c1c>
   12854:	42000204 	addi	r8,r8,8
   12858:	d8803317 	ldw	r2,204(sp)
   1285c:	143fffc4 	addi	r16,r2,-1
   12860:	043ea30e 	bge	zero,r16,122f0 <__alt_data_end+0xfc0122f0>
   12864:	04400404 	movi	r17,16
   12868:	d8801f17 	ldw	r2,124(sp)
   1286c:	8c00880e 	bge	r17,r16,12a90 <___vfprintf_internal_r+0x11b4>
   12870:	014000f4 	movhi	r5,3
   12874:	296a9284 	addi	r5,r5,-21942
   12878:	d9402c15 	stw	r5,176(sp)
   1287c:	058001c4 	movi	r22,7
   12880:	dcc02d17 	ldw	r19,180(sp)
   12884:	00000306 	br	12894 <___vfprintf_internal_r+0xfb8>
   12888:	42000204 	addi	r8,r8,8
   1288c:	843ffc04 	addi	r16,r16,-16
   12890:	8c00820e 	bge	r17,r16,12a9c <___vfprintf_internal_r+0x11c0>
   12894:	18c00404 	addi	r3,r3,16
   12898:	10800044 	addi	r2,r2,1
   1289c:	45000015 	stw	r20,0(r8)
   128a0:	44400115 	stw	r17,4(r8)
   128a4:	d8c02015 	stw	r3,128(sp)
   128a8:	d8801f15 	stw	r2,124(sp)
   128ac:	b0bff60e 	bge	r22,r2,12888 <__alt_data_end+0xfc012888>
   128b0:	d9801e04 	addi	r6,sp,120
   128b4:	b80b883a 	mov	r5,r23
   128b8:	9809883a 	mov	r4,r19
   128bc:	0019be80 	call	19be8 <__sprint_r>
   128c0:	103d0a1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   128c4:	d8c02017 	ldw	r3,128(sp)
   128c8:	d8801f17 	ldw	r2,124(sp)
   128cc:	da000404 	addi	r8,sp,16
   128d0:	003fee06 	br	1288c <__alt_data_end+0xfc01288c>
   128d4:	d9403117 	ldw	r5,196(sp)
   128d8:	d8802917 	ldw	r2,164(sp)
   128dc:	28adc83a 	sub	r22,r5,r2
   128e0:	05be410e 	bge	zero,r22,121e8 <__alt_data_end+0xfc0121e8>
   128e4:	07000404 	movi	fp,16
   128e8:	d8801f17 	ldw	r2,124(sp)
   128ec:	e5838f0e 	bge	fp,r22,1372c <___vfprintf_internal_r+0x1e50>
   128f0:	014000f4 	movhi	r5,3
   128f4:	296a9284 	addi	r5,r5,-21942
   128f8:	dc403015 	stw	r17,192(sp)
   128fc:	d9402c15 	stw	r5,176(sp)
   12900:	b023883a 	mov	r17,r22
   12904:	04c001c4 	movi	r19,7
   12908:	a82d883a 	mov	r22,r21
   1290c:	902b883a 	mov	r21,r18
   12910:	8025883a 	mov	r18,r16
   12914:	dc002d17 	ldw	r16,180(sp)
   12918:	00000306 	br	12928 <___vfprintf_internal_r+0x104c>
   1291c:	8c7ffc04 	addi	r17,r17,-16
   12920:	42000204 	addi	r8,r8,8
   12924:	e440110e 	bge	fp,r17,1296c <___vfprintf_internal_r+0x1090>
   12928:	18c00404 	addi	r3,r3,16
   1292c:	10800044 	addi	r2,r2,1
   12930:	45000015 	stw	r20,0(r8)
   12934:	47000115 	stw	fp,4(r8)
   12938:	d8c02015 	stw	r3,128(sp)
   1293c:	d8801f15 	stw	r2,124(sp)
   12940:	98bff60e 	bge	r19,r2,1291c <__alt_data_end+0xfc01291c>
   12944:	d9801e04 	addi	r6,sp,120
   12948:	b80b883a 	mov	r5,r23
   1294c:	8009883a 	mov	r4,r16
   12950:	0019be80 	call	19be8 <__sprint_r>
   12954:	103ce51e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12958:	8c7ffc04 	addi	r17,r17,-16
   1295c:	d8c02017 	ldw	r3,128(sp)
   12960:	d8801f17 	ldw	r2,124(sp)
   12964:	da000404 	addi	r8,sp,16
   12968:	e47fef16 	blt	fp,r17,12928 <__alt_data_end+0xfc012928>
   1296c:	9021883a 	mov	r16,r18
   12970:	a825883a 	mov	r18,r21
   12974:	b02b883a 	mov	r21,r22
   12978:	882d883a 	mov	r22,r17
   1297c:	dc403017 	ldw	r17,192(sp)
   12980:	d9002c17 	ldw	r4,176(sp)
   12984:	1d87883a 	add	r3,r3,r22
   12988:	10800044 	addi	r2,r2,1
   1298c:	41000015 	stw	r4,0(r8)
   12990:	45800115 	stw	r22,4(r8)
   12994:	d8c02015 	stw	r3,128(sp)
   12998:	d8801f15 	stw	r2,124(sp)
   1299c:	010001c4 	movi	r4,7
   129a0:	20818e16 	blt	r4,r2,12fdc <___vfprintf_internal_r+0x1700>
   129a4:	42000204 	addi	r8,r8,8
   129a8:	003e0f06 	br	121e8 <__alt_data_end+0xfc0121e8>
   129ac:	d9403317 	ldw	r5,204(sp)
   129b0:	00800044 	movi	r2,1
   129b4:	18c00044 	addi	r3,r3,1
   129b8:	1141530e 	bge	r2,r5,12f08 <___vfprintf_internal_r+0x162c>
   129bc:	dc401f17 	ldw	r17,124(sp)
   129c0:	00800044 	movi	r2,1
   129c4:	40800115 	stw	r2,4(r8)
   129c8:	8c400044 	addi	r17,r17,1
   129cc:	44000015 	stw	r16,0(r8)
   129d0:	d8c02015 	stw	r3,128(sp)
   129d4:	dc401f15 	stw	r17,124(sp)
   129d8:	008001c4 	movi	r2,7
   129dc:	14416b16 	blt	r2,r17,12f8c <___vfprintf_internal_r+0x16b0>
   129e0:	42000204 	addi	r8,r8,8
   129e4:	d8803717 	ldw	r2,220(sp)
   129e8:	d9003417 	ldw	r4,208(sp)
   129ec:	8c400044 	addi	r17,r17,1
   129f0:	10c7883a 	add	r3,r2,r3
   129f4:	40800115 	stw	r2,4(r8)
   129f8:	41000015 	stw	r4,0(r8)
   129fc:	d8c02015 	stw	r3,128(sp)
   12a00:	dc401f15 	stw	r17,124(sp)
   12a04:	008001c4 	movi	r2,7
   12a08:	14416916 	blt	r2,r17,12fb0 <___vfprintf_internal_r+0x16d4>
   12a0c:	45800204 	addi	r22,r8,8
   12a10:	d9003617 	ldw	r4,216(sp)
   12a14:	d9403817 	ldw	r5,224(sp)
   12a18:	000d883a 	mov	r6,zero
   12a1c:	000f883a 	mov	r7,zero
   12a20:	d8c03c15 	stw	r3,240(sp)
   12a24:	001d96c0 	call	1d96c <__eqdf2>
   12a28:	d8c03c17 	ldw	r3,240(sp)
   12a2c:	1000bc26 	beq	r2,zero,12d20 <___vfprintf_internal_r+0x1444>
   12a30:	d9403317 	ldw	r5,204(sp)
   12a34:	84000044 	addi	r16,r16,1
   12a38:	8c400044 	addi	r17,r17,1
   12a3c:	28bfffc4 	addi	r2,r5,-1
   12a40:	1887883a 	add	r3,r3,r2
   12a44:	b0800115 	stw	r2,4(r22)
   12a48:	b4000015 	stw	r16,0(r22)
   12a4c:	d8c02015 	stw	r3,128(sp)
   12a50:	dc401f15 	stw	r17,124(sp)
   12a54:	008001c4 	movi	r2,7
   12a58:	14414316 	blt	r2,r17,12f68 <___vfprintf_internal_r+0x168c>
   12a5c:	b5800204 	addi	r22,r22,8
   12a60:	d9003a17 	ldw	r4,232(sp)
   12a64:	df0022c4 	addi	fp,sp,139
   12a68:	8c400044 	addi	r17,r17,1
   12a6c:	20c7883a 	add	r3,r4,r3
   12a70:	b7000015 	stw	fp,0(r22)
   12a74:	b1000115 	stw	r4,4(r22)
   12a78:	d8c02015 	stw	r3,128(sp)
   12a7c:	dc401f15 	stw	r17,124(sp)
   12a80:	008001c4 	movi	r2,7
   12a84:	14400e16 	blt	r2,r17,12ac0 <___vfprintf_internal_r+0x11e4>
   12a88:	b2000204 	addi	r8,r22,8
   12a8c:	003e1806 	br	122f0 <__alt_data_end+0xfc0122f0>
   12a90:	010000f4 	movhi	r4,3
   12a94:	212a9284 	addi	r4,r4,-21942
   12a98:	d9002c15 	stw	r4,176(sp)
   12a9c:	d9002c17 	ldw	r4,176(sp)
   12aa0:	1c07883a 	add	r3,r3,r16
   12aa4:	44000115 	stw	r16,4(r8)
   12aa8:	41000015 	stw	r4,0(r8)
   12aac:	10800044 	addi	r2,r2,1
   12ab0:	d8c02015 	stw	r3,128(sp)
   12ab4:	d8801f15 	stw	r2,124(sp)
   12ab8:	010001c4 	movi	r4,7
   12abc:	20be0b0e 	bge	r4,r2,122ec <__alt_data_end+0xfc0122ec>
   12ac0:	d9002d17 	ldw	r4,180(sp)
   12ac4:	d9801e04 	addi	r6,sp,120
   12ac8:	b80b883a 	mov	r5,r23
   12acc:	0019be80 	call	19be8 <__sprint_r>
   12ad0:	103c861e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12ad4:	d8c02017 	ldw	r3,128(sp)
   12ad8:	da000404 	addi	r8,sp,16
   12adc:	003e0406 	br	122f0 <__alt_data_end+0xfc0122f0>
   12ae0:	d9002d17 	ldw	r4,180(sp)
   12ae4:	d9801e04 	addi	r6,sp,120
   12ae8:	b80b883a 	mov	r5,r23
   12aec:	0019be80 	call	19be8 <__sprint_r>
   12af0:	103e3b26 	beq	r2,zero,123e0 <__alt_data_end+0xfc0123e0>
   12af4:	003c7d06 	br	11cec <__alt_data_end+0xfc011cec>
   12af8:	d9002d17 	ldw	r4,180(sp)
   12afc:	d9801e04 	addi	r6,sp,120
   12b00:	b80b883a 	mov	r5,r23
   12b04:	0019be80 	call	19be8 <__sprint_r>
   12b08:	103c781e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12b0c:	d8c02017 	ldw	r3,128(sp)
   12b10:	da000404 	addi	r8,sp,16
   12b14:	003de906 	br	122bc <__alt_data_end+0xfc0122bc>
   12b18:	d9002d17 	ldw	r4,180(sp)
   12b1c:	d9801e04 	addi	r6,sp,120
   12b20:	b80b883a 	mov	r5,r23
   12b24:	0019be80 	call	19be8 <__sprint_r>
   12b28:	103c701e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12b2c:	d8c02017 	ldw	r3,128(sp)
   12b30:	da000404 	addi	r8,sp,16
   12b34:	003d9b06 	br	121a4 <__alt_data_end+0xfc0121a4>
   12b38:	d9002d17 	ldw	r4,180(sp)
   12b3c:	d9801e04 	addi	r6,sp,120
   12b40:	b80b883a 	mov	r5,r23
   12b44:	0019be80 	call	19be8 <__sprint_r>
   12b48:	103c681e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12b4c:	d8c02017 	ldw	r3,128(sp)
   12b50:	da000404 	addi	r8,sp,16
   12b54:	003da106 	br	121dc <__alt_data_end+0xfc0121dc>
   12b58:	d9402a17 	ldw	r5,168(sp)
   12b5c:	d8002785 	stb	zero,158(sp)
   12b60:	283f0616 	blt	r5,zero,1277c <__alt_data_end+0xfc01277c>
   12b64:	00ffdfc4 	movi	r3,-129
   12b68:	9d84b03a 	or	r2,r19,r22
   12b6c:	90e4703a 	and	r18,r18,r3
   12b70:	103c3b26 	beq	r2,zero,11c60 <__alt_data_end+0xfc011c60>
   12b74:	0039883a 	mov	fp,zero
   12b78:	003e5806 	br	124dc <__alt_data_end+0xfc0124dc>
   12b7c:	9080040c 	andi	r2,r18,16
   12b80:	1001b326 	beq	r2,zero,13250 <___vfprintf_internal_r+0x1974>
   12b84:	d8c02e17 	ldw	r3,184(sp)
   12b88:	d9002a17 	ldw	r4,168(sp)
   12b8c:	d8002785 	stb	zero,158(sp)
   12b90:	18800104 	addi	r2,r3,4
   12b94:	1cc00017 	ldw	r19,0(r3)
   12b98:	002d883a 	mov	r22,zero
   12b9c:	2001b516 	blt	r4,zero,13274 <___vfprintf_internal_r+0x1998>
   12ba0:	00ffdfc4 	movi	r3,-129
   12ba4:	d8802e15 	stw	r2,184(sp)
   12ba8:	90e4703a 	and	r18,r18,r3
   12bac:	983d0526 	beq	r19,zero,11fc4 <__alt_data_end+0xfc011fc4>
   12bb0:	0039883a 	mov	fp,zero
   12bb4:	003d0806 	br	11fd8 <__alt_data_end+0xfc011fd8>
   12bb8:	dc402617 	ldw	r17,152(sp)
   12bbc:	0441d30e 	bge	zero,r17,1330c <___vfprintf_internal_r+0x1a30>
   12bc0:	dc403217 	ldw	r17,200(sp)
   12bc4:	d8803317 	ldw	r2,204(sp)
   12bc8:	1440010e 	bge	r2,r17,12bd0 <___vfprintf_internal_r+0x12f4>
   12bcc:	1023883a 	mov	r17,r2
   12bd0:	04400a0e 	bge	zero,r17,12bfc <___vfprintf_internal_r+0x1320>
   12bd4:	d8801f17 	ldw	r2,124(sp)
   12bd8:	1c47883a 	add	r3,r3,r17
   12bdc:	44000015 	stw	r16,0(r8)
   12be0:	10800044 	addi	r2,r2,1
   12be4:	44400115 	stw	r17,4(r8)
   12be8:	d8c02015 	stw	r3,128(sp)
   12bec:	d8801f15 	stw	r2,124(sp)
   12bf0:	010001c4 	movi	r4,7
   12bf4:	20826516 	blt	r4,r2,1358c <___vfprintf_internal_r+0x1cb0>
   12bf8:	42000204 	addi	r8,r8,8
   12bfc:	88026116 	blt	r17,zero,13584 <___vfprintf_internal_r+0x1ca8>
   12c00:	d9003217 	ldw	r4,200(sp)
   12c04:	2463c83a 	sub	r17,r4,r17
   12c08:	04407b0e 	bge	zero,r17,12df8 <___vfprintf_internal_r+0x151c>
   12c0c:	05800404 	movi	r22,16
   12c10:	d8801f17 	ldw	r2,124(sp)
   12c14:	b4419d0e 	bge	r22,r17,1328c <___vfprintf_internal_r+0x19b0>
   12c18:	010000f4 	movhi	r4,3
   12c1c:	212a9284 	addi	r4,r4,-21942
   12c20:	d9002c15 	stw	r4,176(sp)
   12c24:	070001c4 	movi	fp,7
   12c28:	dcc02d17 	ldw	r19,180(sp)
   12c2c:	00000306 	br	12c3c <___vfprintf_internal_r+0x1360>
   12c30:	42000204 	addi	r8,r8,8
   12c34:	8c7ffc04 	addi	r17,r17,-16
   12c38:	b441970e 	bge	r22,r17,13298 <___vfprintf_internal_r+0x19bc>
   12c3c:	18c00404 	addi	r3,r3,16
   12c40:	10800044 	addi	r2,r2,1
   12c44:	45000015 	stw	r20,0(r8)
   12c48:	45800115 	stw	r22,4(r8)
   12c4c:	d8c02015 	stw	r3,128(sp)
   12c50:	d8801f15 	stw	r2,124(sp)
   12c54:	e0bff60e 	bge	fp,r2,12c30 <__alt_data_end+0xfc012c30>
   12c58:	d9801e04 	addi	r6,sp,120
   12c5c:	b80b883a 	mov	r5,r23
   12c60:	9809883a 	mov	r4,r19
   12c64:	0019be80 	call	19be8 <__sprint_r>
   12c68:	103c201e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12c6c:	d8c02017 	ldw	r3,128(sp)
   12c70:	d8801f17 	ldw	r2,124(sp)
   12c74:	da000404 	addi	r8,sp,16
   12c78:	003fee06 	br	12c34 <__alt_data_end+0xfc012c34>
   12c7c:	d9002d17 	ldw	r4,180(sp)
   12c80:	d9801e04 	addi	r6,sp,120
   12c84:	b80b883a 	mov	r5,r23
   12c88:	0019be80 	call	19be8 <__sprint_r>
   12c8c:	103c171e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12c90:	d8c02017 	ldw	r3,128(sp)
   12c94:	df002787 	ldb	fp,158(sp)
   12c98:	da000404 	addi	r8,sp,16
   12c9c:	003d3406 	br	12170 <__alt_data_end+0xfc012170>
   12ca0:	9080040c 	andi	r2,r18,16
   12ca4:	10016126 	beq	r2,zero,1322c <___vfprintf_internal_r+0x1950>
   12ca8:	d9402e17 	ldw	r5,184(sp)
   12cac:	2cc00017 	ldw	r19,0(r5)
   12cb0:	29400104 	addi	r5,r5,4
   12cb4:	d9402e15 	stw	r5,184(sp)
   12cb8:	982dd7fa 	srai	r22,r19,31
   12cbc:	b005883a 	mov	r2,r22
   12cc0:	003c5a06 	br	11e2c <__alt_data_end+0xfc011e2c>
   12cc4:	9080040c 	andi	r2,r18,16
   12cc8:	10003526 	beq	r2,zero,12da0 <___vfprintf_internal_r+0x14c4>
   12ccc:	d8c02e17 	ldw	r3,184(sp)
   12cd0:	d9002a17 	ldw	r4,168(sp)
   12cd4:	d8002785 	stb	zero,158(sp)
   12cd8:	18800104 	addi	r2,r3,4
   12cdc:	1cc00017 	ldw	r19,0(r3)
   12ce0:	002d883a 	mov	r22,zero
   12ce4:	20003716 	blt	r4,zero,12dc4 <___vfprintf_internal_r+0x14e8>
   12ce8:	00ffdfc4 	movi	r3,-129
   12cec:	d8802e15 	stw	r2,184(sp)
   12cf0:	90e4703a 	and	r18,r18,r3
   12cf4:	0039883a 	mov	fp,zero
   12cf8:	983dd426 	beq	r19,zero,1244c <__alt_data_end+0xfc01244c>
   12cfc:	00800244 	movi	r2,9
   12d00:	14fc5336 	bltu	r2,r19,11e50 <__alt_data_end+0xfc011e50>
   12d04:	d8c02817 	ldw	r3,160(sp)
   12d08:	dc001dc4 	addi	r16,sp,119
   12d0c:	9cc00c04 	addi	r19,r19,48
   12d10:	1c07c83a 	sub	r3,r3,r16
   12d14:	dcc01dc5 	stb	r19,119(sp)
   12d18:	d8c02b15 	stw	r3,172(sp)
   12d1c:	003cc606 	br	12038 <__alt_data_end+0xfc012038>
   12d20:	d8803317 	ldw	r2,204(sp)
   12d24:	143fffc4 	addi	r16,r2,-1
   12d28:	043f4d0e 	bge	zero,r16,12a60 <__alt_data_end+0xfc012a60>
   12d2c:	07000404 	movi	fp,16
   12d30:	e400810e 	bge	fp,r16,12f38 <___vfprintf_internal_r+0x165c>
   12d34:	014000f4 	movhi	r5,3
   12d38:	296a9284 	addi	r5,r5,-21942
   12d3c:	d9402c15 	stw	r5,176(sp)
   12d40:	01c001c4 	movi	r7,7
   12d44:	dcc02d17 	ldw	r19,180(sp)
   12d48:	00000306 	br	12d58 <___vfprintf_internal_r+0x147c>
   12d4c:	b5800204 	addi	r22,r22,8
   12d50:	843ffc04 	addi	r16,r16,-16
   12d54:	e4007b0e 	bge	fp,r16,12f44 <___vfprintf_internal_r+0x1668>
   12d58:	18c00404 	addi	r3,r3,16
   12d5c:	8c400044 	addi	r17,r17,1
   12d60:	b5000015 	stw	r20,0(r22)
   12d64:	b7000115 	stw	fp,4(r22)
   12d68:	d8c02015 	stw	r3,128(sp)
   12d6c:	dc401f15 	stw	r17,124(sp)
   12d70:	3c7ff60e 	bge	r7,r17,12d4c <__alt_data_end+0xfc012d4c>
   12d74:	d9801e04 	addi	r6,sp,120
   12d78:	b80b883a 	mov	r5,r23
   12d7c:	9809883a 	mov	r4,r19
   12d80:	d9c03c15 	stw	r7,240(sp)
   12d84:	0019be80 	call	19be8 <__sprint_r>
   12d88:	d9c03c17 	ldw	r7,240(sp)
   12d8c:	103bd71e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12d90:	d8c02017 	ldw	r3,128(sp)
   12d94:	dc401f17 	ldw	r17,124(sp)
   12d98:	dd800404 	addi	r22,sp,16
   12d9c:	003fec06 	br	12d50 <__alt_data_end+0xfc012d50>
   12da0:	9080100c 	andi	r2,r18,64
   12da4:	d8002785 	stb	zero,158(sp)
   12da8:	10010e26 	beq	r2,zero,131e4 <___vfprintf_internal_r+0x1908>
   12dac:	d9402e17 	ldw	r5,184(sp)
   12db0:	d8c02a17 	ldw	r3,168(sp)
   12db4:	002d883a 	mov	r22,zero
   12db8:	28800104 	addi	r2,r5,4
   12dbc:	2cc0000b 	ldhu	r19,0(r5)
   12dc0:	183fc90e 	bge	r3,zero,12ce8 <__alt_data_end+0xfc012ce8>
   12dc4:	d8802e15 	stw	r2,184(sp)
   12dc8:	0039883a 	mov	fp,zero
   12dcc:	9d84b03a 	or	r2,r19,r22
   12dd0:	103c1e1e 	bne	r2,zero,11e4c <__alt_data_end+0xfc011e4c>
   12dd4:	00800044 	movi	r2,1
   12dd8:	003e6c06 	br	1278c <__alt_data_end+0xfc01278c>
   12ddc:	d9002d17 	ldw	r4,180(sp)
   12de0:	d9801e04 	addi	r6,sp,120
   12de4:	b80b883a 	mov	r5,r23
   12de8:	0019be80 	call	19be8 <__sprint_r>
   12dec:	103bbf1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12df0:	d8c02017 	ldw	r3,128(sp)
   12df4:	da000404 	addi	r8,sp,16
   12df8:	d9003217 	ldw	r4,200(sp)
   12dfc:	d8802617 	ldw	r2,152(sp)
   12e00:	d9403317 	ldw	r5,204(sp)
   12e04:	8123883a 	add	r17,r16,r4
   12e08:	11400216 	blt	r2,r5,12e14 <___vfprintf_internal_r+0x1538>
   12e0c:	9100004c 	andi	r4,r18,1
   12e10:	20000d26 	beq	r4,zero,12e48 <___vfprintf_internal_r+0x156c>
   12e14:	d9003717 	ldw	r4,220(sp)
   12e18:	d9403417 	ldw	r5,208(sp)
   12e1c:	1907883a 	add	r3,r3,r4
   12e20:	d9001f17 	ldw	r4,124(sp)
   12e24:	41400015 	stw	r5,0(r8)
   12e28:	d9403717 	ldw	r5,220(sp)
   12e2c:	21000044 	addi	r4,r4,1
   12e30:	d8c02015 	stw	r3,128(sp)
   12e34:	41400115 	stw	r5,4(r8)
   12e38:	d9001f15 	stw	r4,124(sp)
   12e3c:	014001c4 	movi	r5,7
   12e40:	2901e816 	blt	r5,r4,135e4 <___vfprintf_internal_r+0x1d08>
   12e44:	42000204 	addi	r8,r8,8
   12e48:	d9003317 	ldw	r4,204(sp)
   12e4c:	8121883a 	add	r16,r16,r4
   12e50:	2085c83a 	sub	r2,r4,r2
   12e54:	8461c83a 	sub	r16,r16,r17
   12e58:	1400010e 	bge	r2,r16,12e60 <___vfprintf_internal_r+0x1584>
   12e5c:	1021883a 	mov	r16,r2
   12e60:	04000a0e 	bge	zero,r16,12e8c <___vfprintf_internal_r+0x15b0>
   12e64:	d9001f17 	ldw	r4,124(sp)
   12e68:	1c07883a 	add	r3,r3,r16
   12e6c:	44400015 	stw	r17,0(r8)
   12e70:	21000044 	addi	r4,r4,1
   12e74:	44000115 	stw	r16,4(r8)
   12e78:	d8c02015 	stw	r3,128(sp)
   12e7c:	d9001f15 	stw	r4,124(sp)
   12e80:	014001c4 	movi	r5,7
   12e84:	2901fb16 	blt	r5,r4,13674 <___vfprintf_internal_r+0x1d98>
   12e88:	42000204 	addi	r8,r8,8
   12e8c:	8001f716 	blt	r16,zero,1366c <___vfprintf_internal_r+0x1d90>
   12e90:	1421c83a 	sub	r16,r2,r16
   12e94:	043d160e 	bge	zero,r16,122f0 <__alt_data_end+0xfc0122f0>
   12e98:	04400404 	movi	r17,16
   12e9c:	d8801f17 	ldw	r2,124(sp)
   12ea0:	8c3efb0e 	bge	r17,r16,12a90 <__alt_data_end+0xfc012a90>
   12ea4:	014000f4 	movhi	r5,3
   12ea8:	296a9284 	addi	r5,r5,-21942
   12eac:	d9402c15 	stw	r5,176(sp)
   12eb0:	058001c4 	movi	r22,7
   12eb4:	dcc02d17 	ldw	r19,180(sp)
   12eb8:	00000306 	br	12ec8 <___vfprintf_internal_r+0x15ec>
   12ebc:	42000204 	addi	r8,r8,8
   12ec0:	843ffc04 	addi	r16,r16,-16
   12ec4:	8c3ef50e 	bge	r17,r16,12a9c <__alt_data_end+0xfc012a9c>
   12ec8:	18c00404 	addi	r3,r3,16
   12ecc:	10800044 	addi	r2,r2,1
   12ed0:	45000015 	stw	r20,0(r8)
   12ed4:	44400115 	stw	r17,4(r8)
   12ed8:	d8c02015 	stw	r3,128(sp)
   12edc:	d8801f15 	stw	r2,124(sp)
   12ee0:	b0bff60e 	bge	r22,r2,12ebc <__alt_data_end+0xfc012ebc>
   12ee4:	d9801e04 	addi	r6,sp,120
   12ee8:	b80b883a 	mov	r5,r23
   12eec:	9809883a 	mov	r4,r19
   12ef0:	0019be80 	call	19be8 <__sprint_r>
   12ef4:	103b7d1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12ef8:	d8c02017 	ldw	r3,128(sp)
   12efc:	d8801f17 	ldw	r2,124(sp)
   12f00:	da000404 	addi	r8,sp,16
   12f04:	003fee06 	br	12ec0 <__alt_data_end+0xfc012ec0>
   12f08:	9088703a 	and	r4,r18,r2
   12f0c:	203eab1e 	bne	r4,zero,129bc <__alt_data_end+0xfc0129bc>
   12f10:	dc401f17 	ldw	r17,124(sp)
   12f14:	40800115 	stw	r2,4(r8)
   12f18:	44000015 	stw	r16,0(r8)
   12f1c:	8c400044 	addi	r17,r17,1
   12f20:	d8c02015 	stw	r3,128(sp)
   12f24:	dc401f15 	stw	r17,124(sp)
   12f28:	008001c4 	movi	r2,7
   12f2c:	14400e16 	blt	r2,r17,12f68 <___vfprintf_internal_r+0x168c>
   12f30:	45800204 	addi	r22,r8,8
   12f34:	003eca06 	br	12a60 <__alt_data_end+0xfc012a60>
   12f38:	010000f4 	movhi	r4,3
   12f3c:	212a9284 	addi	r4,r4,-21942
   12f40:	d9002c15 	stw	r4,176(sp)
   12f44:	d8802c17 	ldw	r2,176(sp)
   12f48:	1c07883a 	add	r3,r3,r16
   12f4c:	8c400044 	addi	r17,r17,1
   12f50:	b0800015 	stw	r2,0(r22)
   12f54:	b4000115 	stw	r16,4(r22)
   12f58:	d8c02015 	stw	r3,128(sp)
   12f5c:	dc401f15 	stw	r17,124(sp)
   12f60:	008001c4 	movi	r2,7
   12f64:	147ebd0e 	bge	r2,r17,12a5c <__alt_data_end+0xfc012a5c>
   12f68:	d9002d17 	ldw	r4,180(sp)
   12f6c:	d9801e04 	addi	r6,sp,120
   12f70:	b80b883a 	mov	r5,r23
   12f74:	0019be80 	call	19be8 <__sprint_r>
   12f78:	103b5c1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12f7c:	d8c02017 	ldw	r3,128(sp)
   12f80:	dc401f17 	ldw	r17,124(sp)
   12f84:	dd800404 	addi	r22,sp,16
   12f88:	003eb506 	br	12a60 <__alt_data_end+0xfc012a60>
   12f8c:	d9002d17 	ldw	r4,180(sp)
   12f90:	d9801e04 	addi	r6,sp,120
   12f94:	b80b883a 	mov	r5,r23
   12f98:	0019be80 	call	19be8 <__sprint_r>
   12f9c:	103b531e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12fa0:	d8c02017 	ldw	r3,128(sp)
   12fa4:	dc401f17 	ldw	r17,124(sp)
   12fa8:	da000404 	addi	r8,sp,16
   12fac:	003e8d06 	br	129e4 <__alt_data_end+0xfc0129e4>
   12fb0:	d9002d17 	ldw	r4,180(sp)
   12fb4:	d9801e04 	addi	r6,sp,120
   12fb8:	b80b883a 	mov	r5,r23
   12fbc:	0019be80 	call	19be8 <__sprint_r>
   12fc0:	103b4a1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12fc4:	d8c02017 	ldw	r3,128(sp)
   12fc8:	dc401f17 	ldw	r17,124(sp)
   12fcc:	dd800404 	addi	r22,sp,16
   12fd0:	003e8f06 	br	12a10 <__alt_data_end+0xfc012a10>
   12fd4:	0027883a 	mov	r19,zero
   12fd8:	003f4a06 	br	12d04 <__alt_data_end+0xfc012d04>
   12fdc:	d9002d17 	ldw	r4,180(sp)
   12fe0:	d9801e04 	addi	r6,sp,120
   12fe4:	b80b883a 	mov	r5,r23
   12fe8:	0019be80 	call	19be8 <__sprint_r>
   12fec:	103b3f1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   12ff0:	d8c02017 	ldw	r3,128(sp)
   12ff4:	da000404 	addi	r8,sp,16
   12ff8:	003c7b06 	br	121e8 <__alt_data_end+0xfc0121e8>
   12ffc:	d9402a17 	ldw	r5,168(sp)
   13000:	04e7c83a 	sub	r19,zero,r19
   13004:	07000b44 	movi	fp,45
   13008:	9804c03a 	cmpne	r2,r19,zero
   1300c:	05adc83a 	sub	r22,zero,r22
   13010:	df002785 	stb	fp,158(sp)
   13014:	b0adc83a 	sub	r22,r22,r2
   13018:	28017b16 	blt	r5,zero,13608 <___vfprintf_internal_r+0x1d2c>
   1301c:	00bfdfc4 	movi	r2,-129
   13020:	90a4703a 	and	r18,r18,r2
   13024:	003b8906 	br	11e4c <__alt_data_end+0xfc011e4c>
   13028:	d9003617 	ldw	r4,216(sp)
   1302c:	d9403817 	ldw	r5,224(sp)
   13030:	da003d15 	stw	r8,244(sp)
   13034:	00183cc0 	call	183cc <__fpclassifyd>
   13038:	da003d17 	ldw	r8,244(sp)
   1303c:	1000f026 	beq	r2,zero,13400 <___vfprintf_internal_r+0x1b24>
   13040:	d9002a17 	ldw	r4,168(sp)
   13044:	05bff7c4 	movi	r22,-33
   13048:	00bfffc4 	movi	r2,-1
   1304c:	8dac703a 	and	r22,r17,r22
   13050:	20820026 	beq	r4,r2,13854 <___vfprintf_internal_r+0x1f78>
   13054:	008011c4 	movi	r2,71
   13058:	b081f726 	beq	r22,r2,13838 <___vfprintf_internal_r+0x1f5c>
   1305c:	d9003817 	ldw	r4,224(sp)
   13060:	90c04014 	ori	r3,r18,256
   13064:	d8c02c15 	stw	r3,176(sp)
   13068:	20021516 	blt	r4,zero,138c0 <___vfprintf_internal_r+0x1fe4>
   1306c:	dcc03817 	ldw	r19,224(sp)
   13070:	d8002905 	stb	zero,164(sp)
   13074:	00801984 	movi	r2,102
   13078:	8881f926 	beq	r17,r2,13860 <___vfprintf_internal_r+0x1f84>
   1307c:	00801184 	movi	r2,70
   13080:	88821c26 	beq	r17,r2,138f4 <___vfprintf_internal_r+0x2018>
   13084:	00801144 	movi	r2,69
   13088:	b081ef26 	beq	r22,r2,13848 <___vfprintf_internal_r+0x1f6c>
   1308c:	d8c02a17 	ldw	r3,168(sp)
   13090:	d8802104 	addi	r2,sp,132
   13094:	d8800315 	stw	r2,12(sp)
   13098:	d9403617 	ldw	r5,216(sp)
   1309c:	d8802504 	addi	r2,sp,148
   130a0:	d9002d17 	ldw	r4,180(sp)
   130a4:	d8800215 	stw	r2,8(sp)
   130a8:	d8802604 	addi	r2,sp,152
   130ac:	d8c00015 	stw	r3,0(sp)
   130b0:	d8800115 	stw	r2,4(sp)
   130b4:	01c00084 	movi	r7,2
   130b8:	980d883a 	mov	r6,r19
   130bc:	d8c03c15 	stw	r3,240(sp)
   130c0:	da003d15 	stw	r8,244(sp)
   130c4:	001400c0 	call	1400c <_dtoa_r>
   130c8:	1021883a 	mov	r16,r2
   130cc:	008019c4 	movi	r2,103
   130d0:	d8c03c17 	ldw	r3,240(sp)
   130d4:	da003d17 	ldw	r8,244(sp)
   130d8:	88817126 	beq	r17,r2,136a0 <___vfprintf_internal_r+0x1dc4>
   130dc:	008011c4 	movi	r2,71
   130e0:	88829126 	beq	r17,r2,13b28 <___vfprintf_internal_r+0x224c>
   130e4:	80f9883a 	add	fp,r16,r3
   130e8:	d9003617 	ldw	r4,216(sp)
   130ec:	000d883a 	mov	r6,zero
   130f0:	000f883a 	mov	r7,zero
   130f4:	980b883a 	mov	r5,r19
   130f8:	da003d15 	stw	r8,244(sp)
   130fc:	001d96c0 	call	1d96c <__eqdf2>
   13100:	da003d17 	ldw	r8,244(sp)
   13104:	10018d26 	beq	r2,zero,1373c <___vfprintf_internal_r+0x1e60>
   13108:	d8802117 	ldw	r2,132(sp)
   1310c:	1700062e 	bgeu	r2,fp,13128 <___vfprintf_internal_r+0x184c>
   13110:	01000c04 	movi	r4,48
   13114:	10c00044 	addi	r3,r2,1
   13118:	d8c02115 	stw	r3,132(sp)
   1311c:	11000005 	stb	r4,0(r2)
   13120:	d8802117 	ldw	r2,132(sp)
   13124:	173ffb36 	bltu	r2,fp,13114 <__alt_data_end+0xfc013114>
   13128:	1405c83a 	sub	r2,r2,r16
   1312c:	d8803315 	stw	r2,204(sp)
   13130:	008011c4 	movi	r2,71
   13134:	b0817626 	beq	r22,r2,13710 <___vfprintf_internal_r+0x1e34>
   13138:	00801944 	movi	r2,101
   1313c:	1442800e 	bge	r2,r17,13b40 <___vfprintf_internal_r+0x2264>
   13140:	d8c02617 	ldw	r3,152(sp)
   13144:	00801984 	movi	r2,102
   13148:	d8c03215 	stw	r3,200(sp)
   1314c:	8881fe26 	beq	r17,r2,13948 <___vfprintf_internal_r+0x206c>
   13150:	d8c03217 	ldw	r3,200(sp)
   13154:	d9003317 	ldw	r4,204(sp)
   13158:	1901dd16 	blt	r3,r4,138d0 <___vfprintf_internal_r+0x1ff4>
   1315c:	9480004c 	andi	r18,r18,1
   13160:	90022b1e 	bne	r18,zero,13a10 <___vfprintf_internal_r+0x2134>
   13164:	1805883a 	mov	r2,r3
   13168:	18028316 	blt	r3,zero,13b78 <___vfprintf_internal_r+0x229c>
   1316c:	d8c03217 	ldw	r3,200(sp)
   13170:	044019c4 	movi	r17,103
   13174:	d8c02b15 	stw	r3,172(sp)
   13178:	df002907 	ldb	fp,164(sp)
   1317c:	e001531e 	bne	fp,zero,136cc <___vfprintf_internal_r+0x1df0>
   13180:	df002783 	ldbu	fp,158(sp)
   13184:	d8802915 	stw	r2,164(sp)
   13188:	dc802c17 	ldw	r18,176(sp)
   1318c:	d8002a15 	stw	zero,168(sp)
   13190:	003baf06 	br	12050 <__alt_data_end+0xfc012050>
   13194:	d8c02e17 	ldw	r3,184(sp)
   13198:	d9002e17 	ldw	r4,184(sp)
   1319c:	d9402e17 	ldw	r5,184(sp)
   131a0:	18c00017 	ldw	r3,0(r3)
   131a4:	21000117 	ldw	r4,4(r4)
   131a8:	29400204 	addi	r5,r5,8
   131ac:	d8c03615 	stw	r3,216(sp)
   131b0:	d9003815 	stw	r4,224(sp)
   131b4:	d9402e15 	stw	r5,184(sp)
   131b8:	003b5006 	br	11efc <__alt_data_end+0xfc011efc>
   131bc:	ac400007 	ldb	r17,0(r21)
   131c0:	003a2806 	br	11a64 <__alt_data_end+0xfc011a64>
   131c4:	9080100c 	andi	r2,r18,64
   131c8:	1000a826 	beq	r2,zero,1346c <___vfprintf_internal_r+0x1b90>
   131cc:	d8c02e17 	ldw	r3,184(sp)
   131d0:	002d883a 	mov	r22,zero
   131d4:	1cc0000b 	ldhu	r19,0(r3)
   131d8:	18c00104 	addi	r3,r3,4
   131dc:	d8c02e15 	stw	r3,184(sp)
   131e0:	003caf06 	br	124a0 <__alt_data_end+0xfc0124a0>
   131e4:	d9002e17 	ldw	r4,184(sp)
   131e8:	d9402a17 	ldw	r5,168(sp)
   131ec:	002d883a 	mov	r22,zero
   131f0:	20800104 	addi	r2,r4,4
   131f4:	24c00017 	ldw	r19,0(r4)
   131f8:	283ebb0e 	bge	r5,zero,12ce8 <__alt_data_end+0xfc012ce8>
   131fc:	003ef106 	br	12dc4 <__alt_data_end+0xfc012dc4>
   13200:	9080040c 	andi	r2,r18,16
   13204:	1000921e 	bne	r2,zero,13450 <___vfprintf_internal_r+0x1b74>
   13208:	9480100c 	andi	r18,r18,64
   1320c:	90013926 	beq	r18,zero,136f4 <___vfprintf_internal_r+0x1e18>
   13210:	d9402e17 	ldw	r5,184(sp)
   13214:	d8c02f17 	ldw	r3,188(sp)
   13218:	28800017 	ldw	r2,0(r5)
   1321c:	29400104 	addi	r5,r5,4
   13220:	d9402e15 	stw	r5,184(sp)
   13224:	10c0000d 	sth	r3,0(r2)
   13228:	0039e406 	br	119bc <__alt_data_end+0xfc0119bc>
   1322c:	9080100c 	andi	r2,r18,64
   13230:	10008026 	beq	r2,zero,13434 <___vfprintf_internal_r+0x1b58>
   13234:	d8802e17 	ldw	r2,184(sp)
   13238:	14c0000f 	ldh	r19,0(r2)
   1323c:	10800104 	addi	r2,r2,4
   13240:	d8802e15 	stw	r2,184(sp)
   13244:	982dd7fa 	srai	r22,r19,31
   13248:	b005883a 	mov	r2,r22
   1324c:	003af706 	br	11e2c <__alt_data_end+0xfc011e2c>
   13250:	9080100c 	andi	r2,r18,64
   13254:	d8002785 	stb	zero,158(sp)
   13258:	10008a1e 	bne	r2,zero,13484 <___vfprintf_internal_r+0x1ba8>
   1325c:	d9002e17 	ldw	r4,184(sp)
   13260:	d9402a17 	ldw	r5,168(sp)
   13264:	002d883a 	mov	r22,zero
   13268:	20800104 	addi	r2,r4,4
   1326c:	24c00017 	ldw	r19,0(r4)
   13270:	283e4b0e 	bge	r5,zero,12ba0 <__alt_data_end+0xfc012ba0>
   13274:	9d86b03a 	or	r3,r19,r22
   13278:	d8802e15 	stw	r2,184(sp)
   1327c:	183e4c1e 	bne	r3,zero,12bb0 <__alt_data_end+0xfc012bb0>
   13280:	0039883a 	mov	fp,zero
   13284:	0005883a 	mov	r2,zero
   13288:	003d4006 	br	1278c <__alt_data_end+0xfc01278c>
   1328c:	014000f4 	movhi	r5,3
   13290:	296a9284 	addi	r5,r5,-21942
   13294:	d9402c15 	stw	r5,176(sp)
   13298:	d9402c17 	ldw	r5,176(sp)
   1329c:	1c47883a 	add	r3,r3,r17
   132a0:	10800044 	addi	r2,r2,1
   132a4:	41400015 	stw	r5,0(r8)
   132a8:	44400115 	stw	r17,4(r8)
   132ac:	d8c02015 	stw	r3,128(sp)
   132b0:	d8801f15 	stw	r2,124(sp)
   132b4:	010001c4 	movi	r4,7
   132b8:	20bec816 	blt	r4,r2,12ddc <__alt_data_end+0xfc012ddc>
   132bc:	42000204 	addi	r8,r8,8
   132c0:	003ecd06 	br	12df8 <__alt_data_end+0xfc012df8>
   132c4:	d9002a17 	ldw	r4,168(sp)
   132c8:	d8002785 	stb	zero,158(sp)
   132cc:	203d2d16 	blt	r4,zero,12784 <__alt_data_end+0xfc012784>
   132d0:	00bfdfc4 	movi	r2,-129
   132d4:	90a4703a 	and	r18,r18,r2
   132d8:	003a6106 	br	11c60 <__alt_data_end+0xfc011c60>
   132dc:	010000f4 	movhi	r4,3
   132e0:	212a9284 	addi	r4,r4,-21942
   132e4:	d9002c15 	stw	r4,176(sp)
   132e8:	003bea06 	br	12294 <__alt_data_end+0xfc012294>
   132ec:	d9002d17 	ldw	r4,180(sp)
   132f0:	d9801e04 	addi	r6,sp,120
   132f4:	b80b883a 	mov	r5,r23
   132f8:	0019be80 	call	19be8 <__sprint_r>
   132fc:	103a7b1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   13300:	d8c02017 	ldw	r3,128(sp)
   13304:	da000404 	addi	r8,sp,16
   13308:	003d4106 	br	12810 <__alt_data_end+0xfc012810>
   1330c:	d8801f17 	ldw	r2,124(sp)
   13310:	014000f4 	movhi	r5,3
   13314:	01000044 	movi	r4,1
   13318:	18c00044 	addi	r3,r3,1
   1331c:	10800044 	addi	r2,r2,1
   13320:	296a8a04 	addi	r5,r5,-21976
   13324:	41000115 	stw	r4,4(r8)
   13328:	41400015 	stw	r5,0(r8)
   1332c:	d8c02015 	stw	r3,128(sp)
   13330:	d8801f15 	stw	r2,124(sp)
   13334:	010001c4 	movi	r4,7
   13338:	20805c16 	blt	r4,r2,134ac <___vfprintf_internal_r+0x1bd0>
   1333c:	42000204 	addi	r8,r8,8
   13340:	8800041e 	bne	r17,zero,13354 <___vfprintf_internal_r+0x1a78>
   13344:	d8803317 	ldw	r2,204(sp)
   13348:	1000021e 	bne	r2,zero,13354 <___vfprintf_internal_r+0x1a78>
   1334c:	9080004c 	andi	r2,r18,1
   13350:	103be726 	beq	r2,zero,122f0 <__alt_data_end+0xfc0122f0>
   13354:	d9003717 	ldw	r4,220(sp)
   13358:	d8801f17 	ldw	r2,124(sp)
   1335c:	d9403417 	ldw	r5,208(sp)
   13360:	20c7883a 	add	r3,r4,r3
   13364:	10800044 	addi	r2,r2,1
   13368:	41000115 	stw	r4,4(r8)
   1336c:	41400015 	stw	r5,0(r8)
   13370:	d8c02015 	stw	r3,128(sp)
   13374:	d8801f15 	stw	r2,124(sp)
   13378:	010001c4 	movi	r4,7
   1337c:	20812116 	blt	r4,r2,13804 <___vfprintf_internal_r+0x1f28>
   13380:	42000204 	addi	r8,r8,8
   13384:	0463c83a 	sub	r17,zero,r17
   13388:	0440730e 	bge	zero,r17,13558 <___vfprintf_internal_r+0x1c7c>
   1338c:	05800404 	movi	r22,16
   13390:	b440860e 	bge	r22,r17,135ac <___vfprintf_internal_r+0x1cd0>
   13394:	014000f4 	movhi	r5,3
   13398:	296a9284 	addi	r5,r5,-21942
   1339c:	d9402c15 	stw	r5,176(sp)
   133a0:	070001c4 	movi	fp,7
   133a4:	dcc02d17 	ldw	r19,180(sp)
   133a8:	00000306 	br	133b8 <___vfprintf_internal_r+0x1adc>
   133ac:	42000204 	addi	r8,r8,8
   133b0:	8c7ffc04 	addi	r17,r17,-16
   133b4:	b440800e 	bge	r22,r17,135b8 <___vfprintf_internal_r+0x1cdc>
   133b8:	18c00404 	addi	r3,r3,16
   133bc:	10800044 	addi	r2,r2,1
   133c0:	45000015 	stw	r20,0(r8)
   133c4:	45800115 	stw	r22,4(r8)
   133c8:	d8c02015 	stw	r3,128(sp)
   133cc:	d8801f15 	stw	r2,124(sp)
   133d0:	e0bff60e 	bge	fp,r2,133ac <__alt_data_end+0xfc0133ac>
   133d4:	d9801e04 	addi	r6,sp,120
   133d8:	b80b883a 	mov	r5,r23
   133dc:	9809883a 	mov	r4,r19
   133e0:	0019be80 	call	19be8 <__sprint_r>
   133e4:	103a411e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   133e8:	d8c02017 	ldw	r3,128(sp)
   133ec:	d8801f17 	ldw	r2,124(sp)
   133f0:	da000404 	addi	r8,sp,16
   133f4:	003fee06 	br	133b0 <__alt_data_end+0xfc0133b0>
   133f8:	00bfffc4 	movi	r2,-1
   133fc:	003a3f06 	br	11cfc <__alt_data_end+0xfc011cfc>
   13400:	008011c4 	movi	r2,71
   13404:	1440b816 	blt	r2,r17,136e8 <___vfprintf_internal_r+0x1e0c>
   13408:	040000f4 	movhi	r16,3
   1340c:	842a7c04 	addi	r16,r16,-22032
   13410:	00c000c4 	movi	r3,3
   13414:	00bfdfc4 	movi	r2,-129
   13418:	d8c02915 	stw	r3,164(sp)
   1341c:	90a4703a 	and	r18,r18,r2
   13420:	df002783 	ldbu	fp,158(sp)
   13424:	d8c02b15 	stw	r3,172(sp)
   13428:	d8002a15 	stw	zero,168(sp)
   1342c:	d8003215 	stw	zero,200(sp)
   13430:	003b0706 	br	12050 <__alt_data_end+0xfc012050>
   13434:	d8c02e17 	ldw	r3,184(sp)
   13438:	1cc00017 	ldw	r19,0(r3)
   1343c:	18c00104 	addi	r3,r3,4
   13440:	d8c02e15 	stw	r3,184(sp)
   13444:	982dd7fa 	srai	r22,r19,31
   13448:	b005883a 	mov	r2,r22
   1344c:	003a7706 	br	11e2c <__alt_data_end+0xfc011e2c>
   13450:	d8c02e17 	ldw	r3,184(sp)
   13454:	d9002f17 	ldw	r4,188(sp)
   13458:	18800017 	ldw	r2,0(r3)
   1345c:	18c00104 	addi	r3,r3,4
   13460:	d8c02e15 	stw	r3,184(sp)
   13464:	11000015 	stw	r4,0(r2)
   13468:	00395406 	br	119bc <__alt_data_end+0xfc0119bc>
   1346c:	d9002e17 	ldw	r4,184(sp)
   13470:	002d883a 	mov	r22,zero
   13474:	24c00017 	ldw	r19,0(r4)
   13478:	21000104 	addi	r4,r4,4
   1347c:	d9002e15 	stw	r4,184(sp)
   13480:	003c0706 	br	124a0 <__alt_data_end+0xfc0124a0>
   13484:	d9402e17 	ldw	r5,184(sp)
   13488:	d8c02a17 	ldw	r3,168(sp)
   1348c:	002d883a 	mov	r22,zero
   13490:	28800104 	addi	r2,r5,4
   13494:	2cc0000b 	ldhu	r19,0(r5)
   13498:	183dc10e 	bge	r3,zero,12ba0 <__alt_data_end+0xfc012ba0>
   1349c:	003f7506 	br	13274 <__alt_data_end+0xfc013274>
   134a0:	040000f4 	movhi	r16,3
   134a4:	842a7a04 	addi	r16,r16,-22040
   134a8:	003aa706 	br	11f48 <__alt_data_end+0xfc011f48>
   134ac:	d9002d17 	ldw	r4,180(sp)
   134b0:	d9801e04 	addi	r6,sp,120
   134b4:	b80b883a 	mov	r5,r23
   134b8:	0019be80 	call	19be8 <__sprint_r>
   134bc:	103a0b1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   134c0:	dc402617 	ldw	r17,152(sp)
   134c4:	d8c02017 	ldw	r3,128(sp)
   134c8:	da000404 	addi	r8,sp,16
   134cc:	003f9c06 	br	13340 <__alt_data_end+0xfc013340>
   134d0:	ac400043 	ldbu	r17,1(r21)
   134d4:	84000814 	ori	r16,r16,32
   134d8:	ad400044 	addi	r21,r21,1
   134dc:	8c403fcc 	andi	r17,r17,255
   134e0:	8c40201c 	xori	r17,r17,128
   134e4:	8c7fe004 	addi	r17,r17,-128
   134e8:	00395e06 	br	11a64 <__alt_data_end+0xfc011a64>
   134ec:	d8c02e15 	stw	r3,184(sp)
   134f0:	0039883a 	mov	fp,zero
   134f4:	003e3506 	br	12dcc <__alt_data_end+0xfc012dcc>
   134f8:	d9002d17 	ldw	r4,180(sp)
   134fc:	d9801e04 	addi	r6,sp,120
   13500:	b80b883a 	mov	r5,r23
   13504:	0019be80 	call	19be8 <__sprint_r>
   13508:	1039f81e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   1350c:	d8c02017 	ldw	r3,128(sp)
   13510:	da000404 	addi	r8,sp,16
   13514:	003cd006 	br	12858 <__alt_data_end+0xfc012858>
   13518:	8009883a 	mov	r4,r16
   1351c:	df003d15 	stw	fp,244(sp)
   13520:	000f5800 	call	f580 <strlen>
   13524:	d8802b15 	stw	r2,172(sp)
   13528:	da003d17 	ldw	r8,244(sp)
   1352c:	103c200e 	bge	r2,zero,125b0 <__alt_data_end+0xfc0125b0>
   13530:	0005883a 	mov	r2,zero
   13534:	003c1e06 	br	125b0 <__alt_data_end+0xfc0125b0>
   13538:	d9002d17 	ldw	r4,180(sp)
   1353c:	d9801e04 	addi	r6,sp,120
   13540:	b80b883a 	mov	r5,r23
   13544:	0019be80 	call	19be8 <__sprint_r>
   13548:	1039e81e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   1354c:	d8c02017 	ldw	r3,128(sp)
   13550:	d8801f17 	ldw	r2,124(sp)
   13554:	da000404 	addi	r8,sp,16
   13558:	d9403317 	ldw	r5,204(sp)
   1355c:	10800044 	addi	r2,r2,1
   13560:	44000015 	stw	r16,0(r8)
   13564:	28c7883a 	add	r3,r5,r3
   13568:	003b5b06 	br	122d8 <__alt_data_end+0xfc0122d8>
   1356c:	010000f4 	movhi	r4,3
   13570:	212a9684 	addi	r4,r4,-21926
   13574:	d9003515 	stw	r4,212(sp)
   13578:	003af206 	br	12144 <__alt_data_end+0xfc012144>
   1357c:	013fffc4 	movi	r4,-1
   13580:	003a0806 	br	11da4 <__alt_data_end+0xfc011da4>
   13584:	0023883a 	mov	r17,zero
   13588:	003d9d06 	br	12c00 <__alt_data_end+0xfc012c00>
   1358c:	d9002d17 	ldw	r4,180(sp)
   13590:	d9801e04 	addi	r6,sp,120
   13594:	b80b883a 	mov	r5,r23
   13598:	0019be80 	call	19be8 <__sprint_r>
   1359c:	1039d31e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   135a0:	d8c02017 	ldw	r3,128(sp)
   135a4:	da000404 	addi	r8,sp,16
   135a8:	003d9406 	br	12bfc <__alt_data_end+0xfc012bfc>
   135ac:	010000f4 	movhi	r4,3
   135b0:	212a9284 	addi	r4,r4,-21942
   135b4:	d9002c15 	stw	r4,176(sp)
   135b8:	d9002c17 	ldw	r4,176(sp)
   135bc:	1c47883a 	add	r3,r3,r17
   135c0:	10800044 	addi	r2,r2,1
   135c4:	41000015 	stw	r4,0(r8)
   135c8:	44400115 	stw	r17,4(r8)
   135cc:	d8c02015 	stw	r3,128(sp)
   135d0:	d8801f15 	stw	r2,124(sp)
   135d4:	010001c4 	movi	r4,7
   135d8:	20bfd716 	blt	r4,r2,13538 <__alt_data_end+0xfc013538>
   135dc:	42000204 	addi	r8,r8,8
   135e0:	003fdd06 	br	13558 <__alt_data_end+0xfc013558>
   135e4:	d9002d17 	ldw	r4,180(sp)
   135e8:	d9801e04 	addi	r6,sp,120
   135ec:	b80b883a 	mov	r5,r23
   135f0:	0019be80 	call	19be8 <__sprint_r>
   135f4:	1039bd1e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   135f8:	d8802617 	ldw	r2,152(sp)
   135fc:	d8c02017 	ldw	r3,128(sp)
   13600:	da000404 	addi	r8,sp,16
   13604:	003e1006 	br	12e48 <__alt_data_end+0xfc012e48>
   13608:	00800044 	movi	r2,1
   1360c:	10803fcc 	andi	r2,r2,255
   13610:	00c00044 	movi	r3,1
   13614:	10fa0d26 	beq	r2,r3,11e4c <__alt_data_end+0xfc011e4c>
   13618:	00c00084 	movi	r3,2
   1361c:	10fbaf26 	beq	r2,r3,124dc <__alt_data_end+0xfc0124dc>
   13620:	003a6d06 	br	11fd8 <__alt_data_end+0xfc011fd8>
   13624:	010000f4 	movhi	r4,3
   13628:	212a9684 	addi	r4,r4,-21926
   1362c:	d9003515 	stw	r4,212(sp)
   13630:	003b5406 	br	12384 <__alt_data_end+0xfc012384>
   13634:	d8802a17 	ldw	r2,168(sp)
   13638:	00c00184 	movi	r3,6
   1363c:	1880012e 	bgeu	r3,r2,13644 <___vfprintf_internal_r+0x1d68>
   13640:	1805883a 	mov	r2,r3
   13644:	d8802b15 	stw	r2,172(sp)
   13648:	1000ef16 	blt	r2,zero,13a08 <___vfprintf_internal_r+0x212c>
   1364c:	040000f4 	movhi	r16,3
   13650:	d8802915 	stw	r2,164(sp)
   13654:	dcc02e15 	stw	r19,184(sp)
   13658:	d8002a15 	stw	zero,168(sp)
   1365c:	d8003215 	stw	zero,200(sp)
   13660:	842a8804 	addi	r16,r16,-21984
   13664:	0039883a 	mov	fp,zero
   13668:	003a8006 	br	1206c <__alt_data_end+0xfc01206c>
   1366c:	0021883a 	mov	r16,zero
   13670:	003e0706 	br	12e90 <__alt_data_end+0xfc012e90>
   13674:	d9002d17 	ldw	r4,180(sp)
   13678:	d9801e04 	addi	r6,sp,120
   1367c:	b80b883a 	mov	r5,r23
   13680:	0019be80 	call	19be8 <__sprint_r>
   13684:	1039991e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   13688:	d8802617 	ldw	r2,152(sp)
   1368c:	d9403317 	ldw	r5,204(sp)
   13690:	d8c02017 	ldw	r3,128(sp)
   13694:	da000404 	addi	r8,sp,16
   13698:	2885c83a 	sub	r2,r5,r2
   1369c:	003dfb06 	br	12e8c <__alt_data_end+0xfc012e8c>
   136a0:	9080004c 	andi	r2,r18,1
   136a4:	103e8f1e 	bne	r2,zero,130e4 <__alt_data_end+0xfc0130e4>
   136a8:	d8802117 	ldw	r2,132(sp)
   136ac:	003e9e06 	br	13128 <__alt_data_end+0xfc013128>
   136b0:	1025883a 	mov	r18,r2
   136b4:	0039883a 	mov	fp,zero
   136b8:	00800084 	movi	r2,2
   136bc:	003fd306 	br	1360c <__alt_data_end+0xfc01360c>
   136c0:	07000b44 	movi	fp,45
   136c4:	df002785 	stb	fp,158(sp)
   136c8:	003a1b06 	br	11f38 <__alt_data_end+0xfc011f38>
   136cc:	00c00b44 	movi	r3,45
   136d0:	d8c02785 	stb	r3,158(sp)
   136d4:	d8802915 	stw	r2,164(sp)
   136d8:	dc802c17 	ldw	r18,176(sp)
   136dc:	d8002a15 	stw	zero,168(sp)
   136e0:	07000b44 	movi	fp,45
   136e4:	003a5e06 	br	12060 <__alt_data_end+0xfc012060>
   136e8:	040000f4 	movhi	r16,3
   136ec:	842a7d04 	addi	r16,r16,-22028
   136f0:	003f4706 	br	13410 <__alt_data_end+0xfc013410>
   136f4:	d9002e17 	ldw	r4,184(sp)
   136f8:	d9402f17 	ldw	r5,188(sp)
   136fc:	20800017 	ldw	r2,0(r4)
   13700:	21000104 	addi	r4,r4,4
   13704:	d9002e15 	stw	r4,184(sp)
   13708:	11400015 	stw	r5,0(r2)
   1370c:	0038ab06 	br	119bc <__alt_data_end+0xfc0119bc>
   13710:	dd802617 	ldw	r22,152(sp)
   13714:	00bfff44 	movi	r2,-3
   13718:	b0801c16 	blt	r22,r2,1378c <___vfprintf_internal_r+0x1eb0>
   1371c:	d9402a17 	ldw	r5,168(sp)
   13720:	2d801a16 	blt	r5,r22,1378c <___vfprintf_internal_r+0x1eb0>
   13724:	dd803215 	stw	r22,200(sp)
   13728:	003e8906 	br	13150 <__alt_data_end+0xfc013150>
   1372c:	010000f4 	movhi	r4,3
   13730:	212a9284 	addi	r4,r4,-21942
   13734:	d9002c15 	stw	r4,176(sp)
   13738:	003c9106 	br	12980 <__alt_data_end+0xfc012980>
   1373c:	e005883a 	mov	r2,fp
   13740:	003e7906 	br	13128 <__alt_data_end+0xfc013128>
   13744:	d9002a17 	ldw	r4,168(sp)
   13748:	df002783 	ldbu	fp,158(sp)
   1374c:	dcc02e15 	stw	r19,184(sp)
   13750:	d9002915 	stw	r4,164(sp)
   13754:	d9002b15 	stw	r4,172(sp)
   13758:	d8002a15 	stw	zero,168(sp)
   1375c:	d8003215 	stw	zero,200(sp)
   13760:	003a3b06 	br	12050 <__alt_data_end+0xfc012050>
   13764:	9080004c 	andi	r2,r18,1
   13768:	0039883a 	mov	fp,zero
   1376c:	10000426 	beq	r2,zero,13780 <___vfprintf_internal_r+0x1ea4>
   13770:	00800c04 	movi	r2,48
   13774:	dc001dc4 	addi	r16,sp,119
   13778:	d8801dc5 	stb	r2,119(sp)
   1377c:	003b6406 	br	12510 <__alt_data_end+0xfc012510>
   13780:	d8002b15 	stw	zero,172(sp)
   13784:	dc001e04 	addi	r16,sp,120
   13788:	003a2b06 	br	12038 <__alt_data_end+0xfc012038>
   1378c:	8c7fff84 	addi	r17,r17,-2
   13790:	b5bfffc4 	addi	r22,r22,-1
   13794:	dd802615 	stw	r22,152(sp)
   13798:	dc4022c5 	stb	r17,139(sp)
   1379c:	b000bf16 	blt	r22,zero,13a9c <___vfprintf_internal_r+0x21c0>
   137a0:	00800ac4 	movi	r2,43
   137a4:	d8802305 	stb	r2,140(sp)
   137a8:	00800244 	movi	r2,9
   137ac:	15807016 	blt	r2,r22,13970 <___vfprintf_internal_r+0x2094>
   137b0:	00800c04 	movi	r2,48
   137b4:	b5800c04 	addi	r22,r22,48
   137b8:	d8802345 	stb	r2,141(sp)
   137bc:	dd802385 	stb	r22,142(sp)
   137c0:	d88023c4 	addi	r2,sp,143
   137c4:	df0022c4 	addi	fp,sp,139
   137c8:	d8c03317 	ldw	r3,204(sp)
   137cc:	1739c83a 	sub	fp,r2,fp
   137d0:	d9003317 	ldw	r4,204(sp)
   137d4:	e0c7883a 	add	r3,fp,r3
   137d8:	df003a15 	stw	fp,232(sp)
   137dc:	d8c02b15 	stw	r3,172(sp)
   137e0:	00800044 	movi	r2,1
   137e4:	1100b30e 	bge	r2,r4,13ab4 <___vfprintf_internal_r+0x21d8>
   137e8:	d8c02b17 	ldw	r3,172(sp)
   137ec:	18c00044 	addi	r3,r3,1
   137f0:	d8c02b15 	stw	r3,172(sp)
   137f4:	1805883a 	mov	r2,r3
   137f8:	1800ac16 	blt	r3,zero,13aac <___vfprintf_internal_r+0x21d0>
   137fc:	d8003215 	stw	zero,200(sp)
   13800:	003e5d06 	br	13178 <__alt_data_end+0xfc013178>
   13804:	d9002d17 	ldw	r4,180(sp)
   13808:	d9801e04 	addi	r6,sp,120
   1380c:	b80b883a 	mov	r5,r23
   13810:	0019be80 	call	19be8 <__sprint_r>
   13814:	1039351e 	bne	r2,zero,11cec <__alt_data_end+0xfc011cec>
   13818:	dc402617 	ldw	r17,152(sp)
   1381c:	d8c02017 	ldw	r3,128(sp)
   13820:	d8801f17 	ldw	r2,124(sp)
   13824:	da000404 	addi	r8,sp,16
   13828:	003ed606 	br	13384 <__alt_data_end+0xfc013384>
   1382c:	182b883a 	mov	r21,r3
   13830:	d8002a15 	stw	zero,168(sp)
   13834:	00388c06 	br	11a68 <__alt_data_end+0xfc011a68>
   13838:	d8802a17 	ldw	r2,168(sp)
   1383c:	103e071e 	bne	r2,zero,1305c <__alt_data_end+0xfc01305c>
   13840:	dc002a15 	stw	r16,168(sp)
   13844:	003e0506 	br	1305c <__alt_data_end+0xfc01305c>
   13848:	d9002a17 	ldw	r4,168(sp)
   1384c:	20c00044 	addi	r3,r4,1
   13850:	003e0f06 	br	13090 <__alt_data_end+0xfc013090>
   13854:	01400184 	movi	r5,6
   13858:	d9402a15 	stw	r5,168(sp)
   1385c:	003dff06 	br	1305c <__alt_data_end+0xfc01305c>
   13860:	d8802104 	addi	r2,sp,132
   13864:	d8800315 	stw	r2,12(sp)
   13868:	d8802504 	addi	r2,sp,148
   1386c:	d8800215 	stw	r2,8(sp)
   13870:	d8802604 	addi	r2,sp,152
   13874:	d8800115 	stw	r2,4(sp)
   13878:	d8802a17 	ldw	r2,168(sp)
   1387c:	d9403617 	ldw	r5,216(sp)
   13880:	d9002d17 	ldw	r4,180(sp)
   13884:	d8800015 	stw	r2,0(sp)
   13888:	01c000c4 	movi	r7,3
   1388c:	980d883a 	mov	r6,r19
   13890:	da003d15 	stw	r8,244(sp)
   13894:	001400c0 	call	1400c <_dtoa_r>
   13898:	d8c02a17 	ldw	r3,168(sp)
   1389c:	da003d17 	ldw	r8,244(sp)
   138a0:	1021883a 	mov	r16,r2
   138a4:	10f9883a 	add	fp,r2,r3
   138a8:	81000007 	ldb	r4,0(r16)
   138ac:	00800c04 	movi	r2,48
   138b0:	20805e26 	beq	r4,r2,13a2c <___vfprintf_internal_r+0x2150>
   138b4:	d8c02617 	ldw	r3,152(sp)
   138b8:	e0f9883a 	add	fp,fp,r3
   138bc:	003e0a06 	br	130e8 <__alt_data_end+0xfc0130e8>
   138c0:	00c00b44 	movi	r3,45
   138c4:	24e0003c 	xorhi	r19,r4,32768
   138c8:	d8c02905 	stb	r3,164(sp)
   138cc:	003de906 	br	13074 <__alt_data_end+0xfc013074>
   138d0:	d8c03217 	ldw	r3,200(sp)
   138d4:	00c07a0e 	bge	zero,r3,13ac0 <___vfprintf_internal_r+0x21e4>
   138d8:	00800044 	movi	r2,1
   138dc:	d9003317 	ldw	r4,204(sp)
   138e0:	1105883a 	add	r2,r2,r4
   138e4:	d8802b15 	stw	r2,172(sp)
   138e8:	10004e16 	blt	r2,zero,13a24 <___vfprintf_internal_r+0x2148>
   138ec:	044019c4 	movi	r17,103
   138f0:	003e2106 	br	13178 <__alt_data_end+0xfc013178>
   138f4:	d9002a17 	ldw	r4,168(sp)
   138f8:	d8802104 	addi	r2,sp,132
   138fc:	d8800315 	stw	r2,12(sp)
   13900:	d9000015 	stw	r4,0(sp)
   13904:	d8802504 	addi	r2,sp,148
   13908:	d9403617 	ldw	r5,216(sp)
   1390c:	d9002d17 	ldw	r4,180(sp)
   13910:	d8800215 	stw	r2,8(sp)
   13914:	d8802604 	addi	r2,sp,152
   13918:	d8800115 	stw	r2,4(sp)
   1391c:	01c000c4 	movi	r7,3
   13920:	980d883a 	mov	r6,r19
   13924:	da003d15 	stw	r8,244(sp)
   13928:	001400c0 	call	1400c <_dtoa_r>
   1392c:	d8c02a17 	ldw	r3,168(sp)
   13930:	da003d17 	ldw	r8,244(sp)
   13934:	1021883a 	mov	r16,r2
   13938:	00801184 	movi	r2,70
   1393c:	80f9883a 	add	fp,r16,r3
   13940:	88bfd926 	beq	r17,r2,138a8 <__alt_data_end+0xfc0138a8>
   13944:	003de806 	br	130e8 <__alt_data_end+0xfc0130e8>
   13948:	d9002a17 	ldw	r4,168(sp)
   1394c:	00c04d0e 	bge	zero,r3,13a84 <___vfprintf_internal_r+0x21a8>
   13950:	2000441e 	bne	r4,zero,13a64 <___vfprintf_internal_r+0x2188>
   13954:	9480004c 	andi	r18,r18,1
   13958:	9000421e 	bne	r18,zero,13a64 <___vfprintf_internal_r+0x2188>
   1395c:	1805883a 	mov	r2,r3
   13960:	18006f16 	blt	r3,zero,13b20 <___vfprintf_internal_r+0x2244>
   13964:	d8c03217 	ldw	r3,200(sp)
   13968:	d8c02b15 	stw	r3,172(sp)
   1396c:	003e0206 	br	13178 <__alt_data_end+0xfc013178>
   13970:	df0022c4 	addi	fp,sp,139
   13974:	dc002a15 	stw	r16,168(sp)
   13978:	4027883a 	mov	r19,r8
   1397c:	e021883a 	mov	r16,fp
   13980:	b009883a 	mov	r4,r22
   13984:	01400284 	movi	r5,10
   13988:	000cdd40 	call	cdd4 <__modsi3>
   1398c:	10800c04 	addi	r2,r2,48
   13990:	843fffc4 	addi	r16,r16,-1
   13994:	b009883a 	mov	r4,r22
   13998:	01400284 	movi	r5,10
   1399c:	80800005 	stb	r2,0(r16)
   139a0:	000cd500 	call	cd50 <__divsi3>
   139a4:	102d883a 	mov	r22,r2
   139a8:	00800244 	movi	r2,9
   139ac:	15bff416 	blt	r2,r22,13980 <__alt_data_end+0xfc013980>
   139b0:	9811883a 	mov	r8,r19
   139b4:	b0800c04 	addi	r2,r22,48
   139b8:	8027883a 	mov	r19,r16
   139bc:	997fffc4 	addi	r5,r19,-1
   139c0:	98bfffc5 	stb	r2,-1(r19)
   139c4:	dc002a17 	ldw	r16,168(sp)
   139c8:	2f006d2e 	bgeu	r5,fp,13b80 <___vfprintf_internal_r+0x22a4>
   139cc:	d9c02384 	addi	r7,sp,142
   139d0:	3ccfc83a 	sub	r7,r7,r19
   139d4:	d9002344 	addi	r4,sp,141
   139d8:	e1cf883a 	add	r7,fp,r7
   139dc:	00000106 	br	139e4 <___vfprintf_internal_r+0x2108>
   139e0:	28800003 	ldbu	r2,0(r5)
   139e4:	20800005 	stb	r2,0(r4)
   139e8:	21000044 	addi	r4,r4,1
   139ec:	29400044 	addi	r5,r5,1
   139f0:	393ffb1e 	bne	r7,r4,139e0 <__alt_data_end+0xfc0139e0>
   139f4:	d8802304 	addi	r2,sp,140
   139f8:	14c5c83a 	sub	r2,r2,r19
   139fc:	d8c02344 	addi	r3,sp,141
   13a00:	1885883a 	add	r2,r3,r2
   13a04:	003f7006 	br	137c8 <__alt_data_end+0xfc0137c8>
   13a08:	0005883a 	mov	r2,zero
   13a0c:	003f0f06 	br	1364c <__alt_data_end+0xfc01364c>
   13a10:	d8c03217 	ldw	r3,200(sp)
   13a14:	18c00044 	addi	r3,r3,1
   13a18:	d8c02b15 	stw	r3,172(sp)
   13a1c:	1805883a 	mov	r2,r3
   13a20:	183fb20e 	bge	r3,zero,138ec <__alt_data_end+0xfc0138ec>
   13a24:	0005883a 	mov	r2,zero
   13a28:	003fb006 	br	138ec <__alt_data_end+0xfc0138ec>
   13a2c:	d9003617 	ldw	r4,216(sp)
   13a30:	000d883a 	mov	r6,zero
   13a34:	000f883a 	mov	r7,zero
   13a38:	980b883a 	mov	r5,r19
   13a3c:	d8c03c15 	stw	r3,240(sp)
   13a40:	da003d15 	stw	r8,244(sp)
   13a44:	001d96c0 	call	1d96c <__eqdf2>
   13a48:	d8c03c17 	ldw	r3,240(sp)
   13a4c:	da003d17 	ldw	r8,244(sp)
   13a50:	103f9826 	beq	r2,zero,138b4 <__alt_data_end+0xfc0138b4>
   13a54:	00800044 	movi	r2,1
   13a58:	10c7c83a 	sub	r3,r2,r3
   13a5c:	d8c02615 	stw	r3,152(sp)
   13a60:	003f9506 	br	138b8 <__alt_data_end+0xfc0138b8>
   13a64:	d9002a17 	ldw	r4,168(sp)
   13a68:	d8c03217 	ldw	r3,200(sp)
   13a6c:	20800044 	addi	r2,r4,1
   13a70:	1885883a 	add	r2,r3,r2
   13a74:	d8802b15 	stw	r2,172(sp)
   13a78:	103dbf0e 	bge	r2,zero,13178 <__alt_data_end+0xfc013178>
   13a7c:	0005883a 	mov	r2,zero
   13a80:	003dbd06 	br	13178 <__alt_data_end+0xfc013178>
   13a84:	2000201e 	bne	r4,zero,13b08 <___vfprintf_internal_r+0x222c>
   13a88:	9480004c 	andi	r18,r18,1
   13a8c:	90001e1e 	bne	r18,zero,13b08 <___vfprintf_internal_r+0x222c>
   13a90:	00800044 	movi	r2,1
   13a94:	d8802b15 	stw	r2,172(sp)
   13a98:	003db706 	br	13178 <__alt_data_end+0xfc013178>
   13a9c:	00800b44 	movi	r2,45
   13aa0:	05adc83a 	sub	r22,zero,r22
   13aa4:	d8802305 	stb	r2,140(sp)
   13aa8:	003f3f06 	br	137a8 <__alt_data_end+0xfc0137a8>
   13aac:	0005883a 	mov	r2,zero
   13ab0:	003f5206 	br	137fc <__alt_data_end+0xfc0137fc>
   13ab4:	90a4703a 	and	r18,r18,r2
   13ab8:	903f4e26 	beq	r18,zero,137f4 <__alt_data_end+0xfc0137f4>
   13abc:	003f4a06 	br	137e8 <__alt_data_end+0xfc0137e8>
   13ac0:	00800084 	movi	r2,2
   13ac4:	10c5c83a 	sub	r2,r2,r3
   13ac8:	003f8406 	br	138dc <__alt_data_end+0xfc0138dc>
   13acc:	d9402e17 	ldw	r5,184(sp)
   13ad0:	d9002e17 	ldw	r4,184(sp)
   13ad4:	ac400043 	ldbu	r17,1(r21)
   13ad8:	29400017 	ldw	r5,0(r5)
   13adc:	20800104 	addi	r2,r4,4
   13ae0:	d8802e15 	stw	r2,184(sp)
   13ae4:	d9402a15 	stw	r5,168(sp)
   13ae8:	182b883a 	mov	r21,r3
   13aec:	283e7b0e 	bge	r5,zero,134dc <__alt_data_end+0xfc0134dc>
   13af0:	8c403fcc 	andi	r17,r17,255
   13af4:	017fffc4 	movi	r5,-1
   13af8:	8c40201c 	xori	r17,r17,128
   13afc:	d9402a15 	stw	r5,168(sp)
   13b00:	8c7fe004 	addi	r17,r17,-128
   13b04:	0037d706 	br	11a64 <__alt_data_end+0xfc011a64>
   13b08:	d8c02a17 	ldw	r3,168(sp)
   13b0c:	18c00084 	addi	r3,r3,2
   13b10:	d8c02b15 	stw	r3,172(sp)
   13b14:	1805883a 	mov	r2,r3
   13b18:	183d970e 	bge	r3,zero,13178 <__alt_data_end+0xfc013178>
   13b1c:	003fd706 	br	13a7c <__alt_data_end+0xfc013a7c>
   13b20:	0005883a 	mov	r2,zero
   13b24:	003f8f06 	br	13964 <__alt_data_end+0xfc013964>
   13b28:	9080004c 	andi	r2,r18,1
   13b2c:	103f821e 	bne	r2,zero,13938 <__alt_data_end+0xfc013938>
   13b30:	d8802117 	ldw	r2,132(sp)
   13b34:	1405c83a 	sub	r2,r2,r16
   13b38:	d8803315 	stw	r2,204(sp)
   13b3c:	b47ef426 	beq	r22,r17,13710 <__alt_data_end+0xfc013710>
   13b40:	dd802617 	ldw	r22,152(sp)
   13b44:	003f1206 	br	13790 <__alt_data_end+0xfc013790>
   13b48:	d8c02b03 	ldbu	r3,172(sp)
   13b4c:	d8c02785 	stb	r3,158(sp)
   13b50:	0038df06 	br	11ed0 <__alt_data_end+0xfc011ed0>
   13b54:	d8c02b03 	ldbu	r3,172(sp)
   13b58:	d8c02785 	stb	r3,158(sp)
   13b5c:	0038aa06 	br	11e08 <__alt_data_end+0xfc011e08>
   13b60:	d8c02b03 	ldbu	r3,172(sp)
   13b64:	d8c02785 	stb	r3,158(sp)
   13b68:	003a4306 	br	12478 <__alt_data_end+0xfc012478>
   13b6c:	d8c02b03 	ldbu	r3,172(sp)
   13b70:	d8c02785 	stb	r3,158(sp)
   13b74:	003af506 	br	1274c <__alt_data_end+0xfc01274c>
   13b78:	0005883a 	mov	r2,zero
   13b7c:	003d7b06 	br	1316c <__alt_data_end+0xfc01316c>
   13b80:	d8802344 	addi	r2,sp,141
   13b84:	003f1006 	br	137c8 <__alt_data_end+0xfc0137c8>
   13b88:	d8c02b03 	ldbu	r3,172(sp)
   13b8c:	d8c02785 	stb	r3,158(sp)
   13b90:	0038fd06 	br	11f88 <__alt_data_end+0xfc011f88>
   13b94:	d8c02b03 	ldbu	r3,172(sp)
   13b98:	d8c02785 	stb	r3,158(sp)
   13b9c:	003a9706 	br	125fc <__alt_data_end+0xfc0125fc>
   13ba0:	d8c02b03 	ldbu	r3,172(sp)
   13ba4:	d8c02785 	stb	r3,158(sp)
   13ba8:	003a1806 	br	1240c <__alt_data_end+0xfc01240c>
   13bac:	d8c02b03 	ldbu	r3,172(sp)
   13bb0:	d8c02785 	stb	r3,158(sp)
   13bb4:	003abe06 	br	126b0 <__alt_data_end+0xfc0126b0>

00013bb8 <__vfprintf_internal>:
   13bb8:	008000f4 	movhi	r2,3
   13bbc:	10b77b04 	addi	r2,r2,-8724
   13bc0:	300f883a 	mov	r7,r6
   13bc4:	280d883a 	mov	r6,r5
   13bc8:	200b883a 	mov	r5,r4
   13bcc:	11000017 	ldw	r4,0(r2)
   13bd0:	00118dc1 	jmpi	118dc <___vfprintf_internal_r>

00013bd4 <__sbprintf>:
   13bd4:	2880030b 	ldhu	r2,12(r5)
   13bd8:	2ac01917 	ldw	r11,100(r5)
   13bdc:	2a80038b 	ldhu	r10,14(r5)
   13be0:	2a400717 	ldw	r9,28(r5)
   13be4:	2a000917 	ldw	r8,36(r5)
   13be8:	defee204 	addi	sp,sp,-1144
   13bec:	00c10004 	movi	r3,1024
   13bf0:	dc011a15 	stw	r16,1128(sp)
   13bf4:	10bfff4c 	andi	r2,r2,65533
   13bf8:	2821883a 	mov	r16,r5
   13bfc:	d8cb883a 	add	r5,sp,r3
   13c00:	dc811c15 	stw	r18,1136(sp)
   13c04:	dc411b15 	stw	r17,1132(sp)
   13c08:	dfc11d15 	stw	ra,1140(sp)
   13c0c:	2025883a 	mov	r18,r4
   13c10:	d881030d 	sth	r2,1036(sp)
   13c14:	dac11915 	stw	r11,1124(sp)
   13c18:	da81038d 	sth	r10,1038(sp)
   13c1c:	da410715 	stw	r9,1052(sp)
   13c20:	da010915 	stw	r8,1060(sp)
   13c24:	dec10015 	stw	sp,1024(sp)
   13c28:	dec10415 	stw	sp,1040(sp)
   13c2c:	d8c10215 	stw	r3,1032(sp)
   13c30:	d8c10515 	stw	r3,1044(sp)
   13c34:	d8010615 	stw	zero,1048(sp)
   13c38:	00118dc0 	call	118dc <___vfprintf_internal_r>
   13c3c:	1023883a 	mov	r17,r2
   13c40:	10000416 	blt	r2,zero,13c54 <__sbprintf+0x80>
   13c44:	d9410004 	addi	r5,sp,1024
   13c48:	9009883a 	mov	r4,r18
   13c4c:	00158b00 	call	158b0 <_fflush_r>
   13c50:	10000d1e 	bne	r2,zero,13c88 <__sbprintf+0xb4>
   13c54:	d881030b 	ldhu	r2,1036(sp)
   13c58:	1080100c 	andi	r2,r2,64
   13c5c:	10000326 	beq	r2,zero,13c6c <__sbprintf+0x98>
   13c60:	8080030b 	ldhu	r2,12(r16)
   13c64:	10801014 	ori	r2,r2,64
   13c68:	8080030d 	sth	r2,12(r16)
   13c6c:	8805883a 	mov	r2,r17
   13c70:	dfc11d17 	ldw	ra,1140(sp)
   13c74:	dc811c17 	ldw	r18,1136(sp)
   13c78:	dc411b17 	ldw	r17,1132(sp)
   13c7c:	dc011a17 	ldw	r16,1128(sp)
   13c80:	dec11e04 	addi	sp,sp,1144
   13c84:	f800283a 	ret
   13c88:	047fffc4 	movi	r17,-1
   13c8c:	003ff106 	br	13c54 <__alt_data_end+0xfc013c54>

00013c90 <__swsetup_r>:
   13c90:	008000f4 	movhi	r2,3
   13c94:	defffd04 	addi	sp,sp,-12
   13c98:	10b77b04 	addi	r2,r2,-8724
   13c9c:	dc400115 	stw	r17,4(sp)
   13ca0:	2023883a 	mov	r17,r4
   13ca4:	11000017 	ldw	r4,0(r2)
   13ca8:	dc000015 	stw	r16,0(sp)
   13cac:	dfc00215 	stw	ra,8(sp)
   13cb0:	2821883a 	mov	r16,r5
   13cb4:	20000226 	beq	r4,zero,13cc0 <__swsetup_r+0x30>
   13cb8:	20800e17 	ldw	r2,56(r4)
   13cbc:	10003126 	beq	r2,zero,13d84 <__swsetup_r+0xf4>
   13cc0:	8080030b 	ldhu	r2,12(r16)
   13cc4:	10c0020c 	andi	r3,r2,8
   13cc8:	1009883a 	mov	r4,r2
   13ccc:	18000f26 	beq	r3,zero,13d0c <__swsetup_r+0x7c>
   13cd0:	80c00417 	ldw	r3,16(r16)
   13cd4:	18001526 	beq	r3,zero,13d2c <__swsetup_r+0x9c>
   13cd8:	1100004c 	andi	r4,r2,1
   13cdc:	20001c1e 	bne	r4,zero,13d50 <__swsetup_r+0xc0>
   13ce0:	1080008c 	andi	r2,r2,2
   13ce4:	1000291e 	bne	r2,zero,13d8c <__swsetup_r+0xfc>
   13ce8:	80800517 	ldw	r2,20(r16)
   13cec:	80800215 	stw	r2,8(r16)
   13cf0:	18001c26 	beq	r3,zero,13d64 <__swsetup_r+0xd4>
   13cf4:	0005883a 	mov	r2,zero
   13cf8:	dfc00217 	ldw	ra,8(sp)
   13cfc:	dc400117 	ldw	r17,4(sp)
   13d00:	dc000017 	ldw	r16,0(sp)
   13d04:	dec00304 	addi	sp,sp,12
   13d08:	f800283a 	ret
   13d0c:	2080040c 	andi	r2,r4,16
   13d10:	10002e26 	beq	r2,zero,13dcc <__swsetup_r+0x13c>
   13d14:	2080010c 	andi	r2,r4,4
   13d18:	10001e1e 	bne	r2,zero,13d94 <__swsetup_r+0x104>
   13d1c:	80c00417 	ldw	r3,16(r16)
   13d20:	20800214 	ori	r2,r4,8
   13d24:	8080030d 	sth	r2,12(r16)
   13d28:	183feb1e 	bne	r3,zero,13cd8 <__alt_data_end+0xfc013cd8>
   13d2c:	1100a00c 	andi	r4,r2,640
   13d30:	01408004 	movi	r5,512
   13d34:	217fe826 	beq	r4,r5,13cd8 <__alt_data_end+0xfc013cd8>
   13d38:	800b883a 	mov	r5,r16
   13d3c:	8809883a 	mov	r4,r17
   13d40:	001684c0 	call	1684c <__smakebuf_r>
   13d44:	8080030b 	ldhu	r2,12(r16)
   13d48:	80c00417 	ldw	r3,16(r16)
   13d4c:	003fe206 	br	13cd8 <__alt_data_end+0xfc013cd8>
   13d50:	80800517 	ldw	r2,20(r16)
   13d54:	80000215 	stw	zero,8(r16)
   13d58:	0085c83a 	sub	r2,zero,r2
   13d5c:	80800615 	stw	r2,24(r16)
   13d60:	183fe41e 	bne	r3,zero,13cf4 <__alt_data_end+0xfc013cf4>
   13d64:	80c0030b 	ldhu	r3,12(r16)
   13d68:	0005883a 	mov	r2,zero
   13d6c:	1900200c 	andi	r4,r3,128
   13d70:	203fe126 	beq	r4,zero,13cf8 <__alt_data_end+0xfc013cf8>
   13d74:	18c01014 	ori	r3,r3,64
   13d78:	80c0030d 	sth	r3,12(r16)
   13d7c:	00bfffc4 	movi	r2,-1
   13d80:	003fdd06 	br	13cf8 <__alt_data_end+0xfc013cf8>
   13d84:	0015c9c0 	call	15c9c <__sinit>
   13d88:	003fcd06 	br	13cc0 <__alt_data_end+0xfc013cc0>
   13d8c:	0005883a 	mov	r2,zero
   13d90:	003fd606 	br	13cec <__alt_data_end+0xfc013cec>
   13d94:	81400c17 	ldw	r5,48(r16)
   13d98:	28000626 	beq	r5,zero,13db4 <__swsetup_r+0x124>
   13d9c:	80801004 	addi	r2,r16,64
   13da0:	28800326 	beq	r5,r2,13db0 <__swsetup_r+0x120>
   13da4:	8809883a 	mov	r4,r17
   13da8:	0015e100 	call	15e10 <_free_r>
   13dac:	8100030b 	ldhu	r4,12(r16)
   13db0:	80000c15 	stw	zero,48(r16)
   13db4:	80c00417 	ldw	r3,16(r16)
   13db8:	00bff6c4 	movi	r2,-37
   13dbc:	1108703a 	and	r4,r2,r4
   13dc0:	80000115 	stw	zero,4(r16)
   13dc4:	80c00015 	stw	r3,0(r16)
   13dc8:	003fd506 	br	13d20 <__alt_data_end+0xfc013d20>
   13dcc:	00800244 	movi	r2,9
   13dd0:	88800015 	stw	r2,0(r17)
   13dd4:	20801014 	ori	r2,r4,64
   13dd8:	8080030d 	sth	r2,12(r16)
   13ddc:	00bfffc4 	movi	r2,-1
   13de0:	003fc506 	br	13cf8 <__alt_data_end+0xfc013cf8>

00013de4 <quorem>:
   13de4:	defff204 	addi	sp,sp,-56
   13de8:	ddc00b15 	stw	r23,44(sp)
   13dec:	20800417 	ldw	r2,16(r4)
   13df0:	2dc00417 	ldw	r23,16(r5)
   13df4:	dfc00d15 	stw	ra,52(sp)
   13df8:	df000c15 	stw	fp,48(sp)
   13dfc:	dd800a15 	stw	r22,40(sp)
   13e00:	dd400915 	stw	r21,36(sp)
   13e04:	dd000815 	stw	r20,32(sp)
   13e08:	dcc00715 	stw	r19,28(sp)
   13e0c:	dc800615 	stw	r18,24(sp)
   13e10:	dc400515 	stw	r17,20(sp)
   13e14:	dc000415 	stw	r16,16(sp)
   13e18:	15c07a16 	blt	r2,r23,14004 <quorem+0x220>
   13e1c:	bdffffc4 	addi	r23,r23,-1
   13e20:	bde9883a 	add	r20,r23,r23
   13e24:	28c00504 	addi	r3,r5,20
   13e28:	a529883a 	add	r20,r20,r20
   13e2c:	1d39883a 	add	fp,r3,r20
   13e30:	24c00504 	addi	r19,r4,20
   13e34:	d9400215 	stw	r5,8(sp)
   13e38:	9d29883a 	add	r20,r19,r20
   13e3c:	e1400017 	ldw	r5,0(fp)
   13e40:	d9000015 	stw	r4,0(sp)
   13e44:	a1000017 	ldw	r4,0(r20)
   13e48:	29400044 	addi	r5,r5,1
   13e4c:	d8c00115 	stw	r3,4(sp)
   13e50:	dd000315 	stw	r20,12(sp)
   13e54:	000ce480 	call	ce48 <__udivsi3>
   13e58:	1025883a 	mov	r18,r2
   13e5c:	10003026 	beq	r2,zero,13f20 <quorem+0x13c>
   13e60:	dc400117 	ldw	r17,4(sp)
   13e64:	9829883a 	mov	r20,r19
   13e68:	002d883a 	mov	r22,zero
   13e6c:	0021883a 	mov	r16,zero
   13e70:	8d400017 	ldw	r21,0(r17)
   13e74:	900b883a 	mov	r5,r18
   13e78:	8c400104 	addi	r17,r17,4
   13e7c:	a93fffcc 	andi	r4,r21,65535
   13e80:	000cf040 	call	cf04 <__mulsi3>
   13e84:	a808d43a 	srli	r4,r21,16
   13e88:	900b883a 	mov	r5,r18
   13e8c:	15ad883a 	add	r22,r2,r22
   13e90:	000cf040 	call	cf04 <__mulsi3>
   13e94:	a1000017 	ldw	r4,0(r20)
   13e98:	b00cd43a 	srli	r6,r22,16
   13e9c:	b0ffffcc 	andi	r3,r22,65535
   13ea0:	217fffcc 	andi	r5,r4,65535
   13ea4:	2c21883a 	add	r16,r5,r16
   13ea8:	80c7c83a 	sub	r3,r16,r3
   13eac:	2008d43a 	srli	r4,r4,16
   13eb0:	1185883a 	add	r2,r2,r6
   13eb4:	1821d43a 	srai	r16,r3,16
   13eb8:	117fffcc 	andi	r5,r2,65535
   13ebc:	2149c83a 	sub	r4,r4,r5
   13ec0:	2421883a 	add	r16,r4,r16
   13ec4:	8008943a 	slli	r4,r16,16
   13ec8:	18ffffcc 	andi	r3,r3,65535
   13ecc:	102cd43a 	srli	r22,r2,16
   13ed0:	20c8b03a 	or	r4,r4,r3
   13ed4:	a1000015 	stw	r4,0(r20)
   13ed8:	8021d43a 	srai	r16,r16,16
   13edc:	a5000104 	addi	r20,r20,4
   13ee0:	e47fe32e 	bgeu	fp,r17,13e70 <__alt_data_end+0xfc013e70>
   13ee4:	d8c00317 	ldw	r3,12(sp)
   13ee8:	18800017 	ldw	r2,0(r3)
   13eec:	10000c1e 	bne	r2,zero,13f20 <quorem+0x13c>
   13ef0:	18bfff04 	addi	r2,r3,-4
   13ef4:	9880082e 	bgeu	r19,r2,13f18 <quorem+0x134>
   13ef8:	18ffff17 	ldw	r3,-4(r3)
   13efc:	18000326 	beq	r3,zero,13f0c <quorem+0x128>
   13f00:	00000506 	br	13f18 <quorem+0x134>
   13f04:	10c00017 	ldw	r3,0(r2)
   13f08:	1800031e 	bne	r3,zero,13f18 <quorem+0x134>
   13f0c:	10bfff04 	addi	r2,r2,-4
   13f10:	bdffffc4 	addi	r23,r23,-1
   13f14:	98bffb36 	bltu	r19,r2,13f04 <__alt_data_end+0xfc013f04>
   13f18:	d8c00017 	ldw	r3,0(sp)
   13f1c:	1dc00415 	stw	r23,16(r3)
   13f20:	d9400217 	ldw	r5,8(sp)
   13f24:	d9000017 	ldw	r4,0(sp)
   13f28:	00175cc0 	call	175cc <__mcmp>
   13f2c:	10002816 	blt	r2,zero,13fd0 <quorem+0x1ec>
   13f30:	dc400117 	ldw	r17,4(sp)
   13f34:	94800044 	addi	r18,r18,1
   13f38:	980d883a 	mov	r6,r19
   13f3c:	0007883a 	mov	r3,zero
   13f40:	31000017 	ldw	r4,0(r6)
   13f44:	89400017 	ldw	r5,0(r17)
   13f48:	31800104 	addi	r6,r6,4
   13f4c:	20bfffcc 	andi	r2,r4,65535
   13f50:	10c7883a 	add	r3,r2,r3
   13f54:	28bfffcc 	andi	r2,r5,65535
   13f58:	1885c83a 	sub	r2,r3,r2
   13f5c:	280ad43a 	srli	r5,r5,16
   13f60:	2008d43a 	srli	r4,r4,16
   13f64:	1007d43a 	srai	r3,r2,16
   13f68:	10bfffcc 	andi	r2,r2,65535
   13f6c:	2149c83a 	sub	r4,r4,r5
   13f70:	20c9883a 	add	r4,r4,r3
   13f74:	200a943a 	slli	r5,r4,16
   13f78:	8c400104 	addi	r17,r17,4
   13f7c:	2007d43a 	srai	r3,r4,16
   13f80:	2884b03a 	or	r2,r5,r2
   13f84:	30bfff15 	stw	r2,-4(r6)
   13f88:	e47fed2e 	bgeu	fp,r17,13f40 <__alt_data_end+0xfc013f40>
   13f8c:	bdc5883a 	add	r2,r23,r23
   13f90:	1085883a 	add	r2,r2,r2
   13f94:	9887883a 	add	r3,r19,r2
   13f98:	18800017 	ldw	r2,0(r3)
   13f9c:	10000c1e 	bne	r2,zero,13fd0 <quorem+0x1ec>
   13fa0:	18bfff04 	addi	r2,r3,-4
   13fa4:	9880082e 	bgeu	r19,r2,13fc8 <quorem+0x1e4>
   13fa8:	18ffff17 	ldw	r3,-4(r3)
   13fac:	18000326 	beq	r3,zero,13fbc <quorem+0x1d8>
   13fb0:	00000506 	br	13fc8 <quorem+0x1e4>
   13fb4:	10c00017 	ldw	r3,0(r2)
   13fb8:	1800031e 	bne	r3,zero,13fc8 <quorem+0x1e4>
   13fbc:	10bfff04 	addi	r2,r2,-4
   13fc0:	bdffffc4 	addi	r23,r23,-1
   13fc4:	98bffb36 	bltu	r19,r2,13fb4 <__alt_data_end+0xfc013fb4>
   13fc8:	d8c00017 	ldw	r3,0(sp)
   13fcc:	1dc00415 	stw	r23,16(r3)
   13fd0:	9005883a 	mov	r2,r18
   13fd4:	dfc00d17 	ldw	ra,52(sp)
   13fd8:	df000c17 	ldw	fp,48(sp)
   13fdc:	ddc00b17 	ldw	r23,44(sp)
   13fe0:	dd800a17 	ldw	r22,40(sp)
   13fe4:	dd400917 	ldw	r21,36(sp)
   13fe8:	dd000817 	ldw	r20,32(sp)
   13fec:	dcc00717 	ldw	r19,28(sp)
   13ff0:	dc800617 	ldw	r18,24(sp)
   13ff4:	dc400517 	ldw	r17,20(sp)
   13ff8:	dc000417 	ldw	r16,16(sp)
   13ffc:	dec00e04 	addi	sp,sp,56
   14000:	f800283a 	ret
   14004:	0005883a 	mov	r2,zero
   14008:	003ff206 	br	13fd4 <__alt_data_end+0xfc013fd4>

0001400c <_dtoa_r>:
   1400c:	20801017 	ldw	r2,64(r4)
   14010:	deffde04 	addi	sp,sp,-136
   14014:	df002015 	stw	fp,128(sp)
   14018:	dcc01b15 	stw	r19,108(sp)
   1401c:	dc801a15 	stw	r18,104(sp)
   14020:	dc401915 	stw	r17,100(sp)
   14024:	dc001815 	stw	r16,96(sp)
   14028:	dfc02115 	stw	ra,132(sp)
   1402c:	ddc01f15 	stw	r23,124(sp)
   14030:	dd801e15 	stw	r22,120(sp)
   14034:	dd401d15 	stw	r21,116(sp)
   14038:	dd001c15 	stw	r20,112(sp)
   1403c:	d9c00315 	stw	r7,12(sp)
   14040:	2039883a 	mov	fp,r4
   14044:	3023883a 	mov	r17,r6
   14048:	2825883a 	mov	r18,r5
   1404c:	dc002417 	ldw	r16,144(sp)
   14050:	3027883a 	mov	r19,r6
   14054:	10000826 	beq	r2,zero,14078 <_dtoa_r+0x6c>
   14058:	21801117 	ldw	r6,68(r4)
   1405c:	00c00044 	movi	r3,1
   14060:	100b883a 	mov	r5,r2
   14064:	1986983a 	sll	r3,r3,r6
   14068:	11800115 	stw	r6,4(r2)
   1406c:	10c00215 	stw	r3,8(r2)
   14070:	0016cf00 	call	16cf0 <_Bfree>
   14074:	e0001015 	stw	zero,64(fp)
   14078:	88002e16 	blt	r17,zero,14134 <_dtoa_r+0x128>
   1407c:	80000015 	stw	zero,0(r16)
   14080:	889ffc2c 	andhi	r2,r17,32752
   14084:	00dffc34 	movhi	r3,32752
   14088:	10c01c26 	beq	r2,r3,140fc <_dtoa_r+0xf0>
   1408c:	000d883a 	mov	r6,zero
   14090:	000f883a 	mov	r7,zero
   14094:	9009883a 	mov	r4,r18
   14098:	980b883a 	mov	r5,r19
   1409c:	001d96c0 	call	1d96c <__eqdf2>
   140a0:	10002b1e 	bne	r2,zero,14150 <_dtoa_r+0x144>
   140a4:	d9c02317 	ldw	r7,140(sp)
   140a8:	00800044 	movi	r2,1
   140ac:	38800015 	stw	r2,0(r7)
   140b0:	d8802517 	ldw	r2,148(sp)
   140b4:	10019e26 	beq	r2,zero,14730 <_dtoa_r+0x724>
   140b8:	d8c02517 	ldw	r3,148(sp)
   140bc:	008000f4 	movhi	r2,3
   140c0:	10aa8a44 	addi	r2,r2,-21975
   140c4:	18800015 	stw	r2,0(r3)
   140c8:	10bfffc4 	addi	r2,r2,-1
   140cc:	dfc02117 	ldw	ra,132(sp)
   140d0:	df002017 	ldw	fp,128(sp)
   140d4:	ddc01f17 	ldw	r23,124(sp)
   140d8:	dd801e17 	ldw	r22,120(sp)
   140dc:	dd401d17 	ldw	r21,116(sp)
   140e0:	dd001c17 	ldw	r20,112(sp)
   140e4:	dcc01b17 	ldw	r19,108(sp)
   140e8:	dc801a17 	ldw	r18,104(sp)
   140ec:	dc401917 	ldw	r17,100(sp)
   140f0:	dc001817 	ldw	r16,96(sp)
   140f4:	dec02204 	addi	sp,sp,136
   140f8:	f800283a 	ret
   140fc:	d8c02317 	ldw	r3,140(sp)
   14100:	0089c3c4 	movi	r2,9999
   14104:	18800015 	stw	r2,0(r3)
   14108:	90017726 	beq	r18,zero,146e8 <_dtoa_r+0x6dc>
   1410c:	008000f4 	movhi	r2,3
   14110:	10aa9e04 	addi	r2,r2,-21896
   14114:	d9002517 	ldw	r4,148(sp)
   14118:	203fec26 	beq	r4,zero,140cc <__alt_data_end+0xfc0140cc>
   1411c:	10c000c7 	ldb	r3,3(r2)
   14120:	1801781e 	bne	r3,zero,14704 <_dtoa_r+0x6f8>
   14124:	10c000c4 	addi	r3,r2,3
   14128:	d9802517 	ldw	r6,148(sp)
   1412c:	30c00015 	stw	r3,0(r6)
   14130:	003fe606 	br	140cc <__alt_data_end+0xfc0140cc>
   14134:	04e00034 	movhi	r19,32768
   14138:	9cffffc4 	addi	r19,r19,-1
   1413c:	00800044 	movi	r2,1
   14140:	8ce6703a 	and	r19,r17,r19
   14144:	80800015 	stw	r2,0(r16)
   14148:	9823883a 	mov	r17,r19
   1414c:	003fcc06 	br	14080 <__alt_data_end+0xfc014080>
   14150:	d8800204 	addi	r2,sp,8
   14154:	d8800015 	stw	r2,0(sp)
   14158:	d9c00104 	addi	r7,sp,4
   1415c:	900b883a 	mov	r5,r18
   14160:	980d883a 	mov	r6,r19
   14164:	e009883a 	mov	r4,fp
   14168:	8820d53a 	srli	r16,r17,20
   1416c:	00179980 	call	17998 <__d2b>
   14170:	d8800915 	stw	r2,36(sp)
   14174:	8001651e 	bne	r16,zero,1470c <_dtoa_r+0x700>
   14178:	dd800217 	ldw	r22,8(sp)
   1417c:	dc000117 	ldw	r16,4(sp)
   14180:	00800804 	movi	r2,32
   14184:	b421883a 	add	r16,r22,r16
   14188:	80c10c84 	addi	r3,r16,1074
   1418c:	10c2d10e 	bge	r2,r3,14cd4 <_dtoa_r+0xcc8>
   14190:	00801004 	movi	r2,64
   14194:	81010484 	addi	r4,r16,1042
   14198:	10c7c83a 	sub	r3,r2,r3
   1419c:	9108d83a 	srl	r4,r18,r4
   141a0:	88e2983a 	sll	r17,r17,r3
   141a4:	2448b03a 	or	r4,r4,r17
   141a8:	001ee880 	call	1ee88 <__floatunsidf>
   141ac:	017f8434 	movhi	r5,65040
   141b0:	01800044 	movi	r6,1
   141b4:	1009883a 	mov	r4,r2
   141b8:	194b883a 	add	r5,r3,r5
   141bc:	843fffc4 	addi	r16,r16,-1
   141c0:	d9801115 	stw	r6,68(sp)
   141c4:	000d883a 	mov	r6,zero
   141c8:	01cffe34 	movhi	r7,16376
   141cc:	001e4300 	call	1e430 <__subdf3>
   141d0:	0198dbf4 	movhi	r6,25455
   141d4:	01cff4f4 	movhi	r7,16339
   141d8:	3190d844 	addi	r6,r6,17249
   141dc:	39e1e9c4 	addi	r7,r7,-30809
   141e0:	1009883a 	mov	r4,r2
   141e4:	180b883a 	mov	r5,r3
   141e8:	001dbc40 	call	1dbc4 <__muldf3>
   141ec:	01a2d874 	movhi	r6,35681
   141f0:	01cff1f4 	movhi	r7,16327
   141f4:	31b22cc4 	addi	r6,r6,-14157
   141f8:	39e28a04 	addi	r7,r7,-30168
   141fc:	180b883a 	mov	r5,r3
   14200:	1009883a 	mov	r4,r2
   14204:	001c6f00 	call	1c6f0 <__adddf3>
   14208:	8009883a 	mov	r4,r16
   1420c:	1029883a 	mov	r20,r2
   14210:	1823883a 	mov	r17,r3
   14214:	001edac0 	call	1edac <__floatsidf>
   14218:	019427f4 	movhi	r6,20639
   1421c:	01cff4f4 	movhi	r7,16339
   14220:	319e7ec4 	addi	r6,r6,31227
   14224:	39d104c4 	addi	r7,r7,17427
   14228:	1009883a 	mov	r4,r2
   1422c:	180b883a 	mov	r5,r3
   14230:	001dbc40 	call	1dbc4 <__muldf3>
   14234:	100d883a 	mov	r6,r2
   14238:	180f883a 	mov	r7,r3
   1423c:	a009883a 	mov	r4,r20
   14240:	880b883a 	mov	r5,r17
   14244:	001c6f00 	call	1c6f0 <__adddf3>
   14248:	1009883a 	mov	r4,r2
   1424c:	180b883a 	mov	r5,r3
   14250:	1029883a 	mov	r20,r2
   14254:	1823883a 	mov	r17,r3
   14258:	001ed2c0 	call	1ed2c <__fixdfsi>
   1425c:	000d883a 	mov	r6,zero
   14260:	000f883a 	mov	r7,zero
   14264:	a009883a 	mov	r4,r20
   14268:	880b883a 	mov	r5,r17
   1426c:	d8800515 	stw	r2,20(sp)
   14270:	001dad00 	call	1dad0 <__ledf2>
   14274:	10028716 	blt	r2,zero,14c94 <_dtoa_r+0xc88>
   14278:	d8c00517 	ldw	r3,20(sp)
   1427c:	00800584 	movi	r2,22
   14280:	10c27536 	bltu	r2,r3,14c58 <_dtoa_r+0xc4c>
   14284:	180490fa 	slli	r2,r3,3
   14288:	00c000f4 	movhi	r3,3
   1428c:	18eab904 	addi	r3,r3,-21788
   14290:	1885883a 	add	r2,r3,r2
   14294:	11000017 	ldw	r4,0(r2)
   14298:	11400117 	ldw	r5,4(r2)
   1429c:	900d883a 	mov	r6,r18
   142a0:	980f883a 	mov	r7,r19
   142a4:	001d9f40 	call	1d9f4 <__gedf2>
   142a8:	00828d0e 	bge	zero,r2,14ce0 <_dtoa_r+0xcd4>
   142ac:	d9000517 	ldw	r4,20(sp)
   142b0:	d8000e15 	stw	zero,56(sp)
   142b4:	213fffc4 	addi	r4,r4,-1
   142b8:	d9000515 	stw	r4,20(sp)
   142bc:	b42dc83a 	sub	r22,r22,r16
   142c0:	b5bfffc4 	addi	r22,r22,-1
   142c4:	b0026f16 	blt	r22,zero,14c84 <_dtoa_r+0xc78>
   142c8:	d8000815 	stw	zero,32(sp)
   142cc:	d9c00517 	ldw	r7,20(sp)
   142d0:	38026416 	blt	r7,zero,14c64 <_dtoa_r+0xc58>
   142d4:	b1ed883a 	add	r22,r22,r7
   142d8:	d9c00d15 	stw	r7,52(sp)
   142dc:	d8000a15 	stw	zero,40(sp)
   142e0:	d9800317 	ldw	r6,12(sp)
   142e4:	00800244 	movi	r2,9
   142e8:	11811436 	bltu	r2,r6,1473c <_dtoa_r+0x730>
   142ec:	00800144 	movi	r2,5
   142f0:	1184e10e 	bge	r2,r6,15678 <_dtoa_r+0x166c>
   142f4:	31bfff04 	addi	r6,r6,-4
   142f8:	d9800315 	stw	r6,12(sp)
   142fc:	0023883a 	mov	r17,zero
   14300:	d9800317 	ldw	r6,12(sp)
   14304:	008000c4 	movi	r2,3
   14308:	30836726 	beq	r6,r2,150a8 <_dtoa_r+0x109c>
   1430c:	1183410e 	bge	r2,r6,15014 <_dtoa_r+0x1008>
   14310:	d9c00317 	ldw	r7,12(sp)
   14314:	00800104 	movi	r2,4
   14318:	38827c26 	beq	r7,r2,14d0c <_dtoa_r+0xd00>
   1431c:	00800144 	movi	r2,5
   14320:	3884c41e 	bne	r7,r2,15634 <_dtoa_r+0x1628>
   14324:	00800044 	movi	r2,1
   14328:	d8800b15 	stw	r2,44(sp)
   1432c:	d8c00517 	ldw	r3,20(sp)
   14330:	d9002217 	ldw	r4,136(sp)
   14334:	1907883a 	add	r3,r3,r4
   14338:	19800044 	addi	r6,r3,1
   1433c:	d8c00c15 	stw	r3,48(sp)
   14340:	d9800615 	stw	r6,24(sp)
   14344:	0183a40e 	bge	zero,r6,151d8 <_dtoa_r+0x11cc>
   14348:	d9800617 	ldw	r6,24(sp)
   1434c:	3021883a 	mov	r16,r6
   14350:	e0001115 	stw	zero,68(fp)
   14354:	008005c4 	movi	r2,23
   14358:	1184c92e 	bgeu	r2,r6,15680 <_dtoa_r+0x1674>
   1435c:	00c00044 	movi	r3,1
   14360:	00800104 	movi	r2,4
   14364:	1085883a 	add	r2,r2,r2
   14368:	11000504 	addi	r4,r2,20
   1436c:	180b883a 	mov	r5,r3
   14370:	18c00044 	addi	r3,r3,1
   14374:	313ffb2e 	bgeu	r6,r4,14364 <__alt_data_end+0xfc014364>
   14378:	e1401115 	stw	r5,68(fp)
   1437c:	e009883a 	mov	r4,fp
   14380:	0016c480 	call	16c48 <_Balloc>
   14384:	d8800715 	stw	r2,28(sp)
   14388:	e0801015 	stw	r2,64(fp)
   1438c:	00800384 	movi	r2,14
   14390:	1400f736 	bltu	r2,r16,14770 <_dtoa_r+0x764>
   14394:	8800f626 	beq	r17,zero,14770 <_dtoa_r+0x764>
   14398:	d9c00517 	ldw	r7,20(sp)
   1439c:	01c39a0e 	bge	zero,r7,15208 <_dtoa_r+0x11fc>
   143a0:	388003cc 	andi	r2,r7,15
   143a4:	100490fa 	slli	r2,r2,3
   143a8:	382bd13a 	srai	r21,r7,4
   143ac:	00c000f4 	movhi	r3,3
   143b0:	18eab904 	addi	r3,r3,-21788
   143b4:	1885883a 	add	r2,r3,r2
   143b8:	a8c0040c 	andi	r3,r21,16
   143bc:	12400017 	ldw	r9,0(r2)
   143c0:	12000117 	ldw	r8,4(r2)
   143c4:	18037926 	beq	r3,zero,151ac <_dtoa_r+0x11a0>
   143c8:	008000f4 	movhi	r2,3
   143cc:	10aaaf04 	addi	r2,r2,-21828
   143d0:	11800817 	ldw	r6,32(r2)
   143d4:	11c00917 	ldw	r7,36(r2)
   143d8:	9009883a 	mov	r4,r18
   143dc:	980b883a 	mov	r5,r19
   143e0:	da001715 	stw	r8,92(sp)
   143e4:	da401615 	stw	r9,88(sp)
   143e8:	001cf9c0 	call	1cf9c <__divdf3>
   143ec:	da001717 	ldw	r8,92(sp)
   143f0:	da401617 	ldw	r9,88(sp)
   143f4:	ad4003cc 	andi	r21,r21,15
   143f8:	040000c4 	movi	r16,3
   143fc:	1023883a 	mov	r17,r2
   14400:	1829883a 	mov	r20,r3
   14404:	a8001126 	beq	r21,zero,1444c <_dtoa_r+0x440>
   14408:	05c000f4 	movhi	r23,3
   1440c:	bdeaaf04 	addi	r23,r23,-21828
   14410:	4805883a 	mov	r2,r9
   14414:	4007883a 	mov	r3,r8
   14418:	a980004c 	andi	r6,r21,1
   1441c:	1009883a 	mov	r4,r2
   14420:	a82bd07a 	srai	r21,r21,1
   14424:	180b883a 	mov	r5,r3
   14428:	30000426 	beq	r6,zero,1443c <_dtoa_r+0x430>
   1442c:	b9800017 	ldw	r6,0(r23)
   14430:	b9c00117 	ldw	r7,4(r23)
   14434:	84000044 	addi	r16,r16,1
   14438:	001dbc40 	call	1dbc4 <__muldf3>
   1443c:	bdc00204 	addi	r23,r23,8
   14440:	a83ff51e 	bne	r21,zero,14418 <__alt_data_end+0xfc014418>
   14444:	1013883a 	mov	r9,r2
   14448:	1811883a 	mov	r8,r3
   1444c:	480d883a 	mov	r6,r9
   14450:	400f883a 	mov	r7,r8
   14454:	8809883a 	mov	r4,r17
   14458:	a00b883a 	mov	r5,r20
   1445c:	001cf9c0 	call	1cf9c <__divdf3>
   14460:	d8800f15 	stw	r2,60(sp)
   14464:	d8c01015 	stw	r3,64(sp)
   14468:	d8c00e17 	ldw	r3,56(sp)
   1446c:	18000626 	beq	r3,zero,14488 <_dtoa_r+0x47c>
   14470:	d9000f17 	ldw	r4,60(sp)
   14474:	d9401017 	ldw	r5,64(sp)
   14478:	000d883a 	mov	r6,zero
   1447c:	01cffc34 	movhi	r7,16368
   14480:	001dad00 	call	1dad0 <__ledf2>
   14484:	10040b16 	blt	r2,zero,154b4 <_dtoa_r+0x14a8>
   14488:	8009883a 	mov	r4,r16
   1448c:	001edac0 	call	1edac <__floatsidf>
   14490:	d9800f17 	ldw	r6,60(sp)
   14494:	d9c01017 	ldw	r7,64(sp)
   14498:	1009883a 	mov	r4,r2
   1449c:	180b883a 	mov	r5,r3
   144a0:	001dbc40 	call	1dbc4 <__muldf3>
   144a4:	000d883a 	mov	r6,zero
   144a8:	01d00734 	movhi	r7,16412
   144ac:	1009883a 	mov	r4,r2
   144b0:	180b883a 	mov	r5,r3
   144b4:	001c6f00 	call	1c6f0 <__adddf3>
   144b8:	1021883a 	mov	r16,r2
   144bc:	d8800617 	ldw	r2,24(sp)
   144c0:	047f3034 	movhi	r17,64704
   144c4:	1c63883a 	add	r17,r3,r17
   144c8:	10031826 	beq	r2,zero,1512c <_dtoa_r+0x1120>
   144cc:	d8c00517 	ldw	r3,20(sp)
   144d0:	db000617 	ldw	r12,24(sp)
   144d4:	d8c01315 	stw	r3,76(sp)
   144d8:	d9000b17 	ldw	r4,44(sp)
   144dc:	20038f26 	beq	r4,zero,1531c <_dtoa_r+0x1310>
   144e0:	60bfffc4 	addi	r2,r12,-1
   144e4:	100490fa 	slli	r2,r2,3
   144e8:	00c000f4 	movhi	r3,3
   144ec:	18eab904 	addi	r3,r3,-21788
   144f0:	1885883a 	add	r2,r3,r2
   144f4:	11800017 	ldw	r6,0(r2)
   144f8:	11c00117 	ldw	r7,4(r2)
   144fc:	d8800717 	ldw	r2,28(sp)
   14500:	0009883a 	mov	r4,zero
   14504:	014ff834 	movhi	r5,16352
   14508:	db001615 	stw	r12,88(sp)
   1450c:	15c00044 	addi	r23,r2,1
   14510:	001cf9c0 	call	1cf9c <__divdf3>
   14514:	800d883a 	mov	r6,r16
   14518:	880f883a 	mov	r7,r17
   1451c:	1009883a 	mov	r4,r2
   14520:	180b883a 	mov	r5,r3
   14524:	001e4300 	call	1e430 <__subdf3>
   14528:	d9401017 	ldw	r5,64(sp)
   1452c:	d9000f17 	ldw	r4,60(sp)
   14530:	102b883a 	mov	r21,r2
   14534:	d8c01215 	stw	r3,72(sp)
   14538:	001ed2c0 	call	1ed2c <__fixdfsi>
   1453c:	1009883a 	mov	r4,r2
   14540:	1029883a 	mov	r20,r2
   14544:	001edac0 	call	1edac <__floatsidf>
   14548:	d9000f17 	ldw	r4,60(sp)
   1454c:	d9401017 	ldw	r5,64(sp)
   14550:	100d883a 	mov	r6,r2
   14554:	180f883a 	mov	r7,r3
   14558:	001e4300 	call	1e430 <__subdf3>
   1455c:	1823883a 	mov	r17,r3
   14560:	d8c00717 	ldw	r3,28(sp)
   14564:	d9401217 	ldw	r5,72(sp)
   14568:	a2000c04 	addi	r8,r20,48
   1456c:	1021883a 	mov	r16,r2
   14570:	1a000005 	stb	r8,0(r3)
   14574:	800d883a 	mov	r6,r16
   14578:	880f883a 	mov	r7,r17
   1457c:	a809883a 	mov	r4,r21
   14580:	4029883a 	mov	r20,r8
   14584:	001d9f40 	call	1d9f4 <__gedf2>
   14588:	00841d16 	blt	zero,r2,15600 <_dtoa_r+0x15f4>
   1458c:	800d883a 	mov	r6,r16
   14590:	880f883a 	mov	r7,r17
   14594:	0009883a 	mov	r4,zero
   14598:	014ffc34 	movhi	r5,16368
   1459c:	001e4300 	call	1e430 <__subdf3>
   145a0:	d9401217 	ldw	r5,72(sp)
   145a4:	100d883a 	mov	r6,r2
   145a8:	180f883a 	mov	r7,r3
   145ac:	a809883a 	mov	r4,r21
   145b0:	001d9f40 	call	1d9f4 <__gedf2>
   145b4:	db001617 	ldw	r12,88(sp)
   145b8:	00840e16 	blt	zero,r2,155f4 <_dtoa_r+0x15e8>
   145bc:	00800044 	movi	r2,1
   145c0:	13006b0e 	bge	r2,r12,14770 <_dtoa_r+0x764>
   145c4:	d9000717 	ldw	r4,28(sp)
   145c8:	dd800f15 	stw	r22,60(sp)
   145cc:	dcc01015 	stw	r19,64(sp)
   145d0:	2319883a 	add	r12,r4,r12
   145d4:	dcc01217 	ldw	r19,72(sp)
   145d8:	602d883a 	mov	r22,r12
   145dc:	dc801215 	stw	r18,72(sp)
   145e0:	b825883a 	mov	r18,r23
   145e4:	00000906 	br	1460c <_dtoa_r+0x600>
   145e8:	001e4300 	call	1e430 <__subdf3>
   145ec:	a80d883a 	mov	r6,r21
   145f0:	980f883a 	mov	r7,r19
   145f4:	1009883a 	mov	r4,r2
   145f8:	180b883a 	mov	r5,r3
   145fc:	001dad00 	call	1dad0 <__ledf2>
   14600:	1003e816 	blt	r2,zero,155a4 <_dtoa_r+0x1598>
   14604:	b825883a 	mov	r18,r23
   14608:	bd83e926 	beq	r23,r22,155b0 <_dtoa_r+0x15a4>
   1460c:	a809883a 	mov	r4,r21
   14610:	980b883a 	mov	r5,r19
   14614:	000d883a 	mov	r6,zero
   14618:	01d00934 	movhi	r7,16420
   1461c:	001dbc40 	call	1dbc4 <__muldf3>
   14620:	000d883a 	mov	r6,zero
   14624:	01d00934 	movhi	r7,16420
   14628:	8009883a 	mov	r4,r16
   1462c:	880b883a 	mov	r5,r17
   14630:	102b883a 	mov	r21,r2
   14634:	1827883a 	mov	r19,r3
   14638:	001dbc40 	call	1dbc4 <__muldf3>
   1463c:	180b883a 	mov	r5,r3
   14640:	1009883a 	mov	r4,r2
   14644:	1821883a 	mov	r16,r3
   14648:	1023883a 	mov	r17,r2
   1464c:	001ed2c0 	call	1ed2c <__fixdfsi>
   14650:	1009883a 	mov	r4,r2
   14654:	1029883a 	mov	r20,r2
   14658:	001edac0 	call	1edac <__floatsidf>
   1465c:	8809883a 	mov	r4,r17
   14660:	800b883a 	mov	r5,r16
   14664:	100d883a 	mov	r6,r2
   14668:	180f883a 	mov	r7,r3
   1466c:	001e4300 	call	1e430 <__subdf3>
   14670:	a5000c04 	addi	r20,r20,48
   14674:	a80d883a 	mov	r6,r21
   14678:	980f883a 	mov	r7,r19
   1467c:	1009883a 	mov	r4,r2
   14680:	180b883a 	mov	r5,r3
   14684:	95000005 	stb	r20,0(r18)
   14688:	1021883a 	mov	r16,r2
   1468c:	1823883a 	mov	r17,r3
   14690:	001dad00 	call	1dad0 <__ledf2>
   14694:	bdc00044 	addi	r23,r23,1
   14698:	800d883a 	mov	r6,r16
   1469c:	880f883a 	mov	r7,r17
   146a0:	0009883a 	mov	r4,zero
   146a4:	014ffc34 	movhi	r5,16368
   146a8:	103fcf0e 	bge	r2,zero,145e8 <__alt_data_end+0xfc0145e8>
   146ac:	d8c01317 	ldw	r3,76(sp)
   146b0:	d8c00515 	stw	r3,20(sp)
   146b4:	d9400917 	ldw	r5,36(sp)
   146b8:	e009883a 	mov	r4,fp
   146bc:	0016cf00 	call	16cf0 <_Bfree>
   146c0:	d9000517 	ldw	r4,20(sp)
   146c4:	d9802317 	ldw	r6,140(sp)
   146c8:	d9c02517 	ldw	r7,148(sp)
   146cc:	b8000005 	stb	zero,0(r23)
   146d0:	20800044 	addi	r2,r4,1
   146d4:	30800015 	stw	r2,0(r6)
   146d8:	3802aa26 	beq	r7,zero,15184 <_dtoa_r+0x1178>
   146dc:	3dc00015 	stw	r23,0(r7)
   146e0:	d8800717 	ldw	r2,28(sp)
   146e4:	003e7906 	br	140cc <__alt_data_end+0xfc0140cc>
   146e8:	00800434 	movhi	r2,16
   146ec:	10bfffc4 	addi	r2,r2,-1
   146f0:	88a2703a 	and	r17,r17,r2
   146f4:	883e851e 	bne	r17,zero,1410c <__alt_data_end+0xfc01410c>
   146f8:	008000f4 	movhi	r2,3
   146fc:	10aa9b04 	addi	r2,r2,-21908
   14700:	003e8406 	br	14114 <__alt_data_end+0xfc014114>
   14704:	10c00204 	addi	r3,r2,8
   14708:	003e8706 	br	14128 <__alt_data_end+0xfc014128>
   1470c:	01400434 	movhi	r5,16
   14710:	297fffc4 	addi	r5,r5,-1
   14714:	994a703a 	and	r5,r19,r5
   14718:	9009883a 	mov	r4,r18
   1471c:	843f0044 	addi	r16,r16,-1023
   14720:	294ffc34 	orhi	r5,r5,16368
   14724:	dd800217 	ldw	r22,8(sp)
   14728:	d8001115 	stw	zero,68(sp)
   1472c:	003ea506 	br	141c4 <__alt_data_end+0xfc0141c4>
   14730:	008000f4 	movhi	r2,3
   14734:	10aa8a04 	addi	r2,r2,-21976
   14738:	003e6406 	br	140cc <__alt_data_end+0xfc0140cc>
   1473c:	e0001115 	stw	zero,68(fp)
   14740:	000b883a 	mov	r5,zero
   14744:	e009883a 	mov	r4,fp
   14748:	0016c480 	call	16c48 <_Balloc>
   1474c:	01bfffc4 	movi	r6,-1
   14750:	01c00044 	movi	r7,1
   14754:	d8800715 	stw	r2,28(sp)
   14758:	d9800c15 	stw	r6,48(sp)
   1475c:	e0801015 	stw	r2,64(fp)
   14760:	d8000315 	stw	zero,12(sp)
   14764:	d9c00b15 	stw	r7,44(sp)
   14768:	d9800615 	stw	r6,24(sp)
   1476c:	d8002215 	stw	zero,136(sp)
   14770:	d8800117 	ldw	r2,4(sp)
   14774:	10008916 	blt	r2,zero,1499c <_dtoa_r+0x990>
   14778:	d9000517 	ldw	r4,20(sp)
   1477c:	00c00384 	movi	r3,14
   14780:	19008616 	blt	r3,r4,1499c <_dtoa_r+0x990>
   14784:	200490fa 	slli	r2,r4,3
   14788:	00c000f4 	movhi	r3,3
   1478c:	d9802217 	ldw	r6,136(sp)
   14790:	18eab904 	addi	r3,r3,-21788
   14794:	1885883a 	add	r2,r3,r2
   14798:	14000017 	ldw	r16,0(r2)
   1479c:	14400117 	ldw	r17,4(r2)
   147a0:	30016316 	blt	r6,zero,14d30 <_dtoa_r+0xd24>
   147a4:	800d883a 	mov	r6,r16
   147a8:	880f883a 	mov	r7,r17
   147ac:	9009883a 	mov	r4,r18
   147b0:	980b883a 	mov	r5,r19
   147b4:	001cf9c0 	call	1cf9c <__divdf3>
   147b8:	180b883a 	mov	r5,r3
   147bc:	1009883a 	mov	r4,r2
   147c0:	001ed2c0 	call	1ed2c <__fixdfsi>
   147c4:	1009883a 	mov	r4,r2
   147c8:	102b883a 	mov	r21,r2
   147cc:	001edac0 	call	1edac <__floatsidf>
   147d0:	800d883a 	mov	r6,r16
   147d4:	880f883a 	mov	r7,r17
   147d8:	1009883a 	mov	r4,r2
   147dc:	180b883a 	mov	r5,r3
   147e0:	001dbc40 	call	1dbc4 <__muldf3>
   147e4:	100d883a 	mov	r6,r2
   147e8:	180f883a 	mov	r7,r3
   147ec:	9009883a 	mov	r4,r18
   147f0:	980b883a 	mov	r5,r19
   147f4:	001e4300 	call	1e430 <__subdf3>
   147f8:	d9c00717 	ldw	r7,28(sp)
   147fc:	1009883a 	mov	r4,r2
   14800:	a8800c04 	addi	r2,r21,48
   14804:	38800005 	stb	r2,0(r7)
   14808:	3dc00044 	addi	r23,r7,1
   1480c:	d9c00617 	ldw	r7,24(sp)
   14810:	01800044 	movi	r6,1
   14814:	180b883a 	mov	r5,r3
   14818:	2005883a 	mov	r2,r4
   1481c:	39803826 	beq	r7,r6,14900 <_dtoa_r+0x8f4>
   14820:	000d883a 	mov	r6,zero
   14824:	01d00934 	movhi	r7,16420
   14828:	001dbc40 	call	1dbc4 <__muldf3>
   1482c:	000d883a 	mov	r6,zero
   14830:	000f883a 	mov	r7,zero
   14834:	1009883a 	mov	r4,r2
   14838:	180b883a 	mov	r5,r3
   1483c:	1025883a 	mov	r18,r2
   14840:	1827883a 	mov	r19,r3
   14844:	001d96c0 	call	1d96c <__eqdf2>
   14848:	103f9a26 	beq	r2,zero,146b4 <__alt_data_end+0xfc0146b4>
   1484c:	d9c00617 	ldw	r7,24(sp)
   14850:	d8c00717 	ldw	r3,28(sp)
   14854:	b829883a 	mov	r20,r23
   14858:	38bfffc4 	addi	r2,r7,-1
   1485c:	18ad883a 	add	r22,r3,r2
   14860:	00000a06 	br	1488c <_dtoa_r+0x880>
   14864:	001dbc40 	call	1dbc4 <__muldf3>
   14868:	000d883a 	mov	r6,zero
   1486c:	000f883a 	mov	r7,zero
   14870:	1009883a 	mov	r4,r2
   14874:	180b883a 	mov	r5,r3
   14878:	1025883a 	mov	r18,r2
   1487c:	1827883a 	mov	r19,r3
   14880:	b829883a 	mov	r20,r23
   14884:	001d96c0 	call	1d96c <__eqdf2>
   14888:	103f8a26 	beq	r2,zero,146b4 <__alt_data_end+0xfc0146b4>
   1488c:	800d883a 	mov	r6,r16
   14890:	880f883a 	mov	r7,r17
   14894:	9009883a 	mov	r4,r18
   14898:	980b883a 	mov	r5,r19
   1489c:	001cf9c0 	call	1cf9c <__divdf3>
   148a0:	180b883a 	mov	r5,r3
   148a4:	1009883a 	mov	r4,r2
   148a8:	001ed2c0 	call	1ed2c <__fixdfsi>
   148ac:	1009883a 	mov	r4,r2
   148b0:	102b883a 	mov	r21,r2
   148b4:	001edac0 	call	1edac <__floatsidf>
   148b8:	800d883a 	mov	r6,r16
   148bc:	880f883a 	mov	r7,r17
   148c0:	1009883a 	mov	r4,r2
   148c4:	180b883a 	mov	r5,r3
   148c8:	001dbc40 	call	1dbc4 <__muldf3>
   148cc:	100d883a 	mov	r6,r2
   148d0:	180f883a 	mov	r7,r3
   148d4:	9009883a 	mov	r4,r18
   148d8:	980b883a 	mov	r5,r19
   148dc:	001e4300 	call	1e430 <__subdf3>
   148e0:	aa000c04 	addi	r8,r21,48
   148e4:	a2000005 	stb	r8,0(r20)
   148e8:	000d883a 	mov	r6,zero
   148ec:	01d00934 	movhi	r7,16420
   148f0:	1009883a 	mov	r4,r2
   148f4:	180b883a 	mov	r5,r3
   148f8:	a5c00044 	addi	r23,r20,1
   148fc:	b53fd91e 	bne	r22,r20,14864 <__alt_data_end+0xfc014864>
   14900:	100d883a 	mov	r6,r2
   14904:	180f883a 	mov	r7,r3
   14908:	1009883a 	mov	r4,r2
   1490c:	180b883a 	mov	r5,r3
   14910:	001c6f00 	call	1c6f0 <__adddf3>
   14914:	100d883a 	mov	r6,r2
   14918:	180f883a 	mov	r7,r3
   1491c:	8009883a 	mov	r4,r16
   14920:	880b883a 	mov	r5,r17
   14924:	1027883a 	mov	r19,r2
   14928:	1825883a 	mov	r18,r3
   1492c:	001dad00 	call	1dad0 <__ledf2>
   14930:	10000816 	blt	r2,zero,14954 <_dtoa_r+0x948>
   14934:	980d883a 	mov	r6,r19
   14938:	900f883a 	mov	r7,r18
   1493c:	8009883a 	mov	r4,r16
   14940:	880b883a 	mov	r5,r17
   14944:	001d96c0 	call	1d96c <__eqdf2>
   14948:	103f5a1e 	bne	r2,zero,146b4 <__alt_data_end+0xfc0146b4>
   1494c:	ad40004c 	andi	r21,r21,1
   14950:	a83f5826 	beq	r21,zero,146b4 <__alt_data_end+0xfc0146b4>
   14954:	bd3fffc3 	ldbu	r20,-1(r23)
   14958:	b8bfffc4 	addi	r2,r23,-1
   1495c:	1007883a 	mov	r3,r2
   14960:	01400e44 	movi	r5,57
   14964:	d9800717 	ldw	r6,28(sp)
   14968:	00000506 	br	14980 <_dtoa_r+0x974>
   1496c:	18ffffc4 	addi	r3,r3,-1
   14970:	11824726 	beq	r2,r6,15290 <_dtoa_r+0x1284>
   14974:	1d000003 	ldbu	r20,0(r3)
   14978:	102f883a 	mov	r23,r2
   1497c:	10bfffc4 	addi	r2,r2,-1
   14980:	a1003fcc 	andi	r4,r20,255
   14984:	2100201c 	xori	r4,r4,128
   14988:	213fe004 	addi	r4,r4,-128
   1498c:	217ff726 	beq	r4,r5,1496c <__alt_data_end+0xfc01496c>
   14990:	a2000044 	addi	r8,r20,1
   14994:	12000005 	stb	r8,0(r2)
   14998:	003f4606 	br	146b4 <__alt_data_end+0xfc0146b4>
   1499c:	d9000b17 	ldw	r4,44(sp)
   149a0:	2000c826 	beq	r4,zero,14cc4 <_dtoa_r+0xcb8>
   149a4:	d9800317 	ldw	r6,12(sp)
   149a8:	00c00044 	movi	r3,1
   149ac:	1980f90e 	bge	r3,r6,14d94 <_dtoa_r+0xd88>
   149b0:	d8800617 	ldw	r2,24(sp)
   149b4:	d8c00a17 	ldw	r3,40(sp)
   149b8:	157fffc4 	addi	r21,r2,-1
   149bc:	1d41f316 	blt	r3,r21,1518c <_dtoa_r+0x1180>
   149c0:	1d6bc83a 	sub	r21,r3,r21
   149c4:	d9c00617 	ldw	r7,24(sp)
   149c8:	3802aa16 	blt	r7,zero,15474 <_dtoa_r+0x1468>
   149cc:	dd000817 	ldw	r20,32(sp)
   149d0:	d8800617 	ldw	r2,24(sp)
   149d4:	d8c00817 	ldw	r3,32(sp)
   149d8:	01400044 	movi	r5,1
   149dc:	e009883a 	mov	r4,fp
   149e0:	1887883a 	add	r3,r3,r2
   149e4:	d8c00815 	stw	r3,32(sp)
   149e8:	b0ad883a 	add	r22,r22,r2
   149ec:	001707c0 	call	1707c <__i2b>
   149f0:	1023883a 	mov	r17,r2
   149f4:	a0000826 	beq	r20,zero,14a18 <_dtoa_r+0xa0c>
   149f8:	0580070e 	bge	zero,r22,14a18 <_dtoa_r+0xa0c>
   149fc:	a005883a 	mov	r2,r20
   14a00:	b500b916 	blt	r22,r20,14ce8 <_dtoa_r+0xcdc>
   14a04:	d9000817 	ldw	r4,32(sp)
   14a08:	a0a9c83a 	sub	r20,r20,r2
   14a0c:	b0adc83a 	sub	r22,r22,r2
   14a10:	2089c83a 	sub	r4,r4,r2
   14a14:	d9000815 	stw	r4,32(sp)
   14a18:	d9800a17 	ldw	r6,40(sp)
   14a1c:	0181810e 	bge	zero,r6,15024 <_dtoa_r+0x1018>
   14a20:	d9c00b17 	ldw	r7,44(sp)
   14a24:	3800b326 	beq	r7,zero,14cf4 <_dtoa_r+0xce8>
   14a28:	a800b226 	beq	r21,zero,14cf4 <_dtoa_r+0xce8>
   14a2c:	880b883a 	mov	r5,r17
   14a30:	a80d883a 	mov	r6,r21
   14a34:	e009883a 	mov	r4,fp
   14a38:	00173440 	call	17344 <__pow5mult>
   14a3c:	d9800917 	ldw	r6,36(sp)
   14a40:	100b883a 	mov	r5,r2
   14a44:	e009883a 	mov	r4,fp
   14a48:	1023883a 	mov	r17,r2
   14a4c:	00170b80 	call	170b8 <__multiply>
   14a50:	1021883a 	mov	r16,r2
   14a54:	d8800a17 	ldw	r2,40(sp)
   14a58:	d9400917 	ldw	r5,36(sp)
   14a5c:	e009883a 	mov	r4,fp
   14a60:	1545c83a 	sub	r2,r2,r21
   14a64:	d8800a15 	stw	r2,40(sp)
   14a68:	0016cf00 	call	16cf0 <_Bfree>
   14a6c:	d8c00a17 	ldw	r3,40(sp)
   14a70:	18009f1e 	bne	r3,zero,14cf0 <_dtoa_r+0xce4>
   14a74:	05c00044 	movi	r23,1
   14a78:	e009883a 	mov	r4,fp
   14a7c:	b80b883a 	mov	r5,r23
   14a80:	001707c0 	call	1707c <__i2b>
   14a84:	d9000d17 	ldw	r4,52(sp)
   14a88:	102b883a 	mov	r21,r2
   14a8c:	2000ce26 	beq	r4,zero,14dc8 <_dtoa_r+0xdbc>
   14a90:	200d883a 	mov	r6,r4
   14a94:	100b883a 	mov	r5,r2
   14a98:	e009883a 	mov	r4,fp
   14a9c:	00173440 	call	17344 <__pow5mult>
   14aa0:	d9800317 	ldw	r6,12(sp)
   14aa4:	102b883a 	mov	r21,r2
   14aa8:	b981810e 	bge	r23,r6,150b0 <_dtoa_r+0x10a4>
   14aac:	0027883a 	mov	r19,zero
   14ab0:	a8800417 	ldw	r2,16(r21)
   14ab4:	05c00804 	movi	r23,32
   14ab8:	10800104 	addi	r2,r2,4
   14abc:	1085883a 	add	r2,r2,r2
   14ac0:	1085883a 	add	r2,r2,r2
   14ac4:	a885883a 	add	r2,r21,r2
   14ac8:	11000017 	ldw	r4,0(r2)
   14acc:	0016f640 	call	16f64 <__hi0bits>
   14ad0:	b885c83a 	sub	r2,r23,r2
   14ad4:	1585883a 	add	r2,r2,r22
   14ad8:	108007cc 	andi	r2,r2,31
   14adc:	1000b326 	beq	r2,zero,14dac <_dtoa_r+0xda0>
   14ae0:	00c00804 	movi	r3,32
   14ae4:	1887c83a 	sub	r3,r3,r2
   14ae8:	01000104 	movi	r4,4
   14aec:	20c2cd0e 	bge	r4,r3,15624 <_dtoa_r+0x1618>
   14af0:	00c00704 	movi	r3,28
   14af4:	1885c83a 	sub	r2,r3,r2
   14af8:	d8c00817 	ldw	r3,32(sp)
   14afc:	a0a9883a 	add	r20,r20,r2
   14b00:	b0ad883a 	add	r22,r22,r2
   14b04:	1887883a 	add	r3,r3,r2
   14b08:	d8c00815 	stw	r3,32(sp)
   14b0c:	d9800817 	ldw	r6,32(sp)
   14b10:	0180040e 	bge	zero,r6,14b24 <_dtoa_r+0xb18>
   14b14:	800b883a 	mov	r5,r16
   14b18:	e009883a 	mov	r4,fp
   14b1c:	00174840 	call	17484 <__lshift>
   14b20:	1021883a 	mov	r16,r2
   14b24:	0580050e 	bge	zero,r22,14b3c <_dtoa_r+0xb30>
   14b28:	a80b883a 	mov	r5,r21
   14b2c:	b00d883a 	mov	r6,r22
   14b30:	e009883a 	mov	r4,fp
   14b34:	00174840 	call	17484 <__lshift>
   14b38:	102b883a 	mov	r21,r2
   14b3c:	d9c00e17 	ldw	r7,56(sp)
   14b40:	3801211e 	bne	r7,zero,14fc8 <_dtoa_r+0xfbc>
   14b44:	d9800617 	ldw	r6,24(sp)
   14b48:	0181380e 	bge	zero,r6,1502c <_dtoa_r+0x1020>
   14b4c:	d8c00b17 	ldw	r3,44(sp)
   14b50:	1800ab1e 	bne	r3,zero,14e00 <_dtoa_r+0xdf4>
   14b54:	dc800717 	ldw	r18,28(sp)
   14b58:	dcc00617 	ldw	r19,24(sp)
   14b5c:	9029883a 	mov	r20,r18
   14b60:	00000206 	br	14b6c <_dtoa_r+0xb60>
   14b64:	0016d180 	call	16d18 <__multadd>
   14b68:	1021883a 	mov	r16,r2
   14b6c:	a80b883a 	mov	r5,r21
   14b70:	8009883a 	mov	r4,r16
   14b74:	0013de40 	call	13de4 <quorem>
   14b78:	10800c04 	addi	r2,r2,48
   14b7c:	90800005 	stb	r2,0(r18)
   14b80:	94800044 	addi	r18,r18,1
   14b84:	9507c83a 	sub	r3,r18,r20
   14b88:	000f883a 	mov	r7,zero
   14b8c:	01800284 	movi	r6,10
   14b90:	800b883a 	mov	r5,r16
   14b94:	e009883a 	mov	r4,fp
   14b98:	1cfff216 	blt	r3,r19,14b64 <__alt_data_end+0xfc014b64>
   14b9c:	1011883a 	mov	r8,r2
   14ba0:	d8800617 	ldw	r2,24(sp)
   14ba4:	0082370e 	bge	zero,r2,15484 <_dtoa_r+0x1478>
   14ba8:	d9000717 	ldw	r4,28(sp)
   14bac:	0025883a 	mov	r18,zero
   14bb0:	20af883a 	add	r23,r4,r2
   14bb4:	01800044 	movi	r6,1
   14bb8:	800b883a 	mov	r5,r16
   14bbc:	e009883a 	mov	r4,fp
   14bc0:	da001715 	stw	r8,92(sp)
   14bc4:	00174840 	call	17484 <__lshift>
   14bc8:	a80b883a 	mov	r5,r21
   14bcc:	1009883a 	mov	r4,r2
   14bd0:	d8800915 	stw	r2,36(sp)
   14bd4:	00175cc0 	call	175cc <__mcmp>
   14bd8:	da001717 	ldw	r8,92(sp)
   14bdc:	0081800e 	bge	zero,r2,151e0 <_dtoa_r+0x11d4>
   14be0:	b93fffc3 	ldbu	r4,-1(r23)
   14be4:	b8bfffc4 	addi	r2,r23,-1
   14be8:	1007883a 	mov	r3,r2
   14bec:	01800e44 	movi	r6,57
   14bf0:	d9c00717 	ldw	r7,28(sp)
   14bf4:	00000506 	br	14c0c <_dtoa_r+0xc00>
   14bf8:	18ffffc4 	addi	r3,r3,-1
   14bfc:	11c12326 	beq	r2,r7,1508c <_dtoa_r+0x1080>
   14c00:	19000003 	ldbu	r4,0(r3)
   14c04:	102f883a 	mov	r23,r2
   14c08:	10bfffc4 	addi	r2,r2,-1
   14c0c:	21403fcc 	andi	r5,r4,255
   14c10:	2940201c 	xori	r5,r5,128
   14c14:	297fe004 	addi	r5,r5,-128
   14c18:	29bff726 	beq	r5,r6,14bf8 <__alt_data_end+0xfc014bf8>
   14c1c:	21000044 	addi	r4,r4,1
   14c20:	11000005 	stb	r4,0(r2)
   14c24:	a80b883a 	mov	r5,r21
   14c28:	e009883a 	mov	r4,fp
   14c2c:	0016cf00 	call	16cf0 <_Bfree>
   14c30:	883ea026 	beq	r17,zero,146b4 <__alt_data_end+0xfc0146b4>
   14c34:	90000426 	beq	r18,zero,14c48 <_dtoa_r+0xc3c>
   14c38:	94400326 	beq	r18,r17,14c48 <_dtoa_r+0xc3c>
   14c3c:	900b883a 	mov	r5,r18
   14c40:	e009883a 	mov	r4,fp
   14c44:	0016cf00 	call	16cf0 <_Bfree>
   14c48:	880b883a 	mov	r5,r17
   14c4c:	e009883a 	mov	r4,fp
   14c50:	0016cf00 	call	16cf0 <_Bfree>
   14c54:	003e9706 	br	146b4 <__alt_data_end+0xfc0146b4>
   14c58:	01800044 	movi	r6,1
   14c5c:	d9800e15 	stw	r6,56(sp)
   14c60:	003d9606 	br	142bc <__alt_data_end+0xfc0142bc>
   14c64:	d8800817 	ldw	r2,32(sp)
   14c68:	d8c00517 	ldw	r3,20(sp)
   14c6c:	d8000d15 	stw	zero,52(sp)
   14c70:	10c5c83a 	sub	r2,r2,r3
   14c74:	00c9c83a 	sub	r4,zero,r3
   14c78:	d8800815 	stw	r2,32(sp)
   14c7c:	d9000a15 	stw	r4,40(sp)
   14c80:	003d9706 	br	142e0 <__alt_data_end+0xfc0142e0>
   14c84:	05adc83a 	sub	r22,zero,r22
   14c88:	dd800815 	stw	r22,32(sp)
   14c8c:	002d883a 	mov	r22,zero
   14c90:	003d8e06 	br	142cc <__alt_data_end+0xfc0142cc>
   14c94:	d9000517 	ldw	r4,20(sp)
   14c98:	001edac0 	call	1edac <__floatsidf>
   14c9c:	100d883a 	mov	r6,r2
   14ca0:	180f883a 	mov	r7,r3
   14ca4:	a009883a 	mov	r4,r20
   14ca8:	880b883a 	mov	r5,r17
   14cac:	001d96c0 	call	1d96c <__eqdf2>
   14cb0:	103d7126 	beq	r2,zero,14278 <__alt_data_end+0xfc014278>
   14cb4:	d9c00517 	ldw	r7,20(sp)
   14cb8:	39ffffc4 	addi	r7,r7,-1
   14cbc:	d9c00515 	stw	r7,20(sp)
   14cc0:	003d6d06 	br	14278 <__alt_data_end+0xfc014278>
   14cc4:	dd400a17 	ldw	r21,40(sp)
   14cc8:	dd000817 	ldw	r20,32(sp)
   14ccc:	0023883a 	mov	r17,zero
   14cd0:	003f4806 	br	149f4 <__alt_data_end+0xfc0149f4>
   14cd4:	10e3c83a 	sub	r17,r2,r3
   14cd8:	9448983a 	sll	r4,r18,r17
   14cdc:	003d3206 	br	141a8 <__alt_data_end+0xfc0141a8>
   14ce0:	d8000e15 	stw	zero,56(sp)
   14ce4:	003d7506 	br	142bc <__alt_data_end+0xfc0142bc>
   14ce8:	b005883a 	mov	r2,r22
   14cec:	003f4506 	br	14a04 <__alt_data_end+0xfc014a04>
   14cf0:	dc000915 	stw	r16,36(sp)
   14cf4:	d9800a17 	ldw	r6,40(sp)
   14cf8:	d9400917 	ldw	r5,36(sp)
   14cfc:	e009883a 	mov	r4,fp
   14d00:	00173440 	call	17344 <__pow5mult>
   14d04:	1021883a 	mov	r16,r2
   14d08:	003f5a06 	br	14a74 <__alt_data_end+0xfc014a74>
   14d0c:	01c00044 	movi	r7,1
   14d10:	d9c00b15 	stw	r7,44(sp)
   14d14:	d8802217 	ldw	r2,136(sp)
   14d18:	0081280e 	bge	zero,r2,151bc <_dtoa_r+0x11b0>
   14d1c:	100d883a 	mov	r6,r2
   14d20:	1021883a 	mov	r16,r2
   14d24:	d8800c15 	stw	r2,48(sp)
   14d28:	d8800615 	stw	r2,24(sp)
   14d2c:	003d8806 	br	14350 <__alt_data_end+0xfc014350>
   14d30:	d8800617 	ldw	r2,24(sp)
   14d34:	00be9b16 	blt	zero,r2,147a4 <__alt_data_end+0xfc0147a4>
   14d38:	10010f1e 	bne	r2,zero,15178 <_dtoa_r+0x116c>
   14d3c:	880b883a 	mov	r5,r17
   14d40:	000d883a 	mov	r6,zero
   14d44:	01d00534 	movhi	r7,16404
   14d48:	8009883a 	mov	r4,r16
   14d4c:	001dbc40 	call	1dbc4 <__muldf3>
   14d50:	900d883a 	mov	r6,r18
   14d54:	980f883a 	mov	r7,r19
   14d58:	1009883a 	mov	r4,r2
   14d5c:	180b883a 	mov	r5,r3
   14d60:	001d9f40 	call	1d9f4 <__gedf2>
   14d64:	002b883a 	mov	r21,zero
   14d68:	0023883a 	mov	r17,zero
   14d6c:	1000bf16 	blt	r2,zero,1506c <_dtoa_r+0x1060>
   14d70:	d9802217 	ldw	r6,136(sp)
   14d74:	ddc00717 	ldw	r23,28(sp)
   14d78:	018c303a 	nor	r6,zero,r6
   14d7c:	d9800515 	stw	r6,20(sp)
   14d80:	a80b883a 	mov	r5,r21
   14d84:	e009883a 	mov	r4,fp
   14d88:	0016cf00 	call	16cf0 <_Bfree>
   14d8c:	883e4926 	beq	r17,zero,146b4 <__alt_data_end+0xfc0146b4>
   14d90:	003fad06 	br	14c48 <__alt_data_end+0xfc014c48>
   14d94:	d9c01117 	ldw	r7,68(sp)
   14d98:	3801bc26 	beq	r7,zero,1548c <_dtoa_r+0x1480>
   14d9c:	10810cc4 	addi	r2,r2,1075
   14da0:	dd400a17 	ldw	r21,40(sp)
   14da4:	dd000817 	ldw	r20,32(sp)
   14da8:	003f0a06 	br	149d4 <__alt_data_end+0xfc0149d4>
   14dac:	00800704 	movi	r2,28
   14db0:	d9000817 	ldw	r4,32(sp)
   14db4:	a0a9883a 	add	r20,r20,r2
   14db8:	b0ad883a 	add	r22,r22,r2
   14dbc:	2089883a 	add	r4,r4,r2
   14dc0:	d9000815 	stw	r4,32(sp)
   14dc4:	003f5106 	br	14b0c <__alt_data_end+0xfc014b0c>
   14dc8:	d8c00317 	ldw	r3,12(sp)
   14dcc:	b8c1fc0e 	bge	r23,r3,155c0 <_dtoa_r+0x15b4>
   14dd0:	0027883a 	mov	r19,zero
   14dd4:	b805883a 	mov	r2,r23
   14dd8:	003f3e06 	br	14ad4 <__alt_data_end+0xfc014ad4>
   14ddc:	880b883a 	mov	r5,r17
   14de0:	e009883a 	mov	r4,fp
   14de4:	000f883a 	mov	r7,zero
   14de8:	01800284 	movi	r6,10
   14dec:	0016d180 	call	16d18 <__multadd>
   14df0:	d9000c17 	ldw	r4,48(sp)
   14df4:	1023883a 	mov	r17,r2
   14df8:	0102040e 	bge	zero,r4,1560c <_dtoa_r+0x1600>
   14dfc:	d9000615 	stw	r4,24(sp)
   14e00:	0500050e 	bge	zero,r20,14e18 <_dtoa_r+0xe0c>
   14e04:	880b883a 	mov	r5,r17
   14e08:	a00d883a 	mov	r6,r20
   14e0c:	e009883a 	mov	r4,fp
   14e10:	00174840 	call	17484 <__lshift>
   14e14:	1023883a 	mov	r17,r2
   14e18:	9801241e 	bne	r19,zero,152ac <_dtoa_r+0x12a0>
   14e1c:	8829883a 	mov	r20,r17
   14e20:	d9000617 	ldw	r4,24(sp)
   14e24:	dcc00717 	ldw	r19,28(sp)
   14e28:	9480004c 	andi	r18,r18,1
   14e2c:	20bfffc4 	addi	r2,r4,-1
   14e30:	9885883a 	add	r2,r19,r2
   14e34:	d8800415 	stw	r2,16(sp)
   14e38:	dc800615 	stw	r18,24(sp)
   14e3c:	a80b883a 	mov	r5,r21
   14e40:	8009883a 	mov	r4,r16
   14e44:	0013de40 	call	13de4 <quorem>
   14e48:	880b883a 	mov	r5,r17
   14e4c:	8009883a 	mov	r4,r16
   14e50:	102f883a 	mov	r23,r2
   14e54:	00175cc0 	call	175cc <__mcmp>
   14e58:	a80b883a 	mov	r5,r21
   14e5c:	a00d883a 	mov	r6,r20
   14e60:	e009883a 	mov	r4,fp
   14e64:	102d883a 	mov	r22,r2
   14e68:	001762c0 	call	1762c <__mdiff>
   14e6c:	1007883a 	mov	r3,r2
   14e70:	10800317 	ldw	r2,12(r2)
   14e74:	bc800c04 	addi	r18,r23,48
   14e78:	180b883a 	mov	r5,r3
   14e7c:	10004e1e 	bne	r2,zero,14fb8 <_dtoa_r+0xfac>
   14e80:	8009883a 	mov	r4,r16
   14e84:	d8c01615 	stw	r3,88(sp)
   14e88:	00175cc0 	call	175cc <__mcmp>
   14e8c:	d8c01617 	ldw	r3,88(sp)
   14e90:	e009883a 	mov	r4,fp
   14e94:	d8801615 	stw	r2,88(sp)
   14e98:	180b883a 	mov	r5,r3
   14e9c:	0016cf00 	call	16cf0 <_Bfree>
   14ea0:	d8801617 	ldw	r2,88(sp)
   14ea4:	1000041e 	bne	r2,zero,14eb8 <_dtoa_r+0xeac>
   14ea8:	d9800317 	ldw	r6,12(sp)
   14eac:	3000021e 	bne	r6,zero,14eb8 <_dtoa_r+0xeac>
   14eb0:	d8c00617 	ldw	r3,24(sp)
   14eb4:	18003726 	beq	r3,zero,14f94 <_dtoa_r+0xf88>
   14eb8:	b0002016 	blt	r22,zero,14f3c <_dtoa_r+0xf30>
   14ebc:	b000041e 	bne	r22,zero,14ed0 <_dtoa_r+0xec4>
   14ec0:	d9000317 	ldw	r4,12(sp)
   14ec4:	2000021e 	bne	r4,zero,14ed0 <_dtoa_r+0xec4>
   14ec8:	d8c00617 	ldw	r3,24(sp)
   14ecc:	18001b26 	beq	r3,zero,14f3c <_dtoa_r+0xf30>
   14ed0:	00810716 	blt	zero,r2,152f0 <_dtoa_r+0x12e4>
   14ed4:	d8c00417 	ldw	r3,16(sp)
   14ed8:	9d800044 	addi	r22,r19,1
   14edc:	9c800005 	stb	r18,0(r19)
   14ee0:	b02f883a 	mov	r23,r22
   14ee4:	98c10626 	beq	r19,r3,15300 <_dtoa_r+0x12f4>
   14ee8:	800b883a 	mov	r5,r16
   14eec:	000f883a 	mov	r7,zero
   14ef0:	01800284 	movi	r6,10
   14ef4:	e009883a 	mov	r4,fp
   14ef8:	0016d180 	call	16d18 <__multadd>
   14efc:	1021883a 	mov	r16,r2
   14f00:	000f883a 	mov	r7,zero
   14f04:	01800284 	movi	r6,10
   14f08:	880b883a 	mov	r5,r17
   14f0c:	e009883a 	mov	r4,fp
   14f10:	8d002526 	beq	r17,r20,14fa8 <_dtoa_r+0xf9c>
   14f14:	0016d180 	call	16d18 <__multadd>
   14f18:	a00b883a 	mov	r5,r20
   14f1c:	000f883a 	mov	r7,zero
   14f20:	01800284 	movi	r6,10
   14f24:	e009883a 	mov	r4,fp
   14f28:	1023883a 	mov	r17,r2
   14f2c:	0016d180 	call	16d18 <__multadd>
   14f30:	1029883a 	mov	r20,r2
   14f34:	b027883a 	mov	r19,r22
   14f38:	003fc006 	br	14e3c <__alt_data_end+0xfc014e3c>
   14f3c:	9011883a 	mov	r8,r18
   14f40:	00800e0e 	bge	zero,r2,14f7c <_dtoa_r+0xf70>
   14f44:	800b883a 	mov	r5,r16
   14f48:	01800044 	movi	r6,1
   14f4c:	e009883a 	mov	r4,fp
   14f50:	da001715 	stw	r8,92(sp)
   14f54:	00174840 	call	17484 <__lshift>
   14f58:	a80b883a 	mov	r5,r21
   14f5c:	1009883a 	mov	r4,r2
   14f60:	1021883a 	mov	r16,r2
   14f64:	00175cc0 	call	175cc <__mcmp>
   14f68:	da001717 	ldw	r8,92(sp)
   14f6c:	0081960e 	bge	zero,r2,155c8 <_dtoa_r+0x15bc>
   14f70:	00800e44 	movi	r2,57
   14f74:	40817026 	beq	r8,r2,15538 <_dtoa_r+0x152c>
   14f78:	ba000c44 	addi	r8,r23,49
   14f7c:	8825883a 	mov	r18,r17
   14f80:	9dc00044 	addi	r23,r19,1
   14f84:	9a000005 	stb	r8,0(r19)
   14f88:	a023883a 	mov	r17,r20
   14f8c:	dc000915 	stw	r16,36(sp)
   14f90:	003f2406 	br	14c24 <__alt_data_end+0xfc014c24>
   14f94:	00800e44 	movi	r2,57
   14f98:	9011883a 	mov	r8,r18
   14f9c:	90816626 	beq	r18,r2,15538 <_dtoa_r+0x152c>
   14fa0:	05bff516 	blt	zero,r22,14f78 <__alt_data_end+0xfc014f78>
   14fa4:	003ff506 	br	14f7c <__alt_data_end+0xfc014f7c>
   14fa8:	0016d180 	call	16d18 <__multadd>
   14fac:	1023883a 	mov	r17,r2
   14fb0:	1029883a 	mov	r20,r2
   14fb4:	003fdf06 	br	14f34 <__alt_data_end+0xfc014f34>
   14fb8:	e009883a 	mov	r4,fp
   14fbc:	0016cf00 	call	16cf0 <_Bfree>
   14fc0:	00800044 	movi	r2,1
   14fc4:	003fbc06 	br	14eb8 <__alt_data_end+0xfc014eb8>
   14fc8:	a80b883a 	mov	r5,r21
   14fcc:	8009883a 	mov	r4,r16
   14fd0:	00175cc0 	call	175cc <__mcmp>
   14fd4:	103edb0e 	bge	r2,zero,14b44 <__alt_data_end+0xfc014b44>
   14fd8:	800b883a 	mov	r5,r16
   14fdc:	000f883a 	mov	r7,zero
   14fe0:	01800284 	movi	r6,10
   14fe4:	e009883a 	mov	r4,fp
   14fe8:	0016d180 	call	16d18 <__multadd>
   14fec:	1021883a 	mov	r16,r2
   14ff0:	d8800517 	ldw	r2,20(sp)
   14ff4:	d8c00b17 	ldw	r3,44(sp)
   14ff8:	10bfffc4 	addi	r2,r2,-1
   14ffc:	d8800515 	stw	r2,20(sp)
   15000:	183f761e 	bne	r3,zero,14ddc <__alt_data_end+0xfc014ddc>
   15004:	d9000c17 	ldw	r4,48(sp)
   15008:	0101730e 	bge	zero,r4,155d8 <_dtoa_r+0x15cc>
   1500c:	d9000615 	stw	r4,24(sp)
   15010:	003ed006 	br	14b54 <__alt_data_end+0xfc014b54>
   15014:	00800084 	movi	r2,2
   15018:	3081861e 	bne	r6,r2,15634 <_dtoa_r+0x1628>
   1501c:	d8000b15 	stw	zero,44(sp)
   15020:	003f3c06 	br	14d14 <__alt_data_end+0xfc014d14>
   15024:	dc000917 	ldw	r16,36(sp)
   15028:	003e9206 	br	14a74 <__alt_data_end+0xfc014a74>
   1502c:	d9c00317 	ldw	r7,12(sp)
   15030:	00800084 	movi	r2,2
   15034:	11fec50e 	bge	r2,r7,14b4c <__alt_data_end+0xfc014b4c>
   15038:	d9000617 	ldw	r4,24(sp)
   1503c:	20013c1e 	bne	r4,zero,15530 <_dtoa_r+0x1524>
   15040:	a80b883a 	mov	r5,r21
   15044:	000f883a 	mov	r7,zero
   15048:	01800144 	movi	r6,5
   1504c:	e009883a 	mov	r4,fp
   15050:	0016d180 	call	16d18 <__multadd>
   15054:	100b883a 	mov	r5,r2
   15058:	8009883a 	mov	r4,r16
   1505c:	102b883a 	mov	r21,r2
   15060:	00175cc0 	call	175cc <__mcmp>
   15064:	dc000915 	stw	r16,36(sp)
   15068:	00bf410e 	bge	zero,r2,14d70 <__alt_data_end+0xfc014d70>
   1506c:	d9c00717 	ldw	r7,28(sp)
   15070:	00800c44 	movi	r2,49
   15074:	38800005 	stb	r2,0(r7)
   15078:	d8800517 	ldw	r2,20(sp)
   1507c:	3dc00044 	addi	r23,r7,1
   15080:	10800044 	addi	r2,r2,1
   15084:	d8800515 	stw	r2,20(sp)
   15088:	003f3d06 	br	14d80 <__alt_data_end+0xfc014d80>
   1508c:	d9800517 	ldw	r6,20(sp)
   15090:	d9c00717 	ldw	r7,28(sp)
   15094:	00800c44 	movi	r2,49
   15098:	31800044 	addi	r6,r6,1
   1509c:	d9800515 	stw	r6,20(sp)
   150a0:	38800005 	stb	r2,0(r7)
   150a4:	003edf06 	br	14c24 <__alt_data_end+0xfc014c24>
   150a8:	d8000b15 	stw	zero,44(sp)
   150ac:	003c9f06 	br	1432c <__alt_data_end+0xfc01432c>
   150b0:	903e7e1e 	bne	r18,zero,14aac <__alt_data_end+0xfc014aac>
   150b4:	00800434 	movhi	r2,16
   150b8:	10bfffc4 	addi	r2,r2,-1
   150bc:	9884703a 	and	r2,r19,r2
   150c0:	1000ea1e 	bne	r2,zero,1546c <_dtoa_r+0x1460>
   150c4:	9cdffc2c 	andhi	r19,r19,32752
   150c8:	9800e826 	beq	r19,zero,1546c <_dtoa_r+0x1460>
   150cc:	d9c00817 	ldw	r7,32(sp)
   150d0:	b5800044 	addi	r22,r22,1
   150d4:	04c00044 	movi	r19,1
   150d8:	39c00044 	addi	r7,r7,1
   150dc:	d9c00815 	stw	r7,32(sp)
   150e0:	d8800d17 	ldw	r2,52(sp)
   150e4:	103e721e 	bne	r2,zero,14ab0 <__alt_data_end+0xfc014ab0>
   150e8:	00800044 	movi	r2,1
   150ec:	003e7906 	br	14ad4 <__alt_data_end+0xfc014ad4>
   150f0:	8009883a 	mov	r4,r16
   150f4:	001edac0 	call	1edac <__floatsidf>
   150f8:	d9800f17 	ldw	r6,60(sp)
   150fc:	d9c01017 	ldw	r7,64(sp)
   15100:	1009883a 	mov	r4,r2
   15104:	180b883a 	mov	r5,r3
   15108:	001dbc40 	call	1dbc4 <__muldf3>
   1510c:	000d883a 	mov	r6,zero
   15110:	01d00734 	movhi	r7,16412
   15114:	1009883a 	mov	r4,r2
   15118:	180b883a 	mov	r5,r3
   1511c:	001c6f00 	call	1c6f0 <__adddf3>
   15120:	047f3034 	movhi	r17,64704
   15124:	1021883a 	mov	r16,r2
   15128:	1c63883a 	add	r17,r3,r17
   1512c:	d9000f17 	ldw	r4,60(sp)
   15130:	d9401017 	ldw	r5,64(sp)
   15134:	000d883a 	mov	r6,zero
   15138:	01d00534 	movhi	r7,16404
   1513c:	001e4300 	call	1e430 <__subdf3>
   15140:	800d883a 	mov	r6,r16
   15144:	880f883a 	mov	r7,r17
   15148:	1009883a 	mov	r4,r2
   1514c:	180b883a 	mov	r5,r3
   15150:	102b883a 	mov	r21,r2
   15154:	1829883a 	mov	r20,r3
   15158:	001d9f40 	call	1d9f4 <__gedf2>
   1515c:	00806c16 	blt	zero,r2,15310 <_dtoa_r+0x1304>
   15160:	89e0003c 	xorhi	r7,r17,32768
   15164:	800d883a 	mov	r6,r16
   15168:	a809883a 	mov	r4,r21
   1516c:	a00b883a 	mov	r5,r20
   15170:	001dad00 	call	1dad0 <__ledf2>
   15174:	103d7e0e 	bge	r2,zero,14770 <__alt_data_end+0xfc014770>
   15178:	002b883a 	mov	r21,zero
   1517c:	0023883a 	mov	r17,zero
   15180:	003efb06 	br	14d70 <__alt_data_end+0xfc014d70>
   15184:	d8800717 	ldw	r2,28(sp)
   15188:	003bd006 	br	140cc <__alt_data_end+0xfc0140cc>
   1518c:	d9000a17 	ldw	r4,40(sp)
   15190:	d9800d17 	ldw	r6,52(sp)
   15194:	dd400a15 	stw	r21,40(sp)
   15198:	a905c83a 	sub	r2,r21,r4
   1519c:	308d883a 	add	r6,r6,r2
   151a0:	d9800d15 	stw	r6,52(sp)
   151a4:	002b883a 	mov	r21,zero
   151a8:	003e0606 	br	149c4 <__alt_data_end+0xfc0149c4>
   151ac:	9023883a 	mov	r17,r18
   151b0:	9829883a 	mov	r20,r19
   151b4:	04000084 	movi	r16,2
   151b8:	003c9206 	br	14404 <__alt_data_end+0xfc014404>
   151bc:	04000044 	movi	r16,1
   151c0:	dc000c15 	stw	r16,48(sp)
   151c4:	dc000615 	stw	r16,24(sp)
   151c8:	dc002215 	stw	r16,136(sp)
   151cc:	e0001115 	stw	zero,68(fp)
   151d0:	000b883a 	mov	r5,zero
   151d4:	003c6906 	br	1437c <__alt_data_end+0xfc01437c>
   151d8:	3021883a 	mov	r16,r6
   151dc:	003ffb06 	br	151cc <__alt_data_end+0xfc0151cc>
   151e0:	1000021e 	bne	r2,zero,151ec <_dtoa_r+0x11e0>
   151e4:	4200004c 	andi	r8,r8,1
   151e8:	403e7d1e 	bne	r8,zero,14be0 <__alt_data_end+0xfc014be0>
   151ec:	01000c04 	movi	r4,48
   151f0:	00000106 	br	151f8 <_dtoa_r+0x11ec>
   151f4:	102f883a 	mov	r23,r2
   151f8:	b8bfffc4 	addi	r2,r23,-1
   151fc:	10c00007 	ldb	r3,0(r2)
   15200:	193ffc26 	beq	r3,r4,151f4 <__alt_data_end+0xfc0151f4>
   15204:	003e8706 	br	14c24 <__alt_data_end+0xfc014c24>
   15208:	d8800517 	ldw	r2,20(sp)
   1520c:	00a3c83a 	sub	r17,zero,r2
   15210:	8800a426 	beq	r17,zero,154a4 <_dtoa_r+0x1498>
   15214:	888003cc 	andi	r2,r17,15
   15218:	100490fa 	slli	r2,r2,3
   1521c:	00c000f4 	movhi	r3,3
   15220:	18eab904 	addi	r3,r3,-21788
   15224:	1885883a 	add	r2,r3,r2
   15228:	11800017 	ldw	r6,0(r2)
   1522c:	11c00117 	ldw	r7,4(r2)
   15230:	9009883a 	mov	r4,r18
   15234:	980b883a 	mov	r5,r19
   15238:	8823d13a 	srai	r17,r17,4
   1523c:	001dbc40 	call	1dbc4 <__muldf3>
   15240:	d8800f15 	stw	r2,60(sp)
   15244:	d8c01015 	stw	r3,64(sp)
   15248:	8800e826 	beq	r17,zero,155ec <_dtoa_r+0x15e0>
   1524c:	050000f4 	movhi	r20,3
   15250:	a52aaf04 	addi	r20,r20,-21828
   15254:	04000084 	movi	r16,2
   15258:	8980004c 	andi	r6,r17,1
   1525c:	1009883a 	mov	r4,r2
   15260:	8823d07a 	srai	r17,r17,1
   15264:	180b883a 	mov	r5,r3
   15268:	30000426 	beq	r6,zero,1527c <_dtoa_r+0x1270>
   1526c:	a1800017 	ldw	r6,0(r20)
   15270:	a1c00117 	ldw	r7,4(r20)
   15274:	84000044 	addi	r16,r16,1
   15278:	001dbc40 	call	1dbc4 <__muldf3>
   1527c:	a5000204 	addi	r20,r20,8
   15280:	883ff51e 	bne	r17,zero,15258 <__alt_data_end+0xfc015258>
   15284:	d8800f15 	stw	r2,60(sp)
   15288:	d8c01015 	stw	r3,64(sp)
   1528c:	003c7606 	br	14468 <__alt_data_end+0xfc014468>
   15290:	00c00c04 	movi	r3,48
   15294:	10c00005 	stb	r3,0(r2)
   15298:	d8c00517 	ldw	r3,20(sp)
   1529c:	bd3fffc3 	ldbu	r20,-1(r23)
   152a0:	18c00044 	addi	r3,r3,1
   152a4:	d8c00515 	stw	r3,20(sp)
   152a8:	003db906 	br	14990 <__alt_data_end+0xfc014990>
   152ac:	89400117 	ldw	r5,4(r17)
   152b0:	e009883a 	mov	r4,fp
   152b4:	0016c480 	call	16c48 <_Balloc>
   152b8:	89800417 	ldw	r6,16(r17)
   152bc:	89400304 	addi	r5,r17,12
   152c0:	11000304 	addi	r4,r2,12
   152c4:	31800084 	addi	r6,r6,2
   152c8:	318d883a 	add	r6,r6,r6
   152cc:	318d883a 	add	r6,r6,r6
   152d0:	1027883a 	mov	r19,r2
   152d4:	000ecb80 	call	ecb8 <memcpy>
   152d8:	01800044 	movi	r6,1
   152dc:	980b883a 	mov	r5,r19
   152e0:	e009883a 	mov	r4,fp
   152e4:	00174840 	call	17484 <__lshift>
   152e8:	1029883a 	mov	r20,r2
   152ec:	003ecc06 	br	14e20 <__alt_data_end+0xfc014e20>
   152f0:	00800e44 	movi	r2,57
   152f4:	90809026 	beq	r18,r2,15538 <_dtoa_r+0x152c>
   152f8:	92000044 	addi	r8,r18,1
   152fc:	003f1f06 	br	14f7c <__alt_data_end+0xfc014f7c>
   15300:	9011883a 	mov	r8,r18
   15304:	8825883a 	mov	r18,r17
   15308:	a023883a 	mov	r17,r20
   1530c:	003e2906 	br	14bb4 <__alt_data_end+0xfc014bb4>
   15310:	002b883a 	mov	r21,zero
   15314:	0023883a 	mov	r17,zero
   15318:	003f5406 	br	1506c <__alt_data_end+0xfc01506c>
   1531c:	61bfffc4 	addi	r6,r12,-1
   15320:	300490fa 	slli	r2,r6,3
   15324:	00c000f4 	movhi	r3,3
   15328:	18eab904 	addi	r3,r3,-21788
   1532c:	1885883a 	add	r2,r3,r2
   15330:	11000017 	ldw	r4,0(r2)
   15334:	11400117 	ldw	r5,4(r2)
   15338:	d8800717 	ldw	r2,28(sp)
   1533c:	880f883a 	mov	r7,r17
   15340:	d9801215 	stw	r6,72(sp)
   15344:	800d883a 	mov	r6,r16
   15348:	db001615 	stw	r12,88(sp)
   1534c:	15c00044 	addi	r23,r2,1
   15350:	001dbc40 	call	1dbc4 <__muldf3>
   15354:	d9401017 	ldw	r5,64(sp)
   15358:	d9000f17 	ldw	r4,60(sp)
   1535c:	d8c01515 	stw	r3,84(sp)
   15360:	d8801415 	stw	r2,80(sp)
   15364:	001ed2c0 	call	1ed2c <__fixdfsi>
   15368:	1009883a 	mov	r4,r2
   1536c:	1021883a 	mov	r16,r2
   15370:	001edac0 	call	1edac <__floatsidf>
   15374:	d9000f17 	ldw	r4,60(sp)
   15378:	d9401017 	ldw	r5,64(sp)
   1537c:	100d883a 	mov	r6,r2
   15380:	180f883a 	mov	r7,r3
   15384:	001e4300 	call	1e430 <__subdf3>
   15388:	1829883a 	mov	r20,r3
   1538c:	d8c00717 	ldw	r3,28(sp)
   15390:	84000c04 	addi	r16,r16,48
   15394:	1023883a 	mov	r17,r2
   15398:	1c000005 	stb	r16,0(r3)
   1539c:	db001617 	ldw	r12,88(sp)
   153a0:	00800044 	movi	r2,1
   153a4:	60802226 	beq	r12,r2,15430 <_dtoa_r+0x1424>
   153a8:	d9c00717 	ldw	r7,28(sp)
   153ac:	8805883a 	mov	r2,r17
   153b0:	b82b883a 	mov	r21,r23
   153b4:	3b19883a 	add	r12,r7,r12
   153b8:	6023883a 	mov	r17,r12
   153bc:	a007883a 	mov	r3,r20
   153c0:	dc800f15 	stw	r18,60(sp)
   153c4:	000d883a 	mov	r6,zero
   153c8:	01d00934 	movhi	r7,16420
   153cc:	1009883a 	mov	r4,r2
   153d0:	180b883a 	mov	r5,r3
   153d4:	001dbc40 	call	1dbc4 <__muldf3>
   153d8:	180b883a 	mov	r5,r3
   153dc:	1009883a 	mov	r4,r2
   153e0:	1829883a 	mov	r20,r3
   153e4:	1025883a 	mov	r18,r2
   153e8:	001ed2c0 	call	1ed2c <__fixdfsi>
   153ec:	1009883a 	mov	r4,r2
   153f0:	1021883a 	mov	r16,r2
   153f4:	001edac0 	call	1edac <__floatsidf>
   153f8:	100d883a 	mov	r6,r2
   153fc:	180f883a 	mov	r7,r3
   15400:	9009883a 	mov	r4,r18
   15404:	a00b883a 	mov	r5,r20
   15408:	84000c04 	addi	r16,r16,48
   1540c:	001e4300 	call	1e430 <__subdf3>
   15410:	ad400044 	addi	r21,r21,1
   15414:	ac3fffc5 	stb	r16,-1(r21)
   15418:	ac7fea1e 	bne	r21,r17,153c4 <__alt_data_end+0xfc0153c4>
   1541c:	1023883a 	mov	r17,r2
   15420:	d8801217 	ldw	r2,72(sp)
   15424:	dc800f17 	ldw	r18,60(sp)
   15428:	1829883a 	mov	r20,r3
   1542c:	b8af883a 	add	r23,r23,r2
   15430:	d9001417 	ldw	r4,80(sp)
   15434:	d9401517 	ldw	r5,84(sp)
   15438:	000d883a 	mov	r6,zero
   1543c:	01cff834 	movhi	r7,16352
   15440:	001c6f00 	call	1c6f0 <__adddf3>
   15444:	880d883a 	mov	r6,r17
   15448:	a00f883a 	mov	r7,r20
   1544c:	1009883a 	mov	r4,r2
   15450:	180b883a 	mov	r5,r3
   15454:	001dad00 	call	1dad0 <__ledf2>
   15458:	10003e0e 	bge	r2,zero,15554 <_dtoa_r+0x1548>
   1545c:	d9001317 	ldw	r4,76(sp)
   15460:	bd3fffc3 	ldbu	r20,-1(r23)
   15464:	d9000515 	stw	r4,20(sp)
   15468:	003d3b06 	br	14958 <__alt_data_end+0xfc014958>
   1546c:	0027883a 	mov	r19,zero
   15470:	003f1b06 	br	150e0 <__alt_data_end+0xfc0150e0>
   15474:	d8800817 	ldw	r2,32(sp)
   15478:	11e9c83a 	sub	r20,r2,r7
   1547c:	0005883a 	mov	r2,zero
   15480:	003d5406 	br	149d4 <__alt_data_end+0xfc0149d4>
   15484:	00800044 	movi	r2,1
   15488:	003dc706 	br	14ba8 <__alt_data_end+0xfc014ba8>
   1548c:	d8c00217 	ldw	r3,8(sp)
   15490:	00800d84 	movi	r2,54
   15494:	dd400a17 	ldw	r21,40(sp)
   15498:	10c5c83a 	sub	r2,r2,r3
   1549c:	dd000817 	ldw	r20,32(sp)
   154a0:	003d4c06 	br	149d4 <__alt_data_end+0xfc0149d4>
   154a4:	dc800f15 	stw	r18,60(sp)
   154a8:	dcc01015 	stw	r19,64(sp)
   154ac:	04000084 	movi	r16,2
   154b0:	003bed06 	br	14468 <__alt_data_end+0xfc014468>
   154b4:	d9000617 	ldw	r4,24(sp)
   154b8:	203f0d26 	beq	r4,zero,150f0 <__alt_data_end+0xfc0150f0>
   154bc:	d9800c17 	ldw	r6,48(sp)
   154c0:	01bcab0e 	bge	zero,r6,14770 <__alt_data_end+0xfc014770>
   154c4:	d9401017 	ldw	r5,64(sp)
   154c8:	d9000f17 	ldw	r4,60(sp)
   154cc:	000d883a 	mov	r6,zero
   154d0:	01d00934 	movhi	r7,16420
   154d4:	001dbc40 	call	1dbc4 <__muldf3>
   154d8:	81000044 	addi	r4,r16,1
   154dc:	d8800f15 	stw	r2,60(sp)
   154e0:	d8c01015 	stw	r3,64(sp)
   154e4:	001edac0 	call	1edac <__floatsidf>
   154e8:	d9800f17 	ldw	r6,60(sp)
   154ec:	d9c01017 	ldw	r7,64(sp)
   154f0:	1009883a 	mov	r4,r2
   154f4:	180b883a 	mov	r5,r3
   154f8:	001dbc40 	call	1dbc4 <__muldf3>
   154fc:	01d00734 	movhi	r7,16412
   15500:	000d883a 	mov	r6,zero
   15504:	1009883a 	mov	r4,r2
   15508:	180b883a 	mov	r5,r3
   1550c:	001c6f00 	call	1c6f0 <__adddf3>
   15510:	d9c00517 	ldw	r7,20(sp)
   15514:	047f3034 	movhi	r17,64704
   15518:	1021883a 	mov	r16,r2
   1551c:	39ffffc4 	addi	r7,r7,-1
   15520:	d9c01315 	stw	r7,76(sp)
   15524:	1c63883a 	add	r17,r3,r17
   15528:	db000c17 	ldw	r12,48(sp)
   1552c:	003bea06 	br	144d8 <__alt_data_end+0xfc0144d8>
   15530:	dc000915 	stw	r16,36(sp)
   15534:	003e0e06 	br	14d70 <__alt_data_end+0xfc014d70>
   15538:	01000e44 	movi	r4,57
   1553c:	8825883a 	mov	r18,r17
   15540:	9dc00044 	addi	r23,r19,1
   15544:	99000005 	stb	r4,0(r19)
   15548:	a023883a 	mov	r17,r20
   1554c:	dc000915 	stw	r16,36(sp)
   15550:	003da406 	br	14be4 <__alt_data_end+0xfc014be4>
   15554:	d9801417 	ldw	r6,80(sp)
   15558:	d9c01517 	ldw	r7,84(sp)
   1555c:	0009883a 	mov	r4,zero
   15560:	014ff834 	movhi	r5,16352
   15564:	001e4300 	call	1e430 <__subdf3>
   15568:	880d883a 	mov	r6,r17
   1556c:	a00f883a 	mov	r7,r20
   15570:	1009883a 	mov	r4,r2
   15574:	180b883a 	mov	r5,r3
   15578:	001d9f40 	call	1d9f4 <__gedf2>
   1557c:	00bc7c0e 	bge	zero,r2,14770 <__alt_data_end+0xfc014770>
   15580:	01000c04 	movi	r4,48
   15584:	00000106 	br	1558c <_dtoa_r+0x1580>
   15588:	102f883a 	mov	r23,r2
   1558c:	b8bfffc4 	addi	r2,r23,-1
   15590:	10c00007 	ldb	r3,0(r2)
   15594:	193ffc26 	beq	r3,r4,15588 <__alt_data_end+0xfc015588>
   15598:	d9801317 	ldw	r6,76(sp)
   1559c:	d9800515 	stw	r6,20(sp)
   155a0:	003c4406 	br	146b4 <__alt_data_end+0xfc0146b4>
   155a4:	d9801317 	ldw	r6,76(sp)
   155a8:	d9800515 	stw	r6,20(sp)
   155ac:	003cea06 	br	14958 <__alt_data_end+0xfc014958>
   155b0:	dd800f17 	ldw	r22,60(sp)
   155b4:	dcc01017 	ldw	r19,64(sp)
   155b8:	dc801217 	ldw	r18,72(sp)
   155bc:	003c6c06 	br	14770 <__alt_data_end+0xfc014770>
   155c0:	903e031e 	bne	r18,zero,14dd0 <__alt_data_end+0xfc014dd0>
   155c4:	003ebb06 	br	150b4 <__alt_data_end+0xfc0150b4>
   155c8:	103e6c1e 	bne	r2,zero,14f7c <__alt_data_end+0xfc014f7c>
   155cc:	4080004c 	andi	r2,r8,1
   155d0:	103e6a26 	beq	r2,zero,14f7c <__alt_data_end+0xfc014f7c>
   155d4:	003e6606 	br	14f70 <__alt_data_end+0xfc014f70>
   155d8:	d8c00317 	ldw	r3,12(sp)
   155dc:	00800084 	movi	r2,2
   155e0:	10c02916 	blt	r2,r3,15688 <_dtoa_r+0x167c>
   155e4:	d9000c17 	ldw	r4,48(sp)
   155e8:	003e8806 	br	1500c <__alt_data_end+0xfc01500c>
   155ec:	04000084 	movi	r16,2
   155f0:	003b9d06 	br	14468 <__alt_data_end+0xfc014468>
   155f4:	d9001317 	ldw	r4,76(sp)
   155f8:	d9000515 	stw	r4,20(sp)
   155fc:	003cd606 	br	14958 <__alt_data_end+0xfc014958>
   15600:	d8801317 	ldw	r2,76(sp)
   15604:	d8800515 	stw	r2,20(sp)
   15608:	003c2a06 	br	146b4 <__alt_data_end+0xfc0146b4>
   1560c:	d9800317 	ldw	r6,12(sp)
   15610:	00800084 	movi	r2,2
   15614:	11801516 	blt	r2,r6,1566c <_dtoa_r+0x1660>
   15618:	d9c00c17 	ldw	r7,48(sp)
   1561c:	d9c00615 	stw	r7,24(sp)
   15620:	003df706 	br	14e00 <__alt_data_end+0xfc014e00>
   15624:	193d3926 	beq	r3,r4,14b0c <__alt_data_end+0xfc014b0c>
   15628:	00c00f04 	movi	r3,60
   1562c:	1885c83a 	sub	r2,r3,r2
   15630:	003ddf06 	br	14db0 <__alt_data_end+0xfc014db0>
   15634:	e009883a 	mov	r4,fp
   15638:	e0001115 	stw	zero,68(fp)
   1563c:	000b883a 	mov	r5,zero
   15640:	0016c480 	call	16c48 <_Balloc>
   15644:	d8800715 	stw	r2,28(sp)
   15648:	d8c00717 	ldw	r3,28(sp)
   1564c:	00bfffc4 	movi	r2,-1
   15650:	01000044 	movi	r4,1
   15654:	d8800c15 	stw	r2,48(sp)
   15658:	e0c01015 	stw	r3,64(fp)
   1565c:	d9000b15 	stw	r4,44(sp)
   15660:	d8800615 	stw	r2,24(sp)
   15664:	d8002215 	stw	zero,136(sp)
   15668:	003c4106 	br	14770 <__alt_data_end+0xfc014770>
   1566c:	d8c00c17 	ldw	r3,48(sp)
   15670:	d8c00615 	stw	r3,24(sp)
   15674:	003e7006 	br	15038 <__alt_data_end+0xfc015038>
   15678:	04400044 	movi	r17,1
   1567c:	003b2006 	br	14300 <__alt_data_end+0xfc014300>
   15680:	000b883a 	mov	r5,zero
   15684:	003b3d06 	br	1437c <__alt_data_end+0xfc01437c>
   15688:	d8800c17 	ldw	r2,48(sp)
   1568c:	d8800615 	stw	r2,24(sp)
   15690:	003e6906 	br	15038 <__alt_data_end+0xfc015038>

00015694 <__sflush_r>:
   15694:	2880030b 	ldhu	r2,12(r5)
   15698:	defffb04 	addi	sp,sp,-20
   1569c:	dcc00315 	stw	r19,12(sp)
   156a0:	dc400115 	stw	r17,4(sp)
   156a4:	dfc00415 	stw	ra,16(sp)
   156a8:	dc800215 	stw	r18,8(sp)
   156ac:	dc000015 	stw	r16,0(sp)
   156b0:	10c0020c 	andi	r3,r2,8
   156b4:	2823883a 	mov	r17,r5
   156b8:	2027883a 	mov	r19,r4
   156bc:	1800311e 	bne	r3,zero,15784 <__sflush_r+0xf0>
   156c0:	28c00117 	ldw	r3,4(r5)
   156c4:	10820014 	ori	r2,r2,2048
   156c8:	2880030d 	sth	r2,12(r5)
   156cc:	00c04b0e 	bge	zero,r3,157fc <__sflush_r+0x168>
   156d0:	8a000a17 	ldw	r8,40(r17)
   156d4:	40002326 	beq	r8,zero,15764 <__sflush_r+0xd0>
   156d8:	9c000017 	ldw	r16,0(r19)
   156dc:	10c4000c 	andi	r3,r2,4096
   156e0:	98000015 	stw	zero,0(r19)
   156e4:	18004826 	beq	r3,zero,15808 <__sflush_r+0x174>
   156e8:	89801417 	ldw	r6,80(r17)
   156ec:	10c0010c 	andi	r3,r2,4
   156f0:	18000626 	beq	r3,zero,1570c <__sflush_r+0x78>
   156f4:	88c00117 	ldw	r3,4(r17)
   156f8:	88800c17 	ldw	r2,48(r17)
   156fc:	30cdc83a 	sub	r6,r6,r3
   15700:	10000226 	beq	r2,zero,1570c <__sflush_r+0x78>
   15704:	88800f17 	ldw	r2,60(r17)
   15708:	308dc83a 	sub	r6,r6,r2
   1570c:	89400717 	ldw	r5,28(r17)
   15710:	000f883a 	mov	r7,zero
   15714:	9809883a 	mov	r4,r19
   15718:	403ee83a 	callr	r8
   1571c:	00ffffc4 	movi	r3,-1
   15720:	10c04426 	beq	r2,r3,15834 <__sflush_r+0x1a0>
   15724:	88c0030b 	ldhu	r3,12(r17)
   15728:	89000417 	ldw	r4,16(r17)
   1572c:	88000115 	stw	zero,4(r17)
   15730:	197dffcc 	andi	r5,r3,63487
   15734:	8940030d 	sth	r5,12(r17)
   15738:	89000015 	stw	r4,0(r17)
   1573c:	18c4000c 	andi	r3,r3,4096
   15740:	18002c1e 	bne	r3,zero,157f4 <__sflush_r+0x160>
   15744:	89400c17 	ldw	r5,48(r17)
   15748:	9c000015 	stw	r16,0(r19)
   1574c:	28000526 	beq	r5,zero,15764 <__sflush_r+0xd0>
   15750:	88801004 	addi	r2,r17,64
   15754:	28800226 	beq	r5,r2,15760 <__sflush_r+0xcc>
   15758:	9809883a 	mov	r4,r19
   1575c:	0015e100 	call	15e10 <_free_r>
   15760:	88000c15 	stw	zero,48(r17)
   15764:	0005883a 	mov	r2,zero
   15768:	dfc00417 	ldw	ra,16(sp)
   1576c:	dcc00317 	ldw	r19,12(sp)
   15770:	dc800217 	ldw	r18,8(sp)
   15774:	dc400117 	ldw	r17,4(sp)
   15778:	dc000017 	ldw	r16,0(sp)
   1577c:	dec00504 	addi	sp,sp,20
   15780:	f800283a 	ret
   15784:	2c800417 	ldw	r18,16(r5)
   15788:	903ff626 	beq	r18,zero,15764 <__alt_data_end+0xfc015764>
   1578c:	2c000017 	ldw	r16,0(r5)
   15790:	108000cc 	andi	r2,r2,3
   15794:	2c800015 	stw	r18,0(r5)
   15798:	84a1c83a 	sub	r16,r16,r18
   1579c:	1000131e 	bne	r2,zero,157ec <__sflush_r+0x158>
   157a0:	28800517 	ldw	r2,20(r5)
   157a4:	88800215 	stw	r2,8(r17)
   157a8:	04000316 	blt	zero,r16,157b8 <__sflush_r+0x124>
   157ac:	003fed06 	br	15764 <__alt_data_end+0xfc015764>
   157b0:	90a5883a 	add	r18,r18,r2
   157b4:	043feb0e 	bge	zero,r16,15764 <__alt_data_end+0xfc015764>
   157b8:	88800917 	ldw	r2,36(r17)
   157bc:	89400717 	ldw	r5,28(r17)
   157c0:	800f883a 	mov	r7,r16
   157c4:	900d883a 	mov	r6,r18
   157c8:	9809883a 	mov	r4,r19
   157cc:	103ee83a 	callr	r2
   157d0:	80a1c83a 	sub	r16,r16,r2
   157d4:	00bff616 	blt	zero,r2,157b0 <__alt_data_end+0xfc0157b0>
   157d8:	88c0030b 	ldhu	r3,12(r17)
   157dc:	00bfffc4 	movi	r2,-1
   157e0:	18c01014 	ori	r3,r3,64
   157e4:	88c0030d 	sth	r3,12(r17)
   157e8:	003fdf06 	br	15768 <__alt_data_end+0xfc015768>
   157ec:	0005883a 	mov	r2,zero
   157f0:	003fec06 	br	157a4 <__alt_data_end+0xfc0157a4>
   157f4:	88801415 	stw	r2,80(r17)
   157f8:	003fd206 	br	15744 <__alt_data_end+0xfc015744>
   157fc:	28c00f17 	ldw	r3,60(r5)
   15800:	00ffb316 	blt	zero,r3,156d0 <__alt_data_end+0xfc0156d0>
   15804:	003fd706 	br	15764 <__alt_data_end+0xfc015764>
   15808:	89400717 	ldw	r5,28(r17)
   1580c:	000d883a 	mov	r6,zero
   15810:	01c00044 	movi	r7,1
   15814:	9809883a 	mov	r4,r19
   15818:	403ee83a 	callr	r8
   1581c:	100d883a 	mov	r6,r2
   15820:	00bfffc4 	movi	r2,-1
   15824:	30801426 	beq	r6,r2,15878 <__sflush_r+0x1e4>
   15828:	8880030b 	ldhu	r2,12(r17)
   1582c:	8a000a17 	ldw	r8,40(r17)
   15830:	003fae06 	br	156ec <__alt_data_end+0xfc0156ec>
   15834:	98c00017 	ldw	r3,0(r19)
   15838:	183fba26 	beq	r3,zero,15724 <__alt_data_end+0xfc015724>
   1583c:	01000744 	movi	r4,29
   15840:	19000626 	beq	r3,r4,1585c <__sflush_r+0x1c8>
   15844:	01000584 	movi	r4,22
   15848:	19000426 	beq	r3,r4,1585c <__sflush_r+0x1c8>
   1584c:	88c0030b 	ldhu	r3,12(r17)
   15850:	18c01014 	ori	r3,r3,64
   15854:	88c0030d 	sth	r3,12(r17)
   15858:	003fc306 	br	15768 <__alt_data_end+0xfc015768>
   1585c:	8880030b 	ldhu	r2,12(r17)
   15860:	88c00417 	ldw	r3,16(r17)
   15864:	88000115 	stw	zero,4(r17)
   15868:	10bdffcc 	andi	r2,r2,63487
   1586c:	8880030d 	sth	r2,12(r17)
   15870:	88c00015 	stw	r3,0(r17)
   15874:	003fb306 	br	15744 <__alt_data_end+0xfc015744>
   15878:	98800017 	ldw	r2,0(r19)
   1587c:	103fea26 	beq	r2,zero,15828 <__alt_data_end+0xfc015828>
   15880:	00c00744 	movi	r3,29
   15884:	10c00226 	beq	r2,r3,15890 <__sflush_r+0x1fc>
   15888:	00c00584 	movi	r3,22
   1588c:	10c0031e 	bne	r2,r3,1589c <__sflush_r+0x208>
   15890:	9c000015 	stw	r16,0(r19)
   15894:	0005883a 	mov	r2,zero
   15898:	003fb306 	br	15768 <__alt_data_end+0xfc015768>
   1589c:	88c0030b 	ldhu	r3,12(r17)
   158a0:	3005883a 	mov	r2,r6
   158a4:	18c01014 	ori	r3,r3,64
   158a8:	88c0030d 	sth	r3,12(r17)
   158ac:	003fae06 	br	15768 <__alt_data_end+0xfc015768>

000158b0 <_fflush_r>:
   158b0:	defffd04 	addi	sp,sp,-12
   158b4:	dc000115 	stw	r16,4(sp)
   158b8:	dfc00215 	stw	ra,8(sp)
   158bc:	2021883a 	mov	r16,r4
   158c0:	20000226 	beq	r4,zero,158cc <_fflush_r+0x1c>
   158c4:	20800e17 	ldw	r2,56(r4)
   158c8:	10000c26 	beq	r2,zero,158fc <_fflush_r+0x4c>
   158cc:	2880030f 	ldh	r2,12(r5)
   158d0:	1000051e 	bne	r2,zero,158e8 <_fflush_r+0x38>
   158d4:	0005883a 	mov	r2,zero
   158d8:	dfc00217 	ldw	ra,8(sp)
   158dc:	dc000117 	ldw	r16,4(sp)
   158e0:	dec00304 	addi	sp,sp,12
   158e4:	f800283a 	ret
   158e8:	8009883a 	mov	r4,r16
   158ec:	dfc00217 	ldw	ra,8(sp)
   158f0:	dc000117 	ldw	r16,4(sp)
   158f4:	dec00304 	addi	sp,sp,12
   158f8:	00156941 	jmpi	15694 <__sflush_r>
   158fc:	d9400015 	stw	r5,0(sp)
   15900:	0015c9c0 	call	15c9c <__sinit>
   15904:	d9400017 	ldw	r5,0(sp)
   15908:	003ff006 	br	158cc <__alt_data_end+0xfc0158cc>

0001590c <fflush>:
   1590c:	20000526 	beq	r4,zero,15924 <fflush+0x18>
   15910:	008000f4 	movhi	r2,3
   15914:	10b77b04 	addi	r2,r2,-8724
   15918:	200b883a 	mov	r5,r4
   1591c:	11000017 	ldw	r4,0(r2)
   15920:	00158b01 	jmpi	158b0 <_fflush_r>
   15924:	008000f4 	movhi	r2,3
   15928:	10b77a04 	addi	r2,r2,-8728
   1592c:	11000017 	ldw	r4,0(r2)
   15930:	01400074 	movhi	r5,1
   15934:	29562c04 	addi	r5,r5,22704
   15938:	00166ac1 	jmpi	166ac <_fwalk_reent>

0001593c <__fp_unlock>:
   1593c:	0005883a 	mov	r2,zero
   15940:	f800283a 	ret

00015944 <_cleanup_r>:
   15944:	014000b4 	movhi	r5,2
   15948:	296d3304 	addi	r5,r5,-19252
   1594c:	00166ac1 	jmpi	166ac <_fwalk_reent>

00015950 <__sinit.part.1>:
   15950:	defff704 	addi	sp,sp,-36
   15954:	00c00074 	movhi	r3,1
   15958:	dfc00815 	stw	ra,32(sp)
   1595c:	ddc00715 	stw	r23,28(sp)
   15960:	dd800615 	stw	r22,24(sp)
   15964:	dd400515 	stw	r21,20(sp)
   15968:	dd000415 	stw	r20,16(sp)
   1596c:	dcc00315 	stw	r19,12(sp)
   15970:	dc800215 	stw	r18,8(sp)
   15974:	dc400115 	stw	r17,4(sp)
   15978:	dc000015 	stw	r16,0(sp)
   1597c:	18d65104 	addi	r3,r3,22852
   15980:	24000117 	ldw	r16,4(r4)
   15984:	20c00f15 	stw	r3,60(r4)
   15988:	2080bb04 	addi	r2,r4,748
   1598c:	00c000c4 	movi	r3,3
   15990:	20c0b915 	stw	r3,740(r4)
   15994:	2080ba15 	stw	r2,744(r4)
   15998:	2000b815 	stw	zero,736(r4)
   1599c:	05c00204 	movi	r23,8
   159a0:	00800104 	movi	r2,4
   159a4:	2025883a 	mov	r18,r4
   159a8:	b80d883a 	mov	r6,r23
   159ac:	81001704 	addi	r4,r16,92
   159b0:	000b883a 	mov	r5,zero
   159b4:	80000015 	stw	zero,0(r16)
   159b8:	80000115 	stw	zero,4(r16)
   159bc:	80000215 	stw	zero,8(r16)
   159c0:	8080030d 	sth	r2,12(r16)
   159c4:	80001915 	stw	zero,100(r16)
   159c8:	8000038d 	sth	zero,14(r16)
   159cc:	80000415 	stw	zero,16(r16)
   159d0:	80000515 	stw	zero,20(r16)
   159d4:	80000615 	stw	zero,24(r16)
   159d8:	000ee000 	call	ee00 <memset>
   159dc:	058000b4 	movhi	r22,2
   159e0:	94400217 	ldw	r17,8(r18)
   159e4:	054000b4 	movhi	r21,2
   159e8:	050000b4 	movhi	r20,2
   159ec:	04c000b4 	movhi	r19,2
   159f0:	b5a11004 	addi	r22,r22,-31680
   159f4:	ad612704 	addi	r21,r21,-31588
   159f8:	a5214604 	addi	r20,r20,-31464
   159fc:	9ce15d04 	addi	r19,r19,-31372
   15a00:	85800815 	stw	r22,32(r16)
   15a04:	85400915 	stw	r21,36(r16)
   15a08:	85000a15 	stw	r20,40(r16)
   15a0c:	84c00b15 	stw	r19,44(r16)
   15a10:	84000715 	stw	r16,28(r16)
   15a14:	00800284 	movi	r2,10
   15a18:	8880030d 	sth	r2,12(r17)
   15a1c:	00800044 	movi	r2,1
   15a20:	b80d883a 	mov	r6,r23
   15a24:	89001704 	addi	r4,r17,92
   15a28:	000b883a 	mov	r5,zero
   15a2c:	88000015 	stw	zero,0(r17)
   15a30:	88000115 	stw	zero,4(r17)
   15a34:	88000215 	stw	zero,8(r17)
   15a38:	88001915 	stw	zero,100(r17)
   15a3c:	8880038d 	sth	r2,14(r17)
   15a40:	88000415 	stw	zero,16(r17)
   15a44:	88000515 	stw	zero,20(r17)
   15a48:	88000615 	stw	zero,24(r17)
   15a4c:	000ee000 	call	ee00 <memset>
   15a50:	94000317 	ldw	r16,12(r18)
   15a54:	00800484 	movi	r2,18
   15a58:	8c400715 	stw	r17,28(r17)
   15a5c:	8d800815 	stw	r22,32(r17)
   15a60:	8d400915 	stw	r21,36(r17)
   15a64:	8d000a15 	stw	r20,40(r17)
   15a68:	8cc00b15 	stw	r19,44(r17)
   15a6c:	8080030d 	sth	r2,12(r16)
   15a70:	00800084 	movi	r2,2
   15a74:	80000015 	stw	zero,0(r16)
   15a78:	80000115 	stw	zero,4(r16)
   15a7c:	80000215 	stw	zero,8(r16)
   15a80:	80001915 	stw	zero,100(r16)
   15a84:	8080038d 	sth	r2,14(r16)
   15a88:	80000415 	stw	zero,16(r16)
   15a8c:	80000515 	stw	zero,20(r16)
   15a90:	80000615 	stw	zero,24(r16)
   15a94:	b80d883a 	mov	r6,r23
   15a98:	000b883a 	mov	r5,zero
   15a9c:	81001704 	addi	r4,r16,92
   15aa0:	000ee000 	call	ee00 <memset>
   15aa4:	00800044 	movi	r2,1
   15aa8:	84000715 	stw	r16,28(r16)
   15aac:	85800815 	stw	r22,32(r16)
   15ab0:	85400915 	stw	r21,36(r16)
   15ab4:	85000a15 	stw	r20,40(r16)
   15ab8:	84c00b15 	stw	r19,44(r16)
   15abc:	90800e15 	stw	r2,56(r18)
   15ac0:	dfc00817 	ldw	ra,32(sp)
   15ac4:	ddc00717 	ldw	r23,28(sp)
   15ac8:	dd800617 	ldw	r22,24(sp)
   15acc:	dd400517 	ldw	r21,20(sp)
   15ad0:	dd000417 	ldw	r20,16(sp)
   15ad4:	dcc00317 	ldw	r19,12(sp)
   15ad8:	dc800217 	ldw	r18,8(sp)
   15adc:	dc400117 	ldw	r17,4(sp)
   15ae0:	dc000017 	ldw	r16,0(sp)
   15ae4:	dec00904 	addi	sp,sp,36
   15ae8:	f800283a 	ret

00015aec <__fp_lock>:
   15aec:	0005883a 	mov	r2,zero
   15af0:	f800283a 	ret

00015af4 <__sfmoreglue>:
   15af4:	defffc04 	addi	sp,sp,-16
   15af8:	dc800215 	stw	r18,8(sp)
   15afc:	2825883a 	mov	r18,r5
   15b00:	dc000015 	stw	r16,0(sp)
   15b04:	01401a04 	movi	r5,104
   15b08:	2021883a 	mov	r16,r4
   15b0c:	913fffc4 	addi	r4,r18,-1
   15b10:	dfc00315 	stw	ra,12(sp)
   15b14:	dc400115 	stw	r17,4(sp)
   15b18:	000cf040 	call	cf04 <__mulsi3>
   15b1c:	8009883a 	mov	r4,r16
   15b20:	11401d04 	addi	r5,r2,116
   15b24:	1023883a 	mov	r17,r2
   15b28:	000e4ac0 	call	e4ac <_malloc_r>
   15b2c:	1021883a 	mov	r16,r2
   15b30:	10000726 	beq	r2,zero,15b50 <__sfmoreglue+0x5c>
   15b34:	11000304 	addi	r4,r2,12
   15b38:	10000015 	stw	zero,0(r2)
   15b3c:	14800115 	stw	r18,4(r2)
   15b40:	11000215 	stw	r4,8(r2)
   15b44:	89801a04 	addi	r6,r17,104
   15b48:	000b883a 	mov	r5,zero
   15b4c:	000ee000 	call	ee00 <memset>
   15b50:	8005883a 	mov	r2,r16
   15b54:	dfc00317 	ldw	ra,12(sp)
   15b58:	dc800217 	ldw	r18,8(sp)
   15b5c:	dc400117 	ldw	r17,4(sp)
   15b60:	dc000017 	ldw	r16,0(sp)
   15b64:	dec00404 	addi	sp,sp,16
   15b68:	f800283a 	ret

00015b6c <__sfp>:
   15b6c:	defffb04 	addi	sp,sp,-20
   15b70:	dc000015 	stw	r16,0(sp)
   15b74:	040000f4 	movhi	r16,3
   15b78:	84377a04 	addi	r16,r16,-8728
   15b7c:	dcc00315 	stw	r19,12(sp)
   15b80:	2027883a 	mov	r19,r4
   15b84:	81000017 	ldw	r4,0(r16)
   15b88:	dfc00415 	stw	ra,16(sp)
   15b8c:	dc800215 	stw	r18,8(sp)
   15b90:	20800e17 	ldw	r2,56(r4)
   15b94:	dc400115 	stw	r17,4(sp)
   15b98:	1000021e 	bne	r2,zero,15ba4 <__sfp+0x38>
   15b9c:	00159500 	call	15950 <__sinit.part.1>
   15ba0:	81000017 	ldw	r4,0(r16)
   15ba4:	2480b804 	addi	r18,r4,736
   15ba8:	047fffc4 	movi	r17,-1
   15bac:	91000117 	ldw	r4,4(r18)
   15bb0:	94000217 	ldw	r16,8(r18)
   15bb4:	213fffc4 	addi	r4,r4,-1
   15bb8:	20000a16 	blt	r4,zero,15be4 <__sfp+0x78>
   15bbc:	8080030f 	ldh	r2,12(r16)
   15bc0:	10000c26 	beq	r2,zero,15bf4 <__sfp+0x88>
   15bc4:	80c01d04 	addi	r3,r16,116
   15bc8:	00000206 	br	15bd4 <__sfp+0x68>
   15bcc:	18bfe60f 	ldh	r2,-104(r3)
   15bd0:	10000826 	beq	r2,zero,15bf4 <__sfp+0x88>
   15bd4:	213fffc4 	addi	r4,r4,-1
   15bd8:	1c3ffd04 	addi	r16,r3,-12
   15bdc:	18c01a04 	addi	r3,r3,104
   15be0:	247ffa1e 	bne	r4,r17,15bcc <__alt_data_end+0xfc015bcc>
   15be4:	90800017 	ldw	r2,0(r18)
   15be8:	10001d26 	beq	r2,zero,15c60 <__sfp+0xf4>
   15bec:	1025883a 	mov	r18,r2
   15bf0:	003fee06 	br	15bac <__alt_data_end+0xfc015bac>
   15bf4:	00bfffc4 	movi	r2,-1
   15bf8:	8080038d 	sth	r2,14(r16)
   15bfc:	00800044 	movi	r2,1
   15c00:	8080030d 	sth	r2,12(r16)
   15c04:	80001915 	stw	zero,100(r16)
   15c08:	80000015 	stw	zero,0(r16)
   15c0c:	80000215 	stw	zero,8(r16)
   15c10:	80000115 	stw	zero,4(r16)
   15c14:	80000415 	stw	zero,16(r16)
   15c18:	80000515 	stw	zero,20(r16)
   15c1c:	80000615 	stw	zero,24(r16)
   15c20:	01800204 	movi	r6,8
   15c24:	000b883a 	mov	r5,zero
   15c28:	81001704 	addi	r4,r16,92
   15c2c:	000ee000 	call	ee00 <memset>
   15c30:	8005883a 	mov	r2,r16
   15c34:	80000c15 	stw	zero,48(r16)
   15c38:	80000d15 	stw	zero,52(r16)
   15c3c:	80001115 	stw	zero,68(r16)
   15c40:	80001215 	stw	zero,72(r16)
   15c44:	dfc00417 	ldw	ra,16(sp)
   15c48:	dcc00317 	ldw	r19,12(sp)
   15c4c:	dc800217 	ldw	r18,8(sp)
   15c50:	dc400117 	ldw	r17,4(sp)
   15c54:	dc000017 	ldw	r16,0(sp)
   15c58:	dec00504 	addi	sp,sp,20
   15c5c:	f800283a 	ret
   15c60:	01400104 	movi	r5,4
   15c64:	9809883a 	mov	r4,r19
   15c68:	0015af40 	call	15af4 <__sfmoreglue>
   15c6c:	90800015 	stw	r2,0(r18)
   15c70:	103fde1e 	bne	r2,zero,15bec <__alt_data_end+0xfc015bec>
   15c74:	00800304 	movi	r2,12
   15c78:	98800015 	stw	r2,0(r19)
   15c7c:	0005883a 	mov	r2,zero
   15c80:	003ff006 	br	15c44 <__alt_data_end+0xfc015c44>

00015c84 <_cleanup>:
   15c84:	008000f4 	movhi	r2,3
   15c88:	10b77a04 	addi	r2,r2,-8728
   15c8c:	11000017 	ldw	r4,0(r2)
   15c90:	014000b4 	movhi	r5,2
   15c94:	296d3304 	addi	r5,r5,-19252
   15c98:	00166ac1 	jmpi	166ac <_fwalk_reent>

00015c9c <__sinit>:
   15c9c:	20800e17 	ldw	r2,56(r4)
   15ca0:	10000126 	beq	r2,zero,15ca8 <__sinit+0xc>
   15ca4:	f800283a 	ret
   15ca8:	00159501 	jmpi	15950 <__sinit.part.1>

00015cac <__sfp_lock_acquire>:
   15cac:	f800283a 	ret

00015cb0 <__sfp_lock_release>:
   15cb0:	f800283a 	ret

00015cb4 <__sinit_lock_acquire>:
   15cb4:	f800283a 	ret

00015cb8 <__sinit_lock_release>:
   15cb8:	f800283a 	ret

00015cbc <__fp_lock_all>:
   15cbc:	008000f4 	movhi	r2,3
   15cc0:	10b77b04 	addi	r2,r2,-8724
   15cc4:	11000017 	ldw	r4,0(r2)
   15cc8:	01400074 	movhi	r5,1
   15ccc:	2956bb04 	addi	r5,r5,23276
   15cd0:	00165e81 	jmpi	165e8 <_fwalk>

00015cd4 <__fp_unlock_all>:
   15cd4:	008000f4 	movhi	r2,3
   15cd8:	10b77b04 	addi	r2,r2,-8724
   15cdc:	11000017 	ldw	r4,0(r2)
   15ce0:	01400074 	movhi	r5,1
   15ce4:	29564f04 	addi	r5,r5,22844
   15ce8:	00165e81 	jmpi	165e8 <_fwalk>

00015cec <_malloc_trim_r>:
   15cec:	defffb04 	addi	sp,sp,-20
   15cf0:	dcc00315 	stw	r19,12(sp)
   15cf4:	04c000f4 	movhi	r19,3
   15cf8:	dc800215 	stw	r18,8(sp)
   15cfc:	dc400115 	stw	r17,4(sp)
   15d00:	dc000015 	stw	r16,0(sp)
   15d04:	dfc00415 	stw	ra,16(sp)
   15d08:	2821883a 	mov	r16,r5
   15d0c:	9cec1c04 	addi	r19,r19,-20368
   15d10:	2025883a 	mov	r18,r4
   15d14:	001f68c0 	call	1f68c <__malloc_lock>
   15d18:	98800217 	ldw	r2,8(r19)
   15d1c:	14400117 	ldw	r17,4(r2)
   15d20:	00bfff04 	movi	r2,-4
   15d24:	88a2703a 	and	r17,r17,r2
   15d28:	8c21c83a 	sub	r16,r17,r16
   15d2c:	8403fbc4 	addi	r16,r16,4079
   15d30:	8020d33a 	srli	r16,r16,12
   15d34:	0083ffc4 	movi	r2,4095
   15d38:	843fffc4 	addi	r16,r16,-1
   15d3c:	8020933a 	slli	r16,r16,12
   15d40:	1400060e 	bge	r2,r16,15d5c <_malloc_trim_r+0x70>
   15d44:	000b883a 	mov	r5,zero
   15d48:	9009883a 	mov	r4,r18
   15d4c:	000f0880 	call	f088 <_sbrk_r>
   15d50:	98c00217 	ldw	r3,8(r19)
   15d54:	1c47883a 	add	r3,r3,r17
   15d58:	10c00a26 	beq	r2,r3,15d84 <_malloc_trim_r+0x98>
   15d5c:	9009883a 	mov	r4,r18
   15d60:	001f6b00 	call	1f6b0 <__malloc_unlock>
   15d64:	0005883a 	mov	r2,zero
   15d68:	dfc00417 	ldw	ra,16(sp)
   15d6c:	dcc00317 	ldw	r19,12(sp)
   15d70:	dc800217 	ldw	r18,8(sp)
   15d74:	dc400117 	ldw	r17,4(sp)
   15d78:	dc000017 	ldw	r16,0(sp)
   15d7c:	dec00504 	addi	sp,sp,20
   15d80:	f800283a 	ret
   15d84:	040bc83a 	sub	r5,zero,r16
   15d88:	9009883a 	mov	r4,r18
   15d8c:	000f0880 	call	f088 <_sbrk_r>
   15d90:	00ffffc4 	movi	r3,-1
   15d94:	10c00d26 	beq	r2,r3,15dcc <_malloc_trim_r+0xe0>
   15d98:	00c000f4 	movhi	r3,3
   15d9c:	18c46604 	addi	r3,r3,4504
   15da0:	18800017 	ldw	r2,0(r3)
   15da4:	99000217 	ldw	r4,8(r19)
   15da8:	8c23c83a 	sub	r17,r17,r16
   15dac:	8c400054 	ori	r17,r17,1
   15db0:	1421c83a 	sub	r16,r2,r16
   15db4:	24400115 	stw	r17,4(r4)
   15db8:	9009883a 	mov	r4,r18
   15dbc:	1c000015 	stw	r16,0(r3)
   15dc0:	001f6b00 	call	1f6b0 <__malloc_unlock>
   15dc4:	00800044 	movi	r2,1
   15dc8:	003fe706 	br	15d68 <__alt_data_end+0xfc015d68>
   15dcc:	000b883a 	mov	r5,zero
   15dd0:	9009883a 	mov	r4,r18
   15dd4:	000f0880 	call	f088 <_sbrk_r>
   15dd8:	99000217 	ldw	r4,8(r19)
   15ddc:	014003c4 	movi	r5,15
   15de0:	1107c83a 	sub	r3,r2,r4
   15de4:	28ffdd0e 	bge	r5,r3,15d5c <__alt_data_end+0xfc015d5c>
   15de8:	014000f4 	movhi	r5,3
   15dec:	29777c04 	addi	r5,r5,-8720
   15df0:	29400017 	ldw	r5,0(r5)
   15df4:	18c00054 	ori	r3,r3,1
   15df8:	20c00115 	stw	r3,4(r4)
   15dfc:	00c000f4 	movhi	r3,3
   15e00:	1145c83a 	sub	r2,r2,r5
   15e04:	18c46604 	addi	r3,r3,4504
   15e08:	18800015 	stw	r2,0(r3)
   15e0c:	003fd306 	br	15d5c <__alt_data_end+0xfc015d5c>

00015e10 <_free_r>:
   15e10:	28004126 	beq	r5,zero,15f18 <_free_r+0x108>
   15e14:	defffd04 	addi	sp,sp,-12
   15e18:	dc400115 	stw	r17,4(sp)
   15e1c:	dc000015 	stw	r16,0(sp)
   15e20:	2023883a 	mov	r17,r4
   15e24:	2821883a 	mov	r16,r5
   15e28:	dfc00215 	stw	ra,8(sp)
   15e2c:	001f68c0 	call	1f68c <__malloc_lock>
   15e30:	81ffff17 	ldw	r7,-4(r16)
   15e34:	00bfff84 	movi	r2,-2
   15e38:	010000f4 	movhi	r4,3
   15e3c:	81bffe04 	addi	r6,r16,-8
   15e40:	3884703a 	and	r2,r7,r2
   15e44:	212c1c04 	addi	r4,r4,-20368
   15e48:	308b883a 	add	r5,r6,r2
   15e4c:	2a400117 	ldw	r9,4(r5)
   15e50:	22000217 	ldw	r8,8(r4)
   15e54:	00ffff04 	movi	r3,-4
   15e58:	48c6703a 	and	r3,r9,r3
   15e5c:	2a005726 	beq	r5,r8,15fbc <_free_r+0x1ac>
   15e60:	28c00115 	stw	r3,4(r5)
   15e64:	39c0004c 	andi	r7,r7,1
   15e68:	3800091e 	bne	r7,zero,15e90 <_free_r+0x80>
   15e6c:	823ffe17 	ldw	r8,-8(r16)
   15e70:	22400204 	addi	r9,r4,8
   15e74:	320dc83a 	sub	r6,r6,r8
   15e78:	31c00217 	ldw	r7,8(r6)
   15e7c:	1205883a 	add	r2,r2,r8
   15e80:	3a406526 	beq	r7,r9,16018 <_free_r+0x208>
   15e84:	32000317 	ldw	r8,12(r6)
   15e88:	3a000315 	stw	r8,12(r7)
   15e8c:	41c00215 	stw	r7,8(r8)
   15e90:	28cf883a 	add	r7,r5,r3
   15e94:	39c00117 	ldw	r7,4(r7)
   15e98:	39c0004c 	andi	r7,r7,1
   15e9c:	38003a26 	beq	r7,zero,15f88 <_free_r+0x178>
   15ea0:	10c00054 	ori	r3,r2,1
   15ea4:	30c00115 	stw	r3,4(r6)
   15ea8:	3087883a 	add	r3,r6,r2
   15eac:	18800015 	stw	r2,0(r3)
   15eb0:	00c07fc4 	movi	r3,511
   15eb4:	18801936 	bltu	r3,r2,15f1c <_free_r+0x10c>
   15eb8:	1004d0fa 	srli	r2,r2,3
   15ebc:	01c00044 	movi	r7,1
   15ec0:	21400117 	ldw	r5,4(r4)
   15ec4:	10c00044 	addi	r3,r2,1
   15ec8:	18c7883a 	add	r3,r3,r3
   15ecc:	1005d0ba 	srai	r2,r2,2
   15ed0:	18c7883a 	add	r3,r3,r3
   15ed4:	18c7883a 	add	r3,r3,r3
   15ed8:	1907883a 	add	r3,r3,r4
   15edc:	3884983a 	sll	r2,r7,r2
   15ee0:	19c00017 	ldw	r7,0(r3)
   15ee4:	1a3ffe04 	addi	r8,r3,-8
   15ee8:	1144b03a 	or	r2,r2,r5
   15eec:	32000315 	stw	r8,12(r6)
   15ef0:	31c00215 	stw	r7,8(r6)
   15ef4:	20800115 	stw	r2,4(r4)
   15ef8:	19800015 	stw	r6,0(r3)
   15efc:	39800315 	stw	r6,12(r7)
   15f00:	8809883a 	mov	r4,r17
   15f04:	dfc00217 	ldw	ra,8(sp)
   15f08:	dc400117 	ldw	r17,4(sp)
   15f0c:	dc000017 	ldw	r16,0(sp)
   15f10:	dec00304 	addi	sp,sp,12
   15f14:	001f6b01 	jmpi	1f6b0 <__malloc_unlock>
   15f18:	f800283a 	ret
   15f1c:	100ad27a 	srli	r5,r2,9
   15f20:	00c00104 	movi	r3,4
   15f24:	19404a36 	bltu	r3,r5,16050 <_free_r+0x240>
   15f28:	100ad1ba 	srli	r5,r2,6
   15f2c:	28c00e44 	addi	r3,r5,57
   15f30:	18c7883a 	add	r3,r3,r3
   15f34:	29400e04 	addi	r5,r5,56
   15f38:	18c7883a 	add	r3,r3,r3
   15f3c:	18c7883a 	add	r3,r3,r3
   15f40:	1909883a 	add	r4,r3,r4
   15f44:	20c00017 	ldw	r3,0(r4)
   15f48:	01c000f4 	movhi	r7,3
   15f4c:	213ffe04 	addi	r4,r4,-8
   15f50:	39ec1c04 	addi	r7,r7,-20368
   15f54:	20c04426 	beq	r4,r3,16068 <_free_r+0x258>
   15f58:	01ffff04 	movi	r7,-4
   15f5c:	19400117 	ldw	r5,4(r3)
   15f60:	29ca703a 	and	r5,r5,r7
   15f64:	1140022e 	bgeu	r2,r5,15f70 <_free_r+0x160>
   15f68:	18c00217 	ldw	r3,8(r3)
   15f6c:	20fffb1e 	bne	r4,r3,15f5c <__alt_data_end+0xfc015f5c>
   15f70:	19000317 	ldw	r4,12(r3)
   15f74:	31000315 	stw	r4,12(r6)
   15f78:	30c00215 	stw	r3,8(r6)
   15f7c:	21800215 	stw	r6,8(r4)
   15f80:	19800315 	stw	r6,12(r3)
   15f84:	003fde06 	br	15f00 <__alt_data_end+0xfc015f00>
   15f88:	29c00217 	ldw	r7,8(r5)
   15f8c:	10c5883a 	add	r2,r2,r3
   15f90:	00c000f4 	movhi	r3,3
   15f94:	18ec1e04 	addi	r3,r3,-20360
   15f98:	38c03b26 	beq	r7,r3,16088 <_free_r+0x278>
   15f9c:	2a000317 	ldw	r8,12(r5)
   15fa0:	11400054 	ori	r5,r2,1
   15fa4:	3087883a 	add	r3,r6,r2
   15fa8:	3a000315 	stw	r8,12(r7)
   15fac:	41c00215 	stw	r7,8(r8)
   15fb0:	31400115 	stw	r5,4(r6)
   15fb4:	18800015 	stw	r2,0(r3)
   15fb8:	003fbd06 	br	15eb0 <__alt_data_end+0xfc015eb0>
   15fbc:	39c0004c 	andi	r7,r7,1
   15fc0:	10c5883a 	add	r2,r2,r3
   15fc4:	3800071e 	bne	r7,zero,15fe4 <_free_r+0x1d4>
   15fc8:	81fffe17 	ldw	r7,-8(r16)
   15fcc:	31cdc83a 	sub	r6,r6,r7
   15fd0:	30c00317 	ldw	r3,12(r6)
   15fd4:	31400217 	ldw	r5,8(r6)
   15fd8:	11c5883a 	add	r2,r2,r7
   15fdc:	28c00315 	stw	r3,12(r5)
   15fe0:	19400215 	stw	r5,8(r3)
   15fe4:	10c00054 	ori	r3,r2,1
   15fe8:	30c00115 	stw	r3,4(r6)
   15fec:	00c000f4 	movhi	r3,3
   15ff0:	18f77d04 	addi	r3,r3,-8716
   15ff4:	18c00017 	ldw	r3,0(r3)
   15ff8:	21800215 	stw	r6,8(r4)
   15ffc:	10ffc036 	bltu	r2,r3,15f00 <__alt_data_end+0xfc015f00>
   16000:	008000f4 	movhi	r2,3
   16004:	10840e04 	addi	r2,r2,4152
   16008:	11400017 	ldw	r5,0(r2)
   1600c:	8809883a 	mov	r4,r17
   16010:	0015cec0 	call	15cec <_malloc_trim_r>
   16014:	003fba06 	br	15f00 <__alt_data_end+0xfc015f00>
   16018:	28c9883a 	add	r4,r5,r3
   1601c:	21000117 	ldw	r4,4(r4)
   16020:	2100004c 	andi	r4,r4,1
   16024:	2000391e 	bne	r4,zero,1610c <_free_r+0x2fc>
   16028:	29c00217 	ldw	r7,8(r5)
   1602c:	29000317 	ldw	r4,12(r5)
   16030:	1885883a 	add	r2,r3,r2
   16034:	10c00054 	ori	r3,r2,1
   16038:	39000315 	stw	r4,12(r7)
   1603c:	21c00215 	stw	r7,8(r4)
   16040:	30c00115 	stw	r3,4(r6)
   16044:	308d883a 	add	r6,r6,r2
   16048:	30800015 	stw	r2,0(r6)
   1604c:	003fac06 	br	15f00 <__alt_data_end+0xfc015f00>
   16050:	00c00504 	movi	r3,20
   16054:	19401536 	bltu	r3,r5,160ac <_free_r+0x29c>
   16058:	28c01704 	addi	r3,r5,92
   1605c:	18c7883a 	add	r3,r3,r3
   16060:	294016c4 	addi	r5,r5,91
   16064:	003fb406 	br	15f38 <__alt_data_end+0xfc015f38>
   16068:	280bd0ba 	srai	r5,r5,2
   1606c:	00c00044 	movi	r3,1
   16070:	38800117 	ldw	r2,4(r7)
   16074:	194a983a 	sll	r5,r3,r5
   16078:	2007883a 	mov	r3,r4
   1607c:	2884b03a 	or	r2,r5,r2
   16080:	38800115 	stw	r2,4(r7)
   16084:	003fbb06 	br	15f74 <__alt_data_end+0xfc015f74>
   16088:	21800515 	stw	r6,20(r4)
   1608c:	21800415 	stw	r6,16(r4)
   16090:	10c00054 	ori	r3,r2,1
   16094:	31c00315 	stw	r7,12(r6)
   16098:	31c00215 	stw	r7,8(r6)
   1609c:	30c00115 	stw	r3,4(r6)
   160a0:	308d883a 	add	r6,r6,r2
   160a4:	30800015 	stw	r2,0(r6)
   160a8:	003f9506 	br	15f00 <__alt_data_end+0xfc015f00>
   160ac:	00c01504 	movi	r3,84
   160b0:	19400536 	bltu	r3,r5,160c8 <_free_r+0x2b8>
   160b4:	100ad33a 	srli	r5,r2,12
   160b8:	28c01bc4 	addi	r3,r5,111
   160bc:	18c7883a 	add	r3,r3,r3
   160c0:	29401b84 	addi	r5,r5,110
   160c4:	003f9c06 	br	15f38 <__alt_data_end+0xfc015f38>
   160c8:	00c05504 	movi	r3,340
   160cc:	19400536 	bltu	r3,r5,160e4 <_free_r+0x2d4>
   160d0:	100ad3fa 	srli	r5,r2,15
   160d4:	28c01e04 	addi	r3,r5,120
   160d8:	18c7883a 	add	r3,r3,r3
   160dc:	29401dc4 	addi	r5,r5,119
   160e0:	003f9506 	br	15f38 <__alt_data_end+0xfc015f38>
   160e4:	00c15504 	movi	r3,1364
   160e8:	19400536 	bltu	r3,r5,16100 <_free_r+0x2f0>
   160ec:	100ad4ba 	srli	r5,r2,18
   160f0:	28c01f44 	addi	r3,r5,125
   160f4:	18c7883a 	add	r3,r3,r3
   160f8:	29401f04 	addi	r5,r5,124
   160fc:	003f8e06 	br	15f38 <__alt_data_end+0xfc015f38>
   16100:	00c03f84 	movi	r3,254
   16104:	01401f84 	movi	r5,126
   16108:	003f8b06 	br	15f38 <__alt_data_end+0xfc015f38>
   1610c:	10c00054 	ori	r3,r2,1
   16110:	30c00115 	stw	r3,4(r6)
   16114:	308d883a 	add	r6,r6,r2
   16118:	30800015 	stw	r2,0(r6)
   1611c:	003f7806 	br	15f00 <__alt_data_end+0xfc015f00>

00016120 <__sfvwrite_r>:
   16120:	30800217 	ldw	r2,8(r6)
   16124:	10006726 	beq	r2,zero,162c4 <__sfvwrite_r+0x1a4>
   16128:	28c0030b 	ldhu	r3,12(r5)
   1612c:	defff404 	addi	sp,sp,-48
   16130:	dd400715 	stw	r21,28(sp)
   16134:	dd000615 	stw	r20,24(sp)
   16138:	dc000215 	stw	r16,8(sp)
   1613c:	dfc00b15 	stw	ra,44(sp)
   16140:	df000a15 	stw	fp,40(sp)
   16144:	ddc00915 	stw	r23,36(sp)
   16148:	dd800815 	stw	r22,32(sp)
   1614c:	dcc00515 	stw	r19,20(sp)
   16150:	dc800415 	stw	r18,16(sp)
   16154:	dc400315 	stw	r17,12(sp)
   16158:	1880020c 	andi	r2,r3,8
   1615c:	2821883a 	mov	r16,r5
   16160:	202b883a 	mov	r21,r4
   16164:	3029883a 	mov	r20,r6
   16168:	10002726 	beq	r2,zero,16208 <__sfvwrite_r+0xe8>
   1616c:	28800417 	ldw	r2,16(r5)
   16170:	10002526 	beq	r2,zero,16208 <__sfvwrite_r+0xe8>
   16174:	1880008c 	andi	r2,r3,2
   16178:	a4400017 	ldw	r17,0(r20)
   1617c:	10002a26 	beq	r2,zero,16228 <__sfvwrite_r+0x108>
   16180:	05a00034 	movhi	r22,32768
   16184:	0027883a 	mov	r19,zero
   16188:	0025883a 	mov	r18,zero
   1618c:	b5bf0004 	addi	r22,r22,-1024
   16190:	980d883a 	mov	r6,r19
   16194:	a809883a 	mov	r4,r21
   16198:	90004626 	beq	r18,zero,162b4 <__sfvwrite_r+0x194>
   1619c:	900f883a 	mov	r7,r18
   161a0:	b480022e 	bgeu	r22,r18,161ac <__sfvwrite_r+0x8c>
   161a4:	01e00034 	movhi	r7,32768
   161a8:	39ff0004 	addi	r7,r7,-1024
   161ac:	80800917 	ldw	r2,36(r16)
   161b0:	81400717 	ldw	r5,28(r16)
   161b4:	103ee83a 	callr	r2
   161b8:	00805a0e 	bge	zero,r2,16324 <__sfvwrite_r+0x204>
   161bc:	a0c00217 	ldw	r3,8(r20)
   161c0:	98a7883a 	add	r19,r19,r2
   161c4:	90a5c83a 	sub	r18,r18,r2
   161c8:	1885c83a 	sub	r2,r3,r2
   161cc:	a0800215 	stw	r2,8(r20)
   161d0:	103fef1e 	bne	r2,zero,16190 <__alt_data_end+0xfc016190>
   161d4:	0005883a 	mov	r2,zero
   161d8:	dfc00b17 	ldw	ra,44(sp)
   161dc:	df000a17 	ldw	fp,40(sp)
   161e0:	ddc00917 	ldw	r23,36(sp)
   161e4:	dd800817 	ldw	r22,32(sp)
   161e8:	dd400717 	ldw	r21,28(sp)
   161ec:	dd000617 	ldw	r20,24(sp)
   161f0:	dcc00517 	ldw	r19,20(sp)
   161f4:	dc800417 	ldw	r18,16(sp)
   161f8:	dc400317 	ldw	r17,12(sp)
   161fc:	dc000217 	ldw	r16,8(sp)
   16200:	dec00c04 	addi	sp,sp,48
   16204:	f800283a 	ret
   16208:	800b883a 	mov	r5,r16
   1620c:	a809883a 	mov	r4,r21
   16210:	0013c900 	call	13c90 <__swsetup_r>
   16214:	1000ee1e 	bne	r2,zero,165d0 <__sfvwrite_r+0x4b0>
   16218:	80c0030b 	ldhu	r3,12(r16)
   1621c:	a4400017 	ldw	r17,0(r20)
   16220:	1880008c 	andi	r2,r3,2
   16224:	103fd61e 	bne	r2,zero,16180 <__alt_data_end+0xfc016180>
   16228:	1880004c 	andi	r2,r3,1
   1622c:	1000421e 	bne	r2,zero,16338 <__sfvwrite_r+0x218>
   16230:	0039883a 	mov	fp,zero
   16234:	0025883a 	mov	r18,zero
   16238:	90001a26 	beq	r18,zero,162a4 <__sfvwrite_r+0x184>
   1623c:	1880800c 	andi	r2,r3,512
   16240:	84c00217 	ldw	r19,8(r16)
   16244:	10002126 	beq	r2,zero,162cc <__sfvwrite_r+0x1ac>
   16248:	982f883a 	mov	r23,r19
   1624c:	94c09636 	bltu	r18,r19,164a8 <__sfvwrite_r+0x388>
   16250:	1881200c 	andi	r2,r3,1152
   16254:	1000a11e 	bne	r2,zero,164dc <__sfvwrite_r+0x3bc>
   16258:	81000017 	ldw	r4,0(r16)
   1625c:	b80d883a 	mov	r6,r23
   16260:	e00b883a 	mov	r5,fp
   16264:	0016aec0 	call	16aec <memmove>
   16268:	80c00217 	ldw	r3,8(r16)
   1626c:	81000017 	ldw	r4,0(r16)
   16270:	9005883a 	mov	r2,r18
   16274:	1ce7c83a 	sub	r19,r3,r19
   16278:	25cf883a 	add	r7,r4,r23
   1627c:	84c00215 	stw	r19,8(r16)
   16280:	81c00015 	stw	r7,0(r16)
   16284:	a0c00217 	ldw	r3,8(r20)
   16288:	e0b9883a 	add	fp,fp,r2
   1628c:	90a5c83a 	sub	r18,r18,r2
   16290:	18a7c83a 	sub	r19,r3,r2
   16294:	a4c00215 	stw	r19,8(r20)
   16298:	983fce26 	beq	r19,zero,161d4 <__alt_data_end+0xfc0161d4>
   1629c:	80c0030b 	ldhu	r3,12(r16)
   162a0:	903fe61e 	bne	r18,zero,1623c <__alt_data_end+0xfc01623c>
   162a4:	8f000017 	ldw	fp,0(r17)
   162a8:	8c800117 	ldw	r18,4(r17)
   162ac:	8c400204 	addi	r17,r17,8
   162b0:	003fe106 	br	16238 <__alt_data_end+0xfc016238>
   162b4:	8cc00017 	ldw	r19,0(r17)
   162b8:	8c800117 	ldw	r18,4(r17)
   162bc:	8c400204 	addi	r17,r17,8
   162c0:	003fb306 	br	16190 <__alt_data_end+0xfc016190>
   162c4:	0005883a 	mov	r2,zero
   162c8:	f800283a 	ret
   162cc:	81000017 	ldw	r4,0(r16)
   162d0:	80800417 	ldw	r2,16(r16)
   162d4:	11005a36 	bltu	r2,r4,16440 <__sfvwrite_r+0x320>
   162d8:	85c00517 	ldw	r23,20(r16)
   162dc:	95c05836 	bltu	r18,r23,16440 <__sfvwrite_r+0x320>
   162e0:	00a00034 	movhi	r2,32768
   162e4:	10bfffc4 	addi	r2,r2,-1
   162e8:	9009883a 	mov	r4,r18
   162ec:	1480012e 	bgeu	r2,r18,162f4 <__sfvwrite_r+0x1d4>
   162f0:	1009883a 	mov	r4,r2
   162f4:	b80b883a 	mov	r5,r23
   162f8:	000cd500 	call	cd50 <__divsi3>
   162fc:	b80b883a 	mov	r5,r23
   16300:	1009883a 	mov	r4,r2
   16304:	000cf040 	call	cf04 <__mulsi3>
   16308:	81400717 	ldw	r5,28(r16)
   1630c:	80c00917 	ldw	r3,36(r16)
   16310:	100f883a 	mov	r7,r2
   16314:	e00d883a 	mov	r6,fp
   16318:	a809883a 	mov	r4,r21
   1631c:	183ee83a 	callr	r3
   16320:	00bfd816 	blt	zero,r2,16284 <__alt_data_end+0xfc016284>
   16324:	8080030b 	ldhu	r2,12(r16)
   16328:	10801014 	ori	r2,r2,64
   1632c:	8080030d 	sth	r2,12(r16)
   16330:	00bfffc4 	movi	r2,-1
   16334:	003fa806 	br	161d8 <__alt_data_end+0xfc0161d8>
   16338:	0027883a 	mov	r19,zero
   1633c:	0011883a 	mov	r8,zero
   16340:	0039883a 	mov	fp,zero
   16344:	0025883a 	mov	r18,zero
   16348:	90001f26 	beq	r18,zero,163c8 <__sfvwrite_r+0x2a8>
   1634c:	40005a26 	beq	r8,zero,164b8 <__sfvwrite_r+0x398>
   16350:	982d883a 	mov	r22,r19
   16354:	94c0012e 	bgeu	r18,r19,1635c <__sfvwrite_r+0x23c>
   16358:	902d883a 	mov	r22,r18
   1635c:	81000017 	ldw	r4,0(r16)
   16360:	80800417 	ldw	r2,16(r16)
   16364:	b02f883a 	mov	r23,r22
   16368:	81c00517 	ldw	r7,20(r16)
   1636c:	1100032e 	bgeu	r2,r4,1637c <__sfvwrite_r+0x25c>
   16370:	80c00217 	ldw	r3,8(r16)
   16374:	38c7883a 	add	r3,r7,r3
   16378:	1d801816 	blt	r3,r22,163dc <__sfvwrite_r+0x2bc>
   1637c:	b1c03e16 	blt	r22,r7,16478 <__sfvwrite_r+0x358>
   16380:	80800917 	ldw	r2,36(r16)
   16384:	81400717 	ldw	r5,28(r16)
   16388:	e00d883a 	mov	r6,fp
   1638c:	da000115 	stw	r8,4(sp)
   16390:	a809883a 	mov	r4,r21
   16394:	103ee83a 	callr	r2
   16398:	102f883a 	mov	r23,r2
   1639c:	da000117 	ldw	r8,4(sp)
   163a0:	00bfe00e 	bge	zero,r2,16324 <__alt_data_end+0xfc016324>
   163a4:	9de7c83a 	sub	r19,r19,r23
   163a8:	98001f26 	beq	r19,zero,16428 <__sfvwrite_r+0x308>
   163ac:	a0800217 	ldw	r2,8(r20)
   163b0:	e5f9883a 	add	fp,fp,r23
   163b4:	95e5c83a 	sub	r18,r18,r23
   163b8:	15efc83a 	sub	r23,r2,r23
   163bc:	a5c00215 	stw	r23,8(r20)
   163c0:	b83f8426 	beq	r23,zero,161d4 <__alt_data_end+0xfc0161d4>
   163c4:	903fe11e 	bne	r18,zero,1634c <__alt_data_end+0xfc01634c>
   163c8:	8f000017 	ldw	fp,0(r17)
   163cc:	8c800117 	ldw	r18,4(r17)
   163d0:	0011883a 	mov	r8,zero
   163d4:	8c400204 	addi	r17,r17,8
   163d8:	003fdb06 	br	16348 <__alt_data_end+0xfc016348>
   163dc:	180d883a 	mov	r6,r3
   163e0:	e00b883a 	mov	r5,fp
   163e4:	da000115 	stw	r8,4(sp)
   163e8:	d8c00015 	stw	r3,0(sp)
   163ec:	0016aec0 	call	16aec <memmove>
   163f0:	d8c00017 	ldw	r3,0(sp)
   163f4:	80800017 	ldw	r2,0(r16)
   163f8:	800b883a 	mov	r5,r16
   163fc:	a809883a 	mov	r4,r21
   16400:	10c5883a 	add	r2,r2,r3
   16404:	80800015 	stw	r2,0(r16)
   16408:	d8c00015 	stw	r3,0(sp)
   1640c:	00158b00 	call	158b0 <_fflush_r>
   16410:	d8c00017 	ldw	r3,0(sp)
   16414:	da000117 	ldw	r8,4(sp)
   16418:	103fc21e 	bne	r2,zero,16324 <__alt_data_end+0xfc016324>
   1641c:	182f883a 	mov	r23,r3
   16420:	9de7c83a 	sub	r19,r19,r23
   16424:	983fe11e 	bne	r19,zero,163ac <__alt_data_end+0xfc0163ac>
   16428:	800b883a 	mov	r5,r16
   1642c:	a809883a 	mov	r4,r21
   16430:	00158b00 	call	158b0 <_fflush_r>
   16434:	103fbb1e 	bne	r2,zero,16324 <__alt_data_end+0xfc016324>
   16438:	0011883a 	mov	r8,zero
   1643c:	003fdb06 	br	163ac <__alt_data_end+0xfc0163ac>
   16440:	94c0012e 	bgeu	r18,r19,16448 <__sfvwrite_r+0x328>
   16444:	9027883a 	mov	r19,r18
   16448:	980d883a 	mov	r6,r19
   1644c:	e00b883a 	mov	r5,fp
   16450:	0016aec0 	call	16aec <memmove>
   16454:	80800217 	ldw	r2,8(r16)
   16458:	80c00017 	ldw	r3,0(r16)
   1645c:	14c5c83a 	sub	r2,r2,r19
   16460:	1cc7883a 	add	r3,r3,r19
   16464:	80800215 	stw	r2,8(r16)
   16468:	80c00015 	stw	r3,0(r16)
   1646c:	10004326 	beq	r2,zero,1657c <__sfvwrite_r+0x45c>
   16470:	9805883a 	mov	r2,r19
   16474:	003f8306 	br	16284 <__alt_data_end+0xfc016284>
   16478:	b00d883a 	mov	r6,r22
   1647c:	e00b883a 	mov	r5,fp
   16480:	da000115 	stw	r8,4(sp)
   16484:	0016aec0 	call	16aec <memmove>
   16488:	80800217 	ldw	r2,8(r16)
   1648c:	80c00017 	ldw	r3,0(r16)
   16490:	da000117 	ldw	r8,4(sp)
   16494:	1585c83a 	sub	r2,r2,r22
   16498:	1dad883a 	add	r22,r3,r22
   1649c:	80800215 	stw	r2,8(r16)
   164a0:	85800015 	stw	r22,0(r16)
   164a4:	003fbf06 	br	163a4 <__alt_data_end+0xfc0163a4>
   164a8:	81000017 	ldw	r4,0(r16)
   164ac:	9027883a 	mov	r19,r18
   164b0:	902f883a 	mov	r23,r18
   164b4:	003f6906 	br	1625c <__alt_data_end+0xfc01625c>
   164b8:	900d883a 	mov	r6,r18
   164bc:	01400284 	movi	r5,10
   164c0:	e009883a 	mov	r4,fp
   164c4:	0016a080 	call	16a08 <memchr>
   164c8:	10003e26 	beq	r2,zero,165c4 <__sfvwrite_r+0x4a4>
   164cc:	10800044 	addi	r2,r2,1
   164d0:	1727c83a 	sub	r19,r2,fp
   164d4:	02000044 	movi	r8,1
   164d8:	003f9d06 	br	16350 <__alt_data_end+0xfc016350>
   164dc:	80800517 	ldw	r2,20(r16)
   164e0:	81400417 	ldw	r5,16(r16)
   164e4:	81c00017 	ldw	r7,0(r16)
   164e8:	10a7883a 	add	r19,r2,r2
   164ec:	9885883a 	add	r2,r19,r2
   164f0:	1026d7fa 	srli	r19,r2,31
   164f4:	396dc83a 	sub	r22,r7,r5
   164f8:	b1000044 	addi	r4,r22,1
   164fc:	9885883a 	add	r2,r19,r2
   16500:	1027d07a 	srai	r19,r2,1
   16504:	2485883a 	add	r2,r4,r18
   16508:	980d883a 	mov	r6,r19
   1650c:	9880022e 	bgeu	r19,r2,16518 <__sfvwrite_r+0x3f8>
   16510:	1027883a 	mov	r19,r2
   16514:	100d883a 	mov	r6,r2
   16518:	18c1000c 	andi	r3,r3,1024
   1651c:	18001c26 	beq	r3,zero,16590 <__sfvwrite_r+0x470>
   16520:	300b883a 	mov	r5,r6
   16524:	a809883a 	mov	r4,r21
   16528:	000e4ac0 	call	e4ac <_malloc_r>
   1652c:	102f883a 	mov	r23,r2
   16530:	10002926 	beq	r2,zero,165d8 <__sfvwrite_r+0x4b8>
   16534:	81400417 	ldw	r5,16(r16)
   16538:	b00d883a 	mov	r6,r22
   1653c:	1009883a 	mov	r4,r2
   16540:	000ecb80 	call	ecb8 <memcpy>
   16544:	8080030b 	ldhu	r2,12(r16)
   16548:	00fedfc4 	movi	r3,-1153
   1654c:	10c4703a 	and	r2,r2,r3
   16550:	10802014 	ori	r2,r2,128
   16554:	8080030d 	sth	r2,12(r16)
   16558:	bd89883a 	add	r4,r23,r22
   1655c:	9d8fc83a 	sub	r7,r19,r22
   16560:	85c00415 	stw	r23,16(r16)
   16564:	84c00515 	stw	r19,20(r16)
   16568:	81000015 	stw	r4,0(r16)
   1656c:	9027883a 	mov	r19,r18
   16570:	81c00215 	stw	r7,8(r16)
   16574:	902f883a 	mov	r23,r18
   16578:	003f3806 	br	1625c <__alt_data_end+0xfc01625c>
   1657c:	800b883a 	mov	r5,r16
   16580:	a809883a 	mov	r4,r21
   16584:	00158b00 	call	158b0 <_fflush_r>
   16588:	103fb926 	beq	r2,zero,16470 <__alt_data_end+0xfc016470>
   1658c:	003f6506 	br	16324 <__alt_data_end+0xfc016324>
   16590:	a809883a 	mov	r4,r21
   16594:	0017e680 	call	17e68 <_realloc_r>
   16598:	102f883a 	mov	r23,r2
   1659c:	103fee1e 	bne	r2,zero,16558 <__alt_data_end+0xfc016558>
   165a0:	81400417 	ldw	r5,16(r16)
   165a4:	a809883a 	mov	r4,r21
   165a8:	0015e100 	call	15e10 <_free_r>
   165ac:	8080030b 	ldhu	r2,12(r16)
   165b0:	00ffdfc4 	movi	r3,-129
   165b4:	1884703a 	and	r2,r3,r2
   165b8:	00c00304 	movi	r3,12
   165bc:	a8c00015 	stw	r3,0(r21)
   165c0:	003f5906 	br	16328 <__alt_data_end+0xfc016328>
   165c4:	94c00044 	addi	r19,r18,1
   165c8:	02000044 	movi	r8,1
   165cc:	003f6006 	br	16350 <__alt_data_end+0xfc016350>
   165d0:	00bfffc4 	movi	r2,-1
   165d4:	003f0006 	br	161d8 <__alt_data_end+0xfc0161d8>
   165d8:	00800304 	movi	r2,12
   165dc:	a8800015 	stw	r2,0(r21)
   165e0:	8080030b 	ldhu	r2,12(r16)
   165e4:	003f5006 	br	16328 <__alt_data_end+0xfc016328>

000165e8 <_fwalk>:
   165e8:	defff704 	addi	sp,sp,-36
   165ec:	dd000415 	stw	r20,16(sp)
   165f0:	dfc00815 	stw	ra,32(sp)
   165f4:	ddc00715 	stw	r23,28(sp)
   165f8:	dd800615 	stw	r22,24(sp)
   165fc:	dd400515 	stw	r21,20(sp)
   16600:	dcc00315 	stw	r19,12(sp)
   16604:	dc800215 	stw	r18,8(sp)
   16608:	dc400115 	stw	r17,4(sp)
   1660c:	dc000015 	stw	r16,0(sp)
   16610:	2500b804 	addi	r20,r4,736
   16614:	a0002326 	beq	r20,zero,166a4 <_fwalk+0xbc>
   16618:	282b883a 	mov	r21,r5
   1661c:	002f883a 	mov	r23,zero
   16620:	05800044 	movi	r22,1
   16624:	04ffffc4 	movi	r19,-1
   16628:	a4400117 	ldw	r17,4(r20)
   1662c:	a4800217 	ldw	r18,8(r20)
   16630:	8c7fffc4 	addi	r17,r17,-1
   16634:	88000d16 	blt	r17,zero,1666c <_fwalk+0x84>
   16638:	94000304 	addi	r16,r18,12
   1663c:	94800384 	addi	r18,r18,14
   16640:	8080000b 	ldhu	r2,0(r16)
   16644:	8c7fffc4 	addi	r17,r17,-1
   16648:	813ffd04 	addi	r4,r16,-12
   1664c:	b080042e 	bgeu	r22,r2,16660 <_fwalk+0x78>
   16650:	9080000f 	ldh	r2,0(r18)
   16654:	14c00226 	beq	r2,r19,16660 <_fwalk+0x78>
   16658:	a83ee83a 	callr	r21
   1665c:	b8aeb03a 	or	r23,r23,r2
   16660:	84001a04 	addi	r16,r16,104
   16664:	94801a04 	addi	r18,r18,104
   16668:	8cfff51e 	bne	r17,r19,16640 <__alt_data_end+0xfc016640>
   1666c:	a5000017 	ldw	r20,0(r20)
   16670:	a03fed1e 	bne	r20,zero,16628 <__alt_data_end+0xfc016628>
   16674:	b805883a 	mov	r2,r23
   16678:	dfc00817 	ldw	ra,32(sp)
   1667c:	ddc00717 	ldw	r23,28(sp)
   16680:	dd800617 	ldw	r22,24(sp)
   16684:	dd400517 	ldw	r21,20(sp)
   16688:	dd000417 	ldw	r20,16(sp)
   1668c:	dcc00317 	ldw	r19,12(sp)
   16690:	dc800217 	ldw	r18,8(sp)
   16694:	dc400117 	ldw	r17,4(sp)
   16698:	dc000017 	ldw	r16,0(sp)
   1669c:	dec00904 	addi	sp,sp,36
   166a0:	f800283a 	ret
   166a4:	002f883a 	mov	r23,zero
   166a8:	003ff206 	br	16674 <__alt_data_end+0xfc016674>

000166ac <_fwalk_reent>:
   166ac:	defff704 	addi	sp,sp,-36
   166b0:	dd000415 	stw	r20,16(sp)
   166b4:	dfc00815 	stw	ra,32(sp)
   166b8:	ddc00715 	stw	r23,28(sp)
   166bc:	dd800615 	stw	r22,24(sp)
   166c0:	dd400515 	stw	r21,20(sp)
   166c4:	dcc00315 	stw	r19,12(sp)
   166c8:	dc800215 	stw	r18,8(sp)
   166cc:	dc400115 	stw	r17,4(sp)
   166d0:	dc000015 	stw	r16,0(sp)
   166d4:	2500b804 	addi	r20,r4,736
   166d8:	a0002326 	beq	r20,zero,16768 <_fwalk_reent+0xbc>
   166dc:	282b883a 	mov	r21,r5
   166e0:	2027883a 	mov	r19,r4
   166e4:	002f883a 	mov	r23,zero
   166e8:	05800044 	movi	r22,1
   166ec:	04bfffc4 	movi	r18,-1
   166f0:	a4400117 	ldw	r17,4(r20)
   166f4:	a4000217 	ldw	r16,8(r20)
   166f8:	8c7fffc4 	addi	r17,r17,-1
   166fc:	88000c16 	blt	r17,zero,16730 <_fwalk_reent+0x84>
   16700:	84000304 	addi	r16,r16,12
   16704:	8080000b 	ldhu	r2,0(r16)
   16708:	8c7fffc4 	addi	r17,r17,-1
   1670c:	817ffd04 	addi	r5,r16,-12
   16710:	b080052e 	bgeu	r22,r2,16728 <_fwalk_reent+0x7c>
   16714:	8080008f 	ldh	r2,2(r16)
   16718:	9809883a 	mov	r4,r19
   1671c:	14800226 	beq	r2,r18,16728 <_fwalk_reent+0x7c>
   16720:	a83ee83a 	callr	r21
   16724:	b8aeb03a 	or	r23,r23,r2
   16728:	84001a04 	addi	r16,r16,104
   1672c:	8cbff51e 	bne	r17,r18,16704 <__alt_data_end+0xfc016704>
   16730:	a5000017 	ldw	r20,0(r20)
   16734:	a03fee1e 	bne	r20,zero,166f0 <__alt_data_end+0xfc0166f0>
   16738:	b805883a 	mov	r2,r23
   1673c:	dfc00817 	ldw	ra,32(sp)
   16740:	ddc00717 	ldw	r23,28(sp)
   16744:	dd800617 	ldw	r22,24(sp)
   16748:	dd400517 	ldw	r21,20(sp)
   1674c:	dd000417 	ldw	r20,16(sp)
   16750:	dcc00317 	ldw	r19,12(sp)
   16754:	dc800217 	ldw	r18,8(sp)
   16758:	dc400117 	ldw	r17,4(sp)
   1675c:	dc000017 	ldw	r16,0(sp)
   16760:	dec00904 	addi	sp,sp,36
   16764:	f800283a 	ret
   16768:	002f883a 	mov	r23,zero
   1676c:	003ff206 	br	16738 <__alt_data_end+0xfc016738>

00016770 <_setlocale_r>:
   16770:	30001b26 	beq	r6,zero,167e0 <_setlocale_r+0x70>
   16774:	014000f4 	movhi	r5,3
   16778:	defffe04 	addi	sp,sp,-8
   1677c:	296a9f04 	addi	r5,r5,-21892
   16780:	3009883a 	mov	r4,r6
   16784:	dc000015 	stw	r16,0(sp)
   16788:	dfc00115 	stw	ra,4(sp)
   1678c:	3021883a 	mov	r16,r6
   16790:	000f4a40 	call	f4a4 <strcmp>
   16794:	1000061e 	bne	r2,zero,167b0 <_setlocale_r+0x40>
   16798:	008000f4 	movhi	r2,3
   1679c:	10aa7804 	addi	r2,r2,-22048
   167a0:	dfc00117 	ldw	ra,4(sp)
   167a4:	dc000017 	ldw	r16,0(sp)
   167a8:	dec00204 	addi	sp,sp,8
   167ac:	f800283a 	ret
   167b0:	014000f4 	movhi	r5,3
   167b4:	296a7804 	addi	r5,r5,-22048
   167b8:	8009883a 	mov	r4,r16
   167bc:	000f4a40 	call	f4a4 <strcmp>
   167c0:	103ff526 	beq	r2,zero,16798 <__alt_data_end+0xfc016798>
   167c4:	014000f4 	movhi	r5,3
   167c8:	296a8204 	addi	r5,r5,-22008
   167cc:	8009883a 	mov	r4,r16
   167d0:	000f4a40 	call	f4a4 <strcmp>
   167d4:	103ff026 	beq	r2,zero,16798 <__alt_data_end+0xfc016798>
   167d8:	0005883a 	mov	r2,zero
   167dc:	003ff006 	br	167a0 <__alt_data_end+0xfc0167a0>
   167e0:	008000f4 	movhi	r2,3
   167e4:	10aa7804 	addi	r2,r2,-22048
   167e8:	f800283a 	ret

000167ec <__locale_charset>:
   167ec:	008000f4 	movhi	r2,3
   167f0:	10ad2604 	addi	r2,r2,-19304
   167f4:	f800283a 	ret

000167f8 <__locale_mb_cur_max>:
   167f8:	008000f4 	movhi	r2,3
   167fc:	10b77e04 	addi	r2,r2,-8712
   16800:	10800017 	ldw	r2,0(r2)
   16804:	f800283a 	ret

00016808 <__locale_msgcharset>:
   16808:	008000f4 	movhi	r2,3
   1680c:	10ad1e04 	addi	r2,r2,-19336
   16810:	f800283a 	ret

00016814 <__locale_cjk_lang>:
   16814:	0005883a 	mov	r2,zero
   16818:	f800283a 	ret

0001681c <_localeconv_r>:
   1681c:	008000f4 	movhi	r2,3
   16820:	10ad2e04 	addi	r2,r2,-19272
   16824:	f800283a 	ret

00016828 <setlocale>:
   16828:	008000f4 	movhi	r2,3
   1682c:	10b77b04 	addi	r2,r2,-8724
   16830:	280d883a 	mov	r6,r5
   16834:	200b883a 	mov	r5,r4
   16838:	11000017 	ldw	r4,0(r2)
   1683c:	00167701 	jmpi	16770 <_setlocale_r>

00016840 <localeconv>:
   16840:	008000f4 	movhi	r2,3
   16844:	10ad2e04 	addi	r2,r2,-19272
   16848:	f800283a 	ret

0001684c <__smakebuf_r>:
   1684c:	2880030b 	ldhu	r2,12(r5)
   16850:	10c0008c 	andi	r3,r2,2
   16854:	1800411e 	bne	r3,zero,1695c <__smakebuf_r+0x110>
   16858:	deffec04 	addi	sp,sp,-80
   1685c:	dc000f15 	stw	r16,60(sp)
   16860:	2821883a 	mov	r16,r5
   16864:	2940038f 	ldh	r5,14(r5)
   16868:	dc401015 	stw	r17,64(sp)
   1686c:	dfc01315 	stw	ra,76(sp)
   16870:	dcc01215 	stw	r19,72(sp)
   16874:	dc801115 	stw	r18,68(sp)
   16878:	2023883a 	mov	r17,r4
   1687c:	28001c16 	blt	r5,zero,168f0 <__smakebuf_r+0xa4>
   16880:	d80d883a 	mov	r6,sp
   16884:	001b7d80 	call	1b7d8 <_fstat_r>
   16888:	10001816 	blt	r2,zero,168ec <__smakebuf_r+0xa0>
   1688c:	d8800117 	ldw	r2,4(sp)
   16890:	00e00014 	movui	r3,32768
   16894:	10bc000c 	andi	r2,r2,61440
   16898:	14c80020 	cmpeqi	r19,r2,8192
   1689c:	10c03726 	beq	r2,r3,1697c <__smakebuf_r+0x130>
   168a0:	80c0030b 	ldhu	r3,12(r16)
   168a4:	18c20014 	ori	r3,r3,2048
   168a8:	80c0030d 	sth	r3,12(r16)
   168ac:	00c80004 	movi	r3,8192
   168b0:	10c0521e 	bne	r2,r3,169fc <__smakebuf_r+0x1b0>
   168b4:	8140038f 	ldh	r5,14(r16)
   168b8:	8809883a 	mov	r4,r17
   168bc:	001b8340 	call	1b834 <_isatty_r>
   168c0:	10004c26 	beq	r2,zero,169f4 <__smakebuf_r+0x1a8>
   168c4:	8080030b 	ldhu	r2,12(r16)
   168c8:	80c010c4 	addi	r3,r16,67
   168cc:	80c00015 	stw	r3,0(r16)
   168d0:	10800054 	ori	r2,r2,1
   168d4:	8080030d 	sth	r2,12(r16)
   168d8:	00800044 	movi	r2,1
   168dc:	80c00415 	stw	r3,16(r16)
   168e0:	80800515 	stw	r2,20(r16)
   168e4:	04810004 	movi	r18,1024
   168e8:	00000706 	br	16908 <__smakebuf_r+0xbc>
   168ec:	8080030b 	ldhu	r2,12(r16)
   168f0:	10c0200c 	andi	r3,r2,128
   168f4:	18001f1e 	bne	r3,zero,16974 <__smakebuf_r+0x128>
   168f8:	04810004 	movi	r18,1024
   168fc:	10820014 	ori	r2,r2,2048
   16900:	8080030d 	sth	r2,12(r16)
   16904:	0027883a 	mov	r19,zero
   16908:	900b883a 	mov	r5,r18
   1690c:	8809883a 	mov	r4,r17
   16910:	000e4ac0 	call	e4ac <_malloc_r>
   16914:	10002c26 	beq	r2,zero,169c8 <__smakebuf_r+0x17c>
   16918:	80c0030b 	ldhu	r3,12(r16)
   1691c:	01000074 	movhi	r4,1
   16920:	21165104 	addi	r4,r4,22852
   16924:	89000f15 	stw	r4,60(r17)
   16928:	18c02014 	ori	r3,r3,128
   1692c:	80c0030d 	sth	r3,12(r16)
   16930:	80800015 	stw	r2,0(r16)
   16934:	80800415 	stw	r2,16(r16)
   16938:	84800515 	stw	r18,20(r16)
   1693c:	98001a1e 	bne	r19,zero,169a8 <__smakebuf_r+0x15c>
   16940:	dfc01317 	ldw	ra,76(sp)
   16944:	dcc01217 	ldw	r19,72(sp)
   16948:	dc801117 	ldw	r18,68(sp)
   1694c:	dc401017 	ldw	r17,64(sp)
   16950:	dc000f17 	ldw	r16,60(sp)
   16954:	dec01404 	addi	sp,sp,80
   16958:	f800283a 	ret
   1695c:	288010c4 	addi	r2,r5,67
   16960:	28800015 	stw	r2,0(r5)
   16964:	28800415 	stw	r2,16(r5)
   16968:	00800044 	movi	r2,1
   1696c:	28800515 	stw	r2,20(r5)
   16970:	f800283a 	ret
   16974:	04801004 	movi	r18,64
   16978:	003fe006 	br	168fc <__alt_data_end+0xfc0168fc>
   1697c:	81000a17 	ldw	r4,40(r16)
   16980:	00c000b4 	movhi	r3,2
   16984:	18e14604 	addi	r3,r3,-31464
   16988:	20ffc51e 	bne	r4,r3,168a0 <__alt_data_end+0xfc0168a0>
   1698c:	8080030b 	ldhu	r2,12(r16)
   16990:	04810004 	movi	r18,1024
   16994:	84801315 	stw	r18,76(r16)
   16998:	1484b03a 	or	r2,r2,r18
   1699c:	8080030d 	sth	r2,12(r16)
   169a0:	0027883a 	mov	r19,zero
   169a4:	003fd806 	br	16908 <__alt_data_end+0xfc016908>
   169a8:	8140038f 	ldh	r5,14(r16)
   169ac:	8809883a 	mov	r4,r17
   169b0:	001b8340 	call	1b834 <_isatty_r>
   169b4:	103fe226 	beq	r2,zero,16940 <__alt_data_end+0xfc016940>
   169b8:	8080030b 	ldhu	r2,12(r16)
   169bc:	10800054 	ori	r2,r2,1
   169c0:	8080030d 	sth	r2,12(r16)
   169c4:	003fde06 	br	16940 <__alt_data_end+0xfc016940>
   169c8:	8080030b 	ldhu	r2,12(r16)
   169cc:	10c0800c 	andi	r3,r2,512
   169d0:	183fdb1e 	bne	r3,zero,16940 <__alt_data_end+0xfc016940>
   169d4:	10800094 	ori	r2,r2,2
   169d8:	80c010c4 	addi	r3,r16,67
   169dc:	8080030d 	sth	r2,12(r16)
   169e0:	00800044 	movi	r2,1
   169e4:	80c00015 	stw	r3,0(r16)
   169e8:	80c00415 	stw	r3,16(r16)
   169ec:	80800515 	stw	r2,20(r16)
   169f0:	003fd306 	br	16940 <__alt_data_end+0xfc016940>
   169f4:	04810004 	movi	r18,1024
   169f8:	003fc306 	br	16908 <__alt_data_end+0xfc016908>
   169fc:	0027883a 	mov	r19,zero
   16a00:	04810004 	movi	r18,1024
   16a04:	003fc006 	br	16908 <__alt_data_end+0xfc016908>

00016a08 <memchr>:
   16a08:	208000cc 	andi	r2,r4,3
   16a0c:	280f883a 	mov	r7,r5
   16a10:	10003426 	beq	r2,zero,16ae4 <memchr+0xdc>
   16a14:	30bfffc4 	addi	r2,r6,-1
   16a18:	30001a26 	beq	r6,zero,16a84 <memchr+0x7c>
   16a1c:	20c00003 	ldbu	r3,0(r4)
   16a20:	29803fcc 	andi	r6,r5,255
   16a24:	30c0051e 	bne	r6,r3,16a3c <memchr+0x34>
   16a28:	00001806 	br	16a8c <memchr+0x84>
   16a2c:	10001526 	beq	r2,zero,16a84 <memchr+0x7c>
   16a30:	20c00003 	ldbu	r3,0(r4)
   16a34:	10bfffc4 	addi	r2,r2,-1
   16a38:	30c01426 	beq	r6,r3,16a8c <memchr+0x84>
   16a3c:	21000044 	addi	r4,r4,1
   16a40:	20c000cc 	andi	r3,r4,3
   16a44:	183ff91e 	bne	r3,zero,16a2c <__alt_data_end+0xfc016a2c>
   16a48:	020000c4 	movi	r8,3
   16a4c:	40801136 	bltu	r8,r2,16a94 <memchr+0x8c>
   16a50:	10000c26 	beq	r2,zero,16a84 <memchr+0x7c>
   16a54:	20c00003 	ldbu	r3,0(r4)
   16a58:	29403fcc 	andi	r5,r5,255
   16a5c:	28c00b26 	beq	r5,r3,16a8c <memchr+0x84>
   16a60:	20c00044 	addi	r3,r4,1
   16a64:	39803fcc 	andi	r6,r7,255
   16a68:	2089883a 	add	r4,r4,r2
   16a6c:	00000306 	br	16a7c <memchr+0x74>
   16a70:	18c00044 	addi	r3,r3,1
   16a74:	197fffc3 	ldbu	r5,-1(r3)
   16a78:	31400526 	beq	r6,r5,16a90 <memchr+0x88>
   16a7c:	1805883a 	mov	r2,r3
   16a80:	20fffb1e 	bne	r4,r3,16a70 <__alt_data_end+0xfc016a70>
   16a84:	0005883a 	mov	r2,zero
   16a88:	f800283a 	ret
   16a8c:	2005883a 	mov	r2,r4
   16a90:	f800283a 	ret
   16a94:	28c03fcc 	andi	r3,r5,255
   16a98:	1812923a 	slli	r9,r3,8
   16a9c:	02ffbff4 	movhi	r11,65279
   16aa0:	02a02074 	movhi	r10,32897
   16aa4:	48d2b03a 	or	r9,r9,r3
   16aa8:	4806943a 	slli	r3,r9,16
   16aac:	5affbfc4 	addi	r11,r11,-257
   16ab0:	52a02004 	addi	r10,r10,-32640
   16ab4:	48d2b03a 	or	r9,r9,r3
   16ab8:	20c00017 	ldw	r3,0(r4)
   16abc:	48c6f03a 	xor	r3,r9,r3
   16ac0:	1acd883a 	add	r6,r3,r11
   16ac4:	00c6303a 	nor	r3,zero,r3
   16ac8:	30c6703a 	and	r3,r6,r3
   16acc:	1a86703a 	and	r3,r3,r10
   16ad0:	183fe01e 	bne	r3,zero,16a54 <__alt_data_end+0xfc016a54>
   16ad4:	10bfff04 	addi	r2,r2,-4
   16ad8:	21000104 	addi	r4,r4,4
   16adc:	40bff636 	bltu	r8,r2,16ab8 <__alt_data_end+0xfc016ab8>
   16ae0:	003fdb06 	br	16a50 <__alt_data_end+0xfc016a50>
   16ae4:	3005883a 	mov	r2,r6
   16ae8:	003fd706 	br	16a48 <__alt_data_end+0xfc016a48>

00016aec <memmove>:
   16aec:	2005883a 	mov	r2,r4
   16af0:	29000b2e 	bgeu	r5,r4,16b20 <memmove+0x34>
   16af4:	298f883a 	add	r7,r5,r6
   16af8:	21c0092e 	bgeu	r4,r7,16b20 <memmove+0x34>
   16afc:	2187883a 	add	r3,r4,r6
   16b00:	198bc83a 	sub	r5,r3,r6
   16b04:	30004826 	beq	r6,zero,16c28 <memmove+0x13c>
   16b08:	39ffffc4 	addi	r7,r7,-1
   16b0c:	39000003 	ldbu	r4,0(r7)
   16b10:	18ffffc4 	addi	r3,r3,-1
   16b14:	19000005 	stb	r4,0(r3)
   16b18:	28fffb1e 	bne	r5,r3,16b08 <__alt_data_end+0xfc016b08>
   16b1c:	f800283a 	ret
   16b20:	00c003c4 	movi	r3,15
   16b24:	1980412e 	bgeu	r3,r6,16c2c <memmove+0x140>
   16b28:	2886b03a 	or	r3,r5,r2
   16b2c:	18c000cc 	andi	r3,r3,3
   16b30:	1800401e 	bne	r3,zero,16c34 <memmove+0x148>
   16b34:	33fffc04 	addi	r15,r6,-16
   16b38:	781ed13a 	srli	r15,r15,4
   16b3c:	28c00104 	addi	r3,r5,4
   16b40:	13400104 	addi	r13,r2,4
   16b44:	781c913a 	slli	r14,r15,4
   16b48:	2b000204 	addi	r12,r5,8
   16b4c:	12c00204 	addi	r11,r2,8
   16b50:	73800504 	addi	r14,r14,20
   16b54:	2a800304 	addi	r10,r5,12
   16b58:	12400304 	addi	r9,r2,12
   16b5c:	2b9d883a 	add	r14,r5,r14
   16b60:	2811883a 	mov	r8,r5
   16b64:	100f883a 	mov	r7,r2
   16b68:	41000017 	ldw	r4,0(r8)
   16b6c:	39c00404 	addi	r7,r7,16
   16b70:	18c00404 	addi	r3,r3,16
   16b74:	393ffc15 	stw	r4,-16(r7)
   16b78:	193ffc17 	ldw	r4,-16(r3)
   16b7c:	6b400404 	addi	r13,r13,16
   16b80:	5ac00404 	addi	r11,r11,16
   16b84:	693ffc15 	stw	r4,-16(r13)
   16b88:	61000017 	ldw	r4,0(r12)
   16b8c:	4a400404 	addi	r9,r9,16
   16b90:	42000404 	addi	r8,r8,16
   16b94:	593ffc15 	stw	r4,-16(r11)
   16b98:	51000017 	ldw	r4,0(r10)
   16b9c:	63000404 	addi	r12,r12,16
   16ba0:	52800404 	addi	r10,r10,16
   16ba4:	493ffc15 	stw	r4,-16(r9)
   16ba8:	1bbfef1e 	bne	r3,r14,16b68 <__alt_data_end+0xfc016b68>
   16bac:	79000044 	addi	r4,r15,1
   16bb0:	2008913a 	slli	r4,r4,4
   16bb4:	328003cc 	andi	r10,r6,15
   16bb8:	02c000c4 	movi	r11,3
   16bbc:	1107883a 	add	r3,r2,r4
   16bc0:	290b883a 	add	r5,r5,r4
   16bc4:	5a801e2e 	bgeu	r11,r10,16c40 <memmove+0x154>
   16bc8:	1813883a 	mov	r9,r3
   16bcc:	2811883a 	mov	r8,r5
   16bd0:	500f883a 	mov	r7,r10
   16bd4:	41000017 	ldw	r4,0(r8)
   16bd8:	4a400104 	addi	r9,r9,4
   16bdc:	39ffff04 	addi	r7,r7,-4
   16be0:	493fff15 	stw	r4,-4(r9)
   16be4:	42000104 	addi	r8,r8,4
   16be8:	59fffa36 	bltu	r11,r7,16bd4 <__alt_data_end+0xfc016bd4>
   16bec:	513fff04 	addi	r4,r10,-4
   16bf0:	2008d0ba 	srli	r4,r4,2
   16bf4:	318000cc 	andi	r6,r6,3
   16bf8:	21000044 	addi	r4,r4,1
   16bfc:	2109883a 	add	r4,r4,r4
   16c00:	2109883a 	add	r4,r4,r4
   16c04:	1907883a 	add	r3,r3,r4
   16c08:	290b883a 	add	r5,r5,r4
   16c0c:	30000b26 	beq	r6,zero,16c3c <memmove+0x150>
   16c10:	198d883a 	add	r6,r3,r6
   16c14:	29c00003 	ldbu	r7,0(r5)
   16c18:	18c00044 	addi	r3,r3,1
   16c1c:	29400044 	addi	r5,r5,1
   16c20:	19ffffc5 	stb	r7,-1(r3)
   16c24:	19bffb1e 	bne	r3,r6,16c14 <__alt_data_end+0xfc016c14>
   16c28:	f800283a 	ret
   16c2c:	1007883a 	mov	r3,r2
   16c30:	003ff606 	br	16c0c <__alt_data_end+0xfc016c0c>
   16c34:	1007883a 	mov	r3,r2
   16c38:	003ff506 	br	16c10 <__alt_data_end+0xfc016c10>
   16c3c:	f800283a 	ret
   16c40:	500d883a 	mov	r6,r10
   16c44:	003ff106 	br	16c0c <__alt_data_end+0xfc016c0c>

00016c48 <_Balloc>:
   16c48:	20801317 	ldw	r2,76(r4)
   16c4c:	defffc04 	addi	sp,sp,-16
   16c50:	dc400115 	stw	r17,4(sp)
   16c54:	dc000015 	stw	r16,0(sp)
   16c58:	dfc00315 	stw	ra,12(sp)
   16c5c:	dc800215 	stw	r18,8(sp)
   16c60:	2023883a 	mov	r17,r4
   16c64:	2821883a 	mov	r16,r5
   16c68:	10000f26 	beq	r2,zero,16ca8 <_Balloc+0x60>
   16c6c:	8407883a 	add	r3,r16,r16
   16c70:	18c7883a 	add	r3,r3,r3
   16c74:	10c7883a 	add	r3,r2,r3
   16c78:	18800017 	ldw	r2,0(r3)
   16c7c:	10001126 	beq	r2,zero,16cc4 <_Balloc+0x7c>
   16c80:	11000017 	ldw	r4,0(r2)
   16c84:	19000015 	stw	r4,0(r3)
   16c88:	10000415 	stw	zero,16(r2)
   16c8c:	10000315 	stw	zero,12(r2)
   16c90:	dfc00317 	ldw	ra,12(sp)
   16c94:	dc800217 	ldw	r18,8(sp)
   16c98:	dc400117 	ldw	r17,4(sp)
   16c9c:	dc000017 	ldw	r16,0(sp)
   16ca0:	dec00404 	addi	sp,sp,16
   16ca4:	f800283a 	ret
   16ca8:	01800844 	movi	r6,33
   16cac:	01400104 	movi	r5,4
   16cb0:	001b3f00 	call	1b3f0 <_calloc_r>
   16cb4:	88801315 	stw	r2,76(r17)
   16cb8:	103fec1e 	bne	r2,zero,16c6c <__alt_data_end+0xfc016c6c>
   16cbc:	0005883a 	mov	r2,zero
   16cc0:	003ff306 	br	16c90 <__alt_data_end+0xfc016c90>
   16cc4:	01400044 	movi	r5,1
   16cc8:	2c24983a 	sll	r18,r5,r16
   16ccc:	8809883a 	mov	r4,r17
   16cd0:	91800144 	addi	r6,r18,5
   16cd4:	318d883a 	add	r6,r6,r6
   16cd8:	318d883a 	add	r6,r6,r6
   16cdc:	001b3f00 	call	1b3f0 <_calloc_r>
   16ce0:	103ff626 	beq	r2,zero,16cbc <__alt_data_end+0xfc016cbc>
   16ce4:	14000115 	stw	r16,4(r2)
   16ce8:	14800215 	stw	r18,8(r2)
   16cec:	003fe606 	br	16c88 <__alt_data_end+0xfc016c88>

00016cf0 <_Bfree>:
   16cf0:	28000826 	beq	r5,zero,16d14 <_Bfree+0x24>
   16cf4:	28c00117 	ldw	r3,4(r5)
   16cf8:	20801317 	ldw	r2,76(r4)
   16cfc:	18c7883a 	add	r3,r3,r3
   16d00:	18c7883a 	add	r3,r3,r3
   16d04:	10c5883a 	add	r2,r2,r3
   16d08:	10c00017 	ldw	r3,0(r2)
   16d0c:	28c00015 	stw	r3,0(r5)
   16d10:	11400015 	stw	r5,0(r2)
   16d14:	f800283a 	ret

00016d18 <__multadd>:
   16d18:	defff704 	addi	sp,sp,-36
   16d1c:	dc800215 	stw	r18,8(sp)
   16d20:	2c800417 	ldw	r18,16(r5)
   16d24:	dd800615 	stw	r22,24(sp)
   16d28:	dd400515 	stw	r21,20(sp)
   16d2c:	dd000415 	stw	r20,16(sp)
   16d30:	dcc00315 	stw	r19,12(sp)
   16d34:	dc400115 	stw	r17,4(sp)
   16d38:	dc000015 	stw	r16,0(sp)
   16d3c:	dfc00815 	stw	ra,32(sp)
   16d40:	ddc00715 	stw	r23,28(sp)
   16d44:	2827883a 	mov	r19,r5
   16d48:	2029883a 	mov	r20,r4
   16d4c:	3023883a 	mov	r17,r6
   16d50:	3821883a 	mov	r16,r7
   16d54:	2d400504 	addi	r21,r5,20
   16d58:	002d883a 	mov	r22,zero
   16d5c:	adc00017 	ldw	r23,0(r21)
   16d60:	880b883a 	mov	r5,r17
   16d64:	ad400104 	addi	r21,r21,4
   16d68:	b93fffcc 	andi	r4,r23,65535
   16d6c:	000cf040 	call	cf04 <__mulsi3>
   16d70:	b808d43a 	srli	r4,r23,16
   16d74:	880b883a 	mov	r5,r17
   16d78:	1421883a 	add	r16,r2,r16
   16d7c:	000cf040 	call	cf04 <__mulsi3>
   16d80:	800ed43a 	srli	r7,r16,16
   16d84:	80ffffcc 	andi	r3,r16,65535
   16d88:	b5800044 	addi	r22,r22,1
   16d8c:	11c5883a 	add	r2,r2,r7
   16d90:	100e943a 	slli	r7,r2,16
   16d94:	1020d43a 	srli	r16,r2,16
   16d98:	38c7883a 	add	r3,r7,r3
   16d9c:	a8ffff15 	stw	r3,-4(r21)
   16da0:	b4bfee16 	blt	r22,r18,16d5c <__alt_data_end+0xfc016d5c>
   16da4:	80000926 	beq	r16,zero,16dcc <__multadd+0xb4>
   16da8:	98800217 	ldw	r2,8(r19)
   16dac:	9080130e 	bge	r18,r2,16dfc <__multadd+0xe4>
   16db0:	90800144 	addi	r2,r18,5
   16db4:	1085883a 	add	r2,r2,r2
   16db8:	1085883a 	add	r2,r2,r2
   16dbc:	9885883a 	add	r2,r19,r2
   16dc0:	14000015 	stw	r16,0(r2)
   16dc4:	94800044 	addi	r18,r18,1
   16dc8:	9c800415 	stw	r18,16(r19)
   16dcc:	9805883a 	mov	r2,r19
   16dd0:	dfc00817 	ldw	ra,32(sp)
   16dd4:	ddc00717 	ldw	r23,28(sp)
   16dd8:	dd800617 	ldw	r22,24(sp)
   16ddc:	dd400517 	ldw	r21,20(sp)
   16de0:	dd000417 	ldw	r20,16(sp)
   16de4:	dcc00317 	ldw	r19,12(sp)
   16de8:	dc800217 	ldw	r18,8(sp)
   16dec:	dc400117 	ldw	r17,4(sp)
   16df0:	dc000017 	ldw	r16,0(sp)
   16df4:	dec00904 	addi	sp,sp,36
   16df8:	f800283a 	ret
   16dfc:	99400117 	ldw	r5,4(r19)
   16e00:	a009883a 	mov	r4,r20
   16e04:	29400044 	addi	r5,r5,1
   16e08:	0016c480 	call	16c48 <_Balloc>
   16e0c:	99800417 	ldw	r6,16(r19)
   16e10:	99400304 	addi	r5,r19,12
   16e14:	11000304 	addi	r4,r2,12
   16e18:	31800084 	addi	r6,r6,2
   16e1c:	318d883a 	add	r6,r6,r6
   16e20:	318d883a 	add	r6,r6,r6
   16e24:	1023883a 	mov	r17,r2
   16e28:	000ecb80 	call	ecb8 <memcpy>
   16e2c:	98000a26 	beq	r19,zero,16e58 <__multadd+0x140>
   16e30:	98c00117 	ldw	r3,4(r19)
   16e34:	a0801317 	ldw	r2,76(r20)
   16e38:	18c7883a 	add	r3,r3,r3
   16e3c:	18c7883a 	add	r3,r3,r3
   16e40:	10c5883a 	add	r2,r2,r3
   16e44:	10c00017 	ldw	r3,0(r2)
   16e48:	98c00015 	stw	r3,0(r19)
   16e4c:	14c00015 	stw	r19,0(r2)
   16e50:	8827883a 	mov	r19,r17
   16e54:	003fd606 	br	16db0 <__alt_data_end+0xfc016db0>
   16e58:	8827883a 	mov	r19,r17
   16e5c:	003fd406 	br	16db0 <__alt_data_end+0xfc016db0>

00016e60 <__s2b>:
   16e60:	defff904 	addi	sp,sp,-28
   16e64:	dc400115 	stw	r17,4(sp)
   16e68:	dc000015 	stw	r16,0(sp)
   16e6c:	2023883a 	mov	r17,r4
   16e70:	2821883a 	mov	r16,r5
   16e74:	39000204 	addi	r4,r7,8
   16e78:	01400244 	movi	r5,9
   16e7c:	dcc00315 	stw	r19,12(sp)
   16e80:	dc800215 	stw	r18,8(sp)
   16e84:	dfc00615 	stw	ra,24(sp)
   16e88:	dd400515 	stw	r21,20(sp)
   16e8c:	dd000415 	stw	r20,16(sp)
   16e90:	3825883a 	mov	r18,r7
   16e94:	3027883a 	mov	r19,r6
   16e98:	000cd500 	call	cd50 <__divsi3>
   16e9c:	00c00044 	movi	r3,1
   16ea0:	000b883a 	mov	r5,zero
   16ea4:	1880030e 	bge	r3,r2,16eb4 <__s2b+0x54>
   16ea8:	18c7883a 	add	r3,r3,r3
   16eac:	29400044 	addi	r5,r5,1
   16eb0:	18bffd16 	blt	r3,r2,16ea8 <__alt_data_end+0xfc016ea8>
   16eb4:	8809883a 	mov	r4,r17
   16eb8:	0016c480 	call	16c48 <_Balloc>
   16ebc:	d8c00717 	ldw	r3,28(sp)
   16ec0:	10c00515 	stw	r3,20(r2)
   16ec4:	00c00044 	movi	r3,1
   16ec8:	10c00415 	stw	r3,16(r2)
   16ecc:	00c00244 	movi	r3,9
   16ed0:	1cc0210e 	bge	r3,r19,16f58 <__s2b+0xf8>
   16ed4:	80eb883a 	add	r21,r16,r3
   16ed8:	a829883a 	mov	r20,r21
   16edc:	84e1883a 	add	r16,r16,r19
   16ee0:	a1c00007 	ldb	r7,0(r20)
   16ee4:	01800284 	movi	r6,10
   16ee8:	a5000044 	addi	r20,r20,1
   16eec:	100b883a 	mov	r5,r2
   16ef0:	39fff404 	addi	r7,r7,-48
   16ef4:	8809883a 	mov	r4,r17
   16ef8:	0016d180 	call	16d18 <__multadd>
   16efc:	a43ff81e 	bne	r20,r16,16ee0 <__alt_data_end+0xfc016ee0>
   16f00:	ace1883a 	add	r16,r21,r19
   16f04:	843ffe04 	addi	r16,r16,-8
   16f08:	9c800a0e 	bge	r19,r18,16f34 <__s2b+0xd4>
   16f0c:	94e5c83a 	sub	r18,r18,r19
   16f10:	84a5883a 	add	r18,r16,r18
   16f14:	81c00007 	ldb	r7,0(r16)
   16f18:	01800284 	movi	r6,10
   16f1c:	84000044 	addi	r16,r16,1
   16f20:	100b883a 	mov	r5,r2
   16f24:	39fff404 	addi	r7,r7,-48
   16f28:	8809883a 	mov	r4,r17
   16f2c:	0016d180 	call	16d18 <__multadd>
   16f30:	84bff81e 	bne	r16,r18,16f14 <__alt_data_end+0xfc016f14>
   16f34:	dfc00617 	ldw	ra,24(sp)
   16f38:	dd400517 	ldw	r21,20(sp)
   16f3c:	dd000417 	ldw	r20,16(sp)
   16f40:	dcc00317 	ldw	r19,12(sp)
   16f44:	dc800217 	ldw	r18,8(sp)
   16f48:	dc400117 	ldw	r17,4(sp)
   16f4c:	dc000017 	ldw	r16,0(sp)
   16f50:	dec00704 	addi	sp,sp,28
   16f54:	f800283a 	ret
   16f58:	84000284 	addi	r16,r16,10
   16f5c:	1827883a 	mov	r19,r3
   16f60:	003fe906 	br	16f08 <__alt_data_end+0xfc016f08>

00016f64 <__hi0bits>:
   16f64:	20bfffec 	andhi	r2,r4,65535
   16f68:	1000141e 	bne	r2,zero,16fbc <__hi0bits+0x58>
   16f6c:	2008943a 	slli	r4,r4,16
   16f70:	00800404 	movi	r2,16
   16f74:	20ffc02c 	andhi	r3,r4,65280
   16f78:	1800021e 	bne	r3,zero,16f84 <__hi0bits+0x20>
   16f7c:	2008923a 	slli	r4,r4,8
   16f80:	10800204 	addi	r2,r2,8
   16f84:	20fc002c 	andhi	r3,r4,61440
   16f88:	1800021e 	bne	r3,zero,16f94 <__hi0bits+0x30>
   16f8c:	2008913a 	slli	r4,r4,4
   16f90:	10800104 	addi	r2,r2,4
   16f94:	20f0002c 	andhi	r3,r4,49152
   16f98:	1800031e 	bne	r3,zero,16fa8 <__hi0bits+0x44>
   16f9c:	2109883a 	add	r4,r4,r4
   16fa0:	10800084 	addi	r2,r2,2
   16fa4:	2109883a 	add	r4,r4,r4
   16fa8:	20000316 	blt	r4,zero,16fb8 <__hi0bits+0x54>
   16fac:	2110002c 	andhi	r4,r4,16384
   16fb0:	2000041e 	bne	r4,zero,16fc4 <__hi0bits+0x60>
   16fb4:	00800804 	movi	r2,32
   16fb8:	f800283a 	ret
   16fbc:	0005883a 	mov	r2,zero
   16fc0:	003fec06 	br	16f74 <__alt_data_end+0xfc016f74>
   16fc4:	10800044 	addi	r2,r2,1
   16fc8:	f800283a 	ret

00016fcc <__lo0bits>:
   16fcc:	20c00017 	ldw	r3,0(r4)
   16fd0:	188001cc 	andi	r2,r3,7
   16fd4:	10000826 	beq	r2,zero,16ff8 <__lo0bits+0x2c>
   16fd8:	1880004c 	andi	r2,r3,1
   16fdc:	1000211e 	bne	r2,zero,17064 <__lo0bits+0x98>
   16fe0:	1880008c 	andi	r2,r3,2
   16fe4:	1000211e 	bne	r2,zero,1706c <__lo0bits+0xa0>
   16fe8:	1806d0ba 	srli	r3,r3,2
   16fec:	00800084 	movi	r2,2
   16ff0:	20c00015 	stw	r3,0(r4)
   16ff4:	f800283a 	ret
   16ff8:	18bfffcc 	andi	r2,r3,65535
   16ffc:	10001326 	beq	r2,zero,1704c <__lo0bits+0x80>
   17000:	0005883a 	mov	r2,zero
   17004:	19403fcc 	andi	r5,r3,255
   17008:	2800021e 	bne	r5,zero,17014 <__lo0bits+0x48>
   1700c:	1806d23a 	srli	r3,r3,8
   17010:	10800204 	addi	r2,r2,8
   17014:	194003cc 	andi	r5,r3,15
   17018:	2800021e 	bne	r5,zero,17024 <__lo0bits+0x58>
   1701c:	1806d13a 	srli	r3,r3,4
   17020:	10800104 	addi	r2,r2,4
   17024:	194000cc 	andi	r5,r3,3
   17028:	2800021e 	bne	r5,zero,17034 <__lo0bits+0x68>
   1702c:	1806d0ba 	srli	r3,r3,2
   17030:	10800084 	addi	r2,r2,2
   17034:	1940004c 	andi	r5,r3,1
   17038:	2800081e 	bne	r5,zero,1705c <__lo0bits+0x90>
   1703c:	1806d07a 	srli	r3,r3,1
   17040:	1800051e 	bne	r3,zero,17058 <__lo0bits+0x8c>
   17044:	00800804 	movi	r2,32
   17048:	f800283a 	ret
   1704c:	1806d43a 	srli	r3,r3,16
   17050:	00800404 	movi	r2,16
   17054:	003feb06 	br	17004 <__alt_data_end+0xfc017004>
   17058:	10800044 	addi	r2,r2,1
   1705c:	20c00015 	stw	r3,0(r4)
   17060:	f800283a 	ret
   17064:	0005883a 	mov	r2,zero
   17068:	f800283a 	ret
   1706c:	1806d07a 	srli	r3,r3,1
   17070:	00800044 	movi	r2,1
   17074:	20c00015 	stw	r3,0(r4)
   17078:	f800283a 	ret

0001707c <__i2b>:
   1707c:	defffd04 	addi	sp,sp,-12
   17080:	dc000015 	stw	r16,0(sp)
   17084:	04000044 	movi	r16,1
   17088:	dc400115 	stw	r17,4(sp)
   1708c:	2823883a 	mov	r17,r5
   17090:	800b883a 	mov	r5,r16
   17094:	dfc00215 	stw	ra,8(sp)
   17098:	0016c480 	call	16c48 <_Balloc>
   1709c:	14400515 	stw	r17,20(r2)
   170a0:	14000415 	stw	r16,16(r2)
   170a4:	dfc00217 	ldw	ra,8(sp)
   170a8:	dc400117 	ldw	r17,4(sp)
   170ac:	dc000017 	ldw	r16,0(sp)
   170b0:	dec00304 	addi	sp,sp,12
   170b4:	f800283a 	ret

000170b8 <__multiply>:
   170b8:	deffef04 	addi	sp,sp,-68
   170bc:	dc400815 	stw	r17,32(sp)
   170c0:	dc000715 	stw	r16,28(sp)
   170c4:	34400417 	ldw	r17,16(r6)
   170c8:	2c000417 	ldw	r16,16(r5)
   170cc:	dd800d15 	stw	r22,52(sp)
   170d0:	dc800915 	stw	r18,36(sp)
   170d4:	dfc01015 	stw	ra,64(sp)
   170d8:	df000f15 	stw	fp,60(sp)
   170dc:	ddc00e15 	stw	r23,56(sp)
   170e0:	dd400c15 	stw	r21,48(sp)
   170e4:	dd000b15 	stw	r20,44(sp)
   170e8:	dcc00a15 	stw	r19,40(sp)
   170ec:	2825883a 	mov	r18,r5
   170f0:	302d883a 	mov	r22,r6
   170f4:	8440050e 	bge	r16,r17,1710c <__multiply+0x54>
   170f8:	8007883a 	mov	r3,r16
   170fc:	3025883a 	mov	r18,r6
   17100:	8821883a 	mov	r16,r17
   17104:	282d883a 	mov	r22,r5
   17108:	1823883a 	mov	r17,r3
   1710c:	90800217 	ldw	r2,8(r18)
   17110:	8447883a 	add	r3,r16,r17
   17114:	d8c00215 	stw	r3,8(sp)
   17118:	91400117 	ldw	r5,4(r18)
   1711c:	10c0010e 	bge	r2,r3,17124 <__multiply+0x6c>
   17120:	29400044 	addi	r5,r5,1
   17124:	0016c480 	call	16c48 <_Balloc>
   17128:	d8c00217 	ldw	r3,8(sp)
   1712c:	d8800615 	stw	r2,24(sp)
   17130:	18eb883a 	add	r21,r3,r3
   17134:	ad6b883a 	add	r21,r21,r21
   17138:	10c00504 	addi	r3,r2,20
   1713c:	1d6b883a 	add	r21,r3,r21
   17140:	d8c00115 	stw	r3,4(sp)
   17144:	dd400315 	stw	r21,12(sp)
   17148:	1805883a 	mov	r2,r3
   1714c:	1d40042e 	bgeu	r3,r21,17160 <__multiply+0xa8>
   17150:	d8c00317 	ldw	r3,12(sp)
   17154:	10000015 	stw	zero,0(r2)
   17158:	10800104 	addi	r2,r2,4
   1715c:	10fffc36 	bltu	r2,r3,17150 <__alt_data_end+0xfc017150>
   17160:	8c63883a 	add	r17,r17,r17
   17164:	b5800504 	addi	r22,r22,20
   17168:	8c63883a 	add	r17,r17,r17
   1716c:	94800504 	addi	r18,r18,20
   17170:	8421883a 	add	r16,r16,r16
   17174:	b463883a 	add	r17,r22,r17
   17178:	8421883a 	add	r16,r16,r16
   1717c:	dd800015 	stw	r22,0(sp)
   17180:	dc800415 	stw	r18,16(sp)
   17184:	dc400515 	stw	r17,20(sp)
   17188:	9429883a 	add	r20,r18,r16
   1718c:	b4404f2e 	bgeu	r22,r17,172cc <__multiply+0x214>
   17190:	d8c00017 	ldw	r3,0(sp)
   17194:	1c800017 	ldw	r18,0(r3)
   17198:	947fffcc 	andi	r17,r18,65535
   1719c:	88001e26 	beq	r17,zero,17218 <__multiply+0x160>
   171a0:	dd800117 	ldw	r22,4(sp)
   171a4:	dd400417 	ldw	r21,16(sp)
   171a8:	0027883a 	mov	r19,zero
   171ac:	ac800017 	ldw	r18,0(r21)
   171b0:	b4000017 	ldw	r16,0(r22)
   171b4:	880b883a 	mov	r5,r17
   171b8:	913fffcc 	andi	r4,r18,65535
   171bc:	000cf040 	call	cf04 <__mulsi3>
   171c0:	9008d43a 	srli	r4,r18,16
   171c4:	84bfffcc 	andi	r18,r16,65535
   171c8:	1485883a 	add	r2,r2,r18
   171cc:	14e5883a 	add	r18,r2,r19
   171d0:	8020d43a 	srli	r16,r16,16
   171d4:	9026d43a 	srli	r19,r18,16
   171d8:	880b883a 	mov	r5,r17
   171dc:	000cf040 	call	cf04 <__mulsi3>
   171e0:	1405883a 	add	r2,r2,r16
   171e4:	14e1883a 	add	r16,r2,r19
   171e8:	90ffffcc 	andi	r3,r18,65535
   171ec:	8024943a 	slli	r18,r16,16
   171f0:	ad400104 	addi	r21,r21,4
   171f4:	b005883a 	mov	r2,r22
   171f8:	90c6b03a 	or	r3,r18,r3
   171fc:	b0c00015 	stw	r3,0(r22)
   17200:	8026d43a 	srli	r19,r16,16
   17204:	b5800104 	addi	r22,r22,4
   17208:	ad3fe836 	bltu	r21,r20,171ac <__alt_data_end+0xfc0171ac>
   1720c:	d8c00017 	ldw	r3,0(sp)
   17210:	14c00115 	stw	r19,4(r2)
   17214:	1c800017 	ldw	r18,0(r3)
   17218:	9024d43a 	srli	r18,r18,16
   1721c:	90002226 	beq	r18,zero,172a8 <__multiply+0x1f0>
   17220:	d8c00117 	ldw	r3,4(sp)
   17224:	dd800417 	ldw	r22,16(sp)
   17228:	002f883a 	mov	r23,zero
   1722c:	1f000017 	ldw	fp,0(r3)
   17230:	1823883a 	mov	r17,r3
   17234:	182b883a 	mov	r21,r3
   17238:	e021883a 	mov	r16,fp
   1723c:	00000106 	br	17244 <__multiply+0x18c>
   17240:	982b883a 	mov	r21,r19
   17244:	b100000b 	ldhu	r4,0(r22)
   17248:	8020d43a 	srli	r16,r16,16
   1724c:	900b883a 	mov	r5,r18
   17250:	000cf040 	call	cf04 <__mulsi3>
   17254:	1405883a 	add	r2,r2,r16
   17258:	15ef883a 	add	r23,r2,r23
   1725c:	b804943a 	slli	r2,r23,16
   17260:	e0ffffcc 	andi	r3,fp,65535
   17264:	8c400104 	addi	r17,r17,4
   17268:	10c6b03a 	or	r3,r2,r3
   1726c:	88ffff15 	stw	r3,-4(r17)
   17270:	b5800104 	addi	r22,r22,4
   17274:	b13fff17 	ldw	r4,-4(r22)
   17278:	acc00104 	addi	r19,r21,4
   1727c:	900b883a 	mov	r5,r18
   17280:	2008d43a 	srli	r4,r4,16
   17284:	9c000017 	ldw	r16,0(r19)
   17288:	000cf040 	call	cf04 <__mulsi3>
   1728c:	b806d43a 	srli	r3,r23,16
   17290:	813fffcc 	andi	r4,r16,65535
   17294:	1105883a 	add	r2,r2,r4
   17298:	10f9883a 	add	fp,r2,r3
   1729c:	e02ed43a 	srli	r23,fp,16
   172a0:	b53fe736 	bltu	r22,r20,17240 <__alt_data_end+0xfc017240>
   172a4:	af000115 	stw	fp,4(r21)
   172a8:	d8c00017 	ldw	r3,0(sp)
   172ac:	d9000517 	ldw	r4,20(sp)
   172b0:	18c00104 	addi	r3,r3,4
   172b4:	d8c00015 	stw	r3,0(sp)
   172b8:	d8c00117 	ldw	r3,4(sp)
   172bc:	18c00104 	addi	r3,r3,4
   172c0:	d8c00115 	stw	r3,4(sp)
   172c4:	d8c00017 	ldw	r3,0(sp)
   172c8:	193fb136 	bltu	r3,r4,17190 <__alt_data_end+0xfc017190>
   172cc:	d8c00217 	ldw	r3,8(sp)
   172d0:	00c00c0e 	bge	zero,r3,17304 <__multiply+0x24c>
   172d4:	d8c00317 	ldw	r3,12(sp)
   172d8:	18bfff17 	ldw	r2,-4(r3)
   172dc:	1d7fff04 	addi	r21,r3,-4
   172e0:	10000326 	beq	r2,zero,172f0 <__multiply+0x238>
   172e4:	00000706 	br	17304 <__multiply+0x24c>
   172e8:	a8800017 	ldw	r2,0(r21)
   172ec:	1000051e 	bne	r2,zero,17304 <__multiply+0x24c>
   172f0:	d8c00217 	ldw	r3,8(sp)
   172f4:	ad7fff04 	addi	r21,r21,-4
   172f8:	18ffffc4 	addi	r3,r3,-1
   172fc:	d8c00215 	stw	r3,8(sp)
   17300:	183ff91e 	bne	r3,zero,172e8 <__alt_data_end+0xfc0172e8>
   17304:	d8c00617 	ldw	r3,24(sp)
   17308:	d9000217 	ldw	r4,8(sp)
   1730c:	1805883a 	mov	r2,r3
   17310:	19000415 	stw	r4,16(r3)
   17314:	dfc01017 	ldw	ra,64(sp)
   17318:	df000f17 	ldw	fp,60(sp)
   1731c:	ddc00e17 	ldw	r23,56(sp)
   17320:	dd800d17 	ldw	r22,52(sp)
   17324:	dd400c17 	ldw	r21,48(sp)
   17328:	dd000b17 	ldw	r20,44(sp)
   1732c:	dcc00a17 	ldw	r19,40(sp)
   17330:	dc800917 	ldw	r18,36(sp)
   17334:	dc400817 	ldw	r17,32(sp)
   17338:	dc000717 	ldw	r16,28(sp)
   1733c:	dec01104 	addi	sp,sp,68
   17340:	f800283a 	ret

00017344 <__pow5mult>:
   17344:	defffa04 	addi	sp,sp,-24
   17348:	dcc00315 	stw	r19,12(sp)
   1734c:	dc000015 	stw	r16,0(sp)
   17350:	dfc00515 	stw	ra,20(sp)
   17354:	dd000415 	stw	r20,16(sp)
   17358:	dc800215 	stw	r18,8(sp)
   1735c:	dc400115 	stw	r17,4(sp)
   17360:	308000cc 	andi	r2,r6,3
   17364:	3021883a 	mov	r16,r6
   17368:	2027883a 	mov	r19,r4
   1736c:	10002f1e 	bne	r2,zero,1742c <__pow5mult+0xe8>
   17370:	2825883a 	mov	r18,r5
   17374:	8021d0ba 	srai	r16,r16,2
   17378:	80001a26 	beq	r16,zero,173e4 <__pow5mult+0xa0>
   1737c:	9c401217 	ldw	r17,72(r19)
   17380:	8800061e 	bne	r17,zero,1739c <__pow5mult+0x58>
   17384:	00003406 	br	17458 <__pow5mult+0x114>
   17388:	8021d07a 	srai	r16,r16,1
   1738c:	80001526 	beq	r16,zero,173e4 <__pow5mult+0xa0>
   17390:	88800017 	ldw	r2,0(r17)
   17394:	10001c26 	beq	r2,zero,17408 <__pow5mult+0xc4>
   17398:	1023883a 	mov	r17,r2
   1739c:	8080004c 	andi	r2,r16,1
   173a0:	103ff926 	beq	r2,zero,17388 <__alt_data_end+0xfc017388>
   173a4:	880d883a 	mov	r6,r17
   173a8:	900b883a 	mov	r5,r18
   173ac:	9809883a 	mov	r4,r19
   173b0:	00170b80 	call	170b8 <__multiply>
   173b4:	90001b26 	beq	r18,zero,17424 <__pow5mult+0xe0>
   173b8:	91000117 	ldw	r4,4(r18)
   173bc:	98c01317 	ldw	r3,76(r19)
   173c0:	8021d07a 	srai	r16,r16,1
   173c4:	2109883a 	add	r4,r4,r4
   173c8:	2109883a 	add	r4,r4,r4
   173cc:	1907883a 	add	r3,r3,r4
   173d0:	19000017 	ldw	r4,0(r3)
   173d4:	91000015 	stw	r4,0(r18)
   173d8:	1c800015 	stw	r18,0(r3)
   173dc:	1025883a 	mov	r18,r2
   173e0:	803feb1e 	bne	r16,zero,17390 <__alt_data_end+0xfc017390>
   173e4:	9005883a 	mov	r2,r18
   173e8:	dfc00517 	ldw	ra,20(sp)
   173ec:	dd000417 	ldw	r20,16(sp)
   173f0:	dcc00317 	ldw	r19,12(sp)
   173f4:	dc800217 	ldw	r18,8(sp)
   173f8:	dc400117 	ldw	r17,4(sp)
   173fc:	dc000017 	ldw	r16,0(sp)
   17400:	dec00604 	addi	sp,sp,24
   17404:	f800283a 	ret
   17408:	880d883a 	mov	r6,r17
   1740c:	880b883a 	mov	r5,r17
   17410:	9809883a 	mov	r4,r19
   17414:	00170b80 	call	170b8 <__multiply>
   17418:	88800015 	stw	r2,0(r17)
   1741c:	10000015 	stw	zero,0(r2)
   17420:	003fdd06 	br	17398 <__alt_data_end+0xfc017398>
   17424:	1025883a 	mov	r18,r2
   17428:	003fd706 	br	17388 <__alt_data_end+0xfc017388>
   1742c:	10bfffc4 	addi	r2,r2,-1
   17430:	1085883a 	add	r2,r2,r2
   17434:	00c000f4 	movhi	r3,3
   17438:	18eaa204 	addi	r3,r3,-21880
   1743c:	1085883a 	add	r2,r2,r2
   17440:	1885883a 	add	r2,r3,r2
   17444:	11800017 	ldw	r6,0(r2)
   17448:	000f883a 	mov	r7,zero
   1744c:	0016d180 	call	16d18 <__multadd>
   17450:	1025883a 	mov	r18,r2
   17454:	003fc706 	br	17374 <__alt_data_end+0xfc017374>
   17458:	05000044 	movi	r20,1
   1745c:	a00b883a 	mov	r5,r20
   17460:	9809883a 	mov	r4,r19
   17464:	0016c480 	call	16c48 <_Balloc>
   17468:	1023883a 	mov	r17,r2
   1746c:	00809c44 	movi	r2,625
   17470:	88800515 	stw	r2,20(r17)
   17474:	8d000415 	stw	r20,16(r17)
   17478:	9c401215 	stw	r17,72(r19)
   1747c:	88000015 	stw	zero,0(r17)
   17480:	003fc606 	br	1739c <__alt_data_end+0xfc01739c>

00017484 <__lshift>:
   17484:	defff904 	addi	sp,sp,-28
   17488:	dd400515 	stw	r21,20(sp)
   1748c:	dcc00315 	stw	r19,12(sp)
   17490:	302bd17a 	srai	r21,r6,5
   17494:	2cc00417 	ldw	r19,16(r5)
   17498:	28800217 	ldw	r2,8(r5)
   1749c:	dd000415 	stw	r20,16(sp)
   174a0:	ace7883a 	add	r19,r21,r19
   174a4:	dc800215 	stw	r18,8(sp)
   174a8:	dc400115 	stw	r17,4(sp)
   174ac:	dc000015 	stw	r16,0(sp)
   174b0:	dfc00615 	stw	ra,24(sp)
   174b4:	9c000044 	addi	r16,r19,1
   174b8:	2823883a 	mov	r17,r5
   174bc:	3029883a 	mov	r20,r6
   174c0:	2025883a 	mov	r18,r4
   174c4:	29400117 	ldw	r5,4(r5)
   174c8:	1400030e 	bge	r2,r16,174d8 <__lshift+0x54>
   174cc:	1085883a 	add	r2,r2,r2
   174d0:	29400044 	addi	r5,r5,1
   174d4:	143ffd16 	blt	r2,r16,174cc <__alt_data_end+0xfc0174cc>
   174d8:	9009883a 	mov	r4,r18
   174dc:	0016c480 	call	16c48 <_Balloc>
   174e0:	10c00504 	addi	r3,r2,20
   174e4:	0540070e 	bge	zero,r21,17504 <__lshift+0x80>
   174e8:	ad6b883a 	add	r21,r21,r21
   174ec:	ad6b883a 	add	r21,r21,r21
   174f0:	1809883a 	mov	r4,r3
   174f4:	1d47883a 	add	r3,r3,r21
   174f8:	20000015 	stw	zero,0(r4)
   174fc:	21000104 	addi	r4,r4,4
   17500:	193ffd1e 	bne	r3,r4,174f8 <__alt_data_end+0xfc0174f8>
   17504:	8a000417 	ldw	r8,16(r17)
   17508:	89000504 	addi	r4,r17,20
   1750c:	a18007cc 	andi	r6,r20,31
   17510:	4211883a 	add	r8,r8,r8
   17514:	4211883a 	add	r8,r8,r8
   17518:	2211883a 	add	r8,r4,r8
   1751c:	30002326 	beq	r6,zero,175ac <__lshift+0x128>
   17520:	02400804 	movi	r9,32
   17524:	4993c83a 	sub	r9,r9,r6
   17528:	000b883a 	mov	r5,zero
   1752c:	21c00017 	ldw	r7,0(r4)
   17530:	1815883a 	mov	r10,r3
   17534:	18c00104 	addi	r3,r3,4
   17538:	398e983a 	sll	r7,r7,r6
   1753c:	21000104 	addi	r4,r4,4
   17540:	394ab03a 	or	r5,r7,r5
   17544:	197fff15 	stw	r5,-4(r3)
   17548:	217fff17 	ldw	r5,-4(r4)
   1754c:	2a4ad83a 	srl	r5,r5,r9
   17550:	223ff636 	bltu	r4,r8,1752c <__alt_data_end+0xfc01752c>
   17554:	51400115 	stw	r5,4(r10)
   17558:	28001a1e 	bne	r5,zero,175c4 <__lshift+0x140>
   1755c:	843fffc4 	addi	r16,r16,-1
   17560:	14000415 	stw	r16,16(r2)
   17564:	88000826 	beq	r17,zero,17588 <__lshift+0x104>
   17568:	89000117 	ldw	r4,4(r17)
   1756c:	90c01317 	ldw	r3,76(r18)
   17570:	2109883a 	add	r4,r4,r4
   17574:	2109883a 	add	r4,r4,r4
   17578:	1907883a 	add	r3,r3,r4
   1757c:	19000017 	ldw	r4,0(r3)
   17580:	89000015 	stw	r4,0(r17)
   17584:	1c400015 	stw	r17,0(r3)
   17588:	dfc00617 	ldw	ra,24(sp)
   1758c:	dd400517 	ldw	r21,20(sp)
   17590:	dd000417 	ldw	r20,16(sp)
   17594:	dcc00317 	ldw	r19,12(sp)
   17598:	dc800217 	ldw	r18,8(sp)
   1759c:	dc400117 	ldw	r17,4(sp)
   175a0:	dc000017 	ldw	r16,0(sp)
   175a4:	dec00704 	addi	sp,sp,28
   175a8:	f800283a 	ret
   175ac:	21400017 	ldw	r5,0(r4)
   175b0:	18c00104 	addi	r3,r3,4
   175b4:	21000104 	addi	r4,r4,4
   175b8:	197fff15 	stw	r5,-4(r3)
   175bc:	223ffb36 	bltu	r4,r8,175ac <__alt_data_end+0xfc0175ac>
   175c0:	003fe606 	br	1755c <__alt_data_end+0xfc01755c>
   175c4:	9c000084 	addi	r16,r19,2
   175c8:	003fe406 	br	1755c <__alt_data_end+0xfc01755c>

000175cc <__mcmp>:
   175cc:	20800417 	ldw	r2,16(r4)
   175d0:	28c00417 	ldw	r3,16(r5)
   175d4:	10c5c83a 	sub	r2,r2,r3
   175d8:	1000111e 	bne	r2,zero,17620 <__mcmp+0x54>
   175dc:	18c7883a 	add	r3,r3,r3
   175e0:	18c7883a 	add	r3,r3,r3
   175e4:	21000504 	addi	r4,r4,20
   175e8:	29400504 	addi	r5,r5,20
   175ec:	20c5883a 	add	r2,r4,r3
   175f0:	28cb883a 	add	r5,r5,r3
   175f4:	00000106 	br	175fc <__mcmp+0x30>
   175f8:	20800a2e 	bgeu	r4,r2,17624 <__mcmp+0x58>
   175fc:	10bfff04 	addi	r2,r2,-4
   17600:	297fff04 	addi	r5,r5,-4
   17604:	11800017 	ldw	r6,0(r2)
   17608:	28c00017 	ldw	r3,0(r5)
   1760c:	30fffa26 	beq	r6,r3,175f8 <__alt_data_end+0xfc0175f8>
   17610:	30c00236 	bltu	r6,r3,1761c <__mcmp+0x50>
   17614:	00800044 	movi	r2,1
   17618:	f800283a 	ret
   1761c:	00bfffc4 	movi	r2,-1
   17620:	f800283a 	ret
   17624:	0005883a 	mov	r2,zero
   17628:	f800283a 	ret

0001762c <__mdiff>:
   1762c:	28c00417 	ldw	r3,16(r5)
   17630:	30800417 	ldw	r2,16(r6)
   17634:	defffa04 	addi	sp,sp,-24
   17638:	dcc00315 	stw	r19,12(sp)
   1763c:	dc800215 	stw	r18,8(sp)
   17640:	dfc00515 	stw	ra,20(sp)
   17644:	dd000415 	stw	r20,16(sp)
   17648:	dc400115 	stw	r17,4(sp)
   1764c:	dc000015 	stw	r16,0(sp)
   17650:	1887c83a 	sub	r3,r3,r2
   17654:	2825883a 	mov	r18,r5
   17658:	3027883a 	mov	r19,r6
   1765c:	1800141e 	bne	r3,zero,176b0 <__mdiff+0x84>
   17660:	1085883a 	add	r2,r2,r2
   17664:	1085883a 	add	r2,r2,r2
   17668:	2a000504 	addi	r8,r5,20
   1766c:	34000504 	addi	r16,r6,20
   17670:	4087883a 	add	r3,r8,r2
   17674:	8085883a 	add	r2,r16,r2
   17678:	00000106 	br	17680 <__mdiff+0x54>
   1767c:	40c0592e 	bgeu	r8,r3,177e4 <__mdiff+0x1b8>
   17680:	18ffff04 	addi	r3,r3,-4
   17684:	10bfff04 	addi	r2,r2,-4
   17688:	19c00017 	ldw	r7,0(r3)
   1768c:	11400017 	ldw	r5,0(r2)
   17690:	397ffa26 	beq	r7,r5,1767c <__alt_data_end+0xfc01767c>
   17694:	3940592e 	bgeu	r7,r5,177fc <__mdiff+0x1d0>
   17698:	9005883a 	mov	r2,r18
   1769c:	4023883a 	mov	r17,r8
   176a0:	9825883a 	mov	r18,r19
   176a4:	05000044 	movi	r20,1
   176a8:	1027883a 	mov	r19,r2
   176ac:	00000406 	br	176c0 <__mdiff+0x94>
   176b0:	18005616 	blt	r3,zero,1780c <__mdiff+0x1e0>
   176b4:	34400504 	addi	r17,r6,20
   176b8:	2c000504 	addi	r16,r5,20
   176bc:	0029883a 	mov	r20,zero
   176c0:	91400117 	ldw	r5,4(r18)
   176c4:	0016c480 	call	16c48 <_Balloc>
   176c8:	92400417 	ldw	r9,16(r18)
   176cc:	9b000417 	ldw	r12,16(r19)
   176d0:	12c00504 	addi	r11,r2,20
   176d4:	4a51883a 	add	r8,r9,r9
   176d8:	6319883a 	add	r12,r12,r12
   176dc:	4211883a 	add	r8,r8,r8
   176e0:	6319883a 	add	r12,r12,r12
   176e4:	15000315 	stw	r20,12(r2)
   176e8:	8211883a 	add	r8,r16,r8
   176ec:	8b19883a 	add	r12,r17,r12
   176f0:	0007883a 	mov	r3,zero
   176f4:	81400017 	ldw	r5,0(r16)
   176f8:	89c00017 	ldw	r7,0(r17)
   176fc:	59800104 	addi	r6,r11,4
   17700:	293fffcc 	andi	r4,r5,65535
   17704:	20c7883a 	add	r3,r4,r3
   17708:	393fffcc 	andi	r4,r7,65535
   1770c:	1909c83a 	sub	r4,r3,r4
   17710:	280ad43a 	srli	r5,r5,16
   17714:	380ed43a 	srli	r7,r7,16
   17718:	2007d43a 	srai	r3,r4,16
   1771c:	213fffcc 	andi	r4,r4,65535
   17720:	29cbc83a 	sub	r5,r5,r7
   17724:	28c7883a 	add	r3,r5,r3
   17728:	180a943a 	slli	r5,r3,16
   1772c:	8c400104 	addi	r17,r17,4
   17730:	84000104 	addi	r16,r16,4
   17734:	2908b03a 	or	r4,r5,r4
   17738:	59000015 	stw	r4,0(r11)
   1773c:	1807d43a 	srai	r3,r3,16
   17740:	3015883a 	mov	r10,r6
   17744:	3017883a 	mov	r11,r6
   17748:	8b3fea36 	bltu	r17,r12,176f4 <__alt_data_end+0xfc0176f4>
   1774c:	8200162e 	bgeu	r16,r8,177a8 <__mdiff+0x17c>
   17750:	8017883a 	mov	r11,r16
   17754:	59400017 	ldw	r5,0(r11)
   17758:	31800104 	addi	r6,r6,4
   1775c:	5ac00104 	addi	r11,r11,4
   17760:	293fffcc 	andi	r4,r5,65535
   17764:	20c7883a 	add	r3,r4,r3
   17768:	280ed43a 	srli	r7,r5,16
   1776c:	180bd43a 	srai	r5,r3,16
   17770:	193fffcc 	andi	r4,r3,65535
   17774:	3947883a 	add	r3,r7,r5
   17778:	180a943a 	slli	r5,r3,16
   1777c:	1807d43a 	srai	r3,r3,16
   17780:	2908b03a 	or	r4,r5,r4
   17784:	313fff15 	stw	r4,-4(r6)
   17788:	5a3ff236 	bltu	r11,r8,17754 <__alt_data_end+0xfc017754>
   1778c:	0406303a 	nor	r3,zero,r16
   17790:	1a07883a 	add	r3,r3,r8
   17794:	1806d0ba 	srli	r3,r3,2
   17798:	18c00044 	addi	r3,r3,1
   1779c:	18c7883a 	add	r3,r3,r3
   177a0:	18c7883a 	add	r3,r3,r3
   177a4:	50d5883a 	add	r10,r10,r3
   177a8:	50ffff04 	addi	r3,r10,-4
   177ac:	2000041e 	bne	r4,zero,177c0 <__mdiff+0x194>
   177b0:	18ffff04 	addi	r3,r3,-4
   177b4:	19000017 	ldw	r4,0(r3)
   177b8:	4a7fffc4 	addi	r9,r9,-1
   177bc:	203ffc26 	beq	r4,zero,177b0 <__alt_data_end+0xfc0177b0>
   177c0:	12400415 	stw	r9,16(r2)
   177c4:	dfc00517 	ldw	ra,20(sp)
   177c8:	dd000417 	ldw	r20,16(sp)
   177cc:	dcc00317 	ldw	r19,12(sp)
   177d0:	dc800217 	ldw	r18,8(sp)
   177d4:	dc400117 	ldw	r17,4(sp)
   177d8:	dc000017 	ldw	r16,0(sp)
   177dc:	dec00604 	addi	sp,sp,24
   177e0:	f800283a 	ret
   177e4:	000b883a 	mov	r5,zero
   177e8:	0016c480 	call	16c48 <_Balloc>
   177ec:	00c00044 	movi	r3,1
   177f0:	10c00415 	stw	r3,16(r2)
   177f4:	10000515 	stw	zero,20(r2)
   177f8:	003ff206 	br	177c4 <__alt_data_end+0xfc0177c4>
   177fc:	8023883a 	mov	r17,r16
   17800:	0029883a 	mov	r20,zero
   17804:	4021883a 	mov	r16,r8
   17808:	003fad06 	br	176c0 <__alt_data_end+0xfc0176c0>
   1780c:	9005883a 	mov	r2,r18
   17810:	94400504 	addi	r17,r18,20
   17814:	9c000504 	addi	r16,r19,20
   17818:	9825883a 	mov	r18,r19
   1781c:	05000044 	movi	r20,1
   17820:	1027883a 	mov	r19,r2
   17824:	003fa606 	br	176c0 <__alt_data_end+0xfc0176c0>

00017828 <__ulp>:
   17828:	295ffc2c 	andhi	r5,r5,32752
   1782c:	00bf3034 	movhi	r2,64704
   17830:	2887883a 	add	r3,r5,r2
   17834:	00c0020e 	bge	zero,r3,17840 <__ulp+0x18>
   17838:	0005883a 	mov	r2,zero
   1783c:	f800283a 	ret
   17840:	00c7c83a 	sub	r3,zero,r3
   17844:	1807d53a 	srai	r3,r3,20
   17848:	008004c4 	movi	r2,19
   1784c:	10c00b0e 	bge	r2,r3,1787c <__ulp+0x54>
   17850:	18bffb04 	addi	r2,r3,-20
   17854:	01000784 	movi	r4,30
   17858:	0007883a 	mov	r3,zero
   1785c:	20800516 	blt	r4,r2,17874 <__ulp+0x4c>
   17860:	010007c4 	movi	r4,31
   17864:	2089c83a 	sub	r4,r4,r2
   17868:	00800044 	movi	r2,1
   1786c:	1104983a 	sll	r2,r2,r4
   17870:	f800283a 	ret
   17874:	00800044 	movi	r2,1
   17878:	f800283a 	ret
   1787c:	01400234 	movhi	r5,8
   17880:	28c7d83a 	sra	r3,r5,r3
   17884:	0005883a 	mov	r2,zero
   17888:	f800283a 	ret

0001788c <__b2d>:
   1788c:	defffa04 	addi	sp,sp,-24
   17890:	dc000015 	stw	r16,0(sp)
   17894:	24000417 	ldw	r16,16(r4)
   17898:	dc400115 	stw	r17,4(sp)
   1789c:	24400504 	addi	r17,r4,20
   178a0:	8421883a 	add	r16,r16,r16
   178a4:	8421883a 	add	r16,r16,r16
   178a8:	8c21883a 	add	r16,r17,r16
   178ac:	dc800215 	stw	r18,8(sp)
   178b0:	84bfff17 	ldw	r18,-4(r16)
   178b4:	dd000415 	stw	r20,16(sp)
   178b8:	dcc00315 	stw	r19,12(sp)
   178bc:	9009883a 	mov	r4,r18
   178c0:	2829883a 	mov	r20,r5
   178c4:	dfc00515 	stw	ra,20(sp)
   178c8:	0016f640 	call	16f64 <__hi0bits>
   178cc:	00c00804 	movi	r3,32
   178d0:	1889c83a 	sub	r4,r3,r2
   178d4:	a1000015 	stw	r4,0(r20)
   178d8:	01000284 	movi	r4,10
   178dc:	84ffff04 	addi	r19,r16,-4
   178e0:	20801216 	blt	r4,r2,1792c <__b2d+0xa0>
   178e4:	018002c4 	movi	r6,11
   178e8:	308dc83a 	sub	r6,r6,r2
   178ec:	9186d83a 	srl	r3,r18,r6
   178f0:	18cffc34 	orhi	r3,r3,16368
   178f4:	8cc0212e 	bgeu	r17,r19,1797c <__b2d+0xf0>
   178f8:	813ffe17 	ldw	r4,-8(r16)
   178fc:	218cd83a 	srl	r6,r4,r6
   17900:	10800544 	addi	r2,r2,21
   17904:	9084983a 	sll	r2,r18,r2
   17908:	1184b03a 	or	r2,r2,r6
   1790c:	dfc00517 	ldw	ra,20(sp)
   17910:	dd000417 	ldw	r20,16(sp)
   17914:	dcc00317 	ldw	r19,12(sp)
   17918:	dc800217 	ldw	r18,8(sp)
   1791c:	dc400117 	ldw	r17,4(sp)
   17920:	dc000017 	ldw	r16,0(sp)
   17924:	dec00604 	addi	sp,sp,24
   17928:	f800283a 	ret
   1792c:	8cc00f2e 	bgeu	r17,r19,1796c <__b2d+0xe0>
   17930:	117ffd44 	addi	r5,r2,-11
   17934:	80bffe17 	ldw	r2,-8(r16)
   17938:	28000e26 	beq	r5,zero,17974 <__b2d+0xe8>
   1793c:	1949c83a 	sub	r4,r3,r5
   17940:	9164983a 	sll	r18,r18,r5
   17944:	1106d83a 	srl	r3,r2,r4
   17948:	81bffe04 	addi	r6,r16,-8
   1794c:	948ffc34 	orhi	r18,r18,16368
   17950:	90c6b03a 	or	r3,r18,r3
   17954:	89800e2e 	bgeu	r17,r6,17990 <__b2d+0x104>
   17958:	81bffd17 	ldw	r6,-12(r16)
   1795c:	1144983a 	sll	r2,r2,r5
   17960:	310ad83a 	srl	r5,r6,r4
   17964:	2884b03a 	or	r2,r5,r2
   17968:	003fe806 	br	1790c <__alt_data_end+0xfc01790c>
   1796c:	10bffd44 	addi	r2,r2,-11
   17970:	1000041e 	bne	r2,zero,17984 <__b2d+0xf8>
   17974:	90cffc34 	orhi	r3,r18,16368
   17978:	003fe406 	br	1790c <__alt_data_end+0xfc01790c>
   1797c:	000d883a 	mov	r6,zero
   17980:	003fdf06 	br	17900 <__alt_data_end+0xfc017900>
   17984:	90a4983a 	sll	r18,r18,r2
   17988:	0005883a 	mov	r2,zero
   1798c:	003ff906 	br	17974 <__alt_data_end+0xfc017974>
   17990:	1144983a 	sll	r2,r2,r5
   17994:	003fdd06 	br	1790c <__alt_data_end+0xfc01790c>

00017998 <__d2b>:
   17998:	defff804 	addi	sp,sp,-32
   1799c:	dc000215 	stw	r16,8(sp)
   179a0:	3021883a 	mov	r16,r6
   179a4:	dc400315 	stw	r17,12(sp)
   179a8:	8022907a 	slli	r17,r16,1
   179ac:	dd000615 	stw	r20,24(sp)
   179b0:	2829883a 	mov	r20,r5
   179b4:	01400044 	movi	r5,1
   179b8:	dcc00515 	stw	r19,20(sp)
   179bc:	dc800415 	stw	r18,16(sp)
   179c0:	dfc00715 	stw	ra,28(sp)
   179c4:	3825883a 	mov	r18,r7
   179c8:	8822d57a 	srli	r17,r17,21
   179cc:	0016c480 	call	16c48 <_Balloc>
   179d0:	1027883a 	mov	r19,r2
   179d4:	00800434 	movhi	r2,16
   179d8:	10bfffc4 	addi	r2,r2,-1
   179dc:	808c703a 	and	r6,r16,r2
   179e0:	88000126 	beq	r17,zero,179e8 <__d2b+0x50>
   179e4:	31800434 	orhi	r6,r6,16
   179e8:	d9800015 	stw	r6,0(sp)
   179ec:	a0002426 	beq	r20,zero,17a80 <__d2b+0xe8>
   179f0:	d9000104 	addi	r4,sp,4
   179f4:	dd000115 	stw	r20,4(sp)
   179f8:	0016fcc0 	call	16fcc <__lo0bits>
   179fc:	d8c00017 	ldw	r3,0(sp)
   17a00:	10002f1e 	bne	r2,zero,17ac0 <__d2b+0x128>
   17a04:	d9000117 	ldw	r4,4(sp)
   17a08:	99000515 	stw	r4,20(r19)
   17a0c:	1821003a 	cmpeq	r16,r3,zero
   17a10:	01000084 	movi	r4,2
   17a14:	2421c83a 	sub	r16,r4,r16
   17a18:	98c00615 	stw	r3,24(r19)
   17a1c:	9c000415 	stw	r16,16(r19)
   17a20:	88001f1e 	bne	r17,zero,17aa0 <__d2b+0x108>
   17a24:	10bef384 	addi	r2,r2,-1074
   17a28:	90800015 	stw	r2,0(r18)
   17a2c:	00900034 	movhi	r2,16384
   17a30:	10bfffc4 	addi	r2,r2,-1
   17a34:	8085883a 	add	r2,r16,r2
   17a38:	1085883a 	add	r2,r2,r2
   17a3c:	1085883a 	add	r2,r2,r2
   17a40:	9885883a 	add	r2,r19,r2
   17a44:	11000517 	ldw	r4,20(r2)
   17a48:	8020917a 	slli	r16,r16,5
   17a4c:	0016f640 	call	16f64 <__hi0bits>
   17a50:	d8c00817 	ldw	r3,32(sp)
   17a54:	8085c83a 	sub	r2,r16,r2
   17a58:	18800015 	stw	r2,0(r3)
   17a5c:	9805883a 	mov	r2,r19
   17a60:	dfc00717 	ldw	ra,28(sp)
   17a64:	dd000617 	ldw	r20,24(sp)
   17a68:	dcc00517 	ldw	r19,20(sp)
   17a6c:	dc800417 	ldw	r18,16(sp)
   17a70:	dc400317 	ldw	r17,12(sp)
   17a74:	dc000217 	ldw	r16,8(sp)
   17a78:	dec00804 	addi	sp,sp,32
   17a7c:	f800283a 	ret
   17a80:	d809883a 	mov	r4,sp
   17a84:	0016fcc0 	call	16fcc <__lo0bits>
   17a88:	d8c00017 	ldw	r3,0(sp)
   17a8c:	04000044 	movi	r16,1
   17a90:	9c000415 	stw	r16,16(r19)
   17a94:	98c00515 	stw	r3,20(r19)
   17a98:	10800804 	addi	r2,r2,32
   17a9c:	883fe126 	beq	r17,zero,17a24 <__alt_data_end+0xfc017a24>
   17aa0:	00c00d44 	movi	r3,53
   17aa4:	8c7ef344 	addi	r17,r17,-1075
   17aa8:	88a3883a 	add	r17,r17,r2
   17aac:	1885c83a 	sub	r2,r3,r2
   17ab0:	d8c00817 	ldw	r3,32(sp)
   17ab4:	94400015 	stw	r17,0(r18)
   17ab8:	18800015 	stw	r2,0(r3)
   17abc:	003fe706 	br	17a5c <__alt_data_end+0xfc017a5c>
   17ac0:	01000804 	movi	r4,32
   17ac4:	2089c83a 	sub	r4,r4,r2
   17ac8:	1908983a 	sll	r4,r3,r4
   17acc:	d9400117 	ldw	r5,4(sp)
   17ad0:	1886d83a 	srl	r3,r3,r2
   17ad4:	2148b03a 	or	r4,r4,r5
   17ad8:	99000515 	stw	r4,20(r19)
   17adc:	d8c00015 	stw	r3,0(sp)
   17ae0:	003fca06 	br	17a0c <__alt_data_end+0xfc017a0c>

00017ae4 <__ratio>:
   17ae4:	defff904 	addi	sp,sp,-28
   17ae8:	dc400315 	stw	r17,12(sp)
   17aec:	2823883a 	mov	r17,r5
   17af0:	d9400104 	addi	r5,sp,4
   17af4:	dfc00615 	stw	ra,24(sp)
   17af8:	dcc00515 	stw	r19,20(sp)
   17afc:	dc800415 	stw	r18,16(sp)
   17b00:	2027883a 	mov	r19,r4
   17b04:	dc000215 	stw	r16,8(sp)
   17b08:	001788c0 	call	1788c <__b2d>
   17b0c:	d80b883a 	mov	r5,sp
   17b10:	8809883a 	mov	r4,r17
   17b14:	1025883a 	mov	r18,r2
   17b18:	1821883a 	mov	r16,r3
   17b1c:	001788c0 	call	1788c <__b2d>
   17b20:	8a000417 	ldw	r8,16(r17)
   17b24:	99000417 	ldw	r4,16(r19)
   17b28:	d9400117 	ldw	r5,4(sp)
   17b2c:	2209c83a 	sub	r4,r4,r8
   17b30:	2010917a 	slli	r8,r4,5
   17b34:	d9000017 	ldw	r4,0(sp)
   17b38:	2909c83a 	sub	r4,r5,r4
   17b3c:	4109883a 	add	r4,r8,r4
   17b40:	01000e0e 	bge	zero,r4,17b7c <__ratio+0x98>
   17b44:	2008953a 	slli	r4,r4,20
   17b48:	2421883a 	add	r16,r4,r16
   17b4c:	100d883a 	mov	r6,r2
   17b50:	180f883a 	mov	r7,r3
   17b54:	9009883a 	mov	r4,r18
   17b58:	800b883a 	mov	r5,r16
   17b5c:	001cf9c0 	call	1cf9c <__divdf3>
   17b60:	dfc00617 	ldw	ra,24(sp)
   17b64:	dcc00517 	ldw	r19,20(sp)
   17b68:	dc800417 	ldw	r18,16(sp)
   17b6c:	dc400317 	ldw	r17,12(sp)
   17b70:	dc000217 	ldw	r16,8(sp)
   17b74:	dec00704 	addi	sp,sp,28
   17b78:	f800283a 	ret
   17b7c:	2008953a 	slli	r4,r4,20
   17b80:	1907c83a 	sub	r3,r3,r4
   17b84:	003ff106 	br	17b4c <__alt_data_end+0xfc017b4c>

00017b88 <_mprec_log10>:
   17b88:	defffe04 	addi	sp,sp,-8
   17b8c:	dc000015 	stw	r16,0(sp)
   17b90:	dfc00115 	stw	ra,4(sp)
   17b94:	008005c4 	movi	r2,23
   17b98:	2021883a 	mov	r16,r4
   17b9c:	11000d0e 	bge	r2,r4,17bd4 <_mprec_log10+0x4c>
   17ba0:	0005883a 	mov	r2,zero
   17ba4:	00cffc34 	movhi	r3,16368
   17ba8:	843fffc4 	addi	r16,r16,-1
   17bac:	000d883a 	mov	r6,zero
   17bb0:	01d00934 	movhi	r7,16420
   17bb4:	1009883a 	mov	r4,r2
   17bb8:	180b883a 	mov	r5,r3
   17bbc:	001dbc40 	call	1dbc4 <__muldf3>
   17bc0:	803ff91e 	bne	r16,zero,17ba8 <__alt_data_end+0xfc017ba8>
   17bc4:	dfc00117 	ldw	ra,4(sp)
   17bc8:	dc000017 	ldw	r16,0(sp)
   17bcc:	dec00204 	addi	sp,sp,8
   17bd0:	f800283a 	ret
   17bd4:	202090fa 	slli	r16,r4,3
   17bd8:	008000f4 	movhi	r2,3
   17bdc:	10aab904 	addi	r2,r2,-21788
   17be0:	1421883a 	add	r16,r2,r16
   17be4:	80800017 	ldw	r2,0(r16)
   17be8:	80c00117 	ldw	r3,4(r16)
   17bec:	dfc00117 	ldw	ra,4(sp)
   17bf0:	dc000017 	ldw	r16,0(sp)
   17bf4:	dec00204 	addi	sp,sp,8
   17bf8:	f800283a 	ret

00017bfc <__copybits>:
   17bfc:	297fffc4 	addi	r5,r5,-1
   17c00:	280fd17a 	srai	r7,r5,5
   17c04:	30c00417 	ldw	r3,16(r6)
   17c08:	30800504 	addi	r2,r6,20
   17c0c:	39c00044 	addi	r7,r7,1
   17c10:	18c7883a 	add	r3,r3,r3
   17c14:	39cf883a 	add	r7,r7,r7
   17c18:	18c7883a 	add	r3,r3,r3
   17c1c:	39cf883a 	add	r7,r7,r7
   17c20:	10c7883a 	add	r3,r2,r3
   17c24:	21cf883a 	add	r7,r4,r7
   17c28:	10c00d2e 	bgeu	r2,r3,17c60 <__copybits+0x64>
   17c2c:	200b883a 	mov	r5,r4
   17c30:	12000017 	ldw	r8,0(r2)
   17c34:	29400104 	addi	r5,r5,4
   17c38:	10800104 	addi	r2,r2,4
   17c3c:	2a3fff15 	stw	r8,-4(r5)
   17c40:	10fffb36 	bltu	r2,r3,17c30 <__alt_data_end+0xfc017c30>
   17c44:	1985c83a 	sub	r2,r3,r6
   17c48:	10bffac4 	addi	r2,r2,-21
   17c4c:	1004d0ba 	srli	r2,r2,2
   17c50:	10800044 	addi	r2,r2,1
   17c54:	1085883a 	add	r2,r2,r2
   17c58:	1085883a 	add	r2,r2,r2
   17c5c:	2089883a 	add	r4,r4,r2
   17c60:	21c0032e 	bgeu	r4,r7,17c70 <__copybits+0x74>
   17c64:	20000015 	stw	zero,0(r4)
   17c68:	21000104 	addi	r4,r4,4
   17c6c:	21fffd36 	bltu	r4,r7,17c64 <__alt_data_end+0xfc017c64>
   17c70:	f800283a 	ret

00017c74 <__any_on>:
   17c74:	20c00417 	ldw	r3,16(r4)
   17c78:	2805d17a 	srai	r2,r5,5
   17c7c:	21000504 	addi	r4,r4,20
   17c80:	18800d0e 	bge	r3,r2,17cb8 <__any_on+0x44>
   17c84:	18c7883a 	add	r3,r3,r3
   17c88:	18c7883a 	add	r3,r3,r3
   17c8c:	20c7883a 	add	r3,r4,r3
   17c90:	20c0192e 	bgeu	r4,r3,17cf8 <__any_on+0x84>
   17c94:	18bfff17 	ldw	r2,-4(r3)
   17c98:	18ffff04 	addi	r3,r3,-4
   17c9c:	1000041e 	bne	r2,zero,17cb0 <__any_on+0x3c>
   17ca0:	20c0142e 	bgeu	r4,r3,17cf4 <__any_on+0x80>
   17ca4:	18ffff04 	addi	r3,r3,-4
   17ca8:	19400017 	ldw	r5,0(r3)
   17cac:	283ffc26 	beq	r5,zero,17ca0 <__alt_data_end+0xfc017ca0>
   17cb0:	00800044 	movi	r2,1
   17cb4:	f800283a 	ret
   17cb8:	10c00a0e 	bge	r2,r3,17ce4 <__any_on+0x70>
   17cbc:	1085883a 	add	r2,r2,r2
   17cc0:	1085883a 	add	r2,r2,r2
   17cc4:	294007cc 	andi	r5,r5,31
   17cc8:	2087883a 	add	r3,r4,r2
   17ccc:	283ff026 	beq	r5,zero,17c90 <__alt_data_end+0xfc017c90>
   17cd0:	19800017 	ldw	r6,0(r3)
   17cd4:	3144d83a 	srl	r2,r6,r5
   17cd8:	114a983a 	sll	r5,r2,r5
   17cdc:	317ff41e 	bne	r6,r5,17cb0 <__alt_data_end+0xfc017cb0>
   17ce0:	003feb06 	br	17c90 <__alt_data_end+0xfc017c90>
   17ce4:	1085883a 	add	r2,r2,r2
   17ce8:	1085883a 	add	r2,r2,r2
   17cec:	2087883a 	add	r3,r4,r2
   17cf0:	003fe706 	br	17c90 <__alt_data_end+0xfc017c90>
   17cf4:	f800283a 	ret
   17cf8:	0005883a 	mov	r2,zero
   17cfc:	f800283a 	ret

00017d00 <_putc_r>:
   17d00:	defffc04 	addi	sp,sp,-16
   17d04:	dc000215 	stw	r16,8(sp)
   17d08:	dfc00315 	stw	ra,12(sp)
   17d0c:	2021883a 	mov	r16,r4
   17d10:	20000226 	beq	r4,zero,17d1c <_putc_r+0x1c>
   17d14:	20800e17 	ldw	r2,56(r4)
   17d18:	10001b26 	beq	r2,zero,17d88 <_putc_r+0x88>
   17d1c:	30800217 	ldw	r2,8(r6)
   17d20:	10bfffc4 	addi	r2,r2,-1
   17d24:	30800215 	stw	r2,8(r6)
   17d28:	10000a16 	blt	r2,zero,17d54 <_putc_r+0x54>
   17d2c:	30800017 	ldw	r2,0(r6)
   17d30:	11400005 	stb	r5,0(r2)
   17d34:	30800017 	ldw	r2,0(r6)
   17d38:	10c00044 	addi	r3,r2,1
   17d3c:	30c00015 	stw	r3,0(r6)
   17d40:	10800003 	ldbu	r2,0(r2)
   17d44:	dfc00317 	ldw	ra,12(sp)
   17d48:	dc000217 	ldw	r16,8(sp)
   17d4c:	dec00404 	addi	sp,sp,16
   17d50:	f800283a 	ret
   17d54:	30c00617 	ldw	r3,24(r6)
   17d58:	10c00616 	blt	r2,r3,17d74 <_putc_r+0x74>
   17d5c:	30800017 	ldw	r2,0(r6)
   17d60:	00c00284 	movi	r3,10
   17d64:	11400005 	stb	r5,0(r2)
   17d68:	30800017 	ldw	r2,0(r6)
   17d6c:	11400003 	ldbu	r5,0(r2)
   17d70:	28fff11e 	bne	r5,r3,17d38 <__alt_data_end+0xfc017d38>
   17d74:	8009883a 	mov	r4,r16
   17d78:	dfc00317 	ldw	ra,12(sp)
   17d7c:	dc000217 	ldw	r16,8(sp)
   17d80:	dec00404 	addi	sp,sp,16
   17d84:	001b1e41 	jmpi	1b1e4 <__swbuf_r>
   17d88:	d9400015 	stw	r5,0(sp)
   17d8c:	d9800115 	stw	r6,4(sp)
   17d90:	0015c9c0 	call	15c9c <__sinit>
   17d94:	d9800117 	ldw	r6,4(sp)
   17d98:	d9400017 	ldw	r5,0(sp)
   17d9c:	003fdf06 	br	17d1c <__alt_data_end+0xfc017d1c>

00017da0 <putc>:
   17da0:	008000f4 	movhi	r2,3
   17da4:	defffc04 	addi	sp,sp,-16
   17da8:	10b77b04 	addi	r2,r2,-8724
   17dac:	dc000115 	stw	r16,4(sp)
   17db0:	14000017 	ldw	r16,0(r2)
   17db4:	dc400215 	stw	r17,8(sp)
   17db8:	dfc00315 	stw	ra,12(sp)
   17dbc:	2023883a 	mov	r17,r4
   17dc0:	80000226 	beq	r16,zero,17dcc <putc+0x2c>
   17dc4:	80800e17 	ldw	r2,56(r16)
   17dc8:	10001a26 	beq	r2,zero,17e34 <putc+0x94>
   17dcc:	28800217 	ldw	r2,8(r5)
   17dd0:	10bfffc4 	addi	r2,r2,-1
   17dd4:	28800215 	stw	r2,8(r5)
   17dd8:	10000b16 	blt	r2,zero,17e08 <putc+0x68>
   17ddc:	28800017 	ldw	r2,0(r5)
   17de0:	14400005 	stb	r17,0(r2)
   17de4:	28800017 	ldw	r2,0(r5)
   17de8:	10c00044 	addi	r3,r2,1
   17dec:	28c00015 	stw	r3,0(r5)
   17df0:	10800003 	ldbu	r2,0(r2)
   17df4:	dfc00317 	ldw	ra,12(sp)
   17df8:	dc400217 	ldw	r17,8(sp)
   17dfc:	dc000117 	ldw	r16,4(sp)
   17e00:	dec00404 	addi	sp,sp,16
   17e04:	f800283a 	ret
   17e08:	28c00617 	ldw	r3,24(r5)
   17e0c:	10c00e16 	blt	r2,r3,17e48 <putc+0xa8>
   17e10:	28800017 	ldw	r2,0(r5)
   17e14:	01000284 	movi	r4,10
   17e18:	14400005 	stb	r17,0(r2)
   17e1c:	28800017 	ldw	r2,0(r5)
   17e20:	10c00003 	ldbu	r3,0(r2)
   17e24:	193ff01e 	bne	r3,r4,17de8 <__alt_data_end+0xfc017de8>
   17e28:	280d883a 	mov	r6,r5
   17e2c:	180b883a 	mov	r5,r3
   17e30:	00000706 	br	17e50 <putc+0xb0>
   17e34:	8009883a 	mov	r4,r16
   17e38:	d9400015 	stw	r5,0(sp)
   17e3c:	0015c9c0 	call	15c9c <__sinit>
   17e40:	d9400017 	ldw	r5,0(sp)
   17e44:	003fe106 	br	17dcc <__alt_data_end+0xfc017dcc>
   17e48:	280d883a 	mov	r6,r5
   17e4c:	880b883a 	mov	r5,r17
   17e50:	8009883a 	mov	r4,r16
   17e54:	dfc00317 	ldw	ra,12(sp)
   17e58:	dc400217 	ldw	r17,8(sp)
   17e5c:	dc000117 	ldw	r16,4(sp)
   17e60:	dec00404 	addi	sp,sp,16
   17e64:	001b1e41 	jmpi	1b1e4 <__swbuf_r>

00017e68 <_realloc_r>:
   17e68:	defff604 	addi	sp,sp,-40
   17e6c:	dc800215 	stw	r18,8(sp)
   17e70:	dfc00915 	stw	ra,36(sp)
   17e74:	df000815 	stw	fp,32(sp)
   17e78:	ddc00715 	stw	r23,28(sp)
   17e7c:	dd800615 	stw	r22,24(sp)
   17e80:	dd400515 	stw	r21,20(sp)
   17e84:	dd000415 	stw	r20,16(sp)
   17e88:	dcc00315 	stw	r19,12(sp)
   17e8c:	dc400115 	stw	r17,4(sp)
   17e90:	dc000015 	stw	r16,0(sp)
   17e94:	3025883a 	mov	r18,r6
   17e98:	2800b726 	beq	r5,zero,18178 <_realloc_r+0x310>
   17e9c:	282b883a 	mov	r21,r5
   17ea0:	2029883a 	mov	r20,r4
   17ea4:	001f68c0 	call	1f68c <__malloc_lock>
   17ea8:	a8bfff17 	ldw	r2,-4(r21)
   17eac:	043fff04 	movi	r16,-4
   17eb0:	90c002c4 	addi	r3,r18,11
   17eb4:	01000584 	movi	r4,22
   17eb8:	acfffe04 	addi	r19,r21,-8
   17ebc:	1420703a 	and	r16,r2,r16
   17ec0:	20c0332e 	bgeu	r4,r3,17f90 <_realloc_r+0x128>
   17ec4:	047ffe04 	movi	r17,-8
   17ec8:	1c62703a 	and	r17,r3,r17
   17ecc:	8807883a 	mov	r3,r17
   17ed0:	88005816 	blt	r17,zero,18034 <_realloc_r+0x1cc>
   17ed4:	8c805736 	bltu	r17,r18,18034 <_realloc_r+0x1cc>
   17ed8:	80c0300e 	bge	r16,r3,17f9c <_realloc_r+0x134>
   17edc:	070000f4 	movhi	fp,3
   17ee0:	e72c1c04 	addi	fp,fp,-20368
   17ee4:	e1c00217 	ldw	r7,8(fp)
   17ee8:	9c09883a 	add	r4,r19,r16
   17eec:	22000117 	ldw	r8,4(r4)
   17ef0:	21c06326 	beq	r4,r7,18080 <_realloc_r+0x218>
   17ef4:	017fff84 	movi	r5,-2
   17ef8:	414a703a 	and	r5,r8,r5
   17efc:	214b883a 	add	r5,r4,r5
   17f00:	29800117 	ldw	r6,4(r5)
   17f04:	3180004c 	andi	r6,r6,1
   17f08:	30003f26 	beq	r6,zero,18008 <_realloc_r+0x1a0>
   17f0c:	1080004c 	andi	r2,r2,1
   17f10:	10008326 	beq	r2,zero,18120 <_realloc_r+0x2b8>
   17f14:	900b883a 	mov	r5,r18
   17f18:	a009883a 	mov	r4,r20
   17f1c:	000e4ac0 	call	e4ac <_malloc_r>
   17f20:	1025883a 	mov	r18,r2
   17f24:	10011e26 	beq	r2,zero,183a0 <_realloc_r+0x538>
   17f28:	a93fff17 	ldw	r4,-4(r21)
   17f2c:	10fffe04 	addi	r3,r2,-8
   17f30:	00bfff84 	movi	r2,-2
   17f34:	2084703a 	and	r2,r4,r2
   17f38:	9885883a 	add	r2,r19,r2
   17f3c:	1880ee26 	beq	r3,r2,182f8 <_realloc_r+0x490>
   17f40:	81bfff04 	addi	r6,r16,-4
   17f44:	00800904 	movi	r2,36
   17f48:	1180b836 	bltu	r2,r6,1822c <_realloc_r+0x3c4>
   17f4c:	00c004c4 	movi	r3,19
   17f50:	19809636 	bltu	r3,r6,181ac <_realloc_r+0x344>
   17f54:	9005883a 	mov	r2,r18
   17f58:	a807883a 	mov	r3,r21
   17f5c:	19000017 	ldw	r4,0(r3)
   17f60:	11000015 	stw	r4,0(r2)
   17f64:	19000117 	ldw	r4,4(r3)
   17f68:	11000115 	stw	r4,4(r2)
   17f6c:	18c00217 	ldw	r3,8(r3)
   17f70:	10c00215 	stw	r3,8(r2)
   17f74:	a80b883a 	mov	r5,r21
   17f78:	a009883a 	mov	r4,r20
   17f7c:	0015e100 	call	15e10 <_free_r>
   17f80:	a009883a 	mov	r4,r20
   17f84:	001f6b00 	call	1f6b0 <__malloc_unlock>
   17f88:	9005883a 	mov	r2,r18
   17f8c:	00001206 	br	17fd8 <_realloc_r+0x170>
   17f90:	00c00404 	movi	r3,16
   17f94:	1823883a 	mov	r17,r3
   17f98:	003fce06 	br	17ed4 <__alt_data_end+0xfc017ed4>
   17f9c:	a825883a 	mov	r18,r21
   17fa0:	8445c83a 	sub	r2,r16,r17
   17fa4:	00c003c4 	movi	r3,15
   17fa8:	18802636 	bltu	r3,r2,18044 <_realloc_r+0x1dc>
   17fac:	99800117 	ldw	r6,4(r19)
   17fb0:	9c07883a 	add	r3,r19,r16
   17fb4:	3180004c 	andi	r6,r6,1
   17fb8:	3420b03a 	or	r16,r6,r16
   17fbc:	9c000115 	stw	r16,4(r19)
   17fc0:	18800117 	ldw	r2,4(r3)
   17fc4:	10800054 	ori	r2,r2,1
   17fc8:	18800115 	stw	r2,4(r3)
   17fcc:	a009883a 	mov	r4,r20
   17fd0:	001f6b00 	call	1f6b0 <__malloc_unlock>
   17fd4:	9005883a 	mov	r2,r18
   17fd8:	dfc00917 	ldw	ra,36(sp)
   17fdc:	df000817 	ldw	fp,32(sp)
   17fe0:	ddc00717 	ldw	r23,28(sp)
   17fe4:	dd800617 	ldw	r22,24(sp)
   17fe8:	dd400517 	ldw	r21,20(sp)
   17fec:	dd000417 	ldw	r20,16(sp)
   17ff0:	dcc00317 	ldw	r19,12(sp)
   17ff4:	dc800217 	ldw	r18,8(sp)
   17ff8:	dc400117 	ldw	r17,4(sp)
   17ffc:	dc000017 	ldw	r16,0(sp)
   18000:	dec00a04 	addi	sp,sp,40
   18004:	f800283a 	ret
   18008:	017fff04 	movi	r5,-4
   1800c:	414a703a 	and	r5,r8,r5
   18010:	814d883a 	add	r6,r16,r5
   18014:	30c01f16 	blt	r6,r3,18094 <_realloc_r+0x22c>
   18018:	20800317 	ldw	r2,12(r4)
   1801c:	20c00217 	ldw	r3,8(r4)
   18020:	a825883a 	mov	r18,r21
   18024:	3021883a 	mov	r16,r6
   18028:	18800315 	stw	r2,12(r3)
   1802c:	10c00215 	stw	r3,8(r2)
   18030:	003fdb06 	br	17fa0 <__alt_data_end+0xfc017fa0>
   18034:	00800304 	movi	r2,12
   18038:	a0800015 	stw	r2,0(r20)
   1803c:	0005883a 	mov	r2,zero
   18040:	003fe506 	br	17fd8 <__alt_data_end+0xfc017fd8>
   18044:	98c00117 	ldw	r3,4(r19)
   18048:	9c4b883a 	add	r5,r19,r17
   1804c:	11000054 	ori	r4,r2,1
   18050:	18c0004c 	andi	r3,r3,1
   18054:	1c62b03a 	or	r17,r3,r17
   18058:	9c400115 	stw	r17,4(r19)
   1805c:	29000115 	stw	r4,4(r5)
   18060:	2885883a 	add	r2,r5,r2
   18064:	10c00117 	ldw	r3,4(r2)
   18068:	29400204 	addi	r5,r5,8
   1806c:	a009883a 	mov	r4,r20
   18070:	18c00054 	ori	r3,r3,1
   18074:	10c00115 	stw	r3,4(r2)
   18078:	0015e100 	call	15e10 <_free_r>
   1807c:	003fd306 	br	17fcc <__alt_data_end+0xfc017fcc>
   18080:	017fff04 	movi	r5,-4
   18084:	414a703a 	and	r5,r8,r5
   18088:	89800404 	addi	r6,r17,16
   1808c:	8151883a 	add	r8,r16,r5
   18090:	4180590e 	bge	r8,r6,181f8 <_realloc_r+0x390>
   18094:	1080004c 	andi	r2,r2,1
   18098:	103f9e1e 	bne	r2,zero,17f14 <__alt_data_end+0xfc017f14>
   1809c:	adbffe17 	ldw	r22,-8(r21)
   180a0:	00bfff04 	movi	r2,-4
   180a4:	9dadc83a 	sub	r22,r19,r22
   180a8:	b1800117 	ldw	r6,4(r22)
   180ac:	3084703a 	and	r2,r6,r2
   180b0:	20002026 	beq	r4,zero,18134 <_realloc_r+0x2cc>
   180b4:	80af883a 	add	r23,r16,r2
   180b8:	b96f883a 	add	r23,r23,r5
   180bc:	21c05f26 	beq	r4,r7,1823c <_realloc_r+0x3d4>
   180c0:	b8c01c16 	blt	r23,r3,18134 <_realloc_r+0x2cc>
   180c4:	20800317 	ldw	r2,12(r4)
   180c8:	20c00217 	ldw	r3,8(r4)
   180cc:	81bfff04 	addi	r6,r16,-4
   180d0:	01000904 	movi	r4,36
   180d4:	18800315 	stw	r2,12(r3)
   180d8:	10c00215 	stw	r3,8(r2)
   180dc:	b0c00217 	ldw	r3,8(r22)
   180e0:	b0800317 	ldw	r2,12(r22)
   180e4:	b4800204 	addi	r18,r22,8
   180e8:	18800315 	stw	r2,12(r3)
   180ec:	10c00215 	stw	r3,8(r2)
   180f0:	21801b36 	bltu	r4,r6,18160 <_realloc_r+0x2f8>
   180f4:	008004c4 	movi	r2,19
   180f8:	1180352e 	bgeu	r2,r6,181d0 <_realloc_r+0x368>
   180fc:	a8800017 	ldw	r2,0(r21)
   18100:	b0800215 	stw	r2,8(r22)
   18104:	a8800117 	ldw	r2,4(r21)
   18108:	b0800315 	stw	r2,12(r22)
   1810c:	008006c4 	movi	r2,27
   18110:	11807f36 	bltu	r2,r6,18310 <_realloc_r+0x4a8>
   18114:	b0800404 	addi	r2,r22,16
   18118:	ad400204 	addi	r21,r21,8
   1811c:	00002d06 	br	181d4 <_realloc_r+0x36c>
   18120:	adbffe17 	ldw	r22,-8(r21)
   18124:	00bfff04 	movi	r2,-4
   18128:	9dadc83a 	sub	r22,r19,r22
   1812c:	b1000117 	ldw	r4,4(r22)
   18130:	2084703a 	and	r2,r4,r2
   18134:	b03f7726 	beq	r22,zero,17f14 <__alt_data_end+0xfc017f14>
   18138:	80af883a 	add	r23,r16,r2
   1813c:	b8ff7516 	blt	r23,r3,17f14 <__alt_data_end+0xfc017f14>
   18140:	b0800317 	ldw	r2,12(r22)
   18144:	b0c00217 	ldw	r3,8(r22)
   18148:	81bfff04 	addi	r6,r16,-4
   1814c:	01000904 	movi	r4,36
   18150:	18800315 	stw	r2,12(r3)
   18154:	10c00215 	stw	r3,8(r2)
   18158:	b4800204 	addi	r18,r22,8
   1815c:	21bfe52e 	bgeu	r4,r6,180f4 <__alt_data_end+0xfc0180f4>
   18160:	a80b883a 	mov	r5,r21
   18164:	9009883a 	mov	r4,r18
   18168:	0016aec0 	call	16aec <memmove>
   1816c:	b821883a 	mov	r16,r23
   18170:	b027883a 	mov	r19,r22
   18174:	003f8a06 	br	17fa0 <__alt_data_end+0xfc017fa0>
   18178:	300b883a 	mov	r5,r6
   1817c:	dfc00917 	ldw	ra,36(sp)
   18180:	df000817 	ldw	fp,32(sp)
   18184:	ddc00717 	ldw	r23,28(sp)
   18188:	dd800617 	ldw	r22,24(sp)
   1818c:	dd400517 	ldw	r21,20(sp)
   18190:	dd000417 	ldw	r20,16(sp)
   18194:	dcc00317 	ldw	r19,12(sp)
   18198:	dc800217 	ldw	r18,8(sp)
   1819c:	dc400117 	ldw	r17,4(sp)
   181a0:	dc000017 	ldw	r16,0(sp)
   181a4:	dec00a04 	addi	sp,sp,40
   181a8:	000e4ac1 	jmpi	e4ac <_malloc_r>
   181ac:	a8c00017 	ldw	r3,0(r21)
   181b0:	90c00015 	stw	r3,0(r18)
   181b4:	a8c00117 	ldw	r3,4(r21)
   181b8:	90c00115 	stw	r3,4(r18)
   181bc:	00c006c4 	movi	r3,27
   181c0:	19804536 	bltu	r3,r6,182d8 <_realloc_r+0x470>
   181c4:	90800204 	addi	r2,r18,8
   181c8:	a8c00204 	addi	r3,r21,8
   181cc:	003f6306 	br	17f5c <__alt_data_end+0xfc017f5c>
   181d0:	9005883a 	mov	r2,r18
   181d4:	a8c00017 	ldw	r3,0(r21)
   181d8:	b821883a 	mov	r16,r23
   181dc:	b027883a 	mov	r19,r22
   181e0:	10c00015 	stw	r3,0(r2)
   181e4:	a8c00117 	ldw	r3,4(r21)
   181e8:	10c00115 	stw	r3,4(r2)
   181ec:	a8c00217 	ldw	r3,8(r21)
   181f0:	10c00215 	stw	r3,8(r2)
   181f4:	003f6a06 	br	17fa0 <__alt_data_end+0xfc017fa0>
   181f8:	9c67883a 	add	r19,r19,r17
   181fc:	4445c83a 	sub	r2,r8,r17
   18200:	e4c00215 	stw	r19,8(fp)
   18204:	10800054 	ori	r2,r2,1
   18208:	98800115 	stw	r2,4(r19)
   1820c:	a8bfff17 	ldw	r2,-4(r21)
   18210:	a009883a 	mov	r4,r20
   18214:	1080004c 	andi	r2,r2,1
   18218:	1462b03a 	or	r17,r2,r17
   1821c:	ac7fff15 	stw	r17,-4(r21)
   18220:	001f6b00 	call	1f6b0 <__malloc_unlock>
   18224:	a805883a 	mov	r2,r21
   18228:	003f6b06 	br	17fd8 <__alt_data_end+0xfc017fd8>
   1822c:	a80b883a 	mov	r5,r21
   18230:	9009883a 	mov	r4,r18
   18234:	0016aec0 	call	16aec <memmove>
   18238:	003f4e06 	br	17f74 <__alt_data_end+0xfc017f74>
   1823c:	89000404 	addi	r4,r17,16
   18240:	b93fbc16 	blt	r23,r4,18134 <__alt_data_end+0xfc018134>
   18244:	b0800317 	ldw	r2,12(r22)
   18248:	b0c00217 	ldw	r3,8(r22)
   1824c:	81bfff04 	addi	r6,r16,-4
   18250:	01000904 	movi	r4,36
   18254:	18800315 	stw	r2,12(r3)
   18258:	10c00215 	stw	r3,8(r2)
   1825c:	b4800204 	addi	r18,r22,8
   18260:	21804336 	bltu	r4,r6,18370 <_realloc_r+0x508>
   18264:	008004c4 	movi	r2,19
   18268:	11803f2e 	bgeu	r2,r6,18368 <_realloc_r+0x500>
   1826c:	a8800017 	ldw	r2,0(r21)
   18270:	b0800215 	stw	r2,8(r22)
   18274:	a8800117 	ldw	r2,4(r21)
   18278:	b0800315 	stw	r2,12(r22)
   1827c:	008006c4 	movi	r2,27
   18280:	11803f36 	bltu	r2,r6,18380 <_realloc_r+0x518>
   18284:	b0800404 	addi	r2,r22,16
   18288:	ad400204 	addi	r21,r21,8
   1828c:	a8c00017 	ldw	r3,0(r21)
   18290:	10c00015 	stw	r3,0(r2)
   18294:	a8c00117 	ldw	r3,4(r21)
   18298:	10c00115 	stw	r3,4(r2)
   1829c:	a8c00217 	ldw	r3,8(r21)
   182a0:	10c00215 	stw	r3,8(r2)
   182a4:	b447883a 	add	r3,r22,r17
   182a8:	bc45c83a 	sub	r2,r23,r17
   182ac:	e0c00215 	stw	r3,8(fp)
   182b0:	10800054 	ori	r2,r2,1
   182b4:	18800115 	stw	r2,4(r3)
   182b8:	b0800117 	ldw	r2,4(r22)
   182bc:	a009883a 	mov	r4,r20
   182c0:	1080004c 	andi	r2,r2,1
   182c4:	1462b03a 	or	r17,r2,r17
   182c8:	b4400115 	stw	r17,4(r22)
   182cc:	001f6b00 	call	1f6b0 <__malloc_unlock>
   182d0:	9005883a 	mov	r2,r18
   182d4:	003f4006 	br	17fd8 <__alt_data_end+0xfc017fd8>
   182d8:	a8c00217 	ldw	r3,8(r21)
   182dc:	90c00215 	stw	r3,8(r18)
   182e0:	a8c00317 	ldw	r3,12(r21)
   182e4:	90c00315 	stw	r3,12(r18)
   182e8:	30801126 	beq	r6,r2,18330 <_realloc_r+0x4c8>
   182ec:	90800404 	addi	r2,r18,16
   182f0:	a8c00404 	addi	r3,r21,16
   182f4:	003f1906 	br	17f5c <__alt_data_end+0xfc017f5c>
   182f8:	90ffff17 	ldw	r3,-4(r18)
   182fc:	00bfff04 	movi	r2,-4
   18300:	a825883a 	mov	r18,r21
   18304:	1884703a 	and	r2,r3,r2
   18308:	80a1883a 	add	r16,r16,r2
   1830c:	003f2406 	br	17fa0 <__alt_data_end+0xfc017fa0>
   18310:	a8800217 	ldw	r2,8(r21)
   18314:	b0800415 	stw	r2,16(r22)
   18318:	a8800317 	ldw	r2,12(r21)
   1831c:	b0800515 	stw	r2,20(r22)
   18320:	31000a26 	beq	r6,r4,1834c <_realloc_r+0x4e4>
   18324:	b0800604 	addi	r2,r22,24
   18328:	ad400404 	addi	r21,r21,16
   1832c:	003fa906 	br	181d4 <__alt_data_end+0xfc0181d4>
   18330:	a9000417 	ldw	r4,16(r21)
   18334:	90800604 	addi	r2,r18,24
   18338:	a8c00604 	addi	r3,r21,24
   1833c:	91000415 	stw	r4,16(r18)
   18340:	a9000517 	ldw	r4,20(r21)
   18344:	91000515 	stw	r4,20(r18)
   18348:	003f0406 	br	17f5c <__alt_data_end+0xfc017f5c>
   1834c:	a8c00417 	ldw	r3,16(r21)
   18350:	ad400604 	addi	r21,r21,24
   18354:	b0800804 	addi	r2,r22,32
   18358:	b0c00615 	stw	r3,24(r22)
   1835c:	a8ffff17 	ldw	r3,-4(r21)
   18360:	b0c00715 	stw	r3,28(r22)
   18364:	003f9b06 	br	181d4 <__alt_data_end+0xfc0181d4>
   18368:	9005883a 	mov	r2,r18
   1836c:	003fc706 	br	1828c <__alt_data_end+0xfc01828c>
   18370:	a80b883a 	mov	r5,r21
   18374:	9009883a 	mov	r4,r18
   18378:	0016aec0 	call	16aec <memmove>
   1837c:	003fc906 	br	182a4 <__alt_data_end+0xfc0182a4>
   18380:	a8800217 	ldw	r2,8(r21)
   18384:	b0800415 	stw	r2,16(r22)
   18388:	a8800317 	ldw	r2,12(r21)
   1838c:	b0800515 	stw	r2,20(r22)
   18390:	31000726 	beq	r6,r4,183b0 <_realloc_r+0x548>
   18394:	b0800604 	addi	r2,r22,24
   18398:	ad400404 	addi	r21,r21,16
   1839c:	003fbb06 	br	1828c <__alt_data_end+0xfc01828c>
   183a0:	a009883a 	mov	r4,r20
   183a4:	001f6b00 	call	1f6b0 <__malloc_unlock>
   183a8:	0005883a 	mov	r2,zero
   183ac:	003f0a06 	br	17fd8 <__alt_data_end+0xfc017fd8>
   183b0:	a8c00417 	ldw	r3,16(r21)
   183b4:	ad400604 	addi	r21,r21,24
   183b8:	b0800804 	addi	r2,r22,32
   183bc:	b0c00615 	stw	r3,24(r22)
   183c0:	a8ffff17 	ldw	r3,-4(r21)
   183c4:	b0c00715 	stw	r3,28(r22)
   183c8:	003fb006 	br	1828c <__alt_data_end+0xfc01828c>

000183cc <__fpclassifyd>:
   183cc:	00a00034 	movhi	r2,32768
   183d0:	10bfffc4 	addi	r2,r2,-1
   183d4:	2884703a 	and	r2,r5,r2
   183d8:	10000726 	beq	r2,zero,183f8 <__fpclassifyd+0x2c>
   183dc:	00fffc34 	movhi	r3,65520
   183e0:	019ff834 	movhi	r6,32736
   183e4:	28c7883a 	add	r3,r5,r3
   183e8:	31bfffc4 	addi	r6,r6,-1
   183ec:	30c00536 	bltu	r6,r3,18404 <__fpclassifyd+0x38>
   183f0:	00800104 	movi	r2,4
   183f4:	f800283a 	ret
   183f8:	2000021e 	bne	r4,zero,18404 <__fpclassifyd+0x38>
   183fc:	00800084 	movi	r2,2
   18400:	f800283a 	ret
   18404:	00dffc34 	movhi	r3,32752
   18408:	019ff834 	movhi	r6,32736
   1840c:	28cb883a 	add	r5,r5,r3
   18410:	31bfffc4 	addi	r6,r6,-1
   18414:	317ff62e 	bgeu	r6,r5,183f0 <__alt_data_end+0xfc0183f0>
   18418:	01400434 	movhi	r5,16
   1841c:	297fffc4 	addi	r5,r5,-1
   18420:	28800236 	bltu	r5,r2,1842c <__fpclassifyd+0x60>
   18424:	008000c4 	movi	r2,3
   18428:	f800283a 	ret
   1842c:	10c00226 	beq	r2,r3,18438 <__fpclassifyd+0x6c>
   18430:	0005883a 	mov	r2,zero
   18434:	f800283a 	ret
   18438:	2005003a 	cmpeq	r2,r4,zero
   1843c:	f800283a 	ret

00018440 <__sread>:
   18440:	defffe04 	addi	sp,sp,-8
   18444:	dc000015 	stw	r16,0(sp)
   18448:	2821883a 	mov	r16,r5
   1844c:	2940038f 	ldh	r5,14(r5)
   18450:	dfc00115 	stw	ra,4(sp)
   18454:	001b8e80 	call	1b8e8 <_read_r>
   18458:	10000716 	blt	r2,zero,18478 <__sread+0x38>
   1845c:	80c01417 	ldw	r3,80(r16)
   18460:	1887883a 	add	r3,r3,r2
   18464:	80c01415 	stw	r3,80(r16)
   18468:	dfc00117 	ldw	ra,4(sp)
   1846c:	dc000017 	ldw	r16,0(sp)
   18470:	dec00204 	addi	sp,sp,8
   18474:	f800283a 	ret
   18478:	80c0030b 	ldhu	r3,12(r16)
   1847c:	18fbffcc 	andi	r3,r3,61439
   18480:	80c0030d 	sth	r3,12(r16)
   18484:	dfc00117 	ldw	ra,4(sp)
   18488:	dc000017 	ldw	r16,0(sp)
   1848c:	dec00204 	addi	sp,sp,8
   18490:	f800283a 	ret

00018494 <__seofread>:
   18494:	0005883a 	mov	r2,zero
   18498:	f800283a 	ret

0001849c <__swrite>:
   1849c:	2880030b 	ldhu	r2,12(r5)
   184a0:	defffb04 	addi	sp,sp,-20
   184a4:	dcc00315 	stw	r19,12(sp)
   184a8:	dc800215 	stw	r18,8(sp)
   184ac:	dc400115 	stw	r17,4(sp)
   184b0:	dc000015 	stw	r16,0(sp)
   184b4:	dfc00415 	stw	ra,16(sp)
   184b8:	10c0400c 	andi	r3,r2,256
   184bc:	2821883a 	mov	r16,r5
   184c0:	2023883a 	mov	r17,r4
   184c4:	3025883a 	mov	r18,r6
   184c8:	3827883a 	mov	r19,r7
   184cc:	18000526 	beq	r3,zero,184e4 <__swrite+0x48>
   184d0:	2940038f 	ldh	r5,14(r5)
   184d4:	01c00084 	movi	r7,2
   184d8:	000d883a 	mov	r6,zero
   184dc:	001b8880 	call	1b888 <_lseek_r>
   184e0:	8080030b 	ldhu	r2,12(r16)
   184e4:	8140038f 	ldh	r5,14(r16)
   184e8:	10bbffcc 	andi	r2,r2,61439
   184ec:	980f883a 	mov	r7,r19
   184f0:	900d883a 	mov	r6,r18
   184f4:	8809883a 	mov	r4,r17
   184f8:	8080030d 	sth	r2,12(r16)
   184fc:	dfc00417 	ldw	ra,16(sp)
   18500:	dcc00317 	ldw	r19,12(sp)
   18504:	dc800217 	ldw	r18,8(sp)
   18508:	dc400117 	ldw	r17,4(sp)
   1850c:	dc000017 	ldw	r16,0(sp)
   18510:	dec00504 	addi	sp,sp,20
   18514:	001b33c1 	jmpi	1b33c <_write_r>

00018518 <__sseek>:
   18518:	defffe04 	addi	sp,sp,-8
   1851c:	dc000015 	stw	r16,0(sp)
   18520:	2821883a 	mov	r16,r5
   18524:	2940038f 	ldh	r5,14(r5)
   18528:	dfc00115 	stw	ra,4(sp)
   1852c:	001b8880 	call	1b888 <_lseek_r>
   18530:	00ffffc4 	movi	r3,-1
   18534:	10c00826 	beq	r2,r3,18558 <__sseek+0x40>
   18538:	80c0030b 	ldhu	r3,12(r16)
   1853c:	80801415 	stw	r2,80(r16)
   18540:	18c40014 	ori	r3,r3,4096
   18544:	80c0030d 	sth	r3,12(r16)
   18548:	dfc00117 	ldw	ra,4(sp)
   1854c:	dc000017 	ldw	r16,0(sp)
   18550:	dec00204 	addi	sp,sp,8
   18554:	f800283a 	ret
   18558:	80c0030b 	ldhu	r3,12(r16)
   1855c:	18fbffcc 	andi	r3,r3,61439
   18560:	80c0030d 	sth	r3,12(r16)
   18564:	dfc00117 	ldw	ra,4(sp)
   18568:	dc000017 	ldw	r16,0(sp)
   1856c:	dec00204 	addi	sp,sp,8
   18570:	f800283a 	ret

00018574 <__sclose>:
   18574:	2940038f 	ldh	r5,14(r5)
   18578:	001b39c1 	jmpi	1b39c <_close_r>

0001857c <__ssprint_r>:
   1857c:	30800217 	ldw	r2,8(r6)
   18580:	defff604 	addi	sp,sp,-40
   18584:	dc800215 	stw	r18,8(sp)
   18588:	dfc00915 	stw	ra,36(sp)
   1858c:	df000815 	stw	fp,32(sp)
   18590:	ddc00715 	stw	r23,28(sp)
   18594:	dd800615 	stw	r22,24(sp)
   18598:	dd400515 	stw	r21,20(sp)
   1859c:	dd000415 	stw	r20,16(sp)
   185a0:	dcc00315 	stw	r19,12(sp)
   185a4:	dc400115 	stw	r17,4(sp)
   185a8:	dc000015 	stw	r16,0(sp)
   185ac:	3025883a 	mov	r18,r6
   185b0:	10005826 	beq	r2,zero,18714 <__ssprint_r+0x198>
   185b4:	2027883a 	mov	r19,r4
   185b8:	35c00017 	ldw	r23,0(r6)
   185bc:	29000017 	ldw	r4,0(r5)
   185c0:	28800217 	ldw	r2,8(r5)
   185c4:	2823883a 	mov	r17,r5
   185c8:	0039883a 	mov	fp,zero
   185cc:	0021883a 	mov	r16,zero
   185d0:	80003926 	beq	r16,zero,186b8 <__ssprint_r+0x13c>
   185d4:	102b883a 	mov	r21,r2
   185d8:	102d883a 	mov	r22,r2
   185dc:	80803a36 	bltu	r16,r2,186c8 <__ssprint_r+0x14c>
   185e0:	88c0030b 	ldhu	r3,12(r17)
   185e4:	1881200c 	andi	r2,r3,1152
   185e8:	10002626 	beq	r2,zero,18684 <__ssprint_r+0x108>
   185ec:	88800517 	ldw	r2,20(r17)
   185f0:	89400417 	ldw	r5,16(r17)
   185f4:	81800044 	addi	r6,r16,1
   185f8:	108f883a 	add	r7,r2,r2
   185fc:	3885883a 	add	r2,r7,r2
   18600:	100ed7fa 	srli	r7,r2,31
   18604:	216dc83a 	sub	r22,r4,r5
   18608:	3589883a 	add	r4,r6,r22
   1860c:	3885883a 	add	r2,r7,r2
   18610:	102bd07a 	srai	r21,r2,1
   18614:	a80d883a 	mov	r6,r21
   18618:	a900022e 	bgeu	r21,r4,18624 <__ssprint_r+0xa8>
   1861c:	202b883a 	mov	r21,r4
   18620:	200d883a 	mov	r6,r4
   18624:	18c1000c 	andi	r3,r3,1024
   18628:	18002a26 	beq	r3,zero,186d4 <__ssprint_r+0x158>
   1862c:	300b883a 	mov	r5,r6
   18630:	9809883a 	mov	r4,r19
   18634:	000e4ac0 	call	e4ac <_malloc_r>
   18638:	1029883a 	mov	r20,r2
   1863c:	10002c26 	beq	r2,zero,186f0 <__ssprint_r+0x174>
   18640:	89400417 	ldw	r5,16(r17)
   18644:	b00d883a 	mov	r6,r22
   18648:	1009883a 	mov	r4,r2
   1864c:	000ecb80 	call	ecb8 <memcpy>
   18650:	8880030b 	ldhu	r2,12(r17)
   18654:	00fedfc4 	movi	r3,-1153
   18658:	10c4703a 	and	r2,r2,r3
   1865c:	10802014 	ori	r2,r2,128
   18660:	8880030d 	sth	r2,12(r17)
   18664:	a589883a 	add	r4,r20,r22
   18668:	adadc83a 	sub	r22,r21,r22
   1866c:	8d400515 	stw	r21,20(r17)
   18670:	8d800215 	stw	r22,8(r17)
   18674:	8d000415 	stw	r20,16(r17)
   18678:	89000015 	stw	r4,0(r17)
   1867c:	802b883a 	mov	r21,r16
   18680:	802d883a 	mov	r22,r16
   18684:	b00d883a 	mov	r6,r22
   18688:	e00b883a 	mov	r5,fp
   1868c:	0016aec0 	call	16aec <memmove>
   18690:	88800217 	ldw	r2,8(r17)
   18694:	89000017 	ldw	r4,0(r17)
   18698:	90c00217 	ldw	r3,8(r18)
   1869c:	1545c83a 	sub	r2,r2,r21
   186a0:	2589883a 	add	r4,r4,r22
   186a4:	88800215 	stw	r2,8(r17)
   186a8:	89000015 	stw	r4,0(r17)
   186ac:	1c21c83a 	sub	r16,r3,r16
   186b0:	94000215 	stw	r16,8(r18)
   186b4:	80001726 	beq	r16,zero,18714 <__ssprint_r+0x198>
   186b8:	bf000017 	ldw	fp,0(r23)
   186bc:	bc000117 	ldw	r16,4(r23)
   186c0:	bdc00204 	addi	r23,r23,8
   186c4:	003fc206 	br	185d0 <__alt_data_end+0xfc0185d0>
   186c8:	802b883a 	mov	r21,r16
   186cc:	802d883a 	mov	r22,r16
   186d0:	003fec06 	br	18684 <__alt_data_end+0xfc018684>
   186d4:	9809883a 	mov	r4,r19
   186d8:	0017e680 	call	17e68 <_realloc_r>
   186dc:	1029883a 	mov	r20,r2
   186e0:	103fe01e 	bne	r2,zero,18664 <__alt_data_end+0xfc018664>
   186e4:	89400417 	ldw	r5,16(r17)
   186e8:	9809883a 	mov	r4,r19
   186ec:	0015e100 	call	15e10 <_free_r>
   186f0:	88c0030b 	ldhu	r3,12(r17)
   186f4:	00800304 	movi	r2,12
   186f8:	98800015 	stw	r2,0(r19)
   186fc:	18c01014 	ori	r3,r3,64
   18700:	88c0030d 	sth	r3,12(r17)
   18704:	00bfffc4 	movi	r2,-1
   18708:	90000215 	stw	zero,8(r18)
   1870c:	90000115 	stw	zero,4(r18)
   18710:	00000206 	br	1871c <__ssprint_r+0x1a0>
   18714:	90000115 	stw	zero,4(r18)
   18718:	0005883a 	mov	r2,zero
   1871c:	dfc00917 	ldw	ra,36(sp)
   18720:	df000817 	ldw	fp,32(sp)
   18724:	ddc00717 	ldw	r23,28(sp)
   18728:	dd800617 	ldw	r22,24(sp)
   1872c:	dd400517 	ldw	r21,20(sp)
   18730:	dd000417 	ldw	r20,16(sp)
   18734:	dcc00317 	ldw	r19,12(sp)
   18738:	dc800217 	ldw	r18,8(sp)
   1873c:	dc400117 	ldw	r17,4(sp)
   18740:	dc000017 	ldw	r16,0(sp)
   18744:	dec00a04 	addi	sp,sp,40
   18748:	f800283a 	ret

0001874c <___svfiprintf_internal_r>:
   1874c:	2880030b 	ldhu	r2,12(r5)
   18750:	deffc804 	addi	sp,sp,-224
   18754:	dcc03115 	stw	r19,196(sp)
   18758:	dfc03715 	stw	ra,220(sp)
   1875c:	df003615 	stw	fp,216(sp)
   18760:	ddc03515 	stw	r23,212(sp)
   18764:	dd803415 	stw	r22,208(sp)
   18768:	dd403315 	stw	r21,204(sp)
   1876c:	dd003215 	stw	r20,200(sp)
   18770:	dc803015 	stw	r18,192(sp)
   18774:	dc402f15 	stw	r17,188(sp)
   18778:	dc002e15 	stw	r16,184(sp)
   1877c:	d9402315 	stw	r5,140(sp)
   18780:	d9002715 	stw	r4,156(sp)
   18784:	1080200c 	andi	r2,r2,128
   18788:	d9c02415 	stw	r7,144(sp)
   1878c:	3027883a 	mov	r19,r6
   18790:	10000226 	beq	r2,zero,1879c <___svfiprintf_internal_r+0x50>
   18794:	28800417 	ldw	r2,16(r5)
   18798:	10046d26 	beq	r2,zero,19950 <___svfiprintf_internal_r+0x1204>
   1879c:	d8801a04 	addi	r2,sp,104
   187a0:	d8c019c4 	addi	r3,sp,103
   187a4:	058000f4 	movhi	r22,3
   187a8:	10c9c83a 	sub	r4,r2,r3
   187ac:	b5aaeb04 	addi	r22,r22,-21588
   187b0:	d8801e15 	stw	r2,120(sp)
   187b4:	d8c01f15 	stw	r3,124(sp)
   187b8:	dec01a15 	stw	sp,104(sp)
   187bc:	d8001c15 	stw	zero,112(sp)
   187c0:	d8001b15 	stw	zero,108(sp)
   187c4:	d811883a 	mov	r8,sp
   187c8:	d8002915 	stw	zero,164(sp)
   187cc:	d8002615 	stw	zero,152(sp)
   187d0:	d9002c15 	stw	r4,176(sp)
   187d4:	98800007 	ldb	r2,0(r19)
   187d8:	10031426 	beq	r2,zero,1942c <___svfiprintf_internal_r+0xce0>
   187dc:	00c00944 	movi	r3,37
   187e0:	9825883a 	mov	r18,r19
   187e4:	10c0021e 	bne	r2,r3,187f0 <___svfiprintf_internal_r+0xa4>
   187e8:	00001406 	br	1883c <___svfiprintf_internal_r+0xf0>
   187ec:	10c00326 	beq	r2,r3,187fc <___svfiprintf_internal_r+0xb0>
   187f0:	94800044 	addi	r18,r18,1
   187f4:	90800007 	ldb	r2,0(r18)
   187f8:	103ffc1e 	bne	r2,zero,187ec <__alt_data_end+0xfc0187ec>
   187fc:	94e1c83a 	sub	r16,r18,r19
   18800:	80000e26 	beq	r16,zero,1883c <___svfiprintf_internal_r+0xf0>
   18804:	d8c01c17 	ldw	r3,112(sp)
   18808:	d8801b17 	ldw	r2,108(sp)
   1880c:	44c00015 	stw	r19,0(r8)
   18810:	1c07883a 	add	r3,r3,r16
   18814:	10800044 	addi	r2,r2,1
   18818:	d8c01c15 	stw	r3,112(sp)
   1881c:	44000115 	stw	r16,4(r8)
   18820:	d8801b15 	stw	r2,108(sp)
   18824:	00c001c4 	movi	r3,7
   18828:	18835c16 	blt	r3,r2,1959c <___svfiprintf_internal_r+0xe50>
   1882c:	42000204 	addi	r8,r8,8
   18830:	d9402617 	ldw	r5,152(sp)
   18834:	2c0b883a 	add	r5,r5,r16
   18838:	d9402615 	stw	r5,152(sp)
   1883c:	90800007 	ldb	r2,0(r18)
   18840:	1002fc26 	beq	r2,zero,19434 <___svfiprintf_internal_r+0xce8>
   18844:	0023883a 	mov	r17,zero
   18848:	00bfffc4 	movi	r2,-1
   1884c:	0021883a 	mov	r16,zero
   18850:	94c00044 	addi	r19,r18,1
   18854:	90c00047 	ldb	r3,1(r18)
   18858:	dc402105 	stb	r17,132(sp)
   1885c:	d8001d85 	stb	zero,118(sp)
   18860:	002b883a 	mov	r21,zero
   18864:	d8802015 	stw	r2,128(sp)
   18868:	d8002515 	stw	zero,148(sp)
   1886c:	04801604 	movi	r18,88
   18870:	05000244 	movi	r20,9
   18874:	402f883a 	mov	r23,r8
   18878:	8023883a 	mov	r17,r16
   1887c:	9cc00044 	addi	r19,r19,1
   18880:	18bff804 	addi	r2,r3,-32
   18884:	9081fb36 	bltu	r18,r2,19074 <___svfiprintf_internal_r+0x928>
   18888:	100490ba 	slli	r2,r2,2
   1888c:	010000b4 	movhi	r4,2
   18890:	21222804 	addi	r4,r4,-30560
   18894:	1105883a 	add	r2,r2,r4
   18898:	10800017 	ldw	r2,0(r2)
   1889c:	1000683a 	jmp	r2
   188a0:	00018aa0 	cmpeqi	zero,zero,1578
   188a4:	00019074 	movhi	zero,1601
   188a8:	00019074 	movhi	zero,1601
   188ac:	00018a94 	movui	zero,1578
   188b0:	00019074 	movhi	zero,1601
   188b4:	00019074 	movhi	zero,1601
   188b8:	00019074 	movhi	zero,1601
   188bc:	00019074 	movhi	zero,1601
   188c0:	00019074 	movhi	zero,1601
   188c4:	00019074 	movhi	zero,1601
   188c8:	00018a04 	movi	zero,1576
   188cc:	00018c00 	call	18c0 <_ZN3USB4TaskEv+0xa4>
   188d0:	00019074 	movhi	zero,1601
   188d4:	00018a2c 	andhi	zero,zero,1576
   188d8:	000190b0 	cmpltui	zero,zero,1602
   188dc:	00019074 	movhi	zero,1601
   188e0:	000190a4 	muli	zero,zero,1602
   188e4:	00019038 	rdprs	zero,zero,1600
   188e8:	00019038 	rdprs	zero,zero,1600
   188ec:	00019038 	rdprs	zero,zero,1600
   188f0:	00019038 	rdprs	zero,zero,1600
   188f4:	00019038 	rdprs	zero,zero,1600
   188f8:	00019038 	rdprs	zero,zero,1600
   188fc:	00019038 	rdprs	zero,zero,1600
   18900:	00019038 	rdprs	zero,zero,1600
   18904:	00019038 	rdprs	zero,zero,1600
   18908:	00019074 	movhi	zero,1601
   1890c:	00019074 	movhi	zero,1601
   18910:	00019074 	movhi	zero,1601
   18914:	00019074 	movhi	zero,1601
   18918:	00019074 	movhi	zero,1601
   1891c:	00019074 	movhi	zero,1601
   18920:	00019074 	movhi	zero,1601
   18924:	00019074 	movhi	zero,1601
   18928:	00019074 	movhi	zero,1601
   1892c:	00019074 	movhi	zero,1601
   18930:	00018fbc 	xorhi	zero,zero,1598
   18934:	00019074 	movhi	zero,1601
   18938:	00019074 	movhi	zero,1601
   1893c:	00019074 	movhi	zero,1601
   18940:	00019074 	movhi	zero,1601
   18944:	00019074 	movhi	zero,1601
   18948:	00019074 	movhi	zero,1601
   1894c:	00019074 	movhi	zero,1601
   18950:	00019074 	movhi	zero,1601
   18954:	00019074 	movhi	zero,1601
   18958:	00019074 	movhi	zero,1601
   1895c:	0001916c 	andhi	zero,zero,1605
   18960:	00019074 	movhi	zero,1601
   18964:	00019074 	movhi	zero,1601
   18968:	00019074 	movhi	zero,1601
   1896c:	00019074 	movhi	zero,1601
   18970:	00019074 	movhi	zero,1601
   18974:	000190f8 	rdprs	zero,zero,1603
   18978:	00019074 	movhi	zero,1601
   1897c:	00019074 	movhi	zero,1601
   18980:	00018df8 	rdprs	zero,zero,1591
   18984:	00019074 	movhi	zero,1601
   18988:	00019074 	movhi	zero,1601
   1898c:	00019074 	movhi	zero,1601
   18990:	00019074 	movhi	zero,1601
   18994:	00019074 	movhi	zero,1601
   18998:	00019074 	movhi	zero,1601
   1899c:	00019074 	movhi	zero,1601
   189a0:	00019074 	movhi	zero,1601
   189a4:	00019074 	movhi	zero,1601
   189a8:	00019074 	movhi	zero,1601
   189ac:	00018cc4 	movi	zero,1587
   189b0:	00018ea8 	cmpgeui	zero,zero,1594
   189b4:	00019074 	movhi	zero,1601
   189b8:	00019074 	movhi	zero,1601
   189bc:	00019074 	movhi	zero,1601
   189c0:	00018e9c 	xori	zero,zero,1594
   189c4:	00018ea8 	cmpgeui	zero,zero,1594
   189c8:	00019074 	movhi	zero,1601
   189cc:	00019074 	movhi	zero,1601
   189d0:	00018e88 	cmpgei	zero,zero,1594
   189d4:	00019074 	movhi	zero,1601
   189d8:	00018e48 	cmpgei	zero,zero,1593
   189dc:	00018c14 	movui	zero,1584
   189e0:	00018a38 	rdprs	zero,zero,1576
   189e4:	00018fb0 	cmpltui	zero,zero,1598
   189e8:	00019074 	movhi	zero,1601
   189ec:	00018f5c 	xori	zero,zero,1597
   189f0:	00019074 	movhi	zero,1601
   189f4:	00018b78 	rdprs	zero,zero,1581
   189f8:	00019074 	movhi	zero,1601
   189fc:	00019074 	movhi	zero,1601
   18a00:	00018ac4 	movi	zero,1579
   18a04:	d9002417 	ldw	r4,144(sp)
   18a08:	d9402417 	ldw	r5,144(sp)
   18a0c:	21000017 	ldw	r4,0(r4)
   18a10:	28800104 	addi	r2,r5,4
   18a14:	d9002515 	stw	r4,148(sp)
   18a18:	20032b0e 	bge	r4,zero,196c8 <___svfiprintf_internal_r+0xf7c>
   18a1c:	d8c02517 	ldw	r3,148(sp)
   18a20:	d8802415 	stw	r2,144(sp)
   18a24:	00c7c83a 	sub	r3,zero,r3
   18a28:	d8c02515 	stw	r3,148(sp)
   18a2c:	8c400114 	ori	r17,r17,4
   18a30:	98c00007 	ldb	r3,0(r19)
   18a34:	003f9106 	br	1887c <__alt_data_end+0xfc01887c>
   18a38:	00800c04 	movi	r2,48
   18a3c:	d9402417 	ldw	r5,144(sp)
   18a40:	d9002017 	ldw	r4,128(sp)
   18a44:	d8801d05 	stb	r2,116(sp)
   18a48:	00801e04 	movi	r2,120
   18a4c:	d8801d45 	stb	r2,117(sp)
   18a50:	d8001d85 	stb	zero,118(sp)
   18a54:	b811883a 	mov	r8,r23
   18a58:	28c00104 	addi	r3,r5,4
   18a5c:	2c800017 	ldw	r18,0(r5)
   18a60:	0029883a 	mov	r20,zero
   18a64:	88800094 	ori	r2,r17,2
   18a68:	20036316 	blt	r4,zero,197f8 <___svfiprintf_internal_r+0x10ac>
   18a6c:	00bfdfc4 	movi	r2,-129
   18a70:	88a0703a 	and	r16,r17,r2
   18a74:	d8c02415 	stw	r3,144(sp)
   18a78:	84000094 	ori	r16,r16,2
   18a7c:	90031c26 	beq	r18,zero,196f0 <___svfiprintf_internal_r+0xfa4>
   18a80:	014000f4 	movhi	r5,3
   18a84:	296a8304 	addi	r5,r5,-22004
   18a88:	002b883a 	mov	r21,zero
   18a8c:	d9402915 	stw	r5,164(sp)
   18a90:	00002906 	br	18b38 <___svfiprintf_internal_r+0x3ec>
   18a94:	8c400054 	ori	r17,r17,1
   18a98:	98c00007 	ldb	r3,0(r19)
   18a9c:	003f7706 	br	1887c <__alt_data_end+0xfc01887c>
   18aa0:	a8803fcc 	andi	r2,r21,255
   18aa4:	1080201c 	xori	r2,r2,128
   18aa8:	10bfe004 	addi	r2,r2,-128
   18aac:	10032a1e 	bne	r2,zero,19758 <___svfiprintf_internal_r+0x100c>
   18ab0:	00c00044 	movi	r3,1
   18ab4:	d8c02105 	stb	r3,132(sp)
   18ab8:	05400804 	movi	r21,32
   18abc:	98c00007 	ldb	r3,0(r19)
   18ac0:	003f6e06 	br	1887c <__alt_data_end+0xfc01887c>
   18ac4:	8821883a 	mov	r16,r17
   18ac8:	dc402103 	ldbu	r17,132(sp)
   18acc:	b811883a 	mov	r8,r23
   18ad0:	8c403fcc 	andi	r17,r17,255
   18ad4:	8803f01e 	bne	r17,zero,19a98 <___svfiprintf_internal_r+0x134c>
   18ad8:	008000f4 	movhi	r2,3
   18adc:	10aa8304 	addi	r2,r2,-22004
   18ae0:	d8802915 	stw	r2,164(sp)
   18ae4:	8080080c 	andi	r2,r16,32
   18ae8:	1000cd26 	beq	r2,zero,18e20 <___svfiprintf_internal_r+0x6d4>
   18aec:	d9002417 	ldw	r4,144(sp)
   18af0:	24800017 	ldw	r18,0(r4)
   18af4:	25000117 	ldw	r20,4(r4)
   18af8:	21000204 	addi	r4,r4,8
   18afc:	d9002415 	stw	r4,144(sp)
   18b00:	8080004c 	andi	r2,r16,1
   18b04:	1002c726 	beq	r2,zero,19624 <___svfiprintf_internal_r+0xed8>
   18b08:	9504b03a 	or	r2,r18,r20
   18b0c:	1003061e 	bne	r2,zero,19728 <___svfiprintf_internal_r+0xfdc>
   18b10:	d9002017 	ldw	r4,128(sp)
   18b14:	d8001d85 	stb	zero,118(sp)
   18b18:	20033e16 	blt	r4,zero,19814 <___svfiprintf_internal_r+0x10c8>
   18b1c:	00bfdfc4 	movi	r2,-129
   18b20:	80a0703a 	and	r16,r16,r2
   18b24:	d9402017 	ldw	r5,128(sp)
   18b28:	002b883a 	mov	r21,zero
   18b2c:	28002826 	beq	r5,zero,18bd0 <___svfiprintf_internal_r+0x484>
   18b30:	0025883a 	mov	r18,zero
   18b34:	0029883a 	mov	r20,zero
   18b38:	d9002917 	ldw	r4,164(sp)
   18b3c:	dc401a04 	addi	r17,sp,104
   18b40:	908003cc 	andi	r2,r18,15
   18b44:	a006973a 	slli	r3,r20,28
   18b48:	2085883a 	add	r2,r4,r2
   18b4c:	9024d13a 	srli	r18,r18,4
   18b50:	10800003 	ldbu	r2,0(r2)
   18b54:	a028d13a 	srli	r20,r20,4
   18b58:	8c7fffc4 	addi	r17,r17,-1
   18b5c:	1ca4b03a 	or	r18,r3,r18
   18b60:	88800005 	stb	r2,0(r17)
   18b64:	9504b03a 	or	r2,r18,r20
   18b68:	103ff51e 	bne	r2,zero,18b40 <__alt_data_end+0xfc018b40>
   18b6c:	d8801e17 	ldw	r2,120(sp)
   18b70:	1469c83a 	sub	r20,r2,r17
   18b74:	00001906 	br	18bdc <___svfiprintf_internal_r+0x490>
   18b78:	8821883a 	mov	r16,r17
   18b7c:	dc402103 	ldbu	r17,132(sp)
   18b80:	b811883a 	mov	r8,r23
   18b84:	8c403fcc 	andi	r17,r17,255
   18b88:	8803d01e 	bne	r17,zero,19acc <___svfiprintf_internal_r+0x1380>
   18b8c:	8080080c 	andi	r2,r16,32
   18b90:	10016126 	beq	r2,zero,19118 <___svfiprintf_internal_r+0x9cc>
   18b94:	d9002417 	ldw	r4,144(sp)
   18b98:	d9402017 	ldw	r5,128(sp)
   18b9c:	d8001d85 	stb	zero,118(sp)
   18ba0:	20c00204 	addi	r3,r4,8
   18ba4:	24800017 	ldw	r18,0(r4)
   18ba8:	25000117 	ldw	r20,4(r4)
   18bac:	28030f16 	blt	r5,zero,197ec <___svfiprintf_internal_r+0x10a0>
   18bb0:	013fdfc4 	movi	r4,-129
   18bb4:	9504b03a 	or	r2,r18,r20
   18bb8:	d8c02415 	stw	r3,144(sp)
   18bbc:	8120703a 	and	r16,r16,r4
   18bc0:	002b883a 	mov	r21,zero
   18bc4:	1000cd1e 	bne	r2,zero,18efc <___svfiprintf_internal_r+0x7b0>
   18bc8:	d8c02017 	ldw	r3,128(sp)
   18bcc:	1803141e 	bne	r3,zero,19820 <___svfiprintf_internal_r+0x10d4>
   18bd0:	d8002015 	stw	zero,128(sp)
   18bd4:	0029883a 	mov	r20,zero
   18bd8:	dc401a04 	addi	r17,sp,104
   18bdc:	dc802017 	ldw	r18,128(sp)
   18be0:	9500010e 	bge	r18,r20,18be8 <___svfiprintf_internal_r+0x49c>
   18be4:	a025883a 	mov	r18,r20
   18be8:	ad403fcc 	andi	r21,r21,255
   18bec:	ad40201c 	xori	r21,r21,128
   18bf0:	ad7fe004 	addi	r21,r21,-128
   18bf4:	a8003f26 	beq	r21,zero,18cf4 <___svfiprintf_internal_r+0x5a8>
   18bf8:	94800044 	addi	r18,r18,1
   18bfc:	00003d06 	br	18cf4 <___svfiprintf_internal_r+0x5a8>
   18c00:	00c00044 	movi	r3,1
   18c04:	d8c02105 	stb	r3,132(sp)
   18c08:	05400ac4 	movi	r21,43
   18c0c:	98c00007 	ldb	r3,0(r19)
   18c10:	003f1a06 	br	1887c <__alt_data_end+0xfc01887c>
   18c14:	8821883a 	mov	r16,r17
   18c18:	dc402103 	ldbu	r17,132(sp)
   18c1c:	b811883a 	mov	r8,r23
   18c20:	8c403fcc 	andi	r17,r17,255
   18c24:	8803a71e 	bne	r17,zero,19ac4 <___svfiprintf_internal_r+0x1378>
   18c28:	8080080c 	andi	r2,r16,32
   18c2c:	10015726 	beq	r2,zero,1918c <___svfiprintf_internal_r+0xa40>
   18c30:	d8c02417 	ldw	r3,144(sp)
   18c34:	d9002017 	ldw	r4,128(sp)
   18c38:	d8001d85 	stb	zero,118(sp)
   18c3c:	18800204 	addi	r2,r3,8
   18c40:	1c800017 	ldw	r18,0(r3)
   18c44:	1d000117 	ldw	r20,4(r3)
   18c48:	2002db16 	blt	r4,zero,197b8 <___svfiprintf_internal_r+0x106c>
   18c4c:	013fdfc4 	movi	r4,-129
   18c50:	9506b03a 	or	r3,r18,r20
   18c54:	d8802415 	stw	r2,144(sp)
   18c58:	8120703a 	and	r16,r16,r4
   18c5c:	18015826 	beq	r3,zero,191c0 <___svfiprintf_internal_r+0xa74>
   18c60:	002b883a 	mov	r21,zero
   18c64:	dc401a04 	addi	r17,sp,104
   18c68:	9006d0fa 	srli	r3,r18,3
   18c6c:	a008977a 	slli	r4,r20,29
   18c70:	a028d0fa 	srli	r20,r20,3
   18c74:	948001cc 	andi	r18,r18,7
   18c78:	90800c04 	addi	r2,r18,48
   18c7c:	8c7fffc4 	addi	r17,r17,-1
   18c80:	20e4b03a 	or	r18,r4,r3
   18c84:	88800005 	stb	r2,0(r17)
   18c88:	9506b03a 	or	r3,r18,r20
   18c8c:	183ff61e 	bne	r3,zero,18c68 <__alt_data_end+0xfc018c68>
   18c90:	80c0004c 	andi	r3,r16,1
   18c94:	18028926 	beq	r3,zero,196bc <___svfiprintf_internal_r+0xf70>
   18c98:	10803fcc 	andi	r2,r2,255
   18c9c:	1080201c 	xori	r2,r2,128
   18ca0:	10bfe004 	addi	r2,r2,-128
   18ca4:	00c00c04 	movi	r3,48
   18ca8:	10ffb026 	beq	r2,r3,18b6c <__alt_data_end+0xfc018b6c>
   18cac:	88ffffc5 	stb	r3,-1(r17)
   18cb0:	d8c01e17 	ldw	r3,120(sp)
   18cb4:	88bfffc4 	addi	r2,r17,-1
   18cb8:	1023883a 	mov	r17,r2
   18cbc:	18a9c83a 	sub	r20,r3,r2
   18cc0:	003fc606 	br	18bdc <__alt_data_end+0xfc018bdc>
   18cc4:	d8c02417 	ldw	r3,144(sp)
   18cc8:	04800044 	movi	r18,1
   18ccc:	8821883a 	mov	r16,r17
   18cd0:	18800017 	ldw	r2,0(r3)
   18cd4:	18c00104 	addi	r3,r3,4
   18cd8:	b811883a 	mov	r8,r23
   18cdc:	d8001d85 	stb	zero,118(sp)
   18ce0:	d8801005 	stb	r2,64(sp)
   18ce4:	d8c02415 	stw	r3,144(sp)
   18ce8:	9029883a 	mov	r20,r18
   18cec:	dc401004 	addi	r17,sp,64
   18cf0:	d8002015 	stw	zero,128(sp)
   18cf4:	80c0008c 	andi	r3,r16,2
   18cf8:	d8c02115 	stw	r3,132(sp)
   18cfc:	18000126 	beq	r3,zero,18d04 <___svfiprintf_internal_r+0x5b8>
   18d00:	94800084 	addi	r18,r18,2
   18d04:	80c0210c 	andi	r3,r16,132
   18d08:	d8c02215 	stw	r3,136(sp)
   18d0c:	1801321e 	bne	r3,zero,191d8 <___svfiprintf_internal_r+0xa8c>
   18d10:	d9002517 	ldw	r4,148(sp)
   18d14:	24b9c83a 	sub	fp,r4,r18
   18d18:	07012f0e 	bge	zero,fp,191d8 <___svfiprintf_internal_r+0xa8c>
   18d1c:	02400404 	movi	r9,16
   18d20:	d8c01c17 	ldw	r3,112(sp)
   18d24:	d8801b17 	ldw	r2,108(sp)
   18d28:	4f03250e 	bge	r9,fp,199c0 <___svfiprintf_internal_r+0x1274>
   18d2c:	010000f4 	movhi	r4,3
   18d30:	212aef04 	addi	r4,r4,-21572
   18d34:	dc002a15 	stw	r16,168(sp)
   18d38:	dc402b15 	stw	r17,172(sp)
   18d3c:	d9002815 	stw	r4,160(sp)
   18d40:	e023883a 	mov	r17,fp
   18d44:	482f883a 	mov	r23,r9
   18d48:	9839883a 	mov	fp,r19
   18d4c:	054001c4 	movi	r21,7
   18d50:	9027883a 	mov	r19,r18
   18d54:	dc002717 	ldw	r16,156(sp)
   18d58:	dc802317 	ldw	r18,140(sp)
   18d5c:	00000306 	br	18d6c <___svfiprintf_internal_r+0x620>
   18d60:	8c7ffc04 	addi	r17,r17,-16
   18d64:	42000204 	addi	r8,r8,8
   18d68:	bc40130e 	bge	r23,r17,18db8 <___svfiprintf_internal_r+0x66c>
   18d6c:	014000f4 	movhi	r5,3
   18d70:	18c00404 	addi	r3,r3,16
   18d74:	10800044 	addi	r2,r2,1
   18d78:	296aef04 	addi	r5,r5,-21572
   18d7c:	41400015 	stw	r5,0(r8)
   18d80:	45c00115 	stw	r23,4(r8)
   18d84:	d8c01c15 	stw	r3,112(sp)
   18d88:	d8801b15 	stw	r2,108(sp)
   18d8c:	a8bff40e 	bge	r21,r2,18d60 <__alt_data_end+0xfc018d60>
   18d90:	d9801a04 	addi	r6,sp,104
   18d94:	900b883a 	mov	r5,r18
   18d98:	8009883a 	mov	r4,r16
   18d9c:	001857c0 	call	1857c <__ssprint_r>
   18da0:	1001aa1e 	bne	r2,zero,1944c <___svfiprintf_internal_r+0xd00>
   18da4:	8c7ffc04 	addi	r17,r17,-16
   18da8:	d8c01c17 	ldw	r3,112(sp)
   18dac:	d8801b17 	ldw	r2,108(sp)
   18db0:	d811883a 	mov	r8,sp
   18db4:	bc7fed16 	blt	r23,r17,18d6c <__alt_data_end+0xfc018d6c>
   18db8:	9825883a 	mov	r18,r19
   18dbc:	dc002a17 	ldw	r16,168(sp)
   18dc0:	e027883a 	mov	r19,fp
   18dc4:	8839883a 	mov	fp,r17
   18dc8:	dc402b17 	ldw	r17,172(sp)
   18dcc:	d9002817 	ldw	r4,160(sp)
   18dd0:	e0c7883a 	add	r3,fp,r3
   18dd4:	10800044 	addi	r2,r2,1
   18dd8:	41000015 	stw	r4,0(r8)
   18ddc:	47000115 	stw	fp,4(r8)
   18de0:	d8c01c15 	stw	r3,112(sp)
   18de4:	d8801b15 	stw	r2,108(sp)
   18de8:	010001c4 	movi	r4,7
   18dec:	20821616 	blt	r4,r2,19648 <___svfiprintf_internal_r+0xefc>
   18df0:	42000204 	addi	r8,r8,8
   18df4:	0000fa06 	br	191e0 <___svfiprintf_internal_r+0xa94>
   18df8:	8821883a 	mov	r16,r17
   18dfc:	dc402103 	ldbu	r17,132(sp)
   18e00:	b811883a 	mov	r8,r23
   18e04:	8c403fcc 	andi	r17,r17,255
   18e08:	8803361e 	bne	r17,zero,19ae4 <___svfiprintf_internal_r+0x1398>
   18e0c:	014000f4 	movhi	r5,3
   18e10:	296a7e04 	addi	r5,r5,-22024
   18e14:	d9402915 	stw	r5,164(sp)
   18e18:	8080080c 	andi	r2,r16,32
   18e1c:	103f331e 	bne	r2,zero,18aec <__alt_data_end+0xfc018aec>
   18e20:	8080040c 	andi	r2,r16,16
   18e24:	1002551e 	bne	r2,zero,1977c <___svfiprintf_internal_r+0x1030>
   18e28:	8080100c 	andi	r2,r16,64
   18e2c:	1002a626 	beq	r2,zero,198c8 <___svfiprintf_internal_r+0x117c>
   18e30:	d8802417 	ldw	r2,144(sp)
   18e34:	0029883a 	mov	r20,zero
   18e38:	1480000b 	ldhu	r18,0(r2)
   18e3c:	10800104 	addi	r2,r2,4
   18e40:	d8802415 	stw	r2,144(sp)
   18e44:	003f2e06 	br	18b00 <__alt_data_end+0xfc018b00>
   18e48:	8821883a 	mov	r16,r17
   18e4c:	dc402103 	ldbu	r17,132(sp)
   18e50:	b811883a 	mov	r8,r23
   18e54:	8c403fcc 	andi	r17,r17,255
   18e58:	88030b1e 	bne	r17,zero,19a88 <___svfiprintf_internal_r+0x133c>
   18e5c:	8080080c 	andi	r2,r16,32
   18e60:	1002271e 	bne	r2,zero,19700 <___svfiprintf_internal_r+0xfb4>
   18e64:	8080040c 	andi	r2,r16,16
   18e68:	10028e26 	beq	r2,zero,198a4 <___svfiprintf_internal_r+0x1158>
   18e6c:	d8c02417 	ldw	r3,144(sp)
   18e70:	d9002617 	ldw	r4,152(sp)
   18e74:	18800017 	ldw	r2,0(r3)
   18e78:	18c00104 	addi	r3,r3,4
   18e7c:	d8c02415 	stw	r3,144(sp)
   18e80:	11000015 	stw	r4,0(r2)
   18e84:	003e5306 	br	187d4 <__alt_data_end+0xfc0187d4>
   18e88:	98c00007 	ldb	r3,0(r19)
   18e8c:	01401b04 	movi	r5,108
   18e90:	19424f26 	beq	r3,r5,197d0 <___svfiprintf_internal_r+0x1084>
   18e94:	8c400414 	ori	r17,r17,16
   18e98:	003e7806 	br	1887c <__alt_data_end+0xfc01887c>
   18e9c:	8c401014 	ori	r17,r17,64
   18ea0:	98c00007 	ldb	r3,0(r19)
   18ea4:	003e7506 	br	1887c <__alt_data_end+0xfc01887c>
   18ea8:	8821883a 	mov	r16,r17
   18eac:	dc402103 	ldbu	r17,132(sp)
   18eb0:	b811883a 	mov	r8,r23
   18eb4:	8c403fcc 	andi	r17,r17,255
   18eb8:	8802fe1e 	bne	r17,zero,19ab4 <___svfiprintf_internal_r+0x1368>
   18ebc:	8080080c 	andi	r2,r16,32
   18ec0:	10004626 	beq	r2,zero,18fdc <___svfiprintf_internal_r+0x890>
   18ec4:	d9002417 	ldw	r4,144(sp)
   18ec8:	20800117 	ldw	r2,4(r4)
   18ecc:	24800017 	ldw	r18,0(r4)
   18ed0:	21000204 	addi	r4,r4,8
   18ed4:	d9002415 	stw	r4,144(sp)
   18ed8:	1029883a 	mov	r20,r2
   18edc:	10004a16 	blt	r2,zero,19008 <___svfiprintf_internal_r+0x8bc>
   18ee0:	d9002017 	ldw	r4,128(sp)
   18ee4:	dd401d83 	ldbu	r21,118(sp)
   18ee8:	2001eb16 	blt	r4,zero,19698 <___svfiprintf_internal_r+0xf4c>
   18eec:	00ffdfc4 	movi	r3,-129
   18ef0:	9504b03a 	or	r2,r18,r20
   18ef4:	80e0703a 	and	r16,r16,r3
   18ef8:	103f3326 	beq	r2,zero,18bc8 <__alt_data_end+0xfc018bc8>
   18efc:	a0009426 	beq	r20,zero,19150 <___svfiprintf_internal_r+0xa04>
   18f00:	dc401a04 	addi	r17,sp,104
   18f04:	402f883a 	mov	r23,r8
   18f08:	9009883a 	mov	r4,r18
   18f0c:	a00b883a 	mov	r5,r20
   18f10:	01800284 	movi	r6,10
   18f14:	000f883a 	mov	r7,zero
   18f18:	001c12c0 	call	1c12c <__umoddi3>
   18f1c:	10800c04 	addi	r2,r2,48
   18f20:	8c7fffc4 	addi	r17,r17,-1
   18f24:	9009883a 	mov	r4,r18
   18f28:	a00b883a 	mov	r5,r20
   18f2c:	88800005 	stb	r2,0(r17)
   18f30:	01800284 	movi	r6,10
   18f34:	000f883a 	mov	r7,zero
   18f38:	001bb300 	call	1bb30 <__udivdi3>
   18f3c:	1025883a 	mov	r18,r2
   18f40:	10c4b03a 	or	r2,r2,r3
   18f44:	1829883a 	mov	r20,r3
   18f48:	103fef1e 	bne	r2,zero,18f08 <__alt_data_end+0xfc018f08>
   18f4c:	d9001e17 	ldw	r4,120(sp)
   18f50:	b811883a 	mov	r8,r23
   18f54:	2469c83a 	sub	r20,r4,r17
   18f58:	003f2006 	br	18bdc <__alt_data_end+0xfc018bdc>
   18f5c:	d8802417 	ldw	r2,144(sp)
   18f60:	8821883a 	mov	r16,r17
   18f64:	d8001d85 	stb	zero,118(sp)
   18f68:	14400017 	ldw	r17,0(r2)
   18f6c:	b811883a 	mov	r8,r23
   18f70:	15c00104 	addi	r23,r2,4
   18f74:	88026c26 	beq	r17,zero,19928 <___svfiprintf_internal_r+0x11dc>
   18f78:	d8c02017 	ldw	r3,128(sp)
   18f7c:	18025f16 	blt	r3,zero,198fc <___svfiprintf_internal_r+0x11b0>
   18f80:	180d883a 	mov	r6,r3
   18f84:	000b883a 	mov	r5,zero
   18f88:	8809883a 	mov	r4,r17
   18f8c:	da002d15 	stw	r8,180(sp)
   18f90:	0016a080 	call	16a08 <memchr>
   18f94:	da002d17 	ldw	r8,180(sp)
   18f98:	1002a526 	beq	r2,zero,19a30 <___svfiprintf_internal_r+0x12e4>
   18f9c:	1469c83a 	sub	r20,r2,r17
   18fa0:	dd401d83 	ldbu	r21,118(sp)
   18fa4:	ddc02415 	stw	r23,144(sp)
   18fa8:	d8002015 	stw	zero,128(sp)
   18fac:	003f0b06 	br	18bdc <__alt_data_end+0xfc018bdc>
   18fb0:	8c400814 	ori	r17,r17,32
   18fb4:	98c00007 	ldb	r3,0(r19)
   18fb8:	003e3006 	br	1887c <__alt_data_end+0xfc01887c>
   18fbc:	8821883a 	mov	r16,r17
   18fc0:	dc402103 	ldbu	r17,132(sp)
   18fc4:	b811883a 	mov	r8,r23
   18fc8:	8c403fcc 	andi	r17,r17,255
   18fcc:	8802b01e 	bne	r17,zero,19a90 <___svfiprintf_internal_r+0x1344>
   18fd0:	84000414 	ori	r16,r16,16
   18fd4:	8080080c 	andi	r2,r16,32
   18fd8:	103fba1e 	bne	r2,zero,18ec4 <__alt_data_end+0xfc018ec4>
   18fdc:	8080040c 	andi	r2,r16,16
   18fe0:	1001df1e 	bne	r2,zero,19760 <___svfiprintf_internal_r+0x1014>
   18fe4:	8080100c 	andi	r2,r16,64
   18fe8:	10023d26 	beq	r2,zero,198e0 <___svfiprintf_internal_r+0x1194>
   18fec:	d8802417 	ldw	r2,144(sp)
   18ff0:	1480000f 	ldh	r18,0(r2)
   18ff4:	10800104 	addi	r2,r2,4
   18ff8:	d8802415 	stw	r2,144(sp)
   18ffc:	9029d7fa 	srai	r20,r18,31
   19000:	a005883a 	mov	r2,r20
   19004:	103fb60e 	bge	r2,zero,18ee0 <__alt_data_end+0xfc018ee0>
   19008:	d9402017 	ldw	r5,128(sp)
   1900c:	04a5c83a 	sub	r18,zero,r18
   19010:	05400b44 	movi	r21,45
   19014:	9004c03a 	cmpne	r2,r18,zero
   19018:	0529c83a 	sub	r20,zero,r20
   1901c:	dd401d85 	stb	r21,118(sp)
   19020:	a0a9c83a 	sub	r20,r20,r2
   19024:	28026c16 	blt	r5,zero,199d8 <___svfiprintf_internal_r+0x128c>
   19028:	00bfdfc4 	movi	r2,-129
   1902c:	80a0703a 	and	r16,r16,r2
   19030:	a03fb31e 	bne	r20,zero,18f00 <__alt_data_end+0xfc018f00>
   19034:	00004606 	br	19150 <___svfiprintf_internal_r+0xa04>
   19038:	9839883a 	mov	fp,r19
   1903c:	d8002515 	stw	zero,148(sp)
   19040:	1c3ff404 	addi	r16,r3,-48
   19044:	0009883a 	mov	r4,zero
   19048:	01400284 	movi	r5,10
   1904c:	000cf040 	call	cf04 <__mulsi3>
   19050:	e0c00007 	ldb	r3,0(fp)
   19054:	8089883a 	add	r4,r16,r2
   19058:	9cc00044 	addi	r19,r19,1
   1905c:	1c3ff404 	addi	r16,r3,-48
   19060:	9839883a 	mov	fp,r19
   19064:	a43ff82e 	bgeu	r20,r16,19048 <__alt_data_end+0xfc019048>
   19068:	d9002515 	stw	r4,148(sp)
   1906c:	18bff804 	addi	r2,r3,-32
   19070:	90be052e 	bgeu	r18,r2,18888 <__alt_data_end+0xfc018888>
   19074:	8821883a 	mov	r16,r17
   19078:	dc402103 	ldbu	r17,132(sp)
   1907c:	b811883a 	mov	r8,r23
   19080:	8c403fcc 	andi	r17,r17,255
   19084:	88028d1e 	bne	r17,zero,19abc <___svfiprintf_internal_r+0x1370>
   19088:	1800ea26 	beq	r3,zero,19434 <___svfiprintf_internal_r+0xce8>
   1908c:	04800044 	movi	r18,1
   19090:	d8c01005 	stb	r3,64(sp)
   19094:	d8001d85 	stb	zero,118(sp)
   19098:	9029883a 	mov	r20,r18
   1909c:	dc401004 	addi	r17,sp,64
   190a0:	003f1306 	br	18cf0 <__alt_data_end+0xfc018cf0>
   190a4:	8c402014 	ori	r17,r17,128
   190a8:	98c00007 	ldb	r3,0(r19)
   190ac:	003df306 	br	1887c <__alt_data_end+0xfc01887c>
   190b0:	98c00007 	ldb	r3,0(r19)
   190b4:	01000a84 	movi	r4,42
   190b8:	9f000044 	addi	fp,r19,1
   190bc:	19026326 	beq	r3,r4,19a4c <___svfiprintf_internal_r+0x1300>
   190c0:	1c3ff404 	addi	r16,r3,-48
   190c4:	0009883a 	mov	r4,zero
   190c8:	a4025636 	bltu	r20,r16,19a24 <___svfiprintf_internal_r+0x12d8>
   190cc:	01400284 	movi	r5,10
   190d0:	000cf040 	call	cf04 <__mulsi3>
   190d4:	e0c00007 	ldb	r3,0(fp)
   190d8:	1409883a 	add	r4,r2,r16
   190dc:	e4c00044 	addi	r19,fp,1
   190e0:	1c3ff404 	addi	r16,r3,-48
   190e4:	9839883a 	mov	fp,r19
   190e8:	a43ff82e 	bgeu	r20,r16,190cc <__alt_data_end+0xfc0190cc>
   190ec:	20020c16 	blt	r4,zero,19920 <___svfiprintf_internal_r+0x11d4>
   190f0:	d9002015 	stw	r4,128(sp)
   190f4:	003de206 	br	18880 <__alt_data_end+0xfc018880>
   190f8:	8821883a 	mov	r16,r17
   190fc:	dc402103 	ldbu	r17,132(sp)
   19100:	b811883a 	mov	r8,r23
   19104:	8c403fcc 	andi	r17,r17,255
   19108:	8802721e 	bne	r17,zero,19ad4 <___svfiprintf_internal_r+0x1388>
   1910c:	84000414 	ori	r16,r16,16
   19110:	8080080c 	andi	r2,r16,32
   19114:	103e9f1e 	bne	r2,zero,18b94 <__alt_data_end+0xfc018b94>
   19118:	8080040c 	andi	r2,r16,16
   1911c:	10015326 	beq	r2,zero,1966c <___svfiprintf_internal_r+0xf20>
   19120:	d8c02417 	ldw	r3,144(sp)
   19124:	d9002017 	ldw	r4,128(sp)
   19128:	d8001d85 	stb	zero,118(sp)
   1912c:	18800104 	addi	r2,r3,4
   19130:	1c800017 	ldw	r18,0(r3)
   19134:	0029883a 	mov	r20,zero
   19138:	20015516 	blt	r4,zero,19690 <___svfiprintf_internal_r+0xf44>
   1913c:	00ffdfc4 	movi	r3,-129
   19140:	d8802415 	stw	r2,144(sp)
   19144:	80e0703a 	and	r16,r16,r3
   19148:	002b883a 	mov	r21,zero
   1914c:	903e9e26 	beq	r18,zero,18bc8 <__alt_data_end+0xfc018bc8>
   19150:	00800244 	movi	r2,9
   19154:	14bf6a36 	bltu	r2,r18,18f00 <__alt_data_end+0xfc018f00>
   19158:	94800c04 	addi	r18,r18,48
   1915c:	dc8019c5 	stb	r18,103(sp)
   19160:	dd002c17 	ldw	r20,176(sp)
   19164:	dc4019c4 	addi	r17,sp,103
   19168:	003e9c06 	br	18bdc <__alt_data_end+0xfc018bdc>
   1916c:	8821883a 	mov	r16,r17
   19170:	dc402103 	ldbu	r17,132(sp)
   19174:	b811883a 	mov	r8,r23
   19178:	8c403fcc 	andi	r17,r17,255
   1917c:	8802571e 	bne	r17,zero,19adc <___svfiprintf_internal_r+0x1390>
   19180:	84000414 	ori	r16,r16,16
   19184:	8080080c 	andi	r2,r16,32
   19188:	103ea91e 	bne	r2,zero,18c30 <__alt_data_end+0xfc018c30>
   1918c:	8080040c 	andi	r2,r16,16
   19190:	10018026 	beq	r2,zero,19794 <___svfiprintf_internal_r+0x1048>
   19194:	d9402417 	ldw	r5,144(sp)
   19198:	d8c02017 	ldw	r3,128(sp)
   1919c:	d8001d85 	stb	zero,118(sp)
   191a0:	28800104 	addi	r2,r5,4
   191a4:	2c800017 	ldw	r18,0(r5)
   191a8:	0029883a 	mov	r20,zero
   191ac:	18018216 	blt	r3,zero,197b8 <___svfiprintf_internal_r+0x106c>
   191b0:	00ffdfc4 	movi	r3,-129
   191b4:	d8802415 	stw	r2,144(sp)
   191b8:	80e0703a 	and	r16,r16,r3
   191bc:	903ea81e 	bne	r18,zero,18c60 <__alt_data_end+0xfc018c60>
   191c0:	d8802017 	ldw	r2,128(sp)
   191c4:	002b883a 	mov	r21,zero
   191c8:	1001f226 	beq	r2,zero,19994 <___svfiprintf_internal_r+0x1248>
   191cc:	0025883a 	mov	r18,zero
   191d0:	0029883a 	mov	r20,zero
   191d4:	003ea306 	br	18c64 <__alt_data_end+0xfc018c64>
   191d8:	d8c01c17 	ldw	r3,112(sp)
   191dc:	d8801b17 	ldw	r2,108(sp)
   191e0:	d9001d87 	ldb	r4,118(sp)
   191e4:	20000b26 	beq	r4,zero,19214 <___svfiprintf_internal_r+0xac8>
   191e8:	d9001d84 	addi	r4,sp,118
   191ec:	18c00044 	addi	r3,r3,1
   191f0:	10800044 	addi	r2,r2,1
   191f4:	41000015 	stw	r4,0(r8)
   191f8:	01000044 	movi	r4,1
   191fc:	41000115 	stw	r4,4(r8)
   19200:	d8c01c15 	stw	r3,112(sp)
   19204:	d8801b15 	stw	r2,108(sp)
   19208:	010001c4 	movi	r4,7
   1920c:	2080f316 	blt	r4,r2,195dc <___svfiprintf_internal_r+0xe90>
   19210:	42000204 	addi	r8,r8,8
   19214:	d9402117 	ldw	r5,132(sp)
   19218:	28000b26 	beq	r5,zero,19248 <___svfiprintf_internal_r+0xafc>
   1921c:	d9001d04 	addi	r4,sp,116
   19220:	18c00084 	addi	r3,r3,2
   19224:	10800044 	addi	r2,r2,1
   19228:	41000015 	stw	r4,0(r8)
   1922c:	01000084 	movi	r4,2
   19230:	41000115 	stw	r4,4(r8)
   19234:	d8c01c15 	stw	r3,112(sp)
   19238:	d8801b15 	stw	r2,108(sp)
   1923c:	010001c4 	movi	r4,7
   19240:	2080ef16 	blt	r4,r2,19600 <___svfiprintf_internal_r+0xeb4>
   19244:	42000204 	addi	r8,r8,8
   19248:	d9402217 	ldw	r5,136(sp)
   1924c:	01002004 	movi	r4,128
   19250:	29008f26 	beq	r5,r4,19490 <___svfiprintf_internal_r+0xd44>
   19254:	d9002017 	ldw	r4,128(sp)
   19258:	252fc83a 	sub	r23,r4,r20
   1925c:	05c0310e 	bge	zero,r23,19324 <___svfiprintf_internal_r+0xbd8>
   19260:	07000404 	movi	fp,16
   19264:	e5c17d0e 	bge	fp,r23,1985c <___svfiprintf_internal_r+0x1110>
   19268:	010000f4 	movhi	r4,3
   1926c:	212aeb04 	addi	r4,r4,-21588
   19270:	dc002015 	stw	r16,128(sp)
   19274:	dc402215 	stw	r17,136(sp)
   19278:	d9002115 	stw	r4,132(sp)
   1927c:	b823883a 	mov	r17,r23
   19280:	054001c4 	movi	r21,7
   19284:	982f883a 	mov	r23,r19
   19288:	dc002717 	ldw	r16,156(sp)
   1928c:	9027883a 	mov	r19,r18
   19290:	dc802317 	ldw	r18,140(sp)
   19294:	00000306 	br	192a4 <___svfiprintf_internal_r+0xb58>
   19298:	8c7ffc04 	addi	r17,r17,-16
   1929c:	42000204 	addi	r8,r8,8
   192a0:	e440110e 	bge	fp,r17,192e8 <___svfiprintf_internal_r+0xb9c>
   192a4:	18c00404 	addi	r3,r3,16
   192a8:	10800044 	addi	r2,r2,1
   192ac:	45800015 	stw	r22,0(r8)
   192b0:	47000115 	stw	fp,4(r8)
   192b4:	d8c01c15 	stw	r3,112(sp)
   192b8:	d8801b15 	stw	r2,108(sp)
   192bc:	a8bff60e 	bge	r21,r2,19298 <__alt_data_end+0xfc019298>
   192c0:	d9801a04 	addi	r6,sp,104
   192c4:	900b883a 	mov	r5,r18
   192c8:	8009883a 	mov	r4,r16
   192cc:	001857c0 	call	1857c <__ssprint_r>
   192d0:	10005e1e 	bne	r2,zero,1944c <___svfiprintf_internal_r+0xd00>
   192d4:	8c7ffc04 	addi	r17,r17,-16
   192d8:	d8c01c17 	ldw	r3,112(sp)
   192dc:	d8801b17 	ldw	r2,108(sp)
   192e0:	d811883a 	mov	r8,sp
   192e4:	e47fef16 	blt	fp,r17,192a4 <__alt_data_end+0xfc0192a4>
   192e8:	9825883a 	mov	r18,r19
   192ec:	dc002017 	ldw	r16,128(sp)
   192f0:	b827883a 	mov	r19,r23
   192f4:	882f883a 	mov	r23,r17
   192f8:	dc402217 	ldw	r17,136(sp)
   192fc:	d9402117 	ldw	r5,132(sp)
   19300:	1dc7883a 	add	r3,r3,r23
   19304:	10800044 	addi	r2,r2,1
   19308:	41400015 	stw	r5,0(r8)
   1930c:	45c00115 	stw	r23,4(r8)
   19310:	d8c01c15 	stw	r3,112(sp)
   19314:	d8801b15 	stw	r2,108(sp)
   19318:	010001c4 	movi	r4,7
   1931c:	2080a616 	blt	r4,r2,195b8 <___svfiprintf_internal_r+0xe6c>
   19320:	42000204 	addi	r8,r8,8
   19324:	a0c7883a 	add	r3,r20,r3
   19328:	10800044 	addi	r2,r2,1
   1932c:	44400015 	stw	r17,0(r8)
   19330:	45000115 	stw	r20,4(r8)
   19334:	d8c01c15 	stw	r3,112(sp)
   19338:	d8801b15 	stw	r2,108(sp)
   1933c:	010001c4 	movi	r4,7
   19340:	20808816 	blt	r4,r2,19564 <___svfiprintf_internal_r+0xe18>
   19344:	42000204 	addi	r8,r8,8
   19348:	8400010c 	andi	r16,r16,4
   1934c:	80002c26 	beq	r16,zero,19400 <___svfiprintf_internal_r+0xcb4>
   19350:	d8802517 	ldw	r2,148(sp)
   19354:	14a1c83a 	sub	r16,r2,r18
   19358:	0400290e 	bge	zero,r16,19400 <___svfiprintf_internal_r+0xcb4>
   1935c:	04400404 	movi	r17,16
   19360:	d8801b17 	ldw	r2,108(sp)
   19364:	8c01a70e 	bge	r17,r16,19a04 <___svfiprintf_internal_r+0x12b8>
   19368:	014000f4 	movhi	r5,3
   1936c:	296aef04 	addi	r5,r5,-21572
   19370:	d9402815 	stw	r5,160(sp)
   19374:	050001c4 	movi	r20,7
   19378:	dd402717 	ldw	r21,156(sp)
   1937c:	ddc02317 	ldw	r23,140(sp)
   19380:	00000306 	br	19390 <___svfiprintf_internal_r+0xc44>
   19384:	843ffc04 	addi	r16,r16,-16
   19388:	42000204 	addi	r8,r8,8
   1938c:	8c00130e 	bge	r17,r16,193dc <___svfiprintf_internal_r+0xc90>
   19390:	010000f4 	movhi	r4,3
   19394:	18c00404 	addi	r3,r3,16
   19398:	10800044 	addi	r2,r2,1
   1939c:	212aef04 	addi	r4,r4,-21572
   193a0:	41000015 	stw	r4,0(r8)
   193a4:	44400115 	stw	r17,4(r8)
   193a8:	d8c01c15 	stw	r3,112(sp)
   193ac:	d8801b15 	stw	r2,108(sp)
   193b0:	a0bff40e 	bge	r20,r2,19384 <__alt_data_end+0xfc019384>
   193b4:	d9801a04 	addi	r6,sp,104
   193b8:	b80b883a 	mov	r5,r23
   193bc:	a809883a 	mov	r4,r21
   193c0:	001857c0 	call	1857c <__ssprint_r>
   193c4:	1000211e 	bne	r2,zero,1944c <___svfiprintf_internal_r+0xd00>
   193c8:	843ffc04 	addi	r16,r16,-16
   193cc:	d8c01c17 	ldw	r3,112(sp)
   193d0:	d8801b17 	ldw	r2,108(sp)
   193d4:	d811883a 	mov	r8,sp
   193d8:	8c3fed16 	blt	r17,r16,19390 <__alt_data_end+0xfc019390>
   193dc:	d9402817 	ldw	r5,160(sp)
   193e0:	1c07883a 	add	r3,r3,r16
   193e4:	10800044 	addi	r2,r2,1
   193e8:	41400015 	stw	r5,0(r8)
   193ec:	44000115 	stw	r16,4(r8)
   193f0:	d8c01c15 	stw	r3,112(sp)
   193f4:	d8801b15 	stw	r2,108(sp)
   193f8:	010001c4 	movi	r4,7
   193fc:	2080b516 	blt	r4,r2,196d4 <___svfiprintf_internal_r+0xf88>
   19400:	d8802517 	ldw	r2,148(sp)
   19404:	1480010e 	bge	r2,r18,1940c <___svfiprintf_internal_r+0xcc0>
   19408:	9005883a 	mov	r2,r18
   1940c:	d9002617 	ldw	r4,152(sp)
   19410:	2089883a 	add	r4,r4,r2
   19414:	d9002615 	stw	r4,152(sp)
   19418:	18005a1e 	bne	r3,zero,19584 <___svfiprintf_internal_r+0xe38>
   1941c:	98800007 	ldb	r2,0(r19)
   19420:	d8001b15 	stw	zero,108(sp)
   19424:	d811883a 	mov	r8,sp
   19428:	103cec1e 	bne	r2,zero,187dc <__alt_data_end+0xfc0187dc>
   1942c:	9825883a 	mov	r18,r19
   19430:	003d0206 	br	1883c <__alt_data_end+0xfc01883c>
   19434:	d8801c17 	ldw	r2,112(sp)
   19438:	10000426 	beq	r2,zero,1944c <___svfiprintf_internal_r+0xd00>
   1943c:	d9402317 	ldw	r5,140(sp)
   19440:	d9002717 	ldw	r4,156(sp)
   19444:	d9801a04 	addi	r6,sp,104
   19448:	001857c0 	call	1857c <__ssprint_r>
   1944c:	d9402317 	ldw	r5,140(sp)
   19450:	d8802617 	ldw	r2,152(sp)
   19454:	28c0030b 	ldhu	r3,12(r5)
   19458:	18c0100c 	andi	r3,r3,64
   1945c:	18015c1e 	bne	r3,zero,199d0 <___svfiprintf_internal_r+0x1284>
   19460:	dfc03717 	ldw	ra,220(sp)
   19464:	df003617 	ldw	fp,216(sp)
   19468:	ddc03517 	ldw	r23,212(sp)
   1946c:	dd803417 	ldw	r22,208(sp)
   19470:	dd403317 	ldw	r21,204(sp)
   19474:	dd003217 	ldw	r20,200(sp)
   19478:	dcc03117 	ldw	r19,196(sp)
   1947c:	dc803017 	ldw	r18,192(sp)
   19480:	dc402f17 	ldw	r17,188(sp)
   19484:	dc002e17 	ldw	r16,184(sp)
   19488:	dec03804 	addi	sp,sp,224
   1948c:	f800283a 	ret
   19490:	d9002517 	ldw	r4,148(sp)
   19494:	24afc83a 	sub	r23,r4,r18
   19498:	05ff6e0e 	bge	zero,r23,19254 <__alt_data_end+0xfc019254>
   1949c:	07000404 	movi	fp,16
   194a0:	e5c15c0e 	bge	fp,r23,19a14 <___svfiprintf_internal_r+0x12c8>
   194a4:	010000f4 	movhi	r4,3
   194a8:	212aeb04 	addi	r4,r4,-21588
   194ac:	dc002215 	stw	r16,136(sp)
   194b0:	dc402815 	stw	r17,160(sp)
   194b4:	d9002115 	stw	r4,132(sp)
   194b8:	b823883a 	mov	r17,r23
   194bc:	054001c4 	movi	r21,7
   194c0:	982f883a 	mov	r23,r19
   194c4:	dc002717 	ldw	r16,156(sp)
   194c8:	9027883a 	mov	r19,r18
   194cc:	dc802317 	ldw	r18,140(sp)
   194d0:	00000306 	br	194e0 <___svfiprintf_internal_r+0xd94>
   194d4:	8c7ffc04 	addi	r17,r17,-16
   194d8:	42000204 	addi	r8,r8,8
   194dc:	e440110e 	bge	fp,r17,19524 <___svfiprintf_internal_r+0xdd8>
   194e0:	18c00404 	addi	r3,r3,16
   194e4:	10800044 	addi	r2,r2,1
   194e8:	45800015 	stw	r22,0(r8)
   194ec:	47000115 	stw	fp,4(r8)
   194f0:	d8c01c15 	stw	r3,112(sp)
   194f4:	d8801b15 	stw	r2,108(sp)
   194f8:	a8bff60e 	bge	r21,r2,194d4 <__alt_data_end+0xfc0194d4>
   194fc:	d9801a04 	addi	r6,sp,104
   19500:	900b883a 	mov	r5,r18
   19504:	8009883a 	mov	r4,r16
   19508:	001857c0 	call	1857c <__ssprint_r>
   1950c:	103fcf1e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   19510:	8c7ffc04 	addi	r17,r17,-16
   19514:	d8c01c17 	ldw	r3,112(sp)
   19518:	d8801b17 	ldw	r2,108(sp)
   1951c:	d811883a 	mov	r8,sp
   19520:	e47fef16 	blt	fp,r17,194e0 <__alt_data_end+0xfc0194e0>
   19524:	9825883a 	mov	r18,r19
   19528:	dc002217 	ldw	r16,136(sp)
   1952c:	b827883a 	mov	r19,r23
   19530:	882f883a 	mov	r23,r17
   19534:	dc402817 	ldw	r17,160(sp)
   19538:	d9402117 	ldw	r5,132(sp)
   1953c:	1dc7883a 	add	r3,r3,r23
   19540:	10800044 	addi	r2,r2,1
   19544:	41400015 	stw	r5,0(r8)
   19548:	45c00115 	stw	r23,4(r8)
   1954c:	d8c01c15 	stw	r3,112(sp)
   19550:	d8801b15 	stw	r2,108(sp)
   19554:	010001c4 	movi	r4,7
   19558:	2080b716 	blt	r4,r2,19838 <___svfiprintf_internal_r+0x10ec>
   1955c:	42000204 	addi	r8,r8,8
   19560:	003f3c06 	br	19254 <__alt_data_end+0xfc019254>
   19564:	d9402317 	ldw	r5,140(sp)
   19568:	d9002717 	ldw	r4,156(sp)
   1956c:	d9801a04 	addi	r6,sp,104
   19570:	001857c0 	call	1857c <__ssprint_r>
   19574:	103fb51e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   19578:	d8c01c17 	ldw	r3,112(sp)
   1957c:	d811883a 	mov	r8,sp
   19580:	003f7106 	br	19348 <__alt_data_end+0xfc019348>
   19584:	d9402317 	ldw	r5,140(sp)
   19588:	d9002717 	ldw	r4,156(sp)
   1958c:	d9801a04 	addi	r6,sp,104
   19590:	001857c0 	call	1857c <__ssprint_r>
   19594:	103fa126 	beq	r2,zero,1941c <__alt_data_end+0xfc01941c>
   19598:	003fac06 	br	1944c <__alt_data_end+0xfc01944c>
   1959c:	d9402317 	ldw	r5,140(sp)
   195a0:	d9002717 	ldw	r4,156(sp)
   195a4:	d9801a04 	addi	r6,sp,104
   195a8:	001857c0 	call	1857c <__ssprint_r>
   195ac:	103fa71e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   195b0:	d811883a 	mov	r8,sp
   195b4:	003c9e06 	br	18830 <__alt_data_end+0xfc018830>
   195b8:	d9402317 	ldw	r5,140(sp)
   195bc:	d9002717 	ldw	r4,156(sp)
   195c0:	d9801a04 	addi	r6,sp,104
   195c4:	001857c0 	call	1857c <__ssprint_r>
   195c8:	103fa01e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   195cc:	d8c01c17 	ldw	r3,112(sp)
   195d0:	d8801b17 	ldw	r2,108(sp)
   195d4:	d811883a 	mov	r8,sp
   195d8:	003f5206 	br	19324 <__alt_data_end+0xfc019324>
   195dc:	d9402317 	ldw	r5,140(sp)
   195e0:	d9002717 	ldw	r4,156(sp)
   195e4:	d9801a04 	addi	r6,sp,104
   195e8:	001857c0 	call	1857c <__ssprint_r>
   195ec:	103f971e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   195f0:	d8c01c17 	ldw	r3,112(sp)
   195f4:	d8801b17 	ldw	r2,108(sp)
   195f8:	d811883a 	mov	r8,sp
   195fc:	003f0506 	br	19214 <__alt_data_end+0xfc019214>
   19600:	d9402317 	ldw	r5,140(sp)
   19604:	d9002717 	ldw	r4,156(sp)
   19608:	d9801a04 	addi	r6,sp,104
   1960c:	001857c0 	call	1857c <__ssprint_r>
   19610:	103f8e1e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   19614:	d8c01c17 	ldw	r3,112(sp)
   19618:	d8801b17 	ldw	r2,108(sp)
   1961c:	d811883a 	mov	r8,sp
   19620:	003f0906 	br	19248 <__alt_data_end+0xfc019248>
   19624:	d9402017 	ldw	r5,128(sp)
   19628:	d8001d85 	stb	zero,118(sp)
   1962c:	28007716 	blt	r5,zero,1980c <___svfiprintf_internal_r+0x10c0>
   19630:	00ffdfc4 	movi	r3,-129
   19634:	9504b03a 	or	r2,r18,r20
   19638:	80e0703a 	and	r16,r16,r3
   1963c:	103d3926 	beq	r2,zero,18b24 <__alt_data_end+0xfc018b24>
   19640:	002b883a 	mov	r21,zero
   19644:	003d3c06 	br	18b38 <__alt_data_end+0xfc018b38>
   19648:	d9402317 	ldw	r5,140(sp)
   1964c:	d9002717 	ldw	r4,156(sp)
   19650:	d9801a04 	addi	r6,sp,104
   19654:	001857c0 	call	1857c <__ssprint_r>
   19658:	103f7c1e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   1965c:	d8c01c17 	ldw	r3,112(sp)
   19660:	d8801b17 	ldw	r2,108(sp)
   19664:	d811883a 	mov	r8,sp
   19668:	003edd06 	br	191e0 <__alt_data_end+0xfc0191e0>
   1966c:	8080100c 	andi	r2,r16,64
   19670:	d8001d85 	stb	zero,118(sp)
   19674:	10008426 	beq	r2,zero,19888 <___svfiprintf_internal_r+0x113c>
   19678:	d9402417 	ldw	r5,144(sp)
   1967c:	d8c02017 	ldw	r3,128(sp)
   19680:	0029883a 	mov	r20,zero
   19684:	28800104 	addi	r2,r5,4
   19688:	2c80000b 	ldhu	r18,0(r5)
   1968c:	183eab0e 	bge	r3,zero,1913c <__alt_data_end+0xfc01913c>
   19690:	d8802415 	stw	r2,144(sp)
   19694:	002b883a 	mov	r21,zero
   19698:	9504b03a 	or	r2,r18,r20
   1969c:	103e171e 	bne	r2,zero,18efc <__alt_data_end+0xfc018efc>
   196a0:	00800044 	movi	r2,1
   196a4:	10803fcc 	andi	r2,r2,255
   196a8:	00c00044 	movi	r3,1
   196ac:	10c05c26 	beq	r2,r3,19820 <___svfiprintf_internal_r+0x10d4>
   196b0:	00c00084 	movi	r3,2
   196b4:	10fd1e26 	beq	r2,r3,18b30 <__alt_data_end+0xfc018b30>
   196b8:	003ec406 	br	191cc <__alt_data_end+0xfc0191cc>
   196bc:	d9401e17 	ldw	r5,120(sp)
   196c0:	2c69c83a 	sub	r20,r5,r17
   196c4:	003d4506 	br	18bdc <__alt_data_end+0xfc018bdc>
   196c8:	d8802415 	stw	r2,144(sp)
   196cc:	98c00007 	ldb	r3,0(r19)
   196d0:	003c6a06 	br	1887c <__alt_data_end+0xfc01887c>
   196d4:	d9402317 	ldw	r5,140(sp)
   196d8:	d9002717 	ldw	r4,156(sp)
   196dc:	d9801a04 	addi	r6,sp,104
   196e0:	001857c0 	call	1857c <__ssprint_r>
   196e4:	103f591e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   196e8:	d8c01c17 	ldw	r3,112(sp)
   196ec:	003f4406 	br	19400 <__alt_data_end+0xfc019400>
   196f0:	014000f4 	movhi	r5,3
   196f4:	296a8304 	addi	r5,r5,-22004
   196f8:	d9402915 	stw	r5,164(sp)
   196fc:	003d0906 	br	18b24 <__alt_data_end+0xfc018b24>
   19700:	d8c02417 	ldw	r3,144(sp)
   19704:	d9002617 	ldw	r4,152(sp)
   19708:	d9402417 	ldw	r5,144(sp)
   1970c:	18800017 	ldw	r2,0(r3)
   19710:	2007d7fa 	srai	r3,r4,31
   19714:	29400104 	addi	r5,r5,4
   19718:	d9402415 	stw	r5,144(sp)
   1971c:	11000015 	stw	r4,0(r2)
   19720:	10c00115 	stw	r3,4(r2)
   19724:	003c2b06 	br	187d4 <__alt_data_end+0xfc0187d4>
   19728:	d8c01d45 	stb	r3,117(sp)
   1972c:	d8c02017 	ldw	r3,128(sp)
   19730:	00800c04 	movi	r2,48
   19734:	d8801d05 	stb	r2,116(sp)
   19738:	d8001d85 	stb	zero,118(sp)
   1973c:	80800094 	ori	r2,r16,2
   19740:	1800ac16 	blt	r3,zero,199f4 <___svfiprintf_internal_r+0x12a8>
   19744:	00bfdfc4 	movi	r2,-129
   19748:	80a0703a 	and	r16,r16,r2
   1974c:	84000094 	ori	r16,r16,2
   19750:	002b883a 	mov	r21,zero
   19754:	003cf806 	br	18b38 <__alt_data_end+0xfc018b38>
   19758:	98c00007 	ldb	r3,0(r19)
   1975c:	003c4706 	br	1887c <__alt_data_end+0xfc01887c>
   19760:	d9402417 	ldw	r5,144(sp)
   19764:	2c800017 	ldw	r18,0(r5)
   19768:	29400104 	addi	r5,r5,4
   1976c:	d9402415 	stw	r5,144(sp)
   19770:	9029d7fa 	srai	r20,r18,31
   19774:	a005883a 	mov	r2,r20
   19778:	003dd806 	br	18edc <__alt_data_end+0xfc018edc>
   1977c:	d9402417 	ldw	r5,144(sp)
   19780:	0029883a 	mov	r20,zero
   19784:	2c800017 	ldw	r18,0(r5)
   19788:	29400104 	addi	r5,r5,4
   1978c:	d9402415 	stw	r5,144(sp)
   19790:	003cdb06 	br	18b00 <__alt_data_end+0xfc018b00>
   19794:	8080100c 	andi	r2,r16,64
   19798:	d8001d85 	stb	zero,118(sp)
   1979c:	10003326 	beq	r2,zero,1986c <___svfiprintf_internal_r+0x1120>
   197a0:	d9002417 	ldw	r4,144(sp)
   197a4:	d9402017 	ldw	r5,128(sp)
   197a8:	0029883a 	mov	r20,zero
   197ac:	20800104 	addi	r2,r4,4
   197b0:	2480000b 	ldhu	r18,0(r4)
   197b4:	283e7e0e 	bge	r5,zero,191b0 <__alt_data_end+0xfc0191b0>
   197b8:	9506b03a 	or	r3,r18,r20
   197bc:	d8802415 	stw	r2,144(sp)
   197c0:	183d271e 	bne	r3,zero,18c60 <__alt_data_end+0xfc018c60>
   197c4:	002b883a 	mov	r21,zero
   197c8:	0005883a 	mov	r2,zero
   197cc:	003fb506 	br	196a4 <__alt_data_end+0xfc0196a4>
   197d0:	98c00043 	ldbu	r3,1(r19)
   197d4:	8c400814 	ori	r17,r17,32
   197d8:	9cc00044 	addi	r19,r19,1
   197dc:	18c03fcc 	andi	r3,r3,255
   197e0:	18c0201c 	xori	r3,r3,128
   197e4:	18ffe004 	addi	r3,r3,-128
   197e8:	003c2406 	br	1887c <__alt_data_end+0xfc01887c>
   197ec:	d8c02415 	stw	r3,144(sp)
   197f0:	002b883a 	mov	r21,zero
   197f4:	003fa806 	br	19698 <__alt_data_end+0xfc019698>
   197f8:	010000f4 	movhi	r4,3
   197fc:	212a8304 	addi	r4,r4,-22004
   19800:	d9002915 	stw	r4,164(sp)
   19804:	d8c02415 	stw	r3,144(sp)
   19808:	1021883a 	mov	r16,r2
   1980c:	9504b03a 	or	r2,r18,r20
   19810:	103f8b1e 	bne	r2,zero,19640 <__alt_data_end+0xfc019640>
   19814:	002b883a 	mov	r21,zero
   19818:	00800084 	movi	r2,2
   1981c:	003fa106 	br	196a4 <__alt_data_end+0xfc0196a4>
   19820:	0025883a 	mov	r18,zero
   19824:	94800c04 	addi	r18,r18,48
   19828:	dc8019c5 	stb	r18,103(sp)
   1982c:	dd002c17 	ldw	r20,176(sp)
   19830:	dc4019c4 	addi	r17,sp,103
   19834:	003ce906 	br	18bdc <__alt_data_end+0xfc018bdc>
   19838:	d9402317 	ldw	r5,140(sp)
   1983c:	d9002717 	ldw	r4,156(sp)
   19840:	d9801a04 	addi	r6,sp,104
   19844:	001857c0 	call	1857c <__ssprint_r>
   19848:	103f001e 	bne	r2,zero,1944c <__alt_data_end+0xfc01944c>
   1984c:	d8c01c17 	ldw	r3,112(sp)
   19850:	d8801b17 	ldw	r2,108(sp)
   19854:	d811883a 	mov	r8,sp
   19858:	003e7e06 	br	19254 <__alt_data_end+0xfc019254>
   1985c:	014000f4 	movhi	r5,3
   19860:	296aeb04 	addi	r5,r5,-21588
   19864:	d9402115 	stw	r5,132(sp)
   19868:	003ea406 	br	192fc <__alt_data_end+0xfc0192fc>
   1986c:	d8c02417 	ldw	r3,144(sp)
   19870:	d9002017 	ldw	r4,128(sp)
   19874:	0029883a 	mov	r20,zero
   19878:	18800104 	addi	r2,r3,4
   1987c:	1c800017 	ldw	r18,0(r3)
   19880:	203e4b0e 	bge	r4,zero,191b0 <__alt_data_end+0xfc0191b0>
   19884:	003fcc06 	br	197b8 <__alt_data_end+0xfc0197b8>
   19888:	d9002417 	ldw	r4,144(sp)
   1988c:	d9402017 	ldw	r5,128(sp)
   19890:	0029883a 	mov	r20,zero
   19894:	20800104 	addi	r2,r4,4
   19898:	24800017 	ldw	r18,0(r4)
   1989c:	283e270e 	bge	r5,zero,1913c <__alt_data_end+0xfc01913c>
   198a0:	003f7b06 	br	19690 <__alt_data_end+0xfc019690>
   198a4:	8400100c 	andi	r16,r16,64
   198a8:	80003326 	beq	r16,zero,19978 <___svfiprintf_internal_r+0x122c>
   198ac:	d9402417 	ldw	r5,144(sp)
   198b0:	d8c02617 	ldw	r3,152(sp)
   198b4:	28800017 	ldw	r2,0(r5)
   198b8:	29400104 	addi	r5,r5,4
   198bc:	d9402415 	stw	r5,144(sp)
   198c0:	10c0000d 	sth	r3,0(r2)
   198c4:	003bc306 	br	187d4 <__alt_data_end+0xfc0187d4>
   198c8:	d9002417 	ldw	r4,144(sp)
   198cc:	0029883a 	mov	r20,zero
   198d0:	24800017 	ldw	r18,0(r4)
   198d4:	21000104 	addi	r4,r4,4
   198d8:	d9002415 	stw	r4,144(sp)
   198dc:	003c8806 	br	18b00 <__alt_data_end+0xfc018b00>
   198e0:	d8c02417 	ldw	r3,144(sp)
   198e4:	1c800017 	ldw	r18,0(r3)
   198e8:	18c00104 	addi	r3,r3,4
   198ec:	d8c02415 	stw	r3,144(sp)
   198f0:	9029d7fa 	srai	r20,r18,31
   198f4:	a005883a 	mov	r2,r20
   198f8:	003d7806 	br	18edc <__alt_data_end+0xfc018edc>
   198fc:	8809883a 	mov	r4,r17
   19900:	da002d15 	stw	r8,180(sp)
   19904:	000f5800 	call	f580 <strlen>
   19908:	1029883a 	mov	r20,r2
   1990c:	dd401d83 	ldbu	r21,118(sp)
   19910:	ddc02415 	stw	r23,144(sp)
   19914:	d8002015 	stw	zero,128(sp)
   19918:	da002d17 	ldw	r8,180(sp)
   1991c:	003caf06 	br	18bdc <__alt_data_end+0xfc018bdc>
   19920:	013fffc4 	movi	r4,-1
   19924:	003df206 	br	190f0 <__alt_data_end+0xfc0190f0>
   19928:	dd002017 	ldw	r20,128(sp)
   1992c:	00800184 	movi	r2,6
   19930:	1500012e 	bgeu	r2,r20,19938 <___svfiprintf_internal_r+0x11ec>
   19934:	1029883a 	mov	r20,r2
   19938:	a025883a 	mov	r18,r20
   1993c:	a0004116 	blt	r20,zero,19a44 <___svfiprintf_internal_r+0x12f8>
   19940:	044000f4 	movhi	r17,3
   19944:	ddc02415 	stw	r23,144(sp)
   19948:	8c6a8804 	addi	r17,r17,-21984
   1994c:	003ce806 	br	18cf0 <__alt_data_end+0xfc018cf0>
   19950:	04001004 	movi	r16,64
   19954:	800b883a 	mov	r5,r16
   19958:	000e4ac0 	call	e4ac <_malloc_r>
   1995c:	d8c02317 	ldw	r3,140(sp)
   19960:	18800015 	stw	r2,0(r3)
   19964:	18800415 	stw	r2,16(r3)
   19968:	10004d26 	beq	r2,zero,19aa0 <___svfiprintf_internal_r+0x1354>
   1996c:	d9402317 	ldw	r5,140(sp)
   19970:	2c000515 	stw	r16,20(r5)
   19974:	003b8906 	br	1879c <__alt_data_end+0xfc01879c>
   19978:	d9002417 	ldw	r4,144(sp)
   1997c:	d9402617 	ldw	r5,152(sp)
   19980:	20800017 	ldw	r2,0(r4)
   19984:	21000104 	addi	r4,r4,4
   19988:	d9002415 	stw	r4,144(sp)
   1998c:	11400015 	stw	r5,0(r2)
   19990:	003b9006 	br	187d4 <__alt_data_end+0xfc0187d4>
   19994:	8080004c 	andi	r2,r16,1
   19998:	002b883a 	mov	r21,zero
   1999c:	10000526 	beq	r2,zero,199b4 <___svfiprintf_internal_r+0x1268>
   199a0:	00800c04 	movi	r2,48
   199a4:	d88019c5 	stb	r2,103(sp)
   199a8:	dd002c17 	ldw	r20,176(sp)
   199ac:	dc4019c4 	addi	r17,sp,103
   199b0:	003c8a06 	br	18bdc <__alt_data_end+0xfc018bdc>
   199b4:	0029883a 	mov	r20,zero
   199b8:	dc401a04 	addi	r17,sp,104
   199bc:	003c8706 	br	18bdc <__alt_data_end+0xfc018bdc>
   199c0:	014000f4 	movhi	r5,3
   199c4:	296aef04 	addi	r5,r5,-21572
   199c8:	d9402815 	stw	r5,160(sp)
   199cc:	003cff06 	br	18dcc <__alt_data_end+0xfc018dcc>
   199d0:	00bfffc4 	movi	r2,-1
   199d4:	003ea206 	br	19460 <__alt_data_end+0xfc019460>
   199d8:	00800044 	movi	r2,1
   199dc:	10803fcc 	andi	r2,r2,255
   199e0:	00c00044 	movi	r3,1
   199e4:	10fd4526 	beq	r2,r3,18efc <__alt_data_end+0xfc018efc>
   199e8:	00c00084 	movi	r3,2
   199ec:	10fc5226 	beq	r2,r3,18b38 <__alt_data_end+0xfc018b38>
   199f0:	003c9c06 	br	18c64 <__alt_data_end+0xfc018c64>
   199f4:	1021883a 	mov	r16,r2
   199f8:	002b883a 	mov	r21,zero
   199fc:	00800084 	movi	r2,2
   19a00:	003ff606 	br	199dc <__alt_data_end+0xfc0199dc>
   19a04:	010000f4 	movhi	r4,3
   19a08:	212aef04 	addi	r4,r4,-21572
   19a0c:	d9002815 	stw	r4,160(sp)
   19a10:	003e7206 	br	193dc <__alt_data_end+0xfc0193dc>
   19a14:	014000f4 	movhi	r5,3
   19a18:	296aeb04 	addi	r5,r5,-21588
   19a1c:	d9402115 	stw	r5,132(sp)
   19a20:	003ec506 	br	19538 <__alt_data_end+0xfc019538>
   19a24:	e027883a 	mov	r19,fp
   19a28:	d8002015 	stw	zero,128(sp)
   19a2c:	003b9406 	br	18880 <__alt_data_end+0xfc018880>
   19a30:	dd002017 	ldw	r20,128(sp)
   19a34:	dd401d83 	ldbu	r21,118(sp)
   19a38:	ddc02415 	stw	r23,144(sp)
   19a3c:	d8002015 	stw	zero,128(sp)
   19a40:	003c6606 	br	18bdc <__alt_data_end+0xfc018bdc>
   19a44:	0025883a 	mov	r18,zero
   19a48:	003fbd06 	br	19940 <__alt_data_end+0xfc019940>
   19a4c:	d9402417 	ldw	r5,144(sp)
   19a50:	d8c02417 	ldw	r3,144(sp)
   19a54:	29400017 	ldw	r5,0(r5)
   19a58:	19000104 	addi	r4,r3,4
   19a5c:	d9002415 	stw	r4,144(sp)
   19a60:	d9402015 	stw	r5,128(sp)
   19a64:	98c00043 	ldbu	r3,1(r19)
   19a68:	e027883a 	mov	r19,fp
   19a6c:	283f5b0e 	bge	r5,zero,197dc <__alt_data_end+0xfc0197dc>
   19a70:	18c03fcc 	andi	r3,r3,255
   19a74:	013fffc4 	movi	r4,-1
   19a78:	18c0201c 	xori	r3,r3,128
   19a7c:	d9002015 	stw	r4,128(sp)
   19a80:	18ffe004 	addi	r3,r3,-128
   19a84:	003b7d06 	br	1887c <__alt_data_end+0xfc01887c>
   19a88:	dd401d85 	stb	r21,118(sp)
   19a8c:	003cf306 	br	18e5c <__alt_data_end+0xfc018e5c>
   19a90:	dd401d85 	stb	r21,118(sp)
   19a94:	003d4e06 	br	18fd0 <__alt_data_end+0xfc018fd0>
   19a98:	dd401d85 	stb	r21,118(sp)
   19a9c:	003c0e06 	br	18ad8 <__alt_data_end+0xfc018ad8>
   19aa0:	d9002717 	ldw	r4,156(sp)
   19aa4:	00800304 	movi	r2,12
   19aa8:	20800015 	stw	r2,0(r4)
   19aac:	00bfffc4 	movi	r2,-1
   19ab0:	003e6b06 	br	19460 <__alt_data_end+0xfc019460>
   19ab4:	dd401d85 	stb	r21,118(sp)
   19ab8:	003d0006 	br	18ebc <__alt_data_end+0xfc018ebc>
   19abc:	dd401d85 	stb	r21,118(sp)
   19ac0:	003d7106 	br	19088 <__alt_data_end+0xfc019088>
   19ac4:	dd401d85 	stb	r21,118(sp)
   19ac8:	003c5706 	br	18c28 <__alt_data_end+0xfc018c28>
   19acc:	dd401d85 	stb	r21,118(sp)
   19ad0:	003c2e06 	br	18b8c <__alt_data_end+0xfc018b8c>
   19ad4:	dd401d85 	stb	r21,118(sp)
   19ad8:	003d8c06 	br	1910c <__alt_data_end+0xfc01910c>
   19adc:	dd401d85 	stb	r21,118(sp)
   19ae0:	003da706 	br	19180 <__alt_data_end+0xfc019180>
   19ae4:	dd401d85 	stb	r21,118(sp)
   19ae8:	003cc806 	br	18e0c <__alt_data_end+0xfc018e0c>

00019aec <__sprint_r.part.0>:
   19aec:	28801917 	ldw	r2,100(r5)
   19af0:	defff604 	addi	sp,sp,-40
   19af4:	dd400515 	stw	r21,20(sp)
   19af8:	dfc00915 	stw	ra,36(sp)
   19afc:	df000815 	stw	fp,32(sp)
   19b00:	ddc00715 	stw	r23,28(sp)
   19b04:	dd800615 	stw	r22,24(sp)
   19b08:	dd000415 	stw	r20,16(sp)
   19b0c:	dcc00315 	stw	r19,12(sp)
   19b10:	dc800215 	stw	r18,8(sp)
   19b14:	dc400115 	stw	r17,4(sp)
   19b18:	dc000015 	stw	r16,0(sp)
   19b1c:	1088000c 	andi	r2,r2,8192
   19b20:	302b883a 	mov	r21,r6
   19b24:	10002e26 	beq	r2,zero,19be0 <__sprint_r.part.0+0xf4>
   19b28:	30800217 	ldw	r2,8(r6)
   19b2c:	35800017 	ldw	r22,0(r6)
   19b30:	10002926 	beq	r2,zero,19bd8 <__sprint_r.part.0+0xec>
   19b34:	2827883a 	mov	r19,r5
   19b38:	2029883a 	mov	r20,r4
   19b3c:	b5c00104 	addi	r23,r22,4
   19b40:	04bfffc4 	movi	r18,-1
   19b44:	bc400017 	ldw	r17,0(r23)
   19b48:	b4000017 	ldw	r16,0(r22)
   19b4c:	0039883a 	mov	fp,zero
   19b50:	8822d0ba 	srli	r17,r17,2
   19b54:	8800031e 	bne	r17,zero,19b64 <__sprint_r.part.0+0x78>
   19b58:	00001806 	br	19bbc <__sprint_r.part.0+0xd0>
   19b5c:	84000104 	addi	r16,r16,4
   19b60:	8f001526 	beq	r17,fp,19bb8 <__sprint_r.part.0+0xcc>
   19b64:	81400017 	ldw	r5,0(r16)
   19b68:	980d883a 	mov	r6,r19
   19b6c:	a009883a 	mov	r4,r20
   19b70:	001b7340 	call	1b734 <_fputwc_r>
   19b74:	e7000044 	addi	fp,fp,1
   19b78:	14bff81e 	bne	r2,r18,19b5c <__alt_data_end+0xfc019b5c>
   19b7c:	9005883a 	mov	r2,r18
   19b80:	a8000215 	stw	zero,8(r21)
   19b84:	a8000115 	stw	zero,4(r21)
   19b88:	dfc00917 	ldw	ra,36(sp)
   19b8c:	df000817 	ldw	fp,32(sp)
   19b90:	ddc00717 	ldw	r23,28(sp)
   19b94:	dd800617 	ldw	r22,24(sp)
   19b98:	dd400517 	ldw	r21,20(sp)
   19b9c:	dd000417 	ldw	r20,16(sp)
   19ba0:	dcc00317 	ldw	r19,12(sp)
   19ba4:	dc800217 	ldw	r18,8(sp)
   19ba8:	dc400117 	ldw	r17,4(sp)
   19bac:	dc000017 	ldw	r16,0(sp)
   19bb0:	dec00a04 	addi	sp,sp,40
   19bb4:	f800283a 	ret
   19bb8:	a8800217 	ldw	r2,8(r21)
   19bbc:	8c63883a 	add	r17,r17,r17
   19bc0:	8c63883a 	add	r17,r17,r17
   19bc4:	1445c83a 	sub	r2,r2,r17
   19bc8:	a8800215 	stw	r2,8(r21)
   19bcc:	b5800204 	addi	r22,r22,8
   19bd0:	bdc00204 	addi	r23,r23,8
   19bd4:	103fdb1e 	bne	r2,zero,19b44 <__alt_data_end+0xfc019b44>
   19bd8:	0005883a 	mov	r2,zero
   19bdc:	003fe806 	br	19b80 <__alt_data_end+0xfc019b80>
   19be0:	00161200 	call	16120 <__sfvwrite_r>
   19be4:	003fe606 	br	19b80 <__alt_data_end+0xfc019b80>

00019be8 <__sprint_r>:
   19be8:	30c00217 	ldw	r3,8(r6)
   19bec:	18000126 	beq	r3,zero,19bf4 <__sprint_r+0xc>
   19bf0:	0019aec1 	jmpi	19aec <__sprint_r.part.0>
   19bf4:	30000115 	stw	zero,4(r6)
   19bf8:	0005883a 	mov	r2,zero
   19bfc:	f800283a 	ret

00019c00 <___vfiprintf_internal_r>:
   19c00:	deffca04 	addi	sp,sp,-216
   19c04:	dd403115 	stw	r21,196(sp)
   19c08:	dfc03515 	stw	ra,212(sp)
   19c0c:	df003415 	stw	fp,208(sp)
   19c10:	ddc03315 	stw	r23,204(sp)
   19c14:	dd803215 	stw	r22,200(sp)
   19c18:	dd003015 	stw	r20,192(sp)
   19c1c:	dcc02f15 	stw	r19,188(sp)
   19c20:	dc802e15 	stw	r18,184(sp)
   19c24:	dc402d15 	stw	r17,180(sp)
   19c28:	dc002c15 	stw	r16,176(sp)
   19c2c:	d9002115 	stw	r4,132(sp)
   19c30:	d9402015 	stw	r5,128(sp)
   19c34:	d9c02215 	stw	r7,136(sp)
   19c38:	302b883a 	mov	r21,r6
   19c3c:	20000226 	beq	r4,zero,19c48 <___vfiprintf_internal_r+0x48>
   19c40:	20800e17 	ldw	r2,56(r4)
   19c44:	1000cf26 	beq	r2,zero,19f84 <___vfiprintf_internal_r+0x384>
   19c48:	d8c02017 	ldw	r3,128(sp)
   19c4c:	1880030b 	ldhu	r2,12(r3)
   19c50:	10c8000c 	andi	r3,r2,8192
   19c54:	1800071e 	bne	r3,zero,19c74 <___vfiprintf_internal_r+0x74>
   19c58:	d9402017 	ldw	r5,128(sp)
   19c5c:	00f7ffc4 	movi	r3,-8193
   19c60:	10880014 	ori	r2,r2,8192
   19c64:	29001917 	ldw	r4,100(r5)
   19c68:	2880030d 	sth	r2,12(r5)
   19c6c:	20c6703a 	and	r3,r4,r3
   19c70:	28c01915 	stw	r3,100(r5)
   19c74:	10c0020c 	andi	r3,r2,8
   19c78:	1800a526 	beq	r3,zero,19f10 <___vfiprintf_internal_r+0x310>
   19c7c:	d9002017 	ldw	r4,128(sp)
   19c80:	20c00417 	ldw	r3,16(r4)
   19c84:	1800a226 	beq	r3,zero,19f10 <___vfiprintf_internal_r+0x310>
   19c88:	1080068c 	andi	r2,r2,26
   19c8c:	00c00284 	movi	r3,10
   19c90:	10c0a826 	beq	r2,r3,19f34 <___vfiprintf_internal_r+0x334>
   19c94:	d9001a04 	addi	r4,sp,104
   19c98:	d94019c4 	addi	r5,sp,103
   19c9c:	048000f4 	movhi	r18,3
   19ca0:	2145c83a 	sub	r2,r4,r5
   19ca4:	94aaf304 	addi	r18,r18,-21556
   19ca8:	d9001e15 	stw	r4,120(sp)
   19cac:	d9401f15 	stw	r5,124(sp)
   19cb0:	dec01a15 	stw	sp,104(sp)
   19cb4:	d8001c15 	stw	zero,112(sp)
   19cb8:	d8001b15 	stw	zero,108(sp)
   19cbc:	d811883a 	mov	r8,sp
   19cc0:	d8002615 	stw	zero,152(sp)
   19cc4:	d8002415 	stw	zero,144(sp)
   19cc8:	d8802815 	stw	r2,160(sp)
   19ccc:	a82d883a 	mov	r22,r21
   19cd0:	b0800007 	ldb	r2,0(r22)
   19cd4:	10040d26 	beq	r2,zero,1ad0c <___vfiprintf_internal_r+0x110c>
   19cd8:	00c00944 	movi	r3,37
   19cdc:	b029883a 	mov	r20,r22
   19ce0:	10c0021e 	bne	r2,r3,19cec <___vfiprintf_internal_r+0xec>
   19ce4:	00001606 	br	19d40 <___vfiprintf_internal_r+0x140>
   19ce8:	10c00326 	beq	r2,r3,19cf8 <___vfiprintf_internal_r+0xf8>
   19cec:	a5000044 	addi	r20,r20,1
   19cf0:	a0800007 	ldb	r2,0(r20)
   19cf4:	103ffc1e 	bne	r2,zero,19ce8 <__alt_data_end+0xfc019ce8>
   19cf8:	a5a1c83a 	sub	r16,r20,r22
   19cfc:	80001026 	beq	r16,zero,19d40 <___vfiprintf_internal_r+0x140>
   19d00:	d8c01c17 	ldw	r3,112(sp)
   19d04:	d8801b17 	ldw	r2,108(sp)
   19d08:	45800015 	stw	r22,0(r8)
   19d0c:	80c7883a 	add	r3,r16,r3
   19d10:	10800044 	addi	r2,r2,1
   19d14:	44000115 	stw	r16,4(r8)
   19d18:	d8c01c15 	stw	r3,112(sp)
   19d1c:	d8801b15 	stw	r2,108(sp)
   19d20:	010001c4 	movi	r4,7
   19d24:	2080750e 	bge	r4,r2,19efc <___vfiprintf_internal_r+0x2fc>
   19d28:	1803951e 	bne	r3,zero,1ab80 <___vfiprintf_internal_r+0xf80>
   19d2c:	d8c02417 	ldw	r3,144(sp)
   19d30:	d8001b15 	stw	zero,108(sp)
   19d34:	d811883a 	mov	r8,sp
   19d38:	1c07883a 	add	r3,r3,r16
   19d3c:	d8c02415 	stw	r3,144(sp)
   19d40:	a0800007 	ldb	r2,0(r20)
   19d44:	1002e026 	beq	r2,zero,1a8c8 <___vfiprintf_internal_r+0xcc8>
   19d48:	a5800044 	addi	r22,r20,1
   19d4c:	a0c00047 	ldb	r3,1(r20)
   19d50:	d8001d85 	stb	zero,118(sp)
   19d54:	0027883a 	mov	r19,zero
   19d58:	d8002305 	stb	zero,140(sp)
   19d5c:	043fffc4 	movi	r16,-1
   19d60:	d8002515 	stw	zero,148(sp)
   19d64:	0023883a 	mov	r17,zero
   19d68:	05001604 	movi	r20,88
   19d6c:	05400244 	movi	r21,9
   19d70:	402f883a 	mov	r23,r8
   19d74:	b5800044 	addi	r22,r22,1
   19d78:	18bff804 	addi	r2,r3,-32
   19d7c:	a0827736 	bltu	r20,r2,1a75c <___vfiprintf_internal_r+0xb5c>
   19d80:	100490ba 	slli	r2,r2,2
   19d84:	010000b4 	movhi	r4,2
   19d88:	21276604 	addi	r4,r4,-25192
   19d8c:	1105883a 	add	r2,r2,r4
   19d90:	10800017 	ldw	r2,0(r2)
   19d94:	1000683a 	jmp	r2
   19d98:	0001a45c 	xori	zero,zero,1681
   19d9c:	0001a75c 	xori	zero,zero,1693
   19da0:	0001a75c 	xori	zero,zero,1693
   19da4:	0001a478 	rdprs	zero,zero,1681
   19da8:	0001a75c 	xori	zero,zero,1693
   19dac:	0001a75c 	xori	zero,zero,1693
   19db0:	0001a75c 	xori	zero,zero,1693
   19db4:	0001a75c 	xori	zero,zero,1693
   19db8:	0001a75c 	xori	zero,zero,1693
   19dbc:	0001a75c 	xori	zero,zero,1693
   19dc0:	0001a680 	call	1a68 <_ZN3USB4TaskEv+0x24c>
   19dc4:	0001a6a4 	muli	zero,zero,1690
   19dc8:	0001a75c 	xori	zero,zero,1693
   19dcc:	00019f9c 	xori	zero,zero,1662
   19dd0:	0001a6b8 	rdprs	zero,zero,1690
   19dd4:	0001a75c 	xori	zero,zero,1693
   19dd8:	0001a484 	movi	zero,1682
   19ddc:	0001a490 	cmplti	zero,zero,1682
   19de0:	0001a490 	cmplti	zero,zero,1682
   19de4:	0001a490 	cmplti	zero,zero,1682
   19de8:	0001a490 	cmplti	zero,zero,1682
   19dec:	0001a490 	cmplti	zero,zero,1682
   19df0:	0001a490 	cmplti	zero,zero,1682
   19df4:	0001a490 	cmplti	zero,zero,1682
   19df8:	0001a490 	cmplti	zero,zero,1682
   19dfc:	0001a490 	cmplti	zero,zero,1682
   19e00:	0001a75c 	xori	zero,zero,1693
   19e04:	0001a75c 	xori	zero,zero,1693
   19e08:	0001a75c 	xori	zero,zero,1693
   19e0c:	0001a75c 	xori	zero,zero,1693
   19e10:	0001a75c 	xori	zero,zero,1693
   19e14:	0001a75c 	xori	zero,zero,1693
   19e18:	0001a75c 	xori	zero,zero,1693
   19e1c:	0001a75c 	xori	zero,zero,1693
   19e20:	0001a75c 	xori	zero,zero,1693
   19e24:	0001a75c 	xori	zero,zero,1693
   19e28:	0001a4d0 	cmplti	zero,zero,1683
   19e2c:	0001a75c 	xori	zero,zero,1693
   19e30:	0001a75c 	xori	zero,zero,1693
   19e34:	0001a75c 	xori	zero,zero,1693
   19e38:	0001a75c 	xori	zero,zero,1693
   19e3c:	0001a75c 	xori	zero,zero,1693
   19e40:	0001a75c 	xori	zero,zero,1693
   19e44:	0001a75c 	xori	zero,zero,1693
   19e48:	0001a75c 	xori	zero,zero,1693
   19e4c:	0001a75c 	xori	zero,zero,1693
   19e50:	0001a75c 	xori	zero,zero,1693
   19e54:	0001a50c 	andi	zero,zero,1684
   19e58:	0001a75c 	xori	zero,zero,1693
   19e5c:	0001a75c 	xori	zero,zero,1693
   19e60:	0001a75c 	xori	zero,zero,1693
   19e64:	0001a75c 	xori	zero,zero,1693
   19e68:	0001a75c 	xori	zero,zero,1693
   19e6c:	0001a568 	cmpgeui	zero,zero,1685
   19e70:	0001a75c 	xori	zero,zero,1693
   19e74:	0001a75c 	xori	zero,zero,1693
   19e78:	0001a5dc 	xori	zero,zero,1687
   19e7c:	0001a75c 	xori	zero,zero,1693
   19e80:	0001a75c 	xori	zero,zero,1693
   19e84:	0001a75c 	xori	zero,zero,1693
   19e88:	0001a75c 	xori	zero,zero,1693
   19e8c:	0001a75c 	xori	zero,zero,1693
   19e90:	0001a75c 	xori	zero,zero,1693
   19e94:	0001a75c 	xori	zero,zero,1693
   19e98:	0001a75c 	xori	zero,zero,1693
   19e9c:	0001a75c 	xori	zero,zero,1693
   19ea0:	0001a75c 	xori	zero,zero,1693
   19ea4:	0001a384 	movi	zero,1678
   19ea8:	0001a3b4 	movhi	zero,1678
   19eac:	0001a75c 	xori	zero,zero,1693
   19eb0:	0001a75c 	xori	zero,zero,1693
   19eb4:	0001a75c 	xori	zero,zero,1693
   19eb8:	0001a704 	movi	zero,1692
   19ebc:	0001a3b4 	movhi	zero,1678
   19ec0:	0001a75c 	xori	zero,zero,1693
   19ec4:	0001a75c 	xori	zero,zero,1693
   19ec8:	0001a25c 	xori	zero,zero,1673
   19ecc:	0001a75c 	xori	zero,zero,1693
   19ed0:	0001a270 	cmpltui	zero,zero,1673
   19ed4:	0001a2a8 	cmpgeui	zero,zero,1674
   19ed8:	00019fa8 	cmpgeui	zero,zero,1662
   19edc:	0001a250 	cmplti	zero,zero,1673
   19ee0:	0001a75c 	xori	zero,zero,1693
   19ee4:	0001a61c 	xori	zero,zero,1688
   19ee8:	0001a75c 	xori	zero,zero,1693
   19eec:	0001a668 	cmpgeui	zero,zero,1689
   19ef0:	0001a75c 	xori	zero,zero,1693
   19ef4:	0001a75c 	xori	zero,zero,1693
   19ef8:	0001a32c 	andhi	zero,zero,1676
   19efc:	42000204 	addi	r8,r8,8
   19f00:	d8c02417 	ldw	r3,144(sp)
   19f04:	1c07883a 	add	r3,r3,r16
   19f08:	d8c02415 	stw	r3,144(sp)
   19f0c:	003f8c06 	br	19d40 <__alt_data_end+0xfc019d40>
   19f10:	d9402017 	ldw	r5,128(sp)
   19f14:	d9002117 	ldw	r4,132(sp)
   19f18:	0013c900 	call	13c90 <__swsetup_r>
   19f1c:	1003c11e 	bne	r2,zero,1ae24 <___vfiprintf_internal_r+0x1224>
   19f20:	d9402017 	ldw	r5,128(sp)
   19f24:	00c00284 	movi	r3,10
   19f28:	2880030b 	ldhu	r2,12(r5)
   19f2c:	1080068c 	andi	r2,r2,26
   19f30:	10ff581e 	bne	r2,r3,19c94 <__alt_data_end+0xfc019c94>
   19f34:	d8c02017 	ldw	r3,128(sp)
   19f38:	1880038f 	ldh	r2,14(r3)
   19f3c:	103f5516 	blt	r2,zero,19c94 <__alt_data_end+0xfc019c94>
   19f40:	d9c02217 	ldw	r7,136(sp)
   19f44:	d9002117 	ldw	r4,132(sp)
   19f48:	a80d883a 	mov	r6,r21
   19f4c:	180b883a 	mov	r5,r3
   19f50:	001b1280 	call	1b128 <__sbprintf>
   19f54:	dfc03517 	ldw	ra,212(sp)
   19f58:	df003417 	ldw	fp,208(sp)
   19f5c:	ddc03317 	ldw	r23,204(sp)
   19f60:	dd803217 	ldw	r22,200(sp)
   19f64:	dd403117 	ldw	r21,196(sp)
   19f68:	dd003017 	ldw	r20,192(sp)
   19f6c:	dcc02f17 	ldw	r19,188(sp)
   19f70:	dc802e17 	ldw	r18,184(sp)
   19f74:	dc402d17 	ldw	r17,180(sp)
   19f78:	dc002c17 	ldw	r16,176(sp)
   19f7c:	dec03604 	addi	sp,sp,216
   19f80:	f800283a 	ret
   19f84:	0015c9c0 	call	15c9c <__sinit>
   19f88:	003f2f06 	br	19c48 <__alt_data_end+0xfc019c48>
   19f8c:	d8c02517 	ldw	r3,148(sp)
   19f90:	d8802215 	stw	r2,136(sp)
   19f94:	00c7c83a 	sub	r3,zero,r3
   19f98:	d8c02515 	stw	r3,148(sp)
   19f9c:	8c400114 	ori	r17,r17,4
   19fa0:	b0c00007 	ldb	r3,0(r22)
   19fa4:	003f7306 	br	19d74 <__alt_data_end+0xfc019d74>
   19fa8:	00800c04 	movi	r2,48
   19fac:	d9402217 	ldw	r5,136(sp)
   19fb0:	d8801d05 	stb	r2,116(sp)
   19fb4:	00801e04 	movi	r2,120
   19fb8:	d8801d45 	stb	r2,117(sp)
   19fbc:	d8001d85 	stb	zero,118(sp)
   19fc0:	b811883a 	mov	r8,r23
   19fc4:	28c00104 	addi	r3,r5,4
   19fc8:	2cc00017 	ldw	r19,0(r5)
   19fcc:	0029883a 	mov	r20,zero
   19fd0:	88800094 	ori	r2,r17,2
   19fd4:	80032516 	blt	r16,zero,1ac6c <___vfiprintf_internal_r+0x106c>
   19fd8:	00bfdfc4 	movi	r2,-129
   19fdc:	88a2703a 	and	r17,r17,r2
   19fe0:	d8c02215 	stw	r3,136(sp)
   19fe4:	8c400094 	ori	r17,r17,2
   19fe8:	98032a1e 	bne	r19,zero,1ac94 <___vfiprintf_internal_r+0x1094>
   19fec:	008000f4 	movhi	r2,3
   19ff0:	10aa8304 	addi	r2,r2,-22004
   19ff4:	d8802615 	stw	r2,152(sp)
   19ff8:	002b883a 	mov	r21,zero
   19ffc:	8001741e 	bne	r16,zero,1a5d0 <___vfiprintf_internal_r+0x9d0>
   1a000:	0021883a 	mov	r16,zero
   1a004:	0029883a 	mov	r20,zero
   1a008:	ddc01a04 	addi	r23,sp,104
   1a00c:	8027883a 	mov	r19,r16
   1a010:	8500010e 	bge	r16,r20,1a018 <___vfiprintf_internal_r+0x418>
   1a014:	a027883a 	mov	r19,r20
   1a018:	ad403fcc 	andi	r21,r21,255
   1a01c:	ad40201c 	xori	r21,r21,128
   1a020:	ad7fe004 	addi	r21,r21,-128
   1a024:	a8000126 	beq	r21,zero,1a02c <___vfiprintf_internal_r+0x42c>
   1a028:	9cc00044 	addi	r19,r19,1
   1a02c:	89c0008c 	andi	r7,r17,2
   1a030:	38000126 	beq	r7,zero,1a038 <___vfiprintf_internal_r+0x438>
   1a034:	9cc00084 	addi	r19,r19,2
   1a038:	88c0210c 	andi	r3,r17,132
   1a03c:	1801dd1e 	bne	r3,zero,1a7b4 <___vfiprintf_internal_r+0xbb4>
   1a040:	d9402517 	ldw	r5,148(sp)
   1a044:	2cebc83a 	sub	r21,r5,r19
   1a048:	0541da0e 	bge	zero,r21,1a7b4 <___vfiprintf_internal_r+0xbb4>
   1a04c:	07000404 	movi	fp,16
   1a050:	d8801c17 	ldw	r2,112(sp)
   1a054:	e543be0e 	bge	fp,r21,1af50 <___vfiprintf_internal_r+0x1350>
   1a058:	014000f4 	movhi	r5,3
   1a05c:	296af704 	addi	r5,r5,-21540
   1a060:	dc002715 	stw	r16,156(sp)
   1a064:	d9801b17 	ldw	r6,108(sp)
   1a068:	a821883a 	mov	r16,r21
   1a06c:	d9402315 	stw	r5,140(sp)
   1a070:	028001c4 	movi	r10,7
   1a074:	d9c02915 	stw	r7,164(sp)
   1a078:	182b883a 	mov	r21,r3
   1a07c:	00000506 	br	1a094 <___vfiprintf_internal_r+0x494>
   1a080:	31000084 	addi	r4,r6,2
   1a084:	42000204 	addi	r8,r8,8
   1a088:	180d883a 	mov	r6,r3
   1a08c:	843ffc04 	addi	r16,r16,-16
   1a090:	e4000f0e 	bge	fp,r16,1a0d0 <___vfiprintf_internal_r+0x4d0>
   1a094:	010000f4 	movhi	r4,3
   1a098:	10800404 	addi	r2,r2,16
   1a09c:	30c00044 	addi	r3,r6,1
   1a0a0:	212af704 	addi	r4,r4,-21540
   1a0a4:	41000015 	stw	r4,0(r8)
   1a0a8:	47000115 	stw	fp,4(r8)
   1a0ac:	d8801c15 	stw	r2,112(sp)
   1a0b0:	d8c01b15 	stw	r3,108(sp)
   1a0b4:	50fff20e 	bge	r10,r3,1a080 <__alt_data_end+0xfc01a080>
   1a0b8:	1001b21e 	bne	r2,zero,1a784 <___vfiprintf_internal_r+0xb84>
   1a0bc:	843ffc04 	addi	r16,r16,-16
   1a0c0:	000d883a 	mov	r6,zero
   1a0c4:	01000044 	movi	r4,1
   1a0c8:	d811883a 	mov	r8,sp
   1a0cc:	e43ff116 	blt	fp,r16,1a094 <__alt_data_end+0xfc01a094>
   1a0d0:	a807883a 	mov	r3,r21
   1a0d4:	d9c02917 	ldw	r7,164(sp)
   1a0d8:	802b883a 	mov	r21,r16
   1a0dc:	dc002717 	ldw	r16,156(sp)
   1a0e0:	d9402317 	ldw	r5,140(sp)
   1a0e4:	a885883a 	add	r2,r21,r2
   1a0e8:	45400115 	stw	r21,4(r8)
   1a0ec:	41400015 	stw	r5,0(r8)
   1a0f0:	d8801c15 	stw	r2,112(sp)
   1a0f4:	d9001b15 	stw	r4,108(sp)
   1a0f8:	014001c4 	movi	r5,7
   1a0fc:	29026216 	blt	r5,r4,1aa88 <___vfiprintf_internal_r+0xe88>
   1a100:	d9801d87 	ldb	r6,118(sp)
   1a104:	42000204 	addi	r8,r8,8
   1a108:	21400044 	addi	r5,r4,1
   1a10c:	3001ae1e 	bne	r6,zero,1a7c8 <___vfiprintf_internal_r+0xbc8>
   1a110:	3801bb26 	beq	r7,zero,1a800 <___vfiprintf_internal_r+0xc00>
   1a114:	d9001d04 	addi	r4,sp,116
   1a118:	10800084 	addi	r2,r2,2
   1a11c:	41000015 	stw	r4,0(r8)
   1a120:	01000084 	movi	r4,2
   1a124:	41000115 	stw	r4,4(r8)
   1a128:	d8801c15 	stw	r2,112(sp)
   1a12c:	d9401b15 	stw	r5,108(sp)
   1a130:	010001c4 	movi	r4,7
   1a134:	2142680e 	bge	r4,r5,1aad8 <___vfiprintf_internal_r+0xed8>
   1a138:	1002b11e 	bne	r2,zero,1ac00 <___vfiprintf_internal_r+0x1000>
   1a13c:	01802004 	movi	r6,128
   1a140:	01400044 	movi	r5,1
   1a144:	0009883a 	mov	r4,zero
   1a148:	d811883a 	mov	r8,sp
   1a14c:	1981ae1e 	bne	r3,r6,1a808 <___vfiprintf_internal_r+0xc08>
   1a150:	d8c02517 	ldw	r3,148(sp)
   1a154:	1cf9c83a 	sub	fp,r3,r19
   1a158:	0701ab0e 	bge	zero,fp,1a808 <___vfiprintf_internal_r+0xc08>
   1a15c:	05400404 	movi	r21,16
   1a160:	af03a90e 	bge	r21,fp,1b008 <___vfiprintf_internal_r+0x1408>
   1a164:	014000f4 	movhi	r5,3
   1a168:	296af304 	addi	r5,r5,-21556
   1a16c:	d9402315 	stw	r5,140(sp)
   1a170:	01c001c4 	movi	r7,7
   1a174:	00000506 	br	1a18c <___vfiprintf_internal_r+0x58c>
   1a178:	21800084 	addi	r6,r4,2
   1a17c:	42000204 	addi	r8,r8,8
   1a180:	1809883a 	mov	r4,r3
   1a184:	e73ffc04 	addi	fp,fp,-16
   1a188:	af000d0e 	bge	r21,fp,1a1c0 <___vfiprintf_internal_r+0x5c0>
   1a18c:	10800404 	addi	r2,r2,16
   1a190:	20c00044 	addi	r3,r4,1
   1a194:	44800015 	stw	r18,0(r8)
   1a198:	45400115 	stw	r21,4(r8)
   1a19c:	d8801c15 	stw	r2,112(sp)
   1a1a0:	d8c01b15 	stw	r3,108(sp)
   1a1a4:	38fff40e 	bge	r7,r3,1a178 <__alt_data_end+0xfc01a178>
   1a1a8:	10022b1e 	bne	r2,zero,1aa58 <___vfiprintf_internal_r+0xe58>
   1a1ac:	e73ffc04 	addi	fp,fp,-16
   1a1b0:	01800044 	movi	r6,1
   1a1b4:	0009883a 	mov	r4,zero
   1a1b8:	d811883a 	mov	r8,sp
   1a1bc:	af3ff316 	blt	r21,fp,1a18c <__alt_data_end+0xfc01a18c>
   1a1c0:	d8c02317 	ldw	r3,140(sp)
   1a1c4:	1705883a 	add	r2,r2,fp
   1a1c8:	47000115 	stw	fp,4(r8)
   1a1cc:	40c00015 	stw	r3,0(r8)
   1a1d0:	d8801c15 	stw	r2,112(sp)
   1a1d4:	d9801b15 	stw	r6,108(sp)
   1a1d8:	00c001c4 	movi	r3,7
   1a1dc:	19829416 	blt	r3,r6,1ac30 <___vfiprintf_internal_r+0x1030>
   1a1e0:	8521c83a 	sub	r16,r16,r20
   1a1e4:	42000204 	addi	r8,r8,8
   1a1e8:	31400044 	addi	r5,r6,1
   1a1ec:	3009883a 	mov	r4,r6
   1a1f0:	04018716 	blt	zero,r16,1a810 <___vfiprintf_internal_r+0xc10>
   1a1f4:	a085883a 	add	r2,r20,r2
   1a1f8:	45c00015 	stw	r23,0(r8)
   1a1fc:	45000115 	stw	r20,4(r8)
   1a200:	d8801c15 	stw	r2,112(sp)
   1a204:	d9401b15 	stw	r5,108(sp)
   1a208:	00c001c4 	movi	r3,7
   1a20c:	1941c20e 	bge	r3,r5,1a918 <___vfiprintf_internal_r+0xd18>
   1a210:	1002531e 	bne	r2,zero,1ab60 <___vfiprintf_internal_r+0xf60>
   1a214:	d8001b15 	stw	zero,108(sp)
   1a218:	8c40010c 	andi	r17,r17,4
   1a21c:	88023226 	beq	r17,zero,1aae8 <___vfiprintf_internal_r+0xee8>
   1a220:	d9002517 	ldw	r4,148(sp)
   1a224:	24e3c83a 	sub	r17,r4,r19
   1a228:	04432916 	blt	zero,r17,1aed0 <___vfiprintf_internal_r+0x12d0>
   1a22c:	d8802517 	ldw	r2,148(sp)
   1a230:	14c0010e 	bge	r2,r19,1a238 <___vfiprintf_internal_r+0x638>
   1a234:	9805883a 	mov	r2,r19
   1a238:	d8c02417 	ldw	r3,144(sp)
   1a23c:	1887883a 	add	r3,r3,r2
   1a240:	d8c02415 	stw	r3,144(sp)
   1a244:	d8001b15 	stw	zero,108(sp)
   1a248:	d811883a 	mov	r8,sp
   1a24c:	003ea006 	br	19cd0 <__alt_data_end+0xfc019cd0>
   1a250:	8c400814 	ori	r17,r17,32
   1a254:	b0c00007 	ldb	r3,0(r22)
   1a258:	003ec606 	br	19d74 <__alt_data_end+0xfc019d74>
   1a25c:	b0c00007 	ldb	r3,0(r22)
   1a260:	00801b04 	movi	r2,108
   1a264:	18832026 	beq	r3,r2,1aee8 <___vfiprintf_internal_r+0x12e8>
   1a268:	8c400414 	ori	r17,r17,16
   1a26c:	003ec106 	br	19d74 <__alt_data_end+0xfc019d74>
   1a270:	9cc03fcc 	andi	r19,r19,255
   1a274:	b811883a 	mov	r8,r23
   1a278:	9803981e 	bne	r19,zero,1b0dc <___vfiprintf_internal_r+0x14dc>
   1a27c:	8880080c 	andi	r2,r17,32
   1a280:	1002be26 	beq	r2,zero,1ad7c <___vfiprintf_internal_r+0x117c>
   1a284:	d9002217 	ldw	r4,136(sp)
   1a288:	d9402417 	ldw	r5,144(sp)
   1a28c:	20800017 	ldw	r2,0(r4)
   1a290:	2807d7fa 	srai	r3,r5,31
   1a294:	21000104 	addi	r4,r4,4
   1a298:	d9002215 	stw	r4,136(sp)
   1a29c:	11400015 	stw	r5,0(r2)
   1a2a0:	10c00115 	stw	r3,4(r2)
   1a2a4:	003e8a06 	br	19cd0 <__alt_data_end+0xfc019cd0>
   1a2a8:	9cc03fcc 	andi	r19,r19,255
   1a2ac:	b811883a 	mov	r8,r23
   1a2b0:	9803871e 	bne	r19,zero,1b0d0 <___vfiprintf_internal_r+0x14d0>
   1a2b4:	8880080c 	andi	r2,r17,32
   1a2b8:	10009a26 	beq	r2,zero,1a524 <___vfiprintf_internal_r+0x924>
   1a2bc:	d9002217 	ldw	r4,136(sp)
   1a2c0:	d8001d85 	stb	zero,118(sp)
   1a2c4:	20800204 	addi	r2,r4,8
   1a2c8:	24c00017 	ldw	r19,0(r4)
   1a2cc:	25000117 	ldw	r20,4(r4)
   1a2d0:	8002a416 	blt	r16,zero,1ad64 <___vfiprintf_internal_r+0x1164>
   1a2d4:	013fdfc4 	movi	r4,-129
   1a2d8:	9d06b03a 	or	r3,r19,r20
   1a2dc:	d8802215 	stw	r2,136(sp)
   1a2e0:	8922703a 	and	r17,r17,r4
   1a2e4:	18009b26 	beq	r3,zero,1a554 <___vfiprintf_internal_r+0x954>
   1a2e8:	002b883a 	mov	r21,zero
   1a2ec:	ddc01a04 	addi	r23,sp,104
   1a2f0:	9806d0fa 	srli	r3,r19,3
   1a2f4:	a008977a 	slli	r4,r20,29
   1a2f8:	a028d0fa 	srli	r20,r20,3
   1a2fc:	9cc001cc 	andi	r19,r19,7
   1a300:	98800c04 	addi	r2,r19,48
   1a304:	bdffffc4 	addi	r23,r23,-1
   1a308:	20e6b03a 	or	r19,r4,r3
   1a30c:	b8800005 	stb	r2,0(r23)
   1a310:	9d06b03a 	or	r3,r19,r20
   1a314:	183ff61e 	bne	r3,zero,1a2f0 <__alt_data_end+0xfc01a2f0>
   1a318:	88c0004c 	andi	r3,r17,1
   1a31c:	18021f1e 	bne	r3,zero,1ab9c <___vfiprintf_internal_r+0xf9c>
   1a320:	d9401e17 	ldw	r5,120(sp)
   1a324:	2de9c83a 	sub	r20,r5,r23
   1a328:	003f3806 	br	1a00c <__alt_data_end+0xfc01a00c>
   1a32c:	9cc03fcc 	andi	r19,r19,255
   1a330:	b811883a 	mov	r8,r23
   1a334:	98034f1e 	bne	r19,zero,1b074 <___vfiprintf_internal_r+0x1474>
   1a338:	008000f4 	movhi	r2,3
   1a33c:	10aa8304 	addi	r2,r2,-22004
   1a340:	d8802615 	stw	r2,152(sp)
   1a344:	8880080c 	andi	r2,r17,32
   1a348:	1000ac26 	beq	r2,zero,1a5fc <___vfiprintf_internal_r+0x9fc>
   1a34c:	d9002217 	ldw	r4,136(sp)
   1a350:	24c00017 	ldw	r19,0(r4)
   1a354:	25000117 	ldw	r20,4(r4)
   1a358:	21000204 	addi	r4,r4,8
   1a35c:	d9002215 	stw	r4,136(sp)
   1a360:	8880004c 	andi	r2,r17,1
   1a364:	1001e726 	beq	r2,zero,1ab04 <___vfiprintf_internal_r+0xf04>
   1a368:	9d04b03a 	or	r2,r19,r20
   1a36c:	10025c1e 	bne	r2,zero,1ace0 <___vfiprintf_internal_r+0x10e0>
   1a370:	d8001d85 	stb	zero,118(sp)
   1a374:	80024416 	blt	r16,zero,1ac88 <___vfiprintf_internal_r+0x1088>
   1a378:	00bfdfc4 	movi	r2,-129
   1a37c:	88a2703a 	and	r17,r17,r2
   1a380:	003f1d06 	br	19ff8 <__alt_data_end+0xfc019ff8>
   1a384:	d8c02217 	ldw	r3,136(sp)
   1a388:	04c00044 	movi	r19,1
   1a38c:	b811883a 	mov	r8,r23
   1a390:	18800017 	ldw	r2,0(r3)
   1a394:	18c00104 	addi	r3,r3,4
   1a398:	d8001d85 	stb	zero,118(sp)
   1a39c:	d8801005 	stb	r2,64(sp)
   1a3a0:	d8c02215 	stw	r3,136(sp)
   1a3a4:	9829883a 	mov	r20,r19
   1a3a8:	ddc01004 	addi	r23,sp,64
   1a3ac:	0021883a 	mov	r16,zero
   1a3b0:	003f1e06 	br	1a02c <__alt_data_end+0xfc01a02c>
   1a3b4:	9cc03fcc 	andi	r19,r19,255
   1a3b8:	b811883a 	mov	r8,r23
   1a3bc:	9803331e 	bne	r19,zero,1b08c <___vfiprintf_internal_r+0x148c>
   1a3c0:	8880080c 	andi	r2,r17,32
   1a3c4:	10004826 	beq	r2,zero,1a4e8 <___vfiprintf_internal_r+0x8e8>
   1a3c8:	d9002217 	ldw	r4,136(sp)
   1a3cc:	20800117 	ldw	r2,4(r4)
   1a3d0:	24c00017 	ldw	r19,0(r4)
   1a3d4:	21000204 	addi	r4,r4,8
   1a3d8:	d9002215 	stw	r4,136(sp)
   1a3dc:	1029883a 	mov	r20,r2
   1a3e0:	10024c16 	blt	r2,zero,1ad14 <___vfiprintf_internal_r+0x1114>
   1a3e4:	dd401d83 	ldbu	r21,118(sp)
   1a3e8:	80007116 	blt	r16,zero,1a5b0 <___vfiprintf_internal_r+0x9b0>
   1a3ec:	00ffdfc4 	movi	r3,-129
   1a3f0:	9d04b03a 	or	r2,r19,r20
   1a3f4:	88e2703a 	and	r17,r17,r3
   1a3f8:	1000d126 	beq	r2,zero,1a740 <___vfiprintf_internal_r+0xb40>
   1a3fc:	a0023526 	beq	r20,zero,1acd4 <___vfiprintf_internal_r+0x10d4>
   1a400:	ddc01a04 	addi	r23,sp,104
   1a404:	4039883a 	mov	fp,r8
   1a408:	9809883a 	mov	r4,r19
   1a40c:	a00b883a 	mov	r5,r20
   1a410:	01800284 	movi	r6,10
   1a414:	000f883a 	mov	r7,zero
   1a418:	001c12c0 	call	1c12c <__umoddi3>
   1a41c:	10800c04 	addi	r2,r2,48
   1a420:	bdffffc4 	addi	r23,r23,-1
   1a424:	9809883a 	mov	r4,r19
   1a428:	a00b883a 	mov	r5,r20
   1a42c:	b8800005 	stb	r2,0(r23)
   1a430:	01800284 	movi	r6,10
   1a434:	000f883a 	mov	r7,zero
   1a438:	001bb300 	call	1bb30 <__udivdi3>
   1a43c:	1027883a 	mov	r19,r2
   1a440:	10c4b03a 	or	r2,r2,r3
   1a444:	1829883a 	mov	r20,r3
   1a448:	103fef1e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a44c:	d9001e17 	ldw	r4,120(sp)
   1a450:	e011883a 	mov	r8,fp
   1a454:	25e9c83a 	sub	r20,r4,r23
   1a458:	003eec06 	br	1a00c <__alt_data_end+0xfc01a00c>
   1a45c:	d8802307 	ldb	r2,140(sp)
   1a460:	1002361e 	bne	r2,zero,1ad3c <___vfiprintf_internal_r+0x113c>
   1a464:	00c00804 	movi	r3,32
   1a468:	d8c02305 	stb	r3,140(sp)
   1a46c:	04c00044 	movi	r19,1
   1a470:	b0c00007 	ldb	r3,0(r22)
   1a474:	003e3f06 	br	19d74 <__alt_data_end+0xfc019d74>
   1a478:	8c400054 	ori	r17,r17,1
   1a47c:	b0c00007 	ldb	r3,0(r22)
   1a480:	003e3c06 	br	19d74 <__alt_data_end+0xfc019d74>
   1a484:	8c402014 	ori	r17,r17,128
   1a488:	b0c00007 	ldb	r3,0(r22)
   1a48c:	003e3906 	br	19d74 <__alt_data_end+0xfc019d74>
   1a490:	dc002715 	stw	r16,156(sp)
   1a494:	d8002515 	stw	zero,148(sp)
   1a498:	1f3ff404 	addi	fp,r3,-48
   1a49c:	0009883a 	mov	r4,zero
   1a4a0:	b021883a 	mov	r16,r22
   1a4a4:	01400284 	movi	r5,10
   1a4a8:	000cf040 	call	cf04 <__mulsi3>
   1a4ac:	80c00007 	ldb	r3,0(r16)
   1a4b0:	e089883a 	add	r4,fp,r2
   1a4b4:	b5800044 	addi	r22,r22,1
   1a4b8:	1f3ff404 	addi	fp,r3,-48
   1a4bc:	b021883a 	mov	r16,r22
   1a4c0:	af3ff82e 	bgeu	r21,fp,1a4a4 <__alt_data_end+0xfc01a4a4>
   1a4c4:	d9002515 	stw	r4,148(sp)
   1a4c8:	dc002717 	ldw	r16,156(sp)
   1a4cc:	003e2a06 	br	19d78 <__alt_data_end+0xfc019d78>
   1a4d0:	9cc03fcc 	andi	r19,r19,255
   1a4d4:	b811883a 	mov	r8,r23
   1a4d8:	9802e91e 	bne	r19,zero,1b080 <___vfiprintf_internal_r+0x1480>
   1a4dc:	8c400414 	ori	r17,r17,16
   1a4e0:	8880080c 	andi	r2,r17,32
   1a4e4:	103fb81e 	bne	r2,zero,1a3c8 <__alt_data_end+0xfc01a3c8>
   1a4e8:	8880040c 	andi	r2,r17,16
   1a4ec:	10022e26 	beq	r2,zero,1ada8 <___vfiprintf_internal_r+0x11a8>
   1a4f0:	d9402217 	ldw	r5,136(sp)
   1a4f4:	2cc00017 	ldw	r19,0(r5)
   1a4f8:	29400104 	addi	r5,r5,4
   1a4fc:	d9402215 	stw	r5,136(sp)
   1a500:	9829d7fa 	srai	r20,r19,31
   1a504:	a005883a 	mov	r2,r20
   1a508:	003fb506 	br	1a3e0 <__alt_data_end+0xfc01a3e0>
   1a50c:	9cc03fcc 	andi	r19,r19,255
   1a510:	b811883a 	mov	r8,r23
   1a514:	9802fa1e 	bne	r19,zero,1b100 <___vfiprintf_internal_r+0x1500>
   1a518:	8c400414 	ori	r17,r17,16
   1a51c:	8880080c 	andi	r2,r17,32
   1a520:	103f661e 	bne	r2,zero,1a2bc <__alt_data_end+0xfc01a2bc>
   1a524:	8880040c 	andi	r2,r17,16
   1a528:	10020626 	beq	r2,zero,1ad44 <___vfiprintf_internal_r+0x1144>
   1a52c:	d9402217 	ldw	r5,136(sp)
   1a530:	d8001d85 	stb	zero,118(sp)
   1a534:	0029883a 	mov	r20,zero
   1a538:	28800104 	addi	r2,r5,4
   1a53c:	2cc00017 	ldw	r19,0(r5)
   1a540:	80020816 	blt	r16,zero,1ad64 <___vfiprintf_internal_r+0x1164>
   1a544:	00ffdfc4 	movi	r3,-129
   1a548:	d8802215 	stw	r2,136(sp)
   1a54c:	88e2703a 	and	r17,r17,r3
   1a550:	983f651e 	bne	r19,zero,1a2e8 <__alt_data_end+0xfc01a2e8>
   1a554:	002b883a 	mov	r21,zero
   1a558:	8002cf26 	beq	r16,zero,1b098 <___vfiprintf_internal_r+0x1498>
   1a55c:	0027883a 	mov	r19,zero
   1a560:	0029883a 	mov	r20,zero
   1a564:	003f6106 	br	1a2ec <__alt_data_end+0xfc01a2ec>
   1a568:	9cc03fcc 	andi	r19,r19,255
   1a56c:	b811883a 	mov	r8,r23
   1a570:	9802e01e 	bne	r19,zero,1b0f4 <___vfiprintf_internal_r+0x14f4>
   1a574:	8c400414 	ori	r17,r17,16
   1a578:	8880080c 	andi	r2,r17,32
   1a57c:	1000641e 	bne	r2,zero,1a710 <___vfiprintf_internal_r+0xb10>
   1a580:	8880040c 	andi	r2,r17,16
   1a584:	1001c81e 	bne	r2,zero,1aca8 <___vfiprintf_internal_r+0x10a8>
   1a588:	8880100c 	andi	r2,r17,64
   1a58c:	d8001d85 	stb	zero,118(sp)
   1a590:	1002281e 	bne	r2,zero,1ae34 <___vfiprintf_internal_r+0x1234>
   1a594:	d9002217 	ldw	r4,136(sp)
   1a598:	0029883a 	mov	r20,zero
   1a59c:	20800104 	addi	r2,r4,4
   1a5a0:	24c00017 	ldw	r19,0(r4)
   1a5a4:	8001c60e 	bge	r16,zero,1acc0 <___vfiprintf_internal_r+0x10c0>
   1a5a8:	d8802215 	stw	r2,136(sp)
   1a5ac:	002b883a 	mov	r21,zero
   1a5b0:	9d04b03a 	or	r2,r19,r20
   1a5b4:	103f911e 	bne	r2,zero,1a3fc <__alt_data_end+0xfc01a3fc>
   1a5b8:	00800044 	movi	r2,1
   1a5bc:	10803fcc 	andi	r2,r2,255
   1a5c0:	00c00044 	movi	r3,1
   1a5c4:	10c05f26 	beq	r2,r3,1a744 <___vfiprintf_internal_r+0xb44>
   1a5c8:	00c00084 	movi	r3,2
   1a5cc:	10ffe31e 	bne	r2,r3,1a55c <__alt_data_end+0xfc01a55c>
   1a5d0:	0027883a 	mov	r19,zero
   1a5d4:	0029883a 	mov	r20,zero
   1a5d8:	00015106 	br	1ab20 <___vfiprintf_internal_r+0xf20>
   1a5dc:	9cc03fcc 	andi	r19,r19,255
   1a5e0:	b811883a 	mov	r8,r23
   1a5e4:	9802c01e 	bne	r19,zero,1b0e8 <___vfiprintf_internal_r+0x14e8>
   1a5e8:	014000f4 	movhi	r5,3
   1a5ec:	296a7e04 	addi	r5,r5,-22024
   1a5f0:	d9402615 	stw	r5,152(sp)
   1a5f4:	8880080c 	andi	r2,r17,32
   1a5f8:	103f541e 	bne	r2,zero,1a34c <__alt_data_end+0xfc01a34c>
   1a5fc:	8880040c 	andi	r2,r17,16
   1a600:	1001f226 	beq	r2,zero,1adcc <___vfiprintf_internal_r+0x11cc>
   1a604:	d9402217 	ldw	r5,136(sp)
   1a608:	0029883a 	mov	r20,zero
   1a60c:	2cc00017 	ldw	r19,0(r5)
   1a610:	29400104 	addi	r5,r5,4
   1a614:	d9402215 	stw	r5,136(sp)
   1a618:	003f5106 	br	1a360 <__alt_data_end+0xfc01a360>
   1a61c:	d8c02217 	ldw	r3,136(sp)
   1a620:	b811883a 	mov	r8,r23
   1a624:	d8001d85 	stb	zero,118(sp)
   1a628:	1dc00017 	ldw	r23,0(r3)
   1a62c:	1f000104 	addi	fp,r3,4
   1a630:	b8025926 	beq	r23,zero,1af98 <___vfiprintf_internal_r+0x1398>
   1a634:	80023316 	blt	r16,zero,1af04 <___vfiprintf_internal_r+0x1304>
   1a638:	800d883a 	mov	r6,r16
   1a63c:	000b883a 	mov	r5,zero
   1a640:	b809883a 	mov	r4,r23
   1a644:	da002a15 	stw	r8,168(sp)
   1a648:	0016a080 	call	16a08 <memchr>
   1a64c:	da002a17 	ldw	r8,168(sp)
   1a650:	10026826 	beq	r2,zero,1aff4 <___vfiprintf_internal_r+0x13f4>
   1a654:	15e9c83a 	sub	r20,r2,r23
   1a658:	dd401d83 	ldbu	r21,118(sp)
   1a65c:	df002215 	stw	fp,136(sp)
   1a660:	0021883a 	mov	r16,zero
   1a664:	003e6906 	br	1a00c <__alt_data_end+0xfc01a00c>
   1a668:	9cc03fcc 	andi	r19,r19,255
   1a66c:	b811883a 	mov	r8,r23
   1a670:	983fc126 	beq	r19,zero,1a578 <__alt_data_end+0xfc01a578>
   1a674:	d8c02303 	ldbu	r3,140(sp)
   1a678:	d8c01d85 	stb	r3,118(sp)
   1a67c:	003fbe06 	br	1a578 <__alt_data_end+0xfc01a578>
   1a680:	d9002217 	ldw	r4,136(sp)
   1a684:	d9402217 	ldw	r5,136(sp)
   1a688:	21000017 	ldw	r4,0(r4)
   1a68c:	28800104 	addi	r2,r5,4
   1a690:	d9002515 	stw	r4,148(sp)
   1a694:	203e3d16 	blt	r4,zero,19f8c <__alt_data_end+0xfc019f8c>
   1a698:	d8802215 	stw	r2,136(sp)
   1a69c:	b0c00007 	ldb	r3,0(r22)
   1a6a0:	003db406 	br	19d74 <__alt_data_end+0xfc019d74>
   1a6a4:	00c00ac4 	movi	r3,43
   1a6a8:	d8c02305 	stb	r3,140(sp)
   1a6ac:	04c00044 	movi	r19,1
   1a6b0:	b0c00007 	ldb	r3,0(r22)
   1a6b4:	003daf06 	br	19d74 <__alt_data_end+0xfc019d74>
   1a6b8:	b0c00007 	ldb	r3,0(r22)
   1a6bc:	01000a84 	movi	r4,42
   1a6c0:	b4000044 	addi	r16,r22,1
   1a6c4:	19025e26 	beq	r3,r4,1b040 <___vfiprintf_internal_r+0x1440>
   1a6c8:	1f3ff404 	addi	fp,r3,-48
   1a6cc:	0009883a 	mov	r4,zero
   1a6d0:	af025236 	bltu	r21,fp,1b01c <___vfiprintf_internal_r+0x141c>
   1a6d4:	01400284 	movi	r5,10
   1a6d8:	000cf040 	call	cf04 <__mulsi3>
   1a6dc:	80c00007 	ldb	r3,0(r16)
   1a6e0:	1709883a 	add	r4,r2,fp
   1a6e4:	85800044 	addi	r22,r16,1
   1a6e8:	1f3ff404 	addi	fp,r3,-48
   1a6ec:	b021883a 	mov	r16,r22
   1a6f0:	af3ff82e 	bgeu	r21,fp,1a6d4 <__alt_data_end+0xfc01a6d4>
   1a6f4:	2021883a 	mov	r16,r4
   1a6f8:	203d9f0e 	bge	r4,zero,19d78 <__alt_data_end+0xfc019d78>
   1a6fc:	043fffc4 	movi	r16,-1
   1a700:	003d9d06 	br	19d78 <__alt_data_end+0xfc019d78>
   1a704:	8c401014 	ori	r17,r17,64
   1a708:	b0c00007 	ldb	r3,0(r22)
   1a70c:	003d9906 	br	19d74 <__alt_data_end+0xfc019d74>
   1a710:	d9002217 	ldw	r4,136(sp)
   1a714:	d8001d85 	stb	zero,118(sp)
   1a718:	20c00204 	addi	r3,r4,8
   1a71c:	24c00017 	ldw	r19,0(r4)
   1a720:	25000117 	ldw	r20,4(r4)
   1a724:	8001e716 	blt	r16,zero,1aec4 <___vfiprintf_internal_r+0x12c4>
   1a728:	013fdfc4 	movi	r4,-129
   1a72c:	9d04b03a 	or	r2,r19,r20
   1a730:	d8c02215 	stw	r3,136(sp)
   1a734:	8922703a 	and	r17,r17,r4
   1a738:	002b883a 	mov	r21,zero
   1a73c:	103f2f1e 	bne	r2,zero,1a3fc <__alt_data_end+0xfc01a3fc>
   1a740:	803e2f26 	beq	r16,zero,1a000 <__alt_data_end+0xfc01a000>
   1a744:	0027883a 	mov	r19,zero
   1a748:	9cc00c04 	addi	r19,r19,48
   1a74c:	dcc019c5 	stb	r19,103(sp)
   1a750:	dd002817 	ldw	r20,160(sp)
   1a754:	ddc019c4 	addi	r23,sp,103
   1a758:	003e2c06 	br	1a00c <__alt_data_end+0xfc01a00c>
   1a75c:	9cc03fcc 	andi	r19,r19,255
   1a760:	b811883a 	mov	r8,r23
   1a764:	9802571e 	bne	r19,zero,1b0c4 <___vfiprintf_internal_r+0x14c4>
   1a768:	18005726 	beq	r3,zero,1a8c8 <___vfiprintf_internal_r+0xcc8>
   1a76c:	04c00044 	movi	r19,1
   1a770:	d8c01005 	stb	r3,64(sp)
   1a774:	d8001d85 	stb	zero,118(sp)
   1a778:	9829883a 	mov	r20,r19
   1a77c:	ddc01004 	addi	r23,sp,64
   1a780:	003f0a06 	br	1a3ac <__alt_data_end+0xfc01a3ac>
   1a784:	d9402017 	ldw	r5,128(sp)
   1a788:	d9002117 	ldw	r4,132(sp)
   1a78c:	d9801a04 	addi	r6,sp,104
   1a790:	da802a15 	stw	r10,168(sp)
   1a794:	0019aec0 	call	19aec <__sprint_r.part.0>
   1a798:	da802a17 	ldw	r10,168(sp)
   1a79c:	1000501e 	bne	r2,zero,1a8e0 <___vfiprintf_internal_r+0xce0>
   1a7a0:	d9801b17 	ldw	r6,108(sp)
   1a7a4:	d8801c17 	ldw	r2,112(sp)
   1a7a8:	d811883a 	mov	r8,sp
   1a7ac:	31000044 	addi	r4,r6,1
   1a7b0:	003e3606 	br	1a08c <__alt_data_end+0xfc01a08c>
   1a7b4:	d9001b17 	ldw	r4,108(sp)
   1a7b8:	d8801c17 	ldw	r2,112(sp)
   1a7bc:	21400044 	addi	r5,r4,1
   1a7c0:	d9801d87 	ldb	r6,118(sp)
   1a7c4:	303e5226 	beq	r6,zero,1a110 <__alt_data_end+0xfc01a110>
   1a7c8:	01800044 	movi	r6,1
   1a7cc:	d9001d84 	addi	r4,sp,118
   1a7d0:	1185883a 	add	r2,r2,r6
   1a7d4:	41000015 	stw	r4,0(r8)
   1a7d8:	41800115 	stw	r6,4(r8)
   1a7dc:	d8801c15 	stw	r2,112(sp)
   1a7e0:	d9401b15 	stw	r5,108(sp)
   1a7e4:	010001c4 	movi	r4,7
   1a7e8:	2140b00e 	bge	r4,r5,1aaac <___vfiprintf_internal_r+0xeac>
   1a7ec:	1000f61e 	bne	r2,zero,1abc8 <___vfiprintf_internal_r+0xfc8>
   1a7f0:	3800b31e 	bne	r7,zero,1aac0 <___vfiprintf_internal_r+0xec0>
   1a7f4:	0009883a 	mov	r4,zero
   1a7f8:	300b883a 	mov	r5,r6
   1a7fc:	d811883a 	mov	r8,sp
   1a800:	01802004 	movi	r6,128
   1a804:	19be5226 	beq	r3,r6,1a150 <__alt_data_end+0xfc01a150>
   1a808:	8521c83a 	sub	r16,r16,r20
   1a80c:	043e790e 	bge	zero,r16,1a1f4 <__alt_data_end+0xfc01a1f4>
   1a810:	05400404 	movi	r21,16
   1a814:	ac01b00e 	bge	r21,r16,1aed8 <___vfiprintf_internal_r+0x12d8>
   1a818:	014000f4 	movhi	r5,3
   1a81c:	296af304 	addi	r5,r5,-21556
   1a820:	d9402315 	stw	r5,140(sp)
   1a824:	070001c4 	movi	fp,7
   1a828:	00000506 	br	1a840 <___vfiprintf_internal_r+0xc40>
   1a82c:	21400084 	addi	r5,r4,2
   1a830:	42000204 	addi	r8,r8,8
   1a834:	1809883a 	mov	r4,r3
   1a838:	843ffc04 	addi	r16,r16,-16
   1a83c:	ac000d0e 	bge	r21,r16,1a874 <___vfiprintf_internal_r+0xc74>
   1a840:	10800404 	addi	r2,r2,16
   1a844:	20c00044 	addi	r3,r4,1
   1a848:	44800015 	stw	r18,0(r8)
   1a84c:	45400115 	stw	r21,4(r8)
   1a850:	d8801c15 	stw	r2,112(sp)
   1a854:	d8c01b15 	stw	r3,108(sp)
   1a858:	e0fff40e 	bge	fp,r3,1a82c <__alt_data_end+0xfc01a82c>
   1a85c:	1000101e 	bne	r2,zero,1a8a0 <___vfiprintf_internal_r+0xca0>
   1a860:	843ffc04 	addi	r16,r16,-16
   1a864:	01400044 	movi	r5,1
   1a868:	0009883a 	mov	r4,zero
   1a86c:	d811883a 	mov	r8,sp
   1a870:	ac3ff316 	blt	r21,r16,1a840 <__alt_data_end+0xfc01a840>
   1a874:	d8c02317 	ldw	r3,140(sp)
   1a878:	1405883a 	add	r2,r2,r16
   1a87c:	44000115 	stw	r16,4(r8)
   1a880:	40c00015 	stw	r3,0(r8)
   1a884:	d8801c15 	stw	r2,112(sp)
   1a888:	d9401b15 	stw	r5,108(sp)
   1a88c:	00c001c4 	movi	r3,7
   1a890:	19401916 	blt	r3,r5,1a8f8 <___vfiprintf_internal_r+0xcf8>
   1a894:	42000204 	addi	r8,r8,8
   1a898:	29400044 	addi	r5,r5,1
   1a89c:	003e5506 	br	1a1f4 <__alt_data_end+0xfc01a1f4>
   1a8a0:	d9402017 	ldw	r5,128(sp)
   1a8a4:	d9002117 	ldw	r4,132(sp)
   1a8a8:	d9801a04 	addi	r6,sp,104
   1a8ac:	0019aec0 	call	19aec <__sprint_r.part.0>
   1a8b0:	10000b1e 	bne	r2,zero,1a8e0 <___vfiprintf_internal_r+0xce0>
   1a8b4:	d9001b17 	ldw	r4,108(sp)
   1a8b8:	d8801c17 	ldw	r2,112(sp)
   1a8bc:	d811883a 	mov	r8,sp
   1a8c0:	21400044 	addi	r5,r4,1
   1a8c4:	003fdc06 	br	1a838 <__alt_data_end+0xfc01a838>
   1a8c8:	d8801c17 	ldw	r2,112(sp)
   1a8cc:	10000426 	beq	r2,zero,1a8e0 <___vfiprintf_internal_r+0xce0>
   1a8d0:	d9402017 	ldw	r5,128(sp)
   1a8d4:	d9002117 	ldw	r4,132(sp)
   1a8d8:	d9801a04 	addi	r6,sp,104
   1a8dc:	0019aec0 	call	19aec <__sprint_r.part.0>
   1a8e0:	d9402017 	ldw	r5,128(sp)
   1a8e4:	2880030b 	ldhu	r2,12(r5)
   1a8e8:	1080100c 	andi	r2,r2,64
   1a8ec:	10014d1e 	bne	r2,zero,1ae24 <___vfiprintf_internal_r+0x1224>
   1a8f0:	d8802417 	ldw	r2,144(sp)
   1a8f4:	003d9706 	br	19f54 <__alt_data_end+0xfc019f54>
   1a8f8:	1000d21e 	bne	r2,zero,1ac44 <___vfiprintf_internal_r+0x1044>
   1a8fc:	00c00044 	movi	r3,1
   1a900:	a005883a 	mov	r2,r20
   1a904:	ddc00015 	stw	r23,0(sp)
   1a908:	dd000115 	stw	r20,4(sp)
   1a90c:	dd001c15 	stw	r20,112(sp)
   1a910:	d8c01b15 	stw	r3,108(sp)
   1a914:	d811883a 	mov	r8,sp
   1a918:	42000204 	addi	r8,r8,8
   1a91c:	8c40010c 	andi	r17,r17,4
   1a920:	88004026 	beq	r17,zero,1aa24 <___vfiprintf_internal_r+0xe24>
   1a924:	d9002517 	ldw	r4,148(sp)
   1a928:	24e3c83a 	sub	r17,r4,r19
   1a92c:	04403d0e 	bge	zero,r17,1aa24 <___vfiprintf_internal_r+0xe24>
   1a930:	04000404 	movi	r16,16
   1a934:	8441a90e 	bge	r16,r17,1afdc <___vfiprintf_internal_r+0x13dc>
   1a938:	00c000f4 	movhi	r3,3
   1a93c:	18eaf704 	addi	r3,r3,-21540
   1a940:	d9001b17 	ldw	r4,108(sp)
   1a944:	d8c02315 	stw	r3,140(sp)
   1a948:	050001c4 	movi	r20,7
   1a94c:	dd402117 	ldw	r21,132(sp)
   1a950:	ddc02017 	ldw	r23,128(sp)
   1a954:	00000506 	br	1a96c <___vfiprintf_internal_r+0xd6c>
   1a958:	21400084 	addi	r5,r4,2
   1a95c:	42000204 	addi	r8,r8,8
   1a960:	1809883a 	mov	r4,r3
   1a964:	8c7ffc04 	addi	r17,r17,-16
   1a968:	84400f0e 	bge	r16,r17,1a9a8 <___vfiprintf_internal_r+0xda8>
   1a96c:	014000f4 	movhi	r5,3
   1a970:	10800404 	addi	r2,r2,16
   1a974:	20c00044 	addi	r3,r4,1
   1a978:	296af704 	addi	r5,r5,-21540
   1a97c:	41400015 	stw	r5,0(r8)
   1a980:	44000115 	stw	r16,4(r8)
   1a984:	d8801c15 	stw	r2,112(sp)
   1a988:	d8c01b15 	stw	r3,108(sp)
   1a98c:	a0fff20e 	bge	r20,r3,1a958 <__alt_data_end+0xfc01a958>
   1a990:	1000141e 	bne	r2,zero,1a9e4 <___vfiprintf_internal_r+0xde4>
   1a994:	8c7ffc04 	addi	r17,r17,-16
   1a998:	01400044 	movi	r5,1
   1a99c:	0009883a 	mov	r4,zero
   1a9a0:	d811883a 	mov	r8,sp
   1a9a4:	847ff116 	blt	r16,r17,1a96c <__alt_data_end+0xfc01a96c>
   1a9a8:	d8c02317 	ldw	r3,140(sp)
   1a9ac:	1445883a 	add	r2,r2,r17
   1a9b0:	44400115 	stw	r17,4(r8)
   1a9b4:	40c00015 	stw	r3,0(r8)
   1a9b8:	d8801c15 	stw	r2,112(sp)
   1a9bc:	d9401b15 	stw	r5,108(sp)
   1a9c0:	00c001c4 	movi	r3,7
   1a9c4:	1940170e 	bge	r3,r5,1aa24 <___vfiprintf_internal_r+0xe24>
   1a9c8:	1000101e 	bne	r2,zero,1aa0c <___vfiprintf_internal_r+0xe0c>
   1a9cc:	d8802517 	ldw	r2,148(sp)
   1a9d0:	14c11616 	blt	r2,r19,1ae2c <___vfiprintf_internal_r+0x122c>
   1a9d4:	d9002417 	ldw	r4,144(sp)
   1a9d8:	2089883a 	add	r4,r4,r2
   1a9dc:	d9002415 	stw	r4,144(sp)
   1a9e0:	003e1806 	br	1a244 <__alt_data_end+0xfc01a244>
   1a9e4:	d9801a04 	addi	r6,sp,104
   1a9e8:	b80b883a 	mov	r5,r23
   1a9ec:	a809883a 	mov	r4,r21
   1a9f0:	0019aec0 	call	19aec <__sprint_r.part.0>
   1a9f4:	103fba1e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1a9f8:	d9001b17 	ldw	r4,108(sp)
   1a9fc:	d8801c17 	ldw	r2,112(sp)
   1aa00:	d811883a 	mov	r8,sp
   1aa04:	21400044 	addi	r5,r4,1
   1aa08:	003fd606 	br	1a964 <__alt_data_end+0xfc01a964>
   1aa0c:	d9402017 	ldw	r5,128(sp)
   1aa10:	d9002117 	ldw	r4,132(sp)
   1aa14:	d9801a04 	addi	r6,sp,104
   1aa18:	0019aec0 	call	19aec <__sprint_r.part.0>
   1aa1c:	103fb01e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1aa20:	d8801c17 	ldw	r2,112(sp)
   1aa24:	d8c02517 	ldw	r3,148(sp)
   1aa28:	1cc0010e 	bge	r3,r19,1aa30 <___vfiprintf_internal_r+0xe30>
   1aa2c:	9807883a 	mov	r3,r19
   1aa30:	d9002417 	ldw	r4,144(sp)
   1aa34:	20c9883a 	add	r4,r4,r3
   1aa38:	d9002415 	stw	r4,144(sp)
   1aa3c:	103e0126 	beq	r2,zero,1a244 <__alt_data_end+0xfc01a244>
   1aa40:	d9402017 	ldw	r5,128(sp)
   1aa44:	d9002117 	ldw	r4,132(sp)
   1aa48:	d9801a04 	addi	r6,sp,104
   1aa4c:	0019aec0 	call	19aec <__sprint_r.part.0>
   1aa50:	103dfc26 	beq	r2,zero,1a244 <__alt_data_end+0xfc01a244>
   1aa54:	003fa206 	br	1a8e0 <__alt_data_end+0xfc01a8e0>
   1aa58:	d9402017 	ldw	r5,128(sp)
   1aa5c:	d9002117 	ldw	r4,132(sp)
   1aa60:	d9801a04 	addi	r6,sp,104
   1aa64:	d9c02b15 	stw	r7,172(sp)
   1aa68:	0019aec0 	call	19aec <__sprint_r.part.0>
   1aa6c:	d9c02b17 	ldw	r7,172(sp)
   1aa70:	103f9b1e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1aa74:	d9001b17 	ldw	r4,108(sp)
   1aa78:	d8801c17 	ldw	r2,112(sp)
   1aa7c:	d811883a 	mov	r8,sp
   1aa80:	21800044 	addi	r6,r4,1
   1aa84:	003dbf06 	br	1a184 <__alt_data_end+0xfc01a184>
   1aa88:	1000d81e 	bne	r2,zero,1adec <___vfiprintf_internal_r+0x11ec>
   1aa8c:	d9001d87 	ldb	r4,118(sp)
   1aa90:	20000a26 	beq	r4,zero,1aabc <___vfiprintf_internal_r+0xebc>
   1aa94:	00800044 	movi	r2,1
   1aa98:	d9001d84 	addi	r4,sp,118
   1aa9c:	100b883a 	mov	r5,r2
   1aaa0:	d9000015 	stw	r4,0(sp)
   1aaa4:	d8800115 	stw	r2,4(sp)
   1aaa8:	d811883a 	mov	r8,sp
   1aaac:	2809883a 	mov	r4,r5
   1aab0:	42000204 	addi	r8,r8,8
   1aab4:	29400044 	addi	r5,r5,1
   1aab8:	003d9506 	br	1a110 <__alt_data_end+0xfc01a110>
   1aabc:	3800fd26 	beq	r7,zero,1aeb4 <___vfiprintf_internal_r+0x12b4>
   1aac0:	00800084 	movi	r2,2
   1aac4:	d9001d04 	addi	r4,sp,116
   1aac8:	d9000015 	stw	r4,0(sp)
   1aacc:	d8800115 	stw	r2,4(sp)
   1aad0:	01400044 	movi	r5,1
   1aad4:	d811883a 	mov	r8,sp
   1aad8:	2809883a 	mov	r4,r5
   1aadc:	42000204 	addi	r8,r8,8
   1aae0:	29400044 	addi	r5,r5,1
   1aae4:	003f4606 	br	1a800 <__alt_data_end+0xfc01a800>
   1aae8:	d8802517 	ldw	r2,148(sp)
   1aaec:	14c0010e 	bge	r2,r19,1aaf4 <___vfiprintf_internal_r+0xef4>
   1aaf0:	9805883a 	mov	r2,r19
   1aaf4:	d9402417 	ldw	r5,144(sp)
   1aaf8:	288b883a 	add	r5,r5,r2
   1aafc:	d9402415 	stw	r5,144(sp)
   1ab00:	003dd006 	br	1a244 <__alt_data_end+0xfc01a244>
   1ab04:	d8001d85 	stb	zero,118(sp)
   1ab08:	80005d16 	blt	r16,zero,1ac80 <___vfiprintf_internal_r+0x1080>
   1ab0c:	00ffdfc4 	movi	r3,-129
   1ab10:	9d04b03a 	or	r2,r19,r20
   1ab14:	88e2703a 	and	r17,r17,r3
   1ab18:	103d3726 	beq	r2,zero,19ff8 <__alt_data_end+0xfc019ff8>
   1ab1c:	002b883a 	mov	r21,zero
   1ab20:	d9002617 	ldw	r4,152(sp)
   1ab24:	ddc01a04 	addi	r23,sp,104
   1ab28:	988003cc 	andi	r2,r19,15
   1ab2c:	a006973a 	slli	r3,r20,28
   1ab30:	2085883a 	add	r2,r4,r2
   1ab34:	9826d13a 	srli	r19,r19,4
   1ab38:	10800003 	ldbu	r2,0(r2)
   1ab3c:	a028d13a 	srli	r20,r20,4
   1ab40:	bdffffc4 	addi	r23,r23,-1
   1ab44:	1ce6b03a 	or	r19,r3,r19
   1ab48:	b8800005 	stb	r2,0(r23)
   1ab4c:	9d04b03a 	or	r2,r19,r20
   1ab50:	103ff51e 	bne	r2,zero,1ab28 <__alt_data_end+0xfc01ab28>
   1ab54:	d8801e17 	ldw	r2,120(sp)
   1ab58:	15e9c83a 	sub	r20,r2,r23
   1ab5c:	003d2b06 	br	1a00c <__alt_data_end+0xfc01a00c>
   1ab60:	d9402017 	ldw	r5,128(sp)
   1ab64:	d9002117 	ldw	r4,132(sp)
   1ab68:	d9801a04 	addi	r6,sp,104
   1ab6c:	0019aec0 	call	19aec <__sprint_r.part.0>
   1ab70:	103f5b1e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1ab74:	d8801c17 	ldw	r2,112(sp)
   1ab78:	d811883a 	mov	r8,sp
   1ab7c:	003f6706 	br	1a91c <__alt_data_end+0xfc01a91c>
   1ab80:	d9402017 	ldw	r5,128(sp)
   1ab84:	d9002117 	ldw	r4,132(sp)
   1ab88:	d9801a04 	addi	r6,sp,104
   1ab8c:	0019aec0 	call	19aec <__sprint_r.part.0>
   1ab90:	103f531e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1ab94:	d811883a 	mov	r8,sp
   1ab98:	003cd906 	br	19f00 <__alt_data_end+0xfc019f00>
   1ab9c:	10803fcc 	andi	r2,r2,255
   1aba0:	1080201c 	xori	r2,r2,128
   1aba4:	10bfe004 	addi	r2,r2,-128
   1aba8:	00c00c04 	movi	r3,48
   1abac:	10ffe926 	beq	r2,r3,1ab54 <__alt_data_end+0xfc01ab54>
   1abb0:	b8ffffc5 	stb	r3,-1(r23)
   1abb4:	d8c01e17 	ldw	r3,120(sp)
   1abb8:	b8bfffc4 	addi	r2,r23,-1
   1abbc:	102f883a 	mov	r23,r2
   1abc0:	18a9c83a 	sub	r20,r3,r2
   1abc4:	003d1106 	br	1a00c <__alt_data_end+0xfc01a00c>
   1abc8:	d9402017 	ldw	r5,128(sp)
   1abcc:	d9002117 	ldw	r4,132(sp)
   1abd0:	d9801a04 	addi	r6,sp,104
   1abd4:	d8c02a15 	stw	r3,168(sp)
   1abd8:	d9c02b15 	stw	r7,172(sp)
   1abdc:	0019aec0 	call	19aec <__sprint_r.part.0>
   1abe0:	d8c02a17 	ldw	r3,168(sp)
   1abe4:	d9c02b17 	ldw	r7,172(sp)
   1abe8:	103f3d1e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1abec:	d9001b17 	ldw	r4,108(sp)
   1abf0:	d8801c17 	ldw	r2,112(sp)
   1abf4:	d811883a 	mov	r8,sp
   1abf8:	21400044 	addi	r5,r4,1
   1abfc:	003d4406 	br	1a110 <__alt_data_end+0xfc01a110>
   1ac00:	d9402017 	ldw	r5,128(sp)
   1ac04:	d9002117 	ldw	r4,132(sp)
   1ac08:	d9801a04 	addi	r6,sp,104
   1ac0c:	d8c02a15 	stw	r3,168(sp)
   1ac10:	0019aec0 	call	19aec <__sprint_r.part.0>
   1ac14:	d8c02a17 	ldw	r3,168(sp)
   1ac18:	103f311e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1ac1c:	d9001b17 	ldw	r4,108(sp)
   1ac20:	d8801c17 	ldw	r2,112(sp)
   1ac24:	d811883a 	mov	r8,sp
   1ac28:	21400044 	addi	r5,r4,1
   1ac2c:	003ef406 	br	1a800 <__alt_data_end+0xfc01a800>
   1ac30:	1000bd1e 	bne	r2,zero,1af28 <___vfiprintf_internal_r+0x1328>
   1ac34:	01400044 	movi	r5,1
   1ac38:	0009883a 	mov	r4,zero
   1ac3c:	d811883a 	mov	r8,sp
   1ac40:	003ef106 	br	1a808 <__alt_data_end+0xfc01a808>
   1ac44:	d9402017 	ldw	r5,128(sp)
   1ac48:	d9002117 	ldw	r4,132(sp)
   1ac4c:	d9801a04 	addi	r6,sp,104
   1ac50:	0019aec0 	call	19aec <__sprint_r.part.0>
   1ac54:	103f221e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1ac58:	d9401b17 	ldw	r5,108(sp)
   1ac5c:	d8801c17 	ldw	r2,112(sp)
   1ac60:	d811883a 	mov	r8,sp
   1ac64:	29400044 	addi	r5,r5,1
   1ac68:	003d6206 	br	1a1f4 <__alt_data_end+0xfc01a1f4>
   1ac6c:	014000f4 	movhi	r5,3
   1ac70:	296a8304 	addi	r5,r5,-22004
   1ac74:	d9402615 	stw	r5,152(sp)
   1ac78:	d8c02215 	stw	r3,136(sp)
   1ac7c:	1023883a 	mov	r17,r2
   1ac80:	9d04b03a 	or	r2,r19,r20
   1ac84:	103fa51e 	bne	r2,zero,1ab1c <__alt_data_end+0xfc01ab1c>
   1ac88:	002b883a 	mov	r21,zero
   1ac8c:	00800084 	movi	r2,2
   1ac90:	003e4a06 	br	1a5bc <__alt_data_end+0xfc01a5bc>
   1ac94:	014000f4 	movhi	r5,3
   1ac98:	296a8304 	addi	r5,r5,-22004
   1ac9c:	002b883a 	mov	r21,zero
   1aca0:	d9402615 	stw	r5,152(sp)
   1aca4:	003f9e06 	br	1ab20 <__alt_data_end+0xfc01ab20>
   1aca8:	d9402217 	ldw	r5,136(sp)
   1acac:	d8001d85 	stb	zero,118(sp)
   1acb0:	0029883a 	mov	r20,zero
   1acb4:	28800104 	addi	r2,r5,4
   1acb8:	2cc00017 	ldw	r19,0(r5)
   1acbc:	803e3a16 	blt	r16,zero,1a5a8 <__alt_data_end+0xfc01a5a8>
   1acc0:	00ffdfc4 	movi	r3,-129
   1acc4:	d8802215 	stw	r2,136(sp)
   1acc8:	88e2703a 	and	r17,r17,r3
   1accc:	002b883a 	mov	r21,zero
   1acd0:	983e9b26 	beq	r19,zero,1a740 <__alt_data_end+0xfc01a740>
   1acd4:	00800244 	movi	r2,9
   1acd8:	14fdc936 	bltu	r2,r19,1a400 <__alt_data_end+0xfc01a400>
   1acdc:	003e9a06 	br	1a748 <__alt_data_end+0xfc01a748>
   1ace0:	00800c04 	movi	r2,48
   1ace4:	d8c01d45 	stb	r3,117(sp)
   1ace8:	d8801d05 	stb	r2,116(sp)
   1acec:	d8001d85 	stb	zero,118(sp)
   1acf0:	88c00094 	ori	r3,r17,2
   1acf4:	80009c16 	blt	r16,zero,1af68 <___vfiprintf_internal_r+0x1368>
   1acf8:	00bfdfc4 	movi	r2,-129
   1acfc:	88a2703a 	and	r17,r17,r2
   1ad00:	8c400094 	ori	r17,r17,2
   1ad04:	002b883a 	mov	r21,zero
   1ad08:	003f8506 	br	1ab20 <__alt_data_end+0xfc01ab20>
   1ad0c:	b029883a 	mov	r20,r22
   1ad10:	003c0b06 	br	19d40 <__alt_data_end+0xfc019d40>
   1ad14:	04e7c83a 	sub	r19,zero,r19
   1ad18:	05400b44 	movi	r21,45
   1ad1c:	9804c03a 	cmpne	r2,r19,zero
   1ad20:	0529c83a 	sub	r20,zero,r20
   1ad24:	dd401d85 	stb	r21,118(sp)
   1ad28:	a0a9c83a 	sub	r20,r20,r2
   1ad2c:	80009716 	blt	r16,zero,1af8c <___vfiprintf_internal_r+0x138c>
   1ad30:	00bfdfc4 	movi	r2,-129
   1ad34:	88a2703a 	and	r17,r17,r2
   1ad38:	003db006 	br	1a3fc <__alt_data_end+0xfc01a3fc>
   1ad3c:	b0c00007 	ldb	r3,0(r22)
   1ad40:	003c0c06 	br	19d74 <__alt_data_end+0xfc019d74>
   1ad44:	8880100c 	andi	r2,r17,64
   1ad48:	d8001d85 	stb	zero,118(sp)
   1ad4c:	1000461e 	bne	r2,zero,1ae68 <___vfiprintf_internal_r+0x1268>
   1ad50:	d9002217 	ldw	r4,136(sp)
   1ad54:	0029883a 	mov	r20,zero
   1ad58:	20800104 	addi	r2,r4,4
   1ad5c:	24c00017 	ldw	r19,0(r4)
   1ad60:	803df80e 	bge	r16,zero,1a544 <__alt_data_end+0xfc01a544>
   1ad64:	9d06b03a 	or	r3,r19,r20
   1ad68:	d8802215 	stw	r2,136(sp)
   1ad6c:	183d5e1e 	bne	r3,zero,1a2e8 <__alt_data_end+0xfc01a2e8>
   1ad70:	002b883a 	mov	r21,zero
   1ad74:	0005883a 	mov	r2,zero
   1ad78:	003e1006 	br	1a5bc <__alt_data_end+0xfc01a5bc>
   1ad7c:	8880040c 	andi	r2,r17,16
   1ad80:	1000321e 	bne	r2,zero,1ae4c <___vfiprintf_internal_r+0x124c>
   1ad84:	8c40100c 	andi	r17,r17,64
   1ad88:	88008d26 	beq	r17,zero,1afc0 <___vfiprintf_internal_r+0x13c0>
   1ad8c:	d9402217 	ldw	r5,136(sp)
   1ad90:	d8c02417 	ldw	r3,144(sp)
   1ad94:	28800017 	ldw	r2,0(r5)
   1ad98:	29400104 	addi	r5,r5,4
   1ad9c:	d9402215 	stw	r5,136(sp)
   1ada0:	10c0000d 	sth	r3,0(r2)
   1ada4:	003bca06 	br	19cd0 <__alt_data_end+0xfc019cd0>
   1ada8:	8880100c 	andi	r2,r17,64
   1adac:	10003a26 	beq	r2,zero,1ae98 <___vfiprintf_internal_r+0x1298>
   1adb0:	d8802217 	ldw	r2,136(sp)
   1adb4:	14c0000f 	ldh	r19,0(r2)
   1adb8:	10800104 	addi	r2,r2,4
   1adbc:	d8802215 	stw	r2,136(sp)
   1adc0:	9829d7fa 	srai	r20,r19,31
   1adc4:	a005883a 	mov	r2,r20
   1adc8:	003d8506 	br	1a3e0 <__alt_data_end+0xfc01a3e0>
   1adcc:	8880100c 	andi	r2,r17,64
   1add0:	10002b26 	beq	r2,zero,1ae80 <___vfiprintf_internal_r+0x1280>
   1add4:	d8802217 	ldw	r2,136(sp)
   1add8:	0029883a 	mov	r20,zero
   1addc:	14c0000b 	ldhu	r19,0(r2)
   1ade0:	10800104 	addi	r2,r2,4
   1ade4:	d8802215 	stw	r2,136(sp)
   1ade8:	003d5d06 	br	1a360 <__alt_data_end+0xfc01a360>
   1adec:	d9402017 	ldw	r5,128(sp)
   1adf0:	d9002117 	ldw	r4,132(sp)
   1adf4:	d9801a04 	addi	r6,sp,104
   1adf8:	d8c02a15 	stw	r3,168(sp)
   1adfc:	d9c02b15 	stw	r7,172(sp)
   1ae00:	0019aec0 	call	19aec <__sprint_r.part.0>
   1ae04:	d8c02a17 	ldw	r3,168(sp)
   1ae08:	d9c02b17 	ldw	r7,172(sp)
   1ae0c:	103eb41e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1ae10:	d9001b17 	ldw	r4,108(sp)
   1ae14:	d8801c17 	ldw	r2,112(sp)
   1ae18:	d811883a 	mov	r8,sp
   1ae1c:	21400044 	addi	r5,r4,1
   1ae20:	003e6706 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1ae24:	00bfffc4 	movi	r2,-1
   1ae28:	003c4a06 	br	19f54 <__alt_data_end+0xfc019f54>
   1ae2c:	9805883a 	mov	r2,r19
   1ae30:	003ee806 	br	1a9d4 <__alt_data_end+0xfc01a9d4>
   1ae34:	d8c02217 	ldw	r3,136(sp)
   1ae38:	0029883a 	mov	r20,zero
   1ae3c:	18800104 	addi	r2,r3,4
   1ae40:	1cc0000b 	ldhu	r19,0(r3)
   1ae44:	803f9e0e 	bge	r16,zero,1acc0 <__alt_data_end+0xfc01acc0>
   1ae48:	003dd706 	br	1a5a8 <__alt_data_end+0xfc01a5a8>
   1ae4c:	d8c02217 	ldw	r3,136(sp)
   1ae50:	d9002417 	ldw	r4,144(sp)
   1ae54:	18800017 	ldw	r2,0(r3)
   1ae58:	18c00104 	addi	r3,r3,4
   1ae5c:	d8c02215 	stw	r3,136(sp)
   1ae60:	11000015 	stw	r4,0(r2)
   1ae64:	003b9a06 	br	19cd0 <__alt_data_end+0xfc019cd0>
   1ae68:	d8c02217 	ldw	r3,136(sp)
   1ae6c:	0029883a 	mov	r20,zero
   1ae70:	18800104 	addi	r2,r3,4
   1ae74:	1cc0000b 	ldhu	r19,0(r3)
   1ae78:	803db20e 	bge	r16,zero,1a544 <__alt_data_end+0xfc01a544>
   1ae7c:	003fb906 	br	1ad64 <__alt_data_end+0xfc01ad64>
   1ae80:	d9002217 	ldw	r4,136(sp)
   1ae84:	0029883a 	mov	r20,zero
   1ae88:	24c00017 	ldw	r19,0(r4)
   1ae8c:	21000104 	addi	r4,r4,4
   1ae90:	d9002215 	stw	r4,136(sp)
   1ae94:	003d3206 	br	1a360 <__alt_data_end+0xfc01a360>
   1ae98:	d8c02217 	ldw	r3,136(sp)
   1ae9c:	1cc00017 	ldw	r19,0(r3)
   1aea0:	18c00104 	addi	r3,r3,4
   1aea4:	d8c02215 	stw	r3,136(sp)
   1aea8:	9829d7fa 	srai	r20,r19,31
   1aeac:	a005883a 	mov	r2,r20
   1aeb0:	003d4b06 	br	1a3e0 <__alt_data_end+0xfc01a3e0>
   1aeb4:	0009883a 	mov	r4,zero
   1aeb8:	01400044 	movi	r5,1
   1aebc:	d811883a 	mov	r8,sp
   1aec0:	003e4f06 	br	1a800 <__alt_data_end+0xfc01a800>
   1aec4:	d8c02215 	stw	r3,136(sp)
   1aec8:	002b883a 	mov	r21,zero
   1aecc:	003db806 	br	1a5b0 <__alt_data_end+0xfc01a5b0>
   1aed0:	d811883a 	mov	r8,sp
   1aed4:	003e9606 	br	1a930 <__alt_data_end+0xfc01a930>
   1aed8:	010000f4 	movhi	r4,3
   1aedc:	212af304 	addi	r4,r4,-21556
   1aee0:	d9002315 	stw	r4,140(sp)
   1aee4:	003e6306 	br	1a874 <__alt_data_end+0xfc01a874>
   1aee8:	b0c00043 	ldbu	r3,1(r22)
   1aeec:	8c400814 	ori	r17,r17,32
   1aef0:	b5800044 	addi	r22,r22,1
   1aef4:	18c03fcc 	andi	r3,r3,255
   1aef8:	18c0201c 	xori	r3,r3,128
   1aefc:	18ffe004 	addi	r3,r3,-128
   1af00:	003b9c06 	br	19d74 <__alt_data_end+0xfc019d74>
   1af04:	b809883a 	mov	r4,r23
   1af08:	da002a15 	stw	r8,168(sp)
   1af0c:	000f5800 	call	f580 <strlen>
   1af10:	1029883a 	mov	r20,r2
   1af14:	dd401d83 	ldbu	r21,118(sp)
   1af18:	df002215 	stw	fp,136(sp)
   1af1c:	0021883a 	mov	r16,zero
   1af20:	da002a17 	ldw	r8,168(sp)
   1af24:	003c3906 	br	1a00c <__alt_data_end+0xfc01a00c>
   1af28:	d9402017 	ldw	r5,128(sp)
   1af2c:	d9002117 	ldw	r4,132(sp)
   1af30:	d9801a04 	addi	r6,sp,104
   1af34:	0019aec0 	call	19aec <__sprint_r.part.0>
   1af38:	103e691e 	bne	r2,zero,1a8e0 <__alt_data_end+0xfc01a8e0>
   1af3c:	d9001b17 	ldw	r4,108(sp)
   1af40:	d8801c17 	ldw	r2,112(sp)
   1af44:	d811883a 	mov	r8,sp
   1af48:	21400044 	addi	r5,r4,1
   1af4c:	003e2e06 	br	1a808 <__alt_data_end+0xfc01a808>
   1af50:	010000f4 	movhi	r4,3
   1af54:	212af704 	addi	r4,r4,-21540
   1af58:	d9002315 	stw	r4,140(sp)
   1af5c:	d9001b17 	ldw	r4,108(sp)
   1af60:	21000044 	addi	r4,r4,1
   1af64:	003c5e06 	br	1a0e0 <__alt_data_end+0xfc01a0e0>
   1af68:	002b883a 	mov	r21,zero
   1af6c:	00800084 	movi	r2,2
   1af70:	10803fcc 	andi	r2,r2,255
   1af74:	01000044 	movi	r4,1
   1af78:	11002b26 	beq	r2,r4,1b028 <___vfiprintf_internal_r+0x1428>
   1af7c:	01000084 	movi	r4,2
   1af80:	11002b1e 	bne	r2,r4,1b030 <___vfiprintf_internal_r+0x1430>
   1af84:	1823883a 	mov	r17,r3
   1af88:	003ee506 	br	1ab20 <__alt_data_end+0xfc01ab20>
   1af8c:	8807883a 	mov	r3,r17
   1af90:	00800044 	movi	r2,1
   1af94:	003ff606 	br	1af70 <__alt_data_end+0xfc01af70>
   1af98:	00800184 	movi	r2,6
   1af9c:	1400012e 	bgeu	r2,r16,1afa4 <___vfiprintf_internal_r+0x13a4>
   1afa0:	1021883a 	mov	r16,r2
   1afa4:	8029883a 	mov	r20,r16
   1afa8:	8027883a 	mov	r19,r16
   1afac:	80002216 	blt	r16,zero,1b038 <___vfiprintf_internal_r+0x1438>
   1afb0:	05c000f4 	movhi	r23,3
   1afb4:	df002215 	stw	fp,136(sp)
   1afb8:	bdea8804 	addi	r23,r23,-21984
   1afbc:	003cfb06 	br	1a3ac <__alt_data_end+0xfc01a3ac>
   1afc0:	d9002217 	ldw	r4,136(sp)
   1afc4:	d9402417 	ldw	r5,144(sp)
   1afc8:	20800017 	ldw	r2,0(r4)
   1afcc:	21000104 	addi	r4,r4,4
   1afd0:	d9002215 	stw	r4,136(sp)
   1afd4:	11400015 	stw	r5,0(r2)
   1afd8:	003b3d06 	br	19cd0 <__alt_data_end+0xfc019cd0>
   1afdc:	014000f4 	movhi	r5,3
   1afe0:	296af704 	addi	r5,r5,-21540
   1afe4:	d9402315 	stw	r5,140(sp)
   1afe8:	d9401b17 	ldw	r5,108(sp)
   1afec:	29400044 	addi	r5,r5,1
   1aff0:	003e6d06 	br	1a9a8 <__alt_data_end+0xfc01a9a8>
   1aff4:	8029883a 	mov	r20,r16
   1aff8:	dd401d83 	ldbu	r21,118(sp)
   1affc:	df002215 	stw	fp,136(sp)
   1b000:	0021883a 	mov	r16,zero
   1b004:	003c0106 	br	1a00c <__alt_data_end+0xfc01a00c>
   1b008:	00c000f4 	movhi	r3,3
   1b00c:	18eaf304 	addi	r3,r3,-21556
   1b010:	d8c02315 	stw	r3,140(sp)
   1b014:	280d883a 	mov	r6,r5
   1b018:	003c6906 	br	1a1c0 <__alt_data_end+0xfc01a1c0>
   1b01c:	802d883a 	mov	r22,r16
   1b020:	0021883a 	mov	r16,zero
   1b024:	003b5406 	br	19d78 <__alt_data_end+0xfc019d78>
   1b028:	1823883a 	mov	r17,r3
   1b02c:	003cf306 	br	1a3fc <__alt_data_end+0xfc01a3fc>
   1b030:	1823883a 	mov	r17,r3
   1b034:	003cad06 	br	1a2ec <__alt_data_end+0xfc01a2ec>
   1b038:	0027883a 	mov	r19,zero
   1b03c:	003fdc06 	br	1afb0 <__alt_data_end+0xfc01afb0>
   1b040:	d9402217 	ldw	r5,136(sp)
   1b044:	8005883a 	mov	r2,r16
   1b048:	b0c00043 	ldbu	r3,1(r22)
   1b04c:	2c000017 	ldw	r16,0(r5)
   1b050:	29000104 	addi	r4,r5,4
   1b054:	d9002215 	stw	r4,136(sp)
   1b058:	102d883a 	mov	r22,r2
   1b05c:	803fa50e 	bge	r16,zero,1aef4 <__alt_data_end+0xfc01aef4>
   1b060:	18c03fcc 	andi	r3,r3,255
   1b064:	18c0201c 	xori	r3,r3,128
   1b068:	043fffc4 	movi	r16,-1
   1b06c:	18ffe004 	addi	r3,r3,-128
   1b070:	003b4006 	br	19d74 <__alt_data_end+0xfc019d74>
   1b074:	d9402303 	ldbu	r5,140(sp)
   1b078:	d9401d85 	stb	r5,118(sp)
   1b07c:	003cae06 	br	1a338 <__alt_data_end+0xfc01a338>
   1b080:	d8c02303 	ldbu	r3,140(sp)
   1b084:	d8c01d85 	stb	r3,118(sp)
   1b088:	003d1406 	br	1a4dc <__alt_data_end+0xfc01a4dc>
   1b08c:	d8c02303 	ldbu	r3,140(sp)
   1b090:	d8c01d85 	stb	r3,118(sp)
   1b094:	003cca06 	br	1a3c0 <__alt_data_end+0xfc01a3c0>
   1b098:	8880004c 	andi	r2,r17,1
   1b09c:	002b883a 	mov	r21,zero
   1b0a0:	10000526 	beq	r2,zero,1b0b8 <___vfiprintf_internal_r+0x14b8>
   1b0a4:	00800c04 	movi	r2,48
   1b0a8:	d88019c5 	stb	r2,103(sp)
   1b0ac:	dd002817 	ldw	r20,160(sp)
   1b0b0:	ddc019c4 	addi	r23,sp,103
   1b0b4:	003bd506 	br	1a00c <__alt_data_end+0xfc01a00c>
   1b0b8:	0029883a 	mov	r20,zero
   1b0bc:	ddc01a04 	addi	r23,sp,104
   1b0c0:	003bd206 	br	1a00c <__alt_data_end+0xfc01a00c>
   1b0c4:	d9002303 	ldbu	r4,140(sp)
   1b0c8:	d9001d85 	stb	r4,118(sp)
   1b0cc:	003da606 	br	1a768 <__alt_data_end+0xfc01a768>
   1b0d0:	d8c02303 	ldbu	r3,140(sp)
   1b0d4:	d8c01d85 	stb	r3,118(sp)
   1b0d8:	003c7606 	br	1a2b4 <__alt_data_end+0xfc01a2b4>
   1b0dc:	d8c02303 	ldbu	r3,140(sp)
   1b0e0:	d8c01d85 	stb	r3,118(sp)
   1b0e4:	003c6506 	br	1a27c <__alt_data_end+0xfc01a27c>
   1b0e8:	d9002303 	ldbu	r4,140(sp)
   1b0ec:	d9001d85 	stb	r4,118(sp)
   1b0f0:	003d3d06 	br	1a5e8 <__alt_data_end+0xfc01a5e8>
   1b0f4:	d8c02303 	ldbu	r3,140(sp)
   1b0f8:	d8c01d85 	stb	r3,118(sp)
   1b0fc:	003d1d06 	br	1a574 <__alt_data_end+0xfc01a574>
   1b100:	d8c02303 	ldbu	r3,140(sp)
   1b104:	d8c01d85 	stb	r3,118(sp)
   1b108:	003d0306 	br	1a518 <__alt_data_end+0xfc01a518>

0001b10c <__vfiprintf_internal>:
   1b10c:	008000f4 	movhi	r2,3
   1b110:	10b77b04 	addi	r2,r2,-8724
   1b114:	300f883a 	mov	r7,r6
   1b118:	280d883a 	mov	r6,r5
   1b11c:	200b883a 	mov	r5,r4
   1b120:	11000017 	ldw	r4,0(r2)
   1b124:	0019c001 	jmpi	19c00 <___vfiprintf_internal_r>

0001b128 <__sbprintf>:
   1b128:	2880030b 	ldhu	r2,12(r5)
   1b12c:	2ac01917 	ldw	r11,100(r5)
   1b130:	2a80038b 	ldhu	r10,14(r5)
   1b134:	2a400717 	ldw	r9,28(r5)
   1b138:	2a000917 	ldw	r8,36(r5)
   1b13c:	defee204 	addi	sp,sp,-1144
   1b140:	00c10004 	movi	r3,1024
   1b144:	dc011a15 	stw	r16,1128(sp)
   1b148:	10bfff4c 	andi	r2,r2,65533
   1b14c:	2821883a 	mov	r16,r5
   1b150:	d8cb883a 	add	r5,sp,r3
   1b154:	dc811c15 	stw	r18,1136(sp)
   1b158:	dc411b15 	stw	r17,1132(sp)
   1b15c:	dfc11d15 	stw	ra,1140(sp)
   1b160:	2025883a 	mov	r18,r4
   1b164:	d881030d 	sth	r2,1036(sp)
   1b168:	dac11915 	stw	r11,1124(sp)
   1b16c:	da81038d 	sth	r10,1038(sp)
   1b170:	da410715 	stw	r9,1052(sp)
   1b174:	da010915 	stw	r8,1060(sp)
   1b178:	dec10015 	stw	sp,1024(sp)
   1b17c:	dec10415 	stw	sp,1040(sp)
   1b180:	d8c10215 	stw	r3,1032(sp)
   1b184:	d8c10515 	stw	r3,1044(sp)
   1b188:	d8010615 	stw	zero,1048(sp)
   1b18c:	0019c000 	call	19c00 <___vfiprintf_internal_r>
   1b190:	1023883a 	mov	r17,r2
   1b194:	10000416 	blt	r2,zero,1b1a8 <__sbprintf+0x80>
   1b198:	d9410004 	addi	r5,sp,1024
   1b19c:	9009883a 	mov	r4,r18
   1b1a0:	00158b00 	call	158b0 <_fflush_r>
   1b1a4:	10000d1e 	bne	r2,zero,1b1dc <__sbprintf+0xb4>
   1b1a8:	d881030b 	ldhu	r2,1036(sp)
   1b1ac:	1080100c 	andi	r2,r2,64
   1b1b0:	10000326 	beq	r2,zero,1b1c0 <__sbprintf+0x98>
   1b1b4:	8080030b 	ldhu	r2,12(r16)
   1b1b8:	10801014 	ori	r2,r2,64
   1b1bc:	8080030d 	sth	r2,12(r16)
   1b1c0:	8805883a 	mov	r2,r17
   1b1c4:	dfc11d17 	ldw	ra,1140(sp)
   1b1c8:	dc811c17 	ldw	r18,1136(sp)
   1b1cc:	dc411b17 	ldw	r17,1132(sp)
   1b1d0:	dc011a17 	ldw	r16,1128(sp)
   1b1d4:	dec11e04 	addi	sp,sp,1144
   1b1d8:	f800283a 	ret
   1b1dc:	047fffc4 	movi	r17,-1
   1b1e0:	003ff106 	br	1b1a8 <__alt_data_end+0xfc01b1a8>

0001b1e4 <__swbuf_r>:
   1b1e4:	defffb04 	addi	sp,sp,-20
   1b1e8:	dcc00315 	stw	r19,12(sp)
   1b1ec:	dc800215 	stw	r18,8(sp)
   1b1f0:	dc000015 	stw	r16,0(sp)
   1b1f4:	dfc00415 	stw	ra,16(sp)
   1b1f8:	dc400115 	stw	r17,4(sp)
   1b1fc:	2025883a 	mov	r18,r4
   1b200:	2827883a 	mov	r19,r5
   1b204:	3021883a 	mov	r16,r6
   1b208:	20000226 	beq	r4,zero,1b214 <__swbuf_r+0x30>
   1b20c:	20800e17 	ldw	r2,56(r4)
   1b210:	10004226 	beq	r2,zero,1b31c <__swbuf_r+0x138>
   1b214:	80800617 	ldw	r2,24(r16)
   1b218:	8100030b 	ldhu	r4,12(r16)
   1b21c:	80800215 	stw	r2,8(r16)
   1b220:	2080020c 	andi	r2,r4,8
   1b224:	10003626 	beq	r2,zero,1b300 <__swbuf_r+0x11c>
   1b228:	80c00417 	ldw	r3,16(r16)
   1b22c:	18003426 	beq	r3,zero,1b300 <__swbuf_r+0x11c>
   1b230:	2088000c 	andi	r2,r4,8192
   1b234:	9c403fcc 	andi	r17,r19,255
   1b238:	10001a26 	beq	r2,zero,1b2a4 <__swbuf_r+0xc0>
   1b23c:	80800017 	ldw	r2,0(r16)
   1b240:	81000517 	ldw	r4,20(r16)
   1b244:	10c7c83a 	sub	r3,r2,r3
   1b248:	1900200e 	bge	r3,r4,1b2cc <__swbuf_r+0xe8>
   1b24c:	18c00044 	addi	r3,r3,1
   1b250:	81000217 	ldw	r4,8(r16)
   1b254:	11400044 	addi	r5,r2,1
   1b258:	81400015 	stw	r5,0(r16)
   1b25c:	213fffc4 	addi	r4,r4,-1
   1b260:	81000215 	stw	r4,8(r16)
   1b264:	14c00005 	stb	r19,0(r2)
   1b268:	80800517 	ldw	r2,20(r16)
   1b26c:	10c01e26 	beq	r2,r3,1b2e8 <__swbuf_r+0x104>
   1b270:	8080030b 	ldhu	r2,12(r16)
   1b274:	1080004c 	andi	r2,r2,1
   1b278:	10000226 	beq	r2,zero,1b284 <__swbuf_r+0xa0>
   1b27c:	00800284 	movi	r2,10
   1b280:	88801926 	beq	r17,r2,1b2e8 <__swbuf_r+0x104>
   1b284:	8805883a 	mov	r2,r17
   1b288:	dfc00417 	ldw	ra,16(sp)
   1b28c:	dcc00317 	ldw	r19,12(sp)
   1b290:	dc800217 	ldw	r18,8(sp)
   1b294:	dc400117 	ldw	r17,4(sp)
   1b298:	dc000017 	ldw	r16,0(sp)
   1b29c:	dec00504 	addi	sp,sp,20
   1b2a0:	f800283a 	ret
   1b2a4:	81401917 	ldw	r5,100(r16)
   1b2a8:	00b7ffc4 	movi	r2,-8193
   1b2ac:	21080014 	ori	r4,r4,8192
   1b2b0:	2884703a 	and	r2,r5,r2
   1b2b4:	80801915 	stw	r2,100(r16)
   1b2b8:	80800017 	ldw	r2,0(r16)
   1b2bc:	8100030d 	sth	r4,12(r16)
   1b2c0:	81000517 	ldw	r4,20(r16)
   1b2c4:	10c7c83a 	sub	r3,r2,r3
   1b2c8:	193fe016 	blt	r3,r4,1b24c <__alt_data_end+0xfc01b24c>
   1b2cc:	800b883a 	mov	r5,r16
   1b2d0:	9009883a 	mov	r4,r18
   1b2d4:	00158b00 	call	158b0 <_fflush_r>
   1b2d8:	1000071e 	bne	r2,zero,1b2f8 <__swbuf_r+0x114>
   1b2dc:	80800017 	ldw	r2,0(r16)
   1b2e0:	00c00044 	movi	r3,1
   1b2e4:	003fda06 	br	1b250 <__alt_data_end+0xfc01b250>
   1b2e8:	800b883a 	mov	r5,r16
   1b2ec:	9009883a 	mov	r4,r18
   1b2f0:	00158b00 	call	158b0 <_fflush_r>
   1b2f4:	103fe326 	beq	r2,zero,1b284 <__alt_data_end+0xfc01b284>
   1b2f8:	00bfffc4 	movi	r2,-1
   1b2fc:	003fe206 	br	1b288 <__alt_data_end+0xfc01b288>
   1b300:	800b883a 	mov	r5,r16
   1b304:	9009883a 	mov	r4,r18
   1b308:	0013c900 	call	13c90 <__swsetup_r>
   1b30c:	103ffa1e 	bne	r2,zero,1b2f8 <__alt_data_end+0xfc01b2f8>
   1b310:	8100030b 	ldhu	r4,12(r16)
   1b314:	80c00417 	ldw	r3,16(r16)
   1b318:	003fc506 	br	1b230 <__alt_data_end+0xfc01b230>
   1b31c:	0015c9c0 	call	15c9c <__sinit>
   1b320:	003fbc06 	br	1b214 <__alt_data_end+0xfc01b214>

0001b324 <__swbuf>:
   1b324:	008000f4 	movhi	r2,3
   1b328:	10b77b04 	addi	r2,r2,-8724
   1b32c:	280d883a 	mov	r6,r5
   1b330:	200b883a 	mov	r5,r4
   1b334:	11000017 	ldw	r4,0(r2)
   1b338:	001b1e41 	jmpi	1b1e4 <__swbuf_r>

0001b33c <_write_r>:
   1b33c:	defffd04 	addi	sp,sp,-12
   1b340:	2805883a 	mov	r2,r5
   1b344:	dc000015 	stw	r16,0(sp)
   1b348:	040000f4 	movhi	r16,3
   1b34c:	dc400115 	stw	r17,4(sp)
   1b350:	300b883a 	mov	r5,r6
   1b354:	84040f04 	addi	r16,r16,4156
   1b358:	2023883a 	mov	r17,r4
   1b35c:	380d883a 	mov	r6,r7
   1b360:	1009883a 	mov	r4,r2
   1b364:	dfc00215 	stw	ra,8(sp)
   1b368:	80000015 	stw	zero,0(r16)
   1b36c:	001fa680 	call	1fa68 <write>
   1b370:	00ffffc4 	movi	r3,-1
   1b374:	10c00526 	beq	r2,r3,1b38c <_write_r+0x50>
   1b378:	dfc00217 	ldw	ra,8(sp)
   1b37c:	dc400117 	ldw	r17,4(sp)
   1b380:	dc000017 	ldw	r16,0(sp)
   1b384:	dec00304 	addi	sp,sp,12
   1b388:	f800283a 	ret
   1b38c:	80c00017 	ldw	r3,0(r16)
   1b390:	183ff926 	beq	r3,zero,1b378 <__alt_data_end+0xfc01b378>
   1b394:	88c00015 	stw	r3,0(r17)
   1b398:	003ff706 	br	1b378 <__alt_data_end+0xfc01b378>

0001b39c <_close_r>:
   1b39c:	defffd04 	addi	sp,sp,-12
   1b3a0:	dc000015 	stw	r16,0(sp)
   1b3a4:	040000f4 	movhi	r16,3
   1b3a8:	dc400115 	stw	r17,4(sp)
   1b3ac:	84040f04 	addi	r16,r16,4156
   1b3b0:	2023883a 	mov	r17,r4
   1b3b4:	2809883a 	mov	r4,r5
   1b3b8:	dfc00215 	stw	ra,8(sp)
   1b3bc:	80000015 	stw	zero,0(r16)
   1b3c0:	001ef6c0 	call	1ef6c <close>
   1b3c4:	00ffffc4 	movi	r3,-1
   1b3c8:	10c00526 	beq	r2,r3,1b3e0 <_close_r+0x44>
   1b3cc:	dfc00217 	ldw	ra,8(sp)
   1b3d0:	dc400117 	ldw	r17,4(sp)
   1b3d4:	dc000017 	ldw	r16,0(sp)
   1b3d8:	dec00304 	addi	sp,sp,12
   1b3dc:	f800283a 	ret
   1b3e0:	80c00017 	ldw	r3,0(r16)
   1b3e4:	183ff926 	beq	r3,zero,1b3cc <__alt_data_end+0xfc01b3cc>
   1b3e8:	88c00015 	stw	r3,0(r17)
   1b3ec:	003ff706 	br	1b3cc <__alt_data_end+0xfc01b3cc>

0001b3f0 <_calloc_r>:
   1b3f0:	defffe04 	addi	sp,sp,-8
   1b3f4:	2805883a 	mov	r2,r5
   1b3f8:	dc000015 	stw	r16,0(sp)
   1b3fc:	300b883a 	mov	r5,r6
   1b400:	2021883a 	mov	r16,r4
   1b404:	1009883a 	mov	r4,r2
   1b408:	dfc00115 	stw	ra,4(sp)
   1b40c:	000cf040 	call	cf04 <__mulsi3>
   1b410:	100b883a 	mov	r5,r2
   1b414:	8009883a 	mov	r4,r16
   1b418:	000e4ac0 	call	e4ac <_malloc_r>
   1b41c:	10002926 	beq	r2,zero,1b4c4 <_calloc_r+0xd4>
   1b420:	11bfff17 	ldw	r6,-4(r2)
   1b424:	1021883a 	mov	r16,r2
   1b428:	00bfff04 	movi	r2,-4
   1b42c:	308c703a 	and	r6,r6,r2
   1b430:	00c00904 	movi	r3,36
   1b434:	308d883a 	add	r6,r6,r2
   1b438:	19801636 	bltu	r3,r6,1b494 <_calloc_r+0xa4>
   1b43c:	008004c4 	movi	r2,19
   1b440:	11800b2e 	bgeu	r2,r6,1b470 <_calloc_r+0x80>
   1b444:	80000015 	stw	zero,0(r16)
   1b448:	80000115 	stw	zero,4(r16)
   1b44c:	008006c4 	movi	r2,27
   1b450:	11801a2e 	bgeu	r2,r6,1b4bc <_calloc_r+0xcc>
   1b454:	80000215 	stw	zero,8(r16)
   1b458:	80000315 	stw	zero,12(r16)
   1b45c:	30c0151e 	bne	r6,r3,1b4b4 <_calloc_r+0xc4>
   1b460:	80000415 	stw	zero,16(r16)
   1b464:	80800604 	addi	r2,r16,24
   1b468:	80000515 	stw	zero,20(r16)
   1b46c:	00000106 	br	1b474 <_calloc_r+0x84>
   1b470:	8005883a 	mov	r2,r16
   1b474:	10000015 	stw	zero,0(r2)
   1b478:	10000115 	stw	zero,4(r2)
   1b47c:	10000215 	stw	zero,8(r2)
   1b480:	8005883a 	mov	r2,r16
   1b484:	dfc00117 	ldw	ra,4(sp)
   1b488:	dc000017 	ldw	r16,0(sp)
   1b48c:	dec00204 	addi	sp,sp,8
   1b490:	f800283a 	ret
   1b494:	000b883a 	mov	r5,zero
   1b498:	8009883a 	mov	r4,r16
   1b49c:	000ee000 	call	ee00 <memset>
   1b4a0:	8005883a 	mov	r2,r16
   1b4a4:	dfc00117 	ldw	ra,4(sp)
   1b4a8:	dc000017 	ldw	r16,0(sp)
   1b4ac:	dec00204 	addi	sp,sp,8
   1b4b0:	f800283a 	ret
   1b4b4:	80800404 	addi	r2,r16,16
   1b4b8:	003fee06 	br	1b474 <__alt_data_end+0xfc01b474>
   1b4bc:	80800204 	addi	r2,r16,8
   1b4c0:	003fec06 	br	1b474 <__alt_data_end+0xfc01b474>
   1b4c4:	0005883a 	mov	r2,zero
   1b4c8:	003fee06 	br	1b484 <__alt_data_end+0xfc01b484>

0001b4cc <_fclose_r>:
   1b4cc:	28003926 	beq	r5,zero,1b5b4 <_fclose_r+0xe8>
   1b4d0:	defffc04 	addi	sp,sp,-16
   1b4d4:	dc400115 	stw	r17,4(sp)
   1b4d8:	dc000015 	stw	r16,0(sp)
   1b4dc:	dfc00315 	stw	ra,12(sp)
   1b4e0:	dc800215 	stw	r18,8(sp)
   1b4e4:	2023883a 	mov	r17,r4
   1b4e8:	2821883a 	mov	r16,r5
   1b4ec:	20000226 	beq	r4,zero,1b4f8 <_fclose_r+0x2c>
   1b4f0:	20800e17 	ldw	r2,56(r4)
   1b4f4:	10002726 	beq	r2,zero,1b594 <_fclose_r+0xc8>
   1b4f8:	8080030f 	ldh	r2,12(r16)
   1b4fc:	1000071e 	bne	r2,zero,1b51c <_fclose_r+0x50>
   1b500:	0005883a 	mov	r2,zero
   1b504:	dfc00317 	ldw	ra,12(sp)
   1b508:	dc800217 	ldw	r18,8(sp)
   1b50c:	dc400117 	ldw	r17,4(sp)
   1b510:	dc000017 	ldw	r16,0(sp)
   1b514:	dec00404 	addi	sp,sp,16
   1b518:	f800283a 	ret
   1b51c:	800b883a 	mov	r5,r16
   1b520:	8809883a 	mov	r4,r17
   1b524:	00156940 	call	15694 <__sflush_r>
   1b528:	1025883a 	mov	r18,r2
   1b52c:	80800b17 	ldw	r2,44(r16)
   1b530:	10000426 	beq	r2,zero,1b544 <_fclose_r+0x78>
   1b534:	81400717 	ldw	r5,28(r16)
   1b538:	8809883a 	mov	r4,r17
   1b53c:	103ee83a 	callr	r2
   1b540:	10001616 	blt	r2,zero,1b59c <_fclose_r+0xd0>
   1b544:	8080030b 	ldhu	r2,12(r16)
   1b548:	1080200c 	andi	r2,r2,128
   1b54c:	1000151e 	bne	r2,zero,1b5a4 <_fclose_r+0xd8>
   1b550:	81400c17 	ldw	r5,48(r16)
   1b554:	28000526 	beq	r5,zero,1b56c <_fclose_r+0xa0>
   1b558:	80801004 	addi	r2,r16,64
   1b55c:	28800226 	beq	r5,r2,1b568 <_fclose_r+0x9c>
   1b560:	8809883a 	mov	r4,r17
   1b564:	0015e100 	call	15e10 <_free_r>
   1b568:	80000c15 	stw	zero,48(r16)
   1b56c:	81401117 	ldw	r5,68(r16)
   1b570:	28000326 	beq	r5,zero,1b580 <_fclose_r+0xb4>
   1b574:	8809883a 	mov	r4,r17
   1b578:	0015e100 	call	15e10 <_free_r>
   1b57c:	80001115 	stw	zero,68(r16)
   1b580:	0015cac0 	call	15cac <__sfp_lock_acquire>
   1b584:	8000030d 	sth	zero,12(r16)
   1b588:	0015cb00 	call	15cb0 <__sfp_lock_release>
   1b58c:	9005883a 	mov	r2,r18
   1b590:	003fdc06 	br	1b504 <__alt_data_end+0xfc01b504>
   1b594:	0015c9c0 	call	15c9c <__sinit>
   1b598:	003fd706 	br	1b4f8 <__alt_data_end+0xfc01b4f8>
   1b59c:	04bfffc4 	movi	r18,-1
   1b5a0:	003fe806 	br	1b544 <__alt_data_end+0xfc01b544>
   1b5a4:	81400417 	ldw	r5,16(r16)
   1b5a8:	8809883a 	mov	r4,r17
   1b5ac:	0015e100 	call	15e10 <_free_r>
   1b5b0:	003fe706 	br	1b550 <__alt_data_end+0xfc01b550>
   1b5b4:	0005883a 	mov	r2,zero
   1b5b8:	f800283a 	ret

0001b5bc <fclose>:
   1b5bc:	008000f4 	movhi	r2,3
   1b5c0:	10b77b04 	addi	r2,r2,-8724
   1b5c4:	200b883a 	mov	r5,r4
   1b5c8:	11000017 	ldw	r4,0(r2)
   1b5cc:	001b4cc1 	jmpi	1b4cc <_fclose_r>

0001b5d0 <__fputwc>:
   1b5d0:	defff804 	addi	sp,sp,-32
   1b5d4:	dcc00415 	stw	r19,16(sp)
   1b5d8:	dc800315 	stw	r18,12(sp)
   1b5dc:	dc000115 	stw	r16,4(sp)
   1b5e0:	dfc00715 	stw	ra,28(sp)
   1b5e4:	dd400615 	stw	r21,24(sp)
   1b5e8:	dd000515 	stw	r20,20(sp)
   1b5ec:	dc400215 	stw	r17,8(sp)
   1b5f0:	2027883a 	mov	r19,r4
   1b5f4:	2825883a 	mov	r18,r5
   1b5f8:	3021883a 	mov	r16,r6
   1b5fc:	00167f80 	call	167f8 <__locale_mb_cur_max>
   1b600:	00c00044 	movi	r3,1
   1b604:	10c03e26 	beq	r2,r3,1b700 <__fputwc+0x130>
   1b608:	81c01704 	addi	r7,r16,92
   1b60c:	900d883a 	mov	r6,r18
   1b610:	d80b883a 	mov	r5,sp
   1b614:	9809883a 	mov	r4,r19
   1b618:	001b9480 	call	1b948 <_wcrtomb_r>
   1b61c:	1029883a 	mov	r20,r2
   1b620:	00bfffc4 	movi	r2,-1
   1b624:	a0802026 	beq	r20,r2,1b6a8 <__fputwc+0xd8>
   1b628:	d9400003 	ldbu	r5,0(sp)
   1b62c:	a0001c26 	beq	r20,zero,1b6a0 <__fputwc+0xd0>
   1b630:	0023883a 	mov	r17,zero
   1b634:	05400284 	movi	r21,10
   1b638:	00000906 	br	1b660 <__fputwc+0x90>
   1b63c:	80800017 	ldw	r2,0(r16)
   1b640:	11400005 	stb	r5,0(r2)
   1b644:	80c00017 	ldw	r3,0(r16)
   1b648:	18c00044 	addi	r3,r3,1
   1b64c:	80c00015 	stw	r3,0(r16)
   1b650:	8c400044 	addi	r17,r17,1
   1b654:	dc45883a 	add	r2,sp,r17
   1b658:	8d00112e 	bgeu	r17,r20,1b6a0 <__fputwc+0xd0>
   1b65c:	11400003 	ldbu	r5,0(r2)
   1b660:	80c00217 	ldw	r3,8(r16)
   1b664:	18ffffc4 	addi	r3,r3,-1
   1b668:	80c00215 	stw	r3,8(r16)
   1b66c:	183ff30e 	bge	r3,zero,1b63c <__alt_data_end+0xfc01b63c>
   1b670:	80800617 	ldw	r2,24(r16)
   1b674:	18801916 	blt	r3,r2,1b6dc <__fputwc+0x10c>
   1b678:	80800017 	ldw	r2,0(r16)
   1b67c:	11400005 	stb	r5,0(r2)
   1b680:	80800017 	ldw	r2,0(r16)
   1b684:	10c00003 	ldbu	r3,0(r2)
   1b688:	10800044 	addi	r2,r2,1
   1b68c:	1d402326 	beq	r3,r21,1b71c <__fputwc+0x14c>
   1b690:	80800015 	stw	r2,0(r16)
   1b694:	8c400044 	addi	r17,r17,1
   1b698:	dc45883a 	add	r2,sp,r17
   1b69c:	8d3fef36 	bltu	r17,r20,1b65c <__alt_data_end+0xfc01b65c>
   1b6a0:	9005883a 	mov	r2,r18
   1b6a4:	00000406 	br	1b6b8 <__fputwc+0xe8>
   1b6a8:	80c0030b 	ldhu	r3,12(r16)
   1b6ac:	a005883a 	mov	r2,r20
   1b6b0:	18c01014 	ori	r3,r3,64
   1b6b4:	80c0030d 	sth	r3,12(r16)
   1b6b8:	dfc00717 	ldw	ra,28(sp)
   1b6bc:	dd400617 	ldw	r21,24(sp)
   1b6c0:	dd000517 	ldw	r20,20(sp)
   1b6c4:	dcc00417 	ldw	r19,16(sp)
   1b6c8:	dc800317 	ldw	r18,12(sp)
   1b6cc:	dc400217 	ldw	r17,8(sp)
   1b6d0:	dc000117 	ldw	r16,4(sp)
   1b6d4:	dec00804 	addi	sp,sp,32
   1b6d8:	f800283a 	ret
   1b6dc:	800d883a 	mov	r6,r16
   1b6e0:	29403fcc 	andi	r5,r5,255
   1b6e4:	9809883a 	mov	r4,r19
   1b6e8:	001b1e40 	call	1b1e4 <__swbuf_r>
   1b6ec:	10bfffe0 	cmpeqi	r2,r2,-1
   1b6f0:	10803fcc 	andi	r2,r2,255
   1b6f4:	103fd626 	beq	r2,zero,1b650 <__alt_data_end+0xfc01b650>
   1b6f8:	00bfffc4 	movi	r2,-1
   1b6fc:	003fee06 	br	1b6b8 <__alt_data_end+0xfc01b6b8>
   1b700:	90ffffc4 	addi	r3,r18,-1
   1b704:	01003f84 	movi	r4,254
   1b708:	20ffbf36 	bltu	r4,r3,1b608 <__alt_data_end+0xfc01b608>
   1b70c:	900b883a 	mov	r5,r18
   1b710:	dc800005 	stb	r18,0(sp)
   1b714:	1029883a 	mov	r20,r2
   1b718:	003fc506 	br	1b630 <__alt_data_end+0xfc01b630>
   1b71c:	800d883a 	mov	r6,r16
   1b720:	a80b883a 	mov	r5,r21
   1b724:	9809883a 	mov	r4,r19
   1b728:	001b1e40 	call	1b1e4 <__swbuf_r>
   1b72c:	10bfffe0 	cmpeqi	r2,r2,-1
   1b730:	003fef06 	br	1b6f0 <__alt_data_end+0xfc01b6f0>

0001b734 <_fputwc_r>:
   1b734:	3080030b 	ldhu	r2,12(r6)
   1b738:	10c8000c 	andi	r3,r2,8192
   1b73c:	1800051e 	bne	r3,zero,1b754 <_fputwc_r+0x20>
   1b740:	30c01917 	ldw	r3,100(r6)
   1b744:	10880014 	ori	r2,r2,8192
   1b748:	3080030d 	sth	r2,12(r6)
   1b74c:	18880014 	ori	r2,r3,8192
   1b750:	30801915 	stw	r2,100(r6)
   1b754:	001b5d01 	jmpi	1b5d0 <__fputwc>

0001b758 <fputwc>:
   1b758:	008000f4 	movhi	r2,3
   1b75c:	defffc04 	addi	sp,sp,-16
   1b760:	10b77b04 	addi	r2,r2,-8724
   1b764:	dc000115 	stw	r16,4(sp)
   1b768:	14000017 	ldw	r16,0(r2)
   1b76c:	dc400215 	stw	r17,8(sp)
   1b770:	dfc00315 	stw	ra,12(sp)
   1b774:	2023883a 	mov	r17,r4
   1b778:	80000226 	beq	r16,zero,1b784 <fputwc+0x2c>
   1b77c:	80800e17 	ldw	r2,56(r16)
   1b780:	10001026 	beq	r2,zero,1b7c4 <fputwc+0x6c>
   1b784:	2880030b 	ldhu	r2,12(r5)
   1b788:	10c8000c 	andi	r3,r2,8192
   1b78c:	1800051e 	bne	r3,zero,1b7a4 <fputwc+0x4c>
   1b790:	28c01917 	ldw	r3,100(r5)
   1b794:	10880014 	ori	r2,r2,8192
   1b798:	2880030d 	sth	r2,12(r5)
   1b79c:	18880014 	ori	r2,r3,8192
   1b7a0:	28801915 	stw	r2,100(r5)
   1b7a4:	280d883a 	mov	r6,r5
   1b7a8:	8009883a 	mov	r4,r16
   1b7ac:	880b883a 	mov	r5,r17
   1b7b0:	dfc00317 	ldw	ra,12(sp)
   1b7b4:	dc400217 	ldw	r17,8(sp)
   1b7b8:	dc000117 	ldw	r16,4(sp)
   1b7bc:	dec00404 	addi	sp,sp,16
   1b7c0:	001b5d01 	jmpi	1b5d0 <__fputwc>
   1b7c4:	8009883a 	mov	r4,r16
   1b7c8:	d9400015 	stw	r5,0(sp)
   1b7cc:	0015c9c0 	call	15c9c <__sinit>
   1b7d0:	d9400017 	ldw	r5,0(sp)
   1b7d4:	003feb06 	br	1b784 <__alt_data_end+0xfc01b784>

0001b7d8 <_fstat_r>:
   1b7d8:	defffd04 	addi	sp,sp,-12
   1b7dc:	2805883a 	mov	r2,r5
   1b7e0:	dc000015 	stw	r16,0(sp)
   1b7e4:	040000f4 	movhi	r16,3
   1b7e8:	dc400115 	stw	r17,4(sp)
   1b7ec:	84040f04 	addi	r16,r16,4156
   1b7f0:	2023883a 	mov	r17,r4
   1b7f4:	300b883a 	mov	r5,r6
   1b7f8:	1009883a 	mov	r4,r2
   1b7fc:	dfc00215 	stw	ra,8(sp)
   1b800:	80000015 	stw	zero,0(r16)
   1b804:	001f0e00 	call	1f0e0 <fstat>
   1b808:	00ffffc4 	movi	r3,-1
   1b80c:	10c00526 	beq	r2,r3,1b824 <_fstat_r+0x4c>
   1b810:	dfc00217 	ldw	ra,8(sp)
   1b814:	dc400117 	ldw	r17,4(sp)
   1b818:	dc000017 	ldw	r16,0(sp)
   1b81c:	dec00304 	addi	sp,sp,12
   1b820:	f800283a 	ret
   1b824:	80c00017 	ldw	r3,0(r16)
   1b828:	183ff926 	beq	r3,zero,1b810 <__alt_data_end+0xfc01b810>
   1b82c:	88c00015 	stw	r3,0(r17)
   1b830:	003ff706 	br	1b810 <__alt_data_end+0xfc01b810>

0001b834 <_isatty_r>:
   1b834:	defffd04 	addi	sp,sp,-12
   1b838:	dc000015 	stw	r16,0(sp)
   1b83c:	040000f4 	movhi	r16,3
   1b840:	dc400115 	stw	r17,4(sp)
   1b844:	84040f04 	addi	r16,r16,4156
   1b848:	2023883a 	mov	r17,r4
   1b84c:	2809883a 	mov	r4,r5
   1b850:	dfc00215 	stw	ra,8(sp)
   1b854:	80000015 	stw	zero,0(r16)
   1b858:	001f1f40 	call	1f1f4 <isatty>
   1b85c:	00ffffc4 	movi	r3,-1
   1b860:	10c00526 	beq	r2,r3,1b878 <_isatty_r+0x44>
   1b864:	dfc00217 	ldw	ra,8(sp)
   1b868:	dc400117 	ldw	r17,4(sp)
   1b86c:	dc000017 	ldw	r16,0(sp)
   1b870:	dec00304 	addi	sp,sp,12
   1b874:	f800283a 	ret
   1b878:	80c00017 	ldw	r3,0(r16)
   1b87c:	183ff926 	beq	r3,zero,1b864 <__alt_data_end+0xfc01b864>
   1b880:	88c00015 	stw	r3,0(r17)
   1b884:	003ff706 	br	1b864 <__alt_data_end+0xfc01b864>

0001b888 <_lseek_r>:
   1b888:	defffd04 	addi	sp,sp,-12
   1b88c:	2805883a 	mov	r2,r5
   1b890:	dc000015 	stw	r16,0(sp)
   1b894:	040000f4 	movhi	r16,3
   1b898:	dc400115 	stw	r17,4(sp)
   1b89c:	300b883a 	mov	r5,r6
   1b8a0:	84040f04 	addi	r16,r16,4156
   1b8a4:	2023883a 	mov	r17,r4
   1b8a8:	380d883a 	mov	r6,r7
   1b8ac:	1009883a 	mov	r4,r2
   1b8b0:	dfc00215 	stw	ra,8(sp)
   1b8b4:	80000015 	stw	zero,0(r16)
   1b8b8:	001f5340 	call	1f534 <lseek>
   1b8bc:	00ffffc4 	movi	r3,-1
   1b8c0:	10c00526 	beq	r2,r3,1b8d8 <_lseek_r+0x50>
   1b8c4:	dfc00217 	ldw	ra,8(sp)
   1b8c8:	dc400117 	ldw	r17,4(sp)
   1b8cc:	dc000017 	ldw	r16,0(sp)
   1b8d0:	dec00304 	addi	sp,sp,12
   1b8d4:	f800283a 	ret
   1b8d8:	80c00017 	ldw	r3,0(r16)
   1b8dc:	183ff926 	beq	r3,zero,1b8c4 <__alt_data_end+0xfc01b8c4>
   1b8e0:	88c00015 	stw	r3,0(r17)
   1b8e4:	003ff706 	br	1b8c4 <__alt_data_end+0xfc01b8c4>

0001b8e8 <_read_r>:
   1b8e8:	defffd04 	addi	sp,sp,-12
   1b8ec:	2805883a 	mov	r2,r5
   1b8f0:	dc000015 	stw	r16,0(sp)
   1b8f4:	040000f4 	movhi	r16,3
   1b8f8:	dc400115 	stw	r17,4(sp)
   1b8fc:	300b883a 	mov	r5,r6
   1b900:	84040f04 	addi	r16,r16,4156
   1b904:	2023883a 	mov	r17,r4
   1b908:	380d883a 	mov	r6,r7
   1b90c:	1009883a 	mov	r4,r2
   1b910:	dfc00215 	stw	ra,8(sp)
   1b914:	80000015 	stw	zero,0(r16)
   1b918:	001f7100 	call	1f710 <read>
   1b91c:	00ffffc4 	movi	r3,-1
   1b920:	10c00526 	beq	r2,r3,1b938 <_read_r+0x50>
   1b924:	dfc00217 	ldw	ra,8(sp)
   1b928:	dc400117 	ldw	r17,4(sp)
   1b92c:	dc000017 	ldw	r16,0(sp)
   1b930:	dec00304 	addi	sp,sp,12
   1b934:	f800283a 	ret
   1b938:	80c00017 	ldw	r3,0(r16)
   1b93c:	183ff926 	beq	r3,zero,1b924 <__alt_data_end+0xfc01b924>
   1b940:	88c00015 	stw	r3,0(r17)
   1b944:	003ff706 	br	1b924 <__alt_data_end+0xfc01b924>

0001b948 <_wcrtomb_r>:
   1b948:	defff604 	addi	sp,sp,-40
   1b94c:	008000f4 	movhi	r2,3
   1b950:	dc800815 	stw	r18,32(sp)
   1b954:	dc400715 	stw	r17,28(sp)
   1b958:	dc000615 	stw	r16,24(sp)
   1b95c:	10b77f04 	addi	r2,r2,-8708
   1b960:	dfc00915 	stw	ra,36(sp)
   1b964:	2021883a 	mov	r16,r4
   1b968:	3823883a 	mov	r17,r7
   1b96c:	14800017 	ldw	r18,0(r2)
   1b970:	28001426 	beq	r5,zero,1b9c4 <_wcrtomb_r+0x7c>
   1b974:	d9400415 	stw	r5,16(sp)
   1b978:	d9800515 	stw	r6,20(sp)
   1b97c:	00167ec0 	call	167ec <__locale_charset>
   1b980:	d9800517 	ldw	r6,20(sp)
   1b984:	d9400417 	ldw	r5,16(sp)
   1b988:	100f883a 	mov	r7,r2
   1b98c:	dc400015 	stw	r17,0(sp)
   1b990:	8009883a 	mov	r4,r16
   1b994:	903ee83a 	callr	r18
   1b998:	00ffffc4 	movi	r3,-1
   1b99c:	10c0031e 	bne	r2,r3,1b9ac <_wcrtomb_r+0x64>
   1b9a0:	88000015 	stw	zero,0(r17)
   1b9a4:	00c02284 	movi	r3,138
   1b9a8:	80c00015 	stw	r3,0(r16)
   1b9ac:	dfc00917 	ldw	ra,36(sp)
   1b9b0:	dc800817 	ldw	r18,32(sp)
   1b9b4:	dc400717 	ldw	r17,28(sp)
   1b9b8:	dc000617 	ldw	r16,24(sp)
   1b9bc:	dec00a04 	addi	sp,sp,40
   1b9c0:	f800283a 	ret
   1b9c4:	00167ec0 	call	167ec <__locale_charset>
   1b9c8:	100f883a 	mov	r7,r2
   1b9cc:	dc400015 	stw	r17,0(sp)
   1b9d0:	000d883a 	mov	r6,zero
   1b9d4:	d9400104 	addi	r5,sp,4
   1b9d8:	8009883a 	mov	r4,r16
   1b9dc:	903ee83a 	callr	r18
   1b9e0:	003fed06 	br	1b998 <__alt_data_end+0xfc01b998>

0001b9e4 <wcrtomb>:
   1b9e4:	defff604 	addi	sp,sp,-40
   1b9e8:	008000f4 	movhi	r2,3
   1b9ec:	dc800615 	stw	r18,24(sp)
   1b9f0:	dc400515 	stw	r17,20(sp)
   1b9f4:	10b77b04 	addi	r2,r2,-8724
   1b9f8:	dfc00915 	stw	ra,36(sp)
   1b9fc:	dd000815 	stw	r20,32(sp)
   1ba00:	dcc00715 	stw	r19,28(sp)
   1ba04:	dc000415 	stw	r16,16(sp)
   1ba08:	3025883a 	mov	r18,r6
   1ba0c:	14400017 	ldw	r17,0(r2)
   1ba10:	20001926 	beq	r4,zero,1ba78 <wcrtomb+0x94>
   1ba14:	008000f4 	movhi	r2,3
   1ba18:	10b77f04 	addi	r2,r2,-8708
   1ba1c:	15000017 	ldw	r20,0(r2)
   1ba20:	2021883a 	mov	r16,r4
   1ba24:	2827883a 	mov	r19,r5
   1ba28:	00167ec0 	call	167ec <__locale_charset>
   1ba2c:	100f883a 	mov	r7,r2
   1ba30:	dc800015 	stw	r18,0(sp)
   1ba34:	980d883a 	mov	r6,r19
   1ba38:	800b883a 	mov	r5,r16
   1ba3c:	8809883a 	mov	r4,r17
   1ba40:	a03ee83a 	callr	r20
   1ba44:	00ffffc4 	movi	r3,-1
   1ba48:	10c0031e 	bne	r2,r3,1ba58 <wcrtomb+0x74>
   1ba4c:	90000015 	stw	zero,0(r18)
   1ba50:	00c02284 	movi	r3,138
   1ba54:	88c00015 	stw	r3,0(r17)
   1ba58:	dfc00917 	ldw	ra,36(sp)
   1ba5c:	dd000817 	ldw	r20,32(sp)
   1ba60:	dcc00717 	ldw	r19,28(sp)
   1ba64:	dc800617 	ldw	r18,24(sp)
   1ba68:	dc400517 	ldw	r17,20(sp)
   1ba6c:	dc000417 	ldw	r16,16(sp)
   1ba70:	dec00a04 	addi	sp,sp,40
   1ba74:	f800283a 	ret
   1ba78:	008000f4 	movhi	r2,3
   1ba7c:	10b77f04 	addi	r2,r2,-8708
   1ba80:	14000017 	ldw	r16,0(r2)
   1ba84:	00167ec0 	call	167ec <__locale_charset>
   1ba88:	100f883a 	mov	r7,r2
   1ba8c:	dc800015 	stw	r18,0(sp)
   1ba90:	000d883a 	mov	r6,zero
   1ba94:	d9400104 	addi	r5,sp,4
   1ba98:	8809883a 	mov	r4,r17
   1ba9c:	803ee83a 	callr	r16
   1baa0:	003fe806 	br	1ba44 <__alt_data_end+0xfc01ba44>

0001baa4 <__ascii_wctomb>:
   1baa4:	28000526 	beq	r5,zero,1babc <__ascii_wctomb+0x18>
   1baa8:	00803fc4 	movi	r2,255
   1baac:	11800536 	bltu	r2,r6,1bac4 <__ascii_wctomb+0x20>
   1bab0:	29800005 	stb	r6,0(r5)
   1bab4:	00800044 	movi	r2,1
   1bab8:	f800283a 	ret
   1babc:	0005883a 	mov	r2,zero
   1bac0:	f800283a 	ret
   1bac4:	00802284 	movi	r2,138
   1bac8:	20800015 	stw	r2,0(r4)
   1bacc:	00bfffc4 	movi	r2,-1
   1bad0:	f800283a 	ret

0001bad4 <_wctomb_r>:
   1bad4:	008000f4 	movhi	r2,3
   1bad8:	defff904 	addi	sp,sp,-28
   1badc:	10b77f04 	addi	r2,r2,-8708
   1bae0:	dfc00615 	stw	ra,24(sp)
   1bae4:	dc400515 	stw	r17,20(sp)
   1bae8:	dc000415 	stw	r16,16(sp)
   1baec:	3823883a 	mov	r17,r7
   1baf0:	14000017 	ldw	r16,0(r2)
   1baf4:	d9000115 	stw	r4,4(sp)
   1baf8:	d9400215 	stw	r5,8(sp)
   1bafc:	d9800315 	stw	r6,12(sp)
   1bb00:	00167ec0 	call	167ec <__locale_charset>
   1bb04:	d9800317 	ldw	r6,12(sp)
   1bb08:	d9400217 	ldw	r5,8(sp)
   1bb0c:	d9000117 	ldw	r4,4(sp)
   1bb10:	100f883a 	mov	r7,r2
   1bb14:	dc400015 	stw	r17,0(sp)
   1bb18:	803ee83a 	callr	r16
   1bb1c:	dfc00617 	ldw	ra,24(sp)
   1bb20:	dc400517 	ldw	r17,20(sp)
   1bb24:	dc000417 	ldw	r16,16(sp)
   1bb28:	dec00704 	addi	sp,sp,28
   1bb2c:	f800283a 	ret

0001bb30 <__udivdi3>:
   1bb30:	defff404 	addi	sp,sp,-48
   1bb34:	dcc00515 	stw	r19,20(sp)
   1bb38:	dc000215 	stw	r16,8(sp)
   1bb3c:	dfc00b15 	stw	ra,44(sp)
   1bb40:	df000a15 	stw	fp,40(sp)
   1bb44:	ddc00915 	stw	r23,36(sp)
   1bb48:	dd800815 	stw	r22,32(sp)
   1bb4c:	dd400715 	stw	r21,28(sp)
   1bb50:	dd000615 	stw	r20,24(sp)
   1bb54:	dc800415 	stw	r18,16(sp)
   1bb58:	dc400315 	stw	r17,12(sp)
   1bb5c:	2027883a 	mov	r19,r4
   1bb60:	2821883a 	mov	r16,r5
   1bb64:	3800461e 	bne	r7,zero,1bc80 <__udivdi3+0x150>
   1bb68:	3023883a 	mov	r17,r6
   1bb6c:	2025883a 	mov	r18,r4
   1bb70:	2980572e 	bgeu	r5,r6,1bcd0 <__udivdi3+0x1a0>
   1bb74:	00bfffd4 	movui	r2,65535
   1bb78:	282d883a 	mov	r22,r5
   1bb7c:	1180b236 	bltu	r2,r6,1be48 <__udivdi3+0x318>
   1bb80:	00803fc4 	movi	r2,255
   1bb84:	1185803a 	cmpltu	r2,r2,r6
   1bb88:	100490fa 	slli	r2,r2,3
   1bb8c:	3086d83a 	srl	r3,r6,r2
   1bb90:	010000f4 	movhi	r4,3
   1bb94:	212a3804 	addi	r4,r4,-22304
   1bb98:	20c7883a 	add	r3,r4,r3
   1bb9c:	18c00003 	ldbu	r3,0(r3)
   1bba0:	1885883a 	add	r2,r3,r2
   1bba4:	00c00804 	movi	r3,32
   1bba8:	1887c83a 	sub	r3,r3,r2
   1bbac:	18000526 	beq	r3,zero,1bbc4 <__udivdi3+0x94>
   1bbb0:	80e0983a 	sll	r16,r16,r3
   1bbb4:	9884d83a 	srl	r2,r19,r2
   1bbb8:	30e2983a 	sll	r17,r6,r3
   1bbbc:	98e4983a 	sll	r18,r19,r3
   1bbc0:	142cb03a 	or	r22,r2,r16
   1bbc4:	882ad43a 	srli	r21,r17,16
   1bbc8:	b009883a 	mov	r4,r22
   1bbcc:	8d3fffcc 	andi	r20,r17,65535
   1bbd0:	a80b883a 	mov	r5,r21
   1bbd4:	000ceac0 	call	ceac <__umodsi3>
   1bbd8:	b009883a 	mov	r4,r22
   1bbdc:	a80b883a 	mov	r5,r21
   1bbe0:	1027883a 	mov	r19,r2
   1bbe4:	000ce480 	call	ce48 <__udivsi3>
   1bbe8:	100b883a 	mov	r5,r2
   1bbec:	a009883a 	mov	r4,r20
   1bbf0:	102d883a 	mov	r22,r2
   1bbf4:	000cf040 	call	cf04 <__mulsi3>
   1bbf8:	9826943a 	slli	r19,r19,16
   1bbfc:	9006d43a 	srli	r3,r18,16
   1bc00:	1cc6b03a 	or	r3,r3,r19
   1bc04:	1880052e 	bgeu	r3,r2,1bc1c <__udivdi3+0xec>
   1bc08:	1c47883a 	add	r3,r3,r17
   1bc0c:	b13fffc4 	addi	r4,r22,-1
   1bc10:	1c400136 	bltu	r3,r17,1bc18 <__udivdi3+0xe8>
   1bc14:	18814236 	bltu	r3,r2,1c120 <__udivdi3+0x5f0>
   1bc18:	202d883a 	mov	r22,r4
   1bc1c:	18a1c83a 	sub	r16,r3,r2
   1bc20:	8009883a 	mov	r4,r16
   1bc24:	a80b883a 	mov	r5,r21
   1bc28:	000ceac0 	call	ceac <__umodsi3>
   1bc2c:	1027883a 	mov	r19,r2
   1bc30:	8009883a 	mov	r4,r16
   1bc34:	a80b883a 	mov	r5,r21
   1bc38:	9826943a 	slli	r19,r19,16
   1bc3c:	000ce480 	call	ce48 <__udivsi3>
   1bc40:	100b883a 	mov	r5,r2
   1bc44:	a009883a 	mov	r4,r20
   1bc48:	94bfffcc 	andi	r18,r18,65535
   1bc4c:	1021883a 	mov	r16,r2
   1bc50:	94e4b03a 	or	r18,r18,r19
   1bc54:	000cf040 	call	cf04 <__mulsi3>
   1bc58:	9080052e 	bgeu	r18,r2,1bc70 <__udivdi3+0x140>
   1bc5c:	8ca5883a 	add	r18,r17,r18
   1bc60:	80ffffc4 	addi	r3,r16,-1
   1bc64:	94410c36 	bltu	r18,r17,1c098 <__udivdi3+0x568>
   1bc68:	90810b2e 	bgeu	r18,r2,1c098 <__udivdi3+0x568>
   1bc6c:	843fff84 	addi	r16,r16,-2
   1bc70:	b004943a 	slli	r2,r22,16
   1bc74:	0007883a 	mov	r3,zero
   1bc78:	1404b03a 	or	r2,r2,r16
   1bc7c:	00005e06 	br	1bdf8 <__udivdi3+0x2c8>
   1bc80:	29c05b36 	bltu	r5,r7,1bdf0 <__udivdi3+0x2c0>
   1bc84:	00bfffd4 	movui	r2,65535
   1bc88:	11c0672e 	bgeu	r2,r7,1be28 <__udivdi3+0x2f8>
   1bc8c:	00804034 	movhi	r2,256
   1bc90:	10bfffc4 	addi	r2,r2,-1
   1bc94:	11c10a36 	bltu	r2,r7,1c0c0 <__udivdi3+0x590>
   1bc98:	00800404 	movi	r2,16
   1bc9c:	3886d83a 	srl	r3,r7,r2
   1bca0:	010000f4 	movhi	r4,3
   1bca4:	212a3804 	addi	r4,r4,-22304
   1bca8:	20c7883a 	add	r3,r4,r3
   1bcac:	18c00003 	ldbu	r3,0(r3)
   1bcb0:	05c00804 	movi	r23,32
   1bcb4:	1885883a 	add	r2,r3,r2
   1bcb8:	b8afc83a 	sub	r23,r23,r2
   1bcbc:	b800671e 	bne	r23,zero,1be5c <__udivdi3+0x32c>
   1bcc0:	3c010536 	bltu	r7,r16,1c0d8 <__udivdi3+0x5a8>
   1bcc4:	9985403a 	cmpgeu	r2,r19,r6
   1bcc8:	0007883a 	mov	r3,zero
   1bccc:	00004a06 	br	1bdf8 <__udivdi3+0x2c8>
   1bcd0:	3000041e 	bne	r6,zero,1bce4 <__udivdi3+0x1b4>
   1bcd4:	000b883a 	mov	r5,zero
   1bcd8:	01000044 	movi	r4,1
   1bcdc:	000ce480 	call	ce48 <__udivsi3>
   1bce0:	1023883a 	mov	r17,r2
   1bce4:	00bfffd4 	movui	r2,65535
   1bce8:	1440532e 	bgeu	r2,r17,1be38 <__udivdi3+0x308>
   1bcec:	00804034 	movhi	r2,256
   1bcf0:	10bfffc4 	addi	r2,r2,-1
   1bcf4:	1440f436 	bltu	r2,r17,1c0c8 <__udivdi3+0x598>
   1bcf8:	00800404 	movi	r2,16
   1bcfc:	8886d83a 	srl	r3,r17,r2
   1bd00:	010000f4 	movhi	r4,3
   1bd04:	212a3804 	addi	r4,r4,-22304
   1bd08:	20c7883a 	add	r3,r4,r3
   1bd0c:	18c00003 	ldbu	r3,0(r3)
   1bd10:	1885883a 	add	r2,r3,r2
   1bd14:	00c00804 	movi	r3,32
   1bd18:	1887c83a 	sub	r3,r3,r2
   1bd1c:	1800a51e 	bne	r3,zero,1bfb4 <__udivdi3+0x484>
   1bd20:	882ad43a 	srli	r21,r17,16
   1bd24:	8461c83a 	sub	r16,r16,r17
   1bd28:	8d3fffcc 	andi	r20,r17,65535
   1bd2c:	00c00044 	movi	r3,1
   1bd30:	a80b883a 	mov	r5,r21
   1bd34:	8009883a 	mov	r4,r16
   1bd38:	d8c00115 	stw	r3,4(sp)
   1bd3c:	000ceac0 	call	ceac <__umodsi3>
   1bd40:	a80b883a 	mov	r5,r21
   1bd44:	8009883a 	mov	r4,r16
   1bd48:	1027883a 	mov	r19,r2
   1bd4c:	000ce480 	call	ce48 <__udivsi3>
   1bd50:	a00b883a 	mov	r5,r20
   1bd54:	1009883a 	mov	r4,r2
   1bd58:	102d883a 	mov	r22,r2
   1bd5c:	000cf040 	call	cf04 <__mulsi3>
   1bd60:	9826943a 	slli	r19,r19,16
   1bd64:	900ed43a 	srli	r7,r18,16
   1bd68:	d8c00117 	ldw	r3,4(sp)
   1bd6c:	3cceb03a 	or	r7,r7,r19
   1bd70:	3880052e 	bgeu	r7,r2,1bd88 <__udivdi3+0x258>
   1bd74:	3c4f883a 	add	r7,r7,r17
   1bd78:	b13fffc4 	addi	r4,r22,-1
   1bd7c:	3c400136 	bltu	r7,r17,1bd84 <__udivdi3+0x254>
   1bd80:	3880e436 	bltu	r7,r2,1c114 <__udivdi3+0x5e4>
   1bd84:	202d883a 	mov	r22,r4
   1bd88:	38a1c83a 	sub	r16,r7,r2
   1bd8c:	8009883a 	mov	r4,r16
   1bd90:	a80b883a 	mov	r5,r21
   1bd94:	d8c00115 	stw	r3,4(sp)
   1bd98:	000ceac0 	call	ceac <__umodsi3>
   1bd9c:	1027883a 	mov	r19,r2
   1bda0:	8009883a 	mov	r4,r16
   1bda4:	a80b883a 	mov	r5,r21
   1bda8:	9826943a 	slli	r19,r19,16
   1bdac:	000ce480 	call	ce48 <__udivsi3>
   1bdb0:	a00b883a 	mov	r5,r20
   1bdb4:	1009883a 	mov	r4,r2
   1bdb8:	94bfffcc 	andi	r18,r18,65535
   1bdbc:	1021883a 	mov	r16,r2
   1bdc0:	94e4b03a 	or	r18,r18,r19
   1bdc4:	000cf040 	call	cf04 <__mulsi3>
   1bdc8:	d8c00117 	ldw	r3,4(sp)
   1bdcc:	9080052e 	bgeu	r18,r2,1bde4 <__udivdi3+0x2b4>
   1bdd0:	8ca5883a 	add	r18,r17,r18
   1bdd4:	813fffc4 	addi	r4,r16,-1
   1bdd8:	9440ad36 	bltu	r18,r17,1c090 <__udivdi3+0x560>
   1bddc:	9080ac2e 	bgeu	r18,r2,1c090 <__udivdi3+0x560>
   1bde0:	843fff84 	addi	r16,r16,-2
   1bde4:	b004943a 	slli	r2,r22,16
   1bde8:	1404b03a 	or	r2,r2,r16
   1bdec:	00000206 	br	1bdf8 <__udivdi3+0x2c8>
   1bdf0:	0007883a 	mov	r3,zero
   1bdf4:	0005883a 	mov	r2,zero
   1bdf8:	dfc00b17 	ldw	ra,44(sp)
   1bdfc:	df000a17 	ldw	fp,40(sp)
   1be00:	ddc00917 	ldw	r23,36(sp)
   1be04:	dd800817 	ldw	r22,32(sp)
   1be08:	dd400717 	ldw	r21,28(sp)
   1be0c:	dd000617 	ldw	r20,24(sp)
   1be10:	dcc00517 	ldw	r19,20(sp)
   1be14:	dc800417 	ldw	r18,16(sp)
   1be18:	dc400317 	ldw	r17,12(sp)
   1be1c:	dc000217 	ldw	r16,8(sp)
   1be20:	dec00c04 	addi	sp,sp,48
   1be24:	f800283a 	ret
   1be28:	00803fc4 	movi	r2,255
   1be2c:	11c5803a 	cmpltu	r2,r2,r7
   1be30:	100490fa 	slli	r2,r2,3
   1be34:	003f9906 	br	1bc9c <__alt_data_end+0xfc01bc9c>
   1be38:	00803fc4 	movi	r2,255
   1be3c:	1445803a 	cmpltu	r2,r2,r17
   1be40:	100490fa 	slli	r2,r2,3
   1be44:	003fad06 	br	1bcfc <__alt_data_end+0xfc01bcfc>
   1be48:	00804034 	movhi	r2,256
   1be4c:	10bfffc4 	addi	r2,r2,-1
   1be50:	11809f36 	bltu	r2,r6,1c0d0 <__udivdi3+0x5a0>
   1be54:	00800404 	movi	r2,16
   1be58:	003f4c06 	br	1bb8c <__alt_data_end+0xfc01bb8c>
   1be5c:	3dce983a 	sll	r7,r7,r23
   1be60:	30b8d83a 	srl	fp,r6,r2
   1be64:	80a2d83a 	srl	r17,r16,r2
   1be68:	35cc983a 	sll	r6,r6,r23
   1be6c:	3f38b03a 	or	fp,r7,fp
   1be70:	e024d43a 	srli	r18,fp,16
   1be74:	9884d83a 	srl	r2,r19,r2
   1be78:	85e0983a 	sll	r16,r16,r23
   1be7c:	8809883a 	mov	r4,r17
   1be80:	900b883a 	mov	r5,r18
   1be84:	d9800015 	stw	r6,0(sp)
   1be88:	1420b03a 	or	r16,r2,r16
   1be8c:	000ceac0 	call	ceac <__umodsi3>
   1be90:	900b883a 	mov	r5,r18
   1be94:	8809883a 	mov	r4,r17
   1be98:	1029883a 	mov	r20,r2
   1be9c:	e5bfffcc 	andi	r22,fp,65535
   1bea0:	000ce480 	call	ce48 <__udivsi3>
   1bea4:	100b883a 	mov	r5,r2
   1bea8:	b009883a 	mov	r4,r22
   1beac:	102b883a 	mov	r21,r2
   1beb0:	000cf040 	call	cf04 <__mulsi3>
   1beb4:	a028943a 	slli	r20,r20,16
   1beb8:	8006d43a 	srli	r3,r16,16
   1bebc:	1d06b03a 	or	r3,r3,r20
   1bec0:	1880042e 	bgeu	r3,r2,1bed4 <__udivdi3+0x3a4>
   1bec4:	1f07883a 	add	r3,r3,fp
   1bec8:	a93fffc4 	addi	r4,r21,-1
   1becc:	1f00892e 	bgeu	r3,fp,1c0f4 <__udivdi3+0x5c4>
   1bed0:	202b883a 	mov	r21,r4
   1bed4:	18a3c83a 	sub	r17,r3,r2
   1bed8:	8809883a 	mov	r4,r17
   1bedc:	900b883a 	mov	r5,r18
   1bee0:	000ceac0 	call	ceac <__umodsi3>
   1bee4:	1029883a 	mov	r20,r2
   1bee8:	8809883a 	mov	r4,r17
   1beec:	900b883a 	mov	r5,r18
   1bef0:	a028943a 	slli	r20,r20,16
   1bef4:	000ce480 	call	ce48 <__udivsi3>
   1bef8:	100b883a 	mov	r5,r2
   1befc:	b009883a 	mov	r4,r22
   1bf00:	843fffcc 	andi	r16,r16,65535
   1bf04:	1023883a 	mov	r17,r2
   1bf08:	8520b03a 	or	r16,r16,r20
   1bf0c:	000cf040 	call	cf04 <__mulsi3>
   1bf10:	8080042e 	bgeu	r16,r2,1bf24 <__udivdi3+0x3f4>
   1bf14:	8721883a 	add	r16,r16,fp
   1bf18:	88ffffc4 	addi	r3,r17,-1
   1bf1c:	8700712e 	bgeu	r16,fp,1c0e4 <__udivdi3+0x5b4>
   1bf20:	1823883a 	mov	r17,r3
   1bf24:	a80e943a 	slli	r7,r21,16
   1bf28:	d8c00017 	ldw	r3,0(sp)
   1bf2c:	80a1c83a 	sub	r16,r16,r2
   1bf30:	3c64b03a 	or	r18,r7,r17
   1bf34:	1d3fffcc 	andi	r20,r3,65535
   1bf38:	9022d43a 	srli	r17,r18,16
   1bf3c:	95bfffcc 	andi	r22,r18,65535
   1bf40:	a00b883a 	mov	r5,r20
   1bf44:	b009883a 	mov	r4,r22
   1bf48:	182ad43a 	srli	r21,r3,16
   1bf4c:	000cf040 	call	cf04 <__mulsi3>
   1bf50:	a00b883a 	mov	r5,r20
   1bf54:	8809883a 	mov	r4,r17
   1bf58:	1039883a 	mov	fp,r2
   1bf5c:	000cf040 	call	cf04 <__mulsi3>
   1bf60:	8809883a 	mov	r4,r17
   1bf64:	a80b883a 	mov	r5,r21
   1bf68:	1029883a 	mov	r20,r2
   1bf6c:	000cf040 	call	cf04 <__mulsi3>
   1bf70:	a80b883a 	mov	r5,r21
   1bf74:	b009883a 	mov	r4,r22
   1bf78:	1023883a 	mov	r17,r2
   1bf7c:	000cf040 	call	cf04 <__mulsi3>
   1bf80:	e006d43a 	srli	r3,fp,16
   1bf84:	1505883a 	add	r2,r2,r20
   1bf88:	1887883a 	add	r3,r3,r2
   1bf8c:	1d00022e 	bgeu	r3,r20,1bf98 <__udivdi3+0x468>
   1bf90:	00800074 	movhi	r2,1
   1bf94:	88a3883a 	add	r17,r17,r2
   1bf98:	1804d43a 	srli	r2,r3,16
   1bf9c:	1463883a 	add	r17,r2,r17
   1bfa0:	84404436 	bltu	r16,r17,1c0b4 <__udivdi3+0x584>
   1bfa4:	84403e26 	beq	r16,r17,1c0a0 <__udivdi3+0x570>
   1bfa8:	9005883a 	mov	r2,r18
   1bfac:	0007883a 	mov	r3,zero
   1bfb0:	003f9106 	br	1bdf8 <__alt_data_end+0xfc01bdf8>
   1bfb4:	88e2983a 	sll	r17,r17,r3
   1bfb8:	80aed83a 	srl	r23,r16,r2
   1bfbc:	80e0983a 	sll	r16,r16,r3
   1bfc0:	882ad43a 	srli	r21,r17,16
   1bfc4:	9884d83a 	srl	r2,r19,r2
   1bfc8:	b809883a 	mov	r4,r23
   1bfcc:	a80b883a 	mov	r5,r21
   1bfd0:	98e4983a 	sll	r18,r19,r3
   1bfd4:	142cb03a 	or	r22,r2,r16
   1bfd8:	000ceac0 	call	ceac <__umodsi3>
   1bfdc:	b809883a 	mov	r4,r23
   1bfe0:	a80b883a 	mov	r5,r21
   1bfe4:	1027883a 	mov	r19,r2
   1bfe8:	8d3fffcc 	andi	r20,r17,65535
   1bfec:	000ce480 	call	ce48 <__udivsi3>
   1bff0:	a009883a 	mov	r4,r20
   1bff4:	100b883a 	mov	r5,r2
   1bff8:	102f883a 	mov	r23,r2
   1bffc:	000cf040 	call	cf04 <__mulsi3>
   1c000:	9826943a 	slli	r19,r19,16
   1c004:	b008d43a 	srli	r4,r22,16
   1c008:	24c8b03a 	or	r4,r4,r19
   1c00c:	2080062e 	bgeu	r4,r2,1c028 <__udivdi3+0x4f8>
   1c010:	2449883a 	add	r4,r4,r17
   1c014:	b8ffffc4 	addi	r3,r23,-1
   1c018:	24403c36 	bltu	r4,r17,1c10c <__udivdi3+0x5dc>
   1c01c:	20803b2e 	bgeu	r4,r2,1c10c <__udivdi3+0x5dc>
   1c020:	bdffff84 	addi	r23,r23,-2
   1c024:	2449883a 	add	r4,r4,r17
   1c028:	20a1c83a 	sub	r16,r4,r2
   1c02c:	a80b883a 	mov	r5,r21
   1c030:	8009883a 	mov	r4,r16
   1c034:	000ceac0 	call	ceac <__umodsi3>
   1c038:	a80b883a 	mov	r5,r21
   1c03c:	8009883a 	mov	r4,r16
   1c040:	1027883a 	mov	r19,r2
   1c044:	000ce480 	call	ce48 <__udivsi3>
   1c048:	a009883a 	mov	r4,r20
   1c04c:	100b883a 	mov	r5,r2
   1c050:	9826943a 	slli	r19,r19,16
   1c054:	1039883a 	mov	fp,r2
   1c058:	000cf040 	call	cf04 <__mulsi3>
   1c05c:	b13fffcc 	andi	r4,r22,65535
   1c060:	24c8b03a 	or	r4,r4,r19
   1c064:	2080062e 	bgeu	r4,r2,1c080 <__udivdi3+0x550>
   1c068:	2449883a 	add	r4,r4,r17
   1c06c:	e0ffffc4 	addi	r3,fp,-1
   1c070:	24402436 	bltu	r4,r17,1c104 <__udivdi3+0x5d4>
   1c074:	2080232e 	bgeu	r4,r2,1c104 <__udivdi3+0x5d4>
   1c078:	e73fff84 	addi	fp,fp,-2
   1c07c:	2449883a 	add	r4,r4,r17
   1c080:	b82e943a 	slli	r23,r23,16
   1c084:	20a1c83a 	sub	r16,r4,r2
   1c088:	bf06b03a 	or	r3,r23,fp
   1c08c:	003f2806 	br	1bd30 <__alt_data_end+0xfc01bd30>
   1c090:	2021883a 	mov	r16,r4
   1c094:	003f5306 	br	1bde4 <__alt_data_end+0xfc01bde4>
   1c098:	1821883a 	mov	r16,r3
   1c09c:	003ef406 	br	1bc70 <__alt_data_end+0xfc01bc70>
   1c0a0:	1806943a 	slli	r3,r3,16
   1c0a4:	9de6983a 	sll	r19,r19,r23
   1c0a8:	e73fffcc 	andi	fp,fp,65535
   1c0ac:	1f07883a 	add	r3,r3,fp
   1c0b0:	98ffbd2e 	bgeu	r19,r3,1bfa8 <__alt_data_end+0xfc01bfa8>
   1c0b4:	90bfffc4 	addi	r2,r18,-1
   1c0b8:	0007883a 	mov	r3,zero
   1c0bc:	003f4e06 	br	1bdf8 <__alt_data_end+0xfc01bdf8>
   1c0c0:	00800604 	movi	r2,24
   1c0c4:	003ef506 	br	1bc9c <__alt_data_end+0xfc01bc9c>
   1c0c8:	00800604 	movi	r2,24
   1c0cc:	003f0b06 	br	1bcfc <__alt_data_end+0xfc01bcfc>
   1c0d0:	00800604 	movi	r2,24
   1c0d4:	003ead06 	br	1bb8c <__alt_data_end+0xfc01bb8c>
   1c0d8:	0007883a 	mov	r3,zero
   1c0dc:	00800044 	movi	r2,1
   1c0e0:	003f4506 	br	1bdf8 <__alt_data_end+0xfc01bdf8>
   1c0e4:	80bf8e2e 	bgeu	r16,r2,1bf20 <__alt_data_end+0xfc01bf20>
   1c0e8:	8c7fff84 	addi	r17,r17,-2
   1c0ec:	8721883a 	add	r16,r16,fp
   1c0f0:	003f8c06 	br	1bf24 <__alt_data_end+0xfc01bf24>
   1c0f4:	18bf762e 	bgeu	r3,r2,1bed0 <__alt_data_end+0xfc01bed0>
   1c0f8:	ad7fff84 	addi	r21,r21,-2
   1c0fc:	1f07883a 	add	r3,r3,fp
   1c100:	003f7406 	br	1bed4 <__alt_data_end+0xfc01bed4>
   1c104:	1839883a 	mov	fp,r3
   1c108:	003fdd06 	br	1c080 <__alt_data_end+0xfc01c080>
   1c10c:	182f883a 	mov	r23,r3
   1c110:	003fc506 	br	1c028 <__alt_data_end+0xfc01c028>
   1c114:	b5bfff84 	addi	r22,r22,-2
   1c118:	3c4f883a 	add	r7,r7,r17
   1c11c:	003f1a06 	br	1bd88 <__alt_data_end+0xfc01bd88>
   1c120:	b5bfff84 	addi	r22,r22,-2
   1c124:	1c47883a 	add	r3,r3,r17
   1c128:	003ebc06 	br	1bc1c <__alt_data_end+0xfc01bc1c>

0001c12c <__umoddi3>:
   1c12c:	defff304 	addi	sp,sp,-52
   1c130:	df000b15 	stw	fp,44(sp)
   1c134:	dc400415 	stw	r17,16(sp)
   1c138:	dc000315 	stw	r16,12(sp)
   1c13c:	dfc00c15 	stw	ra,48(sp)
   1c140:	ddc00a15 	stw	r23,40(sp)
   1c144:	dd800915 	stw	r22,36(sp)
   1c148:	dd400815 	stw	r21,32(sp)
   1c14c:	dd000715 	stw	r20,28(sp)
   1c150:	dcc00615 	stw	r19,24(sp)
   1c154:	dc800515 	stw	r18,20(sp)
   1c158:	2021883a 	mov	r16,r4
   1c15c:	2823883a 	mov	r17,r5
   1c160:	2839883a 	mov	fp,r5
   1c164:	3800401e 	bne	r7,zero,1c268 <__umoddi3+0x13c>
   1c168:	3027883a 	mov	r19,r6
   1c16c:	2029883a 	mov	r20,r4
   1c170:	2980552e 	bgeu	r5,r6,1c2c8 <__umoddi3+0x19c>
   1c174:	00bfffd4 	movui	r2,65535
   1c178:	1180a236 	bltu	r2,r6,1c404 <__umoddi3+0x2d8>
   1c17c:	01003fc4 	movi	r4,255
   1c180:	2189803a 	cmpltu	r4,r4,r6
   1c184:	200890fa 	slli	r4,r4,3
   1c188:	3104d83a 	srl	r2,r6,r4
   1c18c:	00c000f4 	movhi	r3,3
   1c190:	18ea3804 	addi	r3,r3,-22304
   1c194:	1885883a 	add	r2,r3,r2
   1c198:	10c00003 	ldbu	r3,0(r2)
   1c19c:	00800804 	movi	r2,32
   1c1a0:	1909883a 	add	r4,r3,r4
   1c1a4:	1125c83a 	sub	r18,r2,r4
   1c1a8:	90000526 	beq	r18,zero,1c1c0 <__umoddi3+0x94>
   1c1ac:	8ca2983a 	sll	r17,r17,r18
   1c1b0:	8108d83a 	srl	r4,r16,r4
   1c1b4:	34a6983a 	sll	r19,r6,r18
   1c1b8:	84a8983a 	sll	r20,r16,r18
   1c1bc:	2478b03a 	or	fp,r4,r17
   1c1c0:	982cd43a 	srli	r22,r19,16
   1c1c4:	e009883a 	mov	r4,fp
   1c1c8:	9dffffcc 	andi	r23,r19,65535
   1c1cc:	b00b883a 	mov	r5,r22
   1c1d0:	000ceac0 	call	ceac <__umodsi3>
   1c1d4:	b00b883a 	mov	r5,r22
   1c1d8:	e009883a 	mov	r4,fp
   1c1dc:	102b883a 	mov	r21,r2
   1c1e0:	000ce480 	call	ce48 <__udivsi3>
   1c1e4:	100b883a 	mov	r5,r2
   1c1e8:	b809883a 	mov	r4,r23
   1c1ec:	000cf040 	call	cf04 <__mulsi3>
   1c1f0:	a82a943a 	slli	r21,r21,16
   1c1f4:	a006d43a 	srli	r3,r20,16
   1c1f8:	1d46b03a 	or	r3,r3,r21
   1c1fc:	1880032e 	bgeu	r3,r2,1c20c <__umoddi3+0xe0>
   1c200:	1cc7883a 	add	r3,r3,r19
   1c204:	1cc00136 	bltu	r3,r19,1c20c <__umoddi3+0xe0>
   1c208:	18813136 	bltu	r3,r2,1c6d0 <__umoddi3+0x5a4>
   1c20c:	18a1c83a 	sub	r16,r3,r2
   1c210:	b00b883a 	mov	r5,r22
   1c214:	8009883a 	mov	r4,r16
   1c218:	000ceac0 	call	ceac <__umodsi3>
   1c21c:	b00b883a 	mov	r5,r22
   1c220:	8009883a 	mov	r4,r16
   1c224:	1023883a 	mov	r17,r2
   1c228:	000ce480 	call	ce48 <__udivsi3>
   1c22c:	100b883a 	mov	r5,r2
   1c230:	b809883a 	mov	r4,r23
   1c234:	8822943a 	slli	r17,r17,16
   1c238:	000cf040 	call	cf04 <__mulsi3>
   1c23c:	a0ffffcc 	andi	r3,r20,65535
   1c240:	1c46b03a 	or	r3,r3,r17
   1c244:	1880042e 	bgeu	r3,r2,1c258 <__umoddi3+0x12c>
   1c248:	1cc7883a 	add	r3,r3,r19
   1c24c:	1cc00236 	bltu	r3,r19,1c258 <__umoddi3+0x12c>
   1c250:	1880012e 	bgeu	r3,r2,1c258 <__umoddi3+0x12c>
   1c254:	1cc7883a 	add	r3,r3,r19
   1c258:	1885c83a 	sub	r2,r3,r2
   1c25c:	1484d83a 	srl	r2,r2,r18
   1c260:	0007883a 	mov	r3,zero
   1c264:	00005306 	br	1c3b4 <__umoddi3+0x288>
   1c268:	29c05036 	bltu	r5,r7,1c3ac <__umoddi3+0x280>
   1c26c:	00bfffd4 	movui	r2,65535
   1c270:	11c05c2e 	bgeu	r2,r7,1c3e4 <__umoddi3+0x2b8>
   1c274:	00804034 	movhi	r2,256
   1c278:	10bfffc4 	addi	r2,r2,-1
   1c27c:	11c10636 	bltu	r2,r7,1c698 <__umoddi3+0x56c>
   1c280:	01000404 	movi	r4,16
   1c284:	3904d83a 	srl	r2,r7,r4
   1c288:	00c000f4 	movhi	r3,3
   1c28c:	18ea3804 	addi	r3,r3,-22304
   1c290:	1885883a 	add	r2,r3,r2
   1c294:	14c00003 	ldbu	r19,0(r2)
   1c298:	00c00804 	movi	r3,32
   1c29c:	9927883a 	add	r19,r19,r4
   1c2a0:	1ce9c83a 	sub	r20,r3,r19
   1c2a4:	a0005c1e 	bne	r20,zero,1c418 <__umoddi3+0x2ec>
   1c2a8:	3c400136 	bltu	r7,r17,1c2b0 <__umoddi3+0x184>
   1c2ac:	81810a36 	bltu	r16,r6,1c6d8 <__umoddi3+0x5ac>
   1c2b0:	8185c83a 	sub	r2,r16,r6
   1c2b4:	89e3c83a 	sub	r17,r17,r7
   1c2b8:	8089803a 	cmpltu	r4,r16,r2
   1c2bc:	8939c83a 	sub	fp,r17,r4
   1c2c0:	e007883a 	mov	r3,fp
   1c2c4:	00003b06 	br	1c3b4 <__umoddi3+0x288>
   1c2c8:	3000041e 	bne	r6,zero,1c2dc <__umoddi3+0x1b0>
   1c2cc:	000b883a 	mov	r5,zero
   1c2d0:	01000044 	movi	r4,1
   1c2d4:	000ce480 	call	ce48 <__udivsi3>
   1c2d8:	1027883a 	mov	r19,r2
   1c2dc:	00bfffd4 	movui	r2,65535
   1c2e0:	14c0442e 	bgeu	r2,r19,1c3f4 <__umoddi3+0x2c8>
   1c2e4:	00804034 	movhi	r2,256
   1c2e8:	10bfffc4 	addi	r2,r2,-1
   1c2ec:	14c0ec36 	bltu	r2,r19,1c6a0 <__umoddi3+0x574>
   1c2f0:	00800404 	movi	r2,16
   1c2f4:	9886d83a 	srl	r3,r19,r2
   1c2f8:	010000f4 	movhi	r4,3
   1c2fc:	212a3804 	addi	r4,r4,-22304
   1c300:	20c7883a 	add	r3,r4,r3
   1c304:	18c00003 	ldbu	r3,0(r3)
   1c308:	1887883a 	add	r3,r3,r2
   1c30c:	00800804 	movi	r2,32
   1c310:	10e5c83a 	sub	r18,r2,r3
   1c314:	9000ab1e 	bne	r18,zero,1c5c4 <__umoddi3+0x498>
   1c318:	982cd43a 	srli	r22,r19,16
   1c31c:	8ce3c83a 	sub	r17,r17,r19
   1c320:	9dffffcc 	andi	r23,r19,65535
   1c324:	b00b883a 	mov	r5,r22
   1c328:	8809883a 	mov	r4,r17
   1c32c:	000ceac0 	call	ceac <__umodsi3>
   1c330:	b00b883a 	mov	r5,r22
   1c334:	8809883a 	mov	r4,r17
   1c338:	102b883a 	mov	r21,r2
   1c33c:	000ce480 	call	ce48 <__udivsi3>
   1c340:	b80b883a 	mov	r5,r23
   1c344:	1009883a 	mov	r4,r2
   1c348:	000cf040 	call	cf04 <__mulsi3>
   1c34c:	a82a943a 	slli	r21,r21,16
   1c350:	a006d43a 	srli	r3,r20,16
   1c354:	1d46b03a 	or	r3,r3,r21
   1c358:	1880042e 	bgeu	r3,r2,1c36c <__umoddi3+0x240>
   1c35c:	1cc7883a 	add	r3,r3,r19
   1c360:	1cc00236 	bltu	r3,r19,1c36c <__umoddi3+0x240>
   1c364:	1880012e 	bgeu	r3,r2,1c36c <__umoddi3+0x240>
   1c368:	1cc7883a 	add	r3,r3,r19
   1c36c:	18a1c83a 	sub	r16,r3,r2
   1c370:	b00b883a 	mov	r5,r22
   1c374:	8009883a 	mov	r4,r16
   1c378:	000ceac0 	call	ceac <__umodsi3>
   1c37c:	1023883a 	mov	r17,r2
   1c380:	b00b883a 	mov	r5,r22
   1c384:	8009883a 	mov	r4,r16
   1c388:	000ce480 	call	ce48 <__udivsi3>
   1c38c:	8822943a 	slli	r17,r17,16
   1c390:	b80b883a 	mov	r5,r23
   1c394:	1009883a 	mov	r4,r2
   1c398:	000cf040 	call	cf04 <__mulsi3>
   1c39c:	a53fffcc 	andi	r20,r20,65535
   1c3a0:	a446b03a 	or	r3,r20,r17
   1c3a4:	18bfac2e 	bgeu	r3,r2,1c258 <__alt_data_end+0xfc01c258>
   1c3a8:	003fa706 	br	1c248 <__alt_data_end+0xfc01c248>
   1c3ac:	2005883a 	mov	r2,r4
   1c3b0:	2807883a 	mov	r3,r5
   1c3b4:	dfc00c17 	ldw	ra,48(sp)
   1c3b8:	df000b17 	ldw	fp,44(sp)
   1c3bc:	ddc00a17 	ldw	r23,40(sp)
   1c3c0:	dd800917 	ldw	r22,36(sp)
   1c3c4:	dd400817 	ldw	r21,32(sp)
   1c3c8:	dd000717 	ldw	r20,28(sp)
   1c3cc:	dcc00617 	ldw	r19,24(sp)
   1c3d0:	dc800517 	ldw	r18,20(sp)
   1c3d4:	dc400417 	ldw	r17,16(sp)
   1c3d8:	dc000317 	ldw	r16,12(sp)
   1c3dc:	dec00d04 	addi	sp,sp,52
   1c3e0:	f800283a 	ret
   1c3e4:	04c03fc4 	movi	r19,255
   1c3e8:	99c9803a 	cmpltu	r4,r19,r7
   1c3ec:	200890fa 	slli	r4,r4,3
   1c3f0:	003fa406 	br	1c284 <__alt_data_end+0xfc01c284>
   1c3f4:	00803fc4 	movi	r2,255
   1c3f8:	14c5803a 	cmpltu	r2,r2,r19
   1c3fc:	100490fa 	slli	r2,r2,3
   1c400:	003fbc06 	br	1c2f4 <__alt_data_end+0xfc01c2f4>
   1c404:	00804034 	movhi	r2,256
   1c408:	10bfffc4 	addi	r2,r2,-1
   1c40c:	1180a636 	bltu	r2,r6,1c6a8 <__umoddi3+0x57c>
   1c410:	01000404 	movi	r4,16
   1c414:	003f5c06 	br	1c188 <__alt_data_end+0xfc01c188>
   1c418:	3d0e983a 	sll	r7,r7,r20
   1c41c:	34ead83a 	srl	r21,r6,r19
   1c420:	8cc6d83a 	srl	r3,r17,r19
   1c424:	8d10983a 	sll	r8,r17,r20
   1c428:	3d6ab03a 	or	r21,r7,r21
   1c42c:	a82cd43a 	srli	r22,r21,16
   1c430:	84e2d83a 	srl	r17,r16,r19
   1c434:	1809883a 	mov	r4,r3
   1c438:	b00b883a 	mov	r5,r22
   1c43c:	8a22b03a 	or	r17,r17,r8
   1c440:	3524983a 	sll	r18,r6,r20
   1c444:	dc400015 	stw	r17,0(sp)
   1c448:	d8c00115 	stw	r3,4(sp)
   1c44c:	000ceac0 	call	ceac <__umodsi3>
   1c450:	d8c00117 	ldw	r3,4(sp)
   1c454:	b00b883a 	mov	r5,r22
   1c458:	1039883a 	mov	fp,r2
   1c45c:	1809883a 	mov	r4,r3
   1c460:	000ce480 	call	ce48 <__udivsi3>
   1c464:	adffffcc 	andi	r23,r21,65535
   1c468:	100b883a 	mov	r5,r2
   1c46c:	b809883a 	mov	r4,r23
   1c470:	1023883a 	mov	r17,r2
   1c474:	000cf040 	call	cf04 <__mulsi3>
   1c478:	d9400017 	ldw	r5,0(sp)
   1c47c:	e008943a 	slli	r4,fp,16
   1c480:	8520983a 	sll	r16,r16,r20
   1c484:	2806d43a 	srli	r3,r5,16
   1c488:	1906b03a 	or	r3,r3,r4
   1c48c:	1880042e 	bgeu	r3,r2,1c4a0 <__umoddi3+0x374>
   1c490:	1d47883a 	add	r3,r3,r21
   1c494:	893fffc4 	addi	r4,r17,-1
   1c498:	1d40892e 	bgeu	r3,r21,1c6c0 <__umoddi3+0x594>
   1c49c:	2023883a 	mov	r17,r4
   1c4a0:	18b9c83a 	sub	fp,r3,r2
   1c4a4:	b00b883a 	mov	r5,r22
   1c4a8:	e009883a 	mov	r4,fp
   1c4ac:	000ceac0 	call	ceac <__umodsi3>
   1c4b0:	b00b883a 	mov	r5,r22
   1c4b4:	e009883a 	mov	r4,fp
   1c4b8:	d8800215 	stw	r2,8(sp)
   1c4bc:	000ce480 	call	ce48 <__udivsi3>
   1c4c0:	100b883a 	mov	r5,r2
   1c4c4:	b809883a 	mov	r4,r23
   1c4c8:	102d883a 	mov	r22,r2
   1c4cc:	000cf040 	call	cf04 <__mulsi3>
   1c4d0:	d9800217 	ldw	r6,8(sp)
   1c4d4:	d8c00017 	ldw	r3,0(sp)
   1c4d8:	300c943a 	slli	r6,r6,16
   1c4dc:	1a3fffcc 	andi	r8,r3,65535
   1c4e0:	4190b03a 	or	r8,r8,r6
   1c4e4:	4080042e 	bgeu	r8,r2,1c4f8 <__umoddi3+0x3cc>
   1c4e8:	4551883a 	add	r8,r8,r21
   1c4ec:	b0ffffc4 	addi	r3,r22,-1
   1c4f0:	45406f2e 	bgeu	r8,r21,1c6b0 <__umoddi3+0x584>
   1c4f4:	182d883a 	mov	r22,r3
   1c4f8:	880e943a 	slli	r7,r17,16
   1c4fc:	9006d43a 	srli	r3,r18,16
   1c500:	91bfffcc 	andi	r6,r18,65535
   1c504:	3dacb03a 	or	r22,r7,r22
   1c508:	b02ed43a 	srli	r23,r22,16
   1c50c:	b5bfffcc 	andi	r22,r22,65535
   1c510:	300b883a 	mov	r5,r6
   1c514:	b009883a 	mov	r4,r22
   1c518:	40a3c83a 	sub	r17,r8,r2
   1c51c:	d8c00115 	stw	r3,4(sp)
   1c520:	d9800215 	stw	r6,8(sp)
   1c524:	000cf040 	call	cf04 <__mulsi3>
   1c528:	d9800217 	ldw	r6,8(sp)
   1c52c:	b809883a 	mov	r4,r23
   1c530:	1039883a 	mov	fp,r2
   1c534:	300b883a 	mov	r5,r6
   1c538:	000cf040 	call	cf04 <__mulsi3>
   1c53c:	d8c00117 	ldw	r3,4(sp)
   1c540:	b809883a 	mov	r4,r23
   1c544:	d8800215 	stw	r2,8(sp)
   1c548:	180b883a 	mov	r5,r3
   1c54c:	000cf040 	call	cf04 <__mulsi3>
   1c550:	d8c00117 	ldw	r3,4(sp)
   1c554:	b009883a 	mov	r4,r22
   1c558:	102f883a 	mov	r23,r2
   1c55c:	180b883a 	mov	r5,r3
   1c560:	000cf040 	call	cf04 <__mulsi3>
   1c564:	d9800217 	ldw	r6,8(sp)
   1c568:	e006d43a 	srli	r3,fp,16
   1c56c:	1185883a 	add	r2,r2,r6
   1c570:	1885883a 	add	r2,r3,r2
   1c574:	1180022e 	bgeu	r2,r6,1c580 <__umoddi3+0x454>
   1c578:	00c00074 	movhi	r3,1
   1c57c:	b8ef883a 	add	r23,r23,r3
   1c580:	1006d43a 	srli	r3,r2,16
   1c584:	1004943a 	slli	r2,r2,16
   1c588:	e73fffcc 	andi	fp,fp,65535
   1c58c:	1dc7883a 	add	r3,r3,r23
   1c590:	1739883a 	add	fp,r2,fp
   1c594:	88c03a36 	bltu	r17,r3,1c680 <__umoddi3+0x554>
   1c598:	88c05126 	beq	r17,r3,1c6e0 <__umoddi3+0x5b4>
   1c59c:	88c9c83a 	sub	r4,r17,r3
   1c5a0:	e00f883a 	mov	r7,fp
   1c5a4:	81cfc83a 	sub	r7,r16,r7
   1c5a8:	81c7803a 	cmpltu	r3,r16,r7
   1c5ac:	20c7c83a 	sub	r3,r4,r3
   1c5b0:	1cc4983a 	sll	r2,r3,r19
   1c5b4:	3d0ed83a 	srl	r7,r7,r20
   1c5b8:	1d06d83a 	srl	r3,r3,r20
   1c5bc:	11c4b03a 	or	r2,r2,r7
   1c5c0:	003f7c06 	br	1c3b4 <__alt_data_end+0xfc01c3b4>
   1c5c4:	9ca6983a 	sll	r19,r19,r18
   1c5c8:	88f8d83a 	srl	fp,r17,r3
   1c5cc:	80c4d83a 	srl	r2,r16,r3
   1c5d0:	982cd43a 	srli	r22,r19,16
   1c5d4:	8ca2983a 	sll	r17,r17,r18
   1c5d8:	e009883a 	mov	r4,fp
   1c5dc:	b00b883a 	mov	r5,r22
   1c5e0:	146ab03a 	or	r21,r2,r17
   1c5e4:	000ceac0 	call	ceac <__umodsi3>
   1c5e8:	b00b883a 	mov	r5,r22
   1c5ec:	e009883a 	mov	r4,fp
   1c5f0:	1029883a 	mov	r20,r2
   1c5f4:	9dffffcc 	andi	r23,r19,65535
   1c5f8:	000ce480 	call	ce48 <__udivsi3>
   1c5fc:	b809883a 	mov	r4,r23
   1c600:	100b883a 	mov	r5,r2
   1c604:	000cf040 	call	cf04 <__mulsi3>
   1c608:	a008943a 	slli	r4,r20,16
   1c60c:	a806d43a 	srli	r3,r21,16
   1c610:	84a8983a 	sll	r20,r16,r18
   1c614:	1906b03a 	or	r3,r3,r4
   1c618:	1880042e 	bgeu	r3,r2,1c62c <__umoddi3+0x500>
   1c61c:	1cc7883a 	add	r3,r3,r19
   1c620:	1cc00236 	bltu	r3,r19,1c62c <__umoddi3+0x500>
   1c624:	1880012e 	bgeu	r3,r2,1c62c <__umoddi3+0x500>
   1c628:	1cc7883a 	add	r3,r3,r19
   1c62c:	18a3c83a 	sub	r17,r3,r2
   1c630:	b00b883a 	mov	r5,r22
   1c634:	8809883a 	mov	r4,r17
   1c638:	000ceac0 	call	ceac <__umodsi3>
   1c63c:	b00b883a 	mov	r5,r22
   1c640:	8809883a 	mov	r4,r17
   1c644:	1021883a 	mov	r16,r2
   1c648:	000ce480 	call	ce48 <__udivsi3>
   1c64c:	100b883a 	mov	r5,r2
   1c650:	b809883a 	mov	r4,r23
   1c654:	8020943a 	slli	r16,r16,16
   1c658:	000cf040 	call	cf04 <__mulsi3>
   1c65c:	a8ffffcc 	andi	r3,r21,65535
   1c660:	1c06b03a 	or	r3,r3,r16
   1c664:	1880042e 	bgeu	r3,r2,1c678 <__umoddi3+0x54c>
   1c668:	1cc7883a 	add	r3,r3,r19
   1c66c:	1cc00236 	bltu	r3,r19,1c678 <__umoddi3+0x54c>
   1c670:	1880012e 	bgeu	r3,r2,1c678 <__umoddi3+0x54c>
   1c674:	1cc7883a 	add	r3,r3,r19
   1c678:	18a3c83a 	sub	r17,r3,r2
   1c67c:	003f2906 	br	1c324 <__alt_data_end+0xfc01c324>
   1c680:	e48fc83a 	sub	r7,fp,r18
   1c684:	1d49c83a 	sub	r4,r3,r21
   1c688:	e1f9803a 	cmpltu	fp,fp,r7
   1c68c:	2739c83a 	sub	fp,r4,fp
   1c690:	8f09c83a 	sub	r4,r17,fp
   1c694:	003fc306 	br	1c5a4 <__alt_data_end+0xfc01c5a4>
   1c698:	01000604 	movi	r4,24
   1c69c:	003ef906 	br	1c284 <__alt_data_end+0xfc01c284>
   1c6a0:	00800604 	movi	r2,24
   1c6a4:	003f1306 	br	1c2f4 <__alt_data_end+0xfc01c2f4>
   1c6a8:	01000604 	movi	r4,24
   1c6ac:	003eb606 	br	1c188 <__alt_data_end+0xfc01c188>
   1c6b0:	40bf902e 	bgeu	r8,r2,1c4f4 <__alt_data_end+0xfc01c4f4>
   1c6b4:	b5bfff84 	addi	r22,r22,-2
   1c6b8:	4551883a 	add	r8,r8,r21
   1c6bc:	003f8e06 	br	1c4f8 <__alt_data_end+0xfc01c4f8>
   1c6c0:	18bf762e 	bgeu	r3,r2,1c49c <__alt_data_end+0xfc01c49c>
   1c6c4:	8c7fff84 	addi	r17,r17,-2
   1c6c8:	1d47883a 	add	r3,r3,r21
   1c6cc:	003f7406 	br	1c4a0 <__alt_data_end+0xfc01c4a0>
   1c6d0:	1cc7883a 	add	r3,r3,r19
   1c6d4:	003ecd06 	br	1c20c <__alt_data_end+0xfc01c20c>
   1c6d8:	8005883a 	mov	r2,r16
   1c6dc:	003ef806 	br	1c2c0 <__alt_data_end+0xfc01c2c0>
   1c6e0:	873fe736 	bltu	r16,fp,1c680 <__alt_data_end+0xfc01c680>
   1c6e4:	e00f883a 	mov	r7,fp
   1c6e8:	0009883a 	mov	r4,zero
   1c6ec:	003fad06 	br	1c5a4 <__alt_data_end+0xfc01c5a4>

0001c6f0 <__adddf3>:
   1c6f0:	02c00434 	movhi	r11,16
   1c6f4:	5affffc4 	addi	r11,r11,-1
   1c6f8:	2806d7fa 	srli	r3,r5,31
   1c6fc:	2ad4703a 	and	r10,r5,r11
   1c700:	3ad2703a 	and	r9,r7,r11
   1c704:	3804d53a 	srli	r2,r7,20
   1c708:	3018d77a 	srli	r12,r6,29
   1c70c:	280ad53a 	srli	r5,r5,20
   1c710:	501490fa 	slli	r10,r10,3
   1c714:	2010d77a 	srli	r8,r4,29
   1c718:	481290fa 	slli	r9,r9,3
   1c71c:	380ed7fa 	srli	r7,r7,31
   1c720:	defffb04 	addi	sp,sp,-20
   1c724:	dc800215 	stw	r18,8(sp)
   1c728:	dc400115 	stw	r17,4(sp)
   1c72c:	dc000015 	stw	r16,0(sp)
   1c730:	dfc00415 	stw	ra,16(sp)
   1c734:	dcc00315 	stw	r19,12(sp)
   1c738:	1c803fcc 	andi	r18,r3,255
   1c73c:	2c01ffcc 	andi	r16,r5,2047
   1c740:	5210b03a 	or	r8,r10,r8
   1c744:	202290fa 	slli	r17,r4,3
   1c748:	1081ffcc 	andi	r2,r2,2047
   1c74c:	4b12b03a 	or	r9,r9,r12
   1c750:	300c90fa 	slli	r6,r6,3
   1c754:	91c07526 	beq	r18,r7,1c92c <__adddf3+0x23c>
   1c758:	8087c83a 	sub	r3,r16,r2
   1c75c:	00c0ab0e 	bge	zero,r3,1ca0c <__adddf3+0x31c>
   1c760:	10002a1e 	bne	r2,zero,1c80c <__adddf3+0x11c>
   1c764:	4984b03a 	or	r2,r9,r6
   1c768:	1000961e 	bne	r2,zero,1c9c4 <__adddf3+0x2d4>
   1c76c:	888001cc 	andi	r2,r17,7
   1c770:	10000726 	beq	r2,zero,1c790 <__adddf3+0xa0>
   1c774:	888003cc 	andi	r2,r17,15
   1c778:	00c00104 	movi	r3,4
   1c77c:	10c00426 	beq	r2,r3,1c790 <__adddf3+0xa0>
   1c780:	88c7883a 	add	r3,r17,r3
   1c784:	1c63803a 	cmpltu	r17,r3,r17
   1c788:	4451883a 	add	r8,r8,r17
   1c78c:	1823883a 	mov	r17,r3
   1c790:	4080202c 	andhi	r2,r8,128
   1c794:	10005926 	beq	r2,zero,1c8fc <__adddf3+0x20c>
   1c798:	84000044 	addi	r16,r16,1
   1c79c:	0081ffc4 	movi	r2,2047
   1c7a0:	8080ba26 	beq	r16,r2,1ca8c <__adddf3+0x39c>
   1c7a4:	00bfe034 	movhi	r2,65408
   1c7a8:	10bfffc4 	addi	r2,r2,-1
   1c7ac:	4090703a 	and	r8,r8,r2
   1c7b0:	4004977a 	slli	r2,r8,29
   1c7b4:	4010927a 	slli	r8,r8,9
   1c7b8:	8822d0fa 	srli	r17,r17,3
   1c7bc:	8401ffcc 	andi	r16,r16,2047
   1c7c0:	4010d33a 	srli	r8,r8,12
   1c7c4:	9007883a 	mov	r3,r18
   1c7c8:	1444b03a 	or	r2,r2,r17
   1c7cc:	8401ffcc 	andi	r16,r16,2047
   1c7d0:	8020953a 	slli	r16,r16,20
   1c7d4:	18c03fcc 	andi	r3,r3,255
   1c7d8:	01000434 	movhi	r4,16
   1c7dc:	213fffc4 	addi	r4,r4,-1
   1c7e0:	180697fa 	slli	r3,r3,31
   1c7e4:	4110703a 	and	r8,r8,r4
   1c7e8:	4410b03a 	or	r8,r8,r16
   1c7ec:	40c6b03a 	or	r3,r8,r3
   1c7f0:	dfc00417 	ldw	ra,16(sp)
   1c7f4:	dcc00317 	ldw	r19,12(sp)
   1c7f8:	dc800217 	ldw	r18,8(sp)
   1c7fc:	dc400117 	ldw	r17,4(sp)
   1c800:	dc000017 	ldw	r16,0(sp)
   1c804:	dec00504 	addi	sp,sp,20
   1c808:	f800283a 	ret
   1c80c:	0081ffc4 	movi	r2,2047
   1c810:	80bfd626 	beq	r16,r2,1c76c <__alt_data_end+0xfc01c76c>
   1c814:	4a402034 	orhi	r9,r9,128
   1c818:	00800e04 	movi	r2,56
   1c81c:	10c09f16 	blt	r2,r3,1ca9c <__adddf3+0x3ac>
   1c820:	008007c4 	movi	r2,31
   1c824:	10c0c216 	blt	r2,r3,1cb30 <__adddf3+0x440>
   1c828:	00800804 	movi	r2,32
   1c82c:	10c5c83a 	sub	r2,r2,r3
   1c830:	488a983a 	sll	r5,r9,r2
   1c834:	30c8d83a 	srl	r4,r6,r3
   1c838:	3084983a 	sll	r2,r6,r2
   1c83c:	48c6d83a 	srl	r3,r9,r3
   1c840:	290cb03a 	or	r6,r5,r4
   1c844:	1004c03a 	cmpne	r2,r2,zero
   1c848:	308cb03a 	or	r6,r6,r2
   1c84c:	898dc83a 	sub	r6,r17,r6
   1c850:	89a3803a 	cmpltu	r17,r17,r6
   1c854:	40d1c83a 	sub	r8,r8,r3
   1c858:	4451c83a 	sub	r8,r8,r17
   1c85c:	3023883a 	mov	r17,r6
   1c860:	4080202c 	andhi	r2,r8,128
   1c864:	10002326 	beq	r2,zero,1c8f4 <__adddf3+0x204>
   1c868:	04c02034 	movhi	r19,128
   1c86c:	9cffffc4 	addi	r19,r19,-1
   1c870:	44e6703a 	and	r19,r8,r19
   1c874:	98007626 	beq	r19,zero,1ca50 <__adddf3+0x360>
   1c878:	9809883a 	mov	r4,r19
   1c87c:	000e3bc0 	call	e3bc <__clzsi2>
   1c880:	10fffe04 	addi	r3,r2,-8
   1c884:	010007c4 	movi	r4,31
   1c888:	20c07716 	blt	r4,r3,1ca68 <__adddf3+0x378>
   1c88c:	00800804 	movi	r2,32
   1c890:	10c5c83a 	sub	r2,r2,r3
   1c894:	8884d83a 	srl	r2,r17,r2
   1c898:	98d0983a 	sll	r8,r19,r3
   1c89c:	88e2983a 	sll	r17,r17,r3
   1c8a0:	1204b03a 	or	r2,r2,r8
   1c8a4:	1c007416 	blt	r3,r16,1ca78 <__adddf3+0x388>
   1c8a8:	1c21c83a 	sub	r16,r3,r16
   1c8ac:	82000044 	addi	r8,r16,1
   1c8b0:	00c007c4 	movi	r3,31
   1c8b4:	1a009116 	blt	r3,r8,1cafc <__adddf3+0x40c>
   1c8b8:	00c00804 	movi	r3,32
   1c8bc:	1a07c83a 	sub	r3,r3,r8
   1c8c0:	8a08d83a 	srl	r4,r17,r8
   1c8c4:	88e2983a 	sll	r17,r17,r3
   1c8c8:	10c6983a 	sll	r3,r2,r3
   1c8cc:	1210d83a 	srl	r8,r2,r8
   1c8d0:	8804c03a 	cmpne	r2,r17,zero
   1c8d4:	1906b03a 	or	r3,r3,r4
   1c8d8:	18a2b03a 	or	r17,r3,r2
   1c8dc:	0021883a 	mov	r16,zero
   1c8e0:	003fa206 	br	1c76c <__alt_data_end+0xfc01c76c>
   1c8e4:	1890b03a 	or	r8,r3,r2
   1c8e8:	40017d26 	beq	r8,zero,1cee0 <__adddf3+0x7f0>
   1c8ec:	1011883a 	mov	r8,r2
   1c8f0:	1823883a 	mov	r17,r3
   1c8f4:	888001cc 	andi	r2,r17,7
   1c8f8:	103f9e1e 	bne	r2,zero,1c774 <__alt_data_end+0xfc01c774>
   1c8fc:	4004977a 	slli	r2,r8,29
   1c900:	8822d0fa 	srli	r17,r17,3
   1c904:	4010d0fa 	srli	r8,r8,3
   1c908:	9007883a 	mov	r3,r18
   1c90c:	1444b03a 	or	r2,r2,r17
   1c910:	0101ffc4 	movi	r4,2047
   1c914:	81002426 	beq	r16,r4,1c9a8 <__adddf3+0x2b8>
   1c918:	8120703a 	and	r16,r16,r4
   1c91c:	01000434 	movhi	r4,16
   1c920:	213fffc4 	addi	r4,r4,-1
   1c924:	4110703a 	and	r8,r8,r4
   1c928:	003fa806 	br	1c7cc <__alt_data_end+0xfc01c7cc>
   1c92c:	8089c83a 	sub	r4,r16,r2
   1c930:	01005e0e 	bge	zero,r4,1caac <__adddf3+0x3bc>
   1c934:	10002b26 	beq	r2,zero,1c9e4 <__adddf3+0x2f4>
   1c938:	0081ffc4 	movi	r2,2047
   1c93c:	80bf8b26 	beq	r16,r2,1c76c <__alt_data_end+0xfc01c76c>
   1c940:	4a402034 	orhi	r9,r9,128
   1c944:	00800e04 	movi	r2,56
   1c948:	1100a40e 	bge	r2,r4,1cbdc <__adddf3+0x4ec>
   1c94c:	498cb03a 	or	r6,r9,r6
   1c950:	300ac03a 	cmpne	r5,r6,zero
   1c954:	0013883a 	mov	r9,zero
   1c958:	2c4b883a 	add	r5,r5,r17
   1c95c:	2c63803a 	cmpltu	r17,r5,r17
   1c960:	4a11883a 	add	r8,r9,r8
   1c964:	8a11883a 	add	r8,r17,r8
   1c968:	2823883a 	mov	r17,r5
   1c96c:	4080202c 	andhi	r2,r8,128
   1c970:	103fe026 	beq	r2,zero,1c8f4 <__alt_data_end+0xfc01c8f4>
   1c974:	84000044 	addi	r16,r16,1
   1c978:	0081ffc4 	movi	r2,2047
   1c97c:	8080d226 	beq	r16,r2,1ccc8 <__adddf3+0x5d8>
   1c980:	00bfe034 	movhi	r2,65408
   1c984:	10bfffc4 	addi	r2,r2,-1
   1c988:	4090703a 	and	r8,r8,r2
   1c98c:	880ad07a 	srli	r5,r17,1
   1c990:	400897fa 	slli	r4,r8,31
   1c994:	88c0004c 	andi	r3,r17,1
   1c998:	28e2b03a 	or	r17,r5,r3
   1c99c:	4010d07a 	srli	r8,r8,1
   1c9a0:	2462b03a 	or	r17,r4,r17
   1c9a4:	003f7106 	br	1c76c <__alt_data_end+0xfc01c76c>
   1c9a8:	4088b03a 	or	r4,r8,r2
   1c9ac:	20014526 	beq	r4,zero,1cec4 <__adddf3+0x7d4>
   1c9b0:	01000434 	movhi	r4,16
   1c9b4:	42000234 	orhi	r8,r8,8
   1c9b8:	213fffc4 	addi	r4,r4,-1
   1c9bc:	4110703a 	and	r8,r8,r4
   1c9c0:	003f8206 	br	1c7cc <__alt_data_end+0xfc01c7cc>
   1c9c4:	18ffffc4 	addi	r3,r3,-1
   1c9c8:	1800491e 	bne	r3,zero,1caf0 <__adddf3+0x400>
   1c9cc:	898bc83a 	sub	r5,r17,r6
   1c9d0:	8963803a 	cmpltu	r17,r17,r5
   1c9d4:	4251c83a 	sub	r8,r8,r9
   1c9d8:	4451c83a 	sub	r8,r8,r17
   1c9dc:	2823883a 	mov	r17,r5
   1c9e0:	003f9f06 	br	1c860 <__alt_data_end+0xfc01c860>
   1c9e4:	4984b03a 	or	r2,r9,r6
   1c9e8:	103f6026 	beq	r2,zero,1c76c <__alt_data_end+0xfc01c76c>
   1c9ec:	213fffc4 	addi	r4,r4,-1
   1c9f0:	2000931e 	bne	r4,zero,1cc40 <__adddf3+0x550>
   1c9f4:	898d883a 	add	r6,r17,r6
   1c9f8:	3463803a 	cmpltu	r17,r6,r17
   1c9fc:	4251883a 	add	r8,r8,r9
   1ca00:	8a11883a 	add	r8,r17,r8
   1ca04:	3023883a 	mov	r17,r6
   1ca08:	003fd806 	br	1c96c <__alt_data_end+0xfc01c96c>
   1ca0c:	1800541e 	bne	r3,zero,1cb60 <__adddf3+0x470>
   1ca10:	80800044 	addi	r2,r16,1
   1ca14:	1081ffcc 	andi	r2,r2,2047
   1ca18:	00c00044 	movi	r3,1
   1ca1c:	1880a00e 	bge	r3,r2,1cca0 <__adddf3+0x5b0>
   1ca20:	8989c83a 	sub	r4,r17,r6
   1ca24:	8905803a 	cmpltu	r2,r17,r4
   1ca28:	4267c83a 	sub	r19,r8,r9
   1ca2c:	98a7c83a 	sub	r19,r19,r2
   1ca30:	9880202c 	andhi	r2,r19,128
   1ca34:	10006326 	beq	r2,zero,1cbc4 <__adddf3+0x4d4>
   1ca38:	3463c83a 	sub	r17,r6,r17
   1ca3c:	4a07c83a 	sub	r3,r9,r8
   1ca40:	344d803a 	cmpltu	r6,r6,r17
   1ca44:	19a7c83a 	sub	r19,r3,r6
   1ca48:	3825883a 	mov	r18,r7
   1ca4c:	983f8a1e 	bne	r19,zero,1c878 <__alt_data_end+0xfc01c878>
   1ca50:	8809883a 	mov	r4,r17
   1ca54:	000e3bc0 	call	e3bc <__clzsi2>
   1ca58:	10800804 	addi	r2,r2,32
   1ca5c:	10fffe04 	addi	r3,r2,-8
   1ca60:	010007c4 	movi	r4,31
   1ca64:	20ff890e 	bge	r4,r3,1c88c <__alt_data_end+0xfc01c88c>
   1ca68:	10bff604 	addi	r2,r2,-40
   1ca6c:	8884983a 	sll	r2,r17,r2
   1ca70:	0023883a 	mov	r17,zero
   1ca74:	1c3f8c0e 	bge	r3,r16,1c8a8 <__alt_data_end+0xfc01c8a8>
   1ca78:	023fe034 	movhi	r8,65408
   1ca7c:	423fffc4 	addi	r8,r8,-1
   1ca80:	80e1c83a 	sub	r16,r16,r3
   1ca84:	1210703a 	and	r8,r2,r8
   1ca88:	003f3806 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ca8c:	9007883a 	mov	r3,r18
   1ca90:	0011883a 	mov	r8,zero
   1ca94:	0005883a 	mov	r2,zero
   1ca98:	003f4c06 	br	1c7cc <__alt_data_end+0xfc01c7cc>
   1ca9c:	498cb03a 	or	r6,r9,r6
   1caa0:	300cc03a 	cmpne	r6,r6,zero
   1caa4:	0007883a 	mov	r3,zero
   1caa8:	003f6806 	br	1c84c <__alt_data_end+0xfc01c84c>
   1caac:	20009c1e 	bne	r4,zero,1cd20 <__adddf3+0x630>
   1cab0:	80800044 	addi	r2,r16,1
   1cab4:	1141ffcc 	andi	r5,r2,2047
   1cab8:	01000044 	movi	r4,1
   1cabc:	2140670e 	bge	r4,r5,1cc5c <__adddf3+0x56c>
   1cac0:	0101ffc4 	movi	r4,2047
   1cac4:	11007f26 	beq	r2,r4,1ccc4 <__adddf3+0x5d4>
   1cac8:	898d883a 	add	r6,r17,r6
   1cacc:	4247883a 	add	r3,r8,r9
   1cad0:	3451803a 	cmpltu	r8,r6,r17
   1cad4:	40d1883a 	add	r8,r8,r3
   1cad8:	402297fa 	slli	r17,r8,31
   1cadc:	300cd07a 	srli	r6,r6,1
   1cae0:	4010d07a 	srli	r8,r8,1
   1cae4:	1021883a 	mov	r16,r2
   1cae8:	89a2b03a 	or	r17,r17,r6
   1caec:	003f1f06 	br	1c76c <__alt_data_end+0xfc01c76c>
   1caf0:	0081ffc4 	movi	r2,2047
   1caf4:	80bf481e 	bne	r16,r2,1c818 <__alt_data_end+0xfc01c818>
   1caf8:	003f1c06 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cafc:	843ff844 	addi	r16,r16,-31
   1cb00:	01000804 	movi	r4,32
   1cb04:	1406d83a 	srl	r3,r2,r16
   1cb08:	41005026 	beq	r8,r4,1cc4c <__adddf3+0x55c>
   1cb0c:	01001004 	movi	r4,64
   1cb10:	2211c83a 	sub	r8,r4,r8
   1cb14:	1204983a 	sll	r2,r2,r8
   1cb18:	88a2b03a 	or	r17,r17,r2
   1cb1c:	8822c03a 	cmpne	r17,r17,zero
   1cb20:	1c62b03a 	or	r17,r3,r17
   1cb24:	0011883a 	mov	r8,zero
   1cb28:	0021883a 	mov	r16,zero
   1cb2c:	003f7106 	br	1c8f4 <__alt_data_end+0xfc01c8f4>
   1cb30:	193ff804 	addi	r4,r3,-32
   1cb34:	00800804 	movi	r2,32
   1cb38:	4908d83a 	srl	r4,r9,r4
   1cb3c:	18804526 	beq	r3,r2,1cc54 <__adddf3+0x564>
   1cb40:	00801004 	movi	r2,64
   1cb44:	10c5c83a 	sub	r2,r2,r3
   1cb48:	4886983a 	sll	r3,r9,r2
   1cb4c:	198cb03a 	or	r6,r3,r6
   1cb50:	300cc03a 	cmpne	r6,r6,zero
   1cb54:	218cb03a 	or	r6,r4,r6
   1cb58:	0007883a 	mov	r3,zero
   1cb5c:	003f3b06 	br	1c84c <__alt_data_end+0xfc01c84c>
   1cb60:	80002a26 	beq	r16,zero,1cc0c <__adddf3+0x51c>
   1cb64:	0101ffc4 	movi	r4,2047
   1cb68:	11006826 	beq	r2,r4,1cd0c <__adddf3+0x61c>
   1cb6c:	00c7c83a 	sub	r3,zero,r3
   1cb70:	42002034 	orhi	r8,r8,128
   1cb74:	01000e04 	movi	r4,56
   1cb78:	20c07c16 	blt	r4,r3,1cd6c <__adddf3+0x67c>
   1cb7c:	010007c4 	movi	r4,31
   1cb80:	20c0da16 	blt	r4,r3,1ceec <__adddf3+0x7fc>
   1cb84:	01000804 	movi	r4,32
   1cb88:	20c9c83a 	sub	r4,r4,r3
   1cb8c:	4114983a 	sll	r10,r8,r4
   1cb90:	88cad83a 	srl	r5,r17,r3
   1cb94:	8908983a 	sll	r4,r17,r4
   1cb98:	40c6d83a 	srl	r3,r8,r3
   1cb9c:	5162b03a 	or	r17,r10,r5
   1cba0:	2008c03a 	cmpne	r4,r4,zero
   1cba4:	8922b03a 	or	r17,r17,r4
   1cba8:	3463c83a 	sub	r17,r6,r17
   1cbac:	48c7c83a 	sub	r3,r9,r3
   1cbb0:	344d803a 	cmpltu	r6,r6,r17
   1cbb4:	1991c83a 	sub	r8,r3,r6
   1cbb8:	1021883a 	mov	r16,r2
   1cbbc:	3825883a 	mov	r18,r7
   1cbc0:	003f2706 	br	1c860 <__alt_data_end+0xfc01c860>
   1cbc4:	24d0b03a 	or	r8,r4,r19
   1cbc8:	40001b1e 	bne	r8,zero,1cc38 <__adddf3+0x548>
   1cbcc:	0005883a 	mov	r2,zero
   1cbd0:	0007883a 	mov	r3,zero
   1cbd4:	0021883a 	mov	r16,zero
   1cbd8:	003f4d06 	br	1c910 <__alt_data_end+0xfc01c910>
   1cbdc:	008007c4 	movi	r2,31
   1cbe0:	11003c16 	blt	r2,r4,1ccd4 <__adddf3+0x5e4>
   1cbe4:	00800804 	movi	r2,32
   1cbe8:	1105c83a 	sub	r2,r2,r4
   1cbec:	488e983a 	sll	r7,r9,r2
   1cbf0:	310ad83a 	srl	r5,r6,r4
   1cbf4:	3084983a 	sll	r2,r6,r2
   1cbf8:	4912d83a 	srl	r9,r9,r4
   1cbfc:	394ab03a 	or	r5,r7,r5
   1cc00:	1004c03a 	cmpne	r2,r2,zero
   1cc04:	288ab03a 	or	r5,r5,r2
   1cc08:	003f5306 	br	1c958 <__alt_data_end+0xfc01c958>
   1cc0c:	4448b03a 	or	r4,r8,r17
   1cc10:	20003e26 	beq	r4,zero,1cd0c <__adddf3+0x61c>
   1cc14:	00c6303a 	nor	r3,zero,r3
   1cc18:	18003a1e 	bne	r3,zero,1cd04 <__adddf3+0x614>
   1cc1c:	3463c83a 	sub	r17,r6,r17
   1cc20:	4a07c83a 	sub	r3,r9,r8
   1cc24:	344d803a 	cmpltu	r6,r6,r17
   1cc28:	1991c83a 	sub	r8,r3,r6
   1cc2c:	1021883a 	mov	r16,r2
   1cc30:	3825883a 	mov	r18,r7
   1cc34:	003f0a06 	br	1c860 <__alt_data_end+0xfc01c860>
   1cc38:	2023883a 	mov	r17,r4
   1cc3c:	003f0d06 	br	1c874 <__alt_data_end+0xfc01c874>
   1cc40:	0081ffc4 	movi	r2,2047
   1cc44:	80bf3f1e 	bne	r16,r2,1c944 <__alt_data_end+0xfc01c944>
   1cc48:	003ec806 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cc4c:	0005883a 	mov	r2,zero
   1cc50:	003fb106 	br	1cb18 <__alt_data_end+0xfc01cb18>
   1cc54:	0007883a 	mov	r3,zero
   1cc58:	003fbc06 	br	1cb4c <__alt_data_end+0xfc01cb4c>
   1cc5c:	4444b03a 	or	r2,r8,r17
   1cc60:	8000871e 	bne	r16,zero,1ce80 <__adddf3+0x790>
   1cc64:	1000ba26 	beq	r2,zero,1cf50 <__adddf3+0x860>
   1cc68:	4984b03a 	or	r2,r9,r6
   1cc6c:	103ebf26 	beq	r2,zero,1c76c <__alt_data_end+0xfc01c76c>
   1cc70:	8985883a 	add	r2,r17,r6
   1cc74:	4247883a 	add	r3,r8,r9
   1cc78:	1451803a 	cmpltu	r8,r2,r17
   1cc7c:	40d1883a 	add	r8,r8,r3
   1cc80:	40c0202c 	andhi	r3,r8,128
   1cc84:	1023883a 	mov	r17,r2
   1cc88:	183f1a26 	beq	r3,zero,1c8f4 <__alt_data_end+0xfc01c8f4>
   1cc8c:	00bfe034 	movhi	r2,65408
   1cc90:	10bfffc4 	addi	r2,r2,-1
   1cc94:	2021883a 	mov	r16,r4
   1cc98:	4090703a 	and	r8,r8,r2
   1cc9c:	003eb306 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cca0:	4444b03a 	or	r2,r8,r17
   1cca4:	8000291e 	bne	r16,zero,1cd4c <__adddf3+0x65c>
   1cca8:	10004b1e 	bne	r2,zero,1cdd8 <__adddf3+0x6e8>
   1ccac:	4990b03a 	or	r8,r9,r6
   1ccb0:	40008b26 	beq	r8,zero,1cee0 <__adddf3+0x7f0>
   1ccb4:	4811883a 	mov	r8,r9
   1ccb8:	3023883a 	mov	r17,r6
   1ccbc:	3825883a 	mov	r18,r7
   1ccc0:	003eaa06 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ccc4:	1021883a 	mov	r16,r2
   1ccc8:	0011883a 	mov	r8,zero
   1cccc:	0005883a 	mov	r2,zero
   1ccd0:	003f0f06 	br	1c910 <__alt_data_end+0xfc01c910>
   1ccd4:	217ff804 	addi	r5,r4,-32
   1ccd8:	00800804 	movi	r2,32
   1ccdc:	494ad83a 	srl	r5,r9,r5
   1cce0:	20807d26 	beq	r4,r2,1ced8 <__adddf3+0x7e8>
   1cce4:	00801004 	movi	r2,64
   1cce8:	1109c83a 	sub	r4,r2,r4
   1ccec:	4912983a 	sll	r9,r9,r4
   1ccf0:	498cb03a 	or	r6,r9,r6
   1ccf4:	300cc03a 	cmpne	r6,r6,zero
   1ccf8:	298ab03a 	or	r5,r5,r6
   1ccfc:	0013883a 	mov	r9,zero
   1cd00:	003f1506 	br	1c958 <__alt_data_end+0xfc01c958>
   1cd04:	0101ffc4 	movi	r4,2047
   1cd08:	113f9a1e 	bne	r2,r4,1cb74 <__alt_data_end+0xfc01cb74>
   1cd0c:	4811883a 	mov	r8,r9
   1cd10:	3023883a 	mov	r17,r6
   1cd14:	1021883a 	mov	r16,r2
   1cd18:	3825883a 	mov	r18,r7
   1cd1c:	003e9306 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cd20:	8000161e 	bne	r16,zero,1cd7c <__adddf3+0x68c>
   1cd24:	444ab03a 	or	r5,r8,r17
   1cd28:	28005126 	beq	r5,zero,1ce70 <__adddf3+0x780>
   1cd2c:	0108303a 	nor	r4,zero,r4
   1cd30:	20004d1e 	bne	r4,zero,1ce68 <__adddf3+0x778>
   1cd34:	89a3883a 	add	r17,r17,r6
   1cd38:	4253883a 	add	r9,r8,r9
   1cd3c:	898d803a 	cmpltu	r6,r17,r6
   1cd40:	3251883a 	add	r8,r6,r9
   1cd44:	1021883a 	mov	r16,r2
   1cd48:	003f0806 	br	1c96c <__alt_data_end+0xfc01c96c>
   1cd4c:	1000301e 	bne	r2,zero,1ce10 <__adddf3+0x720>
   1cd50:	4984b03a 	or	r2,r9,r6
   1cd54:	10007126 	beq	r2,zero,1cf1c <__adddf3+0x82c>
   1cd58:	4811883a 	mov	r8,r9
   1cd5c:	3023883a 	mov	r17,r6
   1cd60:	3825883a 	mov	r18,r7
   1cd64:	0401ffc4 	movi	r16,2047
   1cd68:	003e8006 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cd6c:	4462b03a 	or	r17,r8,r17
   1cd70:	8822c03a 	cmpne	r17,r17,zero
   1cd74:	0007883a 	mov	r3,zero
   1cd78:	003f8b06 	br	1cba8 <__alt_data_end+0xfc01cba8>
   1cd7c:	0141ffc4 	movi	r5,2047
   1cd80:	11403b26 	beq	r2,r5,1ce70 <__adddf3+0x780>
   1cd84:	0109c83a 	sub	r4,zero,r4
   1cd88:	42002034 	orhi	r8,r8,128
   1cd8c:	01400e04 	movi	r5,56
   1cd90:	29006716 	blt	r5,r4,1cf30 <__adddf3+0x840>
   1cd94:	014007c4 	movi	r5,31
   1cd98:	29007016 	blt	r5,r4,1cf5c <__adddf3+0x86c>
   1cd9c:	01400804 	movi	r5,32
   1cda0:	290bc83a 	sub	r5,r5,r4
   1cda4:	4154983a 	sll	r10,r8,r5
   1cda8:	890ed83a 	srl	r7,r17,r4
   1cdac:	894a983a 	sll	r5,r17,r5
   1cdb0:	4108d83a 	srl	r4,r8,r4
   1cdb4:	51e2b03a 	or	r17,r10,r7
   1cdb8:	280ac03a 	cmpne	r5,r5,zero
   1cdbc:	8962b03a 	or	r17,r17,r5
   1cdc0:	89a3883a 	add	r17,r17,r6
   1cdc4:	2253883a 	add	r9,r4,r9
   1cdc8:	898d803a 	cmpltu	r6,r17,r6
   1cdcc:	3251883a 	add	r8,r6,r9
   1cdd0:	1021883a 	mov	r16,r2
   1cdd4:	003ee506 	br	1c96c <__alt_data_end+0xfc01c96c>
   1cdd8:	4984b03a 	or	r2,r9,r6
   1cddc:	103e6326 	beq	r2,zero,1c76c <__alt_data_end+0xfc01c76c>
   1cde0:	8987c83a 	sub	r3,r17,r6
   1cde4:	88c9803a 	cmpltu	r4,r17,r3
   1cde8:	4245c83a 	sub	r2,r8,r9
   1cdec:	1105c83a 	sub	r2,r2,r4
   1cdf0:	1100202c 	andhi	r4,r2,128
   1cdf4:	203ebb26 	beq	r4,zero,1c8e4 <__alt_data_end+0xfc01c8e4>
   1cdf8:	3463c83a 	sub	r17,r6,r17
   1cdfc:	4a07c83a 	sub	r3,r9,r8
   1ce00:	344d803a 	cmpltu	r6,r6,r17
   1ce04:	1991c83a 	sub	r8,r3,r6
   1ce08:	3825883a 	mov	r18,r7
   1ce0c:	003e5706 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ce10:	4984b03a 	or	r2,r9,r6
   1ce14:	10002e26 	beq	r2,zero,1ced0 <__adddf3+0x7e0>
   1ce18:	4004d0fa 	srli	r2,r8,3
   1ce1c:	8822d0fa 	srli	r17,r17,3
   1ce20:	4010977a 	slli	r8,r8,29
   1ce24:	10c0022c 	andhi	r3,r2,8
   1ce28:	4462b03a 	or	r17,r8,r17
   1ce2c:	18000826 	beq	r3,zero,1ce50 <__adddf3+0x760>
   1ce30:	4808d0fa 	srli	r4,r9,3
   1ce34:	20c0022c 	andhi	r3,r4,8
   1ce38:	1800051e 	bne	r3,zero,1ce50 <__adddf3+0x760>
   1ce3c:	300cd0fa 	srli	r6,r6,3
   1ce40:	4806977a 	slli	r3,r9,29
   1ce44:	2005883a 	mov	r2,r4
   1ce48:	3825883a 	mov	r18,r7
   1ce4c:	19a2b03a 	or	r17,r3,r6
   1ce50:	8810d77a 	srli	r8,r17,29
   1ce54:	100490fa 	slli	r2,r2,3
   1ce58:	882290fa 	slli	r17,r17,3
   1ce5c:	0401ffc4 	movi	r16,2047
   1ce60:	4090b03a 	or	r8,r8,r2
   1ce64:	003e4106 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ce68:	0141ffc4 	movi	r5,2047
   1ce6c:	117fc71e 	bne	r2,r5,1cd8c <__alt_data_end+0xfc01cd8c>
   1ce70:	4811883a 	mov	r8,r9
   1ce74:	3023883a 	mov	r17,r6
   1ce78:	1021883a 	mov	r16,r2
   1ce7c:	003e3b06 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ce80:	10002f26 	beq	r2,zero,1cf40 <__adddf3+0x850>
   1ce84:	4984b03a 	or	r2,r9,r6
   1ce88:	10001126 	beq	r2,zero,1ced0 <__adddf3+0x7e0>
   1ce8c:	4004d0fa 	srli	r2,r8,3
   1ce90:	8822d0fa 	srli	r17,r17,3
   1ce94:	4010977a 	slli	r8,r8,29
   1ce98:	10c0022c 	andhi	r3,r2,8
   1ce9c:	4462b03a 	or	r17,r8,r17
   1cea0:	183feb26 	beq	r3,zero,1ce50 <__alt_data_end+0xfc01ce50>
   1cea4:	4808d0fa 	srli	r4,r9,3
   1cea8:	20c0022c 	andhi	r3,r4,8
   1ceac:	183fe81e 	bne	r3,zero,1ce50 <__alt_data_end+0xfc01ce50>
   1ceb0:	300cd0fa 	srli	r6,r6,3
   1ceb4:	4806977a 	slli	r3,r9,29
   1ceb8:	2005883a 	mov	r2,r4
   1cebc:	19a2b03a 	or	r17,r3,r6
   1cec0:	003fe306 	br	1ce50 <__alt_data_end+0xfc01ce50>
   1cec4:	0011883a 	mov	r8,zero
   1cec8:	0005883a 	mov	r2,zero
   1cecc:	003e3f06 	br	1c7cc <__alt_data_end+0xfc01c7cc>
   1ced0:	0401ffc4 	movi	r16,2047
   1ced4:	003e2506 	br	1c76c <__alt_data_end+0xfc01c76c>
   1ced8:	0013883a 	mov	r9,zero
   1cedc:	003f8406 	br	1ccf0 <__alt_data_end+0xfc01ccf0>
   1cee0:	0005883a 	mov	r2,zero
   1cee4:	0007883a 	mov	r3,zero
   1cee8:	003e8906 	br	1c910 <__alt_data_end+0xfc01c910>
   1ceec:	197ff804 	addi	r5,r3,-32
   1cef0:	01000804 	movi	r4,32
   1cef4:	414ad83a 	srl	r5,r8,r5
   1cef8:	19002426 	beq	r3,r4,1cf8c <__adddf3+0x89c>
   1cefc:	01001004 	movi	r4,64
   1cf00:	20c7c83a 	sub	r3,r4,r3
   1cf04:	40c6983a 	sll	r3,r8,r3
   1cf08:	1c46b03a 	or	r3,r3,r17
   1cf0c:	1806c03a 	cmpne	r3,r3,zero
   1cf10:	28e2b03a 	or	r17,r5,r3
   1cf14:	0007883a 	mov	r3,zero
   1cf18:	003f2306 	br	1cba8 <__alt_data_end+0xfc01cba8>
   1cf1c:	0007883a 	mov	r3,zero
   1cf20:	5811883a 	mov	r8,r11
   1cf24:	00bfffc4 	movi	r2,-1
   1cf28:	0401ffc4 	movi	r16,2047
   1cf2c:	003e7806 	br	1c910 <__alt_data_end+0xfc01c910>
   1cf30:	4462b03a 	or	r17,r8,r17
   1cf34:	8822c03a 	cmpne	r17,r17,zero
   1cf38:	0009883a 	mov	r4,zero
   1cf3c:	003fa006 	br	1cdc0 <__alt_data_end+0xfc01cdc0>
   1cf40:	4811883a 	mov	r8,r9
   1cf44:	3023883a 	mov	r17,r6
   1cf48:	0401ffc4 	movi	r16,2047
   1cf4c:	003e0706 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cf50:	4811883a 	mov	r8,r9
   1cf54:	3023883a 	mov	r17,r6
   1cf58:	003e0406 	br	1c76c <__alt_data_end+0xfc01c76c>
   1cf5c:	21fff804 	addi	r7,r4,-32
   1cf60:	01400804 	movi	r5,32
   1cf64:	41ced83a 	srl	r7,r8,r7
   1cf68:	21400a26 	beq	r4,r5,1cf94 <__adddf3+0x8a4>
   1cf6c:	01401004 	movi	r5,64
   1cf70:	2909c83a 	sub	r4,r5,r4
   1cf74:	4108983a 	sll	r4,r8,r4
   1cf78:	2448b03a 	or	r4,r4,r17
   1cf7c:	2008c03a 	cmpne	r4,r4,zero
   1cf80:	3922b03a 	or	r17,r7,r4
   1cf84:	0009883a 	mov	r4,zero
   1cf88:	003f8d06 	br	1cdc0 <__alt_data_end+0xfc01cdc0>
   1cf8c:	0007883a 	mov	r3,zero
   1cf90:	003fdd06 	br	1cf08 <__alt_data_end+0xfc01cf08>
   1cf94:	0009883a 	mov	r4,zero
   1cf98:	003ff706 	br	1cf78 <__alt_data_end+0xfc01cf78>

0001cf9c <__divdf3>:
   1cf9c:	defff004 	addi	sp,sp,-64
   1cfa0:	dc800815 	stw	r18,32(sp)
   1cfa4:	2824d53a 	srli	r18,r5,20
   1cfa8:	dd800c15 	stw	r22,48(sp)
   1cfac:	282cd7fa 	srli	r22,r5,31
   1cfb0:	dc000615 	stw	r16,24(sp)
   1cfb4:	04000434 	movhi	r16,16
   1cfb8:	843fffc4 	addi	r16,r16,-1
   1cfbc:	dfc00f15 	stw	ra,60(sp)
   1cfc0:	df000e15 	stw	fp,56(sp)
   1cfc4:	ddc00d15 	stw	r23,52(sp)
   1cfc8:	dd400b15 	stw	r21,44(sp)
   1cfcc:	dd000a15 	stw	r20,40(sp)
   1cfd0:	dcc00915 	stw	r19,36(sp)
   1cfd4:	dc400715 	stw	r17,28(sp)
   1cfd8:	9481ffcc 	andi	r18,r18,2047
   1cfdc:	2c20703a 	and	r16,r5,r16
   1cfe0:	b2003fcc 	andi	r8,r22,255
   1cfe4:	90006126 	beq	r18,zero,1d16c <__divdf3+0x1d0>
   1cfe8:	0081ffc4 	movi	r2,2047
   1cfec:	202b883a 	mov	r21,r4
   1cff0:	90803726 	beq	r18,r2,1d0d0 <__divdf3+0x134>
   1cff4:	80800434 	orhi	r2,r16,16
   1cff8:	100490fa 	slli	r2,r2,3
   1cffc:	2020d77a 	srli	r16,r4,29
   1d000:	202a90fa 	slli	r21,r4,3
   1d004:	94bf0044 	addi	r18,r18,-1023
   1d008:	80a0b03a 	or	r16,r16,r2
   1d00c:	0013883a 	mov	r9,zero
   1d010:	000b883a 	mov	r5,zero
   1d014:	3806d53a 	srli	r3,r7,20
   1d018:	382ed7fa 	srli	r23,r7,31
   1d01c:	04400434 	movhi	r17,16
   1d020:	8c7fffc4 	addi	r17,r17,-1
   1d024:	18c1ffcc 	andi	r3,r3,2047
   1d028:	3029883a 	mov	r20,r6
   1d02c:	3c62703a 	and	r17,r7,r17
   1d030:	bf003fcc 	andi	fp,r23,255
   1d034:	18006e26 	beq	r3,zero,1d1f0 <__divdf3+0x254>
   1d038:	0081ffc4 	movi	r2,2047
   1d03c:	18806626 	beq	r3,r2,1d1d8 <__divdf3+0x23c>
   1d040:	88800434 	orhi	r2,r17,16
   1d044:	100490fa 	slli	r2,r2,3
   1d048:	3022d77a 	srli	r17,r6,29
   1d04c:	302890fa 	slli	r20,r6,3
   1d050:	18ff0044 	addi	r3,r3,-1023
   1d054:	88a2b03a 	or	r17,r17,r2
   1d058:	000f883a 	mov	r7,zero
   1d05c:	b5e6f03a 	xor	r19,r22,r23
   1d060:	3a4cb03a 	or	r6,r7,r9
   1d064:	008003c4 	movi	r2,15
   1d068:	9809883a 	mov	r4,r19
   1d06c:	90c7c83a 	sub	r3,r18,r3
   1d070:	9cc03fcc 	andi	r19,r19,255
   1d074:	11809636 	bltu	r2,r6,1d2d0 <__divdf3+0x334>
   1d078:	300c90ba 	slli	r6,r6,2
   1d07c:	008000b4 	movhi	r2,2
   1d080:	10b42404 	addi	r2,r2,-12144
   1d084:	308d883a 	add	r6,r6,r2
   1d088:	30800017 	ldw	r2,0(r6)
   1d08c:	1000683a 	jmp	r2
   1d090:	0001d2d0 	cmplti	zero,zero,1867
   1d094:	0001d108 	cmpgei	zero,zero,1860
   1d098:	0001d2c0 	call	1d2c <_ZN3USB17DefaultAddressingEhhb+0x120>
   1d09c:	0001d0fc 	xorhi	zero,zero,1859
   1d0a0:	0001d2c0 	call	1d2c <_ZN3USB17DefaultAddressingEhhb+0x120>
   1d0a4:	0001d294 	movui	zero,1866
   1d0a8:	0001d2c0 	call	1d2c <_ZN3USB17DefaultAddressingEhhb+0x120>
   1d0ac:	0001d0fc 	xorhi	zero,zero,1859
   1d0b0:	0001d108 	cmpgei	zero,zero,1860
   1d0b4:	0001d108 	cmpgei	zero,zero,1860
   1d0b8:	0001d294 	movui	zero,1866
   1d0bc:	0001d0fc 	xorhi	zero,zero,1859
   1d0c0:	0001d0ec 	andhi	zero,zero,1859
   1d0c4:	0001d0ec 	andhi	zero,zero,1859
   1d0c8:	0001d0ec 	andhi	zero,zero,1859
   1d0cc:	0001d658 	cmpnei	zero,zero,1881
   1d0d0:	2404b03a 	or	r2,r4,r16
   1d0d4:	10006c1e 	bne	r2,zero,1d288 <__divdf3+0x2ec>
   1d0d8:	02400204 	movi	r9,8
   1d0dc:	0021883a 	mov	r16,zero
   1d0e0:	002b883a 	mov	r21,zero
   1d0e4:	01400084 	movi	r5,2
   1d0e8:	003fca06 	br	1d014 <__alt_data_end+0xfc01d014>
   1d0ec:	8023883a 	mov	r17,r16
   1d0f0:	a829883a 	mov	r20,r21
   1d0f4:	4039883a 	mov	fp,r8
   1d0f8:	280f883a 	mov	r7,r5
   1d0fc:	00800084 	movi	r2,2
   1d100:	3881601e 	bne	r7,r2,1d684 <__divdf3+0x6e8>
   1d104:	e027883a 	mov	r19,fp
   1d108:	9900004c 	andi	r4,r19,1
   1d10c:	0081ffc4 	movi	r2,2047
   1d110:	0021883a 	mov	r16,zero
   1d114:	002b883a 	mov	r21,zero
   1d118:	1004953a 	slli	r2,r2,20
   1d11c:	20c03fcc 	andi	r3,r4,255
   1d120:	01400434 	movhi	r5,16
   1d124:	297fffc4 	addi	r5,r5,-1
   1d128:	180697fa 	slli	r3,r3,31
   1d12c:	8160703a 	and	r16,r16,r5
   1d130:	80a0b03a 	or	r16,r16,r2
   1d134:	80c6b03a 	or	r3,r16,r3
   1d138:	a805883a 	mov	r2,r21
   1d13c:	dfc00f17 	ldw	ra,60(sp)
   1d140:	df000e17 	ldw	fp,56(sp)
   1d144:	ddc00d17 	ldw	r23,52(sp)
   1d148:	dd800c17 	ldw	r22,48(sp)
   1d14c:	dd400b17 	ldw	r21,44(sp)
   1d150:	dd000a17 	ldw	r20,40(sp)
   1d154:	dcc00917 	ldw	r19,36(sp)
   1d158:	dc800817 	ldw	r18,32(sp)
   1d15c:	dc400717 	ldw	r17,28(sp)
   1d160:	dc000617 	ldw	r16,24(sp)
   1d164:	dec01004 	addi	sp,sp,64
   1d168:	f800283a 	ret
   1d16c:	2404b03a 	or	r2,r4,r16
   1d170:	2023883a 	mov	r17,r4
   1d174:	10003f26 	beq	r2,zero,1d274 <__divdf3+0x2d8>
   1d178:	80015e26 	beq	r16,zero,1d6f4 <__divdf3+0x758>
   1d17c:	8009883a 	mov	r4,r16
   1d180:	d9800215 	stw	r6,8(sp)
   1d184:	d9c00515 	stw	r7,20(sp)
   1d188:	da000415 	stw	r8,16(sp)
   1d18c:	000e3bc0 	call	e3bc <__clzsi2>
   1d190:	d9800217 	ldw	r6,8(sp)
   1d194:	d9c00517 	ldw	r7,20(sp)
   1d198:	da000417 	ldw	r8,16(sp)
   1d19c:	113ffd44 	addi	r4,r2,-11
   1d1a0:	00c00704 	movi	r3,28
   1d1a4:	19014f16 	blt	r3,r4,1d6e4 <__divdf3+0x748>
   1d1a8:	00c00744 	movi	r3,29
   1d1ac:	157ffe04 	addi	r21,r2,-8
   1d1b0:	1907c83a 	sub	r3,r3,r4
   1d1b4:	8560983a 	sll	r16,r16,r21
   1d1b8:	88c6d83a 	srl	r3,r17,r3
   1d1bc:	8d6a983a 	sll	r21,r17,r21
   1d1c0:	1c20b03a 	or	r16,r3,r16
   1d1c4:	1080fcc4 	addi	r2,r2,1011
   1d1c8:	00a5c83a 	sub	r18,zero,r2
   1d1cc:	0013883a 	mov	r9,zero
   1d1d0:	000b883a 	mov	r5,zero
   1d1d4:	003f8f06 	br	1d014 <__alt_data_end+0xfc01d014>
   1d1d8:	3444b03a 	or	r2,r6,r17
   1d1dc:	1000231e 	bne	r2,zero,1d26c <__divdf3+0x2d0>
   1d1e0:	0023883a 	mov	r17,zero
   1d1e4:	0029883a 	mov	r20,zero
   1d1e8:	01c00084 	movi	r7,2
   1d1ec:	003f9b06 	br	1d05c <__alt_data_end+0xfc01d05c>
   1d1f0:	3444b03a 	or	r2,r6,r17
   1d1f4:	10001926 	beq	r2,zero,1d25c <__divdf3+0x2c0>
   1d1f8:	88014b26 	beq	r17,zero,1d728 <__divdf3+0x78c>
   1d1fc:	8809883a 	mov	r4,r17
   1d200:	d9400115 	stw	r5,4(sp)
   1d204:	d9800215 	stw	r6,8(sp)
   1d208:	da000415 	stw	r8,16(sp)
   1d20c:	da400315 	stw	r9,12(sp)
   1d210:	000e3bc0 	call	e3bc <__clzsi2>
   1d214:	d9400117 	ldw	r5,4(sp)
   1d218:	d9800217 	ldw	r6,8(sp)
   1d21c:	da000417 	ldw	r8,16(sp)
   1d220:	da400317 	ldw	r9,12(sp)
   1d224:	113ffd44 	addi	r4,r2,-11
   1d228:	00c00704 	movi	r3,28
   1d22c:	19013a16 	blt	r3,r4,1d718 <__divdf3+0x77c>
   1d230:	00c00744 	movi	r3,29
   1d234:	153ffe04 	addi	r20,r2,-8
   1d238:	1907c83a 	sub	r3,r3,r4
   1d23c:	8d22983a 	sll	r17,r17,r20
   1d240:	30c6d83a 	srl	r3,r6,r3
   1d244:	3528983a 	sll	r20,r6,r20
   1d248:	1c62b03a 	or	r17,r3,r17
   1d24c:	1080fcc4 	addi	r2,r2,1011
   1d250:	0087c83a 	sub	r3,zero,r2
   1d254:	000f883a 	mov	r7,zero
   1d258:	003f8006 	br	1d05c <__alt_data_end+0xfc01d05c>
   1d25c:	0023883a 	mov	r17,zero
   1d260:	0029883a 	mov	r20,zero
   1d264:	01c00044 	movi	r7,1
   1d268:	003f7c06 	br	1d05c <__alt_data_end+0xfc01d05c>
   1d26c:	01c000c4 	movi	r7,3
   1d270:	003f7a06 	br	1d05c <__alt_data_end+0xfc01d05c>
   1d274:	02400104 	movi	r9,4
   1d278:	0021883a 	mov	r16,zero
   1d27c:	002b883a 	mov	r21,zero
   1d280:	01400044 	movi	r5,1
   1d284:	003f6306 	br	1d014 <__alt_data_end+0xfc01d014>
   1d288:	02400304 	movi	r9,12
   1d28c:	014000c4 	movi	r5,3
   1d290:	003f6006 	br	1d014 <__alt_data_end+0xfc01d014>
   1d294:	04000434 	movhi	r16,16
   1d298:	0009883a 	mov	r4,zero
   1d29c:	843fffc4 	addi	r16,r16,-1
   1d2a0:	057fffc4 	movi	r21,-1
   1d2a4:	0081ffc4 	movi	r2,2047
   1d2a8:	003f9b06 	br	1d118 <__alt_data_end+0xfc01d118>
   1d2ac:	00c00044 	movi	r3,1
   1d2b0:	1887c83a 	sub	r3,r3,r2
   1d2b4:	01000e04 	movi	r4,56
   1d2b8:	20c1530e 	bge	r4,r3,1d808 <__divdf3+0x86c>
   1d2bc:	9900004c 	andi	r4,r19,1
   1d2c0:	0005883a 	mov	r2,zero
   1d2c4:	0021883a 	mov	r16,zero
   1d2c8:	002b883a 	mov	r21,zero
   1d2cc:	003f9206 	br	1d118 <__alt_data_end+0xfc01d118>
   1d2d0:	8c012e36 	bltu	r17,r16,1d78c <__divdf3+0x7f0>
   1d2d4:	84412c26 	beq	r16,r17,1d788 <__divdf3+0x7ec>
   1d2d8:	a82f883a 	mov	r23,r21
   1d2dc:	18ffffc4 	addi	r3,r3,-1
   1d2e0:	002b883a 	mov	r21,zero
   1d2e4:	a004d63a 	srli	r2,r20,24
   1d2e8:	8822923a 	slli	r17,r17,8
   1d2ec:	a028923a 	slli	r20,r20,8
   1d2f0:	8009883a 	mov	r4,r16
   1d2f4:	88acb03a 	or	r22,r17,r2
   1d2f8:	dd000015 	stw	r20,0(sp)
   1d2fc:	b028d43a 	srli	r20,r22,16
   1d300:	d8c00215 	stw	r3,8(sp)
   1d304:	b4bfffcc 	andi	r18,r22,65535
   1d308:	a00b883a 	mov	r5,r20
   1d30c:	000ce480 	call	ce48 <__udivsi3>
   1d310:	100b883a 	mov	r5,r2
   1d314:	9009883a 	mov	r4,r18
   1d318:	1023883a 	mov	r17,r2
   1d31c:	000cf040 	call	cf04 <__mulsi3>
   1d320:	8009883a 	mov	r4,r16
   1d324:	a00b883a 	mov	r5,r20
   1d328:	1039883a 	mov	fp,r2
   1d32c:	000ceac0 	call	ceac <__umodsi3>
   1d330:	1004943a 	slli	r2,r2,16
   1d334:	b808d43a 	srli	r4,r23,16
   1d338:	d8c00217 	ldw	r3,8(sp)
   1d33c:	2084b03a 	or	r2,r4,r2
   1d340:	1700062e 	bgeu	r2,fp,1d35c <__divdf3+0x3c0>
   1d344:	1585883a 	add	r2,r2,r22
   1d348:	893fffc4 	addi	r4,r17,-1
   1d34c:	15811d36 	bltu	r2,r22,1d7c4 <__divdf3+0x828>
   1d350:	17011c2e 	bgeu	r2,fp,1d7c4 <__divdf3+0x828>
   1d354:	8c7fff84 	addi	r17,r17,-2
   1d358:	1585883a 	add	r2,r2,r22
   1d35c:	1739c83a 	sub	fp,r2,fp
   1d360:	a00b883a 	mov	r5,r20
   1d364:	e009883a 	mov	r4,fp
   1d368:	d8c00215 	stw	r3,8(sp)
   1d36c:	000ce480 	call	ce48 <__udivsi3>
   1d370:	100b883a 	mov	r5,r2
   1d374:	9009883a 	mov	r4,r18
   1d378:	1021883a 	mov	r16,r2
   1d37c:	000cf040 	call	cf04 <__mulsi3>
   1d380:	a00b883a 	mov	r5,r20
   1d384:	e009883a 	mov	r4,fp
   1d388:	d8800415 	stw	r2,16(sp)
   1d38c:	000ceac0 	call	ceac <__umodsi3>
   1d390:	1004943a 	slli	r2,r2,16
   1d394:	da000417 	ldw	r8,16(sp)
   1d398:	bdffffcc 	andi	r23,r23,65535
   1d39c:	b884b03a 	or	r2,r23,r2
   1d3a0:	d8c00217 	ldw	r3,8(sp)
   1d3a4:	1200062e 	bgeu	r2,r8,1d3c0 <__divdf3+0x424>
   1d3a8:	1585883a 	add	r2,r2,r22
   1d3ac:	813fffc4 	addi	r4,r16,-1
   1d3b0:	15810236 	bltu	r2,r22,1d7bc <__divdf3+0x820>
   1d3b4:	1201012e 	bgeu	r2,r8,1d7bc <__divdf3+0x820>
   1d3b8:	843fff84 	addi	r16,r16,-2
   1d3bc:	1585883a 	add	r2,r2,r22
   1d3c0:	8822943a 	slli	r17,r17,16
   1d3c4:	d9800017 	ldw	r6,0(sp)
   1d3c8:	1211c83a 	sub	r8,r2,r8
   1d3cc:	8c22b03a 	or	r17,r17,r16
   1d3d0:	373fffcc 	andi	fp,r6,65535
   1d3d4:	8abfffcc 	andi	r10,r17,65535
   1d3d8:	8820d43a 	srli	r16,r17,16
   1d3dc:	5009883a 	mov	r4,r10
   1d3e0:	e00b883a 	mov	r5,fp
   1d3e4:	302ed43a 	srli	r23,r6,16
   1d3e8:	d8c00215 	stw	r3,8(sp)
   1d3ec:	da000415 	stw	r8,16(sp)
   1d3f0:	da800115 	stw	r10,4(sp)
   1d3f4:	000cf040 	call	cf04 <__mulsi3>
   1d3f8:	800b883a 	mov	r5,r16
   1d3fc:	e009883a 	mov	r4,fp
   1d400:	d8800515 	stw	r2,20(sp)
   1d404:	000cf040 	call	cf04 <__mulsi3>
   1d408:	8009883a 	mov	r4,r16
   1d40c:	b80b883a 	mov	r5,r23
   1d410:	d8800315 	stw	r2,12(sp)
   1d414:	000cf040 	call	cf04 <__mulsi3>
   1d418:	da800117 	ldw	r10,4(sp)
   1d41c:	b80b883a 	mov	r5,r23
   1d420:	1021883a 	mov	r16,r2
   1d424:	5009883a 	mov	r4,r10
   1d428:	000cf040 	call	cf04 <__mulsi3>
   1d42c:	d9c00517 	ldw	r7,20(sp)
   1d430:	da400317 	ldw	r9,12(sp)
   1d434:	d8c00217 	ldw	r3,8(sp)
   1d438:	3808d43a 	srli	r4,r7,16
   1d43c:	1245883a 	add	r2,r2,r9
   1d440:	da000417 	ldw	r8,16(sp)
   1d444:	2085883a 	add	r2,r4,r2
   1d448:	1240022e 	bgeu	r2,r9,1d454 <__divdf3+0x4b8>
   1d44c:	01000074 	movhi	r4,1
   1d450:	8121883a 	add	r16,r16,r4
   1d454:	1008d43a 	srli	r4,r2,16
   1d458:	1004943a 	slli	r2,r2,16
   1d45c:	39ffffcc 	andi	r7,r7,65535
   1d460:	2409883a 	add	r4,r4,r16
   1d464:	11c5883a 	add	r2,r2,r7
   1d468:	4100bb36 	bltu	r8,r4,1d758 <__divdf3+0x7bc>
   1d46c:	4100d726 	beq	r8,r4,1d7cc <__divdf3+0x830>
   1d470:	4109c83a 	sub	r4,r8,r4
   1d474:	a8a1c83a 	sub	r16,r21,r2
   1d478:	ac2b803a 	cmpltu	r21,r21,r16
   1d47c:	256bc83a 	sub	r21,r4,r21
   1d480:	b540d926 	beq	r22,r21,1d7e8 <__divdf3+0x84c>
   1d484:	a00b883a 	mov	r5,r20
   1d488:	a809883a 	mov	r4,r21
   1d48c:	d8c00215 	stw	r3,8(sp)
   1d490:	000ce480 	call	ce48 <__udivsi3>
   1d494:	100b883a 	mov	r5,r2
   1d498:	9009883a 	mov	r4,r18
   1d49c:	d8800515 	stw	r2,20(sp)
   1d4a0:	000cf040 	call	cf04 <__mulsi3>
   1d4a4:	a809883a 	mov	r4,r21
   1d4a8:	a00b883a 	mov	r5,r20
   1d4ac:	d8800415 	stw	r2,16(sp)
   1d4b0:	000ceac0 	call	ceac <__umodsi3>
   1d4b4:	1004943a 	slli	r2,r2,16
   1d4b8:	8008d43a 	srli	r4,r16,16
   1d4bc:	da000417 	ldw	r8,16(sp)
   1d4c0:	d8c00217 	ldw	r3,8(sp)
   1d4c4:	2084b03a 	or	r2,r4,r2
   1d4c8:	d9c00517 	ldw	r7,20(sp)
   1d4cc:	1200062e 	bgeu	r2,r8,1d4e8 <__divdf3+0x54c>
   1d4d0:	1585883a 	add	r2,r2,r22
   1d4d4:	393fffc4 	addi	r4,r7,-1
   1d4d8:	1580c536 	bltu	r2,r22,1d7f0 <__divdf3+0x854>
   1d4dc:	1200c42e 	bgeu	r2,r8,1d7f0 <__divdf3+0x854>
   1d4e0:	39ffff84 	addi	r7,r7,-2
   1d4e4:	1585883a 	add	r2,r2,r22
   1d4e8:	122bc83a 	sub	r21,r2,r8
   1d4ec:	a00b883a 	mov	r5,r20
   1d4f0:	a809883a 	mov	r4,r21
   1d4f4:	d8c00215 	stw	r3,8(sp)
   1d4f8:	d9c00515 	stw	r7,20(sp)
   1d4fc:	000ce480 	call	ce48 <__udivsi3>
   1d500:	9009883a 	mov	r4,r18
   1d504:	100b883a 	mov	r5,r2
   1d508:	d8800415 	stw	r2,16(sp)
   1d50c:	000cf040 	call	cf04 <__mulsi3>
   1d510:	a809883a 	mov	r4,r21
   1d514:	a00b883a 	mov	r5,r20
   1d518:	1025883a 	mov	r18,r2
   1d51c:	000ceac0 	call	ceac <__umodsi3>
   1d520:	1004943a 	slli	r2,r2,16
   1d524:	813fffcc 	andi	r4,r16,65535
   1d528:	d8c00217 	ldw	r3,8(sp)
   1d52c:	20a0b03a 	or	r16,r4,r2
   1d530:	d9c00517 	ldw	r7,20(sp)
   1d534:	da000417 	ldw	r8,16(sp)
   1d538:	8480062e 	bgeu	r16,r18,1d554 <__divdf3+0x5b8>
   1d53c:	85a1883a 	add	r16,r16,r22
   1d540:	40bfffc4 	addi	r2,r8,-1
   1d544:	8580ac36 	bltu	r16,r22,1d7f8 <__divdf3+0x85c>
   1d548:	8480ab2e 	bgeu	r16,r18,1d7f8 <__divdf3+0x85c>
   1d54c:	423fff84 	addi	r8,r8,-2
   1d550:	85a1883a 	add	r16,r16,r22
   1d554:	3804943a 	slli	r2,r7,16
   1d558:	84a1c83a 	sub	r16,r16,r18
   1d55c:	e009883a 	mov	r4,fp
   1d560:	1228b03a 	or	r20,r2,r8
   1d564:	a1ffffcc 	andi	r7,r20,65535
   1d568:	a024d43a 	srli	r18,r20,16
   1d56c:	380b883a 	mov	r5,r7
   1d570:	d8c00215 	stw	r3,8(sp)
   1d574:	d9c00515 	stw	r7,20(sp)
   1d578:	000cf040 	call	cf04 <__mulsi3>
   1d57c:	900b883a 	mov	r5,r18
   1d580:	e009883a 	mov	r4,fp
   1d584:	102b883a 	mov	r21,r2
   1d588:	000cf040 	call	cf04 <__mulsi3>
   1d58c:	900b883a 	mov	r5,r18
   1d590:	b809883a 	mov	r4,r23
   1d594:	1039883a 	mov	fp,r2
   1d598:	000cf040 	call	cf04 <__mulsi3>
   1d59c:	d9c00517 	ldw	r7,20(sp)
   1d5a0:	b80b883a 	mov	r5,r23
   1d5a4:	1025883a 	mov	r18,r2
   1d5a8:	3809883a 	mov	r4,r7
   1d5ac:	000cf040 	call	cf04 <__mulsi3>
   1d5b0:	a808d43a 	srli	r4,r21,16
   1d5b4:	1705883a 	add	r2,r2,fp
   1d5b8:	d8c00217 	ldw	r3,8(sp)
   1d5bc:	2085883a 	add	r2,r4,r2
   1d5c0:	1700022e 	bgeu	r2,fp,1d5cc <__divdf3+0x630>
   1d5c4:	01000074 	movhi	r4,1
   1d5c8:	9125883a 	add	r18,r18,r4
   1d5cc:	1008d43a 	srli	r4,r2,16
   1d5d0:	1004943a 	slli	r2,r2,16
   1d5d4:	ad7fffcc 	andi	r21,r21,65535
   1d5d8:	2489883a 	add	r4,r4,r18
   1d5dc:	1545883a 	add	r2,r2,r21
   1d5e0:	81003836 	bltu	r16,r4,1d6c4 <__divdf3+0x728>
   1d5e4:	81003626 	beq	r16,r4,1d6c0 <__divdf3+0x724>
   1d5e8:	a5000054 	ori	r20,r20,1
   1d5ec:	1880ffc4 	addi	r2,r3,1023
   1d5f0:	00bf2e0e 	bge	zero,r2,1d2ac <__alt_data_end+0xfc01d2ac>
   1d5f4:	a10001cc 	andi	r4,r20,7
   1d5f8:	20000726 	beq	r4,zero,1d618 <__divdf3+0x67c>
   1d5fc:	a10003cc 	andi	r4,r20,15
   1d600:	01400104 	movi	r5,4
   1d604:	21400426 	beq	r4,r5,1d618 <__divdf3+0x67c>
   1d608:	a149883a 	add	r4,r20,r5
   1d60c:	2529803a 	cmpltu	r20,r4,r20
   1d610:	8d23883a 	add	r17,r17,r20
   1d614:	2029883a 	mov	r20,r4
   1d618:	8900402c 	andhi	r4,r17,256
   1d61c:	20000426 	beq	r4,zero,1d630 <__divdf3+0x694>
   1d620:	18810004 	addi	r2,r3,1024
   1d624:	00ffc034 	movhi	r3,65280
   1d628:	18ffffc4 	addi	r3,r3,-1
   1d62c:	88e2703a 	and	r17,r17,r3
   1d630:	00c1ff84 	movi	r3,2046
   1d634:	18beb416 	blt	r3,r2,1d108 <__alt_data_end+0xfc01d108>
   1d638:	a028d0fa 	srli	r20,r20,3
   1d63c:	882a977a 	slli	r21,r17,29
   1d640:	8820927a 	slli	r16,r17,9
   1d644:	1081ffcc 	andi	r2,r2,2047
   1d648:	ad2ab03a 	or	r21,r21,r20
   1d64c:	8020d33a 	srli	r16,r16,12
   1d650:	9900004c 	andi	r4,r19,1
   1d654:	003eb006 	br	1d118 <__alt_data_end+0xfc01d118>
   1d658:	8080022c 	andhi	r2,r16,8
   1d65c:	10001226 	beq	r2,zero,1d6a8 <__divdf3+0x70c>
   1d660:	8880022c 	andhi	r2,r17,8
   1d664:	1000101e 	bne	r2,zero,1d6a8 <__divdf3+0x70c>
   1d668:	00800434 	movhi	r2,16
   1d66c:	8c000234 	orhi	r16,r17,8
   1d670:	10bfffc4 	addi	r2,r2,-1
   1d674:	b809883a 	mov	r4,r23
   1d678:	80a0703a 	and	r16,r16,r2
   1d67c:	a02b883a 	mov	r21,r20
   1d680:	003f0806 	br	1d2a4 <__alt_data_end+0xfc01d2a4>
   1d684:	008000c4 	movi	r2,3
   1d688:	3880b126 	beq	r7,r2,1d950 <__divdf3+0x9b4>
   1d68c:	00800044 	movi	r2,1
   1d690:	38805b1e 	bne	r7,r2,1d800 <__divdf3+0x864>
   1d694:	e009883a 	mov	r4,fp
   1d698:	0005883a 	mov	r2,zero
   1d69c:	0021883a 	mov	r16,zero
   1d6a0:	002b883a 	mov	r21,zero
   1d6a4:	003e9c06 	br	1d118 <__alt_data_end+0xfc01d118>
   1d6a8:	00800434 	movhi	r2,16
   1d6ac:	84000234 	orhi	r16,r16,8
   1d6b0:	10bfffc4 	addi	r2,r2,-1
   1d6b4:	b009883a 	mov	r4,r22
   1d6b8:	80a0703a 	and	r16,r16,r2
   1d6bc:	003ef906 	br	1d2a4 <__alt_data_end+0xfc01d2a4>
   1d6c0:	103fca26 	beq	r2,zero,1d5ec <__alt_data_end+0xfc01d5ec>
   1d6c4:	b421883a 	add	r16,r22,r16
   1d6c8:	a17fffc4 	addi	r5,r20,-1
   1d6cc:	8580422e 	bgeu	r16,r22,1d7d8 <__divdf3+0x83c>
   1d6d0:	2829883a 	mov	r20,r5
   1d6d4:	813fc41e 	bne	r16,r4,1d5e8 <__alt_data_end+0xfc01d5e8>
   1d6d8:	d9800017 	ldw	r6,0(sp)
   1d6dc:	30bfc21e 	bne	r6,r2,1d5e8 <__alt_data_end+0xfc01d5e8>
   1d6e0:	003fc206 	br	1d5ec <__alt_data_end+0xfc01d5ec>
   1d6e4:	143ff604 	addi	r16,r2,-40
   1d6e8:	8c20983a 	sll	r16,r17,r16
   1d6ec:	002b883a 	mov	r21,zero
   1d6f0:	003eb406 	br	1d1c4 <__alt_data_end+0xfc01d1c4>
   1d6f4:	d9800215 	stw	r6,8(sp)
   1d6f8:	d9c00515 	stw	r7,20(sp)
   1d6fc:	da000415 	stw	r8,16(sp)
   1d700:	000e3bc0 	call	e3bc <__clzsi2>
   1d704:	10800804 	addi	r2,r2,32
   1d708:	da000417 	ldw	r8,16(sp)
   1d70c:	d9c00517 	ldw	r7,20(sp)
   1d710:	d9800217 	ldw	r6,8(sp)
   1d714:	003ea106 	br	1d19c <__alt_data_end+0xfc01d19c>
   1d718:	147ff604 	addi	r17,r2,-40
   1d71c:	3462983a 	sll	r17,r6,r17
   1d720:	0029883a 	mov	r20,zero
   1d724:	003ec906 	br	1d24c <__alt_data_end+0xfc01d24c>
   1d728:	3009883a 	mov	r4,r6
   1d72c:	d9400115 	stw	r5,4(sp)
   1d730:	d9800215 	stw	r6,8(sp)
   1d734:	da000415 	stw	r8,16(sp)
   1d738:	da400315 	stw	r9,12(sp)
   1d73c:	000e3bc0 	call	e3bc <__clzsi2>
   1d740:	10800804 	addi	r2,r2,32
   1d744:	da400317 	ldw	r9,12(sp)
   1d748:	da000417 	ldw	r8,16(sp)
   1d74c:	d9800217 	ldw	r6,8(sp)
   1d750:	d9400117 	ldw	r5,4(sp)
   1d754:	003eb306 	br	1d224 <__alt_data_end+0xfc01d224>
   1d758:	d9800017 	ldw	r6,0(sp)
   1d75c:	a9ab883a 	add	r21,r21,r6
   1d760:	a98b803a 	cmpltu	r5,r21,r6
   1d764:	2d8b883a 	add	r5,r5,r22
   1d768:	2a11883a 	add	r8,r5,r8
   1d76c:	897fffc4 	addi	r5,r17,-1
   1d770:	b2000c2e 	bgeu	r22,r8,1d7a4 <__divdf3+0x808>
   1d774:	41003f36 	bltu	r8,r4,1d874 <__divdf3+0x8d8>
   1d778:	22006c26 	beq	r4,r8,1d92c <__divdf3+0x990>
   1d77c:	4109c83a 	sub	r4,r8,r4
   1d780:	2823883a 	mov	r17,r5
   1d784:	003f3b06 	br	1d474 <__alt_data_end+0xfc01d474>
   1d788:	ad3ed336 	bltu	r21,r20,1d2d8 <__alt_data_end+0xfc01d2d8>
   1d78c:	a804d07a 	srli	r2,r21,1
   1d790:	802e97fa 	slli	r23,r16,31
   1d794:	a82a97fa 	slli	r21,r21,31
   1d798:	8020d07a 	srli	r16,r16,1
   1d79c:	b8aeb03a 	or	r23,r23,r2
   1d7a0:	003ed006 	br	1d2e4 <__alt_data_end+0xfc01d2e4>
   1d7a4:	b23ff51e 	bne	r22,r8,1d77c <__alt_data_end+0xfc01d77c>
   1d7a8:	d9800017 	ldw	r6,0(sp)
   1d7ac:	a9bff12e 	bgeu	r21,r6,1d774 <__alt_data_end+0xfc01d774>
   1d7b0:	b109c83a 	sub	r4,r22,r4
   1d7b4:	2823883a 	mov	r17,r5
   1d7b8:	003f2e06 	br	1d474 <__alt_data_end+0xfc01d474>
   1d7bc:	2021883a 	mov	r16,r4
   1d7c0:	003eff06 	br	1d3c0 <__alt_data_end+0xfc01d3c0>
   1d7c4:	2023883a 	mov	r17,r4
   1d7c8:	003ee406 	br	1d35c <__alt_data_end+0xfc01d35c>
   1d7cc:	a8bfe236 	bltu	r21,r2,1d758 <__alt_data_end+0xfc01d758>
   1d7d0:	0009883a 	mov	r4,zero
   1d7d4:	003f2706 	br	1d474 <__alt_data_end+0xfc01d474>
   1d7d8:	81002d36 	bltu	r16,r4,1d890 <__divdf3+0x8f4>
   1d7dc:	24005626 	beq	r4,r16,1d938 <__divdf3+0x99c>
   1d7e0:	2829883a 	mov	r20,r5
   1d7e4:	003f8006 	br	1d5e8 <__alt_data_end+0xfc01d5e8>
   1d7e8:	053fffc4 	movi	r20,-1
   1d7ec:	003f7f06 	br	1d5ec <__alt_data_end+0xfc01d5ec>
   1d7f0:	200f883a 	mov	r7,r4
   1d7f4:	003f3c06 	br	1d4e8 <__alt_data_end+0xfc01d4e8>
   1d7f8:	1011883a 	mov	r8,r2
   1d7fc:	003f5506 	br	1d554 <__alt_data_end+0xfc01d554>
   1d800:	e027883a 	mov	r19,fp
   1d804:	003f7906 	br	1d5ec <__alt_data_end+0xfc01d5ec>
   1d808:	010007c4 	movi	r4,31
   1d80c:	20c02816 	blt	r4,r3,1d8b0 <__divdf3+0x914>
   1d810:	00800804 	movi	r2,32
   1d814:	10c5c83a 	sub	r2,r2,r3
   1d818:	888a983a 	sll	r5,r17,r2
   1d81c:	a0c8d83a 	srl	r4,r20,r3
   1d820:	a084983a 	sll	r2,r20,r2
   1d824:	88e2d83a 	srl	r17,r17,r3
   1d828:	2906b03a 	or	r3,r5,r4
   1d82c:	1004c03a 	cmpne	r2,r2,zero
   1d830:	1886b03a 	or	r3,r3,r2
   1d834:	188001cc 	andi	r2,r3,7
   1d838:	10000726 	beq	r2,zero,1d858 <__divdf3+0x8bc>
   1d83c:	188003cc 	andi	r2,r3,15
   1d840:	01000104 	movi	r4,4
   1d844:	11000426 	beq	r2,r4,1d858 <__divdf3+0x8bc>
   1d848:	1805883a 	mov	r2,r3
   1d84c:	10c00104 	addi	r3,r2,4
   1d850:	1885803a 	cmpltu	r2,r3,r2
   1d854:	88a3883a 	add	r17,r17,r2
   1d858:	8880202c 	andhi	r2,r17,128
   1d85c:	10002926 	beq	r2,zero,1d904 <__divdf3+0x968>
   1d860:	9900004c 	andi	r4,r19,1
   1d864:	00800044 	movi	r2,1
   1d868:	0021883a 	mov	r16,zero
   1d86c:	002b883a 	mov	r21,zero
   1d870:	003e2906 	br	1d118 <__alt_data_end+0xfc01d118>
   1d874:	d9800017 	ldw	r6,0(sp)
   1d878:	8c7fff84 	addi	r17,r17,-2
   1d87c:	a9ab883a 	add	r21,r21,r6
   1d880:	a98b803a 	cmpltu	r5,r21,r6
   1d884:	2d8b883a 	add	r5,r5,r22
   1d888:	2a11883a 	add	r8,r5,r8
   1d88c:	003ef806 	br	1d470 <__alt_data_end+0xfc01d470>
   1d890:	d9800017 	ldw	r6,0(sp)
   1d894:	318f883a 	add	r7,r6,r6
   1d898:	398b803a 	cmpltu	r5,r7,r6
   1d89c:	2d8d883a 	add	r6,r5,r22
   1d8a0:	81a1883a 	add	r16,r16,r6
   1d8a4:	a17fff84 	addi	r5,r20,-2
   1d8a8:	d9c00015 	stw	r7,0(sp)
   1d8ac:	003f8806 	br	1d6d0 <__alt_data_end+0xfc01d6d0>
   1d8b0:	013ff844 	movi	r4,-31
   1d8b4:	2085c83a 	sub	r2,r4,r2
   1d8b8:	8888d83a 	srl	r4,r17,r2
   1d8bc:	00800804 	movi	r2,32
   1d8c0:	18802126 	beq	r3,r2,1d948 <__divdf3+0x9ac>
   1d8c4:	04001004 	movi	r16,64
   1d8c8:	80c7c83a 	sub	r3,r16,r3
   1d8cc:	88e0983a 	sll	r16,r17,r3
   1d8d0:	8504b03a 	or	r2,r16,r20
   1d8d4:	1004c03a 	cmpne	r2,r2,zero
   1d8d8:	2084b03a 	or	r2,r4,r2
   1d8dc:	144001cc 	andi	r17,r2,7
   1d8e0:	88000d1e 	bne	r17,zero,1d918 <__divdf3+0x97c>
   1d8e4:	0021883a 	mov	r16,zero
   1d8e8:	102ad0fa 	srli	r21,r2,3
   1d8ec:	9900004c 	andi	r4,r19,1
   1d8f0:	0005883a 	mov	r2,zero
   1d8f4:	ac6ab03a 	or	r21,r21,r17
   1d8f8:	003e0706 	br	1d118 <__alt_data_end+0xfc01d118>
   1d8fc:	1007883a 	mov	r3,r2
   1d900:	0023883a 	mov	r17,zero
   1d904:	8820927a 	slli	r16,r17,9
   1d908:	1805883a 	mov	r2,r3
   1d90c:	8822977a 	slli	r17,r17,29
   1d910:	8020d33a 	srli	r16,r16,12
   1d914:	003ff406 	br	1d8e8 <__alt_data_end+0xfc01d8e8>
   1d918:	10c003cc 	andi	r3,r2,15
   1d91c:	01000104 	movi	r4,4
   1d920:	193ff626 	beq	r3,r4,1d8fc <__alt_data_end+0xfc01d8fc>
   1d924:	0023883a 	mov	r17,zero
   1d928:	003fc806 	br	1d84c <__alt_data_end+0xfc01d84c>
   1d92c:	a8bfd136 	bltu	r21,r2,1d874 <__alt_data_end+0xfc01d874>
   1d930:	2823883a 	mov	r17,r5
   1d934:	003fa606 	br	1d7d0 <__alt_data_end+0xfc01d7d0>
   1d938:	d9800017 	ldw	r6,0(sp)
   1d93c:	30bfd436 	bltu	r6,r2,1d890 <__alt_data_end+0xfc01d890>
   1d940:	2829883a 	mov	r20,r5
   1d944:	003f6406 	br	1d6d8 <__alt_data_end+0xfc01d6d8>
   1d948:	0021883a 	mov	r16,zero
   1d94c:	003fe006 	br	1d8d0 <__alt_data_end+0xfc01d8d0>
   1d950:	00800434 	movhi	r2,16
   1d954:	8c000234 	orhi	r16,r17,8
   1d958:	10bfffc4 	addi	r2,r2,-1
   1d95c:	e009883a 	mov	r4,fp
   1d960:	80a0703a 	and	r16,r16,r2
   1d964:	a02b883a 	mov	r21,r20
   1d968:	003e4e06 	br	1d2a4 <__alt_data_end+0xfc01d2a4>

0001d96c <__eqdf2>:
   1d96c:	2804d53a 	srli	r2,r5,20
   1d970:	3806d53a 	srli	r3,r7,20
   1d974:	02000434 	movhi	r8,16
   1d978:	423fffc4 	addi	r8,r8,-1
   1d97c:	1081ffcc 	andi	r2,r2,2047
   1d980:	0281ffc4 	movi	r10,2047
   1d984:	2a12703a 	and	r9,r5,r8
   1d988:	18c1ffcc 	andi	r3,r3,2047
   1d98c:	3a10703a 	and	r8,r7,r8
   1d990:	280ad7fa 	srli	r5,r5,31
   1d994:	380ed7fa 	srli	r7,r7,31
   1d998:	12801026 	beq	r2,r10,1d9dc <__eqdf2+0x70>
   1d99c:	0281ffc4 	movi	r10,2047
   1d9a0:	1a800a26 	beq	r3,r10,1d9cc <__eqdf2+0x60>
   1d9a4:	10c00226 	beq	r2,r3,1d9b0 <__eqdf2+0x44>
   1d9a8:	00800044 	movi	r2,1
   1d9ac:	f800283a 	ret
   1d9b0:	4a3ffd1e 	bne	r9,r8,1d9a8 <__alt_data_end+0xfc01d9a8>
   1d9b4:	21bffc1e 	bne	r4,r6,1d9a8 <__alt_data_end+0xfc01d9a8>
   1d9b8:	29c00c26 	beq	r5,r7,1d9ec <__eqdf2+0x80>
   1d9bc:	103ffa1e 	bne	r2,zero,1d9a8 <__alt_data_end+0xfc01d9a8>
   1d9c0:	2244b03a 	or	r2,r4,r9
   1d9c4:	1004c03a 	cmpne	r2,r2,zero
   1d9c8:	f800283a 	ret
   1d9cc:	3214b03a 	or	r10,r6,r8
   1d9d0:	503ff426 	beq	r10,zero,1d9a4 <__alt_data_end+0xfc01d9a4>
   1d9d4:	00800044 	movi	r2,1
   1d9d8:	f800283a 	ret
   1d9dc:	2254b03a 	or	r10,r4,r9
   1d9e0:	503fee26 	beq	r10,zero,1d99c <__alt_data_end+0xfc01d99c>
   1d9e4:	00800044 	movi	r2,1
   1d9e8:	f800283a 	ret
   1d9ec:	0005883a 	mov	r2,zero
   1d9f0:	f800283a 	ret

0001d9f4 <__gedf2>:
   1d9f4:	2804d53a 	srli	r2,r5,20
   1d9f8:	3806d53a 	srli	r3,r7,20
   1d9fc:	02000434 	movhi	r8,16
   1da00:	423fffc4 	addi	r8,r8,-1
   1da04:	1081ffcc 	andi	r2,r2,2047
   1da08:	0241ffc4 	movi	r9,2047
   1da0c:	2a14703a 	and	r10,r5,r8
   1da10:	18c1ffcc 	andi	r3,r3,2047
   1da14:	3a10703a 	and	r8,r7,r8
   1da18:	280ad7fa 	srli	r5,r5,31
   1da1c:	380ed7fa 	srli	r7,r7,31
   1da20:	12401d26 	beq	r2,r9,1da98 <__gedf2+0xa4>
   1da24:	0241ffc4 	movi	r9,2047
   1da28:	1a401226 	beq	r3,r9,1da74 <__gedf2+0x80>
   1da2c:	1000081e 	bne	r2,zero,1da50 <__gedf2+0x5c>
   1da30:	2296b03a 	or	r11,r4,r10
   1da34:	5813003a 	cmpeq	r9,r11,zero
   1da38:	1800091e 	bne	r3,zero,1da60 <__gedf2+0x6c>
   1da3c:	3218b03a 	or	r12,r6,r8
   1da40:	6000071e 	bne	r12,zero,1da60 <__gedf2+0x6c>
   1da44:	0005883a 	mov	r2,zero
   1da48:	5800101e 	bne	r11,zero,1da8c <__gedf2+0x98>
   1da4c:	f800283a 	ret
   1da50:	18000c1e 	bne	r3,zero,1da84 <__gedf2+0x90>
   1da54:	3212b03a 	or	r9,r6,r8
   1da58:	48000c26 	beq	r9,zero,1da8c <__gedf2+0x98>
   1da5c:	0013883a 	mov	r9,zero
   1da60:	39c03fcc 	andi	r7,r7,255
   1da64:	48000826 	beq	r9,zero,1da88 <__gedf2+0x94>
   1da68:	38000926 	beq	r7,zero,1da90 <__gedf2+0x9c>
   1da6c:	00800044 	movi	r2,1
   1da70:	f800283a 	ret
   1da74:	3212b03a 	or	r9,r6,r8
   1da78:	483fec26 	beq	r9,zero,1da2c <__alt_data_end+0xfc01da2c>
   1da7c:	00bfff84 	movi	r2,-2
   1da80:	f800283a 	ret
   1da84:	39c03fcc 	andi	r7,r7,255
   1da88:	29c00626 	beq	r5,r7,1daa4 <__gedf2+0xb0>
   1da8c:	283ff726 	beq	r5,zero,1da6c <__alt_data_end+0xfc01da6c>
   1da90:	00bfffc4 	movi	r2,-1
   1da94:	f800283a 	ret
   1da98:	2292b03a 	or	r9,r4,r10
   1da9c:	483fe126 	beq	r9,zero,1da24 <__alt_data_end+0xfc01da24>
   1daa0:	003ff606 	br	1da7c <__alt_data_end+0xfc01da7c>
   1daa4:	18bff916 	blt	r3,r2,1da8c <__alt_data_end+0xfc01da8c>
   1daa8:	10c00316 	blt	r2,r3,1dab8 <__gedf2+0xc4>
   1daac:	42bff736 	bltu	r8,r10,1da8c <__alt_data_end+0xfc01da8c>
   1dab0:	52000326 	beq	r10,r8,1dac0 <__gedf2+0xcc>
   1dab4:	5200042e 	bgeu	r10,r8,1dac8 <__gedf2+0xd4>
   1dab8:	283fec1e 	bne	r5,zero,1da6c <__alt_data_end+0xfc01da6c>
   1dabc:	003ff406 	br	1da90 <__alt_data_end+0xfc01da90>
   1dac0:	313ff236 	bltu	r6,r4,1da8c <__alt_data_end+0xfc01da8c>
   1dac4:	21bffc36 	bltu	r4,r6,1dab8 <__alt_data_end+0xfc01dab8>
   1dac8:	0005883a 	mov	r2,zero
   1dacc:	f800283a 	ret

0001dad0 <__ledf2>:
   1dad0:	2804d53a 	srli	r2,r5,20
   1dad4:	3810d53a 	srli	r8,r7,20
   1dad8:	00c00434 	movhi	r3,16
   1dadc:	18ffffc4 	addi	r3,r3,-1
   1dae0:	1081ffcc 	andi	r2,r2,2047
   1dae4:	0241ffc4 	movi	r9,2047
   1dae8:	28d4703a 	and	r10,r5,r3
   1daec:	4201ffcc 	andi	r8,r8,2047
   1daf0:	38c6703a 	and	r3,r7,r3
   1daf4:	280ad7fa 	srli	r5,r5,31
   1daf8:	380ed7fa 	srli	r7,r7,31
   1dafc:	12401f26 	beq	r2,r9,1db7c <__ledf2+0xac>
   1db00:	0241ffc4 	movi	r9,2047
   1db04:	42401426 	beq	r8,r9,1db58 <__ledf2+0x88>
   1db08:	1000091e 	bne	r2,zero,1db30 <__ledf2+0x60>
   1db0c:	2296b03a 	or	r11,r4,r10
   1db10:	5813003a 	cmpeq	r9,r11,zero
   1db14:	29403fcc 	andi	r5,r5,255
   1db18:	40000a1e 	bne	r8,zero,1db44 <__ledf2+0x74>
   1db1c:	30d8b03a 	or	r12,r6,r3
   1db20:	6000081e 	bne	r12,zero,1db44 <__ledf2+0x74>
   1db24:	0005883a 	mov	r2,zero
   1db28:	5800111e 	bne	r11,zero,1db70 <__ledf2+0xa0>
   1db2c:	f800283a 	ret
   1db30:	29403fcc 	andi	r5,r5,255
   1db34:	40000c1e 	bne	r8,zero,1db68 <__ledf2+0x98>
   1db38:	30d2b03a 	or	r9,r6,r3
   1db3c:	48000c26 	beq	r9,zero,1db70 <__ledf2+0xa0>
   1db40:	0013883a 	mov	r9,zero
   1db44:	39c03fcc 	andi	r7,r7,255
   1db48:	48000826 	beq	r9,zero,1db6c <__ledf2+0x9c>
   1db4c:	38001126 	beq	r7,zero,1db94 <__ledf2+0xc4>
   1db50:	00800044 	movi	r2,1
   1db54:	f800283a 	ret
   1db58:	30d2b03a 	or	r9,r6,r3
   1db5c:	483fea26 	beq	r9,zero,1db08 <__alt_data_end+0xfc01db08>
   1db60:	00800084 	movi	r2,2
   1db64:	f800283a 	ret
   1db68:	39c03fcc 	andi	r7,r7,255
   1db6c:	39400726 	beq	r7,r5,1db8c <__ledf2+0xbc>
   1db70:	2800081e 	bne	r5,zero,1db94 <__ledf2+0xc4>
   1db74:	00800044 	movi	r2,1
   1db78:	f800283a 	ret
   1db7c:	2292b03a 	or	r9,r4,r10
   1db80:	483fdf26 	beq	r9,zero,1db00 <__alt_data_end+0xfc01db00>
   1db84:	00800084 	movi	r2,2
   1db88:	f800283a 	ret
   1db8c:	4080030e 	bge	r8,r2,1db9c <__ledf2+0xcc>
   1db90:	383fef26 	beq	r7,zero,1db50 <__alt_data_end+0xfc01db50>
   1db94:	00bfffc4 	movi	r2,-1
   1db98:	f800283a 	ret
   1db9c:	123feb16 	blt	r2,r8,1db4c <__alt_data_end+0xfc01db4c>
   1dba0:	1abff336 	bltu	r3,r10,1db70 <__alt_data_end+0xfc01db70>
   1dba4:	50c00326 	beq	r10,r3,1dbb4 <__ledf2+0xe4>
   1dba8:	50c0042e 	bgeu	r10,r3,1dbbc <__ledf2+0xec>
   1dbac:	283fe81e 	bne	r5,zero,1db50 <__alt_data_end+0xfc01db50>
   1dbb0:	003ff806 	br	1db94 <__alt_data_end+0xfc01db94>
   1dbb4:	313fee36 	bltu	r6,r4,1db70 <__alt_data_end+0xfc01db70>
   1dbb8:	21bffc36 	bltu	r4,r6,1dbac <__alt_data_end+0xfc01dbac>
   1dbbc:	0005883a 	mov	r2,zero
   1dbc0:	f800283a 	ret

0001dbc4 <__muldf3>:
   1dbc4:	deffee04 	addi	sp,sp,-72
   1dbc8:	dd000c15 	stw	r20,48(sp)
   1dbcc:	2828d53a 	srli	r20,r5,20
   1dbd0:	ddc00f15 	stw	r23,60(sp)
   1dbd4:	282ed7fa 	srli	r23,r5,31
   1dbd8:	dc000815 	stw	r16,32(sp)
   1dbdc:	04000434 	movhi	r16,16
   1dbe0:	dcc00b15 	stw	r19,44(sp)
   1dbe4:	843fffc4 	addi	r16,r16,-1
   1dbe8:	dfc01115 	stw	ra,68(sp)
   1dbec:	df001015 	stw	fp,64(sp)
   1dbf0:	dd800e15 	stw	r22,56(sp)
   1dbf4:	dd400d15 	stw	r21,52(sp)
   1dbf8:	dc800a15 	stw	r18,40(sp)
   1dbfc:	dc400915 	stw	r17,36(sp)
   1dc00:	a501ffcc 	andi	r20,r20,2047
   1dc04:	2c20703a 	and	r16,r5,r16
   1dc08:	b827883a 	mov	r19,r23
   1dc0c:	ba403fcc 	andi	r9,r23,255
   1dc10:	a0006026 	beq	r20,zero,1dd94 <__muldf3+0x1d0>
   1dc14:	0081ffc4 	movi	r2,2047
   1dc18:	202d883a 	mov	r22,r4
   1dc1c:	a0803626 	beq	r20,r2,1dcf8 <__muldf3+0x134>
   1dc20:	84000434 	orhi	r16,r16,16
   1dc24:	200ad77a 	srli	r5,r4,29
   1dc28:	800490fa 	slli	r2,r16,3
   1dc2c:	202c90fa 	slli	r22,r4,3
   1dc30:	a53f0044 	addi	r20,r20,-1023
   1dc34:	28a0b03a 	or	r16,r5,r2
   1dc38:	002b883a 	mov	r21,zero
   1dc3c:	000b883a 	mov	r5,zero
   1dc40:	3804d53a 	srli	r2,r7,20
   1dc44:	3838d7fa 	srli	fp,r7,31
   1dc48:	04400434 	movhi	r17,16
   1dc4c:	8c7fffc4 	addi	r17,r17,-1
   1dc50:	1081ffcc 	andi	r2,r2,2047
   1dc54:	3025883a 	mov	r18,r6
   1dc58:	3c62703a 	and	r17,r7,r17
   1dc5c:	e2803fcc 	andi	r10,fp,255
   1dc60:	10006d26 	beq	r2,zero,1de18 <__muldf3+0x254>
   1dc64:	00c1ffc4 	movi	r3,2047
   1dc68:	10c06526 	beq	r2,r3,1de00 <__muldf3+0x23c>
   1dc6c:	8c400434 	orhi	r17,r17,16
   1dc70:	300ed77a 	srli	r7,r6,29
   1dc74:	880690fa 	slli	r3,r17,3
   1dc78:	302490fa 	slli	r18,r6,3
   1dc7c:	10bf0044 	addi	r2,r2,-1023
   1dc80:	38e2b03a 	or	r17,r7,r3
   1dc84:	000f883a 	mov	r7,zero
   1dc88:	a087883a 	add	r3,r20,r2
   1dc8c:	010003c4 	movi	r4,15
   1dc90:	3d44b03a 	or	r2,r7,r21
   1dc94:	e5ccf03a 	xor	r6,fp,r23
   1dc98:	1a000044 	addi	r8,r3,1
   1dc9c:	20809b36 	bltu	r4,r2,1df0c <__muldf3+0x348>
   1dca0:	100490ba 	slli	r2,r2,2
   1dca4:	010000b4 	movhi	r4,2
   1dca8:	21372e04 	addi	r4,r4,-9032
   1dcac:	1105883a 	add	r2,r2,r4
   1dcb0:	10800017 	ldw	r2,0(r2)
   1dcb4:	1000683a 	jmp	r2
   1dcb8:	0001df0c 	andi	zero,zero,1916
   1dcbc:	0001dd18 	cmpnei	zero,zero,1908
   1dcc0:	0001dd18 	cmpnei	zero,zero,1908
   1dcc4:	0001dd14 	movui	zero,1908
   1dcc8:	0001dee8 	cmpgeui	zero,zero,1915
   1dccc:	0001dee8 	cmpgeui	zero,zero,1915
   1dcd0:	0001ded0 	cmplti	zero,zero,1915
   1dcd4:	0001dd14 	movui	zero,1908
   1dcd8:	0001dee8 	cmpgeui	zero,zero,1915
   1dcdc:	0001ded0 	cmplti	zero,zero,1915
   1dce0:	0001dee8 	cmpgeui	zero,zero,1915
   1dce4:	0001dd14 	movui	zero,1908
   1dce8:	0001def8 	rdprs	zero,zero,1915
   1dcec:	0001def8 	rdprs	zero,zero,1915
   1dcf0:	0001def8 	rdprs	zero,zero,1915
   1dcf4:	0001e258 	cmpnei	zero,zero,1929
   1dcf8:	2404b03a 	or	r2,r4,r16
   1dcfc:	1000711e 	bne	r2,zero,1dec4 <__muldf3+0x300>
   1dd00:	05400204 	movi	r21,8
   1dd04:	0021883a 	mov	r16,zero
   1dd08:	002d883a 	mov	r22,zero
   1dd0c:	01400084 	movi	r5,2
   1dd10:	003fcb06 	br	1dc40 <__alt_data_end+0xfc01dc40>
   1dd14:	500d883a 	mov	r6,r10
   1dd18:	00800084 	movi	r2,2
   1dd1c:	38805926 	beq	r7,r2,1de84 <__muldf3+0x2c0>
   1dd20:	008000c4 	movi	r2,3
   1dd24:	3881bb26 	beq	r7,r2,1e414 <__muldf3+0x850>
   1dd28:	00800044 	movi	r2,1
   1dd2c:	3881961e 	bne	r7,r2,1e388 <__muldf3+0x7c4>
   1dd30:	3027883a 	mov	r19,r6
   1dd34:	0005883a 	mov	r2,zero
   1dd38:	0021883a 	mov	r16,zero
   1dd3c:	002d883a 	mov	r22,zero
   1dd40:	1004953a 	slli	r2,r2,20
   1dd44:	98c03fcc 	andi	r3,r19,255
   1dd48:	04400434 	movhi	r17,16
   1dd4c:	8c7fffc4 	addi	r17,r17,-1
   1dd50:	180697fa 	slli	r3,r3,31
   1dd54:	8460703a 	and	r16,r16,r17
   1dd58:	80a0b03a 	or	r16,r16,r2
   1dd5c:	80c6b03a 	or	r3,r16,r3
   1dd60:	b005883a 	mov	r2,r22
   1dd64:	dfc01117 	ldw	ra,68(sp)
   1dd68:	df001017 	ldw	fp,64(sp)
   1dd6c:	ddc00f17 	ldw	r23,60(sp)
   1dd70:	dd800e17 	ldw	r22,56(sp)
   1dd74:	dd400d17 	ldw	r21,52(sp)
   1dd78:	dd000c17 	ldw	r20,48(sp)
   1dd7c:	dcc00b17 	ldw	r19,44(sp)
   1dd80:	dc800a17 	ldw	r18,40(sp)
   1dd84:	dc400917 	ldw	r17,36(sp)
   1dd88:	dc000817 	ldw	r16,32(sp)
   1dd8c:	dec01204 	addi	sp,sp,72
   1dd90:	f800283a 	ret
   1dd94:	2404b03a 	or	r2,r4,r16
   1dd98:	202b883a 	mov	r21,r4
   1dd9c:	10004426 	beq	r2,zero,1deb0 <__muldf3+0x2ec>
   1dda0:	80015126 	beq	r16,zero,1e2e8 <__muldf3+0x724>
   1dda4:	8009883a 	mov	r4,r16
   1dda8:	d9800715 	stw	r6,28(sp)
   1ddac:	d9c00215 	stw	r7,8(sp)
   1ddb0:	da400415 	stw	r9,16(sp)
   1ddb4:	000e3bc0 	call	e3bc <__clzsi2>
   1ddb8:	d9800717 	ldw	r6,28(sp)
   1ddbc:	d9c00217 	ldw	r7,8(sp)
   1ddc0:	da400417 	ldw	r9,16(sp)
   1ddc4:	113ffd44 	addi	r4,r2,-11
   1ddc8:	00c00704 	movi	r3,28
   1ddcc:	19014216 	blt	r3,r4,1e2d8 <__muldf3+0x714>
   1ddd0:	00c00744 	movi	r3,29
   1ddd4:	15bffe04 	addi	r22,r2,-8
   1ddd8:	1907c83a 	sub	r3,r3,r4
   1dddc:	85a0983a 	sll	r16,r16,r22
   1dde0:	a8c6d83a 	srl	r3,r21,r3
   1dde4:	adac983a 	sll	r22,r21,r22
   1dde8:	1c20b03a 	or	r16,r3,r16
   1ddec:	1080fcc4 	addi	r2,r2,1011
   1ddf0:	00a9c83a 	sub	r20,zero,r2
   1ddf4:	002b883a 	mov	r21,zero
   1ddf8:	000b883a 	mov	r5,zero
   1ddfc:	003f9006 	br	1dc40 <__alt_data_end+0xfc01dc40>
   1de00:	3446b03a 	or	r3,r6,r17
   1de04:	1800281e 	bne	r3,zero,1dea8 <__muldf3+0x2e4>
   1de08:	0023883a 	mov	r17,zero
   1de0c:	0025883a 	mov	r18,zero
   1de10:	01c00084 	movi	r7,2
   1de14:	003f9c06 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1de18:	3446b03a 	or	r3,r6,r17
   1de1c:	18001e26 	beq	r3,zero,1de98 <__muldf3+0x2d4>
   1de20:	88012126 	beq	r17,zero,1e2a8 <__muldf3+0x6e4>
   1de24:	8809883a 	mov	r4,r17
   1de28:	d9400215 	stw	r5,8(sp)
   1de2c:	d9800715 	stw	r6,28(sp)
   1de30:	da400415 	stw	r9,16(sp)
   1de34:	da800315 	stw	r10,12(sp)
   1de38:	000e3bc0 	call	e3bc <__clzsi2>
   1de3c:	d9400217 	ldw	r5,8(sp)
   1de40:	d9800717 	ldw	r6,28(sp)
   1de44:	da400417 	ldw	r9,16(sp)
   1de48:	da800317 	ldw	r10,12(sp)
   1de4c:	113ffd44 	addi	r4,r2,-11
   1de50:	00c00704 	movi	r3,28
   1de54:	19011016 	blt	r3,r4,1e298 <__muldf3+0x6d4>
   1de58:	00c00744 	movi	r3,29
   1de5c:	14bffe04 	addi	r18,r2,-8
   1de60:	1907c83a 	sub	r3,r3,r4
   1de64:	8ca2983a 	sll	r17,r17,r18
   1de68:	30c6d83a 	srl	r3,r6,r3
   1de6c:	34a4983a 	sll	r18,r6,r18
   1de70:	1c62b03a 	or	r17,r3,r17
   1de74:	1080fcc4 	addi	r2,r2,1011
   1de78:	0085c83a 	sub	r2,zero,r2
   1de7c:	000f883a 	mov	r7,zero
   1de80:	003f8106 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1de84:	3027883a 	mov	r19,r6
   1de88:	0081ffc4 	movi	r2,2047
   1de8c:	0021883a 	mov	r16,zero
   1de90:	002d883a 	mov	r22,zero
   1de94:	003faa06 	br	1dd40 <__alt_data_end+0xfc01dd40>
   1de98:	0023883a 	mov	r17,zero
   1de9c:	0025883a 	mov	r18,zero
   1dea0:	01c00044 	movi	r7,1
   1dea4:	003f7806 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1dea8:	01c000c4 	movi	r7,3
   1deac:	003f7606 	br	1dc88 <__alt_data_end+0xfc01dc88>
   1deb0:	05400104 	movi	r21,4
   1deb4:	0021883a 	mov	r16,zero
   1deb8:	002d883a 	mov	r22,zero
   1debc:	01400044 	movi	r5,1
   1dec0:	003f5f06 	br	1dc40 <__alt_data_end+0xfc01dc40>
   1dec4:	05400304 	movi	r21,12
   1dec8:	014000c4 	movi	r5,3
   1decc:	003f5c06 	br	1dc40 <__alt_data_end+0xfc01dc40>
   1ded0:	04000434 	movhi	r16,16
   1ded4:	0027883a 	mov	r19,zero
   1ded8:	843fffc4 	addi	r16,r16,-1
   1dedc:	05bfffc4 	movi	r22,-1
   1dee0:	0081ffc4 	movi	r2,2047
   1dee4:	003f9606 	br	1dd40 <__alt_data_end+0xfc01dd40>
   1dee8:	8023883a 	mov	r17,r16
   1deec:	b025883a 	mov	r18,r22
   1def0:	280f883a 	mov	r7,r5
   1def4:	003f8806 	br	1dd18 <__alt_data_end+0xfc01dd18>
   1def8:	8023883a 	mov	r17,r16
   1defc:	b025883a 	mov	r18,r22
   1df00:	480d883a 	mov	r6,r9
   1df04:	280f883a 	mov	r7,r5
   1df08:	003f8306 	br	1dd18 <__alt_data_end+0xfc01dd18>
   1df0c:	b026d43a 	srli	r19,r22,16
   1df10:	902ed43a 	srli	r23,r18,16
   1df14:	b5bfffcc 	andi	r22,r22,65535
   1df18:	94bfffcc 	andi	r18,r18,65535
   1df1c:	b00b883a 	mov	r5,r22
   1df20:	9009883a 	mov	r4,r18
   1df24:	d8c00515 	stw	r3,20(sp)
   1df28:	d9800715 	stw	r6,28(sp)
   1df2c:	da000615 	stw	r8,24(sp)
   1df30:	000cf040 	call	cf04 <__mulsi3>
   1df34:	980b883a 	mov	r5,r19
   1df38:	9009883a 	mov	r4,r18
   1df3c:	1029883a 	mov	r20,r2
   1df40:	000cf040 	call	cf04 <__mulsi3>
   1df44:	b80b883a 	mov	r5,r23
   1df48:	9809883a 	mov	r4,r19
   1df4c:	102b883a 	mov	r21,r2
   1df50:	000cf040 	call	cf04 <__mulsi3>
   1df54:	b809883a 	mov	r4,r23
   1df58:	b00b883a 	mov	r5,r22
   1df5c:	1039883a 	mov	fp,r2
   1df60:	000cf040 	call	cf04 <__mulsi3>
   1df64:	a008d43a 	srli	r4,r20,16
   1df68:	1545883a 	add	r2,r2,r21
   1df6c:	d8c00517 	ldw	r3,20(sp)
   1df70:	2085883a 	add	r2,r4,r2
   1df74:	d9800717 	ldw	r6,28(sp)
   1df78:	da000617 	ldw	r8,24(sp)
   1df7c:	1540022e 	bgeu	r2,r21,1df88 <__muldf3+0x3c4>
   1df80:	01000074 	movhi	r4,1
   1df84:	e139883a 	add	fp,fp,r4
   1df88:	100e943a 	slli	r7,r2,16
   1df8c:	1004d43a 	srli	r2,r2,16
   1df90:	882ad43a 	srli	r21,r17,16
   1df94:	a53fffcc 	andi	r20,r20,65535
   1df98:	8c7fffcc 	andi	r17,r17,65535
   1df9c:	3d29883a 	add	r20,r7,r20
   1dfa0:	b00b883a 	mov	r5,r22
   1dfa4:	8809883a 	mov	r4,r17
   1dfa8:	d8c00515 	stw	r3,20(sp)
   1dfac:	d9800715 	stw	r6,28(sp)
   1dfb0:	da000615 	stw	r8,24(sp)
   1dfb4:	dd000115 	stw	r20,4(sp)
   1dfb8:	d8800015 	stw	r2,0(sp)
   1dfbc:	000cf040 	call	cf04 <__mulsi3>
   1dfc0:	980b883a 	mov	r5,r19
   1dfc4:	8809883a 	mov	r4,r17
   1dfc8:	d8800215 	stw	r2,8(sp)
   1dfcc:	000cf040 	call	cf04 <__mulsi3>
   1dfd0:	9809883a 	mov	r4,r19
   1dfd4:	a80b883a 	mov	r5,r21
   1dfd8:	1029883a 	mov	r20,r2
   1dfdc:	000cf040 	call	cf04 <__mulsi3>
   1dfe0:	b00b883a 	mov	r5,r22
   1dfe4:	a809883a 	mov	r4,r21
   1dfe8:	d8800415 	stw	r2,16(sp)
   1dfec:	000cf040 	call	cf04 <__mulsi3>
   1dff0:	d9c00217 	ldw	r7,8(sp)
   1dff4:	1505883a 	add	r2,r2,r20
   1dff8:	d8c00517 	ldw	r3,20(sp)
   1dffc:	3826d43a 	srli	r19,r7,16
   1e000:	d9800717 	ldw	r6,28(sp)
   1e004:	da000617 	ldw	r8,24(sp)
   1e008:	9885883a 	add	r2,r19,r2
   1e00c:	da400417 	ldw	r9,16(sp)
   1e010:	1500022e 	bgeu	r2,r20,1e01c <__muldf3+0x458>
   1e014:	01000074 	movhi	r4,1
   1e018:	4913883a 	add	r9,r9,r4
   1e01c:	1028d43a 	srli	r20,r2,16
   1e020:	1004943a 	slli	r2,r2,16
   1e024:	802cd43a 	srli	r22,r16,16
   1e028:	843fffcc 	andi	r16,r16,65535
   1e02c:	3cffffcc 	andi	r19,r7,65535
   1e030:	9009883a 	mov	r4,r18
   1e034:	800b883a 	mov	r5,r16
   1e038:	a269883a 	add	r20,r20,r9
   1e03c:	d8c00515 	stw	r3,20(sp)
   1e040:	d9800715 	stw	r6,28(sp)
   1e044:	da000615 	stw	r8,24(sp)
   1e048:	14e7883a 	add	r19,r2,r19
   1e04c:	000cf040 	call	cf04 <__mulsi3>
   1e050:	9009883a 	mov	r4,r18
   1e054:	b00b883a 	mov	r5,r22
   1e058:	d8800315 	stw	r2,12(sp)
   1e05c:	000cf040 	call	cf04 <__mulsi3>
   1e060:	b809883a 	mov	r4,r23
   1e064:	b00b883a 	mov	r5,r22
   1e068:	d8800215 	stw	r2,8(sp)
   1e06c:	000cf040 	call	cf04 <__mulsi3>
   1e070:	b80b883a 	mov	r5,r23
   1e074:	8009883a 	mov	r4,r16
   1e078:	d8800415 	stw	r2,16(sp)
   1e07c:	000cf040 	call	cf04 <__mulsi3>
   1e080:	da800317 	ldw	r10,12(sp)
   1e084:	d9c00217 	ldw	r7,8(sp)
   1e088:	d9000017 	ldw	r4,0(sp)
   1e08c:	502ed43a 	srli	r23,r10,16
   1e090:	11c5883a 	add	r2,r2,r7
   1e094:	24e5883a 	add	r18,r4,r19
   1e098:	b885883a 	add	r2,r23,r2
   1e09c:	d8c00517 	ldw	r3,20(sp)
   1e0a0:	d9800717 	ldw	r6,28(sp)
   1e0a4:	da000617 	ldw	r8,24(sp)
   1e0a8:	da400417 	ldw	r9,16(sp)
   1e0ac:	11c0022e 	bgeu	r2,r7,1e0b8 <__muldf3+0x4f4>
   1e0b0:	01000074 	movhi	r4,1
   1e0b4:	4913883a 	add	r9,r9,r4
   1e0b8:	100ed43a 	srli	r7,r2,16
   1e0bc:	1004943a 	slli	r2,r2,16
   1e0c0:	55ffffcc 	andi	r23,r10,65535
   1e0c4:	3a53883a 	add	r9,r7,r9
   1e0c8:	8809883a 	mov	r4,r17
   1e0cc:	800b883a 	mov	r5,r16
   1e0d0:	d8c00515 	stw	r3,20(sp)
   1e0d4:	d9800715 	stw	r6,28(sp)
   1e0d8:	da000615 	stw	r8,24(sp)
   1e0dc:	da400415 	stw	r9,16(sp)
   1e0e0:	15ef883a 	add	r23,r2,r23
   1e0e4:	000cf040 	call	cf04 <__mulsi3>
   1e0e8:	8809883a 	mov	r4,r17
   1e0ec:	b00b883a 	mov	r5,r22
   1e0f0:	d8800215 	stw	r2,8(sp)
   1e0f4:	000cf040 	call	cf04 <__mulsi3>
   1e0f8:	b00b883a 	mov	r5,r22
   1e0fc:	a809883a 	mov	r4,r21
   1e100:	d8800315 	stw	r2,12(sp)
   1e104:	000cf040 	call	cf04 <__mulsi3>
   1e108:	8009883a 	mov	r4,r16
   1e10c:	a80b883a 	mov	r5,r21
   1e110:	1023883a 	mov	r17,r2
   1e114:	000cf040 	call	cf04 <__mulsi3>
   1e118:	d9c00217 	ldw	r7,8(sp)
   1e11c:	da800317 	ldw	r10,12(sp)
   1e120:	d8c00517 	ldw	r3,20(sp)
   1e124:	3808d43a 	srli	r4,r7,16
   1e128:	1285883a 	add	r2,r2,r10
   1e12c:	d9800717 	ldw	r6,28(sp)
   1e130:	2085883a 	add	r2,r4,r2
   1e134:	da000617 	ldw	r8,24(sp)
   1e138:	da400417 	ldw	r9,16(sp)
   1e13c:	1280022e 	bgeu	r2,r10,1e148 <__muldf3+0x584>
   1e140:	01000074 	movhi	r4,1
   1e144:	8923883a 	add	r17,r17,r4
   1e148:	1008943a 	slli	r4,r2,16
   1e14c:	39ffffcc 	andi	r7,r7,65535
   1e150:	e4b9883a 	add	fp,fp,r18
   1e154:	21cf883a 	add	r7,r4,r7
   1e158:	e4e7803a 	cmpltu	r19,fp,r19
   1e15c:	3d0f883a 	add	r7,r7,r20
   1e160:	bf39883a 	add	fp,r23,fp
   1e164:	99c9883a 	add	r4,r19,r7
   1e168:	e5ef803a 	cmpltu	r23,fp,r23
   1e16c:	490b883a 	add	r5,r9,r4
   1e170:	1004d43a 	srli	r2,r2,16
   1e174:	b965883a 	add	r18,r23,r5
   1e178:	24c9803a 	cmpltu	r4,r4,r19
   1e17c:	3d29803a 	cmpltu	r20,r7,r20
   1e180:	a128b03a 	or	r20,r20,r4
   1e184:	95ef803a 	cmpltu	r23,r18,r23
   1e188:	2a53803a 	cmpltu	r9,r5,r9
   1e18c:	a0a9883a 	add	r20,r20,r2
   1e190:	4deeb03a 	or	r23,r9,r23
   1e194:	a5ef883a 	add	r23,r20,r23
   1e198:	bc63883a 	add	r17,r23,r17
   1e19c:	e004927a 	slli	r2,fp,9
   1e1a0:	d9000117 	ldw	r4,4(sp)
   1e1a4:	882e927a 	slli	r23,r17,9
   1e1a8:	9022d5fa 	srli	r17,r18,23
   1e1ac:	e038d5fa 	srli	fp,fp,23
   1e1b0:	1104b03a 	or	r2,r2,r4
   1e1b4:	9024927a 	slli	r18,r18,9
   1e1b8:	1004c03a 	cmpne	r2,r2,zero
   1e1bc:	bc62b03a 	or	r17,r23,r17
   1e1c0:	1738b03a 	or	fp,r2,fp
   1e1c4:	8880402c 	andhi	r2,r17,256
   1e1c8:	e4a4b03a 	or	r18,fp,r18
   1e1cc:	10000726 	beq	r2,zero,1e1ec <__muldf3+0x628>
   1e1d0:	9006d07a 	srli	r3,r18,1
   1e1d4:	880497fa 	slli	r2,r17,31
   1e1d8:	9480004c 	andi	r18,r18,1
   1e1dc:	8822d07a 	srli	r17,r17,1
   1e1e0:	1ca4b03a 	or	r18,r3,r18
   1e1e4:	14a4b03a 	or	r18,r2,r18
   1e1e8:	4007883a 	mov	r3,r8
   1e1ec:	1880ffc4 	addi	r2,r3,1023
   1e1f0:	0080460e 	bge	zero,r2,1e30c <__muldf3+0x748>
   1e1f4:	910001cc 	andi	r4,r18,7
   1e1f8:	20000726 	beq	r4,zero,1e218 <__muldf3+0x654>
   1e1fc:	910003cc 	andi	r4,r18,15
   1e200:	01400104 	movi	r5,4
   1e204:	21400426 	beq	r4,r5,1e218 <__muldf3+0x654>
   1e208:	9149883a 	add	r4,r18,r5
   1e20c:	24a5803a 	cmpltu	r18,r4,r18
   1e210:	8ca3883a 	add	r17,r17,r18
   1e214:	2025883a 	mov	r18,r4
   1e218:	8900402c 	andhi	r4,r17,256
   1e21c:	20000426 	beq	r4,zero,1e230 <__muldf3+0x66c>
   1e220:	18810004 	addi	r2,r3,1024
   1e224:	00ffc034 	movhi	r3,65280
   1e228:	18ffffc4 	addi	r3,r3,-1
   1e22c:	88e2703a 	and	r17,r17,r3
   1e230:	00c1ff84 	movi	r3,2046
   1e234:	18bf1316 	blt	r3,r2,1de84 <__alt_data_end+0xfc01de84>
   1e238:	882c977a 	slli	r22,r17,29
   1e23c:	9024d0fa 	srli	r18,r18,3
   1e240:	8822927a 	slli	r17,r17,9
   1e244:	1081ffcc 	andi	r2,r2,2047
   1e248:	b4acb03a 	or	r22,r22,r18
   1e24c:	8820d33a 	srli	r16,r17,12
   1e250:	3027883a 	mov	r19,r6
   1e254:	003eba06 	br	1dd40 <__alt_data_end+0xfc01dd40>
   1e258:	8080022c 	andhi	r2,r16,8
   1e25c:	10000926 	beq	r2,zero,1e284 <__muldf3+0x6c0>
   1e260:	8880022c 	andhi	r2,r17,8
   1e264:	1000071e 	bne	r2,zero,1e284 <__muldf3+0x6c0>
   1e268:	00800434 	movhi	r2,16
   1e26c:	8c000234 	orhi	r16,r17,8
   1e270:	10bfffc4 	addi	r2,r2,-1
   1e274:	e027883a 	mov	r19,fp
   1e278:	80a0703a 	and	r16,r16,r2
   1e27c:	902d883a 	mov	r22,r18
   1e280:	003f1706 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e284:	00800434 	movhi	r2,16
   1e288:	84000234 	orhi	r16,r16,8
   1e28c:	10bfffc4 	addi	r2,r2,-1
   1e290:	80a0703a 	and	r16,r16,r2
   1e294:	003f1206 	br	1dee0 <__alt_data_end+0xfc01dee0>
   1e298:	147ff604 	addi	r17,r2,-40
   1e29c:	3462983a 	sll	r17,r6,r17
   1e2a0:	0025883a 	mov	r18,zero
   1e2a4:	003ef306 	br	1de74 <__alt_data_end+0xfc01de74>
   1e2a8:	3009883a 	mov	r4,r6
   1e2ac:	d9400215 	stw	r5,8(sp)
   1e2b0:	d9800715 	stw	r6,28(sp)
   1e2b4:	da400415 	stw	r9,16(sp)
   1e2b8:	da800315 	stw	r10,12(sp)
   1e2bc:	000e3bc0 	call	e3bc <__clzsi2>
   1e2c0:	10800804 	addi	r2,r2,32
   1e2c4:	da800317 	ldw	r10,12(sp)
   1e2c8:	da400417 	ldw	r9,16(sp)
   1e2cc:	d9800717 	ldw	r6,28(sp)
   1e2d0:	d9400217 	ldw	r5,8(sp)
   1e2d4:	003edd06 	br	1de4c <__alt_data_end+0xfc01de4c>
   1e2d8:	143ff604 	addi	r16,r2,-40
   1e2dc:	ac20983a 	sll	r16,r21,r16
   1e2e0:	002d883a 	mov	r22,zero
   1e2e4:	003ec106 	br	1ddec <__alt_data_end+0xfc01ddec>
   1e2e8:	d9800715 	stw	r6,28(sp)
   1e2ec:	d9c00215 	stw	r7,8(sp)
   1e2f0:	da400415 	stw	r9,16(sp)
   1e2f4:	000e3bc0 	call	e3bc <__clzsi2>
   1e2f8:	10800804 	addi	r2,r2,32
   1e2fc:	da400417 	ldw	r9,16(sp)
   1e300:	d9c00217 	ldw	r7,8(sp)
   1e304:	d9800717 	ldw	r6,28(sp)
   1e308:	003eae06 	br	1ddc4 <__alt_data_end+0xfc01ddc4>
   1e30c:	00c00044 	movi	r3,1
   1e310:	1887c83a 	sub	r3,r3,r2
   1e314:	01000e04 	movi	r4,56
   1e318:	20fe8516 	blt	r4,r3,1dd30 <__alt_data_end+0xfc01dd30>
   1e31c:	010007c4 	movi	r4,31
   1e320:	20c01b16 	blt	r4,r3,1e390 <__muldf3+0x7cc>
   1e324:	00800804 	movi	r2,32
   1e328:	10c5c83a 	sub	r2,r2,r3
   1e32c:	888a983a 	sll	r5,r17,r2
   1e330:	90c8d83a 	srl	r4,r18,r3
   1e334:	9084983a 	sll	r2,r18,r2
   1e338:	88e2d83a 	srl	r17,r17,r3
   1e33c:	2906b03a 	or	r3,r5,r4
   1e340:	1004c03a 	cmpne	r2,r2,zero
   1e344:	1886b03a 	or	r3,r3,r2
   1e348:	188001cc 	andi	r2,r3,7
   1e34c:	10000726 	beq	r2,zero,1e36c <__muldf3+0x7a8>
   1e350:	188003cc 	andi	r2,r3,15
   1e354:	01000104 	movi	r4,4
   1e358:	11000426 	beq	r2,r4,1e36c <__muldf3+0x7a8>
   1e35c:	1805883a 	mov	r2,r3
   1e360:	10c00104 	addi	r3,r2,4
   1e364:	1885803a 	cmpltu	r2,r3,r2
   1e368:	88a3883a 	add	r17,r17,r2
   1e36c:	8880202c 	andhi	r2,r17,128
   1e370:	10001c26 	beq	r2,zero,1e3e4 <__muldf3+0x820>
   1e374:	3027883a 	mov	r19,r6
   1e378:	00800044 	movi	r2,1
   1e37c:	0021883a 	mov	r16,zero
   1e380:	002d883a 	mov	r22,zero
   1e384:	003e6e06 	br	1dd40 <__alt_data_end+0xfc01dd40>
   1e388:	4007883a 	mov	r3,r8
   1e38c:	003f9706 	br	1e1ec <__alt_data_end+0xfc01e1ec>
   1e390:	017ff844 	movi	r5,-31
   1e394:	2885c83a 	sub	r2,r5,r2
   1e398:	888ad83a 	srl	r5,r17,r2
   1e39c:	00800804 	movi	r2,32
   1e3a0:	18801a26 	beq	r3,r2,1e40c <__muldf3+0x848>
   1e3a4:	01001004 	movi	r4,64
   1e3a8:	20c7c83a 	sub	r3,r4,r3
   1e3ac:	88e2983a 	sll	r17,r17,r3
   1e3b0:	8ca4b03a 	or	r18,r17,r18
   1e3b4:	9004c03a 	cmpne	r2,r18,zero
   1e3b8:	2884b03a 	or	r2,r5,r2
   1e3bc:	144001cc 	andi	r17,r2,7
   1e3c0:	88000d1e 	bne	r17,zero,1e3f8 <__muldf3+0x834>
   1e3c4:	0021883a 	mov	r16,zero
   1e3c8:	102cd0fa 	srli	r22,r2,3
   1e3cc:	3027883a 	mov	r19,r6
   1e3d0:	0005883a 	mov	r2,zero
   1e3d4:	b46cb03a 	or	r22,r22,r17
   1e3d8:	003e5906 	br	1dd40 <__alt_data_end+0xfc01dd40>
   1e3dc:	1007883a 	mov	r3,r2
   1e3e0:	0023883a 	mov	r17,zero
   1e3e4:	8820927a 	slli	r16,r17,9
   1e3e8:	1805883a 	mov	r2,r3
   1e3ec:	8822977a 	slli	r17,r17,29
   1e3f0:	8020d33a 	srli	r16,r16,12
   1e3f4:	003ff406 	br	1e3c8 <__alt_data_end+0xfc01e3c8>
   1e3f8:	10c003cc 	andi	r3,r2,15
   1e3fc:	01000104 	movi	r4,4
   1e400:	193ff626 	beq	r3,r4,1e3dc <__alt_data_end+0xfc01e3dc>
   1e404:	0023883a 	mov	r17,zero
   1e408:	003fd506 	br	1e360 <__alt_data_end+0xfc01e360>
   1e40c:	0023883a 	mov	r17,zero
   1e410:	003fe706 	br	1e3b0 <__alt_data_end+0xfc01e3b0>
   1e414:	00800434 	movhi	r2,16
   1e418:	8c000234 	orhi	r16,r17,8
   1e41c:	10bfffc4 	addi	r2,r2,-1
   1e420:	3027883a 	mov	r19,r6
   1e424:	80a0703a 	and	r16,r16,r2
   1e428:	902d883a 	mov	r22,r18
   1e42c:	003eac06 	br	1dee0 <__alt_data_end+0xfc01dee0>

0001e430 <__subdf3>:
   1e430:	02000434 	movhi	r8,16
   1e434:	423fffc4 	addi	r8,r8,-1
   1e438:	defffb04 	addi	sp,sp,-20
   1e43c:	2a14703a 	and	r10,r5,r8
   1e440:	3812d53a 	srli	r9,r7,20
   1e444:	3a10703a 	and	r8,r7,r8
   1e448:	2006d77a 	srli	r3,r4,29
   1e44c:	3004d77a 	srli	r2,r6,29
   1e450:	dc000015 	stw	r16,0(sp)
   1e454:	501490fa 	slli	r10,r10,3
   1e458:	2820d53a 	srli	r16,r5,20
   1e45c:	401090fa 	slli	r8,r8,3
   1e460:	dc800215 	stw	r18,8(sp)
   1e464:	dc400115 	stw	r17,4(sp)
   1e468:	dfc00415 	stw	ra,16(sp)
   1e46c:	202290fa 	slli	r17,r4,3
   1e470:	dcc00315 	stw	r19,12(sp)
   1e474:	4a41ffcc 	andi	r9,r9,2047
   1e478:	0101ffc4 	movi	r4,2047
   1e47c:	2824d7fa 	srli	r18,r5,31
   1e480:	8401ffcc 	andi	r16,r16,2047
   1e484:	50c6b03a 	or	r3,r10,r3
   1e488:	380ed7fa 	srli	r7,r7,31
   1e48c:	408ab03a 	or	r5,r8,r2
   1e490:	300c90fa 	slli	r6,r6,3
   1e494:	49009626 	beq	r9,r4,1e6f0 <__subdf3+0x2c0>
   1e498:	39c0005c 	xori	r7,r7,1
   1e49c:	8245c83a 	sub	r2,r16,r9
   1e4a0:	3c807426 	beq	r7,r18,1e674 <__subdf3+0x244>
   1e4a4:	0080af0e 	bge	zero,r2,1e764 <__subdf3+0x334>
   1e4a8:	48002a1e 	bne	r9,zero,1e554 <__subdf3+0x124>
   1e4ac:	2988b03a 	or	r4,r5,r6
   1e4b0:	20009a1e 	bne	r4,zero,1e71c <__subdf3+0x2ec>
   1e4b4:	888001cc 	andi	r2,r17,7
   1e4b8:	10000726 	beq	r2,zero,1e4d8 <__subdf3+0xa8>
   1e4bc:	888003cc 	andi	r2,r17,15
   1e4c0:	01000104 	movi	r4,4
   1e4c4:	11000426 	beq	r2,r4,1e4d8 <__subdf3+0xa8>
   1e4c8:	890b883a 	add	r5,r17,r4
   1e4cc:	2c63803a 	cmpltu	r17,r5,r17
   1e4d0:	1c47883a 	add	r3,r3,r17
   1e4d4:	2823883a 	mov	r17,r5
   1e4d8:	1880202c 	andhi	r2,r3,128
   1e4dc:	10005926 	beq	r2,zero,1e644 <__subdf3+0x214>
   1e4e0:	84000044 	addi	r16,r16,1
   1e4e4:	0081ffc4 	movi	r2,2047
   1e4e8:	8080be26 	beq	r16,r2,1e7e4 <__subdf3+0x3b4>
   1e4ec:	017fe034 	movhi	r5,65408
   1e4f0:	297fffc4 	addi	r5,r5,-1
   1e4f4:	1946703a 	and	r3,r3,r5
   1e4f8:	1804977a 	slli	r2,r3,29
   1e4fc:	1806927a 	slli	r3,r3,9
   1e500:	8822d0fa 	srli	r17,r17,3
   1e504:	8401ffcc 	andi	r16,r16,2047
   1e508:	180ad33a 	srli	r5,r3,12
   1e50c:	9100004c 	andi	r4,r18,1
   1e510:	1444b03a 	or	r2,r2,r17
   1e514:	80c1ffcc 	andi	r3,r16,2047
   1e518:	1820953a 	slli	r16,r3,20
   1e51c:	20c03fcc 	andi	r3,r4,255
   1e520:	180897fa 	slli	r4,r3,31
   1e524:	00c00434 	movhi	r3,16
   1e528:	18ffffc4 	addi	r3,r3,-1
   1e52c:	28c6703a 	and	r3,r5,r3
   1e530:	1c06b03a 	or	r3,r3,r16
   1e534:	1906b03a 	or	r3,r3,r4
   1e538:	dfc00417 	ldw	ra,16(sp)
   1e53c:	dcc00317 	ldw	r19,12(sp)
   1e540:	dc800217 	ldw	r18,8(sp)
   1e544:	dc400117 	ldw	r17,4(sp)
   1e548:	dc000017 	ldw	r16,0(sp)
   1e54c:	dec00504 	addi	sp,sp,20
   1e550:	f800283a 	ret
   1e554:	0101ffc4 	movi	r4,2047
   1e558:	813fd626 	beq	r16,r4,1e4b4 <__alt_data_end+0xfc01e4b4>
   1e55c:	29402034 	orhi	r5,r5,128
   1e560:	01000e04 	movi	r4,56
   1e564:	2080a316 	blt	r4,r2,1e7f4 <__subdf3+0x3c4>
   1e568:	010007c4 	movi	r4,31
   1e56c:	2080c616 	blt	r4,r2,1e888 <__subdf3+0x458>
   1e570:	01000804 	movi	r4,32
   1e574:	2089c83a 	sub	r4,r4,r2
   1e578:	2910983a 	sll	r8,r5,r4
   1e57c:	308ed83a 	srl	r7,r6,r2
   1e580:	3108983a 	sll	r4,r6,r4
   1e584:	2884d83a 	srl	r2,r5,r2
   1e588:	41ccb03a 	or	r6,r8,r7
   1e58c:	2008c03a 	cmpne	r4,r4,zero
   1e590:	310cb03a 	or	r6,r6,r4
   1e594:	898dc83a 	sub	r6,r17,r6
   1e598:	89a3803a 	cmpltu	r17,r17,r6
   1e59c:	1887c83a 	sub	r3,r3,r2
   1e5a0:	1c47c83a 	sub	r3,r3,r17
   1e5a4:	3023883a 	mov	r17,r6
   1e5a8:	1880202c 	andhi	r2,r3,128
   1e5ac:	10002326 	beq	r2,zero,1e63c <__subdf3+0x20c>
   1e5b0:	04c02034 	movhi	r19,128
   1e5b4:	9cffffc4 	addi	r19,r19,-1
   1e5b8:	1ce6703a 	and	r19,r3,r19
   1e5bc:	98007a26 	beq	r19,zero,1e7a8 <__subdf3+0x378>
   1e5c0:	9809883a 	mov	r4,r19
   1e5c4:	000e3bc0 	call	e3bc <__clzsi2>
   1e5c8:	113ffe04 	addi	r4,r2,-8
   1e5cc:	00c007c4 	movi	r3,31
   1e5d0:	19007b16 	blt	r3,r4,1e7c0 <__subdf3+0x390>
   1e5d4:	00800804 	movi	r2,32
   1e5d8:	1105c83a 	sub	r2,r2,r4
   1e5dc:	8884d83a 	srl	r2,r17,r2
   1e5e0:	9906983a 	sll	r3,r19,r4
   1e5e4:	8922983a 	sll	r17,r17,r4
   1e5e8:	10c4b03a 	or	r2,r2,r3
   1e5ec:	24007816 	blt	r4,r16,1e7d0 <__subdf3+0x3a0>
   1e5f0:	2421c83a 	sub	r16,r4,r16
   1e5f4:	80c00044 	addi	r3,r16,1
   1e5f8:	010007c4 	movi	r4,31
   1e5fc:	20c09516 	blt	r4,r3,1e854 <__subdf3+0x424>
   1e600:	01400804 	movi	r5,32
   1e604:	28cbc83a 	sub	r5,r5,r3
   1e608:	88c8d83a 	srl	r4,r17,r3
   1e60c:	8962983a 	sll	r17,r17,r5
   1e610:	114a983a 	sll	r5,r2,r5
   1e614:	10c6d83a 	srl	r3,r2,r3
   1e618:	8804c03a 	cmpne	r2,r17,zero
   1e61c:	290ab03a 	or	r5,r5,r4
   1e620:	28a2b03a 	or	r17,r5,r2
   1e624:	0021883a 	mov	r16,zero
   1e628:	003fa206 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e62c:	2090b03a 	or	r8,r4,r2
   1e630:	40018e26 	beq	r8,zero,1ec6c <__subdf3+0x83c>
   1e634:	1007883a 	mov	r3,r2
   1e638:	2023883a 	mov	r17,r4
   1e63c:	888001cc 	andi	r2,r17,7
   1e640:	103f9e1e 	bne	r2,zero,1e4bc <__alt_data_end+0xfc01e4bc>
   1e644:	1804977a 	slli	r2,r3,29
   1e648:	8822d0fa 	srli	r17,r17,3
   1e64c:	1810d0fa 	srli	r8,r3,3
   1e650:	9100004c 	andi	r4,r18,1
   1e654:	1444b03a 	or	r2,r2,r17
   1e658:	00c1ffc4 	movi	r3,2047
   1e65c:	80c02826 	beq	r16,r3,1e700 <__subdf3+0x2d0>
   1e660:	01400434 	movhi	r5,16
   1e664:	297fffc4 	addi	r5,r5,-1
   1e668:	80e0703a 	and	r16,r16,r3
   1e66c:	414a703a 	and	r5,r8,r5
   1e670:	003fa806 	br	1e514 <__alt_data_end+0xfc01e514>
   1e674:	0080630e 	bge	zero,r2,1e804 <__subdf3+0x3d4>
   1e678:	48003026 	beq	r9,zero,1e73c <__subdf3+0x30c>
   1e67c:	0101ffc4 	movi	r4,2047
   1e680:	813f8c26 	beq	r16,r4,1e4b4 <__alt_data_end+0xfc01e4b4>
   1e684:	29402034 	orhi	r5,r5,128
   1e688:	01000e04 	movi	r4,56
   1e68c:	2080a90e 	bge	r4,r2,1e934 <__subdf3+0x504>
   1e690:	298cb03a 	or	r6,r5,r6
   1e694:	3012c03a 	cmpne	r9,r6,zero
   1e698:	0005883a 	mov	r2,zero
   1e69c:	4c53883a 	add	r9,r9,r17
   1e6a0:	4c63803a 	cmpltu	r17,r9,r17
   1e6a4:	10c7883a 	add	r3,r2,r3
   1e6a8:	88c7883a 	add	r3,r17,r3
   1e6ac:	4823883a 	mov	r17,r9
   1e6b0:	1880202c 	andhi	r2,r3,128
   1e6b4:	1000d026 	beq	r2,zero,1e9f8 <__subdf3+0x5c8>
   1e6b8:	84000044 	addi	r16,r16,1
   1e6bc:	0081ffc4 	movi	r2,2047
   1e6c0:	8080fe26 	beq	r16,r2,1eabc <__subdf3+0x68c>
   1e6c4:	00bfe034 	movhi	r2,65408
   1e6c8:	10bfffc4 	addi	r2,r2,-1
   1e6cc:	1886703a 	and	r3,r3,r2
   1e6d0:	880ad07a 	srli	r5,r17,1
   1e6d4:	180497fa 	slli	r2,r3,31
   1e6d8:	8900004c 	andi	r4,r17,1
   1e6dc:	2922b03a 	or	r17,r5,r4
   1e6e0:	1806d07a 	srli	r3,r3,1
   1e6e4:	1462b03a 	or	r17,r2,r17
   1e6e8:	3825883a 	mov	r18,r7
   1e6ec:	003f7106 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e6f0:	2984b03a 	or	r2,r5,r6
   1e6f4:	103f6826 	beq	r2,zero,1e498 <__alt_data_end+0xfc01e498>
   1e6f8:	39c03fcc 	andi	r7,r7,255
   1e6fc:	003f6706 	br	1e49c <__alt_data_end+0xfc01e49c>
   1e700:	4086b03a 	or	r3,r8,r2
   1e704:	18015226 	beq	r3,zero,1ec50 <__subdf3+0x820>
   1e708:	00c00434 	movhi	r3,16
   1e70c:	41400234 	orhi	r5,r8,8
   1e710:	18ffffc4 	addi	r3,r3,-1
   1e714:	28ca703a 	and	r5,r5,r3
   1e718:	003f7e06 	br	1e514 <__alt_data_end+0xfc01e514>
   1e71c:	10bfffc4 	addi	r2,r2,-1
   1e720:	1000491e 	bne	r2,zero,1e848 <__subdf3+0x418>
   1e724:	898fc83a 	sub	r7,r17,r6
   1e728:	89e3803a 	cmpltu	r17,r17,r7
   1e72c:	1947c83a 	sub	r3,r3,r5
   1e730:	1c47c83a 	sub	r3,r3,r17
   1e734:	3823883a 	mov	r17,r7
   1e738:	003f9b06 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e73c:	2988b03a 	or	r4,r5,r6
   1e740:	203f5c26 	beq	r4,zero,1e4b4 <__alt_data_end+0xfc01e4b4>
   1e744:	10bfffc4 	addi	r2,r2,-1
   1e748:	1000931e 	bne	r2,zero,1e998 <__subdf3+0x568>
   1e74c:	898d883a 	add	r6,r17,r6
   1e750:	3463803a 	cmpltu	r17,r6,r17
   1e754:	1947883a 	add	r3,r3,r5
   1e758:	88c7883a 	add	r3,r17,r3
   1e75c:	3023883a 	mov	r17,r6
   1e760:	003fd306 	br	1e6b0 <__alt_data_end+0xfc01e6b0>
   1e764:	1000541e 	bne	r2,zero,1e8b8 <__subdf3+0x488>
   1e768:	80800044 	addi	r2,r16,1
   1e76c:	1081ffcc 	andi	r2,r2,2047
   1e770:	01000044 	movi	r4,1
   1e774:	2080a20e 	bge	r4,r2,1ea00 <__subdf3+0x5d0>
   1e778:	8989c83a 	sub	r4,r17,r6
   1e77c:	8905803a 	cmpltu	r2,r17,r4
   1e780:	1967c83a 	sub	r19,r3,r5
   1e784:	98a7c83a 	sub	r19,r19,r2
   1e788:	9880202c 	andhi	r2,r19,128
   1e78c:	10006326 	beq	r2,zero,1e91c <__subdf3+0x4ec>
   1e790:	3463c83a 	sub	r17,r6,r17
   1e794:	28c7c83a 	sub	r3,r5,r3
   1e798:	344d803a 	cmpltu	r6,r6,r17
   1e79c:	19a7c83a 	sub	r19,r3,r6
   1e7a0:	3825883a 	mov	r18,r7
   1e7a4:	983f861e 	bne	r19,zero,1e5c0 <__alt_data_end+0xfc01e5c0>
   1e7a8:	8809883a 	mov	r4,r17
   1e7ac:	000e3bc0 	call	e3bc <__clzsi2>
   1e7b0:	10800804 	addi	r2,r2,32
   1e7b4:	113ffe04 	addi	r4,r2,-8
   1e7b8:	00c007c4 	movi	r3,31
   1e7bc:	193f850e 	bge	r3,r4,1e5d4 <__alt_data_end+0xfc01e5d4>
   1e7c0:	10bff604 	addi	r2,r2,-40
   1e7c4:	8884983a 	sll	r2,r17,r2
   1e7c8:	0023883a 	mov	r17,zero
   1e7cc:	243f880e 	bge	r4,r16,1e5f0 <__alt_data_end+0xfc01e5f0>
   1e7d0:	00ffe034 	movhi	r3,65408
   1e7d4:	18ffffc4 	addi	r3,r3,-1
   1e7d8:	8121c83a 	sub	r16,r16,r4
   1e7dc:	10c6703a 	and	r3,r2,r3
   1e7e0:	003f3406 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e7e4:	9100004c 	andi	r4,r18,1
   1e7e8:	000b883a 	mov	r5,zero
   1e7ec:	0005883a 	mov	r2,zero
   1e7f0:	003f4806 	br	1e514 <__alt_data_end+0xfc01e514>
   1e7f4:	298cb03a 	or	r6,r5,r6
   1e7f8:	300cc03a 	cmpne	r6,r6,zero
   1e7fc:	0005883a 	mov	r2,zero
   1e800:	003f6406 	br	1e594 <__alt_data_end+0xfc01e594>
   1e804:	10009a1e 	bne	r2,zero,1ea70 <__subdf3+0x640>
   1e808:	82400044 	addi	r9,r16,1
   1e80c:	4881ffcc 	andi	r2,r9,2047
   1e810:	02800044 	movi	r10,1
   1e814:	5080670e 	bge	r10,r2,1e9b4 <__subdf3+0x584>
   1e818:	0081ffc4 	movi	r2,2047
   1e81c:	4880af26 	beq	r9,r2,1eadc <__subdf3+0x6ac>
   1e820:	898d883a 	add	r6,r17,r6
   1e824:	1945883a 	add	r2,r3,r5
   1e828:	3447803a 	cmpltu	r3,r6,r17
   1e82c:	1887883a 	add	r3,r3,r2
   1e830:	182297fa 	slli	r17,r3,31
   1e834:	300cd07a 	srli	r6,r6,1
   1e838:	1806d07a 	srli	r3,r3,1
   1e83c:	4821883a 	mov	r16,r9
   1e840:	89a2b03a 	or	r17,r17,r6
   1e844:	003f1b06 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e848:	0101ffc4 	movi	r4,2047
   1e84c:	813f441e 	bne	r16,r4,1e560 <__alt_data_end+0xfc01e560>
   1e850:	003f1806 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e854:	843ff844 	addi	r16,r16,-31
   1e858:	01400804 	movi	r5,32
   1e85c:	1408d83a 	srl	r4,r2,r16
   1e860:	19405026 	beq	r3,r5,1e9a4 <__subdf3+0x574>
   1e864:	01401004 	movi	r5,64
   1e868:	28c7c83a 	sub	r3,r5,r3
   1e86c:	10c4983a 	sll	r2,r2,r3
   1e870:	88a2b03a 	or	r17,r17,r2
   1e874:	8822c03a 	cmpne	r17,r17,zero
   1e878:	2462b03a 	or	r17,r4,r17
   1e87c:	0007883a 	mov	r3,zero
   1e880:	0021883a 	mov	r16,zero
   1e884:	003f6d06 	br	1e63c <__alt_data_end+0xfc01e63c>
   1e888:	11fff804 	addi	r7,r2,-32
   1e88c:	01000804 	movi	r4,32
   1e890:	29ced83a 	srl	r7,r5,r7
   1e894:	11004526 	beq	r2,r4,1e9ac <__subdf3+0x57c>
   1e898:	01001004 	movi	r4,64
   1e89c:	2089c83a 	sub	r4,r4,r2
   1e8a0:	2904983a 	sll	r2,r5,r4
   1e8a4:	118cb03a 	or	r6,r2,r6
   1e8a8:	300cc03a 	cmpne	r6,r6,zero
   1e8ac:	398cb03a 	or	r6,r7,r6
   1e8b0:	0005883a 	mov	r2,zero
   1e8b4:	003f3706 	br	1e594 <__alt_data_end+0xfc01e594>
   1e8b8:	80002a26 	beq	r16,zero,1e964 <__subdf3+0x534>
   1e8bc:	0101ffc4 	movi	r4,2047
   1e8c0:	49006626 	beq	r9,r4,1ea5c <__subdf3+0x62c>
   1e8c4:	0085c83a 	sub	r2,zero,r2
   1e8c8:	18c02034 	orhi	r3,r3,128
   1e8cc:	01000e04 	movi	r4,56
   1e8d0:	20807e16 	blt	r4,r2,1eacc <__subdf3+0x69c>
   1e8d4:	010007c4 	movi	r4,31
   1e8d8:	2080e716 	blt	r4,r2,1ec78 <__subdf3+0x848>
   1e8dc:	01000804 	movi	r4,32
   1e8e0:	2089c83a 	sub	r4,r4,r2
   1e8e4:	1914983a 	sll	r10,r3,r4
   1e8e8:	8890d83a 	srl	r8,r17,r2
   1e8ec:	8908983a 	sll	r4,r17,r4
   1e8f0:	1884d83a 	srl	r2,r3,r2
   1e8f4:	5222b03a 	or	r17,r10,r8
   1e8f8:	2006c03a 	cmpne	r3,r4,zero
   1e8fc:	88e2b03a 	or	r17,r17,r3
   1e900:	3463c83a 	sub	r17,r6,r17
   1e904:	2885c83a 	sub	r2,r5,r2
   1e908:	344d803a 	cmpltu	r6,r6,r17
   1e90c:	1187c83a 	sub	r3,r2,r6
   1e910:	4821883a 	mov	r16,r9
   1e914:	3825883a 	mov	r18,r7
   1e918:	003f2306 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e91c:	24d0b03a 	or	r8,r4,r19
   1e920:	40001b1e 	bne	r8,zero,1e990 <__subdf3+0x560>
   1e924:	0005883a 	mov	r2,zero
   1e928:	0009883a 	mov	r4,zero
   1e92c:	0021883a 	mov	r16,zero
   1e930:	003f4906 	br	1e658 <__alt_data_end+0xfc01e658>
   1e934:	010007c4 	movi	r4,31
   1e938:	20803a16 	blt	r4,r2,1ea24 <__subdf3+0x5f4>
   1e93c:	01000804 	movi	r4,32
   1e940:	2089c83a 	sub	r4,r4,r2
   1e944:	2912983a 	sll	r9,r5,r4
   1e948:	3090d83a 	srl	r8,r6,r2
   1e94c:	3108983a 	sll	r4,r6,r4
   1e950:	2884d83a 	srl	r2,r5,r2
   1e954:	4a12b03a 	or	r9,r9,r8
   1e958:	2008c03a 	cmpne	r4,r4,zero
   1e95c:	4912b03a 	or	r9,r9,r4
   1e960:	003f4e06 	br	1e69c <__alt_data_end+0xfc01e69c>
   1e964:	1c48b03a 	or	r4,r3,r17
   1e968:	20003c26 	beq	r4,zero,1ea5c <__subdf3+0x62c>
   1e96c:	0084303a 	nor	r2,zero,r2
   1e970:	1000381e 	bne	r2,zero,1ea54 <__subdf3+0x624>
   1e974:	3463c83a 	sub	r17,r6,r17
   1e978:	28c5c83a 	sub	r2,r5,r3
   1e97c:	344d803a 	cmpltu	r6,r6,r17
   1e980:	1187c83a 	sub	r3,r2,r6
   1e984:	4821883a 	mov	r16,r9
   1e988:	3825883a 	mov	r18,r7
   1e98c:	003f0606 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e990:	2023883a 	mov	r17,r4
   1e994:	003f0906 	br	1e5bc <__alt_data_end+0xfc01e5bc>
   1e998:	0101ffc4 	movi	r4,2047
   1e99c:	813f3a1e 	bne	r16,r4,1e688 <__alt_data_end+0xfc01e688>
   1e9a0:	003ec406 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e9a4:	0005883a 	mov	r2,zero
   1e9a8:	003fb106 	br	1e870 <__alt_data_end+0xfc01e870>
   1e9ac:	0005883a 	mov	r2,zero
   1e9b0:	003fbc06 	br	1e8a4 <__alt_data_end+0xfc01e8a4>
   1e9b4:	1c44b03a 	or	r2,r3,r17
   1e9b8:	80008e1e 	bne	r16,zero,1ebf4 <__subdf3+0x7c4>
   1e9bc:	1000c826 	beq	r2,zero,1ece0 <__subdf3+0x8b0>
   1e9c0:	2984b03a 	or	r2,r5,r6
   1e9c4:	103ebb26 	beq	r2,zero,1e4b4 <__alt_data_end+0xfc01e4b4>
   1e9c8:	8989883a 	add	r4,r17,r6
   1e9cc:	1945883a 	add	r2,r3,r5
   1e9d0:	2447803a 	cmpltu	r3,r4,r17
   1e9d4:	1887883a 	add	r3,r3,r2
   1e9d8:	1880202c 	andhi	r2,r3,128
   1e9dc:	2023883a 	mov	r17,r4
   1e9e0:	103f1626 	beq	r2,zero,1e63c <__alt_data_end+0xfc01e63c>
   1e9e4:	00bfe034 	movhi	r2,65408
   1e9e8:	10bfffc4 	addi	r2,r2,-1
   1e9ec:	5021883a 	mov	r16,r10
   1e9f0:	1886703a 	and	r3,r3,r2
   1e9f4:	003eaf06 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1e9f8:	3825883a 	mov	r18,r7
   1e9fc:	003f0f06 	br	1e63c <__alt_data_end+0xfc01e63c>
   1ea00:	1c44b03a 	or	r2,r3,r17
   1ea04:	8000251e 	bne	r16,zero,1ea9c <__subdf3+0x66c>
   1ea08:	1000661e 	bne	r2,zero,1eba4 <__subdf3+0x774>
   1ea0c:	2990b03a 	or	r8,r5,r6
   1ea10:	40009626 	beq	r8,zero,1ec6c <__subdf3+0x83c>
   1ea14:	2807883a 	mov	r3,r5
   1ea18:	3023883a 	mov	r17,r6
   1ea1c:	3825883a 	mov	r18,r7
   1ea20:	003ea406 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ea24:	127ff804 	addi	r9,r2,-32
   1ea28:	01000804 	movi	r4,32
   1ea2c:	2a52d83a 	srl	r9,r5,r9
   1ea30:	11008c26 	beq	r2,r4,1ec64 <__subdf3+0x834>
   1ea34:	01001004 	movi	r4,64
   1ea38:	2085c83a 	sub	r2,r4,r2
   1ea3c:	2884983a 	sll	r2,r5,r2
   1ea40:	118cb03a 	or	r6,r2,r6
   1ea44:	300cc03a 	cmpne	r6,r6,zero
   1ea48:	4992b03a 	or	r9,r9,r6
   1ea4c:	0005883a 	mov	r2,zero
   1ea50:	003f1206 	br	1e69c <__alt_data_end+0xfc01e69c>
   1ea54:	0101ffc4 	movi	r4,2047
   1ea58:	493f9c1e 	bne	r9,r4,1e8cc <__alt_data_end+0xfc01e8cc>
   1ea5c:	2807883a 	mov	r3,r5
   1ea60:	3023883a 	mov	r17,r6
   1ea64:	4821883a 	mov	r16,r9
   1ea68:	3825883a 	mov	r18,r7
   1ea6c:	003e9106 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ea70:	80001f1e 	bne	r16,zero,1eaf0 <__subdf3+0x6c0>
   1ea74:	1c48b03a 	or	r4,r3,r17
   1ea78:	20005a26 	beq	r4,zero,1ebe4 <__subdf3+0x7b4>
   1ea7c:	0084303a 	nor	r2,zero,r2
   1ea80:	1000561e 	bne	r2,zero,1ebdc <__subdf3+0x7ac>
   1ea84:	89a3883a 	add	r17,r17,r6
   1ea88:	1945883a 	add	r2,r3,r5
   1ea8c:	898d803a 	cmpltu	r6,r17,r6
   1ea90:	3087883a 	add	r3,r6,r2
   1ea94:	4821883a 	mov	r16,r9
   1ea98:	003f0506 	br	1e6b0 <__alt_data_end+0xfc01e6b0>
   1ea9c:	10002b1e 	bne	r2,zero,1eb4c <__subdf3+0x71c>
   1eaa0:	2984b03a 	or	r2,r5,r6
   1eaa4:	10008026 	beq	r2,zero,1eca8 <__subdf3+0x878>
   1eaa8:	2807883a 	mov	r3,r5
   1eaac:	3023883a 	mov	r17,r6
   1eab0:	3825883a 	mov	r18,r7
   1eab4:	0401ffc4 	movi	r16,2047
   1eab8:	003e7e06 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1eabc:	3809883a 	mov	r4,r7
   1eac0:	0011883a 	mov	r8,zero
   1eac4:	0005883a 	mov	r2,zero
   1eac8:	003ee306 	br	1e658 <__alt_data_end+0xfc01e658>
   1eacc:	1c62b03a 	or	r17,r3,r17
   1ead0:	8822c03a 	cmpne	r17,r17,zero
   1ead4:	0005883a 	mov	r2,zero
   1ead8:	003f8906 	br	1e900 <__alt_data_end+0xfc01e900>
   1eadc:	3809883a 	mov	r4,r7
   1eae0:	4821883a 	mov	r16,r9
   1eae4:	0011883a 	mov	r8,zero
   1eae8:	0005883a 	mov	r2,zero
   1eaec:	003eda06 	br	1e658 <__alt_data_end+0xfc01e658>
   1eaf0:	0101ffc4 	movi	r4,2047
   1eaf4:	49003b26 	beq	r9,r4,1ebe4 <__subdf3+0x7b4>
   1eaf8:	0085c83a 	sub	r2,zero,r2
   1eafc:	18c02034 	orhi	r3,r3,128
   1eb00:	01000e04 	movi	r4,56
   1eb04:	20806e16 	blt	r4,r2,1ecc0 <__subdf3+0x890>
   1eb08:	010007c4 	movi	r4,31
   1eb0c:	20807716 	blt	r4,r2,1ecec <__subdf3+0x8bc>
   1eb10:	01000804 	movi	r4,32
   1eb14:	2089c83a 	sub	r4,r4,r2
   1eb18:	1914983a 	sll	r10,r3,r4
   1eb1c:	8890d83a 	srl	r8,r17,r2
   1eb20:	8908983a 	sll	r4,r17,r4
   1eb24:	1884d83a 	srl	r2,r3,r2
   1eb28:	5222b03a 	or	r17,r10,r8
   1eb2c:	2006c03a 	cmpne	r3,r4,zero
   1eb30:	88e2b03a 	or	r17,r17,r3
   1eb34:	89a3883a 	add	r17,r17,r6
   1eb38:	1145883a 	add	r2,r2,r5
   1eb3c:	898d803a 	cmpltu	r6,r17,r6
   1eb40:	3087883a 	add	r3,r6,r2
   1eb44:	4821883a 	mov	r16,r9
   1eb48:	003ed906 	br	1e6b0 <__alt_data_end+0xfc01e6b0>
   1eb4c:	2984b03a 	or	r2,r5,r6
   1eb50:	10004226 	beq	r2,zero,1ec5c <__subdf3+0x82c>
   1eb54:	1808d0fa 	srli	r4,r3,3
   1eb58:	8822d0fa 	srli	r17,r17,3
   1eb5c:	1806977a 	slli	r3,r3,29
   1eb60:	2080022c 	andhi	r2,r4,8
   1eb64:	1c62b03a 	or	r17,r3,r17
   1eb68:	10000826 	beq	r2,zero,1eb8c <__subdf3+0x75c>
   1eb6c:	2812d0fa 	srli	r9,r5,3
   1eb70:	4880022c 	andhi	r2,r9,8
   1eb74:	1000051e 	bne	r2,zero,1eb8c <__subdf3+0x75c>
   1eb78:	300cd0fa 	srli	r6,r6,3
   1eb7c:	2804977a 	slli	r2,r5,29
   1eb80:	4809883a 	mov	r4,r9
   1eb84:	3825883a 	mov	r18,r7
   1eb88:	11a2b03a 	or	r17,r2,r6
   1eb8c:	8806d77a 	srli	r3,r17,29
   1eb90:	200890fa 	slli	r4,r4,3
   1eb94:	882290fa 	slli	r17,r17,3
   1eb98:	0401ffc4 	movi	r16,2047
   1eb9c:	1906b03a 	or	r3,r3,r4
   1eba0:	003e4406 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1eba4:	2984b03a 	or	r2,r5,r6
   1eba8:	103e4226 	beq	r2,zero,1e4b4 <__alt_data_end+0xfc01e4b4>
   1ebac:	8989c83a 	sub	r4,r17,r6
   1ebb0:	8911803a 	cmpltu	r8,r17,r4
   1ebb4:	1945c83a 	sub	r2,r3,r5
   1ebb8:	1205c83a 	sub	r2,r2,r8
   1ebbc:	1200202c 	andhi	r8,r2,128
   1ebc0:	403e9a26 	beq	r8,zero,1e62c <__alt_data_end+0xfc01e62c>
   1ebc4:	3463c83a 	sub	r17,r6,r17
   1ebc8:	28c5c83a 	sub	r2,r5,r3
   1ebcc:	344d803a 	cmpltu	r6,r6,r17
   1ebd0:	1187c83a 	sub	r3,r2,r6
   1ebd4:	3825883a 	mov	r18,r7
   1ebd8:	003e3606 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ebdc:	0101ffc4 	movi	r4,2047
   1ebe0:	493fc71e 	bne	r9,r4,1eb00 <__alt_data_end+0xfc01eb00>
   1ebe4:	2807883a 	mov	r3,r5
   1ebe8:	3023883a 	mov	r17,r6
   1ebec:	4821883a 	mov	r16,r9
   1ebf0:	003e3006 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ebf4:	10003626 	beq	r2,zero,1ecd0 <__subdf3+0x8a0>
   1ebf8:	2984b03a 	or	r2,r5,r6
   1ebfc:	10001726 	beq	r2,zero,1ec5c <__subdf3+0x82c>
   1ec00:	1808d0fa 	srli	r4,r3,3
   1ec04:	8822d0fa 	srli	r17,r17,3
   1ec08:	1806977a 	slli	r3,r3,29
   1ec0c:	2080022c 	andhi	r2,r4,8
   1ec10:	1c62b03a 	or	r17,r3,r17
   1ec14:	10000726 	beq	r2,zero,1ec34 <__subdf3+0x804>
   1ec18:	2812d0fa 	srli	r9,r5,3
   1ec1c:	4880022c 	andhi	r2,r9,8
   1ec20:	1000041e 	bne	r2,zero,1ec34 <__subdf3+0x804>
   1ec24:	300cd0fa 	srli	r6,r6,3
   1ec28:	2804977a 	slli	r2,r5,29
   1ec2c:	4809883a 	mov	r4,r9
   1ec30:	11a2b03a 	or	r17,r2,r6
   1ec34:	8806d77a 	srli	r3,r17,29
   1ec38:	200890fa 	slli	r4,r4,3
   1ec3c:	882290fa 	slli	r17,r17,3
   1ec40:	3825883a 	mov	r18,r7
   1ec44:	1906b03a 	or	r3,r3,r4
   1ec48:	0401ffc4 	movi	r16,2047
   1ec4c:	003e1906 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ec50:	000b883a 	mov	r5,zero
   1ec54:	0005883a 	mov	r2,zero
   1ec58:	003e2e06 	br	1e514 <__alt_data_end+0xfc01e514>
   1ec5c:	0401ffc4 	movi	r16,2047
   1ec60:	003e1406 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ec64:	0005883a 	mov	r2,zero
   1ec68:	003f7506 	br	1ea40 <__alt_data_end+0xfc01ea40>
   1ec6c:	0005883a 	mov	r2,zero
   1ec70:	0009883a 	mov	r4,zero
   1ec74:	003e7806 	br	1e658 <__alt_data_end+0xfc01e658>
   1ec78:	123ff804 	addi	r8,r2,-32
   1ec7c:	01000804 	movi	r4,32
   1ec80:	1a10d83a 	srl	r8,r3,r8
   1ec84:	11002526 	beq	r2,r4,1ed1c <__subdf3+0x8ec>
   1ec88:	01001004 	movi	r4,64
   1ec8c:	2085c83a 	sub	r2,r4,r2
   1ec90:	1884983a 	sll	r2,r3,r2
   1ec94:	1444b03a 	or	r2,r2,r17
   1ec98:	1004c03a 	cmpne	r2,r2,zero
   1ec9c:	40a2b03a 	or	r17,r8,r2
   1eca0:	0005883a 	mov	r2,zero
   1eca4:	003f1606 	br	1e900 <__alt_data_end+0xfc01e900>
   1eca8:	02000434 	movhi	r8,16
   1ecac:	0009883a 	mov	r4,zero
   1ecb0:	423fffc4 	addi	r8,r8,-1
   1ecb4:	00bfffc4 	movi	r2,-1
   1ecb8:	0401ffc4 	movi	r16,2047
   1ecbc:	003e6606 	br	1e658 <__alt_data_end+0xfc01e658>
   1ecc0:	1c62b03a 	or	r17,r3,r17
   1ecc4:	8822c03a 	cmpne	r17,r17,zero
   1ecc8:	0005883a 	mov	r2,zero
   1eccc:	003f9906 	br	1eb34 <__alt_data_end+0xfc01eb34>
   1ecd0:	2807883a 	mov	r3,r5
   1ecd4:	3023883a 	mov	r17,r6
   1ecd8:	0401ffc4 	movi	r16,2047
   1ecdc:	003df506 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ece0:	2807883a 	mov	r3,r5
   1ece4:	3023883a 	mov	r17,r6
   1ece8:	003df206 	br	1e4b4 <__alt_data_end+0xfc01e4b4>
   1ecec:	123ff804 	addi	r8,r2,-32
   1ecf0:	01000804 	movi	r4,32
   1ecf4:	1a10d83a 	srl	r8,r3,r8
   1ecf8:	11000a26 	beq	r2,r4,1ed24 <__subdf3+0x8f4>
   1ecfc:	01001004 	movi	r4,64
   1ed00:	2085c83a 	sub	r2,r4,r2
   1ed04:	1884983a 	sll	r2,r3,r2
   1ed08:	1444b03a 	or	r2,r2,r17
   1ed0c:	1004c03a 	cmpne	r2,r2,zero
   1ed10:	40a2b03a 	or	r17,r8,r2
   1ed14:	0005883a 	mov	r2,zero
   1ed18:	003f8606 	br	1eb34 <__alt_data_end+0xfc01eb34>
   1ed1c:	0005883a 	mov	r2,zero
   1ed20:	003fdc06 	br	1ec94 <__alt_data_end+0xfc01ec94>
   1ed24:	0005883a 	mov	r2,zero
   1ed28:	003ff706 	br	1ed08 <__alt_data_end+0xfc01ed08>

0001ed2c <__fixdfsi>:
   1ed2c:	280cd53a 	srli	r6,r5,20
   1ed30:	00c00434 	movhi	r3,16
   1ed34:	18ffffc4 	addi	r3,r3,-1
   1ed38:	3181ffcc 	andi	r6,r6,2047
   1ed3c:	01c0ff84 	movi	r7,1022
   1ed40:	28c6703a 	and	r3,r5,r3
   1ed44:	280ad7fa 	srli	r5,r5,31
   1ed48:	3980120e 	bge	r7,r6,1ed94 <__fixdfsi+0x68>
   1ed4c:	00810744 	movi	r2,1053
   1ed50:	11800c16 	blt	r2,r6,1ed84 <__fixdfsi+0x58>
   1ed54:	00810cc4 	movi	r2,1075
   1ed58:	1185c83a 	sub	r2,r2,r6
   1ed5c:	01c007c4 	movi	r7,31
   1ed60:	18c00434 	orhi	r3,r3,16
   1ed64:	38800d16 	blt	r7,r2,1ed9c <__fixdfsi+0x70>
   1ed68:	31befb44 	addi	r6,r6,-1043
   1ed6c:	2084d83a 	srl	r2,r4,r2
   1ed70:	1986983a 	sll	r3,r3,r6
   1ed74:	1884b03a 	or	r2,r3,r2
   1ed78:	28000726 	beq	r5,zero,1ed98 <__fixdfsi+0x6c>
   1ed7c:	0085c83a 	sub	r2,zero,r2
   1ed80:	f800283a 	ret
   1ed84:	00a00034 	movhi	r2,32768
   1ed88:	10bfffc4 	addi	r2,r2,-1
   1ed8c:	2885883a 	add	r2,r5,r2
   1ed90:	f800283a 	ret
   1ed94:	0005883a 	mov	r2,zero
   1ed98:	f800283a 	ret
   1ed9c:	008104c4 	movi	r2,1043
   1eda0:	1185c83a 	sub	r2,r2,r6
   1eda4:	1884d83a 	srl	r2,r3,r2
   1eda8:	003ff306 	br	1ed78 <__alt_data_end+0xfc01ed78>

0001edac <__floatsidf>:
   1edac:	defffd04 	addi	sp,sp,-12
   1edb0:	dfc00215 	stw	ra,8(sp)
   1edb4:	dc400115 	stw	r17,4(sp)
   1edb8:	dc000015 	stw	r16,0(sp)
   1edbc:	20002b26 	beq	r4,zero,1ee6c <__floatsidf+0xc0>
   1edc0:	2023883a 	mov	r17,r4
   1edc4:	2020d7fa 	srli	r16,r4,31
   1edc8:	20002d16 	blt	r4,zero,1ee80 <__floatsidf+0xd4>
   1edcc:	8809883a 	mov	r4,r17
   1edd0:	000e3bc0 	call	e3bc <__clzsi2>
   1edd4:	01410784 	movi	r5,1054
   1edd8:	288bc83a 	sub	r5,r5,r2
   1eddc:	01010cc4 	movi	r4,1075
   1ede0:	2149c83a 	sub	r4,r4,r5
   1ede4:	00c007c4 	movi	r3,31
   1ede8:	1900160e 	bge	r3,r4,1ee44 <__floatsidf+0x98>
   1edec:	00c104c4 	movi	r3,1043
   1edf0:	1947c83a 	sub	r3,r3,r5
   1edf4:	88c6983a 	sll	r3,r17,r3
   1edf8:	00800434 	movhi	r2,16
   1edfc:	10bfffc4 	addi	r2,r2,-1
   1ee00:	1886703a 	and	r3,r3,r2
   1ee04:	2941ffcc 	andi	r5,r5,2047
   1ee08:	800d883a 	mov	r6,r16
   1ee0c:	0005883a 	mov	r2,zero
   1ee10:	280a953a 	slli	r5,r5,20
   1ee14:	31803fcc 	andi	r6,r6,255
   1ee18:	01000434 	movhi	r4,16
   1ee1c:	300c97fa 	slli	r6,r6,31
   1ee20:	213fffc4 	addi	r4,r4,-1
   1ee24:	1906703a 	and	r3,r3,r4
   1ee28:	1946b03a 	or	r3,r3,r5
   1ee2c:	1986b03a 	or	r3,r3,r6
   1ee30:	dfc00217 	ldw	ra,8(sp)
   1ee34:	dc400117 	ldw	r17,4(sp)
   1ee38:	dc000017 	ldw	r16,0(sp)
   1ee3c:	dec00304 	addi	sp,sp,12
   1ee40:	f800283a 	ret
   1ee44:	00c002c4 	movi	r3,11
   1ee48:	1887c83a 	sub	r3,r3,r2
   1ee4c:	88c6d83a 	srl	r3,r17,r3
   1ee50:	8904983a 	sll	r2,r17,r4
   1ee54:	01000434 	movhi	r4,16
   1ee58:	213fffc4 	addi	r4,r4,-1
   1ee5c:	2941ffcc 	andi	r5,r5,2047
   1ee60:	1906703a 	and	r3,r3,r4
   1ee64:	800d883a 	mov	r6,r16
   1ee68:	003fe906 	br	1ee10 <__alt_data_end+0xfc01ee10>
   1ee6c:	000d883a 	mov	r6,zero
   1ee70:	000b883a 	mov	r5,zero
   1ee74:	0007883a 	mov	r3,zero
   1ee78:	0005883a 	mov	r2,zero
   1ee7c:	003fe406 	br	1ee10 <__alt_data_end+0xfc01ee10>
   1ee80:	0123c83a 	sub	r17,zero,r4
   1ee84:	003fd106 	br	1edcc <__alt_data_end+0xfc01edcc>

0001ee88 <__floatunsidf>:
   1ee88:	defffe04 	addi	sp,sp,-8
   1ee8c:	dc000015 	stw	r16,0(sp)
   1ee90:	dfc00115 	stw	ra,4(sp)
   1ee94:	2021883a 	mov	r16,r4
   1ee98:	20002226 	beq	r4,zero,1ef24 <__floatunsidf+0x9c>
   1ee9c:	000e3bc0 	call	e3bc <__clzsi2>
   1eea0:	01010784 	movi	r4,1054
   1eea4:	2089c83a 	sub	r4,r4,r2
   1eea8:	01810cc4 	movi	r6,1075
   1eeac:	310dc83a 	sub	r6,r6,r4
   1eeb0:	00c007c4 	movi	r3,31
   1eeb4:	1980120e 	bge	r3,r6,1ef00 <__floatunsidf+0x78>
   1eeb8:	00c104c4 	movi	r3,1043
   1eebc:	1907c83a 	sub	r3,r3,r4
   1eec0:	80ca983a 	sll	r5,r16,r3
   1eec4:	00800434 	movhi	r2,16
   1eec8:	10bfffc4 	addi	r2,r2,-1
   1eecc:	2101ffcc 	andi	r4,r4,2047
   1eed0:	0021883a 	mov	r16,zero
   1eed4:	288a703a 	and	r5,r5,r2
   1eed8:	2008953a 	slli	r4,r4,20
   1eedc:	00c00434 	movhi	r3,16
   1eee0:	18ffffc4 	addi	r3,r3,-1
   1eee4:	28c6703a 	and	r3,r5,r3
   1eee8:	8005883a 	mov	r2,r16
   1eeec:	1906b03a 	or	r3,r3,r4
   1eef0:	dfc00117 	ldw	ra,4(sp)
   1eef4:	dc000017 	ldw	r16,0(sp)
   1eef8:	dec00204 	addi	sp,sp,8
   1eefc:	f800283a 	ret
   1ef00:	00c002c4 	movi	r3,11
   1ef04:	188bc83a 	sub	r5,r3,r2
   1ef08:	814ad83a 	srl	r5,r16,r5
   1ef0c:	00c00434 	movhi	r3,16
   1ef10:	18ffffc4 	addi	r3,r3,-1
   1ef14:	81a0983a 	sll	r16,r16,r6
   1ef18:	2101ffcc 	andi	r4,r4,2047
   1ef1c:	28ca703a 	and	r5,r5,r3
   1ef20:	003fed06 	br	1eed8 <__alt_data_end+0xfc01eed8>
   1ef24:	0009883a 	mov	r4,zero
   1ef28:	000b883a 	mov	r5,zero
   1ef2c:	003fea06 	br	1eed8 <__alt_data_end+0xfc01eed8>

0001ef30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ef30:	defffe04 	addi	sp,sp,-8
   1ef34:	dfc00115 	stw	ra,4(sp)
   1ef38:	df000015 	stw	fp,0(sp)
   1ef3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ef40:	d0a5b917 	ldw	r2,-26908(gp)
   1ef44:	10000326 	beq	r2,zero,1ef54 <alt_get_errno+0x24>
   1ef48:	d0a5b917 	ldw	r2,-26908(gp)
   1ef4c:	103ee83a 	callr	r2
   1ef50:	00000106 	br	1ef58 <alt_get_errno+0x28>
   1ef54:	d0b24304 	addi	r2,gp,-14068
}
   1ef58:	e037883a 	mov	sp,fp
   1ef5c:	dfc00117 	ldw	ra,4(sp)
   1ef60:	df000017 	ldw	fp,0(sp)
   1ef64:	dec00204 	addi	sp,sp,8
   1ef68:	f800283a 	ret

0001ef6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ef6c:	defffb04 	addi	sp,sp,-20
   1ef70:	dfc00415 	stw	ra,16(sp)
   1ef74:	df000315 	stw	fp,12(sp)
   1ef78:	df000304 	addi	fp,sp,12
   1ef7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ef80:	e0bfff17 	ldw	r2,-4(fp)
   1ef84:	10000816 	blt	r2,zero,1efa8 <close+0x3c>
   1ef88:	01400304 	movi	r5,12
   1ef8c:	e13fff17 	ldw	r4,-4(fp)
   1ef90:	000cf040 	call	cf04 <__mulsi3>
   1ef94:	1007883a 	mov	r3,r2
   1ef98:	008000f4 	movhi	r2,3
   1ef9c:	10ad4604 	addi	r2,r2,-19176
   1efa0:	1885883a 	add	r2,r3,r2
   1efa4:	00000106 	br	1efac <close+0x40>
   1efa8:	0005883a 	mov	r2,zero
   1efac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1efb0:	e0bffd17 	ldw	r2,-12(fp)
   1efb4:	10001926 	beq	r2,zero,1f01c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1efb8:	e0bffd17 	ldw	r2,-12(fp)
   1efbc:	10800017 	ldw	r2,0(r2)
   1efc0:	10800417 	ldw	r2,16(r2)
   1efc4:	10000626 	beq	r2,zero,1efe0 <close+0x74>
   1efc8:	e0bffd17 	ldw	r2,-12(fp)
   1efcc:	10800017 	ldw	r2,0(r2)
   1efd0:	10800417 	ldw	r2,16(r2)
   1efd4:	e13ffd17 	ldw	r4,-12(fp)
   1efd8:	103ee83a 	callr	r2
   1efdc:	00000106 	br	1efe4 <close+0x78>
   1efe0:	0005883a 	mov	r2,zero
   1efe4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1efe8:	e13fff17 	ldw	r4,-4(fp)
   1efec:	001f8140 	call	1f814 <alt_release_fd>
    if (rval < 0)
   1eff0:	e0bffe17 	ldw	r2,-8(fp)
   1eff4:	1000070e 	bge	r2,zero,1f014 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1eff8:	001ef300 	call	1ef30 <alt_get_errno>
   1effc:	1007883a 	mov	r3,r2
   1f000:	e0bffe17 	ldw	r2,-8(fp)
   1f004:	0085c83a 	sub	r2,zero,r2
   1f008:	18800015 	stw	r2,0(r3)
      return -1;
   1f00c:	00bfffc4 	movi	r2,-1
   1f010:	00000706 	br	1f030 <close+0xc4>
    }
    return 0;
   1f014:	0005883a 	mov	r2,zero
   1f018:	00000506 	br	1f030 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f01c:	001ef300 	call	1ef30 <alt_get_errno>
   1f020:	1007883a 	mov	r3,r2
   1f024:	00801444 	movi	r2,81
   1f028:	18800015 	stw	r2,0(r3)
    return -1;
   1f02c:	00bfffc4 	movi	r2,-1
  }
}
   1f030:	e037883a 	mov	sp,fp
   1f034:	dfc00117 	ldw	ra,4(sp)
   1f038:	df000017 	ldw	fp,0(sp)
   1f03c:	dec00204 	addi	sp,sp,8
   1f040:	f800283a 	ret

0001f044 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1f044:	defffc04 	addi	sp,sp,-16
   1f048:	df000315 	stw	fp,12(sp)
   1f04c:	df000304 	addi	fp,sp,12
   1f050:	e13ffd15 	stw	r4,-12(fp)
   1f054:	e17ffe15 	stw	r5,-8(fp)
   1f058:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1f05c:	e0bfff17 	ldw	r2,-4(fp)
}
   1f060:	e037883a 	mov	sp,fp
   1f064:	df000017 	ldw	fp,0(sp)
   1f068:	dec00104 	addi	sp,sp,4
   1f06c:	f800283a 	ret

0001f070 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f070:	defffd04 	addi	sp,sp,-12
   1f074:	df000215 	stw	fp,8(sp)
   1f078:	df000204 	addi	fp,sp,8
   1f07c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f080:	0001883a 	nop
   1f084:	e0bfff17 	ldw	r2,-4(fp)
   1f088:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f08c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f090:	10000226 	beq	r2,zero,1f09c <_exit+0x2c>
    ALT_SIM_FAIL();
   1f094:	002af070 	cmpltui	zero,zero,43969
   1f098:	00000106 	br	1f0a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1f09c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f0a0:	003fff06 	br	1f0a0 <__alt_data_end+0xfc01f0a0>

0001f0a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f0a4:	defffe04 	addi	sp,sp,-8
   1f0a8:	dfc00115 	stw	ra,4(sp)
   1f0ac:	df000015 	stw	fp,0(sp)
   1f0b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f0b4:	d0a5b917 	ldw	r2,-26908(gp)
   1f0b8:	10000326 	beq	r2,zero,1f0c8 <alt_get_errno+0x24>
   1f0bc:	d0a5b917 	ldw	r2,-26908(gp)
   1f0c0:	103ee83a 	callr	r2
   1f0c4:	00000106 	br	1f0cc <alt_get_errno+0x28>
   1f0c8:	d0b24304 	addi	r2,gp,-14068
}
   1f0cc:	e037883a 	mov	sp,fp
   1f0d0:	dfc00117 	ldw	ra,4(sp)
   1f0d4:	df000017 	ldw	fp,0(sp)
   1f0d8:	dec00204 	addi	sp,sp,8
   1f0dc:	f800283a 	ret

0001f0e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1f0e0:	defffb04 	addi	sp,sp,-20
   1f0e4:	dfc00415 	stw	ra,16(sp)
   1f0e8:	df000315 	stw	fp,12(sp)
   1f0ec:	df000304 	addi	fp,sp,12
   1f0f0:	e13ffe15 	stw	r4,-8(fp)
   1f0f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f0f8:	e0bffe17 	ldw	r2,-8(fp)
   1f0fc:	10000816 	blt	r2,zero,1f120 <fstat+0x40>
   1f100:	01400304 	movi	r5,12
   1f104:	e13ffe17 	ldw	r4,-8(fp)
   1f108:	000cf040 	call	cf04 <__mulsi3>
   1f10c:	1007883a 	mov	r3,r2
   1f110:	008000f4 	movhi	r2,3
   1f114:	10ad4604 	addi	r2,r2,-19176
   1f118:	1885883a 	add	r2,r3,r2
   1f11c:	00000106 	br	1f124 <fstat+0x44>
   1f120:	0005883a 	mov	r2,zero
   1f124:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1f128:	e0bffd17 	ldw	r2,-12(fp)
   1f12c:	10001026 	beq	r2,zero,1f170 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1f130:	e0bffd17 	ldw	r2,-12(fp)
   1f134:	10800017 	ldw	r2,0(r2)
   1f138:	10800817 	ldw	r2,32(r2)
   1f13c:	10000726 	beq	r2,zero,1f15c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1f140:	e0bffd17 	ldw	r2,-12(fp)
   1f144:	10800017 	ldw	r2,0(r2)
   1f148:	10800817 	ldw	r2,32(r2)
   1f14c:	e17fff17 	ldw	r5,-4(fp)
   1f150:	e13ffd17 	ldw	r4,-12(fp)
   1f154:	103ee83a 	callr	r2
   1f158:	00000a06 	br	1f184 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1f15c:	e0bfff17 	ldw	r2,-4(fp)
   1f160:	00c80004 	movi	r3,8192
   1f164:	10c00115 	stw	r3,4(r2)
      return 0;
   1f168:	0005883a 	mov	r2,zero
   1f16c:	00000506 	br	1f184 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f170:	001f0a40 	call	1f0a4 <alt_get_errno>
   1f174:	1007883a 	mov	r3,r2
   1f178:	00801444 	movi	r2,81
   1f17c:	18800015 	stw	r2,0(r3)
    return -1;
   1f180:	00bfffc4 	movi	r2,-1
  }
}
   1f184:	e037883a 	mov	sp,fp
   1f188:	dfc00117 	ldw	ra,4(sp)
   1f18c:	df000017 	ldw	fp,0(sp)
   1f190:	dec00204 	addi	sp,sp,8
   1f194:	f800283a 	ret

0001f198 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1f198:	deffff04 	addi	sp,sp,-4
   1f19c:	df000015 	stw	fp,0(sp)
   1f1a0:	d839883a 	mov	fp,sp
  return 0;
   1f1a4:	0005883a 	mov	r2,zero
}
   1f1a8:	e037883a 	mov	sp,fp
   1f1ac:	df000017 	ldw	fp,0(sp)
   1f1b0:	dec00104 	addi	sp,sp,4
   1f1b4:	f800283a 	ret

0001f1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f1b8:	defffe04 	addi	sp,sp,-8
   1f1bc:	dfc00115 	stw	ra,4(sp)
   1f1c0:	df000015 	stw	fp,0(sp)
   1f1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f1c8:	d0a5b917 	ldw	r2,-26908(gp)
   1f1cc:	10000326 	beq	r2,zero,1f1dc <alt_get_errno+0x24>
   1f1d0:	d0a5b917 	ldw	r2,-26908(gp)
   1f1d4:	103ee83a 	callr	r2
   1f1d8:	00000106 	br	1f1e0 <alt_get_errno+0x28>
   1f1dc:	d0b24304 	addi	r2,gp,-14068
}
   1f1e0:	e037883a 	mov	sp,fp
   1f1e4:	dfc00117 	ldw	ra,4(sp)
   1f1e8:	df000017 	ldw	fp,0(sp)
   1f1ec:	dec00204 	addi	sp,sp,8
   1f1f0:	f800283a 	ret

0001f1f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1f1f4:	deffed04 	addi	sp,sp,-76
   1f1f8:	dfc01215 	stw	ra,72(sp)
   1f1fc:	df001115 	stw	fp,68(sp)
   1f200:	df001104 	addi	fp,sp,68
   1f204:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f208:	e0bfff17 	ldw	r2,-4(fp)
   1f20c:	10000816 	blt	r2,zero,1f230 <isatty+0x3c>
   1f210:	01400304 	movi	r5,12
   1f214:	e13fff17 	ldw	r4,-4(fp)
   1f218:	000cf040 	call	cf04 <__mulsi3>
   1f21c:	1007883a 	mov	r3,r2
   1f220:	008000f4 	movhi	r2,3
   1f224:	10ad4604 	addi	r2,r2,-19176
   1f228:	1885883a 	add	r2,r3,r2
   1f22c:	00000106 	br	1f234 <isatty+0x40>
   1f230:	0005883a 	mov	r2,zero
   1f234:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1f238:	e0bfef17 	ldw	r2,-68(fp)
   1f23c:	10000e26 	beq	r2,zero,1f278 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1f240:	e0bfef17 	ldw	r2,-68(fp)
   1f244:	10800017 	ldw	r2,0(r2)
   1f248:	10800817 	ldw	r2,32(r2)
   1f24c:	1000021e 	bne	r2,zero,1f258 <isatty+0x64>
    {
      return 1;
   1f250:	00800044 	movi	r2,1
   1f254:	00000d06 	br	1f28c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1f258:	e0bff004 	addi	r2,fp,-64
   1f25c:	100b883a 	mov	r5,r2
   1f260:	e13fff17 	ldw	r4,-4(fp)
   1f264:	001f0e00 	call	1f0e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1f268:	e0bff117 	ldw	r2,-60(fp)
   1f26c:	10880020 	cmpeqi	r2,r2,8192
   1f270:	10803fcc 	andi	r2,r2,255
   1f274:	00000506 	br	1f28c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f278:	001f1b80 	call	1f1b8 <alt_get_errno>
   1f27c:	1007883a 	mov	r3,r2
   1f280:	00801444 	movi	r2,81
   1f284:	18800015 	stw	r2,0(r3)
    return 0;
   1f288:	0005883a 	mov	r2,zero
  }
}
   1f28c:	e037883a 	mov	sp,fp
   1f290:	dfc00117 	ldw	ra,4(sp)
   1f294:	df000017 	ldw	fp,0(sp)
   1f298:	dec00204 	addi	sp,sp,8
   1f29c:	f800283a 	ret

0001f2a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f2a0:	defffe04 	addi	sp,sp,-8
   1f2a4:	dfc00115 	stw	ra,4(sp)
   1f2a8:	df000015 	stw	fp,0(sp)
   1f2ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f2b0:	d0a5b917 	ldw	r2,-26908(gp)
   1f2b4:	10000326 	beq	r2,zero,1f2c4 <alt_get_errno+0x24>
   1f2b8:	d0a5b917 	ldw	r2,-26908(gp)
   1f2bc:	103ee83a 	callr	r2
   1f2c0:	00000106 	br	1f2c8 <alt_get_errno+0x28>
   1f2c4:	d0b24304 	addi	r2,gp,-14068
}
   1f2c8:	e037883a 	mov	sp,fp
   1f2cc:	dfc00117 	ldw	ra,4(sp)
   1f2d0:	df000017 	ldw	fp,0(sp)
   1f2d4:	dec00204 	addi	sp,sp,8
   1f2d8:	f800283a 	ret

0001f2dc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1f2dc:	defffb04 	addi	sp,sp,-20
   1f2e0:	dfc00415 	stw	ra,16(sp)
   1f2e4:	df000315 	stw	fp,12(sp)
   1f2e8:	df000304 	addi	fp,sp,12
   1f2ec:	e13ffe15 	stw	r4,-8(fp)
   1f2f0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1f2f4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1f2f8:	e0bffe17 	ldw	r2,-8(fp)
   1f2fc:	00802f16 	blt	zero,r2,1f3bc <kill+0xe0>
  {
    switch (sig)
   1f300:	e0bfff17 	ldw	r2,-4(fp)
   1f304:	10800828 	cmpgeui	r2,r2,32
   1f308:	1000291e 	bne	r2,zero,1f3b0 <kill+0xd4>
   1f30c:	e0bfff17 	ldw	r2,-4(fp)
   1f310:	100690ba 	slli	r3,r2,2
   1f314:	008000b4 	movhi	r2,2
   1f318:	10bcca04 	addi	r2,r2,-3288
   1f31c:	1885883a 	add	r2,r3,r2
   1f320:	10800017 	ldw	r2,0(r2)
   1f324:	1000683a 	jmp	r2
   1f328:	0001f3d0 	cmplti	zero,zero,1999
   1f32c:	0001f3b0 	cmpltui	zero,zero,1998
   1f330:	0001f3b0 	cmpltui	zero,zero,1998
   1f334:	0001f3a8 	cmpgeui	zero,zero,1998
   1f338:	0001f3a8 	cmpgeui	zero,zero,1998
   1f33c:	0001f3a8 	cmpgeui	zero,zero,1998
   1f340:	0001f3a8 	cmpgeui	zero,zero,1998
   1f344:	0001f3b0 	cmpltui	zero,zero,1998
   1f348:	0001f3a8 	cmpgeui	zero,zero,1998
   1f34c:	0001f3a8 	cmpgeui	zero,zero,1998
   1f350:	0001f3a8 	cmpgeui	zero,zero,1998
   1f354:	0001f3a8 	cmpgeui	zero,zero,1998
   1f358:	0001f3a8 	cmpgeui	zero,zero,1998
   1f35c:	0001f3a8 	cmpgeui	zero,zero,1998
   1f360:	0001f3a8 	cmpgeui	zero,zero,1998
   1f364:	0001f3a8 	cmpgeui	zero,zero,1998
   1f368:	0001f3d0 	cmplti	zero,zero,1999
   1f36c:	0001f3b0 	cmpltui	zero,zero,1998
   1f370:	0001f3b0 	cmpltui	zero,zero,1998
   1f374:	0001f3b0 	cmpltui	zero,zero,1998
   1f378:	0001f3d0 	cmplti	zero,zero,1999
   1f37c:	0001f3b0 	cmpltui	zero,zero,1998
   1f380:	0001f3b0 	cmpltui	zero,zero,1998
   1f384:	0001f3a8 	cmpgeui	zero,zero,1998
   1f388:	0001f3a8 	cmpgeui	zero,zero,1998
   1f38c:	0001f3a8 	cmpgeui	zero,zero,1998
   1f390:	0001f3a8 	cmpgeui	zero,zero,1998
   1f394:	0001f3a8 	cmpgeui	zero,zero,1998
   1f398:	0001f3b0 	cmpltui	zero,zero,1998
   1f39c:	0001f3b0 	cmpltui	zero,zero,1998
   1f3a0:	0001f3a8 	cmpgeui	zero,zero,1998
   1f3a4:	0001f3a8 	cmpgeui	zero,zero,1998
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1f3a8:	0009883a 	mov	r4,zero
   1f3ac:	001f0700 	call	1f070 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1f3b0:	00800584 	movi	r2,22
   1f3b4:	e0bffd15 	stw	r2,-12(fp)
   1f3b8:	00000606 	br	1f3d4 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1f3bc:	e0bffe17 	ldw	r2,-8(fp)
   1f3c0:	0080040e 	bge	zero,r2,1f3d4 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1f3c4:	008000c4 	movi	r2,3
   1f3c8:	e0bffd15 	stw	r2,-12(fp)
   1f3cc:	00000106 	br	1f3d4 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1f3d0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1f3d4:	e0bffd17 	ldw	r2,-12(fp)
   1f3d8:	10000626 	beq	r2,zero,1f3f4 <kill+0x118>
  {
    ALT_ERRNO = status;
   1f3dc:	001f2a00 	call	1f2a0 <alt_get_errno>
   1f3e0:	1007883a 	mov	r3,r2
   1f3e4:	e0bffd17 	ldw	r2,-12(fp)
   1f3e8:	18800015 	stw	r2,0(r3)
    return -1;
   1f3ec:	00bfffc4 	movi	r2,-1
   1f3f0:	00000106 	br	1f3f8 <kill+0x11c>
  }

  return 0;
   1f3f4:	0005883a 	mov	r2,zero
}
   1f3f8:	e037883a 	mov	sp,fp
   1f3fc:	dfc00117 	ldw	ra,4(sp)
   1f400:	df000017 	ldw	fp,0(sp)
   1f404:	dec00204 	addi	sp,sp,8
   1f408:	f800283a 	ret

0001f40c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1f40c:	defffc04 	addi	sp,sp,-16
   1f410:	df000315 	stw	fp,12(sp)
   1f414:	df000304 	addi	fp,sp,12
   1f418:	e13ffd15 	stw	r4,-12(fp)
   1f41c:	e17ffe15 	stw	r5,-8(fp)
   1f420:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1f424:	e0fffe17 	ldw	r3,-8(fp)
   1f428:	e0bffd17 	ldw	r2,-12(fp)
   1f42c:	18800c26 	beq	r3,r2,1f460 <alt_load_section+0x54>
  {
    while( to != end )
   1f430:	00000806 	br	1f454 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1f434:	e0bffe17 	ldw	r2,-8(fp)
   1f438:	10c00104 	addi	r3,r2,4
   1f43c:	e0fffe15 	stw	r3,-8(fp)
   1f440:	e0fffd17 	ldw	r3,-12(fp)
   1f444:	19000104 	addi	r4,r3,4
   1f448:	e13ffd15 	stw	r4,-12(fp)
   1f44c:	18c00017 	ldw	r3,0(r3)
   1f450:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1f454:	e0fffe17 	ldw	r3,-8(fp)
   1f458:	e0bfff17 	ldw	r2,-4(fp)
   1f45c:	18bff51e 	bne	r3,r2,1f434 <__alt_data_end+0xfc01f434>
    {
      *to++ = *from++;
    }
  }
}
   1f460:	0001883a 	nop
   1f464:	e037883a 	mov	sp,fp
   1f468:	df000017 	ldw	fp,0(sp)
   1f46c:	dec00104 	addi	sp,sp,4
   1f470:	f800283a 	ret

0001f474 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1f474:	defffe04 	addi	sp,sp,-8
   1f478:	dfc00115 	stw	ra,4(sp)
   1f47c:	df000015 	stw	fp,0(sp)
   1f480:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1f484:	018000f4 	movhi	r6,3
   1f488:	31b78c04 	addi	r6,r6,-8656
   1f48c:	014000f4 	movhi	r5,3
   1f490:	296b1304 	addi	r5,r5,-21428
   1f494:	010000f4 	movhi	r4,3
   1f498:	21378c04 	addi	r4,r4,-8656
   1f49c:	001f40c0 	call	1f40c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1f4a0:	01800034 	movhi	r6,0
   1f4a4:	31808c04 	addi	r6,r6,560
   1f4a8:	01400034 	movhi	r5,0
   1f4ac:	29400804 	addi	r5,r5,32
   1f4b0:	01000034 	movhi	r4,0
   1f4b4:	21000804 	addi	r4,r4,32
   1f4b8:	001f40c0 	call	1f40c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1f4bc:	018000f4 	movhi	r6,3
   1f4c0:	31ab1304 	addi	r6,r6,-21428
   1f4c4:	014000b4 	movhi	r5,2
   1f4c8:	294eda04 	addi	r5,r5,15208
   1f4cc:	010000b4 	movhi	r4,2
   1f4d0:	210eda04 	addi	r4,r4,15208
   1f4d4:	001f40c0 	call	1f40c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1f4d8:	002283c0 	call	2283c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1f4dc:	0022a8c0 	call	22a8c <alt_icache_flush_all>
}
   1f4e0:	0001883a 	nop
   1f4e4:	e037883a 	mov	sp,fp
   1f4e8:	dfc00117 	ldw	ra,4(sp)
   1f4ec:	df000017 	ldw	fp,0(sp)
   1f4f0:	dec00204 	addi	sp,sp,8
   1f4f4:	f800283a 	ret

0001f4f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f4f8:	defffe04 	addi	sp,sp,-8
   1f4fc:	dfc00115 	stw	ra,4(sp)
   1f500:	df000015 	stw	fp,0(sp)
   1f504:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f508:	d0a5b917 	ldw	r2,-26908(gp)
   1f50c:	10000326 	beq	r2,zero,1f51c <alt_get_errno+0x24>
   1f510:	d0a5b917 	ldw	r2,-26908(gp)
   1f514:	103ee83a 	callr	r2
   1f518:	00000106 	br	1f520 <alt_get_errno+0x28>
   1f51c:	d0b24304 	addi	r2,gp,-14068
}
   1f520:	e037883a 	mov	sp,fp
   1f524:	dfc00117 	ldw	ra,4(sp)
   1f528:	df000017 	ldw	fp,0(sp)
   1f52c:	dec00204 	addi	sp,sp,8
   1f530:	f800283a 	ret

0001f534 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1f534:	defff904 	addi	sp,sp,-28
   1f538:	dfc00615 	stw	ra,24(sp)
   1f53c:	df000515 	stw	fp,20(sp)
   1f540:	df000504 	addi	fp,sp,20
   1f544:	e13ffd15 	stw	r4,-12(fp)
   1f548:	e17ffe15 	stw	r5,-8(fp)
   1f54c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1f550:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f554:	e0bffd17 	ldw	r2,-12(fp)
   1f558:	10000816 	blt	r2,zero,1f57c <lseek+0x48>
   1f55c:	01400304 	movi	r5,12
   1f560:	e13ffd17 	ldw	r4,-12(fp)
   1f564:	000cf040 	call	cf04 <__mulsi3>
   1f568:	1007883a 	mov	r3,r2
   1f56c:	008000f4 	movhi	r2,3
   1f570:	10ad4604 	addi	r2,r2,-19176
   1f574:	1885883a 	add	r2,r3,r2
   1f578:	00000106 	br	1f580 <lseek+0x4c>
   1f57c:	0005883a 	mov	r2,zero
   1f580:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1f584:	e0bffc17 	ldw	r2,-16(fp)
   1f588:	10001026 	beq	r2,zero,1f5cc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1f58c:	e0bffc17 	ldw	r2,-16(fp)
   1f590:	10800017 	ldw	r2,0(r2)
   1f594:	10800717 	ldw	r2,28(r2)
   1f598:	10000926 	beq	r2,zero,1f5c0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1f59c:	e0bffc17 	ldw	r2,-16(fp)
   1f5a0:	10800017 	ldw	r2,0(r2)
   1f5a4:	10800717 	ldw	r2,28(r2)
   1f5a8:	e1bfff17 	ldw	r6,-4(fp)
   1f5ac:	e17ffe17 	ldw	r5,-8(fp)
   1f5b0:	e13ffc17 	ldw	r4,-16(fp)
   1f5b4:	103ee83a 	callr	r2
   1f5b8:	e0bffb15 	stw	r2,-20(fp)
   1f5bc:	00000506 	br	1f5d4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1f5c0:	00bfde84 	movi	r2,-134
   1f5c4:	e0bffb15 	stw	r2,-20(fp)
   1f5c8:	00000206 	br	1f5d4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1f5cc:	00bfebc4 	movi	r2,-81
   1f5d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1f5d4:	e0bffb17 	ldw	r2,-20(fp)
   1f5d8:	1000070e 	bge	r2,zero,1f5f8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1f5dc:	001f4f80 	call	1f4f8 <alt_get_errno>
   1f5e0:	1007883a 	mov	r3,r2
   1f5e4:	e0bffb17 	ldw	r2,-20(fp)
   1f5e8:	0085c83a 	sub	r2,zero,r2
   1f5ec:	18800015 	stw	r2,0(r3)
    rc = -1;
   1f5f0:	00bfffc4 	movi	r2,-1
   1f5f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1f5f8:	e0bffb17 	ldw	r2,-20(fp)
}
   1f5fc:	e037883a 	mov	sp,fp
   1f600:	dfc00117 	ldw	ra,4(sp)
   1f604:	df000017 	ldw	fp,0(sp)
   1f608:	dec00204 	addi	sp,sp,8
   1f60c:	f800283a 	ret

0001f610 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1f610:	defffd04 	addi	sp,sp,-12
   1f614:	dfc00215 	stw	ra,8(sp)
   1f618:	df000115 	stw	fp,4(sp)
   1f61c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1f620:	0009883a 	mov	r4,zero
   1f624:	001fb9c0 	call	1fb9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1f628:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1f62c:	001fbd40 	call	1fbd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1f630:	018000f4 	movhi	r6,3
   1f634:	31aafe04 	addi	r6,r6,-21512
   1f638:	014000f4 	movhi	r5,3
   1f63c:	296afe04 	addi	r5,r5,-21512
   1f640:	010000f4 	movhi	r4,3
   1f644:	212afe04 	addi	r4,r4,-21512
   1f648:	0022e300 	call	22e30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f64c:	002293c0 	call	2293c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f650:	010000b4 	movhi	r4,2
   1f654:	210a6704 	addi	r4,r4,10652
   1f658:	00237c80 	call	237c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f65c:	d0b24717 	ldw	r2,-14052(gp)
   1f660:	d0f24817 	ldw	r3,-14048(gp)
   1f664:	d1324917 	ldw	r4,-14044(gp)
   1f668:	200d883a 	mov	r6,r4
   1f66c:	180b883a 	mov	r5,r3
   1f670:	1009883a 	mov	r4,r2
   1f674:	000a2540 	call	a254 <main>
   1f678:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f67c:	01000044 	movi	r4,1
   1f680:	001ef6c0 	call	1ef6c <close>
  exit (result);
   1f684:	e13fff17 	ldw	r4,-4(fp)
   1f688:	00237dc0 	call	237dc <exit>

0001f68c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f68c:	defffe04 	addi	sp,sp,-8
   1f690:	df000115 	stw	fp,4(sp)
   1f694:	df000104 	addi	fp,sp,4
   1f698:	e13fff15 	stw	r4,-4(fp)
}
   1f69c:	0001883a 	nop
   1f6a0:	e037883a 	mov	sp,fp
   1f6a4:	df000017 	ldw	fp,0(sp)
   1f6a8:	dec00104 	addi	sp,sp,4
   1f6ac:	f800283a 	ret

0001f6b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f6b0:	defffe04 	addi	sp,sp,-8
   1f6b4:	df000115 	stw	fp,4(sp)
   1f6b8:	df000104 	addi	fp,sp,4
   1f6bc:	e13fff15 	stw	r4,-4(fp)
}
   1f6c0:	0001883a 	nop
   1f6c4:	e037883a 	mov	sp,fp
   1f6c8:	df000017 	ldw	fp,0(sp)
   1f6cc:	dec00104 	addi	sp,sp,4
   1f6d0:	f800283a 	ret

0001f6d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f6d4:	defffe04 	addi	sp,sp,-8
   1f6d8:	dfc00115 	stw	ra,4(sp)
   1f6dc:	df000015 	stw	fp,0(sp)
   1f6e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f6e4:	d0a5b917 	ldw	r2,-26908(gp)
   1f6e8:	10000326 	beq	r2,zero,1f6f8 <alt_get_errno+0x24>
   1f6ec:	d0a5b917 	ldw	r2,-26908(gp)
   1f6f0:	103ee83a 	callr	r2
   1f6f4:	00000106 	br	1f6fc <alt_get_errno+0x28>
   1f6f8:	d0b24304 	addi	r2,gp,-14068
}
   1f6fc:	e037883a 	mov	sp,fp
   1f700:	dfc00117 	ldw	ra,4(sp)
   1f704:	df000017 	ldw	fp,0(sp)
   1f708:	dec00204 	addi	sp,sp,8
   1f70c:	f800283a 	ret

0001f710 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f710:	defff904 	addi	sp,sp,-28
   1f714:	dfc00615 	stw	ra,24(sp)
   1f718:	df000515 	stw	fp,20(sp)
   1f71c:	df000504 	addi	fp,sp,20
   1f720:	e13ffd15 	stw	r4,-12(fp)
   1f724:	e17ffe15 	stw	r5,-8(fp)
   1f728:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f72c:	e0bffd17 	ldw	r2,-12(fp)
   1f730:	10000816 	blt	r2,zero,1f754 <read+0x44>
   1f734:	01400304 	movi	r5,12
   1f738:	e13ffd17 	ldw	r4,-12(fp)
   1f73c:	000cf040 	call	cf04 <__mulsi3>
   1f740:	1007883a 	mov	r3,r2
   1f744:	008000f4 	movhi	r2,3
   1f748:	10ad4604 	addi	r2,r2,-19176
   1f74c:	1885883a 	add	r2,r3,r2
   1f750:	00000106 	br	1f758 <read+0x48>
   1f754:	0005883a 	mov	r2,zero
   1f758:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f75c:	e0bffb17 	ldw	r2,-20(fp)
   1f760:	10002226 	beq	r2,zero,1f7ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f764:	e0bffb17 	ldw	r2,-20(fp)
   1f768:	10800217 	ldw	r2,8(r2)
   1f76c:	108000cc 	andi	r2,r2,3
   1f770:	10800060 	cmpeqi	r2,r2,1
   1f774:	1000181e 	bne	r2,zero,1f7d8 <read+0xc8>
        (fd->dev->read))
   1f778:	e0bffb17 	ldw	r2,-20(fp)
   1f77c:	10800017 	ldw	r2,0(r2)
   1f780:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f784:	10001426 	beq	r2,zero,1f7d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1f788:	e0bffb17 	ldw	r2,-20(fp)
   1f78c:	10800017 	ldw	r2,0(r2)
   1f790:	10800517 	ldw	r2,20(r2)
   1f794:	e0ffff17 	ldw	r3,-4(fp)
   1f798:	180d883a 	mov	r6,r3
   1f79c:	e17ffe17 	ldw	r5,-8(fp)
   1f7a0:	e13ffb17 	ldw	r4,-20(fp)
   1f7a4:	103ee83a 	callr	r2
   1f7a8:	e0bffc15 	stw	r2,-16(fp)
   1f7ac:	e0bffc17 	ldw	r2,-16(fp)
   1f7b0:	1000070e 	bge	r2,zero,1f7d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1f7b4:	001f6d40 	call	1f6d4 <alt_get_errno>
   1f7b8:	1007883a 	mov	r3,r2
   1f7bc:	e0bffc17 	ldw	r2,-16(fp)
   1f7c0:	0085c83a 	sub	r2,zero,r2
   1f7c4:	18800015 	stw	r2,0(r3)
          return -1;
   1f7c8:	00bfffc4 	movi	r2,-1
   1f7cc:	00000c06 	br	1f800 <read+0xf0>
        }
        return rval;
   1f7d0:	e0bffc17 	ldw	r2,-16(fp)
   1f7d4:	00000a06 	br	1f800 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1f7d8:	001f6d40 	call	1f6d4 <alt_get_errno>
   1f7dc:	1007883a 	mov	r3,r2
   1f7e0:	00800344 	movi	r2,13
   1f7e4:	18800015 	stw	r2,0(r3)
   1f7e8:	00000406 	br	1f7fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1f7ec:	001f6d40 	call	1f6d4 <alt_get_errno>
   1f7f0:	1007883a 	mov	r3,r2
   1f7f4:	00801444 	movi	r2,81
   1f7f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f7fc:	00bfffc4 	movi	r2,-1
}
   1f800:	e037883a 	mov	sp,fp
   1f804:	dfc00117 	ldw	ra,4(sp)
   1f808:	df000017 	ldw	fp,0(sp)
   1f80c:	dec00204 	addi	sp,sp,8
   1f810:	f800283a 	ret

0001f814 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1f814:	defffc04 	addi	sp,sp,-16
   1f818:	dfc00315 	stw	ra,12(sp)
   1f81c:	df000215 	stw	fp,8(sp)
   1f820:	dc000115 	stw	r16,4(sp)
   1f824:	df000204 	addi	fp,sp,8
   1f828:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1f82c:	e0bffe17 	ldw	r2,-8(fp)
   1f830:	108000d0 	cmplti	r2,r2,3
   1f834:	1000111e 	bne	r2,zero,1f87c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1f838:	040000f4 	movhi	r16,3
   1f83c:	842d4604 	addi	r16,r16,-19176
   1f840:	e0bffe17 	ldw	r2,-8(fp)
   1f844:	01400304 	movi	r5,12
   1f848:	1009883a 	mov	r4,r2
   1f84c:	000cf040 	call	cf04 <__mulsi3>
   1f850:	8085883a 	add	r2,r16,r2
   1f854:	10800204 	addi	r2,r2,8
   1f858:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1f85c:	040000f4 	movhi	r16,3
   1f860:	842d4604 	addi	r16,r16,-19176
   1f864:	e0bffe17 	ldw	r2,-8(fp)
   1f868:	01400304 	movi	r5,12
   1f86c:	1009883a 	mov	r4,r2
   1f870:	000cf040 	call	cf04 <__mulsi3>
   1f874:	8085883a 	add	r2,r16,r2
   1f878:	10000015 	stw	zero,0(r2)
  }
}
   1f87c:	0001883a 	nop
   1f880:	e6ffff04 	addi	sp,fp,-4
   1f884:	dfc00217 	ldw	ra,8(sp)
   1f888:	df000117 	ldw	fp,4(sp)
   1f88c:	dc000017 	ldw	r16,0(sp)
   1f890:	dec00304 	addi	sp,sp,12
   1f894:	f800283a 	ret

0001f898 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1f898:	defff904 	addi	sp,sp,-28
   1f89c:	df000615 	stw	fp,24(sp)
   1f8a0:	df000604 	addi	fp,sp,24
   1f8a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f8a8:	0005303a 	rdctl	r2,status
   1f8ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f8b0:	e0fffe17 	ldw	r3,-8(fp)
   1f8b4:	00bfff84 	movi	r2,-2
   1f8b8:	1884703a 	and	r2,r3,r2
   1f8bc:	1001703a 	wrctl	status,r2
  
  return context;
   1f8c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1f8c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1f8c8:	d0a5ba17 	ldw	r2,-26904(gp)
   1f8cc:	10c000c4 	addi	r3,r2,3
   1f8d0:	00bfff04 	movi	r2,-4
   1f8d4:	1884703a 	and	r2,r3,r2
   1f8d8:	d0a5ba15 	stw	r2,-26904(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1f8dc:	d0e5ba17 	ldw	r3,-26904(gp)
   1f8e0:	e0bfff17 	ldw	r2,-4(fp)
   1f8e4:	1887883a 	add	r3,r3,r2
   1f8e8:	00810034 	movhi	r2,1024
   1f8ec:	10800004 	addi	r2,r2,0
   1f8f0:	10c0062e 	bgeu	r2,r3,1f90c <sbrk+0x74>
   1f8f4:	e0bffb17 	ldw	r2,-20(fp)
   1f8f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8fc:	e0bffa17 	ldw	r2,-24(fp)
   1f900:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1f904:	00bfffc4 	movi	r2,-1
   1f908:	00000b06 	br	1f938 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1f90c:	d0a5ba17 	ldw	r2,-26904(gp)
   1f910:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1f914:	d0e5ba17 	ldw	r3,-26904(gp)
   1f918:	e0bfff17 	ldw	r2,-4(fp)
   1f91c:	1885883a 	add	r2,r3,r2
   1f920:	d0a5ba15 	stw	r2,-26904(gp)
   1f924:	e0bffb17 	ldw	r2,-20(fp)
   1f928:	e0bffc15 	stw	r2,-16(fp)
   1f92c:	e0bffc17 	ldw	r2,-16(fp)
   1f930:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1f934:	e0bffd17 	ldw	r2,-12(fp)
} 
   1f938:	e037883a 	mov	sp,fp
   1f93c:	df000017 	ldw	fp,0(sp)
   1f940:	dec00104 	addi	sp,sp,4
   1f944:	f800283a 	ret

0001f948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f948:	defffe04 	addi	sp,sp,-8
   1f94c:	dfc00115 	stw	ra,4(sp)
   1f950:	df000015 	stw	fp,0(sp)
   1f954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f958:	d0a5b917 	ldw	r2,-26908(gp)
   1f95c:	10000326 	beq	r2,zero,1f96c <alt_get_errno+0x24>
   1f960:	d0a5b917 	ldw	r2,-26908(gp)
   1f964:	103ee83a 	callr	r2
   1f968:	00000106 	br	1f970 <alt_get_errno+0x28>
   1f96c:	d0b24304 	addi	r2,gp,-14068
}
   1f970:	e037883a 	mov	sp,fp
   1f974:	dfc00117 	ldw	ra,4(sp)
   1f978:	df000017 	ldw	fp,0(sp)
   1f97c:	dec00204 	addi	sp,sp,8
   1f980:	f800283a 	ret

0001f984 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1f984:	defffc04 	addi	sp,sp,-16
   1f988:	dfc00315 	stw	ra,12(sp)
   1f98c:	df000215 	stw	fp,8(sp)
   1f990:	df000204 	addi	fp,sp,8
   1f994:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f998:	d0b24c17 	ldw	r2,-14032(gp)
  clock_t ticks = alt_nticks(); 
   1f99c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f9a0:	d0b24b17 	ldw	r2,-14036(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1f9a4:	1000061e 	bne	r2,zero,1f9c0 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1f9a8:	001f9480 	call	1f948 <alt_get_errno>
   1f9ac:	1007883a 	mov	r3,r2
   1f9b0:	00801604 	movi	r2,88
   1f9b4:	18800015 	stw	r2,0(r3)
    return 0;
   1f9b8:	0005883a 	mov	r2,zero
   1f9bc:	00000a06 	br	1f9e8 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1f9c0:	e0bfff17 	ldw	r2,-4(fp)
   1f9c4:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1f9c8:	e0bfff17 	ldw	r2,-4(fp)
   1f9cc:	e0fffe17 	ldw	r3,-8(fp)
   1f9d0:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1f9d4:	e0bfff17 	ldw	r2,-4(fp)
   1f9d8:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1f9dc:	e0bfff17 	ldw	r2,-4(fp)
   1f9e0:	10000315 	stw	zero,12(r2)

  return ticks;
   1f9e4:	e0bffe17 	ldw	r2,-8(fp)
}
   1f9e8:	e037883a 	mov	sp,fp
   1f9ec:	dfc00117 	ldw	ra,4(sp)
   1f9f0:	df000017 	ldw	fp,0(sp)
   1f9f4:	dec00204 	addi	sp,sp,8
   1f9f8:	f800283a 	ret

0001f9fc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1f9fc:	defffd04 	addi	sp,sp,-12
   1fa00:	dfc00215 	stw	ra,8(sp)
   1fa04:	df000115 	stw	fp,4(sp)
   1fa08:	df000104 	addi	fp,sp,4
   1fa0c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1fa10:	e13fff17 	ldw	r4,-4(fp)
   1fa14:	00226e40 	call	226e4 <alt_busy_sleep>
}
   1fa18:	e037883a 	mov	sp,fp
   1fa1c:	dfc00117 	ldw	ra,4(sp)
   1fa20:	df000017 	ldw	fp,0(sp)
   1fa24:	dec00204 	addi	sp,sp,8
   1fa28:	f800283a 	ret

0001fa2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fa2c:	defffe04 	addi	sp,sp,-8
   1fa30:	dfc00115 	stw	ra,4(sp)
   1fa34:	df000015 	stw	fp,0(sp)
   1fa38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fa3c:	d0a5b917 	ldw	r2,-26908(gp)
   1fa40:	10000326 	beq	r2,zero,1fa50 <alt_get_errno+0x24>
   1fa44:	d0a5b917 	ldw	r2,-26908(gp)
   1fa48:	103ee83a 	callr	r2
   1fa4c:	00000106 	br	1fa54 <alt_get_errno+0x28>
   1fa50:	d0b24304 	addi	r2,gp,-14068
}
   1fa54:	e037883a 	mov	sp,fp
   1fa58:	dfc00117 	ldw	ra,4(sp)
   1fa5c:	df000017 	ldw	fp,0(sp)
   1fa60:	dec00204 	addi	sp,sp,8
   1fa64:	f800283a 	ret

0001fa68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1fa68:	defff904 	addi	sp,sp,-28
   1fa6c:	dfc00615 	stw	ra,24(sp)
   1fa70:	df000515 	stw	fp,20(sp)
   1fa74:	df000504 	addi	fp,sp,20
   1fa78:	e13ffd15 	stw	r4,-12(fp)
   1fa7c:	e17ffe15 	stw	r5,-8(fp)
   1fa80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1fa84:	e0bffd17 	ldw	r2,-12(fp)
   1fa88:	10000816 	blt	r2,zero,1faac <write+0x44>
   1fa8c:	01400304 	movi	r5,12
   1fa90:	e13ffd17 	ldw	r4,-12(fp)
   1fa94:	000cf040 	call	cf04 <__mulsi3>
   1fa98:	1007883a 	mov	r3,r2
   1fa9c:	008000f4 	movhi	r2,3
   1faa0:	10ad4604 	addi	r2,r2,-19176
   1faa4:	1885883a 	add	r2,r3,r2
   1faa8:	00000106 	br	1fab0 <write+0x48>
   1faac:	0005883a 	mov	r2,zero
   1fab0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1fab4:	e0bffb17 	ldw	r2,-20(fp)
   1fab8:	10002126 	beq	r2,zero,1fb40 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1fabc:	e0bffb17 	ldw	r2,-20(fp)
   1fac0:	10800217 	ldw	r2,8(r2)
   1fac4:	108000cc 	andi	r2,r2,3
   1fac8:	10001826 	beq	r2,zero,1fb2c <write+0xc4>
   1facc:	e0bffb17 	ldw	r2,-20(fp)
   1fad0:	10800017 	ldw	r2,0(r2)
   1fad4:	10800617 	ldw	r2,24(r2)
   1fad8:	10001426 	beq	r2,zero,1fb2c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1fadc:	e0bffb17 	ldw	r2,-20(fp)
   1fae0:	10800017 	ldw	r2,0(r2)
   1fae4:	10800617 	ldw	r2,24(r2)
   1fae8:	e0ffff17 	ldw	r3,-4(fp)
   1faec:	180d883a 	mov	r6,r3
   1faf0:	e17ffe17 	ldw	r5,-8(fp)
   1faf4:	e13ffb17 	ldw	r4,-20(fp)
   1faf8:	103ee83a 	callr	r2
   1fafc:	e0bffc15 	stw	r2,-16(fp)
   1fb00:	e0bffc17 	ldw	r2,-16(fp)
   1fb04:	1000070e 	bge	r2,zero,1fb24 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1fb08:	001fa2c0 	call	1fa2c <alt_get_errno>
   1fb0c:	1007883a 	mov	r3,r2
   1fb10:	e0bffc17 	ldw	r2,-16(fp)
   1fb14:	0085c83a 	sub	r2,zero,r2
   1fb18:	18800015 	stw	r2,0(r3)
        return -1;
   1fb1c:	00bfffc4 	movi	r2,-1
   1fb20:	00000c06 	br	1fb54 <write+0xec>
      }
      return rval;
   1fb24:	e0bffc17 	ldw	r2,-16(fp)
   1fb28:	00000a06 	br	1fb54 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1fb2c:	001fa2c0 	call	1fa2c <alt_get_errno>
   1fb30:	1007883a 	mov	r3,r2
   1fb34:	00800344 	movi	r2,13
   1fb38:	18800015 	stw	r2,0(r3)
   1fb3c:	00000406 	br	1fb50 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1fb40:	001fa2c0 	call	1fa2c <alt_get_errno>
   1fb44:	1007883a 	mov	r3,r2
   1fb48:	00801444 	movi	r2,81
   1fb4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1fb50:	00bfffc4 	movi	r2,-1
}
   1fb54:	e037883a 	mov	sp,fp
   1fb58:	dfc00117 	ldw	ra,4(sp)
   1fb5c:	df000017 	ldw	fp,0(sp)
   1fb60:	dec00204 	addi	sp,sp,8
   1fb64:	f800283a 	ret

0001fb68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1fb68:	defffd04 	addi	sp,sp,-12
   1fb6c:	dfc00215 	stw	ra,8(sp)
   1fb70:	df000115 	stw	fp,4(sp)
   1fb74:	df000104 	addi	fp,sp,4
   1fb78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fb7c:	d165b604 	addi	r5,gp,-26920
   1fb80:	e13fff17 	ldw	r4,-4(fp)
   1fb84:	00228980 	call	22898 <alt_dev_llist_insert>
}
   1fb88:	e037883a 	mov	sp,fp
   1fb8c:	dfc00117 	ldw	ra,4(sp)
   1fb90:	df000017 	ldw	fp,0(sp)
   1fb94:	dec00204 	addi	sp,sp,8
   1fb98:	f800283a 	ret

0001fb9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1fb9c:	defffd04 	addi	sp,sp,-12
   1fba0:	dfc00215 	stw	ra,8(sp)
   1fba4:	df000115 	stw	fp,4(sp)
   1fba8:	df000104 	addi	fp,sp,4
   1fbac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1fbb0:	002353c0 	call	2353c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1fbb4:	00800044 	movi	r2,1
   1fbb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1fbbc:	0001883a 	nop
   1fbc0:	e037883a 	mov	sp,fp
   1fbc4:	dfc00117 	ldw	ra,4(sp)
   1fbc8:	df000017 	ldw	fp,0(sp)
   1fbcc:	dec00204 	addi	sp,sp,8
   1fbd0:	f800283a 	ret

0001fbd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1fbd4:	defffe04 	addi	sp,sp,-8
   1fbd8:	dfc00115 	stw	ra,4(sp)
   1fbdc:	df000015 	stw	fp,0(sp)
   1fbe0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1fbe4:	01c0fa04 	movi	r7,1000
   1fbe8:	01800084 	movi	r6,2
   1fbec:	000b883a 	mov	r5,zero
   1fbf0:	01010034 	movhi	r4,1024
   1fbf4:	21042004 	addi	r4,r4,4224
   1fbf8:	002253c0 	call	2253c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1fbfc:	010000f4 	movhi	r4,3
   1fc00:	212da604 	addi	r4,r4,-18792
   1fc04:	001fe980 	call	1fe98 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1fc08:	01800044 	movi	r6,1
   1fc0c:	000b883a 	mov	r5,zero
   1fc10:	010000f4 	movhi	r4,3
   1fc14:	212dbe04 	addi	r4,r4,-18696
   1fc18:	00219c40 	call	219c4 <altera_avalon_jtag_uart_init>
   1fc1c:	010000f4 	movhi	r4,3
   1fc20:	212db404 	addi	r4,r4,-18736
   1fc24:	001fb680 	call	1fb68 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1fc28:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1fc2c:	0001883a 	nop
}
   1fc30:	0001883a 	nop
   1fc34:	e037883a 	mov	sp,fp
   1fc38:	dfc00117 	ldw	ra,4(sp)
   1fc3c:	df000017 	ldw	fp,0(sp)
   1fc40:	dec00204 	addi	sp,sp,8
   1fc44:	f800283a 	ret

0001fc48 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1fc48:	defff904 	addi	sp,sp,-28
   1fc4c:	dfc00615 	stw	ra,24(sp)
   1fc50:	df000515 	stw	fp,20(sp)
   1fc54:	df000504 	addi	fp,sp,20
   1fc58:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1fc5c:	008000b4 	movhi	r2,2
   1fc60:	10a1a804 	addi	r2,r2,-31072
   1fc64:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1fc68:	e0bfff17 	ldw	r2,-4(fp)
   1fc6c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1fc70:	e0bffc17 	ldw	r2,-16(fp)
   1fc74:	10800717 	ldw	r2,28(r2)
   1fc78:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1fc7c:	e0bffd17 	ldw	r2,-12(fp)
   1fc80:	10800217 	ldw	r2,8(r2)
   1fc84:	10800098 	cmpnei	r2,r2,2
   1fc88:	1000251e 	bne	r2,zero,1fd20 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1fc8c:	e0bffd17 	ldw	r2,-12(fp)
   1fc90:	10c00017 	ldw	r3,0(r2)
   1fc94:	e0bffd17 	ldw	r2,-12(fp)
   1fc98:	10800117 	ldw	r2,4(r2)
   1fc9c:	e13ffe04 	addi	r4,fp,-8
   1fca0:	200f883a 	mov	r7,r4
   1fca4:	100d883a 	mov	r6,r2
   1fca8:	180b883a 	mov	r5,r3
   1fcac:	e13ffc17 	ldw	r4,-16(fp)
   1fcb0:	00203f80 	call	203f8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1fcb4:	e0bffd17 	ldw	r2,-12(fp)
   1fcb8:	10c00117 	ldw	r3,4(r2)
   1fcbc:	e0bffe17 	ldw	r2,-8(fp)
   1fcc0:	1887c83a 	sub	r3,r3,r2
   1fcc4:	e0bffd17 	ldw	r2,-12(fp)
   1fcc8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1fccc:	e0bffd17 	ldw	r2,-12(fp)
   1fcd0:	10c00017 	ldw	r3,0(r2)
   1fcd4:	e0bffe17 	ldw	r2,-8(fp)
   1fcd8:	1887883a 	add	r3,r3,r2
   1fcdc:	e0bffd17 	ldw	r2,-12(fp)
   1fce0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1fce4:	e0bffd17 	ldw	r2,-12(fp)
   1fce8:	10800117 	ldw	r2,4(r2)
   1fcec:	10000c26 	beq	r2,zero,1fd20 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fcf0:	01400704 	movi	r5,28
   1fcf4:	e13ffc17 	ldw	r4,-16(fp)
   1fcf8:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1fcfc:	01400084 	movi	r5,2
   1fd00:	e13ffc17 	ldw	r4,-16(fp)
   1fd04:	00216540 	call	21654 <alt_avalon_i2c_int_enable>
   1fd08:	00000e06 	br	1fd44 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1fd0c:	e0bffb17 	ldw	r2,-20(fp)
   1fd10:	10bfffc4 	addi	r2,r2,-1
   1fd14:	e0bffb15 	stw	r2,-20(fp)
   1fd18:	e0bffb17 	ldw	r2,-20(fp)
   1fd1c:	10000426 	beq	r2,zero,1fd30 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1fd20:	e13ffc17 	ldw	r4,-16(fp)
   1fd24:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   1fd28:	103ff81e 	bne	r2,zero,1fd0c <__alt_data_end+0xfc01fd0c>
   1fd2c:	00000106 	br	1fd34 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1fd30:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1fd34:	e13ffc17 	ldw	r4,-16(fp)
   1fd38:	002005c0 	call	2005c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1fd3c:	e0bffd17 	ldw	r2,-12(fp)
   1fd40:	10000215 	stw	zero,8(r2)
}
   1fd44:	e037883a 	mov	sp,fp
   1fd48:	dfc00117 	ldw	ra,4(sp)
   1fd4c:	df000017 	ldw	fp,0(sp)
   1fd50:	dec00204 	addi	sp,sp,8
   1fd54:	f800283a 	ret

0001fd58 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1fd58:	defffc04 	addi	sp,sp,-16
   1fd5c:	dfc00315 	stw	ra,12(sp)
   1fd60:	df000215 	stw	fp,8(sp)
   1fd64:	df000204 	addi	fp,sp,8
   1fd68:	e13ffe15 	stw	r4,-8(fp)
   1fd6c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1fd70:	e0bfff17 	ldw	r2,-4(fp)
   1fd74:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1fd78:	e1ffff17 	ldw	r7,-4(fp)
   1fd7c:	000d883a 	mov	r6,zero
   1fd80:	014000b4 	movhi	r5,2
   1fd84:	297f1204 	addi	r5,r5,-952
   1fd88:	e13ffe17 	ldw	r4,-8(fp)
   1fd8c:	001fe440 	call	1fe44 <alt_avalon_i2c_register_callback>
}
   1fd90:	0001883a 	nop
   1fd94:	e037883a 	mov	sp,fp
   1fd98:	dfc00117 	ldw	ra,4(sp)
   1fd9c:	df000017 	ldw	fp,0(sp)
   1fda0:	dec00204 	addi	sp,sp,8
   1fda4:	f800283a 	ret

0001fda8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1fda8:	defff904 	addi	sp,sp,-28
   1fdac:	dfc00615 	stw	ra,24(sp)
   1fdb0:	df000515 	stw	fp,20(sp)
   1fdb4:	df000504 	addi	fp,sp,20
   1fdb8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1fdbc:	e0bfff17 	ldw	r2,-4(fp)
   1fdc0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fdc4:	014007c4 	movi	r5,31
   1fdc8:	e13ffb17 	ldw	r4,-20(fp)
   1fdcc:	00215ec0 	call	215ec <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fdd0:	01400704 	movi	r5,28
   1fdd4:	e13ffb17 	ldw	r4,-20(fp)
   1fdd8:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1fddc:	e0bffb17 	ldw	r2,-20(fp)
   1fde0:	10800617 	ldw	r2,24(r2)
   1fde4:	10001126 	beq	r2,zero,1fe2c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fde8:	0005303a 	rdctl	r2,status
   1fdec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fdf0:	e0fffd17 	ldw	r3,-12(fp)
   1fdf4:	00bfff84 	movi	r2,-2
   1fdf8:	1884703a 	and	r2,r3,r2
   1fdfc:	1001703a 	wrctl	status,r2
  
  return context;
   1fe00:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1fe04:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1fe08:	e0bffb17 	ldw	r2,-20(fp)
   1fe0c:	10800617 	ldw	r2,24(r2)
   1fe10:	e13ffb17 	ldw	r4,-20(fp)
   1fe14:	103ee83a 	callr	r2
   1fe18:	e0bffc17 	ldw	r2,-16(fp)
   1fe1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe20:	e0bffe17 	ldw	r2,-8(fp)
   1fe24:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1fe28:	0001883a 	nop
   1fe2c:	0001883a 	nop
}
   1fe30:	e037883a 	mov	sp,fp
   1fe34:	dfc00117 	ldw	ra,4(sp)
   1fe38:	df000017 	ldw	fp,0(sp)
   1fe3c:	dec00204 	addi	sp,sp,8
   1fe40:	f800283a 	ret

0001fe44 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1fe44:	defffb04 	addi	sp,sp,-20
   1fe48:	df000415 	stw	fp,16(sp)
   1fe4c:	df000404 	addi	fp,sp,16
   1fe50:	e13ffc15 	stw	r4,-16(fp)
   1fe54:	e17ffd15 	stw	r5,-12(fp)
   1fe58:	e1bffe15 	stw	r6,-8(fp)
   1fe5c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1fe60:	e0bffc17 	ldw	r2,-16(fp)
   1fe64:	e0fffd17 	ldw	r3,-12(fp)
   1fe68:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1fe6c:	e0bffc17 	ldw	r2,-16(fp)
   1fe70:	e0ffff17 	ldw	r3,-4(fp)
   1fe74:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1fe78:	e0bffc17 	ldw	r2,-16(fp)
   1fe7c:	e0fffe17 	ldw	r3,-8(fp)
   1fe80:	10c00815 	stw	r3,32(r2)

    return ;
   1fe84:	0001883a 	nop
}
   1fe88:	e037883a 	mov	sp,fp
   1fe8c:	df000017 	ldw	fp,0(sp)
   1fe90:	dec00104 	addi	sp,sp,4
   1fe94:	f800283a 	ret

0001fe98 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1fe98:	defff704 	addi	sp,sp,-36
   1fe9c:	dfc00815 	stw	ra,32(sp)
   1fea0:	df000715 	stw	fp,28(sp)
   1fea4:	df000704 	addi	fp,sp,28
   1fea8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1feac:	e13fff17 	ldw	r4,-4(fp)
   1feb0:	002005c0 	call	2005c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1feb4:	014007c4 	movi	r5,31
   1feb8:	e13fff17 	ldw	r4,-4(fp)
   1febc:	00215ec0 	call	215ec <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fec0:	01400704 	movi	r5,28
   1fec4:	e13fff17 	ldw	r4,-4(fp)
   1fec8:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1fecc:	014000c4 	movi	r5,3
   1fed0:	e13fff17 	ldw	r4,-4(fp)
   1fed4:	00217f80 	call	217f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1fed8:	014000c4 	movi	r5,3
   1fedc:	e13fff17 	ldw	r4,-4(fp)
   1fee0:	00217480 	call	21748 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1fee4:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1fee8:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1feec:	e0bffb04 	addi	r2,fp,-20
   1fef0:	018000b4 	movhi	r6,2
   1fef4:	31a1a804 	addi	r6,r6,-31072
   1fef8:	100b883a 	mov	r5,r2
   1fefc:	e13fff17 	ldw	r4,-4(fp)
   1ff00:	00202b80 	call	202b8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1ff04:	e0bffb04 	addi	r2,fp,-20
   1ff08:	100b883a 	mov	r5,r2
   1ff0c:	e13fff17 	ldw	r4,-4(fp)
   1ff10:	00201580 	call	20158 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1ff14:	d165bb04 	addi	r5,gp,-26900
   1ff18:	e13fff17 	ldw	r4,-4(fp)
   1ff1c:	00228980 	call	22898 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1ff20:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1ff24:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1ff28:	e0bffa17 	ldw	r2,-24(fp)
   1ff2c:	10000c1e 	bne	r2,zero,1ff60 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1ff30:	e0bfff17 	ldw	r2,-4(fp)
   1ff34:	10c00417 	ldw	r3,16(r2)
   1ff38:	e0bfff17 	ldw	r2,-4(fp)
   1ff3c:	10800517 	ldw	r2,20(r2)
   1ff40:	d8000015 	stw	zero,0(sp)
   1ff44:	e1ffff17 	ldw	r7,-4(fp)
   1ff48:	018000b4 	movhi	r6,2
   1ff4c:	31bf6a04 	addi	r6,r6,-600
   1ff50:	100b883a 	mov	r5,r2
   1ff54:	1809883a 	mov	r4,r3
   1ff58:	0022aac0 	call	22aac <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1ff5c:	00000406 	br	1ff70 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1ff60:	010000f4 	movhi	r4,3
   1ff64:	212b0b04 	addi	r4,r4,-21460
   1ff68:	00231300 	call	23130 <alt_printf>
    }

    return;
   1ff6c:	0001883a 	nop

}
   1ff70:	e037883a 	mov	sp,fp
   1ff74:	dfc00117 	ldw	ra,4(sp)
   1ff78:	df000017 	ldw	fp,0(sp)
   1ff7c:	dec00204 	addi	sp,sp,8
   1ff80:	f800283a 	ret

0001ff84 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1ff84:	defffc04 	addi	sp,sp,-16
   1ff88:	dfc00315 	stw	ra,12(sp)
   1ff8c:	df000215 	stw	fp,8(sp)
   1ff90:	df000204 	addi	fp,sp,8
   1ff94:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1ff98:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1ff9c:	d165bb04 	addi	r5,gp,-26900
   1ffa0:	e13fff17 	ldw	r4,-4(fp)
   1ffa4:	00229fc0 	call	229fc <alt_find_dev>
   1ffa8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1ffac:	e0bffe17 	ldw	r2,-8(fp)
}
   1ffb0:	e037883a 	mov	sp,fp
   1ffb4:	dfc00117 	ldw	ra,4(sp)
   1ffb8:	df000017 	ldw	fp,0(sp)
   1ffbc:	dec00204 	addi	sp,sp,8
   1ffc0:	f800283a 	ret

0001ffc4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1ffc4:	defffc04 	addi	sp,sp,-16
   1ffc8:	df000315 	stw	fp,12(sp)
   1ffcc:	df000304 	addi	fp,sp,12
   1ffd0:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1ffd4:	e0bfff17 	ldw	r2,-4(fp)
   1ffd8:	10800717 	ldw	r2,28(r2)
   1ffdc:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1ffe0:	e0bfff17 	ldw	r2,-4(fp)
   1ffe4:	10800317 	ldw	r2,12(r2)
   1ffe8:	10800204 	addi	r2,r2,8
   1ffec:	10800037 	ldwio	r2,0(r2)
   1fff0:	1080004c 	andi	r2,r2,1
   1fff4:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1fff8:	e0bffe17 	ldw	r2,-8(fp)
   1fffc:	10000226 	beq	r2,zero,20008 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20000:	00bffe44 	movi	r2,-7
   20004:	00001106 	br	2004c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20008:	e0bfff17 	ldw	r2,-4(fp)
   2000c:	10c00617 	ldw	r3,24(r2)
   20010:	008000b4 	movhi	r2,2
   20014:	10bf1204 	addi	r2,r2,-952
   20018:	1880021e 	bne	r3,r2,20024 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   2001c:	e0bffd17 	ldw	r2,-12(fp)
   20020:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20024:	e0bfff17 	ldw	r2,-4(fp)
   20028:	10800317 	ldw	r2,12(r2)
   2002c:	10800204 	addi	r2,r2,8
   20030:	e0ffff17 	ldw	r3,-4(fp)
   20034:	18c00317 	ldw	r3,12(r3)
   20038:	18c00204 	addi	r3,r3,8
   2003c:	18c00037 	ldwio	r3,0(r3)
   20040:	18c00054 	ori	r3,r3,1
   20044:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20048:	0005883a 	mov	r2,zero
}
   2004c:	e037883a 	mov	sp,fp
   20050:	df000017 	ldw	fp,0(sp)
   20054:	dec00104 	addi	sp,sp,4
   20058:	f800283a 	ret

0002005c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2005c:	defffe04 	addi	sp,sp,-8
   20060:	df000115 	stw	fp,4(sp)
   20064:	df000104 	addi	fp,sp,4
   20068:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2006c:	e0bfff17 	ldw	r2,-4(fp)
   20070:	10800317 	ldw	r2,12(r2)
   20074:	10800204 	addi	r2,r2,8
   20078:	e0ffff17 	ldw	r3,-4(fp)
   2007c:	18c00317 	ldw	r3,12(r3)
   20080:	18c00204 	addi	r3,r3,8
   20084:	19000037 	ldwio	r4,0(r3)
   20088:	00ffff84 	movi	r3,-2
   2008c:	20c6703a 	and	r3,r4,r3
   20090:	10c00035 	stwio	r3,0(r2)

}
   20094:	0001883a 	nop
   20098:	e037883a 	mov	sp,fp
   2009c:	df000017 	ldw	fp,0(sp)
   200a0:	dec00104 	addi	sp,sp,4
   200a4:	f800283a 	ret

000200a8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   200a8:	defffd04 	addi	sp,sp,-12
   200ac:	df000215 	stw	fp,8(sp)
   200b0:	df000204 	addi	fp,sp,8
   200b4:	e13ffe15 	stw	r4,-8(fp)
   200b8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   200bc:	e0bffe17 	ldw	r2,-8(fp)
   200c0:	10c00d17 	ldw	r3,52(r2)
   200c4:	e0bfff17 	ldw	r2,-4(fp)
   200c8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   200cc:	e0bffe17 	ldw	r2,-8(fp)
   200d0:	10800317 	ldw	r2,12(r2)
   200d4:	10800204 	addi	r2,r2,8
   200d8:	10800037 	ldwio	r2,0(r2)
   200dc:	1080008c 	andi	r2,r2,2
   200e0:	1005d07a 	srai	r2,r2,1
   200e4:	1007883a 	mov	r3,r2
   200e8:	e0bfff17 	ldw	r2,-4(fp)
   200ec:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   200f0:	e0bffe17 	ldw	r2,-8(fp)
   200f4:	10800317 	ldw	r2,12(r2)
   200f8:	10800904 	addi	r2,r2,36
   200fc:	10800037 	ldwio	r2,0(r2)
   20100:	1007883a 	mov	r3,r2
   20104:	e0bfff17 	ldw	r2,-4(fp)
   20108:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   2010c:	e0bffe17 	ldw	r2,-8(fp)
   20110:	10800317 	ldw	r2,12(r2)
   20114:	10800804 	addi	r2,r2,32
   20118:	10800037 	ldwio	r2,0(r2)
   2011c:	1007883a 	mov	r3,r2
   20120:	e0bfff17 	ldw	r2,-4(fp)
   20124:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   20128:	e0bffe17 	ldw	r2,-8(fp)
   2012c:	10800317 	ldw	r2,12(r2)
   20130:	10800a04 	addi	r2,r2,40
   20134:	10800037 	ldwio	r2,0(r2)
   20138:	1007883a 	mov	r3,r2
   2013c:	e0bfff17 	ldw	r2,-4(fp)
   20140:	10c0030d 	sth	r3,12(r2)
}
   20144:	0001883a 	nop
   20148:	e037883a 	mov	sp,fp
   2014c:	df000017 	ldw	fp,0(sp)
   20150:	dec00104 	addi	sp,sp,4
   20154:	f800283a 	ret

00020158 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20158:	defffd04 	addi	sp,sp,-12
   2015c:	df000215 	stw	fp,8(sp)
   20160:	df000204 	addi	fp,sp,8
   20164:	e13ffe15 	stw	r4,-8(fp)
   20168:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2016c:	e0bfff17 	ldw	r2,-4(fp)
   20170:	10c00017 	ldw	r3,0(r2)
   20174:	e0bffe17 	ldw	r2,-8(fp)
   20178:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2017c:	e0bffe17 	ldw	r2,-8(fp)
   20180:	10800317 	ldw	r2,12(r2)
   20184:	10c00204 	addi	r3,r2,8
   20188:	e0bffe17 	ldw	r2,-8(fp)
   2018c:	10800317 	ldw	r2,12(r2)
   20190:	10800204 	addi	r2,r2,8
   20194:	10800037 	ldwio	r2,0(r2)
   20198:	1009883a 	mov	r4,r2
   2019c:	00bfff44 	movi	r2,-3
   201a0:	2088703a 	and	r4,r4,r2
   201a4:	e0bfff17 	ldw	r2,-4(fp)
   201a8:	10800117 	ldw	r2,4(r2)
   201ac:	1085883a 	add	r2,r2,r2
   201b0:	1080008c 	andi	r2,r2,2
   201b4:	2084b03a 	or	r2,r4,r2
   201b8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   201bc:	e0bffe17 	ldw	r2,-8(fp)
   201c0:	10800317 	ldw	r2,12(r2)
   201c4:	10800904 	addi	r2,r2,36
   201c8:	e0ffff17 	ldw	r3,-4(fp)
   201cc:	18c0020b 	ldhu	r3,8(r3)
   201d0:	18ffffcc 	andi	r3,r3,65535
   201d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   201d8:	e0bffe17 	ldw	r2,-8(fp)
   201dc:	10800317 	ldw	r2,12(r2)
   201e0:	10800804 	addi	r2,r2,32
   201e4:	e0ffff17 	ldw	r3,-4(fp)
   201e8:	18c0028b 	ldhu	r3,10(r3)
   201ec:	18ffffcc 	andi	r3,r3,65535
   201f0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   201f4:	e0bffe17 	ldw	r2,-8(fp)
   201f8:	10800317 	ldw	r2,12(r2)
   201fc:	10800a04 	addi	r2,r2,40
   20200:	e0ffff17 	ldw	r3,-4(fp)
   20204:	18c0030b 	ldhu	r3,12(r3)
   20208:	18ffffcc 	andi	r3,r3,65535
   2020c:	10c00035 	stwio	r3,0(r2)
}
   20210:	0001883a 	nop
   20214:	e037883a 	mov	sp,fp
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00104 	addi	sp,sp,4
   20220:	f800283a 	ret

00020224 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   20224:	defffb04 	addi	sp,sp,-20
   20228:	dfc00415 	stw	ra,16(sp)
   2022c:	df000315 	stw	fp,12(sp)
   20230:	df000304 	addi	fp,sp,12
   20234:	e13ffd15 	stw	r4,-12(fp)
   20238:	e17ffe15 	stw	r5,-8(fp)
   2023c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   20240:	e0bffe17 	ldw	r2,-8(fp)
   20244:	1080028b 	ldhu	r2,10(r2)
   20248:	10bfffcc 	andi	r2,r2,65535
   2024c:	10000426 	beq	r2,zero,20260 <alt_avalon_i2c_master_config_speed_get+0x3c>
   20250:	e0bffe17 	ldw	r2,-8(fp)
   20254:	1080020b 	ldhu	r2,8(r2)
   20258:	10bfffcc 	andi	r2,r2,65535
   2025c:	1000021e 	bne	r2,zero,20268 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   20260:	00bfff44 	movi	r2,-3
   20264:	00000f06 	br	202a4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20268:	e0bffd17 	ldw	r2,-12(fp)
   2026c:	11000c17 	ldw	r4,48(r2)
   20270:	e0bffe17 	ldw	r2,-8(fp)
   20274:	1080028b 	ldhu	r2,10(r2)
   20278:	10ffffcc 	andi	r3,r2,65535
   2027c:	e0bffe17 	ldw	r2,-8(fp)
   20280:	1080020b 	ldhu	r2,8(r2)
   20284:	10bfffcc 	andi	r2,r2,65535
   20288:	1885883a 	add	r2,r3,r2
   2028c:	100b883a 	mov	r5,r2
   20290:	000ce480 	call	ce48 <__udivsi3>
   20294:	1007883a 	mov	r3,r2
   20298:	e0bfff17 	ldw	r2,-4(fp)
   2029c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   202a0:	0005883a 	mov	r2,zero
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	dfc00117 	ldw	ra,4(sp)
   202ac:	df000017 	ldw	fp,0(sp)
   202b0:	dec00204 	addi	sp,sp,8
   202b4:	f800283a 	ret

000202b8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   202b8:	defff904 	addi	sp,sp,-28
   202bc:	dfc00615 	stw	ra,24(sp)
   202c0:	df000515 	stw	fp,20(sp)
   202c4:	df000504 	addi	fp,sp,20
   202c8:	e13ffd15 	stw	r4,-12(fp)
   202cc:	e17ffe15 	stw	r5,-8(fp)
   202d0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   202d4:	e0ffff17 	ldw	r3,-4(fp)
   202d8:	008001b4 	movhi	r2,6
   202dc:	1086a004 	addi	r2,r2,6784
   202e0:	10c00436 	bltu	r2,r3,202f4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   202e4:	e0bfff17 	ldw	r2,-4(fp)
   202e8:	10000226 	beq	r2,zero,202f4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   202ec:	e0bfff17 	ldw	r2,-4(fp)
   202f0:	1000021e 	bne	r2,zero,202fc <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   202f4:	00bfff04 	movi	r2,-4
   202f8:	00002906 	br	203a0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   202fc:	e0bffd17 	ldw	r2,-12(fp)
   20300:	10c00c17 	ldw	r3,48(r2)
   20304:	e0bfff17 	ldw	r2,-4(fp)
   20308:	1085883a 	add	r2,r2,r2
   2030c:	100b883a 	mov	r5,r2
   20310:	1809883a 	mov	r4,r3
   20314:	000ce480 	call	ce48 <__udivsi3>
   20318:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2031c:	e0bffb17 	ldw	r2,-20(fp)
   20320:	10800f04 	addi	r2,r2,60
   20324:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   20328:	e0bffb17 	ldw	r2,-20(fp)
   2032c:	10bff104 	addi	r2,r2,-60
   20330:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   20334:	e0ffff17 	ldw	r3,-4(fp)
   20338:	008000b4 	movhi	r2,2
   2033c:	10a1a804 	addi	r2,r2,-31072
   20340:	10c0042e 	bgeu	r2,r3,20354 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   20344:	e0bffe17 	ldw	r2,-8(fp)
   20348:	00c00044 	movi	r3,1
   2034c:	10c00115 	stw	r3,4(r2)
   20350:	00000206 	br	2035c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   20354:	e0bffe17 	ldw	r2,-8(fp)
   20358:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2035c:	e0bffb17 	ldw	r2,-20(fp)
   20360:	1007883a 	mov	r3,r2
   20364:	e0bffe17 	ldw	r2,-8(fp)
   20368:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2036c:	e0bffc17 	ldw	r2,-16(fp)
   20370:	1007883a 	mov	r3,r2
   20374:	e0bffe17 	ldw	r2,-8(fp)
   20378:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2037c:	e0bffb17 	ldw	r2,-20(fp)
   20380:	1007883a 	mov	r3,r2
   20384:	e0bffb17 	ldw	r2,-20(fp)
   20388:	1004d07a 	srli	r2,r2,1
   2038c:	1885c83a 	sub	r2,r3,r2
   20390:	1007883a 	mov	r3,r2
   20394:	e0bffe17 	ldw	r2,-8(fp)
   20398:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2039c:	0005883a 	mov	r2,zero

}
   203a0:	e037883a 	mov	sp,fp
   203a4:	dfc00117 	ldw	ra,4(sp)
   203a8:	df000017 	ldw	fp,0(sp)
   203ac:	dec00204 	addi	sp,sp,8
   203b0:	f800283a 	ret

000203b4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   203b4:	defffe04 	addi	sp,sp,-8
   203b8:	df000115 	stw	fp,4(sp)
   203bc:	df000104 	addi	fp,sp,4
   203c0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10800317 	ldw	r2,12(r2)
   203cc:	10800504 	addi	r2,r2,20
   203d0:	10800037 	ldwio	r2,0(r2)
   203d4:	1080004c 	andi	r2,r2,1
   203d8:	10000226 	beq	r2,zero,203e4 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   203dc:	00800044 	movi	r2,1
   203e0:	00000106 	br	203e8 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   203e4:	0005883a 	mov	r2,zero
}
   203e8:	e037883a 	mov	sp,fp
   203ec:	df000017 	ldw	fp,0(sp)
   203f0:	dec00104 	addi	sp,sp,4
   203f4:	f800283a 	ret

000203f8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   203f8:	defffb04 	addi	sp,sp,-20
   203fc:	df000415 	stw	fp,16(sp)
   20400:	df000404 	addi	fp,sp,16
   20404:	e13ffc15 	stw	r4,-16(fp)
   20408:	e17ffd15 	stw	r5,-12(fp)
   2040c:	e1bffe15 	stw	r6,-8(fp)
   20410:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2041c:	00001406 	br	20470 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   20420:	e0bfff17 	ldw	r2,-4(fp)
   20424:	10800017 	ldw	r2,0(r2)
   20428:	e0fffd17 	ldw	r3,-12(fp)
   2042c:	1885883a 	add	r2,r3,r2
   20430:	e0fffc17 	ldw	r3,-16(fp)
   20434:	18c00317 	ldw	r3,12(r3)
   20438:	18c00104 	addi	r3,r3,4
   2043c:	18c00037 	ldwio	r3,0(r3)
   20440:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   20444:	e0bfff17 	ldw	r2,-4(fp)
   20448:	10800017 	ldw	r2,0(r2)
   2044c:	10c00044 	addi	r3,r2,1
   20450:	e0bfff17 	ldw	r2,-4(fp)
   20454:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20458:	e0bfff17 	ldw	r2,-4(fp)
   2045c:	10c00017 	ldw	r3,0(r2)
   20460:	e0bffe17 	ldw	r2,-8(fp)
   20464:	1880021e 	bne	r3,r2,20470 <alt_avalon_i2c_rx_read_available+0x78>
   20468:	e0bffe17 	ldw	r2,-8(fp)
   2046c:	1000061e 	bne	r2,zero,20488 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   20470:	e0bffc17 	ldw	r2,-16(fp)
   20474:	10800317 	ldw	r2,12(r2)
   20478:	10800704 	addi	r2,r2,28
   2047c:	10800037 	ldwio	r2,0(r2)
   20480:	103fe71e 	bne	r2,zero,20420 <__alt_data_end+0xfc020420>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   20484:	00000106 	br	2048c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20488:	0001883a 	nop
    }
}
   2048c:	0001883a 	nop
   20490:	e037883a 	mov	sp,fp
   20494:	df000017 	ldw	fp,0(sp)
   20498:	dec00104 	addi	sp,sp,4
   2049c:	f800283a 	ret

000204a0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   204a0:	defffa04 	addi	sp,sp,-24
   204a4:	dfc00515 	stw	ra,20(sp)
   204a8:	df000415 	stw	fp,16(sp)
   204ac:	df000404 	addi	fp,sp,16
   204b0:	e13ffe15 	stw	r4,-8(fp)
   204b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   204b8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   204bc:	008000b4 	movhi	r2,2
   204c0:	10a1a804 	addi	r2,r2,-31072
   204c4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   204c8:	00000d06 	br	20500 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   204cc:	e0bffd17 	ldw	r2,-12(fp)
   204d0:	108002a8 	cmpgeui	r2,r2,10
   204d4:	1000021e 	bne	r2,zero,204e0 <alt_avalon_i2c_rx_read+0x40>
   204d8:	0109c404 	movi	r4,10000
   204dc:	00226e40 	call	226e4 <alt_busy_sleep>
      if (--timeout == 0)
   204e0:	e0bffd17 	ldw	r2,-12(fp)
   204e4:	10bfffc4 	addi	r2,r2,-1
   204e8:	e0bffd15 	stw	r2,-12(fp)
   204ec:	e0bffd17 	ldw	r2,-12(fp)
   204f0:	1000031e 	bne	r2,zero,20500 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   204f4:	00bfff84 	movi	r2,-2
   204f8:	e0bffc15 	stw	r2,-16(fp)
        break;
   204fc:	00000506 	br	20514 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   20500:	e0bffe17 	ldw	r2,-8(fp)
   20504:	10800317 	ldw	r2,12(r2)
   20508:	10800704 	addi	r2,r2,28
   2050c:	10800037 	ldwio	r2,0(r2)
   20510:	103fee26 	beq	r2,zero,204cc <__alt_data_end+0xfc0204cc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   20514:	e0bffe17 	ldw	r2,-8(fp)
   20518:	10800317 	ldw	r2,12(r2)
   2051c:	10800104 	addi	r2,r2,4
   20520:	10800037 	ldwio	r2,0(r2)
   20524:	1007883a 	mov	r3,r2
   20528:	e0bfff17 	ldw	r2,-4(fp)
   2052c:	10c00005 	stb	r3,0(r2)
        
    return status;
   20530:	e0bffc17 	ldw	r2,-16(fp)
}
   20534:	e037883a 	mov	sp,fp
   20538:	dfc00117 	ldw	ra,4(sp)
   2053c:	df000017 	ldw	fp,0(sp)
   20540:	dec00204 	addi	sp,sp,8
   20544:	f800283a 	ret

00020548 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   20548:	defff804 	addi	sp,sp,-32
   2054c:	dfc00715 	stw	ra,28(sp)
   20550:	df000615 	stw	fp,24(sp)
   20554:	df000604 	addi	fp,sp,24
   20558:	e13ffc15 	stw	r4,-16(fp)
   2055c:	2809883a 	mov	r4,r5
   20560:	3007883a 	mov	r3,r6
   20564:	3805883a 	mov	r2,r7
   20568:	e13ffd05 	stb	r4,-12(fp)
   2056c:	e0fffe05 	stb	r3,-8(fp)
   20570:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   20574:	0089c404 	movi	r2,10000
   20578:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2057c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20580:	00000c06 	br	205b4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   20584:	e0bffa17 	ldw	r2,-24(fp)
   20588:	108002a8 	cmpgeui	r2,r2,10
   2058c:	1000021e 	bne	r2,zero,20598 <alt_avalon_i2c_cmd_write+0x50>
   20590:	0109c404 	movi	r4,10000
   20594:	00226e40 	call	226e4 <alt_busy_sleep>
      if (--timeout == 0)
   20598:	e0bffa17 	ldw	r2,-24(fp)
   2059c:	10bfffc4 	addi	r2,r2,-1
   205a0:	e0bffa15 	stw	r2,-24(fp)
   205a4:	e0bffa17 	ldw	r2,-24(fp)
   205a8:	1000021e 	bne	r2,zero,205b4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   205ac:	00bfff84 	movi	r2,-2
   205b0:	00001906 	br	20618 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   205b4:	e0bffc17 	ldw	r2,-16(fp)
   205b8:	10800317 	ldw	r2,12(r2)
   205bc:	10800404 	addi	r2,r2,16
   205c0:	10800037 	ldwio	r2,0(r2)
   205c4:	1080004c 	andi	r2,r2,1
   205c8:	103fee26 	beq	r2,zero,20584 <__alt_data_end+0xfc020584>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   205cc:	e0bffc17 	ldw	r2,-16(fp)
   205d0:	10800317 	ldw	r2,12(r2)
   205d4:	e13ffd03 	ldbu	r4,-12(fp)
   205d8:	e0fffe03 	ldbu	r3,-8(fp)
   205dc:	1806927a 	slli	r3,r3,9
   205e0:	20c8b03a 	or	r4,r4,r3
   205e4:	e0ffff03 	ldbu	r3,-4(fp)
   205e8:	1806923a 	slli	r3,r3,8
   205ec:	20c6b03a 	or	r3,r4,r3
   205f0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   205f4:	e0bffb04 	addi	r2,fp,-20
   205f8:	100b883a 	mov	r5,r2
   205fc:	e13ffc17 	ldw	r4,-16(fp)
   20600:	00207880 	call	20788 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   20604:	e0bffb04 	addi	r2,fp,-20
   20608:	100b883a 	mov	r5,r2
   2060c:	e13ffc17 	ldw	r4,-16(fp)
   20610:	00207d40 	call	207d4 <alt_avalon_i2c_check_arblost>
    
    return status;
   20614:	e0bffb17 	ldw	r2,-20(fp)
}
   20618:	e037883a 	mov	sp,fp
   2061c:	dfc00117 	ldw	ra,4(sp)
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00204 	addi	sp,sp,8
   20628:	f800283a 	ret

0002062c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2062c:	defffa04 	addi	sp,sp,-24
   20630:	dfc00515 	stw	ra,20(sp)
   20634:	df000415 	stw	fp,16(sp)
   20638:	df000404 	addi	fp,sp,16
   2063c:	e13ffd15 	stw	r4,-12(fp)
   20640:	e17ffe15 	stw	r5,-8(fp)
   20644:	3005883a 	mov	r2,r6
   20648:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2064c:	e0bffd17 	ldw	r2,-12(fp)
   20650:	10800d17 	ldw	r2,52(r2)
   20654:	10800058 	cmpnei	r2,r2,1
   20658:	10001c1e 	bne	r2,zero,206cc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2065c:	e0bffd17 	ldw	r2,-12(fp)
   20660:	10800917 	ldw	r2,36(r2)
   20664:	109e0014 	ori	r2,r2,30720
   20668:	1004d1fa 	srli	r2,r2,7
   2066c:	1007883a 	mov	r3,r2
   20670:	00bfff84 	movi	r2,-2
   20674:	1884703a 	and	r2,r3,r2
   20678:	1007883a 	mov	r3,r2
   2067c:	e0bffe17 	ldw	r2,-8(fp)
   20680:	1884b03a 	or	r2,r3,r2
   20684:	10803fcc 	andi	r2,r2,255
   20688:	e0ffff03 	ldbu	r3,-4(fp)
   2068c:	000f883a 	mov	r7,zero
   20690:	180d883a 	mov	r6,r3
   20694:	100b883a 	mov	r5,r2
   20698:	e13ffd17 	ldw	r4,-12(fp)
   2069c:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   206a0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   206a4:	e0bffd17 	ldw	r2,-12(fp)
   206a8:	10800917 	ldw	r2,36(r2)
   206ac:	10803fcc 	andi	r2,r2,255
   206b0:	000f883a 	mov	r7,zero
   206b4:	000d883a 	mov	r6,zero
   206b8:	100b883a 	mov	r5,r2
   206bc:	e13ffd17 	ldw	r4,-12(fp)
   206c0:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   206c4:	e0bffc15 	stw	r2,-16(fp)
   206c8:	00000e06 	br	20704 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   206cc:	e0bffd17 	ldw	r2,-12(fp)
   206d0:	10800917 	ldw	r2,36(r2)
   206d4:	1085883a 	add	r2,r2,r2
   206d8:	1007883a 	mov	r3,r2
   206dc:	e0bffe17 	ldw	r2,-8(fp)
   206e0:	1884b03a 	or	r2,r3,r2
   206e4:	10803fcc 	andi	r2,r2,255
   206e8:	e0ffff03 	ldbu	r3,-4(fp)
   206ec:	000f883a 	mov	r7,zero
   206f0:	180d883a 	mov	r6,r3
   206f4:	100b883a 	mov	r5,r2
   206f8:	e13ffd17 	ldw	r4,-12(fp)
   206fc:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   20700:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   20704:	e0bffc17 	ldw	r2,-16(fp)
}
   20708:	e037883a 	mov	sp,fp
   2070c:	dfc00117 	ldw	ra,4(sp)
   20710:	df000017 	ldw	fp,0(sp)
   20714:	dec00204 	addi	sp,sp,8
   20718:	f800283a 	ret

0002071c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2071c:	defffd04 	addi	sp,sp,-12
   20720:	df000215 	stw	fp,8(sp)
   20724:	df000204 	addi	fp,sp,8
   20728:	e13ffe15 	stw	r4,-8(fp)
   2072c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   20730:	e0bffe17 	ldw	r2,-8(fp)
   20734:	10c00917 	ldw	r3,36(r2)
   20738:	e0bfff17 	ldw	r2,-4(fp)
   2073c:	10c00015 	stw	r3,0(r2)
}
   20740:	0001883a 	nop
   20744:	e037883a 	mov	sp,fp
   20748:	df000017 	ldw	fp,0(sp)
   2074c:	dec00104 	addi	sp,sp,4
   20750:	f800283a 	ret

00020754 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   20754:	defffd04 	addi	sp,sp,-12
   20758:	df000215 	stw	fp,8(sp)
   2075c:	df000204 	addi	fp,sp,8
   20760:	e13ffe15 	stw	r4,-8(fp)
   20764:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   20768:	e0bffe17 	ldw	r2,-8(fp)
   2076c:	e0ffff17 	ldw	r3,-4(fp)
   20770:	10c00915 	stw	r3,36(r2)
}
   20774:	0001883a 	nop
   20778:	e037883a 	mov	sp,fp
   2077c:	df000017 	ldw	fp,0(sp)
   20780:	dec00104 	addi	sp,sp,4
   20784:	f800283a 	ret

00020788 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   20788:	defffd04 	addi	sp,sp,-12
   2078c:	df000215 	stw	fp,8(sp)
   20790:	df000204 	addi	fp,sp,8
   20794:	e13ffe15 	stw	r4,-8(fp)
   20798:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2079c:	e0bffe17 	ldw	r2,-8(fp)
   207a0:	10800317 	ldw	r2,12(r2)
   207a4:	10800404 	addi	r2,r2,16
   207a8:	10800037 	ldwio	r2,0(r2)
   207ac:	1080010c 	andi	r2,r2,4
   207b0:	10000326 	beq	r2,zero,207c0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   207b4:	e0bfff17 	ldw	r2,-4(fp)
   207b8:	00fffec4 	movi	r3,-5
   207bc:	10c00015 	stw	r3,0(r2)
    }
}
   207c0:	0001883a 	nop
   207c4:	e037883a 	mov	sp,fp
   207c8:	df000017 	ldw	fp,0(sp)
   207cc:	dec00104 	addi	sp,sp,4
   207d0:	f800283a 	ret

000207d4 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   207d4:	defffd04 	addi	sp,sp,-12
   207d8:	df000215 	stw	fp,8(sp)
   207dc:	df000204 	addi	fp,sp,8
   207e0:	e13ffe15 	stw	r4,-8(fp)
   207e4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   207e8:	e0bffe17 	ldw	r2,-8(fp)
   207ec:	10800317 	ldw	r2,12(r2)
   207f0:	10800404 	addi	r2,r2,16
   207f4:	10800037 	ldwio	r2,0(r2)
   207f8:	1080020c 	andi	r2,r2,8
   207fc:	10000326 	beq	r2,zero,2080c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   20800:	e0bfff17 	ldw	r2,-4(fp)
   20804:	00fffe84 	movi	r3,-6
   20808:	10c00015 	stw	r3,0(r2)
    }
}
   2080c:	0001883a 	nop
   20810:	e037883a 	mov	sp,fp
   20814:	df000017 	ldw	fp,0(sp)
   20818:	dec00104 	addi	sp,sp,4
   2081c:	f800283a 	ret

00020820 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20820:	defff804 	addi	sp,sp,-32
   20824:	dfc00715 	stw	ra,28(sp)
   20828:	df000615 	stw	fp,24(sp)
   2082c:	df000604 	addi	fp,sp,24
   20830:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20834:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20838:	e0bfff17 	ldw	r2,-4(fp)
   2083c:	10800717 	ldw	r2,28(r2)
   20840:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   20844:	e0bffb17 	ldw	r2,-20(fp)
   20848:	10800117 	ldw	r2,4(r2)
   2084c:	10800044 	addi	r2,r2,1
   20850:	0149c404 	movi	r5,10000
   20854:	1009883a 	mov	r4,r2
   20858:	000cf040 	call	cf04 <__mulsi3>
   2085c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   20860:	e0bffd04 	addi	r2,fp,-12
   20864:	100b883a 	mov	r5,r2
   20868:	e13fff17 	ldw	r4,-4(fp)
   2086c:	00216b80 	call	216b8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   20870:	e0bffd17 	ldw	r2,-12(fp)
   20874:	100b883a 	mov	r5,r2
   20878:	e13fff17 	ldw	r4,-4(fp)
   2087c:	00215ec0 	call	215ec <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20880:	e0bffc04 	addi	r2,fp,-16
   20884:	100b883a 	mov	r5,r2
   20888:	e13fff17 	ldw	r4,-4(fp)
   2088c:	00207880 	call	20788 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   20890:	e0bffc17 	ldw	r2,-16(fp)
   20894:	10002226 	beq	r2,zero,20920 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   20898:	e0bffb17 	ldw	r2,-20(fp)
   2089c:	10800217 	ldw	r2,8(r2)
   208a0:	10001d26 	beq	r2,zero,20918 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   208a4:	00000d06 	br	208dc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   208a8:	e0bffa17 	ldw	r2,-24(fp)
   208ac:	108002a8 	cmpgeui	r2,r2,10
   208b0:	1000021e 	bne	r2,zero,208bc <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   208b4:	0109c404 	movi	r4,10000
   208b8:	00226e40 	call	226e4 <alt_busy_sleep>
              if (--timeout == 0)
   208bc:	e0bffa17 	ldw	r2,-24(fp)
   208c0:	10bfffc4 	addi	r2,r2,-1
   208c4:	e0bffa15 	stw	r2,-24(fp)
   208c8:	e0bffa17 	ldw	r2,-24(fp)
   208cc:	1000031e 	bne	r2,zero,208dc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   208d0:	00bfff84 	movi	r2,-2
   208d4:	e0bffc15 	stw	r2,-16(fp)
                 break;
   208d8:	00000306 	br	208e8 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   208dc:	e13fff17 	ldw	r4,-4(fp)
   208e0:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   208e4:	103ff01e 	bne	r2,zero,208a8 <__alt_data_end+0xfc0208a8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   208e8:	e0bffb17 	ldw	r2,-20(fp)
   208ec:	10800017 	ldw	r2,0(r2)
   208f0:	e0fffe04 	addi	r3,fp,-8
   208f4:	180f883a 	mov	r7,r3
   208f8:	000d883a 	mov	r6,zero
   208fc:	100b883a 	mov	r5,r2
   20900:	e13fff17 	ldw	r4,-4(fp)
   20904:	00203f80 	call	203f8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   20908:	e13fff17 	ldw	r4,-4(fp)
   2090c:	002005c0 	call	2005c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   20910:	e0bffb17 	ldw	r2,-20(fp)
   20914:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   20918:	e0bffc17 	ldw	r2,-16(fp)
   2091c:	00000a06 	br	20948 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   20920:	e0bffb17 	ldw	r2,-20(fp)
   20924:	10800217 	ldw	r2,8(r2)
   20928:	10000626 	beq	r2,zero,20944 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   2092c:	e0bffd17 	ldw	r2,-12(fp)
   20930:	100b883a 	mov	r5,r2
   20934:	e13fff17 	ldw	r4,-4(fp)
   20938:	00216540 	call	21654 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   2093c:	00bffe44 	movi	r2,-7
   20940:	00000106 	br	20948 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   20944:	0005883a 	mov	r2,zero
}
   20948:	e037883a 	mov	sp,fp
   2094c:	dfc00117 	ldw	ra,4(sp)
   20950:	df000017 	ldw	fp,0(sp)
   20954:	dec00204 	addi	sp,sp,8
   20958:	f800283a 	ret

0002095c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2095c:	defff704 	addi	sp,sp,-36
   20960:	dfc00815 	stw	ra,32(sp)
   20964:	df000715 	stw	fp,28(sp)
   20968:	df000704 	addi	fp,sp,28
   2096c:	e13ffc15 	stw	r4,-16(fp)
   20970:	e17ffd15 	stw	r5,-12(fp)
   20974:	e1bffe15 	stw	r6,-8(fp)
   20978:	3805883a 	mov	r2,r7
   2097c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20980:	0089c404 	movi	r2,10000
   20984:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   20988:	00002206 	br	20a14 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2098c:	e0bffb17 	ldw	r2,-20(fp)
   20990:	108002a8 	cmpgeui	r2,r2,10
   20994:	1000021e 	bne	r2,zero,209a0 <alt_avalon_i2c_master_tx+0x44>
   20998:	0109c404 	movi	r4,10000
   2099c:	00226e40 	call	226e4 <alt_busy_sleep>
      if (use_interrupts)
   209a0:	e0bfff03 	ldbu	r2,-4(fp)
   209a4:	10000926 	beq	r2,zero,209cc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   209a8:	00800044 	movi	r2,1
   209ac:	d8800015 	stw	r2,0(sp)
   209b0:	000f883a 	mov	r7,zero
   209b4:	e1bffe17 	ldw	r6,-8(fp)
   209b8:	e17ffd17 	ldw	r5,-12(fp)
   209bc:	e13ffc17 	ldw	r4,-16(fp)
   209c0:	0020f080 	call	20f08 <alt_avalon_i2c_master_transmit_using_interrupts>
   209c4:	e0bffa15 	stw	r2,-24(fp)
   209c8:	00000806 	br	209ec <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   209cc:	00800044 	movi	r2,1
   209d0:	d8800015 	stw	r2,0(sp)
   209d4:	000f883a 	mov	r7,zero
   209d8:	e1bffe17 	ldw	r6,-8(fp)
   209dc:	e17ffd17 	ldw	r5,-12(fp)
   209e0:	e13ffc17 	ldw	r4,-16(fp)
   209e4:	0020d480 	call	20d48 <alt_avalon_i2c_master_transmit>
   209e8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   209ec:	e0bffa17 	ldw	r2,-24(fp)
   209f0:	10bffea0 	cmpeqi	r2,r2,-6
   209f4:	1000061e 	bne	r2,zero,20a10 <alt_avalon_i2c_master_tx+0xb4>
   209f8:	e0bffa17 	ldw	r2,-24(fp)
   209fc:	10bffee0 	cmpeqi	r2,r2,-5
   20a00:	1000031e 	bne	r2,zero,20a10 <alt_avalon_i2c_master_tx+0xb4>
   20a04:	e0bffa17 	ldw	r2,-24(fp)
   20a08:	10bffe58 	cmpnei	r2,r2,-7
   20a0c:	1000061e 	bne	r2,zero,20a28 <alt_avalon_i2c_master_tx+0xcc>
   20a10:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   20a14:	e0bffb17 	ldw	r2,-20(fp)
   20a18:	10ffffc4 	addi	r3,r2,-1
   20a1c:	e0fffb15 	stw	r3,-20(fp)
   20a20:	103fda1e 	bne	r2,zero,2098c <__alt_data_end+0xfc02098c>
   20a24:	00000106 	br	20a2c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   20a28:	0001883a 	nop
    }

    return status;
   20a2c:	e0bffa17 	ldw	r2,-24(fp)
}        
   20a30:	e037883a 	mov	sp,fp
   20a34:	dfc00117 	ldw	ra,4(sp)
   20a38:	df000017 	ldw	fp,0(sp)
   20a3c:	dec00204 	addi	sp,sp,8
   20a40:	f800283a 	ret

00020a44 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20a44:	defff704 	addi	sp,sp,-36
   20a48:	dfc00815 	stw	ra,32(sp)
   20a4c:	df000715 	stw	fp,28(sp)
   20a50:	df000704 	addi	fp,sp,28
   20a54:	e13ffc15 	stw	r4,-16(fp)
   20a58:	e17ffd15 	stw	r5,-12(fp)
   20a5c:	e1bffe15 	stw	r6,-8(fp)
   20a60:	3805883a 	mov	r2,r7
   20a64:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20a68:	0089c404 	movi	r2,10000
   20a6c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   20a70:	e0bfff03 	ldbu	r2,-4(fp)
   20a74:	10003426 	beq	r2,zero,20b48 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   20a78:	00001706 	br	20ad8 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20a7c:	e0bffb17 	ldw	r2,-20(fp)
   20a80:	108002a8 	cmpgeui	r2,r2,10
   20a84:	1000021e 	bne	r2,zero,20a90 <alt_avalon_i2c_master_rx+0x4c>
   20a88:	0109c404 	movi	r4,10000
   20a8c:	00226e40 	call	226e4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20a90:	00800044 	movi	r2,1
   20a94:	d8800015 	stw	r2,0(sp)
   20a98:	000f883a 	mov	r7,zero
   20a9c:	e1bffe17 	ldw	r6,-8(fp)
   20aa0:	e17ffd17 	ldw	r5,-12(fp)
   20aa4:	e13ffc17 	ldw	r4,-16(fp)
   20aa8:	00213240 	call	21324 <alt_avalon_i2c_master_receive_using_interrupts>
   20aac:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ab0:	e0bffa17 	ldw	r2,-24(fp)
   20ab4:	10bffea0 	cmpeqi	r2,r2,-6
   20ab8:	1000061e 	bne	r2,zero,20ad4 <alt_avalon_i2c_master_rx+0x90>
   20abc:	e0bffa17 	ldw	r2,-24(fp)
   20ac0:	10bffee0 	cmpeqi	r2,r2,-5
   20ac4:	1000031e 	bne	r2,zero,20ad4 <alt_avalon_i2c_master_rx+0x90>
   20ac8:	e0bffa17 	ldw	r2,-24(fp)
   20acc:	10bffe58 	cmpnei	r2,r2,-7
   20ad0:	1000221e 	bne	r2,zero,20b5c <alt_avalon_i2c_master_rx+0x118>
   20ad4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   20ad8:	e0bffb17 	ldw	r2,-20(fp)
   20adc:	10ffffc4 	addi	r3,r2,-1
   20ae0:	e0fffb15 	stw	r3,-20(fp)
   20ae4:	103fe51e 	bne	r2,zero,20a7c <__alt_data_end+0xfc020a7c>
   20ae8:	00001f06 	br	20b68 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20aec:	e0bffb17 	ldw	r2,-20(fp)
   20af0:	108002a8 	cmpgeui	r2,r2,10
   20af4:	1000021e 	bne	r2,zero,20b00 <alt_avalon_i2c_master_rx+0xbc>
   20af8:	0109c404 	movi	r4,10000
   20afc:	00226e40 	call	226e4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20b00:	00800044 	movi	r2,1
   20b04:	d8800015 	stw	r2,0(sp)
   20b08:	000f883a 	mov	r7,zero
   20b0c:	e1bffe17 	ldw	r6,-8(fp)
   20b10:	e17ffd17 	ldw	r5,-12(fp)
   20b14:	e13ffc17 	ldw	r4,-16(fp)
   20b18:	00211140 	call	21114 <alt_avalon_i2c_master_receive>
   20b1c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20b20:	e0bffa17 	ldw	r2,-24(fp)
   20b24:	10bffea0 	cmpeqi	r2,r2,-6
   20b28:	1000061e 	bne	r2,zero,20b44 <alt_avalon_i2c_master_rx+0x100>
   20b2c:	e0bffa17 	ldw	r2,-24(fp)
   20b30:	10bffee0 	cmpeqi	r2,r2,-5
   20b34:	1000031e 	bne	r2,zero,20b44 <alt_avalon_i2c_master_rx+0x100>
   20b38:	e0bffa17 	ldw	r2,-24(fp)
   20b3c:	10bffe58 	cmpnei	r2,r2,-7
   20b40:	1000081e 	bne	r2,zero,20b64 <alt_avalon_i2c_master_rx+0x120>
   20b44:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   20b48:	e0bffb17 	ldw	r2,-20(fp)
   20b4c:	10ffffc4 	addi	r3,r2,-1
   20b50:	e0fffb15 	stw	r3,-20(fp)
   20b54:	103fe51e 	bne	r2,zero,20aec <__alt_data_end+0xfc020aec>
   20b58:	00000306 	br	20b68 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20b5c:	0001883a 	nop
   20b60:	00000106 	br	20b68 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20b64:	0001883a 	nop
      }
    }
    
    return status;
   20b68:	e0bffa17 	ldw	r2,-24(fp)
}        
   20b6c:	e037883a 	mov	sp,fp
   20b70:	dfc00117 	ldw	ra,4(sp)
   20b74:	df000017 	ldw	fp,0(sp)
   20b78:	dec00204 	addi	sp,sp,8
   20b7c:	f800283a 	ret

00020b80 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   20b80:	defff604 	addi	sp,sp,-40
   20b84:	dfc00915 	stw	ra,36(sp)
   20b88:	df000815 	stw	fp,32(sp)
   20b8c:	df000804 	addi	fp,sp,32
   20b90:	e13ffb15 	stw	r4,-20(fp)
   20b94:	e17ffc15 	stw	r5,-16(fp)
   20b98:	e1bffd15 	stw	r6,-12(fp)
   20b9c:	e1fffe15 	stw	r7,-8(fp)
   20ba0:	e0800317 	ldw	r2,12(fp)
   20ba4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20ba8:	0089c404 	movi	r2,10000
   20bac:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   20bb0:	e0bfff03 	ldbu	r2,-4(fp)
   20bb4:	10005626 	beq	r2,zero,20d10 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20bb8:	00002806 	br	20c5c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20bbc:	e0bffa17 	ldw	r2,-24(fp)
   20bc0:	108002a8 	cmpgeui	r2,r2,10
   20bc4:	1000021e 	bne	r2,zero,20bd0 <alt_avalon_i2c_master_tx_rx+0x50>
   20bc8:	0109c404 	movi	r4,10000
   20bcc:	00226e40 	call	226e4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20bd0:	d8000015 	stw	zero,0(sp)
   20bd4:	000f883a 	mov	r7,zero
   20bd8:	e1bffd17 	ldw	r6,-12(fp)
   20bdc:	e17ffc17 	ldw	r5,-16(fp)
   20be0:	e13ffb17 	ldw	r4,-20(fp)
   20be4:	0020f080 	call	20f08 <alt_avalon_i2c_master_transmit_using_interrupts>
   20be8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20bec:	e0bff917 	ldw	r2,-28(fp)
   20bf0:	10bffea0 	cmpeqi	r2,r2,-6
   20bf4:	1000191e 	bne	r2,zero,20c5c <alt_avalon_i2c_master_tx_rx+0xdc>
   20bf8:	e0bff917 	ldw	r2,-28(fp)
   20bfc:	10bffee0 	cmpeqi	r2,r2,-5
   20c00:	1000161e 	bne	r2,zero,20c5c <alt_avalon_i2c_master_tx_rx+0xdc>
   20c04:	e0bff917 	ldw	r2,-28(fp)
   20c08:	10bffe58 	cmpnei	r2,r2,-7
   20c0c:	1000011e 	bne	r2,zero,20c14 <alt_avalon_i2c_master_tx_rx+0x94>
   20c10:	00001206 	br	20c5c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20c14:	00800044 	movi	r2,1
   20c18:	d8800015 	stw	r2,0(sp)
   20c1c:	01c00044 	movi	r7,1
   20c20:	e1800217 	ldw	r6,8(fp)
   20c24:	e17ffe17 	ldw	r5,-8(fp)
   20c28:	e13ffb17 	ldw	r4,-20(fp)
   20c2c:	00213240 	call	21324 <alt_avalon_i2c_master_receive_using_interrupts>
   20c30:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20c34:	e0bff917 	ldw	r2,-28(fp)
   20c38:	10bffea0 	cmpeqi	r2,r2,-6
   20c3c:	1000061e 	bne	r2,zero,20c58 <alt_avalon_i2c_master_tx_rx+0xd8>
   20c40:	e0bff917 	ldw	r2,-28(fp)
   20c44:	10bffee0 	cmpeqi	r2,r2,-5
   20c48:	1000031e 	bne	r2,zero,20c58 <alt_avalon_i2c_master_tx_rx+0xd8>
   20c4c:	e0bff917 	ldw	r2,-28(fp)
   20c50:	10bffe58 	cmpnei	r2,r2,-7
   20c54:	1000331e 	bne	r2,zero,20d24 <alt_avalon_i2c_master_tx_rx+0x1a4>
   20c58:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20c5c:	e0bffa17 	ldw	r2,-24(fp)
   20c60:	10ffffc4 	addi	r3,r2,-1
   20c64:	e0fffa15 	stw	r3,-24(fp)
   20c68:	103fd41e 	bne	r2,zero,20bbc <__alt_data_end+0xfc020bbc>
   20c6c:	00003006 	br	20d30 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20c70:	e0bffa17 	ldw	r2,-24(fp)
   20c74:	108002a8 	cmpgeui	r2,r2,10
   20c78:	1000021e 	bne	r2,zero,20c84 <alt_avalon_i2c_master_tx_rx+0x104>
   20c7c:	0109c404 	movi	r4,10000
   20c80:	00226e40 	call	226e4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20c84:	d8000015 	stw	zero,0(sp)
   20c88:	000f883a 	mov	r7,zero
   20c8c:	e1bffd17 	ldw	r6,-12(fp)
   20c90:	e17ffc17 	ldw	r5,-16(fp)
   20c94:	e13ffb17 	ldw	r4,-20(fp)
   20c98:	0020d480 	call	20d48 <alt_avalon_i2c_master_transmit>
   20c9c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ca0:	e0bff917 	ldw	r2,-28(fp)
   20ca4:	10bffea0 	cmpeqi	r2,r2,-6
   20ca8:	1000191e 	bne	r2,zero,20d10 <alt_avalon_i2c_master_tx_rx+0x190>
   20cac:	e0bff917 	ldw	r2,-28(fp)
   20cb0:	10bffee0 	cmpeqi	r2,r2,-5
   20cb4:	1000161e 	bne	r2,zero,20d10 <alt_avalon_i2c_master_tx_rx+0x190>
   20cb8:	e0bff917 	ldw	r2,-28(fp)
   20cbc:	10bffe58 	cmpnei	r2,r2,-7
   20cc0:	1000011e 	bne	r2,zero,20cc8 <alt_avalon_i2c_master_tx_rx+0x148>
   20cc4:	00001206 	br	20d10 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20cc8:	00800044 	movi	r2,1
   20ccc:	d8800015 	stw	r2,0(sp)
   20cd0:	01c00044 	movi	r7,1
   20cd4:	e1800217 	ldw	r6,8(fp)
   20cd8:	e17ffe17 	ldw	r5,-8(fp)
   20cdc:	e13ffb17 	ldw	r4,-20(fp)
   20ce0:	00211140 	call	21114 <alt_avalon_i2c_master_receive>
   20ce4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ce8:	e0bff917 	ldw	r2,-28(fp)
   20cec:	10bffea0 	cmpeqi	r2,r2,-6
   20cf0:	1000061e 	bne	r2,zero,20d0c <alt_avalon_i2c_master_tx_rx+0x18c>
   20cf4:	e0bff917 	ldw	r2,-28(fp)
   20cf8:	10bffee0 	cmpeqi	r2,r2,-5
   20cfc:	1000031e 	bne	r2,zero,20d0c <alt_avalon_i2c_master_tx_rx+0x18c>
   20d00:	e0bff917 	ldw	r2,-28(fp)
   20d04:	10bffe58 	cmpnei	r2,r2,-7
   20d08:	1000081e 	bne	r2,zero,20d2c <alt_avalon_i2c_master_tx_rx+0x1ac>
   20d0c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   20d10:	e0bffa17 	ldw	r2,-24(fp)
   20d14:	10ffffc4 	addi	r3,r2,-1
   20d18:	e0fffa15 	stw	r3,-24(fp)
   20d1c:	103fd41e 	bne	r2,zero,20c70 <__alt_data_end+0xfc020c70>
   20d20:	00000306 	br	20d30 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20d24:	0001883a 	nop
   20d28:	00000106 	br	20d30 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20d2c:	0001883a 	nop
      }
    }
    
    return status;
   20d30:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20d34:	e037883a 	mov	sp,fp
   20d38:	dfc00117 	ldw	ra,4(sp)
   20d3c:	df000017 	ldw	fp,0(sp)
   20d40:	dec00204 	addi	sp,sp,8
   20d44:	f800283a 	ret

00020d48 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20d48:	defff704 	addi	sp,sp,-36
   20d4c:	dfc00815 	stw	ra,32(sp)
   20d50:	df000715 	stw	fp,28(sp)
   20d54:	df000704 	addi	fp,sp,28
   20d58:	e13ffb15 	stw	r4,-20(fp)
   20d5c:	e17ffc15 	stw	r5,-16(fp)
   20d60:	e1bffd15 	stw	r6,-12(fp)
   20d64:	3807883a 	mov	r3,r7
   20d68:	e0800217 	ldw	r2,8(fp)
   20d6c:	e0fffe05 	stb	r3,-8(fp)
   20d70:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20d74:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   20d78:	0149c404 	movi	r5,10000
   20d7c:	e13ffd17 	ldw	r4,-12(fp)
   20d80:	000cf040 	call	cf04 <__mulsi3>
   20d84:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   20d88:	e0bffd17 	ldw	r2,-12(fp)
   20d8c:	1000021e 	bne	r2,zero,20d98 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20d90:	0005883a 	mov	r2,zero
   20d94:	00005706 	br	20ef4 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20d98:	e0bffe03 	ldbu	r2,-8(fp)
   20d9c:	10000a1e 	bne	r2,zero,20dc8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20da0:	e13ffb17 	ldw	r4,-20(fp)
   20da4:	001ffc40 	call	1ffc4 <alt_avalon_i2c_enable>
   20da8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20dac:	e0bffa17 	ldw	r2,-24(fp)
   20db0:	10000226 	beq	r2,zero,20dbc <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   20db4:	e0bffa17 	ldw	r2,-24(fp)
   20db8:	00004e06 	br	20ef4 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20dbc:	01400704 	movi	r5,28
   20dc0:	e13ffb17 	ldw	r4,-20(fp)
   20dc4:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20dc8:	e0bffe03 	ldbu	r2,-8(fp)
   20dcc:	100d883a 	mov	r6,r2
   20dd0:	000b883a 	mov	r5,zero
   20dd4:	e13ffb17 	ldw	r4,-20(fp)
   20dd8:	002062c0 	call	2062c <alt_avalon_i2c_send_address>
   20ddc:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   20de0:	e0bffa17 	ldw	r2,-24(fp)
   20de4:	1000271e 	bne	r2,zero,20e84 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20de8:	00000f06 	br	20e28 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20dec:	e0bffc17 	ldw	r2,-16(fp)
   20df0:	10800003 	ldbu	r2,0(r2)
   20df4:	10803fcc 	andi	r2,r2,255
   20df8:	000f883a 	mov	r7,zero
   20dfc:	000d883a 	mov	r6,zero
   20e00:	100b883a 	mov	r5,r2
   20e04:	e13ffb17 	ldw	r4,-20(fp)
   20e08:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   20e0c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   20e10:	e0bffc17 	ldw	r2,-16(fp)
   20e14:	10800044 	addi	r2,r2,1
   20e18:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20e1c:	e0bffd17 	ldw	r2,-12(fp)
   20e20:	10bfffc4 	addi	r2,r2,-1
   20e24:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20e28:	e0bffd17 	ldw	r2,-12(fp)
   20e2c:	108000b0 	cmpltui	r2,r2,2
   20e30:	1000021e 	bne	r2,zero,20e3c <alt_avalon_i2c_master_transmit+0xf4>
   20e34:	e0bffa17 	ldw	r2,-24(fp)
   20e38:	103fec26 	beq	r2,zero,20dec <__alt_data_end+0xfc020dec>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20e3c:	e0bffa17 	ldw	r2,-24(fp)
   20e40:	1000101e 	bne	r2,zero,20e84 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20e44:	e0bffc17 	ldw	r2,-16(fp)
   20e48:	10800003 	ldbu	r2,0(r2)
   20e4c:	10803fcc 	andi	r2,r2,255
   20e50:	e0ffff03 	ldbu	r3,-4(fp)
   20e54:	180f883a 	mov	r7,r3
   20e58:	000d883a 	mov	r6,zero
   20e5c:	100b883a 	mov	r5,r2
   20e60:	e13ffb17 	ldw	r4,-20(fp)
   20e64:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   20e68:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   20e6c:	e0bffc17 	ldw	r2,-16(fp)
   20e70:	10800044 	addi	r2,r2,1
   20e74:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20e78:	e0bffd17 	ldw	r2,-12(fp)
   20e7c:	10bfffc4 	addi	r2,r2,-1
   20e80:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20e84:	e0bfff03 	ldbu	r2,-4(fp)
   20e88:	1000101e 	bne	r2,zero,20ecc <alt_avalon_i2c_master_transmit+0x184>
   20e8c:	e0bffa17 	ldw	r2,-24(fp)
   20e90:	10001726 	beq	r2,zero,20ef0 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e94:	00000d06 	br	20ecc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20e98:	e0bff917 	ldw	r2,-28(fp)
   20e9c:	108002a8 	cmpgeui	r2,r2,10
   20ea0:	1000021e 	bne	r2,zero,20eac <alt_avalon_i2c_master_transmit+0x164>
   20ea4:	0109c404 	movi	r4,10000
   20ea8:	00226e40 	call	226e4 <alt_busy_sleep>
            if (--timeout == 0)
   20eac:	e0bff917 	ldw	r2,-28(fp)
   20eb0:	10bfffc4 	addi	r2,r2,-1
   20eb4:	e0bff915 	stw	r2,-28(fp)
   20eb8:	e0bff917 	ldw	r2,-28(fp)
   20ebc:	1000031e 	bne	r2,zero,20ecc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20ec0:	00bfff84 	movi	r2,-2
   20ec4:	e0bffa15 	stw	r2,-24(fp)
               break;
   20ec8:	00000306 	br	20ed8 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20ecc:	e13ffb17 	ldw	r4,-20(fp)
   20ed0:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   20ed4:	103ff01e 	bne	r2,zero,20e98 <__alt_data_end+0xfc020e98>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   20ed8:	e0bffa04 	addi	r2,fp,-24
   20edc:	100b883a 	mov	r5,r2
   20ee0:	e13ffb17 	ldw	r4,-20(fp)
   20ee4:	00207880 	call	20788 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20ee8:	e13ffb17 	ldw	r4,-20(fp)
   20eec:	002005c0 	call	2005c <alt_avalon_i2c_disable>
    }


    return status;
   20ef0:	e0bffa17 	ldw	r2,-24(fp)
}
   20ef4:	e037883a 	mov	sp,fp
   20ef8:	dfc00117 	ldw	ra,4(sp)
   20efc:	df000017 	ldw	fp,0(sp)
   20f00:	dec00204 	addi	sp,sp,8
   20f04:	f800283a 	ret

00020f08 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20f08:	defff604 	addi	sp,sp,-40
   20f0c:	dfc00915 	stw	ra,36(sp)
   20f10:	df000815 	stw	fp,32(sp)
   20f14:	df000804 	addi	fp,sp,32
   20f18:	e13ffb15 	stw	r4,-20(fp)
   20f1c:	e17ffc15 	stw	r5,-16(fp)
   20f20:	e1bffd15 	stw	r6,-12(fp)
   20f24:	3807883a 	mov	r3,r7
   20f28:	e0800217 	ldw	r2,8(fp)
   20f2c:	e0fffe05 	stb	r3,-8(fp)
   20f30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20f34:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   20f38:	0149c404 	movi	r5,10000
   20f3c:	e13ffd17 	ldw	r4,-12(fp)
   20f40:	000cf040 	call	cf04 <__mulsi3>
   20f44:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20f48:	e0bffb17 	ldw	r2,-20(fp)
   20f4c:	10800717 	ldw	r2,28(r2)
   20f50:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   20f54:	e0bffd17 	ldw	r2,-12(fp)
   20f58:	1000021e 	bne	r2,zero,20f64 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20f5c:	0005883a 	mov	r2,zero
   20f60:	00006706 	br	21100 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20f64:	e0bffb17 	ldw	r2,-20(fp)
   20f68:	10c00617 	ldw	r3,24(r2)
   20f6c:	008000b4 	movhi	r2,2
   20f70:	10bf1204 	addi	r2,r2,-952
   20f74:	18800226 	beq	r3,r2,20f80 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20f78:	00bfff44 	movi	r2,-3
   20f7c:	00006006 	br	21100 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20f80:	e0bffe03 	ldbu	r2,-8(fp)
   20f84:	10000a1e 	bne	r2,zero,20fb0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20f88:	e13ffb17 	ldw	r4,-20(fp)
   20f8c:	001ffc40 	call	1ffc4 <alt_avalon_i2c_enable>
   20f90:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20f94:	e0bff817 	ldw	r2,-32(fp)
   20f98:	10000226 	beq	r2,zero,20fa4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   20f9c:	e0bff817 	ldw	r2,-32(fp)
   20fa0:	00005706 	br	21100 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20fa4:	01400704 	movi	r5,28
   20fa8:	e13ffb17 	ldw	r4,-20(fp)
   20fac:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20fb0:	e0bffe03 	ldbu	r2,-8(fp)
   20fb4:	100d883a 	mov	r6,r2
   20fb8:	000b883a 	mov	r5,zero
   20fbc:	e13ffb17 	ldw	r4,-20(fp)
   20fc0:	002062c0 	call	2062c <alt_avalon_i2c_send_address>
   20fc4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   20fc8:	e0bff817 	ldw	r2,-32(fp)
   20fcc:	1000271e 	bne	r2,zero,2106c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20fd0:	00000f06 	br	21010 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20fd4:	e0bffc17 	ldw	r2,-16(fp)
   20fd8:	10800003 	ldbu	r2,0(r2)
   20fdc:	10803fcc 	andi	r2,r2,255
   20fe0:	000f883a 	mov	r7,zero
   20fe4:	000d883a 	mov	r6,zero
   20fe8:	100b883a 	mov	r5,r2
   20fec:	e13ffb17 	ldw	r4,-20(fp)
   20ff0:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   20ff4:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   20ff8:	e0bffc17 	ldw	r2,-16(fp)
   20ffc:	10800044 	addi	r2,r2,1
   21000:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21004:	e0bffd17 	ldw	r2,-12(fp)
   21008:	10bfffc4 	addi	r2,r2,-1
   2100c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21010:	e0bffd17 	ldw	r2,-12(fp)
   21014:	108000b0 	cmpltui	r2,r2,2
   21018:	1000021e 	bne	r2,zero,21024 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   2101c:	e0bff817 	ldw	r2,-32(fp)
   21020:	103fec26 	beq	r2,zero,20fd4 <__alt_data_end+0xfc020fd4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21024:	e0bff817 	ldw	r2,-32(fp)
   21028:	1000101e 	bne	r2,zero,2106c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2102c:	e0bffc17 	ldw	r2,-16(fp)
   21030:	10800003 	ldbu	r2,0(r2)
   21034:	10803fcc 	andi	r2,r2,255
   21038:	e0ffff03 	ldbu	r3,-4(fp)
   2103c:	180f883a 	mov	r7,r3
   21040:	000d883a 	mov	r6,zero
   21044:	100b883a 	mov	r5,r2
   21048:	e13ffb17 	ldw	r4,-20(fp)
   2104c:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   21050:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   21054:	e0bffc17 	ldw	r2,-16(fp)
   21058:	10800044 	addi	r2,r2,1
   2105c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21060:	e0bffd17 	ldw	r2,-12(fp)
   21064:	10bfffc4 	addi	r2,r2,-1
   21068:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2106c:	e0bff817 	ldw	r2,-32(fp)
   21070:	10001426 	beq	r2,zero,210c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21074:	00000d06 	br	210ac <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   21078:	e0bff917 	ldw	r2,-28(fp)
   2107c:	108002a8 	cmpgeui	r2,r2,10
   21080:	1000021e 	bne	r2,zero,2108c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   21084:	0109c404 	movi	r4,10000
   21088:	00226e40 	call	226e4 <alt_busy_sleep>
            if (--timeout == 0)
   2108c:	e0bff917 	ldw	r2,-28(fp)
   21090:	10bfffc4 	addi	r2,r2,-1
   21094:	e0bff915 	stw	r2,-28(fp)
   21098:	e0bff917 	ldw	r2,-28(fp)
   2109c:	1000031e 	bne	r2,zero,210ac <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   210a0:	00bfff84 	movi	r2,-2
   210a4:	e0bff815 	stw	r2,-32(fp)
               break;
   210a8:	00000306 	br	210b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   210ac:	e13ffb17 	ldw	r4,-20(fp)
   210b0:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   210b4:	103ff01e 	bne	r2,zero,21078 <__alt_data_end+0xfc021078>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   210b8:	e13ffb17 	ldw	r4,-20(fp)
   210bc:	002005c0 	call	2005c <alt_avalon_i2c_disable>
   210c0:	00000e06 	br	210fc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   210c4:	e0bfff03 	ldbu	r2,-4(fp)
   210c8:	10000c26 	beq	r2,zero,210fc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   210cc:	01400704 	movi	r5,28
   210d0:	e13ffb17 	ldw	r4,-20(fp)
   210d4:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   210d8:	000b883a 	mov	r5,zero
   210dc:	e13ffb17 	ldw	r4,-20(fp)
   210e0:	00217f80 	call	217f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   210e4:	e0bffa17 	ldw	r2,-24(fp)
   210e8:	00c00044 	movi	r3,1
   210ec:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   210f0:	01400044 	movi	r5,1
   210f4:	e13ffb17 	ldw	r4,-20(fp)
   210f8:	00216540 	call	21654 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   210fc:	e0bff817 	ldw	r2,-32(fp)
}
   21100:	e037883a 	mov	sp,fp
   21104:	dfc00117 	ldw	ra,4(sp)
   21108:	df000017 	ldw	fp,0(sp)
   2110c:	dec00204 	addi	sp,sp,8
   21110:	f800283a 	ret

00021114 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   21114:	defff404 	addi	sp,sp,-48
   21118:	dfc00b15 	stw	ra,44(sp)
   2111c:	df000a15 	stw	fp,40(sp)
   21120:	df000a04 	addi	fp,sp,40
   21124:	e13ffb15 	stw	r4,-20(fp)
   21128:	e17ffc15 	stw	r5,-16(fp)
   2112c:	e1bffd15 	stw	r6,-12(fp)
   21130:	3807883a 	mov	r3,r7
   21134:	e0800217 	ldw	r2,8(fp)
   21138:	e0fffe05 	stb	r3,-8(fp)
   2113c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21140:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   21144:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   21148:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2114c:	e0bffd17 	ldw	r2,-12(fp)
   21150:	1000021e 	bne	r2,zero,2115c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21154:	0005883a 	mov	r2,zero
   21158:	00006d06 	br	21310 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2115c:	e0bffe03 	ldbu	r2,-8(fp)
   21160:	10000a1e 	bne	r2,zero,2118c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21164:	e13ffb17 	ldw	r4,-20(fp)
   21168:	001ffc40 	call	1ffc4 <alt_avalon_i2c_enable>
   2116c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21170:	e0bff917 	ldw	r2,-28(fp)
   21174:	10000226 	beq	r2,zero,21180 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   21178:	e0bff917 	ldw	r2,-28(fp)
   2117c:	00006406 	br	21310 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21180:	01400704 	movi	r5,28
   21184:	e13ffb17 	ldw	r4,-20(fp)
   21188:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2118c:	e0bffe03 	ldbu	r2,-8(fp)
   21190:	100d883a 	mov	r6,r2
   21194:	01400044 	movi	r5,1
   21198:	e13ffb17 	ldw	r4,-20(fp)
   2119c:	002062c0 	call	2062c <alt_avalon_i2c_send_address>
   211a0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   211a4:	e0bff917 	ldw	r2,-28(fp)
   211a8:	1000341e 	bne	r2,zero,2127c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   211ac:	00001906 	br	21214 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   211b0:	000f883a 	mov	r7,zero
   211b4:	000d883a 	mov	r6,zero
   211b8:	000b883a 	mov	r5,zero
   211bc:	e13ffb17 	ldw	r4,-20(fp)
   211c0:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   211c4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   211c8:	e0bff817 	ldw	r2,-32(fp)
   211cc:	10800044 	addi	r2,r2,1
   211d0:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   211d4:	e0bff917 	ldw	r2,-28(fp)
   211d8:	10000e1e 	bne	r2,zero,21214 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   211dc:	e0bffa04 	addi	r2,fp,-24
   211e0:	100f883a 	mov	r7,r2
   211e4:	000d883a 	mov	r6,zero
   211e8:	e17ffc17 	ldw	r5,-16(fp)
   211ec:	e13ffb17 	ldw	r4,-20(fp)
   211f0:	00203f80 	call	203f8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   211f4:	e0bffa17 	ldw	r2,-24(fp)
   211f8:	e0fffc17 	ldw	r3,-16(fp)
   211fc:	1885883a 	add	r2,r3,r2
   21200:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   21204:	e0bffa17 	ldw	r2,-24(fp)
   21208:	e0fff717 	ldw	r3,-36(fp)
   2120c:	1885883a 	add	r2,r3,r2
   21210:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21214:	e0bffd17 	ldw	r2,-12(fp)
   21218:	10bfffc4 	addi	r2,r2,-1
   2121c:	e0fff817 	ldw	r3,-32(fp)
   21220:	1880022e 	bgeu	r3,r2,2122c <alt_avalon_i2c_master_receive+0x118>
   21224:	e0bff917 	ldw	r2,-28(fp)
   21228:	103fe126 	beq	r2,zero,211b0 <__alt_data_end+0xfc0211b0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2122c:	e0bff917 	ldw	r2,-28(fp)
   21230:	1000121e 	bne	r2,zero,2127c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21234:	e0bfff03 	ldbu	r2,-4(fp)
   21238:	100f883a 	mov	r7,r2
   2123c:	000d883a 	mov	r6,zero
   21240:	000b883a 	mov	r5,zero
   21244:	e13ffb17 	ldw	r4,-20(fp)
   21248:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   2124c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21250:	00000a06 	br	2127c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   21254:	e17ffc17 	ldw	r5,-16(fp)
   21258:	e13ffb17 	ldw	r4,-20(fp)
   2125c:	00204a00 	call	204a0 <alt_avalon_i2c_rx_read>
   21260:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   21264:	e0bffc17 	ldw	r2,-16(fp)
   21268:	10800044 	addi	r2,r2,1
   2126c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   21270:	e0bff717 	ldw	r2,-36(fp)
   21274:	10800044 	addi	r2,r2,1
   21278:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2127c:	e0fff717 	ldw	r3,-36(fp)
   21280:	e0bffd17 	ldw	r2,-12(fp)
   21284:	1880022e 	bgeu	r3,r2,21290 <alt_avalon_i2c_master_receive+0x17c>
   21288:	e0bff917 	ldw	r2,-28(fp)
   2128c:	103ff126 	beq	r2,zero,21254 <__alt_data_end+0xfc021254>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21290:	e0bfff03 	ldbu	r2,-4(fp)
   21294:	1000021e 	bne	r2,zero,212a0 <alt_avalon_i2c_master_receive+0x18c>
   21298:	e0bff917 	ldw	r2,-28(fp)
   2129c:	10001b26 	beq	r2,zero,2130c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   212a0:	0149c404 	movi	r5,10000
   212a4:	e13ffd17 	ldw	r4,-12(fp)
   212a8:	000cf040 	call	cf04 <__mulsi3>
   212ac:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   212b0:	00000d06 	br	212e8 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   212b4:	e0bff617 	ldw	r2,-40(fp)
   212b8:	108002a8 	cmpgeui	r2,r2,10
   212bc:	1000021e 	bne	r2,zero,212c8 <alt_avalon_i2c_master_receive+0x1b4>
   212c0:	0109c404 	movi	r4,10000
   212c4:	00226e40 	call	226e4 <alt_busy_sleep>
            if (--timeout == 0)
   212c8:	e0bff617 	ldw	r2,-40(fp)
   212cc:	10bfffc4 	addi	r2,r2,-1
   212d0:	e0bff615 	stw	r2,-40(fp)
   212d4:	e0bff617 	ldw	r2,-40(fp)
   212d8:	1000031e 	bne	r2,zero,212e8 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   212dc:	00bfff84 	movi	r2,-2
   212e0:	e0bff915 	stw	r2,-28(fp)
               break;
   212e4:	00000306 	br	212f4 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   212e8:	e13ffb17 	ldw	r4,-20(fp)
   212ec:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   212f0:	103ff01e 	bne	r2,zero,212b4 <__alt_data_end+0xfc0212b4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   212f4:	e0bff904 	addi	r2,fp,-28
   212f8:	100b883a 	mov	r5,r2
   212fc:	e13ffb17 	ldw	r4,-20(fp)
   21300:	00207880 	call	20788 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21304:	e13ffb17 	ldw	r4,-20(fp)
   21308:	002005c0 	call	2005c <alt_avalon_i2c_disable>
    }

    return status;
   2130c:	e0bff917 	ldw	r2,-28(fp)
}
   21310:	e037883a 	mov	sp,fp
   21314:	dfc00117 	ldw	ra,4(sp)
   21318:	df000017 	ldw	fp,0(sp)
   2131c:	dec00204 	addi	sp,sp,8
   21320:	f800283a 	ret

00021324 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   21324:	defff504 	addi	sp,sp,-44
   21328:	dfc00a15 	stw	ra,40(sp)
   2132c:	df000915 	stw	fp,36(sp)
   21330:	df000904 	addi	fp,sp,36
   21334:	e13ffb15 	stw	r4,-20(fp)
   21338:	e17ffc15 	stw	r5,-16(fp)
   2133c:	e1bffd15 	stw	r6,-12(fp)
   21340:	3807883a 	mov	r3,r7
   21344:	e0800217 	ldw	r2,8(fp)
   21348:	e0fffe05 	stb	r3,-8(fp)
   2134c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21350:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21354:	e0bffb17 	ldw	r2,-20(fp)
   21358:	10800717 	ldw	r2,28(r2)
   2135c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   21360:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   21364:	e0bffd17 	ldw	r2,-12(fp)
   21368:	1000021e 	bne	r2,zero,21374 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2136c:	0005883a 	mov	r2,zero
   21370:	00006306 	br	21500 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21374:	e0bffb17 	ldw	r2,-20(fp)
   21378:	10c00617 	ldw	r3,24(r2)
   2137c:	008000b4 	movhi	r2,2
   21380:	10bf1204 	addi	r2,r2,-952
   21384:	18800226 	beq	r3,r2,21390 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21388:	00bfff44 	movi	r2,-3
   2138c:	00005c06 	br	21500 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21390:	e0bffe03 	ldbu	r2,-8(fp)
   21394:	10000a1e 	bne	r2,zero,213c0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21398:	e13ffb17 	ldw	r4,-20(fp)
   2139c:	001ffc40 	call	1ffc4 <alt_avalon_i2c_enable>
   213a0:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   213a4:	e0bff717 	ldw	r2,-36(fp)
   213a8:	10000226 	beq	r2,zero,213b4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   213ac:	e0bff717 	ldw	r2,-36(fp)
   213b0:	00005306 	br	21500 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   213b4:	01400704 	movi	r5,28
   213b8:	e13ffb17 	ldw	r4,-20(fp)
   213bc:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   213c0:	e0bffe03 	ldbu	r2,-8(fp)
   213c4:	100d883a 	mov	r6,r2
   213c8:	01400044 	movi	r5,1
   213cc:	e13ffb17 	ldw	r4,-20(fp)
   213d0:	002062c0 	call	2062c <alt_avalon_i2c_send_address>
   213d4:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   213d8:	e0bff717 	ldw	r2,-36(fp)
   213dc:	1000191e 	bne	r2,zero,21444 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   213e0:	00000906 	br	21408 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   213e4:	000f883a 	mov	r7,zero
   213e8:	000d883a 	mov	r6,zero
   213ec:	000b883a 	mov	r5,zero
   213f0:	e13ffb17 	ldw	r4,-20(fp)
   213f4:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   213f8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   213fc:	e0bff917 	ldw	r2,-28(fp)
   21400:	10800044 	addi	r2,r2,1
   21404:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21408:	e0bffd17 	ldw	r2,-12(fp)
   2140c:	10bfffc4 	addi	r2,r2,-1
   21410:	e0fff917 	ldw	r3,-28(fp)
   21414:	1880022e 	bgeu	r3,r2,21420 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   21418:	e0bff717 	ldw	r2,-36(fp)
   2141c:	103ff126 	beq	r2,zero,213e4 <__alt_data_end+0xfc0213e4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21420:	e0bff717 	ldw	r2,-36(fp)
   21424:	1000071e 	bne	r2,zero,21444 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21428:	e0bfff03 	ldbu	r2,-4(fp)
   2142c:	100f883a 	mov	r7,r2
   21430:	000d883a 	mov	r6,zero
   21434:	000b883a 	mov	r5,zero
   21438:	e13ffb17 	ldw	r4,-20(fp)
   2143c:	00205480 	call	20548 <alt_avalon_i2c_cmd_write>
   21440:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   21444:	e0bff717 	ldw	r2,-36(fp)
   21448:	10001826 	beq	r2,zero,214ac <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   2144c:	0149c404 	movi	r5,10000
   21450:	e13ffd17 	ldw	r4,-12(fp)
   21454:	000cf040 	call	cf04 <__mulsi3>
   21458:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2145c:	00000d06 	br	21494 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21460:	e0bff817 	ldw	r2,-32(fp)
   21464:	108002a8 	cmpgeui	r2,r2,10
   21468:	1000021e 	bne	r2,zero,21474 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2146c:	0109c404 	movi	r4,10000
   21470:	00226e40 	call	226e4 <alt_busy_sleep>
            if (--timeout == 0)
   21474:	e0bff817 	ldw	r2,-32(fp)
   21478:	10bfffc4 	addi	r2,r2,-1
   2147c:	e0bff815 	stw	r2,-32(fp)
   21480:	e0bff817 	ldw	r2,-32(fp)
   21484:	1000031e 	bne	r2,zero,21494 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21488:	00bfff84 	movi	r2,-2
   2148c:	e0bff715 	stw	r2,-36(fp)
               break;
   21490:	00000306 	br	214a0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21494:	e13ffb17 	ldw	r4,-20(fp)
   21498:	00203b40 	call	203b4 <alt_avalon_i2c_is_busy>
   2149c:	103ff01e 	bne	r2,zero,21460 <__alt_data_end+0xfc021460>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   214a0:	e13ffb17 	ldw	r4,-20(fp)
   214a4:	002005c0 	call	2005c <alt_avalon_i2c_disable>
   214a8:	00001406 	br	214fc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   214ac:	e0bfff03 	ldbu	r2,-4(fp)
   214b0:	10001226 	beq	r2,zero,214fc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   214b4:	01400704 	movi	r5,28
   214b8:	e13ffb17 	ldw	r4,-20(fp)
   214bc:	00215b00 	call	215b0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   214c0:	000b883a 	mov	r5,zero
   214c4:	e13ffb17 	ldw	r4,-20(fp)
   214c8:	00217480 	call	21748 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   214cc:	e0bffa17 	ldw	r2,-24(fp)
   214d0:	00c00084 	movi	r3,2
   214d4:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   214d8:	e0bffa17 	ldw	r2,-24(fp)
   214dc:	e0fffc17 	ldw	r3,-16(fp)
   214e0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   214e4:	e0bffa17 	ldw	r2,-24(fp)
   214e8:	e0fffd17 	ldw	r3,-12(fp)
   214ec:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   214f0:	01400084 	movi	r5,2
   214f4:	e13ffb17 	ldw	r4,-20(fp)
   214f8:	00216540 	call	21654 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   214fc:	e0bff717 	ldw	r2,-36(fp)
}
   21500:	e037883a 	mov	sp,fp
   21504:	dfc00117 	ldw	ra,4(sp)
   21508:	df000017 	ldw	fp,0(sp)
   2150c:	dec00204 	addi	sp,sp,8
   21510:	f800283a 	ret

00021514 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   21514:	defffd04 	addi	sp,sp,-12
   21518:	df000215 	stw	fp,8(sp)
   2151c:	df000204 	addi	fp,sp,8
   21520:	e13ffe15 	stw	r4,-8(fp)
   21524:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   21528:	e0bffe17 	ldw	r2,-8(fp)
   2152c:	10800317 	ldw	r2,12(r2)
   21530:	10800404 	addi	r2,r2,16
   21534:	10c00037 	ldwio	r3,0(r2)
   21538:	e0bffe17 	ldw	r2,-8(fp)
   2153c:	10800317 	ldw	r2,12(r2)
   21540:	10800304 	addi	r2,r2,12
   21544:	10800037 	ldwio	r2,0(r2)
   21548:	1884703a 	and	r2,r3,r2
   2154c:	1007883a 	mov	r3,r2
   21550:	e0bfff17 	ldw	r2,-4(fp)
   21554:	10c00015 	stw	r3,0(r2)
}
   21558:	0001883a 	nop
   2155c:	e037883a 	mov	sp,fp
   21560:	df000017 	ldw	fp,0(sp)
   21564:	dec00104 	addi	sp,sp,4
   21568:	f800283a 	ret

0002156c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2156c:	defffd04 	addi	sp,sp,-12
   21570:	df000215 	stw	fp,8(sp)
   21574:	df000204 	addi	fp,sp,8
   21578:	e13ffe15 	stw	r4,-8(fp)
   2157c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21580:	e0bffe17 	ldw	r2,-8(fp)
   21584:	10800317 	ldw	r2,12(r2)
   21588:	10800404 	addi	r2,r2,16
   2158c:	10800037 	ldwio	r2,0(r2)
   21590:	1007883a 	mov	r3,r2
   21594:	e0bfff17 	ldw	r2,-4(fp)
   21598:	10c00015 	stw	r3,0(r2)
}
   2159c:	0001883a 	nop
   215a0:	e037883a 	mov	sp,fp
   215a4:	df000017 	ldw	fp,0(sp)
   215a8:	dec00104 	addi	sp,sp,4
   215ac:	f800283a 	ret

000215b0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   215b0:	defffd04 	addi	sp,sp,-12
   215b4:	df000215 	stw	fp,8(sp)
   215b8:	df000204 	addi	fp,sp,8
   215bc:	e13ffe15 	stw	r4,-8(fp)
   215c0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   215c4:	e0bffe17 	ldw	r2,-8(fp)
   215c8:	10800317 	ldw	r2,12(r2)
   215cc:	10800404 	addi	r2,r2,16
   215d0:	e0ffff17 	ldw	r3,-4(fp)
   215d4:	10c00035 	stwio	r3,0(r2)
}
   215d8:	0001883a 	nop
   215dc:	e037883a 	mov	sp,fp
   215e0:	df000017 	ldw	fp,0(sp)
   215e4:	dec00104 	addi	sp,sp,4
   215e8:	f800283a 	ret

000215ec <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   215ec:	defffb04 	addi	sp,sp,-20
   215f0:	dfc00415 	stw	ra,16(sp)
   215f4:	df000315 	stw	fp,12(sp)
   215f8:	df000304 	addi	fp,sp,12
   215fc:	e13ffe15 	stw	r4,-8(fp)
   21600:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21604:	e17ffd04 	addi	r5,fp,-12
   21608:	e13ffe17 	ldw	r4,-8(fp)
   2160c:	00216b80 	call	216b8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   21610:	e0bfff17 	ldw	r2,-4(fp)
   21614:	0086303a 	nor	r3,zero,r2
   21618:	e0bffd17 	ldw	r2,-12(fp)
   2161c:	1884703a 	and	r2,r3,r2
   21620:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21624:	e0bffe17 	ldw	r2,-8(fp)
   21628:	10800317 	ldw	r2,12(r2)
   2162c:	10800304 	addi	r2,r2,12
   21630:	e0fffd17 	ldw	r3,-12(fp)
   21634:	18c007cc 	andi	r3,r3,31
   21638:	10c00035 	stwio	r3,0(r2)
}
   2163c:	0001883a 	nop
   21640:	e037883a 	mov	sp,fp
   21644:	dfc00117 	ldw	ra,4(sp)
   21648:	df000017 	ldw	fp,0(sp)
   2164c:	dec00204 	addi	sp,sp,8
   21650:	f800283a 	ret

00021654 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21654:	defffb04 	addi	sp,sp,-20
   21658:	dfc00415 	stw	ra,16(sp)
   2165c:	df000315 	stw	fp,12(sp)
   21660:	df000304 	addi	fp,sp,12
   21664:	e13ffe15 	stw	r4,-8(fp)
   21668:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2166c:	e17ffd04 	addi	r5,fp,-12
   21670:	e13ffe17 	ldw	r4,-8(fp)
   21674:	00216b80 	call	216b8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21678:	e0fffd17 	ldw	r3,-12(fp)
   2167c:	e0bfff17 	ldw	r2,-4(fp)
   21680:	1884b03a 	or	r2,r3,r2
   21684:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21688:	e0bffe17 	ldw	r2,-8(fp)
   2168c:	10800317 	ldw	r2,12(r2)
   21690:	10800304 	addi	r2,r2,12
   21694:	e0fffd17 	ldw	r3,-12(fp)
   21698:	18c007cc 	andi	r3,r3,31
   2169c:	10c00035 	stwio	r3,0(r2)
}
   216a0:	0001883a 	nop
   216a4:	e037883a 	mov	sp,fp
   216a8:	dfc00117 	ldw	ra,4(sp)
   216ac:	df000017 	ldw	fp,0(sp)
   216b0:	dec00204 	addi	sp,sp,8
   216b4:	f800283a 	ret

000216b8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   216b8:	defffd04 	addi	sp,sp,-12
   216bc:	df000215 	stw	fp,8(sp)
   216c0:	df000204 	addi	fp,sp,8
   216c4:	e13ffe15 	stw	r4,-8(fp)
   216c8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   216cc:	e0bffe17 	ldw	r2,-8(fp)
   216d0:	10800317 	ldw	r2,12(r2)
   216d4:	10800304 	addi	r2,r2,12
   216d8:	10800037 	ldwio	r2,0(r2)
   216dc:	10c007cc 	andi	r3,r2,31
   216e0:	e0bfff17 	ldw	r2,-4(fp)
   216e4:	10c00015 	stw	r3,0(r2)
}
   216e8:	0001883a 	nop
   216ec:	e037883a 	mov	sp,fp
   216f0:	df000017 	ldw	fp,0(sp)
   216f4:	dec00104 	addi	sp,sp,4
   216f8:	f800283a 	ret

000216fc <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   216fc:	defffd04 	addi	sp,sp,-12
   21700:	df000215 	stw	fp,8(sp)
   21704:	df000204 	addi	fp,sp,8
   21708:	e13ffe15 	stw	r4,-8(fp)
   2170c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   21710:	e0bffe17 	ldw	r2,-8(fp)
   21714:	10800317 	ldw	r2,12(r2)
   21718:	10800204 	addi	r2,r2,8
   2171c:	10800037 	ldwio	r2,0(r2)
   21720:	10800c0c 	andi	r2,r2,48
   21724:	1005d13a 	srai	r2,r2,4
   21728:	1007883a 	mov	r3,r2
   2172c:	e0bfff17 	ldw	r2,-4(fp)
   21730:	10c00015 	stw	r3,0(r2)
}
   21734:	0001883a 	nop
   21738:	e037883a 	mov	sp,fp
   2173c:	df000017 	ldw	fp,0(sp)
   21740:	dec00104 	addi	sp,sp,4
   21744:	f800283a 	ret

00021748 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   21748:	defffd04 	addi	sp,sp,-12
   2174c:	df000215 	stw	fp,8(sp)
   21750:	df000204 	addi	fp,sp,8
   21754:	e13ffe15 	stw	r4,-8(fp)
   21758:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2175c:	e0bffe17 	ldw	r2,-8(fp)
   21760:	10800317 	ldw	r2,12(r2)
   21764:	10800204 	addi	r2,r2,8
   21768:	e0fffe17 	ldw	r3,-8(fp)
   2176c:	18c00317 	ldw	r3,12(r3)
   21770:	18c00204 	addi	r3,r3,8
   21774:	18c00037 	ldwio	r3,0(r3)
   21778:	1809883a 	mov	r4,r3
   2177c:	00fff3c4 	movi	r3,-49
   21780:	20c8703a 	and	r4,r4,r3
   21784:	e0ffff17 	ldw	r3,-4(fp)
   21788:	1806913a 	slli	r3,r3,4
   2178c:	18c00c0c 	andi	r3,r3,48
   21790:	20c6b03a 	or	r3,r4,r3
   21794:	10c00035 	stwio	r3,0(r2)
}
   21798:	0001883a 	nop
   2179c:	e037883a 	mov	sp,fp
   217a0:	df000017 	ldw	fp,0(sp)
   217a4:	dec00104 	addi	sp,sp,4
   217a8:	f800283a 	ret

000217ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   217ac:	defffd04 	addi	sp,sp,-12
   217b0:	df000215 	stw	fp,8(sp)
   217b4:	df000204 	addi	fp,sp,8
   217b8:	e13ffe15 	stw	r4,-8(fp)
   217bc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   217c0:	e0bffe17 	ldw	r2,-8(fp)
   217c4:	10800317 	ldw	r2,12(r2)
   217c8:	10800204 	addi	r2,r2,8
   217cc:	10800037 	ldwio	r2,0(r2)
   217d0:	1080030c 	andi	r2,r2,12
   217d4:	1005d0ba 	srai	r2,r2,2
   217d8:	1007883a 	mov	r3,r2
   217dc:	e0bfff17 	ldw	r2,-4(fp)
   217e0:	10c00015 	stw	r3,0(r2)
}
   217e4:	0001883a 	nop
   217e8:	e037883a 	mov	sp,fp
   217ec:	df000017 	ldw	fp,0(sp)
   217f0:	dec00104 	addi	sp,sp,4
   217f4:	f800283a 	ret

000217f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   217f8:	defffd04 	addi	sp,sp,-12
   217fc:	df000215 	stw	fp,8(sp)
   21800:	df000204 	addi	fp,sp,8
   21804:	e13ffe15 	stw	r4,-8(fp)
   21808:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2180c:	e0bffe17 	ldw	r2,-8(fp)
   21810:	10800317 	ldw	r2,12(r2)
   21814:	10c00204 	addi	r3,r2,8
   21818:	e0bffe17 	ldw	r2,-8(fp)
   2181c:	10800317 	ldw	r2,12(r2)
   21820:	10800204 	addi	r2,r2,8
   21824:	10800037 	ldwio	r2,0(r2)
   21828:	1009883a 	mov	r4,r2
   2182c:	00bffcc4 	movi	r2,-13
   21830:	2088703a 	and	r4,r4,r2
   21834:	e0bfff17 	ldw	r2,-4(fp)
   21838:	1085883a 	add	r2,r2,r2
   2183c:	1085883a 	add	r2,r2,r2
   21840:	1080030c 	andi	r2,r2,12
   21844:	2084b03a 	or	r2,r4,r2
   21848:	18800035 	stwio	r2,0(r3)
}
   2184c:	0001883a 	nop
   21850:	e037883a 	mov	sp,fp
   21854:	df000017 	ldw	fp,0(sp)
   21858:	dec00104 	addi	sp,sp,4
   2185c:	f800283a 	ret

00021860 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21860:	defffa04 	addi	sp,sp,-24
   21864:	dfc00515 	stw	ra,20(sp)
   21868:	df000415 	stw	fp,16(sp)
   2186c:	df000404 	addi	fp,sp,16
   21870:	e13ffd15 	stw	r4,-12(fp)
   21874:	e17ffe15 	stw	r5,-8(fp)
   21878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2187c:	e0bffd17 	ldw	r2,-12(fp)
   21880:	10800017 	ldw	r2,0(r2)
   21884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21888:	e0bffc17 	ldw	r2,-16(fp)
   2188c:	10c00a04 	addi	r3,r2,40
   21890:	e0bffd17 	ldw	r2,-12(fp)
   21894:	10800217 	ldw	r2,8(r2)
   21898:	100f883a 	mov	r7,r2
   2189c:	e1bfff17 	ldw	r6,-4(fp)
   218a0:	e17ffe17 	ldw	r5,-8(fp)
   218a4:	1809883a 	mov	r4,r3
   218a8:	0021e880 	call	21e88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   218ac:	e037883a 	mov	sp,fp
   218b0:	dfc00117 	ldw	ra,4(sp)
   218b4:	df000017 	ldw	fp,0(sp)
   218b8:	dec00204 	addi	sp,sp,8
   218bc:	f800283a 	ret

000218c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   218c0:	defffa04 	addi	sp,sp,-24
   218c4:	dfc00515 	stw	ra,20(sp)
   218c8:	df000415 	stw	fp,16(sp)
   218cc:	df000404 	addi	fp,sp,16
   218d0:	e13ffd15 	stw	r4,-12(fp)
   218d4:	e17ffe15 	stw	r5,-8(fp)
   218d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   218dc:	e0bffd17 	ldw	r2,-12(fp)
   218e0:	10800017 	ldw	r2,0(r2)
   218e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   218e8:	e0bffc17 	ldw	r2,-16(fp)
   218ec:	10c00a04 	addi	r3,r2,40
   218f0:	e0bffd17 	ldw	r2,-12(fp)
   218f4:	10800217 	ldw	r2,8(r2)
   218f8:	100f883a 	mov	r7,r2
   218fc:	e1bfff17 	ldw	r6,-4(fp)
   21900:	e17ffe17 	ldw	r5,-8(fp)
   21904:	1809883a 	mov	r4,r3
   21908:	00220a40 	call	220a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2190c:	e037883a 	mov	sp,fp
   21910:	dfc00117 	ldw	ra,4(sp)
   21914:	df000017 	ldw	fp,0(sp)
   21918:	dec00204 	addi	sp,sp,8
   2191c:	f800283a 	ret

00021920 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21920:	defffc04 	addi	sp,sp,-16
   21924:	dfc00315 	stw	ra,12(sp)
   21928:	df000215 	stw	fp,8(sp)
   2192c:	df000204 	addi	fp,sp,8
   21930:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21934:	e0bfff17 	ldw	r2,-4(fp)
   21938:	10800017 	ldw	r2,0(r2)
   2193c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21940:	e0bffe17 	ldw	r2,-8(fp)
   21944:	10c00a04 	addi	r3,r2,40
   21948:	e0bfff17 	ldw	r2,-4(fp)
   2194c:	10800217 	ldw	r2,8(r2)
   21950:	100b883a 	mov	r5,r2
   21954:	1809883a 	mov	r4,r3
   21958:	0021d300 	call	21d30 <altera_avalon_jtag_uart_close>
}
   2195c:	e037883a 	mov	sp,fp
   21960:	dfc00117 	ldw	ra,4(sp)
   21964:	df000017 	ldw	fp,0(sp)
   21968:	dec00204 	addi	sp,sp,8
   2196c:	f800283a 	ret

00021970 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21970:	defffa04 	addi	sp,sp,-24
   21974:	dfc00515 	stw	ra,20(sp)
   21978:	df000415 	stw	fp,16(sp)
   2197c:	df000404 	addi	fp,sp,16
   21980:	e13ffd15 	stw	r4,-12(fp)
   21984:	e17ffe15 	stw	r5,-8(fp)
   21988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2198c:	e0bffd17 	ldw	r2,-12(fp)
   21990:	10800017 	ldw	r2,0(r2)
   21994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21998:	e0bffc17 	ldw	r2,-16(fp)
   2199c:	10800a04 	addi	r2,r2,40
   219a0:	e1bfff17 	ldw	r6,-4(fp)
   219a4:	e17ffe17 	ldw	r5,-8(fp)
   219a8:	1009883a 	mov	r4,r2
   219ac:	0021d980 	call	21d98 <altera_avalon_jtag_uart_ioctl>
}
   219b0:	e037883a 	mov	sp,fp
   219b4:	dfc00117 	ldw	ra,4(sp)
   219b8:	df000017 	ldw	fp,0(sp)
   219bc:	dec00204 	addi	sp,sp,8
   219c0:	f800283a 	ret

000219c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   219c4:	defffa04 	addi	sp,sp,-24
   219c8:	dfc00515 	stw	ra,20(sp)
   219cc:	df000415 	stw	fp,16(sp)
   219d0:	df000404 	addi	fp,sp,16
   219d4:	e13ffd15 	stw	r4,-12(fp)
   219d8:	e17ffe15 	stw	r5,-8(fp)
   219dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   219e0:	e0bffd17 	ldw	r2,-12(fp)
   219e4:	00c00044 	movi	r3,1
   219e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   219ec:	e0bffd17 	ldw	r2,-12(fp)
   219f0:	10800017 	ldw	r2,0(r2)
   219f4:	10800104 	addi	r2,r2,4
   219f8:	1007883a 	mov	r3,r2
   219fc:	e0bffd17 	ldw	r2,-12(fp)
   21a00:	10800817 	ldw	r2,32(r2)
   21a04:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   21a08:	e0bffe17 	ldw	r2,-8(fp)
   21a0c:	e0ffff17 	ldw	r3,-4(fp)
   21a10:	d8000015 	stw	zero,0(sp)
   21a14:	e1fffd17 	ldw	r7,-12(fp)
   21a18:	018000b4 	movhi	r6,2
   21a1c:	3186a104 	addi	r6,r6,6788
   21a20:	180b883a 	mov	r5,r3
   21a24:	1009883a 	mov	r4,r2
   21a28:	0022aac0 	call	22aac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21a2c:	e0bffd17 	ldw	r2,-12(fp)
   21a30:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21a34:	e0bffd17 	ldw	r2,-12(fp)
   21a38:	10800204 	addi	r2,r2,8
   21a3c:	d0f24b17 	ldw	r3,-14036(gp)
   21a40:	e1fffd17 	ldw	r7,-12(fp)
   21a44:	018000b4 	movhi	r6,2
   21a48:	31872404 	addi	r6,r6,7312
   21a4c:	180b883a 	mov	r5,r3
   21a50:	1009883a 	mov	r4,r2
   21a54:	00225b80 	call	225b8 <alt_alarm_start>
   21a58:	1000040e 	bge	r2,zero,21a6c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21a5c:	e0fffd17 	ldw	r3,-12(fp)
   21a60:	00a00034 	movhi	r2,32768
   21a64:	10bfffc4 	addi	r2,r2,-1
   21a68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21a6c:	0001883a 	nop
   21a70:	e037883a 	mov	sp,fp
   21a74:	dfc00117 	ldw	ra,4(sp)
   21a78:	df000017 	ldw	fp,0(sp)
   21a7c:	dec00204 	addi	sp,sp,8
   21a80:	f800283a 	ret

00021a84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21a84:	defff804 	addi	sp,sp,-32
   21a88:	df000715 	stw	fp,28(sp)
   21a8c:	df000704 	addi	fp,sp,28
   21a90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21a94:	e0bfff17 	ldw	r2,-4(fp)
   21a98:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21a9c:	e0bffb17 	ldw	r2,-20(fp)
   21aa0:	10800017 	ldw	r2,0(r2)
   21aa4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21aa8:	e0bffc17 	ldw	r2,-16(fp)
   21aac:	10800104 	addi	r2,r2,4
   21ab0:	10800037 	ldwio	r2,0(r2)
   21ab4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21ab8:	e0bffd17 	ldw	r2,-12(fp)
   21abc:	1080c00c 	andi	r2,r2,768
   21ac0:	10006d26 	beq	r2,zero,21c78 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21ac4:	e0bffd17 	ldw	r2,-12(fp)
   21ac8:	1080400c 	andi	r2,r2,256
   21acc:	10003526 	beq	r2,zero,21ba4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21ad0:	00800074 	movhi	r2,1
   21ad4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21ad8:	e0bffb17 	ldw	r2,-20(fp)
   21adc:	10800a17 	ldw	r2,40(r2)
   21ae0:	10800044 	addi	r2,r2,1
   21ae4:	1081ffcc 	andi	r2,r2,2047
   21ae8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21aec:	e0bffb17 	ldw	r2,-20(fp)
   21af0:	10c00b17 	ldw	r3,44(r2)
   21af4:	e0bffe17 	ldw	r2,-8(fp)
   21af8:	18801526 	beq	r3,r2,21b50 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21afc:	e0bffc17 	ldw	r2,-16(fp)
   21b00:	10800037 	ldwio	r2,0(r2)
   21b04:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21b08:	e0bff917 	ldw	r2,-28(fp)
   21b0c:	10a0000c 	andi	r2,r2,32768
   21b10:	10001126 	beq	r2,zero,21b58 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21b14:	e0bffb17 	ldw	r2,-20(fp)
   21b18:	10800a17 	ldw	r2,40(r2)
   21b1c:	e0fff917 	ldw	r3,-28(fp)
   21b20:	1809883a 	mov	r4,r3
   21b24:	e0fffb17 	ldw	r3,-20(fp)
   21b28:	1885883a 	add	r2,r3,r2
   21b2c:	10800e04 	addi	r2,r2,56
   21b30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21b34:	e0bffb17 	ldw	r2,-20(fp)
   21b38:	10800a17 	ldw	r2,40(r2)
   21b3c:	10800044 	addi	r2,r2,1
   21b40:	10c1ffcc 	andi	r3,r2,2047
   21b44:	e0bffb17 	ldw	r2,-20(fp)
   21b48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   21b4c:	003fe206 	br	21ad8 <__alt_data_end+0xfc021ad8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   21b50:	0001883a 	nop
   21b54:	00000106 	br	21b5c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21b58:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21b5c:	e0bff917 	ldw	r2,-28(fp)
   21b60:	10bfffec 	andhi	r2,r2,65535
   21b64:	10000f26 	beq	r2,zero,21ba4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21b68:	e0bffb17 	ldw	r2,-20(fp)
   21b6c:	10c00817 	ldw	r3,32(r2)
   21b70:	00bfff84 	movi	r2,-2
   21b74:	1886703a 	and	r3,r3,r2
   21b78:	e0bffb17 	ldw	r2,-20(fp)
   21b7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21b80:	e0bffc17 	ldw	r2,-16(fp)
   21b84:	10800104 	addi	r2,r2,4
   21b88:	1007883a 	mov	r3,r2
   21b8c:	e0bffb17 	ldw	r2,-20(fp)
   21b90:	10800817 	ldw	r2,32(r2)
   21b94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21b98:	e0bffc17 	ldw	r2,-16(fp)
   21b9c:	10800104 	addi	r2,r2,4
   21ba0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21ba4:	e0bffd17 	ldw	r2,-12(fp)
   21ba8:	1080800c 	andi	r2,r2,512
   21bac:	103fbe26 	beq	r2,zero,21aa8 <__alt_data_end+0xfc021aa8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21bb0:	e0bffd17 	ldw	r2,-12(fp)
   21bb4:	1004d43a 	srli	r2,r2,16
   21bb8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21bbc:	00001406 	br	21c10 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21bc0:	e0bffc17 	ldw	r2,-16(fp)
   21bc4:	e0fffb17 	ldw	r3,-20(fp)
   21bc8:	18c00d17 	ldw	r3,52(r3)
   21bcc:	e13ffb17 	ldw	r4,-20(fp)
   21bd0:	20c7883a 	add	r3,r4,r3
   21bd4:	18c20e04 	addi	r3,r3,2104
   21bd8:	18c00003 	ldbu	r3,0(r3)
   21bdc:	18c03fcc 	andi	r3,r3,255
   21be0:	18c0201c 	xori	r3,r3,128
   21be4:	18ffe004 	addi	r3,r3,-128
   21be8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21bec:	e0bffb17 	ldw	r2,-20(fp)
   21bf0:	10800d17 	ldw	r2,52(r2)
   21bf4:	10800044 	addi	r2,r2,1
   21bf8:	10c1ffcc 	andi	r3,r2,2047
   21bfc:	e0bffb17 	ldw	r2,-20(fp)
   21c00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21c04:	e0bffa17 	ldw	r2,-24(fp)
   21c08:	10bfffc4 	addi	r2,r2,-1
   21c0c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21c10:	e0bffa17 	ldw	r2,-24(fp)
   21c14:	10000526 	beq	r2,zero,21c2c <altera_avalon_jtag_uart_irq+0x1a8>
   21c18:	e0bffb17 	ldw	r2,-20(fp)
   21c1c:	10c00d17 	ldw	r3,52(r2)
   21c20:	e0bffb17 	ldw	r2,-20(fp)
   21c24:	10800c17 	ldw	r2,48(r2)
   21c28:	18bfe51e 	bne	r3,r2,21bc0 <__alt_data_end+0xfc021bc0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21c2c:	e0bffa17 	ldw	r2,-24(fp)
   21c30:	103f9d26 	beq	r2,zero,21aa8 <__alt_data_end+0xfc021aa8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21c34:	e0bffb17 	ldw	r2,-20(fp)
   21c38:	10c00817 	ldw	r3,32(r2)
   21c3c:	00bfff44 	movi	r2,-3
   21c40:	1886703a 	and	r3,r3,r2
   21c44:	e0bffb17 	ldw	r2,-20(fp)
   21c48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21c4c:	e0bffb17 	ldw	r2,-20(fp)
   21c50:	10800017 	ldw	r2,0(r2)
   21c54:	10800104 	addi	r2,r2,4
   21c58:	1007883a 	mov	r3,r2
   21c5c:	e0bffb17 	ldw	r2,-20(fp)
   21c60:	10800817 	ldw	r2,32(r2)
   21c64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21c68:	e0bffc17 	ldw	r2,-16(fp)
   21c6c:	10800104 	addi	r2,r2,4
   21c70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21c74:	003f8c06 	br	21aa8 <__alt_data_end+0xfc021aa8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21c78:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21c7c:	0001883a 	nop
   21c80:	e037883a 	mov	sp,fp
   21c84:	df000017 	ldw	fp,0(sp)
   21c88:	dec00104 	addi	sp,sp,4
   21c8c:	f800283a 	ret

00021c90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21c90:	defff804 	addi	sp,sp,-32
   21c94:	df000715 	stw	fp,28(sp)
   21c98:	df000704 	addi	fp,sp,28
   21c9c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21ca0:	e0bffb17 	ldw	r2,-20(fp)
   21ca4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21ca8:	e0bff917 	ldw	r2,-28(fp)
   21cac:	10800017 	ldw	r2,0(r2)
   21cb0:	10800104 	addi	r2,r2,4
   21cb4:	10800037 	ldwio	r2,0(r2)
   21cb8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21cbc:	e0bffa17 	ldw	r2,-24(fp)
   21cc0:	1081000c 	andi	r2,r2,1024
   21cc4:	10000b26 	beq	r2,zero,21cf4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21cc8:	e0bff917 	ldw	r2,-28(fp)
   21ccc:	10800017 	ldw	r2,0(r2)
   21cd0:	10800104 	addi	r2,r2,4
   21cd4:	1007883a 	mov	r3,r2
   21cd8:	e0bff917 	ldw	r2,-28(fp)
   21cdc:	10800817 	ldw	r2,32(r2)
   21ce0:	10810014 	ori	r2,r2,1024
   21ce4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21ce8:	e0bff917 	ldw	r2,-28(fp)
   21cec:	10000915 	stw	zero,36(r2)
   21cf0:	00000a06 	br	21d1c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21cf4:	e0bff917 	ldw	r2,-28(fp)
   21cf8:	10c00917 	ldw	r3,36(r2)
   21cfc:	00a00034 	movhi	r2,32768
   21d00:	10bfff04 	addi	r2,r2,-4
   21d04:	10c00536 	bltu	r2,r3,21d1c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21d08:	e0bff917 	ldw	r2,-28(fp)
   21d0c:	10800917 	ldw	r2,36(r2)
   21d10:	10c00044 	addi	r3,r2,1
   21d14:	e0bff917 	ldw	r2,-28(fp)
   21d18:	10c00915 	stw	r3,36(r2)
   21d1c:	d0b24b17 	ldw	r2,-14036(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21d20:	e037883a 	mov	sp,fp
   21d24:	df000017 	ldw	fp,0(sp)
   21d28:	dec00104 	addi	sp,sp,4
   21d2c:	f800283a 	ret

00021d30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21d30:	defffd04 	addi	sp,sp,-12
   21d34:	df000215 	stw	fp,8(sp)
   21d38:	df000204 	addi	fp,sp,8
   21d3c:	e13ffe15 	stw	r4,-8(fp)
   21d40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21d44:	00000506 	br	21d5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21d48:	e0bfff17 	ldw	r2,-4(fp)
   21d4c:	1090000c 	andi	r2,r2,16384
   21d50:	10000226 	beq	r2,zero,21d5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21d54:	00bffd44 	movi	r2,-11
   21d58:	00000b06 	br	21d88 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21d5c:	e0bffe17 	ldw	r2,-8(fp)
   21d60:	10c00d17 	ldw	r3,52(r2)
   21d64:	e0bffe17 	ldw	r2,-8(fp)
   21d68:	10800c17 	ldw	r2,48(r2)
   21d6c:	18800526 	beq	r3,r2,21d84 <altera_avalon_jtag_uart_close+0x54>
   21d70:	e0bffe17 	ldw	r2,-8(fp)
   21d74:	10c00917 	ldw	r3,36(r2)
   21d78:	e0bffe17 	ldw	r2,-8(fp)
   21d7c:	10800117 	ldw	r2,4(r2)
   21d80:	18bff136 	bltu	r3,r2,21d48 <__alt_data_end+0xfc021d48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21d84:	0005883a 	mov	r2,zero
}
   21d88:	e037883a 	mov	sp,fp
   21d8c:	df000017 	ldw	fp,0(sp)
   21d90:	dec00104 	addi	sp,sp,4
   21d94:	f800283a 	ret

00021d98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21d98:	defffa04 	addi	sp,sp,-24
   21d9c:	df000515 	stw	fp,20(sp)
   21da0:	df000504 	addi	fp,sp,20
   21da4:	e13ffd15 	stw	r4,-12(fp)
   21da8:	e17ffe15 	stw	r5,-8(fp)
   21dac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21db0:	00bff9c4 	movi	r2,-25
   21db4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21db8:	e0bffe17 	ldw	r2,-8(fp)
   21dbc:	10da8060 	cmpeqi	r3,r2,27137
   21dc0:	1800031e 	bne	r3,zero,21dd0 <altera_avalon_jtag_uart_ioctl+0x38>
   21dc4:	109a80a0 	cmpeqi	r2,r2,27138
   21dc8:	1000181e 	bne	r2,zero,21e2c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21dcc:	00002906 	br	21e74 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21dd0:	e0bffd17 	ldw	r2,-12(fp)
   21dd4:	10c00117 	ldw	r3,4(r2)
   21dd8:	00a00034 	movhi	r2,32768
   21ddc:	10bfffc4 	addi	r2,r2,-1
   21de0:	18802126 	beq	r3,r2,21e68 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21de4:	e0bfff17 	ldw	r2,-4(fp)
   21de8:	10800017 	ldw	r2,0(r2)
   21dec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21df0:	e0bffc17 	ldw	r2,-16(fp)
   21df4:	10800090 	cmplti	r2,r2,2
   21df8:	1000061e 	bne	r2,zero,21e14 <altera_avalon_jtag_uart_ioctl+0x7c>
   21dfc:	e0fffc17 	ldw	r3,-16(fp)
   21e00:	00a00034 	movhi	r2,32768
   21e04:	10bfffc4 	addi	r2,r2,-1
   21e08:	18800226 	beq	r3,r2,21e14 <altera_avalon_jtag_uart_ioctl+0x7c>
   21e0c:	e0bffc17 	ldw	r2,-16(fp)
   21e10:	00000206 	br	21e1c <altera_avalon_jtag_uart_ioctl+0x84>
   21e14:	00a00034 	movhi	r2,32768
   21e18:	10bfff84 	addi	r2,r2,-2
   21e1c:	e0fffd17 	ldw	r3,-12(fp)
   21e20:	18800115 	stw	r2,4(r3)
      rc = 0;
   21e24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21e28:	00000f06 	br	21e68 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   21e2c:	e0bffd17 	ldw	r2,-12(fp)
   21e30:	10c00117 	ldw	r3,4(r2)
   21e34:	00a00034 	movhi	r2,32768
   21e38:	10bfffc4 	addi	r2,r2,-1
   21e3c:	18800c26 	beq	r3,r2,21e70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21e40:	e0bffd17 	ldw	r2,-12(fp)
   21e44:	10c00917 	ldw	r3,36(r2)
   21e48:	e0bffd17 	ldw	r2,-12(fp)
   21e4c:	10800117 	ldw	r2,4(r2)
   21e50:	1885803a 	cmpltu	r2,r3,r2
   21e54:	10c03fcc 	andi	r3,r2,255
   21e58:	e0bfff17 	ldw	r2,-4(fp)
   21e5c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   21e60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21e64:	00000206 	br	21e70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21e68:	0001883a 	nop
   21e6c:	00000106 	br	21e74 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   21e70:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21e74:	e0bffb17 	ldw	r2,-20(fp)
}
   21e78:	e037883a 	mov	sp,fp
   21e7c:	df000017 	ldw	fp,0(sp)
   21e80:	dec00104 	addi	sp,sp,4
   21e84:	f800283a 	ret

00021e88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21e88:	defff304 	addi	sp,sp,-52
   21e8c:	dfc00c15 	stw	ra,48(sp)
   21e90:	df000b15 	stw	fp,44(sp)
   21e94:	df000b04 	addi	fp,sp,44
   21e98:	e13ffc15 	stw	r4,-16(fp)
   21e9c:	e17ffd15 	stw	r5,-12(fp)
   21ea0:	e1bffe15 	stw	r6,-8(fp)
   21ea4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21ea8:	e0bffd17 	ldw	r2,-12(fp)
   21eac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21eb0:	00004706 	br	21fd0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21eb4:	e0bffc17 	ldw	r2,-16(fp)
   21eb8:	10800a17 	ldw	r2,40(r2)
   21ebc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21ec0:	e0bffc17 	ldw	r2,-16(fp)
   21ec4:	10800b17 	ldw	r2,44(r2)
   21ec8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21ecc:	e0fff717 	ldw	r3,-36(fp)
   21ed0:	e0bff817 	ldw	r2,-32(fp)
   21ed4:	18800536 	bltu	r3,r2,21eec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21ed8:	e0fff717 	ldw	r3,-36(fp)
   21edc:	e0bff817 	ldw	r2,-32(fp)
   21ee0:	1885c83a 	sub	r2,r3,r2
   21ee4:	e0bff615 	stw	r2,-40(fp)
   21ee8:	00000406 	br	21efc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   21eec:	00c20004 	movi	r3,2048
   21ef0:	e0bff817 	ldw	r2,-32(fp)
   21ef4:	1885c83a 	sub	r2,r3,r2
   21ef8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21efc:	e0bff617 	ldw	r2,-40(fp)
   21f00:	10001e26 	beq	r2,zero,21f7c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21f04:	e0fffe17 	ldw	r3,-8(fp)
   21f08:	e0bff617 	ldw	r2,-40(fp)
   21f0c:	1880022e 	bgeu	r3,r2,21f18 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21f10:	e0bffe17 	ldw	r2,-8(fp)
   21f14:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21f18:	e0bffc17 	ldw	r2,-16(fp)
   21f1c:	10c00e04 	addi	r3,r2,56
   21f20:	e0bff817 	ldw	r2,-32(fp)
   21f24:	1885883a 	add	r2,r3,r2
   21f28:	e1bff617 	ldw	r6,-40(fp)
   21f2c:	100b883a 	mov	r5,r2
   21f30:	e13ff517 	ldw	r4,-44(fp)
   21f34:	000ecb80 	call	ecb8 <memcpy>
      ptr   += n;
   21f38:	e0fff517 	ldw	r3,-44(fp)
   21f3c:	e0bff617 	ldw	r2,-40(fp)
   21f40:	1885883a 	add	r2,r3,r2
   21f44:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21f48:	e0fffe17 	ldw	r3,-8(fp)
   21f4c:	e0bff617 	ldw	r2,-40(fp)
   21f50:	1885c83a 	sub	r2,r3,r2
   21f54:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21f58:	e0fff817 	ldw	r3,-32(fp)
   21f5c:	e0bff617 	ldw	r2,-40(fp)
   21f60:	1885883a 	add	r2,r3,r2
   21f64:	10c1ffcc 	andi	r3,r2,2047
   21f68:	e0bffc17 	ldw	r2,-16(fp)
   21f6c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21f70:	e0bffe17 	ldw	r2,-8(fp)
   21f74:	00bfcf16 	blt	zero,r2,21eb4 <__alt_data_end+0xfc021eb4>
   21f78:	00000106 	br	21f80 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21f7c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21f80:	e0fff517 	ldw	r3,-44(fp)
   21f84:	e0bffd17 	ldw	r2,-12(fp)
   21f88:	1880141e 	bne	r3,r2,21fdc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21f8c:	e0bfff17 	ldw	r2,-4(fp)
   21f90:	1090000c 	andi	r2,r2,16384
   21f94:	1000131e 	bne	r2,zero,21fe4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21f98:	0001883a 	nop
   21f9c:	e0bffc17 	ldw	r2,-16(fp)
   21fa0:	10c00a17 	ldw	r3,40(r2)
   21fa4:	e0bff717 	ldw	r2,-36(fp)
   21fa8:	1880051e 	bne	r3,r2,21fc0 <altera_avalon_jtag_uart_read+0x138>
   21fac:	e0bffc17 	ldw	r2,-16(fp)
   21fb0:	10c00917 	ldw	r3,36(r2)
   21fb4:	e0bffc17 	ldw	r2,-16(fp)
   21fb8:	10800117 	ldw	r2,4(r2)
   21fbc:	18bff736 	bltu	r3,r2,21f9c <__alt_data_end+0xfc021f9c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21fc0:	e0bffc17 	ldw	r2,-16(fp)
   21fc4:	10c00a17 	ldw	r3,40(r2)
   21fc8:	e0bff717 	ldw	r2,-36(fp)
   21fcc:	18800726 	beq	r3,r2,21fec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21fd0:	e0bffe17 	ldw	r2,-8(fp)
   21fd4:	00bfb716 	blt	zero,r2,21eb4 <__alt_data_end+0xfc021eb4>
   21fd8:	00000506 	br	21ff0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21fdc:	0001883a 	nop
   21fe0:	00000306 	br	21ff0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21fe4:	0001883a 	nop
   21fe8:	00000106 	br	21ff0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21fec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21ff0:	e0fff517 	ldw	r3,-44(fp)
   21ff4:	e0bffd17 	ldw	r2,-12(fp)
   21ff8:	18801826 	beq	r3,r2,2205c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ffc:	0005303a 	rdctl	r2,status
   22000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22004:	e0fffb17 	ldw	r3,-20(fp)
   22008:	00bfff84 	movi	r2,-2
   2200c:	1884703a 	and	r2,r3,r2
   22010:	1001703a 	wrctl	status,r2
  
  return context;
   22014:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22018:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2201c:	e0bffc17 	ldw	r2,-16(fp)
   22020:	10800817 	ldw	r2,32(r2)
   22024:	10c00054 	ori	r3,r2,1
   22028:	e0bffc17 	ldw	r2,-16(fp)
   2202c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22030:	e0bffc17 	ldw	r2,-16(fp)
   22034:	10800017 	ldw	r2,0(r2)
   22038:	10800104 	addi	r2,r2,4
   2203c:	1007883a 	mov	r3,r2
   22040:	e0bffc17 	ldw	r2,-16(fp)
   22044:	10800817 	ldw	r2,32(r2)
   22048:	18800035 	stwio	r2,0(r3)
   2204c:	e0bffa17 	ldw	r2,-24(fp)
   22050:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22054:	e0bff917 	ldw	r2,-28(fp)
   22058:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2205c:	e0fff517 	ldw	r3,-44(fp)
   22060:	e0bffd17 	ldw	r2,-12(fp)
   22064:	18800426 	beq	r3,r2,22078 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   22068:	e0fff517 	ldw	r3,-44(fp)
   2206c:	e0bffd17 	ldw	r2,-12(fp)
   22070:	1885c83a 	sub	r2,r3,r2
   22074:	00000606 	br	22090 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   22078:	e0bfff17 	ldw	r2,-4(fp)
   2207c:	1090000c 	andi	r2,r2,16384
   22080:	10000226 	beq	r2,zero,2208c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   22084:	00bffd44 	movi	r2,-11
   22088:	00000106 	br	22090 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2208c:	00bffec4 	movi	r2,-5
}
   22090:	e037883a 	mov	sp,fp
   22094:	dfc00117 	ldw	ra,4(sp)
   22098:	df000017 	ldw	fp,0(sp)
   2209c:	dec00204 	addi	sp,sp,8
   220a0:	f800283a 	ret

000220a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   220a4:	defff304 	addi	sp,sp,-52
   220a8:	dfc00c15 	stw	ra,48(sp)
   220ac:	df000b15 	stw	fp,44(sp)
   220b0:	df000b04 	addi	fp,sp,44
   220b4:	e13ffc15 	stw	r4,-16(fp)
   220b8:	e17ffd15 	stw	r5,-12(fp)
   220bc:	e1bffe15 	stw	r6,-8(fp)
   220c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   220c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   220c8:	e0bffd17 	ldw	r2,-12(fp)
   220cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   220d0:	00003706 	br	221b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   220d4:	e0bffc17 	ldw	r2,-16(fp)
   220d8:	10800c17 	ldw	r2,48(r2)
   220dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   220e0:	e0bffc17 	ldw	r2,-16(fp)
   220e4:	10800d17 	ldw	r2,52(r2)
   220e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   220ec:	e0fff917 	ldw	r3,-28(fp)
   220f0:	e0bff517 	ldw	r2,-44(fp)
   220f4:	1880062e 	bgeu	r3,r2,22110 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   220f8:	e0fff517 	ldw	r3,-44(fp)
   220fc:	e0bff917 	ldw	r2,-28(fp)
   22100:	1885c83a 	sub	r2,r3,r2
   22104:	10bfffc4 	addi	r2,r2,-1
   22108:	e0bff615 	stw	r2,-40(fp)
   2210c:	00000b06 	br	2213c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   22110:	e0bff517 	ldw	r2,-44(fp)
   22114:	10000526 	beq	r2,zero,2212c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   22118:	00c20004 	movi	r3,2048
   2211c:	e0bff917 	ldw	r2,-28(fp)
   22120:	1885c83a 	sub	r2,r3,r2
   22124:	e0bff615 	stw	r2,-40(fp)
   22128:	00000406 	br	2213c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2212c:	00c1ffc4 	movi	r3,2047
   22130:	e0bff917 	ldw	r2,-28(fp)
   22134:	1885c83a 	sub	r2,r3,r2
   22138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2213c:	e0bff617 	ldw	r2,-40(fp)
   22140:	10001e26 	beq	r2,zero,221bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   22144:	e0fffe17 	ldw	r3,-8(fp)
   22148:	e0bff617 	ldw	r2,-40(fp)
   2214c:	1880022e 	bgeu	r3,r2,22158 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   22150:	e0bffe17 	ldw	r2,-8(fp)
   22154:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   22158:	e0bffc17 	ldw	r2,-16(fp)
   2215c:	10c20e04 	addi	r3,r2,2104
   22160:	e0bff917 	ldw	r2,-28(fp)
   22164:	1885883a 	add	r2,r3,r2
   22168:	e1bff617 	ldw	r6,-40(fp)
   2216c:	e17ffd17 	ldw	r5,-12(fp)
   22170:	1009883a 	mov	r4,r2
   22174:	000ecb80 	call	ecb8 <memcpy>
      ptr   += n;
   22178:	e0fffd17 	ldw	r3,-12(fp)
   2217c:	e0bff617 	ldw	r2,-40(fp)
   22180:	1885883a 	add	r2,r3,r2
   22184:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   22188:	e0fffe17 	ldw	r3,-8(fp)
   2218c:	e0bff617 	ldw	r2,-40(fp)
   22190:	1885c83a 	sub	r2,r3,r2
   22194:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22198:	e0fff917 	ldw	r3,-28(fp)
   2219c:	e0bff617 	ldw	r2,-40(fp)
   221a0:	1885883a 	add	r2,r3,r2
   221a4:	10c1ffcc 	andi	r3,r2,2047
   221a8:	e0bffc17 	ldw	r2,-16(fp)
   221ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   221b0:	e0bffe17 	ldw	r2,-8(fp)
   221b4:	00bfc716 	blt	zero,r2,220d4 <__alt_data_end+0xfc0220d4>
   221b8:	00000106 	br	221c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   221bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   221c0:	0005303a 	rdctl	r2,status
   221c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   221c8:	e0fffb17 	ldw	r3,-20(fp)
   221cc:	00bfff84 	movi	r2,-2
   221d0:	1884703a 	and	r2,r3,r2
   221d4:	1001703a 	wrctl	status,r2
  
  return context;
   221d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   221dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   221e0:	e0bffc17 	ldw	r2,-16(fp)
   221e4:	10800817 	ldw	r2,32(r2)
   221e8:	10c00094 	ori	r3,r2,2
   221ec:	e0bffc17 	ldw	r2,-16(fp)
   221f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   221f4:	e0bffc17 	ldw	r2,-16(fp)
   221f8:	10800017 	ldw	r2,0(r2)
   221fc:	10800104 	addi	r2,r2,4
   22200:	1007883a 	mov	r3,r2
   22204:	e0bffc17 	ldw	r2,-16(fp)
   22208:	10800817 	ldw	r2,32(r2)
   2220c:	18800035 	stwio	r2,0(r3)
   22210:	e0bffa17 	ldw	r2,-24(fp)
   22214:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22218:	e0bff817 	ldw	r2,-32(fp)
   2221c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   22220:	e0bffe17 	ldw	r2,-8(fp)
   22224:	0080100e 	bge	zero,r2,22268 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   22228:	e0bfff17 	ldw	r2,-4(fp)
   2222c:	1090000c 	andi	r2,r2,16384
   22230:	1000101e 	bne	r2,zero,22274 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   22234:	0001883a 	nop
   22238:	e0bffc17 	ldw	r2,-16(fp)
   2223c:	10c00d17 	ldw	r3,52(r2)
   22240:	e0bff517 	ldw	r2,-44(fp)
   22244:	1880051e 	bne	r3,r2,2225c <altera_avalon_jtag_uart_write+0x1b8>
   22248:	e0bffc17 	ldw	r2,-16(fp)
   2224c:	10c00917 	ldw	r3,36(r2)
   22250:	e0bffc17 	ldw	r2,-16(fp)
   22254:	10800117 	ldw	r2,4(r2)
   22258:	18bff736 	bltu	r3,r2,22238 <__alt_data_end+0xfc022238>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2225c:	e0bffc17 	ldw	r2,-16(fp)
   22260:	10800917 	ldw	r2,36(r2)
   22264:	1000051e 	bne	r2,zero,2227c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   22268:	e0bffe17 	ldw	r2,-8(fp)
   2226c:	00bfd016 	blt	zero,r2,221b0 <__alt_data_end+0xfc0221b0>
   22270:	00000306 	br	22280 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   22274:	0001883a 	nop
   22278:	00000106 	br	22280 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2227c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22280:	e0fffd17 	ldw	r3,-12(fp)
   22284:	e0bff717 	ldw	r2,-36(fp)
   22288:	18800426 	beq	r3,r2,2229c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2228c:	e0fffd17 	ldw	r3,-12(fp)
   22290:	e0bff717 	ldw	r2,-36(fp)
   22294:	1885c83a 	sub	r2,r3,r2
   22298:	00000606 	br	222b4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2229c:	e0bfff17 	ldw	r2,-4(fp)
   222a0:	1090000c 	andi	r2,r2,16384
   222a4:	10000226 	beq	r2,zero,222b0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   222a8:	00bffd44 	movi	r2,-11
   222ac:	00000106 	br	222b4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   222b0:	00bffec4 	movi	r2,-5
}
   222b4:	e037883a 	mov	sp,fp
   222b8:	dfc00117 	ldw	ra,4(sp)
   222bc:	df000017 	ldw	fp,0(sp)
   222c0:	dec00204 	addi	sp,sp,8
   222c4:	f800283a 	ret

000222c8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   222c8:	defff404 	addi	sp,sp,-48
   222cc:	df000b15 	stw	fp,44(sp)
   222d0:	df000b04 	addi	fp,sp,44
   222d4:	e13ffc15 	stw	r4,-16(fp)
   222d8:	e17ffd15 	stw	r5,-12(fp)
   222dc:	e1bffe15 	stw	r6,-8(fp)
   222e0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   222e4:	e0ffff17 	ldw	r3,-4(fp)
   222e8:	e0bffe17 	ldw	r2,-8(fp)
   222ec:	1885883a 	add	r2,r3,r2
   222f0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   222f4:	e0c00217 	ldw	r3,8(fp)
   222f8:	e0800117 	ldw	r2,4(fp)
   222fc:	1885883a 	add	r2,r3,r2
   22300:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   22304:	e0800117 	ldw	r2,4(fp)
   22308:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   2230c:	e0bffe17 	ldw	r2,-8(fp)
   22310:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   22314:	00800044 	movi	r2,1
   22318:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   2231c:	e0bffc17 	ldw	r2,-16(fp)
   22320:	10800504 	addi	r2,r2,20
   22324:	1009883a 	mov	r4,r2
   22328:	00c00044 	movi	r3,1
   2232c:	e0bffd17 	ldw	r2,-12(fp)
   22330:	1884983a 	sll	r2,r3,r2
   22334:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   22338:	e0800317 	ldw	r2,12(fp)
   2233c:	1080008c 	andi	r2,r2,2
   22340:	1000051e 	bne	r2,zero,22358 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   22344:	e0bffc17 	ldw	r2,-16(fp)
   22348:	10800304 	addi	r2,r2,12
   2234c:	1007883a 	mov	r3,r2
   22350:	00810004 	movi	r2,1024
   22354:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22358:	e0bffc17 	ldw	r2,-16(fp)
   2235c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22360:	e0bffc17 	ldw	r2,-16(fp)
   22364:	10800204 	addi	r2,r2,8
   22368:	10800037 	ldwio	r2,0(r2)
   2236c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22370:	e0bffa17 	ldw	r2,-24(fp)
   22374:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22378:	10000226 	beq	r2,zero,22384 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2237c:	e0bff717 	ldw	r2,-36(fp)
   22380:	1000031e 	bne	r2,zero,22390 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22384:	e0bffa17 	ldw	r2,-24(fp)
   22388:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2238c:	103ff426 	beq	r2,zero,22360 <__alt_data_end+0xfc022360>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22390:	e0bffa17 	ldw	r2,-24(fp)
   22394:	1080100c 	andi	r2,r2,64
   22398:	10001e26 	beq	r2,zero,22414 <alt_avalon_spi_command+0x14c>
   2239c:	e0bff717 	ldw	r2,-36(fp)
   223a0:	00801c0e 	bge	zero,r2,22414 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   223a4:	e0bff717 	ldw	r2,-36(fp)
   223a8:	10bfffc4 	addi	r2,r2,-1
   223ac:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   223b0:	e0ffff17 	ldw	r3,-4(fp)
   223b4:	e0bff817 	ldw	r2,-32(fp)
   223b8:	18800a2e 	bgeu	r3,r2,223e4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   223bc:	e0bffc17 	ldw	r2,-16(fp)
   223c0:	10800104 	addi	r2,r2,4
   223c4:	1009883a 	mov	r4,r2
   223c8:	e0bfff17 	ldw	r2,-4(fp)
   223cc:	10c00044 	addi	r3,r2,1
   223d0:	e0ffff15 	stw	r3,-4(fp)
   223d4:	10800003 	ldbu	r2,0(r2)
   223d8:	10803fcc 	andi	r2,r2,255
   223dc:	20800035 	stwio	r2,0(r4)
   223e0:	00000c06 	br	22414 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   223e4:	e0bff517 	ldw	r2,-44(fp)
   223e8:	10000826 	beq	r2,zero,2240c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   223ec:	e0bff517 	ldw	r2,-44(fp)
   223f0:	10bfffc4 	addi	r2,r2,-1
   223f4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   223f8:	e0bffc17 	ldw	r2,-16(fp)
   223fc:	10800104 	addi	r2,r2,4
   22400:	0007883a 	mov	r3,zero
   22404:	10c00035 	stwio	r3,0(r2)
   22408:	00000206 	br	22414 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   2240c:	00bf0004 	movi	r2,-1024
   22410:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   22414:	e0bffa17 	ldw	r2,-24(fp)
   22418:	1080200c 	andi	r2,r2,128
   2241c:	103fd026 	beq	r2,zero,22360 <__alt_data_end+0xfc022360>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22420:	e0bffc17 	ldw	r2,-16(fp)
   22424:	10800037 	ldwio	r2,0(r2)
   22428:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   2242c:	e0bff617 	ldw	r2,-40(fp)
   22430:	10000426 	beq	r2,zero,22444 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   22434:	e0bff617 	ldw	r2,-40(fp)
   22438:	10bfffc4 	addi	r2,r2,-1
   2243c:	e0bff615 	stw	r2,-40(fp)
   22440:	00000506 	br	22458 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   22444:	e0800217 	ldw	r2,8(fp)
   22448:	10c00044 	addi	r3,r2,1
   2244c:	e0c00215 	stw	r3,8(fp)
   22450:	e0fffb17 	ldw	r3,-20(fp)
   22454:	10c00005 	stb	r3,0(r2)
      credits++;
   22458:	e0bff717 	ldw	r2,-36(fp)
   2245c:	10800044 	addi	r2,r2,1
   22460:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   22464:	e0bff617 	ldw	r2,-40(fp)
   22468:	103fbd1e 	bne	r2,zero,22360 <__alt_data_end+0xfc022360>
   2246c:	e0c00217 	ldw	r3,8(fp)
   22470:	e0bff917 	ldw	r2,-28(fp)
   22474:	18bfba1e 	bne	r3,r2,22360 <__alt_data_end+0xfc022360>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22478:	e0bffc17 	ldw	r2,-16(fp)
   2247c:	10800204 	addi	r2,r2,8
   22480:	10800037 	ldwio	r2,0(r2)
   22484:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   22488:	e0bffa17 	ldw	r2,-24(fp)
   2248c:	1080080c 	andi	r2,r2,32
   22490:	103ff926 	beq	r2,zero,22478 <__alt_data_end+0xfc022478>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   22494:	e0800317 	ldw	r2,12(fp)
   22498:	1080004c 	andi	r2,r2,1
   2249c:	1000041e 	bne	r2,zero,224b0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   224a0:	e0bffc17 	ldw	r2,-16(fp)
   224a4:	10800304 	addi	r2,r2,12
   224a8:	0007883a 	mov	r3,zero
   224ac:	10c00035 	stwio	r3,0(r2)

  return read_length;
   224b0:	e0800117 	ldw	r2,4(fp)
}
   224b4:	e037883a 	mov	sp,fp
   224b8:	df000017 	ldw	fp,0(sp)
   224bc:	dec00104 	addi	sp,sp,4
   224c0:	f800283a 	ret

000224c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   224c4:	defffa04 	addi	sp,sp,-24
   224c8:	dfc00515 	stw	ra,20(sp)
   224cc:	df000415 	stw	fp,16(sp)
   224d0:	df000404 	addi	fp,sp,16
   224d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   224d8:	0007883a 	mov	r3,zero
   224dc:	e0bfff17 	ldw	r2,-4(fp)
   224e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   224e4:	e0bfff17 	ldw	r2,-4(fp)
   224e8:	10800104 	addi	r2,r2,4
   224ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224f0:	0005303a 	rdctl	r2,status
   224f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224f8:	e0fffd17 	ldw	r3,-12(fp)
   224fc:	00bfff84 	movi	r2,-2
   22500:	1884703a 	and	r2,r3,r2
   22504:	1001703a 	wrctl	status,r2
  
  return context;
   22508:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2250c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   22510:	00234340 	call	23434 <alt_tick>
   22514:	e0bffc17 	ldw	r2,-16(fp)
   22518:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2251c:	e0bffe17 	ldw	r2,-8(fp)
   22520:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   22524:	0001883a 	nop
   22528:	e037883a 	mov	sp,fp
   2252c:	dfc00117 	ldw	ra,4(sp)
   22530:	df000017 	ldw	fp,0(sp)
   22534:	dec00204 	addi	sp,sp,8
   22538:	f800283a 	ret

0002253c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2253c:	defff804 	addi	sp,sp,-32
   22540:	dfc00715 	stw	ra,28(sp)
   22544:	df000615 	stw	fp,24(sp)
   22548:	df000604 	addi	fp,sp,24
   2254c:	e13ffc15 	stw	r4,-16(fp)
   22550:	e17ffd15 	stw	r5,-12(fp)
   22554:	e1bffe15 	stw	r6,-8(fp)
   22558:	e1ffff15 	stw	r7,-4(fp)
   2255c:	e0bfff17 	ldw	r2,-4(fp)
   22560:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22564:	d0b24b17 	ldw	r2,-14036(gp)
   22568:	1000021e 	bne	r2,zero,22574 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2256c:	e0bffb17 	ldw	r2,-20(fp)
   22570:	d0b24b15 	stw	r2,-14036(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22574:	e0bffc17 	ldw	r2,-16(fp)
   22578:	10800104 	addi	r2,r2,4
   2257c:	00c001c4 	movi	r3,7
   22580:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22584:	d8000015 	stw	zero,0(sp)
   22588:	e1fffc17 	ldw	r7,-16(fp)
   2258c:	018000b4 	movhi	r6,2
   22590:	31893104 	addi	r6,r6,9412
   22594:	e17ffe17 	ldw	r5,-8(fp)
   22598:	e13ffd17 	ldw	r4,-12(fp)
   2259c:	0022aac0 	call	22aac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   225a0:	0001883a 	nop
   225a4:	e037883a 	mov	sp,fp
   225a8:	dfc00117 	ldw	ra,4(sp)
   225ac:	df000017 	ldw	fp,0(sp)
   225b0:	dec00204 	addi	sp,sp,8
   225b4:	f800283a 	ret

000225b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   225b8:	defff504 	addi	sp,sp,-44
   225bc:	df000a15 	stw	fp,40(sp)
   225c0:	df000a04 	addi	fp,sp,40
   225c4:	e13ffc15 	stw	r4,-16(fp)
   225c8:	e17ffd15 	stw	r5,-12(fp)
   225cc:	e1bffe15 	stw	r6,-8(fp)
   225d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   225d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   225d8:	d0b24b17 	ldw	r2,-14036(gp)
  
  if (alt_ticks_per_second ())
   225dc:	10003c26 	beq	r2,zero,226d0 <alt_alarm_start+0x118>
  {
    if (alarm)
   225e0:	e0bffc17 	ldw	r2,-16(fp)
   225e4:	10003826 	beq	r2,zero,226c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   225e8:	e0bffc17 	ldw	r2,-16(fp)
   225ec:	e0fffe17 	ldw	r3,-8(fp)
   225f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   225f4:	e0bffc17 	ldw	r2,-16(fp)
   225f8:	e0ffff17 	ldw	r3,-4(fp)
   225fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22600:	0005303a 	rdctl	r2,status
   22604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22608:	e0fff917 	ldw	r3,-28(fp)
   2260c:	00bfff84 	movi	r2,-2
   22610:	1884703a 	and	r2,r3,r2
   22614:	1001703a 	wrctl	status,r2
  
  return context;
   22618:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2261c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   22620:	d0b24c17 	ldw	r2,-14032(gp)
      
      current_nticks = alt_nticks();
   22624:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   22628:	e0fffd17 	ldw	r3,-12(fp)
   2262c:	e0bff617 	ldw	r2,-40(fp)
   22630:	1885883a 	add	r2,r3,r2
   22634:	10c00044 	addi	r3,r2,1
   22638:	e0bffc17 	ldw	r2,-16(fp)
   2263c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   22640:	e0bffc17 	ldw	r2,-16(fp)
   22644:	10c00217 	ldw	r3,8(r2)
   22648:	e0bff617 	ldw	r2,-40(fp)
   2264c:	1880042e 	bgeu	r3,r2,22660 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   22650:	e0bffc17 	ldw	r2,-16(fp)
   22654:	00c00044 	movi	r3,1
   22658:	10c00405 	stb	r3,16(r2)
   2265c:	00000206 	br	22668 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22660:	e0bffc17 	ldw	r2,-16(fp)
   22664:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   22668:	e0bffc17 	ldw	r2,-16(fp)
   2266c:	d0e5be04 	addi	r3,gp,-26888
   22670:	e0fffa15 	stw	r3,-24(fp)
   22674:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22678:	e0bffb17 	ldw	r2,-20(fp)
   2267c:	e0fffa17 	ldw	r3,-24(fp)
   22680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22684:	e0bffa17 	ldw	r2,-24(fp)
   22688:	10c00017 	ldw	r3,0(r2)
   2268c:	e0bffb17 	ldw	r2,-20(fp)
   22690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22694:	e0bffa17 	ldw	r2,-24(fp)
   22698:	10800017 	ldw	r2,0(r2)
   2269c:	e0fffb17 	ldw	r3,-20(fp)
   226a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   226a4:	e0bffa17 	ldw	r2,-24(fp)
   226a8:	e0fffb17 	ldw	r3,-20(fp)
   226ac:	10c00015 	stw	r3,0(r2)
   226b0:	e0bff817 	ldw	r2,-32(fp)
   226b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226b8:	e0bff717 	ldw	r2,-36(fp)
   226bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   226c0:	0005883a 	mov	r2,zero
   226c4:	00000306 	br	226d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   226c8:	00bffa84 	movi	r2,-22
   226cc:	00000106 	br	226d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   226d0:	00bfde84 	movi	r2,-134
  }
}
   226d4:	e037883a 	mov	sp,fp
   226d8:	df000017 	ldw	fp,0(sp)
   226dc:	dec00104 	addi	sp,sp,4
   226e0:	f800283a 	ret

000226e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   226e4:	defffa04 	addi	sp,sp,-24
   226e8:	dfc00515 	stw	ra,20(sp)
   226ec:	df000415 	stw	fp,16(sp)
   226f0:	df000404 	addi	fp,sp,16
   226f4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   226f8:	00800244 	movi	r2,9
   226fc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22700:	014003f4 	movhi	r5,15
   22704:	29509004 	addi	r5,r5,16960
   22708:	e13ffd17 	ldw	r4,-12(fp)
   2270c:	000cf040 	call	cf04 <__mulsi3>
   22710:	100b883a 	mov	r5,r2
   22714:	01017db4 	movhi	r4,1526
   22718:	21384004 	addi	r4,r4,-7936
   2271c:	000ce480 	call	ce48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   22720:	100b883a 	mov	r5,r2
   22724:	01200034 	movhi	r4,32768
   22728:	213fffc4 	addi	r4,r4,-1
   2272c:	000ce480 	call	ce48 <__udivsi3>
   22730:	100b883a 	mov	r5,r2
   22734:	e13fff17 	ldw	r4,-4(fp)
   22738:	000ce480 	call	ce48 <__udivsi3>
   2273c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   22740:	e0bffe17 	ldw	r2,-8(fp)
   22744:	10002a26 	beq	r2,zero,227f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   22748:	e03ffc15 	stw	zero,-16(fp)
   2274c:	00001706 	br	227ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   22750:	00a00034 	movhi	r2,32768
   22754:	10bfffc4 	addi	r2,r2,-1
   22758:	10bfffc4 	addi	r2,r2,-1
   2275c:	103ffe1e 	bne	r2,zero,22758 <__alt_data_end+0xfc022758>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22760:	014003f4 	movhi	r5,15
   22764:	29509004 	addi	r5,r5,16960
   22768:	e13ffd17 	ldw	r4,-12(fp)
   2276c:	000cf040 	call	cf04 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22770:	100b883a 	mov	r5,r2
   22774:	01017db4 	movhi	r4,1526
   22778:	21384004 	addi	r4,r4,-7936
   2277c:	000ce480 	call	ce48 <__udivsi3>
   22780:	100b883a 	mov	r5,r2
   22784:	01200034 	movhi	r4,32768
   22788:	213fffc4 	addi	r4,r4,-1
   2278c:	000ce480 	call	ce48 <__udivsi3>
   22790:	1007883a 	mov	r3,r2
   22794:	e0bfff17 	ldw	r2,-4(fp)
   22798:	10c5c83a 	sub	r2,r2,r3
   2279c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   227a0:	e0bffc17 	ldw	r2,-16(fp)
   227a4:	10800044 	addi	r2,r2,1
   227a8:	e0bffc15 	stw	r2,-16(fp)
   227ac:	e0fffc17 	ldw	r3,-16(fp)
   227b0:	e0bffe17 	ldw	r2,-8(fp)
   227b4:	18bfe616 	blt	r3,r2,22750 <__alt_data_end+0xfc022750>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   227b8:	014003f4 	movhi	r5,15
   227bc:	29509004 	addi	r5,r5,16960
   227c0:	e13ffd17 	ldw	r4,-12(fp)
   227c4:	000cf040 	call	cf04 <__mulsi3>
   227c8:	100b883a 	mov	r5,r2
   227cc:	01017db4 	movhi	r4,1526
   227d0:	21384004 	addi	r4,r4,-7936
   227d4:	000ce480 	call	ce48 <__udivsi3>
   227d8:	e17fff17 	ldw	r5,-4(fp)
   227dc:	1009883a 	mov	r4,r2
   227e0:	000cf040 	call	cf04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   227e4:	10bfffc4 	addi	r2,r2,-1
   227e8:	103ffe1e 	bne	r2,zero,227e4 <__alt_data_end+0xfc0227e4>
   227ec:	00000d06 	br	22824 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   227f0:	014003f4 	movhi	r5,15
   227f4:	29509004 	addi	r5,r5,16960
   227f8:	e13ffd17 	ldw	r4,-12(fp)
   227fc:	000cf040 	call	cf04 <__mulsi3>
   22800:	100b883a 	mov	r5,r2
   22804:	01017db4 	movhi	r4,1526
   22808:	21384004 	addi	r4,r4,-7936
   2280c:	000ce480 	call	ce48 <__udivsi3>
   22810:	e17fff17 	ldw	r5,-4(fp)
   22814:	1009883a 	mov	r4,r2
   22818:	000cf040 	call	cf04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2281c:	10bfffc4 	addi	r2,r2,-1
   22820:	00bffe16 	blt	zero,r2,2281c <__alt_data_end+0xfc02281c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   22824:	0005883a 	mov	r2,zero
}
   22828:	e037883a 	mov	sp,fp
   2282c:	dfc00117 	ldw	ra,4(sp)
   22830:	df000017 	ldw	fp,0(sp)
   22834:	dec00204 	addi	sp,sp,8
   22838:	f800283a 	ret

0002283c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2283c:	deffff04 	addi	sp,sp,-4
   22840:	df000015 	stw	fp,0(sp)
   22844:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22848:	0001883a 	nop
   2284c:	e037883a 	mov	sp,fp
   22850:	df000017 	ldw	fp,0(sp)
   22854:	dec00104 	addi	sp,sp,4
   22858:	f800283a 	ret

0002285c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2285c:	defffe04 	addi	sp,sp,-8
   22860:	dfc00115 	stw	ra,4(sp)
   22864:	df000015 	stw	fp,0(sp)
   22868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2286c:	d0a5b917 	ldw	r2,-26908(gp)
   22870:	10000326 	beq	r2,zero,22880 <alt_get_errno+0x24>
   22874:	d0a5b917 	ldw	r2,-26908(gp)
   22878:	103ee83a 	callr	r2
   2287c:	00000106 	br	22884 <alt_get_errno+0x28>
   22880:	d0b24304 	addi	r2,gp,-14068
}
   22884:	e037883a 	mov	sp,fp
   22888:	dfc00117 	ldw	ra,4(sp)
   2288c:	df000017 	ldw	fp,0(sp)
   22890:	dec00204 	addi	sp,sp,8
   22894:	f800283a 	ret

00022898 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22898:	defffa04 	addi	sp,sp,-24
   2289c:	dfc00515 	stw	ra,20(sp)
   228a0:	df000415 	stw	fp,16(sp)
   228a4:	df000404 	addi	fp,sp,16
   228a8:	e13ffe15 	stw	r4,-8(fp)
   228ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   228b0:	e0bffe17 	ldw	r2,-8(fp)
   228b4:	10000326 	beq	r2,zero,228c4 <alt_dev_llist_insert+0x2c>
   228b8:	e0bffe17 	ldw	r2,-8(fp)
   228bc:	10800217 	ldw	r2,8(r2)
   228c0:	1000061e 	bne	r2,zero,228dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   228c4:	002285c0 	call	2285c <alt_get_errno>
   228c8:	1007883a 	mov	r3,r2
   228cc:	00800584 	movi	r2,22
   228d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   228d4:	00bffa84 	movi	r2,-22
   228d8:	00001306 	br	22928 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   228dc:	e0bffe17 	ldw	r2,-8(fp)
   228e0:	e0ffff17 	ldw	r3,-4(fp)
   228e4:	e0fffc15 	stw	r3,-16(fp)
   228e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   228ec:	e0bffd17 	ldw	r2,-12(fp)
   228f0:	e0fffc17 	ldw	r3,-16(fp)
   228f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   228f8:	e0bffc17 	ldw	r2,-16(fp)
   228fc:	10c00017 	ldw	r3,0(r2)
   22900:	e0bffd17 	ldw	r2,-12(fp)
   22904:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22908:	e0bffc17 	ldw	r2,-16(fp)
   2290c:	10800017 	ldw	r2,0(r2)
   22910:	e0fffd17 	ldw	r3,-12(fp)
   22914:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22918:	e0bffc17 	ldw	r2,-16(fp)
   2291c:	e0fffd17 	ldw	r3,-12(fp)
   22920:	10c00015 	stw	r3,0(r2)

  return 0;  
   22924:	0005883a 	mov	r2,zero
}
   22928:	e037883a 	mov	sp,fp
   2292c:	dfc00117 	ldw	ra,4(sp)
   22930:	df000017 	ldw	fp,0(sp)
   22934:	dec00204 	addi	sp,sp,8
   22938:	f800283a 	ret

0002293c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2293c:	defffd04 	addi	sp,sp,-12
   22940:	dfc00215 	stw	ra,8(sp)
   22944:	df000115 	stw	fp,4(sp)
   22948:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2294c:	008000b4 	movhi	r2,2
   22950:	108ed904 	addi	r2,r2,15204
   22954:	e0bfff15 	stw	r2,-4(fp)
   22958:	00000606 	br	22974 <_do_ctors+0x38>
        (*ctor) (); 
   2295c:	e0bfff17 	ldw	r2,-4(fp)
   22960:	10800017 	ldw	r2,0(r2)
   22964:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22968:	e0bfff17 	ldw	r2,-4(fp)
   2296c:	10bfff04 	addi	r2,r2,-4
   22970:	e0bfff15 	stw	r2,-4(fp)
   22974:	e0ffff17 	ldw	r3,-4(fp)
   22978:	008000b4 	movhi	r2,2
   2297c:	108ed804 	addi	r2,r2,15200
   22980:	18bff62e 	bgeu	r3,r2,2295c <__alt_data_end+0xfc02295c>
        (*ctor) (); 
}
   22984:	0001883a 	nop
   22988:	e037883a 	mov	sp,fp
   2298c:	dfc00117 	ldw	ra,4(sp)
   22990:	df000017 	ldw	fp,0(sp)
   22994:	dec00204 	addi	sp,sp,8
   22998:	f800283a 	ret

0002299c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2299c:	defffd04 	addi	sp,sp,-12
   229a0:	dfc00215 	stw	ra,8(sp)
   229a4:	df000115 	stw	fp,4(sp)
   229a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   229ac:	008000b4 	movhi	r2,2
   229b0:	108ed904 	addi	r2,r2,15204
   229b4:	e0bfff15 	stw	r2,-4(fp)
   229b8:	00000606 	br	229d4 <_do_dtors+0x38>
        (*dtor) (); 
   229bc:	e0bfff17 	ldw	r2,-4(fp)
   229c0:	10800017 	ldw	r2,0(r2)
   229c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   229c8:	e0bfff17 	ldw	r2,-4(fp)
   229cc:	10bfff04 	addi	r2,r2,-4
   229d0:	e0bfff15 	stw	r2,-4(fp)
   229d4:	e0ffff17 	ldw	r3,-4(fp)
   229d8:	008000b4 	movhi	r2,2
   229dc:	108eda04 	addi	r2,r2,15208
   229e0:	18bff62e 	bgeu	r3,r2,229bc <__alt_data_end+0xfc0229bc>
        (*dtor) (); 
}
   229e4:	0001883a 	nop
   229e8:	e037883a 	mov	sp,fp
   229ec:	dfc00117 	ldw	ra,4(sp)
   229f0:	df000017 	ldw	fp,0(sp)
   229f4:	dec00204 	addi	sp,sp,8
   229f8:	f800283a 	ret

000229fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   229fc:	defffa04 	addi	sp,sp,-24
   22a00:	dfc00515 	stw	ra,20(sp)
   22a04:	df000415 	stw	fp,16(sp)
   22a08:	df000404 	addi	fp,sp,16
   22a0c:	e13ffe15 	stw	r4,-8(fp)
   22a10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22a14:	e0bfff17 	ldw	r2,-4(fp)
   22a18:	10800017 	ldw	r2,0(r2)
   22a1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22a20:	e13ffe17 	ldw	r4,-8(fp)
   22a24:	000f5800 	call	f580 <strlen>
   22a28:	10800044 	addi	r2,r2,1
   22a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22a30:	00000d06 	br	22a68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22a34:	e0bffc17 	ldw	r2,-16(fp)
   22a38:	10800217 	ldw	r2,8(r2)
   22a3c:	e0fffd17 	ldw	r3,-12(fp)
   22a40:	180d883a 	mov	r6,r3
   22a44:	e17ffe17 	ldw	r5,-8(fp)
   22a48:	1009883a 	mov	r4,r2
   22a4c:	00238140 	call	23814 <memcmp>
   22a50:	1000021e 	bne	r2,zero,22a5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22a54:	e0bffc17 	ldw	r2,-16(fp)
   22a58:	00000706 	br	22a78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22a5c:	e0bffc17 	ldw	r2,-16(fp)
   22a60:	10800017 	ldw	r2,0(r2)
   22a64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22a68:	e0fffc17 	ldw	r3,-16(fp)
   22a6c:	e0bfff17 	ldw	r2,-4(fp)
   22a70:	18bff01e 	bne	r3,r2,22a34 <__alt_data_end+0xfc022a34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22a74:	0005883a 	mov	r2,zero
}
   22a78:	e037883a 	mov	sp,fp
   22a7c:	dfc00117 	ldw	ra,4(sp)
   22a80:	df000017 	ldw	fp,0(sp)
   22a84:	dec00204 	addi	sp,sp,8
   22a88:	f800283a 	ret

00022a8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22a8c:	deffff04 	addi	sp,sp,-4
   22a90:	df000015 	stw	fp,0(sp)
   22a94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22a98:	0001883a 	nop
   22a9c:	e037883a 	mov	sp,fp
   22aa0:	df000017 	ldw	fp,0(sp)
   22aa4:	dec00104 	addi	sp,sp,4
   22aa8:	f800283a 	ret

00022aac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22aac:	defff904 	addi	sp,sp,-28
   22ab0:	dfc00615 	stw	ra,24(sp)
   22ab4:	df000515 	stw	fp,20(sp)
   22ab8:	df000504 	addi	fp,sp,20
   22abc:	e13ffc15 	stw	r4,-16(fp)
   22ac0:	e17ffd15 	stw	r5,-12(fp)
   22ac4:	e1bffe15 	stw	r6,-8(fp)
   22ac8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22acc:	e0800217 	ldw	r2,8(fp)
   22ad0:	d8800015 	stw	r2,0(sp)
   22ad4:	e1ffff17 	ldw	r7,-4(fp)
   22ad8:	e1bffe17 	ldw	r6,-8(fp)
   22adc:	e17ffd17 	ldw	r5,-12(fp)
   22ae0:	e13ffc17 	ldw	r4,-16(fp)
   22ae4:	0022c5c0 	call	22c5c <alt_iic_isr_register>
}  
   22ae8:	e037883a 	mov	sp,fp
   22aec:	dfc00117 	ldw	ra,4(sp)
   22af0:	df000017 	ldw	fp,0(sp)
   22af4:	dec00204 	addi	sp,sp,8
   22af8:	f800283a 	ret

00022afc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22afc:	defff904 	addi	sp,sp,-28
   22b00:	df000615 	stw	fp,24(sp)
   22b04:	df000604 	addi	fp,sp,24
   22b08:	e13ffe15 	stw	r4,-8(fp)
   22b0c:	e17fff15 	stw	r5,-4(fp)
   22b10:	e0bfff17 	ldw	r2,-4(fp)
   22b14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b18:	0005303a 	rdctl	r2,status
   22b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b20:	e0fffb17 	ldw	r3,-20(fp)
   22b24:	00bfff84 	movi	r2,-2
   22b28:	1884703a 	and	r2,r3,r2
   22b2c:	1001703a 	wrctl	status,r2
  
  return context;
   22b30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22b34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22b38:	00c00044 	movi	r3,1
   22b3c:	e0bffa17 	ldw	r2,-24(fp)
   22b40:	1884983a 	sll	r2,r3,r2
   22b44:	1007883a 	mov	r3,r2
   22b48:	d0b24a17 	ldw	r2,-14040(gp)
   22b4c:	1884b03a 	or	r2,r3,r2
   22b50:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22b54:	d0b24a17 	ldw	r2,-14040(gp)
   22b58:	100170fa 	wrctl	ienable,r2
   22b5c:	e0bffc17 	ldw	r2,-16(fp)
   22b60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22b64:	e0bffd17 	ldw	r2,-12(fp)
   22b68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22b6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22b70:	0001883a 	nop
}
   22b74:	e037883a 	mov	sp,fp
   22b78:	df000017 	ldw	fp,0(sp)
   22b7c:	dec00104 	addi	sp,sp,4
   22b80:	f800283a 	ret

00022b84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22b84:	defff904 	addi	sp,sp,-28
   22b88:	df000615 	stw	fp,24(sp)
   22b8c:	df000604 	addi	fp,sp,24
   22b90:	e13ffe15 	stw	r4,-8(fp)
   22b94:	e17fff15 	stw	r5,-4(fp)
   22b98:	e0bfff17 	ldw	r2,-4(fp)
   22b9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22ba0:	0005303a 	rdctl	r2,status
   22ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22ba8:	e0fffb17 	ldw	r3,-20(fp)
   22bac:	00bfff84 	movi	r2,-2
   22bb0:	1884703a 	and	r2,r3,r2
   22bb4:	1001703a 	wrctl	status,r2
  
  return context;
   22bb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22bbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22bc0:	00c00044 	movi	r3,1
   22bc4:	e0bffa17 	ldw	r2,-24(fp)
   22bc8:	1884983a 	sll	r2,r3,r2
   22bcc:	0084303a 	nor	r2,zero,r2
   22bd0:	1007883a 	mov	r3,r2
   22bd4:	d0b24a17 	ldw	r2,-14040(gp)
   22bd8:	1884703a 	and	r2,r3,r2
   22bdc:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22be0:	d0b24a17 	ldw	r2,-14040(gp)
   22be4:	100170fa 	wrctl	ienable,r2
   22be8:	e0bffc17 	ldw	r2,-16(fp)
   22bec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22bf0:	e0bffd17 	ldw	r2,-12(fp)
   22bf4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22bf8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22bfc:	0001883a 	nop
}
   22c00:	e037883a 	mov	sp,fp
   22c04:	df000017 	ldw	fp,0(sp)
   22c08:	dec00104 	addi	sp,sp,4
   22c0c:	f800283a 	ret

00022c10 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   22c10:	defffc04 	addi	sp,sp,-16
   22c14:	df000315 	stw	fp,12(sp)
   22c18:	df000304 	addi	fp,sp,12
   22c1c:	e13ffe15 	stw	r4,-8(fp)
   22c20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22c24:	000530fa 	rdctl	r2,ienable
   22c28:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22c2c:	00c00044 	movi	r3,1
   22c30:	e0bfff17 	ldw	r2,-4(fp)
   22c34:	1884983a 	sll	r2,r3,r2
   22c38:	1007883a 	mov	r3,r2
   22c3c:	e0bffd17 	ldw	r2,-12(fp)
   22c40:	1884703a 	and	r2,r3,r2
   22c44:	1004c03a 	cmpne	r2,r2,zero
   22c48:	10803fcc 	andi	r2,r2,255
}
   22c4c:	e037883a 	mov	sp,fp
   22c50:	df000017 	ldw	fp,0(sp)
   22c54:	dec00104 	addi	sp,sp,4
   22c58:	f800283a 	ret

00022c5c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22c5c:	defff504 	addi	sp,sp,-44
   22c60:	dfc00a15 	stw	ra,40(sp)
   22c64:	df000915 	stw	fp,36(sp)
   22c68:	df000904 	addi	fp,sp,36
   22c6c:	e13ffc15 	stw	r4,-16(fp)
   22c70:	e17ffd15 	stw	r5,-12(fp)
   22c74:	e1bffe15 	stw	r6,-8(fp)
   22c78:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22c7c:	00bffa84 	movi	r2,-22
   22c80:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22c84:	e0bffd17 	ldw	r2,-12(fp)
   22c88:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22c8c:	e0bff817 	ldw	r2,-32(fp)
   22c90:	10800808 	cmpgei	r2,r2,32
   22c94:	1000271e 	bne	r2,zero,22d34 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c98:	0005303a 	rdctl	r2,status
   22c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22ca0:	e0fffb17 	ldw	r3,-20(fp)
   22ca4:	00bfff84 	movi	r2,-2
   22ca8:	1884703a 	and	r2,r3,r2
   22cac:	1001703a 	wrctl	status,r2
  
  return context;
   22cb0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22cb4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22cb8:	008000f4 	movhi	r2,3
   22cbc:	10847004 	addi	r2,r2,4544
   22cc0:	e0fff817 	ldw	r3,-32(fp)
   22cc4:	180690fa 	slli	r3,r3,3
   22cc8:	10c5883a 	add	r2,r2,r3
   22ccc:	e0fffe17 	ldw	r3,-8(fp)
   22cd0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22cd4:	008000f4 	movhi	r2,3
   22cd8:	10847004 	addi	r2,r2,4544
   22cdc:	e0fff817 	ldw	r3,-32(fp)
   22ce0:	180690fa 	slli	r3,r3,3
   22ce4:	10c5883a 	add	r2,r2,r3
   22ce8:	10800104 	addi	r2,r2,4
   22cec:	e0ffff17 	ldw	r3,-4(fp)
   22cf0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22cf4:	e0bffe17 	ldw	r2,-8(fp)
   22cf8:	10000526 	beq	r2,zero,22d10 <alt_iic_isr_register+0xb4>
   22cfc:	e0bff817 	ldw	r2,-32(fp)
   22d00:	100b883a 	mov	r5,r2
   22d04:	e13ffc17 	ldw	r4,-16(fp)
   22d08:	0022afc0 	call	22afc <alt_ic_irq_enable>
   22d0c:	00000406 	br	22d20 <alt_iic_isr_register+0xc4>
   22d10:	e0bff817 	ldw	r2,-32(fp)
   22d14:	100b883a 	mov	r5,r2
   22d18:	e13ffc17 	ldw	r4,-16(fp)
   22d1c:	0022b840 	call	22b84 <alt_ic_irq_disable>
   22d20:	e0bff715 	stw	r2,-36(fp)
   22d24:	e0bffa17 	ldw	r2,-24(fp)
   22d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22d2c:	e0bff917 	ldw	r2,-28(fp)
   22d30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22d34:	e0bff717 	ldw	r2,-36(fp)
}
   22d38:	e037883a 	mov	sp,fp
   22d3c:	dfc00117 	ldw	ra,4(sp)
   22d40:	df000017 	ldw	fp,0(sp)
   22d44:	dec00204 	addi	sp,sp,8
   22d48:	f800283a 	ret

00022d4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22d4c:	defff804 	addi	sp,sp,-32
   22d50:	dfc00715 	stw	ra,28(sp)
   22d54:	df000615 	stw	fp,24(sp)
   22d58:	dc000515 	stw	r16,20(sp)
   22d5c:	df000604 	addi	fp,sp,24
   22d60:	e13ffb15 	stw	r4,-20(fp)
   22d64:	e17ffc15 	stw	r5,-16(fp)
   22d68:	e1bffd15 	stw	r6,-12(fp)
   22d6c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22d70:	e1bffe17 	ldw	r6,-8(fp)
   22d74:	e17ffd17 	ldw	r5,-12(fp)
   22d78:	e13ffc17 	ldw	r4,-16(fp)
   22d7c:	0022fd40 	call	22fd4 <open>
   22d80:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22d84:	e0bffa17 	ldw	r2,-24(fp)
   22d88:	10002216 	blt	r2,zero,22e14 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22d8c:	040000f4 	movhi	r16,3
   22d90:	842d4604 	addi	r16,r16,-19176
   22d94:	e0bffa17 	ldw	r2,-24(fp)
   22d98:	01400304 	movi	r5,12
   22d9c:	1009883a 	mov	r4,r2
   22da0:	000cf040 	call	cf04 <__mulsi3>
   22da4:	8085883a 	add	r2,r16,r2
   22da8:	10c00017 	ldw	r3,0(r2)
   22dac:	e0bffb17 	ldw	r2,-20(fp)
   22db0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22db4:	040000f4 	movhi	r16,3
   22db8:	842d4604 	addi	r16,r16,-19176
   22dbc:	e0bffa17 	ldw	r2,-24(fp)
   22dc0:	01400304 	movi	r5,12
   22dc4:	1009883a 	mov	r4,r2
   22dc8:	000cf040 	call	cf04 <__mulsi3>
   22dcc:	8085883a 	add	r2,r16,r2
   22dd0:	10800104 	addi	r2,r2,4
   22dd4:	10c00017 	ldw	r3,0(r2)
   22dd8:	e0bffb17 	ldw	r2,-20(fp)
   22ddc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22de0:	040000f4 	movhi	r16,3
   22de4:	842d4604 	addi	r16,r16,-19176
   22de8:	e0bffa17 	ldw	r2,-24(fp)
   22dec:	01400304 	movi	r5,12
   22df0:	1009883a 	mov	r4,r2
   22df4:	000cf040 	call	cf04 <__mulsi3>
   22df8:	8085883a 	add	r2,r16,r2
   22dfc:	10800204 	addi	r2,r2,8
   22e00:	10c00017 	ldw	r3,0(r2)
   22e04:	e0bffb17 	ldw	r2,-20(fp)
   22e08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22e0c:	e13ffa17 	ldw	r4,-24(fp)
   22e10:	001f8140 	call	1f814 <alt_release_fd>
  }
} 
   22e14:	0001883a 	nop
   22e18:	e6ffff04 	addi	sp,fp,-4
   22e1c:	dfc00217 	ldw	ra,8(sp)
   22e20:	df000117 	ldw	fp,4(sp)
   22e24:	dc000017 	ldw	r16,0(sp)
   22e28:	dec00304 	addi	sp,sp,12
   22e2c:	f800283a 	ret

00022e30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22e30:	defffb04 	addi	sp,sp,-20
   22e34:	dfc00415 	stw	ra,16(sp)
   22e38:	df000315 	stw	fp,12(sp)
   22e3c:	df000304 	addi	fp,sp,12
   22e40:	e13ffd15 	stw	r4,-12(fp)
   22e44:	e17ffe15 	stw	r5,-8(fp)
   22e48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22e4c:	01c07fc4 	movi	r7,511
   22e50:	01800044 	movi	r6,1
   22e54:	e17ffd17 	ldw	r5,-12(fp)
   22e58:	010000f4 	movhi	r4,3
   22e5c:	212d4904 	addi	r4,r4,-19164
   22e60:	0022d4c0 	call	22d4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22e64:	01c07fc4 	movi	r7,511
   22e68:	000d883a 	mov	r6,zero
   22e6c:	e17ffe17 	ldw	r5,-8(fp)
   22e70:	010000f4 	movhi	r4,3
   22e74:	212d4604 	addi	r4,r4,-19176
   22e78:	0022d4c0 	call	22d4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22e7c:	01c07fc4 	movi	r7,511
   22e80:	01800044 	movi	r6,1
   22e84:	e17fff17 	ldw	r5,-4(fp)
   22e88:	010000f4 	movhi	r4,3
   22e8c:	212d4c04 	addi	r4,r4,-19152
   22e90:	0022d4c0 	call	22d4c <alt_open_fd>
}  
   22e94:	0001883a 	nop
   22e98:	e037883a 	mov	sp,fp
   22e9c:	dfc00117 	ldw	ra,4(sp)
   22ea0:	df000017 	ldw	fp,0(sp)
   22ea4:	dec00204 	addi	sp,sp,8
   22ea8:	f800283a 	ret

00022eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22eac:	defffe04 	addi	sp,sp,-8
   22eb0:	dfc00115 	stw	ra,4(sp)
   22eb4:	df000015 	stw	fp,0(sp)
   22eb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ebc:	d0a5b917 	ldw	r2,-26908(gp)
   22ec0:	10000326 	beq	r2,zero,22ed0 <alt_get_errno+0x24>
   22ec4:	d0a5b917 	ldw	r2,-26908(gp)
   22ec8:	103ee83a 	callr	r2
   22ecc:	00000106 	br	22ed4 <alt_get_errno+0x28>
   22ed0:	d0b24304 	addi	r2,gp,-14068
}
   22ed4:	e037883a 	mov	sp,fp
   22ed8:	dfc00117 	ldw	ra,4(sp)
   22edc:	df000017 	ldw	fp,0(sp)
   22ee0:	dec00204 	addi	sp,sp,8
   22ee4:	f800283a 	ret

00022ee8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22ee8:	defffb04 	addi	sp,sp,-20
   22eec:	dfc00415 	stw	ra,16(sp)
   22ef0:	df000315 	stw	fp,12(sp)
   22ef4:	dc000215 	stw	r16,8(sp)
   22ef8:	df000304 	addi	fp,sp,12
   22efc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22f00:	e0bffe17 	ldw	r2,-8(fp)
   22f04:	10800217 	ldw	r2,8(r2)
   22f08:	10d00034 	orhi	r3,r2,16384
   22f0c:	e0bffe17 	ldw	r2,-8(fp)
   22f10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22f14:	e03ffd15 	stw	zero,-12(fp)
   22f18:	00002306 	br	22fa8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22f1c:	040000f4 	movhi	r16,3
   22f20:	842d4604 	addi	r16,r16,-19176
   22f24:	e0bffd17 	ldw	r2,-12(fp)
   22f28:	01400304 	movi	r5,12
   22f2c:	1009883a 	mov	r4,r2
   22f30:	000cf040 	call	cf04 <__mulsi3>
   22f34:	8085883a 	add	r2,r16,r2
   22f38:	10c00017 	ldw	r3,0(r2)
   22f3c:	e0bffe17 	ldw	r2,-8(fp)
   22f40:	10800017 	ldw	r2,0(r2)
   22f44:	1880151e 	bne	r3,r2,22f9c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22f48:	040000f4 	movhi	r16,3
   22f4c:	842d4604 	addi	r16,r16,-19176
   22f50:	e0bffd17 	ldw	r2,-12(fp)
   22f54:	01400304 	movi	r5,12
   22f58:	1009883a 	mov	r4,r2
   22f5c:	000cf040 	call	cf04 <__mulsi3>
   22f60:	8085883a 	add	r2,r16,r2
   22f64:	10800204 	addi	r2,r2,8
   22f68:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22f6c:	10000b0e 	bge	r2,zero,22f9c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22f70:	01400304 	movi	r5,12
   22f74:	e13ffd17 	ldw	r4,-12(fp)
   22f78:	000cf040 	call	cf04 <__mulsi3>
   22f7c:	1007883a 	mov	r3,r2
   22f80:	008000f4 	movhi	r2,3
   22f84:	10ad4604 	addi	r2,r2,-19176
   22f88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22f8c:	e0bffe17 	ldw	r2,-8(fp)
   22f90:	18800226 	beq	r3,r2,22f9c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22f94:	00bffcc4 	movi	r2,-13
   22f98:	00000806 	br	22fbc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22f9c:	e0bffd17 	ldw	r2,-12(fp)
   22fa0:	10800044 	addi	r2,r2,1
   22fa4:	e0bffd15 	stw	r2,-12(fp)
   22fa8:	d0a5b817 	ldw	r2,-26912(gp)
   22fac:	1007883a 	mov	r3,r2
   22fb0:	e0bffd17 	ldw	r2,-12(fp)
   22fb4:	18bfd92e 	bgeu	r3,r2,22f1c <__alt_data_end+0xfc022f1c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22fb8:	0005883a 	mov	r2,zero
}
   22fbc:	e6ffff04 	addi	sp,fp,-4
   22fc0:	dfc00217 	ldw	ra,8(sp)
   22fc4:	df000117 	ldw	fp,4(sp)
   22fc8:	dc000017 	ldw	r16,0(sp)
   22fcc:	dec00304 	addi	sp,sp,12
   22fd0:	f800283a 	ret

00022fd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22fd4:	defff604 	addi	sp,sp,-40
   22fd8:	dfc00915 	stw	ra,36(sp)
   22fdc:	df000815 	stw	fp,32(sp)
   22fe0:	df000804 	addi	fp,sp,32
   22fe4:	e13ffd15 	stw	r4,-12(fp)
   22fe8:	e17ffe15 	stw	r5,-8(fp)
   22fec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22ff0:	00bfffc4 	movi	r2,-1
   22ff4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22ff8:	00bffb44 	movi	r2,-19
   22ffc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23000:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23004:	d165b604 	addi	r5,gp,-26920
   23008:	e13ffd17 	ldw	r4,-12(fp)
   2300c:	00229fc0 	call	229fc <alt_find_dev>
   23010:	e0bff815 	stw	r2,-32(fp)
   23014:	e0bff817 	ldw	r2,-32(fp)
   23018:	1000051e 	bne	r2,zero,23030 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2301c:	e13ffd17 	ldw	r4,-12(fp)
   23020:	00235600 	call	23560 <alt_find_file>
   23024:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23028:	00800044 	movi	r2,1
   2302c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23030:	e0bff817 	ldw	r2,-32(fp)
   23034:	10002b26 	beq	r2,zero,230e4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23038:	e13ff817 	ldw	r4,-32(fp)
   2303c:	00236680 	call	23668 <alt_get_fd>
   23040:	e0bff915 	stw	r2,-28(fp)
   23044:	e0bff917 	ldw	r2,-28(fp)
   23048:	1000030e 	bge	r2,zero,23058 <open+0x84>
    {
      status = index;
   2304c:	e0bff917 	ldw	r2,-28(fp)
   23050:	e0bffa15 	stw	r2,-24(fp)
   23054:	00002506 	br	230ec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   23058:	01400304 	movi	r5,12
   2305c:	e13ff917 	ldw	r4,-28(fp)
   23060:	000cf040 	call	cf04 <__mulsi3>
   23064:	1007883a 	mov	r3,r2
   23068:	008000f4 	movhi	r2,3
   2306c:	10ad4604 	addi	r2,r2,-19176
   23070:	1885883a 	add	r2,r3,r2
   23074:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   23078:	e0fffe17 	ldw	r3,-8(fp)
   2307c:	00900034 	movhi	r2,16384
   23080:	10bfffc4 	addi	r2,r2,-1
   23084:	1886703a 	and	r3,r3,r2
   23088:	e0bffc17 	ldw	r2,-16(fp)
   2308c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   23090:	e0bffb17 	ldw	r2,-20(fp)
   23094:	1000051e 	bne	r2,zero,230ac <open+0xd8>
   23098:	e13ffc17 	ldw	r4,-16(fp)
   2309c:	0022ee80 	call	22ee8 <alt_file_locked>
   230a0:	e0bffa15 	stw	r2,-24(fp)
   230a4:	e0bffa17 	ldw	r2,-24(fp)
   230a8:	10001016 	blt	r2,zero,230ec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   230ac:	e0bff817 	ldw	r2,-32(fp)
   230b0:	10800317 	ldw	r2,12(r2)
   230b4:	10000826 	beq	r2,zero,230d8 <open+0x104>
   230b8:	e0bff817 	ldw	r2,-32(fp)
   230bc:	10800317 	ldw	r2,12(r2)
   230c0:	e1ffff17 	ldw	r7,-4(fp)
   230c4:	e1bffe17 	ldw	r6,-8(fp)
   230c8:	e17ffd17 	ldw	r5,-12(fp)
   230cc:	e13ffc17 	ldw	r4,-16(fp)
   230d0:	103ee83a 	callr	r2
   230d4:	00000106 	br	230dc <open+0x108>
   230d8:	0005883a 	mov	r2,zero
   230dc:	e0bffa15 	stw	r2,-24(fp)
   230e0:	00000206 	br	230ec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   230e4:	00bffb44 	movi	r2,-19
   230e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   230ec:	e0bffa17 	ldw	r2,-24(fp)
   230f0:	1000090e 	bge	r2,zero,23118 <open+0x144>
  {
    alt_release_fd (index);  
   230f4:	e13ff917 	ldw	r4,-28(fp)
   230f8:	001f8140 	call	1f814 <alt_release_fd>
    ALT_ERRNO = -status;
   230fc:	0022eac0 	call	22eac <alt_get_errno>
   23100:	1007883a 	mov	r3,r2
   23104:	e0bffa17 	ldw	r2,-24(fp)
   23108:	0085c83a 	sub	r2,zero,r2
   2310c:	18800015 	stw	r2,0(r3)
    return -1;
   23110:	00bfffc4 	movi	r2,-1
   23114:	00000106 	br	2311c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   23118:	e0bff917 	ldw	r2,-28(fp)
}
   2311c:	e037883a 	mov	sp,fp
   23120:	dfc00117 	ldw	ra,4(sp)
   23124:	df000017 	ldw	fp,0(sp)
   23128:	dec00204 	addi	sp,sp,8
   2312c:	f800283a 	ret

00023130 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   23130:	defff204 	addi	sp,sp,-56
   23134:	dfc00a15 	stw	ra,40(sp)
   23138:	df000915 	stw	fp,36(sp)
   2313c:	df000904 	addi	fp,sp,36
   23140:	e13fff15 	stw	r4,-4(fp)
   23144:	e1400215 	stw	r5,8(fp)
   23148:	e1800315 	stw	r6,12(fp)
   2314c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   23150:	e0800204 	addi	r2,fp,8
   23154:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   23158:	e0bfff17 	ldw	r2,-4(fp)
   2315c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   23160:	00006f06 	br	23320 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   23164:	e0bff807 	ldb	r2,-32(fp)
   23168:	10800960 	cmpeqi	r2,r2,37
   2316c:	1000041e 	bne	r2,zero,23180 <alt_printf+0x50>
        {
            alt_putchar(c);
   23170:	e0bff807 	ldb	r2,-32(fp)
   23174:	1009883a 	mov	r4,r2
   23178:	002335c0 	call	2335c <alt_putchar>
   2317c:	00006806 	br	23320 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   23180:	e0bff717 	ldw	r2,-36(fp)
   23184:	10c00044 	addi	r3,r2,1
   23188:	e0fff715 	stw	r3,-36(fp)
   2318c:	10800003 	ldbu	r2,0(r2)
   23190:	e0bff805 	stb	r2,-32(fp)
   23194:	e0bff807 	ldb	r2,-32(fp)
   23198:	10006926 	beq	r2,zero,23340 <alt_printf+0x210>
            {
                if (c == '%')
   2319c:	e0bff807 	ldb	r2,-32(fp)
   231a0:	10800958 	cmpnei	r2,r2,37
   231a4:	1000041e 	bne	r2,zero,231b8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   231a8:	e0bff807 	ldb	r2,-32(fp)
   231ac:	1009883a 	mov	r4,r2
   231b0:	002335c0 	call	2335c <alt_putchar>
   231b4:	00005a06 	br	23320 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   231b8:	e0bff807 	ldb	r2,-32(fp)
   231bc:	108018d8 	cmpnei	r2,r2,99
   231c0:	1000081e 	bne	r2,zero,231e4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   231c4:	e0bffe17 	ldw	r2,-8(fp)
   231c8:	10c00104 	addi	r3,r2,4
   231cc:	e0fffe15 	stw	r3,-8(fp)
   231d0:	10800017 	ldw	r2,0(r2)
   231d4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   231d8:	e13ffd17 	ldw	r4,-12(fp)
   231dc:	002335c0 	call	2335c <alt_putchar>
   231e0:	00004f06 	br	23320 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   231e4:	e0bff807 	ldb	r2,-32(fp)
   231e8:	10801e18 	cmpnei	r2,r2,120
   231ec:	1000341e 	bne	r2,zero,232c0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   231f0:	e0bffe17 	ldw	r2,-8(fp)
   231f4:	10c00104 	addi	r3,r2,4
   231f8:	e0fffe15 	stw	r3,-8(fp)
   231fc:	10800017 	ldw	r2,0(r2)
   23200:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   23204:	e0bffb17 	ldw	r2,-20(fp)
   23208:	1000031e 	bne	r2,zero,23218 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2320c:	01000c04 	movi	r4,48
   23210:	002335c0 	call	2335c <alt_putchar>
                        continue;
   23214:	00004206 	br	23320 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   23218:	00800704 	movi	r2,28
   2321c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   23220:	00000306 	br	23230 <alt_printf+0x100>
                        digit_shift -= 4;
   23224:	e0bff917 	ldw	r2,-28(fp)
   23228:	10bfff04 	addi	r2,r2,-4
   2322c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   23230:	00c003c4 	movi	r3,15
   23234:	e0bff917 	ldw	r2,-28(fp)
   23238:	1884983a 	sll	r2,r3,r2
   2323c:	1007883a 	mov	r3,r2
   23240:	e0bffb17 	ldw	r2,-20(fp)
   23244:	1884703a 	and	r2,r3,r2
   23248:	103ff626 	beq	r2,zero,23224 <__alt_data_end+0xfc023224>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2324c:	00001906 	br	232b4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   23250:	00c003c4 	movi	r3,15
   23254:	e0bff917 	ldw	r2,-28(fp)
   23258:	1884983a 	sll	r2,r3,r2
   2325c:	1007883a 	mov	r3,r2
   23260:	e0bffb17 	ldw	r2,-20(fp)
   23264:	1886703a 	and	r3,r3,r2
   23268:	e0bff917 	ldw	r2,-28(fp)
   2326c:	1884d83a 	srl	r2,r3,r2
   23270:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   23274:	e0bffc17 	ldw	r2,-16(fp)
   23278:	108002a8 	cmpgeui	r2,r2,10
   2327c:	1000041e 	bne	r2,zero,23290 <alt_printf+0x160>
                            c = '0' + digit;
   23280:	e0bffc17 	ldw	r2,-16(fp)
   23284:	10800c04 	addi	r2,r2,48
   23288:	e0bff805 	stb	r2,-32(fp)
   2328c:	00000306 	br	2329c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23290:	e0bffc17 	ldw	r2,-16(fp)
   23294:	108015c4 	addi	r2,r2,87
   23298:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2329c:	e0bff807 	ldb	r2,-32(fp)
   232a0:	1009883a 	mov	r4,r2
   232a4:	002335c0 	call	2335c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   232a8:	e0bff917 	ldw	r2,-28(fp)
   232ac:	10bfff04 	addi	r2,r2,-4
   232b0:	e0bff915 	stw	r2,-28(fp)
   232b4:	e0bff917 	ldw	r2,-28(fp)
   232b8:	103fe50e 	bge	r2,zero,23250 <__alt_data_end+0xfc023250>
   232bc:	00001806 	br	23320 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   232c0:	e0bff807 	ldb	r2,-32(fp)
   232c4:	10801cd8 	cmpnei	r2,r2,115
   232c8:	1000151e 	bne	r2,zero,23320 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   232cc:	e0bffe17 	ldw	r2,-8(fp)
   232d0:	10c00104 	addi	r3,r2,4
   232d4:	e0fffe15 	stw	r3,-8(fp)
   232d8:	10800017 	ldw	r2,0(r2)
   232dc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   232e0:	00000906 	br	23308 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   232e4:	e0bffa17 	ldw	r2,-24(fp)
   232e8:	10c00044 	addi	r3,r2,1
   232ec:	e0fffa15 	stw	r3,-24(fp)
   232f0:	10800003 	ldbu	r2,0(r2)
   232f4:	10803fcc 	andi	r2,r2,255
   232f8:	1080201c 	xori	r2,r2,128
   232fc:	10bfe004 	addi	r2,r2,-128
   23300:	1009883a 	mov	r4,r2
   23304:	002335c0 	call	2335c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   23308:	e0bffa17 	ldw	r2,-24(fp)
   2330c:	10800003 	ldbu	r2,0(r2)
   23310:	10803fcc 	andi	r2,r2,255
   23314:	1080201c 	xori	r2,r2,128
   23318:	10bfe004 	addi	r2,r2,-128
   2331c:	103ff11e 	bne	r2,zero,232e4 <__alt_data_end+0xfc0232e4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   23320:	e0bff717 	ldw	r2,-36(fp)
   23324:	10c00044 	addi	r3,r2,1
   23328:	e0fff715 	stw	r3,-36(fp)
   2332c:	10800003 	ldbu	r2,0(r2)
   23330:	e0bff805 	stb	r2,-32(fp)
   23334:	e0bff807 	ldb	r2,-32(fp)
   23338:	103f8a1e 	bne	r2,zero,23164 <__alt_data_end+0xfc023164>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2333c:	00000106 	br	23344 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   23340:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   23344:	0001883a 	nop
   23348:	e037883a 	mov	sp,fp
   2334c:	dfc00117 	ldw	ra,4(sp)
   23350:	df000017 	ldw	fp,0(sp)
   23354:	dec00504 	addi	sp,sp,20
   23358:	f800283a 	ret

0002335c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2335c:	defffd04 	addi	sp,sp,-12
   23360:	dfc00215 	stw	ra,8(sp)
   23364:	df000115 	stw	fp,4(sp)
   23368:	df000104 	addi	fp,sp,4
   2336c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   23370:	d0a5af17 	ldw	r2,-26948(gp)
   23374:	10800217 	ldw	r2,8(r2)
   23378:	100b883a 	mov	r5,r2
   2337c:	e13fff17 	ldw	r4,-4(fp)
   23380:	0017da00 	call	17da0 <putc>
#endif
#endif
}
   23384:	e037883a 	mov	sp,fp
   23388:	dfc00117 	ldw	ra,4(sp)
   2338c:	df000017 	ldw	fp,0(sp)
   23390:	dec00204 	addi	sp,sp,8
   23394:	f800283a 	ret

00023398 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23398:	defffa04 	addi	sp,sp,-24
   2339c:	df000515 	stw	fp,20(sp)
   233a0:	df000504 	addi	fp,sp,20
   233a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   233a8:	0005303a 	rdctl	r2,status
   233ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   233b0:	e0fffc17 	ldw	r3,-16(fp)
   233b4:	00bfff84 	movi	r2,-2
   233b8:	1884703a 	and	r2,r3,r2
   233bc:	1001703a 	wrctl	status,r2
  
  return context;
   233c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   233c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   233c8:	e0bfff17 	ldw	r2,-4(fp)
   233cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   233d0:	e0bffd17 	ldw	r2,-12(fp)
   233d4:	10800017 	ldw	r2,0(r2)
   233d8:	e0fffd17 	ldw	r3,-12(fp)
   233dc:	18c00117 	ldw	r3,4(r3)
   233e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   233e4:	e0bffd17 	ldw	r2,-12(fp)
   233e8:	10800117 	ldw	r2,4(r2)
   233ec:	e0fffd17 	ldw	r3,-12(fp)
   233f0:	18c00017 	ldw	r3,0(r3)
   233f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   233f8:	e0bffd17 	ldw	r2,-12(fp)
   233fc:	e0fffd17 	ldw	r3,-12(fp)
   23400:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23404:	e0bffd17 	ldw	r2,-12(fp)
   23408:	e0fffd17 	ldw	r3,-12(fp)
   2340c:	10c00015 	stw	r3,0(r2)
   23410:	e0bffb17 	ldw	r2,-20(fp)
   23414:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23418:	e0bffe17 	ldw	r2,-8(fp)
   2341c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   23420:	0001883a 	nop
   23424:	e037883a 	mov	sp,fp
   23428:	df000017 	ldw	fp,0(sp)
   2342c:	dec00104 	addi	sp,sp,4
   23430:	f800283a 	ret

00023434 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23434:	defffb04 	addi	sp,sp,-20
   23438:	dfc00415 	stw	ra,16(sp)
   2343c:	df000315 	stw	fp,12(sp)
   23440:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23444:	d0a5be17 	ldw	r2,-26888(gp)
   23448:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2344c:	d0b24c17 	ldw	r2,-14032(gp)
   23450:	10800044 	addi	r2,r2,1
   23454:	d0b24c15 	stw	r2,-14032(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23458:	00002e06 	br	23514 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2345c:	e0bffd17 	ldw	r2,-12(fp)
   23460:	10800017 	ldw	r2,0(r2)
   23464:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   23468:	e0bffd17 	ldw	r2,-12(fp)
   2346c:	10800403 	ldbu	r2,16(r2)
   23470:	10803fcc 	andi	r2,r2,255
   23474:	10000426 	beq	r2,zero,23488 <alt_tick+0x54>
   23478:	d0b24c17 	ldw	r2,-14032(gp)
   2347c:	1000021e 	bne	r2,zero,23488 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23480:	e0bffd17 	ldw	r2,-12(fp)
   23484:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23488:	e0bffd17 	ldw	r2,-12(fp)
   2348c:	10800217 	ldw	r2,8(r2)
   23490:	d0f24c17 	ldw	r3,-14032(gp)
   23494:	18801d36 	bltu	r3,r2,2350c <alt_tick+0xd8>
   23498:	e0bffd17 	ldw	r2,-12(fp)
   2349c:	10800403 	ldbu	r2,16(r2)
   234a0:	10803fcc 	andi	r2,r2,255
   234a4:	1000191e 	bne	r2,zero,2350c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   234a8:	e0bffd17 	ldw	r2,-12(fp)
   234ac:	10800317 	ldw	r2,12(r2)
   234b0:	e0fffd17 	ldw	r3,-12(fp)
   234b4:	18c00517 	ldw	r3,20(r3)
   234b8:	1809883a 	mov	r4,r3
   234bc:	103ee83a 	callr	r2
   234c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   234c4:	e0bfff17 	ldw	r2,-4(fp)
   234c8:	1000031e 	bne	r2,zero,234d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   234cc:	e13ffd17 	ldw	r4,-12(fp)
   234d0:	00233980 	call	23398 <alt_alarm_stop>
   234d4:	00000d06 	br	2350c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   234d8:	e0bffd17 	ldw	r2,-12(fp)
   234dc:	10c00217 	ldw	r3,8(r2)
   234e0:	e0bfff17 	ldw	r2,-4(fp)
   234e4:	1887883a 	add	r3,r3,r2
   234e8:	e0bffd17 	ldw	r2,-12(fp)
   234ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   234f0:	e0bffd17 	ldw	r2,-12(fp)
   234f4:	10c00217 	ldw	r3,8(r2)
   234f8:	d0b24c17 	ldw	r2,-14032(gp)
   234fc:	1880032e 	bgeu	r3,r2,2350c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23500:	e0bffd17 	ldw	r2,-12(fp)
   23504:	00c00044 	movi	r3,1
   23508:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2350c:	e0bffe17 	ldw	r2,-8(fp)
   23510:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23514:	e0fffd17 	ldw	r3,-12(fp)
   23518:	d0a5be04 	addi	r2,gp,-26888
   2351c:	18bfcf1e 	bne	r3,r2,2345c <__alt_data_end+0xfc02345c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23520:	0001883a 	nop
}
   23524:	0001883a 	nop
   23528:	e037883a 	mov	sp,fp
   2352c:	dfc00117 	ldw	ra,4(sp)
   23530:	df000017 	ldw	fp,0(sp)
   23534:	dec00204 	addi	sp,sp,8
   23538:	f800283a 	ret

0002353c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2353c:	deffff04 	addi	sp,sp,-4
   23540:	df000015 	stw	fp,0(sp)
   23544:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   23548:	000170fa 	wrctl	ienable,zero
}
   2354c:	0001883a 	nop
   23550:	e037883a 	mov	sp,fp
   23554:	df000017 	ldw	fp,0(sp)
   23558:	dec00104 	addi	sp,sp,4
   2355c:	f800283a 	ret

00023560 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23560:	defffb04 	addi	sp,sp,-20
   23564:	dfc00415 	stw	ra,16(sp)
   23568:	df000315 	stw	fp,12(sp)
   2356c:	df000304 	addi	fp,sp,12
   23570:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23574:	d0a5b417 	ldw	r2,-26928(gp)
   23578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2357c:	00003106 	br	23644 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23580:	e0bffd17 	ldw	r2,-12(fp)
   23584:	10800217 	ldw	r2,8(r2)
   23588:	1009883a 	mov	r4,r2
   2358c:	000f5800 	call	f580 <strlen>
   23590:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23594:	e0bffd17 	ldw	r2,-12(fp)
   23598:	10c00217 	ldw	r3,8(r2)
   2359c:	e0bffe17 	ldw	r2,-8(fp)
   235a0:	10bfffc4 	addi	r2,r2,-1
   235a4:	1885883a 	add	r2,r3,r2
   235a8:	10800003 	ldbu	r2,0(r2)
   235ac:	10803fcc 	andi	r2,r2,255
   235b0:	1080201c 	xori	r2,r2,128
   235b4:	10bfe004 	addi	r2,r2,-128
   235b8:	10800bd8 	cmpnei	r2,r2,47
   235bc:	1000031e 	bne	r2,zero,235cc <alt_find_file+0x6c>
    {
      len -= 1;
   235c0:	e0bffe17 	ldw	r2,-8(fp)
   235c4:	10bfffc4 	addi	r2,r2,-1
   235c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   235cc:	e0bffe17 	ldw	r2,-8(fp)
   235d0:	e0ffff17 	ldw	r3,-4(fp)
   235d4:	1885883a 	add	r2,r3,r2
   235d8:	10800003 	ldbu	r2,0(r2)
   235dc:	10803fcc 	andi	r2,r2,255
   235e0:	1080201c 	xori	r2,r2,128
   235e4:	10bfe004 	addi	r2,r2,-128
   235e8:	10800be0 	cmpeqi	r2,r2,47
   235ec:	1000081e 	bne	r2,zero,23610 <alt_find_file+0xb0>
   235f0:	e0bffe17 	ldw	r2,-8(fp)
   235f4:	e0ffff17 	ldw	r3,-4(fp)
   235f8:	1885883a 	add	r2,r3,r2
   235fc:	10800003 	ldbu	r2,0(r2)
   23600:	10803fcc 	andi	r2,r2,255
   23604:	1080201c 	xori	r2,r2,128
   23608:	10bfe004 	addi	r2,r2,-128
   2360c:	10000a1e 	bne	r2,zero,23638 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23610:	e0bffd17 	ldw	r2,-12(fp)
   23614:	10800217 	ldw	r2,8(r2)
   23618:	e0fffe17 	ldw	r3,-8(fp)
   2361c:	180d883a 	mov	r6,r3
   23620:	e17fff17 	ldw	r5,-4(fp)
   23624:	1009883a 	mov	r4,r2
   23628:	00238140 	call	23814 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2362c:	1000021e 	bne	r2,zero,23638 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   23630:	e0bffd17 	ldw	r2,-12(fp)
   23634:	00000706 	br	23654 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23638:	e0bffd17 	ldw	r2,-12(fp)
   2363c:	10800017 	ldw	r2,0(r2)
   23640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23644:	e0fffd17 	ldw	r3,-12(fp)
   23648:	d0a5b404 	addi	r2,gp,-26928
   2364c:	18bfcc1e 	bne	r3,r2,23580 <__alt_data_end+0xfc023580>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   23650:	0005883a 	mov	r2,zero
}
   23654:	e037883a 	mov	sp,fp
   23658:	dfc00117 	ldw	ra,4(sp)
   2365c:	df000017 	ldw	fp,0(sp)
   23660:	dec00204 	addi	sp,sp,8
   23664:	f800283a 	ret

00023668 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23668:	defffa04 	addi	sp,sp,-24
   2366c:	dfc00515 	stw	ra,20(sp)
   23670:	df000415 	stw	fp,16(sp)
   23674:	dc000315 	stw	r16,12(sp)
   23678:	df000404 	addi	fp,sp,16
   2367c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   23680:	00bffa04 	movi	r2,-24
   23684:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23688:	e03ffc15 	stw	zero,-16(fp)
   2368c:	00001d06 	br	23704 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   23690:	040000f4 	movhi	r16,3
   23694:	842d4604 	addi	r16,r16,-19176
   23698:	e0bffc17 	ldw	r2,-16(fp)
   2369c:	01400304 	movi	r5,12
   236a0:	1009883a 	mov	r4,r2
   236a4:	000cf040 	call	cf04 <__mulsi3>
   236a8:	8085883a 	add	r2,r16,r2
   236ac:	10800017 	ldw	r2,0(r2)
   236b0:	1000111e 	bne	r2,zero,236f8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   236b4:	040000f4 	movhi	r16,3
   236b8:	842d4604 	addi	r16,r16,-19176
   236bc:	e0bffc17 	ldw	r2,-16(fp)
   236c0:	01400304 	movi	r5,12
   236c4:	1009883a 	mov	r4,r2
   236c8:	000cf040 	call	cf04 <__mulsi3>
   236cc:	8085883a 	add	r2,r16,r2
   236d0:	e0fffe17 	ldw	r3,-8(fp)
   236d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   236d8:	d0e5b817 	ldw	r3,-26912(gp)
   236dc:	e0bffc17 	ldw	r2,-16(fp)
   236e0:	1880020e 	bge	r3,r2,236ec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   236e4:	e0bffc17 	ldw	r2,-16(fp)
   236e8:	d0a5b815 	stw	r2,-26912(gp)
      }
      rc = i;
   236ec:	e0bffc17 	ldw	r2,-16(fp)
   236f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   236f4:	00000606 	br	23710 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   236f8:	e0bffc17 	ldw	r2,-16(fp)
   236fc:	10800044 	addi	r2,r2,1
   23700:	e0bffc15 	stw	r2,-16(fp)
   23704:	e0bffc17 	ldw	r2,-16(fp)
   23708:	10800810 	cmplti	r2,r2,32
   2370c:	103fe01e 	bne	r2,zero,23690 <__alt_data_end+0xfc023690>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   23710:	e0bffd17 	ldw	r2,-12(fp)
}
   23714:	e6ffff04 	addi	sp,fp,-4
   23718:	dfc00217 	ldw	ra,8(sp)
   2371c:	df000117 	ldw	fp,4(sp)
   23720:	dc000017 	ldw	r16,0(sp)
   23724:	dec00304 	addi	sp,sp,12
   23728:	f800283a 	ret

0002372c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2372c:	defffe04 	addi	sp,sp,-8
   23730:	df000115 	stw	fp,4(sp)
   23734:	df000104 	addi	fp,sp,4
   23738:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2373c:	e0bfff17 	ldw	r2,-4(fp)
   23740:	10bffe84 	addi	r2,r2,-6
   23744:	10c00428 	cmpgeui	r3,r2,16
   23748:	18001a1e 	bne	r3,zero,237b4 <alt_exception_cause_generated_bad_addr+0x88>
   2374c:	100690ba 	slli	r3,r2,2
   23750:	008000b4 	movhi	r2,2
   23754:	108dd904 	addi	r2,r2,14180
   23758:	1885883a 	add	r2,r3,r2
   2375c:	10800017 	ldw	r2,0(r2)
   23760:	1000683a 	jmp	r2
   23764:	000237a4 	muli	zero,zero,2270
   23768:	000237a4 	muli	zero,zero,2270
   2376c:	000237b4 	movhi	zero,2270
   23770:	000237b4 	movhi	zero,2270
   23774:	000237b4 	movhi	zero,2270
   23778:	000237a4 	muli	zero,zero,2270
   2377c:	000237ac 	andhi	zero,zero,2270
   23780:	000237b4 	movhi	zero,2270
   23784:	000237a4 	muli	zero,zero,2270
   23788:	000237a4 	muli	zero,zero,2270
   2378c:	000237b4 	movhi	zero,2270
   23790:	000237a4 	muli	zero,zero,2270
   23794:	000237ac 	andhi	zero,zero,2270
   23798:	000237b4 	movhi	zero,2270
   2379c:	000237b4 	movhi	zero,2270
   237a0:	000237a4 	muli	zero,zero,2270
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   237a4:	00800044 	movi	r2,1
   237a8:	00000306 	br	237b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   237ac:	0005883a 	mov	r2,zero
   237b0:	00000106 	br	237b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   237b4:	0005883a 	mov	r2,zero
  }
}
   237b8:	e037883a 	mov	sp,fp
   237bc:	df000017 	ldw	fp,0(sp)
   237c0:	dec00104 	addi	sp,sp,4
   237c4:	f800283a 	ret

000237c8 <atexit>:
   237c8:	200b883a 	mov	r5,r4
   237cc:	000f883a 	mov	r7,zero
   237d0:	000d883a 	mov	r6,zero
   237d4:	0009883a 	mov	r4,zero
   237d8:	00238901 	jmpi	23890 <__register_exitproc>

000237dc <exit>:
   237dc:	defffe04 	addi	sp,sp,-8
   237e0:	000b883a 	mov	r5,zero
   237e4:	dc000015 	stw	r16,0(sp)
   237e8:	dfc00115 	stw	ra,4(sp)
   237ec:	2021883a 	mov	r16,r4
   237f0:	00239a80 	call	239a8 <__call_exitprocs>
   237f4:	008000f4 	movhi	r2,3
   237f8:	10b77a04 	addi	r2,r2,-8728
   237fc:	11000017 	ldw	r4,0(r2)
   23800:	20800f17 	ldw	r2,60(r4)
   23804:	10000126 	beq	r2,zero,2380c <exit+0x30>
   23808:	103ee83a 	callr	r2
   2380c:	8009883a 	mov	r4,r16
   23810:	001f0700 	call	1f070 <_exit>

00023814 <memcmp>:
   23814:	01c000c4 	movi	r7,3
   23818:	3980192e 	bgeu	r7,r6,23880 <memcmp+0x6c>
   2381c:	2144b03a 	or	r2,r4,r5
   23820:	11c4703a 	and	r2,r2,r7
   23824:	10000f26 	beq	r2,zero,23864 <memcmp+0x50>
   23828:	20800003 	ldbu	r2,0(r4)
   2382c:	28c00003 	ldbu	r3,0(r5)
   23830:	10c0151e 	bne	r2,r3,23888 <memcmp+0x74>
   23834:	31bfff84 	addi	r6,r6,-2
   23838:	01ffffc4 	movi	r7,-1
   2383c:	00000406 	br	23850 <memcmp+0x3c>
   23840:	20800003 	ldbu	r2,0(r4)
   23844:	28c00003 	ldbu	r3,0(r5)
   23848:	31bfffc4 	addi	r6,r6,-1
   2384c:	10c00e1e 	bne	r2,r3,23888 <memcmp+0x74>
   23850:	21000044 	addi	r4,r4,1
   23854:	29400044 	addi	r5,r5,1
   23858:	31fff91e 	bne	r6,r7,23840 <__alt_data_end+0xfc023840>
   2385c:	0005883a 	mov	r2,zero
   23860:	f800283a 	ret
   23864:	20c00017 	ldw	r3,0(r4)
   23868:	28800017 	ldw	r2,0(r5)
   2386c:	18bfee1e 	bne	r3,r2,23828 <__alt_data_end+0xfc023828>
   23870:	31bfff04 	addi	r6,r6,-4
   23874:	21000104 	addi	r4,r4,4
   23878:	29400104 	addi	r5,r5,4
   2387c:	39bff936 	bltu	r7,r6,23864 <__alt_data_end+0xfc023864>
   23880:	303fe91e 	bne	r6,zero,23828 <__alt_data_end+0xfc023828>
   23884:	003ff506 	br	2385c <__alt_data_end+0xfc02385c>
   23888:	10c5c83a 	sub	r2,r2,r3
   2388c:	f800283a 	ret

00023890 <__register_exitproc>:
   23890:	defffa04 	addi	sp,sp,-24
   23894:	dc000315 	stw	r16,12(sp)
   23898:	040000f4 	movhi	r16,3
   2389c:	84377a04 	addi	r16,r16,-8728
   238a0:	80c00017 	ldw	r3,0(r16)
   238a4:	dc400415 	stw	r17,16(sp)
   238a8:	dfc00515 	stw	ra,20(sp)
   238ac:	18805217 	ldw	r2,328(r3)
   238b0:	2023883a 	mov	r17,r4
   238b4:	10003726 	beq	r2,zero,23994 <__register_exitproc+0x104>
   238b8:	10c00117 	ldw	r3,4(r2)
   238bc:	010007c4 	movi	r4,31
   238c0:	20c00e16 	blt	r4,r3,238fc <__register_exitproc+0x6c>
   238c4:	1a000044 	addi	r8,r3,1
   238c8:	8800221e 	bne	r17,zero,23954 <__register_exitproc+0xc4>
   238cc:	18c00084 	addi	r3,r3,2
   238d0:	18c7883a 	add	r3,r3,r3
   238d4:	18c7883a 	add	r3,r3,r3
   238d8:	12000115 	stw	r8,4(r2)
   238dc:	10c7883a 	add	r3,r2,r3
   238e0:	19400015 	stw	r5,0(r3)
   238e4:	0005883a 	mov	r2,zero
   238e8:	dfc00517 	ldw	ra,20(sp)
   238ec:	dc400417 	ldw	r17,16(sp)
   238f0:	dc000317 	ldw	r16,12(sp)
   238f4:	dec00604 	addi	sp,sp,24
   238f8:	f800283a 	ret
   238fc:	00800074 	movhi	r2,1
   23900:	10b92104 	addi	r2,r2,-7036
   23904:	10002626 	beq	r2,zero,239a0 <__register_exitproc+0x110>
   23908:	01006404 	movi	r4,400
   2390c:	d9400015 	stw	r5,0(sp)
   23910:	d9800115 	stw	r6,4(sp)
   23914:	d9c00215 	stw	r7,8(sp)
   23918:	000e4840 	call	e484 <malloc>
   2391c:	d9400017 	ldw	r5,0(sp)
   23920:	d9800117 	ldw	r6,4(sp)
   23924:	d9c00217 	ldw	r7,8(sp)
   23928:	10001d26 	beq	r2,zero,239a0 <__register_exitproc+0x110>
   2392c:	81000017 	ldw	r4,0(r16)
   23930:	10000115 	stw	zero,4(r2)
   23934:	02000044 	movi	r8,1
   23938:	22405217 	ldw	r9,328(r4)
   2393c:	0007883a 	mov	r3,zero
   23940:	12400015 	stw	r9,0(r2)
   23944:	20805215 	stw	r2,328(r4)
   23948:	10006215 	stw	zero,392(r2)
   2394c:	10006315 	stw	zero,396(r2)
   23950:	883fde26 	beq	r17,zero,238cc <__alt_data_end+0xfc0238cc>
   23954:	18c9883a 	add	r4,r3,r3
   23958:	2109883a 	add	r4,r4,r4
   2395c:	1109883a 	add	r4,r2,r4
   23960:	21802215 	stw	r6,136(r4)
   23964:	01800044 	movi	r6,1
   23968:	12406217 	ldw	r9,392(r2)
   2396c:	30cc983a 	sll	r6,r6,r3
   23970:	4992b03a 	or	r9,r9,r6
   23974:	12406215 	stw	r9,392(r2)
   23978:	21c04215 	stw	r7,264(r4)
   2397c:	01000084 	movi	r4,2
   23980:	893fd21e 	bne	r17,r4,238cc <__alt_data_end+0xfc0238cc>
   23984:	11006317 	ldw	r4,396(r2)
   23988:	218cb03a 	or	r6,r4,r6
   2398c:	11806315 	stw	r6,396(r2)
   23990:	003fce06 	br	238cc <__alt_data_end+0xfc0238cc>
   23994:	18805304 	addi	r2,r3,332
   23998:	18805215 	stw	r2,328(r3)
   2399c:	003fc606 	br	238b8 <__alt_data_end+0xfc0238b8>
   239a0:	00bfffc4 	movi	r2,-1
   239a4:	003fd006 	br	238e8 <__alt_data_end+0xfc0238e8>

000239a8 <__call_exitprocs>:
   239a8:	defff504 	addi	sp,sp,-44
   239ac:	df000915 	stw	fp,36(sp)
   239b0:	dd400615 	stw	r21,24(sp)
   239b4:	dc800315 	stw	r18,12(sp)
   239b8:	dfc00a15 	stw	ra,40(sp)
   239bc:	ddc00815 	stw	r23,32(sp)
   239c0:	dd800715 	stw	r22,28(sp)
   239c4:	dd000515 	stw	r20,20(sp)
   239c8:	dcc00415 	stw	r19,16(sp)
   239cc:	dc400215 	stw	r17,8(sp)
   239d0:	dc000115 	stw	r16,4(sp)
   239d4:	d9000015 	stw	r4,0(sp)
   239d8:	2839883a 	mov	fp,r5
   239dc:	04800044 	movi	r18,1
   239e0:	057fffc4 	movi	r21,-1
   239e4:	008000f4 	movhi	r2,3
   239e8:	10b77a04 	addi	r2,r2,-8728
   239ec:	12000017 	ldw	r8,0(r2)
   239f0:	45005217 	ldw	r20,328(r8)
   239f4:	44c05204 	addi	r19,r8,328
   239f8:	a0001c26 	beq	r20,zero,23a6c <__call_exitprocs+0xc4>
   239fc:	a0800117 	ldw	r2,4(r20)
   23a00:	15ffffc4 	addi	r23,r2,-1
   23a04:	b8000d16 	blt	r23,zero,23a3c <__call_exitprocs+0x94>
   23a08:	14000044 	addi	r16,r2,1
   23a0c:	8421883a 	add	r16,r16,r16
   23a10:	8421883a 	add	r16,r16,r16
   23a14:	84402004 	addi	r17,r16,128
   23a18:	a463883a 	add	r17,r20,r17
   23a1c:	a421883a 	add	r16,r20,r16
   23a20:	e0001e26 	beq	fp,zero,23a9c <__call_exitprocs+0xf4>
   23a24:	80804017 	ldw	r2,256(r16)
   23a28:	e0801c26 	beq	fp,r2,23a9c <__call_exitprocs+0xf4>
   23a2c:	bdffffc4 	addi	r23,r23,-1
   23a30:	843fff04 	addi	r16,r16,-4
   23a34:	8c7fff04 	addi	r17,r17,-4
   23a38:	bd7ff91e 	bne	r23,r21,23a20 <__alt_data_end+0xfc023a20>
   23a3c:	00800074 	movhi	r2,1
   23a40:	10b92604 	addi	r2,r2,-7016
   23a44:	10000926 	beq	r2,zero,23a6c <__call_exitprocs+0xc4>
   23a48:	a0800117 	ldw	r2,4(r20)
   23a4c:	1000301e 	bne	r2,zero,23b10 <__call_exitprocs+0x168>
   23a50:	a0800017 	ldw	r2,0(r20)
   23a54:	10003226 	beq	r2,zero,23b20 <__call_exitprocs+0x178>
   23a58:	a009883a 	mov	r4,r20
   23a5c:	98800015 	stw	r2,0(r19)
   23a60:	000e4980 	call	e498 <free>
   23a64:	9d000017 	ldw	r20,0(r19)
   23a68:	a03fe41e 	bne	r20,zero,239fc <__alt_data_end+0xfc0239fc>
   23a6c:	dfc00a17 	ldw	ra,40(sp)
   23a70:	df000917 	ldw	fp,36(sp)
   23a74:	ddc00817 	ldw	r23,32(sp)
   23a78:	dd800717 	ldw	r22,28(sp)
   23a7c:	dd400617 	ldw	r21,24(sp)
   23a80:	dd000517 	ldw	r20,20(sp)
   23a84:	dcc00417 	ldw	r19,16(sp)
   23a88:	dc800317 	ldw	r18,12(sp)
   23a8c:	dc400217 	ldw	r17,8(sp)
   23a90:	dc000117 	ldw	r16,4(sp)
   23a94:	dec00b04 	addi	sp,sp,44
   23a98:	f800283a 	ret
   23a9c:	a0800117 	ldw	r2,4(r20)
   23aa0:	80c00017 	ldw	r3,0(r16)
   23aa4:	10bfffc4 	addi	r2,r2,-1
   23aa8:	15c01426 	beq	r2,r23,23afc <__call_exitprocs+0x154>
   23aac:	80000015 	stw	zero,0(r16)
   23ab0:	183fde26 	beq	r3,zero,23a2c <__alt_data_end+0xfc023a2c>
   23ab4:	95c8983a 	sll	r4,r18,r23
   23ab8:	a0806217 	ldw	r2,392(r20)
   23abc:	a5800117 	ldw	r22,4(r20)
   23ac0:	2084703a 	and	r2,r4,r2
   23ac4:	10000b26 	beq	r2,zero,23af4 <__call_exitprocs+0x14c>
   23ac8:	a0806317 	ldw	r2,396(r20)
   23acc:	2088703a 	and	r4,r4,r2
   23ad0:	20000c1e 	bne	r4,zero,23b04 <__call_exitprocs+0x15c>
   23ad4:	89400017 	ldw	r5,0(r17)
   23ad8:	d9000017 	ldw	r4,0(sp)
   23adc:	183ee83a 	callr	r3
   23ae0:	a0800117 	ldw	r2,4(r20)
   23ae4:	15bfbf1e 	bne	r2,r22,239e4 <__alt_data_end+0xfc0239e4>
   23ae8:	98800017 	ldw	r2,0(r19)
   23aec:	153fcf26 	beq	r2,r20,23a2c <__alt_data_end+0xfc023a2c>
   23af0:	003fbc06 	br	239e4 <__alt_data_end+0xfc0239e4>
   23af4:	183ee83a 	callr	r3
   23af8:	003ff906 	br	23ae0 <__alt_data_end+0xfc023ae0>
   23afc:	a5c00115 	stw	r23,4(r20)
   23b00:	003feb06 	br	23ab0 <__alt_data_end+0xfc023ab0>
   23b04:	89000017 	ldw	r4,0(r17)
   23b08:	183ee83a 	callr	r3
   23b0c:	003ff406 	br	23ae0 <__alt_data_end+0xfc023ae0>
   23b10:	a0800017 	ldw	r2,0(r20)
   23b14:	a027883a 	mov	r19,r20
   23b18:	1029883a 	mov	r20,r2
   23b1c:	003fb606 	br	239f8 <__alt_data_end+0xfc0239f8>
   23b20:	0005883a 	mov	r2,zero
   23b24:	003ffb06 	br	23b14 <__alt_data_end+0xfc023b14>
   23b28:	01110bff 	0x1110bff
   23b2c:	01010004 	movi	r4,1024
   23b30:	7f000105 	stb	fp,4(r15)
   23b34:	007d0000 	call	7d000 <_gp+0x488d0>
   23b38:	00000000 	call	0 <__alt_mem_sdram>
   23b3c:	01883a00 	call	1883a0 <_gp+0x153c70>
   23b40:	010d0bff 	0x10d0bff
   23b44:	01010002 	0x1010002
	...
   23b50:	010d0bff 	0x10d0bff
   23b54:	01010004 	movi	r4,1024
   23b58:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23b5c:	00000000 	call	0 <__alt_mem_sdram>
   23b60:	0000a418 	cmpnei	zero,zero,656
   23b64:	0000cbec 	andhi	zero,zero,815
