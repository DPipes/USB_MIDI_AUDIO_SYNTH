
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000153dc memsz 0x000153dc flags r-x
    LOAD off    0x000163fc vaddr 0x000153fc paddr 0x00016f68 align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00018ad4 vaddr 0x00018ad4 paddr 0x00018ad4 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014aac  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000720  00014cdc  00014cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  000153fc  00016f68  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  00018ad4  00018ad4  00018ad4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00018dbc  00018dbc  00017f68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00017f68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001048  00000000  00000000  00017f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000286d5  00000000  00000000  00018fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a27f  00000000  00000000  000416ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb70  00000000  00000000  0004b92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002fb4  00000000  00000000  0005849c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004d90  00000000  00000000  0005b450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  000601e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00077cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  00077d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007d792  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007d795  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007d79a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007d79b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007d79c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007d7a0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007d7a4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007d7a8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007d7b3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0007d7be  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  0007d7c9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0007d7dd  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  0007d808  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008a058  00000000  00000000  00082c8f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00014cdc l    d  .rodata	00000000 .rodata
000153fc l    d  .rwdata	00000000 .rwdata
00018ad4 l    d  .bss	00000000 .bss
00018dbc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SGTL5000.c
00000000 l    df *ABS*	00000000 main.c
00016f10 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
00018ae4 l     O .bss	00000004 usb_delay.2608
00018ae8 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015116 l     O .rodata	00000010 zeroes.4404
00005928 l     F .text	000000bc __sbprintf
00015126 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005b38 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007690 l     F .text	00000008 __fp_unlock
000076a4 l     F .text	0000019c __sinit.part.1
00007840 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001542c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00015870 l     O .rwdata	00000020 lc_ctype_charset
00015850 l     O .rwdata	00000020 lc_message_charset
00015890 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00015158 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ae7c l     F .text	000000fc __sprint_r.part.0
0001527c l     O .rodata	00000010 zeroes.4349
0000c4b8 l     F .text	000000bc __sbprintf
0001528c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00010324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010438 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010640 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001072c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016f50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010d50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010e8c l     F .text	00000034 alt_dev_reg
00015e78 l     O .rwdata	00000038 i2c_0
00015eb0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00010f6c l     F .text	00000110 optional_irq_callback
000110cc l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012da8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00012fb4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000137e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013b80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014070 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000141d0 l     F .text	0000003c alt_get_errno
0001420c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018b20 g     O .bss	00000004 alt_instruction_exception_handler
000034ac g     F .text	00000018 putchar
0000a358 g     F .text	00000074 _mprec_log10
0000a444 g     F .text	0000008c __any_on
0000cbc4 g     F .text	00000054 _isatty_r
00015164 g     O .rodata	00000028 __mprec_tinytens
00010844 g     F .text	0000007c alt_main
00016f14 g     O .rwdata	00000008 ctrl_xfers
000034c4 g     F .text	000000c0 _puts_r
00018cbc g     O .bss	00000100 alt_irq
000006e0 g     F .text	000000a8 SGTL5000init
0000cc18 g     F .text	00000060 _lseek_r
00002a10 g     F .text	00000644 USB_Task
00016f68 g       *ABS*	00000000 __flash_rwdata_start
00000304 g     F .text	000001a4 I2Cbytes_wr
0000ecfc g     F .text	00000088 .hidden __eqdf2
00018dbc g       *ABS*	00000000 __alt_heap_start
00003468 g     F .text	0000003c printf
0000ccd8 g     F .text	0000009c _wcrtomb_r
00001b34 g     F .text	00000088 kbdPoll
0000ad3c g     F .text	0000005c __sseek
000079f0 g     F .text	00000010 __sinit
0000c574 g     F .text	00000140 __swbuf_r
000084c4 g     F .text	0000007c _setlocale_r
00007848 g     F .text	00000078 __sfmoreglue
000117c4 g     F .text	000000a8 alt_avalon_i2c_rx_read
000108e4 g     F .text	00000024 __malloc_unlock
000007f4 g     F .text	000001f0 GetDriverandReport
000129dc g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00011548 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00009194 g     F .text	0000015c memmove
000079d8 g     F .text	00000018 _cleanup
0001222c g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00009418 g     F .text	000000a8 _Balloc
00001c88 g     F .text	00000084 MAXreg_wr
000153fc g     O .rwdata	00000030 ClientDriverTable
0000ed84 g     F .text	000000dc .hidden __gtdf2
000146bc g     F .text	00000024 altera_nios2_gen2_irq_init
00003054 g     F .text	0000002c MSDProbe
00000000 g     F .entry	0000000c __reset
00002510 g     F .text	000000e8 XferCtrlData
00000020 g       *ABS*	00000000 __flash_exceptions_start
00018b24 g     O .bss	00000010 hid_ep
0000cb68 g     F .text	0000005c _fstat_r
00018b04 g     O .bss	00000004 errno
0000026c g     F .text	00000098 I2Creg_wr
0000acb8 g     F .text	00000008 __seofread
00018b0c g     O .bss	00000004 alt_argv
0001ef10 g       *ABS*	00000000 _gp
00010d20 g     F .text	00000030 usleep
00012a20 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00001e70 g     F .text	00000078 MAXreg_rd
000116d8 g     F .text	00000044 alt_avalon_i2c_is_busy
00015cf8 g     O .rwdata	00000180 alt_fd_list
00001a6c g     F .text	00000040 HID_init
000034a4 g     F .text	00000008 _putchar_r
0001147c g     F .text	000000cc alt_avalon_i2c_master_config_set
00013d20 g     F .text	00000090 alt_find_dev
0000904c g     F .text	00000148 memcpy
00007698 g     F .text	0000000c _cleanup_r
0001013c g     F .text	000000dc .hidden __floatsidf
00014154 g     F .text	0000007c alt_io_redirect
0000ee60 g     F .text	000000f4 .hidden __ltdf2
00014cdc g       *ABS*	00000000 __DTOR_END__
0001206c g     F .text	000001c0 alt_avalon_i2c_master_transmit
00003584 g     F .text	00000014 puts
000148ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000ab9c g     F .text	00000074 __fpclassifyd
0000a2b4 g     F .text	000000a4 __ratio
0000c49c g     F .text	0000001c __vfiprintf_internal
000131ac g     F .text	0000021c altera_avalon_jtag_uart_read
00003438 g     F .text	00000030 _printf_r
00003354 g     F .text	00000064 .hidden __udivsi3
00010594 g     F .text	000000ac isatty
000151b4 g     O .rodata	000000c8 __mprec_tens
00008540 g     F .text	0000000c __locale_charset
000112e8 g     F .text	00000098 alt_avalon_i2c_enable
00018b00 g     O .bss	00000004 __malloc_top_pad
00012910 g     F .text	00000068 alt_avalon_i2c_int_disable
00016f1c g     O .rwdata	00000001 usb_task_state
00016f28 g     O .rwdata	00000004 __mb_cur_max
00008570 g     F .text	0000000c _localeconv_r
0000984c g     F .text	0000003c __i2b
00007e74 g     F .text	000004c8 __sfvwrite_r
0000ac10 g     F .text	00000054 _sbrk_r
0000cc78 g     F .text	00000060 _read_r
000021c4 g     F .text	00000094 MAX3421E_init
00000ce0 g     F .text	00000038 setKeycode
00016f48 g     O .rwdata	00000004 alt_max_fd
0000c85c g     F .text	000000f0 _fclose_r
00007660 g     F .text	00000030 fflush
00018afc g     O .bss	00000004 __malloc_max_sbrked_mem
00012438 g     F .text	00000210 alt_avalon_i2c_master_receive
0000da80 g     F .text	000008ac .hidden __adddf3
0000a05c g     F .text	0000010c __b2d
0000d4bc g     F .text	000005c4 .hidden __umoddi3
00010768 g     F .text	000000dc lseek
00012978 g     F .text	00000064 alt_avalon_i2c_int_enable
00016f20 g     O .rwdata	00000004 _global_impure_ptr
0000a638 g     F .text	00000564 _realloc_r
00018dbc g       *ABS*	00000000 __bss_end
00013f80 g     F .text	000000f0 alt_iic_isr_register
00010c18 g     F .text	00000108 alt_tick
0000cec0 g     F .text	000005fc .hidden __udivdi3
00012838 g     F .text	00000058 alt_avalon_i2c_int_status_get
0000cac4 g     F .text	00000024 _fputwc_r
0001518c g     O .rodata	00000028 __mprec_bigtens
00009630 g     F .text	00000104 __s2b
00010218 g     F .text	000000a8 .hidden __floatunsidf
00009d9c g     F .text	00000060 __mcmp
00007a10 g     F .text	00000018 __fp_lock_all
00013f34 g     F .text	0000004c alt_ic_irq_enabled
00010b7c g     F .text	0000009c alt_alarm_stop
00011168 g     F .text	00000054 alt_avalon_i2c_register_callback
00018b1c g     O .bss	00000004 alt_irq_active
000111bc g     F .text	000000ec alt_avalon_i2c_init
0000311c g     F .text	0000002c DummyProbe
000000fc g     F .exceptions	000000d4 alt_irq_handler
00015cd0 g     O .rwdata	00000028 alt_dev_null
00001aac g     F .text	00000088 mousePoll
00002018 g     F .text	00000024 Vbus_power
00013b60 g     F .text	00000020 alt_dcache_flush_all
00009734 g     F .text	00000068 __hi0bits
000100bc g     F .text	00000080 .hidden __fixdfsi
00016f68 g       *ABS*	00000000 __ram_rwdata_end
00016f40 g     O .rwdata	00000008 alt_dev_list
00010d8c g     F .text	00000100 write
0000a4d0 g     F .text	000000a0 _putc_r
00011af8 g     F .text	0000004c alt_avalon_i2c_check_arblost
000128d4 g     F .text	0000003c alt_avalon_i2c_int_clear
000153fc g       *ABS*	00000000 __ram_rodata_end
00018ae9 g     O .bss	00000001 usb_error
000104a0 g     F .text	000000b8 fstat
0000ee60 g     F .text	000000f4 .hidden __ledf2
00016f5c g     O .rwdata	00000008 alt_avalon_i2c_list
00009b14 g     F .text	00000140 __pow5mult
0000af90 g     F .text	0000150c ___vfiprintf_internal_r
00018af4 g     O .bss	00000004 __nlocale_changed
000033b8 g     F .text	00000058 .hidden __umodsi3
00018dbc g       *ABS*	00000000 end
00012ce8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000112a8 g     F .text	00000040 alt_avalon_i2c_open
0000266c g     F .text	0000017c XferDispatchPkt
00014cdc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00011c80 g     F .text	000000e8 alt_avalon_i2c_master_tx
00013860 g     F .text	0000007c alt_avalon_timer_sc_init
000102c0 g     F .text	00000064 .hidden __clzsi2
000133c8 g     F .text	00000224 altera_avalon_jtag_uart_write
00007a00 g     F .text	00000004 __sfp_lock_acquire
00008f68 g     F .text	000000e4 memchr
00003630 g     F .text	000022dc ___vfprintf_internal_r
00002390 g     F .text	00000034 MaxGpxHandler
00007b64 g     F .text	00000310 _free_r
00014454 g     F .text	0000022c alt_printf
0000854c g     F .text	00000010 __locale_mb_cur_max
00014b28 g     F .text	00000180 __call_exitprocs
000004a8 g     F .text	000000a0 I2Creg_rd
00018af0 g     O .bss	00000004 __mlocale_changed
0001107c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00016f2c g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00018b14 g     O .bss	00000004 _alt_tick_rate
00001ee8 g     F .text	00000088 MAXbytes_rd
00012648 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00012a6c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00009c54 g     F .text	00000148 __lshift
000135ec g     F .text	000001fc alt_avalon_spi_command
00018b18 g     O .bss	00000004 _alt_nticks
00010944 g     F .text	00000104 read
00010ef8 g     F .text	00000074 alt_sys_init
00018c74 g     O .bss	00000048 devtable
00014a10 g     F .text	00000118 __register_exitproc
00001664 g     F .text	00000408 HIDKProbe
00018b34 g     O .bss	00000018 msd_ep
00011ea4 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00009888 g     F .text	0000028c __multiply
00013054 g     F .text	00000068 altera_avalon_jtag_uart_close
00002978 g     F .text	00000098 USB_init
00003410 g     F .text	00000028 .hidden __mulsi3
00018b74 g     O .bss	00000100 bigbuf
000153fc g       *ABS*	00000000 __ram_rwdata_start
00014cdc g       *ABS*	00000000 __ram_rodata_start
00018b4c g     O .bss	00000028 __malloc_current_mallinfo
00018ae0 g     O .bss	00000001 last_usb_task_state
0000a168 g     F .text	0000014c __d2b
00018ad8 g     O .bss	00000008 dev0ep
00000a30 g     F .text	00000050 clearLED
00012b84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000147e8 g     F .text	000000c4 alt_get_fd
00013a08 g     F .text	00000158 alt_busy_sleep
00003080 g     F .text	00000038 MSDEventHandler
0000c72c g     F .text	00000054 _close_r
00014994 g     F .text	0000007c memcmp
0001171c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00012c44 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018dbc g       *ABS*	00000000 __alt_stack_base
00012c94 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000059e4 g     F .text	00000154 __swsetup_r
0000e32c g     F .text	000009d0 .hidden __divdf3
000078c0 g     F .text	00000118 __sfp
0000a3cc g     F .text	00000078 __copybits
000158c8 g     O .rwdata	00000408 __malloc_av_
00007a0c g     F .text	00000004 __sinit_lock_release
000030e4 g     F .text	00000038 CDCEventHandler
0000ef54 g     F .text	0000086c .hidden __muldf3
00003148 g     F .text	00000038 DummyEventHandler
0000ac64 g     F .text	00000054 __sread
000146e0 g     F .text	00000108 alt_find_file
00013bbc g     F .text	000000a4 alt_dev_llist_insert
000108c0 g     F .text	00000024 __malloc_lock
00010acc g     F .text	000000b0 sbrk
00011b44 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00011aac g     F .text	0000004c alt_avalon_i2c_check_nack
00007604 g     F .text	0000005c _fflush_r
0000c780 g     F .text	000000dc _calloc_r
00018ad4 g       *ABS*	00000000 __bss_start
0000203c g     F .text	00000188 MAX_busprobe
00018ad4 g     O .bss	00000002 hid_device
000092f0 g     F .text	00000128 memset
00000d18 g     F .text	00000544 main
00002258 g     F .text	0000006c MAX3421E_Task
00011a78 g     F .text	00000034 alt_avalon_i2c_master_target_set
00018b10 g     O .bss	00000004 alt_envp
00018af8 g     O .bss	00000004 __malloc_max_total_mem
00012be4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c6b4 g     F .text	00000018 __swbuf
000031d8 g     F .text	00000084 ConvUTF8ToStr
00012890 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000ad98 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c94c g     F .text	00000014 fclose
00005d60 g     F .text	00001688 _dtoa_r
0000875c g     F .text	0000080c _malloc_r
0000ce34 g     F .text	00000030 __ascii_wctomb
00016f4c g     O .rwdata	00000004 alt_errno
0000833c g     F .text	000000c4 _fwalk
0000a570 g     F .text	000000c8 putc
0000325c g     F .text	00000084 .hidden __divsi3
000027e8 g     F .text	00000190 XferInTransfer
00000ba0 g     F .text	00000140 printSignedHex1
00007a40 g     F .text	00000124 _malloc_trim_r
00014cdc g       *ABS*	00000000 __CTOR_END__
000031a0 g     F .text	00000038 GetDevtable
0000ada0 g     F .text	000000dc strcmp
00014cdc g       *ABS*	00000000 __flash_rodata_start
00014cdc g       *ABS*	00000000 __DTOR_LIST__
000025f8 g     F .text	00000074 XferCtrlND
0000ecfc g     F .text	00000088 .hidden __nedf2
00001f70 g     F .text	000000a8 MAX3421E_reset
00010ec0 g     F .text	00000038 alt_irq_init
00010a48 g     F .text	00000084 alt_release_fd
0001529c g     O .rodata	00000100 .hidden __clz_tab
00018aec g     O .bss	00000004 _PathLocale
00014948 g     F .text	00000014 atexit
0000c6cc g     F .text	00000060 _write_r
0000857c g     F .text	00000018 setlocale
00016f24 g     O .rwdata	00000004 _impure_ptr
00018b08 g     O .bss	00000004 alt_argc
000073e8 g     F .text	0000021c __sflush_r
00013cc0 g     F .text	00000060 _do_dtors
00008568 g     F .text	00000008 __locale_cjk_lang
00011a40 g     F .text	00000038 alt_avalon_i2c_master_target_get
00011950 g     F .text	000000f0 alt_avalon_i2c_send_address
00001d0c g     F .text	00000164 MAXbytes_wr
00000020 g       .exceptions	00000000 alt_irq_entry
00009ff8 g     F .text	00000064 __ulp
00007a28 g     F .text	00000018 __fp_unlock_all
00016f38 g     O .rwdata	00000008 alt_fs_list
000030b8 g     F .text	0000002c CDCProbe
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008594 g     F .text	0000000c localeconv
000009e4 g     F .text	0000004c setLED
00003180 g     F .text	00000020 GetUsbTaskState
00012b1c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00013dd0 g     F .text	00000050 alt_ic_isr_register
00011380 g     F .text	0000004c alt_avalon_i2c_disable
00014d7c g     O .rodata	00000010 devclasses
00016f68 g       *ABS*	00000000 _edata
00001bf4 g     F .text	00000038 HIDKEventHandler
00018dbc g       *ABS*	00000000 _end
000022c4 g     F .text	000000cc MaxIntHandler
0000c960 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
000130bc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000113cc g     F .text	000000b0 alt_avalon_i2c_master_config_get
00001c2c g     F .text	00000034 SPI_init
00013ea8 g     F .text	0000008c alt_ic_irq_disable
0000acc0 g     F .text	0000007c __swrite
00000548 g     F .text	00000198 I2Cbytes_rd
00016f30 g     O .rwdata	00000004 __malloc_trim_threshold
0000855c g     F .text	0000000c __locale_msgcharset
0001495c g     F .text	00000038 exit
00008400 g     F .text	000000c4 _fwalk_reent
00009dfc g     F .text	000001fc __mdiff
000032e0 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007a04 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000115dc g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0001186c g     F .text	000000e4 alt_avalon_i2c_cmd_write
00001bbc g     F .text	00000038 HIDMEventHandler
00014ca8 g     F .text	00000034 _exit
000138dc g     F .text	0000012c alt_alarm_start
00000a80 g     F .text	00000120 printSignedHex0
000085a0 g     F .text	000001bc __smakebuf_r
00003598 g     F .text	00000098 strlen
000142f8 g     F .text	0000015c open
0000ed84 g     F .text	000000dc .hidden __gedf2
00014680 g     F .text	0000003c alt_putchar
00016f34 g     O .rwdata	00000004 __wctomb
0000af78 g     F .text	00000018 __sprint_r
00013db0 g     F .text	00000020 alt_icache_flush_all
00016f64 g     O .rwdata	00000004 alt_priority_mask
00013e20 g     F .text	00000088 alt_ic_irq_enable
0000590c g     F .text	0000001c __vfprintf_internal
0000125c g     F .text	00000408 HIDMProbe
0000ce64 g     F .text	0000005c _wctomb_r
00001c60 g     F .text	00000028 SPI_wr
0000f7c0 g     F .text	000008fc .hidden __subdf3
0000979c g     F .text	000000b0 __lo0bits
00016f54 g     O .rwdata	00000008 alt_alarm_list
00013c60 g     F .text	00000060 _do_ctors
0000cd74 g     F .text	000000c0 wcrtomb
00010360 g     F .text	000000d8 close
00012ad0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00000788 g     F .text	0000006c SGTL5000audio_on
000106a8 g     F .text	00000084 alt_load
00011d68 g     F .text	0000013c alt_avalon_i2c_master_rx
0000cae8 g     F .text	00000080 fputwc
00007a08 g     F .text	00000004 __sinit_lock_acquire
000023c4 g     F .text	0000014c XferCtrlReq
000094e8 g     F .text	00000148 __multadd
000094c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a32f04 	addi	r2,r2,-29508
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a32f04 	addi	r2,r2,-29508
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a70417 	ldw	r2,-25584(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a70417 	ldw	r2,-25584(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6bbc414 	ori	gp,gp,61200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a2b514 	ori	r2,r2,35540

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18e36f14 	ori	r3,r3,36284

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00106a80 	call	106a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00108440 	call	10844 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <I2Creg_wr>:
#include <unistd.h>

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
     26c:	defff904 	addi	sp,sp,-28
     270:	dfc00615 	stw	ra,24(sp)
     274:	df000515 	stw	fp,20(sp)
     278:	df000504 	addi	fp,sp,20
     27c:	e13ffd15 	stw	r4,-12(fp)
     280:	2807883a 	mov	r3,r5
     284:	3005883a 	mov	r2,r6
     288:	e0fffe05 	stb	r3,-8(fp)
     28c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
     290:	e0bfff0b 	ldhu	r2,-4(fp)
     294:	1004d23a 	srli	r2,r2,8
     298:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
     29c:	e0bfff0b 	ldhu	r2,-4(fp)
     2a0:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
     2a4:	e03ffb85 	stb	zero,-18(fp)
     2a8:	e0bffe03 	ldbu	r2,-8(fp)
     2ac:	e0bffbc5 	stb	r2,-17(fp)
     2b0:	e0bffb03 	ldbu	r2,-20(fp)
     2b4:	e0bffc05 	stb	r2,-16(fp)
     2b8:	e0bffb43 	ldbu	r2,-19(fp)
     2bc:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     2c0:	e0bffb84 	addi	r2,fp,-18
     2c4:	000f883a 	mov	r7,zero
     2c8:	01800104 	movi	r6,4
     2cc:	100b883a 	mov	r5,r2
     2d0:	e13ffd17 	ldw	r4,-12(fp)
     2d4:	0011c800 	call	11c80 <alt_avalon_i2c_master_tx>
     2d8:	10000426 	beq	r2,zero,2ec <I2Creg_wr+0x80>
		printf("I2C Register Write Error");
     2dc:	01000074 	movhi	r4,1
     2e0:	21133704 	addi	r4,r4,19676
     2e4:	00034680 	call	3468 <printf>
	}
	return;
     2e8:	0001883a 	nop
     2ec:	0001883a 	nop
}
     2f0:	e037883a 	mov	sp,fp
     2f4:	dfc00117 	ldw	ra,4(sp)
     2f8:	df000017 	ldw	fp,0(sp)
     2fc:	dec00204 	addi	sp,sp,8
     300:	f800283a 	ret

00000304 <I2Cbytes_wr>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
     304:	defff604 	addi	sp,sp,-40
     308:	dfc00915 	stw	ra,36(sp)
     30c:	df000815 	stw	fp,32(sp)
     310:	dc000715 	stw	r16,28(sp)
     314:	df000804 	addi	fp,sp,32
     318:	e13ffb15 	stw	r4,-20(fp)
     31c:	3009883a 	mov	r4,r6
     320:	e1fffe15 	stw	r7,-8(fp)
     324:	e17ffc05 	stb	r5,-16(fp)
     328:	e13ffd05 	stb	r4,-12(fp)
     32c:	d809883a 	mov	r4,sp
     330:	2021883a 	mov	r16,r4
	alt_u8 txbuffer[2*nwords+2];
     334:	e13ffd03 	ldbu	r4,-12(fp)
     338:	21000044 	addi	r4,r4,1
     33c:	2109883a 	add	r4,r4,r4
     340:	217fffc4 	addi	r5,r4,-1
     344:	e17ff915 	stw	r5,-28(fp)
     348:	200b883a 	mov	r5,r4
     34c:	2819883a 	mov	r12,r5
     350:	001b883a 	mov	r13,zero
     354:	600ad77a 	srli	r5,r12,29
     358:	681290fa 	slli	r9,r13,3
     35c:	2a52b03a 	or	r9,r5,r9
     360:	601090fa 	slli	r8,r12,3
     364:	200b883a 	mov	r5,r4
     368:	2815883a 	mov	r10,r5
     36c:	0017883a 	mov	r11,zero
     370:	500ad77a 	srli	r5,r10,29
     374:	580690fa 	slli	r3,r11,3
     378:	28c6b03a 	or	r3,r5,r3
     37c:	500490fa 	slli	r2,r10,3
     380:	2005883a 	mov	r2,r4
     384:	108000c4 	addi	r2,r2,3
     388:	1004d0ba 	srli	r2,r2,2
     38c:	1085883a 	add	r2,r2,r2
     390:	1085883a 	add	r2,r2,r2
     394:	d8b7c83a 	sub	sp,sp,r2
     398:	d805883a 	mov	r2,sp
     39c:	1005883a 	mov	r2,r2
     3a0:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
     3a4:	e0bffa17 	ldw	r2,-24(fp)
     3a8:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
     3ac:	e0bffa17 	ldw	r2,-24(fp)
     3b0:	e0fffc03 	ldbu	r3,-16(fp)
     3b4:	10c00045 	stb	r3,1(r2)
	int i = 0;
     3b8:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
     3bc:	e03ff815 	stw	zero,-32(fp)
     3c0:	00001d06 	br	438 <I2Cbytes_wr+0x134>
		txbuffer[i+2] = data[i] >> 8;
     3c4:	e0bff817 	ldw	r2,-32(fp)
     3c8:	10c00084 	addi	r3,r2,2
     3cc:	e0bff817 	ldw	r2,-32(fp)
     3d0:	1085883a 	add	r2,r2,r2
     3d4:	1009883a 	mov	r4,r2
     3d8:	e0bffe17 	ldw	r2,-8(fp)
     3dc:	1105883a 	add	r2,r2,r4
     3e0:	1080000b 	ldhu	r2,0(r2)
     3e4:	10bfffcc 	andi	r2,r2,65535
     3e8:	1004d23a 	srli	r2,r2,8
     3ec:	1009883a 	mov	r4,r2
     3f0:	e0bffa17 	ldw	r2,-24(fp)
     3f4:	10c5883a 	add	r2,r2,r3
     3f8:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
     3fc:	e0bff817 	ldw	r2,-32(fp)
     400:	10c000c4 	addi	r3,r2,3
     404:	e0bff817 	ldw	r2,-32(fp)
     408:	1085883a 	add	r2,r2,r2
     40c:	1009883a 	mov	r4,r2
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	1105883a 	add	r2,r2,r4
     418:	1080000b 	ldhu	r2,0(r2)
     41c:	1009883a 	mov	r4,r2
     420:	e0bffa17 	ldw	r2,-24(fp)
     424:	10c5883a 	add	r2,r2,r3
     428:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
     42c:	e0bff817 	ldw	r2,-32(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bff815 	stw	r2,-32(fp)
     438:	e0bffd03 	ldbu	r2,-12(fp)
     43c:	e0fff817 	ldw	r3,-32(fp)
     440:	18bfe016 	blt	r3,r2,3c4 <__alt_data_end+0xfc0003c4>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     444:	e0fffa17 	ldw	r3,-24(fp)
     448:	e0bffd03 	ldbu	r2,-12(fp)
     44c:	10800044 	addi	r2,r2,1
     450:	1085883a 	add	r2,r2,r2
     454:	000f883a 	mov	r7,zero
     458:	100d883a 	mov	r6,r2
     45c:	180b883a 	mov	r5,r3
     460:	e13ffb17 	ldw	r4,-20(fp)
     464:	0011c800 	call	11c80 <alt_avalon_i2c_master_tx>
     468:	10000326 	beq	r2,zero,478 <I2Cbytes_wr+0x174>
		printf("I2C Bytes Write Error");
     46c:	01000074 	movhi	r4,1
     470:	21133e04 	addi	r4,r4,19704
     474:	00034680 	call	3468 <printf>
	}
	return (data+nwords);
     478:	e0bffd03 	ldbu	r2,-12(fp)
     47c:	1085883a 	add	r2,r2,r2
     480:	1007883a 	mov	r3,r2
     484:	e0bffe17 	ldw	r2,-8(fp)
     488:	10c5883a 	add	r2,r2,r3
     48c:	8037883a 	mov	sp,r16
}
     490:	e6ffff04 	addi	sp,fp,-4
     494:	dfc00217 	ldw	ra,8(sp)
     498:	df000117 	ldw	fp,4(sp)
     49c:	dc000017 	ldw	r16,0(sp)
     4a0:	dec00304 	addi	sp,sp,12
     4a4:	f800283a 	ret

000004a8 <I2Creg_rd>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
     4a8:	defff804 	addi	sp,sp,-32
     4ac:	dfc00715 	stw	ra,28(sp)
     4b0:	df000615 	stw	fp,24(sp)
     4b4:	df000604 	addi	fp,sp,24
     4b8:	e13ffe15 	stw	r4,-8(fp)
     4bc:	2805883a 	mov	r2,r5
     4c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
     4c4:	e03ffc85 	stb	zero,-14(fp)
     4c8:	e0bfff03 	ldbu	r2,-4(fp)
     4cc:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
     4d0:	e03ffd05 	stb	zero,-12(fp)
     4d4:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     4d8:	e13ffd04 	addi	r4,fp,-12
     4dc:	e0fffc84 	addi	r3,fp,-14
     4e0:	d8000115 	stw	zero,4(sp)
     4e4:	00800084 	movi	r2,2
     4e8:	d8800015 	stw	r2,0(sp)
     4ec:	200f883a 	mov	r7,r4
     4f0:	01800084 	movi	r6,2
     4f4:	180b883a 	mov	r5,r3
     4f8:	e13ffe17 	ldw	r4,-8(fp)
     4fc:	0011ea40 	call	11ea4 <alt_avalon_i2c_master_tx_rx>
     500:	10000326 	beq	r2,zero,510 <I2Creg_rd+0x68>
		printf("I2C Register Read Error");
     504:	01000074 	movhi	r4,1
     508:	21134404 	addi	r4,r4,19728
     50c:	00034680 	call	3468 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
     510:	e0bffd03 	ldbu	r2,-12(fp)
     514:	10803fcc 	andi	r2,r2,255
     518:	1004923a 	slli	r2,r2,8
     51c:	1007883a 	mov	r3,r2
     520:	e0bffd43 	ldbu	r2,-11(fp)
     524:	10803fcc 	andi	r2,r2,255
     528:	1884b03a 	or	r2,r3,r2
     52c:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
     530:	e0bffc0b 	ldhu	r2,-16(fp)
}
     534:	e037883a 	mov	sp,fp
     538:	dfc00117 	ldw	ra,4(sp)
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00204 	addi	sp,sp,8
     544:	f800283a 	ret

00000548 <I2Cbytes_rd>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
     548:	defff304 	addi	sp,sp,-52
     54c:	dfc00c15 	stw	ra,48(sp)
     550:	df000b15 	stw	fp,44(sp)
     554:	dc000a15 	stw	r16,40(sp)
     558:	df000b04 	addi	fp,sp,44
     55c:	e13ffb15 	stw	r4,-20(fp)
     560:	3009883a 	mov	r4,r6
     564:	e1fffe15 	stw	r7,-8(fp)
     568:	e17ffc05 	stb	r5,-16(fp)
     56c:	e13ffd05 	stb	r4,-12(fp)
     570:	d809883a 	mov	r4,sp
     574:	2021883a 	mov	r16,r4
	alt_u8 txbuffer[2] = {0x00, reg};
     578:	e03ffa05 	stb	zero,-24(fp)
     57c:	e13ffc03 	ldbu	r4,-16(fp)
     580:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
     584:	e13ffd03 	ldbu	r4,-12(fp)
     588:	2109883a 	add	r4,r4,r4
     58c:	217fffc4 	addi	r5,r4,-1
     590:	e17ff815 	stw	r5,-32(fp)
     594:	200b883a 	mov	r5,r4
     598:	2819883a 	mov	r12,r5
     59c:	001b883a 	mov	r13,zero
     5a0:	600ad77a 	srli	r5,r12,29
     5a4:	681290fa 	slli	r9,r13,3
     5a8:	2a52b03a 	or	r9,r5,r9
     5ac:	601090fa 	slli	r8,r12,3
     5b0:	200b883a 	mov	r5,r4
     5b4:	2815883a 	mov	r10,r5
     5b8:	0017883a 	mov	r11,zero
     5bc:	500ad77a 	srli	r5,r10,29
     5c0:	580690fa 	slli	r3,r11,3
     5c4:	28c6b03a 	or	r3,r5,r3
     5c8:	500490fa 	slli	r2,r10,3
     5cc:	2005883a 	mov	r2,r4
     5d0:	108000c4 	addi	r2,r2,3
     5d4:	1004d0ba 	srli	r2,r2,2
     5d8:	1085883a 	add	r2,r2,r2
     5dc:	1085883a 	add	r2,r2,r2
     5e0:	d8b7c83a 	sub	sp,sp,r2
     5e4:	d8800204 	addi	r2,sp,8
     5e8:	1005883a 	mov	r2,r2
     5ec:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
     5f0:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
     5f4:	e0fff917 	ldw	r3,-28(fp)
     5f8:	e0bffd03 	ldbu	r2,-12(fp)
     5fc:	1085883a 	add	r2,r2,r2
     600:	1009883a 	mov	r4,r2
     604:	e0bffa04 	addi	r2,fp,-24
     608:	d8000115 	stw	zero,4(sp)
     60c:	d9000015 	stw	r4,0(sp)
     610:	180f883a 	mov	r7,r3
     614:	01800084 	movi	r6,2
     618:	100b883a 	mov	r5,r2
     61c:	e13ffb17 	ldw	r4,-20(fp)
     620:	0011ea40 	call	11ea4 <alt_avalon_i2c_master_tx_rx>
     624:	10000326 	beq	r2,zero,634 <I2Cbytes_rd+0xec>
		printf("I2C Bytes Read Error");
     628:	01000074 	movhi	r4,1
     62c:	21134a04 	addi	r4,r4,19752
     630:	00034680 	call	3468 <printf>
	}
	for(i = 0; i < nwords; i++) {
     634:	e03ff715 	stw	zero,-36(fp)
     638:	00001a06 	br	6a4 <I2Cbytes_rd+0x15c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
     63c:	e0bff717 	ldw	r2,-36(fp)
     640:	1085883a 	add	r2,r2,r2
     644:	1007883a 	mov	r3,r2
     648:	e0bffe17 	ldw	r2,-8(fp)
     64c:	10c7883a 	add	r3,r2,r3
     650:	e0bff717 	ldw	r2,-36(fp)
     654:	1085883a 	add	r2,r2,r2
     658:	1009883a 	mov	r4,r2
     65c:	e0bff917 	ldw	r2,-28(fp)
     660:	1105883a 	add	r2,r2,r4
     664:	10800003 	ldbu	r2,0(r2)
     668:	10803fcc 	andi	r2,r2,255
     66c:	1004923a 	slli	r2,r2,8
     670:	100b883a 	mov	r5,r2
     674:	e0bff717 	ldw	r2,-36(fp)
     678:	1085883a 	add	r2,r2,r2
     67c:	10800044 	addi	r2,r2,1
     680:	e13ff917 	ldw	r4,-28(fp)
     684:	2085883a 	add	r2,r4,r2
     688:	10800003 	ldbu	r2,0(r2)
     68c:	10803fcc 	andi	r2,r2,255
     690:	2884b03a 	or	r2,r5,r2
     694:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
     698:	e0bff717 	ldw	r2,-36(fp)
     69c:	10800044 	addi	r2,r2,1
     6a0:	e0bff715 	stw	r2,-36(fp)
     6a4:	e0bffd03 	ldbu	r2,-12(fp)
     6a8:	e0fff717 	ldw	r3,-36(fp)
     6ac:	18bfe316 	blt	r3,r2,63c <__alt_data_end+0xfc00063c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
     6b0:	e0bffd03 	ldbu	r2,-12(fp)
     6b4:	1085883a 	add	r2,r2,r2
     6b8:	1007883a 	mov	r3,r2
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10c5883a 	add	r2,r2,r3
     6c4:	8037883a 	mov	sp,r16
}
     6c8:	e6ffff04 	addi	sp,fp,-4
     6cc:	dfc00217 	ldw	ra,8(sp)
     6d0:	df000117 	ldw	fp,4(sp)
     6d4:	dc000017 	ldw	r16,0(sp)
     6d8:	dec00304 	addi	sp,sp,12
     6dc:	f800283a 	ret

000006e0 <SGTL5000init>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
     6e0:	defffd04 	addi	sp,sp,-12
     6e4:	dfc00215 	stw	ra,8(sp)
     6e8:	df000115 	stw	fp,4(sp)
     6ec:	df000104 	addi	fp,sp,4
     6f0:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
     6f4:	01400284 	movi	r5,10
     6f8:	e13fff17 	ldw	r4,-4(fp)
     6fc:	0011a780 	call	11a78 <alt_avalon_i2c_master_target_set>

	//Writes parameters to registers

	I2Creg_wr(dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | VAG_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP);
     700:	019ebf04 	movi	r6,31484
     704:	01400c04 	movi	r5,48
     708:	e13fff17 	ldw	r4,-4(fp)
     70c:	000026c0 	call	26c <I2Creg_wr>

	//Maybe needed?
	I2Creg_wr(dev, REF_CTRL, 0x004E);
     710:	01801384 	movi	r6,78
     714:	01400a04 	movi	r5,40
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, LINE_OUT_CTRL, 0x0322);
     720:	0180c884 	movi	r6,802
     724:	01400b04 	movi	r5,44
     728:	e13fff17 	ldw	r4,-4(fp)
     72c:	000026c0 	call	26c <I2Creg_wr>

	I2Creg_wr(dev, DIG_POWER, DAC_POWERUP_DIG | I2S_IN_POWERUP);
     730:	01800844 	movi	r6,33
     734:	01400084 	movi	r5,2
     738:	e13fff17 	ldw	r4,-4(fp)
     73c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
     740:	01800104 	movi	r6,4
     744:	01400104 	movi	r5,4
     748:	e13fff17 	ldw	r4,-4(fp)
     74c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, I2S_CTRL, DLEN_24);
     750:	01800404 	movi	r6,16
     754:	01400184 	movi	r5,6
     758:	e13fff17 	ldw	r4,-4(fp)
     75c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
     760:	01800404 	movi	r6,16
     764:	01400284 	movi	r5,10
     768:	e13fff17 	ldw	r4,-4(fp)
     76c:	000026c0 	call	26c <I2Creg_wr>

}
     770:	0001883a 	nop
     774:	e037883a 	mov	sp,fp
     778:	dfc00117 	ldw	ra,4(sp)
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00204 	addi	sp,sp,8
     784:	f800283a 	ret

00000788 <SGTL5000audio_on>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
     788:	defffd04 	addi	sp,sp,-12
     78c:	dfc00215 	stw	ra,8(sp)
     790:	df000115 	stw	fp,4(sp)
     794:	df000104 	addi	fp,sp,4
     798:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, HP_VOL_INIT);
     79c:	01860604 	movi	r6,6168
     7a0:	01400884 	movi	r5,34
     7a4:	e13fff17 	ldw	r4,-4(fp)
     7a8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, DAC_VOL, DAC_VOL_INIT);
     7ac:	01901004 	movi	r6,16448
     7b0:	01400404 	movi	r5,16
     7b4:	e13fff17 	ldw	r4,-4(fp)
     7b8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
     7bc:	01808004 	movi	r6,512
     7c0:	01400384 	movi	r5,14
     7c4:	e13fff17 	ldw	r4,-4(fp)
     7c8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, ANA_CTRL, MUTE_LO | !MUTE_HP | MUTE_ADC);
     7cc:	01804044 	movi	r6,257
     7d0:	01400904 	movi	r5,36
     7d4:	e13fff17 	ldw	r4,-4(fp)
     7d8:	000026c0 	call	26c <I2Creg_wr>

}
     7dc:	0001883a 	nop
     7e0:	e037883a 	mov	sp,fp
     7e4:	dfc00117 	ldw	ra,4(sp)
     7e8:	df000017 	ldw	fp,0(sp)
     7ec:	dec00204 	addi	sp,sp,8
     7f0:	f800283a 	ret

000007f4 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
     7f4:	defff604 	addi	sp,sp,-40
     7f8:	dfc00915 	stw	ra,36(sp)
     7fc:	df000815 	stw	fp,32(sp)
     800:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
     804:	00bfffc4 	movi	r2,-1
     808:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
     80c:	01000074 	movhi	r4,1
     810:	21136304 	addi	r4,r4,19852
     814:	00035840 	call	3584 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
     818:	00800044 	movi	r2,1
     81c:	e0bffd05 	stb	r2,-12(fp)
     820:	00001f06 	br	8a0 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
     824:	e0bffd03 	ldbu	r2,-12(fp)
     828:	1009883a 	mov	r4,r2
     82c:	00031a00 	call	31a0 <GetDevtable>
     830:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
     834:	e0bffe17 	ldw	r2,-8(fp)
     838:	10800017 	ldw	r2,0(r2)
     83c:	10001526 	beq	r2,zero,894 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
     840:	e0bffd03 	ldbu	r2,-12(fp)
     844:	100b883a 	mov	r5,r2
     848:	01000074 	movhi	r4,1
     84c:	21136c04 	addi	r4,r4,19888
     850:	00034680 	call	3468 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
     854:	e0bffe17 	ldw	r2,-8(fp)
     858:	10800103 	ldbu	r2,4(r2)
     85c:	10c03fcc 	andi	r3,r2,255
     860:	00800074 	movhi	r2,1
     864:	10935f04 	addi	r2,r2,19836
     868:	18c7883a 	add	r3,r3,r3
     86c:	18c7883a 	add	r3,r3,r3
     870:	10c5883a 	add	r2,r2,r3
     874:	10800017 	ldw	r2,0(r2)
     878:	100b883a 	mov	r5,r2
     87c:	01000074 	movhi	r4,1
     880:	21136f04 	addi	r4,r4,19900
     884:	00034680 	call	3468 <printf>
			device = tpl_ptr->devclass;
     888:	e0bffe17 	ldw	r2,-8(fp)
     88c:	10800103 	ldbu	r2,4(r2)
     890:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
     894:	e0bffd03 	ldbu	r2,-12(fp)
     898:	10800044 	addi	r2,r2,1
     89c:	e0bffd05 	stb	r2,-12(fp)
     8a0:	e0bffd03 	ldbu	r2,-12(fp)
     8a4:	10800230 	cmpltui	r2,r2,8
     8a8:	103fde1e 	bne	r2,zero,824 <__alt_data_end+0xfc000824>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
     8ac:	d0a00003 	ldbu	r2,-32768(gp)
     8b0:	11003fcc 	andi	r4,r2,255
     8b4:	d0a6f143 	ldbu	r2,-25659(gp)
     8b8:	10803fcc 	andi	r2,r2,255
     8bc:	e0ffff44 	addi	r3,fp,-3
     8c0:	d8c00415 	stw	r3,16(sp)
     8c4:	00c00044 	movi	r3,1
     8c8:	d8c00315 	stw	r3,12(sp)
     8cc:	d8800215 	stw	r2,8(sp)
     8d0:	d8000115 	stw	zero,4(sp)
     8d4:	d8000015 	stw	zero,0(sp)
     8d8:	01c00084 	movi	r7,2
     8dc:	01802844 	movi	r6,161
     8e0:	000b883a 	mov	r5,zero
     8e4:	00023c40 	call	23c4 <XferCtrlReq>
     8e8:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
     8ec:	e0bfff03 	ldbu	r2,-4(fp)
     8f0:	10000926 	beq	r2,zero,918 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
     8f4:	01000074 	movhi	r4,1
     8f8:	21137104 	addi	r4,r4,19908
     8fc:	00034680 	call	3468 <printf>
		printf("%x \n", rcode);
     900:	e0bfff03 	ldbu	r2,-4(fp)
     904:	100b883a 	mov	r5,r2
     908:	01000074 	movhi	r4,1
     90c:	21137804 	addi	r4,r4,19936
     910:	00034680 	call	3468 <printf>
     914:	00000906 	br	93c <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
     918:	01000074 	movhi	r4,1
     91c:	21137a04 	addi	r4,r4,19944
     920:	00034680 	call	3468 <printf>
		printf("%x \n", tmpbyte);
     924:	e0bfff43 	ldbu	r2,-3(fp)
     928:	10803fcc 	andi	r2,r2,255
     92c:	100b883a 	mov	r5,r2
     930:	01000074 	movhi	r4,1
     934:	21137804 	addi	r4,r4,19936
     938:	00034680 	call	3468 <printf>
	}
	printf("Protocol: ");
     93c:	01000074 	movhi	r4,1
     940:	21137e04 	addi	r4,r4,19960
     944:	00034680 	call	3468 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
     948:	d0a00003 	ldbu	r2,-32768(gp)
     94c:	11003fcc 	andi	r4,r2,255
     950:	d0a6f143 	ldbu	r2,-25659(gp)
     954:	10803fcc 	andi	r2,r2,255
     958:	e0ffff44 	addi	r3,fp,-3
     95c:	d8c00415 	stw	r3,16(sp)
     960:	00c00044 	movi	r3,1
     964:	d8c00315 	stw	r3,12(sp)
     968:	d8800215 	stw	r2,8(sp)
     96c:	d8000115 	stw	zero,4(sp)
     970:	d8000015 	stw	zero,0(sp)
     974:	01c000c4 	movi	r7,3
     978:	01802844 	movi	r6,161
     97c:	000b883a 	mov	r5,zero
     980:	00023c40 	call	23c4 <XferCtrlReq>
     984:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
     988:	e0bfff03 	ldbu	r2,-4(fp)
     98c:	10000926 	beq	r2,zero,9b4 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
     990:	01000074 	movhi	r4,1
     994:	21138104 	addi	r4,r4,19972
     998:	00034680 	call	3468 <printf>
		printf("%x \n", rcode);
     99c:	e0bfff03 	ldbu	r2,-4(fp)
     9a0:	100b883a 	mov	r5,r2
     9a4:	01000074 	movhi	r4,1
     9a8:	21137804 	addi	r4,r4,19936
     9ac:	00034680 	call	3468 <printf>
     9b0:	00000606 	br	9cc <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
     9b4:	e0bfff43 	ldbu	r2,-3(fp)
     9b8:	10803fcc 	andi	r2,r2,255
     9bc:	100b883a 	mov	r5,r2
     9c0:	01000074 	movhi	r4,1
     9c4:	21138804 	addi	r4,r4,20000
     9c8:	00034680 	call	3468 <printf>
	}
	return device;
     9cc:	e0bffd43 	ldbu	r2,-11(fp)
}
     9d0:	e037883a 	mov	sp,fp
     9d4:	dfc00117 	ldw	ra,4(sp)
     9d8:	df000017 	ldw	fp,0(sp)
     9dc:	dec00204 	addi	sp,sp,8
     9e0:	f800283a 	ret

000009e4 <setLED>:

void setLED(int LED) {
     9e4:	defffe04 	addi	sp,sp,-8
     9e8:	df000115 	stw	fp,4(sp)
     9ec:	df000104 	addi	fp,sp,4
     9f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
     9f4:	00810034 	movhi	r2,1024
     9f8:	10849004 	addi	r2,r2,4672
     9fc:	10c00037 	ldwio	r3,0(r2)
     a00:	01000044 	movi	r4,1
     a04:	e0bfff17 	ldw	r2,-4(fp)
     a08:	2084983a 	sll	r2,r4,r2
     a0c:	1886b03a 	or	r3,r3,r2
     a10:	00810034 	movhi	r2,1024
     a14:	10849004 	addi	r2,r2,4672
     a18:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
     a1c:	0001883a 	nop
     a20:	e037883a 	mov	sp,fp
     a24:	df000017 	ldw	fp,0(sp)
     a28:	dec00104 	addi	sp,sp,4
     a2c:	f800283a 	ret

00000a30 <clearLED>:

void clearLED(int LED) {
     a30:	defffe04 	addi	sp,sp,-8
     a34:	df000115 	stw	fp,4(sp)
     a38:	df000104 	addi	fp,sp,4
     a3c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
     a40:	00810034 	movhi	r2,1024
     a44:	10849004 	addi	r2,r2,4672
     a48:	10c00037 	ldwio	r3,0(r2)
     a4c:	01000044 	movi	r4,1
     a50:	e0bfff17 	ldw	r2,-4(fp)
     a54:	2084983a 	sll	r2,r4,r2
     a58:	0084303a 	nor	r2,zero,r2
     a5c:	1886703a 	and	r3,r3,r2
     a60:	00810034 	movhi	r2,1024
     a64:	10849004 	addi	r2,r2,4672
     a68:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
     a6c:	0001883a 	nop
     a70:	e037883a 	mov	sp,fp
     a74:	df000017 	ldw	fp,0(sp)
     a78:	dec00104 	addi	sp,sp,4
     a7c:	f800283a 	ret

00000a80 <printSignedHex0>:

void printSignedHex0(signed char value) {
     a80:	defffc04 	addi	sp,sp,-16
     a84:	dfc00315 	stw	ra,12(sp)
     a88:	df000215 	stw	fp,8(sp)
     a8c:	df000204 	addi	fp,sp,8
     a90:	2005883a 	mov	r2,r4
     a94:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
     a98:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
     a9c:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
     aa0:	00810034 	movhi	r2,1024
     aa4:	10848404 	addi	r2,r2,4624
     aa8:	10800037 	ldwio	r2,0(r2)
     aac:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
     ab0:	e0bfff07 	ldb	r2,-4(fp)
     ab4:	1000060e 	bge	r2,zero,ad0 <printSignedHex0+0x50>
		setLED(11);
     ab8:	010002c4 	movi	r4,11
     abc:	00009e40 	call	9e4 <setLED>
		value = -value;
     ac0:	e0bfff03 	ldbu	r2,-4(fp)
     ac4:	0085c83a 	sub	r2,zero,r2
     ac8:	e0bfff05 	stb	r2,-4(fp)
     acc:	00000206 	br	ad8 <printSignedHex0+0x58>
	} else {
		clearLED(11);
     ad0:	010002c4 	movi	r4,11
     ad4:	0000a300 	call	a30 <clearLED>
	}
	//handled hundreds
	if (value / 100)
     ad8:	e0bfff03 	ldbu	r2,-4(fp)
     adc:	108018c4 	addi	r2,r2,99
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	108031f0 	cmpltui	r2,r2,199
     ae8:	1000031e 	bne	r2,zero,af8 <printSignedHex0+0x78>
		setLED(13);
     aec:	01000344 	movi	r4,13
     af0:	00009e40 	call	9e4 <setLED>
     af4:	00000206 	br	b00 <printSignedHex0+0x80>
	else
		clearLED(13);
     af8:	01000344 	movi	r4,13
     afc:	0000a300 	call	a30 <clearLED>

	value = value % 100;
     b00:	e0bfff07 	ldb	r2,-4(fp)
     b04:	01401904 	movi	r5,100
     b08:	1009883a 	mov	r4,r2
     b0c:	00032e00 	call	32e0 <__modsi3>
     b10:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
     b14:	e0bfff07 	ldb	r2,-4(fp)
     b18:	01400284 	movi	r5,10
     b1c:	1009883a 	mov	r4,r2
     b20:	000325c0 	call	325c <__divsi3>
     b24:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
     b28:	e0bfff07 	ldb	r2,-4(fp)
     b2c:	01400284 	movi	r5,10
     b30:	1009883a 	mov	r4,r2
     b34:	00032e00 	call	32e0 <__modsi3>
     b38:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
     b3c:	e0bffe8b 	ldhu	r2,-6(fp)
     b40:	10803fcc 	andi	r2,r2,255
     b44:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
     b48:	e0bffe03 	ldbu	r2,-8(fp)
     b4c:	1004933a 	slli	r2,r2,12
     b50:	1007883a 	mov	r3,r2
     b54:	e0bffe8b 	ldhu	r2,-6(fp)
     b58:	1884b03a 	or	r2,r3,r2
     b5c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
     b60:	e0bffe43 	ldbu	r2,-7(fp)
     b64:	1004923a 	slli	r2,r2,8
     b68:	1007883a 	mov	r3,r2
     b6c:	e0bffe8b 	ldhu	r2,-6(fp)
     b70:	1884b03a 	or	r2,r3,r2
     b74:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
     b78:	e0fffe8b 	ldhu	r3,-6(fp)
     b7c:	00810034 	movhi	r2,1024
     b80:	10848404 	addi	r2,r2,4624
     b84:	10c00035 	stwio	r3,0(r2)
}
     b88:	0001883a 	nop
     b8c:	e037883a 	mov	sp,fp
     b90:	dfc00117 	ldw	ra,4(sp)
     b94:	df000017 	ldw	fp,0(sp)
     b98:	dec00204 	addi	sp,sp,8
     b9c:	f800283a 	ret

00000ba0 <printSignedHex1>:

void printSignedHex1(signed char value) {
     ba0:	defffb04 	addi	sp,sp,-20
     ba4:	dfc00415 	stw	ra,16(sp)
     ba8:	df000315 	stw	fp,12(sp)
     bac:	df000304 	addi	fp,sp,12
     bb0:	2005883a 	mov	r2,r4
     bb4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
     bb8:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
     bbc:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
     bc0:	00810034 	movhi	r2,1024
     bc4:	10848404 	addi	r2,r2,4624
     bc8:	10800037 	ldwio	r2,0(r2)
     bcc:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
     bd0:	e0bfff07 	ldb	r2,-4(fp)
     bd4:	1000060e 	bge	r2,zero,bf0 <printSignedHex1+0x50>
		setLED(10);
     bd8:	01000284 	movi	r4,10
     bdc:	00009e40 	call	9e4 <setLED>
		value = -value;
     be0:	e0bfff03 	ldbu	r2,-4(fp)
     be4:	0085c83a 	sub	r2,zero,r2
     be8:	e0bfff05 	stb	r2,-4(fp)
     bec:	00000206 	br	bf8 <printSignedHex1+0x58>
	} else {
		clearLED(10);
     bf0:	01000284 	movi	r4,10
     bf4:	0000a300 	call	a30 <clearLED>
	}
	//handled hundreds
	if (value / 100)
     bf8:	e0bfff03 	ldbu	r2,-4(fp)
     bfc:	108018c4 	addi	r2,r2,99
     c00:	10803fcc 	andi	r2,r2,255
     c04:	108031f0 	cmpltui	r2,r2,199
     c08:	1000031e 	bne	r2,zero,c18 <printSignedHex1+0x78>
		setLED(12);
     c0c:	01000304 	movi	r4,12
     c10:	00009e40 	call	9e4 <setLED>
     c14:	00000206 	br	c20 <printSignedHex1+0x80>
	else
		clearLED(12);
     c18:	01000304 	movi	r4,12
     c1c:	0000a300 	call	a30 <clearLED>

	value = value % 100;
     c20:	e0bfff07 	ldb	r2,-4(fp)
     c24:	01401904 	movi	r5,100
     c28:	1009883a 	mov	r4,r2
     c2c:	00032e00 	call	32e0 <__modsi3>
     c30:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
     c34:	e0bfff07 	ldb	r2,-4(fp)
     c38:	01400284 	movi	r5,10
     c3c:	1009883a 	mov	r4,r2
     c40:	000325c0 	call	325c <__divsi3>
     c44:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
     c48:	e0bfff07 	ldb	r2,-4(fp)
     c4c:	01400284 	movi	r5,10
     c50:	1009883a 	mov	r4,r2
     c54:	00032e00 	call	32e0 <__modsi3>
     c58:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
     c5c:	e0bfff07 	ldb	r2,-4(fp)
     c60:	01400284 	movi	r5,10
     c64:	1009883a 	mov	r4,r2
     c68:	000325c0 	call	325c <__divsi3>
     c6c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
     c70:	e0bfff07 	ldb	r2,-4(fp)
     c74:	01400284 	movi	r5,10
     c78:	1009883a 	mov	r4,r2
     c7c:	00032e00 	call	32e0 <__modsi3>
     c80:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
     c84:	e0bffe17 	ldw	r2,-8(fp)
     c88:	10bfc00c 	andi	r2,r2,65280
     c8c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
     c90:	e0bffd03 	ldbu	r2,-12(fp)
     c94:	1004913a 	slli	r2,r2,4
     c98:	1007883a 	mov	r3,r2
     c9c:	e0bffe17 	ldw	r2,-8(fp)
     ca0:	10c4b03a 	or	r2,r2,r3
     ca4:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
     ca8:	e0bffd43 	ldbu	r2,-11(fp)
     cac:	e0fffe17 	ldw	r3,-8(fp)
     cb0:	1884b03a 	or	r2,r3,r2
     cb4:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
     cb8:	e0fffe17 	ldw	r3,-8(fp)
     cbc:	00810034 	movhi	r2,1024
     cc0:	10848404 	addi	r2,r2,4624
     cc4:	10c00035 	stwio	r3,0(r2)
}
     cc8:	0001883a 	nop
     ccc:	e037883a 	mov	sp,fp
     cd0:	dfc00117 	ldw	ra,4(sp)
     cd4:	df000017 	ldw	fp,0(sp)
     cd8:	dec00204 	addi	sp,sp,8
     cdc:	f800283a 	ret

00000ce0 <setKeycode>:

void setKeycode(WORD keycode)
{
     ce0:	defffe04 	addi	sp,sp,-8
     ce4:	df000115 	stw	fp,4(sp)
     ce8:	df000104 	addi	fp,sp,4
     cec:	2005883a 	mov	r2,r4
     cf0:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
     cf4:	e0ffff0b 	ldhu	r3,-4(fp)
     cf8:	00810034 	movhi	r2,1024
     cfc:	10848004 	addi	r2,r2,4608
     d00:	10c00035 	stwio	r3,0(r2)
}
     d04:	0001883a 	nop
     d08:	e037883a 	mov	sp,fp
     d0c:	df000017 	ldw	fp,0(sp)
     d10:	dec00104 	addi	sp,sp,4
     d14:	f800283a 	ret

00000d18 <main>:
int main() {
     d18:	defff604 	addi	sp,sp,-40
     d1c:	dfc00915 	stw	ra,36(sp)
     d20:	df000815 	stw	fp,32(sp)
     d24:	df000804 	addi	fp,sp,32
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
     d28:	e03ff805 	stb	zero,-32(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
     d2c:	e03ff845 	stb	zero,-31(fp)
	BYTE device;
	WORD keycode;

	printf("Initializing SGTL5000...\n");
     d30:	01000074 	movhi	r4,1
     d34:	21138a04 	addi	r4,r4,20008
     d38:	00035840 	call	3584 <puts>
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
     d3c:	01000074 	movhi	r4,1
     d40:	21139104 	addi	r4,r4,20036
     d44:	00112a80 	call	112a8 <alt_avalon_i2c_open>
     d48:	e0bffa15 	stw	r2,-24(fp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
     d4c:	e0bffa17 	ldw	r2,-24(fp)
     d50:	1000031e 	bne	r2,zero,d60 <main+0x48>
     d54:	01000074 	movhi	r4,1
     d58:	21139404 	addi	r4,r4,20048
     d5c:	00035840 	call	3584 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
     d60:	e13ffa17 	ldw	r4,-24(fp)
     d64:	00006e00 	call	6e0 <SGTL5000init>

	printf("Starting audio...\n");
     d68:	01000074 	movhi	r4,1
     d6c:	21139c04 	addi	r4,r4,20080
     d70:	00035840 	call	3584 <puts>
	SGTL5000audio_on(i2c_dev);
     d74:	e13ffa17 	ldw	r4,-24(fp)
     d78:	00007880 	call	788 <SGTL5000audio_on>
	I2Creg_wr(i2c_dev, ANA_CTRL, MUTE_LO | !MUTE_HP | !MUTE_ADC);
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/
	printf("ID:          %X\n", I2Creg_rd(i2c_dev, ID));
     d7c:	000b883a 	mov	r5,zero
     d80:	e13ffa17 	ldw	r4,-24(fp)
     d84:	00004a80 	call	4a8 <I2Creg_rd>
     d88:	10bfffcc 	andi	r2,r2,65535
     d8c:	100b883a 	mov	r5,r2
     d90:	01000074 	movhi	r4,1
     d94:	2113a104 	addi	r4,r4,20100
     d98:	00034680 	call	3468 <printf>
	printf("DIG_POWER:   %X\n", I2Creg_rd(i2c_dev, DIG_POWER));
     d9c:	01400084 	movi	r5,2
     da0:	e13ffa17 	ldw	r4,-24(fp)
     da4:	00004a80 	call	4a8 <I2Creg_rd>
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	2113a604 	addi	r4,r4,20120
     db8:	00034680 	call	3468 <printf>
	printf("CLK_CTRL:    %X\n", I2Creg_rd(i2c_dev, CLK_CTRL));
     dbc:	01400104 	movi	r5,4
     dc0:	e13ffa17 	ldw	r4,-24(fp)
     dc4:	00004a80 	call	4a8 <I2Creg_rd>
     dc8:	10bfffcc 	andi	r2,r2,65535
     dcc:	100b883a 	mov	r5,r2
     dd0:	01000074 	movhi	r4,1
     dd4:	2113ab04 	addi	r4,r4,20140
     dd8:	00034680 	call	3468 <printf>
	printf("I2S_CTRL:    %X\n", I2Creg_rd(i2c_dev, I2S_CTRL));
     ddc:	01400184 	movi	r5,6
     de0:	e13ffa17 	ldw	r4,-24(fp)
     de4:	00004a80 	call	4a8 <I2Creg_rd>
     de8:	10bfffcc 	andi	r2,r2,65535
     dec:	100b883a 	mov	r5,r2
     df0:	01000074 	movhi	r4,1
     df4:	2113b004 	addi	r4,r4,20160
     df8:	00034680 	call	3468 <printf>
	printf("SSS_CTRL:    %X\n", I2Creg_rd(i2c_dev, SSS_CTRL));
     dfc:	01400284 	movi	r5,10
     e00:	e13ffa17 	ldw	r4,-24(fp)
     e04:	00004a80 	call	4a8 <I2Creg_rd>
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	100b883a 	mov	r5,r2
     e10:	01000074 	movhi	r4,1
     e14:	2113b504 	addi	r4,r4,20180
     e18:	00034680 	call	3468 <printf>
	printf("ANA_POWER:   %X\n", I2Creg_rd(i2c_dev, ANA_POWER));
     e1c:	01400c04 	movi	r5,48
     e20:	e13ffa17 	ldw	r4,-24(fp)
     e24:	00004a80 	call	4a8 <I2Creg_rd>
     e28:	10bfffcc 	andi	r2,r2,65535
     e2c:	100b883a 	mov	r5,r2
     e30:	01000074 	movhi	r4,1
     e34:	2113ba04 	addi	r4,r4,20200
     e38:	00034680 	call	3468 <printf>
	printf("ADCDAC_CTRL: %X\n", I2Creg_rd(i2c_dev, ADCDAC_CTRL));
     e3c:	01400384 	movi	r5,14
     e40:	e13ffa17 	ldw	r4,-24(fp)
     e44:	00004a80 	call	4a8 <I2Creg_rd>
     e48:	10bfffcc 	andi	r2,r2,65535
     e4c:	100b883a 	mov	r5,r2
     e50:	01000074 	movhi	r4,1
     e54:	2113bf04 	addi	r4,r4,20220
     e58:	00034680 	call	3468 <printf>
	printf("ANA_CTRL:    %X\n", I2Creg_rd(i2c_dev, ANA_CTRL));
     e5c:	01400904 	movi	r5,36
     e60:	e13ffa17 	ldw	r4,-24(fp)
     e64:	00004a80 	call	4a8 <I2Creg_rd>
     e68:	10bfffcc 	andi	r2,r2,65535
     e6c:	100b883a 	mov	r5,r2
     e70:	01000074 	movhi	r4,1
     e74:	2113c404 	addi	r4,r4,20240
     e78:	00034680 	call	3468 <printf>
	printf("ANA_TEST1:   %X\n", I2Creg_rd(i2c_dev, ANA_TEST1));
     e7c:	01400e04 	movi	r5,56
     e80:	e13ffa17 	ldw	r4,-24(fp)
     e84:	00004a80 	call	4a8 <I2Creg_rd>
     e88:	10bfffcc 	andi	r2,r2,65535
     e8c:	100b883a 	mov	r5,r2
     e90:	01000074 	movhi	r4,1
     e94:	2113c904 	addi	r4,r4,20260
     e98:	00034680 	call	3468 <printf>
	printf("ANA_ADC_CTRL:   %X\n", I2Creg_rd(i2c_dev, ANA_ADC_CTRL));
     e9c:	01400804 	movi	r5,32
     ea0:	e13ffa17 	ldw	r4,-24(fp)
     ea4:	00004a80 	call	4a8 <I2Creg_rd>
     ea8:	10bfffcc 	andi	r2,r2,65535
     eac:	100b883a 	mov	r5,r2
     eb0:	01000074 	movhi	r4,1
     eb4:	2113ce04 	addi	r4,r4,20280
     eb8:	00034680 	call	3468 <printf>
	printf("DAC_VOL:     %X\n", I2Creg_rd(i2c_dev, DAC_VOL));
     ebc:	01400404 	movi	r5,16
     ec0:	e13ffa17 	ldw	r4,-24(fp)
     ec4:	00004a80 	call	4a8 <I2Creg_rd>
     ec8:	10bfffcc 	andi	r2,r2,65535
     ecc:	100b883a 	mov	r5,r2
     ed0:	01000074 	movhi	r4,1
     ed4:	2113d304 	addi	r4,r4,20300
     ed8:	00034680 	call	3468 <printf>
	printf("ANA_HP_CTRL:   %X\n", I2Creg_rd(i2c_dev, ANA_HP_CTRL));
     edc:	01400884 	movi	r5,34
     ee0:	e13ffa17 	ldw	r4,-24(fp)
     ee4:	00004a80 	call	4a8 <I2Creg_rd>
     ee8:	10bfffcc 	andi	r2,r2,65535
     eec:	100b883a 	mov	r5,r2
     ef0:	01000074 	movhi	r4,1
     ef4:	2113d804 	addi	r4,r4,20320
     ef8:	00034680 	call	3468 <printf>
	printf("Audio running\n");
     efc:	01000074 	movhi	r4,1
     f00:	2113dd04 	addi	r4,r4,20340
     f04:	00035840 	call	3584 <puts>

	printf("initializing MAX3421E...\n");
     f08:	01000074 	movhi	r4,1
     f0c:	2113e104 	addi	r4,r4,20356
     f10:	00035840 	call	3584 <puts>
	MAX3421E_init();
     f14:	00021c40 	call	21c4 <MAX3421E_init>
	printf("initializing USB...\n");
     f18:	01000074 	movhi	r4,1
     f1c:	2113e804 	addi	r4,r4,20384
     f20:	00035840 	call	3584 <puts>
	USB_init();
     f24:	00029780 	call	2978 <USB_init>
	while (1) {
		printf(".");
     f28:	01000b84 	movi	r4,46
     f2c:	00034ac0 	call	34ac <putchar>
		MAX3421E_Task();
     f30:	00022580 	call	2258 <MAX3421E_Task>
		USB_Task();
     f34:	0002a100 	call	2a10 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
     f38:	00031800 	call	3180 <GetUsbTaskState>
     f3c:	10803fcc 	andi	r2,r2,255
     f40:	10801018 	cmpnei	r2,r2,64
     f44:	1000a11e 	bne	r2,zero,11cc <main+0x4b4>
			if (!runningdebugflag) {
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	1000071e 	bne	r2,zero,f6c <main+0x254>
				runningdebugflag = 1;
     f50:	00800044 	movi	r2,1
     f54:	e0bff805 	stb	r2,-32(fp)
				setLED(9);
     f58:	01000244 	movi	r4,9
     f5c:	00009e40 	call	9e4 <setLED>
				device = GetDriverandReport();
     f60:	00007f40 	call	7f4 <GetDriverandReport>
     f64:	e0bff885 	stb	r2,-30(fp)
     f68:	003fef06 	br	f28 <__alt_data_end+0xfc000f28>
			} else if (device == 1) {
     f6c:	e0bff883 	ldbu	r2,-30(fp)
     f70:	10800058 	cmpnei	r2,r2,1
     f74:	1000391e 	bne	r2,zero,105c <main+0x344>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
     f78:	e0bffd44 	addi	r2,fp,-11
     f7c:	1009883a 	mov	r4,r2
     f80:	0001b340 	call	1b34 <kbdPoll>
     f84:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
     f88:	e0bffb03 	ldbu	r2,-20(fp)
     f8c:	10800118 	cmpnei	r2,r2,4
     f90:	1000ae26 	beq	r2,zero,124c <main+0x534>
					continue; //NAK means no new data
				} else if (rcode) {
     f94:	e0bffb03 	ldbu	r2,-20(fp)
     f98:	10000926 	beq	r2,zero,fc0 <main+0x2a8>
					printf("Rcode: ");
     f9c:	01000074 	movhi	r4,1
     fa0:	2113ed04 	addi	r4,r4,20404
     fa4:	00034680 	call	3468 <printf>
					printf("%x \n", rcode);
     fa8:	e0bffb03 	ldbu	r2,-20(fp)
     fac:	100b883a 	mov	r5,r2
     fb0:	01000074 	movhi	r4,1
     fb4:	21137804 	addi	r4,r4,19936
     fb8:	00034680 	call	3468 <printf>
					continue;
     fbc:	0000a606 	br	1258 <main+0x540>
				}
				printf("keycodes: ");
     fc0:	01000074 	movhi	r4,1
     fc4:	2113ef04 	addi	r4,r4,20412
     fc8:	00034680 	call	3468 <printf>
				for (int i = 0; i < 6; i++) {
     fcc:	e03ff915 	stw	zero,-28(fp)
     fd0:	00000c06 	br	1004 <main+0x2ec>
					printf("%x ", kbdbuf.keycode[i]);
     fd4:	e0fffdc4 	addi	r3,fp,-9
     fd8:	e0bff917 	ldw	r2,-28(fp)
     fdc:	1885883a 	add	r2,r3,r2
     fe0:	10800003 	ldbu	r2,0(r2)
     fe4:	10803fcc 	andi	r2,r2,255
     fe8:	100b883a 	mov	r5,r2
     fec:	01000074 	movhi	r4,1
     ff0:	2113f204 	addi	r4,r4,20424
     ff4:	00034680 	call	3468 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
     ff8:	e0bff917 	ldw	r2,-28(fp)
     ffc:	10800044 	addi	r2,r2,1
    1000:	e0bff915 	stw	r2,-28(fp)
    1004:	e0bff917 	ldw	r2,-28(fp)
    1008:	10800190 	cmplti	r2,r2,6
    100c:	103ff11e 	bne	r2,zero,fd4 <__alt_data_end+0xfc000fd4>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0]);
    1010:	e0bffdc3 	ldbu	r2,-9(fp)
    1014:	10803fcc 	andi	r2,r2,255
    1018:	1009883a 	mov	r4,r2
    101c:	0000ce00 	call	ce0 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
    1020:	e0bffdc3 	ldbu	r2,-9(fp)
    1024:	10803fcc 	andi	r2,r2,255
    1028:	1080201c 	xori	r2,r2,128
    102c:	10bfe004 	addi	r2,r2,-128
    1030:	1009883a 	mov	r4,r2
    1034:	0000a800 	call	a80 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
    1038:	e0bffe03 	ldbu	r2,-8(fp)
    103c:	10803fcc 	andi	r2,r2,255
    1040:	1080201c 	xori	r2,r2,128
    1044:	10bfe004 	addi	r2,r2,-128
    1048:	1009883a 	mov	r4,r2
    104c:	0000ba00 	call	ba0 <printSignedHex1>
				printf("\n");
    1050:	01000284 	movi	r4,10
    1054:	00034ac0 	call	34ac <putchar>
    1058:	003fb306 	br	f28 <__alt_data_end+0xfc000f28>
			}

			else if (device == 2) {
    105c:	e0bff883 	ldbu	r2,-30(fp)
    1060:	10800098 	cmpnei	r2,r2,2
    1064:	103fb01e 	bne	r2,zero,f28 <__alt_data_end+0xfc000f28>
				rcode = mousePoll(&buf);
    1068:	e0bffb44 	addi	r2,fp,-19
    106c:	1009883a 	mov	r4,r2
    1070:	0001aac0 	call	1aac <mousePoll>
    1074:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
    1078:	e0bffb03 	ldbu	r2,-20(fp)
    107c:	10800118 	cmpnei	r2,r2,4
    1080:	10007426 	beq	r2,zero,1254 <main+0x53c>
					//NAK means no new data
					continue;
				} else if (rcode) {
    1084:	e0bffb03 	ldbu	r2,-20(fp)
    1088:	10000926 	beq	r2,zero,10b0 <main+0x398>
					printf("Rcode: ");
    108c:	01000074 	movhi	r4,1
    1090:	2113ed04 	addi	r4,r4,20404
    1094:	00034680 	call	3468 <printf>
					printf("%x \n", rcode);
    1098:	e0bffb03 	ldbu	r2,-20(fp)
    109c:	100b883a 	mov	r5,r2
    10a0:	01000074 	movhi	r4,1
    10a4:	21137804 	addi	r4,r4,19936
    10a8:	00034680 	call	3468 <printf>
					continue;
    10ac:	00006a06 	br	1258 <main+0x540>
				}
				printf("X displacement: ");
    10b0:	01000074 	movhi	r4,1
    10b4:	2113f304 	addi	r4,r4,20428
    10b8:	00034680 	call	3468 <printf>
				printf("%d ", (signed char) buf.Xdispl);
    10bc:	e0bffb83 	ldbu	r2,-18(fp)
    10c0:	10803fcc 	andi	r2,r2,255
    10c4:	1080201c 	xori	r2,r2,128
    10c8:	10bfe004 	addi	r2,r2,-128
    10cc:	100b883a 	mov	r5,r2
    10d0:	01000074 	movhi	r4,1
    10d4:	2113f804 	addi	r4,r4,20448
    10d8:	00034680 	call	3468 <printf>
				printSignedHex0((signed char) buf.Xdispl);
    10dc:	e0bffb83 	ldbu	r2,-18(fp)
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	1080201c 	xori	r2,r2,128
    10e8:	10bfe004 	addi	r2,r2,-128
    10ec:	1009883a 	mov	r4,r2
    10f0:	0000a800 	call	a80 <printSignedHex0>
				printf("Y displacement: ");
    10f4:	01000074 	movhi	r4,1
    10f8:	2113f904 	addi	r4,r4,20452
    10fc:	00034680 	call	3468 <printf>
				printf("%d ", (signed char) buf.Ydispl);
    1100:	e0bffbc3 	ldbu	r2,-17(fp)
    1104:	10803fcc 	andi	r2,r2,255
    1108:	1080201c 	xori	r2,r2,128
    110c:	10bfe004 	addi	r2,r2,-128
    1110:	100b883a 	mov	r5,r2
    1114:	01000074 	movhi	r4,1
    1118:	2113f804 	addi	r4,r4,20448
    111c:	00034680 	call	3468 <printf>
				printSignedHex1((signed char) buf.Ydispl);
    1120:	e0bffbc3 	ldbu	r2,-17(fp)
    1124:	10803fcc 	andi	r2,r2,255
    1128:	1080201c 	xori	r2,r2,128
    112c:	10bfe004 	addi	r2,r2,-128
    1130:	1009883a 	mov	r4,r2
    1134:	0000ba00 	call	ba0 <printSignedHex1>
				printf("Buttons: ");
    1138:	01000074 	movhi	r4,1
    113c:	2113fe04 	addi	r4,r4,20472
    1140:	00034680 	call	3468 <printf>
				printf("%x\n", buf.button);
    1144:	e0bffb43 	ldbu	r2,-19(fp)
    1148:	10803fcc 	andi	r2,r2,255
    114c:	100b883a 	mov	r5,r2
    1150:	01000074 	movhi	r4,1
    1154:	21140104 	addi	r4,r4,20484
    1158:	00034680 	call	3468 <printf>
				if (buf.button & 0x04)
    115c:	e0bffb43 	ldbu	r2,-19(fp)
    1160:	10803fcc 	andi	r2,r2,255
    1164:	1080010c 	andi	r2,r2,4
    1168:	10000326 	beq	r2,zero,1178 <main+0x460>
					setLED(2);
    116c:	01000084 	movi	r4,2
    1170:	00009e40 	call	9e4 <setLED>
    1174:	00000206 	br	1180 <main+0x468>
				else
					clearLED(2);
    1178:	01000084 	movi	r4,2
    117c:	0000a300 	call	a30 <clearLED>
				if (buf.button & 0x02)
    1180:	e0bffb43 	ldbu	r2,-19(fp)
    1184:	10803fcc 	andi	r2,r2,255
    1188:	1080008c 	andi	r2,r2,2
    118c:	10000326 	beq	r2,zero,119c <main+0x484>
					setLED(1);
    1190:	01000044 	movi	r4,1
    1194:	00009e40 	call	9e4 <setLED>
    1198:	00000206 	br	11a4 <main+0x48c>
				else
					clearLED(1);
    119c:	01000044 	movi	r4,1
    11a0:	0000a300 	call	a30 <clearLED>
				if (buf.button & 0x01)
    11a4:	e0bffb43 	ldbu	r2,-19(fp)
    11a8:	10803fcc 	andi	r2,r2,255
    11ac:	1080004c 	andi	r2,r2,1
    11b0:	10000326 	beq	r2,zero,11c0 <main+0x4a8>
					setLED(0);
    11b4:	0009883a 	mov	r4,zero
    11b8:	00009e40 	call	9e4 <setLED>
    11bc:	003f5a06 	br	f28 <__alt_data_end+0xfc000f28>
				else
					clearLED(0);
    11c0:	0009883a 	mov	r4,zero
    11c4:	0000a300 	call	a30 <clearLED>
    11c8:	003f5706 	br	f28 <__alt_data_end+0xfc000f28>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
    11cc:	00031800 	call	3180 <GetUsbTaskState>
    11d0:	10803fcc 	andi	r2,r2,255
    11d4:	10803fd8 	cmpnei	r2,r2,255
    11d8:	10000a1e 	bne	r2,zero,1204 <main+0x4ec>
			if (!errorflag) {
    11dc:	e0bff843 	ldbu	r2,-31(fp)
    11e0:	103f511e 	bne	r2,zero,f28 <__alt_data_end+0xfc000f28>
				errorflag = 1;
    11e4:	00800044 	movi	r2,1
    11e8:	e0bff845 	stb	r2,-31(fp)
				clearLED(9);
    11ec:	01000244 	movi	r4,9
    11f0:	0000a300 	call	a30 <clearLED>
				printf("USB Error State\n");
    11f4:	01000074 	movhi	r4,1
    11f8:	21140204 	addi	r4,r4,20488
    11fc:	00035840 	call	3584 <puts>
    1200:	003f4906 	br	f28 <__alt_data_end+0xfc000f28>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
    1204:	01000074 	movhi	r4,1
    1208:	21140604 	addi	r4,r4,20504
    120c:	00034680 	call	3468 <printf>
			printf("%x\n", GetUsbTaskState());
    1210:	00031800 	call	3180 <GetUsbTaskState>
    1214:	10803fcc 	andi	r2,r2,255
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	21140104 	addi	r4,r4,20484
    1224:	00034680 	call	3468 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
    1228:	e0bff803 	ldbu	r2,-32(fp)
    122c:	10000326 	beq	r2,zero,123c <main+0x524>
				runningdebugflag = 0;
    1230:	e03ff805 	stb	zero,-32(fp)
				MAX3421E_init();
    1234:	00021c40 	call	21c4 <MAX3421E_init>
				USB_init();
    1238:	00029780 	call	2978 <USB_init>
			}
			errorflag = 0;
    123c:	e03ff845 	stb	zero,-31(fp)
			clearLED(9);
    1240:	01000244 	movi	r4,9
    1244:	0000a300 	call	a30 <clearLED>
    1248:	003f3706 	br	f28 <__alt_data_end+0xfc000f28>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
    124c:	0001883a 	nop
    1250:	003f3506 	br	f28 <__alt_data_end+0xfc000f28>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
    1254:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
    1258:	003f3306 	br	f28 <__alt_data_end+0xfc000f28>

0000125c <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
    125c:	defff204 	addi	sp,sp,-56
    1260:	dfc00d15 	stw	ra,52(sp)
    1264:	df000c15 	stw	fp,48(sp)
    1268:	df000c04 	addi	fp,sp,48
    126c:	2005883a 	mov	r2,r4
    1270:	e17fff15 	stw	r5,-4(fp)
    1274:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
    1278:	008000b4 	movhi	r2,2
    127c:	10a2dd04 	addi	r2,r2,-29836
    1280:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
    1284:	008000b4 	movhi	r2,2
    1288:	10a2dd04 	addi	r2,r2,-29836
    128c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
    1290:	e0fffe03 	ldbu	r3,-8(fp)
    1294:	008000b4 	movhi	r2,2
    1298:	10a2dd04 	addi	r2,r2,-29836
    129c:	d8800415 	stw	r2,16(sp)
    12a0:	00800244 	movi	r2,9
    12a4:	d8800315 	stw	r2,12(sp)
    12a8:	d8000215 	stw	zero,8(sp)
    12ac:	00800084 	movi	r2,2
    12b0:	d8800115 	stw	r2,4(sp)
    12b4:	d8000015 	stw	zero,0(sp)
    12b8:	01c00184 	movi	r7,6
    12bc:	01802004 	movi	r6,128
    12c0:	000b883a 	mov	r5,zero
    12c4:	1809883a 	mov	r4,r3
    12c8:	00023c40 	call	23c4 <XferCtrlReq>
    12cc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
    12d0:	e0bffc03 	ldbu	r2,-16(fp)
    12d4:	10000226 	beq	r2,zero,12e0 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
    12d8:	0005883a 	mov	r2,zero
    12dc:	0000dc06 	br	1650 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
    12e0:	e0bffa17 	ldw	r2,-24(fp)
    12e4:	1080008b 	ldhu	r2,2(r2)
    12e8:	10bfffcc 	andi	r2,r2,65535
    12ec:	10804070 	cmpltui	r2,r2,257
    12f0:	1000031e 	bne	r2,zero,1300 <HIDMProbe+0xa4>
		total_length = 256;
    12f4:	00804004 	movi	r2,256
    12f8:	e0bff90d 	sth	r2,-28(fp)
    12fc:	00000306 	br	130c <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
    1300:	e0bffa17 	ldw	r2,-24(fp)
    1304:	1080008b 	ldhu	r2,2(r2)
    1308:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
    130c:	e13ffe03 	ldbu	r4,-8(fp)
    1310:	e0fff90b 	ldhu	r3,-28(fp)
    1314:	008000b4 	movhi	r2,2
    1318:	10a2dd04 	addi	r2,r2,-29836
    131c:	d8800415 	stw	r2,16(sp)
    1320:	d8c00315 	stw	r3,12(sp)
    1324:	d8000215 	stw	zero,8(sp)
    1328:	00800084 	movi	r2,2
    132c:	d8800115 	stw	r2,4(sp)
    1330:	d8000015 	stw	zero,0(sp)
    1334:	01c00184 	movi	r7,6
    1338:	01802004 	movi	r6,128
    133c:	000b883a 	mov	r5,zero
    1340:	00023c40 	call	23c4 <XferCtrlReq>
    1344:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
    1348:	e0bffc03 	ldbu	r2,-16(fp)
    134c:	10000226 	beq	r2,zero,1358 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
    1350:	0005883a 	mov	r2,zero
    1354:	0000be06 	br	1650 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
    1358:	e0bffa17 	ldw	r2,-24(fp)
    135c:	10800143 	ldbu	r2,5(r2)
    1360:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
    1364:	0000b306 	br	1634 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
    1368:	e0bffa17 	ldw	r2,-24(fp)
    136c:	10800043 	ldbu	r2,1(r2)
    1370:	10803fcc 	andi	r2,r2,255
    1374:	10800120 	cmpeqi	r2,r2,4
    1378:	1000091e 	bne	r2,zero,13a0 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    137c:	e0bffa17 	ldw	r2,-24(fp)
    1380:	10800003 	ldbu	r2,0(r2)
    1384:	10803fcc 	andi	r2,r2,255
    1388:	e0fffb17 	ldw	r3,-20(fp)
    138c:	1885883a 	add	r2,r3,r2
    1390:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
    1394:	e0bffb17 	ldw	r2,-20(fp)
    1398:	e0bffa15 	stw	r2,-24(fp)
    139c:	0000a506 	br	1634 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
    13a0:	e0bffa17 	ldw	r2,-24(fp)
    13a4:	10800143 	ldbu	r2,5(r2)
    13a8:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
    13ac:	e0bffa17 	ldw	r2,-24(fp)
    13b0:	10800183 	ldbu	r2,6(r2)
    13b4:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
    13b8:	e0bffa17 	ldw	r2,-24(fp)
    13bc:	108001c3 	ldbu	r2,7(r2)
    13c0:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    13c4:	e0bffc83 	ldbu	r2,-14(fp)
    13c8:	108000d8 	cmpnei	r2,r2,3
    13cc:	1000971e 	bne	r2,zero,162c <HIDMProbe+0x3d0>
    13d0:	e0bffcc3 	ldbu	r2,-13(fp)
    13d4:	10800058 	cmpnei	r2,r2,1
    13d8:	1000941e 	bne	r2,zero,162c <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
    13dc:	e0bffd03 	ldbu	r2,-12(fp)
    13e0:	10800098 	cmpnei	r2,r2,2
    13e4:	1000911e 	bne	r2,zero,162c <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
    13e8:	e0fffe03 	ldbu	r3,-8(fp)
    13ec:	008000b4 	movhi	r2,2
    13f0:	10a31d04 	addi	r2,r2,-29580
    13f4:	180690fa 	slli	r3,r3,3
    13f8:	10c5883a 	add	r2,r2,r3
    13fc:	10800104 	addi	r2,r2,4
    1400:	00c00084 	movi	r3,2
    1404:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
    1408:	e0fffe03 	ldbu	r3,-8(fp)
    140c:	008000b4 	movhi	r2,2
    1410:	10a31d04 	addi	r2,r2,-29580
    1414:	180690fa 	slli	r3,r3,3
    1418:	10c5883a 	add	r2,r2,r3
    141c:	10800017 	ldw	r2,0(r2)
    1420:	1080008b 	ldhu	r2,2(r2)
    1424:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
    1428:	0001a6c0 	call	1a6c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
    142c:	e0fffe03 	ldbu	r3,-8(fp)
    1430:	008000b4 	movhi	r2,2
    1434:	10a31d04 	addi	r2,r2,-29580
    1438:	180690fa 	slli	r3,r3,3
    143c:	10c7883a 	add	r3,r2,r3
    1440:	008000b4 	movhi	r2,2
    1444:	10a2c904 	addi	r2,r2,-29916
    1448:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
    144c:	e0fffe03 	ldbu	r3,-8(fp)
    1450:	008000b4 	movhi	r2,2
    1454:	10a31d04 	addi	r2,r2,-29580
    1458:	180690fa 	slli	r3,r3,3
    145c:	10c5883a 	add	r2,r2,r3
    1460:	10800017 	ldw	r2,0(r2)
    1464:	e0fffd43 	ldbu	r3,-11(fp)
    1468:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
    146c:	e0bffa17 	ldw	r2,-24(fp)
    1470:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
    1474:	d0a6f145 	stb	r2,-25659(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
    1478:	e0bffe03 	ldbu	r2,-8(fp)
    147c:	d0a6f105 	stb	r2,-25660(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1480:	e0bffa17 	ldw	r2,-24(fp)
    1484:	10800003 	ldbu	r2,0(r2)
    1488:	10803fcc 	andi	r2,r2,255
    148c:	e0fffb17 	ldw	r3,-20(fp)
    1490:	1885883a 	add	r2,r3,r2
    1494:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
    1498:	e0bffb17 	ldw	r2,-20(fp)
    149c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
    14a0:	00005b06 	br	1610 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
    14a4:	e0bffa17 	ldw	r2,-24(fp)
    14a8:	10800043 	ldbu	r2,1(r2)
    14ac:	10803fcc 	andi	r2,r2,255
    14b0:	10800160 	cmpeqi	r2,r2,5
    14b4:	1000091e 	bne	r2,zero,14dc <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    14b8:	e0bffa17 	ldw	r2,-24(fp)
    14bc:	10800003 	ldbu	r2,0(r2)
    14c0:	10803fcc 	andi	r2,r2,255
    14c4:	e0fffb17 	ldw	r3,-20(fp)
    14c8:	1885883a 	add	r2,r3,r2
    14cc:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
    14d0:	e0bffb17 	ldw	r2,-20(fp)
    14d4:	e0bffa15 	stw	r2,-24(fp)
    14d8:	00004d06 	br	1610 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    14dc:	e0fffe03 	ldbu	r3,-8(fp)
    14e0:	008000b4 	movhi	r2,2
    14e4:	10a31d04 	addi	r2,r2,-29580
    14e8:	180690fa 	slli	r3,r3,3
    14ec:	10c5883a 	add	r2,r2,r3
    14f0:	10800017 	ldw	r2,0(r2)
    14f4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
    14f8:	e0fffa17 	ldw	r3,-24(fp)
    14fc:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    1500:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    1504:	e0fffe03 	ldbu	r3,-8(fp)
    1508:	008000b4 	movhi	r2,2
    150c:	10a31d04 	addi	r2,r2,-29580
    1510:	180690fa 	slli	r3,r3,3
    1514:	10c5883a 	add	r2,r2,r3
    1518:	10800017 	ldw	r2,0(r2)
    151c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
    1520:	e0fffa17 	ldw	r3,-24(fp)
    1524:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    1528:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    152c:	e0fffe03 	ldbu	r3,-8(fp)
    1530:	008000b4 	movhi	r2,2
    1534:	10a31d04 	addi	r2,r2,-29580
    1538:	180690fa 	slli	r3,r3,3
    153c:	10c5883a 	add	r2,r2,r3
    1540:	10800017 	ldw	r2,0(r2)
    1544:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
    1548:	e0fffa17 	ldw	r3,-24(fp)
    154c:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    1550:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1554:	e0fffe03 	ldbu	r3,-8(fp)
    1558:	008000b4 	movhi	r2,2
    155c:	10a31d04 	addi	r2,r2,-29580
    1560:	180690fa 	slli	r3,r3,3
    1564:	10c5883a 	add	r2,r2,r3
    1568:	10800017 	ldw	r2,0(r2)
    156c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
    1570:	e0fffa17 	ldw	r3,-24(fp)
    1574:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1578:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
    157c:	e0fffe03 	ldbu	r3,-8(fp)
    1580:	e0bffc43 	ldbu	r2,-15(fp)
    1584:	d8000415 	stw	zero,16(sp)
    1588:	d8000315 	stw	zero,12(sp)
    158c:	d8000215 	stw	zero,8(sp)
    1590:	d8000115 	stw	zero,4(sp)
    1594:	d8800015 	stw	r2,0(sp)
    1598:	01c00244 	movi	r7,9
    159c:	000d883a 	mov	r6,zero
    15a0:	000b883a 	mov	r5,zero
    15a4:	1809883a 	mov	r4,r3
    15a8:	00023c40 	call	23c4 <XferCtrlReq>
    15ac:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
    15b0:	e0bffc03 	ldbu	r2,-16(fp)
    15b4:	10000226 	beq	r2,zero,15c0 <HIDMProbe+0x364>
							return (FALSE);
    15b8:	0005883a 	mov	r2,zero
    15bc:	00002406 	br	1650 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
    15c0:	e0fffe03 	ldbu	r3,-8(fp)
    15c4:	d0a6f143 	ldbu	r2,-25659(gp)
    15c8:	10803fcc 	andi	r2,r2,255
    15cc:	d8000415 	stw	zero,16(sp)
    15d0:	d8000315 	stw	zero,12(sp)
    15d4:	d8800215 	stw	r2,8(sp)
    15d8:	d8000115 	stw	zero,4(sp)
    15dc:	d8000015 	stw	zero,0(sp)
    15e0:	01c002c4 	movi	r7,11
    15e4:	01800844 	movi	r6,33
    15e8:	000b883a 	mov	r5,zero
    15ec:	1809883a 	mov	r4,r3
    15f0:	00023c40 	call	23c4 <XferCtrlReq>
    15f4:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
    15f8:	e0bffc03 	ldbu	r2,-16(fp)
    15fc:	10000226 	beq	r2,zero,1608 <HIDMProbe+0x3ac>
							return (FALSE);
    1600:	0005883a 	mov	r2,zero
    1604:	00001206 	br	1650 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
    1608:	00800044 	movi	r2,1
    160c:	00001006 	br	1650 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
    1610:	e0fff90b 	ldhu	r3,-28(fp)
    1614:	008000b4 	movhi	r2,2
    1618:	10a2dd04 	addi	r2,r2,-29836
    161c:	1885883a 	add	r2,r3,r2
    1620:	e0fffb17 	ldw	r3,-20(fp)
    1624:	18bf9f36 	bltu	r3,r2,14a4 <__alt_data_end+0xfc0014a4>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    1628:	00000206 	br	1634 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
    162c:	0005883a 	mov	r2,zero
    1630:	00000706 	br	1650 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
    1634:	e0fff90b 	ldhu	r3,-28(fp)
    1638:	008000b4 	movhi	r2,2
    163c:	10a2dd04 	addi	r2,r2,-29836
    1640:	1885883a 	add	r2,r3,r2
    1644:	e0fffb17 	ldw	r3,-20(fp)
    1648:	18bf4736 	bltu	r3,r2,1368 <__alt_data_end+0xfc001368>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
    164c:	0005883a 	mov	r2,zero
}
    1650:	e037883a 	mov	sp,fp
    1654:	dfc00117 	ldw	ra,4(sp)
    1658:	df000017 	ldw	fp,0(sp)
    165c:	dec00204 	addi	sp,sp,8
    1660:	f800283a 	ret

00001664 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
    1664:	defff204 	addi	sp,sp,-56
    1668:	dfc00d15 	stw	ra,52(sp)
    166c:	df000c15 	stw	fp,48(sp)
    1670:	df000c04 	addi	fp,sp,48
    1674:	2005883a 	mov	r2,r4
    1678:	e17fff15 	stw	r5,-4(fp)
    167c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
    1680:	008000b4 	movhi	r2,2
    1684:	10a2dd04 	addi	r2,r2,-29836
    1688:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
    168c:	008000b4 	movhi	r2,2
    1690:	10a2dd04 	addi	r2,r2,-29836
    1694:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
    1698:	e0fffe03 	ldbu	r3,-8(fp)
    169c:	008000b4 	movhi	r2,2
    16a0:	10a2dd04 	addi	r2,r2,-29836
    16a4:	d8800415 	stw	r2,16(sp)
    16a8:	00800244 	movi	r2,9
    16ac:	d8800315 	stw	r2,12(sp)
    16b0:	d8000215 	stw	zero,8(sp)
    16b4:	00800084 	movi	r2,2
    16b8:	d8800115 	stw	r2,4(sp)
    16bc:	d8000015 	stw	zero,0(sp)
    16c0:	01c00184 	movi	r7,6
    16c4:	01802004 	movi	r6,128
    16c8:	000b883a 	mov	r5,zero
    16cc:	1809883a 	mov	r4,r3
    16d0:	00023c40 	call	23c4 <XferCtrlReq>
    16d4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
    16d8:	e0bffc03 	ldbu	r2,-16(fp)
    16dc:	10000226 	beq	r2,zero,16e8 <HIDKProbe+0x84>
		return (FALSE);
    16e0:	0005883a 	mov	r2,zero
    16e4:	0000dc06 	br	1a58 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1080008b 	ldhu	r2,2(r2)
    16f0:	10bfffcc 	andi	r2,r2,65535
    16f4:	10804070 	cmpltui	r2,r2,257
    16f8:	1000031e 	bne	r2,zero,1708 <HIDKProbe+0xa4>
		total_length = 256;
    16fc:	00804004 	movi	r2,256
    1700:	e0bff90d 	sth	r2,-28(fp)
    1704:	00000306 	br	1714 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
    1708:	e0bffa17 	ldw	r2,-24(fp)
    170c:	1080008b 	ldhu	r2,2(r2)
    1710:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
    1714:	e13ffe03 	ldbu	r4,-8(fp)
    1718:	e0fff90b 	ldhu	r3,-28(fp)
    171c:	008000b4 	movhi	r2,2
    1720:	10a2dd04 	addi	r2,r2,-29836
    1724:	d8800415 	stw	r2,16(sp)
    1728:	d8c00315 	stw	r3,12(sp)
    172c:	d8000215 	stw	zero,8(sp)
    1730:	00800084 	movi	r2,2
    1734:	d8800115 	stw	r2,4(sp)
    1738:	d8000015 	stw	zero,0(sp)
    173c:	01c00184 	movi	r7,6
    1740:	01802004 	movi	r6,128
    1744:	000b883a 	mov	r5,zero
    1748:	00023c40 	call	23c4 <XferCtrlReq>
    174c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
    1750:	e0bffc03 	ldbu	r2,-16(fp)
    1754:	10000226 	beq	r2,zero,1760 <HIDKProbe+0xfc>
		return (FALSE);
    1758:	0005883a 	mov	r2,zero
    175c:	0000be06 	br	1a58 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
    1760:	e0bffa17 	ldw	r2,-24(fp)
    1764:	10800143 	ldbu	r2,5(r2)
    1768:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
    176c:	0000b306 	br	1a3c <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
    1770:	e0bffa17 	ldw	r2,-24(fp)
    1774:	10800043 	ldbu	r2,1(r2)
    1778:	10803fcc 	andi	r2,r2,255
    177c:	10800120 	cmpeqi	r2,r2,4
    1780:	1000091e 	bne	r2,zero,17a8 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1784:	e0bffa17 	ldw	r2,-24(fp)
    1788:	10800003 	ldbu	r2,0(r2)
    178c:	10803fcc 	andi	r2,r2,255
    1790:	e0fffb17 	ldw	r3,-20(fp)
    1794:	1885883a 	add	r2,r3,r2
    1798:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
    179c:	e0bffb17 	ldw	r2,-20(fp)
    17a0:	e0bffa15 	stw	r2,-24(fp)
    17a4:	0000a506 	br	1a3c <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
    17a8:	e0bffa17 	ldw	r2,-24(fp)
    17ac:	10800143 	ldbu	r2,5(r2)
    17b0:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
    17b4:	e0bffa17 	ldw	r2,-24(fp)
    17b8:	10800183 	ldbu	r2,6(r2)
    17bc:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
    17c0:	e0bffa17 	ldw	r2,-24(fp)
    17c4:	108001c3 	ldbu	r2,7(r2)
    17c8:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    17cc:	e0bffc83 	ldbu	r2,-14(fp)
    17d0:	108000d8 	cmpnei	r2,r2,3
    17d4:	1000971e 	bne	r2,zero,1a34 <HIDKProbe+0x3d0>
    17d8:	e0bffcc3 	ldbu	r2,-13(fp)
    17dc:	10800058 	cmpnei	r2,r2,1
    17e0:	1000941e 	bne	r2,zero,1a34 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
    17e4:	e0bffd03 	ldbu	r2,-12(fp)
    17e8:	10800058 	cmpnei	r2,r2,1
    17ec:	1000911e 	bne	r2,zero,1a34 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
    17f0:	e0fffe03 	ldbu	r3,-8(fp)
    17f4:	008000b4 	movhi	r2,2
    17f8:	10a31d04 	addi	r2,r2,-29580
    17fc:	180690fa 	slli	r3,r3,3
    1800:	10c5883a 	add	r2,r2,r3
    1804:	10800104 	addi	r2,r2,4
    1808:	00c00044 	movi	r3,1
    180c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
    1810:	e0fffe03 	ldbu	r3,-8(fp)
    1814:	008000b4 	movhi	r2,2
    1818:	10a31d04 	addi	r2,r2,-29580
    181c:	180690fa 	slli	r3,r3,3
    1820:	10c5883a 	add	r2,r2,r3
    1824:	10800017 	ldw	r2,0(r2)
    1828:	1080008b 	ldhu	r2,2(r2)
    182c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
    1830:	0001a6c0 	call	1a6c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
    1834:	e0fffe03 	ldbu	r3,-8(fp)
    1838:	008000b4 	movhi	r2,2
    183c:	10a31d04 	addi	r2,r2,-29580
    1840:	180690fa 	slli	r3,r3,3
    1844:	10c7883a 	add	r3,r2,r3
    1848:	008000b4 	movhi	r2,2
    184c:	10a2c904 	addi	r2,r2,-29916
    1850:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
    1854:	e0fffe03 	ldbu	r3,-8(fp)
    1858:	008000b4 	movhi	r2,2
    185c:	10a31d04 	addi	r2,r2,-29580
    1860:	180690fa 	slli	r3,r3,3
    1864:	10c5883a 	add	r2,r2,r3
    1868:	10800017 	ldw	r2,0(r2)
    186c:	e0fffd43 	ldbu	r3,-11(fp)
    1870:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
    1874:	e0bffa17 	ldw	r2,-24(fp)
    1878:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
    187c:	d0a6f145 	stb	r2,-25659(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
    1880:	e0bffe03 	ldbu	r2,-8(fp)
    1884:	d0a6f105 	stb	r2,-25660(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
    1888:	e0bffa17 	ldw	r2,-24(fp)
    188c:	10800003 	ldbu	r2,0(r2)
    1890:	10803fcc 	andi	r2,r2,255
    1894:	e0fffb17 	ldw	r3,-20(fp)
    1898:	1885883a 	add	r2,r3,r2
    189c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
    18a0:	e0bffb17 	ldw	r2,-20(fp)
    18a4:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
    18a8:	00005b06 	br	1a18 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
    18ac:	e0bffa17 	ldw	r2,-24(fp)
    18b0:	10800043 	ldbu	r2,1(r2)
    18b4:	10803fcc 	andi	r2,r2,255
    18b8:	10800160 	cmpeqi	r2,r2,5
    18bc:	1000091e 	bne	r2,zero,18e4 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    18c0:	e0bffa17 	ldw	r2,-24(fp)
    18c4:	10800003 	ldbu	r2,0(r2)
    18c8:	10803fcc 	andi	r2,r2,255
    18cc:	e0fffb17 	ldw	r3,-20(fp)
    18d0:	1885883a 	add	r2,r3,r2
    18d4:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
    18d8:	e0bffb17 	ldw	r2,-20(fp)
    18dc:	e0bffa15 	stw	r2,-24(fp)
    18e0:	00004d06 	br	1a18 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    18e4:	e0fffe03 	ldbu	r3,-8(fp)
    18e8:	008000b4 	movhi	r2,2
    18ec:	10a31d04 	addi	r2,r2,-29580
    18f0:	180690fa 	slli	r3,r3,3
    18f4:	10c5883a 	add	r2,r2,r3
    18f8:	10800017 	ldw	r2,0(r2)
    18fc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
    1900:	e0fffa17 	ldw	r3,-24(fp)
    1904:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    1908:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    190c:	e0fffe03 	ldbu	r3,-8(fp)
    1910:	008000b4 	movhi	r2,2
    1914:	10a31d04 	addi	r2,r2,-29580
    1918:	180690fa 	slli	r3,r3,3
    191c:	10c5883a 	add	r2,r2,r3
    1920:	10800017 	ldw	r2,0(r2)
    1924:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
    1928:	e0fffa17 	ldw	r3,-24(fp)
    192c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    1930:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    1934:	e0fffe03 	ldbu	r3,-8(fp)
    1938:	008000b4 	movhi	r2,2
    193c:	10a31d04 	addi	r2,r2,-29580
    1940:	180690fa 	slli	r3,r3,3
    1944:	10c5883a 	add	r2,r2,r3
    1948:	10800017 	ldw	r2,0(r2)
    194c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
    1950:	e0fffa17 	ldw	r3,-24(fp)
    1954:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    1958:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    195c:	e0fffe03 	ldbu	r3,-8(fp)
    1960:	008000b4 	movhi	r2,2
    1964:	10a31d04 	addi	r2,r2,-29580
    1968:	180690fa 	slli	r3,r3,3
    196c:	10c5883a 	add	r2,r2,r3
    1970:	10800017 	ldw	r2,0(r2)
    1974:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
    1978:	e0fffa17 	ldw	r3,-24(fp)
    197c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1980:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
    1984:	e0fffe03 	ldbu	r3,-8(fp)
    1988:	e0bffc43 	ldbu	r2,-15(fp)
    198c:	d8000415 	stw	zero,16(sp)
    1990:	d8000315 	stw	zero,12(sp)
    1994:	d8000215 	stw	zero,8(sp)
    1998:	d8000115 	stw	zero,4(sp)
    199c:	d8800015 	stw	r2,0(sp)
    19a0:	01c00244 	movi	r7,9
    19a4:	000d883a 	mov	r6,zero
    19a8:	000b883a 	mov	r5,zero
    19ac:	1809883a 	mov	r4,r3
    19b0:	00023c40 	call	23c4 <XferCtrlReq>
    19b4:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
    19b8:	e0bffc03 	ldbu	r2,-16(fp)
    19bc:	10000226 	beq	r2,zero,19c8 <HIDKProbe+0x364>
							return (FALSE);
    19c0:	0005883a 	mov	r2,zero
    19c4:	00002406 	br	1a58 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
    19c8:	e0fffe03 	ldbu	r3,-8(fp)
    19cc:	d0a6f143 	ldbu	r2,-25659(gp)
    19d0:	10803fcc 	andi	r2,r2,255
    19d4:	d8000415 	stw	zero,16(sp)
    19d8:	d8000315 	stw	zero,12(sp)
    19dc:	d8800215 	stw	r2,8(sp)
    19e0:	d8000115 	stw	zero,4(sp)
    19e4:	d8000015 	stw	zero,0(sp)
    19e8:	01c002c4 	movi	r7,11
    19ec:	01800844 	movi	r6,33
    19f0:	000b883a 	mov	r5,zero
    19f4:	1809883a 	mov	r4,r3
    19f8:	00023c40 	call	23c4 <XferCtrlReq>
    19fc:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
    1a00:	e0bffc03 	ldbu	r2,-16(fp)
    1a04:	10000226 	beq	r2,zero,1a10 <HIDKProbe+0x3ac>
							return (FALSE);
    1a08:	0005883a 	mov	r2,zero
    1a0c:	00001206 	br	1a58 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
    1a10:	00800044 	movi	r2,1
    1a14:	00001006 	br	1a58 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
    1a18:	e0fff90b 	ldhu	r3,-28(fp)
    1a1c:	008000b4 	movhi	r2,2
    1a20:	10a2dd04 	addi	r2,r2,-29836
    1a24:	1885883a 	add	r2,r3,r2
    1a28:	e0fffb17 	ldw	r3,-20(fp)
    1a2c:	18bf9f36 	bltu	r3,r2,18ac <__alt_data_end+0xfc0018ac>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    1a30:	00000206 	br	1a3c <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
    1a34:	0005883a 	mov	r2,zero
    1a38:	00000706 	br	1a58 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
    1a3c:	e0fff90b 	ldhu	r3,-28(fp)
    1a40:	008000b4 	movhi	r2,2
    1a44:	10a2dd04 	addi	r2,r2,-29836
    1a48:	1885883a 	add	r2,r3,r2
    1a4c:	e0fffb17 	ldw	r3,-20(fp)
    1a50:	18bf4736 	bltu	r3,r2,1770 <__alt_data_end+0xfc001770>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
    1a54:	0005883a 	mov	r2,zero
}
    1a58:	e037883a 	mov	sp,fp
    1a5c:	dfc00117 	ldw	ra,4(sp)
    1a60:	df000017 	ldw	fp,0(sp)
    1a64:	dec00204 	addi	sp,sp,8
    1a68:	f800283a 	ret

00001a6c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
    1a6c:	deffff04 	addi	sp,sp,-4
    1a70:	df000015 	stw	fp,0(sp)
    1a74:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
    1a78:	008000b4 	movhi	r2,2
    1a7c:	10a2c904 	addi	r2,r2,-29916
    1a80:	00c01004 	movi	r3,64
    1a84:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
    1a88:	008000b4 	movhi	r2,2
    1a8c:	10a2c904 	addi	r2,r2,-29916
    1a90:	00c00404 	movi	r3,16
    1a94:	10c00385 	stb	r3,14(r2)
}
    1a98:	0001883a 	nop
    1a9c:	e037883a 	mov	sp,fp
    1aa0:	df000017 	ldw	fp,0(sp)
    1aa4:	dec00104 	addi	sp,sp,4
    1aa8:	f800283a 	ret

00001aac <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
    1aac:	defffb04 	addi	sp,sp,-20
    1ab0:	dfc00415 	stw	ra,16(sp)
    1ab4:	df000315 	stw	fp,12(sp)
    1ab8:	df000304 	addi	fp,sp,12
    1abc:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
    1ac0:	d0a6f103 	ldbu	r2,-25660(gp)
    1ac4:	10803fcc 	andi	r2,r2,255
    1ac8:	100b883a 	mov	r5,r2
    1acc:	01003804 	movi	r4,224
    1ad0:	0001c880 	call	1c88 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1ad4:	d0a6f103 	ldbu	r2,-25660(gp)
    1ad8:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
    1adc:	d0a6f103 	ldbu	r2,-25660(gp)
    1ae0:	10c03fcc 	andi	r3,r2,255
    1ae4:	008000b4 	movhi	r2,2
    1ae8:	10a31d04 	addi	r2,r2,-29580
    1aec:	180690fa 	slli	r3,r3,3
    1af0:	10c5883a 	add	r2,r2,r3
    1af4:	10800017 	ldw	r2,0(r2)
    1af8:	10800204 	addi	r2,r2,8
    1afc:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1b00:	10803fcc 	andi	r2,r2,255
    1b04:	d8800015 	stw	r2,0(sp)
    1b08:	e1ffff17 	ldw	r7,-4(fp)
    1b0c:	01800204 	movi	r6,8
    1b10:	01400044 	movi	r5,1
    1b14:	00027e80 	call	27e8 <XferInTransfer>
    1b18:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
    1b1c:	e0bffe03 	ldbu	r2,-8(fp)
}
    1b20:	e037883a 	mov	sp,fp
    1b24:	dfc00117 	ldw	ra,4(sp)
    1b28:	df000017 	ldw	fp,0(sp)
    1b2c:	dec00204 	addi	sp,sp,8
    1b30:	f800283a 	ret

00001b34 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
    1b34:	defffb04 	addi	sp,sp,-20
    1b38:	dfc00415 	stw	ra,16(sp)
    1b3c:	df000315 	stw	fp,12(sp)
    1b40:	df000304 	addi	fp,sp,12
    1b44:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
    1b48:	d0a6f103 	ldbu	r2,-25660(gp)
    1b4c:	10803fcc 	andi	r2,r2,255
    1b50:	100b883a 	mov	r5,r2
    1b54:	01003804 	movi	r4,224
    1b58:	0001c880 	call	1c88 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1b5c:	d0a6f103 	ldbu	r2,-25660(gp)
    1b60:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
    1b64:	d0a6f103 	ldbu	r2,-25660(gp)
    1b68:	10c03fcc 	andi	r3,r2,255
    1b6c:	008000b4 	movhi	r2,2
    1b70:	10a31d04 	addi	r2,r2,-29580
    1b74:	180690fa 	slli	r3,r3,3
    1b78:	10c5883a 	add	r2,r2,r3
    1b7c:	10800017 	ldw	r2,0(r2)
    1b80:	10800204 	addi	r2,r2,8
    1b84:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	d8800015 	stw	r2,0(sp)
    1b90:	e1ffff17 	ldw	r7,-4(fp)
    1b94:	01800204 	movi	r6,8
    1b98:	01400044 	movi	r5,1
    1b9c:	00027e80 	call	27e8 <XferInTransfer>
    1ba0:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
    1ba4:	e0bffe03 	ldbu	r2,-8(fp)
}
    1ba8:	e037883a 	mov	sp,fp
    1bac:	dfc00117 	ldw	ra,4(sp)
    1bb0:	df000017 	ldw	fp,0(sp)
    1bb4:	dec00204 	addi	sp,sp,8
    1bb8:	f800283a 	ret

00001bbc <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
    1bbc:	defffb04 	addi	sp,sp,-20
    1bc0:	df000415 	stw	fp,16(sp)
    1bc4:	df000404 	addi	fp,sp,16
    1bc8:	2007883a 	mov	r3,r4
    1bcc:	2805883a 	mov	r2,r5
    1bd0:	e1bffe15 	stw	r6,-8(fp)
    1bd4:	e1ffff15 	stw	r7,-4(fp)
    1bd8:	e0fffc05 	stb	r3,-16(fp)
    1bdc:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
    1be0:	0005883a 	mov	r2,zero
}
    1be4:	e037883a 	mov	sp,fp
    1be8:	df000017 	ldw	fp,0(sp)
    1bec:	dec00104 	addi	sp,sp,4
    1bf0:	f800283a 	ret

00001bf4 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
    1bf4:	defffb04 	addi	sp,sp,-20
    1bf8:	df000415 	stw	fp,16(sp)
    1bfc:	df000404 	addi	fp,sp,16
    1c00:	2007883a 	mov	r3,r4
    1c04:	2805883a 	mov	r2,r5
    1c08:	e1bffe15 	stw	r6,-8(fp)
    1c0c:	e1ffff15 	stw	r7,-4(fp)
    1c10:	e0fffc05 	stb	r3,-16(fp)
    1c14:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
    1c18:	0005883a 	mov	r2,zero
}
    1c1c:	e037883a 	mov	sp,fp
    1c20:	df000017 	ldw	fp,0(sp)
    1c24:	dec00104 	addi	sp,sp,4
    1c28:	f800283a 	ret

00001c2c <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
    1c2c:	defffc04 	addi	sp,sp,-16
    1c30:	df000315 	stw	fp,12(sp)
    1c34:	df000304 	addi	fp,sp,12
    1c38:	2807883a 	mov	r3,r5
    1c3c:	3005883a 	mov	r2,r6
    1c40:	e13ffd05 	stb	r4,-12(fp)
    1c44:	e0fffe05 	stb	r3,-8(fp)
    1c48:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
    1c4c:	0001883a 	nop
    1c50:	e037883a 	mov	sp,fp
    1c54:	df000017 	ldw	fp,0(sp)
    1c58:	dec00104 	addi	sp,sp,4
    1c5c:	f800283a 	ret

00001c60 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
    1c60:	defffe04 	addi	sp,sp,-8
    1c64:	df000115 	stw	fp,4(sp)
    1c68:	df000104 	addi	fp,sp,4
    1c6c:	2005883a 	mov	r2,r4
    1c70:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
    1c74:	0001883a 	nop
    1c78:	e037883a 	mov	sp,fp
    1c7c:	df000017 	ldw	fp,0(sp)
    1c80:	dec00104 	addi	sp,sp,4
    1c84:	f800283a 	ret

00001c88 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
    1c88:	defff804 	addi	sp,sp,-32
    1c8c:	dfc00715 	stw	ra,28(sp)
    1c90:	df000615 	stw	fp,24(sp)
    1c94:	df000604 	addi	fp,sp,24
    1c98:	2007883a 	mov	r3,r4
    1c9c:	2805883a 	mov	r2,r5
    1ca0:	e0fffe05 	stb	r3,-8(fp)
    1ca4:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 write_p[2] = {reg + 2, val};
    1ca8:	e0bffe03 	ldbu	r2,-8(fp)
    1cac:	10800084 	addi	r2,r2,2
    1cb0:	e0bffd05 	stb	r2,-12(fp)
    1cb4:	e0bfff03 	ldbu	r2,-4(fp)
    1cb8:	e0bffd45 	stb	r2,-11(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,2,write_p,0,0,0) < 0){
    1cbc:	d8000215 	stw	zero,8(sp)
    1cc0:	d8000115 	stw	zero,4(sp)
    1cc4:	d8000015 	stw	zero,0(sp)
    1cc8:	e1fffd04 	addi	r7,fp,-12
    1ccc:	01800084 	movi	r6,2
    1cd0:	000b883a 	mov	r5,zero
    1cd4:	01010034 	movhi	r4,1024
    1cd8:	21044804 	addi	r4,r4,4384
    1cdc:	00135ec0 	call	135ec <alt_avalon_spi_command>
    1ce0:	1000040e 	bge	r2,zero,1cf4 <MAXreg_wr+0x6c>
		printf("ERROR!");
    1ce4:	01000074 	movhi	r4,1
    1ce8:	21140b04 	addi	r4,r4,20524
    1cec:	00034680 	call	3468 <printf>
	}
	return;
    1cf0:	0001883a 	nop
    1cf4:	0001883a 	nop
}
    1cf8:	e037883a 	mov	sp,fp
    1cfc:	dfc00117 	ldw	ra,4(sp)
    1d00:	df000017 	ldw	fp,0(sp)
    1d04:	dec00204 	addi	sp,sp,8
    1d08:	f800283a 	ret

00001d0c <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
    1d0c:	defff404 	addi	sp,sp,-48
    1d10:	dfc00b15 	stw	ra,44(sp)
    1d14:	df000a15 	stw	fp,40(sp)
    1d18:	dc000915 	stw	r16,36(sp)
    1d1c:	df000a04 	addi	fp,sp,40
    1d20:	201b883a 	mov	r13,r4
    1d24:	2809883a 	mov	r4,r5
    1d28:	e1bffe15 	stw	r6,-8(fp)
    1d2c:	e37ffc05 	stb	r13,-16(fp)
    1d30:	e13ffd05 	stb	r4,-12(fp)
    1d34:	d809883a 	mov	r4,sp
    1d38:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[nbytes+1];
    1d3c:	e13ffd03 	ldbu	r4,-12(fp)
    1d40:	21000044 	addi	r4,r4,1
    1d44:	217fffc4 	addi	r5,r4,-1
    1d48:	e17ffa15 	stw	r5,-24(fp)
    1d4c:	200b883a 	mov	r5,r4
    1d50:	2817883a 	mov	r11,r5
    1d54:	0019883a 	mov	r12,zero
    1d58:	580ad77a 	srli	r5,r11,29
    1d5c:	601090fa 	slli	r8,r12,3
    1d60:	2a10b03a 	or	r8,r5,r8
    1d64:	580e90fa 	slli	r7,r11,3
    1d68:	200b883a 	mov	r5,r4
    1d6c:	2813883a 	mov	r9,r5
    1d70:	0015883a 	mov	r10,zero
    1d74:	480ad77a 	srli	r5,r9,29
    1d78:	500690fa 	slli	r3,r10,3
    1d7c:	28c6b03a 	or	r3,r5,r3
    1d80:	480490fa 	slli	r2,r9,3
    1d84:	2005883a 	mov	r2,r4
    1d88:	108000c4 	addi	r2,r2,3
    1d8c:	1004d0ba 	srli	r2,r2,2
    1d90:	1085883a 	add	r2,r2,r2
    1d94:	1085883a 	add	r2,r2,r2
    1d98:	d8b7c83a 	sub	sp,sp,r2
    1d9c:	d8800304 	addi	r2,sp,12
    1da0:	1005883a 	mov	r2,r2
    1da4:	e0bffb15 	stw	r2,-20(fp)
	write_p[0] = reg + 2;
    1da8:	e0bffc03 	ldbu	r2,-16(fp)
    1dac:	10800084 	addi	r2,r2,2
    1db0:	1007883a 	mov	r3,r2
    1db4:	e0bffb17 	ldw	r2,-20(fp)
    1db8:	10c00005 	stb	r3,0(r2)
	int i = 0;
    1dbc:	e03ff915 	stw	zero,-28(fp)
	for (i = 0;i < nbytes;i++) {
    1dc0:	e03ff915 	stw	zero,-28(fp)
    1dc4:	00000c06 	br	1df8 <MAXbytes_wr+0xec>
		write_p[i+1] = data[i];
    1dc8:	e0bff917 	ldw	r2,-28(fp)
    1dcc:	10800044 	addi	r2,r2,1
    1dd0:	e0fff917 	ldw	r3,-28(fp)
    1dd4:	e13ffe17 	ldw	r4,-8(fp)
    1dd8:	20c7883a 	add	r3,r4,r3
    1ddc:	18c00003 	ldbu	r3,0(r3)
    1de0:	e13ffb17 	ldw	r4,-20(fp)
    1de4:	2085883a 	add	r2,r4,r2
    1de8:	10c00005 	stb	r3,0(r2)
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[nbytes+1];
	write_p[0] = reg + 2;
	int i = 0;
	for (i = 0;i < nbytes;i++) {
    1dec:	e0bff917 	ldw	r2,-28(fp)
    1df0:	10800044 	addi	r2,r2,1
    1df4:	e0bff915 	stw	r2,-28(fp)
    1df8:	e0bffd03 	ldbu	r2,-12(fp)
    1dfc:	e0fff917 	ldw	r3,-28(fp)
    1e00:	18bff116 	blt	r3,r2,1dc8 <__alt_data_end+0xfc001dc8>
		write_p[i+1] = data[i];
	}
	if(alt_avalon_spi_command(SPI_0_BASE,0,nbytes+1,write_p,0,0,0) < 0){
    1e04:	e0bffd03 	ldbu	r2,-12(fp)
    1e08:	10800044 	addi	r2,r2,1
    1e0c:	1007883a 	mov	r3,r2
    1e10:	e0bffb17 	ldw	r2,-20(fp)
    1e14:	d8000215 	stw	zero,8(sp)
    1e18:	d8000115 	stw	zero,4(sp)
    1e1c:	d8000015 	stw	zero,0(sp)
    1e20:	100f883a 	mov	r7,r2
    1e24:	180d883a 	mov	r6,r3
    1e28:	000b883a 	mov	r5,zero
    1e2c:	01010034 	movhi	r4,1024
    1e30:	21044804 	addi	r4,r4,4384
    1e34:	00135ec0 	call	135ec <alt_avalon_spi_command>
    1e38:	1000030e 	bge	r2,zero,1e48 <MAXbytes_wr+0x13c>
		printf("ERROR!");
    1e3c:	01000074 	movhi	r4,1
    1e40:	21140b04 	addi	r4,r4,20524
    1e44:	00034680 	call	3468 <printf>
	}
	return (data+nbytes);
    1e48:	e0bffd03 	ldbu	r2,-12(fp)
    1e4c:	e0fffe17 	ldw	r3,-8(fp)
    1e50:	1885883a 	add	r2,r3,r2
    1e54:	8037883a 	mov	sp,r16
}
    1e58:	e6ffff04 	addi	sp,fp,-4
    1e5c:	dfc00217 	ldw	ra,8(sp)
    1e60:	df000117 	ldw	fp,4(sp)
    1e64:	dc000017 	ldw	r16,0(sp)
    1e68:	dec00304 	addi	sp,sp,12
    1e6c:	f800283a 	ret

00001e70 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
    1e70:	defff904 	addi	sp,sp,-28
    1e74:	dfc00615 	stw	ra,24(sp)
    1e78:	df000515 	stw	fp,20(sp)
    1e7c:	df000504 	addi	fp,sp,20
    1e80:	2005883a 	mov	r2,r4
    1e84:	e0bfff05 	stb	r2,-4(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 write_p[1] = {reg};
    1e88:	e0bfff03 	ldbu	r2,-4(fp)
    1e8c:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 read_p[1] = {0x00};
    1e90:	e03ffe45 	stb	zero,-7(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,1,write_p,1,read_p,0) < 0){
    1e94:	d8000215 	stw	zero,8(sp)
    1e98:	e0bffe44 	addi	r2,fp,-7
    1e9c:	d8800115 	stw	r2,4(sp)
    1ea0:	00800044 	movi	r2,1
    1ea4:	d8800015 	stw	r2,0(sp)
    1ea8:	e1fffe04 	addi	r7,fp,-8
    1eac:	01800044 	movi	r6,1
    1eb0:	000b883a 	mov	r5,zero
    1eb4:	01010034 	movhi	r4,1024
    1eb8:	21044804 	addi	r4,r4,4384
    1ebc:	00135ec0 	call	135ec <alt_avalon_spi_command>
    1ec0:	1000030e 	bge	r2,zero,1ed0 <MAXreg_rd+0x60>
		printf("ERROR!");
    1ec4:	01000074 	movhi	r4,1
    1ec8:	21140b04 	addi	r4,r4,20524
    1ecc:	00034680 	call	3468 <printf>
	}
	return read_p[0];
    1ed0:	e0bffe43 	ldbu	r2,-7(fp)
}
    1ed4:	e037883a 	mov	sp,fp
    1ed8:	dfc00117 	ldw	ra,4(sp)
    1edc:	df000017 	ldw	fp,0(sp)
    1ee0:	dec00204 	addi	sp,sp,8
    1ee4:	f800283a 	ret

00001ee8 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
    1ee8:	defff704 	addi	sp,sp,-36
    1eec:	dfc00815 	stw	ra,32(sp)
    1ef0:	df000715 	stw	fp,28(sp)
    1ef4:	df000704 	addi	fp,sp,28
    1ef8:	2007883a 	mov	r3,r4
    1efc:	2805883a 	mov	r2,r5
    1f00:	e1bfff15 	stw	r6,-4(fp)
    1f04:	e0fffd05 	stb	r3,-12(fp)
    1f08:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[1] = {reg};
    1f0c:	e0bffd03 	ldbu	r2,-12(fp)
    1f10:	e0bffc05 	stb	r2,-16(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,1,write_p,nbytes,data,0) < 0) {
    1f14:	e0bffe03 	ldbu	r2,-8(fp)
    1f18:	d8000215 	stw	zero,8(sp)
    1f1c:	e0ffff17 	ldw	r3,-4(fp)
    1f20:	d8c00115 	stw	r3,4(sp)
    1f24:	d8800015 	stw	r2,0(sp)
    1f28:	e1fffc04 	addi	r7,fp,-16
    1f2c:	01800044 	movi	r6,1
    1f30:	000b883a 	mov	r5,zero
    1f34:	01010034 	movhi	r4,1024
    1f38:	21044804 	addi	r4,r4,4384
    1f3c:	00135ec0 	call	135ec <alt_avalon_spi_command>
    1f40:	1000030e 	bge	r2,zero,1f50 <MAXbytes_rd+0x68>
		printf("ERROR!");
    1f44:	01000074 	movhi	r4,1
    1f48:	21140b04 	addi	r4,r4,20524
    1f4c:	00034680 	call	3468 <printf>
	}
	return (data+nbytes);
    1f50:	e0bffe03 	ldbu	r2,-8(fp)
    1f54:	e0ffff17 	ldw	r3,-4(fp)
    1f58:	1885883a 	add	r2,r3,r2
}
    1f5c:	e037883a 	mov	sp,fp
    1f60:	dfc00117 	ldw	ra,4(sp)
    1f64:	df000017 	ldw	fp,0(sp)
    1f68:	dec00204 	addi	sp,sp,8
    1f6c:	f800283a 	ret

00001f70 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
    1f70:	defffd04 	addi	sp,sp,-12
    1f74:	dfc00215 	stw	ra,8(sp)
    1f78:	df000115 	stw	fp,4(sp)
    1f7c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    1f80:	0007883a 	mov	r3,zero
    1f84:	00810034 	movhi	r2,1024
    1f88:	10847404 	addi	r2,r2,4560
    1f8c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    1f90:	010003f4 	movhi	r4,15
    1f94:	21109004 	addi	r4,r4,16960
    1f98:	0010d200 	call	10d20 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    1f9c:	00c00044 	movi	r3,1
    1fa0:	00810034 	movhi	r2,1024
    1fa4:	10847404 	addi	r2,r2,4560
    1fa8:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
    1fac:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
    1fb0:	01400804 	movi	r5,32
    1fb4:	01001e04 	movi	r4,120
    1fb8:	0001c880 	call	1c88 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
    1fbc:	000b883a 	mov	r5,zero
    1fc0:	01001e04 	movi	r4,120
    1fc4:	0001c880 	call	1c88 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
    1fc8:	00000806 	br	1fec <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
    1fcc:	e0bfff03 	ldbu	r2,-4(fp)
    1fd0:	10800044 	addi	r2,r2,1
    1fd4:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
    1fd8:	e0bfff03 	ldbu	r2,-4(fp)
    1fdc:	1000031e 	bne	r2,zero,1fec <MAX3421E_reset+0x7c>
			printf("reset timeout!");
    1fe0:	01000074 	movhi	r4,1
    1fe4:	21140d04 	addi	r4,r4,20532
    1fe8:	00034680 	call	3468 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
    1fec:	01001a04 	movi	r4,104
    1ff0:	0001e700 	call	1e70 <MAXreg_rd>
    1ff4:	10803fcc 	andi	r2,r2,255
    1ff8:	1080004c 	andi	r2,r2,1
    1ffc:	103ff326 	beq	r2,zero,1fcc <__alt_data_end+0xfc001fcc>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
    2000:	0001883a 	nop
    2004:	e037883a 	mov	sp,fp
    2008:	dfc00117 	ldw	ra,4(sp)
    200c:	df000017 	ldw	fp,0(sp)
    2010:	dec00204 	addi	sp,sp,8
    2014:	f800283a 	ret

00002018 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
    2018:	defffe04 	addi	sp,sp,-8
    201c:	df000115 	stw	fp,4(sp)
    2020:	df000104 	addi	fp,sp,4
    2024:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
    2028:	00800044 	movi	r2,1
}
    202c:	e037883a 	mov	sp,fp
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00104 	addi	sp,sp,4
    2038:	f800283a 	ret

0000203c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
    203c:	defffd04 	addi	sp,sp,-12
    2040:	dfc00215 	stw	ra,8(sp)
    2044:	df000115 	stw	fp,4(sp)
    2048:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
    204c:	01003e04 	movi	r4,248
    2050:	0001e700 	call	1e70 <MAXreg_rd>
    2054:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
    2058:	e0ffff03 	ldbu	r3,-4(fp)
    205c:	00bff004 	movi	r2,-64
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
    2068:	e0bfff03 	ldbu	r2,-4(fp)
    206c:	10c01020 	cmpeqi	r3,r2,64
    2070:	1800221e 	bne	r3,zero,20fc <MAX_busprobe+0xc0>
    2074:	10c01048 	cmpgei	r3,r2,65
    2078:	1800021e 	bne	r3,zero,2084 <MAX_busprobe+0x48>
    207c:	10003b26 	beq	r2,zero,216c <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    2080:	00004a06 	br	21ac <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
    2084:	10c02020 	cmpeqi	r3,r2,128
    2088:	1800031e 	bne	r3,zero,2098 <MAX_busprobe+0x5c>
    208c:	10803020 	cmpeqi	r2,r2,192
    2090:	1000331e 	bne	r2,zero,2160 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    2094:	00004506 	br	21ac <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
    2098:	d0a00303 	ldbu	r2,-32756(gp)
    209c:	10803fcc 	andi	r2,r2,255
    20a0:	108004e0 	cmpeqi	r2,r2,19
    20a4:	10003e1e 	bne	r2,zero,21a0 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
    20a8:	01003604 	movi	r4,216
    20ac:	0001e700 	call	1e70 <MAXreg_rd>
    20b0:	10803fcc 	andi	r2,r2,255
    20b4:	1080008c 	andi	r2,r2,2
    20b8:	1000071e 	bne	r2,zero,20d8 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
    20bc:	01403244 	movi	r5,201
    20c0:	01003604 	movi	r4,216
    20c4:	0001c880 	call	1c88 <MAXreg_wr>
				printf("Starting in full speed\n");
    20c8:	01000074 	movhi	r4,1
    20cc:	21141104 	addi	r4,r4,20548
    20d0:	00035840 	call	3584 <puts>
    20d4:	00000606 	br	20f0 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
    20d8:	014032c4 	movi	r5,203
    20dc:	01003604 	movi	r4,216
    20e0:	0001c880 	call	1c88 <MAXreg_wr>
				printf("Starting in low speed\n");
    20e4:	01000074 	movhi	r4,1
    20e8:	21141704 	addi	r4,r4,20572
    20ec:	00035840 	call	3584 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
    20f0:	00800404 	movi	r2,16
    20f4:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    20f8:	00002906 	br	21a0 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
    20fc:	d0a00303 	ldbu	r2,-32756(gp)
    2100:	10803fcc 	andi	r2,r2,255
    2104:	108004e0 	cmpeqi	r2,r2,19
    2108:	1000271e 	bne	r2,zero,21a8 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
    210c:	01003604 	movi	r4,216
    2110:	0001e700 	call	1e70 <MAXreg_rd>
    2114:	10803fcc 	andi	r2,r2,255
    2118:	1080008c 	andi	r2,r2,2
    211c:	1000071e 	bne	r2,zero,213c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
    2120:	014032c4 	movi	r5,203
    2124:	01003604 	movi	r4,216
    2128:	0001c880 	call	1c88 <MAXreg_wr>
				printf("Starting in low speed\n");
    212c:	01000074 	movhi	r4,1
    2130:	21141704 	addi	r4,r4,20572
    2134:	00035840 	call	3584 <puts>
    2138:	00000606 	br	2154 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
    213c:	01403244 	movi	r5,201
    2140:	01003604 	movi	r4,216
    2144:	0001c880 	call	1c88 <MAXreg_wr>
				printf("Starting in full speed\n");
    2148:	01000074 	movhi	r4,1
    214c:	21141104 	addi	r4,r4,20548
    2150:	00035840 	call	3584 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
    2154:	00800404 	movi	r2,16
    2158:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    215c:	00001206 	br	21a8 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
    2160:	00800104 	movi	r2,4
    2164:	d0a00305 	stb	r2,-32756(gp)
		break;
    2168:	00001006 	br	21ac <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
    216c:	d0a00303 	ldbu	r2,-32756(gp)
    2170:	10803fcc 	andi	r2,r2,255
    2174:	10803c0c 	andi	r2,r2,240
    2178:	10000326 	beq	r2,zero,2188 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
    217c:	00800044 	movi	r2,1
    2180:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
    2184:	00000906 	br	21ac <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
    2188:	01403244 	movi	r5,201
    218c:	01003604 	movi	r4,216
    2190:	0001c880 	call	1c88 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    2194:	008000c4 	movi	r2,3
    2198:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    219c:	00000306 	br	21ac <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
    21a0:	0001883a 	nop
    21a4:	00000106 	br	21ac <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
    21a8:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    21ac:	0001883a 	nop
    21b0:	e037883a 	mov	sp,fp
    21b4:	dfc00117 	ldw	ra,4(sp)
    21b8:	df000017 	ldw	fp,0(sp)
    21bc:	dec00204 	addi	sp,sp,8
    21c0:	f800283a 	ret

000021c4 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
    21c4:	defffe04 	addi	sp,sp,-8
    21c8:	dfc00115 	stw	ra,4(sp)
    21cc:	df000015 	stw	fp,0(sp)
    21d0:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    21d4:	01400684 	movi	r5,26
    21d8:	01002204 	movi	r4,136
    21dc:	0001c880 	call	1c88 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
    21e0:	0001f700 	call	1f70 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
    21e4:	0009883a 	mov	r4,zero
    21e8:	00020180 	call	2018 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
    21ec:	01402004 	movi	r5,128
    21f0:	01002e04 	movi	r4,184
    21f4:	0001c880 	call	1c88 <MAXreg_wr>
	Vbus_power( ON);
    21f8:	01000044 	movi	r4,1
    21fc:	00020180 	call	2018 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
    2200:	01403444 	movi	r5,209
    2204:	01003604 	movi	r4,216
    2208:	0001c880 	call	1c88 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
    220c:	01400804 	movi	r5,32
    2210:	01003404 	movi	r4,208
    2214:	0001c880 	call	1c88 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
    2218:	01400104 	movi	r5,4
    221c:	01003a04 	movi	r4,232
    2220:	0001c880 	call	1c88 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
    2224:	000203c0 	call	203c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
    2228:	01400804 	movi	r5,32
    222c:	01003204 	movi	r4,200
    2230:	0001c880 	call	1c88 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
    2234:	01400044 	movi	r5,1
    2238:	01002004 	movi	r4,128
    223c:	0001c880 	call	1c88 <MAXreg_wr>
}
    2240:	0001883a 	nop
    2244:	e037883a 	mov	sp,fp
    2248:	dfc00117 	ldw	ra,4(sp)
    224c:	df000017 	ldw	fp,0(sp)
    2250:	dec00204 	addi	sp,sp,8
    2254:	f800283a 	ret

00002258 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
    2258:	defffe04 	addi	sp,sp,-8
    225c:	dfc00115 	stw	ra,4(sp)
    2260:	df000015 	stw	fp,0(sp)
    2264:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    2268:	00810034 	movhi	r2,1024
    226c:	10847c04 	addi	r2,r2,4592
    2270:	10800037 	ldwio	r2,0(r2)
    2274:	1000041e 	bne	r2,zero,2288 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
    2278:	01000074 	movhi	r4,1
    227c:	21141d04 	addi	r4,r4,20596
    2280:	00034680 	call	3468 <printf>
		MaxIntHandler();
    2284:	00022c40 	call	22c4 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
    2288:	00810034 	movhi	r2,1024
    228c:	10847804 	addi	r2,r2,4576
    2290:	10800037 	ldwio	r2,0(r2)
    2294:	10800058 	cmpnei	r2,r2,1
    2298:	1000041e 	bne	r2,zero,22ac <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
    229c:	01000074 	movhi	r4,1
    22a0:	21142104 	addi	r4,r4,20612
    22a4:	00034680 	call	3468 <printf>
		MaxGpxHandler();
    22a8:	00023900 	call	2390 <MaxGpxHandler>
	}
}
    22ac:	0001883a 	nop
    22b0:	e037883a 	mov	sp,fp
    22b4:	dfc00117 	ldw	ra,4(sp)
    22b8:	df000017 	ldw	fp,0(sp)
    22bc:	dec00204 	addi	sp,sp,8
    22c0:	f800283a 	ret

000022c4 <MaxIntHandler>:

void MaxIntHandler(void) {
    22c4:	defffd04 	addi	sp,sp,-12
    22c8:	dfc00215 	stw	ra,8(sp)
    22cc:	df000115 	stw	fp,4(sp)
    22d0:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
    22d4:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
    22d8:	01003204 	movi	r4,200
    22dc:	0001e700 	call	1e70 <MAXreg_rd>
    22e0:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
    22e4:	e0bfff43 	ldbu	r2,-3(fp)
    22e8:	100b883a 	mov	r5,r2
    22ec:	01000074 	movhi	r4,1
    22f0:	21142504 	addi	r4,r4,20628
    22f4:	00034680 	call	3468 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
    22f8:	e0bfff43 	ldbu	r2,-3(fp)
    22fc:	1080100c 	andi	r2,r2,64
    2300:	10000326 	beq	r2,zero,2310 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
    2304:	e0bfff03 	ldbu	r2,-4(fp)
    2308:	10801014 	ori	r2,r2,64
    230c:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
    2310:	e0bfff43 	ldbu	r2,-3(fp)
    2314:	1080080c 	andi	r2,r2,32
    2318:	10000426 	beq	r2,zero,232c <MaxIntHandler+0x68>
		MAX_busprobe();
    231c:	000203c0 	call	203c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
    2320:	e0bfff03 	ldbu	r2,-4(fp)
    2324:	10800814 	ori	r2,r2,32
    2328:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
    232c:	e0bfff43 	ldbu	r2,-3(fp)
    2330:	1080020c 	andi	r2,r2,8
    2334:	10000326 	beq	r2,zero,2344 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
    2338:	000b883a 	mov	r5,zero
    233c:	01000e04 	movi	r4,56
    2340:	0001c880 	call	1c88 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
    2344:	e0bfff43 	ldbu	r2,-3(fp)
    2348:	1080004c 	andi	r2,r2,1
    234c:	10000626 	beq	r2,zero,2368 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
    2350:	d0a00303 	ldbu	r2,-32756(gp)
    2354:	10800044 	addi	r2,r2,1
    2358:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
    235c:	e0bfff03 	ldbu	r2,-4(fp)
    2360:	10800054 	ori	r2,r2,1
    2364:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
    2368:	e0bfff03 	ldbu	r2,-4(fp)
    236c:	100b883a 	mov	r5,r2
    2370:	01003204 	movi	r4,200
    2374:	0001c880 	call	1c88 <MAXreg_wr>
}
    2378:	0001883a 	nop
    237c:	e037883a 	mov	sp,fp
    2380:	dfc00117 	ldw	ra,4(sp)
    2384:	df000017 	ldw	fp,0(sp)
    2388:	dec00204 	addi	sp,sp,8
    238c:	f800283a 	ret

00002390 <MaxGpxHandler>:

void MaxGpxHandler(void) {
    2390:	defffd04 	addi	sp,sp,-12
    2394:	dfc00215 	stw	ra,8(sp)
    2398:	df000115 	stw	fp,4(sp)
    239c:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
    23a0:	01002c04 	movi	r4,176
    23a4:	0001e700 	call	1e70 <MAXreg_rd>
    23a8:	e0bfff05 	stb	r2,-4(fp)
}
    23ac:	0001883a 	nop
    23b0:	e037883a 	mov	sp,fp
    23b4:	dfc00117 	ldw	ra,4(sp)
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00204 	addi	sp,sp,8
    23c0:	f800283a 	ret

000023c4 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
    23c4:	defff104 	addi	sp,sp,-60
    23c8:	dfc00e15 	stw	ra,56(sp)
    23cc:	df000d15 	stw	fp,52(sp)
    23d0:	df000d04 	addi	fp,sp,52
    23d4:	2015883a 	mov	r10,r4
    23d8:	2813883a 	mov	r9,r5
    23dc:	3011883a 	mov	r8,r6
    23e0:	380d883a 	mov	r6,r7
    23e4:	e1400217 	ldw	r5,8(fp)
    23e8:	e1000317 	ldw	r4,12(fp)
    23ec:	e0c00417 	ldw	r3,16(fp)
    23f0:	e0800517 	ldw	r2,20(fp)
    23f4:	e2bff805 	stb	r10,-32(fp)
    23f8:	e27ff905 	stb	r9,-28(fp)
    23fc:	e23ffa05 	stb	r8,-24(fp)
    2400:	e1bffb05 	stb	r6,-20(fp)
    2404:	e17ffc05 	stb	r5,-16(fp)
    2408:	e13ffd05 	stb	r4,-12(fp)
    240c:	e0fffe0d 	sth	r3,-8(fp)
    2410:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
    2414:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
    2418:	00800044 	movi	r2,1
    241c:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
    2420:	e0800617 	ldw	r2,24(fp)
    2424:	1000011e 	bne	r2,zero,242c <XferCtrlReq+0x68>
        datastage = 0;
    2428:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
    242c:	e0bff803 	ldbu	r2,-32(fp)
    2430:	100b883a 	mov	r5,r2
    2434:	01003804 	movi	r4,224
    2438:	0001c880 	call	1c88 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
    243c:	e0bffa03 	ldbu	r2,-24(fp)
    2440:	10803fcc 	andi	r2,r2,255
    2444:	1080201c 	xori	r2,r2,128
    2448:	10bfe004 	addi	r2,r2,-128
    244c:	1000020e 	bge	r2,zero,2458 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
    2450:	00800044 	movi	r2,1
    2454:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
    2458:	e0bffa03 	ldbu	r2,-24(fp)
    245c:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
    2460:	e0bffb03 	ldbu	r2,-20(fp)
    2464:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
    2468:	e0bffc03 	ldbu	r2,-16(fp)
    246c:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
    2470:	e0bffd03 	ldbu	r2,-12(fp)
    2474:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
    2478:	e0bffe0b 	ldhu	r2,-8(fp)
    247c:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
    2480:	e0bfff0b 	ldhu	r2,-4(fp)
    2484:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
    2488:	e0bff584 	addi	r2,fp,-42
    248c:	100d883a 	mov	r6,r2
    2490:	01400204 	movi	r5,8
    2494:	01000804 	movi	r4,32
    2498:	0001d0c0 	call	1d0c <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
    249c:	e0bff903 	ldbu	r2,-28(fp)
    24a0:	100b883a 	mov	r5,r2
    24a4:	01000404 	movi	r4,16
    24a8:	000266c0 	call	266c <XferDispatchPkt>
    24ac:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
    24b0:	e0bff543 	ldbu	r2,-43(fp)
    24b4:	10000226 	beq	r2,zero,24c0 <XferCtrlReq+0xfc>
        return( rcode );
    24b8:	e0bff543 	ldbu	r2,-43(fp)
    24bc:	00000f06 	br	24fc <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
    24c0:	e0bff503 	ldbu	r2,-44(fp)
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1087883a 	add	r3,r2,r2
    24cc:	d0a00104 	addi	r2,gp,-32764
    24d0:	1885883a 	add	r2,r3,r2
    24d4:	10800017 	ldw	r2,0(r2)
    24d8:	e13ff803 	ldbu	r4,-32(fp)
    24dc:	e17ff903 	ldbu	r5,-28(fp)
    24e0:	e1bfff0b 	ldhu	r6,-4(fp)
    24e4:	e0fff417 	ldw	r3,-48(fp)
    24e8:	d8c00015 	stw	r3,0(sp)
    24ec:	e1c00617 	ldw	r7,24(fp)
    24f0:	103ee83a 	callr	r2
    24f4:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
    24f8:	e0bff543 	ldbu	r2,-43(fp)
}
    24fc:	e037883a 	mov	sp,fp
    2500:	dfc00117 	ldw	ra,4(sp)
    2504:	df000017 	ldw	fp,0(sp)
    2508:	dec00204 	addi	sp,sp,8
    250c:	f800283a 	ret

00002510 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
    2510:	defff804 	addi	sp,sp,-32
    2514:	dfc00715 	stw	ra,28(sp)
    2518:	df000615 	stw	fp,24(sp)
    251c:	df000604 	addi	fp,sp,24
    2520:	2807883a 	mov	r3,r5
    2524:	3005883a 	mov	r2,r6
    2528:	e1ffff15 	stw	r7,-4(fp)
    252c:	e13ffc05 	stb	r4,-16(fp)
    2530:	e0fffd05 	stb	r3,-12(fp)
    2534:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
    2538:	e0800217 	ldw	r2,8(fp)
    253c:	10002826 	beq	r2,zero,25e0 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2540:	e0fffc03 	ldbu	r3,-16(fp)
    2544:	008000b4 	movhi	r2,2
    2548:	10a31d04 	addi	r2,r2,-29580
    254c:	180690fa 	slli	r3,r3,3
    2550:	10c5883a 	add	r2,r2,r3
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bffd03 	ldbu	r2,-12(fp)
    255c:	100490fa 	slli	r2,r2,3
    2560:	1885883a 	add	r2,r3,r2
    2564:	00c00804 	movi	r3,32
    2568:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
    256c:	e13ffc03 	ldbu	r4,-16(fp)
    2570:	e17ffd03 	ldbu	r5,-12(fp)
    2574:	e1bffe0b 	ldhu	r6,-8(fp)
    2578:	e0fffc03 	ldbu	r3,-16(fp)
    257c:	008000b4 	movhi	r2,2
    2580:	10a31d04 	addi	r2,r2,-29580
    2584:	180690fa 	slli	r3,r3,3
    2588:	10c5883a 	add	r2,r2,r3
    258c:	10c00017 	ldw	r3,0(r2)
    2590:	e0bffd03 	ldbu	r2,-12(fp)
    2594:	100490fa 	slli	r2,r2,3
    2598:	1885883a 	add	r2,r3,r2
    259c:	1080008b 	ldhu	r2,2(r2)
    25a0:	10803fcc 	andi	r2,r2,255
    25a4:	d8800015 	stw	r2,0(sp)
    25a8:	e1ffff17 	ldw	r7,-4(fp)
    25ac:	00027e80 	call	27e8 <XferInTransfer>
    25b0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
    25b4:	e0bffb03 	ldbu	r2,-20(fp)
    25b8:	10000226 	beq	r2,zero,25c4 <XferCtrlData+0xb4>
        return( rcode );
    25bc:	e0bffb03 	ldbu	r2,-20(fp)
    25c0:	00000806 	br	25e4 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
    25c4:	e0bffd03 	ldbu	r2,-12(fp)
    25c8:	100b883a 	mov	r5,r2
    25cc:	01002804 	movi	r4,160
    25d0:	000266c0 	call	266c <XferDispatchPkt>
    25d4:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
    25d8:	e0bffb03 	ldbu	r2,-20(fp)
    25dc:	00000106 	br	25e4 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
    25e0:	00bfffc4 	movi	r2,-1
    }
}
    25e4:	e037883a 	mov	sp,fp
    25e8:	dfc00117 	ldw	ra,4(sp)
    25ec:	df000017 	ldw	fp,0(sp)
    25f0:	dec00204 	addi	sp,sp,8
    25f4:	f800283a 	ret

000025f8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
    25f8:	defff904 	addi	sp,sp,-28
    25fc:	dfc00615 	stw	ra,24(sp)
    2600:	df000515 	stw	fp,20(sp)
    2604:	df000504 	addi	fp,sp,20
    2608:	2807883a 	mov	r3,r5
    260c:	3005883a 	mov	r2,r6
    2610:	e1ffff15 	stw	r7,-4(fp)
    2614:	e13ffc05 	stb	r4,-16(fp)
    2618:	e0fffd05 	stb	r3,-12(fp)
    261c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
    2620:	e0800217 	ldw	r2,8(fp)
    2624:	10000626 	beq	r2,zero,2640 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
    2628:	e0bffd03 	ldbu	r2,-12(fp)
    262c:	100b883a 	mov	r5,r2
    2630:	01002804 	movi	r4,160
    2634:	000266c0 	call	266c <XferDispatchPkt>
    2638:	e0bffb05 	stb	r2,-20(fp)
    263c:	00000506 	br	2654 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
    2640:	e0bffd03 	ldbu	r2,-12(fp)
    2644:	100b883a 	mov	r5,r2
    2648:	01002004 	movi	r4,128
    264c:	000266c0 	call	266c <XferDispatchPkt>
    2650:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
    2654:	e0bffb03 	ldbu	r2,-20(fp)
}
    2658:	e037883a 	mov	sp,fp
    265c:	dfc00117 	ldw	ra,4(sp)
    2660:	df000017 	ldw	fp,0(sp)
    2664:	dec00204 	addi	sp,sp,8
    2668:	f800283a 	ret

0000266c <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
    266c:	defff904 	addi	sp,sp,-28
    2670:	dfc00615 	stw	ra,24(sp)
    2674:	df000515 	stw	fp,20(sp)
    2678:	df000504 	addi	fp,sp,20
    267c:	2007883a 	mov	r3,r4
    2680:	2805883a 	mov	r2,r5
    2684:	e0fffe05 	stb	r3,-8(fp)
    2688:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    268c:	d0a70217 	ldw	r2,-25592(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
    2690:	0140fa04 	movi	r5,1000
    2694:	1009883a 	mov	r4,r2
    2698:	00034100 	call	3410 <__mulsi3>
    269c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    26a0:	d0a70117 	ldw	r2,-25596(gp)
    26a4:	100b883a 	mov	r5,r2
    26a8:	1809883a 	mov	r4,r3
    26ac:	00033540 	call	3354 <__udivsi3>
    26b0:	1084e204 	addi	r2,r2,5000
    26b4:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
    26b8:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
    26bc:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
    26c0:	e0fffe03 	ldbu	r3,-8(fp)
    26c4:	e0bfff03 	ldbu	r2,-4(fp)
    26c8:	1884b03a 	or	r2,r3,r2
    26cc:	10803fcc 	andi	r2,r2,255
    26d0:	100b883a 	mov	r5,r2
    26d4:	01003c04 	movi	r4,240
    26d8:	0001c880 	call	1c88 <MAXreg_wr>
        rcode = 0xff;
    26dc:	00bfffc4 	movi	r2,-1
    26e0:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
    26e4:	00000d06 	br	271c <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
    26e8:	01003204 	movi	r4,200
    26ec:	0001e700 	call	1e70 <MAXreg_rd>
    26f0:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
    26f4:	e0bffd03 	ldbu	r2,-12(fp)
    26f8:	10803fcc 	andi	r2,r2,255
    26fc:	1080201c 	xori	r2,r2,128
    2700:	10bfe004 	addi	r2,r2,-128
    2704:	1000050e 	bge	r2,zero,271c <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
    2708:	01402004 	movi	r5,128
    270c:	01003204 	movi	r4,200
    2710:	0001c880 	call	1c88 <MAXreg_wr>
                rcode = 0x00;
    2714:	e03ffb05 	stb	zero,-20(fp)
                break;
    2718:	00000c06 	br	274c <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    271c:	d0a70217 	ldw	r2,-25592(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
    2720:	0140fa04 	movi	r5,1000
    2724:	1009883a 	mov	r4,r2
    2728:	00034100 	call	3410 <__mulsi3>
    272c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2730:	d0a70117 	ldw	r2,-25596(gp)
    2734:	100b883a 	mov	r5,r2
    2738:	1809883a 	mov	r4,r3
    273c:	00033540 	call	3354 <__udivsi3>
    2740:	1007883a 	mov	r3,r2
    2744:	e0bffc17 	ldw	r2,-16(fp)
    2748:	18bfe736 	bltu	r3,r2,26e8 <__alt_data_end+0xfc0026e8>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
    274c:	e0bffb03 	ldbu	r2,-20(fp)
    2750:	10000226 	beq	r2,zero,275c <XferDispatchPkt+0xf0>
            return( rcode );
    2754:	e0bffb03 	ldbu	r2,-20(fp)
    2758:	00001e06 	br	27d4 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
    275c:	01003e04 	movi	r4,248
    2760:	0001e700 	call	1e70 <MAXreg_rd>
    2764:	108003cc 	andi	r2,r2,15
    2768:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
    276c:	e0bffb03 	ldbu	r2,-20(fp)
    2770:	10800118 	cmpnei	r2,r2,4
    2774:	1000071e 	bne	r2,zero,2794 <XferDispatchPkt+0x128>
            nak_count++;
    2778:	e0bffb83 	ldbu	r2,-18(fp)
    277c:	10800044 	addi	r2,r2,1
    2780:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
    2784:	e0bffb83 	ldbu	r2,-18(fp)
    2788:	10803218 	cmpnei	r2,r2,200
    278c:	10000b1e 	bne	r2,zero,27bc <XferDispatchPkt+0x150>
                break;
    2790:	00000f06 	br	27d0 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
    2794:	e0bffb03 	ldbu	r2,-20(fp)
    2798:	10800398 	cmpnei	r2,r2,14
    279c:	1000091e 	bne	r2,zero,27c4 <XferDispatchPkt+0x158>
            retry_count++;
    27a0:	e0bffb43 	ldbu	r2,-19(fp)
    27a4:	10800044 	addi	r2,r2,1
    27a8:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
    27ac:	e0bffb47 	ldb	r2,-19(fp)
    27b0:	108000d8 	cmpnei	r2,r2,3
    27b4:	10000526 	beq	r2,zero,27cc <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
    27b8:	00000106 	br	27c0 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
    27bc:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
    27c0:	003fbf06 	br	26c0 <__alt_data_end+0xfc0026c0>
            }
            else {
                continue;
            }
        }
        else break;
    27c4:	0001883a 	nop
    27c8:	00000106 	br	27d0 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
    27cc:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
    27d0:	e0bffb03 	ldbu	r2,-20(fp)
}
    27d4:	e037883a 	mov	sp,fp
    27d8:	dfc00117 	ldw	ra,4(sp)
    27dc:	df000017 	ldw	fp,0(sp)
    27e0:	dec00204 	addi	sp,sp,8
    27e4:	f800283a 	ret

000027e8 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
    27e8:	defff804 	addi	sp,sp,-32
    27ec:	dfc00715 	stw	ra,28(sp)
    27f0:	df000615 	stw	fp,24(sp)
    27f4:	df000604 	addi	fp,sp,24
    27f8:	2011883a 	mov	r8,r4
    27fc:	2809883a 	mov	r4,r5
    2800:	3007883a 	mov	r3,r6
    2804:	e1fffe15 	stw	r7,-8(fp)
    2808:	e0800217 	ldw	r2,8(fp)
    280c:	e23ffb05 	stb	r8,-20(fp)
    2810:	e13ffc05 	stb	r4,-16(fp)
    2814:	e0fffd0d 	sth	r3,-12(fp)
    2818:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    281c:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    2820:	e0fffb03 	ldbu	r3,-20(fp)
    2824:	008000b4 	movhi	r2,2
    2828:	10a31d04 	addi	r2,r2,-29580
    282c:	180690fa 	slli	r3,r3,3
    2830:	10c5883a 	add	r2,r2,r3
    2834:	10c00017 	ldw	r3,0(r2)
    2838:	e0bffc03 	ldbu	r2,-16(fp)
    283c:	100490fa 	slli	r2,r2,3
    2840:	1885883a 	add	r2,r3,r2
    2844:	10800183 	ldbu	r2,6(r2)
    2848:	10803fcc 	andi	r2,r2,255
    284c:	100b883a 	mov	r5,r2
    2850:	01003a04 	movi	r4,232
    2854:	0001c880 	call	1c88 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
    2858:	e0bffc03 	ldbu	r2,-16(fp)
    285c:	100b883a 	mov	r5,r2
    2860:	0009883a 	mov	r4,zero
    2864:	000266c0 	call	266c <XferDispatchPkt>
    2868:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
    286c:	e0bffa83 	ldbu	r2,-22(fp)
    2870:	10000226 	beq	r2,zero,287c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
    2874:	e0bffa83 	ldbu	r2,-22(fp)
    2878:	00003a06 	br	2964 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
    287c:	01003204 	movi	r4,200
    2880:	0001e700 	call	1e70 <MAXreg_rd>
    2884:	10803fcc 	andi	r2,r2,255
    2888:	1080010c 	andi	r2,r2,4
    288c:	1000021e 	bne	r2,zero,2898 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
    2890:	00bffc04 	movi	r2,-16
    2894:	00003306 	br	2964 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
    2898:	01000c04 	movi	r4,48
    289c:	0001e700 	call	1e70 <MAXreg_rd>
    28a0:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
    28a4:	e0bffac3 	ldbu	r2,-21(fp)
    28a8:	e1bffe17 	ldw	r6,-8(fp)
    28ac:	100b883a 	mov	r5,r2
    28b0:	01000204 	movi	r4,8
    28b4:	0001ee80 	call	1ee8 <MAXbytes_rd>
    28b8:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
    28bc:	01400104 	movi	r5,4
    28c0:	01003204 	movi	r4,200
    28c4:	0001c880 	call	1c88 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
    28c8:	e0fffac3 	ldbu	r3,-21(fp)
    28cc:	e0bffa0b 	ldhu	r2,-24(fp)
    28d0:	1885883a 	add	r2,r3,r2
    28d4:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
    28d8:	e0fffac3 	ldbu	r3,-21(fp)
    28dc:	e0bfff03 	ldbu	r2,-4(fp)
    28e0:	18800336 	bltu	r3,r2,28f0 <XferInTransfer+0x108>
    28e4:	e0fffa0b 	ldhu	r3,-24(fp)
    28e8:	e0bffd0b 	ldhu	r2,-12(fp)
    28ec:	18bfda36 	bltu	r3,r2,2858 <__alt_data_end+0xfc002858>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
    28f0:	01003e04 	movi	r4,248
    28f4:	0001e700 	call	1e70 <MAXreg_rd>
    28f8:	10803fcc 	andi	r2,r2,255
    28fc:	1080040c 	andi	r2,r2,16
    2900:	10000c26 	beq	r2,zero,2934 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2904:	e0fffb03 	ldbu	r3,-20(fp)
    2908:	008000b4 	movhi	r2,2
    290c:	10a31d04 	addi	r2,r2,-29580
    2910:	180690fa 	slli	r3,r3,3
    2914:	10c5883a 	add	r2,r2,r3
    2918:	10c00017 	ldw	r3,0(r2)
    291c:	e0bffc03 	ldbu	r2,-16(fp)
    2920:	100490fa 	slli	r2,r2,3
    2924:	1885883a 	add	r2,r3,r2
    2928:	00c00804 	movi	r3,32
    292c:	10c00185 	stb	r3,6(r2)
    2930:	00000b06 	br	2960 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
    2934:	e0fffb03 	ldbu	r3,-20(fp)
    2938:	008000b4 	movhi	r2,2
    293c:	10a31d04 	addi	r2,r2,-29580
    2940:	180690fa 	slli	r3,r3,3
    2944:	10c5883a 	add	r2,r2,r3
    2948:	10c00017 	ldw	r3,0(r2)
    294c:	e0bffc03 	ldbu	r2,-16(fp)
    2950:	100490fa 	slli	r2,r2,3
    2954:	1885883a 	add	r2,r3,r2
    2958:	00c00404 	movi	r3,16
    295c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
    2960:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
    2964:	e037883a 	mov	sp,fp
    2968:	dfc00117 	ldw	ra,4(sp)
    296c:	df000017 	ldw	fp,0(sp)
    2970:	dec00204 	addi	sp,sp,8
    2974:	f800283a 	ret

00002978 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
    2978:	defffe04 	addi	sp,sp,-8
    297c:	df000115 	stw	fp,4(sp)
    2980:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
    2984:	e03fff05 	stb	zero,-4(fp)
    2988:	00001006 	br	29cc <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
    298c:	e0ffff03 	ldbu	r3,-4(fp)
    2990:	008000b4 	movhi	r2,2
    2994:	10a31d04 	addi	r2,r2,-29580
    2998:	180690fa 	slli	r3,r3,3
    299c:	10c5883a 	add	r2,r2,r3
    29a0:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
    29a4:	e0ffff03 	ldbu	r3,-4(fp)
    29a8:	008000b4 	movhi	r2,2
    29ac:	10a31d04 	addi	r2,r2,-29580
    29b0:	180690fa 	slli	r3,r3,3
    29b4:	10c5883a 	add	r2,r2,r3
    29b8:	10800104 	addi	r2,r2,4
    29bc:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
    29c0:	e0bfff03 	ldbu	r2,-4(fp)
    29c4:	10800044 	addi	r2,r2,1
    29c8:	e0bfff05 	stb	r2,-4(fp)
    29cc:	e0bfff03 	ldbu	r2,-4(fp)
    29d0:	10800270 	cmpltui	r2,r2,9
    29d4:	103fed1e 	bne	r2,zero,298c <__alt_data_end+0xfc00298c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
    29d8:	008000b4 	movhi	r2,2
    29dc:	10a31d04 	addi	r2,r2,-29580
    29e0:	d0e6f204 	addi	r3,gp,-25656
    29e4:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
    29e8:	d026f28d 	sth	zero,-25654(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    29ec:	00801004 	movi	r2,64
    29f0:	d0a6f345 	stb	r2,-25651(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
    29f4:	00800404 	movi	r2,16
    29f8:	d0a6f385 	stb	r2,-25650(gp)
}
    29fc:	0001883a 	nop
    2a00:	e037883a 	mov	sp,fp
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00104 	addi	sp,sp,4
    2a0c:	f800283a 	ret

00002a10 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
    2a10:	deffb204 	addi	sp,sp,-312
    2a14:	dfc04d15 	stw	ra,308(sp)
    2a18:	df004c15 	stw	fp,304(sp)
    2a1c:	dc004b15 	stw	r16,300(sp)
    2a20:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
    2a24:	d0a00303 	ldbu	r2,-32756(gp)
    2a28:	10803fcc 	andi	r2,r2,255
    2a2c:	10803c0c 	andi	r2,r2,240
    2a30:	10c00820 	cmpeqi	r3,r2,32
    2a34:	1801121e 	bne	r3,zero,2e80 <USB_Task+0x470>
    2a38:	10c00848 	cmpgei	r3,r2,33
    2a3c:	1800041e 	bne	r3,zero,2a50 <USB_Task+0x40>
    2a40:	10000a26 	beq	r2,zero,2a6c <USB_Task+0x5c>
    2a44:	10800420 	cmpeqi	r2,r2,16
    2a48:	10001b1e 	bne	r2,zero,2ab8 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    2a4c:	00017a06 	br	3038 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
    2a50:	10c01020 	cmpeqi	r3,r2,64
    2a54:	18016f1e 	bne	r3,zero,3014 <USB_Task+0x604>
    2a58:	10c03fe0 	cmpeqi	r3,r2,255
    2a5c:	18016f1e 	bne	r3,zero,301c <USB_Task+0x60c>
    2a60:	10800c20 	cmpeqi	r2,r2,48
    2a64:	1001441e 	bne	r2,zero,2f78 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    2a68:	00017306 	br	3038 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
    2a6c:	d0a00303 	ldbu	r2,-32756(gp)
    2a70:	10803fcc 	andi	r2,r2,255
    2a74:	10c000e0 	cmpeqi	r3,r2,3
    2a78:	1800091e 	bne	r3,zero,2aa0 <USB_Task+0x90>
    2a7c:	10c00120 	cmpeqi	r3,r2,4
    2a80:	18000b1e 	bne	r3,zero,2ab0 <USB_Task+0xa0>
    2a84:	10800060 	cmpeqi	r2,r2,1
    2a88:	1000011e 	bne	r2,zero,2a90 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
    2a8c:	00016a06 	br	3038 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
    2a90:	00029780 	call	2978 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    2a94:	008000c4 	movi	r2,3
    2a98:	d0a00305 	stb	r2,-32756(gp)
                    break;
    2a9c:	00000506 	br	2ab4 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
    2aa0:	01400104 	movi	r5,4
    2aa4:	01003a04 	movi	r4,232
    2aa8:	0001c880 	call	1c88 <MAXreg_wr>
                    break;
    2aac:	00000106 	br	2ab4 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
    2ab0:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
    2ab4:	00016006 	br	3038 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
    2ab8:	d0a00303 	ldbu	r2,-32756(gp)
    2abc:	10803fcc 	andi	r2,r2,255
    2ac0:	10bffc04 	addi	r2,r2,-16
    2ac4:	10c001a8 	cmpgeui	r3,r2,6
    2ac8:	1801561e 	bne	r3,zero,3024 <USB_Task+0x614>
    2acc:	100690ba 	slli	r3,r2,2
    2ad0:	00800034 	movhi	r2,0
    2ad4:	108ab904 	addi	r2,r2,10980
    2ad8:	1885883a 	add	r2,r3,r2
    2adc:	10800017 	ldw	r2,0(r2)
    2ae0:	1000683a 	jmp	r2
    2ae4:	00002afc 	xorhi	zero,zero,171
    2ae8:	00002b34 	movhi	zero,172
    2aec:	00002b70 	cmpltui	zero,zero,173
    2af0:	00002b94 	movui	zero,174
    2af4:	00002bd4 	movui	zero,175
    2af8:	00002be8 	cmpgeui	zero,zero,175
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2afc:	d0a70217 	ldw	r2,-25592(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
    2b00:	0140fa04 	movi	r5,1000
    2b04:	1009883a 	mov	r4,r2
    2b08:	00034100 	call	3410 <__mulsi3>
    2b0c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2b10:	d0a70117 	ldw	r2,-25596(gp)
    2b14:	100b883a 	mov	r5,r2
    2b18:	1809883a 	mov	r4,r3
    2b1c:	00033540 	call	3354 <__udivsi3>
    2b20:	10803204 	addi	r2,r2,200
    2b24:	d0a6f515 	stw	r2,-25644(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    2b28:	00800444 	movi	r2,17
    2b2c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
    2b30:	0000d206 	br	2e7c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2b34:	d0a70217 	ldw	r2,-25592(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
    2b38:	0140fa04 	movi	r5,1000
    2b3c:	1009883a 	mov	r4,r2
    2b40:	00034100 	call	3410 <__mulsi3>
    2b44:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2b48:	d0a70117 	ldw	r2,-25596(gp)
    2b4c:	100b883a 	mov	r5,r2
    2b50:	1809883a 	mov	r4,r3
    2b54:	00033540 	call	3354 <__udivsi3>
    2b58:	1007883a 	mov	r3,r2
    2b5c:	d0a6f517 	ldw	r2,-25644(gp)
    2b60:	10c0c32e 	bgeu	r2,r3,2e70 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    2b64:	00800484 	movi	r2,18
    2b68:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
    2b6c:	0000c006 	br	2e70 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
    2b70:	01400044 	movi	r5,1
    2b74:	01003204 	movi	r4,200
    2b78:	0001c880 	call	1c88 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
    2b7c:	01400044 	movi	r5,1
    2b80:	01003a04 	movi	r4,232
    2b84:	0001c880 	call	1c88 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    2b88:	008004c4 	movi	r2,19
    2b8c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
    2b90:	0000ba06 	br	2e7c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
    2b94:	01003a04 	movi	r4,232
    2b98:	0001e700 	call	1e70 <MAXreg_rd>
    2b9c:	10803fcc 	andi	r2,r2,255
    2ba0:	1080004c 	andi	r2,r2,1
    2ba4:	1000b41e 	bne	r2,zero,2e78 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    2ba8:	01003604 	movi	r4,216
    2bac:	0001e700 	call	1e70 <MAXreg_rd>
    2bb0:	10800214 	ori	r2,r2,8
    2bb4:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
    2bb8:	e0bfb943 	ldbu	r2,-283(fp)
    2bbc:	100b883a 	mov	r5,r2
    2bc0:	01003604 	movi	r4,216
    2bc4:	0001c880 	call	1c88 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    2bc8:	00800504 	movi	r2,20
    2bcc:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
    2bd0:	0000a906 	br	2e78 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
    2bd4:	01003204 	movi	r4,200
    2bd8:	0001e700 	call	1e70 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    2bdc:	00800544 	movi	r2,21
    2be0:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
    2be4:	0000a506 	br	2e7c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
    2be8:	008000b4 	movhi	r2,2
    2bec:	10a31d04 	addi	r2,r2,-29580
    2bf0:	10800017 	ldw	r2,0(r2)
    2bf4:	00c00204 	movi	r3,8
    2bf8:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
    2bfc:	e0bfba04 	addi	r2,fp,-280
    2c00:	d8800415 	stw	r2,16(sp)
    2c04:	00800204 	movi	r2,8
    2c08:	d8800315 	stw	r2,12(sp)
    2c0c:	d8000215 	stw	zero,8(sp)
    2c10:	00800044 	movi	r2,1
    2c14:	d8800115 	stw	r2,4(sp)
    2c18:	d8000015 	stw	zero,0(sp)
    2c1c:	01c00184 	movi	r7,6
    2c20:	01802004 	movi	r6,128
    2c24:	000b883a 	mov	r5,zero
    2c28:	0009883a 	mov	r4,zero
    2c2c:	00023c40 	call	23c4 <XferCtrlReq>
    2c30:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
    2c34:	e0bfb983 	ldbu	r2,-282(fp)
    2c38:	1000861e 	bne	r2,zero,2e54 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    2c3c:	008000b4 	movhi	r2,2
    2c40:	10a31d04 	addi	r2,r2,-29580
    2c44:	10800017 	ldw	r2,0(r2)
    2c48:	e0ffbbc3 	ldbu	r3,-273(fp)
    2c4c:	18c03fcc 	andi	r3,r3,255
    2c50:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
    2c54:	e0bfba03 	ldbu	r2,-280(fp)
    2c58:	10803fcc 	andi	r2,r2,255
    2c5c:	e0ffba04 	addi	r3,fp,-280
    2c60:	d8c00415 	stw	r3,16(sp)
    2c64:	d8800315 	stw	r2,12(sp)
    2c68:	d8000215 	stw	zero,8(sp)
    2c6c:	00800044 	movi	r2,1
    2c70:	d8800115 	stw	r2,4(sp)
    2c74:	d8000015 	stw	zero,0(sp)
    2c78:	01c00184 	movi	r7,6
    2c7c:	01802004 	movi	r6,128
    2c80:	000b883a 	mov	r5,zero
    2c84:	0009883a 	mov	r4,zero
    2c88:	00023c40 	call	23c4 <XferCtrlReq>
    2c8c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
    2c90:	e0bfbd83 	ldbu	r2,-266(fp)
    2c94:	10803fcc 	andi	r2,r2,255
    2c98:	10003426 	beq	r2,zero,2d6c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
    2c9c:	e0bfbd83 	ldbu	r2,-266(fp)
    2ca0:	10803fcc 	andi	r2,r2,255
    2ca4:	e0ffbe84 	addi	r3,fp,-262
    2ca8:	d8c00415 	stw	r3,16(sp)
    2cac:	00c00084 	movi	r3,2
    2cb0:	d8c00315 	stw	r3,12(sp)
    2cb4:	00c10244 	movi	r3,1033
    2cb8:	d8c00215 	stw	r3,8(sp)
    2cbc:	00c000c4 	movi	r3,3
    2cc0:	d8c00115 	stw	r3,4(sp)
    2cc4:	d8800015 	stw	r2,0(sp)
    2cc8:	01c00184 	movi	r7,6
    2ccc:	01802004 	movi	r6,128
    2cd0:	000b883a 	mov	r5,zero
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	00023c40 	call	23c4 <XferCtrlReq>
    2cdc:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
    2ce0:	e0bfbd83 	ldbu	r2,-266(fp)
    2ce4:	10803fcc 	andi	r2,r2,255
    2ce8:	e0ffbe83 	ldbu	r3,-262(fp)
    2cec:	18c03fcc 	andi	r3,r3,255
    2cf0:	e13fbe84 	addi	r4,fp,-262
    2cf4:	d9000415 	stw	r4,16(sp)
    2cf8:	d8c00315 	stw	r3,12(sp)
    2cfc:	00c10244 	movi	r3,1033
    2d00:	d8c00215 	stw	r3,8(sp)
    2d04:	00c000c4 	movi	r3,3
    2d08:	d8c00115 	stw	r3,4(sp)
    2d0c:	d8800015 	stw	r2,0(sp)
    2d10:	01c00184 	movi	r7,6
    2d14:	01802004 	movi	r6,128
    2d18:	000b883a 	mov	r5,zero
    2d1c:	0009883a 	mov	r4,zero
    2d20:	00023c40 	call	23c4 <XferCtrlReq>
    2d24:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
    2d28:	e0bfbd83 	ldbu	r2,-266(fp)
    2d2c:	14003fcc 	andi	r16,r2,255
    2d30:	e0bfbe83 	ldbu	r2,-262(fp)
    2d34:	10803fcc 	andi	r2,r2,255
    2d38:	1004d07a 	srli	r2,r2,1
    2d3c:	10bfffc4 	addi	r2,r2,-1
    2d40:	10c03fcc 	andi	r3,r2,255
    2d44:	e0bfbe84 	addi	r2,fp,-262
    2d48:	10800084 	addi	r2,r2,2
    2d4c:	180b883a 	mov	r5,r3
    2d50:	1009883a 	mov	r4,r2
    2d54:	00031d80 	call	31d8 <ConvUTF8ToStr>
    2d58:	100d883a 	mov	r6,r2
    2d5c:	800b883a 	mov	r5,r16
    2d60:	01000074 	movhi	r4,1
    2d64:	21142804 	addi	r4,r4,20640
    2d68:	00034680 	call	3468 <printf>
                		}
                		if (buf.iProduct != 0)
    2d6c:	e0bfbdc3 	ldbu	r2,-265(fp)
    2d70:	10803fcc 	andi	r2,r2,255
    2d74:	10003426 	beq	r2,zero,2e48 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
    2d78:	e0bfbdc3 	ldbu	r2,-265(fp)
    2d7c:	10803fcc 	andi	r2,r2,255
    2d80:	e0ffbe84 	addi	r3,fp,-262
    2d84:	d8c00415 	stw	r3,16(sp)
    2d88:	00c00084 	movi	r3,2
    2d8c:	d8c00315 	stw	r3,12(sp)
    2d90:	00c10244 	movi	r3,1033
    2d94:	d8c00215 	stw	r3,8(sp)
    2d98:	00c000c4 	movi	r3,3
    2d9c:	d8c00115 	stw	r3,4(sp)
    2da0:	d8800015 	stw	r2,0(sp)
    2da4:	01c00184 	movi	r7,6
    2da8:	01802004 	movi	r6,128
    2dac:	000b883a 	mov	r5,zero
    2db0:	0009883a 	mov	r4,zero
    2db4:	00023c40 	call	23c4 <XferCtrlReq>
    2db8:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
    2dbc:	e0bfbdc3 	ldbu	r2,-265(fp)
    2dc0:	10803fcc 	andi	r2,r2,255
    2dc4:	e0ffbe83 	ldbu	r3,-262(fp)
    2dc8:	18c03fcc 	andi	r3,r3,255
    2dcc:	e13fbe84 	addi	r4,fp,-262
    2dd0:	d9000415 	stw	r4,16(sp)
    2dd4:	d8c00315 	stw	r3,12(sp)
    2dd8:	00c10244 	movi	r3,1033
    2ddc:	d8c00215 	stw	r3,8(sp)
    2de0:	00c000c4 	movi	r3,3
    2de4:	d8c00115 	stw	r3,4(sp)
    2de8:	d8800015 	stw	r2,0(sp)
    2dec:	01c00184 	movi	r7,6
    2df0:	01802004 	movi	r6,128
    2df4:	000b883a 	mov	r5,zero
    2df8:	0009883a 	mov	r4,zero
    2dfc:	00023c40 	call	23c4 <XferCtrlReq>
    2e00:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
    2e04:	e0bfbdc3 	ldbu	r2,-265(fp)
    2e08:	14003fcc 	andi	r16,r2,255
    2e0c:	e0bfbe83 	ldbu	r2,-262(fp)
    2e10:	10803fcc 	andi	r2,r2,255
    2e14:	1004d07a 	srli	r2,r2,1
    2e18:	10bfffc4 	addi	r2,r2,-1
    2e1c:	10c03fcc 	andi	r3,r2,255
    2e20:	e0bfbe84 	addi	r2,fp,-262
    2e24:	10800084 	addi	r2,r2,2
    2e28:	180b883a 	mov	r5,r3
    2e2c:	1009883a 	mov	r4,r2
    2e30:	00031d80 	call	31d8 <ConvUTF8ToStr>
    2e34:	100d883a 	mov	r6,r2
    2e38:	800b883a 	mov	r5,r16
    2e3c:	01000074 	movhi	r4,1
    2e40:	21142e04 	addi	r4,r4,20664
    2e44:	00034680 	call	3468 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
    2e48:	00800804 	movi	r2,32
    2e4c:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    2e50:	00000a06 	br	2e7c <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
    2e54:	e0bfb983 	ldbu	r2,-282(fp)
    2e58:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
    2e5c:	d0a00303 	ldbu	r2,-32756(gp)
    2e60:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
    2e64:	00bfffc4 	movi	r2,-1
    2e68:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    2e6c:	00000306 	br	2e7c <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
    2e70:	0001883a 	nop
    2e74:	00006b06 	br	3024 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
    2e78:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
    2e7c:	00006906 	br	3024 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
    2e80:	00800044 	movi	r2,1
    2e84:	e0bfb905 	stb	r2,-284(fp)
    2e88:	00002d06 	br	2f40 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
    2e8c:	e0ffb903 	ldbu	r3,-284(fp)
    2e90:	008000b4 	movhi	r2,2
    2e94:	10a31d04 	addi	r2,r2,-29580
    2e98:	180690fa 	slli	r3,r3,3
    2e9c:	10c5883a 	add	r2,r2,r3
    2ea0:	10800017 	ldw	r2,0(r2)
    2ea4:	1000231e 	bne	r2,zero,2f34 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    2ea8:	e13fb903 	ldbu	r4,-284(fp)
    2eac:	008000b4 	movhi	r2,2
    2eb0:	10a31d04 	addi	r2,r2,-29580
    2eb4:	10c00017 	ldw	r3,0(r2)
    2eb8:	008000b4 	movhi	r2,2
    2ebc:	10a31d04 	addi	r2,r2,-29580
    2ec0:	200890fa 	slli	r4,r4,3
    2ec4:	1105883a 	add	r2,r2,r4
    2ec8:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
    2ecc:	e0bfb903 	ldbu	r2,-284(fp)
    2ed0:	d8000415 	stw	zero,16(sp)
    2ed4:	d8000315 	stw	zero,12(sp)
    2ed8:	d8000215 	stw	zero,8(sp)
    2edc:	d8000115 	stw	zero,4(sp)
    2ee0:	d8800015 	stw	r2,0(sp)
    2ee4:	01c00144 	movi	r7,5
    2ee8:	000d883a 	mov	r6,zero
    2eec:	000b883a 	mov	r5,zero
    2ef0:	0009883a 	mov	r4,zero
    2ef4:	00023c40 	call	23c4 <XferCtrlReq>
    2ef8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
    2efc:	e0bfb983 	ldbu	r2,-282(fp)
    2f00:	1000051e 	bne	r2,zero,2f18 <USB_Task+0x508>
                        tmp_addr = i;
    2f04:	e0bfb903 	ldbu	r2,-284(fp)
    2f08:	d0a6f605 	stb	r2,-25640(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
    2f0c:	00800c04 	movi	r2,48
    2f10:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
    2f14:	00000d06 	br	2f4c <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
    2f18:	e0bfb983 	ldbu	r2,-282(fp)
    2f1c:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
    2f20:	d0a00303 	ldbu	r2,-32756(gp)
    2f24:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
    2f28:	00bfffc4 	movi	r2,-1
    2f2c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
    2f30:	00000606 	br	2f4c <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
    2f34:	e0bfb903 	ldbu	r2,-284(fp)
    2f38:	10800044 	addi	r2,r2,1
    2f3c:	e0bfb905 	stb	r2,-284(fp)
    2f40:	e0bfb903 	ldbu	r2,-284(fp)
    2f44:	10800230 	cmpltui	r2,r2,8
    2f48:	103fd01e 	bne	r2,zero,2e8c <__alt_data_end+0xfc002e8c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
    2f4c:	d0a00303 	ldbu	r2,-32756(gp)
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	10800818 	cmpnei	r2,r2,32
    2f58:	1000341e 	bne	r2,zero,302c <USB_Task+0x61c>
                usb_error = 0xfe;
    2f5c:	00bfff84 	movi	r2,-2
    2f60:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
    2f64:	d0a00303 	ldbu	r2,-32756(gp)
    2f68:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
    2f6c:	00bfffc4 	movi	r2,-1
    2f70:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
    2f74:	00002d06 	br	302c <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
    2f78:	e03fb905 	stb	zero,-284(fp)
    2f7c:	00001706 	br	2fdc <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
    2f80:	e0bfb903 	ldbu	r2,-284(fp)
    2f84:	04000074 	movhi	r16,1
    2f88:	8414ff04 	addi	r16,r16,21500
    2f8c:	01400304 	movi	r5,12
    2f90:	1009883a 	mov	r4,r2
    2f94:	00034100 	call	3410 <__mulsi3>
    2f98:	8085883a 	add	r2,r16,r2
    2f9c:	10800017 	ldw	r2,0(r2)
    2fa0:	d0e6f603 	ldbu	r3,-25640(gp)
    2fa4:	18c03fcc 	andi	r3,r3,255
    2fa8:	000b883a 	mov	r5,zero
    2fac:	1809883a 	mov	r4,r3
    2fb0:	103ee83a 	callr	r2
    2fb4:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
    2fb8:	e0bfb983 	ldbu	r2,-282(fp)
    2fbc:	10800058 	cmpnei	r2,r2,1
    2fc0:	1000031e 	bne	r2,zero,2fd0 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
    2fc4:	00801004 	movi	r2,64
    2fc8:	d0a00305 	stb	r2,-32756(gp)
                    break;
    2fcc:	00000606 	br	2fe8 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
    2fd0:	e0bfb903 	ldbu	r2,-284(fp)
    2fd4:	10800044 	addi	r2,r2,1
    2fd8:	e0bfb905 	stb	r2,-284(fp)
    2fdc:	e0bfb903 	ldbu	r2,-284(fp)
    2fe0:	10800130 	cmpltui	r2,r2,4
    2fe4:	103fe61e 	bne	r2,zero,2f80 <__alt_data_end+0xfc002f80>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
    2fe8:	d0a00303 	ldbu	r2,-32756(gp)
    2fec:	10803fcc 	andi	r2,r2,255
    2ff0:	10800c18 	cmpnei	r2,r2,48
    2ff4:	10000f1e 	bne	r2,zero,3034 <USB_Task+0x624>
                usb_error = 0xfd;
    2ff8:	00bfff44 	movi	r2,-3
    2ffc:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
    3000:	d0a00303 	ldbu	r2,-32756(gp)
    3004:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
    3008:	00bfffc4 	movi	r2,-1
    300c:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
    3010:	00000806 	br	3034 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
    3014:	0001883a 	nop
    3018:	00000706 	br	3038 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
    301c:	0001883a 	nop
    3020:	00000506 	br	3038 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
    3024:	0001883a 	nop
    3028:	00000306 	br	3038 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
    302c:	0001883a 	nop
    3030:	00000106 	br	3038 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
    3034:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
    3038:	0001883a 	nop
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
    3054:	defffd04 	addi	sp,sp,-12
    3058:	df000215 	stw	fp,8(sp)
    305c:	df000204 	addi	fp,sp,8
    3060:	2005883a 	mov	r2,r4
    3064:	e17fff15 	stw	r5,-4(fp)
    3068:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
    306c:	0005883a 	mov	r2,zero
}
    3070:	e037883a 	mov	sp,fp
    3074:	df000017 	ldw	fp,0(sp)
    3078:	dec00104 	addi	sp,sp,4
    307c:	f800283a 	ret

00003080 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    3080:	defffb04 	addi	sp,sp,-20
    3084:	df000415 	stw	fp,16(sp)
    3088:	df000404 	addi	fp,sp,16
    308c:	2007883a 	mov	r3,r4
    3090:	2805883a 	mov	r2,r5
    3094:	e1bffe15 	stw	r6,-8(fp)
    3098:	e1ffff15 	stw	r7,-4(fp)
    309c:	e0fffc05 	stb	r3,-16(fp)
    30a0:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
    30a4:	0005883a 	mov	r2,zero

}
    30a8:	e037883a 	mov	sp,fp
    30ac:	df000017 	ldw	fp,0(sp)
    30b0:	dec00104 	addi	sp,sp,4
    30b4:	f800283a 	ret

000030b8 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
    30b8:	defffd04 	addi	sp,sp,-12
    30bc:	df000215 	stw	fp,8(sp)
    30c0:	df000204 	addi	fp,sp,8
    30c4:	2005883a 	mov	r2,r4
    30c8:	e17fff15 	stw	r5,-4(fp)
    30cc:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
    30d0:	0005883a 	mov	r2,zero

}
    30d4:	e037883a 	mov	sp,fp
    30d8:	df000017 	ldw	fp,0(sp)
    30dc:	dec00104 	addi	sp,sp,4
    30e0:	f800283a 	ret

000030e4 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    30e4:	defffb04 	addi	sp,sp,-20
    30e8:	df000415 	stw	fp,16(sp)
    30ec:	df000404 	addi	fp,sp,16
    30f0:	2007883a 	mov	r3,r4
    30f4:	2805883a 	mov	r2,r5
    30f8:	e1bffe15 	stw	r6,-8(fp)
    30fc:	e1ffff15 	stw	r7,-4(fp)
    3100:	e0fffc05 	stb	r3,-16(fp)
    3104:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
    3108:	0005883a 	mov	r2,zero
}
    310c:	e037883a 	mov	sp,fp
    3110:	df000017 	ldw	fp,0(sp)
    3114:	dec00104 	addi	sp,sp,4
    3118:	f800283a 	ret

0000311c <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
    311c:	defffd04 	addi	sp,sp,-12
    3120:	df000215 	stw	fp,8(sp)
    3124:	df000204 	addi	fp,sp,8
    3128:	2005883a 	mov	r2,r4
    312c:	e17fff15 	stw	r5,-4(fp)
    3130:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
    3134:	0005883a 	mov	r2,zero
}
    3138:	e037883a 	mov	sp,fp
    313c:	df000017 	ldw	fp,0(sp)
    3140:	dec00104 	addi	sp,sp,4
    3144:	f800283a 	ret

00003148 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    3148:	defffb04 	addi	sp,sp,-20
    314c:	df000415 	stw	fp,16(sp)
    3150:	df000404 	addi	fp,sp,16
    3154:	2007883a 	mov	r3,r4
    3158:	2805883a 	mov	r2,r5
    315c:	e1bffe15 	stw	r6,-8(fp)
    3160:	e1ffff15 	stw	r7,-4(fp)
    3164:	e0fffc05 	stb	r3,-16(fp)
    3168:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
    316c:	0005883a 	mov	r2,zero
}
    3170:	e037883a 	mov	sp,fp
    3174:	df000017 	ldw	fp,0(sp)
    3178:	dec00104 	addi	sp,sp,4
    317c:	f800283a 	ret

00003180 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
    3180:	deffff04 	addi	sp,sp,-4
    3184:	df000015 	stw	fp,0(sp)
    3188:	d839883a 	mov	fp,sp
    return( usb_task_state );
    318c:	d0a00303 	ldbu	r2,-32756(gp)
}
    3190:	e037883a 	mov	sp,fp
    3194:	df000017 	ldw	fp,0(sp)
    3198:	dec00104 	addi	sp,sp,4
    319c:	f800283a 	ret

000031a0 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
    31a0:	defffe04 	addi	sp,sp,-8
    31a4:	df000115 	stw	fp,4(sp)
    31a8:	df000104 	addi	fp,sp,4
    31ac:	2005883a 	mov	r2,r4
    31b0:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
    31b4:	e0bfff03 	ldbu	r2,-4(fp)
    31b8:	100690fa 	slli	r3,r2,3
    31bc:	008000b4 	movhi	r2,2
    31c0:	10a31d04 	addi	r2,r2,-29580
    31c4:	1885883a 	add	r2,r3,r2
}
    31c8:	e037883a 	mov	sp,fp
    31cc:	df000017 	ldw	fp,0(sp)
    31d0:	dec00104 	addi	sp,sp,4
    31d4:	f800283a 	ret

000031d8 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
    31d8:	defffc04 	addi	sp,sp,-16
    31dc:	df000315 	stw	fp,12(sp)
    31e0:	df000304 	addi	fp,sp,12
    31e4:	e13ffe15 	stw	r4,-8(fp)
    31e8:	2805883a 	mov	r2,r5
    31ec:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
    31f0:	e03ffd05 	stb	zero,-12(fp)
    31f4:	00000d06 	br	322c <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
    31f8:	e0bffd03 	ldbu	r2,-12(fp)
    31fc:	e0fffe17 	ldw	r3,-8(fp)
    3200:	1887883a 	add	r3,r3,r2
    3204:	e0bffd03 	ldbu	r2,-12(fp)
    3208:	1085883a 	add	r2,r2,r2
    320c:	1009883a 	mov	r4,r2
    3210:	e0bffe17 	ldw	r2,-8(fp)
    3214:	1105883a 	add	r2,r2,r4
    3218:	10800003 	ldbu	r2,0(r2)
    321c:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
    3220:	e0bffd03 	ldbu	r2,-12(fp)
    3224:	10800044 	addi	r2,r2,1
    3228:	e0bffd05 	stb	r2,-12(fp)
    322c:	e0fffd03 	ldbu	r3,-12(fp)
    3230:	e0bfff03 	ldbu	r2,-4(fp)
    3234:	18bff036 	bltu	r3,r2,31f8 <__alt_data_end+0xfc0031f8>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
    3238:	e0bfff03 	ldbu	r2,-4(fp)
    323c:	e0fffe17 	ldw	r3,-8(fp)
    3240:	1885883a 	add	r2,r3,r2
    3244:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
    3248:	e0bffe17 	ldw	r2,-8(fp)
}
    324c:	e037883a 	mov	sp,fp
    3250:	df000017 	ldw	fp,0(sp)
    3254:	dec00104 	addi	sp,sp,4
    3258:	f800283a 	ret

0000325c <__divsi3>:
    325c:	20001b16 	blt	r4,zero,32cc <__divsi3+0x70>
    3260:	000f883a 	mov	r7,zero
    3264:	28001616 	blt	r5,zero,32c0 <__divsi3+0x64>
    3268:	200d883a 	mov	r6,r4
    326c:	29001a2e 	bgeu	r5,r4,32d8 <__divsi3+0x7c>
    3270:	00800804 	movi	r2,32
    3274:	00c00044 	movi	r3,1
    3278:	00000106 	br	3280 <__divsi3+0x24>
    327c:	10000d26 	beq	r2,zero,32b4 <__divsi3+0x58>
    3280:	294b883a 	add	r5,r5,r5
    3284:	10bfffc4 	addi	r2,r2,-1
    3288:	18c7883a 	add	r3,r3,r3
    328c:	293ffb36 	bltu	r5,r4,327c <__alt_data_end+0xfc00327c>
    3290:	0005883a 	mov	r2,zero
    3294:	18000726 	beq	r3,zero,32b4 <__divsi3+0x58>
    3298:	0005883a 	mov	r2,zero
    329c:	31400236 	bltu	r6,r5,32a8 <__divsi3+0x4c>
    32a0:	314dc83a 	sub	r6,r6,r5
    32a4:	10c4b03a 	or	r2,r2,r3
    32a8:	1806d07a 	srli	r3,r3,1
    32ac:	280ad07a 	srli	r5,r5,1
    32b0:	183ffa1e 	bne	r3,zero,329c <__alt_data_end+0xfc00329c>
    32b4:	38000126 	beq	r7,zero,32bc <__divsi3+0x60>
    32b8:	0085c83a 	sub	r2,zero,r2
    32bc:	f800283a 	ret
    32c0:	014bc83a 	sub	r5,zero,r5
    32c4:	39c0005c 	xori	r7,r7,1
    32c8:	003fe706 	br	3268 <__alt_data_end+0xfc003268>
    32cc:	0109c83a 	sub	r4,zero,r4
    32d0:	01c00044 	movi	r7,1
    32d4:	003fe306 	br	3264 <__alt_data_end+0xfc003264>
    32d8:	00c00044 	movi	r3,1
    32dc:	003fee06 	br	3298 <__alt_data_end+0xfc003298>

000032e0 <__modsi3>:
    32e0:	20001716 	blt	r4,zero,3340 <__modsi3+0x60>
    32e4:	000f883a 	mov	r7,zero
    32e8:	2005883a 	mov	r2,r4
    32ec:	28001216 	blt	r5,zero,3338 <__modsi3+0x58>
    32f0:	2900162e 	bgeu	r5,r4,334c <__modsi3+0x6c>
    32f4:	01800804 	movi	r6,32
    32f8:	00c00044 	movi	r3,1
    32fc:	00000106 	br	3304 <__modsi3+0x24>
    3300:	30000a26 	beq	r6,zero,332c <__modsi3+0x4c>
    3304:	294b883a 	add	r5,r5,r5
    3308:	31bfffc4 	addi	r6,r6,-1
    330c:	18c7883a 	add	r3,r3,r3
    3310:	293ffb36 	bltu	r5,r4,3300 <__alt_data_end+0xfc003300>
    3314:	18000526 	beq	r3,zero,332c <__modsi3+0x4c>
    3318:	1806d07a 	srli	r3,r3,1
    331c:	11400136 	bltu	r2,r5,3324 <__modsi3+0x44>
    3320:	1145c83a 	sub	r2,r2,r5
    3324:	280ad07a 	srli	r5,r5,1
    3328:	183ffb1e 	bne	r3,zero,3318 <__alt_data_end+0xfc003318>
    332c:	38000126 	beq	r7,zero,3334 <__modsi3+0x54>
    3330:	0085c83a 	sub	r2,zero,r2
    3334:	f800283a 	ret
    3338:	014bc83a 	sub	r5,zero,r5
    333c:	003fec06 	br	32f0 <__alt_data_end+0xfc0032f0>
    3340:	0109c83a 	sub	r4,zero,r4
    3344:	01c00044 	movi	r7,1
    3348:	003fe706 	br	32e8 <__alt_data_end+0xfc0032e8>
    334c:	00c00044 	movi	r3,1
    3350:	003ff106 	br	3318 <__alt_data_end+0xfc003318>

00003354 <__udivsi3>:
    3354:	200d883a 	mov	r6,r4
    3358:	2900152e 	bgeu	r5,r4,33b0 <__udivsi3+0x5c>
    335c:	28001416 	blt	r5,zero,33b0 <__udivsi3+0x5c>
    3360:	00800804 	movi	r2,32
    3364:	00c00044 	movi	r3,1
    3368:	00000206 	br	3374 <__udivsi3+0x20>
    336c:	10000e26 	beq	r2,zero,33a8 <__udivsi3+0x54>
    3370:	28000516 	blt	r5,zero,3388 <__udivsi3+0x34>
    3374:	294b883a 	add	r5,r5,r5
    3378:	10bfffc4 	addi	r2,r2,-1
    337c:	18c7883a 	add	r3,r3,r3
    3380:	293ffa36 	bltu	r5,r4,336c <__alt_data_end+0xfc00336c>
    3384:	18000826 	beq	r3,zero,33a8 <__udivsi3+0x54>
    3388:	0005883a 	mov	r2,zero
    338c:	31400236 	bltu	r6,r5,3398 <__udivsi3+0x44>
    3390:	314dc83a 	sub	r6,r6,r5
    3394:	10c4b03a 	or	r2,r2,r3
    3398:	1806d07a 	srli	r3,r3,1
    339c:	280ad07a 	srli	r5,r5,1
    33a0:	183ffa1e 	bne	r3,zero,338c <__alt_data_end+0xfc00338c>
    33a4:	f800283a 	ret
    33a8:	0005883a 	mov	r2,zero
    33ac:	f800283a 	ret
    33b0:	00c00044 	movi	r3,1
    33b4:	003ff406 	br	3388 <__alt_data_end+0xfc003388>

000033b8 <__umodsi3>:
    33b8:	2005883a 	mov	r2,r4
    33bc:	2900122e 	bgeu	r5,r4,3408 <__umodsi3+0x50>
    33c0:	28001116 	blt	r5,zero,3408 <__umodsi3+0x50>
    33c4:	01800804 	movi	r6,32
    33c8:	00c00044 	movi	r3,1
    33cc:	00000206 	br	33d8 <__umodsi3+0x20>
    33d0:	30000c26 	beq	r6,zero,3404 <__umodsi3+0x4c>
    33d4:	28000516 	blt	r5,zero,33ec <__umodsi3+0x34>
    33d8:	294b883a 	add	r5,r5,r5
    33dc:	31bfffc4 	addi	r6,r6,-1
    33e0:	18c7883a 	add	r3,r3,r3
    33e4:	293ffa36 	bltu	r5,r4,33d0 <__alt_data_end+0xfc0033d0>
    33e8:	18000626 	beq	r3,zero,3404 <__umodsi3+0x4c>
    33ec:	1806d07a 	srli	r3,r3,1
    33f0:	11400136 	bltu	r2,r5,33f8 <__umodsi3+0x40>
    33f4:	1145c83a 	sub	r2,r2,r5
    33f8:	280ad07a 	srli	r5,r5,1
    33fc:	183ffb1e 	bne	r3,zero,33ec <__alt_data_end+0xfc0033ec>
    3400:	f800283a 	ret
    3404:	f800283a 	ret
    3408:	00c00044 	movi	r3,1
    340c:	003ff706 	br	33ec <__alt_data_end+0xfc0033ec>

00003410 <__mulsi3>:
    3410:	0005883a 	mov	r2,zero
    3414:	20000726 	beq	r4,zero,3434 <__mulsi3+0x24>
    3418:	20c0004c 	andi	r3,r4,1
    341c:	2008d07a 	srli	r4,r4,1
    3420:	18000126 	beq	r3,zero,3428 <__mulsi3+0x18>
    3424:	1145883a 	add	r2,r2,r5
    3428:	294b883a 	add	r5,r5,r5
    342c:	203ffa1e 	bne	r4,zero,3418 <__alt_data_end+0xfc003418>
    3430:	f800283a 	ret
    3434:	f800283a 	ret

00003438 <_printf_r>:
    3438:	defffd04 	addi	sp,sp,-12
    343c:	2805883a 	mov	r2,r5
    3440:	dfc00015 	stw	ra,0(sp)
    3444:	d9800115 	stw	r6,4(sp)
    3448:	d9c00215 	stw	r7,8(sp)
    344c:	21400217 	ldw	r5,8(r4)
    3450:	d9c00104 	addi	r7,sp,4
    3454:	100d883a 	mov	r6,r2
    3458:	00036300 	call	3630 <___vfprintf_internal_r>
    345c:	dfc00017 	ldw	ra,0(sp)
    3460:	dec00304 	addi	sp,sp,12
    3464:	f800283a 	ret

00003468 <printf>:
    3468:	defffc04 	addi	sp,sp,-16
    346c:	dfc00015 	stw	ra,0(sp)
    3470:	d9400115 	stw	r5,4(sp)
    3474:	d9800215 	stw	r6,8(sp)
    3478:	d9c00315 	stw	r7,12(sp)
    347c:	00800074 	movhi	r2,1
    3480:	109bc904 	addi	r2,r2,28452
    3484:	10800017 	ldw	r2,0(r2)
    3488:	200b883a 	mov	r5,r4
    348c:	d9800104 	addi	r6,sp,4
    3490:	11000217 	ldw	r4,8(r2)
    3494:	000590c0 	call	590c <__vfprintf_internal>
    3498:	dfc00017 	ldw	ra,0(sp)
    349c:	dec00404 	addi	sp,sp,16
    34a0:	f800283a 	ret

000034a4 <_putchar_r>:
    34a4:	21800217 	ldw	r6,8(r4)
    34a8:	000a4d01 	jmpi	a4d0 <_putc_r>

000034ac <putchar>:
    34ac:	00800074 	movhi	r2,1
    34b0:	109bc904 	addi	r2,r2,28452
    34b4:	200b883a 	mov	r5,r4
    34b8:	11000017 	ldw	r4,0(r2)
    34bc:	21800217 	ldw	r6,8(r4)
    34c0:	000a4d01 	jmpi	a4d0 <_putc_r>

000034c4 <_puts_r>:
    34c4:	defff604 	addi	sp,sp,-40
    34c8:	dc000715 	stw	r16,28(sp)
    34cc:	2021883a 	mov	r16,r4
    34d0:	2809883a 	mov	r4,r5
    34d4:	dc400815 	stw	r17,32(sp)
    34d8:	dfc00915 	stw	ra,36(sp)
    34dc:	2823883a 	mov	r17,r5
    34e0:	00035980 	call	3598 <strlen>
    34e4:	10c00044 	addi	r3,r2,1
    34e8:	d8800115 	stw	r2,4(sp)
    34ec:	00800074 	movhi	r2,1
    34f0:	10943404 	addi	r2,r2,20688
    34f4:	d8800215 	stw	r2,8(sp)
    34f8:	00800044 	movi	r2,1
    34fc:	d8800315 	stw	r2,12(sp)
    3500:	00800084 	movi	r2,2
    3504:	dc400015 	stw	r17,0(sp)
    3508:	d8c00615 	stw	r3,24(sp)
    350c:	dec00415 	stw	sp,16(sp)
    3510:	d8800515 	stw	r2,20(sp)
    3514:	80000226 	beq	r16,zero,3520 <_puts_r+0x5c>
    3518:	80800e17 	ldw	r2,56(r16)
    351c:	10001426 	beq	r2,zero,3570 <_puts_r+0xac>
    3520:	81400217 	ldw	r5,8(r16)
    3524:	2880030b 	ldhu	r2,12(r5)
    3528:	10c8000c 	andi	r3,r2,8192
    352c:	1800061e 	bne	r3,zero,3548 <_puts_r+0x84>
    3530:	29001917 	ldw	r4,100(r5)
    3534:	00f7ffc4 	movi	r3,-8193
    3538:	10880014 	ori	r2,r2,8192
    353c:	20c6703a 	and	r3,r4,r3
    3540:	2880030d 	sth	r2,12(r5)
    3544:	28c01915 	stw	r3,100(r5)
    3548:	d9800404 	addi	r6,sp,16
    354c:	8009883a 	mov	r4,r16
    3550:	0007e740 	call	7e74 <__sfvwrite_r>
    3554:	1000091e 	bne	r2,zero,357c <_puts_r+0xb8>
    3558:	00800284 	movi	r2,10
    355c:	dfc00917 	ldw	ra,36(sp)
    3560:	dc400817 	ldw	r17,32(sp)
    3564:	dc000717 	ldw	r16,28(sp)
    3568:	dec00a04 	addi	sp,sp,40
    356c:	f800283a 	ret
    3570:	8009883a 	mov	r4,r16
    3574:	00079f00 	call	79f0 <__sinit>
    3578:	003fe906 	br	3520 <__alt_data_end+0xfc003520>
    357c:	00bfffc4 	movi	r2,-1
    3580:	003ff606 	br	355c <__alt_data_end+0xfc00355c>

00003584 <puts>:
    3584:	00800074 	movhi	r2,1
    3588:	109bc904 	addi	r2,r2,28452
    358c:	200b883a 	mov	r5,r4
    3590:	11000017 	ldw	r4,0(r2)
    3594:	00034c41 	jmpi	34c4 <_puts_r>

00003598 <strlen>:
    3598:	208000cc 	andi	r2,r4,3
    359c:	10002026 	beq	r2,zero,3620 <strlen+0x88>
    35a0:	20800007 	ldb	r2,0(r4)
    35a4:	10002026 	beq	r2,zero,3628 <strlen+0x90>
    35a8:	2005883a 	mov	r2,r4
    35ac:	00000206 	br	35b8 <strlen+0x20>
    35b0:	10c00007 	ldb	r3,0(r2)
    35b4:	18001826 	beq	r3,zero,3618 <strlen+0x80>
    35b8:	10800044 	addi	r2,r2,1
    35bc:	10c000cc 	andi	r3,r2,3
    35c0:	183ffb1e 	bne	r3,zero,35b0 <__alt_data_end+0xfc0035b0>
    35c4:	10c00017 	ldw	r3,0(r2)
    35c8:	01ffbff4 	movhi	r7,65279
    35cc:	39ffbfc4 	addi	r7,r7,-257
    35d0:	00ca303a 	nor	r5,zero,r3
    35d4:	01a02074 	movhi	r6,32897
    35d8:	19c7883a 	add	r3,r3,r7
    35dc:	31a02004 	addi	r6,r6,-32640
    35e0:	1946703a 	and	r3,r3,r5
    35e4:	1986703a 	and	r3,r3,r6
    35e8:	1800091e 	bne	r3,zero,3610 <strlen+0x78>
    35ec:	10800104 	addi	r2,r2,4
    35f0:	10c00017 	ldw	r3,0(r2)
    35f4:	19cb883a 	add	r5,r3,r7
    35f8:	00c6303a 	nor	r3,zero,r3
    35fc:	28c6703a 	and	r3,r5,r3
    3600:	1986703a 	and	r3,r3,r6
    3604:	183ff926 	beq	r3,zero,35ec <__alt_data_end+0xfc0035ec>
    3608:	00000106 	br	3610 <strlen+0x78>
    360c:	10800044 	addi	r2,r2,1
    3610:	10c00007 	ldb	r3,0(r2)
    3614:	183ffd1e 	bne	r3,zero,360c <__alt_data_end+0xfc00360c>
    3618:	1105c83a 	sub	r2,r2,r4
    361c:	f800283a 	ret
    3620:	2005883a 	mov	r2,r4
    3624:	003fe706 	br	35c4 <__alt_data_end+0xfc0035c4>
    3628:	0005883a 	mov	r2,zero
    362c:	f800283a 	ret

00003630 <___vfprintf_internal_r>:
    3630:	deffb804 	addi	sp,sp,-288
    3634:	dfc04715 	stw	ra,284(sp)
    3638:	ddc04515 	stw	r23,276(sp)
    363c:	dd404315 	stw	r21,268(sp)
    3640:	d9002d15 	stw	r4,180(sp)
    3644:	282f883a 	mov	r23,r5
    3648:	302b883a 	mov	r21,r6
    364c:	d9c02e15 	stw	r7,184(sp)
    3650:	df004615 	stw	fp,280(sp)
    3654:	dd804415 	stw	r22,272(sp)
    3658:	dd004215 	stw	r20,264(sp)
    365c:	dcc04115 	stw	r19,260(sp)
    3660:	dc804015 	stw	r18,256(sp)
    3664:	dc403f15 	stw	r17,252(sp)
    3668:	dc003e15 	stw	r16,248(sp)
    366c:	00085700 	call	8570 <_localeconv_r>
    3670:	10800017 	ldw	r2,0(r2)
    3674:	1009883a 	mov	r4,r2
    3678:	d8803415 	stw	r2,208(sp)
    367c:	00035980 	call	3598 <strlen>
    3680:	d8803715 	stw	r2,220(sp)
    3684:	d8802d17 	ldw	r2,180(sp)
    3688:	10000226 	beq	r2,zero,3694 <___vfprintf_internal_r+0x64>
    368c:	10800e17 	ldw	r2,56(r2)
    3690:	1000fb26 	beq	r2,zero,3a80 <___vfprintf_internal_r+0x450>
    3694:	b880030b 	ldhu	r2,12(r23)
    3698:	10c8000c 	andi	r3,r2,8192
    369c:	1800061e 	bne	r3,zero,36b8 <___vfprintf_internal_r+0x88>
    36a0:	b9001917 	ldw	r4,100(r23)
    36a4:	00f7ffc4 	movi	r3,-8193
    36a8:	10880014 	ori	r2,r2,8192
    36ac:	20c6703a 	and	r3,r4,r3
    36b0:	b880030d 	sth	r2,12(r23)
    36b4:	b8c01915 	stw	r3,100(r23)
    36b8:	10c0020c 	andi	r3,r2,8
    36bc:	1800c326 	beq	r3,zero,39cc <___vfprintf_internal_r+0x39c>
    36c0:	b8c00417 	ldw	r3,16(r23)
    36c4:	1800c126 	beq	r3,zero,39cc <___vfprintf_internal_r+0x39c>
    36c8:	1080068c 	andi	r2,r2,26
    36cc:	00c00284 	movi	r3,10
    36d0:	10c0c626 	beq	r2,r3,39ec <___vfprintf_internal_r+0x3bc>
    36d4:	d8c00404 	addi	r3,sp,16
    36d8:	05000074 	movhi	r20,1
    36dc:	d9001e04 	addi	r4,sp,120
    36e0:	a5144584 	addi	r20,r20,20758
    36e4:	d8c01e15 	stw	r3,120(sp)
    36e8:	d8002015 	stw	zero,128(sp)
    36ec:	d8001f15 	stw	zero,124(sp)
    36f0:	d8003315 	stw	zero,204(sp)
    36f4:	d8003615 	stw	zero,216(sp)
    36f8:	d8003815 	stw	zero,224(sp)
    36fc:	1811883a 	mov	r8,r3
    3700:	d8003915 	stw	zero,228(sp)
    3704:	d8003a15 	stw	zero,232(sp)
    3708:	d8002f15 	stw	zero,188(sp)
    370c:	d9002815 	stw	r4,160(sp)
    3710:	a8800007 	ldb	r2,0(r21)
    3714:	10028b26 	beq	r2,zero,4144 <___vfprintf_internal_r+0xb14>
    3718:	00c00944 	movi	r3,37
    371c:	a823883a 	mov	r17,r21
    3720:	10c0021e 	bne	r2,r3,372c <___vfprintf_internal_r+0xfc>
    3724:	00001406 	br	3778 <___vfprintf_internal_r+0x148>
    3728:	10c00326 	beq	r2,r3,3738 <___vfprintf_internal_r+0x108>
    372c:	8c400044 	addi	r17,r17,1
    3730:	88800007 	ldb	r2,0(r17)
    3734:	103ffc1e 	bne	r2,zero,3728 <__alt_data_end+0xfc003728>
    3738:	8d61c83a 	sub	r16,r17,r21
    373c:	80000e26 	beq	r16,zero,3778 <___vfprintf_internal_r+0x148>
    3740:	d8c02017 	ldw	r3,128(sp)
    3744:	d8801f17 	ldw	r2,124(sp)
    3748:	45400015 	stw	r21,0(r8)
    374c:	1c07883a 	add	r3,r3,r16
    3750:	10800044 	addi	r2,r2,1
    3754:	d8c02015 	stw	r3,128(sp)
    3758:	44000115 	stw	r16,4(r8)
    375c:	d8801f15 	stw	r2,124(sp)
    3760:	00c001c4 	movi	r3,7
    3764:	1880a916 	blt	r3,r2,3a0c <___vfprintf_internal_r+0x3dc>
    3768:	42000204 	addi	r8,r8,8
    376c:	d9402f17 	ldw	r5,188(sp)
    3770:	2c0b883a 	add	r5,r5,r16
    3774:	d9402f15 	stw	r5,188(sp)
    3778:	88800007 	ldb	r2,0(r17)
    377c:	1000aa26 	beq	r2,zero,3a28 <___vfprintf_internal_r+0x3f8>
    3780:	8d400044 	addi	r21,r17,1
    3784:	8c400047 	ldb	r17,1(r17)
    3788:	0021883a 	mov	r16,zero
    378c:	00bfffc4 	movi	r2,-1
    3790:	0025883a 	mov	r18,zero
    3794:	dc002905 	stb	r16,164(sp)
    3798:	d8002785 	stb	zero,158(sp)
    379c:	d8002b05 	stb	zero,172(sp)
    37a0:	d8802a15 	stw	r2,168(sp)
    37a4:	d8003115 	stw	zero,196(sp)
    37a8:	04c01604 	movi	r19,88
    37ac:	05800244 	movi	r22,9
    37b0:	9021883a 	mov	r16,r18
    37b4:	4039883a 	mov	fp,r8
    37b8:	ad400044 	addi	r21,r21,1
    37bc:	88bff804 	addi	r2,r17,-32
    37c0:	98833236 	bltu	r19,r2,448c <___vfprintf_internal_r+0xe5c>
    37c4:	100490ba 	slli	r2,r2,2
    37c8:	00c00034 	movhi	r3,0
    37cc:	18cdf704 	addi	r3,r3,14300
    37d0:	10c5883a 	add	r2,r2,r3
    37d4:	10800017 	ldw	r2,0(r2)
    37d8:	1000683a 	jmp	r2
    37dc:	00004384 	movi	zero,270
    37e0:	0000448c 	andi	zero,zero,274
    37e4:	0000448c 	andi	zero,zero,274
    37e8:	000043a4 	muli	zero,zero,270
    37ec:	0000448c 	andi	zero,zero,274
    37f0:	0000448c 	andi	zero,zero,274
    37f4:	0000448c 	andi	zero,zero,274
    37f8:	0000448c 	andi	zero,zero,274
    37fc:	0000448c 	andi	zero,zero,274
    3800:	0000448c 	andi	zero,zero,274
    3804:	00003a8c 	andi	zero,zero,234
    3808:	00004294 	movui	zero,266
    380c:	0000448c 	andi	zero,zero,274
    3810:	00003950 	cmplti	zero,zero,229
    3814:	00003ab0 	cmpltui	zero,zero,234
    3818:	0000448c 	andi	zero,zero,274
    381c:	00003b00 	call	3b0 <I2Cbytes_wr+0xac>
    3820:	00003b0c 	andi	zero,zero,236
    3824:	00003b0c 	andi	zero,zero,236
    3828:	00003b0c 	andi	zero,zero,236
    382c:	00003b0c 	andi	zero,zero,236
    3830:	00003b0c 	andi	zero,zero,236
    3834:	00003b0c 	andi	zero,zero,236
    3838:	00003b0c 	andi	zero,zero,236
    383c:	00003b0c 	andi	zero,zero,236
    3840:	00003b0c 	andi	zero,zero,236
    3844:	0000448c 	andi	zero,zero,274
    3848:	0000448c 	andi	zero,zero,274
    384c:	0000448c 	andi	zero,zero,274
    3850:	0000448c 	andi	zero,zero,274
    3854:	0000448c 	andi	zero,zero,274
    3858:	0000448c 	andi	zero,zero,274
    385c:	0000448c 	andi	zero,zero,274
    3860:	0000448c 	andi	zero,zero,274
    3864:	0000448c 	andi	zero,zero,274
    3868:	0000448c 	andi	zero,zero,274
    386c:	00003b48 	cmpgei	zero,zero,237
    3870:	00003c10 	cmplti	zero,zero,240
    3874:	0000448c 	andi	zero,zero,274
    3878:	00003c10 	cmplti	zero,zero,240
    387c:	0000448c 	andi	zero,zero,274
    3880:	0000448c 	andi	zero,zero,274
    3884:	0000448c 	andi	zero,zero,274
    3888:	0000448c 	andi	zero,zero,274
    388c:	00003cbc 	xorhi	zero,zero,242
    3890:	0000448c 	andi	zero,zero,274
    3894:	0000448c 	andi	zero,zero,274
    3898:	00003cc8 	cmpgei	zero,zero,243
    389c:	0000448c 	andi	zero,zero,274
    38a0:	0000448c 	andi	zero,zero,274
    38a4:	0000448c 	andi	zero,zero,274
    38a8:	0000448c 	andi	zero,zero,274
    38ac:	0000448c 	andi	zero,zero,274
    38b0:	0000414c 	andi	zero,zero,261
    38b4:	0000448c 	andi	zero,zero,274
    38b8:	0000448c 	andi	zero,zero,274
    38bc:	000041b8 	rdprs	zero,zero,262
    38c0:	0000448c 	andi	zero,zero,274
    38c4:	0000448c 	andi	zero,zero,274
    38c8:	0000448c 	andi	zero,zero,274
    38cc:	0000448c 	andi	zero,zero,274
    38d0:	0000448c 	andi	zero,zero,274
    38d4:	0000448c 	andi	zero,zero,274
    38d8:	0000448c 	andi	zero,zero,274
    38dc:	0000448c 	andi	zero,zero,274
    38e0:	0000448c 	andi	zero,zero,274
    38e4:	0000448c 	andi	zero,zero,274
    38e8:	00004430 	cmpltui	zero,zero,272
    38ec:	000043b0 	cmpltui	zero,zero,270
    38f0:	00003c10 	cmplti	zero,zero,240
    38f4:	00003c10 	cmplti	zero,zero,240
    38f8:	00003c10 	cmplti	zero,zero,240
    38fc:	000043d0 	cmplti	zero,zero,271
    3900:	000043b0 	cmpltui	zero,zero,270
    3904:	0000448c 	andi	zero,zero,274
    3908:	0000448c 	andi	zero,zero,274
    390c:	000043dc 	xori	zero,zero,271
    3910:	0000448c 	andi	zero,zero,274
    3914:	000043f0 	cmpltui	zero,zero,271
    3918:	00004274 	movhi	zero,265
    391c:	0000395c 	xori	zero,zero,229
    3920:	000042ac 	andhi	zero,zero,266
    3924:	0000448c 	andi	zero,zero,274
    3928:	000042b8 	rdprs	zero,zero,266
    392c:	0000448c 	andi	zero,zero,274
    3930:	0000431c 	xori	zero,zero,268
    3934:	0000448c 	andi	zero,zero,274
    3938:	0000448c 	andi	zero,zero,274
    393c:	0000433c 	xorhi	zero,zero,268
    3940:	d8c03117 	ldw	r3,196(sp)
    3944:	d8802e15 	stw	r2,184(sp)
    3948:	00c7c83a 	sub	r3,zero,r3
    394c:	d8c03115 	stw	r3,196(sp)
    3950:	84000114 	ori	r16,r16,4
    3954:	ac400007 	ldb	r17,0(r21)
    3958:	003f9706 	br	37b8 <__alt_data_end+0xfc0037b8>
    395c:	00800c04 	movi	r2,48
    3960:	d8802705 	stb	r2,156(sp)
    3964:	00801e04 	movi	r2,120
    3968:	d8802745 	stb	r2,157(sp)
    396c:	d9002a17 	ldw	r4,168(sp)
    3970:	d8802e17 	ldw	r2,184(sp)
    3974:	d8002785 	stb	zero,158(sp)
    3978:	e011883a 	mov	r8,fp
    397c:	10c00104 	addi	r3,r2,4
    3980:	14c00017 	ldw	r19,0(r2)
    3984:	002d883a 	mov	r22,zero
    3988:	80800094 	ori	r2,r16,2
    398c:	2002ca16 	blt	r4,zero,44b8 <___vfprintf_internal_r+0xe88>
    3990:	00bfdfc4 	movi	r2,-129
    3994:	80a4703a 	and	r18,r16,r2
    3998:	d8c02e15 	stw	r3,184(sp)
    399c:	94800094 	ori	r18,r18,2
    39a0:	9802b41e 	bne	r19,zero,4474 <___vfprintf_internal_r+0xe44>
    39a4:	01400074 	movhi	r5,1
    39a8:	29543e04 	addi	r5,r5,20728
    39ac:	d9403915 	stw	r5,228(sp)
    39b0:	04401e04 	movi	r17,120
    39b4:	d8802a17 	ldw	r2,168(sp)
    39b8:	0039883a 	mov	fp,zero
    39bc:	1001fa26 	beq	r2,zero,41a8 <___vfprintf_internal_r+0xb78>
    39c0:	0027883a 	mov	r19,zero
    39c4:	002d883a 	mov	r22,zero
    39c8:	00021906 	br	4230 <___vfprintf_internal_r+0xc00>
    39cc:	d9002d17 	ldw	r4,180(sp)
    39d0:	b80b883a 	mov	r5,r23
    39d4:	00059e40 	call	59e4 <__swsetup_r>
    39d8:	1005dc1e 	bne	r2,zero,514c <___vfprintf_internal_r+0x1b1c>
    39dc:	b880030b 	ldhu	r2,12(r23)
    39e0:	00c00284 	movi	r3,10
    39e4:	1080068c 	andi	r2,r2,26
    39e8:	10ff3a1e 	bne	r2,r3,36d4 <__alt_data_end+0xfc0036d4>
    39ec:	b880038f 	ldh	r2,14(r23)
    39f0:	103f3816 	blt	r2,zero,36d4 <__alt_data_end+0xfc0036d4>
    39f4:	d9c02e17 	ldw	r7,184(sp)
    39f8:	d9002d17 	ldw	r4,180(sp)
    39fc:	a80d883a 	mov	r6,r21
    3a00:	b80b883a 	mov	r5,r23
    3a04:	00059280 	call	5928 <__sbprintf>
    3a08:	00001106 	br	3a50 <___vfprintf_internal_r+0x420>
    3a0c:	d9002d17 	ldw	r4,180(sp)
    3a10:	d9801e04 	addi	r6,sp,120
    3a14:	b80b883a 	mov	r5,r23
    3a18:	000af780 	call	af78 <__sprint_r>
    3a1c:	1000081e 	bne	r2,zero,3a40 <___vfprintf_internal_r+0x410>
    3a20:	da000404 	addi	r8,sp,16
    3a24:	003f5106 	br	376c <__alt_data_end+0xfc00376c>
    3a28:	d8802017 	ldw	r2,128(sp)
    3a2c:	10000426 	beq	r2,zero,3a40 <___vfprintf_internal_r+0x410>
    3a30:	d9002d17 	ldw	r4,180(sp)
    3a34:	d9801e04 	addi	r6,sp,120
    3a38:	b80b883a 	mov	r5,r23
    3a3c:	000af780 	call	af78 <__sprint_r>
    3a40:	b880030b 	ldhu	r2,12(r23)
    3a44:	1080100c 	andi	r2,r2,64
    3a48:	1005c01e 	bne	r2,zero,514c <___vfprintf_internal_r+0x1b1c>
    3a4c:	d8802f17 	ldw	r2,188(sp)
    3a50:	dfc04717 	ldw	ra,284(sp)
    3a54:	df004617 	ldw	fp,280(sp)
    3a58:	ddc04517 	ldw	r23,276(sp)
    3a5c:	dd804417 	ldw	r22,272(sp)
    3a60:	dd404317 	ldw	r21,268(sp)
    3a64:	dd004217 	ldw	r20,264(sp)
    3a68:	dcc04117 	ldw	r19,260(sp)
    3a6c:	dc804017 	ldw	r18,256(sp)
    3a70:	dc403f17 	ldw	r17,252(sp)
    3a74:	dc003e17 	ldw	r16,248(sp)
    3a78:	dec04804 	addi	sp,sp,288
    3a7c:	f800283a 	ret
    3a80:	d9002d17 	ldw	r4,180(sp)
    3a84:	00079f00 	call	79f0 <__sinit>
    3a88:	003f0206 	br	3694 <__alt_data_end+0xfc003694>
    3a8c:	d9002e17 	ldw	r4,184(sp)
    3a90:	d9402e17 	ldw	r5,184(sp)
    3a94:	21000017 	ldw	r4,0(r4)
    3a98:	28800104 	addi	r2,r5,4
    3a9c:	d9003115 	stw	r4,196(sp)
    3aa0:	203fa716 	blt	r4,zero,3940 <__alt_data_end+0xfc003940>
    3aa4:	d8802e15 	stw	r2,184(sp)
    3aa8:	ac400007 	ldb	r17,0(r21)
    3aac:	003f4206 	br	37b8 <__alt_data_end+0xfc0037b8>
    3ab0:	ac400007 	ldb	r17,0(r21)
    3ab4:	01000a84 	movi	r4,42
    3ab8:	a8c00044 	addi	r3,r21,1
    3abc:	89075826 	beq	r17,r4,5820 <___vfprintf_internal_r+0x21f0>
    3ac0:	8cbff404 	addi	r18,r17,-48
    3ac4:	b486ae36 	bltu	r22,r18,5580 <___vfprintf_internal_r+0x1f50>
    3ac8:	0009883a 	mov	r4,zero
    3acc:	1823883a 	mov	r17,r3
    3ad0:	01400284 	movi	r5,10
    3ad4:	00034100 	call	3410 <__mulsi3>
    3ad8:	88c00007 	ldb	r3,0(r17)
    3adc:	1489883a 	add	r4,r2,r18
    3ae0:	8d400044 	addi	r21,r17,1
    3ae4:	1cbff404 	addi	r18,r3,-48
    3ae8:	a823883a 	mov	r17,r21
    3aec:	b4bff82e 	bgeu	r22,r18,3ad0 <__alt_data_end+0xfc003ad0>
    3af0:	1823883a 	mov	r17,r3
    3af4:	2005f616 	blt	r4,zero,52d0 <___vfprintf_internal_r+0x1ca0>
    3af8:	d9002a15 	stw	r4,168(sp)
    3afc:	003f2f06 	br	37bc <__alt_data_end+0xfc0037bc>
    3b00:	84002014 	ori	r16,r16,128
    3b04:	ac400007 	ldb	r17,0(r21)
    3b08:	003f2b06 	br	37b8 <__alt_data_end+0xfc0037b8>
    3b0c:	8cbff404 	addi	r18,r17,-48
    3b10:	d8003115 	stw	zero,196(sp)
    3b14:	0009883a 	mov	r4,zero
    3b18:	a823883a 	mov	r17,r21
    3b1c:	01400284 	movi	r5,10
    3b20:	00034100 	call	3410 <__mulsi3>
    3b24:	88c00007 	ldb	r3,0(r17)
    3b28:	9089883a 	add	r4,r18,r2
    3b2c:	ad400044 	addi	r21,r21,1
    3b30:	1cbff404 	addi	r18,r3,-48
    3b34:	a823883a 	mov	r17,r21
    3b38:	b4bff82e 	bgeu	r22,r18,3b1c <__alt_data_end+0xfc003b1c>
    3b3c:	1823883a 	mov	r17,r3
    3b40:	d9003115 	stw	r4,196(sp)
    3b44:	003f1d06 	br	37bc <__alt_data_end+0xfc0037bc>
    3b48:	8025883a 	mov	r18,r16
    3b4c:	dc002903 	ldbu	r16,164(sp)
    3b50:	e011883a 	mov	r8,fp
    3b54:	84003fcc 	andi	r16,r16,255
    3b58:	8007531e 	bne	r16,zero,58a8 <___vfprintf_internal_r+0x2278>
    3b5c:	94800414 	ori	r18,r18,16
    3b60:	9080080c 	andi	r2,r18,32
    3b64:	1003a326 	beq	r2,zero,49f4 <___vfprintf_internal_r+0x13c4>
    3b68:	d9002e17 	ldw	r4,184(sp)
    3b6c:	20800117 	ldw	r2,4(r4)
    3b70:	24c00017 	ldw	r19,0(r4)
    3b74:	21000204 	addi	r4,r4,8
    3b78:	d9002e15 	stw	r4,184(sp)
    3b7c:	102d883a 	mov	r22,r2
    3b80:	10047316 	blt	r2,zero,4d50 <___vfprintf_internal_r+0x1720>
    3b84:	d9002a17 	ldw	r4,168(sp)
    3b88:	df002783 	ldbu	fp,158(sp)
    3b8c:	2003e416 	blt	r4,zero,4b20 <___vfprintf_internal_r+0x14f0>
    3b90:	00ffdfc4 	movi	r3,-129
    3b94:	9d84b03a 	or	r2,r19,r22
    3b98:	90e4703a 	and	r18,r18,r3
    3b9c:	10018026 	beq	r2,zero,41a0 <___vfprintf_internal_r+0xb70>
    3ba0:	b003ab26 	beq	r22,zero,4a50 <___vfprintf_internal_r+0x1420>
    3ba4:	dc402915 	stw	r17,164(sp)
    3ba8:	dc001e04 	addi	r16,sp,120
    3bac:	b023883a 	mov	r17,r22
    3bb0:	402d883a 	mov	r22,r8
    3bb4:	9809883a 	mov	r4,r19
    3bb8:	880b883a 	mov	r5,r17
    3bbc:	01800284 	movi	r6,10
    3bc0:	000f883a 	mov	r7,zero
    3bc4:	000d4bc0 	call	d4bc <__umoddi3>
    3bc8:	10800c04 	addi	r2,r2,48
    3bcc:	843fffc4 	addi	r16,r16,-1
    3bd0:	9809883a 	mov	r4,r19
    3bd4:	880b883a 	mov	r5,r17
    3bd8:	80800005 	stb	r2,0(r16)
    3bdc:	01800284 	movi	r6,10
    3be0:	000f883a 	mov	r7,zero
    3be4:	000cec00 	call	cec0 <__udivdi3>
    3be8:	1027883a 	mov	r19,r2
    3bec:	10c4b03a 	or	r2,r2,r3
    3bf0:	1823883a 	mov	r17,r3
    3bf4:	103fef1e 	bne	r2,zero,3bb4 <__alt_data_end+0xfc003bb4>
    3bf8:	d8c02817 	ldw	r3,160(sp)
    3bfc:	dc402917 	ldw	r17,164(sp)
    3c00:	b011883a 	mov	r8,r22
    3c04:	1c07c83a 	sub	r3,r3,r16
    3c08:	d8c02b15 	stw	r3,172(sp)
    3c0c:	00005f06 	br	3d8c <___vfprintf_internal_r+0x75c>
    3c10:	8025883a 	mov	r18,r16
    3c14:	dc002903 	ldbu	r16,164(sp)
    3c18:	e011883a 	mov	r8,fp
    3c1c:	84003fcc 	andi	r16,r16,255
    3c20:	80071e1e 	bne	r16,zero,589c <___vfprintf_internal_r+0x226c>
    3c24:	9080020c 	andi	r2,r18,8
    3c28:	1004af26 	beq	r2,zero,4ee8 <___vfprintf_internal_r+0x18b8>
    3c2c:	d9002e17 	ldw	r4,184(sp)
    3c30:	d9402e17 	ldw	r5,184(sp)
    3c34:	d8802e17 	ldw	r2,184(sp)
    3c38:	21000017 	ldw	r4,0(r4)
    3c3c:	29400117 	ldw	r5,4(r5)
    3c40:	10800204 	addi	r2,r2,8
    3c44:	d9003615 	stw	r4,216(sp)
    3c48:	d9403815 	stw	r5,224(sp)
    3c4c:	d8802e15 	stw	r2,184(sp)
    3c50:	d9003617 	ldw	r4,216(sp)
    3c54:	d9403817 	ldw	r5,224(sp)
    3c58:	da003d15 	stw	r8,244(sp)
    3c5c:	04000044 	movi	r16,1
    3c60:	000ab9c0 	call	ab9c <__fpclassifyd>
    3c64:	da003d17 	ldw	r8,244(sp)
    3c68:	1404441e 	bne	r2,r16,4d7c <___vfprintf_internal_r+0x174c>
    3c6c:	d9003617 	ldw	r4,216(sp)
    3c70:	d9403817 	ldw	r5,224(sp)
    3c74:	000d883a 	mov	r6,zero
    3c78:	000f883a 	mov	r7,zero
    3c7c:	000ee600 	call	ee60 <__ledf2>
    3c80:	da003d17 	ldw	r8,244(sp)
    3c84:	1005e316 	blt	r2,zero,5414 <___vfprintf_internal_r+0x1de4>
    3c88:	df002783 	ldbu	fp,158(sp)
    3c8c:	008011c4 	movi	r2,71
    3c90:	1445580e 	bge	r2,r17,51f4 <___vfprintf_internal_r+0x1bc4>
    3c94:	04000074 	movhi	r16,1
    3c98:	84143604 	addi	r16,r16,20696
    3c9c:	00c000c4 	movi	r3,3
    3ca0:	00bfdfc4 	movi	r2,-129
    3ca4:	d8c02915 	stw	r3,164(sp)
    3ca8:	90a4703a 	and	r18,r18,r2
    3cac:	d8c02b15 	stw	r3,172(sp)
    3cb0:	d8002a15 	stw	zero,168(sp)
    3cb4:	d8003215 	stw	zero,200(sp)
    3cb8:	00003a06 	br	3da4 <___vfprintf_internal_r+0x774>
    3cbc:	84000214 	ori	r16,r16,8
    3cc0:	ac400007 	ldb	r17,0(r21)
    3cc4:	003ebc06 	br	37b8 <__alt_data_end+0xfc0037b8>
    3cc8:	8025883a 	mov	r18,r16
    3ccc:	dc002903 	ldbu	r16,164(sp)
    3cd0:	e011883a 	mov	r8,fp
    3cd4:	84003fcc 	andi	r16,r16,255
    3cd8:	8007001e 	bne	r16,zero,58dc <___vfprintf_internal_r+0x22ac>
    3cdc:	94800414 	ori	r18,r18,16
    3ce0:	9080080c 	andi	r2,r18,32
    3ce4:	1002fa26 	beq	r2,zero,48d0 <___vfprintf_internal_r+0x12a0>
    3ce8:	d9002e17 	ldw	r4,184(sp)
    3cec:	d9402a17 	ldw	r5,168(sp)
    3cf0:	d8002785 	stb	zero,158(sp)
    3cf4:	20800204 	addi	r2,r4,8
    3cf8:	24c00017 	ldw	r19,0(r4)
    3cfc:	25800117 	ldw	r22,4(r4)
    3d00:	2804b116 	blt	r5,zero,4fc8 <___vfprintf_internal_r+0x1998>
    3d04:	013fdfc4 	movi	r4,-129
    3d08:	9d86b03a 	or	r3,r19,r22
    3d0c:	d8802e15 	stw	r2,184(sp)
    3d10:	9124703a 	and	r18,r18,r4
    3d14:	1802fb1e 	bne	r3,zero,4904 <___vfprintf_internal_r+0x12d4>
    3d18:	d8c02a17 	ldw	r3,168(sp)
    3d1c:	0039883a 	mov	fp,zero
    3d20:	1805e526 	beq	r3,zero,54b8 <___vfprintf_internal_r+0x1e88>
    3d24:	0027883a 	mov	r19,zero
    3d28:	002d883a 	mov	r22,zero
    3d2c:	dc001e04 	addi	r16,sp,120
    3d30:	9806d0fa 	srli	r3,r19,3
    3d34:	b008977a 	slli	r4,r22,29
    3d38:	b02cd0fa 	srli	r22,r22,3
    3d3c:	9cc001cc 	andi	r19,r19,7
    3d40:	98800c04 	addi	r2,r19,48
    3d44:	843fffc4 	addi	r16,r16,-1
    3d48:	20e6b03a 	or	r19,r4,r3
    3d4c:	80800005 	stb	r2,0(r16)
    3d50:	9d86b03a 	or	r3,r19,r22
    3d54:	183ff61e 	bne	r3,zero,3d30 <__alt_data_end+0xfc003d30>
    3d58:	90c0004c 	andi	r3,r18,1
    3d5c:	18014126 	beq	r3,zero,4264 <___vfprintf_internal_r+0xc34>
    3d60:	10803fcc 	andi	r2,r2,255
    3d64:	1080201c 	xori	r2,r2,128
    3d68:	10bfe004 	addi	r2,r2,-128
    3d6c:	00c00c04 	movi	r3,48
    3d70:	10c13c26 	beq	r2,r3,4264 <___vfprintf_internal_r+0xc34>
    3d74:	80ffffc5 	stb	r3,-1(r16)
    3d78:	d8c02817 	ldw	r3,160(sp)
    3d7c:	80bfffc4 	addi	r2,r16,-1
    3d80:	1021883a 	mov	r16,r2
    3d84:	1887c83a 	sub	r3,r3,r2
    3d88:	d8c02b15 	stw	r3,172(sp)
    3d8c:	d8802b17 	ldw	r2,172(sp)
    3d90:	d9002a17 	ldw	r4,168(sp)
    3d94:	1100010e 	bge	r2,r4,3d9c <___vfprintf_internal_r+0x76c>
    3d98:	2005883a 	mov	r2,r4
    3d9c:	d8802915 	stw	r2,164(sp)
    3da0:	d8003215 	stw	zero,200(sp)
    3da4:	e7003fcc 	andi	fp,fp,255
    3da8:	e700201c 	xori	fp,fp,128
    3dac:	e73fe004 	addi	fp,fp,-128
    3db0:	e0000326 	beq	fp,zero,3dc0 <___vfprintf_internal_r+0x790>
    3db4:	d8c02917 	ldw	r3,164(sp)
    3db8:	18c00044 	addi	r3,r3,1
    3dbc:	d8c02915 	stw	r3,164(sp)
    3dc0:	90c0008c 	andi	r3,r18,2
    3dc4:	d8c02c15 	stw	r3,176(sp)
    3dc8:	18000326 	beq	r3,zero,3dd8 <___vfprintf_internal_r+0x7a8>
    3dcc:	d8c02917 	ldw	r3,164(sp)
    3dd0:	18c00084 	addi	r3,r3,2
    3dd4:	d8c02915 	stw	r3,164(sp)
    3dd8:	90c0210c 	andi	r3,r18,132
    3ddc:	d8c03015 	stw	r3,192(sp)
    3de0:	1801c51e 	bne	r3,zero,44f8 <___vfprintf_internal_r+0xec8>
    3de4:	d9003117 	ldw	r4,196(sp)
    3de8:	d8c02917 	ldw	r3,164(sp)
    3dec:	20e7c83a 	sub	r19,r4,r3
    3df0:	04c1c10e 	bge	zero,r19,44f8 <___vfprintf_internal_r+0xec8>
    3df4:	02400404 	movi	r9,16
    3df8:	d8c02017 	ldw	r3,128(sp)
    3dfc:	d8801f17 	ldw	r2,124(sp)
    3e00:	4cc52f0e 	bge	r9,r19,52c0 <___vfprintf_internal_r+0x1c90>
    3e04:	01400074 	movhi	r5,1
    3e08:	29544984 	addi	r5,r5,20774
    3e0c:	dc403b15 	stw	r17,236(sp)
    3e10:	d9403515 	stw	r5,212(sp)
    3e14:	9823883a 	mov	r17,r19
    3e18:	482d883a 	mov	r22,r9
    3e1c:	9027883a 	mov	r19,r18
    3e20:	070001c4 	movi	fp,7
    3e24:	8025883a 	mov	r18,r16
    3e28:	dc002d17 	ldw	r16,180(sp)
    3e2c:	00000306 	br	3e3c <___vfprintf_internal_r+0x80c>
    3e30:	8c7ffc04 	addi	r17,r17,-16
    3e34:	42000204 	addi	r8,r8,8
    3e38:	b440130e 	bge	r22,r17,3e88 <___vfprintf_internal_r+0x858>
    3e3c:	01000074 	movhi	r4,1
    3e40:	18c00404 	addi	r3,r3,16
    3e44:	10800044 	addi	r2,r2,1
    3e48:	21144984 	addi	r4,r4,20774
    3e4c:	41000015 	stw	r4,0(r8)
    3e50:	45800115 	stw	r22,4(r8)
    3e54:	d8c02015 	stw	r3,128(sp)
    3e58:	d8801f15 	stw	r2,124(sp)
    3e5c:	e0bff40e 	bge	fp,r2,3e30 <__alt_data_end+0xfc003e30>
    3e60:	d9801e04 	addi	r6,sp,120
    3e64:	b80b883a 	mov	r5,r23
    3e68:	8009883a 	mov	r4,r16
    3e6c:	000af780 	call	af78 <__sprint_r>
    3e70:	103ef31e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    3e74:	8c7ffc04 	addi	r17,r17,-16
    3e78:	d8c02017 	ldw	r3,128(sp)
    3e7c:	d8801f17 	ldw	r2,124(sp)
    3e80:	da000404 	addi	r8,sp,16
    3e84:	b47fed16 	blt	r22,r17,3e3c <__alt_data_end+0xfc003e3c>
    3e88:	9021883a 	mov	r16,r18
    3e8c:	9825883a 	mov	r18,r19
    3e90:	8827883a 	mov	r19,r17
    3e94:	dc403b17 	ldw	r17,236(sp)
    3e98:	d9403517 	ldw	r5,212(sp)
    3e9c:	98c7883a 	add	r3,r19,r3
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	41400015 	stw	r5,0(r8)
    3ea8:	44c00115 	stw	r19,4(r8)
    3eac:	d8c02015 	stw	r3,128(sp)
    3eb0:	d8801f15 	stw	r2,124(sp)
    3eb4:	010001c4 	movi	r4,7
    3eb8:	2082c516 	blt	r4,r2,49d0 <___vfprintf_internal_r+0x13a0>
    3ebc:	df002787 	ldb	fp,158(sp)
    3ec0:	42000204 	addi	r8,r8,8
    3ec4:	e0000c26 	beq	fp,zero,3ef8 <___vfprintf_internal_r+0x8c8>
    3ec8:	d8801f17 	ldw	r2,124(sp)
    3ecc:	d9002784 	addi	r4,sp,158
    3ed0:	18c00044 	addi	r3,r3,1
    3ed4:	10800044 	addi	r2,r2,1
    3ed8:	41000015 	stw	r4,0(r8)
    3edc:	01000044 	movi	r4,1
    3ee0:	41000115 	stw	r4,4(r8)
    3ee4:	d8c02015 	stw	r3,128(sp)
    3ee8:	d8801f15 	stw	r2,124(sp)
    3eec:	010001c4 	movi	r4,7
    3ef0:	20825e16 	blt	r4,r2,486c <___vfprintf_internal_r+0x123c>
    3ef4:	42000204 	addi	r8,r8,8
    3ef8:	d8802c17 	ldw	r2,176(sp)
    3efc:	10000c26 	beq	r2,zero,3f30 <___vfprintf_internal_r+0x900>
    3f00:	d8801f17 	ldw	r2,124(sp)
    3f04:	d9002704 	addi	r4,sp,156
    3f08:	18c00084 	addi	r3,r3,2
    3f0c:	10800044 	addi	r2,r2,1
    3f10:	41000015 	stw	r4,0(r8)
    3f14:	01000084 	movi	r4,2
    3f18:	41000115 	stw	r4,4(r8)
    3f1c:	d8c02015 	stw	r3,128(sp)
    3f20:	d8801f15 	stw	r2,124(sp)
    3f24:	010001c4 	movi	r4,7
    3f28:	20825816 	blt	r4,r2,488c <___vfprintf_internal_r+0x125c>
    3f2c:	42000204 	addi	r8,r8,8
    3f30:	d9003017 	ldw	r4,192(sp)
    3f34:	00802004 	movi	r2,128
    3f38:	2081bb26 	beq	r4,r2,4628 <___vfprintf_internal_r+0xff8>
    3f3c:	d9402a17 	ldw	r5,168(sp)
    3f40:	d8802b17 	ldw	r2,172(sp)
    3f44:	28adc83a 	sub	r22,r5,r2
    3f48:	0580310e 	bge	zero,r22,4010 <___vfprintf_internal_r+0x9e0>
    3f4c:	07000404 	movi	fp,16
    3f50:	d8801f17 	ldw	r2,124(sp)
    3f54:	e584360e 	bge	fp,r22,5030 <___vfprintf_internal_r+0x1a00>
    3f58:	01400074 	movhi	r5,1
    3f5c:	29544584 	addi	r5,r5,20758
    3f60:	dc402a15 	stw	r17,168(sp)
    3f64:	d9402c15 	stw	r5,176(sp)
    3f68:	b023883a 	mov	r17,r22
    3f6c:	04c001c4 	movi	r19,7
    3f70:	a82d883a 	mov	r22,r21
    3f74:	902b883a 	mov	r21,r18
    3f78:	8025883a 	mov	r18,r16
    3f7c:	dc002d17 	ldw	r16,180(sp)
    3f80:	00000306 	br	3f90 <___vfprintf_internal_r+0x960>
    3f84:	8c7ffc04 	addi	r17,r17,-16
    3f88:	42000204 	addi	r8,r8,8
    3f8c:	e440110e 	bge	fp,r17,3fd4 <___vfprintf_internal_r+0x9a4>
    3f90:	18c00404 	addi	r3,r3,16
    3f94:	10800044 	addi	r2,r2,1
    3f98:	45000015 	stw	r20,0(r8)
    3f9c:	47000115 	stw	fp,4(r8)
    3fa0:	d8c02015 	stw	r3,128(sp)
    3fa4:	d8801f15 	stw	r2,124(sp)
    3fa8:	98bff60e 	bge	r19,r2,3f84 <__alt_data_end+0xfc003f84>
    3fac:	d9801e04 	addi	r6,sp,120
    3fb0:	b80b883a 	mov	r5,r23
    3fb4:	8009883a 	mov	r4,r16
    3fb8:	000af780 	call	af78 <__sprint_r>
    3fbc:	103ea01e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    3fc0:	8c7ffc04 	addi	r17,r17,-16
    3fc4:	d8c02017 	ldw	r3,128(sp)
    3fc8:	d8801f17 	ldw	r2,124(sp)
    3fcc:	da000404 	addi	r8,sp,16
    3fd0:	e47fef16 	blt	fp,r17,3f90 <__alt_data_end+0xfc003f90>
    3fd4:	9021883a 	mov	r16,r18
    3fd8:	a825883a 	mov	r18,r21
    3fdc:	b02b883a 	mov	r21,r22
    3fe0:	882d883a 	mov	r22,r17
    3fe4:	dc402a17 	ldw	r17,168(sp)
    3fe8:	d9002c17 	ldw	r4,176(sp)
    3fec:	1d87883a 	add	r3,r3,r22
    3ff0:	10800044 	addi	r2,r2,1
    3ff4:	41000015 	stw	r4,0(r8)
    3ff8:	45800115 	stw	r22,4(r8)
    3ffc:	d8c02015 	stw	r3,128(sp)
    4000:	d8801f15 	stw	r2,124(sp)
    4004:	010001c4 	movi	r4,7
    4008:	20821016 	blt	r4,r2,484c <___vfprintf_internal_r+0x121c>
    400c:	42000204 	addi	r8,r8,8
    4010:	9080400c 	andi	r2,r18,256
    4014:	10013a1e 	bne	r2,zero,4500 <___vfprintf_internal_r+0xed0>
    4018:	d9402b17 	ldw	r5,172(sp)
    401c:	d8801f17 	ldw	r2,124(sp)
    4020:	44000015 	stw	r16,0(r8)
    4024:	1947883a 	add	r3,r3,r5
    4028:	10800044 	addi	r2,r2,1
    402c:	41400115 	stw	r5,4(r8)
    4030:	d8c02015 	stw	r3,128(sp)
    4034:	d8801f15 	stw	r2,124(sp)
    4038:	010001c4 	movi	r4,7
    403c:	2081f516 	blt	r4,r2,4814 <___vfprintf_internal_r+0x11e4>
    4040:	42000204 	addi	r8,r8,8
    4044:	9480010c 	andi	r18,r18,4
    4048:	90003226 	beq	r18,zero,4114 <___vfprintf_internal_r+0xae4>
    404c:	d9403117 	ldw	r5,196(sp)
    4050:	d8802917 	ldw	r2,164(sp)
    4054:	28a1c83a 	sub	r16,r5,r2
    4058:	04002e0e 	bge	zero,r16,4114 <___vfprintf_internal_r+0xae4>
    405c:	04400404 	movi	r17,16
    4060:	d8801f17 	ldw	r2,124(sp)
    4064:	8c04c40e 	bge	r17,r16,5378 <___vfprintf_internal_r+0x1d48>
    4068:	01400074 	movhi	r5,1
    406c:	29544984 	addi	r5,r5,20774
    4070:	d9403515 	stw	r5,212(sp)
    4074:	048001c4 	movi	r18,7
    4078:	dcc02d17 	ldw	r19,180(sp)
    407c:	00000306 	br	408c <___vfprintf_internal_r+0xa5c>
    4080:	843ffc04 	addi	r16,r16,-16
    4084:	42000204 	addi	r8,r8,8
    4088:	8c00130e 	bge	r17,r16,40d8 <___vfprintf_internal_r+0xaa8>
    408c:	01000074 	movhi	r4,1
    4090:	18c00404 	addi	r3,r3,16
    4094:	10800044 	addi	r2,r2,1
    4098:	21144984 	addi	r4,r4,20774
    409c:	41000015 	stw	r4,0(r8)
    40a0:	44400115 	stw	r17,4(r8)
    40a4:	d8c02015 	stw	r3,128(sp)
    40a8:	d8801f15 	stw	r2,124(sp)
    40ac:	90bff40e 	bge	r18,r2,4080 <__alt_data_end+0xfc004080>
    40b0:	d9801e04 	addi	r6,sp,120
    40b4:	b80b883a 	mov	r5,r23
    40b8:	9809883a 	mov	r4,r19
    40bc:	000af780 	call	af78 <__sprint_r>
    40c0:	103e5f1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    40c4:	843ffc04 	addi	r16,r16,-16
    40c8:	d8c02017 	ldw	r3,128(sp)
    40cc:	d8801f17 	ldw	r2,124(sp)
    40d0:	da000404 	addi	r8,sp,16
    40d4:	8c3fed16 	blt	r17,r16,408c <__alt_data_end+0xfc00408c>
    40d8:	d9403517 	ldw	r5,212(sp)
    40dc:	1c07883a 	add	r3,r3,r16
    40e0:	10800044 	addi	r2,r2,1
    40e4:	41400015 	stw	r5,0(r8)
    40e8:	44000115 	stw	r16,4(r8)
    40ec:	d8c02015 	stw	r3,128(sp)
    40f0:	d8801f15 	stw	r2,124(sp)
    40f4:	010001c4 	movi	r4,7
    40f8:	2080060e 	bge	r4,r2,4114 <___vfprintf_internal_r+0xae4>
    40fc:	d9002d17 	ldw	r4,180(sp)
    4100:	d9801e04 	addi	r6,sp,120
    4104:	b80b883a 	mov	r5,r23
    4108:	000af780 	call	af78 <__sprint_r>
    410c:	103e4c1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4110:	d8c02017 	ldw	r3,128(sp)
    4114:	d8803117 	ldw	r2,196(sp)
    4118:	d9002917 	ldw	r4,164(sp)
    411c:	1100010e 	bge	r2,r4,4124 <___vfprintf_internal_r+0xaf4>
    4120:	2005883a 	mov	r2,r4
    4124:	d9402f17 	ldw	r5,188(sp)
    4128:	288b883a 	add	r5,r5,r2
    412c:	d9402f15 	stw	r5,188(sp)
    4130:	1801c01e 	bne	r3,zero,4834 <___vfprintf_internal_r+0x1204>
    4134:	a8800007 	ldb	r2,0(r21)
    4138:	d8001f15 	stw	zero,124(sp)
    413c:	da000404 	addi	r8,sp,16
    4140:	103d751e 	bne	r2,zero,3718 <__alt_data_end+0xfc003718>
    4144:	a823883a 	mov	r17,r21
    4148:	003d8b06 	br	3778 <__alt_data_end+0xfc003778>
    414c:	8025883a 	mov	r18,r16
    4150:	dc002903 	ldbu	r16,164(sp)
    4154:	e011883a 	mov	r8,fp
    4158:	84003fcc 	andi	r16,r16,255
    415c:	8005e51e 	bne	r16,zero,58f4 <___vfprintf_internal_r+0x22c4>
    4160:	94800414 	ori	r18,r18,16
    4164:	9080080c 	andi	r2,r18,32
    4168:	10022b26 	beq	r2,zero,4a18 <___vfprintf_internal_r+0x13e8>
    416c:	d9002e17 	ldw	r4,184(sp)
    4170:	d9402a17 	ldw	r5,168(sp)
    4174:	d8002785 	stb	zero,158(sp)
    4178:	20c00204 	addi	r3,r4,8
    417c:	24c00017 	ldw	r19,0(r4)
    4180:	25800117 	ldw	r22,4(r4)
    4184:	28042e16 	blt	r5,zero,5240 <___vfprintf_internal_r+0x1c10>
    4188:	013fdfc4 	movi	r4,-129
    418c:	9d84b03a 	or	r2,r19,r22
    4190:	d8c02e15 	stw	r3,184(sp)
    4194:	9124703a 	and	r18,r18,r4
    4198:	0039883a 	mov	fp,zero
    419c:	103e801e 	bne	r2,zero,3ba0 <__alt_data_end+0xfc003ba0>
    41a0:	d9002a17 	ldw	r4,168(sp)
    41a4:	2002e01e 	bne	r4,zero,4d28 <___vfprintf_internal_r+0x16f8>
    41a8:	d8002a15 	stw	zero,168(sp)
    41ac:	d8002b15 	stw	zero,172(sp)
    41b0:	dc001e04 	addi	r16,sp,120
    41b4:	003ef506 	br	3d8c <__alt_data_end+0xfc003d8c>
    41b8:	8025883a 	mov	r18,r16
    41bc:	dc002903 	ldbu	r16,164(sp)
    41c0:	e011883a 	mov	r8,fp
    41c4:	84003fcc 	andi	r16,r16,255
    41c8:	8005ba1e 	bne	r16,zero,58b4 <___vfprintf_internal_r+0x2284>
    41cc:	01000074 	movhi	r4,1
    41d0:	21143904 	addi	r4,r4,20708
    41d4:	d9003915 	stw	r4,228(sp)
    41d8:	9080080c 	andi	r2,r18,32
    41dc:	10006126 	beq	r2,zero,4364 <___vfprintf_internal_r+0xd34>
    41e0:	d9402e17 	ldw	r5,184(sp)
    41e4:	2cc00017 	ldw	r19,0(r5)
    41e8:	2d800117 	ldw	r22,4(r5)
    41ec:	29400204 	addi	r5,r5,8
    41f0:	d9402e15 	stw	r5,184(sp)
    41f4:	9080004c 	andi	r2,r18,1
    41f8:	1001ac26 	beq	r2,zero,48ac <___vfprintf_internal_r+0x127c>
    41fc:	9d84b03a 	or	r2,r19,r22
    4200:	10038526 	beq	r2,zero,5018 <___vfprintf_internal_r+0x19e8>
    4204:	d8c02a17 	ldw	r3,168(sp)
    4208:	00800c04 	movi	r2,48
    420c:	d8802705 	stb	r2,156(sp)
    4210:	dc402745 	stb	r17,157(sp)
    4214:	d8002785 	stb	zero,158(sp)
    4218:	90800094 	ori	r2,r18,2
    421c:	18047916 	blt	r3,zero,5404 <___vfprintf_internal_r+0x1dd4>
    4220:	00bfdfc4 	movi	r2,-129
    4224:	90a4703a 	and	r18,r18,r2
    4228:	94800094 	ori	r18,r18,2
    422c:	0039883a 	mov	fp,zero
    4230:	d9003917 	ldw	r4,228(sp)
    4234:	dc001e04 	addi	r16,sp,120
    4238:	988003cc 	andi	r2,r19,15
    423c:	b006973a 	slli	r3,r22,28
    4240:	2085883a 	add	r2,r4,r2
    4244:	9826d13a 	srli	r19,r19,4
    4248:	10800003 	ldbu	r2,0(r2)
    424c:	b02cd13a 	srli	r22,r22,4
    4250:	843fffc4 	addi	r16,r16,-1
    4254:	1ce6b03a 	or	r19,r3,r19
    4258:	80800005 	stb	r2,0(r16)
    425c:	9d84b03a 	or	r2,r19,r22
    4260:	103ff51e 	bne	r2,zero,4238 <__alt_data_end+0xfc004238>
    4264:	d8c02817 	ldw	r3,160(sp)
    4268:	1c07c83a 	sub	r3,r3,r16
    426c:	d8c02b15 	stw	r3,172(sp)
    4270:	003ec606 	br	3d8c <__alt_data_end+0xfc003d8c>
    4274:	8025883a 	mov	r18,r16
    4278:	dc002903 	ldbu	r16,164(sp)
    427c:	e011883a 	mov	r8,fp
    4280:	84003fcc 	andi	r16,r16,255
    4284:	803e9626 	beq	r16,zero,3ce0 <__alt_data_end+0xfc003ce0>
    4288:	d8c02b03 	ldbu	r3,172(sp)
    428c:	d8c02785 	stb	r3,158(sp)
    4290:	003e9306 	br	3ce0 <__alt_data_end+0xfc003ce0>
    4294:	00c00044 	movi	r3,1
    4298:	d8c02905 	stb	r3,164(sp)
    429c:	00c00ac4 	movi	r3,43
    42a0:	d8c02b05 	stb	r3,172(sp)
    42a4:	ac400007 	ldb	r17,0(r21)
    42a8:	003d4306 	br	37b8 <__alt_data_end+0xfc0037b8>
    42ac:	84000814 	ori	r16,r16,32
    42b0:	ac400007 	ldb	r17,0(r21)
    42b4:	003d4006 	br	37b8 <__alt_data_end+0xfc0037b8>
    42b8:	d8802e17 	ldw	r2,184(sp)
    42bc:	8025883a 	mov	r18,r16
    42c0:	d8002785 	stb	zero,158(sp)
    42c4:	14000017 	ldw	r16,0(r2)
    42c8:	e011883a 	mov	r8,fp
    42cc:	14c00104 	addi	r19,r2,4
    42d0:	80042d26 	beq	r16,zero,5388 <___vfprintf_internal_r+0x1d58>
    42d4:	d8c02a17 	ldw	r3,168(sp)
    42d8:	1803e416 	blt	r3,zero,526c <___vfprintf_internal_r+0x1c3c>
    42dc:	180d883a 	mov	r6,r3
    42e0:	000b883a 	mov	r5,zero
    42e4:	8009883a 	mov	r4,r16
    42e8:	df003d15 	stw	fp,244(sp)
    42ec:	0008f680 	call	8f68 <memchr>
    42f0:	da003d17 	ldw	r8,244(sp)
    42f4:	10046826 	beq	r2,zero,5498 <___vfprintf_internal_r+0x1e68>
    42f8:	1405c83a 	sub	r2,r2,r16
    42fc:	d8802b15 	stw	r2,172(sp)
    4300:	1003e016 	blt	r2,zero,5284 <___vfprintf_internal_r+0x1c54>
    4304:	df002783 	ldbu	fp,158(sp)
    4308:	d8802915 	stw	r2,164(sp)
    430c:	dcc02e15 	stw	r19,184(sp)
    4310:	d8002a15 	stw	zero,168(sp)
    4314:	d8003215 	stw	zero,200(sp)
    4318:	003ea206 	br	3da4 <__alt_data_end+0xfc003da4>
    431c:	8025883a 	mov	r18,r16
    4320:	dc002903 	ldbu	r16,164(sp)
    4324:	e011883a 	mov	r8,fp
    4328:	84003fcc 	andi	r16,r16,255
    432c:	803f8d26 	beq	r16,zero,4164 <__alt_data_end+0xfc004164>
    4330:	d8c02b03 	ldbu	r3,172(sp)
    4334:	d8c02785 	stb	r3,158(sp)
    4338:	003f8a06 	br	4164 <__alt_data_end+0xfc004164>
    433c:	8025883a 	mov	r18,r16
    4340:	dc002903 	ldbu	r16,164(sp)
    4344:	e011883a 	mov	r8,fp
    4348:	84003fcc 	andi	r16,r16,255
    434c:	8005661e 	bne	r16,zero,58e8 <___vfprintf_internal_r+0x22b8>
    4350:	01000074 	movhi	r4,1
    4354:	21143e04 	addi	r4,r4,20728
    4358:	d9003915 	stw	r4,228(sp)
    435c:	9080080c 	andi	r2,r18,32
    4360:	103f9f1e 	bne	r2,zero,41e0 <__alt_data_end+0xfc0041e0>
    4364:	9080040c 	andi	r2,r18,16
    4368:	1002eb26 	beq	r2,zero,4f18 <___vfprintf_internal_r+0x18e8>
    436c:	d8802e17 	ldw	r2,184(sp)
    4370:	002d883a 	mov	r22,zero
    4374:	14c00017 	ldw	r19,0(r2)
    4378:	10800104 	addi	r2,r2,4
    437c:	d8802e15 	stw	r2,184(sp)
    4380:	003f9c06 	br	41f4 <__alt_data_end+0xfc0041f4>
    4384:	d8802b07 	ldb	r2,172(sp)
    4388:	1002e11e 	bne	r2,zero,4f10 <___vfprintf_internal_r+0x18e0>
    438c:	00c00044 	movi	r3,1
    4390:	d8c02905 	stb	r3,164(sp)
    4394:	00c00804 	movi	r3,32
    4398:	d8c02b05 	stb	r3,172(sp)
    439c:	ac400007 	ldb	r17,0(r21)
    43a0:	003d0506 	br	37b8 <__alt_data_end+0xfc0037b8>
    43a4:	84000054 	ori	r16,r16,1
    43a8:	ac400007 	ldb	r17,0(r21)
    43ac:	003d0206 	br	37b8 <__alt_data_end+0xfc0037b8>
    43b0:	8025883a 	mov	r18,r16
    43b4:	dc002903 	ldbu	r16,164(sp)
    43b8:	e011883a 	mov	r8,fp
    43bc:	84003fcc 	andi	r16,r16,255
    43c0:	803de726 	beq	r16,zero,3b60 <__alt_data_end+0xfc003b60>
    43c4:	d8c02b03 	ldbu	r3,172(sp)
    43c8:	d8c02785 	stb	r3,158(sp)
    43cc:	003de406 	br	3b60 <__alt_data_end+0xfc003b60>
    43d0:	84001014 	ori	r16,r16,64
    43d4:	ac400007 	ldb	r17,0(r21)
    43d8:	003cf706 	br	37b8 <__alt_data_end+0xfc0037b8>
    43dc:	ac400007 	ldb	r17,0(r21)
    43e0:	00801b04 	movi	r2,108
    43e4:	88838f26 	beq	r17,r2,5224 <___vfprintf_internal_r+0x1bf4>
    43e8:	84000414 	ori	r16,r16,16
    43ec:	003cf206 	br	37b8 <__alt_data_end+0xfc0037b8>
    43f0:	8025883a 	mov	r18,r16
    43f4:	dc002903 	ldbu	r16,164(sp)
    43f8:	e011883a 	mov	r8,fp
    43fc:	84003fcc 	andi	r16,r16,255
    4400:	80053f1e 	bne	r16,zero,5900 <___vfprintf_internal_r+0x22d0>
    4404:	9080080c 	andi	r2,r18,32
    4408:	1002d226 	beq	r2,zero,4f54 <___vfprintf_internal_r+0x1924>
    440c:	d9002e17 	ldw	r4,184(sp)
    4410:	d9402f17 	ldw	r5,188(sp)
    4414:	20800017 	ldw	r2,0(r4)
    4418:	2807d7fa 	srai	r3,r5,31
    441c:	21000104 	addi	r4,r4,4
    4420:	d9002e15 	stw	r4,184(sp)
    4424:	11400015 	stw	r5,0(r2)
    4428:	10c00115 	stw	r3,4(r2)
    442c:	003cb806 	br	3710 <__alt_data_end+0xfc003710>
    4430:	d8c02e17 	ldw	r3,184(sp)
    4434:	d9002e17 	ldw	r4,184(sp)
    4438:	8025883a 	mov	r18,r16
    443c:	18800017 	ldw	r2,0(r3)
    4440:	21000104 	addi	r4,r4,4
    4444:	00c00044 	movi	r3,1
    4448:	e011883a 	mov	r8,fp
    444c:	d8c02915 	stw	r3,164(sp)
    4450:	d8002785 	stb	zero,158(sp)
    4454:	d8801405 	stb	r2,80(sp)
    4458:	d9002e15 	stw	r4,184(sp)
    445c:	d8c02b15 	stw	r3,172(sp)
    4460:	d8002a15 	stw	zero,168(sp)
    4464:	d8003215 	stw	zero,200(sp)
    4468:	dc001404 	addi	r16,sp,80
    446c:	0039883a 	mov	fp,zero
    4470:	003e5306 	br	3dc0 <__alt_data_end+0xfc003dc0>
    4474:	01000074 	movhi	r4,1
    4478:	21143e04 	addi	r4,r4,20728
    447c:	0039883a 	mov	fp,zero
    4480:	d9003915 	stw	r4,228(sp)
    4484:	04401e04 	movi	r17,120
    4488:	003f6906 	br	4230 <__alt_data_end+0xfc004230>
    448c:	8025883a 	mov	r18,r16
    4490:	dc002903 	ldbu	r16,164(sp)
    4494:	e011883a 	mov	r8,fp
    4498:	84003fcc 	andi	r16,r16,255
    449c:	8005081e 	bne	r16,zero,58c0 <___vfprintf_internal_r+0x2290>
    44a0:	883d6126 	beq	r17,zero,3a28 <__alt_data_end+0xfc003a28>
    44a4:	00c00044 	movi	r3,1
    44a8:	d8c02915 	stw	r3,164(sp)
    44ac:	dc401405 	stb	r17,80(sp)
    44b0:	d8002785 	stb	zero,158(sp)
    44b4:	003fe906 	br	445c <__alt_data_end+0xfc00445c>
    44b8:	01400074 	movhi	r5,1
    44bc:	29543e04 	addi	r5,r5,20728
    44c0:	d9403915 	stw	r5,228(sp)
    44c4:	d8c02e15 	stw	r3,184(sp)
    44c8:	1025883a 	mov	r18,r2
    44cc:	04401e04 	movi	r17,120
    44d0:	9d84b03a 	or	r2,r19,r22
    44d4:	1000fc1e 	bne	r2,zero,48c8 <___vfprintf_internal_r+0x1298>
    44d8:	0039883a 	mov	fp,zero
    44dc:	00800084 	movi	r2,2
    44e0:	10803fcc 	andi	r2,r2,255
    44e4:	00c00044 	movi	r3,1
    44e8:	10c20f26 	beq	r2,r3,4d28 <___vfprintf_internal_r+0x16f8>
    44ec:	00c00084 	movi	r3,2
    44f0:	10fd3326 	beq	r2,r3,39c0 <__alt_data_end+0xfc0039c0>
    44f4:	003e0b06 	br	3d24 <__alt_data_end+0xfc003d24>
    44f8:	d8c02017 	ldw	r3,128(sp)
    44fc:	003e7106 	br	3ec4 <__alt_data_end+0xfc003ec4>
    4500:	00801944 	movi	r2,101
    4504:	14407e0e 	bge	r2,r17,4700 <___vfprintf_internal_r+0x10d0>
    4508:	d9003617 	ldw	r4,216(sp)
    450c:	d9403817 	ldw	r5,224(sp)
    4510:	000d883a 	mov	r6,zero
    4514:	000f883a 	mov	r7,zero
    4518:	d8c03c15 	stw	r3,240(sp)
    451c:	da003d15 	stw	r8,244(sp)
    4520:	000ecfc0 	call	ecfc <__eqdf2>
    4524:	d8c03c17 	ldw	r3,240(sp)
    4528:	da003d17 	ldw	r8,244(sp)
    452c:	1000f71e 	bne	r2,zero,490c <___vfprintf_internal_r+0x12dc>
    4530:	d8801f17 	ldw	r2,124(sp)
    4534:	01000074 	movhi	r4,1
    4538:	21144504 	addi	r4,r4,20756
    453c:	18c00044 	addi	r3,r3,1
    4540:	10800044 	addi	r2,r2,1
    4544:	41000015 	stw	r4,0(r8)
    4548:	01000044 	movi	r4,1
    454c:	41000115 	stw	r4,4(r8)
    4550:	d8c02015 	stw	r3,128(sp)
    4554:	d8801f15 	stw	r2,124(sp)
    4558:	010001c4 	movi	r4,7
    455c:	2082b816 	blt	r4,r2,5040 <___vfprintf_internal_r+0x1a10>
    4560:	42000204 	addi	r8,r8,8
    4564:	d8802617 	ldw	r2,152(sp)
    4568:	d9403317 	ldw	r5,204(sp)
    456c:	11400216 	blt	r2,r5,4578 <___vfprintf_internal_r+0xf48>
    4570:	9080004c 	andi	r2,r18,1
    4574:	103eb326 	beq	r2,zero,4044 <__alt_data_end+0xfc004044>
    4578:	d8803717 	ldw	r2,220(sp)
    457c:	d9003417 	ldw	r4,208(sp)
    4580:	d9403717 	ldw	r5,220(sp)
    4584:	1887883a 	add	r3,r3,r2
    4588:	d8801f17 	ldw	r2,124(sp)
    458c:	41000015 	stw	r4,0(r8)
    4590:	41400115 	stw	r5,4(r8)
    4594:	10800044 	addi	r2,r2,1
    4598:	d8c02015 	stw	r3,128(sp)
    459c:	d8801f15 	stw	r2,124(sp)
    45a0:	010001c4 	movi	r4,7
    45a4:	20832916 	blt	r4,r2,524c <___vfprintf_internal_r+0x1c1c>
    45a8:	42000204 	addi	r8,r8,8
    45ac:	d8803317 	ldw	r2,204(sp)
    45b0:	143fffc4 	addi	r16,r2,-1
    45b4:	043ea30e 	bge	zero,r16,4044 <__alt_data_end+0xfc004044>
    45b8:	04400404 	movi	r17,16
    45bc:	d8801f17 	ldw	r2,124(sp)
    45c0:	8c00880e 	bge	r17,r16,47e4 <___vfprintf_internal_r+0x11b4>
    45c4:	01400074 	movhi	r5,1
    45c8:	29544584 	addi	r5,r5,20758
    45cc:	d9402c15 	stw	r5,176(sp)
    45d0:	058001c4 	movi	r22,7
    45d4:	dcc02d17 	ldw	r19,180(sp)
    45d8:	00000306 	br	45e8 <___vfprintf_internal_r+0xfb8>
    45dc:	42000204 	addi	r8,r8,8
    45e0:	843ffc04 	addi	r16,r16,-16
    45e4:	8c00820e 	bge	r17,r16,47f0 <___vfprintf_internal_r+0x11c0>
    45e8:	18c00404 	addi	r3,r3,16
    45ec:	10800044 	addi	r2,r2,1
    45f0:	45000015 	stw	r20,0(r8)
    45f4:	44400115 	stw	r17,4(r8)
    45f8:	d8c02015 	stw	r3,128(sp)
    45fc:	d8801f15 	stw	r2,124(sp)
    4600:	b0bff60e 	bge	r22,r2,45dc <__alt_data_end+0xfc0045dc>
    4604:	d9801e04 	addi	r6,sp,120
    4608:	b80b883a 	mov	r5,r23
    460c:	9809883a 	mov	r4,r19
    4610:	000af780 	call	af78 <__sprint_r>
    4614:	103d0a1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4618:	d8c02017 	ldw	r3,128(sp)
    461c:	d8801f17 	ldw	r2,124(sp)
    4620:	da000404 	addi	r8,sp,16
    4624:	003fee06 	br	45e0 <__alt_data_end+0xfc0045e0>
    4628:	d9403117 	ldw	r5,196(sp)
    462c:	d8802917 	ldw	r2,164(sp)
    4630:	28adc83a 	sub	r22,r5,r2
    4634:	05be410e 	bge	zero,r22,3f3c <__alt_data_end+0xfc003f3c>
    4638:	07000404 	movi	fp,16
    463c:	d8801f17 	ldw	r2,124(sp)
    4640:	e5838f0e 	bge	fp,r22,5480 <___vfprintf_internal_r+0x1e50>
    4644:	01400074 	movhi	r5,1
    4648:	29544584 	addi	r5,r5,20758
    464c:	dc403015 	stw	r17,192(sp)
    4650:	d9402c15 	stw	r5,176(sp)
    4654:	b023883a 	mov	r17,r22
    4658:	04c001c4 	movi	r19,7
    465c:	a82d883a 	mov	r22,r21
    4660:	902b883a 	mov	r21,r18
    4664:	8025883a 	mov	r18,r16
    4668:	dc002d17 	ldw	r16,180(sp)
    466c:	00000306 	br	467c <___vfprintf_internal_r+0x104c>
    4670:	8c7ffc04 	addi	r17,r17,-16
    4674:	42000204 	addi	r8,r8,8
    4678:	e440110e 	bge	fp,r17,46c0 <___vfprintf_internal_r+0x1090>
    467c:	18c00404 	addi	r3,r3,16
    4680:	10800044 	addi	r2,r2,1
    4684:	45000015 	stw	r20,0(r8)
    4688:	47000115 	stw	fp,4(r8)
    468c:	d8c02015 	stw	r3,128(sp)
    4690:	d8801f15 	stw	r2,124(sp)
    4694:	98bff60e 	bge	r19,r2,4670 <__alt_data_end+0xfc004670>
    4698:	d9801e04 	addi	r6,sp,120
    469c:	b80b883a 	mov	r5,r23
    46a0:	8009883a 	mov	r4,r16
    46a4:	000af780 	call	af78 <__sprint_r>
    46a8:	103ce51e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    46ac:	8c7ffc04 	addi	r17,r17,-16
    46b0:	d8c02017 	ldw	r3,128(sp)
    46b4:	d8801f17 	ldw	r2,124(sp)
    46b8:	da000404 	addi	r8,sp,16
    46bc:	e47fef16 	blt	fp,r17,467c <__alt_data_end+0xfc00467c>
    46c0:	9021883a 	mov	r16,r18
    46c4:	a825883a 	mov	r18,r21
    46c8:	b02b883a 	mov	r21,r22
    46cc:	882d883a 	mov	r22,r17
    46d0:	dc403017 	ldw	r17,192(sp)
    46d4:	d9002c17 	ldw	r4,176(sp)
    46d8:	1d87883a 	add	r3,r3,r22
    46dc:	10800044 	addi	r2,r2,1
    46e0:	41000015 	stw	r4,0(r8)
    46e4:	45800115 	stw	r22,4(r8)
    46e8:	d8c02015 	stw	r3,128(sp)
    46ec:	d8801f15 	stw	r2,124(sp)
    46f0:	010001c4 	movi	r4,7
    46f4:	20818e16 	blt	r4,r2,4d30 <___vfprintf_internal_r+0x1700>
    46f8:	42000204 	addi	r8,r8,8
    46fc:	003e0f06 	br	3f3c <__alt_data_end+0xfc003f3c>
    4700:	d9403317 	ldw	r5,204(sp)
    4704:	00800044 	movi	r2,1
    4708:	18c00044 	addi	r3,r3,1
    470c:	1141530e 	bge	r2,r5,4c5c <___vfprintf_internal_r+0x162c>
    4710:	dc401f17 	ldw	r17,124(sp)
    4714:	00800044 	movi	r2,1
    4718:	40800115 	stw	r2,4(r8)
    471c:	8c400044 	addi	r17,r17,1
    4720:	44000015 	stw	r16,0(r8)
    4724:	d8c02015 	stw	r3,128(sp)
    4728:	dc401f15 	stw	r17,124(sp)
    472c:	008001c4 	movi	r2,7
    4730:	14416b16 	blt	r2,r17,4ce0 <___vfprintf_internal_r+0x16b0>
    4734:	42000204 	addi	r8,r8,8
    4738:	d8803717 	ldw	r2,220(sp)
    473c:	d9003417 	ldw	r4,208(sp)
    4740:	8c400044 	addi	r17,r17,1
    4744:	10c7883a 	add	r3,r2,r3
    4748:	40800115 	stw	r2,4(r8)
    474c:	41000015 	stw	r4,0(r8)
    4750:	d8c02015 	stw	r3,128(sp)
    4754:	dc401f15 	stw	r17,124(sp)
    4758:	008001c4 	movi	r2,7
    475c:	14416916 	blt	r2,r17,4d04 <___vfprintf_internal_r+0x16d4>
    4760:	45800204 	addi	r22,r8,8
    4764:	d9003617 	ldw	r4,216(sp)
    4768:	d9403817 	ldw	r5,224(sp)
    476c:	000d883a 	mov	r6,zero
    4770:	000f883a 	mov	r7,zero
    4774:	d8c03c15 	stw	r3,240(sp)
    4778:	000ecfc0 	call	ecfc <__eqdf2>
    477c:	d8c03c17 	ldw	r3,240(sp)
    4780:	1000bc26 	beq	r2,zero,4a74 <___vfprintf_internal_r+0x1444>
    4784:	d9403317 	ldw	r5,204(sp)
    4788:	84000044 	addi	r16,r16,1
    478c:	8c400044 	addi	r17,r17,1
    4790:	28bfffc4 	addi	r2,r5,-1
    4794:	1887883a 	add	r3,r3,r2
    4798:	b0800115 	stw	r2,4(r22)
    479c:	b4000015 	stw	r16,0(r22)
    47a0:	d8c02015 	stw	r3,128(sp)
    47a4:	dc401f15 	stw	r17,124(sp)
    47a8:	008001c4 	movi	r2,7
    47ac:	14414316 	blt	r2,r17,4cbc <___vfprintf_internal_r+0x168c>
    47b0:	b5800204 	addi	r22,r22,8
    47b4:	d9003a17 	ldw	r4,232(sp)
    47b8:	df0022c4 	addi	fp,sp,139
    47bc:	8c400044 	addi	r17,r17,1
    47c0:	20c7883a 	add	r3,r4,r3
    47c4:	b7000015 	stw	fp,0(r22)
    47c8:	b1000115 	stw	r4,4(r22)
    47cc:	d8c02015 	stw	r3,128(sp)
    47d0:	dc401f15 	stw	r17,124(sp)
    47d4:	008001c4 	movi	r2,7
    47d8:	14400e16 	blt	r2,r17,4814 <___vfprintf_internal_r+0x11e4>
    47dc:	b2000204 	addi	r8,r22,8
    47e0:	003e1806 	br	4044 <__alt_data_end+0xfc004044>
    47e4:	01000074 	movhi	r4,1
    47e8:	21144584 	addi	r4,r4,20758
    47ec:	d9002c15 	stw	r4,176(sp)
    47f0:	d9002c17 	ldw	r4,176(sp)
    47f4:	1c07883a 	add	r3,r3,r16
    47f8:	44000115 	stw	r16,4(r8)
    47fc:	41000015 	stw	r4,0(r8)
    4800:	10800044 	addi	r2,r2,1
    4804:	d8c02015 	stw	r3,128(sp)
    4808:	d8801f15 	stw	r2,124(sp)
    480c:	010001c4 	movi	r4,7
    4810:	20be0b0e 	bge	r4,r2,4040 <__alt_data_end+0xfc004040>
    4814:	d9002d17 	ldw	r4,180(sp)
    4818:	d9801e04 	addi	r6,sp,120
    481c:	b80b883a 	mov	r5,r23
    4820:	000af780 	call	af78 <__sprint_r>
    4824:	103c861e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4828:	d8c02017 	ldw	r3,128(sp)
    482c:	da000404 	addi	r8,sp,16
    4830:	003e0406 	br	4044 <__alt_data_end+0xfc004044>
    4834:	d9002d17 	ldw	r4,180(sp)
    4838:	d9801e04 	addi	r6,sp,120
    483c:	b80b883a 	mov	r5,r23
    4840:	000af780 	call	af78 <__sprint_r>
    4844:	103e3b26 	beq	r2,zero,4134 <__alt_data_end+0xfc004134>
    4848:	003c7d06 	br	3a40 <__alt_data_end+0xfc003a40>
    484c:	d9002d17 	ldw	r4,180(sp)
    4850:	d9801e04 	addi	r6,sp,120
    4854:	b80b883a 	mov	r5,r23
    4858:	000af780 	call	af78 <__sprint_r>
    485c:	103c781e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4860:	d8c02017 	ldw	r3,128(sp)
    4864:	da000404 	addi	r8,sp,16
    4868:	003de906 	br	4010 <__alt_data_end+0xfc004010>
    486c:	d9002d17 	ldw	r4,180(sp)
    4870:	d9801e04 	addi	r6,sp,120
    4874:	b80b883a 	mov	r5,r23
    4878:	000af780 	call	af78 <__sprint_r>
    487c:	103c701e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4880:	d8c02017 	ldw	r3,128(sp)
    4884:	da000404 	addi	r8,sp,16
    4888:	003d9b06 	br	3ef8 <__alt_data_end+0xfc003ef8>
    488c:	d9002d17 	ldw	r4,180(sp)
    4890:	d9801e04 	addi	r6,sp,120
    4894:	b80b883a 	mov	r5,r23
    4898:	000af780 	call	af78 <__sprint_r>
    489c:	103c681e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    48a0:	d8c02017 	ldw	r3,128(sp)
    48a4:	da000404 	addi	r8,sp,16
    48a8:	003da106 	br	3f30 <__alt_data_end+0xfc003f30>
    48ac:	d9402a17 	ldw	r5,168(sp)
    48b0:	d8002785 	stb	zero,158(sp)
    48b4:	283f0616 	blt	r5,zero,44d0 <__alt_data_end+0xfc0044d0>
    48b8:	00ffdfc4 	movi	r3,-129
    48bc:	9d84b03a 	or	r2,r19,r22
    48c0:	90e4703a 	and	r18,r18,r3
    48c4:	103c3b26 	beq	r2,zero,39b4 <__alt_data_end+0xfc0039b4>
    48c8:	0039883a 	mov	fp,zero
    48cc:	003e5806 	br	4230 <__alt_data_end+0xfc004230>
    48d0:	9080040c 	andi	r2,r18,16
    48d4:	1001b326 	beq	r2,zero,4fa4 <___vfprintf_internal_r+0x1974>
    48d8:	d8c02e17 	ldw	r3,184(sp)
    48dc:	d9002a17 	ldw	r4,168(sp)
    48e0:	d8002785 	stb	zero,158(sp)
    48e4:	18800104 	addi	r2,r3,4
    48e8:	1cc00017 	ldw	r19,0(r3)
    48ec:	002d883a 	mov	r22,zero
    48f0:	2001b516 	blt	r4,zero,4fc8 <___vfprintf_internal_r+0x1998>
    48f4:	00ffdfc4 	movi	r3,-129
    48f8:	d8802e15 	stw	r2,184(sp)
    48fc:	90e4703a 	and	r18,r18,r3
    4900:	983d0526 	beq	r19,zero,3d18 <__alt_data_end+0xfc003d18>
    4904:	0039883a 	mov	fp,zero
    4908:	003d0806 	br	3d2c <__alt_data_end+0xfc003d2c>
    490c:	dc402617 	ldw	r17,152(sp)
    4910:	0441d30e 	bge	zero,r17,5060 <___vfprintf_internal_r+0x1a30>
    4914:	dc403217 	ldw	r17,200(sp)
    4918:	d8803317 	ldw	r2,204(sp)
    491c:	1440010e 	bge	r2,r17,4924 <___vfprintf_internal_r+0x12f4>
    4920:	1023883a 	mov	r17,r2
    4924:	04400a0e 	bge	zero,r17,4950 <___vfprintf_internal_r+0x1320>
    4928:	d8801f17 	ldw	r2,124(sp)
    492c:	1c47883a 	add	r3,r3,r17
    4930:	44000015 	stw	r16,0(r8)
    4934:	10800044 	addi	r2,r2,1
    4938:	44400115 	stw	r17,4(r8)
    493c:	d8c02015 	stw	r3,128(sp)
    4940:	d8801f15 	stw	r2,124(sp)
    4944:	010001c4 	movi	r4,7
    4948:	20826516 	blt	r4,r2,52e0 <___vfprintf_internal_r+0x1cb0>
    494c:	42000204 	addi	r8,r8,8
    4950:	88026116 	blt	r17,zero,52d8 <___vfprintf_internal_r+0x1ca8>
    4954:	d9003217 	ldw	r4,200(sp)
    4958:	2463c83a 	sub	r17,r4,r17
    495c:	04407b0e 	bge	zero,r17,4b4c <___vfprintf_internal_r+0x151c>
    4960:	05800404 	movi	r22,16
    4964:	d8801f17 	ldw	r2,124(sp)
    4968:	b4419d0e 	bge	r22,r17,4fe0 <___vfprintf_internal_r+0x19b0>
    496c:	01000074 	movhi	r4,1
    4970:	21144584 	addi	r4,r4,20758
    4974:	d9002c15 	stw	r4,176(sp)
    4978:	070001c4 	movi	fp,7
    497c:	dcc02d17 	ldw	r19,180(sp)
    4980:	00000306 	br	4990 <___vfprintf_internal_r+0x1360>
    4984:	42000204 	addi	r8,r8,8
    4988:	8c7ffc04 	addi	r17,r17,-16
    498c:	b441970e 	bge	r22,r17,4fec <___vfprintf_internal_r+0x19bc>
    4990:	18c00404 	addi	r3,r3,16
    4994:	10800044 	addi	r2,r2,1
    4998:	45000015 	stw	r20,0(r8)
    499c:	45800115 	stw	r22,4(r8)
    49a0:	d8c02015 	stw	r3,128(sp)
    49a4:	d8801f15 	stw	r2,124(sp)
    49a8:	e0bff60e 	bge	fp,r2,4984 <__alt_data_end+0xfc004984>
    49ac:	d9801e04 	addi	r6,sp,120
    49b0:	b80b883a 	mov	r5,r23
    49b4:	9809883a 	mov	r4,r19
    49b8:	000af780 	call	af78 <__sprint_r>
    49bc:	103c201e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    49c0:	d8c02017 	ldw	r3,128(sp)
    49c4:	d8801f17 	ldw	r2,124(sp)
    49c8:	da000404 	addi	r8,sp,16
    49cc:	003fee06 	br	4988 <__alt_data_end+0xfc004988>
    49d0:	d9002d17 	ldw	r4,180(sp)
    49d4:	d9801e04 	addi	r6,sp,120
    49d8:	b80b883a 	mov	r5,r23
    49dc:	000af780 	call	af78 <__sprint_r>
    49e0:	103c171e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    49e4:	d8c02017 	ldw	r3,128(sp)
    49e8:	df002787 	ldb	fp,158(sp)
    49ec:	da000404 	addi	r8,sp,16
    49f0:	003d3406 	br	3ec4 <__alt_data_end+0xfc003ec4>
    49f4:	9080040c 	andi	r2,r18,16
    49f8:	10016126 	beq	r2,zero,4f80 <___vfprintf_internal_r+0x1950>
    49fc:	d9402e17 	ldw	r5,184(sp)
    4a00:	2cc00017 	ldw	r19,0(r5)
    4a04:	29400104 	addi	r5,r5,4
    4a08:	d9402e15 	stw	r5,184(sp)
    4a0c:	982dd7fa 	srai	r22,r19,31
    4a10:	b005883a 	mov	r2,r22
    4a14:	003c5a06 	br	3b80 <__alt_data_end+0xfc003b80>
    4a18:	9080040c 	andi	r2,r18,16
    4a1c:	10003526 	beq	r2,zero,4af4 <___vfprintf_internal_r+0x14c4>
    4a20:	d8c02e17 	ldw	r3,184(sp)
    4a24:	d9002a17 	ldw	r4,168(sp)
    4a28:	d8002785 	stb	zero,158(sp)
    4a2c:	18800104 	addi	r2,r3,4
    4a30:	1cc00017 	ldw	r19,0(r3)
    4a34:	002d883a 	mov	r22,zero
    4a38:	20003716 	blt	r4,zero,4b18 <___vfprintf_internal_r+0x14e8>
    4a3c:	00ffdfc4 	movi	r3,-129
    4a40:	d8802e15 	stw	r2,184(sp)
    4a44:	90e4703a 	and	r18,r18,r3
    4a48:	0039883a 	mov	fp,zero
    4a4c:	983dd426 	beq	r19,zero,41a0 <__alt_data_end+0xfc0041a0>
    4a50:	00800244 	movi	r2,9
    4a54:	14fc5336 	bltu	r2,r19,3ba4 <__alt_data_end+0xfc003ba4>
    4a58:	d8c02817 	ldw	r3,160(sp)
    4a5c:	dc001dc4 	addi	r16,sp,119
    4a60:	9cc00c04 	addi	r19,r19,48
    4a64:	1c07c83a 	sub	r3,r3,r16
    4a68:	dcc01dc5 	stb	r19,119(sp)
    4a6c:	d8c02b15 	stw	r3,172(sp)
    4a70:	003cc606 	br	3d8c <__alt_data_end+0xfc003d8c>
    4a74:	d8803317 	ldw	r2,204(sp)
    4a78:	143fffc4 	addi	r16,r2,-1
    4a7c:	043f4d0e 	bge	zero,r16,47b4 <__alt_data_end+0xfc0047b4>
    4a80:	07000404 	movi	fp,16
    4a84:	e400810e 	bge	fp,r16,4c8c <___vfprintf_internal_r+0x165c>
    4a88:	01400074 	movhi	r5,1
    4a8c:	29544584 	addi	r5,r5,20758
    4a90:	d9402c15 	stw	r5,176(sp)
    4a94:	01c001c4 	movi	r7,7
    4a98:	dcc02d17 	ldw	r19,180(sp)
    4a9c:	00000306 	br	4aac <___vfprintf_internal_r+0x147c>
    4aa0:	b5800204 	addi	r22,r22,8
    4aa4:	843ffc04 	addi	r16,r16,-16
    4aa8:	e4007b0e 	bge	fp,r16,4c98 <___vfprintf_internal_r+0x1668>
    4aac:	18c00404 	addi	r3,r3,16
    4ab0:	8c400044 	addi	r17,r17,1
    4ab4:	b5000015 	stw	r20,0(r22)
    4ab8:	b7000115 	stw	fp,4(r22)
    4abc:	d8c02015 	stw	r3,128(sp)
    4ac0:	dc401f15 	stw	r17,124(sp)
    4ac4:	3c7ff60e 	bge	r7,r17,4aa0 <__alt_data_end+0xfc004aa0>
    4ac8:	d9801e04 	addi	r6,sp,120
    4acc:	b80b883a 	mov	r5,r23
    4ad0:	9809883a 	mov	r4,r19
    4ad4:	d9c03c15 	stw	r7,240(sp)
    4ad8:	000af780 	call	af78 <__sprint_r>
    4adc:	d9c03c17 	ldw	r7,240(sp)
    4ae0:	103bd71e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4ae4:	d8c02017 	ldw	r3,128(sp)
    4ae8:	dc401f17 	ldw	r17,124(sp)
    4aec:	dd800404 	addi	r22,sp,16
    4af0:	003fec06 	br	4aa4 <__alt_data_end+0xfc004aa4>
    4af4:	9080100c 	andi	r2,r18,64
    4af8:	d8002785 	stb	zero,158(sp)
    4afc:	10010e26 	beq	r2,zero,4f38 <___vfprintf_internal_r+0x1908>
    4b00:	d9402e17 	ldw	r5,184(sp)
    4b04:	d8c02a17 	ldw	r3,168(sp)
    4b08:	002d883a 	mov	r22,zero
    4b0c:	28800104 	addi	r2,r5,4
    4b10:	2cc0000b 	ldhu	r19,0(r5)
    4b14:	183fc90e 	bge	r3,zero,4a3c <__alt_data_end+0xfc004a3c>
    4b18:	d8802e15 	stw	r2,184(sp)
    4b1c:	0039883a 	mov	fp,zero
    4b20:	9d84b03a 	or	r2,r19,r22
    4b24:	103c1e1e 	bne	r2,zero,3ba0 <__alt_data_end+0xfc003ba0>
    4b28:	00800044 	movi	r2,1
    4b2c:	003e6c06 	br	44e0 <__alt_data_end+0xfc0044e0>
    4b30:	d9002d17 	ldw	r4,180(sp)
    4b34:	d9801e04 	addi	r6,sp,120
    4b38:	b80b883a 	mov	r5,r23
    4b3c:	000af780 	call	af78 <__sprint_r>
    4b40:	103bbf1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4b44:	d8c02017 	ldw	r3,128(sp)
    4b48:	da000404 	addi	r8,sp,16
    4b4c:	d9003217 	ldw	r4,200(sp)
    4b50:	d8802617 	ldw	r2,152(sp)
    4b54:	d9403317 	ldw	r5,204(sp)
    4b58:	8123883a 	add	r17,r16,r4
    4b5c:	11400216 	blt	r2,r5,4b68 <___vfprintf_internal_r+0x1538>
    4b60:	9100004c 	andi	r4,r18,1
    4b64:	20000d26 	beq	r4,zero,4b9c <___vfprintf_internal_r+0x156c>
    4b68:	d9003717 	ldw	r4,220(sp)
    4b6c:	d9403417 	ldw	r5,208(sp)
    4b70:	1907883a 	add	r3,r3,r4
    4b74:	d9001f17 	ldw	r4,124(sp)
    4b78:	41400015 	stw	r5,0(r8)
    4b7c:	d9403717 	ldw	r5,220(sp)
    4b80:	21000044 	addi	r4,r4,1
    4b84:	d8c02015 	stw	r3,128(sp)
    4b88:	41400115 	stw	r5,4(r8)
    4b8c:	d9001f15 	stw	r4,124(sp)
    4b90:	014001c4 	movi	r5,7
    4b94:	2901e816 	blt	r5,r4,5338 <___vfprintf_internal_r+0x1d08>
    4b98:	42000204 	addi	r8,r8,8
    4b9c:	d9003317 	ldw	r4,204(sp)
    4ba0:	8121883a 	add	r16,r16,r4
    4ba4:	2085c83a 	sub	r2,r4,r2
    4ba8:	8461c83a 	sub	r16,r16,r17
    4bac:	1400010e 	bge	r2,r16,4bb4 <___vfprintf_internal_r+0x1584>
    4bb0:	1021883a 	mov	r16,r2
    4bb4:	04000a0e 	bge	zero,r16,4be0 <___vfprintf_internal_r+0x15b0>
    4bb8:	d9001f17 	ldw	r4,124(sp)
    4bbc:	1c07883a 	add	r3,r3,r16
    4bc0:	44400015 	stw	r17,0(r8)
    4bc4:	21000044 	addi	r4,r4,1
    4bc8:	44000115 	stw	r16,4(r8)
    4bcc:	d8c02015 	stw	r3,128(sp)
    4bd0:	d9001f15 	stw	r4,124(sp)
    4bd4:	014001c4 	movi	r5,7
    4bd8:	2901fb16 	blt	r5,r4,53c8 <___vfprintf_internal_r+0x1d98>
    4bdc:	42000204 	addi	r8,r8,8
    4be0:	8001f716 	blt	r16,zero,53c0 <___vfprintf_internal_r+0x1d90>
    4be4:	1421c83a 	sub	r16,r2,r16
    4be8:	043d160e 	bge	zero,r16,4044 <__alt_data_end+0xfc004044>
    4bec:	04400404 	movi	r17,16
    4bf0:	d8801f17 	ldw	r2,124(sp)
    4bf4:	8c3efb0e 	bge	r17,r16,47e4 <__alt_data_end+0xfc0047e4>
    4bf8:	01400074 	movhi	r5,1
    4bfc:	29544584 	addi	r5,r5,20758
    4c00:	d9402c15 	stw	r5,176(sp)
    4c04:	058001c4 	movi	r22,7
    4c08:	dcc02d17 	ldw	r19,180(sp)
    4c0c:	00000306 	br	4c1c <___vfprintf_internal_r+0x15ec>
    4c10:	42000204 	addi	r8,r8,8
    4c14:	843ffc04 	addi	r16,r16,-16
    4c18:	8c3ef50e 	bge	r17,r16,47f0 <__alt_data_end+0xfc0047f0>
    4c1c:	18c00404 	addi	r3,r3,16
    4c20:	10800044 	addi	r2,r2,1
    4c24:	45000015 	stw	r20,0(r8)
    4c28:	44400115 	stw	r17,4(r8)
    4c2c:	d8c02015 	stw	r3,128(sp)
    4c30:	d8801f15 	stw	r2,124(sp)
    4c34:	b0bff60e 	bge	r22,r2,4c10 <__alt_data_end+0xfc004c10>
    4c38:	d9801e04 	addi	r6,sp,120
    4c3c:	b80b883a 	mov	r5,r23
    4c40:	9809883a 	mov	r4,r19
    4c44:	000af780 	call	af78 <__sprint_r>
    4c48:	103b7d1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4c4c:	d8c02017 	ldw	r3,128(sp)
    4c50:	d8801f17 	ldw	r2,124(sp)
    4c54:	da000404 	addi	r8,sp,16
    4c58:	003fee06 	br	4c14 <__alt_data_end+0xfc004c14>
    4c5c:	9088703a 	and	r4,r18,r2
    4c60:	203eab1e 	bne	r4,zero,4710 <__alt_data_end+0xfc004710>
    4c64:	dc401f17 	ldw	r17,124(sp)
    4c68:	40800115 	stw	r2,4(r8)
    4c6c:	44000015 	stw	r16,0(r8)
    4c70:	8c400044 	addi	r17,r17,1
    4c74:	d8c02015 	stw	r3,128(sp)
    4c78:	dc401f15 	stw	r17,124(sp)
    4c7c:	008001c4 	movi	r2,7
    4c80:	14400e16 	blt	r2,r17,4cbc <___vfprintf_internal_r+0x168c>
    4c84:	45800204 	addi	r22,r8,8
    4c88:	003eca06 	br	47b4 <__alt_data_end+0xfc0047b4>
    4c8c:	01000074 	movhi	r4,1
    4c90:	21144584 	addi	r4,r4,20758
    4c94:	d9002c15 	stw	r4,176(sp)
    4c98:	d8802c17 	ldw	r2,176(sp)
    4c9c:	1c07883a 	add	r3,r3,r16
    4ca0:	8c400044 	addi	r17,r17,1
    4ca4:	b0800015 	stw	r2,0(r22)
    4ca8:	b4000115 	stw	r16,4(r22)
    4cac:	d8c02015 	stw	r3,128(sp)
    4cb0:	dc401f15 	stw	r17,124(sp)
    4cb4:	008001c4 	movi	r2,7
    4cb8:	147ebd0e 	bge	r2,r17,47b0 <__alt_data_end+0xfc0047b0>
    4cbc:	d9002d17 	ldw	r4,180(sp)
    4cc0:	d9801e04 	addi	r6,sp,120
    4cc4:	b80b883a 	mov	r5,r23
    4cc8:	000af780 	call	af78 <__sprint_r>
    4ccc:	103b5c1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4cd0:	d8c02017 	ldw	r3,128(sp)
    4cd4:	dc401f17 	ldw	r17,124(sp)
    4cd8:	dd800404 	addi	r22,sp,16
    4cdc:	003eb506 	br	47b4 <__alt_data_end+0xfc0047b4>
    4ce0:	d9002d17 	ldw	r4,180(sp)
    4ce4:	d9801e04 	addi	r6,sp,120
    4ce8:	b80b883a 	mov	r5,r23
    4cec:	000af780 	call	af78 <__sprint_r>
    4cf0:	103b531e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4cf4:	d8c02017 	ldw	r3,128(sp)
    4cf8:	dc401f17 	ldw	r17,124(sp)
    4cfc:	da000404 	addi	r8,sp,16
    4d00:	003e8d06 	br	4738 <__alt_data_end+0xfc004738>
    4d04:	d9002d17 	ldw	r4,180(sp)
    4d08:	d9801e04 	addi	r6,sp,120
    4d0c:	b80b883a 	mov	r5,r23
    4d10:	000af780 	call	af78 <__sprint_r>
    4d14:	103b4a1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4d18:	d8c02017 	ldw	r3,128(sp)
    4d1c:	dc401f17 	ldw	r17,124(sp)
    4d20:	dd800404 	addi	r22,sp,16
    4d24:	003e8f06 	br	4764 <__alt_data_end+0xfc004764>
    4d28:	0027883a 	mov	r19,zero
    4d2c:	003f4a06 	br	4a58 <__alt_data_end+0xfc004a58>
    4d30:	d9002d17 	ldw	r4,180(sp)
    4d34:	d9801e04 	addi	r6,sp,120
    4d38:	b80b883a 	mov	r5,r23
    4d3c:	000af780 	call	af78 <__sprint_r>
    4d40:	103b3f1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    4d44:	d8c02017 	ldw	r3,128(sp)
    4d48:	da000404 	addi	r8,sp,16
    4d4c:	003c7b06 	br	3f3c <__alt_data_end+0xfc003f3c>
    4d50:	d9402a17 	ldw	r5,168(sp)
    4d54:	04e7c83a 	sub	r19,zero,r19
    4d58:	07000b44 	movi	fp,45
    4d5c:	9804c03a 	cmpne	r2,r19,zero
    4d60:	05adc83a 	sub	r22,zero,r22
    4d64:	df002785 	stb	fp,158(sp)
    4d68:	b0adc83a 	sub	r22,r22,r2
    4d6c:	28017b16 	blt	r5,zero,535c <___vfprintf_internal_r+0x1d2c>
    4d70:	00bfdfc4 	movi	r2,-129
    4d74:	90a4703a 	and	r18,r18,r2
    4d78:	003b8906 	br	3ba0 <__alt_data_end+0xfc003ba0>
    4d7c:	d9003617 	ldw	r4,216(sp)
    4d80:	d9403817 	ldw	r5,224(sp)
    4d84:	da003d15 	stw	r8,244(sp)
    4d88:	000ab9c0 	call	ab9c <__fpclassifyd>
    4d8c:	da003d17 	ldw	r8,244(sp)
    4d90:	1000f026 	beq	r2,zero,5154 <___vfprintf_internal_r+0x1b24>
    4d94:	d9002a17 	ldw	r4,168(sp)
    4d98:	05bff7c4 	movi	r22,-33
    4d9c:	00bfffc4 	movi	r2,-1
    4da0:	8dac703a 	and	r22,r17,r22
    4da4:	20820026 	beq	r4,r2,55a8 <___vfprintf_internal_r+0x1f78>
    4da8:	008011c4 	movi	r2,71
    4dac:	b081f726 	beq	r22,r2,558c <___vfprintf_internal_r+0x1f5c>
    4db0:	d9003817 	ldw	r4,224(sp)
    4db4:	90c04014 	ori	r3,r18,256
    4db8:	d8c02c15 	stw	r3,176(sp)
    4dbc:	20021516 	blt	r4,zero,5614 <___vfprintf_internal_r+0x1fe4>
    4dc0:	dcc03817 	ldw	r19,224(sp)
    4dc4:	d8002905 	stb	zero,164(sp)
    4dc8:	00801984 	movi	r2,102
    4dcc:	8881f926 	beq	r17,r2,55b4 <___vfprintf_internal_r+0x1f84>
    4dd0:	00801184 	movi	r2,70
    4dd4:	88821c26 	beq	r17,r2,5648 <___vfprintf_internal_r+0x2018>
    4dd8:	00801144 	movi	r2,69
    4ddc:	b081ef26 	beq	r22,r2,559c <___vfprintf_internal_r+0x1f6c>
    4de0:	d8c02a17 	ldw	r3,168(sp)
    4de4:	d8802104 	addi	r2,sp,132
    4de8:	d8800315 	stw	r2,12(sp)
    4dec:	d9403617 	ldw	r5,216(sp)
    4df0:	d8802504 	addi	r2,sp,148
    4df4:	d9002d17 	ldw	r4,180(sp)
    4df8:	d8800215 	stw	r2,8(sp)
    4dfc:	d8802604 	addi	r2,sp,152
    4e00:	d8c00015 	stw	r3,0(sp)
    4e04:	d8800115 	stw	r2,4(sp)
    4e08:	01c00084 	movi	r7,2
    4e0c:	980d883a 	mov	r6,r19
    4e10:	d8c03c15 	stw	r3,240(sp)
    4e14:	da003d15 	stw	r8,244(sp)
    4e18:	0005d600 	call	5d60 <_dtoa_r>
    4e1c:	1021883a 	mov	r16,r2
    4e20:	008019c4 	movi	r2,103
    4e24:	d8c03c17 	ldw	r3,240(sp)
    4e28:	da003d17 	ldw	r8,244(sp)
    4e2c:	88817126 	beq	r17,r2,53f4 <___vfprintf_internal_r+0x1dc4>
    4e30:	008011c4 	movi	r2,71
    4e34:	88829126 	beq	r17,r2,587c <___vfprintf_internal_r+0x224c>
    4e38:	80f9883a 	add	fp,r16,r3
    4e3c:	d9003617 	ldw	r4,216(sp)
    4e40:	000d883a 	mov	r6,zero
    4e44:	000f883a 	mov	r7,zero
    4e48:	980b883a 	mov	r5,r19
    4e4c:	da003d15 	stw	r8,244(sp)
    4e50:	000ecfc0 	call	ecfc <__eqdf2>
    4e54:	da003d17 	ldw	r8,244(sp)
    4e58:	10018d26 	beq	r2,zero,5490 <___vfprintf_internal_r+0x1e60>
    4e5c:	d8802117 	ldw	r2,132(sp)
    4e60:	1700062e 	bgeu	r2,fp,4e7c <___vfprintf_internal_r+0x184c>
    4e64:	01000c04 	movi	r4,48
    4e68:	10c00044 	addi	r3,r2,1
    4e6c:	d8c02115 	stw	r3,132(sp)
    4e70:	11000005 	stb	r4,0(r2)
    4e74:	d8802117 	ldw	r2,132(sp)
    4e78:	173ffb36 	bltu	r2,fp,4e68 <__alt_data_end+0xfc004e68>
    4e7c:	1405c83a 	sub	r2,r2,r16
    4e80:	d8803315 	stw	r2,204(sp)
    4e84:	008011c4 	movi	r2,71
    4e88:	b0817626 	beq	r22,r2,5464 <___vfprintf_internal_r+0x1e34>
    4e8c:	00801944 	movi	r2,101
    4e90:	1442800e 	bge	r2,r17,5894 <___vfprintf_internal_r+0x2264>
    4e94:	d8c02617 	ldw	r3,152(sp)
    4e98:	00801984 	movi	r2,102
    4e9c:	d8c03215 	stw	r3,200(sp)
    4ea0:	8881fe26 	beq	r17,r2,569c <___vfprintf_internal_r+0x206c>
    4ea4:	d8c03217 	ldw	r3,200(sp)
    4ea8:	d9003317 	ldw	r4,204(sp)
    4eac:	1901dd16 	blt	r3,r4,5624 <___vfprintf_internal_r+0x1ff4>
    4eb0:	9480004c 	andi	r18,r18,1
    4eb4:	90022b1e 	bne	r18,zero,5764 <___vfprintf_internal_r+0x2134>
    4eb8:	1805883a 	mov	r2,r3
    4ebc:	18028316 	blt	r3,zero,58cc <___vfprintf_internal_r+0x229c>
    4ec0:	d8c03217 	ldw	r3,200(sp)
    4ec4:	044019c4 	movi	r17,103
    4ec8:	d8c02b15 	stw	r3,172(sp)
    4ecc:	df002907 	ldb	fp,164(sp)
    4ed0:	e001531e 	bne	fp,zero,5420 <___vfprintf_internal_r+0x1df0>
    4ed4:	df002783 	ldbu	fp,158(sp)
    4ed8:	d8802915 	stw	r2,164(sp)
    4edc:	dc802c17 	ldw	r18,176(sp)
    4ee0:	d8002a15 	stw	zero,168(sp)
    4ee4:	003baf06 	br	3da4 <__alt_data_end+0xfc003da4>
    4ee8:	d8c02e17 	ldw	r3,184(sp)
    4eec:	d9002e17 	ldw	r4,184(sp)
    4ef0:	d9402e17 	ldw	r5,184(sp)
    4ef4:	18c00017 	ldw	r3,0(r3)
    4ef8:	21000117 	ldw	r4,4(r4)
    4efc:	29400204 	addi	r5,r5,8
    4f00:	d8c03615 	stw	r3,216(sp)
    4f04:	d9003815 	stw	r4,224(sp)
    4f08:	d9402e15 	stw	r5,184(sp)
    4f0c:	003b5006 	br	3c50 <__alt_data_end+0xfc003c50>
    4f10:	ac400007 	ldb	r17,0(r21)
    4f14:	003a2806 	br	37b8 <__alt_data_end+0xfc0037b8>
    4f18:	9080100c 	andi	r2,r18,64
    4f1c:	1000a826 	beq	r2,zero,51c0 <___vfprintf_internal_r+0x1b90>
    4f20:	d8c02e17 	ldw	r3,184(sp)
    4f24:	002d883a 	mov	r22,zero
    4f28:	1cc0000b 	ldhu	r19,0(r3)
    4f2c:	18c00104 	addi	r3,r3,4
    4f30:	d8c02e15 	stw	r3,184(sp)
    4f34:	003caf06 	br	41f4 <__alt_data_end+0xfc0041f4>
    4f38:	d9002e17 	ldw	r4,184(sp)
    4f3c:	d9402a17 	ldw	r5,168(sp)
    4f40:	002d883a 	mov	r22,zero
    4f44:	20800104 	addi	r2,r4,4
    4f48:	24c00017 	ldw	r19,0(r4)
    4f4c:	283ebb0e 	bge	r5,zero,4a3c <__alt_data_end+0xfc004a3c>
    4f50:	003ef106 	br	4b18 <__alt_data_end+0xfc004b18>
    4f54:	9080040c 	andi	r2,r18,16
    4f58:	1000921e 	bne	r2,zero,51a4 <___vfprintf_internal_r+0x1b74>
    4f5c:	9480100c 	andi	r18,r18,64
    4f60:	90013926 	beq	r18,zero,5448 <___vfprintf_internal_r+0x1e18>
    4f64:	d9402e17 	ldw	r5,184(sp)
    4f68:	d8c02f17 	ldw	r3,188(sp)
    4f6c:	28800017 	ldw	r2,0(r5)
    4f70:	29400104 	addi	r5,r5,4
    4f74:	d9402e15 	stw	r5,184(sp)
    4f78:	10c0000d 	sth	r3,0(r2)
    4f7c:	0039e406 	br	3710 <__alt_data_end+0xfc003710>
    4f80:	9080100c 	andi	r2,r18,64
    4f84:	10008026 	beq	r2,zero,5188 <___vfprintf_internal_r+0x1b58>
    4f88:	d8802e17 	ldw	r2,184(sp)
    4f8c:	14c0000f 	ldh	r19,0(r2)
    4f90:	10800104 	addi	r2,r2,4
    4f94:	d8802e15 	stw	r2,184(sp)
    4f98:	982dd7fa 	srai	r22,r19,31
    4f9c:	b005883a 	mov	r2,r22
    4fa0:	003af706 	br	3b80 <__alt_data_end+0xfc003b80>
    4fa4:	9080100c 	andi	r2,r18,64
    4fa8:	d8002785 	stb	zero,158(sp)
    4fac:	10008a1e 	bne	r2,zero,51d8 <___vfprintf_internal_r+0x1ba8>
    4fb0:	d9002e17 	ldw	r4,184(sp)
    4fb4:	d9402a17 	ldw	r5,168(sp)
    4fb8:	002d883a 	mov	r22,zero
    4fbc:	20800104 	addi	r2,r4,4
    4fc0:	24c00017 	ldw	r19,0(r4)
    4fc4:	283e4b0e 	bge	r5,zero,48f4 <__alt_data_end+0xfc0048f4>
    4fc8:	9d86b03a 	or	r3,r19,r22
    4fcc:	d8802e15 	stw	r2,184(sp)
    4fd0:	183e4c1e 	bne	r3,zero,4904 <__alt_data_end+0xfc004904>
    4fd4:	0039883a 	mov	fp,zero
    4fd8:	0005883a 	mov	r2,zero
    4fdc:	003d4006 	br	44e0 <__alt_data_end+0xfc0044e0>
    4fe0:	01400074 	movhi	r5,1
    4fe4:	29544584 	addi	r5,r5,20758
    4fe8:	d9402c15 	stw	r5,176(sp)
    4fec:	d9402c17 	ldw	r5,176(sp)
    4ff0:	1c47883a 	add	r3,r3,r17
    4ff4:	10800044 	addi	r2,r2,1
    4ff8:	41400015 	stw	r5,0(r8)
    4ffc:	44400115 	stw	r17,4(r8)
    5000:	d8c02015 	stw	r3,128(sp)
    5004:	d8801f15 	stw	r2,124(sp)
    5008:	010001c4 	movi	r4,7
    500c:	20bec816 	blt	r4,r2,4b30 <__alt_data_end+0xfc004b30>
    5010:	42000204 	addi	r8,r8,8
    5014:	003ecd06 	br	4b4c <__alt_data_end+0xfc004b4c>
    5018:	d9002a17 	ldw	r4,168(sp)
    501c:	d8002785 	stb	zero,158(sp)
    5020:	203d2d16 	blt	r4,zero,44d8 <__alt_data_end+0xfc0044d8>
    5024:	00bfdfc4 	movi	r2,-129
    5028:	90a4703a 	and	r18,r18,r2
    502c:	003a6106 	br	39b4 <__alt_data_end+0xfc0039b4>
    5030:	01000074 	movhi	r4,1
    5034:	21144584 	addi	r4,r4,20758
    5038:	d9002c15 	stw	r4,176(sp)
    503c:	003bea06 	br	3fe8 <__alt_data_end+0xfc003fe8>
    5040:	d9002d17 	ldw	r4,180(sp)
    5044:	d9801e04 	addi	r6,sp,120
    5048:	b80b883a 	mov	r5,r23
    504c:	000af780 	call	af78 <__sprint_r>
    5050:	103a7b1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    5054:	d8c02017 	ldw	r3,128(sp)
    5058:	da000404 	addi	r8,sp,16
    505c:	003d4106 	br	4564 <__alt_data_end+0xfc004564>
    5060:	d8801f17 	ldw	r2,124(sp)
    5064:	01400074 	movhi	r5,1
    5068:	01000044 	movi	r4,1
    506c:	18c00044 	addi	r3,r3,1
    5070:	10800044 	addi	r2,r2,1
    5074:	29544504 	addi	r5,r5,20756
    5078:	41000115 	stw	r4,4(r8)
    507c:	41400015 	stw	r5,0(r8)
    5080:	d8c02015 	stw	r3,128(sp)
    5084:	d8801f15 	stw	r2,124(sp)
    5088:	010001c4 	movi	r4,7
    508c:	20805c16 	blt	r4,r2,5200 <___vfprintf_internal_r+0x1bd0>
    5090:	42000204 	addi	r8,r8,8
    5094:	8800041e 	bne	r17,zero,50a8 <___vfprintf_internal_r+0x1a78>
    5098:	d8803317 	ldw	r2,204(sp)
    509c:	1000021e 	bne	r2,zero,50a8 <___vfprintf_internal_r+0x1a78>
    50a0:	9080004c 	andi	r2,r18,1
    50a4:	103be726 	beq	r2,zero,4044 <__alt_data_end+0xfc004044>
    50a8:	d9003717 	ldw	r4,220(sp)
    50ac:	d8801f17 	ldw	r2,124(sp)
    50b0:	d9403417 	ldw	r5,208(sp)
    50b4:	20c7883a 	add	r3,r4,r3
    50b8:	10800044 	addi	r2,r2,1
    50bc:	41000115 	stw	r4,4(r8)
    50c0:	41400015 	stw	r5,0(r8)
    50c4:	d8c02015 	stw	r3,128(sp)
    50c8:	d8801f15 	stw	r2,124(sp)
    50cc:	010001c4 	movi	r4,7
    50d0:	20812116 	blt	r4,r2,5558 <___vfprintf_internal_r+0x1f28>
    50d4:	42000204 	addi	r8,r8,8
    50d8:	0463c83a 	sub	r17,zero,r17
    50dc:	0440730e 	bge	zero,r17,52ac <___vfprintf_internal_r+0x1c7c>
    50e0:	05800404 	movi	r22,16
    50e4:	b440860e 	bge	r22,r17,5300 <___vfprintf_internal_r+0x1cd0>
    50e8:	01400074 	movhi	r5,1
    50ec:	29544584 	addi	r5,r5,20758
    50f0:	d9402c15 	stw	r5,176(sp)
    50f4:	070001c4 	movi	fp,7
    50f8:	dcc02d17 	ldw	r19,180(sp)
    50fc:	00000306 	br	510c <___vfprintf_internal_r+0x1adc>
    5100:	42000204 	addi	r8,r8,8
    5104:	8c7ffc04 	addi	r17,r17,-16
    5108:	b440800e 	bge	r22,r17,530c <___vfprintf_internal_r+0x1cdc>
    510c:	18c00404 	addi	r3,r3,16
    5110:	10800044 	addi	r2,r2,1
    5114:	45000015 	stw	r20,0(r8)
    5118:	45800115 	stw	r22,4(r8)
    511c:	d8c02015 	stw	r3,128(sp)
    5120:	d8801f15 	stw	r2,124(sp)
    5124:	e0bff60e 	bge	fp,r2,5100 <__alt_data_end+0xfc005100>
    5128:	d9801e04 	addi	r6,sp,120
    512c:	b80b883a 	mov	r5,r23
    5130:	9809883a 	mov	r4,r19
    5134:	000af780 	call	af78 <__sprint_r>
    5138:	103a411e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    513c:	d8c02017 	ldw	r3,128(sp)
    5140:	d8801f17 	ldw	r2,124(sp)
    5144:	da000404 	addi	r8,sp,16
    5148:	003fee06 	br	5104 <__alt_data_end+0xfc005104>
    514c:	00bfffc4 	movi	r2,-1
    5150:	003a3f06 	br	3a50 <__alt_data_end+0xfc003a50>
    5154:	008011c4 	movi	r2,71
    5158:	1440b816 	blt	r2,r17,543c <___vfprintf_internal_r+0x1e0c>
    515c:	04000074 	movhi	r16,1
    5160:	84143704 	addi	r16,r16,20700
    5164:	00c000c4 	movi	r3,3
    5168:	00bfdfc4 	movi	r2,-129
    516c:	d8c02915 	stw	r3,164(sp)
    5170:	90a4703a 	and	r18,r18,r2
    5174:	df002783 	ldbu	fp,158(sp)
    5178:	d8c02b15 	stw	r3,172(sp)
    517c:	d8002a15 	stw	zero,168(sp)
    5180:	d8003215 	stw	zero,200(sp)
    5184:	003b0706 	br	3da4 <__alt_data_end+0xfc003da4>
    5188:	d8c02e17 	ldw	r3,184(sp)
    518c:	1cc00017 	ldw	r19,0(r3)
    5190:	18c00104 	addi	r3,r3,4
    5194:	d8c02e15 	stw	r3,184(sp)
    5198:	982dd7fa 	srai	r22,r19,31
    519c:	b005883a 	mov	r2,r22
    51a0:	003a7706 	br	3b80 <__alt_data_end+0xfc003b80>
    51a4:	d8c02e17 	ldw	r3,184(sp)
    51a8:	d9002f17 	ldw	r4,188(sp)
    51ac:	18800017 	ldw	r2,0(r3)
    51b0:	18c00104 	addi	r3,r3,4
    51b4:	d8c02e15 	stw	r3,184(sp)
    51b8:	11000015 	stw	r4,0(r2)
    51bc:	00395406 	br	3710 <__alt_data_end+0xfc003710>
    51c0:	d9002e17 	ldw	r4,184(sp)
    51c4:	002d883a 	mov	r22,zero
    51c8:	24c00017 	ldw	r19,0(r4)
    51cc:	21000104 	addi	r4,r4,4
    51d0:	d9002e15 	stw	r4,184(sp)
    51d4:	003c0706 	br	41f4 <__alt_data_end+0xfc0041f4>
    51d8:	d9402e17 	ldw	r5,184(sp)
    51dc:	d8c02a17 	ldw	r3,168(sp)
    51e0:	002d883a 	mov	r22,zero
    51e4:	28800104 	addi	r2,r5,4
    51e8:	2cc0000b 	ldhu	r19,0(r5)
    51ec:	183dc10e 	bge	r3,zero,48f4 <__alt_data_end+0xfc0048f4>
    51f0:	003f7506 	br	4fc8 <__alt_data_end+0xfc004fc8>
    51f4:	04000074 	movhi	r16,1
    51f8:	84143504 	addi	r16,r16,20692
    51fc:	003aa706 	br	3c9c <__alt_data_end+0xfc003c9c>
    5200:	d9002d17 	ldw	r4,180(sp)
    5204:	d9801e04 	addi	r6,sp,120
    5208:	b80b883a 	mov	r5,r23
    520c:	000af780 	call	af78 <__sprint_r>
    5210:	103a0b1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    5214:	dc402617 	ldw	r17,152(sp)
    5218:	d8c02017 	ldw	r3,128(sp)
    521c:	da000404 	addi	r8,sp,16
    5220:	003f9c06 	br	5094 <__alt_data_end+0xfc005094>
    5224:	ac400043 	ldbu	r17,1(r21)
    5228:	84000814 	ori	r16,r16,32
    522c:	ad400044 	addi	r21,r21,1
    5230:	8c403fcc 	andi	r17,r17,255
    5234:	8c40201c 	xori	r17,r17,128
    5238:	8c7fe004 	addi	r17,r17,-128
    523c:	00395e06 	br	37b8 <__alt_data_end+0xfc0037b8>
    5240:	d8c02e15 	stw	r3,184(sp)
    5244:	0039883a 	mov	fp,zero
    5248:	003e3506 	br	4b20 <__alt_data_end+0xfc004b20>
    524c:	d9002d17 	ldw	r4,180(sp)
    5250:	d9801e04 	addi	r6,sp,120
    5254:	b80b883a 	mov	r5,r23
    5258:	000af780 	call	af78 <__sprint_r>
    525c:	1039f81e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    5260:	d8c02017 	ldw	r3,128(sp)
    5264:	da000404 	addi	r8,sp,16
    5268:	003cd006 	br	45ac <__alt_data_end+0xfc0045ac>
    526c:	8009883a 	mov	r4,r16
    5270:	df003d15 	stw	fp,244(sp)
    5274:	00035980 	call	3598 <strlen>
    5278:	d8802b15 	stw	r2,172(sp)
    527c:	da003d17 	ldw	r8,244(sp)
    5280:	103c200e 	bge	r2,zero,4304 <__alt_data_end+0xfc004304>
    5284:	0005883a 	mov	r2,zero
    5288:	003c1e06 	br	4304 <__alt_data_end+0xfc004304>
    528c:	d9002d17 	ldw	r4,180(sp)
    5290:	d9801e04 	addi	r6,sp,120
    5294:	b80b883a 	mov	r5,r23
    5298:	000af780 	call	af78 <__sprint_r>
    529c:	1039e81e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    52a0:	d8c02017 	ldw	r3,128(sp)
    52a4:	d8801f17 	ldw	r2,124(sp)
    52a8:	da000404 	addi	r8,sp,16
    52ac:	d9403317 	ldw	r5,204(sp)
    52b0:	10800044 	addi	r2,r2,1
    52b4:	44000015 	stw	r16,0(r8)
    52b8:	28c7883a 	add	r3,r5,r3
    52bc:	003b5b06 	br	402c <__alt_data_end+0xfc00402c>
    52c0:	01000074 	movhi	r4,1
    52c4:	21144984 	addi	r4,r4,20774
    52c8:	d9003515 	stw	r4,212(sp)
    52cc:	003af206 	br	3e98 <__alt_data_end+0xfc003e98>
    52d0:	013fffc4 	movi	r4,-1
    52d4:	003a0806 	br	3af8 <__alt_data_end+0xfc003af8>
    52d8:	0023883a 	mov	r17,zero
    52dc:	003d9d06 	br	4954 <__alt_data_end+0xfc004954>
    52e0:	d9002d17 	ldw	r4,180(sp)
    52e4:	d9801e04 	addi	r6,sp,120
    52e8:	b80b883a 	mov	r5,r23
    52ec:	000af780 	call	af78 <__sprint_r>
    52f0:	1039d31e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    52f4:	d8c02017 	ldw	r3,128(sp)
    52f8:	da000404 	addi	r8,sp,16
    52fc:	003d9406 	br	4950 <__alt_data_end+0xfc004950>
    5300:	01000074 	movhi	r4,1
    5304:	21144584 	addi	r4,r4,20758
    5308:	d9002c15 	stw	r4,176(sp)
    530c:	d9002c17 	ldw	r4,176(sp)
    5310:	1c47883a 	add	r3,r3,r17
    5314:	10800044 	addi	r2,r2,1
    5318:	41000015 	stw	r4,0(r8)
    531c:	44400115 	stw	r17,4(r8)
    5320:	d8c02015 	stw	r3,128(sp)
    5324:	d8801f15 	stw	r2,124(sp)
    5328:	010001c4 	movi	r4,7
    532c:	20bfd716 	blt	r4,r2,528c <__alt_data_end+0xfc00528c>
    5330:	42000204 	addi	r8,r8,8
    5334:	003fdd06 	br	52ac <__alt_data_end+0xfc0052ac>
    5338:	d9002d17 	ldw	r4,180(sp)
    533c:	d9801e04 	addi	r6,sp,120
    5340:	b80b883a 	mov	r5,r23
    5344:	000af780 	call	af78 <__sprint_r>
    5348:	1039bd1e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    534c:	d8802617 	ldw	r2,152(sp)
    5350:	d8c02017 	ldw	r3,128(sp)
    5354:	da000404 	addi	r8,sp,16
    5358:	003e1006 	br	4b9c <__alt_data_end+0xfc004b9c>
    535c:	00800044 	movi	r2,1
    5360:	10803fcc 	andi	r2,r2,255
    5364:	00c00044 	movi	r3,1
    5368:	10fa0d26 	beq	r2,r3,3ba0 <__alt_data_end+0xfc003ba0>
    536c:	00c00084 	movi	r3,2
    5370:	10fbaf26 	beq	r2,r3,4230 <__alt_data_end+0xfc004230>
    5374:	003a6d06 	br	3d2c <__alt_data_end+0xfc003d2c>
    5378:	01000074 	movhi	r4,1
    537c:	21144984 	addi	r4,r4,20774
    5380:	d9003515 	stw	r4,212(sp)
    5384:	003b5406 	br	40d8 <__alt_data_end+0xfc0040d8>
    5388:	d8802a17 	ldw	r2,168(sp)
    538c:	00c00184 	movi	r3,6
    5390:	1880012e 	bgeu	r3,r2,5398 <___vfprintf_internal_r+0x1d68>
    5394:	1805883a 	mov	r2,r3
    5398:	d8802b15 	stw	r2,172(sp)
    539c:	1000ef16 	blt	r2,zero,575c <___vfprintf_internal_r+0x212c>
    53a0:	04000074 	movhi	r16,1
    53a4:	d8802915 	stw	r2,164(sp)
    53a8:	dcc02e15 	stw	r19,184(sp)
    53ac:	d8002a15 	stw	zero,168(sp)
    53b0:	d8003215 	stw	zero,200(sp)
    53b4:	84144304 	addi	r16,r16,20748
    53b8:	0039883a 	mov	fp,zero
    53bc:	003a8006 	br	3dc0 <__alt_data_end+0xfc003dc0>
    53c0:	0021883a 	mov	r16,zero
    53c4:	003e0706 	br	4be4 <__alt_data_end+0xfc004be4>
    53c8:	d9002d17 	ldw	r4,180(sp)
    53cc:	d9801e04 	addi	r6,sp,120
    53d0:	b80b883a 	mov	r5,r23
    53d4:	000af780 	call	af78 <__sprint_r>
    53d8:	1039991e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    53dc:	d8802617 	ldw	r2,152(sp)
    53e0:	d9403317 	ldw	r5,204(sp)
    53e4:	d8c02017 	ldw	r3,128(sp)
    53e8:	da000404 	addi	r8,sp,16
    53ec:	2885c83a 	sub	r2,r5,r2
    53f0:	003dfb06 	br	4be0 <__alt_data_end+0xfc004be0>
    53f4:	9080004c 	andi	r2,r18,1
    53f8:	103e8f1e 	bne	r2,zero,4e38 <__alt_data_end+0xfc004e38>
    53fc:	d8802117 	ldw	r2,132(sp)
    5400:	003e9e06 	br	4e7c <__alt_data_end+0xfc004e7c>
    5404:	1025883a 	mov	r18,r2
    5408:	0039883a 	mov	fp,zero
    540c:	00800084 	movi	r2,2
    5410:	003fd306 	br	5360 <__alt_data_end+0xfc005360>
    5414:	07000b44 	movi	fp,45
    5418:	df002785 	stb	fp,158(sp)
    541c:	003a1b06 	br	3c8c <__alt_data_end+0xfc003c8c>
    5420:	00c00b44 	movi	r3,45
    5424:	d8c02785 	stb	r3,158(sp)
    5428:	d8802915 	stw	r2,164(sp)
    542c:	dc802c17 	ldw	r18,176(sp)
    5430:	d8002a15 	stw	zero,168(sp)
    5434:	07000b44 	movi	fp,45
    5438:	003a5e06 	br	3db4 <__alt_data_end+0xfc003db4>
    543c:	04000074 	movhi	r16,1
    5440:	84143804 	addi	r16,r16,20704
    5444:	003f4706 	br	5164 <__alt_data_end+0xfc005164>
    5448:	d9002e17 	ldw	r4,184(sp)
    544c:	d9402f17 	ldw	r5,188(sp)
    5450:	20800017 	ldw	r2,0(r4)
    5454:	21000104 	addi	r4,r4,4
    5458:	d9002e15 	stw	r4,184(sp)
    545c:	11400015 	stw	r5,0(r2)
    5460:	0038ab06 	br	3710 <__alt_data_end+0xfc003710>
    5464:	dd802617 	ldw	r22,152(sp)
    5468:	00bfff44 	movi	r2,-3
    546c:	b0801c16 	blt	r22,r2,54e0 <___vfprintf_internal_r+0x1eb0>
    5470:	d9402a17 	ldw	r5,168(sp)
    5474:	2d801a16 	blt	r5,r22,54e0 <___vfprintf_internal_r+0x1eb0>
    5478:	dd803215 	stw	r22,200(sp)
    547c:	003e8906 	br	4ea4 <__alt_data_end+0xfc004ea4>
    5480:	01000074 	movhi	r4,1
    5484:	21144584 	addi	r4,r4,20758
    5488:	d9002c15 	stw	r4,176(sp)
    548c:	003c9106 	br	46d4 <__alt_data_end+0xfc0046d4>
    5490:	e005883a 	mov	r2,fp
    5494:	003e7906 	br	4e7c <__alt_data_end+0xfc004e7c>
    5498:	d9002a17 	ldw	r4,168(sp)
    549c:	df002783 	ldbu	fp,158(sp)
    54a0:	dcc02e15 	stw	r19,184(sp)
    54a4:	d9002915 	stw	r4,164(sp)
    54a8:	d9002b15 	stw	r4,172(sp)
    54ac:	d8002a15 	stw	zero,168(sp)
    54b0:	d8003215 	stw	zero,200(sp)
    54b4:	003a3b06 	br	3da4 <__alt_data_end+0xfc003da4>
    54b8:	9080004c 	andi	r2,r18,1
    54bc:	0039883a 	mov	fp,zero
    54c0:	10000426 	beq	r2,zero,54d4 <___vfprintf_internal_r+0x1ea4>
    54c4:	00800c04 	movi	r2,48
    54c8:	dc001dc4 	addi	r16,sp,119
    54cc:	d8801dc5 	stb	r2,119(sp)
    54d0:	003b6406 	br	4264 <__alt_data_end+0xfc004264>
    54d4:	d8002b15 	stw	zero,172(sp)
    54d8:	dc001e04 	addi	r16,sp,120
    54dc:	003a2b06 	br	3d8c <__alt_data_end+0xfc003d8c>
    54e0:	8c7fff84 	addi	r17,r17,-2
    54e4:	b5bfffc4 	addi	r22,r22,-1
    54e8:	dd802615 	stw	r22,152(sp)
    54ec:	dc4022c5 	stb	r17,139(sp)
    54f0:	b000bf16 	blt	r22,zero,57f0 <___vfprintf_internal_r+0x21c0>
    54f4:	00800ac4 	movi	r2,43
    54f8:	d8802305 	stb	r2,140(sp)
    54fc:	00800244 	movi	r2,9
    5500:	15807016 	blt	r2,r22,56c4 <___vfprintf_internal_r+0x2094>
    5504:	00800c04 	movi	r2,48
    5508:	b5800c04 	addi	r22,r22,48
    550c:	d8802345 	stb	r2,141(sp)
    5510:	dd802385 	stb	r22,142(sp)
    5514:	d88023c4 	addi	r2,sp,143
    5518:	df0022c4 	addi	fp,sp,139
    551c:	d8c03317 	ldw	r3,204(sp)
    5520:	1739c83a 	sub	fp,r2,fp
    5524:	d9003317 	ldw	r4,204(sp)
    5528:	e0c7883a 	add	r3,fp,r3
    552c:	df003a15 	stw	fp,232(sp)
    5530:	d8c02b15 	stw	r3,172(sp)
    5534:	00800044 	movi	r2,1
    5538:	1100b30e 	bge	r2,r4,5808 <___vfprintf_internal_r+0x21d8>
    553c:	d8c02b17 	ldw	r3,172(sp)
    5540:	18c00044 	addi	r3,r3,1
    5544:	d8c02b15 	stw	r3,172(sp)
    5548:	1805883a 	mov	r2,r3
    554c:	1800ac16 	blt	r3,zero,5800 <___vfprintf_internal_r+0x21d0>
    5550:	d8003215 	stw	zero,200(sp)
    5554:	003e5d06 	br	4ecc <__alt_data_end+0xfc004ecc>
    5558:	d9002d17 	ldw	r4,180(sp)
    555c:	d9801e04 	addi	r6,sp,120
    5560:	b80b883a 	mov	r5,r23
    5564:	000af780 	call	af78 <__sprint_r>
    5568:	1039351e 	bne	r2,zero,3a40 <__alt_data_end+0xfc003a40>
    556c:	dc402617 	ldw	r17,152(sp)
    5570:	d8c02017 	ldw	r3,128(sp)
    5574:	d8801f17 	ldw	r2,124(sp)
    5578:	da000404 	addi	r8,sp,16
    557c:	003ed606 	br	50d8 <__alt_data_end+0xfc0050d8>
    5580:	182b883a 	mov	r21,r3
    5584:	d8002a15 	stw	zero,168(sp)
    5588:	00388c06 	br	37bc <__alt_data_end+0xfc0037bc>
    558c:	d8802a17 	ldw	r2,168(sp)
    5590:	103e071e 	bne	r2,zero,4db0 <__alt_data_end+0xfc004db0>
    5594:	dc002a15 	stw	r16,168(sp)
    5598:	003e0506 	br	4db0 <__alt_data_end+0xfc004db0>
    559c:	d9002a17 	ldw	r4,168(sp)
    55a0:	20c00044 	addi	r3,r4,1
    55a4:	003e0f06 	br	4de4 <__alt_data_end+0xfc004de4>
    55a8:	01400184 	movi	r5,6
    55ac:	d9402a15 	stw	r5,168(sp)
    55b0:	003dff06 	br	4db0 <__alt_data_end+0xfc004db0>
    55b4:	d8802104 	addi	r2,sp,132
    55b8:	d8800315 	stw	r2,12(sp)
    55bc:	d8802504 	addi	r2,sp,148
    55c0:	d8800215 	stw	r2,8(sp)
    55c4:	d8802604 	addi	r2,sp,152
    55c8:	d8800115 	stw	r2,4(sp)
    55cc:	d8802a17 	ldw	r2,168(sp)
    55d0:	d9403617 	ldw	r5,216(sp)
    55d4:	d9002d17 	ldw	r4,180(sp)
    55d8:	d8800015 	stw	r2,0(sp)
    55dc:	01c000c4 	movi	r7,3
    55e0:	980d883a 	mov	r6,r19
    55e4:	da003d15 	stw	r8,244(sp)
    55e8:	0005d600 	call	5d60 <_dtoa_r>
    55ec:	d8c02a17 	ldw	r3,168(sp)
    55f0:	da003d17 	ldw	r8,244(sp)
    55f4:	1021883a 	mov	r16,r2
    55f8:	10f9883a 	add	fp,r2,r3
    55fc:	81000007 	ldb	r4,0(r16)
    5600:	00800c04 	movi	r2,48
    5604:	20805e26 	beq	r4,r2,5780 <___vfprintf_internal_r+0x2150>
    5608:	d8c02617 	ldw	r3,152(sp)
    560c:	e0f9883a 	add	fp,fp,r3
    5610:	003e0a06 	br	4e3c <__alt_data_end+0xfc004e3c>
    5614:	00c00b44 	movi	r3,45
    5618:	24e0003c 	xorhi	r19,r4,32768
    561c:	d8c02905 	stb	r3,164(sp)
    5620:	003de906 	br	4dc8 <__alt_data_end+0xfc004dc8>
    5624:	d8c03217 	ldw	r3,200(sp)
    5628:	00c07a0e 	bge	zero,r3,5814 <___vfprintf_internal_r+0x21e4>
    562c:	00800044 	movi	r2,1
    5630:	d9003317 	ldw	r4,204(sp)
    5634:	1105883a 	add	r2,r2,r4
    5638:	d8802b15 	stw	r2,172(sp)
    563c:	10004e16 	blt	r2,zero,5778 <___vfprintf_internal_r+0x2148>
    5640:	044019c4 	movi	r17,103
    5644:	003e2106 	br	4ecc <__alt_data_end+0xfc004ecc>
    5648:	d9002a17 	ldw	r4,168(sp)
    564c:	d8802104 	addi	r2,sp,132
    5650:	d8800315 	stw	r2,12(sp)
    5654:	d9000015 	stw	r4,0(sp)
    5658:	d8802504 	addi	r2,sp,148
    565c:	d9403617 	ldw	r5,216(sp)
    5660:	d9002d17 	ldw	r4,180(sp)
    5664:	d8800215 	stw	r2,8(sp)
    5668:	d8802604 	addi	r2,sp,152
    566c:	d8800115 	stw	r2,4(sp)
    5670:	01c000c4 	movi	r7,3
    5674:	980d883a 	mov	r6,r19
    5678:	da003d15 	stw	r8,244(sp)
    567c:	0005d600 	call	5d60 <_dtoa_r>
    5680:	d8c02a17 	ldw	r3,168(sp)
    5684:	da003d17 	ldw	r8,244(sp)
    5688:	1021883a 	mov	r16,r2
    568c:	00801184 	movi	r2,70
    5690:	80f9883a 	add	fp,r16,r3
    5694:	88bfd926 	beq	r17,r2,55fc <__alt_data_end+0xfc0055fc>
    5698:	003de806 	br	4e3c <__alt_data_end+0xfc004e3c>
    569c:	d9002a17 	ldw	r4,168(sp)
    56a0:	00c04d0e 	bge	zero,r3,57d8 <___vfprintf_internal_r+0x21a8>
    56a4:	2000441e 	bne	r4,zero,57b8 <___vfprintf_internal_r+0x2188>
    56a8:	9480004c 	andi	r18,r18,1
    56ac:	9000421e 	bne	r18,zero,57b8 <___vfprintf_internal_r+0x2188>
    56b0:	1805883a 	mov	r2,r3
    56b4:	18006f16 	blt	r3,zero,5874 <___vfprintf_internal_r+0x2244>
    56b8:	d8c03217 	ldw	r3,200(sp)
    56bc:	d8c02b15 	stw	r3,172(sp)
    56c0:	003e0206 	br	4ecc <__alt_data_end+0xfc004ecc>
    56c4:	df0022c4 	addi	fp,sp,139
    56c8:	dc002a15 	stw	r16,168(sp)
    56cc:	4027883a 	mov	r19,r8
    56d0:	e021883a 	mov	r16,fp
    56d4:	b009883a 	mov	r4,r22
    56d8:	01400284 	movi	r5,10
    56dc:	00032e00 	call	32e0 <__modsi3>
    56e0:	10800c04 	addi	r2,r2,48
    56e4:	843fffc4 	addi	r16,r16,-1
    56e8:	b009883a 	mov	r4,r22
    56ec:	01400284 	movi	r5,10
    56f0:	80800005 	stb	r2,0(r16)
    56f4:	000325c0 	call	325c <__divsi3>
    56f8:	102d883a 	mov	r22,r2
    56fc:	00800244 	movi	r2,9
    5700:	15bff416 	blt	r2,r22,56d4 <__alt_data_end+0xfc0056d4>
    5704:	9811883a 	mov	r8,r19
    5708:	b0800c04 	addi	r2,r22,48
    570c:	8027883a 	mov	r19,r16
    5710:	997fffc4 	addi	r5,r19,-1
    5714:	98bfffc5 	stb	r2,-1(r19)
    5718:	dc002a17 	ldw	r16,168(sp)
    571c:	2f006d2e 	bgeu	r5,fp,58d4 <___vfprintf_internal_r+0x22a4>
    5720:	d9c02384 	addi	r7,sp,142
    5724:	3ccfc83a 	sub	r7,r7,r19
    5728:	d9002344 	addi	r4,sp,141
    572c:	e1cf883a 	add	r7,fp,r7
    5730:	00000106 	br	5738 <___vfprintf_internal_r+0x2108>
    5734:	28800003 	ldbu	r2,0(r5)
    5738:	20800005 	stb	r2,0(r4)
    573c:	21000044 	addi	r4,r4,1
    5740:	29400044 	addi	r5,r5,1
    5744:	393ffb1e 	bne	r7,r4,5734 <__alt_data_end+0xfc005734>
    5748:	d8802304 	addi	r2,sp,140
    574c:	14c5c83a 	sub	r2,r2,r19
    5750:	d8c02344 	addi	r3,sp,141
    5754:	1885883a 	add	r2,r3,r2
    5758:	003f7006 	br	551c <__alt_data_end+0xfc00551c>
    575c:	0005883a 	mov	r2,zero
    5760:	003f0f06 	br	53a0 <__alt_data_end+0xfc0053a0>
    5764:	d8c03217 	ldw	r3,200(sp)
    5768:	18c00044 	addi	r3,r3,1
    576c:	d8c02b15 	stw	r3,172(sp)
    5770:	1805883a 	mov	r2,r3
    5774:	183fb20e 	bge	r3,zero,5640 <__alt_data_end+0xfc005640>
    5778:	0005883a 	mov	r2,zero
    577c:	003fb006 	br	5640 <__alt_data_end+0xfc005640>
    5780:	d9003617 	ldw	r4,216(sp)
    5784:	000d883a 	mov	r6,zero
    5788:	000f883a 	mov	r7,zero
    578c:	980b883a 	mov	r5,r19
    5790:	d8c03c15 	stw	r3,240(sp)
    5794:	da003d15 	stw	r8,244(sp)
    5798:	000ecfc0 	call	ecfc <__eqdf2>
    579c:	d8c03c17 	ldw	r3,240(sp)
    57a0:	da003d17 	ldw	r8,244(sp)
    57a4:	103f9826 	beq	r2,zero,5608 <__alt_data_end+0xfc005608>
    57a8:	00800044 	movi	r2,1
    57ac:	10c7c83a 	sub	r3,r2,r3
    57b0:	d8c02615 	stw	r3,152(sp)
    57b4:	003f9506 	br	560c <__alt_data_end+0xfc00560c>
    57b8:	d9002a17 	ldw	r4,168(sp)
    57bc:	d8c03217 	ldw	r3,200(sp)
    57c0:	20800044 	addi	r2,r4,1
    57c4:	1885883a 	add	r2,r3,r2
    57c8:	d8802b15 	stw	r2,172(sp)
    57cc:	103dbf0e 	bge	r2,zero,4ecc <__alt_data_end+0xfc004ecc>
    57d0:	0005883a 	mov	r2,zero
    57d4:	003dbd06 	br	4ecc <__alt_data_end+0xfc004ecc>
    57d8:	2000201e 	bne	r4,zero,585c <___vfprintf_internal_r+0x222c>
    57dc:	9480004c 	andi	r18,r18,1
    57e0:	90001e1e 	bne	r18,zero,585c <___vfprintf_internal_r+0x222c>
    57e4:	00800044 	movi	r2,1
    57e8:	d8802b15 	stw	r2,172(sp)
    57ec:	003db706 	br	4ecc <__alt_data_end+0xfc004ecc>
    57f0:	00800b44 	movi	r2,45
    57f4:	05adc83a 	sub	r22,zero,r22
    57f8:	d8802305 	stb	r2,140(sp)
    57fc:	003f3f06 	br	54fc <__alt_data_end+0xfc0054fc>
    5800:	0005883a 	mov	r2,zero
    5804:	003f5206 	br	5550 <__alt_data_end+0xfc005550>
    5808:	90a4703a 	and	r18,r18,r2
    580c:	903f4e26 	beq	r18,zero,5548 <__alt_data_end+0xfc005548>
    5810:	003f4a06 	br	553c <__alt_data_end+0xfc00553c>
    5814:	00800084 	movi	r2,2
    5818:	10c5c83a 	sub	r2,r2,r3
    581c:	003f8406 	br	5630 <__alt_data_end+0xfc005630>
    5820:	d9402e17 	ldw	r5,184(sp)
    5824:	d9002e17 	ldw	r4,184(sp)
    5828:	ac400043 	ldbu	r17,1(r21)
    582c:	29400017 	ldw	r5,0(r5)
    5830:	20800104 	addi	r2,r4,4
    5834:	d8802e15 	stw	r2,184(sp)
    5838:	d9402a15 	stw	r5,168(sp)
    583c:	182b883a 	mov	r21,r3
    5840:	283e7b0e 	bge	r5,zero,5230 <__alt_data_end+0xfc005230>
    5844:	8c403fcc 	andi	r17,r17,255
    5848:	017fffc4 	movi	r5,-1
    584c:	8c40201c 	xori	r17,r17,128
    5850:	d9402a15 	stw	r5,168(sp)
    5854:	8c7fe004 	addi	r17,r17,-128
    5858:	0037d706 	br	37b8 <__alt_data_end+0xfc0037b8>
    585c:	d8c02a17 	ldw	r3,168(sp)
    5860:	18c00084 	addi	r3,r3,2
    5864:	d8c02b15 	stw	r3,172(sp)
    5868:	1805883a 	mov	r2,r3
    586c:	183d970e 	bge	r3,zero,4ecc <__alt_data_end+0xfc004ecc>
    5870:	003fd706 	br	57d0 <__alt_data_end+0xfc0057d0>
    5874:	0005883a 	mov	r2,zero
    5878:	003f8f06 	br	56b8 <__alt_data_end+0xfc0056b8>
    587c:	9080004c 	andi	r2,r18,1
    5880:	103f821e 	bne	r2,zero,568c <__alt_data_end+0xfc00568c>
    5884:	d8802117 	ldw	r2,132(sp)
    5888:	1405c83a 	sub	r2,r2,r16
    588c:	d8803315 	stw	r2,204(sp)
    5890:	b47ef426 	beq	r22,r17,5464 <__alt_data_end+0xfc005464>
    5894:	dd802617 	ldw	r22,152(sp)
    5898:	003f1206 	br	54e4 <__alt_data_end+0xfc0054e4>
    589c:	d8c02b03 	ldbu	r3,172(sp)
    58a0:	d8c02785 	stb	r3,158(sp)
    58a4:	0038df06 	br	3c24 <__alt_data_end+0xfc003c24>
    58a8:	d8c02b03 	ldbu	r3,172(sp)
    58ac:	d8c02785 	stb	r3,158(sp)
    58b0:	0038aa06 	br	3b5c <__alt_data_end+0xfc003b5c>
    58b4:	d8c02b03 	ldbu	r3,172(sp)
    58b8:	d8c02785 	stb	r3,158(sp)
    58bc:	003a4306 	br	41cc <__alt_data_end+0xfc0041cc>
    58c0:	d8c02b03 	ldbu	r3,172(sp)
    58c4:	d8c02785 	stb	r3,158(sp)
    58c8:	003af506 	br	44a0 <__alt_data_end+0xfc0044a0>
    58cc:	0005883a 	mov	r2,zero
    58d0:	003d7b06 	br	4ec0 <__alt_data_end+0xfc004ec0>
    58d4:	d8802344 	addi	r2,sp,141
    58d8:	003f1006 	br	551c <__alt_data_end+0xfc00551c>
    58dc:	d8c02b03 	ldbu	r3,172(sp)
    58e0:	d8c02785 	stb	r3,158(sp)
    58e4:	0038fd06 	br	3cdc <__alt_data_end+0xfc003cdc>
    58e8:	d8c02b03 	ldbu	r3,172(sp)
    58ec:	d8c02785 	stb	r3,158(sp)
    58f0:	003a9706 	br	4350 <__alt_data_end+0xfc004350>
    58f4:	d8c02b03 	ldbu	r3,172(sp)
    58f8:	d8c02785 	stb	r3,158(sp)
    58fc:	003a1806 	br	4160 <__alt_data_end+0xfc004160>
    5900:	d8c02b03 	ldbu	r3,172(sp)
    5904:	d8c02785 	stb	r3,158(sp)
    5908:	003abe06 	br	4404 <__alt_data_end+0xfc004404>

0000590c <__vfprintf_internal>:
    590c:	00800074 	movhi	r2,1
    5910:	109bc904 	addi	r2,r2,28452
    5914:	300f883a 	mov	r7,r6
    5918:	280d883a 	mov	r6,r5
    591c:	200b883a 	mov	r5,r4
    5920:	11000017 	ldw	r4,0(r2)
    5924:	00036301 	jmpi	3630 <___vfprintf_internal_r>

00005928 <__sbprintf>:
    5928:	2880030b 	ldhu	r2,12(r5)
    592c:	2ac01917 	ldw	r11,100(r5)
    5930:	2a80038b 	ldhu	r10,14(r5)
    5934:	2a400717 	ldw	r9,28(r5)
    5938:	2a000917 	ldw	r8,36(r5)
    593c:	defee204 	addi	sp,sp,-1144
    5940:	00c10004 	movi	r3,1024
    5944:	dc011a15 	stw	r16,1128(sp)
    5948:	10bfff4c 	andi	r2,r2,65533
    594c:	2821883a 	mov	r16,r5
    5950:	d8cb883a 	add	r5,sp,r3
    5954:	dc811c15 	stw	r18,1136(sp)
    5958:	dc411b15 	stw	r17,1132(sp)
    595c:	dfc11d15 	stw	ra,1140(sp)
    5960:	2025883a 	mov	r18,r4
    5964:	d881030d 	sth	r2,1036(sp)
    5968:	dac11915 	stw	r11,1124(sp)
    596c:	da81038d 	sth	r10,1038(sp)
    5970:	da410715 	stw	r9,1052(sp)
    5974:	da010915 	stw	r8,1060(sp)
    5978:	dec10015 	stw	sp,1024(sp)
    597c:	dec10415 	stw	sp,1040(sp)
    5980:	d8c10215 	stw	r3,1032(sp)
    5984:	d8c10515 	stw	r3,1044(sp)
    5988:	d8010615 	stw	zero,1048(sp)
    598c:	00036300 	call	3630 <___vfprintf_internal_r>
    5990:	1023883a 	mov	r17,r2
    5994:	10000416 	blt	r2,zero,59a8 <__sbprintf+0x80>
    5998:	d9410004 	addi	r5,sp,1024
    599c:	9009883a 	mov	r4,r18
    59a0:	00076040 	call	7604 <_fflush_r>
    59a4:	10000d1e 	bne	r2,zero,59dc <__sbprintf+0xb4>
    59a8:	d881030b 	ldhu	r2,1036(sp)
    59ac:	1080100c 	andi	r2,r2,64
    59b0:	10000326 	beq	r2,zero,59c0 <__sbprintf+0x98>
    59b4:	8080030b 	ldhu	r2,12(r16)
    59b8:	10801014 	ori	r2,r2,64
    59bc:	8080030d 	sth	r2,12(r16)
    59c0:	8805883a 	mov	r2,r17
    59c4:	dfc11d17 	ldw	ra,1140(sp)
    59c8:	dc811c17 	ldw	r18,1136(sp)
    59cc:	dc411b17 	ldw	r17,1132(sp)
    59d0:	dc011a17 	ldw	r16,1128(sp)
    59d4:	dec11e04 	addi	sp,sp,1144
    59d8:	f800283a 	ret
    59dc:	047fffc4 	movi	r17,-1
    59e0:	003ff106 	br	59a8 <__alt_data_end+0xfc0059a8>

000059e4 <__swsetup_r>:
    59e4:	00800074 	movhi	r2,1
    59e8:	defffd04 	addi	sp,sp,-12
    59ec:	109bc904 	addi	r2,r2,28452
    59f0:	dc400115 	stw	r17,4(sp)
    59f4:	2023883a 	mov	r17,r4
    59f8:	11000017 	ldw	r4,0(r2)
    59fc:	dc000015 	stw	r16,0(sp)
    5a00:	dfc00215 	stw	ra,8(sp)
    5a04:	2821883a 	mov	r16,r5
    5a08:	20000226 	beq	r4,zero,5a14 <__swsetup_r+0x30>
    5a0c:	20800e17 	ldw	r2,56(r4)
    5a10:	10003126 	beq	r2,zero,5ad8 <__swsetup_r+0xf4>
    5a14:	8080030b 	ldhu	r2,12(r16)
    5a18:	10c0020c 	andi	r3,r2,8
    5a1c:	1009883a 	mov	r4,r2
    5a20:	18000f26 	beq	r3,zero,5a60 <__swsetup_r+0x7c>
    5a24:	80c00417 	ldw	r3,16(r16)
    5a28:	18001526 	beq	r3,zero,5a80 <__swsetup_r+0x9c>
    5a2c:	1100004c 	andi	r4,r2,1
    5a30:	20001c1e 	bne	r4,zero,5aa4 <__swsetup_r+0xc0>
    5a34:	1080008c 	andi	r2,r2,2
    5a38:	1000291e 	bne	r2,zero,5ae0 <__swsetup_r+0xfc>
    5a3c:	80800517 	ldw	r2,20(r16)
    5a40:	80800215 	stw	r2,8(r16)
    5a44:	18001c26 	beq	r3,zero,5ab8 <__swsetup_r+0xd4>
    5a48:	0005883a 	mov	r2,zero
    5a4c:	dfc00217 	ldw	ra,8(sp)
    5a50:	dc400117 	ldw	r17,4(sp)
    5a54:	dc000017 	ldw	r16,0(sp)
    5a58:	dec00304 	addi	sp,sp,12
    5a5c:	f800283a 	ret
    5a60:	2080040c 	andi	r2,r4,16
    5a64:	10002e26 	beq	r2,zero,5b20 <__swsetup_r+0x13c>
    5a68:	2080010c 	andi	r2,r4,4
    5a6c:	10001e1e 	bne	r2,zero,5ae8 <__swsetup_r+0x104>
    5a70:	80c00417 	ldw	r3,16(r16)
    5a74:	20800214 	ori	r2,r4,8
    5a78:	8080030d 	sth	r2,12(r16)
    5a7c:	183feb1e 	bne	r3,zero,5a2c <__alt_data_end+0xfc005a2c>
    5a80:	1100a00c 	andi	r4,r2,640
    5a84:	01408004 	movi	r5,512
    5a88:	217fe826 	beq	r4,r5,5a2c <__alt_data_end+0xfc005a2c>
    5a8c:	800b883a 	mov	r5,r16
    5a90:	8809883a 	mov	r4,r17
    5a94:	00085a00 	call	85a0 <__smakebuf_r>
    5a98:	8080030b 	ldhu	r2,12(r16)
    5a9c:	80c00417 	ldw	r3,16(r16)
    5aa0:	003fe206 	br	5a2c <__alt_data_end+0xfc005a2c>
    5aa4:	80800517 	ldw	r2,20(r16)
    5aa8:	80000215 	stw	zero,8(r16)
    5aac:	0085c83a 	sub	r2,zero,r2
    5ab0:	80800615 	stw	r2,24(r16)
    5ab4:	183fe41e 	bne	r3,zero,5a48 <__alt_data_end+0xfc005a48>
    5ab8:	80c0030b 	ldhu	r3,12(r16)
    5abc:	0005883a 	mov	r2,zero
    5ac0:	1900200c 	andi	r4,r3,128
    5ac4:	203fe126 	beq	r4,zero,5a4c <__alt_data_end+0xfc005a4c>
    5ac8:	18c01014 	ori	r3,r3,64
    5acc:	80c0030d 	sth	r3,12(r16)
    5ad0:	00bfffc4 	movi	r2,-1
    5ad4:	003fdd06 	br	5a4c <__alt_data_end+0xfc005a4c>
    5ad8:	00079f00 	call	79f0 <__sinit>
    5adc:	003fcd06 	br	5a14 <__alt_data_end+0xfc005a14>
    5ae0:	0005883a 	mov	r2,zero
    5ae4:	003fd606 	br	5a40 <__alt_data_end+0xfc005a40>
    5ae8:	81400c17 	ldw	r5,48(r16)
    5aec:	28000626 	beq	r5,zero,5b08 <__swsetup_r+0x124>
    5af0:	80801004 	addi	r2,r16,64
    5af4:	28800326 	beq	r5,r2,5b04 <__swsetup_r+0x120>
    5af8:	8809883a 	mov	r4,r17
    5afc:	0007b640 	call	7b64 <_free_r>
    5b00:	8100030b 	ldhu	r4,12(r16)
    5b04:	80000c15 	stw	zero,48(r16)
    5b08:	80c00417 	ldw	r3,16(r16)
    5b0c:	00bff6c4 	movi	r2,-37
    5b10:	1108703a 	and	r4,r2,r4
    5b14:	80000115 	stw	zero,4(r16)
    5b18:	80c00015 	stw	r3,0(r16)
    5b1c:	003fd506 	br	5a74 <__alt_data_end+0xfc005a74>
    5b20:	00800244 	movi	r2,9
    5b24:	88800015 	stw	r2,0(r17)
    5b28:	20801014 	ori	r2,r4,64
    5b2c:	8080030d 	sth	r2,12(r16)
    5b30:	00bfffc4 	movi	r2,-1
    5b34:	003fc506 	br	5a4c <__alt_data_end+0xfc005a4c>

00005b38 <quorem>:
    5b38:	defff204 	addi	sp,sp,-56
    5b3c:	ddc00b15 	stw	r23,44(sp)
    5b40:	20800417 	ldw	r2,16(r4)
    5b44:	2dc00417 	ldw	r23,16(r5)
    5b48:	dfc00d15 	stw	ra,52(sp)
    5b4c:	df000c15 	stw	fp,48(sp)
    5b50:	dd800a15 	stw	r22,40(sp)
    5b54:	dd400915 	stw	r21,36(sp)
    5b58:	dd000815 	stw	r20,32(sp)
    5b5c:	dcc00715 	stw	r19,28(sp)
    5b60:	dc800615 	stw	r18,24(sp)
    5b64:	dc400515 	stw	r17,20(sp)
    5b68:	dc000415 	stw	r16,16(sp)
    5b6c:	15c07a16 	blt	r2,r23,5d58 <quorem+0x220>
    5b70:	bdffffc4 	addi	r23,r23,-1
    5b74:	bde9883a 	add	r20,r23,r23
    5b78:	28c00504 	addi	r3,r5,20
    5b7c:	a529883a 	add	r20,r20,r20
    5b80:	1d39883a 	add	fp,r3,r20
    5b84:	24c00504 	addi	r19,r4,20
    5b88:	d9400215 	stw	r5,8(sp)
    5b8c:	9d29883a 	add	r20,r19,r20
    5b90:	e1400017 	ldw	r5,0(fp)
    5b94:	d9000015 	stw	r4,0(sp)
    5b98:	a1000017 	ldw	r4,0(r20)
    5b9c:	29400044 	addi	r5,r5,1
    5ba0:	d8c00115 	stw	r3,4(sp)
    5ba4:	dd000315 	stw	r20,12(sp)
    5ba8:	00033540 	call	3354 <__udivsi3>
    5bac:	1025883a 	mov	r18,r2
    5bb0:	10003026 	beq	r2,zero,5c74 <quorem+0x13c>
    5bb4:	dc400117 	ldw	r17,4(sp)
    5bb8:	9829883a 	mov	r20,r19
    5bbc:	002d883a 	mov	r22,zero
    5bc0:	0021883a 	mov	r16,zero
    5bc4:	8d400017 	ldw	r21,0(r17)
    5bc8:	900b883a 	mov	r5,r18
    5bcc:	8c400104 	addi	r17,r17,4
    5bd0:	a93fffcc 	andi	r4,r21,65535
    5bd4:	00034100 	call	3410 <__mulsi3>
    5bd8:	a808d43a 	srli	r4,r21,16
    5bdc:	900b883a 	mov	r5,r18
    5be0:	15ad883a 	add	r22,r2,r22
    5be4:	00034100 	call	3410 <__mulsi3>
    5be8:	a1000017 	ldw	r4,0(r20)
    5bec:	b00cd43a 	srli	r6,r22,16
    5bf0:	b0ffffcc 	andi	r3,r22,65535
    5bf4:	217fffcc 	andi	r5,r4,65535
    5bf8:	2c21883a 	add	r16,r5,r16
    5bfc:	80c7c83a 	sub	r3,r16,r3
    5c00:	2008d43a 	srli	r4,r4,16
    5c04:	1185883a 	add	r2,r2,r6
    5c08:	1821d43a 	srai	r16,r3,16
    5c0c:	117fffcc 	andi	r5,r2,65535
    5c10:	2149c83a 	sub	r4,r4,r5
    5c14:	2421883a 	add	r16,r4,r16
    5c18:	8008943a 	slli	r4,r16,16
    5c1c:	18ffffcc 	andi	r3,r3,65535
    5c20:	102cd43a 	srli	r22,r2,16
    5c24:	20c8b03a 	or	r4,r4,r3
    5c28:	a1000015 	stw	r4,0(r20)
    5c2c:	8021d43a 	srai	r16,r16,16
    5c30:	a5000104 	addi	r20,r20,4
    5c34:	e47fe32e 	bgeu	fp,r17,5bc4 <__alt_data_end+0xfc005bc4>
    5c38:	d8c00317 	ldw	r3,12(sp)
    5c3c:	18800017 	ldw	r2,0(r3)
    5c40:	10000c1e 	bne	r2,zero,5c74 <quorem+0x13c>
    5c44:	18bfff04 	addi	r2,r3,-4
    5c48:	9880082e 	bgeu	r19,r2,5c6c <quorem+0x134>
    5c4c:	18ffff17 	ldw	r3,-4(r3)
    5c50:	18000326 	beq	r3,zero,5c60 <quorem+0x128>
    5c54:	00000506 	br	5c6c <quorem+0x134>
    5c58:	10c00017 	ldw	r3,0(r2)
    5c5c:	1800031e 	bne	r3,zero,5c6c <quorem+0x134>
    5c60:	10bfff04 	addi	r2,r2,-4
    5c64:	bdffffc4 	addi	r23,r23,-1
    5c68:	98bffb36 	bltu	r19,r2,5c58 <__alt_data_end+0xfc005c58>
    5c6c:	d8c00017 	ldw	r3,0(sp)
    5c70:	1dc00415 	stw	r23,16(r3)
    5c74:	d9400217 	ldw	r5,8(sp)
    5c78:	d9000017 	ldw	r4,0(sp)
    5c7c:	0009d9c0 	call	9d9c <__mcmp>
    5c80:	10002816 	blt	r2,zero,5d24 <quorem+0x1ec>
    5c84:	dc400117 	ldw	r17,4(sp)
    5c88:	94800044 	addi	r18,r18,1
    5c8c:	980d883a 	mov	r6,r19
    5c90:	0007883a 	mov	r3,zero
    5c94:	31000017 	ldw	r4,0(r6)
    5c98:	89400017 	ldw	r5,0(r17)
    5c9c:	31800104 	addi	r6,r6,4
    5ca0:	20bfffcc 	andi	r2,r4,65535
    5ca4:	10c7883a 	add	r3,r2,r3
    5ca8:	28bfffcc 	andi	r2,r5,65535
    5cac:	1885c83a 	sub	r2,r3,r2
    5cb0:	280ad43a 	srli	r5,r5,16
    5cb4:	2008d43a 	srli	r4,r4,16
    5cb8:	1007d43a 	srai	r3,r2,16
    5cbc:	10bfffcc 	andi	r2,r2,65535
    5cc0:	2149c83a 	sub	r4,r4,r5
    5cc4:	20c9883a 	add	r4,r4,r3
    5cc8:	200a943a 	slli	r5,r4,16
    5ccc:	8c400104 	addi	r17,r17,4
    5cd0:	2007d43a 	srai	r3,r4,16
    5cd4:	2884b03a 	or	r2,r5,r2
    5cd8:	30bfff15 	stw	r2,-4(r6)
    5cdc:	e47fed2e 	bgeu	fp,r17,5c94 <__alt_data_end+0xfc005c94>
    5ce0:	bdc5883a 	add	r2,r23,r23
    5ce4:	1085883a 	add	r2,r2,r2
    5ce8:	9887883a 	add	r3,r19,r2
    5cec:	18800017 	ldw	r2,0(r3)
    5cf0:	10000c1e 	bne	r2,zero,5d24 <quorem+0x1ec>
    5cf4:	18bfff04 	addi	r2,r3,-4
    5cf8:	9880082e 	bgeu	r19,r2,5d1c <quorem+0x1e4>
    5cfc:	18ffff17 	ldw	r3,-4(r3)
    5d00:	18000326 	beq	r3,zero,5d10 <quorem+0x1d8>
    5d04:	00000506 	br	5d1c <quorem+0x1e4>
    5d08:	10c00017 	ldw	r3,0(r2)
    5d0c:	1800031e 	bne	r3,zero,5d1c <quorem+0x1e4>
    5d10:	10bfff04 	addi	r2,r2,-4
    5d14:	bdffffc4 	addi	r23,r23,-1
    5d18:	98bffb36 	bltu	r19,r2,5d08 <__alt_data_end+0xfc005d08>
    5d1c:	d8c00017 	ldw	r3,0(sp)
    5d20:	1dc00415 	stw	r23,16(r3)
    5d24:	9005883a 	mov	r2,r18
    5d28:	dfc00d17 	ldw	ra,52(sp)
    5d2c:	df000c17 	ldw	fp,48(sp)
    5d30:	ddc00b17 	ldw	r23,44(sp)
    5d34:	dd800a17 	ldw	r22,40(sp)
    5d38:	dd400917 	ldw	r21,36(sp)
    5d3c:	dd000817 	ldw	r20,32(sp)
    5d40:	dcc00717 	ldw	r19,28(sp)
    5d44:	dc800617 	ldw	r18,24(sp)
    5d48:	dc400517 	ldw	r17,20(sp)
    5d4c:	dc000417 	ldw	r16,16(sp)
    5d50:	dec00e04 	addi	sp,sp,56
    5d54:	f800283a 	ret
    5d58:	0005883a 	mov	r2,zero
    5d5c:	003ff206 	br	5d28 <__alt_data_end+0xfc005d28>

00005d60 <_dtoa_r>:
    5d60:	20801017 	ldw	r2,64(r4)
    5d64:	deffde04 	addi	sp,sp,-136
    5d68:	df002015 	stw	fp,128(sp)
    5d6c:	dcc01b15 	stw	r19,108(sp)
    5d70:	dc801a15 	stw	r18,104(sp)
    5d74:	dc401915 	stw	r17,100(sp)
    5d78:	dc001815 	stw	r16,96(sp)
    5d7c:	dfc02115 	stw	ra,132(sp)
    5d80:	ddc01f15 	stw	r23,124(sp)
    5d84:	dd801e15 	stw	r22,120(sp)
    5d88:	dd401d15 	stw	r21,116(sp)
    5d8c:	dd001c15 	stw	r20,112(sp)
    5d90:	d9c00315 	stw	r7,12(sp)
    5d94:	2039883a 	mov	fp,r4
    5d98:	3023883a 	mov	r17,r6
    5d9c:	2825883a 	mov	r18,r5
    5da0:	dc002417 	ldw	r16,144(sp)
    5da4:	3027883a 	mov	r19,r6
    5da8:	10000826 	beq	r2,zero,5dcc <_dtoa_r+0x6c>
    5dac:	21801117 	ldw	r6,68(r4)
    5db0:	00c00044 	movi	r3,1
    5db4:	100b883a 	mov	r5,r2
    5db8:	1986983a 	sll	r3,r3,r6
    5dbc:	11800115 	stw	r6,4(r2)
    5dc0:	10c00215 	stw	r3,8(r2)
    5dc4:	00094c00 	call	94c0 <_Bfree>
    5dc8:	e0001015 	stw	zero,64(fp)
    5dcc:	88002e16 	blt	r17,zero,5e88 <_dtoa_r+0x128>
    5dd0:	80000015 	stw	zero,0(r16)
    5dd4:	889ffc2c 	andhi	r2,r17,32752
    5dd8:	00dffc34 	movhi	r3,32752
    5ddc:	10c01c26 	beq	r2,r3,5e50 <_dtoa_r+0xf0>
    5de0:	000d883a 	mov	r6,zero
    5de4:	000f883a 	mov	r7,zero
    5de8:	9009883a 	mov	r4,r18
    5dec:	980b883a 	mov	r5,r19
    5df0:	000ecfc0 	call	ecfc <__eqdf2>
    5df4:	10002b1e 	bne	r2,zero,5ea4 <_dtoa_r+0x144>
    5df8:	d9c02317 	ldw	r7,140(sp)
    5dfc:	00800044 	movi	r2,1
    5e00:	38800015 	stw	r2,0(r7)
    5e04:	d8802517 	ldw	r2,148(sp)
    5e08:	10019e26 	beq	r2,zero,6484 <_dtoa_r+0x724>
    5e0c:	d8c02517 	ldw	r3,148(sp)
    5e10:	00800074 	movhi	r2,1
    5e14:	10944544 	addi	r2,r2,20757
    5e18:	18800015 	stw	r2,0(r3)
    5e1c:	10bfffc4 	addi	r2,r2,-1
    5e20:	dfc02117 	ldw	ra,132(sp)
    5e24:	df002017 	ldw	fp,128(sp)
    5e28:	ddc01f17 	ldw	r23,124(sp)
    5e2c:	dd801e17 	ldw	r22,120(sp)
    5e30:	dd401d17 	ldw	r21,116(sp)
    5e34:	dd001c17 	ldw	r20,112(sp)
    5e38:	dcc01b17 	ldw	r19,108(sp)
    5e3c:	dc801a17 	ldw	r18,104(sp)
    5e40:	dc401917 	ldw	r17,100(sp)
    5e44:	dc001817 	ldw	r16,96(sp)
    5e48:	dec02204 	addi	sp,sp,136
    5e4c:	f800283a 	ret
    5e50:	d8c02317 	ldw	r3,140(sp)
    5e54:	0089c3c4 	movi	r2,9999
    5e58:	18800015 	stw	r2,0(r3)
    5e5c:	90017726 	beq	r18,zero,643c <_dtoa_r+0x6dc>
    5e60:	00800074 	movhi	r2,1
    5e64:	10945104 	addi	r2,r2,20804
    5e68:	d9002517 	ldw	r4,148(sp)
    5e6c:	203fec26 	beq	r4,zero,5e20 <__alt_data_end+0xfc005e20>
    5e70:	10c000c7 	ldb	r3,3(r2)
    5e74:	1801781e 	bne	r3,zero,6458 <_dtoa_r+0x6f8>
    5e78:	10c000c4 	addi	r3,r2,3
    5e7c:	d9802517 	ldw	r6,148(sp)
    5e80:	30c00015 	stw	r3,0(r6)
    5e84:	003fe606 	br	5e20 <__alt_data_end+0xfc005e20>
    5e88:	04e00034 	movhi	r19,32768
    5e8c:	9cffffc4 	addi	r19,r19,-1
    5e90:	00800044 	movi	r2,1
    5e94:	8ce6703a 	and	r19,r17,r19
    5e98:	80800015 	stw	r2,0(r16)
    5e9c:	9823883a 	mov	r17,r19
    5ea0:	003fcc06 	br	5dd4 <__alt_data_end+0xfc005dd4>
    5ea4:	d8800204 	addi	r2,sp,8
    5ea8:	d8800015 	stw	r2,0(sp)
    5eac:	d9c00104 	addi	r7,sp,4
    5eb0:	900b883a 	mov	r5,r18
    5eb4:	980d883a 	mov	r6,r19
    5eb8:	e009883a 	mov	r4,fp
    5ebc:	8820d53a 	srli	r16,r17,20
    5ec0:	000a1680 	call	a168 <__d2b>
    5ec4:	d8800915 	stw	r2,36(sp)
    5ec8:	8001651e 	bne	r16,zero,6460 <_dtoa_r+0x700>
    5ecc:	dd800217 	ldw	r22,8(sp)
    5ed0:	dc000117 	ldw	r16,4(sp)
    5ed4:	00800804 	movi	r2,32
    5ed8:	b421883a 	add	r16,r22,r16
    5edc:	80c10c84 	addi	r3,r16,1074
    5ee0:	10c2d10e 	bge	r2,r3,6a28 <_dtoa_r+0xcc8>
    5ee4:	00801004 	movi	r2,64
    5ee8:	81010484 	addi	r4,r16,1042
    5eec:	10c7c83a 	sub	r3,r2,r3
    5ef0:	9108d83a 	srl	r4,r18,r4
    5ef4:	88e2983a 	sll	r17,r17,r3
    5ef8:	2448b03a 	or	r4,r4,r17
    5efc:	00102180 	call	10218 <__floatunsidf>
    5f00:	017f8434 	movhi	r5,65040
    5f04:	01800044 	movi	r6,1
    5f08:	1009883a 	mov	r4,r2
    5f0c:	194b883a 	add	r5,r3,r5
    5f10:	843fffc4 	addi	r16,r16,-1
    5f14:	d9801115 	stw	r6,68(sp)
    5f18:	000d883a 	mov	r6,zero
    5f1c:	01cffe34 	movhi	r7,16376
    5f20:	000f7c00 	call	f7c0 <__subdf3>
    5f24:	0198dbf4 	movhi	r6,25455
    5f28:	01cff4f4 	movhi	r7,16339
    5f2c:	3190d844 	addi	r6,r6,17249
    5f30:	39e1e9c4 	addi	r7,r7,-30809
    5f34:	1009883a 	mov	r4,r2
    5f38:	180b883a 	mov	r5,r3
    5f3c:	000ef540 	call	ef54 <__muldf3>
    5f40:	01a2d874 	movhi	r6,35681
    5f44:	01cff1f4 	movhi	r7,16327
    5f48:	31b22cc4 	addi	r6,r6,-14157
    5f4c:	39e28a04 	addi	r7,r7,-30168
    5f50:	180b883a 	mov	r5,r3
    5f54:	1009883a 	mov	r4,r2
    5f58:	000da800 	call	da80 <__adddf3>
    5f5c:	8009883a 	mov	r4,r16
    5f60:	1029883a 	mov	r20,r2
    5f64:	1823883a 	mov	r17,r3
    5f68:	001013c0 	call	1013c <__floatsidf>
    5f6c:	019427f4 	movhi	r6,20639
    5f70:	01cff4f4 	movhi	r7,16339
    5f74:	319e7ec4 	addi	r6,r6,31227
    5f78:	39d104c4 	addi	r7,r7,17427
    5f7c:	1009883a 	mov	r4,r2
    5f80:	180b883a 	mov	r5,r3
    5f84:	000ef540 	call	ef54 <__muldf3>
    5f88:	100d883a 	mov	r6,r2
    5f8c:	180f883a 	mov	r7,r3
    5f90:	a009883a 	mov	r4,r20
    5f94:	880b883a 	mov	r5,r17
    5f98:	000da800 	call	da80 <__adddf3>
    5f9c:	1009883a 	mov	r4,r2
    5fa0:	180b883a 	mov	r5,r3
    5fa4:	1029883a 	mov	r20,r2
    5fa8:	1823883a 	mov	r17,r3
    5fac:	00100bc0 	call	100bc <__fixdfsi>
    5fb0:	000d883a 	mov	r6,zero
    5fb4:	000f883a 	mov	r7,zero
    5fb8:	a009883a 	mov	r4,r20
    5fbc:	880b883a 	mov	r5,r17
    5fc0:	d8800515 	stw	r2,20(sp)
    5fc4:	000ee600 	call	ee60 <__ledf2>
    5fc8:	10028716 	blt	r2,zero,69e8 <_dtoa_r+0xc88>
    5fcc:	d8c00517 	ldw	r3,20(sp)
    5fd0:	00800584 	movi	r2,22
    5fd4:	10c27536 	bltu	r2,r3,69ac <_dtoa_r+0xc4c>
    5fd8:	180490fa 	slli	r2,r3,3
    5fdc:	00c00074 	movhi	r3,1
    5fe0:	18d46d04 	addi	r3,r3,20916
    5fe4:	1885883a 	add	r2,r3,r2
    5fe8:	11000017 	ldw	r4,0(r2)
    5fec:	11400117 	ldw	r5,4(r2)
    5ff0:	900d883a 	mov	r6,r18
    5ff4:	980f883a 	mov	r7,r19
    5ff8:	000ed840 	call	ed84 <__gedf2>
    5ffc:	00828d0e 	bge	zero,r2,6a34 <_dtoa_r+0xcd4>
    6000:	d9000517 	ldw	r4,20(sp)
    6004:	d8000e15 	stw	zero,56(sp)
    6008:	213fffc4 	addi	r4,r4,-1
    600c:	d9000515 	stw	r4,20(sp)
    6010:	b42dc83a 	sub	r22,r22,r16
    6014:	b5bfffc4 	addi	r22,r22,-1
    6018:	b0026f16 	blt	r22,zero,69d8 <_dtoa_r+0xc78>
    601c:	d8000815 	stw	zero,32(sp)
    6020:	d9c00517 	ldw	r7,20(sp)
    6024:	38026416 	blt	r7,zero,69b8 <_dtoa_r+0xc58>
    6028:	b1ed883a 	add	r22,r22,r7
    602c:	d9c00d15 	stw	r7,52(sp)
    6030:	d8000a15 	stw	zero,40(sp)
    6034:	d9800317 	ldw	r6,12(sp)
    6038:	00800244 	movi	r2,9
    603c:	11811436 	bltu	r2,r6,6490 <_dtoa_r+0x730>
    6040:	00800144 	movi	r2,5
    6044:	1184e10e 	bge	r2,r6,73cc <_dtoa_r+0x166c>
    6048:	31bfff04 	addi	r6,r6,-4
    604c:	d9800315 	stw	r6,12(sp)
    6050:	0023883a 	mov	r17,zero
    6054:	d9800317 	ldw	r6,12(sp)
    6058:	008000c4 	movi	r2,3
    605c:	30836726 	beq	r6,r2,6dfc <_dtoa_r+0x109c>
    6060:	1183410e 	bge	r2,r6,6d68 <_dtoa_r+0x1008>
    6064:	d9c00317 	ldw	r7,12(sp)
    6068:	00800104 	movi	r2,4
    606c:	38827c26 	beq	r7,r2,6a60 <_dtoa_r+0xd00>
    6070:	00800144 	movi	r2,5
    6074:	3884c41e 	bne	r7,r2,7388 <_dtoa_r+0x1628>
    6078:	00800044 	movi	r2,1
    607c:	d8800b15 	stw	r2,44(sp)
    6080:	d8c00517 	ldw	r3,20(sp)
    6084:	d9002217 	ldw	r4,136(sp)
    6088:	1907883a 	add	r3,r3,r4
    608c:	19800044 	addi	r6,r3,1
    6090:	d8c00c15 	stw	r3,48(sp)
    6094:	d9800615 	stw	r6,24(sp)
    6098:	0183a40e 	bge	zero,r6,6f2c <_dtoa_r+0x11cc>
    609c:	d9800617 	ldw	r6,24(sp)
    60a0:	3021883a 	mov	r16,r6
    60a4:	e0001115 	stw	zero,68(fp)
    60a8:	008005c4 	movi	r2,23
    60ac:	1184c92e 	bgeu	r2,r6,73d4 <_dtoa_r+0x1674>
    60b0:	00c00044 	movi	r3,1
    60b4:	00800104 	movi	r2,4
    60b8:	1085883a 	add	r2,r2,r2
    60bc:	11000504 	addi	r4,r2,20
    60c0:	180b883a 	mov	r5,r3
    60c4:	18c00044 	addi	r3,r3,1
    60c8:	313ffb2e 	bgeu	r6,r4,60b8 <__alt_data_end+0xfc0060b8>
    60cc:	e1401115 	stw	r5,68(fp)
    60d0:	e009883a 	mov	r4,fp
    60d4:	00094180 	call	9418 <_Balloc>
    60d8:	d8800715 	stw	r2,28(sp)
    60dc:	e0801015 	stw	r2,64(fp)
    60e0:	00800384 	movi	r2,14
    60e4:	1400f736 	bltu	r2,r16,64c4 <_dtoa_r+0x764>
    60e8:	8800f626 	beq	r17,zero,64c4 <_dtoa_r+0x764>
    60ec:	d9c00517 	ldw	r7,20(sp)
    60f0:	01c39a0e 	bge	zero,r7,6f5c <_dtoa_r+0x11fc>
    60f4:	388003cc 	andi	r2,r7,15
    60f8:	100490fa 	slli	r2,r2,3
    60fc:	382bd13a 	srai	r21,r7,4
    6100:	00c00074 	movhi	r3,1
    6104:	18d46d04 	addi	r3,r3,20916
    6108:	1885883a 	add	r2,r3,r2
    610c:	a8c0040c 	andi	r3,r21,16
    6110:	12400017 	ldw	r9,0(r2)
    6114:	12000117 	ldw	r8,4(r2)
    6118:	18037926 	beq	r3,zero,6f00 <_dtoa_r+0x11a0>
    611c:	00800074 	movhi	r2,1
    6120:	10946304 	addi	r2,r2,20876
    6124:	11800817 	ldw	r6,32(r2)
    6128:	11c00917 	ldw	r7,36(r2)
    612c:	9009883a 	mov	r4,r18
    6130:	980b883a 	mov	r5,r19
    6134:	da001715 	stw	r8,92(sp)
    6138:	da401615 	stw	r9,88(sp)
    613c:	000e32c0 	call	e32c <__divdf3>
    6140:	da001717 	ldw	r8,92(sp)
    6144:	da401617 	ldw	r9,88(sp)
    6148:	ad4003cc 	andi	r21,r21,15
    614c:	040000c4 	movi	r16,3
    6150:	1023883a 	mov	r17,r2
    6154:	1829883a 	mov	r20,r3
    6158:	a8001126 	beq	r21,zero,61a0 <_dtoa_r+0x440>
    615c:	05c00074 	movhi	r23,1
    6160:	bdd46304 	addi	r23,r23,20876
    6164:	4805883a 	mov	r2,r9
    6168:	4007883a 	mov	r3,r8
    616c:	a980004c 	andi	r6,r21,1
    6170:	1009883a 	mov	r4,r2
    6174:	a82bd07a 	srai	r21,r21,1
    6178:	180b883a 	mov	r5,r3
    617c:	30000426 	beq	r6,zero,6190 <_dtoa_r+0x430>
    6180:	b9800017 	ldw	r6,0(r23)
    6184:	b9c00117 	ldw	r7,4(r23)
    6188:	84000044 	addi	r16,r16,1
    618c:	000ef540 	call	ef54 <__muldf3>
    6190:	bdc00204 	addi	r23,r23,8
    6194:	a83ff51e 	bne	r21,zero,616c <__alt_data_end+0xfc00616c>
    6198:	1013883a 	mov	r9,r2
    619c:	1811883a 	mov	r8,r3
    61a0:	480d883a 	mov	r6,r9
    61a4:	400f883a 	mov	r7,r8
    61a8:	8809883a 	mov	r4,r17
    61ac:	a00b883a 	mov	r5,r20
    61b0:	000e32c0 	call	e32c <__divdf3>
    61b4:	d8800f15 	stw	r2,60(sp)
    61b8:	d8c01015 	stw	r3,64(sp)
    61bc:	d8c00e17 	ldw	r3,56(sp)
    61c0:	18000626 	beq	r3,zero,61dc <_dtoa_r+0x47c>
    61c4:	d9000f17 	ldw	r4,60(sp)
    61c8:	d9401017 	ldw	r5,64(sp)
    61cc:	000d883a 	mov	r6,zero
    61d0:	01cffc34 	movhi	r7,16368
    61d4:	000ee600 	call	ee60 <__ledf2>
    61d8:	10040b16 	blt	r2,zero,7208 <_dtoa_r+0x14a8>
    61dc:	8009883a 	mov	r4,r16
    61e0:	001013c0 	call	1013c <__floatsidf>
    61e4:	d9800f17 	ldw	r6,60(sp)
    61e8:	d9c01017 	ldw	r7,64(sp)
    61ec:	1009883a 	mov	r4,r2
    61f0:	180b883a 	mov	r5,r3
    61f4:	000ef540 	call	ef54 <__muldf3>
    61f8:	000d883a 	mov	r6,zero
    61fc:	01d00734 	movhi	r7,16412
    6200:	1009883a 	mov	r4,r2
    6204:	180b883a 	mov	r5,r3
    6208:	000da800 	call	da80 <__adddf3>
    620c:	1021883a 	mov	r16,r2
    6210:	d8800617 	ldw	r2,24(sp)
    6214:	047f3034 	movhi	r17,64704
    6218:	1c63883a 	add	r17,r3,r17
    621c:	10031826 	beq	r2,zero,6e80 <_dtoa_r+0x1120>
    6220:	d8c00517 	ldw	r3,20(sp)
    6224:	db000617 	ldw	r12,24(sp)
    6228:	d8c01315 	stw	r3,76(sp)
    622c:	d9000b17 	ldw	r4,44(sp)
    6230:	20038f26 	beq	r4,zero,7070 <_dtoa_r+0x1310>
    6234:	60bfffc4 	addi	r2,r12,-1
    6238:	100490fa 	slli	r2,r2,3
    623c:	00c00074 	movhi	r3,1
    6240:	18d46d04 	addi	r3,r3,20916
    6244:	1885883a 	add	r2,r3,r2
    6248:	11800017 	ldw	r6,0(r2)
    624c:	11c00117 	ldw	r7,4(r2)
    6250:	d8800717 	ldw	r2,28(sp)
    6254:	0009883a 	mov	r4,zero
    6258:	014ff834 	movhi	r5,16352
    625c:	db001615 	stw	r12,88(sp)
    6260:	15c00044 	addi	r23,r2,1
    6264:	000e32c0 	call	e32c <__divdf3>
    6268:	800d883a 	mov	r6,r16
    626c:	880f883a 	mov	r7,r17
    6270:	1009883a 	mov	r4,r2
    6274:	180b883a 	mov	r5,r3
    6278:	000f7c00 	call	f7c0 <__subdf3>
    627c:	d9401017 	ldw	r5,64(sp)
    6280:	d9000f17 	ldw	r4,60(sp)
    6284:	102b883a 	mov	r21,r2
    6288:	d8c01215 	stw	r3,72(sp)
    628c:	00100bc0 	call	100bc <__fixdfsi>
    6290:	1009883a 	mov	r4,r2
    6294:	1029883a 	mov	r20,r2
    6298:	001013c0 	call	1013c <__floatsidf>
    629c:	d9000f17 	ldw	r4,60(sp)
    62a0:	d9401017 	ldw	r5,64(sp)
    62a4:	100d883a 	mov	r6,r2
    62a8:	180f883a 	mov	r7,r3
    62ac:	000f7c00 	call	f7c0 <__subdf3>
    62b0:	1823883a 	mov	r17,r3
    62b4:	d8c00717 	ldw	r3,28(sp)
    62b8:	d9401217 	ldw	r5,72(sp)
    62bc:	a2000c04 	addi	r8,r20,48
    62c0:	1021883a 	mov	r16,r2
    62c4:	1a000005 	stb	r8,0(r3)
    62c8:	800d883a 	mov	r6,r16
    62cc:	880f883a 	mov	r7,r17
    62d0:	a809883a 	mov	r4,r21
    62d4:	4029883a 	mov	r20,r8
    62d8:	000ed840 	call	ed84 <__gedf2>
    62dc:	00841d16 	blt	zero,r2,7354 <_dtoa_r+0x15f4>
    62e0:	800d883a 	mov	r6,r16
    62e4:	880f883a 	mov	r7,r17
    62e8:	0009883a 	mov	r4,zero
    62ec:	014ffc34 	movhi	r5,16368
    62f0:	000f7c00 	call	f7c0 <__subdf3>
    62f4:	d9401217 	ldw	r5,72(sp)
    62f8:	100d883a 	mov	r6,r2
    62fc:	180f883a 	mov	r7,r3
    6300:	a809883a 	mov	r4,r21
    6304:	000ed840 	call	ed84 <__gedf2>
    6308:	db001617 	ldw	r12,88(sp)
    630c:	00840e16 	blt	zero,r2,7348 <_dtoa_r+0x15e8>
    6310:	00800044 	movi	r2,1
    6314:	13006b0e 	bge	r2,r12,64c4 <_dtoa_r+0x764>
    6318:	d9000717 	ldw	r4,28(sp)
    631c:	dd800f15 	stw	r22,60(sp)
    6320:	dcc01015 	stw	r19,64(sp)
    6324:	2319883a 	add	r12,r4,r12
    6328:	dcc01217 	ldw	r19,72(sp)
    632c:	602d883a 	mov	r22,r12
    6330:	dc801215 	stw	r18,72(sp)
    6334:	b825883a 	mov	r18,r23
    6338:	00000906 	br	6360 <_dtoa_r+0x600>
    633c:	000f7c00 	call	f7c0 <__subdf3>
    6340:	a80d883a 	mov	r6,r21
    6344:	980f883a 	mov	r7,r19
    6348:	1009883a 	mov	r4,r2
    634c:	180b883a 	mov	r5,r3
    6350:	000ee600 	call	ee60 <__ledf2>
    6354:	1003e816 	blt	r2,zero,72f8 <_dtoa_r+0x1598>
    6358:	b825883a 	mov	r18,r23
    635c:	bd83e926 	beq	r23,r22,7304 <_dtoa_r+0x15a4>
    6360:	a809883a 	mov	r4,r21
    6364:	980b883a 	mov	r5,r19
    6368:	000d883a 	mov	r6,zero
    636c:	01d00934 	movhi	r7,16420
    6370:	000ef540 	call	ef54 <__muldf3>
    6374:	000d883a 	mov	r6,zero
    6378:	01d00934 	movhi	r7,16420
    637c:	8009883a 	mov	r4,r16
    6380:	880b883a 	mov	r5,r17
    6384:	102b883a 	mov	r21,r2
    6388:	1827883a 	mov	r19,r3
    638c:	000ef540 	call	ef54 <__muldf3>
    6390:	180b883a 	mov	r5,r3
    6394:	1009883a 	mov	r4,r2
    6398:	1821883a 	mov	r16,r3
    639c:	1023883a 	mov	r17,r2
    63a0:	00100bc0 	call	100bc <__fixdfsi>
    63a4:	1009883a 	mov	r4,r2
    63a8:	1029883a 	mov	r20,r2
    63ac:	001013c0 	call	1013c <__floatsidf>
    63b0:	8809883a 	mov	r4,r17
    63b4:	800b883a 	mov	r5,r16
    63b8:	100d883a 	mov	r6,r2
    63bc:	180f883a 	mov	r7,r3
    63c0:	000f7c00 	call	f7c0 <__subdf3>
    63c4:	a5000c04 	addi	r20,r20,48
    63c8:	a80d883a 	mov	r6,r21
    63cc:	980f883a 	mov	r7,r19
    63d0:	1009883a 	mov	r4,r2
    63d4:	180b883a 	mov	r5,r3
    63d8:	95000005 	stb	r20,0(r18)
    63dc:	1021883a 	mov	r16,r2
    63e0:	1823883a 	mov	r17,r3
    63e4:	000ee600 	call	ee60 <__ledf2>
    63e8:	bdc00044 	addi	r23,r23,1
    63ec:	800d883a 	mov	r6,r16
    63f0:	880f883a 	mov	r7,r17
    63f4:	0009883a 	mov	r4,zero
    63f8:	014ffc34 	movhi	r5,16368
    63fc:	103fcf0e 	bge	r2,zero,633c <__alt_data_end+0xfc00633c>
    6400:	d8c01317 	ldw	r3,76(sp)
    6404:	d8c00515 	stw	r3,20(sp)
    6408:	d9400917 	ldw	r5,36(sp)
    640c:	e009883a 	mov	r4,fp
    6410:	00094c00 	call	94c0 <_Bfree>
    6414:	d9000517 	ldw	r4,20(sp)
    6418:	d9802317 	ldw	r6,140(sp)
    641c:	d9c02517 	ldw	r7,148(sp)
    6420:	b8000005 	stb	zero,0(r23)
    6424:	20800044 	addi	r2,r4,1
    6428:	30800015 	stw	r2,0(r6)
    642c:	3802aa26 	beq	r7,zero,6ed8 <_dtoa_r+0x1178>
    6430:	3dc00015 	stw	r23,0(r7)
    6434:	d8800717 	ldw	r2,28(sp)
    6438:	003e7906 	br	5e20 <__alt_data_end+0xfc005e20>
    643c:	00800434 	movhi	r2,16
    6440:	10bfffc4 	addi	r2,r2,-1
    6444:	88a2703a 	and	r17,r17,r2
    6448:	883e851e 	bne	r17,zero,5e60 <__alt_data_end+0xfc005e60>
    644c:	00800074 	movhi	r2,1
    6450:	10944e04 	addi	r2,r2,20792
    6454:	003e8406 	br	5e68 <__alt_data_end+0xfc005e68>
    6458:	10c00204 	addi	r3,r2,8
    645c:	003e8706 	br	5e7c <__alt_data_end+0xfc005e7c>
    6460:	01400434 	movhi	r5,16
    6464:	297fffc4 	addi	r5,r5,-1
    6468:	994a703a 	and	r5,r19,r5
    646c:	9009883a 	mov	r4,r18
    6470:	843f0044 	addi	r16,r16,-1023
    6474:	294ffc34 	orhi	r5,r5,16368
    6478:	dd800217 	ldw	r22,8(sp)
    647c:	d8001115 	stw	zero,68(sp)
    6480:	003ea506 	br	5f18 <__alt_data_end+0xfc005f18>
    6484:	00800074 	movhi	r2,1
    6488:	10944504 	addi	r2,r2,20756
    648c:	003e6406 	br	5e20 <__alt_data_end+0xfc005e20>
    6490:	e0001115 	stw	zero,68(fp)
    6494:	000b883a 	mov	r5,zero
    6498:	e009883a 	mov	r4,fp
    649c:	00094180 	call	9418 <_Balloc>
    64a0:	01bfffc4 	movi	r6,-1
    64a4:	01c00044 	movi	r7,1
    64a8:	d8800715 	stw	r2,28(sp)
    64ac:	d9800c15 	stw	r6,48(sp)
    64b0:	e0801015 	stw	r2,64(fp)
    64b4:	d8000315 	stw	zero,12(sp)
    64b8:	d9c00b15 	stw	r7,44(sp)
    64bc:	d9800615 	stw	r6,24(sp)
    64c0:	d8002215 	stw	zero,136(sp)
    64c4:	d8800117 	ldw	r2,4(sp)
    64c8:	10008916 	blt	r2,zero,66f0 <_dtoa_r+0x990>
    64cc:	d9000517 	ldw	r4,20(sp)
    64d0:	00c00384 	movi	r3,14
    64d4:	19008616 	blt	r3,r4,66f0 <_dtoa_r+0x990>
    64d8:	200490fa 	slli	r2,r4,3
    64dc:	00c00074 	movhi	r3,1
    64e0:	d9802217 	ldw	r6,136(sp)
    64e4:	18d46d04 	addi	r3,r3,20916
    64e8:	1885883a 	add	r2,r3,r2
    64ec:	14000017 	ldw	r16,0(r2)
    64f0:	14400117 	ldw	r17,4(r2)
    64f4:	30016316 	blt	r6,zero,6a84 <_dtoa_r+0xd24>
    64f8:	800d883a 	mov	r6,r16
    64fc:	880f883a 	mov	r7,r17
    6500:	9009883a 	mov	r4,r18
    6504:	980b883a 	mov	r5,r19
    6508:	000e32c0 	call	e32c <__divdf3>
    650c:	180b883a 	mov	r5,r3
    6510:	1009883a 	mov	r4,r2
    6514:	00100bc0 	call	100bc <__fixdfsi>
    6518:	1009883a 	mov	r4,r2
    651c:	102b883a 	mov	r21,r2
    6520:	001013c0 	call	1013c <__floatsidf>
    6524:	800d883a 	mov	r6,r16
    6528:	880f883a 	mov	r7,r17
    652c:	1009883a 	mov	r4,r2
    6530:	180b883a 	mov	r5,r3
    6534:	000ef540 	call	ef54 <__muldf3>
    6538:	100d883a 	mov	r6,r2
    653c:	180f883a 	mov	r7,r3
    6540:	9009883a 	mov	r4,r18
    6544:	980b883a 	mov	r5,r19
    6548:	000f7c00 	call	f7c0 <__subdf3>
    654c:	d9c00717 	ldw	r7,28(sp)
    6550:	1009883a 	mov	r4,r2
    6554:	a8800c04 	addi	r2,r21,48
    6558:	38800005 	stb	r2,0(r7)
    655c:	3dc00044 	addi	r23,r7,1
    6560:	d9c00617 	ldw	r7,24(sp)
    6564:	01800044 	movi	r6,1
    6568:	180b883a 	mov	r5,r3
    656c:	2005883a 	mov	r2,r4
    6570:	39803826 	beq	r7,r6,6654 <_dtoa_r+0x8f4>
    6574:	000d883a 	mov	r6,zero
    6578:	01d00934 	movhi	r7,16420
    657c:	000ef540 	call	ef54 <__muldf3>
    6580:	000d883a 	mov	r6,zero
    6584:	000f883a 	mov	r7,zero
    6588:	1009883a 	mov	r4,r2
    658c:	180b883a 	mov	r5,r3
    6590:	1025883a 	mov	r18,r2
    6594:	1827883a 	mov	r19,r3
    6598:	000ecfc0 	call	ecfc <__eqdf2>
    659c:	103f9a26 	beq	r2,zero,6408 <__alt_data_end+0xfc006408>
    65a0:	d9c00617 	ldw	r7,24(sp)
    65a4:	d8c00717 	ldw	r3,28(sp)
    65a8:	b829883a 	mov	r20,r23
    65ac:	38bfffc4 	addi	r2,r7,-1
    65b0:	18ad883a 	add	r22,r3,r2
    65b4:	00000a06 	br	65e0 <_dtoa_r+0x880>
    65b8:	000ef540 	call	ef54 <__muldf3>
    65bc:	000d883a 	mov	r6,zero
    65c0:	000f883a 	mov	r7,zero
    65c4:	1009883a 	mov	r4,r2
    65c8:	180b883a 	mov	r5,r3
    65cc:	1025883a 	mov	r18,r2
    65d0:	1827883a 	mov	r19,r3
    65d4:	b829883a 	mov	r20,r23
    65d8:	000ecfc0 	call	ecfc <__eqdf2>
    65dc:	103f8a26 	beq	r2,zero,6408 <__alt_data_end+0xfc006408>
    65e0:	800d883a 	mov	r6,r16
    65e4:	880f883a 	mov	r7,r17
    65e8:	9009883a 	mov	r4,r18
    65ec:	980b883a 	mov	r5,r19
    65f0:	000e32c0 	call	e32c <__divdf3>
    65f4:	180b883a 	mov	r5,r3
    65f8:	1009883a 	mov	r4,r2
    65fc:	00100bc0 	call	100bc <__fixdfsi>
    6600:	1009883a 	mov	r4,r2
    6604:	102b883a 	mov	r21,r2
    6608:	001013c0 	call	1013c <__floatsidf>
    660c:	800d883a 	mov	r6,r16
    6610:	880f883a 	mov	r7,r17
    6614:	1009883a 	mov	r4,r2
    6618:	180b883a 	mov	r5,r3
    661c:	000ef540 	call	ef54 <__muldf3>
    6620:	100d883a 	mov	r6,r2
    6624:	180f883a 	mov	r7,r3
    6628:	9009883a 	mov	r4,r18
    662c:	980b883a 	mov	r5,r19
    6630:	000f7c00 	call	f7c0 <__subdf3>
    6634:	aa000c04 	addi	r8,r21,48
    6638:	a2000005 	stb	r8,0(r20)
    663c:	000d883a 	mov	r6,zero
    6640:	01d00934 	movhi	r7,16420
    6644:	1009883a 	mov	r4,r2
    6648:	180b883a 	mov	r5,r3
    664c:	a5c00044 	addi	r23,r20,1
    6650:	b53fd91e 	bne	r22,r20,65b8 <__alt_data_end+0xfc0065b8>
    6654:	100d883a 	mov	r6,r2
    6658:	180f883a 	mov	r7,r3
    665c:	1009883a 	mov	r4,r2
    6660:	180b883a 	mov	r5,r3
    6664:	000da800 	call	da80 <__adddf3>
    6668:	100d883a 	mov	r6,r2
    666c:	180f883a 	mov	r7,r3
    6670:	8009883a 	mov	r4,r16
    6674:	880b883a 	mov	r5,r17
    6678:	1027883a 	mov	r19,r2
    667c:	1825883a 	mov	r18,r3
    6680:	000ee600 	call	ee60 <__ledf2>
    6684:	10000816 	blt	r2,zero,66a8 <_dtoa_r+0x948>
    6688:	980d883a 	mov	r6,r19
    668c:	900f883a 	mov	r7,r18
    6690:	8009883a 	mov	r4,r16
    6694:	880b883a 	mov	r5,r17
    6698:	000ecfc0 	call	ecfc <__eqdf2>
    669c:	103f5a1e 	bne	r2,zero,6408 <__alt_data_end+0xfc006408>
    66a0:	ad40004c 	andi	r21,r21,1
    66a4:	a83f5826 	beq	r21,zero,6408 <__alt_data_end+0xfc006408>
    66a8:	bd3fffc3 	ldbu	r20,-1(r23)
    66ac:	b8bfffc4 	addi	r2,r23,-1
    66b0:	1007883a 	mov	r3,r2
    66b4:	01400e44 	movi	r5,57
    66b8:	d9800717 	ldw	r6,28(sp)
    66bc:	00000506 	br	66d4 <_dtoa_r+0x974>
    66c0:	18ffffc4 	addi	r3,r3,-1
    66c4:	11824726 	beq	r2,r6,6fe4 <_dtoa_r+0x1284>
    66c8:	1d000003 	ldbu	r20,0(r3)
    66cc:	102f883a 	mov	r23,r2
    66d0:	10bfffc4 	addi	r2,r2,-1
    66d4:	a1003fcc 	andi	r4,r20,255
    66d8:	2100201c 	xori	r4,r4,128
    66dc:	213fe004 	addi	r4,r4,-128
    66e0:	217ff726 	beq	r4,r5,66c0 <__alt_data_end+0xfc0066c0>
    66e4:	a2000044 	addi	r8,r20,1
    66e8:	12000005 	stb	r8,0(r2)
    66ec:	003f4606 	br	6408 <__alt_data_end+0xfc006408>
    66f0:	d9000b17 	ldw	r4,44(sp)
    66f4:	2000c826 	beq	r4,zero,6a18 <_dtoa_r+0xcb8>
    66f8:	d9800317 	ldw	r6,12(sp)
    66fc:	00c00044 	movi	r3,1
    6700:	1980f90e 	bge	r3,r6,6ae8 <_dtoa_r+0xd88>
    6704:	d8800617 	ldw	r2,24(sp)
    6708:	d8c00a17 	ldw	r3,40(sp)
    670c:	157fffc4 	addi	r21,r2,-1
    6710:	1d41f316 	blt	r3,r21,6ee0 <_dtoa_r+0x1180>
    6714:	1d6bc83a 	sub	r21,r3,r21
    6718:	d9c00617 	ldw	r7,24(sp)
    671c:	3802aa16 	blt	r7,zero,71c8 <_dtoa_r+0x1468>
    6720:	dd000817 	ldw	r20,32(sp)
    6724:	d8800617 	ldw	r2,24(sp)
    6728:	d8c00817 	ldw	r3,32(sp)
    672c:	01400044 	movi	r5,1
    6730:	e009883a 	mov	r4,fp
    6734:	1887883a 	add	r3,r3,r2
    6738:	d8c00815 	stw	r3,32(sp)
    673c:	b0ad883a 	add	r22,r22,r2
    6740:	000984c0 	call	984c <__i2b>
    6744:	1023883a 	mov	r17,r2
    6748:	a0000826 	beq	r20,zero,676c <_dtoa_r+0xa0c>
    674c:	0580070e 	bge	zero,r22,676c <_dtoa_r+0xa0c>
    6750:	a005883a 	mov	r2,r20
    6754:	b500b916 	blt	r22,r20,6a3c <_dtoa_r+0xcdc>
    6758:	d9000817 	ldw	r4,32(sp)
    675c:	a0a9c83a 	sub	r20,r20,r2
    6760:	b0adc83a 	sub	r22,r22,r2
    6764:	2089c83a 	sub	r4,r4,r2
    6768:	d9000815 	stw	r4,32(sp)
    676c:	d9800a17 	ldw	r6,40(sp)
    6770:	0181810e 	bge	zero,r6,6d78 <_dtoa_r+0x1018>
    6774:	d9c00b17 	ldw	r7,44(sp)
    6778:	3800b326 	beq	r7,zero,6a48 <_dtoa_r+0xce8>
    677c:	a800b226 	beq	r21,zero,6a48 <_dtoa_r+0xce8>
    6780:	880b883a 	mov	r5,r17
    6784:	a80d883a 	mov	r6,r21
    6788:	e009883a 	mov	r4,fp
    678c:	0009b140 	call	9b14 <__pow5mult>
    6790:	d9800917 	ldw	r6,36(sp)
    6794:	100b883a 	mov	r5,r2
    6798:	e009883a 	mov	r4,fp
    679c:	1023883a 	mov	r17,r2
    67a0:	00098880 	call	9888 <__multiply>
    67a4:	1021883a 	mov	r16,r2
    67a8:	d8800a17 	ldw	r2,40(sp)
    67ac:	d9400917 	ldw	r5,36(sp)
    67b0:	e009883a 	mov	r4,fp
    67b4:	1545c83a 	sub	r2,r2,r21
    67b8:	d8800a15 	stw	r2,40(sp)
    67bc:	00094c00 	call	94c0 <_Bfree>
    67c0:	d8c00a17 	ldw	r3,40(sp)
    67c4:	18009f1e 	bne	r3,zero,6a44 <_dtoa_r+0xce4>
    67c8:	05c00044 	movi	r23,1
    67cc:	e009883a 	mov	r4,fp
    67d0:	b80b883a 	mov	r5,r23
    67d4:	000984c0 	call	984c <__i2b>
    67d8:	d9000d17 	ldw	r4,52(sp)
    67dc:	102b883a 	mov	r21,r2
    67e0:	2000ce26 	beq	r4,zero,6b1c <_dtoa_r+0xdbc>
    67e4:	200d883a 	mov	r6,r4
    67e8:	100b883a 	mov	r5,r2
    67ec:	e009883a 	mov	r4,fp
    67f0:	0009b140 	call	9b14 <__pow5mult>
    67f4:	d9800317 	ldw	r6,12(sp)
    67f8:	102b883a 	mov	r21,r2
    67fc:	b981810e 	bge	r23,r6,6e04 <_dtoa_r+0x10a4>
    6800:	0027883a 	mov	r19,zero
    6804:	a8800417 	ldw	r2,16(r21)
    6808:	05c00804 	movi	r23,32
    680c:	10800104 	addi	r2,r2,4
    6810:	1085883a 	add	r2,r2,r2
    6814:	1085883a 	add	r2,r2,r2
    6818:	a885883a 	add	r2,r21,r2
    681c:	11000017 	ldw	r4,0(r2)
    6820:	00097340 	call	9734 <__hi0bits>
    6824:	b885c83a 	sub	r2,r23,r2
    6828:	1585883a 	add	r2,r2,r22
    682c:	108007cc 	andi	r2,r2,31
    6830:	1000b326 	beq	r2,zero,6b00 <_dtoa_r+0xda0>
    6834:	00c00804 	movi	r3,32
    6838:	1887c83a 	sub	r3,r3,r2
    683c:	01000104 	movi	r4,4
    6840:	20c2cd0e 	bge	r4,r3,7378 <_dtoa_r+0x1618>
    6844:	00c00704 	movi	r3,28
    6848:	1885c83a 	sub	r2,r3,r2
    684c:	d8c00817 	ldw	r3,32(sp)
    6850:	a0a9883a 	add	r20,r20,r2
    6854:	b0ad883a 	add	r22,r22,r2
    6858:	1887883a 	add	r3,r3,r2
    685c:	d8c00815 	stw	r3,32(sp)
    6860:	d9800817 	ldw	r6,32(sp)
    6864:	0180040e 	bge	zero,r6,6878 <_dtoa_r+0xb18>
    6868:	800b883a 	mov	r5,r16
    686c:	e009883a 	mov	r4,fp
    6870:	0009c540 	call	9c54 <__lshift>
    6874:	1021883a 	mov	r16,r2
    6878:	0580050e 	bge	zero,r22,6890 <_dtoa_r+0xb30>
    687c:	a80b883a 	mov	r5,r21
    6880:	b00d883a 	mov	r6,r22
    6884:	e009883a 	mov	r4,fp
    6888:	0009c540 	call	9c54 <__lshift>
    688c:	102b883a 	mov	r21,r2
    6890:	d9c00e17 	ldw	r7,56(sp)
    6894:	3801211e 	bne	r7,zero,6d1c <_dtoa_r+0xfbc>
    6898:	d9800617 	ldw	r6,24(sp)
    689c:	0181380e 	bge	zero,r6,6d80 <_dtoa_r+0x1020>
    68a0:	d8c00b17 	ldw	r3,44(sp)
    68a4:	1800ab1e 	bne	r3,zero,6b54 <_dtoa_r+0xdf4>
    68a8:	dc800717 	ldw	r18,28(sp)
    68ac:	dcc00617 	ldw	r19,24(sp)
    68b0:	9029883a 	mov	r20,r18
    68b4:	00000206 	br	68c0 <_dtoa_r+0xb60>
    68b8:	00094e80 	call	94e8 <__multadd>
    68bc:	1021883a 	mov	r16,r2
    68c0:	a80b883a 	mov	r5,r21
    68c4:	8009883a 	mov	r4,r16
    68c8:	0005b380 	call	5b38 <quorem>
    68cc:	10800c04 	addi	r2,r2,48
    68d0:	90800005 	stb	r2,0(r18)
    68d4:	94800044 	addi	r18,r18,1
    68d8:	9507c83a 	sub	r3,r18,r20
    68dc:	000f883a 	mov	r7,zero
    68e0:	01800284 	movi	r6,10
    68e4:	800b883a 	mov	r5,r16
    68e8:	e009883a 	mov	r4,fp
    68ec:	1cfff216 	blt	r3,r19,68b8 <__alt_data_end+0xfc0068b8>
    68f0:	1011883a 	mov	r8,r2
    68f4:	d8800617 	ldw	r2,24(sp)
    68f8:	0082370e 	bge	zero,r2,71d8 <_dtoa_r+0x1478>
    68fc:	d9000717 	ldw	r4,28(sp)
    6900:	0025883a 	mov	r18,zero
    6904:	20af883a 	add	r23,r4,r2
    6908:	01800044 	movi	r6,1
    690c:	800b883a 	mov	r5,r16
    6910:	e009883a 	mov	r4,fp
    6914:	da001715 	stw	r8,92(sp)
    6918:	0009c540 	call	9c54 <__lshift>
    691c:	a80b883a 	mov	r5,r21
    6920:	1009883a 	mov	r4,r2
    6924:	d8800915 	stw	r2,36(sp)
    6928:	0009d9c0 	call	9d9c <__mcmp>
    692c:	da001717 	ldw	r8,92(sp)
    6930:	0081800e 	bge	zero,r2,6f34 <_dtoa_r+0x11d4>
    6934:	b93fffc3 	ldbu	r4,-1(r23)
    6938:	b8bfffc4 	addi	r2,r23,-1
    693c:	1007883a 	mov	r3,r2
    6940:	01800e44 	movi	r6,57
    6944:	d9c00717 	ldw	r7,28(sp)
    6948:	00000506 	br	6960 <_dtoa_r+0xc00>
    694c:	18ffffc4 	addi	r3,r3,-1
    6950:	11c12326 	beq	r2,r7,6de0 <_dtoa_r+0x1080>
    6954:	19000003 	ldbu	r4,0(r3)
    6958:	102f883a 	mov	r23,r2
    695c:	10bfffc4 	addi	r2,r2,-1
    6960:	21403fcc 	andi	r5,r4,255
    6964:	2940201c 	xori	r5,r5,128
    6968:	297fe004 	addi	r5,r5,-128
    696c:	29bff726 	beq	r5,r6,694c <__alt_data_end+0xfc00694c>
    6970:	21000044 	addi	r4,r4,1
    6974:	11000005 	stb	r4,0(r2)
    6978:	a80b883a 	mov	r5,r21
    697c:	e009883a 	mov	r4,fp
    6980:	00094c00 	call	94c0 <_Bfree>
    6984:	883ea026 	beq	r17,zero,6408 <__alt_data_end+0xfc006408>
    6988:	90000426 	beq	r18,zero,699c <_dtoa_r+0xc3c>
    698c:	94400326 	beq	r18,r17,699c <_dtoa_r+0xc3c>
    6990:	900b883a 	mov	r5,r18
    6994:	e009883a 	mov	r4,fp
    6998:	00094c00 	call	94c0 <_Bfree>
    699c:	880b883a 	mov	r5,r17
    69a0:	e009883a 	mov	r4,fp
    69a4:	00094c00 	call	94c0 <_Bfree>
    69a8:	003e9706 	br	6408 <__alt_data_end+0xfc006408>
    69ac:	01800044 	movi	r6,1
    69b0:	d9800e15 	stw	r6,56(sp)
    69b4:	003d9606 	br	6010 <__alt_data_end+0xfc006010>
    69b8:	d8800817 	ldw	r2,32(sp)
    69bc:	d8c00517 	ldw	r3,20(sp)
    69c0:	d8000d15 	stw	zero,52(sp)
    69c4:	10c5c83a 	sub	r2,r2,r3
    69c8:	00c9c83a 	sub	r4,zero,r3
    69cc:	d8800815 	stw	r2,32(sp)
    69d0:	d9000a15 	stw	r4,40(sp)
    69d4:	003d9706 	br	6034 <__alt_data_end+0xfc006034>
    69d8:	05adc83a 	sub	r22,zero,r22
    69dc:	dd800815 	stw	r22,32(sp)
    69e0:	002d883a 	mov	r22,zero
    69e4:	003d8e06 	br	6020 <__alt_data_end+0xfc006020>
    69e8:	d9000517 	ldw	r4,20(sp)
    69ec:	001013c0 	call	1013c <__floatsidf>
    69f0:	100d883a 	mov	r6,r2
    69f4:	180f883a 	mov	r7,r3
    69f8:	a009883a 	mov	r4,r20
    69fc:	880b883a 	mov	r5,r17
    6a00:	000ecfc0 	call	ecfc <__eqdf2>
    6a04:	103d7126 	beq	r2,zero,5fcc <__alt_data_end+0xfc005fcc>
    6a08:	d9c00517 	ldw	r7,20(sp)
    6a0c:	39ffffc4 	addi	r7,r7,-1
    6a10:	d9c00515 	stw	r7,20(sp)
    6a14:	003d6d06 	br	5fcc <__alt_data_end+0xfc005fcc>
    6a18:	dd400a17 	ldw	r21,40(sp)
    6a1c:	dd000817 	ldw	r20,32(sp)
    6a20:	0023883a 	mov	r17,zero
    6a24:	003f4806 	br	6748 <__alt_data_end+0xfc006748>
    6a28:	10e3c83a 	sub	r17,r2,r3
    6a2c:	9448983a 	sll	r4,r18,r17
    6a30:	003d3206 	br	5efc <__alt_data_end+0xfc005efc>
    6a34:	d8000e15 	stw	zero,56(sp)
    6a38:	003d7506 	br	6010 <__alt_data_end+0xfc006010>
    6a3c:	b005883a 	mov	r2,r22
    6a40:	003f4506 	br	6758 <__alt_data_end+0xfc006758>
    6a44:	dc000915 	stw	r16,36(sp)
    6a48:	d9800a17 	ldw	r6,40(sp)
    6a4c:	d9400917 	ldw	r5,36(sp)
    6a50:	e009883a 	mov	r4,fp
    6a54:	0009b140 	call	9b14 <__pow5mult>
    6a58:	1021883a 	mov	r16,r2
    6a5c:	003f5a06 	br	67c8 <__alt_data_end+0xfc0067c8>
    6a60:	01c00044 	movi	r7,1
    6a64:	d9c00b15 	stw	r7,44(sp)
    6a68:	d8802217 	ldw	r2,136(sp)
    6a6c:	0081280e 	bge	zero,r2,6f10 <_dtoa_r+0x11b0>
    6a70:	100d883a 	mov	r6,r2
    6a74:	1021883a 	mov	r16,r2
    6a78:	d8800c15 	stw	r2,48(sp)
    6a7c:	d8800615 	stw	r2,24(sp)
    6a80:	003d8806 	br	60a4 <__alt_data_end+0xfc0060a4>
    6a84:	d8800617 	ldw	r2,24(sp)
    6a88:	00be9b16 	blt	zero,r2,64f8 <__alt_data_end+0xfc0064f8>
    6a8c:	10010f1e 	bne	r2,zero,6ecc <_dtoa_r+0x116c>
    6a90:	880b883a 	mov	r5,r17
    6a94:	000d883a 	mov	r6,zero
    6a98:	01d00534 	movhi	r7,16404
    6a9c:	8009883a 	mov	r4,r16
    6aa0:	000ef540 	call	ef54 <__muldf3>
    6aa4:	900d883a 	mov	r6,r18
    6aa8:	980f883a 	mov	r7,r19
    6aac:	1009883a 	mov	r4,r2
    6ab0:	180b883a 	mov	r5,r3
    6ab4:	000ed840 	call	ed84 <__gedf2>
    6ab8:	002b883a 	mov	r21,zero
    6abc:	0023883a 	mov	r17,zero
    6ac0:	1000bf16 	blt	r2,zero,6dc0 <_dtoa_r+0x1060>
    6ac4:	d9802217 	ldw	r6,136(sp)
    6ac8:	ddc00717 	ldw	r23,28(sp)
    6acc:	018c303a 	nor	r6,zero,r6
    6ad0:	d9800515 	stw	r6,20(sp)
    6ad4:	a80b883a 	mov	r5,r21
    6ad8:	e009883a 	mov	r4,fp
    6adc:	00094c00 	call	94c0 <_Bfree>
    6ae0:	883e4926 	beq	r17,zero,6408 <__alt_data_end+0xfc006408>
    6ae4:	003fad06 	br	699c <__alt_data_end+0xfc00699c>
    6ae8:	d9c01117 	ldw	r7,68(sp)
    6aec:	3801bc26 	beq	r7,zero,71e0 <_dtoa_r+0x1480>
    6af0:	10810cc4 	addi	r2,r2,1075
    6af4:	dd400a17 	ldw	r21,40(sp)
    6af8:	dd000817 	ldw	r20,32(sp)
    6afc:	003f0a06 	br	6728 <__alt_data_end+0xfc006728>
    6b00:	00800704 	movi	r2,28
    6b04:	d9000817 	ldw	r4,32(sp)
    6b08:	a0a9883a 	add	r20,r20,r2
    6b0c:	b0ad883a 	add	r22,r22,r2
    6b10:	2089883a 	add	r4,r4,r2
    6b14:	d9000815 	stw	r4,32(sp)
    6b18:	003f5106 	br	6860 <__alt_data_end+0xfc006860>
    6b1c:	d8c00317 	ldw	r3,12(sp)
    6b20:	b8c1fc0e 	bge	r23,r3,7314 <_dtoa_r+0x15b4>
    6b24:	0027883a 	mov	r19,zero
    6b28:	b805883a 	mov	r2,r23
    6b2c:	003f3e06 	br	6828 <__alt_data_end+0xfc006828>
    6b30:	880b883a 	mov	r5,r17
    6b34:	e009883a 	mov	r4,fp
    6b38:	000f883a 	mov	r7,zero
    6b3c:	01800284 	movi	r6,10
    6b40:	00094e80 	call	94e8 <__multadd>
    6b44:	d9000c17 	ldw	r4,48(sp)
    6b48:	1023883a 	mov	r17,r2
    6b4c:	0102040e 	bge	zero,r4,7360 <_dtoa_r+0x1600>
    6b50:	d9000615 	stw	r4,24(sp)
    6b54:	0500050e 	bge	zero,r20,6b6c <_dtoa_r+0xe0c>
    6b58:	880b883a 	mov	r5,r17
    6b5c:	a00d883a 	mov	r6,r20
    6b60:	e009883a 	mov	r4,fp
    6b64:	0009c540 	call	9c54 <__lshift>
    6b68:	1023883a 	mov	r17,r2
    6b6c:	9801241e 	bne	r19,zero,7000 <_dtoa_r+0x12a0>
    6b70:	8829883a 	mov	r20,r17
    6b74:	d9000617 	ldw	r4,24(sp)
    6b78:	dcc00717 	ldw	r19,28(sp)
    6b7c:	9480004c 	andi	r18,r18,1
    6b80:	20bfffc4 	addi	r2,r4,-1
    6b84:	9885883a 	add	r2,r19,r2
    6b88:	d8800415 	stw	r2,16(sp)
    6b8c:	dc800615 	stw	r18,24(sp)
    6b90:	a80b883a 	mov	r5,r21
    6b94:	8009883a 	mov	r4,r16
    6b98:	0005b380 	call	5b38 <quorem>
    6b9c:	880b883a 	mov	r5,r17
    6ba0:	8009883a 	mov	r4,r16
    6ba4:	102f883a 	mov	r23,r2
    6ba8:	0009d9c0 	call	9d9c <__mcmp>
    6bac:	a80b883a 	mov	r5,r21
    6bb0:	a00d883a 	mov	r6,r20
    6bb4:	e009883a 	mov	r4,fp
    6bb8:	102d883a 	mov	r22,r2
    6bbc:	0009dfc0 	call	9dfc <__mdiff>
    6bc0:	1007883a 	mov	r3,r2
    6bc4:	10800317 	ldw	r2,12(r2)
    6bc8:	bc800c04 	addi	r18,r23,48
    6bcc:	180b883a 	mov	r5,r3
    6bd0:	10004e1e 	bne	r2,zero,6d0c <_dtoa_r+0xfac>
    6bd4:	8009883a 	mov	r4,r16
    6bd8:	d8c01615 	stw	r3,88(sp)
    6bdc:	0009d9c0 	call	9d9c <__mcmp>
    6be0:	d8c01617 	ldw	r3,88(sp)
    6be4:	e009883a 	mov	r4,fp
    6be8:	d8801615 	stw	r2,88(sp)
    6bec:	180b883a 	mov	r5,r3
    6bf0:	00094c00 	call	94c0 <_Bfree>
    6bf4:	d8801617 	ldw	r2,88(sp)
    6bf8:	1000041e 	bne	r2,zero,6c0c <_dtoa_r+0xeac>
    6bfc:	d9800317 	ldw	r6,12(sp)
    6c00:	3000021e 	bne	r6,zero,6c0c <_dtoa_r+0xeac>
    6c04:	d8c00617 	ldw	r3,24(sp)
    6c08:	18003726 	beq	r3,zero,6ce8 <_dtoa_r+0xf88>
    6c0c:	b0002016 	blt	r22,zero,6c90 <_dtoa_r+0xf30>
    6c10:	b000041e 	bne	r22,zero,6c24 <_dtoa_r+0xec4>
    6c14:	d9000317 	ldw	r4,12(sp)
    6c18:	2000021e 	bne	r4,zero,6c24 <_dtoa_r+0xec4>
    6c1c:	d8c00617 	ldw	r3,24(sp)
    6c20:	18001b26 	beq	r3,zero,6c90 <_dtoa_r+0xf30>
    6c24:	00810716 	blt	zero,r2,7044 <_dtoa_r+0x12e4>
    6c28:	d8c00417 	ldw	r3,16(sp)
    6c2c:	9d800044 	addi	r22,r19,1
    6c30:	9c800005 	stb	r18,0(r19)
    6c34:	b02f883a 	mov	r23,r22
    6c38:	98c10626 	beq	r19,r3,7054 <_dtoa_r+0x12f4>
    6c3c:	800b883a 	mov	r5,r16
    6c40:	000f883a 	mov	r7,zero
    6c44:	01800284 	movi	r6,10
    6c48:	e009883a 	mov	r4,fp
    6c4c:	00094e80 	call	94e8 <__multadd>
    6c50:	1021883a 	mov	r16,r2
    6c54:	000f883a 	mov	r7,zero
    6c58:	01800284 	movi	r6,10
    6c5c:	880b883a 	mov	r5,r17
    6c60:	e009883a 	mov	r4,fp
    6c64:	8d002526 	beq	r17,r20,6cfc <_dtoa_r+0xf9c>
    6c68:	00094e80 	call	94e8 <__multadd>
    6c6c:	a00b883a 	mov	r5,r20
    6c70:	000f883a 	mov	r7,zero
    6c74:	01800284 	movi	r6,10
    6c78:	e009883a 	mov	r4,fp
    6c7c:	1023883a 	mov	r17,r2
    6c80:	00094e80 	call	94e8 <__multadd>
    6c84:	1029883a 	mov	r20,r2
    6c88:	b027883a 	mov	r19,r22
    6c8c:	003fc006 	br	6b90 <__alt_data_end+0xfc006b90>
    6c90:	9011883a 	mov	r8,r18
    6c94:	00800e0e 	bge	zero,r2,6cd0 <_dtoa_r+0xf70>
    6c98:	800b883a 	mov	r5,r16
    6c9c:	01800044 	movi	r6,1
    6ca0:	e009883a 	mov	r4,fp
    6ca4:	da001715 	stw	r8,92(sp)
    6ca8:	0009c540 	call	9c54 <__lshift>
    6cac:	a80b883a 	mov	r5,r21
    6cb0:	1009883a 	mov	r4,r2
    6cb4:	1021883a 	mov	r16,r2
    6cb8:	0009d9c0 	call	9d9c <__mcmp>
    6cbc:	da001717 	ldw	r8,92(sp)
    6cc0:	0081960e 	bge	zero,r2,731c <_dtoa_r+0x15bc>
    6cc4:	00800e44 	movi	r2,57
    6cc8:	40817026 	beq	r8,r2,728c <_dtoa_r+0x152c>
    6ccc:	ba000c44 	addi	r8,r23,49
    6cd0:	8825883a 	mov	r18,r17
    6cd4:	9dc00044 	addi	r23,r19,1
    6cd8:	9a000005 	stb	r8,0(r19)
    6cdc:	a023883a 	mov	r17,r20
    6ce0:	dc000915 	stw	r16,36(sp)
    6ce4:	003f2406 	br	6978 <__alt_data_end+0xfc006978>
    6ce8:	00800e44 	movi	r2,57
    6cec:	9011883a 	mov	r8,r18
    6cf0:	90816626 	beq	r18,r2,728c <_dtoa_r+0x152c>
    6cf4:	05bff516 	blt	zero,r22,6ccc <__alt_data_end+0xfc006ccc>
    6cf8:	003ff506 	br	6cd0 <__alt_data_end+0xfc006cd0>
    6cfc:	00094e80 	call	94e8 <__multadd>
    6d00:	1023883a 	mov	r17,r2
    6d04:	1029883a 	mov	r20,r2
    6d08:	003fdf06 	br	6c88 <__alt_data_end+0xfc006c88>
    6d0c:	e009883a 	mov	r4,fp
    6d10:	00094c00 	call	94c0 <_Bfree>
    6d14:	00800044 	movi	r2,1
    6d18:	003fbc06 	br	6c0c <__alt_data_end+0xfc006c0c>
    6d1c:	a80b883a 	mov	r5,r21
    6d20:	8009883a 	mov	r4,r16
    6d24:	0009d9c0 	call	9d9c <__mcmp>
    6d28:	103edb0e 	bge	r2,zero,6898 <__alt_data_end+0xfc006898>
    6d2c:	800b883a 	mov	r5,r16
    6d30:	000f883a 	mov	r7,zero
    6d34:	01800284 	movi	r6,10
    6d38:	e009883a 	mov	r4,fp
    6d3c:	00094e80 	call	94e8 <__multadd>
    6d40:	1021883a 	mov	r16,r2
    6d44:	d8800517 	ldw	r2,20(sp)
    6d48:	d8c00b17 	ldw	r3,44(sp)
    6d4c:	10bfffc4 	addi	r2,r2,-1
    6d50:	d8800515 	stw	r2,20(sp)
    6d54:	183f761e 	bne	r3,zero,6b30 <__alt_data_end+0xfc006b30>
    6d58:	d9000c17 	ldw	r4,48(sp)
    6d5c:	0101730e 	bge	zero,r4,732c <_dtoa_r+0x15cc>
    6d60:	d9000615 	stw	r4,24(sp)
    6d64:	003ed006 	br	68a8 <__alt_data_end+0xfc0068a8>
    6d68:	00800084 	movi	r2,2
    6d6c:	3081861e 	bne	r6,r2,7388 <_dtoa_r+0x1628>
    6d70:	d8000b15 	stw	zero,44(sp)
    6d74:	003f3c06 	br	6a68 <__alt_data_end+0xfc006a68>
    6d78:	dc000917 	ldw	r16,36(sp)
    6d7c:	003e9206 	br	67c8 <__alt_data_end+0xfc0067c8>
    6d80:	d9c00317 	ldw	r7,12(sp)
    6d84:	00800084 	movi	r2,2
    6d88:	11fec50e 	bge	r2,r7,68a0 <__alt_data_end+0xfc0068a0>
    6d8c:	d9000617 	ldw	r4,24(sp)
    6d90:	20013c1e 	bne	r4,zero,7284 <_dtoa_r+0x1524>
    6d94:	a80b883a 	mov	r5,r21
    6d98:	000f883a 	mov	r7,zero
    6d9c:	01800144 	movi	r6,5
    6da0:	e009883a 	mov	r4,fp
    6da4:	00094e80 	call	94e8 <__multadd>
    6da8:	100b883a 	mov	r5,r2
    6dac:	8009883a 	mov	r4,r16
    6db0:	102b883a 	mov	r21,r2
    6db4:	0009d9c0 	call	9d9c <__mcmp>
    6db8:	dc000915 	stw	r16,36(sp)
    6dbc:	00bf410e 	bge	zero,r2,6ac4 <__alt_data_end+0xfc006ac4>
    6dc0:	d9c00717 	ldw	r7,28(sp)
    6dc4:	00800c44 	movi	r2,49
    6dc8:	38800005 	stb	r2,0(r7)
    6dcc:	d8800517 	ldw	r2,20(sp)
    6dd0:	3dc00044 	addi	r23,r7,1
    6dd4:	10800044 	addi	r2,r2,1
    6dd8:	d8800515 	stw	r2,20(sp)
    6ddc:	003f3d06 	br	6ad4 <__alt_data_end+0xfc006ad4>
    6de0:	d9800517 	ldw	r6,20(sp)
    6de4:	d9c00717 	ldw	r7,28(sp)
    6de8:	00800c44 	movi	r2,49
    6dec:	31800044 	addi	r6,r6,1
    6df0:	d9800515 	stw	r6,20(sp)
    6df4:	38800005 	stb	r2,0(r7)
    6df8:	003edf06 	br	6978 <__alt_data_end+0xfc006978>
    6dfc:	d8000b15 	stw	zero,44(sp)
    6e00:	003c9f06 	br	6080 <__alt_data_end+0xfc006080>
    6e04:	903e7e1e 	bne	r18,zero,6800 <__alt_data_end+0xfc006800>
    6e08:	00800434 	movhi	r2,16
    6e0c:	10bfffc4 	addi	r2,r2,-1
    6e10:	9884703a 	and	r2,r19,r2
    6e14:	1000ea1e 	bne	r2,zero,71c0 <_dtoa_r+0x1460>
    6e18:	9cdffc2c 	andhi	r19,r19,32752
    6e1c:	9800e826 	beq	r19,zero,71c0 <_dtoa_r+0x1460>
    6e20:	d9c00817 	ldw	r7,32(sp)
    6e24:	b5800044 	addi	r22,r22,1
    6e28:	04c00044 	movi	r19,1
    6e2c:	39c00044 	addi	r7,r7,1
    6e30:	d9c00815 	stw	r7,32(sp)
    6e34:	d8800d17 	ldw	r2,52(sp)
    6e38:	103e721e 	bne	r2,zero,6804 <__alt_data_end+0xfc006804>
    6e3c:	00800044 	movi	r2,1
    6e40:	003e7906 	br	6828 <__alt_data_end+0xfc006828>
    6e44:	8009883a 	mov	r4,r16
    6e48:	001013c0 	call	1013c <__floatsidf>
    6e4c:	d9800f17 	ldw	r6,60(sp)
    6e50:	d9c01017 	ldw	r7,64(sp)
    6e54:	1009883a 	mov	r4,r2
    6e58:	180b883a 	mov	r5,r3
    6e5c:	000ef540 	call	ef54 <__muldf3>
    6e60:	000d883a 	mov	r6,zero
    6e64:	01d00734 	movhi	r7,16412
    6e68:	1009883a 	mov	r4,r2
    6e6c:	180b883a 	mov	r5,r3
    6e70:	000da800 	call	da80 <__adddf3>
    6e74:	047f3034 	movhi	r17,64704
    6e78:	1021883a 	mov	r16,r2
    6e7c:	1c63883a 	add	r17,r3,r17
    6e80:	d9000f17 	ldw	r4,60(sp)
    6e84:	d9401017 	ldw	r5,64(sp)
    6e88:	000d883a 	mov	r6,zero
    6e8c:	01d00534 	movhi	r7,16404
    6e90:	000f7c00 	call	f7c0 <__subdf3>
    6e94:	800d883a 	mov	r6,r16
    6e98:	880f883a 	mov	r7,r17
    6e9c:	1009883a 	mov	r4,r2
    6ea0:	180b883a 	mov	r5,r3
    6ea4:	102b883a 	mov	r21,r2
    6ea8:	1829883a 	mov	r20,r3
    6eac:	000ed840 	call	ed84 <__gedf2>
    6eb0:	00806c16 	blt	zero,r2,7064 <_dtoa_r+0x1304>
    6eb4:	89e0003c 	xorhi	r7,r17,32768
    6eb8:	800d883a 	mov	r6,r16
    6ebc:	a809883a 	mov	r4,r21
    6ec0:	a00b883a 	mov	r5,r20
    6ec4:	000ee600 	call	ee60 <__ledf2>
    6ec8:	103d7e0e 	bge	r2,zero,64c4 <__alt_data_end+0xfc0064c4>
    6ecc:	002b883a 	mov	r21,zero
    6ed0:	0023883a 	mov	r17,zero
    6ed4:	003efb06 	br	6ac4 <__alt_data_end+0xfc006ac4>
    6ed8:	d8800717 	ldw	r2,28(sp)
    6edc:	003bd006 	br	5e20 <__alt_data_end+0xfc005e20>
    6ee0:	d9000a17 	ldw	r4,40(sp)
    6ee4:	d9800d17 	ldw	r6,52(sp)
    6ee8:	dd400a15 	stw	r21,40(sp)
    6eec:	a905c83a 	sub	r2,r21,r4
    6ef0:	308d883a 	add	r6,r6,r2
    6ef4:	d9800d15 	stw	r6,52(sp)
    6ef8:	002b883a 	mov	r21,zero
    6efc:	003e0606 	br	6718 <__alt_data_end+0xfc006718>
    6f00:	9023883a 	mov	r17,r18
    6f04:	9829883a 	mov	r20,r19
    6f08:	04000084 	movi	r16,2
    6f0c:	003c9206 	br	6158 <__alt_data_end+0xfc006158>
    6f10:	04000044 	movi	r16,1
    6f14:	dc000c15 	stw	r16,48(sp)
    6f18:	dc000615 	stw	r16,24(sp)
    6f1c:	dc002215 	stw	r16,136(sp)
    6f20:	e0001115 	stw	zero,68(fp)
    6f24:	000b883a 	mov	r5,zero
    6f28:	003c6906 	br	60d0 <__alt_data_end+0xfc0060d0>
    6f2c:	3021883a 	mov	r16,r6
    6f30:	003ffb06 	br	6f20 <__alt_data_end+0xfc006f20>
    6f34:	1000021e 	bne	r2,zero,6f40 <_dtoa_r+0x11e0>
    6f38:	4200004c 	andi	r8,r8,1
    6f3c:	403e7d1e 	bne	r8,zero,6934 <__alt_data_end+0xfc006934>
    6f40:	01000c04 	movi	r4,48
    6f44:	00000106 	br	6f4c <_dtoa_r+0x11ec>
    6f48:	102f883a 	mov	r23,r2
    6f4c:	b8bfffc4 	addi	r2,r23,-1
    6f50:	10c00007 	ldb	r3,0(r2)
    6f54:	193ffc26 	beq	r3,r4,6f48 <__alt_data_end+0xfc006f48>
    6f58:	003e8706 	br	6978 <__alt_data_end+0xfc006978>
    6f5c:	d8800517 	ldw	r2,20(sp)
    6f60:	00a3c83a 	sub	r17,zero,r2
    6f64:	8800a426 	beq	r17,zero,71f8 <_dtoa_r+0x1498>
    6f68:	888003cc 	andi	r2,r17,15
    6f6c:	100490fa 	slli	r2,r2,3
    6f70:	00c00074 	movhi	r3,1
    6f74:	18d46d04 	addi	r3,r3,20916
    6f78:	1885883a 	add	r2,r3,r2
    6f7c:	11800017 	ldw	r6,0(r2)
    6f80:	11c00117 	ldw	r7,4(r2)
    6f84:	9009883a 	mov	r4,r18
    6f88:	980b883a 	mov	r5,r19
    6f8c:	8823d13a 	srai	r17,r17,4
    6f90:	000ef540 	call	ef54 <__muldf3>
    6f94:	d8800f15 	stw	r2,60(sp)
    6f98:	d8c01015 	stw	r3,64(sp)
    6f9c:	8800e826 	beq	r17,zero,7340 <_dtoa_r+0x15e0>
    6fa0:	05000074 	movhi	r20,1
    6fa4:	a5146304 	addi	r20,r20,20876
    6fa8:	04000084 	movi	r16,2
    6fac:	8980004c 	andi	r6,r17,1
    6fb0:	1009883a 	mov	r4,r2
    6fb4:	8823d07a 	srai	r17,r17,1
    6fb8:	180b883a 	mov	r5,r3
    6fbc:	30000426 	beq	r6,zero,6fd0 <_dtoa_r+0x1270>
    6fc0:	a1800017 	ldw	r6,0(r20)
    6fc4:	a1c00117 	ldw	r7,4(r20)
    6fc8:	84000044 	addi	r16,r16,1
    6fcc:	000ef540 	call	ef54 <__muldf3>
    6fd0:	a5000204 	addi	r20,r20,8
    6fd4:	883ff51e 	bne	r17,zero,6fac <__alt_data_end+0xfc006fac>
    6fd8:	d8800f15 	stw	r2,60(sp)
    6fdc:	d8c01015 	stw	r3,64(sp)
    6fe0:	003c7606 	br	61bc <__alt_data_end+0xfc0061bc>
    6fe4:	00c00c04 	movi	r3,48
    6fe8:	10c00005 	stb	r3,0(r2)
    6fec:	d8c00517 	ldw	r3,20(sp)
    6ff0:	bd3fffc3 	ldbu	r20,-1(r23)
    6ff4:	18c00044 	addi	r3,r3,1
    6ff8:	d8c00515 	stw	r3,20(sp)
    6ffc:	003db906 	br	66e4 <__alt_data_end+0xfc0066e4>
    7000:	89400117 	ldw	r5,4(r17)
    7004:	e009883a 	mov	r4,fp
    7008:	00094180 	call	9418 <_Balloc>
    700c:	89800417 	ldw	r6,16(r17)
    7010:	89400304 	addi	r5,r17,12
    7014:	11000304 	addi	r4,r2,12
    7018:	31800084 	addi	r6,r6,2
    701c:	318d883a 	add	r6,r6,r6
    7020:	318d883a 	add	r6,r6,r6
    7024:	1027883a 	mov	r19,r2
    7028:	000904c0 	call	904c <memcpy>
    702c:	01800044 	movi	r6,1
    7030:	980b883a 	mov	r5,r19
    7034:	e009883a 	mov	r4,fp
    7038:	0009c540 	call	9c54 <__lshift>
    703c:	1029883a 	mov	r20,r2
    7040:	003ecc06 	br	6b74 <__alt_data_end+0xfc006b74>
    7044:	00800e44 	movi	r2,57
    7048:	90809026 	beq	r18,r2,728c <_dtoa_r+0x152c>
    704c:	92000044 	addi	r8,r18,1
    7050:	003f1f06 	br	6cd0 <__alt_data_end+0xfc006cd0>
    7054:	9011883a 	mov	r8,r18
    7058:	8825883a 	mov	r18,r17
    705c:	a023883a 	mov	r17,r20
    7060:	003e2906 	br	6908 <__alt_data_end+0xfc006908>
    7064:	002b883a 	mov	r21,zero
    7068:	0023883a 	mov	r17,zero
    706c:	003f5406 	br	6dc0 <__alt_data_end+0xfc006dc0>
    7070:	61bfffc4 	addi	r6,r12,-1
    7074:	300490fa 	slli	r2,r6,3
    7078:	00c00074 	movhi	r3,1
    707c:	18d46d04 	addi	r3,r3,20916
    7080:	1885883a 	add	r2,r3,r2
    7084:	11000017 	ldw	r4,0(r2)
    7088:	11400117 	ldw	r5,4(r2)
    708c:	d8800717 	ldw	r2,28(sp)
    7090:	880f883a 	mov	r7,r17
    7094:	d9801215 	stw	r6,72(sp)
    7098:	800d883a 	mov	r6,r16
    709c:	db001615 	stw	r12,88(sp)
    70a0:	15c00044 	addi	r23,r2,1
    70a4:	000ef540 	call	ef54 <__muldf3>
    70a8:	d9401017 	ldw	r5,64(sp)
    70ac:	d9000f17 	ldw	r4,60(sp)
    70b0:	d8c01515 	stw	r3,84(sp)
    70b4:	d8801415 	stw	r2,80(sp)
    70b8:	00100bc0 	call	100bc <__fixdfsi>
    70bc:	1009883a 	mov	r4,r2
    70c0:	1021883a 	mov	r16,r2
    70c4:	001013c0 	call	1013c <__floatsidf>
    70c8:	d9000f17 	ldw	r4,60(sp)
    70cc:	d9401017 	ldw	r5,64(sp)
    70d0:	100d883a 	mov	r6,r2
    70d4:	180f883a 	mov	r7,r3
    70d8:	000f7c00 	call	f7c0 <__subdf3>
    70dc:	1829883a 	mov	r20,r3
    70e0:	d8c00717 	ldw	r3,28(sp)
    70e4:	84000c04 	addi	r16,r16,48
    70e8:	1023883a 	mov	r17,r2
    70ec:	1c000005 	stb	r16,0(r3)
    70f0:	db001617 	ldw	r12,88(sp)
    70f4:	00800044 	movi	r2,1
    70f8:	60802226 	beq	r12,r2,7184 <_dtoa_r+0x1424>
    70fc:	d9c00717 	ldw	r7,28(sp)
    7100:	8805883a 	mov	r2,r17
    7104:	b82b883a 	mov	r21,r23
    7108:	3b19883a 	add	r12,r7,r12
    710c:	6023883a 	mov	r17,r12
    7110:	a007883a 	mov	r3,r20
    7114:	dc800f15 	stw	r18,60(sp)
    7118:	000d883a 	mov	r6,zero
    711c:	01d00934 	movhi	r7,16420
    7120:	1009883a 	mov	r4,r2
    7124:	180b883a 	mov	r5,r3
    7128:	000ef540 	call	ef54 <__muldf3>
    712c:	180b883a 	mov	r5,r3
    7130:	1009883a 	mov	r4,r2
    7134:	1829883a 	mov	r20,r3
    7138:	1025883a 	mov	r18,r2
    713c:	00100bc0 	call	100bc <__fixdfsi>
    7140:	1009883a 	mov	r4,r2
    7144:	1021883a 	mov	r16,r2
    7148:	001013c0 	call	1013c <__floatsidf>
    714c:	100d883a 	mov	r6,r2
    7150:	180f883a 	mov	r7,r3
    7154:	9009883a 	mov	r4,r18
    7158:	a00b883a 	mov	r5,r20
    715c:	84000c04 	addi	r16,r16,48
    7160:	000f7c00 	call	f7c0 <__subdf3>
    7164:	ad400044 	addi	r21,r21,1
    7168:	ac3fffc5 	stb	r16,-1(r21)
    716c:	ac7fea1e 	bne	r21,r17,7118 <__alt_data_end+0xfc007118>
    7170:	1023883a 	mov	r17,r2
    7174:	d8801217 	ldw	r2,72(sp)
    7178:	dc800f17 	ldw	r18,60(sp)
    717c:	1829883a 	mov	r20,r3
    7180:	b8af883a 	add	r23,r23,r2
    7184:	d9001417 	ldw	r4,80(sp)
    7188:	d9401517 	ldw	r5,84(sp)
    718c:	000d883a 	mov	r6,zero
    7190:	01cff834 	movhi	r7,16352
    7194:	000da800 	call	da80 <__adddf3>
    7198:	880d883a 	mov	r6,r17
    719c:	a00f883a 	mov	r7,r20
    71a0:	1009883a 	mov	r4,r2
    71a4:	180b883a 	mov	r5,r3
    71a8:	000ee600 	call	ee60 <__ledf2>
    71ac:	10003e0e 	bge	r2,zero,72a8 <_dtoa_r+0x1548>
    71b0:	d9001317 	ldw	r4,76(sp)
    71b4:	bd3fffc3 	ldbu	r20,-1(r23)
    71b8:	d9000515 	stw	r4,20(sp)
    71bc:	003d3b06 	br	66ac <__alt_data_end+0xfc0066ac>
    71c0:	0027883a 	mov	r19,zero
    71c4:	003f1b06 	br	6e34 <__alt_data_end+0xfc006e34>
    71c8:	d8800817 	ldw	r2,32(sp)
    71cc:	11e9c83a 	sub	r20,r2,r7
    71d0:	0005883a 	mov	r2,zero
    71d4:	003d5406 	br	6728 <__alt_data_end+0xfc006728>
    71d8:	00800044 	movi	r2,1
    71dc:	003dc706 	br	68fc <__alt_data_end+0xfc0068fc>
    71e0:	d8c00217 	ldw	r3,8(sp)
    71e4:	00800d84 	movi	r2,54
    71e8:	dd400a17 	ldw	r21,40(sp)
    71ec:	10c5c83a 	sub	r2,r2,r3
    71f0:	dd000817 	ldw	r20,32(sp)
    71f4:	003d4c06 	br	6728 <__alt_data_end+0xfc006728>
    71f8:	dc800f15 	stw	r18,60(sp)
    71fc:	dcc01015 	stw	r19,64(sp)
    7200:	04000084 	movi	r16,2
    7204:	003bed06 	br	61bc <__alt_data_end+0xfc0061bc>
    7208:	d9000617 	ldw	r4,24(sp)
    720c:	203f0d26 	beq	r4,zero,6e44 <__alt_data_end+0xfc006e44>
    7210:	d9800c17 	ldw	r6,48(sp)
    7214:	01bcab0e 	bge	zero,r6,64c4 <__alt_data_end+0xfc0064c4>
    7218:	d9401017 	ldw	r5,64(sp)
    721c:	d9000f17 	ldw	r4,60(sp)
    7220:	000d883a 	mov	r6,zero
    7224:	01d00934 	movhi	r7,16420
    7228:	000ef540 	call	ef54 <__muldf3>
    722c:	81000044 	addi	r4,r16,1
    7230:	d8800f15 	stw	r2,60(sp)
    7234:	d8c01015 	stw	r3,64(sp)
    7238:	001013c0 	call	1013c <__floatsidf>
    723c:	d9800f17 	ldw	r6,60(sp)
    7240:	d9c01017 	ldw	r7,64(sp)
    7244:	1009883a 	mov	r4,r2
    7248:	180b883a 	mov	r5,r3
    724c:	000ef540 	call	ef54 <__muldf3>
    7250:	01d00734 	movhi	r7,16412
    7254:	000d883a 	mov	r6,zero
    7258:	1009883a 	mov	r4,r2
    725c:	180b883a 	mov	r5,r3
    7260:	000da800 	call	da80 <__adddf3>
    7264:	d9c00517 	ldw	r7,20(sp)
    7268:	047f3034 	movhi	r17,64704
    726c:	1021883a 	mov	r16,r2
    7270:	39ffffc4 	addi	r7,r7,-1
    7274:	d9c01315 	stw	r7,76(sp)
    7278:	1c63883a 	add	r17,r3,r17
    727c:	db000c17 	ldw	r12,48(sp)
    7280:	003bea06 	br	622c <__alt_data_end+0xfc00622c>
    7284:	dc000915 	stw	r16,36(sp)
    7288:	003e0e06 	br	6ac4 <__alt_data_end+0xfc006ac4>
    728c:	01000e44 	movi	r4,57
    7290:	8825883a 	mov	r18,r17
    7294:	9dc00044 	addi	r23,r19,1
    7298:	99000005 	stb	r4,0(r19)
    729c:	a023883a 	mov	r17,r20
    72a0:	dc000915 	stw	r16,36(sp)
    72a4:	003da406 	br	6938 <__alt_data_end+0xfc006938>
    72a8:	d9801417 	ldw	r6,80(sp)
    72ac:	d9c01517 	ldw	r7,84(sp)
    72b0:	0009883a 	mov	r4,zero
    72b4:	014ff834 	movhi	r5,16352
    72b8:	000f7c00 	call	f7c0 <__subdf3>
    72bc:	880d883a 	mov	r6,r17
    72c0:	a00f883a 	mov	r7,r20
    72c4:	1009883a 	mov	r4,r2
    72c8:	180b883a 	mov	r5,r3
    72cc:	000ed840 	call	ed84 <__gedf2>
    72d0:	00bc7c0e 	bge	zero,r2,64c4 <__alt_data_end+0xfc0064c4>
    72d4:	01000c04 	movi	r4,48
    72d8:	00000106 	br	72e0 <_dtoa_r+0x1580>
    72dc:	102f883a 	mov	r23,r2
    72e0:	b8bfffc4 	addi	r2,r23,-1
    72e4:	10c00007 	ldb	r3,0(r2)
    72e8:	193ffc26 	beq	r3,r4,72dc <__alt_data_end+0xfc0072dc>
    72ec:	d9801317 	ldw	r6,76(sp)
    72f0:	d9800515 	stw	r6,20(sp)
    72f4:	003c4406 	br	6408 <__alt_data_end+0xfc006408>
    72f8:	d9801317 	ldw	r6,76(sp)
    72fc:	d9800515 	stw	r6,20(sp)
    7300:	003cea06 	br	66ac <__alt_data_end+0xfc0066ac>
    7304:	dd800f17 	ldw	r22,60(sp)
    7308:	dcc01017 	ldw	r19,64(sp)
    730c:	dc801217 	ldw	r18,72(sp)
    7310:	003c6c06 	br	64c4 <__alt_data_end+0xfc0064c4>
    7314:	903e031e 	bne	r18,zero,6b24 <__alt_data_end+0xfc006b24>
    7318:	003ebb06 	br	6e08 <__alt_data_end+0xfc006e08>
    731c:	103e6c1e 	bne	r2,zero,6cd0 <__alt_data_end+0xfc006cd0>
    7320:	4080004c 	andi	r2,r8,1
    7324:	103e6a26 	beq	r2,zero,6cd0 <__alt_data_end+0xfc006cd0>
    7328:	003e6606 	br	6cc4 <__alt_data_end+0xfc006cc4>
    732c:	d8c00317 	ldw	r3,12(sp)
    7330:	00800084 	movi	r2,2
    7334:	10c02916 	blt	r2,r3,73dc <_dtoa_r+0x167c>
    7338:	d9000c17 	ldw	r4,48(sp)
    733c:	003e8806 	br	6d60 <__alt_data_end+0xfc006d60>
    7340:	04000084 	movi	r16,2
    7344:	003b9d06 	br	61bc <__alt_data_end+0xfc0061bc>
    7348:	d9001317 	ldw	r4,76(sp)
    734c:	d9000515 	stw	r4,20(sp)
    7350:	003cd606 	br	66ac <__alt_data_end+0xfc0066ac>
    7354:	d8801317 	ldw	r2,76(sp)
    7358:	d8800515 	stw	r2,20(sp)
    735c:	003c2a06 	br	6408 <__alt_data_end+0xfc006408>
    7360:	d9800317 	ldw	r6,12(sp)
    7364:	00800084 	movi	r2,2
    7368:	11801516 	blt	r2,r6,73c0 <_dtoa_r+0x1660>
    736c:	d9c00c17 	ldw	r7,48(sp)
    7370:	d9c00615 	stw	r7,24(sp)
    7374:	003df706 	br	6b54 <__alt_data_end+0xfc006b54>
    7378:	193d3926 	beq	r3,r4,6860 <__alt_data_end+0xfc006860>
    737c:	00c00f04 	movi	r3,60
    7380:	1885c83a 	sub	r2,r3,r2
    7384:	003ddf06 	br	6b04 <__alt_data_end+0xfc006b04>
    7388:	e009883a 	mov	r4,fp
    738c:	e0001115 	stw	zero,68(fp)
    7390:	000b883a 	mov	r5,zero
    7394:	00094180 	call	9418 <_Balloc>
    7398:	d8800715 	stw	r2,28(sp)
    739c:	d8c00717 	ldw	r3,28(sp)
    73a0:	00bfffc4 	movi	r2,-1
    73a4:	01000044 	movi	r4,1
    73a8:	d8800c15 	stw	r2,48(sp)
    73ac:	e0c01015 	stw	r3,64(fp)
    73b0:	d9000b15 	stw	r4,44(sp)
    73b4:	d8800615 	stw	r2,24(sp)
    73b8:	d8002215 	stw	zero,136(sp)
    73bc:	003c4106 	br	64c4 <__alt_data_end+0xfc0064c4>
    73c0:	d8c00c17 	ldw	r3,48(sp)
    73c4:	d8c00615 	stw	r3,24(sp)
    73c8:	003e7006 	br	6d8c <__alt_data_end+0xfc006d8c>
    73cc:	04400044 	movi	r17,1
    73d0:	003b2006 	br	6054 <__alt_data_end+0xfc006054>
    73d4:	000b883a 	mov	r5,zero
    73d8:	003b3d06 	br	60d0 <__alt_data_end+0xfc0060d0>
    73dc:	d8800c17 	ldw	r2,48(sp)
    73e0:	d8800615 	stw	r2,24(sp)
    73e4:	003e6906 	br	6d8c <__alt_data_end+0xfc006d8c>

000073e8 <__sflush_r>:
    73e8:	2880030b 	ldhu	r2,12(r5)
    73ec:	defffb04 	addi	sp,sp,-20
    73f0:	dcc00315 	stw	r19,12(sp)
    73f4:	dc400115 	stw	r17,4(sp)
    73f8:	dfc00415 	stw	ra,16(sp)
    73fc:	dc800215 	stw	r18,8(sp)
    7400:	dc000015 	stw	r16,0(sp)
    7404:	10c0020c 	andi	r3,r2,8
    7408:	2823883a 	mov	r17,r5
    740c:	2027883a 	mov	r19,r4
    7410:	1800311e 	bne	r3,zero,74d8 <__sflush_r+0xf0>
    7414:	28c00117 	ldw	r3,4(r5)
    7418:	10820014 	ori	r2,r2,2048
    741c:	2880030d 	sth	r2,12(r5)
    7420:	00c04b0e 	bge	zero,r3,7550 <__sflush_r+0x168>
    7424:	8a000a17 	ldw	r8,40(r17)
    7428:	40002326 	beq	r8,zero,74b8 <__sflush_r+0xd0>
    742c:	9c000017 	ldw	r16,0(r19)
    7430:	10c4000c 	andi	r3,r2,4096
    7434:	98000015 	stw	zero,0(r19)
    7438:	18004826 	beq	r3,zero,755c <__sflush_r+0x174>
    743c:	89801417 	ldw	r6,80(r17)
    7440:	10c0010c 	andi	r3,r2,4
    7444:	18000626 	beq	r3,zero,7460 <__sflush_r+0x78>
    7448:	88c00117 	ldw	r3,4(r17)
    744c:	88800c17 	ldw	r2,48(r17)
    7450:	30cdc83a 	sub	r6,r6,r3
    7454:	10000226 	beq	r2,zero,7460 <__sflush_r+0x78>
    7458:	88800f17 	ldw	r2,60(r17)
    745c:	308dc83a 	sub	r6,r6,r2
    7460:	89400717 	ldw	r5,28(r17)
    7464:	000f883a 	mov	r7,zero
    7468:	9809883a 	mov	r4,r19
    746c:	403ee83a 	callr	r8
    7470:	00ffffc4 	movi	r3,-1
    7474:	10c04426 	beq	r2,r3,7588 <__sflush_r+0x1a0>
    7478:	88c0030b 	ldhu	r3,12(r17)
    747c:	89000417 	ldw	r4,16(r17)
    7480:	88000115 	stw	zero,4(r17)
    7484:	197dffcc 	andi	r5,r3,63487
    7488:	8940030d 	sth	r5,12(r17)
    748c:	89000015 	stw	r4,0(r17)
    7490:	18c4000c 	andi	r3,r3,4096
    7494:	18002c1e 	bne	r3,zero,7548 <__sflush_r+0x160>
    7498:	89400c17 	ldw	r5,48(r17)
    749c:	9c000015 	stw	r16,0(r19)
    74a0:	28000526 	beq	r5,zero,74b8 <__sflush_r+0xd0>
    74a4:	88801004 	addi	r2,r17,64
    74a8:	28800226 	beq	r5,r2,74b4 <__sflush_r+0xcc>
    74ac:	9809883a 	mov	r4,r19
    74b0:	0007b640 	call	7b64 <_free_r>
    74b4:	88000c15 	stw	zero,48(r17)
    74b8:	0005883a 	mov	r2,zero
    74bc:	dfc00417 	ldw	ra,16(sp)
    74c0:	dcc00317 	ldw	r19,12(sp)
    74c4:	dc800217 	ldw	r18,8(sp)
    74c8:	dc400117 	ldw	r17,4(sp)
    74cc:	dc000017 	ldw	r16,0(sp)
    74d0:	dec00504 	addi	sp,sp,20
    74d4:	f800283a 	ret
    74d8:	2c800417 	ldw	r18,16(r5)
    74dc:	903ff626 	beq	r18,zero,74b8 <__alt_data_end+0xfc0074b8>
    74e0:	2c000017 	ldw	r16,0(r5)
    74e4:	108000cc 	andi	r2,r2,3
    74e8:	2c800015 	stw	r18,0(r5)
    74ec:	84a1c83a 	sub	r16,r16,r18
    74f0:	1000131e 	bne	r2,zero,7540 <__sflush_r+0x158>
    74f4:	28800517 	ldw	r2,20(r5)
    74f8:	88800215 	stw	r2,8(r17)
    74fc:	04000316 	blt	zero,r16,750c <__sflush_r+0x124>
    7500:	003fed06 	br	74b8 <__alt_data_end+0xfc0074b8>
    7504:	90a5883a 	add	r18,r18,r2
    7508:	043feb0e 	bge	zero,r16,74b8 <__alt_data_end+0xfc0074b8>
    750c:	88800917 	ldw	r2,36(r17)
    7510:	89400717 	ldw	r5,28(r17)
    7514:	800f883a 	mov	r7,r16
    7518:	900d883a 	mov	r6,r18
    751c:	9809883a 	mov	r4,r19
    7520:	103ee83a 	callr	r2
    7524:	80a1c83a 	sub	r16,r16,r2
    7528:	00bff616 	blt	zero,r2,7504 <__alt_data_end+0xfc007504>
    752c:	88c0030b 	ldhu	r3,12(r17)
    7530:	00bfffc4 	movi	r2,-1
    7534:	18c01014 	ori	r3,r3,64
    7538:	88c0030d 	sth	r3,12(r17)
    753c:	003fdf06 	br	74bc <__alt_data_end+0xfc0074bc>
    7540:	0005883a 	mov	r2,zero
    7544:	003fec06 	br	74f8 <__alt_data_end+0xfc0074f8>
    7548:	88801415 	stw	r2,80(r17)
    754c:	003fd206 	br	7498 <__alt_data_end+0xfc007498>
    7550:	28c00f17 	ldw	r3,60(r5)
    7554:	00ffb316 	blt	zero,r3,7424 <__alt_data_end+0xfc007424>
    7558:	003fd706 	br	74b8 <__alt_data_end+0xfc0074b8>
    755c:	89400717 	ldw	r5,28(r17)
    7560:	000d883a 	mov	r6,zero
    7564:	01c00044 	movi	r7,1
    7568:	9809883a 	mov	r4,r19
    756c:	403ee83a 	callr	r8
    7570:	100d883a 	mov	r6,r2
    7574:	00bfffc4 	movi	r2,-1
    7578:	30801426 	beq	r6,r2,75cc <__sflush_r+0x1e4>
    757c:	8880030b 	ldhu	r2,12(r17)
    7580:	8a000a17 	ldw	r8,40(r17)
    7584:	003fae06 	br	7440 <__alt_data_end+0xfc007440>
    7588:	98c00017 	ldw	r3,0(r19)
    758c:	183fba26 	beq	r3,zero,7478 <__alt_data_end+0xfc007478>
    7590:	01000744 	movi	r4,29
    7594:	19000626 	beq	r3,r4,75b0 <__sflush_r+0x1c8>
    7598:	01000584 	movi	r4,22
    759c:	19000426 	beq	r3,r4,75b0 <__sflush_r+0x1c8>
    75a0:	88c0030b 	ldhu	r3,12(r17)
    75a4:	18c01014 	ori	r3,r3,64
    75a8:	88c0030d 	sth	r3,12(r17)
    75ac:	003fc306 	br	74bc <__alt_data_end+0xfc0074bc>
    75b0:	8880030b 	ldhu	r2,12(r17)
    75b4:	88c00417 	ldw	r3,16(r17)
    75b8:	88000115 	stw	zero,4(r17)
    75bc:	10bdffcc 	andi	r2,r2,63487
    75c0:	8880030d 	sth	r2,12(r17)
    75c4:	88c00015 	stw	r3,0(r17)
    75c8:	003fb306 	br	7498 <__alt_data_end+0xfc007498>
    75cc:	98800017 	ldw	r2,0(r19)
    75d0:	103fea26 	beq	r2,zero,757c <__alt_data_end+0xfc00757c>
    75d4:	00c00744 	movi	r3,29
    75d8:	10c00226 	beq	r2,r3,75e4 <__sflush_r+0x1fc>
    75dc:	00c00584 	movi	r3,22
    75e0:	10c0031e 	bne	r2,r3,75f0 <__sflush_r+0x208>
    75e4:	9c000015 	stw	r16,0(r19)
    75e8:	0005883a 	mov	r2,zero
    75ec:	003fb306 	br	74bc <__alt_data_end+0xfc0074bc>
    75f0:	88c0030b 	ldhu	r3,12(r17)
    75f4:	3005883a 	mov	r2,r6
    75f8:	18c01014 	ori	r3,r3,64
    75fc:	88c0030d 	sth	r3,12(r17)
    7600:	003fae06 	br	74bc <__alt_data_end+0xfc0074bc>

00007604 <_fflush_r>:
    7604:	defffd04 	addi	sp,sp,-12
    7608:	dc000115 	stw	r16,4(sp)
    760c:	dfc00215 	stw	ra,8(sp)
    7610:	2021883a 	mov	r16,r4
    7614:	20000226 	beq	r4,zero,7620 <_fflush_r+0x1c>
    7618:	20800e17 	ldw	r2,56(r4)
    761c:	10000c26 	beq	r2,zero,7650 <_fflush_r+0x4c>
    7620:	2880030f 	ldh	r2,12(r5)
    7624:	1000051e 	bne	r2,zero,763c <_fflush_r+0x38>
    7628:	0005883a 	mov	r2,zero
    762c:	dfc00217 	ldw	ra,8(sp)
    7630:	dc000117 	ldw	r16,4(sp)
    7634:	dec00304 	addi	sp,sp,12
    7638:	f800283a 	ret
    763c:	8009883a 	mov	r4,r16
    7640:	dfc00217 	ldw	ra,8(sp)
    7644:	dc000117 	ldw	r16,4(sp)
    7648:	dec00304 	addi	sp,sp,12
    764c:	00073e81 	jmpi	73e8 <__sflush_r>
    7650:	d9400015 	stw	r5,0(sp)
    7654:	00079f00 	call	79f0 <__sinit>
    7658:	d9400017 	ldw	r5,0(sp)
    765c:	003ff006 	br	7620 <__alt_data_end+0xfc007620>

00007660 <fflush>:
    7660:	20000526 	beq	r4,zero,7678 <fflush+0x18>
    7664:	00800074 	movhi	r2,1
    7668:	109bc904 	addi	r2,r2,28452
    766c:	200b883a 	mov	r5,r4
    7670:	11000017 	ldw	r4,0(r2)
    7674:	00076041 	jmpi	7604 <_fflush_r>
    7678:	00800074 	movhi	r2,1
    767c:	109bc804 	addi	r2,r2,28448
    7680:	11000017 	ldw	r4,0(r2)
    7684:	01400034 	movhi	r5,0
    7688:	295d8104 	addi	r5,r5,30212
    768c:	00084001 	jmpi	8400 <_fwalk_reent>

00007690 <__fp_unlock>:
    7690:	0005883a 	mov	r2,zero
    7694:	f800283a 	ret

00007698 <_cleanup_r>:
    7698:	01400074 	movhi	r5,1
    769c:	29721704 	addi	r5,r5,-14244
    76a0:	00084001 	jmpi	8400 <_fwalk_reent>

000076a4 <__sinit.part.1>:
    76a4:	defff704 	addi	sp,sp,-36
    76a8:	00c00034 	movhi	r3,0
    76ac:	dfc00815 	stw	ra,32(sp)
    76b0:	ddc00715 	stw	r23,28(sp)
    76b4:	dd800615 	stw	r22,24(sp)
    76b8:	dd400515 	stw	r21,20(sp)
    76bc:	dd000415 	stw	r20,16(sp)
    76c0:	dcc00315 	stw	r19,12(sp)
    76c4:	dc800215 	stw	r18,8(sp)
    76c8:	dc400115 	stw	r17,4(sp)
    76cc:	dc000015 	stw	r16,0(sp)
    76d0:	18dda604 	addi	r3,r3,30360
    76d4:	24000117 	ldw	r16,4(r4)
    76d8:	20c00f15 	stw	r3,60(r4)
    76dc:	2080bb04 	addi	r2,r4,748
    76e0:	00c000c4 	movi	r3,3
    76e4:	20c0b915 	stw	r3,740(r4)
    76e8:	2080ba15 	stw	r2,744(r4)
    76ec:	2000b815 	stw	zero,736(r4)
    76f0:	05c00204 	movi	r23,8
    76f4:	00800104 	movi	r2,4
    76f8:	2025883a 	mov	r18,r4
    76fc:	b80d883a 	mov	r6,r23
    7700:	81001704 	addi	r4,r16,92
    7704:	000b883a 	mov	r5,zero
    7708:	80000015 	stw	zero,0(r16)
    770c:	80000115 	stw	zero,4(r16)
    7710:	80000215 	stw	zero,8(r16)
    7714:	8080030d 	sth	r2,12(r16)
    7718:	80001915 	stw	zero,100(r16)
    771c:	8000038d 	sth	zero,14(r16)
    7720:	80000415 	stw	zero,16(r16)
    7724:	80000515 	stw	zero,20(r16)
    7728:	80000615 	stw	zero,24(r16)
    772c:	00092f00 	call	92f0 <memset>
    7730:	05800074 	movhi	r22,1
    7734:	94400217 	ldw	r17,8(r18)
    7738:	05400074 	movhi	r21,1
    773c:	05000074 	movhi	r20,1
    7740:	04c00074 	movhi	r19,1
    7744:	b5ab1904 	addi	r22,r22,-21404
    7748:	ad6b3004 	addi	r21,r21,-21312
    774c:	a52b4f04 	addi	r20,r20,-21188
    7750:	9ceb6604 	addi	r19,r19,-21096
    7754:	85800815 	stw	r22,32(r16)
    7758:	85400915 	stw	r21,36(r16)
    775c:	85000a15 	stw	r20,40(r16)
    7760:	84c00b15 	stw	r19,44(r16)
    7764:	84000715 	stw	r16,28(r16)
    7768:	00800284 	movi	r2,10
    776c:	8880030d 	sth	r2,12(r17)
    7770:	00800044 	movi	r2,1
    7774:	b80d883a 	mov	r6,r23
    7778:	89001704 	addi	r4,r17,92
    777c:	000b883a 	mov	r5,zero
    7780:	88000015 	stw	zero,0(r17)
    7784:	88000115 	stw	zero,4(r17)
    7788:	88000215 	stw	zero,8(r17)
    778c:	88001915 	stw	zero,100(r17)
    7790:	8880038d 	sth	r2,14(r17)
    7794:	88000415 	stw	zero,16(r17)
    7798:	88000515 	stw	zero,20(r17)
    779c:	88000615 	stw	zero,24(r17)
    77a0:	00092f00 	call	92f0 <memset>
    77a4:	94000317 	ldw	r16,12(r18)
    77a8:	00800484 	movi	r2,18
    77ac:	8c400715 	stw	r17,28(r17)
    77b0:	8d800815 	stw	r22,32(r17)
    77b4:	8d400915 	stw	r21,36(r17)
    77b8:	8d000a15 	stw	r20,40(r17)
    77bc:	8cc00b15 	stw	r19,44(r17)
    77c0:	8080030d 	sth	r2,12(r16)
    77c4:	00800084 	movi	r2,2
    77c8:	80000015 	stw	zero,0(r16)
    77cc:	80000115 	stw	zero,4(r16)
    77d0:	80000215 	stw	zero,8(r16)
    77d4:	80001915 	stw	zero,100(r16)
    77d8:	8080038d 	sth	r2,14(r16)
    77dc:	80000415 	stw	zero,16(r16)
    77e0:	80000515 	stw	zero,20(r16)
    77e4:	80000615 	stw	zero,24(r16)
    77e8:	b80d883a 	mov	r6,r23
    77ec:	000b883a 	mov	r5,zero
    77f0:	81001704 	addi	r4,r16,92
    77f4:	00092f00 	call	92f0 <memset>
    77f8:	00800044 	movi	r2,1
    77fc:	84000715 	stw	r16,28(r16)
    7800:	85800815 	stw	r22,32(r16)
    7804:	85400915 	stw	r21,36(r16)
    7808:	85000a15 	stw	r20,40(r16)
    780c:	84c00b15 	stw	r19,44(r16)
    7810:	90800e15 	stw	r2,56(r18)
    7814:	dfc00817 	ldw	ra,32(sp)
    7818:	ddc00717 	ldw	r23,28(sp)
    781c:	dd800617 	ldw	r22,24(sp)
    7820:	dd400517 	ldw	r21,20(sp)
    7824:	dd000417 	ldw	r20,16(sp)
    7828:	dcc00317 	ldw	r19,12(sp)
    782c:	dc800217 	ldw	r18,8(sp)
    7830:	dc400117 	ldw	r17,4(sp)
    7834:	dc000017 	ldw	r16,0(sp)
    7838:	dec00904 	addi	sp,sp,36
    783c:	f800283a 	ret

00007840 <__fp_lock>:
    7840:	0005883a 	mov	r2,zero
    7844:	f800283a 	ret

00007848 <__sfmoreglue>:
    7848:	defffc04 	addi	sp,sp,-16
    784c:	dc800215 	stw	r18,8(sp)
    7850:	2825883a 	mov	r18,r5
    7854:	dc000015 	stw	r16,0(sp)
    7858:	01401a04 	movi	r5,104
    785c:	2021883a 	mov	r16,r4
    7860:	913fffc4 	addi	r4,r18,-1
    7864:	dfc00315 	stw	ra,12(sp)
    7868:	dc400115 	stw	r17,4(sp)
    786c:	00034100 	call	3410 <__mulsi3>
    7870:	8009883a 	mov	r4,r16
    7874:	11401d04 	addi	r5,r2,116
    7878:	1023883a 	mov	r17,r2
    787c:	000875c0 	call	875c <_malloc_r>
    7880:	1021883a 	mov	r16,r2
    7884:	10000726 	beq	r2,zero,78a4 <__sfmoreglue+0x5c>
    7888:	11000304 	addi	r4,r2,12
    788c:	10000015 	stw	zero,0(r2)
    7890:	14800115 	stw	r18,4(r2)
    7894:	11000215 	stw	r4,8(r2)
    7898:	89801a04 	addi	r6,r17,104
    789c:	000b883a 	mov	r5,zero
    78a0:	00092f00 	call	92f0 <memset>
    78a4:	8005883a 	mov	r2,r16
    78a8:	dfc00317 	ldw	ra,12(sp)
    78ac:	dc800217 	ldw	r18,8(sp)
    78b0:	dc400117 	ldw	r17,4(sp)
    78b4:	dc000017 	ldw	r16,0(sp)
    78b8:	dec00404 	addi	sp,sp,16
    78bc:	f800283a 	ret

000078c0 <__sfp>:
    78c0:	defffb04 	addi	sp,sp,-20
    78c4:	dc000015 	stw	r16,0(sp)
    78c8:	04000074 	movhi	r16,1
    78cc:	841bc804 	addi	r16,r16,28448
    78d0:	dcc00315 	stw	r19,12(sp)
    78d4:	2027883a 	mov	r19,r4
    78d8:	81000017 	ldw	r4,0(r16)
    78dc:	dfc00415 	stw	ra,16(sp)
    78e0:	dc800215 	stw	r18,8(sp)
    78e4:	20800e17 	ldw	r2,56(r4)
    78e8:	dc400115 	stw	r17,4(sp)
    78ec:	1000021e 	bne	r2,zero,78f8 <__sfp+0x38>
    78f0:	00076a40 	call	76a4 <__sinit.part.1>
    78f4:	81000017 	ldw	r4,0(r16)
    78f8:	2480b804 	addi	r18,r4,736
    78fc:	047fffc4 	movi	r17,-1
    7900:	91000117 	ldw	r4,4(r18)
    7904:	94000217 	ldw	r16,8(r18)
    7908:	213fffc4 	addi	r4,r4,-1
    790c:	20000a16 	blt	r4,zero,7938 <__sfp+0x78>
    7910:	8080030f 	ldh	r2,12(r16)
    7914:	10000c26 	beq	r2,zero,7948 <__sfp+0x88>
    7918:	80c01d04 	addi	r3,r16,116
    791c:	00000206 	br	7928 <__sfp+0x68>
    7920:	18bfe60f 	ldh	r2,-104(r3)
    7924:	10000826 	beq	r2,zero,7948 <__sfp+0x88>
    7928:	213fffc4 	addi	r4,r4,-1
    792c:	1c3ffd04 	addi	r16,r3,-12
    7930:	18c01a04 	addi	r3,r3,104
    7934:	247ffa1e 	bne	r4,r17,7920 <__alt_data_end+0xfc007920>
    7938:	90800017 	ldw	r2,0(r18)
    793c:	10001d26 	beq	r2,zero,79b4 <__sfp+0xf4>
    7940:	1025883a 	mov	r18,r2
    7944:	003fee06 	br	7900 <__alt_data_end+0xfc007900>
    7948:	00bfffc4 	movi	r2,-1
    794c:	8080038d 	sth	r2,14(r16)
    7950:	00800044 	movi	r2,1
    7954:	8080030d 	sth	r2,12(r16)
    7958:	80001915 	stw	zero,100(r16)
    795c:	80000015 	stw	zero,0(r16)
    7960:	80000215 	stw	zero,8(r16)
    7964:	80000115 	stw	zero,4(r16)
    7968:	80000415 	stw	zero,16(r16)
    796c:	80000515 	stw	zero,20(r16)
    7970:	80000615 	stw	zero,24(r16)
    7974:	01800204 	movi	r6,8
    7978:	000b883a 	mov	r5,zero
    797c:	81001704 	addi	r4,r16,92
    7980:	00092f00 	call	92f0 <memset>
    7984:	8005883a 	mov	r2,r16
    7988:	80000c15 	stw	zero,48(r16)
    798c:	80000d15 	stw	zero,52(r16)
    7990:	80001115 	stw	zero,68(r16)
    7994:	80001215 	stw	zero,72(r16)
    7998:	dfc00417 	ldw	ra,16(sp)
    799c:	dcc00317 	ldw	r19,12(sp)
    79a0:	dc800217 	ldw	r18,8(sp)
    79a4:	dc400117 	ldw	r17,4(sp)
    79a8:	dc000017 	ldw	r16,0(sp)
    79ac:	dec00504 	addi	sp,sp,20
    79b0:	f800283a 	ret
    79b4:	01400104 	movi	r5,4
    79b8:	9809883a 	mov	r4,r19
    79bc:	00078480 	call	7848 <__sfmoreglue>
    79c0:	90800015 	stw	r2,0(r18)
    79c4:	103fde1e 	bne	r2,zero,7940 <__alt_data_end+0xfc007940>
    79c8:	00800304 	movi	r2,12
    79cc:	98800015 	stw	r2,0(r19)
    79d0:	0005883a 	mov	r2,zero
    79d4:	003ff006 	br	7998 <__alt_data_end+0xfc007998>

000079d8 <_cleanup>:
    79d8:	00800074 	movhi	r2,1
    79dc:	109bc804 	addi	r2,r2,28448
    79e0:	11000017 	ldw	r4,0(r2)
    79e4:	01400074 	movhi	r5,1
    79e8:	29721704 	addi	r5,r5,-14244
    79ec:	00084001 	jmpi	8400 <_fwalk_reent>

000079f0 <__sinit>:
    79f0:	20800e17 	ldw	r2,56(r4)
    79f4:	10000126 	beq	r2,zero,79fc <__sinit+0xc>
    79f8:	f800283a 	ret
    79fc:	00076a41 	jmpi	76a4 <__sinit.part.1>

00007a00 <__sfp_lock_acquire>:
    7a00:	f800283a 	ret

00007a04 <__sfp_lock_release>:
    7a04:	f800283a 	ret

00007a08 <__sinit_lock_acquire>:
    7a08:	f800283a 	ret

00007a0c <__sinit_lock_release>:
    7a0c:	f800283a 	ret

00007a10 <__fp_lock_all>:
    7a10:	00800074 	movhi	r2,1
    7a14:	109bc904 	addi	r2,r2,28452
    7a18:	11000017 	ldw	r4,0(r2)
    7a1c:	01400034 	movhi	r5,0
    7a20:	295e1004 	addi	r5,r5,30784
    7a24:	000833c1 	jmpi	833c <_fwalk>

00007a28 <__fp_unlock_all>:
    7a28:	00800074 	movhi	r2,1
    7a2c:	109bc904 	addi	r2,r2,28452
    7a30:	11000017 	ldw	r4,0(r2)
    7a34:	01400034 	movhi	r5,0
    7a38:	295da404 	addi	r5,r5,30352
    7a3c:	000833c1 	jmpi	833c <_fwalk>

00007a40 <_malloc_trim_r>:
    7a40:	defffb04 	addi	sp,sp,-20
    7a44:	dcc00315 	stw	r19,12(sp)
    7a48:	04c00074 	movhi	r19,1
    7a4c:	dc800215 	stw	r18,8(sp)
    7a50:	dc400115 	stw	r17,4(sp)
    7a54:	dc000015 	stw	r16,0(sp)
    7a58:	dfc00415 	stw	ra,16(sp)
    7a5c:	2821883a 	mov	r16,r5
    7a60:	9cd63204 	addi	r19,r19,22728
    7a64:	2025883a 	mov	r18,r4
    7a68:	00108c00 	call	108c0 <__malloc_lock>
    7a6c:	98800217 	ldw	r2,8(r19)
    7a70:	14400117 	ldw	r17,4(r2)
    7a74:	00bfff04 	movi	r2,-4
    7a78:	88a2703a 	and	r17,r17,r2
    7a7c:	8c21c83a 	sub	r16,r17,r16
    7a80:	8403fbc4 	addi	r16,r16,4079
    7a84:	8020d33a 	srli	r16,r16,12
    7a88:	0083ffc4 	movi	r2,4095
    7a8c:	843fffc4 	addi	r16,r16,-1
    7a90:	8020933a 	slli	r16,r16,12
    7a94:	1400060e 	bge	r2,r16,7ab0 <_malloc_trim_r+0x70>
    7a98:	000b883a 	mov	r5,zero
    7a9c:	9009883a 	mov	r4,r18
    7aa0:	000ac100 	call	ac10 <_sbrk_r>
    7aa4:	98c00217 	ldw	r3,8(r19)
    7aa8:	1c47883a 	add	r3,r3,r17
    7aac:	10c00a26 	beq	r2,r3,7ad8 <_malloc_trim_r+0x98>
    7ab0:	9009883a 	mov	r4,r18
    7ab4:	00108e40 	call	108e4 <__malloc_unlock>
    7ab8:	0005883a 	mov	r2,zero
    7abc:	dfc00417 	ldw	ra,16(sp)
    7ac0:	dcc00317 	ldw	r19,12(sp)
    7ac4:	dc800217 	ldw	r18,8(sp)
    7ac8:	dc400117 	ldw	r17,4(sp)
    7acc:	dc000017 	ldw	r16,0(sp)
    7ad0:	dec00504 	addi	sp,sp,20
    7ad4:	f800283a 	ret
    7ad8:	040bc83a 	sub	r5,zero,r16
    7adc:	9009883a 	mov	r4,r18
    7ae0:	000ac100 	call	ac10 <_sbrk_r>
    7ae4:	00ffffc4 	movi	r3,-1
    7ae8:	10c00d26 	beq	r2,r3,7b20 <_malloc_trim_r+0xe0>
    7aec:	00c000b4 	movhi	r3,2
    7af0:	18e2d304 	addi	r3,r3,-29876
    7af4:	18800017 	ldw	r2,0(r3)
    7af8:	99000217 	ldw	r4,8(r19)
    7afc:	8c23c83a 	sub	r17,r17,r16
    7b00:	8c400054 	ori	r17,r17,1
    7b04:	1421c83a 	sub	r16,r2,r16
    7b08:	24400115 	stw	r17,4(r4)
    7b0c:	9009883a 	mov	r4,r18
    7b10:	1c000015 	stw	r16,0(r3)
    7b14:	00108e40 	call	108e4 <__malloc_unlock>
    7b18:	00800044 	movi	r2,1
    7b1c:	003fe706 	br	7abc <__alt_data_end+0xfc007abc>
    7b20:	000b883a 	mov	r5,zero
    7b24:	9009883a 	mov	r4,r18
    7b28:	000ac100 	call	ac10 <_sbrk_r>
    7b2c:	99000217 	ldw	r4,8(r19)
    7b30:	014003c4 	movi	r5,15
    7b34:	1107c83a 	sub	r3,r2,r4
    7b38:	28ffdd0e 	bge	r5,r3,7ab0 <__alt_data_end+0xfc007ab0>
    7b3c:	01400074 	movhi	r5,1
    7b40:	295bcb04 	addi	r5,r5,28460
    7b44:	29400017 	ldw	r5,0(r5)
    7b48:	18c00054 	ori	r3,r3,1
    7b4c:	20c00115 	stw	r3,4(r4)
    7b50:	00c000b4 	movhi	r3,2
    7b54:	1145c83a 	sub	r2,r2,r5
    7b58:	18e2d304 	addi	r3,r3,-29876
    7b5c:	18800015 	stw	r2,0(r3)
    7b60:	003fd306 	br	7ab0 <__alt_data_end+0xfc007ab0>

00007b64 <_free_r>:
    7b64:	28004126 	beq	r5,zero,7c6c <_free_r+0x108>
    7b68:	defffd04 	addi	sp,sp,-12
    7b6c:	dc400115 	stw	r17,4(sp)
    7b70:	dc000015 	stw	r16,0(sp)
    7b74:	2023883a 	mov	r17,r4
    7b78:	2821883a 	mov	r16,r5
    7b7c:	dfc00215 	stw	ra,8(sp)
    7b80:	00108c00 	call	108c0 <__malloc_lock>
    7b84:	81ffff17 	ldw	r7,-4(r16)
    7b88:	00bfff84 	movi	r2,-2
    7b8c:	01000074 	movhi	r4,1
    7b90:	81bffe04 	addi	r6,r16,-8
    7b94:	3884703a 	and	r2,r7,r2
    7b98:	21163204 	addi	r4,r4,22728
    7b9c:	308b883a 	add	r5,r6,r2
    7ba0:	2a400117 	ldw	r9,4(r5)
    7ba4:	22000217 	ldw	r8,8(r4)
    7ba8:	00ffff04 	movi	r3,-4
    7bac:	48c6703a 	and	r3,r9,r3
    7bb0:	2a005726 	beq	r5,r8,7d10 <_free_r+0x1ac>
    7bb4:	28c00115 	stw	r3,4(r5)
    7bb8:	39c0004c 	andi	r7,r7,1
    7bbc:	3800091e 	bne	r7,zero,7be4 <_free_r+0x80>
    7bc0:	823ffe17 	ldw	r8,-8(r16)
    7bc4:	22400204 	addi	r9,r4,8
    7bc8:	320dc83a 	sub	r6,r6,r8
    7bcc:	31c00217 	ldw	r7,8(r6)
    7bd0:	1205883a 	add	r2,r2,r8
    7bd4:	3a406526 	beq	r7,r9,7d6c <_free_r+0x208>
    7bd8:	32000317 	ldw	r8,12(r6)
    7bdc:	3a000315 	stw	r8,12(r7)
    7be0:	41c00215 	stw	r7,8(r8)
    7be4:	28cf883a 	add	r7,r5,r3
    7be8:	39c00117 	ldw	r7,4(r7)
    7bec:	39c0004c 	andi	r7,r7,1
    7bf0:	38003a26 	beq	r7,zero,7cdc <_free_r+0x178>
    7bf4:	10c00054 	ori	r3,r2,1
    7bf8:	30c00115 	stw	r3,4(r6)
    7bfc:	3087883a 	add	r3,r6,r2
    7c00:	18800015 	stw	r2,0(r3)
    7c04:	00c07fc4 	movi	r3,511
    7c08:	18801936 	bltu	r3,r2,7c70 <_free_r+0x10c>
    7c0c:	1004d0fa 	srli	r2,r2,3
    7c10:	01c00044 	movi	r7,1
    7c14:	21400117 	ldw	r5,4(r4)
    7c18:	10c00044 	addi	r3,r2,1
    7c1c:	18c7883a 	add	r3,r3,r3
    7c20:	1005d0ba 	srai	r2,r2,2
    7c24:	18c7883a 	add	r3,r3,r3
    7c28:	18c7883a 	add	r3,r3,r3
    7c2c:	1907883a 	add	r3,r3,r4
    7c30:	3884983a 	sll	r2,r7,r2
    7c34:	19c00017 	ldw	r7,0(r3)
    7c38:	1a3ffe04 	addi	r8,r3,-8
    7c3c:	1144b03a 	or	r2,r2,r5
    7c40:	32000315 	stw	r8,12(r6)
    7c44:	31c00215 	stw	r7,8(r6)
    7c48:	20800115 	stw	r2,4(r4)
    7c4c:	19800015 	stw	r6,0(r3)
    7c50:	39800315 	stw	r6,12(r7)
    7c54:	8809883a 	mov	r4,r17
    7c58:	dfc00217 	ldw	ra,8(sp)
    7c5c:	dc400117 	ldw	r17,4(sp)
    7c60:	dc000017 	ldw	r16,0(sp)
    7c64:	dec00304 	addi	sp,sp,12
    7c68:	00108e41 	jmpi	108e4 <__malloc_unlock>
    7c6c:	f800283a 	ret
    7c70:	100ad27a 	srli	r5,r2,9
    7c74:	00c00104 	movi	r3,4
    7c78:	19404a36 	bltu	r3,r5,7da4 <_free_r+0x240>
    7c7c:	100ad1ba 	srli	r5,r2,6
    7c80:	28c00e44 	addi	r3,r5,57
    7c84:	18c7883a 	add	r3,r3,r3
    7c88:	29400e04 	addi	r5,r5,56
    7c8c:	18c7883a 	add	r3,r3,r3
    7c90:	18c7883a 	add	r3,r3,r3
    7c94:	1909883a 	add	r4,r3,r4
    7c98:	20c00017 	ldw	r3,0(r4)
    7c9c:	01c00074 	movhi	r7,1
    7ca0:	213ffe04 	addi	r4,r4,-8
    7ca4:	39d63204 	addi	r7,r7,22728
    7ca8:	20c04426 	beq	r4,r3,7dbc <_free_r+0x258>
    7cac:	01ffff04 	movi	r7,-4
    7cb0:	19400117 	ldw	r5,4(r3)
    7cb4:	29ca703a 	and	r5,r5,r7
    7cb8:	1140022e 	bgeu	r2,r5,7cc4 <_free_r+0x160>
    7cbc:	18c00217 	ldw	r3,8(r3)
    7cc0:	20fffb1e 	bne	r4,r3,7cb0 <__alt_data_end+0xfc007cb0>
    7cc4:	19000317 	ldw	r4,12(r3)
    7cc8:	31000315 	stw	r4,12(r6)
    7ccc:	30c00215 	stw	r3,8(r6)
    7cd0:	21800215 	stw	r6,8(r4)
    7cd4:	19800315 	stw	r6,12(r3)
    7cd8:	003fde06 	br	7c54 <__alt_data_end+0xfc007c54>
    7cdc:	29c00217 	ldw	r7,8(r5)
    7ce0:	10c5883a 	add	r2,r2,r3
    7ce4:	00c00074 	movhi	r3,1
    7ce8:	18d63404 	addi	r3,r3,22736
    7cec:	38c03b26 	beq	r7,r3,7ddc <_free_r+0x278>
    7cf0:	2a000317 	ldw	r8,12(r5)
    7cf4:	11400054 	ori	r5,r2,1
    7cf8:	3087883a 	add	r3,r6,r2
    7cfc:	3a000315 	stw	r8,12(r7)
    7d00:	41c00215 	stw	r7,8(r8)
    7d04:	31400115 	stw	r5,4(r6)
    7d08:	18800015 	stw	r2,0(r3)
    7d0c:	003fbd06 	br	7c04 <__alt_data_end+0xfc007c04>
    7d10:	39c0004c 	andi	r7,r7,1
    7d14:	10c5883a 	add	r2,r2,r3
    7d18:	3800071e 	bne	r7,zero,7d38 <_free_r+0x1d4>
    7d1c:	81fffe17 	ldw	r7,-8(r16)
    7d20:	31cdc83a 	sub	r6,r6,r7
    7d24:	30c00317 	ldw	r3,12(r6)
    7d28:	31400217 	ldw	r5,8(r6)
    7d2c:	11c5883a 	add	r2,r2,r7
    7d30:	28c00315 	stw	r3,12(r5)
    7d34:	19400215 	stw	r5,8(r3)
    7d38:	10c00054 	ori	r3,r2,1
    7d3c:	30c00115 	stw	r3,4(r6)
    7d40:	00c00074 	movhi	r3,1
    7d44:	18dbcc04 	addi	r3,r3,28464
    7d48:	18c00017 	ldw	r3,0(r3)
    7d4c:	21800215 	stw	r6,8(r4)
    7d50:	10ffc036 	bltu	r2,r3,7c54 <__alt_data_end+0xfc007c54>
    7d54:	008000b4 	movhi	r2,2
    7d58:	10a2c004 	addi	r2,r2,-29952
    7d5c:	11400017 	ldw	r5,0(r2)
    7d60:	8809883a 	mov	r4,r17
    7d64:	0007a400 	call	7a40 <_malloc_trim_r>
    7d68:	003fba06 	br	7c54 <__alt_data_end+0xfc007c54>
    7d6c:	28c9883a 	add	r4,r5,r3
    7d70:	21000117 	ldw	r4,4(r4)
    7d74:	2100004c 	andi	r4,r4,1
    7d78:	2000391e 	bne	r4,zero,7e60 <_free_r+0x2fc>
    7d7c:	29c00217 	ldw	r7,8(r5)
    7d80:	29000317 	ldw	r4,12(r5)
    7d84:	1885883a 	add	r2,r3,r2
    7d88:	10c00054 	ori	r3,r2,1
    7d8c:	39000315 	stw	r4,12(r7)
    7d90:	21c00215 	stw	r7,8(r4)
    7d94:	30c00115 	stw	r3,4(r6)
    7d98:	308d883a 	add	r6,r6,r2
    7d9c:	30800015 	stw	r2,0(r6)
    7da0:	003fac06 	br	7c54 <__alt_data_end+0xfc007c54>
    7da4:	00c00504 	movi	r3,20
    7da8:	19401536 	bltu	r3,r5,7e00 <_free_r+0x29c>
    7dac:	28c01704 	addi	r3,r5,92
    7db0:	18c7883a 	add	r3,r3,r3
    7db4:	294016c4 	addi	r5,r5,91
    7db8:	003fb406 	br	7c8c <__alt_data_end+0xfc007c8c>
    7dbc:	280bd0ba 	srai	r5,r5,2
    7dc0:	00c00044 	movi	r3,1
    7dc4:	38800117 	ldw	r2,4(r7)
    7dc8:	194a983a 	sll	r5,r3,r5
    7dcc:	2007883a 	mov	r3,r4
    7dd0:	2884b03a 	or	r2,r5,r2
    7dd4:	38800115 	stw	r2,4(r7)
    7dd8:	003fbb06 	br	7cc8 <__alt_data_end+0xfc007cc8>
    7ddc:	21800515 	stw	r6,20(r4)
    7de0:	21800415 	stw	r6,16(r4)
    7de4:	10c00054 	ori	r3,r2,1
    7de8:	31c00315 	stw	r7,12(r6)
    7dec:	31c00215 	stw	r7,8(r6)
    7df0:	30c00115 	stw	r3,4(r6)
    7df4:	308d883a 	add	r6,r6,r2
    7df8:	30800015 	stw	r2,0(r6)
    7dfc:	003f9506 	br	7c54 <__alt_data_end+0xfc007c54>
    7e00:	00c01504 	movi	r3,84
    7e04:	19400536 	bltu	r3,r5,7e1c <_free_r+0x2b8>
    7e08:	100ad33a 	srli	r5,r2,12
    7e0c:	28c01bc4 	addi	r3,r5,111
    7e10:	18c7883a 	add	r3,r3,r3
    7e14:	29401b84 	addi	r5,r5,110
    7e18:	003f9c06 	br	7c8c <__alt_data_end+0xfc007c8c>
    7e1c:	00c05504 	movi	r3,340
    7e20:	19400536 	bltu	r3,r5,7e38 <_free_r+0x2d4>
    7e24:	100ad3fa 	srli	r5,r2,15
    7e28:	28c01e04 	addi	r3,r5,120
    7e2c:	18c7883a 	add	r3,r3,r3
    7e30:	29401dc4 	addi	r5,r5,119
    7e34:	003f9506 	br	7c8c <__alt_data_end+0xfc007c8c>
    7e38:	00c15504 	movi	r3,1364
    7e3c:	19400536 	bltu	r3,r5,7e54 <_free_r+0x2f0>
    7e40:	100ad4ba 	srli	r5,r2,18
    7e44:	28c01f44 	addi	r3,r5,125
    7e48:	18c7883a 	add	r3,r3,r3
    7e4c:	29401f04 	addi	r5,r5,124
    7e50:	003f8e06 	br	7c8c <__alt_data_end+0xfc007c8c>
    7e54:	00c03f84 	movi	r3,254
    7e58:	01401f84 	movi	r5,126
    7e5c:	003f8b06 	br	7c8c <__alt_data_end+0xfc007c8c>
    7e60:	10c00054 	ori	r3,r2,1
    7e64:	30c00115 	stw	r3,4(r6)
    7e68:	308d883a 	add	r6,r6,r2
    7e6c:	30800015 	stw	r2,0(r6)
    7e70:	003f7806 	br	7c54 <__alt_data_end+0xfc007c54>

00007e74 <__sfvwrite_r>:
    7e74:	30800217 	ldw	r2,8(r6)
    7e78:	10006726 	beq	r2,zero,8018 <__sfvwrite_r+0x1a4>
    7e7c:	28c0030b 	ldhu	r3,12(r5)
    7e80:	defff404 	addi	sp,sp,-48
    7e84:	dd400715 	stw	r21,28(sp)
    7e88:	dd000615 	stw	r20,24(sp)
    7e8c:	dc000215 	stw	r16,8(sp)
    7e90:	dfc00b15 	stw	ra,44(sp)
    7e94:	df000a15 	stw	fp,40(sp)
    7e98:	ddc00915 	stw	r23,36(sp)
    7e9c:	dd800815 	stw	r22,32(sp)
    7ea0:	dcc00515 	stw	r19,20(sp)
    7ea4:	dc800415 	stw	r18,16(sp)
    7ea8:	dc400315 	stw	r17,12(sp)
    7eac:	1880020c 	andi	r2,r3,8
    7eb0:	2821883a 	mov	r16,r5
    7eb4:	202b883a 	mov	r21,r4
    7eb8:	3029883a 	mov	r20,r6
    7ebc:	10002726 	beq	r2,zero,7f5c <__sfvwrite_r+0xe8>
    7ec0:	28800417 	ldw	r2,16(r5)
    7ec4:	10002526 	beq	r2,zero,7f5c <__sfvwrite_r+0xe8>
    7ec8:	1880008c 	andi	r2,r3,2
    7ecc:	a4400017 	ldw	r17,0(r20)
    7ed0:	10002a26 	beq	r2,zero,7f7c <__sfvwrite_r+0x108>
    7ed4:	05a00034 	movhi	r22,32768
    7ed8:	0027883a 	mov	r19,zero
    7edc:	0025883a 	mov	r18,zero
    7ee0:	b5bf0004 	addi	r22,r22,-1024
    7ee4:	980d883a 	mov	r6,r19
    7ee8:	a809883a 	mov	r4,r21
    7eec:	90004626 	beq	r18,zero,8008 <__sfvwrite_r+0x194>
    7ef0:	900f883a 	mov	r7,r18
    7ef4:	b480022e 	bgeu	r22,r18,7f00 <__sfvwrite_r+0x8c>
    7ef8:	01e00034 	movhi	r7,32768
    7efc:	39ff0004 	addi	r7,r7,-1024
    7f00:	80800917 	ldw	r2,36(r16)
    7f04:	81400717 	ldw	r5,28(r16)
    7f08:	103ee83a 	callr	r2
    7f0c:	00805a0e 	bge	zero,r2,8078 <__sfvwrite_r+0x204>
    7f10:	a0c00217 	ldw	r3,8(r20)
    7f14:	98a7883a 	add	r19,r19,r2
    7f18:	90a5c83a 	sub	r18,r18,r2
    7f1c:	1885c83a 	sub	r2,r3,r2
    7f20:	a0800215 	stw	r2,8(r20)
    7f24:	103fef1e 	bne	r2,zero,7ee4 <__alt_data_end+0xfc007ee4>
    7f28:	0005883a 	mov	r2,zero
    7f2c:	dfc00b17 	ldw	ra,44(sp)
    7f30:	df000a17 	ldw	fp,40(sp)
    7f34:	ddc00917 	ldw	r23,36(sp)
    7f38:	dd800817 	ldw	r22,32(sp)
    7f3c:	dd400717 	ldw	r21,28(sp)
    7f40:	dd000617 	ldw	r20,24(sp)
    7f44:	dcc00517 	ldw	r19,20(sp)
    7f48:	dc800417 	ldw	r18,16(sp)
    7f4c:	dc400317 	ldw	r17,12(sp)
    7f50:	dc000217 	ldw	r16,8(sp)
    7f54:	dec00c04 	addi	sp,sp,48
    7f58:	f800283a 	ret
    7f5c:	800b883a 	mov	r5,r16
    7f60:	a809883a 	mov	r4,r21
    7f64:	00059e40 	call	59e4 <__swsetup_r>
    7f68:	1000ee1e 	bne	r2,zero,8324 <__sfvwrite_r+0x4b0>
    7f6c:	80c0030b 	ldhu	r3,12(r16)
    7f70:	a4400017 	ldw	r17,0(r20)
    7f74:	1880008c 	andi	r2,r3,2
    7f78:	103fd61e 	bne	r2,zero,7ed4 <__alt_data_end+0xfc007ed4>
    7f7c:	1880004c 	andi	r2,r3,1
    7f80:	1000421e 	bne	r2,zero,808c <__sfvwrite_r+0x218>
    7f84:	0039883a 	mov	fp,zero
    7f88:	0025883a 	mov	r18,zero
    7f8c:	90001a26 	beq	r18,zero,7ff8 <__sfvwrite_r+0x184>
    7f90:	1880800c 	andi	r2,r3,512
    7f94:	84c00217 	ldw	r19,8(r16)
    7f98:	10002126 	beq	r2,zero,8020 <__sfvwrite_r+0x1ac>
    7f9c:	982f883a 	mov	r23,r19
    7fa0:	94c09636 	bltu	r18,r19,81fc <__sfvwrite_r+0x388>
    7fa4:	1881200c 	andi	r2,r3,1152
    7fa8:	1000a11e 	bne	r2,zero,8230 <__sfvwrite_r+0x3bc>
    7fac:	81000017 	ldw	r4,0(r16)
    7fb0:	b80d883a 	mov	r6,r23
    7fb4:	e00b883a 	mov	r5,fp
    7fb8:	00091940 	call	9194 <memmove>
    7fbc:	80c00217 	ldw	r3,8(r16)
    7fc0:	81000017 	ldw	r4,0(r16)
    7fc4:	9005883a 	mov	r2,r18
    7fc8:	1ce7c83a 	sub	r19,r3,r19
    7fcc:	25cf883a 	add	r7,r4,r23
    7fd0:	84c00215 	stw	r19,8(r16)
    7fd4:	81c00015 	stw	r7,0(r16)
    7fd8:	a0c00217 	ldw	r3,8(r20)
    7fdc:	e0b9883a 	add	fp,fp,r2
    7fe0:	90a5c83a 	sub	r18,r18,r2
    7fe4:	18a7c83a 	sub	r19,r3,r2
    7fe8:	a4c00215 	stw	r19,8(r20)
    7fec:	983fce26 	beq	r19,zero,7f28 <__alt_data_end+0xfc007f28>
    7ff0:	80c0030b 	ldhu	r3,12(r16)
    7ff4:	903fe61e 	bne	r18,zero,7f90 <__alt_data_end+0xfc007f90>
    7ff8:	8f000017 	ldw	fp,0(r17)
    7ffc:	8c800117 	ldw	r18,4(r17)
    8000:	8c400204 	addi	r17,r17,8
    8004:	003fe106 	br	7f8c <__alt_data_end+0xfc007f8c>
    8008:	8cc00017 	ldw	r19,0(r17)
    800c:	8c800117 	ldw	r18,4(r17)
    8010:	8c400204 	addi	r17,r17,8
    8014:	003fb306 	br	7ee4 <__alt_data_end+0xfc007ee4>
    8018:	0005883a 	mov	r2,zero
    801c:	f800283a 	ret
    8020:	81000017 	ldw	r4,0(r16)
    8024:	80800417 	ldw	r2,16(r16)
    8028:	11005a36 	bltu	r2,r4,8194 <__sfvwrite_r+0x320>
    802c:	85c00517 	ldw	r23,20(r16)
    8030:	95c05836 	bltu	r18,r23,8194 <__sfvwrite_r+0x320>
    8034:	00a00034 	movhi	r2,32768
    8038:	10bfffc4 	addi	r2,r2,-1
    803c:	9009883a 	mov	r4,r18
    8040:	1480012e 	bgeu	r2,r18,8048 <__sfvwrite_r+0x1d4>
    8044:	1009883a 	mov	r4,r2
    8048:	b80b883a 	mov	r5,r23
    804c:	000325c0 	call	325c <__divsi3>
    8050:	b80b883a 	mov	r5,r23
    8054:	1009883a 	mov	r4,r2
    8058:	00034100 	call	3410 <__mulsi3>
    805c:	81400717 	ldw	r5,28(r16)
    8060:	80c00917 	ldw	r3,36(r16)
    8064:	100f883a 	mov	r7,r2
    8068:	e00d883a 	mov	r6,fp
    806c:	a809883a 	mov	r4,r21
    8070:	183ee83a 	callr	r3
    8074:	00bfd816 	blt	zero,r2,7fd8 <__alt_data_end+0xfc007fd8>
    8078:	8080030b 	ldhu	r2,12(r16)
    807c:	10801014 	ori	r2,r2,64
    8080:	8080030d 	sth	r2,12(r16)
    8084:	00bfffc4 	movi	r2,-1
    8088:	003fa806 	br	7f2c <__alt_data_end+0xfc007f2c>
    808c:	0027883a 	mov	r19,zero
    8090:	0011883a 	mov	r8,zero
    8094:	0039883a 	mov	fp,zero
    8098:	0025883a 	mov	r18,zero
    809c:	90001f26 	beq	r18,zero,811c <__sfvwrite_r+0x2a8>
    80a0:	40005a26 	beq	r8,zero,820c <__sfvwrite_r+0x398>
    80a4:	982d883a 	mov	r22,r19
    80a8:	94c0012e 	bgeu	r18,r19,80b0 <__sfvwrite_r+0x23c>
    80ac:	902d883a 	mov	r22,r18
    80b0:	81000017 	ldw	r4,0(r16)
    80b4:	80800417 	ldw	r2,16(r16)
    80b8:	b02f883a 	mov	r23,r22
    80bc:	81c00517 	ldw	r7,20(r16)
    80c0:	1100032e 	bgeu	r2,r4,80d0 <__sfvwrite_r+0x25c>
    80c4:	80c00217 	ldw	r3,8(r16)
    80c8:	38c7883a 	add	r3,r7,r3
    80cc:	1d801816 	blt	r3,r22,8130 <__sfvwrite_r+0x2bc>
    80d0:	b1c03e16 	blt	r22,r7,81cc <__sfvwrite_r+0x358>
    80d4:	80800917 	ldw	r2,36(r16)
    80d8:	81400717 	ldw	r5,28(r16)
    80dc:	e00d883a 	mov	r6,fp
    80e0:	da000115 	stw	r8,4(sp)
    80e4:	a809883a 	mov	r4,r21
    80e8:	103ee83a 	callr	r2
    80ec:	102f883a 	mov	r23,r2
    80f0:	da000117 	ldw	r8,4(sp)
    80f4:	00bfe00e 	bge	zero,r2,8078 <__alt_data_end+0xfc008078>
    80f8:	9de7c83a 	sub	r19,r19,r23
    80fc:	98001f26 	beq	r19,zero,817c <__sfvwrite_r+0x308>
    8100:	a0800217 	ldw	r2,8(r20)
    8104:	e5f9883a 	add	fp,fp,r23
    8108:	95e5c83a 	sub	r18,r18,r23
    810c:	15efc83a 	sub	r23,r2,r23
    8110:	a5c00215 	stw	r23,8(r20)
    8114:	b83f8426 	beq	r23,zero,7f28 <__alt_data_end+0xfc007f28>
    8118:	903fe11e 	bne	r18,zero,80a0 <__alt_data_end+0xfc0080a0>
    811c:	8f000017 	ldw	fp,0(r17)
    8120:	8c800117 	ldw	r18,4(r17)
    8124:	0011883a 	mov	r8,zero
    8128:	8c400204 	addi	r17,r17,8
    812c:	003fdb06 	br	809c <__alt_data_end+0xfc00809c>
    8130:	180d883a 	mov	r6,r3
    8134:	e00b883a 	mov	r5,fp
    8138:	da000115 	stw	r8,4(sp)
    813c:	d8c00015 	stw	r3,0(sp)
    8140:	00091940 	call	9194 <memmove>
    8144:	d8c00017 	ldw	r3,0(sp)
    8148:	80800017 	ldw	r2,0(r16)
    814c:	800b883a 	mov	r5,r16
    8150:	a809883a 	mov	r4,r21
    8154:	10c5883a 	add	r2,r2,r3
    8158:	80800015 	stw	r2,0(r16)
    815c:	d8c00015 	stw	r3,0(sp)
    8160:	00076040 	call	7604 <_fflush_r>
    8164:	d8c00017 	ldw	r3,0(sp)
    8168:	da000117 	ldw	r8,4(sp)
    816c:	103fc21e 	bne	r2,zero,8078 <__alt_data_end+0xfc008078>
    8170:	182f883a 	mov	r23,r3
    8174:	9de7c83a 	sub	r19,r19,r23
    8178:	983fe11e 	bne	r19,zero,8100 <__alt_data_end+0xfc008100>
    817c:	800b883a 	mov	r5,r16
    8180:	a809883a 	mov	r4,r21
    8184:	00076040 	call	7604 <_fflush_r>
    8188:	103fbb1e 	bne	r2,zero,8078 <__alt_data_end+0xfc008078>
    818c:	0011883a 	mov	r8,zero
    8190:	003fdb06 	br	8100 <__alt_data_end+0xfc008100>
    8194:	94c0012e 	bgeu	r18,r19,819c <__sfvwrite_r+0x328>
    8198:	9027883a 	mov	r19,r18
    819c:	980d883a 	mov	r6,r19
    81a0:	e00b883a 	mov	r5,fp
    81a4:	00091940 	call	9194 <memmove>
    81a8:	80800217 	ldw	r2,8(r16)
    81ac:	80c00017 	ldw	r3,0(r16)
    81b0:	14c5c83a 	sub	r2,r2,r19
    81b4:	1cc7883a 	add	r3,r3,r19
    81b8:	80800215 	stw	r2,8(r16)
    81bc:	80c00015 	stw	r3,0(r16)
    81c0:	10004326 	beq	r2,zero,82d0 <__sfvwrite_r+0x45c>
    81c4:	9805883a 	mov	r2,r19
    81c8:	003f8306 	br	7fd8 <__alt_data_end+0xfc007fd8>
    81cc:	b00d883a 	mov	r6,r22
    81d0:	e00b883a 	mov	r5,fp
    81d4:	da000115 	stw	r8,4(sp)
    81d8:	00091940 	call	9194 <memmove>
    81dc:	80800217 	ldw	r2,8(r16)
    81e0:	80c00017 	ldw	r3,0(r16)
    81e4:	da000117 	ldw	r8,4(sp)
    81e8:	1585c83a 	sub	r2,r2,r22
    81ec:	1dad883a 	add	r22,r3,r22
    81f0:	80800215 	stw	r2,8(r16)
    81f4:	85800015 	stw	r22,0(r16)
    81f8:	003fbf06 	br	80f8 <__alt_data_end+0xfc0080f8>
    81fc:	81000017 	ldw	r4,0(r16)
    8200:	9027883a 	mov	r19,r18
    8204:	902f883a 	mov	r23,r18
    8208:	003f6906 	br	7fb0 <__alt_data_end+0xfc007fb0>
    820c:	900d883a 	mov	r6,r18
    8210:	01400284 	movi	r5,10
    8214:	e009883a 	mov	r4,fp
    8218:	0008f680 	call	8f68 <memchr>
    821c:	10003e26 	beq	r2,zero,8318 <__sfvwrite_r+0x4a4>
    8220:	10800044 	addi	r2,r2,1
    8224:	1727c83a 	sub	r19,r2,fp
    8228:	02000044 	movi	r8,1
    822c:	003f9d06 	br	80a4 <__alt_data_end+0xfc0080a4>
    8230:	80800517 	ldw	r2,20(r16)
    8234:	81400417 	ldw	r5,16(r16)
    8238:	81c00017 	ldw	r7,0(r16)
    823c:	10a7883a 	add	r19,r2,r2
    8240:	9885883a 	add	r2,r19,r2
    8244:	1026d7fa 	srli	r19,r2,31
    8248:	396dc83a 	sub	r22,r7,r5
    824c:	b1000044 	addi	r4,r22,1
    8250:	9885883a 	add	r2,r19,r2
    8254:	1027d07a 	srai	r19,r2,1
    8258:	2485883a 	add	r2,r4,r18
    825c:	980d883a 	mov	r6,r19
    8260:	9880022e 	bgeu	r19,r2,826c <__sfvwrite_r+0x3f8>
    8264:	1027883a 	mov	r19,r2
    8268:	100d883a 	mov	r6,r2
    826c:	18c1000c 	andi	r3,r3,1024
    8270:	18001c26 	beq	r3,zero,82e4 <__sfvwrite_r+0x470>
    8274:	300b883a 	mov	r5,r6
    8278:	a809883a 	mov	r4,r21
    827c:	000875c0 	call	875c <_malloc_r>
    8280:	102f883a 	mov	r23,r2
    8284:	10002926 	beq	r2,zero,832c <__sfvwrite_r+0x4b8>
    8288:	81400417 	ldw	r5,16(r16)
    828c:	b00d883a 	mov	r6,r22
    8290:	1009883a 	mov	r4,r2
    8294:	000904c0 	call	904c <memcpy>
    8298:	8080030b 	ldhu	r2,12(r16)
    829c:	00fedfc4 	movi	r3,-1153
    82a0:	10c4703a 	and	r2,r2,r3
    82a4:	10802014 	ori	r2,r2,128
    82a8:	8080030d 	sth	r2,12(r16)
    82ac:	bd89883a 	add	r4,r23,r22
    82b0:	9d8fc83a 	sub	r7,r19,r22
    82b4:	85c00415 	stw	r23,16(r16)
    82b8:	84c00515 	stw	r19,20(r16)
    82bc:	81000015 	stw	r4,0(r16)
    82c0:	9027883a 	mov	r19,r18
    82c4:	81c00215 	stw	r7,8(r16)
    82c8:	902f883a 	mov	r23,r18
    82cc:	003f3806 	br	7fb0 <__alt_data_end+0xfc007fb0>
    82d0:	800b883a 	mov	r5,r16
    82d4:	a809883a 	mov	r4,r21
    82d8:	00076040 	call	7604 <_fflush_r>
    82dc:	103fb926 	beq	r2,zero,81c4 <__alt_data_end+0xfc0081c4>
    82e0:	003f6506 	br	8078 <__alt_data_end+0xfc008078>
    82e4:	a809883a 	mov	r4,r21
    82e8:	000a6380 	call	a638 <_realloc_r>
    82ec:	102f883a 	mov	r23,r2
    82f0:	103fee1e 	bne	r2,zero,82ac <__alt_data_end+0xfc0082ac>
    82f4:	81400417 	ldw	r5,16(r16)
    82f8:	a809883a 	mov	r4,r21
    82fc:	0007b640 	call	7b64 <_free_r>
    8300:	8080030b 	ldhu	r2,12(r16)
    8304:	00ffdfc4 	movi	r3,-129
    8308:	1884703a 	and	r2,r3,r2
    830c:	00c00304 	movi	r3,12
    8310:	a8c00015 	stw	r3,0(r21)
    8314:	003f5906 	br	807c <__alt_data_end+0xfc00807c>
    8318:	94c00044 	addi	r19,r18,1
    831c:	02000044 	movi	r8,1
    8320:	003f6006 	br	80a4 <__alt_data_end+0xfc0080a4>
    8324:	00bfffc4 	movi	r2,-1
    8328:	003f0006 	br	7f2c <__alt_data_end+0xfc007f2c>
    832c:	00800304 	movi	r2,12
    8330:	a8800015 	stw	r2,0(r21)
    8334:	8080030b 	ldhu	r2,12(r16)
    8338:	003f5006 	br	807c <__alt_data_end+0xfc00807c>

0000833c <_fwalk>:
    833c:	defff704 	addi	sp,sp,-36
    8340:	dd000415 	stw	r20,16(sp)
    8344:	dfc00815 	stw	ra,32(sp)
    8348:	ddc00715 	stw	r23,28(sp)
    834c:	dd800615 	stw	r22,24(sp)
    8350:	dd400515 	stw	r21,20(sp)
    8354:	dcc00315 	stw	r19,12(sp)
    8358:	dc800215 	stw	r18,8(sp)
    835c:	dc400115 	stw	r17,4(sp)
    8360:	dc000015 	stw	r16,0(sp)
    8364:	2500b804 	addi	r20,r4,736
    8368:	a0002326 	beq	r20,zero,83f8 <_fwalk+0xbc>
    836c:	282b883a 	mov	r21,r5
    8370:	002f883a 	mov	r23,zero
    8374:	05800044 	movi	r22,1
    8378:	04ffffc4 	movi	r19,-1
    837c:	a4400117 	ldw	r17,4(r20)
    8380:	a4800217 	ldw	r18,8(r20)
    8384:	8c7fffc4 	addi	r17,r17,-1
    8388:	88000d16 	blt	r17,zero,83c0 <_fwalk+0x84>
    838c:	94000304 	addi	r16,r18,12
    8390:	94800384 	addi	r18,r18,14
    8394:	8080000b 	ldhu	r2,0(r16)
    8398:	8c7fffc4 	addi	r17,r17,-1
    839c:	813ffd04 	addi	r4,r16,-12
    83a0:	b080042e 	bgeu	r22,r2,83b4 <_fwalk+0x78>
    83a4:	9080000f 	ldh	r2,0(r18)
    83a8:	14c00226 	beq	r2,r19,83b4 <_fwalk+0x78>
    83ac:	a83ee83a 	callr	r21
    83b0:	b8aeb03a 	or	r23,r23,r2
    83b4:	84001a04 	addi	r16,r16,104
    83b8:	94801a04 	addi	r18,r18,104
    83bc:	8cfff51e 	bne	r17,r19,8394 <__alt_data_end+0xfc008394>
    83c0:	a5000017 	ldw	r20,0(r20)
    83c4:	a03fed1e 	bne	r20,zero,837c <__alt_data_end+0xfc00837c>
    83c8:	b805883a 	mov	r2,r23
    83cc:	dfc00817 	ldw	ra,32(sp)
    83d0:	ddc00717 	ldw	r23,28(sp)
    83d4:	dd800617 	ldw	r22,24(sp)
    83d8:	dd400517 	ldw	r21,20(sp)
    83dc:	dd000417 	ldw	r20,16(sp)
    83e0:	dcc00317 	ldw	r19,12(sp)
    83e4:	dc800217 	ldw	r18,8(sp)
    83e8:	dc400117 	ldw	r17,4(sp)
    83ec:	dc000017 	ldw	r16,0(sp)
    83f0:	dec00904 	addi	sp,sp,36
    83f4:	f800283a 	ret
    83f8:	002f883a 	mov	r23,zero
    83fc:	003ff206 	br	83c8 <__alt_data_end+0xfc0083c8>

00008400 <_fwalk_reent>:
    8400:	defff704 	addi	sp,sp,-36
    8404:	dd000415 	stw	r20,16(sp)
    8408:	dfc00815 	stw	ra,32(sp)
    840c:	ddc00715 	stw	r23,28(sp)
    8410:	dd800615 	stw	r22,24(sp)
    8414:	dd400515 	stw	r21,20(sp)
    8418:	dcc00315 	stw	r19,12(sp)
    841c:	dc800215 	stw	r18,8(sp)
    8420:	dc400115 	stw	r17,4(sp)
    8424:	dc000015 	stw	r16,0(sp)
    8428:	2500b804 	addi	r20,r4,736
    842c:	a0002326 	beq	r20,zero,84bc <_fwalk_reent+0xbc>
    8430:	282b883a 	mov	r21,r5
    8434:	2027883a 	mov	r19,r4
    8438:	002f883a 	mov	r23,zero
    843c:	05800044 	movi	r22,1
    8440:	04bfffc4 	movi	r18,-1
    8444:	a4400117 	ldw	r17,4(r20)
    8448:	a4000217 	ldw	r16,8(r20)
    844c:	8c7fffc4 	addi	r17,r17,-1
    8450:	88000c16 	blt	r17,zero,8484 <_fwalk_reent+0x84>
    8454:	84000304 	addi	r16,r16,12
    8458:	8080000b 	ldhu	r2,0(r16)
    845c:	8c7fffc4 	addi	r17,r17,-1
    8460:	817ffd04 	addi	r5,r16,-12
    8464:	b080052e 	bgeu	r22,r2,847c <_fwalk_reent+0x7c>
    8468:	8080008f 	ldh	r2,2(r16)
    846c:	9809883a 	mov	r4,r19
    8470:	14800226 	beq	r2,r18,847c <_fwalk_reent+0x7c>
    8474:	a83ee83a 	callr	r21
    8478:	b8aeb03a 	or	r23,r23,r2
    847c:	84001a04 	addi	r16,r16,104
    8480:	8cbff51e 	bne	r17,r18,8458 <__alt_data_end+0xfc008458>
    8484:	a5000017 	ldw	r20,0(r20)
    8488:	a03fee1e 	bne	r20,zero,8444 <__alt_data_end+0xfc008444>
    848c:	b805883a 	mov	r2,r23
    8490:	dfc00817 	ldw	ra,32(sp)
    8494:	ddc00717 	ldw	r23,28(sp)
    8498:	dd800617 	ldw	r22,24(sp)
    849c:	dd400517 	ldw	r21,20(sp)
    84a0:	dd000417 	ldw	r20,16(sp)
    84a4:	dcc00317 	ldw	r19,12(sp)
    84a8:	dc800217 	ldw	r18,8(sp)
    84ac:	dc400117 	ldw	r17,4(sp)
    84b0:	dc000017 	ldw	r16,0(sp)
    84b4:	dec00904 	addi	sp,sp,36
    84b8:	f800283a 	ret
    84bc:	002f883a 	mov	r23,zero
    84c0:	003ff206 	br	848c <__alt_data_end+0xfc00848c>

000084c4 <_setlocale_r>:
    84c4:	30001b26 	beq	r6,zero,8534 <_setlocale_r+0x70>
    84c8:	01400074 	movhi	r5,1
    84cc:	defffe04 	addi	sp,sp,-8
    84d0:	29545304 	addi	r5,r5,20812
    84d4:	3009883a 	mov	r4,r6
    84d8:	dc000015 	stw	r16,0(sp)
    84dc:	dfc00115 	stw	ra,4(sp)
    84e0:	3021883a 	mov	r16,r6
    84e4:	000ada00 	call	ada0 <strcmp>
    84e8:	1000061e 	bne	r2,zero,8504 <_setlocale_r+0x40>
    84ec:	00800074 	movhi	r2,1
    84f0:	10945204 	addi	r2,r2,20808
    84f4:	dfc00117 	ldw	ra,4(sp)
    84f8:	dc000017 	ldw	r16,0(sp)
    84fc:	dec00204 	addi	sp,sp,8
    8500:	f800283a 	ret
    8504:	01400074 	movhi	r5,1
    8508:	29545204 	addi	r5,r5,20808
    850c:	8009883a 	mov	r4,r16
    8510:	000ada00 	call	ada0 <strcmp>
    8514:	103ff526 	beq	r2,zero,84ec <__alt_data_end+0xfc0084ec>
    8518:	01400074 	movhi	r5,1
    851c:	29543d04 	addi	r5,r5,20724
    8520:	8009883a 	mov	r4,r16
    8524:	000ada00 	call	ada0 <strcmp>
    8528:	103ff026 	beq	r2,zero,84ec <__alt_data_end+0xfc0084ec>
    852c:	0005883a 	mov	r2,zero
    8530:	003ff006 	br	84f4 <__alt_data_end+0xfc0084f4>
    8534:	00800074 	movhi	r2,1
    8538:	10945204 	addi	r2,r2,20808
    853c:	f800283a 	ret

00008540 <__locale_charset>:
    8540:	00800074 	movhi	r2,1
    8544:	10961c04 	addi	r2,r2,22640
    8548:	f800283a 	ret

0000854c <__locale_mb_cur_max>:
    854c:	00800074 	movhi	r2,1
    8550:	109bca04 	addi	r2,r2,28456
    8554:	10800017 	ldw	r2,0(r2)
    8558:	f800283a 	ret

0000855c <__locale_msgcharset>:
    855c:	00800074 	movhi	r2,1
    8560:	10961404 	addi	r2,r2,22608
    8564:	f800283a 	ret

00008568 <__locale_cjk_lang>:
    8568:	0005883a 	mov	r2,zero
    856c:	f800283a 	ret

00008570 <_localeconv_r>:
    8570:	00800074 	movhi	r2,1
    8574:	10962404 	addi	r2,r2,22672
    8578:	f800283a 	ret

0000857c <setlocale>:
    857c:	00800074 	movhi	r2,1
    8580:	109bc904 	addi	r2,r2,28452
    8584:	280d883a 	mov	r6,r5
    8588:	200b883a 	mov	r5,r4
    858c:	11000017 	ldw	r4,0(r2)
    8590:	00084c41 	jmpi	84c4 <_setlocale_r>

00008594 <localeconv>:
    8594:	00800074 	movhi	r2,1
    8598:	10962404 	addi	r2,r2,22672
    859c:	f800283a 	ret

000085a0 <__smakebuf_r>:
    85a0:	2880030b 	ldhu	r2,12(r5)
    85a4:	10c0008c 	andi	r3,r2,2
    85a8:	1800411e 	bne	r3,zero,86b0 <__smakebuf_r+0x110>
    85ac:	deffec04 	addi	sp,sp,-80
    85b0:	dc000f15 	stw	r16,60(sp)
    85b4:	2821883a 	mov	r16,r5
    85b8:	2940038f 	ldh	r5,14(r5)
    85bc:	dc401015 	stw	r17,64(sp)
    85c0:	dfc01315 	stw	ra,76(sp)
    85c4:	dcc01215 	stw	r19,72(sp)
    85c8:	dc801115 	stw	r18,68(sp)
    85cc:	2023883a 	mov	r17,r4
    85d0:	28001c16 	blt	r5,zero,8644 <__smakebuf_r+0xa4>
    85d4:	d80d883a 	mov	r6,sp
    85d8:	000cb680 	call	cb68 <_fstat_r>
    85dc:	10001816 	blt	r2,zero,8640 <__smakebuf_r+0xa0>
    85e0:	d8800117 	ldw	r2,4(sp)
    85e4:	00e00014 	movui	r3,32768
    85e8:	10bc000c 	andi	r2,r2,61440
    85ec:	14c80020 	cmpeqi	r19,r2,8192
    85f0:	10c03726 	beq	r2,r3,86d0 <__smakebuf_r+0x130>
    85f4:	80c0030b 	ldhu	r3,12(r16)
    85f8:	18c20014 	ori	r3,r3,2048
    85fc:	80c0030d 	sth	r3,12(r16)
    8600:	00c80004 	movi	r3,8192
    8604:	10c0521e 	bne	r2,r3,8750 <__smakebuf_r+0x1b0>
    8608:	8140038f 	ldh	r5,14(r16)
    860c:	8809883a 	mov	r4,r17
    8610:	000cbc40 	call	cbc4 <_isatty_r>
    8614:	10004c26 	beq	r2,zero,8748 <__smakebuf_r+0x1a8>
    8618:	8080030b 	ldhu	r2,12(r16)
    861c:	80c010c4 	addi	r3,r16,67
    8620:	80c00015 	stw	r3,0(r16)
    8624:	10800054 	ori	r2,r2,1
    8628:	8080030d 	sth	r2,12(r16)
    862c:	00800044 	movi	r2,1
    8630:	80c00415 	stw	r3,16(r16)
    8634:	80800515 	stw	r2,20(r16)
    8638:	04810004 	movi	r18,1024
    863c:	00000706 	br	865c <__smakebuf_r+0xbc>
    8640:	8080030b 	ldhu	r2,12(r16)
    8644:	10c0200c 	andi	r3,r2,128
    8648:	18001f1e 	bne	r3,zero,86c8 <__smakebuf_r+0x128>
    864c:	04810004 	movi	r18,1024
    8650:	10820014 	ori	r2,r2,2048
    8654:	8080030d 	sth	r2,12(r16)
    8658:	0027883a 	mov	r19,zero
    865c:	900b883a 	mov	r5,r18
    8660:	8809883a 	mov	r4,r17
    8664:	000875c0 	call	875c <_malloc_r>
    8668:	10002c26 	beq	r2,zero,871c <__smakebuf_r+0x17c>
    866c:	80c0030b 	ldhu	r3,12(r16)
    8670:	01000034 	movhi	r4,0
    8674:	211da604 	addi	r4,r4,30360
    8678:	89000f15 	stw	r4,60(r17)
    867c:	18c02014 	ori	r3,r3,128
    8680:	80c0030d 	sth	r3,12(r16)
    8684:	80800015 	stw	r2,0(r16)
    8688:	80800415 	stw	r2,16(r16)
    868c:	84800515 	stw	r18,20(r16)
    8690:	98001a1e 	bne	r19,zero,86fc <__smakebuf_r+0x15c>
    8694:	dfc01317 	ldw	ra,76(sp)
    8698:	dcc01217 	ldw	r19,72(sp)
    869c:	dc801117 	ldw	r18,68(sp)
    86a0:	dc401017 	ldw	r17,64(sp)
    86a4:	dc000f17 	ldw	r16,60(sp)
    86a8:	dec01404 	addi	sp,sp,80
    86ac:	f800283a 	ret
    86b0:	288010c4 	addi	r2,r5,67
    86b4:	28800015 	stw	r2,0(r5)
    86b8:	28800415 	stw	r2,16(r5)
    86bc:	00800044 	movi	r2,1
    86c0:	28800515 	stw	r2,20(r5)
    86c4:	f800283a 	ret
    86c8:	04801004 	movi	r18,64
    86cc:	003fe006 	br	8650 <__alt_data_end+0xfc008650>
    86d0:	81000a17 	ldw	r4,40(r16)
    86d4:	00c00074 	movhi	r3,1
    86d8:	18eb4f04 	addi	r3,r3,-21188
    86dc:	20ffc51e 	bne	r4,r3,85f4 <__alt_data_end+0xfc0085f4>
    86e0:	8080030b 	ldhu	r2,12(r16)
    86e4:	04810004 	movi	r18,1024
    86e8:	84801315 	stw	r18,76(r16)
    86ec:	1484b03a 	or	r2,r2,r18
    86f0:	8080030d 	sth	r2,12(r16)
    86f4:	0027883a 	mov	r19,zero
    86f8:	003fd806 	br	865c <__alt_data_end+0xfc00865c>
    86fc:	8140038f 	ldh	r5,14(r16)
    8700:	8809883a 	mov	r4,r17
    8704:	000cbc40 	call	cbc4 <_isatty_r>
    8708:	103fe226 	beq	r2,zero,8694 <__alt_data_end+0xfc008694>
    870c:	8080030b 	ldhu	r2,12(r16)
    8710:	10800054 	ori	r2,r2,1
    8714:	8080030d 	sth	r2,12(r16)
    8718:	003fde06 	br	8694 <__alt_data_end+0xfc008694>
    871c:	8080030b 	ldhu	r2,12(r16)
    8720:	10c0800c 	andi	r3,r2,512
    8724:	183fdb1e 	bne	r3,zero,8694 <__alt_data_end+0xfc008694>
    8728:	10800094 	ori	r2,r2,2
    872c:	80c010c4 	addi	r3,r16,67
    8730:	8080030d 	sth	r2,12(r16)
    8734:	00800044 	movi	r2,1
    8738:	80c00015 	stw	r3,0(r16)
    873c:	80c00415 	stw	r3,16(r16)
    8740:	80800515 	stw	r2,20(r16)
    8744:	003fd306 	br	8694 <__alt_data_end+0xfc008694>
    8748:	04810004 	movi	r18,1024
    874c:	003fc306 	br	865c <__alt_data_end+0xfc00865c>
    8750:	0027883a 	mov	r19,zero
    8754:	04810004 	movi	r18,1024
    8758:	003fc006 	br	865c <__alt_data_end+0xfc00865c>

0000875c <_malloc_r>:
    875c:	defff504 	addi	sp,sp,-44
    8760:	dc800315 	stw	r18,12(sp)
    8764:	dfc00a15 	stw	ra,40(sp)
    8768:	df000915 	stw	fp,36(sp)
    876c:	ddc00815 	stw	r23,32(sp)
    8770:	dd800715 	stw	r22,28(sp)
    8774:	dd400615 	stw	r21,24(sp)
    8778:	dd000515 	stw	r20,20(sp)
    877c:	dcc00415 	stw	r19,16(sp)
    8780:	dc400215 	stw	r17,8(sp)
    8784:	dc000115 	stw	r16,4(sp)
    8788:	288002c4 	addi	r2,r5,11
    878c:	00c00584 	movi	r3,22
    8790:	2025883a 	mov	r18,r4
    8794:	18807f2e 	bgeu	r3,r2,8994 <_malloc_r+0x238>
    8798:	047ffe04 	movi	r17,-8
    879c:	1462703a 	and	r17,r2,r17
    87a0:	8800a316 	blt	r17,zero,8a30 <_malloc_r+0x2d4>
    87a4:	8940a236 	bltu	r17,r5,8a30 <_malloc_r+0x2d4>
    87a8:	00108c00 	call	108c0 <__malloc_lock>
    87ac:	00807dc4 	movi	r2,503
    87b0:	1441e92e 	bgeu	r2,r17,8f58 <_malloc_r+0x7fc>
    87b4:	8804d27a 	srli	r2,r17,9
    87b8:	1000a126 	beq	r2,zero,8a40 <_malloc_r+0x2e4>
    87bc:	00c00104 	movi	r3,4
    87c0:	18811e36 	bltu	r3,r2,8c3c <_malloc_r+0x4e0>
    87c4:	8804d1ba 	srli	r2,r17,6
    87c8:	12000e44 	addi	r8,r2,57
    87cc:	11c00e04 	addi	r7,r2,56
    87d0:	4209883a 	add	r4,r8,r8
    87d4:	04c00074 	movhi	r19,1
    87d8:	2109883a 	add	r4,r4,r4
    87dc:	9cd63204 	addi	r19,r19,22728
    87e0:	2109883a 	add	r4,r4,r4
    87e4:	9909883a 	add	r4,r19,r4
    87e8:	24000117 	ldw	r16,4(r4)
    87ec:	213ffe04 	addi	r4,r4,-8
    87f0:	24009726 	beq	r4,r16,8a50 <_malloc_r+0x2f4>
    87f4:	80800117 	ldw	r2,4(r16)
    87f8:	01bfff04 	movi	r6,-4
    87fc:	014003c4 	movi	r5,15
    8800:	1184703a 	and	r2,r2,r6
    8804:	1447c83a 	sub	r3,r2,r17
    8808:	28c00716 	blt	r5,r3,8828 <_malloc_r+0xcc>
    880c:	1800920e 	bge	r3,zero,8a58 <_malloc_r+0x2fc>
    8810:	84000317 	ldw	r16,12(r16)
    8814:	24008e26 	beq	r4,r16,8a50 <_malloc_r+0x2f4>
    8818:	80800117 	ldw	r2,4(r16)
    881c:	1184703a 	and	r2,r2,r6
    8820:	1447c83a 	sub	r3,r2,r17
    8824:	28fff90e 	bge	r5,r3,880c <__alt_data_end+0xfc00880c>
    8828:	3809883a 	mov	r4,r7
    882c:	01800074 	movhi	r6,1
    8830:	9c000417 	ldw	r16,16(r19)
    8834:	31963204 	addi	r6,r6,22728
    8838:	32000204 	addi	r8,r6,8
    883c:	82013426 	beq	r16,r8,8d10 <_malloc_r+0x5b4>
    8840:	80c00117 	ldw	r3,4(r16)
    8844:	00bfff04 	movi	r2,-4
    8848:	188e703a 	and	r7,r3,r2
    884c:	3c45c83a 	sub	r2,r7,r17
    8850:	00c003c4 	movi	r3,15
    8854:	18811f16 	blt	r3,r2,8cd4 <_malloc_r+0x578>
    8858:	32000515 	stw	r8,20(r6)
    885c:	32000415 	stw	r8,16(r6)
    8860:	10007f0e 	bge	r2,zero,8a60 <_malloc_r+0x304>
    8864:	00807fc4 	movi	r2,511
    8868:	11c0fd36 	bltu	r2,r7,8c60 <_malloc_r+0x504>
    886c:	3806d0fa 	srli	r3,r7,3
    8870:	01c00044 	movi	r7,1
    8874:	30800117 	ldw	r2,4(r6)
    8878:	19400044 	addi	r5,r3,1
    887c:	294b883a 	add	r5,r5,r5
    8880:	1807d0ba 	srai	r3,r3,2
    8884:	294b883a 	add	r5,r5,r5
    8888:	294b883a 	add	r5,r5,r5
    888c:	298b883a 	add	r5,r5,r6
    8890:	38c6983a 	sll	r3,r7,r3
    8894:	29c00017 	ldw	r7,0(r5)
    8898:	2a7ffe04 	addi	r9,r5,-8
    889c:	1886b03a 	or	r3,r3,r2
    88a0:	82400315 	stw	r9,12(r16)
    88a4:	81c00215 	stw	r7,8(r16)
    88a8:	30c00115 	stw	r3,4(r6)
    88ac:	2c000015 	stw	r16,0(r5)
    88b0:	3c000315 	stw	r16,12(r7)
    88b4:	2005d0ba 	srai	r2,r4,2
    88b8:	01400044 	movi	r5,1
    88bc:	288a983a 	sll	r5,r5,r2
    88c0:	19406f36 	bltu	r3,r5,8a80 <_malloc_r+0x324>
    88c4:	28c4703a 	and	r2,r5,r3
    88c8:	10000a1e 	bne	r2,zero,88f4 <_malloc_r+0x198>
    88cc:	00bfff04 	movi	r2,-4
    88d0:	294b883a 	add	r5,r5,r5
    88d4:	2088703a 	and	r4,r4,r2
    88d8:	28c4703a 	and	r2,r5,r3
    88dc:	21000104 	addi	r4,r4,4
    88e0:	1000041e 	bne	r2,zero,88f4 <_malloc_r+0x198>
    88e4:	294b883a 	add	r5,r5,r5
    88e8:	28c4703a 	and	r2,r5,r3
    88ec:	21000104 	addi	r4,r4,4
    88f0:	103ffc26 	beq	r2,zero,88e4 <__alt_data_end+0xfc0088e4>
    88f4:	02bfff04 	movi	r10,-4
    88f8:	024003c4 	movi	r9,15
    88fc:	21800044 	addi	r6,r4,1
    8900:	318d883a 	add	r6,r6,r6
    8904:	318d883a 	add	r6,r6,r6
    8908:	318d883a 	add	r6,r6,r6
    890c:	998d883a 	add	r6,r19,r6
    8910:	333ffe04 	addi	r12,r6,-8
    8914:	2017883a 	mov	r11,r4
    8918:	31800104 	addi	r6,r6,4
    891c:	34000017 	ldw	r16,0(r6)
    8920:	31fffd04 	addi	r7,r6,-12
    8924:	81c0041e 	bne	r16,r7,8938 <_malloc_r+0x1dc>
    8928:	0000fb06 	br	8d18 <_malloc_r+0x5bc>
    892c:	1801030e 	bge	r3,zero,8d3c <_malloc_r+0x5e0>
    8930:	84000317 	ldw	r16,12(r16)
    8934:	81c0f826 	beq	r16,r7,8d18 <_malloc_r+0x5bc>
    8938:	80800117 	ldw	r2,4(r16)
    893c:	1284703a 	and	r2,r2,r10
    8940:	1447c83a 	sub	r3,r2,r17
    8944:	48fff90e 	bge	r9,r3,892c <__alt_data_end+0xfc00892c>
    8948:	80800317 	ldw	r2,12(r16)
    894c:	81000217 	ldw	r4,8(r16)
    8950:	89400054 	ori	r5,r17,1
    8954:	81400115 	stw	r5,4(r16)
    8958:	20800315 	stw	r2,12(r4)
    895c:	11000215 	stw	r4,8(r2)
    8960:	8463883a 	add	r17,r16,r17
    8964:	9c400515 	stw	r17,20(r19)
    8968:	9c400415 	stw	r17,16(r19)
    896c:	18800054 	ori	r2,r3,1
    8970:	88800115 	stw	r2,4(r17)
    8974:	8a000315 	stw	r8,12(r17)
    8978:	8a000215 	stw	r8,8(r17)
    897c:	88e3883a 	add	r17,r17,r3
    8980:	88c00015 	stw	r3,0(r17)
    8984:	9009883a 	mov	r4,r18
    8988:	00108e40 	call	108e4 <__malloc_unlock>
    898c:	80800204 	addi	r2,r16,8
    8990:	00001b06 	br	8a00 <_malloc_r+0x2a4>
    8994:	04400404 	movi	r17,16
    8998:	89402536 	bltu	r17,r5,8a30 <_malloc_r+0x2d4>
    899c:	00108c00 	call	108c0 <__malloc_lock>
    89a0:	00800184 	movi	r2,6
    89a4:	01000084 	movi	r4,2
    89a8:	04c00074 	movhi	r19,1
    89ac:	1085883a 	add	r2,r2,r2
    89b0:	9cd63204 	addi	r19,r19,22728
    89b4:	1085883a 	add	r2,r2,r2
    89b8:	9885883a 	add	r2,r19,r2
    89bc:	14000117 	ldw	r16,4(r2)
    89c0:	10fffe04 	addi	r3,r2,-8
    89c4:	80c0d926 	beq	r16,r3,8d2c <_malloc_r+0x5d0>
    89c8:	80c00117 	ldw	r3,4(r16)
    89cc:	81000317 	ldw	r4,12(r16)
    89d0:	00bfff04 	movi	r2,-4
    89d4:	1884703a 	and	r2,r3,r2
    89d8:	81400217 	ldw	r5,8(r16)
    89dc:	8085883a 	add	r2,r16,r2
    89e0:	10c00117 	ldw	r3,4(r2)
    89e4:	29000315 	stw	r4,12(r5)
    89e8:	21400215 	stw	r5,8(r4)
    89ec:	18c00054 	ori	r3,r3,1
    89f0:	10c00115 	stw	r3,4(r2)
    89f4:	9009883a 	mov	r4,r18
    89f8:	00108e40 	call	108e4 <__malloc_unlock>
    89fc:	80800204 	addi	r2,r16,8
    8a00:	dfc00a17 	ldw	ra,40(sp)
    8a04:	df000917 	ldw	fp,36(sp)
    8a08:	ddc00817 	ldw	r23,32(sp)
    8a0c:	dd800717 	ldw	r22,28(sp)
    8a10:	dd400617 	ldw	r21,24(sp)
    8a14:	dd000517 	ldw	r20,20(sp)
    8a18:	dcc00417 	ldw	r19,16(sp)
    8a1c:	dc800317 	ldw	r18,12(sp)
    8a20:	dc400217 	ldw	r17,8(sp)
    8a24:	dc000117 	ldw	r16,4(sp)
    8a28:	dec00b04 	addi	sp,sp,44
    8a2c:	f800283a 	ret
    8a30:	00800304 	movi	r2,12
    8a34:	90800015 	stw	r2,0(r18)
    8a38:	0005883a 	mov	r2,zero
    8a3c:	003ff006 	br	8a00 <__alt_data_end+0xfc008a00>
    8a40:	01002004 	movi	r4,128
    8a44:	02001004 	movi	r8,64
    8a48:	01c00fc4 	movi	r7,63
    8a4c:	003f6106 	br	87d4 <__alt_data_end+0xfc0087d4>
    8a50:	4009883a 	mov	r4,r8
    8a54:	003f7506 	br	882c <__alt_data_end+0xfc00882c>
    8a58:	81000317 	ldw	r4,12(r16)
    8a5c:	003fde06 	br	89d8 <__alt_data_end+0xfc0089d8>
    8a60:	81c5883a 	add	r2,r16,r7
    8a64:	11400117 	ldw	r5,4(r2)
    8a68:	9009883a 	mov	r4,r18
    8a6c:	29400054 	ori	r5,r5,1
    8a70:	11400115 	stw	r5,4(r2)
    8a74:	00108e40 	call	108e4 <__malloc_unlock>
    8a78:	80800204 	addi	r2,r16,8
    8a7c:	003fe006 	br	8a00 <__alt_data_end+0xfc008a00>
    8a80:	9c000217 	ldw	r16,8(r19)
    8a84:	00bfff04 	movi	r2,-4
    8a88:	85800117 	ldw	r22,4(r16)
    8a8c:	b0ac703a 	and	r22,r22,r2
    8a90:	b4400336 	bltu	r22,r17,8aa0 <_malloc_r+0x344>
    8a94:	b445c83a 	sub	r2,r22,r17
    8a98:	00c003c4 	movi	r3,15
    8a9c:	18805d16 	blt	r3,r2,8c14 <_malloc_r+0x4b8>
    8aa0:	05c00074 	movhi	r23,1
    8aa4:	008000b4 	movhi	r2,2
    8aa8:	10a2c004 	addi	r2,r2,-29952
    8aac:	bddbcb04 	addi	r23,r23,28460
    8ab0:	15400017 	ldw	r21,0(r2)
    8ab4:	b8c00017 	ldw	r3,0(r23)
    8ab8:	00bfffc4 	movi	r2,-1
    8abc:	858d883a 	add	r6,r16,r22
    8ac0:	8d6b883a 	add	r21,r17,r21
    8ac4:	1880ea26 	beq	r3,r2,8e70 <_malloc_r+0x714>
    8ac8:	ad4403c4 	addi	r21,r21,4111
    8acc:	00bc0004 	movi	r2,-4096
    8ad0:	a8aa703a 	and	r21,r21,r2
    8ad4:	a80b883a 	mov	r5,r21
    8ad8:	9009883a 	mov	r4,r18
    8adc:	d9800015 	stw	r6,0(sp)
    8ae0:	000ac100 	call	ac10 <_sbrk_r>
    8ae4:	1029883a 	mov	r20,r2
    8ae8:	00bfffc4 	movi	r2,-1
    8aec:	d9800017 	ldw	r6,0(sp)
    8af0:	a080e826 	beq	r20,r2,8e94 <_malloc_r+0x738>
    8af4:	a180a636 	bltu	r20,r6,8d90 <_malloc_r+0x634>
    8af8:	070000b4 	movhi	fp,2
    8afc:	e722d304 	addi	fp,fp,-29876
    8b00:	e0800017 	ldw	r2,0(fp)
    8b04:	a887883a 	add	r3,r21,r2
    8b08:	e0c00015 	stw	r3,0(fp)
    8b0c:	3500e626 	beq	r6,r20,8ea8 <_malloc_r+0x74c>
    8b10:	b9000017 	ldw	r4,0(r23)
    8b14:	00bfffc4 	movi	r2,-1
    8b18:	2080ee26 	beq	r4,r2,8ed4 <_malloc_r+0x778>
    8b1c:	a185c83a 	sub	r2,r20,r6
    8b20:	10c5883a 	add	r2,r2,r3
    8b24:	e0800015 	stw	r2,0(fp)
    8b28:	a0c001cc 	andi	r3,r20,7
    8b2c:	1800bc26 	beq	r3,zero,8e20 <_malloc_r+0x6c4>
    8b30:	a0e9c83a 	sub	r20,r20,r3
    8b34:	00840204 	movi	r2,4104
    8b38:	a5000204 	addi	r20,r20,8
    8b3c:	10c7c83a 	sub	r3,r2,r3
    8b40:	a545883a 	add	r2,r20,r21
    8b44:	1083ffcc 	andi	r2,r2,4095
    8b48:	18abc83a 	sub	r21,r3,r2
    8b4c:	a80b883a 	mov	r5,r21
    8b50:	9009883a 	mov	r4,r18
    8b54:	000ac100 	call	ac10 <_sbrk_r>
    8b58:	00ffffc4 	movi	r3,-1
    8b5c:	10c0e126 	beq	r2,r3,8ee4 <_malloc_r+0x788>
    8b60:	1505c83a 	sub	r2,r2,r20
    8b64:	1545883a 	add	r2,r2,r21
    8b68:	10800054 	ori	r2,r2,1
    8b6c:	e0c00017 	ldw	r3,0(fp)
    8b70:	9d000215 	stw	r20,8(r19)
    8b74:	a0800115 	stw	r2,4(r20)
    8b78:	a8c7883a 	add	r3,r21,r3
    8b7c:	e0c00015 	stw	r3,0(fp)
    8b80:	84c00e26 	beq	r16,r19,8bbc <_malloc_r+0x460>
    8b84:	018003c4 	movi	r6,15
    8b88:	3580a72e 	bgeu	r6,r22,8e28 <_malloc_r+0x6cc>
    8b8c:	81400117 	ldw	r5,4(r16)
    8b90:	013ffe04 	movi	r4,-8
    8b94:	b0bffd04 	addi	r2,r22,-12
    8b98:	1104703a 	and	r2,r2,r4
    8b9c:	2900004c 	andi	r4,r5,1
    8ba0:	2088b03a 	or	r4,r4,r2
    8ba4:	81000115 	stw	r4,4(r16)
    8ba8:	01400144 	movi	r5,5
    8bac:	8089883a 	add	r4,r16,r2
    8bb0:	21400115 	stw	r5,4(r4)
    8bb4:	21400215 	stw	r5,8(r4)
    8bb8:	3080cd36 	bltu	r6,r2,8ef0 <_malloc_r+0x794>
    8bbc:	008000b4 	movhi	r2,2
    8bc0:	10a2bf04 	addi	r2,r2,-29956
    8bc4:	11000017 	ldw	r4,0(r2)
    8bc8:	20c0012e 	bgeu	r4,r3,8bd0 <_malloc_r+0x474>
    8bcc:	10c00015 	stw	r3,0(r2)
    8bd0:	008000b4 	movhi	r2,2
    8bd4:	10a2be04 	addi	r2,r2,-29960
    8bd8:	11000017 	ldw	r4,0(r2)
    8bdc:	9c000217 	ldw	r16,8(r19)
    8be0:	20c0012e 	bgeu	r4,r3,8be8 <_malloc_r+0x48c>
    8be4:	10c00015 	stw	r3,0(r2)
    8be8:	80c00117 	ldw	r3,4(r16)
    8bec:	00bfff04 	movi	r2,-4
    8bf0:	1886703a 	and	r3,r3,r2
    8bf4:	1c45c83a 	sub	r2,r3,r17
    8bf8:	1c400236 	bltu	r3,r17,8c04 <_malloc_r+0x4a8>
    8bfc:	00c003c4 	movi	r3,15
    8c00:	18800416 	blt	r3,r2,8c14 <_malloc_r+0x4b8>
    8c04:	9009883a 	mov	r4,r18
    8c08:	00108e40 	call	108e4 <__malloc_unlock>
    8c0c:	0005883a 	mov	r2,zero
    8c10:	003f7b06 	br	8a00 <__alt_data_end+0xfc008a00>
    8c14:	88c00054 	ori	r3,r17,1
    8c18:	80c00115 	stw	r3,4(r16)
    8c1c:	8463883a 	add	r17,r16,r17
    8c20:	10800054 	ori	r2,r2,1
    8c24:	9c400215 	stw	r17,8(r19)
    8c28:	88800115 	stw	r2,4(r17)
    8c2c:	9009883a 	mov	r4,r18
    8c30:	00108e40 	call	108e4 <__malloc_unlock>
    8c34:	80800204 	addi	r2,r16,8
    8c38:	003f7106 	br	8a00 <__alt_data_end+0xfc008a00>
    8c3c:	00c00504 	movi	r3,20
    8c40:	18804a2e 	bgeu	r3,r2,8d6c <_malloc_r+0x610>
    8c44:	00c01504 	movi	r3,84
    8c48:	18806e36 	bltu	r3,r2,8e04 <_malloc_r+0x6a8>
    8c4c:	8804d33a 	srli	r2,r17,12
    8c50:	12001bc4 	addi	r8,r2,111
    8c54:	11c01b84 	addi	r7,r2,110
    8c58:	4209883a 	add	r4,r8,r8
    8c5c:	003edd06 	br	87d4 <__alt_data_end+0xfc0087d4>
    8c60:	3804d27a 	srli	r2,r7,9
    8c64:	00c00104 	movi	r3,4
    8c68:	1880442e 	bgeu	r3,r2,8d7c <_malloc_r+0x620>
    8c6c:	00c00504 	movi	r3,20
    8c70:	18808136 	bltu	r3,r2,8e78 <_malloc_r+0x71c>
    8c74:	11401704 	addi	r5,r2,92
    8c78:	10c016c4 	addi	r3,r2,91
    8c7c:	294b883a 	add	r5,r5,r5
    8c80:	294b883a 	add	r5,r5,r5
    8c84:	294b883a 	add	r5,r5,r5
    8c88:	994b883a 	add	r5,r19,r5
    8c8c:	28800017 	ldw	r2,0(r5)
    8c90:	01800074 	movhi	r6,1
    8c94:	297ffe04 	addi	r5,r5,-8
    8c98:	31963204 	addi	r6,r6,22728
    8c9c:	28806526 	beq	r5,r2,8e34 <_malloc_r+0x6d8>
    8ca0:	01bfff04 	movi	r6,-4
    8ca4:	10c00117 	ldw	r3,4(r2)
    8ca8:	1986703a 	and	r3,r3,r6
    8cac:	38c0022e 	bgeu	r7,r3,8cb8 <_malloc_r+0x55c>
    8cb0:	10800217 	ldw	r2,8(r2)
    8cb4:	28bffb1e 	bne	r5,r2,8ca4 <__alt_data_end+0xfc008ca4>
    8cb8:	11400317 	ldw	r5,12(r2)
    8cbc:	98c00117 	ldw	r3,4(r19)
    8cc0:	81400315 	stw	r5,12(r16)
    8cc4:	80800215 	stw	r2,8(r16)
    8cc8:	2c000215 	stw	r16,8(r5)
    8ccc:	14000315 	stw	r16,12(r2)
    8cd0:	003ef806 	br	88b4 <__alt_data_end+0xfc0088b4>
    8cd4:	88c00054 	ori	r3,r17,1
    8cd8:	80c00115 	stw	r3,4(r16)
    8cdc:	8463883a 	add	r17,r16,r17
    8ce0:	34400515 	stw	r17,20(r6)
    8ce4:	34400415 	stw	r17,16(r6)
    8ce8:	10c00054 	ori	r3,r2,1
    8cec:	8a000315 	stw	r8,12(r17)
    8cf0:	8a000215 	stw	r8,8(r17)
    8cf4:	88c00115 	stw	r3,4(r17)
    8cf8:	88a3883a 	add	r17,r17,r2
    8cfc:	88800015 	stw	r2,0(r17)
    8d00:	9009883a 	mov	r4,r18
    8d04:	00108e40 	call	108e4 <__malloc_unlock>
    8d08:	80800204 	addi	r2,r16,8
    8d0c:	003f3c06 	br	8a00 <__alt_data_end+0xfc008a00>
    8d10:	30c00117 	ldw	r3,4(r6)
    8d14:	003ee706 	br	88b4 <__alt_data_end+0xfc0088b4>
    8d18:	5ac00044 	addi	r11,r11,1
    8d1c:	588000cc 	andi	r2,r11,3
    8d20:	31800204 	addi	r6,r6,8
    8d24:	103efd1e 	bne	r2,zero,891c <__alt_data_end+0xfc00891c>
    8d28:	00002406 	br	8dbc <_malloc_r+0x660>
    8d2c:	14000317 	ldw	r16,12(r2)
    8d30:	143f251e 	bne	r2,r16,89c8 <__alt_data_end+0xfc0089c8>
    8d34:	21000084 	addi	r4,r4,2
    8d38:	003ebc06 	br	882c <__alt_data_end+0xfc00882c>
    8d3c:	8085883a 	add	r2,r16,r2
    8d40:	10c00117 	ldw	r3,4(r2)
    8d44:	81000317 	ldw	r4,12(r16)
    8d48:	81400217 	ldw	r5,8(r16)
    8d4c:	18c00054 	ori	r3,r3,1
    8d50:	10c00115 	stw	r3,4(r2)
    8d54:	29000315 	stw	r4,12(r5)
    8d58:	21400215 	stw	r5,8(r4)
    8d5c:	9009883a 	mov	r4,r18
    8d60:	00108e40 	call	108e4 <__malloc_unlock>
    8d64:	80800204 	addi	r2,r16,8
    8d68:	003f2506 	br	8a00 <__alt_data_end+0xfc008a00>
    8d6c:	12001704 	addi	r8,r2,92
    8d70:	11c016c4 	addi	r7,r2,91
    8d74:	4209883a 	add	r4,r8,r8
    8d78:	003e9606 	br	87d4 <__alt_data_end+0xfc0087d4>
    8d7c:	3804d1ba 	srli	r2,r7,6
    8d80:	11400e44 	addi	r5,r2,57
    8d84:	10c00e04 	addi	r3,r2,56
    8d88:	294b883a 	add	r5,r5,r5
    8d8c:	003fbc06 	br	8c80 <__alt_data_end+0xfc008c80>
    8d90:	84ff5926 	beq	r16,r19,8af8 <__alt_data_end+0xfc008af8>
    8d94:	00800074 	movhi	r2,1
    8d98:	10963204 	addi	r2,r2,22728
    8d9c:	14000217 	ldw	r16,8(r2)
    8da0:	00bfff04 	movi	r2,-4
    8da4:	80c00117 	ldw	r3,4(r16)
    8da8:	1886703a 	and	r3,r3,r2
    8dac:	003f9106 	br	8bf4 <__alt_data_end+0xfc008bf4>
    8db0:	60800217 	ldw	r2,8(r12)
    8db4:	213fffc4 	addi	r4,r4,-1
    8db8:	1300651e 	bne	r2,r12,8f50 <_malloc_r+0x7f4>
    8dbc:	208000cc 	andi	r2,r4,3
    8dc0:	633ffe04 	addi	r12,r12,-8
    8dc4:	103ffa1e 	bne	r2,zero,8db0 <__alt_data_end+0xfc008db0>
    8dc8:	98800117 	ldw	r2,4(r19)
    8dcc:	0146303a 	nor	r3,zero,r5
    8dd0:	1884703a 	and	r2,r3,r2
    8dd4:	98800115 	stw	r2,4(r19)
    8dd8:	294b883a 	add	r5,r5,r5
    8ddc:	117f2836 	bltu	r2,r5,8a80 <__alt_data_end+0xfc008a80>
    8de0:	283f2726 	beq	r5,zero,8a80 <__alt_data_end+0xfc008a80>
    8de4:	2886703a 	and	r3,r5,r2
    8de8:	5809883a 	mov	r4,r11
    8dec:	183ec31e 	bne	r3,zero,88fc <__alt_data_end+0xfc0088fc>
    8df0:	294b883a 	add	r5,r5,r5
    8df4:	2886703a 	and	r3,r5,r2
    8df8:	21000104 	addi	r4,r4,4
    8dfc:	183ffc26 	beq	r3,zero,8df0 <__alt_data_end+0xfc008df0>
    8e00:	003ebe06 	br	88fc <__alt_data_end+0xfc0088fc>
    8e04:	00c05504 	movi	r3,340
    8e08:	18801236 	bltu	r3,r2,8e54 <_malloc_r+0x6f8>
    8e0c:	8804d3fa 	srli	r2,r17,15
    8e10:	12001e04 	addi	r8,r2,120
    8e14:	11c01dc4 	addi	r7,r2,119
    8e18:	4209883a 	add	r4,r8,r8
    8e1c:	003e6d06 	br	87d4 <__alt_data_end+0xfc0087d4>
    8e20:	00c40004 	movi	r3,4096
    8e24:	003f4606 	br	8b40 <__alt_data_end+0xfc008b40>
    8e28:	00800044 	movi	r2,1
    8e2c:	a0800115 	stw	r2,4(r20)
    8e30:	003f7406 	br	8c04 <__alt_data_end+0xfc008c04>
    8e34:	1805d0ba 	srai	r2,r3,2
    8e38:	01c00044 	movi	r7,1
    8e3c:	30c00117 	ldw	r3,4(r6)
    8e40:	388e983a 	sll	r7,r7,r2
    8e44:	2805883a 	mov	r2,r5
    8e48:	38c6b03a 	or	r3,r7,r3
    8e4c:	30c00115 	stw	r3,4(r6)
    8e50:	003f9b06 	br	8cc0 <__alt_data_end+0xfc008cc0>
    8e54:	00c15504 	movi	r3,1364
    8e58:	18801a36 	bltu	r3,r2,8ec4 <_malloc_r+0x768>
    8e5c:	8804d4ba 	srli	r2,r17,18
    8e60:	12001f44 	addi	r8,r2,125
    8e64:	11c01f04 	addi	r7,r2,124
    8e68:	4209883a 	add	r4,r8,r8
    8e6c:	003e5906 	br	87d4 <__alt_data_end+0xfc0087d4>
    8e70:	ad400404 	addi	r21,r21,16
    8e74:	003f1706 	br	8ad4 <__alt_data_end+0xfc008ad4>
    8e78:	00c01504 	movi	r3,84
    8e7c:	18802336 	bltu	r3,r2,8f0c <_malloc_r+0x7b0>
    8e80:	3804d33a 	srli	r2,r7,12
    8e84:	11401bc4 	addi	r5,r2,111
    8e88:	10c01b84 	addi	r3,r2,110
    8e8c:	294b883a 	add	r5,r5,r5
    8e90:	003f7b06 	br	8c80 <__alt_data_end+0xfc008c80>
    8e94:	9c000217 	ldw	r16,8(r19)
    8e98:	00bfff04 	movi	r2,-4
    8e9c:	80c00117 	ldw	r3,4(r16)
    8ea0:	1886703a 	and	r3,r3,r2
    8ea4:	003f5306 	br	8bf4 <__alt_data_end+0xfc008bf4>
    8ea8:	3083ffcc 	andi	r2,r6,4095
    8eac:	103f181e 	bne	r2,zero,8b10 <__alt_data_end+0xfc008b10>
    8eb0:	99000217 	ldw	r4,8(r19)
    8eb4:	b545883a 	add	r2,r22,r21
    8eb8:	10800054 	ori	r2,r2,1
    8ebc:	20800115 	stw	r2,4(r4)
    8ec0:	003f3e06 	br	8bbc <__alt_data_end+0xfc008bbc>
    8ec4:	01003f84 	movi	r4,254
    8ec8:	02001fc4 	movi	r8,127
    8ecc:	01c01f84 	movi	r7,126
    8ed0:	003e4006 	br	87d4 <__alt_data_end+0xfc0087d4>
    8ed4:	00800074 	movhi	r2,1
    8ed8:	109bcb04 	addi	r2,r2,28460
    8edc:	15000015 	stw	r20,0(r2)
    8ee0:	003f1106 	br	8b28 <__alt_data_end+0xfc008b28>
    8ee4:	00800044 	movi	r2,1
    8ee8:	002b883a 	mov	r21,zero
    8eec:	003f1f06 	br	8b6c <__alt_data_end+0xfc008b6c>
    8ef0:	81400204 	addi	r5,r16,8
    8ef4:	9009883a 	mov	r4,r18
    8ef8:	0007b640 	call	7b64 <_free_r>
    8efc:	008000b4 	movhi	r2,2
    8f00:	10a2d304 	addi	r2,r2,-29876
    8f04:	10c00017 	ldw	r3,0(r2)
    8f08:	003f2c06 	br	8bbc <__alt_data_end+0xfc008bbc>
    8f0c:	00c05504 	movi	r3,340
    8f10:	18800536 	bltu	r3,r2,8f28 <_malloc_r+0x7cc>
    8f14:	3804d3fa 	srli	r2,r7,15
    8f18:	11401e04 	addi	r5,r2,120
    8f1c:	10c01dc4 	addi	r3,r2,119
    8f20:	294b883a 	add	r5,r5,r5
    8f24:	003f5606 	br	8c80 <__alt_data_end+0xfc008c80>
    8f28:	00c15504 	movi	r3,1364
    8f2c:	18800536 	bltu	r3,r2,8f44 <_malloc_r+0x7e8>
    8f30:	3804d4ba 	srli	r2,r7,18
    8f34:	11401f44 	addi	r5,r2,125
    8f38:	10c01f04 	addi	r3,r2,124
    8f3c:	294b883a 	add	r5,r5,r5
    8f40:	003f4f06 	br	8c80 <__alt_data_end+0xfc008c80>
    8f44:	01403f84 	movi	r5,254
    8f48:	00c01f84 	movi	r3,126
    8f4c:	003f4c06 	br	8c80 <__alt_data_end+0xfc008c80>
    8f50:	98800117 	ldw	r2,4(r19)
    8f54:	003fa006 	br	8dd8 <__alt_data_end+0xfc008dd8>
    8f58:	8808d0fa 	srli	r4,r17,3
    8f5c:	20800044 	addi	r2,r4,1
    8f60:	1085883a 	add	r2,r2,r2
    8f64:	003e9006 	br	89a8 <__alt_data_end+0xfc0089a8>

00008f68 <memchr>:
    8f68:	208000cc 	andi	r2,r4,3
    8f6c:	280f883a 	mov	r7,r5
    8f70:	10003426 	beq	r2,zero,9044 <memchr+0xdc>
    8f74:	30bfffc4 	addi	r2,r6,-1
    8f78:	30001a26 	beq	r6,zero,8fe4 <memchr+0x7c>
    8f7c:	20c00003 	ldbu	r3,0(r4)
    8f80:	29803fcc 	andi	r6,r5,255
    8f84:	30c0051e 	bne	r6,r3,8f9c <memchr+0x34>
    8f88:	00001806 	br	8fec <memchr+0x84>
    8f8c:	10001526 	beq	r2,zero,8fe4 <memchr+0x7c>
    8f90:	20c00003 	ldbu	r3,0(r4)
    8f94:	10bfffc4 	addi	r2,r2,-1
    8f98:	30c01426 	beq	r6,r3,8fec <memchr+0x84>
    8f9c:	21000044 	addi	r4,r4,1
    8fa0:	20c000cc 	andi	r3,r4,3
    8fa4:	183ff91e 	bne	r3,zero,8f8c <__alt_data_end+0xfc008f8c>
    8fa8:	020000c4 	movi	r8,3
    8fac:	40801136 	bltu	r8,r2,8ff4 <memchr+0x8c>
    8fb0:	10000c26 	beq	r2,zero,8fe4 <memchr+0x7c>
    8fb4:	20c00003 	ldbu	r3,0(r4)
    8fb8:	29403fcc 	andi	r5,r5,255
    8fbc:	28c00b26 	beq	r5,r3,8fec <memchr+0x84>
    8fc0:	20c00044 	addi	r3,r4,1
    8fc4:	39803fcc 	andi	r6,r7,255
    8fc8:	2089883a 	add	r4,r4,r2
    8fcc:	00000306 	br	8fdc <memchr+0x74>
    8fd0:	18c00044 	addi	r3,r3,1
    8fd4:	197fffc3 	ldbu	r5,-1(r3)
    8fd8:	31400526 	beq	r6,r5,8ff0 <memchr+0x88>
    8fdc:	1805883a 	mov	r2,r3
    8fe0:	20fffb1e 	bne	r4,r3,8fd0 <__alt_data_end+0xfc008fd0>
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	f800283a 	ret
    8fec:	2005883a 	mov	r2,r4
    8ff0:	f800283a 	ret
    8ff4:	28c03fcc 	andi	r3,r5,255
    8ff8:	1812923a 	slli	r9,r3,8
    8ffc:	02ffbff4 	movhi	r11,65279
    9000:	02a02074 	movhi	r10,32897
    9004:	48d2b03a 	or	r9,r9,r3
    9008:	4806943a 	slli	r3,r9,16
    900c:	5affbfc4 	addi	r11,r11,-257
    9010:	52a02004 	addi	r10,r10,-32640
    9014:	48d2b03a 	or	r9,r9,r3
    9018:	20c00017 	ldw	r3,0(r4)
    901c:	48c6f03a 	xor	r3,r9,r3
    9020:	1acd883a 	add	r6,r3,r11
    9024:	00c6303a 	nor	r3,zero,r3
    9028:	30c6703a 	and	r3,r6,r3
    902c:	1a86703a 	and	r3,r3,r10
    9030:	183fe01e 	bne	r3,zero,8fb4 <__alt_data_end+0xfc008fb4>
    9034:	10bfff04 	addi	r2,r2,-4
    9038:	21000104 	addi	r4,r4,4
    903c:	40bff636 	bltu	r8,r2,9018 <__alt_data_end+0xfc009018>
    9040:	003fdb06 	br	8fb0 <__alt_data_end+0xfc008fb0>
    9044:	3005883a 	mov	r2,r6
    9048:	003fd706 	br	8fa8 <__alt_data_end+0xfc008fa8>

0000904c <memcpy>:
    904c:	defffd04 	addi	sp,sp,-12
    9050:	dfc00215 	stw	ra,8(sp)
    9054:	dc400115 	stw	r17,4(sp)
    9058:	dc000015 	stw	r16,0(sp)
    905c:	00c003c4 	movi	r3,15
    9060:	2005883a 	mov	r2,r4
    9064:	1980452e 	bgeu	r3,r6,917c <memcpy+0x130>
    9068:	2906b03a 	or	r3,r5,r4
    906c:	18c000cc 	andi	r3,r3,3
    9070:	1800441e 	bne	r3,zero,9184 <memcpy+0x138>
    9074:	347ffc04 	addi	r17,r6,-16
    9078:	8822d13a 	srli	r17,r17,4
    907c:	28c00104 	addi	r3,r5,4
    9080:	23400104 	addi	r13,r4,4
    9084:	8820913a 	slli	r16,r17,4
    9088:	2b000204 	addi	r12,r5,8
    908c:	22c00204 	addi	r11,r4,8
    9090:	84000504 	addi	r16,r16,20
    9094:	2a800304 	addi	r10,r5,12
    9098:	22400304 	addi	r9,r4,12
    909c:	2c21883a 	add	r16,r5,r16
    90a0:	2811883a 	mov	r8,r5
    90a4:	200f883a 	mov	r7,r4
    90a8:	41000017 	ldw	r4,0(r8)
    90ac:	1fc00017 	ldw	ra,0(r3)
    90b0:	63c00017 	ldw	r15,0(r12)
    90b4:	39000015 	stw	r4,0(r7)
    90b8:	53800017 	ldw	r14,0(r10)
    90bc:	6fc00015 	stw	ra,0(r13)
    90c0:	5bc00015 	stw	r15,0(r11)
    90c4:	4b800015 	stw	r14,0(r9)
    90c8:	18c00404 	addi	r3,r3,16
    90cc:	39c00404 	addi	r7,r7,16
    90d0:	42000404 	addi	r8,r8,16
    90d4:	6b400404 	addi	r13,r13,16
    90d8:	63000404 	addi	r12,r12,16
    90dc:	5ac00404 	addi	r11,r11,16
    90e0:	52800404 	addi	r10,r10,16
    90e4:	4a400404 	addi	r9,r9,16
    90e8:	1c3fef1e 	bne	r3,r16,90a8 <__alt_data_end+0xfc0090a8>
    90ec:	89c00044 	addi	r7,r17,1
    90f0:	380e913a 	slli	r7,r7,4
    90f4:	310003cc 	andi	r4,r6,15
    90f8:	02c000c4 	movi	r11,3
    90fc:	11c7883a 	add	r3,r2,r7
    9100:	29cb883a 	add	r5,r5,r7
    9104:	5900212e 	bgeu	r11,r4,918c <memcpy+0x140>
    9108:	1813883a 	mov	r9,r3
    910c:	2811883a 	mov	r8,r5
    9110:	200f883a 	mov	r7,r4
    9114:	42800017 	ldw	r10,0(r8)
    9118:	4a400104 	addi	r9,r9,4
    911c:	39ffff04 	addi	r7,r7,-4
    9120:	4abfff15 	stw	r10,-4(r9)
    9124:	42000104 	addi	r8,r8,4
    9128:	59fffa36 	bltu	r11,r7,9114 <__alt_data_end+0xfc009114>
    912c:	213fff04 	addi	r4,r4,-4
    9130:	2008d0ba 	srli	r4,r4,2
    9134:	318000cc 	andi	r6,r6,3
    9138:	21000044 	addi	r4,r4,1
    913c:	2109883a 	add	r4,r4,r4
    9140:	2109883a 	add	r4,r4,r4
    9144:	1907883a 	add	r3,r3,r4
    9148:	290b883a 	add	r5,r5,r4
    914c:	30000626 	beq	r6,zero,9168 <memcpy+0x11c>
    9150:	198d883a 	add	r6,r3,r6
    9154:	29c00003 	ldbu	r7,0(r5)
    9158:	18c00044 	addi	r3,r3,1
    915c:	29400044 	addi	r5,r5,1
    9160:	19ffffc5 	stb	r7,-1(r3)
    9164:	19bffb1e 	bne	r3,r6,9154 <__alt_data_end+0xfc009154>
    9168:	dfc00217 	ldw	ra,8(sp)
    916c:	dc400117 	ldw	r17,4(sp)
    9170:	dc000017 	ldw	r16,0(sp)
    9174:	dec00304 	addi	sp,sp,12
    9178:	f800283a 	ret
    917c:	2007883a 	mov	r3,r4
    9180:	003ff206 	br	914c <__alt_data_end+0xfc00914c>
    9184:	2007883a 	mov	r3,r4
    9188:	003ff106 	br	9150 <__alt_data_end+0xfc009150>
    918c:	200d883a 	mov	r6,r4
    9190:	003fee06 	br	914c <__alt_data_end+0xfc00914c>

00009194 <memmove>:
    9194:	2005883a 	mov	r2,r4
    9198:	29000b2e 	bgeu	r5,r4,91c8 <memmove+0x34>
    919c:	298f883a 	add	r7,r5,r6
    91a0:	21c0092e 	bgeu	r4,r7,91c8 <memmove+0x34>
    91a4:	2187883a 	add	r3,r4,r6
    91a8:	198bc83a 	sub	r5,r3,r6
    91ac:	30004826 	beq	r6,zero,92d0 <memmove+0x13c>
    91b0:	39ffffc4 	addi	r7,r7,-1
    91b4:	39000003 	ldbu	r4,0(r7)
    91b8:	18ffffc4 	addi	r3,r3,-1
    91bc:	19000005 	stb	r4,0(r3)
    91c0:	28fffb1e 	bne	r5,r3,91b0 <__alt_data_end+0xfc0091b0>
    91c4:	f800283a 	ret
    91c8:	00c003c4 	movi	r3,15
    91cc:	1980412e 	bgeu	r3,r6,92d4 <memmove+0x140>
    91d0:	2886b03a 	or	r3,r5,r2
    91d4:	18c000cc 	andi	r3,r3,3
    91d8:	1800401e 	bne	r3,zero,92dc <memmove+0x148>
    91dc:	33fffc04 	addi	r15,r6,-16
    91e0:	781ed13a 	srli	r15,r15,4
    91e4:	28c00104 	addi	r3,r5,4
    91e8:	13400104 	addi	r13,r2,4
    91ec:	781c913a 	slli	r14,r15,4
    91f0:	2b000204 	addi	r12,r5,8
    91f4:	12c00204 	addi	r11,r2,8
    91f8:	73800504 	addi	r14,r14,20
    91fc:	2a800304 	addi	r10,r5,12
    9200:	12400304 	addi	r9,r2,12
    9204:	2b9d883a 	add	r14,r5,r14
    9208:	2811883a 	mov	r8,r5
    920c:	100f883a 	mov	r7,r2
    9210:	41000017 	ldw	r4,0(r8)
    9214:	39c00404 	addi	r7,r7,16
    9218:	18c00404 	addi	r3,r3,16
    921c:	393ffc15 	stw	r4,-16(r7)
    9220:	193ffc17 	ldw	r4,-16(r3)
    9224:	6b400404 	addi	r13,r13,16
    9228:	5ac00404 	addi	r11,r11,16
    922c:	693ffc15 	stw	r4,-16(r13)
    9230:	61000017 	ldw	r4,0(r12)
    9234:	4a400404 	addi	r9,r9,16
    9238:	42000404 	addi	r8,r8,16
    923c:	593ffc15 	stw	r4,-16(r11)
    9240:	51000017 	ldw	r4,0(r10)
    9244:	63000404 	addi	r12,r12,16
    9248:	52800404 	addi	r10,r10,16
    924c:	493ffc15 	stw	r4,-16(r9)
    9250:	1bbfef1e 	bne	r3,r14,9210 <__alt_data_end+0xfc009210>
    9254:	79000044 	addi	r4,r15,1
    9258:	2008913a 	slli	r4,r4,4
    925c:	328003cc 	andi	r10,r6,15
    9260:	02c000c4 	movi	r11,3
    9264:	1107883a 	add	r3,r2,r4
    9268:	290b883a 	add	r5,r5,r4
    926c:	5a801e2e 	bgeu	r11,r10,92e8 <memmove+0x154>
    9270:	1813883a 	mov	r9,r3
    9274:	2811883a 	mov	r8,r5
    9278:	500f883a 	mov	r7,r10
    927c:	41000017 	ldw	r4,0(r8)
    9280:	4a400104 	addi	r9,r9,4
    9284:	39ffff04 	addi	r7,r7,-4
    9288:	493fff15 	stw	r4,-4(r9)
    928c:	42000104 	addi	r8,r8,4
    9290:	59fffa36 	bltu	r11,r7,927c <__alt_data_end+0xfc00927c>
    9294:	513fff04 	addi	r4,r10,-4
    9298:	2008d0ba 	srli	r4,r4,2
    929c:	318000cc 	andi	r6,r6,3
    92a0:	21000044 	addi	r4,r4,1
    92a4:	2109883a 	add	r4,r4,r4
    92a8:	2109883a 	add	r4,r4,r4
    92ac:	1907883a 	add	r3,r3,r4
    92b0:	290b883a 	add	r5,r5,r4
    92b4:	30000b26 	beq	r6,zero,92e4 <memmove+0x150>
    92b8:	198d883a 	add	r6,r3,r6
    92bc:	29c00003 	ldbu	r7,0(r5)
    92c0:	18c00044 	addi	r3,r3,1
    92c4:	29400044 	addi	r5,r5,1
    92c8:	19ffffc5 	stb	r7,-1(r3)
    92cc:	19bffb1e 	bne	r3,r6,92bc <__alt_data_end+0xfc0092bc>
    92d0:	f800283a 	ret
    92d4:	1007883a 	mov	r3,r2
    92d8:	003ff606 	br	92b4 <__alt_data_end+0xfc0092b4>
    92dc:	1007883a 	mov	r3,r2
    92e0:	003ff506 	br	92b8 <__alt_data_end+0xfc0092b8>
    92e4:	f800283a 	ret
    92e8:	500d883a 	mov	r6,r10
    92ec:	003ff106 	br	92b4 <__alt_data_end+0xfc0092b4>

000092f0 <memset>:
    92f0:	20c000cc 	andi	r3,r4,3
    92f4:	2005883a 	mov	r2,r4
    92f8:	18004426 	beq	r3,zero,940c <memset+0x11c>
    92fc:	31ffffc4 	addi	r7,r6,-1
    9300:	30004026 	beq	r6,zero,9404 <memset+0x114>
    9304:	2813883a 	mov	r9,r5
    9308:	200d883a 	mov	r6,r4
    930c:	2007883a 	mov	r3,r4
    9310:	00000406 	br	9324 <memset+0x34>
    9314:	3a3fffc4 	addi	r8,r7,-1
    9318:	31800044 	addi	r6,r6,1
    931c:	38003926 	beq	r7,zero,9404 <memset+0x114>
    9320:	400f883a 	mov	r7,r8
    9324:	18c00044 	addi	r3,r3,1
    9328:	32400005 	stb	r9,0(r6)
    932c:	1a0000cc 	andi	r8,r3,3
    9330:	403ff81e 	bne	r8,zero,9314 <__alt_data_end+0xfc009314>
    9334:	010000c4 	movi	r4,3
    9338:	21c02d2e 	bgeu	r4,r7,93f0 <memset+0x100>
    933c:	29003fcc 	andi	r4,r5,255
    9340:	200c923a 	slli	r6,r4,8
    9344:	3108b03a 	or	r4,r6,r4
    9348:	200c943a 	slli	r6,r4,16
    934c:	218cb03a 	or	r6,r4,r6
    9350:	010003c4 	movi	r4,15
    9354:	21c0182e 	bgeu	r4,r7,93b8 <memset+0xc8>
    9358:	3b3ffc04 	addi	r12,r7,-16
    935c:	6018d13a 	srli	r12,r12,4
    9360:	1a000104 	addi	r8,r3,4
    9364:	1ac00204 	addi	r11,r3,8
    9368:	6008913a 	slli	r4,r12,4
    936c:	1a800304 	addi	r10,r3,12
    9370:	1813883a 	mov	r9,r3
    9374:	21000504 	addi	r4,r4,20
    9378:	1909883a 	add	r4,r3,r4
    937c:	49800015 	stw	r6,0(r9)
    9380:	41800015 	stw	r6,0(r8)
    9384:	59800015 	stw	r6,0(r11)
    9388:	51800015 	stw	r6,0(r10)
    938c:	42000404 	addi	r8,r8,16
    9390:	4a400404 	addi	r9,r9,16
    9394:	5ac00404 	addi	r11,r11,16
    9398:	52800404 	addi	r10,r10,16
    939c:	413ff71e 	bne	r8,r4,937c <__alt_data_end+0xfc00937c>
    93a0:	63000044 	addi	r12,r12,1
    93a4:	6018913a 	slli	r12,r12,4
    93a8:	39c003cc 	andi	r7,r7,15
    93ac:	010000c4 	movi	r4,3
    93b0:	1b07883a 	add	r3,r3,r12
    93b4:	21c00e2e 	bgeu	r4,r7,93f0 <memset+0x100>
    93b8:	1813883a 	mov	r9,r3
    93bc:	3811883a 	mov	r8,r7
    93c0:	010000c4 	movi	r4,3
    93c4:	49800015 	stw	r6,0(r9)
    93c8:	423fff04 	addi	r8,r8,-4
    93cc:	4a400104 	addi	r9,r9,4
    93d0:	223ffc36 	bltu	r4,r8,93c4 <__alt_data_end+0xfc0093c4>
    93d4:	393fff04 	addi	r4,r7,-4
    93d8:	2008d0ba 	srli	r4,r4,2
    93dc:	39c000cc 	andi	r7,r7,3
    93e0:	21000044 	addi	r4,r4,1
    93e4:	2109883a 	add	r4,r4,r4
    93e8:	2109883a 	add	r4,r4,r4
    93ec:	1907883a 	add	r3,r3,r4
    93f0:	38000526 	beq	r7,zero,9408 <memset+0x118>
    93f4:	19cf883a 	add	r7,r3,r7
    93f8:	19400005 	stb	r5,0(r3)
    93fc:	18c00044 	addi	r3,r3,1
    9400:	38fffd1e 	bne	r7,r3,93f8 <__alt_data_end+0xfc0093f8>
    9404:	f800283a 	ret
    9408:	f800283a 	ret
    940c:	2007883a 	mov	r3,r4
    9410:	300f883a 	mov	r7,r6
    9414:	003fc706 	br	9334 <__alt_data_end+0xfc009334>

00009418 <_Balloc>:
    9418:	20801317 	ldw	r2,76(r4)
    941c:	defffc04 	addi	sp,sp,-16
    9420:	dc400115 	stw	r17,4(sp)
    9424:	dc000015 	stw	r16,0(sp)
    9428:	dfc00315 	stw	ra,12(sp)
    942c:	dc800215 	stw	r18,8(sp)
    9430:	2023883a 	mov	r17,r4
    9434:	2821883a 	mov	r16,r5
    9438:	10000f26 	beq	r2,zero,9478 <_Balloc+0x60>
    943c:	8407883a 	add	r3,r16,r16
    9440:	18c7883a 	add	r3,r3,r3
    9444:	10c7883a 	add	r3,r2,r3
    9448:	18800017 	ldw	r2,0(r3)
    944c:	10001126 	beq	r2,zero,9494 <_Balloc+0x7c>
    9450:	11000017 	ldw	r4,0(r2)
    9454:	19000015 	stw	r4,0(r3)
    9458:	10000415 	stw	zero,16(r2)
    945c:	10000315 	stw	zero,12(r2)
    9460:	dfc00317 	ldw	ra,12(sp)
    9464:	dc800217 	ldw	r18,8(sp)
    9468:	dc400117 	ldw	r17,4(sp)
    946c:	dc000017 	ldw	r16,0(sp)
    9470:	dec00404 	addi	sp,sp,16
    9474:	f800283a 	ret
    9478:	01800844 	movi	r6,33
    947c:	01400104 	movi	r5,4
    9480:	000c7800 	call	c780 <_calloc_r>
    9484:	88801315 	stw	r2,76(r17)
    9488:	103fec1e 	bne	r2,zero,943c <__alt_data_end+0xfc00943c>
    948c:	0005883a 	mov	r2,zero
    9490:	003ff306 	br	9460 <__alt_data_end+0xfc009460>
    9494:	01400044 	movi	r5,1
    9498:	2c24983a 	sll	r18,r5,r16
    949c:	8809883a 	mov	r4,r17
    94a0:	91800144 	addi	r6,r18,5
    94a4:	318d883a 	add	r6,r6,r6
    94a8:	318d883a 	add	r6,r6,r6
    94ac:	000c7800 	call	c780 <_calloc_r>
    94b0:	103ff626 	beq	r2,zero,948c <__alt_data_end+0xfc00948c>
    94b4:	14000115 	stw	r16,4(r2)
    94b8:	14800215 	stw	r18,8(r2)
    94bc:	003fe606 	br	9458 <__alt_data_end+0xfc009458>

000094c0 <_Bfree>:
    94c0:	28000826 	beq	r5,zero,94e4 <_Bfree+0x24>
    94c4:	28c00117 	ldw	r3,4(r5)
    94c8:	20801317 	ldw	r2,76(r4)
    94cc:	18c7883a 	add	r3,r3,r3
    94d0:	18c7883a 	add	r3,r3,r3
    94d4:	10c5883a 	add	r2,r2,r3
    94d8:	10c00017 	ldw	r3,0(r2)
    94dc:	28c00015 	stw	r3,0(r5)
    94e0:	11400015 	stw	r5,0(r2)
    94e4:	f800283a 	ret

000094e8 <__multadd>:
    94e8:	defff704 	addi	sp,sp,-36
    94ec:	dc800215 	stw	r18,8(sp)
    94f0:	2c800417 	ldw	r18,16(r5)
    94f4:	dd800615 	stw	r22,24(sp)
    94f8:	dd400515 	stw	r21,20(sp)
    94fc:	dd000415 	stw	r20,16(sp)
    9500:	dcc00315 	stw	r19,12(sp)
    9504:	dc400115 	stw	r17,4(sp)
    9508:	dc000015 	stw	r16,0(sp)
    950c:	dfc00815 	stw	ra,32(sp)
    9510:	ddc00715 	stw	r23,28(sp)
    9514:	2827883a 	mov	r19,r5
    9518:	2029883a 	mov	r20,r4
    951c:	3023883a 	mov	r17,r6
    9520:	3821883a 	mov	r16,r7
    9524:	2d400504 	addi	r21,r5,20
    9528:	002d883a 	mov	r22,zero
    952c:	adc00017 	ldw	r23,0(r21)
    9530:	880b883a 	mov	r5,r17
    9534:	ad400104 	addi	r21,r21,4
    9538:	b93fffcc 	andi	r4,r23,65535
    953c:	00034100 	call	3410 <__mulsi3>
    9540:	b808d43a 	srli	r4,r23,16
    9544:	880b883a 	mov	r5,r17
    9548:	1421883a 	add	r16,r2,r16
    954c:	00034100 	call	3410 <__mulsi3>
    9550:	800ed43a 	srli	r7,r16,16
    9554:	80ffffcc 	andi	r3,r16,65535
    9558:	b5800044 	addi	r22,r22,1
    955c:	11c5883a 	add	r2,r2,r7
    9560:	100e943a 	slli	r7,r2,16
    9564:	1020d43a 	srli	r16,r2,16
    9568:	38c7883a 	add	r3,r7,r3
    956c:	a8ffff15 	stw	r3,-4(r21)
    9570:	b4bfee16 	blt	r22,r18,952c <__alt_data_end+0xfc00952c>
    9574:	80000926 	beq	r16,zero,959c <__multadd+0xb4>
    9578:	98800217 	ldw	r2,8(r19)
    957c:	9080130e 	bge	r18,r2,95cc <__multadd+0xe4>
    9580:	90800144 	addi	r2,r18,5
    9584:	1085883a 	add	r2,r2,r2
    9588:	1085883a 	add	r2,r2,r2
    958c:	9885883a 	add	r2,r19,r2
    9590:	14000015 	stw	r16,0(r2)
    9594:	94800044 	addi	r18,r18,1
    9598:	9c800415 	stw	r18,16(r19)
    959c:	9805883a 	mov	r2,r19
    95a0:	dfc00817 	ldw	ra,32(sp)
    95a4:	ddc00717 	ldw	r23,28(sp)
    95a8:	dd800617 	ldw	r22,24(sp)
    95ac:	dd400517 	ldw	r21,20(sp)
    95b0:	dd000417 	ldw	r20,16(sp)
    95b4:	dcc00317 	ldw	r19,12(sp)
    95b8:	dc800217 	ldw	r18,8(sp)
    95bc:	dc400117 	ldw	r17,4(sp)
    95c0:	dc000017 	ldw	r16,0(sp)
    95c4:	dec00904 	addi	sp,sp,36
    95c8:	f800283a 	ret
    95cc:	99400117 	ldw	r5,4(r19)
    95d0:	a009883a 	mov	r4,r20
    95d4:	29400044 	addi	r5,r5,1
    95d8:	00094180 	call	9418 <_Balloc>
    95dc:	99800417 	ldw	r6,16(r19)
    95e0:	99400304 	addi	r5,r19,12
    95e4:	11000304 	addi	r4,r2,12
    95e8:	31800084 	addi	r6,r6,2
    95ec:	318d883a 	add	r6,r6,r6
    95f0:	318d883a 	add	r6,r6,r6
    95f4:	1023883a 	mov	r17,r2
    95f8:	000904c0 	call	904c <memcpy>
    95fc:	98000a26 	beq	r19,zero,9628 <__multadd+0x140>
    9600:	98c00117 	ldw	r3,4(r19)
    9604:	a0801317 	ldw	r2,76(r20)
    9608:	18c7883a 	add	r3,r3,r3
    960c:	18c7883a 	add	r3,r3,r3
    9610:	10c5883a 	add	r2,r2,r3
    9614:	10c00017 	ldw	r3,0(r2)
    9618:	98c00015 	stw	r3,0(r19)
    961c:	14c00015 	stw	r19,0(r2)
    9620:	8827883a 	mov	r19,r17
    9624:	003fd606 	br	9580 <__alt_data_end+0xfc009580>
    9628:	8827883a 	mov	r19,r17
    962c:	003fd406 	br	9580 <__alt_data_end+0xfc009580>

00009630 <__s2b>:
    9630:	defff904 	addi	sp,sp,-28
    9634:	dc400115 	stw	r17,4(sp)
    9638:	dc000015 	stw	r16,0(sp)
    963c:	2023883a 	mov	r17,r4
    9640:	2821883a 	mov	r16,r5
    9644:	39000204 	addi	r4,r7,8
    9648:	01400244 	movi	r5,9
    964c:	dcc00315 	stw	r19,12(sp)
    9650:	dc800215 	stw	r18,8(sp)
    9654:	dfc00615 	stw	ra,24(sp)
    9658:	dd400515 	stw	r21,20(sp)
    965c:	dd000415 	stw	r20,16(sp)
    9660:	3825883a 	mov	r18,r7
    9664:	3027883a 	mov	r19,r6
    9668:	000325c0 	call	325c <__divsi3>
    966c:	00c00044 	movi	r3,1
    9670:	000b883a 	mov	r5,zero
    9674:	1880030e 	bge	r3,r2,9684 <__s2b+0x54>
    9678:	18c7883a 	add	r3,r3,r3
    967c:	29400044 	addi	r5,r5,1
    9680:	18bffd16 	blt	r3,r2,9678 <__alt_data_end+0xfc009678>
    9684:	8809883a 	mov	r4,r17
    9688:	00094180 	call	9418 <_Balloc>
    968c:	d8c00717 	ldw	r3,28(sp)
    9690:	10c00515 	stw	r3,20(r2)
    9694:	00c00044 	movi	r3,1
    9698:	10c00415 	stw	r3,16(r2)
    969c:	00c00244 	movi	r3,9
    96a0:	1cc0210e 	bge	r3,r19,9728 <__s2b+0xf8>
    96a4:	80eb883a 	add	r21,r16,r3
    96a8:	a829883a 	mov	r20,r21
    96ac:	84e1883a 	add	r16,r16,r19
    96b0:	a1c00007 	ldb	r7,0(r20)
    96b4:	01800284 	movi	r6,10
    96b8:	a5000044 	addi	r20,r20,1
    96bc:	100b883a 	mov	r5,r2
    96c0:	39fff404 	addi	r7,r7,-48
    96c4:	8809883a 	mov	r4,r17
    96c8:	00094e80 	call	94e8 <__multadd>
    96cc:	a43ff81e 	bne	r20,r16,96b0 <__alt_data_end+0xfc0096b0>
    96d0:	ace1883a 	add	r16,r21,r19
    96d4:	843ffe04 	addi	r16,r16,-8
    96d8:	9c800a0e 	bge	r19,r18,9704 <__s2b+0xd4>
    96dc:	94e5c83a 	sub	r18,r18,r19
    96e0:	84a5883a 	add	r18,r16,r18
    96e4:	81c00007 	ldb	r7,0(r16)
    96e8:	01800284 	movi	r6,10
    96ec:	84000044 	addi	r16,r16,1
    96f0:	100b883a 	mov	r5,r2
    96f4:	39fff404 	addi	r7,r7,-48
    96f8:	8809883a 	mov	r4,r17
    96fc:	00094e80 	call	94e8 <__multadd>
    9700:	84bff81e 	bne	r16,r18,96e4 <__alt_data_end+0xfc0096e4>
    9704:	dfc00617 	ldw	ra,24(sp)
    9708:	dd400517 	ldw	r21,20(sp)
    970c:	dd000417 	ldw	r20,16(sp)
    9710:	dcc00317 	ldw	r19,12(sp)
    9714:	dc800217 	ldw	r18,8(sp)
    9718:	dc400117 	ldw	r17,4(sp)
    971c:	dc000017 	ldw	r16,0(sp)
    9720:	dec00704 	addi	sp,sp,28
    9724:	f800283a 	ret
    9728:	84000284 	addi	r16,r16,10
    972c:	1827883a 	mov	r19,r3
    9730:	003fe906 	br	96d8 <__alt_data_end+0xfc0096d8>

00009734 <__hi0bits>:
    9734:	20bfffec 	andhi	r2,r4,65535
    9738:	1000141e 	bne	r2,zero,978c <__hi0bits+0x58>
    973c:	2008943a 	slli	r4,r4,16
    9740:	00800404 	movi	r2,16
    9744:	20ffc02c 	andhi	r3,r4,65280
    9748:	1800021e 	bne	r3,zero,9754 <__hi0bits+0x20>
    974c:	2008923a 	slli	r4,r4,8
    9750:	10800204 	addi	r2,r2,8
    9754:	20fc002c 	andhi	r3,r4,61440
    9758:	1800021e 	bne	r3,zero,9764 <__hi0bits+0x30>
    975c:	2008913a 	slli	r4,r4,4
    9760:	10800104 	addi	r2,r2,4
    9764:	20f0002c 	andhi	r3,r4,49152
    9768:	1800031e 	bne	r3,zero,9778 <__hi0bits+0x44>
    976c:	2109883a 	add	r4,r4,r4
    9770:	10800084 	addi	r2,r2,2
    9774:	2109883a 	add	r4,r4,r4
    9778:	20000316 	blt	r4,zero,9788 <__hi0bits+0x54>
    977c:	2110002c 	andhi	r4,r4,16384
    9780:	2000041e 	bne	r4,zero,9794 <__hi0bits+0x60>
    9784:	00800804 	movi	r2,32
    9788:	f800283a 	ret
    978c:	0005883a 	mov	r2,zero
    9790:	003fec06 	br	9744 <__alt_data_end+0xfc009744>
    9794:	10800044 	addi	r2,r2,1
    9798:	f800283a 	ret

0000979c <__lo0bits>:
    979c:	20c00017 	ldw	r3,0(r4)
    97a0:	188001cc 	andi	r2,r3,7
    97a4:	10000826 	beq	r2,zero,97c8 <__lo0bits+0x2c>
    97a8:	1880004c 	andi	r2,r3,1
    97ac:	1000211e 	bne	r2,zero,9834 <__lo0bits+0x98>
    97b0:	1880008c 	andi	r2,r3,2
    97b4:	1000211e 	bne	r2,zero,983c <__lo0bits+0xa0>
    97b8:	1806d0ba 	srli	r3,r3,2
    97bc:	00800084 	movi	r2,2
    97c0:	20c00015 	stw	r3,0(r4)
    97c4:	f800283a 	ret
    97c8:	18bfffcc 	andi	r2,r3,65535
    97cc:	10001326 	beq	r2,zero,981c <__lo0bits+0x80>
    97d0:	0005883a 	mov	r2,zero
    97d4:	19403fcc 	andi	r5,r3,255
    97d8:	2800021e 	bne	r5,zero,97e4 <__lo0bits+0x48>
    97dc:	1806d23a 	srli	r3,r3,8
    97e0:	10800204 	addi	r2,r2,8
    97e4:	194003cc 	andi	r5,r3,15
    97e8:	2800021e 	bne	r5,zero,97f4 <__lo0bits+0x58>
    97ec:	1806d13a 	srli	r3,r3,4
    97f0:	10800104 	addi	r2,r2,4
    97f4:	194000cc 	andi	r5,r3,3
    97f8:	2800021e 	bne	r5,zero,9804 <__lo0bits+0x68>
    97fc:	1806d0ba 	srli	r3,r3,2
    9800:	10800084 	addi	r2,r2,2
    9804:	1940004c 	andi	r5,r3,1
    9808:	2800081e 	bne	r5,zero,982c <__lo0bits+0x90>
    980c:	1806d07a 	srli	r3,r3,1
    9810:	1800051e 	bne	r3,zero,9828 <__lo0bits+0x8c>
    9814:	00800804 	movi	r2,32
    9818:	f800283a 	ret
    981c:	1806d43a 	srli	r3,r3,16
    9820:	00800404 	movi	r2,16
    9824:	003feb06 	br	97d4 <__alt_data_end+0xfc0097d4>
    9828:	10800044 	addi	r2,r2,1
    982c:	20c00015 	stw	r3,0(r4)
    9830:	f800283a 	ret
    9834:	0005883a 	mov	r2,zero
    9838:	f800283a 	ret
    983c:	1806d07a 	srli	r3,r3,1
    9840:	00800044 	movi	r2,1
    9844:	20c00015 	stw	r3,0(r4)
    9848:	f800283a 	ret

0000984c <__i2b>:
    984c:	defffd04 	addi	sp,sp,-12
    9850:	dc000015 	stw	r16,0(sp)
    9854:	04000044 	movi	r16,1
    9858:	dc400115 	stw	r17,4(sp)
    985c:	2823883a 	mov	r17,r5
    9860:	800b883a 	mov	r5,r16
    9864:	dfc00215 	stw	ra,8(sp)
    9868:	00094180 	call	9418 <_Balloc>
    986c:	14400515 	stw	r17,20(r2)
    9870:	14000415 	stw	r16,16(r2)
    9874:	dfc00217 	ldw	ra,8(sp)
    9878:	dc400117 	ldw	r17,4(sp)
    987c:	dc000017 	ldw	r16,0(sp)
    9880:	dec00304 	addi	sp,sp,12
    9884:	f800283a 	ret

00009888 <__multiply>:
    9888:	deffef04 	addi	sp,sp,-68
    988c:	dc400815 	stw	r17,32(sp)
    9890:	dc000715 	stw	r16,28(sp)
    9894:	34400417 	ldw	r17,16(r6)
    9898:	2c000417 	ldw	r16,16(r5)
    989c:	dd800d15 	stw	r22,52(sp)
    98a0:	dc800915 	stw	r18,36(sp)
    98a4:	dfc01015 	stw	ra,64(sp)
    98a8:	df000f15 	stw	fp,60(sp)
    98ac:	ddc00e15 	stw	r23,56(sp)
    98b0:	dd400c15 	stw	r21,48(sp)
    98b4:	dd000b15 	stw	r20,44(sp)
    98b8:	dcc00a15 	stw	r19,40(sp)
    98bc:	2825883a 	mov	r18,r5
    98c0:	302d883a 	mov	r22,r6
    98c4:	8440050e 	bge	r16,r17,98dc <__multiply+0x54>
    98c8:	8007883a 	mov	r3,r16
    98cc:	3025883a 	mov	r18,r6
    98d0:	8821883a 	mov	r16,r17
    98d4:	282d883a 	mov	r22,r5
    98d8:	1823883a 	mov	r17,r3
    98dc:	90800217 	ldw	r2,8(r18)
    98e0:	8447883a 	add	r3,r16,r17
    98e4:	d8c00215 	stw	r3,8(sp)
    98e8:	91400117 	ldw	r5,4(r18)
    98ec:	10c0010e 	bge	r2,r3,98f4 <__multiply+0x6c>
    98f0:	29400044 	addi	r5,r5,1
    98f4:	00094180 	call	9418 <_Balloc>
    98f8:	d8c00217 	ldw	r3,8(sp)
    98fc:	d8800615 	stw	r2,24(sp)
    9900:	18eb883a 	add	r21,r3,r3
    9904:	ad6b883a 	add	r21,r21,r21
    9908:	10c00504 	addi	r3,r2,20
    990c:	1d6b883a 	add	r21,r3,r21
    9910:	d8c00115 	stw	r3,4(sp)
    9914:	dd400315 	stw	r21,12(sp)
    9918:	1805883a 	mov	r2,r3
    991c:	1d40042e 	bgeu	r3,r21,9930 <__multiply+0xa8>
    9920:	d8c00317 	ldw	r3,12(sp)
    9924:	10000015 	stw	zero,0(r2)
    9928:	10800104 	addi	r2,r2,4
    992c:	10fffc36 	bltu	r2,r3,9920 <__alt_data_end+0xfc009920>
    9930:	8c63883a 	add	r17,r17,r17
    9934:	b5800504 	addi	r22,r22,20
    9938:	8c63883a 	add	r17,r17,r17
    993c:	94800504 	addi	r18,r18,20
    9940:	8421883a 	add	r16,r16,r16
    9944:	b463883a 	add	r17,r22,r17
    9948:	8421883a 	add	r16,r16,r16
    994c:	dd800015 	stw	r22,0(sp)
    9950:	dc800415 	stw	r18,16(sp)
    9954:	dc400515 	stw	r17,20(sp)
    9958:	9429883a 	add	r20,r18,r16
    995c:	b4404f2e 	bgeu	r22,r17,9a9c <__multiply+0x214>
    9960:	d8c00017 	ldw	r3,0(sp)
    9964:	1c800017 	ldw	r18,0(r3)
    9968:	947fffcc 	andi	r17,r18,65535
    996c:	88001e26 	beq	r17,zero,99e8 <__multiply+0x160>
    9970:	dd800117 	ldw	r22,4(sp)
    9974:	dd400417 	ldw	r21,16(sp)
    9978:	0027883a 	mov	r19,zero
    997c:	ac800017 	ldw	r18,0(r21)
    9980:	b4000017 	ldw	r16,0(r22)
    9984:	880b883a 	mov	r5,r17
    9988:	913fffcc 	andi	r4,r18,65535
    998c:	00034100 	call	3410 <__mulsi3>
    9990:	9008d43a 	srli	r4,r18,16
    9994:	84bfffcc 	andi	r18,r16,65535
    9998:	1485883a 	add	r2,r2,r18
    999c:	14e5883a 	add	r18,r2,r19
    99a0:	8020d43a 	srli	r16,r16,16
    99a4:	9026d43a 	srli	r19,r18,16
    99a8:	880b883a 	mov	r5,r17
    99ac:	00034100 	call	3410 <__mulsi3>
    99b0:	1405883a 	add	r2,r2,r16
    99b4:	14e1883a 	add	r16,r2,r19
    99b8:	90ffffcc 	andi	r3,r18,65535
    99bc:	8024943a 	slli	r18,r16,16
    99c0:	ad400104 	addi	r21,r21,4
    99c4:	b005883a 	mov	r2,r22
    99c8:	90c6b03a 	or	r3,r18,r3
    99cc:	b0c00015 	stw	r3,0(r22)
    99d0:	8026d43a 	srli	r19,r16,16
    99d4:	b5800104 	addi	r22,r22,4
    99d8:	ad3fe836 	bltu	r21,r20,997c <__alt_data_end+0xfc00997c>
    99dc:	d8c00017 	ldw	r3,0(sp)
    99e0:	14c00115 	stw	r19,4(r2)
    99e4:	1c800017 	ldw	r18,0(r3)
    99e8:	9024d43a 	srli	r18,r18,16
    99ec:	90002226 	beq	r18,zero,9a78 <__multiply+0x1f0>
    99f0:	d8c00117 	ldw	r3,4(sp)
    99f4:	dd800417 	ldw	r22,16(sp)
    99f8:	002f883a 	mov	r23,zero
    99fc:	1f000017 	ldw	fp,0(r3)
    9a00:	1823883a 	mov	r17,r3
    9a04:	182b883a 	mov	r21,r3
    9a08:	e021883a 	mov	r16,fp
    9a0c:	00000106 	br	9a14 <__multiply+0x18c>
    9a10:	982b883a 	mov	r21,r19
    9a14:	b100000b 	ldhu	r4,0(r22)
    9a18:	8020d43a 	srli	r16,r16,16
    9a1c:	900b883a 	mov	r5,r18
    9a20:	00034100 	call	3410 <__mulsi3>
    9a24:	1405883a 	add	r2,r2,r16
    9a28:	15ef883a 	add	r23,r2,r23
    9a2c:	b804943a 	slli	r2,r23,16
    9a30:	e0ffffcc 	andi	r3,fp,65535
    9a34:	8c400104 	addi	r17,r17,4
    9a38:	10c6b03a 	or	r3,r2,r3
    9a3c:	88ffff15 	stw	r3,-4(r17)
    9a40:	b5800104 	addi	r22,r22,4
    9a44:	b13fff17 	ldw	r4,-4(r22)
    9a48:	acc00104 	addi	r19,r21,4
    9a4c:	900b883a 	mov	r5,r18
    9a50:	2008d43a 	srli	r4,r4,16
    9a54:	9c000017 	ldw	r16,0(r19)
    9a58:	00034100 	call	3410 <__mulsi3>
    9a5c:	b806d43a 	srli	r3,r23,16
    9a60:	813fffcc 	andi	r4,r16,65535
    9a64:	1105883a 	add	r2,r2,r4
    9a68:	10f9883a 	add	fp,r2,r3
    9a6c:	e02ed43a 	srli	r23,fp,16
    9a70:	b53fe736 	bltu	r22,r20,9a10 <__alt_data_end+0xfc009a10>
    9a74:	af000115 	stw	fp,4(r21)
    9a78:	d8c00017 	ldw	r3,0(sp)
    9a7c:	d9000517 	ldw	r4,20(sp)
    9a80:	18c00104 	addi	r3,r3,4
    9a84:	d8c00015 	stw	r3,0(sp)
    9a88:	d8c00117 	ldw	r3,4(sp)
    9a8c:	18c00104 	addi	r3,r3,4
    9a90:	d8c00115 	stw	r3,4(sp)
    9a94:	d8c00017 	ldw	r3,0(sp)
    9a98:	193fb136 	bltu	r3,r4,9960 <__alt_data_end+0xfc009960>
    9a9c:	d8c00217 	ldw	r3,8(sp)
    9aa0:	00c00c0e 	bge	zero,r3,9ad4 <__multiply+0x24c>
    9aa4:	d8c00317 	ldw	r3,12(sp)
    9aa8:	18bfff17 	ldw	r2,-4(r3)
    9aac:	1d7fff04 	addi	r21,r3,-4
    9ab0:	10000326 	beq	r2,zero,9ac0 <__multiply+0x238>
    9ab4:	00000706 	br	9ad4 <__multiply+0x24c>
    9ab8:	a8800017 	ldw	r2,0(r21)
    9abc:	1000051e 	bne	r2,zero,9ad4 <__multiply+0x24c>
    9ac0:	d8c00217 	ldw	r3,8(sp)
    9ac4:	ad7fff04 	addi	r21,r21,-4
    9ac8:	18ffffc4 	addi	r3,r3,-1
    9acc:	d8c00215 	stw	r3,8(sp)
    9ad0:	183ff91e 	bne	r3,zero,9ab8 <__alt_data_end+0xfc009ab8>
    9ad4:	d8c00617 	ldw	r3,24(sp)
    9ad8:	d9000217 	ldw	r4,8(sp)
    9adc:	1805883a 	mov	r2,r3
    9ae0:	19000415 	stw	r4,16(r3)
    9ae4:	dfc01017 	ldw	ra,64(sp)
    9ae8:	df000f17 	ldw	fp,60(sp)
    9aec:	ddc00e17 	ldw	r23,56(sp)
    9af0:	dd800d17 	ldw	r22,52(sp)
    9af4:	dd400c17 	ldw	r21,48(sp)
    9af8:	dd000b17 	ldw	r20,44(sp)
    9afc:	dcc00a17 	ldw	r19,40(sp)
    9b00:	dc800917 	ldw	r18,36(sp)
    9b04:	dc400817 	ldw	r17,32(sp)
    9b08:	dc000717 	ldw	r16,28(sp)
    9b0c:	dec01104 	addi	sp,sp,68
    9b10:	f800283a 	ret

00009b14 <__pow5mult>:
    9b14:	defffa04 	addi	sp,sp,-24
    9b18:	dcc00315 	stw	r19,12(sp)
    9b1c:	dc000015 	stw	r16,0(sp)
    9b20:	dfc00515 	stw	ra,20(sp)
    9b24:	dd000415 	stw	r20,16(sp)
    9b28:	dc800215 	stw	r18,8(sp)
    9b2c:	dc400115 	stw	r17,4(sp)
    9b30:	308000cc 	andi	r2,r6,3
    9b34:	3021883a 	mov	r16,r6
    9b38:	2027883a 	mov	r19,r4
    9b3c:	10002f1e 	bne	r2,zero,9bfc <__pow5mult+0xe8>
    9b40:	2825883a 	mov	r18,r5
    9b44:	8021d0ba 	srai	r16,r16,2
    9b48:	80001a26 	beq	r16,zero,9bb4 <__pow5mult+0xa0>
    9b4c:	9c401217 	ldw	r17,72(r19)
    9b50:	8800061e 	bne	r17,zero,9b6c <__pow5mult+0x58>
    9b54:	00003406 	br	9c28 <__pow5mult+0x114>
    9b58:	8021d07a 	srai	r16,r16,1
    9b5c:	80001526 	beq	r16,zero,9bb4 <__pow5mult+0xa0>
    9b60:	88800017 	ldw	r2,0(r17)
    9b64:	10001c26 	beq	r2,zero,9bd8 <__pow5mult+0xc4>
    9b68:	1023883a 	mov	r17,r2
    9b6c:	8080004c 	andi	r2,r16,1
    9b70:	103ff926 	beq	r2,zero,9b58 <__alt_data_end+0xfc009b58>
    9b74:	880d883a 	mov	r6,r17
    9b78:	900b883a 	mov	r5,r18
    9b7c:	9809883a 	mov	r4,r19
    9b80:	00098880 	call	9888 <__multiply>
    9b84:	90001b26 	beq	r18,zero,9bf4 <__pow5mult+0xe0>
    9b88:	91000117 	ldw	r4,4(r18)
    9b8c:	98c01317 	ldw	r3,76(r19)
    9b90:	8021d07a 	srai	r16,r16,1
    9b94:	2109883a 	add	r4,r4,r4
    9b98:	2109883a 	add	r4,r4,r4
    9b9c:	1907883a 	add	r3,r3,r4
    9ba0:	19000017 	ldw	r4,0(r3)
    9ba4:	91000015 	stw	r4,0(r18)
    9ba8:	1c800015 	stw	r18,0(r3)
    9bac:	1025883a 	mov	r18,r2
    9bb0:	803feb1e 	bne	r16,zero,9b60 <__alt_data_end+0xfc009b60>
    9bb4:	9005883a 	mov	r2,r18
    9bb8:	dfc00517 	ldw	ra,20(sp)
    9bbc:	dd000417 	ldw	r20,16(sp)
    9bc0:	dcc00317 	ldw	r19,12(sp)
    9bc4:	dc800217 	ldw	r18,8(sp)
    9bc8:	dc400117 	ldw	r17,4(sp)
    9bcc:	dc000017 	ldw	r16,0(sp)
    9bd0:	dec00604 	addi	sp,sp,24
    9bd4:	f800283a 	ret
    9bd8:	880d883a 	mov	r6,r17
    9bdc:	880b883a 	mov	r5,r17
    9be0:	9809883a 	mov	r4,r19
    9be4:	00098880 	call	9888 <__multiply>
    9be8:	88800015 	stw	r2,0(r17)
    9bec:	10000015 	stw	zero,0(r2)
    9bf0:	003fdd06 	br	9b68 <__alt_data_end+0xfc009b68>
    9bf4:	1025883a 	mov	r18,r2
    9bf8:	003fd706 	br	9b58 <__alt_data_end+0xfc009b58>
    9bfc:	10bfffc4 	addi	r2,r2,-1
    9c00:	1085883a 	add	r2,r2,r2
    9c04:	00c00074 	movhi	r3,1
    9c08:	18d45604 	addi	r3,r3,20824
    9c0c:	1085883a 	add	r2,r2,r2
    9c10:	1885883a 	add	r2,r3,r2
    9c14:	11800017 	ldw	r6,0(r2)
    9c18:	000f883a 	mov	r7,zero
    9c1c:	00094e80 	call	94e8 <__multadd>
    9c20:	1025883a 	mov	r18,r2
    9c24:	003fc706 	br	9b44 <__alt_data_end+0xfc009b44>
    9c28:	05000044 	movi	r20,1
    9c2c:	a00b883a 	mov	r5,r20
    9c30:	9809883a 	mov	r4,r19
    9c34:	00094180 	call	9418 <_Balloc>
    9c38:	1023883a 	mov	r17,r2
    9c3c:	00809c44 	movi	r2,625
    9c40:	88800515 	stw	r2,20(r17)
    9c44:	8d000415 	stw	r20,16(r17)
    9c48:	9c401215 	stw	r17,72(r19)
    9c4c:	88000015 	stw	zero,0(r17)
    9c50:	003fc606 	br	9b6c <__alt_data_end+0xfc009b6c>

00009c54 <__lshift>:
    9c54:	defff904 	addi	sp,sp,-28
    9c58:	dd400515 	stw	r21,20(sp)
    9c5c:	dcc00315 	stw	r19,12(sp)
    9c60:	302bd17a 	srai	r21,r6,5
    9c64:	2cc00417 	ldw	r19,16(r5)
    9c68:	28800217 	ldw	r2,8(r5)
    9c6c:	dd000415 	stw	r20,16(sp)
    9c70:	ace7883a 	add	r19,r21,r19
    9c74:	dc800215 	stw	r18,8(sp)
    9c78:	dc400115 	stw	r17,4(sp)
    9c7c:	dc000015 	stw	r16,0(sp)
    9c80:	dfc00615 	stw	ra,24(sp)
    9c84:	9c000044 	addi	r16,r19,1
    9c88:	2823883a 	mov	r17,r5
    9c8c:	3029883a 	mov	r20,r6
    9c90:	2025883a 	mov	r18,r4
    9c94:	29400117 	ldw	r5,4(r5)
    9c98:	1400030e 	bge	r2,r16,9ca8 <__lshift+0x54>
    9c9c:	1085883a 	add	r2,r2,r2
    9ca0:	29400044 	addi	r5,r5,1
    9ca4:	143ffd16 	blt	r2,r16,9c9c <__alt_data_end+0xfc009c9c>
    9ca8:	9009883a 	mov	r4,r18
    9cac:	00094180 	call	9418 <_Balloc>
    9cb0:	10c00504 	addi	r3,r2,20
    9cb4:	0540070e 	bge	zero,r21,9cd4 <__lshift+0x80>
    9cb8:	ad6b883a 	add	r21,r21,r21
    9cbc:	ad6b883a 	add	r21,r21,r21
    9cc0:	1809883a 	mov	r4,r3
    9cc4:	1d47883a 	add	r3,r3,r21
    9cc8:	20000015 	stw	zero,0(r4)
    9ccc:	21000104 	addi	r4,r4,4
    9cd0:	193ffd1e 	bne	r3,r4,9cc8 <__alt_data_end+0xfc009cc8>
    9cd4:	8a000417 	ldw	r8,16(r17)
    9cd8:	89000504 	addi	r4,r17,20
    9cdc:	a18007cc 	andi	r6,r20,31
    9ce0:	4211883a 	add	r8,r8,r8
    9ce4:	4211883a 	add	r8,r8,r8
    9ce8:	2211883a 	add	r8,r4,r8
    9cec:	30002326 	beq	r6,zero,9d7c <__lshift+0x128>
    9cf0:	02400804 	movi	r9,32
    9cf4:	4993c83a 	sub	r9,r9,r6
    9cf8:	000b883a 	mov	r5,zero
    9cfc:	21c00017 	ldw	r7,0(r4)
    9d00:	1815883a 	mov	r10,r3
    9d04:	18c00104 	addi	r3,r3,4
    9d08:	398e983a 	sll	r7,r7,r6
    9d0c:	21000104 	addi	r4,r4,4
    9d10:	394ab03a 	or	r5,r7,r5
    9d14:	197fff15 	stw	r5,-4(r3)
    9d18:	217fff17 	ldw	r5,-4(r4)
    9d1c:	2a4ad83a 	srl	r5,r5,r9
    9d20:	223ff636 	bltu	r4,r8,9cfc <__alt_data_end+0xfc009cfc>
    9d24:	51400115 	stw	r5,4(r10)
    9d28:	28001a1e 	bne	r5,zero,9d94 <__lshift+0x140>
    9d2c:	843fffc4 	addi	r16,r16,-1
    9d30:	14000415 	stw	r16,16(r2)
    9d34:	88000826 	beq	r17,zero,9d58 <__lshift+0x104>
    9d38:	89000117 	ldw	r4,4(r17)
    9d3c:	90c01317 	ldw	r3,76(r18)
    9d40:	2109883a 	add	r4,r4,r4
    9d44:	2109883a 	add	r4,r4,r4
    9d48:	1907883a 	add	r3,r3,r4
    9d4c:	19000017 	ldw	r4,0(r3)
    9d50:	89000015 	stw	r4,0(r17)
    9d54:	1c400015 	stw	r17,0(r3)
    9d58:	dfc00617 	ldw	ra,24(sp)
    9d5c:	dd400517 	ldw	r21,20(sp)
    9d60:	dd000417 	ldw	r20,16(sp)
    9d64:	dcc00317 	ldw	r19,12(sp)
    9d68:	dc800217 	ldw	r18,8(sp)
    9d6c:	dc400117 	ldw	r17,4(sp)
    9d70:	dc000017 	ldw	r16,0(sp)
    9d74:	dec00704 	addi	sp,sp,28
    9d78:	f800283a 	ret
    9d7c:	21400017 	ldw	r5,0(r4)
    9d80:	18c00104 	addi	r3,r3,4
    9d84:	21000104 	addi	r4,r4,4
    9d88:	197fff15 	stw	r5,-4(r3)
    9d8c:	223ffb36 	bltu	r4,r8,9d7c <__alt_data_end+0xfc009d7c>
    9d90:	003fe606 	br	9d2c <__alt_data_end+0xfc009d2c>
    9d94:	9c000084 	addi	r16,r19,2
    9d98:	003fe406 	br	9d2c <__alt_data_end+0xfc009d2c>

00009d9c <__mcmp>:
    9d9c:	20800417 	ldw	r2,16(r4)
    9da0:	28c00417 	ldw	r3,16(r5)
    9da4:	10c5c83a 	sub	r2,r2,r3
    9da8:	1000111e 	bne	r2,zero,9df0 <__mcmp+0x54>
    9dac:	18c7883a 	add	r3,r3,r3
    9db0:	18c7883a 	add	r3,r3,r3
    9db4:	21000504 	addi	r4,r4,20
    9db8:	29400504 	addi	r5,r5,20
    9dbc:	20c5883a 	add	r2,r4,r3
    9dc0:	28cb883a 	add	r5,r5,r3
    9dc4:	00000106 	br	9dcc <__mcmp+0x30>
    9dc8:	20800a2e 	bgeu	r4,r2,9df4 <__mcmp+0x58>
    9dcc:	10bfff04 	addi	r2,r2,-4
    9dd0:	297fff04 	addi	r5,r5,-4
    9dd4:	11800017 	ldw	r6,0(r2)
    9dd8:	28c00017 	ldw	r3,0(r5)
    9ddc:	30fffa26 	beq	r6,r3,9dc8 <__alt_data_end+0xfc009dc8>
    9de0:	30c00236 	bltu	r6,r3,9dec <__mcmp+0x50>
    9de4:	00800044 	movi	r2,1
    9de8:	f800283a 	ret
    9dec:	00bfffc4 	movi	r2,-1
    9df0:	f800283a 	ret
    9df4:	0005883a 	mov	r2,zero
    9df8:	f800283a 	ret

00009dfc <__mdiff>:
    9dfc:	28c00417 	ldw	r3,16(r5)
    9e00:	30800417 	ldw	r2,16(r6)
    9e04:	defffa04 	addi	sp,sp,-24
    9e08:	dcc00315 	stw	r19,12(sp)
    9e0c:	dc800215 	stw	r18,8(sp)
    9e10:	dfc00515 	stw	ra,20(sp)
    9e14:	dd000415 	stw	r20,16(sp)
    9e18:	dc400115 	stw	r17,4(sp)
    9e1c:	dc000015 	stw	r16,0(sp)
    9e20:	1887c83a 	sub	r3,r3,r2
    9e24:	2825883a 	mov	r18,r5
    9e28:	3027883a 	mov	r19,r6
    9e2c:	1800141e 	bne	r3,zero,9e80 <__mdiff+0x84>
    9e30:	1085883a 	add	r2,r2,r2
    9e34:	1085883a 	add	r2,r2,r2
    9e38:	2a000504 	addi	r8,r5,20
    9e3c:	34000504 	addi	r16,r6,20
    9e40:	4087883a 	add	r3,r8,r2
    9e44:	8085883a 	add	r2,r16,r2
    9e48:	00000106 	br	9e50 <__mdiff+0x54>
    9e4c:	40c0592e 	bgeu	r8,r3,9fb4 <__mdiff+0x1b8>
    9e50:	18ffff04 	addi	r3,r3,-4
    9e54:	10bfff04 	addi	r2,r2,-4
    9e58:	19c00017 	ldw	r7,0(r3)
    9e5c:	11400017 	ldw	r5,0(r2)
    9e60:	397ffa26 	beq	r7,r5,9e4c <__alt_data_end+0xfc009e4c>
    9e64:	3940592e 	bgeu	r7,r5,9fcc <__mdiff+0x1d0>
    9e68:	9005883a 	mov	r2,r18
    9e6c:	4023883a 	mov	r17,r8
    9e70:	9825883a 	mov	r18,r19
    9e74:	05000044 	movi	r20,1
    9e78:	1027883a 	mov	r19,r2
    9e7c:	00000406 	br	9e90 <__mdiff+0x94>
    9e80:	18005616 	blt	r3,zero,9fdc <__mdiff+0x1e0>
    9e84:	34400504 	addi	r17,r6,20
    9e88:	2c000504 	addi	r16,r5,20
    9e8c:	0029883a 	mov	r20,zero
    9e90:	91400117 	ldw	r5,4(r18)
    9e94:	00094180 	call	9418 <_Balloc>
    9e98:	92400417 	ldw	r9,16(r18)
    9e9c:	9b000417 	ldw	r12,16(r19)
    9ea0:	12c00504 	addi	r11,r2,20
    9ea4:	4a51883a 	add	r8,r9,r9
    9ea8:	6319883a 	add	r12,r12,r12
    9eac:	4211883a 	add	r8,r8,r8
    9eb0:	6319883a 	add	r12,r12,r12
    9eb4:	15000315 	stw	r20,12(r2)
    9eb8:	8211883a 	add	r8,r16,r8
    9ebc:	8b19883a 	add	r12,r17,r12
    9ec0:	0007883a 	mov	r3,zero
    9ec4:	81400017 	ldw	r5,0(r16)
    9ec8:	89c00017 	ldw	r7,0(r17)
    9ecc:	59800104 	addi	r6,r11,4
    9ed0:	293fffcc 	andi	r4,r5,65535
    9ed4:	20c7883a 	add	r3,r4,r3
    9ed8:	393fffcc 	andi	r4,r7,65535
    9edc:	1909c83a 	sub	r4,r3,r4
    9ee0:	280ad43a 	srli	r5,r5,16
    9ee4:	380ed43a 	srli	r7,r7,16
    9ee8:	2007d43a 	srai	r3,r4,16
    9eec:	213fffcc 	andi	r4,r4,65535
    9ef0:	29cbc83a 	sub	r5,r5,r7
    9ef4:	28c7883a 	add	r3,r5,r3
    9ef8:	180a943a 	slli	r5,r3,16
    9efc:	8c400104 	addi	r17,r17,4
    9f00:	84000104 	addi	r16,r16,4
    9f04:	2908b03a 	or	r4,r5,r4
    9f08:	59000015 	stw	r4,0(r11)
    9f0c:	1807d43a 	srai	r3,r3,16
    9f10:	3015883a 	mov	r10,r6
    9f14:	3017883a 	mov	r11,r6
    9f18:	8b3fea36 	bltu	r17,r12,9ec4 <__alt_data_end+0xfc009ec4>
    9f1c:	8200162e 	bgeu	r16,r8,9f78 <__mdiff+0x17c>
    9f20:	8017883a 	mov	r11,r16
    9f24:	59400017 	ldw	r5,0(r11)
    9f28:	31800104 	addi	r6,r6,4
    9f2c:	5ac00104 	addi	r11,r11,4
    9f30:	293fffcc 	andi	r4,r5,65535
    9f34:	20c7883a 	add	r3,r4,r3
    9f38:	280ed43a 	srli	r7,r5,16
    9f3c:	180bd43a 	srai	r5,r3,16
    9f40:	193fffcc 	andi	r4,r3,65535
    9f44:	3947883a 	add	r3,r7,r5
    9f48:	180a943a 	slli	r5,r3,16
    9f4c:	1807d43a 	srai	r3,r3,16
    9f50:	2908b03a 	or	r4,r5,r4
    9f54:	313fff15 	stw	r4,-4(r6)
    9f58:	5a3ff236 	bltu	r11,r8,9f24 <__alt_data_end+0xfc009f24>
    9f5c:	0406303a 	nor	r3,zero,r16
    9f60:	1a07883a 	add	r3,r3,r8
    9f64:	1806d0ba 	srli	r3,r3,2
    9f68:	18c00044 	addi	r3,r3,1
    9f6c:	18c7883a 	add	r3,r3,r3
    9f70:	18c7883a 	add	r3,r3,r3
    9f74:	50d5883a 	add	r10,r10,r3
    9f78:	50ffff04 	addi	r3,r10,-4
    9f7c:	2000041e 	bne	r4,zero,9f90 <__mdiff+0x194>
    9f80:	18ffff04 	addi	r3,r3,-4
    9f84:	19000017 	ldw	r4,0(r3)
    9f88:	4a7fffc4 	addi	r9,r9,-1
    9f8c:	203ffc26 	beq	r4,zero,9f80 <__alt_data_end+0xfc009f80>
    9f90:	12400415 	stw	r9,16(r2)
    9f94:	dfc00517 	ldw	ra,20(sp)
    9f98:	dd000417 	ldw	r20,16(sp)
    9f9c:	dcc00317 	ldw	r19,12(sp)
    9fa0:	dc800217 	ldw	r18,8(sp)
    9fa4:	dc400117 	ldw	r17,4(sp)
    9fa8:	dc000017 	ldw	r16,0(sp)
    9fac:	dec00604 	addi	sp,sp,24
    9fb0:	f800283a 	ret
    9fb4:	000b883a 	mov	r5,zero
    9fb8:	00094180 	call	9418 <_Balloc>
    9fbc:	00c00044 	movi	r3,1
    9fc0:	10c00415 	stw	r3,16(r2)
    9fc4:	10000515 	stw	zero,20(r2)
    9fc8:	003ff206 	br	9f94 <__alt_data_end+0xfc009f94>
    9fcc:	8023883a 	mov	r17,r16
    9fd0:	0029883a 	mov	r20,zero
    9fd4:	4021883a 	mov	r16,r8
    9fd8:	003fad06 	br	9e90 <__alt_data_end+0xfc009e90>
    9fdc:	9005883a 	mov	r2,r18
    9fe0:	94400504 	addi	r17,r18,20
    9fe4:	9c000504 	addi	r16,r19,20
    9fe8:	9825883a 	mov	r18,r19
    9fec:	05000044 	movi	r20,1
    9ff0:	1027883a 	mov	r19,r2
    9ff4:	003fa606 	br	9e90 <__alt_data_end+0xfc009e90>

00009ff8 <__ulp>:
    9ff8:	295ffc2c 	andhi	r5,r5,32752
    9ffc:	00bf3034 	movhi	r2,64704
    a000:	2887883a 	add	r3,r5,r2
    a004:	00c0020e 	bge	zero,r3,a010 <__ulp+0x18>
    a008:	0005883a 	mov	r2,zero
    a00c:	f800283a 	ret
    a010:	00c7c83a 	sub	r3,zero,r3
    a014:	1807d53a 	srai	r3,r3,20
    a018:	008004c4 	movi	r2,19
    a01c:	10c00b0e 	bge	r2,r3,a04c <__ulp+0x54>
    a020:	18bffb04 	addi	r2,r3,-20
    a024:	01000784 	movi	r4,30
    a028:	0007883a 	mov	r3,zero
    a02c:	20800516 	blt	r4,r2,a044 <__ulp+0x4c>
    a030:	010007c4 	movi	r4,31
    a034:	2089c83a 	sub	r4,r4,r2
    a038:	00800044 	movi	r2,1
    a03c:	1104983a 	sll	r2,r2,r4
    a040:	f800283a 	ret
    a044:	00800044 	movi	r2,1
    a048:	f800283a 	ret
    a04c:	01400234 	movhi	r5,8
    a050:	28c7d83a 	sra	r3,r5,r3
    a054:	0005883a 	mov	r2,zero
    a058:	f800283a 	ret

0000a05c <__b2d>:
    a05c:	defffa04 	addi	sp,sp,-24
    a060:	dc000015 	stw	r16,0(sp)
    a064:	24000417 	ldw	r16,16(r4)
    a068:	dc400115 	stw	r17,4(sp)
    a06c:	24400504 	addi	r17,r4,20
    a070:	8421883a 	add	r16,r16,r16
    a074:	8421883a 	add	r16,r16,r16
    a078:	8c21883a 	add	r16,r17,r16
    a07c:	dc800215 	stw	r18,8(sp)
    a080:	84bfff17 	ldw	r18,-4(r16)
    a084:	dd000415 	stw	r20,16(sp)
    a088:	dcc00315 	stw	r19,12(sp)
    a08c:	9009883a 	mov	r4,r18
    a090:	2829883a 	mov	r20,r5
    a094:	dfc00515 	stw	ra,20(sp)
    a098:	00097340 	call	9734 <__hi0bits>
    a09c:	00c00804 	movi	r3,32
    a0a0:	1889c83a 	sub	r4,r3,r2
    a0a4:	a1000015 	stw	r4,0(r20)
    a0a8:	01000284 	movi	r4,10
    a0ac:	84ffff04 	addi	r19,r16,-4
    a0b0:	20801216 	blt	r4,r2,a0fc <__b2d+0xa0>
    a0b4:	018002c4 	movi	r6,11
    a0b8:	308dc83a 	sub	r6,r6,r2
    a0bc:	9186d83a 	srl	r3,r18,r6
    a0c0:	18cffc34 	orhi	r3,r3,16368
    a0c4:	8cc0212e 	bgeu	r17,r19,a14c <__b2d+0xf0>
    a0c8:	813ffe17 	ldw	r4,-8(r16)
    a0cc:	218cd83a 	srl	r6,r4,r6
    a0d0:	10800544 	addi	r2,r2,21
    a0d4:	9084983a 	sll	r2,r18,r2
    a0d8:	1184b03a 	or	r2,r2,r6
    a0dc:	dfc00517 	ldw	ra,20(sp)
    a0e0:	dd000417 	ldw	r20,16(sp)
    a0e4:	dcc00317 	ldw	r19,12(sp)
    a0e8:	dc800217 	ldw	r18,8(sp)
    a0ec:	dc400117 	ldw	r17,4(sp)
    a0f0:	dc000017 	ldw	r16,0(sp)
    a0f4:	dec00604 	addi	sp,sp,24
    a0f8:	f800283a 	ret
    a0fc:	8cc00f2e 	bgeu	r17,r19,a13c <__b2d+0xe0>
    a100:	117ffd44 	addi	r5,r2,-11
    a104:	80bffe17 	ldw	r2,-8(r16)
    a108:	28000e26 	beq	r5,zero,a144 <__b2d+0xe8>
    a10c:	1949c83a 	sub	r4,r3,r5
    a110:	9164983a 	sll	r18,r18,r5
    a114:	1106d83a 	srl	r3,r2,r4
    a118:	81bffe04 	addi	r6,r16,-8
    a11c:	948ffc34 	orhi	r18,r18,16368
    a120:	90c6b03a 	or	r3,r18,r3
    a124:	89800e2e 	bgeu	r17,r6,a160 <__b2d+0x104>
    a128:	81bffd17 	ldw	r6,-12(r16)
    a12c:	1144983a 	sll	r2,r2,r5
    a130:	310ad83a 	srl	r5,r6,r4
    a134:	2884b03a 	or	r2,r5,r2
    a138:	003fe806 	br	a0dc <__alt_data_end+0xfc00a0dc>
    a13c:	10bffd44 	addi	r2,r2,-11
    a140:	1000041e 	bne	r2,zero,a154 <__b2d+0xf8>
    a144:	90cffc34 	orhi	r3,r18,16368
    a148:	003fe406 	br	a0dc <__alt_data_end+0xfc00a0dc>
    a14c:	000d883a 	mov	r6,zero
    a150:	003fdf06 	br	a0d0 <__alt_data_end+0xfc00a0d0>
    a154:	90a4983a 	sll	r18,r18,r2
    a158:	0005883a 	mov	r2,zero
    a15c:	003ff906 	br	a144 <__alt_data_end+0xfc00a144>
    a160:	1144983a 	sll	r2,r2,r5
    a164:	003fdd06 	br	a0dc <__alt_data_end+0xfc00a0dc>

0000a168 <__d2b>:
    a168:	defff804 	addi	sp,sp,-32
    a16c:	dc000215 	stw	r16,8(sp)
    a170:	3021883a 	mov	r16,r6
    a174:	dc400315 	stw	r17,12(sp)
    a178:	8022907a 	slli	r17,r16,1
    a17c:	dd000615 	stw	r20,24(sp)
    a180:	2829883a 	mov	r20,r5
    a184:	01400044 	movi	r5,1
    a188:	dcc00515 	stw	r19,20(sp)
    a18c:	dc800415 	stw	r18,16(sp)
    a190:	dfc00715 	stw	ra,28(sp)
    a194:	3825883a 	mov	r18,r7
    a198:	8822d57a 	srli	r17,r17,21
    a19c:	00094180 	call	9418 <_Balloc>
    a1a0:	1027883a 	mov	r19,r2
    a1a4:	00800434 	movhi	r2,16
    a1a8:	10bfffc4 	addi	r2,r2,-1
    a1ac:	808c703a 	and	r6,r16,r2
    a1b0:	88000126 	beq	r17,zero,a1b8 <__d2b+0x50>
    a1b4:	31800434 	orhi	r6,r6,16
    a1b8:	d9800015 	stw	r6,0(sp)
    a1bc:	a0002426 	beq	r20,zero,a250 <__d2b+0xe8>
    a1c0:	d9000104 	addi	r4,sp,4
    a1c4:	dd000115 	stw	r20,4(sp)
    a1c8:	000979c0 	call	979c <__lo0bits>
    a1cc:	d8c00017 	ldw	r3,0(sp)
    a1d0:	10002f1e 	bne	r2,zero,a290 <__d2b+0x128>
    a1d4:	d9000117 	ldw	r4,4(sp)
    a1d8:	99000515 	stw	r4,20(r19)
    a1dc:	1821003a 	cmpeq	r16,r3,zero
    a1e0:	01000084 	movi	r4,2
    a1e4:	2421c83a 	sub	r16,r4,r16
    a1e8:	98c00615 	stw	r3,24(r19)
    a1ec:	9c000415 	stw	r16,16(r19)
    a1f0:	88001f1e 	bne	r17,zero,a270 <__d2b+0x108>
    a1f4:	10bef384 	addi	r2,r2,-1074
    a1f8:	90800015 	stw	r2,0(r18)
    a1fc:	00900034 	movhi	r2,16384
    a200:	10bfffc4 	addi	r2,r2,-1
    a204:	8085883a 	add	r2,r16,r2
    a208:	1085883a 	add	r2,r2,r2
    a20c:	1085883a 	add	r2,r2,r2
    a210:	9885883a 	add	r2,r19,r2
    a214:	11000517 	ldw	r4,20(r2)
    a218:	8020917a 	slli	r16,r16,5
    a21c:	00097340 	call	9734 <__hi0bits>
    a220:	d8c00817 	ldw	r3,32(sp)
    a224:	8085c83a 	sub	r2,r16,r2
    a228:	18800015 	stw	r2,0(r3)
    a22c:	9805883a 	mov	r2,r19
    a230:	dfc00717 	ldw	ra,28(sp)
    a234:	dd000617 	ldw	r20,24(sp)
    a238:	dcc00517 	ldw	r19,20(sp)
    a23c:	dc800417 	ldw	r18,16(sp)
    a240:	dc400317 	ldw	r17,12(sp)
    a244:	dc000217 	ldw	r16,8(sp)
    a248:	dec00804 	addi	sp,sp,32
    a24c:	f800283a 	ret
    a250:	d809883a 	mov	r4,sp
    a254:	000979c0 	call	979c <__lo0bits>
    a258:	d8c00017 	ldw	r3,0(sp)
    a25c:	04000044 	movi	r16,1
    a260:	9c000415 	stw	r16,16(r19)
    a264:	98c00515 	stw	r3,20(r19)
    a268:	10800804 	addi	r2,r2,32
    a26c:	883fe126 	beq	r17,zero,a1f4 <__alt_data_end+0xfc00a1f4>
    a270:	00c00d44 	movi	r3,53
    a274:	8c7ef344 	addi	r17,r17,-1075
    a278:	88a3883a 	add	r17,r17,r2
    a27c:	1885c83a 	sub	r2,r3,r2
    a280:	d8c00817 	ldw	r3,32(sp)
    a284:	94400015 	stw	r17,0(r18)
    a288:	18800015 	stw	r2,0(r3)
    a28c:	003fe706 	br	a22c <__alt_data_end+0xfc00a22c>
    a290:	01000804 	movi	r4,32
    a294:	2089c83a 	sub	r4,r4,r2
    a298:	1908983a 	sll	r4,r3,r4
    a29c:	d9400117 	ldw	r5,4(sp)
    a2a0:	1886d83a 	srl	r3,r3,r2
    a2a4:	2148b03a 	or	r4,r4,r5
    a2a8:	99000515 	stw	r4,20(r19)
    a2ac:	d8c00015 	stw	r3,0(sp)
    a2b0:	003fca06 	br	a1dc <__alt_data_end+0xfc00a1dc>

0000a2b4 <__ratio>:
    a2b4:	defff904 	addi	sp,sp,-28
    a2b8:	dc400315 	stw	r17,12(sp)
    a2bc:	2823883a 	mov	r17,r5
    a2c0:	d9400104 	addi	r5,sp,4
    a2c4:	dfc00615 	stw	ra,24(sp)
    a2c8:	dcc00515 	stw	r19,20(sp)
    a2cc:	dc800415 	stw	r18,16(sp)
    a2d0:	2027883a 	mov	r19,r4
    a2d4:	dc000215 	stw	r16,8(sp)
    a2d8:	000a05c0 	call	a05c <__b2d>
    a2dc:	d80b883a 	mov	r5,sp
    a2e0:	8809883a 	mov	r4,r17
    a2e4:	1025883a 	mov	r18,r2
    a2e8:	1821883a 	mov	r16,r3
    a2ec:	000a05c0 	call	a05c <__b2d>
    a2f0:	8a000417 	ldw	r8,16(r17)
    a2f4:	99000417 	ldw	r4,16(r19)
    a2f8:	d9400117 	ldw	r5,4(sp)
    a2fc:	2209c83a 	sub	r4,r4,r8
    a300:	2010917a 	slli	r8,r4,5
    a304:	d9000017 	ldw	r4,0(sp)
    a308:	2909c83a 	sub	r4,r5,r4
    a30c:	4109883a 	add	r4,r8,r4
    a310:	01000e0e 	bge	zero,r4,a34c <__ratio+0x98>
    a314:	2008953a 	slli	r4,r4,20
    a318:	2421883a 	add	r16,r4,r16
    a31c:	100d883a 	mov	r6,r2
    a320:	180f883a 	mov	r7,r3
    a324:	9009883a 	mov	r4,r18
    a328:	800b883a 	mov	r5,r16
    a32c:	000e32c0 	call	e32c <__divdf3>
    a330:	dfc00617 	ldw	ra,24(sp)
    a334:	dcc00517 	ldw	r19,20(sp)
    a338:	dc800417 	ldw	r18,16(sp)
    a33c:	dc400317 	ldw	r17,12(sp)
    a340:	dc000217 	ldw	r16,8(sp)
    a344:	dec00704 	addi	sp,sp,28
    a348:	f800283a 	ret
    a34c:	2008953a 	slli	r4,r4,20
    a350:	1907c83a 	sub	r3,r3,r4
    a354:	003ff106 	br	a31c <__alt_data_end+0xfc00a31c>

0000a358 <_mprec_log10>:
    a358:	defffe04 	addi	sp,sp,-8
    a35c:	dc000015 	stw	r16,0(sp)
    a360:	dfc00115 	stw	ra,4(sp)
    a364:	008005c4 	movi	r2,23
    a368:	2021883a 	mov	r16,r4
    a36c:	11000d0e 	bge	r2,r4,a3a4 <_mprec_log10+0x4c>
    a370:	0005883a 	mov	r2,zero
    a374:	00cffc34 	movhi	r3,16368
    a378:	843fffc4 	addi	r16,r16,-1
    a37c:	000d883a 	mov	r6,zero
    a380:	01d00934 	movhi	r7,16420
    a384:	1009883a 	mov	r4,r2
    a388:	180b883a 	mov	r5,r3
    a38c:	000ef540 	call	ef54 <__muldf3>
    a390:	803ff91e 	bne	r16,zero,a378 <__alt_data_end+0xfc00a378>
    a394:	dfc00117 	ldw	ra,4(sp)
    a398:	dc000017 	ldw	r16,0(sp)
    a39c:	dec00204 	addi	sp,sp,8
    a3a0:	f800283a 	ret
    a3a4:	202090fa 	slli	r16,r4,3
    a3a8:	00800074 	movhi	r2,1
    a3ac:	10946d04 	addi	r2,r2,20916
    a3b0:	1421883a 	add	r16,r2,r16
    a3b4:	80800017 	ldw	r2,0(r16)
    a3b8:	80c00117 	ldw	r3,4(r16)
    a3bc:	dfc00117 	ldw	ra,4(sp)
    a3c0:	dc000017 	ldw	r16,0(sp)
    a3c4:	dec00204 	addi	sp,sp,8
    a3c8:	f800283a 	ret

0000a3cc <__copybits>:
    a3cc:	297fffc4 	addi	r5,r5,-1
    a3d0:	280fd17a 	srai	r7,r5,5
    a3d4:	30c00417 	ldw	r3,16(r6)
    a3d8:	30800504 	addi	r2,r6,20
    a3dc:	39c00044 	addi	r7,r7,1
    a3e0:	18c7883a 	add	r3,r3,r3
    a3e4:	39cf883a 	add	r7,r7,r7
    a3e8:	18c7883a 	add	r3,r3,r3
    a3ec:	39cf883a 	add	r7,r7,r7
    a3f0:	10c7883a 	add	r3,r2,r3
    a3f4:	21cf883a 	add	r7,r4,r7
    a3f8:	10c00d2e 	bgeu	r2,r3,a430 <__copybits+0x64>
    a3fc:	200b883a 	mov	r5,r4
    a400:	12000017 	ldw	r8,0(r2)
    a404:	29400104 	addi	r5,r5,4
    a408:	10800104 	addi	r2,r2,4
    a40c:	2a3fff15 	stw	r8,-4(r5)
    a410:	10fffb36 	bltu	r2,r3,a400 <__alt_data_end+0xfc00a400>
    a414:	1985c83a 	sub	r2,r3,r6
    a418:	10bffac4 	addi	r2,r2,-21
    a41c:	1004d0ba 	srli	r2,r2,2
    a420:	10800044 	addi	r2,r2,1
    a424:	1085883a 	add	r2,r2,r2
    a428:	1085883a 	add	r2,r2,r2
    a42c:	2089883a 	add	r4,r4,r2
    a430:	21c0032e 	bgeu	r4,r7,a440 <__copybits+0x74>
    a434:	20000015 	stw	zero,0(r4)
    a438:	21000104 	addi	r4,r4,4
    a43c:	21fffd36 	bltu	r4,r7,a434 <__alt_data_end+0xfc00a434>
    a440:	f800283a 	ret

0000a444 <__any_on>:
    a444:	20c00417 	ldw	r3,16(r4)
    a448:	2805d17a 	srai	r2,r5,5
    a44c:	21000504 	addi	r4,r4,20
    a450:	18800d0e 	bge	r3,r2,a488 <__any_on+0x44>
    a454:	18c7883a 	add	r3,r3,r3
    a458:	18c7883a 	add	r3,r3,r3
    a45c:	20c7883a 	add	r3,r4,r3
    a460:	20c0192e 	bgeu	r4,r3,a4c8 <__any_on+0x84>
    a464:	18bfff17 	ldw	r2,-4(r3)
    a468:	18ffff04 	addi	r3,r3,-4
    a46c:	1000041e 	bne	r2,zero,a480 <__any_on+0x3c>
    a470:	20c0142e 	bgeu	r4,r3,a4c4 <__any_on+0x80>
    a474:	18ffff04 	addi	r3,r3,-4
    a478:	19400017 	ldw	r5,0(r3)
    a47c:	283ffc26 	beq	r5,zero,a470 <__alt_data_end+0xfc00a470>
    a480:	00800044 	movi	r2,1
    a484:	f800283a 	ret
    a488:	10c00a0e 	bge	r2,r3,a4b4 <__any_on+0x70>
    a48c:	1085883a 	add	r2,r2,r2
    a490:	1085883a 	add	r2,r2,r2
    a494:	294007cc 	andi	r5,r5,31
    a498:	2087883a 	add	r3,r4,r2
    a49c:	283ff026 	beq	r5,zero,a460 <__alt_data_end+0xfc00a460>
    a4a0:	19800017 	ldw	r6,0(r3)
    a4a4:	3144d83a 	srl	r2,r6,r5
    a4a8:	114a983a 	sll	r5,r2,r5
    a4ac:	317ff41e 	bne	r6,r5,a480 <__alt_data_end+0xfc00a480>
    a4b0:	003feb06 	br	a460 <__alt_data_end+0xfc00a460>
    a4b4:	1085883a 	add	r2,r2,r2
    a4b8:	1085883a 	add	r2,r2,r2
    a4bc:	2087883a 	add	r3,r4,r2
    a4c0:	003fe706 	br	a460 <__alt_data_end+0xfc00a460>
    a4c4:	f800283a 	ret
    a4c8:	0005883a 	mov	r2,zero
    a4cc:	f800283a 	ret

0000a4d0 <_putc_r>:
    a4d0:	defffc04 	addi	sp,sp,-16
    a4d4:	dc000215 	stw	r16,8(sp)
    a4d8:	dfc00315 	stw	ra,12(sp)
    a4dc:	2021883a 	mov	r16,r4
    a4e0:	20000226 	beq	r4,zero,a4ec <_putc_r+0x1c>
    a4e4:	20800e17 	ldw	r2,56(r4)
    a4e8:	10001b26 	beq	r2,zero,a558 <_putc_r+0x88>
    a4ec:	30800217 	ldw	r2,8(r6)
    a4f0:	10bfffc4 	addi	r2,r2,-1
    a4f4:	30800215 	stw	r2,8(r6)
    a4f8:	10000a16 	blt	r2,zero,a524 <_putc_r+0x54>
    a4fc:	30800017 	ldw	r2,0(r6)
    a500:	11400005 	stb	r5,0(r2)
    a504:	30800017 	ldw	r2,0(r6)
    a508:	10c00044 	addi	r3,r2,1
    a50c:	30c00015 	stw	r3,0(r6)
    a510:	10800003 	ldbu	r2,0(r2)
    a514:	dfc00317 	ldw	ra,12(sp)
    a518:	dc000217 	ldw	r16,8(sp)
    a51c:	dec00404 	addi	sp,sp,16
    a520:	f800283a 	ret
    a524:	30c00617 	ldw	r3,24(r6)
    a528:	10c00616 	blt	r2,r3,a544 <_putc_r+0x74>
    a52c:	30800017 	ldw	r2,0(r6)
    a530:	00c00284 	movi	r3,10
    a534:	11400005 	stb	r5,0(r2)
    a538:	30800017 	ldw	r2,0(r6)
    a53c:	11400003 	ldbu	r5,0(r2)
    a540:	28fff11e 	bne	r5,r3,a508 <__alt_data_end+0xfc00a508>
    a544:	8009883a 	mov	r4,r16
    a548:	dfc00317 	ldw	ra,12(sp)
    a54c:	dc000217 	ldw	r16,8(sp)
    a550:	dec00404 	addi	sp,sp,16
    a554:	000c5741 	jmpi	c574 <__swbuf_r>
    a558:	d9400015 	stw	r5,0(sp)
    a55c:	d9800115 	stw	r6,4(sp)
    a560:	00079f00 	call	79f0 <__sinit>
    a564:	d9800117 	ldw	r6,4(sp)
    a568:	d9400017 	ldw	r5,0(sp)
    a56c:	003fdf06 	br	a4ec <__alt_data_end+0xfc00a4ec>

0000a570 <putc>:
    a570:	00800074 	movhi	r2,1
    a574:	defffc04 	addi	sp,sp,-16
    a578:	109bc904 	addi	r2,r2,28452
    a57c:	dc000115 	stw	r16,4(sp)
    a580:	14000017 	ldw	r16,0(r2)
    a584:	dc400215 	stw	r17,8(sp)
    a588:	dfc00315 	stw	ra,12(sp)
    a58c:	2023883a 	mov	r17,r4
    a590:	80000226 	beq	r16,zero,a59c <putc+0x2c>
    a594:	80800e17 	ldw	r2,56(r16)
    a598:	10001a26 	beq	r2,zero,a604 <putc+0x94>
    a59c:	28800217 	ldw	r2,8(r5)
    a5a0:	10bfffc4 	addi	r2,r2,-1
    a5a4:	28800215 	stw	r2,8(r5)
    a5a8:	10000b16 	blt	r2,zero,a5d8 <putc+0x68>
    a5ac:	28800017 	ldw	r2,0(r5)
    a5b0:	14400005 	stb	r17,0(r2)
    a5b4:	28800017 	ldw	r2,0(r5)
    a5b8:	10c00044 	addi	r3,r2,1
    a5bc:	28c00015 	stw	r3,0(r5)
    a5c0:	10800003 	ldbu	r2,0(r2)
    a5c4:	dfc00317 	ldw	ra,12(sp)
    a5c8:	dc400217 	ldw	r17,8(sp)
    a5cc:	dc000117 	ldw	r16,4(sp)
    a5d0:	dec00404 	addi	sp,sp,16
    a5d4:	f800283a 	ret
    a5d8:	28c00617 	ldw	r3,24(r5)
    a5dc:	10c00e16 	blt	r2,r3,a618 <putc+0xa8>
    a5e0:	28800017 	ldw	r2,0(r5)
    a5e4:	01000284 	movi	r4,10
    a5e8:	14400005 	stb	r17,0(r2)
    a5ec:	28800017 	ldw	r2,0(r5)
    a5f0:	10c00003 	ldbu	r3,0(r2)
    a5f4:	193ff01e 	bne	r3,r4,a5b8 <__alt_data_end+0xfc00a5b8>
    a5f8:	280d883a 	mov	r6,r5
    a5fc:	180b883a 	mov	r5,r3
    a600:	00000706 	br	a620 <putc+0xb0>
    a604:	8009883a 	mov	r4,r16
    a608:	d9400015 	stw	r5,0(sp)
    a60c:	00079f00 	call	79f0 <__sinit>
    a610:	d9400017 	ldw	r5,0(sp)
    a614:	003fe106 	br	a59c <__alt_data_end+0xfc00a59c>
    a618:	280d883a 	mov	r6,r5
    a61c:	880b883a 	mov	r5,r17
    a620:	8009883a 	mov	r4,r16
    a624:	dfc00317 	ldw	ra,12(sp)
    a628:	dc400217 	ldw	r17,8(sp)
    a62c:	dc000117 	ldw	r16,4(sp)
    a630:	dec00404 	addi	sp,sp,16
    a634:	000c5741 	jmpi	c574 <__swbuf_r>

0000a638 <_realloc_r>:
    a638:	defff604 	addi	sp,sp,-40
    a63c:	dc800215 	stw	r18,8(sp)
    a640:	dfc00915 	stw	ra,36(sp)
    a644:	df000815 	stw	fp,32(sp)
    a648:	ddc00715 	stw	r23,28(sp)
    a64c:	dd800615 	stw	r22,24(sp)
    a650:	dd400515 	stw	r21,20(sp)
    a654:	dd000415 	stw	r20,16(sp)
    a658:	dcc00315 	stw	r19,12(sp)
    a65c:	dc400115 	stw	r17,4(sp)
    a660:	dc000015 	stw	r16,0(sp)
    a664:	3025883a 	mov	r18,r6
    a668:	2800b726 	beq	r5,zero,a948 <_realloc_r+0x310>
    a66c:	282b883a 	mov	r21,r5
    a670:	2029883a 	mov	r20,r4
    a674:	00108c00 	call	108c0 <__malloc_lock>
    a678:	a8bfff17 	ldw	r2,-4(r21)
    a67c:	043fff04 	movi	r16,-4
    a680:	90c002c4 	addi	r3,r18,11
    a684:	01000584 	movi	r4,22
    a688:	acfffe04 	addi	r19,r21,-8
    a68c:	1420703a 	and	r16,r2,r16
    a690:	20c0332e 	bgeu	r4,r3,a760 <_realloc_r+0x128>
    a694:	047ffe04 	movi	r17,-8
    a698:	1c62703a 	and	r17,r3,r17
    a69c:	8807883a 	mov	r3,r17
    a6a0:	88005816 	blt	r17,zero,a804 <_realloc_r+0x1cc>
    a6a4:	8c805736 	bltu	r17,r18,a804 <_realloc_r+0x1cc>
    a6a8:	80c0300e 	bge	r16,r3,a76c <_realloc_r+0x134>
    a6ac:	07000074 	movhi	fp,1
    a6b0:	e7163204 	addi	fp,fp,22728
    a6b4:	e1c00217 	ldw	r7,8(fp)
    a6b8:	9c09883a 	add	r4,r19,r16
    a6bc:	22000117 	ldw	r8,4(r4)
    a6c0:	21c06326 	beq	r4,r7,a850 <_realloc_r+0x218>
    a6c4:	017fff84 	movi	r5,-2
    a6c8:	414a703a 	and	r5,r8,r5
    a6cc:	214b883a 	add	r5,r4,r5
    a6d0:	29800117 	ldw	r6,4(r5)
    a6d4:	3180004c 	andi	r6,r6,1
    a6d8:	30003f26 	beq	r6,zero,a7d8 <_realloc_r+0x1a0>
    a6dc:	1080004c 	andi	r2,r2,1
    a6e0:	10008326 	beq	r2,zero,a8f0 <_realloc_r+0x2b8>
    a6e4:	900b883a 	mov	r5,r18
    a6e8:	a009883a 	mov	r4,r20
    a6ec:	000875c0 	call	875c <_malloc_r>
    a6f0:	1025883a 	mov	r18,r2
    a6f4:	10011e26 	beq	r2,zero,ab70 <_realloc_r+0x538>
    a6f8:	a93fff17 	ldw	r4,-4(r21)
    a6fc:	10fffe04 	addi	r3,r2,-8
    a700:	00bfff84 	movi	r2,-2
    a704:	2084703a 	and	r2,r4,r2
    a708:	9885883a 	add	r2,r19,r2
    a70c:	1880ee26 	beq	r3,r2,aac8 <_realloc_r+0x490>
    a710:	81bfff04 	addi	r6,r16,-4
    a714:	00800904 	movi	r2,36
    a718:	1180b836 	bltu	r2,r6,a9fc <_realloc_r+0x3c4>
    a71c:	00c004c4 	movi	r3,19
    a720:	19809636 	bltu	r3,r6,a97c <_realloc_r+0x344>
    a724:	9005883a 	mov	r2,r18
    a728:	a807883a 	mov	r3,r21
    a72c:	19000017 	ldw	r4,0(r3)
    a730:	11000015 	stw	r4,0(r2)
    a734:	19000117 	ldw	r4,4(r3)
    a738:	11000115 	stw	r4,4(r2)
    a73c:	18c00217 	ldw	r3,8(r3)
    a740:	10c00215 	stw	r3,8(r2)
    a744:	a80b883a 	mov	r5,r21
    a748:	a009883a 	mov	r4,r20
    a74c:	0007b640 	call	7b64 <_free_r>
    a750:	a009883a 	mov	r4,r20
    a754:	00108e40 	call	108e4 <__malloc_unlock>
    a758:	9005883a 	mov	r2,r18
    a75c:	00001206 	br	a7a8 <_realloc_r+0x170>
    a760:	00c00404 	movi	r3,16
    a764:	1823883a 	mov	r17,r3
    a768:	003fce06 	br	a6a4 <__alt_data_end+0xfc00a6a4>
    a76c:	a825883a 	mov	r18,r21
    a770:	8445c83a 	sub	r2,r16,r17
    a774:	00c003c4 	movi	r3,15
    a778:	18802636 	bltu	r3,r2,a814 <_realloc_r+0x1dc>
    a77c:	99800117 	ldw	r6,4(r19)
    a780:	9c07883a 	add	r3,r19,r16
    a784:	3180004c 	andi	r6,r6,1
    a788:	3420b03a 	or	r16,r6,r16
    a78c:	9c000115 	stw	r16,4(r19)
    a790:	18800117 	ldw	r2,4(r3)
    a794:	10800054 	ori	r2,r2,1
    a798:	18800115 	stw	r2,4(r3)
    a79c:	a009883a 	mov	r4,r20
    a7a0:	00108e40 	call	108e4 <__malloc_unlock>
    a7a4:	9005883a 	mov	r2,r18
    a7a8:	dfc00917 	ldw	ra,36(sp)
    a7ac:	df000817 	ldw	fp,32(sp)
    a7b0:	ddc00717 	ldw	r23,28(sp)
    a7b4:	dd800617 	ldw	r22,24(sp)
    a7b8:	dd400517 	ldw	r21,20(sp)
    a7bc:	dd000417 	ldw	r20,16(sp)
    a7c0:	dcc00317 	ldw	r19,12(sp)
    a7c4:	dc800217 	ldw	r18,8(sp)
    a7c8:	dc400117 	ldw	r17,4(sp)
    a7cc:	dc000017 	ldw	r16,0(sp)
    a7d0:	dec00a04 	addi	sp,sp,40
    a7d4:	f800283a 	ret
    a7d8:	017fff04 	movi	r5,-4
    a7dc:	414a703a 	and	r5,r8,r5
    a7e0:	814d883a 	add	r6,r16,r5
    a7e4:	30c01f16 	blt	r6,r3,a864 <_realloc_r+0x22c>
    a7e8:	20800317 	ldw	r2,12(r4)
    a7ec:	20c00217 	ldw	r3,8(r4)
    a7f0:	a825883a 	mov	r18,r21
    a7f4:	3021883a 	mov	r16,r6
    a7f8:	18800315 	stw	r2,12(r3)
    a7fc:	10c00215 	stw	r3,8(r2)
    a800:	003fdb06 	br	a770 <__alt_data_end+0xfc00a770>
    a804:	00800304 	movi	r2,12
    a808:	a0800015 	stw	r2,0(r20)
    a80c:	0005883a 	mov	r2,zero
    a810:	003fe506 	br	a7a8 <__alt_data_end+0xfc00a7a8>
    a814:	98c00117 	ldw	r3,4(r19)
    a818:	9c4b883a 	add	r5,r19,r17
    a81c:	11000054 	ori	r4,r2,1
    a820:	18c0004c 	andi	r3,r3,1
    a824:	1c62b03a 	or	r17,r3,r17
    a828:	9c400115 	stw	r17,4(r19)
    a82c:	29000115 	stw	r4,4(r5)
    a830:	2885883a 	add	r2,r5,r2
    a834:	10c00117 	ldw	r3,4(r2)
    a838:	29400204 	addi	r5,r5,8
    a83c:	a009883a 	mov	r4,r20
    a840:	18c00054 	ori	r3,r3,1
    a844:	10c00115 	stw	r3,4(r2)
    a848:	0007b640 	call	7b64 <_free_r>
    a84c:	003fd306 	br	a79c <__alt_data_end+0xfc00a79c>
    a850:	017fff04 	movi	r5,-4
    a854:	414a703a 	and	r5,r8,r5
    a858:	89800404 	addi	r6,r17,16
    a85c:	8151883a 	add	r8,r16,r5
    a860:	4180590e 	bge	r8,r6,a9c8 <_realloc_r+0x390>
    a864:	1080004c 	andi	r2,r2,1
    a868:	103f9e1e 	bne	r2,zero,a6e4 <__alt_data_end+0xfc00a6e4>
    a86c:	adbffe17 	ldw	r22,-8(r21)
    a870:	00bfff04 	movi	r2,-4
    a874:	9dadc83a 	sub	r22,r19,r22
    a878:	b1800117 	ldw	r6,4(r22)
    a87c:	3084703a 	and	r2,r6,r2
    a880:	20002026 	beq	r4,zero,a904 <_realloc_r+0x2cc>
    a884:	80af883a 	add	r23,r16,r2
    a888:	b96f883a 	add	r23,r23,r5
    a88c:	21c05f26 	beq	r4,r7,aa0c <_realloc_r+0x3d4>
    a890:	b8c01c16 	blt	r23,r3,a904 <_realloc_r+0x2cc>
    a894:	20800317 	ldw	r2,12(r4)
    a898:	20c00217 	ldw	r3,8(r4)
    a89c:	81bfff04 	addi	r6,r16,-4
    a8a0:	01000904 	movi	r4,36
    a8a4:	18800315 	stw	r2,12(r3)
    a8a8:	10c00215 	stw	r3,8(r2)
    a8ac:	b0c00217 	ldw	r3,8(r22)
    a8b0:	b0800317 	ldw	r2,12(r22)
    a8b4:	b4800204 	addi	r18,r22,8
    a8b8:	18800315 	stw	r2,12(r3)
    a8bc:	10c00215 	stw	r3,8(r2)
    a8c0:	21801b36 	bltu	r4,r6,a930 <_realloc_r+0x2f8>
    a8c4:	008004c4 	movi	r2,19
    a8c8:	1180352e 	bgeu	r2,r6,a9a0 <_realloc_r+0x368>
    a8cc:	a8800017 	ldw	r2,0(r21)
    a8d0:	b0800215 	stw	r2,8(r22)
    a8d4:	a8800117 	ldw	r2,4(r21)
    a8d8:	b0800315 	stw	r2,12(r22)
    a8dc:	008006c4 	movi	r2,27
    a8e0:	11807f36 	bltu	r2,r6,aae0 <_realloc_r+0x4a8>
    a8e4:	b0800404 	addi	r2,r22,16
    a8e8:	ad400204 	addi	r21,r21,8
    a8ec:	00002d06 	br	a9a4 <_realloc_r+0x36c>
    a8f0:	adbffe17 	ldw	r22,-8(r21)
    a8f4:	00bfff04 	movi	r2,-4
    a8f8:	9dadc83a 	sub	r22,r19,r22
    a8fc:	b1000117 	ldw	r4,4(r22)
    a900:	2084703a 	and	r2,r4,r2
    a904:	b03f7726 	beq	r22,zero,a6e4 <__alt_data_end+0xfc00a6e4>
    a908:	80af883a 	add	r23,r16,r2
    a90c:	b8ff7516 	blt	r23,r3,a6e4 <__alt_data_end+0xfc00a6e4>
    a910:	b0800317 	ldw	r2,12(r22)
    a914:	b0c00217 	ldw	r3,8(r22)
    a918:	81bfff04 	addi	r6,r16,-4
    a91c:	01000904 	movi	r4,36
    a920:	18800315 	stw	r2,12(r3)
    a924:	10c00215 	stw	r3,8(r2)
    a928:	b4800204 	addi	r18,r22,8
    a92c:	21bfe52e 	bgeu	r4,r6,a8c4 <__alt_data_end+0xfc00a8c4>
    a930:	a80b883a 	mov	r5,r21
    a934:	9009883a 	mov	r4,r18
    a938:	00091940 	call	9194 <memmove>
    a93c:	b821883a 	mov	r16,r23
    a940:	b027883a 	mov	r19,r22
    a944:	003f8a06 	br	a770 <__alt_data_end+0xfc00a770>
    a948:	300b883a 	mov	r5,r6
    a94c:	dfc00917 	ldw	ra,36(sp)
    a950:	df000817 	ldw	fp,32(sp)
    a954:	ddc00717 	ldw	r23,28(sp)
    a958:	dd800617 	ldw	r22,24(sp)
    a95c:	dd400517 	ldw	r21,20(sp)
    a960:	dd000417 	ldw	r20,16(sp)
    a964:	dcc00317 	ldw	r19,12(sp)
    a968:	dc800217 	ldw	r18,8(sp)
    a96c:	dc400117 	ldw	r17,4(sp)
    a970:	dc000017 	ldw	r16,0(sp)
    a974:	dec00a04 	addi	sp,sp,40
    a978:	000875c1 	jmpi	875c <_malloc_r>
    a97c:	a8c00017 	ldw	r3,0(r21)
    a980:	90c00015 	stw	r3,0(r18)
    a984:	a8c00117 	ldw	r3,4(r21)
    a988:	90c00115 	stw	r3,4(r18)
    a98c:	00c006c4 	movi	r3,27
    a990:	19804536 	bltu	r3,r6,aaa8 <_realloc_r+0x470>
    a994:	90800204 	addi	r2,r18,8
    a998:	a8c00204 	addi	r3,r21,8
    a99c:	003f6306 	br	a72c <__alt_data_end+0xfc00a72c>
    a9a0:	9005883a 	mov	r2,r18
    a9a4:	a8c00017 	ldw	r3,0(r21)
    a9a8:	b821883a 	mov	r16,r23
    a9ac:	b027883a 	mov	r19,r22
    a9b0:	10c00015 	stw	r3,0(r2)
    a9b4:	a8c00117 	ldw	r3,4(r21)
    a9b8:	10c00115 	stw	r3,4(r2)
    a9bc:	a8c00217 	ldw	r3,8(r21)
    a9c0:	10c00215 	stw	r3,8(r2)
    a9c4:	003f6a06 	br	a770 <__alt_data_end+0xfc00a770>
    a9c8:	9c67883a 	add	r19,r19,r17
    a9cc:	4445c83a 	sub	r2,r8,r17
    a9d0:	e4c00215 	stw	r19,8(fp)
    a9d4:	10800054 	ori	r2,r2,1
    a9d8:	98800115 	stw	r2,4(r19)
    a9dc:	a8bfff17 	ldw	r2,-4(r21)
    a9e0:	a009883a 	mov	r4,r20
    a9e4:	1080004c 	andi	r2,r2,1
    a9e8:	1462b03a 	or	r17,r2,r17
    a9ec:	ac7fff15 	stw	r17,-4(r21)
    a9f0:	00108e40 	call	108e4 <__malloc_unlock>
    a9f4:	a805883a 	mov	r2,r21
    a9f8:	003f6b06 	br	a7a8 <__alt_data_end+0xfc00a7a8>
    a9fc:	a80b883a 	mov	r5,r21
    aa00:	9009883a 	mov	r4,r18
    aa04:	00091940 	call	9194 <memmove>
    aa08:	003f4e06 	br	a744 <__alt_data_end+0xfc00a744>
    aa0c:	89000404 	addi	r4,r17,16
    aa10:	b93fbc16 	blt	r23,r4,a904 <__alt_data_end+0xfc00a904>
    aa14:	b0800317 	ldw	r2,12(r22)
    aa18:	b0c00217 	ldw	r3,8(r22)
    aa1c:	81bfff04 	addi	r6,r16,-4
    aa20:	01000904 	movi	r4,36
    aa24:	18800315 	stw	r2,12(r3)
    aa28:	10c00215 	stw	r3,8(r2)
    aa2c:	b4800204 	addi	r18,r22,8
    aa30:	21804336 	bltu	r4,r6,ab40 <_realloc_r+0x508>
    aa34:	008004c4 	movi	r2,19
    aa38:	11803f2e 	bgeu	r2,r6,ab38 <_realloc_r+0x500>
    aa3c:	a8800017 	ldw	r2,0(r21)
    aa40:	b0800215 	stw	r2,8(r22)
    aa44:	a8800117 	ldw	r2,4(r21)
    aa48:	b0800315 	stw	r2,12(r22)
    aa4c:	008006c4 	movi	r2,27
    aa50:	11803f36 	bltu	r2,r6,ab50 <_realloc_r+0x518>
    aa54:	b0800404 	addi	r2,r22,16
    aa58:	ad400204 	addi	r21,r21,8
    aa5c:	a8c00017 	ldw	r3,0(r21)
    aa60:	10c00015 	stw	r3,0(r2)
    aa64:	a8c00117 	ldw	r3,4(r21)
    aa68:	10c00115 	stw	r3,4(r2)
    aa6c:	a8c00217 	ldw	r3,8(r21)
    aa70:	10c00215 	stw	r3,8(r2)
    aa74:	b447883a 	add	r3,r22,r17
    aa78:	bc45c83a 	sub	r2,r23,r17
    aa7c:	e0c00215 	stw	r3,8(fp)
    aa80:	10800054 	ori	r2,r2,1
    aa84:	18800115 	stw	r2,4(r3)
    aa88:	b0800117 	ldw	r2,4(r22)
    aa8c:	a009883a 	mov	r4,r20
    aa90:	1080004c 	andi	r2,r2,1
    aa94:	1462b03a 	or	r17,r2,r17
    aa98:	b4400115 	stw	r17,4(r22)
    aa9c:	00108e40 	call	108e4 <__malloc_unlock>
    aaa0:	9005883a 	mov	r2,r18
    aaa4:	003f4006 	br	a7a8 <__alt_data_end+0xfc00a7a8>
    aaa8:	a8c00217 	ldw	r3,8(r21)
    aaac:	90c00215 	stw	r3,8(r18)
    aab0:	a8c00317 	ldw	r3,12(r21)
    aab4:	90c00315 	stw	r3,12(r18)
    aab8:	30801126 	beq	r6,r2,ab00 <_realloc_r+0x4c8>
    aabc:	90800404 	addi	r2,r18,16
    aac0:	a8c00404 	addi	r3,r21,16
    aac4:	003f1906 	br	a72c <__alt_data_end+0xfc00a72c>
    aac8:	90ffff17 	ldw	r3,-4(r18)
    aacc:	00bfff04 	movi	r2,-4
    aad0:	a825883a 	mov	r18,r21
    aad4:	1884703a 	and	r2,r3,r2
    aad8:	80a1883a 	add	r16,r16,r2
    aadc:	003f2406 	br	a770 <__alt_data_end+0xfc00a770>
    aae0:	a8800217 	ldw	r2,8(r21)
    aae4:	b0800415 	stw	r2,16(r22)
    aae8:	a8800317 	ldw	r2,12(r21)
    aaec:	b0800515 	stw	r2,20(r22)
    aaf0:	31000a26 	beq	r6,r4,ab1c <_realloc_r+0x4e4>
    aaf4:	b0800604 	addi	r2,r22,24
    aaf8:	ad400404 	addi	r21,r21,16
    aafc:	003fa906 	br	a9a4 <__alt_data_end+0xfc00a9a4>
    ab00:	a9000417 	ldw	r4,16(r21)
    ab04:	90800604 	addi	r2,r18,24
    ab08:	a8c00604 	addi	r3,r21,24
    ab0c:	91000415 	stw	r4,16(r18)
    ab10:	a9000517 	ldw	r4,20(r21)
    ab14:	91000515 	stw	r4,20(r18)
    ab18:	003f0406 	br	a72c <__alt_data_end+0xfc00a72c>
    ab1c:	a8c00417 	ldw	r3,16(r21)
    ab20:	ad400604 	addi	r21,r21,24
    ab24:	b0800804 	addi	r2,r22,32
    ab28:	b0c00615 	stw	r3,24(r22)
    ab2c:	a8ffff17 	ldw	r3,-4(r21)
    ab30:	b0c00715 	stw	r3,28(r22)
    ab34:	003f9b06 	br	a9a4 <__alt_data_end+0xfc00a9a4>
    ab38:	9005883a 	mov	r2,r18
    ab3c:	003fc706 	br	aa5c <__alt_data_end+0xfc00aa5c>
    ab40:	a80b883a 	mov	r5,r21
    ab44:	9009883a 	mov	r4,r18
    ab48:	00091940 	call	9194 <memmove>
    ab4c:	003fc906 	br	aa74 <__alt_data_end+0xfc00aa74>
    ab50:	a8800217 	ldw	r2,8(r21)
    ab54:	b0800415 	stw	r2,16(r22)
    ab58:	a8800317 	ldw	r2,12(r21)
    ab5c:	b0800515 	stw	r2,20(r22)
    ab60:	31000726 	beq	r6,r4,ab80 <_realloc_r+0x548>
    ab64:	b0800604 	addi	r2,r22,24
    ab68:	ad400404 	addi	r21,r21,16
    ab6c:	003fbb06 	br	aa5c <__alt_data_end+0xfc00aa5c>
    ab70:	a009883a 	mov	r4,r20
    ab74:	00108e40 	call	108e4 <__malloc_unlock>
    ab78:	0005883a 	mov	r2,zero
    ab7c:	003f0a06 	br	a7a8 <__alt_data_end+0xfc00a7a8>
    ab80:	a8c00417 	ldw	r3,16(r21)
    ab84:	ad400604 	addi	r21,r21,24
    ab88:	b0800804 	addi	r2,r22,32
    ab8c:	b0c00615 	stw	r3,24(r22)
    ab90:	a8ffff17 	ldw	r3,-4(r21)
    ab94:	b0c00715 	stw	r3,28(r22)
    ab98:	003fb006 	br	aa5c <__alt_data_end+0xfc00aa5c>

0000ab9c <__fpclassifyd>:
    ab9c:	00a00034 	movhi	r2,32768
    aba0:	10bfffc4 	addi	r2,r2,-1
    aba4:	2884703a 	and	r2,r5,r2
    aba8:	10000726 	beq	r2,zero,abc8 <__fpclassifyd+0x2c>
    abac:	00fffc34 	movhi	r3,65520
    abb0:	019ff834 	movhi	r6,32736
    abb4:	28c7883a 	add	r3,r5,r3
    abb8:	31bfffc4 	addi	r6,r6,-1
    abbc:	30c00536 	bltu	r6,r3,abd4 <__fpclassifyd+0x38>
    abc0:	00800104 	movi	r2,4
    abc4:	f800283a 	ret
    abc8:	2000021e 	bne	r4,zero,abd4 <__fpclassifyd+0x38>
    abcc:	00800084 	movi	r2,2
    abd0:	f800283a 	ret
    abd4:	00dffc34 	movhi	r3,32752
    abd8:	019ff834 	movhi	r6,32736
    abdc:	28cb883a 	add	r5,r5,r3
    abe0:	31bfffc4 	addi	r6,r6,-1
    abe4:	317ff62e 	bgeu	r6,r5,abc0 <__alt_data_end+0xfc00abc0>
    abe8:	01400434 	movhi	r5,16
    abec:	297fffc4 	addi	r5,r5,-1
    abf0:	28800236 	bltu	r5,r2,abfc <__fpclassifyd+0x60>
    abf4:	008000c4 	movi	r2,3
    abf8:	f800283a 	ret
    abfc:	10c00226 	beq	r2,r3,ac08 <__fpclassifyd+0x6c>
    ac00:	0005883a 	mov	r2,zero
    ac04:	f800283a 	ret
    ac08:	2005003a 	cmpeq	r2,r4,zero
    ac0c:	f800283a 	ret

0000ac10 <_sbrk_r>:
    ac10:	defffd04 	addi	sp,sp,-12
    ac14:	dc000015 	stw	r16,0(sp)
    ac18:	040000b4 	movhi	r16,2
    ac1c:	dc400115 	stw	r17,4(sp)
    ac20:	8422c104 	addi	r16,r16,-29948
    ac24:	2023883a 	mov	r17,r4
    ac28:	2809883a 	mov	r4,r5
    ac2c:	dfc00215 	stw	ra,8(sp)
    ac30:	80000015 	stw	zero,0(r16)
    ac34:	0010acc0 	call	10acc <sbrk>
    ac38:	00ffffc4 	movi	r3,-1
    ac3c:	10c00526 	beq	r2,r3,ac54 <_sbrk_r+0x44>
    ac40:	dfc00217 	ldw	ra,8(sp)
    ac44:	dc400117 	ldw	r17,4(sp)
    ac48:	dc000017 	ldw	r16,0(sp)
    ac4c:	dec00304 	addi	sp,sp,12
    ac50:	f800283a 	ret
    ac54:	80c00017 	ldw	r3,0(r16)
    ac58:	183ff926 	beq	r3,zero,ac40 <__alt_data_end+0xfc00ac40>
    ac5c:	88c00015 	stw	r3,0(r17)
    ac60:	003ff706 	br	ac40 <__alt_data_end+0xfc00ac40>

0000ac64 <__sread>:
    ac64:	defffe04 	addi	sp,sp,-8
    ac68:	dc000015 	stw	r16,0(sp)
    ac6c:	2821883a 	mov	r16,r5
    ac70:	2940038f 	ldh	r5,14(r5)
    ac74:	dfc00115 	stw	ra,4(sp)
    ac78:	000cc780 	call	cc78 <_read_r>
    ac7c:	10000716 	blt	r2,zero,ac9c <__sread+0x38>
    ac80:	80c01417 	ldw	r3,80(r16)
    ac84:	1887883a 	add	r3,r3,r2
    ac88:	80c01415 	stw	r3,80(r16)
    ac8c:	dfc00117 	ldw	ra,4(sp)
    ac90:	dc000017 	ldw	r16,0(sp)
    ac94:	dec00204 	addi	sp,sp,8
    ac98:	f800283a 	ret
    ac9c:	80c0030b 	ldhu	r3,12(r16)
    aca0:	18fbffcc 	andi	r3,r3,61439
    aca4:	80c0030d 	sth	r3,12(r16)
    aca8:	dfc00117 	ldw	ra,4(sp)
    acac:	dc000017 	ldw	r16,0(sp)
    acb0:	dec00204 	addi	sp,sp,8
    acb4:	f800283a 	ret

0000acb8 <__seofread>:
    acb8:	0005883a 	mov	r2,zero
    acbc:	f800283a 	ret

0000acc0 <__swrite>:
    acc0:	2880030b 	ldhu	r2,12(r5)
    acc4:	defffb04 	addi	sp,sp,-20
    acc8:	dcc00315 	stw	r19,12(sp)
    accc:	dc800215 	stw	r18,8(sp)
    acd0:	dc400115 	stw	r17,4(sp)
    acd4:	dc000015 	stw	r16,0(sp)
    acd8:	dfc00415 	stw	ra,16(sp)
    acdc:	10c0400c 	andi	r3,r2,256
    ace0:	2821883a 	mov	r16,r5
    ace4:	2023883a 	mov	r17,r4
    ace8:	3025883a 	mov	r18,r6
    acec:	3827883a 	mov	r19,r7
    acf0:	18000526 	beq	r3,zero,ad08 <__swrite+0x48>
    acf4:	2940038f 	ldh	r5,14(r5)
    acf8:	01c00084 	movi	r7,2
    acfc:	000d883a 	mov	r6,zero
    ad00:	000cc180 	call	cc18 <_lseek_r>
    ad04:	8080030b 	ldhu	r2,12(r16)
    ad08:	8140038f 	ldh	r5,14(r16)
    ad0c:	10bbffcc 	andi	r2,r2,61439
    ad10:	980f883a 	mov	r7,r19
    ad14:	900d883a 	mov	r6,r18
    ad18:	8809883a 	mov	r4,r17
    ad1c:	8080030d 	sth	r2,12(r16)
    ad20:	dfc00417 	ldw	ra,16(sp)
    ad24:	dcc00317 	ldw	r19,12(sp)
    ad28:	dc800217 	ldw	r18,8(sp)
    ad2c:	dc400117 	ldw	r17,4(sp)
    ad30:	dc000017 	ldw	r16,0(sp)
    ad34:	dec00504 	addi	sp,sp,20
    ad38:	000c6cc1 	jmpi	c6cc <_write_r>

0000ad3c <__sseek>:
    ad3c:	defffe04 	addi	sp,sp,-8
    ad40:	dc000015 	stw	r16,0(sp)
    ad44:	2821883a 	mov	r16,r5
    ad48:	2940038f 	ldh	r5,14(r5)
    ad4c:	dfc00115 	stw	ra,4(sp)
    ad50:	000cc180 	call	cc18 <_lseek_r>
    ad54:	00ffffc4 	movi	r3,-1
    ad58:	10c00826 	beq	r2,r3,ad7c <__sseek+0x40>
    ad5c:	80c0030b 	ldhu	r3,12(r16)
    ad60:	80801415 	stw	r2,80(r16)
    ad64:	18c40014 	ori	r3,r3,4096
    ad68:	80c0030d 	sth	r3,12(r16)
    ad6c:	dfc00117 	ldw	ra,4(sp)
    ad70:	dc000017 	ldw	r16,0(sp)
    ad74:	dec00204 	addi	sp,sp,8
    ad78:	f800283a 	ret
    ad7c:	80c0030b 	ldhu	r3,12(r16)
    ad80:	18fbffcc 	andi	r3,r3,61439
    ad84:	80c0030d 	sth	r3,12(r16)
    ad88:	dfc00117 	ldw	ra,4(sp)
    ad8c:	dc000017 	ldw	r16,0(sp)
    ad90:	dec00204 	addi	sp,sp,8
    ad94:	f800283a 	ret

0000ad98 <__sclose>:
    ad98:	2940038f 	ldh	r5,14(r5)
    ad9c:	000c72c1 	jmpi	c72c <_close_r>

0000ada0 <strcmp>:
    ada0:	2144b03a 	or	r2,r4,r5
    ada4:	108000cc 	andi	r2,r2,3
    ada8:	1000171e 	bne	r2,zero,ae08 <strcmp+0x68>
    adac:	20800017 	ldw	r2,0(r4)
    adb0:	28c00017 	ldw	r3,0(r5)
    adb4:	10c0141e 	bne	r2,r3,ae08 <strcmp+0x68>
    adb8:	027fbff4 	movhi	r9,65279
    adbc:	4a7fbfc4 	addi	r9,r9,-257
    adc0:	0086303a 	nor	r3,zero,r2
    adc4:	02202074 	movhi	r8,32897
    adc8:	1245883a 	add	r2,r2,r9
    adcc:	42202004 	addi	r8,r8,-32640
    add0:	10c4703a 	and	r2,r2,r3
    add4:	1204703a 	and	r2,r2,r8
    add8:	10000226 	beq	r2,zero,ade4 <strcmp+0x44>
    addc:	00002306 	br	ae6c <strcmp+0xcc>
    ade0:	1000221e 	bne	r2,zero,ae6c <strcmp+0xcc>
    ade4:	21000104 	addi	r4,r4,4
    ade8:	20c00017 	ldw	r3,0(r4)
    adec:	29400104 	addi	r5,r5,4
    adf0:	29800017 	ldw	r6,0(r5)
    adf4:	1a4f883a 	add	r7,r3,r9
    adf8:	00c4303a 	nor	r2,zero,r3
    adfc:	3884703a 	and	r2,r7,r2
    ae00:	1204703a 	and	r2,r2,r8
    ae04:	19bff626 	beq	r3,r6,ade0 <__alt_data_end+0xfc00ade0>
    ae08:	20800003 	ldbu	r2,0(r4)
    ae0c:	10c03fcc 	andi	r3,r2,255
    ae10:	18c0201c 	xori	r3,r3,128
    ae14:	18ffe004 	addi	r3,r3,-128
    ae18:	18000c26 	beq	r3,zero,ae4c <strcmp+0xac>
    ae1c:	29800007 	ldb	r6,0(r5)
    ae20:	19800326 	beq	r3,r6,ae30 <strcmp+0x90>
    ae24:	00001306 	br	ae74 <strcmp+0xd4>
    ae28:	29800007 	ldb	r6,0(r5)
    ae2c:	11800b1e 	bne	r2,r6,ae5c <strcmp+0xbc>
    ae30:	21000044 	addi	r4,r4,1
    ae34:	20c00003 	ldbu	r3,0(r4)
    ae38:	29400044 	addi	r5,r5,1
    ae3c:	18803fcc 	andi	r2,r3,255
    ae40:	1080201c 	xori	r2,r2,128
    ae44:	10bfe004 	addi	r2,r2,-128
    ae48:	103ff71e 	bne	r2,zero,ae28 <__alt_data_end+0xfc00ae28>
    ae4c:	0007883a 	mov	r3,zero
    ae50:	28800003 	ldbu	r2,0(r5)
    ae54:	1885c83a 	sub	r2,r3,r2
    ae58:	f800283a 	ret
    ae5c:	28800003 	ldbu	r2,0(r5)
    ae60:	18c03fcc 	andi	r3,r3,255
    ae64:	1885c83a 	sub	r2,r3,r2
    ae68:	f800283a 	ret
    ae6c:	0005883a 	mov	r2,zero
    ae70:	f800283a 	ret
    ae74:	10c03fcc 	andi	r3,r2,255
    ae78:	003ff506 	br	ae50 <__alt_data_end+0xfc00ae50>

0000ae7c <__sprint_r.part.0>:
    ae7c:	28801917 	ldw	r2,100(r5)
    ae80:	defff604 	addi	sp,sp,-40
    ae84:	dd400515 	stw	r21,20(sp)
    ae88:	dfc00915 	stw	ra,36(sp)
    ae8c:	df000815 	stw	fp,32(sp)
    ae90:	ddc00715 	stw	r23,28(sp)
    ae94:	dd800615 	stw	r22,24(sp)
    ae98:	dd000415 	stw	r20,16(sp)
    ae9c:	dcc00315 	stw	r19,12(sp)
    aea0:	dc800215 	stw	r18,8(sp)
    aea4:	dc400115 	stw	r17,4(sp)
    aea8:	dc000015 	stw	r16,0(sp)
    aeac:	1088000c 	andi	r2,r2,8192
    aeb0:	302b883a 	mov	r21,r6
    aeb4:	10002e26 	beq	r2,zero,af70 <__sprint_r.part.0+0xf4>
    aeb8:	30800217 	ldw	r2,8(r6)
    aebc:	35800017 	ldw	r22,0(r6)
    aec0:	10002926 	beq	r2,zero,af68 <__sprint_r.part.0+0xec>
    aec4:	2827883a 	mov	r19,r5
    aec8:	2029883a 	mov	r20,r4
    aecc:	b5c00104 	addi	r23,r22,4
    aed0:	04bfffc4 	movi	r18,-1
    aed4:	bc400017 	ldw	r17,0(r23)
    aed8:	b4000017 	ldw	r16,0(r22)
    aedc:	0039883a 	mov	fp,zero
    aee0:	8822d0ba 	srli	r17,r17,2
    aee4:	8800031e 	bne	r17,zero,aef4 <__sprint_r.part.0+0x78>
    aee8:	00001806 	br	af4c <__sprint_r.part.0+0xd0>
    aeec:	84000104 	addi	r16,r16,4
    aef0:	8f001526 	beq	r17,fp,af48 <__sprint_r.part.0+0xcc>
    aef4:	81400017 	ldw	r5,0(r16)
    aef8:	980d883a 	mov	r6,r19
    aefc:	a009883a 	mov	r4,r20
    af00:	000cac40 	call	cac4 <_fputwc_r>
    af04:	e7000044 	addi	fp,fp,1
    af08:	14bff81e 	bne	r2,r18,aeec <__alt_data_end+0xfc00aeec>
    af0c:	9005883a 	mov	r2,r18
    af10:	a8000215 	stw	zero,8(r21)
    af14:	a8000115 	stw	zero,4(r21)
    af18:	dfc00917 	ldw	ra,36(sp)
    af1c:	df000817 	ldw	fp,32(sp)
    af20:	ddc00717 	ldw	r23,28(sp)
    af24:	dd800617 	ldw	r22,24(sp)
    af28:	dd400517 	ldw	r21,20(sp)
    af2c:	dd000417 	ldw	r20,16(sp)
    af30:	dcc00317 	ldw	r19,12(sp)
    af34:	dc800217 	ldw	r18,8(sp)
    af38:	dc400117 	ldw	r17,4(sp)
    af3c:	dc000017 	ldw	r16,0(sp)
    af40:	dec00a04 	addi	sp,sp,40
    af44:	f800283a 	ret
    af48:	a8800217 	ldw	r2,8(r21)
    af4c:	8c63883a 	add	r17,r17,r17
    af50:	8c63883a 	add	r17,r17,r17
    af54:	1445c83a 	sub	r2,r2,r17
    af58:	a8800215 	stw	r2,8(r21)
    af5c:	b5800204 	addi	r22,r22,8
    af60:	bdc00204 	addi	r23,r23,8
    af64:	103fdb1e 	bne	r2,zero,aed4 <__alt_data_end+0xfc00aed4>
    af68:	0005883a 	mov	r2,zero
    af6c:	003fe806 	br	af10 <__alt_data_end+0xfc00af10>
    af70:	0007e740 	call	7e74 <__sfvwrite_r>
    af74:	003fe606 	br	af10 <__alt_data_end+0xfc00af10>

0000af78 <__sprint_r>:
    af78:	30c00217 	ldw	r3,8(r6)
    af7c:	18000126 	beq	r3,zero,af84 <__sprint_r+0xc>
    af80:	000ae7c1 	jmpi	ae7c <__sprint_r.part.0>
    af84:	30000115 	stw	zero,4(r6)
    af88:	0005883a 	mov	r2,zero
    af8c:	f800283a 	ret

0000af90 <___vfiprintf_internal_r>:
    af90:	deffca04 	addi	sp,sp,-216
    af94:	dd403115 	stw	r21,196(sp)
    af98:	dfc03515 	stw	ra,212(sp)
    af9c:	df003415 	stw	fp,208(sp)
    afa0:	ddc03315 	stw	r23,204(sp)
    afa4:	dd803215 	stw	r22,200(sp)
    afa8:	dd003015 	stw	r20,192(sp)
    afac:	dcc02f15 	stw	r19,188(sp)
    afb0:	dc802e15 	stw	r18,184(sp)
    afb4:	dc402d15 	stw	r17,180(sp)
    afb8:	dc002c15 	stw	r16,176(sp)
    afbc:	d9002115 	stw	r4,132(sp)
    afc0:	d9402015 	stw	r5,128(sp)
    afc4:	d9c02215 	stw	r7,136(sp)
    afc8:	302b883a 	mov	r21,r6
    afcc:	20000226 	beq	r4,zero,afd8 <___vfiprintf_internal_r+0x48>
    afd0:	20800e17 	ldw	r2,56(r4)
    afd4:	1000cf26 	beq	r2,zero,b314 <___vfiprintf_internal_r+0x384>
    afd8:	d8c02017 	ldw	r3,128(sp)
    afdc:	1880030b 	ldhu	r2,12(r3)
    afe0:	10c8000c 	andi	r3,r2,8192
    afe4:	1800071e 	bne	r3,zero,b004 <___vfiprintf_internal_r+0x74>
    afe8:	d9402017 	ldw	r5,128(sp)
    afec:	00f7ffc4 	movi	r3,-8193
    aff0:	10880014 	ori	r2,r2,8192
    aff4:	29001917 	ldw	r4,100(r5)
    aff8:	2880030d 	sth	r2,12(r5)
    affc:	20c6703a 	and	r3,r4,r3
    b000:	28c01915 	stw	r3,100(r5)
    b004:	10c0020c 	andi	r3,r2,8
    b008:	1800a526 	beq	r3,zero,b2a0 <___vfiprintf_internal_r+0x310>
    b00c:	d9002017 	ldw	r4,128(sp)
    b010:	20c00417 	ldw	r3,16(r4)
    b014:	1800a226 	beq	r3,zero,b2a0 <___vfiprintf_internal_r+0x310>
    b018:	1080068c 	andi	r2,r2,26
    b01c:	00c00284 	movi	r3,10
    b020:	10c0a826 	beq	r2,r3,b2c4 <___vfiprintf_internal_r+0x334>
    b024:	d9001a04 	addi	r4,sp,104
    b028:	d94019c4 	addi	r5,sp,103
    b02c:	04800074 	movhi	r18,1
    b030:	2145c83a 	sub	r2,r4,r5
    b034:	94949f04 	addi	r18,r18,21116
    b038:	d9001e15 	stw	r4,120(sp)
    b03c:	d9401f15 	stw	r5,124(sp)
    b040:	dec01a15 	stw	sp,104(sp)
    b044:	d8001c15 	stw	zero,112(sp)
    b048:	d8001b15 	stw	zero,108(sp)
    b04c:	d811883a 	mov	r8,sp
    b050:	d8002615 	stw	zero,152(sp)
    b054:	d8002415 	stw	zero,144(sp)
    b058:	d8802815 	stw	r2,160(sp)
    b05c:	a82d883a 	mov	r22,r21
    b060:	b0800007 	ldb	r2,0(r22)
    b064:	10040d26 	beq	r2,zero,c09c <___vfiprintf_internal_r+0x110c>
    b068:	00c00944 	movi	r3,37
    b06c:	b029883a 	mov	r20,r22
    b070:	10c0021e 	bne	r2,r3,b07c <___vfiprintf_internal_r+0xec>
    b074:	00001606 	br	b0d0 <___vfiprintf_internal_r+0x140>
    b078:	10c00326 	beq	r2,r3,b088 <___vfiprintf_internal_r+0xf8>
    b07c:	a5000044 	addi	r20,r20,1
    b080:	a0800007 	ldb	r2,0(r20)
    b084:	103ffc1e 	bne	r2,zero,b078 <__alt_data_end+0xfc00b078>
    b088:	a5a1c83a 	sub	r16,r20,r22
    b08c:	80001026 	beq	r16,zero,b0d0 <___vfiprintf_internal_r+0x140>
    b090:	d8c01c17 	ldw	r3,112(sp)
    b094:	d8801b17 	ldw	r2,108(sp)
    b098:	45800015 	stw	r22,0(r8)
    b09c:	80c7883a 	add	r3,r16,r3
    b0a0:	10800044 	addi	r2,r2,1
    b0a4:	44000115 	stw	r16,4(r8)
    b0a8:	d8c01c15 	stw	r3,112(sp)
    b0ac:	d8801b15 	stw	r2,108(sp)
    b0b0:	010001c4 	movi	r4,7
    b0b4:	2080750e 	bge	r4,r2,b28c <___vfiprintf_internal_r+0x2fc>
    b0b8:	1803951e 	bne	r3,zero,bf10 <___vfiprintf_internal_r+0xf80>
    b0bc:	d8c02417 	ldw	r3,144(sp)
    b0c0:	d8001b15 	stw	zero,108(sp)
    b0c4:	d811883a 	mov	r8,sp
    b0c8:	1c07883a 	add	r3,r3,r16
    b0cc:	d8c02415 	stw	r3,144(sp)
    b0d0:	a0800007 	ldb	r2,0(r20)
    b0d4:	1002e026 	beq	r2,zero,bc58 <___vfiprintf_internal_r+0xcc8>
    b0d8:	a5800044 	addi	r22,r20,1
    b0dc:	a0c00047 	ldb	r3,1(r20)
    b0e0:	d8001d85 	stb	zero,118(sp)
    b0e4:	0027883a 	mov	r19,zero
    b0e8:	d8002305 	stb	zero,140(sp)
    b0ec:	043fffc4 	movi	r16,-1
    b0f0:	d8002515 	stw	zero,148(sp)
    b0f4:	0023883a 	mov	r17,zero
    b0f8:	05001604 	movi	r20,88
    b0fc:	05400244 	movi	r21,9
    b100:	402f883a 	mov	r23,r8
    b104:	b5800044 	addi	r22,r22,1
    b108:	18bff804 	addi	r2,r3,-32
    b10c:	a0827736 	bltu	r20,r2,baec <___vfiprintf_internal_r+0xb5c>
    b110:	100490ba 	slli	r2,r2,2
    b114:	01000074 	movhi	r4,1
    b118:	212c4a04 	addi	r4,r4,-20184
    b11c:	1105883a 	add	r2,r2,r4
    b120:	10800017 	ldw	r2,0(r2)
    b124:	1000683a 	jmp	r2
    b128:	0000b7ec 	andhi	zero,zero,735
    b12c:	0000baec 	andhi	zero,zero,747
    b130:	0000baec 	andhi	zero,zero,747
    b134:	0000b808 	cmpgei	zero,zero,736
    b138:	0000baec 	andhi	zero,zero,747
    b13c:	0000baec 	andhi	zero,zero,747
    b140:	0000baec 	andhi	zero,zero,747
    b144:	0000baec 	andhi	zero,zero,747
    b148:	0000baec 	andhi	zero,zero,747
    b14c:	0000baec 	andhi	zero,zero,747
    b150:	0000ba10 	cmplti	zero,zero,744
    b154:	0000ba34 	movhi	zero,744
    b158:	0000baec 	andhi	zero,zero,747
    b15c:	0000b32c 	andhi	zero,zero,716
    b160:	0000ba48 	cmpgei	zero,zero,745
    b164:	0000baec 	andhi	zero,zero,747
    b168:	0000b814 	movui	zero,736
    b16c:	0000b820 	cmpeqi	zero,zero,736
    b170:	0000b820 	cmpeqi	zero,zero,736
    b174:	0000b820 	cmpeqi	zero,zero,736
    b178:	0000b820 	cmpeqi	zero,zero,736
    b17c:	0000b820 	cmpeqi	zero,zero,736
    b180:	0000b820 	cmpeqi	zero,zero,736
    b184:	0000b820 	cmpeqi	zero,zero,736
    b188:	0000b820 	cmpeqi	zero,zero,736
    b18c:	0000b820 	cmpeqi	zero,zero,736
    b190:	0000baec 	andhi	zero,zero,747
    b194:	0000baec 	andhi	zero,zero,747
    b198:	0000baec 	andhi	zero,zero,747
    b19c:	0000baec 	andhi	zero,zero,747
    b1a0:	0000baec 	andhi	zero,zero,747
    b1a4:	0000baec 	andhi	zero,zero,747
    b1a8:	0000baec 	andhi	zero,zero,747
    b1ac:	0000baec 	andhi	zero,zero,747
    b1b0:	0000baec 	andhi	zero,zero,747
    b1b4:	0000baec 	andhi	zero,zero,747
    b1b8:	0000b860 	cmpeqi	zero,zero,737
    b1bc:	0000baec 	andhi	zero,zero,747
    b1c0:	0000baec 	andhi	zero,zero,747
    b1c4:	0000baec 	andhi	zero,zero,747
    b1c8:	0000baec 	andhi	zero,zero,747
    b1cc:	0000baec 	andhi	zero,zero,747
    b1d0:	0000baec 	andhi	zero,zero,747
    b1d4:	0000baec 	andhi	zero,zero,747
    b1d8:	0000baec 	andhi	zero,zero,747
    b1dc:	0000baec 	andhi	zero,zero,747
    b1e0:	0000baec 	andhi	zero,zero,747
    b1e4:	0000b89c 	xori	zero,zero,738
    b1e8:	0000baec 	andhi	zero,zero,747
    b1ec:	0000baec 	andhi	zero,zero,747
    b1f0:	0000baec 	andhi	zero,zero,747
    b1f4:	0000baec 	andhi	zero,zero,747
    b1f8:	0000baec 	andhi	zero,zero,747
    b1fc:	0000b8f8 	rdprs	zero,zero,739
    b200:	0000baec 	andhi	zero,zero,747
    b204:	0000baec 	andhi	zero,zero,747
    b208:	0000b96c 	andhi	zero,zero,741
    b20c:	0000baec 	andhi	zero,zero,747
    b210:	0000baec 	andhi	zero,zero,747
    b214:	0000baec 	andhi	zero,zero,747
    b218:	0000baec 	andhi	zero,zero,747
    b21c:	0000baec 	andhi	zero,zero,747
    b220:	0000baec 	andhi	zero,zero,747
    b224:	0000baec 	andhi	zero,zero,747
    b228:	0000baec 	andhi	zero,zero,747
    b22c:	0000baec 	andhi	zero,zero,747
    b230:	0000baec 	andhi	zero,zero,747
    b234:	0000b714 	movui	zero,732
    b238:	0000b744 	movi	zero,733
    b23c:	0000baec 	andhi	zero,zero,747
    b240:	0000baec 	andhi	zero,zero,747
    b244:	0000baec 	andhi	zero,zero,747
    b248:	0000ba94 	movui	zero,746
    b24c:	0000b744 	movi	zero,733
    b250:	0000baec 	andhi	zero,zero,747
    b254:	0000baec 	andhi	zero,zero,747
    b258:	0000b5ec 	andhi	zero,zero,727
    b25c:	0000baec 	andhi	zero,zero,747
    b260:	0000b600 	call	b60 <printSignedHex0+0xe0>
    b264:	0000b638 	rdprs	zero,zero,728
    b268:	0000b338 	rdprs	zero,zero,716
    b26c:	0000b5e0 	cmpeqi	zero,zero,727
    b270:	0000baec 	andhi	zero,zero,747
    b274:	0000b9ac 	andhi	zero,zero,742
    b278:	0000baec 	andhi	zero,zero,747
    b27c:	0000b9f8 	rdprs	zero,zero,743
    b280:	0000baec 	andhi	zero,zero,747
    b284:	0000baec 	andhi	zero,zero,747
    b288:	0000b6bc 	xorhi	zero,zero,730
    b28c:	42000204 	addi	r8,r8,8
    b290:	d8c02417 	ldw	r3,144(sp)
    b294:	1c07883a 	add	r3,r3,r16
    b298:	d8c02415 	stw	r3,144(sp)
    b29c:	003f8c06 	br	b0d0 <__alt_data_end+0xfc00b0d0>
    b2a0:	d9402017 	ldw	r5,128(sp)
    b2a4:	d9002117 	ldw	r4,132(sp)
    b2a8:	00059e40 	call	59e4 <__swsetup_r>
    b2ac:	1003c11e 	bne	r2,zero,c1b4 <___vfiprintf_internal_r+0x1224>
    b2b0:	d9402017 	ldw	r5,128(sp)
    b2b4:	00c00284 	movi	r3,10
    b2b8:	2880030b 	ldhu	r2,12(r5)
    b2bc:	1080068c 	andi	r2,r2,26
    b2c0:	10ff581e 	bne	r2,r3,b024 <__alt_data_end+0xfc00b024>
    b2c4:	d8c02017 	ldw	r3,128(sp)
    b2c8:	1880038f 	ldh	r2,14(r3)
    b2cc:	103f5516 	blt	r2,zero,b024 <__alt_data_end+0xfc00b024>
    b2d0:	d9c02217 	ldw	r7,136(sp)
    b2d4:	d9002117 	ldw	r4,132(sp)
    b2d8:	a80d883a 	mov	r6,r21
    b2dc:	180b883a 	mov	r5,r3
    b2e0:	000c4b80 	call	c4b8 <__sbprintf>
    b2e4:	dfc03517 	ldw	ra,212(sp)
    b2e8:	df003417 	ldw	fp,208(sp)
    b2ec:	ddc03317 	ldw	r23,204(sp)
    b2f0:	dd803217 	ldw	r22,200(sp)
    b2f4:	dd403117 	ldw	r21,196(sp)
    b2f8:	dd003017 	ldw	r20,192(sp)
    b2fc:	dcc02f17 	ldw	r19,188(sp)
    b300:	dc802e17 	ldw	r18,184(sp)
    b304:	dc402d17 	ldw	r17,180(sp)
    b308:	dc002c17 	ldw	r16,176(sp)
    b30c:	dec03604 	addi	sp,sp,216
    b310:	f800283a 	ret
    b314:	00079f00 	call	79f0 <__sinit>
    b318:	003f2f06 	br	afd8 <__alt_data_end+0xfc00afd8>
    b31c:	d8c02517 	ldw	r3,148(sp)
    b320:	d8802215 	stw	r2,136(sp)
    b324:	00c7c83a 	sub	r3,zero,r3
    b328:	d8c02515 	stw	r3,148(sp)
    b32c:	8c400114 	ori	r17,r17,4
    b330:	b0c00007 	ldb	r3,0(r22)
    b334:	003f7306 	br	b104 <__alt_data_end+0xfc00b104>
    b338:	00800c04 	movi	r2,48
    b33c:	d9402217 	ldw	r5,136(sp)
    b340:	d8801d05 	stb	r2,116(sp)
    b344:	00801e04 	movi	r2,120
    b348:	d8801d45 	stb	r2,117(sp)
    b34c:	d8001d85 	stb	zero,118(sp)
    b350:	b811883a 	mov	r8,r23
    b354:	28c00104 	addi	r3,r5,4
    b358:	2cc00017 	ldw	r19,0(r5)
    b35c:	0029883a 	mov	r20,zero
    b360:	88800094 	ori	r2,r17,2
    b364:	80032516 	blt	r16,zero,bffc <___vfiprintf_internal_r+0x106c>
    b368:	00bfdfc4 	movi	r2,-129
    b36c:	88a2703a 	and	r17,r17,r2
    b370:	d8c02215 	stw	r3,136(sp)
    b374:	8c400094 	ori	r17,r17,2
    b378:	98032a1e 	bne	r19,zero,c024 <___vfiprintf_internal_r+0x1094>
    b37c:	00800074 	movhi	r2,1
    b380:	10943e04 	addi	r2,r2,20728
    b384:	d8802615 	stw	r2,152(sp)
    b388:	002b883a 	mov	r21,zero
    b38c:	8001741e 	bne	r16,zero,b960 <___vfiprintf_internal_r+0x9d0>
    b390:	0021883a 	mov	r16,zero
    b394:	0029883a 	mov	r20,zero
    b398:	ddc01a04 	addi	r23,sp,104
    b39c:	8027883a 	mov	r19,r16
    b3a0:	8500010e 	bge	r16,r20,b3a8 <___vfiprintf_internal_r+0x418>
    b3a4:	a027883a 	mov	r19,r20
    b3a8:	ad403fcc 	andi	r21,r21,255
    b3ac:	ad40201c 	xori	r21,r21,128
    b3b0:	ad7fe004 	addi	r21,r21,-128
    b3b4:	a8000126 	beq	r21,zero,b3bc <___vfiprintf_internal_r+0x42c>
    b3b8:	9cc00044 	addi	r19,r19,1
    b3bc:	89c0008c 	andi	r7,r17,2
    b3c0:	38000126 	beq	r7,zero,b3c8 <___vfiprintf_internal_r+0x438>
    b3c4:	9cc00084 	addi	r19,r19,2
    b3c8:	88c0210c 	andi	r3,r17,132
    b3cc:	1801dd1e 	bne	r3,zero,bb44 <___vfiprintf_internal_r+0xbb4>
    b3d0:	d9402517 	ldw	r5,148(sp)
    b3d4:	2cebc83a 	sub	r21,r5,r19
    b3d8:	0541da0e 	bge	zero,r21,bb44 <___vfiprintf_internal_r+0xbb4>
    b3dc:	07000404 	movi	fp,16
    b3e0:	d8801c17 	ldw	r2,112(sp)
    b3e4:	e543be0e 	bge	fp,r21,c2e0 <___vfiprintf_internal_r+0x1350>
    b3e8:	01400074 	movhi	r5,1
    b3ec:	2954a304 	addi	r5,r5,21132
    b3f0:	dc002715 	stw	r16,156(sp)
    b3f4:	d9801b17 	ldw	r6,108(sp)
    b3f8:	a821883a 	mov	r16,r21
    b3fc:	d9402315 	stw	r5,140(sp)
    b400:	028001c4 	movi	r10,7
    b404:	d9c02915 	stw	r7,164(sp)
    b408:	182b883a 	mov	r21,r3
    b40c:	00000506 	br	b424 <___vfiprintf_internal_r+0x494>
    b410:	31000084 	addi	r4,r6,2
    b414:	42000204 	addi	r8,r8,8
    b418:	180d883a 	mov	r6,r3
    b41c:	843ffc04 	addi	r16,r16,-16
    b420:	e4000f0e 	bge	fp,r16,b460 <___vfiprintf_internal_r+0x4d0>
    b424:	01000074 	movhi	r4,1
    b428:	10800404 	addi	r2,r2,16
    b42c:	30c00044 	addi	r3,r6,1
    b430:	2114a304 	addi	r4,r4,21132
    b434:	41000015 	stw	r4,0(r8)
    b438:	47000115 	stw	fp,4(r8)
    b43c:	d8801c15 	stw	r2,112(sp)
    b440:	d8c01b15 	stw	r3,108(sp)
    b444:	50fff20e 	bge	r10,r3,b410 <__alt_data_end+0xfc00b410>
    b448:	1001b21e 	bne	r2,zero,bb14 <___vfiprintf_internal_r+0xb84>
    b44c:	843ffc04 	addi	r16,r16,-16
    b450:	000d883a 	mov	r6,zero
    b454:	01000044 	movi	r4,1
    b458:	d811883a 	mov	r8,sp
    b45c:	e43ff116 	blt	fp,r16,b424 <__alt_data_end+0xfc00b424>
    b460:	a807883a 	mov	r3,r21
    b464:	d9c02917 	ldw	r7,164(sp)
    b468:	802b883a 	mov	r21,r16
    b46c:	dc002717 	ldw	r16,156(sp)
    b470:	d9402317 	ldw	r5,140(sp)
    b474:	a885883a 	add	r2,r21,r2
    b478:	45400115 	stw	r21,4(r8)
    b47c:	41400015 	stw	r5,0(r8)
    b480:	d8801c15 	stw	r2,112(sp)
    b484:	d9001b15 	stw	r4,108(sp)
    b488:	014001c4 	movi	r5,7
    b48c:	29026216 	blt	r5,r4,be18 <___vfiprintf_internal_r+0xe88>
    b490:	d9801d87 	ldb	r6,118(sp)
    b494:	42000204 	addi	r8,r8,8
    b498:	21400044 	addi	r5,r4,1
    b49c:	3001ae1e 	bne	r6,zero,bb58 <___vfiprintf_internal_r+0xbc8>
    b4a0:	3801bb26 	beq	r7,zero,bb90 <___vfiprintf_internal_r+0xc00>
    b4a4:	d9001d04 	addi	r4,sp,116
    b4a8:	10800084 	addi	r2,r2,2
    b4ac:	41000015 	stw	r4,0(r8)
    b4b0:	01000084 	movi	r4,2
    b4b4:	41000115 	stw	r4,4(r8)
    b4b8:	d8801c15 	stw	r2,112(sp)
    b4bc:	d9401b15 	stw	r5,108(sp)
    b4c0:	010001c4 	movi	r4,7
    b4c4:	2142680e 	bge	r4,r5,be68 <___vfiprintf_internal_r+0xed8>
    b4c8:	1002b11e 	bne	r2,zero,bf90 <___vfiprintf_internal_r+0x1000>
    b4cc:	01802004 	movi	r6,128
    b4d0:	01400044 	movi	r5,1
    b4d4:	0009883a 	mov	r4,zero
    b4d8:	d811883a 	mov	r8,sp
    b4dc:	1981ae1e 	bne	r3,r6,bb98 <___vfiprintf_internal_r+0xc08>
    b4e0:	d8c02517 	ldw	r3,148(sp)
    b4e4:	1cf9c83a 	sub	fp,r3,r19
    b4e8:	0701ab0e 	bge	zero,fp,bb98 <___vfiprintf_internal_r+0xc08>
    b4ec:	05400404 	movi	r21,16
    b4f0:	af03a90e 	bge	r21,fp,c398 <___vfiprintf_internal_r+0x1408>
    b4f4:	01400074 	movhi	r5,1
    b4f8:	29549f04 	addi	r5,r5,21116
    b4fc:	d9402315 	stw	r5,140(sp)
    b500:	01c001c4 	movi	r7,7
    b504:	00000506 	br	b51c <___vfiprintf_internal_r+0x58c>
    b508:	21800084 	addi	r6,r4,2
    b50c:	42000204 	addi	r8,r8,8
    b510:	1809883a 	mov	r4,r3
    b514:	e73ffc04 	addi	fp,fp,-16
    b518:	af000d0e 	bge	r21,fp,b550 <___vfiprintf_internal_r+0x5c0>
    b51c:	10800404 	addi	r2,r2,16
    b520:	20c00044 	addi	r3,r4,1
    b524:	44800015 	stw	r18,0(r8)
    b528:	45400115 	stw	r21,4(r8)
    b52c:	d8801c15 	stw	r2,112(sp)
    b530:	d8c01b15 	stw	r3,108(sp)
    b534:	38fff40e 	bge	r7,r3,b508 <__alt_data_end+0xfc00b508>
    b538:	10022b1e 	bne	r2,zero,bde8 <___vfiprintf_internal_r+0xe58>
    b53c:	e73ffc04 	addi	fp,fp,-16
    b540:	01800044 	movi	r6,1
    b544:	0009883a 	mov	r4,zero
    b548:	d811883a 	mov	r8,sp
    b54c:	af3ff316 	blt	r21,fp,b51c <__alt_data_end+0xfc00b51c>
    b550:	d8c02317 	ldw	r3,140(sp)
    b554:	1705883a 	add	r2,r2,fp
    b558:	47000115 	stw	fp,4(r8)
    b55c:	40c00015 	stw	r3,0(r8)
    b560:	d8801c15 	stw	r2,112(sp)
    b564:	d9801b15 	stw	r6,108(sp)
    b568:	00c001c4 	movi	r3,7
    b56c:	19829416 	blt	r3,r6,bfc0 <___vfiprintf_internal_r+0x1030>
    b570:	8521c83a 	sub	r16,r16,r20
    b574:	42000204 	addi	r8,r8,8
    b578:	31400044 	addi	r5,r6,1
    b57c:	3009883a 	mov	r4,r6
    b580:	04018716 	blt	zero,r16,bba0 <___vfiprintf_internal_r+0xc10>
    b584:	a085883a 	add	r2,r20,r2
    b588:	45c00015 	stw	r23,0(r8)
    b58c:	45000115 	stw	r20,4(r8)
    b590:	d8801c15 	stw	r2,112(sp)
    b594:	d9401b15 	stw	r5,108(sp)
    b598:	00c001c4 	movi	r3,7
    b59c:	1941c20e 	bge	r3,r5,bca8 <___vfiprintf_internal_r+0xd18>
    b5a0:	1002531e 	bne	r2,zero,bef0 <___vfiprintf_internal_r+0xf60>
    b5a4:	d8001b15 	stw	zero,108(sp)
    b5a8:	8c40010c 	andi	r17,r17,4
    b5ac:	88023226 	beq	r17,zero,be78 <___vfiprintf_internal_r+0xee8>
    b5b0:	d9002517 	ldw	r4,148(sp)
    b5b4:	24e3c83a 	sub	r17,r4,r19
    b5b8:	04432916 	blt	zero,r17,c260 <___vfiprintf_internal_r+0x12d0>
    b5bc:	d8802517 	ldw	r2,148(sp)
    b5c0:	14c0010e 	bge	r2,r19,b5c8 <___vfiprintf_internal_r+0x638>
    b5c4:	9805883a 	mov	r2,r19
    b5c8:	d8c02417 	ldw	r3,144(sp)
    b5cc:	1887883a 	add	r3,r3,r2
    b5d0:	d8c02415 	stw	r3,144(sp)
    b5d4:	d8001b15 	stw	zero,108(sp)
    b5d8:	d811883a 	mov	r8,sp
    b5dc:	003ea006 	br	b060 <__alt_data_end+0xfc00b060>
    b5e0:	8c400814 	ori	r17,r17,32
    b5e4:	b0c00007 	ldb	r3,0(r22)
    b5e8:	003ec606 	br	b104 <__alt_data_end+0xfc00b104>
    b5ec:	b0c00007 	ldb	r3,0(r22)
    b5f0:	00801b04 	movi	r2,108
    b5f4:	18832026 	beq	r3,r2,c278 <___vfiprintf_internal_r+0x12e8>
    b5f8:	8c400414 	ori	r17,r17,16
    b5fc:	003ec106 	br	b104 <__alt_data_end+0xfc00b104>
    b600:	9cc03fcc 	andi	r19,r19,255
    b604:	b811883a 	mov	r8,r23
    b608:	9803981e 	bne	r19,zero,c46c <___vfiprintf_internal_r+0x14dc>
    b60c:	8880080c 	andi	r2,r17,32
    b610:	1002be26 	beq	r2,zero,c10c <___vfiprintf_internal_r+0x117c>
    b614:	d9002217 	ldw	r4,136(sp)
    b618:	d9402417 	ldw	r5,144(sp)
    b61c:	20800017 	ldw	r2,0(r4)
    b620:	2807d7fa 	srai	r3,r5,31
    b624:	21000104 	addi	r4,r4,4
    b628:	d9002215 	stw	r4,136(sp)
    b62c:	11400015 	stw	r5,0(r2)
    b630:	10c00115 	stw	r3,4(r2)
    b634:	003e8a06 	br	b060 <__alt_data_end+0xfc00b060>
    b638:	9cc03fcc 	andi	r19,r19,255
    b63c:	b811883a 	mov	r8,r23
    b640:	9803871e 	bne	r19,zero,c460 <___vfiprintf_internal_r+0x14d0>
    b644:	8880080c 	andi	r2,r17,32
    b648:	10009a26 	beq	r2,zero,b8b4 <___vfiprintf_internal_r+0x924>
    b64c:	d9002217 	ldw	r4,136(sp)
    b650:	d8001d85 	stb	zero,118(sp)
    b654:	20800204 	addi	r2,r4,8
    b658:	24c00017 	ldw	r19,0(r4)
    b65c:	25000117 	ldw	r20,4(r4)
    b660:	8002a416 	blt	r16,zero,c0f4 <___vfiprintf_internal_r+0x1164>
    b664:	013fdfc4 	movi	r4,-129
    b668:	9d06b03a 	or	r3,r19,r20
    b66c:	d8802215 	stw	r2,136(sp)
    b670:	8922703a 	and	r17,r17,r4
    b674:	18009b26 	beq	r3,zero,b8e4 <___vfiprintf_internal_r+0x954>
    b678:	002b883a 	mov	r21,zero
    b67c:	ddc01a04 	addi	r23,sp,104
    b680:	9806d0fa 	srli	r3,r19,3
    b684:	a008977a 	slli	r4,r20,29
    b688:	a028d0fa 	srli	r20,r20,3
    b68c:	9cc001cc 	andi	r19,r19,7
    b690:	98800c04 	addi	r2,r19,48
    b694:	bdffffc4 	addi	r23,r23,-1
    b698:	20e6b03a 	or	r19,r4,r3
    b69c:	b8800005 	stb	r2,0(r23)
    b6a0:	9d06b03a 	or	r3,r19,r20
    b6a4:	183ff61e 	bne	r3,zero,b680 <__alt_data_end+0xfc00b680>
    b6a8:	88c0004c 	andi	r3,r17,1
    b6ac:	18021f1e 	bne	r3,zero,bf2c <___vfiprintf_internal_r+0xf9c>
    b6b0:	d9401e17 	ldw	r5,120(sp)
    b6b4:	2de9c83a 	sub	r20,r5,r23
    b6b8:	003f3806 	br	b39c <__alt_data_end+0xfc00b39c>
    b6bc:	9cc03fcc 	andi	r19,r19,255
    b6c0:	b811883a 	mov	r8,r23
    b6c4:	98034f1e 	bne	r19,zero,c404 <___vfiprintf_internal_r+0x1474>
    b6c8:	00800074 	movhi	r2,1
    b6cc:	10943e04 	addi	r2,r2,20728
    b6d0:	d8802615 	stw	r2,152(sp)
    b6d4:	8880080c 	andi	r2,r17,32
    b6d8:	1000ac26 	beq	r2,zero,b98c <___vfiprintf_internal_r+0x9fc>
    b6dc:	d9002217 	ldw	r4,136(sp)
    b6e0:	24c00017 	ldw	r19,0(r4)
    b6e4:	25000117 	ldw	r20,4(r4)
    b6e8:	21000204 	addi	r4,r4,8
    b6ec:	d9002215 	stw	r4,136(sp)
    b6f0:	8880004c 	andi	r2,r17,1
    b6f4:	1001e726 	beq	r2,zero,be94 <___vfiprintf_internal_r+0xf04>
    b6f8:	9d04b03a 	or	r2,r19,r20
    b6fc:	10025c1e 	bne	r2,zero,c070 <___vfiprintf_internal_r+0x10e0>
    b700:	d8001d85 	stb	zero,118(sp)
    b704:	80024416 	blt	r16,zero,c018 <___vfiprintf_internal_r+0x1088>
    b708:	00bfdfc4 	movi	r2,-129
    b70c:	88a2703a 	and	r17,r17,r2
    b710:	003f1d06 	br	b388 <__alt_data_end+0xfc00b388>
    b714:	d8c02217 	ldw	r3,136(sp)
    b718:	04c00044 	movi	r19,1
    b71c:	b811883a 	mov	r8,r23
    b720:	18800017 	ldw	r2,0(r3)
    b724:	18c00104 	addi	r3,r3,4
    b728:	d8001d85 	stb	zero,118(sp)
    b72c:	d8801005 	stb	r2,64(sp)
    b730:	d8c02215 	stw	r3,136(sp)
    b734:	9829883a 	mov	r20,r19
    b738:	ddc01004 	addi	r23,sp,64
    b73c:	0021883a 	mov	r16,zero
    b740:	003f1e06 	br	b3bc <__alt_data_end+0xfc00b3bc>
    b744:	9cc03fcc 	andi	r19,r19,255
    b748:	b811883a 	mov	r8,r23
    b74c:	9803331e 	bne	r19,zero,c41c <___vfiprintf_internal_r+0x148c>
    b750:	8880080c 	andi	r2,r17,32
    b754:	10004826 	beq	r2,zero,b878 <___vfiprintf_internal_r+0x8e8>
    b758:	d9002217 	ldw	r4,136(sp)
    b75c:	20800117 	ldw	r2,4(r4)
    b760:	24c00017 	ldw	r19,0(r4)
    b764:	21000204 	addi	r4,r4,8
    b768:	d9002215 	stw	r4,136(sp)
    b76c:	1029883a 	mov	r20,r2
    b770:	10024c16 	blt	r2,zero,c0a4 <___vfiprintf_internal_r+0x1114>
    b774:	dd401d83 	ldbu	r21,118(sp)
    b778:	80007116 	blt	r16,zero,b940 <___vfiprintf_internal_r+0x9b0>
    b77c:	00ffdfc4 	movi	r3,-129
    b780:	9d04b03a 	or	r2,r19,r20
    b784:	88e2703a 	and	r17,r17,r3
    b788:	1000d126 	beq	r2,zero,bad0 <___vfiprintf_internal_r+0xb40>
    b78c:	a0023526 	beq	r20,zero,c064 <___vfiprintf_internal_r+0x10d4>
    b790:	ddc01a04 	addi	r23,sp,104
    b794:	4039883a 	mov	fp,r8
    b798:	9809883a 	mov	r4,r19
    b79c:	a00b883a 	mov	r5,r20
    b7a0:	01800284 	movi	r6,10
    b7a4:	000f883a 	mov	r7,zero
    b7a8:	000d4bc0 	call	d4bc <__umoddi3>
    b7ac:	10800c04 	addi	r2,r2,48
    b7b0:	bdffffc4 	addi	r23,r23,-1
    b7b4:	9809883a 	mov	r4,r19
    b7b8:	a00b883a 	mov	r5,r20
    b7bc:	b8800005 	stb	r2,0(r23)
    b7c0:	01800284 	movi	r6,10
    b7c4:	000f883a 	mov	r7,zero
    b7c8:	000cec00 	call	cec0 <__udivdi3>
    b7cc:	1027883a 	mov	r19,r2
    b7d0:	10c4b03a 	or	r2,r2,r3
    b7d4:	1829883a 	mov	r20,r3
    b7d8:	103fef1e 	bne	r2,zero,b798 <__alt_data_end+0xfc00b798>
    b7dc:	d9001e17 	ldw	r4,120(sp)
    b7e0:	e011883a 	mov	r8,fp
    b7e4:	25e9c83a 	sub	r20,r4,r23
    b7e8:	003eec06 	br	b39c <__alt_data_end+0xfc00b39c>
    b7ec:	d8802307 	ldb	r2,140(sp)
    b7f0:	1002361e 	bne	r2,zero,c0cc <___vfiprintf_internal_r+0x113c>
    b7f4:	00c00804 	movi	r3,32
    b7f8:	d8c02305 	stb	r3,140(sp)
    b7fc:	04c00044 	movi	r19,1
    b800:	b0c00007 	ldb	r3,0(r22)
    b804:	003e3f06 	br	b104 <__alt_data_end+0xfc00b104>
    b808:	8c400054 	ori	r17,r17,1
    b80c:	b0c00007 	ldb	r3,0(r22)
    b810:	003e3c06 	br	b104 <__alt_data_end+0xfc00b104>
    b814:	8c402014 	ori	r17,r17,128
    b818:	b0c00007 	ldb	r3,0(r22)
    b81c:	003e3906 	br	b104 <__alt_data_end+0xfc00b104>
    b820:	dc002715 	stw	r16,156(sp)
    b824:	d8002515 	stw	zero,148(sp)
    b828:	1f3ff404 	addi	fp,r3,-48
    b82c:	0009883a 	mov	r4,zero
    b830:	b021883a 	mov	r16,r22
    b834:	01400284 	movi	r5,10
    b838:	00034100 	call	3410 <__mulsi3>
    b83c:	80c00007 	ldb	r3,0(r16)
    b840:	e089883a 	add	r4,fp,r2
    b844:	b5800044 	addi	r22,r22,1
    b848:	1f3ff404 	addi	fp,r3,-48
    b84c:	b021883a 	mov	r16,r22
    b850:	af3ff82e 	bgeu	r21,fp,b834 <__alt_data_end+0xfc00b834>
    b854:	d9002515 	stw	r4,148(sp)
    b858:	dc002717 	ldw	r16,156(sp)
    b85c:	003e2a06 	br	b108 <__alt_data_end+0xfc00b108>
    b860:	9cc03fcc 	andi	r19,r19,255
    b864:	b811883a 	mov	r8,r23
    b868:	9802e91e 	bne	r19,zero,c410 <___vfiprintf_internal_r+0x1480>
    b86c:	8c400414 	ori	r17,r17,16
    b870:	8880080c 	andi	r2,r17,32
    b874:	103fb81e 	bne	r2,zero,b758 <__alt_data_end+0xfc00b758>
    b878:	8880040c 	andi	r2,r17,16
    b87c:	10022e26 	beq	r2,zero,c138 <___vfiprintf_internal_r+0x11a8>
    b880:	d9402217 	ldw	r5,136(sp)
    b884:	2cc00017 	ldw	r19,0(r5)
    b888:	29400104 	addi	r5,r5,4
    b88c:	d9402215 	stw	r5,136(sp)
    b890:	9829d7fa 	srai	r20,r19,31
    b894:	a005883a 	mov	r2,r20
    b898:	003fb506 	br	b770 <__alt_data_end+0xfc00b770>
    b89c:	9cc03fcc 	andi	r19,r19,255
    b8a0:	b811883a 	mov	r8,r23
    b8a4:	9802fa1e 	bne	r19,zero,c490 <___vfiprintf_internal_r+0x1500>
    b8a8:	8c400414 	ori	r17,r17,16
    b8ac:	8880080c 	andi	r2,r17,32
    b8b0:	103f661e 	bne	r2,zero,b64c <__alt_data_end+0xfc00b64c>
    b8b4:	8880040c 	andi	r2,r17,16
    b8b8:	10020626 	beq	r2,zero,c0d4 <___vfiprintf_internal_r+0x1144>
    b8bc:	d9402217 	ldw	r5,136(sp)
    b8c0:	d8001d85 	stb	zero,118(sp)
    b8c4:	0029883a 	mov	r20,zero
    b8c8:	28800104 	addi	r2,r5,4
    b8cc:	2cc00017 	ldw	r19,0(r5)
    b8d0:	80020816 	blt	r16,zero,c0f4 <___vfiprintf_internal_r+0x1164>
    b8d4:	00ffdfc4 	movi	r3,-129
    b8d8:	d8802215 	stw	r2,136(sp)
    b8dc:	88e2703a 	and	r17,r17,r3
    b8e0:	983f651e 	bne	r19,zero,b678 <__alt_data_end+0xfc00b678>
    b8e4:	002b883a 	mov	r21,zero
    b8e8:	8002cf26 	beq	r16,zero,c428 <___vfiprintf_internal_r+0x1498>
    b8ec:	0027883a 	mov	r19,zero
    b8f0:	0029883a 	mov	r20,zero
    b8f4:	003f6106 	br	b67c <__alt_data_end+0xfc00b67c>
    b8f8:	9cc03fcc 	andi	r19,r19,255
    b8fc:	b811883a 	mov	r8,r23
    b900:	9802e01e 	bne	r19,zero,c484 <___vfiprintf_internal_r+0x14f4>
    b904:	8c400414 	ori	r17,r17,16
    b908:	8880080c 	andi	r2,r17,32
    b90c:	1000641e 	bne	r2,zero,baa0 <___vfiprintf_internal_r+0xb10>
    b910:	8880040c 	andi	r2,r17,16
    b914:	1001c81e 	bne	r2,zero,c038 <___vfiprintf_internal_r+0x10a8>
    b918:	8880100c 	andi	r2,r17,64
    b91c:	d8001d85 	stb	zero,118(sp)
    b920:	1002281e 	bne	r2,zero,c1c4 <___vfiprintf_internal_r+0x1234>
    b924:	d9002217 	ldw	r4,136(sp)
    b928:	0029883a 	mov	r20,zero
    b92c:	20800104 	addi	r2,r4,4
    b930:	24c00017 	ldw	r19,0(r4)
    b934:	8001c60e 	bge	r16,zero,c050 <___vfiprintf_internal_r+0x10c0>
    b938:	d8802215 	stw	r2,136(sp)
    b93c:	002b883a 	mov	r21,zero
    b940:	9d04b03a 	or	r2,r19,r20
    b944:	103f911e 	bne	r2,zero,b78c <__alt_data_end+0xfc00b78c>
    b948:	00800044 	movi	r2,1
    b94c:	10803fcc 	andi	r2,r2,255
    b950:	00c00044 	movi	r3,1
    b954:	10c05f26 	beq	r2,r3,bad4 <___vfiprintf_internal_r+0xb44>
    b958:	00c00084 	movi	r3,2
    b95c:	10ffe31e 	bne	r2,r3,b8ec <__alt_data_end+0xfc00b8ec>
    b960:	0027883a 	mov	r19,zero
    b964:	0029883a 	mov	r20,zero
    b968:	00015106 	br	beb0 <___vfiprintf_internal_r+0xf20>
    b96c:	9cc03fcc 	andi	r19,r19,255
    b970:	b811883a 	mov	r8,r23
    b974:	9802c01e 	bne	r19,zero,c478 <___vfiprintf_internal_r+0x14e8>
    b978:	01400074 	movhi	r5,1
    b97c:	29543904 	addi	r5,r5,20708
    b980:	d9402615 	stw	r5,152(sp)
    b984:	8880080c 	andi	r2,r17,32
    b988:	103f541e 	bne	r2,zero,b6dc <__alt_data_end+0xfc00b6dc>
    b98c:	8880040c 	andi	r2,r17,16
    b990:	1001f226 	beq	r2,zero,c15c <___vfiprintf_internal_r+0x11cc>
    b994:	d9402217 	ldw	r5,136(sp)
    b998:	0029883a 	mov	r20,zero
    b99c:	2cc00017 	ldw	r19,0(r5)
    b9a0:	29400104 	addi	r5,r5,4
    b9a4:	d9402215 	stw	r5,136(sp)
    b9a8:	003f5106 	br	b6f0 <__alt_data_end+0xfc00b6f0>
    b9ac:	d8c02217 	ldw	r3,136(sp)
    b9b0:	b811883a 	mov	r8,r23
    b9b4:	d8001d85 	stb	zero,118(sp)
    b9b8:	1dc00017 	ldw	r23,0(r3)
    b9bc:	1f000104 	addi	fp,r3,4
    b9c0:	b8025926 	beq	r23,zero,c328 <___vfiprintf_internal_r+0x1398>
    b9c4:	80023316 	blt	r16,zero,c294 <___vfiprintf_internal_r+0x1304>
    b9c8:	800d883a 	mov	r6,r16
    b9cc:	000b883a 	mov	r5,zero
    b9d0:	b809883a 	mov	r4,r23
    b9d4:	da002a15 	stw	r8,168(sp)
    b9d8:	0008f680 	call	8f68 <memchr>
    b9dc:	da002a17 	ldw	r8,168(sp)
    b9e0:	10026826 	beq	r2,zero,c384 <___vfiprintf_internal_r+0x13f4>
    b9e4:	15e9c83a 	sub	r20,r2,r23
    b9e8:	dd401d83 	ldbu	r21,118(sp)
    b9ec:	df002215 	stw	fp,136(sp)
    b9f0:	0021883a 	mov	r16,zero
    b9f4:	003e6906 	br	b39c <__alt_data_end+0xfc00b39c>
    b9f8:	9cc03fcc 	andi	r19,r19,255
    b9fc:	b811883a 	mov	r8,r23
    ba00:	983fc126 	beq	r19,zero,b908 <__alt_data_end+0xfc00b908>
    ba04:	d8c02303 	ldbu	r3,140(sp)
    ba08:	d8c01d85 	stb	r3,118(sp)
    ba0c:	003fbe06 	br	b908 <__alt_data_end+0xfc00b908>
    ba10:	d9002217 	ldw	r4,136(sp)
    ba14:	d9402217 	ldw	r5,136(sp)
    ba18:	21000017 	ldw	r4,0(r4)
    ba1c:	28800104 	addi	r2,r5,4
    ba20:	d9002515 	stw	r4,148(sp)
    ba24:	203e3d16 	blt	r4,zero,b31c <__alt_data_end+0xfc00b31c>
    ba28:	d8802215 	stw	r2,136(sp)
    ba2c:	b0c00007 	ldb	r3,0(r22)
    ba30:	003db406 	br	b104 <__alt_data_end+0xfc00b104>
    ba34:	00c00ac4 	movi	r3,43
    ba38:	d8c02305 	stb	r3,140(sp)
    ba3c:	04c00044 	movi	r19,1
    ba40:	b0c00007 	ldb	r3,0(r22)
    ba44:	003daf06 	br	b104 <__alt_data_end+0xfc00b104>
    ba48:	b0c00007 	ldb	r3,0(r22)
    ba4c:	01000a84 	movi	r4,42
    ba50:	b4000044 	addi	r16,r22,1
    ba54:	19025e26 	beq	r3,r4,c3d0 <___vfiprintf_internal_r+0x1440>
    ba58:	1f3ff404 	addi	fp,r3,-48
    ba5c:	0009883a 	mov	r4,zero
    ba60:	af025236 	bltu	r21,fp,c3ac <___vfiprintf_internal_r+0x141c>
    ba64:	01400284 	movi	r5,10
    ba68:	00034100 	call	3410 <__mulsi3>
    ba6c:	80c00007 	ldb	r3,0(r16)
    ba70:	1709883a 	add	r4,r2,fp
    ba74:	85800044 	addi	r22,r16,1
    ba78:	1f3ff404 	addi	fp,r3,-48
    ba7c:	b021883a 	mov	r16,r22
    ba80:	af3ff82e 	bgeu	r21,fp,ba64 <__alt_data_end+0xfc00ba64>
    ba84:	2021883a 	mov	r16,r4
    ba88:	203d9f0e 	bge	r4,zero,b108 <__alt_data_end+0xfc00b108>
    ba8c:	043fffc4 	movi	r16,-1
    ba90:	003d9d06 	br	b108 <__alt_data_end+0xfc00b108>
    ba94:	8c401014 	ori	r17,r17,64
    ba98:	b0c00007 	ldb	r3,0(r22)
    ba9c:	003d9906 	br	b104 <__alt_data_end+0xfc00b104>
    baa0:	d9002217 	ldw	r4,136(sp)
    baa4:	d8001d85 	stb	zero,118(sp)
    baa8:	20c00204 	addi	r3,r4,8
    baac:	24c00017 	ldw	r19,0(r4)
    bab0:	25000117 	ldw	r20,4(r4)
    bab4:	8001e716 	blt	r16,zero,c254 <___vfiprintf_internal_r+0x12c4>
    bab8:	013fdfc4 	movi	r4,-129
    babc:	9d04b03a 	or	r2,r19,r20
    bac0:	d8c02215 	stw	r3,136(sp)
    bac4:	8922703a 	and	r17,r17,r4
    bac8:	002b883a 	mov	r21,zero
    bacc:	103f2f1e 	bne	r2,zero,b78c <__alt_data_end+0xfc00b78c>
    bad0:	803e2f26 	beq	r16,zero,b390 <__alt_data_end+0xfc00b390>
    bad4:	0027883a 	mov	r19,zero
    bad8:	9cc00c04 	addi	r19,r19,48
    badc:	dcc019c5 	stb	r19,103(sp)
    bae0:	dd002817 	ldw	r20,160(sp)
    bae4:	ddc019c4 	addi	r23,sp,103
    bae8:	003e2c06 	br	b39c <__alt_data_end+0xfc00b39c>
    baec:	9cc03fcc 	andi	r19,r19,255
    baf0:	b811883a 	mov	r8,r23
    baf4:	9802571e 	bne	r19,zero,c454 <___vfiprintf_internal_r+0x14c4>
    baf8:	18005726 	beq	r3,zero,bc58 <___vfiprintf_internal_r+0xcc8>
    bafc:	04c00044 	movi	r19,1
    bb00:	d8c01005 	stb	r3,64(sp)
    bb04:	d8001d85 	stb	zero,118(sp)
    bb08:	9829883a 	mov	r20,r19
    bb0c:	ddc01004 	addi	r23,sp,64
    bb10:	003f0a06 	br	b73c <__alt_data_end+0xfc00b73c>
    bb14:	d9402017 	ldw	r5,128(sp)
    bb18:	d9002117 	ldw	r4,132(sp)
    bb1c:	d9801a04 	addi	r6,sp,104
    bb20:	da802a15 	stw	r10,168(sp)
    bb24:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bb28:	da802a17 	ldw	r10,168(sp)
    bb2c:	1000501e 	bne	r2,zero,bc70 <___vfiprintf_internal_r+0xce0>
    bb30:	d9801b17 	ldw	r6,108(sp)
    bb34:	d8801c17 	ldw	r2,112(sp)
    bb38:	d811883a 	mov	r8,sp
    bb3c:	31000044 	addi	r4,r6,1
    bb40:	003e3606 	br	b41c <__alt_data_end+0xfc00b41c>
    bb44:	d9001b17 	ldw	r4,108(sp)
    bb48:	d8801c17 	ldw	r2,112(sp)
    bb4c:	21400044 	addi	r5,r4,1
    bb50:	d9801d87 	ldb	r6,118(sp)
    bb54:	303e5226 	beq	r6,zero,b4a0 <__alt_data_end+0xfc00b4a0>
    bb58:	01800044 	movi	r6,1
    bb5c:	d9001d84 	addi	r4,sp,118
    bb60:	1185883a 	add	r2,r2,r6
    bb64:	41000015 	stw	r4,0(r8)
    bb68:	41800115 	stw	r6,4(r8)
    bb6c:	d8801c15 	stw	r2,112(sp)
    bb70:	d9401b15 	stw	r5,108(sp)
    bb74:	010001c4 	movi	r4,7
    bb78:	2140b00e 	bge	r4,r5,be3c <___vfiprintf_internal_r+0xeac>
    bb7c:	1000f61e 	bne	r2,zero,bf58 <___vfiprintf_internal_r+0xfc8>
    bb80:	3800b31e 	bne	r7,zero,be50 <___vfiprintf_internal_r+0xec0>
    bb84:	0009883a 	mov	r4,zero
    bb88:	300b883a 	mov	r5,r6
    bb8c:	d811883a 	mov	r8,sp
    bb90:	01802004 	movi	r6,128
    bb94:	19be5226 	beq	r3,r6,b4e0 <__alt_data_end+0xfc00b4e0>
    bb98:	8521c83a 	sub	r16,r16,r20
    bb9c:	043e790e 	bge	zero,r16,b584 <__alt_data_end+0xfc00b584>
    bba0:	05400404 	movi	r21,16
    bba4:	ac01b00e 	bge	r21,r16,c268 <___vfiprintf_internal_r+0x12d8>
    bba8:	01400074 	movhi	r5,1
    bbac:	29549f04 	addi	r5,r5,21116
    bbb0:	d9402315 	stw	r5,140(sp)
    bbb4:	070001c4 	movi	fp,7
    bbb8:	00000506 	br	bbd0 <___vfiprintf_internal_r+0xc40>
    bbbc:	21400084 	addi	r5,r4,2
    bbc0:	42000204 	addi	r8,r8,8
    bbc4:	1809883a 	mov	r4,r3
    bbc8:	843ffc04 	addi	r16,r16,-16
    bbcc:	ac000d0e 	bge	r21,r16,bc04 <___vfiprintf_internal_r+0xc74>
    bbd0:	10800404 	addi	r2,r2,16
    bbd4:	20c00044 	addi	r3,r4,1
    bbd8:	44800015 	stw	r18,0(r8)
    bbdc:	45400115 	stw	r21,4(r8)
    bbe0:	d8801c15 	stw	r2,112(sp)
    bbe4:	d8c01b15 	stw	r3,108(sp)
    bbe8:	e0fff40e 	bge	fp,r3,bbbc <__alt_data_end+0xfc00bbbc>
    bbec:	1000101e 	bne	r2,zero,bc30 <___vfiprintf_internal_r+0xca0>
    bbf0:	843ffc04 	addi	r16,r16,-16
    bbf4:	01400044 	movi	r5,1
    bbf8:	0009883a 	mov	r4,zero
    bbfc:	d811883a 	mov	r8,sp
    bc00:	ac3ff316 	blt	r21,r16,bbd0 <__alt_data_end+0xfc00bbd0>
    bc04:	d8c02317 	ldw	r3,140(sp)
    bc08:	1405883a 	add	r2,r2,r16
    bc0c:	44000115 	stw	r16,4(r8)
    bc10:	40c00015 	stw	r3,0(r8)
    bc14:	d8801c15 	stw	r2,112(sp)
    bc18:	d9401b15 	stw	r5,108(sp)
    bc1c:	00c001c4 	movi	r3,7
    bc20:	19401916 	blt	r3,r5,bc88 <___vfiprintf_internal_r+0xcf8>
    bc24:	42000204 	addi	r8,r8,8
    bc28:	29400044 	addi	r5,r5,1
    bc2c:	003e5506 	br	b584 <__alt_data_end+0xfc00b584>
    bc30:	d9402017 	ldw	r5,128(sp)
    bc34:	d9002117 	ldw	r4,132(sp)
    bc38:	d9801a04 	addi	r6,sp,104
    bc3c:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bc40:	10000b1e 	bne	r2,zero,bc70 <___vfiprintf_internal_r+0xce0>
    bc44:	d9001b17 	ldw	r4,108(sp)
    bc48:	d8801c17 	ldw	r2,112(sp)
    bc4c:	d811883a 	mov	r8,sp
    bc50:	21400044 	addi	r5,r4,1
    bc54:	003fdc06 	br	bbc8 <__alt_data_end+0xfc00bbc8>
    bc58:	d8801c17 	ldw	r2,112(sp)
    bc5c:	10000426 	beq	r2,zero,bc70 <___vfiprintf_internal_r+0xce0>
    bc60:	d9402017 	ldw	r5,128(sp)
    bc64:	d9002117 	ldw	r4,132(sp)
    bc68:	d9801a04 	addi	r6,sp,104
    bc6c:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bc70:	d9402017 	ldw	r5,128(sp)
    bc74:	2880030b 	ldhu	r2,12(r5)
    bc78:	1080100c 	andi	r2,r2,64
    bc7c:	10014d1e 	bne	r2,zero,c1b4 <___vfiprintf_internal_r+0x1224>
    bc80:	d8802417 	ldw	r2,144(sp)
    bc84:	003d9706 	br	b2e4 <__alt_data_end+0xfc00b2e4>
    bc88:	1000d21e 	bne	r2,zero,bfd4 <___vfiprintf_internal_r+0x1044>
    bc8c:	00c00044 	movi	r3,1
    bc90:	a005883a 	mov	r2,r20
    bc94:	ddc00015 	stw	r23,0(sp)
    bc98:	dd000115 	stw	r20,4(sp)
    bc9c:	dd001c15 	stw	r20,112(sp)
    bca0:	d8c01b15 	stw	r3,108(sp)
    bca4:	d811883a 	mov	r8,sp
    bca8:	42000204 	addi	r8,r8,8
    bcac:	8c40010c 	andi	r17,r17,4
    bcb0:	88004026 	beq	r17,zero,bdb4 <___vfiprintf_internal_r+0xe24>
    bcb4:	d9002517 	ldw	r4,148(sp)
    bcb8:	24e3c83a 	sub	r17,r4,r19
    bcbc:	04403d0e 	bge	zero,r17,bdb4 <___vfiprintf_internal_r+0xe24>
    bcc0:	04000404 	movi	r16,16
    bcc4:	8441a90e 	bge	r16,r17,c36c <___vfiprintf_internal_r+0x13dc>
    bcc8:	00c00074 	movhi	r3,1
    bccc:	18d4a304 	addi	r3,r3,21132
    bcd0:	d9001b17 	ldw	r4,108(sp)
    bcd4:	d8c02315 	stw	r3,140(sp)
    bcd8:	050001c4 	movi	r20,7
    bcdc:	dd402117 	ldw	r21,132(sp)
    bce0:	ddc02017 	ldw	r23,128(sp)
    bce4:	00000506 	br	bcfc <___vfiprintf_internal_r+0xd6c>
    bce8:	21400084 	addi	r5,r4,2
    bcec:	42000204 	addi	r8,r8,8
    bcf0:	1809883a 	mov	r4,r3
    bcf4:	8c7ffc04 	addi	r17,r17,-16
    bcf8:	84400f0e 	bge	r16,r17,bd38 <___vfiprintf_internal_r+0xda8>
    bcfc:	01400074 	movhi	r5,1
    bd00:	10800404 	addi	r2,r2,16
    bd04:	20c00044 	addi	r3,r4,1
    bd08:	2954a304 	addi	r5,r5,21132
    bd0c:	41400015 	stw	r5,0(r8)
    bd10:	44000115 	stw	r16,4(r8)
    bd14:	d8801c15 	stw	r2,112(sp)
    bd18:	d8c01b15 	stw	r3,108(sp)
    bd1c:	a0fff20e 	bge	r20,r3,bce8 <__alt_data_end+0xfc00bce8>
    bd20:	1000141e 	bne	r2,zero,bd74 <___vfiprintf_internal_r+0xde4>
    bd24:	8c7ffc04 	addi	r17,r17,-16
    bd28:	01400044 	movi	r5,1
    bd2c:	0009883a 	mov	r4,zero
    bd30:	d811883a 	mov	r8,sp
    bd34:	847ff116 	blt	r16,r17,bcfc <__alt_data_end+0xfc00bcfc>
    bd38:	d8c02317 	ldw	r3,140(sp)
    bd3c:	1445883a 	add	r2,r2,r17
    bd40:	44400115 	stw	r17,4(r8)
    bd44:	40c00015 	stw	r3,0(r8)
    bd48:	d8801c15 	stw	r2,112(sp)
    bd4c:	d9401b15 	stw	r5,108(sp)
    bd50:	00c001c4 	movi	r3,7
    bd54:	1940170e 	bge	r3,r5,bdb4 <___vfiprintf_internal_r+0xe24>
    bd58:	1000101e 	bne	r2,zero,bd9c <___vfiprintf_internal_r+0xe0c>
    bd5c:	d8802517 	ldw	r2,148(sp)
    bd60:	14c11616 	blt	r2,r19,c1bc <___vfiprintf_internal_r+0x122c>
    bd64:	d9002417 	ldw	r4,144(sp)
    bd68:	2089883a 	add	r4,r4,r2
    bd6c:	d9002415 	stw	r4,144(sp)
    bd70:	003e1806 	br	b5d4 <__alt_data_end+0xfc00b5d4>
    bd74:	d9801a04 	addi	r6,sp,104
    bd78:	b80b883a 	mov	r5,r23
    bd7c:	a809883a 	mov	r4,r21
    bd80:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bd84:	103fba1e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bd88:	d9001b17 	ldw	r4,108(sp)
    bd8c:	d8801c17 	ldw	r2,112(sp)
    bd90:	d811883a 	mov	r8,sp
    bd94:	21400044 	addi	r5,r4,1
    bd98:	003fd606 	br	bcf4 <__alt_data_end+0xfc00bcf4>
    bd9c:	d9402017 	ldw	r5,128(sp)
    bda0:	d9002117 	ldw	r4,132(sp)
    bda4:	d9801a04 	addi	r6,sp,104
    bda8:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bdac:	103fb01e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bdb0:	d8801c17 	ldw	r2,112(sp)
    bdb4:	d8c02517 	ldw	r3,148(sp)
    bdb8:	1cc0010e 	bge	r3,r19,bdc0 <___vfiprintf_internal_r+0xe30>
    bdbc:	9807883a 	mov	r3,r19
    bdc0:	d9002417 	ldw	r4,144(sp)
    bdc4:	20c9883a 	add	r4,r4,r3
    bdc8:	d9002415 	stw	r4,144(sp)
    bdcc:	103e0126 	beq	r2,zero,b5d4 <__alt_data_end+0xfc00b5d4>
    bdd0:	d9402017 	ldw	r5,128(sp)
    bdd4:	d9002117 	ldw	r4,132(sp)
    bdd8:	d9801a04 	addi	r6,sp,104
    bddc:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bde0:	103dfc26 	beq	r2,zero,b5d4 <__alt_data_end+0xfc00b5d4>
    bde4:	003fa206 	br	bc70 <__alt_data_end+0xfc00bc70>
    bde8:	d9402017 	ldw	r5,128(sp)
    bdec:	d9002117 	ldw	r4,132(sp)
    bdf0:	d9801a04 	addi	r6,sp,104
    bdf4:	d9c02b15 	stw	r7,172(sp)
    bdf8:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bdfc:	d9c02b17 	ldw	r7,172(sp)
    be00:	103f9b1e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    be04:	d9001b17 	ldw	r4,108(sp)
    be08:	d8801c17 	ldw	r2,112(sp)
    be0c:	d811883a 	mov	r8,sp
    be10:	21800044 	addi	r6,r4,1
    be14:	003dbf06 	br	b514 <__alt_data_end+0xfc00b514>
    be18:	1000d81e 	bne	r2,zero,c17c <___vfiprintf_internal_r+0x11ec>
    be1c:	d9001d87 	ldb	r4,118(sp)
    be20:	20000a26 	beq	r4,zero,be4c <___vfiprintf_internal_r+0xebc>
    be24:	00800044 	movi	r2,1
    be28:	d9001d84 	addi	r4,sp,118
    be2c:	100b883a 	mov	r5,r2
    be30:	d9000015 	stw	r4,0(sp)
    be34:	d8800115 	stw	r2,4(sp)
    be38:	d811883a 	mov	r8,sp
    be3c:	2809883a 	mov	r4,r5
    be40:	42000204 	addi	r8,r8,8
    be44:	29400044 	addi	r5,r5,1
    be48:	003d9506 	br	b4a0 <__alt_data_end+0xfc00b4a0>
    be4c:	3800fd26 	beq	r7,zero,c244 <___vfiprintf_internal_r+0x12b4>
    be50:	00800084 	movi	r2,2
    be54:	d9001d04 	addi	r4,sp,116
    be58:	d9000015 	stw	r4,0(sp)
    be5c:	d8800115 	stw	r2,4(sp)
    be60:	01400044 	movi	r5,1
    be64:	d811883a 	mov	r8,sp
    be68:	2809883a 	mov	r4,r5
    be6c:	42000204 	addi	r8,r8,8
    be70:	29400044 	addi	r5,r5,1
    be74:	003f4606 	br	bb90 <__alt_data_end+0xfc00bb90>
    be78:	d8802517 	ldw	r2,148(sp)
    be7c:	14c0010e 	bge	r2,r19,be84 <___vfiprintf_internal_r+0xef4>
    be80:	9805883a 	mov	r2,r19
    be84:	d9402417 	ldw	r5,144(sp)
    be88:	288b883a 	add	r5,r5,r2
    be8c:	d9402415 	stw	r5,144(sp)
    be90:	003dd006 	br	b5d4 <__alt_data_end+0xfc00b5d4>
    be94:	d8001d85 	stb	zero,118(sp)
    be98:	80005d16 	blt	r16,zero,c010 <___vfiprintf_internal_r+0x1080>
    be9c:	00ffdfc4 	movi	r3,-129
    bea0:	9d04b03a 	or	r2,r19,r20
    bea4:	88e2703a 	and	r17,r17,r3
    bea8:	103d3726 	beq	r2,zero,b388 <__alt_data_end+0xfc00b388>
    beac:	002b883a 	mov	r21,zero
    beb0:	d9002617 	ldw	r4,152(sp)
    beb4:	ddc01a04 	addi	r23,sp,104
    beb8:	988003cc 	andi	r2,r19,15
    bebc:	a006973a 	slli	r3,r20,28
    bec0:	2085883a 	add	r2,r4,r2
    bec4:	9826d13a 	srli	r19,r19,4
    bec8:	10800003 	ldbu	r2,0(r2)
    becc:	a028d13a 	srli	r20,r20,4
    bed0:	bdffffc4 	addi	r23,r23,-1
    bed4:	1ce6b03a 	or	r19,r3,r19
    bed8:	b8800005 	stb	r2,0(r23)
    bedc:	9d04b03a 	or	r2,r19,r20
    bee0:	103ff51e 	bne	r2,zero,beb8 <__alt_data_end+0xfc00beb8>
    bee4:	d8801e17 	ldw	r2,120(sp)
    bee8:	15e9c83a 	sub	r20,r2,r23
    beec:	003d2b06 	br	b39c <__alt_data_end+0xfc00b39c>
    bef0:	d9402017 	ldw	r5,128(sp)
    bef4:	d9002117 	ldw	r4,132(sp)
    bef8:	d9801a04 	addi	r6,sp,104
    befc:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bf00:	103f5b1e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bf04:	d8801c17 	ldw	r2,112(sp)
    bf08:	d811883a 	mov	r8,sp
    bf0c:	003f6706 	br	bcac <__alt_data_end+0xfc00bcac>
    bf10:	d9402017 	ldw	r5,128(sp)
    bf14:	d9002117 	ldw	r4,132(sp)
    bf18:	d9801a04 	addi	r6,sp,104
    bf1c:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bf20:	103f531e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bf24:	d811883a 	mov	r8,sp
    bf28:	003cd906 	br	b290 <__alt_data_end+0xfc00b290>
    bf2c:	10803fcc 	andi	r2,r2,255
    bf30:	1080201c 	xori	r2,r2,128
    bf34:	10bfe004 	addi	r2,r2,-128
    bf38:	00c00c04 	movi	r3,48
    bf3c:	10ffe926 	beq	r2,r3,bee4 <__alt_data_end+0xfc00bee4>
    bf40:	b8ffffc5 	stb	r3,-1(r23)
    bf44:	d8c01e17 	ldw	r3,120(sp)
    bf48:	b8bfffc4 	addi	r2,r23,-1
    bf4c:	102f883a 	mov	r23,r2
    bf50:	18a9c83a 	sub	r20,r3,r2
    bf54:	003d1106 	br	b39c <__alt_data_end+0xfc00b39c>
    bf58:	d9402017 	ldw	r5,128(sp)
    bf5c:	d9002117 	ldw	r4,132(sp)
    bf60:	d9801a04 	addi	r6,sp,104
    bf64:	d8c02a15 	stw	r3,168(sp)
    bf68:	d9c02b15 	stw	r7,172(sp)
    bf6c:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bf70:	d8c02a17 	ldw	r3,168(sp)
    bf74:	d9c02b17 	ldw	r7,172(sp)
    bf78:	103f3d1e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bf7c:	d9001b17 	ldw	r4,108(sp)
    bf80:	d8801c17 	ldw	r2,112(sp)
    bf84:	d811883a 	mov	r8,sp
    bf88:	21400044 	addi	r5,r4,1
    bf8c:	003d4406 	br	b4a0 <__alt_data_end+0xfc00b4a0>
    bf90:	d9402017 	ldw	r5,128(sp)
    bf94:	d9002117 	ldw	r4,132(sp)
    bf98:	d9801a04 	addi	r6,sp,104
    bf9c:	d8c02a15 	stw	r3,168(sp)
    bfa0:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bfa4:	d8c02a17 	ldw	r3,168(sp)
    bfa8:	103f311e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bfac:	d9001b17 	ldw	r4,108(sp)
    bfb0:	d8801c17 	ldw	r2,112(sp)
    bfb4:	d811883a 	mov	r8,sp
    bfb8:	21400044 	addi	r5,r4,1
    bfbc:	003ef406 	br	bb90 <__alt_data_end+0xfc00bb90>
    bfc0:	1000bd1e 	bne	r2,zero,c2b8 <___vfiprintf_internal_r+0x1328>
    bfc4:	01400044 	movi	r5,1
    bfc8:	0009883a 	mov	r4,zero
    bfcc:	d811883a 	mov	r8,sp
    bfd0:	003ef106 	br	bb98 <__alt_data_end+0xfc00bb98>
    bfd4:	d9402017 	ldw	r5,128(sp)
    bfd8:	d9002117 	ldw	r4,132(sp)
    bfdc:	d9801a04 	addi	r6,sp,104
    bfe0:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    bfe4:	103f221e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    bfe8:	d9401b17 	ldw	r5,108(sp)
    bfec:	d8801c17 	ldw	r2,112(sp)
    bff0:	d811883a 	mov	r8,sp
    bff4:	29400044 	addi	r5,r5,1
    bff8:	003d6206 	br	b584 <__alt_data_end+0xfc00b584>
    bffc:	01400074 	movhi	r5,1
    c000:	29543e04 	addi	r5,r5,20728
    c004:	d9402615 	stw	r5,152(sp)
    c008:	d8c02215 	stw	r3,136(sp)
    c00c:	1023883a 	mov	r17,r2
    c010:	9d04b03a 	or	r2,r19,r20
    c014:	103fa51e 	bne	r2,zero,beac <__alt_data_end+0xfc00beac>
    c018:	002b883a 	mov	r21,zero
    c01c:	00800084 	movi	r2,2
    c020:	003e4a06 	br	b94c <__alt_data_end+0xfc00b94c>
    c024:	01400074 	movhi	r5,1
    c028:	29543e04 	addi	r5,r5,20728
    c02c:	002b883a 	mov	r21,zero
    c030:	d9402615 	stw	r5,152(sp)
    c034:	003f9e06 	br	beb0 <__alt_data_end+0xfc00beb0>
    c038:	d9402217 	ldw	r5,136(sp)
    c03c:	d8001d85 	stb	zero,118(sp)
    c040:	0029883a 	mov	r20,zero
    c044:	28800104 	addi	r2,r5,4
    c048:	2cc00017 	ldw	r19,0(r5)
    c04c:	803e3a16 	blt	r16,zero,b938 <__alt_data_end+0xfc00b938>
    c050:	00ffdfc4 	movi	r3,-129
    c054:	d8802215 	stw	r2,136(sp)
    c058:	88e2703a 	and	r17,r17,r3
    c05c:	002b883a 	mov	r21,zero
    c060:	983e9b26 	beq	r19,zero,bad0 <__alt_data_end+0xfc00bad0>
    c064:	00800244 	movi	r2,9
    c068:	14fdc936 	bltu	r2,r19,b790 <__alt_data_end+0xfc00b790>
    c06c:	003e9a06 	br	bad8 <__alt_data_end+0xfc00bad8>
    c070:	00800c04 	movi	r2,48
    c074:	d8c01d45 	stb	r3,117(sp)
    c078:	d8801d05 	stb	r2,116(sp)
    c07c:	d8001d85 	stb	zero,118(sp)
    c080:	88c00094 	ori	r3,r17,2
    c084:	80009c16 	blt	r16,zero,c2f8 <___vfiprintf_internal_r+0x1368>
    c088:	00bfdfc4 	movi	r2,-129
    c08c:	88a2703a 	and	r17,r17,r2
    c090:	8c400094 	ori	r17,r17,2
    c094:	002b883a 	mov	r21,zero
    c098:	003f8506 	br	beb0 <__alt_data_end+0xfc00beb0>
    c09c:	b029883a 	mov	r20,r22
    c0a0:	003c0b06 	br	b0d0 <__alt_data_end+0xfc00b0d0>
    c0a4:	04e7c83a 	sub	r19,zero,r19
    c0a8:	05400b44 	movi	r21,45
    c0ac:	9804c03a 	cmpne	r2,r19,zero
    c0b0:	0529c83a 	sub	r20,zero,r20
    c0b4:	dd401d85 	stb	r21,118(sp)
    c0b8:	a0a9c83a 	sub	r20,r20,r2
    c0bc:	80009716 	blt	r16,zero,c31c <___vfiprintf_internal_r+0x138c>
    c0c0:	00bfdfc4 	movi	r2,-129
    c0c4:	88a2703a 	and	r17,r17,r2
    c0c8:	003db006 	br	b78c <__alt_data_end+0xfc00b78c>
    c0cc:	b0c00007 	ldb	r3,0(r22)
    c0d0:	003c0c06 	br	b104 <__alt_data_end+0xfc00b104>
    c0d4:	8880100c 	andi	r2,r17,64
    c0d8:	d8001d85 	stb	zero,118(sp)
    c0dc:	1000461e 	bne	r2,zero,c1f8 <___vfiprintf_internal_r+0x1268>
    c0e0:	d9002217 	ldw	r4,136(sp)
    c0e4:	0029883a 	mov	r20,zero
    c0e8:	20800104 	addi	r2,r4,4
    c0ec:	24c00017 	ldw	r19,0(r4)
    c0f0:	803df80e 	bge	r16,zero,b8d4 <__alt_data_end+0xfc00b8d4>
    c0f4:	9d06b03a 	or	r3,r19,r20
    c0f8:	d8802215 	stw	r2,136(sp)
    c0fc:	183d5e1e 	bne	r3,zero,b678 <__alt_data_end+0xfc00b678>
    c100:	002b883a 	mov	r21,zero
    c104:	0005883a 	mov	r2,zero
    c108:	003e1006 	br	b94c <__alt_data_end+0xfc00b94c>
    c10c:	8880040c 	andi	r2,r17,16
    c110:	1000321e 	bne	r2,zero,c1dc <___vfiprintf_internal_r+0x124c>
    c114:	8c40100c 	andi	r17,r17,64
    c118:	88008d26 	beq	r17,zero,c350 <___vfiprintf_internal_r+0x13c0>
    c11c:	d9402217 	ldw	r5,136(sp)
    c120:	d8c02417 	ldw	r3,144(sp)
    c124:	28800017 	ldw	r2,0(r5)
    c128:	29400104 	addi	r5,r5,4
    c12c:	d9402215 	stw	r5,136(sp)
    c130:	10c0000d 	sth	r3,0(r2)
    c134:	003bca06 	br	b060 <__alt_data_end+0xfc00b060>
    c138:	8880100c 	andi	r2,r17,64
    c13c:	10003a26 	beq	r2,zero,c228 <___vfiprintf_internal_r+0x1298>
    c140:	d8802217 	ldw	r2,136(sp)
    c144:	14c0000f 	ldh	r19,0(r2)
    c148:	10800104 	addi	r2,r2,4
    c14c:	d8802215 	stw	r2,136(sp)
    c150:	9829d7fa 	srai	r20,r19,31
    c154:	a005883a 	mov	r2,r20
    c158:	003d8506 	br	b770 <__alt_data_end+0xfc00b770>
    c15c:	8880100c 	andi	r2,r17,64
    c160:	10002b26 	beq	r2,zero,c210 <___vfiprintf_internal_r+0x1280>
    c164:	d8802217 	ldw	r2,136(sp)
    c168:	0029883a 	mov	r20,zero
    c16c:	14c0000b 	ldhu	r19,0(r2)
    c170:	10800104 	addi	r2,r2,4
    c174:	d8802215 	stw	r2,136(sp)
    c178:	003d5d06 	br	b6f0 <__alt_data_end+0xfc00b6f0>
    c17c:	d9402017 	ldw	r5,128(sp)
    c180:	d9002117 	ldw	r4,132(sp)
    c184:	d9801a04 	addi	r6,sp,104
    c188:	d8c02a15 	stw	r3,168(sp)
    c18c:	d9c02b15 	stw	r7,172(sp)
    c190:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    c194:	d8c02a17 	ldw	r3,168(sp)
    c198:	d9c02b17 	ldw	r7,172(sp)
    c19c:	103eb41e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    c1a0:	d9001b17 	ldw	r4,108(sp)
    c1a4:	d8801c17 	ldw	r2,112(sp)
    c1a8:	d811883a 	mov	r8,sp
    c1ac:	21400044 	addi	r5,r4,1
    c1b0:	003e6706 	br	bb50 <__alt_data_end+0xfc00bb50>
    c1b4:	00bfffc4 	movi	r2,-1
    c1b8:	003c4a06 	br	b2e4 <__alt_data_end+0xfc00b2e4>
    c1bc:	9805883a 	mov	r2,r19
    c1c0:	003ee806 	br	bd64 <__alt_data_end+0xfc00bd64>
    c1c4:	d8c02217 	ldw	r3,136(sp)
    c1c8:	0029883a 	mov	r20,zero
    c1cc:	18800104 	addi	r2,r3,4
    c1d0:	1cc0000b 	ldhu	r19,0(r3)
    c1d4:	803f9e0e 	bge	r16,zero,c050 <__alt_data_end+0xfc00c050>
    c1d8:	003dd706 	br	b938 <__alt_data_end+0xfc00b938>
    c1dc:	d8c02217 	ldw	r3,136(sp)
    c1e0:	d9002417 	ldw	r4,144(sp)
    c1e4:	18800017 	ldw	r2,0(r3)
    c1e8:	18c00104 	addi	r3,r3,4
    c1ec:	d8c02215 	stw	r3,136(sp)
    c1f0:	11000015 	stw	r4,0(r2)
    c1f4:	003b9a06 	br	b060 <__alt_data_end+0xfc00b060>
    c1f8:	d8c02217 	ldw	r3,136(sp)
    c1fc:	0029883a 	mov	r20,zero
    c200:	18800104 	addi	r2,r3,4
    c204:	1cc0000b 	ldhu	r19,0(r3)
    c208:	803db20e 	bge	r16,zero,b8d4 <__alt_data_end+0xfc00b8d4>
    c20c:	003fb906 	br	c0f4 <__alt_data_end+0xfc00c0f4>
    c210:	d9002217 	ldw	r4,136(sp)
    c214:	0029883a 	mov	r20,zero
    c218:	24c00017 	ldw	r19,0(r4)
    c21c:	21000104 	addi	r4,r4,4
    c220:	d9002215 	stw	r4,136(sp)
    c224:	003d3206 	br	b6f0 <__alt_data_end+0xfc00b6f0>
    c228:	d8c02217 	ldw	r3,136(sp)
    c22c:	1cc00017 	ldw	r19,0(r3)
    c230:	18c00104 	addi	r3,r3,4
    c234:	d8c02215 	stw	r3,136(sp)
    c238:	9829d7fa 	srai	r20,r19,31
    c23c:	a005883a 	mov	r2,r20
    c240:	003d4b06 	br	b770 <__alt_data_end+0xfc00b770>
    c244:	0009883a 	mov	r4,zero
    c248:	01400044 	movi	r5,1
    c24c:	d811883a 	mov	r8,sp
    c250:	003e4f06 	br	bb90 <__alt_data_end+0xfc00bb90>
    c254:	d8c02215 	stw	r3,136(sp)
    c258:	002b883a 	mov	r21,zero
    c25c:	003db806 	br	b940 <__alt_data_end+0xfc00b940>
    c260:	d811883a 	mov	r8,sp
    c264:	003e9606 	br	bcc0 <__alt_data_end+0xfc00bcc0>
    c268:	01000074 	movhi	r4,1
    c26c:	21149f04 	addi	r4,r4,21116
    c270:	d9002315 	stw	r4,140(sp)
    c274:	003e6306 	br	bc04 <__alt_data_end+0xfc00bc04>
    c278:	b0c00043 	ldbu	r3,1(r22)
    c27c:	8c400814 	ori	r17,r17,32
    c280:	b5800044 	addi	r22,r22,1
    c284:	18c03fcc 	andi	r3,r3,255
    c288:	18c0201c 	xori	r3,r3,128
    c28c:	18ffe004 	addi	r3,r3,-128
    c290:	003b9c06 	br	b104 <__alt_data_end+0xfc00b104>
    c294:	b809883a 	mov	r4,r23
    c298:	da002a15 	stw	r8,168(sp)
    c29c:	00035980 	call	3598 <strlen>
    c2a0:	1029883a 	mov	r20,r2
    c2a4:	dd401d83 	ldbu	r21,118(sp)
    c2a8:	df002215 	stw	fp,136(sp)
    c2ac:	0021883a 	mov	r16,zero
    c2b0:	da002a17 	ldw	r8,168(sp)
    c2b4:	003c3906 	br	b39c <__alt_data_end+0xfc00b39c>
    c2b8:	d9402017 	ldw	r5,128(sp)
    c2bc:	d9002117 	ldw	r4,132(sp)
    c2c0:	d9801a04 	addi	r6,sp,104
    c2c4:	000ae7c0 	call	ae7c <__sprint_r.part.0>
    c2c8:	103e691e 	bne	r2,zero,bc70 <__alt_data_end+0xfc00bc70>
    c2cc:	d9001b17 	ldw	r4,108(sp)
    c2d0:	d8801c17 	ldw	r2,112(sp)
    c2d4:	d811883a 	mov	r8,sp
    c2d8:	21400044 	addi	r5,r4,1
    c2dc:	003e2e06 	br	bb98 <__alt_data_end+0xfc00bb98>
    c2e0:	01000074 	movhi	r4,1
    c2e4:	2114a304 	addi	r4,r4,21132
    c2e8:	d9002315 	stw	r4,140(sp)
    c2ec:	d9001b17 	ldw	r4,108(sp)
    c2f0:	21000044 	addi	r4,r4,1
    c2f4:	003c5e06 	br	b470 <__alt_data_end+0xfc00b470>
    c2f8:	002b883a 	mov	r21,zero
    c2fc:	00800084 	movi	r2,2
    c300:	10803fcc 	andi	r2,r2,255
    c304:	01000044 	movi	r4,1
    c308:	11002b26 	beq	r2,r4,c3b8 <___vfiprintf_internal_r+0x1428>
    c30c:	01000084 	movi	r4,2
    c310:	11002b1e 	bne	r2,r4,c3c0 <___vfiprintf_internal_r+0x1430>
    c314:	1823883a 	mov	r17,r3
    c318:	003ee506 	br	beb0 <__alt_data_end+0xfc00beb0>
    c31c:	8807883a 	mov	r3,r17
    c320:	00800044 	movi	r2,1
    c324:	003ff606 	br	c300 <__alt_data_end+0xfc00c300>
    c328:	00800184 	movi	r2,6
    c32c:	1400012e 	bgeu	r2,r16,c334 <___vfiprintf_internal_r+0x13a4>
    c330:	1021883a 	mov	r16,r2
    c334:	8029883a 	mov	r20,r16
    c338:	8027883a 	mov	r19,r16
    c33c:	80002216 	blt	r16,zero,c3c8 <___vfiprintf_internal_r+0x1438>
    c340:	05c00074 	movhi	r23,1
    c344:	df002215 	stw	fp,136(sp)
    c348:	bdd44304 	addi	r23,r23,20748
    c34c:	003cfb06 	br	b73c <__alt_data_end+0xfc00b73c>
    c350:	d9002217 	ldw	r4,136(sp)
    c354:	d9402417 	ldw	r5,144(sp)
    c358:	20800017 	ldw	r2,0(r4)
    c35c:	21000104 	addi	r4,r4,4
    c360:	d9002215 	stw	r4,136(sp)
    c364:	11400015 	stw	r5,0(r2)
    c368:	003b3d06 	br	b060 <__alt_data_end+0xfc00b060>
    c36c:	01400074 	movhi	r5,1
    c370:	2954a304 	addi	r5,r5,21132
    c374:	d9402315 	stw	r5,140(sp)
    c378:	d9401b17 	ldw	r5,108(sp)
    c37c:	29400044 	addi	r5,r5,1
    c380:	003e6d06 	br	bd38 <__alt_data_end+0xfc00bd38>
    c384:	8029883a 	mov	r20,r16
    c388:	dd401d83 	ldbu	r21,118(sp)
    c38c:	df002215 	stw	fp,136(sp)
    c390:	0021883a 	mov	r16,zero
    c394:	003c0106 	br	b39c <__alt_data_end+0xfc00b39c>
    c398:	00c00074 	movhi	r3,1
    c39c:	18d49f04 	addi	r3,r3,21116
    c3a0:	d8c02315 	stw	r3,140(sp)
    c3a4:	280d883a 	mov	r6,r5
    c3a8:	003c6906 	br	b550 <__alt_data_end+0xfc00b550>
    c3ac:	802d883a 	mov	r22,r16
    c3b0:	0021883a 	mov	r16,zero
    c3b4:	003b5406 	br	b108 <__alt_data_end+0xfc00b108>
    c3b8:	1823883a 	mov	r17,r3
    c3bc:	003cf306 	br	b78c <__alt_data_end+0xfc00b78c>
    c3c0:	1823883a 	mov	r17,r3
    c3c4:	003cad06 	br	b67c <__alt_data_end+0xfc00b67c>
    c3c8:	0027883a 	mov	r19,zero
    c3cc:	003fdc06 	br	c340 <__alt_data_end+0xfc00c340>
    c3d0:	d9402217 	ldw	r5,136(sp)
    c3d4:	8005883a 	mov	r2,r16
    c3d8:	b0c00043 	ldbu	r3,1(r22)
    c3dc:	2c000017 	ldw	r16,0(r5)
    c3e0:	29000104 	addi	r4,r5,4
    c3e4:	d9002215 	stw	r4,136(sp)
    c3e8:	102d883a 	mov	r22,r2
    c3ec:	803fa50e 	bge	r16,zero,c284 <__alt_data_end+0xfc00c284>
    c3f0:	18c03fcc 	andi	r3,r3,255
    c3f4:	18c0201c 	xori	r3,r3,128
    c3f8:	043fffc4 	movi	r16,-1
    c3fc:	18ffe004 	addi	r3,r3,-128
    c400:	003b4006 	br	b104 <__alt_data_end+0xfc00b104>
    c404:	d9402303 	ldbu	r5,140(sp)
    c408:	d9401d85 	stb	r5,118(sp)
    c40c:	003cae06 	br	b6c8 <__alt_data_end+0xfc00b6c8>
    c410:	d8c02303 	ldbu	r3,140(sp)
    c414:	d8c01d85 	stb	r3,118(sp)
    c418:	003d1406 	br	b86c <__alt_data_end+0xfc00b86c>
    c41c:	d8c02303 	ldbu	r3,140(sp)
    c420:	d8c01d85 	stb	r3,118(sp)
    c424:	003cca06 	br	b750 <__alt_data_end+0xfc00b750>
    c428:	8880004c 	andi	r2,r17,1
    c42c:	002b883a 	mov	r21,zero
    c430:	10000526 	beq	r2,zero,c448 <___vfiprintf_internal_r+0x14b8>
    c434:	00800c04 	movi	r2,48
    c438:	d88019c5 	stb	r2,103(sp)
    c43c:	dd002817 	ldw	r20,160(sp)
    c440:	ddc019c4 	addi	r23,sp,103
    c444:	003bd506 	br	b39c <__alt_data_end+0xfc00b39c>
    c448:	0029883a 	mov	r20,zero
    c44c:	ddc01a04 	addi	r23,sp,104
    c450:	003bd206 	br	b39c <__alt_data_end+0xfc00b39c>
    c454:	d9002303 	ldbu	r4,140(sp)
    c458:	d9001d85 	stb	r4,118(sp)
    c45c:	003da606 	br	baf8 <__alt_data_end+0xfc00baf8>
    c460:	d8c02303 	ldbu	r3,140(sp)
    c464:	d8c01d85 	stb	r3,118(sp)
    c468:	003c7606 	br	b644 <__alt_data_end+0xfc00b644>
    c46c:	d8c02303 	ldbu	r3,140(sp)
    c470:	d8c01d85 	stb	r3,118(sp)
    c474:	003c6506 	br	b60c <__alt_data_end+0xfc00b60c>
    c478:	d9002303 	ldbu	r4,140(sp)
    c47c:	d9001d85 	stb	r4,118(sp)
    c480:	003d3d06 	br	b978 <__alt_data_end+0xfc00b978>
    c484:	d8c02303 	ldbu	r3,140(sp)
    c488:	d8c01d85 	stb	r3,118(sp)
    c48c:	003d1d06 	br	b904 <__alt_data_end+0xfc00b904>
    c490:	d8c02303 	ldbu	r3,140(sp)
    c494:	d8c01d85 	stb	r3,118(sp)
    c498:	003d0306 	br	b8a8 <__alt_data_end+0xfc00b8a8>

0000c49c <__vfiprintf_internal>:
    c49c:	00800074 	movhi	r2,1
    c4a0:	109bc904 	addi	r2,r2,28452
    c4a4:	300f883a 	mov	r7,r6
    c4a8:	280d883a 	mov	r6,r5
    c4ac:	200b883a 	mov	r5,r4
    c4b0:	11000017 	ldw	r4,0(r2)
    c4b4:	000af901 	jmpi	af90 <___vfiprintf_internal_r>

0000c4b8 <__sbprintf>:
    c4b8:	2880030b 	ldhu	r2,12(r5)
    c4bc:	2ac01917 	ldw	r11,100(r5)
    c4c0:	2a80038b 	ldhu	r10,14(r5)
    c4c4:	2a400717 	ldw	r9,28(r5)
    c4c8:	2a000917 	ldw	r8,36(r5)
    c4cc:	defee204 	addi	sp,sp,-1144
    c4d0:	00c10004 	movi	r3,1024
    c4d4:	dc011a15 	stw	r16,1128(sp)
    c4d8:	10bfff4c 	andi	r2,r2,65533
    c4dc:	2821883a 	mov	r16,r5
    c4e0:	d8cb883a 	add	r5,sp,r3
    c4e4:	dc811c15 	stw	r18,1136(sp)
    c4e8:	dc411b15 	stw	r17,1132(sp)
    c4ec:	dfc11d15 	stw	ra,1140(sp)
    c4f0:	2025883a 	mov	r18,r4
    c4f4:	d881030d 	sth	r2,1036(sp)
    c4f8:	dac11915 	stw	r11,1124(sp)
    c4fc:	da81038d 	sth	r10,1038(sp)
    c500:	da410715 	stw	r9,1052(sp)
    c504:	da010915 	stw	r8,1060(sp)
    c508:	dec10015 	stw	sp,1024(sp)
    c50c:	dec10415 	stw	sp,1040(sp)
    c510:	d8c10215 	stw	r3,1032(sp)
    c514:	d8c10515 	stw	r3,1044(sp)
    c518:	d8010615 	stw	zero,1048(sp)
    c51c:	000af900 	call	af90 <___vfiprintf_internal_r>
    c520:	1023883a 	mov	r17,r2
    c524:	10000416 	blt	r2,zero,c538 <__sbprintf+0x80>
    c528:	d9410004 	addi	r5,sp,1024
    c52c:	9009883a 	mov	r4,r18
    c530:	00076040 	call	7604 <_fflush_r>
    c534:	10000d1e 	bne	r2,zero,c56c <__sbprintf+0xb4>
    c538:	d881030b 	ldhu	r2,1036(sp)
    c53c:	1080100c 	andi	r2,r2,64
    c540:	10000326 	beq	r2,zero,c550 <__sbprintf+0x98>
    c544:	8080030b 	ldhu	r2,12(r16)
    c548:	10801014 	ori	r2,r2,64
    c54c:	8080030d 	sth	r2,12(r16)
    c550:	8805883a 	mov	r2,r17
    c554:	dfc11d17 	ldw	ra,1140(sp)
    c558:	dc811c17 	ldw	r18,1136(sp)
    c55c:	dc411b17 	ldw	r17,1132(sp)
    c560:	dc011a17 	ldw	r16,1128(sp)
    c564:	dec11e04 	addi	sp,sp,1144
    c568:	f800283a 	ret
    c56c:	047fffc4 	movi	r17,-1
    c570:	003ff106 	br	c538 <__alt_data_end+0xfc00c538>

0000c574 <__swbuf_r>:
    c574:	defffb04 	addi	sp,sp,-20
    c578:	dcc00315 	stw	r19,12(sp)
    c57c:	dc800215 	stw	r18,8(sp)
    c580:	dc000015 	stw	r16,0(sp)
    c584:	dfc00415 	stw	ra,16(sp)
    c588:	dc400115 	stw	r17,4(sp)
    c58c:	2025883a 	mov	r18,r4
    c590:	2827883a 	mov	r19,r5
    c594:	3021883a 	mov	r16,r6
    c598:	20000226 	beq	r4,zero,c5a4 <__swbuf_r+0x30>
    c59c:	20800e17 	ldw	r2,56(r4)
    c5a0:	10004226 	beq	r2,zero,c6ac <__swbuf_r+0x138>
    c5a4:	80800617 	ldw	r2,24(r16)
    c5a8:	8100030b 	ldhu	r4,12(r16)
    c5ac:	80800215 	stw	r2,8(r16)
    c5b0:	2080020c 	andi	r2,r4,8
    c5b4:	10003626 	beq	r2,zero,c690 <__swbuf_r+0x11c>
    c5b8:	80c00417 	ldw	r3,16(r16)
    c5bc:	18003426 	beq	r3,zero,c690 <__swbuf_r+0x11c>
    c5c0:	2088000c 	andi	r2,r4,8192
    c5c4:	9c403fcc 	andi	r17,r19,255
    c5c8:	10001a26 	beq	r2,zero,c634 <__swbuf_r+0xc0>
    c5cc:	80800017 	ldw	r2,0(r16)
    c5d0:	81000517 	ldw	r4,20(r16)
    c5d4:	10c7c83a 	sub	r3,r2,r3
    c5d8:	1900200e 	bge	r3,r4,c65c <__swbuf_r+0xe8>
    c5dc:	18c00044 	addi	r3,r3,1
    c5e0:	81000217 	ldw	r4,8(r16)
    c5e4:	11400044 	addi	r5,r2,1
    c5e8:	81400015 	stw	r5,0(r16)
    c5ec:	213fffc4 	addi	r4,r4,-1
    c5f0:	81000215 	stw	r4,8(r16)
    c5f4:	14c00005 	stb	r19,0(r2)
    c5f8:	80800517 	ldw	r2,20(r16)
    c5fc:	10c01e26 	beq	r2,r3,c678 <__swbuf_r+0x104>
    c600:	8080030b 	ldhu	r2,12(r16)
    c604:	1080004c 	andi	r2,r2,1
    c608:	10000226 	beq	r2,zero,c614 <__swbuf_r+0xa0>
    c60c:	00800284 	movi	r2,10
    c610:	88801926 	beq	r17,r2,c678 <__swbuf_r+0x104>
    c614:	8805883a 	mov	r2,r17
    c618:	dfc00417 	ldw	ra,16(sp)
    c61c:	dcc00317 	ldw	r19,12(sp)
    c620:	dc800217 	ldw	r18,8(sp)
    c624:	dc400117 	ldw	r17,4(sp)
    c628:	dc000017 	ldw	r16,0(sp)
    c62c:	dec00504 	addi	sp,sp,20
    c630:	f800283a 	ret
    c634:	81401917 	ldw	r5,100(r16)
    c638:	00b7ffc4 	movi	r2,-8193
    c63c:	21080014 	ori	r4,r4,8192
    c640:	2884703a 	and	r2,r5,r2
    c644:	80801915 	stw	r2,100(r16)
    c648:	80800017 	ldw	r2,0(r16)
    c64c:	8100030d 	sth	r4,12(r16)
    c650:	81000517 	ldw	r4,20(r16)
    c654:	10c7c83a 	sub	r3,r2,r3
    c658:	193fe016 	blt	r3,r4,c5dc <__alt_data_end+0xfc00c5dc>
    c65c:	800b883a 	mov	r5,r16
    c660:	9009883a 	mov	r4,r18
    c664:	00076040 	call	7604 <_fflush_r>
    c668:	1000071e 	bne	r2,zero,c688 <__swbuf_r+0x114>
    c66c:	80800017 	ldw	r2,0(r16)
    c670:	00c00044 	movi	r3,1
    c674:	003fda06 	br	c5e0 <__alt_data_end+0xfc00c5e0>
    c678:	800b883a 	mov	r5,r16
    c67c:	9009883a 	mov	r4,r18
    c680:	00076040 	call	7604 <_fflush_r>
    c684:	103fe326 	beq	r2,zero,c614 <__alt_data_end+0xfc00c614>
    c688:	00bfffc4 	movi	r2,-1
    c68c:	003fe206 	br	c618 <__alt_data_end+0xfc00c618>
    c690:	800b883a 	mov	r5,r16
    c694:	9009883a 	mov	r4,r18
    c698:	00059e40 	call	59e4 <__swsetup_r>
    c69c:	103ffa1e 	bne	r2,zero,c688 <__alt_data_end+0xfc00c688>
    c6a0:	8100030b 	ldhu	r4,12(r16)
    c6a4:	80c00417 	ldw	r3,16(r16)
    c6a8:	003fc506 	br	c5c0 <__alt_data_end+0xfc00c5c0>
    c6ac:	00079f00 	call	79f0 <__sinit>
    c6b0:	003fbc06 	br	c5a4 <__alt_data_end+0xfc00c5a4>

0000c6b4 <__swbuf>:
    c6b4:	00800074 	movhi	r2,1
    c6b8:	109bc904 	addi	r2,r2,28452
    c6bc:	280d883a 	mov	r6,r5
    c6c0:	200b883a 	mov	r5,r4
    c6c4:	11000017 	ldw	r4,0(r2)
    c6c8:	000c5741 	jmpi	c574 <__swbuf_r>

0000c6cc <_write_r>:
    c6cc:	defffd04 	addi	sp,sp,-12
    c6d0:	2805883a 	mov	r2,r5
    c6d4:	dc000015 	stw	r16,0(sp)
    c6d8:	040000b4 	movhi	r16,2
    c6dc:	dc400115 	stw	r17,4(sp)
    c6e0:	300b883a 	mov	r5,r6
    c6e4:	8422c104 	addi	r16,r16,-29948
    c6e8:	2023883a 	mov	r17,r4
    c6ec:	380d883a 	mov	r6,r7
    c6f0:	1009883a 	mov	r4,r2
    c6f4:	dfc00215 	stw	ra,8(sp)
    c6f8:	80000015 	stw	zero,0(r16)
    c6fc:	0010d8c0 	call	10d8c <write>
    c700:	00ffffc4 	movi	r3,-1
    c704:	10c00526 	beq	r2,r3,c71c <_write_r+0x50>
    c708:	dfc00217 	ldw	ra,8(sp)
    c70c:	dc400117 	ldw	r17,4(sp)
    c710:	dc000017 	ldw	r16,0(sp)
    c714:	dec00304 	addi	sp,sp,12
    c718:	f800283a 	ret
    c71c:	80c00017 	ldw	r3,0(r16)
    c720:	183ff926 	beq	r3,zero,c708 <__alt_data_end+0xfc00c708>
    c724:	88c00015 	stw	r3,0(r17)
    c728:	003ff706 	br	c708 <__alt_data_end+0xfc00c708>

0000c72c <_close_r>:
    c72c:	defffd04 	addi	sp,sp,-12
    c730:	dc000015 	stw	r16,0(sp)
    c734:	040000b4 	movhi	r16,2
    c738:	dc400115 	stw	r17,4(sp)
    c73c:	8422c104 	addi	r16,r16,-29948
    c740:	2023883a 	mov	r17,r4
    c744:	2809883a 	mov	r4,r5
    c748:	dfc00215 	stw	ra,8(sp)
    c74c:	80000015 	stw	zero,0(r16)
    c750:	00103600 	call	10360 <close>
    c754:	00ffffc4 	movi	r3,-1
    c758:	10c00526 	beq	r2,r3,c770 <_close_r+0x44>
    c75c:	dfc00217 	ldw	ra,8(sp)
    c760:	dc400117 	ldw	r17,4(sp)
    c764:	dc000017 	ldw	r16,0(sp)
    c768:	dec00304 	addi	sp,sp,12
    c76c:	f800283a 	ret
    c770:	80c00017 	ldw	r3,0(r16)
    c774:	183ff926 	beq	r3,zero,c75c <__alt_data_end+0xfc00c75c>
    c778:	88c00015 	stw	r3,0(r17)
    c77c:	003ff706 	br	c75c <__alt_data_end+0xfc00c75c>

0000c780 <_calloc_r>:
    c780:	defffe04 	addi	sp,sp,-8
    c784:	2805883a 	mov	r2,r5
    c788:	dc000015 	stw	r16,0(sp)
    c78c:	300b883a 	mov	r5,r6
    c790:	2021883a 	mov	r16,r4
    c794:	1009883a 	mov	r4,r2
    c798:	dfc00115 	stw	ra,4(sp)
    c79c:	00034100 	call	3410 <__mulsi3>
    c7a0:	100b883a 	mov	r5,r2
    c7a4:	8009883a 	mov	r4,r16
    c7a8:	000875c0 	call	875c <_malloc_r>
    c7ac:	10002926 	beq	r2,zero,c854 <_calloc_r+0xd4>
    c7b0:	11bfff17 	ldw	r6,-4(r2)
    c7b4:	1021883a 	mov	r16,r2
    c7b8:	00bfff04 	movi	r2,-4
    c7bc:	308c703a 	and	r6,r6,r2
    c7c0:	00c00904 	movi	r3,36
    c7c4:	308d883a 	add	r6,r6,r2
    c7c8:	19801636 	bltu	r3,r6,c824 <_calloc_r+0xa4>
    c7cc:	008004c4 	movi	r2,19
    c7d0:	11800b2e 	bgeu	r2,r6,c800 <_calloc_r+0x80>
    c7d4:	80000015 	stw	zero,0(r16)
    c7d8:	80000115 	stw	zero,4(r16)
    c7dc:	008006c4 	movi	r2,27
    c7e0:	11801a2e 	bgeu	r2,r6,c84c <_calloc_r+0xcc>
    c7e4:	80000215 	stw	zero,8(r16)
    c7e8:	80000315 	stw	zero,12(r16)
    c7ec:	30c0151e 	bne	r6,r3,c844 <_calloc_r+0xc4>
    c7f0:	80000415 	stw	zero,16(r16)
    c7f4:	80800604 	addi	r2,r16,24
    c7f8:	80000515 	stw	zero,20(r16)
    c7fc:	00000106 	br	c804 <_calloc_r+0x84>
    c800:	8005883a 	mov	r2,r16
    c804:	10000015 	stw	zero,0(r2)
    c808:	10000115 	stw	zero,4(r2)
    c80c:	10000215 	stw	zero,8(r2)
    c810:	8005883a 	mov	r2,r16
    c814:	dfc00117 	ldw	ra,4(sp)
    c818:	dc000017 	ldw	r16,0(sp)
    c81c:	dec00204 	addi	sp,sp,8
    c820:	f800283a 	ret
    c824:	000b883a 	mov	r5,zero
    c828:	8009883a 	mov	r4,r16
    c82c:	00092f00 	call	92f0 <memset>
    c830:	8005883a 	mov	r2,r16
    c834:	dfc00117 	ldw	ra,4(sp)
    c838:	dc000017 	ldw	r16,0(sp)
    c83c:	dec00204 	addi	sp,sp,8
    c840:	f800283a 	ret
    c844:	80800404 	addi	r2,r16,16
    c848:	003fee06 	br	c804 <__alt_data_end+0xfc00c804>
    c84c:	80800204 	addi	r2,r16,8
    c850:	003fec06 	br	c804 <__alt_data_end+0xfc00c804>
    c854:	0005883a 	mov	r2,zero
    c858:	003fee06 	br	c814 <__alt_data_end+0xfc00c814>

0000c85c <_fclose_r>:
    c85c:	28003926 	beq	r5,zero,c944 <_fclose_r+0xe8>
    c860:	defffc04 	addi	sp,sp,-16
    c864:	dc400115 	stw	r17,4(sp)
    c868:	dc000015 	stw	r16,0(sp)
    c86c:	dfc00315 	stw	ra,12(sp)
    c870:	dc800215 	stw	r18,8(sp)
    c874:	2023883a 	mov	r17,r4
    c878:	2821883a 	mov	r16,r5
    c87c:	20000226 	beq	r4,zero,c888 <_fclose_r+0x2c>
    c880:	20800e17 	ldw	r2,56(r4)
    c884:	10002726 	beq	r2,zero,c924 <_fclose_r+0xc8>
    c888:	8080030f 	ldh	r2,12(r16)
    c88c:	1000071e 	bne	r2,zero,c8ac <_fclose_r+0x50>
    c890:	0005883a 	mov	r2,zero
    c894:	dfc00317 	ldw	ra,12(sp)
    c898:	dc800217 	ldw	r18,8(sp)
    c89c:	dc400117 	ldw	r17,4(sp)
    c8a0:	dc000017 	ldw	r16,0(sp)
    c8a4:	dec00404 	addi	sp,sp,16
    c8a8:	f800283a 	ret
    c8ac:	800b883a 	mov	r5,r16
    c8b0:	8809883a 	mov	r4,r17
    c8b4:	00073e80 	call	73e8 <__sflush_r>
    c8b8:	1025883a 	mov	r18,r2
    c8bc:	80800b17 	ldw	r2,44(r16)
    c8c0:	10000426 	beq	r2,zero,c8d4 <_fclose_r+0x78>
    c8c4:	81400717 	ldw	r5,28(r16)
    c8c8:	8809883a 	mov	r4,r17
    c8cc:	103ee83a 	callr	r2
    c8d0:	10001616 	blt	r2,zero,c92c <_fclose_r+0xd0>
    c8d4:	8080030b 	ldhu	r2,12(r16)
    c8d8:	1080200c 	andi	r2,r2,128
    c8dc:	1000151e 	bne	r2,zero,c934 <_fclose_r+0xd8>
    c8e0:	81400c17 	ldw	r5,48(r16)
    c8e4:	28000526 	beq	r5,zero,c8fc <_fclose_r+0xa0>
    c8e8:	80801004 	addi	r2,r16,64
    c8ec:	28800226 	beq	r5,r2,c8f8 <_fclose_r+0x9c>
    c8f0:	8809883a 	mov	r4,r17
    c8f4:	0007b640 	call	7b64 <_free_r>
    c8f8:	80000c15 	stw	zero,48(r16)
    c8fc:	81401117 	ldw	r5,68(r16)
    c900:	28000326 	beq	r5,zero,c910 <_fclose_r+0xb4>
    c904:	8809883a 	mov	r4,r17
    c908:	0007b640 	call	7b64 <_free_r>
    c90c:	80001115 	stw	zero,68(r16)
    c910:	0007a000 	call	7a00 <__sfp_lock_acquire>
    c914:	8000030d 	sth	zero,12(r16)
    c918:	0007a040 	call	7a04 <__sfp_lock_release>
    c91c:	9005883a 	mov	r2,r18
    c920:	003fdc06 	br	c894 <__alt_data_end+0xfc00c894>
    c924:	00079f00 	call	79f0 <__sinit>
    c928:	003fd706 	br	c888 <__alt_data_end+0xfc00c888>
    c92c:	04bfffc4 	movi	r18,-1
    c930:	003fe806 	br	c8d4 <__alt_data_end+0xfc00c8d4>
    c934:	81400417 	ldw	r5,16(r16)
    c938:	8809883a 	mov	r4,r17
    c93c:	0007b640 	call	7b64 <_free_r>
    c940:	003fe706 	br	c8e0 <__alt_data_end+0xfc00c8e0>
    c944:	0005883a 	mov	r2,zero
    c948:	f800283a 	ret

0000c94c <fclose>:
    c94c:	00800074 	movhi	r2,1
    c950:	109bc904 	addi	r2,r2,28452
    c954:	200b883a 	mov	r5,r4
    c958:	11000017 	ldw	r4,0(r2)
    c95c:	000c85c1 	jmpi	c85c <_fclose_r>

0000c960 <__fputwc>:
    c960:	defff804 	addi	sp,sp,-32
    c964:	dcc00415 	stw	r19,16(sp)
    c968:	dc800315 	stw	r18,12(sp)
    c96c:	dc000115 	stw	r16,4(sp)
    c970:	dfc00715 	stw	ra,28(sp)
    c974:	dd400615 	stw	r21,24(sp)
    c978:	dd000515 	stw	r20,20(sp)
    c97c:	dc400215 	stw	r17,8(sp)
    c980:	2027883a 	mov	r19,r4
    c984:	2825883a 	mov	r18,r5
    c988:	3021883a 	mov	r16,r6
    c98c:	000854c0 	call	854c <__locale_mb_cur_max>
    c990:	00c00044 	movi	r3,1
    c994:	10c03e26 	beq	r2,r3,ca90 <__fputwc+0x130>
    c998:	81c01704 	addi	r7,r16,92
    c99c:	900d883a 	mov	r6,r18
    c9a0:	d80b883a 	mov	r5,sp
    c9a4:	9809883a 	mov	r4,r19
    c9a8:	000ccd80 	call	ccd8 <_wcrtomb_r>
    c9ac:	1029883a 	mov	r20,r2
    c9b0:	00bfffc4 	movi	r2,-1
    c9b4:	a0802026 	beq	r20,r2,ca38 <__fputwc+0xd8>
    c9b8:	d9400003 	ldbu	r5,0(sp)
    c9bc:	a0001c26 	beq	r20,zero,ca30 <__fputwc+0xd0>
    c9c0:	0023883a 	mov	r17,zero
    c9c4:	05400284 	movi	r21,10
    c9c8:	00000906 	br	c9f0 <__fputwc+0x90>
    c9cc:	80800017 	ldw	r2,0(r16)
    c9d0:	11400005 	stb	r5,0(r2)
    c9d4:	80c00017 	ldw	r3,0(r16)
    c9d8:	18c00044 	addi	r3,r3,1
    c9dc:	80c00015 	stw	r3,0(r16)
    c9e0:	8c400044 	addi	r17,r17,1
    c9e4:	dc45883a 	add	r2,sp,r17
    c9e8:	8d00112e 	bgeu	r17,r20,ca30 <__fputwc+0xd0>
    c9ec:	11400003 	ldbu	r5,0(r2)
    c9f0:	80c00217 	ldw	r3,8(r16)
    c9f4:	18ffffc4 	addi	r3,r3,-1
    c9f8:	80c00215 	stw	r3,8(r16)
    c9fc:	183ff30e 	bge	r3,zero,c9cc <__alt_data_end+0xfc00c9cc>
    ca00:	80800617 	ldw	r2,24(r16)
    ca04:	18801916 	blt	r3,r2,ca6c <__fputwc+0x10c>
    ca08:	80800017 	ldw	r2,0(r16)
    ca0c:	11400005 	stb	r5,0(r2)
    ca10:	80800017 	ldw	r2,0(r16)
    ca14:	10c00003 	ldbu	r3,0(r2)
    ca18:	10800044 	addi	r2,r2,1
    ca1c:	1d402326 	beq	r3,r21,caac <__fputwc+0x14c>
    ca20:	80800015 	stw	r2,0(r16)
    ca24:	8c400044 	addi	r17,r17,1
    ca28:	dc45883a 	add	r2,sp,r17
    ca2c:	8d3fef36 	bltu	r17,r20,c9ec <__alt_data_end+0xfc00c9ec>
    ca30:	9005883a 	mov	r2,r18
    ca34:	00000406 	br	ca48 <__fputwc+0xe8>
    ca38:	80c0030b 	ldhu	r3,12(r16)
    ca3c:	a005883a 	mov	r2,r20
    ca40:	18c01014 	ori	r3,r3,64
    ca44:	80c0030d 	sth	r3,12(r16)
    ca48:	dfc00717 	ldw	ra,28(sp)
    ca4c:	dd400617 	ldw	r21,24(sp)
    ca50:	dd000517 	ldw	r20,20(sp)
    ca54:	dcc00417 	ldw	r19,16(sp)
    ca58:	dc800317 	ldw	r18,12(sp)
    ca5c:	dc400217 	ldw	r17,8(sp)
    ca60:	dc000117 	ldw	r16,4(sp)
    ca64:	dec00804 	addi	sp,sp,32
    ca68:	f800283a 	ret
    ca6c:	800d883a 	mov	r6,r16
    ca70:	29403fcc 	andi	r5,r5,255
    ca74:	9809883a 	mov	r4,r19
    ca78:	000c5740 	call	c574 <__swbuf_r>
    ca7c:	10bfffe0 	cmpeqi	r2,r2,-1
    ca80:	10803fcc 	andi	r2,r2,255
    ca84:	103fd626 	beq	r2,zero,c9e0 <__alt_data_end+0xfc00c9e0>
    ca88:	00bfffc4 	movi	r2,-1
    ca8c:	003fee06 	br	ca48 <__alt_data_end+0xfc00ca48>
    ca90:	90ffffc4 	addi	r3,r18,-1
    ca94:	01003f84 	movi	r4,254
    ca98:	20ffbf36 	bltu	r4,r3,c998 <__alt_data_end+0xfc00c998>
    ca9c:	900b883a 	mov	r5,r18
    caa0:	dc800005 	stb	r18,0(sp)
    caa4:	1029883a 	mov	r20,r2
    caa8:	003fc506 	br	c9c0 <__alt_data_end+0xfc00c9c0>
    caac:	800d883a 	mov	r6,r16
    cab0:	a80b883a 	mov	r5,r21
    cab4:	9809883a 	mov	r4,r19
    cab8:	000c5740 	call	c574 <__swbuf_r>
    cabc:	10bfffe0 	cmpeqi	r2,r2,-1
    cac0:	003fef06 	br	ca80 <__alt_data_end+0xfc00ca80>

0000cac4 <_fputwc_r>:
    cac4:	3080030b 	ldhu	r2,12(r6)
    cac8:	10c8000c 	andi	r3,r2,8192
    cacc:	1800051e 	bne	r3,zero,cae4 <_fputwc_r+0x20>
    cad0:	30c01917 	ldw	r3,100(r6)
    cad4:	10880014 	ori	r2,r2,8192
    cad8:	3080030d 	sth	r2,12(r6)
    cadc:	18880014 	ori	r2,r3,8192
    cae0:	30801915 	stw	r2,100(r6)
    cae4:	000c9601 	jmpi	c960 <__fputwc>

0000cae8 <fputwc>:
    cae8:	00800074 	movhi	r2,1
    caec:	defffc04 	addi	sp,sp,-16
    caf0:	109bc904 	addi	r2,r2,28452
    caf4:	dc000115 	stw	r16,4(sp)
    caf8:	14000017 	ldw	r16,0(r2)
    cafc:	dc400215 	stw	r17,8(sp)
    cb00:	dfc00315 	stw	ra,12(sp)
    cb04:	2023883a 	mov	r17,r4
    cb08:	80000226 	beq	r16,zero,cb14 <fputwc+0x2c>
    cb0c:	80800e17 	ldw	r2,56(r16)
    cb10:	10001026 	beq	r2,zero,cb54 <fputwc+0x6c>
    cb14:	2880030b 	ldhu	r2,12(r5)
    cb18:	10c8000c 	andi	r3,r2,8192
    cb1c:	1800051e 	bne	r3,zero,cb34 <fputwc+0x4c>
    cb20:	28c01917 	ldw	r3,100(r5)
    cb24:	10880014 	ori	r2,r2,8192
    cb28:	2880030d 	sth	r2,12(r5)
    cb2c:	18880014 	ori	r2,r3,8192
    cb30:	28801915 	stw	r2,100(r5)
    cb34:	280d883a 	mov	r6,r5
    cb38:	8009883a 	mov	r4,r16
    cb3c:	880b883a 	mov	r5,r17
    cb40:	dfc00317 	ldw	ra,12(sp)
    cb44:	dc400217 	ldw	r17,8(sp)
    cb48:	dc000117 	ldw	r16,4(sp)
    cb4c:	dec00404 	addi	sp,sp,16
    cb50:	000c9601 	jmpi	c960 <__fputwc>
    cb54:	8009883a 	mov	r4,r16
    cb58:	d9400015 	stw	r5,0(sp)
    cb5c:	00079f00 	call	79f0 <__sinit>
    cb60:	d9400017 	ldw	r5,0(sp)
    cb64:	003feb06 	br	cb14 <__alt_data_end+0xfc00cb14>

0000cb68 <_fstat_r>:
    cb68:	defffd04 	addi	sp,sp,-12
    cb6c:	2805883a 	mov	r2,r5
    cb70:	dc000015 	stw	r16,0(sp)
    cb74:	040000b4 	movhi	r16,2
    cb78:	dc400115 	stw	r17,4(sp)
    cb7c:	8422c104 	addi	r16,r16,-29948
    cb80:	2023883a 	mov	r17,r4
    cb84:	300b883a 	mov	r5,r6
    cb88:	1009883a 	mov	r4,r2
    cb8c:	dfc00215 	stw	ra,8(sp)
    cb90:	80000015 	stw	zero,0(r16)
    cb94:	00104a00 	call	104a0 <fstat>
    cb98:	00ffffc4 	movi	r3,-1
    cb9c:	10c00526 	beq	r2,r3,cbb4 <_fstat_r+0x4c>
    cba0:	dfc00217 	ldw	ra,8(sp)
    cba4:	dc400117 	ldw	r17,4(sp)
    cba8:	dc000017 	ldw	r16,0(sp)
    cbac:	dec00304 	addi	sp,sp,12
    cbb0:	f800283a 	ret
    cbb4:	80c00017 	ldw	r3,0(r16)
    cbb8:	183ff926 	beq	r3,zero,cba0 <__alt_data_end+0xfc00cba0>
    cbbc:	88c00015 	stw	r3,0(r17)
    cbc0:	003ff706 	br	cba0 <__alt_data_end+0xfc00cba0>

0000cbc4 <_isatty_r>:
    cbc4:	defffd04 	addi	sp,sp,-12
    cbc8:	dc000015 	stw	r16,0(sp)
    cbcc:	040000b4 	movhi	r16,2
    cbd0:	dc400115 	stw	r17,4(sp)
    cbd4:	8422c104 	addi	r16,r16,-29948
    cbd8:	2023883a 	mov	r17,r4
    cbdc:	2809883a 	mov	r4,r5
    cbe0:	dfc00215 	stw	ra,8(sp)
    cbe4:	80000015 	stw	zero,0(r16)
    cbe8:	00105940 	call	10594 <isatty>
    cbec:	00ffffc4 	movi	r3,-1
    cbf0:	10c00526 	beq	r2,r3,cc08 <_isatty_r+0x44>
    cbf4:	dfc00217 	ldw	ra,8(sp)
    cbf8:	dc400117 	ldw	r17,4(sp)
    cbfc:	dc000017 	ldw	r16,0(sp)
    cc00:	dec00304 	addi	sp,sp,12
    cc04:	f800283a 	ret
    cc08:	80c00017 	ldw	r3,0(r16)
    cc0c:	183ff926 	beq	r3,zero,cbf4 <__alt_data_end+0xfc00cbf4>
    cc10:	88c00015 	stw	r3,0(r17)
    cc14:	003ff706 	br	cbf4 <__alt_data_end+0xfc00cbf4>

0000cc18 <_lseek_r>:
    cc18:	defffd04 	addi	sp,sp,-12
    cc1c:	2805883a 	mov	r2,r5
    cc20:	dc000015 	stw	r16,0(sp)
    cc24:	040000b4 	movhi	r16,2
    cc28:	dc400115 	stw	r17,4(sp)
    cc2c:	300b883a 	mov	r5,r6
    cc30:	8422c104 	addi	r16,r16,-29948
    cc34:	2023883a 	mov	r17,r4
    cc38:	380d883a 	mov	r6,r7
    cc3c:	1009883a 	mov	r4,r2
    cc40:	dfc00215 	stw	ra,8(sp)
    cc44:	80000015 	stw	zero,0(r16)
    cc48:	00107680 	call	10768 <lseek>
    cc4c:	00ffffc4 	movi	r3,-1
    cc50:	10c00526 	beq	r2,r3,cc68 <_lseek_r+0x50>
    cc54:	dfc00217 	ldw	ra,8(sp)
    cc58:	dc400117 	ldw	r17,4(sp)
    cc5c:	dc000017 	ldw	r16,0(sp)
    cc60:	dec00304 	addi	sp,sp,12
    cc64:	f800283a 	ret
    cc68:	80c00017 	ldw	r3,0(r16)
    cc6c:	183ff926 	beq	r3,zero,cc54 <__alt_data_end+0xfc00cc54>
    cc70:	88c00015 	stw	r3,0(r17)
    cc74:	003ff706 	br	cc54 <__alt_data_end+0xfc00cc54>

0000cc78 <_read_r>:
    cc78:	defffd04 	addi	sp,sp,-12
    cc7c:	2805883a 	mov	r2,r5
    cc80:	dc000015 	stw	r16,0(sp)
    cc84:	040000b4 	movhi	r16,2
    cc88:	dc400115 	stw	r17,4(sp)
    cc8c:	300b883a 	mov	r5,r6
    cc90:	8422c104 	addi	r16,r16,-29948
    cc94:	2023883a 	mov	r17,r4
    cc98:	380d883a 	mov	r6,r7
    cc9c:	1009883a 	mov	r4,r2
    cca0:	dfc00215 	stw	ra,8(sp)
    cca4:	80000015 	stw	zero,0(r16)
    cca8:	00109440 	call	10944 <read>
    ccac:	00ffffc4 	movi	r3,-1
    ccb0:	10c00526 	beq	r2,r3,ccc8 <_read_r+0x50>
    ccb4:	dfc00217 	ldw	ra,8(sp)
    ccb8:	dc400117 	ldw	r17,4(sp)
    ccbc:	dc000017 	ldw	r16,0(sp)
    ccc0:	dec00304 	addi	sp,sp,12
    ccc4:	f800283a 	ret
    ccc8:	80c00017 	ldw	r3,0(r16)
    cccc:	183ff926 	beq	r3,zero,ccb4 <__alt_data_end+0xfc00ccb4>
    ccd0:	88c00015 	stw	r3,0(r17)
    ccd4:	003ff706 	br	ccb4 <__alt_data_end+0xfc00ccb4>

0000ccd8 <_wcrtomb_r>:
    ccd8:	defff604 	addi	sp,sp,-40
    ccdc:	00800074 	movhi	r2,1
    cce0:	dc800815 	stw	r18,32(sp)
    cce4:	dc400715 	stw	r17,28(sp)
    cce8:	dc000615 	stw	r16,24(sp)
    ccec:	109bcd04 	addi	r2,r2,28468
    ccf0:	dfc00915 	stw	ra,36(sp)
    ccf4:	2021883a 	mov	r16,r4
    ccf8:	3823883a 	mov	r17,r7
    ccfc:	14800017 	ldw	r18,0(r2)
    cd00:	28001426 	beq	r5,zero,cd54 <_wcrtomb_r+0x7c>
    cd04:	d9400415 	stw	r5,16(sp)
    cd08:	d9800515 	stw	r6,20(sp)
    cd0c:	00085400 	call	8540 <__locale_charset>
    cd10:	d9800517 	ldw	r6,20(sp)
    cd14:	d9400417 	ldw	r5,16(sp)
    cd18:	100f883a 	mov	r7,r2
    cd1c:	dc400015 	stw	r17,0(sp)
    cd20:	8009883a 	mov	r4,r16
    cd24:	903ee83a 	callr	r18
    cd28:	00ffffc4 	movi	r3,-1
    cd2c:	10c0031e 	bne	r2,r3,cd3c <_wcrtomb_r+0x64>
    cd30:	88000015 	stw	zero,0(r17)
    cd34:	00c02284 	movi	r3,138
    cd38:	80c00015 	stw	r3,0(r16)
    cd3c:	dfc00917 	ldw	ra,36(sp)
    cd40:	dc800817 	ldw	r18,32(sp)
    cd44:	dc400717 	ldw	r17,28(sp)
    cd48:	dc000617 	ldw	r16,24(sp)
    cd4c:	dec00a04 	addi	sp,sp,40
    cd50:	f800283a 	ret
    cd54:	00085400 	call	8540 <__locale_charset>
    cd58:	100f883a 	mov	r7,r2
    cd5c:	dc400015 	stw	r17,0(sp)
    cd60:	000d883a 	mov	r6,zero
    cd64:	d9400104 	addi	r5,sp,4
    cd68:	8009883a 	mov	r4,r16
    cd6c:	903ee83a 	callr	r18
    cd70:	003fed06 	br	cd28 <__alt_data_end+0xfc00cd28>

0000cd74 <wcrtomb>:
    cd74:	defff604 	addi	sp,sp,-40
    cd78:	00800074 	movhi	r2,1
    cd7c:	dc800615 	stw	r18,24(sp)
    cd80:	dc400515 	stw	r17,20(sp)
    cd84:	109bc904 	addi	r2,r2,28452
    cd88:	dfc00915 	stw	ra,36(sp)
    cd8c:	dd000815 	stw	r20,32(sp)
    cd90:	dcc00715 	stw	r19,28(sp)
    cd94:	dc000415 	stw	r16,16(sp)
    cd98:	3025883a 	mov	r18,r6
    cd9c:	14400017 	ldw	r17,0(r2)
    cda0:	20001926 	beq	r4,zero,ce08 <wcrtomb+0x94>
    cda4:	00800074 	movhi	r2,1
    cda8:	109bcd04 	addi	r2,r2,28468
    cdac:	15000017 	ldw	r20,0(r2)
    cdb0:	2021883a 	mov	r16,r4
    cdb4:	2827883a 	mov	r19,r5
    cdb8:	00085400 	call	8540 <__locale_charset>
    cdbc:	100f883a 	mov	r7,r2
    cdc0:	dc800015 	stw	r18,0(sp)
    cdc4:	980d883a 	mov	r6,r19
    cdc8:	800b883a 	mov	r5,r16
    cdcc:	8809883a 	mov	r4,r17
    cdd0:	a03ee83a 	callr	r20
    cdd4:	00ffffc4 	movi	r3,-1
    cdd8:	10c0031e 	bne	r2,r3,cde8 <wcrtomb+0x74>
    cddc:	90000015 	stw	zero,0(r18)
    cde0:	00c02284 	movi	r3,138
    cde4:	88c00015 	stw	r3,0(r17)
    cde8:	dfc00917 	ldw	ra,36(sp)
    cdec:	dd000817 	ldw	r20,32(sp)
    cdf0:	dcc00717 	ldw	r19,28(sp)
    cdf4:	dc800617 	ldw	r18,24(sp)
    cdf8:	dc400517 	ldw	r17,20(sp)
    cdfc:	dc000417 	ldw	r16,16(sp)
    ce00:	dec00a04 	addi	sp,sp,40
    ce04:	f800283a 	ret
    ce08:	00800074 	movhi	r2,1
    ce0c:	109bcd04 	addi	r2,r2,28468
    ce10:	14000017 	ldw	r16,0(r2)
    ce14:	00085400 	call	8540 <__locale_charset>
    ce18:	100f883a 	mov	r7,r2
    ce1c:	dc800015 	stw	r18,0(sp)
    ce20:	000d883a 	mov	r6,zero
    ce24:	d9400104 	addi	r5,sp,4
    ce28:	8809883a 	mov	r4,r17
    ce2c:	803ee83a 	callr	r16
    ce30:	003fe806 	br	cdd4 <__alt_data_end+0xfc00cdd4>

0000ce34 <__ascii_wctomb>:
    ce34:	28000526 	beq	r5,zero,ce4c <__ascii_wctomb+0x18>
    ce38:	00803fc4 	movi	r2,255
    ce3c:	11800536 	bltu	r2,r6,ce54 <__ascii_wctomb+0x20>
    ce40:	29800005 	stb	r6,0(r5)
    ce44:	00800044 	movi	r2,1
    ce48:	f800283a 	ret
    ce4c:	0005883a 	mov	r2,zero
    ce50:	f800283a 	ret
    ce54:	00802284 	movi	r2,138
    ce58:	20800015 	stw	r2,0(r4)
    ce5c:	00bfffc4 	movi	r2,-1
    ce60:	f800283a 	ret

0000ce64 <_wctomb_r>:
    ce64:	00800074 	movhi	r2,1
    ce68:	defff904 	addi	sp,sp,-28
    ce6c:	109bcd04 	addi	r2,r2,28468
    ce70:	dfc00615 	stw	ra,24(sp)
    ce74:	dc400515 	stw	r17,20(sp)
    ce78:	dc000415 	stw	r16,16(sp)
    ce7c:	3823883a 	mov	r17,r7
    ce80:	14000017 	ldw	r16,0(r2)
    ce84:	d9000115 	stw	r4,4(sp)
    ce88:	d9400215 	stw	r5,8(sp)
    ce8c:	d9800315 	stw	r6,12(sp)
    ce90:	00085400 	call	8540 <__locale_charset>
    ce94:	d9800317 	ldw	r6,12(sp)
    ce98:	d9400217 	ldw	r5,8(sp)
    ce9c:	d9000117 	ldw	r4,4(sp)
    cea0:	100f883a 	mov	r7,r2
    cea4:	dc400015 	stw	r17,0(sp)
    cea8:	803ee83a 	callr	r16
    ceac:	dfc00617 	ldw	ra,24(sp)
    ceb0:	dc400517 	ldw	r17,20(sp)
    ceb4:	dc000417 	ldw	r16,16(sp)
    ceb8:	dec00704 	addi	sp,sp,28
    cebc:	f800283a 	ret

0000cec0 <__udivdi3>:
    cec0:	defff404 	addi	sp,sp,-48
    cec4:	dcc00515 	stw	r19,20(sp)
    cec8:	dc000215 	stw	r16,8(sp)
    cecc:	dfc00b15 	stw	ra,44(sp)
    ced0:	df000a15 	stw	fp,40(sp)
    ced4:	ddc00915 	stw	r23,36(sp)
    ced8:	dd800815 	stw	r22,32(sp)
    cedc:	dd400715 	stw	r21,28(sp)
    cee0:	dd000615 	stw	r20,24(sp)
    cee4:	dc800415 	stw	r18,16(sp)
    cee8:	dc400315 	stw	r17,12(sp)
    ceec:	2027883a 	mov	r19,r4
    cef0:	2821883a 	mov	r16,r5
    cef4:	3800461e 	bne	r7,zero,d010 <__udivdi3+0x150>
    cef8:	3023883a 	mov	r17,r6
    cefc:	2025883a 	mov	r18,r4
    cf00:	2980572e 	bgeu	r5,r6,d060 <__udivdi3+0x1a0>
    cf04:	00bfffd4 	movui	r2,65535
    cf08:	282d883a 	mov	r22,r5
    cf0c:	1180b236 	bltu	r2,r6,d1d8 <__udivdi3+0x318>
    cf10:	00803fc4 	movi	r2,255
    cf14:	1185803a 	cmpltu	r2,r2,r6
    cf18:	100490fa 	slli	r2,r2,3
    cf1c:	3086d83a 	srl	r3,r6,r2
    cf20:	01000074 	movhi	r4,1
    cf24:	2114a704 	addi	r4,r4,21148
    cf28:	20c7883a 	add	r3,r4,r3
    cf2c:	18c00003 	ldbu	r3,0(r3)
    cf30:	1885883a 	add	r2,r3,r2
    cf34:	00c00804 	movi	r3,32
    cf38:	1887c83a 	sub	r3,r3,r2
    cf3c:	18000526 	beq	r3,zero,cf54 <__udivdi3+0x94>
    cf40:	80e0983a 	sll	r16,r16,r3
    cf44:	9884d83a 	srl	r2,r19,r2
    cf48:	30e2983a 	sll	r17,r6,r3
    cf4c:	98e4983a 	sll	r18,r19,r3
    cf50:	142cb03a 	or	r22,r2,r16
    cf54:	882ad43a 	srli	r21,r17,16
    cf58:	b009883a 	mov	r4,r22
    cf5c:	8d3fffcc 	andi	r20,r17,65535
    cf60:	a80b883a 	mov	r5,r21
    cf64:	00033b80 	call	33b8 <__umodsi3>
    cf68:	b009883a 	mov	r4,r22
    cf6c:	a80b883a 	mov	r5,r21
    cf70:	1027883a 	mov	r19,r2
    cf74:	00033540 	call	3354 <__udivsi3>
    cf78:	100b883a 	mov	r5,r2
    cf7c:	a009883a 	mov	r4,r20
    cf80:	102d883a 	mov	r22,r2
    cf84:	00034100 	call	3410 <__mulsi3>
    cf88:	9826943a 	slli	r19,r19,16
    cf8c:	9006d43a 	srli	r3,r18,16
    cf90:	1cc6b03a 	or	r3,r3,r19
    cf94:	1880052e 	bgeu	r3,r2,cfac <__udivdi3+0xec>
    cf98:	1c47883a 	add	r3,r3,r17
    cf9c:	b13fffc4 	addi	r4,r22,-1
    cfa0:	1c400136 	bltu	r3,r17,cfa8 <__udivdi3+0xe8>
    cfa4:	18814236 	bltu	r3,r2,d4b0 <__udivdi3+0x5f0>
    cfa8:	202d883a 	mov	r22,r4
    cfac:	18a1c83a 	sub	r16,r3,r2
    cfb0:	8009883a 	mov	r4,r16
    cfb4:	a80b883a 	mov	r5,r21
    cfb8:	00033b80 	call	33b8 <__umodsi3>
    cfbc:	1027883a 	mov	r19,r2
    cfc0:	8009883a 	mov	r4,r16
    cfc4:	a80b883a 	mov	r5,r21
    cfc8:	9826943a 	slli	r19,r19,16
    cfcc:	00033540 	call	3354 <__udivsi3>
    cfd0:	100b883a 	mov	r5,r2
    cfd4:	a009883a 	mov	r4,r20
    cfd8:	94bfffcc 	andi	r18,r18,65535
    cfdc:	1021883a 	mov	r16,r2
    cfe0:	94e4b03a 	or	r18,r18,r19
    cfe4:	00034100 	call	3410 <__mulsi3>
    cfe8:	9080052e 	bgeu	r18,r2,d000 <__udivdi3+0x140>
    cfec:	8ca5883a 	add	r18,r17,r18
    cff0:	80ffffc4 	addi	r3,r16,-1
    cff4:	94410c36 	bltu	r18,r17,d428 <__udivdi3+0x568>
    cff8:	90810b2e 	bgeu	r18,r2,d428 <__udivdi3+0x568>
    cffc:	843fff84 	addi	r16,r16,-2
    d000:	b004943a 	slli	r2,r22,16
    d004:	0007883a 	mov	r3,zero
    d008:	1404b03a 	or	r2,r2,r16
    d00c:	00005e06 	br	d188 <__udivdi3+0x2c8>
    d010:	29c05b36 	bltu	r5,r7,d180 <__udivdi3+0x2c0>
    d014:	00bfffd4 	movui	r2,65535
    d018:	11c0672e 	bgeu	r2,r7,d1b8 <__udivdi3+0x2f8>
    d01c:	00804034 	movhi	r2,256
    d020:	10bfffc4 	addi	r2,r2,-1
    d024:	11c10a36 	bltu	r2,r7,d450 <__udivdi3+0x590>
    d028:	00800404 	movi	r2,16
    d02c:	3886d83a 	srl	r3,r7,r2
    d030:	01000074 	movhi	r4,1
    d034:	2114a704 	addi	r4,r4,21148
    d038:	20c7883a 	add	r3,r4,r3
    d03c:	18c00003 	ldbu	r3,0(r3)
    d040:	05c00804 	movi	r23,32
    d044:	1885883a 	add	r2,r3,r2
    d048:	b8afc83a 	sub	r23,r23,r2
    d04c:	b800671e 	bne	r23,zero,d1ec <__udivdi3+0x32c>
    d050:	3c010536 	bltu	r7,r16,d468 <__udivdi3+0x5a8>
    d054:	9985403a 	cmpgeu	r2,r19,r6
    d058:	0007883a 	mov	r3,zero
    d05c:	00004a06 	br	d188 <__udivdi3+0x2c8>
    d060:	3000041e 	bne	r6,zero,d074 <__udivdi3+0x1b4>
    d064:	000b883a 	mov	r5,zero
    d068:	01000044 	movi	r4,1
    d06c:	00033540 	call	3354 <__udivsi3>
    d070:	1023883a 	mov	r17,r2
    d074:	00bfffd4 	movui	r2,65535
    d078:	1440532e 	bgeu	r2,r17,d1c8 <__udivdi3+0x308>
    d07c:	00804034 	movhi	r2,256
    d080:	10bfffc4 	addi	r2,r2,-1
    d084:	1440f436 	bltu	r2,r17,d458 <__udivdi3+0x598>
    d088:	00800404 	movi	r2,16
    d08c:	8886d83a 	srl	r3,r17,r2
    d090:	01000074 	movhi	r4,1
    d094:	2114a704 	addi	r4,r4,21148
    d098:	20c7883a 	add	r3,r4,r3
    d09c:	18c00003 	ldbu	r3,0(r3)
    d0a0:	1885883a 	add	r2,r3,r2
    d0a4:	00c00804 	movi	r3,32
    d0a8:	1887c83a 	sub	r3,r3,r2
    d0ac:	1800a51e 	bne	r3,zero,d344 <__udivdi3+0x484>
    d0b0:	882ad43a 	srli	r21,r17,16
    d0b4:	8461c83a 	sub	r16,r16,r17
    d0b8:	8d3fffcc 	andi	r20,r17,65535
    d0bc:	00c00044 	movi	r3,1
    d0c0:	a80b883a 	mov	r5,r21
    d0c4:	8009883a 	mov	r4,r16
    d0c8:	d8c00115 	stw	r3,4(sp)
    d0cc:	00033b80 	call	33b8 <__umodsi3>
    d0d0:	a80b883a 	mov	r5,r21
    d0d4:	8009883a 	mov	r4,r16
    d0d8:	1027883a 	mov	r19,r2
    d0dc:	00033540 	call	3354 <__udivsi3>
    d0e0:	a00b883a 	mov	r5,r20
    d0e4:	1009883a 	mov	r4,r2
    d0e8:	102d883a 	mov	r22,r2
    d0ec:	00034100 	call	3410 <__mulsi3>
    d0f0:	9826943a 	slli	r19,r19,16
    d0f4:	900ed43a 	srli	r7,r18,16
    d0f8:	d8c00117 	ldw	r3,4(sp)
    d0fc:	3cceb03a 	or	r7,r7,r19
    d100:	3880052e 	bgeu	r7,r2,d118 <__udivdi3+0x258>
    d104:	3c4f883a 	add	r7,r7,r17
    d108:	b13fffc4 	addi	r4,r22,-1
    d10c:	3c400136 	bltu	r7,r17,d114 <__udivdi3+0x254>
    d110:	3880e436 	bltu	r7,r2,d4a4 <__udivdi3+0x5e4>
    d114:	202d883a 	mov	r22,r4
    d118:	38a1c83a 	sub	r16,r7,r2
    d11c:	8009883a 	mov	r4,r16
    d120:	a80b883a 	mov	r5,r21
    d124:	d8c00115 	stw	r3,4(sp)
    d128:	00033b80 	call	33b8 <__umodsi3>
    d12c:	1027883a 	mov	r19,r2
    d130:	8009883a 	mov	r4,r16
    d134:	a80b883a 	mov	r5,r21
    d138:	9826943a 	slli	r19,r19,16
    d13c:	00033540 	call	3354 <__udivsi3>
    d140:	a00b883a 	mov	r5,r20
    d144:	1009883a 	mov	r4,r2
    d148:	94bfffcc 	andi	r18,r18,65535
    d14c:	1021883a 	mov	r16,r2
    d150:	94e4b03a 	or	r18,r18,r19
    d154:	00034100 	call	3410 <__mulsi3>
    d158:	d8c00117 	ldw	r3,4(sp)
    d15c:	9080052e 	bgeu	r18,r2,d174 <__udivdi3+0x2b4>
    d160:	8ca5883a 	add	r18,r17,r18
    d164:	813fffc4 	addi	r4,r16,-1
    d168:	9440ad36 	bltu	r18,r17,d420 <__udivdi3+0x560>
    d16c:	9080ac2e 	bgeu	r18,r2,d420 <__udivdi3+0x560>
    d170:	843fff84 	addi	r16,r16,-2
    d174:	b004943a 	slli	r2,r22,16
    d178:	1404b03a 	or	r2,r2,r16
    d17c:	00000206 	br	d188 <__udivdi3+0x2c8>
    d180:	0007883a 	mov	r3,zero
    d184:	0005883a 	mov	r2,zero
    d188:	dfc00b17 	ldw	ra,44(sp)
    d18c:	df000a17 	ldw	fp,40(sp)
    d190:	ddc00917 	ldw	r23,36(sp)
    d194:	dd800817 	ldw	r22,32(sp)
    d198:	dd400717 	ldw	r21,28(sp)
    d19c:	dd000617 	ldw	r20,24(sp)
    d1a0:	dcc00517 	ldw	r19,20(sp)
    d1a4:	dc800417 	ldw	r18,16(sp)
    d1a8:	dc400317 	ldw	r17,12(sp)
    d1ac:	dc000217 	ldw	r16,8(sp)
    d1b0:	dec00c04 	addi	sp,sp,48
    d1b4:	f800283a 	ret
    d1b8:	00803fc4 	movi	r2,255
    d1bc:	11c5803a 	cmpltu	r2,r2,r7
    d1c0:	100490fa 	slli	r2,r2,3
    d1c4:	003f9906 	br	d02c <__alt_data_end+0xfc00d02c>
    d1c8:	00803fc4 	movi	r2,255
    d1cc:	1445803a 	cmpltu	r2,r2,r17
    d1d0:	100490fa 	slli	r2,r2,3
    d1d4:	003fad06 	br	d08c <__alt_data_end+0xfc00d08c>
    d1d8:	00804034 	movhi	r2,256
    d1dc:	10bfffc4 	addi	r2,r2,-1
    d1e0:	11809f36 	bltu	r2,r6,d460 <__udivdi3+0x5a0>
    d1e4:	00800404 	movi	r2,16
    d1e8:	003f4c06 	br	cf1c <__alt_data_end+0xfc00cf1c>
    d1ec:	3dce983a 	sll	r7,r7,r23
    d1f0:	30b8d83a 	srl	fp,r6,r2
    d1f4:	80a2d83a 	srl	r17,r16,r2
    d1f8:	35cc983a 	sll	r6,r6,r23
    d1fc:	3f38b03a 	or	fp,r7,fp
    d200:	e024d43a 	srli	r18,fp,16
    d204:	9884d83a 	srl	r2,r19,r2
    d208:	85e0983a 	sll	r16,r16,r23
    d20c:	8809883a 	mov	r4,r17
    d210:	900b883a 	mov	r5,r18
    d214:	d9800015 	stw	r6,0(sp)
    d218:	1420b03a 	or	r16,r2,r16
    d21c:	00033b80 	call	33b8 <__umodsi3>
    d220:	900b883a 	mov	r5,r18
    d224:	8809883a 	mov	r4,r17
    d228:	1029883a 	mov	r20,r2
    d22c:	e5bfffcc 	andi	r22,fp,65535
    d230:	00033540 	call	3354 <__udivsi3>
    d234:	100b883a 	mov	r5,r2
    d238:	b009883a 	mov	r4,r22
    d23c:	102b883a 	mov	r21,r2
    d240:	00034100 	call	3410 <__mulsi3>
    d244:	a028943a 	slli	r20,r20,16
    d248:	8006d43a 	srli	r3,r16,16
    d24c:	1d06b03a 	or	r3,r3,r20
    d250:	1880042e 	bgeu	r3,r2,d264 <__udivdi3+0x3a4>
    d254:	1f07883a 	add	r3,r3,fp
    d258:	a93fffc4 	addi	r4,r21,-1
    d25c:	1f00892e 	bgeu	r3,fp,d484 <__udivdi3+0x5c4>
    d260:	202b883a 	mov	r21,r4
    d264:	18a3c83a 	sub	r17,r3,r2
    d268:	8809883a 	mov	r4,r17
    d26c:	900b883a 	mov	r5,r18
    d270:	00033b80 	call	33b8 <__umodsi3>
    d274:	1029883a 	mov	r20,r2
    d278:	8809883a 	mov	r4,r17
    d27c:	900b883a 	mov	r5,r18
    d280:	a028943a 	slli	r20,r20,16
    d284:	00033540 	call	3354 <__udivsi3>
    d288:	100b883a 	mov	r5,r2
    d28c:	b009883a 	mov	r4,r22
    d290:	843fffcc 	andi	r16,r16,65535
    d294:	1023883a 	mov	r17,r2
    d298:	8520b03a 	or	r16,r16,r20
    d29c:	00034100 	call	3410 <__mulsi3>
    d2a0:	8080042e 	bgeu	r16,r2,d2b4 <__udivdi3+0x3f4>
    d2a4:	8721883a 	add	r16,r16,fp
    d2a8:	88ffffc4 	addi	r3,r17,-1
    d2ac:	8700712e 	bgeu	r16,fp,d474 <__udivdi3+0x5b4>
    d2b0:	1823883a 	mov	r17,r3
    d2b4:	a80e943a 	slli	r7,r21,16
    d2b8:	d8c00017 	ldw	r3,0(sp)
    d2bc:	80a1c83a 	sub	r16,r16,r2
    d2c0:	3c64b03a 	or	r18,r7,r17
    d2c4:	1d3fffcc 	andi	r20,r3,65535
    d2c8:	9022d43a 	srli	r17,r18,16
    d2cc:	95bfffcc 	andi	r22,r18,65535
    d2d0:	a00b883a 	mov	r5,r20
    d2d4:	b009883a 	mov	r4,r22
    d2d8:	182ad43a 	srli	r21,r3,16
    d2dc:	00034100 	call	3410 <__mulsi3>
    d2e0:	a00b883a 	mov	r5,r20
    d2e4:	8809883a 	mov	r4,r17
    d2e8:	1039883a 	mov	fp,r2
    d2ec:	00034100 	call	3410 <__mulsi3>
    d2f0:	8809883a 	mov	r4,r17
    d2f4:	a80b883a 	mov	r5,r21
    d2f8:	1029883a 	mov	r20,r2
    d2fc:	00034100 	call	3410 <__mulsi3>
    d300:	a80b883a 	mov	r5,r21
    d304:	b009883a 	mov	r4,r22
    d308:	1023883a 	mov	r17,r2
    d30c:	00034100 	call	3410 <__mulsi3>
    d310:	e006d43a 	srli	r3,fp,16
    d314:	1505883a 	add	r2,r2,r20
    d318:	1887883a 	add	r3,r3,r2
    d31c:	1d00022e 	bgeu	r3,r20,d328 <__udivdi3+0x468>
    d320:	00800074 	movhi	r2,1
    d324:	88a3883a 	add	r17,r17,r2
    d328:	1804d43a 	srli	r2,r3,16
    d32c:	1463883a 	add	r17,r2,r17
    d330:	84404436 	bltu	r16,r17,d444 <__udivdi3+0x584>
    d334:	84403e26 	beq	r16,r17,d430 <__udivdi3+0x570>
    d338:	9005883a 	mov	r2,r18
    d33c:	0007883a 	mov	r3,zero
    d340:	003f9106 	br	d188 <__alt_data_end+0xfc00d188>
    d344:	88e2983a 	sll	r17,r17,r3
    d348:	80aed83a 	srl	r23,r16,r2
    d34c:	80e0983a 	sll	r16,r16,r3
    d350:	882ad43a 	srli	r21,r17,16
    d354:	9884d83a 	srl	r2,r19,r2
    d358:	b809883a 	mov	r4,r23
    d35c:	a80b883a 	mov	r5,r21
    d360:	98e4983a 	sll	r18,r19,r3
    d364:	142cb03a 	or	r22,r2,r16
    d368:	00033b80 	call	33b8 <__umodsi3>
    d36c:	b809883a 	mov	r4,r23
    d370:	a80b883a 	mov	r5,r21
    d374:	1027883a 	mov	r19,r2
    d378:	8d3fffcc 	andi	r20,r17,65535
    d37c:	00033540 	call	3354 <__udivsi3>
    d380:	a009883a 	mov	r4,r20
    d384:	100b883a 	mov	r5,r2
    d388:	102f883a 	mov	r23,r2
    d38c:	00034100 	call	3410 <__mulsi3>
    d390:	9826943a 	slli	r19,r19,16
    d394:	b008d43a 	srli	r4,r22,16
    d398:	24c8b03a 	or	r4,r4,r19
    d39c:	2080062e 	bgeu	r4,r2,d3b8 <__udivdi3+0x4f8>
    d3a0:	2449883a 	add	r4,r4,r17
    d3a4:	b8ffffc4 	addi	r3,r23,-1
    d3a8:	24403c36 	bltu	r4,r17,d49c <__udivdi3+0x5dc>
    d3ac:	20803b2e 	bgeu	r4,r2,d49c <__udivdi3+0x5dc>
    d3b0:	bdffff84 	addi	r23,r23,-2
    d3b4:	2449883a 	add	r4,r4,r17
    d3b8:	20a1c83a 	sub	r16,r4,r2
    d3bc:	a80b883a 	mov	r5,r21
    d3c0:	8009883a 	mov	r4,r16
    d3c4:	00033b80 	call	33b8 <__umodsi3>
    d3c8:	a80b883a 	mov	r5,r21
    d3cc:	8009883a 	mov	r4,r16
    d3d0:	1027883a 	mov	r19,r2
    d3d4:	00033540 	call	3354 <__udivsi3>
    d3d8:	a009883a 	mov	r4,r20
    d3dc:	100b883a 	mov	r5,r2
    d3e0:	9826943a 	slli	r19,r19,16
    d3e4:	1039883a 	mov	fp,r2
    d3e8:	00034100 	call	3410 <__mulsi3>
    d3ec:	b13fffcc 	andi	r4,r22,65535
    d3f0:	24c8b03a 	or	r4,r4,r19
    d3f4:	2080062e 	bgeu	r4,r2,d410 <__udivdi3+0x550>
    d3f8:	2449883a 	add	r4,r4,r17
    d3fc:	e0ffffc4 	addi	r3,fp,-1
    d400:	24402436 	bltu	r4,r17,d494 <__udivdi3+0x5d4>
    d404:	2080232e 	bgeu	r4,r2,d494 <__udivdi3+0x5d4>
    d408:	e73fff84 	addi	fp,fp,-2
    d40c:	2449883a 	add	r4,r4,r17
    d410:	b82e943a 	slli	r23,r23,16
    d414:	20a1c83a 	sub	r16,r4,r2
    d418:	bf06b03a 	or	r3,r23,fp
    d41c:	003f2806 	br	d0c0 <__alt_data_end+0xfc00d0c0>
    d420:	2021883a 	mov	r16,r4
    d424:	003f5306 	br	d174 <__alt_data_end+0xfc00d174>
    d428:	1821883a 	mov	r16,r3
    d42c:	003ef406 	br	d000 <__alt_data_end+0xfc00d000>
    d430:	1806943a 	slli	r3,r3,16
    d434:	9de6983a 	sll	r19,r19,r23
    d438:	e73fffcc 	andi	fp,fp,65535
    d43c:	1f07883a 	add	r3,r3,fp
    d440:	98ffbd2e 	bgeu	r19,r3,d338 <__alt_data_end+0xfc00d338>
    d444:	90bfffc4 	addi	r2,r18,-1
    d448:	0007883a 	mov	r3,zero
    d44c:	003f4e06 	br	d188 <__alt_data_end+0xfc00d188>
    d450:	00800604 	movi	r2,24
    d454:	003ef506 	br	d02c <__alt_data_end+0xfc00d02c>
    d458:	00800604 	movi	r2,24
    d45c:	003f0b06 	br	d08c <__alt_data_end+0xfc00d08c>
    d460:	00800604 	movi	r2,24
    d464:	003ead06 	br	cf1c <__alt_data_end+0xfc00cf1c>
    d468:	0007883a 	mov	r3,zero
    d46c:	00800044 	movi	r2,1
    d470:	003f4506 	br	d188 <__alt_data_end+0xfc00d188>
    d474:	80bf8e2e 	bgeu	r16,r2,d2b0 <__alt_data_end+0xfc00d2b0>
    d478:	8c7fff84 	addi	r17,r17,-2
    d47c:	8721883a 	add	r16,r16,fp
    d480:	003f8c06 	br	d2b4 <__alt_data_end+0xfc00d2b4>
    d484:	18bf762e 	bgeu	r3,r2,d260 <__alt_data_end+0xfc00d260>
    d488:	ad7fff84 	addi	r21,r21,-2
    d48c:	1f07883a 	add	r3,r3,fp
    d490:	003f7406 	br	d264 <__alt_data_end+0xfc00d264>
    d494:	1839883a 	mov	fp,r3
    d498:	003fdd06 	br	d410 <__alt_data_end+0xfc00d410>
    d49c:	182f883a 	mov	r23,r3
    d4a0:	003fc506 	br	d3b8 <__alt_data_end+0xfc00d3b8>
    d4a4:	b5bfff84 	addi	r22,r22,-2
    d4a8:	3c4f883a 	add	r7,r7,r17
    d4ac:	003f1a06 	br	d118 <__alt_data_end+0xfc00d118>
    d4b0:	b5bfff84 	addi	r22,r22,-2
    d4b4:	1c47883a 	add	r3,r3,r17
    d4b8:	003ebc06 	br	cfac <__alt_data_end+0xfc00cfac>

0000d4bc <__umoddi3>:
    d4bc:	defff304 	addi	sp,sp,-52
    d4c0:	df000b15 	stw	fp,44(sp)
    d4c4:	dc400415 	stw	r17,16(sp)
    d4c8:	dc000315 	stw	r16,12(sp)
    d4cc:	dfc00c15 	stw	ra,48(sp)
    d4d0:	ddc00a15 	stw	r23,40(sp)
    d4d4:	dd800915 	stw	r22,36(sp)
    d4d8:	dd400815 	stw	r21,32(sp)
    d4dc:	dd000715 	stw	r20,28(sp)
    d4e0:	dcc00615 	stw	r19,24(sp)
    d4e4:	dc800515 	stw	r18,20(sp)
    d4e8:	2021883a 	mov	r16,r4
    d4ec:	2823883a 	mov	r17,r5
    d4f0:	2839883a 	mov	fp,r5
    d4f4:	3800401e 	bne	r7,zero,d5f8 <__umoddi3+0x13c>
    d4f8:	3027883a 	mov	r19,r6
    d4fc:	2029883a 	mov	r20,r4
    d500:	2980552e 	bgeu	r5,r6,d658 <__umoddi3+0x19c>
    d504:	00bfffd4 	movui	r2,65535
    d508:	1180a236 	bltu	r2,r6,d794 <__umoddi3+0x2d8>
    d50c:	01003fc4 	movi	r4,255
    d510:	2189803a 	cmpltu	r4,r4,r6
    d514:	200890fa 	slli	r4,r4,3
    d518:	3104d83a 	srl	r2,r6,r4
    d51c:	00c00074 	movhi	r3,1
    d520:	18d4a704 	addi	r3,r3,21148
    d524:	1885883a 	add	r2,r3,r2
    d528:	10c00003 	ldbu	r3,0(r2)
    d52c:	00800804 	movi	r2,32
    d530:	1909883a 	add	r4,r3,r4
    d534:	1125c83a 	sub	r18,r2,r4
    d538:	90000526 	beq	r18,zero,d550 <__umoddi3+0x94>
    d53c:	8ca2983a 	sll	r17,r17,r18
    d540:	8108d83a 	srl	r4,r16,r4
    d544:	34a6983a 	sll	r19,r6,r18
    d548:	84a8983a 	sll	r20,r16,r18
    d54c:	2478b03a 	or	fp,r4,r17
    d550:	982cd43a 	srli	r22,r19,16
    d554:	e009883a 	mov	r4,fp
    d558:	9dffffcc 	andi	r23,r19,65535
    d55c:	b00b883a 	mov	r5,r22
    d560:	00033b80 	call	33b8 <__umodsi3>
    d564:	b00b883a 	mov	r5,r22
    d568:	e009883a 	mov	r4,fp
    d56c:	102b883a 	mov	r21,r2
    d570:	00033540 	call	3354 <__udivsi3>
    d574:	100b883a 	mov	r5,r2
    d578:	b809883a 	mov	r4,r23
    d57c:	00034100 	call	3410 <__mulsi3>
    d580:	a82a943a 	slli	r21,r21,16
    d584:	a006d43a 	srli	r3,r20,16
    d588:	1d46b03a 	or	r3,r3,r21
    d58c:	1880032e 	bgeu	r3,r2,d59c <__umoddi3+0xe0>
    d590:	1cc7883a 	add	r3,r3,r19
    d594:	1cc00136 	bltu	r3,r19,d59c <__umoddi3+0xe0>
    d598:	18813136 	bltu	r3,r2,da60 <__umoddi3+0x5a4>
    d59c:	18a1c83a 	sub	r16,r3,r2
    d5a0:	b00b883a 	mov	r5,r22
    d5a4:	8009883a 	mov	r4,r16
    d5a8:	00033b80 	call	33b8 <__umodsi3>
    d5ac:	b00b883a 	mov	r5,r22
    d5b0:	8009883a 	mov	r4,r16
    d5b4:	1023883a 	mov	r17,r2
    d5b8:	00033540 	call	3354 <__udivsi3>
    d5bc:	100b883a 	mov	r5,r2
    d5c0:	b809883a 	mov	r4,r23
    d5c4:	8822943a 	slli	r17,r17,16
    d5c8:	00034100 	call	3410 <__mulsi3>
    d5cc:	a0ffffcc 	andi	r3,r20,65535
    d5d0:	1c46b03a 	or	r3,r3,r17
    d5d4:	1880042e 	bgeu	r3,r2,d5e8 <__umoddi3+0x12c>
    d5d8:	1cc7883a 	add	r3,r3,r19
    d5dc:	1cc00236 	bltu	r3,r19,d5e8 <__umoddi3+0x12c>
    d5e0:	1880012e 	bgeu	r3,r2,d5e8 <__umoddi3+0x12c>
    d5e4:	1cc7883a 	add	r3,r3,r19
    d5e8:	1885c83a 	sub	r2,r3,r2
    d5ec:	1484d83a 	srl	r2,r2,r18
    d5f0:	0007883a 	mov	r3,zero
    d5f4:	00005306 	br	d744 <__umoddi3+0x288>
    d5f8:	29c05036 	bltu	r5,r7,d73c <__umoddi3+0x280>
    d5fc:	00bfffd4 	movui	r2,65535
    d600:	11c05c2e 	bgeu	r2,r7,d774 <__umoddi3+0x2b8>
    d604:	00804034 	movhi	r2,256
    d608:	10bfffc4 	addi	r2,r2,-1
    d60c:	11c10636 	bltu	r2,r7,da28 <__umoddi3+0x56c>
    d610:	01000404 	movi	r4,16
    d614:	3904d83a 	srl	r2,r7,r4
    d618:	00c00074 	movhi	r3,1
    d61c:	18d4a704 	addi	r3,r3,21148
    d620:	1885883a 	add	r2,r3,r2
    d624:	14c00003 	ldbu	r19,0(r2)
    d628:	00c00804 	movi	r3,32
    d62c:	9927883a 	add	r19,r19,r4
    d630:	1ce9c83a 	sub	r20,r3,r19
    d634:	a0005c1e 	bne	r20,zero,d7a8 <__umoddi3+0x2ec>
    d638:	3c400136 	bltu	r7,r17,d640 <__umoddi3+0x184>
    d63c:	81810a36 	bltu	r16,r6,da68 <__umoddi3+0x5ac>
    d640:	8185c83a 	sub	r2,r16,r6
    d644:	89e3c83a 	sub	r17,r17,r7
    d648:	8089803a 	cmpltu	r4,r16,r2
    d64c:	8939c83a 	sub	fp,r17,r4
    d650:	e007883a 	mov	r3,fp
    d654:	00003b06 	br	d744 <__umoddi3+0x288>
    d658:	3000041e 	bne	r6,zero,d66c <__umoddi3+0x1b0>
    d65c:	000b883a 	mov	r5,zero
    d660:	01000044 	movi	r4,1
    d664:	00033540 	call	3354 <__udivsi3>
    d668:	1027883a 	mov	r19,r2
    d66c:	00bfffd4 	movui	r2,65535
    d670:	14c0442e 	bgeu	r2,r19,d784 <__umoddi3+0x2c8>
    d674:	00804034 	movhi	r2,256
    d678:	10bfffc4 	addi	r2,r2,-1
    d67c:	14c0ec36 	bltu	r2,r19,da30 <__umoddi3+0x574>
    d680:	00800404 	movi	r2,16
    d684:	9886d83a 	srl	r3,r19,r2
    d688:	01000074 	movhi	r4,1
    d68c:	2114a704 	addi	r4,r4,21148
    d690:	20c7883a 	add	r3,r4,r3
    d694:	18c00003 	ldbu	r3,0(r3)
    d698:	1887883a 	add	r3,r3,r2
    d69c:	00800804 	movi	r2,32
    d6a0:	10e5c83a 	sub	r18,r2,r3
    d6a4:	9000ab1e 	bne	r18,zero,d954 <__umoddi3+0x498>
    d6a8:	982cd43a 	srli	r22,r19,16
    d6ac:	8ce3c83a 	sub	r17,r17,r19
    d6b0:	9dffffcc 	andi	r23,r19,65535
    d6b4:	b00b883a 	mov	r5,r22
    d6b8:	8809883a 	mov	r4,r17
    d6bc:	00033b80 	call	33b8 <__umodsi3>
    d6c0:	b00b883a 	mov	r5,r22
    d6c4:	8809883a 	mov	r4,r17
    d6c8:	102b883a 	mov	r21,r2
    d6cc:	00033540 	call	3354 <__udivsi3>
    d6d0:	b80b883a 	mov	r5,r23
    d6d4:	1009883a 	mov	r4,r2
    d6d8:	00034100 	call	3410 <__mulsi3>
    d6dc:	a82a943a 	slli	r21,r21,16
    d6e0:	a006d43a 	srli	r3,r20,16
    d6e4:	1d46b03a 	or	r3,r3,r21
    d6e8:	1880042e 	bgeu	r3,r2,d6fc <__umoddi3+0x240>
    d6ec:	1cc7883a 	add	r3,r3,r19
    d6f0:	1cc00236 	bltu	r3,r19,d6fc <__umoddi3+0x240>
    d6f4:	1880012e 	bgeu	r3,r2,d6fc <__umoddi3+0x240>
    d6f8:	1cc7883a 	add	r3,r3,r19
    d6fc:	18a1c83a 	sub	r16,r3,r2
    d700:	b00b883a 	mov	r5,r22
    d704:	8009883a 	mov	r4,r16
    d708:	00033b80 	call	33b8 <__umodsi3>
    d70c:	1023883a 	mov	r17,r2
    d710:	b00b883a 	mov	r5,r22
    d714:	8009883a 	mov	r4,r16
    d718:	00033540 	call	3354 <__udivsi3>
    d71c:	8822943a 	slli	r17,r17,16
    d720:	b80b883a 	mov	r5,r23
    d724:	1009883a 	mov	r4,r2
    d728:	00034100 	call	3410 <__mulsi3>
    d72c:	a53fffcc 	andi	r20,r20,65535
    d730:	a446b03a 	or	r3,r20,r17
    d734:	18bfac2e 	bgeu	r3,r2,d5e8 <__alt_data_end+0xfc00d5e8>
    d738:	003fa706 	br	d5d8 <__alt_data_end+0xfc00d5d8>
    d73c:	2005883a 	mov	r2,r4
    d740:	2807883a 	mov	r3,r5
    d744:	dfc00c17 	ldw	ra,48(sp)
    d748:	df000b17 	ldw	fp,44(sp)
    d74c:	ddc00a17 	ldw	r23,40(sp)
    d750:	dd800917 	ldw	r22,36(sp)
    d754:	dd400817 	ldw	r21,32(sp)
    d758:	dd000717 	ldw	r20,28(sp)
    d75c:	dcc00617 	ldw	r19,24(sp)
    d760:	dc800517 	ldw	r18,20(sp)
    d764:	dc400417 	ldw	r17,16(sp)
    d768:	dc000317 	ldw	r16,12(sp)
    d76c:	dec00d04 	addi	sp,sp,52
    d770:	f800283a 	ret
    d774:	04c03fc4 	movi	r19,255
    d778:	99c9803a 	cmpltu	r4,r19,r7
    d77c:	200890fa 	slli	r4,r4,3
    d780:	003fa406 	br	d614 <__alt_data_end+0xfc00d614>
    d784:	00803fc4 	movi	r2,255
    d788:	14c5803a 	cmpltu	r2,r2,r19
    d78c:	100490fa 	slli	r2,r2,3
    d790:	003fbc06 	br	d684 <__alt_data_end+0xfc00d684>
    d794:	00804034 	movhi	r2,256
    d798:	10bfffc4 	addi	r2,r2,-1
    d79c:	1180a636 	bltu	r2,r6,da38 <__umoddi3+0x57c>
    d7a0:	01000404 	movi	r4,16
    d7a4:	003f5c06 	br	d518 <__alt_data_end+0xfc00d518>
    d7a8:	3d0e983a 	sll	r7,r7,r20
    d7ac:	34ead83a 	srl	r21,r6,r19
    d7b0:	8cc6d83a 	srl	r3,r17,r19
    d7b4:	8d10983a 	sll	r8,r17,r20
    d7b8:	3d6ab03a 	or	r21,r7,r21
    d7bc:	a82cd43a 	srli	r22,r21,16
    d7c0:	84e2d83a 	srl	r17,r16,r19
    d7c4:	1809883a 	mov	r4,r3
    d7c8:	b00b883a 	mov	r5,r22
    d7cc:	8a22b03a 	or	r17,r17,r8
    d7d0:	3524983a 	sll	r18,r6,r20
    d7d4:	dc400015 	stw	r17,0(sp)
    d7d8:	d8c00115 	stw	r3,4(sp)
    d7dc:	00033b80 	call	33b8 <__umodsi3>
    d7e0:	d8c00117 	ldw	r3,4(sp)
    d7e4:	b00b883a 	mov	r5,r22
    d7e8:	1039883a 	mov	fp,r2
    d7ec:	1809883a 	mov	r4,r3
    d7f0:	00033540 	call	3354 <__udivsi3>
    d7f4:	adffffcc 	andi	r23,r21,65535
    d7f8:	100b883a 	mov	r5,r2
    d7fc:	b809883a 	mov	r4,r23
    d800:	1023883a 	mov	r17,r2
    d804:	00034100 	call	3410 <__mulsi3>
    d808:	d9400017 	ldw	r5,0(sp)
    d80c:	e008943a 	slli	r4,fp,16
    d810:	8520983a 	sll	r16,r16,r20
    d814:	2806d43a 	srli	r3,r5,16
    d818:	1906b03a 	or	r3,r3,r4
    d81c:	1880042e 	bgeu	r3,r2,d830 <__umoddi3+0x374>
    d820:	1d47883a 	add	r3,r3,r21
    d824:	893fffc4 	addi	r4,r17,-1
    d828:	1d40892e 	bgeu	r3,r21,da50 <__umoddi3+0x594>
    d82c:	2023883a 	mov	r17,r4
    d830:	18b9c83a 	sub	fp,r3,r2
    d834:	b00b883a 	mov	r5,r22
    d838:	e009883a 	mov	r4,fp
    d83c:	00033b80 	call	33b8 <__umodsi3>
    d840:	b00b883a 	mov	r5,r22
    d844:	e009883a 	mov	r4,fp
    d848:	d8800215 	stw	r2,8(sp)
    d84c:	00033540 	call	3354 <__udivsi3>
    d850:	100b883a 	mov	r5,r2
    d854:	b809883a 	mov	r4,r23
    d858:	102d883a 	mov	r22,r2
    d85c:	00034100 	call	3410 <__mulsi3>
    d860:	d9800217 	ldw	r6,8(sp)
    d864:	d8c00017 	ldw	r3,0(sp)
    d868:	300c943a 	slli	r6,r6,16
    d86c:	1a3fffcc 	andi	r8,r3,65535
    d870:	4190b03a 	or	r8,r8,r6
    d874:	4080042e 	bgeu	r8,r2,d888 <__umoddi3+0x3cc>
    d878:	4551883a 	add	r8,r8,r21
    d87c:	b0ffffc4 	addi	r3,r22,-1
    d880:	45406f2e 	bgeu	r8,r21,da40 <__umoddi3+0x584>
    d884:	182d883a 	mov	r22,r3
    d888:	880e943a 	slli	r7,r17,16
    d88c:	9006d43a 	srli	r3,r18,16
    d890:	91bfffcc 	andi	r6,r18,65535
    d894:	3dacb03a 	or	r22,r7,r22
    d898:	b02ed43a 	srli	r23,r22,16
    d89c:	b5bfffcc 	andi	r22,r22,65535
    d8a0:	300b883a 	mov	r5,r6
    d8a4:	b009883a 	mov	r4,r22
    d8a8:	40a3c83a 	sub	r17,r8,r2
    d8ac:	d8c00115 	stw	r3,4(sp)
    d8b0:	d9800215 	stw	r6,8(sp)
    d8b4:	00034100 	call	3410 <__mulsi3>
    d8b8:	d9800217 	ldw	r6,8(sp)
    d8bc:	b809883a 	mov	r4,r23
    d8c0:	1039883a 	mov	fp,r2
    d8c4:	300b883a 	mov	r5,r6
    d8c8:	00034100 	call	3410 <__mulsi3>
    d8cc:	d8c00117 	ldw	r3,4(sp)
    d8d0:	b809883a 	mov	r4,r23
    d8d4:	d8800215 	stw	r2,8(sp)
    d8d8:	180b883a 	mov	r5,r3
    d8dc:	00034100 	call	3410 <__mulsi3>
    d8e0:	d8c00117 	ldw	r3,4(sp)
    d8e4:	b009883a 	mov	r4,r22
    d8e8:	102f883a 	mov	r23,r2
    d8ec:	180b883a 	mov	r5,r3
    d8f0:	00034100 	call	3410 <__mulsi3>
    d8f4:	d9800217 	ldw	r6,8(sp)
    d8f8:	e006d43a 	srli	r3,fp,16
    d8fc:	1185883a 	add	r2,r2,r6
    d900:	1885883a 	add	r2,r3,r2
    d904:	1180022e 	bgeu	r2,r6,d910 <__umoddi3+0x454>
    d908:	00c00074 	movhi	r3,1
    d90c:	b8ef883a 	add	r23,r23,r3
    d910:	1006d43a 	srli	r3,r2,16
    d914:	1004943a 	slli	r2,r2,16
    d918:	e73fffcc 	andi	fp,fp,65535
    d91c:	1dc7883a 	add	r3,r3,r23
    d920:	1739883a 	add	fp,r2,fp
    d924:	88c03a36 	bltu	r17,r3,da10 <__umoddi3+0x554>
    d928:	88c05126 	beq	r17,r3,da70 <__umoddi3+0x5b4>
    d92c:	88c9c83a 	sub	r4,r17,r3
    d930:	e00f883a 	mov	r7,fp
    d934:	81cfc83a 	sub	r7,r16,r7
    d938:	81c7803a 	cmpltu	r3,r16,r7
    d93c:	20c7c83a 	sub	r3,r4,r3
    d940:	1cc4983a 	sll	r2,r3,r19
    d944:	3d0ed83a 	srl	r7,r7,r20
    d948:	1d06d83a 	srl	r3,r3,r20
    d94c:	11c4b03a 	or	r2,r2,r7
    d950:	003f7c06 	br	d744 <__alt_data_end+0xfc00d744>
    d954:	9ca6983a 	sll	r19,r19,r18
    d958:	88f8d83a 	srl	fp,r17,r3
    d95c:	80c4d83a 	srl	r2,r16,r3
    d960:	982cd43a 	srli	r22,r19,16
    d964:	8ca2983a 	sll	r17,r17,r18
    d968:	e009883a 	mov	r4,fp
    d96c:	b00b883a 	mov	r5,r22
    d970:	146ab03a 	or	r21,r2,r17
    d974:	00033b80 	call	33b8 <__umodsi3>
    d978:	b00b883a 	mov	r5,r22
    d97c:	e009883a 	mov	r4,fp
    d980:	1029883a 	mov	r20,r2
    d984:	9dffffcc 	andi	r23,r19,65535
    d988:	00033540 	call	3354 <__udivsi3>
    d98c:	b809883a 	mov	r4,r23
    d990:	100b883a 	mov	r5,r2
    d994:	00034100 	call	3410 <__mulsi3>
    d998:	a008943a 	slli	r4,r20,16
    d99c:	a806d43a 	srli	r3,r21,16
    d9a0:	84a8983a 	sll	r20,r16,r18
    d9a4:	1906b03a 	or	r3,r3,r4
    d9a8:	1880042e 	bgeu	r3,r2,d9bc <__umoddi3+0x500>
    d9ac:	1cc7883a 	add	r3,r3,r19
    d9b0:	1cc00236 	bltu	r3,r19,d9bc <__umoddi3+0x500>
    d9b4:	1880012e 	bgeu	r3,r2,d9bc <__umoddi3+0x500>
    d9b8:	1cc7883a 	add	r3,r3,r19
    d9bc:	18a3c83a 	sub	r17,r3,r2
    d9c0:	b00b883a 	mov	r5,r22
    d9c4:	8809883a 	mov	r4,r17
    d9c8:	00033b80 	call	33b8 <__umodsi3>
    d9cc:	b00b883a 	mov	r5,r22
    d9d0:	8809883a 	mov	r4,r17
    d9d4:	1021883a 	mov	r16,r2
    d9d8:	00033540 	call	3354 <__udivsi3>
    d9dc:	100b883a 	mov	r5,r2
    d9e0:	b809883a 	mov	r4,r23
    d9e4:	8020943a 	slli	r16,r16,16
    d9e8:	00034100 	call	3410 <__mulsi3>
    d9ec:	a8ffffcc 	andi	r3,r21,65535
    d9f0:	1c06b03a 	or	r3,r3,r16
    d9f4:	1880042e 	bgeu	r3,r2,da08 <__umoddi3+0x54c>
    d9f8:	1cc7883a 	add	r3,r3,r19
    d9fc:	1cc00236 	bltu	r3,r19,da08 <__umoddi3+0x54c>
    da00:	1880012e 	bgeu	r3,r2,da08 <__umoddi3+0x54c>
    da04:	1cc7883a 	add	r3,r3,r19
    da08:	18a3c83a 	sub	r17,r3,r2
    da0c:	003f2906 	br	d6b4 <__alt_data_end+0xfc00d6b4>
    da10:	e48fc83a 	sub	r7,fp,r18
    da14:	1d49c83a 	sub	r4,r3,r21
    da18:	e1f9803a 	cmpltu	fp,fp,r7
    da1c:	2739c83a 	sub	fp,r4,fp
    da20:	8f09c83a 	sub	r4,r17,fp
    da24:	003fc306 	br	d934 <__alt_data_end+0xfc00d934>
    da28:	01000604 	movi	r4,24
    da2c:	003ef906 	br	d614 <__alt_data_end+0xfc00d614>
    da30:	00800604 	movi	r2,24
    da34:	003f1306 	br	d684 <__alt_data_end+0xfc00d684>
    da38:	01000604 	movi	r4,24
    da3c:	003eb606 	br	d518 <__alt_data_end+0xfc00d518>
    da40:	40bf902e 	bgeu	r8,r2,d884 <__alt_data_end+0xfc00d884>
    da44:	b5bfff84 	addi	r22,r22,-2
    da48:	4551883a 	add	r8,r8,r21
    da4c:	003f8e06 	br	d888 <__alt_data_end+0xfc00d888>
    da50:	18bf762e 	bgeu	r3,r2,d82c <__alt_data_end+0xfc00d82c>
    da54:	8c7fff84 	addi	r17,r17,-2
    da58:	1d47883a 	add	r3,r3,r21
    da5c:	003f7406 	br	d830 <__alt_data_end+0xfc00d830>
    da60:	1cc7883a 	add	r3,r3,r19
    da64:	003ecd06 	br	d59c <__alt_data_end+0xfc00d59c>
    da68:	8005883a 	mov	r2,r16
    da6c:	003ef806 	br	d650 <__alt_data_end+0xfc00d650>
    da70:	873fe736 	bltu	r16,fp,da10 <__alt_data_end+0xfc00da10>
    da74:	e00f883a 	mov	r7,fp
    da78:	0009883a 	mov	r4,zero
    da7c:	003fad06 	br	d934 <__alt_data_end+0xfc00d934>

0000da80 <__adddf3>:
    da80:	02c00434 	movhi	r11,16
    da84:	5affffc4 	addi	r11,r11,-1
    da88:	2806d7fa 	srli	r3,r5,31
    da8c:	2ad4703a 	and	r10,r5,r11
    da90:	3ad2703a 	and	r9,r7,r11
    da94:	3804d53a 	srli	r2,r7,20
    da98:	3018d77a 	srli	r12,r6,29
    da9c:	280ad53a 	srli	r5,r5,20
    daa0:	501490fa 	slli	r10,r10,3
    daa4:	2010d77a 	srli	r8,r4,29
    daa8:	481290fa 	slli	r9,r9,3
    daac:	380ed7fa 	srli	r7,r7,31
    dab0:	defffb04 	addi	sp,sp,-20
    dab4:	dc800215 	stw	r18,8(sp)
    dab8:	dc400115 	stw	r17,4(sp)
    dabc:	dc000015 	stw	r16,0(sp)
    dac0:	dfc00415 	stw	ra,16(sp)
    dac4:	dcc00315 	stw	r19,12(sp)
    dac8:	1c803fcc 	andi	r18,r3,255
    dacc:	2c01ffcc 	andi	r16,r5,2047
    dad0:	5210b03a 	or	r8,r10,r8
    dad4:	202290fa 	slli	r17,r4,3
    dad8:	1081ffcc 	andi	r2,r2,2047
    dadc:	4b12b03a 	or	r9,r9,r12
    dae0:	300c90fa 	slli	r6,r6,3
    dae4:	91c07526 	beq	r18,r7,dcbc <__adddf3+0x23c>
    dae8:	8087c83a 	sub	r3,r16,r2
    daec:	00c0ab0e 	bge	zero,r3,dd9c <__adddf3+0x31c>
    daf0:	10002a1e 	bne	r2,zero,db9c <__adddf3+0x11c>
    daf4:	4984b03a 	or	r2,r9,r6
    daf8:	1000961e 	bne	r2,zero,dd54 <__adddf3+0x2d4>
    dafc:	888001cc 	andi	r2,r17,7
    db00:	10000726 	beq	r2,zero,db20 <__adddf3+0xa0>
    db04:	888003cc 	andi	r2,r17,15
    db08:	00c00104 	movi	r3,4
    db0c:	10c00426 	beq	r2,r3,db20 <__adddf3+0xa0>
    db10:	88c7883a 	add	r3,r17,r3
    db14:	1c63803a 	cmpltu	r17,r3,r17
    db18:	4451883a 	add	r8,r8,r17
    db1c:	1823883a 	mov	r17,r3
    db20:	4080202c 	andhi	r2,r8,128
    db24:	10005926 	beq	r2,zero,dc8c <__adddf3+0x20c>
    db28:	84000044 	addi	r16,r16,1
    db2c:	0081ffc4 	movi	r2,2047
    db30:	8080ba26 	beq	r16,r2,de1c <__adddf3+0x39c>
    db34:	00bfe034 	movhi	r2,65408
    db38:	10bfffc4 	addi	r2,r2,-1
    db3c:	4090703a 	and	r8,r8,r2
    db40:	4004977a 	slli	r2,r8,29
    db44:	4010927a 	slli	r8,r8,9
    db48:	8822d0fa 	srli	r17,r17,3
    db4c:	8401ffcc 	andi	r16,r16,2047
    db50:	4010d33a 	srli	r8,r8,12
    db54:	9007883a 	mov	r3,r18
    db58:	1444b03a 	or	r2,r2,r17
    db5c:	8401ffcc 	andi	r16,r16,2047
    db60:	8020953a 	slli	r16,r16,20
    db64:	18c03fcc 	andi	r3,r3,255
    db68:	01000434 	movhi	r4,16
    db6c:	213fffc4 	addi	r4,r4,-1
    db70:	180697fa 	slli	r3,r3,31
    db74:	4110703a 	and	r8,r8,r4
    db78:	4410b03a 	or	r8,r8,r16
    db7c:	40c6b03a 	or	r3,r8,r3
    db80:	dfc00417 	ldw	ra,16(sp)
    db84:	dcc00317 	ldw	r19,12(sp)
    db88:	dc800217 	ldw	r18,8(sp)
    db8c:	dc400117 	ldw	r17,4(sp)
    db90:	dc000017 	ldw	r16,0(sp)
    db94:	dec00504 	addi	sp,sp,20
    db98:	f800283a 	ret
    db9c:	0081ffc4 	movi	r2,2047
    dba0:	80bfd626 	beq	r16,r2,dafc <__alt_data_end+0xfc00dafc>
    dba4:	4a402034 	orhi	r9,r9,128
    dba8:	00800e04 	movi	r2,56
    dbac:	10c09f16 	blt	r2,r3,de2c <__adddf3+0x3ac>
    dbb0:	008007c4 	movi	r2,31
    dbb4:	10c0c216 	blt	r2,r3,dec0 <__adddf3+0x440>
    dbb8:	00800804 	movi	r2,32
    dbbc:	10c5c83a 	sub	r2,r2,r3
    dbc0:	488a983a 	sll	r5,r9,r2
    dbc4:	30c8d83a 	srl	r4,r6,r3
    dbc8:	3084983a 	sll	r2,r6,r2
    dbcc:	48c6d83a 	srl	r3,r9,r3
    dbd0:	290cb03a 	or	r6,r5,r4
    dbd4:	1004c03a 	cmpne	r2,r2,zero
    dbd8:	308cb03a 	or	r6,r6,r2
    dbdc:	898dc83a 	sub	r6,r17,r6
    dbe0:	89a3803a 	cmpltu	r17,r17,r6
    dbe4:	40d1c83a 	sub	r8,r8,r3
    dbe8:	4451c83a 	sub	r8,r8,r17
    dbec:	3023883a 	mov	r17,r6
    dbf0:	4080202c 	andhi	r2,r8,128
    dbf4:	10002326 	beq	r2,zero,dc84 <__adddf3+0x204>
    dbf8:	04c02034 	movhi	r19,128
    dbfc:	9cffffc4 	addi	r19,r19,-1
    dc00:	44e6703a 	and	r19,r8,r19
    dc04:	98007626 	beq	r19,zero,dde0 <__adddf3+0x360>
    dc08:	9809883a 	mov	r4,r19
    dc0c:	00102c00 	call	102c0 <__clzsi2>
    dc10:	10fffe04 	addi	r3,r2,-8
    dc14:	010007c4 	movi	r4,31
    dc18:	20c07716 	blt	r4,r3,ddf8 <__adddf3+0x378>
    dc1c:	00800804 	movi	r2,32
    dc20:	10c5c83a 	sub	r2,r2,r3
    dc24:	8884d83a 	srl	r2,r17,r2
    dc28:	98d0983a 	sll	r8,r19,r3
    dc2c:	88e2983a 	sll	r17,r17,r3
    dc30:	1204b03a 	or	r2,r2,r8
    dc34:	1c007416 	blt	r3,r16,de08 <__adddf3+0x388>
    dc38:	1c21c83a 	sub	r16,r3,r16
    dc3c:	82000044 	addi	r8,r16,1
    dc40:	00c007c4 	movi	r3,31
    dc44:	1a009116 	blt	r3,r8,de8c <__adddf3+0x40c>
    dc48:	00c00804 	movi	r3,32
    dc4c:	1a07c83a 	sub	r3,r3,r8
    dc50:	8a08d83a 	srl	r4,r17,r8
    dc54:	88e2983a 	sll	r17,r17,r3
    dc58:	10c6983a 	sll	r3,r2,r3
    dc5c:	1210d83a 	srl	r8,r2,r8
    dc60:	8804c03a 	cmpne	r2,r17,zero
    dc64:	1906b03a 	or	r3,r3,r4
    dc68:	18a2b03a 	or	r17,r3,r2
    dc6c:	0021883a 	mov	r16,zero
    dc70:	003fa206 	br	dafc <__alt_data_end+0xfc00dafc>
    dc74:	1890b03a 	or	r8,r3,r2
    dc78:	40017d26 	beq	r8,zero,e270 <__adddf3+0x7f0>
    dc7c:	1011883a 	mov	r8,r2
    dc80:	1823883a 	mov	r17,r3
    dc84:	888001cc 	andi	r2,r17,7
    dc88:	103f9e1e 	bne	r2,zero,db04 <__alt_data_end+0xfc00db04>
    dc8c:	4004977a 	slli	r2,r8,29
    dc90:	8822d0fa 	srli	r17,r17,3
    dc94:	4010d0fa 	srli	r8,r8,3
    dc98:	9007883a 	mov	r3,r18
    dc9c:	1444b03a 	or	r2,r2,r17
    dca0:	0101ffc4 	movi	r4,2047
    dca4:	81002426 	beq	r16,r4,dd38 <__adddf3+0x2b8>
    dca8:	8120703a 	and	r16,r16,r4
    dcac:	01000434 	movhi	r4,16
    dcb0:	213fffc4 	addi	r4,r4,-1
    dcb4:	4110703a 	and	r8,r8,r4
    dcb8:	003fa806 	br	db5c <__alt_data_end+0xfc00db5c>
    dcbc:	8089c83a 	sub	r4,r16,r2
    dcc0:	01005e0e 	bge	zero,r4,de3c <__adddf3+0x3bc>
    dcc4:	10002b26 	beq	r2,zero,dd74 <__adddf3+0x2f4>
    dcc8:	0081ffc4 	movi	r2,2047
    dccc:	80bf8b26 	beq	r16,r2,dafc <__alt_data_end+0xfc00dafc>
    dcd0:	4a402034 	orhi	r9,r9,128
    dcd4:	00800e04 	movi	r2,56
    dcd8:	1100a40e 	bge	r2,r4,df6c <__adddf3+0x4ec>
    dcdc:	498cb03a 	or	r6,r9,r6
    dce0:	300ac03a 	cmpne	r5,r6,zero
    dce4:	0013883a 	mov	r9,zero
    dce8:	2c4b883a 	add	r5,r5,r17
    dcec:	2c63803a 	cmpltu	r17,r5,r17
    dcf0:	4a11883a 	add	r8,r9,r8
    dcf4:	8a11883a 	add	r8,r17,r8
    dcf8:	2823883a 	mov	r17,r5
    dcfc:	4080202c 	andhi	r2,r8,128
    dd00:	103fe026 	beq	r2,zero,dc84 <__alt_data_end+0xfc00dc84>
    dd04:	84000044 	addi	r16,r16,1
    dd08:	0081ffc4 	movi	r2,2047
    dd0c:	8080d226 	beq	r16,r2,e058 <__adddf3+0x5d8>
    dd10:	00bfe034 	movhi	r2,65408
    dd14:	10bfffc4 	addi	r2,r2,-1
    dd18:	4090703a 	and	r8,r8,r2
    dd1c:	880ad07a 	srli	r5,r17,1
    dd20:	400897fa 	slli	r4,r8,31
    dd24:	88c0004c 	andi	r3,r17,1
    dd28:	28e2b03a 	or	r17,r5,r3
    dd2c:	4010d07a 	srli	r8,r8,1
    dd30:	2462b03a 	or	r17,r4,r17
    dd34:	003f7106 	br	dafc <__alt_data_end+0xfc00dafc>
    dd38:	4088b03a 	or	r4,r8,r2
    dd3c:	20014526 	beq	r4,zero,e254 <__adddf3+0x7d4>
    dd40:	01000434 	movhi	r4,16
    dd44:	42000234 	orhi	r8,r8,8
    dd48:	213fffc4 	addi	r4,r4,-1
    dd4c:	4110703a 	and	r8,r8,r4
    dd50:	003f8206 	br	db5c <__alt_data_end+0xfc00db5c>
    dd54:	18ffffc4 	addi	r3,r3,-1
    dd58:	1800491e 	bne	r3,zero,de80 <__adddf3+0x400>
    dd5c:	898bc83a 	sub	r5,r17,r6
    dd60:	8963803a 	cmpltu	r17,r17,r5
    dd64:	4251c83a 	sub	r8,r8,r9
    dd68:	4451c83a 	sub	r8,r8,r17
    dd6c:	2823883a 	mov	r17,r5
    dd70:	003f9f06 	br	dbf0 <__alt_data_end+0xfc00dbf0>
    dd74:	4984b03a 	or	r2,r9,r6
    dd78:	103f6026 	beq	r2,zero,dafc <__alt_data_end+0xfc00dafc>
    dd7c:	213fffc4 	addi	r4,r4,-1
    dd80:	2000931e 	bne	r4,zero,dfd0 <__adddf3+0x550>
    dd84:	898d883a 	add	r6,r17,r6
    dd88:	3463803a 	cmpltu	r17,r6,r17
    dd8c:	4251883a 	add	r8,r8,r9
    dd90:	8a11883a 	add	r8,r17,r8
    dd94:	3023883a 	mov	r17,r6
    dd98:	003fd806 	br	dcfc <__alt_data_end+0xfc00dcfc>
    dd9c:	1800541e 	bne	r3,zero,def0 <__adddf3+0x470>
    dda0:	80800044 	addi	r2,r16,1
    dda4:	1081ffcc 	andi	r2,r2,2047
    dda8:	00c00044 	movi	r3,1
    ddac:	1880a00e 	bge	r3,r2,e030 <__adddf3+0x5b0>
    ddb0:	8989c83a 	sub	r4,r17,r6
    ddb4:	8905803a 	cmpltu	r2,r17,r4
    ddb8:	4267c83a 	sub	r19,r8,r9
    ddbc:	98a7c83a 	sub	r19,r19,r2
    ddc0:	9880202c 	andhi	r2,r19,128
    ddc4:	10006326 	beq	r2,zero,df54 <__adddf3+0x4d4>
    ddc8:	3463c83a 	sub	r17,r6,r17
    ddcc:	4a07c83a 	sub	r3,r9,r8
    ddd0:	344d803a 	cmpltu	r6,r6,r17
    ddd4:	19a7c83a 	sub	r19,r3,r6
    ddd8:	3825883a 	mov	r18,r7
    dddc:	983f8a1e 	bne	r19,zero,dc08 <__alt_data_end+0xfc00dc08>
    dde0:	8809883a 	mov	r4,r17
    dde4:	00102c00 	call	102c0 <__clzsi2>
    dde8:	10800804 	addi	r2,r2,32
    ddec:	10fffe04 	addi	r3,r2,-8
    ddf0:	010007c4 	movi	r4,31
    ddf4:	20ff890e 	bge	r4,r3,dc1c <__alt_data_end+0xfc00dc1c>
    ddf8:	10bff604 	addi	r2,r2,-40
    ddfc:	8884983a 	sll	r2,r17,r2
    de00:	0023883a 	mov	r17,zero
    de04:	1c3f8c0e 	bge	r3,r16,dc38 <__alt_data_end+0xfc00dc38>
    de08:	023fe034 	movhi	r8,65408
    de0c:	423fffc4 	addi	r8,r8,-1
    de10:	80e1c83a 	sub	r16,r16,r3
    de14:	1210703a 	and	r8,r2,r8
    de18:	003f3806 	br	dafc <__alt_data_end+0xfc00dafc>
    de1c:	9007883a 	mov	r3,r18
    de20:	0011883a 	mov	r8,zero
    de24:	0005883a 	mov	r2,zero
    de28:	003f4c06 	br	db5c <__alt_data_end+0xfc00db5c>
    de2c:	498cb03a 	or	r6,r9,r6
    de30:	300cc03a 	cmpne	r6,r6,zero
    de34:	0007883a 	mov	r3,zero
    de38:	003f6806 	br	dbdc <__alt_data_end+0xfc00dbdc>
    de3c:	20009c1e 	bne	r4,zero,e0b0 <__adddf3+0x630>
    de40:	80800044 	addi	r2,r16,1
    de44:	1141ffcc 	andi	r5,r2,2047
    de48:	01000044 	movi	r4,1
    de4c:	2140670e 	bge	r4,r5,dfec <__adddf3+0x56c>
    de50:	0101ffc4 	movi	r4,2047
    de54:	11007f26 	beq	r2,r4,e054 <__adddf3+0x5d4>
    de58:	898d883a 	add	r6,r17,r6
    de5c:	4247883a 	add	r3,r8,r9
    de60:	3451803a 	cmpltu	r8,r6,r17
    de64:	40d1883a 	add	r8,r8,r3
    de68:	402297fa 	slli	r17,r8,31
    de6c:	300cd07a 	srli	r6,r6,1
    de70:	4010d07a 	srli	r8,r8,1
    de74:	1021883a 	mov	r16,r2
    de78:	89a2b03a 	or	r17,r17,r6
    de7c:	003f1f06 	br	dafc <__alt_data_end+0xfc00dafc>
    de80:	0081ffc4 	movi	r2,2047
    de84:	80bf481e 	bne	r16,r2,dba8 <__alt_data_end+0xfc00dba8>
    de88:	003f1c06 	br	dafc <__alt_data_end+0xfc00dafc>
    de8c:	843ff844 	addi	r16,r16,-31
    de90:	01000804 	movi	r4,32
    de94:	1406d83a 	srl	r3,r2,r16
    de98:	41005026 	beq	r8,r4,dfdc <__adddf3+0x55c>
    de9c:	01001004 	movi	r4,64
    dea0:	2211c83a 	sub	r8,r4,r8
    dea4:	1204983a 	sll	r2,r2,r8
    dea8:	88a2b03a 	or	r17,r17,r2
    deac:	8822c03a 	cmpne	r17,r17,zero
    deb0:	1c62b03a 	or	r17,r3,r17
    deb4:	0011883a 	mov	r8,zero
    deb8:	0021883a 	mov	r16,zero
    debc:	003f7106 	br	dc84 <__alt_data_end+0xfc00dc84>
    dec0:	193ff804 	addi	r4,r3,-32
    dec4:	00800804 	movi	r2,32
    dec8:	4908d83a 	srl	r4,r9,r4
    decc:	18804526 	beq	r3,r2,dfe4 <__adddf3+0x564>
    ded0:	00801004 	movi	r2,64
    ded4:	10c5c83a 	sub	r2,r2,r3
    ded8:	4886983a 	sll	r3,r9,r2
    dedc:	198cb03a 	or	r6,r3,r6
    dee0:	300cc03a 	cmpne	r6,r6,zero
    dee4:	218cb03a 	or	r6,r4,r6
    dee8:	0007883a 	mov	r3,zero
    deec:	003f3b06 	br	dbdc <__alt_data_end+0xfc00dbdc>
    def0:	80002a26 	beq	r16,zero,df9c <__adddf3+0x51c>
    def4:	0101ffc4 	movi	r4,2047
    def8:	11006826 	beq	r2,r4,e09c <__adddf3+0x61c>
    defc:	00c7c83a 	sub	r3,zero,r3
    df00:	42002034 	orhi	r8,r8,128
    df04:	01000e04 	movi	r4,56
    df08:	20c07c16 	blt	r4,r3,e0fc <__adddf3+0x67c>
    df0c:	010007c4 	movi	r4,31
    df10:	20c0da16 	blt	r4,r3,e27c <__adddf3+0x7fc>
    df14:	01000804 	movi	r4,32
    df18:	20c9c83a 	sub	r4,r4,r3
    df1c:	4114983a 	sll	r10,r8,r4
    df20:	88cad83a 	srl	r5,r17,r3
    df24:	8908983a 	sll	r4,r17,r4
    df28:	40c6d83a 	srl	r3,r8,r3
    df2c:	5162b03a 	or	r17,r10,r5
    df30:	2008c03a 	cmpne	r4,r4,zero
    df34:	8922b03a 	or	r17,r17,r4
    df38:	3463c83a 	sub	r17,r6,r17
    df3c:	48c7c83a 	sub	r3,r9,r3
    df40:	344d803a 	cmpltu	r6,r6,r17
    df44:	1991c83a 	sub	r8,r3,r6
    df48:	1021883a 	mov	r16,r2
    df4c:	3825883a 	mov	r18,r7
    df50:	003f2706 	br	dbf0 <__alt_data_end+0xfc00dbf0>
    df54:	24d0b03a 	or	r8,r4,r19
    df58:	40001b1e 	bne	r8,zero,dfc8 <__adddf3+0x548>
    df5c:	0005883a 	mov	r2,zero
    df60:	0007883a 	mov	r3,zero
    df64:	0021883a 	mov	r16,zero
    df68:	003f4d06 	br	dca0 <__alt_data_end+0xfc00dca0>
    df6c:	008007c4 	movi	r2,31
    df70:	11003c16 	blt	r2,r4,e064 <__adddf3+0x5e4>
    df74:	00800804 	movi	r2,32
    df78:	1105c83a 	sub	r2,r2,r4
    df7c:	488e983a 	sll	r7,r9,r2
    df80:	310ad83a 	srl	r5,r6,r4
    df84:	3084983a 	sll	r2,r6,r2
    df88:	4912d83a 	srl	r9,r9,r4
    df8c:	394ab03a 	or	r5,r7,r5
    df90:	1004c03a 	cmpne	r2,r2,zero
    df94:	288ab03a 	or	r5,r5,r2
    df98:	003f5306 	br	dce8 <__alt_data_end+0xfc00dce8>
    df9c:	4448b03a 	or	r4,r8,r17
    dfa0:	20003e26 	beq	r4,zero,e09c <__adddf3+0x61c>
    dfa4:	00c6303a 	nor	r3,zero,r3
    dfa8:	18003a1e 	bne	r3,zero,e094 <__adddf3+0x614>
    dfac:	3463c83a 	sub	r17,r6,r17
    dfb0:	4a07c83a 	sub	r3,r9,r8
    dfb4:	344d803a 	cmpltu	r6,r6,r17
    dfb8:	1991c83a 	sub	r8,r3,r6
    dfbc:	1021883a 	mov	r16,r2
    dfc0:	3825883a 	mov	r18,r7
    dfc4:	003f0a06 	br	dbf0 <__alt_data_end+0xfc00dbf0>
    dfc8:	2023883a 	mov	r17,r4
    dfcc:	003f0d06 	br	dc04 <__alt_data_end+0xfc00dc04>
    dfd0:	0081ffc4 	movi	r2,2047
    dfd4:	80bf3f1e 	bne	r16,r2,dcd4 <__alt_data_end+0xfc00dcd4>
    dfd8:	003ec806 	br	dafc <__alt_data_end+0xfc00dafc>
    dfdc:	0005883a 	mov	r2,zero
    dfe0:	003fb106 	br	dea8 <__alt_data_end+0xfc00dea8>
    dfe4:	0007883a 	mov	r3,zero
    dfe8:	003fbc06 	br	dedc <__alt_data_end+0xfc00dedc>
    dfec:	4444b03a 	or	r2,r8,r17
    dff0:	8000871e 	bne	r16,zero,e210 <__adddf3+0x790>
    dff4:	1000ba26 	beq	r2,zero,e2e0 <__adddf3+0x860>
    dff8:	4984b03a 	or	r2,r9,r6
    dffc:	103ebf26 	beq	r2,zero,dafc <__alt_data_end+0xfc00dafc>
    e000:	8985883a 	add	r2,r17,r6
    e004:	4247883a 	add	r3,r8,r9
    e008:	1451803a 	cmpltu	r8,r2,r17
    e00c:	40d1883a 	add	r8,r8,r3
    e010:	40c0202c 	andhi	r3,r8,128
    e014:	1023883a 	mov	r17,r2
    e018:	183f1a26 	beq	r3,zero,dc84 <__alt_data_end+0xfc00dc84>
    e01c:	00bfe034 	movhi	r2,65408
    e020:	10bfffc4 	addi	r2,r2,-1
    e024:	2021883a 	mov	r16,r4
    e028:	4090703a 	and	r8,r8,r2
    e02c:	003eb306 	br	dafc <__alt_data_end+0xfc00dafc>
    e030:	4444b03a 	or	r2,r8,r17
    e034:	8000291e 	bne	r16,zero,e0dc <__adddf3+0x65c>
    e038:	10004b1e 	bne	r2,zero,e168 <__adddf3+0x6e8>
    e03c:	4990b03a 	or	r8,r9,r6
    e040:	40008b26 	beq	r8,zero,e270 <__adddf3+0x7f0>
    e044:	4811883a 	mov	r8,r9
    e048:	3023883a 	mov	r17,r6
    e04c:	3825883a 	mov	r18,r7
    e050:	003eaa06 	br	dafc <__alt_data_end+0xfc00dafc>
    e054:	1021883a 	mov	r16,r2
    e058:	0011883a 	mov	r8,zero
    e05c:	0005883a 	mov	r2,zero
    e060:	003f0f06 	br	dca0 <__alt_data_end+0xfc00dca0>
    e064:	217ff804 	addi	r5,r4,-32
    e068:	00800804 	movi	r2,32
    e06c:	494ad83a 	srl	r5,r9,r5
    e070:	20807d26 	beq	r4,r2,e268 <__adddf3+0x7e8>
    e074:	00801004 	movi	r2,64
    e078:	1109c83a 	sub	r4,r2,r4
    e07c:	4912983a 	sll	r9,r9,r4
    e080:	498cb03a 	or	r6,r9,r6
    e084:	300cc03a 	cmpne	r6,r6,zero
    e088:	298ab03a 	or	r5,r5,r6
    e08c:	0013883a 	mov	r9,zero
    e090:	003f1506 	br	dce8 <__alt_data_end+0xfc00dce8>
    e094:	0101ffc4 	movi	r4,2047
    e098:	113f9a1e 	bne	r2,r4,df04 <__alt_data_end+0xfc00df04>
    e09c:	4811883a 	mov	r8,r9
    e0a0:	3023883a 	mov	r17,r6
    e0a4:	1021883a 	mov	r16,r2
    e0a8:	3825883a 	mov	r18,r7
    e0ac:	003e9306 	br	dafc <__alt_data_end+0xfc00dafc>
    e0b0:	8000161e 	bne	r16,zero,e10c <__adddf3+0x68c>
    e0b4:	444ab03a 	or	r5,r8,r17
    e0b8:	28005126 	beq	r5,zero,e200 <__adddf3+0x780>
    e0bc:	0108303a 	nor	r4,zero,r4
    e0c0:	20004d1e 	bne	r4,zero,e1f8 <__adddf3+0x778>
    e0c4:	89a3883a 	add	r17,r17,r6
    e0c8:	4253883a 	add	r9,r8,r9
    e0cc:	898d803a 	cmpltu	r6,r17,r6
    e0d0:	3251883a 	add	r8,r6,r9
    e0d4:	1021883a 	mov	r16,r2
    e0d8:	003f0806 	br	dcfc <__alt_data_end+0xfc00dcfc>
    e0dc:	1000301e 	bne	r2,zero,e1a0 <__adddf3+0x720>
    e0e0:	4984b03a 	or	r2,r9,r6
    e0e4:	10007126 	beq	r2,zero,e2ac <__adddf3+0x82c>
    e0e8:	4811883a 	mov	r8,r9
    e0ec:	3023883a 	mov	r17,r6
    e0f0:	3825883a 	mov	r18,r7
    e0f4:	0401ffc4 	movi	r16,2047
    e0f8:	003e8006 	br	dafc <__alt_data_end+0xfc00dafc>
    e0fc:	4462b03a 	or	r17,r8,r17
    e100:	8822c03a 	cmpne	r17,r17,zero
    e104:	0007883a 	mov	r3,zero
    e108:	003f8b06 	br	df38 <__alt_data_end+0xfc00df38>
    e10c:	0141ffc4 	movi	r5,2047
    e110:	11403b26 	beq	r2,r5,e200 <__adddf3+0x780>
    e114:	0109c83a 	sub	r4,zero,r4
    e118:	42002034 	orhi	r8,r8,128
    e11c:	01400e04 	movi	r5,56
    e120:	29006716 	blt	r5,r4,e2c0 <__adddf3+0x840>
    e124:	014007c4 	movi	r5,31
    e128:	29007016 	blt	r5,r4,e2ec <__adddf3+0x86c>
    e12c:	01400804 	movi	r5,32
    e130:	290bc83a 	sub	r5,r5,r4
    e134:	4154983a 	sll	r10,r8,r5
    e138:	890ed83a 	srl	r7,r17,r4
    e13c:	894a983a 	sll	r5,r17,r5
    e140:	4108d83a 	srl	r4,r8,r4
    e144:	51e2b03a 	or	r17,r10,r7
    e148:	280ac03a 	cmpne	r5,r5,zero
    e14c:	8962b03a 	or	r17,r17,r5
    e150:	89a3883a 	add	r17,r17,r6
    e154:	2253883a 	add	r9,r4,r9
    e158:	898d803a 	cmpltu	r6,r17,r6
    e15c:	3251883a 	add	r8,r6,r9
    e160:	1021883a 	mov	r16,r2
    e164:	003ee506 	br	dcfc <__alt_data_end+0xfc00dcfc>
    e168:	4984b03a 	or	r2,r9,r6
    e16c:	103e6326 	beq	r2,zero,dafc <__alt_data_end+0xfc00dafc>
    e170:	8987c83a 	sub	r3,r17,r6
    e174:	88c9803a 	cmpltu	r4,r17,r3
    e178:	4245c83a 	sub	r2,r8,r9
    e17c:	1105c83a 	sub	r2,r2,r4
    e180:	1100202c 	andhi	r4,r2,128
    e184:	203ebb26 	beq	r4,zero,dc74 <__alt_data_end+0xfc00dc74>
    e188:	3463c83a 	sub	r17,r6,r17
    e18c:	4a07c83a 	sub	r3,r9,r8
    e190:	344d803a 	cmpltu	r6,r6,r17
    e194:	1991c83a 	sub	r8,r3,r6
    e198:	3825883a 	mov	r18,r7
    e19c:	003e5706 	br	dafc <__alt_data_end+0xfc00dafc>
    e1a0:	4984b03a 	or	r2,r9,r6
    e1a4:	10002e26 	beq	r2,zero,e260 <__adddf3+0x7e0>
    e1a8:	4004d0fa 	srli	r2,r8,3
    e1ac:	8822d0fa 	srli	r17,r17,3
    e1b0:	4010977a 	slli	r8,r8,29
    e1b4:	10c0022c 	andhi	r3,r2,8
    e1b8:	4462b03a 	or	r17,r8,r17
    e1bc:	18000826 	beq	r3,zero,e1e0 <__adddf3+0x760>
    e1c0:	4808d0fa 	srli	r4,r9,3
    e1c4:	20c0022c 	andhi	r3,r4,8
    e1c8:	1800051e 	bne	r3,zero,e1e0 <__adddf3+0x760>
    e1cc:	300cd0fa 	srli	r6,r6,3
    e1d0:	4806977a 	slli	r3,r9,29
    e1d4:	2005883a 	mov	r2,r4
    e1d8:	3825883a 	mov	r18,r7
    e1dc:	19a2b03a 	or	r17,r3,r6
    e1e0:	8810d77a 	srli	r8,r17,29
    e1e4:	100490fa 	slli	r2,r2,3
    e1e8:	882290fa 	slli	r17,r17,3
    e1ec:	0401ffc4 	movi	r16,2047
    e1f0:	4090b03a 	or	r8,r8,r2
    e1f4:	003e4106 	br	dafc <__alt_data_end+0xfc00dafc>
    e1f8:	0141ffc4 	movi	r5,2047
    e1fc:	117fc71e 	bne	r2,r5,e11c <__alt_data_end+0xfc00e11c>
    e200:	4811883a 	mov	r8,r9
    e204:	3023883a 	mov	r17,r6
    e208:	1021883a 	mov	r16,r2
    e20c:	003e3b06 	br	dafc <__alt_data_end+0xfc00dafc>
    e210:	10002f26 	beq	r2,zero,e2d0 <__adddf3+0x850>
    e214:	4984b03a 	or	r2,r9,r6
    e218:	10001126 	beq	r2,zero,e260 <__adddf3+0x7e0>
    e21c:	4004d0fa 	srli	r2,r8,3
    e220:	8822d0fa 	srli	r17,r17,3
    e224:	4010977a 	slli	r8,r8,29
    e228:	10c0022c 	andhi	r3,r2,8
    e22c:	4462b03a 	or	r17,r8,r17
    e230:	183feb26 	beq	r3,zero,e1e0 <__alt_data_end+0xfc00e1e0>
    e234:	4808d0fa 	srli	r4,r9,3
    e238:	20c0022c 	andhi	r3,r4,8
    e23c:	183fe81e 	bne	r3,zero,e1e0 <__alt_data_end+0xfc00e1e0>
    e240:	300cd0fa 	srli	r6,r6,3
    e244:	4806977a 	slli	r3,r9,29
    e248:	2005883a 	mov	r2,r4
    e24c:	19a2b03a 	or	r17,r3,r6
    e250:	003fe306 	br	e1e0 <__alt_data_end+0xfc00e1e0>
    e254:	0011883a 	mov	r8,zero
    e258:	0005883a 	mov	r2,zero
    e25c:	003e3f06 	br	db5c <__alt_data_end+0xfc00db5c>
    e260:	0401ffc4 	movi	r16,2047
    e264:	003e2506 	br	dafc <__alt_data_end+0xfc00dafc>
    e268:	0013883a 	mov	r9,zero
    e26c:	003f8406 	br	e080 <__alt_data_end+0xfc00e080>
    e270:	0005883a 	mov	r2,zero
    e274:	0007883a 	mov	r3,zero
    e278:	003e8906 	br	dca0 <__alt_data_end+0xfc00dca0>
    e27c:	197ff804 	addi	r5,r3,-32
    e280:	01000804 	movi	r4,32
    e284:	414ad83a 	srl	r5,r8,r5
    e288:	19002426 	beq	r3,r4,e31c <__adddf3+0x89c>
    e28c:	01001004 	movi	r4,64
    e290:	20c7c83a 	sub	r3,r4,r3
    e294:	40c6983a 	sll	r3,r8,r3
    e298:	1c46b03a 	or	r3,r3,r17
    e29c:	1806c03a 	cmpne	r3,r3,zero
    e2a0:	28e2b03a 	or	r17,r5,r3
    e2a4:	0007883a 	mov	r3,zero
    e2a8:	003f2306 	br	df38 <__alt_data_end+0xfc00df38>
    e2ac:	0007883a 	mov	r3,zero
    e2b0:	5811883a 	mov	r8,r11
    e2b4:	00bfffc4 	movi	r2,-1
    e2b8:	0401ffc4 	movi	r16,2047
    e2bc:	003e7806 	br	dca0 <__alt_data_end+0xfc00dca0>
    e2c0:	4462b03a 	or	r17,r8,r17
    e2c4:	8822c03a 	cmpne	r17,r17,zero
    e2c8:	0009883a 	mov	r4,zero
    e2cc:	003fa006 	br	e150 <__alt_data_end+0xfc00e150>
    e2d0:	4811883a 	mov	r8,r9
    e2d4:	3023883a 	mov	r17,r6
    e2d8:	0401ffc4 	movi	r16,2047
    e2dc:	003e0706 	br	dafc <__alt_data_end+0xfc00dafc>
    e2e0:	4811883a 	mov	r8,r9
    e2e4:	3023883a 	mov	r17,r6
    e2e8:	003e0406 	br	dafc <__alt_data_end+0xfc00dafc>
    e2ec:	21fff804 	addi	r7,r4,-32
    e2f0:	01400804 	movi	r5,32
    e2f4:	41ced83a 	srl	r7,r8,r7
    e2f8:	21400a26 	beq	r4,r5,e324 <__adddf3+0x8a4>
    e2fc:	01401004 	movi	r5,64
    e300:	2909c83a 	sub	r4,r5,r4
    e304:	4108983a 	sll	r4,r8,r4
    e308:	2448b03a 	or	r4,r4,r17
    e30c:	2008c03a 	cmpne	r4,r4,zero
    e310:	3922b03a 	or	r17,r7,r4
    e314:	0009883a 	mov	r4,zero
    e318:	003f8d06 	br	e150 <__alt_data_end+0xfc00e150>
    e31c:	0007883a 	mov	r3,zero
    e320:	003fdd06 	br	e298 <__alt_data_end+0xfc00e298>
    e324:	0009883a 	mov	r4,zero
    e328:	003ff706 	br	e308 <__alt_data_end+0xfc00e308>

0000e32c <__divdf3>:
    e32c:	defff004 	addi	sp,sp,-64
    e330:	dc800815 	stw	r18,32(sp)
    e334:	2824d53a 	srli	r18,r5,20
    e338:	dd800c15 	stw	r22,48(sp)
    e33c:	282cd7fa 	srli	r22,r5,31
    e340:	dc000615 	stw	r16,24(sp)
    e344:	04000434 	movhi	r16,16
    e348:	843fffc4 	addi	r16,r16,-1
    e34c:	dfc00f15 	stw	ra,60(sp)
    e350:	df000e15 	stw	fp,56(sp)
    e354:	ddc00d15 	stw	r23,52(sp)
    e358:	dd400b15 	stw	r21,44(sp)
    e35c:	dd000a15 	stw	r20,40(sp)
    e360:	dcc00915 	stw	r19,36(sp)
    e364:	dc400715 	stw	r17,28(sp)
    e368:	9481ffcc 	andi	r18,r18,2047
    e36c:	2c20703a 	and	r16,r5,r16
    e370:	b2003fcc 	andi	r8,r22,255
    e374:	90006126 	beq	r18,zero,e4fc <__divdf3+0x1d0>
    e378:	0081ffc4 	movi	r2,2047
    e37c:	202b883a 	mov	r21,r4
    e380:	90803726 	beq	r18,r2,e460 <__divdf3+0x134>
    e384:	80800434 	orhi	r2,r16,16
    e388:	100490fa 	slli	r2,r2,3
    e38c:	2020d77a 	srli	r16,r4,29
    e390:	202a90fa 	slli	r21,r4,3
    e394:	94bf0044 	addi	r18,r18,-1023
    e398:	80a0b03a 	or	r16,r16,r2
    e39c:	0013883a 	mov	r9,zero
    e3a0:	000b883a 	mov	r5,zero
    e3a4:	3806d53a 	srli	r3,r7,20
    e3a8:	382ed7fa 	srli	r23,r7,31
    e3ac:	04400434 	movhi	r17,16
    e3b0:	8c7fffc4 	addi	r17,r17,-1
    e3b4:	18c1ffcc 	andi	r3,r3,2047
    e3b8:	3029883a 	mov	r20,r6
    e3bc:	3c62703a 	and	r17,r7,r17
    e3c0:	bf003fcc 	andi	fp,r23,255
    e3c4:	18006e26 	beq	r3,zero,e580 <__divdf3+0x254>
    e3c8:	0081ffc4 	movi	r2,2047
    e3cc:	18806626 	beq	r3,r2,e568 <__divdf3+0x23c>
    e3d0:	88800434 	orhi	r2,r17,16
    e3d4:	100490fa 	slli	r2,r2,3
    e3d8:	3022d77a 	srli	r17,r6,29
    e3dc:	302890fa 	slli	r20,r6,3
    e3e0:	18ff0044 	addi	r3,r3,-1023
    e3e4:	88a2b03a 	or	r17,r17,r2
    e3e8:	000f883a 	mov	r7,zero
    e3ec:	b5e6f03a 	xor	r19,r22,r23
    e3f0:	3a4cb03a 	or	r6,r7,r9
    e3f4:	008003c4 	movi	r2,15
    e3f8:	9809883a 	mov	r4,r19
    e3fc:	90c7c83a 	sub	r3,r18,r3
    e400:	9cc03fcc 	andi	r19,r19,255
    e404:	11809636 	bltu	r2,r6,e660 <__divdf3+0x334>
    e408:	300c90ba 	slli	r6,r6,2
    e40c:	00800074 	movhi	r2,1
    e410:	10b90804 	addi	r2,r2,-7136
    e414:	308d883a 	add	r6,r6,r2
    e418:	30800017 	ldw	r2,0(r6)
    e41c:	1000683a 	jmp	r2
    e420:	0000e660 	cmpeqi	zero,zero,921
    e424:	0000e498 	cmpnei	zero,zero,914
    e428:	0000e650 	cmplti	zero,zero,921
    e42c:	0000e48c 	andi	zero,zero,914
    e430:	0000e650 	cmplti	zero,zero,921
    e434:	0000e624 	muli	zero,zero,920
    e438:	0000e650 	cmplti	zero,zero,921
    e43c:	0000e48c 	andi	zero,zero,914
    e440:	0000e498 	cmpnei	zero,zero,914
    e444:	0000e498 	cmpnei	zero,zero,914
    e448:	0000e624 	muli	zero,zero,920
    e44c:	0000e48c 	andi	zero,zero,914
    e450:	0000e47c 	xorhi	zero,zero,913
    e454:	0000e47c 	xorhi	zero,zero,913
    e458:	0000e47c 	xorhi	zero,zero,913
    e45c:	0000e9e8 	cmpgeui	zero,zero,935
    e460:	2404b03a 	or	r2,r4,r16
    e464:	10006c1e 	bne	r2,zero,e618 <__divdf3+0x2ec>
    e468:	02400204 	movi	r9,8
    e46c:	0021883a 	mov	r16,zero
    e470:	002b883a 	mov	r21,zero
    e474:	01400084 	movi	r5,2
    e478:	003fca06 	br	e3a4 <__alt_data_end+0xfc00e3a4>
    e47c:	8023883a 	mov	r17,r16
    e480:	a829883a 	mov	r20,r21
    e484:	4039883a 	mov	fp,r8
    e488:	280f883a 	mov	r7,r5
    e48c:	00800084 	movi	r2,2
    e490:	3881601e 	bne	r7,r2,ea14 <__divdf3+0x6e8>
    e494:	e027883a 	mov	r19,fp
    e498:	9900004c 	andi	r4,r19,1
    e49c:	0081ffc4 	movi	r2,2047
    e4a0:	0021883a 	mov	r16,zero
    e4a4:	002b883a 	mov	r21,zero
    e4a8:	1004953a 	slli	r2,r2,20
    e4ac:	20c03fcc 	andi	r3,r4,255
    e4b0:	01400434 	movhi	r5,16
    e4b4:	297fffc4 	addi	r5,r5,-1
    e4b8:	180697fa 	slli	r3,r3,31
    e4bc:	8160703a 	and	r16,r16,r5
    e4c0:	80a0b03a 	or	r16,r16,r2
    e4c4:	80c6b03a 	or	r3,r16,r3
    e4c8:	a805883a 	mov	r2,r21
    e4cc:	dfc00f17 	ldw	ra,60(sp)
    e4d0:	df000e17 	ldw	fp,56(sp)
    e4d4:	ddc00d17 	ldw	r23,52(sp)
    e4d8:	dd800c17 	ldw	r22,48(sp)
    e4dc:	dd400b17 	ldw	r21,44(sp)
    e4e0:	dd000a17 	ldw	r20,40(sp)
    e4e4:	dcc00917 	ldw	r19,36(sp)
    e4e8:	dc800817 	ldw	r18,32(sp)
    e4ec:	dc400717 	ldw	r17,28(sp)
    e4f0:	dc000617 	ldw	r16,24(sp)
    e4f4:	dec01004 	addi	sp,sp,64
    e4f8:	f800283a 	ret
    e4fc:	2404b03a 	or	r2,r4,r16
    e500:	2023883a 	mov	r17,r4
    e504:	10003f26 	beq	r2,zero,e604 <__divdf3+0x2d8>
    e508:	80015e26 	beq	r16,zero,ea84 <__divdf3+0x758>
    e50c:	8009883a 	mov	r4,r16
    e510:	d9800215 	stw	r6,8(sp)
    e514:	d9c00515 	stw	r7,20(sp)
    e518:	da000415 	stw	r8,16(sp)
    e51c:	00102c00 	call	102c0 <__clzsi2>
    e520:	d9800217 	ldw	r6,8(sp)
    e524:	d9c00517 	ldw	r7,20(sp)
    e528:	da000417 	ldw	r8,16(sp)
    e52c:	113ffd44 	addi	r4,r2,-11
    e530:	00c00704 	movi	r3,28
    e534:	19014f16 	blt	r3,r4,ea74 <__divdf3+0x748>
    e538:	00c00744 	movi	r3,29
    e53c:	157ffe04 	addi	r21,r2,-8
    e540:	1907c83a 	sub	r3,r3,r4
    e544:	8560983a 	sll	r16,r16,r21
    e548:	88c6d83a 	srl	r3,r17,r3
    e54c:	8d6a983a 	sll	r21,r17,r21
    e550:	1c20b03a 	or	r16,r3,r16
    e554:	1080fcc4 	addi	r2,r2,1011
    e558:	00a5c83a 	sub	r18,zero,r2
    e55c:	0013883a 	mov	r9,zero
    e560:	000b883a 	mov	r5,zero
    e564:	003f8f06 	br	e3a4 <__alt_data_end+0xfc00e3a4>
    e568:	3444b03a 	or	r2,r6,r17
    e56c:	1000231e 	bne	r2,zero,e5fc <__divdf3+0x2d0>
    e570:	0023883a 	mov	r17,zero
    e574:	0029883a 	mov	r20,zero
    e578:	01c00084 	movi	r7,2
    e57c:	003f9b06 	br	e3ec <__alt_data_end+0xfc00e3ec>
    e580:	3444b03a 	or	r2,r6,r17
    e584:	10001926 	beq	r2,zero,e5ec <__divdf3+0x2c0>
    e588:	88014b26 	beq	r17,zero,eab8 <__divdf3+0x78c>
    e58c:	8809883a 	mov	r4,r17
    e590:	d9400115 	stw	r5,4(sp)
    e594:	d9800215 	stw	r6,8(sp)
    e598:	da000415 	stw	r8,16(sp)
    e59c:	da400315 	stw	r9,12(sp)
    e5a0:	00102c00 	call	102c0 <__clzsi2>
    e5a4:	d9400117 	ldw	r5,4(sp)
    e5a8:	d9800217 	ldw	r6,8(sp)
    e5ac:	da000417 	ldw	r8,16(sp)
    e5b0:	da400317 	ldw	r9,12(sp)
    e5b4:	113ffd44 	addi	r4,r2,-11
    e5b8:	00c00704 	movi	r3,28
    e5bc:	19013a16 	blt	r3,r4,eaa8 <__divdf3+0x77c>
    e5c0:	00c00744 	movi	r3,29
    e5c4:	153ffe04 	addi	r20,r2,-8
    e5c8:	1907c83a 	sub	r3,r3,r4
    e5cc:	8d22983a 	sll	r17,r17,r20
    e5d0:	30c6d83a 	srl	r3,r6,r3
    e5d4:	3528983a 	sll	r20,r6,r20
    e5d8:	1c62b03a 	or	r17,r3,r17
    e5dc:	1080fcc4 	addi	r2,r2,1011
    e5e0:	0087c83a 	sub	r3,zero,r2
    e5e4:	000f883a 	mov	r7,zero
    e5e8:	003f8006 	br	e3ec <__alt_data_end+0xfc00e3ec>
    e5ec:	0023883a 	mov	r17,zero
    e5f0:	0029883a 	mov	r20,zero
    e5f4:	01c00044 	movi	r7,1
    e5f8:	003f7c06 	br	e3ec <__alt_data_end+0xfc00e3ec>
    e5fc:	01c000c4 	movi	r7,3
    e600:	003f7a06 	br	e3ec <__alt_data_end+0xfc00e3ec>
    e604:	02400104 	movi	r9,4
    e608:	0021883a 	mov	r16,zero
    e60c:	002b883a 	mov	r21,zero
    e610:	01400044 	movi	r5,1
    e614:	003f6306 	br	e3a4 <__alt_data_end+0xfc00e3a4>
    e618:	02400304 	movi	r9,12
    e61c:	014000c4 	movi	r5,3
    e620:	003f6006 	br	e3a4 <__alt_data_end+0xfc00e3a4>
    e624:	04000434 	movhi	r16,16
    e628:	0009883a 	mov	r4,zero
    e62c:	843fffc4 	addi	r16,r16,-1
    e630:	057fffc4 	movi	r21,-1
    e634:	0081ffc4 	movi	r2,2047
    e638:	003f9b06 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    e63c:	00c00044 	movi	r3,1
    e640:	1887c83a 	sub	r3,r3,r2
    e644:	01000e04 	movi	r4,56
    e648:	20c1530e 	bge	r4,r3,eb98 <__divdf3+0x86c>
    e64c:	9900004c 	andi	r4,r19,1
    e650:	0005883a 	mov	r2,zero
    e654:	0021883a 	mov	r16,zero
    e658:	002b883a 	mov	r21,zero
    e65c:	003f9206 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    e660:	8c012e36 	bltu	r17,r16,eb1c <__divdf3+0x7f0>
    e664:	84412c26 	beq	r16,r17,eb18 <__divdf3+0x7ec>
    e668:	a82f883a 	mov	r23,r21
    e66c:	18ffffc4 	addi	r3,r3,-1
    e670:	002b883a 	mov	r21,zero
    e674:	a004d63a 	srli	r2,r20,24
    e678:	8822923a 	slli	r17,r17,8
    e67c:	a028923a 	slli	r20,r20,8
    e680:	8009883a 	mov	r4,r16
    e684:	88acb03a 	or	r22,r17,r2
    e688:	dd000015 	stw	r20,0(sp)
    e68c:	b028d43a 	srli	r20,r22,16
    e690:	d8c00215 	stw	r3,8(sp)
    e694:	b4bfffcc 	andi	r18,r22,65535
    e698:	a00b883a 	mov	r5,r20
    e69c:	00033540 	call	3354 <__udivsi3>
    e6a0:	100b883a 	mov	r5,r2
    e6a4:	9009883a 	mov	r4,r18
    e6a8:	1023883a 	mov	r17,r2
    e6ac:	00034100 	call	3410 <__mulsi3>
    e6b0:	8009883a 	mov	r4,r16
    e6b4:	a00b883a 	mov	r5,r20
    e6b8:	1039883a 	mov	fp,r2
    e6bc:	00033b80 	call	33b8 <__umodsi3>
    e6c0:	1004943a 	slli	r2,r2,16
    e6c4:	b808d43a 	srli	r4,r23,16
    e6c8:	d8c00217 	ldw	r3,8(sp)
    e6cc:	2084b03a 	or	r2,r4,r2
    e6d0:	1700062e 	bgeu	r2,fp,e6ec <__divdf3+0x3c0>
    e6d4:	1585883a 	add	r2,r2,r22
    e6d8:	893fffc4 	addi	r4,r17,-1
    e6dc:	15811d36 	bltu	r2,r22,eb54 <__divdf3+0x828>
    e6e0:	17011c2e 	bgeu	r2,fp,eb54 <__divdf3+0x828>
    e6e4:	8c7fff84 	addi	r17,r17,-2
    e6e8:	1585883a 	add	r2,r2,r22
    e6ec:	1739c83a 	sub	fp,r2,fp
    e6f0:	a00b883a 	mov	r5,r20
    e6f4:	e009883a 	mov	r4,fp
    e6f8:	d8c00215 	stw	r3,8(sp)
    e6fc:	00033540 	call	3354 <__udivsi3>
    e700:	100b883a 	mov	r5,r2
    e704:	9009883a 	mov	r4,r18
    e708:	1021883a 	mov	r16,r2
    e70c:	00034100 	call	3410 <__mulsi3>
    e710:	a00b883a 	mov	r5,r20
    e714:	e009883a 	mov	r4,fp
    e718:	d8800415 	stw	r2,16(sp)
    e71c:	00033b80 	call	33b8 <__umodsi3>
    e720:	1004943a 	slli	r2,r2,16
    e724:	da000417 	ldw	r8,16(sp)
    e728:	bdffffcc 	andi	r23,r23,65535
    e72c:	b884b03a 	or	r2,r23,r2
    e730:	d8c00217 	ldw	r3,8(sp)
    e734:	1200062e 	bgeu	r2,r8,e750 <__divdf3+0x424>
    e738:	1585883a 	add	r2,r2,r22
    e73c:	813fffc4 	addi	r4,r16,-1
    e740:	15810236 	bltu	r2,r22,eb4c <__divdf3+0x820>
    e744:	1201012e 	bgeu	r2,r8,eb4c <__divdf3+0x820>
    e748:	843fff84 	addi	r16,r16,-2
    e74c:	1585883a 	add	r2,r2,r22
    e750:	8822943a 	slli	r17,r17,16
    e754:	d9800017 	ldw	r6,0(sp)
    e758:	1211c83a 	sub	r8,r2,r8
    e75c:	8c22b03a 	or	r17,r17,r16
    e760:	373fffcc 	andi	fp,r6,65535
    e764:	8abfffcc 	andi	r10,r17,65535
    e768:	8820d43a 	srli	r16,r17,16
    e76c:	5009883a 	mov	r4,r10
    e770:	e00b883a 	mov	r5,fp
    e774:	302ed43a 	srli	r23,r6,16
    e778:	d8c00215 	stw	r3,8(sp)
    e77c:	da000415 	stw	r8,16(sp)
    e780:	da800115 	stw	r10,4(sp)
    e784:	00034100 	call	3410 <__mulsi3>
    e788:	800b883a 	mov	r5,r16
    e78c:	e009883a 	mov	r4,fp
    e790:	d8800515 	stw	r2,20(sp)
    e794:	00034100 	call	3410 <__mulsi3>
    e798:	8009883a 	mov	r4,r16
    e79c:	b80b883a 	mov	r5,r23
    e7a0:	d8800315 	stw	r2,12(sp)
    e7a4:	00034100 	call	3410 <__mulsi3>
    e7a8:	da800117 	ldw	r10,4(sp)
    e7ac:	b80b883a 	mov	r5,r23
    e7b0:	1021883a 	mov	r16,r2
    e7b4:	5009883a 	mov	r4,r10
    e7b8:	00034100 	call	3410 <__mulsi3>
    e7bc:	d9c00517 	ldw	r7,20(sp)
    e7c0:	da400317 	ldw	r9,12(sp)
    e7c4:	d8c00217 	ldw	r3,8(sp)
    e7c8:	3808d43a 	srli	r4,r7,16
    e7cc:	1245883a 	add	r2,r2,r9
    e7d0:	da000417 	ldw	r8,16(sp)
    e7d4:	2085883a 	add	r2,r4,r2
    e7d8:	1240022e 	bgeu	r2,r9,e7e4 <__divdf3+0x4b8>
    e7dc:	01000074 	movhi	r4,1
    e7e0:	8121883a 	add	r16,r16,r4
    e7e4:	1008d43a 	srli	r4,r2,16
    e7e8:	1004943a 	slli	r2,r2,16
    e7ec:	39ffffcc 	andi	r7,r7,65535
    e7f0:	2409883a 	add	r4,r4,r16
    e7f4:	11c5883a 	add	r2,r2,r7
    e7f8:	4100bb36 	bltu	r8,r4,eae8 <__divdf3+0x7bc>
    e7fc:	4100d726 	beq	r8,r4,eb5c <__divdf3+0x830>
    e800:	4109c83a 	sub	r4,r8,r4
    e804:	a8a1c83a 	sub	r16,r21,r2
    e808:	ac2b803a 	cmpltu	r21,r21,r16
    e80c:	256bc83a 	sub	r21,r4,r21
    e810:	b540d926 	beq	r22,r21,eb78 <__divdf3+0x84c>
    e814:	a00b883a 	mov	r5,r20
    e818:	a809883a 	mov	r4,r21
    e81c:	d8c00215 	stw	r3,8(sp)
    e820:	00033540 	call	3354 <__udivsi3>
    e824:	100b883a 	mov	r5,r2
    e828:	9009883a 	mov	r4,r18
    e82c:	d8800515 	stw	r2,20(sp)
    e830:	00034100 	call	3410 <__mulsi3>
    e834:	a809883a 	mov	r4,r21
    e838:	a00b883a 	mov	r5,r20
    e83c:	d8800415 	stw	r2,16(sp)
    e840:	00033b80 	call	33b8 <__umodsi3>
    e844:	1004943a 	slli	r2,r2,16
    e848:	8008d43a 	srli	r4,r16,16
    e84c:	da000417 	ldw	r8,16(sp)
    e850:	d8c00217 	ldw	r3,8(sp)
    e854:	2084b03a 	or	r2,r4,r2
    e858:	d9c00517 	ldw	r7,20(sp)
    e85c:	1200062e 	bgeu	r2,r8,e878 <__divdf3+0x54c>
    e860:	1585883a 	add	r2,r2,r22
    e864:	393fffc4 	addi	r4,r7,-1
    e868:	1580c536 	bltu	r2,r22,eb80 <__divdf3+0x854>
    e86c:	1200c42e 	bgeu	r2,r8,eb80 <__divdf3+0x854>
    e870:	39ffff84 	addi	r7,r7,-2
    e874:	1585883a 	add	r2,r2,r22
    e878:	122bc83a 	sub	r21,r2,r8
    e87c:	a00b883a 	mov	r5,r20
    e880:	a809883a 	mov	r4,r21
    e884:	d8c00215 	stw	r3,8(sp)
    e888:	d9c00515 	stw	r7,20(sp)
    e88c:	00033540 	call	3354 <__udivsi3>
    e890:	9009883a 	mov	r4,r18
    e894:	100b883a 	mov	r5,r2
    e898:	d8800415 	stw	r2,16(sp)
    e89c:	00034100 	call	3410 <__mulsi3>
    e8a0:	a809883a 	mov	r4,r21
    e8a4:	a00b883a 	mov	r5,r20
    e8a8:	1025883a 	mov	r18,r2
    e8ac:	00033b80 	call	33b8 <__umodsi3>
    e8b0:	1004943a 	slli	r2,r2,16
    e8b4:	813fffcc 	andi	r4,r16,65535
    e8b8:	d8c00217 	ldw	r3,8(sp)
    e8bc:	20a0b03a 	or	r16,r4,r2
    e8c0:	d9c00517 	ldw	r7,20(sp)
    e8c4:	da000417 	ldw	r8,16(sp)
    e8c8:	8480062e 	bgeu	r16,r18,e8e4 <__divdf3+0x5b8>
    e8cc:	85a1883a 	add	r16,r16,r22
    e8d0:	40bfffc4 	addi	r2,r8,-1
    e8d4:	8580ac36 	bltu	r16,r22,eb88 <__divdf3+0x85c>
    e8d8:	8480ab2e 	bgeu	r16,r18,eb88 <__divdf3+0x85c>
    e8dc:	423fff84 	addi	r8,r8,-2
    e8e0:	85a1883a 	add	r16,r16,r22
    e8e4:	3804943a 	slli	r2,r7,16
    e8e8:	84a1c83a 	sub	r16,r16,r18
    e8ec:	e009883a 	mov	r4,fp
    e8f0:	1228b03a 	or	r20,r2,r8
    e8f4:	a1ffffcc 	andi	r7,r20,65535
    e8f8:	a024d43a 	srli	r18,r20,16
    e8fc:	380b883a 	mov	r5,r7
    e900:	d8c00215 	stw	r3,8(sp)
    e904:	d9c00515 	stw	r7,20(sp)
    e908:	00034100 	call	3410 <__mulsi3>
    e90c:	900b883a 	mov	r5,r18
    e910:	e009883a 	mov	r4,fp
    e914:	102b883a 	mov	r21,r2
    e918:	00034100 	call	3410 <__mulsi3>
    e91c:	900b883a 	mov	r5,r18
    e920:	b809883a 	mov	r4,r23
    e924:	1039883a 	mov	fp,r2
    e928:	00034100 	call	3410 <__mulsi3>
    e92c:	d9c00517 	ldw	r7,20(sp)
    e930:	b80b883a 	mov	r5,r23
    e934:	1025883a 	mov	r18,r2
    e938:	3809883a 	mov	r4,r7
    e93c:	00034100 	call	3410 <__mulsi3>
    e940:	a808d43a 	srli	r4,r21,16
    e944:	1705883a 	add	r2,r2,fp
    e948:	d8c00217 	ldw	r3,8(sp)
    e94c:	2085883a 	add	r2,r4,r2
    e950:	1700022e 	bgeu	r2,fp,e95c <__divdf3+0x630>
    e954:	01000074 	movhi	r4,1
    e958:	9125883a 	add	r18,r18,r4
    e95c:	1008d43a 	srli	r4,r2,16
    e960:	1004943a 	slli	r2,r2,16
    e964:	ad7fffcc 	andi	r21,r21,65535
    e968:	2489883a 	add	r4,r4,r18
    e96c:	1545883a 	add	r2,r2,r21
    e970:	81003836 	bltu	r16,r4,ea54 <__divdf3+0x728>
    e974:	81003626 	beq	r16,r4,ea50 <__divdf3+0x724>
    e978:	a5000054 	ori	r20,r20,1
    e97c:	1880ffc4 	addi	r2,r3,1023
    e980:	00bf2e0e 	bge	zero,r2,e63c <__alt_data_end+0xfc00e63c>
    e984:	a10001cc 	andi	r4,r20,7
    e988:	20000726 	beq	r4,zero,e9a8 <__divdf3+0x67c>
    e98c:	a10003cc 	andi	r4,r20,15
    e990:	01400104 	movi	r5,4
    e994:	21400426 	beq	r4,r5,e9a8 <__divdf3+0x67c>
    e998:	a149883a 	add	r4,r20,r5
    e99c:	2529803a 	cmpltu	r20,r4,r20
    e9a0:	8d23883a 	add	r17,r17,r20
    e9a4:	2029883a 	mov	r20,r4
    e9a8:	8900402c 	andhi	r4,r17,256
    e9ac:	20000426 	beq	r4,zero,e9c0 <__divdf3+0x694>
    e9b0:	18810004 	addi	r2,r3,1024
    e9b4:	00ffc034 	movhi	r3,65280
    e9b8:	18ffffc4 	addi	r3,r3,-1
    e9bc:	88e2703a 	and	r17,r17,r3
    e9c0:	00c1ff84 	movi	r3,2046
    e9c4:	18beb416 	blt	r3,r2,e498 <__alt_data_end+0xfc00e498>
    e9c8:	a028d0fa 	srli	r20,r20,3
    e9cc:	882a977a 	slli	r21,r17,29
    e9d0:	8820927a 	slli	r16,r17,9
    e9d4:	1081ffcc 	andi	r2,r2,2047
    e9d8:	ad2ab03a 	or	r21,r21,r20
    e9dc:	8020d33a 	srli	r16,r16,12
    e9e0:	9900004c 	andi	r4,r19,1
    e9e4:	003eb006 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    e9e8:	8080022c 	andhi	r2,r16,8
    e9ec:	10001226 	beq	r2,zero,ea38 <__divdf3+0x70c>
    e9f0:	8880022c 	andhi	r2,r17,8
    e9f4:	1000101e 	bne	r2,zero,ea38 <__divdf3+0x70c>
    e9f8:	00800434 	movhi	r2,16
    e9fc:	8c000234 	orhi	r16,r17,8
    ea00:	10bfffc4 	addi	r2,r2,-1
    ea04:	b809883a 	mov	r4,r23
    ea08:	80a0703a 	and	r16,r16,r2
    ea0c:	a02b883a 	mov	r21,r20
    ea10:	003f0806 	br	e634 <__alt_data_end+0xfc00e634>
    ea14:	008000c4 	movi	r2,3
    ea18:	3880b126 	beq	r7,r2,ece0 <__divdf3+0x9b4>
    ea1c:	00800044 	movi	r2,1
    ea20:	38805b1e 	bne	r7,r2,eb90 <__divdf3+0x864>
    ea24:	e009883a 	mov	r4,fp
    ea28:	0005883a 	mov	r2,zero
    ea2c:	0021883a 	mov	r16,zero
    ea30:	002b883a 	mov	r21,zero
    ea34:	003e9c06 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    ea38:	00800434 	movhi	r2,16
    ea3c:	84000234 	orhi	r16,r16,8
    ea40:	10bfffc4 	addi	r2,r2,-1
    ea44:	b009883a 	mov	r4,r22
    ea48:	80a0703a 	and	r16,r16,r2
    ea4c:	003ef906 	br	e634 <__alt_data_end+0xfc00e634>
    ea50:	103fca26 	beq	r2,zero,e97c <__alt_data_end+0xfc00e97c>
    ea54:	b421883a 	add	r16,r22,r16
    ea58:	a17fffc4 	addi	r5,r20,-1
    ea5c:	8580422e 	bgeu	r16,r22,eb68 <__divdf3+0x83c>
    ea60:	2829883a 	mov	r20,r5
    ea64:	813fc41e 	bne	r16,r4,e978 <__alt_data_end+0xfc00e978>
    ea68:	d9800017 	ldw	r6,0(sp)
    ea6c:	30bfc21e 	bne	r6,r2,e978 <__alt_data_end+0xfc00e978>
    ea70:	003fc206 	br	e97c <__alt_data_end+0xfc00e97c>
    ea74:	143ff604 	addi	r16,r2,-40
    ea78:	8c20983a 	sll	r16,r17,r16
    ea7c:	002b883a 	mov	r21,zero
    ea80:	003eb406 	br	e554 <__alt_data_end+0xfc00e554>
    ea84:	d9800215 	stw	r6,8(sp)
    ea88:	d9c00515 	stw	r7,20(sp)
    ea8c:	da000415 	stw	r8,16(sp)
    ea90:	00102c00 	call	102c0 <__clzsi2>
    ea94:	10800804 	addi	r2,r2,32
    ea98:	da000417 	ldw	r8,16(sp)
    ea9c:	d9c00517 	ldw	r7,20(sp)
    eaa0:	d9800217 	ldw	r6,8(sp)
    eaa4:	003ea106 	br	e52c <__alt_data_end+0xfc00e52c>
    eaa8:	147ff604 	addi	r17,r2,-40
    eaac:	3462983a 	sll	r17,r6,r17
    eab0:	0029883a 	mov	r20,zero
    eab4:	003ec906 	br	e5dc <__alt_data_end+0xfc00e5dc>
    eab8:	3009883a 	mov	r4,r6
    eabc:	d9400115 	stw	r5,4(sp)
    eac0:	d9800215 	stw	r6,8(sp)
    eac4:	da000415 	stw	r8,16(sp)
    eac8:	da400315 	stw	r9,12(sp)
    eacc:	00102c00 	call	102c0 <__clzsi2>
    ead0:	10800804 	addi	r2,r2,32
    ead4:	da400317 	ldw	r9,12(sp)
    ead8:	da000417 	ldw	r8,16(sp)
    eadc:	d9800217 	ldw	r6,8(sp)
    eae0:	d9400117 	ldw	r5,4(sp)
    eae4:	003eb306 	br	e5b4 <__alt_data_end+0xfc00e5b4>
    eae8:	d9800017 	ldw	r6,0(sp)
    eaec:	a9ab883a 	add	r21,r21,r6
    eaf0:	a98b803a 	cmpltu	r5,r21,r6
    eaf4:	2d8b883a 	add	r5,r5,r22
    eaf8:	2a11883a 	add	r8,r5,r8
    eafc:	897fffc4 	addi	r5,r17,-1
    eb00:	b2000c2e 	bgeu	r22,r8,eb34 <__divdf3+0x808>
    eb04:	41003f36 	bltu	r8,r4,ec04 <__divdf3+0x8d8>
    eb08:	22006c26 	beq	r4,r8,ecbc <__divdf3+0x990>
    eb0c:	4109c83a 	sub	r4,r8,r4
    eb10:	2823883a 	mov	r17,r5
    eb14:	003f3b06 	br	e804 <__alt_data_end+0xfc00e804>
    eb18:	ad3ed336 	bltu	r21,r20,e668 <__alt_data_end+0xfc00e668>
    eb1c:	a804d07a 	srli	r2,r21,1
    eb20:	802e97fa 	slli	r23,r16,31
    eb24:	a82a97fa 	slli	r21,r21,31
    eb28:	8020d07a 	srli	r16,r16,1
    eb2c:	b8aeb03a 	or	r23,r23,r2
    eb30:	003ed006 	br	e674 <__alt_data_end+0xfc00e674>
    eb34:	b23ff51e 	bne	r22,r8,eb0c <__alt_data_end+0xfc00eb0c>
    eb38:	d9800017 	ldw	r6,0(sp)
    eb3c:	a9bff12e 	bgeu	r21,r6,eb04 <__alt_data_end+0xfc00eb04>
    eb40:	b109c83a 	sub	r4,r22,r4
    eb44:	2823883a 	mov	r17,r5
    eb48:	003f2e06 	br	e804 <__alt_data_end+0xfc00e804>
    eb4c:	2021883a 	mov	r16,r4
    eb50:	003eff06 	br	e750 <__alt_data_end+0xfc00e750>
    eb54:	2023883a 	mov	r17,r4
    eb58:	003ee406 	br	e6ec <__alt_data_end+0xfc00e6ec>
    eb5c:	a8bfe236 	bltu	r21,r2,eae8 <__alt_data_end+0xfc00eae8>
    eb60:	0009883a 	mov	r4,zero
    eb64:	003f2706 	br	e804 <__alt_data_end+0xfc00e804>
    eb68:	81002d36 	bltu	r16,r4,ec20 <__divdf3+0x8f4>
    eb6c:	24005626 	beq	r4,r16,ecc8 <__divdf3+0x99c>
    eb70:	2829883a 	mov	r20,r5
    eb74:	003f8006 	br	e978 <__alt_data_end+0xfc00e978>
    eb78:	053fffc4 	movi	r20,-1
    eb7c:	003f7f06 	br	e97c <__alt_data_end+0xfc00e97c>
    eb80:	200f883a 	mov	r7,r4
    eb84:	003f3c06 	br	e878 <__alt_data_end+0xfc00e878>
    eb88:	1011883a 	mov	r8,r2
    eb8c:	003f5506 	br	e8e4 <__alt_data_end+0xfc00e8e4>
    eb90:	e027883a 	mov	r19,fp
    eb94:	003f7906 	br	e97c <__alt_data_end+0xfc00e97c>
    eb98:	010007c4 	movi	r4,31
    eb9c:	20c02816 	blt	r4,r3,ec40 <__divdf3+0x914>
    eba0:	00800804 	movi	r2,32
    eba4:	10c5c83a 	sub	r2,r2,r3
    eba8:	888a983a 	sll	r5,r17,r2
    ebac:	a0c8d83a 	srl	r4,r20,r3
    ebb0:	a084983a 	sll	r2,r20,r2
    ebb4:	88e2d83a 	srl	r17,r17,r3
    ebb8:	2906b03a 	or	r3,r5,r4
    ebbc:	1004c03a 	cmpne	r2,r2,zero
    ebc0:	1886b03a 	or	r3,r3,r2
    ebc4:	188001cc 	andi	r2,r3,7
    ebc8:	10000726 	beq	r2,zero,ebe8 <__divdf3+0x8bc>
    ebcc:	188003cc 	andi	r2,r3,15
    ebd0:	01000104 	movi	r4,4
    ebd4:	11000426 	beq	r2,r4,ebe8 <__divdf3+0x8bc>
    ebd8:	1805883a 	mov	r2,r3
    ebdc:	10c00104 	addi	r3,r2,4
    ebe0:	1885803a 	cmpltu	r2,r3,r2
    ebe4:	88a3883a 	add	r17,r17,r2
    ebe8:	8880202c 	andhi	r2,r17,128
    ebec:	10002926 	beq	r2,zero,ec94 <__divdf3+0x968>
    ebf0:	9900004c 	andi	r4,r19,1
    ebf4:	00800044 	movi	r2,1
    ebf8:	0021883a 	mov	r16,zero
    ebfc:	002b883a 	mov	r21,zero
    ec00:	003e2906 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    ec04:	d9800017 	ldw	r6,0(sp)
    ec08:	8c7fff84 	addi	r17,r17,-2
    ec0c:	a9ab883a 	add	r21,r21,r6
    ec10:	a98b803a 	cmpltu	r5,r21,r6
    ec14:	2d8b883a 	add	r5,r5,r22
    ec18:	2a11883a 	add	r8,r5,r8
    ec1c:	003ef806 	br	e800 <__alt_data_end+0xfc00e800>
    ec20:	d9800017 	ldw	r6,0(sp)
    ec24:	318f883a 	add	r7,r6,r6
    ec28:	398b803a 	cmpltu	r5,r7,r6
    ec2c:	2d8d883a 	add	r6,r5,r22
    ec30:	81a1883a 	add	r16,r16,r6
    ec34:	a17fff84 	addi	r5,r20,-2
    ec38:	d9c00015 	stw	r7,0(sp)
    ec3c:	003f8806 	br	ea60 <__alt_data_end+0xfc00ea60>
    ec40:	013ff844 	movi	r4,-31
    ec44:	2085c83a 	sub	r2,r4,r2
    ec48:	8888d83a 	srl	r4,r17,r2
    ec4c:	00800804 	movi	r2,32
    ec50:	18802126 	beq	r3,r2,ecd8 <__divdf3+0x9ac>
    ec54:	04001004 	movi	r16,64
    ec58:	80c7c83a 	sub	r3,r16,r3
    ec5c:	88e0983a 	sll	r16,r17,r3
    ec60:	8504b03a 	or	r2,r16,r20
    ec64:	1004c03a 	cmpne	r2,r2,zero
    ec68:	2084b03a 	or	r2,r4,r2
    ec6c:	144001cc 	andi	r17,r2,7
    ec70:	88000d1e 	bne	r17,zero,eca8 <__divdf3+0x97c>
    ec74:	0021883a 	mov	r16,zero
    ec78:	102ad0fa 	srli	r21,r2,3
    ec7c:	9900004c 	andi	r4,r19,1
    ec80:	0005883a 	mov	r2,zero
    ec84:	ac6ab03a 	or	r21,r21,r17
    ec88:	003e0706 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    ec8c:	1007883a 	mov	r3,r2
    ec90:	0023883a 	mov	r17,zero
    ec94:	8820927a 	slli	r16,r17,9
    ec98:	1805883a 	mov	r2,r3
    ec9c:	8822977a 	slli	r17,r17,29
    eca0:	8020d33a 	srli	r16,r16,12
    eca4:	003ff406 	br	ec78 <__alt_data_end+0xfc00ec78>
    eca8:	10c003cc 	andi	r3,r2,15
    ecac:	01000104 	movi	r4,4
    ecb0:	193ff626 	beq	r3,r4,ec8c <__alt_data_end+0xfc00ec8c>
    ecb4:	0023883a 	mov	r17,zero
    ecb8:	003fc806 	br	ebdc <__alt_data_end+0xfc00ebdc>
    ecbc:	a8bfd136 	bltu	r21,r2,ec04 <__alt_data_end+0xfc00ec04>
    ecc0:	2823883a 	mov	r17,r5
    ecc4:	003fa606 	br	eb60 <__alt_data_end+0xfc00eb60>
    ecc8:	d9800017 	ldw	r6,0(sp)
    eccc:	30bfd436 	bltu	r6,r2,ec20 <__alt_data_end+0xfc00ec20>
    ecd0:	2829883a 	mov	r20,r5
    ecd4:	003f6406 	br	ea68 <__alt_data_end+0xfc00ea68>
    ecd8:	0021883a 	mov	r16,zero
    ecdc:	003fe006 	br	ec60 <__alt_data_end+0xfc00ec60>
    ece0:	00800434 	movhi	r2,16
    ece4:	8c000234 	orhi	r16,r17,8
    ece8:	10bfffc4 	addi	r2,r2,-1
    ecec:	e009883a 	mov	r4,fp
    ecf0:	80a0703a 	and	r16,r16,r2
    ecf4:	a02b883a 	mov	r21,r20
    ecf8:	003e4e06 	br	e634 <__alt_data_end+0xfc00e634>

0000ecfc <__eqdf2>:
    ecfc:	2804d53a 	srli	r2,r5,20
    ed00:	3806d53a 	srli	r3,r7,20
    ed04:	02000434 	movhi	r8,16
    ed08:	423fffc4 	addi	r8,r8,-1
    ed0c:	1081ffcc 	andi	r2,r2,2047
    ed10:	0281ffc4 	movi	r10,2047
    ed14:	2a12703a 	and	r9,r5,r8
    ed18:	18c1ffcc 	andi	r3,r3,2047
    ed1c:	3a10703a 	and	r8,r7,r8
    ed20:	280ad7fa 	srli	r5,r5,31
    ed24:	380ed7fa 	srli	r7,r7,31
    ed28:	12801026 	beq	r2,r10,ed6c <__eqdf2+0x70>
    ed2c:	0281ffc4 	movi	r10,2047
    ed30:	1a800a26 	beq	r3,r10,ed5c <__eqdf2+0x60>
    ed34:	10c00226 	beq	r2,r3,ed40 <__eqdf2+0x44>
    ed38:	00800044 	movi	r2,1
    ed3c:	f800283a 	ret
    ed40:	4a3ffd1e 	bne	r9,r8,ed38 <__alt_data_end+0xfc00ed38>
    ed44:	21bffc1e 	bne	r4,r6,ed38 <__alt_data_end+0xfc00ed38>
    ed48:	29c00c26 	beq	r5,r7,ed7c <__eqdf2+0x80>
    ed4c:	103ffa1e 	bne	r2,zero,ed38 <__alt_data_end+0xfc00ed38>
    ed50:	2244b03a 	or	r2,r4,r9
    ed54:	1004c03a 	cmpne	r2,r2,zero
    ed58:	f800283a 	ret
    ed5c:	3214b03a 	or	r10,r6,r8
    ed60:	503ff426 	beq	r10,zero,ed34 <__alt_data_end+0xfc00ed34>
    ed64:	00800044 	movi	r2,1
    ed68:	f800283a 	ret
    ed6c:	2254b03a 	or	r10,r4,r9
    ed70:	503fee26 	beq	r10,zero,ed2c <__alt_data_end+0xfc00ed2c>
    ed74:	00800044 	movi	r2,1
    ed78:	f800283a 	ret
    ed7c:	0005883a 	mov	r2,zero
    ed80:	f800283a 	ret

0000ed84 <__gedf2>:
    ed84:	2804d53a 	srli	r2,r5,20
    ed88:	3806d53a 	srli	r3,r7,20
    ed8c:	02000434 	movhi	r8,16
    ed90:	423fffc4 	addi	r8,r8,-1
    ed94:	1081ffcc 	andi	r2,r2,2047
    ed98:	0241ffc4 	movi	r9,2047
    ed9c:	2a14703a 	and	r10,r5,r8
    eda0:	18c1ffcc 	andi	r3,r3,2047
    eda4:	3a10703a 	and	r8,r7,r8
    eda8:	280ad7fa 	srli	r5,r5,31
    edac:	380ed7fa 	srli	r7,r7,31
    edb0:	12401d26 	beq	r2,r9,ee28 <__gedf2+0xa4>
    edb4:	0241ffc4 	movi	r9,2047
    edb8:	1a401226 	beq	r3,r9,ee04 <__gedf2+0x80>
    edbc:	1000081e 	bne	r2,zero,ede0 <__gedf2+0x5c>
    edc0:	2296b03a 	or	r11,r4,r10
    edc4:	5813003a 	cmpeq	r9,r11,zero
    edc8:	1800091e 	bne	r3,zero,edf0 <__gedf2+0x6c>
    edcc:	3218b03a 	or	r12,r6,r8
    edd0:	6000071e 	bne	r12,zero,edf0 <__gedf2+0x6c>
    edd4:	0005883a 	mov	r2,zero
    edd8:	5800101e 	bne	r11,zero,ee1c <__gedf2+0x98>
    eddc:	f800283a 	ret
    ede0:	18000c1e 	bne	r3,zero,ee14 <__gedf2+0x90>
    ede4:	3212b03a 	or	r9,r6,r8
    ede8:	48000c26 	beq	r9,zero,ee1c <__gedf2+0x98>
    edec:	0013883a 	mov	r9,zero
    edf0:	39c03fcc 	andi	r7,r7,255
    edf4:	48000826 	beq	r9,zero,ee18 <__gedf2+0x94>
    edf8:	38000926 	beq	r7,zero,ee20 <__gedf2+0x9c>
    edfc:	00800044 	movi	r2,1
    ee00:	f800283a 	ret
    ee04:	3212b03a 	or	r9,r6,r8
    ee08:	483fec26 	beq	r9,zero,edbc <__alt_data_end+0xfc00edbc>
    ee0c:	00bfff84 	movi	r2,-2
    ee10:	f800283a 	ret
    ee14:	39c03fcc 	andi	r7,r7,255
    ee18:	29c00626 	beq	r5,r7,ee34 <__gedf2+0xb0>
    ee1c:	283ff726 	beq	r5,zero,edfc <__alt_data_end+0xfc00edfc>
    ee20:	00bfffc4 	movi	r2,-1
    ee24:	f800283a 	ret
    ee28:	2292b03a 	or	r9,r4,r10
    ee2c:	483fe126 	beq	r9,zero,edb4 <__alt_data_end+0xfc00edb4>
    ee30:	003ff606 	br	ee0c <__alt_data_end+0xfc00ee0c>
    ee34:	18bff916 	blt	r3,r2,ee1c <__alt_data_end+0xfc00ee1c>
    ee38:	10c00316 	blt	r2,r3,ee48 <__gedf2+0xc4>
    ee3c:	42bff736 	bltu	r8,r10,ee1c <__alt_data_end+0xfc00ee1c>
    ee40:	52000326 	beq	r10,r8,ee50 <__gedf2+0xcc>
    ee44:	5200042e 	bgeu	r10,r8,ee58 <__gedf2+0xd4>
    ee48:	283fec1e 	bne	r5,zero,edfc <__alt_data_end+0xfc00edfc>
    ee4c:	003ff406 	br	ee20 <__alt_data_end+0xfc00ee20>
    ee50:	313ff236 	bltu	r6,r4,ee1c <__alt_data_end+0xfc00ee1c>
    ee54:	21bffc36 	bltu	r4,r6,ee48 <__alt_data_end+0xfc00ee48>
    ee58:	0005883a 	mov	r2,zero
    ee5c:	f800283a 	ret

0000ee60 <__ledf2>:
    ee60:	2804d53a 	srli	r2,r5,20
    ee64:	3810d53a 	srli	r8,r7,20
    ee68:	00c00434 	movhi	r3,16
    ee6c:	18ffffc4 	addi	r3,r3,-1
    ee70:	1081ffcc 	andi	r2,r2,2047
    ee74:	0241ffc4 	movi	r9,2047
    ee78:	28d4703a 	and	r10,r5,r3
    ee7c:	4201ffcc 	andi	r8,r8,2047
    ee80:	38c6703a 	and	r3,r7,r3
    ee84:	280ad7fa 	srli	r5,r5,31
    ee88:	380ed7fa 	srli	r7,r7,31
    ee8c:	12401f26 	beq	r2,r9,ef0c <__ledf2+0xac>
    ee90:	0241ffc4 	movi	r9,2047
    ee94:	42401426 	beq	r8,r9,eee8 <__ledf2+0x88>
    ee98:	1000091e 	bne	r2,zero,eec0 <__ledf2+0x60>
    ee9c:	2296b03a 	or	r11,r4,r10
    eea0:	5813003a 	cmpeq	r9,r11,zero
    eea4:	29403fcc 	andi	r5,r5,255
    eea8:	40000a1e 	bne	r8,zero,eed4 <__ledf2+0x74>
    eeac:	30d8b03a 	or	r12,r6,r3
    eeb0:	6000081e 	bne	r12,zero,eed4 <__ledf2+0x74>
    eeb4:	0005883a 	mov	r2,zero
    eeb8:	5800111e 	bne	r11,zero,ef00 <__ledf2+0xa0>
    eebc:	f800283a 	ret
    eec0:	29403fcc 	andi	r5,r5,255
    eec4:	40000c1e 	bne	r8,zero,eef8 <__ledf2+0x98>
    eec8:	30d2b03a 	or	r9,r6,r3
    eecc:	48000c26 	beq	r9,zero,ef00 <__ledf2+0xa0>
    eed0:	0013883a 	mov	r9,zero
    eed4:	39c03fcc 	andi	r7,r7,255
    eed8:	48000826 	beq	r9,zero,eefc <__ledf2+0x9c>
    eedc:	38001126 	beq	r7,zero,ef24 <__ledf2+0xc4>
    eee0:	00800044 	movi	r2,1
    eee4:	f800283a 	ret
    eee8:	30d2b03a 	or	r9,r6,r3
    eeec:	483fea26 	beq	r9,zero,ee98 <__alt_data_end+0xfc00ee98>
    eef0:	00800084 	movi	r2,2
    eef4:	f800283a 	ret
    eef8:	39c03fcc 	andi	r7,r7,255
    eefc:	39400726 	beq	r7,r5,ef1c <__ledf2+0xbc>
    ef00:	2800081e 	bne	r5,zero,ef24 <__ledf2+0xc4>
    ef04:	00800044 	movi	r2,1
    ef08:	f800283a 	ret
    ef0c:	2292b03a 	or	r9,r4,r10
    ef10:	483fdf26 	beq	r9,zero,ee90 <__alt_data_end+0xfc00ee90>
    ef14:	00800084 	movi	r2,2
    ef18:	f800283a 	ret
    ef1c:	4080030e 	bge	r8,r2,ef2c <__ledf2+0xcc>
    ef20:	383fef26 	beq	r7,zero,eee0 <__alt_data_end+0xfc00eee0>
    ef24:	00bfffc4 	movi	r2,-1
    ef28:	f800283a 	ret
    ef2c:	123feb16 	blt	r2,r8,eedc <__alt_data_end+0xfc00eedc>
    ef30:	1abff336 	bltu	r3,r10,ef00 <__alt_data_end+0xfc00ef00>
    ef34:	50c00326 	beq	r10,r3,ef44 <__ledf2+0xe4>
    ef38:	50c0042e 	bgeu	r10,r3,ef4c <__ledf2+0xec>
    ef3c:	283fe81e 	bne	r5,zero,eee0 <__alt_data_end+0xfc00eee0>
    ef40:	003ff806 	br	ef24 <__alt_data_end+0xfc00ef24>
    ef44:	313fee36 	bltu	r6,r4,ef00 <__alt_data_end+0xfc00ef00>
    ef48:	21bffc36 	bltu	r4,r6,ef3c <__alt_data_end+0xfc00ef3c>
    ef4c:	0005883a 	mov	r2,zero
    ef50:	f800283a 	ret

0000ef54 <__muldf3>:
    ef54:	deffee04 	addi	sp,sp,-72
    ef58:	dd000c15 	stw	r20,48(sp)
    ef5c:	2828d53a 	srli	r20,r5,20
    ef60:	ddc00f15 	stw	r23,60(sp)
    ef64:	282ed7fa 	srli	r23,r5,31
    ef68:	dc000815 	stw	r16,32(sp)
    ef6c:	04000434 	movhi	r16,16
    ef70:	dcc00b15 	stw	r19,44(sp)
    ef74:	843fffc4 	addi	r16,r16,-1
    ef78:	dfc01115 	stw	ra,68(sp)
    ef7c:	df001015 	stw	fp,64(sp)
    ef80:	dd800e15 	stw	r22,56(sp)
    ef84:	dd400d15 	stw	r21,52(sp)
    ef88:	dc800a15 	stw	r18,40(sp)
    ef8c:	dc400915 	stw	r17,36(sp)
    ef90:	a501ffcc 	andi	r20,r20,2047
    ef94:	2c20703a 	and	r16,r5,r16
    ef98:	b827883a 	mov	r19,r23
    ef9c:	ba403fcc 	andi	r9,r23,255
    efa0:	a0006026 	beq	r20,zero,f124 <__muldf3+0x1d0>
    efa4:	0081ffc4 	movi	r2,2047
    efa8:	202d883a 	mov	r22,r4
    efac:	a0803626 	beq	r20,r2,f088 <__muldf3+0x134>
    efb0:	84000434 	orhi	r16,r16,16
    efb4:	200ad77a 	srli	r5,r4,29
    efb8:	800490fa 	slli	r2,r16,3
    efbc:	202c90fa 	slli	r22,r4,3
    efc0:	a53f0044 	addi	r20,r20,-1023
    efc4:	28a0b03a 	or	r16,r5,r2
    efc8:	002b883a 	mov	r21,zero
    efcc:	000b883a 	mov	r5,zero
    efd0:	3804d53a 	srli	r2,r7,20
    efd4:	3838d7fa 	srli	fp,r7,31
    efd8:	04400434 	movhi	r17,16
    efdc:	8c7fffc4 	addi	r17,r17,-1
    efe0:	1081ffcc 	andi	r2,r2,2047
    efe4:	3025883a 	mov	r18,r6
    efe8:	3c62703a 	and	r17,r7,r17
    efec:	e2803fcc 	andi	r10,fp,255
    eff0:	10006d26 	beq	r2,zero,f1a8 <__muldf3+0x254>
    eff4:	00c1ffc4 	movi	r3,2047
    eff8:	10c06526 	beq	r2,r3,f190 <__muldf3+0x23c>
    effc:	8c400434 	orhi	r17,r17,16
    f000:	300ed77a 	srli	r7,r6,29
    f004:	880690fa 	slli	r3,r17,3
    f008:	302490fa 	slli	r18,r6,3
    f00c:	10bf0044 	addi	r2,r2,-1023
    f010:	38e2b03a 	or	r17,r7,r3
    f014:	000f883a 	mov	r7,zero
    f018:	a087883a 	add	r3,r20,r2
    f01c:	010003c4 	movi	r4,15
    f020:	3d44b03a 	or	r2,r7,r21
    f024:	e5ccf03a 	xor	r6,fp,r23
    f028:	1a000044 	addi	r8,r3,1
    f02c:	20809b36 	bltu	r4,r2,f29c <__muldf3+0x348>
    f030:	100490ba 	slli	r2,r2,2
    f034:	01000074 	movhi	r4,1
    f038:	213c1204 	addi	r4,r4,-4024
    f03c:	1105883a 	add	r2,r2,r4
    f040:	10800017 	ldw	r2,0(r2)
    f044:	1000683a 	jmp	r2
    f048:	0000f29c 	xori	zero,zero,970
    f04c:	0000f0a8 	cmpgeui	zero,zero,962
    f050:	0000f0a8 	cmpgeui	zero,zero,962
    f054:	0000f0a4 	muli	zero,zero,962
    f058:	0000f278 	rdprs	zero,zero,969
    f05c:	0000f278 	rdprs	zero,zero,969
    f060:	0000f260 	cmpeqi	zero,zero,969
    f064:	0000f0a4 	muli	zero,zero,962
    f068:	0000f278 	rdprs	zero,zero,969
    f06c:	0000f260 	cmpeqi	zero,zero,969
    f070:	0000f278 	rdprs	zero,zero,969
    f074:	0000f0a4 	muli	zero,zero,962
    f078:	0000f288 	cmpgei	zero,zero,970
    f07c:	0000f288 	cmpgei	zero,zero,970
    f080:	0000f288 	cmpgei	zero,zero,970
    f084:	0000f5e8 	cmpgeui	zero,zero,983
    f088:	2404b03a 	or	r2,r4,r16
    f08c:	1000711e 	bne	r2,zero,f254 <__muldf3+0x300>
    f090:	05400204 	movi	r21,8
    f094:	0021883a 	mov	r16,zero
    f098:	002d883a 	mov	r22,zero
    f09c:	01400084 	movi	r5,2
    f0a0:	003fcb06 	br	efd0 <__alt_data_end+0xfc00efd0>
    f0a4:	500d883a 	mov	r6,r10
    f0a8:	00800084 	movi	r2,2
    f0ac:	38805926 	beq	r7,r2,f214 <__muldf3+0x2c0>
    f0b0:	008000c4 	movi	r2,3
    f0b4:	3881bb26 	beq	r7,r2,f7a4 <__muldf3+0x850>
    f0b8:	00800044 	movi	r2,1
    f0bc:	3881961e 	bne	r7,r2,f718 <__muldf3+0x7c4>
    f0c0:	3027883a 	mov	r19,r6
    f0c4:	0005883a 	mov	r2,zero
    f0c8:	0021883a 	mov	r16,zero
    f0cc:	002d883a 	mov	r22,zero
    f0d0:	1004953a 	slli	r2,r2,20
    f0d4:	98c03fcc 	andi	r3,r19,255
    f0d8:	04400434 	movhi	r17,16
    f0dc:	8c7fffc4 	addi	r17,r17,-1
    f0e0:	180697fa 	slli	r3,r3,31
    f0e4:	8460703a 	and	r16,r16,r17
    f0e8:	80a0b03a 	or	r16,r16,r2
    f0ec:	80c6b03a 	or	r3,r16,r3
    f0f0:	b005883a 	mov	r2,r22
    f0f4:	dfc01117 	ldw	ra,68(sp)
    f0f8:	df001017 	ldw	fp,64(sp)
    f0fc:	ddc00f17 	ldw	r23,60(sp)
    f100:	dd800e17 	ldw	r22,56(sp)
    f104:	dd400d17 	ldw	r21,52(sp)
    f108:	dd000c17 	ldw	r20,48(sp)
    f10c:	dcc00b17 	ldw	r19,44(sp)
    f110:	dc800a17 	ldw	r18,40(sp)
    f114:	dc400917 	ldw	r17,36(sp)
    f118:	dc000817 	ldw	r16,32(sp)
    f11c:	dec01204 	addi	sp,sp,72
    f120:	f800283a 	ret
    f124:	2404b03a 	or	r2,r4,r16
    f128:	202b883a 	mov	r21,r4
    f12c:	10004426 	beq	r2,zero,f240 <__muldf3+0x2ec>
    f130:	80015126 	beq	r16,zero,f678 <__muldf3+0x724>
    f134:	8009883a 	mov	r4,r16
    f138:	d9800715 	stw	r6,28(sp)
    f13c:	d9c00215 	stw	r7,8(sp)
    f140:	da400415 	stw	r9,16(sp)
    f144:	00102c00 	call	102c0 <__clzsi2>
    f148:	d9800717 	ldw	r6,28(sp)
    f14c:	d9c00217 	ldw	r7,8(sp)
    f150:	da400417 	ldw	r9,16(sp)
    f154:	113ffd44 	addi	r4,r2,-11
    f158:	00c00704 	movi	r3,28
    f15c:	19014216 	blt	r3,r4,f668 <__muldf3+0x714>
    f160:	00c00744 	movi	r3,29
    f164:	15bffe04 	addi	r22,r2,-8
    f168:	1907c83a 	sub	r3,r3,r4
    f16c:	85a0983a 	sll	r16,r16,r22
    f170:	a8c6d83a 	srl	r3,r21,r3
    f174:	adac983a 	sll	r22,r21,r22
    f178:	1c20b03a 	or	r16,r3,r16
    f17c:	1080fcc4 	addi	r2,r2,1011
    f180:	00a9c83a 	sub	r20,zero,r2
    f184:	002b883a 	mov	r21,zero
    f188:	000b883a 	mov	r5,zero
    f18c:	003f9006 	br	efd0 <__alt_data_end+0xfc00efd0>
    f190:	3446b03a 	or	r3,r6,r17
    f194:	1800281e 	bne	r3,zero,f238 <__muldf3+0x2e4>
    f198:	0023883a 	mov	r17,zero
    f19c:	0025883a 	mov	r18,zero
    f1a0:	01c00084 	movi	r7,2
    f1a4:	003f9c06 	br	f018 <__alt_data_end+0xfc00f018>
    f1a8:	3446b03a 	or	r3,r6,r17
    f1ac:	18001e26 	beq	r3,zero,f228 <__muldf3+0x2d4>
    f1b0:	88012126 	beq	r17,zero,f638 <__muldf3+0x6e4>
    f1b4:	8809883a 	mov	r4,r17
    f1b8:	d9400215 	stw	r5,8(sp)
    f1bc:	d9800715 	stw	r6,28(sp)
    f1c0:	da400415 	stw	r9,16(sp)
    f1c4:	da800315 	stw	r10,12(sp)
    f1c8:	00102c00 	call	102c0 <__clzsi2>
    f1cc:	d9400217 	ldw	r5,8(sp)
    f1d0:	d9800717 	ldw	r6,28(sp)
    f1d4:	da400417 	ldw	r9,16(sp)
    f1d8:	da800317 	ldw	r10,12(sp)
    f1dc:	113ffd44 	addi	r4,r2,-11
    f1e0:	00c00704 	movi	r3,28
    f1e4:	19011016 	blt	r3,r4,f628 <__muldf3+0x6d4>
    f1e8:	00c00744 	movi	r3,29
    f1ec:	14bffe04 	addi	r18,r2,-8
    f1f0:	1907c83a 	sub	r3,r3,r4
    f1f4:	8ca2983a 	sll	r17,r17,r18
    f1f8:	30c6d83a 	srl	r3,r6,r3
    f1fc:	34a4983a 	sll	r18,r6,r18
    f200:	1c62b03a 	or	r17,r3,r17
    f204:	1080fcc4 	addi	r2,r2,1011
    f208:	0085c83a 	sub	r2,zero,r2
    f20c:	000f883a 	mov	r7,zero
    f210:	003f8106 	br	f018 <__alt_data_end+0xfc00f018>
    f214:	3027883a 	mov	r19,r6
    f218:	0081ffc4 	movi	r2,2047
    f21c:	0021883a 	mov	r16,zero
    f220:	002d883a 	mov	r22,zero
    f224:	003faa06 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f228:	0023883a 	mov	r17,zero
    f22c:	0025883a 	mov	r18,zero
    f230:	01c00044 	movi	r7,1
    f234:	003f7806 	br	f018 <__alt_data_end+0xfc00f018>
    f238:	01c000c4 	movi	r7,3
    f23c:	003f7606 	br	f018 <__alt_data_end+0xfc00f018>
    f240:	05400104 	movi	r21,4
    f244:	0021883a 	mov	r16,zero
    f248:	002d883a 	mov	r22,zero
    f24c:	01400044 	movi	r5,1
    f250:	003f5f06 	br	efd0 <__alt_data_end+0xfc00efd0>
    f254:	05400304 	movi	r21,12
    f258:	014000c4 	movi	r5,3
    f25c:	003f5c06 	br	efd0 <__alt_data_end+0xfc00efd0>
    f260:	04000434 	movhi	r16,16
    f264:	0027883a 	mov	r19,zero
    f268:	843fffc4 	addi	r16,r16,-1
    f26c:	05bfffc4 	movi	r22,-1
    f270:	0081ffc4 	movi	r2,2047
    f274:	003f9606 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f278:	8023883a 	mov	r17,r16
    f27c:	b025883a 	mov	r18,r22
    f280:	280f883a 	mov	r7,r5
    f284:	003f8806 	br	f0a8 <__alt_data_end+0xfc00f0a8>
    f288:	8023883a 	mov	r17,r16
    f28c:	b025883a 	mov	r18,r22
    f290:	480d883a 	mov	r6,r9
    f294:	280f883a 	mov	r7,r5
    f298:	003f8306 	br	f0a8 <__alt_data_end+0xfc00f0a8>
    f29c:	b026d43a 	srli	r19,r22,16
    f2a0:	902ed43a 	srli	r23,r18,16
    f2a4:	b5bfffcc 	andi	r22,r22,65535
    f2a8:	94bfffcc 	andi	r18,r18,65535
    f2ac:	b00b883a 	mov	r5,r22
    f2b0:	9009883a 	mov	r4,r18
    f2b4:	d8c00515 	stw	r3,20(sp)
    f2b8:	d9800715 	stw	r6,28(sp)
    f2bc:	da000615 	stw	r8,24(sp)
    f2c0:	00034100 	call	3410 <__mulsi3>
    f2c4:	980b883a 	mov	r5,r19
    f2c8:	9009883a 	mov	r4,r18
    f2cc:	1029883a 	mov	r20,r2
    f2d0:	00034100 	call	3410 <__mulsi3>
    f2d4:	b80b883a 	mov	r5,r23
    f2d8:	9809883a 	mov	r4,r19
    f2dc:	102b883a 	mov	r21,r2
    f2e0:	00034100 	call	3410 <__mulsi3>
    f2e4:	b809883a 	mov	r4,r23
    f2e8:	b00b883a 	mov	r5,r22
    f2ec:	1039883a 	mov	fp,r2
    f2f0:	00034100 	call	3410 <__mulsi3>
    f2f4:	a008d43a 	srli	r4,r20,16
    f2f8:	1545883a 	add	r2,r2,r21
    f2fc:	d8c00517 	ldw	r3,20(sp)
    f300:	2085883a 	add	r2,r4,r2
    f304:	d9800717 	ldw	r6,28(sp)
    f308:	da000617 	ldw	r8,24(sp)
    f30c:	1540022e 	bgeu	r2,r21,f318 <__muldf3+0x3c4>
    f310:	01000074 	movhi	r4,1
    f314:	e139883a 	add	fp,fp,r4
    f318:	100e943a 	slli	r7,r2,16
    f31c:	1004d43a 	srli	r2,r2,16
    f320:	882ad43a 	srli	r21,r17,16
    f324:	a53fffcc 	andi	r20,r20,65535
    f328:	8c7fffcc 	andi	r17,r17,65535
    f32c:	3d29883a 	add	r20,r7,r20
    f330:	b00b883a 	mov	r5,r22
    f334:	8809883a 	mov	r4,r17
    f338:	d8c00515 	stw	r3,20(sp)
    f33c:	d9800715 	stw	r6,28(sp)
    f340:	da000615 	stw	r8,24(sp)
    f344:	dd000115 	stw	r20,4(sp)
    f348:	d8800015 	stw	r2,0(sp)
    f34c:	00034100 	call	3410 <__mulsi3>
    f350:	980b883a 	mov	r5,r19
    f354:	8809883a 	mov	r4,r17
    f358:	d8800215 	stw	r2,8(sp)
    f35c:	00034100 	call	3410 <__mulsi3>
    f360:	9809883a 	mov	r4,r19
    f364:	a80b883a 	mov	r5,r21
    f368:	1029883a 	mov	r20,r2
    f36c:	00034100 	call	3410 <__mulsi3>
    f370:	b00b883a 	mov	r5,r22
    f374:	a809883a 	mov	r4,r21
    f378:	d8800415 	stw	r2,16(sp)
    f37c:	00034100 	call	3410 <__mulsi3>
    f380:	d9c00217 	ldw	r7,8(sp)
    f384:	1505883a 	add	r2,r2,r20
    f388:	d8c00517 	ldw	r3,20(sp)
    f38c:	3826d43a 	srli	r19,r7,16
    f390:	d9800717 	ldw	r6,28(sp)
    f394:	da000617 	ldw	r8,24(sp)
    f398:	9885883a 	add	r2,r19,r2
    f39c:	da400417 	ldw	r9,16(sp)
    f3a0:	1500022e 	bgeu	r2,r20,f3ac <__muldf3+0x458>
    f3a4:	01000074 	movhi	r4,1
    f3a8:	4913883a 	add	r9,r9,r4
    f3ac:	1028d43a 	srli	r20,r2,16
    f3b0:	1004943a 	slli	r2,r2,16
    f3b4:	802cd43a 	srli	r22,r16,16
    f3b8:	843fffcc 	andi	r16,r16,65535
    f3bc:	3cffffcc 	andi	r19,r7,65535
    f3c0:	9009883a 	mov	r4,r18
    f3c4:	800b883a 	mov	r5,r16
    f3c8:	a269883a 	add	r20,r20,r9
    f3cc:	d8c00515 	stw	r3,20(sp)
    f3d0:	d9800715 	stw	r6,28(sp)
    f3d4:	da000615 	stw	r8,24(sp)
    f3d8:	14e7883a 	add	r19,r2,r19
    f3dc:	00034100 	call	3410 <__mulsi3>
    f3e0:	9009883a 	mov	r4,r18
    f3e4:	b00b883a 	mov	r5,r22
    f3e8:	d8800315 	stw	r2,12(sp)
    f3ec:	00034100 	call	3410 <__mulsi3>
    f3f0:	b809883a 	mov	r4,r23
    f3f4:	b00b883a 	mov	r5,r22
    f3f8:	d8800215 	stw	r2,8(sp)
    f3fc:	00034100 	call	3410 <__mulsi3>
    f400:	b80b883a 	mov	r5,r23
    f404:	8009883a 	mov	r4,r16
    f408:	d8800415 	stw	r2,16(sp)
    f40c:	00034100 	call	3410 <__mulsi3>
    f410:	da800317 	ldw	r10,12(sp)
    f414:	d9c00217 	ldw	r7,8(sp)
    f418:	d9000017 	ldw	r4,0(sp)
    f41c:	502ed43a 	srli	r23,r10,16
    f420:	11c5883a 	add	r2,r2,r7
    f424:	24e5883a 	add	r18,r4,r19
    f428:	b885883a 	add	r2,r23,r2
    f42c:	d8c00517 	ldw	r3,20(sp)
    f430:	d9800717 	ldw	r6,28(sp)
    f434:	da000617 	ldw	r8,24(sp)
    f438:	da400417 	ldw	r9,16(sp)
    f43c:	11c0022e 	bgeu	r2,r7,f448 <__muldf3+0x4f4>
    f440:	01000074 	movhi	r4,1
    f444:	4913883a 	add	r9,r9,r4
    f448:	100ed43a 	srli	r7,r2,16
    f44c:	1004943a 	slli	r2,r2,16
    f450:	55ffffcc 	andi	r23,r10,65535
    f454:	3a53883a 	add	r9,r7,r9
    f458:	8809883a 	mov	r4,r17
    f45c:	800b883a 	mov	r5,r16
    f460:	d8c00515 	stw	r3,20(sp)
    f464:	d9800715 	stw	r6,28(sp)
    f468:	da000615 	stw	r8,24(sp)
    f46c:	da400415 	stw	r9,16(sp)
    f470:	15ef883a 	add	r23,r2,r23
    f474:	00034100 	call	3410 <__mulsi3>
    f478:	8809883a 	mov	r4,r17
    f47c:	b00b883a 	mov	r5,r22
    f480:	d8800215 	stw	r2,8(sp)
    f484:	00034100 	call	3410 <__mulsi3>
    f488:	b00b883a 	mov	r5,r22
    f48c:	a809883a 	mov	r4,r21
    f490:	d8800315 	stw	r2,12(sp)
    f494:	00034100 	call	3410 <__mulsi3>
    f498:	8009883a 	mov	r4,r16
    f49c:	a80b883a 	mov	r5,r21
    f4a0:	1023883a 	mov	r17,r2
    f4a4:	00034100 	call	3410 <__mulsi3>
    f4a8:	d9c00217 	ldw	r7,8(sp)
    f4ac:	da800317 	ldw	r10,12(sp)
    f4b0:	d8c00517 	ldw	r3,20(sp)
    f4b4:	3808d43a 	srli	r4,r7,16
    f4b8:	1285883a 	add	r2,r2,r10
    f4bc:	d9800717 	ldw	r6,28(sp)
    f4c0:	2085883a 	add	r2,r4,r2
    f4c4:	da000617 	ldw	r8,24(sp)
    f4c8:	da400417 	ldw	r9,16(sp)
    f4cc:	1280022e 	bgeu	r2,r10,f4d8 <__muldf3+0x584>
    f4d0:	01000074 	movhi	r4,1
    f4d4:	8923883a 	add	r17,r17,r4
    f4d8:	1008943a 	slli	r4,r2,16
    f4dc:	39ffffcc 	andi	r7,r7,65535
    f4e0:	e4b9883a 	add	fp,fp,r18
    f4e4:	21cf883a 	add	r7,r4,r7
    f4e8:	e4e7803a 	cmpltu	r19,fp,r19
    f4ec:	3d0f883a 	add	r7,r7,r20
    f4f0:	bf39883a 	add	fp,r23,fp
    f4f4:	99c9883a 	add	r4,r19,r7
    f4f8:	e5ef803a 	cmpltu	r23,fp,r23
    f4fc:	490b883a 	add	r5,r9,r4
    f500:	1004d43a 	srli	r2,r2,16
    f504:	b965883a 	add	r18,r23,r5
    f508:	24c9803a 	cmpltu	r4,r4,r19
    f50c:	3d29803a 	cmpltu	r20,r7,r20
    f510:	a128b03a 	or	r20,r20,r4
    f514:	95ef803a 	cmpltu	r23,r18,r23
    f518:	2a53803a 	cmpltu	r9,r5,r9
    f51c:	a0a9883a 	add	r20,r20,r2
    f520:	4deeb03a 	or	r23,r9,r23
    f524:	a5ef883a 	add	r23,r20,r23
    f528:	bc63883a 	add	r17,r23,r17
    f52c:	e004927a 	slli	r2,fp,9
    f530:	d9000117 	ldw	r4,4(sp)
    f534:	882e927a 	slli	r23,r17,9
    f538:	9022d5fa 	srli	r17,r18,23
    f53c:	e038d5fa 	srli	fp,fp,23
    f540:	1104b03a 	or	r2,r2,r4
    f544:	9024927a 	slli	r18,r18,9
    f548:	1004c03a 	cmpne	r2,r2,zero
    f54c:	bc62b03a 	or	r17,r23,r17
    f550:	1738b03a 	or	fp,r2,fp
    f554:	8880402c 	andhi	r2,r17,256
    f558:	e4a4b03a 	or	r18,fp,r18
    f55c:	10000726 	beq	r2,zero,f57c <__muldf3+0x628>
    f560:	9006d07a 	srli	r3,r18,1
    f564:	880497fa 	slli	r2,r17,31
    f568:	9480004c 	andi	r18,r18,1
    f56c:	8822d07a 	srli	r17,r17,1
    f570:	1ca4b03a 	or	r18,r3,r18
    f574:	14a4b03a 	or	r18,r2,r18
    f578:	4007883a 	mov	r3,r8
    f57c:	1880ffc4 	addi	r2,r3,1023
    f580:	0080460e 	bge	zero,r2,f69c <__muldf3+0x748>
    f584:	910001cc 	andi	r4,r18,7
    f588:	20000726 	beq	r4,zero,f5a8 <__muldf3+0x654>
    f58c:	910003cc 	andi	r4,r18,15
    f590:	01400104 	movi	r5,4
    f594:	21400426 	beq	r4,r5,f5a8 <__muldf3+0x654>
    f598:	9149883a 	add	r4,r18,r5
    f59c:	24a5803a 	cmpltu	r18,r4,r18
    f5a0:	8ca3883a 	add	r17,r17,r18
    f5a4:	2025883a 	mov	r18,r4
    f5a8:	8900402c 	andhi	r4,r17,256
    f5ac:	20000426 	beq	r4,zero,f5c0 <__muldf3+0x66c>
    f5b0:	18810004 	addi	r2,r3,1024
    f5b4:	00ffc034 	movhi	r3,65280
    f5b8:	18ffffc4 	addi	r3,r3,-1
    f5bc:	88e2703a 	and	r17,r17,r3
    f5c0:	00c1ff84 	movi	r3,2046
    f5c4:	18bf1316 	blt	r3,r2,f214 <__alt_data_end+0xfc00f214>
    f5c8:	882c977a 	slli	r22,r17,29
    f5cc:	9024d0fa 	srli	r18,r18,3
    f5d0:	8822927a 	slli	r17,r17,9
    f5d4:	1081ffcc 	andi	r2,r2,2047
    f5d8:	b4acb03a 	or	r22,r22,r18
    f5dc:	8820d33a 	srli	r16,r17,12
    f5e0:	3027883a 	mov	r19,r6
    f5e4:	003eba06 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f5e8:	8080022c 	andhi	r2,r16,8
    f5ec:	10000926 	beq	r2,zero,f614 <__muldf3+0x6c0>
    f5f0:	8880022c 	andhi	r2,r17,8
    f5f4:	1000071e 	bne	r2,zero,f614 <__muldf3+0x6c0>
    f5f8:	00800434 	movhi	r2,16
    f5fc:	8c000234 	orhi	r16,r17,8
    f600:	10bfffc4 	addi	r2,r2,-1
    f604:	e027883a 	mov	r19,fp
    f608:	80a0703a 	and	r16,r16,r2
    f60c:	902d883a 	mov	r22,r18
    f610:	003f1706 	br	f270 <__alt_data_end+0xfc00f270>
    f614:	00800434 	movhi	r2,16
    f618:	84000234 	orhi	r16,r16,8
    f61c:	10bfffc4 	addi	r2,r2,-1
    f620:	80a0703a 	and	r16,r16,r2
    f624:	003f1206 	br	f270 <__alt_data_end+0xfc00f270>
    f628:	147ff604 	addi	r17,r2,-40
    f62c:	3462983a 	sll	r17,r6,r17
    f630:	0025883a 	mov	r18,zero
    f634:	003ef306 	br	f204 <__alt_data_end+0xfc00f204>
    f638:	3009883a 	mov	r4,r6
    f63c:	d9400215 	stw	r5,8(sp)
    f640:	d9800715 	stw	r6,28(sp)
    f644:	da400415 	stw	r9,16(sp)
    f648:	da800315 	stw	r10,12(sp)
    f64c:	00102c00 	call	102c0 <__clzsi2>
    f650:	10800804 	addi	r2,r2,32
    f654:	da800317 	ldw	r10,12(sp)
    f658:	da400417 	ldw	r9,16(sp)
    f65c:	d9800717 	ldw	r6,28(sp)
    f660:	d9400217 	ldw	r5,8(sp)
    f664:	003edd06 	br	f1dc <__alt_data_end+0xfc00f1dc>
    f668:	143ff604 	addi	r16,r2,-40
    f66c:	ac20983a 	sll	r16,r21,r16
    f670:	002d883a 	mov	r22,zero
    f674:	003ec106 	br	f17c <__alt_data_end+0xfc00f17c>
    f678:	d9800715 	stw	r6,28(sp)
    f67c:	d9c00215 	stw	r7,8(sp)
    f680:	da400415 	stw	r9,16(sp)
    f684:	00102c00 	call	102c0 <__clzsi2>
    f688:	10800804 	addi	r2,r2,32
    f68c:	da400417 	ldw	r9,16(sp)
    f690:	d9c00217 	ldw	r7,8(sp)
    f694:	d9800717 	ldw	r6,28(sp)
    f698:	003eae06 	br	f154 <__alt_data_end+0xfc00f154>
    f69c:	00c00044 	movi	r3,1
    f6a0:	1887c83a 	sub	r3,r3,r2
    f6a4:	01000e04 	movi	r4,56
    f6a8:	20fe8516 	blt	r4,r3,f0c0 <__alt_data_end+0xfc00f0c0>
    f6ac:	010007c4 	movi	r4,31
    f6b0:	20c01b16 	blt	r4,r3,f720 <__muldf3+0x7cc>
    f6b4:	00800804 	movi	r2,32
    f6b8:	10c5c83a 	sub	r2,r2,r3
    f6bc:	888a983a 	sll	r5,r17,r2
    f6c0:	90c8d83a 	srl	r4,r18,r3
    f6c4:	9084983a 	sll	r2,r18,r2
    f6c8:	88e2d83a 	srl	r17,r17,r3
    f6cc:	2906b03a 	or	r3,r5,r4
    f6d0:	1004c03a 	cmpne	r2,r2,zero
    f6d4:	1886b03a 	or	r3,r3,r2
    f6d8:	188001cc 	andi	r2,r3,7
    f6dc:	10000726 	beq	r2,zero,f6fc <__muldf3+0x7a8>
    f6e0:	188003cc 	andi	r2,r3,15
    f6e4:	01000104 	movi	r4,4
    f6e8:	11000426 	beq	r2,r4,f6fc <__muldf3+0x7a8>
    f6ec:	1805883a 	mov	r2,r3
    f6f0:	10c00104 	addi	r3,r2,4
    f6f4:	1885803a 	cmpltu	r2,r3,r2
    f6f8:	88a3883a 	add	r17,r17,r2
    f6fc:	8880202c 	andhi	r2,r17,128
    f700:	10001c26 	beq	r2,zero,f774 <__muldf3+0x820>
    f704:	3027883a 	mov	r19,r6
    f708:	00800044 	movi	r2,1
    f70c:	0021883a 	mov	r16,zero
    f710:	002d883a 	mov	r22,zero
    f714:	003e6e06 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f718:	4007883a 	mov	r3,r8
    f71c:	003f9706 	br	f57c <__alt_data_end+0xfc00f57c>
    f720:	017ff844 	movi	r5,-31
    f724:	2885c83a 	sub	r2,r5,r2
    f728:	888ad83a 	srl	r5,r17,r2
    f72c:	00800804 	movi	r2,32
    f730:	18801a26 	beq	r3,r2,f79c <__muldf3+0x848>
    f734:	01001004 	movi	r4,64
    f738:	20c7c83a 	sub	r3,r4,r3
    f73c:	88e2983a 	sll	r17,r17,r3
    f740:	8ca4b03a 	or	r18,r17,r18
    f744:	9004c03a 	cmpne	r2,r18,zero
    f748:	2884b03a 	or	r2,r5,r2
    f74c:	144001cc 	andi	r17,r2,7
    f750:	88000d1e 	bne	r17,zero,f788 <__muldf3+0x834>
    f754:	0021883a 	mov	r16,zero
    f758:	102cd0fa 	srli	r22,r2,3
    f75c:	3027883a 	mov	r19,r6
    f760:	0005883a 	mov	r2,zero
    f764:	b46cb03a 	or	r22,r22,r17
    f768:	003e5906 	br	f0d0 <__alt_data_end+0xfc00f0d0>
    f76c:	1007883a 	mov	r3,r2
    f770:	0023883a 	mov	r17,zero
    f774:	8820927a 	slli	r16,r17,9
    f778:	1805883a 	mov	r2,r3
    f77c:	8822977a 	slli	r17,r17,29
    f780:	8020d33a 	srli	r16,r16,12
    f784:	003ff406 	br	f758 <__alt_data_end+0xfc00f758>
    f788:	10c003cc 	andi	r3,r2,15
    f78c:	01000104 	movi	r4,4
    f790:	193ff626 	beq	r3,r4,f76c <__alt_data_end+0xfc00f76c>
    f794:	0023883a 	mov	r17,zero
    f798:	003fd506 	br	f6f0 <__alt_data_end+0xfc00f6f0>
    f79c:	0023883a 	mov	r17,zero
    f7a0:	003fe706 	br	f740 <__alt_data_end+0xfc00f740>
    f7a4:	00800434 	movhi	r2,16
    f7a8:	8c000234 	orhi	r16,r17,8
    f7ac:	10bfffc4 	addi	r2,r2,-1
    f7b0:	3027883a 	mov	r19,r6
    f7b4:	80a0703a 	and	r16,r16,r2
    f7b8:	902d883a 	mov	r22,r18
    f7bc:	003eac06 	br	f270 <__alt_data_end+0xfc00f270>

0000f7c0 <__subdf3>:
    f7c0:	02000434 	movhi	r8,16
    f7c4:	423fffc4 	addi	r8,r8,-1
    f7c8:	defffb04 	addi	sp,sp,-20
    f7cc:	2a14703a 	and	r10,r5,r8
    f7d0:	3812d53a 	srli	r9,r7,20
    f7d4:	3a10703a 	and	r8,r7,r8
    f7d8:	2006d77a 	srli	r3,r4,29
    f7dc:	3004d77a 	srli	r2,r6,29
    f7e0:	dc000015 	stw	r16,0(sp)
    f7e4:	501490fa 	slli	r10,r10,3
    f7e8:	2820d53a 	srli	r16,r5,20
    f7ec:	401090fa 	slli	r8,r8,3
    f7f0:	dc800215 	stw	r18,8(sp)
    f7f4:	dc400115 	stw	r17,4(sp)
    f7f8:	dfc00415 	stw	ra,16(sp)
    f7fc:	202290fa 	slli	r17,r4,3
    f800:	dcc00315 	stw	r19,12(sp)
    f804:	4a41ffcc 	andi	r9,r9,2047
    f808:	0101ffc4 	movi	r4,2047
    f80c:	2824d7fa 	srli	r18,r5,31
    f810:	8401ffcc 	andi	r16,r16,2047
    f814:	50c6b03a 	or	r3,r10,r3
    f818:	380ed7fa 	srli	r7,r7,31
    f81c:	408ab03a 	or	r5,r8,r2
    f820:	300c90fa 	slli	r6,r6,3
    f824:	49009626 	beq	r9,r4,fa80 <__subdf3+0x2c0>
    f828:	39c0005c 	xori	r7,r7,1
    f82c:	8245c83a 	sub	r2,r16,r9
    f830:	3c807426 	beq	r7,r18,fa04 <__subdf3+0x244>
    f834:	0080af0e 	bge	zero,r2,faf4 <__subdf3+0x334>
    f838:	48002a1e 	bne	r9,zero,f8e4 <__subdf3+0x124>
    f83c:	2988b03a 	or	r4,r5,r6
    f840:	20009a1e 	bne	r4,zero,faac <__subdf3+0x2ec>
    f844:	888001cc 	andi	r2,r17,7
    f848:	10000726 	beq	r2,zero,f868 <__subdf3+0xa8>
    f84c:	888003cc 	andi	r2,r17,15
    f850:	01000104 	movi	r4,4
    f854:	11000426 	beq	r2,r4,f868 <__subdf3+0xa8>
    f858:	890b883a 	add	r5,r17,r4
    f85c:	2c63803a 	cmpltu	r17,r5,r17
    f860:	1c47883a 	add	r3,r3,r17
    f864:	2823883a 	mov	r17,r5
    f868:	1880202c 	andhi	r2,r3,128
    f86c:	10005926 	beq	r2,zero,f9d4 <__subdf3+0x214>
    f870:	84000044 	addi	r16,r16,1
    f874:	0081ffc4 	movi	r2,2047
    f878:	8080be26 	beq	r16,r2,fb74 <__subdf3+0x3b4>
    f87c:	017fe034 	movhi	r5,65408
    f880:	297fffc4 	addi	r5,r5,-1
    f884:	1946703a 	and	r3,r3,r5
    f888:	1804977a 	slli	r2,r3,29
    f88c:	1806927a 	slli	r3,r3,9
    f890:	8822d0fa 	srli	r17,r17,3
    f894:	8401ffcc 	andi	r16,r16,2047
    f898:	180ad33a 	srli	r5,r3,12
    f89c:	9100004c 	andi	r4,r18,1
    f8a0:	1444b03a 	or	r2,r2,r17
    f8a4:	80c1ffcc 	andi	r3,r16,2047
    f8a8:	1820953a 	slli	r16,r3,20
    f8ac:	20c03fcc 	andi	r3,r4,255
    f8b0:	180897fa 	slli	r4,r3,31
    f8b4:	00c00434 	movhi	r3,16
    f8b8:	18ffffc4 	addi	r3,r3,-1
    f8bc:	28c6703a 	and	r3,r5,r3
    f8c0:	1c06b03a 	or	r3,r3,r16
    f8c4:	1906b03a 	or	r3,r3,r4
    f8c8:	dfc00417 	ldw	ra,16(sp)
    f8cc:	dcc00317 	ldw	r19,12(sp)
    f8d0:	dc800217 	ldw	r18,8(sp)
    f8d4:	dc400117 	ldw	r17,4(sp)
    f8d8:	dc000017 	ldw	r16,0(sp)
    f8dc:	dec00504 	addi	sp,sp,20
    f8e0:	f800283a 	ret
    f8e4:	0101ffc4 	movi	r4,2047
    f8e8:	813fd626 	beq	r16,r4,f844 <__alt_data_end+0xfc00f844>
    f8ec:	29402034 	orhi	r5,r5,128
    f8f0:	01000e04 	movi	r4,56
    f8f4:	2080a316 	blt	r4,r2,fb84 <__subdf3+0x3c4>
    f8f8:	010007c4 	movi	r4,31
    f8fc:	2080c616 	blt	r4,r2,fc18 <__subdf3+0x458>
    f900:	01000804 	movi	r4,32
    f904:	2089c83a 	sub	r4,r4,r2
    f908:	2910983a 	sll	r8,r5,r4
    f90c:	308ed83a 	srl	r7,r6,r2
    f910:	3108983a 	sll	r4,r6,r4
    f914:	2884d83a 	srl	r2,r5,r2
    f918:	41ccb03a 	or	r6,r8,r7
    f91c:	2008c03a 	cmpne	r4,r4,zero
    f920:	310cb03a 	or	r6,r6,r4
    f924:	898dc83a 	sub	r6,r17,r6
    f928:	89a3803a 	cmpltu	r17,r17,r6
    f92c:	1887c83a 	sub	r3,r3,r2
    f930:	1c47c83a 	sub	r3,r3,r17
    f934:	3023883a 	mov	r17,r6
    f938:	1880202c 	andhi	r2,r3,128
    f93c:	10002326 	beq	r2,zero,f9cc <__subdf3+0x20c>
    f940:	04c02034 	movhi	r19,128
    f944:	9cffffc4 	addi	r19,r19,-1
    f948:	1ce6703a 	and	r19,r3,r19
    f94c:	98007a26 	beq	r19,zero,fb38 <__subdf3+0x378>
    f950:	9809883a 	mov	r4,r19
    f954:	00102c00 	call	102c0 <__clzsi2>
    f958:	113ffe04 	addi	r4,r2,-8
    f95c:	00c007c4 	movi	r3,31
    f960:	19007b16 	blt	r3,r4,fb50 <__subdf3+0x390>
    f964:	00800804 	movi	r2,32
    f968:	1105c83a 	sub	r2,r2,r4
    f96c:	8884d83a 	srl	r2,r17,r2
    f970:	9906983a 	sll	r3,r19,r4
    f974:	8922983a 	sll	r17,r17,r4
    f978:	10c4b03a 	or	r2,r2,r3
    f97c:	24007816 	blt	r4,r16,fb60 <__subdf3+0x3a0>
    f980:	2421c83a 	sub	r16,r4,r16
    f984:	80c00044 	addi	r3,r16,1
    f988:	010007c4 	movi	r4,31
    f98c:	20c09516 	blt	r4,r3,fbe4 <__subdf3+0x424>
    f990:	01400804 	movi	r5,32
    f994:	28cbc83a 	sub	r5,r5,r3
    f998:	88c8d83a 	srl	r4,r17,r3
    f99c:	8962983a 	sll	r17,r17,r5
    f9a0:	114a983a 	sll	r5,r2,r5
    f9a4:	10c6d83a 	srl	r3,r2,r3
    f9a8:	8804c03a 	cmpne	r2,r17,zero
    f9ac:	290ab03a 	or	r5,r5,r4
    f9b0:	28a2b03a 	or	r17,r5,r2
    f9b4:	0021883a 	mov	r16,zero
    f9b8:	003fa206 	br	f844 <__alt_data_end+0xfc00f844>
    f9bc:	2090b03a 	or	r8,r4,r2
    f9c0:	40018e26 	beq	r8,zero,fffc <__subdf3+0x83c>
    f9c4:	1007883a 	mov	r3,r2
    f9c8:	2023883a 	mov	r17,r4
    f9cc:	888001cc 	andi	r2,r17,7
    f9d0:	103f9e1e 	bne	r2,zero,f84c <__alt_data_end+0xfc00f84c>
    f9d4:	1804977a 	slli	r2,r3,29
    f9d8:	8822d0fa 	srli	r17,r17,3
    f9dc:	1810d0fa 	srli	r8,r3,3
    f9e0:	9100004c 	andi	r4,r18,1
    f9e4:	1444b03a 	or	r2,r2,r17
    f9e8:	00c1ffc4 	movi	r3,2047
    f9ec:	80c02826 	beq	r16,r3,fa90 <__subdf3+0x2d0>
    f9f0:	01400434 	movhi	r5,16
    f9f4:	297fffc4 	addi	r5,r5,-1
    f9f8:	80e0703a 	and	r16,r16,r3
    f9fc:	414a703a 	and	r5,r8,r5
    fa00:	003fa806 	br	f8a4 <__alt_data_end+0xfc00f8a4>
    fa04:	0080630e 	bge	zero,r2,fb94 <__subdf3+0x3d4>
    fa08:	48003026 	beq	r9,zero,facc <__subdf3+0x30c>
    fa0c:	0101ffc4 	movi	r4,2047
    fa10:	813f8c26 	beq	r16,r4,f844 <__alt_data_end+0xfc00f844>
    fa14:	29402034 	orhi	r5,r5,128
    fa18:	01000e04 	movi	r4,56
    fa1c:	2080a90e 	bge	r4,r2,fcc4 <__subdf3+0x504>
    fa20:	298cb03a 	or	r6,r5,r6
    fa24:	3012c03a 	cmpne	r9,r6,zero
    fa28:	0005883a 	mov	r2,zero
    fa2c:	4c53883a 	add	r9,r9,r17
    fa30:	4c63803a 	cmpltu	r17,r9,r17
    fa34:	10c7883a 	add	r3,r2,r3
    fa38:	88c7883a 	add	r3,r17,r3
    fa3c:	4823883a 	mov	r17,r9
    fa40:	1880202c 	andhi	r2,r3,128
    fa44:	1000d026 	beq	r2,zero,fd88 <__subdf3+0x5c8>
    fa48:	84000044 	addi	r16,r16,1
    fa4c:	0081ffc4 	movi	r2,2047
    fa50:	8080fe26 	beq	r16,r2,fe4c <__subdf3+0x68c>
    fa54:	00bfe034 	movhi	r2,65408
    fa58:	10bfffc4 	addi	r2,r2,-1
    fa5c:	1886703a 	and	r3,r3,r2
    fa60:	880ad07a 	srli	r5,r17,1
    fa64:	180497fa 	slli	r2,r3,31
    fa68:	8900004c 	andi	r4,r17,1
    fa6c:	2922b03a 	or	r17,r5,r4
    fa70:	1806d07a 	srli	r3,r3,1
    fa74:	1462b03a 	or	r17,r2,r17
    fa78:	3825883a 	mov	r18,r7
    fa7c:	003f7106 	br	f844 <__alt_data_end+0xfc00f844>
    fa80:	2984b03a 	or	r2,r5,r6
    fa84:	103f6826 	beq	r2,zero,f828 <__alt_data_end+0xfc00f828>
    fa88:	39c03fcc 	andi	r7,r7,255
    fa8c:	003f6706 	br	f82c <__alt_data_end+0xfc00f82c>
    fa90:	4086b03a 	or	r3,r8,r2
    fa94:	18015226 	beq	r3,zero,ffe0 <__subdf3+0x820>
    fa98:	00c00434 	movhi	r3,16
    fa9c:	41400234 	orhi	r5,r8,8
    faa0:	18ffffc4 	addi	r3,r3,-1
    faa4:	28ca703a 	and	r5,r5,r3
    faa8:	003f7e06 	br	f8a4 <__alt_data_end+0xfc00f8a4>
    faac:	10bfffc4 	addi	r2,r2,-1
    fab0:	1000491e 	bne	r2,zero,fbd8 <__subdf3+0x418>
    fab4:	898fc83a 	sub	r7,r17,r6
    fab8:	89e3803a 	cmpltu	r17,r17,r7
    fabc:	1947c83a 	sub	r3,r3,r5
    fac0:	1c47c83a 	sub	r3,r3,r17
    fac4:	3823883a 	mov	r17,r7
    fac8:	003f9b06 	br	f938 <__alt_data_end+0xfc00f938>
    facc:	2988b03a 	or	r4,r5,r6
    fad0:	203f5c26 	beq	r4,zero,f844 <__alt_data_end+0xfc00f844>
    fad4:	10bfffc4 	addi	r2,r2,-1
    fad8:	1000931e 	bne	r2,zero,fd28 <__subdf3+0x568>
    fadc:	898d883a 	add	r6,r17,r6
    fae0:	3463803a 	cmpltu	r17,r6,r17
    fae4:	1947883a 	add	r3,r3,r5
    fae8:	88c7883a 	add	r3,r17,r3
    faec:	3023883a 	mov	r17,r6
    faf0:	003fd306 	br	fa40 <__alt_data_end+0xfc00fa40>
    faf4:	1000541e 	bne	r2,zero,fc48 <__subdf3+0x488>
    faf8:	80800044 	addi	r2,r16,1
    fafc:	1081ffcc 	andi	r2,r2,2047
    fb00:	01000044 	movi	r4,1
    fb04:	2080a20e 	bge	r4,r2,fd90 <__subdf3+0x5d0>
    fb08:	8989c83a 	sub	r4,r17,r6
    fb0c:	8905803a 	cmpltu	r2,r17,r4
    fb10:	1967c83a 	sub	r19,r3,r5
    fb14:	98a7c83a 	sub	r19,r19,r2
    fb18:	9880202c 	andhi	r2,r19,128
    fb1c:	10006326 	beq	r2,zero,fcac <__subdf3+0x4ec>
    fb20:	3463c83a 	sub	r17,r6,r17
    fb24:	28c7c83a 	sub	r3,r5,r3
    fb28:	344d803a 	cmpltu	r6,r6,r17
    fb2c:	19a7c83a 	sub	r19,r3,r6
    fb30:	3825883a 	mov	r18,r7
    fb34:	983f861e 	bne	r19,zero,f950 <__alt_data_end+0xfc00f950>
    fb38:	8809883a 	mov	r4,r17
    fb3c:	00102c00 	call	102c0 <__clzsi2>
    fb40:	10800804 	addi	r2,r2,32
    fb44:	113ffe04 	addi	r4,r2,-8
    fb48:	00c007c4 	movi	r3,31
    fb4c:	193f850e 	bge	r3,r4,f964 <__alt_data_end+0xfc00f964>
    fb50:	10bff604 	addi	r2,r2,-40
    fb54:	8884983a 	sll	r2,r17,r2
    fb58:	0023883a 	mov	r17,zero
    fb5c:	243f880e 	bge	r4,r16,f980 <__alt_data_end+0xfc00f980>
    fb60:	00ffe034 	movhi	r3,65408
    fb64:	18ffffc4 	addi	r3,r3,-1
    fb68:	8121c83a 	sub	r16,r16,r4
    fb6c:	10c6703a 	and	r3,r2,r3
    fb70:	003f3406 	br	f844 <__alt_data_end+0xfc00f844>
    fb74:	9100004c 	andi	r4,r18,1
    fb78:	000b883a 	mov	r5,zero
    fb7c:	0005883a 	mov	r2,zero
    fb80:	003f4806 	br	f8a4 <__alt_data_end+0xfc00f8a4>
    fb84:	298cb03a 	or	r6,r5,r6
    fb88:	300cc03a 	cmpne	r6,r6,zero
    fb8c:	0005883a 	mov	r2,zero
    fb90:	003f6406 	br	f924 <__alt_data_end+0xfc00f924>
    fb94:	10009a1e 	bne	r2,zero,fe00 <__subdf3+0x640>
    fb98:	82400044 	addi	r9,r16,1
    fb9c:	4881ffcc 	andi	r2,r9,2047
    fba0:	02800044 	movi	r10,1
    fba4:	5080670e 	bge	r10,r2,fd44 <__subdf3+0x584>
    fba8:	0081ffc4 	movi	r2,2047
    fbac:	4880af26 	beq	r9,r2,fe6c <__subdf3+0x6ac>
    fbb0:	898d883a 	add	r6,r17,r6
    fbb4:	1945883a 	add	r2,r3,r5
    fbb8:	3447803a 	cmpltu	r3,r6,r17
    fbbc:	1887883a 	add	r3,r3,r2
    fbc0:	182297fa 	slli	r17,r3,31
    fbc4:	300cd07a 	srli	r6,r6,1
    fbc8:	1806d07a 	srli	r3,r3,1
    fbcc:	4821883a 	mov	r16,r9
    fbd0:	89a2b03a 	or	r17,r17,r6
    fbd4:	003f1b06 	br	f844 <__alt_data_end+0xfc00f844>
    fbd8:	0101ffc4 	movi	r4,2047
    fbdc:	813f441e 	bne	r16,r4,f8f0 <__alt_data_end+0xfc00f8f0>
    fbe0:	003f1806 	br	f844 <__alt_data_end+0xfc00f844>
    fbe4:	843ff844 	addi	r16,r16,-31
    fbe8:	01400804 	movi	r5,32
    fbec:	1408d83a 	srl	r4,r2,r16
    fbf0:	19405026 	beq	r3,r5,fd34 <__subdf3+0x574>
    fbf4:	01401004 	movi	r5,64
    fbf8:	28c7c83a 	sub	r3,r5,r3
    fbfc:	10c4983a 	sll	r2,r2,r3
    fc00:	88a2b03a 	or	r17,r17,r2
    fc04:	8822c03a 	cmpne	r17,r17,zero
    fc08:	2462b03a 	or	r17,r4,r17
    fc0c:	0007883a 	mov	r3,zero
    fc10:	0021883a 	mov	r16,zero
    fc14:	003f6d06 	br	f9cc <__alt_data_end+0xfc00f9cc>
    fc18:	11fff804 	addi	r7,r2,-32
    fc1c:	01000804 	movi	r4,32
    fc20:	29ced83a 	srl	r7,r5,r7
    fc24:	11004526 	beq	r2,r4,fd3c <__subdf3+0x57c>
    fc28:	01001004 	movi	r4,64
    fc2c:	2089c83a 	sub	r4,r4,r2
    fc30:	2904983a 	sll	r2,r5,r4
    fc34:	118cb03a 	or	r6,r2,r6
    fc38:	300cc03a 	cmpne	r6,r6,zero
    fc3c:	398cb03a 	or	r6,r7,r6
    fc40:	0005883a 	mov	r2,zero
    fc44:	003f3706 	br	f924 <__alt_data_end+0xfc00f924>
    fc48:	80002a26 	beq	r16,zero,fcf4 <__subdf3+0x534>
    fc4c:	0101ffc4 	movi	r4,2047
    fc50:	49006626 	beq	r9,r4,fdec <__subdf3+0x62c>
    fc54:	0085c83a 	sub	r2,zero,r2
    fc58:	18c02034 	orhi	r3,r3,128
    fc5c:	01000e04 	movi	r4,56
    fc60:	20807e16 	blt	r4,r2,fe5c <__subdf3+0x69c>
    fc64:	010007c4 	movi	r4,31
    fc68:	2080e716 	blt	r4,r2,10008 <__subdf3+0x848>
    fc6c:	01000804 	movi	r4,32
    fc70:	2089c83a 	sub	r4,r4,r2
    fc74:	1914983a 	sll	r10,r3,r4
    fc78:	8890d83a 	srl	r8,r17,r2
    fc7c:	8908983a 	sll	r4,r17,r4
    fc80:	1884d83a 	srl	r2,r3,r2
    fc84:	5222b03a 	or	r17,r10,r8
    fc88:	2006c03a 	cmpne	r3,r4,zero
    fc8c:	88e2b03a 	or	r17,r17,r3
    fc90:	3463c83a 	sub	r17,r6,r17
    fc94:	2885c83a 	sub	r2,r5,r2
    fc98:	344d803a 	cmpltu	r6,r6,r17
    fc9c:	1187c83a 	sub	r3,r2,r6
    fca0:	4821883a 	mov	r16,r9
    fca4:	3825883a 	mov	r18,r7
    fca8:	003f2306 	br	f938 <__alt_data_end+0xfc00f938>
    fcac:	24d0b03a 	or	r8,r4,r19
    fcb0:	40001b1e 	bne	r8,zero,fd20 <__subdf3+0x560>
    fcb4:	0005883a 	mov	r2,zero
    fcb8:	0009883a 	mov	r4,zero
    fcbc:	0021883a 	mov	r16,zero
    fcc0:	003f4906 	br	f9e8 <__alt_data_end+0xfc00f9e8>
    fcc4:	010007c4 	movi	r4,31
    fcc8:	20803a16 	blt	r4,r2,fdb4 <__subdf3+0x5f4>
    fccc:	01000804 	movi	r4,32
    fcd0:	2089c83a 	sub	r4,r4,r2
    fcd4:	2912983a 	sll	r9,r5,r4
    fcd8:	3090d83a 	srl	r8,r6,r2
    fcdc:	3108983a 	sll	r4,r6,r4
    fce0:	2884d83a 	srl	r2,r5,r2
    fce4:	4a12b03a 	or	r9,r9,r8
    fce8:	2008c03a 	cmpne	r4,r4,zero
    fcec:	4912b03a 	or	r9,r9,r4
    fcf0:	003f4e06 	br	fa2c <__alt_data_end+0xfc00fa2c>
    fcf4:	1c48b03a 	or	r4,r3,r17
    fcf8:	20003c26 	beq	r4,zero,fdec <__subdf3+0x62c>
    fcfc:	0084303a 	nor	r2,zero,r2
    fd00:	1000381e 	bne	r2,zero,fde4 <__subdf3+0x624>
    fd04:	3463c83a 	sub	r17,r6,r17
    fd08:	28c5c83a 	sub	r2,r5,r3
    fd0c:	344d803a 	cmpltu	r6,r6,r17
    fd10:	1187c83a 	sub	r3,r2,r6
    fd14:	4821883a 	mov	r16,r9
    fd18:	3825883a 	mov	r18,r7
    fd1c:	003f0606 	br	f938 <__alt_data_end+0xfc00f938>
    fd20:	2023883a 	mov	r17,r4
    fd24:	003f0906 	br	f94c <__alt_data_end+0xfc00f94c>
    fd28:	0101ffc4 	movi	r4,2047
    fd2c:	813f3a1e 	bne	r16,r4,fa18 <__alt_data_end+0xfc00fa18>
    fd30:	003ec406 	br	f844 <__alt_data_end+0xfc00f844>
    fd34:	0005883a 	mov	r2,zero
    fd38:	003fb106 	br	fc00 <__alt_data_end+0xfc00fc00>
    fd3c:	0005883a 	mov	r2,zero
    fd40:	003fbc06 	br	fc34 <__alt_data_end+0xfc00fc34>
    fd44:	1c44b03a 	or	r2,r3,r17
    fd48:	80008e1e 	bne	r16,zero,ff84 <__subdf3+0x7c4>
    fd4c:	1000c826 	beq	r2,zero,10070 <__subdf3+0x8b0>
    fd50:	2984b03a 	or	r2,r5,r6
    fd54:	103ebb26 	beq	r2,zero,f844 <__alt_data_end+0xfc00f844>
    fd58:	8989883a 	add	r4,r17,r6
    fd5c:	1945883a 	add	r2,r3,r5
    fd60:	2447803a 	cmpltu	r3,r4,r17
    fd64:	1887883a 	add	r3,r3,r2
    fd68:	1880202c 	andhi	r2,r3,128
    fd6c:	2023883a 	mov	r17,r4
    fd70:	103f1626 	beq	r2,zero,f9cc <__alt_data_end+0xfc00f9cc>
    fd74:	00bfe034 	movhi	r2,65408
    fd78:	10bfffc4 	addi	r2,r2,-1
    fd7c:	5021883a 	mov	r16,r10
    fd80:	1886703a 	and	r3,r3,r2
    fd84:	003eaf06 	br	f844 <__alt_data_end+0xfc00f844>
    fd88:	3825883a 	mov	r18,r7
    fd8c:	003f0f06 	br	f9cc <__alt_data_end+0xfc00f9cc>
    fd90:	1c44b03a 	or	r2,r3,r17
    fd94:	8000251e 	bne	r16,zero,fe2c <__subdf3+0x66c>
    fd98:	1000661e 	bne	r2,zero,ff34 <__subdf3+0x774>
    fd9c:	2990b03a 	or	r8,r5,r6
    fda0:	40009626 	beq	r8,zero,fffc <__subdf3+0x83c>
    fda4:	2807883a 	mov	r3,r5
    fda8:	3023883a 	mov	r17,r6
    fdac:	3825883a 	mov	r18,r7
    fdb0:	003ea406 	br	f844 <__alt_data_end+0xfc00f844>
    fdb4:	127ff804 	addi	r9,r2,-32
    fdb8:	01000804 	movi	r4,32
    fdbc:	2a52d83a 	srl	r9,r5,r9
    fdc0:	11008c26 	beq	r2,r4,fff4 <__subdf3+0x834>
    fdc4:	01001004 	movi	r4,64
    fdc8:	2085c83a 	sub	r2,r4,r2
    fdcc:	2884983a 	sll	r2,r5,r2
    fdd0:	118cb03a 	or	r6,r2,r6
    fdd4:	300cc03a 	cmpne	r6,r6,zero
    fdd8:	4992b03a 	or	r9,r9,r6
    fddc:	0005883a 	mov	r2,zero
    fde0:	003f1206 	br	fa2c <__alt_data_end+0xfc00fa2c>
    fde4:	0101ffc4 	movi	r4,2047
    fde8:	493f9c1e 	bne	r9,r4,fc5c <__alt_data_end+0xfc00fc5c>
    fdec:	2807883a 	mov	r3,r5
    fdf0:	3023883a 	mov	r17,r6
    fdf4:	4821883a 	mov	r16,r9
    fdf8:	3825883a 	mov	r18,r7
    fdfc:	003e9106 	br	f844 <__alt_data_end+0xfc00f844>
    fe00:	80001f1e 	bne	r16,zero,fe80 <__subdf3+0x6c0>
    fe04:	1c48b03a 	or	r4,r3,r17
    fe08:	20005a26 	beq	r4,zero,ff74 <__subdf3+0x7b4>
    fe0c:	0084303a 	nor	r2,zero,r2
    fe10:	1000561e 	bne	r2,zero,ff6c <__subdf3+0x7ac>
    fe14:	89a3883a 	add	r17,r17,r6
    fe18:	1945883a 	add	r2,r3,r5
    fe1c:	898d803a 	cmpltu	r6,r17,r6
    fe20:	3087883a 	add	r3,r6,r2
    fe24:	4821883a 	mov	r16,r9
    fe28:	003f0506 	br	fa40 <__alt_data_end+0xfc00fa40>
    fe2c:	10002b1e 	bne	r2,zero,fedc <__subdf3+0x71c>
    fe30:	2984b03a 	or	r2,r5,r6
    fe34:	10008026 	beq	r2,zero,10038 <__subdf3+0x878>
    fe38:	2807883a 	mov	r3,r5
    fe3c:	3023883a 	mov	r17,r6
    fe40:	3825883a 	mov	r18,r7
    fe44:	0401ffc4 	movi	r16,2047
    fe48:	003e7e06 	br	f844 <__alt_data_end+0xfc00f844>
    fe4c:	3809883a 	mov	r4,r7
    fe50:	0011883a 	mov	r8,zero
    fe54:	0005883a 	mov	r2,zero
    fe58:	003ee306 	br	f9e8 <__alt_data_end+0xfc00f9e8>
    fe5c:	1c62b03a 	or	r17,r3,r17
    fe60:	8822c03a 	cmpne	r17,r17,zero
    fe64:	0005883a 	mov	r2,zero
    fe68:	003f8906 	br	fc90 <__alt_data_end+0xfc00fc90>
    fe6c:	3809883a 	mov	r4,r7
    fe70:	4821883a 	mov	r16,r9
    fe74:	0011883a 	mov	r8,zero
    fe78:	0005883a 	mov	r2,zero
    fe7c:	003eda06 	br	f9e8 <__alt_data_end+0xfc00f9e8>
    fe80:	0101ffc4 	movi	r4,2047
    fe84:	49003b26 	beq	r9,r4,ff74 <__subdf3+0x7b4>
    fe88:	0085c83a 	sub	r2,zero,r2
    fe8c:	18c02034 	orhi	r3,r3,128
    fe90:	01000e04 	movi	r4,56
    fe94:	20806e16 	blt	r4,r2,10050 <__subdf3+0x890>
    fe98:	010007c4 	movi	r4,31
    fe9c:	20807716 	blt	r4,r2,1007c <__subdf3+0x8bc>
    fea0:	01000804 	movi	r4,32
    fea4:	2089c83a 	sub	r4,r4,r2
    fea8:	1914983a 	sll	r10,r3,r4
    feac:	8890d83a 	srl	r8,r17,r2
    feb0:	8908983a 	sll	r4,r17,r4
    feb4:	1884d83a 	srl	r2,r3,r2
    feb8:	5222b03a 	or	r17,r10,r8
    febc:	2006c03a 	cmpne	r3,r4,zero
    fec0:	88e2b03a 	or	r17,r17,r3
    fec4:	89a3883a 	add	r17,r17,r6
    fec8:	1145883a 	add	r2,r2,r5
    fecc:	898d803a 	cmpltu	r6,r17,r6
    fed0:	3087883a 	add	r3,r6,r2
    fed4:	4821883a 	mov	r16,r9
    fed8:	003ed906 	br	fa40 <__alt_data_end+0xfc00fa40>
    fedc:	2984b03a 	or	r2,r5,r6
    fee0:	10004226 	beq	r2,zero,ffec <__subdf3+0x82c>
    fee4:	1808d0fa 	srli	r4,r3,3
    fee8:	8822d0fa 	srli	r17,r17,3
    feec:	1806977a 	slli	r3,r3,29
    fef0:	2080022c 	andhi	r2,r4,8
    fef4:	1c62b03a 	or	r17,r3,r17
    fef8:	10000826 	beq	r2,zero,ff1c <__subdf3+0x75c>
    fefc:	2812d0fa 	srli	r9,r5,3
    ff00:	4880022c 	andhi	r2,r9,8
    ff04:	1000051e 	bne	r2,zero,ff1c <__subdf3+0x75c>
    ff08:	300cd0fa 	srli	r6,r6,3
    ff0c:	2804977a 	slli	r2,r5,29
    ff10:	4809883a 	mov	r4,r9
    ff14:	3825883a 	mov	r18,r7
    ff18:	11a2b03a 	or	r17,r2,r6
    ff1c:	8806d77a 	srli	r3,r17,29
    ff20:	200890fa 	slli	r4,r4,3
    ff24:	882290fa 	slli	r17,r17,3
    ff28:	0401ffc4 	movi	r16,2047
    ff2c:	1906b03a 	or	r3,r3,r4
    ff30:	003e4406 	br	f844 <__alt_data_end+0xfc00f844>
    ff34:	2984b03a 	or	r2,r5,r6
    ff38:	103e4226 	beq	r2,zero,f844 <__alt_data_end+0xfc00f844>
    ff3c:	8989c83a 	sub	r4,r17,r6
    ff40:	8911803a 	cmpltu	r8,r17,r4
    ff44:	1945c83a 	sub	r2,r3,r5
    ff48:	1205c83a 	sub	r2,r2,r8
    ff4c:	1200202c 	andhi	r8,r2,128
    ff50:	403e9a26 	beq	r8,zero,f9bc <__alt_data_end+0xfc00f9bc>
    ff54:	3463c83a 	sub	r17,r6,r17
    ff58:	28c5c83a 	sub	r2,r5,r3
    ff5c:	344d803a 	cmpltu	r6,r6,r17
    ff60:	1187c83a 	sub	r3,r2,r6
    ff64:	3825883a 	mov	r18,r7
    ff68:	003e3606 	br	f844 <__alt_data_end+0xfc00f844>
    ff6c:	0101ffc4 	movi	r4,2047
    ff70:	493fc71e 	bne	r9,r4,fe90 <__alt_data_end+0xfc00fe90>
    ff74:	2807883a 	mov	r3,r5
    ff78:	3023883a 	mov	r17,r6
    ff7c:	4821883a 	mov	r16,r9
    ff80:	003e3006 	br	f844 <__alt_data_end+0xfc00f844>
    ff84:	10003626 	beq	r2,zero,10060 <__subdf3+0x8a0>
    ff88:	2984b03a 	or	r2,r5,r6
    ff8c:	10001726 	beq	r2,zero,ffec <__subdf3+0x82c>
    ff90:	1808d0fa 	srli	r4,r3,3
    ff94:	8822d0fa 	srli	r17,r17,3
    ff98:	1806977a 	slli	r3,r3,29
    ff9c:	2080022c 	andhi	r2,r4,8
    ffa0:	1c62b03a 	or	r17,r3,r17
    ffa4:	10000726 	beq	r2,zero,ffc4 <__subdf3+0x804>
    ffa8:	2812d0fa 	srli	r9,r5,3
    ffac:	4880022c 	andhi	r2,r9,8
    ffb0:	1000041e 	bne	r2,zero,ffc4 <__subdf3+0x804>
    ffb4:	300cd0fa 	srli	r6,r6,3
    ffb8:	2804977a 	slli	r2,r5,29
    ffbc:	4809883a 	mov	r4,r9
    ffc0:	11a2b03a 	or	r17,r2,r6
    ffc4:	8806d77a 	srli	r3,r17,29
    ffc8:	200890fa 	slli	r4,r4,3
    ffcc:	882290fa 	slli	r17,r17,3
    ffd0:	3825883a 	mov	r18,r7
    ffd4:	1906b03a 	or	r3,r3,r4
    ffd8:	0401ffc4 	movi	r16,2047
    ffdc:	003e1906 	br	f844 <__alt_data_end+0xfc00f844>
    ffe0:	000b883a 	mov	r5,zero
    ffe4:	0005883a 	mov	r2,zero
    ffe8:	003e2e06 	br	f8a4 <__alt_data_end+0xfc00f8a4>
    ffec:	0401ffc4 	movi	r16,2047
    fff0:	003e1406 	br	f844 <__alt_data_end+0xfc00f844>
    fff4:	0005883a 	mov	r2,zero
    fff8:	003f7506 	br	fdd0 <__alt_data_end+0xfc00fdd0>
    fffc:	0005883a 	mov	r2,zero
   10000:	0009883a 	mov	r4,zero
   10004:	003e7806 	br	f9e8 <__alt_data_end+0xfc00f9e8>
   10008:	123ff804 	addi	r8,r2,-32
   1000c:	01000804 	movi	r4,32
   10010:	1a10d83a 	srl	r8,r3,r8
   10014:	11002526 	beq	r2,r4,100ac <__subdf3+0x8ec>
   10018:	01001004 	movi	r4,64
   1001c:	2085c83a 	sub	r2,r4,r2
   10020:	1884983a 	sll	r2,r3,r2
   10024:	1444b03a 	or	r2,r2,r17
   10028:	1004c03a 	cmpne	r2,r2,zero
   1002c:	40a2b03a 	or	r17,r8,r2
   10030:	0005883a 	mov	r2,zero
   10034:	003f1606 	br	fc90 <__alt_data_end+0xfc00fc90>
   10038:	02000434 	movhi	r8,16
   1003c:	0009883a 	mov	r4,zero
   10040:	423fffc4 	addi	r8,r8,-1
   10044:	00bfffc4 	movi	r2,-1
   10048:	0401ffc4 	movi	r16,2047
   1004c:	003e6606 	br	f9e8 <__alt_data_end+0xfc00f9e8>
   10050:	1c62b03a 	or	r17,r3,r17
   10054:	8822c03a 	cmpne	r17,r17,zero
   10058:	0005883a 	mov	r2,zero
   1005c:	003f9906 	br	fec4 <__alt_data_end+0xfc00fec4>
   10060:	2807883a 	mov	r3,r5
   10064:	3023883a 	mov	r17,r6
   10068:	0401ffc4 	movi	r16,2047
   1006c:	003df506 	br	f844 <__alt_data_end+0xfc00f844>
   10070:	2807883a 	mov	r3,r5
   10074:	3023883a 	mov	r17,r6
   10078:	003df206 	br	f844 <__alt_data_end+0xfc00f844>
   1007c:	123ff804 	addi	r8,r2,-32
   10080:	01000804 	movi	r4,32
   10084:	1a10d83a 	srl	r8,r3,r8
   10088:	11000a26 	beq	r2,r4,100b4 <__subdf3+0x8f4>
   1008c:	01001004 	movi	r4,64
   10090:	2085c83a 	sub	r2,r4,r2
   10094:	1884983a 	sll	r2,r3,r2
   10098:	1444b03a 	or	r2,r2,r17
   1009c:	1004c03a 	cmpne	r2,r2,zero
   100a0:	40a2b03a 	or	r17,r8,r2
   100a4:	0005883a 	mov	r2,zero
   100a8:	003f8606 	br	fec4 <__alt_data_end+0xfc00fec4>
   100ac:	0005883a 	mov	r2,zero
   100b0:	003fdc06 	br	10024 <__alt_data_end+0xfc010024>
   100b4:	0005883a 	mov	r2,zero
   100b8:	003ff706 	br	10098 <__alt_data_end+0xfc010098>

000100bc <__fixdfsi>:
   100bc:	280cd53a 	srli	r6,r5,20
   100c0:	00c00434 	movhi	r3,16
   100c4:	18ffffc4 	addi	r3,r3,-1
   100c8:	3181ffcc 	andi	r6,r6,2047
   100cc:	01c0ff84 	movi	r7,1022
   100d0:	28c6703a 	and	r3,r5,r3
   100d4:	280ad7fa 	srli	r5,r5,31
   100d8:	3980120e 	bge	r7,r6,10124 <__fixdfsi+0x68>
   100dc:	00810744 	movi	r2,1053
   100e0:	11800c16 	blt	r2,r6,10114 <__fixdfsi+0x58>
   100e4:	00810cc4 	movi	r2,1075
   100e8:	1185c83a 	sub	r2,r2,r6
   100ec:	01c007c4 	movi	r7,31
   100f0:	18c00434 	orhi	r3,r3,16
   100f4:	38800d16 	blt	r7,r2,1012c <__fixdfsi+0x70>
   100f8:	31befb44 	addi	r6,r6,-1043
   100fc:	2084d83a 	srl	r2,r4,r2
   10100:	1986983a 	sll	r3,r3,r6
   10104:	1884b03a 	or	r2,r3,r2
   10108:	28000726 	beq	r5,zero,10128 <__fixdfsi+0x6c>
   1010c:	0085c83a 	sub	r2,zero,r2
   10110:	f800283a 	ret
   10114:	00a00034 	movhi	r2,32768
   10118:	10bfffc4 	addi	r2,r2,-1
   1011c:	2885883a 	add	r2,r5,r2
   10120:	f800283a 	ret
   10124:	0005883a 	mov	r2,zero
   10128:	f800283a 	ret
   1012c:	008104c4 	movi	r2,1043
   10130:	1185c83a 	sub	r2,r2,r6
   10134:	1884d83a 	srl	r2,r3,r2
   10138:	003ff306 	br	10108 <__alt_data_end+0xfc010108>

0001013c <__floatsidf>:
   1013c:	defffd04 	addi	sp,sp,-12
   10140:	dfc00215 	stw	ra,8(sp)
   10144:	dc400115 	stw	r17,4(sp)
   10148:	dc000015 	stw	r16,0(sp)
   1014c:	20002b26 	beq	r4,zero,101fc <__floatsidf+0xc0>
   10150:	2023883a 	mov	r17,r4
   10154:	2020d7fa 	srli	r16,r4,31
   10158:	20002d16 	blt	r4,zero,10210 <__floatsidf+0xd4>
   1015c:	8809883a 	mov	r4,r17
   10160:	00102c00 	call	102c0 <__clzsi2>
   10164:	01410784 	movi	r5,1054
   10168:	288bc83a 	sub	r5,r5,r2
   1016c:	01010cc4 	movi	r4,1075
   10170:	2149c83a 	sub	r4,r4,r5
   10174:	00c007c4 	movi	r3,31
   10178:	1900160e 	bge	r3,r4,101d4 <__floatsidf+0x98>
   1017c:	00c104c4 	movi	r3,1043
   10180:	1947c83a 	sub	r3,r3,r5
   10184:	88c6983a 	sll	r3,r17,r3
   10188:	00800434 	movhi	r2,16
   1018c:	10bfffc4 	addi	r2,r2,-1
   10190:	1886703a 	and	r3,r3,r2
   10194:	2941ffcc 	andi	r5,r5,2047
   10198:	800d883a 	mov	r6,r16
   1019c:	0005883a 	mov	r2,zero
   101a0:	280a953a 	slli	r5,r5,20
   101a4:	31803fcc 	andi	r6,r6,255
   101a8:	01000434 	movhi	r4,16
   101ac:	300c97fa 	slli	r6,r6,31
   101b0:	213fffc4 	addi	r4,r4,-1
   101b4:	1906703a 	and	r3,r3,r4
   101b8:	1946b03a 	or	r3,r3,r5
   101bc:	1986b03a 	or	r3,r3,r6
   101c0:	dfc00217 	ldw	ra,8(sp)
   101c4:	dc400117 	ldw	r17,4(sp)
   101c8:	dc000017 	ldw	r16,0(sp)
   101cc:	dec00304 	addi	sp,sp,12
   101d0:	f800283a 	ret
   101d4:	00c002c4 	movi	r3,11
   101d8:	1887c83a 	sub	r3,r3,r2
   101dc:	88c6d83a 	srl	r3,r17,r3
   101e0:	8904983a 	sll	r2,r17,r4
   101e4:	01000434 	movhi	r4,16
   101e8:	213fffc4 	addi	r4,r4,-1
   101ec:	2941ffcc 	andi	r5,r5,2047
   101f0:	1906703a 	and	r3,r3,r4
   101f4:	800d883a 	mov	r6,r16
   101f8:	003fe906 	br	101a0 <__alt_data_end+0xfc0101a0>
   101fc:	000d883a 	mov	r6,zero
   10200:	000b883a 	mov	r5,zero
   10204:	0007883a 	mov	r3,zero
   10208:	0005883a 	mov	r2,zero
   1020c:	003fe406 	br	101a0 <__alt_data_end+0xfc0101a0>
   10210:	0123c83a 	sub	r17,zero,r4
   10214:	003fd106 	br	1015c <__alt_data_end+0xfc01015c>

00010218 <__floatunsidf>:
   10218:	defffe04 	addi	sp,sp,-8
   1021c:	dc000015 	stw	r16,0(sp)
   10220:	dfc00115 	stw	ra,4(sp)
   10224:	2021883a 	mov	r16,r4
   10228:	20002226 	beq	r4,zero,102b4 <__floatunsidf+0x9c>
   1022c:	00102c00 	call	102c0 <__clzsi2>
   10230:	01010784 	movi	r4,1054
   10234:	2089c83a 	sub	r4,r4,r2
   10238:	01810cc4 	movi	r6,1075
   1023c:	310dc83a 	sub	r6,r6,r4
   10240:	00c007c4 	movi	r3,31
   10244:	1980120e 	bge	r3,r6,10290 <__floatunsidf+0x78>
   10248:	00c104c4 	movi	r3,1043
   1024c:	1907c83a 	sub	r3,r3,r4
   10250:	80ca983a 	sll	r5,r16,r3
   10254:	00800434 	movhi	r2,16
   10258:	10bfffc4 	addi	r2,r2,-1
   1025c:	2101ffcc 	andi	r4,r4,2047
   10260:	0021883a 	mov	r16,zero
   10264:	288a703a 	and	r5,r5,r2
   10268:	2008953a 	slli	r4,r4,20
   1026c:	00c00434 	movhi	r3,16
   10270:	18ffffc4 	addi	r3,r3,-1
   10274:	28c6703a 	and	r3,r5,r3
   10278:	8005883a 	mov	r2,r16
   1027c:	1906b03a 	or	r3,r3,r4
   10280:	dfc00117 	ldw	ra,4(sp)
   10284:	dc000017 	ldw	r16,0(sp)
   10288:	dec00204 	addi	sp,sp,8
   1028c:	f800283a 	ret
   10290:	00c002c4 	movi	r3,11
   10294:	188bc83a 	sub	r5,r3,r2
   10298:	814ad83a 	srl	r5,r16,r5
   1029c:	00c00434 	movhi	r3,16
   102a0:	18ffffc4 	addi	r3,r3,-1
   102a4:	81a0983a 	sll	r16,r16,r6
   102a8:	2101ffcc 	andi	r4,r4,2047
   102ac:	28ca703a 	and	r5,r5,r3
   102b0:	003fed06 	br	10268 <__alt_data_end+0xfc010268>
   102b4:	0009883a 	mov	r4,zero
   102b8:	000b883a 	mov	r5,zero
   102bc:	003fea06 	br	10268 <__alt_data_end+0xfc010268>

000102c0 <__clzsi2>:
   102c0:	00bfffd4 	movui	r2,65535
   102c4:	11000536 	bltu	r2,r4,102dc <__clzsi2+0x1c>
   102c8:	00803fc4 	movi	r2,255
   102cc:	11000f36 	bltu	r2,r4,1030c <__clzsi2+0x4c>
   102d0:	00800804 	movi	r2,32
   102d4:	0007883a 	mov	r3,zero
   102d8:	00000506 	br	102f0 <__clzsi2+0x30>
   102dc:	00804034 	movhi	r2,256
   102e0:	10bfffc4 	addi	r2,r2,-1
   102e4:	11000c2e 	bgeu	r2,r4,10318 <__clzsi2+0x58>
   102e8:	00800204 	movi	r2,8
   102ec:	00c00604 	movi	r3,24
   102f0:	20c8d83a 	srl	r4,r4,r3
   102f4:	00c00074 	movhi	r3,1
   102f8:	18d4a704 	addi	r3,r3,21148
   102fc:	1909883a 	add	r4,r3,r4
   10300:	20c00003 	ldbu	r3,0(r4)
   10304:	10c5c83a 	sub	r2,r2,r3
   10308:	f800283a 	ret
   1030c:	00800604 	movi	r2,24
   10310:	00c00204 	movi	r3,8
   10314:	003ff606 	br	102f0 <__alt_data_end+0xfc0102f0>
   10318:	00800404 	movi	r2,16
   1031c:	1007883a 	mov	r3,r2
   10320:	003ff306 	br	102f0 <__alt_data_end+0xfc0102f0>

00010324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10324:	defffe04 	addi	sp,sp,-8
   10328:	dfc00115 	stw	ra,4(sp)
   1032c:	df000015 	stw	fp,0(sp)
   10330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10334:	d0a00f17 	ldw	r2,-32708(gp)
   10338:	10000326 	beq	r2,zero,10348 <alt_get_errno+0x24>
   1033c:	d0a00f17 	ldw	r2,-32708(gp)
   10340:	103ee83a 	callr	r2
   10344:	00000106 	br	1034c <alt_get_errno+0x28>
   10348:	d0a6fd04 	addi	r2,gp,-25612
}
   1034c:	e037883a 	mov	sp,fp
   10350:	dfc00117 	ldw	ra,4(sp)
   10354:	df000017 	ldw	fp,0(sp)
   10358:	dec00204 	addi	sp,sp,8
   1035c:	f800283a 	ret

00010360 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10360:	defffb04 	addi	sp,sp,-20
   10364:	dfc00415 	stw	ra,16(sp)
   10368:	df000315 	stw	fp,12(sp)
   1036c:	df000304 	addi	fp,sp,12
   10370:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	10000816 	blt	r2,zero,1039c <close+0x3c>
   1037c:	01400304 	movi	r5,12
   10380:	e13fff17 	ldw	r4,-4(fp)
   10384:	00034100 	call	3410 <__mulsi3>
   10388:	1007883a 	mov	r3,r2
   1038c:	00800074 	movhi	r2,1
   10390:	10973e04 	addi	r2,r2,23800
   10394:	1885883a 	add	r2,r3,r2
   10398:	00000106 	br	103a0 <close+0x40>
   1039c:	0005883a 	mov	r2,zero
   103a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   103a4:	e0bffd17 	ldw	r2,-12(fp)
   103a8:	10001926 	beq	r2,zero,10410 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   103ac:	e0bffd17 	ldw	r2,-12(fp)
   103b0:	10800017 	ldw	r2,0(r2)
   103b4:	10800417 	ldw	r2,16(r2)
   103b8:	10000626 	beq	r2,zero,103d4 <close+0x74>
   103bc:	e0bffd17 	ldw	r2,-12(fp)
   103c0:	10800017 	ldw	r2,0(r2)
   103c4:	10800417 	ldw	r2,16(r2)
   103c8:	e13ffd17 	ldw	r4,-12(fp)
   103cc:	103ee83a 	callr	r2
   103d0:	00000106 	br	103d8 <close+0x78>
   103d4:	0005883a 	mov	r2,zero
   103d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   103dc:	e13fff17 	ldw	r4,-4(fp)
   103e0:	0010a480 	call	10a48 <alt_release_fd>
    if (rval < 0)
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	1000070e 	bge	r2,zero,10408 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   103ec:	00103240 	call	10324 <alt_get_errno>
   103f0:	1007883a 	mov	r3,r2
   103f4:	e0bffe17 	ldw	r2,-8(fp)
   103f8:	0085c83a 	sub	r2,zero,r2
   103fc:	18800015 	stw	r2,0(r3)
      return -1;
   10400:	00bfffc4 	movi	r2,-1
   10404:	00000706 	br	10424 <close+0xc4>
    }
    return 0;
   10408:	0005883a 	mov	r2,zero
   1040c:	00000506 	br	10424 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10410:	00103240 	call	10324 <alt_get_errno>
   10414:	1007883a 	mov	r3,r2
   10418:	00801444 	movi	r2,81
   1041c:	18800015 	stw	r2,0(r3)
    return -1;
   10420:	00bfffc4 	movi	r2,-1
  }
}
   10424:	e037883a 	mov	sp,fp
   10428:	dfc00117 	ldw	ra,4(sp)
   1042c:	df000017 	ldw	fp,0(sp)
   10430:	dec00204 	addi	sp,sp,8
   10434:	f800283a 	ret

00010438 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10438:	defffc04 	addi	sp,sp,-16
   1043c:	df000315 	stw	fp,12(sp)
   10440:	df000304 	addi	fp,sp,12
   10444:	e13ffd15 	stw	r4,-12(fp)
   10448:	e17ffe15 	stw	r5,-8(fp)
   1044c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10450:	e0bfff17 	ldw	r2,-4(fp)
}
   10454:	e037883a 	mov	sp,fp
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00104 	addi	sp,sp,4
   10460:	f800283a 	ret

00010464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10464:	defffe04 	addi	sp,sp,-8
   10468:	dfc00115 	stw	ra,4(sp)
   1046c:	df000015 	stw	fp,0(sp)
   10470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10474:	d0a00f17 	ldw	r2,-32708(gp)
   10478:	10000326 	beq	r2,zero,10488 <alt_get_errno+0x24>
   1047c:	d0a00f17 	ldw	r2,-32708(gp)
   10480:	103ee83a 	callr	r2
   10484:	00000106 	br	1048c <alt_get_errno+0x28>
   10488:	d0a6fd04 	addi	r2,gp,-25612
}
   1048c:	e037883a 	mov	sp,fp
   10490:	dfc00117 	ldw	ra,4(sp)
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00204 	addi	sp,sp,8
   1049c:	f800283a 	ret

000104a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   104a0:	defffb04 	addi	sp,sp,-20
   104a4:	dfc00415 	stw	ra,16(sp)
   104a8:	df000315 	stw	fp,12(sp)
   104ac:	df000304 	addi	fp,sp,12
   104b0:	e13ffe15 	stw	r4,-8(fp)
   104b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   104b8:	e0bffe17 	ldw	r2,-8(fp)
   104bc:	10000816 	blt	r2,zero,104e0 <fstat+0x40>
   104c0:	01400304 	movi	r5,12
   104c4:	e13ffe17 	ldw	r4,-8(fp)
   104c8:	00034100 	call	3410 <__mulsi3>
   104cc:	1007883a 	mov	r3,r2
   104d0:	00800074 	movhi	r2,1
   104d4:	10973e04 	addi	r2,r2,23800
   104d8:	1885883a 	add	r2,r3,r2
   104dc:	00000106 	br	104e4 <fstat+0x44>
   104e0:	0005883a 	mov	r2,zero
   104e4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   104e8:	e0bffd17 	ldw	r2,-12(fp)
   104ec:	10001026 	beq	r2,zero,10530 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   104f0:	e0bffd17 	ldw	r2,-12(fp)
   104f4:	10800017 	ldw	r2,0(r2)
   104f8:	10800817 	ldw	r2,32(r2)
   104fc:	10000726 	beq	r2,zero,1051c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   10500:	e0bffd17 	ldw	r2,-12(fp)
   10504:	10800017 	ldw	r2,0(r2)
   10508:	10800817 	ldw	r2,32(r2)
   1050c:	e17fff17 	ldw	r5,-4(fp)
   10510:	e13ffd17 	ldw	r4,-12(fp)
   10514:	103ee83a 	callr	r2
   10518:	00000a06 	br	10544 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1051c:	e0bfff17 	ldw	r2,-4(fp)
   10520:	00c80004 	movi	r3,8192
   10524:	10c00115 	stw	r3,4(r2)
      return 0;
   10528:	0005883a 	mov	r2,zero
   1052c:	00000506 	br	10544 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10530:	00104640 	call	10464 <alt_get_errno>
   10534:	1007883a 	mov	r3,r2
   10538:	00801444 	movi	r2,81
   1053c:	18800015 	stw	r2,0(r3)
    return -1;
   10540:	00bfffc4 	movi	r2,-1
  }
}
   10544:	e037883a 	mov	sp,fp
   10548:	dfc00117 	ldw	ra,4(sp)
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00204 	addi	sp,sp,8
   10554:	f800283a 	ret

00010558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10558:	defffe04 	addi	sp,sp,-8
   1055c:	dfc00115 	stw	ra,4(sp)
   10560:	df000015 	stw	fp,0(sp)
   10564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10568:	d0a00f17 	ldw	r2,-32708(gp)
   1056c:	10000326 	beq	r2,zero,1057c <alt_get_errno+0x24>
   10570:	d0a00f17 	ldw	r2,-32708(gp)
   10574:	103ee83a 	callr	r2
   10578:	00000106 	br	10580 <alt_get_errno+0x28>
   1057c:	d0a6fd04 	addi	r2,gp,-25612
}
   10580:	e037883a 	mov	sp,fp
   10584:	dfc00117 	ldw	ra,4(sp)
   10588:	df000017 	ldw	fp,0(sp)
   1058c:	dec00204 	addi	sp,sp,8
   10590:	f800283a 	ret

00010594 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10594:	deffed04 	addi	sp,sp,-76
   10598:	dfc01215 	stw	ra,72(sp)
   1059c:	df001115 	stw	fp,68(sp)
   105a0:	df001104 	addi	fp,sp,68
   105a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   105a8:	e0bfff17 	ldw	r2,-4(fp)
   105ac:	10000816 	blt	r2,zero,105d0 <isatty+0x3c>
   105b0:	01400304 	movi	r5,12
   105b4:	e13fff17 	ldw	r4,-4(fp)
   105b8:	00034100 	call	3410 <__mulsi3>
   105bc:	1007883a 	mov	r3,r2
   105c0:	00800074 	movhi	r2,1
   105c4:	10973e04 	addi	r2,r2,23800
   105c8:	1885883a 	add	r2,r3,r2
   105cc:	00000106 	br	105d4 <isatty+0x40>
   105d0:	0005883a 	mov	r2,zero
   105d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   105d8:	e0bfef17 	ldw	r2,-68(fp)
   105dc:	10000e26 	beq	r2,zero,10618 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   105e0:	e0bfef17 	ldw	r2,-68(fp)
   105e4:	10800017 	ldw	r2,0(r2)
   105e8:	10800817 	ldw	r2,32(r2)
   105ec:	1000021e 	bne	r2,zero,105f8 <isatty+0x64>
    {
      return 1;
   105f0:	00800044 	movi	r2,1
   105f4:	00000d06 	br	1062c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   105f8:	e0bff004 	addi	r2,fp,-64
   105fc:	100b883a 	mov	r5,r2
   10600:	e13fff17 	ldw	r4,-4(fp)
   10604:	00104a00 	call	104a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10608:	e0bff117 	ldw	r2,-60(fp)
   1060c:	10880020 	cmpeqi	r2,r2,8192
   10610:	10803fcc 	andi	r2,r2,255
   10614:	00000506 	br	1062c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10618:	00105580 	call	10558 <alt_get_errno>
   1061c:	1007883a 	mov	r3,r2
   10620:	00801444 	movi	r2,81
   10624:	18800015 	stw	r2,0(r3)
    return 0;
   10628:	0005883a 	mov	r2,zero
  }
}
   1062c:	e037883a 	mov	sp,fp
   10630:	dfc00117 	ldw	ra,4(sp)
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00204 	addi	sp,sp,8
   1063c:	f800283a 	ret

00010640 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10640:	defffc04 	addi	sp,sp,-16
   10644:	df000315 	stw	fp,12(sp)
   10648:	df000304 	addi	fp,sp,12
   1064c:	e13ffd15 	stw	r4,-12(fp)
   10650:	e17ffe15 	stw	r5,-8(fp)
   10654:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10658:	e0fffe17 	ldw	r3,-8(fp)
   1065c:	e0bffd17 	ldw	r2,-12(fp)
   10660:	18800c26 	beq	r3,r2,10694 <alt_load_section+0x54>
  {
    while( to != end )
   10664:	00000806 	br	10688 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10668:	e0bffe17 	ldw	r2,-8(fp)
   1066c:	10c00104 	addi	r3,r2,4
   10670:	e0fffe15 	stw	r3,-8(fp)
   10674:	e0fffd17 	ldw	r3,-12(fp)
   10678:	19000104 	addi	r4,r3,4
   1067c:	e13ffd15 	stw	r4,-12(fp)
   10680:	18c00017 	ldw	r3,0(r3)
   10684:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10688:	e0fffe17 	ldw	r3,-8(fp)
   1068c:	e0bfff17 	ldw	r2,-4(fp)
   10690:	18bff51e 	bne	r3,r2,10668 <__alt_data_end+0xfc010668>
    {
      *to++ = *from++;
    }
  }
}
   10694:	0001883a 	nop
   10698:	e037883a 	mov	sp,fp
   1069c:	df000017 	ldw	fp,0(sp)
   106a0:	dec00104 	addi	sp,sp,4
   106a4:	f800283a 	ret

000106a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   106a8:	defffe04 	addi	sp,sp,-8
   106ac:	dfc00115 	stw	ra,4(sp)
   106b0:	df000015 	stw	fp,0(sp)
   106b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   106b8:	01800074 	movhi	r6,1
   106bc:	319bda04 	addi	r6,r6,28520
   106c0:	01400074 	movhi	r5,1
   106c4:	2954ff04 	addi	r5,r5,21500
   106c8:	01000074 	movhi	r4,1
   106cc:	211bda04 	addi	r4,r4,28520
   106d0:	00106400 	call	10640 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   106d4:	01800034 	movhi	r6,0
   106d8:	31808c04 	addi	r6,r6,560
   106dc:	01400034 	movhi	r5,0
   106e0:	29400804 	addi	r5,r5,32
   106e4:	01000034 	movhi	r4,0
   106e8:	21000804 	addi	r4,r4,32
   106ec:	00106400 	call	10640 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   106f0:	01800074 	movhi	r6,1
   106f4:	3194ff04 	addi	r6,r6,21500
   106f8:	01400074 	movhi	r5,1
   106fc:	29533704 	addi	r5,r5,19676
   10700:	01000074 	movhi	r4,1
   10704:	21133704 	addi	r4,r4,19676
   10708:	00106400 	call	10640 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1070c:	0013b600 	call	13b60 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10710:	0013db00 	call	13db0 <alt_icache_flush_all>
}
   10714:	0001883a 	nop
   10718:	e037883a 	mov	sp,fp
   1071c:	dfc00117 	ldw	ra,4(sp)
   10720:	df000017 	ldw	fp,0(sp)
   10724:	dec00204 	addi	sp,sp,8
   10728:	f800283a 	ret

0001072c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1072c:	defffe04 	addi	sp,sp,-8
   10730:	dfc00115 	stw	ra,4(sp)
   10734:	df000015 	stw	fp,0(sp)
   10738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1073c:	d0a00f17 	ldw	r2,-32708(gp)
   10740:	10000326 	beq	r2,zero,10750 <alt_get_errno+0x24>
   10744:	d0a00f17 	ldw	r2,-32708(gp)
   10748:	103ee83a 	callr	r2
   1074c:	00000106 	br	10754 <alt_get_errno+0x28>
   10750:	d0a6fd04 	addi	r2,gp,-25612
}
   10754:	e037883a 	mov	sp,fp
   10758:	dfc00117 	ldw	ra,4(sp)
   1075c:	df000017 	ldw	fp,0(sp)
   10760:	dec00204 	addi	sp,sp,8
   10764:	f800283a 	ret

00010768 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10768:	defff904 	addi	sp,sp,-28
   1076c:	dfc00615 	stw	ra,24(sp)
   10770:	df000515 	stw	fp,20(sp)
   10774:	df000504 	addi	fp,sp,20
   10778:	e13ffd15 	stw	r4,-12(fp)
   1077c:	e17ffe15 	stw	r5,-8(fp)
   10780:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10784:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	10000816 	blt	r2,zero,107b0 <lseek+0x48>
   10790:	01400304 	movi	r5,12
   10794:	e13ffd17 	ldw	r4,-12(fp)
   10798:	00034100 	call	3410 <__mulsi3>
   1079c:	1007883a 	mov	r3,r2
   107a0:	00800074 	movhi	r2,1
   107a4:	10973e04 	addi	r2,r2,23800
   107a8:	1885883a 	add	r2,r3,r2
   107ac:	00000106 	br	107b4 <lseek+0x4c>
   107b0:	0005883a 	mov	r2,zero
   107b4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   107b8:	e0bffc17 	ldw	r2,-16(fp)
   107bc:	10001026 	beq	r2,zero,10800 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	10800017 	ldw	r2,0(r2)
   107c8:	10800717 	ldw	r2,28(r2)
   107cc:	10000926 	beq	r2,zero,107f4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   107d0:	e0bffc17 	ldw	r2,-16(fp)
   107d4:	10800017 	ldw	r2,0(r2)
   107d8:	10800717 	ldw	r2,28(r2)
   107dc:	e1bfff17 	ldw	r6,-4(fp)
   107e0:	e17ffe17 	ldw	r5,-8(fp)
   107e4:	e13ffc17 	ldw	r4,-16(fp)
   107e8:	103ee83a 	callr	r2
   107ec:	e0bffb15 	stw	r2,-20(fp)
   107f0:	00000506 	br	10808 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   107f4:	00bfde84 	movi	r2,-134
   107f8:	e0bffb15 	stw	r2,-20(fp)
   107fc:	00000206 	br	10808 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10800:	00bfebc4 	movi	r2,-81
   10804:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10808:	e0bffb17 	ldw	r2,-20(fp)
   1080c:	1000070e 	bge	r2,zero,1082c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   10810:	001072c0 	call	1072c <alt_get_errno>
   10814:	1007883a 	mov	r3,r2
   10818:	e0bffb17 	ldw	r2,-20(fp)
   1081c:	0085c83a 	sub	r2,zero,r2
   10820:	18800015 	stw	r2,0(r3)
    rc = -1;
   10824:	00bfffc4 	movi	r2,-1
   10828:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1082c:	e0bffb17 	ldw	r2,-20(fp)
}
   10830:	e037883a 	mov	sp,fp
   10834:	dfc00117 	ldw	ra,4(sp)
   10838:	df000017 	ldw	fp,0(sp)
   1083c:	dec00204 	addi	sp,sp,8
   10840:	f800283a 	ret

00010844 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10844:	defffd04 	addi	sp,sp,-12
   10848:	dfc00215 	stw	ra,8(sp)
   1084c:	df000115 	stw	fp,4(sp)
   10850:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10854:	0009883a 	mov	r4,zero
   10858:	0010ec00 	call	10ec0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1085c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10860:	0010ef80 	call	10ef8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10864:	01800074 	movhi	r6,1
   10868:	3194ea04 	addi	r6,r6,21416
   1086c:	01400074 	movhi	r5,1
   10870:	2954ea04 	addi	r5,r5,21416
   10874:	01000074 	movhi	r4,1
   10878:	2114ea04 	addi	r4,r4,21416
   1087c:	00141540 	call	14154 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10880:	0013c600 	call	13c60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10884:	01000074 	movhi	r4,1
   10888:	210f3004 	addi	r4,r4,15552
   1088c:	00149480 	call	14948 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10890:	d0a6fe17 	ldw	r2,-25608(gp)
   10894:	d0e6ff17 	ldw	r3,-25604(gp)
   10898:	d1270017 	ldw	r4,-25600(gp)
   1089c:	200d883a 	mov	r6,r4
   108a0:	180b883a 	mov	r5,r3
   108a4:	1009883a 	mov	r4,r2
   108a8:	0000d180 	call	d18 <main>
   108ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   108b0:	01000044 	movi	r4,1
   108b4:	00103600 	call	10360 <close>
  exit (result);
   108b8:	e13fff17 	ldw	r4,-4(fp)
   108bc:	001495c0 	call	1495c <exit>

000108c0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   108c0:	defffe04 	addi	sp,sp,-8
   108c4:	df000115 	stw	fp,4(sp)
   108c8:	df000104 	addi	fp,sp,4
   108cc:	e13fff15 	stw	r4,-4(fp)
}
   108d0:	0001883a 	nop
   108d4:	e037883a 	mov	sp,fp
   108d8:	df000017 	ldw	fp,0(sp)
   108dc:	dec00104 	addi	sp,sp,4
   108e0:	f800283a 	ret

000108e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   108e4:	defffe04 	addi	sp,sp,-8
   108e8:	df000115 	stw	fp,4(sp)
   108ec:	df000104 	addi	fp,sp,4
   108f0:	e13fff15 	stw	r4,-4(fp)
}
   108f4:	0001883a 	nop
   108f8:	e037883a 	mov	sp,fp
   108fc:	df000017 	ldw	fp,0(sp)
   10900:	dec00104 	addi	sp,sp,4
   10904:	f800283a 	ret

00010908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10908:	defffe04 	addi	sp,sp,-8
   1090c:	dfc00115 	stw	ra,4(sp)
   10910:	df000015 	stw	fp,0(sp)
   10914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10918:	d0a00f17 	ldw	r2,-32708(gp)
   1091c:	10000326 	beq	r2,zero,1092c <alt_get_errno+0x24>
   10920:	d0a00f17 	ldw	r2,-32708(gp)
   10924:	103ee83a 	callr	r2
   10928:	00000106 	br	10930 <alt_get_errno+0x28>
   1092c:	d0a6fd04 	addi	r2,gp,-25612
}
   10930:	e037883a 	mov	sp,fp
   10934:	dfc00117 	ldw	ra,4(sp)
   10938:	df000017 	ldw	fp,0(sp)
   1093c:	dec00204 	addi	sp,sp,8
   10940:	f800283a 	ret

00010944 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10944:	defff904 	addi	sp,sp,-28
   10948:	dfc00615 	stw	ra,24(sp)
   1094c:	df000515 	stw	fp,20(sp)
   10950:	df000504 	addi	fp,sp,20
   10954:	e13ffd15 	stw	r4,-12(fp)
   10958:	e17ffe15 	stw	r5,-8(fp)
   1095c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10960:	e0bffd17 	ldw	r2,-12(fp)
   10964:	10000816 	blt	r2,zero,10988 <read+0x44>
   10968:	01400304 	movi	r5,12
   1096c:	e13ffd17 	ldw	r4,-12(fp)
   10970:	00034100 	call	3410 <__mulsi3>
   10974:	1007883a 	mov	r3,r2
   10978:	00800074 	movhi	r2,1
   1097c:	10973e04 	addi	r2,r2,23800
   10980:	1885883a 	add	r2,r3,r2
   10984:	00000106 	br	1098c <read+0x48>
   10988:	0005883a 	mov	r2,zero
   1098c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10990:	e0bffb17 	ldw	r2,-20(fp)
   10994:	10002226 	beq	r2,zero,10a20 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10998:	e0bffb17 	ldw	r2,-20(fp)
   1099c:	10800217 	ldw	r2,8(r2)
   109a0:	108000cc 	andi	r2,r2,3
   109a4:	10800060 	cmpeqi	r2,r2,1
   109a8:	1000181e 	bne	r2,zero,10a0c <read+0xc8>
        (fd->dev->read))
   109ac:	e0bffb17 	ldw	r2,-20(fp)
   109b0:	10800017 	ldw	r2,0(r2)
   109b4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   109b8:	10001426 	beq	r2,zero,10a0c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   109bc:	e0bffb17 	ldw	r2,-20(fp)
   109c0:	10800017 	ldw	r2,0(r2)
   109c4:	10800517 	ldw	r2,20(r2)
   109c8:	e0ffff17 	ldw	r3,-4(fp)
   109cc:	180d883a 	mov	r6,r3
   109d0:	e17ffe17 	ldw	r5,-8(fp)
   109d4:	e13ffb17 	ldw	r4,-20(fp)
   109d8:	103ee83a 	callr	r2
   109dc:	e0bffc15 	stw	r2,-16(fp)
   109e0:	e0bffc17 	ldw	r2,-16(fp)
   109e4:	1000070e 	bge	r2,zero,10a04 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   109e8:	00109080 	call	10908 <alt_get_errno>
   109ec:	1007883a 	mov	r3,r2
   109f0:	e0bffc17 	ldw	r2,-16(fp)
   109f4:	0085c83a 	sub	r2,zero,r2
   109f8:	18800015 	stw	r2,0(r3)
          return -1;
   109fc:	00bfffc4 	movi	r2,-1
   10a00:	00000c06 	br	10a34 <read+0xf0>
        }
        return rval;
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	00000a06 	br	10a34 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10a0c:	00109080 	call	10908 <alt_get_errno>
   10a10:	1007883a 	mov	r3,r2
   10a14:	00800344 	movi	r2,13
   10a18:	18800015 	stw	r2,0(r3)
   10a1c:	00000406 	br	10a30 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10a20:	00109080 	call	10908 <alt_get_errno>
   10a24:	1007883a 	mov	r3,r2
   10a28:	00801444 	movi	r2,81
   10a2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10a30:	00bfffc4 	movi	r2,-1
}
   10a34:	e037883a 	mov	sp,fp
   10a38:	dfc00117 	ldw	ra,4(sp)
   10a3c:	df000017 	ldw	fp,0(sp)
   10a40:	dec00204 	addi	sp,sp,8
   10a44:	f800283a 	ret

00010a48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10a48:	defffc04 	addi	sp,sp,-16
   10a4c:	dfc00315 	stw	ra,12(sp)
   10a50:	df000215 	stw	fp,8(sp)
   10a54:	dc000115 	stw	r16,4(sp)
   10a58:	df000204 	addi	fp,sp,8
   10a5c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10a60:	e0bffe17 	ldw	r2,-8(fp)
   10a64:	108000d0 	cmplti	r2,r2,3
   10a68:	1000111e 	bne	r2,zero,10ab0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10a6c:	04000074 	movhi	r16,1
   10a70:	84173e04 	addi	r16,r16,23800
   10a74:	e0bffe17 	ldw	r2,-8(fp)
   10a78:	01400304 	movi	r5,12
   10a7c:	1009883a 	mov	r4,r2
   10a80:	00034100 	call	3410 <__mulsi3>
   10a84:	8085883a 	add	r2,r16,r2
   10a88:	10800204 	addi	r2,r2,8
   10a8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10a90:	04000074 	movhi	r16,1
   10a94:	84173e04 	addi	r16,r16,23800
   10a98:	e0bffe17 	ldw	r2,-8(fp)
   10a9c:	01400304 	movi	r5,12
   10aa0:	1009883a 	mov	r4,r2
   10aa4:	00034100 	call	3410 <__mulsi3>
   10aa8:	8085883a 	add	r2,r16,r2
   10aac:	10000015 	stw	zero,0(r2)
  }
}
   10ab0:	0001883a 	nop
   10ab4:	e6ffff04 	addi	sp,fp,-4
   10ab8:	dfc00217 	ldw	ra,8(sp)
   10abc:	df000117 	ldw	fp,4(sp)
   10ac0:	dc000017 	ldw	r16,0(sp)
   10ac4:	dec00304 	addi	sp,sp,12
   10ac8:	f800283a 	ret

00010acc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10acc:	defff904 	addi	sp,sp,-28
   10ad0:	df000615 	stw	fp,24(sp)
   10ad4:	df000604 	addi	fp,sp,24
   10ad8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10adc:	0005303a 	rdctl	r2,status
   10ae0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ae4:	e0fffe17 	ldw	r3,-8(fp)
   10ae8:	00bfff84 	movi	r2,-2
   10aec:	1884703a 	and	r2,r3,r2
   10af0:	1001703a 	wrctl	status,r2
  
  return context;
   10af4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10af8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10afc:	d0a01017 	ldw	r2,-32704(gp)
   10b00:	10c000c4 	addi	r3,r2,3
   10b04:	00bfff04 	movi	r2,-4
   10b08:	1884703a 	and	r2,r3,r2
   10b0c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10b10:	d0e01017 	ldw	r3,-32704(gp)
   10b14:	e0bfff17 	ldw	r2,-4(fp)
   10b18:	1887883a 	add	r3,r3,r2
   10b1c:	00810034 	movhi	r2,1024
   10b20:	10800004 	addi	r2,r2,0
   10b24:	10c0062e 	bgeu	r2,r3,10b40 <sbrk+0x74>
   10b28:	e0bffb17 	ldw	r2,-20(fp)
   10b2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b30:	e0bffa17 	ldw	r2,-24(fp)
   10b34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10b38:	00bfffc4 	movi	r2,-1
   10b3c:	00000b06 	br	10b6c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10b40:	d0a01017 	ldw	r2,-32704(gp)
   10b44:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   10b48:	d0e01017 	ldw	r3,-32704(gp)
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	1885883a 	add	r2,r3,r2
   10b54:	d0a01015 	stw	r2,-32704(gp)
   10b58:	e0bffb17 	ldw	r2,-20(fp)
   10b5c:	e0bffc15 	stw	r2,-16(fp)
   10b60:	e0bffc17 	ldw	r2,-16(fp)
   10b64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10b68:	e0bffd17 	ldw	r2,-12(fp)
} 
   10b6c:	e037883a 	mov	sp,fp
   10b70:	df000017 	ldw	fp,0(sp)
   10b74:	dec00104 	addi	sp,sp,4
   10b78:	f800283a 	ret

00010b7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10b7c:	defffa04 	addi	sp,sp,-24
   10b80:	df000515 	stw	fp,20(sp)
   10b84:	df000504 	addi	fp,sp,20
   10b88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b8c:	0005303a 	rdctl	r2,status
   10b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b94:	e0fffc17 	ldw	r3,-16(fp)
   10b98:	00bfff84 	movi	r2,-2
   10b9c:	1884703a 	and	r2,r3,r2
   10ba0:	1001703a 	wrctl	status,r2
  
  return context;
   10ba4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10ba8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10bac:	e0bfff17 	ldw	r2,-4(fp)
   10bb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	10800017 	ldw	r2,0(r2)
   10bbc:	e0fffd17 	ldw	r3,-12(fp)
   10bc0:	18c00117 	ldw	r3,4(r3)
   10bc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10bc8:	e0bffd17 	ldw	r2,-12(fp)
   10bcc:	10800117 	ldw	r2,4(r2)
   10bd0:	e0fffd17 	ldw	r3,-12(fp)
   10bd4:	18c00017 	ldw	r3,0(r3)
   10bd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10bdc:	e0bffd17 	ldw	r2,-12(fp)
   10be0:	e0fffd17 	ldw	r3,-12(fp)
   10be4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10be8:	e0bffd17 	ldw	r2,-12(fp)
   10bec:	e0fffd17 	ldw	r3,-12(fp)
   10bf0:	10c00015 	stw	r3,0(r2)
   10bf4:	e0bffb17 	ldw	r2,-20(fp)
   10bf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bfc:	e0bffe17 	ldw	r2,-8(fp)
   10c00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10c04:	0001883a 	nop
   10c08:	e037883a 	mov	sp,fp
   10c0c:	df000017 	ldw	fp,0(sp)
   10c10:	dec00104 	addi	sp,sp,4
   10c14:	f800283a 	ret

00010c18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10c18:	defffb04 	addi	sp,sp,-20
   10c1c:	dfc00415 	stw	ra,16(sp)
   10c20:	df000315 	stw	fp,12(sp)
   10c24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10c28:	d0a01117 	ldw	r2,-32700(gp)
   10c2c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10c30:	d0a70217 	ldw	r2,-25592(gp)
   10c34:	10800044 	addi	r2,r2,1
   10c38:	d0a70215 	stw	r2,-25592(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10c3c:	00002e06 	br	10cf8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10c40:	e0bffd17 	ldw	r2,-12(fp)
   10c44:	10800017 	ldw	r2,0(r2)
   10c48:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10c4c:	e0bffd17 	ldw	r2,-12(fp)
   10c50:	10800403 	ldbu	r2,16(r2)
   10c54:	10803fcc 	andi	r2,r2,255
   10c58:	10000426 	beq	r2,zero,10c6c <alt_tick+0x54>
   10c5c:	d0a70217 	ldw	r2,-25592(gp)
   10c60:	1000021e 	bne	r2,zero,10c6c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10c64:	e0bffd17 	ldw	r2,-12(fp)
   10c68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10c6c:	e0bffd17 	ldw	r2,-12(fp)
   10c70:	10800217 	ldw	r2,8(r2)
   10c74:	d0e70217 	ldw	r3,-25592(gp)
   10c78:	18801d36 	bltu	r3,r2,10cf0 <alt_tick+0xd8>
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	10800403 	ldbu	r2,16(r2)
   10c84:	10803fcc 	andi	r2,r2,255
   10c88:	1000191e 	bne	r2,zero,10cf0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10c8c:	e0bffd17 	ldw	r2,-12(fp)
   10c90:	10800317 	ldw	r2,12(r2)
   10c94:	e0fffd17 	ldw	r3,-12(fp)
   10c98:	18c00517 	ldw	r3,20(r3)
   10c9c:	1809883a 	mov	r4,r3
   10ca0:	103ee83a 	callr	r2
   10ca4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10ca8:	e0bfff17 	ldw	r2,-4(fp)
   10cac:	1000031e 	bne	r2,zero,10cbc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10cb0:	e13ffd17 	ldw	r4,-12(fp)
   10cb4:	0010b7c0 	call	10b7c <alt_alarm_stop>
   10cb8:	00000d06 	br	10cf0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10cbc:	e0bffd17 	ldw	r2,-12(fp)
   10cc0:	10c00217 	ldw	r3,8(r2)
   10cc4:	e0bfff17 	ldw	r2,-4(fp)
   10cc8:	1887883a 	add	r3,r3,r2
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10cd4:	e0bffd17 	ldw	r2,-12(fp)
   10cd8:	10c00217 	ldw	r3,8(r2)
   10cdc:	d0a70217 	ldw	r2,-25592(gp)
   10ce0:	1880032e 	bgeu	r3,r2,10cf0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10ce4:	e0bffd17 	ldw	r2,-12(fp)
   10ce8:	00c00044 	movi	r3,1
   10cec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10cf0:	e0bffe17 	ldw	r2,-8(fp)
   10cf4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10cf8:	e0fffd17 	ldw	r3,-12(fp)
   10cfc:	d0a01104 	addi	r2,gp,-32700
   10d00:	18bfcf1e 	bne	r3,r2,10c40 <__alt_data_end+0xfc010c40>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10d04:	0001883a 	nop
}
   10d08:	0001883a 	nop
   10d0c:	e037883a 	mov	sp,fp
   10d10:	dfc00117 	ldw	ra,4(sp)
   10d14:	df000017 	ldw	fp,0(sp)
   10d18:	dec00204 	addi	sp,sp,8
   10d1c:	f800283a 	ret

00010d20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10d20:	defffd04 	addi	sp,sp,-12
   10d24:	dfc00215 	stw	ra,8(sp)
   10d28:	df000115 	stw	fp,4(sp)
   10d2c:	df000104 	addi	fp,sp,4
   10d30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10d34:	e13fff17 	ldw	r4,-4(fp)
   10d38:	0013a080 	call	13a08 <alt_busy_sleep>
}
   10d3c:	e037883a 	mov	sp,fp
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d50:	defffe04 	addi	sp,sp,-8
   10d54:	dfc00115 	stw	ra,4(sp)
   10d58:	df000015 	stw	fp,0(sp)
   10d5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d60:	d0a00f17 	ldw	r2,-32708(gp)
   10d64:	10000326 	beq	r2,zero,10d74 <alt_get_errno+0x24>
   10d68:	d0a00f17 	ldw	r2,-32708(gp)
   10d6c:	103ee83a 	callr	r2
   10d70:	00000106 	br	10d78 <alt_get_errno+0x28>
   10d74:	d0a6fd04 	addi	r2,gp,-25612
}
   10d78:	e037883a 	mov	sp,fp
   10d7c:	dfc00117 	ldw	ra,4(sp)
   10d80:	df000017 	ldw	fp,0(sp)
   10d84:	dec00204 	addi	sp,sp,8
   10d88:	f800283a 	ret

00010d8c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10d8c:	defff904 	addi	sp,sp,-28
   10d90:	dfc00615 	stw	ra,24(sp)
   10d94:	df000515 	stw	fp,20(sp)
   10d98:	df000504 	addi	fp,sp,20
   10d9c:	e13ffd15 	stw	r4,-12(fp)
   10da0:	e17ffe15 	stw	r5,-8(fp)
   10da4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	10000816 	blt	r2,zero,10dd0 <write+0x44>
   10db0:	01400304 	movi	r5,12
   10db4:	e13ffd17 	ldw	r4,-12(fp)
   10db8:	00034100 	call	3410 <__mulsi3>
   10dbc:	1007883a 	mov	r3,r2
   10dc0:	00800074 	movhi	r2,1
   10dc4:	10973e04 	addi	r2,r2,23800
   10dc8:	1885883a 	add	r2,r3,r2
   10dcc:	00000106 	br	10dd4 <write+0x48>
   10dd0:	0005883a 	mov	r2,zero
   10dd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10dd8:	e0bffb17 	ldw	r2,-20(fp)
   10ddc:	10002126 	beq	r2,zero,10e64 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10de0:	e0bffb17 	ldw	r2,-20(fp)
   10de4:	10800217 	ldw	r2,8(r2)
   10de8:	108000cc 	andi	r2,r2,3
   10dec:	10001826 	beq	r2,zero,10e50 <write+0xc4>
   10df0:	e0bffb17 	ldw	r2,-20(fp)
   10df4:	10800017 	ldw	r2,0(r2)
   10df8:	10800617 	ldw	r2,24(r2)
   10dfc:	10001426 	beq	r2,zero,10e50 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10e00:	e0bffb17 	ldw	r2,-20(fp)
   10e04:	10800017 	ldw	r2,0(r2)
   10e08:	10800617 	ldw	r2,24(r2)
   10e0c:	e0ffff17 	ldw	r3,-4(fp)
   10e10:	180d883a 	mov	r6,r3
   10e14:	e17ffe17 	ldw	r5,-8(fp)
   10e18:	e13ffb17 	ldw	r4,-20(fp)
   10e1c:	103ee83a 	callr	r2
   10e20:	e0bffc15 	stw	r2,-16(fp)
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	1000070e 	bge	r2,zero,10e48 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10e2c:	0010d500 	call	10d50 <alt_get_errno>
   10e30:	1007883a 	mov	r3,r2
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	0085c83a 	sub	r2,zero,r2
   10e3c:	18800015 	stw	r2,0(r3)
        return -1;
   10e40:	00bfffc4 	movi	r2,-1
   10e44:	00000c06 	br	10e78 <write+0xec>
      }
      return rval;
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	00000a06 	br	10e78 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10e50:	0010d500 	call	10d50 <alt_get_errno>
   10e54:	1007883a 	mov	r3,r2
   10e58:	00800344 	movi	r2,13
   10e5c:	18800015 	stw	r2,0(r3)
   10e60:	00000406 	br	10e74 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10e64:	0010d500 	call	10d50 <alt_get_errno>
   10e68:	1007883a 	mov	r3,r2
   10e6c:	00801444 	movi	r2,81
   10e70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10e74:	00bfffc4 	movi	r2,-1
}
   10e78:	e037883a 	mov	sp,fp
   10e7c:	dfc00117 	ldw	ra,4(sp)
   10e80:	df000017 	ldw	fp,0(sp)
   10e84:	dec00204 	addi	sp,sp,8
   10e88:	f800283a 	ret

00010e8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10e8c:	defffd04 	addi	sp,sp,-12
   10e90:	dfc00215 	stw	ra,8(sp)
   10e94:	df000115 	stw	fp,4(sp)
   10e98:	df000104 	addi	fp,sp,4
   10e9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10ea0:	d1600c04 	addi	r5,gp,-32720
   10ea4:	e13fff17 	ldw	r4,-4(fp)
   10ea8:	0013bbc0 	call	13bbc <alt_dev_llist_insert>
}
   10eac:	e037883a 	mov	sp,fp
   10eb0:	dfc00117 	ldw	ra,4(sp)
   10eb4:	df000017 	ldw	fp,0(sp)
   10eb8:	dec00204 	addi	sp,sp,8
   10ebc:	f800283a 	ret

00010ec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ec0:	defffd04 	addi	sp,sp,-12
   10ec4:	dfc00215 	stw	ra,8(sp)
   10ec8:	df000115 	stw	fp,4(sp)
   10ecc:	df000104 	addi	fp,sp,4
   10ed0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   10ed4:	00146bc0 	call	146bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ed8:	00800044 	movi	r2,1
   10edc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10ee0:	0001883a 	nop
   10ee4:	e037883a 	mov	sp,fp
   10ee8:	dfc00117 	ldw	ra,4(sp)
   10eec:	df000017 	ldw	fp,0(sp)
   10ef0:	dec00204 	addi	sp,sp,8
   10ef4:	f800283a 	ret

00010ef8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ef8:	defffe04 	addi	sp,sp,-8
   10efc:	dfc00115 	stw	ra,4(sp)
   10f00:	df000015 	stw	fp,0(sp)
   10f04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10f08:	01c0fa04 	movi	r7,1000
   10f0c:	01800084 	movi	r6,2
   10f10:	000b883a 	mov	r5,zero
   10f14:	01010034 	movhi	r4,1024
   10f18:	21042004 	addi	r4,r4,4224
   10f1c:	00138600 	call	13860 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   10f20:	01000074 	movhi	r4,1
   10f24:	21179e04 	addi	r4,r4,24184
   10f28:	00111bc0 	call	111bc <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10f2c:	01800044 	movi	r6,1
   10f30:	000b883a 	mov	r5,zero
   10f34:	01000074 	movhi	r4,1
   10f38:	2117b604 	addi	r4,r4,24280
   10f3c:	0012ce80 	call	12ce8 <altera_avalon_jtag_uart_init>
   10f40:	01000074 	movhi	r4,1
   10f44:	2117ac04 	addi	r4,r4,24240
   10f48:	0010e8c0 	call	10e8c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   10f4c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10f50:	0001883a 	nop
}
   10f54:	0001883a 	nop
   10f58:	e037883a 	mov	sp,fp
   10f5c:	dfc00117 	ldw	ra,4(sp)
   10f60:	df000017 	ldw	fp,0(sp)
   10f64:	dec00204 	addi	sp,sp,8
   10f68:	f800283a 	ret

00010f6c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   10f6c:	defff904 	addi	sp,sp,-28
   10f70:	dfc00615 	stw	ra,24(sp)
   10f74:	df000515 	stw	fp,20(sp)
   10f78:	df000504 	addi	fp,sp,20
   10f7c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   10f80:	008000b4 	movhi	r2,2
   10f84:	10a1a804 	addi	r2,r2,-31072
   10f88:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   10f8c:	e0bfff17 	ldw	r2,-4(fp)
   10f90:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	10800717 	ldw	r2,28(r2)
   10f9c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   10fa0:	e0bffd17 	ldw	r2,-12(fp)
   10fa4:	10800217 	ldw	r2,8(r2)
   10fa8:	10800098 	cmpnei	r2,r2,2
   10fac:	1000251e 	bne	r2,zero,11044 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   10fb0:	e0bffd17 	ldw	r2,-12(fp)
   10fb4:	10c00017 	ldw	r3,0(r2)
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	10800117 	ldw	r2,4(r2)
   10fc0:	e13ffe04 	addi	r4,fp,-8
   10fc4:	200f883a 	mov	r7,r4
   10fc8:	100d883a 	mov	r6,r2
   10fcc:	180b883a 	mov	r5,r3
   10fd0:	e13ffc17 	ldw	r4,-16(fp)
   10fd4:	001171c0 	call	1171c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   10fd8:	e0bffd17 	ldw	r2,-12(fp)
   10fdc:	10c00117 	ldw	r3,4(r2)
   10fe0:	e0bffe17 	ldw	r2,-8(fp)
   10fe4:	1887c83a 	sub	r3,r3,r2
   10fe8:	e0bffd17 	ldw	r2,-12(fp)
   10fec:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   10ff0:	e0bffd17 	ldw	r2,-12(fp)
   10ff4:	10c00017 	ldw	r3,0(r2)
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	1887883a 	add	r3,r3,r2
   11000:	e0bffd17 	ldw	r2,-12(fp)
   11004:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   11008:	e0bffd17 	ldw	r2,-12(fp)
   1100c:	10800117 	ldw	r2,4(r2)
   11010:	10000c26 	beq	r2,zero,11044 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11014:	01400704 	movi	r5,28
   11018:	e13ffc17 	ldw	r4,-16(fp)
   1101c:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   11020:	01400084 	movi	r5,2
   11024:	e13ffc17 	ldw	r4,-16(fp)
   11028:	00129780 	call	12978 <alt_avalon_i2c_int_enable>
   1102c:	00000e06 	br	11068 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   11030:	e0bffb17 	ldw	r2,-20(fp)
   11034:	10bfffc4 	addi	r2,r2,-1
   11038:	e0bffb15 	stw	r2,-20(fp)
   1103c:	e0bffb17 	ldw	r2,-20(fp)
   11040:	10000426 	beq	r2,zero,11054 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   11044:	e13ffc17 	ldw	r4,-16(fp)
   11048:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   1104c:	103ff81e 	bne	r2,zero,11030 <__alt_data_end+0xfc011030>
   11050:	00000106 	br	11058 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   11054:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   11058:	e13ffc17 	ldw	r4,-16(fp)
   1105c:	00113800 	call	11380 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   11060:	e0bffd17 	ldw	r2,-12(fp)
   11064:	10000215 	stw	zero,8(r2)
}
   11068:	e037883a 	mov	sp,fp
   1106c:	dfc00117 	ldw	ra,4(sp)
   11070:	df000017 	ldw	fp,0(sp)
   11074:	dec00204 	addi	sp,sp,8
   11078:	f800283a 	ret

0001107c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1107c:	defffc04 	addi	sp,sp,-16
   11080:	dfc00315 	stw	ra,12(sp)
   11084:	df000215 	stw	fp,8(sp)
   11088:	df000204 	addi	fp,sp,8
   1108c:	e13ffe15 	stw	r4,-8(fp)
   11090:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   11094:	e0bfff17 	ldw	r2,-4(fp)
   11098:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1109c:	e1ffff17 	ldw	r7,-4(fp)
   110a0:	000d883a 	mov	r6,zero
   110a4:	01400074 	movhi	r5,1
   110a8:	2943db04 	addi	r5,r5,3948
   110ac:	e13ffe17 	ldw	r4,-8(fp)
   110b0:	00111680 	call	11168 <alt_avalon_i2c_register_callback>
}
   110b4:	0001883a 	nop
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   110cc:	defff904 	addi	sp,sp,-28
   110d0:	dfc00615 	stw	ra,24(sp)
   110d4:	df000515 	stw	fp,20(sp)
   110d8:	df000504 	addi	fp,sp,20
   110dc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   110e0:	e0bfff17 	ldw	r2,-4(fp)
   110e4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   110e8:	014007c4 	movi	r5,31
   110ec:	e13ffb17 	ldw	r4,-20(fp)
   110f0:	00129100 	call	12910 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   110f4:	01400704 	movi	r5,28
   110f8:	e13ffb17 	ldw	r4,-20(fp)
   110fc:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   11100:	e0bffb17 	ldw	r2,-20(fp)
   11104:	10800617 	ldw	r2,24(r2)
   11108:	10001126 	beq	r2,zero,11150 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1110c:	0005303a 	rdctl	r2,status
   11110:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11114:	e0fffd17 	ldw	r3,-12(fp)
   11118:	00bfff84 	movi	r2,-2
   1111c:	1884703a 	and	r2,r3,r2
   11120:	1001703a 	wrctl	status,r2
  
  return context;
   11124:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   11128:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1112c:	e0bffb17 	ldw	r2,-20(fp)
   11130:	10800617 	ldw	r2,24(r2)
   11134:	e13ffb17 	ldw	r4,-20(fp)
   11138:	103ee83a 	callr	r2
   1113c:	e0bffc17 	ldw	r2,-16(fp)
   11140:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11144:	e0bffe17 	ldw	r2,-8(fp)
   11148:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1114c:	0001883a 	nop
   11150:	0001883a 	nop
}
   11154:	e037883a 	mov	sp,fp
   11158:	dfc00117 	ldw	ra,4(sp)
   1115c:	df000017 	ldw	fp,0(sp)
   11160:	dec00204 	addi	sp,sp,8
   11164:	f800283a 	ret

00011168 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   11168:	defffb04 	addi	sp,sp,-20
   1116c:	df000415 	stw	fp,16(sp)
   11170:	df000404 	addi	fp,sp,16
   11174:	e13ffc15 	stw	r4,-16(fp)
   11178:	e17ffd15 	stw	r5,-12(fp)
   1117c:	e1bffe15 	stw	r6,-8(fp)
   11180:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   11184:	e0bffc17 	ldw	r2,-16(fp)
   11188:	e0fffd17 	ldw	r3,-12(fp)
   1118c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   11190:	e0bffc17 	ldw	r2,-16(fp)
   11194:	e0ffff17 	ldw	r3,-4(fp)
   11198:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	e0fffe17 	ldw	r3,-8(fp)
   111a4:	10c00815 	stw	r3,32(r2)

    return ;
   111a8:	0001883a 	nop
}
   111ac:	e037883a 	mov	sp,fp
   111b0:	df000017 	ldw	fp,0(sp)
   111b4:	dec00104 	addi	sp,sp,4
   111b8:	f800283a 	ret

000111bc <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   111bc:	defff704 	addi	sp,sp,-36
   111c0:	dfc00815 	stw	ra,32(sp)
   111c4:	df000715 	stw	fp,28(sp)
   111c8:	df000704 	addi	fp,sp,28
   111cc:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   111d0:	e13fff17 	ldw	r4,-4(fp)
   111d4:	00113800 	call	11380 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   111d8:	014007c4 	movi	r5,31
   111dc:	e13fff17 	ldw	r4,-4(fp)
   111e0:	00129100 	call	12910 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   111e4:	01400704 	movi	r5,28
   111e8:	e13fff17 	ldw	r4,-4(fp)
   111ec:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   111f0:	014000c4 	movi	r5,3
   111f4:	e13fff17 	ldw	r4,-4(fp)
   111f8:	0012b1c0 	call	12b1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   111fc:	014000c4 	movi	r5,3
   11200:	e13fff17 	ldw	r4,-4(fp)
   11204:	0012a6c0 	call	12a6c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   11208:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1120c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   11210:	e0bffb04 	addi	r2,fp,-20
   11214:	018000b4 	movhi	r6,2
   11218:	31a1a804 	addi	r6,r6,-31072
   1121c:	100b883a 	mov	r5,r2
   11220:	e13fff17 	ldw	r4,-4(fp)
   11224:	00115dc0 	call	115dc <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   11228:	e0bffb04 	addi	r2,fp,-20
   1122c:	100b883a 	mov	r5,r2
   11230:	e13fff17 	ldw	r4,-4(fp)
   11234:	001147c0 	call	1147c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   11238:	d1601304 	addi	r5,gp,-32692
   1123c:	e13fff17 	ldw	r4,-4(fp)
   11240:	0013bbc0 	call	13bbc <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   11244:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   11248:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1124c:	e0bffa17 	ldw	r2,-24(fp)
   11250:	10000c1e 	bne	r2,zero,11284 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	10c00417 	ldw	r3,16(r2)
   1125c:	e0bfff17 	ldw	r2,-4(fp)
   11260:	10800517 	ldw	r2,20(r2)
   11264:	d8000015 	stw	zero,0(sp)
   11268:	e1ffff17 	ldw	r7,-4(fp)
   1126c:	01800074 	movhi	r6,1
   11270:	31843304 	addi	r6,r6,4300
   11274:	100b883a 	mov	r5,r2
   11278:	1809883a 	mov	r4,r3
   1127c:	0013dd00 	call	13dd0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   11280:	00000406 	br	11294 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   11284:	01000074 	movhi	r4,1
   11288:	2114f704 	addi	r4,r4,21468
   1128c:	00144540 	call	14454 <alt_printf>
    }

    return;
   11290:	0001883a 	nop

}
   11294:	e037883a 	mov	sp,fp
   11298:	dfc00117 	ldw	ra,4(sp)
   1129c:	df000017 	ldw	fp,0(sp)
   112a0:	dec00204 	addi	sp,sp,8
   112a4:	f800283a 	ret

000112a8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   112a8:	defffc04 	addi	sp,sp,-16
   112ac:	dfc00315 	stw	ra,12(sp)
   112b0:	df000215 	stw	fp,8(sp)
   112b4:	df000204 	addi	fp,sp,8
   112b8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   112bc:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   112c0:	d1601304 	addi	r5,gp,-32692
   112c4:	e13fff17 	ldw	r4,-4(fp)
   112c8:	0013d200 	call	13d20 <alt_find_dev>
   112cc:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   112d0:	e0bffe17 	ldw	r2,-8(fp)
}
   112d4:	e037883a 	mov	sp,fp
   112d8:	dfc00117 	ldw	ra,4(sp)
   112dc:	df000017 	ldw	fp,0(sp)
   112e0:	dec00204 	addi	sp,sp,8
   112e4:	f800283a 	ret

000112e8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   112e8:	defffc04 	addi	sp,sp,-16
   112ec:	df000315 	stw	fp,12(sp)
   112f0:	df000304 	addi	fp,sp,12
   112f4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   112f8:	e0bfff17 	ldw	r2,-4(fp)
   112fc:	10800717 	ldw	r2,28(r2)
   11300:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   11304:	e0bfff17 	ldw	r2,-4(fp)
   11308:	10800317 	ldw	r2,12(r2)
   1130c:	10800204 	addi	r2,r2,8
   11310:	10800037 	ldwio	r2,0(r2)
   11314:	1080004c 	andi	r2,r2,1
   11318:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1131c:	e0bffe17 	ldw	r2,-8(fp)
   11320:	10000226 	beq	r2,zero,1132c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   11324:	00bffe44 	movi	r2,-7
   11328:	00001106 	br	11370 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1132c:	e0bfff17 	ldw	r2,-4(fp)
   11330:	10c00617 	ldw	r3,24(r2)
   11334:	00800074 	movhi	r2,1
   11338:	1083db04 	addi	r2,r2,3948
   1133c:	1880021e 	bne	r3,r2,11348 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   11340:	e0bffd17 	ldw	r2,-12(fp)
   11344:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   11348:	e0bfff17 	ldw	r2,-4(fp)
   1134c:	10800317 	ldw	r2,12(r2)
   11350:	10800204 	addi	r2,r2,8
   11354:	e0ffff17 	ldw	r3,-4(fp)
   11358:	18c00317 	ldw	r3,12(r3)
   1135c:	18c00204 	addi	r3,r3,8
   11360:	18c00037 	ldwio	r3,0(r3)
   11364:	18c00054 	ori	r3,r3,1
   11368:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1136c:	0005883a 	mov	r2,zero
}
   11370:	e037883a 	mov	sp,fp
   11374:	df000017 	ldw	fp,0(sp)
   11378:	dec00104 	addi	sp,sp,4
   1137c:	f800283a 	ret

00011380 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11380:	defffe04 	addi	sp,sp,-8
   11384:	df000115 	stw	fp,4(sp)
   11388:	df000104 	addi	fp,sp,4
   1138c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11390:	e0bfff17 	ldw	r2,-4(fp)
   11394:	10800317 	ldw	r2,12(r2)
   11398:	10800204 	addi	r2,r2,8
   1139c:	e0ffff17 	ldw	r3,-4(fp)
   113a0:	18c00317 	ldw	r3,12(r3)
   113a4:	18c00204 	addi	r3,r3,8
   113a8:	19000037 	ldwio	r4,0(r3)
   113ac:	00ffff84 	movi	r3,-2
   113b0:	20c6703a 	and	r3,r4,r3
   113b4:	10c00035 	stwio	r3,0(r2)

}
   113b8:	0001883a 	nop
   113bc:	e037883a 	mov	sp,fp
   113c0:	df000017 	ldw	fp,0(sp)
   113c4:	dec00104 	addi	sp,sp,4
   113c8:	f800283a 	ret

000113cc <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   113cc:	defffd04 	addi	sp,sp,-12
   113d0:	df000215 	stw	fp,8(sp)
   113d4:	df000204 	addi	fp,sp,8
   113d8:	e13ffe15 	stw	r4,-8(fp)
   113dc:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10c00d17 	ldw	r3,52(r2)
   113e8:	e0bfff17 	ldw	r2,-4(fp)
   113ec:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   113f0:	e0bffe17 	ldw	r2,-8(fp)
   113f4:	10800317 	ldw	r2,12(r2)
   113f8:	10800204 	addi	r2,r2,8
   113fc:	10800037 	ldwio	r2,0(r2)
   11400:	1080008c 	andi	r2,r2,2
   11404:	1005d07a 	srai	r2,r2,1
   11408:	1007883a 	mov	r3,r2
   1140c:	e0bfff17 	ldw	r2,-4(fp)
   11410:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   11414:	e0bffe17 	ldw	r2,-8(fp)
   11418:	10800317 	ldw	r2,12(r2)
   1141c:	10800904 	addi	r2,r2,36
   11420:	10800037 	ldwio	r2,0(r2)
   11424:	1007883a 	mov	r3,r2
   11428:	e0bfff17 	ldw	r2,-4(fp)
   1142c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   11430:	e0bffe17 	ldw	r2,-8(fp)
   11434:	10800317 	ldw	r2,12(r2)
   11438:	10800804 	addi	r2,r2,32
   1143c:	10800037 	ldwio	r2,0(r2)
   11440:	1007883a 	mov	r3,r2
   11444:	e0bfff17 	ldw	r2,-4(fp)
   11448:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1144c:	e0bffe17 	ldw	r2,-8(fp)
   11450:	10800317 	ldw	r2,12(r2)
   11454:	10800a04 	addi	r2,r2,40
   11458:	10800037 	ldwio	r2,0(r2)
   1145c:	1007883a 	mov	r3,r2
   11460:	e0bfff17 	ldw	r2,-4(fp)
   11464:	10c0030d 	sth	r3,12(r2)
}
   11468:	0001883a 	nop
   1146c:	e037883a 	mov	sp,fp
   11470:	df000017 	ldw	fp,0(sp)
   11474:	dec00104 	addi	sp,sp,4
   11478:	f800283a 	ret

0001147c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1147c:	defffd04 	addi	sp,sp,-12
   11480:	df000215 	stw	fp,8(sp)
   11484:	df000204 	addi	fp,sp,8
   11488:	e13ffe15 	stw	r4,-8(fp)
   1148c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   11490:	e0bfff17 	ldw	r2,-4(fp)
   11494:	10c00017 	ldw	r3,0(r2)
   11498:	e0bffe17 	ldw	r2,-8(fp)
   1149c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   114a0:	e0bffe17 	ldw	r2,-8(fp)
   114a4:	10800317 	ldw	r2,12(r2)
   114a8:	10c00204 	addi	r3,r2,8
   114ac:	e0bffe17 	ldw	r2,-8(fp)
   114b0:	10800317 	ldw	r2,12(r2)
   114b4:	10800204 	addi	r2,r2,8
   114b8:	10800037 	ldwio	r2,0(r2)
   114bc:	1009883a 	mov	r4,r2
   114c0:	00bfff44 	movi	r2,-3
   114c4:	2088703a 	and	r4,r4,r2
   114c8:	e0bfff17 	ldw	r2,-4(fp)
   114cc:	10800117 	ldw	r2,4(r2)
   114d0:	1085883a 	add	r2,r2,r2
   114d4:	1080008c 	andi	r2,r2,2
   114d8:	2084b03a 	or	r2,r4,r2
   114dc:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   114e0:	e0bffe17 	ldw	r2,-8(fp)
   114e4:	10800317 	ldw	r2,12(r2)
   114e8:	10800904 	addi	r2,r2,36
   114ec:	e0ffff17 	ldw	r3,-4(fp)
   114f0:	18c0020b 	ldhu	r3,8(r3)
   114f4:	18ffffcc 	andi	r3,r3,65535
   114f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   114fc:	e0bffe17 	ldw	r2,-8(fp)
   11500:	10800317 	ldw	r2,12(r2)
   11504:	10800804 	addi	r2,r2,32
   11508:	e0ffff17 	ldw	r3,-4(fp)
   1150c:	18c0028b 	ldhu	r3,10(r3)
   11510:	18ffffcc 	andi	r3,r3,65535
   11514:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   11518:	e0bffe17 	ldw	r2,-8(fp)
   1151c:	10800317 	ldw	r2,12(r2)
   11520:	10800a04 	addi	r2,r2,40
   11524:	e0ffff17 	ldw	r3,-4(fp)
   11528:	18c0030b 	ldhu	r3,12(r3)
   1152c:	18ffffcc 	andi	r3,r3,65535
   11530:	10c00035 	stwio	r3,0(r2)
}
   11534:	0001883a 	nop
   11538:	e037883a 	mov	sp,fp
   1153c:	df000017 	ldw	fp,0(sp)
   11540:	dec00104 	addi	sp,sp,4
   11544:	f800283a 	ret

00011548 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   11548:	defffb04 	addi	sp,sp,-20
   1154c:	dfc00415 	stw	ra,16(sp)
   11550:	df000315 	stw	fp,12(sp)
   11554:	df000304 	addi	fp,sp,12
   11558:	e13ffd15 	stw	r4,-12(fp)
   1155c:	e17ffe15 	stw	r5,-8(fp)
   11560:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   11564:	e0bffe17 	ldw	r2,-8(fp)
   11568:	1080028b 	ldhu	r2,10(r2)
   1156c:	10bfffcc 	andi	r2,r2,65535
   11570:	10000426 	beq	r2,zero,11584 <alt_avalon_i2c_master_config_speed_get+0x3c>
   11574:	e0bffe17 	ldw	r2,-8(fp)
   11578:	1080020b 	ldhu	r2,8(r2)
   1157c:	10bfffcc 	andi	r2,r2,65535
   11580:	1000021e 	bne	r2,zero,1158c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   11584:	00bfff44 	movi	r2,-3
   11588:	00000f06 	br	115c8 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   1158c:	e0bffd17 	ldw	r2,-12(fp)
   11590:	11000c17 	ldw	r4,48(r2)
   11594:	e0bffe17 	ldw	r2,-8(fp)
   11598:	1080028b 	ldhu	r2,10(r2)
   1159c:	10ffffcc 	andi	r3,r2,65535
   115a0:	e0bffe17 	ldw	r2,-8(fp)
   115a4:	1080020b 	ldhu	r2,8(r2)
   115a8:	10bfffcc 	andi	r2,r2,65535
   115ac:	1885883a 	add	r2,r3,r2
   115b0:	100b883a 	mov	r5,r2
   115b4:	00033540 	call	3354 <__udivsi3>
   115b8:	1007883a 	mov	r3,r2
   115bc:	e0bfff17 	ldw	r2,-4(fp)
   115c0:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   115c4:	0005883a 	mov	r2,zero
}
   115c8:	e037883a 	mov	sp,fp
   115cc:	dfc00117 	ldw	ra,4(sp)
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00204 	addi	sp,sp,8
   115d8:	f800283a 	ret

000115dc <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   115dc:	defff904 	addi	sp,sp,-28
   115e0:	dfc00615 	stw	ra,24(sp)
   115e4:	df000515 	stw	fp,20(sp)
   115e8:	df000504 	addi	fp,sp,20
   115ec:	e13ffd15 	stw	r4,-12(fp)
   115f0:	e17ffe15 	stw	r5,-8(fp)
   115f4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   115f8:	e0ffff17 	ldw	r3,-4(fp)
   115fc:	008001b4 	movhi	r2,6
   11600:	1086a004 	addi	r2,r2,6784
   11604:	10c00436 	bltu	r2,r3,11618 <alt_avalon_i2c_master_config_speed_set+0x3c>
   11608:	e0bfff17 	ldw	r2,-4(fp)
   1160c:	10000226 	beq	r2,zero,11618 <alt_avalon_i2c_master_config_speed_set+0x3c>
   11610:	e0bfff17 	ldw	r2,-4(fp)
   11614:	1000021e 	bne	r2,zero,11620 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   11618:	00bfff04 	movi	r2,-4
   1161c:	00002906 	br	116c4 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	10c00c17 	ldw	r3,48(r2)
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	1085883a 	add	r2,r2,r2
   11630:	100b883a 	mov	r5,r2
   11634:	1809883a 	mov	r4,r3
   11638:	00033540 	call	3354 <__udivsi3>
   1163c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   11640:	e0bffb17 	ldw	r2,-20(fp)
   11644:	10800f04 	addi	r2,r2,60
   11648:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1164c:	e0bffb17 	ldw	r2,-20(fp)
   11650:	10bff104 	addi	r2,r2,-60
   11654:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   11658:	e0ffff17 	ldw	r3,-4(fp)
   1165c:	008000b4 	movhi	r2,2
   11660:	10a1a804 	addi	r2,r2,-31072
   11664:	10c0042e 	bgeu	r2,r3,11678 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   11668:	e0bffe17 	ldw	r2,-8(fp)
   1166c:	00c00044 	movi	r3,1
   11670:	10c00115 	stw	r3,4(r2)
   11674:	00000206 	br	11680 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   11680:	e0bffb17 	ldw	r2,-20(fp)
   11684:	1007883a 	mov	r3,r2
   11688:	e0bffe17 	ldw	r2,-8(fp)
   1168c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   11690:	e0bffc17 	ldw	r2,-16(fp)
   11694:	1007883a 	mov	r3,r2
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   116a0:	e0bffb17 	ldw	r2,-20(fp)
   116a4:	1007883a 	mov	r3,r2
   116a8:	e0bffb17 	ldw	r2,-20(fp)
   116ac:	1004d07a 	srli	r2,r2,1
   116b0:	1885c83a 	sub	r2,r3,r2
   116b4:	1007883a 	mov	r3,r2
   116b8:	e0bffe17 	ldw	r2,-8(fp)
   116bc:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   116c0:	0005883a 	mov	r2,zero

}
   116c4:	e037883a 	mov	sp,fp
   116c8:	dfc00117 	ldw	ra,4(sp)
   116cc:	df000017 	ldw	fp,0(sp)
   116d0:	dec00204 	addi	sp,sp,8
   116d4:	f800283a 	ret

000116d8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   116d8:	defffe04 	addi	sp,sp,-8
   116dc:	df000115 	stw	fp,4(sp)
   116e0:	df000104 	addi	fp,sp,4
   116e4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   116e8:	e0bfff17 	ldw	r2,-4(fp)
   116ec:	10800317 	ldw	r2,12(r2)
   116f0:	10800504 	addi	r2,r2,20
   116f4:	10800037 	ldwio	r2,0(r2)
   116f8:	1080004c 	andi	r2,r2,1
   116fc:	10000226 	beq	r2,zero,11708 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   11700:	00800044 	movi	r2,1
   11704:	00000106 	br	1170c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   11708:	0005883a 	mov	r2,zero
}
   1170c:	e037883a 	mov	sp,fp
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00104 	addi	sp,sp,4
   11718:	f800283a 	ret

0001171c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   1171c:	defffb04 	addi	sp,sp,-20
   11720:	df000415 	stw	fp,16(sp)
   11724:	df000404 	addi	fp,sp,16
   11728:	e13ffc15 	stw	r4,-16(fp)
   1172c:	e17ffd15 	stw	r5,-12(fp)
   11730:	e1bffe15 	stw	r6,-8(fp)
   11734:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   11738:	e0bfff17 	ldw	r2,-4(fp)
   1173c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   11740:	00001406 	br	11794 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11744:	e0bfff17 	ldw	r2,-4(fp)
   11748:	10800017 	ldw	r2,0(r2)
   1174c:	e0fffd17 	ldw	r3,-12(fp)
   11750:	1885883a 	add	r2,r3,r2
   11754:	e0fffc17 	ldw	r3,-16(fp)
   11758:	18c00317 	ldw	r3,12(r3)
   1175c:	18c00104 	addi	r3,r3,4
   11760:	18c00037 	ldwio	r3,0(r3)
   11764:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   11768:	e0bfff17 	ldw	r2,-4(fp)
   1176c:	10800017 	ldw	r2,0(r2)
   11770:	10c00044 	addi	r3,r2,1
   11774:	e0bfff17 	ldw	r2,-4(fp)
   11778:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1177c:	e0bfff17 	ldw	r2,-4(fp)
   11780:	10c00017 	ldw	r3,0(r2)
   11784:	e0bffe17 	ldw	r2,-8(fp)
   11788:	1880021e 	bne	r3,r2,11794 <alt_avalon_i2c_rx_read_available+0x78>
   1178c:	e0bffe17 	ldw	r2,-8(fp)
   11790:	1000061e 	bne	r2,zero,117ac <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   11794:	e0bffc17 	ldw	r2,-16(fp)
   11798:	10800317 	ldw	r2,12(r2)
   1179c:	10800704 	addi	r2,r2,28
   117a0:	10800037 	ldwio	r2,0(r2)
   117a4:	103fe71e 	bne	r2,zero,11744 <__alt_data_end+0xfc011744>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   117a8:	00000106 	br	117b0 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   117ac:	0001883a 	nop
    }
}
   117b0:	0001883a 	nop
   117b4:	e037883a 	mov	sp,fp
   117b8:	df000017 	ldw	fp,0(sp)
   117bc:	dec00104 	addi	sp,sp,4
   117c0:	f800283a 	ret

000117c4 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   117c4:	defffa04 	addi	sp,sp,-24
   117c8:	dfc00515 	stw	ra,20(sp)
   117cc:	df000415 	stw	fp,16(sp)
   117d0:	df000404 	addi	fp,sp,16
   117d4:	e13ffe15 	stw	r4,-8(fp)
   117d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   117dc:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   117e0:	008000b4 	movhi	r2,2
   117e4:	10a1a804 	addi	r2,r2,-31072
   117e8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   117ec:	00000d06 	br	11824 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	108002a8 	cmpgeui	r2,r2,10
   117f8:	1000021e 	bne	r2,zero,11804 <alt_avalon_i2c_rx_read+0x40>
   117fc:	0109c404 	movi	r4,10000
   11800:	0013a080 	call	13a08 <alt_busy_sleep>
      if (--timeout == 0)
   11804:	e0bffd17 	ldw	r2,-12(fp)
   11808:	10bfffc4 	addi	r2,r2,-1
   1180c:	e0bffd15 	stw	r2,-12(fp)
   11810:	e0bffd17 	ldw	r2,-12(fp)
   11814:	1000031e 	bne	r2,zero,11824 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   11818:	00bfff84 	movi	r2,-2
   1181c:	e0bffc15 	stw	r2,-16(fp)
        break;
   11820:	00000506 	br	11838 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11824:	e0bffe17 	ldw	r2,-8(fp)
   11828:	10800317 	ldw	r2,12(r2)
   1182c:	10800704 	addi	r2,r2,28
   11830:	10800037 	ldwio	r2,0(r2)
   11834:	103fee26 	beq	r2,zero,117f0 <__alt_data_end+0xfc0117f0>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11838:	e0bffe17 	ldw	r2,-8(fp)
   1183c:	10800317 	ldw	r2,12(r2)
   11840:	10800104 	addi	r2,r2,4
   11844:	10800037 	ldwio	r2,0(r2)
   11848:	1007883a 	mov	r3,r2
   1184c:	e0bfff17 	ldw	r2,-4(fp)
   11850:	10c00005 	stb	r3,0(r2)
        
    return status;
   11854:	e0bffc17 	ldw	r2,-16(fp)
}
   11858:	e037883a 	mov	sp,fp
   1185c:	dfc00117 	ldw	ra,4(sp)
   11860:	df000017 	ldw	fp,0(sp)
   11864:	dec00204 	addi	sp,sp,8
   11868:	f800283a 	ret

0001186c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   1186c:	defff804 	addi	sp,sp,-32
   11870:	dfc00715 	stw	ra,28(sp)
   11874:	df000615 	stw	fp,24(sp)
   11878:	df000604 	addi	fp,sp,24
   1187c:	e13ffc15 	stw	r4,-16(fp)
   11880:	2809883a 	mov	r4,r5
   11884:	3007883a 	mov	r3,r6
   11888:	3805883a 	mov	r2,r7
   1188c:	e13ffd05 	stb	r4,-12(fp)
   11890:	e0fffe05 	stb	r3,-8(fp)
   11894:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   11898:	0089c404 	movi	r2,10000
   1189c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   118a0:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   118a4:	00000c06 	br	118d8 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   118a8:	e0bffa17 	ldw	r2,-24(fp)
   118ac:	108002a8 	cmpgeui	r2,r2,10
   118b0:	1000021e 	bne	r2,zero,118bc <alt_avalon_i2c_cmd_write+0x50>
   118b4:	0109c404 	movi	r4,10000
   118b8:	0013a080 	call	13a08 <alt_busy_sleep>
      if (--timeout == 0)
   118bc:	e0bffa17 	ldw	r2,-24(fp)
   118c0:	10bfffc4 	addi	r2,r2,-1
   118c4:	e0bffa15 	stw	r2,-24(fp)
   118c8:	e0bffa17 	ldw	r2,-24(fp)
   118cc:	1000021e 	bne	r2,zero,118d8 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   118d0:	00bfff84 	movi	r2,-2
   118d4:	00001906 	br	1193c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   118d8:	e0bffc17 	ldw	r2,-16(fp)
   118dc:	10800317 	ldw	r2,12(r2)
   118e0:	10800404 	addi	r2,r2,16
   118e4:	10800037 	ldwio	r2,0(r2)
   118e8:	1080004c 	andi	r2,r2,1
   118ec:	103fee26 	beq	r2,zero,118a8 <__alt_data_end+0xfc0118a8>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   118f0:	e0bffc17 	ldw	r2,-16(fp)
   118f4:	10800317 	ldw	r2,12(r2)
   118f8:	e13ffd03 	ldbu	r4,-12(fp)
   118fc:	e0fffe03 	ldbu	r3,-8(fp)
   11900:	1806927a 	slli	r3,r3,9
   11904:	20c8b03a 	or	r4,r4,r3
   11908:	e0ffff03 	ldbu	r3,-4(fp)
   1190c:	1806923a 	slli	r3,r3,8
   11910:	20c6b03a 	or	r3,r4,r3
   11914:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   11918:	e0bffb04 	addi	r2,fp,-20
   1191c:	100b883a 	mov	r5,r2
   11920:	e13ffc17 	ldw	r4,-16(fp)
   11924:	0011aac0 	call	11aac <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   11928:	e0bffb04 	addi	r2,fp,-20
   1192c:	100b883a 	mov	r5,r2
   11930:	e13ffc17 	ldw	r4,-16(fp)
   11934:	0011af80 	call	11af8 <alt_avalon_i2c_check_arblost>
    
    return status;
   11938:	e0bffb17 	ldw	r2,-20(fp)
}
   1193c:	e037883a 	mov	sp,fp
   11940:	dfc00117 	ldw	ra,4(sp)
   11944:	df000017 	ldw	fp,0(sp)
   11948:	dec00204 	addi	sp,sp,8
   1194c:	f800283a 	ret

00011950 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11950:	defffa04 	addi	sp,sp,-24
   11954:	dfc00515 	stw	ra,20(sp)
   11958:	df000415 	stw	fp,16(sp)
   1195c:	df000404 	addi	fp,sp,16
   11960:	e13ffd15 	stw	r4,-12(fp)
   11964:	e17ffe15 	stw	r5,-8(fp)
   11968:	3005883a 	mov	r2,r6
   1196c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   11970:	e0bffd17 	ldw	r2,-12(fp)
   11974:	10800d17 	ldw	r2,52(r2)
   11978:	10800058 	cmpnei	r2,r2,1
   1197c:	10001c1e 	bne	r2,zero,119f0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11980:	e0bffd17 	ldw	r2,-12(fp)
   11984:	10800917 	ldw	r2,36(r2)
   11988:	109e0014 	ori	r2,r2,30720
   1198c:	1004d1fa 	srli	r2,r2,7
   11990:	1007883a 	mov	r3,r2
   11994:	00bfff84 	movi	r2,-2
   11998:	1884703a 	and	r2,r3,r2
   1199c:	1007883a 	mov	r3,r2
   119a0:	e0bffe17 	ldw	r2,-8(fp)
   119a4:	1884b03a 	or	r2,r3,r2
   119a8:	10803fcc 	andi	r2,r2,255
   119ac:	e0ffff03 	ldbu	r3,-4(fp)
   119b0:	000f883a 	mov	r7,zero
   119b4:	180d883a 	mov	r6,r3
   119b8:	100b883a 	mov	r5,r2
   119bc:	e13ffd17 	ldw	r4,-12(fp)
   119c0:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   119c4:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   119c8:	e0bffd17 	ldw	r2,-12(fp)
   119cc:	10800917 	ldw	r2,36(r2)
   119d0:	10803fcc 	andi	r2,r2,255
   119d4:	000f883a 	mov	r7,zero
   119d8:	000d883a 	mov	r6,zero
   119dc:	100b883a 	mov	r5,r2
   119e0:	e13ffd17 	ldw	r4,-12(fp)
   119e4:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   119e8:	e0bffc15 	stw	r2,-16(fp)
   119ec:	00000e06 	br	11a28 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   119f0:	e0bffd17 	ldw	r2,-12(fp)
   119f4:	10800917 	ldw	r2,36(r2)
   119f8:	1085883a 	add	r2,r2,r2
   119fc:	1007883a 	mov	r3,r2
   11a00:	e0bffe17 	ldw	r2,-8(fp)
   11a04:	1884b03a 	or	r2,r3,r2
   11a08:	10803fcc 	andi	r2,r2,255
   11a0c:	e0ffff03 	ldbu	r3,-4(fp)
   11a10:	000f883a 	mov	r7,zero
   11a14:	180d883a 	mov	r6,r3
   11a18:	100b883a 	mov	r5,r2
   11a1c:	e13ffd17 	ldw	r4,-12(fp)
   11a20:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   11a24:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   11a28:	e0bffc17 	ldw	r2,-16(fp)
}
   11a2c:	e037883a 	mov	sp,fp
   11a30:	dfc00117 	ldw	ra,4(sp)
   11a34:	df000017 	ldw	fp,0(sp)
   11a38:	dec00204 	addi	sp,sp,8
   11a3c:	f800283a 	ret

00011a40 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   11a40:	defffd04 	addi	sp,sp,-12
   11a44:	df000215 	stw	fp,8(sp)
   11a48:	df000204 	addi	fp,sp,8
   11a4c:	e13ffe15 	stw	r4,-8(fp)
   11a50:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   11a54:	e0bffe17 	ldw	r2,-8(fp)
   11a58:	10c00917 	ldw	r3,36(r2)
   11a5c:	e0bfff17 	ldw	r2,-4(fp)
   11a60:	10c00015 	stw	r3,0(r2)
}
   11a64:	0001883a 	nop
   11a68:	e037883a 	mov	sp,fp
   11a6c:	df000017 	ldw	fp,0(sp)
   11a70:	dec00104 	addi	sp,sp,4
   11a74:	f800283a 	ret

00011a78 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   11a78:	defffd04 	addi	sp,sp,-12
   11a7c:	df000215 	stw	fp,8(sp)
   11a80:	df000204 	addi	fp,sp,8
   11a84:	e13ffe15 	stw	r4,-8(fp)
   11a88:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   11a8c:	e0bffe17 	ldw	r2,-8(fp)
   11a90:	e0ffff17 	ldw	r3,-4(fp)
   11a94:	10c00915 	stw	r3,36(r2)
}
   11a98:	0001883a 	nop
   11a9c:	e037883a 	mov	sp,fp
   11aa0:	df000017 	ldw	fp,0(sp)
   11aa4:	dec00104 	addi	sp,sp,4
   11aa8:	f800283a 	ret

00011aac <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   11aac:	defffd04 	addi	sp,sp,-12
   11ab0:	df000215 	stw	fp,8(sp)
   11ab4:	df000204 	addi	fp,sp,8
   11ab8:	e13ffe15 	stw	r4,-8(fp)
   11abc:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   11ac0:	e0bffe17 	ldw	r2,-8(fp)
   11ac4:	10800317 	ldw	r2,12(r2)
   11ac8:	10800404 	addi	r2,r2,16
   11acc:	10800037 	ldwio	r2,0(r2)
   11ad0:	1080010c 	andi	r2,r2,4
   11ad4:	10000326 	beq	r2,zero,11ae4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11ad8:	e0bfff17 	ldw	r2,-4(fp)
   11adc:	00fffec4 	movi	r3,-5
   11ae0:	10c00015 	stw	r3,0(r2)
    }
}
   11ae4:	0001883a 	nop
   11ae8:	e037883a 	mov	sp,fp
   11aec:	df000017 	ldw	fp,0(sp)
   11af0:	dec00104 	addi	sp,sp,4
   11af4:	f800283a 	ret

00011af8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   11af8:	defffd04 	addi	sp,sp,-12
   11afc:	df000215 	stw	fp,8(sp)
   11b00:	df000204 	addi	fp,sp,8
   11b04:	e13ffe15 	stw	r4,-8(fp)
   11b08:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   11b0c:	e0bffe17 	ldw	r2,-8(fp)
   11b10:	10800317 	ldw	r2,12(r2)
   11b14:	10800404 	addi	r2,r2,16
   11b18:	10800037 	ldwio	r2,0(r2)
   11b1c:	1080020c 	andi	r2,r2,8
   11b20:	10000326 	beq	r2,zero,11b30 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   11b24:	e0bfff17 	ldw	r2,-4(fp)
   11b28:	00fffe84 	movi	r3,-6
   11b2c:	10c00015 	stw	r3,0(r2)
    }
}
   11b30:	0001883a 	nop
   11b34:	e037883a 	mov	sp,fp
   11b38:	df000017 	ldw	fp,0(sp)
   11b3c:	dec00104 	addi	sp,sp,4
   11b40:	f800283a 	ret

00011b44 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11b44:	defff804 	addi	sp,sp,-32
   11b48:	dfc00715 	stw	ra,28(sp)
   11b4c:	df000615 	stw	fp,24(sp)
   11b50:	df000604 	addi	fp,sp,24
   11b54:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11b58:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	10800717 	ldw	r2,28(r2)
   11b64:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   11b68:	e0bffb17 	ldw	r2,-20(fp)
   11b6c:	10800117 	ldw	r2,4(r2)
   11b70:	10800044 	addi	r2,r2,1
   11b74:	0149c404 	movi	r5,10000
   11b78:	1009883a 	mov	r4,r2
   11b7c:	00034100 	call	3410 <__mulsi3>
   11b80:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   11b84:	e0bffd04 	addi	r2,fp,-12
   11b88:	100b883a 	mov	r5,r2
   11b8c:	e13fff17 	ldw	r4,-4(fp)
   11b90:	00129dc0 	call	129dc <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   11b94:	e0bffd17 	ldw	r2,-12(fp)
   11b98:	100b883a 	mov	r5,r2
   11b9c:	e13fff17 	ldw	r4,-4(fp)
   11ba0:	00129100 	call	12910 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   11ba4:	e0bffc04 	addi	r2,fp,-16
   11ba8:	100b883a 	mov	r5,r2
   11bac:	e13fff17 	ldw	r4,-4(fp)
   11bb0:	0011aac0 	call	11aac <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   11bb4:	e0bffc17 	ldw	r2,-16(fp)
   11bb8:	10002226 	beq	r2,zero,11c44 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   11bbc:	e0bffb17 	ldw	r2,-20(fp)
   11bc0:	10800217 	ldw	r2,8(r2)
   11bc4:	10001d26 	beq	r2,zero,11c3c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11bc8:	00000d06 	br	11c00 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   11bcc:	e0bffa17 	ldw	r2,-24(fp)
   11bd0:	108002a8 	cmpgeui	r2,r2,10
   11bd4:	1000021e 	bne	r2,zero,11be0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   11bd8:	0109c404 	movi	r4,10000
   11bdc:	0013a080 	call	13a08 <alt_busy_sleep>
              if (--timeout == 0)
   11be0:	e0bffa17 	ldw	r2,-24(fp)
   11be4:	10bfffc4 	addi	r2,r2,-1
   11be8:	e0bffa15 	stw	r2,-24(fp)
   11bec:	e0bffa17 	ldw	r2,-24(fp)
   11bf0:	1000031e 	bne	r2,zero,11c00 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   11bf4:	00bfff84 	movi	r2,-2
   11bf8:	e0bffc15 	stw	r2,-16(fp)
                 break;
   11bfc:	00000306 	br	11c0c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11c00:	e13fff17 	ldw	r4,-4(fp)
   11c04:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   11c08:	103ff01e 	bne	r2,zero,11bcc <__alt_data_end+0xfc011bcc>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   11c0c:	e0bffb17 	ldw	r2,-20(fp)
   11c10:	10800017 	ldw	r2,0(r2)
   11c14:	e0fffe04 	addi	r3,fp,-8
   11c18:	180f883a 	mov	r7,r3
   11c1c:	000d883a 	mov	r6,zero
   11c20:	100b883a 	mov	r5,r2
   11c24:	e13fff17 	ldw	r4,-4(fp)
   11c28:	001171c0 	call	1171c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   11c2c:	e13fff17 	ldw	r4,-4(fp)
   11c30:	00113800 	call	11380 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   11c34:	e0bffb17 	ldw	r2,-20(fp)
   11c38:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   11c3c:	e0bffc17 	ldw	r2,-16(fp)
   11c40:	00000a06 	br	11c6c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   11c44:	e0bffb17 	ldw	r2,-20(fp)
   11c48:	10800217 	ldw	r2,8(r2)
   11c4c:	10000626 	beq	r2,zero,11c68 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   11c50:	e0bffd17 	ldw	r2,-12(fp)
   11c54:	100b883a 	mov	r5,r2
   11c58:	e13fff17 	ldw	r4,-4(fp)
   11c5c:	00129780 	call	12978 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   11c60:	00bffe44 	movi	r2,-7
   11c64:	00000106 	br	11c6c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   11c68:	0005883a 	mov	r2,zero
}
   11c6c:	e037883a 	mov	sp,fp
   11c70:	dfc00117 	ldw	ra,4(sp)
   11c74:	df000017 	ldw	fp,0(sp)
   11c78:	dec00204 	addi	sp,sp,8
   11c7c:	f800283a 	ret

00011c80 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11c80:	defff704 	addi	sp,sp,-36
   11c84:	dfc00815 	stw	ra,32(sp)
   11c88:	df000715 	stw	fp,28(sp)
   11c8c:	df000704 	addi	fp,sp,28
   11c90:	e13ffc15 	stw	r4,-16(fp)
   11c94:	e17ffd15 	stw	r5,-12(fp)
   11c98:	e1bffe15 	stw	r6,-8(fp)
   11c9c:	3805883a 	mov	r2,r7
   11ca0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11ca4:	0089c404 	movi	r2,10000
   11ca8:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   11cac:	00002206 	br	11d38 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   11cb0:	e0bffb17 	ldw	r2,-20(fp)
   11cb4:	108002a8 	cmpgeui	r2,r2,10
   11cb8:	1000021e 	bne	r2,zero,11cc4 <alt_avalon_i2c_master_tx+0x44>
   11cbc:	0109c404 	movi	r4,10000
   11cc0:	0013a080 	call	13a08 <alt_busy_sleep>
      if (use_interrupts)
   11cc4:	e0bfff03 	ldbu	r2,-4(fp)
   11cc8:	10000926 	beq	r2,zero,11cf0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   11ccc:	00800044 	movi	r2,1
   11cd0:	d8800015 	stw	r2,0(sp)
   11cd4:	000f883a 	mov	r7,zero
   11cd8:	e1bffe17 	ldw	r6,-8(fp)
   11cdc:	e17ffd17 	ldw	r5,-12(fp)
   11ce0:	e13ffc17 	ldw	r4,-16(fp)
   11ce4:	001222c0 	call	1222c <alt_avalon_i2c_master_transmit_using_interrupts>
   11ce8:	e0bffa15 	stw	r2,-24(fp)
   11cec:	00000806 	br	11d10 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   11cf0:	00800044 	movi	r2,1
   11cf4:	d8800015 	stw	r2,0(sp)
   11cf8:	000f883a 	mov	r7,zero
   11cfc:	e1bffe17 	ldw	r6,-8(fp)
   11d00:	e17ffd17 	ldw	r5,-12(fp)
   11d04:	e13ffc17 	ldw	r4,-16(fp)
   11d08:	001206c0 	call	1206c <alt_avalon_i2c_master_transmit>
   11d0c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11d10:	e0bffa17 	ldw	r2,-24(fp)
   11d14:	10bffea0 	cmpeqi	r2,r2,-6
   11d18:	1000061e 	bne	r2,zero,11d34 <alt_avalon_i2c_master_tx+0xb4>
   11d1c:	e0bffa17 	ldw	r2,-24(fp)
   11d20:	10bffee0 	cmpeqi	r2,r2,-5
   11d24:	1000031e 	bne	r2,zero,11d34 <alt_avalon_i2c_master_tx+0xb4>
   11d28:	e0bffa17 	ldw	r2,-24(fp)
   11d2c:	10bffe58 	cmpnei	r2,r2,-7
   11d30:	1000061e 	bne	r2,zero,11d4c <alt_avalon_i2c_master_tx+0xcc>
   11d34:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   11d38:	e0bffb17 	ldw	r2,-20(fp)
   11d3c:	10ffffc4 	addi	r3,r2,-1
   11d40:	e0fffb15 	stw	r3,-20(fp)
   11d44:	103fda1e 	bne	r2,zero,11cb0 <__alt_data_end+0xfc011cb0>
   11d48:	00000106 	br	11d50 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   11d4c:	0001883a 	nop
    }

    return status;
   11d50:	e0bffa17 	ldw	r2,-24(fp)
}        
   11d54:	e037883a 	mov	sp,fp
   11d58:	dfc00117 	ldw	ra,4(sp)
   11d5c:	df000017 	ldw	fp,0(sp)
   11d60:	dec00204 	addi	sp,sp,8
   11d64:	f800283a 	ret

00011d68 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11d68:	defff704 	addi	sp,sp,-36
   11d6c:	dfc00815 	stw	ra,32(sp)
   11d70:	df000715 	stw	fp,28(sp)
   11d74:	df000704 	addi	fp,sp,28
   11d78:	e13ffc15 	stw	r4,-16(fp)
   11d7c:	e17ffd15 	stw	r5,-12(fp)
   11d80:	e1bffe15 	stw	r6,-8(fp)
   11d84:	3805883a 	mov	r2,r7
   11d88:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11d8c:	0089c404 	movi	r2,10000
   11d90:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   11d94:	e0bfff03 	ldbu	r2,-4(fp)
   11d98:	10003426 	beq	r2,zero,11e6c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   11d9c:	00001706 	br	11dfc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11da0:	e0bffb17 	ldw	r2,-20(fp)
   11da4:	108002a8 	cmpgeui	r2,r2,10
   11da8:	1000021e 	bne	r2,zero,11db4 <alt_avalon_i2c_master_rx+0x4c>
   11dac:	0109c404 	movi	r4,10000
   11db0:	0013a080 	call	13a08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11db4:	00800044 	movi	r2,1
   11db8:	d8800015 	stw	r2,0(sp)
   11dbc:	000f883a 	mov	r7,zero
   11dc0:	e1bffe17 	ldw	r6,-8(fp)
   11dc4:	e17ffd17 	ldw	r5,-12(fp)
   11dc8:	e13ffc17 	ldw	r4,-16(fp)
   11dcc:	00126480 	call	12648 <alt_avalon_i2c_master_receive_using_interrupts>
   11dd0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11dd4:	e0bffa17 	ldw	r2,-24(fp)
   11dd8:	10bffea0 	cmpeqi	r2,r2,-6
   11ddc:	1000061e 	bne	r2,zero,11df8 <alt_avalon_i2c_master_rx+0x90>
   11de0:	e0bffa17 	ldw	r2,-24(fp)
   11de4:	10bffee0 	cmpeqi	r2,r2,-5
   11de8:	1000031e 	bne	r2,zero,11df8 <alt_avalon_i2c_master_rx+0x90>
   11dec:	e0bffa17 	ldw	r2,-24(fp)
   11df0:	10bffe58 	cmpnei	r2,r2,-7
   11df4:	1000221e 	bne	r2,zero,11e80 <alt_avalon_i2c_master_rx+0x118>
   11df8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   11dfc:	e0bffb17 	ldw	r2,-20(fp)
   11e00:	10ffffc4 	addi	r3,r2,-1
   11e04:	e0fffb15 	stw	r3,-20(fp)
   11e08:	103fe51e 	bne	r2,zero,11da0 <__alt_data_end+0xfc011da0>
   11e0c:	00001f06 	br	11e8c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11e10:	e0bffb17 	ldw	r2,-20(fp)
   11e14:	108002a8 	cmpgeui	r2,r2,10
   11e18:	1000021e 	bne	r2,zero,11e24 <alt_avalon_i2c_master_rx+0xbc>
   11e1c:	0109c404 	movi	r4,10000
   11e20:	0013a080 	call	13a08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11e24:	00800044 	movi	r2,1
   11e28:	d8800015 	stw	r2,0(sp)
   11e2c:	000f883a 	mov	r7,zero
   11e30:	e1bffe17 	ldw	r6,-8(fp)
   11e34:	e17ffd17 	ldw	r5,-12(fp)
   11e38:	e13ffc17 	ldw	r4,-16(fp)
   11e3c:	00124380 	call	12438 <alt_avalon_i2c_master_receive>
   11e40:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11e44:	e0bffa17 	ldw	r2,-24(fp)
   11e48:	10bffea0 	cmpeqi	r2,r2,-6
   11e4c:	1000061e 	bne	r2,zero,11e68 <alt_avalon_i2c_master_rx+0x100>
   11e50:	e0bffa17 	ldw	r2,-24(fp)
   11e54:	10bffee0 	cmpeqi	r2,r2,-5
   11e58:	1000031e 	bne	r2,zero,11e68 <alt_avalon_i2c_master_rx+0x100>
   11e5c:	e0bffa17 	ldw	r2,-24(fp)
   11e60:	10bffe58 	cmpnei	r2,r2,-7
   11e64:	1000081e 	bne	r2,zero,11e88 <alt_avalon_i2c_master_rx+0x120>
   11e68:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   11e6c:	e0bffb17 	ldw	r2,-20(fp)
   11e70:	10ffffc4 	addi	r3,r2,-1
   11e74:	e0fffb15 	stw	r3,-20(fp)
   11e78:	103fe51e 	bne	r2,zero,11e10 <__alt_data_end+0xfc011e10>
   11e7c:	00000306 	br	11e8c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   11e80:	0001883a 	nop
   11e84:	00000106 	br	11e8c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   11e88:	0001883a 	nop
      }
    }
    
    return status;
   11e8c:	e0bffa17 	ldw	r2,-24(fp)
}        
   11e90:	e037883a 	mov	sp,fp
   11e94:	dfc00117 	ldw	ra,4(sp)
   11e98:	df000017 	ldw	fp,0(sp)
   11e9c:	dec00204 	addi	sp,sp,8
   11ea0:	f800283a 	ret

00011ea4 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   11ea4:	defff604 	addi	sp,sp,-40
   11ea8:	dfc00915 	stw	ra,36(sp)
   11eac:	df000815 	stw	fp,32(sp)
   11eb0:	df000804 	addi	fp,sp,32
   11eb4:	e13ffb15 	stw	r4,-20(fp)
   11eb8:	e17ffc15 	stw	r5,-16(fp)
   11ebc:	e1bffd15 	stw	r6,-12(fp)
   11ec0:	e1fffe15 	stw	r7,-8(fp)
   11ec4:	e0800317 	ldw	r2,12(fp)
   11ec8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11ecc:	0089c404 	movi	r2,10000
   11ed0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   11ed4:	e0bfff03 	ldbu	r2,-4(fp)
   11ed8:	10005626 	beq	r2,zero,12034 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   11edc:	00002806 	br	11f80 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11ee0:	e0bffa17 	ldw	r2,-24(fp)
   11ee4:	108002a8 	cmpgeui	r2,r2,10
   11ee8:	1000021e 	bne	r2,zero,11ef4 <alt_avalon_i2c_master_tx_rx+0x50>
   11eec:	0109c404 	movi	r4,10000
   11ef0:	0013a080 	call	13a08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11ef4:	d8000015 	stw	zero,0(sp)
   11ef8:	000f883a 	mov	r7,zero
   11efc:	e1bffd17 	ldw	r6,-12(fp)
   11f00:	e17ffc17 	ldw	r5,-16(fp)
   11f04:	e13ffb17 	ldw	r4,-20(fp)
   11f08:	001222c0 	call	1222c <alt_avalon_i2c_master_transmit_using_interrupts>
   11f0c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11f10:	e0bff917 	ldw	r2,-28(fp)
   11f14:	10bffea0 	cmpeqi	r2,r2,-6
   11f18:	1000191e 	bne	r2,zero,11f80 <alt_avalon_i2c_master_tx_rx+0xdc>
   11f1c:	e0bff917 	ldw	r2,-28(fp)
   11f20:	10bffee0 	cmpeqi	r2,r2,-5
   11f24:	1000161e 	bne	r2,zero,11f80 <alt_avalon_i2c_master_tx_rx+0xdc>
   11f28:	e0bff917 	ldw	r2,-28(fp)
   11f2c:	10bffe58 	cmpnei	r2,r2,-7
   11f30:	1000011e 	bne	r2,zero,11f38 <alt_avalon_i2c_master_tx_rx+0x94>
   11f34:	00001206 	br	11f80 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11f38:	00800044 	movi	r2,1
   11f3c:	d8800015 	stw	r2,0(sp)
   11f40:	01c00044 	movi	r7,1
   11f44:	e1800217 	ldw	r6,8(fp)
   11f48:	e17ffe17 	ldw	r5,-8(fp)
   11f4c:	e13ffb17 	ldw	r4,-20(fp)
   11f50:	00126480 	call	12648 <alt_avalon_i2c_master_receive_using_interrupts>
   11f54:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11f58:	e0bff917 	ldw	r2,-28(fp)
   11f5c:	10bffea0 	cmpeqi	r2,r2,-6
   11f60:	1000061e 	bne	r2,zero,11f7c <alt_avalon_i2c_master_tx_rx+0xd8>
   11f64:	e0bff917 	ldw	r2,-28(fp)
   11f68:	10bffee0 	cmpeqi	r2,r2,-5
   11f6c:	1000031e 	bne	r2,zero,11f7c <alt_avalon_i2c_master_tx_rx+0xd8>
   11f70:	e0bff917 	ldw	r2,-28(fp)
   11f74:	10bffe58 	cmpnei	r2,r2,-7
   11f78:	1000331e 	bne	r2,zero,12048 <alt_avalon_i2c_master_tx_rx+0x1a4>
   11f7c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   11f80:	e0bffa17 	ldw	r2,-24(fp)
   11f84:	10ffffc4 	addi	r3,r2,-1
   11f88:	e0fffa15 	stw	r3,-24(fp)
   11f8c:	103fd41e 	bne	r2,zero,11ee0 <__alt_data_end+0xfc011ee0>
   11f90:	00003006 	br	12054 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11f94:	e0bffa17 	ldw	r2,-24(fp)
   11f98:	108002a8 	cmpgeui	r2,r2,10
   11f9c:	1000021e 	bne	r2,zero,11fa8 <alt_avalon_i2c_master_tx_rx+0x104>
   11fa0:	0109c404 	movi	r4,10000
   11fa4:	0013a080 	call	13a08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11fa8:	d8000015 	stw	zero,0(sp)
   11fac:	000f883a 	mov	r7,zero
   11fb0:	e1bffd17 	ldw	r6,-12(fp)
   11fb4:	e17ffc17 	ldw	r5,-16(fp)
   11fb8:	e13ffb17 	ldw	r4,-20(fp)
   11fbc:	001206c0 	call	1206c <alt_avalon_i2c_master_transmit>
   11fc0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11fc4:	e0bff917 	ldw	r2,-28(fp)
   11fc8:	10bffea0 	cmpeqi	r2,r2,-6
   11fcc:	1000191e 	bne	r2,zero,12034 <alt_avalon_i2c_master_tx_rx+0x190>
   11fd0:	e0bff917 	ldw	r2,-28(fp)
   11fd4:	10bffee0 	cmpeqi	r2,r2,-5
   11fd8:	1000161e 	bne	r2,zero,12034 <alt_avalon_i2c_master_tx_rx+0x190>
   11fdc:	e0bff917 	ldw	r2,-28(fp)
   11fe0:	10bffe58 	cmpnei	r2,r2,-7
   11fe4:	1000011e 	bne	r2,zero,11fec <alt_avalon_i2c_master_tx_rx+0x148>
   11fe8:	00001206 	br	12034 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11fec:	00800044 	movi	r2,1
   11ff0:	d8800015 	stw	r2,0(sp)
   11ff4:	01c00044 	movi	r7,1
   11ff8:	e1800217 	ldw	r6,8(fp)
   11ffc:	e17ffe17 	ldw	r5,-8(fp)
   12000:	e13ffb17 	ldw	r4,-20(fp)
   12004:	00124380 	call	12438 <alt_avalon_i2c_master_receive>
   12008:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1200c:	e0bff917 	ldw	r2,-28(fp)
   12010:	10bffea0 	cmpeqi	r2,r2,-6
   12014:	1000061e 	bne	r2,zero,12030 <alt_avalon_i2c_master_tx_rx+0x18c>
   12018:	e0bff917 	ldw	r2,-28(fp)
   1201c:	10bffee0 	cmpeqi	r2,r2,-5
   12020:	1000031e 	bne	r2,zero,12030 <alt_avalon_i2c_master_tx_rx+0x18c>
   12024:	e0bff917 	ldw	r2,-28(fp)
   12028:	10bffe58 	cmpnei	r2,r2,-7
   1202c:	1000081e 	bne	r2,zero,12050 <alt_avalon_i2c_master_tx_rx+0x1ac>
   12030:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   12034:	e0bffa17 	ldw	r2,-24(fp)
   12038:	10ffffc4 	addi	r3,r2,-1
   1203c:	e0fffa15 	stw	r3,-24(fp)
   12040:	103fd41e 	bne	r2,zero,11f94 <__alt_data_end+0xfc011f94>
   12044:	00000306 	br	12054 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   12048:	0001883a 	nop
   1204c:	00000106 	br	12054 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   12050:	0001883a 	nop
      }
    }
    
    return status;
   12054:	e0bff917 	ldw	r2,-28(fp)
}                                       
   12058:	e037883a 	mov	sp,fp
   1205c:	dfc00117 	ldw	ra,4(sp)
   12060:	df000017 	ldw	fp,0(sp)
   12064:	dec00204 	addi	sp,sp,8
   12068:	f800283a 	ret

0001206c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1206c:	defff704 	addi	sp,sp,-36
   12070:	dfc00815 	stw	ra,32(sp)
   12074:	df000715 	stw	fp,28(sp)
   12078:	df000704 	addi	fp,sp,28
   1207c:	e13ffb15 	stw	r4,-20(fp)
   12080:	e17ffc15 	stw	r5,-16(fp)
   12084:	e1bffd15 	stw	r6,-12(fp)
   12088:	3807883a 	mov	r3,r7
   1208c:	e0800217 	ldw	r2,8(fp)
   12090:	e0fffe05 	stb	r3,-8(fp)
   12094:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12098:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   1209c:	0149c404 	movi	r5,10000
   120a0:	e13ffd17 	ldw	r4,-12(fp)
   120a4:	00034100 	call	3410 <__mulsi3>
   120a8:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   120ac:	e0bffd17 	ldw	r2,-12(fp)
   120b0:	1000021e 	bne	r2,zero,120bc <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   120b4:	0005883a 	mov	r2,zero
   120b8:	00005706 	br	12218 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   120bc:	e0bffe03 	ldbu	r2,-8(fp)
   120c0:	10000a1e 	bne	r2,zero,120ec <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   120c4:	e13ffb17 	ldw	r4,-20(fp)
   120c8:	00112e80 	call	112e8 <alt_avalon_i2c_enable>
   120cc:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   120d0:	e0bffa17 	ldw	r2,-24(fp)
   120d4:	10000226 	beq	r2,zero,120e0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   120d8:	e0bffa17 	ldw	r2,-24(fp)
   120dc:	00004e06 	br	12218 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   120e0:	01400704 	movi	r5,28
   120e4:	e13ffb17 	ldw	r4,-20(fp)
   120e8:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   120ec:	e0bffe03 	ldbu	r2,-8(fp)
   120f0:	100d883a 	mov	r6,r2
   120f4:	000b883a 	mov	r5,zero
   120f8:	e13ffb17 	ldw	r4,-20(fp)
   120fc:	00119500 	call	11950 <alt_avalon_i2c_send_address>
   12100:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   12104:	e0bffa17 	ldw	r2,-24(fp)
   12108:	1000271e 	bne	r2,zero,121a8 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1210c:	00000f06 	br	1214c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12110:	e0bffc17 	ldw	r2,-16(fp)
   12114:	10800003 	ldbu	r2,0(r2)
   12118:	10803fcc 	andi	r2,r2,255
   1211c:	000f883a 	mov	r7,zero
   12120:	000d883a 	mov	r6,zero
   12124:	100b883a 	mov	r5,r2
   12128:	e13ffb17 	ldw	r4,-20(fp)
   1212c:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   12130:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   12134:	e0bffc17 	ldw	r2,-16(fp)
   12138:	10800044 	addi	r2,r2,1
   1213c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   12140:	e0bffd17 	ldw	r2,-12(fp)
   12144:	10bfffc4 	addi	r2,r2,-1
   12148:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1214c:	e0bffd17 	ldw	r2,-12(fp)
   12150:	108000b0 	cmpltui	r2,r2,2
   12154:	1000021e 	bne	r2,zero,12160 <alt_avalon_i2c_master_transmit+0xf4>
   12158:	e0bffa17 	ldw	r2,-24(fp)
   1215c:	103fec26 	beq	r2,zero,12110 <__alt_data_end+0xfc012110>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12160:	e0bffa17 	ldw	r2,-24(fp)
   12164:	1000101e 	bne	r2,zero,121a8 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12168:	e0bffc17 	ldw	r2,-16(fp)
   1216c:	10800003 	ldbu	r2,0(r2)
   12170:	10803fcc 	andi	r2,r2,255
   12174:	e0ffff03 	ldbu	r3,-4(fp)
   12178:	180f883a 	mov	r7,r3
   1217c:	000d883a 	mov	r6,zero
   12180:	100b883a 	mov	r5,r2
   12184:	e13ffb17 	ldw	r4,-20(fp)
   12188:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   1218c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   12190:	e0bffc17 	ldw	r2,-16(fp)
   12194:	10800044 	addi	r2,r2,1
   12198:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1219c:	e0bffd17 	ldw	r2,-12(fp)
   121a0:	10bfffc4 	addi	r2,r2,-1
   121a4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   121a8:	e0bfff03 	ldbu	r2,-4(fp)
   121ac:	1000101e 	bne	r2,zero,121f0 <alt_avalon_i2c_master_transmit+0x184>
   121b0:	e0bffa17 	ldw	r2,-24(fp)
   121b4:	10001726 	beq	r2,zero,12214 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   121b8:	00000d06 	br	121f0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   121bc:	e0bff917 	ldw	r2,-28(fp)
   121c0:	108002a8 	cmpgeui	r2,r2,10
   121c4:	1000021e 	bne	r2,zero,121d0 <alt_avalon_i2c_master_transmit+0x164>
   121c8:	0109c404 	movi	r4,10000
   121cc:	0013a080 	call	13a08 <alt_busy_sleep>
            if (--timeout == 0)
   121d0:	e0bff917 	ldw	r2,-28(fp)
   121d4:	10bfffc4 	addi	r2,r2,-1
   121d8:	e0bff915 	stw	r2,-28(fp)
   121dc:	e0bff917 	ldw	r2,-28(fp)
   121e0:	1000031e 	bne	r2,zero,121f0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   121e4:	00bfff84 	movi	r2,-2
   121e8:	e0bffa15 	stw	r2,-24(fp)
               break;
   121ec:	00000306 	br	121fc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   121f0:	e13ffb17 	ldw	r4,-20(fp)
   121f4:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   121f8:	103ff01e 	bne	r2,zero,121bc <__alt_data_end+0xfc0121bc>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   121fc:	e0bffa04 	addi	r2,fp,-24
   12200:	100b883a 	mov	r5,r2
   12204:	e13ffb17 	ldw	r4,-20(fp)
   12208:	0011aac0 	call	11aac <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1220c:	e13ffb17 	ldw	r4,-20(fp)
   12210:	00113800 	call	11380 <alt_avalon_i2c_disable>
    }


    return status;
   12214:	e0bffa17 	ldw	r2,-24(fp)
}
   12218:	e037883a 	mov	sp,fp
   1221c:	dfc00117 	ldw	ra,4(sp)
   12220:	df000017 	ldw	fp,0(sp)
   12224:	dec00204 	addi	sp,sp,8
   12228:	f800283a 	ret

0001222c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1222c:	defff604 	addi	sp,sp,-40
   12230:	dfc00915 	stw	ra,36(sp)
   12234:	df000815 	stw	fp,32(sp)
   12238:	df000804 	addi	fp,sp,32
   1223c:	e13ffb15 	stw	r4,-20(fp)
   12240:	e17ffc15 	stw	r5,-16(fp)
   12244:	e1bffd15 	stw	r6,-12(fp)
   12248:	3807883a 	mov	r3,r7
   1224c:	e0800217 	ldw	r2,8(fp)
   12250:	e0fffe05 	stb	r3,-8(fp)
   12254:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12258:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   1225c:	0149c404 	movi	r5,10000
   12260:	e13ffd17 	ldw	r4,-12(fp)
   12264:	00034100 	call	3410 <__mulsi3>
   12268:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1226c:	e0bffb17 	ldw	r2,-20(fp)
   12270:	10800717 	ldw	r2,28(r2)
   12274:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   12278:	e0bffd17 	ldw	r2,-12(fp)
   1227c:	1000021e 	bne	r2,zero,12288 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   12280:	0005883a 	mov	r2,zero
   12284:	00006706 	br	12424 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   12288:	e0bffb17 	ldw	r2,-20(fp)
   1228c:	10c00617 	ldw	r3,24(r2)
   12290:	00800074 	movhi	r2,1
   12294:	1083db04 	addi	r2,r2,3948
   12298:	18800226 	beq	r3,r2,122a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   1229c:	00bfff44 	movi	r2,-3
   122a0:	00006006 	br	12424 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   122a4:	e0bffe03 	ldbu	r2,-8(fp)
   122a8:	10000a1e 	bne	r2,zero,122d4 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   122ac:	e13ffb17 	ldw	r4,-20(fp)
   122b0:	00112e80 	call	112e8 <alt_avalon_i2c_enable>
   122b4:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   122b8:	e0bff817 	ldw	r2,-32(fp)
   122bc:	10000226 	beq	r2,zero,122c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   122c0:	e0bff817 	ldw	r2,-32(fp)
   122c4:	00005706 	br	12424 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   122c8:	01400704 	movi	r5,28
   122cc:	e13ffb17 	ldw	r4,-20(fp)
   122d0:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   122d4:	e0bffe03 	ldbu	r2,-8(fp)
   122d8:	100d883a 	mov	r6,r2
   122dc:	000b883a 	mov	r5,zero
   122e0:	e13ffb17 	ldw	r4,-20(fp)
   122e4:	00119500 	call	11950 <alt_avalon_i2c_send_address>
   122e8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   122ec:	e0bff817 	ldw	r2,-32(fp)
   122f0:	1000271e 	bne	r2,zero,12390 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   122f4:	00000f06 	br	12334 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   122f8:	e0bffc17 	ldw	r2,-16(fp)
   122fc:	10800003 	ldbu	r2,0(r2)
   12300:	10803fcc 	andi	r2,r2,255
   12304:	000f883a 	mov	r7,zero
   12308:	000d883a 	mov	r6,zero
   1230c:	100b883a 	mov	r5,r2
   12310:	e13ffb17 	ldw	r4,-20(fp)
   12314:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   12318:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   1231c:	e0bffc17 	ldw	r2,-16(fp)
   12320:	10800044 	addi	r2,r2,1
   12324:	e0bffc15 	stw	r2,-16(fp)
            --size;
   12328:	e0bffd17 	ldw	r2,-12(fp)
   1232c:	10bfffc4 	addi	r2,r2,-1
   12330:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   12334:	e0bffd17 	ldw	r2,-12(fp)
   12338:	108000b0 	cmpltui	r2,r2,2
   1233c:	1000021e 	bne	r2,zero,12348 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   12340:	e0bff817 	ldw	r2,-32(fp)
   12344:	103fec26 	beq	r2,zero,122f8 <__alt_data_end+0xfc0122f8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12348:	e0bff817 	ldw	r2,-32(fp)
   1234c:	1000101e 	bne	r2,zero,12390 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12350:	e0bffc17 	ldw	r2,-16(fp)
   12354:	10800003 	ldbu	r2,0(r2)
   12358:	10803fcc 	andi	r2,r2,255
   1235c:	e0ffff03 	ldbu	r3,-4(fp)
   12360:	180f883a 	mov	r7,r3
   12364:	000d883a 	mov	r6,zero
   12368:	100b883a 	mov	r5,r2
   1236c:	e13ffb17 	ldw	r4,-20(fp)
   12370:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   12374:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   12378:	e0bffc17 	ldw	r2,-16(fp)
   1237c:	10800044 	addi	r2,r2,1
   12380:	e0bffc15 	stw	r2,-16(fp)
            --size;
   12384:	e0bffd17 	ldw	r2,-12(fp)
   12388:	10bfffc4 	addi	r2,r2,-1
   1238c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   12390:	e0bff817 	ldw	r2,-32(fp)
   12394:	10001426 	beq	r2,zero,123e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   12398:	00000d06 	br	123d0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1239c:	e0bff917 	ldw	r2,-28(fp)
   123a0:	108002a8 	cmpgeui	r2,r2,10
   123a4:	1000021e 	bne	r2,zero,123b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   123a8:	0109c404 	movi	r4,10000
   123ac:	0013a080 	call	13a08 <alt_busy_sleep>
            if (--timeout == 0)
   123b0:	e0bff917 	ldw	r2,-28(fp)
   123b4:	10bfffc4 	addi	r2,r2,-1
   123b8:	e0bff915 	stw	r2,-28(fp)
   123bc:	e0bff917 	ldw	r2,-28(fp)
   123c0:	1000031e 	bne	r2,zero,123d0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   123c4:	00bfff84 	movi	r2,-2
   123c8:	e0bff815 	stw	r2,-32(fp)
               break;
   123cc:	00000306 	br	123dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   123d0:	e13ffb17 	ldw	r4,-20(fp)
   123d4:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   123d8:	103ff01e 	bne	r2,zero,1239c <__alt_data_end+0xfc01239c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   123dc:	e13ffb17 	ldw	r4,-20(fp)
   123e0:	00113800 	call	11380 <alt_avalon_i2c_disable>
   123e4:	00000e06 	br	12420 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   123e8:	e0bfff03 	ldbu	r2,-4(fp)
   123ec:	10000c26 	beq	r2,zero,12420 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   123f0:	01400704 	movi	r5,28
   123f4:	e13ffb17 	ldw	r4,-20(fp)
   123f8:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   123fc:	000b883a 	mov	r5,zero
   12400:	e13ffb17 	ldw	r4,-20(fp)
   12404:	0012b1c0 	call	12b1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   12408:	e0bffa17 	ldw	r2,-24(fp)
   1240c:	00c00044 	movi	r3,1
   12410:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   12414:	01400044 	movi	r5,1
   12418:	e13ffb17 	ldw	r4,-20(fp)
   1241c:	00129780 	call	12978 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   12420:	e0bff817 	ldw	r2,-32(fp)
}
   12424:	e037883a 	mov	sp,fp
   12428:	dfc00117 	ldw	ra,4(sp)
   1242c:	df000017 	ldw	fp,0(sp)
   12430:	dec00204 	addi	sp,sp,8
   12434:	f800283a 	ret

00012438 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   12438:	defff404 	addi	sp,sp,-48
   1243c:	dfc00b15 	stw	ra,44(sp)
   12440:	df000a15 	stw	fp,40(sp)
   12444:	df000a04 	addi	fp,sp,40
   12448:	e13ffb15 	stw	r4,-20(fp)
   1244c:	e17ffc15 	stw	r5,-16(fp)
   12450:	e1bffd15 	stw	r6,-12(fp)
   12454:	3807883a 	mov	r3,r7
   12458:	e0800217 	ldw	r2,8(fp)
   1245c:	e0fffe05 	stb	r3,-8(fp)
   12460:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12464:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   12468:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   1246c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   12470:	e0bffd17 	ldw	r2,-12(fp)
   12474:	1000021e 	bne	r2,zero,12480 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   12478:	0005883a 	mov	r2,zero
   1247c:	00006d06 	br	12634 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   12480:	e0bffe03 	ldbu	r2,-8(fp)
   12484:	10000a1e 	bne	r2,zero,124b0 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   12488:	e13ffb17 	ldw	r4,-20(fp)
   1248c:	00112e80 	call	112e8 <alt_avalon_i2c_enable>
   12490:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   12494:	e0bff917 	ldw	r2,-28(fp)
   12498:	10000226 	beq	r2,zero,124a4 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   1249c:	e0bff917 	ldw	r2,-28(fp)
   124a0:	00006406 	br	12634 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   124a4:	01400704 	movi	r5,28
   124a8:	e13ffb17 	ldw	r4,-20(fp)
   124ac:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   124b0:	e0bffe03 	ldbu	r2,-8(fp)
   124b4:	100d883a 	mov	r6,r2
   124b8:	01400044 	movi	r5,1
   124bc:	e13ffb17 	ldw	r4,-20(fp)
   124c0:	00119500 	call	11950 <alt_avalon_i2c_send_address>
   124c4:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   124c8:	e0bff917 	ldw	r2,-28(fp)
   124cc:	1000341e 	bne	r2,zero,125a0 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   124d0:	00001906 	br	12538 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   124d4:	000f883a 	mov	r7,zero
   124d8:	000d883a 	mov	r6,zero
   124dc:	000b883a 	mov	r5,zero
   124e0:	e13ffb17 	ldw	r4,-20(fp)
   124e4:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   124e8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   124ec:	e0bff817 	ldw	r2,-32(fp)
   124f0:	10800044 	addi	r2,r2,1
   124f4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   124f8:	e0bff917 	ldw	r2,-28(fp)
   124fc:	10000e1e 	bne	r2,zero,12538 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   12500:	e0bffa04 	addi	r2,fp,-24
   12504:	100f883a 	mov	r7,r2
   12508:	000d883a 	mov	r6,zero
   1250c:	e17ffc17 	ldw	r5,-16(fp)
   12510:	e13ffb17 	ldw	r4,-20(fp)
   12514:	001171c0 	call	1171c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   12518:	e0bffa17 	ldw	r2,-24(fp)
   1251c:	e0fffc17 	ldw	r3,-16(fp)
   12520:	1885883a 	add	r2,r3,r2
   12524:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   12528:	e0bffa17 	ldw	r2,-24(fp)
   1252c:	e0fff717 	ldw	r3,-36(fp)
   12530:	1885883a 	add	r2,r3,r2
   12534:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12538:	e0bffd17 	ldw	r2,-12(fp)
   1253c:	10bfffc4 	addi	r2,r2,-1
   12540:	e0fff817 	ldw	r3,-32(fp)
   12544:	1880022e 	bgeu	r3,r2,12550 <alt_avalon_i2c_master_receive+0x118>
   12548:	e0bff917 	ldw	r2,-28(fp)
   1254c:	103fe126 	beq	r2,zero,124d4 <__alt_data_end+0xfc0124d4>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12550:	e0bff917 	ldw	r2,-28(fp)
   12554:	1000121e 	bne	r2,zero,125a0 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12558:	e0bfff03 	ldbu	r2,-4(fp)
   1255c:	100f883a 	mov	r7,r2
   12560:	000d883a 	mov	r6,zero
   12564:	000b883a 	mov	r5,zero
   12568:	e13ffb17 	ldw	r4,-20(fp)
   1256c:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   12570:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   12574:	00000a06 	br	125a0 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   12578:	e17ffc17 	ldw	r5,-16(fp)
   1257c:	e13ffb17 	ldw	r4,-20(fp)
   12580:	00117c40 	call	117c4 <alt_avalon_i2c_rx_read>
   12584:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   12588:	e0bffc17 	ldw	r2,-16(fp)
   1258c:	10800044 	addi	r2,r2,1
   12590:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   12594:	e0bff717 	ldw	r2,-36(fp)
   12598:	10800044 	addi	r2,r2,1
   1259c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   125a0:	e0fff717 	ldw	r3,-36(fp)
   125a4:	e0bffd17 	ldw	r2,-12(fp)
   125a8:	1880022e 	bgeu	r3,r2,125b4 <alt_avalon_i2c_master_receive+0x17c>
   125ac:	e0bff917 	ldw	r2,-28(fp)
   125b0:	103ff126 	beq	r2,zero,12578 <__alt_data_end+0xfc012578>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   125b4:	e0bfff03 	ldbu	r2,-4(fp)
   125b8:	1000021e 	bne	r2,zero,125c4 <alt_avalon_i2c_master_receive+0x18c>
   125bc:	e0bff917 	ldw	r2,-28(fp)
   125c0:	10001b26 	beq	r2,zero,12630 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   125c4:	0149c404 	movi	r5,10000
   125c8:	e13ffd17 	ldw	r4,-12(fp)
   125cc:	00034100 	call	3410 <__mulsi3>
   125d0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   125d4:	00000d06 	br	1260c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   125d8:	e0bff617 	ldw	r2,-40(fp)
   125dc:	108002a8 	cmpgeui	r2,r2,10
   125e0:	1000021e 	bne	r2,zero,125ec <alt_avalon_i2c_master_receive+0x1b4>
   125e4:	0109c404 	movi	r4,10000
   125e8:	0013a080 	call	13a08 <alt_busy_sleep>
            if (--timeout == 0)
   125ec:	e0bff617 	ldw	r2,-40(fp)
   125f0:	10bfffc4 	addi	r2,r2,-1
   125f4:	e0bff615 	stw	r2,-40(fp)
   125f8:	e0bff617 	ldw	r2,-40(fp)
   125fc:	1000031e 	bne	r2,zero,1260c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   12600:	00bfff84 	movi	r2,-2
   12604:	e0bff915 	stw	r2,-28(fp)
               break;
   12608:	00000306 	br	12618 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1260c:	e13ffb17 	ldw	r4,-20(fp)
   12610:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   12614:	103ff01e 	bne	r2,zero,125d8 <__alt_data_end+0xfc0125d8>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   12618:	e0bff904 	addi	r2,fp,-28
   1261c:	100b883a 	mov	r5,r2
   12620:	e13ffb17 	ldw	r4,-20(fp)
   12624:	0011aac0 	call	11aac <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   12628:	e13ffb17 	ldw	r4,-20(fp)
   1262c:	00113800 	call	11380 <alt_avalon_i2c_disable>
    }

    return status;
   12630:	e0bff917 	ldw	r2,-28(fp)
}
   12634:	e037883a 	mov	sp,fp
   12638:	dfc00117 	ldw	ra,4(sp)
   1263c:	df000017 	ldw	fp,0(sp)
   12640:	dec00204 	addi	sp,sp,8
   12644:	f800283a 	ret

00012648 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   12648:	defff504 	addi	sp,sp,-44
   1264c:	dfc00a15 	stw	ra,40(sp)
   12650:	df000915 	stw	fp,36(sp)
   12654:	df000904 	addi	fp,sp,36
   12658:	e13ffb15 	stw	r4,-20(fp)
   1265c:	e17ffc15 	stw	r5,-16(fp)
   12660:	e1bffd15 	stw	r6,-12(fp)
   12664:	3807883a 	mov	r3,r7
   12668:	e0800217 	ldw	r2,8(fp)
   1266c:	e0fffe05 	stb	r3,-8(fp)
   12670:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12674:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   12678:	e0bffb17 	ldw	r2,-20(fp)
   1267c:	10800717 	ldw	r2,28(r2)
   12680:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   12684:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   12688:	e0bffd17 	ldw	r2,-12(fp)
   1268c:	1000021e 	bne	r2,zero,12698 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   12690:	0005883a 	mov	r2,zero
   12694:	00006306 	br	12824 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   12698:	e0bffb17 	ldw	r2,-20(fp)
   1269c:	10c00617 	ldw	r3,24(r2)
   126a0:	00800074 	movhi	r2,1
   126a4:	1083db04 	addi	r2,r2,3948
   126a8:	18800226 	beq	r3,r2,126b4 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   126ac:	00bfff44 	movi	r2,-3
   126b0:	00005c06 	br	12824 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   126b4:	e0bffe03 	ldbu	r2,-8(fp)
   126b8:	10000a1e 	bne	r2,zero,126e4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   126bc:	e13ffb17 	ldw	r4,-20(fp)
   126c0:	00112e80 	call	112e8 <alt_avalon_i2c_enable>
   126c4:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   126c8:	e0bff717 	ldw	r2,-36(fp)
   126cc:	10000226 	beq	r2,zero,126d8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   126d0:	e0bff717 	ldw	r2,-36(fp)
   126d4:	00005306 	br	12824 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   126d8:	01400704 	movi	r5,28
   126dc:	e13ffb17 	ldw	r4,-20(fp)
   126e0:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   126e4:	e0bffe03 	ldbu	r2,-8(fp)
   126e8:	100d883a 	mov	r6,r2
   126ec:	01400044 	movi	r5,1
   126f0:	e13ffb17 	ldw	r4,-20(fp)
   126f4:	00119500 	call	11950 <alt_avalon_i2c_send_address>
   126f8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   126fc:	e0bff717 	ldw	r2,-36(fp)
   12700:	1000191e 	bne	r2,zero,12768 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12704:	00000906 	br	1272c <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12708:	000f883a 	mov	r7,zero
   1270c:	000d883a 	mov	r6,zero
   12710:	000b883a 	mov	r5,zero
   12714:	e13ffb17 	ldw	r4,-20(fp)
   12718:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   1271c:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   12720:	e0bff917 	ldw	r2,-28(fp)
   12724:	10800044 	addi	r2,r2,1
   12728:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   1272c:	e0bffd17 	ldw	r2,-12(fp)
   12730:	10bfffc4 	addi	r2,r2,-1
   12734:	e0fff917 	ldw	r3,-28(fp)
   12738:	1880022e 	bgeu	r3,r2,12744 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   1273c:	e0bff717 	ldw	r2,-36(fp)
   12740:	103ff126 	beq	r2,zero,12708 <__alt_data_end+0xfc012708>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12744:	e0bff717 	ldw	r2,-36(fp)
   12748:	1000071e 	bne	r2,zero,12768 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1274c:	e0bfff03 	ldbu	r2,-4(fp)
   12750:	100f883a 	mov	r7,r2
   12754:	000d883a 	mov	r6,zero
   12758:	000b883a 	mov	r5,zero
   1275c:	e13ffb17 	ldw	r4,-20(fp)
   12760:	001186c0 	call	1186c <alt_avalon_i2c_cmd_write>
   12764:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   12768:	e0bff717 	ldw	r2,-36(fp)
   1276c:	10001826 	beq	r2,zero,127d0 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   12770:	0149c404 	movi	r5,10000
   12774:	e13ffd17 	ldw	r4,-12(fp)
   12778:	00034100 	call	3410 <__mulsi3>
   1277c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   12780:	00000d06 	br	127b8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   12784:	e0bff817 	ldw	r2,-32(fp)
   12788:	108002a8 	cmpgeui	r2,r2,10
   1278c:	1000021e 	bne	r2,zero,12798 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   12790:	0109c404 	movi	r4,10000
   12794:	0013a080 	call	13a08 <alt_busy_sleep>
            if (--timeout == 0)
   12798:	e0bff817 	ldw	r2,-32(fp)
   1279c:	10bfffc4 	addi	r2,r2,-1
   127a0:	e0bff815 	stw	r2,-32(fp)
   127a4:	e0bff817 	ldw	r2,-32(fp)
   127a8:	1000031e 	bne	r2,zero,127b8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   127ac:	00bfff84 	movi	r2,-2
   127b0:	e0bff715 	stw	r2,-36(fp)
               break;
   127b4:	00000306 	br	127c4 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   127b8:	e13ffb17 	ldw	r4,-20(fp)
   127bc:	00116d80 	call	116d8 <alt_avalon_i2c_is_busy>
   127c0:	103ff01e 	bne	r2,zero,12784 <__alt_data_end+0xfc012784>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   127c4:	e13ffb17 	ldw	r4,-20(fp)
   127c8:	00113800 	call	11380 <alt_avalon_i2c_disable>
   127cc:	00001406 	br	12820 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   127d0:	e0bfff03 	ldbu	r2,-4(fp)
   127d4:	10001226 	beq	r2,zero,12820 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   127d8:	01400704 	movi	r5,28
   127dc:	e13ffb17 	ldw	r4,-20(fp)
   127e0:	00128d40 	call	128d4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   127e4:	000b883a 	mov	r5,zero
   127e8:	e13ffb17 	ldw	r4,-20(fp)
   127ec:	0012a6c0 	call	12a6c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   127f0:	e0bffa17 	ldw	r2,-24(fp)
   127f4:	00c00084 	movi	r3,2
   127f8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   127fc:	e0bffa17 	ldw	r2,-24(fp)
   12800:	e0fffc17 	ldw	r3,-16(fp)
   12804:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   12808:	e0bffa17 	ldw	r2,-24(fp)
   1280c:	e0fffd17 	ldw	r3,-12(fp)
   12810:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   12814:	01400084 	movi	r5,2
   12818:	e13ffb17 	ldw	r4,-20(fp)
   1281c:	00129780 	call	12978 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   12820:	e0bff717 	ldw	r2,-36(fp)
}
   12824:	e037883a 	mov	sp,fp
   12828:	dfc00117 	ldw	ra,4(sp)
   1282c:	df000017 	ldw	fp,0(sp)
   12830:	dec00204 	addi	sp,sp,8
   12834:	f800283a 	ret

00012838 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   12838:	defffd04 	addi	sp,sp,-12
   1283c:	df000215 	stw	fp,8(sp)
   12840:	df000204 	addi	fp,sp,8
   12844:	e13ffe15 	stw	r4,-8(fp)
   12848:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10800317 	ldw	r2,12(r2)
   12854:	10800404 	addi	r2,r2,16
   12858:	10c00037 	ldwio	r3,0(r2)
   1285c:	e0bffe17 	ldw	r2,-8(fp)
   12860:	10800317 	ldw	r2,12(r2)
   12864:	10800304 	addi	r2,r2,12
   12868:	10800037 	ldwio	r2,0(r2)
   1286c:	1884703a 	and	r2,r3,r2
   12870:	1007883a 	mov	r3,r2
   12874:	e0bfff17 	ldw	r2,-4(fp)
   12878:	10c00015 	stw	r3,0(r2)
}
   1287c:	0001883a 	nop
   12880:	e037883a 	mov	sp,fp
   12884:	df000017 	ldw	fp,0(sp)
   12888:	dec00104 	addi	sp,sp,4
   1288c:	f800283a 	ret

00012890 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   12890:	defffd04 	addi	sp,sp,-12
   12894:	df000215 	stw	fp,8(sp)
   12898:	df000204 	addi	fp,sp,8
   1289c:	e13ffe15 	stw	r4,-8(fp)
   128a0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   128a4:	e0bffe17 	ldw	r2,-8(fp)
   128a8:	10800317 	ldw	r2,12(r2)
   128ac:	10800404 	addi	r2,r2,16
   128b0:	10800037 	ldwio	r2,0(r2)
   128b4:	1007883a 	mov	r3,r2
   128b8:	e0bfff17 	ldw	r2,-4(fp)
   128bc:	10c00015 	stw	r3,0(r2)
}
   128c0:	0001883a 	nop
   128c4:	e037883a 	mov	sp,fp
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00104 	addi	sp,sp,4
   128d0:	f800283a 	ret

000128d4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   128d4:	defffd04 	addi	sp,sp,-12
   128d8:	df000215 	stw	fp,8(sp)
   128dc:	df000204 	addi	fp,sp,8
   128e0:	e13ffe15 	stw	r4,-8(fp)
   128e4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   128e8:	e0bffe17 	ldw	r2,-8(fp)
   128ec:	10800317 	ldw	r2,12(r2)
   128f0:	10800404 	addi	r2,r2,16
   128f4:	e0ffff17 	ldw	r3,-4(fp)
   128f8:	10c00035 	stwio	r3,0(r2)
}
   128fc:	0001883a 	nop
   12900:	e037883a 	mov	sp,fp
   12904:	df000017 	ldw	fp,0(sp)
   12908:	dec00104 	addi	sp,sp,4
   1290c:	f800283a 	ret

00012910 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   12910:	defffb04 	addi	sp,sp,-20
   12914:	dfc00415 	stw	ra,16(sp)
   12918:	df000315 	stw	fp,12(sp)
   1291c:	df000304 	addi	fp,sp,12
   12920:	e13ffe15 	stw	r4,-8(fp)
   12924:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   12928:	e17ffd04 	addi	r5,fp,-12
   1292c:	e13ffe17 	ldw	r4,-8(fp)
   12930:	00129dc0 	call	129dc <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   12934:	e0bfff17 	ldw	r2,-4(fp)
   12938:	0086303a 	nor	r3,zero,r2
   1293c:	e0bffd17 	ldw	r2,-12(fp)
   12940:	1884703a 	and	r2,r3,r2
   12944:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   12948:	e0bffe17 	ldw	r2,-8(fp)
   1294c:	10800317 	ldw	r2,12(r2)
   12950:	10800304 	addi	r2,r2,12
   12954:	e0fffd17 	ldw	r3,-12(fp)
   12958:	18c007cc 	andi	r3,r3,31
   1295c:	10c00035 	stwio	r3,0(r2)
}
   12960:	0001883a 	nop
   12964:	e037883a 	mov	sp,fp
   12968:	dfc00117 	ldw	ra,4(sp)
   1296c:	df000017 	ldw	fp,0(sp)
   12970:	dec00204 	addi	sp,sp,8
   12974:	f800283a 	ret

00012978 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   12978:	defffb04 	addi	sp,sp,-20
   1297c:	dfc00415 	stw	ra,16(sp)
   12980:	df000315 	stw	fp,12(sp)
   12984:	df000304 	addi	fp,sp,12
   12988:	e13ffe15 	stw	r4,-8(fp)
   1298c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   12990:	e17ffd04 	addi	r5,fp,-12
   12994:	e13ffe17 	ldw	r4,-8(fp)
   12998:	00129dc0 	call	129dc <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   1299c:	e0fffd17 	ldw	r3,-12(fp)
   129a0:	e0bfff17 	ldw	r2,-4(fp)
   129a4:	1884b03a 	or	r2,r3,r2
   129a8:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   129ac:	e0bffe17 	ldw	r2,-8(fp)
   129b0:	10800317 	ldw	r2,12(r2)
   129b4:	10800304 	addi	r2,r2,12
   129b8:	e0fffd17 	ldw	r3,-12(fp)
   129bc:	18c007cc 	andi	r3,r3,31
   129c0:	10c00035 	stwio	r3,0(r2)
}
   129c4:	0001883a 	nop
   129c8:	e037883a 	mov	sp,fp
   129cc:	dfc00117 	ldw	ra,4(sp)
   129d0:	df000017 	ldw	fp,0(sp)
   129d4:	dec00204 	addi	sp,sp,8
   129d8:	f800283a 	ret

000129dc <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   129dc:	defffd04 	addi	sp,sp,-12
   129e0:	df000215 	stw	fp,8(sp)
   129e4:	df000204 	addi	fp,sp,8
   129e8:	e13ffe15 	stw	r4,-8(fp)
   129ec:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   129f0:	e0bffe17 	ldw	r2,-8(fp)
   129f4:	10800317 	ldw	r2,12(r2)
   129f8:	10800304 	addi	r2,r2,12
   129fc:	10800037 	ldwio	r2,0(r2)
   12a00:	10c007cc 	andi	r3,r2,31
   12a04:	e0bfff17 	ldw	r2,-4(fp)
   12a08:	10c00015 	stw	r3,0(r2)
}
   12a0c:	0001883a 	nop
   12a10:	e037883a 	mov	sp,fp
   12a14:	df000017 	ldw	fp,0(sp)
   12a18:	dec00104 	addi	sp,sp,4
   12a1c:	f800283a 	ret

00012a20 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   12a20:	defffd04 	addi	sp,sp,-12
   12a24:	df000215 	stw	fp,8(sp)
   12a28:	df000204 	addi	fp,sp,8
   12a2c:	e13ffe15 	stw	r4,-8(fp)
   12a30:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   12a34:	e0bffe17 	ldw	r2,-8(fp)
   12a38:	10800317 	ldw	r2,12(r2)
   12a3c:	10800204 	addi	r2,r2,8
   12a40:	10800037 	ldwio	r2,0(r2)
   12a44:	10800c0c 	andi	r2,r2,48
   12a48:	1005d13a 	srai	r2,r2,4
   12a4c:	1007883a 	mov	r3,r2
   12a50:	e0bfff17 	ldw	r2,-4(fp)
   12a54:	10c00015 	stw	r3,0(r2)
}
   12a58:	0001883a 	nop
   12a5c:	e037883a 	mov	sp,fp
   12a60:	df000017 	ldw	fp,0(sp)
   12a64:	dec00104 	addi	sp,sp,4
   12a68:	f800283a 	ret

00012a6c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   12a6c:	defffd04 	addi	sp,sp,-12
   12a70:	df000215 	stw	fp,8(sp)
   12a74:	df000204 	addi	fp,sp,8
   12a78:	e13ffe15 	stw	r4,-8(fp)
   12a7c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   12a80:	e0bffe17 	ldw	r2,-8(fp)
   12a84:	10800317 	ldw	r2,12(r2)
   12a88:	10800204 	addi	r2,r2,8
   12a8c:	e0fffe17 	ldw	r3,-8(fp)
   12a90:	18c00317 	ldw	r3,12(r3)
   12a94:	18c00204 	addi	r3,r3,8
   12a98:	18c00037 	ldwio	r3,0(r3)
   12a9c:	1809883a 	mov	r4,r3
   12aa0:	00fff3c4 	movi	r3,-49
   12aa4:	20c8703a 	and	r4,r4,r3
   12aa8:	e0ffff17 	ldw	r3,-4(fp)
   12aac:	1806913a 	slli	r3,r3,4
   12ab0:	18c00c0c 	andi	r3,r3,48
   12ab4:	20c6b03a 	or	r3,r4,r3
   12ab8:	10c00035 	stwio	r3,0(r2)
}
   12abc:	0001883a 	nop
   12ac0:	e037883a 	mov	sp,fp
   12ac4:	df000017 	ldw	fp,0(sp)
   12ac8:	dec00104 	addi	sp,sp,4
   12acc:	f800283a 	ret

00012ad0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   12ad0:	defffd04 	addi	sp,sp,-12
   12ad4:	df000215 	stw	fp,8(sp)
   12ad8:	df000204 	addi	fp,sp,8
   12adc:	e13ffe15 	stw	r4,-8(fp)
   12ae0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   12ae4:	e0bffe17 	ldw	r2,-8(fp)
   12ae8:	10800317 	ldw	r2,12(r2)
   12aec:	10800204 	addi	r2,r2,8
   12af0:	10800037 	ldwio	r2,0(r2)
   12af4:	1080030c 	andi	r2,r2,12
   12af8:	1005d0ba 	srai	r2,r2,2
   12afc:	1007883a 	mov	r3,r2
   12b00:	e0bfff17 	ldw	r2,-4(fp)
   12b04:	10c00015 	stw	r3,0(r2)
}
   12b08:	0001883a 	nop
   12b0c:	e037883a 	mov	sp,fp
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00104 	addi	sp,sp,4
   12b18:	f800283a 	ret

00012b1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   12b1c:	defffd04 	addi	sp,sp,-12
   12b20:	df000215 	stw	fp,8(sp)
   12b24:	df000204 	addi	fp,sp,8
   12b28:	e13ffe15 	stw	r4,-8(fp)
   12b2c:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   12b30:	e0bffe17 	ldw	r2,-8(fp)
   12b34:	10800317 	ldw	r2,12(r2)
   12b38:	10c00204 	addi	r3,r2,8
   12b3c:	e0bffe17 	ldw	r2,-8(fp)
   12b40:	10800317 	ldw	r2,12(r2)
   12b44:	10800204 	addi	r2,r2,8
   12b48:	10800037 	ldwio	r2,0(r2)
   12b4c:	1009883a 	mov	r4,r2
   12b50:	00bffcc4 	movi	r2,-13
   12b54:	2088703a 	and	r4,r4,r2
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	1085883a 	add	r2,r2,r2
   12b60:	1085883a 	add	r2,r2,r2
   12b64:	1080030c 	andi	r2,r2,12
   12b68:	2084b03a 	or	r2,r4,r2
   12b6c:	18800035 	stwio	r2,0(r3)
}
   12b70:	0001883a 	nop
   12b74:	e037883a 	mov	sp,fp
   12b78:	df000017 	ldw	fp,0(sp)
   12b7c:	dec00104 	addi	sp,sp,4
   12b80:	f800283a 	ret

00012b84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12b84:	defffa04 	addi	sp,sp,-24
   12b88:	dfc00515 	stw	ra,20(sp)
   12b8c:	df000415 	stw	fp,16(sp)
   12b90:	df000404 	addi	fp,sp,16
   12b94:	e13ffd15 	stw	r4,-12(fp)
   12b98:	e17ffe15 	stw	r5,-8(fp)
   12b9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12ba0:	e0bffd17 	ldw	r2,-12(fp)
   12ba4:	10800017 	ldw	r2,0(r2)
   12ba8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12bac:	e0bffc17 	ldw	r2,-16(fp)
   12bb0:	10c00a04 	addi	r3,r2,40
   12bb4:	e0bffd17 	ldw	r2,-12(fp)
   12bb8:	10800217 	ldw	r2,8(r2)
   12bbc:	100f883a 	mov	r7,r2
   12bc0:	e1bfff17 	ldw	r6,-4(fp)
   12bc4:	e17ffe17 	ldw	r5,-8(fp)
   12bc8:	1809883a 	mov	r4,r3
   12bcc:	00131ac0 	call	131ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12bd0:	e037883a 	mov	sp,fp
   12bd4:	dfc00117 	ldw	ra,4(sp)
   12bd8:	df000017 	ldw	fp,0(sp)
   12bdc:	dec00204 	addi	sp,sp,8
   12be0:	f800283a 	ret

00012be4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12be4:	defffa04 	addi	sp,sp,-24
   12be8:	dfc00515 	stw	ra,20(sp)
   12bec:	df000415 	stw	fp,16(sp)
   12bf0:	df000404 	addi	fp,sp,16
   12bf4:	e13ffd15 	stw	r4,-12(fp)
   12bf8:	e17ffe15 	stw	r5,-8(fp)
   12bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12c00:	e0bffd17 	ldw	r2,-12(fp)
   12c04:	10800017 	ldw	r2,0(r2)
   12c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12c0c:	e0bffc17 	ldw	r2,-16(fp)
   12c10:	10c00a04 	addi	r3,r2,40
   12c14:	e0bffd17 	ldw	r2,-12(fp)
   12c18:	10800217 	ldw	r2,8(r2)
   12c1c:	100f883a 	mov	r7,r2
   12c20:	e1bfff17 	ldw	r6,-4(fp)
   12c24:	e17ffe17 	ldw	r5,-8(fp)
   12c28:	1809883a 	mov	r4,r3
   12c2c:	00133c80 	call	133c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12c30:	e037883a 	mov	sp,fp
   12c34:	dfc00117 	ldw	ra,4(sp)
   12c38:	df000017 	ldw	fp,0(sp)
   12c3c:	dec00204 	addi	sp,sp,8
   12c40:	f800283a 	ret

00012c44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12c44:	defffc04 	addi	sp,sp,-16
   12c48:	dfc00315 	stw	ra,12(sp)
   12c4c:	df000215 	stw	fp,8(sp)
   12c50:	df000204 	addi	fp,sp,8
   12c54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12c58:	e0bfff17 	ldw	r2,-4(fp)
   12c5c:	10800017 	ldw	r2,0(r2)
   12c60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   12c64:	e0bffe17 	ldw	r2,-8(fp)
   12c68:	10c00a04 	addi	r3,r2,40
   12c6c:	e0bfff17 	ldw	r2,-4(fp)
   12c70:	10800217 	ldw	r2,8(r2)
   12c74:	100b883a 	mov	r5,r2
   12c78:	1809883a 	mov	r4,r3
   12c7c:	00130540 	call	13054 <altera_avalon_jtag_uart_close>
}
   12c80:	e037883a 	mov	sp,fp
   12c84:	dfc00117 	ldw	ra,4(sp)
   12c88:	df000017 	ldw	fp,0(sp)
   12c8c:	dec00204 	addi	sp,sp,8
   12c90:	f800283a 	ret

00012c94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12c94:	defffa04 	addi	sp,sp,-24
   12c98:	dfc00515 	stw	ra,20(sp)
   12c9c:	df000415 	stw	fp,16(sp)
   12ca0:	df000404 	addi	fp,sp,16
   12ca4:	e13ffd15 	stw	r4,-12(fp)
   12ca8:	e17ffe15 	stw	r5,-8(fp)
   12cac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12cb0:	e0bffd17 	ldw	r2,-12(fp)
   12cb4:	10800017 	ldw	r2,0(r2)
   12cb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   12cbc:	e0bffc17 	ldw	r2,-16(fp)
   12cc0:	10800a04 	addi	r2,r2,40
   12cc4:	e1bfff17 	ldw	r6,-4(fp)
   12cc8:	e17ffe17 	ldw	r5,-8(fp)
   12ccc:	1009883a 	mov	r4,r2
   12cd0:	00130bc0 	call	130bc <altera_avalon_jtag_uart_ioctl>
}
   12cd4:	e037883a 	mov	sp,fp
   12cd8:	dfc00117 	ldw	ra,4(sp)
   12cdc:	df000017 	ldw	fp,0(sp)
   12ce0:	dec00204 	addi	sp,sp,8
   12ce4:	f800283a 	ret

00012ce8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12ce8:	defffa04 	addi	sp,sp,-24
   12cec:	dfc00515 	stw	ra,20(sp)
   12cf0:	df000415 	stw	fp,16(sp)
   12cf4:	df000404 	addi	fp,sp,16
   12cf8:	e13ffd15 	stw	r4,-12(fp)
   12cfc:	e17ffe15 	stw	r5,-8(fp)
   12d00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12d04:	e0bffd17 	ldw	r2,-12(fp)
   12d08:	00c00044 	movi	r3,1
   12d0c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12d10:	e0bffd17 	ldw	r2,-12(fp)
   12d14:	10800017 	ldw	r2,0(r2)
   12d18:	10800104 	addi	r2,r2,4
   12d1c:	1007883a 	mov	r3,r2
   12d20:	e0bffd17 	ldw	r2,-12(fp)
   12d24:	10800817 	ldw	r2,32(r2)
   12d28:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12d2c:	e0bffe17 	ldw	r2,-8(fp)
   12d30:	e0ffff17 	ldw	r3,-4(fp)
   12d34:	d8000015 	stw	zero,0(sp)
   12d38:	e1fffd17 	ldw	r7,-12(fp)
   12d3c:	01800074 	movhi	r6,1
   12d40:	318b6a04 	addi	r6,r6,11688
   12d44:	180b883a 	mov	r5,r3
   12d48:	1009883a 	mov	r4,r2
   12d4c:	0013dd00 	call	13dd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12d50:	e0bffd17 	ldw	r2,-12(fp)
   12d54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12d58:	e0bffd17 	ldw	r2,-12(fp)
   12d5c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12d60:	d0e70117 	ldw	r3,-25596(gp)
   12d64:	e1fffd17 	ldw	r7,-12(fp)
   12d68:	01800074 	movhi	r6,1
   12d6c:	318bed04 	addi	r6,r6,12212
   12d70:	180b883a 	mov	r5,r3
   12d74:	1009883a 	mov	r4,r2
   12d78:	00138dc0 	call	138dc <alt_alarm_start>
   12d7c:	1000040e 	bge	r2,zero,12d90 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12d80:	e0fffd17 	ldw	r3,-12(fp)
   12d84:	00a00034 	movhi	r2,32768
   12d88:	10bfffc4 	addi	r2,r2,-1
   12d8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12d90:	0001883a 	nop
   12d94:	e037883a 	mov	sp,fp
   12d98:	dfc00117 	ldw	ra,4(sp)
   12d9c:	df000017 	ldw	fp,0(sp)
   12da0:	dec00204 	addi	sp,sp,8
   12da4:	f800283a 	ret

00012da8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12da8:	defff804 	addi	sp,sp,-32
   12dac:	df000715 	stw	fp,28(sp)
   12db0:	df000704 	addi	fp,sp,28
   12db4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12db8:	e0bfff17 	ldw	r2,-4(fp)
   12dbc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12dc0:	e0bffb17 	ldw	r2,-20(fp)
   12dc4:	10800017 	ldw	r2,0(r2)
   12dc8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	10800104 	addi	r2,r2,4
   12dd4:	10800037 	ldwio	r2,0(r2)
   12dd8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12ddc:	e0bffd17 	ldw	r2,-12(fp)
   12de0:	1080c00c 	andi	r2,r2,768
   12de4:	10006d26 	beq	r2,zero,12f9c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12de8:	e0bffd17 	ldw	r2,-12(fp)
   12dec:	1080400c 	andi	r2,r2,256
   12df0:	10003526 	beq	r2,zero,12ec8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12df4:	00800074 	movhi	r2,1
   12df8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12dfc:	e0bffb17 	ldw	r2,-20(fp)
   12e00:	10800a17 	ldw	r2,40(r2)
   12e04:	10800044 	addi	r2,r2,1
   12e08:	1081ffcc 	andi	r2,r2,2047
   12e0c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12e10:	e0bffb17 	ldw	r2,-20(fp)
   12e14:	10c00b17 	ldw	r3,44(r2)
   12e18:	e0bffe17 	ldw	r2,-8(fp)
   12e1c:	18801526 	beq	r3,r2,12e74 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12e20:	e0bffc17 	ldw	r2,-16(fp)
   12e24:	10800037 	ldwio	r2,0(r2)
   12e28:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12e2c:	e0bff917 	ldw	r2,-28(fp)
   12e30:	10a0000c 	andi	r2,r2,32768
   12e34:	10001126 	beq	r2,zero,12e7c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12e38:	e0bffb17 	ldw	r2,-20(fp)
   12e3c:	10800a17 	ldw	r2,40(r2)
   12e40:	e0fff917 	ldw	r3,-28(fp)
   12e44:	1809883a 	mov	r4,r3
   12e48:	e0fffb17 	ldw	r3,-20(fp)
   12e4c:	1885883a 	add	r2,r3,r2
   12e50:	10800e04 	addi	r2,r2,56
   12e54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12e58:	e0bffb17 	ldw	r2,-20(fp)
   12e5c:	10800a17 	ldw	r2,40(r2)
   12e60:	10800044 	addi	r2,r2,1
   12e64:	10c1ffcc 	andi	r3,r2,2047
   12e68:	e0bffb17 	ldw	r2,-20(fp)
   12e6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12e70:	003fe206 	br	12dfc <__alt_data_end+0xfc012dfc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   12e74:	0001883a 	nop
   12e78:	00000106 	br	12e80 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   12e7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12e80:	e0bff917 	ldw	r2,-28(fp)
   12e84:	10bfffec 	andhi	r2,r2,65535
   12e88:	10000f26 	beq	r2,zero,12ec8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12e8c:	e0bffb17 	ldw	r2,-20(fp)
   12e90:	10c00817 	ldw	r3,32(r2)
   12e94:	00bfff84 	movi	r2,-2
   12e98:	1886703a 	and	r3,r3,r2
   12e9c:	e0bffb17 	ldw	r2,-20(fp)
   12ea0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12ea4:	e0bffc17 	ldw	r2,-16(fp)
   12ea8:	10800104 	addi	r2,r2,4
   12eac:	1007883a 	mov	r3,r2
   12eb0:	e0bffb17 	ldw	r2,-20(fp)
   12eb4:	10800817 	ldw	r2,32(r2)
   12eb8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12ebc:	e0bffc17 	ldw	r2,-16(fp)
   12ec0:	10800104 	addi	r2,r2,4
   12ec4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12ec8:	e0bffd17 	ldw	r2,-12(fp)
   12ecc:	1080800c 	andi	r2,r2,512
   12ed0:	103fbe26 	beq	r2,zero,12dcc <__alt_data_end+0xfc012dcc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12ed4:	e0bffd17 	ldw	r2,-12(fp)
   12ed8:	1004d43a 	srli	r2,r2,16
   12edc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12ee0:	00001406 	br	12f34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12ee4:	e0bffc17 	ldw	r2,-16(fp)
   12ee8:	e0fffb17 	ldw	r3,-20(fp)
   12eec:	18c00d17 	ldw	r3,52(r3)
   12ef0:	e13ffb17 	ldw	r4,-20(fp)
   12ef4:	20c7883a 	add	r3,r4,r3
   12ef8:	18c20e04 	addi	r3,r3,2104
   12efc:	18c00003 	ldbu	r3,0(r3)
   12f00:	18c03fcc 	andi	r3,r3,255
   12f04:	18c0201c 	xori	r3,r3,128
   12f08:	18ffe004 	addi	r3,r3,-128
   12f0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12f10:	e0bffb17 	ldw	r2,-20(fp)
   12f14:	10800d17 	ldw	r2,52(r2)
   12f18:	10800044 	addi	r2,r2,1
   12f1c:	10c1ffcc 	andi	r3,r2,2047
   12f20:	e0bffb17 	ldw	r2,-20(fp)
   12f24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12f28:	e0bffa17 	ldw	r2,-24(fp)
   12f2c:	10bfffc4 	addi	r2,r2,-1
   12f30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12f34:	e0bffa17 	ldw	r2,-24(fp)
   12f38:	10000526 	beq	r2,zero,12f50 <altera_avalon_jtag_uart_irq+0x1a8>
   12f3c:	e0bffb17 	ldw	r2,-20(fp)
   12f40:	10c00d17 	ldw	r3,52(r2)
   12f44:	e0bffb17 	ldw	r2,-20(fp)
   12f48:	10800c17 	ldw	r2,48(r2)
   12f4c:	18bfe51e 	bne	r3,r2,12ee4 <__alt_data_end+0xfc012ee4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12f50:	e0bffa17 	ldw	r2,-24(fp)
   12f54:	103f9d26 	beq	r2,zero,12dcc <__alt_data_end+0xfc012dcc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12f58:	e0bffb17 	ldw	r2,-20(fp)
   12f5c:	10c00817 	ldw	r3,32(r2)
   12f60:	00bfff44 	movi	r2,-3
   12f64:	1886703a 	and	r3,r3,r2
   12f68:	e0bffb17 	ldw	r2,-20(fp)
   12f6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12f70:	e0bffb17 	ldw	r2,-20(fp)
   12f74:	10800017 	ldw	r2,0(r2)
   12f78:	10800104 	addi	r2,r2,4
   12f7c:	1007883a 	mov	r3,r2
   12f80:	e0bffb17 	ldw	r2,-20(fp)
   12f84:	10800817 	ldw	r2,32(r2)
   12f88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12f8c:	e0bffc17 	ldw	r2,-16(fp)
   12f90:	10800104 	addi	r2,r2,4
   12f94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12f98:	003f8c06 	br	12dcc <__alt_data_end+0xfc012dcc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   12f9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   12fa0:	0001883a 	nop
   12fa4:	e037883a 	mov	sp,fp
   12fa8:	df000017 	ldw	fp,0(sp)
   12fac:	dec00104 	addi	sp,sp,4
   12fb0:	f800283a 	ret

00012fb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12fb4:	defff804 	addi	sp,sp,-32
   12fb8:	df000715 	stw	fp,28(sp)
   12fbc:	df000704 	addi	fp,sp,28
   12fc0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12fc4:	e0bffb17 	ldw	r2,-20(fp)
   12fc8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12fcc:	e0bff917 	ldw	r2,-28(fp)
   12fd0:	10800017 	ldw	r2,0(r2)
   12fd4:	10800104 	addi	r2,r2,4
   12fd8:	10800037 	ldwio	r2,0(r2)
   12fdc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12fe0:	e0bffa17 	ldw	r2,-24(fp)
   12fe4:	1081000c 	andi	r2,r2,1024
   12fe8:	10000b26 	beq	r2,zero,13018 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12fec:	e0bff917 	ldw	r2,-28(fp)
   12ff0:	10800017 	ldw	r2,0(r2)
   12ff4:	10800104 	addi	r2,r2,4
   12ff8:	1007883a 	mov	r3,r2
   12ffc:	e0bff917 	ldw	r2,-28(fp)
   13000:	10800817 	ldw	r2,32(r2)
   13004:	10810014 	ori	r2,r2,1024
   13008:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1300c:	e0bff917 	ldw	r2,-28(fp)
   13010:	10000915 	stw	zero,36(r2)
   13014:	00000a06 	br	13040 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13018:	e0bff917 	ldw	r2,-28(fp)
   1301c:	10c00917 	ldw	r3,36(r2)
   13020:	00a00034 	movhi	r2,32768
   13024:	10bfff04 	addi	r2,r2,-4
   13028:	10c00536 	bltu	r2,r3,13040 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1302c:	e0bff917 	ldw	r2,-28(fp)
   13030:	10800917 	ldw	r2,36(r2)
   13034:	10c00044 	addi	r3,r2,1
   13038:	e0bff917 	ldw	r2,-28(fp)
   1303c:	10c00915 	stw	r3,36(r2)
   13040:	d0a70117 	ldw	r2,-25596(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13044:	e037883a 	mov	sp,fp
   13048:	df000017 	ldw	fp,0(sp)
   1304c:	dec00104 	addi	sp,sp,4
   13050:	f800283a 	ret

00013054 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13054:	defffd04 	addi	sp,sp,-12
   13058:	df000215 	stw	fp,8(sp)
   1305c:	df000204 	addi	fp,sp,8
   13060:	e13ffe15 	stw	r4,-8(fp)
   13064:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13068:	00000506 	br	13080 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1306c:	e0bfff17 	ldw	r2,-4(fp)
   13070:	1090000c 	andi	r2,r2,16384
   13074:	10000226 	beq	r2,zero,13080 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13078:	00bffd44 	movi	r2,-11
   1307c:	00000b06 	br	130ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	10c00d17 	ldw	r3,52(r2)
   13088:	e0bffe17 	ldw	r2,-8(fp)
   1308c:	10800c17 	ldw	r2,48(r2)
   13090:	18800526 	beq	r3,r2,130a8 <altera_avalon_jtag_uart_close+0x54>
   13094:	e0bffe17 	ldw	r2,-8(fp)
   13098:	10c00917 	ldw	r3,36(r2)
   1309c:	e0bffe17 	ldw	r2,-8(fp)
   130a0:	10800117 	ldw	r2,4(r2)
   130a4:	18bff136 	bltu	r3,r2,1306c <__alt_data_end+0xfc01306c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   130a8:	0005883a 	mov	r2,zero
}
   130ac:	e037883a 	mov	sp,fp
   130b0:	df000017 	ldw	fp,0(sp)
   130b4:	dec00104 	addi	sp,sp,4
   130b8:	f800283a 	ret

000130bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   130bc:	defffa04 	addi	sp,sp,-24
   130c0:	df000515 	stw	fp,20(sp)
   130c4:	df000504 	addi	fp,sp,20
   130c8:	e13ffd15 	stw	r4,-12(fp)
   130cc:	e17ffe15 	stw	r5,-8(fp)
   130d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   130d4:	00bff9c4 	movi	r2,-25
   130d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   130dc:	e0bffe17 	ldw	r2,-8(fp)
   130e0:	10da8060 	cmpeqi	r3,r2,27137
   130e4:	1800031e 	bne	r3,zero,130f4 <altera_avalon_jtag_uart_ioctl+0x38>
   130e8:	109a80a0 	cmpeqi	r2,r2,27138
   130ec:	1000181e 	bne	r2,zero,13150 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   130f0:	00002906 	br	13198 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   130f4:	e0bffd17 	ldw	r2,-12(fp)
   130f8:	10c00117 	ldw	r3,4(r2)
   130fc:	00a00034 	movhi	r2,32768
   13100:	10bfffc4 	addi	r2,r2,-1
   13104:	18802126 	beq	r3,r2,1318c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   13108:	e0bfff17 	ldw	r2,-4(fp)
   1310c:	10800017 	ldw	r2,0(r2)
   13110:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13114:	e0bffc17 	ldw	r2,-16(fp)
   13118:	10800090 	cmplti	r2,r2,2
   1311c:	1000061e 	bne	r2,zero,13138 <altera_avalon_jtag_uart_ioctl+0x7c>
   13120:	e0fffc17 	ldw	r3,-16(fp)
   13124:	00a00034 	movhi	r2,32768
   13128:	10bfffc4 	addi	r2,r2,-1
   1312c:	18800226 	beq	r3,r2,13138 <altera_avalon_jtag_uart_ioctl+0x7c>
   13130:	e0bffc17 	ldw	r2,-16(fp)
   13134:	00000206 	br	13140 <altera_avalon_jtag_uart_ioctl+0x84>
   13138:	00a00034 	movhi	r2,32768
   1313c:	10bfff84 	addi	r2,r2,-2
   13140:	e0fffd17 	ldw	r3,-12(fp)
   13144:	18800115 	stw	r2,4(r3)
      rc = 0;
   13148:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1314c:	00000f06 	br	1318c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13150:	e0bffd17 	ldw	r2,-12(fp)
   13154:	10c00117 	ldw	r3,4(r2)
   13158:	00a00034 	movhi	r2,32768
   1315c:	10bfffc4 	addi	r2,r2,-1
   13160:	18800c26 	beq	r3,r2,13194 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13164:	e0bffd17 	ldw	r2,-12(fp)
   13168:	10c00917 	ldw	r3,36(r2)
   1316c:	e0bffd17 	ldw	r2,-12(fp)
   13170:	10800117 	ldw	r2,4(r2)
   13174:	1885803a 	cmpltu	r2,r3,r2
   13178:	10c03fcc 	andi	r3,r2,255
   1317c:	e0bfff17 	ldw	r2,-4(fp)
   13180:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13184:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13188:	00000206 	br	13194 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1318c:	0001883a 	nop
   13190:	00000106 	br	13198 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13194:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13198:	e0bffb17 	ldw	r2,-20(fp)
}
   1319c:	e037883a 	mov	sp,fp
   131a0:	df000017 	ldw	fp,0(sp)
   131a4:	dec00104 	addi	sp,sp,4
   131a8:	f800283a 	ret

000131ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   131ac:	defff304 	addi	sp,sp,-52
   131b0:	dfc00c15 	stw	ra,48(sp)
   131b4:	df000b15 	stw	fp,44(sp)
   131b8:	df000b04 	addi	fp,sp,44
   131bc:	e13ffc15 	stw	r4,-16(fp)
   131c0:	e17ffd15 	stw	r5,-12(fp)
   131c4:	e1bffe15 	stw	r6,-8(fp)
   131c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   131cc:	e0bffd17 	ldw	r2,-12(fp)
   131d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   131d4:	00004706 	br	132f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   131d8:	e0bffc17 	ldw	r2,-16(fp)
   131dc:	10800a17 	ldw	r2,40(r2)
   131e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   131e4:	e0bffc17 	ldw	r2,-16(fp)
   131e8:	10800b17 	ldw	r2,44(r2)
   131ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   131f0:	e0fff717 	ldw	r3,-36(fp)
   131f4:	e0bff817 	ldw	r2,-32(fp)
   131f8:	18800536 	bltu	r3,r2,13210 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   131fc:	e0fff717 	ldw	r3,-36(fp)
   13200:	e0bff817 	ldw	r2,-32(fp)
   13204:	1885c83a 	sub	r2,r3,r2
   13208:	e0bff615 	stw	r2,-40(fp)
   1320c:	00000406 	br	13220 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13210:	00c20004 	movi	r3,2048
   13214:	e0bff817 	ldw	r2,-32(fp)
   13218:	1885c83a 	sub	r2,r3,r2
   1321c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13220:	e0bff617 	ldw	r2,-40(fp)
   13224:	10001e26 	beq	r2,zero,132a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   13228:	e0fffe17 	ldw	r3,-8(fp)
   1322c:	e0bff617 	ldw	r2,-40(fp)
   13230:	1880022e 	bgeu	r3,r2,1323c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   13234:	e0bffe17 	ldw	r2,-8(fp)
   13238:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1323c:	e0bffc17 	ldw	r2,-16(fp)
   13240:	10c00e04 	addi	r3,r2,56
   13244:	e0bff817 	ldw	r2,-32(fp)
   13248:	1885883a 	add	r2,r3,r2
   1324c:	e1bff617 	ldw	r6,-40(fp)
   13250:	100b883a 	mov	r5,r2
   13254:	e13ff517 	ldw	r4,-44(fp)
   13258:	000904c0 	call	904c <memcpy>
      ptr   += n;
   1325c:	e0fff517 	ldw	r3,-44(fp)
   13260:	e0bff617 	ldw	r2,-40(fp)
   13264:	1885883a 	add	r2,r3,r2
   13268:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1326c:	e0fffe17 	ldw	r3,-8(fp)
   13270:	e0bff617 	ldw	r2,-40(fp)
   13274:	1885c83a 	sub	r2,r3,r2
   13278:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1327c:	e0fff817 	ldw	r3,-32(fp)
   13280:	e0bff617 	ldw	r2,-40(fp)
   13284:	1885883a 	add	r2,r3,r2
   13288:	10c1ffcc 	andi	r3,r2,2047
   1328c:	e0bffc17 	ldw	r2,-16(fp)
   13290:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13294:	e0bffe17 	ldw	r2,-8(fp)
   13298:	00bfcf16 	blt	zero,r2,131d8 <__alt_data_end+0xfc0131d8>
   1329c:	00000106 	br	132a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   132a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   132a4:	e0fff517 	ldw	r3,-44(fp)
   132a8:	e0bffd17 	ldw	r2,-12(fp)
   132ac:	1880141e 	bne	r3,r2,13300 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	1090000c 	andi	r2,r2,16384
   132b8:	1000131e 	bne	r2,zero,13308 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   132bc:	0001883a 	nop
   132c0:	e0bffc17 	ldw	r2,-16(fp)
   132c4:	10c00a17 	ldw	r3,40(r2)
   132c8:	e0bff717 	ldw	r2,-36(fp)
   132cc:	1880051e 	bne	r3,r2,132e4 <altera_avalon_jtag_uart_read+0x138>
   132d0:	e0bffc17 	ldw	r2,-16(fp)
   132d4:	10c00917 	ldw	r3,36(r2)
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	10800117 	ldw	r2,4(r2)
   132e0:	18bff736 	bltu	r3,r2,132c0 <__alt_data_end+0xfc0132c0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   132e4:	e0bffc17 	ldw	r2,-16(fp)
   132e8:	10c00a17 	ldw	r3,40(r2)
   132ec:	e0bff717 	ldw	r2,-36(fp)
   132f0:	18800726 	beq	r3,r2,13310 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   132f4:	e0bffe17 	ldw	r2,-8(fp)
   132f8:	00bfb716 	blt	zero,r2,131d8 <__alt_data_end+0xfc0131d8>
   132fc:	00000506 	br	13314 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   13300:	0001883a 	nop
   13304:	00000306 	br	13314 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   13308:	0001883a 	nop
   1330c:	00000106 	br	13314 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   13310:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13314:	e0fff517 	ldw	r3,-44(fp)
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	18801826 	beq	r3,r2,13380 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13320:	0005303a 	rdctl	r2,status
   13324:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13328:	e0fffb17 	ldw	r3,-20(fp)
   1332c:	00bfff84 	movi	r2,-2
   13330:	1884703a 	and	r2,r3,r2
   13334:	1001703a 	wrctl	status,r2
  
  return context;
   13338:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1333c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13340:	e0bffc17 	ldw	r2,-16(fp)
   13344:	10800817 	ldw	r2,32(r2)
   13348:	10c00054 	ori	r3,r2,1
   1334c:	e0bffc17 	ldw	r2,-16(fp)
   13350:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13354:	e0bffc17 	ldw	r2,-16(fp)
   13358:	10800017 	ldw	r2,0(r2)
   1335c:	10800104 	addi	r2,r2,4
   13360:	1007883a 	mov	r3,r2
   13364:	e0bffc17 	ldw	r2,-16(fp)
   13368:	10800817 	ldw	r2,32(r2)
   1336c:	18800035 	stwio	r2,0(r3)
   13370:	e0bffa17 	ldw	r2,-24(fp)
   13374:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13378:	e0bff917 	ldw	r2,-28(fp)
   1337c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13380:	e0fff517 	ldw	r3,-44(fp)
   13384:	e0bffd17 	ldw	r2,-12(fp)
   13388:	18800426 	beq	r3,r2,1339c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1338c:	e0fff517 	ldw	r3,-44(fp)
   13390:	e0bffd17 	ldw	r2,-12(fp)
   13394:	1885c83a 	sub	r2,r3,r2
   13398:	00000606 	br	133b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1339c:	e0bfff17 	ldw	r2,-4(fp)
   133a0:	1090000c 	andi	r2,r2,16384
   133a4:	10000226 	beq	r2,zero,133b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   133a8:	00bffd44 	movi	r2,-11
   133ac:	00000106 	br	133b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   133b0:	00bffec4 	movi	r2,-5
}
   133b4:	e037883a 	mov	sp,fp
   133b8:	dfc00117 	ldw	ra,4(sp)
   133bc:	df000017 	ldw	fp,0(sp)
   133c0:	dec00204 	addi	sp,sp,8
   133c4:	f800283a 	ret

000133c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   133c8:	defff304 	addi	sp,sp,-52
   133cc:	dfc00c15 	stw	ra,48(sp)
   133d0:	df000b15 	stw	fp,44(sp)
   133d4:	df000b04 	addi	fp,sp,44
   133d8:	e13ffc15 	stw	r4,-16(fp)
   133dc:	e17ffd15 	stw	r5,-12(fp)
   133e0:	e1bffe15 	stw	r6,-8(fp)
   133e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   133e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   133ec:	e0bffd17 	ldw	r2,-12(fp)
   133f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   133f4:	00003706 	br	134d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   133f8:	e0bffc17 	ldw	r2,-16(fp)
   133fc:	10800c17 	ldw	r2,48(r2)
   13400:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	10800d17 	ldw	r2,52(r2)
   1340c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   13410:	e0fff917 	ldw	r3,-28(fp)
   13414:	e0bff517 	ldw	r2,-44(fp)
   13418:	1880062e 	bgeu	r3,r2,13434 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1341c:	e0fff517 	ldw	r3,-44(fp)
   13420:	e0bff917 	ldw	r2,-28(fp)
   13424:	1885c83a 	sub	r2,r3,r2
   13428:	10bfffc4 	addi	r2,r2,-1
   1342c:	e0bff615 	stw	r2,-40(fp)
   13430:	00000b06 	br	13460 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   13434:	e0bff517 	ldw	r2,-44(fp)
   13438:	10000526 	beq	r2,zero,13450 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1343c:	00c20004 	movi	r3,2048
   13440:	e0bff917 	ldw	r2,-28(fp)
   13444:	1885c83a 	sub	r2,r3,r2
   13448:	e0bff615 	stw	r2,-40(fp)
   1344c:	00000406 	br	13460 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   13450:	00c1ffc4 	movi	r3,2047
   13454:	e0bff917 	ldw	r2,-28(fp)
   13458:	1885c83a 	sub	r2,r3,r2
   1345c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13460:	e0bff617 	ldw	r2,-40(fp)
   13464:	10001e26 	beq	r2,zero,134e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   13468:	e0fffe17 	ldw	r3,-8(fp)
   1346c:	e0bff617 	ldw	r2,-40(fp)
   13470:	1880022e 	bgeu	r3,r2,1347c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   13474:	e0bffe17 	ldw	r2,-8(fp)
   13478:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1347c:	e0bffc17 	ldw	r2,-16(fp)
   13480:	10c20e04 	addi	r3,r2,2104
   13484:	e0bff917 	ldw	r2,-28(fp)
   13488:	1885883a 	add	r2,r3,r2
   1348c:	e1bff617 	ldw	r6,-40(fp)
   13490:	e17ffd17 	ldw	r5,-12(fp)
   13494:	1009883a 	mov	r4,r2
   13498:	000904c0 	call	904c <memcpy>
      ptr   += n;
   1349c:	e0fffd17 	ldw	r3,-12(fp)
   134a0:	e0bff617 	ldw	r2,-40(fp)
   134a4:	1885883a 	add	r2,r3,r2
   134a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   134ac:	e0fffe17 	ldw	r3,-8(fp)
   134b0:	e0bff617 	ldw	r2,-40(fp)
   134b4:	1885c83a 	sub	r2,r3,r2
   134b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   134bc:	e0fff917 	ldw	r3,-28(fp)
   134c0:	e0bff617 	ldw	r2,-40(fp)
   134c4:	1885883a 	add	r2,r3,r2
   134c8:	10c1ffcc 	andi	r3,r2,2047
   134cc:	e0bffc17 	ldw	r2,-16(fp)
   134d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   134d4:	e0bffe17 	ldw	r2,-8(fp)
   134d8:	00bfc716 	blt	zero,r2,133f8 <__alt_data_end+0xfc0133f8>
   134dc:	00000106 	br	134e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   134e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134e4:	0005303a 	rdctl	r2,status
   134e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134ec:	e0fffb17 	ldw	r3,-20(fp)
   134f0:	00bfff84 	movi	r2,-2
   134f4:	1884703a 	and	r2,r3,r2
   134f8:	1001703a 	wrctl	status,r2
  
  return context;
   134fc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   13500:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13504:	e0bffc17 	ldw	r2,-16(fp)
   13508:	10800817 	ldw	r2,32(r2)
   1350c:	10c00094 	ori	r3,r2,2
   13510:	e0bffc17 	ldw	r2,-16(fp)
   13514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13518:	e0bffc17 	ldw	r2,-16(fp)
   1351c:	10800017 	ldw	r2,0(r2)
   13520:	10800104 	addi	r2,r2,4
   13524:	1007883a 	mov	r3,r2
   13528:	e0bffc17 	ldw	r2,-16(fp)
   1352c:	10800817 	ldw	r2,32(r2)
   13530:	18800035 	stwio	r2,0(r3)
   13534:	e0bffa17 	ldw	r2,-24(fp)
   13538:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1353c:	e0bff817 	ldw	r2,-32(fp)
   13540:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   13544:	e0bffe17 	ldw	r2,-8(fp)
   13548:	0080100e 	bge	zero,r2,1358c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1354c:	e0bfff17 	ldw	r2,-4(fp)
   13550:	1090000c 	andi	r2,r2,16384
   13554:	1000101e 	bne	r2,zero,13598 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13558:	0001883a 	nop
   1355c:	e0bffc17 	ldw	r2,-16(fp)
   13560:	10c00d17 	ldw	r3,52(r2)
   13564:	e0bff517 	ldw	r2,-44(fp)
   13568:	1880051e 	bne	r3,r2,13580 <altera_avalon_jtag_uart_write+0x1b8>
   1356c:	e0bffc17 	ldw	r2,-16(fp)
   13570:	10c00917 	ldw	r3,36(r2)
   13574:	e0bffc17 	ldw	r2,-16(fp)
   13578:	10800117 	ldw	r2,4(r2)
   1357c:	18bff736 	bltu	r3,r2,1355c <__alt_data_end+0xfc01355c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   13580:	e0bffc17 	ldw	r2,-16(fp)
   13584:	10800917 	ldw	r2,36(r2)
   13588:	1000051e 	bne	r2,zero,135a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1358c:	e0bffe17 	ldw	r2,-8(fp)
   13590:	00bfd016 	blt	zero,r2,134d4 <__alt_data_end+0xfc0134d4>
   13594:	00000306 	br	135a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   13598:	0001883a 	nop
   1359c:	00000106 	br	135a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   135a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   135a4:	e0fffd17 	ldw	r3,-12(fp)
   135a8:	e0bff717 	ldw	r2,-36(fp)
   135ac:	18800426 	beq	r3,r2,135c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   135b0:	e0fffd17 	ldw	r3,-12(fp)
   135b4:	e0bff717 	ldw	r2,-36(fp)
   135b8:	1885c83a 	sub	r2,r3,r2
   135bc:	00000606 	br	135d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   135c0:	e0bfff17 	ldw	r2,-4(fp)
   135c4:	1090000c 	andi	r2,r2,16384
   135c8:	10000226 	beq	r2,zero,135d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   135cc:	00bffd44 	movi	r2,-11
   135d0:	00000106 	br	135d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   135d4:	00bffec4 	movi	r2,-5
}
   135d8:	e037883a 	mov	sp,fp
   135dc:	dfc00117 	ldw	ra,4(sp)
   135e0:	df000017 	ldw	fp,0(sp)
   135e4:	dec00204 	addi	sp,sp,8
   135e8:	f800283a 	ret

000135ec <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   135ec:	defff404 	addi	sp,sp,-48
   135f0:	df000b15 	stw	fp,44(sp)
   135f4:	df000b04 	addi	fp,sp,44
   135f8:	e13ffc15 	stw	r4,-16(fp)
   135fc:	e17ffd15 	stw	r5,-12(fp)
   13600:	e1bffe15 	stw	r6,-8(fp)
   13604:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   13608:	e0ffff17 	ldw	r3,-4(fp)
   1360c:	e0bffe17 	ldw	r2,-8(fp)
   13610:	1885883a 	add	r2,r3,r2
   13614:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   13618:	e0c00217 	ldw	r3,8(fp)
   1361c:	e0800117 	ldw	r2,4(fp)
   13620:	1885883a 	add	r2,r3,r2
   13624:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   13628:	e0800117 	ldw	r2,4(fp)
   1362c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   13638:	00800044 	movi	r2,1
   1363c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   13640:	e0bffc17 	ldw	r2,-16(fp)
   13644:	10800504 	addi	r2,r2,20
   13648:	1009883a 	mov	r4,r2
   1364c:	00c00044 	movi	r3,1
   13650:	e0bffd17 	ldw	r2,-12(fp)
   13654:	1884983a 	sll	r2,r3,r2
   13658:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   1365c:	e0800317 	ldw	r2,12(fp)
   13660:	1080008c 	andi	r2,r2,2
   13664:	1000051e 	bne	r2,zero,1367c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   13668:	e0bffc17 	ldw	r2,-16(fp)
   1366c:	10800304 	addi	r2,r2,12
   13670:	1007883a 	mov	r3,r2
   13674:	00810004 	movi	r2,1024
   13678:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1367c:	e0bffc17 	ldw	r2,-16(fp)
   13680:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   13684:	e0bffc17 	ldw	r2,-16(fp)
   13688:	10800204 	addi	r2,r2,8
   1368c:	10800037 	ldwio	r2,0(r2)
   13690:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   13694:	e0bffa17 	ldw	r2,-24(fp)
   13698:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   1369c:	10000226 	beq	r2,zero,136a8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   136a0:	e0bff717 	ldw	r2,-36(fp)
   136a4:	1000031e 	bne	r2,zero,136b4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   136a8:	e0bffa17 	ldw	r2,-24(fp)
   136ac:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   136b0:	103ff426 	beq	r2,zero,13684 <__alt_data_end+0xfc013684>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   136b4:	e0bffa17 	ldw	r2,-24(fp)
   136b8:	1080100c 	andi	r2,r2,64
   136bc:	10001e26 	beq	r2,zero,13738 <alt_avalon_spi_command+0x14c>
   136c0:	e0bff717 	ldw	r2,-36(fp)
   136c4:	00801c0e 	bge	zero,r2,13738 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   136c8:	e0bff717 	ldw	r2,-36(fp)
   136cc:	10bfffc4 	addi	r2,r2,-1
   136d0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   136d4:	e0ffff17 	ldw	r3,-4(fp)
   136d8:	e0bff817 	ldw	r2,-32(fp)
   136dc:	18800a2e 	bgeu	r3,r2,13708 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   136e0:	e0bffc17 	ldw	r2,-16(fp)
   136e4:	10800104 	addi	r2,r2,4
   136e8:	1009883a 	mov	r4,r2
   136ec:	e0bfff17 	ldw	r2,-4(fp)
   136f0:	10c00044 	addi	r3,r2,1
   136f4:	e0ffff15 	stw	r3,-4(fp)
   136f8:	10800003 	ldbu	r2,0(r2)
   136fc:	10803fcc 	andi	r2,r2,255
   13700:	20800035 	stwio	r2,0(r4)
   13704:	00000c06 	br	13738 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   13708:	e0bff517 	ldw	r2,-44(fp)
   1370c:	10000826 	beq	r2,zero,13730 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   13710:	e0bff517 	ldw	r2,-44(fp)
   13714:	10bfffc4 	addi	r2,r2,-1
   13718:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   1371c:	e0bffc17 	ldw	r2,-16(fp)
   13720:	10800104 	addi	r2,r2,4
   13724:	0007883a 	mov	r3,zero
   13728:	10c00035 	stwio	r3,0(r2)
   1372c:	00000206 	br	13738 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   13730:	00bf0004 	movi	r2,-1024
   13734:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   13738:	e0bffa17 	ldw	r2,-24(fp)
   1373c:	1080200c 	andi	r2,r2,128
   13740:	103fd026 	beq	r2,zero,13684 <__alt_data_end+0xfc013684>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   13744:	e0bffc17 	ldw	r2,-16(fp)
   13748:	10800037 	ldwio	r2,0(r2)
   1374c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   13750:	e0bff617 	ldw	r2,-40(fp)
   13754:	10000426 	beq	r2,zero,13768 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   13758:	e0bff617 	ldw	r2,-40(fp)
   1375c:	10bfffc4 	addi	r2,r2,-1
   13760:	e0bff615 	stw	r2,-40(fp)
   13764:	00000506 	br	1377c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   13768:	e0800217 	ldw	r2,8(fp)
   1376c:	10c00044 	addi	r3,r2,1
   13770:	e0c00215 	stw	r3,8(fp)
   13774:	e0fffb17 	ldw	r3,-20(fp)
   13778:	10c00005 	stb	r3,0(r2)
      credits++;
   1377c:	e0bff717 	ldw	r2,-36(fp)
   13780:	10800044 	addi	r2,r2,1
   13784:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   13788:	e0bff617 	ldw	r2,-40(fp)
   1378c:	103fbd1e 	bne	r2,zero,13684 <__alt_data_end+0xfc013684>
   13790:	e0c00217 	ldw	r3,8(fp)
   13794:	e0bff917 	ldw	r2,-28(fp)
   13798:	18bfba1e 	bne	r3,r2,13684 <__alt_data_end+0xfc013684>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1379c:	e0bffc17 	ldw	r2,-16(fp)
   137a0:	10800204 	addi	r2,r2,8
   137a4:	10800037 	ldwio	r2,0(r2)
   137a8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   137ac:	e0bffa17 	ldw	r2,-24(fp)
   137b0:	1080080c 	andi	r2,r2,32
   137b4:	103ff926 	beq	r2,zero,1379c <__alt_data_end+0xfc01379c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   137b8:	e0800317 	ldw	r2,12(fp)
   137bc:	1080004c 	andi	r2,r2,1
   137c0:	1000041e 	bne	r2,zero,137d4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   137c4:	e0bffc17 	ldw	r2,-16(fp)
   137c8:	10800304 	addi	r2,r2,12
   137cc:	0007883a 	mov	r3,zero
   137d0:	10c00035 	stwio	r3,0(r2)

  return read_length;
   137d4:	e0800117 	ldw	r2,4(fp)
}
   137d8:	e037883a 	mov	sp,fp
   137dc:	df000017 	ldw	fp,0(sp)
   137e0:	dec00104 	addi	sp,sp,4
   137e4:	f800283a 	ret

000137e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   137e8:	defffa04 	addi	sp,sp,-24
   137ec:	dfc00515 	stw	ra,20(sp)
   137f0:	df000415 	stw	fp,16(sp)
   137f4:	df000404 	addi	fp,sp,16
   137f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   137fc:	0007883a 	mov	r3,zero
   13800:	e0bfff17 	ldw	r2,-4(fp)
   13804:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13808:	e0bfff17 	ldw	r2,-4(fp)
   1380c:	10800104 	addi	r2,r2,4
   13810:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13814:	0005303a 	rdctl	r2,status
   13818:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1381c:	e0fffd17 	ldw	r3,-12(fp)
   13820:	00bfff84 	movi	r2,-2
   13824:	1884703a 	and	r2,r3,r2
   13828:	1001703a 	wrctl	status,r2
  
  return context;
   1382c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13830:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13834:	0010c180 	call	10c18 <alt_tick>
   13838:	e0bffc17 	ldw	r2,-16(fp)
   1383c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13840:	e0bffe17 	ldw	r2,-8(fp)
   13844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13848:	0001883a 	nop
   1384c:	e037883a 	mov	sp,fp
   13850:	dfc00117 	ldw	ra,4(sp)
   13854:	df000017 	ldw	fp,0(sp)
   13858:	dec00204 	addi	sp,sp,8
   1385c:	f800283a 	ret

00013860 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13860:	defff804 	addi	sp,sp,-32
   13864:	dfc00715 	stw	ra,28(sp)
   13868:	df000615 	stw	fp,24(sp)
   1386c:	df000604 	addi	fp,sp,24
   13870:	e13ffc15 	stw	r4,-16(fp)
   13874:	e17ffd15 	stw	r5,-12(fp)
   13878:	e1bffe15 	stw	r6,-8(fp)
   1387c:	e1ffff15 	stw	r7,-4(fp)
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13888:	d0a70117 	ldw	r2,-25596(gp)
   1388c:	1000021e 	bne	r2,zero,13898 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13890:	e0bffb17 	ldw	r2,-20(fp)
   13894:	d0a70115 	stw	r2,-25596(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13898:	e0bffc17 	ldw	r2,-16(fp)
   1389c:	10800104 	addi	r2,r2,4
   138a0:	00c001c4 	movi	r3,7
   138a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   138a8:	d8000015 	stw	zero,0(sp)
   138ac:	e1fffc17 	ldw	r7,-16(fp)
   138b0:	01800074 	movhi	r6,1
   138b4:	318dfa04 	addi	r6,r6,14312
   138b8:	e17ffe17 	ldw	r5,-8(fp)
   138bc:	e13ffd17 	ldw	r4,-12(fp)
   138c0:	0013dd00 	call	13dd0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   138c4:	0001883a 	nop
   138c8:	e037883a 	mov	sp,fp
   138cc:	dfc00117 	ldw	ra,4(sp)
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00204 	addi	sp,sp,8
   138d8:	f800283a 	ret

000138dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   138dc:	defff504 	addi	sp,sp,-44
   138e0:	df000a15 	stw	fp,40(sp)
   138e4:	df000a04 	addi	fp,sp,40
   138e8:	e13ffc15 	stw	r4,-16(fp)
   138ec:	e17ffd15 	stw	r5,-12(fp)
   138f0:	e1bffe15 	stw	r6,-8(fp)
   138f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   138f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   138fc:	d0a70117 	ldw	r2,-25596(gp)
  
  if (alt_ticks_per_second ())
   13900:	10003c26 	beq	r2,zero,139f4 <alt_alarm_start+0x118>
  {
    if (alarm)
   13904:	e0bffc17 	ldw	r2,-16(fp)
   13908:	10003826 	beq	r2,zero,139ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1390c:	e0bffc17 	ldw	r2,-16(fp)
   13910:	e0fffe17 	ldw	r3,-8(fp)
   13914:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13918:	e0bffc17 	ldw	r2,-16(fp)
   1391c:	e0ffff17 	ldw	r3,-4(fp)
   13920:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13924:	0005303a 	rdctl	r2,status
   13928:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1392c:	e0fff917 	ldw	r3,-28(fp)
   13930:	00bfff84 	movi	r2,-2
   13934:	1884703a 	and	r2,r3,r2
   13938:	1001703a 	wrctl	status,r2
  
  return context;
   1393c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   13940:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13944:	d0a70217 	ldw	r2,-25592(gp)
      
      current_nticks = alt_nticks();
   13948:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1394c:	e0fffd17 	ldw	r3,-12(fp)
   13950:	e0bff617 	ldw	r2,-40(fp)
   13954:	1885883a 	add	r2,r3,r2
   13958:	10c00044 	addi	r3,r2,1
   1395c:	e0bffc17 	ldw	r2,-16(fp)
   13960:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   13964:	e0bffc17 	ldw	r2,-16(fp)
   13968:	10c00217 	ldw	r3,8(r2)
   1396c:	e0bff617 	ldw	r2,-40(fp)
   13970:	1880042e 	bgeu	r3,r2,13984 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   13974:	e0bffc17 	ldw	r2,-16(fp)
   13978:	00c00044 	movi	r3,1
   1397c:	10c00405 	stb	r3,16(r2)
   13980:	00000206 	br	1398c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   13984:	e0bffc17 	ldw	r2,-16(fp)
   13988:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1398c:	e0bffc17 	ldw	r2,-16(fp)
   13990:	d0e01104 	addi	r3,gp,-32700
   13994:	e0fffa15 	stw	r3,-24(fp)
   13998:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1399c:	e0bffb17 	ldw	r2,-20(fp)
   139a0:	e0fffa17 	ldw	r3,-24(fp)
   139a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   139a8:	e0bffa17 	ldw	r2,-24(fp)
   139ac:	10c00017 	ldw	r3,0(r2)
   139b0:	e0bffb17 	ldw	r2,-20(fp)
   139b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   139b8:	e0bffa17 	ldw	r2,-24(fp)
   139bc:	10800017 	ldw	r2,0(r2)
   139c0:	e0fffb17 	ldw	r3,-20(fp)
   139c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   139c8:	e0bffa17 	ldw	r2,-24(fp)
   139cc:	e0fffb17 	ldw	r3,-20(fp)
   139d0:	10c00015 	stw	r3,0(r2)
   139d4:	e0bff817 	ldw	r2,-32(fp)
   139d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139dc:	e0bff717 	ldw	r2,-36(fp)
   139e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   139e4:	0005883a 	mov	r2,zero
   139e8:	00000306 	br	139f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   139ec:	00bffa84 	movi	r2,-22
   139f0:	00000106 	br	139f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   139f4:	00bfde84 	movi	r2,-134
  }
}
   139f8:	e037883a 	mov	sp,fp
   139fc:	df000017 	ldw	fp,0(sp)
   13a00:	dec00104 	addi	sp,sp,4
   13a04:	f800283a 	ret

00013a08 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   13a08:	defffa04 	addi	sp,sp,-24
   13a0c:	dfc00515 	stw	ra,20(sp)
   13a10:	df000415 	stw	fp,16(sp)
   13a14:	df000404 	addi	fp,sp,16
   13a18:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   13a1c:	00800244 	movi	r2,9
   13a20:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   13a24:	014003f4 	movhi	r5,15
   13a28:	29509004 	addi	r5,r5,16960
   13a2c:	e13ffd17 	ldw	r4,-12(fp)
   13a30:	00034100 	call	3410 <__mulsi3>
   13a34:	100b883a 	mov	r5,r2
   13a38:	01017db4 	movhi	r4,1526
   13a3c:	21384004 	addi	r4,r4,-7936
   13a40:	00033540 	call	3354 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13a44:	100b883a 	mov	r5,r2
   13a48:	01200034 	movhi	r4,32768
   13a4c:	213fffc4 	addi	r4,r4,-1
   13a50:	00033540 	call	3354 <__udivsi3>
   13a54:	100b883a 	mov	r5,r2
   13a58:	e13fff17 	ldw	r4,-4(fp)
   13a5c:	00033540 	call	3354 <__udivsi3>
   13a60:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   13a64:	e0bffe17 	ldw	r2,-8(fp)
   13a68:	10002a26 	beq	r2,zero,13b14 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   13a6c:	e03ffc15 	stw	zero,-16(fp)
   13a70:	00001706 	br	13ad0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   13a74:	00a00034 	movhi	r2,32768
   13a78:	10bfffc4 	addi	r2,r2,-1
   13a7c:	10bfffc4 	addi	r2,r2,-1
   13a80:	103ffe1e 	bne	r2,zero,13a7c <__alt_data_end+0xfc013a7c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   13a84:	014003f4 	movhi	r5,15
   13a88:	29509004 	addi	r5,r5,16960
   13a8c:	e13ffd17 	ldw	r4,-12(fp)
   13a90:	00034100 	call	3410 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13a94:	100b883a 	mov	r5,r2
   13a98:	01017db4 	movhi	r4,1526
   13a9c:	21384004 	addi	r4,r4,-7936
   13aa0:	00033540 	call	3354 <__udivsi3>
   13aa4:	100b883a 	mov	r5,r2
   13aa8:	01200034 	movhi	r4,32768
   13aac:	213fffc4 	addi	r4,r4,-1
   13ab0:	00033540 	call	3354 <__udivsi3>
   13ab4:	1007883a 	mov	r3,r2
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	10c5c83a 	sub	r2,r2,r3
   13ac0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13ac4:	e0bffc17 	ldw	r2,-16(fp)
   13ac8:	10800044 	addi	r2,r2,1
   13acc:	e0bffc15 	stw	r2,-16(fp)
   13ad0:	e0fffc17 	ldw	r3,-16(fp)
   13ad4:	e0bffe17 	ldw	r2,-8(fp)
   13ad8:	18bfe616 	blt	r3,r2,13a74 <__alt_data_end+0xfc013a74>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13adc:	014003f4 	movhi	r5,15
   13ae0:	29509004 	addi	r5,r5,16960
   13ae4:	e13ffd17 	ldw	r4,-12(fp)
   13ae8:	00034100 	call	3410 <__mulsi3>
   13aec:	100b883a 	mov	r5,r2
   13af0:	01017db4 	movhi	r4,1526
   13af4:	21384004 	addi	r4,r4,-7936
   13af8:	00033540 	call	3354 <__udivsi3>
   13afc:	e17fff17 	ldw	r5,-4(fp)
   13b00:	1009883a 	mov	r4,r2
   13b04:	00034100 	call	3410 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13b08:	10bfffc4 	addi	r2,r2,-1
   13b0c:	103ffe1e 	bne	r2,zero,13b08 <__alt_data_end+0xfc013b08>
   13b10:	00000d06 	br	13b48 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13b14:	014003f4 	movhi	r5,15
   13b18:	29509004 	addi	r5,r5,16960
   13b1c:	e13ffd17 	ldw	r4,-12(fp)
   13b20:	00034100 	call	3410 <__mulsi3>
   13b24:	100b883a 	mov	r5,r2
   13b28:	01017db4 	movhi	r4,1526
   13b2c:	21384004 	addi	r4,r4,-7936
   13b30:	00033540 	call	3354 <__udivsi3>
   13b34:	e17fff17 	ldw	r5,-4(fp)
   13b38:	1009883a 	mov	r4,r2
   13b3c:	00034100 	call	3410 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13b40:	10bfffc4 	addi	r2,r2,-1
   13b44:	00bffe16 	blt	zero,r2,13b40 <__alt_data_end+0xfc013b40>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   13b48:	0005883a 	mov	r2,zero
}
   13b4c:	e037883a 	mov	sp,fp
   13b50:	dfc00117 	ldw	ra,4(sp)
   13b54:	df000017 	ldw	fp,0(sp)
   13b58:	dec00204 	addi	sp,sp,8
   13b5c:	f800283a 	ret

00013b60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13b60:	deffff04 	addi	sp,sp,-4
   13b64:	df000015 	stw	fp,0(sp)
   13b68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13b6c:	0001883a 	nop
   13b70:	e037883a 	mov	sp,fp
   13b74:	df000017 	ldw	fp,0(sp)
   13b78:	dec00104 	addi	sp,sp,4
   13b7c:	f800283a 	ret

00013b80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13b80:	defffe04 	addi	sp,sp,-8
   13b84:	dfc00115 	stw	ra,4(sp)
   13b88:	df000015 	stw	fp,0(sp)
   13b8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13b90:	d0a00f17 	ldw	r2,-32708(gp)
   13b94:	10000326 	beq	r2,zero,13ba4 <alt_get_errno+0x24>
   13b98:	d0a00f17 	ldw	r2,-32708(gp)
   13b9c:	103ee83a 	callr	r2
   13ba0:	00000106 	br	13ba8 <alt_get_errno+0x28>
   13ba4:	d0a6fd04 	addi	r2,gp,-25612
}
   13ba8:	e037883a 	mov	sp,fp
   13bac:	dfc00117 	ldw	ra,4(sp)
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00204 	addi	sp,sp,8
   13bb8:	f800283a 	ret

00013bbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13bbc:	defffa04 	addi	sp,sp,-24
   13bc0:	dfc00515 	stw	ra,20(sp)
   13bc4:	df000415 	stw	fp,16(sp)
   13bc8:	df000404 	addi	fp,sp,16
   13bcc:	e13ffe15 	stw	r4,-8(fp)
   13bd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13bd4:	e0bffe17 	ldw	r2,-8(fp)
   13bd8:	10000326 	beq	r2,zero,13be8 <alt_dev_llist_insert+0x2c>
   13bdc:	e0bffe17 	ldw	r2,-8(fp)
   13be0:	10800217 	ldw	r2,8(r2)
   13be4:	1000061e 	bne	r2,zero,13c00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13be8:	0013b800 	call	13b80 <alt_get_errno>
   13bec:	1007883a 	mov	r3,r2
   13bf0:	00800584 	movi	r2,22
   13bf4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13bf8:	00bffa84 	movi	r2,-22
   13bfc:	00001306 	br	13c4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	e0ffff17 	ldw	r3,-4(fp)
   13c08:	e0fffc15 	stw	r3,-16(fp)
   13c0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13c10:	e0bffd17 	ldw	r2,-12(fp)
   13c14:	e0fffc17 	ldw	r3,-16(fp)
   13c18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13c1c:	e0bffc17 	ldw	r2,-16(fp)
   13c20:	10c00017 	ldw	r3,0(r2)
   13c24:	e0bffd17 	ldw	r2,-12(fp)
   13c28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13c2c:	e0bffc17 	ldw	r2,-16(fp)
   13c30:	10800017 	ldw	r2,0(r2)
   13c34:	e0fffd17 	ldw	r3,-12(fp)
   13c38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13c3c:	e0bffc17 	ldw	r2,-16(fp)
   13c40:	e0fffd17 	ldw	r3,-12(fp)
   13c44:	10c00015 	stw	r3,0(r2)

  return 0;  
   13c48:	0005883a 	mov	r2,zero
}
   13c4c:	e037883a 	mov	sp,fp
   13c50:	dfc00117 	ldw	ra,4(sp)
   13c54:	df000017 	ldw	fp,0(sp)
   13c58:	dec00204 	addi	sp,sp,8
   13c5c:	f800283a 	ret

00013c60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13c60:	defffd04 	addi	sp,sp,-12
   13c64:	dfc00215 	stw	ra,8(sp)
   13c68:	df000115 	stw	fp,4(sp)
   13c6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13c70:	00800074 	movhi	r2,1
   13c74:	10933604 	addi	r2,r2,19672
   13c78:	e0bfff15 	stw	r2,-4(fp)
   13c7c:	00000606 	br	13c98 <_do_ctors+0x38>
        (*ctor) (); 
   13c80:	e0bfff17 	ldw	r2,-4(fp)
   13c84:	10800017 	ldw	r2,0(r2)
   13c88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13c8c:	e0bfff17 	ldw	r2,-4(fp)
   13c90:	10bfff04 	addi	r2,r2,-4
   13c94:	e0bfff15 	stw	r2,-4(fp)
   13c98:	e0ffff17 	ldw	r3,-4(fp)
   13c9c:	00800074 	movhi	r2,1
   13ca0:	10933704 	addi	r2,r2,19676
   13ca4:	18bff62e 	bgeu	r3,r2,13c80 <__alt_data_end+0xfc013c80>
        (*ctor) (); 
}
   13ca8:	0001883a 	nop
   13cac:	e037883a 	mov	sp,fp
   13cb0:	dfc00117 	ldw	ra,4(sp)
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00204 	addi	sp,sp,8
   13cbc:	f800283a 	ret

00013cc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13cc0:	defffd04 	addi	sp,sp,-12
   13cc4:	dfc00215 	stw	ra,8(sp)
   13cc8:	df000115 	stw	fp,4(sp)
   13ccc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13cd0:	00800074 	movhi	r2,1
   13cd4:	10933604 	addi	r2,r2,19672
   13cd8:	e0bfff15 	stw	r2,-4(fp)
   13cdc:	00000606 	br	13cf8 <_do_dtors+0x38>
        (*dtor) (); 
   13ce0:	e0bfff17 	ldw	r2,-4(fp)
   13ce4:	10800017 	ldw	r2,0(r2)
   13ce8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13cec:	e0bfff17 	ldw	r2,-4(fp)
   13cf0:	10bfff04 	addi	r2,r2,-4
   13cf4:	e0bfff15 	stw	r2,-4(fp)
   13cf8:	e0ffff17 	ldw	r3,-4(fp)
   13cfc:	00800074 	movhi	r2,1
   13d00:	10933704 	addi	r2,r2,19676
   13d04:	18bff62e 	bgeu	r3,r2,13ce0 <__alt_data_end+0xfc013ce0>
        (*dtor) (); 
}
   13d08:	0001883a 	nop
   13d0c:	e037883a 	mov	sp,fp
   13d10:	dfc00117 	ldw	ra,4(sp)
   13d14:	df000017 	ldw	fp,0(sp)
   13d18:	dec00204 	addi	sp,sp,8
   13d1c:	f800283a 	ret

00013d20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13d20:	defffa04 	addi	sp,sp,-24
   13d24:	dfc00515 	stw	ra,20(sp)
   13d28:	df000415 	stw	fp,16(sp)
   13d2c:	df000404 	addi	fp,sp,16
   13d30:	e13ffe15 	stw	r4,-8(fp)
   13d34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13d38:	e0bfff17 	ldw	r2,-4(fp)
   13d3c:	10800017 	ldw	r2,0(r2)
   13d40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13d44:	e13ffe17 	ldw	r4,-8(fp)
   13d48:	00035980 	call	3598 <strlen>
   13d4c:	10800044 	addi	r2,r2,1
   13d50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13d54:	00000d06 	br	13d8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13d58:	e0bffc17 	ldw	r2,-16(fp)
   13d5c:	10800217 	ldw	r2,8(r2)
   13d60:	e0fffd17 	ldw	r3,-12(fp)
   13d64:	180d883a 	mov	r6,r3
   13d68:	e17ffe17 	ldw	r5,-8(fp)
   13d6c:	1009883a 	mov	r4,r2
   13d70:	00149940 	call	14994 <memcmp>
   13d74:	1000021e 	bne	r2,zero,13d80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13d78:	e0bffc17 	ldw	r2,-16(fp)
   13d7c:	00000706 	br	13d9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13d80:	e0bffc17 	ldw	r2,-16(fp)
   13d84:	10800017 	ldw	r2,0(r2)
   13d88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13d8c:	e0fffc17 	ldw	r3,-16(fp)
   13d90:	e0bfff17 	ldw	r2,-4(fp)
   13d94:	18bff01e 	bne	r3,r2,13d58 <__alt_data_end+0xfc013d58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13d98:	0005883a 	mov	r2,zero
}
   13d9c:	e037883a 	mov	sp,fp
   13da0:	dfc00117 	ldw	ra,4(sp)
   13da4:	df000017 	ldw	fp,0(sp)
   13da8:	dec00204 	addi	sp,sp,8
   13dac:	f800283a 	ret

00013db0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13db0:	deffff04 	addi	sp,sp,-4
   13db4:	df000015 	stw	fp,0(sp)
   13db8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13dbc:	0001883a 	nop
   13dc0:	e037883a 	mov	sp,fp
   13dc4:	df000017 	ldw	fp,0(sp)
   13dc8:	dec00104 	addi	sp,sp,4
   13dcc:	f800283a 	ret

00013dd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13dd0:	defff904 	addi	sp,sp,-28
   13dd4:	dfc00615 	stw	ra,24(sp)
   13dd8:	df000515 	stw	fp,20(sp)
   13ddc:	df000504 	addi	fp,sp,20
   13de0:	e13ffc15 	stw	r4,-16(fp)
   13de4:	e17ffd15 	stw	r5,-12(fp)
   13de8:	e1bffe15 	stw	r6,-8(fp)
   13dec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13df0:	e0800217 	ldw	r2,8(fp)
   13df4:	d8800015 	stw	r2,0(sp)
   13df8:	e1ffff17 	ldw	r7,-4(fp)
   13dfc:	e1bffe17 	ldw	r6,-8(fp)
   13e00:	e17ffd17 	ldw	r5,-12(fp)
   13e04:	e13ffc17 	ldw	r4,-16(fp)
   13e08:	0013f800 	call	13f80 <alt_iic_isr_register>
}  
   13e0c:	e037883a 	mov	sp,fp
   13e10:	dfc00117 	ldw	ra,4(sp)
   13e14:	df000017 	ldw	fp,0(sp)
   13e18:	dec00204 	addi	sp,sp,8
   13e1c:	f800283a 	ret

00013e20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13e20:	defff904 	addi	sp,sp,-28
   13e24:	df000615 	stw	fp,24(sp)
   13e28:	df000604 	addi	fp,sp,24
   13e2c:	e13ffe15 	stw	r4,-8(fp)
   13e30:	e17fff15 	stw	r5,-4(fp)
   13e34:	e0bfff17 	ldw	r2,-4(fp)
   13e38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e3c:	0005303a 	rdctl	r2,status
   13e40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e44:	e0fffb17 	ldw	r3,-20(fp)
   13e48:	00bfff84 	movi	r2,-2
   13e4c:	1884703a 	and	r2,r3,r2
   13e50:	1001703a 	wrctl	status,r2
  
  return context;
   13e54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13e58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13e5c:	00c00044 	movi	r3,1
   13e60:	e0bffa17 	ldw	r2,-24(fp)
   13e64:	1884983a 	sll	r2,r3,r2
   13e68:	1007883a 	mov	r3,r2
   13e6c:	d0a70317 	ldw	r2,-25588(gp)
   13e70:	1884b03a 	or	r2,r3,r2
   13e74:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13e78:	d0a70317 	ldw	r2,-25588(gp)
   13e7c:	100170fa 	wrctl	ienable,r2
   13e80:	e0bffc17 	ldw	r2,-16(fp)
   13e84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e88:	e0bffd17 	ldw	r2,-12(fp)
   13e8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13e90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   13e94:	0001883a 	nop
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	df000017 	ldw	fp,0(sp)
   13ea0:	dec00104 	addi	sp,sp,4
   13ea4:	f800283a 	ret

00013ea8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13ea8:	defff904 	addi	sp,sp,-28
   13eac:	df000615 	stw	fp,24(sp)
   13eb0:	df000604 	addi	fp,sp,24
   13eb4:	e13ffe15 	stw	r4,-8(fp)
   13eb8:	e17fff15 	stw	r5,-4(fp)
   13ebc:	e0bfff17 	ldw	r2,-4(fp)
   13ec0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ec4:	0005303a 	rdctl	r2,status
   13ec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ecc:	e0fffb17 	ldw	r3,-20(fp)
   13ed0:	00bfff84 	movi	r2,-2
   13ed4:	1884703a 	and	r2,r3,r2
   13ed8:	1001703a 	wrctl	status,r2
  
  return context;
   13edc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13ee0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13ee4:	00c00044 	movi	r3,1
   13ee8:	e0bffa17 	ldw	r2,-24(fp)
   13eec:	1884983a 	sll	r2,r3,r2
   13ef0:	0084303a 	nor	r2,zero,r2
   13ef4:	1007883a 	mov	r3,r2
   13ef8:	d0a70317 	ldw	r2,-25588(gp)
   13efc:	1884703a 	and	r2,r3,r2
   13f00:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13f04:	d0a70317 	ldw	r2,-25588(gp)
   13f08:	100170fa 	wrctl	ienable,r2
   13f0c:	e0bffc17 	ldw	r2,-16(fp)
   13f10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f14:	e0bffd17 	ldw	r2,-12(fp)
   13f18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13f1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13f20:	0001883a 	nop
}
   13f24:	e037883a 	mov	sp,fp
   13f28:	df000017 	ldw	fp,0(sp)
   13f2c:	dec00104 	addi	sp,sp,4
   13f30:	f800283a 	ret

00013f34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13f34:	defffc04 	addi	sp,sp,-16
   13f38:	df000315 	stw	fp,12(sp)
   13f3c:	df000304 	addi	fp,sp,12
   13f40:	e13ffe15 	stw	r4,-8(fp)
   13f44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13f48:	000530fa 	rdctl	r2,ienable
   13f4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13f50:	00c00044 	movi	r3,1
   13f54:	e0bfff17 	ldw	r2,-4(fp)
   13f58:	1884983a 	sll	r2,r3,r2
   13f5c:	1007883a 	mov	r3,r2
   13f60:	e0bffd17 	ldw	r2,-12(fp)
   13f64:	1884703a 	and	r2,r3,r2
   13f68:	1004c03a 	cmpne	r2,r2,zero
   13f6c:	10803fcc 	andi	r2,r2,255
}
   13f70:	e037883a 	mov	sp,fp
   13f74:	df000017 	ldw	fp,0(sp)
   13f78:	dec00104 	addi	sp,sp,4
   13f7c:	f800283a 	ret

00013f80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13f80:	defff504 	addi	sp,sp,-44
   13f84:	dfc00a15 	stw	ra,40(sp)
   13f88:	df000915 	stw	fp,36(sp)
   13f8c:	df000904 	addi	fp,sp,36
   13f90:	e13ffc15 	stw	r4,-16(fp)
   13f94:	e17ffd15 	stw	r5,-12(fp)
   13f98:	e1bffe15 	stw	r6,-8(fp)
   13f9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13fa0:	00bffa84 	movi	r2,-22
   13fa4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13fa8:	e0bffd17 	ldw	r2,-12(fp)
   13fac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13fb0:	e0bff817 	ldw	r2,-32(fp)
   13fb4:	10800808 	cmpgei	r2,r2,32
   13fb8:	1000271e 	bne	r2,zero,14058 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fbc:	0005303a 	rdctl	r2,status
   13fc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fc4:	e0fffb17 	ldw	r3,-20(fp)
   13fc8:	00bfff84 	movi	r2,-2
   13fcc:	1884703a 	and	r2,r3,r2
   13fd0:	1001703a 	wrctl	status,r2
  
  return context;
   13fd4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13fd8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13fdc:	008000b4 	movhi	r2,2
   13fe0:	10a32f04 	addi	r2,r2,-29508
   13fe4:	e0fff817 	ldw	r3,-32(fp)
   13fe8:	180690fa 	slli	r3,r3,3
   13fec:	10c5883a 	add	r2,r2,r3
   13ff0:	e0fffe17 	ldw	r3,-8(fp)
   13ff4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13ff8:	008000b4 	movhi	r2,2
   13ffc:	10a32f04 	addi	r2,r2,-29508
   14000:	e0fff817 	ldw	r3,-32(fp)
   14004:	180690fa 	slli	r3,r3,3
   14008:	10c5883a 	add	r2,r2,r3
   1400c:	10800104 	addi	r2,r2,4
   14010:	e0ffff17 	ldw	r3,-4(fp)
   14014:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14018:	e0bffe17 	ldw	r2,-8(fp)
   1401c:	10000526 	beq	r2,zero,14034 <alt_iic_isr_register+0xb4>
   14020:	e0bff817 	ldw	r2,-32(fp)
   14024:	100b883a 	mov	r5,r2
   14028:	e13ffc17 	ldw	r4,-16(fp)
   1402c:	0013e200 	call	13e20 <alt_ic_irq_enable>
   14030:	00000406 	br	14044 <alt_iic_isr_register+0xc4>
   14034:	e0bff817 	ldw	r2,-32(fp)
   14038:	100b883a 	mov	r5,r2
   1403c:	e13ffc17 	ldw	r4,-16(fp)
   14040:	0013ea80 	call	13ea8 <alt_ic_irq_disable>
   14044:	e0bff715 	stw	r2,-36(fp)
   14048:	e0bffa17 	ldw	r2,-24(fp)
   1404c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14050:	e0bff917 	ldw	r2,-28(fp)
   14054:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14058:	e0bff717 	ldw	r2,-36(fp)
}
   1405c:	e037883a 	mov	sp,fp
   14060:	dfc00117 	ldw	ra,4(sp)
   14064:	df000017 	ldw	fp,0(sp)
   14068:	dec00204 	addi	sp,sp,8
   1406c:	f800283a 	ret

00014070 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14070:	defff804 	addi	sp,sp,-32
   14074:	dfc00715 	stw	ra,28(sp)
   14078:	df000615 	stw	fp,24(sp)
   1407c:	dc000515 	stw	r16,20(sp)
   14080:	df000604 	addi	fp,sp,24
   14084:	e13ffb15 	stw	r4,-20(fp)
   14088:	e17ffc15 	stw	r5,-16(fp)
   1408c:	e1bffd15 	stw	r6,-12(fp)
   14090:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   14094:	e1bffe17 	ldw	r6,-8(fp)
   14098:	e17ffd17 	ldw	r5,-12(fp)
   1409c:	e13ffc17 	ldw	r4,-16(fp)
   140a0:	00142f80 	call	142f8 <open>
   140a4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   140a8:	e0bffa17 	ldw	r2,-24(fp)
   140ac:	10002216 	blt	r2,zero,14138 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   140b0:	04000074 	movhi	r16,1
   140b4:	84173e04 	addi	r16,r16,23800
   140b8:	e0bffa17 	ldw	r2,-24(fp)
   140bc:	01400304 	movi	r5,12
   140c0:	1009883a 	mov	r4,r2
   140c4:	00034100 	call	3410 <__mulsi3>
   140c8:	8085883a 	add	r2,r16,r2
   140cc:	10c00017 	ldw	r3,0(r2)
   140d0:	e0bffb17 	ldw	r2,-20(fp)
   140d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   140d8:	04000074 	movhi	r16,1
   140dc:	84173e04 	addi	r16,r16,23800
   140e0:	e0bffa17 	ldw	r2,-24(fp)
   140e4:	01400304 	movi	r5,12
   140e8:	1009883a 	mov	r4,r2
   140ec:	00034100 	call	3410 <__mulsi3>
   140f0:	8085883a 	add	r2,r16,r2
   140f4:	10800104 	addi	r2,r2,4
   140f8:	10c00017 	ldw	r3,0(r2)
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14104:	04000074 	movhi	r16,1
   14108:	84173e04 	addi	r16,r16,23800
   1410c:	e0bffa17 	ldw	r2,-24(fp)
   14110:	01400304 	movi	r5,12
   14114:	1009883a 	mov	r4,r2
   14118:	00034100 	call	3410 <__mulsi3>
   1411c:	8085883a 	add	r2,r16,r2
   14120:	10800204 	addi	r2,r2,8
   14124:	10c00017 	ldw	r3,0(r2)
   14128:	e0bffb17 	ldw	r2,-20(fp)
   1412c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14130:	e13ffa17 	ldw	r4,-24(fp)
   14134:	0010a480 	call	10a48 <alt_release_fd>
  }
} 
   14138:	0001883a 	nop
   1413c:	e6ffff04 	addi	sp,fp,-4
   14140:	dfc00217 	ldw	ra,8(sp)
   14144:	df000117 	ldw	fp,4(sp)
   14148:	dc000017 	ldw	r16,0(sp)
   1414c:	dec00304 	addi	sp,sp,12
   14150:	f800283a 	ret

00014154 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14154:	defffb04 	addi	sp,sp,-20
   14158:	dfc00415 	stw	ra,16(sp)
   1415c:	df000315 	stw	fp,12(sp)
   14160:	df000304 	addi	fp,sp,12
   14164:	e13ffd15 	stw	r4,-12(fp)
   14168:	e17ffe15 	stw	r5,-8(fp)
   1416c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14170:	01c07fc4 	movi	r7,511
   14174:	01800044 	movi	r6,1
   14178:	e17ffd17 	ldw	r5,-12(fp)
   1417c:	01000074 	movhi	r4,1
   14180:	21174104 	addi	r4,r4,23812
   14184:	00140700 	call	14070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14188:	01c07fc4 	movi	r7,511
   1418c:	000d883a 	mov	r6,zero
   14190:	e17ffe17 	ldw	r5,-8(fp)
   14194:	01000074 	movhi	r4,1
   14198:	21173e04 	addi	r4,r4,23800
   1419c:	00140700 	call	14070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   141a0:	01c07fc4 	movi	r7,511
   141a4:	01800044 	movi	r6,1
   141a8:	e17fff17 	ldw	r5,-4(fp)
   141ac:	01000074 	movhi	r4,1
   141b0:	21174404 	addi	r4,r4,23824
   141b4:	00140700 	call	14070 <alt_open_fd>
}  
   141b8:	0001883a 	nop
   141bc:	e037883a 	mov	sp,fp
   141c0:	dfc00117 	ldw	ra,4(sp)
   141c4:	df000017 	ldw	fp,0(sp)
   141c8:	dec00204 	addi	sp,sp,8
   141cc:	f800283a 	ret

000141d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   141d0:	defffe04 	addi	sp,sp,-8
   141d4:	dfc00115 	stw	ra,4(sp)
   141d8:	df000015 	stw	fp,0(sp)
   141dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   141e0:	d0a00f17 	ldw	r2,-32708(gp)
   141e4:	10000326 	beq	r2,zero,141f4 <alt_get_errno+0x24>
   141e8:	d0a00f17 	ldw	r2,-32708(gp)
   141ec:	103ee83a 	callr	r2
   141f0:	00000106 	br	141f8 <alt_get_errno+0x28>
   141f4:	d0a6fd04 	addi	r2,gp,-25612
}
   141f8:	e037883a 	mov	sp,fp
   141fc:	dfc00117 	ldw	ra,4(sp)
   14200:	df000017 	ldw	fp,0(sp)
   14204:	dec00204 	addi	sp,sp,8
   14208:	f800283a 	ret

0001420c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1420c:	defffb04 	addi	sp,sp,-20
   14210:	dfc00415 	stw	ra,16(sp)
   14214:	df000315 	stw	fp,12(sp)
   14218:	dc000215 	stw	r16,8(sp)
   1421c:	df000304 	addi	fp,sp,12
   14220:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14224:	e0bffe17 	ldw	r2,-8(fp)
   14228:	10800217 	ldw	r2,8(r2)
   1422c:	10d00034 	orhi	r3,r2,16384
   14230:	e0bffe17 	ldw	r2,-8(fp)
   14234:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14238:	e03ffd15 	stw	zero,-12(fp)
   1423c:	00002306 	br	142cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14240:	04000074 	movhi	r16,1
   14244:	84173e04 	addi	r16,r16,23800
   14248:	e0bffd17 	ldw	r2,-12(fp)
   1424c:	01400304 	movi	r5,12
   14250:	1009883a 	mov	r4,r2
   14254:	00034100 	call	3410 <__mulsi3>
   14258:	8085883a 	add	r2,r16,r2
   1425c:	10c00017 	ldw	r3,0(r2)
   14260:	e0bffe17 	ldw	r2,-8(fp)
   14264:	10800017 	ldw	r2,0(r2)
   14268:	1880151e 	bne	r3,r2,142c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1426c:	04000074 	movhi	r16,1
   14270:	84173e04 	addi	r16,r16,23800
   14274:	e0bffd17 	ldw	r2,-12(fp)
   14278:	01400304 	movi	r5,12
   1427c:	1009883a 	mov	r4,r2
   14280:	00034100 	call	3410 <__mulsi3>
   14284:	8085883a 	add	r2,r16,r2
   14288:	10800204 	addi	r2,r2,8
   1428c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14290:	10000b0e 	bge	r2,zero,142c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14294:	01400304 	movi	r5,12
   14298:	e13ffd17 	ldw	r4,-12(fp)
   1429c:	00034100 	call	3410 <__mulsi3>
   142a0:	1007883a 	mov	r3,r2
   142a4:	00800074 	movhi	r2,1
   142a8:	10973e04 	addi	r2,r2,23800
   142ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   142b0:	e0bffe17 	ldw	r2,-8(fp)
   142b4:	18800226 	beq	r3,r2,142c0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   142b8:	00bffcc4 	movi	r2,-13
   142bc:	00000806 	br	142e0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   142c0:	e0bffd17 	ldw	r2,-12(fp)
   142c4:	10800044 	addi	r2,r2,1
   142c8:	e0bffd15 	stw	r2,-12(fp)
   142cc:	d0a00e17 	ldw	r2,-32712(gp)
   142d0:	1007883a 	mov	r3,r2
   142d4:	e0bffd17 	ldw	r2,-12(fp)
   142d8:	18bfd92e 	bgeu	r3,r2,14240 <__alt_data_end+0xfc014240>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   142dc:	0005883a 	mov	r2,zero
}
   142e0:	e6ffff04 	addi	sp,fp,-4
   142e4:	dfc00217 	ldw	ra,8(sp)
   142e8:	df000117 	ldw	fp,4(sp)
   142ec:	dc000017 	ldw	r16,0(sp)
   142f0:	dec00304 	addi	sp,sp,12
   142f4:	f800283a 	ret

000142f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   142f8:	defff604 	addi	sp,sp,-40
   142fc:	dfc00915 	stw	ra,36(sp)
   14300:	df000815 	stw	fp,32(sp)
   14304:	df000804 	addi	fp,sp,32
   14308:	e13ffd15 	stw	r4,-12(fp)
   1430c:	e17ffe15 	stw	r5,-8(fp)
   14310:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14314:	00bfffc4 	movi	r2,-1
   14318:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1431c:	00bffb44 	movi	r2,-19
   14320:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14324:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14328:	d1600c04 	addi	r5,gp,-32720
   1432c:	e13ffd17 	ldw	r4,-12(fp)
   14330:	0013d200 	call	13d20 <alt_find_dev>
   14334:	e0bff815 	stw	r2,-32(fp)
   14338:	e0bff817 	ldw	r2,-32(fp)
   1433c:	1000051e 	bne	r2,zero,14354 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14340:	e13ffd17 	ldw	r4,-12(fp)
   14344:	00146e00 	call	146e0 <alt_find_file>
   14348:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1434c:	00800044 	movi	r2,1
   14350:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14354:	e0bff817 	ldw	r2,-32(fp)
   14358:	10002b26 	beq	r2,zero,14408 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1435c:	e13ff817 	ldw	r4,-32(fp)
   14360:	00147e80 	call	147e8 <alt_get_fd>
   14364:	e0bff915 	stw	r2,-28(fp)
   14368:	e0bff917 	ldw	r2,-28(fp)
   1436c:	1000030e 	bge	r2,zero,1437c <open+0x84>
    {
      status = index;
   14370:	e0bff917 	ldw	r2,-28(fp)
   14374:	e0bffa15 	stw	r2,-24(fp)
   14378:	00002506 	br	14410 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1437c:	01400304 	movi	r5,12
   14380:	e13ff917 	ldw	r4,-28(fp)
   14384:	00034100 	call	3410 <__mulsi3>
   14388:	1007883a 	mov	r3,r2
   1438c:	00800074 	movhi	r2,1
   14390:	10973e04 	addi	r2,r2,23800
   14394:	1885883a 	add	r2,r3,r2
   14398:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1439c:	e0fffe17 	ldw	r3,-8(fp)
   143a0:	00900034 	movhi	r2,16384
   143a4:	10bfffc4 	addi	r2,r2,-1
   143a8:	1886703a 	and	r3,r3,r2
   143ac:	e0bffc17 	ldw	r2,-16(fp)
   143b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   143b4:	e0bffb17 	ldw	r2,-20(fp)
   143b8:	1000051e 	bne	r2,zero,143d0 <open+0xd8>
   143bc:	e13ffc17 	ldw	r4,-16(fp)
   143c0:	001420c0 	call	1420c <alt_file_locked>
   143c4:	e0bffa15 	stw	r2,-24(fp)
   143c8:	e0bffa17 	ldw	r2,-24(fp)
   143cc:	10001016 	blt	r2,zero,14410 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   143d0:	e0bff817 	ldw	r2,-32(fp)
   143d4:	10800317 	ldw	r2,12(r2)
   143d8:	10000826 	beq	r2,zero,143fc <open+0x104>
   143dc:	e0bff817 	ldw	r2,-32(fp)
   143e0:	10800317 	ldw	r2,12(r2)
   143e4:	e1ffff17 	ldw	r7,-4(fp)
   143e8:	e1bffe17 	ldw	r6,-8(fp)
   143ec:	e17ffd17 	ldw	r5,-12(fp)
   143f0:	e13ffc17 	ldw	r4,-16(fp)
   143f4:	103ee83a 	callr	r2
   143f8:	00000106 	br	14400 <open+0x108>
   143fc:	0005883a 	mov	r2,zero
   14400:	e0bffa15 	stw	r2,-24(fp)
   14404:	00000206 	br	14410 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14408:	00bffb44 	movi	r2,-19
   1440c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14410:	e0bffa17 	ldw	r2,-24(fp)
   14414:	1000090e 	bge	r2,zero,1443c <open+0x144>
  {
    alt_release_fd (index);  
   14418:	e13ff917 	ldw	r4,-28(fp)
   1441c:	0010a480 	call	10a48 <alt_release_fd>
    ALT_ERRNO = -status;
   14420:	00141d00 	call	141d0 <alt_get_errno>
   14424:	1007883a 	mov	r3,r2
   14428:	e0bffa17 	ldw	r2,-24(fp)
   1442c:	0085c83a 	sub	r2,zero,r2
   14430:	18800015 	stw	r2,0(r3)
    return -1;
   14434:	00bfffc4 	movi	r2,-1
   14438:	00000106 	br	14440 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1443c:	e0bff917 	ldw	r2,-28(fp)
}
   14440:	e037883a 	mov	sp,fp
   14444:	dfc00117 	ldw	ra,4(sp)
   14448:	df000017 	ldw	fp,0(sp)
   1444c:	dec00204 	addi	sp,sp,8
   14450:	f800283a 	ret

00014454 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   14454:	defff204 	addi	sp,sp,-56
   14458:	dfc00a15 	stw	ra,40(sp)
   1445c:	df000915 	stw	fp,36(sp)
   14460:	df000904 	addi	fp,sp,36
   14464:	e13fff15 	stw	r4,-4(fp)
   14468:	e1400215 	stw	r5,8(fp)
   1446c:	e1800315 	stw	r6,12(fp)
   14470:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   14474:	e0800204 	addi	r2,fp,8
   14478:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   1447c:	e0bfff17 	ldw	r2,-4(fp)
   14480:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   14484:	00006f06 	br	14644 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   14488:	e0bff807 	ldb	r2,-32(fp)
   1448c:	10800960 	cmpeqi	r2,r2,37
   14490:	1000041e 	bne	r2,zero,144a4 <alt_printf+0x50>
        {
            alt_putchar(c);
   14494:	e0bff807 	ldb	r2,-32(fp)
   14498:	1009883a 	mov	r4,r2
   1449c:	00146800 	call	14680 <alt_putchar>
   144a0:	00006806 	br	14644 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   144a4:	e0bff717 	ldw	r2,-36(fp)
   144a8:	10c00044 	addi	r3,r2,1
   144ac:	e0fff715 	stw	r3,-36(fp)
   144b0:	10800003 	ldbu	r2,0(r2)
   144b4:	e0bff805 	stb	r2,-32(fp)
   144b8:	e0bff807 	ldb	r2,-32(fp)
   144bc:	10006926 	beq	r2,zero,14664 <alt_printf+0x210>
            {
                if (c == '%')
   144c0:	e0bff807 	ldb	r2,-32(fp)
   144c4:	10800958 	cmpnei	r2,r2,37
   144c8:	1000041e 	bne	r2,zero,144dc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   144cc:	e0bff807 	ldb	r2,-32(fp)
   144d0:	1009883a 	mov	r4,r2
   144d4:	00146800 	call	14680 <alt_putchar>
   144d8:	00005a06 	br	14644 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   144dc:	e0bff807 	ldb	r2,-32(fp)
   144e0:	108018d8 	cmpnei	r2,r2,99
   144e4:	1000081e 	bne	r2,zero,14508 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   144e8:	e0bffe17 	ldw	r2,-8(fp)
   144ec:	10c00104 	addi	r3,r2,4
   144f0:	e0fffe15 	stw	r3,-8(fp)
   144f4:	10800017 	ldw	r2,0(r2)
   144f8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   144fc:	e13ffd17 	ldw	r4,-12(fp)
   14500:	00146800 	call	14680 <alt_putchar>
   14504:	00004f06 	br	14644 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   14508:	e0bff807 	ldb	r2,-32(fp)
   1450c:	10801e18 	cmpnei	r2,r2,120
   14510:	1000341e 	bne	r2,zero,145e4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   14514:	e0bffe17 	ldw	r2,-8(fp)
   14518:	10c00104 	addi	r3,r2,4
   1451c:	e0fffe15 	stw	r3,-8(fp)
   14520:	10800017 	ldw	r2,0(r2)
   14524:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   14528:	e0bffb17 	ldw	r2,-20(fp)
   1452c:	1000031e 	bne	r2,zero,1453c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   14530:	01000c04 	movi	r4,48
   14534:	00146800 	call	14680 <alt_putchar>
                        continue;
   14538:	00004206 	br	14644 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1453c:	00800704 	movi	r2,28
   14540:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   14544:	00000306 	br	14554 <alt_printf+0x100>
                        digit_shift -= 4;
   14548:	e0bff917 	ldw	r2,-28(fp)
   1454c:	10bfff04 	addi	r2,r2,-4
   14550:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   14554:	00c003c4 	movi	r3,15
   14558:	e0bff917 	ldw	r2,-28(fp)
   1455c:	1884983a 	sll	r2,r3,r2
   14560:	1007883a 	mov	r3,r2
   14564:	e0bffb17 	ldw	r2,-20(fp)
   14568:	1884703a 	and	r2,r3,r2
   1456c:	103ff626 	beq	r2,zero,14548 <__alt_data_end+0xfc014548>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14570:	00001906 	br	145d8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   14574:	00c003c4 	movi	r3,15
   14578:	e0bff917 	ldw	r2,-28(fp)
   1457c:	1884983a 	sll	r2,r3,r2
   14580:	1007883a 	mov	r3,r2
   14584:	e0bffb17 	ldw	r2,-20(fp)
   14588:	1886703a 	and	r3,r3,r2
   1458c:	e0bff917 	ldw	r2,-28(fp)
   14590:	1884d83a 	srl	r2,r3,r2
   14594:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   14598:	e0bffc17 	ldw	r2,-16(fp)
   1459c:	108002a8 	cmpgeui	r2,r2,10
   145a0:	1000041e 	bne	r2,zero,145b4 <alt_printf+0x160>
                            c = '0' + digit;
   145a4:	e0bffc17 	ldw	r2,-16(fp)
   145a8:	10800c04 	addi	r2,r2,48
   145ac:	e0bff805 	stb	r2,-32(fp)
   145b0:	00000306 	br	145c0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   145b4:	e0bffc17 	ldw	r2,-16(fp)
   145b8:	108015c4 	addi	r2,r2,87
   145bc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   145c0:	e0bff807 	ldb	r2,-32(fp)
   145c4:	1009883a 	mov	r4,r2
   145c8:	00146800 	call	14680 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   145cc:	e0bff917 	ldw	r2,-28(fp)
   145d0:	10bfff04 	addi	r2,r2,-4
   145d4:	e0bff915 	stw	r2,-28(fp)
   145d8:	e0bff917 	ldw	r2,-28(fp)
   145dc:	103fe50e 	bge	r2,zero,14574 <__alt_data_end+0xfc014574>
   145e0:	00001806 	br	14644 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   145e4:	e0bff807 	ldb	r2,-32(fp)
   145e8:	10801cd8 	cmpnei	r2,r2,115
   145ec:	1000151e 	bne	r2,zero,14644 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   145f0:	e0bffe17 	ldw	r2,-8(fp)
   145f4:	10c00104 	addi	r3,r2,4
   145f8:	e0fffe15 	stw	r3,-8(fp)
   145fc:	10800017 	ldw	r2,0(r2)
   14600:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   14604:	00000906 	br	1462c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14608:	e0bffa17 	ldw	r2,-24(fp)
   1460c:	10c00044 	addi	r3,r2,1
   14610:	e0fffa15 	stw	r3,-24(fp)
   14614:	10800003 	ldbu	r2,0(r2)
   14618:	10803fcc 	andi	r2,r2,255
   1461c:	1080201c 	xori	r2,r2,128
   14620:	10bfe004 	addi	r2,r2,-128
   14624:	1009883a 	mov	r4,r2
   14628:	00146800 	call	14680 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   1462c:	e0bffa17 	ldw	r2,-24(fp)
   14630:	10800003 	ldbu	r2,0(r2)
   14634:	10803fcc 	andi	r2,r2,255
   14638:	1080201c 	xori	r2,r2,128
   1463c:	10bfe004 	addi	r2,r2,-128
   14640:	103ff11e 	bne	r2,zero,14608 <__alt_data_end+0xfc014608>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   14644:	e0bff717 	ldw	r2,-36(fp)
   14648:	10c00044 	addi	r3,r2,1
   1464c:	e0fff715 	stw	r3,-36(fp)
   14650:	10800003 	ldbu	r2,0(r2)
   14654:	e0bff805 	stb	r2,-32(fp)
   14658:	e0bff807 	ldb	r2,-32(fp)
   1465c:	103f8a1e 	bne	r2,zero,14488 <__alt_data_end+0xfc014488>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   14660:	00000106 	br	14668 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   14664:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   14668:	0001883a 	nop
   1466c:	e037883a 	mov	sp,fp
   14670:	dfc00117 	ldw	ra,4(sp)
   14674:	df000017 	ldw	fp,0(sp)
   14678:	dec00504 	addi	sp,sp,20
   1467c:	f800283a 	ret

00014680 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   14680:	defffd04 	addi	sp,sp,-12
   14684:	dfc00215 	stw	ra,8(sp)
   14688:	df000115 	stw	fp,4(sp)
   1468c:	df000104 	addi	fp,sp,4
   14690:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   14694:	d0a00517 	ldw	r2,-32748(gp)
   14698:	10800217 	ldw	r2,8(r2)
   1469c:	100b883a 	mov	r5,r2
   146a0:	e13fff17 	ldw	r4,-4(fp)
   146a4:	000a5700 	call	a570 <putc>
#endif
#endif
}
   146a8:	e037883a 	mov	sp,fp
   146ac:	dfc00117 	ldw	ra,4(sp)
   146b0:	df000017 	ldw	fp,0(sp)
   146b4:	dec00204 	addi	sp,sp,8
   146b8:	f800283a 	ret

000146bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   146bc:	deffff04 	addi	sp,sp,-4
   146c0:	df000015 	stw	fp,0(sp)
   146c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   146c8:	000170fa 	wrctl	ienable,zero
}
   146cc:	0001883a 	nop
   146d0:	e037883a 	mov	sp,fp
   146d4:	df000017 	ldw	fp,0(sp)
   146d8:	dec00104 	addi	sp,sp,4
   146dc:	f800283a 	ret

000146e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   146e0:	defffb04 	addi	sp,sp,-20
   146e4:	dfc00415 	stw	ra,16(sp)
   146e8:	df000315 	stw	fp,12(sp)
   146ec:	df000304 	addi	fp,sp,12
   146f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   146f4:	d0a00a17 	ldw	r2,-32728(gp)
   146f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   146fc:	00003106 	br	147c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   14700:	e0bffd17 	ldw	r2,-12(fp)
   14704:	10800217 	ldw	r2,8(r2)
   14708:	1009883a 	mov	r4,r2
   1470c:	00035980 	call	3598 <strlen>
   14710:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14714:	e0bffd17 	ldw	r2,-12(fp)
   14718:	10c00217 	ldw	r3,8(r2)
   1471c:	e0bffe17 	ldw	r2,-8(fp)
   14720:	10bfffc4 	addi	r2,r2,-1
   14724:	1885883a 	add	r2,r3,r2
   14728:	10800003 	ldbu	r2,0(r2)
   1472c:	10803fcc 	andi	r2,r2,255
   14730:	1080201c 	xori	r2,r2,128
   14734:	10bfe004 	addi	r2,r2,-128
   14738:	10800bd8 	cmpnei	r2,r2,47
   1473c:	1000031e 	bne	r2,zero,1474c <alt_find_file+0x6c>
    {
      len -= 1;
   14740:	e0bffe17 	ldw	r2,-8(fp)
   14744:	10bfffc4 	addi	r2,r2,-1
   14748:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1474c:	e0bffe17 	ldw	r2,-8(fp)
   14750:	e0ffff17 	ldw	r3,-4(fp)
   14754:	1885883a 	add	r2,r3,r2
   14758:	10800003 	ldbu	r2,0(r2)
   1475c:	10803fcc 	andi	r2,r2,255
   14760:	1080201c 	xori	r2,r2,128
   14764:	10bfe004 	addi	r2,r2,-128
   14768:	10800be0 	cmpeqi	r2,r2,47
   1476c:	1000081e 	bne	r2,zero,14790 <alt_find_file+0xb0>
   14770:	e0bffe17 	ldw	r2,-8(fp)
   14774:	e0ffff17 	ldw	r3,-4(fp)
   14778:	1885883a 	add	r2,r3,r2
   1477c:	10800003 	ldbu	r2,0(r2)
   14780:	10803fcc 	andi	r2,r2,255
   14784:	1080201c 	xori	r2,r2,128
   14788:	10bfe004 	addi	r2,r2,-128
   1478c:	10000a1e 	bne	r2,zero,147b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   14790:	e0bffd17 	ldw	r2,-12(fp)
   14794:	10800217 	ldw	r2,8(r2)
   14798:	e0fffe17 	ldw	r3,-8(fp)
   1479c:	180d883a 	mov	r6,r3
   147a0:	e17fff17 	ldw	r5,-4(fp)
   147a4:	1009883a 	mov	r4,r2
   147a8:	00149940 	call	14994 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   147ac:	1000021e 	bne	r2,zero,147b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   147b0:	e0bffd17 	ldw	r2,-12(fp)
   147b4:	00000706 	br	147d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   147b8:	e0bffd17 	ldw	r2,-12(fp)
   147bc:	10800017 	ldw	r2,0(r2)
   147c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   147c4:	e0fffd17 	ldw	r3,-12(fp)
   147c8:	d0a00a04 	addi	r2,gp,-32728
   147cc:	18bfcc1e 	bne	r3,r2,14700 <__alt_data_end+0xfc014700>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   147d0:	0005883a 	mov	r2,zero
}
   147d4:	e037883a 	mov	sp,fp
   147d8:	dfc00117 	ldw	ra,4(sp)
   147dc:	df000017 	ldw	fp,0(sp)
   147e0:	dec00204 	addi	sp,sp,8
   147e4:	f800283a 	ret

000147e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   147e8:	defffa04 	addi	sp,sp,-24
   147ec:	dfc00515 	stw	ra,20(sp)
   147f0:	df000415 	stw	fp,16(sp)
   147f4:	dc000315 	stw	r16,12(sp)
   147f8:	df000404 	addi	fp,sp,16
   147fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   14800:	00bffa04 	movi	r2,-24
   14804:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14808:	e03ffc15 	stw	zero,-16(fp)
   1480c:	00001d06 	br	14884 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   14810:	04000074 	movhi	r16,1
   14814:	84173e04 	addi	r16,r16,23800
   14818:	e0bffc17 	ldw	r2,-16(fp)
   1481c:	01400304 	movi	r5,12
   14820:	1009883a 	mov	r4,r2
   14824:	00034100 	call	3410 <__mulsi3>
   14828:	8085883a 	add	r2,r16,r2
   1482c:	10800017 	ldw	r2,0(r2)
   14830:	1000111e 	bne	r2,zero,14878 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   14834:	04000074 	movhi	r16,1
   14838:	84173e04 	addi	r16,r16,23800
   1483c:	e0bffc17 	ldw	r2,-16(fp)
   14840:	01400304 	movi	r5,12
   14844:	1009883a 	mov	r4,r2
   14848:	00034100 	call	3410 <__mulsi3>
   1484c:	8085883a 	add	r2,r16,r2
   14850:	e0fffe17 	ldw	r3,-8(fp)
   14854:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14858:	d0e00e17 	ldw	r3,-32712(gp)
   1485c:	e0bffc17 	ldw	r2,-16(fp)
   14860:	1880020e 	bge	r3,r2,1486c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   14864:	e0bffc17 	ldw	r2,-16(fp)
   14868:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   1486c:	e0bffc17 	ldw	r2,-16(fp)
   14870:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14874:	00000606 	br	14890 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14878:	e0bffc17 	ldw	r2,-16(fp)
   1487c:	10800044 	addi	r2,r2,1
   14880:	e0bffc15 	stw	r2,-16(fp)
   14884:	e0bffc17 	ldw	r2,-16(fp)
   14888:	10800810 	cmplti	r2,r2,32
   1488c:	103fe01e 	bne	r2,zero,14810 <__alt_data_end+0xfc014810>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14890:	e0bffd17 	ldw	r2,-12(fp)
}
   14894:	e6ffff04 	addi	sp,fp,-4
   14898:	dfc00217 	ldw	ra,8(sp)
   1489c:	df000117 	ldw	fp,4(sp)
   148a0:	dc000017 	ldw	r16,0(sp)
   148a4:	dec00304 	addi	sp,sp,12
   148a8:	f800283a 	ret

000148ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   148ac:	defffe04 	addi	sp,sp,-8
   148b0:	df000115 	stw	fp,4(sp)
   148b4:	df000104 	addi	fp,sp,4
   148b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   148bc:	e0bfff17 	ldw	r2,-4(fp)
   148c0:	10bffe84 	addi	r2,r2,-6
   148c4:	10c00428 	cmpgeui	r3,r2,16
   148c8:	18001a1e 	bne	r3,zero,14934 <alt_exception_cause_generated_bad_addr+0x88>
   148cc:	100690ba 	slli	r3,r2,2
   148d0:	00800074 	movhi	r2,1
   148d4:	10923904 	addi	r2,r2,18660
   148d8:	1885883a 	add	r2,r3,r2
   148dc:	10800017 	ldw	r2,0(r2)
   148e0:	1000683a 	jmp	r2
   148e4:	00014924 	muli	zero,zero,1316
   148e8:	00014924 	muli	zero,zero,1316
   148ec:	00014934 	movhi	zero,1316
   148f0:	00014934 	movhi	zero,1316
   148f4:	00014934 	movhi	zero,1316
   148f8:	00014924 	muli	zero,zero,1316
   148fc:	0001492c 	andhi	zero,zero,1316
   14900:	00014934 	movhi	zero,1316
   14904:	00014924 	muli	zero,zero,1316
   14908:	00014924 	muli	zero,zero,1316
   1490c:	00014934 	movhi	zero,1316
   14910:	00014924 	muli	zero,zero,1316
   14914:	0001492c 	andhi	zero,zero,1316
   14918:	00014934 	movhi	zero,1316
   1491c:	00014934 	movhi	zero,1316
   14920:	00014924 	muli	zero,zero,1316
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14924:	00800044 	movi	r2,1
   14928:	00000306 	br	14938 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1492c:	0005883a 	mov	r2,zero
   14930:	00000106 	br	14938 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   14934:	0005883a 	mov	r2,zero
  }
}
   14938:	e037883a 	mov	sp,fp
   1493c:	df000017 	ldw	fp,0(sp)
   14940:	dec00104 	addi	sp,sp,4
   14944:	f800283a 	ret

00014948 <atexit>:
   14948:	200b883a 	mov	r5,r4
   1494c:	000f883a 	mov	r7,zero
   14950:	000d883a 	mov	r6,zero
   14954:	0009883a 	mov	r4,zero
   14958:	0014a101 	jmpi	14a10 <__register_exitproc>

0001495c <exit>:
   1495c:	defffe04 	addi	sp,sp,-8
   14960:	000b883a 	mov	r5,zero
   14964:	dc000015 	stw	r16,0(sp)
   14968:	dfc00115 	stw	ra,4(sp)
   1496c:	2021883a 	mov	r16,r4
   14970:	0014b280 	call	14b28 <__call_exitprocs>
   14974:	00800074 	movhi	r2,1
   14978:	109bc804 	addi	r2,r2,28448
   1497c:	11000017 	ldw	r4,0(r2)
   14980:	20800f17 	ldw	r2,60(r4)
   14984:	10000126 	beq	r2,zero,1498c <exit+0x30>
   14988:	103ee83a 	callr	r2
   1498c:	8009883a 	mov	r4,r16
   14990:	0014ca80 	call	14ca8 <_exit>

00014994 <memcmp>:
   14994:	01c000c4 	movi	r7,3
   14998:	3980192e 	bgeu	r7,r6,14a00 <memcmp+0x6c>
   1499c:	2144b03a 	or	r2,r4,r5
   149a0:	11c4703a 	and	r2,r2,r7
   149a4:	10000f26 	beq	r2,zero,149e4 <memcmp+0x50>
   149a8:	20800003 	ldbu	r2,0(r4)
   149ac:	28c00003 	ldbu	r3,0(r5)
   149b0:	10c0151e 	bne	r2,r3,14a08 <memcmp+0x74>
   149b4:	31bfff84 	addi	r6,r6,-2
   149b8:	01ffffc4 	movi	r7,-1
   149bc:	00000406 	br	149d0 <memcmp+0x3c>
   149c0:	20800003 	ldbu	r2,0(r4)
   149c4:	28c00003 	ldbu	r3,0(r5)
   149c8:	31bfffc4 	addi	r6,r6,-1
   149cc:	10c00e1e 	bne	r2,r3,14a08 <memcmp+0x74>
   149d0:	21000044 	addi	r4,r4,1
   149d4:	29400044 	addi	r5,r5,1
   149d8:	31fff91e 	bne	r6,r7,149c0 <__alt_data_end+0xfc0149c0>
   149dc:	0005883a 	mov	r2,zero
   149e0:	f800283a 	ret
   149e4:	20c00017 	ldw	r3,0(r4)
   149e8:	28800017 	ldw	r2,0(r5)
   149ec:	18bfee1e 	bne	r3,r2,149a8 <__alt_data_end+0xfc0149a8>
   149f0:	31bfff04 	addi	r6,r6,-4
   149f4:	21000104 	addi	r4,r4,4
   149f8:	29400104 	addi	r5,r5,4
   149fc:	39bff936 	bltu	r7,r6,149e4 <__alt_data_end+0xfc0149e4>
   14a00:	303fe91e 	bne	r6,zero,149a8 <__alt_data_end+0xfc0149a8>
   14a04:	003ff506 	br	149dc <__alt_data_end+0xfc0149dc>
   14a08:	10c5c83a 	sub	r2,r2,r3
   14a0c:	f800283a 	ret

00014a10 <__register_exitproc>:
   14a10:	defffa04 	addi	sp,sp,-24
   14a14:	dc000315 	stw	r16,12(sp)
   14a18:	04000074 	movhi	r16,1
   14a1c:	841bc804 	addi	r16,r16,28448
   14a20:	80c00017 	ldw	r3,0(r16)
   14a24:	dc400415 	stw	r17,16(sp)
   14a28:	dfc00515 	stw	ra,20(sp)
   14a2c:	18805217 	ldw	r2,328(r3)
   14a30:	2023883a 	mov	r17,r4
   14a34:	10003726 	beq	r2,zero,14b14 <__register_exitproc+0x104>
   14a38:	10c00117 	ldw	r3,4(r2)
   14a3c:	010007c4 	movi	r4,31
   14a40:	20c00e16 	blt	r4,r3,14a7c <__register_exitproc+0x6c>
   14a44:	1a000044 	addi	r8,r3,1
   14a48:	8800221e 	bne	r17,zero,14ad4 <__register_exitproc+0xc4>
   14a4c:	18c00084 	addi	r3,r3,2
   14a50:	18c7883a 	add	r3,r3,r3
   14a54:	18c7883a 	add	r3,r3,r3
   14a58:	12000115 	stw	r8,4(r2)
   14a5c:	10c7883a 	add	r3,r2,r3
   14a60:	19400015 	stw	r5,0(r3)
   14a64:	0005883a 	mov	r2,zero
   14a68:	dfc00517 	ldw	ra,20(sp)
   14a6c:	dc400417 	ldw	r17,16(sp)
   14a70:	dc000317 	ldw	r16,12(sp)
   14a74:	dec00604 	addi	sp,sp,24
   14a78:	f800283a 	ret
   14a7c:	00800034 	movhi	r2,0
   14a80:	10800004 	addi	r2,r2,0
   14a84:	10002626 	beq	r2,zero,14b20 <__register_exitproc+0x110>
   14a88:	01006404 	movi	r4,400
   14a8c:	d9400015 	stw	r5,0(sp)
   14a90:	d9800115 	stw	r6,4(sp)
   14a94:	d9c00215 	stw	r7,8(sp)
   14a98:	00000000 	call	0 <__alt_mem_sdram>
   14a9c:	d9400017 	ldw	r5,0(sp)
   14aa0:	d9800117 	ldw	r6,4(sp)
   14aa4:	d9c00217 	ldw	r7,8(sp)
   14aa8:	10001d26 	beq	r2,zero,14b20 <__register_exitproc+0x110>
   14aac:	81000017 	ldw	r4,0(r16)
   14ab0:	10000115 	stw	zero,4(r2)
   14ab4:	02000044 	movi	r8,1
   14ab8:	22405217 	ldw	r9,328(r4)
   14abc:	0007883a 	mov	r3,zero
   14ac0:	12400015 	stw	r9,0(r2)
   14ac4:	20805215 	stw	r2,328(r4)
   14ac8:	10006215 	stw	zero,392(r2)
   14acc:	10006315 	stw	zero,396(r2)
   14ad0:	883fde26 	beq	r17,zero,14a4c <__alt_data_end+0xfc014a4c>
   14ad4:	18c9883a 	add	r4,r3,r3
   14ad8:	2109883a 	add	r4,r4,r4
   14adc:	1109883a 	add	r4,r2,r4
   14ae0:	21802215 	stw	r6,136(r4)
   14ae4:	01800044 	movi	r6,1
   14ae8:	12406217 	ldw	r9,392(r2)
   14aec:	30cc983a 	sll	r6,r6,r3
   14af0:	4992b03a 	or	r9,r9,r6
   14af4:	12406215 	stw	r9,392(r2)
   14af8:	21c04215 	stw	r7,264(r4)
   14afc:	01000084 	movi	r4,2
   14b00:	893fd21e 	bne	r17,r4,14a4c <__alt_data_end+0xfc014a4c>
   14b04:	11006317 	ldw	r4,396(r2)
   14b08:	218cb03a 	or	r6,r4,r6
   14b0c:	11806315 	stw	r6,396(r2)
   14b10:	003fce06 	br	14a4c <__alt_data_end+0xfc014a4c>
   14b14:	18805304 	addi	r2,r3,332
   14b18:	18805215 	stw	r2,328(r3)
   14b1c:	003fc606 	br	14a38 <__alt_data_end+0xfc014a38>
   14b20:	00bfffc4 	movi	r2,-1
   14b24:	003fd006 	br	14a68 <__alt_data_end+0xfc014a68>

00014b28 <__call_exitprocs>:
   14b28:	defff504 	addi	sp,sp,-44
   14b2c:	df000915 	stw	fp,36(sp)
   14b30:	dd400615 	stw	r21,24(sp)
   14b34:	dc800315 	stw	r18,12(sp)
   14b38:	dfc00a15 	stw	ra,40(sp)
   14b3c:	ddc00815 	stw	r23,32(sp)
   14b40:	dd800715 	stw	r22,28(sp)
   14b44:	dd000515 	stw	r20,20(sp)
   14b48:	dcc00415 	stw	r19,16(sp)
   14b4c:	dc400215 	stw	r17,8(sp)
   14b50:	dc000115 	stw	r16,4(sp)
   14b54:	d9000015 	stw	r4,0(sp)
   14b58:	2839883a 	mov	fp,r5
   14b5c:	04800044 	movi	r18,1
   14b60:	057fffc4 	movi	r21,-1
   14b64:	00800074 	movhi	r2,1
   14b68:	109bc804 	addi	r2,r2,28448
   14b6c:	12000017 	ldw	r8,0(r2)
   14b70:	45005217 	ldw	r20,328(r8)
   14b74:	44c05204 	addi	r19,r8,328
   14b78:	a0001c26 	beq	r20,zero,14bec <__call_exitprocs+0xc4>
   14b7c:	a0800117 	ldw	r2,4(r20)
   14b80:	15ffffc4 	addi	r23,r2,-1
   14b84:	b8000d16 	blt	r23,zero,14bbc <__call_exitprocs+0x94>
   14b88:	14000044 	addi	r16,r2,1
   14b8c:	8421883a 	add	r16,r16,r16
   14b90:	8421883a 	add	r16,r16,r16
   14b94:	84402004 	addi	r17,r16,128
   14b98:	a463883a 	add	r17,r20,r17
   14b9c:	a421883a 	add	r16,r20,r16
   14ba0:	e0001e26 	beq	fp,zero,14c1c <__call_exitprocs+0xf4>
   14ba4:	80804017 	ldw	r2,256(r16)
   14ba8:	e0801c26 	beq	fp,r2,14c1c <__call_exitprocs+0xf4>
   14bac:	bdffffc4 	addi	r23,r23,-1
   14bb0:	843fff04 	addi	r16,r16,-4
   14bb4:	8c7fff04 	addi	r17,r17,-4
   14bb8:	bd7ff91e 	bne	r23,r21,14ba0 <__alt_data_end+0xfc014ba0>
   14bbc:	00800034 	movhi	r2,0
   14bc0:	10800004 	addi	r2,r2,0
   14bc4:	10000926 	beq	r2,zero,14bec <__call_exitprocs+0xc4>
   14bc8:	a0800117 	ldw	r2,4(r20)
   14bcc:	1000301e 	bne	r2,zero,14c90 <__call_exitprocs+0x168>
   14bd0:	a0800017 	ldw	r2,0(r20)
   14bd4:	10003226 	beq	r2,zero,14ca0 <__call_exitprocs+0x178>
   14bd8:	a009883a 	mov	r4,r20
   14bdc:	98800015 	stw	r2,0(r19)
   14be0:	00000000 	call	0 <__alt_mem_sdram>
   14be4:	9d000017 	ldw	r20,0(r19)
   14be8:	a03fe41e 	bne	r20,zero,14b7c <__alt_data_end+0xfc014b7c>
   14bec:	dfc00a17 	ldw	ra,40(sp)
   14bf0:	df000917 	ldw	fp,36(sp)
   14bf4:	ddc00817 	ldw	r23,32(sp)
   14bf8:	dd800717 	ldw	r22,28(sp)
   14bfc:	dd400617 	ldw	r21,24(sp)
   14c00:	dd000517 	ldw	r20,20(sp)
   14c04:	dcc00417 	ldw	r19,16(sp)
   14c08:	dc800317 	ldw	r18,12(sp)
   14c0c:	dc400217 	ldw	r17,8(sp)
   14c10:	dc000117 	ldw	r16,4(sp)
   14c14:	dec00b04 	addi	sp,sp,44
   14c18:	f800283a 	ret
   14c1c:	a0800117 	ldw	r2,4(r20)
   14c20:	80c00017 	ldw	r3,0(r16)
   14c24:	10bfffc4 	addi	r2,r2,-1
   14c28:	15c01426 	beq	r2,r23,14c7c <__call_exitprocs+0x154>
   14c2c:	80000015 	stw	zero,0(r16)
   14c30:	183fde26 	beq	r3,zero,14bac <__alt_data_end+0xfc014bac>
   14c34:	95c8983a 	sll	r4,r18,r23
   14c38:	a0806217 	ldw	r2,392(r20)
   14c3c:	a5800117 	ldw	r22,4(r20)
   14c40:	2084703a 	and	r2,r4,r2
   14c44:	10000b26 	beq	r2,zero,14c74 <__call_exitprocs+0x14c>
   14c48:	a0806317 	ldw	r2,396(r20)
   14c4c:	2088703a 	and	r4,r4,r2
   14c50:	20000c1e 	bne	r4,zero,14c84 <__call_exitprocs+0x15c>
   14c54:	89400017 	ldw	r5,0(r17)
   14c58:	d9000017 	ldw	r4,0(sp)
   14c5c:	183ee83a 	callr	r3
   14c60:	a0800117 	ldw	r2,4(r20)
   14c64:	15bfbf1e 	bne	r2,r22,14b64 <__alt_data_end+0xfc014b64>
   14c68:	98800017 	ldw	r2,0(r19)
   14c6c:	153fcf26 	beq	r2,r20,14bac <__alt_data_end+0xfc014bac>
   14c70:	003fbc06 	br	14b64 <__alt_data_end+0xfc014b64>
   14c74:	183ee83a 	callr	r3
   14c78:	003ff906 	br	14c60 <__alt_data_end+0xfc014c60>
   14c7c:	a5c00115 	stw	r23,4(r20)
   14c80:	003feb06 	br	14c30 <__alt_data_end+0xfc014c30>
   14c84:	89000017 	ldw	r4,0(r17)
   14c88:	183ee83a 	callr	r3
   14c8c:	003ff406 	br	14c60 <__alt_data_end+0xfc014c60>
   14c90:	a0800017 	ldw	r2,0(r20)
   14c94:	a027883a 	mov	r19,r20
   14c98:	1029883a 	mov	r20,r2
   14c9c:	003fb606 	br	14b78 <__alt_data_end+0xfc014b78>
   14ca0:	0005883a 	mov	r2,zero
   14ca4:	003ffb06 	br	14c94 <__alt_data_end+0xfc014c94>

00014ca8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14ca8:	defffd04 	addi	sp,sp,-12
   14cac:	df000215 	stw	fp,8(sp)
   14cb0:	df000204 	addi	fp,sp,8
   14cb4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14cb8:	0001883a 	nop
   14cbc:	e0bfff17 	ldw	r2,-4(fp)
   14cc0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14cc4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14cc8:	10000226 	beq	r2,zero,14cd4 <_exit+0x2c>
    ALT_SIM_FAIL();
   14ccc:	002af070 	cmpltui	zero,zero,43969
   14cd0:	00000106 	br	14cd8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14cd4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14cd8:	003fff06 	br	14cd8 <__alt_data_end+0xfc014cd8>
