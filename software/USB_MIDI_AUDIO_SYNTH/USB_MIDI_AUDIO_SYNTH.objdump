
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002ba14 memsz 0x0002ba14 flags r-x
    LOAD off    0x0002ca34 vaddr 0x0002ba34 paddr 0x0002ec28 align 2**12
         filesz 0x000031f4 memsz 0x000031f4 flags rw-
    LOAD off    0x0002fe1c vaddr 0x00031e1c paddr 0x00031e1c align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000248f4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006f10  00024b24  00024b24  00025b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031f4  0002ba34  0002ec28  0002ca34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  00031e1c  00031e1c  0002fe1c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000320d4  000320d4  0002fc28  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002fc28  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001ad8  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005398a  00000000  00000000  00031728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001100b  00000000  00000000  000850b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015adc  00000000  00000000  000960bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a48  00000000  00000000  000abb9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ffee  00000000  00000000  000b15e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025010  00000000  00000000  000c15d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e65e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002dd0  00000000  00000000  000e6658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00101faa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00101fad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00101fb2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00101fb3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00101fb4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00101fb8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00101fbc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00101fc0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00101fcb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00101fd6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00101fe1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00101ff5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  00102020  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fae3  00000000  00000000  001074a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00024b24 l    d  .rodata	00000000 .rodata
0002ba34 l    d  .rwdata	00000000 .rwdata
00031e1c l    d  .bss	00000000 .bss
000320d4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002d518 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d519 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d51a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d51b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002d51c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d51d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d51e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d51f l     O .rwdata	00000001 _ZL9SPI_MODE3
00031e1c l     O .bss	00000001 _ZL9usb_error
00031e1d l     O .bss	00000001 _ZL14usb_task_state
00031e20 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002d528 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d529 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d52a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d52b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d52c l     O .rwdata	00000006 _ZL9XBOX_LEDS
00024c2e l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002d54c l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002d550 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d551 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d552 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d553 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d554 l     O .rwdata	00000002 _ZL9pstrSpace
0002d558 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d55c l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d560 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d564 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d568 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00024d7c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00024d90 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00024d9c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00024da8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00024db4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00024dc0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00024dd0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d570 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d578 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d580 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d588 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00024ddc l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00024de8 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d58c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d590 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00024df4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00024e04 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d598 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d5a0 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00024e14 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d5a8 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00024e24 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d5b0 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00024e3c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d5b4 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00024e48 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00024e54 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d5bc l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d5c4 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00024e60 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00024e6c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d5cc l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d5d4 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00024e78 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00024e88 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d5dc l     O .rwdata	00000002 _ZL10pstrUsageX
0002d5e0 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d5e4 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d5e8 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d5ec l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d5f0 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d5f4 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d5fc l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d604 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00024e9c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00024ea8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00024eb4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00024ec0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d60c l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d614 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d618 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d61c l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d620 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d624 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d62c l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d634 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d63c l     O .rwdata	00000004 _ZL12pstrUsageVno
00024ed0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00024ee0 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00024eec l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00024ef8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00024f08 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00024f14 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00024f20 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00024f34 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00024f44 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00024f54 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00024f64 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00024f74 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00024f84 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00024f94 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00024fa4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00024fb0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00024fc0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00024fd4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00024fe8 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00024ff4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00025000 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0002500c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00025018 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00025024 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00025030 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0002503c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00025048 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00025054 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00025060 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002506c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0002507c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00025088 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00025098 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000250a8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000250b8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000250c8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000250d8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000250f0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00025108 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00025120 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00025130 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00025140 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00025150 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00025160 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00025170 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00025180 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00025190 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000251a0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000251b0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000251c0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000251d8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000251e8 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000251fc l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0002520c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00025218 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00025224 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00025230 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d640 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0002523c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0002524c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00025260 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00025274 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00025284 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00025294 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000252a0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000252b4 l     O .rodata	00000009 _ZL17pstrUsageElevator
000252c0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d648 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000252d0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000252dc l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000252e8 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000252f8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00025308 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d650 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00025314 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00025320 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002532c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d658 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d660 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d668 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d670 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00025338 l     O .rodata	00000009 _ZL17pstrUsageSteering
00025344 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00025350 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002535c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d678 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00025368 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00025378 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00025384 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00025390 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d680 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002539c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d688 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d690 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000253a8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000253b4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000253c0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000253cc l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d698 l     O .rwdata	00000005 _ZL13pstrUsageVest
000253d8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000253e4 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000253f0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00025400 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00025410 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002541c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00025428 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d6a0 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d6a4 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d6ac l     O .rwdata	00000005 _ZL13pstrUsageRate
00025434 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00025440 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00025450 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00025460 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00025470 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002547c l     O .rodata	0000000b _ZL18pstrUsageStickType
00025488 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d6b4 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d6bc l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d6c4 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d6cc l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d6d4 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d6dc l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d6e4 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d6ec l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d6f4 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d6fc l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d704 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d70c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00025494 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000254a0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000254ac l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d714 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d71c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d724 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d72c l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d734 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000254b8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000254c8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d73c l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d744 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000254d4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000254e4 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000254f4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00025504 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00025514 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00025524 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00025534 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00025544 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00025554 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d748 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00025564 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d750 l     O .rwdata	00000005 _ZL13pstrUsageBump
00025574 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00025580 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d758 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0002558c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00025598 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d760 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000255a4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000255b4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000255c0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000255cc l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000255d8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000255ec l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000255fc l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0002560c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00025618 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00025624 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0002563c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00025650 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00025668 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0002567c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00025688 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00025694 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d768 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d770 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d778 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d77c l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d784 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d788 l     O .rwdata	00000005 _ZL13pstrUsageMute
000256a0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000256ac l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000256bc l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d790 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000256cc l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000256dc l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d798 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d7a0 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000256e8 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000256fc l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d7a8 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d7ac l     O .rwdata	00000004 _ZL12pstrUsageCLV
00025708 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0002571c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d7b0 l     O .rwdata	00000005 _ZL13pstrUsageRing
00025728 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00025734 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d7b8 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d7c0 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d7c8 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d7d0 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00025740 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d7d8 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d7e0 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0002574c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00025758 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00025764 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00025770 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d7e4 l     O .rwdata	00000005 _ZL19pstrUsageConference
0002577c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d7ec l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d7f4 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d7fc l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00025788 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d804 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d80c l     O .rwdata	00000006 _ZL14pstrUsageReady
00025794 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
000257a0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d814 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d81c l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d820 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d824 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d82c l     O .rwdata	00000007 _ZL15pstrUsageRewind
000257ac l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d834 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d83c l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d844 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d848 l     O .rwdata	00000006 _ZL14pstrUsageError
000257b8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000257c8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000257dc l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d850 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000257f4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00025800 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00025810 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d858 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025820 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025830 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00025844 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00025858 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0002586c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025880 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d860 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025890 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0002589c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d868 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
000258a8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
000258b4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d870 l     O .rwdata	00000006 _ZL14pstrUsagePhone
000258c4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000258d0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d878 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d880 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000258dc l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000258e8 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d888 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d890 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d898 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d8a0 l     O .rwdata	00000007 _ZL15pstrUsageRedial
000258f4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d8a8 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d8b0 l     O .rwdata	00000005 _ZL13pstrUsagePark
00025900 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0002590c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d8b8 l     O .rwdata	00000005 _ZL13pstrUsageLine
00025918 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025924 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025930 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0002593c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00025948 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d8c0 l     O .rwdata	00000005 _ZL13pstrUsageSend
00025954 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025960 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0002596c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00025978 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025984 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025990 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d8c8 l     O .rwdata	00000004 _ZL16pstrUsageMessage
000259a0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
000259b0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
000259c4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000259d8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000259ec l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00025a00 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00025a10 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025a20 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025a34 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025a44 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025a54 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025a64 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025a70 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025a7c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025a88 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d8cc l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d8d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d8d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d8dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d8e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d8e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d8e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d8ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d8f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d8f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d8f8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d8fc l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d900 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d904 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d908 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d90c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d910 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025a9c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025aac l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025ab8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025ac4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d914 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d918 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d920 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d928 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d930 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025ad0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025adc l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d938 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025ae8 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d940 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025af4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d948 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025b00 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025b0c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025b18 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025b24 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025b30 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025b40 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025b50 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025b5c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025b68 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d950 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025b78 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025b88 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d958 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d960 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025b94 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025ba0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025bac l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025bb8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025bc8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d964 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d96c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025bd4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025be4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025bf0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025bfc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025c08 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025c14 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025c20 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025c2c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025c3c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025c48 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025c54 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025c60 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d974 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d97c l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025c70 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025c80 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025c8c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025c98 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025ca8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025cb8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d984 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d98c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025cc8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d994 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d99c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d9a4 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d9ac l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d9b4 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025cd4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025ce0 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d9bc l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d9c4 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025cec l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025cf8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00025d04 l     O .rodata	00000009 _ZL17pstrUsageTracking
00025d10 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025d1c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d9cc l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025d28 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d9d4 l     O .rwdata	00000005 _ZL13pstrUsageMark
00025d34 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025d40 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025d4c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00025d58 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00025d68 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00025d7c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00025d8c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00025d9c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00025da8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00025db4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00025dc0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00025dcc l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d9dc l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d9e0 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d9e8 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d9f0 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00025dd8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00025de4 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d9f8 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002da00 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002da04 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002da0c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002da14 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00025df0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00025dfc l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00025e08 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00025e14 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002da1c l     O .rwdata	00000005 _ZL13pstrUsageSlow
00025e20 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00025e2c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00025e38 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00025e44 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00025e54 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00025e64 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025e70 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00025e7c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00025e88 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002da24 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002da2c l     O .rwdata	00000007 _ZL15pstrUsageMotion
00025e94 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025ea0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002da34 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00025eac l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00025ebc l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00025ecc l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00025ed8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00025ee4 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00025ef0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002da3c l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002da44 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00025efc l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00025f08 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00025f14 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00025f20 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002da4c l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00025f30 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00025f3c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002da54 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002da5c l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002da64 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00025f4c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00025f58 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00025f64 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025f70 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00025f7c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00025f8c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025fa0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00025fac l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00025fc0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00025fd0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00025fdc l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00025fec l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00025ffc l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002600c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00026018 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00026028 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00026034 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00026044 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00026054 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00026064 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00026074 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00026088 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002da6c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00026098 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000260ac l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000260c0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000260d0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000260e0 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000260f0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000260fc l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00026108 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00026114 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00026120 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002612c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002613c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00026154 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00026160 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002616c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00026178 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00026184 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00026190 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002619c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000261b0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002da74 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000261bc l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002da7c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000261c8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000261d4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000261e4 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000261f0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00026200 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00026210 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00026220 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002622c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00026238 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00026244 l     O .rodata	00000009 _ZL16pstrUsageALClock
00026250 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00026260 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002626c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00026278 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00026284 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00026290 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000262a4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000262b4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000262c0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000262d4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000262e0 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000262f0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00026304 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00026318 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002632c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002633c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00026354 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00026368 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00026378 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00026388 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002da84 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002da8c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002639c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002da94 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002da9c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002daa4 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002daac l     O .rwdata	00000008 _ZL15pstrUsageACSave
000263a8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002dab4 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002dabc l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002dac4 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002dacc l     O .rwdata	00000007 _ZL14pstrUsageACCut
000263b4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
000263c0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dad4 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000263cc l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000263dc l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dadc l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002dae4 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002daec l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002daf4 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002dafc l     O .rwdata	00000008 _ZL15pstrUsageACStop
000263e8 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000263f4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00026404 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00026414 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002db04 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00026420 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002642c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00026438 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002db0c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00026444 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00026450 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00026460 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002646c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002647c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002648c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00026498 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000264a4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002db14 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000264b4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000264c0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000264d0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002db1c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002db24 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002db2c l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002db34 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000264e0 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000264ec l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002db3c l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000264f8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00026504 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00026510 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002651c l     O .rodata	0000000a _ZL17pstrUsageACResize
00026528 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00026534 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00026540 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002654c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00026558 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00026564 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00026570 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002657c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002658c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002659c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000265ac l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000265bc l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000265c8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000265d8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000265e4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000265f4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00026604 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00026614 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00026620 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002662c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00026638 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00026644 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002db44 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002db4c l     O .rwdata	00000006 _ZL13pstrUsageACNo
00026650 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002db54 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002db5c l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002665c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002db64 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00026668 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00026678 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00026684 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00026694 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
000266a4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000266b4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002db6c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002db74 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000266c0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002db7c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000266cc l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000266d8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000266e8 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000266f4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00026704 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00026710 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002671c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00026728 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00026734 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00026740 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002674c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002db84 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002db8c l     O .rwdata	00000008 _ZL15pstrUsageACSort
00026758 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00026764 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002db94 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00026774 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00026780 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002678c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002679c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
000267ac l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
000267b8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000267c4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000267d0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002db9c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000267dc l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000267e8 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000267f4 l     O .rodata	00000009 _ZL16pstrUsageACReply
00026800 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00026810 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dba4 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002681c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dbac l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dbb4 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00026828 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00026834 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026840 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002684c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00026858 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00026864 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026870 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002687c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00026888 l     O .rodata	0000000a _ZL17pstrUsageACRename
00026894 l     O .rodata	00000009 _ZL16pstrUsageACMerge
000268a0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
000268ac l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
000268b8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000268c4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dbbc l     O .rwdata	00000004 _ZL12pstrUsagePen
000268d0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000268dc l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000268e8 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000268f4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00026900 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dbc0 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00026910 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dbc8 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002691c l     O .rodata	00000009 _ZL17pstrUsageArmature
00026928 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002693c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dbd0 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dbd8 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dbe0 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002694c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00026958 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026964 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dbe8 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dbf0 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dbf8 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dbfc l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026970 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002697c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002698c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002699c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dc04 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dc0c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dc14 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dc1c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
000269ac l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dc24 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dc2c l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
000269b8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dc34 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dc3c l     O .rwdata	00000007 _ZL15pstrUsageEraser
000269c4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000269d0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000269e0 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000269ec l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000269fc l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00026a08 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00026a18 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026a24 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026a34 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026a40 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026a50 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026a60 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026a6c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026a78 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026a84 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026a90 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026a9c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026aa8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026ab4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026ac4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026ad4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dc44 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dc48 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dc4c l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dc54 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026ae0 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026aec l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026af8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026b04 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dc5c l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026b10 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026b1c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026b28 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026b34 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026b44 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026b54 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026b64 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026b70 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026b7c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026b88 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026b94 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026ba0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026bac l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026bb8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026bc4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026bd0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026be0 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026bf0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026c00 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026c0c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026c18 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026c28 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dc64 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026c34 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026c44 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026c54 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026c60 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026c6c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026c7c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026c8c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026c9c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026cac l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026cb8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026cc4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026cd0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026ce0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026cf0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00026d00 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026d10 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dc6c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dc74 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026d20 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dc7c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dc84 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dc8c l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dc94 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026d2c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dc9c l     O .rwdata	00000005 _ZL13pstrUsageCine
00026d38 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dca4 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dcac l     O .rwdata	00000006 _ZL14pstrUsageDepth
00026d44 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00026d54 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00026d64 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00026d74 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00026d80 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00026d8c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00026da0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00026db4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00026dc8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00026ddc l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00026dec l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00026dfc l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00026e08 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00026e14 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00026e24 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002dcc0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcc1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcc2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dcc3 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002dcc8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcc9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcca l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dccb l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002dccc l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dccd l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcce l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dccf l     O .rwdata	00000001 _ZL9SPI_MODE3
00027049 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00027059 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008e80 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002dcd8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dcd9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dcda l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dcdb l     O .rwdata	00000001 _ZL9SPI_MODE3
0002dcdc l     O .rwdata	00000002 _ZL9pstrSpace
0002dce0 l     O .rwdata	00000003 _ZL8pstrCRLF
0002dce4 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002dce8 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002dcec l     O .rwdata	00000004 _ZL13pstrTripleTab
0002dcf0 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00027124 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00027138 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00027144 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00027150 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0002715c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00027168 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00027178 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002dcf8 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002dd00 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002dd08 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002dd10 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00027184 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027190 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002dd14 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002dd18 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0002719c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000271ac l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002dd20 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002dd28 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000271bc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002dd30 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000271cc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002dd38 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000271e4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002dd3c l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000271f0 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000271fc l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002dd44 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002dd4c l     O .rwdata	00000006 _ZL14pstrUsageMouse
00027208 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00027214 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002dd54 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002dd5c l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00027220 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00027230 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002dd64 l     O .rwdata	00000002 _ZL10pstrUsageX
0002dd68 l     O .rwdata	00000002 _ZL10pstrUsageY
0002dd6c l     O .rwdata	00000002 _ZL10pstrUsageZ
0002dd70 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002dd74 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002dd78 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002dd7c l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002dd84 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002dd8c l     O .rwdata	00000006 _ZL14pstrUsageWheel
00027244 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00027250 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0002725c l     O .rodata	0000000b _ZL18pstrUsageByteCount
00027268 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002dd94 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002dd9c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002dda0 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002dda4 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002dda8 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002ddac l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002ddb4 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002ddbc l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002ddc4 l     O .rwdata	00000004 _ZL12pstrUsageVno
00027278 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00027288 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00027294 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000272a0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000272b0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000272bc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000272c8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000272dc l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000272ec l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000272fc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002730c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0002731c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0002732c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0002733c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0002734c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00027358 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00027368 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0002737c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00027390 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0002739c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000273a8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000273b4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000273c0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000273cc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000273d8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000273e4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000273f0 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000273fc l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00027408 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00027414 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00027424 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00027430 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00027440 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00027450 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00027460 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00027470 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00027480 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00027498 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000274b0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000274c8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000274d8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000274e8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000274f8 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00027508 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00027518 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00027528 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00027538 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00027548 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00027558 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00027568 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00027580 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00027590 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000275a4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000275b4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000275c0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000275cc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000275d8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002ddc8 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000275e4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000275f4 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00027608 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002761c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002762c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002763c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00027648 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0002765c l     O .rodata	00000009 _ZL17pstrUsageElevator
00027668 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002ddd0 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00027678 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00027684 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00027690 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000276a0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000276b0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002ddd8 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000276bc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000276c8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000276d4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002dde0 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002dde8 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002ddf0 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002ddf8 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000276e0 l     O .rodata	00000009 _ZL17pstrUsageSteering
000276ec l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000276f8 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00027704 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002de00 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00027710 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00027720 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0002772c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00027738 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002de08 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00027744 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002de10 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002de18 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00027750 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0002775c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00027768 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00027774 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002de20 l     O .rwdata	00000005 _ZL13pstrUsageVest
00027780 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0002778c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00027798 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000277a8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000277b8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000277c4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000277d0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002de28 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002de2c l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002de34 l     O .rwdata	00000005 _ZL13pstrUsageRate
000277dc l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000277e8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
000277f8 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00027808 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00027818 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00027824 l     O .rodata	0000000b _ZL18pstrUsageStickType
00027830 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002de3c l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002de44 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002de4c l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002de54 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002de5c l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002de64 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002de6c l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002de74 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002de7c l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002de84 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002de8c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002de94 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0002783c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00027848 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00027854 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002de9c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002dea4 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002deac l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002deb4 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002debc l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00027860 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00027870 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002dec4 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002decc l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0002787c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0002788c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
0002789c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000278ac l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000278bc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000278cc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000278dc l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000278ec l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
000278fc l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002ded0 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0002790c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002ded8 l     O .rwdata	00000005 _ZL13pstrUsageBump
0002791c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00027928 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002dee0 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00027934 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00027940 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002dee8 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0002794c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0002795c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00027968 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00027974 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00027980 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00027994 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000279a4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000279b4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000279c0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000279cc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000279e4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
000279f8 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00027a10 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027a24 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027a30 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027a3c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002def0 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002def8 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002df00 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002df04 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002df0c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002df10 l     O .rwdata	00000005 _ZL13pstrUsageMute
00027a48 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027a54 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027a64 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002df18 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027a74 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027a84 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002df20 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002df28 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027a90 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027aa4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002df30 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002df34 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027ab0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027ac4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002df38 l     O .rwdata	00000005 _ZL13pstrUsageRing
00027ad0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027adc l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002df40 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002df48 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002df50 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002df58 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027ae8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002df60 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002df68 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027af4 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027b00 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027b0c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027b18 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002df6c l     O .rwdata	00000005 _ZL19pstrUsageConference
00027b24 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002df74 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002df7c l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002df84 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027b30 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002df8c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002df94 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027b3c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027b48 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002df9c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002dfa4 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002dfa8 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002dfac l     O .rwdata	00000005 _ZL13pstrUsageStop
0002dfb4 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027b54 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002dfbc l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002dfc4 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002dfcc l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002dfd0 l     O .rwdata	00000006 _ZL14pstrUsageError
00027b60 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027b70 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027b84 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002dfd8 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027b9c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027ba8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027bb8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002dfe0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027bc8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027bd8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027bec l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027c00 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027c14 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027c28 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002dfe8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027c38 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027c44 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002dff0 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027c50 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027c5c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002dff8 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027c6c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027c78 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e000 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e008 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027c84 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027c90 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e010 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e018 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e020 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e028 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027c9c l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e030 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e038 l     O .rwdata	00000005 _ZL13pstrUsagePark
00027ca8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027cb4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e040 l     O .rwdata	00000005 _ZL13pstrUsageLine
00027cc0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027ccc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027cd8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027ce4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027cf0 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e048 l     O .rwdata	00000005 _ZL13pstrUsageSend
00027cfc l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027d08 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027d14 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00027d20 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027d2c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027d38 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e050 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027d48 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027d58 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027d6c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00027d80 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00027d94 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00027da8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00027db8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00027dc8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027ddc l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027dec l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027dfc l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027e0c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027e18 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027e24 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027e30 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e054 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e05c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e060 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e064 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e068 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e06c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e070 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e074 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e078 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e07c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e080 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e084 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e088 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e08c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e090 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e094 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e098 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027e44 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027e54 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027e60 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027e6c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e09c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e0a0 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e0a8 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e0b0 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e0b8 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027e78 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027e84 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e0c0 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027e90 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e0c8 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027e9c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e0d0 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027ea8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00027eb4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027ec0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027ecc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027ed8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027ee8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027ef8 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027f04 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00027f10 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e0d8 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00027f20 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00027f30 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e0e0 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e0e8 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027f3c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027f48 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027f54 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027f60 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00027f70 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e0ec l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e0f4 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00027f7c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00027f8c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00027f98 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00027fa4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00027fb0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00027fbc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00027fc8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00027fd4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00027fe4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00027ff0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027ffc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00028008 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e0fc l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e104 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00028018 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00028028 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00028034 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00028040 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00028050 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00028060 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e10c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e114 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028070 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e11c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e124 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e12c l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e134 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e13c l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002807c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00028088 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e144 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e14c l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00028094 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000280a0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000280ac l     O .rodata	00000009 _ZL17pstrUsageTracking
000280b8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000280c4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e154 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000280d0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e15c l     O .rwdata	00000005 _ZL13pstrUsageMark
000280dc l     O .rodata	00000009 _ZL18pstrUsageClearMark
000280e8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000280f4 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00028100 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00028110 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00028124 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00028134 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00028144 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00028150 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0002815c l     O .rodata	0000000b _ZL18pstrUsageStopEject
00028168 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00028174 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e164 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e168 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e170 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e178 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028180 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002818c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e180 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e188 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e18c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e194 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e19c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00028198 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000281a4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000281b0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000281bc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e1a4 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000281c8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000281d4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000281e0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000281ec l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000281fc l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002820c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00028218 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00028224 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00028230 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e1ac l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e1b4 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002823c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00028248 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e1bc l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00028254 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00028264 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00028274 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00028280 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002828c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00028298 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e1c4 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e1cc l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000282a4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000282b0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000282bc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000282c8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e1d4 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000282d8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000282e4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e1dc l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e1e4 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e1ec l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000282f4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00028300 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002830c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00028318 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00028324 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00028334 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00028348 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00028354 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00028368 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00028378 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00028384 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00028394 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000283a4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000283b4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000283c0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000283d0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000283dc l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000283ec l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000283fc l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002840c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002841c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00028430 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e1f4 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00028440 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00028454 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00028468 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00028478 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00028488 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00028498 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000284a4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000284b0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000284bc l     O .rodata	00000009 _ZL16pstrUsageALLogon
000284c8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000284d4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000284e4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000284fc l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00028508 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00028514 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00028520 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002852c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00028538 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00028544 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00028558 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e1fc l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00028564 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e204 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00028570 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002857c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002858c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00028598 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000285a8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000285b8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000285c8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000285d4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000285e0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000285ec l     O .rodata	00000009 _ZL16pstrUsageALClock
000285f8 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00028608 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00028614 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00028620 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002862c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00028638 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002864c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002865c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00028668 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002867c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00028688 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00028698 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000286ac l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000286c0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000286d4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000286e4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000286fc l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00028710 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00028720 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00028730 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e20c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e214 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00028744 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e21c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e224 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e22c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e234 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00028750 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e23c l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e244 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e24c l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e254 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002875c l     O .rodata	00000009 _ZL16pstrUsageACPaste
00028768 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e25c l     O .rwdata	00000008 _ZL15pstrUsageACFind
00028774 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00028784 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e264 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e26c l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e274 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e27c l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e284 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00028790 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002879c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000287ac l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000287bc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e28c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000287c8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000287d4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000287e0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e294 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000287ec l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
000287f8 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00028808 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00028814 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00028824 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00028834 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00028840 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002884c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002e29c l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002885c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00028868 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00028878 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002e2a4 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002e2ac l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002e2b4 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002e2bc l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00028888 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00028894 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002e2c4 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000288a0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000288ac l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000288b8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000288c4 l     O .rodata	0000000a _ZL17pstrUsageACResize
000288d0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000288dc l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000288e8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000288f4 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00028900 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002890c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00028918 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00028924 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00028934 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00028944 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00028954 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00028964 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00028970 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00028980 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002898c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002899c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000289ac l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000289bc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000289c8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000289d4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000289e0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
000289ec l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002e2cc l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002e2d4 l     O .rwdata	00000006 _ZL13pstrUsageACNo
000289f8 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002e2dc l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002e2e4 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00028a04 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002e2ec l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00028a10 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028a20 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028a2c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028a3c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028a4c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028a5c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002e2f4 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002e2fc l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028a68 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002e304 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028a74 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028a80 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028a90 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028a9c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028aac l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028ab8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028ac4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028ad0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028adc l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028ae8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028af4 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002e30c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002e314 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028b00 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028b0c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002e31c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028b1c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028b28 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028b34 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028b44 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028b54 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028b60 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028b6c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028b78 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002e324 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028b84 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028b90 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028b9c l     O .rodata	00000009 _ZL16pstrUsageACReply
00028ba8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028bb8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002e32c l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028bc4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002e334 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002e33c l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028bd0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028bdc l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028be8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028bf4 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028c00 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028c0c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028c18 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028c24 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028c30 l     O .rodata	0000000a _ZL17pstrUsageACRename
00028c3c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028c48 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028c54 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028c60 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028c6c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002e344 l     O .rwdata	00000004 _ZL12pstrUsagePen
00028c78 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028c84 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028c90 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028c9c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028ca8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002e348 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028cb8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002e350 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028cc4 l     O .rodata	00000009 _ZL17pstrUsageArmature
00028cd0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028ce4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002e358 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002e360 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002e368 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028cf4 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00028d00 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028d0c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002e370 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002e378 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002e380 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002e384 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028d18 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028d24 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028d34 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028d44 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002e38c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002e394 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002e39c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002e3a4 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028d54 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002e3ac l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002e3b4 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00028d60 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002e3bc l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002e3c4 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028d6c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00028d78 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00028d88 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00028d94 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00028da4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00028db0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00028dc0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00028dcc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028ddc l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028de8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028df8 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028e08 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028e14 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028e20 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028e2c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028e38 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028e44 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028e50 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028e5c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028e6c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028e7c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002e3cc l     O .rwdata	00000004 _ZL12pstrUsageRow
0002e3d0 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002e3d4 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002e3dc l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028e88 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00028e94 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028ea0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028eac l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002e3e4 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028eb8 l     O .rodata	00000009 _ZL17pstrUsageFontData
00028ec4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028ed0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028edc l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028eec l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028efc l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028f0c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028f18 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028f24 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00028f30 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028f3c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028f48 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028f54 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028f60 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028f6c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00028f78 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00028f88 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00028f98 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00028fa8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00028fb4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00028fc0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00028fd0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002e3ec l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00028fdc l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028fec l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028ffc l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00029008 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00029014 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00029024 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00029034 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00029044 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00029054 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00029060 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002906c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00029078 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00029088 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00029098 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000290a8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000290b8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002e3f4 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002e3fc l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000290c8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002e404 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002e40c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002e414 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002e41c l     O .rwdata	00000006 _ZL14pstrUsagePrint
000290d4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002e424 l     O .rwdata	00000005 _ZL13pstrUsageCine
000290e0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002e42c l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002e434 l     O .rwdata	00000006 _ZL14pstrUsageDepth
000290ec l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
000290fc l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002910c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002911c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00029128 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00029134 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00029148 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002915c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029170 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00029184 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00029194 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000291a4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000291b0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000291bc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000291cc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002e43a l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e43b l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e43c l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e43d l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002e440 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e441 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e442 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e443 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002e444 l     O .rwdata	00000002 _ZL9pstrSpace
0002e448 l     O .rwdata	00000003 _ZL8pstrCRLF
0002e44c l     O .rwdata	00000002 _ZL13pstrSingleTab
0002e450 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002e454 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002e458 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000292ac l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000292c0 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000292cc l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000292d8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000292e4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000292f0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00029300 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002e460 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002e468 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002e470 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002e478 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0002930c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00029318 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002e47c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002e480 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00029324 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00029334 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002e488 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002e490 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00029344 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002e498 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00029354 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002e4a0 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0002936c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002e4a4 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00029378 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00029384 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002e4ac l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002e4b4 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00029390 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0002939c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002e4bc l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002e4c4 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000293a8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000293b8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002e4cc l     O .rwdata	00000002 _ZL10pstrUsageX
0002e4d0 l     O .rwdata	00000002 _ZL10pstrUsageY
0002e4d4 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002e4d8 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002e4dc l     O .rwdata	00000003 _ZL11pstrUsageRy
0002e4e0 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002e4e4 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002e4ec l     O .rwdata	00000005 _ZL13pstrUsageDial
0002e4f4 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000293cc l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000293d8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000293e4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000293f0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002e4fc l     O .rwdata	00000006 _ZL14pstrUsageStart
0002e504 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002e508 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002e50c l     O .rwdata	00000003 _ZL11pstrUsageVy
0002e510 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002e514 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002e51c l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002e524 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002e52c l     O .rwdata	00000004 _ZL12pstrUsageVno
00029400 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00029410 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0002941c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00029428 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00029438 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00029444 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00029450 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00029464 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00029474 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00029484 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00029494 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000294a4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000294b4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000294c4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000294d4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000294e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000294f0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00029504 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00029518 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00029524 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00029530 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0002953c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00029548 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00029554 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00029560 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0002956c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00029578 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00029584 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00029590 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002959c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000295ac l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000295b8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000295c8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000295d8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000295e8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000295f8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00029608 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00029620 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00029638 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00029650 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00029660 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00029670 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00029680 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00029690 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000296a0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000296b0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000296c0 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000296d0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000296e0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000296f0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00029708 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00029718 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0002972c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0002973c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00029748 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00029754 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00029760 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002e530 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0002976c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0002977c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00029790 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000297a4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000297b4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000297c4 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000297d0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000297e4 l     O .rodata	00000009 _ZL17pstrUsageElevator
000297f0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002e538 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00029800 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002980c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00029818 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00029828 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00029838 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002e540 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00029844 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00029850 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002985c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002e548 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002e550 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002e558 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002e560 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00029868 l     O .rodata	00000009 _ZL17pstrUsageSteering
00029874 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00029880 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002988c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002e568 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00029898 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000298a8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000298b4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000298c0 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002e570 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000298cc l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002e578 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002e580 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000298d8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000298e4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000298f0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000298fc l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002e588 l     O .rwdata	00000005 _ZL13pstrUsageVest
00029908 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00029914 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00029920 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00029930 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00029940 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0002994c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00029958 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002e590 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002e594 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002e59c l     O .rwdata	00000005 _ZL13pstrUsageRate
00029964 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00029970 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00029980 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00029990 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000299a0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000299ac l     O .rodata	0000000b _ZL18pstrUsageStickType
000299b8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002e5a4 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002e5ac l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002e5b4 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002e5bc l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002e5c4 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002e5cc l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002e5d4 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002e5dc l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002e5e4 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002e5ec l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002e5f4 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002e5fc l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000299c4 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000299d0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000299dc l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002e604 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002e60c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002e614 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002e61c l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002e624 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000299e8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000299f8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002e62c l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002e634 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00029a04 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00029a14 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00029a24 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00029a34 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00029a44 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00029a54 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00029a64 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00029a74 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00029a84 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002e638 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00029a94 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002e640 l     O .rwdata	00000005 _ZL13pstrUsageBump
00029aa4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00029ab0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002e648 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00029abc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00029ac8 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002e650 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00029ad4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00029ae4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00029af0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00029afc l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00029b08 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00029b1c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00029b2c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00029b3c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00029b48 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00029b54 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00029b6c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00029b80 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00029b98 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00029bac l     O .rodata	00000009 _ZL16pstrUsageNumLock
00029bb8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00029bc4 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002e658 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e660 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e668 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e66c l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e674 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e678 l     O .rwdata	00000005 _ZL13pstrUsageMute
00029bd0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00029bdc l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00029bec l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e680 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00029bfc l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00029c0c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e688 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e690 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00029c18 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00029c2c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e698 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e69c l     O .rwdata	00000004 _ZL12pstrUsageCLV
00029c38 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00029c4c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e6a0 l     O .rwdata	00000005 _ZL13pstrUsageRing
00029c58 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00029c64 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e6a8 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e6b0 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e6b8 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e6c0 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00029c70 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e6c8 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e6d0 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00029c7c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00029c88 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00029c94 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00029ca0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e6d4 l     O .rwdata	00000005 _ZL19pstrUsageConference
00029cac l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e6dc l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e6e4 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e6ec l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00029cb8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e6f4 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002e6fc l     O .rwdata	00000006 _ZL14pstrUsageReady
00029cc4 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00029cd0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002e704 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002e70c l     O .rwdata	00000004 _ZL16pstrUsageForward
0002e710 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002e714 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002e71c l     O .rwdata	00000007 _ZL15pstrUsageRewind
00029cdc l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002e724 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002e72c l     O .rwdata	00000006 _ZL14pstrUsagePause
0002e734 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002e738 l     O .rwdata	00000006 _ZL14pstrUsageError
00029ce8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00029cf8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00029d0c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002e740 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00029d24 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00029d30 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00029d40 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002e748 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00029d50 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00029d60 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00029d74 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00029d88 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00029d9c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00029db0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002e750 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00029dc0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00029dcc l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002e758 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00029dd8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00029de4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002e760 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00029df4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00029e00 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e768 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e770 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00029e0c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00029e18 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e778 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e780 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e788 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e790 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00029e24 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e798 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e7a0 l     O .rwdata	00000005 _ZL13pstrUsagePark
00029e30 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029e3c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e7a8 l     O .rwdata	00000005 _ZL13pstrUsageLine
00029e48 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00029e54 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00029e60 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029e6c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00029e78 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e7b0 l     O .rwdata	00000005 _ZL13pstrUsageSend
00029e84 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00029e90 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00029e9c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00029ea8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00029eb4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00029ec0 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e7b8 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00029ed0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00029ee0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029ef4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00029f08 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00029f1c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00029f30 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00029f40 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00029f50 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00029f64 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00029f74 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00029f84 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00029f94 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00029fa0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00029fac l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00029fb8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e7bc l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e7c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e7c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e7cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e7d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e7d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e7d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e7dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e7e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e7e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e7e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e7ec l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e7f0 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e7f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e7f8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e7fc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e800 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00029fcc l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00029fdc l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00029fe8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029ff4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e804 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e808 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e810 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e818 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e820 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002a000 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0002a00c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e828 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0002a018 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e830 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0002a024 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e838 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002a030 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002a03c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002a048 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002a054 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002a060 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002a070 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0002a080 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002a08c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002a098 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e840 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002a0a8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002a0b8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e848 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e850 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002a0c4 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002a0d0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002a0dc l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002a0e8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002a0f8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e854 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e85c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0002a104 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0002a114 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002a120 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0002a12c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002a138 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002a144 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002a150 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002a15c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0002a16c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002a178 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002a184 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002a190 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e864 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e86c l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002a1a0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002a1b0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002a1bc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002a1c8 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002a1d8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002a1e8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e874 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e87c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002a1f8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e884 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e88c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e894 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e89c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e8a4 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002a204 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002a210 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e8ac l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e8b4 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002a21c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002a228 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0002a234 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002a240 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002a24c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e8bc l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002a258 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e8c4 l     O .rwdata	00000005 _ZL13pstrUsageMark
0002a264 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002a270 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0002a27c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002a288 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002a298 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002a2ac l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002a2bc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002a2cc l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002a2d8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0002a2e4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002a2f0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002a2fc l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e8cc l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e8d0 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e8d8 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e8e0 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002a308 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002a314 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e8e8 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e8f0 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e8f4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e8fc l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e904 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002a320 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0002a32c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002a338 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002a344 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e90c l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002a350 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002a35c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002a368 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002a374 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002a384 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002a394 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002a3a0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002a3ac l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002a3b8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e914 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e91c l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002a3c4 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002a3d0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e924 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002a3dc l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002a3ec l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002a3fc l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002a408 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002a414 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002a420 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e92c l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e934 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002a42c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002a438 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002a444 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002a450 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e93c l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002a460 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002a46c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e944 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e94c l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e954 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002a47c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002a488 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002a494 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002a4a0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002a4ac l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002a4bc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002a4d0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002a4dc l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002a4f0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002a500 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002a50c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002a51c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002a52c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002a53c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002a548 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002a558 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002a564 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002a574 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002a584 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002a594 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002a5a4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002a5b8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e95c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002a5c8 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002a5dc l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002a5f0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002a600 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002a610 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002a620 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002a62c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002a638 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002a644 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002a650 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002a65c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002a66c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002a684 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002a690 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002a69c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002a6a8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002a6b4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002a6c0 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002a6cc l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002a6e0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e964 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002a6ec l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e96c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002a6f8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002a704 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002a714 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002a720 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002a730 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002a740 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002a750 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002a75c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002a768 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002a774 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002a780 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002a790 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002a79c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002a7a8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002a7b4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002a7c0 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002a7d4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002a7e4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002a7f0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002a804 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002a810 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002a820 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002a834 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002a848 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002a85c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002a86c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002a884 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002a898 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002a8a8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002a8b8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e974 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e97c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002a8cc l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e984 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e98c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e994 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e99c l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002a8d8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e9a4 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e9ac l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e9b4 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e9bc l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002a8e4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002a8f0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e9c4 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002a8fc l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002a90c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e9cc l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e9d4 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e9dc l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e9e4 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e9ec l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002a918 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002a924 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002a934 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002a944 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e9f4 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0002a950 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002a95c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002a968 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e9fc l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002a974 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002a980 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0002a990 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002a99c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002a9ac l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002a9bc l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002a9c8 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002a9d4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002ea04 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002a9e4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002a9f0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002aa00 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002ea0c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002ea14 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002ea1c l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002ea24 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002aa10 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002aa1c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002ea2c l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0002aa28 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002aa34 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002aa40 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002aa4c l     O .rodata	0000000a _ZL17pstrUsageACResize
0002aa58 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002aa64 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0002aa70 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002aa7c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002aa88 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002aa94 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0002aaa0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002aaac l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002aabc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002aacc l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002aadc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002aaec l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002aaf8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002ab08 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002ab14 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002ab24 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002ab34 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002ab44 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002ab50 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002ab5c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002ab68 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002ab74 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002ea34 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002ea3c l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002ab80 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002ea44 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002ea4c l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002ab8c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002ea54 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002ab98 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002aba8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002abb4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002abc4 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002abd4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002abe4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002ea5c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002ea64 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002abf0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ea6c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002abfc l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002ac08 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002ac18 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0002ac24 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002ac34 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002ac40 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002ac4c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002ac58 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002ac64 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002ac70 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002ac7c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ea74 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002ea7c l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002ac88 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002ac94 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002ea84 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002aca4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0002acb0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002acbc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002accc l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002acdc l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002ace8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002acf4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0002ad00 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ea8c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002ad0c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002ad18 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0002ad24 l     O .rodata	00000009 _ZL16pstrUsageACReply
0002ad30 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0002ad40 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ea94 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002ad4c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002ea9c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002eaa4 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002ad58 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002ad64 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0002ad70 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002ad7c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002ad88 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002ad94 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0002ada0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002adac l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002adb8 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002adc4 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0002add0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002addc l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002ade8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002adf4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002eaac l     O .rwdata	00000004 _ZL12pstrUsagePen
0002ae00 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002ae0c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002ae18 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002ae24 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002ae30 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002eab0 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002ae40 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002eab8 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002ae4c l     O .rodata	00000009 _ZL17pstrUsageArmature
0002ae58 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002ae6c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002eac0 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002eac8 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002ead0 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002ae7c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002ae88 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002ae94 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ead8 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002eae0 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002eae8 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002eaec l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002aea0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002aeac l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002aebc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002aecc l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002eaf4 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002eafc l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002eb04 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002eb0c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002aedc l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002eb14 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002eb1c l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002aee8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002eb24 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002eb2c l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002aef4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002af00 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002af10 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002af1c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002af2c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002af38 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002af48 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002af54 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002af64 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002af70 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002af80 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002af90 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002af9c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002afa8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002afb4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002afc0 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002afcc l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002afd8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002afe4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002aff4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002b004 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002eb34 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002eb38 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002eb3c l     O .rwdata	00000005 _ZL13pstrUsageRows
0002eb44 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002b010 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002b01c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002b028 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002b034 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002eb4c l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002b040 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002b04c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002b058 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002b064 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002b074 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002b084 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002b094 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002b0a0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002b0ac l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002b0b8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002b0c4 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002b0d0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002b0dc l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002b0e8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002b0f4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002b100 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002b110 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002b120 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002b130 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002b13c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002b148 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002b158 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002eb54 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002b164 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002b174 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002b184 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002b190 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002b19c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002b1ac l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002b1bc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002b1cc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002b1dc l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002b1e8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002b1f4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002b200 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002b210 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002b220 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002b230 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002b240 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002eb5c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002eb64 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002b250 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002eb6c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002eb74 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002eb7c l     O .rwdata	00000005 _ZL13pstrUsageSave
0002eb84 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002b25c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002eb8c l     O .rwdata	00000005 _ZL13pstrUsageCine
0002b268 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002eb94 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002eb9c l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002b274 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002b284 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002b294 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002b2a4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002b2b0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002b2bc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002b2d0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002b2e4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002b2f8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002b30c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002b31c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002b32c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002b338 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002b344 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002b354 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002b362 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002b372 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002eba4 l     O .rwdata	00000004 _ZL5synth
0000ad80 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000ade8 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000c01c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000c0c0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000c2cc l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000c320 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000c3ac l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000c4e0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000c568 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000c794 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000d06c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000d354 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00031f9c l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000d40c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000d5bc l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00031e38 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000ee58 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00031e40 l     O .bss	00000004 fc_static
0000ef70 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000f030 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002ba34 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b812 l     O .rodata	00000010 zeroes.4389
0002b822 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b832 l     O .rodata	00000010 zeroes.4404
00014b90 l     F .text	000000bc __sbprintf
0002b842 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00014da0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000168f8 l     F .text	00000008 __fp_unlock
0001690c l     F .text	0000019c __sinit.part.1
00016aa8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002c280 l     O .rwdata	00000020 lc_ctype_charset
0002c260 l     O .rwdata	00000020 lc_message_charset
0002c2a0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002b870 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002b994 l     O .rodata	00000010 zeroes.4333
0002b9a4 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0001aaa8 l     F .text	000000fc __sprint_r.part.0
0002b9b4 l     O .rodata	00000010 zeroes.4349
0001c0e4 l     F .text	000000bc __sbprintf
0002b9c4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001feec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00020000 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00020060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00020174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0002025c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000203c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000204b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00020690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ec10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00020904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000209e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020b24 l     F .text	00000034 alt_dev_reg
0002c480 l     O .rwdata	00000038 i2c_0
0002c4b8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00020c04 l     F .text	00000110 optional_irq_callback
00020d64 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022a40 l     F .text	0000020c altera_avalon_jtag_uart_irq
00022c4c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00023480 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023d08 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023e68 l     F .text	0000003c alt_get_errno
00023ea4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00031e78 g     O .bss	00000004 alt_instruction_exception_handler
0000d514 g     F .text	00000028 __cxa_free_exception
00024c94  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ff58 g     F .text	00000018 putchar
0000bb70 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00018b44 g     F .text	00000074 _mprec_log10
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000bfbc g     F .text	00000018 _ZSt10unexpectedv
00018c30 g     F .text	0000008c __any_on
0001c7f0 g     F .text	00000054 _isatty_r
0002b87c g     O .rodata	00000028 __mprec_tinytens
000205cc g     F .text	0000007c alt_main
00006d28 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ff70 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00007184 g     F .text	0000008c _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
00031fd4 g     O .bss	00000100 alt_irq
0000d6b0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0000968c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001c844 g     F .text	00000060 _lseek_r
0000f0ec g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002ec28 g       *ABS*	00000000 __flash_rwdata_start
000066c8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001e928 g     F .text	00000088 .hidden __eqdf2
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000028cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000d140 g     F .text	00000084 __cxa_rethrow
0000f078 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000bff8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006f6c g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000f0dc g     F .text	00000010 .hidden _Unwind_GetIP
000320d4 g       *ABS*	00000000 __alt_heap_start
00008fcc  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001033c g     F .text	0000005c _kill_r
00007210 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000ff14 g     F .text	0000003c printf
00024cb8  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001c904 g     F .text	0000009c _wcrtomb_r
00010104 g     F .text	00000084 _signal_r
00006450  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000194d4 g     F .text	0000005c __sseek
00016c58 g     F .text	00000010 __sinit
0001c1a0 g     F .text	00000140 __swbuf_r
000055b4 g     F .text	000000a8 _Z8set_notehhh
00009d00 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000d590 g     F .text	0000002c __cxa_free_dependent_exception
0000aec4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
0001772c g     F .text	0000007c _setlocale_r
0002b458  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00016ab0 g     F .text	00000078 __sfmoreglue
0002145c g     F .text	000000a8 alt_avalon_i2c_rx_read
0002066c g     F .text	00000024 __malloc_unlock
0000d6b0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
0000891c g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000b8f8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000090b4  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0000d334 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000ddc4 g     F .text	00000440 .hidden __divsf3
00022674 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0000a0d4 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0002ebb4 g     O .rwdata	00000004 peak_sus
0000bbec g     F .text	00000020 __cxa_deleted_virtual
000211e0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00009178 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009b10 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00017aa8 g     F .text	0000015c memmove
00031e30 g     O .bss	00000002 sus_h
0000616c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000d688 g     F .text	00000004 _ZNSt9exceptionD2Ev
00016c40 g     F .text	00000018 _cleanup
00021ec4 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00017c04 g     F .text	000000a8 _Balloc
0000ebd4 g     F .text	00000070 .hidden __fixsfsi
00003e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001e9b0 g     F .text	000000dc .hidden __gtdf2
00003f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002b68c  w    O .rodata	00000014 _ZTVSt13bad_exception
000244f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00020940 g     F .text	00000078 times
00009034  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000f128 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002d534  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
000088a0 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001c794 g     F .text	0000005c _fstat_r
000097dc g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00031e50 g     O .bss	00000004 errno
00005eac g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00019450 g     F .text	00000008 __seofread
00009388 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
00019708 g     F .text	000013a0 ___svfiprintf_internal_r
0000f304 g     F .text	00000074 .hidden _Unwind_Backtrace
00031e64 g     O .bss	00000004 alt_argv
000034cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00035518 g       *ABS*	00000000 _gp
000209b8 g     F .text	00000030 usleep
000226b8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000e6f0 g     F .text	000004e4 .hidden __subsf3
0000822c g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002dcd0  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0002ebae g     O .rwdata	00000002 rel_l
00031e2c g     O .bss	00000002 att_h
00020154 g     F .text	00000020 getpid
0000ce3c g     F .text	00000230 __cxa_call_unexpected
0000d1c4 g     F .text	00000008 __cxa_get_exception_ptr
00021370 g     F .text	00000044 alt_avalon_i2c_is_busy
0002c300 g     O .rwdata	00000180 alt_fd_list
00009538 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00024c04  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00007210 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ff50 g     F .text	00000008 _putchar_r
0000f218 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00021114 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000f0a8 g     F .text	00000018 .hidden _Unwind_GetCFA
0000bfd4 g     F .text	00000014 _ZSt13set_terminatePFvvE
000239b8 g     F .text	00000090 alt_find_dev
00024bf8  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00012890 g     F .text	00000008 _times_r
0000fc74 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00006234  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000d53c g     F .text	00000054 __cxa_allocate_dependent_exception
00016900 g     F .text	0000000c _cleanup_r
0000bc84 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001fd68 g     F .text	000000dc .hidden __floatsidf
00024cac  w    O .rodata	0000000c _ZTV13USBReadParser
00023dec g     F .text	0000007c alt_io_redirect
0001ea8c g     F .text	000000f4 .hidden __ltdf2
00004b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00024b24 g       *ABS*	00000000 __DTOR_END__
0000bc9c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00021d04 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00010030 g     F .text	00000014 puts
0002b4e0  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000246e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000082b4 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000095c0 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00019388 g     F .text	00000074 __fpclassifyd
0000a25c g     F .text	000009b8 _Z9MIDI_pollv
00018aa0 g     F .text	000000a4 __ratio
0001c0c8 g     F .text	0000001c __vfiprintf_internal
00007d30 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00022e44 g     F .text	0000021c altera_avalon_jtag_uart_read
0000f440 g     F .text	00000014 malloc
0000fee4 g     F .text	00000030 _printf_r
0000d818 g     F .text	00000064 .hidden __udivsi3
000201b0 g     F .text	000000ac isatty
00010188 g     F .text	000000bc _raise_r
0000977c g     F .text	0000003c _ZN8MAX3421eC2Ev
0002b8cc g     O .rodata	000000c8 __mprec_tens
00006fd8 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000177a8 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
00020f80 g     F .text	00000098 alt_avalon_i2c_enable
00031e4c g     O .bss	00000004 __malloc_top_pad
00010398 g     F .text	00000004 _getpid_r
000225a8 g     F .text	00000068 alt_avalon_i2c_int_disable
00031e24 g     O .bss	00000001 usb_task_state
0002ebf0 g     O .rwdata	00000004 __mb_cur_max
000177d8 g     F .text	0000000c _localeconv_r
0000b188 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007390 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00018038 g     F .text	0000003c __i2b
000170dc g     F .text	000004c8 __sfvwrite_r
0000be1c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00010244 g     F .text	000000a8 __sigtramp_r
000085e8 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
00010044 g     F .text	00000054 _sbrk_r
0002b528  w    O .rodata	00000020 _ZTVSt9type_info
00004c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009420 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001c8a4 g     F .text	00000060 _read_r
0000d690 g     F .text	0000000c _ZNKSt9exception4whatEv
0002ec08 g     O .rwdata	00000004 alt_max_fd
00006520 g     F .text	00000050 _Z9E_Notifycci
00008728 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001c488 g     F .text	000000f0 _fclose_r
000168c8 g     F .text	00000030 fflush
0000a16c g     F .text	00000078 _Z6onInitv
00031e48 g     O .bss	00000004 __malloc_max_sbrked_mem
00009a88 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
000220d0 g     F .text	00000210 alt_avalon_i2c_master_receive
000270e0  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001d6ac g     F .text	000008ac .hidden __adddf3
0002b48c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008e80 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00018848 g     F .text	0000010c __b2d
0001d0e8 g     F .text	000005c4 .hidden __umoddi3
000204f0 g     F .text	000000dc lseek
0000625c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000bce0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006678 g     F .text	00000028 _Z8E_Notifyhi
0000bbc8 g     F .text	00000004 _ZdlPv
00022610 g     F .text	00000064 alt_avalon_i2c_int_enable
0002ebe0 g     O .rwdata	00000004 _global_impure_ptr
0000b198 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00018e24 g     F .text	00000564 _realloc_r
000320d4 g       *ABS*	00000000 __bss_end
00023c18 g     F .text	000000f0 alt_iic_isr_register
000243f0 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000f060 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001caec g     F .text	000005fc .hidden __udivdi3
000224d0 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001c6f0 g     F .text	00000024 _fputwc_r
0002b8a4 g     O .rodata	00000028 __mprec_bigtens
00017e1c g     F .text	00000104 __s2b
0000f3dc g     F .text	00000018 abort
0001fe44 g     F .text	000000a8 .hidden __floatunsidf
00026ed8  w    O .rodata	00000014 _ZTS17MouseReportParser
00018588 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
000090f0  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000036b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000d280 g     F .text	000000b4 __cxa_end_catch
000094b4 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00016c78 g     F .text	00000018 __fp_lock_all
00024cf0  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00023bcc g     F .text	0000004c alt_ic_irq_enabled
0000d68c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000030c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0000620c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00024354 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
0002706c  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
00020e00 g     F .text	00000054 alt_avalon_i2c_register_callback
00031e6c g     O .bss	00000004 alt_irq_active
00020e54 g     F .text	000000ec alt_avalon_i2c_init
0000bf94 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002c2d8 g     O .rwdata	00000028 alt_dev_null
0000b1cc g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00006484  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000d6b8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0000326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002b94 g     F .text	00000084 _ZN3USB7setConfEhhh
00031e32 g     O .bss	00000002 rel_h
00008fc4 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002b584  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000237f8 g     F .text	00000020 alt_dcache_flush_all
00017f20 g     F .text	00000068 __hi0bits
000270ec  w    O .rodata	0000000c _ZTI14MidiDescParser
00009cd8 g     F .text	00000028 _Z10Vbus_powerb
0002ebc8  w    O .rwdata	00000008 _ZTISt9exception
0001fce8 g     F .text	00000080 .hidden __fixdfsi
00026eec  w    O .rodata	00000012 _ZTS15HIDReportParser
0000ae18  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002ec28 g       *ABS*	00000000 __ram_rwdata_end
0000bb6c g     F .text	00000004 _ZNSt9type_infoD1Ev
0002ec00 g     O .rwdata	00000008 alt_dev_list
0000d6b8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00020a24 g     F .text	00000100 write
00018cbc g     F .text	000000a0 _putc_r
0000a148 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00021790 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000bb80 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000e204 g     F .text	000000bc .hidden __gtsf2
0002256c g     F .text	0000003c alt_avalon_i2c_int_clear
0000914c  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00024be4  w    O .rodata	00000014 _ZTV11AddressPool
0002ba34 g       *ABS*	00000000 __ram_rodata_end
0002009c g     F .text	000000b8 fstat
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
00020298 g     F .text	00000130 kill
000064fc  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001ea8c g     F .text	000000f4 .hidden __ledf2
00024d18  w    O .rodata	00000020 _ZTI7XBOXONE
0002ec14 g     O .rwdata	00000008 alt_avalon_i2c_list
00004aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00026e32 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00018300 g     F .text	00000140 __pow5mult
00005088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
0001abbc g     F .text	0000150c ___vfiprintf_internal_r
00031e5c g     O .bss	00000004 __nlocale_changed
0000d87c g     F .text	00000058 .hidden __umodsi3
0000bb78 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0000a1e4 g     F .text	00000078 _Z10MIDI_setupv
0000270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000bfe8 g     F .text	00000010 _ZSt13get_terminatev
000320d4 g       *ABS*	00000000 end
00024ca0  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
0000999c g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0000641c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000f2ec g     F .text	00000018 .hidden _Unwind_DeleteException
00022980 g     F .text	000000c0 altera_avalon_jtag_uart_init
000061e4  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020f40 g     F .text	00000040 alt_avalon_i2c_open
00026e48 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
00031e34 g     O .bss	00000001 ped_flip
0000bd4c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000b188 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002dcc4 g     O .rwdata	00000004 UsbDEBUGlvl
00024b1c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00021918 g     F .text	000000e8 alt_avalon_i2c_master_tx
000234f8 g     F .text	0000007c alt_avalon_timer_sc_init
0000f378 g     F .text	00000064 .hidden __clzsi2
0000bc0c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00023060 g     F .text	00000224 altera_avalon_jtag_uart_write
00016c68 g     F .text	00000004 __sfp_lock_acquire
0002b614  w    O .rodata	00000012 _ZTSSt13bad_exception
000179c4 g     F .text	000000e4 memchr
00012898 g     F .text	000022dc ___vfprintf_internal_r
0001039c g     F .text	00000058 _sprintf_r
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00016dcc g     F .text	00000310 _free_r
000240ec g     F .text	0000022c alt_printf
000177b4 g     F .text	00000010 __locale_mb_cur_max
00024964 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00031e58 g     O .bss	00000004 __mlocale_changed
0002ebaa g     O .rwdata	00000002 dec_l
00020d14 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002ebe8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00031e70 g     O .bss	00000004 _alt_tick_rate
0002b518  w    O .rodata	0000000d _ZTSSt9type_info
000222e0 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000bbcc g     F .text	00000020 __cxa_pure_virtual
00024bd0  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00024d58  w    O .rodata	00000010 _ZTS13USBReadParser
00022704 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00018440 g     F .text	00000148 __lshift
00023284 g     F .text	000001fc alt_avalon_spi_command
00031e74 g     O .bss	00000004 _alt_nticks
00010300 g     F .text	00000018 signal
000206cc g     F .text	00000104 read
000059d4 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
00020b90 g     F .text	00000074 alt_sys_init
00024c54  w    O .rodata	00000040 _ZTV7XBOXONE
0000ec44 g     F .text	00000124 .hidden __floatsisf
00019538 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
0002484c g     F .text	00000118 __register_exitproc
00002b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006570 g     F .text	00000084 _Z8E_NotifyPKci
000270a8  w    O .rodata	0000000c _ZTV14MidiDescParser
0000905c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000af08 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000063e8  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00021b3c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00018074 g     F .text	0000028c __multiply
00002a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002dcb2 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00022cec g     F .text	00000068 altera_avalon_jtag_uart_close
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000d8d4 g     F .text	00000028 .hidden __mulsi3
0002ba34 g       *ABS*	00000000 __ram_rwdata_start
0000f148 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0000565c g     F .text	00000064 _Z8set_ctrlhhm
00024b24 g       *ABS*	00000000 __ram_rodata_start
00031fac g     O .bss	00000028 __malloc_current_mallinfo
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000f25c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00018954 g     F .text	0000014c __d2b
0002b6b4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000bb6c g     F .text	00000004 _ZNSt9type_infoD2Ev
0000900c  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002d520  w    O .rwdata	00000008 _ZTI11AddressPool
0000d6bc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000b104 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000270f8  w    O .rodata	00000011 _ZTS14MidiDescParser
0002b4b8  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0002281c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024624 g     F .text	000000c4 alt_get_fd
00005bf0 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
000236a0 g     F .text	00000158 alt_busy_sleep
00006ac8 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002ebd8  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001c358 g     F .text	00000054 _close_r
000247d0 g     F .text	0000007c memcmp
000213b4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000228dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007e04 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000320d4 g       *ABS*	00000000 __alt_stack_base
0002292c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000aec4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0000806c g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00014c4c g     F .text	00000154 __swsetup_r
0000f2a0 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031e28 g     O .bss	00000004 i2c_dev
0001df58 g     F .text	000009d0 .hidden __divdf3
0000ae68  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00016b28 g     F .text	00000118 __sfp
00018bb8 g     F .text	00000078 __copybits
0000bb70 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002be58 g     O .rwdata	00000408 __malloc_av_
000048fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00016c74 g     F .text	00000004 __sinit_lock_release
0001eb80 g     F .text	0000086c .hidden __muldf3
000193fc g     F .text	00000054 __sread
00004ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002b678  w    O .rodata	00000014 _ZTVSt9exception
0000d6b4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
0002451c g     F .text	00000108 alt_find_file
00004be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00023854 g     F .text	000000a4 alt_dev_llist_insert
00020648 g     F .text	00000024 __malloc_lock
00020854 g     F .text	000000b0 sbrk
000105d4 g     F .text	000022bc ___svfprintf_internal_r
000217dc g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00021744 g     F .text	0000004c alt_avalon_i2c_check_nack
0002b5b4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000d0b0 g     F .text	00000090 __cxa_throw
0001686c g     F .text	0000005c _fflush_r
0000f10c g     F .text	00000010 .hidden _Unwind_SetIP
00006ed4 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001c3ac g     F .text	000000dc _calloc_r
00024d44  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000066a0 g     F .text	00000028 _Z8E_Notifydi
00007c28 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00031e2e g     O .bss	00000002 dec_h
00031e1c g       *ABS*	00000000 __bss_start
0002d544  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000fdbc g     F .text	00000128 memset
00008728 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000ac14 g     F .text	0000016c main
00009a10 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009c0c g     F .text	000000cc _ZN8MAX3421e5resetEv
00021710 g     F .text	00000034 alt_avalon_i2c_master_target_set
00031e68 g     O .bss	00000004 alt_envp
00024d68  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031e44 g     O .bss	00000004 __malloc_max_total_mem
0002287c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00031e25 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001c2e0 g     F .text	00000018 __swbuf
0000d670 g     F .text	0000000c __cxa_get_globals_fast
00022528 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000977c g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00019530 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001c578 g     F .text	00000014 fclose
0000ae90  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0000444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000065f4 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00014fc8 g     F .text	00001688 _dtoa_r
0000f468 g     F .text	0000080c _malloc_r
0001ca60 g     F .text	00000030 __ascii_wctomb
0000d69c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002ec0c g     O .rwdata	00000004 alt_errno
00026ecc  w    O .rodata	0000000c _ZTI17MouseReportParser
00010318 g     F .text	00000010 _init_signal
00002960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006c80 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002b5a8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000046bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
000175a4 g     F .text	000000c4 _fwalk
000097b8 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000d68c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00018d5c g     F .text	000000c8 putc
0000d720 g     F .text	00000084 .hidden __divsi3
0002710c  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00016ca8 g     F .text	00000124 _malloc_trim_r
00024b24 g       *ABS*	00000000 __CTOR_END__
0000e2c0 g     F .text	00000430 .hidden __mulsf3
00004adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00009118  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026e80  w    O .rodata	00000028 _ZTV17MouseReportParser
00010460 g     F .text	000000dc strcmp
000034cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00024b24 g       *ABS*	00000000 __flash_rodata_start
0002b6a0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000ae40  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00024b24 g       *ABS*	00000000 __DTOR_LIST__
000270b4  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001e928 g     F .text	00000088 .hidden __nedf2
00020b58 g     F .text	00000038 alt_irq_init
000207d0 g     F .text	00000084 alt_release_fd
0000aed4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00024d38  w    O .rodata	00000009 _ZTS7XBOXONE
000103f4 g     F .text	0000006c sprintf
0002b6c8 g     O .rodata	00000100 .hidden __clz_tab
00031e54 g     O .bss	00000004 _PathLocale
00024784 g     F .text	00000014 atexit
0000e204 g     F .text	000000bc .hidden __gesf2
0001c2f8 g     F .text	00000060 _write_r
00002844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000177e4 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00026e54  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009b90 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000f140 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002b4ec  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000d618 g     F .text	00000058 __cxa_call_terminate
0002ebe4 g     O .rwdata	00000004 _impure_ptr
0002ebd0  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00024c20  w    O .rodata	0000000e _ZTS11AddressPool
00031e60 g     O .bss	00000004 alt_argc
00003404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00016650 g     F .text	0000021c __sflush_r
00009118  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00023958 g     F .text	00000060 _do_dtors
00031f38 g     O .bss	00000064 Midi
000177d0 g     F .text	00000008 __locale_cjk_lang
000216d8 g     F .text	00000038 alt_avalon_i2c_master_target_get
000215e8 g     F .text	000000f0 alt_avalon_i2c_send_address
0000c00c g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000187e4 g     F .text	00000064 __ulp
0000f130 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016c90 g     F .text	00000018 __fp_unlock_all
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0000453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002ebf8 g     O .rwdata	00000008 alt_fs_list
0002b654  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00026eb4  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0002eba8 g     O .rwdata	00000002 att_l
0000f11c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000d1cc g     F .text	000000b4 __cxa_begin_catch
00004734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
000056c0 g     F .text	00000314 _Z9calc_adsrttttttttff
0000bc9c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000bfac g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
000061bc  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
000177fc g     F .text	0000000c localeconv
00009efc g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000d6ac g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000227b4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ebc4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00009218 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00023a68 g     F .text	00000050 alt_ic_isr_register
00021018 g     F .text	0000004c alt_avalon_i2c_disable
0000d4b4 g     F .text	00000060 __cxa_allocate_exception
0002b480  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002ec28 g       *ABS*	00000000 _edata
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000320d4 g       *ABS*	00000000 _end
0000b2f4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000c83c g     F .text	00000600 __gxx_personality_sj0
0001c58c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00022d54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002d53c  w    O .rwdata	00000008 _ZTI13USBReadParser
00021064 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000d688 g     F .text	00000004 _ZNSt9exceptionD1Ev
00023b40 g     F .text	0000008c alt_ic_irq_disable
00006144  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00019458 g     F .text	0000007c __swrite
0002ebec g     O .rwdata	00000004 __malloc_trim_threshold
000177c4 g     F .text	0000000c __locale_msgcharset
00024798 g     F .text	00000038 exit
0000f0c0 g     F .text	0000001c .hidden _Unwind_SetGR
00006194  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00017668 g     F .text	000000c4 _fwalk_reent
0000b068 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000ed68 g     F .text	000000f0 .hidden __floatunsisf
000185e8 g     F .text	000001fc __mdiff
0000bed4 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000d7a4 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00016c6c g     F .text	00000004 __sfp_lock_release
0002b628  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000064ac  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00021274 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009de4 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
00021504 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000270c0  w    O .rodata	00000020 _ZTI9USBH_MIDI
000043c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000d6c0 g     F .text	00000060 .hidden __fixunssfsi
0002ebac g     O .rwdata	00000002 sus_l
00007bb0 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0002002c g     F .text	00000034 _exit
00023574 g     F .text	0000012c alt_alarm_start
00026ea8  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000081c8 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000f08c g     F .text	0000001c .hidden _Unwind_GetGR
0000d67c g     F .text	0000000c __cxa_get_globals
000067d0 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00017808 g     F .text	000001bc __smakebuf_r
0002ebc0 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0001053c g     F .text	00000098 strlen
00010098 g     F .text	0000006c _init_signal_r
0002ebb8  w    O .rwdata	00000008 _ZTISt9type_info
00023f90 g     F .text	0000015c open
0001e9b0 g     F .text	000000dc .hidden __gedf2
00024318 g     F .text	0000003c alt_putchar
0002b604  w    O .rodata	0000000d _ZTSSt9exception
0000f3f4 g     F .text	0000004c clock
000064d4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0000a070 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00026e3c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009868 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002ebf4 g     O .rwdata	00000004 __wctomb
0000d6a8 g     F .text	00000004 _ZNSt9exceptionD0Ev
0001aba4 g     F .text	00000018 __sprint_r
00023a48 g     F .text	00000020 alt_icache_flush_all
0000f138 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00031e7c g     O .bss	000000bc Usb
0002ec1c g     O .rwdata	00000004 alt_priority_mask
000048fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00023ab8 g     F .text	00000088 alt_ic_irq_enable
00014b74 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001ca90 g     F .text	0000005c _wctomb_r
0001f3ec g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017f88 g     F .text	000000b0 __lo0bits
0002ec20 g     O .rwdata	00000008 alt_alarm_list
000238f8 g     F .text	00000060 _do_ctors
00024ce4  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
00010328 g     F .text	00000014 __sigtramp
000092d0 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001c9a0 g     F .text	000000c0 wcrtomb
0001ff28 g     F .text	000000d8 close
0000d8fc g     F .text	000004c8 .hidden __addsf3
0002ebb0 g     O .rwdata	00000004 peak_att
00022768 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002b634  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00020430 g     F .text	00000084 alt_load
00021a00 g     F .text	0000013c alt_avalon_i2c_master_rx
0000bb84 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001c714 g     F .text	00000080 fputwc
000102ec g     F .text	00000014 raise
0002dcb8  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000f454 g     F .text	00000014 free
00016c70 g     F .text	00000004 __sinit_lock_acquire
00017cd4 g     F .text	00000148 __multadd
0000bcac g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00017cac g     F .text	00000028 _Bfree
00006a24 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	1087f504 	addi	r2,r2,8148
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1087f504 	addi	r2,r2,8148
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25817 	ldw	r2,-13984(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25817 	ldw	r2,-13984(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6954614 	ori	gp,gp,21784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10878714 	ori	r2,r2,7708

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c83514 	ori	r3,r3,8404

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00204300 	call	20430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00205cc0 	call	205cc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	2112c904 	addi	r4,r4,19236
     28c:	00100300 	call	10030 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	2112cc04 	addi	r4,r4,19248
     2d0:	00100300 	call	10030 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	2112d104 	addi	r4,r4,19268
     304:	00100300 	call	10030 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	2112d404 	addi	r4,r4,19280
     340:	00100300 	call	10030 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	2112d804 	addi	r4,r4,19296
     374:	00100300 	call	10030 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	2112dc04 	addi	r4,r4,19312
     3b0:	00100300 	call	10030 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	2112df04 	addi	r4,r4,19324
     3ec:	00100300 	call	10030 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	2112e204 	addi	r4,r4,19336
     428:	00100300 	call	10030 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	2112e504 	addi	r4,r4,19348
     464:	00100300 	call	10030 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	2112e804 	addi	r4,r4,19360
     4a0:	00100300 	call	10030 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	2112ec04 	addi	r4,r4,19376
     4dc:	00100300 	call	10030 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	2112f004 	addi	r4,r4,19392
     510:	00100300 	call	10030 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000d8d40 	call	d8d4 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000d8180 	call	d818 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000d8180 	call	d818 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000d8180 	call	d818 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000d8d40 	call	d8d4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000d8180 	call	d818 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000d8180 	call	d818 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000d8d40 	call	d8d4 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000d8180 	call	d818 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000d8d40 	call	d8d4 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000d8d40 	call	d8d4 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000d8180 	call	d818 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000d8d40 	call	d8d4 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000f3f40 	call	f3f4 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000f3f40 	call	f3f4 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000f3f40 	call	f3f4 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000977c0 	call	977c <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002c700 	call	2c70 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b24145 	stb	r2,-14075(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b24143 	ldbu	r2,-14075(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b24145 	stb	r2,-14075(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00098680 	call	9868 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	0009a880 	call	9a88 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00098680 	call	9868 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	000a0700 	call	a070 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00097b80 	call	97b8 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b24143 	ldbu	r2,-14075(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b24143 	ldbu	r2,-14075(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b24215 	stw	r2,-14072(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b24145 	stb	r2,-14075(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b24143 	ldbu	r2,-14075(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b24217 	ldw	r2,-14072(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b24145 	stb	r2,-14075(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b24145 	stb	r2,-14075(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b24145 	stb	r2,-14075(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b24215 	stw	r2,-14072(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b24217 	ldw	r2,-14072(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b24145 	stb	r2,-14075(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b24105 	stb	r2,-14076(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b24145 	stb	r2,-14075(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002df40 	call	2df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030540 	call	3054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00019206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00013206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000821e 	bne	r2,zero,2490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue;// no driver
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10800784 	addi	r2,r2,30
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	10007226 	beq	r2,zero,2470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22a8:	e0bff003 	ldbu	r2,-64(fp)
    22ac:	e0fffc17 	ldw	r3,-16(fp)
    22b0:	10800784 	addi	r2,r2,30
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	10c00017 	ldw	r3,0(r2)
    22d0:	e0bff003 	ldbu	r2,-64(fp)
    22d4:	e13ffc17 	ldw	r4,-16(fp)
    22d8:	10800784 	addi	r2,r2,30
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	2085883a 	add	r2,r4,r2
    22e8:	10800017 	ldw	r2,0(r2)
    22ec:	1009883a 	mov	r4,r2
    22f0:	183ee83a 	callr	r3
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	10803fcc 	andi	r2,r2,255
    2300:	10005d1e 	bne	r2,zero,2478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2304:	e0bff003 	ldbu	r2,-64(fp)
    2308:	e0fffc17 	ldw	r3,-16(fp)
    230c:	10800784 	addi	r2,r2,30
    2310:	1085883a 	add	r2,r2,r2
    2314:	1085883a 	add	r2,r2,r2
    2318:	1885883a 	add	r2,r3,r2
    231c:	10800017 	ldw	r2,0(r2)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10800804 	addi	r2,r2,32
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bff003 	ldbu	r2,-64(fp)
    2330:	e13ffc17 	ldw	r4,-16(fp)
    2334:	10800784 	addi	r2,r2,30
    2338:	1085883a 	add	r2,r2,r2
    233c:	1085883a 	add	r2,r2,r2
    2340:	2085883a 	add	r2,r4,r2
    2344:	10800017 	ldw	r2,0(r2)
    2348:	e13ff643 	ldbu	r4,-39(fp)
    234c:	200b883a 	mov	r5,r4
    2350:	1009883a 	mov	r4,r2
    2354:	183ee83a 	callr	r3
    2358:	10803fcc 	andi	r2,r2,255
    235c:	10003226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2360:	e0bff003 	ldbu	r2,-64(fp)
    2364:	e0fffc17 	ldw	r3,-16(fp)
    2368:	10800784 	addi	r2,r2,30
    236c:	1085883a 	add	r2,r2,r2
    2370:	1085883a 	add	r2,r2,r2
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800017 	ldw	r2,0(r2)
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800604 	addi	r2,r2,24
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	e0bff003 	ldbu	r2,-64(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	10800784 	addi	r2,r2,30
    2394:	1085883a 	add	r2,r2,r2
    2398:	1085883a 	add	r2,r2,r2
    239c:	2085883a 	add	r2,r4,r2
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	e13ff50b 	ldhu	r4,-44(fp)
    23a8:	e17ff58b 	ldhu	r5,-42(fp)
    23ac:	280d883a 	mov	r6,r5
    23b0:	200b883a 	mov	r5,r4
    23b4:	1009883a 	mov	r4,r2
    23b8:	183ee83a 	callr	r3
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1000171e 	bne	r2,zero,2420 <_ZN3USB11ConfiguringEhhb+0x424>
    23c4:	e0bff003 	ldbu	r2,-64(fp)
    23c8:	e0fffc17 	ldw	r3,-16(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800704 	addi	r2,r2,28
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bff003 	ldbu	r2,-64(fp)
    23f0:	e13ffc17 	ldw	r4,-16(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	e13ff603 	ldbu	r4,-40(fp)
    240c:	200b883a 	mov	r5,r4
    2410:	1009883a 	mov	r4,r2
    2414:	183ee83a 	callr	r3
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10000226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2420:	00800044 	movi	r2,1
    2424:	00000106 	br	242c <_ZN3USB11ConfiguringEhhb+0x430>
    2428:	0005883a 	mov	r2,zero
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2434:	e0fff003 	ldbu	r3,-64(fp)
    2438:	e13ffd03 	ldbu	r4,-12(fp)
    243c:	e17ffe03 	ldbu	r5,-8(fp)
    2440:	e0bfff03 	ldbu	r2,-4(fp)
    2444:	d8800015 	stw	r2,0(sp)
    2448:	280f883a 	mov	r7,r5
    244c:	200d883a 	mov	r6,r4
    2450:	180b883a 	mov	r5,r3
    2454:	e13ffc17 	ldw	r4,-16(fp)
    2458:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2460:	e0bff043 	ldbu	r2,-63(fp)
    2464:	10803460 	cmpeqi	r2,r2,209
    2468:	10000826 	beq	r2,zero,248c <_ZN3USB11ConfiguringEhhb+0x490>
    246c:	00000306 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;// no driver
    2470:	0001883a 	nop
    2474:	00000106 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    247c:	e0bff003 	ldbu	r2,-64(fp)
    2480:	10800044 	addi	r2,r2,1
    2484:	e0bff005 	stb	r2,-64(fp)
    2488:	003f7c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue;// no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    2490:	e0bff003 	ldbu	r2,-64(fp)
    2494:	10800428 	cmpgeui	r2,r2,16
    2498:	1000021e 	bne	r2,zero,24a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
    249c:	e0bff043 	ldbu	r2,-63(fp)
    24a0:	00009506 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24a4:	e03ff005 	stb	zero,-64(fp)
    24a8:	e0bff003 	ldbu	r2,-64(fp)
    24ac:	10800428 	cmpgeui	r2,r2,16
    24b0:	1000871e 	bne	r2,zero,26d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
    24b4:	e0bff003 	ldbu	r2,-64(fp)
    24b8:	e0fffc17 	ldw	r3,-16(fp)
    24bc:	10800784 	addi	r2,r2,30
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	10007626 	beq	r2,zero,26ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24d4:	e0bff003 	ldbu	r2,-64(fp)
    24d8:	e0fffc17 	ldw	r3,-16(fp)
    24dc:	10800784 	addi	r2,r2,30
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	1885883a 	add	r2,r3,r2
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800017 	ldw	r2,0(r2)
    24f4:	10800404 	addi	r2,r2,16
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bff003 	ldbu	r2,-64(fp)
    2500:	e13ffc17 	ldw	r4,-16(fp)
    2504:	10800784 	addi	r2,r2,30
    2508:	1085883a 	add	r2,r2,r2
    250c:	1085883a 	add	r2,r2,r2
    2510:	2085883a 	add	r2,r4,r2
    2514:	10800017 	ldw	r2,0(r2)
    2518:	1009883a 	mov	r4,r2
    251c:	183ee83a 	callr	r3
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1004c03a 	cmpne	r2,r2,zero
    2528:	10803fcc 	andi	r2,r2,255
    252c:	1000611e 	bne	r2,zero,26b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2530:	e0bff003 	ldbu	r2,-64(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	10800784 	addi	r2,r2,30
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10800017 	ldw	r2,0(r2)
    2550:	10800804 	addi	r2,r2,32
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	10800784 	addi	r2,r2,30
    2564:	1085883a 	add	r2,r2,r2
    2568:	1085883a 	add	r2,r2,r2
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e13ff643 	ldbu	r4,-39(fp)
    2578:	200b883a 	mov	r5,r4
    257c:	1009883a 	mov	r4,r2
    2580:	183ee83a 	callr	r3
    2584:	10803fcc 	andi	r2,r2,255
    2588:	10003226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    258c:	e0bff003 	ldbu	r2,-64(fp)
    2590:	e0fffc17 	ldw	r3,-16(fp)
    2594:	10800784 	addi	r2,r2,30
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	1885883a 	add	r2,r3,r2
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	10800604 	addi	r2,r2,24
    25b0:	10c00017 	ldw	r3,0(r2)
    25b4:	e0bff003 	ldbu	r2,-64(fp)
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	10800784 	addi	r2,r2,30
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	2085883a 	add	r2,r4,r2
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	e13ff50b 	ldhu	r4,-44(fp)
    25d4:	e17ff58b 	ldhu	r5,-42(fp)
    25d8:	280d883a 	mov	r6,r5
    25dc:	200b883a 	mov	r5,r4
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1000171e 	bne	r2,zero,264c <_ZN3USB11ConfiguringEhhb+0x650>
    25f0:	e0bff003 	ldbu	r2,-64(fp)
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	10800784 	addi	r2,r2,30
    25fc:	1085883a 	add	r2,r2,r2
    2600:	1085883a 	add	r2,r2,r2
    2604:	1885883a 	add	r2,r3,r2
    2608:	10800017 	ldw	r2,0(r2)
    260c:	10800017 	ldw	r2,0(r2)
    2610:	10800704 	addi	r2,r2,28
    2614:	10c00017 	ldw	r3,0(r2)
    2618:	e0bff003 	ldbu	r2,-64(fp)
    261c:	e13ffc17 	ldw	r4,-16(fp)
    2620:	10800784 	addi	r2,r2,30
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	2085883a 	add	r2,r4,r2
    2630:	10800017 	ldw	r2,0(r2)
    2634:	e13ff603 	ldbu	r4,-40(fp)
    2638:	200b883a 	mov	r5,r4
    263c:	1009883a 	mov	r4,r2
    2640:	183ee83a 	callr	r3
    2644:	10803fcc 	andi	r2,r2,255
    2648:	10000226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    264c:	00800044 	movi	r2,1
    2650:	00000106 	br	2658 <_ZN3USB11ConfiguringEhhb+0x65c>
    2654:	0005883a 	mov	r2,zero
    2658:	10803fcc 	andi	r2,r2,255
    265c:	1000171e 	bne	r2,zero,26bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2660:	e0fff003 	ldbu	r3,-64(fp)
    2664:	e13ffd03 	ldbu	r4,-12(fp)
    2668:	e17ffe03 	ldbu	r5,-8(fp)
    266c:	e0bfff03 	ldbu	r2,-4(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	280f883a 	mov	r7,r5
    2678:	200d883a 	mov	r6,r4
    267c:	180b883a 	mov	r5,r3
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    2688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    268c:	e0bff043 	ldbu	r2,-63(fp)
    2690:	10803460 	cmpeqi	r2,r2,209
    2694:	10000a1e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
    2698:	e0bff043 	ldbu	r2,-63(fp)
    269c:	10803660 	cmpeqi	r2,r2,217
    26a0:	1000071e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    26a4:	e0bff043 	ldbu	r2,-63(fp)
    26a8:	00001306 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    26ac:	0001883a 	nop
    26b0:	00000306 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    26b4:	0001883a 	nop
    26b8:	00000106 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    26bc:	0001883a 	nop
        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    26c0:	e0bff003 	ldbu	r2,-64(fp)
    26c4:	10800044 	addi	r2,r2,1
    26c8:	e0bff005 	stb	r2,-64(fp)
    26cc:	003f7606 	br	24a8 <__alt_data_end+0xfc0024a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    26d0:	e0bffd03 	ldbu	r2,-12(fp)
    26d4:	e0fffe03 	ldbu	r3,-8(fp)
    26d8:	e13fff03 	ldbu	r4,-4(fp)
    26dc:	200f883a 	mov	r7,r4
    26e0:	180d883a 	mov	r6,r3
    26e4:	100b883a 	mov	r5,r2
    26e8:	e13ffc17 	ldw	r4,-16(fp)
    26ec:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    26f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    26f4:	e0bff043 	ldbu	r2,-63(fp)
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    270c:	defffb04 	addi	sp,sp,-20
    2710:	dfc00415 	stw	ra,16(sp)
    2714:	df000315 	stw	fp,12(sp)
    2718:	df000304 	addi	fp,sp,12
    271c:	e13ffe15 	stw	r4,-8(fp)
    2720:	2805883a 	mov	r2,r5
    2724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2728:	e0bfff03 	ldbu	r2,-4(fp)
    272c:	1000021e 	bne	r2,zero,2738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2730:	0005883a 	mov	r2,zero
    2734:	00003e06 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2738:	e03ffd05 	stb	zero,-12(fp)
    273c:	e0bffd03 	ldbu	r2,-12(fp)
    2740:	10800428 	cmpgeui	r2,r2,16
    2744:	1000391e 	bne	r2,zero,282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2748:	e0bffd03 	ldbu	r2,-12(fp)
    274c:	e0fffe17 	ldw	r3,-8(fp)
    2750:	10800784 	addi	r2,r2,30
    2754:	1085883a 	add	r2,r2,r2
    2758:	1085883a 	add	r2,r2,r2
    275c:	1885883a 	add	r2,r3,r2
    2760:	10800017 	ldw	r2,0(r2)
    2764:	10002c26 	beq	r2,zero,2818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2768:	e0bffd03 	ldbu	r2,-12(fp)
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	10800784 	addi	r2,r2,30
    2774:	1085883a 	add	r2,r2,r2
    2778:	1085883a 	add	r2,r2,r2
    277c:	1885883a 	add	r2,r3,r2
    2780:	10800017 	ldw	r2,0(r2)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	10800404 	addi	r2,r2,16
    278c:	10c00017 	ldw	r3,0(r2)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	e13ffe17 	ldw	r4,-8(fp)
    2798:	10800784 	addi	r2,r2,30
    279c:	1085883a 	add	r2,r2,r2
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	2085883a 	add	r2,r4,r2
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	1009883a 	mov	r4,r2
    27b0:	183ee83a 	callr	r3
    27b4:	10c03fcc 	andi	r3,r2,255
    27b8:	e0bfff03 	ldbu	r2,-4(fp)
    27bc:	1885003a 	cmpeq	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	10001526 	beq	r2,zero,281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    27c8:	e0bffd03 	ldbu	r2,-12(fp)
    27cc:	e0fffe17 	ldw	r3,-8(fp)
    27d0:	10800784 	addi	r2,r2,30
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	10800017 	ldw	r2,0(r2)
    27e4:	10800017 	ldw	r2,0(r2)
    27e8:	10800204 	addi	r2,r2,8
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffd03 	ldbu	r2,-12(fp)
    27f4:	e13ffe17 	ldw	r4,-8(fp)
    27f8:	10800784 	addi	r2,r2,30
    27fc:	1085883a 	add	r2,r2,r2
    2800:	1085883a 	add	r2,r2,r2
    2804:	2085883a 	add	r2,r4,r2
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1009883a 	mov	r4,r2
    2810:	183ee83a 	callr	r3
    2814:	00000606 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	10800044 	addi	r2,r2,1
    2824:	e0bffd05 	stb	r2,-12(fp)
    2828:	003fc406 	br	273c <__alt_data_end+0xfc00273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    282c:	0005883a 	mov	r2,zero
        printf("END\n");
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00117 	ldw	ra,4(sp)
    2838:	df000017 	ldw	fp,0(sp)
    283c:	dec00204 	addi	sp,sp,8
    2840:	f800283a 	ret

00002844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2844:	defff204 	addi	sp,sp,-56
    2848:	dfc00d15 	stw	ra,52(sp)
    284c:	df000c15 	stw	fp,48(sp)
    2850:	df000c04 	addi	fp,sp,48
    2854:	e13ffc15 	stw	r4,-16(fp)
    2858:	2809883a 	mov	r4,r5
    285c:	3007883a 	mov	r3,r6
    2860:	3805883a 	mov	r2,r7
    2864:	e13ffd05 	stb	r4,-12(fp)
    2868:	e0fffe05 	stb	r3,-8(fp)
    286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2870:	e17ffd03 	ldbu	r5,-12(fp)
    2874:	e1bffe03 	ldbu	r6,-8(fp)
    2878:	e0bfff0b 	ldhu	r2,-4(fp)
    287c:	e0ffff0b 	ldhu	r3,-4(fp)
    2880:	d8000715 	stw	zero,28(sp)
    2884:	e1000217 	ldw	r4,8(fp)
    2888:	d9000615 	stw	r4,24(sp)
    288c:	d8c00515 	stw	r3,20(sp)
    2890:	d8800415 	stw	r2,16(sp)
    2894:	d8000315 	stw	zero,12(sp)
    2898:	00800044 	movi	r2,1
    289c:	d8800215 	stw	r2,8(sp)
    28a0:	d8000115 	stw	zero,4(sp)
    28a4:	00800184 	movi	r2,6
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	01c02004 	movi	r7,128
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    28cc:	defff104 	addi	sp,sp,-60
    28d0:	dfc00e15 	stw	ra,56(sp)
    28d4:	df000d15 	stw	fp,52(sp)
    28d8:	df000d04 	addi	fp,sp,52
    28dc:	e13ffb15 	stw	r4,-20(fp)
    28e0:	3009883a 	mov	r4,r6
    28e4:	3807883a 	mov	r3,r7
    28e8:	e0800217 	ldw	r2,8(fp)
    28ec:	e17ffc05 	stb	r5,-16(fp)
    28f0:	e13ffd05 	stb	r4,-12(fp)
    28f4:	e0fffe0d 	sth	r3,-8(fp)
    28f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    28fc:	e23ffc03 	ldbu	r8,-16(fp)
    2900:	e1bffd03 	ldbu	r6,-12(fp)
    2904:	e0bfff03 	ldbu	r2,-4(fp)
    2908:	e0fffe0b 	ldhu	r3,-8(fp)
    290c:	e13ffe0b 	ldhu	r4,-8(fp)
    2910:	d8000715 	stw	zero,28(sp)
    2914:	e1400317 	ldw	r5,12(fp)
    2918:	d9400615 	stw	r5,24(sp)
    291c:	d9000515 	stw	r4,20(sp)
    2920:	d8c00415 	stw	r3,16(sp)
    2924:	d8000315 	stw	zero,12(sp)
    2928:	00c00084 	movi	r3,2
    292c:	d8c00215 	stw	r3,8(sp)
    2930:	d8800115 	stw	r2,4(sp)
    2934:	00800184 	movi	r2,6
    2938:	d8800015 	stw	r2,0(sp)
    293c:	01c02004 	movi	r7,128
    2940:	400b883a 	mov	r5,r8
    2944:	e13ffb17 	ldw	r4,-20(fp)
    2948:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2960:	deffdf04 	addi	sp,sp,-132
    2964:	dfc02015 	stw	ra,128(sp)
    2968:	df001f15 	stw	fp,124(sp)
    296c:	df001f04 	addi	fp,sp,124
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2809883a 	mov	r4,r5
    2978:	3007883a 	mov	r3,r6
    297c:	3805883a 	mov	r2,r7
    2980:	e13ffd05 	stb	r4,-12(fp)
    2984:	e0fffe05 	stb	r3,-8(fp)
    2988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    298c:	00801004 	movi	r2,64
    2990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2994:	e0bfec04 	addi	r2,fp,-80
    2998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    299c:	e13ffd03 	ldbu	r4,-12(fp)
    29a0:	e17ffe03 	ldbu	r5,-8(fp)
    29a4:	e0bfff03 	ldbu	r2,-4(fp)
    29a8:	e0ffec04 	addi	r3,fp,-80
    29ac:	d8c00115 	stw	r3,4(sp)
    29b0:	d8800015 	stw	r2,0(sp)
    29b4:	01c00244 	movi	r7,9
    29b8:	280d883a 	mov	r6,r5
    29bc:	200b883a 	mov	r5,r4
    29c0:	e13ffc17 	ldw	r4,-16(fp)
    29c4:	00028cc0 	call	28cc <_ZN3USB12getConfDescrEhhthPh>
    29c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    29cc:	e0bfeb03 	ldbu	r2,-84(fp)
    29d0:	10000226 	beq	r2,zero,29dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    29d4:	e0bfeb03 	ldbu	r2,-84(fp)
    29d8:	00001a06 	br	2a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    29dc:	e0bfea17 	ldw	r2,-88(fp)
    29e0:	10c00083 	ldbu	r3,2(r2)
    29e4:	108000c3 	ldbu	r2,3(r2)
    29e8:	1004923a 	slli	r2,r2,8
    29ec:	10c4b03a 	or	r2,r2,r3
    29f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    29f4:	e17ffd03 	ldbu	r5,-12(fp)
    29f8:	e1bffe03 	ldbu	r6,-8(fp)
    29fc:	e0bfff03 	ldbu	r2,-4(fp)
    2a00:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a04:	e1000217 	ldw	r4,8(fp)
    2a08:	d9000715 	stw	r4,28(sp)
    2a0c:	e13fec04 	addi	r4,fp,-80
    2a10:	d9000615 	stw	r4,24(sp)
    2a14:	01001004 	movi	r4,64
    2a18:	d9000515 	stw	r4,20(sp)
    2a1c:	d8c00415 	stw	r3,16(sp)
    2a20:	d8000315 	stw	zero,12(sp)
    2a24:	00c00084 	movi	r3,2
    2a28:	d8c00215 	stw	r3,8(sp)
    2a2c:	d8800115 	stw	r2,4(sp)
    2a30:	00800184 	movi	r2,6
    2a34:	d8800015 	stw	r2,0(sp)
    2a38:	01c02004 	movi	r7,128
    2a3c:	e13ffc17 	ldw	r4,-16(fp)
    2a40:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a44:	e037883a 	mov	sp,fp
    2a48:	dfc00117 	ldw	ra,4(sp)
    2a4c:	df000017 	ldw	fp,0(sp)
    2a50:	dec00204 	addi	sp,sp,8
    2a54:	f800283a 	ret

00002a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2a58:	defff004 	addi	sp,sp,-64
    2a5c:	dfc00f15 	stw	ra,60(sp)
    2a60:	df000e15 	stw	fp,56(sp)
    2a64:	df000e04 	addi	fp,sp,56
    2a68:	e13ffa15 	stw	r4,-24(fp)
    2a6c:	2811883a 	mov	r8,r5
    2a70:	300b883a 	mov	r5,r6
    2a74:	3809883a 	mov	r4,r7
    2a78:	e0c00217 	ldw	r3,8(fp)
    2a7c:	e0800317 	ldw	r2,12(fp)
    2a80:	e23ffb05 	stb	r8,-20(fp)
    2a84:	e17ffc05 	stb	r5,-16(fp)
    2a88:	e13ffd0d 	sth	r4,-12(fp)
    2a8c:	e0fffe05 	stb	r3,-8(fp)
    2a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2a94:	e23ffb03 	ldbu	r8,-20(fp)
    2a98:	e27ffc03 	ldbu	r9,-16(fp)
    2a9c:	e0bffe03 	ldbu	r2,-8(fp)
    2aa0:	e0ffff0b 	ldhu	r3,-4(fp)
    2aa4:	e13ffd0b 	ldhu	r4,-12(fp)
    2aa8:	e17ffd0b 	ldhu	r5,-12(fp)
    2aac:	d8000715 	stw	zero,28(sp)
    2ab0:	e1800417 	ldw	r6,16(fp)
    2ab4:	d9800615 	stw	r6,24(sp)
    2ab8:	d9400515 	stw	r5,20(sp)
    2abc:	d9000415 	stw	r4,16(sp)
    2ac0:	d8c00315 	stw	r3,12(sp)
    2ac4:	00c000c4 	movi	r3,3
    2ac8:	d8c00215 	stw	r3,8(sp)
    2acc:	d8800115 	stw	r2,4(sp)
    2ad0:	00800184 	movi	r2,6
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	01c02004 	movi	r7,128
    2adc:	480d883a 	mov	r6,r9
    2ae0:	400b883a 	mov	r5,r8
    2ae4:	e13ffa17 	ldw	r4,-24(fp)
    2ae8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	dfc00117 	ldw	ra,4(sp)
    2af4:	df000017 	ldw	fp,0(sp)
    2af8:	dec00204 	addi	sp,sp,8
    2afc:	f800283a 	ret

00002b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b00:	defff104 	addi	sp,sp,-60
    2b04:	dfc00e15 	stw	ra,56(sp)
    2b08:	df000d15 	stw	fp,52(sp)
    2b0c:	df000d04 	addi	fp,sp,52
    2b10:	e13ffc15 	stw	r4,-16(fp)
    2b14:	2809883a 	mov	r4,r5
    2b18:	3007883a 	mov	r3,r6
    2b1c:	3805883a 	mov	r2,r7
    2b20:	e13ffd05 	stb	r4,-12(fp)
    2b24:	e0fffe05 	stb	r3,-8(fp)
    2b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b2c:	e0fffd03 	ldbu	r3,-12(fp)
    2b30:	e13ffe03 	ldbu	r4,-8(fp)
    2b34:	e0bfff03 	ldbu	r2,-4(fp)
    2b38:	d8000715 	stw	zero,28(sp)
    2b3c:	d8000615 	stw	zero,24(sp)
    2b40:	d8000515 	stw	zero,20(sp)
    2b44:	d8000415 	stw	zero,16(sp)
    2b48:	d8000315 	stw	zero,12(sp)
    2b4c:	d8000215 	stw	zero,8(sp)
    2b50:	d8800115 	stw	r2,4(sp)
    2b54:	00800144 	movi	r2,5
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	000f883a 	mov	r7,zero
    2b60:	200d883a 	mov	r6,r4
    2b64:	180b883a 	mov	r5,r3
    2b68:	e13ffc17 	ldw	r4,-16(fp)
    2b6c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2b74:	01004b04 	movi	r4,300
    2b78:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2b80:	e037883a 	mov	sp,fp
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	df000017 	ldw	fp,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2b94:	defff204 	addi	sp,sp,-56
    2b98:	dfc00d15 	stw	ra,52(sp)
    2b9c:	df000c15 	stw	fp,48(sp)
    2ba0:	df000c04 	addi	fp,sp,48
    2ba4:	e13ffc15 	stw	r4,-16(fp)
    2ba8:	2809883a 	mov	r4,r5
    2bac:	3007883a 	mov	r3,r6
    2bb0:	3805883a 	mov	r2,r7
    2bb4:	e13ffd05 	stb	r4,-12(fp)
    2bb8:	e0fffe05 	stb	r3,-8(fp)
    2bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2bc0:	e0fffd03 	ldbu	r3,-12(fp)
    2bc4:	e13ffe03 	ldbu	r4,-8(fp)
    2bc8:	e0bfff03 	ldbu	r2,-4(fp)
    2bcc:	d8000715 	stw	zero,28(sp)
    2bd0:	d8000615 	stw	zero,24(sp)
    2bd4:	d8000515 	stw	zero,20(sp)
    2bd8:	d8000415 	stw	zero,16(sp)
    2bdc:	d8000315 	stw	zero,12(sp)
    2be0:	d8000215 	stw	zero,8(sp)
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	00800244 	movi	r2,9
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	200d883a 	mov	r6,r4
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffc17 	ldw	r4,-16(fp)
    2c00:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c18:	defffe04 	addi	sp,sp,-8
    2c1c:	df000115 	stw	fp,4(sp)
    2c20:	df000104 	addi	fp,sp,4
    2c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c28:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c2c:	e037883a 	mov	sp,fp
    2c30:	df000017 	ldw	fp,0(sp)
    2c34:	dec00104 	addi	sp,sp,4
    2c38:	f800283a 	ret

00002c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c3c:	defffe04 	addi	sp,sp,-8
    2c40:	df000115 	stw	fp,4(sp)
    2c44:	df000104 	addi	fp,sp,4
    2c48:	e13fff15 	stw	r4,-4(fp)
    2c4c:	008000b4 	movhi	r2,2
    2c50:	1092fb04 	addi	r2,r2,19436
    2c54:	e0ffff17 	ldw	r3,-4(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	df000115 	stw	fp,4(sp)
    2c7c:	df000104 	addi	fp,sp,4
    2c80:	e13fff15 	stw	r4,-4(fp)
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	0002c3c0 	call	2c3c <_ZN11AddressPoolC1Ev>
    2c90:	008000b4 	movhi	r2,2
    2c94:	1092f604 	addi	r2,r2,19416
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	18800015 	stw	r2,0(r3)
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2ca8:	000b883a 	mov	r5,zero
    2cac:	e13fff17 	ldw	r4,-4(fp)
    2cb0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
    2cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10c00104 	addi	r3,r2,4
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
    2cd8:	00c00204 	movi	r3,8
    2cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	11000183 	ldbu	r4,6(r2)
    2ce8:	00ffff84 	movi	r3,-2
    2cec:	20c6703a 	and	r3,r4,r3
    2cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	11000183 	ldbu	r4,6(r2)
    2cfc:	00ffff44 	movi	r3,-3
    2d00:	20c6703a 	and	r3,r4,r3
    2d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00183 	ldbu	r3,6(r2)
    2d10:	18c000cc 	andi	r3,r3,3
    2d14:	18c00f14 	ori	r3,r3,60
    2d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d1c:	e13fff17 	ldw	r4,-4(fp)
    2d20:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d24:	0001883a 	nop
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	dc000315 	stw	r16,12(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	e13ffd15 	stw	r4,-12(fp)
    2d54:	2805883a 	mov	r2,r5
    2d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2d5c:	e0bffe03 	ldbu	r2,-8(fp)
    2d60:	1000031e 	bne	r2,zero,2d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800204 	addi	r2,r2,8
    2d6c:	00001006 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2d70:	e0bffe03 	ldbu	r2,-8(fp)
    2d74:	100b883a 	mov	r5,r2
    2d78:	e13ffd17 	ldw	r4,-12(fp)
    2d7c:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2d84:	e0bffc03 	ldbu	r2,-16(fp)
    2d88:	10000826 	beq	r2,zero,2dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	14000204 	addi	r16,r2,8
    2d94:	e0bffc03 	ldbu	r2,-16(fp)
    2d98:	014001c4 	movi	r5,7
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000d8d40 	call	d8d4 <__mulsi3>
    2da4:	8085883a 	add	r2,r16,r2
    2da8:	00000106 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2dac:	0005883a 	mov	r2,zero
        };
    2db0:	e6ffff04 	addi	sp,fp,-4
    2db4:	dfc00217 	ldw	ra,8(sp)
    2db8:	df000117 	ldw	fp,4(sp)
    2dbc:	dc000017 	ldw	r16,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	df000215 	stw	fp,8(sp)
    2dd0:	df000204 	addi	fp,sp,8
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	e17fff15 	stw	r5,-4(fp)
    2ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2df4:	defff804 	addi	sp,sp,-32
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	df000615 	stw	fp,24(sp)
    2e00:	dc000515 	stw	r16,20(sp)
    2e04:	df000604 	addi	fp,sp,24
    2e08:	e13ffb15 	stw	r4,-20(fp)
    2e0c:	2809883a 	mov	r4,r5
    2e10:	3007883a 	mov	r3,r6
    2e14:	3805883a 	mov	r2,r7
    2e18:	e13ffc05 	stb	r4,-16(fp)
    2e1c:	e0fffd05 	stb	r3,-12(fp)
    2e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e24:	e0bffc03 	ldbu	r2,-16(fp)
    2e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e2c:	e0fffa43 	ldbu	r3,-23(fp)
    2e30:	00bfe004 	movi	r2,-128
    2e34:	1884703a 	and	r2,r3,r2
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e40:	e0bffe03 	ldbu	r2,-8(fp)
    2e44:	10800230 	cmpltui	r2,r2,8
    2e48:	1000021e 	bne	r2,zero,2e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2e4c:	0005883a 	mov	r2,zero
    2e50:	00007a06 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2e54:	e0bffd03 	ldbu	r2,-12(fp)
    2e58:	10000726 	beq	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	108001c3 	ldbu	r2,7(r2)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	108001d8 	cmpnei	r2,r2,7
    2e6c:	1000021e 	bne	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2e70:	0005883a 	mov	r2,zero
    2e74:	00007106 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2e78:	000b883a 	mov	r5,zero
    2e7c:	e13ffb17 	ldw	r4,-20(fp)
    2e80:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2e88:	e0bffa03 	ldbu	r2,-24(fp)
    2e8c:	1000021e 	bne	r2,zero,2e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2e90:	0005883a 	mov	r2,zero
    2e94:	00006906 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2e98:	e0bffa43 	ldbu	r2,-23(fp)
    2e9c:	10803fcc 	andi	r2,r2,255
    2ea0:	1000241e 	bne	r2,zero,2f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ea4:	e0bffd03 	ldbu	r2,-12(fp)
    2ea8:	10001026 	beq	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2eac:	e0bffa03 	ldbu	r2,-24(fp)
    2eb0:	e43ffb17 	ldw	r16,-20(fp)
    2eb4:	014001c4 	movi	r5,7
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	000d8d40 	call	d8d4 <__mulsi3>
    2ec0:	8085883a 	add	r2,r16,r2
    2ec4:	10800304 	addi	r2,r2,12
    2ec8:	00c01044 	movi	r3,65
    2ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	108001c3 	ldbu	r2,7(r2)
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10c001c5 	stb	r3,7(r2)
    2ee8:	00000906 	br	2f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2eec:	e0bffa03 	ldbu	r2,-24(fp)
    2ef0:	e43ffb17 	ldw	r16,-20(fp)
    2ef4:	014001c4 	movi	r5,7
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000d8d40 	call	d8d4 <__mulsi3>
    2f00:	8085883a 	add	r2,r16,r2
    2f04:	10800304 	addi	r2,r2,12
    2f08:	00c00044 	movi	r3,1
    2f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f10:	e0bffa03 	ldbu	r2,-24(fp)
    2f14:	e43ffb17 	ldw	r16,-20(fp)
    2f18:	014001c4 	movi	r5,7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	000d8d40 	call	d8d4 <__mulsi3>
    2f24:	8085883a 	add	r2,r16,r2
    2f28:	10800304 	addi	r2,r2,12
    2f2c:	10800003 	ldbu	r2,0(r2)
    2f30:	00004206 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f38:	e0bffa43 	ldbu	r2,-23(fp)
    2f3c:	108001cc 	andi	r2,r2,7
    2f40:	108001cc 	andi	r2,r2,7
    2f44:	100890fa 	slli	r4,r2,3
    2f48:	e0fffa83 	ldbu	r3,-22(fp)
    2f4c:	00bff1c4 	movi	r2,-57
    2f50:	1884703a 	and	r2,r3,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	2005883a 	mov	r2,r4
    2f5c:	1884b03a 	or	r2,r3,r2
    2f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2f64:	e0bffd03 	ldbu	r2,-12(fp)
    2f68:	10001526 	beq	r2,zero,2fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2f6c:	e0bffa83 	ldbu	r2,-22(fp)
    2f70:	10801014 	ori	r2,r2,64
    2f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	108001c3 	ldbu	r2,7(r2)
    2f80:	10800044 	addi	r2,r2,1
    2f84:	1007883a 	mov	r3,r2
    2f88:	e0bffb17 	ldw	r2,-20(fp)
    2f8c:	10c001c5 	stb	r3,7(r2)
    2f90:	e0bffb17 	ldw	r2,-20(fp)
    2f94:	108001c3 	ldbu	r2,7(r2)
    2f98:	108001cc 	andi	r2,r2,7
    2f9c:	110001cc 	andi	r4,r2,7
    2fa0:	e0fffa83 	ldbu	r3,-22(fp)
    2fa4:	00bffe04 	movi	r2,-8
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1007883a 	mov	r3,r2
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	1884b03a 	or	r2,r3,r2
    2fb8:	e0bffa85 	stb	r2,-22(fp)
    2fbc:	00000e06 	br	2ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2fc0:	e0fffa83 	ldbu	r3,-22(fp)
    2fc4:	00bfefc4 	movi	r2,-65
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	108001cc 	andi	r2,r2,7
    2fd8:	110001cc 	andi	r4,r2,7
    2fdc:	e0fffa83 	ldbu	r3,-22(fp)
    2fe0:	00bffe04 	movi	r2,-8
    2fe4:	1884703a 	and	r2,r3,r2
    2fe8:	1007883a 	mov	r3,r2
    2fec:	2005883a 	mov	r2,r4
    2ff0:	1884b03a 	or	r2,r3,r2
    2ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2ff8:	e0bffa03 	ldbu	r2,-24(fp)
    2ffc:	e43ffb17 	ldw	r16,-20(fp)
    3000:	014001c4 	movi	r5,7
    3004:	1009883a 	mov	r4,r2
    3008:	000d8d40 	call	d8d4 <__mulsi3>
    300c:	8085883a 	add	r2,r16,r2
    3010:	10800304 	addi	r2,r2,12
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    301c:	e0bffa03 	ldbu	r2,-24(fp)
    3020:	e43ffb17 	ldw	r16,-20(fp)
    3024:	014001c4 	movi	r5,7
    3028:	1009883a 	mov	r4,r2
    302c:	000d8d40 	call	d8d4 <__mulsi3>
    3030:	8085883a 	add	r2,r16,r2
    3034:	10800304 	addi	r2,r2,12
    3038:	10800003 	ldbu	r2,0(r2)
        };
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffe15 	stw	r4,-8(fp)
    3068:	2805883a 	mov	r2,r5
    306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    3070:	e0bfff03 	ldbu	r2,-4(fp)
    3074:	10801058 	cmpnei	r2,r2,65
    3078:	1000031e 	bne	r2,zero,3088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    307c:	e13ffe17 	ldw	r4,-8(fp)
    3080:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3084:	00000906 	br	30ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3088:	e0bfff03 	ldbu	r2,-4(fp)
    308c:	100b883a 	mov	r5,r2
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    309c:	e0bffd03 	ldbu	r2,-12(fp)
    30a0:	100b883a 	mov	r5,r2
    30a4:	e13ffe17 	ldw	r4,-8(fp)
    30a8:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    30c0:	defffa04 	addi	sp,sp,-24
    30c4:	dfc00515 	stw	ra,20(sp)
    30c8:	df000415 	stw	fp,16(sp)
    30cc:	dc400315 	stw	r17,12(sp)
    30d0:	dc000215 	stw	r16,8(sp)
    30d4:	df000404 	addi	fp,sp,16
    30d8:	e13ffc15 	stw	r4,-16(fp)
    30dc:	2805883a 	mov	r2,r5
    30e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    30e4:	e0bffd03 	ldbu	r2,-12(fp)
    30e8:	e43ffc17 	ldw	r16,-16(fp)
    30ec:	014001c4 	movi	r5,7
    30f0:	1009883a 	mov	r4,r2
    30f4:	000d8d40 	call	d8d4 <__mulsi3>
    30f8:	8085883a 	add	r2,r16,r2
    30fc:	10800304 	addi	r2,r2,12
    3100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3104:	e0bffd03 	ldbu	r2,-12(fp)
    3108:	e43ffc17 	ldw	r16,-16(fp)
    310c:	014001c4 	movi	r5,7
    3110:	1009883a 	mov	r4,r2
    3114:	000d8d40 	call	d8d4 <__mulsi3>
    3118:	8085883a 	add	r2,r16,r2
    311c:	10800344 	addi	r2,r2,13
    3120:	00c00044 	movi	r3,1
    3124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3128:	e0bffd03 	ldbu	r2,-12(fp)
    312c:	e43ffc17 	ldw	r16,-16(fp)
    3130:	014001c4 	movi	r5,7
    3134:	1009883a 	mov	r4,r2
    3138:	000d8d40 	call	d8d4 <__mulsi3>
    313c:	8085883a 	add	r2,r16,r2
    3140:	10800384 	addi	r2,r2,14
    3144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3148:	e0fffd03 	ldbu	r3,-12(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	14000104 	addi	r16,r2,4
    3154:	e47ffc17 	ldw	r17,-16(fp)
    3158:	014001c4 	movi	r5,7
    315c:	1809883a 	mov	r4,r3
    3160:	000d8d40 	call	d8d4 <__mulsi3>
    3164:	8885883a 	add	r2,r17,r2
    3168:	10800204 	addi	r2,r2,8
    316c:	81403fcc 	andi	r5,r16,255
    3170:	10c00003 	ldbu	r3,0(r2)
    3174:	1806703a 	and	r3,r3,zero
    3178:	1809883a 	mov	r4,r3
    317c:	2807883a 	mov	r3,r5
    3180:	20c6b03a 	or	r3,r4,r3
    3184:	10c00005 	stb	r3,0(r2)
    3188:	8006d23a 	srli	r3,r16,8
    318c:	19403fcc 	andi	r5,r3,255
    3190:	10c00043 	ldbu	r3,1(r2)
    3194:	1806703a 	and	r3,r3,zero
    3198:	1809883a 	mov	r4,r3
    319c:	2807883a 	mov	r3,r5
    31a0:	20c6b03a 	or	r3,r4,r3
    31a4:	10c00045 	stb	r3,1(r2)
    31a8:	8006d43a 	srli	r3,r16,16
    31ac:	19403fcc 	andi	r5,r3,255
    31b0:	10c00083 	ldbu	r3,2(r2)
    31b4:	1806703a 	and	r3,r3,zero
    31b8:	1809883a 	mov	r4,r3
    31bc:	2807883a 	mov	r3,r5
    31c0:	20c6b03a 	or	r3,r4,r3
    31c4:	10c00085 	stb	r3,2(r2)
    31c8:	800ad63a 	srli	r5,r16,24
    31cc:	10c000c3 	ldbu	r3,3(r2)
    31d0:	1806703a 	and	r3,r3,zero
    31d4:	1809883a 	mov	r4,r3
    31d8:	2807883a 	mov	r3,r5
    31dc:	20c6b03a 	or	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
        };
    31e4:	0001883a 	nop
    31e8:	e6fffe04 	addi	sp,fp,-8
    31ec:	dfc00317 	ldw	ra,12(sp)
    31f0:	df000217 	ldw	fp,8(sp)
    31f4:	dc400117 	ldw	r17,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00404 	addi	sp,sp,16
    3200:	f800283a 	ret

00003204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3204:	defffc04 	addi	sp,sp,-16
    3208:	dfc00315 	stw	ra,12(sp)
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3218:	00800044 	movi	r2,1
    321c:	e0bffe05 	stb	r2,-8(fp)
    3220:	e0bffe03 	ldbu	r2,-8(fp)
    3224:	10800428 	cmpgeui	r2,r2,16
    3228:	1000081e 	bne	r2,zero,324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    322c:	e0bffe03 	ldbu	r2,-8(fp)
    3230:	100b883a 	mov	r5,r2
    3234:	e13fff17 	ldw	r4,-4(fp)
    3238:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    323c:	e0bffe03 	ldbu	r2,-8(fp)
    3240:	10800044 	addi	r2,r2,1
    3244:	e0bffe05 	stb	r2,-8(fp)
    3248:	003ff506 	br	3220 <__alt_data_end+0xfc003220>
                        InitEntry(i);

                hubCounter = 0;
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	100001c5 	stb	zero,7(r2)
        };
    3254:	0001883a 	nop
    3258:	e037883a 	mov	sp,fp
    325c:	dfc00117 	ldw	ra,4(sp)
    3260:	df000017 	ldw	fp,0(sp)
    3264:	dec00204 	addi	sp,sp,8
    3268:	f800283a 	ret

0000326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    326c:	defffa04 	addi	sp,sp,-24
    3270:	dfc00515 	stw	ra,20(sp)
    3274:	df000415 	stw	fp,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	df000404 	addi	fp,sp,16
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	2805883a 	mov	r2,r5
    3288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    328c:	00800044 	movi	r2,1
    3290:	e0bffc05 	stb	r2,-16(fp)
    3294:	e0bffc03 	ldbu	r2,-16(fp)
    3298:	10800428 	cmpgeui	r2,r2,16
    329c:	1000111e 	bne	r2,zero,32e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32a0:	e0bffc03 	ldbu	r2,-16(fp)
    32a4:	e43ffd17 	ldw	r16,-12(fp)
    32a8:	014001c4 	movi	r5,7
    32ac:	1009883a 	mov	r4,r2
    32b0:	000d8d40 	call	d8d4 <__mulsi3>
    32b4:	8085883a 	add	r2,r16,r2
    32b8:	10800304 	addi	r2,r2,12
    32bc:	10800003 	ldbu	r2,0(r2)
    32c0:	10c03fcc 	andi	r3,r2,255
    32c4:	e0bffe03 	ldbu	r2,-8(fp)
    32c8:	1880021e 	bne	r3,r2,32d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    32cc:	e0bffc03 	ldbu	r2,-16(fp)
    32d0:	00000506 	br	32e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32d4:	e0bffc03 	ldbu	r2,-16(fp)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	e0bffc05 	stb	r2,-16(fp)
    32e0:	003fec06 	br	3294 <__alt_data_end+0xfc003294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    32e4:	0005883a 	mov	r2,zero
        };
    32e8:	e6ffff04 	addi	sp,fp,-4
    32ec:	dfc00217 	ldw	ra,8(sp)
    32f0:	df000117 	ldw	fp,4(sp)
    32f4:	dc000017 	ldw	r16,0(sp)
    32f8:	dec00304 	addi	sp,sp,12
    32fc:	f800283a 	ret

00003300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3300:	defffa04 	addi	sp,sp,-24
    3304:	dfc00515 	stw	ra,20(sp)
    3308:	df000415 	stw	fp,16(sp)
    330c:	dc000315 	stw	r16,12(sp)
    3310:	df000404 	addi	fp,sp,16
    3314:	e13ffd15 	stw	r4,-12(fp)
    3318:	2805883a 	mov	r2,r5
    331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3320:	e0bffe03 	ldbu	r2,-8(fp)
    3324:	10003026 	beq	r2,zero,33e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3328:	e0bffe03 	ldbu	r2,-8(fp)
    332c:	e43ffd17 	ldw	r16,-12(fp)
    3330:	014001c4 	movi	r5,7
    3334:	1009883a 	mov	r4,r2
    3338:	000d8d40 	call	d8d4 <__mulsi3>
    333c:	8085883a 	add	r2,r16,r2
    3340:	10800304 	addi	r2,r2,12
    3344:	10800003 	ldbu	r2,0(r2)
    3348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    334c:	e0bffc43 	ldbu	r2,-15(fp)
    3350:	1080100c 	andi	r2,r2,64
    3354:	10803fcc 	andi	r2,r2,255
    3358:	10001e26 	beq	r2,zero,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    335c:	00800044 	movi	r2,1
    3360:	e0bffc05 	stb	r2,-16(fp)
    3364:	e0bffc03 	ldbu	r2,-16(fp)
    3368:	100d883a 	mov	r6,r2
    336c:	e17ffc43 	ldbu	r5,-15(fp)
    3370:	e13ffd17 	ldw	r4,-12(fp)
    3374:	00034040 	call	3404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3378:	e0bffc05 	stb	r2,-16(fp)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	1004c03a 	cmpne	r2,r2,zero
    3384:	10803fcc 	andi	r2,r2,255
    3388:	10000526 	beq	r2,zero,33a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    338c:	e0bffc03 	ldbu	r2,-16(fp)
    3390:	100b883a 	mov	r5,r2
    3394:	e13ffd17 	ldw	r4,-12(fp)
    3398:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    339c:	003ff106 	br	3364 <__alt_data_end+0xfc003364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10c001c3 	ldbu	r3,7(r2)
    33a8:	e0bffc43 	ldbu	r2,-15(fp)
    33ac:	108001cc 	andi	r2,r2,7
    33b0:	18c03fcc 	andi	r3,r3,255
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1880061e 	bne	r3,r2,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	108001c3 	ldbu	r2,7(r2)
    33c4:	10bfffc4 	addi	r2,r2,-1
    33c8:	1007883a 	mov	r3,r2
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    33d4:	e0bffe03 	ldbu	r2,-8(fp)
    33d8:	100b883a 	mov	r5,r2
    33dc:	e13ffd17 	ldw	r4,-12(fp)
    33e0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    33e4:	00000106 	br	33ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    33e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    33ec:	e6ffff04 	addi	sp,fp,-4
    33f0:	dfc00217 	ldw	ra,8(sp)
    33f4:	df000117 	ldw	fp,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3404:	defff904 	addi	sp,sp,-28
    3408:	dfc00615 	stw	ra,24(sp)
    340c:	df000515 	stw	fp,20(sp)
    3410:	dc000415 	stw	r16,16(sp)
    3414:	df000504 	addi	fp,sp,20
    3418:	e13ffc15 	stw	r4,-16(fp)
    341c:	e17ffd05 	stb	r5,-12(fp)
    3420:	3005883a 	mov	r2,r6
    3424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	10000526 	beq	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3430:	e0bffe03 	ldbu	r2,-8(fp)
    3434:	10800428 	cmpgeui	r2,r2,16
    3438:	1000021e 	bne	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    343c:	e0bffe03 	ldbu	r2,-8(fp)
    3440:	00000106 	br	3448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3444:	00800044 	movi	r2,1
    3448:	e0bffb05 	stb	r2,-20(fp)
    344c:	e0bffb03 	ldbu	r2,-20(fp)
    3450:	10800428 	cmpgeui	r2,r2,16
    3454:	1000161e 	bne	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3458:	e0bffb03 	ldbu	r2,-20(fp)
    345c:	e43ffc17 	ldw	r16,-16(fp)
    3460:	014001c4 	movi	r5,7
    3464:	1009883a 	mov	r4,r2
    3468:	000d8d40 	call	d8d4 <__mulsi3>
    346c:	8085883a 	add	r2,r16,r2
    3470:	10800304 	addi	r2,r2,12
    3474:	10800003 	ldbu	r2,0(r2)
    3478:	1004d0fa 	srli	r2,r2,3
    347c:	108001cc 	andi	r2,r2,7
    3480:	1007883a 	mov	r3,r2
    3484:	e0bffd03 	ldbu	r2,-12(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880021e 	bne	r3,r2,34a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	00000506 	br	34b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800044 	addi	r2,r2,1
    34a8:	e0bffb05 	stb	r2,-20(fp)
    34ac:	003fe706 	br	344c <__alt_data_end+0xfc00344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    34b0:	0005883a 	mov	r2,zero
        };
    34b4:	e6ffff04 	addi	sp,fp,-4
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	df000117 	ldw	fp,4(sp)
    34c0:	dc000017 	ldw	r16,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	1009883a 	mov	r4,r2
    34ec:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	1009883a 	mov	r4,r2
    34fc:	0004ebc0 	call	4ebc <_ZN17UsbConfigXtracterC1Ev>
    3500:	008000b4 	movhi	r2,2
    3504:	10931704 	addi	r2,r2,19548
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	18800015 	stw	r2,0(r3)
    3510:	008000b4 	movhi	r2,2
    3514:	10932404 	addi	r2,r2,19600
    3518:	e0fffe17 	ldw	r3,-8(fp)
    351c:	18800115 	stw	r2,4(r3)
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	e0ffff17 	ldw	r3,-4(fp)
    3528:	10c00315 	stw	r3,12(r2)
    352c:	e0bffe17 	ldw	r2,-8(fp)
    3530:	10000405 	stb	zero,16(r2)
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	00c00044 	movi	r3,1
    353c:	10c006c5 	stb	r3,27(r2)
    3540:	e0bffe17 	ldw	r2,-8(fp)
    3544:	10000715 	stw	zero,28(r2)
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	10000905 	stb	zero,36(r2)
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3558:	e03ffd05 	stb	zero,-12(fp)
    355c:	e0bffd03 	ldbu	r2,-12(fp)
    3560:	108000e8 	cmpgeui	r2,r2,3
    3564:	1000431e 	bne	r2,zero,3674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3568:	e0fffd03 	ldbu	r3,-12(fp)
    356c:	e13ffe17 	ldw	r4,-8(fp)
    3570:	1805883a 	mov	r2,r3
    3574:	1085883a 	add	r2,r2,r2
    3578:	10c5883a 	add	r2,r2,r3
    357c:	2085883a 	add	r2,r4,r2
    3580:	10800444 	addi	r2,r2,17
    3584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3588:	e13ffd03 	ldbu	r4,-12(fp)
    358c:	e0bffd03 	ldbu	r2,-12(fp)
    3590:	10000226 	beq	r2,zero,359c <_ZN7XBOXONEC1EP3USB+0xd0>
    3594:	0007883a 	mov	r3,zero
    3598:	00000106 	br	35a0 <_ZN7XBOXONEC1EP3USB+0xd4>
    359c:	00c00204 	movi	r3,8
    35a0:	e17ffe17 	ldw	r5,-8(fp)
    35a4:	2005883a 	mov	r2,r4
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1105883a 	add	r2,r2,r4
    35b0:	2885883a 	add	r2,r5,r2
    35b4:	10800484 	addi	r2,r2,18
    35b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800404 	addi	r2,r2,16
    35d8:	110000c3 	ldbu	r4,3(r2)
    35dc:	00ffff84 	movi	r3,-2
    35e0:	20c6703a 	and	r3,r4,r3
    35e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    35e8:	e0fffd03 	ldbu	r3,-12(fp)
    35ec:	e13ffe17 	ldw	r4,-8(fp)
    35f0:	1805883a 	mov	r2,r3
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	10c5883a 	add	r2,r2,r3
    35fc:	2085883a 	add	r2,r4,r2
    3600:	10800404 	addi	r2,r2,16
    3604:	110000c3 	ldbu	r4,3(r2)
    3608:	00ffff44 	movi	r3,-3
    360c:	20c6703a 	and	r3,r4,r3
    3610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3614:	e13ffd03 	ldbu	r4,-12(fp)
    3618:	e0bffd03 	ldbu	r2,-12(fp)
    361c:	10000226 	beq	r2,zero,3628 <_ZN7XBOXONEC1EP3USB+0x15c>
    3620:	00c00044 	movi	r3,1
    3624:	00000106 	br	362c <_ZN7XBOXONEC1EP3USB+0x160>
    3628:	00c003c4 	movi	r3,15
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	2005883a 	mov	r2,r4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1105883a 	add	r2,r2,r4
    363c:	2885883a 	add	r2,r5,r2
    3640:	10800404 	addi	r2,r2,16
    3644:	18c7883a 	add	r3,r3,r3
    3648:	18cb883a 	add	r5,r3,r3
    364c:	10c000c3 	ldbu	r3,3(r2)
    3650:	18c000cc 	andi	r3,r3,3
    3654:	1809883a 	mov	r4,r3
    3658:	2807883a 	mov	r3,r5
    365c:	20c6b03a 	or	r3,r4,r3
    3660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3664:	e0bffd03 	ldbu	r2,-12(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bffd05 	stb	r2,-12(fp)
    3670:	003fba06 	br	355c <__alt_data_end+0xfc00355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800317 	ldw	r2,12(r2)
    367c:	10000626 	beq	r2,zero,3698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800317 	ldw	r2,12(r2)
    3688:	e0fffe17 	ldw	r3,-8(fp)
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3698:	0001883a 	nop
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    36b0:	deffde04 	addi	sp,sp,-136
    36b4:	dfc02115 	stw	ra,132(sp)
    36b8:	df002015 	stw	fp,128(sp)
    36bc:	df002004 	addi	fp,sp,128
    36c0:	e13ffc15 	stw	r4,-16(fp)
    36c4:	2809883a 	mov	r4,r5
    36c8:	3007883a 	mov	r3,r6
    36cc:	3805883a 	mov	r2,r7
    36d0:	e13ffd05 	stb	r4,-12(fp)
    36d4:	e0fffe05 	stb	r3,-8(fp)
    36d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    36dc:	e0bfe744 	addi	r2,fp,-99
    36e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    36e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    36e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    36ec:	e0bffc17 	ldw	r2,-16(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	1009883a 	mov	r4,r2
    36f8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    36fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10800403 	ldbu	r2,16(r2)
    3708:	10803fcc 	andi	r2,r2,255
    370c:	10000226 	beq	r2,zero,3718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3710:	00bff644 	movi	r2,-39
    3714:	00017606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	000b883a 	mov	r5,zero
    3728:	e13fe517 	ldw	r4,-108(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3734:	e0bfe317 	ldw	r2,-116(fp)
    3738:	1000021e 	bne	r2,zero,3744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    373c:	00bff584 	movi	r2,-42
    3740:	00016b06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3744:	e0bfe317 	ldw	r2,-116(fp)
    3748:	10c00003 	ldbu	r3,0(r2)
    374c:	11000043 	ldbu	r4,1(r2)
    3750:	2008923a 	slli	r4,r4,8
    3754:	20c6b03a 	or	r3,r4,r3
    3758:	11000083 	ldbu	r4,2(r2)
    375c:	2008943a 	slli	r4,r4,16
    3760:	20c6b03a 	or	r3,r4,r3
    3764:	108000c3 	ldbu	r2,3(r2)
    3768:	1004963a 	slli	r2,r2,24
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1000021e 	bne	r2,zero,377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3774:	00bff5c4 	movi	r2,-41
    3778:	00015d06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    377c:	e0bfe317 	ldw	r2,-116(fp)
    3780:	10c00003 	ldbu	r3,0(r2)
    3784:	11000043 	ldbu	r4,1(r2)
    3788:	2008923a 	slli	r4,r4,8
    378c:	20c6b03a 	or	r3,r4,r3
    3790:	11000083 	ldbu	r4,2(r2)
    3794:	2008943a 	slli	r4,r4,16
    3798:	20c6b03a 	or	r3,r4,r3
    379c:	108000c3 	ldbu	r2,3(r2)
    37a0:	1004963a 	slli	r2,r2,24
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c00444 	addi	r3,r2,17
    37b4:	e0bfe317 	ldw	r2,-116(fp)
    37b8:	19803fcc 	andi	r6,r3,255
    37bc:	11000003 	ldbu	r4,0(r2)
    37c0:	2008703a 	and	r4,r4,zero
    37c4:	200b883a 	mov	r5,r4
    37c8:	3009883a 	mov	r4,r6
    37cc:	2908b03a 	or	r4,r5,r4
    37d0:	11000005 	stb	r4,0(r2)
    37d4:	1808d23a 	srli	r4,r3,8
    37d8:	21803fcc 	andi	r6,r4,255
    37dc:	11000043 	ldbu	r4,1(r2)
    37e0:	2008703a 	and	r4,r4,zero
    37e4:	200b883a 	mov	r5,r4
    37e8:	3009883a 	mov	r4,r6
    37ec:	2908b03a 	or	r4,r5,r4
    37f0:	11000045 	stb	r4,1(r2)
    37f4:	1808d43a 	srli	r4,r3,16
    37f8:	21803fcc 	andi	r6,r4,255
    37fc:	11000083 	ldbu	r4,2(r2)
    3800:	2008703a 	and	r4,r4,zero
    3804:	200b883a 	mov	r5,r4
    3808:	3009883a 	mov	r4,r6
    380c:	2908b03a 	or	r4,r5,r4
    3810:	11000085 	stb	r4,2(r2)
    3814:	180ad63a 	srli	r5,r3,24
    3818:	10c000c3 	ldbu	r3,3(r2)
    381c:	1806703a 	and	r3,r3,zero
    3820:	1809883a 	mov	r4,r3
    3824:	2807883a 	mov	r3,r5
    3828:	20c6b03a 	or	r3,r4,r3
    382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3830:	e0bfe317 	ldw	r2,-116(fp)
    3834:	e0ffff03 	ldbu	r3,-4(fp)
    3838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    383c:	e0bffc17 	ldw	r2,-16(fp)
    3840:	10c00317 	ldw	r3,12(r2)
    3844:	00800484 	movi	r2,18
    3848:	113fffcc 	andi	r4,r2,65535
    384c:	e0bfe744 	addi	r2,fp,-99
    3850:	d8800015 	stw	r2,0(sp)
    3854:	200f883a 	mov	r7,r4
    3858:	000d883a 	mov	r6,zero
    385c:	000b883a 	mov	r5,zero
    3860:	1809883a 	mov	r4,r3
    3864:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    3868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    386c:	e0bfe317 	ldw	r2,-116(fp)
    3870:	e0ffe417 	ldw	r3,-112(fp)
    3874:	19403fcc 	andi	r5,r3,255
    3878:	10c00003 	ldbu	r3,0(r2)
    387c:	1806703a 	and	r3,r3,zero
    3880:	1809883a 	mov	r4,r3
    3884:	2807883a 	mov	r3,r5
    3888:	20c6b03a 	or	r3,r4,r3
    388c:	10c00005 	stb	r3,0(r2)
    3890:	e0ffe417 	ldw	r3,-112(fp)
    3894:	1806d23a 	srli	r3,r3,8
    3898:	19403fcc 	andi	r5,r3,255
    389c:	10c00043 	ldbu	r3,1(r2)
    38a0:	1806703a 	and	r3,r3,zero
    38a4:	1809883a 	mov	r4,r3
    38a8:	2807883a 	mov	r3,r5
    38ac:	20c6b03a 	or	r3,r4,r3
    38b0:	10c00045 	stb	r3,1(r2)
    38b4:	e0ffe417 	ldw	r3,-112(fp)
    38b8:	1806d43a 	srli	r3,r3,16
    38bc:	19403fcc 	andi	r5,r3,255
    38c0:	10c00083 	ldbu	r3,2(r2)
    38c4:	1806703a 	and	r3,r3,zero
    38c8:	1809883a 	mov	r4,r3
    38cc:	2807883a 	mov	r3,r5
    38d0:	20c6b03a 	or	r3,r4,r3
    38d4:	10c00085 	stb	r3,2(r2)
    38d8:	e0ffe417 	ldw	r3,-112(fp)
    38dc:	180ad63a 	srli	r5,r3,24
    38e0:	10c000c3 	ldbu	r3,3(r2)
    38e4:	1806703a 	and	r3,r3,zero
    38e8:	1809883a 	mov	r4,r3
    38ec:	2807883a 	mov	r3,r5
    38f0:	20c6b03a 	or	r3,r4,r3
    38f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    38f8:	e0bfe103 	ldbu	r2,-124(fp)
    38fc:	1000e61e 	bne	r2,zero,3c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3900:	e0bfe217 	ldw	r2,-120(fp)
    3904:	10c00203 	ldbu	r3,8(r2)
    3908:	10800243 	ldbu	r2,9(r2)
    390c:	1004923a 	slli	r2,r2,8
    3910:	10c4b03a 	or	r2,r2,r3
    3914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3918:	e0bfe217 	ldw	r2,-120(fp)
    391c:	10c00283 	ldbu	r3,10(r2)
    3920:	108002c3 	ldbu	r2,11(r2)
    3924:	1004923a 	slli	r2,r2,8
    3928:	10c4b03a 	or	r2,r2,r3
    392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3930:	e0bffc17 	ldw	r2,-16(fp)
    3934:	10800017 	ldw	r2,0(r2)
    3938:	10800604 	addi	r2,r2,24
    393c:	10800017 	ldw	r2,0(r2)
    3940:	e0ffe60b 	ldhu	r3,-104(fp)
    3944:	e13fe68b 	ldhu	r4,-102(fp)
    3948:	200d883a 	mov	r6,r4
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffc17 	ldw	r4,-16(fp)
    3954:	103ee83a 	callr	r2
    3958:	1080005c 	xori	r2,r2,1
    395c:	10803fcc 	andi	r2,r2,255
    3960:	1000d51e 	bne	r2,zero,3cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3964:	e0bfe517 	ldw	r2,-108(fp)
    3968:	10800017 	ldw	r2,0(r2)
    396c:	10800104 	addi	r2,r2,4
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0fffd03 	ldbu	r3,-12(fp)
    3978:	e13ffe03 	ldbu	r4,-8(fp)
    397c:	200f883a 	mov	r7,r4
    3980:	000d883a 	mov	r6,zero
    3984:	180b883a 	mov	r5,r3
    3988:	e13fe517 	ldw	r4,-108(fp)
    398c:	103ee83a 	callr	r2
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10800403 	ldbu	r2,16(r2)
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	1000021e 	bne	r2,zero,39b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    39ac:	00bff504 	movi	r2,-44
    39b0:	0000cf06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    39b4:	e0bfe217 	ldw	r2,-120(fp)
    39b8:	10c001c3 	ldbu	r3,7(r2)
    39bc:	e0bffc17 	ldw	r2,-16(fp)
    39c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	10c00317 	ldw	r3,12(r2)
    39cc:	e0bffc17 	ldw	r2,-16(fp)
    39d0:	10800403 	ldbu	r2,16(r2)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	100f883a 	mov	r7,r2
    39dc:	000d883a 	mov	r6,zero
    39e0:	000b883a 	mov	r5,zero
    39e4:	1809883a 	mov	r4,r3
    39e8:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    39ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    39f0:	e0bfe103 	ldbu	r2,-124(fp)
    39f4:	10001026 	beq	r2,zero,3a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    39f8:	e0bfe317 	ldw	r2,-116(fp)
    39fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a00:	e0bfe517 	ldw	r2,-108(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	10800204 	addi	r2,r2,8
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	e0fffc17 	ldw	r3,-16(fp)
    3a14:	18c00403 	ldbu	r3,16(r3)
    3a18:	18c03fcc 	andi	r3,r3,255
    3a1c:	180b883a 	mov	r5,r3
    3a20:	e13fe517 	ldw	r4,-108(fp)
    3a24:	103ee83a 	callr	r2
                bAddress = 0;
    3a28:	e0bffc17 	ldw	r2,-16(fp)
    3a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a30:	e0bfe103 	ldbu	r2,-124(fp)
    3a34:	0000ae06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a38:	e0bfe317 	ldw	r2,-116(fp)
    3a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	e0fffc17 	ldw	r3,-16(fp)
    3a50:	18c00403 	ldbu	r3,16(r3)
    3a54:	18c03fcc 	andi	r3,r3,255
    3a58:	180b883a 	mov	r5,r3
    3a5c:	e13fe517 	ldw	r4,-108(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3a68:	e0bfe317 	ldw	r2,-116(fp)
    3a6c:	1000021e 	bne	r2,zero,3a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3a70:	00bff584 	movi	r2,-42
    3a74:	00009e06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3a78:	e0bfe317 	ldw	r2,-116(fp)
    3a7c:	e0ffff03 	ldbu	r3,-4(fp)
    3a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3a84:	e0bffc17 	ldw	r2,-16(fp)
    3a88:	10c00317 	ldw	r3,12(r2)
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	10800403 	ldbu	r2,16(r2)
    3a94:	11003fcc 	andi	r4,r2,255
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10800444 	addi	r2,r2,17
    3aa0:	100f883a 	mov	r7,r2
    3aa4:	01800044 	movi	r6,1
    3aa8:	200b883a 	mov	r5,r4
    3aac:	1809883a 	mov	r4,r3
    3ab0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ab8:	e0bfe103 	ldbu	r2,-124(fp)
    3abc:	1000781e 	bne	r2,zero,3ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3ac0:	e0bfe217 	ldw	r2,-120(fp)
    3ac4:	10800443 	ldbu	r2,17(r2)
    3ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3acc:	e0bfe703 	ldbu	r2,-100(fp)
    3ad0:	01402004 	movi	r5,128
    3ad4:	1009883a 	mov	r4,r2
    3ad8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3adc:	e03fe145 	stb	zero,-123(fp)
    3ae0:	e0ffe143 	ldbu	r3,-123(fp)
    3ae4:	e0bfe703 	ldbu	r2,-100(fp)
    3ae8:	1880222e 	bgeu	r3,r2,3b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10c00104 	addi	r3,r2,4
    3af4:	e0bfed04 	addi	r2,fp,-76
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	0004f240 	call	4f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10c00317 	ldw	r3,12(r2)
    3b0c:	e0bffc17 	ldw	r2,-16(fp)
    3b10:	10800403 	ldbu	r2,16(r2)
    3b14:	11003fcc 	andi	r4,r2,255
    3b18:	e17fe143 	ldbu	r5,-123(fp)
    3b1c:	e0bfed04 	addi	r2,fp,-76
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	280f883a 	mov	r7,r5
    3b28:	000d883a 	mov	r6,zero
    3b2c:	200b883a 	mov	r5,r4
    3b30:	1809883a 	mov	r4,r3
    3b34:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b3c:	e0bfe103 	ldbu	r2,-124(fp)
    3b40:	10000226 	beq	r2,zero,3b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b48:	00006206 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	108006c3 	ldbu	r2,27(r2)
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	108000f0 	cmpltui	r2,r2,3
    3b5c:	10000426 	beq	r2,zero,3b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b60:	e0bfe143 	ldbu	r2,-123(fp)
    3b64:	10800044 	addi	r2,r2,1
    3b68:	e0bfe145 	stb	r2,-123(fp)
    3b6c:	003fdc06 	br	3ae0 <__alt_data_end+0xfc003ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	108006c3 	ldbu	r2,27(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	108000e8 	cmpgeui	r2,r2,3
    3b84:	10004e26 	beq	r2,zero,3cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10c00317 	ldw	r3,12(r2)
    3b90:	e0bffc17 	ldw	r2,-16(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11003fcc 	andi	r4,r2,255
    3b9c:	e0bffc17 	ldw	r2,-16(fp)
    3ba0:	108006c3 	ldbu	r2,27(r2)
    3ba4:	11403fcc 	andi	r5,r2,255
    3ba8:	e0bffc17 	ldw	r2,-16(fp)
    3bac:	10800444 	addi	r2,r2,17
    3bb0:	100f883a 	mov	r7,r2
    3bb4:	280d883a 	mov	r6,r5
    3bb8:	200b883a 	mov	r5,r4
    3bbc:	1809883a 	mov	r4,r3
    3bc0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3bc8:	e0bfe103 	ldbu	r2,-124(fp)
    3bcc:	1000361e 	bne	r2,zero,3ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3bd0:	01003204 	movi	r4,200
    3bd4:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3bd8:	e0bffc17 	ldw	r2,-16(fp)
    3bdc:	10c00317 	ldw	r3,12(r2)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10800403 	ldbu	r2,16(r2)
    3be8:	11003fcc 	andi	r4,r2,255
    3bec:	e0bffc17 	ldw	r2,-16(fp)
    3bf0:	10800443 	ldbu	r2,17(r2)
    3bf4:	11403fcc 	andi	r5,r2,255
    3bf8:	e0bffc17 	ldw	r2,-16(fp)
    3bfc:	10800683 	ldbu	r2,26(r2)
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000231e 	bne	r2,zero,3cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c34:	00800144 	movi	r2,5
    3c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c3c:	00800804 	movi	r2,32
    3c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c44:	00800044 	movi	r2,1
    3c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3c50:	e0bfebc4 	addi	r2,fp,-81
    3c54:	01800144 	movi	r6,5
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
    3c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3c68:	e0bfe103 	ldbu	r2,-124(fp)
    3c6c:	1000181e 	bne	r2,zero,3cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3c70:	e13ffc17 	ldw	r4,-16(fp)
    3c74:	00046180 	call	4618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	00c00044 	movi	r3,1
    3c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	00c00044 	movi	r3,1
    3c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3c90:	0005883a 	mov	r2,zero
    3c94:	00001606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3c98:	0001883a 	nop
    3c9c:	00000d06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca0:	0001883a 	nop
    3ca4:	00000b06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca8:	0001883a 	nop
    3cac:	00000906 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3cb4:	00000706 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3cb8:	0001883a 	nop
    3cbc:	00000106 	br	3cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3cc4:	00bff444 	movi	r2,-47
    3cc8:	e0bfe105 	stb	r2,-124(fp)
    3ccc:	00000106 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800204 	addi	r2,r2,8
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e13ffc17 	ldw	r4,-16(fp)
    3ce8:	103ee83a 	callr	r2
        return rcode;
    3cec:	e0bfe103 	ldbu	r2,-124(fp)
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d04:	defff904 	addi	sp,sp,-28
    3d08:	df000615 	stw	fp,24(sp)
    3d0c:	df000604 	addi	fp,sp,24
    3d10:	e13ffb15 	stw	r4,-20(fp)
    3d14:	3009883a 	mov	r4,r6
    3d18:	3807883a 	mov	r3,r7
    3d1c:	e0800117 	ldw	r2,4(fp)
    3d20:	e17ffc05 	stb	r5,-16(fp)
    3d24:	e13ffd05 	stb	r4,-12(fp)
    3d28:	e0fffe05 	stb	r3,-8(fp)
    3d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0fffc03 	ldbu	r3,-16(fp)
    3d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	108000c3 	ldbu	r2,3(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	108000cc 	andi	r2,r2,3
    3d4c:	108000d8 	cmpnei	r2,r2,3
    3d50:	1000361e 	bne	r2,zero,3e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	10800083 	ldbu	r2,2(r2)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	1080201c 	xori	r2,r2,128
    3d64:	10bfe004 	addi	r2,r2,-128
    3d68:	1000020e 	bge	r2,zero,3d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3d6c:	00800084 	movi	r2,2
    3d70:	00000106 	br	3d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3d74:	00800044 	movi	r2,1
    3d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3d7c:	e0fffa03 	ldbu	r3,-24(fp)
    3d80:	e0800217 	ldw	r2,8(fp)
    3d84:	10800083 	ldbu	r2,2(r2)
    3d88:	108003cc 	andi	r2,r2,15
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e13ffb17 	ldw	r4,-20(fp)
    3d94:	1805883a 	mov	r2,r3
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	10c5883a 	add	r2,r2,r3
    3da0:	2085883a 	add	r2,r4,r2
    3da4:	10800444 	addi	r2,r2,17
    3da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3dac:	e0fffa03 	ldbu	r3,-24(fp)
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	11000103 	ldbu	r4,4(r2)
    3db8:	10800143 	ldbu	r2,5(r2)
    3dbc:	1004923a 	slli	r2,r2,8
    3dc0:	1104b03a 	or	r2,r2,r4
    3dc4:	100b883a 	mov	r5,r2
    3dc8:	e13ffb17 	ldw	r4,-20(fp)
    3dcc:	1805883a 	mov	r2,r3
    3dd0:	1085883a 	add	r2,r2,r2
    3dd4:	10c5883a 	add	r2,r2,r3
    3dd8:	2085883a 	add	r2,r4,r2
    3ddc:	10800484 	addi	r2,r2,18
    3de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	10c00903 	ldbu	r3,36(r2)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10800183 	ldbu	r2,6(r2)
    3df4:	18c03fcc 	andi	r3,r3,255
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	1880042e 	bgeu	r3,r2,3e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	10c00183 	ldbu	r3,6(r2)
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e10:	e0bffb17 	ldw	r2,-20(fp)
    3e14:	108006c3 	ldbu	r2,27(r2)
    3e18:	10800044 	addi	r2,r2,1
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bffb17 	ldw	r2,-20(fp)
    3e24:	10c006c5 	stb	r3,27(r2)
    3e28:	00000106 	br	3e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e30:	e037883a 	mov	sp,fp
    3e34:	df000017 	ldw	fp,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret

00003e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e40:	213fff04 	addi	r4,r4,-4
    3e44:	0003d041 	jmpi	3d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	df000215 	stw	fp,8(sp)
    3e50:	df000204 	addi	fp,sp,8
    3e54:	e13ffe15 	stw	r4,-8(fp)
    3e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3e5c:	0001883a 	nop
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3e70:	defffd04 	addi	sp,sp,-12
    3e74:	dfc00215 	stw	ra,8(sp)
    3e78:	df000115 	stw	fp,4(sp)
    3e7c:	df000104 	addi	fp,sp,4
    3e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800317 	ldw	r2,12(r2)
    3e94:	1009883a 	mov	r4,r2
    3e98:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	20800017 	ldw	r2,0(r4)
    3ea4:	10800204 	addi	r2,r2,8
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	e0ffff17 	ldw	r3,-4(fp)
    3eb0:	18c00403 	ldbu	r3,16(r3)
    3eb4:	18c03fcc 	andi	r3,r3,255
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	00c00044 	movi	r3,1
    3ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3eec:	0005883a 	mov	r2,zero
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f04:	defffa04 	addi	sp,sp,-24
    3f08:	dfc00515 	stw	ra,20(sp)
    3f0c:	df000415 	stw	fp,16(sp)
    3f10:	df000404 	addi	fp,sp,16
    3f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800943 	ldbu	r2,37(r2)
    3f24:	1080005c 	xori	r2,r2,1
    3f28:	10803fcc 	andi	r2,r2,255
    3f2c:	10000226 	beq	r2,zero,3f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f30:	0005883a 	mov	r2,zero
    3f34:	00002c06 	br	3fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f38:	00006dc0 	call	6dc <_Z6millisv>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800717 	ldw	r2,28(r2)
    3f48:	1885c83a 	sub	r2,r3,r2
    3f4c:	0084303a 	nor	r2,zero,r2
    3f50:	1004d7fa 	srli	r2,r2,31
    3f54:	10803fcc 	andi	r2,r2,255
    3f58:	10002226 	beq	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3f5c:	00006dc0 	call	6dc <_Z6millisv>
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10800903 	ldbu	r2,36(r2)
    3f6c:	10803fcc 	andi	r2,r2,255
    3f70:	1887883a 	add	r3,r3,r2
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800603 	ldbu	r2,24(r2)
    3f84:	10803fcc 	andi	r2,r2,255
    3f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	11000317 	ldw	r4,12(r2)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800403 	ldbu	r2,16(r2)
    3f9c:	11403fcc 	andi	r5,r2,255
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	108005c3 	ldbu	r2,23(r2)
    3fa8:	11803fcc 	andi	r6,r2,255
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800f84 	addi	r2,r2,62
    3fb4:	e0ffff17 	ldw	r3,-4(fp)
    3fb8:	18c00903 	ldbu	r3,36(r3)
    3fbc:	18c03fcc 	andi	r3,r3,255
    3fc0:	e1fffe84 	addi	r7,fp,-6
    3fc4:	d8c00115 	stw	r3,4(sp)
    3fc8:	d8800015 	stw	r2,0(sp)
    3fcc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3fd4:	e0bffe43 	ldbu	r2,-7(fp)
    3fd8:	1000021e 	bne	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3fdc:	e13fff17 	ldw	r4,-4(fp)
    3fe0:	0003ffc0 	call	3ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800f83 	ldbu	r2,62(r2)
    4014:	10803fcc 	andi	r2,r2,255
    4018:	108001d8 	cmpnei	r2,r2,7
    401c:	10002f1e 	bne	r2,zero,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4020:	e0bfff17 	ldw	r2,-4(fp)
    4024:	10801083 	ldbu	r2,66(r2)
    4028:	10803fcc 	andi	r2,r2,255
    402c:	10800058 	cmpnei	r2,r2,1
    4030:	10000a1e 	bne	r2,zero,405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10c0098b 	ldhu	r3,38(r2)
    403c:	008000b4 	movhi	r2,2
    4040:	10931384 	addi	r2,r2,19534
    4044:	1080000b 	ldhu	r2,0(r2)
    4048:	1884b03a 	or	r2,r3,r2
    404c:	1007883a 	mov	r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c0098d 	sth	r3,38(r2)
    4058:	00000b06 	br	4088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	1080098b 	ldhu	r2,38(r2)
    4064:	1007883a 	mov	r3,r2
    4068:	008000b4 	movhi	r2,2
    406c:	10931384 	addi	r2,r2,19534
    4070:	1080000b 	ldhu	r2,0(r2)
    4074:	0084303a 	nor	r2,zero,r2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1007883a 	mov	r3,r2
    4080:	e0bfff17 	ldw	r2,-4(fp)
    4084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800a0b 	ldhu	r2,40(r2)
    4098:	18ffffcc 	andi	r3,r3,65535
    409c:	10bfffcc 	andi	r2,r2,65535
    40a0:	18800e26 	beq	r3,r2,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	1080098b 	ldhu	r2,38(r2)
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800a0b 	ldhu	r2,40(r2)
    40b8:	0084303a 	nor	r2,zero,r2
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	1007883a 	mov	r3,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	10c0098b 	ldhu	r3,38(r2)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10800f83 	ldbu	r2,62(r2)
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	10800820 	cmpeqi	r2,r2,32
    40ec:	1000b026 	beq	r2,zero,43b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	10c0098b 	ldhu	r3,38(r2)
    40f8:	008000b4 	movhi	r2,2
    40fc:	10931384 	addi	r2,r2,19534
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	108010c3 	ldbu	r2,67(r2)
    4114:	10803fcc 	andi	r2,r2,255
    4118:	108003cc 	andi	r2,r2,15
    411c:	1004923a 	slli	r2,r2,8
    4120:	1007883a 	mov	r3,r2
    4124:	e0bffe0b 	ldhu	r2,-8(fp)
    4128:	1884b03a 	or	r2,r3,r2
    412c:	1007883a 	mov	r3,r2
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10801083 	ldbu	r2,66(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10803c0c 	andi	r2,r2,240
    4140:	1884b03a 	or	r2,r3,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10801083 	ldbu	r2,66(r2)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	1080030c 	andi	r2,r2,12
    4158:	100492ba 	slli	r2,r2,10
    415c:	1884b03a 	or	r2,r3,r2
    4160:	1007883a 	mov	r3,r2
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10801083 	ldbu	r2,66(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	1080004c 	andi	r2,r2,1
    4174:	100490fa 	slli	r2,r2,3
    4178:	1884b03a 	or	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	108010c3 	ldbu	r2,67(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080300c 	andi	r2,r2,192
    4190:	1004923a 	slli	r2,r2,8
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	108010c3 	ldbu	r2,67(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	10800c0c 	andi	r2,r2,48
    41ac:	1005d13a 	srai	r2,r2,4
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10801143 	ldbu	r2,69(r2)
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	1004923a 	slli	r2,r2,8
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	10801103 	ldbu	r2,68(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1884b03a 	or	r2,r3,r2
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108011c3 	ldbu	r2,71(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	1004923a 	slli	r2,r2,8
    4200:	1007883a 	mov	r3,r2
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10801183 	ldbu	r2,70(r2)
    420c:	10803fcc 	andi	r2,r2,255
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	10801243 	ldbu	r2,73(r2)
    4228:	10803fcc 	andi	r2,r2,255
    422c:	1004923a 	slli	r2,r2,8
    4230:	1007883a 	mov	r3,r2
    4234:	e0bfff17 	ldw	r2,-4(fp)
    4238:	10801203 	ldbu	r2,72(r2)
    423c:	10803fcc 	andi	r2,r2,255
    4240:	1884b03a 	or	r2,r3,r2
    4244:	1007883a 	mov	r3,r2
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	108012c3 	ldbu	r2,75(r2)
    4258:	10803fcc 	andi	r2,r2,255
    425c:	1004923a 	slli	r2,r2,8
    4260:	1007883a 	mov	r3,r2
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10801283 	ldbu	r2,74(r2)
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    4280:	e0bfff17 	ldw	r2,-4(fp)
    4284:	10801343 	ldbu	r2,77(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	1004923a 	slli	r2,r2,8
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10801303 	ldbu	r2,76(r2)
    429c:	10803fcc 	andi	r2,r2,255
    42a0:	1884b03a 	or	r2,r3,r2
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	108013c3 	ldbu	r2,79(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1004923a 	slli	r2,r2,8
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10801383 	ldbu	r2,78(r2)
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	1884b03a 	or	r2,r3,r2
    42d4:	1007883a 	mov	r3,r2
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10c0098b 	ldhu	r3,38(r2)
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800a0b 	ldhu	r2,40(r2)
    42f0:	18ffffcc 	andi	r3,r3,65535
    42f4:	10bfffcc 	andi	r2,r2,65535
    42f8:	18800e26 	beq	r3,r2,4334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	1080098b 	ldhu	r2,38(r2)
    4304:	1007883a 	mov	r3,r2
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10800a0b 	ldhu	r2,40(r2)
    4310:	0084303a 	nor	r2,zero,r2
    4314:	1884703a 	and	r2,r3,r2
    4318:	1007883a 	mov	r3,r2
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c0098b 	ldhu	r3,38(r2)
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800d0b 	ldhu	r2,52(r2)
    433c:	10bfffcc 	andi	r2,r2,65535
    4340:	10000726 	beq	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800e0b 	ldhu	r2,56(r2)
    434c:	10bfffcc 	andi	r2,r2,65535
    4350:	1000031e 	bne	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	00c00044 	movi	r3,1
    435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00d0b 	ldhu	r3,52(r2)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800d8b 	ldhu	r2,54(r2)
    4378:	10bfffcc 	andi	r2,r2,65535
    437c:	10000726 	beq	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10800e8b 	ldhu	r2,58(r2)
    4388:	10bfffcc 	andi	r2,r2,65535
    438c:	1000031e 	bne	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00044 	movi	r3,1
    4398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	10c00d8b 	ldhu	r3,54(r2)
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10c00e8d 	sth	r3,58(r2)
    43ac:	00000106 	br	43b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    43b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    43b4:	e037883a 	mov	sp,fp
    43b8:	df000017 	ldw	fp,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	df000215 	stw	fp,8(sp)
    43cc:	df000204 	addi	fp,sp,8
    43d0:	e13ffe15 	stw	r4,-8(fp)
    43d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	10800218 	cmpnei	r2,r2,8
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10800d0b 	ldhu	r2,52(r2)
    43ec:	00001306 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800258 	cmpnei	r2,r2,9
    43f8:	1000031e 	bne	r2,zero,4408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10800d8b 	ldhu	r2,54(r2)
    4404:	00000d06 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10c0098b 	ldhu	r3,38(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10803fcc 	andi	r2,r2,255
    4418:	1089883a 	add	r4,r2,r2
    441c:	008000b4 	movhi	r2,2
    4420:	10930b84 	addi	r2,r2,19502
    4424:	2085883a 	add	r2,r4,r2
    4428:	1080000b 	ldhu	r2,0(r2)
    442c:	1884703a 	and	r2,r3,r2
    4430:	10bfffcc 	andi	r2,r2,65535
    4434:	1004c03a 	cmpne	r2,r2,zero
    4438:	10803fcc 	andi	r2,r2,255
}
    443c:	e037883a 	mov	sp,fp
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00104 	addi	sp,sp,4
    4448:	f800283a 	ret

0000444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    444c:	defffc04 	addi	sp,sp,-16
    4450:	df000315 	stw	fp,12(sp)
    4454:	df000304 	addi	fp,sp,12
    4458:	e13ffe15 	stw	r4,-8(fp)
    445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4460:	e0bfff17 	ldw	r2,-4(fp)
    4464:	10800218 	cmpnei	r2,r2,8
    4468:	10000a1e 	bne	r2,zero,4494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10800f03 	ldbu	r2,60(r2)
    4474:	10803fcc 	andi	r2,r2,255
    4478:	10000426 	beq	r2,zero,448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10000f05 	stb	zero,60(r2)
                        return true;
    4484:	00800044 	movi	r2,1
    4488:	00002806 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    448c:	0005883a 	mov	r2,zero
    4490:	00002606 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800258 	cmpnei	r2,r2,9
    449c:	10000a1e 	bne	r2,zero,44c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10800f43 	ldbu	r2,61(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10000426 	beq	r2,zero,44c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10000f45 	stb	zero,61(r2)
                        return true;
    44b8:	00800044 	movi	r2,1
    44bc:	00001b06 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44c0:	0005883a 	mov	r2,zero
    44c4:	00001906 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	1087883a 	add	r3,r2,r2
    44d4:	008000b4 	movhi	r2,2
    44d8:	10930b84 	addi	r2,r2,19502
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	1080000b 	ldhu	r2,0(r2)
    44e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10c00a8b 	ldhu	r3,42(r2)
    44f0:	e0bffd0b 	ldhu	r2,-12(fp)
    44f4:	1884703a 	and	r2,r3,r2
    44f8:	10bfffcc 	andi	r2,r2,65535
    44fc:	1004c03a 	cmpne	r2,r2,zero
    4500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800a8b 	ldhu	r2,42(r2)
    450c:	1007883a 	mov	r3,r2
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	0084303a 	nor	r2,zero,r2
    4518:	1884703a 	and	r2,r3,r2
    451c:	1007883a 	mov	r3,r2
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	10c00a8d 	sth	r3,42(r2)
        return click;
    4528:	e0bffd83 	ldbu	r2,-10(fp)
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    453c:	defffd04 	addi	sp,sp,-12
    4540:	df000215 	stw	fp,8(sp)
    4544:	df000204 	addi	fp,sp,8
    4548:	e13ffe15 	stw	r4,-8(fp)
    454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	e0fffe17 	ldw	r3,-8(fp)
    4558:	10800584 	addi	r2,r2,22
    455c:	1085883a 	add	r2,r2,r2
    4560:	1885883a 	add	r2,r3,r2
    4564:	1080000b 	ldhu	r2,0(r2)
}
    4568:	e037883a 	mov	sp,fp
    456c:	df000017 	ldw	fp,0(sp)
    4570:	dec00104 	addi	sp,sp,4
    4574:	f800283a 	ret

00004578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4578:	defff904 	addi	sp,sp,-28
    457c:	dfc00615 	stw	ra,24(sp)
    4580:	df000515 	stw	fp,20(sp)
    4584:	df000504 	addi	fp,sp,20
    4588:	e13ffd15 	stw	r4,-12(fp)
    458c:	e17ffe15 	stw	r5,-8(fp)
    4590:	3005883a 	mov	r2,r6
    4594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00084 	addi	r3,r2,2
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10801f83 	ldbu	r2,126(r2)
    45a8:	11000044 	addi	r4,r2,1
    45ac:	200b883a 	mov	r5,r4
    45b0:	e13ffd17 	ldw	r4,-12(fp)
    45b4:	21401f85 	stb	r5,126(r4)
    45b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	10c00317 	ldw	r3,12(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10800403 	ldbu	r2,16(r2)
    45cc:	11003fcc 	andi	r4,r2,255
    45d0:	e0bffd17 	ldw	r2,-12(fp)
    45d4:	10800503 	ldbu	r2,20(r2)
    45d8:	11403fcc 	andi	r5,r2,255
    45dc:	e1bfff0b 	ldhu	r6,-4(fp)
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	d8800015 	stw	r2,0(sp)
    45e8:	300f883a 	mov	r7,r6
    45ec:	280d883a 	mov	r6,r5
    45f0:	200b883a 	mov	r5,r4
    45f4:	1809883a 	mov	r4,r3
    45f8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    45fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4600:	e0bffc03 	ldbu	r2,-16(fp)
}
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4618:	defff904 	addi	sp,sp,-28
    461c:	dfc00615 	stw	ra,24(sp)
    4620:	df000515 	stw	fp,20(sp)
    4624:	df000504 	addi	fp,sp,20
    4628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    462c:	00800244 	movi	r2,9
    4630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4638:	00800244 	movi	r2,9
    463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4644:	008003c4 	movi	r2,15
    4648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    464c:	00800104 	movi	r2,4
    4650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4654:	00800104 	movi	r2,4
    4658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    465c:	00800804 	movi	r2,32
    4660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4664:	00800804 	movi	r2,32
    4668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    466c:	00bfe004 	movi	r2,-128
    4670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    467c:	01800344 	movi	r6,13
    4680:	e17ffb04 	addi	r5,fp,-20
    4684:	e13fff17 	ldw	r4,-4(fp)
    4688:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800817 	ldw	r2,32(r2)
    4694:	10000326 	beq	r2,zero,46a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10800817 	ldw	r2,32(r2)
    46a0:	103ee83a 	callr	r2
}
    46a4:	0001883a 	nop
    46a8:	e037883a 	mov	sp,fp
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	df000017 	ldw	fp,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    46bc:	defff904 	addi	sp,sp,-28
    46c0:	dfc00615 	stw	ra,24(sp)
    46c4:	df000515 	stw	fp,20(sp)
    46c8:	df000504 	addi	fp,sp,20
    46cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    46d0:	00800244 	movi	r2,9
    46d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    46d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    46dc:	00800244 	movi	r2,9
    46e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    46e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    46e8:	008003c4 	movi	r2,15
    46ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    46f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    46f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    46f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    46fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    470c:	01800344 	movi	r6,13
    4710:	e17ffb04 	addi	r5,fp,-20
    4714:	e13fff17 	ldw	r4,-4(fp)
    4718:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    471c:	0001883a 	nop
    4720:	e037883a 	mov	sp,fp
    4724:	dfc00117 	ldw	ra,4(sp)
    4728:	df000017 	ldw	fp,0(sp)
    472c:	dec00204 	addi	sp,sp,8
    4730:	f800283a 	ret

00004734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4734:	defff504 	addi	sp,sp,-44
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	df000915 	stw	fp,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ffb15 	stw	r4,-20(fp)
    4748:	3009883a 	mov	r4,r6
    474c:	3807883a 	mov	r3,r7
    4750:	e0800217 	ldw	r2,8(fp)
    4754:	e17ffc05 	stb	r5,-16(fp)
    4758:	e13ffd05 	stb	r4,-12(fp)
    475c:	e0fffe05 	stb	r3,-8(fp)
    4760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4764:	00800244 	movi	r2,9
    4768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4770:	00800244 	movi	r2,9
    4774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    477c:	008003c4 	movi	r2,15
    4780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4784:	e0bffc03 	ldbu	r2,-16(fp)
    4788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    478c:	e0bffd03 	ldbu	r2,-12(fp)
    4790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4794:	e0bffe03 	ldbu	r2,-8(fp)
    4798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    479c:	e0bfff03 	ldbu	r2,-4(fp)
    47a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    47ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    47b0:	00bfffc4 	movi	r2,-1
    47b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    47b8:	01800344 	movi	r6,13
    47bc:	e17ff704 	addi	r5,fp,-36
    47c0:	e13ffb17 	ldw	r4,-20(fp)
    47c4:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    47e0:	defffe04 	addi	sp,sp,-8
    47e4:	df000115 	stw	fp,4(sp)
    47e8:	df000104 	addi	fp,sp,4
    47ec:	e13fff15 	stw	r4,-4(fp)
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	10000005 	stb	zero,0(r2)
    47f8:	e0bfff17 	ldw	r2,-4(fp)
    47fc:	10c00043 	ldbu	r3,1(r2)
    4800:	1806703a 	and	r3,r3,zero
    4804:	10c00045 	stb	r3,1(r2)
    4808:	10c00083 	ldbu	r3,2(r2)
    480c:	1806703a 	and	r3,r3,zero
    4810:	10c00085 	stb	r3,2(r2)
    4814:	10c000c3 	ldbu	r3,3(r2)
    4818:	1806703a 	and	r3,r3,zero
    481c:	10c000c5 	stb	r3,3(r2)
    4820:	10c00103 	ldbu	r3,4(r2)
    4824:	1806703a 	and	r3,r3,zero
    4828:	10c00105 	stb	r3,4(r2)
        };
    482c:	0001883a 	nop
    4830:	e037883a 	mov	sp,fp
    4834:	df000017 	ldw	fp,0(sp)
    4838:	dec00104 	addi	sp,sp,4
    483c:	f800283a 	ret

00004840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4840:	defffe04 	addi	sp,sp,-8
    4844:	df000115 	stw	fp,4(sp)
    4848:	df000104 	addi	fp,sp,4
    484c:	e13fff15 	stw	r4,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10000015 	stw	zero,0(r2)
    4858:	e0bfff17 	ldw	r2,-4(fp)
    485c:	10000105 	stb	zero,4(r2)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	10000145 	stb	zero,5(r2)
        };
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00043 	ldbu	r3,1(r2)
    4898:	11000083 	ldbu	r4,2(r2)
    489c:	2008923a 	slli	r4,r4,8
    48a0:	20c6b03a 	or	r3,r4,r3
    48a4:	110000c3 	ldbu	r4,3(r2)
    48a8:	2008943a 	slli	r4,r4,16
    48ac:	20c6b03a 	or	r3,r4,r3
    48b0:	10800103 	ldbu	r2,4(r2)
    48b4:	1004963a 	slli	r2,r2,24
    48b8:	10c4b03a 	or	r2,r2,r3
    48bc:	1007883a 	mov	r3,r2
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	10c00003 	ldbu	r3,0(r2)
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10c00145 	stb	r3,5(r2)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	10c00143 	ldbu	r3,5(r2)
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10c00105 	stb	r3,4(r2)
        };
    48e8:	0001883a 	nop
    48ec:	e037883a 	mov	sp,fp
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00104 	addi	sp,sp,4
    48f8:	f800283a 	ret

000048fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    48fc:	defffe04 	addi	sp,sp,-8
    4900:	df000115 	stw	fp,4(sp)
    4904:	df000104 	addi	fp,sp,4
    4908:	e13fff15 	stw	r4,-4(fp)
    490c:	e0bfff17 	ldw	r2,-4(fp)
    4910:	10000015 	stw	zero,0(r2)
    4914:	e0bfff17 	ldw	r2,-4(fp)
    4918:	10000105 	stb	zero,4(r2)
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	1000018d 	sth	zero,6(r2)
        };
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4938:	defffd04 	addi	sp,sp,-12
    493c:	df000215 	stw	fp,8(sp)
    4940:	df000204 	addi	fp,sp,8
    4944:	e13ffe15 	stw	r4,-8(fp)
    4948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    494c:	e0bfff17 	ldw	r2,-4(fp)
    4950:	10c00043 	ldbu	r3,1(r2)
    4954:	11000083 	ldbu	r4,2(r2)
    4958:	2008923a 	slli	r4,r4,8
    495c:	20c6b03a 	or	r3,r4,r3
    4960:	110000c3 	ldbu	r4,3(r2)
    4964:	2008943a 	slli	r4,r4,16
    4968:	20c6b03a 	or	r3,r4,r3
    496c:	10800103 	ldbu	r2,4(r2)
    4970:	1004963a 	slli	r2,r2,24
    4974:	10c4b03a 	or	r2,r2,r3
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffe17 	ldw	r2,-8(fp)
    4980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	1000018d 	sth	zero,6(r2)
        };
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00104 	addi	sp,sp,4
    499c:	f800283a 	ret

000049a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49a0:	defffb04 	addi	sp,sp,-20
    49a4:	df000415 	stw	fp,16(sp)
    49a8:	df000404 	addi	fp,sp,16
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
    49b8:	3805883a 	mov	r2,r7
    49bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    49c0:	e0bffc17 	ldw	r2,-16(fp)
    49c4:	10800103 	ldbu	r2,4(r2)
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	10000326 	beq	r2,zero,49dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    49d0:	10800060 	cmpeqi	r2,r2,1
    49d4:	10000a1e 	bne	r2,zero,4a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    49d8:	00002906 	br	4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    49dc:	e0bffc17 	ldw	r2,-16(fp)
    49e0:	e0ffff0b 	ldhu	r3,-4(fp)
    49e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	10800103 	ldbu	r2,4(r2)
    49f0:	10800044 	addi	r2,r2,1
    49f4:	1007883a 	mov	r3,r2
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1080018b 	ldhu	r2,6(r2)
    4a08:	10bfffcc 	andi	r2,r2,65535
    4a0c:	10001626 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	1080000b 	ldhu	r2,0(r2)
    4a18:	10bfffcc 	andi	r2,r2,65535
    4a1c:	10001226 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1080018b 	ldhu	r2,6(r2)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c0018d 	sth	r3,6(r2)
    4a38:	e0bffd17 	ldw	r2,-12(fp)
    4a3c:	10800017 	ldw	r2,0(r2)
    4a40:	10c00044 	addi	r3,r2,1
    4a44:	e0bffd17 	ldw	r2,-12(fp)
    4a48:	10c00015 	stw	r3,0(r2)
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	1080000b 	ldhu	r2,0(r2)
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1007883a 	mov	r3,r2
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	10c0000d 	sth	r3,0(r2)
    4a64:	003fe606 	br	4a00 <__alt_data_end+0xfc004a00>

                                if(!countDown)
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	1080018b 	ldhu	r2,6(r2)
    4a70:	10bfffcc 	andi	r2,r2,65535
    4a74:	1000021e 	bne	r2,zero,4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080018b 	ldhu	r2,6(r2)
    4a88:	10bfffcc 	andi	r2,r2,65535
    4a8c:	1005003a 	cmpeq	r2,r2,zero
        };
    4a90:	e037883a 	mov	sp,fp
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00104 	addi	sp,sp,4
    4a9c:	f800283a 	ret

00004aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	df000415 	stw	fp,16(sp)
    4aa8:	df000404 	addi	fp,sp,16
    4aac:	e13ffc15 	stw	r4,-16(fp)
    4ab0:	2809883a 	mov	r4,r5
    4ab4:	3007883a 	mov	r3,r6
    4ab8:	3805883a 	mov	r2,r7
    4abc:	e13ffd05 	stb	r4,-12(fp)
    4ac0:	e0fffe05 	stb	r3,-8(fp)
    4ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ac8:	0005883a 	mov	r2,zero
        }
    4acc:	e037883a 	mov	sp,fp
    4ad0:	df000017 	ldw	fp,0(sp)
    4ad4:	dec00104 	addi	sp,sp,4
    4ad8:	f800283a 	ret

00004adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4adc:	defffb04 	addi	sp,sp,-20
    4ae0:	df000415 	stw	fp,16(sp)
    4ae4:	df000404 	addi	fp,sp,16
    4ae8:	e13ffc15 	stw	r4,-16(fp)
    4aec:	2809883a 	mov	r4,r5
    4af0:	3007883a 	mov	r3,r6
    4af4:	3805883a 	mov	r2,r7
    4af8:	e13ffd05 	stb	r4,-12(fp)
    4afc:	e0fffe05 	stb	r3,-8(fp)
    4b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b04:	0005883a 	mov	r2,zero
        }
    4b08:	e037883a 	mov	sp,fp
    4b0c:	df000017 	ldw	fp,0(sp)
    4b10:	dec00104 	addi	sp,sp,4
    4b14:	f800283a 	ret

00004b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b18:	defffe04 	addi	sp,sp,-8
    4b1c:	df000115 	stw	fp,4(sp)
    4b20:	df000104 	addi	fp,sp,4
    4b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b28:	0005883a 	mov	r2,zero
        }
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	df000115 	stw	fp,4(sp)
    4b44:	df000104 	addi	fp,sp,4
    4b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b4c:	0005883a 	mov	r2,zero
        }
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b70:	0005883a 	mov	r2,zero
        }
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	df000215 	stw	fp,8(sp)
    4b8c:	df000204 	addi	fp,sp,8
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	2805883a 	mov	r2,r5
    4b98:	e0bfff05 	stb	r2,-4(fp)
                return;
    4b9c:	0001883a 	nop
        } // Note used for hubs only!
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00104 	addi	sp,sp,4
    4bac:	f800283a 	ret

00004bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4bb0:	defffc04 	addi	sp,sp,-16
    4bb4:	df000315 	stw	fp,12(sp)
    4bb8:	df000304 	addi	fp,sp,12
    4bbc:	e13ffd15 	stw	r4,-12(fp)
    4bc0:	2807883a 	mov	r3,r5
    4bc4:	3005883a 	mov	r2,r6
    4bc8:	e0fffe0d 	sth	r3,-8(fp)
    4bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4bd0:	0005883a 	mov	r2,zero
        }
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	f800283a 	ret

00004be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4be4:	defffd04 	addi	sp,sp,-12
    4be8:	df000215 	stw	fp,8(sp)
    4bec:	df000204 	addi	fp,sp,8
    4bf0:	e13ffe15 	stw	r4,-8(fp)
    4bf4:	2805883a 	mov	r2,r5
    4bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4bfc:	0005883a 	mov	r2,zero
        }
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c10:	defffd04 	addi	sp,sp,-12
    4c14:	df000215 	stw	fp,8(sp)
    4c18:	df000204 	addi	fp,sp,8
    4c1c:	e13ffe15 	stw	r4,-8(fp)
    4c20:	2805883a 	mov	r2,r5
    4c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c28:	00800044 	movi	r2,1
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	df000315 	stw	fp,12(sp)
    4c44:	df000304 	addi	fp,sp,12
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4c50:	e03ffd05 	stb	zero,-12(fp)
    4c54:	e0bffd03 	ldbu	r2,-12(fp)
    4c58:	10800428 	cmpgeui	r2,r2,16
    4c5c:	1000161e 	bne	r2,zero,4cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4c60:	e0bffd03 	ldbu	r2,-12(fp)
    4c64:	e0fffe17 	ldw	r3,-8(fp)
    4c68:	10800784 	addi	r2,r2,30
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	10000a1e 	bne	r2,zero,4ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4c80:	e0bffd03 	ldbu	r2,-12(fp)
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	10800784 	addi	r2,r2,30
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1885883a 	add	r2,r3,r2
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00000506 	br	4cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffd05 	stb	r2,-12(fp)
    4cb4:	003fe706 	br	4c54 <__alt_data_end+0xfc004c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4cb8:	00bff4c4 	movi	r2,-45
        };
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00104 	addi	sp,sp,4
    4cc8:	f800283a 	ret

00004ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4ccc:	defffa04 	addi	sp,sp,-24
    4cd0:	df000515 	stw	fp,20(sp)
    4cd4:	df000504 	addi	fp,sp,20
    4cd8:	e13ffb15 	stw	r4,-20(fp)
    4cdc:	3009883a 	mov	r4,r6
    4ce0:	3807883a 	mov	r3,r7
    4ce4:	e0800117 	ldw	r2,4(fp)
    4ce8:	e17ffc05 	stb	r5,-16(fp)
    4cec:	e13ffd05 	stb	r4,-12(fp)
    4cf0:	e0fffe05 	stb	r3,-8(fp)
    4cf4:	e0bfff05 	stb	r2,-4(fp)
        };
    4cf8:	0001883a 	nop
    4cfc:	e037883a 	mov	sp,fp
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00104 	addi	sp,sp,4
    4d08:	f800283a 	ret

00004d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d0c:	defffe04 	addi	sp,sp,-8
    4d10:	df000115 	stw	fp,4(sp)
    4d14:	df000104 	addi	fp,sp,4
    4d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
        };
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800943 	ldbu	r2,37(r2)
        };
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	df000315 	stw	fp,12(sp)
    4d64:	df000304 	addi	fp,sp,12
    4d68:	e13ffd15 	stw	r4,-12(fp)
    4d6c:	2807883a 	mov	r3,r5
    4d70:	3005883a 	mov	r2,r6
    4d74:	e0fffe0d 	sth	r3,-8(fp)
    4d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4d7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4d80:	108117a0 	cmpeqi	r2,r2,1118
    4d84:	10000f1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d88:	e0bffe0b 	ldhu	r2,-8(fp)
    4d8c:	1081ce20 	cmpeqi	r2,r2,1848
    4d90:	10000c1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d94:	e0bffe0b 	ldhu	r2,-8(fp)
    4d98:	10839be0 	cmpeqi	r2,r2,3695
    4d9c:	1000091e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4da0:	e0bffe0b 	ldhu	r2,-8(fp)
    4da4:	1083c360 	cmpeqi	r2,r2,3853
    4da8:	1000061e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4dac:	e0bffe0b 	ldhu	r2,-8(fp)
    4db0:	10854ca0 	cmpeqi	r2,r2,5426
    4db4:	1000031e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4db8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dbc:	10893198 	cmpnei	r2,r2,9414
    4dc0:	10002c1e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4dc4:	e0bfff0b 	ldhu	r2,-4(fp)
    4dc8:	1080b460 	cmpeqi	r2,r2,721
    4dcc:	1000271e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    4dd4:	1080b760 	cmpeqi	r2,r2,733
    4dd8:	1000241e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ddc:	e0bfff0b 	ldhu	r2,-4(fp)
    4de0:	1080b8e0 	cmpeqi	r2,r2,739
    4de4:	1000211e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4de8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dec:	1080baa0 	cmpeqi	r2,r2,746
    4df0:	10001e1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4df4:	e0bfff0b 	ldhu	r2,-4(fp)
    4df8:	10928060 	cmpeqi	r2,r2,18945
    4dfc:	10001b1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e00:	e0bfff0b 	ldhu	r2,-4(fp)
    4e04:	10804e60 	cmpeqi	r2,r2,313
    4e08:	1000181e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e10:	108051a0 	cmpeqi	r2,r2,326
    4e14:	1000151e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	108019e0 	cmpeqi	r2,r2,103
    4e20:	1000121e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	108280e0 	cmpeqi	r2,r2,2563
    4e2c:	10000f1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	109506a0 	cmpeqi	r2,r2,21530
    4e38:	10000c1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	10950aa0 	cmpeqi	r2,r2,21546
    4e44:	1000091e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10950ea0 	cmpeqi	r2,r2,21562
    4e50:	1000061e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	1082c2a0 	cmpeqi	r2,r2,2826
    4e5c:	1000031e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	1082c498 	cmpnei	r2,r2,2834
    4e68:	1000021e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e6c:	00800044 	movi	r2,1
    4e70:	00000106 	br	4e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4e88:	defffe04 	addi	sp,sp,-8
    4e8c:	df000115 	stw	fp,4(sp)
    4e90:	df000104 	addi	fp,sp,4
    4e94:	e13fff15 	stw	r4,-4(fp)
    4e98:	008000b4 	movhi	r2,2
    4e9c:	10933004 	addi	r2,r2,19648
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	0001883a 	nop
    4eac:	e037883a 	mov	sp,fp
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00104 	addi	sp,sp,4
    4eb8:	f800283a 	ret

00004ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ebc:	defffe04 	addi	sp,sp,-8
    4ec0:	df000115 	stw	fp,4(sp)
    4ec4:	df000104 	addi	fp,sp,4
    4ec8:	e13fff15 	stw	r4,-4(fp)
    4ecc:	008000b4 	movhi	r2,2
    4ed0:	10932a04 	addi	r2,r2,19624
    4ed4:	e0ffff17 	ldw	r3,-4(fp)
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	0001883a 	nop
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	df000017 	ldw	fp,0(sp)
    4ee8:	dec00104 	addi	sp,sp,4
    4eec:	f800283a 	ret

00004ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4ef0:	defffe04 	addi	sp,sp,-8
    4ef4:	df000115 	stw	fp,4(sp)
    4ef8:	df000104 	addi	fp,sp,4
    4efc:	e13fff15 	stw	r4,-4(fp)
    4f00:	008000b4 	movhi	r2,2
    4f04:	10932d04 	addi	r2,r2,19636
    4f08:	e0ffff17 	ldw	r3,-4(fp)
    4f0c:	18800015 	stw	r2,0(r3)
    4f10:	0001883a 	nop
    4f14:	e037883a 	mov	sp,fp
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00104 	addi	sp,sp,4
    4f20:	f800283a 	ret

00004f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dfc00315 	stw	ra,12(sp)
    4f2c:	df000215 	stw	fp,8(sp)
    4f30:	df000204 	addi	fp,sp,8
    4f34:	e13ffe15 	stw	r4,-8(fp)
    4f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1009883a 	mov	r4,r2
    4f44:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    4f48:	008000b4 	movhi	r2,2
    4f4c:	10932704 	addi	r2,r2,19612
    4f50:	e0fffe17 	ldw	r3,-8(fp)
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	10c00115 	stw	r3,4(r2)
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	1009883a 	mov	r4,r2
    4f70:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	10800404 	addi	r2,r2,16
    4f7c:	1009883a 	mov	r4,r2
    4f80:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	10800604 	addi	r2,r2,24
    4f8c:	1009883a 	mov	r4,r2
    4f90:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10000c05 	stb	zero,48(r2)
    4f9c:	e0bffe17 	ldw	r2,-8(fp)
    4fa0:	10000c45 	stb	zero,49(r2)
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000c85 	stb	zero,50(r2)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	10c00804 	addi	r3,r2,32
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
    4fc0:	19803fcc 	andi	r6,r3,255
    4fc4:	11000243 	ldbu	r4,9(r2)
    4fc8:	2008703a 	and	r4,r4,zero
    4fcc:	200b883a 	mov	r5,r4
    4fd0:	3009883a 	mov	r4,r6
    4fd4:	2908b03a 	or	r4,r5,r4
    4fd8:	11000245 	stb	r4,9(r2)
    4fdc:	1808d23a 	srli	r4,r3,8
    4fe0:	21803fcc 	andi	r6,r4,255
    4fe4:	11000283 	ldbu	r4,10(r2)
    4fe8:	2008703a 	and	r4,r4,zero
    4fec:	200b883a 	mov	r5,r4
    4ff0:	3009883a 	mov	r4,r6
    4ff4:	2908b03a 	or	r4,r5,r4
    4ff8:	11000285 	stb	r4,10(r2)
    4ffc:	1808d43a 	srli	r4,r3,16
    5000:	21803fcc 	andi	r6,r4,255
    5004:	110002c3 	ldbu	r4,11(r2)
    5008:	2008703a 	and	r4,r4,zero
    500c:	200b883a 	mov	r5,r4
    5010:	3009883a 	mov	r4,r6
    5014:	2908b03a 	or	r4,r5,r4
    5018:	110002c5 	stb	r4,11(r2)
    501c:	180ad63a 	srli	r5,r3,24
    5020:	10c00303 	ldbu	r3,12(r2)
    5024:	1806703a 	and	r3,r3,zero
    5028:	1809883a 	mov	r4,r3
    502c:	2807883a 	mov	r3,r5
    5030:	20c6b03a 	or	r3,r4,r3
    5034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10c00404 	addi	r3,r2,16
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	100b883a 	mov	r5,r2
    504c:	1809883a 	mov	r4,r3
    5050:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10c00604 	addi	r3,r2,24
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800204 	addi	r2,r2,8
    5064:	100b883a 	mov	r5,r2
    5068:	1809883a 	mov	r4,r3
    506c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    5070:	0001883a 	nop
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5088:	defff804 	addi	sp,sp,-32
    508c:	dfc00715 	stw	ra,28(sp)
    5090:	df000615 	stw	fp,24(sp)
    5094:	df000604 	addi	fp,sp,24
    5098:	e13ffc15 	stw	r4,-16(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bffe15 	stw	r6,-8(fp)
    50a4:	e1ffff15 	stw	r7,-4(fp)
    50a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    50ac:	e0bffd0b 	ldhu	r2,-12(fp)
    50b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    50bc:	e0bffa0b 	ldhu	r2,-24(fp)
    50c0:	10bfffcc 	andi	r2,r2,65535
    50c4:	10000a26 	beq	r2,zero,50f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    50c8:	e0bffb04 	addi	r2,fp,-20
    50cc:	e1bffa04 	addi	r6,fp,-24
    50d0:	100b883a 	mov	r5,r2
    50d4:	e13ffc17 	ldw	r4,-16(fp)
    50d8:	00051040 	call	5104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    50dc:	1080005c 	xori	r2,r2,1
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	1000011e 	bne	r2,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    50e8:	003ff406 	br	50bc <__alt_data_end+0xfc0050bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret

00005104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5104:	defff604 	addi	sp,sp,-40
    5108:	dfc00915 	stw	ra,36(sp)
    510c:	df000815 	stw	fp,32(sp)
    5110:	df000804 	addi	fp,sp,32
    5114:	e13ffc15 	stw	r4,-16(fp)
    5118:	e17ffd15 	stw	r5,-12(fp)
    511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5120:	e0bffc17 	ldw	r2,-16(fp)
    5124:	10800804 	addi	r2,r2,32
    5128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	10800804 	addi	r2,r2,32
    5134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800c03 	ldbu	r2,48(r2)
    5140:	10803fcc 	andi	r2,r2,255
    5144:	10c00168 	cmpgeui	r3,r2,5
    5148:	1801141e 	bne	r3,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    514c:	100690ba 	slli	r3,r2,2
    5150:	00800034 	movhi	r2,0
    5154:	10945904 	addi	r2,r2,20836
    5158:	1885883a 	add	r2,r3,r2
    515c:	10800017 	ldw	r2,0(r2)
    5160:	1000683a 	jmp	r2
    5164:	00005178 	rdprs	zero,zero,325
    5168:	000051ac 	andhi	zero,zero,326
    516c:	00005234 	movhi	zero,328
    5170:	000052c8 	cmpgei	zero,zero,331
    5174:	00005334 	movhi	zero,332
                case 0:
                        theBuffer.valueSize = 2;
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	00c00084 	movi	r3,2
    5180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10c00404 	addi	r3,r2,16
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800204 	addi	r2,r2,8
    5194:	100b883a 	mov	r5,r2
    5198:	1809883a 	mov	r4,r3
    519c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    51ac:	e0bffc17 	ldw	r2,-16(fp)
    51b0:	10800404 	addi	r2,r2,16
    51b4:	e1bffe17 	ldw	r6,-8(fp)
    51b8:	e17ffd17 	ldw	r5,-12(fp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    51c4:	1080005c 	xori	r2,r2,1
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000226 	beq	r2,zero,51d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    51d0:	0005883a 	mov	r2,zero
    51d4:	0000f206 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	1806d23a 	srli	r3,r3,8
    51e4:	10800317 	ldw	r2,12(r2)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	1004963a 	slli	r2,r2,24
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	10c00003 	ldbu	r3,0(r2)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00217 	ldw	r3,8(r2)
    5208:	1806d23a 	srli	r3,r3,8
    520c:	10800317 	ldw	r2,12(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	1004963a 	slli	r2,r2,24
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	10c00043 	ldbu	r3,1(r2)
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5228:	e0bffc17 	ldw	r2,-16(fp)
    522c:	00c00084 	movi	r3,2
    5230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800804 	addi	r2,r2,32
    523c:	10c00084 	addi	r3,r2,2
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	19803fcc 	andi	r6,r3,255
    5248:	11000243 	ldbu	r4,9(r2)
    524c:	2008703a 	and	r4,r4,zero
    5250:	200b883a 	mov	r5,r4
    5254:	3009883a 	mov	r4,r6
    5258:	2908b03a 	or	r4,r5,r4
    525c:	11000245 	stb	r4,9(r2)
    5260:	1808d23a 	srli	r4,r3,8
    5264:	21803fcc 	andi	r6,r4,255
    5268:	11000283 	ldbu	r4,10(r2)
    526c:	2008703a 	and	r4,r4,zero
    5270:	200b883a 	mov	r5,r4
    5274:	3009883a 	mov	r4,r6
    5278:	2908b03a 	or	r4,r5,r4
    527c:	11000285 	stb	r4,10(r2)
    5280:	1808d43a 	srli	r4,r3,16
    5284:	21803fcc 	andi	r6,r4,255
    5288:	110002c3 	ldbu	r4,11(r2)
    528c:	2008703a 	and	r4,r4,zero
    5290:	200b883a 	mov	r5,r4
    5294:	3009883a 	mov	r4,r6
    5298:	2908b03a 	or	r4,r5,r4
    529c:	110002c5 	stb	r4,11(r2)
    52a0:	180ad63a 	srli	r5,r3,24
    52a4:	10c00303 	ldbu	r3,12(r2)
    52a8:	1806703a 	and	r3,r3,zero
    52ac:	1809883a 	mov	r4,r3
    52b0:	2807883a 	mov	r3,r5
    52b4:	20c6b03a 	or	r3,r4,r3
    52b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	00c000c4 	movi	r3,3
    52c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    52c8:	e0bffc17 	ldw	r2,-16(fp)
    52cc:	10800c83 	ldbu	r2,50(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	10c00120 	cmpeqi	r3,r2,4
    52d8:	1800021e 	bne	r3,zero,52e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    52dc:	10800148 	cmpgei	r2,r2,5
    52e0:	00000306 	br	52f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10000cc5 	stb	zero,51(r2)
                                        break;
    52ec:	00000106 	br	52f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    52f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10800c43 	ldbu	r2,49(r2)
    52fc:	10bfff84 	addi	r2,r2,-2
    5300:	1007883a 	mov	r3,r2
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00404 	addi	r3,r2,16
    5314:	e0bffc17 	ldw	r2,-16(fp)
    5318:	10800204 	addi	r2,r2,8
    531c:	100b883a 	mov	r5,r2
    5320:	1809883a 	mov	r4,r3
    5324:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5328:	e0bffc17 	ldw	r2,-16(fp)
    532c:	00c00104 	movi	r3,4
    5330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5334:	e0bffc17 	ldw	r2,-16(fp)
    5338:	10800c83 	ldbu	r2,50(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	10c00120 	cmpeqi	r3,r2,4
    5344:	1800141e 	bne	r3,zero,5398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5348:	10c00160 	cmpeqi	r3,r2,5
    534c:	1800311e 	bne	r3,zero,5414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5350:	108000a0 	cmpeqi	r2,r2,2
    5354:	10005a26 	beq	r2,zero,54c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10800404 	addi	r2,r2,16
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	e17ffd17 	ldw	r5,-12(fp)
    5368:	1009883a 	mov	r4,r2
    536c:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5370:	1080005c 	xori	r2,r2,1
    5374:	10803fcc 	andi	r2,r2,255
    5378:	10000226 	beq	r2,zero,5384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    537c:	0005883a 	mov	r2,zero
    5380:	00008706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10c00143 	ldbu	r3,5(r2)
    538c:	e0bffc17 	ldw	r2,-16(fp)
    5390:	10c00d05 	stb	r3,52(r2)
                                        break;
    5394:	00005e06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	10800404 	addi	r2,r2,16
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	e17ffd17 	ldw	r5,-12(fp)
    53a8:	1009883a 	mov	r4,r2
    53ac:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    53b0:	1080005c 	xori	r2,r2,1
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	10000226 	beq	r2,zero,53c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    53bc:	0005883a 	mov	r2,zero
    53c0:	00007706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800e03 	ldbu	r2,56(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10004c1e 	bne	r2,zero,5504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    53d4:	e0bffc17 	ldw	r2,-16(fp)
    53d8:	00c00044 	movi	r3,1
    53dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10c00083 	ldbu	r3,2(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    53f0:	e0bffb17 	ldw	r2,-20(fp)
    53f4:	10c000c3 	ldbu	r3,3(r2)
    53f8:	e0bffc17 	ldw	r2,-16(fp)
    53fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10c001c3 	ldbu	r3,7(r2)
    5408:	e0bffc17 	ldw	r2,-16(fp)
    540c:	10c00d45 	stb	r3,53(r2)
                                        break;
    5410:	00003f06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800404 	addi	r2,r2,16
    541c:	e1bffe17 	ldw	r6,-8(fp)
    5420:	e17ffd17 	ldw	r5,-12(fp)
    5424:	1009883a 	mov	r4,r2
    5428:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    542c:	1080005c 	xori	r2,r2,1
    5430:	10803fcc 	andi	r2,r2,255
    5434:	10000226 	beq	r2,zero,5440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5438:	0005883a 	mov	r2,zero
    543c:	00005806 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	10800cc3 	ldbu	r2,51(r2)
    5448:	10803fcc 	andi	r2,r2,255
    544c:	10002f26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800117 	ldw	r2,4(r2)
    5458:	10002c26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10800117 	ldw	r2,4(r2)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	e0fffc17 	ldw	r3,-16(fp)
    5470:	1a000117 	ldw	r8,4(r3)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	18c00d03 	ldbu	r3,52(r3)
    547c:	19403fcc 	andi	r5,r3,255
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	18c00d83 	ldbu	r3,54(r3)
    5488:	19803fcc 	andi	r6,r3,255
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	18c00dc3 	ldbu	r3,55(r3)
    5494:	19c03fcc 	andi	r7,r3,255
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	18c00d43 	ldbu	r3,53(r3)
    54a0:	18c03fcc 	andi	r3,r3,255
    54a4:	e13ffc17 	ldw	r4,-16(fp)
    54a8:	21000804 	addi	r4,r4,32
    54ac:	d9000115 	stw	r4,4(sp)
    54b0:	d8c00015 	stw	r3,0(sp)
    54b4:	4009883a 	mov	r4,r8
    54b8:	103ee83a 	callr	r2
                                        break;
    54bc:	00001306 	br	550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    54c0:	e0bffc17 	ldw	r2,-16(fp)
    54c4:	10c00604 	addi	r3,r2,24
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	10800c43 	ldbu	r2,49(r2)
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10bfff84 	addi	r2,r2,-2
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	100f883a 	mov	r7,r2
    54e0:	e1bffe17 	ldw	r6,-8(fp)
    54e4:	e17ffd17 	ldw	r5,-12(fp)
    54e8:	1809883a 	mov	r4,r3
    54ec:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    54f0:	1080005c 	xori	r2,r2,1
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000526 	beq	r2,zero,5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    54fc:	0005883a 	mov	r2,zero
    5500:	00002706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5504:	0001883a 	nop
    5508:	00000106 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	10c00804 	addi	r3,r2,32
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	19803fcc 	andi	r6,r3,255
    5520:	11000243 	ldbu	r4,9(r2)
    5524:	2008703a 	and	r4,r4,zero
    5528:	200b883a 	mov	r5,r4
    552c:	3009883a 	mov	r4,r6
    5530:	2908b03a 	or	r4,r5,r4
    5534:	11000245 	stb	r4,9(r2)
    5538:	1808d23a 	srli	r4,r3,8
    553c:	21803fcc 	andi	r6,r4,255
    5540:	11000283 	ldbu	r4,10(r2)
    5544:	2008703a 	and	r4,r4,zero
    5548:	200b883a 	mov	r5,r4
    554c:	3009883a 	mov	r4,r6
    5550:	2908b03a 	or	r4,r5,r4
    5554:	11000285 	stb	r4,10(r2)
    5558:	1808d43a 	srli	r4,r3,16
    555c:	21803fcc 	andi	r6,r4,255
    5560:	110002c3 	ldbu	r4,11(r2)
    5564:	2008703a 	and	r4,r4,zero
    5568:	200b883a 	mov	r5,r4
    556c:	3009883a 	mov	r4,r6
    5570:	2908b03a 	or	r4,r5,r4
    5574:	110002c5 	stb	r4,11(r2)
    5578:	180ad63a 	srli	r5,r3,24
    557c:	10c00303 	ldbu	r3,12(r2)
    5580:	1806703a 	and	r3,r3,zero
    5584:	1809883a 	mov	r4,r3
    5588:	2807883a 	mov	r3,r5
    558c:	20c6b03a 	or	r3,r4,r3
    5590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10000c05 	stb	zero,48(r2)
        }
        return true;
    559c:	00800044 	movi	r2,1
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <_Z8set_notehhh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
    55b4:	defffb04 	addi	sp,sp,-20
    55b8:	df000415 	stw	fp,16(sp)
    55bc:	df000404 	addi	fp,sp,16
    55c0:	2807883a 	mov	r3,r5
    55c4:	3005883a 	mov	r2,r6
    55c8:	e13ffd05 	stb	r4,-12(fp)
    55cc:	e0fffe05 	stb	r3,-8(fp)
    55d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(note > 0x7F) {
    55d4:	e0bffe03 	ldbu	r2,-8(fp)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	1080201c 	xori	r2,r2,128
    55e0:	10bfe004 	addi	r2,r2,-128
    55e4:	10001816 	blt	r2,zero,5648 <_Z8set_notehhh+0x94>
		return;
	}

	switch (channel) {
    55e8:	e0bffd03 	ldbu	r2,-12(fp)
    55ec:	10000126 	beq	r2,zero,55f4 <_Z8set_notehhh+0x40>
				set_val = 0x80 + vel;
			}
			synth->KEY[note] = set_val;
			break;
		default:
			break;
    55f0:	00001606 	br	564c <_Z8set_notehhh+0x98>
		return;
	}

	switch (channel) {
		case 0:
			if(vel == 0x00) {
    55f4:	e0bfff03 	ldbu	r2,-4(fp)
    55f8:	1000081e 	bne	r2,zero,561c <_Z8set_notehhh+0x68>
				set_val = synth->KEY[note];
    55fc:	d0e00d17 	ldw	r3,-32716(gp)
    5600:	e0bffe03 	ldbu	r2,-8(fp)
    5604:	1085883a 	add	r2,r2,r2
    5608:	1085883a 	add	r2,r2,r2
    560c:	1885883a 	add	r2,r3,r2
    5610:	10800017 	ldw	r2,0(r2)
    5614:	e0bffc15 	stw	r2,-16(fp)
    5618:	00000306 	br	5628 <_Z8set_notehhh+0x74>
			}
			else {
				set_val = 0x80 + vel;
    561c:	e0bfff03 	ldbu	r2,-4(fp)
    5620:	10802004 	addi	r2,r2,128
    5624:	e0bffc15 	stw	r2,-16(fp)
			}
			synth->KEY[note] = set_val;
    5628:	d0e00d17 	ldw	r3,-32716(gp)
    562c:	e0bffe03 	ldbu	r2,-8(fp)
    5630:	1085883a 	add	r2,r2,r2
    5634:	1085883a 	add	r2,r2,r2
    5638:	1885883a 	add	r2,r3,r2
    563c:	e0fffc17 	ldw	r3,-16(fp)
    5640:	10c00015 	stw	r3,0(r2)
			break;
    5644:	00000106 	br	564c <_Z8set_notehhh+0x98>

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
	alt_u32 set_val;

	if(note > 0x7F) {
		return;
    5648:	0001883a 	nop
			synth->KEY[note] = set_val;
			break;
		default:
			break;
	}
}
    564c:	e037883a 	mov	sp,fp
    5650:	df000017 	ldw	fp,0(sp)
    5654:	dec00104 	addi	sp,sp,4
    5658:	f800283a 	ret

0000565c <_Z8set_ctrlhhm>:

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
    565c:	defffc04 	addi	sp,sp,-16
    5660:	df000315 	stw	fp,12(sp)
    5664:	df000304 	addi	fp,sp,12
    5668:	2007883a 	mov	r3,r4
    566c:	2805883a 	mov	r2,r5
    5670:	e1bfff15 	stw	r6,-4(fp)
    5674:	e0fffd05 	stb	r3,-12(fp)
    5678:	e0bffe05 	stb	r2,-8(fp)
	switch (channel) {
    567c:	e0bffd03 	ldbu	r2,-12(fp)
    5680:	10000126 	beq	r2,zero,5688 <_Z8set_ctrlhhm+0x2c>
		case 0:
			synth->CTRL[par] = val;
			break;
		default:
			break;
    5684:	00000906 	br	56ac <_Z8set_ctrlhhm+0x50>
}

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
	switch (channel) {
		case 0:
			synth->CTRL[par] = val;
    5688:	d0e00d17 	ldw	r3,-32716(gp)
    568c:	e0bffe03 	ldbu	r2,-8(fp)
    5690:	10802004 	addi	r2,r2,128
    5694:	1085883a 	add	r2,r2,r2
    5698:	1085883a 	add	r2,r2,r2
    569c:	1885883a 	add	r2,r3,r2
    56a0:	e0ffff17 	ldw	r3,-4(fp)
    56a4:	10c00015 	stw	r3,0(r2)
			break;
    56a8:	0001883a 	nop
		default:
			break;
	}
}
    56ac:	0001883a 	nop
    56b0:	e037883a 	mov	sp,fp
    56b4:	df000017 	ldw	fp,0(sp)
    56b8:	dec00104 	addi	sp,sp,4
    56bc:	f800283a 	ret

000056c0 <_Z9calc_adsrttttttttff>:

void calc_adsr(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
    56c0:	deffe904 	addi	sp,sp,-92
    56c4:	dfc01615 	stw	ra,88(sp)
    56c8:	df001515 	stw	fp,84(sp)
    56cc:	df001504 	addi	fp,sp,84
    56d0:	2015883a 	mov	r10,r4
    56d4:	2813883a 	mov	r9,r5
    56d8:	3011883a 	mov	r8,r6
    56dc:	380d883a 	mov	r6,r7
    56e0:	e1400217 	ldw	r5,8(fp)
    56e4:	e1000317 	ldw	r4,12(fp)
    56e8:	e0c00417 	ldw	r3,16(fp)
    56ec:	e0800517 	ldw	r2,20(fp)
    56f0:	e2bff80d 	sth	r10,-32(fp)
    56f4:	e27ff90d 	sth	r9,-28(fp)
    56f8:	e23ffa0d 	sth	r8,-24(fp)
    56fc:	e1bffb0d 	sth	r6,-20(fp)
    5700:	e17ffc0d 	sth	r5,-16(fp)
    5704:	e13ffd0d 	sth	r4,-12(fp)
    5708:	e0fffe0d 	sth	r3,-8(fp)
    570c:	e0bfff0d 	sth	r2,-4(fp)

	alt_u16 att_m_seconds = att_h + att_l;
    5710:	e0fff80b 	ldhu	r3,-32(fp)
    5714:	e0bff90b 	ldhu	r2,-28(fp)
    5718:	1885883a 	add	r2,r3,r2
    571c:	e0bff10d 	sth	r2,-60(fp)
	alt_u16 dec_m_seconds = dec_h + dec_l;
    5720:	e0fffa0b 	ldhu	r3,-24(fp)
    5724:	e0bffb0b 	ldhu	r2,-20(fp)
    5728:	1885883a 	add	r2,r3,r2
    572c:	e0bff18d 	sth	r2,-58(fp)
	alt_u16 sus_m_seconds = sus_h + sus_l;
    5730:	e0fffc0b 	ldhu	r3,-16(fp)
    5734:	e0bffd0b 	ldhu	r2,-12(fp)
    5738:	1885883a 	add	r2,r3,r2
    573c:	e0bff20d 	sth	r2,-56(fp)
	alt_u16 rel_m_seconds = rel_h + rel_l;
    5740:	e0fffe0b 	ldhu	r3,-8(fp)
    5744:	e0bfff0b 	ldhu	r2,-4(fp)
    5748:	1885883a 	add	r2,r3,r2
    574c:	e0bff28d 	sth	r2,-54(fp)
	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	float p_att = peak_att + peak_sus;
    5750:	e1400717 	ldw	r5,28(fp)
    5754:	e1000617 	ldw	r4,24(fp)
    5758:	000d8fc0 	call	d8fc <__addsf3>
    575c:	1007883a 	mov	r3,r2
    5760:	e0fff015 	stw	r3,-64(fp)

	if (p_att > 2) p_att = 2;
    5764:	01500034 	movhi	r5,16384
    5768:	e13ff017 	ldw	r4,-64(fp)
    576c:	000e2040 	call	e204 <__gesf2>
    5770:	0080020e 	bge	zero,r2,577c <_Z9calc_adsrttttttttff+0xbc>
    5774:	00900034 	movhi	r2,16384
    5778:	e0bff015 	stw	r2,-64(fp)

	if (att_m_seconds > 5000) {
    577c:	e0bff10b 	ldhu	r2,-60(fp)
    5780:	1084e270 	cmpltui	r2,r2,5001
    5784:	10008526 	beq	r2,zero,599c <_Z9calc_adsrttttttttff+0x2dc>
		//printf("ERROR: Requested attack length is too long.\n");
		return;
	}
	if (dec_m_seconds > 5000) {
    5788:	e0bff18b 	ldhu	r2,-58(fp)
    578c:	1084e270 	cmpltui	r2,r2,5001
    5790:	10008426 	beq	r2,zero,59a4 <_Z9calc_adsrttttttttff+0x2e4>
		//printf("ERROR: Requested decay length is too long.\n");
		return;
	}
	if (sus_m_seconds > 20000) {
    5794:	e0bff20b 	ldhu	r2,-56(fp)
    5798:	10938870 	cmpltui	r2,r2,20001
    579c:	10008326 	beq	r2,zero,59ac <_Z9calc_adsrttttttttff+0x2ec>
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
	}
	if (sus_m_seconds < rel_m_seconds) {
    57a0:	e0fff20b 	ldhu	r3,-56(fp)
    57a4:	e0bff28b 	ldhu	r2,-54(fp)
    57a8:	18808236 	bltu	r3,r2,59b4 <_Z9calc_adsrttttttttff+0x2f4>
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
	}
	if (rel_m_seconds > 10000) {
    57ac:	e0bff28b 	ldhu	r2,-54(fp)
    57b0:	1089c470 	cmpltui	r2,r2,10001
    57b4:	10008126 	beq	r2,zero,59bc <_Z9calc_adsrttttttttff+0x2fc>
		//printf("ERROR: Requested release length is too long.\n");
		return;
	}

	PEAK_ATT = p_att * (alt_u32) 0x80000;
    57b8:	01524034 	movhi	r5,18688
    57bc:	e13ff017 	ldw	r4,-64(fp)
    57c0:	000e2c00 	call	e2c0 <__mulsf3>
    57c4:	1007883a 	mov	r3,r2
    57c8:	1805883a 	mov	r2,r3
    57cc:	1009883a 	mov	r4,r2
    57d0:	000d6c00 	call	d6c0 <__fixunssfsi>
    57d4:	e0bfeb15 	stw	r2,-84(fp)
	if(peak_att + peak_sus >= 2) PEAK_ATT = 0xFFFFF;
    57d8:	e1400717 	ldw	r5,28(fp)
    57dc:	e1000617 	ldw	r4,24(fp)
    57e0:	000d8fc0 	call	d8fc <__addsf3>
    57e4:	1007883a 	mov	r3,r2
    57e8:	1805883a 	mov	r2,r3
    57ec:	01500034 	movhi	r5,16384
    57f0:	1009883a 	mov	r4,r2
    57f4:	000e2040 	call	e204 <__gesf2>
    57f8:	10000316 	blt	r2,zero,5808 <_Z9calc_adsrttttttttff+0x148>
    57fc:	00800434 	movhi	r2,16
    5800:	10bfffc4 	addi	r2,r2,-1
    5804:	e0bfeb15 	stw	r2,-84(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
    5808:	01524034 	movhi	r5,18688
    580c:	e1000717 	ldw	r4,28(fp)
    5810:	000e2c00 	call	e2c0 <__mulsf3>
    5814:	1007883a 	mov	r3,r2
    5818:	1805883a 	mov	r2,r3
    581c:	1009883a 	mov	r4,r2
    5820:	000d6c00 	call	d6c0 <__fixunssfsi>
    5824:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5828:	e0bff10b 	ldhu	r2,-60(fp)
    582c:	016b1114 	movui	r5,44100
    5830:	1009883a 	mov	r4,r2
    5834:	000d8d40 	call	d8d4 <__mulsi3>
    5838:	0140fa04 	movi	r5,1000
    583c:	1009883a 	mov	r4,r2
    5840:	000d7200 	call	d720 <__divsi3>
    5844:	e0bfec15 	stw	r2,-80(fp)
	if(!ATT_LEN) ATT_LEN = 1;
    5848:	e0bfec17 	ldw	r2,-80(fp)
    584c:	1000021e 	bne	r2,zero,5858 <_Z9calc_adsrttttttttff+0x198>
    5850:	00800044 	movi	r2,1
    5854:	e0bfec15 	stw	r2,-80(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
    5858:	e17fec17 	ldw	r5,-80(fp)
    585c:	e13feb17 	ldw	r4,-84(fp)
    5860:	000d8180 	call	d818 <__udivsi3>
    5864:	e0bff415 	stw	r2,-48(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    5868:	e0bff18b 	ldhu	r2,-58(fp)
    586c:	016b1114 	movui	r5,44100
    5870:	1009883a 	mov	r4,r2
    5874:	000d8d40 	call	d8d4 <__mulsi3>
    5878:	0140fa04 	movi	r5,1000
    587c:	1009883a 	mov	r4,r2
    5880:	000d7200 	call	d720 <__divsi3>
    5884:	e0bfed15 	stw	r2,-76(fp)
	if(!DEC_LEN) DEC_LEN = 1;
    5888:	e0bfed17 	ldw	r2,-76(fp)
    588c:	1000021e 	bne	r2,zero,5898 <_Z9calc_adsrttttttttff+0x1d8>
    5890:	00800044 	movi	r2,1
    5894:	e0bfed15 	stw	r2,-76(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
    5898:	e0ffeb17 	ldw	r3,-84(fp)
    589c:	e0bff317 	ldw	r2,-52(fp)
    58a0:	1885c83a 	sub	r2,r3,r2
    58a4:	e17fed17 	ldw	r5,-76(fp)
    58a8:	1009883a 	mov	r4,r2
    58ac:	000d8180 	call	d818 <__udivsi3>
    58b0:	e0bff515 	stw	r2,-44(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
    58b4:	e0bff20b 	ldhu	r2,-56(fp)
    58b8:	016b1114 	movui	r5,44100
    58bc:	1009883a 	mov	r4,r2
    58c0:	000d8d40 	call	d8d4 <__mulsi3>
    58c4:	0140fa04 	movi	r5,1000
    58c8:	1009883a 	mov	r4,r2
    58cc:	000d7200 	call	d720 <__divsi3>
    58d0:	e0bfee15 	stw	r2,-72(fp)
	if(!SUS_LEN) SUS_LEN = 1;
    58d4:	e0bfee17 	ldw	r2,-72(fp)
    58d8:	1000021e 	bne	r2,zero,58e4 <_Z9calc_adsrttttttttff+0x224>
    58dc:	00800044 	movi	r2,1
    58e0:	e0bfee15 	stw	r2,-72(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
    58e4:	e17fee17 	ldw	r5,-72(fp)
    58e8:	e13ff317 	ldw	r4,-52(fp)
    58ec:	000d8180 	call	d818 <__udivsi3>
    58f0:	e0bff615 	stw	r2,-40(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
    58f4:	e0bff28b 	ldhu	r2,-54(fp)
    58f8:	016b1114 	movui	r5,44100
    58fc:	1009883a 	mov	r4,r2
    5900:	000d8d40 	call	d8d4 <__mulsi3>
    5904:	0140fa04 	movi	r5,1000
    5908:	1009883a 	mov	r4,r2
    590c:	000d7200 	call	d720 <__divsi3>
    5910:	e0bfef15 	stw	r2,-68(fp)
	if(!REL_LEN) REL_LEN = 1;
    5914:	e0bfef17 	ldw	r2,-68(fp)
    5918:	1000021e 	bne	r2,zero,5924 <_Z9calc_adsrttttttttff+0x264>
    591c:	00800044 	movi	r2,1
    5920:	e0bfef15 	stw	r2,-68(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
    5924:	e17fef17 	ldw	r5,-68(fp)
    5928:	e13ff317 	ldw	r4,-52(fp)
    592c:	000d8180 	call	d818 <__udivsi3>
    5930:	e0bff715 	stw	r2,-36(fp)

	set_ctrl(0, PEAK_A, PEAK_ATT);
    5934:	e1bfeb17 	ldw	r6,-84(fp)
    5938:	000b883a 	mov	r5,zero
    593c:	0009883a 	mov	r4,zero
    5940:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, ATT_S, ATT_STEP);
    5944:	e1bff417 	ldw	r6,-48(fp)
    5948:	01400044 	movi	r5,1
    594c:	0009883a 	mov	r4,zero
    5950:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, DEC_S, DEC_STEP);
    5954:	e1bff517 	ldw	r6,-44(fp)
    5958:	01400084 	movi	r5,2
    595c:	0009883a 	mov	r4,zero
    5960:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, PEAK_S, PEAK_SUS);
    5964:	e1bff317 	ldw	r6,-52(fp)
    5968:	014000c4 	movi	r5,3
    596c:	0009883a 	mov	r4,zero
    5970:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, SUS_S, SUS_STEP);
    5974:	e1bff617 	ldw	r6,-40(fp)
    5978:	01400104 	movi	r5,4
    597c:	0009883a 	mov	r4,zero
    5980:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, REL_S, REL_STEP);
    5984:	e1bff717 	ldw	r6,-36(fp)
    5988:	01400144 	movi	r5,5
    598c:	0009883a 	mov	r4,zero
    5990:	000565c0 	call	565c <_Z8set_ctrlhhm>
	return;
    5994:	0001883a 	nop
    5998:	00000906 	br	59c0 <_Z9calc_adsrttttttttff+0x300>

	if (p_att > 2) p_att = 2;

	if (att_m_seconds > 5000) {
		//printf("ERROR: Requested attack length is too long.\n");
		return;
    599c:	0001883a 	nop
    59a0:	00000706 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (dec_m_seconds > 5000) {
		//printf("ERROR: Requested decay length is too long.\n");
		return;
    59a4:	0001883a 	nop
    59a8:	00000506 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds > 20000) {
		//printf("ERROR: Requested sustain length is too long.\n");
		return;
    59ac:	0001883a 	nop
    59b0:	00000306 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (sus_m_seconds < rel_m_seconds) {
		//printf("ERROR: Requested sustain length must be longer than release length.\n");
		return;
    59b4:	0001883a 	nop
    59b8:	00000106 	br	59c0 <_Z9calc_adsrttttttttff+0x300>
	}
	if (rel_m_seconds > 10000) {
		//printf("ERROR: Requested release length is too long.\n");
		return;
    59bc:	0001883a 	nop
	set_ctrl(0, DEC_S, DEC_STEP);
	set_ctrl(0, PEAK_S, PEAK_SUS);
	set_ctrl(0, SUS_S, SUS_STEP);
	set_ctrl(0, REL_S, REL_STEP);
	return;
}
    59c0:	e037883a 	mov	sp,fp
    59c4:	dfc00117 	ldw	ra,4(sp)
    59c8:	df000017 	ldw	fp,0(sp)
    59cc:	dec00204 	addi	sp,sp,8
    59d0:	f800283a 	ret

000059d4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    59d4:	defff904 	addi	sp,sp,-28
    59d8:	dfc00615 	stw	ra,24(sp)
    59dc:	df000515 	stw	fp,20(sp)
    59e0:	df000504 	addi	fp,sp,20
    59e4:	e13ffc15 	stw	r4,-16(fp)
    59e8:	e17ffd15 	stw	r5,-12(fp)
    59ec:	3007883a 	mov	r3,r6
    59f0:	3805883a 	mov	r2,r7
    59f4:	e0fffe05 	stb	r3,-8(fp)
    59f8:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    59fc:	e0800217 	ldw	r2,8(fp)
    5a00:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5a04:	e0bffc17 	ldw	r2,-16(fp)
    5a08:	10800117 	ldw	r2,4(r2)
    5a0c:	1080004c 	andi	r2,r2,1
    5a10:	1007883a 	mov	r3,r2
    5a14:	e0bffb17 	ldw	r2,-20(fp)
    5a18:	10800003 	ldbu	r2,0(r2)
    5a1c:	1080004c 	andi	r2,r2,1
    5a20:	18c03fcc 	andi	r3,r3,255
    5a24:	10803fcc 	andi	r2,r2,255
    5a28:	18801426 	beq	r3,r2,5a7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5a2c:	e0bffb17 	ldw	r2,-20(fp)
    5a30:	10800003 	ldbu	r2,0(r2)
    5a34:	1080004c 	andi	r2,r2,1
    5a38:	10803fcc 	andi	r2,r2,255
    5a3c:	10000826 	beq	r2,zero,5a60 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5a40:	e0bffc17 	ldw	r2,-16(fp)
    5a44:	10800017 	ldw	r2,0(r2)
    5a48:	10800304 	addi	r2,r2,12
    5a4c:	10800017 	ldw	r2,0(r2)
    5a50:	e17ffb17 	ldw	r5,-20(fp)
    5a54:	e13ffc17 	ldw	r4,-16(fp)
    5a58:	103ee83a 	callr	r2
    5a5c:	00000706 	br	5a7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5a60:	e0bffc17 	ldw	r2,-16(fp)
    5a64:	10800017 	ldw	r2,0(r2)
    5a68:	10800204 	addi	r2,r2,8
    5a6c:	10800017 	ldw	r2,0(r2)
    5a70:	e17ffb17 	ldw	r5,-20(fp)
    5a74:	e13ffc17 	ldw	r4,-16(fp)
    5a78:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5a7c:	e0bffc17 	ldw	r2,-16(fp)
    5a80:	10800117 	ldw	r2,4(r2)
    5a84:	1004d07a 	srli	r2,r2,1
    5a88:	1080004c 	andi	r2,r2,1
    5a8c:	1007883a 	mov	r3,r2
    5a90:	e0bffb17 	ldw	r2,-20(fp)
    5a94:	10800003 	ldbu	r2,0(r2)
    5a98:	1004d07a 	srli	r2,r2,1
    5a9c:	1080004c 	andi	r2,r2,1
    5aa0:	18c03fcc 	andi	r3,r3,255
    5aa4:	10803fcc 	andi	r2,r2,255
    5aa8:	18801426 	beq	r3,r2,5afc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5aac:	e0bffb17 	ldw	r2,-20(fp)
    5ab0:	10800003 	ldbu	r2,0(r2)
    5ab4:	1080008c 	andi	r2,r2,2
    5ab8:	10803fcc 	andi	r2,r2,255
    5abc:	10000826 	beq	r2,zero,5ae0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5ac0:	e0bffc17 	ldw	r2,-16(fp)
    5ac4:	10800017 	ldw	r2,0(r2)
    5ac8:	10800504 	addi	r2,r2,20
    5acc:	10800017 	ldw	r2,0(r2)
    5ad0:	e17ffb17 	ldw	r5,-20(fp)
    5ad4:	e13ffc17 	ldw	r4,-16(fp)
    5ad8:	103ee83a 	callr	r2
    5adc:	00000706 	br	5afc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5ae0:	e0bffc17 	ldw	r2,-16(fp)
    5ae4:	10800017 	ldw	r2,0(r2)
    5ae8:	10800404 	addi	r2,r2,16
    5aec:	10800017 	ldw	r2,0(r2)
    5af0:	e17ffb17 	ldw	r5,-20(fp)
    5af4:	e13ffc17 	ldw	r4,-16(fp)
    5af8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5afc:	e0bffc17 	ldw	r2,-16(fp)
    5b00:	10800117 	ldw	r2,4(r2)
    5b04:	1004d0ba 	srli	r2,r2,2
    5b08:	1080004c 	andi	r2,r2,1
    5b0c:	1007883a 	mov	r3,r2
    5b10:	e0bffb17 	ldw	r2,-20(fp)
    5b14:	10800003 	ldbu	r2,0(r2)
    5b18:	1004d0ba 	srli	r2,r2,2
    5b1c:	1080004c 	andi	r2,r2,1
    5b20:	18c03fcc 	andi	r3,r3,255
    5b24:	10803fcc 	andi	r2,r2,255
    5b28:	18801426 	beq	r3,r2,5b7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5b2c:	e0bffb17 	ldw	r2,-20(fp)
    5b30:	10800003 	ldbu	r2,0(r2)
    5b34:	1080010c 	andi	r2,r2,4
    5b38:	10803fcc 	andi	r2,r2,255
    5b3c:	10000826 	beq	r2,zero,5b60 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5b40:	e0bffc17 	ldw	r2,-16(fp)
    5b44:	10800017 	ldw	r2,0(r2)
    5b48:	10800704 	addi	r2,r2,28
    5b4c:	10800017 	ldw	r2,0(r2)
    5b50:	e17ffb17 	ldw	r5,-20(fp)
    5b54:	e13ffc17 	ldw	r4,-16(fp)
    5b58:	103ee83a 	callr	r2
    5b5c:	00000706 	br	5b7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5b60:	e0bffc17 	ldw	r2,-16(fp)
    5b64:	10800017 	ldw	r2,0(r2)
    5b68:	10800604 	addi	r2,r2,24
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	e17ffb17 	ldw	r5,-20(fp)
    5b74:	e13ffc17 	ldw	r4,-16(fp)
    5b78:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5b7c:	e0bffb17 	ldw	r2,-20(fp)
    5b80:	10800043 	ldbu	r2,1(r2)
    5b84:	10803fcc 	andi	r2,r2,255
    5b88:	1080201c 	xori	r2,r2,128
    5b8c:	10bfe004 	addi	r2,r2,-128
    5b90:	1000061e 	bne	r2,zero,5bac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5b94:	e0bffb17 	ldw	r2,-20(fp)
    5b98:	10800083 	ldbu	r2,2(r2)
    5b9c:	10803fcc 	andi	r2,r2,255
    5ba0:	1080201c 	xori	r2,r2,128
    5ba4:	10bfe004 	addi	r2,r2,-128
    5ba8:	10000726 	beq	r2,zero,5bc8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5bac:	e0bffc17 	ldw	r2,-16(fp)
    5bb0:	10800017 	ldw	r2,0(r2)
    5bb4:	10800104 	addi	r2,r2,4
    5bb8:	10800017 	ldw	r2,0(r2)
    5bbc:	e17ffb17 	ldw	r5,-20(fp)
    5bc0:	e13ffc17 	ldw	r4,-16(fp)
    5bc4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5bc8:	e0800217 	ldw	r2,8(fp)
    5bcc:	10c00003 	ldbu	r3,0(r2)
    5bd0:	e0bffc17 	ldw	r2,-16(fp)
    5bd4:	10c00105 	stb	r3,4(r2)
#endif

};
    5bd8:	0001883a 	nop
    5bdc:	e037883a 	mov	sp,fp
    5be0:	dfc00117 	ldw	ra,4(sp)
    5be4:	df000017 	ldw	fp,0(sp)
    5be8:	dec00204 	addi	sp,sp,8
    5bec:	f800283a 	ret

00005bf0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5bf0:	defff804 	addi	sp,sp,-32
    5bf4:	dfc00715 	stw	ra,28(sp)
    5bf8:	df000615 	stw	fp,24(sp)
    5bfc:	df000604 	addi	fp,sp,24
    5c00:	e13ffc15 	stw	r4,-16(fp)
    5c04:	e17ffd15 	stw	r5,-12(fp)
    5c08:	3007883a 	mov	r3,r6
    5c0c:	3805883a 	mov	r2,r7
    5c10:	e0fffe05 	stb	r3,-8(fp)
    5c14:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5c18:	e0800217 	ldw	r2,8(fp)
    5c1c:	10800084 	addi	r2,r2,2
    5c20:	10800003 	ldbu	r2,0(r2)
    5c24:	10803fcc 	andi	r2,r2,255
    5c28:	10800058 	cmpnei	r2,r2,1
    5c2c:	10009926 	beq	r2,zero,5e94 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5c30:	e0bffc17 	ldw	r2,-16(fp)
    5c34:	10c00103 	ldbu	r3,4(r2)
    5c38:	e0800217 	ldw	r2,8(fp)
    5c3c:	10800003 	ldbu	r2,0(r2)
    5c40:	18c03fcc 	andi	r3,r3,255
    5c44:	10803fcc 	andi	r2,r2,255
    5c48:	18800e26 	beq	r3,r2,5c84 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5c4c:	e0bffc17 	ldw	r2,-16(fp)
    5c50:	10800017 	ldw	r2,0(r2)
    5c54:	10800204 	addi	r2,r2,8
    5c58:	10800017 	ldw	r2,0(r2)
    5c5c:	e0fffc17 	ldw	r3,-16(fp)
    5c60:	18c00103 	ldbu	r3,4(r3)
    5c64:	19003fcc 	andi	r4,r3,255
    5c68:	e0c00217 	ldw	r3,8(fp)
    5c6c:	18c00003 	ldbu	r3,0(r3)
    5c70:	18c03fcc 	andi	r3,r3,255
    5c74:	180d883a 	mov	r6,r3
    5c78:	200b883a 	mov	r5,r4
    5c7c:	e13ffc17 	ldw	r4,-16(fp)
    5c80:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5c84:	00800084 	movi	r2,2
    5c88:	e0bffa05 	stb	r2,-24(fp)
    5c8c:	e0bffa03 	ldbu	r2,-24(fp)
    5c90:	10800228 	cmpgeui	r2,r2,8
    5c94:	10006e1e 	bne	r2,zero,5e50 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5c98:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5c9c:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5ca0:	00800084 	movi	r2,2
    5ca4:	e0bffac5 	stb	r2,-21(fp)
    5ca8:	e0bffac3 	ldbu	r2,-21(fp)
    5cac:	10800228 	cmpgeui	r2,r2,8
    5cb0:	10002f1e 	bne	r2,zero,5d70 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5cb4:	e0bffa03 	ldbu	r2,-24(fp)
    5cb8:	e0c00217 	ldw	r3,8(fp)
    5cbc:	1885883a 	add	r2,r3,r2
    5cc0:	11000003 	ldbu	r4,0(r2)
    5cc4:	e0bffac3 	ldbu	r2,-21(fp)
    5cc8:	e0fffc17 	ldw	r3,-16(fp)
    5ccc:	1885883a 	add	r2,r3,r2
    5cd0:	10800104 	addi	r2,r2,4
    5cd4:	10800003 	ldbu	r2,0(r2)
    5cd8:	20c03fcc 	andi	r3,r4,255
    5cdc:	10803fcc 	andi	r2,r2,255
    5ce0:	1880091e 	bne	r3,r2,5d08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5ce4:	e0bffa03 	ldbu	r2,-24(fp)
    5ce8:	e0c00217 	ldw	r3,8(fp)
    5cec:	1885883a 	add	r2,r3,r2
    5cf0:	10800003 	ldbu	r2,0(r2)
    5cf4:	10803fcc 	andi	r2,r2,255
    5cf8:	10800060 	cmpeqi	r2,r2,1
    5cfc:	1000021e 	bne	r2,zero,5d08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5d00:	00800044 	movi	r2,1
    5d04:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5d08:	e0bffac3 	ldbu	r2,-21(fp)
    5d0c:	e0c00217 	ldw	r3,8(fp)
    5d10:	1885883a 	add	r2,r3,r2
    5d14:	11000003 	ldbu	r4,0(r2)
    5d18:	e0bffa03 	ldbu	r2,-24(fp)
    5d1c:	e0fffc17 	ldw	r3,-16(fp)
    5d20:	1885883a 	add	r2,r3,r2
    5d24:	10800104 	addi	r2,r2,4
    5d28:	10800003 	ldbu	r2,0(r2)
    5d2c:	20c03fcc 	andi	r3,r4,255
    5d30:	10803fcc 	andi	r2,r2,255
    5d34:	18800a1e 	bne	r3,r2,5d60 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5d38:	e0bffa03 	ldbu	r2,-24(fp)
    5d3c:	e0fffc17 	ldw	r3,-16(fp)
    5d40:	1885883a 	add	r2,r3,r2
    5d44:	10800104 	addi	r2,r2,4
    5d48:	10800003 	ldbu	r2,0(r2)
    5d4c:	10803fcc 	andi	r2,r2,255
    5d50:	10800060 	cmpeqi	r2,r2,1
    5d54:	1000021e 	bne	r2,zero,5d60 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5d58:	00800044 	movi	r2,1
    5d5c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5d60:	e0bffac3 	ldbu	r2,-21(fp)
    5d64:	10800044 	addi	r2,r2,1
    5d68:	e0bffac5 	stb	r2,-21(fp)
    5d6c:	003fce06 	br	5ca8 <__alt_data_end+0xfc005ca8>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5d70:	e0bffa43 	ldbu	r2,-23(fp)
    5d74:	1080005c 	xori	r2,r2,1
    5d78:	10803fcc 	andi	r2,r2,255
    5d7c:	10001c26 	beq	r2,zero,5df0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5d80:	e0bffc17 	ldw	r2,-16(fp)
    5d84:	10800017 	ldw	r2,0(r2)
    5d88:	10800104 	addi	r2,r2,4
    5d8c:	10800017 	ldw	r2,0(r2)
    5d90:	e0fffa03 	ldbu	r3,-24(fp)
    5d94:	e1000217 	ldw	r4,8(fp)
    5d98:	20c7883a 	add	r3,r4,r3
    5d9c:	18c00003 	ldbu	r3,0(r3)
    5da0:	18c03fcc 	andi	r3,r3,255
    5da4:	180d883a 	mov	r6,r3
    5da8:	e17ffd17 	ldw	r5,-12(fp)
    5dac:	e13ffc17 	ldw	r4,-16(fp)
    5db0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5db4:	e0bffc17 	ldw	r2,-16(fp)
    5db8:	10800017 	ldw	r2,0(r2)
    5dbc:	10800304 	addi	r2,r2,12
    5dc0:	10800017 	ldw	r2,0(r2)
    5dc4:	e0c00217 	ldw	r3,8(fp)
    5dc8:	18c00003 	ldbu	r3,0(r3)
    5dcc:	19403fcc 	andi	r5,r3,255
    5dd0:	e0fffa03 	ldbu	r3,-24(fp)
    5dd4:	e1000217 	ldw	r4,8(fp)
    5dd8:	20c7883a 	add	r3,r4,r3
    5ddc:	18c00003 	ldbu	r3,0(r3)
    5de0:	18c03fcc 	andi	r3,r3,255
    5de4:	180d883a 	mov	r6,r3
    5de8:	e13ffc17 	ldw	r4,-16(fp)
    5dec:	103ee83a 	callr	r2
                }
                if (!up)
    5df0:	e0bffa83 	ldbu	r2,-22(fp)
    5df4:	1080005c 	xori	r2,r2,1
    5df8:	10803fcc 	andi	r2,r2,255
    5dfc:	10001026 	beq	r2,zero,5e40 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5e00:	e0bffc17 	ldw	r2,-16(fp)
    5e04:	10800017 	ldw	r2,0(r2)
    5e08:	10800404 	addi	r2,r2,16
    5e0c:	10800017 	ldw	r2,0(r2)
    5e10:	e0fffc17 	ldw	r3,-16(fp)
    5e14:	18c00103 	ldbu	r3,4(r3)
    5e18:	19403fcc 	andi	r5,r3,255
    5e1c:	e0fffa03 	ldbu	r3,-24(fp)
    5e20:	e13ffc17 	ldw	r4,-16(fp)
    5e24:	20c7883a 	add	r3,r4,r3
    5e28:	18c00104 	addi	r3,r3,4
    5e2c:	18c00003 	ldbu	r3,0(r3)
    5e30:	18c03fcc 	andi	r3,r3,255
    5e34:	180d883a 	mov	r6,r3
    5e38:	e13ffc17 	ldw	r4,-16(fp)
    5e3c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5e40:	e0bffa03 	ldbu	r2,-24(fp)
    5e44:	10800044 	addi	r2,r2,1
    5e48:	e0bffa05 	stb	r2,-24(fp)
    5e4c:	003f8f06 	br	5c8c <__alt_data_end+0xfc005c8c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e50:	e03ffb05 	stb	zero,-20(fp)
    5e54:	e0bffb03 	ldbu	r2,-20(fp)
    5e58:	10800228 	cmpgeui	r2,r2,8
    5e5c:	10000e1e 	bne	r2,zero,5e98 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5e60:	e0bffb03 	ldbu	r2,-20(fp)
    5e64:	e0fffb03 	ldbu	r3,-20(fp)
    5e68:	e1000217 	ldw	r4,8(fp)
    5e6c:	20c7883a 	add	r3,r4,r3
    5e70:	18c00003 	ldbu	r3,0(r3)
    5e74:	e13ffc17 	ldw	r4,-16(fp)
    5e78:	2085883a 	add	r2,r4,r2
    5e7c:	10800104 	addi	r2,r2,4
    5e80:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e84:	e0bffb03 	ldbu	r2,-20(fp)
    5e88:	10800044 	addi	r2,r2,1
    5e8c:	e0bffb05 	stb	r2,-20(fp)
    5e90:	003ff006 	br	5e54 <__alt_data_end+0xfc005e54>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5e94:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5e98:	e037883a 	mov	sp,fp
    5e9c:	dfc00117 	ldw	ra,4(sp)
    5ea0:	df000017 	ldw	fp,0(sp)
    5ea4:	dec00204 	addi	sp,sp,8
    5ea8:	f800283a 	ret

00005eac <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5eac:	defffa04 	addi	sp,sp,-24
    5eb0:	dfc00515 	stw	ra,20(sp)
    5eb4:	df000415 	stw	fp,16(sp)
    5eb8:	df000404 	addi	fp,sp,16
    5ebc:	e13ffd15 	stw	r4,-12(fp)
    5ec0:	2807883a 	mov	r3,r5
    5ec4:	3005883a 	mov	r2,r6
    5ec8:	e0fffe05 	stb	r3,-8(fp)
    5ecc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ed0:	e0bffe03 	ldbu	r2,-8(fp)
    5ed4:	1080088c 	andi	r2,r2,34
    5ed8:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5edc:	e0bfff03 	ldbu	r2,-4(fp)
    5ee0:	10800130 	cmpltui	r2,r2,4
    5ee4:	1000151e 	bne	r2,zero,5f3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5ee8:	e0bfff03 	ldbu	r2,-4(fp)
    5eec:	108007a8 	cmpgeui	r2,r2,30
    5ef0:	1000121e 	bne	r2,zero,5f3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	10800317 	ldw	r2,12(r2)
    5efc:	1080008c 	andi	r2,r2,2
    5f00:	1000021e 	bne	r2,zero,5f0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5f04:	e0bffc03 	ldbu	r2,-16(fp)
    5f08:	1000061e 	bne	r2,zero,5f24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f0c:	e0bffd17 	ldw	r2,-12(fp)
    5f10:	10800317 	ldw	r2,12(r2)
    5f14:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f18:	10000526 	beq	r2,zero,5f30 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f1c:	e0bffc03 	ldbu	r2,-16(fp)
    5f20:	1000031e 	bne	r2,zero,5f30 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5f24:	e0bfff03 	ldbu	r2,-4(fp)
    5f28:	10800f44 	addi	r2,r2,61
    5f2c:	00008006 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5f30:	e0bfff03 	ldbu	r2,-4(fp)
    5f34:	10801744 	addi	r2,r2,93
    5f38:	00007d06 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5f3c:	e0bfff03 	ldbu	r2,-4(fp)
    5f40:	108007b0 	cmpltui	r2,r2,30
    5f44:	1000191e 	bne	r2,zero,5fac <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5f48:	e0bfff03 	ldbu	r2,-4(fp)
    5f4c:	10800a28 	cmpgeui	r2,r2,40
    5f50:	1000161e 	bne	r2,zero,5fac <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5f54:	e0bffc03 	ldbu	r2,-16(fp)
    5f58:	10000c26 	beq	r2,zero,5f8c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5f5c:	e0bffd17 	ldw	r2,-12(fp)
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	10800504 	addi	r2,r2,20
    5f68:	10800017 	ldw	r2,0(r2)
    5f6c:	e13ffd17 	ldw	r4,-12(fp)
    5f70:	103ee83a 	callr	r2
    5f74:	1007883a 	mov	r3,r2
    5f78:	e0bfff03 	ldbu	r2,-4(fp)
    5f7c:	10bff884 	addi	r2,r2,-30
    5f80:	1885883a 	add	r2,r3,r2
    5f84:	10800003 	ldbu	r2,0(r2)
    5f88:	00006906 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5f8c:	e0bfff03 	ldbu	r2,-4(fp)
    5f90:	108009e0 	cmpeqi	r2,r2,39
    5f94:	1000031e 	bne	r2,zero,5fa4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5f98:	e0bfff03 	ldbu	r2,-4(fp)
    5f9c:	108004c4 	addi	r2,r2,19
    5fa0:	00006306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5fa4:	00800c04 	movi	r2,48
    5fa8:	00006106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5fac:	e0bfff03 	ldbu	r2,-4(fp)
    5fb0:	10801670 	cmpltui	r2,r2,89
    5fb4:	10000a1e 	bne	r2,zero,5fe0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5fb8:	e0bfff03 	ldbu	r2,-4(fp)
    5fbc:	108018a8 	cmpgeui	r2,r2,98
    5fc0:	1000071e 	bne	r2,zero,5fe0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5fc4:	e0bffd17 	ldw	r2,-12(fp)
    5fc8:	10800317 	ldw	r2,12(r2)
    5fcc:	1080004c 	andi	r2,r2,1
    5fd0:	10005626 	beq	r2,zero,612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5fd4:	e0bfff03 	ldbu	r2,-4(fp)
    5fd8:	10bff604 	addi	r2,r2,-40
    5fdc:	00005406 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5fe0:	e0bfff03 	ldbu	r2,-4(fp)
    5fe4:	10800b70 	cmpltui	r2,r2,45
    5fe8:	10001d1e 	bne	r2,zero,6060 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5fec:	e0bfff03 	ldbu	r2,-4(fp)
    5ff0:	10800e68 	cmpgeui	r2,r2,57
    5ff4:	10001a1e 	bne	r2,zero,6060 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5ff8:	e0bffc03 	ldbu	r2,-16(fp)
    5ffc:	10000c26 	beq	r2,zero,6030 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    6000:	e0bffd17 	ldw	r2,-12(fp)
    6004:	10800017 	ldw	r2,0(r2)
    6008:	10800604 	addi	r2,r2,24
    600c:	10800017 	ldw	r2,0(r2)
    6010:	e13ffd17 	ldw	r4,-12(fp)
    6014:	103ee83a 	callr	r2
    6018:	1007883a 	mov	r3,r2
    601c:	e0bfff03 	ldbu	r2,-4(fp)
    6020:	10bff4c4 	addi	r2,r2,-45
    6024:	1885883a 	add	r2,r3,r2
    6028:	10800003 	ldbu	r2,0(r2)
    602c:	00004006 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	10800017 	ldw	r2,0(r2)
    6038:	10800704 	addi	r2,r2,28
    603c:	10800017 	ldw	r2,0(r2)
    6040:	e13ffd17 	ldw	r4,-12(fp)
    6044:	103ee83a 	callr	r2
    6048:	1007883a 	mov	r3,r2
    604c:	e0bfff03 	ldbu	r2,-4(fp)
    6050:	10bff4c4 	addi	r2,r2,-45
    6054:	1885883a 	add	r2,r3,r2
    6058:	10800003 	ldbu	r2,0(r2)
    605c:	00003406 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    6060:	e0bfff03 	ldbu	r2,-4(fp)
    6064:	10801530 	cmpltui	r2,r2,84
    6068:	10000f1e 	bne	r2,zero,60a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    606c:	e0bfff03 	ldbu	r2,-4(fp)
    6070:	10801668 	cmpgeui	r2,r2,89
    6074:	10000c1e 	bne	r2,zero,60a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    6078:	e0bffd17 	ldw	r2,-12(fp)
    607c:	10800017 	ldw	r2,0(r2)
    6080:	10800804 	addi	r2,r2,32
    6084:	10800017 	ldw	r2,0(r2)
    6088:	e13ffd17 	ldw	r4,-12(fp)
    608c:	103ee83a 	callr	r2
    6090:	1007883a 	mov	r3,r2
    6094:	e0bfff03 	ldbu	r2,-4(fp)
    6098:	10bfeb04 	addi	r2,r2,-84
    609c:	1885883a 	add	r2,r3,r2
    60a0:	10800003 	ldbu	r2,0(r2)
    60a4:	00002206 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    60a8:	e0bfff03 	ldbu	r2,-4(fp)
    60ac:	10c00b20 	cmpeqi	r3,r2,44
    60b0:	18000a1e 	bne	r3,zero,60dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    60b4:	10c00b48 	cmpgei	r3,r2,45
    60b8:	1800031e 	bne	r3,zero,60c8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    60bc:	10800a20 	cmpeqi	r2,r2,40
    60c0:	1000081e 	bne	r2,zero,60e4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    60c4:	00001906 	br	612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    60c8:	10c018a0 	cmpeqi	r3,r2,98
    60cc:	1800071e 	bne	r3,zero,60ec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    60d0:	108018e0 	cmpeqi	r2,r2,99
    60d4:	10000d1e 	bne	r2,zero,610c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    60d8:	00001406 	br	612c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    60dc:	00800804 	movi	r2,32
    60e0:	00001306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    60e4:	00800344 	movi	r2,13
    60e8:	00001106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    60ec:	e0bffd17 	ldw	r2,-12(fp)
    60f0:	10800317 	ldw	r2,12(r2)
    60f4:	1080004c 	andi	r2,r2,1
    60f8:	10000226 	beq	r2,zero,6104 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    60fc:	00800c04 	movi	r2,48
    6100:	00000b06 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6104:	0005883a 	mov	r2,zero
    6108:	00000906 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    610c:	e0bffd17 	ldw	r2,-12(fp)
    6110:	10800317 	ldw	r2,12(r2)
    6114:	1080004c 	andi	r2,r2,1
    6118:	10000226 	beq	r2,zero,6124 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    611c:	00800b84 	movi	r2,46
    6120:	00000306 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6124:	0005883a 	mov	r2,zero
    6128:	00000106 	br	6130 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    612c:	0005883a 	mov	r2,zero
}
    6130:	e037883a 	mov	sp,fp
    6134:	dfc00117 	ldw	ra,4(sp)
    6138:	df000017 	ldw	fp,0(sp)
    613c:	dec00204 	addi	sp,sp,8
    6140:	f800283a 	ret

00006144 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    6144:	defffd04 	addi	sp,sp,-12
    6148:	df000215 	stw	fp,8(sp)
    614c:	df000204 	addi	fp,sp,8
    6150:	e13ffe15 	stw	r4,-8(fp)
    6154:	e17fff15 	stw	r5,-4(fp)
        };
    6158:	0001883a 	nop
    615c:	e037883a 	mov	sp,fp
    6160:	df000017 	ldw	fp,0(sp)
    6164:	dec00104 	addi	sp,sp,4
    6168:	f800283a 	ret

0000616c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    616c:	defffd04 	addi	sp,sp,-12
    6170:	df000215 	stw	fp,8(sp)
    6174:	df000204 	addi	fp,sp,8
    6178:	e13ffe15 	stw	r4,-8(fp)
    617c:	e17fff15 	stw	r5,-4(fp)
        };
    6180:	0001883a 	nop
    6184:	e037883a 	mov	sp,fp
    6188:	df000017 	ldw	fp,0(sp)
    618c:	dec00104 	addi	sp,sp,4
    6190:	f800283a 	ret

00006194 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6194:	defffd04 	addi	sp,sp,-12
    6198:	df000215 	stw	fp,8(sp)
    619c:	df000204 	addi	fp,sp,8
    61a0:	e13ffe15 	stw	r4,-8(fp)
    61a4:	e17fff15 	stw	r5,-4(fp)
        };
    61a8:	0001883a 	nop
    61ac:	e037883a 	mov	sp,fp
    61b0:	df000017 	ldw	fp,0(sp)
    61b4:	dec00104 	addi	sp,sp,4
    61b8:	f800283a 	ret

000061bc <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    61bc:	defffd04 	addi	sp,sp,-12
    61c0:	df000215 	stw	fp,8(sp)
    61c4:	df000204 	addi	fp,sp,8
    61c8:	e13ffe15 	stw	r4,-8(fp)
    61cc:	e17fff15 	stw	r5,-4(fp)
        };
    61d0:	0001883a 	nop
    61d4:	e037883a 	mov	sp,fp
    61d8:	df000017 	ldw	fp,0(sp)
    61dc:	dec00104 	addi	sp,sp,4
    61e0:	f800283a 	ret

000061e4 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    61e4:	defffd04 	addi	sp,sp,-12
    61e8:	df000215 	stw	fp,8(sp)
    61ec:	df000204 	addi	fp,sp,8
    61f0:	e13ffe15 	stw	r4,-8(fp)
    61f4:	e17fff15 	stw	r5,-4(fp)
        };
    61f8:	0001883a 	nop
    61fc:	e037883a 	mov	sp,fp
    6200:	df000017 	ldw	fp,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	f800283a 	ret

0000620c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    620c:	defffd04 	addi	sp,sp,-12
    6210:	df000215 	stw	fp,8(sp)
    6214:	df000204 	addi	fp,sp,8
    6218:	e13ffe15 	stw	r4,-8(fp)
    621c:	e17fff15 	stw	r5,-4(fp)
        };
    6220:	0001883a 	nop
    6224:	e037883a 	mov	sp,fp
    6228:	df000017 	ldw	fp,0(sp)
    622c:	dec00104 	addi	sp,sp,4
    6230:	f800283a 	ret

00006234 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6234:	defffd04 	addi	sp,sp,-12
    6238:	df000215 	stw	fp,8(sp)
    623c:	df000204 	addi	fp,sp,8
    6240:	e13ffe15 	stw	r4,-8(fp)
    6244:	e17fff15 	stw	r5,-4(fp)
        };
    6248:	0001883a 	nop
    624c:	e037883a 	mov	sp,fp
    6250:	df000017 	ldw	fp,0(sp)
    6254:	dec00104 	addi	sp,sp,4
    6258:	f800283a 	ret

0000625c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    625c:	defff704 	addi	sp,sp,-36
    6260:	dfc00815 	stw	ra,32(sp)
    6264:	df000715 	stw	fp,28(sp)
    6268:	df000704 	addi	fp,sp,28
    626c:	e13ffd15 	stw	r4,-12(fp)
    6270:	e17ffe15 	stw	r5,-8(fp)
    6274:	3005883a 	mov	r2,r6
    6278:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    627c:	e0bffd17 	ldw	r2,-12(fp)
    6280:	10800303 	ldbu	r2,12(r2)
    6284:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    6288:	e0bfff03 	ldbu	r2,-4(fp)
    628c:	10c011e0 	cmpeqi	r3,r2,71
    6290:	1800271e 	bne	r3,zero,6330 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    6294:	10c014e0 	cmpeqi	r3,r2,83
    6298:	1800031e 	bne	r3,zero,62a8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    629c:	10800e60 	cmpeqi	r2,r2,57
    62a0:	1000111e 	bne	r2,zero,62e8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    62a4:	00003506 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    62a8:	e0bffd17 	ldw	r2,-12(fp)
    62ac:	10800317 	ldw	r2,12(r2)
    62b0:	1080004c 	andi	r2,r2,1
    62b4:	0084303a 	nor	r2,zero,r2
    62b8:	1080004c 	andi	r2,r2,1
    62bc:	1007883a 	mov	r3,r2
    62c0:	e0bffd17 	ldw	r2,-12(fp)
    62c4:	1940004c 	andi	r5,r3,1
    62c8:	11000303 	ldbu	r4,12(r2)
    62cc:	00ffff84 	movi	r3,-2
    62d0:	20c6703a 	and	r3,r4,r3
    62d4:	1809883a 	mov	r4,r3
    62d8:	2807883a 	mov	r3,r5
    62dc:	20c6b03a 	or	r3,r4,r3
    62e0:	10c00305 	stb	r3,12(r2)
                                break;
    62e4:	00002506 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	10800317 	ldw	r2,12(r2)
    62f0:	1004d07a 	srli	r2,r2,1
    62f4:	1080004c 	andi	r2,r2,1
    62f8:	0084303a 	nor	r2,zero,r2
    62fc:	1080004c 	andi	r2,r2,1
    6300:	1007883a 	mov	r3,r2
    6304:	e0bffd17 	ldw	r2,-12(fp)
    6308:	18c0004c 	andi	r3,r3,1
    630c:	18cb883a 	add	r5,r3,r3
    6310:	11000303 	ldbu	r4,12(r2)
    6314:	00ffff44 	movi	r3,-3
    6318:	20c6703a 	and	r3,r4,r3
    631c:	1809883a 	mov	r4,r3
    6320:	2807883a 	mov	r3,r5
    6324:	20c6b03a 	or	r3,r4,r3
    6328:	10c00305 	stb	r3,12(r2)
                                break;
    632c:	00001306 	br	637c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    6330:	e0bffd17 	ldw	r2,-12(fp)
    6334:	10800317 	ldw	r2,12(r2)
    6338:	1004d0ba 	srli	r2,r2,2
    633c:	1080004c 	andi	r2,r2,1
    6340:	0084303a 	nor	r2,zero,r2
    6344:	1080004c 	andi	r2,r2,1
    6348:	1007883a 	mov	r3,r2
    634c:	e0bffd17 	ldw	r2,-12(fp)
    6350:	18c0004c 	andi	r3,r3,1
    6354:	18c7883a 	add	r3,r3,r3
    6358:	18cb883a 	add	r5,r3,r3
    635c:	11000303 	ldbu	r4,12(r2)
    6360:	00fffec4 	movi	r3,-5
    6364:	20c6703a 	and	r3,r4,r3
    6368:	1809883a 	mov	r4,r3
    636c:	2807883a 	mov	r3,r5
    6370:	20c6b03a 	or	r3,r4,r3
    6374:	10c00305 	stb	r3,12(r2)
                                break;
    6378:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    637c:	e0bffd17 	ldw	r2,-12(fp)
    6380:	10800303 	ldbu	r2,12(r2)
    6384:	10c03fcc 	andi	r3,r2,255
    6388:	e0bffc03 	ldbu	r2,-16(fp)
    638c:	18801026 	beq	r3,r2,63d0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    6390:	e0bffe17 	ldw	r2,-8(fp)
    6394:	10000e26 	beq	r2,zero,63d0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    6398:	e0bffd17 	ldw	r2,-12(fp)
    639c:	10800303 	ldbu	r2,12(r2)
    63a0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    63a4:	e0bffc44 	addi	r2,fp,-15
    63a8:	d8800215 	stw	r2,8(sp)
    63ac:	00800044 	movi	r2,1
    63b0:	d8800115 	stw	r2,4(sp)
    63b4:	d8000015 	stw	zero,0(sp)
    63b8:	01c00084 	movi	r7,2
    63bc:	000d883a 	mov	r6,zero
    63c0:	000b883a 	mov	r5,zero
    63c4:	e13ffe17 	ldw	r4,-8(fp)
    63c8:	00092180 	call	9218 <_ZN6USBHID9SetReportEhhhhtPh>
    63cc:	00000106 	br	63d4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    63d0:	0005883a 	mov	r2,zero
        };
    63d4:	e037883a 	mov	sp,fp
    63d8:	dfc00117 	ldw	ra,4(sp)
    63dc:	df000017 	ldw	fp,0(sp)
    63e0:	dec00204 	addi	sp,sp,8
    63e4:	f800283a 	ret

000063e8 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    63e8:	defffc04 	addi	sp,sp,-16
    63ec:	df000315 	stw	fp,12(sp)
    63f0:	df000304 	addi	fp,sp,12
    63f4:	e13ffd15 	stw	r4,-12(fp)
    63f8:	2807883a 	mov	r3,r5
    63fc:	3005883a 	mov	r2,r6
    6400:	e0fffe05 	stb	r3,-8(fp)
    6404:	e0bfff05 	stb	r2,-4(fp)
        };
    6408:	0001883a 	nop
    640c:	e037883a 	mov	sp,fp
    6410:	df000017 	ldw	fp,0(sp)
    6414:	dec00104 	addi	sp,sp,4
    6418:	f800283a 	ret

0000641c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    641c:	defffc04 	addi	sp,sp,-16
    6420:	df000315 	stw	fp,12(sp)
    6424:	df000304 	addi	fp,sp,12
    6428:	e13ffd15 	stw	r4,-12(fp)
    642c:	2807883a 	mov	r3,r5
    6430:	3005883a 	mov	r2,r6
    6434:	e0fffe05 	stb	r3,-8(fp)
    6438:	e0bfff05 	stb	r2,-4(fp)
        };
    643c:	0001883a 	nop
    6440:	e037883a 	mov	sp,fp
    6444:	df000017 	ldw	fp,0(sp)
    6448:	dec00104 	addi	sp,sp,4
    644c:	f800283a 	ret

00006450 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6450:	defffc04 	addi	sp,sp,-16
    6454:	df000315 	stw	fp,12(sp)
    6458:	df000304 	addi	fp,sp,12
    645c:	e13ffd15 	stw	r4,-12(fp)
    6460:	2807883a 	mov	r3,r5
    6464:	3005883a 	mov	r2,r6
    6468:	e0fffe05 	stb	r3,-8(fp)
    646c:	e0bfff05 	stb	r2,-4(fp)
        };
    6470:	0001883a 	nop
    6474:	e037883a 	mov	sp,fp
    6478:	df000017 	ldw	fp,0(sp)
    647c:	dec00104 	addi	sp,sp,4
    6480:	f800283a 	ret

00006484 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    6484:	defffe04 	addi	sp,sp,-8
    6488:	df000115 	stw	fp,4(sp)
    648c:	df000104 	addi	fp,sp,4
    6490:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    6494:	008000b4 	movhi	r2,2
    6498:	109b8c84 	addi	r2,r2,28210
        };
    649c:	e037883a 	mov	sp,fp
    64a0:	df000017 	ldw	fp,0(sp)
    64a4:	dec00104 	addi	sp,sp,4
    64a8:	f800283a 	ret

000064ac <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    64ac:	defffe04 	addi	sp,sp,-8
    64b0:	df000115 	stw	fp,4(sp)
    64b4:	df000104 	addi	fp,sp,4
    64b8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    64bc:	008000b4 	movhi	r2,2
    64c0:	109b8f04 	addi	r2,r2,28220
        };
    64c4:	e037883a 	mov	sp,fp
    64c8:	df000017 	ldw	fp,0(sp)
    64cc:	dec00104 	addi	sp,sp,4
    64d0:	f800283a 	ret

000064d4 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    64d4:	defffe04 	addi	sp,sp,-8
    64d8:	df000115 	stw	fp,4(sp)
    64dc:	df000104 	addi	fp,sp,4
    64e0:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    64e4:	008000b4 	movhi	r2,2
    64e8:	109b9204 	addi	r2,r2,28232
        };
    64ec:	e037883a 	mov	sp,fp
    64f0:	df000017 	ldw	fp,0(sp)
    64f4:	dec00104 	addi	sp,sp,4
    64f8:	f800283a 	ret

000064fc <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    64fc:	defffe04 	addi	sp,sp,-8
    6500:	df000115 	stw	fp,4(sp)
    6504:	df000104 	addi	fp,sp,4
    6508:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    650c:	d0a1e684 	addi	r2,gp,-30822
        };
    6510:	e037883a 	mov	sp,fp
    6514:	df000017 	ldw	fp,0(sp)
    6518:	dec00104 	addi	sp,sp,4
    651c:	f800283a 	ret

00006520 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6520:	defffc04 	addi	sp,sp,-16
    6524:	dfc00315 	stw	ra,12(sp)
    6528:	df000215 	stw	fp,8(sp)
    652c:	df000204 	addi	fp,sp,8
    6530:	2005883a 	mov	r2,r4
    6534:	e17fff15 	stw	r5,-4(fp)
    6538:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    653c:	d0e1eb17 	ldw	r3,-30804(gp)
    6540:	e0bfff17 	ldw	r2,-4(fp)
    6544:	18800416 	blt	r3,r2,6558 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6548:	e0bffe07 	ldb	r2,-8(fp)
    654c:	1009883a 	mov	r4,r2
    6550:	000ff580 	call	ff58 <putchar>
    6554:	00000106 	br	655c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6558:	0001883a 	nop
        printf("%c", c);
}
    655c:	e037883a 	mov	sp,fp
    6560:	dfc00117 	ldw	ra,4(sp)
    6564:	df000017 	ldw	fp,0(sp)
    6568:	dec00204 	addi	sp,sp,8
    656c:	f800283a 	ret

00006570 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6570:	defffb04 	addi	sp,sp,-20
    6574:	dfc00415 	stw	ra,16(sp)
    6578:	df000315 	stw	fp,12(sp)
    657c:	df000304 	addi	fp,sp,12
    6580:	e13ffe15 	stw	r4,-8(fp)
    6584:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6588:	d0e1eb17 	ldw	r3,-30804(gp)
    658c:	e0bfff17 	ldw	r2,-4(fp)
    6590:	18801016 	blt	r3,r2,65d4 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    6594:	e0bffe17 	ldw	r2,-8(fp)
    6598:	10001026 	beq	r2,zero,65dc <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    659c:	e0bffe17 	ldw	r2,-8(fp)
    65a0:	10c00044 	addi	r3,r2,1
    65a4:	e0fffe15 	stw	r3,-8(fp)
    65a8:	10800003 	ldbu	r2,0(r2)
    65ac:	e0bffd05 	stb	r2,-12(fp)
    65b0:	e0bffd07 	ldb	r2,-12(fp)
    65b4:	1004c03a 	cmpne	r2,r2,zero
    65b8:	10803fcc 	andi	r2,r2,255
    65bc:	10000826 	beq	r2,zero,65e0 <_Z8E_NotifyPKci+0x70>
    65c0:	e0bffd07 	ldb	r2,-12(fp)
    65c4:	e17fff17 	ldw	r5,-4(fp)
    65c8:	1009883a 	mov	r4,r2
    65cc:	00065200 	call	6520 <_Z9E_Notifycci>
    65d0:	003ff206 	br	659c <__alt_data_end+0xfc00659c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    65d4:	0001883a 	nop
    65d8:	00000106 	br	65e0 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    65dc:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    65e0:	e037883a 	mov	sp,fp
    65e4:	dfc00117 	ldw	ra,4(sp)
    65e8:	df000017 	ldw	fp,0(sp)
    65ec:	dec00204 	addi	sp,sp,8
    65f0:	f800283a 	ret

000065f4 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    65f4:	defffb04 	addi	sp,sp,-20
    65f8:	dfc00415 	stw	ra,16(sp)
    65fc:	df000315 	stw	fp,12(sp)
    6600:	df000304 	addi	fp,sp,12
    6604:	e13ffe15 	stw	r4,-8(fp)
    6608:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    660c:	d0e1eb17 	ldw	r3,-30804(gp)
    6610:	e0bfff17 	ldw	r2,-4(fp)
    6614:	18801016 	blt	r3,r2,6658 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6618:	e0bffe17 	ldw	r2,-8(fp)
    661c:	10001026 	beq	r2,zero,6660 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6620:	e0bffe17 	ldw	r2,-8(fp)
    6624:	10c00044 	addi	r3,r2,1
    6628:	e0fffe15 	stw	r3,-8(fp)
    662c:	10800003 	ldbu	r2,0(r2)
    6630:	e0bffd05 	stb	r2,-12(fp)
    6634:	e0bffd07 	ldb	r2,-12(fp)
    6638:	1004c03a 	cmpne	r2,r2,zero
    663c:	10803fcc 	andi	r2,r2,255
    6640:	10000826 	beq	r2,zero,6664 <_Z11E_NotifyStrPKci+0x70>
    6644:	e0bffd07 	ldb	r2,-12(fp)
    6648:	e17fff17 	ldw	r5,-4(fp)
    664c:	1009883a 	mov	r4,r2
    6650:	00065200 	call	6520 <_Z9E_Notifycci>
    6654:	003ff206 	br	6620 <__alt_data_end+0xfc006620>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6658:	0001883a 	nop
    665c:	00000106 	br	6664 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6660:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6664:	e037883a 	mov	sp,fp
    6668:	dfc00117 	ldw	ra,4(sp)
    666c:	df000017 	ldw	fp,0(sp)
    6670:	dec00204 	addi	sp,sp,8
    6674:	f800283a 	ret

00006678 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6678:	defffd04 	addi	sp,sp,-12
    667c:	df000215 	stw	fp,8(sp)
    6680:	df000204 	addi	fp,sp,8
    6684:	2005883a 	mov	r2,r4
    6688:	e17fff15 	stw	r5,-4(fp)
    668c:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6690:	e037883a 	mov	sp,fp
    6694:	df000017 	ldw	fp,0(sp)
    6698:	dec00104 	addi	sp,sp,4
    669c:	f800283a 	ret

000066a0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    66a0:	defffc04 	addi	sp,sp,-16
    66a4:	df000315 	stw	fp,12(sp)
    66a8:	df000304 	addi	fp,sp,12
    66ac:	e13ffd15 	stw	r4,-12(fp)
    66b0:	e17ffe15 	stw	r5,-8(fp)
    66b4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    66b8:	e037883a 	mov	sp,fp
    66bc:	df000017 	ldw	fp,0(sp)
    66c0:	dec00104 	addi	sp,sp,4
    66c4:	f800283a 	ret

000066c8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    66c8:	defffc04 	addi	sp,sp,-16
    66cc:	df000315 	stw	fp,12(sp)
    66d0:	df000304 	addi	fp,sp,12
    66d4:	e13ffd15 	stw	r4,-12(fp)
    66d8:	e17ffe15 	stw	r5,-8(fp)
    66dc:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    66e0:	e0bffd17 	ldw	r2,-12(fp)
    66e4:	10800017 	ldw	r2,0(r2)
    66e8:	1000021e 	bne	r2,zero,66f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    66ec:	0005883a 	mov	r2,zero
    66f0:	00003306 	br	67c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    66f4:	e0bffd17 	ldw	r2,-12(fp)
    66f8:	10800103 	ldbu	r2,4(r2)
    66fc:	10803fcc 	andi	r2,r2,255
    6700:	10002426 	beq	r2,zero,6794 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    6704:	e0bfff17 	ldw	r2,-4(fp)
    6708:	1080000b 	ldhu	r2,0(r2)
    670c:	10bfffcc 	andi	r2,r2,65535
    6710:	10002026 	beq	r2,zero,6794 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    6714:	e0bffd17 	ldw	r2,-12(fp)
    6718:	10800017 	ldw	r2,0(r2)
    671c:	e0fffd17 	ldw	r3,-12(fp)
    6720:	18c00143 	ldbu	r3,5(r3)
    6724:	19003fcc 	andi	r4,r3,255
    6728:	e0fffd17 	ldw	r3,-12(fp)
    672c:	18c00103 	ldbu	r3,4(r3)
    6730:	18c03fcc 	andi	r3,r3,255
    6734:	20c7c83a 	sub	r3,r4,r3
    6738:	10c5883a 	add	r2,r2,r3
    673c:	e0fffe17 	ldw	r3,-8(fp)
    6740:	18c00017 	ldw	r3,0(r3)
    6744:	18c00003 	ldbu	r3,0(r3)
    6748:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    674c:	e0bffd17 	ldw	r2,-12(fp)
    6750:	10800103 	ldbu	r2,4(r2)
    6754:	10bfffc4 	addi	r2,r2,-1
    6758:	1007883a 	mov	r3,r2
    675c:	e0bffd17 	ldw	r2,-12(fp)
    6760:	10c00105 	stb	r3,4(r2)
    6764:	e0bfff17 	ldw	r2,-4(fp)
    6768:	1080000b 	ldhu	r2,0(r2)
    676c:	10bfffc4 	addi	r2,r2,-1
    6770:	1007883a 	mov	r3,r2
    6774:	e0bfff17 	ldw	r2,-4(fp)
    6778:	10c0000d 	sth	r3,0(r2)
    677c:	e0bffe17 	ldw	r2,-8(fp)
    6780:	10800017 	ldw	r2,0(r2)
    6784:	10c00044 	addi	r3,r2,1
    6788:	e0bffe17 	ldw	r2,-8(fp)
    678c:	10c00015 	stw	r3,0(r2)
    6790:	003fd806 	br	66f4 <__alt_data_end+0xfc0066f4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    6794:	e0bffd17 	ldw	r2,-12(fp)
    6798:	10800103 	ldbu	r2,4(r2)
    679c:	10803fcc 	andi	r2,r2,255
    67a0:	10000226 	beq	r2,zero,67ac <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    67a4:	0005883a 	mov	r2,zero
    67a8:	00000506 	br	67c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    67ac:	e0bffd17 	ldw	r2,-12(fp)
    67b0:	10c00143 	ldbu	r3,5(r2)
    67b4:	e0bffd17 	ldw	r2,-12(fp)
    67b8:	10c00105 	stb	r3,4(r2)
        return true;
    67bc:	00800044 	movi	r2,1
}
    67c0:	e037883a 	mov	sp,fp
    67c4:	df000017 	ldw	fp,0(sp)
    67c8:	dec00104 	addi	sp,sp,4
    67cc:	f800283a 	ret

000067d0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    67d0:	defffa04 	addi	sp,sp,-24
    67d4:	dfc00515 	stw	ra,20(sp)
    67d8:	df000415 	stw	fp,16(sp)
    67dc:	df000404 	addi	fp,sp,16
    67e0:	e13ffc15 	stw	r4,-16(fp)
    67e4:	e17ffd15 	stw	r5,-12(fp)
    67e8:	e1bffe15 	stw	r6,-8(fp)
    67ec:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    67f0:	e0bffc17 	ldw	r2,-16(fp)
    67f4:	10800003 	ldbu	r2,0(r2)
    67f8:	10803fcc 	andi	r2,r2,255
    67fc:	10c00060 	cmpeqi	r3,r2,1
    6800:	1800181e 	bne	r3,zero,6864 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    6804:	10c00088 	cmpgei	r3,r2,2
    6808:	1800021e 	bne	r3,zero,6814 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    680c:	10000626 	beq	r2,zero,6828 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6810:	00007e06 	br	6a0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    6814:	10c000a0 	cmpeqi	r3,r2,2
    6818:	18004a1e 	bne	r3,zero,6944 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    681c:	108000e0 	cmpeqi	r2,r2,3
    6820:	1000571e 	bne	r2,zero,6980 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6824:	00007906 	br	6a0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6828:	e0bffc17 	ldw	r2,-16(fp)
    682c:	10800417 	ldw	r2,16(r2)
    6830:	e0fffc17 	ldw	r3,-16(fp)
    6834:	18c00303 	ldbu	r3,12(r3)
    6838:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    683c:	e0bffc17 	ldw	r2,-16(fp)
    6840:	10c00504 	addi	r3,r2,20
    6844:	e0bffc17 	ldw	r2,-16(fp)
    6848:	10800417 	ldw	r2,16(r2)
    684c:	100b883a 	mov	r5,r2
    6850:	1809883a 	mov	r4,r3
    6854:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6858:	e0bffc17 	ldw	r2,-16(fp)
    685c:	00c00044 	movi	r3,1
    6860:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	10800504 	addi	r2,r2,20
    686c:	e1bffe17 	ldw	r6,-8(fp)
    6870:	e17ffd17 	ldw	r5,-12(fp)
    6874:	1009883a 	mov	r4,r2
    6878:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    687c:	1080005c 	xori	r2,r2,1
    6880:	10803fcc 	andi	r2,r2,255
    6884:	10000226 	beq	r2,zero,6890 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6888:	0005883a 	mov	r2,zero
    688c:	00006006 	br	6a10 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6890:	e0bffc17 	ldw	r2,-16(fp)
    6894:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6898:	e0bffc17 	ldw	r2,-16(fp)
    689c:	10800417 	ldw	r2,16(r2)
    68a0:	10800003 	ldbu	r2,0(r2)
    68a4:	10803fcc 	andi	r2,r2,255
    68a8:	10800130 	cmpltui	r2,r2,4
    68ac:	10000e1e 	bne	r2,zero,68e8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    68b0:	e0bffc17 	ldw	r2,-16(fp)
    68b4:	10800417 	ldw	r2,16(r2)
    68b8:	10c00043 	ldbu	r3,1(r2)
    68bc:	11000083 	ldbu	r4,2(r2)
    68c0:	2008923a 	slli	r4,r4,8
    68c4:	20c6b03a 	or	r3,r4,r3
    68c8:	110000c3 	ldbu	r4,3(r2)
    68cc:	2008943a 	slli	r4,r4,16
    68d0:	20c6b03a 	or	r3,r4,r3
    68d4:	10800103 	ldbu	r2,4(r2)
    68d8:	1004963a 	slli	r2,r2,24
    68dc:	10c4b03a 	or	r2,r2,r3
    68e0:	10800017 	ldw	r2,0(r2)
    68e4:	00000e06 	br	6920 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    68e8:	e0bffc17 	ldw	r2,-16(fp)
    68ec:	10800417 	ldw	r2,16(r2)
    68f0:	10c00043 	ldbu	r3,1(r2)
    68f4:	11000083 	ldbu	r4,2(r2)
    68f8:	2008923a 	slli	r4,r4,8
    68fc:	20c6b03a 	or	r3,r4,r3
    6900:	110000c3 	ldbu	r4,3(r2)
    6904:	2008943a 	slli	r4,r4,16
    6908:	20c6b03a 	or	r3,r4,r3
    690c:	10800103 	ldbu	r2,4(r2)
    6910:	1004963a 	slli	r2,r2,24
    6914:	10c4b03a 	or	r2,r2,r3
    6918:	1080000b 	ldhu	r2,0(r2)
    691c:	10bfffcc 	andi	r2,r2,65535
    6920:	e0fffc17 	ldw	r3,-16(fp)
    6924:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6928:	e0bffc17 	ldw	r2,-16(fp)
    692c:	10c00117 	ldw	r3,4(r2)
    6930:	e0bffc17 	ldw	r2,-16(fp)
    6934:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6938:	e0bffc17 	ldw	r2,-16(fp)
    693c:	00c00084 	movi	r3,2
    6940:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6944:	e0bffc17 	ldw	r2,-16(fp)
    6948:	10800417 	ldw	r2,16(r2)
    694c:	e0fffc17 	ldw	r3,-16(fp)
    6950:	18c00343 	ldbu	r3,13(r3)
    6954:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6958:	e0bffc17 	ldw	r2,-16(fp)
    695c:	10c00504 	addi	r3,r2,20
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	10800417 	ldw	r2,16(r2)
    6968:	100b883a 	mov	r5,r2
    696c:	1809883a 	mov	r4,r3
    6970:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6974:	e0bffc17 	ldw	r2,-16(fp)
    6978:	00c000c4 	movi	r3,3
    697c:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6980:	e0bffc17 	ldw	r2,-16(fp)
    6984:	10800217 	ldw	r2,8(r2)
    6988:	10001e26 	beq	r2,zero,6a04 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    698c:	e0bffc17 	ldw	r2,-16(fp)
    6990:	10800504 	addi	r2,r2,20
    6994:	e1bffe17 	ldw	r6,-8(fp)
    6998:	e17ffd17 	ldw	r5,-12(fp)
    699c:	1009883a 	mov	r4,r2
    69a0:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    69a4:	1080005c 	xori	r2,r2,1
    69a8:	10803fcc 	andi	r2,r2,255
    69ac:	10000226 	beq	r2,zero,69b8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    69b0:	0005883a 	mov	r2,zero
    69b4:	00001606 	br	6a10 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    69b8:	e0bfff17 	ldw	r2,-4(fp)
    69bc:	10000b26 	beq	r2,zero,69ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    69c0:	e0bffc17 	ldw	r2,-16(fp)
    69c4:	11000417 	ldw	r4,16(r2)
    69c8:	e0bffc17 	ldw	r2,-16(fp)
    69cc:	10c00117 	ldw	r3,4(r2)
    69d0:	e0bffc17 	ldw	r2,-16(fp)
    69d4:	10800217 	ldw	r2,8(r2)
    69d8:	1887c83a 	sub	r3,r3,r2
    69dc:	e0bfff17 	ldw	r2,-4(fp)
    69e0:	e1800217 	ldw	r6,8(fp)
    69e4:	180b883a 	mov	r5,r3
    69e8:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    69ec:	e0bffc17 	ldw	r2,-16(fp)
    69f0:	10800217 	ldw	r2,8(r2)
    69f4:	10ffffc4 	addi	r3,r2,-1
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	10c00215 	stw	r3,8(r2)
    6a00:	003fdf06 	br	6980 <__alt_data_end+0xfc006980>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6a04:	e0bffc17 	ldw	r2,-16(fp)
    6a08:	10000005 	stb	zero,0(r2)
        }
        return true;
    6a0c:	00800044 	movi	r2,1
}
    6a10:	e037883a 	mov	sp,fp
    6a14:	dfc00117 	ldw	ra,4(sp)
    6a18:	df000017 	ldw	fp,0(sp)
    6a1c:	dec00204 	addi	sp,sp,8
    6a20:	f800283a 	ret

00006a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6a24:	defff904 	addi	sp,sp,-28
    6a28:	dfc00615 	stw	ra,24(sp)
    6a2c:	df000515 	stw	fp,20(sp)
    6a30:	df000504 	addi	fp,sp,20
    6a34:	e13ffd15 	stw	r4,-12(fp)
    6a38:	2807883a 	mov	r3,r5
    6a3c:	3005883a 	mov	r2,r6
    6a40:	e0fffe05 	stb	r3,-8(fp)
    6a44:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6a48:	e0bfff0b 	ldhu	r2,-4(fp)
    6a4c:	1005d23a 	srai	r2,r2,8
    6a50:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6a54:	e0bfff0b 	ldhu	r2,-4(fp)
    6a58:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6a5c:	e03ffb8d 	sth	zero,-18(fp)
    6a60:	e03ffc0d 	sth	zero,-16(fp)
    6a64:	e0bffe03 	ldbu	r2,-8(fp)
    6a68:	e0bffbc5 	stb	r2,-17(fp)
    6a6c:	e0bffb03 	ldbu	r2,-20(fp)
    6a70:	e0bffc05 	stb	r2,-16(fp)
    6a74:	e0bffb43 	ldbu	r2,-19(fp)
    6a78:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6a7c:	e0bffb84 	addi	r2,fp,-18
    6a80:	000f883a 	mov	r7,zero
    6a84:	01800104 	movi	r6,4
    6a88:	100b883a 	mov	r5,r2
    6a8c:	e13ffd17 	ldw	r4,-12(fp)
    6a90:	00219180 	call	21918 <alt_avalon_i2c_master_tx>
    6a94:	1004c03a 	cmpne	r2,r2,zero
    6a98:	10803fcc 	andi	r2,r2,255
    6a9c:	10000426 	beq	r2,zero,6ab0 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6aa0:	010000b4 	movhi	r4,2
    6aa4:	211bc004 	addi	r4,r4,28416
    6aa8:	000ff140 	call	ff14 <printf>
	}
	return;
    6aac:	0001883a 	nop
    6ab0:	0001883a 	nop
}
    6ab4:	e037883a 	mov	sp,fp
    6ab8:	dfc00117 	ldw	ra,4(sp)
    6abc:	df000017 	ldw	fp,0(sp)
    6ac0:	dec00204 	addi	sp,sp,8
    6ac4:	f800283a 	ret

00006ac8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6ac8:	defff604 	addi	sp,sp,-40
    6acc:	dfc00915 	stw	ra,36(sp)
    6ad0:	df000815 	stw	fp,32(sp)
    6ad4:	dc000715 	stw	r16,28(sp)
    6ad8:	df000804 	addi	fp,sp,32
    6adc:	e13ffb15 	stw	r4,-20(fp)
    6ae0:	3009883a 	mov	r4,r6
    6ae4:	e1fffe15 	stw	r7,-8(fp)
    6ae8:	e17ffc05 	stb	r5,-16(fp)
    6aec:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6af0:	d809883a 	mov	r4,sp
    6af4:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6af8:	e13ffd03 	ldbu	r4,-12(fp)
    6afc:	21000044 	addi	r4,r4,1
    6b00:	2109883a 	add	r4,r4,r4
    6b04:	213fffc4 	addi	r4,r4,-1
    6b08:	e13ff915 	stw	r4,-28(fp)
    6b0c:	200b883a 	mov	r5,r4
    6b10:	29400044 	addi	r5,r5,1
    6b14:	2819883a 	mov	r12,r5
    6b18:	001b883a 	mov	r13,zero
    6b1c:	600ad77a 	srli	r5,r12,29
    6b20:	681290fa 	slli	r9,r13,3
    6b24:	2a52b03a 	or	r9,r5,r9
    6b28:	601090fa 	slli	r8,r12,3
    6b2c:	200b883a 	mov	r5,r4
    6b30:	29400044 	addi	r5,r5,1
    6b34:	2815883a 	mov	r10,r5
    6b38:	0017883a 	mov	r11,zero
    6b3c:	500ad77a 	srli	r5,r10,29
    6b40:	580690fa 	slli	r3,r11,3
    6b44:	28c6b03a 	or	r3,r5,r3
    6b48:	500490fa 	slli	r2,r10,3
    6b4c:	2005883a 	mov	r2,r4
    6b50:	10800044 	addi	r2,r2,1
    6b54:	108000c4 	addi	r2,r2,3
    6b58:	1004d0ba 	srli	r2,r2,2
    6b5c:	1085883a 	add	r2,r2,r2
    6b60:	1085883a 	add	r2,r2,r2
    6b64:	d8b7c83a 	sub	sp,sp,r2
    6b68:	d805883a 	mov	r2,sp
    6b6c:	1005883a 	mov	r2,r2
    6b70:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6b74:	e0bffa17 	ldw	r2,-24(fp)
    6b78:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6b7c:	e0bffa17 	ldw	r2,-24(fp)
    6b80:	e0fffc03 	ldbu	r3,-16(fp)
    6b84:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6b88:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6b8c:	e03ff815 	stw	zero,-32(fp)
    6b90:	e0bffd03 	ldbu	r2,-12(fp)
    6b94:	e0fff817 	ldw	r3,-32(fp)
    6b98:	18801e0e 	bge	r3,r2,6c14 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6b9c:	e0bff817 	ldw	r2,-32(fp)
    6ba0:	10c00084 	addi	r3,r2,2
    6ba4:	e0bff817 	ldw	r2,-32(fp)
    6ba8:	1085883a 	add	r2,r2,r2
    6bac:	1009883a 	mov	r4,r2
    6bb0:	e0bffe17 	ldw	r2,-8(fp)
    6bb4:	1105883a 	add	r2,r2,r4
    6bb8:	1080000b 	ldhu	r2,0(r2)
    6bbc:	10bfffcc 	andi	r2,r2,65535
    6bc0:	1005d23a 	srai	r2,r2,8
    6bc4:	1009883a 	mov	r4,r2
    6bc8:	e0bffa17 	ldw	r2,-24(fp)
    6bcc:	10c5883a 	add	r2,r2,r3
    6bd0:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6bd4:	e0bff817 	ldw	r2,-32(fp)
    6bd8:	10c000c4 	addi	r3,r2,3
    6bdc:	e0bff817 	ldw	r2,-32(fp)
    6be0:	1085883a 	add	r2,r2,r2
    6be4:	1009883a 	mov	r4,r2
    6be8:	e0bffe17 	ldw	r2,-8(fp)
    6bec:	1105883a 	add	r2,r2,r4
    6bf0:	1080000b 	ldhu	r2,0(r2)
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	e0bffa17 	ldw	r2,-24(fp)
    6bfc:	10c5883a 	add	r2,r2,r3
    6c00:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6c04:	e0bff817 	ldw	r2,-32(fp)
    6c08:	10800044 	addi	r2,r2,1
    6c0c:	e0bff815 	stw	r2,-32(fp)
    6c10:	003fdf06 	br	6b90 <__alt_data_end+0xfc006b90>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6c14:	e0fffa17 	ldw	r3,-24(fp)
    6c18:	e0bffd03 	ldbu	r2,-12(fp)
    6c1c:	10800044 	addi	r2,r2,1
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	000f883a 	mov	r7,zero
    6c28:	100d883a 	mov	r6,r2
    6c2c:	180b883a 	mov	r5,r3
    6c30:	e13ffb17 	ldw	r4,-20(fp)
    6c34:	00219180 	call	21918 <alt_avalon_i2c_master_tx>
    6c38:	1004c03a 	cmpne	r2,r2,zero
    6c3c:	10803fcc 	andi	r2,r2,255
    6c40:	10000326 	beq	r2,zero,6c50 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6c44:	010000b4 	movhi	r4,2
    6c48:	211bc704 	addi	r4,r4,28444
    6c4c:	000ff140 	call	ff14 <printf>
	}
	return (data+nwords);
    6c50:	e0bffd03 	ldbu	r2,-12(fp)
    6c54:	1085883a 	add	r2,r2,r2
    6c58:	1007883a 	mov	r3,r2
    6c5c:	e0bffe17 	ldw	r2,-8(fp)
    6c60:	10c5883a 	add	r2,r2,r3
    6c64:	8037883a 	mov	sp,r16
}
    6c68:	e6ffff04 	addi	sp,fp,-4
    6c6c:	dfc00217 	ldw	ra,8(sp)
    6c70:	df000117 	ldw	fp,4(sp)
    6c74:	dc000017 	ldw	r16,0(sp)
    6c78:	dec00304 	addi	sp,sp,12
    6c7c:	f800283a 	ret

00006c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6c80:	defff804 	addi	sp,sp,-32
    6c84:	dfc00715 	stw	ra,28(sp)
    6c88:	df000615 	stw	fp,24(sp)
    6c8c:	df000604 	addi	fp,sp,24
    6c90:	e13ffe15 	stw	r4,-8(fp)
    6c94:	2805883a 	mov	r2,r5
    6c98:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6c9c:	e03ffc8d 	sth	zero,-14(fp)
    6ca0:	e0bfff03 	ldbu	r2,-4(fp)
    6ca4:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6ca8:	e03ffd05 	stb	zero,-12(fp)
    6cac:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6cb0:	e13ffd04 	addi	r4,fp,-12
    6cb4:	e0fffc84 	addi	r3,fp,-14
    6cb8:	d8000115 	stw	zero,4(sp)
    6cbc:	00800084 	movi	r2,2
    6cc0:	d8800015 	stw	r2,0(sp)
    6cc4:	200f883a 	mov	r7,r4
    6cc8:	01800084 	movi	r6,2
    6ccc:	180b883a 	mov	r5,r3
    6cd0:	e13ffe17 	ldw	r4,-8(fp)
    6cd4:	0021b3c0 	call	21b3c <alt_avalon_i2c_master_tx_rx>
    6cd8:	1004c03a 	cmpne	r2,r2,zero
    6cdc:	10803fcc 	andi	r2,r2,255
    6ce0:	10000326 	beq	r2,zero,6cf0 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6ce4:	010000b4 	movhi	r4,2
    6ce8:	211bcd04 	addi	r4,r4,28468
    6cec:	000ff140 	call	ff14 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6cf0:	e0bffd03 	ldbu	r2,-12(fp)
    6cf4:	10803fcc 	andi	r2,r2,255
    6cf8:	1004923a 	slli	r2,r2,8
    6cfc:	1007883a 	mov	r3,r2
    6d00:	e0bffd43 	ldbu	r2,-11(fp)
    6d04:	10803fcc 	andi	r2,r2,255
    6d08:	1884b03a 	or	r2,r3,r2
    6d0c:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6d10:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6d14:	e037883a 	mov	sp,fp
    6d18:	dfc00117 	ldw	ra,4(sp)
    6d1c:	df000017 	ldw	fp,0(sp)
    6d20:	dec00204 	addi	sp,sp,8
    6d24:	f800283a 	ret

00006d28 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6d28:	defff304 	addi	sp,sp,-52
    6d2c:	dfc00c15 	stw	ra,48(sp)
    6d30:	df000b15 	stw	fp,44(sp)
    6d34:	dc000a15 	stw	r16,40(sp)
    6d38:	df000b04 	addi	fp,sp,44
    6d3c:	e13ffb15 	stw	r4,-20(fp)
    6d40:	3009883a 	mov	r4,r6
    6d44:	e1fffe15 	stw	r7,-8(fp)
    6d48:	e17ffc05 	stb	r5,-16(fp)
    6d4c:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6d50:	d809883a 	mov	r4,sp
    6d54:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6d58:	e03ffa0d 	sth	zero,-24(fp)
    6d5c:	e13ffc03 	ldbu	r4,-16(fp)
    6d60:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6d64:	e13ffd03 	ldbu	r4,-12(fp)
    6d68:	2109883a 	add	r4,r4,r4
    6d6c:	213fffc4 	addi	r4,r4,-1
    6d70:	e13ff815 	stw	r4,-32(fp)
    6d74:	200b883a 	mov	r5,r4
    6d78:	29400044 	addi	r5,r5,1
    6d7c:	2819883a 	mov	r12,r5
    6d80:	001b883a 	mov	r13,zero
    6d84:	600ad77a 	srli	r5,r12,29
    6d88:	681290fa 	slli	r9,r13,3
    6d8c:	2a52b03a 	or	r9,r5,r9
    6d90:	601090fa 	slli	r8,r12,3
    6d94:	200b883a 	mov	r5,r4
    6d98:	29400044 	addi	r5,r5,1
    6d9c:	2815883a 	mov	r10,r5
    6da0:	0017883a 	mov	r11,zero
    6da4:	500ad77a 	srli	r5,r10,29
    6da8:	580690fa 	slli	r3,r11,3
    6dac:	28c6b03a 	or	r3,r5,r3
    6db0:	500490fa 	slli	r2,r10,3
    6db4:	2005883a 	mov	r2,r4
    6db8:	10800044 	addi	r2,r2,1
    6dbc:	108000c4 	addi	r2,r2,3
    6dc0:	1004d0ba 	srli	r2,r2,2
    6dc4:	1085883a 	add	r2,r2,r2
    6dc8:	1085883a 	add	r2,r2,r2
    6dcc:	d8b7c83a 	sub	sp,sp,r2
    6dd0:	d8800204 	addi	r2,sp,8
    6dd4:	1005883a 	mov	r2,r2
    6dd8:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6ddc:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6de0:	e0fff917 	ldw	r3,-28(fp)
    6de4:	e0bffd03 	ldbu	r2,-12(fp)
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	1009883a 	mov	r4,r2
    6df0:	e0bffa04 	addi	r2,fp,-24
    6df4:	d8000115 	stw	zero,4(sp)
    6df8:	d9000015 	stw	r4,0(sp)
    6dfc:	180f883a 	mov	r7,r3
    6e00:	01800084 	movi	r6,2
    6e04:	100b883a 	mov	r5,r2
    6e08:	e13ffb17 	ldw	r4,-20(fp)
    6e0c:	0021b3c0 	call	21b3c <alt_avalon_i2c_master_tx_rx>
    6e10:	1004c03a 	cmpne	r2,r2,zero
    6e14:	10803fcc 	andi	r2,r2,255
    6e18:	10000326 	beq	r2,zero,6e28 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6e1c:	010000b4 	movhi	r4,2
    6e20:	211bd304 	addi	r4,r4,28492
    6e24:	000ff140 	call	ff14 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6e28:	e03ff715 	stw	zero,-36(fp)
    6e2c:	e0bffd03 	ldbu	r2,-12(fp)
    6e30:	e0fff717 	ldw	r3,-36(fp)
    6e34:	18801b0e 	bge	r3,r2,6ea4 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6e38:	e0bff717 	ldw	r2,-36(fp)
    6e3c:	1085883a 	add	r2,r2,r2
    6e40:	1007883a 	mov	r3,r2
    6e44:	e0bffe17 	ldw	r2,-8(fp)
    6e48:	10c7883a 	add	r3,r2,r3
    6e4c:	e0bff717 	ldw	r2,-36(fp)
    6e50:	1085883a 	add	r2,r2,r2
    6e54:	1009883a 	mov	r4,r2
    6e58:	e0bff917 	ldw	r2,-28(fp)
    6e5c:	1105883a 	add	r2,r2,r4
    6e60:	10800003 	ldbu	r2,0(r2)
    6e64:	10803fcc 	andi	r2,r2,255
    6e68:	1004923a 	slli	r2,r2,8
    6e6c:	100b883a 	mov	r5,r2
    6e70:	e0bff717 	ldw	r2,-36(fp)
    6e74:	1085883a 	add	r2,r2,r2
    6e78:	10800044 	addi	r2,r2,1
    6e7c:	e13ff917 	ldw	r4,-28(fp)
    6e80:	2085883a 	add	r2,r4,r2
    6e84:	10800003 	ldbu	r2,0(r2)
    6e88:	10803fcc 	andi	r2,r2,255
    6e8c:	2884b03a 	or	r2,r5,r2
    6e90:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6e94:	e0bff717 	ldw	r2,-36(fp)
    6e98:	10800044 	addi	r2,r2,1
    6e9c:	e0bff715 	stw	r2,-36(fp)
    6ea0:	003fe206 	br	6e2c <__alt_data_end+0xfc006e2c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6ea4:	e0bffd03 	ldbu	r2,-12(fp)
    6ea8:	1085883a 	add	r2,r2,r2
    6eac:	1007883a 	mov	r3,r2
    6eb0:	e0bffe17 	ldw	r2,-8(fp)
    6eb4:	10c5883a 	add	r2,r2,r3
    6eb8:	8037883a 	mov	sp,r16
}
    6ebc:	e6ffff04 	addi	sp,fp,-4
    6ec0:	dfc00217 	ldw	ra,8(sp)
    6ec4:	df000117 	ldw	fp,4(sp)
    6ec8:	dc000017 	ldw	r16,0(sp)
    6ecc:	dec00304 	addi	sp,sp,12
    6ed0:	f800283a 	ret

00006ed4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6ed4:	defffd04 	addi	sp,sp,-12
    6ed8:	dfc00215 	stw	ra,8(sp)
    6edc:	df000115 	stw	fp,4(sp)
    6ee0:	df000104 	addi	fp,sp,4
    6ee4:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6ee8:	01400284 	movi	r5,10
    6eec:	e13fff17 	ldw	r4,-4(fp)
    6ef0:	00217100 	call	21710 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6ef4:	01902f04 	movi	r6,16572
    6ef8:	01400c04 	movi	r5,48
    6efc:	e13fff17 	ldw	r4,-4(fp)
    6f00:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6f04:	01801384 	movi	r6,78
    6f08:	01400a04 	movi	r5,40
    6f0c:	e13fff17 	ldw	r4,-4(fp)
    6f10:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6f14:	01800844 	movi	r6,33
    6f18:	01400084 	movi	r5,2
    6f1c:	e13fff17 	ldw	r4,-4(fp)
    6f20:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6f24:	01800104 	movi	r6,4
    6f28:	01400104 	movi	r5,4
    6f2c:	e13fff17 	ldw	r4,-4(fp)
    6f30:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6f34:	000d883a 	mov	r6,zero
    6f38:	01400184 	movi	r5,6
    6f3c:	e13fff17 	ldw	r4,-4(fp)
    6f40:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6f44:	01800404 	movi	r6,16
    6f48:	01400284 	movi	r5,10
    6f4c:	e13fff17 	ldw	r4,-4(fp)
    6f50:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6f54:	0001883a 	nop
    6f58:	e037883a 	mov	sp,fp
    6f5c:	dfc00117 	ldw	ra,4(sp)
    6f60:	df000017 	ldw	fp,0(sp)
    6f64:	dec00204 	addi	sp,sp,8
    6f68:	f800283a 	ret

00006f6c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6f6c:	defffd04 	addi	sp,sp,-12
    6f70:	dfc00215 	stw	ra,8(sp)
    6f74:	df000115 	stw	fp,4(sp)
    6f78:	df000104 	addi	fp,sp,4
    6f7c:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6f80:	01860604 	movi	r6,6168
    6f84:	01400884 	movi	r5,34
    6f88:	e13fff17 	ldw	r4,-4(fp)
    6f8c:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6f90:	019c1c04 	movi	r6,28784
    6f94:	01400404 	movi	r5,16
    6f98:	e13fff17 	ldw	r4,-4(fp)
    6f9c:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6fa0:	01808004 	movi	r6,512
    6fa4:	01400384 	movi	r5,14
    6fa8:	e13fff17 	ldw	r4,-4(fp)
    6fac:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6fb0:	01804044 	movi	r6,257
    6fb4:	01400904 	movi	r5,36
    6fb8:	e13fff17 	ldw	r4,-4(fp)
    6fbc:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6fc0:	0001883a 	nop
    6fc4:	e037883a 	mov	sp,fp
    6fc8:	dfc00117 	ldw	ra,4(sp)
    6fcc:	df000017 	ldw	fp,0(sp)
    6fd0:	dec00204 	addi	sp,sp,8
    6fd4:	f800283a 	ret

00006fd8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6fd8:	defffd04 	addi	sp,sp,-12
    6fdc:	dfc00215 	stw	ra,8(sp)
    6fe0:	df000115 	stw	fp,4(sp)
    6fe4:	df000104 	addi	fp,sp,4
    6fe8:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6fec:	000b883a 	mov	r5,zero
    6ff0:	e13fff17 	ldw	r4,-4(fp)
    6ff4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ff8:	10bfffcc 	andi	r2,r2,65535
    6ffc:	100b883a 	mov	r5,r2
    7000:	010000b4 	movhi	r4,2
    7004:	211bd904 	addi	r4,r4,28516
    7008:	000ff140 	call	ff14 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    700c:	01400084 	movi	r5,2
    7010:	e13fff17 	ldw	r4,-4(fp)
    7014:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7018:	10bfffcc 	andi	r2,r2,65535
    701c:	100b883a 	mov	r5,r2
    7020:	010000b4 	movhi	r4,2
    7024:	211bdc04 	addi	r4,r4,28528
    7028:	000ff140 	call	ff14 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    702c:	01400104 	movi	r5,4
    7030:	e13fff17 	ldw	r4,-4(fp)
    7034:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7038:	10bfffcc 	andi	r2,r2,65535
    703c:	100b883a 	mov	r5,r2
    7040:	010000b4 	movhi	r4,2
    7044:	211be104 	addi	r4,r4,28548
    7048:	000ff140 	call	ff14 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    704c:	01400184 	movi	r5,6
    7050:	e13fff17 	ldw	r4,-4(fp)
    7054:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7058:	10bfffcc 	andi	r2,r2,65535
    705c:	100b883a 	mov	r5,r2
    7060:	010000b4 	movhi	r4,2
    7064:	211be604 	addi	r4,r4,28568
    7068:	000ff140 	call	ff14 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    706c:	01400284 	movi	r5,10
    7070:	e13fff17 	ldw	r4,-4(fp)
    7074:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7078:	10bfffcc 	andi	r2,r2,65535
    707c:	100b883a 	mov	r5,r2
    7080:	010000b4 	movhi	r4,2
    7084:	211beb04 	addi	r4,r4,28588
    7088:	000ff140 	call	ff14 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    708c:	01400c04 	movi	r5,48
    7090:	e13fff17 	ldw	r4,-4(fp)
    7094:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7098:	10bfffcc 	andi	r2,r2,65535
    709c:	100b883a 	mov	r5,r2
    70a0:	010000b4 	movhi	r4,2
    70a4:	211bf004 	addi	r4,r4,28608
    70a8:	000ff140 	call	ff14 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    70ac:	01400384 	movi	r5,14
    70b0:	e13fff17 	ldw	r4,-4(fp)
    70b4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70b8:	10bfffcc 	andi	r2,r2,65535
    70bc:	100b883a 	mov	r5,r2
    70c0:	010000b4 	movhi	r4,2
    70c4:	211bf504 	addi	r4,r4,28628
    70c8:	000ff140 	call	ff14 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    70cc:	01400904 	movi	r5,36
    70d0:	e13fff17 	ldw	r4,-4(fp)
    70d4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70d8:	10bfffcc 	andi	r2,r2,65535
    70dc:	100b883a 	mov	r5,r2
    70e0:	010000b4 	movhi	r4,2
    70e4:	211bfa04 	addi	r4,r4,28648
    70e8:	000ff140 	call	ff14 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    70ec:	01400e04 	movi	r5,56
    70f0:	e13fff17 	ldw	r4,-4(fp)
    70f4:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70f8:	10bfffcc 	andi	r2,r2,65535
    70fc:	100b883a 	mov	r5,r2
    7100:	010000b4 	movhi	r4,2
    7104:	211bff04 	addi	r4,r4,28668
    7108:	000ff140 	call	ff14 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    710c:	01400804 	movi	r5,32
    7110:	e13fff17 	ldw	r4,-4(fp)
    7114:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7118:	10bfffcc 	andi	r2,r2,65535
    711c:	100b883a 	mov	r5,r2
    7120:	010000b4 	movhi	r4,2
    7124:	211c0404 	addi	r4,r4,28688
    7128:	000ff140 	call	ff14 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    712c:	01400404 	movi	r5,16
    7130:	e13fff17 	ldw	r4,-4(fp)
    7134:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7138:	10bfffcc 	andi	r2,r2,65535
    713c:	100b883a 	mov	r5,r2
    7140:	010000b4 	movhi	r4,2
    7144:	211c0904 	addi	r4,r4,28708
    7148:	000ff140 	call	ff14 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    714c:	01400884 	movi	r5,34
    7150:	e13fff17 	ldw	r4,-4(fp)
    7154:	0006c800 	call	6c80 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7158:	10bfffcc 	andi	r2,r2,65535
    715c:	100b883a 	mov	r5,r2
    7160:	010000b4 	movhi	r4,2
    7164:	211c0e04 	addi	r4,r4,28728
    7168:	000ff140 	call	ff14 <printf>
}
    716c:	0001883a 	nop
    7170:	e037883a 	mov	sp,fp
    7174:	dfc00117 	ldw	ra,4(sp)
    7178:	df000017 	ldw	fp,0(sp)
    717c:	dec00204 	addi	sp,sp,8
    7180:	f800283a 	ret

00007184 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
    7184:	defffa04 	addi	sp,sp,-24
    7188:	dfc00515 	stw	ra,20(sp)
    718c:	df000415 	stw	fp,16(sp)
    7190:	df000404 	addi	fp,sp,16
    7194:	e13ffe15 	stw	r4,-8(fp)
    7198:	2805883a 	mov	r2,r5
    719c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = DAC_MIN_VOL - ((vol * DAC_VOL_RANGE) / 0x7F);
    71a0:	e0bfff03 	ldbu	r2,-4(fp)
    71a4:	01402d04 	movi	r5,180
    71a8:	1009883a 	mov	r4,r2
    71ac:	000d8d40 	call	d8d4 <__mulsi3>
    71b0:	01401fc4 	movi	r5,127
    71b4:	1009883a 	mov	r4,r2
    71b8:	000d7200 	call	d720 <__divsi3>
    71bc:	1007883a 	mov	r3,r2
    71c0:	00803c04 	movi	r2,240
    71c4:	10c5c83a 	sub	r2,r2,r3
    71c8:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
    71cc:	e0bffc17 	ldw	r2,-16(fp)
    71d0:	1004923a 	slli	r2,r2,8
    71d4:	1007883a 	mov	r3,r2
    71d8:	e0bffc17 	ldw	r2,-16(fp)
    71dc:	1884b03a 	or	r2,r3,r2
    71e0:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, DAC_VOL, set_vol);
    71e4:	e0bffd0b 	ldhu	r2,-12(fp)
    71e8:	100d883a 	mov	r6,r2
    71ec:	01400404 	movi	r5,16
    71f0:	e13ffe17 	ldw	r4,-8(fp)
    71f4:	0006a240 	call	6a24 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    71f8:	0001883a 	nop
    71fc:	e037883a 	mov	sp,fp
    7200:	dfc00117 	ldw	ra,4(sp)
    7204:	df000017 	ldw	fp,0(sp)
    7208:	dec00204 	addi	sp,sp,8
    720c:	f800283a 	ret

00007210 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    7210:	defffb04 	addi	sp,sp,-20
    7214:	dfc00415 	stw	ra,16(sp)
    7218:	df000315 	stw	fp,12(sp)
    721c:	df000304 	addi	fp,sp,12
    7220:	e13ffe15 	stw	r4,-8(fp)
    7224:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    7228:	e0bffe17 	ldw	r2,-8(fp)
    722c:	1009883a 	mov	r4,r2
    7230:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    7234:	e0bffe17 	ldw	r2,-8(fp)
    7238:	10800104 	addi	r2,r2,4
    723c:	1009883a 	mov	r4,r2
    7240:	00091180 	call	9118 <_ZN21UsbMidiConfigXtracterC1Ev>
    7244:	008000b4 	movhi	r2,2
    7248:	109c1d04 	addi	r2,r2,28788
    724c:	e0fffe17 	ldw	r3,-8(fp)
    7250:	18800015 	stw	r2,0(r3)
    7254:	008000b4 	movhi	r2,2
    7258:	109c2904 	addi	r2,r2,28836
    725c:	e0fffe17 	ldw	r3,-8(fp)
    7260:	18800115 	stw	r2,4(r3)
    7264:	e0bffe17 	ldw	r2,-8(fp)
    7268:	e0ffff17 	ldw	r3,-4(fp)
    726c:	10c00215 	stw	r3,8(r2)
    7270:	e0bffe17 	ldw	r2,-8(fp)
    7274:	10000305 	stb	zero,12(r2)
    7278:	e0bffe17 	ldw	r2,-8(fp)
    727c:	10000345 	stb	zero,13(r2)
    7280:	e0bffe17 	ldw	r2,-8(fp)
    7284:	10001705 	stb	zero,92(r2)
    7288:	e0bffe17 	ldw	r2,-8(fp)
    728c:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7290:	e03ffd05 	stb	zero,-12(fp)
    7294:	e0bffd03 	ldbu	r2,-12(fp)
    7298:	108000e8 	cmpgeui	r2,r2,3
    729c:	10002d1e 	bne	r2,zero,7354 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    72a0:	e0fffd03 	ldbu	r3,-12(fp)
    72a4:	e13ffe17 	ldw	r4,-8(fp)
    72a8:	1805883a 	mov	r2,r3
    72ac:	1085883a 	add	r2,r2,r2
    72b0:	10c5883a 	add	r2,r2,r3
    72b4:	2085883a 	add	r2,r4,r2
    72b8:	108004c4 	addi	r2,r2,19
    72bc:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    72c0:	e13ffd03 	ldbu	r4,-12(fp)
    72c4:	e0bffd03 	ldbu	r2,-12(fp)
    72c8:	10000226 	beq	r2,zero,72d4 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    72cc:	0007883a 	mov	r3,zero
    72d0:	00000106 	br	72d8 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    72d4:	00c00204 	movi	r3,8
    72d8:	e17ffe17 	ldw	r5,-8(fp)
    72dc:	2005883a 	mov	r2,r4
    72e0:	1085883a 	add	r2,r2,r2
    72e4:	1105883a 	add	r2,r2,r4
    72e8:	2885883a 	add	r2,r5,r2
    72ec:	10800504 	addi	r2,r2,20
    72f0:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    72f4:	e13ffd03 	ldbu	r4,-12(fp)
    72f8:	e0bffd03 	ldbu	r2,-12(fp)
    72fc:	10000226 	beq	r2,zero,7308 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    7300:	00c00044 	movi	r3,1
    7304:	00000106 	br	730c <_ZN9USBH_MIDIC1EP3USB+0xfc>
    7308:	00c003c4 	movi	r3,15
    730c:	e17ffe17 	ldw	r5,-8(fp)
    7310:	2005883a 	mov	r2,r4
    7314:	1085883a 	add	r2,r2,r2
    7318:	1105883a 	add	r2,r2,r4
    731c:	2885883a 	add	r2,r5,r2
    7320:	10800404 	addi	r2,r2,16
    7324:	18c7883a 	add	r3,r3,r3
    7328:	18cb883a 	add	r5,r3,r3
    732c:	10c00143 	ldbu	r3,5(r2)
    7330:	18c000cc 	andi	r3,r3,3
    7334:	1809883a 	mov	r4,r3
    7338:	2807883a 	mov	r3,r5
    733c:	20c6b03a 	or	r3,r4,r3
    7340:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7344:	e0bffd03 	ldbu	r2,-12(fp)
    7348:	10800044 	addi	r2,r2,1
    734c:	e0bffd05 	stb	r2,-12(fp)
    7350:	003fd006 	br	7294 <__alt_data_end+0xfc007294>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7354:	e0bffe17 	ldw	r2,-8(fp)
    7358:	10800217 	ldw	r2,8(r2)
    735c:	10000626 	beq	r2,zero,7378 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7360:	e0bffe17 	ldw	r2,-8(fp)
    7364:	10800217 	ldw	r2,8(r2)
    7368:	e0fffe17 	ldw	r3,-8(fp)
    736c:	180b883a 	mov	r5,r3
    7370:	1009883a 	mov	r4,r2
    7374:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7378:	0001883a 	nop
    737c:	e037883a 	mov	sp,fp
    7380:	dfc00117 	ldw	ra,4(sp)
    7384:	df000017 	ldw	fp,0(sp)
    7388:	dec00204 	addi	sp,sp,8
    738c:	f800283a 	ret

00007390 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7390:	deffe004 	addi	sp,sp,-128
    7394:	dfc01f15 	stw	ra,124(sp)
    7398:	df001e15 	stw	fp,120(sp)
    739c:	df001e04 	addi	fp,sp,120
    73a0:	e13ffc15 	stw	r4,-16(fp)
    73a4:	2809883a 	mov	r4,r5
    73a8:	3007883a 	mov	r3,r6
    73ac:	3805883a 	mov	r2,r7
    73b0:	e13ffd05 	stb	r4,-12(fp)
    73b4:	e0fffe05 	stb	r3,-8(fp)
    73b8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    73bc:	e0bfe944 	addi	r2,fp,-91
    73c0:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    73c4:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    73c8:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    73cc:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    73d0:	00800044 	movi	r2,1
    73d4:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    73d8:	00800044 	movi	r2,1
    73dc:	e0bfe3c5 	stb	r2,-113(fp)
    73e0:	e0bfe3c3 	ldbu	r2,-113(fp)
    73e4:	108000e8 	cmpgeui	r2,r2,3
    73e8:	10001a1e 	bne	r2,zero,7454 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    73ec:	e0ffe3c3 	ldbu	r3,-113(fp)
    73f0:	e13ffc17 	ldw	r4,-16(fp)
    73f4:	1805883a 	mov	r2,r3
    73f8:	1085883a 	add	r2,r2,r2
    73fc:	10c5883a 	add	r2,r2,r3
    7400:	2085883a 	add	r2,r4,r2
    7404:	10800404 	addi	r2,r2,16
    7408:	11000143 	ldbu	r4,5(r2)
    740c:	00ffff84 	movi	r3,-2
    7410:	20c6703a 	and	r3,r4,r3
    7414:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    7418:	e0ffe3c3 	ldbu	r3,-113(fp)
    741c:	e13ffc17 	ldw	r4,-16(fp)
    7420:	1805883a 	mov	r2,r3
    7424:	1085883a 	add	r2,r2,r2
    7428:	10c5883a 	add	r2,r2,r3
    742c:	2085883a 	add	r2,r4,r2
    7430:	10800404 	addi	r2,r2,16
    7434:	11000143 	ldbu	r4,5(r2)
    7438:	00ffff44 	movi	r3,-3
    743c:	20c6703a 	and	r3,r4,r3
    7440:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7444:	e0bfe3c3 	ldbu	r2,-113(fp)
    7448:	10800044 	addi	r2,r2,1
    744c:	e0bfe3c5 	stb	r2,-113(fp)
    7450:	003fe306 	br	73e0 <__alt_data_end+0xfc0073e0>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7454:	e0bffc17 	ldw	r2,-16(fp)
    7458:	10800217 	ldw	r2,8(r2)
    745c:	1009883a 	mov	r4,r2
    7460:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7464:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7468:	e0bffc17 	ldw	r2,-16(fp)
    746c:	10800303 	ldbu	r2,12(r2)
    7470:	10803fcc 	andi	r2,r2,255
    7474:	10000226 	beq	r2,zero,7480 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7478:	00bff644 	movi	r2,-39
    747c:	0001c706 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7480:	e0bfe817 	ldw	r2,-96(fp)
    7484:	10800017 	ldw	r2,0(r2)
    7488:	10800017 	ldw	r2,0(r2)
    748c:	e0fffc17 	ldw	r3,-16(fp)
    7490:	18c00303 	ldbu	r3,12(r3)
    7494:	18c03fcc 	andi	r3,r3,255
    7498:	180b883a 	mov	r5,r3
    749c:	e13fe817 	ldw	r4,-96(fp)
    74a0:	103ee83a 	callr	r2
    74a4:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    74a8:	e0bfe617 	ldw	r2,-104(fp)
    74ac:	1000021e 	bne	r2,zero,74b8 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    74b0:	00bff584 	movi	r2,-42
    74b4:	0001b906 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    74b8:	e0bfe617 	ldw	r2,-104(fp)
    74bc:	10c00003 	ldbu	r3,0(r2)
    74c0:	11000043 	ldbu	r4,1(r2)
    74c4:	2008923a 	slli	r4,r4,8
    74c8:	20c6b03a 	or	r3,r4,r3
    74cc:	11000083 	ldbu	r4,2(r2)
    74d0:	2008943a 	slli	r4,r4,16
    74d4:	20c6b03a 	or	r3,r4,r3
    74d8:	108000c3 	ldbu	r2,3(r2)
    74dc:	1004963a 	slli	r2,r2,24
    74e0:	10c4b03a 	or	r2,r2,r3
    74e4:	1000021e 	bne	r2,zero,74f0 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    74e8:	00bff5c4 	movi	r2,-41
    74ec:	0001ab06 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    74f0:	e0bfe617 	ldw	r2,-104(fp)
    74f4:	10c00003 	ldbu	r3,0(r2)
    74f8:	11000043 	ldbu	r4,1(r2)
    74fc:	2008923a 	slli	r4,r4,8
    7500:	20c6b03a 	or	r3,r4,r3
    7504:	11000083 	ldbu	r4,2(r2)
    7508:	2008943a 	slli	r4,r4,16
    750c:	20c6b03a 	or	r3,r4,r3
    7510:	108000c3 	ldbu	r2,3(r2)
    7514:	1004963a 	slli	r2,r2,24
    7518:	10c4b03a 	or	r2,r2,r3
    751c:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7520:	e0bffc17 	ldw	r2,-16(fp)
    7524:	10c004c4 	addi	r3,r2,19
    7528:	e0bfe617 	ldw	r2,-104(fp)
    752c:	19803fcc 	andi	r6,r3,255
    7530:	11000003 	ldbu	r4,0(r2)
    7534:	2008703a 	and	r4,r4,zero
    7538:	200b883a 	mov	r5,r4
    753c:	3009883a 	mov	r4,r6
    7540:	2908b03a 	or	r4,r5,r4
    7544:	11000005 	stb	r4,0(r2)
    7548:	1808d23a 	srli	r4,r3,8
    754c:	21803fcc 	andi	r6,r4,255
    7550:	11000043 	ldbu	r4,1(r2)
    7554:	2008703a 	and	r4,r4,zero
    7558:	200b883a 	mov	r5,r4
    755c:	3009883a 	mov	r4,r6
    7560:	2908b03a 	or	r4,r5,r4
    7564:	11000045 	stb	r4,1(r2)
    7568:	1808d43a 	srli	r4,r3,16
    756c:	21803fcc 	andi	r6,r4,255
    7570:	11000083 	ldbu	r4,2(r2)
    7574:	2008703a 	and	r4,r4,zero
    7578:	200b883a 	mov	r5,r4
    757c:	3009883a 	mov	r4,r6
    7580:	2908b03a 	or	r4,r5,r4
    7584:	11000085 	stb	r4,2(r2)
    7588:	180ad63a 	srli	r5,r3,24
    758c:	10c000c3 	ldbu	r3,3(r2)
    7590:	1806703a 	and	r3,r3,zero
    7594:	1809883a 	mov	r4,r3
    7598:	2807883a 	mov	r3,r5
    759c:	20c6b03a 	or	r3,r4,r3
    75a0:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    75a4:	e0bfe617 	ldw	r2,-104(fp)
    75a8:	e0ffff03 	ldbu	r3,-4(fp)
    75ac:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    75b0:	e0bffc17 	ldw	r2,-16(fp)
    75b4:	10c00217 	ldw	r3,8(r2)
    75b8:	e0bfe944 	addi	r2,fp,-91
    75bc:	d8800015 	stw	r2,0(sp)
    75c0:	01c00204 	movi	r7,8
    75c4:	000d883a 	mov	r6,zero
    75c8:	000b883a 	mov	r5,zero
    75cc:	1809883a 	mov	r4,r3
    75d0:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    75d4:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    75d8:	e0bfe617 	ldw	r2,-104(fp)
    75dc:	e0ffe717 	ldw	r3,-100(fp)
    75e0:	19403fcc 	andi	r5,r3,255
    75e4:	10c00003 	ldbu	r3,0(r2)
    75e8:	1806703a 	and	r3,r3,zero
    75ec:	1809883a 	mov	r4,r3
    75f0:	2807883a 	mov	r3,r5
    75f4:	20c6b03a 	or	r3,r4,r3
    75f8:	10c00005 	stb	r3,0(r2)
    75fc:	e0ffe717 	ldw	r3,-100(fp)
    7600:	1806d23a 	srli	r3,r3,8
    7604:	19403fcc 	andi	r5,r3,255
    7608:	10c00043 	ldbu	r3,1(r2)
    760c:	1806703a 	and	r3,r3,zero
    7610:	1809883a 	mov	r4,r3
    7614:	2807883a 	mov	r3,r5
    7618:	20c6b03a 	or	r3,r4,r3
    761c:	10c00045 	stb	r3,1(r2)
    7620:	e0ffe717 	ldw	r3,-100(fp)
    7624:	1806d43a 	srli	r3,r3,16
    7628:	19403fcc 	andi	r5,r3,255
    762c:	10c00083 	ldbu	r3,2(r2)
    7630:	1806703a 	and	r3,r3,zero
    7634:	1809883a 	mov	r4,r3
    7638:	2807883a 	mov	r3,r5
    763c:	20c6b03a 	or	r3,r4,r3
    7640:	10c00085 	stb	r3,2(r2)
    7644:	e0ffe717 	ldw	r3,-100(fp)
    7648:	180ad63a 	srli	r5,r3,24
    764c:	10c000c3 	ldbu	r3,3(r2)
    7650:	1806703a 	and	r3,r3,zero
    7654:	1809883a 	mov	r4,r3
    7658:	2807883a 	mov	r3,r5
    765c:	20c6b03a 	or	r3,r4,r3
    7660:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7664:	e0bfe303 	ldbu	r2,-116(fp)
    7668:	10013a1e 	bne	r2,zero,7b54 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    766c:	e0bfe817 	ldw	r2,-96(fp)
    7670:	10800017 	ldw	r2,0(r2)
    7674:	10800104 	addi	r2,r2,4
    7678:	10800017 	ldw	r2,0(r2)
    767c:	e0fffd03 	ldbu	r3,-12(fp)
    7680:	e13ffe03 	ldbu	r4,-8(fp)
    7684:	200f883a 	mov	r7,r4
    7688:	000d883a 	mov	r6,zero
    768c:	180b883a 	mov	r5,r3
    7690:	e13fe817 	ldw	r4,-96(fp)
    7694:	103ee83a 	callr	r2
    7698:	1007883a 	mov	r3,r2
    769c:	e0bffc17 	ldw	r2,-16(fp)
    76a0:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    76a4:	e0bffc17 	ldw	r2,-16(fp)
    76a8:	10800303 	ldbu	r2,12(r2)
    76ac:	10803fcc 	andi	r2,r2,255
    76b0:	1000021e 	bne	r2,zero,76bc <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    76b4:	00bff504 	movi	r2,-44
    76b8:	00013806 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    76bc:	e0bfe517 	ldw	r2,-108(fp)
    76c0:	10c001c3 	ldbu	r3,7(r2)
    76c4:	e0bffc17 	ldw	r2,-16(fp)
    76c8:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    76cc:	e0bffc17 	ldw	r2,-16(fp)
    76d0:	10c00217 	ldw	r3,8(r2)
    76d4:	e0bffc17 	ldw	r2,-16(fp)
    76d8:	10800303 	ldbu	r2,12(r2)
    76dc:	10803fcc 	andi	r2,r2,255
    76e0:	100f883a 	mov	r7,r2
    76e4:	000d883a 	mov	r6,zero
    76e8:	000b883a 	mov	r5,zero
    76ec:	1809883a 	mov	r4,r3
    76f0:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    76f4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    76f8:	e0bfe303 	ldbu	r2,-116(fp)
    76fc:	10001026 	beq	r2,zero,7740 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    7700:	e0bfe617 	ldw	r2,-104(fp)
    7704:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    7708:	e0bfe817 	ldw	r2,-96(fp)
    770c:	10800017 	ldw	r2,0(r2)
    7710:	10800204 	addi	r2,r2,8
    7714:	10800017 	ldw	r2,0(r2)
    7718:	e0fffc17 	ldw	r3,-16(fp)
    771c:	18c00303 	ldbu	r3,12(r3)
    7720:	18c03fcc 	andi	r3,r3,255
    7724:	180b883a 	mov	r5,r3
    7728:	e13fe817 	ldw	r4,-96(fp)
    772c:	103ee83a 	callr	r2
                bAddress = 0;
    7730:	e0bffc17 	ldw	r2,-16(fp)
    7734:	10000305 	stb	zero,12(r2)
                return rcode;
    7738:	e0bfe303 	ldbu	r2,-116(fp)
    773c:	00011706 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7740:	e0bffc17 	ldw	r2,-16(fp)
    7744:	10800303 	ldbu	r2,12(r2)
    7748:	10803fcc 	andi	r2,r2,255
    774c:	01402004 	movi	r5,128
    7750:	1009883a 	mov	r4,r2
    7754:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7758:	e0bfe617 	ldw	r2,-104(fp)
    775c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7760:	e0bfe817 	ldw	r2,-96(fp)
    7764:	10800017 	ldw	r2,0(r2)
    7768:	10800017 	ldw	r2,0(r2)
    776c:	e0fffc17 	ldw	r3,-16(fp)
    7770:	18c00303 	ldbu	r3,12(r3)
    7774:	18c03fcc 	andi	r3,r3,255
    7778:	180b883a 	mov	r5,r3
    777c:	e13fe817 	ldw	r4,-96(fp)
    7780:	103ee83a 	callr	r2
    7784:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7788:	e0bfe617 	ldw	r2,-104(fp)
    778c:	1000021e 	bne	r2,zero,7798 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7790:	00bff584 	movi	r2,-42
    7794:	00010106 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7798:	e0bfe617 	ldw	r2,-104(fp)
    779c:	e0ffff03 	ldbu	r3,-4(fp)
    77a0:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    77a4:	e0bffc17 	ldw	r2,-16(fp)
    77a8:	10c00217 	ldw	r3,8(r2)
    77ac:	e0bffc17 	ldw	r2,-16(fp)
    77b0:	10800303 	ldbu	r2,12(r2)
    77b4:	11003fcc 	andi	r4,r2,255
    77b8:	00800484 	movi	r2,18
    77bc:	117fffcc 	andi	r5,r2,65535
    77c0:	e0bfe944 	addi	r2,fp,-91
    77c4:	d8800015 	stw	r2,0(sp)
    77c8:	280f883a 	mov	r7,r5
    77cc:	000d883a 	mov	r6,zero
    77d0:	200b883a 	mov	r5,r4
    77d4:	1809883a 	mov	r4,r3
    77d8:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    77dc:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    77e0:	e0bfe303 	ldbu	r2,-116(fp)
    77e4:	1000dd1e 	bne	r2,zero,7b5c <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    77e8:	e0bfe517 	ldw	r2,-108(fp)
    77ec:	10c00203 	ldbu	r3,8(r2)
    77f0:	10800243 	ldbu	r2,9(r2)
    77f4:	1004923a 	slli	r2,r2,8
    77f8:	10c4b03a 	or	r2,r2,r3
    77fc:	1007883a 	mov	r3,r2
    7800:	e0bffc17 	ldw	r2,-16(fp)
    7804:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    7808:	e0bfe517 	ldw	r2,-108(fp)
    780c:	10c00283 	ldbu	r3,10(r2)
    7810:	108002c3 	ldbu	r2,11(r2)
    7814:	1004923a 	slli	r2,r2,8
    7818:	10c4b03a 	or	r2,r2,r3
    781c:	1007883a 	mov	r3,r2
    7820:	e0bffc17 	ldw	r2,-16(fp)
    7824:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7828:	e0bfe517 	ldw	r2,-108(fp)
    782c:	10800443 	ldbu	r2,17(r2)
    7830:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7834:	e0bffc17 	ldw	r2,-16(fp)
    7838:	10c00217 	ldw	r3,8(r2)
    783c:	e0bffc17 	ldw	r2,-16(fp)
    7840:	10800303 	ldbu	r2,12(r2)
    7844:	11003fcc 	andi	r4,r2,255
    7848:	e0bffc17 	ldw	r2,-16(fp)
    784c:	108004c4 	addi	r2,r2,19
    7850:	100f883a 	mov	r7,r2
    7854:	01800044 	movi	r6,1
    7858:	200b883a 	mov	r5,r4
    785c:	1809883a 	mov	r4,r3
    7860:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7864:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7868:	e0bfe303 	ldbu	r2,-116(fp)
    786c:	1000bd1e 	bne	r2,zero,7b64 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7870:	e0bffc17 	ldw	r2,-16(fp)
    7874:	1080040b 	ldhu	r2,16(r2)
    7878:	10bfffcc 	andi	r2,r2,65535
    787c:	01402004 	movi	r5,128
    7880:	1009883a 	mov	r4,r2
    7884:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7888:	e0bffc17 	ldw	r2,-16(fp)
    788c:	1080038b 	ldhu	r2,14(r2)
    7890:	10bfffcc 	andi	r2,r2,65535
    7894:	01402004 	movi	r5,128
    7898:	1009883a 	mov	r4,r2
    789c:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    78a0:	e0bfe903 	ldbu	r2,-92(fp)
    78a4:	01402004 	movi	r5,128
    78a8:	1009883a 	mov	r4,r2
    78ac:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    78b0:	e0bffc17 	ldw	r2,-16(fp)
    78b4:	00c000c4 	movi	r3,3
    78b8:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    78bc:	e13ffc17 	ldw	r4,-16(fp)
    78c0:	0007c280 	call	7c28 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    78c4:	e03fe405 	stb	zero,-112(fp)
    78c8:	e0ffe403 	ldbu	r3,-112(fp)
    78cc:	e0bfe903 	ldbu	r2,-92(fp)
    78d0:	18802a2e 	bgeu	r3,r2,797c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    78d4:	e0bffc17 	ldw	r2,-16(fp)
    78d8:	10c00104 	addi	r3,r2,4
    78dc:	e0bfee04 	addi	r2,fp,-72
    78e0:	01800044 	movi	r6,1
    78e4:	180b883a 	mov	r5,r3
    78e8:	1009883a 	mov	r4,r2
    78ec:	00087280 	call	8728 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    78f0:	e0bffc17 	ldw	r2,-16(fp)
    78f4:	10c00217 	ldw	r3,8(r2)
    78f8:	e0bffc17 	ldw	r2,-16(fp)
    78fc:	10800303 	ldbu	r2,12(r2)
    7900:	11003fcc 	andi	r4,r2,255
    7904:	e17fe403 	ldbu	r5,-112(fp)
    7908:	e0bfee04 	addi	r2,fp,-72
    790c:	d8800015 	stw	r2,0(sp)
    7910:	280f883a 	mov	r7,r5
    7914:	000d883a 	mov	r6,zero
    7918:	200b883a 	mov	r5,r4
    791c:	1809883a 	mov	r4,r3
    7920:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7924:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7928:	e0bfe303 	ldbu	r2,-116(fp)
    792c:	10008f1e 	bne	r2,zero,7b6c <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7930:	e0bfee04 	addi	r2,fp,-72
    7934:	1009883a 	mov	r4,r2
    7938:	00090340 	call	9034 <_ZN14MidiDescParser9getNumEPsEv>
    793c:	1007883a 	mov	r3,r2
    7940:	e0bfe383 	ldbu	r2,-114(fp)
    7944:	10c5883a 	add	r2,r2,r3
    7948:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    794c:	e0bfe383 	ldbu	r2,-114(fp)
    7950:	108000b0 	cmpltui	r2,r2,2
    7954:	1000051e 	bne	r2,zero,796c <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7958:	e0bfee04 	addi	r2,fp,-72
    795c:	1009883a 	mov	r4,r2
    7960:	000900c0 	call	900c <_ZN14MidiDescParser12getConfValueEv>
    7964:	e0bfe345 	stb	r2,-115(fp)
    7968:	00000406 	br	797c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    796c:	e0bfe403 	ldbu	r2,-112(fp)
    7970:	10800044 	addi	r2,r2,1
    7974:	e0bfe405 	stb	r2,-112(fp)
    7978:	003fd306 	br	78c8 <__alt_data_end+0xfc0078c8>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    797c:	e0bfe383 	ldbu	r2,-114(fp)
    7980:	01402004 	movi	r5,128
    7984:	1009883a 	mov	r4,r2
    7988:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    798c:	e0bfe383 	ldbu	r2,-114(fp)
    7990:	10800058 	cmpnei	r2,r2,1
    7994:	1000321e 	bne	r2,zero,7a60 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7998:	e03fe445 	stb	zero,-111(fp)
    799c:	e0ffe443 	ldbu	r3,-111(fp)
    79a0:	e0bfe903 	ldbu	r2,-92(fp)
    79a4:	18802a2e 	bgeu	r3,r2,7a50 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    79a8:	e0bffc17 	ldw	r2,-16(fp)
    79ac:	10c00104 	addi	r3,r2,4
    79b0:	e0bfee04 	addi	r2,fp,-72
    79b4:	000d883a 	mov	r6,zero
    79b8:	180b883a 	mov	r5,r3
    79bc:	1009883a 	mov	r4,r2
    79c0:	00087280 	call	8728 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    79c4:	e0bffc17 	ldw	r2,-16(fp)
    79c8:	10c00217 	ldw	r3,8(r2)
    79cc:	e0bffc17 	ldw	r2,-16(fp)
    79d0:	10800303 	ldbu	r2,12(r2)
    79d4:	11003fcc 	andi	r4,r2,255
    79d8:	e17fe443 	ldbu	r5,-111(fp)
    79dc:	e0bfee04 	addi	r2,fp,-72
    79e0:	d8800015 	stw	r2,0(sp)
    79e4:	280f883a 	mov	r7,r5
    79e8:	000d883a 	mov	r6,zero
    79ec:	200b883a 	mov	r5,r4
    79f0:	1809883a 	mov	r4,r3
    79f4:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    79f8:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    79fc:	e0bfe303 	ldbu	r2,-116(fp)
    7a00:	10005c1e 	bne	r2,zero,7b74 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7a04:	e0bfee04 	addi	r2,fp,-72
    7a08:	1009883a 	mov	r4,r2
    7a0c:	00090340 	call	9034 <_ZN14MidiDescParser9getNumEPsEv>
    7a10:	1007883a 	mov	r3,r2
    7a14:	e0bfe383 	ldbu	r2,-114(fp)
    7a18:	10c5883a 	add	r2,r2,r3
    7a1c:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7a20:	e0bfe383 	ldbu	r2,-114(fp)
    7a24:	108000b0 	cmpltui	r2,r2,2
    7a28:	1000051e 	bne	r2,zero,7a40 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7a2c:	e0bfee04 	addi	r2,fp,-72
    7a30:	1009883a 	mov	r4,r2
    7a34:	000900c0 	call	900c <_ZN14MidiDescParser12getConfValueEv>
    7a38:	e0bfe345 	stb	r2,-115(fp)
    7a3c:	00000406 	br	7a50 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7a40:	e0bfe443 	ldbu	r2,-111(fp)
    7a44:	10800044 	addi	r2,r2,1
    7a48:	e0bfe445 	stb	r2,-111(fp)
    7a4c:	003fd306 	br	799c <__alt_data_end+0xfc00799c>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7a50:	e0bfe383 	ldbu	r2,-114(fp)
    7a54:	01402004 	movi	r5,128
    7a58:	1009883a 	mov	r4,r2
    7a5c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7a60:	e0bfe383 	ldbu	r2,-114(fp)
    7a64:	108000a8 	cmpgeui	r2,r2,2
    7a68:	1000031e 	bne	r2,zero,7a78 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7a6c:	00bfffc4 	movi	r2,-1
    7a70:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7a74:	00004206 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7a78:	e0bffc17 	ldw	r2,-16(fp)
    7a7c:	10c00217 	ldw	r3,8(r2)
    7a80:	e0bffc17 	ldw	r2,-16(fp)
    7a84:	10800303 	ldbu	r2,12(r2)
    7a88:	11003fcc 	andi	r4,r2,255
    7a8c:	e0bffc17 	ldw	r2,-16(fp)
    7a90:	108004c4 	addi	r2,r2,19
    7a94:	100f883a 	mov	r7,r2
    7a98:	018000c4 	movi	r6,3
    7a9c:	200b883a 	mov	r5,r4
    7aa0:	1809883a 	mov	r4,r3
    7aa4:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7aa8:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7aac:	e0bfe343 	ldbu	r2,-115(fp)
    7ab0:	01402004 	movi	r5,128
    7ab4:	1009883a 	mov	r4,r2
    7ab8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7abc:	e0bffc17 	ldw	r2,-16(fp)
    7ac0:	10800583 	ldbu	r2,22(r2)
    7ac4:	10bfe004 	addi	r2,r2,-128
    7ac8:	10803fcc 	andi	r2,r2,255
    7acc:	01402004 	movi	r5,128
    7ad0:	1009883a 	mov	r4,r2
    7ad4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7ad8:	e0bffc17 	ldw	r2,-16(fp)
    7adc:	10800643 	ldbu	r2,25(r2)
    7ae0:	10803fcc 	andi	r2,r2,255
    7ae4:	01402004 	movi	r5,128
    7ae8:	1009883a 	mov	r4,r2
    7aec:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7af0:	e0bffc17 	ldw	r2,-16(fp)
    7af4:	10c00217 	ldw	r3,8(r2)
    7af8:	e0bffc17 	ldw	r2,-16(fp)
    7afc:	10800303 	ldbu	r2,12(r2)
    7b00:	10803fcc 	andi	r2,r2,255
    7b04:	e13fe343 	ldbu	r4,-115(fp)
    7b08:	200f883a 	mov	r7,r4
    7b0c:	000d883a 	mov	r6,zero
    7b10:	100b883a 	mov	r5,r2
    7b14:	1809883a 	mov	r4,r3
    7b18:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    7b1c:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7b20:	e0bfe303 	ldbu	r2,-116(fp)
    7b24:	1000151e 	bne	r2,zero,7b7c <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7b28:	e0bffc17 	ldw	r2,-16(fp)
    7b2c:	10801817 	ldw	r2,96(r2)
    7b30:	10000326 	beq	r2,zero,7b40 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7b34:	e0bffc17 	ldw	r2,-16(fp)
    7b38:	10801817 	ldw	r2,96(r2)
    7b3c:	103ee83a 	callr	r2

        bPollEnable = true;
    7b40:	e0bffc17 	ldw	r2,-16(fp)
    7b44:	00c00044 	movi	r3,1
    7b48:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7b4c:	0005883a 	mov	r2,zero
    7b50:	00001206 	br	7b9c <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7b54:	0001883a 	nop
    7b58:	00000906 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7b5c:	0001883a 	nop
    7b60:	00000706 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7b64:	0001883a 	nop
    7b68:	00000506 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7b6c:	0001883a 	nop
    7b70:	00000306 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7b74:	0001883a 	nop
    7b78:	00000106 	br	7b80 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7b7c:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7b80:	e0bffc17 	ldw	r2,-16(fp)
    7b84:	10800017 	ldw	r2,0(r2)
    7b88:	10800204 	addi	r2,r2,8
    7b8c:	10800017 	ldw	r2,0(r2)
    7b90:	e13ffc17 	ldw	r4,-16(fp)
    7b94:	103ee83a 	callr	r2
        return rcode;
    7b98:	e0bfe303 	ldbu	r2,-116(fp)
}
    7b9c:	e037883a 	mov	sp,fp
    7ba0:	dfc00117 	ldw	ra,4(sp)
    7ba4:	df000017 	ldw	fp,0(sp)
    7ba8:	dec00204 	addi	sp,sp,8
    7bac:	f800283a 	ret

00007bb0 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7bb0:	defffd04 	addi	sp,sp,-12
    7bb4:	dfc00215 	stw	ra,8(sp)
    7bb8:	df000115 	stw	fp,4(sp)
    7bbc:	df000104 	addi	fp,sp,4
    7bc0:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7bc4:	e0bfff17 	ldw	r2,-4(fp)
    7bc8:	10800217 	ldw	r2,8(r2)
    7bcc:	1009883a 	mov	r4,r2
    7bd0:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7bd4:	1009883a 	mov	r4,r2
    7bd8:	20800017 	ldw	r2,0(r4)
    7bdc:	10800204 	addi	r2,r2,8
    7be0:	10800017 	ldw	r2,0(r2)
    7be4:	e0ffff17 	ldw	r3,-4(fp)
    7be8:	18c00303 	ldbu	r3,12(r3)
    7bec:	18c03fcc 	andi	r3,r3,255
    7bf0:	180b883a 	mov	r5,r3
    7bf4:	103ee83a 	callr	r2
        bAddress     = 0;
    7bf8:	e0bfff17 	ldw	r2,-4(fp)
    7bfc:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7c00:	e0bfff17 	ldw	r2,-4(fp)
    7c04:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7c08:	e0bfff17 	ldw	r2,-4(fp)
    7c0c:	10001705 	stb	zero,92(r2)
        return 0;
    7c10:	0005883a 	mov	r2,zero
}
    7c14:	e037883a 	mov	sp,fp
    7c18:	dfc00117 	ldw	ra,4(sp)
    7c1c:	df000017 	ldw	fp,0(sp)
    7c20:	dec00204 	addi	sp,sp,8
    7c24:	f800283a 	ret

00007c28 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7c28:	defffe04 	addi	sp,sp,-8
    7c2c:	df000115 	stw	fp,4(sp)
    7c30:	df000104 	addi	fp,sp,4
    7c34:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7c38:	e0bfff17 	ldw	r2,-4(fp)
    7c3c:	1080040b 	ldhu	r2,16(r2)
    7c40:	10bfffcc 	andi	r2,r2,65535
    7c44:	10848d58 	cmpnei	r2,r2,4661
    7c48:	1000351e 	bne	r2,zero,7d20 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7c4c:	e0bfff17 	ldw	r2,-4(fp)
    7c50:	1080038b 	ldhu	r2,14(r2)
    7c54:	10bfffcc 	andi	r2,r2,65535
    7c58:	10800820 	cmpeqi	r2,r2,32
    7c5c:	10000f1e 	bne	r2,zero,7c9c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c60:	e0bfff17 	ldw	r2,-4(fp)
    7c64:	1080038b 	ldhu	r2,14(r2)
    7c68:	10bfffcc 	andi	r2,r2,65535
    7c6c:	10800da0 	cmpeqi	r2,r2,54
    7c70:	10000a1e 	bne	r2,zero,7c9c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c74:	e0bfff17 	ldw	r2,-4(fp)
    7c78:	1080038b 	ldhu	r2,14(r2)
    7c7c:	10bfffcc 	andi	r2,r2,65535
    7c80:	10801460 	cmpeqi	r2,r2,81
    7c84:	1000051e 	bne	r2,zero,7c9c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7c88:	e0bfff17 	ldw	r2,-4(fp)
    7c8c:	1080038b 	ldhu	r2,14(r2)
    7c90:	10bfffcc 	andi	r2,r2,65535
    7c94:	10801a58 	cmpnei	r2,r2,105
    7c98:	1000041e 	bne	r2,zero,7cac <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7c9c:	e0bfff17 	ldw	r2,-4(fp)
    7ca0:	00c00084 	movi	r3,2
    7ca4:	10c00485 	stb	r3,18(r2)
                        return;
    7ca8:	00001d06 	br	7d20 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7cac:	e0bfff17 	ldw	r2,-4(fp)
    7cb0:	1080038b 	ldhu	r2,14(r2)
    7cb4:	10bfffcc 	andi	r2,r2,65535
    7cb8:	10800c30 	cmpltui	r2,r2,48
    7cbc:	1000051e 	bne	r2,zero,7cd4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7cc0:	e0bfff17 	ldw	r2,-4(fp)
    7cc4:	1080038b 	ldhu	r2,14(r2)
    7cc8:	10bfffcc 	andi	r2,r2,65535
    7ccc:	10800cf0 	cmpltui	r2,r2,51
    7cd0:	10000f1e 	bne	r2,zero,7d10 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7cd4:	e0bfff17 	ldw	r2,-4(fp)
    7cd8:	1080038b 	ldhu	r2,14(r2)
    7cdc:	10bfffcc 	andi	r2,r2,65535
    7ce0:	10800d60 	cmpeqi	r2,r2,53
    7ce4:	10000a1e 	bne	r2,zero,7d10 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7ce8:	e0bfff17 	ldw	r2,-4(fp)
    7cec:	1080038b 	ldhu	r2,14(r2)
    7cf0:	10bfffcc 	andi	r2,r2,65535
    7cf4:	10801ef0 	cmpltui	r2,r2,123
    7cf8:	1000091e 	bne	r2,zero,7d20 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7cfc:	e0bfff17 	ldw	r2,-4(fp)
    7d00:	1080038b 	ldhu	r2,14(r2)
    7d04:	10bfffcc 	andi	r2,r2,65535
    7d08:	10801fa8 	cmpgeui	r2,r2,126
    7d0c:	1000041e 	bne	r2,zero,7d20 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7d10:	e0bfff17 	ldw	r2,-4(fp)
    7d14:	00c00084 	movi	r3,2
    7d18:	10c00485 	stb	r3,18(r2)
                        return;
    7d1c:	0001883a 	nop
                }
        }
}
    7d20:	e037883a 	mov	sp,fp
    7d24:	df000017 	ldw	fp,0(sp)
    7d28:	dec00104 	addi	sp,sp,4
    7d2c:	f800283a 	ret

00007d30 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7d30:	defff804 	addi	sp,sp,-32
    7d34:	dfc00715 	stw	ra,28(sp)
    7d38:	df000615 	stw	fp,24(sp)
    7d3c:	df000604 	addi	fp,sp,24
    7d40:	e13ffd15 	stw	r4,-12(fp)
    7d44:	e17ffe15 	stw	r5,-8(fp)
    7d48:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7d4c:	e0bffd17 	ldw	r2,-12(fp)
    7d50:	108005c3 	ldbu	r2,23(r2)
    7d54:	10c03fcc 	andi	r3,r2,255
    7d58:	e0bffe17 	ldw	r2,-8(fp)
    7d5c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7d60:	e0bffd17 	ldw	r2,-12(fp)
    7d64:	10c00217 	ldw	r3,8(r2)
    7d68:	e0bffd17 	ldw	r2,-12(fp)
    7d6c:	10800303 	ldbu	r2,12(r2)
    7d70:	11003fcc 	andi	r4,r2,255
    7d74:	e0bffd17 	ldw	r2,-12(fp)
    7d78:	10800583 	ldbu	r2,22(r2)
    7d7c:	11403fcc 	andi	r5,r2,255
    7d80:	d8000115 	stw	zero,4(sp)
    7d84:	e0bfff17 	ldw	r2,-4(fp)
    7d88:	d8800015 	stw	r2,0(sp)
    7d8c:	e1fffe17 	ldw	r7,-8(fp)
    7d90:	280d883a 	mov	r6,r5
    7d94:	200b883a 	mov	r5,r4
    7d98:	1809883a 	mov	r4,r3
    7d9c:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7da0:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7da4:	e0bffe17 	ldw	r2,-8(fp)
    7da8:	1080000b 	ldhu	r2,0(r2)
    7dac:	10bfffcc 	andi	r2,r2,65535
    7db0:	10800f28 	cmpgeui	r2,r2,60
    7db4:	10000d1e 	bne	r2,zero,7dec <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7db8:	e0bffe17 	ldw	r2,-8(fp)
    7dbc:	1080000b 	ldhu	r2,0(r2)
    7dc0:	10bfffcc 	andi	r2,r2,65535
    7dc4:	e0ffff17 	ldw	r3,-4(fp)
    7dc8:	1885883a 	add	r2,r3,r2
    7dcc:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7dd0:	e0bffe17 	ldw	r2,-8(fp)
    7dd4:	1080000b 	ldhu	r2,0(r2)
    7dd8:	10bfffcc 	andi	r2,r2,65535
    7ddc:	10800044 	addi	r2,r2,1
    7de0:	e0ffff17 	ldw	r3,-4(fp)
    7de4:	1885883a 	add	r2,r3,r2
    7de8:	10000005 	stb	zero,0(r2)
        }
        return r;
    7dec:	e0bffc03 	ldbu	r2,-16(fp)
}
    7df0:	e037883a 	mov	sp,fp
    7df4:	dfc00117 	ldw	ra,4(sp)
    7df8:	df000017 	ldw	fp,0(sp)
    7dfc:	dec00204 	addi	sp,sp,8
    7e00:	f800283a 	ret

00007e04 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7e04:	defff904 	addi	sp,sp,-28
    7e08:	dfc00615 	stw	ra,24(sp)
    7e0c:	df000515 	stw	fp,20(sp)
    7e10:	df000504 	addi	fp,sp,20
    7e14:	e13ffd15 	stw	r4,-12(fp)
    7e18:	e17ffe15 	stw	r5,-8(fp)
    7e1c:	3005883a 	mov	r2,r6
    7e20:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7e24:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	10800343 	ldbu	r2,13(r2)
    7e30:	1080005c 	xori	r2,r2,1
    7e34:	10803fcc 	andi	r2,r2,255
    7e38:	10000226 	beq	r2,zero,7e44 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7e3c:	0005883a 	mov	r2,zero
    7e40:	00008506 	br	8058 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7e44:	e0bffd17 	ldw	r2,-12(fp)
    7e48:	10801703 	ldbu	r2,92(r2)
    7e4c:	10803fcc 	andi	r2,r2,255
    7e50:	10001826 	beq	r2,zero,7eb4 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7e54:	e0bffd17 	ldw	r2,-12(fp)
    7e58:	10801703 	ldbu	r2,92(r2)
    7e5c:	10803fcc 	andi	r2,r2,255
    7e60:	10801028 	cmpgeui	r2,r2,64
    7e64:	1000131e 	bne	r2,zero,7eb4 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7e68:	e0bffd17 	ldw	r2,-12(fp)
    7e6c:	10801703 	ldbu	r2,92(r2)
    7e70:	10803fcc 	andi	r2,r2,255
    7e74:	e0fffd17 	ldw	r3,-12(fp)
    7e78:	1885883a 	add	r2,r3,r2
    7e7c:	10800704 	addi	r2,r2,28
    7e80:	10800003 	ldbu	r2,0(r2)
    7e84:	10803fcc 	andi	r2,r2,255
    7e88:	10002a1e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7e8c:	e0bffd17 	ldw	r2,-12(fp)
    7e90:	10801703 	ldbu	r2,92(r2)
    7e94:	10803fcc 	andi	r2,r2,255
    7e98:	10800044 	addi	r2,r2,1
    7e9c:	e0fffd17 	ldw	r3,-12(fp)
    7ea0:	1885883a 	add	r2,r3,r2
    7ea4:	10800704 	addi	r2,r2,28
    7ea8:	10800003 	ldbu	r2,0(r2)
    7eac:	10803fcc 	andi	r2,r2,255
    7eb0:	1000201e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7eb4:	e0bffd17 	ldw	r2,-12(fp)
    7eb8:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7ebc:	e0bffd17 	ldw	r2,-12(fp)
    7ec0:	10c00704 	addi	r3,r2,28
    7ec4:	e0bffc04 	addi	r2,fp,-16
    7ec8:	180d883a 	mov	r6,r3
    7ecc:	100b883a 	mov	r5,r2
    7ed0:	e13ffd17 	ldw	r4,-12(fp)
    7ed4:	0007d300 	call	7d30 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7ed8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7edc:	e0bffb03 	ldbu	r2,-20(fp)
    7ee0:	10000226 	beq	r2,zero,7eec <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7ee4:	0005883a 	mov	r2,zero
    7ee8:	00005b06 	br	8058 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7eec:	e0bffd17 	ldw	r2,-12(fp)
    7ef0:	10800703 	ldbu	r2,28(r2)
    7ef4:	10803fcc 	andi	r2,r2,255
    7ef8:	10000e1e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7efc:	e0bffd17 	ldw	r2,-12(fp)
    7f00:	10800743 	ldbu	r2,29(r2)
    7f04:	10803fcc 	andi	r2,r2,255
    7f08:	10000a1e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f0c:	e0bffd17 	ldw	r2,-12(fp)
    7f10:	10800783 	ldbu	r2,30(r2)
    7f14:	10803fcc 	andi	r2,r2,255
    7f18:	1000061e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f1c:	e0bffd17 	ldw	r2,-12(fp)
    7f20:	108007c3 	ldbu	r2,31(r2)
    7f24:	10803fcc 	andi	r2,r2,255
    7f28:	1000021e 	bne	r2,zero,7f34 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7f2c:	0005883a 	mov	r2,zero
    7f30:	00004906 	br	8058 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7f34:	e0bffd17 	ldw	r2,-12(fp)
    7f38:	10801703 	ldbu	r2,92(r2)
    7f3c:	10803fcc 	andi	r2,r2,255
    7f40:	e0fffd17 	ldw	r3,-12(fp)
    7f44:	1885883a 	add	r2,r3,r2
    7f48:	10800704 	addi	r2,r2,28
    7f4c:	10800003 	ldbu	r2,0(r2)
    7f50:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7f54:	e0bfff03 	ldbu	r2,-4(fp)
    7f58:	10000526 	beq	r2,zero,7f70 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7f5c:	e0bffe17 	ldw	r2,-8(fp)
    7f60:	10c00044 	addi	r3,r2,1
    7f64:	e0fffe15 	stw	r3,-8(fp)
    7f68:	e0fffb43 	ldbu	r3,-19(fp)
    7f6c:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7f70:	e0bffd17 	ldw	r2,-12(fp)
    7f74:	10801703 	ldbu	r2,92(r2)
    7f78:	10800044 	addi	r2,r2,1
    7f7c:	1007883a 	mov	r3,r2
    7f80:	e0bffd17 	ldw	r2,-12(fp)
    7f84:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7f88:	e0bffe17 	ldw	r2,-8(fp)
    7f8c:	10c00044 	addi	r3,r2,1
    7f90:	e0fffe15 	stw	r3,-8(fp)
    7f94:	e0fffd17 	ldw	r3,-12(fp)
    7f98:	18c01703 	ldbu	r3,92(r3)
    7f9c:	19000044 	addi	r4,r3,1
    7fa0:	200b883a 	mov	r5,r4
    7fa4:	e13ffd17 	ldw	r4,-12(fp)
    7fa8:	21401705 	stb	r5,92(r4)
    7fac:	18c03fcc 	andi	r3,r3,255
    7fb0:	e13ffd17 	ldw	r4,-12(fp)
    7fb4:	20c7883a 	add	r3,r4,r3
    7fb8:	18c00704 	addi	r3,r3,28
    7fbc:	18c00003 	ldbu	r3,0(r3)
    7fc0:	e0fffb85 	stb	r3,-18(fp)
    7fc4:	e0fffb83 	ldbu	r3,-18(fp)
    7fc8:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7fcc:	e0bffe17 	ldw	r2,-8(fp)
    7fd0:	10c00044 	addi	r3,r2,1
    7fd4:	e0fffe15 	stw	r3,-8(fp)
    7fd8:	e0fffd17 	ldw	r3,-12(fp)
    7fdc:	18c01703 	ldbu	r3,92(r3)
    7fe0:	19000044 	addi	r4,r3,1
    7fe4:	200b883a 	mov	r5,r4
    7fe8:	e13ffd17 	ldw	r4,-12(fp)
    7fec:	21401705 	stb	r5,92(r4)
    7ff0:	18c03fcc 	andi	r3,r3,255
    7ff4:	e13ffd17 	ldw	r4,-12(fp)
    7ff8:	20c7883a 	add	r3,r4,r3
    7ffc:	18c00704 	addi	r3,r3,28
    8000:	18c00003 	ldbu	r3,0(r3)
    8004:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    8008:	e0bffe17 	ldw	r2,-8(fp)
    800c:	10c00044 	addi	r3,r2,1
    8010:	e0fffe15 	stw	r3,-8(fp)
    8014:	e0fffd17 	ldw	r3,-12(fp)
    8018:	18c01703 	ldbu	r3,92(r3)
    801c:	19000044 	addi	r4,r3,1
    8020:	200b883a 	mov	r5,r4
    8024:	e13ffd17 	ldw	r4,-12(fp)
    8028:	21401705 	stb	r5,92(r4)
    802c:	18c03fcc 	andi	r3,r3,255
    8030:	e13ffd17 	ldw	r4,-12(fp)
    8034:	20c7883a 	add	r3,r4,r3
    8038:	18c00704 	addi	r3,r3,28
    803c:	18c00003 	ldbu	r3,0(r3)
    8040:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    8044:	e0bffb43 	ldbu	r2,-19(fp)
    8048:	108003cc 	andi	r2,r2,15
    804c:	100b883a 	mov	r5,r2
    8050:	e13ffd17 	ldw	r4,-12(fp)
    8054:	00090b40 	call	90b4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    8058:	e037883a 	mov	sp,fp
    805c:	dfc00117 	ldw	ra,4(sp)
    8060:	df000017 	ldw	fp,0(sp)
    8064:	dec00204 	addi	sp,sp,8
    8068:	f800283a 	ret

0000806c <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    806c:	defff804 	addi	sp,sp,-32
    8070:	dfc00715 	stw	ra,28(sp)
    8074:	df000615 	stw	fp,24(sp)
    8078:	df000604 	addi	fp,sp,24
    807c:	e13ffd15 	stw	r4,-12(fp)
    8080:	e17ffe15 	stw	r5,-8(fp)
    8084:	3005883a 	mov	r2,r6
    8088:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    808c:	e0bffe17 	ldw	r2,-8(fp)
    8090:	10800003 	ldbu	r2,0(r2)
    8094:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    8098:	e0bffb03 	ldbu	r2,-20(fp)
    809c:	100b883a 	mov	r5,r2
    80a0:	e13ffd17 	ldw	r4,-12(fp)
    80a4:	000905c0 	call	905c <_ZN9USBH_MIDI17convertStatus2CinEh>
    80a8:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    80ac:	e0bffb03 	ldbu	r2,-20(fp)
    80b0:	10803c18 	cmpnei	r2,r2,240
    80b4:	10000b1e 	bne	r2,zero,80e4 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    80b8:	e17ffe17 	ldw	r5,-8(fp)
    80bc:	e13ffd17 	ldw	r4,-12(fp)
    80c0:	000822c0 	call	822c <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    80c4:	10bfffcc 	andi	r2,r2,65535
    80c8:	e0ffff03 	ldbu	r3,-4(fp)
    80cc:	180f883a 	mov	r7,r3
    80d0:	100d883a 	mov	r6,r2
    80d4:	e17ffe17 	ldw	r5,-8(fp)
    80d8:	e13ffd17 	ldw	r4,-12(fp)
    80dc:	00082b40 	call	82b4 <_ZN9USBH_MIDI9SendSysExEPhth>
    80e0:	00003406 	br	81b4 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    80e4:	e0bfff03 	ldbu	r2,-4(fp)
    80e8:	1004913a 	slli	r2,r2,4
    80ec:	1007883a 	mov	r3,r2
    80f0:	e0bffb43 	ldbu	r2,-19(fp)
    80f4:	1884b03a 	or	r2,r3,r2
    80f8:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    80fc:	e0bffe17 	ldw	r2,-8(fp)
    8100:	10800003 	ldbu	r2,0(r2)
    8104:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    8108:	e0bffb43 	ldbu	r2,-19(fp)
    810c:	100b883a 	mov	r5,r2
    8110:	e13ffd17 	ldw	r4,-12(fp)
    8114:	00090b40 	call	90b4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    8118:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    811c:	e0bffb83 	ldbu	r2,-18(fp)
    8120:	10c000a0 	cmpeqi	r3,r2,2
    8124:	18000c1e 	bne	r3,zero,8158 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    8128:	10c000e0 	cmpeqi	r3,r2,3
    812c:	1800031e 	bne	r3,zero,813c <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    8130:	10800060 	cmpeqi	r2,r2,1
    8134:	10000d1e 	bne	r2,zero,816c <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    8138:	00000f06 	br	8178 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    813c:	e0bffe17 	ldw	r2,-8(fp)
    8140:	10800043 	ldbu	r2,1(r2)
    8144:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    8148:	e0bffe17 	ldw	r2,-8(fp)
    814c:	10800083 	ldbu	r2,2(r2)
    8150:	e0bffc85 	stb	r2,-14(fp)
                break;
    8154:	00000806 	br	8178 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    8158:	e0bffe17 	ldw	r2,-8(fp)
    815c:	10800043 	ldbu	r2,1(r2)
    8160:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    8164:	e03ffc85 	stb	zero,-14(fp)
                break;
    8168:	00000306 	br	8178 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    816c:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    8170:	e03ffc85 	stb	zero,-14(fp)
                break;
    8174:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    8178:	e0bffd17 	ldw	r2,-12(fp)
    817c:	10c00217 	ldw	r3,8(r2)
    8180:	e0bffd17 	ldw	r2,-12(fp)
    8184:	10800303 	ldbu	r2,12(r2)
    8188:	11003fcc 	andi	r4,r2,255
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800643 	ldbu	r2,25(r2)
    8194:	11403fcc 	andi	r5,r2,255
    8198:	e0bffbc4 	addi	r2,fp,-17
    819c:	d8800015 	stw	r2,0(sp)
    81a0:	01c00104 	movi	r7,4
    81a4:	280d883a 	mov	r6,r5
    81a8:	200b883a 	mov	r5,r4
    81ac:	1809883a 	mov	r4,r3
    81b0:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    81b4:	e037883a 	mov	sp,fp
    81b8:	dfc00117 	ldw	ra,4(sp)
    81bc:	df000017 	ldw	fp,0(sp)
    81c0:	dec00204 	addi	sp,sp,8
    81c4:	f800283a 	ret

000081c8 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    81c8:	defffb04 	addi	sp,sp,-20
    81cc:	dfc00415 	stw	ra,16(sp)
    81d0:	df000315 	stw	fp,12(sp)
    81d4:	df000304 	addi	fp,sp,12
    81d8:	e13ffd15 	stw	r4,-12(fp)
    81dc:	2807883a 	mov	r3,r5
    81e0:	3005883a 	mov	r2,r6
    81e4:	e0fffe05 	stb	r3,-8(fp)
    81e8:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    81ec:	e0bfff03 	ldbu	r2,-4(fp)
    81f0:	1000051e 	bne	r2,zero,8208 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    81f4:	e0bffe03 	ldbu	r2,-8(fp)
    81f8:	100b883a 	mov	r5,r2
    81fc:	e13ffd17 	ldw	r4,-12(fp)
    8200:	000905c0 	call	905c <_ZN9USBH_MIDI17convertStatus2CinEh>
    8204:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    8208:	e0bfff03 	ldbu	r2,-4(fp)
    820c:	100b883a 	mov	r5,r2
    8210:	e13ffd17 	ldw	r4,-12(fp)
    8214:	00090b40 	call	90b4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

0000822c <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    822c:	defffc04 	addi	sp,sp,-16
    8230:	df000315 	stw	fp,12(sp)
    8234:	df000304 	addi	fp,sp,12
    8238:	e13ffe15 	stw	r4,-8(fp)
    823c:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    8240:	00800044 	movi	r2,1
    8244:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    8248:	e0bfff17 	ldw	r2,-4(fp)
    824c:	10800003 	ldbu	r2,0(r2)
    8250:	10803fcc 	andi	r2,r2,255
    8254:	10803c20 	cmpeqi	r2,r2,240
    8258:	1000021e 	bne	r2,zero,8264 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    825c:	0005883a 	mov	r2,zero
    8260:	00001006 	br	82a4 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    8264:	e0bfff17 	ldw	r2,-4(fp)
    8268:	10800003 	ldbu	r2,0(r2)
    826c:	10803fcc 	andi	r2,r2,255
    8270:	10803de0 	cmpeqi	r2,r2,247
    8274:	10000a1e 	bne	r2,zero,82a0 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    8278:	e0bfff17 	ldw	r2,-4(fp)
    827c:	10800044 	addi	r2,r2,1
    8280:	e0bfff15 	stw	r2,-4(fp)
                c++;
    8284:	e0bffd0b 	ldhu	r2,-12(fp)
    8288:	10800044 	addi	r2,r2,1
    828c:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    8290:	e0bffd0b 	ldhu	r2,-12(fp)
    8294:	10804070 	cmpltui	r2,r2,257
    8298:	103ff21e 	bne	r2,zero,8264 <__alt_data_end+0xfc008264>
                        c = 0;
    829c:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    82a0:	e0bffd0b 	ldhu	r2,-12(fp)
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00104 	addi	sp,sp,4
    82b0:	f800283a 	ret

000082b4 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    82b4:	deffe704 	addi	sp,sp,-100
    82b8:	dfc01815 	stw	ra,96(sp)
    82bc:	df001715 	stw	fp,92(sp)
    82c0:	df001704 	addi	fp,sp,92
    82c4:	e13ffc15 	stw	r4,-16(fp)
    82c8:	e17ffd15 	stw	r5,-12(fp)
    82cc:	3007883a 	mov	r3,r6
    82d0:	3805883a 	mov	r2,r7
    82d4:	e0fffe0d 	sth	r3,-8(fp)
    82d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    82dc:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    82e0:	e0bffe0b 	ldhu	r2,-8(fp)
    82e4:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    82e8:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    82ec:	e0bffc17 	ldw	r2,-16(fp)
    82f0:	108005c3 	ldbu	r2,23(r2)
    82f4:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    82f8:	e0bffe0b 	ldhu	r2,-8(fp)
    82fc:	01402004 	movi	r5,128
    8300:	1009883a 	mov	r4,r2
    8304:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8308:	e0bfea8b 	ldhu	r2,-86(fp)
    830c:	1000b026 	beq	r2,zero,85d0 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    8310:	e0bfeb03 	ldbu	r2,-84(fp)
    8314:	e0ffff03 	ldbu	r3,-4(fp)
    8318:	1806913a 	slli	r3,r3,4
    831c:	18c00114 	ori	r3,r3,4
    8320:	1809883a 	mov	r4,r3
    8324:	e0ffeb84 	addi	r3,fp,-82
    8328:	1885883a 	add	r2,r3,r2
    832c:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8330:	e0bfea8b 	ldhu	r2,-86(fp)
    8334:	10c000a0 	cmpeqi	r3,r2,2
    8338:	18002a1e 	bne	r3,zero,83e4 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    833c:	10c000e0 	cmpeqi	r3,r2,3
    8340:	1800521e 	bne	r3,zero,848c <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8344:	10800060 	cmpeqi	r2,r2,1
    8348:	10005826 	beq	r2,zero,84ac <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    834c:	e0bfeb03 	ldbu	r2,-84(fp)
    8350:	10c00044 	addi	r3,r2,1
    8354:	e0ffeb05 	stb	r3,-84(fp)
    8358:	10803fcc 	andi	r2,r2,255
    835c:	e0ffff03 	ldbu	r3,-4(fp)
    8360:	1806913a 	slli	r3,r3,4
    8364:	18c00154 	ori	r3,r3,5
    8368:	1809883a 	mov	r4,r3
    836c:	e0ffeb84 	addi	r3,fp,-82
    8370:	1885883a 	add	r2,r3,r2
    8374:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8378:	e0bfeb03 	ldbu	r2,-84(fp)
    837c:	10c00044 	addi	r3,r2,1
    8380:	e0ffeb05 	stb	r3,-84(fp)
    8384:	11003fcc 	andi	r4,r2,255
    8388:	e0bffd17 	ldw	r2,-12(fp)
    838c:	10c00044 	addi	r3,r2,1
    8390:	e0fffd15 	stw	r3,-12(fp)
    8394:	10c00003 	ldbu	r3,0(r2)
    8398:	e0bfeb84 	addi	r2,fp,-82
    839c:	1105883a 	add	r2,r2,r4
    83a0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    83a4:	e0bfeb03 	ldbu	r2,-84(fp)
    83a8:	10c00044 	addi	r3,r2,1
    83ac:	e0ffeb05 	stb	r3,-84(fp)
    83b0:	10803fcc 	andi	r2,r2,255
    83b4:	e0ffeb84 	addi	r3,fp,-82
    83b8:	1885883a 	add	r2,r3,r2
    83bc:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    83c0:	e0bfeb03 	ldbu	r2,-84(fp)
    83c4:	10c00044 	addi	r3,r2,1
    83c8:	e0ffeb05 	stb	r3,-84(fp)
    83cc:	10803fcc 	andi	r2,r2,255
    83d0:	e0ffeb84 	addi	r3,fp,-82
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10000005 	stb	zero,0(r2)
                        n = 0;
    83dc:	e03fea8d 	sth	zero,-86(fp)
                        break;
    83e0:	00005a06 	br	854c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    83e4:	e0bfeb03 	ldbu	r2,-84(fp)
    83e8:	10c00044 	addi	r3,r2,1
    83ec:	e0ffeb05 	stb	r3,-84(fp)
    83f0:	10803fcc 	andi	r2,r2,255
    83f4:	e0ffff03 	ldbu	r3,-4(fp)
    83f8:	1806913a 	slli	r3,r3,4
    83fc:	18c00194 	ori	r3,r3,6
    8400:	1809883a 	mov	r4,r3
    8404:	e0ffeb84 	addi	r3,fp,-82
    8408:	1885883a 	add	r2,r3,r2
    840c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8410:	e0bfeb03 	ldbu	r2,-84(fp)
    8414:	10c00044 	addi	r3,r2,1
    8418:	e0ffeb05 	stb	r3,-84(fp)
    841c:	11003fcc 	andi	r4,r2,255
    8420:	e0bffd17 	ldw	r2,-12(fp)
    8424:	10c00044 	addi	r3,r2,1
    8428:	e0fffd15 	stw	r3,-12(fp)
    842c:	10c00003 	ldbu	r3,0(r2)
    8430:	e0bfeb84 	addi	r2,fp,-82
    8434:	1105883a 	add	r2,r2,r4
    8438:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    843c:	e0bfeb03 	ldbu	r2,-84(fp)
    8440:	10c00044 	addi	r3,r2,1
    8444:	e0ffeb05 	stb	r3,-84(fp)
    8448:	11003fcc 	andi	r4,r2,255
    844c:	e0bffd17 	ldw	r2,-12(fp)
    8450:	10c00044 	addi	r3,r2,1
    8454:	e0fffd15 	stw	r3,-12(fp)
    8458:	10c00003 	ldbu	r3,0(r2)
    845c:	e0bfeb84 	addi	r2,fp,-82
    8460:	1105883a 	add	r2,r2,r4
    8464:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8468:	e0bfeb03 	ldbu	r2,-84(fp)
    846c:	10c00044 	addi	r3,r2,1
    8470:	e0ffeb05 	stb	r3,-84(fp)
    8474:	10803fcc 	andi	r2,r2,255
    8478:	e0ffeb84 	addi	r3,fp,-82
    847c:	1885883a 	add	r2,r3,r2
    8480:	10000005 	stb	zero,0(r2)
                        n = 0;
    8484:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8488:	00003006 	br	854c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    848c:	e0bfeb03 	ldbu	r2,-84(fp)
    8490:	e0ffff03 	ldbu	r3,-4(fp)
    8494:	1806913a 	slli	r3,r3,4
    8498:	18c001d4 	ori	r3,r3,7
    849c:	1809883a 	mov	r4,r3
    84a0:	e0ffeb84 	addi	r3,fp,-82
    84a4:	1885883a 	add	r2,r3,r2
    84a8:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    84ac:	e0bfeb03 	ldbu	r2,-84(fp)
    84b0:	10800044 	addi	r2,r2,1
    84b4:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    84b8:	e0bfeb03 	ldbu	r2,-84(fp)
    84bc:	10c00044 	addi	r3,r2,1
    84c0:	e0ffeb05 	stb	r3,-84(fp)
    84c4:	11003fcc 	andi	r4,r2,255
    84c8:	e0bffd17 	ldw	r2,-12(fp)
    84cc:	10c00044 	addi	r3,r2,1
    84d0:	e0fffd15 	stw	r3,-12(fp)
    84d4:	10c00003 	ldbu	r3,0(r2)
    84d8:	e0bfeb84 	addi	r2,fp,-82
    84dc:	1105883a 	add	r2,r2,r4
    84e0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    84e4:	e0bfeb03 	ldbu	r2,-84(fp)
    84e8:	10c00044 	addi	r3,r2,1
    84ec:	e0ffeb05 	stb	r3,-84(fp)
    84f0:	11003fcc 	andi	r4,r2,255
    84f4:	e0bffd17 	ldw	r2,-12(fp)
    84f8:	10c00044 	addi	r3,r2,1
    84fc:	e0fffd15 	stw	r3,-12(fp)
    8500:	10c00003 	ldbu	r3,0(r2)
    8504:	e0bfeb84 	addi	r2,fp,-82
    8508:	1105883a 	add	r2,r2,r4
    850c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8510:	e0bfeb03 	ldbu	r2,-84(fp)
    8514:	10c00044 	addi	r3,r2,1
    8518:	e0ffeb05 	stb	r3,-84(fp)
    851c:	11003fcc 	andi	r4,r2,255
    8520:	e0bffd17 	ldw	r2,-12(fp)
    8524:	10c00044 	addi	r3,r2,1
    8528:	e0fffd15 	stw	r3,-12(fp)
    852c:	10c00003 	ldbu	r3,0(r2)
    8530:	e0bfeb84 	addi	r2,fp,-82
    8534:	1105883a 	add	r2,r2,r4
    8538:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    853c:	e0bfea8b 	ldhu	r2,-86(fp)
    8540:	10bfff44 	addi	r2,r2,-3
    8544:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8548:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    854c:	e0ffeb03 	ldbu	r3,-84(fp)
    8550:	e0bfeb43 	ldbu	r2,-83(fp)
    8554:	1880022e 	bgeu	r3,r2,8560 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8558:	e0bfea8b 	ldhu	r2,-86(fp)
    855c:	103f6a1e 	bne	r2,zero,8308 <__alt_data_end+0xfc008308>
                        USBTRACE2(" wptr:\t", wptr);
    8560:	e0bfeb03 	ldbu	r2,-84(fp)
    8564:	01402004 	movi	r5,128
    8568:	1009883a 	mov	r4,r2
    856c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8570:	e0bffc17 	ldw	r2,-16(fp)
    8574:	10c00217 	ldw	r3,8(r2)
    8578:	e0bffc17 	ldw	r2,-16(fp)
    857c:	10800303 	ldbu	r2,12(r2)
    8580:	11003fcc 	andi	r4,r2,255
    8584:	e0bffc17 	ldw	r2,-16(fp)
    8588:	10800643 	ldbu	r2,25(r2)
    858c:	11403fcc 	andi	r5,r2,255
    8590:	e1bfeb03 	ldbu	r6,-84(fp)
    8594:	e0bfeb84 	addi	r2,fp,-82
    8598:	d8800015 	stw	r2,0(sp)
    859c:	300f883a 	mov	r7,r6
    85a0:	280d883a 	mov	r6,r5
    85a4:	200b883a 	mov	r5,r4
    85a8:	1809883a 	mov	r4,r3
    85ac:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    85b0:	e0bfea05 	stb	r2,-88(fp)
    85b4:	e0bfea03 	ldbu	r2,-88(fp)
    85b8:	1004c03a 	cmpne	r2,r2,zero
    85bc:	10803fcc 	andi	r2,r2,255
    85c0:	1000021e 	bne	r2,zero,85cc <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    85c4:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    85c8:	003f4f06 	br	8308 <__alt_data_end+0xfc008308>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    85cc:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    85d0:	e0bfea03 	ldbu	r2,-88(fp)
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	df000415 	stw	fp,16(sp)
    85f0:	df000404 	addi	fp,sp,16
    85f4:	e13ffd15 	stw	r4,-12(fp)
    85f8:	e17ffe15 	stw	r5,-8(fp)
    85fc:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    8600:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    8604:	e0bffe17 	ldw	r2,-8(fp)
    8608:	10800003 	ldbu	r2,0(r2)
    860c:	108003cc 	andi	r2,r2,15
    8610:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    8614:	e0bffc43 	ldbu	r2,-15(fp)
    8618:	1080030c 	andi	r2,r2,12
    861c:	10800120 	cmpeqi	r2,r2,4
    8620:	1000021e 	bne	r2,zero,862c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8624:	e0bffc03 	ldbu	r2,-16(fp)
    8628:	00003b06 	br	8718 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    862c:	e0bffc43 	ldbu	r2,-15(fp)
    8630:	10c00160 	cmpeqi	r3,r2,5
    8634:	18002e1e 	bne	r3,zero,86f0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8638:	10c00188 	cmpgei	r3,r2,6
    863c:	1800031e 	bne	r3,zero,864c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8640:	10800120 	cmpeqi	r2,r2,4
    8644:	1000061e 	bne	r2,zero,8660 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8648:	00003206 	br	8714 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    864c:	10c001a0 	cmpeqi	r3,r2,6
    8650:	1800181e 	bne	r3,zero,86b4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8654:	108001e0 	cmpeqi	r2,r2,7
    8658:	1000011e 	bne	r2,zero,8660 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    865c:	00002d06 	br	8714 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8660:	e0bfff17 	ldw	r2,-4(fp)
    8664:	10c00044 	addi	r3,r2,1
    8668:	e0ffff15 	stw	r3,-4(fp)
    866c:	e0fffe17 	ldw	r3,-8(fp)
    8670:	18c00043 	ldbu	r3,1(r3)
    8674:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8678:	e0bfff17 	ldw	r2,-4(fp)
    867c:	10c00044 	addi	r3,r2,1
    8680:	e0ffff15 	stw	r3,-4(fp)
    8684:	e0fffe17 	ldw	r3,-8(fp)
    8688:	18c00083 	ldbu	r3,2(r3)
    868c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8690:	e0bfff17 	ldw	r2,-4(fp)
    8694:	10c00044 	addi	r3,r2,1
    8698:	e0ffff15 	stw	r3,-4(fp)
    869c:	e0fffe17 	ldw	r3,-8(fp)
    86a0:	18c000c3 	ldbu	r3,3(r3)
    86a4:	10c00005 	stb	r3,0(r2)
                rc = 3;
    86a8:	008000c4 	movi	r2,3
    86ac:	e0bffc05 	stb	r2,-16(fp)
                break;
    86b0:	00001806 	br	8714 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    86b4:	e0bfff17 	ldw	r2,-4(fp)
    86b8:	10c00044 	addi	r3,r2,1
    86bc:	e0ffff15 	stw	r3,-4(fp)
    86c0:	e0fffe17 	ldw	r3,-8(fp)
    86c4:	18c00043 	ldbu	r3,1(r3)
    86c8:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    86cc:	e0bfff17 	ldw	r2,-4(fp)
    86d0:	10c00044 	addi	r3,r2,1
    86d4:	e0ffff15 	stw	r3,-4(fp)
    86d8:	e0fffe17 	ldw	r3,-8(fp)
    86dc:	18c00083 	ldbu	r3,2(r3)
    86e0:	10c00005 	stb	r3,0(r2)
                rc = 2;
    86e4:	00800084 	movi	r2,2
    86e8:	e0bffc05 	stb	r2,-16(fp)
                break;
    86ec:	00000906 	br	8714 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    86f0:	e0bfff17 	ldw	r2,-4(fp)
    86f4:	10c00044 	addi	r3,r2,1
    86f8:	e0ffff15 	stw	r3,-4(fp)
    86fc:	e0fffe17 	ldw	r3,-8(fp)
    8700:	18c00043 	ldbu	r3,1(r3)
    8704:	10c00005 	stb	r3,0(r2)
                rc = 1;
    8708:	00800044 	movi	r2,1
    870c:	e0bffc05 	stb	r2,-16(fp)
                break;
    8710:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    8714:	e0bffc03 	ldbu	r2,-16(fp)
}
    8718:	e037883a 	mov	sp,fp
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00104 	addi	sp,sp,4
    8724:	f800283a 	ret

00008728 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8728:	defffb04 	addi	sp,sp,-20
    872c:	dfc00415 	stw	ra,16(sp)
    8730:	df000315 	stw	fp,12(sp)
    8734:	df000304 	addi	fp,sp,12
    8738:	e13ffd15 	stw	r4,-12(fp)
    873c:	e17ffe15 	stw	r5,-8(fp)
    8740:	3005883a 	mov	r2,r6
    8744:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8748:	e0bffd17 	ldw	r2,-12(fp)
    874c:	1009883a 	mov	r4,r2
    8750:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    8754:	008000b4 	movhi	r2,2
    8758:	109c2c04 	addi	r2,r2,28848
    875c:	e0fffd17 	ldw	r3,-12(fp)
    8760:	18800015 	stw	r2,0(r3)
    8764:	e0bffd17 	ldw	r2,-12(fp)
    8768:	e0fffe17 	ldw	r3,-8(fp)
    876c:	10c00115 	stw	r3,4(r2)
    8770:	e0bffd17 	ldw	r2,-12(fp)
    8774:	10800204 	addi	r2,r2,8
    8778:	1009883a 	mov	r4,r2
    877c:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    8780:	e0bffd17 	ldw	r2,-12(fp)
    8784:	10800404 	addi	r2,r2,16
    8788:	1009883a 	mov	r4,r2
    878c:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    8790:	e0bffd17 	ldw	r2,-12(fp)
    8794:	10800604 	addi	r2,r2,24
    8798:	1009883a 	mov	r4,r2
    879c:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    87a0:	e0bffd17 	ldw	r2,-12(fp)
    87a4:	10000c05 	stb	zero,48(r2)
    87a8:	e0bffd17 	ldw	r2,-12(fp)
    87ac:	10000c45 	stb	zero,49(r2)
    87b0:	e0bffd17 	ldw	r2,-12(fp)
    87b4:	10000c85 	stb	zero,50(r2)
    87b8:	e0bffd17 	ldw	r2,-12(fp)
    87bc:	10000cc5 	stb	zero,51(r2)
    87c0:	e0bffd17 	ldw	r2,-12(fp)
    87c4:	e0ffff03 	ldbu	r3,-4(fp)
    87c8:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    87cc:	e0bffd17 	ldw	r2,-12(fp)
    87d0:	10c00804 	addi	r3,r2,32
    87d4:	e0bffd17 	ldw	r2,-12(fp)
    87d8:	19803fcc 	andi	r6,r3,255
    87dc:	11000243 	ldbu	r4,9(r2)
    87e0:	2008703a 	and	r4,r4,zero
    87e4:	200b883a 	mov	r5,r4
    87e8:	3009883a 	mov	r4,r6
    87ec:	2908b03a 	or	r4,r5,r4
    87f0:	11000245 	stb	r4,9(r2)
    87f4:	1808d23a 	srli	r4,r3,8
    87f8:	21803fcc 	andi	r6,r4,255
    87fc:	11000283 	ldbu	r4,10(r2)
    8800:	2008703a 	and	r4,r4,zero
    8804:	200b883a 	mov	r5,r4
    8808:	3009883a 	mov	r4,r6
    880c:	2908b03a 	or	r4,r5,r4
    8810:	11000285 	stb	r4,10(r2)
    8814:	1808d43a 	srli	r4,r3,16
    8818:	21803fcc 	andi	r6,r4,255
    881c:	110002c3 	ldbu	r4,11(r2)
    8820:	2008703a 	and	r4,r4,zero
    8824:	200b883a 	mov	r5,r4
    8828:	3009883a 	mov	r4,r6
    882c:	2908b03a 	or	r4,r5,r4
    8830:	110002c5 	stb	r4,11(r2)
    8834:	180ad63a 	srli	r5,r3,24
    8838:	10c00303 	ldbu	r3,12(r2)
    883c:	1806703a 	and	r3,r3,zero
    8840:	1809883a 	mov	r4,r3
    8844:	2807883a 	mov	r3,r5
    8848:	20c6b03a 	or	r3,r4,r3
    884c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8850:	e0bffd17 	ldw	r2,-12(fp)
    8854:	10c00404 	addi	r3,r2,16
    8858:	e0bffd17 	ldw	r2,-12(fp)
    885c:	10800204 	addi	r2,r2,8
    8860:	100b883a 	mov	r5,r2
    8864:	1809883a 	mov	r4,r3
    8868:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    886c:	e0bffd17 	ldw	r2,-12(fp)
    8870:	10c00604 	addi	r3,r2,24
    8874:	e0bffd17 	ldw	r2,-12(fp)
    8878:	10800204 	addi	r2,r2,8
    887c:	100b883a 	mov	r5,r2
    8880:	1809883a 	mov	r4,r3
    8884:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8888:	0001883a 	nop
    888c:	e037883a 	mov	sp,fp
    8890:	dfc00117 	ldw	ra,4(sp)
    8894:	df000017 	ldw	fp,0(sp)
    8898:	dec00204 	addi	sp,sp,8
    889c:	f800283a 	ret

000088a0 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    88a0:	defff804 	addi	sp,sp,-32
    88a4:	dfc00715 	stw	ra,28(sp)
    88a8:	df000615 	stw	fp,24(sp)
    88ac:	df000604 	addi	fp,sp,24
    88b0:	e13ffc15 	stw	r4,-16(fp)
    88b4:	2805883a 	mov	r2,r5
    88b8:	e1bffe15 	stw	r6,-8(fp)
    88bc:	e1ffff15 	stw	r7,-4(fp)
    88c0:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    88c4:	e0bffd0b 	ldhu	r2,-12(fp)
    88c8:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    88cc:	e0bffe17 	ldw	r2,-8(fp)
    88d0:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    88d4:	e0bffa0b 	ldhu	r2,-24(fp)
    88d8:	10bfffcc 	andi	r2,r2,65535
    88dc:	10000a26 	beq	r2,zero,8908 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    88e0:	e0bffb04 	addi	r2,fp,-20
    88e4:	e1bffa04 	addi	r6,fp,-24
    88e8:	100b883a 	mov	r5,r2
    88ec:	e13ffc17 	ldw	r4,-16(fp)
    88f0:	000891c0 	call	891c <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    88f4:	1080005c 	xori	r2,r2,1
    88f8:	10803fcc 	andi	r2,r2,255
    88fc:	1000011e 	bne	r2,zero,8904 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    8900:	003ff406 	br	88d4 <__alt_data_end+0xfc0088d4>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    8904:	0001883a 	nop
}
    8908:	e037883a 	mov	sp,fp
    890c:	dfc00117 	ldw	ra,4(sp)
    8910:	df000017 	ldw	fp,0(sp)
    8914:	dec00204 	addi	sp,sp,8
    8918:	f800283a 	ret

0000891c <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    891c:	defff604 	addi	sp,sp,-40
    8920:	dfc00915 	stw	ra,36(sp)
    8924:	df000815 	stw	fp,32(sp)
    8928:	df000804 	addi	fp,sp,32
    892c:	e13ffc15 	stw	r4,-16(fp)
    8930:	e17ffd15 	stw	r5,-12(fp)
    8934:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8938:	e0bffc17 	ldw	r2,-16(fp)
    893c:	10800804 	addi	r2,r2,32
    8940:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8944:	e0bffc17 	ldw	r2,-16(fp)
    8948:	10800804 	addi	r2,r2,32
    894c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8950:	e0bffc17 	ldw	r2,-16(fp)
    8954:	10800c03 	ldbu	r2,48(r2)
    8958:	10803fcc 	andi	r2,r2,255
    895c:	10c00168 	cmpgeui	r3,r2,5
    8960:	1801411e 	bne	r3,zero,8e68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8964:	100690ba 	slli	r3,r2,2
    8968:	00800074 	movhi	r2,1
    896c:	10a25f04 	addi	r2,r2,-30340
    8970:	1885883a 	add	r2,r3,r2
    8974:	10800017 	ldw	r2,0(r2)
    8978:	1000683a 	jmp	r2
    897c:	00008990 	cmplti	zero,zero,550
    8980:	000089c4 	movi	zero,551
    8984:	00008a4c 	andi	zero,zero,553
    8988:	00008ae0 	cmpeqi	zero,zero,555
    898c:	00008b4c 	andi	zero,zero,557
                case 0:
                        theBuffer.valueSize = 2;
    8990:	e0bffc17 	ldw	r2,-16(fp)
    8994:	00c00084 	movi	r3,2
    8998:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    899c:	e0bffc17 	ldw	r2,-16(fp)
    89a0:	10c00404 	addi	r3,r2,16
    89a4:	e0bffc17 	ldw	r2,-16(fp)
    89a8:	10800204 	addi	r2,r2,8
    89ac:	100b883a 	mov	r5,r2
    89b0:	1809883a 	mov	r4,r3
    89b4:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	00c00044 	movi	r3,1
    89c0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    89c4:	e0bffc17 	ldw	r2,-16(fp)
    89c8:	10800404 	addi	r2,r2,16
    89cc:	e1bffe17 	ldw	r6,-8(fp)
    89d0:	e17ffd17 	ldw	r5,-12(fp)
    89d4:	1009883a 	mov	r4,r2
    89d8:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    89dc:	1080005c 	xori	r2,r2,1
    89e0:	10803fcc 	andi	r2,r2,255
    89e4:	10000226 	beq	r2,zero,89f0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    89e8:	0005883a 	mov	r2,zero
    89ec:	00011f06 	br	8e6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    89f0:	e0bffc17 	ldw	r2,-16(fp)
    89f4:	10c00217 	ldw	r3,8(r2)
    89f8:	1806d23a 	srli	r3,r3,8
    89fc:	10800317 	ldw	r2,12(r2)
    8a00:	10803fcc 	andi	r2,r2,255
    8a04:	1004963a 	slli	r2,r2,24
    8a08:	10c4b03a 	or	r2,r2,r3
    8a0c:	10c00003 	ldbu	r3,0(r2)
    8a10:	e0bffc17 	ldw	r2,-16(fp)
    8a14:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8a18:	e0bffc17 	ldw	r2,-16(fp)
    8a1c:	10c00217 	ldw	r3,8(r2)
    8a20:	1806d23a 	srli	r3,r3,8
    8a24:	10800317 	ldw	r2,12(r2)
    8a28:	10803fcc 	andi	r2,r2,255
    8a2c:	1004963a 	slli	r2,r2,24
    8a30:	10c4b03a 	or	r2,r2,r3
    8a34:	10c00043 	ldbu	r3,1(r2)
    8a38:	e0bffc17 	ldw	r2,-16(fp)
    8a3c:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8a40:	e0bffc17 	ldw	r2,-16(fp)
    8a44:	00c00084 	movi	r3,2
    8a48:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8a4c:	e0bffc17 	ldw	r2,-16(fp)
    8a50:	10800804 	addi	r2,r2,32
    8a54:	10c00084 	addi	r3,r2,2
    8a58:	e0bffc17 	ldw	r2,-16(fp)
    8a5c:	19803fcc 	andi	r6,r3,255
    8a60:	11000243 	ldbu	r4,9(r2)
    8a64:	2008703a 	and	r4,r4,zero
    8a68:	200b883a 	mov	r5,r4
    8a6c:	3009883a 	mov	r4,r6
    8a70:	2908b03a 	or	r4,r5,r4
    8a74:	11000245 	stb	r4,9(r2)
    8a78:	1808d23a 	srli	r4,r3,8
    8a7c:	21803fcc 	andi	r6,r4,255
    8a80:	11000283 	ldbu	r4,10(r2)
    8a84:	2008703a 	and	r4,r4,zero
    8a88:	200b883a 	mov	r5,r4
    8a8c:	3009883a 	mov	r4,r6
    8a90:	2908b03a 	or	r4,r5,r4
    8a94:	11000285 	stb	r4,10(r2)
    8a98:	1808d43a 	srli	r4,r3,16
    8a9c:	21803fcc 	andi	r6,r4,255
    8aa0:	110002c3 	ldbu	r4,11(r2)
    8aa4:	2008703a 	and	r4,r4,zero
    8aa8:	200b883a 	mov	r5,r4
    8aac:	3009883a 	mov	r4,r6
    8ab0:	2908b03a 	or	r4,r5,r4
    8ab4:	110002c5 	stb	r4,11(r2)
    8ab8:	180ad63a 	srli	r5,r3,24
    8abc:	10c00303 	ldbu	r3,12(r2)
    8ac0:	1806703a 	and	r3,r3,zero
    8ac4:	1809883a 	mov	r4,r3
    8ac8:	2807883a 	mov	r3,r5
    8acc:	20c6b03a 	or	r3,r4,r3
    8ad0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8ad4:	e0bffc17 	ldw	r2,-16(fp)
    8ad8:	00c000c4 	movi	r3,3
    8adc:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	10800c83 	ldbu	r2,50(r2)
    8ae8:	10803fcc 	andi	r2,r2,255
    8aec:	10c00120 	cmpeqi	r3,r2,4
    8af0:	1800021e 	bne	r3,zero,8afc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8af4:	10800148 	cmpgei	r2,r2,5
    8af8:	00000306 	br	8b08 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8afc:	e0bffc17 	ldw	r2,-16(fp)
    8b00:	10000d45 	stb	zero,53(r2)
                                        break;
    8b04:	00000106 	br	8b0c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8b08:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8b0c:	e0bffc17 	ldw	r2,-16(fp)
    8b10:	10800c43 	ldbu	r2,49(r2)
    8b14:	10bfff84 	addi	r2,r2,-2
    8b18:	1007883a 	mov	r3,r2
    8b1c:	e0bffc17 	ldw	r2,-16(fp)
    8b20:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	10c00404 	addi	r3,r2,16
    8b2c:	e0bffc17 	ldw	r2,-16(fp)
    8b30:	10800204 	addi	r2,r2,8
    8b34:	100b883a 	mov	r5,r2
    8b38:	1809883a 	mov	r4,r3
    8b3c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8b40:	e0bffc17 	ldw	r2,-16(fp)
    8b44:	00c00104 	movi	r3,4
    8b48:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8b4c:	e0bffc17 	ldw	r2,-16(fp)
    8b50:	10800c83 	ldbu	r2,50(r2)
    8b54:	10803fcc 	andi	r2,r2,255
    8b58:	10c00120 	cmpeqi	r3,r2,4
    8b5c:	1800141e 	bne	r3,zero,8bb0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8b60:	10c00160 	cmpeqi	r3,r2,5
    8b64:	18005a1e 	bne	r3,zero,8cd0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8b68:	108000a0 	cmpeqi	r2,r2,2
    8b6c:	10008526 	beq	r2,zero,8d84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8b70:	e0bffc17 	ldw	r2,-16(fp)
    8b74:	10800404 	addi	r2,r2,16
    8b78:	e1bffe17 	ldw	r6,-8(fp)
    8b7c:	e17ffd17 	ldw	r5,-12(fp)
    8b80:	1009883a 	mov	r4,r2
    8b84:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8b88:	1080005c 	xori	r2,r2,1
    8b8c:	10803fcc 	andi	r2,r2,255
    8b90:	10000226 	beq	r2,zero,8b9c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8b94:	0005883a 	mov	r2,zero
    8b98:	0000b406 	br	8e6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8b9c:	e0bffa17 	ldw	r2,-24(fp)
    8ba0:	10c00143 	ldbu	r3,5(r2)
    8ba4:	e0bffc17 	ldw	r2,-16(fp)
    8ba8:	10c00d85 	stb	r3,54(r2)
                                        break;
    8bac:	00008b06 	br	8ddc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8bb0:	e0bffc17 	ldw	r2,-16(fp)
    8bb4:	10800404 	addi	r2,r2,16
    8bb8:	e1bffe17 	ldw	r6,-8(fp)
    8bbc:	e17ffd17 	ldw	r5,-12(fp)
    8bc0:	1009883a 	mov	r4,r2
    8bc4:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8bc8:	1080005c 	xori	r2,r2,1
    8bcc:	10803fcc 	andi	r2,r2,255
    8bd0:	10000226 	beq	r2,zero,8bdc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8bd4:	0005883a 	mov	r2,zero
    8bd8:	0000a406 	br	8e6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8bdc:	e0bffb17 	ldw	r2,-20(fp)
    8be0:	10800083 	ldbu	r2,2(r2)
    8be4:	10803fcc 	andi	r2,r2,255
    8be8:	01402004 	movi	r5,128
    8bec:	1009883a 	mov	r4,r2
    8bf0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8bf4:	e0bffb17 	ldw	r2,-20(fp)
    8bf8:	108000c3 	ldbu	r2,3(r2)
    8bfc:	10803fcc 	andi	r2,r2,255
    8c00:	01402004 	movi	r5,128
    8c04:	1009883a 	mov	r4,r2
    8c08:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8c0c:	e0bffb17 	ldw	r2,-20(fp)
    8c10:	10800103 	ldbu	r2,4(r2)
    8c14:	10803fcc 	andi	r2,r2,255
    8c18:	01402004 	movi	r5,128
    8c1c:	1009883a 	mov	r4,r2
    8c20:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8c24:	e0bffb17 	ldw	r2,-20(fp)
    8c28:	10800143 	ldbu	r2,5(r2)
    8c2c:	10803fcc 	andi	r2,r2,255
    8c30:	01402004 	movi	r5,128
    8c34:	1009883a 	mov	r4,r2
    8c38:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8c3c:	e0bffb17 	ldw	r2,-20(fp)
    8c40:	10800183 	ldbu	r2,6(r2)
    8c44:	10803fcc 	andi	r2,r2,255
    8c48:	01402004 	movi	r5,128
    8c4c:	1009883a 	mov	r4,r2
    8c50:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8c54:	e0bffb17 	ldw	r2,-20(fp)
    8c58:	108001c3 	ldbu	r2,7(r2)
    8c5c:	10803fcc 	andi	r2,r2,255
    8c60:	01402004 	movi	r5,128
    8c64:	1009883a 	mov	r4,r2
    8c68:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8c6c:	e0bffc17 	ldw	r2,-16(fp)
    8c70:	10800d03 	ldbu	r2,52(r2)
    8c74:	10803fcc 	andi	r2,r2,255
    8c78:	10000a26 	beq	r2,zero,8ca4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8c7c:	e0bffb17 	ldw	r2,-20(fp)
    8c80:	10800143 	ldbu	r2,5(r2)
    8c84:	10803fcc 	andi	r2,r2,255
    8c88:	10800058 	cmpnei	r2,r2,1
    8c8c:	10004e1e 	bne	r2,zero,8dc8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8c90:	e0bffb17 	ldw	r2,-20(fp)
    8c94:	10800183 	ldbu	r2,6(r2)
    8c98:	10803fcc 	andi	r2,r2,255
    8c9c:	108000d8 	cmpnei	r2,r2,3
    8ca0:	1000491e 	bne	r2,zero,8dc8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8ca4:	e0bffc17 	ldw	r2,-16(fp)
    8ca8:	00c00044 	movi	r3,1
    8cac:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8cb0:	e0bffc17 	ldw	r2,-16(fp)
    8cb4:	10800cc3 	ldbu	r2,51(r2)
    8cb8:	10803fcc 	andi	r2,r2,255
    8cbc:	108000a8 	cmpgeui	r2,r2,2
    8cc0:	1000431e 	bne	r2,zero,8dd0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8cc4:	e0bffc17 	ldw	r2,-16(fp)
    8cc8:	10000cc5 	stb	zero,51(r2)
                                        break;
    8ccc:	00004006 	br	8dd0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8cd0:	e0bffc17 	ldw	r2,-16(fp)
    8cd4:	10800404 	addi	r2,r2,16
    8cd8:	e1bffe17 	ldw	r6,-8(fp)
    8cdc:	e17ffd17 	ldw	r5,-12(fp)
    8ce0:	1009883a 	mov	r4,r2
    8ce4:	00066c80 	call	66c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8ce8:	1080005c 	xori	r2,r2,1
    8cec:	10803fcc 	andi	r2,r2,255
    8cf0:	10000226 	beq	r2,zero,8cfc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8cf4:	0005883a 	mov	r2,zero
    8cf8:	00005c06 	br	8e6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8cfc:	e0bffc17 	ldw	r2,-16(fp)
    8d00:	10800d43 	ldbu	r2,53(r2)
    8d04:	10803fcc 	andi	r2,r2,255
    8d08:	10003326 	beq	r2,zero,8dd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8d0c:	e0bffc17 	ldw	r2,-16(fp)
    8d10:	10800cc3 	ldbu	r2,51(r2)
    8d14:	10803fcc 	andi	r2,r2,255
    8d18:	108000a8 	cmpgeui	r2,r2,2
    8d1c:	10002e1e 	bne	r2,zero,8dd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8d20:	e0bffc17 	ldw	r2,-16(fp)
    8d24:	10800117 	ldw	r2,4(r2)
    8d28:	10800017 	ldw	r2,0(r2)
    8d2c:	10800017 	ldw	r2,0(r2)
    8d30:	e0fffc17 	ldw	r3,-16(fp)
    8d34:	19000117 	ldw	r4,4(r3)
    8d38:	e0fffc17 	ldw	r3,-16(fp)
    8d3c:	18c00d83 	ldbu	r3,54(r3)
    8d40:	19403fcc 	andi	r5,r3,255
    8d44:	e0fffc17 	ldw	r3,-16(fp)
    8d48:	18c00804 	addi	r3,r3,32
    8d4c:	d8c00115 	stw	r3,4(sp)
    8d50:	d8000015 	stw	zero,0(sp)
    8d54:	000f883a 	mov	r7,zero
    8d58:	000d883a 	mov	r6,zero
    8d5c:	103ee83a 	callr	r2
    8d60:	10803fcc 	andi	r2,r2,255
    8d64:	10001c26 	beq	r2,zero,8dd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8d68:	e0bffc17 	ldw	r2,-16(fp)
    8d6c:	10800cc3 	ldbu	r2,51(r2)
    8d70:	10800044 	addi	r2,r2,1
    8d74:	1007883a 	mov	r3,r2
    8d78:	e0bffc17 	ldw	r2,-16(fp)
    8d7c:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8d80:	00001506 	br	8dd8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8d84:	e0bffc17 	ldw	r2,-16(fp)
    8d88:	10c00604 	addi	r3,r2,24
    8d8c:	e0bffc17 	ldw	r2,-16(fp)
    8d90:	10800c43 	ldbu	r2,49(r2)
    8d94:	10803fcc 	andi	r2,r2,255
    8d98:	10bfff84 	addi	r2,r2,-2
    8d9c:	10bfffcc 	andi	r2,r2,65535
    8da0:	100f883a 	mov	r7,r2
    8da4:	e1bffe17 	ldw	r6,-8(fp)
    8da8:	e17ffd17 	ldw	r5,-12(fp)
    8dac:	1809883a 	mov	r4,r3
    8db0:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    8db4:	1080005c 	xori	r2,r2,1
    8db8:	10803fcc 	andi	r2,r2,255
    8dbc:	10000726 	beq	r2,zero,8ddc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8dc0:	0005883a 	mov	r2,zero
    8dc4:	00002906 	br	8e6c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8dc8:	0001883a 	nop
    8dcc:	00000306 	br	8ddc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8dd0:	0001883a 	nop
    8dd4:	00000106 	br	8ddc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8dd8:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8ddc:	e0bffc17 	ldw	r2,-16(fp)
    8de0:	10c00804 	addi	r3,r2,32
    8de4:	e0bffc17 	ldw	r2,-16(fp)
    8de8:	19803fcc 	andi	r6,r3,255
    8dec:	11000243 	ldbu	r4,9(r2)
    8df0:	2008703a 	and	r4,r4,zero
    8df4:	200b883a 	mov	r5,r4
    8df8:	3009883a 	mov	r4,r6
    8dfc:	2908b03a 	or	r4,r5,r4
    8e00:	11000245 	stb	r4,9(r2)
    8e04:	1808d23a 	srli	r4,r3,8
    8e08:	21803fcc 	andi	r6,r4,255
    8e0c:	11000283 	ldbu	r4,10(r2)
    8e10:	2008703a 	and	r4,r4,zero
    8e14:	200b883a 	mov	r5,r4
    8e18:	3009883a 	mov	r4,r6
    8e1c:	2908b03a 	or	r4,r5,r4
    8e20:	11000285 	stb	r4,10(r2)
    8e24:	1808d43a 	srli	r4,r3,16
    8e28:	21803fcc 	andi	r6,r4,255
    8e2c:	110002c3 	ldbu	r4,11(r2)
    8e30:	2008703a 	and	r4,r4,zero
    8e34:	200b883a 	mov	r5,r4
    8e38:	3009883a 	mov	r4,r6
    8e3c:	2908b03a 	or	r4,r5,r4
    8e40:	110002c5 	stb	r4,11(r2)
    8e44:	180ad63a 	srli	r5,r3,24
    8e48:	10c00303 	ldbu	r3,12(r2)
    8e4c:	1806703a 	and	r3,r3,zero
    8e50:	1809883a 	mov	r4,r3
    8e54:	2807883a 	mov	r3,r5
    8e58:	20c6b03a 	or	r3,r4,r3
    8e5c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8e60:	e0bffc17 	ldw	r2,-16(fp)
    8e64:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8e68:	00800044 	movi	r2,1
}
    8e6c:	e037883a 	mov	sp,fp
    8e70:	dfc00117 	ldw	ra,4(sp)
    8e74:	df000017 	ldw	fp,0(sp)
    8e78:	dec00204 	addi	sp,sp,8
    8e7c:	f800283a 	ret

00008e80 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8e80:	defff904 	addi	sp,sp,-28
    8e84:	df000615 	stw	fp,24(sp)
    8e88:	df000604 	addi	fp,sp,24
    8e8c:	e13ffb15 	stw	r4,-20(fp)
    8e90:	3009883a 	mov	r4,r6
    8e94:	3807883a 	mov	r3,r7
    8e98:	e0800117 	ldw	r2,4(fp)
    8e9c:	e17ffc05 	stb	r5,-16(fp)
    8ea0:	e13ffd05 	stb	r4,-12(fp)
    8ea4:	e0fffe05 	stb	r3,-8(fp)
    8ea8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8eac:	e0800217 	ldw	r2,8(fp)
    8eb0:	10c000c3 	ldbu	r3,3(r2)
    8eb4:	e0bffb17 	ldw	r2,-20(fp)
    8eb8:	10800483 	ldbu	r2,18(r2)
    8ebc:	1884703a 	and	r2,r3,r2
    8ec0:	10803fcc 	andi	r2,r2,255
    8ec4:	10800098 	cmpnei	r2,r2,2
    8ec8:	10001f1e 	bne	r2,zero,8f48 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8ecc:	e0800217 	ldw	r2,8(fp)
    8ed0:	10800083 	ldbu	r2,2(r2)
    8ed4:	10803fcc 	andi	r2,r2,255
    8ed8:	1080201c 	xori	r2,r2,128
    8edc:	10bfe004 	addi	r2,r2,-128
    8ee0:	1000020e 	bge	r2,zero,8eec <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8ee4:	00800044 	movi	r2,1
    8ee8:	00000106 	br	8ef0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8eec:	00800084 	movi	r2,2
    8ef0:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8ef4:	e0fffa03 	ldbu	r3,-24(fp)
    8ef8:	e0800217 	ldw	r2,8(fp)
    8efc:	10800083 	ldbu	r2,2(r2)
    8f00:	108003cc 	andi	r2,r2,15
    8f04:	100b883a 	mov	r5,r2
    8f08:	e13ffb17 	ldw	r4,-20(fp)
    8f0c:	1805883a 	mov	r2,r3
    8f10:	1085883a 	add	r2,r2,r2
    8f14:	10c5883a 	add	r2,r2,r3
    8f18:	2085883a 	add	r2,r4,r2
    8f1c:	108004c4 	addi	r2,r2,19
    8f20:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8f24:	e0800217 	ldw	r2,8(fp)
    8f28:	10c00103 	ldbu	r3,4(r2)
    8f2c:	10800143 	ldbu	r2,5(r2)
    8f30:	1004923a 	slli	r2,r2,8
    8f34:	10c4b03a 	or	r2,r2,r3
    8f38:	10bfffcc 	andi	r2,r2,65535
    8f3c:	10801070 	cmpltui	r2,r2,65
    8f40:	10000d1e 	bne	r2,zero,8f78 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8f44:	00000206 	br	8f50 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8f48:	0005883a 	mov	r2,zero
    8f4c:	00001906 	br	8fb4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8f50:	e0fffa03 	ldbu	r3,-24(fp)
    8f54:	e13ffb17 	ldw	r4,-20(fp)
    8f58:	1805883a 	mov	r2,r3
    8f5c:	1085883a 	add	r2,r2,r2
    8f60:	10c5883a 	add	r2,r2,r3
    8f64:	2085883a 	add	r2,r4,r2
    8f68:	10800504 	addi	r2,r2,20
    8f6c:	00c01004 	movi	r3,64
    8f70:	10c00005 	stb	r3,0(r2)
    8f74:	00000e06 	br	8fb0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8f78:	e0fffa03 	ldbu	r3,-24(fp)
    8f7c:	e0800217 	ldw	r2,8(fp)
    8f80:	11000103 	ldbu	r4,4(r2)
    8f84:	10800143 	ldbu	r2,5(r2)
    8f88:	1004923a 	slli	r2,r2,8
    8f8c:	1104b03a 	or	r2,r2,r4
    8f90:	100b883a 	mov	r5,r2
    8f94:	e13ffb17 	ldw	r4,-20(fp)
    8f98:	1805883a 	mov	r2,r3
    8f9c:	1085883a 	add	r2,r2,r2
    8fa0:	10c5883a 	add	r2,r2,r3
    8fa4:	2085883a 	add	r2,r4,r2
    8fa8:	10800504 	addi	r2,r2,20
    8fac:	11400005 	stb	r5,0(r2)
        }

        return true;
    8fb0:	00800044 	movi	r2,1
}
    8fb4:	e037883a 	mov	sp,fp
    8fb8:	df000017 	ldw	fp,0(sp)
    8fbc:	dec00104 	addi	sp,sp,4
    8fc0:	f800283a 	ret

00008fc4 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8fc4:	213fff04 	addi	r4,r4,-4
    8fc8:	0008e801 	jmpi	8e80 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008fcc <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8fcc:	defffa04 	addi	sp,sp,-24
    8fd0:	df000515 	stw	fp,20(sp)
    8fd4:	df000504 	addi	fp,sp,20
    8fd8:	e13ffb15 	stw	r4,-20(fp)
    8fdc:	3009883a 	mov	r4,r6
    8fe0:	3807883a 	mov	r3,r7
    8fe4:	e0800117 	ldw	r2,4(fp)
    8fe8:	e17ffc05 	stb	r5,-16(fp)
    8fec:	e13ffd05 	stb	r4,-12(fp)
    8ff0:	e0fffe05 	stb	r3,-8(fp)
    8ff4:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8ff8:	00800044 	movi	r2,1
        };
    8ffc:	e037883a 	mov	sp,fp
    9000:	df000017 	ldw	fp,0(sp)
    9004:	dec00104 	addi	sp,sp,4
    9008:	f800283a 	ret

0000900c <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    900c:	defffe04 	addi	sp,sp,-8
    9010:	df000115 	stw	fp,4(sp)
    9014:	df000104 	addi	fp,sp,4
    9018:	e13fff15 	stw	r4,-4(fp)
    901c:	e0bfff17 	ldw	r2,-4(fp)
    9020:	10800d83 	ldbu	r2,54(r2)
    9024:	e037883a 	mov	sp,fp
    9028:	df000017 	ldw	fp,0(sp)
    902c:	dec00104 	addi	sp,sp,4
    9030:	f800283a 	ret

00009034 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    9034:	defffe04 	addi	sp,sp,-8
    9038:	df000115 	stw	fp,4(sp)
    903c:	df000104 	addi	fp,sp,4
    9040:	e13fff15 	stw	r4,-4(fp)
    9044:	e0bfff17 	ldw	r2,-4(fp)
    9048:	10800cc3 	ldbu	r2,51(r2)
    904c:	e037883a 	mov	sp,fp
    9050:	df000017 	ldw	fp,0(sp)
    9054:	dec00104 	addi	sp,sp,4
    9058:	f800283a 	ret

0000905c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    905c:	defffd04 	addi	sp,sp,-12
    9060:	df000215 	stw	fp,8(sp)
    9064:	df000204 	addi	fp,sp,8
    9068:	e13ffe15 	stw	r4,-8(fp)
    906c:	2805883a 	mov	r2,r5
    9070:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    9074:	e0bfff03 	ldbu	r2,-4(fp)
    9078:	10803c28 	cmpgeui	r2,r2,240
    907c:	1000031e 	bne	r2,zero,908c <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    9080:	e0bfff03 	ldbu	r2,-4(fp)
    9084:	1004d13a 	srli	r2,r2,4
    9088:	00000606 	br	90a4 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    908c:	e0bfff03 	ldbu	r2,-4(fp)
    9090:	10c003cc 	andi	r3,r2,15
    9094:	008000b4 	movhi	r2,2
    9098:	109c1644 	addi	r2,r2,28761
    909c:	1885883a 	add	r2,r3,r2
    90a0:	10800003 	ldbu	r2,0(r2)
        };
    90a4:	e037883a 	mov	sp,fp
    90a8:	df000017 	ldw	fp,0(sp)
    90ac:	dec00104 	addi	sp,sp,4
    90b0:	f800283a 	ret

000090b4 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    90b4:	defffd04 	addi	sp,sp,-12
    90b8:	df000215 	stw	fp,8(sp)
    90bc:	df000204 	addi	fp,sp,8
    90c0:	e13ffe15 	stw	r4,-8(fp)
    90c4:	2805883a 	mov	r2,r5
    90c8:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    90cc:	e0ffff03 	ldbu	r3,-4(fp)
    90d0:	008000b4 	movhi	r2,2
    90d4:	109c1244 	addi	r2,r2,28745
    90d8:	1885883a 	add	r2,r3,r2
    90dc:	10800003 	ldbu	r2,0(r2)
        };
    90e0:	e037883a 	mov	sp,fp
    90e4:	df000017 	ldw	fp,0(sp)
    90e8:	dec00104 	addi	sp,sp,4
    90ec:	f800283a 	ret

000090f0 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    90f0:	defffe04 	addi	sp,sp,-8
    90f4:	df000115 	stw	fp,4(sp)
    90f8:	df000104 	addi	fp,sp,4
    90fc:	e13fff15 	stw	r4,-4(fp)
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	10800303 	ldbu	r2,12(r2)
    9108:	e037883a 	mov	sp,fp
    910c:	df000017 	ldw	fp,0(sp)
    9110:	dec00104 	addi	sp,sp,4
    9114:	f800283a 	ret

00009118 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    9118:	defffe04 	addi	sp,sp,-8
    911c:	df000115 	stw	fp,4(sp)
    9120:	df000104 	addi	fp,sp,4
    9124:	e13fff15 	stw	r4,-4(fp)
    9128:	008000b4 	movhi	r2,2
    912c:	109c2f04 	addi	r2,r2,28860
    9130:	e0ffff17 	ldw	r3,-4(fp)
    9134:	18800015 	stw	r2,0(r3)
    9138:	0001883a 	nop
    913c:	e037883a 	mov	sp,fp
    9140:	df000017 	ldw	fp,0(sp)
    9144:	dec00104 	addi	sp,sp,4
    9148:	f800283a 	ret

0000914c <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    914c:	defffd04 	addi	sp,sp,-12
    9150:	df000215 	stw	fp,8(sp)
    9154:	df000204 	addi	fp,sp,8
    9158:	2005883a 	mov	r2,r4
    915c:	e17fff15 	stw	r5,-4(fp)
    9160:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    9164:	0001883a 	nop
    9168:	e037883a 	mov	sp,fp
    916c:	df000017 	ldw	fp,0(sp)
    9170:	dec00104 	addi	sp,sp,4
    9174:	f800283a 	ret

00009178 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    9178:	deffe204 	addi	sp,sp,-120
    917c:	dfc01d15 	stw	ra,116(sp)
    9180:	df001c15 	stw	fp,112(sp)
    9184:	df001c04 	addi	fp,sp,112
    9188:	e13ffd15 	stw	r4,-12(fp)
    918c:	2805883a 	mov	r2,r5
    9190:	e1bfff15 	stw	r6,-4(fp)
    9194:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    9198:	00801004 	movi	r2,64
    919c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    91a0:	e0bffd17 	ldw	r2,-12(fp)
    91a4:	11000217 	ldw	r4,8(r2)
    91a8:	e0bffd17 	ldw	r2,-12(fp)
    91ac:	10800303 	ldbu	r2,12(r2)
    91b0:	11403fcc 	andi	r5,r2,255
    91b4:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    91b8:	e0ffff17 	ldw	r3,-4(fp)
    91bc:	d8c00715 	stw	r3,28(sp)
    91c0:	e0ffec84 	addi	r3,fp,-78
    91c4:	d8c00615 	stw	r3,24(sp)
    91c8:	00c01004 	movi	r3,64
    91cc:	d8c00515 	stw	r3,20(sp)
    91d0:	00c02004 	movi	r3,128
    91d4:	d8c00415 	stw	r3,16(sp)
    91d8:	d8800315 	stw	r2,12(sp)
    91dc:	00800884 	movi	r2,34
    91e0:	d8800215 	stw	r2,8(sp)
    91e4:	d8000115 	stw	zero,4(sp)
    91e8:	00800184 	movi	r2,6
    91ec:	d8800015 	stw	r2,0(sp)
    91f0:	01c02044 	movi	r7,129
    91f4:	000d883a 	mov	r6,zero
    91f8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    91fc:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    9200:	e0bfec43 	ldbu	r2,-79(fp)
}
    9204:	e037883a 	mov	sp,fp
    9208:	dfc00117 	ldw	ra,4(sp)
    920c:	df000017 	ldw	fp,0(sp)
    9210:	dec00204 	addi	sp,sp,8
    9214:	f800283a 	ret

00009218 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    9218:	defff004 	addi	sp,sp,-64
    921c:	dfc00f15 	stw	ra,60(sp)
    9220:	df000e15 	stw	fp,56(sp)
    9224:	df000e04 	addi	fp,sp,56
    9228:	e13ffa15 	stw	r4,-24(fp)
    922c:	2811883a 	mov	r8,r5
    9230:	300b883a 	mov	r5,r6
    9234:	3809883a 	mov	r4,r7
    9238:	e0c00217 	ldw	r3,8(fp)
    923c:	e0800317 	ldw	r2,12(fp)
    9240:	e23ffb05 	stb	r8,-20(fp)
    9244:	e17ffc05 	stb	r5,-16(fp)
    9248:	e13ffd05 	stb	r4,-12(fp)
    924c:	e0fffe05 	stb	r3,-8(fp)
    9250:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9254:	e0bffa17 	ldw	r2,-24(fp)
    9258:	12000217 	ldw	r8,8(r2)
    925c:	e0bffa17 	ldw	r2,-24(fp)
    9260:	10800303 	ldbu	r2,12(r2)
    9264:	12403fcc 	andi	r9,r2,255
    9268:	e2bffb03 	ldbu	r10,-20(fp)
    926c:	e0bffe03 	ldbu	r2,-8(fp)
    9270:	e0fffd03 	ldbu	r3,-12(fp)
    9274:	e13ffc03 	ldbu	r4,-16(fp)
    9278:	e17fff0b 	ldhu	r5,-4(fp)
    927c:	e1bfff0b 	ldhu	r6,-4(fp)
    9280:	d8000715 	stw	zero,28(sp)
    9284:	e1c00417 	ldw	r7,16(fp)
    9288:	d9c00615 	stw	r7,24(sp)
    928c:	d9800515 	stw	r6,20(sp)
    9290:	d9400415 	stw	r5,16(sp)
    9294:	d9000315 	stw	r4,12(sp)
    9298:	d8c00215 	stw	r3,8(sp)
    929c:	d8800115 	stw	r2,4(sp)
    92a0:	00800244 	movi	r2,9
    92a4:	d8800015 	stw	r2,0(sp)
    92a8:	01c00844 	movi	r7,33
    92ac:	500d883a 	mov	r6,r10
    92b0:	480b883a 	mov	r5,r9
    92b4:	4009883a 	mov	r4,r8
    92b8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    92bc:	e037883a 	mov	sp,fp
    92c0:	dfc00117 	ldw	ra,4(sp)
    92c4:	df000017 	ldw	fp,0(sp)
    92c8:	dec00204 	addi	sp,sp,8
    92cc:	f800283a 	ret

000092d0 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    92d0:	defff004 	addi	sp,sp,-64
    92d4:	dfc00f15 	stw	ra,60(sp)
    92d8:	df000e15 	stw	fp,56(sp)
    92dc:	df000e04 	addi	fp,sp,56
    92e0:	e13ffa15 	stw	r4,-24(fp)
    92e4:	2811883a 	mov	r8,r5
    92e8:	300b883a 	mov	r5,r6
    92ec:	3809883a 	mov	r4,r7
    92f0:	e0c00217 	ldw	r3,8(fp)
    92f4:	e0800317 	ldw	r2,12(fp)
    92f8:	e23ffb05 	stb	r8,-20(fp)
    92fc:	e17ffc05 	stb	r5,-16(fp)
    9300:	e13ffd05 	stb	r4,-12(fp)
    9304:	e0fffe05 	stb	r3,-8(fp)
    9308:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    930c:	e0bffa17 	ldw	r2,-24(fp)
    9310:	12000217 	ldw	r8,8(r2)
    9314:	e0bffa17 	ldw	r2,-24(fp)
    9318:	10800303 	ldbu	r2,12(r2)
    931c:	12403fcc 	andi	r9,r2,255
    9320:	e2bffb03 	ldbu	r10,-20(fp)
    9324:	e0bffe03 	ldbu	r2,-8(fp)
    9328:	e0fffd03 	ldbu	r3,-12(fp)
    932c:	e13ffc03 	ldbu	r4,-16(fp)
    9330:	e17fff0b 	ldhu	r5,-4(fp)
    9334:	e1bfff0b 	ldhu	r6,-4(fp)
    9338:	d8000715 	stw	zero,28(sp)
    933c:	e1c00417 	ldw	r7,16(fp)
    9340:	d9c00615 	stw	r7,24(sp)
    9344:	d9800515 	stw	r6,20(sp)
    9348:	d9400415 	stw	r5,16(sp)
    934c:	d9000315 	stw	r4,12(sp)
    9350:	d8c00215 	stw	r3,8(sp)
    9354:	d8800115 	stw	r2,4(sp)
    9358:	00800044 	movi	r2,1
    935c:	d8800015 	stw	r2,0(sp)
    9360:	01c02844 	movi	r7,161
    9364:	500d883a 	mov	r6,r10
    9368:	480b883a 	mov	r5,r9
    936c:	4009883a 	mov	r4,r8
    9370:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9374:	e037883a 	mov	sp,fp
    9378:	dfc00117 	ldw	ra,4(sp)
    937c:	df000017 	ldw	fp,0(sp)
    9380:	dec00204 	addi	sp,sp,8
    9384:	f800283a 	ret

00009388 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9388:	defff204 	addi	sp,sp,-56
    938c:	dfc00d15 	stw	ra,52(sp)
    9390:	df000c15 	stw	fp,48(sp)
    9394:	df000c04 	addi	fp,sp,48
    9398:	e13ffc15 	stw	r4,-16(fp)
    939c:	2807883a 	mov	r3,r5
    93a0:	3005883a 	mov	r2,r6
    93a4:	e1ffff15 	stw	r7,-4(fp)
    93a8:	e0fffd05 	stb	r3,-12(fp)
    93ac:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    93b0:	e0bffc17 	ldw	r2,-16(fp)
    93b4:	12000217 	ldw	r8,8(r2)
    93b8:	e0bffc17 	ldw	r2,-16(fp)
    93bc:	10800303 	ldbu	r2,12(r2)
    93c0:	11403fcc 	andi	r5,r2,255
    93c4:	e0bffe03 	ldbu	r2,-8(fp)
    93c8:	e0fffd03 	ldbu	r3,-12(fp)
    93cc:	d8000715 	stw	zero,28(sp)
    93d0:	e13fff17 	ldw	r4,-4(fp)
    93d4:	d9000615 	stw	r4,24(sp)
    93d8:	01000044 	movi	r4,1
    93dc:	d9000515 	stw	r4,20(sp)
    93e0:	01000044 	movi	r4,1
    93e4:	d9000415 	stw	r4,16(sp)
    93e8:	d8c00315 	stw	r3,12(sp)
    93ec:	d8000215 	stw	zero,8(sp)
    93f0:	d8800115 	stw	r2,4(sp)
    93f4:	00800084 	movi	r2,2
    93f8:	d8800015 	stw	r2,0(sp)
    93fc:	01c02844 	movi	r7,161
    9400:	000d883a 	mov	r6,zero
    9404:	4009883a 	mov	r4,r8
    9408:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    940c:	e037883a 	mov	sp,fp
    9410:	dfc00117 	ldw	ra,4(sp)
    9414:	df000017 	ldw	fp,0(sp)
    9418:	dec00204 	addi	sp,sp,8
    941c:	f800283a 	ret

00009420 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9420:	defff204 	addi	sp,sp,-56
    9424:	dfc00d15 	stw	ra,52(sp)
    9428:	df000c15 	stw	fp,48(sp)
    942c:	df000c04 	addi	fp,sp,48
    9430:	e13ffc15 	stw	r4,-16(fp)
    9434:	2809883a 	mov	r4,r5
    9438:	3007883a 	mov	r3,r6
    943c:	3805883a 	mov	r2,r7
    9440:	e13ffd05 	stb	r4,-12(fp)
    9444:	e0fffe05 	stb	r3,-8(fp)
    9448:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    944c:	e0bffc17 	ldw	r2,-16(fp)
    9450:	12000217 	ldw	r8,8(r2)
    9454:	e0bffc17 	ldw	r2,-16(fp)
    9458:	10800303 	ldbu	r2,12(r2)
    945c:	11403fcc 	andi	r5,r2,255
    9460:	e0bffe03 	ldbu	r2,-8(fp)
    9464:	e0ffff03 	ldbu	r3,-4(fp)
    9468:	e13ffd03 	ldbu	r4,-12(fp)
    946c:	d8000715 	stw	zero,28(sp)
    9470:	d8000615 	stw	zero,24(sp)
    9474:	d8000515 	stw	zero,20(sp)
    9478:	d8000415 	stw	zero,16(sp)
    947c:	d9000315 	stw	r4,12(sp)
    9480:	d8c00215 	stw	r3,8(sp)
    9484:	d8800115 	stw	r2,4(sp)
    9488:	00800284 	movi	r2,10
    948c:	d8800015 	stw	r2,0(sp)
    9490:	01c00844 	movi	r7,33
    9494:	000d883a 	mov	r6,zero
    9498:	4009883a 	mov	r4,r8
    949c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    94a0:	e037883a 	mov	sp,fp
    94a4:	dfc00117 	ldw	ra,4(sp)
    94a8:	df000017 	ldw	fp,0(sp)
    94ac:	dec00204 	addi	sp,sp,8
    94b0:	f800283a 	ret

000094b4 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    94b4:	defff304 	addi	sp,sp,-52
    94b8:	dfc00c15 	stw	ra,48(sp)
    94bc:	df000b15 	stw	fp,44(sp)
    94c0:	df000b04 	addi	fp,sp,44
    94c4:	e13ffd15 	stw	r4,-12(fp)
    94c8:	2807883a 	mov	r3,r5
    94cc:	3005883a 	mov	r2,r6
    94d0:	e0fffe05 	stb	r3,-8(fp)
    94d4:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    94d8:	e0bffd17 	ldw	r2,-12(fp)
    94dc:	11000217 	ldw	r4,8(r2)
    94e0:	e0bffd17 	ldw	r2,-12(fp)
    94e4:	10800303 	ldbu	r2,12(r2)
    94e8:	11403fcc 	andi	r5,r2,255
    94ec:	e0bfff03 	ldbu	r2,-4(fp)
    94f0:	e0fffe03 	ldbu	r3,-8(fp)
    94f4:	d8000715 	stw	zero,28(sp)
    94f8:	d8000615 	stw	zero,24(sp)
    94fc:	d8000515 	stw	zero,20(sp)
    9500:	d8000415 	stw	zero,16(sp)
    9504:	d8c00315 	stw	r3,12(sp)
    9508:	d8000215 	stw	zero,8(sp)
    950c:	d8800115 	stw	r2,4(sp)
    9510:	008002c4 	movi	r2,11
    9514:	d8800015 	stw	r2,0(sp)
    9518:	01c00844 	movi	r7,33
    951c:	000d883a 	mov	r6,zero
    9520:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9524:	e037883a 	mov	sp,fp
    9528:	dfc00117 	ldw	ra,4(sp)
    952c:	df000017 	ldw	fp,0(sp)
    9530:	dec00204 	addi	sp,sp,8
    9534:	f800283a 	ret

00009538 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9538:	defff304 	addi	sp,sp,-52
    953c:	dfc00c15 	stw	ra,48(sp)
    9540:	df000b15 	stw	fp,44(sp)
    9544:	df000b04 	addi	fp,sp,44
    9548:	e13ffd15 	stw	r4,-12(fp)
    954c:	2805883a 	mov	r2,r5
    9550:	e1bfff15 	stw	r6,-4(fp)
    9554:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9558:	e0bffd17 	ldw	r2,-12(fp)
    955c:	11000217 	ldw	r4,8(r2)
    9560:	e0bffd17 	ldw	r2,-12(fp)
    9564:	10800303 	ldbu	r2,12(r2)
    9568:	11403fcc 	andi	r5,r2,255
    956c:	e0bffe03 	ldbu	r2,-8(fp)
    9570:	d8000715 	stw	zero,28(sp)
    9574:	e0ffff17 	ldw	r3,-4(fp)
    9578:	d8c00615 	stw	r3,24(sp)
    957c:	00c00044 	movi	r3,1
    9580:	d8c00515 	stw	r3,20(sp)
    9584:	00c00044 	movi	r3,1
    9588:	d8c00415 	stw	r3,16(sp)
    958c:	d8800315 	stw	r2,12(sp)
    9590:	d8000215 	stw	zero,8(sp)
    9594:	d8000115 	stw	zero,4(sp)
    9598:	008000c4 	movi	r2,3
    959c:	d8800015 	stw	r2,0(sp)
    95a0:	01c02844 	movi	r7,161
    95a4:	000d883a 	mov	r6,zero
    95a8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    95ac:	e037883a 	mov	sp,fp
    95b0:	dfc00117 	ldw	ra,4(sp)
    95b4:	df000017 	ldw	fp,0(sp)
    95b8:	dec00204 	addi	sp,sp,8
    95bc:	f800283a 	ret

000095c0 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    95c0:	defffc04 	addi	sp,sp,-16
    95c4:	dfc00315 	stw	ra,12(sp)
    95c8:	df000215 	stw	fp,8(sp)
    95cc:	df000204 	addi	fp,sp,8
    95d0:	e13ffe15 	stw	r4,-8(fp)
    95d4:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    95d8:	e0bfff17 	ldw	r2,-4(fp)
    95dc:	10800003 	ldbu	r2,0(r2)
    95e0:	10803fcc 	andi	r2,r2,255
    95e4:	01402004 	movi	r5,128
    95e8:	1009883a 	mov	r4,r2
    95ec:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    95f0:	e0bfff17 	ldw	r2,-4(fp)
    95f4:	10800043 	ldbu	r2,1(r2)
    95f8:	10803fcc 	andi	r2,r2,255
    95fc:	01402004 	movi	r5,128
    9600:	1009883a 	mov	r4,r2
    9604:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10800083 	ldbu	r2,2(r2)
    9610:	10803fcc 	andi	r2,r2,255
    9614:	01402004 	movi	r5,128
    9618:	1009883a 	mov	r4,r2
    961c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9620:	e0bfff17 	ldw	r2,-4(fp)
    9624:	108000c3 	ldbu	r2,3(r2)
    9628:	10803fcc 	andi	r2,r2,255
    962c:	01402004 	movi	r5,128
    9630:	1009883a 	mov	r4,r2
    9634:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9638:	e0bfff17 	ldw	r2,-4(fp)
    963c:	10c00103 	ldbu	r3,4(r2)
    9640:	10800143 	ldbu	r2,5(r2)
    9644:	1004923a 	slli	r2,r2,8
    9648:	10c4b03a 	or	r2,r2,r3
    964c:	10bfffcc 	andi	r2,r2,65535
    9650:	01402004 	movi	r5,128
    9654:	1009883a 	mov	r4,r2
    9658:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    965c:	e0bfff17 	ldw	r2,-4(fp)
    9660:	10800183 	ldbu	r2,6(r2)
    9664:	10803fcc 	andi	r2,r2,255
    9668:	01402004 	movi	r5,128
    966c:	1009883a 	mov	r4,r2
    9670:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
}
    9674:	0001883a 	nop
    9678:	e037883a 	mov	sp,fp
    967c:	dfc00117 	ldw	ra,4(sp)
    9680:	df000017 	ldw	fp,0(sp)
    9684:	dec00204 	addi	sp,sp,8
    9688:	f800283a 	ret

0000968c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    968c:	defffc04 	addi	sp,sp,-16
    9690:	dfc00315 	stw	ra,12(sp)
    9694:	df000215 	stw	fp,8(sp)
    9698:	df000204 	addi	fp,sp,8
    969c:	e13ffe15 	stw	r4,-8(fp)
    96a0:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    96a4:	e0bfff17 	ldw	r2,-4(fp)
    96a8:	10800003 	ldbu	r2,0(r2)
    96ac:	10803fcc 	andi	r2,r2,255
    96b0:	01402004 	movi	r5,128
    96b4:	1009883a 	mov	r4,r2
    96b8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    96bc:	e0bfff17 	ldw	r2,-4(fp)
    96c0:	10800043 	ldbu	r2,1(r2)
    96c4:	10803fcc 	andi	r2,r2,255
    96c8:	01402004 	movi	r5,128
    96cc:	1009883a 	mov	r4,r2
    96d0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    96d4:	e0bfff17 	ldw	r2,-4(fp)
    96d8:	10c00083 	ldbu	r3,2(r2)
    96dc:	108000c3 	ldbu	r2,3(r2)
    96e0:	1004923a 	slli	r2,r2,8
    96e4:	10c4b03a 	or	r2,r2,r3
    96e8:	10bfffcc 	andi	r2,r2,65535
    96ec:	01402004 	movi	r5,128
    96f0:	1009883a 	mov	r4,r2
    96f4:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    96f8:	e0bfff17 	ldw	r2,-4(fp)
    96fc:	10800103 	ldbu	r2,4(r2)
    9700:	10803fcc 	andi	r2,r2,255
    9704:	01402004 	movi	r5,128
    9708:	1009883a 	mov	r4,r2
    970c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    9710:	e0bfff17 	ldw	r2,-4(fp)
    9714:	10800143 	ldbu	r2,5(r2)
    9718:	10803fcc 	andi	r2,r2,255
    971c:	01402004 	movi	r5,128
    9720:	1009883a 	mov	r4,r2
    9724:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9728:	e0bfff17 	ldw	r2,-4(fp)
    972c:	10800183 	ldbu	r2,6(r2)
    9730:	10803fcc 	andi	r2,r2,255
    9734:	01402004 	movi	r5,128
    9738:	1009883a 	mov	r4,r2
    973c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9740:	e0bfff17 	ldw	r2,-4(fp)
    9744:	10c001c3 	ldbu	r3,7(r2)
    9748:	10800203 	ldbu	r2,8(r2)
    974c:	1004923a 	slli	r2,r2,8
    9750:	10c4b03a 	or	r2,r2,r3
    9754:	10bfffcc 	andi	r2,r2,65535
    9758:	01402004 	movi	r5,128
    975c:	1009883a 	mov	r4,r2
    9760:	000914c0 	call	914c <_Z10D_PrintHexItEvT_i>
}
    9764:	0001883a 	nop
    9768:	e037883a 	mov	sp,fp
    976c:	dfc00117 	ldw	ra,4(sp)
    9770:	df000017 	ldw	fp,0(sp)
    9774:	dec00204 	addi	sp,sp,8
    9778:	f800283a 	ret

0000977c <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    977c:	defffd04 	addi	sp,sp,-12
    9780:	dfc00215 	stw	ra,8(sp)
    9784:	df000115 	stw	fp,4(sp)
    9788:	df000104 	addi	fp,sp,4
    978c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9790:	010000f4 	movhi	r4,3
    9794:	21247704 	addi	r4,r4,-28196
    9798:	00100300 	call	10030 <puts>
	vbusState = 0;
    979c:	d0324345 	stb	zero,-14067(gp)
};
    97a0:	0001883a 	nop
    97a4:	e037883a 	mov	sp,fp
    97a8:	dfc00117 	ldw	ra,4(sp)
    97ac:	df000017 	ldw	fp,0(sp)
    97b0:	dec00204 	addi	sp,sp,8
    97b4:	f800283a 	ret

000097b8 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    97b8:	defffe04 	addi	sp,sp,-8
    97bc:	df000115 	stw	fp,4(sp)
    97c0:	df000104 	addi	fp,sp,4
    97c4:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    97c8:	d0b24343 	ldbu	r2,-14067(gp)
};
    97cc:	e037883a 	mov	sp,fp
    97d0:	df000017 	ldw	fp,0(sp)
    97d4:	dec00104 	addi	sp,sp,4
    97d8:	f800283a 	ret

000097dc <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    97dc:	defff704 	addi	sp,sp,-36
    97e0:	dfc00815 	stw	ra,32(sp)
    97e4:	df000715 	stw	fp,28(sp)
    97e8:	df000704 	addi	fp,sp,28
    97ec:	e13ffd15 	stw	r4,-12(fp)
    97f0:	2807883a 	mov	r3,r5
    97f4:	3005883a 	mov	r2,r6
    97f8:	e0fffe05 	stb	r3,-8(fp)
    97fc:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    9800:	e03ffc45 	stb	zero,-15(fp)
    9804:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9808:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    980c:	e0bffe03 	ldbu	r2,-8(fp)
    9810:	10800084 	addi	r2,r2,2
    9814:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    9818:	e0bfff03 	ldbu	r2,-4(fp)
    981c:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9820:	e0fffc44 	addi	r3,fp,-15
    9824:	d8000215 	stw	zero,8(sp)
    9828:	e0bffcc4 	addi	r2,fp,-13
    982c:	d8800115 	stw	r2,4(sp)
    9830:	d8000015 	stw	zero,0(sp)
    9834:	180f883a 	mov	r7,r3
    9838:	01800084 	movi	r6,2
    983c:	000b883a 	mov	r5,zero
    9840:	01010034 	movhi	r4,1024
    9844:	21044804 	addi	r4,r4,4384
    9848:	00232840 	call	23284 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    984c:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9850:	0001883a 	nop
    9854:	e037883a 	mov	sp,fp
    9858:	dfc00117 	ldw	ra,4(sp)
    985c:	df000017 	ldw	fp,0(sp)
    9860:	dec00204 	addi	sp,sp,8
    9864:	f800283a 	ret

00009868 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9868:	defff304 	addi	sp,sp,-52
    986c:	dfc00c15 	stw	ra,48(sp)
    9870:	df000b15 	stw	fp,44(sp)
    9874:	dc000a15 	stw	r16,40(sp)
    9878:	df000b04 	addi	fp,sp,44
    987c:	e13ffb15 	stw	r4,-20(fp)
    9880:	3009883a 	mov	r4,r6
    9884:	e1fffe15 	stw	r7,-8(fp)
    9888:	e17ffc05 	stb	r5,-16(fp)
    988c:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9890:	d809883a 	mov	r4,sp
    9894:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9898:	e13ffd03 	ldbu	r4,-12(fp)
    989c:	e13ff815 	stw	r4,-32(fp)
    98a0:	200b883a 	mov	r5,r4
    98a4:	29400044 	addi	r5,r5,1
    98a8:	2819883a 	mov	r12,r5
    98ac:	001b883a 	mov	r13,zero
    98b0:	600ad77a 	srli	r5,r12,29
    98b4:	681290fa 	slli	r9,r13,3
    98b8:	2a52b03a 	or	r9,r5,r9
    98bc:	601090fa 	slli	r8,r12,3
    98c0:	200b883a 	mov	r5,r4
    98c4:	29400044 	addi	r5,r5,1
    98c8:	2815883a 	mov	r10,r5
    98cc:	0017883a 	mov	r11,zero
    98d0:	500ad77a 	srli	r5,r10,29
    98d4:	580690fa 	slli	r3,r11,3
    98d8:	28c6b03a 	or	r3,r5,r3
    98dc:	500490fa 	slli	r2,r10,3
    98e0:	2005883a 	mov	r2,r4
    98e4:	10800044 	addi	r2,r2,1
    98e8:	108000c4 	addi	r2,r2,3
    98ec:	1004d0ba 	srli	r2,r2,2
    98f0:	1085883a 	add	r2,r2,r2
    98f4:	1085883a 	add	r2,r2,r2
    98f8:	d8b7c83a 	sub	sp,sp,r2
    98fc:	d8800304 	addi	r2,sp,12
    9900:	1005883a 	mov	r2,r2
    9904:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9908:	e0bffc03 	ldbu	r2,-16(fp)
    990c:	10800084 	addi	r2,r2,2
    9910:	1007883a 	mov	r3,r2
    9914:	e0bff917 	ldw	r2,-28(fp)
    9918:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    991c:	e0bff917 	ldw	r2,-28(fp)
    9920:	10800044 	addi	r2,r2,1
    9924:	e0fffd03 	ldbu	r3,-12(fp)
    9928:	180d883a 	mov	r6,r3
    992c:	e17ffe17 	ldw	r5,-8(fp)
    9930:	1009883a 	mov	r4,r2
    9934:	000fc740 	call	fc74 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9938:	e0bffd03 	ldbu	r2,-12(fp)
    993c:	10800044 	addi	r2,r2,1
    9940:	1009883a 	mov	r4,r2
    9944:	e0fff917 	ldw	r3,-28(fp)
    9948:	d8000215 	stw	zero,8(sp)
    994c:	e0bffa44 	addi	r2,fp,-23
    9950:	d8800115 	stw	r2,4(sp)
    9954:	d8000015 	stw	zero,0(sp)
    9958:	180f883a 	mov	r7,r3
    995c:	200d883a 	mov	r6,r4
    9960:	000b883a 	mov	r5,zero
    9964:	01010034 	movhi	r4,1024
    9968:	21044804 	addi	r4,r4,4384
    996c:	00232840 	call	23284 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9970:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9974:	e0bffd03 	ldbu	r2,-12(fp)
    9978:	e0fffe17 	ldw	r3,-8(fp)
    997c:	1885883a 	add	r2,r3,r2
    9980:	8037883a 	mov	sp,r16
}
    9984:	e6ffff04 	addi	sp,fp,-4
    9988:	dfc00217 	ldw	ra,8(sp)
    998c:	df000117 	ldw	fp,4(sp)
    9990:	dc000017 	ldw	r16,0(sp)
    9994:	dec00304 	addi	sp,sp,12
    9998:	f800283a 	ret

0000999c <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    999c:	defffc04 	addi	sp,sp,-16
    99a0:	dfc00315 	stw	ra,12(sp)
    99a4:	df000215 	stw	fp,8(sp)
    99a8:	df000204 	addi	fp,sp,8
    99ac:	e13ffe15 	stw	r4,-8(fp)
    99b0:	2805883a 	mov	r2,r5
    99b4:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    99b8:	010000f4 	movhi	r4,3
    99bc:	21247d04 	addi	r4,r4,-28172
    99c0:	00100300 	call	10030 <puts>
	regWr(rIOPINS1, data);
    99c4:	e0bfff03 	ldbu	r2,-4(fp)
    99c8:	100d883a 	mov	r6,r2
    99cc:	01402804 	movi	r5,160
    99d0:	e13ffe17 	ldw	r4,-8(fp)
    99d4:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    99d8:	e0bfff03 	ldbu	r2,-4(fp)
    99dc:	1005d13a 	srai	r2,r2,4
    99e0:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    99e4:	e0bfff03 	ldbu	r2,-4(fp)
    99e8:	100d883a 	mov	r6,r2
    99ec:	01402a04 	movi	r5,168
    99f0:	e13ffe17 	ldw	r4,-8(fp)
    99f4:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	return;
    99f8:	0001883a 	nop
}
    99fc:	e037883a 	mov	sp,fp
    9a00:	dfc00117 	ldw	ra,4(sp)
    9a04:	df000017 	ldw	fp,0(sp)
    9a08:	dec00204 	addi	sp,sp,8
    9a0c:	f800283a 	ret

00009a10 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9a10:	defff804 	addi	sp,sp,-32
    9a14:	dfc00715 	stw	ra,28(sp)
    9a18:	df000615 	stw	fp,24(sp)
    9a1c:	df000604 	addi	fp,sp,24
    9a20:	e13ffe15 	stw	r4,-8(fp)
    9a24:	2805883a 	mov	r2,r5
    9a28:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9a2c:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9a30:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9a34:	e0bfff03 	ldbu	r2,-4(fp)
    9a38:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9a3c:	e0fffd44 	addi	r3,fp,-11
    9a40:	d8000215 	stw	zero,8(sp)
    9a44:	e0bffd84 	addi	r2,fp,-10
    9a48:	d8800115 	stw	r2,4(sp)
    9a4c:	00800044 	movi	r2,1
    9a50:	d8800015 	stw	r2,0(sp)
    9a54:	180f883a 	mov	r7,r3
    9a58:	01800044 	movi	r6,1
    9a5c:	000b883a 	mov	r5,zero
    9a60:	01010034 	movhi	r4,1024
    9a64:	21044804 	addi	r4,r4,4384
    9a68:	00232840 	call	23284 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9a6c:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9a70:	e0bffd83 	ldbu	r2,-10(fp)
}
    9a74:	e037883a 	mov	sp,fp
    9a78:	dfc00117 	ldw	ra,4(sp)
    9a7c:	df000017 	ldw	fp,0(sp)
    9a80:	dec00204 	addi	sp,sp,8
    9a84:	f800283a 	ret

00009a88 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9a88:	defff604 	addi	sp,sp,-40
    9a8c:	dfc00915 	stw	ra,36(sp)
    9a90:	df000815 	stw	fp,32(sp)
    9a94:	df000804 	addi	fp,sp,32
    9a98:	e13ffc15 	stw	r4,-16(fp)
    9a9c:	2807883a 	mov	r3,r5
    9aa0:	3005883a 	mov	r2,r6
    9aa4:	e1ffff15 	stw	r7,-4(fp)
    9aa8:	e0fffd05 	stb	r3,-12(fp)
    9aac:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9ab0:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9ab4:	e0bffd03 	ldbu	r2,-12(fp)
    9ab8:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9abc:	e0bffe03 	ldbu	r2,-8(fp)
    9ac0:	e13ffb44 	addi	r4,fp,-19
    9ac4:	d8000215 	stw	zero,8(sp)
    9ac8:	e0ffff17 	ldw	r3,-4(fp)
    9acc:	d8c00115 	stw	r3,4(sp)
    9ad0:	d8800015 	stw	r2,0(sp)
    9ad4:	200f883a 	mov	r7,r4
    9ad8:	01800044 	movi	r6,1
    9adc:	000b883a 	mov	r5,zero
    9ae0:	01010034 	movhi	r4,1024
    9ae4:	21044804 	addi	r4,r4,4384
    9ae8:	00232840 	call	23284 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9aec:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9af0:	e0bffe03 	ldbu	r2,-8(fp)
    9af4:	e0ffff17 	ldw	r3,-4(fp)
    9af8:	1885883a 	add	r2,r3,r2
}
    9afc:	e037883a 	mov	sp,fp
    9b00:	dfc00117 	ldw	ra,4(sp)
    9b04:	df000017 	ldw	fp,0(sp)
    9b08:	dec00204 	addi	sp,sp,8
    9b0c:	f800283a 	ret

00009b10 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9b10:	defffc04 	addi	sp,sp,-16
    9b14:	dfc00315 	stw	ra,12(sp)
    9b18:	df000215 	stw	fp,8(sp)
    9b1c:	df000204 	addi	fp,sp,8
    9b20:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9b24:	010000f4 	movhi	r4,3
    9b28:	21248104 	addi	r4,r4,-28156
    9b2c:	00100300 	call	10030 <puts>
	uint8_t gpin = 0;
    9b30:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9b34:	01402a04 	movi	r5,168
    9b38:	e13fff17 	ldw	r4,-4(fp)
    9b3c:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9b40:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9b44:	e0fffe03 	ldbu	r3,-8(fp)
    9b48:	00bffc04 	movi	r2,-16
    9b4c:	1884703a 	and	r2,r3,r2
    9b50:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9b54:	01402804 	movi	r5,160
    9b58:	e13fff17 	ldw	r4,-4(fp)
    9b5c:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9b60:	10803fcc 	andi	r2,r2,255
    9b64:	1005d13a 	srai	r2,r2,4
    9b68:	1007883a 	mov	r3,r2
    9b6c:	e0bffe03 	ldbu	r2,-8(fp)
    9b70:	1884b03a 	or	r2,r3,r2
    9b74:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9b78:	e0bffe03 	ldbu	r2,-8(fp)
}
    9b7c:	e037883a 	mov	sp,fp
    9b80:	dfc00117 	ldw	ra,4(sp)
    9b84:	df000017 	ldw	fp,0(sp)
    9b88:	dec00204 	addi	sp,sp,8
    9b8c:	f800283a 	ret

00009b90 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9b90:	defffc04 	addi	sp,sp,-16
    9b94:	dfc00315 	stw	ra,12(sp)
    9b98:	df000215 	stw	fp,8(sp)
    9b9c:	df000204 	addi	fp,sp,8
    9ba0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9ba4:	010000f4 	movhi	r4,3
    9ba8:	21248504 	addi	r4,r4,-28140
    9bac:	00100300 	call	10030 <puts>
	uint8_t gpout = 0;
    9bb0:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9bb4:	01402804 	movi	r5,160
    9bb8:	e13fff17 	ldw	r4,-4(fp)
    9bbc:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9bc0:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9bc4:	e0bffe03 	ldbu	r2,-8(fp)
    9bc8:	108003cc 	andi	r2,r2,15
    9bcc:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9bd0:	01402a04 	movi	r5,168
    9bd4:	e13fff17 	ldw	r4,-4(fp)
    9bd8:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9bdc:	10803fcc 	andi	r2,r2,255
    9be0:	1004913a 	slli	r2,r2,4
    9be4:	1007883a 	mov	r3,r2
    9be8:	e0bffe03 	ldbu	r2,-8(fp)
    9bec:	1884b03a 	or	r2,r3,r2
    9bf0:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9bf4:	e0bffe03 	ldbu	r2,-8(fp)
}
    9bf8:	e037883a 	mov	sp,fp
    9bfc:	dfc00117 	ldw	ra,4(sp)
    9c00:	df000017 	ldw	fp,0(sp)
    9c04:	dec00204 	addi	sp,sp,8
    9c08:	f800283a 	ret

00009c0c <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9c0c:	defffc04 	addi	sp,sp,-16
    9c10:	dfc00315 	stw	ra,12(sp)
    9c14:	df000215 	stw	fp,8(sp)
    9c18:	df000204 	addi	fp,sp,8
    9c1c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9c20:	010000f4 	movhi	r4,3
    9c24:	21248b04 	addi	r4,r4,-28116
    9c28:	00100300 	call	10030 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9c2c:	0007883a 	mov	r3,zero
    9c30:	00810034 	movhi	r2,1024
    9c34:	10847404 	addi	r2,r2,4560
    9c38:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9c3c:	010003f4 	movhi	r4,15
    9c40:	21109004 	addi	r4,r4,16960
    9c44:	00209b80 	call	209b8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9c48:	00c00044 	movi	r3,1
    9c4c:	00810034 	movhi	r2,1024
    9c50:	10847404 	addi	r2,r2,4560
    9c54:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9c58:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9c5c:	01800804 	movi	r6,32
    9c60:	01401e04 	movi	r5,120
    9c64:	e13fff17 	ldw	r4,-4(fp)
    9c68:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9c6c:	000d883a 	mov	r6,zero
    9c70:	01401e04 	movi	r5,120
    9c74:	e13fff17 	ldw	r4,-4(fp)
    9c78:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9c7c:	e0bffe0b 	ldhu	r2,-8(fp)
    9c80:	10800044 	addi	r2,r2,1
    9c84:	e0bffe0d 	sth	r2,-8(fp)
    9c88:	e0bffe0b 	ldhu	r2,-8(fp)
    9c8c:	1004c03a 	cmpne	r2,r2,zero
    9c90:	10803fcc 	andi	r2,r2,255
    9c94:	10000a26 	beq	r2,zero,9cc0 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9c98:	01401a04 	movi	r5,104
    9c9c:	e13fff17 	ldw	r4,-4(fp)
    9ca0:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9ca4:	10803fcc 	andi	r2,r2,255
    9ca8:	1080004c 	andi	r2,r2,1
    9cac:	1004c03a 	cmpne	r2,r2,zero
    9cb0:	10803fcc 	andi	r2,r2,255
    9cb4:	1000011e 	bne	r2,zero,9cbc <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9cb8:	003ff006 	br	9c7c <__alt_data_end+0xfc009c7c>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9cbc:	0001883a 	nop
		}
	}
	return ( i);
    9cc0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9cc4:	e037883a 	mov	sp,fp
    9cc8:	dfc00117 	ldw	ra,4(sp)
    9ccc:	df000017 	ldw	fp,0(sp)
    9cd0:	dec00204 	addi	sp,sp,8
    9cd4:	f800283a 	ret

00009cd8 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9cd8:	defffe04 	addi	sp,sp,-8
    9cdc:	df000115 	stw	fp,4(sp)
    9ce0:	df000104 	addi	fp,sp,4
    9ce4:	2005883a 	mov	r2,r4
    9ce8:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9cec:	00800044 	movi	r2,1
}
    9cf0:	e037883a 	mov	sp,fp
    9cf4:	df000017 	ldw	fp,0(sp)
    9cf8:	dec00104 	addi	sp,sp,4
    9cfc:	f800283a 	ret

00009d00 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9d00:	defffd04 	addi	sp,sp,-12
    9d04:	dfc00215 	stw	ra,8(sp)
    9d08:	df000115 	stw	fp,4(sp)
    9d0c:	df000104 	addi	fp,sp,4
    9d10:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9d14:	010000f4 	movhi	r4,3
    9d18:	21248f04 	addi	r4,r4,-28100
    9d1c:	00100300 	call	10030 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9d20:	01800604 	movi	r6,24
    9d24:	01402204 	movi	r5,136
    9d28:	e13fff17 	ldw	r4,-4(fp)
    9d2c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9d30:	e13fff17 	ldw	r4,-4(fp)
    9d34:	0009c0c0 	call	9c0c <_ZN8MAX3421e5resetEv>
    9d38:	10bfffcc 	andi	r2,r2,65535
    9d3c:	1005003a 	cmpeq	r2,r2,zero
    9d40:	10803fcc 	andi	r2,r2,255
    9d44:	10000226 	beq	r2,zero,9d50 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9d48:	00bfffc4 	movi	r2,-1
    9d4c:	00002006 	br	9dd0 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9d50:	01803044 	movi	r6,193
    9d54:	01403604 	movi	r5,216
    9d58:	e13fff17 	ldw	r4,-4(fp)
    9d5c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9d60:	01801804 	movi	r6,96
    9d64:	01403404 	movi	r5,208
    9d68:	e13fff17 	ldw	r4,-4(fp)
    9d6c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9d70:	01800104 	movi	r6,4
    9d74:	01403a04 	movi	r5,232
    9d78:	e13fff17 	ldw	r4,-4(fp)
    9d7c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9d80:	01403a04 	movi	r5,232
    9d84:	e13fff17 	ldw	r4,-4(fp)
    9d88:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9d8c:	10803fcc 	andi	r2,r2,255
    9d90:	1080010c 	andi	r2,r2,4
    9d94:	1005003a 	cmpeq	r2,r2,zero
    9d98:	10803fcc 	andi	r2,r2,255
    9d9c:	10000126 	beq	r2,zero,9da4 <_ZN8MAX3421e4InitEv+0xa4>
    9da0:	003ff706 	br	9d80 <__alt_data_end+0xfc009d80>

	busprobe(); //check if anything is connected
    9da4:	e13fff17 	ldw	r4,-4(fp)
    9da8:	0009efc0 	call	9efc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9dac:	01800804 	movi	r6,32
    9db0:	01403204 	movi	r5,200
    9db4:	e13fff17 	ldw	r4,-4(fp)
    9db8:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9dbc:	01800044 	movi	r6,1
    9dc0:	01402004 	movi	r5,128
    9dc4:	e13fff17 	ldw	r4,-4(fp)
    9dc8:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9dcc:	0005883a 	mov	r2,zero
}
    9dd0:	e037883a 	mov	sp,fp
    9dd4:	dfc00117 	ldw	ra,4(sp)
    9dd8:	df000017 	ldw	fp,0(sp)
    9ddc:	dec00204 	addi	sp,sp,8
    9de0:	f800283a 	ret

00009de4 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9de4:	defffc04 	addi	sp,sp,-16
    9de8:	dfc00315 	stw	ra,12(sp)
    9dec:	df000215 	stw	fp,8(sp)
    9df0:	df000204 	addi	fp,sp,8
    9df4:	e13ffe15 	stw	r4,-8(fp)
    9df8:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9dfc:	010000f4 	movhi	r4,3
    9e00:	21249304 	addi	r4,r4,-28084
    9e04:	00100300 	call	10030 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9e08:	01800644 	movi	r6,25
    9e0c:	01402204 	movi	r5,136
    9e10:	e13ffe17 	ldw	r4,-8(fp)
    9e14:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9e18:	e13ffe17 	ldw	r4,-8(fp)
    9e1c:	0009c0c0 	call	9c0c <_ZN8MAX3421e5resetEv>
    9e20:	10bfffcc 	andi	r2,r2,65535
    9e24:	1005003a 	cmpeq	r2,r2,zero
    9e28:	10803fcc 	andi	r2,r2,255
    9e2c:	10000226 	beq	r2,zero,9e38 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9e30:	00bfffc4 	movi	r2,-1
    9e34:	00002c06 	br	9ee8 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9e38:	e0bfff17 	ldw	r2,-4(fp)
    9e3c:	1080fa08 	cmpgei	r2,r2,1000
    9e40:	1000021e 	bne	r2,zero,9e4c <_ZN8MAX3421e4InitEi+0x68>
    9e44:	0080fa04 	movi	r2,1000
    9e48:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9e4c:	e0bfff17 	ldw	r2,-4(fp)
    9e50:	1009883a 	mov	r4,r2
    9e54:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9e58:	01803044 	movi	r6,193
    9e5c:	01403604 	movi	r5,216
    9e60:	e13ffe17 	ldw	r4,-8(fp)
    9e64:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9e68:	01801804 	movi	r6,96
    9e6c:	01403404 	movi	r5,208
    9e70:	e13ffe17 	ldw	r4,-8(fp)
    9e74:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9e78:	01800104 	movi	r6,4
    9e7c:	01403a04 	movi	r5,232
    9e80:	e13ffe17 	ldw	r4,-8(fp)
    9e84:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9e88:	01403a04 	movi	r5,232
    9e8c:	e13ffe17 	ldw	r4,-8(fp)
    9e90:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9e94:	10803fcc 	andi	r2,r2,255
    9e98:	1080010c 	andi	r2,r2,4
    9e9c:	1005003a 	cmpeq	r2,r2,zero
    9ea0:	10803fcc 	andi	r2,r2,255
    9ea4:	10000126 	beq	r2,zero,9eac <_ZN8MAX3421e4InitEi+0xc8>
    9ea8:	003ff706 	br	9e88 <__alt_data_end+0xfc009e88>

	busprobe(); //check if anything is connected
    9eac:	e13ffe17 	ldw	r4,-8(fp)
    9eb0:	0009efc0 	call	9efc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9eb4:	01800804 	movi	r6,32
    9eb8:	01403204 	movi	r5,200
    9ebc:	e13ffe17 	ldw	r4,-8(fp)
    9ec0:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ec4:	01800044 	movi	r6,1
    9ec8:	01402004 	movi	r5,128
    9ecc:	e13ffe17 	ldw	r4,-8(fp)
    9ed0:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9ed4:	01800604 	movi	r6,24
    9ed8:	01402204 	movi	r5,136
    9edc:	e13ffe17 	ldw	r4,-8(fp)
    9ee0:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9ee4:	0005883a 	mov	r2,zero
}
    9ee8:	e037883a 	mov	sp,fp
    9eec:	dfc00117 	ldw	ra,4(sp)
    9ef0:	df000017 	ldw	fp,0(sp)
    9ef4:	dec00204 	addi	sp,sp,8
    9ef8:	f800283a 	ret

00009efc <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9efc:	defffc04 	addi	sp,sp,-16
    9f00:	dfc00315 	stw	ra,12(sp)
    9f04:	df000215 	stw	fp,8(sp)
    9f08:	df000204 	addi	fp,sp,8
    9f0c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9f10:	010000f4 	movhi	r4,3
    9f14:	21249904 	addi	r4,r4,-28060
    9f18:	00100300 	call	10030 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9f1c:	01403e04 	movi	r5,248
    9f20:	e13fff17 	ldw	r4,-4(fp)
    9f24:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9f28:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9f2c:	e0fffe03 	ldbu	r3,-8(fp)
    9f30:	00bff004 	movi	r2,-64
    9f34:	1884703a 	and	r2,r3,r2
    9f38:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9f3c:	e0bffe03 	ldbu	r2,-8(fp)
    9f40:	10c01020 	cmpeqi	r3,r2,64
    9f44:	1800251e 	bne	r3,zero,9fdc <_ZN8MAX3421e8busprobeEv+0xe0>
    9f48:	10c01048 	cmpgei	r3,r2,65
    9f4c:	1800021e 	bne	r3,zero,9f58 <_ZN8MAX3421e8busprobeEv+0x5c>
    9f50:	10003b26 	beq	r2,zero,a040 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f54:	00004006 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9f58:	10c02020 	cmpeqi	r3,r2,128
    9f5c:	1800031e 	bne	r3,zero,9f6c <_ZN8MAX3421e8busprobeEv+0x70>
    9f60:	10803020 	cmpeqi	r2,r2,192
    9f64:	1000331e 	bne	r2,zero,a034 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9f68:	00003b06 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9f6c:	01403604 	movi	r5,216
    9f70:	e13fff17 	ldw	r4,-4(fp)
    9f74:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9f78:	10803fcc 	andi	r2,r2,255
    9f7c:	1080008c 	andi	r2,r2,2
    9f80:	1005003a 	cmpeq	r2,r2,zero
    9f84:	10803fcc 	andi	r2,r2,255
    9f88:	10000a26 	beq	r2,zero,9fb4 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9f8c:	010000f4 	movhi	r4,3
    9f90:	21249e04 	addi	r4,r4,-28040
    9f94:	00100300 	call	10030 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9f98:	01803244 	movi	r6,201
    9f9c:	01403604 	movi	r5,216
    9fa0:	e13fff17 	ldw	r4,-4(fp)
    9fa4:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9fa8:	00800084 	movi	r2,2
    9fac:	d0b24345 	stb	r2,-14067(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9fb0:	00002906 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9fb4:	010000f4 	movhi	r4,3
    9fb8:	2124a504 	addi	r4,r4,-28012
    9fbc:	00100300 	call	10030 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9fc0:	018032c4 	movi	r6,203
    9fc4:	01403604 	movi	r5,216
    9fc8:	e13fff17 	ldw	r4,-4(fp)
    9fcc:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9fd0:	008000c4 	movi	r2,3
    9fd4:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    9fd8:	00001f06 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9fdc:	01403604 	movi	r5,216
    9fe0:	e13fff17 	ldw	r4,-4(fp)
    9fe4:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    9fe8:	10803fcc 	andi	r2,r2,255
    9fec:	1080008c 	andi	r2,r2,2
    9ff0:	1005003a 	cmpeq	r2,r2,zero
    9ff4:	10803fcc 	andi	r2,r2,255
    9ff8:	10000726 	beq	r2,zero,a018 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9ffc:	018032c4 	movi	r6,203
    a000:	01403604 	movi	r5,216
    a004:	e13fff17 	ldw	r4,-4(fp)
    a008:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a00c:	008000c4 	movi	r2,3
    a010:	d0b24345 	stb	r2,-14067(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    a014:	00001006 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a018:	01803244 	movi	r6,201
    a01c:	01403604 	movi	r5,216
    a020:	e13fff17 	ldw	r4,-4(fp)
    a024:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a028:	00800084 	movi	r2,2
    a02c:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a030:	00000906 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    a034:	00800044 	movi	r2,1
    a038:	d0b24345 	stb	r2,-14067(gp)
			break;
    a03c:	00000606 	br	a058 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    a040:	01803444 	movi	r6,209
    a044:	01403604 	movi	r5,216
    a048:	e13fff17 	ldw	r4,-4(fp)
    a04c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    a050:	d0324345 	stb	zero,-14067(gp)
			break;
    a054:	0001883a 	nop
	}//end switch( bus_sample )
}
    a058:	0001883a 	nop
    a05c:	e037883a 	mov	sp,fp
    a060:	dfc00117 	ldw	ra,4(sp)
    a064:	df000017 	ldw	fp,0(sp)
    a068:	dec00204 	addi	sp,sp,8
    a06c:	f800283a 	ret

0000a070 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    a070:	defffc04 	addi	sp,sp,-16
    a074:	dfc00315 	stw	ra,12(sp)
    a078:	df000215 	stw	fp,8(sp)
    a07c:	df000204 	addi	fp,sp,8
    a080:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    a084:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    a088:	00810034 	movhi	r2,1024
    a08c:	10847c04 	addi	r2,r2,4592
    a090:	10800003 	ldbu	r2,0(r2)
    a094:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    a098:	00810034 	movhi	r2,1024
    a09c:	10847c04 	addi	r2,r2,4592
    a0a0:	10800037 	ldwio	r2,0(r2)
    a0a4:	1005003a 	cmpeq	r2,r2,zero
    a0a8:	10803fcc 	andi	r2,r2,255
    a0ac:	10000326 	beq	r2,zero,a0bc <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    a0b0:	e13fff17 	ldw	r4,-4(fp)
    a0b4:	000a0d40 	call	a0d4 <_ZN8MAX3421e10IntHandlerEv>
    a0b8:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    a0bc:	e0bffe03 	ldbu	r2,-8(fp)
}
    a0c0:	e037883a 	mov	sp,fp
    a0c4:	dfc00117 	ldw	ra,4(sp)
    a0c8:	df000017 	ldw	fp,0(sp)
    a0cc:	dec00204 	addi	sp,sp,8
    a0d0:	f800283a 	ret

0000a0d4 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    a0d4:	defffc04 	addi	sp,sp,-16
    a0d8:	dfc00315 	stw	ra,12(sp)
    a0dc:	df000215 	stw	fp,8(sp)
    a0e0:	df000204 	addi	fp,sp,8
    a0e4:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    a0e8:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    a0ec:	01403204 	movi	r5,200
    a0f0:	e13fff17 	ldw	r4,-4(fp)
    a0f4:	0009a100 	call	9a10 <_ZN8MAX3421e5regRdEh>
    a0f8:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    a0fc:	e0bffe43 	ldbu	r2,-7(fp)
    a100:	1080080c 	andi	r2,r2,32
    a104:	10000526 	beq	r2,zero,a11c <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    a108:	e13fff17 	ldw	r4,-4(fp)
    a10c:	0009efc0 	call	9efc <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    a110:	e0bffe03 	ldbu	r2,-8(fp)
    a114:	10800814 	ori	r2,r2,32
    a118:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    a11c:	e0bffe03 	ldbu	r2,-8(fp)
    a120:	100d883a 	mov	r6,r2
    a124:	01403204 	movi	r5,200
    a128:	e13fff17 	ldw	r4,-4(fp)
    a12c:	00097dc0 	call	97dc <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    a130:	e0bffe03 	ldbu	r2,-8(fp)
}
    a134:	e037883a 	mov	sp,fp
    a138:	dfc00117 	ldw	ra,4(sp)
    a13c:	df000017 	ldw	fp,0(sp)
    a140:	dec00204 	addi	sp,sp,8
    a144:	f800283a 	ret

0000a148 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    a148:	defffe04 	addi	sp,sp,-8
    a14c:	df000115 	stw	fp,4(sp)
    a150:	df000104 	addi	fp,sp,4
    a154:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    a158:	0005883a 	mov	r2,zero
}
    a15c:	e037883a 	mov	sp,fp
    a160:	df000017 	ldw	fp,0(sp)
    a164:	dec00104 	addi	sp,sp,4
    a168:	f800283a 	ret

0000a16c <_Z6onInitv>:
bool ped_flip = 0;

void MIDI_poll();

void onInit()
{
    a16c:	defff804 	addi	sp,sp,-32
    a170:	dfc00715 	stw	ra,28(sp)
    a174:	df000615 	stw	fp,24(sp)
    a178:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    a17c:	010000f4 	movhi	r4,3
    a180:	2107ce04 	addi	r4,r4,7992
    a184:	000ae400 	call	ae40 <_ZN9USBH_MIDI8idVendorEv>
    a188:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    a18c:	010000f4 	movhi	r4,3
    a190:	2107ce04 	addi	r4,r4,7992
    a194:	000ae680 	call	ae68 <_ZN9USBH_MIDI9idProductEv>
    a198:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    a19c:	e0fffa0b 	ldhu	r3,-24(fp)
    a1a0:	e13ffa8b 	ldhu	r4,-22(fp)
    a1a4:	e0bffb04 	addi	r2,fp,-20
    a1a8:	200f883a 	mov	r7,r4
    a1ac:	180d883a 	mov	r6,r3
    a1b0:	014000f4 	movhi	r5,3
    a1b4:	296ce104 	addi	r5,r5,-19580
    a1b8:	1009883a 	mov	r4,r2
    a1bc:	00103f40 	call	103f4 <sprintf>
  printf("%s\n", buf);
    a1c0:	e0bffb04 	addi	r2,fp,-20
    a1c4:	1009883a 	mov	r4,r2
    a1c8:	00100300 	call	10030 <puts>
}
    a1cc:	0001883a 	nop
    a1d0:	e037883a 	mov	sp,fp
    a1d4:	dfc00117 	ldw	ra,4(sp)
    a1d8:	df000017 	ldw	fp,0(sp)
    a1dc:	dec00204 	addi	sp,sp,8
    a1e0:	f800283a 	ret

0000a1e4 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    a1e4:	defffe04 	addi	sp,sp,-8
    a1e8:	dfc00115 	stw	ra,4(sp)
    a1ec:	df000015 	stw	fp,0(sp)
    a1f0:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    a1f4:	010000f4 	movhi	r4,3
    a1f8:	21079f04 	addi	r4,r4,7804
    a1fc:	0009d000 	call	9d00 <_ZN8MAX3421e4InitEv>
    a200:	10803fcc 	andi	r2,r2,255
    a204:	1080201c 	xori	r2,r2,128
    a208:	10bfe004 	addi	r2,r2,-128
    a20c:	10bfffe0 	cmpeqi	r2,r2,-1
    a210:	10803fcc 	andi	r2,r2,255
    a214:	10000326 	beq	r2,zero,a224 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    a218:	010000f4 	movhi	r4,3
    a21c:	212ce604 	addi	r4,r4,-19560
    a220:	000ff140 	call	ff14 <printf>
	printf ("USB Started\n\r");
    a224:	010000f4 	movhi	r4,3
    a228:	212ce804 	addi	r4,r4,-19552
    a22c:	000ff140 	call	ff14 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    a230:	01400074 	movhi	r5,1
    a234:	29685b04 	addi	r5,r5,-24212
    a238:	010000f4 	movhi	r4,3
    a23c:	2107ce04 	addi	r4,r4,7992
    a240:	000ae900 	call	ae90 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    a244:	0001883a 	nop
    a248:	e037883a 	mov	sp,fp
    a24c:	dfc00117 	ldw	ra,4(sp)
    a250:	df000017 	ldw	fp,0(sp)
    a254:	dec00204 	addi	sp,sp,8
    a258:	f800283a 	ret

0000a25c <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    a25c:	deffe504 	addi	sp,sp,-108
    a260:	dfc01a15 	stw	ra,104(sp)
    a264:	df001915 	stw	fp,100(sp)
    a268:	df001904 	addi	fp,sp,100
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    a26c:	e0ffeec4 	addi	r3,fp,-69
    a270:	e0bfff04 	addi	r2,fp,-4
    a274:	180d883a 	mov	r6,r3
    a278:	100b883a 	mov	r5,r2
    a27c:	010000f4 	movhi	r4,3
    a280:	2107ce04 	addi	r4,r4,7992
    a284:	0007d300 	call	7d30 <_ZN9USBH_MIDI8RecvDataEPtPh>
    a288:	10803fcc 	andi	r2,r2,255
    a28c:	1005003a 	cmpeq	r2,r2,zero
    a290:	10803fcc 	andi	r2,r2,255
    a294:	10025926 	beq	r2,zero,abfc <_Z9MIDI_pollv+0x9a0>
		channel = (bufMidi[1] & 0x0F);
    a298:	e0bfef03 	ldbu	r2,-68(fp)
    a29c:	108003cc 	andi	r2,r2,15
    a2a0:	e0bfee05 	stb	r2,-72(fp)
		ctrl = bufMidi[2];
    a2a4:	e0bfef43 	ldbu	r2,-67(fp)
    a2a8:	e0bfee45 	stb	r2,-71(fp)
		par = bufMidi[3];
    a2ac:	e0bfef83 	ldbu	r2,-66(fp)
    a2b0:	e0bfee85 	stb	r2,-70(fp)
	switch (bufMidi[1] & 0xF0) {
    a2b4:	e0bfef03 	ldbu	r2,-68(fp)
    a2b8:	10803fcc 	andi	r2,r2,255
    a2bc:	10803c0c 	andi	r2,r2,240
    a2c0:	10c02420 	cmpeqi	r3,r2,144
    a2c4:	18000a1e 	bne	r3,zero,a2f0 <_Z9MIDI_pollv+0x94>
    a2c8:	10c02448 	cmpgei	r3,r2,145
    a2cc:	1800031e 	bne	r3,zero,a2dc <_Z9MIDI_pollv+0x80>
    a2d0:	10802020 	cmpeqi	r2,r2,128
    a2d4:	1000061e 	bne	r2,zero,a2f0 <_Z9MIDI_pollv+0x94>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
    a2d8:	00024806 	br	abfc <_Z9MIDI_pollv+0x9a0>

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
    a2dc:	10c02c20 	cmpeqi	r3,r2,176
    a2e0:	18000b1e 	bne	r3,zero,a310 <_Z9MIDI_pollv+0xb4>
    a2e4:	10803820 	cmpeqi	r2,r2,224
    a2e8:	1002391e 	bne	r2,zero,abd0 <_Z9MIDI_pollv+0x974>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			set_ctrl(channel, BEND, long_par);
			break;
		default:
			break;
    a2ec:	00024306 	br	abfc <_Z9MIDI_pollv+0x9a0>
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
		case NOTE_OFF:
		case NOTE_ON:
			set_note(channel, ctrl, par);
    a2f0:	e0bfee03 	ldbu	r2,-72(fp)
    a2f4:	e0ffee43 	ldbu	r3,-71(fp)
    a2f8:	e13fee83 	ldbu	r4,-70(fp)
    a2fc:	200d883a 	mov	r6,r4
    a300:	180b883a 	mov	r5,r3
    a304:	1009883a 	mov	r4,r2
    a308:	00055b40 	call	55b4 <_Z8set_notehhh>
			break;
    a30c:	00023b06 	br	abfc <_Z9MIDI_pollv+0x9a0>
		case CONTROL_CHANGE:
			long_par = par;
    a310:	e0bfee83 	ldbu	r2,-70(fp)
    a314:	e0bfed15 	stw	r2,-76(fp)
			switch(ctrl) {
    a318:	e0bfee43 	ldbu	r2,-71(fp)
    a31c:	10c01ba8 	cmpgeui	r3,r2,110
    a320:	1802291e 	bne	r3,zero,abc8 <_Z9MIDI_pollv+0x96c>
    a324:	100690ba 	slli	r3,r2,2
    a328:	00800074 	movhi	r2,1
    a32c:	10a8cf04 	addi	r2,r2,-23748
    a330:	1885883a 	add	r2,r3,r2
    a334:	10800017 	ldw	r2,0(r2)
    a338:	1000683a 	jmp	r2
    a33c:	0000abc8 	cmpgei	zero,zero,687
    a340:	0000a4f4 	movhi	zero,659
    a344:	0000abc8 	cmpgei	zero,zero,687
    a348:	0000a6f4 	movhi	zero,667
    a34c:	0000abc8 	cmpgei	zero,zero,687
    a350:	0000abc8 	cmpgei	zero,zero,687
    a354:	0000abc8 	cmpgei	zero,zero,687
    a358:	0000a50c 	andi	zero,zero,660
    a35c:	0000abc8 	cmpgei	zero,zero,687
    a360:	0000a57c 	xorhi	zero,zero,661
    a364:	0000abc8 	cmpgei	zero,zero,687
    a368:	0000abc8 	cmpgei	zero,zero,687
    a36c:	0000abc8 	cmpgei	zero,zero,687
    a370:	0000abc8 	cmpgei	zero,zero,687
    a374:	0000a594 	movui	zero,662
    a378:	0000abc8 	cmpgei	zero,zero,687
    a37c:	0000abc8 	cmpgei	zero,zero,687
    a380:	0000abc8 	cmpgei	zero,zero,687
    a384:	0000abc8 	cmpgei	zero,zero,687
    a388:	0000abc8 	cmpgei	zero,zero,687
    a38c:	0000abc8 	cmpgei	zero,zero,687
    a390:	0000abc8 	cmpgei	zero,zero,687
    a394:	0000abc8 	cmpgei	zero,zero,687
    a398:	0000abc8 	cmpgei	zero,zero,687
    a39c:	0000abc8 	cmpgei	zero,zero,687
    a3a0:	0000abc8 	cmpgei	zero,zero,687
    a3a4:	0000abc8 	cmpgei	zero,zero,687
    a3a8:	0000abc8 	cmpgei	zero,zero,687
    a3ac:	0000abc8 	cmpgei	zero,zero,687
    a3b0:	0000abc8 	cmpgei	zero,zero,687
    a3b4:	0000abc8 	cmpgei	zero,zero,687
    a3b8:	0000abc8 	cmpgei	zero,zero,687
    a3bc:	0000abc8 	cmpgei	zero,zero,687
    a3c0:	0000abc8 	cmpgei	zero,zero,687
    a3c4:	0000abc8 	cmpgei	zero,zero,687
    a3c8:	0000abc8 	cmpgei	zero,zero,687
    a3cc:	0000abc8 	cmpgei	zero,zero,687
    a3d0:	0000abc8 	cmpgei	zero,zero,687
    a3d4:	0000abc8 	cmpgei	zero,zero,687
    a3d8:	0000abc8 	cmpgei	zero,zero,687
    a3dc:	0000abc8 	cmpgei	zero,zero,687
    a3e0:	0000abc8 	cmpgei	zero,zero,687
    a3e4:	0000abc8 	cmpgei	zero,zero,687
    a3e8:	0000abc8 	cmpgei	zero,zero,687
    a3ec:	0000abc8 	cmpgei	zero,zero,687
    a3f0:	0000abc8 	cmpgei	zero,zero,687
    a3f4:	0000abc8 	cmpgei	zero,zero,687
    a3f8:	0000abc8 	cmpgei	zero,zero,687
    a3fc:	0000abc8 	cmpgei	zero,zero,687
    a400:	0000abc8 	cmpgei	zero,zero,687
    a404:	0000abc8 	cmpgei	zero,zero,687
    a408:	0000abc8 	cmpgei	zero,zero,687
    a40c:	0000abc8 	cmpgei	zero,zero,687
    a410:	0000abc8 	cmpgei	zero,zero,687
    a414:	0000abc8 	cmpgei	zero,zero,687
    a418:	0000abc8 	cmpgei	zero,zero,687
    a41c:	0000abc8 	cmpgei	zero,zero,687
    a420:	0000abc8 	cmpgei	zero,zero,687
    a424:	0000abc8 	cmpgei	zero,zero,687
    a428:	0000abc8 	cmpgei	zero,zero,687
    a42c:	0000abc8 	cmpgei	zero,zero,687
    a430:	0000abc8 	cmpgei	zero,zero,687
    a434:	0000abc8 	cmpgei	zero,zero,687
    a438:	0000abc8 	cmpgei	zero,zero,687
    a43c:	0000a524 	muli	zero,zero,660
    a440:	0000abc8 	cmpgei	zero,zero,687
    a444:	0000abc8 	cmpgei	zero,zero,687
    a448:	0000abc8 	cmpgei	zero,zero,687
    a44c:	0000abc8 	cmpgei	zero,zero,687
    a450:	0000abc8 	cmpgei	zero,zero,687
    a454:	0000abc8 	cmpgei	zero,zero,687
    a458:	0000abc8 	cmpgei	zero,zero,687
    a45c:	0000a78c 	andi	zero,zero,670
    a460:	0000a5c4 	movi	zero,663
    a464:	0000abc8 	cmpgei	zero,zero,687
    a468:	0000a65c 	xori	zero,zero,665
    a46c:	0000abc8 	cmpgei	zero,zero,687
    a470:	0000abc8 	cmpgei	zero,zero,687
    a474:	0000abc8 	cmpgei	zero,zero,687
    a478:	0000abc8 	cmpgei	zero,zero,687
    a47c:	0000abc8 	cmpgei	zero,zero,687
    a480:	0000abc8 	cmpgei	zero,zero,687
    a484:	0000a554 	movui	zero,661
    a488:	0000abc8 	cmpgei	zero,zero,687
    a48c:	0000abc8 	cmpgei	zero,zero,687
    a490:	0000a564 	muli	zero,zero,661
    a494:	0000a5ac 	andhi	zero,zero,662
    a498:	0000abc8 	cmpgei	zero,zero,687
    a49c:	0000abc8 	cmpgei	zero,zero,687
    a4a0:	0000abc8 	cmpgei	zero,zero,687
    a4a4:	0000abc8 	cmpgei	zero,zero,687
    a4a8:	0000abc8 	cmpgei	zero,zero,687
    a4ac:	0000abc8 	cmpgei	zero,zero,687
    a4b0:	0000abc8 	cmpgei	zero,zero,687
    a4b4:	0000abc8 	cmpgei	zero,zero,687
    a4b8:	0000abc8 	cmpgei	zero,zero,687
    a4bc:	0000abc8 	cmpgei	zero,zero,687
    a4c0:	0000abc8 	cmpgei	zero,zero,687
    a4c4:	0000abc8 	cmpgei	zero,zero,687
    a4c8:	0000abc8 	cmpgei	zero,zero,687
    a4cc:	0000abc8 	cmpgei	zero,zero,687
    a4d0:	0000abc8 	cmpgei	zero,zero,687
    a4d4:	0000abc8 	cmpgei	zero,zero,687
    a4d8:	0000abc8 	cmpgei	zero,zero,687
    a4dc:	0000a824 	muli	zero,zero,672
    a4e0:	0000a8bc 	xorhi	zero,zero,674
    a4e4:	0000a954 	movui	zero,677
    a4e8:	0000a9ec 	andhi	zero,zero,679
    a4ec:	0000aa84 	movi	zero,682
    a4f0:	0000ab28 	cmpgeui	zero,zero,684
				case MOD_WHEEL:
					set_ctrl(channel, MOD, long_par);
    a4f4:	e0bfee03 	ldbu	r2,-72(fp)
    a4f8:	e1bfed17 	ldw	r6,-76(fp)
    a4fc:	01400204 	movi	r5,8
    a500:	1009883a 	mov	r4,r2
    a504:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a508:	0001b006 	br	abcc <_Z9MIDI_pollv+0x970>
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
    a50c:	d0b24417 	ldw	r2,-14064(gp)
    a510:	e0ffee83 	ldbu	r3,-70(fp)
    a514:	180b883a 	mov	r5,r3
    a518:	1009883a 	mov	r4,r2
    a51c:	00071840 	call	7184 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
					break;
    a520:	0001aa06 	br	abcc <_Z9MIDI_pollv+0x970>
				case SUSTAIN_PEDAL:
					if(ped_flip) long_par = ~long_par;
    a524:	d0b24703 	ldbu	r2,-14052(gp)
    a528:	10803fcc 	andi	r2,r2,255
    a52c:	10000326 	beq	r2,zero,a53c <_Z9MIDI_pollv+0x2e0>
    a530:	e0bfed17 	ldw	r2,-76(fp)
    a534:	0084303a 	nor	r2,zero,r2
    a538:	e0bfed15 	stw	r2,-76(fp)
					set_ctrl(channel, SUS, long_par);
    a53c:	e0bfee03 	ldbu	r2,-72(fp)
    a540:	e1bfed17 	ldw	r6,-76(fp)
    a544:	01400184 	movi	r5,6
    a548:	1009883a 	mov	r4,r2
    a54c:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a550:	00019e06 	br	abcc <_Z9MIDI_pollv+0x970>
				case PEDAL_FLIP:
					ped_flip = par;
    a554:	e0bfee83 	ldbu	r2,-70(fp)
    a558:	1004c03a 	cmpne	r2,r2,zero
    a55c:	d0b24705 	stb	r2,-14052(gp)
					break;
    a560:	00019a06 	br	abcc <_Z9MIDI_pollv+0x970>
				case MOD_WHEEL_ON:
					set_ctrl(channel, MOD_ON, long_par);
    a564:	e0bfee03 	ldbu	r2,-72(fp)
    a568:	e1bfed17 	ldw	r6,-76(fp)
    a56c:	014001c4 	movi	r5,7
    a570:	1009883a 	mov	r4,r2
    a574:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a578:	00019406 	br	abcc <_Z9MIDI_pollv+0x970>
				case SAMPLE_1_SEL:
					set_ctrl(channel, SAMPLE_1, long_par);
    a57c:	e0bfee03 	ldbu	r2,-72(fp)
    a580:	e1bfed17 	ldw	r6,-76(fp)
    a584:	01400244 	movi	r5,9
    a588:	1009883a 	mov	r4,r2
    a58c:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a590:	00018e06 	br	abcc <_Z9MIDI_pollv+0x970>
				case SAMPLE_2_SEL:
					set_ctrl(channel, SAMPLE_2, long_par);
    a594:	e0bfee03 	ldbu	r2,-72(fp)
    a598:	e1bfed17 	ldw	r6,-76(fp)
    a59c:	01400284 	movi	r5,10
    a5a0:	1009883a 	mov	r4,r2
    a5a4:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5a8:	00018806 	br	abcc <_Z9MIDI_pollv+0x970>
				case BEND_ON_:
					set_ctrl(channel, BEND_ON, long_par);
    a5ac:	e0bfee03 	ldbu	r2,-72(fp)
    a5b0:	e1bfed17 	ldw	r6,-76(fp)
    a5b4:	014002c4 	movi	r5,11
    a5b8:	1009883a 	mov	r4,r2
    a5bc:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a5c0:	00018206 	br	abcc <_Z9MIDI_pollv+0x970>
				case ATT_TIME_H:
					att_h= (par * 5000) / 0x7F;
    a5c4:	e0bfee83 	ldbu	r2,-70(fp)
    a5c8:	0144e204 	movi	r5,5000
    a5cc:	1009883a 	mov	r4,r2
    a5d0:	000d8d40 	call	d8d4 <__mulsi3>
    a5d4:	01401fc4 	movi	r5,127
    a5d8:	1009883a 	mov	r4,r2
    a5dc:	000d7200 	call	d720 <__divsi3>
    a5e0:	d0b2450d 	sth	r2,-14060(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a5e4:	d0b2450b 	ldhu	r2,-14060(gp)
    a5e8:	123fffcc 	andi	r8,r2,65535
    a5ec:	d0a5a40b 	ldhu	r2,-26992(gp)
    a5f0:	127fffcc 	andi	r9,r2,65535
    a5f4:	d0b2458b 	ldhu	r2,-14058(gp)
    a5f8:	12bfffcc 	andi	r10,r2,65535
    a5fc:	d0a5a48b 	ldhu	r2,-26990(gp)
    a600:	12ffffcc 	andi	r11,r2,65535
    a604:	d0b2460b 	ldhu	r2,-14056(gp)
    a608:	10bfffcc 	andi	r2,r2,65535
    a60c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a610:	18ffffcc 	andi	r3,r3,65535
    a614:	d132468b 	ldhu	r4,-14054(gp)
    a618:	213fffcc 	andi	r4,r4,65535
    a61c:	d165a58b 	ldhu	r5,-26986(gp)
    a620:	297fffcc 	andi	r5,r5,65535
    a624:	d1a5a617 	ldw	r6,-26984(gp)
    a628:	d1e5a717 	ldw	r7,-26980(gp)
    a62c:	d9c00515 	stw	r7,20(sp)
    a630:	d9800415 	stw	r6,16(sp)
    a634:	d9400315 	stw	r5,12(sp)
    a638:	d9000215 	stw	r4,8(sp)
    a63c:	d8c00115 	stw	r3,4(sp)
    a640:	d8800015 	stw	r2,0(sp)
    a644:	580f883a 	mov	r7,r11
    a648:	500d883a 	mov	r6,r10
    a64c:	480b883a 	mov	r5,r9
    a650:	4009883a 	mov	r4,r8
    a654:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a658:	00015c06 	br	abcc <_Z9MIDI_pollv+0x970>
				case DEC_TIME_H:
					dec_h = (par * 5000) / 0x7F;
    a65c:	e0bfee83 	ldbu	r2,-70(fp)
    a660:	0144e204 	movi	r5,5000
    a664:	1009883a 	mov	r4,r2
    a668:	000d8d40 	call	d8d4 <__mulsi3>
    a66c:	01401fc4 	movi	r5,127
    a670:	1009883a 	mov	r4,r2
    a674:	000d7200 	call	d720 <__divsi3>
    a678:	d0b2458d 	sth	r2,-14058(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a67c:	d0b2450b 	ldhu	r2,-14060(gp)
    a680:	123fffcc 	andi	r8,r2,65535
    a684:	d0a5a40b 	ldhu	r2,-26992(gp)
    a688:	127fffcc 	andi	r9,r2,65535
    a68c:	d0b2458b 	ldhu	r2,-14058(gp)
    a690:	12bfffcc 	andi	r10,r2,65535
    a694:	d0a5a48b 	ldhu	r2,-26990(gp)
    a698:	12ffffcc 	andi	r11,r2,65535
    a69c:	d0b2460b 	ldhu	r2,-14056(gp)
    a6a0:	10bfffcc 	andi	r2,r2,65535
    a6a4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a6a8:	18ffffcc 	andi	r3,r3,65535
    a6ac:	d132468b 	ldhu	r4,-14054(gp)
    a6b0:	213fffcc 	andi	r4,r4,65535
    a6b4:	d165a58b 	ldhu	r5,-26986(gp)
    a6b8:	297fffcc 	andi	r5,r5,65535
    a6bc:	d1a5a617 	ldw	r6,-26984(gp)
    a6c0:	d1e5a717 	ldw	r7,-26980(gp)
    a6c4:	d9c00515 	stw	r7,20(sp)
    a6c8:	d9800415 	stw	r6,16(sp)
    a6cc:	d9400315 	stw	r5,12(sp)
    a6d0:	d9000215 	stw	r4,8(sp)
    a6d4:	d8c00115 	stw	r3,4(sp)
    a6d8:	d8800015 	stw	r2,0(sp)
    a6dc:	580f883a 	mov	r7,r11
    a6e0:	500d883a 	mov	r6,r10
    a6e4:	480b883a 	mov	r5,r9
    a6e8:	4009883a 	mov	r4,r8
    a6ec:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a6f0:	00013606 	br	abcc <_Z9MIDI_pollv+0x970>
				case SUS_TIME_H:
					sus_h = (par * 20000) / 0x7F;
    a6f4:	e0bfee83 	ldbu	r2,-70(fp)
    a6f8:	01538804 	movi	r5,20000
    a6fc:	1009883a 	mov	r4,r2
    a700:	000d8d40 	call	d8d4 <__mulsi3>
    a704:	01401fc4 	movi	r5,127
    a708:	1009883a 	mov	r4,r2
    a70c:	000d7200 	call	d720 <__divsi3>
    a710:	d0b2460d 	sth	r2,-14056(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a714:	d0b2450b 	ldhu	r2,-14060(gp)
    a718:	123fffcc 	andi	r8,r2,65535
    a71c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a720:	127fffcc 	andi	r9,r2,65535
    a724:	d0b2458b 	ldhu	r2,-14058(gp)
    a728:	12bfffcc 	andi	r10,r2,65535
    a72c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a730:	12ffffcc 	andi	r11,r2,65535
    a734:	d0b2460b 	ldhu	r2,-14056(gp)
    a738:	10bfffcc 	andi	r2,r2,65535
    a73c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a740:	18ffffcc 	andi	r3,r3,65535
    a744:	d132468b 	ldhu	r4,-14054(gp)
    a748:	213fffcc 	andi	r4,r4,65535
    a74c:	d165a58b 	ldhu	r5,-26986(gp)
    a750:	297fffcc 	andi	r5,r5,65535
    a754:	d1a5a617 	ldw	r6,-26984(gp)
    a758:	d1e5a717 	ldw	r7,-26980(gp)
    a75c:	d9c00515 	stw	r7,20(sp)
    a760:	d9800415 	stw	r6,16(sp)
    a764:	d9400315 	stw	r5,12(sp)
    a768:	d9000215 	stw	r4,8(sp)
    a76c:	d8c00115 	stw	r3,4(sp)
    a770:	d8800015 	stw	r2,0(sp)
    a774:	580f883a 	mov	r7,r11
    a778:	500d883a 	mov	r6,r10
    a77c:	480b883a 	mov	r5,r9
    a780:	4009883a 	mov	r4,r8
    a784:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a788:	00011006 	br	abcc <_Z9MIDI_pollv+0x970>
				case REL_TIME_H:
					rel_h = (par * 10000) / 0x7F;
    a78c:	e0bfee83 	ldbu	r2,-70(fp)
    a790:	0149c404 	movi	r5,10000
    a794:	1009883a 	mov	r4,r2
    a798:	000d8d40 	call	d8d4 <__mulsi3>
    a79c:	01401fc4 	movi	r5,127
    a7a0:	1009883a 	mov	r4,r2
    a7a4:	000d7200 	call	d720 <__divsi3>
    a7a8:	d0b2468d 	sth	r2,-14054(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a7ac:	d0b2450b 	ldhu	r2,-14060(gp)
    a7b0:	123fffcc 	andi	r8,r2,65535
    a7b4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a7b8:	127fffcc 	andi	r9,r2,65535
    a7bc:	d0b2458b 	ldhu	r2,-14058(gp)
    a7c0:	12bfffcc 	andi	r10,r2,65535
    a7c4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a7c8:	12ffffcc 	andi	r11,r2,65535
    a7cc:	d0b2460b 	ldhu	r2,-14056(gp)
    a7d0:	10bfffcc 	andi	r2,r2,65535
    a7d4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a7d8:	18ffffcc 	andi	r3,r3,65535
    a7dc:	d132468b 	ldhu	r4,-14054(gp)
    a7e0:	213fffcc 	andi	r4,r4,65535
    a7e4:	d165a58b 	ldhu	r5,-26986(gp)
    a7e8:	297fffcc 	andi	r5,r5,65535
    a7ec:	d1a5a617 	ldw	r6,-26984(gp)
    a7f0:	d1e5a717 	ldw	r7,-26980(gp)
    a7f4:	d9c00515 	stw	r7,20(sp)
    a7f8:	d9800415 	stw	r6,16(sp)
    a7fc:	d9400315 	stw	r5,12(sp)
    a800:	d9000215 	stw	r4,8(sp)
    a804:	d8c00115 	stw	r3,4(sp)
    a808:	d8800015 	stw	r2,0(sp)
    a80c:	580f883a 	mov	r7,r11
    a810:	500d883a 	mov	r6,r10
    a814:	480b883a 	mov	r5,r9
    a818:	4009883a 	mov	r4,r8
    a81c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a820:	0000ea06 	br	abcc <_Z9MIDI_pollv+0x970>
				case ATT_TIME_L:
					att_l = (par * 200) / 0x7F;
    a824:	e0bfee83 	ldbu	r2,-70(fp)
    a828:	01403204 	movi	r5,200
    a82c:	1009883a 	mov	r4,r2
    a830:	000d8d40 	call	d8d4 <__mulsi3>
    a834:	01401fc4 	movi	r5,127
    a838:	1009883a 	mov	r4,r2
    a83c:	000d7200 	call	d720 <__divsi3>
    a840:	d0a5a40d 	sth	r2,-26992(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a844:	d0b2450b 	ldhu	r2,-14060(gp)
    a848:	123fffcc 	andi	r8,r2,65535
    a84c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a850:	127fffcc 	andi	r9,r2,65535
    a854:	d0b2458b 	ldhu	r2,-14058(gp)
    a858:	12bfffcc 	andi	r10,r2,65535
    a85c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a860:	12ffffcc 	andi	r11,r2,65535
    a864:	d0b2460b 	ldhu	r2,-14056(gp)
    a868:	10bfffcc 	andi	r2,r2,65535
    a86c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a870:	18ffffcc 	andi	r3,r3,65535
    a874:	d132468b 	ldhu	r4,-14054(gp)
    a878:	213fffcc 	andi	r4,r4,65535
    a87c:	d165a58b 	ldhu	r5,-26986(gp)
    a880:	297fffcc 	andi	r5,r5,65535
    a884:	d1a5a617 	ldw	r6,-26984(gp)
    a888:	d1e5a717 	ldw	r7,-26980(gp)
    a88c:	d9c00515 	stw	r7,20(sp)
    a890:	d9800415 	stw	r6,16(sp)
    a894:	d9400315 	stw	r5,12(sp)
    a898:	d9000215 	stw	r4,8(sp)
    a89c:	d8c00115 	stw	r3,4(sp)
    a8a0:	d8800015 	stw	r2,0(sp)
    a8a4:	580f883a 	mov	r7,r11
    a8a8:	500d883a 	mov	r6,r10
    a8ac:	480b883a 	mov	r5,r9
    a8b0:	4009883a 	mov	r4,r8
    a8b4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a8b8:	0000c406 	br	abcc <_Z9MIDI_pollv+0x970>
				case DEC_TIME_L:
					dec_l = (par * 200) / 0x7F;
    a8bc:	e0bfee83 	ldbu	r2,-70(fp)
    a8c0:	01403204 	movi	r5,200
    a8c4:	1009883a 	mov	r4,r2
    a8c8:	000d8d40 	call	d8d4 <__mulsi3>
    a8cc:	01401fc4 	movi	r5,127
    a8d0:	1009883a 	mov	r4,r2
    a8d4:	000d7200 	call	d720 <__divsi3>
    a8d8:	d0a5a48d 	sth	r2,-26990(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a8dc:	d0b2450b 	ldhu	r2,-14060(gp)
    a8e0:	123fffcc 	andi	r8,r2,65535
    a8e4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a8e8:	127fffcc 	andi	r9,r2,65535
    a8ec:	d0b2458b 	ldhu	r2,-14058(gp)
    a8f0:	12bfffcc 	andi	r10,r2,65535
    a8f4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a8f8:	12ffffcc 	andi	r11,r2,65535
    a8fc:	d0b2460b 	ldhu	r2,-14056(gp)
    a900:	10bfffcc 	andi	r2,r2,65535
    a904:	d0e5a50b 	ldhu	r3,-26988(gp)
    a908:	18ffffcc 	andi	r3,r3,65535
    a90c:	d132468b 	ldhu	r4,-14054(gp)
    a910:	213fffcc 	andi	r4,r4,65535
    a914:	d165a58b 	ldhu	r5,-26986(gp)
    a918:	297fffcc 	andi	r5,r5,65535
    a91c:	d1a5a617 	ldw	r6,-26984(gp)
    a920:	d1e5a717 	ldw	r7,-26980(gp)
    a924:	d9c00515 	stw	r7,20(sp)
    a928:	d9800415 	stw	r6,16(sp)
    a92c:	d9400315 	stw	r5,12(sp)
    a930:	d9000215 	stw	r4,8(sp)
    a934:	d8c00115 	stw	r3,4(sp)
    a938:	d8800015 	stw	r2,0(sp)
    a93c:	580f883a 	mov	r7,r11
    a940:	500d883a 	mov	r6,r10
    a944:	480b883a 	mov	r5,r9
    a948:	4009883a 	mov	r4,r8
    a94c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a950:	00009e06 	br	abcc <_Z9MIDI_pollv+0x970>
				case SUS_TIME_L:
					sus_l = (par * 800) / 0x7F;
    a954:	e0bfee83 	ldbu	r2,-70(fp)
    a958:	0140c804 	movi	r5,800
    a95c:	1009883a 	mov	r4,r2
    a960:	000d8d40 	call	d8d4 <__mulsi3>
    a964:	01401fc4 	movi	r5,127
    a968:	1009883a 	mov	r4,r2
    a96c:	000d7200 	call	d720 <__divsi3>
    a970:	d0a5a50d 	sth	r2,-26988(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a974:	d0b2450b 	ldhu	r2,-14060(gp)
    a978:	123fffcc 	andi	r8,r2,65535
    a97c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a980:	127fffcc 	andi	r9,r2,65535
    a984:	d0b2458b 	ldhu	r2,-14058(gp)
    a988:	12bfffcc 	andi	r10,r2,65535
    a98c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a990:	12ffffcc 	andi	r11,r2,65535
    a994:	d0b2460b 	ldhu	r2,-14056(gp)
    a998:	10bfffcc 	andi	r2,r2,65535
    a99c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a9a0:	18ffffcc 	andi	r3,r3,65535
    a9a4:	d132468b 	ldhu	r4,-14054(gp)
    a9a8:	213fffcc 	andi	r4,r4,65535
    a9ac:	d165a58b 	ldhu	r5,-26986(gp)
    a9b0:	297fffcc 	andi	r5,r5,65535
    a9b4:	d1a5a617 	ldw	r6,-26984(gp)
    a9b8:	d1e5a717 	ldw	r7,-26980(gp)
    a9bc:	d9c00515 	stw	r7,20(sp)
    a9c0:	d9800415 	stw	r6,16(sp)
    a9c4:	d9400315 	stw	r5,12(sp)
    a9c8:	d9000215 	stw	r4,8(sp)
    a9cc:	d8c00115 	stw	r3,4(sp)
    a9d0:	d8800015 	stw	r2,0(sp)
    a9d4:	580f883a 	mov	r7,r11
    a9d8:	500d883a 	mov	r6,r10
    a9dc:	480b883a 	mov	r5,r9
    a9e0:	4009883a 	mov	r4,r8
    a9e4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a9e8:	00007806 	br	abcc <_Z9MIDI_pollv+0x970>
				case REL_TIME_L:
					rel_l = (par * 400) / 0x7F;
    a9ec:	e0bfee83 	ldbu	r2,-70(fp)
    a9f0:	01406404 	movi	r5,400
    a9f4:	1009883a 	mov	r4,r2
    a9f8:	000d8d40 	call	d8d4 <__mulsi3>
    a9fc:	01401fc4 	movi	r5,127
    aa00:	1009883a 	mov	r4,r2
    aa04:	000d7200 	call	d720 <__divsi3>
    aa08:	d0a5a58d 	sth	r2,-26986(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aa0c:	d0b2450b 	ldhu	r2,-14060(gp)
    aa10:	123fffcc 	andi	r8,r2,65535
    aa14:	d0a5a40b 	ldhu	r2,-26992(gp)
    aa18:	127fffcc 	andi	r9,r2,65535
    aa1c:	d0b2458b 	ldhu	r2,-14058(gp)
    aa20:	12bfffcc 	andi	r10,r2,65535
    aa24:	d0a5a48b 	ldhu	r2,-26990(gp)
    aa28:	12ffffcc 	andi	r11,r2,65535
    aa2c:	d0b2460b 	ldhu	r2,-14056(gp)
    aa30:	10bfffcc 	andi	r2,r2,65535
    aa34:	d0e5a50b 	ldhu	r3,-26988(gp)
    aa38:	18ffffcc 	andi	r3,r3,65535
    aa3c:	d132468b 	ldhu	r4,-14054(gp)
    aa40:	213fffcc 	andi	r4,r4,65535
    aa44:	d165a58b 	ldhu	r5,-26986(gp)
    aa48:	297fffcc 	andi	r5,r5,65535
    aa4c:	d1a5a617 	ldw	r6,-26984(gp)
    aa50:	d1e5a717 	ldw	r7,-26980(gp)
    aa54:	d9c00515 	stw	r7,20(sp)
    aa58:	d9800415 	stw	r6,16(sp)
    aa5c:	d9400315 	stw	r5,12(sp)
    aa60:	d9000215 	stw	r4,8(sp)
    aa64:	d8c00115 	stw	r3,4(sp)
    aa68:	d8800015 	stw	r2,0(sp)
    aa6c:	580f883a 	mov	r7,r11
    aa70:	500d883a 	mov	r6,r10
    aa74:	480b883a 	mov	r5,r9
    aa78:	4009883a 	mov	r4,r8
    aa7c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aa80:	00005206 	br	abcc <_Z9MIDI_pollv+0x970>
				case PEAK_ATT:
					peak_att = (float) (par * 2) / 0x7F;
    aa84:	e0bfee83 	ldbu	r2,-70(fp)
    aa88:	1085883a 	add	r2,r2,r2
    aa8c:	1009883a 	mov	r4,r2
    aa90:	000ec440 	call	ec44 <__floatsisf>
    aa94:	1007883a 	mov	r3,r2
    aa98:	0150bfb4 	movhi	r5,17150
    aa9c:	1809883a 	mov	r4,r3
    aaa0:	000ddc40 	call	ddc4 <__divsf3>
    aaa4:	1007883a 	mov	r3,r2
    aaa8:	1805883a 	mov	r2,r3
    aaac:	d0a5a615 	stw	r2,-26984(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aab0:	d0b2450b 	ldhu	r2,-14060(gp)
    aab4:	123fffcc 	andi	r8,r2,65535
    aab8:	d0a5a40b 	ldhu	r2,-26992(gp)
    aabc:	127fffcc 	andi	r9,r2,65535
    aac0:	d0b2458b 	ldhu	r2,-14058(gp)
    aac4:	12bfffcc 	andi	r10,r2,65535
    aac8:	d0a5a48b 	ldhu	r2,-26990(gp)
    aacc:	12ffffcc 	andi	r11,r2,65535
    aad0:	d0b2460b 	ldhu	r2,-14056(gp)
    aad4:	10bfffcc 	andi	r2,r2,65535
    aad8:	d0e5a50b 	ldhu	r3,-26988(gp)
    aadc:	18ffffcc 	andi	r3,r3,65535
    aae0:	d132468b 	ldhu	r4,-14054(gp)
    aae4:	213fffcc 	andi	r4,r4,65535
    aae8:	d165a58b 	ldhu	r5,-26986(gp)
    aaec:	297fffcc 	andi	r5,r5,65535
    aaf0:	d1a5a617 	ldw	r6,-26984(gp)
    aaf4:	d1e5a717 	ldw	r7,-26980(gp)
    aaf8:	d9c00515 	stw	r7,20(sp)
    aafc:	d9800415 	stw	r6,16(sp)
    ab00:	d9400315 	stw	r5,12(sp)
    ab04:	d9000215 	stw	r4,8(sp)
    ab08:	d8c00115 	stw	r3,4(sp)
    ab0c:	d8800015 	stw	r2,0(sp)
    ab10:	580f883a 	mov	r7,r11
    ab14:	500d883a 	mov	r6,r10
    ab18:	480b883a 	mov	r5,r9
    ab1c:	4009883a 	mov	r4,r8
    ab20:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    ab24:	00002906 	br	abcc <_Z9MIDI_pollv+0x970>
				case PEAK_SUS:
					peak_sus = (float) par / 0x7F;
    ab28:	e0bfee83 	ldbu	r2,-70(fp)
    ab2c:	1009883a 	mov	r4,r2
    ab30:	000ed680 	call	ed68 <__floatunsisf>
    ab34:	1007883a 	mov	r3,r2
    ab38:	0150bfb4 	movhi	r5,17150
    ab3c:	1809883a 	mov	r4,r3
    ab40:	000ddc40 	call	ddc4 <__divsf3>
    ab44:	1007883a 	mov	r3,r2
    ab48:	1805883a 	mov	r2,r3
    ab4c:	d0a5a715 	stw	r2,-26980(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ab50:	d0b2450b 	ldhu	r2,-14060(gp)
    ab54:	123fffcc 	andi	r8,r2,65535
    ab58:	d0a5a40b 	ldhu	r2,-26992(gp)
    ab5c:	127fffcc 	andi	r9,r2,65535
    ab60:	d0b2458b 	ldhu	r2,-14058(gp)
    ab64:	12bfffcc 	andi	r10,r2,65535
    ab68:	d0a5a48b 	ldhu	r2,-26990(gp)
    ab6c:	12ffffcc 	andi	r11,r2,65535
    ab70:	d0b2460b 	ldhu	r2,-14056(gp)
    ab74:	10bfffcc 	andi	r2,r2,65535
    ab78:	d0e5a50b 	ldhu	r3,-26988(gp)
    ab7c:	18ffffcc 	andi	r3,r3,65535
    ab80:	d132468b 	ldhu	r4,-14054(gp)
    ab84:	213fffcc 	andi	r4,r4,65535
    ab88:	d165a58b 	ldhu	r5,-26986(gp)
    ab8c:	297fffcc 	andi	r5,r5,65535
    ab90:	d1a5a617 	ldw	r6,-26984(gp)
    ab94:	d1e5a717 	ldw	r7,-26980(gp)
    ab98:	d9c00515 	stw	r7,20(sp)
    ab9c:	d9800415 	stw	r6,16(sp)
    aba0:	d9400315 	stw	r5,12(sp)
    aba4:	d9000215 	stw	r4,8(sp)
    aba8:	d8c00115 	stw	r3,4(sp)
    abac:	d8800015 	stw	r2,0(sp)
    abb0:	580f883a 	mov	r7,r11
    abb4:	500d883a 	mov	r6,r10
    abb8:	480b883a 	mov	r5,r9
    abbc:	4009883a 	mov	r4,r8
    abc0:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    abc4:	00000106 	br	abcc <_Z9MIDI_pollv+0x970>
				default:
					break;
    abc8:	0001883a 	nop
			}
			break;
    abcc:	00000b06 	br	abfc <_Z9MIDI_pollv+0x9a0>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
    abd0:	e0bfee83 	ldbu	r2,-70(fp)
    abd4:	100691fa 	slli	r3,r2,7
    abd8:	e0bfee43 	ldbu	r2,-71(fp)
    abdc:	1885883a 	add	r2,r3,r2
    abe0:	e0bfed15 	stw	r2,-76(fp)
			set_ctrl(channel, BEND, long_par);
    abe4:	e0bfee03 	ldbu	r2,-72(fp)
    abe8:	e1bfed17 	ldw	r6,-76(fp)
    abec:	01400304 	movi	r5,12
    abf0:	1009883a 	mov	r4,r2
    abf4:	000565c0 	call	565c <_Z8set_ctrlhhm>
			break;
    abf8:	0001883a 	nop
		default:
			break;
	}
  }
}
    abfc:	0001883a 	nop
    ac00:	e037883a 	mov	sp,fp
    ac04:	dfc00117 	ldw	ra,4(sp)
    ac08:	df000017 	ldw	fp,0(sp)
    ac0c:	dec00204 	addi	sp,sp,8
    ac10:	f800283a 	ret

0000ac14 <main>:

int main() {
    ac14:	defff804 	addi	sp,sp,-32
    ac18:	dfc00715 	stw	ra,28(sp)
    ac1c:	df000615 	stw	fp,24(sp)
    ac20:	df000604 	addi	fp,sp,24

	printf("Initializing SGTL5000...\n");
    ac24:	010000f4 	movhi	r4,3
    ac28:	212cec04 	addi	r4,r4,-19536
    ac2c:	00100300 	call	10030 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    ac30:	010000f4 	movhi	r4,3
    ac34:	212cf304 	addi	r4,r4,-19508
    ac38:	0020f400 	call	20f40 <alt_avalon_i2c_open>
    ac3c:	d0b24415 	stw	r2,-14064(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    ac40:	d0b24417 	ldw	r2,-14064(gp)
    ac44:	1000031e 	bne	r2,zero,ac54 <main+0x40>
    ac48:	010000f4 	movhi	r4,3
    ac4c:	212cf604 	addi	r4,r4,-19496
    ac50:	00100300 	call	10030 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    ac54:	d0b24417 	ldw	r2,-14064(gp)
    ac58:	1009883a 	mov	r4,r2
    ac5c:	0006ed40 	call	6ed4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    ac60:	010000f4 	movhi	r4,3
    ac64:	212cfe04 	addi	r4,r4,-19464
    ac68:	00100300 	call	10030 <puts>
	SGTL5000audio_on(i2c_dev);
    ac6c:	d0b24417 	ldw	r2,-14064(gp)
    ac70:	1009883a 	mov	r4,r2
    ac74:	0006f6c0 	call	6f6c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    ac78:	d0b24417 	ldw	r2,-14064(gp)
    ac7c:	1009883a 	mov	r4,r2
    ac80:	0006fd80 	call	6fd8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    ac84:	010000f4 	movhi	r4,3
    ac88:	212d0304 	addi	r4,r4,-19444
    ac8c:	00100300 	call	10030 <puts>

	printf("Initializing ADSR...\n");
    ac90:	010000f4 	movhi	r4,3
    ac94:	212d0704 	addi	r4,r4,-19428
    ac98:	00100300 	call	10030 <puts>
	calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ac9c:	d0b2450b 	ldhu	r2,-14060(gp)
    aca0:	123fffcc 	andi	r8,r2,65535
    aca4:	d0a5a40b 	ldhu	r2,-26992(gp)
    aca8:	127fffcc 	andi	r9,r2,65535
    acac:	d0b2458b 	ldhu	r2,-14058(gp)
    acb0:	12bfffcc 	andi	r10,r2,65535
    acb4:	d0a5a48b 	ldhu	r2,-26990(gp)
    acb8:	12ffffcc 	andi	r11,r2,65535
    acbc:	d0b2460b 	ldhu	r2,-14056(gp)
    acc0:	10bfffcc 	andi	r2,r2,65535
    acc4:	d0e5a50b 	ldhu	r3,-26988(gp)
    acc8:	18ffffcc 	andi	r3,r3,65535
    accc:	d132468b 	ldhu	r4,-14054(gp)
    acd0:	213fffcc 	andi	r4,r4,65535
    acd4:	d165a58b 	ldhu	r5,-26986(gp)
    acd8:	297fffcc 	andi	r5,r5,65535
    acdc:	d1a5a617 	ldw	r6,-26984(gp)
    ace0:	d1e5a717 	ldw	r7,-26980(gp)
    ace4:	d9c00515 	stw	r7,20(sp)
    ace8:	d9800415 	stw	r6,16(sp)
    acec:	d9400315 	stw	r5,12(sp)
    acf0:	d9000215 	stw	r4,8(sp)
    acf4:	d8c00115 	stw	r3,4(sp)
    acf8:	d8800015 	stw	r2,0(sp)
    acfc:	580f883a 	mov	r7,r11
    ad00:	500d883a 	mov	r6,r10
    ad04:	480b883a 	mov	r5,r9
    ad08:	4009883a 	mov	r4,r8
    ad0c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
	printf("ADSR set\n");
    ad10:	010000f4 	movhi	r4,3
    ad14:	212d0d04 	addi	r4,r4,-19404
    ad18:	00100300 	call	10030 <puts>

	MIDI_setup();
    ad1c:	000a1e40 	call	a1e4 <_Z10MIDI_setupv>
	printf("MIDI set\n");
    ad20:	010000f4 	movhi	r4,3
    ad24:	212d1004 	addi	r4,r4,-19392
    ad28:	00100300 	call	10030 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad2c:	010000f4 	movhi	r4,3
    ad30:	21079f04 	addi	r4,r4,7804
    ad34:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    ad38:	10803fcc 	andi	r2,r2,255
    ad3c:	10802418 	cmpnei	r2,r2,144
    ad40:	10803fcc 	andi	r2,r2,255
    ad44:	10000426 	beq	r2,zero,ad58 <main+0x144>
		Usb.Task();
    ad48:	010000f4 	movhi	r4,3
    ad4c:	21079f04 	addi	r4,r4,7804
    ad50:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad54:	003ff506 	br	ad2c <__alt_data_end+0xfc00ad2c>
		Usb.Task();
	}
	printf("USB running\n");
    ad58:	010000f4 	movhi	r4,3
    ad5c:	212d1304 	addi	r4,r4,-19380
    ad60:	00100300 	call	10030 <puts>

	while(1) {
		if ( Midi ) {
    ad64:	010000f4 	movhi	r4,3
    ad68:	2107ce04 	addi	r4,r4,7992
    ad6c:	000ae180 	call	ae18 <_ZN9USBH_MIDIcvbEv>
    ad70:	10803fcc 	andi	r2,r2,255
    ad74:	103ffb26 	beq	r2,zero,ad64 <__alt_data_end+0xfc00ad64>
			MIDI_poll();
    ad78:	000a25c0 	call	a25c <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    ad7c:	003ff906 	br	ad64 <__alt_data_end+0xfc00ad64>

0000ad80 <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    ad80:	defffc04 	addi	sp,sp,-16
    ad84:	dfc00315 	stw	ra,12(sp)
    ad88:	df000215 	stw	fp,8(sp)
    ad8c:	df000204 	addi	fp,sp,8
    ad90:	e13ffe15 	stw	r4,-8(fp)
    ad94:	e17fff15 	stw	r5,-4(fp)
    ad98:	e0bffe17 	ldw	r2,-8(fp)
    ad9c:	10800058 	cmpnei	r2,r2,1
    ada0:	10000b1e 	bne	r2,zero,add0 <_Z41__static_initialization_and_destruction_0ii+0x50>
    ada4:	e0ffff17 	ldw	r3,-4(fp)
    ada8:	00bfffd4 	movui	r2,65535
    adac:	1880081e 	bne	r3,r2,add0 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    adb0:	010000f4 	movhi	r4,3
    adb4:	21079f04 	addi	r4,r4,7804
    adb8:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    adbc:	014000f4 	movhi	r5,3
    adc0:	29479f04 	addi	r5,r5,7804
    adc4:	010000f4 	movhi	r4,3
    adc8:	2107ce04 	addi	r4,r4,7992
    adcc:	00072100 	call	7210 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    add0:	0001883a 	nop
    add4:	e037883a 	mov	sp,fp
    add8:	dfc00117 	ldw	ra,4(sp)
    addc:	df000017 	ldw	fp,0(sp)
    ade0:	dec00204 	addi	sp,sp,8
    ade4:	f800283a 	ret

0000ade8 <_GLOBAL__sub_I_Usb>:
    ade8:	defffe04 	addi	sp,sp,-8
    adec:	dfc00115 	stw	ra,4(sp)
    adf0:	df000015 	stw	fp,0(sp)
    adf4:	d839883a 	mov	fp,sp
    adf8:	017fffd4 	movui	r5,65535
    adfc:	01000044 	movi	r4,1
    ae00:	000ad800 	call	ad80 <_Z41__static_initialization_and_destruction_0ii>
    ae04:	e037883a 	mov	sp,fp
    ae08:	dfc00117 	ldw	ra,4(sp)
    ae0c:	df000017 	ldw	fp,0(sp)
    ae10:	dec00204 	addi	sp,sp,8
    ae14:	f800283a 	ret

0000ae18 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    ae18:	defffe04 	addi	sp,sp,-8
    ae1c:	df000115 	stw	fp,4(sp)
    ae20:	df000104 	addi	fp,sp,4
    ae24:	e13fff15 	stw	r4,-4(fp)
    ae28:	e0bfff17 	ldw	r2,-4(fp)
    ae2c:	10800343 	ldbu	r2,13(r2)
    ae30:	e037883a 	mov	sp,fp
    ae34:	df000017 	ldw	fp,0(sp)
    ae38:	dec00104 	addi	sp,sp,4
    ae3c:	f800283a 	ret

0000ae40 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    ae40:	defffe04 	addi	sp,sp,-8
    ae44:	df000115 	stw	fp,4(sp)
    ae48:	df000104 	addi	fp,sp,4
    ae4c:	e13fff15 	stw	r4,-4(fp)
    ae50:	e0bfff17 	ldw	r2,-4(fp)
    ae54:	1080040b 	ldhu	r2,16(r2)
    ae58:	e037883a 	mov	sp,fp
    ae5c:	df000017 	ldw	fp,0(sp)
    ae60:	dec00104 	addi	sp,sp,4
    ae64:	f800283a 	ret

0000ae68 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    ae68:	defffe04 	addi	sp,sp,-8
    ae6c:	df000115 	stw	fp,4(sp)
    ae70:	df000104 	addi	fp,sp,4
    ae74:	e13fff15 	stw	r4,-4(fp)
    ae78:	e0bfff17 	ldw	r2,-4(fp)
    ae7c:	1080038b 	ldhu	r2,14(r2)
    ae80:	e037883a 	mov	sp,fp
    ae84:	df000017 	ldw	fp,0(sp)
    ae88:	dec00104 	addi	sp,sp,4
    ae8c:	f800283a 	ret

0000ae90 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    ae90:	defffd04 	addi	sp,sp,-12
    ae94:	df000215 	stw	fp,8(sp)
    ae98:	df000204 	addi	fp,sp,8
    ae9c:	e13ffe15 	stw	r4,-8(fp)
    aea0:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    aea4:	e0bffe17 	ldw	r2,-8(fp)
    aea8:	e0ffff17 	ldw	r3,-4(fp)
    aeac:	10c01815 	stw	r3,96(r2)
        };
    aeb0:	0001883a 	nop
    aeb4:	e037883a 	mov	sp,fp
    aeb8:	df000017 	ldw	fp,0(sp)
    aebc:	dec00104 	addi	sp,sp,4
    aec0:	f800283a 	ret

0000aec4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    aec4:	008000f4 	movhi	r2,3
    aec8:	10ad2504 	addi	r2,r2,-19308
    aecc:	20800015 	stw	r2,0(r4)
    aed0:	000bc9c1 	jmpi	bc9c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000aed4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    aed4:	defffe04 	addi	sp,sp,-8
    aed8:	008000f4 	movhi	r2,3
    aedc:	dc000015 	stw	r16,0(sp)
    aee0:	dfc00115 	stw	ra,4(sp)
    aee4:	10ad2504 	addi	r2,r2,-19308
    aee8:	20800015 	stw	r2,0(r4)
    aeec:	2021883a 	mov	r16,r4
    aef0:	000bc9c0 	call	bc9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    aef4:	8009883a 	mov	r4,r16
    aef8:	dfc00117 	ldw	ra,4(sp)
    aefc:	dc000017 	ldw	r16,0(sp)
    af00:	dec00204 	addi	sp,sp,8
    af04:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000af08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    af08:	defff504 	addi	sp,sp,-44
    af0c:	dc000115 	stw	r16,4(sp)
    af10:	38800117 	ldw	r2,4(r7)
    af14:	24000117 	ldw	r16,4(r4)
    af18:	df000915 	stw	fp,36(sp)
    af1c:	ddc00815 	stw	r23,32(sp)
    af20:	dd800715 	stw	r22,28(sp)
    af24:	dcc00415 	stw	r19,16(sp)
    af28:	dc800315 	stw	r18,12(sp)
    af2c:	dc400215 	stw	r17,8(sp)
    af30:	dfc00a15 	stw	ra,40(sp)
    af34:	dd400615 	stw	r21,24(sp)
    af38:	dd000515 	stw	r20,20(sp)
    af3c:	2823883a 	mov	r17,r5
    af40:	3039883a 	mov	fp,r6
    af44:	dcc00b17 	ldw	r19,44(sp)
    af48:	ddc00c17 	ldw	r23,48(sp)
    af4c:	dd800d17 	ldw	r22,52(sp)
    af50:	dc800e17 	ldw	r18,56(sp)
    af54:	80800b26 	beq	r16,r2,af84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    af58:	80c00007 	ldb	r3,0(r16)
    af5c:	2029883a 	mov	r20,r4
    af60:	01000a84 	movi	r4,42
    af64:	382b883a 	mov	r21,r7
    af68:	19001a26 	beq	r3,r4,afd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af6c:	100b883a 	mov	r5,r2
    af70:	8009883a 	mov	r4,r16
    af74:	d8c00015 	stw	r3,0(sp)
    af78:	00104600 	call	10460 <strcmp>
    af7c:	d8c00017 	ldw	r3,0(sp)
    af80:	1000141e 	bne	r2,zero,afd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    af84:	94c00015 	stw	r19,0(r18)
    af88:	97000115 	stw	fp,4(r18)
    af8c:	88002816 	blt	r17,zero,b030 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    af90:	9c63883a 	add	r17,r19,r17
    af94:	b4403226 	beq	r22,r17,b060 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    af98:	00800044 	movi	r2,1
    af9c:	90800315 	stw	r2,12(r18)
    afa0:	0005883a 	mov	r2,zero
    afa4:	dfc00a17 	ldw	ra,40(sp)
    afa8:	df000917 	ldw	fp,36(sp)
    afac:	ddc00817 	ldw	r23,32(sp)
    afb0:	dd800717 	ldw	r22,28(sp)
    afb4:	dd400617 	ldw	r21,24(sp)
    afb8:	dd000517 	ldw	r20,20(sp)
    afbc:	dcc00417 	ldw	r19,16(sp)
    afc0:	dc800317 	ldw	r18,12(sp)
    afc4:	dc400217 	ldw	r17,8(sp)
    afc8:	dc000117 	ldw	r16,4(sp)
    afcc:	dec00b04 	addi	sp,sp,44
    afd0:	f800283a 	ret
    afd4:	9d801926 	beq	r19,r22,b03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    afd8:	a1000217 	ldw	r4,8(r20)
    afdc:	a80f883a 	mov	r7,r21
    afe0:	e00d883a 	mov	r6,fp
    afe4:	20800017 	ldw	r2,0(r4)
    afe8:	dc800e15 	stw	r18,56(sp)
    afec:	dd800d15 	stw	r22,52(sp)
    aff0:	ddc00c15 	stw	r23,48(sp)
    aff4:	dcc00b15 	stw	r19,44(sp)
    aff8:	10800717 	ldw	r2,28(r2)
    affc:	880b883a 	mov	r5,r17
    b000:	dfc00a17 	ldw	ra,40(sp)
    b004:	df000917 	ldw	fp,36(sp)
    b008:	ddc00817 	ldw	r23,32(sp)
    b00c:	dd800717 	ldw	r22,28(sp)
    b010:	dd400617 	ldw	r21,24(sp)
    b014:	dd000517 	ldw	r20,20(sp)
    b018:	dcc00417 	ldw	r19,16(sp)
    b01c:	dc800317 	ldw	r18,12(sp)
    b020:	dc400217 	ldw	r17,8(sp)
    b024:	dc000117 	ldw	r16,4(sp)
    b028:	dec00b04 	addi	sp,sp,44
    b02c:	1000683a 	jmp	r2
    b030:	00bfff84 	movi	r2,-2
    b034:	88bfda1e 	bne	r17,r2,afa0 <__alt_data_end+0xfc00afa0>
    b038:	003fd706 	br	af98 <__alt_data_end+0xfc00af98>
    b03c:	b9400117 	ldw	r5,4(r23)
    b040:	81400526 	beq	r16,r5,b058 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    b044:	00800a84 	movi	r2,42
    b048:	18bfe326 	beq	r3,r2,afd8 <__alt_data_end+0xfc00afd8>
    b04c:	8009883a 	mov	r4,r16
    b050:	00104600 	call	10460 <strcmp>
    b054:	103fe01e 	bne	r2,zero,afd8 <__alt_data_end+0xfc00afd8>
    b058:	97000215 	stw	fp,8(r18)
    b05c:	003fd006 	br	afa0 <__alt_data_end+0xfc00afa0>
    b060:	00800184 	movi	r2,6
    b064:	003fcd06 	br	af9c <__alt_data_end+0xfc00af9c>

0000b068 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b068:	defffa04 	addi	sp,sp,-24
    b06c:	dc000215 	stw	r16,8(sp)
    b070:	dc000617 	ldw	r16,24(sp)
    b074:	dc800415 	stw	r18,16(sp)
    b078:	dc400315 	stw	r17,12(sp)
    b07c:	dfc00515 	stw	ra,20(sp)
    b080:	2023883a 	mov	r17,r4
    b084:	2825883a 	mov	r18,r5
    b088:	81800b26 	beq	r16,r6,b0b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    b08c:	89000217 	ldw	r4,8(r17)
    b090:	900b883a 	mov	r5,r18
    b094:	20800017 	ldw	r2,0(r4)
    b098:	dc000615 	stw	r16,24(sp)
    b09c:	10800817 	ldw	r2,32(r2)
    b0a0:	dfc00517 	ldw	ra,20(sp)
    b0a4:	dc800417 	ldw	r18,16(sp)
    b0a8:	dc400317 	ldw	r17,12(sp)
    b0ac:	dc000217 	ldw	r16,8(sp)
    b0b0:	dec00604 	addi	sp,sp,24
    b0b4:	1000683a 	jmp	r2
    b0b8:	21000117 	ldw	r4,4(r4)
    b0bc:	39400117 	ldw	r5,4(r7)
    b0c0:	21400926 	beq	r4,r5,b0e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    b0c4:	20c00007 	ldb	r3,0(r4)
    b0c8:	00800a84 	movi	r2,42
    b0cc:	18bfef26 	beq	r3,r2,b08c <__alt_data_end+0xfc00b08c>
    b0d0:	d9800015 	stw	r6,0(sp)
    b0d4:	d9c00115 	stw	r7,4(sp)
    b0d8:	00104600 	call	10460 <strcmp>
    b0dc:	d9800017 	ldw	r6,0(sp)
    b0e0:	d9c00117 	ldw	r7,4(sp)
    b0e4:	103fe91e 	bne	r2,zero,b08c <__alt_data_end+0xfc00b08c>
    b0e8:	00800184 	movi	r2,6
    b0ec:	dfc00517 	ldw	ra,20(sp)
    b0f0:	dc800417 	ldw	r18,16(sp)
    b0f4:	dc400317 	ldw	r17,12(sp)
    b0f8:	dc000217 	ldw	r16,8(sp)
    b0fc:	dec00604 	addi	sp,sp,24
    b100:	f800283a 	ret

0000b104 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b104:	defffb04 	addi	sp,sp,-20
    b108:	dcc00315 	stw	r19,12(sp)
    b10c:	dc800215 	stw	r18,8(sp)
    b110:	dc400115 	stw	r17,4(sp)
    b114:	dc000015 	stw	r16,0(sp)
    b118:	dfc00415 	stw	ra,16(sp)
    b11c:	2027883a 	mov	r19,r4
    b120:	2821883a 	mov	r16,r5
    b124:	3023883a 	mov	r17,r6
    b128:	3825883a 	mov	r18,r7
    b12c:	000bce00 	call	bce0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b130:	10c03fcc 	andi	r3,r2,255
    b134:	18000726 	beq	r3,zero,b154 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    b138:	dfc00417 	ldw	ra,16(sp)
    b13c:	dcc00317 	ldw	r19,12(sp)
    b140:	dc800217 	ldw	r18,8(sp)
    b144:	dc400117 	ldw	r17,4(sp)
    b148:	dc000017 	ldw	r16,0(sp)
    b14c:	dec00504 	addi	sp,sp,20
    b150:	f800283a 	ret
    b154:	99000217 	ldw	r4,8(r19)
    b158:	900f883a 	mov	r7,r18
    b15c:	880d883a 	mov	r6,r17
    b160:	20800017 	ldw	r2,0(r4)
    b164:	800b883a 	mov	r5,r16
    b168:	10800617 	ldw	r2,24(r2)
    b16c:	dfc00417 	ldw	ra,16(sp)
    b170:	dcc00317 	ldw	r19,12(sp)
    b174:	dc800217 	ldw	r18,8(sp)
    b178:	dc400117 	ldw	r17,4(sp)
    b17c:	dc000017 	ldw	r16,0(sp)
    b180:	dec00504 	addi	sp,sp,20
    b184:	1000683a 	jmp	r2

0000b188 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    b188:	008000f4 	movhi	r2,3
    b18c:	10ad3d04 	addi	r2,r2,-19212
    b190:	20800015 	stw	r2,0(r4)
    b194:	000bc9c1 	jmpi	bc9c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000b198 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	008000f4 	movhi	r2,3
    b1a0:	dc000015 	stw	r16,0(sp)
    b1a4:	dfc00115 	stw	ra,4(sp)
    b1a8:	10ad3d04 	addi	r2,r2,-19212
    b1ac:	20800015 	stw	r2,0(r4)
    b1b0:	2021883a 	mov	r16,r4
    b1b4:	000bc9c0 	call	bc9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    b1b8:	8009883a 	mov	r4,r16
    b1bc:	dfc00117 	ldw	ra,4(sp)
    b1c0:	dc000017 	ldw	r16,0(sp)
    b1c4:	dec00204 	addi	sp,sp,8
    b1c8:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000b1cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b1cc:	defff504 	addi	sp,sp,-44
    b1d0:	dc400215 	stw	r17,8(sp)
    b1d4:	dc400b17 	ldw	r17,44(sp)
    b1d8:	df000915 	stw	fp,36(sp)
    b1dc:	ddc00815 	stw	r23,32(sp)
    b1e0:	dd800715 	stw	r22,28(sp)
    b1e4:	dc000115 	stw	r16,4(sp)
    b1e8:	dfc00a15 	stw	ra,40(sp)
    b1ec:	dd400615 	stw	r21,24(sp)
    b1f0:	dd000515 	stw	r20,20(sp)
    b1f4:	dcc00415 	stw	r19,16(sp)
    b1f8:	dc800315 	stw	r18,12(sp)
    b1fc:	3039883a 	mov	fp,r6
    b200:	2021883a 	mov	r16,r4
    b204:	282d883a 	mov	r22,r5
    b208:	382f883a 	mov	r23,r7
    b20c:	34402c26 	beq	r6,r17,b2c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    b210:	85000317 	ldw	r20,12(r16)
    b214:	048000c4 	movi	r18,3
    b218:	04ffff44 	movi	r19,-3
    b21c:	a484983a 	sll	r2,r20,r18
    b220:	b80f883a 	mov	r7,r23
    b224:	b00b883a 	mov	r5,r22
    b228:	10800304 	addi	r2,r2,12
    b22c:	80a1883a 	add	r16,r16,r2
    b230:	a0001626 	beq	r20,zero,b28c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    b234:	81800017 	ldw	r6,0(r16)
    b238:	a53fffc4 	addi	r20,r20,-1
    b23c:	3080008c 	andi	r2,r6,2
    b240:	3540004c 	andi	r21,r6,1
    b244:	10000d26 	beq	r2,zero,b27c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b248:	300dd23a 	srai	r6,r6,8
    b24c:	a8000426 	beq	r21,zero,b260 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    b250:	b4c00a26 	beq	r22,r19,b27c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b254:	e0800017 	ldw	r2,0(fp)
    b258:	118d883a 	add	r6,r2,r6
    b25c:	31800017 	ldw	r6,0(r6)
    b260:	813fff17 	ldw	r4,-4(r16)
    b264:	e18d883a 	add	r6,fp,r6
    b268:	20800017 	ldw	r2,0(r4)
    b26c:	dc400015 	stw	r17,0(sp)
    b270:	10800817 	ldw	r2,32(r2)
    b274:	103ee83a 	callr	r2
    b278:	90801b16 	blt	r18,r2,b2e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    b27c:	843ffe04 	addi	r16,r16,-8
    b280:	b80f883a 	mov	r7,r23
    b284:	b00b883a 	mov	r5,r22
    b288:	a03fea1e 	bne	r20,zero,b234 <__alt_data_end+0xfc00b234>
    b28c:	00800044 	movi	r2,1
    b290:	dfc00a17 	ldw	ra,40(sp)
    b294:	df000917 	ldw	fp,36(sp)
    b298:	ddc00817 	ldw	r23,32(sp)
    b29c:	dd800717 	ldw	r22,28(sp)
    b2a0:	dd400617 	ldw	r21,24(sp)
    b2a4:	dd000517 	ldw	r20,20(sp)
    b2a8:	dcc00417 	ldw	r19,16(sp)
    b2ac:	dc800317 	ldw	r18,12(sp)
    b2b0:	dc400217 	ldw	r17,8(sp)
    b2b4:	dc000117 	ldw	r16,4(sp)
    b2b8:	dec00b04 	addi	sp,sp,44
    b2bc:	f800283a 	ret
    b2c0:	21000117 	ldw	r4,4(r4)
    b2c4:	39400117 	ldw	r5,4(r7)
    b2c8:	21400526 	beq	r4,r5,b2e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    b2cc:	20c00007 	ldb	r3,0(r4)
    b2d0:	00800a84 	movi	r2,42
    b2d4:	18bfce26 	beq	r3,r2,b210 <__alt_data_end+0xfc00b210>
    b2d8:	00104600 	call	10460 <strcmp>
    b2dc:	103fcc1e 	bne	r2,zero,b210 <__alt_data_end+0xfc00b210>
    b2e0:	00800184 	movi	r2,6
    b2e4:	003fea06 	br	b290 <__alt_data_end+0xfc00b290>
    b2e8:	a83fe926 	beq	r21,zero,b290 <__alt_data_end+0xfc00b290>
    b2ec:	10800054 	ori	r2,r2,1
    b2f0:	003fe706 	br	b290 <__alt_data_end+0xfc00b290>

0000b2f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    b2f4:	deffe804 	addi	sp,sp,-96
    b2f8:	df001615 	stw	fp,88(sp)
    b2fc:	df001b17 	ldw	fp,108(sp)
    b300:	ddc01515 	stw	r23,84(sp)
    b304:	dd001215 	stw	r20,72(sp)
    b308:	e0800417 	ldw	r2,16(fp)
    b30c:	dcc01115 	stw	r19,68(sp)
    b310:	dfc01715 	stw	ra,92(sp)
    b314:	dd801415 	stw	r22,80(sp)
    b318:	dd401315 	stw	r21,76(sp)
    b31c:	dc801015 	stw	r18,64(sp)
    b320:	dc400f15 	stw	r17,60(sp)
    b324:	dc000e15 	stw	r16,56(sp)
    b328:	d9000b15 	stw	r4,44(sp)
    b32c:	d9c00915 	stw	r7,36(sp)
    b330:	1080040c 	andi	r2,r2,16
    b334:	282f883a 	mov	r23,r5
    b338:	3027883a 	mov	r19,r6
    b33c:	dd001817 	ldw	r20,96(sp)
    b340:	10000226 	beq	r2,zero,b34c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    b344:	20800217 	ldw	r2,8(r4)
    b348:	e0800415 	stw	r2,16(fp)
    b34c:	d8c01a17 	ldw	r3,104(sp)
    b350:	a0c0cb26 	beq	r20,r3,b680 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    b354:	d8c00b17 	ldw	r3,44(sp)
    b358:	1c000117 	ldw	r16,4(r3)
    b35c:	d8c00917 	ldw	r3,36(sp)
    b360:	19400117 	ldw	r5,4(r3)
    b364:	2c000626 	beq	r5,r16,b380 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    b368:	80c00007 	ldb	r3,0(r16)
    b36c:	00800a84 	movi	r2,42
    b370:	18801b26 	beq	r3,r2,b3e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b374:	8009883a 	mov	r4,r16
    b378:	00104600 	call	10460 <strcmp>
    b37c:	1000181e 	bne	r2,zero,b3e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b380:	e5000015 	stw	r20,0(fp)
    b384:	e4c00115 	stw	r19,4(fp)
    b388:	b8010916 	blt	r23,zero,b7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    b38c:	d8c01a17 	ldw	r3,104(sp)
    b390:	a5d9883a 	add	r12,r20,r23
    b394:	1b014126 	beq	r3,r12,b89c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    b398:	00800044 	movi	r2,1
    b39c:	e0800315 	stw	r2,12(fp)
    b3a0:	0005883a 	mov	r2,zero
    b3a4:	dfc01717 	ldw	ra,92(sp)
    b3a8:	df001617 	ldw	fp,88(sp)
    b3ac:	ddc01517 	ldw	r23,84(sp)
    b3b0:	dd801417 	ldw	r22,80(sp)
    b3b4:	dd401317 	ldw	r21,76(sp)
    b3b8:	dd001217 	ldw	r20,72(sp)
    b3bc:	dcc01117 	ldw	r19,68(sp)
    b3c0:	dc801017 	ldw	r18,64(sp)
    b3c4:	dc400f17 	ldw	r17,60(sp)
    b3c8:	dc000e17 	ldw	r16,56(sp)
    b3cc:	dec01804 	addi	sp,sp,96
    b3d0:	f800283a 	ret
    b3d4:	d8c00917 	ldw	r3,36(sp)
    b3d8:	18800117 	ldw	r2,4(r3)
    b3dc:	80bfe826 	beq	r16,r2,b380 <__alt_data_end+0xfc00b380>
    b3e0:	b800ef16 	blt	r23,zero,b7a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    b3e4:	d8c01a17 	ldw	r3,104(sp)
    b3e8:	1dedc83a 	sub	r22,r3,r23
    b3ec:	e005883a 	mov	r2,fp
    b3f0:	00c00044 	movi	r3,1
    b3f4:	b039883a 	mov	fp,r22
    b3f8:	0021883a 	mov	r16,zero
    b3fc:	a02d883a 	mov	r22,r20
    b400:	d8000a45 	stb	zero,41(sp)
    b404:	d8c00a05 	stb	r3,40(sp)
    b408:	048000c4 	movi	r18,3
    b40c:	1029883a 	mov	r20,r2
    b410:	d8c00b17 	ldw	r3,44(sp)
    b414:	b805883a 	mov	r2,r23
    b418:	1ac00317 	ldw	r11,12(r3)
    b41c:	581490fa 	slli	r10,r11,3
    b420:	52800304 	addi	r10,r10,12
    b424:	1aab883a 	add	r21,r3,r10
    b428:	b007883a 	mov	r3,r22
    b42c:	582d883a 	mov	r22,r11
    b430:	a82f883a 	mov	r23,r21
    b434:	1823883a 	mov	r17,r3
    b438:	102b883a 	mov	r21,r2
    b43c:	b0005526 	beq	r22,zero,b594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    b440:	b8800017 	ldw	r2,0(r23)
    b444:	a1400417 	ldw	r5,16(r20)
    b448:	d8000415 	stw	zero,16(sp)
    b44c:	d8000515 	stw	zero,20(sp)
    b450:	d8000615 	stw	zero,24(sp)
    b454:	d8000715 	stw	zero,28(sp)
    b458:	d9400815 	stw	r5,32(sp)
    b45c:	1100004c 	andi	r4,r2,1
    b460:	1007d23a 	srai	r3,r2,8
    b464:	20007526 	beq	r4,zero,b63c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    b468:	89000017 	ldw	r4,0(r17)
    b46c:	99800054 	ori	r6,r19,1
    b470:	20c7883a 	add	r3,r4,r3
    b474:	18c00017 	ldw	r3,0(r3)
    b478:	88c7883a 	add	r3,r17,r3
    b47c:	e0000326 	beq	fp,zero,b48c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    b480:	d9c00a03 	ldbu	r7,40(sp)
    b484:	e0c9803a 	cmpltu	r4,fp,r3
    b488:	21c07226 	beq	r4,r7,b654 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    b48c:	1080008c 	andi	r2,r2,2
    b490:	1000041e 	bne	r2,zero,b4a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    b494:	013fff84 	movi	r4,-2
    b498:	a9007126 	beq	r21,r4,b660 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    b49c:	00bfff44 	movi	r2,-3
    b4a0:	308c703a 	and	r6,r6,r2
    b4a4:	b93fff17 	ldw	r4,-4(r23)
    b4a8:	d9400404 	addi	r5,sp,16
    b4ac:	d9c00917 	ldw	r7,36(sp)
    b4b0:	20800017 	ldw	r2,0(r4)
    b4b4:	d9400315 	stw	r5,12(sp)
    b4b8:	d9401a17 	ldw	r5,104(sp)
    b4bc:	d8c00015 	stw	r3,0(sp)
    b4c0:	d9400215 	stw	r5,8(sp)
    b4c4:	d9401917 	ldw	r5,100(sp)
    b4c8:	d9400115 	stw	r5,4(sp)
    b4cc:	10800717 	ldw	r2,28(r2)
    b4d0:	a80b883a 	mov	r5,r21
    b4d4:	103ee83a 	callr	r2
    b4d8:	a1400217 	ldw	r5,8(r20)
    b4dc:	d9000617 	ldw	r4,24(sp)
    b4e0:	d8c00717 	ldw	r3,28(sp)
    b4e4:	2908b03a 	or	r4,r5,r4
    b4e8:	a1000215 	stw	r4,8(r20)
    b4ec:	01400184 	movi	r5,6
    b4f0:	1940a426 	beq	r3,r5,b784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b4f4:	01400084 	movi	r5,2
    b4f8:	1940a226 	beq	r3,r5,b784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b4fc:	81403fcc 	andi	r5,r16,255
    b500:	a1800017 	ldw	r6,0(r20)
    b504:	28004f1e 	bne	r5,zero,b644 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    b508:	30007926 	beq	r6,zero,b6f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    b50c:	d9400417 	ldw	r5,16(sp)
    b510:	29806926 	beq	r5,r6,b6b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    b514:	28006d26 	beq	r5,zero,b6cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    b518:	a2800317 	ldw	r10,12(r20)
    b51c:	9100250e 	bge	r18,r4,b5b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b520:	2100004c 	andi	r4,r4,1
    b524:	20000326 	beq	r4,zero,b534 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    b528:	a0800417 	ldw	r2,16(r20)
    b52c:	1080008c 	andi	r2,r2,2
    b530:	1000201e 	bne	r2,zero,b5b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b534:	50004d1e 	bne	r10,zero,b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    b538:	18002626 	beq	r3,zero,b5d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    b53c:	02800044 	movi	r10,1
    b540:	181b883a 	mov	r13,r3
    b544:	1a84f03a 	xor	r2,r3,r10
    b548:	501f883a 	mov	r15,r10
    b54c:	90801f0e 	bge	r18,r2,b5cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    b550:	90c0880e 	bge	r18,r3,b774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    b554:	d9400417 	ldw	r5,16(sp)
    b558:	1880008c 	andi	r2,r3,2
    b55c:	d9000517 	ldw	r4,20(sp)
    b560:	a1400015 	stw	r5,0(r20)
    b564:	0021883a 	mov	r16,zero
    b568:	a1000115 	stw	r4,4(r20)
    b56c:	a0c00315 	stw	r3,12(r20)
    b570:	10004f1e 	bne	r2,zero,b6b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b574:	6b40004c 	andi	r13,r13,1
    b578:	68004d26 	beq	r13,zero,b6b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b57c:	a1000217 	ldw	r4,8(r20)
    b580:	01400104 	movi	r5,4
    b584:	21408826 	beq	r4,r5,b7a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b588:	b5bfffc4 	addi	r22,r22,-1
    b58c:	bdfffe04 	addi	r23,r23,-8
    b590:	b03fab1e 	bne	r22,zero,b440 <__alt_data_end+0xfc00b440>
    b594:	d8800a43 	ldbu	r2,41(sp)
    b598:	a82f883a 	mov	r23,r21
    b59c:	882d883a 	mov	r22,r17
    b5a0:	10008126 	beq	r2,zero,b7a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b5a4:	dd400a03 	ldbu	r21,40(sp)
    b5a8:	a8007f26 	beq	r21,zero,b7a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b5ac:	d8000a05 	stb	zero,40(sp)
    b5b0:	003f9706 	br	b410 <__alt_data_end+0xfc00b410>
    b5b4:	501f883a 	mov	r15,r10
    b5b8:	181b883a 	mov	r13,r3
    b5bc:	02800b0e 	bge	zero,r10,b5ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    b5c0:	00c0570e 	bge	zero,r3,b720 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    b5c4:	1a84f03a 	xor	r2,r3,r10
    b5c8:	90bfe116 	blt	r18,r2,b550 <__alt_data_end+0xfc00b550>
    b5cc:	1bc6703a 	and	r3,r3,r15
    b5d0:	90c09916 	blt	r18,r3,b838 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    b5d4:	01000044 	movi	r4,1
    b5d8:	a1000315 	stw	r4,12(r20)
    b5dc:	a0000015 	stw	zero,0(r20)
    b5e0:	a1000217 	ldw	r4,8(r20)
    b5e4:	04000044 	movi	r16,1
    b5e8:	003fe506 	br	b580 <__alt_data_end+0xfc00b580>
    b5ec:	90c00a0e 	bge	r18,r3,b618 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b5f0:	1880004c 	andi	r2,r3,1
    b5f4:	10000426 	beq	r2,zero,b608 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    b5f8:	d9000b17 	ldw	r4,44(sp)
    b5fc:	20800217 	ldw	r2,8(r4)
    b600:	1080008c 	andi	r2,r2,2
    b604:	1000041e 	bne	r2,zero,b618 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b608:	1880005c 	xori	r2,r3,1
    b60c:	90bfd216 	blt	r18,r2,b558 <__alt_data_end+0xfc00b558>
    b610:	03c00044 	movi	r15,1
    b614:	003fed06 	br	b5cc <__alt_data_end+0xfc00b5cc>
    b618:	a8006e16 	blt	r21,zero,b7d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    b61c:	d8801a17 	ldw	r2,104(sp)
    b620:	354d883a 	add	r6,r6,r21
    b624:	11805026 	beq	r2,r6,b768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    b628:	00c0a50e 	bge	zero,r3,b8c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    b62c:	03c00044 	movi	r15,1
    b630:	1bc4f03a 	xor	r2,r3,r15
    b634:	7815883a 	mov	r10,r15
    b638:	003fc406 	br	b54c <__alt_data_end+0xfc00b54c>
    b63c:	980d883a 	mov	r6,r19
    b640:	003f8d06 	br	b478 <__alt_data_end+0xfc00b478>
    b644:	303fb11e 	bne	r6,zero,b50c <__alt_data_end+0xfc00b50c>
    b648:	d9400417 	ldw	r5,16(sp)
    b64c:	283fb21e 	bne	r5,zero,b518 <__alt_data_end+0xfc00b518>
    b650:	003fcb06 	br	b580 <__alt_data_end+0xfc00b580>
    b654:	00c00044 	movi	r3,1
    b658:	d8c00a45 	stb	r3,41(sp)
    b65c:	003fca06 	br	b588 <__alt_data_end+0xfc00b588>
    b660:	294000cc 	andi	r5,r5,3
    b664:	283fc826 	beq	r5,zero,b588 <__alt_data_end+0xfc00b588>
    b668:	003f8c06 	br	b49c <__alt_data_end+0xfc00b49c>
    b66c:	18001a26 	beq	r3,zero,b6d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    b670:	181b883a 	mov	r13,r3
    b674:	501f883a 	mov	r15,r10
    b678:	50c4f03a 	xor	r2,r10,r3
    b67c:	003fb306 	br	b54c <__alt_data_end+0xfc00b54c>
    b680:	d8c00b17 	ldw	r3,44(sp)
    b684:	1c000117 	ldw	r16,4(r3)
    b688:	d8c01917 	ldw	r3,100(sp)
    b68c:	19400117 	ldw	r5,4(r3)
    b690:	81400626 	beq	r16,r5,b6ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    b694:	80c00007 	ldb	r3,0(r16)
    b698:	00800a84 	movi	r2,42
    b69c:	18bf4d26 	beq	r3,r2,b3d4 <__alt_data_end+0xfc00b3d4>
    b6a0:	8009883a 	mov	r4,r16
    b6a4:	00104600 	call	10460 <strcmp>
    b6a8:	10005c1e 	bne	r2,zero,b81c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    b6ac:	e4c00215 	stw	r19,8(fp)
    b6b0:	0005883a 	mov	r2,zero
    b6b4:	003f3b06 	br	b3a4 <__alt_data_end+0xfc00b3a4>
    b6b8:	a0c00117 	ldw	r3,4(r20)
    b6bc:	d8800517 	ldw	r2,20(sp)
    b6c0:	1884b03a 	or	r2,r3,r2
    b6c4:	a0800115 	stw	r2,4(r20)
    b6c8:	003fad06 	br	b580 <__alt_data_end+0xfc00b580>
    b6cc:	10803fcc 	andi	r2,r2,255
    b6d0:	103f911e 	bne	r2,zero,b518 <__alt_data_end+0xfc00b518>
    b6d4:	003faa06 	br	b580 <__alt_data_end+0xfc00b580>
    b6d8:	501b883a 	mov	r13,r10
    b6dc:	5080005c 	xori	r2,r10,1
    b6e0:	5007883a 	mov	r3,r10
    b6e4:	90bfbb0e 	bge	r18,r2,b5d4 <__alt_data_end+0xfc00b5d4>
    b6e8:	6880008c 	andi	r2,r13,2
    b6ec:	003f9f06 	br	b56c <__alt_data_end+0xfc00b56c>
    b6f0:	d8c00417 	ldw	r3,16(sp)
    b6f4:	d9400517 	ldw	r5,20(sp)
    b6f8:	a0c00015 	stw	r3,0(r20)
    b6fc:	a1400115 	stw	r5,4(r20)
    b700:	18000526 	beq	r3,zero,b718 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    b704:	20001626 	beq	r4,zero,b760 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    b708:	d9400b17 	ldw	r5,44(sp)
    b70c:	28c00217 	ldw	r3,8(r5)
    b710:	18c0004c 	andi	r3,r3,1
    b714:	183f2326 	beq	r3,zero,b3a4 <__alt_data_end+0xfc00b3a4>
    b718:	1021883a 	mov	r16,r2
    b71c:	003f9806 	br	b580 <__alt_data_end+0xfc00b580>
    b720:	9280060e 	bge	r18,r10,b73c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    b724:	5080004c 	andi	r2,r10,1
    b728:	10002426 	beq	r2,zero,b7bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    b72c:	d8c00b17 	ldw	r3,44(sp)
    b730:	18800217 	ldw	r2,8(r3)
    b734:	1080008c 	andi	r2,r2,2
    b738:	10003c26 	beq	r2,zero,b82c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    b73c:	d9400417 	ldw	r5,16(sp)
    b740:	a8004216 	blt	r21,zero,b84c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    b744:	d8c01a17 	ldw	r3,104(sp)
    b748:	2d45883a 	add	r2,r5,r21
    b74c:	18805726 	beq	r3,r2,b8ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    b750:	7880005c 	xori	r2,r15,1
    b754:	781b883a 	mov	r13,r15
    b758:	5007883a 	mov	r3,r10
    b75c:	003fe106 	br	b6e4 <__alt_data_end+0xfc00b6e4>
    b760:	1021883a 	mov	r16,r2
    b764:	003f8806 	br	b588 <__alt_data_end+0xfc00b588>
    b768:	03c00184 	movi	r15,6
    b76c:	00ffb016 	blt	zero,r3,b630 <__alt_data_end+0xfc00b630>
    b770:	7815883a 	mov	r10,r15
    b774:	7880008c 	andi	r2,r15,2
    b778:	781b883a 	mov	r13,r15
    b77c:	5007883a 	mov	r3,r10
    b780:	003f7a06 	br	b56c <__alt_data_end+0xfc00b56c>
    b784:	a039883a 	mov	fp,r20
    b788:	e0c00315 	stw	r3,12(fp)
    b78c:	d8c00417 	ldw	r3,16(sp)
    b790:	a0c00015 	stw	r3,0(r20)
    b794:	d8c00517 	ldw	r3,20(sp)
    b798:	a0c00115 	stw	r3,4(r20)
    b79c:	003f0106 	br	b3a4 <__alt_data_end+0xfc00b3a4>
    b7a0:	002d883a 	mov	r22,zero
    b7a4:	003f1106 	br	b3ec <__alt_data_end+0xfc00b3ec>
    b7a8:	8005883a 	mov	r2,r16
    b7ac:	003efd06 	br	b3a4 <__alt_data_end+0xfc00b3a4>
    b7b0:	00bfff84 	movi	r2,-2
    b7b4:	b8bfbe1e 	bne	r23,r2,b6b0 <__alt_data_end+0xfc00b6b0>
    b7b8:	003ef706 	br	b398 <__alt_data_end+0xfc00b398>
    b7bc:	5080005c 	xori	r2,r10,1
    b7c0:	90bf840e 	bge	r18,r2,b5d4 <__alt_data_end+0xfc00b5d4>
    b7c4:	501b883a 	mov	r13,r10
    b7c8:	5080008c 	andi	r2,r10,2
    b7cc:	5007883a 	mov	r3,r10
    b7d0:	003f6606 	br	b56c <__alt_data_end+0xfc00b56c>
    b7d4:	013fff84 	movi	r4,-2
    b7d8:	a9003226 	beq	r21,r4,b8a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    b7dc:	d9400917 	ldw	r5,36(sp)
    b7e0:	d9001a17 	ldw	r4,104(sp)
    b7e4:	d9c01917 	ldw	r7,100(sp)
    b7e8:	28800017 	ldw	r2,0(r5)
    b7ec:	d9000015 	stw	r4,0(sp)
    b7f0:	d9000917 	ldw	r4,36(sp)
    b7f4:	10800817 	ldw	r2,32(r2)
    b7f8:	a80b883a 	mov	r5,r21
    b7fc:	d8c00d15 	stw	r3,52(sp)
    b800:	db400c15 	stw	r13,48(sp)
    b804:	103ee83a 	callr	r2
    b808:	1015883a 	mov	r10,r2
    b80c:	101f883a 	mov	r15,r2
    b810:	db400c17 	ldw	r13,48(sp)
    b814:	d8c00d17 	ldw	r3,52(sp)
    b818:	003f6906 	br	b5c0 <__alt_data_end+0xfc00b5c0>
    b81c:	d8c00917 	ldw	r3,36(sp)
    b820:	19400117 	ldw	r5,4(r3)
    b824:	817ed31e 	bne	r16,r5,b374 <__alt_data_end+0xfc00b374>
    b828:	003ed506 	br	b380 <__alt_data_end+0xfc00b380>
    b82c:	5080005c 	xori	r2,r10,1
    b830:	90bfe416 	blt	r18,r2,b7c4 <__alt_data_end+0xfc00b7c4>
    b834:	003f6706 	br	b5d4 <__alt_data_end+0xfc00b5d4>
    b838:	00800084 	movi	r2,2
    b83c:	a0800315 	stw	r2,12(r20)
    b840:	a0000015 	stw	zero,0(r20)
    b844:	00800044 	movi	r2,1
    b848:	003ed606 	br	b3a4 <__alt_data_end+0xfc00b3a4>
    b84c:	013fff84 	movi	r4,-2
    b850:	a9002526 	beq	r21,r4,b8e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    b854:	d8c00917 	ldw	r3,36(sp)
    b858:	d9c01917 	ldw	r7,100(sp)
    b85c:	d9000917 	ldw	r4,36(sp)
    b860:	18800017 	ldw	r2,0(r3)
    b864:	d8c01a17 	ldw	r3,104(sp)
    b868:	280d883a 	mov	r6,r5
    b86c:	a80b883a 	mov	r5,r21
    b870:	d8c00015 	stw	r3,0(sp)
    b874:	10800817 	ldw	r2,32(r2)
    b878:	da800c15 	stw	r10,48(sp)
    b87c:	dbc00d15 	stw	r15,52(sp)
    b880:	103ee83a 	callr	r2
    b884:	da800c17 	ldw	r10,48(sp)
    b888:	1007883a 	mov	r3,r2
    b88c:	101b883a 	mov	r13,r2
    b890:	dbc00d17 	ldw	r15,52(sp)
    b894:	1284f03a 	xor	r2,r2,r10
    b898:	003f2c06 	br	b54c <__alt_data_end+0xfc00b54c>
    b89c:	00800184 	movi	r2,6
    b8a0:	003ebe06 	br	b39c <__alt_data_end+0xfc00b39c>
    b8a4:	00ff4b0e 	bge	zero,r3,b5d4 <__alt_data_end+0xfc00b5d4>
    b8a8:	003f6006 	br	b62c <__alt_data_end+0xfc00b62c>
    b8ac:	5080019c 	xori	r2,r10,6
    b8b0:	90800916 	blt	r18,r2,b8d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b8b4:	50c0018c 	andi	r3,r10,6
    b8b8:	90ff460e 	bge	r18,r3,b5d4 <__alt_data_end+0xfc00b5d4>
    b8bc:	003fde06 	br	b838 <__alt_data_end+0xfc00b838>
    b8c0:	d8c01a17 	ldw	r3,104(sp)
    b8c4:	2d45883a 	add	r2,r5,r21
    b8c8:	18800326 	beq	r3,r2,b8d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b8cc:	02800044 	movi	r10,1
    b8d0:	501f883a 	mov	r15,r10
    b8d4:	003f9e06 	br	b750 <__alt_data_end+0xfc00b750>
    b8d8:	03400184 	movi	r13,6
    b8dc:	00800084 	movi	r2,2
    b8e0:	6807883a 	mov	r3,r13
    b8e4:	003f1d06 	br	b55c <__alt_data_end+0xfc00b55c>
    b8e8:	501b883a 	mov	r13,r10
    b8ec:	5080005c 	xori	r2,r10,1
    b8f0:	5007883a 	mov	r3,r10
    b8f4:	003f7b06 	br	b6e4 <__alt_data_end+0xfc00b6e4>

0000b8f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b8f8:	deffef04 	addi	sp,sp,-68
    b8fc:	ddc00e15 	stw	r23,56(sp)
    b900:	dd000b15 	stw	r20,44(sp)
    b904:	dc400815 	stw	r17,32(sp)
    b908:	3029883a 	mov	r20,r6
    b90c:	dfc01015 	stw	ra,64(sp)
    b910:	df000f15 	stw	fp,60(sp)
    b914:	dd800d15 	stw	r22,52(sp)
    b918:	dd400c15 	stw	r21,48(sp)
    b91c:	dcc00a15 	stw	r19,40(sp)
    b920:	dc800915 	stw	r18,36(sp)
    b924:	dc000715 	stw	r16,28(sp)
    b928:	d9000515 	stw	r4,20(sp)
    b92c:	2823883a 	mov	r17,r5
    b930:	382f883a 	mov	r23,r7
    b934:	000bce00 	call	bce0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b938:	100d883a 	mov	r6,r2
    b93c:	10803fcc 	andi	r2,r2,255
    b940:	1000441e 	bne	r2,zero,ba54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    b944:	bc000217 	ldw	r16,8(r23)
    b948:	8080040c 	andi	r2,r16,16
    b94c:	10000226 	beq	r2,zero,b958 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    b950:	d8c00517 	ldw	r3,20(sp)
    b954:	1c000217 	ldw	r16,8(r3)
    b958:	d8c00517 	ldw	r3,20(sp)
    b95c:	d8800517 	ldw	r2,20(sp)
    b960:	1f000317 	ldw	fp,12(r3)
    b964:	e01090fa 	slli	r8,fp,3
    b968:	40c00304 	addi	r3,r8,12
    b96c:	10ed883a 	add	r22,r2,r3
    b970:	80c0004c 	andi	r3,r16,1
    b974:	42000204 	addi	r8,r8,8
    b978:	d8c00415 	stw	r3,16(sp)
    b97c:	122b883a 	add	r21,r2,r8
    b980:	e0003226 	beq	fp,zero,ba4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    b984:	b1800017 	ldw	r6,0(r22)
    b988:	d8000015 	stw	zero,0(sp)
    b98c:	d8000115 	stw	zero,4(sp)
    b990:	dc000215 	stw	r16,8(sp)
    b994:	d8000315 	stw	zero,12(sp)
    b998:	34c0008c 	andi	r19,r6,2
    b99c:	3480004c 	andi	r18,r6,1
    b9a0:	9800021e 	bne	r19,zero,b9ac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    b9a4:	d8c00417 	ldw	r3,16(sp)
    b9a8:	18002426 	beq	r3,zero,ba3c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b9ac:	a0003626 	beq	r20,zero,ba88 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    b9b0:	300dd23a 	srai	r6,r6,8
    b9b4:	90000326 	beq	r18,zero,b9c4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    b9b8:	a0800017 	ldw	r2,0(r20)
    b9bc:	118d883a 	add	r6,r2,r6
    b9c0:	31800017 	ldw	r6,0(r6)
    b9c4:	a18d883a 	add	r6,r20,r6
    b9c8:	a9000017 	ldw	r4,0(r21)
    b9cc:	d80f883a 	mov	r7,sp
    b9d0:	880b883a 	mov	r5,r17
    b9d4:	20800017 	ldw	r2,0(r4)
    b9d8:	10800617 	ldw	r2,24(r2)
    b9dc:	103ee83a 	callr	r2
    b9e0:	100d883a 	mov	r6,r2
    b9e4:	10803fcc 	andi	r2,r2,255
    b9e8:	10001426 	beq	r2,zero,ba3c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b9ec:	d8800317 	ldw	r2,12(sp)
    b9f0:	00c00204 	movi	r3,8
    b9f4:	10c02626 	beq	r2,r3,ba90 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    b9f8:	d8800117 	ldw	r2,4(sp)
    b9fc:	00c000c4 	movi	r3,3
    ba00:	1880040e 	bge	r3,r2,ba14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba04:	9800031e 	bne	r19,zero,ba14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba08:	00ffff44 	movi	r3,-3
    ba0c:	10c4703a 	and	r2,r2,r3
    ba10:	d8800115 	stw	r2,4(sp)
    ba14:	b9400317 	ldw	r5,12(r23)
    ba18:	28002126 	beq	r5,zero,baa0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ba1c:	b8800017 	ldw	r2,0(r23)
    ba20:	d9000017 	ldw	r4,0(sp)
    ba24:	11004d1e 	bne	r2,r4,bb5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ba28:	10003126 	beq	r2,zero,baf0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ba2c:	b9000117 	ldw	r4,4(r23)
    ba30:	d8800117 	ldw	r2,4(sp)
    ba34:	2084b03a 	or	r2,r4,r2
    ba38:	b8800115 	stw	r2,4(r23)
    ba3c:	e73fffc4 	addi	fp,fp,-1
    ba40:	b5bffe04 	addi	r22,r22,-8
    ba44:	ad7ffe04 	addi	r21,r21,-8
    ba48:	e03fce1e 	bne	fp,zero,b984 <__alt_data_end+0xfc00b984>
    ba4c:	b9800117 	ldw	r6,4(r23)
    ba50:	300cc03a 	cmpne	r6,r6,zero
    ba54:	3005883a 	mov	r2,r6
    ba58:	dfc01017 	ldw	ra,64(sp)
    ba5c:	df000f17 	ldw	fp,60(sp)
    ba60:	ddc00e17 	ldw	r23,56(sp)
    ba64:	dd800d17 	ldw	r22,52(sp)
    ba68:	dd400c17 	ldw	r21,48(sp)
    ba6c:	dd000b17 	ldw	r20,44(sp)
    ba70:	dcc00a17 	ldw	r19,40(sp)
    ba74:	dc800917 	ldw	r18,36(sp)
    ba78:	dc400817 	ldw	r17,32(sp)
    ba7c:	dc000717 	ldw	r16,28(sp)
    ba80:	dec01104 	addi	sp,sp,68
    ba84:	f800283a 	ret
    ba88:	000d883a 	mov	r6,zero
    ba8c:	003fce06 	br	b9c8 <__alt_data_end+0xfc00b9c8>
    ba90:	903fd926 	beq	r18,zero,b9f8 <__alt_data_end+0xfc00b9f8>
    ba94:	a8800017 	ldw	r2,0(r21)
    ba98:	d8800315 	stw	r2,12(sp)
    ba9c:	003fd606 	br	b9f8 <__alt_data_end+0xfc00b9f8>
    baa0:	d9000017 	ldw	r4,0(sp)
    baa4:	d8800117 	ldw	r2,4(sp)
    baa8:	00c000c4 	movi	r3,3
    baac:	b9000015 	stw	r4,0(r23)
    bab0:	d9000217 	ldw	r4,8(sp)
    bab4:	b8800115 	stw	r2,4(r23)
    bab8:	b9000215 	stw	r4,8(r23)
    babc:	d9000317 	ldw	r4,12(sp)
    bac0:	b9000315 	stw	r4,12(r23)
    bac4:	18bfe30e 	bge	r3,r2,ba54 <__alt_data_end+0xfc00ba54>
    bac8:	1100008c 	andi	r4,r2,2
    bacc:	20001926 	beq	r4,zero,bb34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    bad0:	d8c00517 	ldw	r3,20(sp)
    bad4:	18800217 	ldw	r2,8(r3)
    bad8:	1080004c 	andi	r2,r2,1
    badc:	103fdd26 	beq	r2,zero,ba54 <__alt_data_end+0xfc00ba54>
    bae0:	e73fffc4 	addi	fp,fp,-1
    bae4:	b5bffe04 	addi	r22,r22,-8
    bae8:	ad7ffe04 	addi	r21,r21,-8
    baec:	003fd606 	br	ba48 <__alt_data_end+0xfc00ba48>
    baf0:	d8800317 	ldw	r2,12(sp)
    baf4:	00c00204 	movi	r3,8
    baf8:	10c00b26 	beq	r2,r3,bb28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bafc:	28c00a26 	beq	r5,r3,bb28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb00:	11000117 	ldw	r4,4(r2)
    bb04:	29400117 	ldw	r5,4(r5)
    bb08:	217fc826 	beq	r4,r5,ba2c <__alt_data_end+0xfc00ba2c>
    bb0c:	20800007 	ldb	r2,0(r4)
    bb10:	00c00a84 	movi	r3,42
    bb14:	10c00426 	beq	r2,r3,bb28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb18:	d9800615 	stw	r6,24(sp)
    bb1c:	00104600 	call	10460 <strcmp>
    bb20:	d9800617 	ldw	r6,24(sp)
    bb24:	103fc126 	beq	r2,zero,ba2c <__alt_data_end+0xfc00ba2c>
    bb28:	00800084 	movi	r2,2
    bb2c:	b8800115 	stw	r2,4(r23)
    bb30:	003fc806 	br	ba54 <__alt_data_end+0xfc00ba54>
    bb34:	1080004c 	andi	r2,r2,1
    bb38:	103fc626 	beq	r2,zero,ba54 <__alt_data_end+0xfc00ba54>
    bb3c:	d8c00517 	ldw	r3,20(sp)
    bb40:	18800217 	ldw	r2,8(r3)
    bb44:	1080008c 	andi	r2,r2,2
    bb48:	103fc226 	beq	r2,zero,ba54 <__alt_data_end+0xfc00ba54>
    bb4c:	e73fffc4 	addi	fp,fp,-1
    bb50:	b5bffe04 	addi	r22,r22,-8
    bb54:	ad7ffe04 	addi	r21,r21,-8
    bb58:	003fbb06 	br	ba48 <__alt_data_end+0xfc00ba48>
    bb5c:	00800084 	movi	r2,2
    bb60:	b8000015 	stw	zero,0(r23)
    bb64:	b8800115 	stw	r2,4(r23)
    bb68:	003fba06 	br	ba54 <__alt_data_end+0xfc00ba54>

0000bb6c <_ZNSt9type_infoD1Ev>:
    bb6c:	f800283a 	ret

0000bb70 <_ZNKSt9type_info14__is_pointer_pEv>:
    bb70:	0005883a 	mov	r2,zero
    bb74:	f800283a 	ret

0000bb78 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    bb78:	0005883a 	mov	r2,zero
    bb7c:	f800283a 	ret

0000bb80 <_ZNSt9type_infoD0Ev>:
    bb80:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000bb84 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    bb84:	21000117 	ldw	r4,4(r4)
    bb88:	29400117 	ldw	r5,4(r5)
    bb8c:	21400c26 	beq	r4,r5,bbc0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    bb90:	20c00007 	ldb	r3,0(r4)
    bb94:	00800a84 	movi	r2,42
    bb98:	18800726 	beq	r3,r2,bbb8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    bb9c:	deffff04 	addi	sp,sp,-4
    bba0:	dfc00015 	stw	ra,0(sp)
    bba4:	00104600 	call	10460 <strcmp>
    bba8:	1005003a 	cmpeq	r2,r2,zero
    bbac:	dfc00017 	ldw	ra,0(sp)
    bbb0:	dec00104 	addi	sp,sp,4
    bbb4:	f800283a 	ret
    bbb8:	0005883a 	mov	r2,zero
    bbbc:	f800283a 	ret
    bbc0:	00800044 	movi	r2,1
    bbc4:	f800283a 	ret

0000bbc8 <_ZdlPv>:
    bbc8:	000f4541 	jmpi	f454 <free>

0000bbcc <__cxa_pure_virtual>:
    bbcc:	014000f4 	movhi	r5,3
    bbd0:	deffff04 	addi	sp,sp,-4
    bbd4:	296d5204 	addi	r5,r5,-19128
    bbd8:	018006c4 	movi	r6,27
    bbdc:	01000084 	movi	r4,2
    bbe0:	dfc00015 	stw	ra,0(sp)
    bbe4:	0020a240 	call	20a24 <write>
    bbe8:	000bf940 	call	bf94 <_ZSt9terminatev>

0000bbec <__cxa_deleted_virtual>:
    bbec:	014000f4 	movhi	r5,3
    bbf0:	deffff04 	addi	sp,sp,-4
    bbf4:	296d5904 	addi	r5,r5,-19100
    bbf8:	01800784 	movi	r6,30
    bbfc:	01000084 	movi	r4,2
    bc00:	dfc00015 	stw	ra,0(sp)
    bc04:	0020a240 	call	20a24 <write>
    bc08:	000bf940 	call	bf94 <_ZSt9terminatev>

0000bc0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    bc0c:	20800017 	ldw	r2,0(r4)
    bc10:	defffa04 	addi	sp,sp,-24
    bc14:	dc000415 	stw	r16,16(sp)
    bc18:	10800617 	ldw	r2,24(r2)
    bc1c:	3021883a 	mov	r16,r6
    bc20:	31800017 	ldw	r6,0(r6)
    bc24:	00c00404 	movi	r3,16
    bc28:	d8c00215 	stw	r3,8(sp)
    bc2c:	dfc00515 	stw	ra,20(sp)
    bc30:	d8000015 	stw	zero,0(sp)
    bc34:	d8000115 	stw	zero,4(sp)
    bc38:	d8000315 	stw	zero,12(sp)
    bc3c:	d80f883a 	mov	r7,sp
    bc40:	103ee83a 	callr	r2
    bc44:	d8800117 	ldw	r2,4(sp)
    bc48:	00c00184 	movi	r3,6
    bc4c:	1080018c 	andi	r2,r2,6
    bc50:	10c00526 	beq	r2,r3,bc68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    bc54:	0005883a 	mov	r2,zero
    bc58:	dfc00517 	ldw	ra,20(sp)
    bc5c:	dc000417 	ldw	r16,16(sp)
    bc60:	dec00604 	addi	sp,sp,24
    bc64:	f800283a 	ret
    bc68:	d8c00017 	ldw	r3,0(sp)
    bc6c:	00800044 	movi	r2,1
    bc70:	80c00015 	stw	r3,0(r16)
    bc74:	dfc00517 	ldw	ra,20(sp)
    bc78:	dc000417 	ldw	r16,16(sp)
    bc7c:	dec00604 	addi	sp,sp,24
    bc80:	f800283a 	ret

0000bc84 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    bc84:	d8800017 	ldw	r2,0(sp)
    bc88:	11800226 	beq	r2,r6,bc94 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    bc8c:	00800044 	movi	r2,1
    bc90:	f800283a 	ret
    bc94:	00800184 	movi	r2,6
    bc98:	f800283a 	ret

0000bc9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    bc9c:	008000f4 	movhi	r2,3
    bca0:	10ad6f04 	addi	r2,r2,-19012
    bca4:	20800015 	stw	r2,0(r4)
    bca8:	000bb6c1 	jmpi	bb6c <_ZNSt9type_infoD1Ev>

0000bcac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    bcac:	defffe04 	addi	sp,sp,-8
    bcb0:	008000f4 	movhi	r2,3
    bcb4:	dc000015 	stw	r16,0(sp)
    bcb8:	dfc00115 	stw	ra,4(sp)
    bcbc:	10ad6f04 	addi	r2,r2,-19012
    bcc0:	20800015 	stw	r2,0(r4)
    bcc4:	2021883a 	mov	r16,r4
    bcc8:	000bb6c0 	call	bb6c <_ZNSt9type_infoD1Ev>
    bccc:	8009883a 	mov	r4,r16
    bcd0:	dfc00117 	ldw	ra,4(sp)
    bcd4:	dc000017 	ldw	r16,0(sp)
    bcd8:	dec00204 	addi	sp,sp,8
    bcdc:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000bce0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    bce0:	21000117 	ldw	r4,4(r4)
    bce4:	29400117 	ldw	r5,4(r5)
    bce8:	defffd04 	addi	sp,sp,-12
    bcec:	dc400115 	stw	r17,4(sp)
    bcf0:	dc000015 	stw	r16,0(sp)
    bcf4:	dfc00215 	stw	ra,8(sp)
    bcf8:	3023883a 	mov	r17,r6
    bcfc:	3821883a 	mov	r16,r7
    bd00:	21400526 	beq	r4,r5,bd18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    bd04:	20c00007 	ldb	r3,0(r4)
    bd08:	00800a84 	movi	r2,42
    bd0c:	18800d26 	beq	r3,r2,bd44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd10:	00104600 	call	10460 <strcmp>
    bd14:	10000b1e 	bne	r2,zero,bd44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd18:	00800204 	movi	r2,8
    bd1c:	80800315 	stw	r2,12(r16)
    bd20:	00800184 	movi	r2,6
    bd24:	80800115 	stw	r2,4(r16)
    bd28:	84400015 	stw	r17,0(r16)
    bd2c:	00800044 	movi	r2,1
    bd30:	dfc00217 	ldw	ra,8(sp)
    bd34:	dc400117 	ldw	r17,4(sp)
    bd38:	dc000017 	ldw	r16,0(sp)
    bd3c:	dec00304 	addi	sp,sp,12
    bd40:	f800283a 	ret
    bd44:	0005883a 	mov	r2,zero
    bd48:	003ff906 	br	bd30 <__alt_data_end+0xfc00bd30>

0000bd4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    bd4c:	defffa04 	addi	sp,sp,-24
    bd50:	dc800415 	stw	r18,16(sp)
    bd54:	d8800817 	ldw	r2,32(sp)
    bd58:	dc800617 	ldw	r18,24(sp)
    bd5c:	dc400315 	stw	r17,12(sp)
    bd60:	dc000215 	stw	r16,8(sp)
    bd64:	dfc00515 	stw	ra,20(sp)
    bd68:	dc400917 	ldw	r17,36(sp)
    bd6c:	24000117 	ldw	r16,4(r4)
    bd70:	90801526 	beq	r18,r2,bdc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    bd74:	39400117 	ldw	r5,4(r7)
    bd78:	2c000826 	beq	r5,r16,bd9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    bd7c:	80c00007 	ldb	r3,0(r16)
    bd80:	00800a84 	movi	r2,42
    bd84:	18800926 	beq	r3,r2,bdac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bd88:	8009883a 	mov	r4,r16
    bd8c:	d9800115 	stw	r6,4(sp)
    bd90:	00104600 	call	10460 <strcmp>
    bd94:	d9800117 	ldw	r6,4(sp)
    bd98:	1000041e 	bne	r2,zero,bdac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bd9c:	00800044 	movi	r2,1
    bda0:	8c800015 	stw	r18,0(r17)
    bda4:	89800115 	stw	r6,4(r17)
    bda8:	88800315 	stw	r2,12(r17)
    bdac:	0005883a 	mov	r2,zero
    bdb0:	dfc00517 	ldw	ra,20(sp)
    bdb4:	dc800417 	ldw	r18,16(sp)
    bdb8:	dc400317 	ldw	r17,12(sp)
    bdbc:	dc000217 	ldw	r16,8(sp)
    bdc0:	dec00604 	addi	sp,sp,24
    bdc4:	f800283a 	ret
    bdc8:	d8800717 	ldw	r2,28(sp)
    bdcc:	11400117 	ldw	r5,4(r2)
    bdd0:	81400a26 	beq	r16,r5,bdfc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    bdd4:	80c00007 	ldb	r3,0(r16)
    bdd8:	00800a84 	movi	r2,42
    bddc:	18800c26 	beq	r3,r2,be10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    bde0:	8009883a 	mov	r4,r16
    bde4:	d9800115 	stw	r6,4(sp)
    bde8:	d9c00015 	stw	r7,0(sp)
    bdec:	00104600 	call	10460 <strcmp>
    bdf0:	d9800117 	ldw	r6,4(sp)
    bdf4:	d9c00017 	ldw	r7,0(sp)
    bdf8:	1000021e 	bne	r2,zero,be04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    bdfc:	89800215 	stw	r6,8(r17)
    be00:	003fea06 	br	bdac <__alt_data_end+0xfc00bdac>
    be04:	39400117 	ldw	r5,4(r7)
    be08:	817fdf1e 	bne	r16,r5,bd88 <__alt_data_end+0xfc00bd88>
    be0c:	003fe306 	br	bd9c <__alt_data_end+0xfc00bd9c>
    be10:	38800117 	ldw	r2,4(r7)
    be14:	80bfe51e 	bne	r16,r2,bdac <__alt_data_end+0xfc00bdac>
    be18:	003fe006 	br	bd9c <__alt_data_end+0xfc00bd9c>

0000be1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    be1c:	20800117 	ldw	r2,4(r4)
    be20:	28c00117 	ldw	r3,4(r5)
    be24:	10c02926 	beq	r2,r3,becc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    be28:	defffb04 	addi	sp,sp,-20
    be2c:	dcc00315 	stw	r19,12(sp)
    be30:	dc800215 	stw	r18,8(sp)
    be34:	dc400115 	stw	r17,4(sp)
    be38:	dc000015 	stw	r16,0(sp)
    be3c:	dfc00415 	stw	ra,16(sp)
    be40:	2821883a 	mov	r16,r5
    be44:	11400007 	ldb	r5,0(r2)
    be48:	2025883a 	mov	r18,r4
    be4c:	01000a84 	movi	r4,42
    be50:	3823883a 	mov	r17,r7
    be54:	3027883a 	mov	r19,r6
    be58:	29000626 	beq	r5,r4,be74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be5c:	180b883a 	mov	r5,r3
    be60:	1009883a 	mov	r4,r2
    be64:	00104600 	call	10460 <strcmp>
    be68:	1000021e 	bne	r2,zero,be74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    be6c:	00800044 	movi	r2,1
    be70:	00000306 	br	be80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    be74:	008000c4 	movi	r2,3
    be78:	1440082e 	bgeu	r2,r17,be9c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    be7c:	0005883a 	mov	r2,zero
    be80:	dfc00417 	ldw	ra,16(sp)
    be84:	dcc00317 	ldw	r19,12(sp)
    be88:	dc800217 	ldw	r18,8(sp)
    be8c:	dc400117 	ldw	r17,4(sp)
    be90:	dc000017 	ldw	r16,0(sp)
    be94:	dec00504 	addi	sp,sp,20
    be98:	f800283a 	ret
    be9c:	80800017 	ldw	r2,0(r16)
    bea0:	980d883a 	mov	r6,r19
    bea4:	900b883a 	mov	r5,r18
    bea8:	10800517 	ldw	r2,20(r2)
    beac:	8009883a 	mov	r4,r16
    beb0:	dfc00417 	ldw	ra,16(sp)
    beb4:	dcc00317 	ldw	r19,12(sp)
    beb8:	dc800217 	ldw	r18,8(sp)
    bebc:	dc400117 	ldw	r17,4(sp)
    bec0:	dc000017 	ldw	r16,0(sp)
    bec4:	dec00504 	addi	sp,sp,20
    bec8:	1000683a 	jmp	r2
    becc:	00800044 	movi	r2,1
    bed0:	f800283a 	ret

0000bed4 <_ZN10__cxxabiv111__terminateEPFvvE>:
    bed4:	00800074 	movhi	r2,1
    bed8:	deffef04 	addi	sp,sp,-68
    bedc:	10b20f04 	addi	r2,r2,-14276
    bee0:	d8800615 	stw	r2,24(sp)
    bee4:	008000b4 	movhi	r2,2
    bee8:	1092b904 	addi	r2,r2,19172
    beec:	d8800715 	stw	r2,28(sp)
    bef0:	00800074 	movhi	r2,1
    bef4:	10afcb04 	addi	r2,r2,-16596
    bef8:	d9000d15 	stw	r4,52(sp)
    befc:	d809883a 	mov	r4,sp
    bf00:	d8800915 	stw	r2,36(sp)
    bf04:	dfc01015 	stw	ra,64(sp)
    bf08:	df000f15 	stw	fp,60(sp)
    bf0c:	dec00815 	stw	sp,32(sp)
    bf10:	dec00a15 	stw	sp,40(sp)
    bf14:	000f0600 	call	f060 <_Unwind_SjLj_Register>
    bf18:	00800044 	movi	r2,1
    bf1c:	d8800115 	stw	r2,4(sp)
    bf20:	d8800d17 	ldw	r2,52(sp)
    bf24:	103ee83a 	callr	r2
    bf28:	000f3dc0 	call	f3dc <abort>
    bf2c:	d8c00217 	ldw	r3,8(sp)
    bf30:	d8800117 	ldw	r2,4(sp)
    bf34:	d8c00d15 	stw	r3,52(sp)
    bf38:	d8c00317 	ldw	r3,12(sp)
    bf3c:	d8c00e15 	stw	r3,56(sp)
    bf40:	10000b26 	beq	r2,zero,bf70 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    bf44:	10bfffc4 	addi	r2,r2,-1
    bf48:	10000126 	beq	r2,zero,bf50 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    bf4c:	003b68fa 	trap	3
    bf50:	d8000115 	stw	zero,4(sp)
    bf54:	000d2800 	call	d280 <__cxa_end_catch>
    bf58:	d8c00e17 	ldw	r3,56(sp)
    bf5c:	00bfffc4 	movi	r2,-1
    bf60:	18800826 	beq	r3,r2,bf84 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    bf64:	d9000d17 	ldw	r4,52(sp)
    bf68:	d8800115 	stw	r2,4(sp)
    bf6c:	000f25c0 	call	f25c <_Unwind_SjLj_Resume>
    bf70:	d9000d17 	ldw	r4,52(sp)
    bf74:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    bf78:	00800084 	movi	r2,2
    bf7c:	d8800115 	stw	r2,4(sp)
    bf80:	000f3dc0 	call	f3dc <abort>
    bf84:	d8800e17 	ldw	r2,56(sp)
    bf88:	d9000d17 	ldw	r4,52(sp)
    bf8c:	d8800115 	stw	r2,4(sp)
    bf90:	000ce3c0 	call	ce3c <__cxa_call_unexpected>

0000bf94 <_ZSt9terminatev>:
    bf94:	008000f4 	movhi	r2,3
    bf98:	10baf104 	addi	r2,r2,-5180
    bf9c:	11000017 	ldw	r4,0(r2)
    bfa0:	deffff04 	addi	sp,sp,-4
    bfa4:	dfc00015 	stw	ra,0(sp)
    bfa8:	000bed40 	call	bed4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000bfac <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    bfac:	deffff04 	addi	sp,sp,-4
    bfb0:	dfc00015 	stw	ra,0(sp)
    bfb4:	203ee83a 	callr	r4
    bfb8:	000bf940 	call	bf94 <_ZSt9terminatev>

0000bfbc <_ZSt10unexpectedv>:
    bfbc:	008000f4 	movhi	r2,3
    bfc0:	10baf004 	addi	r2,r2,-5184
    bfc4:	11000017 	ldw	r4,0(r2)
    bfc8:	deffff04 	addi	sp,sp,-4
    bfcc:	dfc00015 	stw	ra,0(sp)
    bfd0:	000bfac0 	call	bfac <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000bfd4 <_ZSt13set_terminatePFvvE>:
    bfd4:	00c000f4 	movhi	r3,3
    bfd8:	18faf104 	addi	r3,r3,-5180
    bfdc:	18800017 	ldw	r2,0(r3)
    bfe0:	19000015 	stw	r4,0(r3)
    bfe4:	f800283a 	ret

0000bfe8 <_ZSt13get_terminatev>:
    bfe8:	008000f4 	movhi	r2,3
    bfec:	10baf104 	addi	r2,r2,-5180
    bff0:	10800017 	ldw	r2,0(r2)
    bff4:	f800283a 	ret

0000bff8 <_ZSt14set_unexpectedPFvvE>:
    bff8:	00c000f4 	movhi	r3,3
    bffc:	18faf004 	addi	r3,r3,-5184
    c000:	18800017 	ldw	r2,0(r3)
    c004:	19000015 	stw	r4,0(r3)
    c008:	f800283a 	ret

0000c00c <_ZSt14get_unexpectedv>:
    c00c:	008000f4 	movhi	r2,3
    c010:	10baf004 	addi	r2,r2,-5184
    c014:	10800017 	ldw	r2,0(r2)
    c018:	f800283a 	ret

0000c01c <_ZL21size_of_encoded_valueh>:
    c01c:	deffff04 	addi	sp,sp,-4
    c020:	dfc00015 	stw	ra,0(sp)
    c024:	20c03fcc 	andi	r3,r4,255
    c028:	00803fc4 	movi	r2,255
    c02c:	18802026 	beq	r3,r2,c0b0 <_ZL21size_of_encoded_valueh+0x94>
    c030:	210001cc 	andi	r4,r4,7
    c034:	00800144 	movi	r2,5
    c038:	11001c36 	bltu	r2,r4,c0ac <_ZL21size_of_encoded_valueh+0x90>
    c03c:	200890ba 	slli	r4,r4,2
    c040:	00800074 	movhi	r2,1
    c044:	10b01504 	addi	r2,r2,-16300
    c048:	2089883a 	add	r4,r4,r2
    c04c:	20800017 	ldw	r2,0(r4)
    c050:	1000683a 	jmp	r2
    c054:	0000c06c 	andhi	zero,zero,769
    c058:	0000c0ac 	andhi	zero,zero,770
    c05c:	0000c07c 	xorhi	zero,zero,769
    c060:	0000c06c 	andhi	zero,zero,769
    c064:	0000c09c 	xori	zero,zero,770
    c068:	0000c08c 	andi	zero,zero,770
    c06c:	00800104 	movi	r2,4
    c070:	dfc00017 	ldw	ra,0(sp)
    c074:	dec00104 	addi	sp,sp,4
    c078:	f800283a 	ret
    c07c:	00800084 	movi	r2,2
    c080:	dfc00017 	ldw	ra,0(sp)
    c084:	dec00104 	addi	sp,sp,4
    c088:	f800283a 	ret
    c08c:	00800044 	movi	r2,1
    c090:	dfc00017 	ldw	ra,0(sp)
    c094:	dec00104 	addi	sp,sp,4
    c098:	f800283a 	ret
    c09c:	00800204 	movi	r2,8
    c0a0:	dfc00017 	ldw	ra,0(sp)
    c0a4:	dec00104 	addi	sp,sp,4
    c0a8:	f800283a 	ret
    c0ac:	000f3dc0 	call	f3dc <abort>
    c0b0:	0005883a 	mov	r2,zero
    c0b4:	dfc00017 	ldw	ra,0(sp)
    c0b8:	dec00104 	addi	sp,sp,4
    c0bc:	f800283a 	ret

0000c0c0 <_ZL28read_encoded_value_with_basehjPKhPj>:
    c0c0:	deffff04 	addi	sp,sp,-4
    c0c4:	dfc00015 	stw	ra,0(sp)
    c0c8:	20c03fcc 	andi	r3,r4,255
    c0cc:	00801404 	movi	r2,80
    c0d0:	18807326 	beq	r3,r2,c2a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    c0d4:	20c003cc 	andi	r3,r4,15
    c0d8:	00800304 	movi	r2,12
    c0dc:	10c06f36 	bltu	r2,r3,c29c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    c0e0:	180690ba 	slli	r3,r3,2
    c0e4:	02000074 	movhi	r8,1
    c0e8:	42303e04 	addi	r8,r8,-16136
    c0ec:	1a07883a 	add	r3,r3,r8
    c0f0:	18800017 	ldw	r2,0(r3)
    c0f4:	1000683a 	jmp	r2
    c0f8:	0000c12c 	andhi	zero,zero,772
    c0fc:	0000c248 	cmpgei	zero,zero,777
    c100:	0000c284 	movi	zero,778
    c104:	0000c12c 	andhi	zero,zero,772
    c108:	0000c190 	cmplti	zero,zero,774
    c10c:	0000c1e4 	muli	zero,zero,775
    c110:	0000c29c 	xori	zero,zero,778
    c114:	0000c29c 	xori	zero,zero,778
    c118:	0000c29c 	xori	zero,zero,778
    c11c:	0000c1f0 	cmpltui	zero,zero,775
    c120:	0000c1c0 	call	c1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x80>
    c124:	0000c12c 	andhi	zero,zero,772
    c128:	0000c190 	cmplti	zero,zero,774
    c12c:	30800043 	ldbu	r2,1(r6)
    c130:	30c00083 	ldbu	r3,2(r6)
    c134:	324000c3 	ldbu	r9,3(r6)
    c138:	32000003 	ldbu	r8,0(r6)
    c13c:	1004923a 	slli	r2,r2,8
    c140:	1806943a 	slli	r3,r3,16
    c144:	4812963a 	slli	r9,r9,24
    c148:	1204b03a 	or	r2,r2,r8
    c14c:	1884b03a 	or	r2,r3,r2
    c150:	4886b03a 	or	r3,r9,r2
    c154:	30800104 	addi	r2,r6,4
    c158:	18000926 	beq	r3,zero,c180 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c15c:	22001c0c 	andi	r8,r4,112
    c160:	02400404 	movi	r9,16
    c164:	42405726 	beq	r8,r9,c2c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    c168:	21003fcc 	andi	r4,r4,255
    c16c:	2100201c 	xori	r4,r4,128
    c170:	213fe004 	addi	r4,r4,-128
    c174:	1947883a 	add	r3,r3,r5
    c178:	2000010e 	bge	r4,zero,c180 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c17c:	18c00017 	ldw	r3,0(r3)
    c180:	38c00015 	stw	r3,0(r7)
    c184:	dfc00017 	ldw	ra,0(sp)
    c188:	dec00104 	addi	sp,sp,4
    c18c:	f800283a 	ret
    c190:	30800043 	ldbu	r2,1(r6)
    c194:	30c00083 	ldbu	r3,2(r6)
    c198:	324000c3 	ldbu	r9,3(r6)
    c19c:	32000003 	ldbu	r8,0(r6)
    c1a0:	1004923a 	slli	r2,r2,8
    c1a4:	1806943a 	slli	r3,r3,16
    c1a8:	4812963a 	slli	r9,r9,24
    c1ac:	1204b03a 	or	r2,r2,r8
    c1b0:	1884b03a 	or	r2,r3,r2
    c1b4:	4886b03a 	or	r3,r9,r2
    c1b8:	30800204 	addi	r2,r6,8
    c1bc:	003fe606 	br	c158 <__alt_data_end+0xfc00c158>
    c1c0:	30c00043 	ldbu	r3,1(r6)
    c1c4:	32000003 	ldbu	r8,0(r6)
    c1c8:	30800084 	addi	r2,r6,2
    c1cc:	1806923a 	slli	r3,r3,8
    c1d0:	1a06b03a 	or	r3,r3,r8
    c1d4:	18ffffcc 	andi	r3,r3,65535
    c1d8:	18e0001c 	xori	r3,r3,32768
    c1dc:	18e00004 	addi	r3,r3,-32768
    c1e0:	003fdd06 	br	c158 <__alt_data_end+0xfc00c158>
    c1e4:	30c00003 	ldbu	r3,0(r6)
    c1e8:	30800044 	addi	r2,r6,1
    c1ec:	003fda06 	br	c158 <__alt_data_end+0xfc00c158>
    c1f0:	3017883a 	mov	r11,r6
    c1f4:	0007883a 	mov	r3,zero
    c1f8:	0013883a 	mov	r9,zero
    c1fc:	5a800003 	ldbu	r10,0(r11)
    c200:	58800044 	addi	r2,r11,1
    c204:	1017883a 	mov	r11,r2
    c208:	52001fcc 	andi	r8,r10,127
    c20c:	4250983a 	sll	r8,r8,r9
    c210:	53003fcc 	andi	r12,r10,255
    c214:	6300201c 	xori	r12,r12,128
    c218:	633fe004 	addi	r12,r12,-128
    c21c:	1a06b03a 	or	r3,r3,r8
    c220:	4a4001c4 	addi	r9,r9,7
    c224:	603ff516 	blt	r12,zero,c1fc <__alt_data_end+0xfc00c1fc>
    c228:	020007c4 	movi	r8,31
    c22c:	427fca36 	bltu	r8,r9,c158 <__alt_data_end+0xfc00c158>
    c230:	5280100c 	andi	r10,r10,64
    c234:	503fc826 	beq	r10,zero,c158 <__alt_data_end+0xfc00c158>
    c238:	023fffc4 	movi	r8,-1
    c23c:	4252983a 	sll	r9,r8,r9
    c240:	1a46b03a 	or	r3,r3,r9
    c244:	003fc506 	br	c15c <__alt_data_end+0xfc00c15c>
    c248:	3017883a 	mov	r11,r6
    c24c:	0007883a 	mov	r3,zero
    c250:	0015883a 	mov	r10,zero
    c254:	5a000003 	ldbu	r8,0(r11)
    c258:	58800044 	addi	r2,r11,1
    c25c:	1017883a 	mov	r11,r2
    c260:	42401fcc 	andi	r9,r8,127
    c264:	4a92983a 	sll	r9,r9,r10
    c268:	42003fcc 	andi	r8,r8,255
    c26c:	4200201c 	xori	r8,r8,128
    c270:	423fe004 	addi	r8,r8,-128
    c274:	1a46b03a 	or	r3,r3,r9
    c278:	528001c4 	addi	r10,r10,7
    c27c:	403ff516 	blt	r8,zero,c254 <__alt_data_end+0xfc00c254>
    c280:	003fb506 	br	c158 <__alt_data_end+0xfc00c158>
    c284:	30c00043 	ldbu	r3,1(r6)
    c288:	32000003 	ldbu	r8,0(r6)
    c28c:	30800084 	addi	r2,r6,2
    c290:	1806923a 	slli	r3,r3,8
    c294:	1a06b03a 	or	r3,r3,r8
    c298:	003faf06 	br	c158 <__alt_data_end+0xfc00c158>
    c29c:	000f3dc0 	call	f3dc <abort>
    c2a0:	308000c4 	addi	r2,r6,3
    c2a4:	00ffff04 	movi	r3,-4
    c2a8:	10c4703a 	and	r2,r2,r3
    c2ac:	10c00017 	ldw	r3,0(r2)
    c2b0:	10800104 	addi	r2,r2,4
    c2b4:	38c00015 	stw	r3,0(r7)
    c2b8:	dfc00017 	ldw	ra,0(sp)
    c2bc:	dec00104 	addi	sp,sp,4
    c2c0:	f800283a 	ret
    c2c4:	300b883a 	mov	r5,r6
    c2c8:	003fa706 	br	c168 <__alt_data_end+0xfc00c168>

0000c2cc <_ZL15get_ttype_entryP16lsda_header_infom>:
    c2cc:	defffc04 	addi	sp,sp,-16
    c2d0:	dfc00315 	stw	ra,12(sp)
    c2d4:	dc000215 	stw	r16,8(sp)
    c2d8:	2021883a 	mov	r16,r4
    c2dc:	21000503 	ldbu	r4,20(r4)
    c2e0:	d9400115 	stw	r5,4(sp)
    c2e4:	000c01c0 	call	c01c <_ZL21size_of_encoded_valueh>
    c2e8:	d9400117 	ldw	r5,4(sp)
    c2ec:	1009883a 	mov	r4,r2
    c2f0:	000d8d40 	call	d8d4 <__mulsi3>
    c2f4:	81800317 	ldw	r6,12(r16)
    c2f8:	81400217 	ldw	r5,8(r16)
    c2fc:	81000503 	ldbu	r4,20(r16)
    c300:	d80f883a 	mov	r7,sp
    c304:	308dc83a 	sub	r6,r6,r2
    c308:	000c0c00 	call	c0c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    c30c:	d8800017 	ldw	r2,0(sp)
    c310:	dfc00317 	ldw	ra,12(sp)
    c314:	dc000217 	ldw	r16,8(sp)
    c318:	dec00404 	addi	sp,sp,16
    c31c:	f800283a 	ret

0000c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    c320:	deffff04 	addi	sp,sp,-4
    c324:	dfc00015 	stw	ra,0(sp)
    c328:	20c03fcc 	andi	r3,r4,255
    c32c:	00803fc4 	movi	r2,255
    c330:	18800e26 	beq	r3,r2,c36c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c334:	20801c0c 	andi	r2,r4,112
    c338:	00c00804 	movi	r3,32
    c33c:	10c01726 	beq	r2,r3,c39c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    c340:	18800e2e 	bgeu	r3,r2,c37c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    c344:	00c01004 	movi	r3,64
    c348:	10c01026 	beq	r2,r3,c38c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    c34c:	00c01404 	movi	r3,80
    c350:	10c00626 	beq	r2,r3,c36c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c354:	00c00c04 	movi	r3,48
    c358:	10c00b1e 	bne	r2,r3,c388 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    c35c:	2809883a 	mov	r4,r5
    c360:	dfc00017 	ldw	ra,0(sp)
    c364:	dec00104 	addi	sp,sp,4
    c368:	000f1381 	jmpi	f138 <_Unwind_GetDataRelBase>
    c36c:	0005883a 	mov	r2,zero
    c370:	dfc00017 	ldw	ra,0(sp)
    c374:	dec00104 	addi	sp,sp,4
    c378:	f800283a 	ret
    c37c:	103ffb26 	beq	r2,zero,c36c <__alt_data_end+0xfc00c36c>
    c380:	00c00404 	movi	r3,16
    c384:	10fff926 	beq	r2,r3,c36c <__alt_data_end+0xfc00c36c>
    c388:	000f3dc0 	call	f3dc <abort>
    c38c:	2809883a 	mov	r4,r5
    c390:	dfc00017 	ldw	ra,0(sp)
    c394:	dec00104 	addi	sp,sp,4
    c398:	000f1281 	jmpi	f128 <_Unwind_GetRegionStart>
    c39c:	2809883a 	mov	r4,r5
    c3a0:	dfc00017 	ldw	ra,0(sp)
    c3a4:	dec00104 	addi	sp,sp,4
    c3a8:	000f1401 	jmpi	f140 <_Unwind_GetTextRelBase>

0000c3ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    c3ac:	defffb04 	addi	sp,sp,-20
    c3b0:	dcc00315 	stw	r19,12(sp)
    c3b4:	dc400115 	stw	r17,4(sp)
    c3b8:	dc000015 	stw	r16,0(sp)
    c3bc:	dfc00415 	stw	ra,16(sp)
    c3c0:	dc800215 	stw	r18,8(sp)
    c3c4:	2027883a 	mov	r19,r4
    c3c8:	2821883a 	mov	r16,r5
    c3cc:	3023883a 	mov	r17,r6
    c3d0:	20003f26 	beq	r4,zero,c4d0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    c3d4:	000f1280 	call	f128 <_Unwind_GetRegionStart>
    c3d8:	88800015 	stw	r2,0(r17)
    c3dc:	84800003 	ldbu	r18,0(r16)
    c3e0:	00c03fc4 	movi	r3,255
    c3e4:	84000044 	addi	r16,r16,1
    c3e8:	90c03726 	beq	r18,r3,c4c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    c3ec:	980b883a 	mov	r5,r19
    c3f0:	9009883a 	mov	r4,r18
    c3f4:	000c3200 	call	c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c3f8:	800d883a 	mov	r6,r16
    c3fc:	89c00104 	addi	r7,r17,4
    c400:	100b883a 	mov	r5,r2
    c404:	9009883a 	mov	r4,r18
    c408:	000c0c00 	call	c0c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    c40c:	1021883a 	mov	r16,r2
    c410:	80c00003 	ldbu	r3,0(r16)
    c414:	01003fc4 	movi	r4,255
    c418:	80800044 	addi	r2,r16,1
    c41c:	88c00505 	stb	r3,20(r17)
    c420:	18c03fcc 	andi	r3,r3,255
    c424:	19002c26 	beq	r3,r4,c4d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    c428:	100f883a 	mov	r7,r2
    c42c:	000d883a 	mov	r6,zero
    c430:	000b883a 	mov	r5,zero
    c434:	38c00003 	ldbu	r3,0(r7)
    c438:	10800044 	addi	r2,r2,1
    c43c:	100f883a 	mov	r7,r2
    c440:	19001fcc 	andi	r4,r3,127
    c444:	2148983a 	sll	r4,r4,r5
    c448:	18c03fcc 	andi	r3,r3,255
    c44c:	18c0201c 	xori	r3,r3,128
    c450:	18ffe004 	addi	r3,r3,-128
    c454:	310cb03a 	or	r6,r6,r4
    c458:	294001c4 	addi	r5,r5,7
    c45c:	183ff516 	blt	r3,zero,c434 <__alt_data_end+0xfc00c434>
    c460:	118d883a 	add	r6,r2,r6
    c464:	89800315 	stw	r6,12(r17)
    c468:	10c00003 	ldbu	r3,0(r2)
    c46c:	000d883a 	mov	r6,zero
    c470:	10800044 	addi	r2,r2,1
    c474:	88c00545 	stb	r3,21(r17)
    c478:	000b883a 	mov	r5,zero
    c47c:	10c00003 	ldbu	r3,0(r2)
    c480:	10800044 	addi	r2,r2,1
    c484:	19001fcc 	andi	r4,r3,127
    c488:	2148983a 	sll	r4,r4,r5
    c48c:	18c03fcc 	andi	r3,r3,255
    c490:	18c0201c 	xori	r3,r3,128
    c494:	18ffe004 	addi	r3,r3,-128
    c498:	310cb03a 	or	r6,r6,r4
    c49c:	294001c4 	addi	r5,r5,7
    c4a0:	183ff616 	blt	r3,zero,c47c <__alt_data_end+0xfc00c47c>
    c4a4:	118d883a 	add	r6,r2,r6
    c4a8:	89800415 	stw	r6,16(r17)
    c4ac:	dfc00417 	ldw	ra,16(sp)
    c4b0:	dcc00317 	ldw	r19,12(sp)
    c4b4:	dc800217 	ldw	r18,8(sp)
    c4b8:	dc400117 	ldw	r17,4(sp)
    c4bc:	dc000017 	ldw	r16,0(sp)
    c4c0:	dec00504 	addi	sp,sp,20
    c4c4:	f800283a 	ret
    c4c8:	88800115 	stw	r2,4(r17)
    c4cc:	003fd006 	br	c410 <__alt_data_end+0xfc00c410>
    c4d0:	0005883a 	mov	r2,zero
    c4d4:	003fc006 	br	c3d8 <__alt_data_end+0xfc00c3d8>
    c4d8:	88000315 	stw	zero,12(r17)
    c4dc:	003fe206 	br	c468 <__alt_data_end+0xfc00c468>

0000c4e0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    c4e0:	28800017 	ldw	r2,0(r5)
    c4e4:	30c00017 	ldw	r3,0(r6)
    c4e8:	defffb04 	addi	sp,sp,-20
    c4ec:	10800217 	ldw	r2,8(r2)
    c4f0:	dc400315 	stw	r17,12(sp)
    c4f4:	dc000215 	stw	r16,8(sp)
    c4f8:	d9400115 	stw	r5,4(sp)
    c4fc:	dfc00415 	stw	ra,16(sp)
    c500:	2021883a 	mov	r16,r4
    c504:	d8c00015 	stw	r3,0(sp)
    c508:	2809883a 	mov	r4,r5
    c50c:	3023883a 	mov	r17,r6
    c510:	103ee83a 	callr	r2
    c514:	10803fcc 	andi	r2,r2,255
    c518:	d9400117 	ldw	r5,4(sp)
    c51c:	10000326 	beq	r2,zero,c52c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    c520:	d8800017 	ldw	r2,0(sp)
    c524:	10800017 	ldw	r2,0(r2)
    c528:	d8800015 	stw	r2,0(sp)
    c52c:	80800017 	ldw	r2,0(r16)
    c530:	01c00044 	movi	r7,1
    c534:	d80d883a 	mov	r6,sp
    c538:	10800417 	ldw	r2,16(r2)
    c53c:	8009883a 	mov	r4,r16
    c540:	103ee83a 	callr	r2
    c544:	10c03fcc 	andi	r3,r2,255
    c548:	18000226 	beq	r3,zero,c554 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    c54c:	d8c00017 	ldw	r3,0(sp)
    c550:	88c00015 	stw	r3,0(r17)
    c554:	dfc00417 	ldw	ra,16(sp)
    c558:	dc400317 	ldw	r17,12(sp)
    c55c:	dc000217 	ldw	r16,8(sp)
    c560:	dec00504 	addi	sp,sp,20
    c564:	f800283a 	ret

0000c568 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    c568:	defff304 	addi	sp,sp,-52
    c56c:	dc800615 	stw	r18,24(sp)
    c570:	3825d23a 	srai	r18,r7,8
    c574:	dd000815 	stw	r20,32(sp)
    c578:	dcc00715 	stw	r19,28(sp)
    c57c:	dfc00c15 	stw	ra,48(sp)
    c580:	ddc00b15 	stw	r23,44(sp)
    c584:	dd800a15 	stw	r22,40(sp)
    c588:	dd400915 	stw	r21,36(sp)
    c58c:	dc400515 	stw	r17,20(sp)
    c590:	dc000415 	stw	r16,16(sp)
    c594:	d9400215 	stw	r5,8(sp)
    c598:	3827883a 	mov	r19,r7
    c59c:	2029883a 	mov	r20,r4
    c5a0:	9000010e 	bge	r18,zero,c5a8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    c5a4:	04a5c83a 	sub	r18,zero,r18
    c5a8:	000b883a 	mov	r5,zero
    c5ac:	01000144 	movi	r4,5
    c5b0:	d9800315 	stw	r6,12(sp)
    c5b4:	000c3200 	call	c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c5b8:	d9800317 	ldw	r6,12(sp)
    c5bc:	d9c00104 	addi	r7,sp,4
    c5c0:	100b883a 	mov	r5,r2
    c5c4:	01000144 	movi	r4,5
    c5c8:	000c0c00 	call	c0c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    c5cc:	017ffe44 	movi	r5,-7
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	1021883a 	mov	r16,r2
    c5d8:	000d8d40 	call	d8d4 <__mulsi3>
    c5dc:	102d883a 	mov	r22,r2
    c5e0:	0023883a 	mov	r17,zero
    c5e4:	85400003 	ldbu	r21,0(r16)
    c5e8:	8009883a 	mov	r4,r16
    c5ec:	014001c4 	movi	r5,7
    c5f0:	000d8d40 	call	d8d4 <__mulsi3>
    c5f4:	a8c01fcc 	andi	r3,r21,127
    c5f8:	1585883a 	add	r2,r2,r22
    c5fc:	1886983a 	sll	r3,r3,r2
    c600:	ad403fcc 	andi	r21,r21,255
    c604:	ad40201c 	xori	r21,r21,128
    c608:	ad7fe004 	addi	r21,r21,-128
    c60c:	84000044 	addi	r16,r16,1
    c610:	88e2b03a 	or	r17,r17,r3
    c614:	a83ff316 	blt	r21,zero,c5e4 <__alt_data_end+0xfc00c5e4>
    c618:	8461883a 	add	r16,r16,r17
    c61c:	017ffe44 	movi	r5,-7
    c620:	8009883a 	mov	r4,r16
    c624:	000d8d40 	call	d8d4 <__mulsi3>
    c628:	102d883a 	mov	r22,r2
    c62c:	002b883a 	mov	r21,zero
    c630:	84400003 	ldbu	r17,0(r16)
    c634:	8009883a 	mov	r4,r16
    c638:	014001c4 	movi	r5,7
    c63c:	000d8d40 	call	d8d4 <__mulsi3>
    c640:	88c01fcc 	andi	r3,r17,127
    c644:	1585883a 	add	r2,r2,r22
    c648:	1886983a 	sll	r3,r3,r2
    c64c:	8c403fcc 	andi	r17,r17,255
    c650:	8c40201c 	xori	r17,r17,128
    c654:	8c7fe004 	addi	r17,r17,-128
    c658:	84000044 	addi	r16,r16,1
    c65c:	a8eab03a 	or	r21,r21,r3
    c660:	883ff316 	blt	r17,zero,c630 <__alt_data_end+0xfc00c630>
    c664:	94403fcc 	andi	r17,r18,255
    c668:	8c7fffc4 	addi	r17,r17,-1
    c66c:	8463883a 	add	r17,r16,r17
    c670:	ad4000c4 	addi	r21,r21,3
    c674:	00bfff04 	movi	r2,-4
    c678:	ac21883a 	add	r16,r21,r16
    c67c:	017ffe44 	movi	r5,-7
    c680:	8809883a 	mov	r4,r17
    c684:	80a0703a 	and	r16,r16,r2
    c688:	000d8d40 	call	d8d4 <__mulsi3>
    c68c:	0025883a 	mov	r18,zero
    c690:	102f883a 	mov	r23,r2
    c694:	8d800003 	ldbu	r22,0(r17)
    c698:	8809883a 	mov	r4,r17
    c69c:	014001c4 	movi	r5,7
    c6a0:	000d8d40 	call	d8d4 <__mulsi3>
    c6a4:	b0c01fcc 	andi	r3,r22,127
    c6a8:	15c5883a 	add	r2,r2,r23
    c6ac:	1886983a 	sll	r3,r3,r2
    c6b0:	b5803fcc 	andi	r22,r22,255
    c6b4:	b580201c 	xori	r22,r22,128
    c6b8:	8d400044 	addi	r21,r17,1
    c6bc:	b5bfe004 	addi	r22,r22,-128
    c6c0:	90e4b03a 	or	r18,r18,r3
    c6c4:	a823883a 	mov	r17,r21
    c6c8:	b03ff216 	blt	r22,zero,c694 <__alt_data_end+0xfc00c694>
    c6cc:	9cc03fcc 	andi	r19,r19,255
    c6d0:	90002426 	beq	r18,zero,c764 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    c6d4:	9809883a 	mov	r4,r19
    c6d8:	000c01c0 	call	c01c <_ZL21size_of_encoded_valueh>
    c6dc:	100b883a 	mov	r5,r2
    c6e0:	913fffc4 	addi	r4,r18,-1
    c6e4:	000d8d40 	call	d8d4 <__mulsi3>
    c6e8:	d9400d17 	ldw	r5,52(sp)
    c6ec:	d80f883a 	mov	r7,sp
    c6f0:	9809883a 	mov	r4,r19
    c6f4:	140d883a 	add	r6,r2,r16
    c6f8:	000c0c00 	call	c0c0 <_ZL28read_encoded_value_with_basehjPKhPj>
    c6fc:	d9000017 	ldw	r4,0(sp)
    c700:	d9800204 	addi	r6,sp,8
    c704:	a00b883a 	mov	r5,r20
    c708:	000c4e00 	call	c4e0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c70c:	10c03fcc 	andi	r3,r2,255
    c710:	1800151e 	bne	r3,zero,c768 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    c714:	a809883a 	mov	r4,r21
    c718:	017ffe44 	movi	r5,-7
    c71c:	000d8d40 	call	d8d4 <__mulsi3>
    c720:	102d883a 	mov	r22,r2
    c724:	a809883a 	mov	r4,r21
    c728:	0025883a 	mov	r18,zero
    c72c:	24400003 	ldbu	r17,0(r4)
    c730:	014001c4 	movi	r5,7
    c734:	000d8d40 	call	d8d4 <__mulsi3>
    c738:	88c01fcc 	andi	r3,r17,127
    c73c:	1585883a 	add	r2,r2,r22
    c740:	1886983a 	sll	r3,r3,r2
    c744:	8c403fcc 	andi	r17,r17,255
    c748:	8c40201c 	xori	r17,r17,128
    c74c:	ad400044 	addi	r21,r21,1
    c750:	8c7fe004 	addi	r17,r17,-128
    c754:	90e4b03a 	or	r18,r18,r3
    c758:	a809883a 	mov	r4,r21
    c75c:	883ff316 	blt	r17,zero,c72c <__alt_data_end+0xfc00c72c>
    c760:	003fdb06 	br	c6d0 <__alt_data_end+0xfc00c6d0>
    c764:	0005883a 	mov	r2,zero
    c768:	dfc00c17 	ldw	ra,48(sp)
    c76c:	ddc00b17 	ldw	r23,44(sp)
    c770:	dd800a17 	ldw	r22,40(sp)
    c774:	dd400917 	ldw	r21,36(sp)
    c778:	dd000817 	ldw	r20,32(sp)
    c77c:	dcc00717 	ldw	r19,28(sp)
    c780:	dc800617 	ldw	r18,24(sp)
    c784:	dc400517 	ldw	r17,20(sp)
    c788:	dc000417 	ldw	r16,16(sp)
    c78c:	dec00d04 	addi	sp,sp,52
    c790:	f800283a 	ret

0000c794 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    c794:	defffb04 	addi	sp,sp,-20
    c798:	dc000115 	stw	r16,4(sp)
    c79c:	24000317 	ldw	r16,12(r4)
    c7a0:	01ce303a 	nor	r7,zero,r7
    c7a4:	dc800315 	stw	r18,12(sp)
    c7a8:	dc400215 	stw	r17,8(sp)
    c7ac:	dfc00415 	stw	ra,16(sp)
    c7b0:	2023883a 	mov	r17,r4
    c7b4:	2825883a 	mov	r18,r5
    c7b8:	d9800015 	stw	r6,0(sp)
    c7bc:	81e1883a 	add	r16,r16,r7
    c7c0:	800d883a 	mov	r6,r16
    c7c4:	000b883a 	mov	r5,zero
    c7c8:	0009883a 	mov	r4,zero
    c7cc:	30800003 	ldbu	r2,0(r6)
    c7d0:	84000044 	addi	r16,r16,1
    c7d4:	800d883a 	mov	r6,r16
    c7d8:	10c01fcc 	andi	r3,r2,127
    c7dc:	1906983a 	sll	r3,r3,r4
    c7e0:	10803fcc 	andi	r2,r2,255
    c7e4:	1080201c 	xori	r2,r2,128
    c7e8:	10bfe004 	addi	r2,r2,-128
    c7ec:	28cab03a 	or	r5,r5,r3
    c7f0:	210001c4 	addi	r4,r4,7
    c7f4:	103ff516 	blt	r2,zero,c7cc <__alt_data_end+0xfc00c7cc>
    c7f8:	28000e26 	beq	r5,zero,c834 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    c7fc:	8809883a 	mov	r4,r17
    c800:	000c2cc0 	call	c2cc <_ZL15get_ttype_entryP16lsda_header_infom>
    c804:	d80d883a 	mov	r6,sp
    c808:	900b883a 	mov	r5,r18
    c80c:	1009883a 	mov	r4,r2
    c810:	000c4e00 	call	c4e0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c814:	10c03fcc 	andi	r3,r2,255
    c818:	183fe926 	beq	r3,zero,c7c0 <__alt_data_end+0xfc00c7c0>
    c81c:	dfc00417 	ldw	ra,16(sp)
    c820:	dc800317 	ldw	r18,12(sp)
    c824:	dc400217 	ldw	r17,8(sp)
    c828:	dc000117 	ldw	r16,4(sp)
    c82c:	dec00504 	addi	sp,sp,20
    c830:	f800283a 	ret
    c834:	0005883a 	mov	r2,zero
    c838:	003ff806 	br	c81c <__alt_data_end+0xfc00c81c>

0000c83c <__gxx_personality_sj0>:
    c83c:	00800074 	movhi	r2,1
    c840:	deffdd04 	addi	sp,sp,-140
    c844:	10b20f04 	addi	r2,r2,-14276
    c848:	d8800e15 	stw	r2,56(sp)
    c84c:	008000b4 	movhi	r2,2
    c850:	1092bf04 	addi	r2,r2,19196
    c854:	d8800f15 	stw	r2,60(sp)
    c858:	00800074 	movhi	r2,1
    c85c:	10b38504 	addi	r2,r2,-12780
    c860:	d9001515 	stw	r4,84(sp)
    c864:	d9000804 	addi	r4,sp,32
    c868:	d8801115 	stw	r2,68(sp)
    c86c:	dfc02215 	stw	ra,136(sp)
    c870:	df002115 	stw	fp,132(sp)
    c874:	dec01015 	stw	sp,64(sp)
    c878:	dec01215 	stw	sp,72(sp)
    c87c:	d9401915 	stw	r5,100(sp)
    c880:	d9801615 	stw	r6,88(sp)
    c884:	d9c01715 	stw	r7,92(sp)
    c888:	000f0600 	call	f060 <_Unwind_SjLj_Register>
    c88c:	d8c01517 	ldw	r3,84(sp)
    c890:	d8000715 	stw	zero,28(sp)
    c894:	d8000615 	stw	zero,24(sp)
    c898:	00800044 	movi	r2,1
    c89c:	18800926 	beq	r3,r2,c8c4 <__gxx_personality_sj0+0x88>
    c8a0:	01c000c4 	movi	r7,3
    c8a4:	d9c01515 	stw	r7,84(sp)
    c8a8:	d9000804 	addi	r4,sp,32
    c8ac:	000f0780 	call	f078 <_Unwind_SjLj_Unregister>
    c8b0:	d8801517 	ldw	r2,84(sp)
    c8b4:	dfc02217 	ldw	ra,136(sp)
    c8b8:	df002117 	ldw	fp,132(sp)
    c8bc:	dec02304 	addi	sp,sp,140
    c8c0:	f800283a 	ret
    c8c4:	d9001617 	ldw	r4,88(sp)
    c8c8:	00af3574 	movhi	r2,48341
    c8cc:	d9c01717 	ldw	r7,92(sp)
    c8d0:	10b54004 	addi	r2,r2,-11008
    c8d4:	00ee2cb4 	movhi	r3,47282
    c8d8:	2085883a 	add	r2,r4,r2
    c8dc:	18eaaf04 	addi	r3,r3,-21828
    c8e0:	d8801b15 	stw	r2,108(sp)
    c8e4:	38c7883a 	add	r3,r7,r3
    c8e8:	1105803a 	cmpltu	r2,r2,r4
    c8ec:	10c7883a 	add	r3,r2,r3
    c8f0:	d8c01c15 	stw	r3,112(sp)
    c8f4:	d8c01917 	ldw	r3,100(sp)
    c8f8:	00800184 	movi	r2,6
    c8fc:	18805426 	beq	r3,r2,ca50 <__gxx_personality_sj0+0x214>
    c900:	d9002417 	ldw	r4,144(sp)
    c904:	00bfffc4 	movi	r2,-1
    c908:	d8800915 	stw	r2,36(sp)
    c90c:	000f11c0 	call	f11c <_Unwind_GetLanguageSpecificData>
    c910:	d8801a15 	stw	r2,104(sp)
    c914:	1000c926 	beq	r2,zero,cc3c <__gxx_personality_sj0+0x400>
    c918:	d9002417 	ldw	r4,144(sp)
    c91c:	d80d883a 	mov	r6,sp
    c920:	100b883a 	mov	r5,r2
    c924:	000c3ac0 	call	c3ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c928:	d9402417 	ldw	r5,144(sp)
    c92c:	d9000503 	ldbu	r4,20(sp)
    c930:	d8801515 	stw	r2,84(sp)
    c934:	000c3200 	call	c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c938:	d9002417 	ldw	r4,144(sp)
    c93c:	d9400604 	addi	r5,sp,24
    c940:	d8800215 	stw	r2,8(sp)
    c944:	000f0ec0 	call	f0ec <_Unwind_GetIPInfo>
    c948:	d8c00617 	ldw	r3,24(sp)
    c94c:	18006126 	beq	r3,zero,cad4 <__gxx_personality_sj0+0x298>
    c950:	1000ba16 	blt	r2,zero,cc3c <__gxx_personality_sj0+0x400>
    c954:	10002f1e 	bne	r2,zero,ca14 <__gxx_personality_sj0+0x1d8>
    c958:	d8001515 	stw	zero,84(sp)
    c95c:	d8001f15 	stw	zero,124(sp)
    c960:	d8001815 	stw	zero,96(sp)
    c964:	00c00044 	movi	r3,1
    c968:	d9001917 	ldw	r4,100(sp)
    c96c:	2080004c 	andi	r2,r4,1
    c970:	1000b51e 	bne	r2,zero,cc48 <__gxx_personality_sj0+0x40c>
    c974:	d9001917 	ldw	r4,100(sp)
    c978:	2080020c 	andi	r2,r4,8
    c97c:	1000b71e 	bne	r2,zero,cc5c <__gxx_personality_sj0+0x420>
    c980:	d9c01c17 	ldw	r7,112(sp)
    c984:	3800b826 	beq	r7,zero,cc68 <__gxx_personality_sj0+0x42c>
    c988:	00800044 	movi	r2,1
    c98c:	1880b526 	beq	r3,r2,cc64 <__gxx_personality_sj0+0x428>
    c990:	d9c01517 	ldw	r7,84(sp)
    c994:	3800f516 	blt	r7,zero,cd6c <__gxx_personality_sj0+0x530>
    c998:	d9002417 	ldw	r4,144(sp)
    c99c:	d9802317 	ldw	r6,140(sp)
    c9a0:	00bfffc4 	movi	r2,-1
    c9a4:	000b883a 	mov	r5,zero
    c9a8:	d8800915 	stw	r2,36(sp)
    c9ac:	000f0c00 	call	f0c0 <_Unwind_SetGR>
    c9b0:	d9801517 	ldw	r6,84(sp)
    c9b4:	d9002417 	ldw	r4,144(sp)
    c9b8:	01400044 	movi	r5,1
    c9bc:	000f0c00 	call	f0c0 <_Unwind_SetGR>
    c9c0:	d9002417 	ldw	r4,144(sp)
    c9c4:	d9401f17 	ldw	r5,124(sp)
    c9c8:	000f10c0 	call	f10c <_Unwind_SetIP>
    c9cc:	010001c4 	movi	r4,7
    c9d0:	d9001515 	stw	r4,84(sp)
    c9d4:	003fb406 	br	c8a8 <__alt_data_end+0xfc00c8a8>
    c9d8:	000f883a 	mov	r7,zero
    c9dc:	000d883a 	mov	r6,zero
    c9e0:	19000003 	ldbu	r4,0(r3)
    c9e4:	18c00044 	addi	r3,r3,1
    c9e8:	d8c01515 	stw	r3,84(sp)
    c9ec:	21401fcc 	andi	r5,r4,127
    c9f0:	298a983a 	sll	r5,r5,r6
    c9f4:	21003fcc 	andi	r4,r4,255
    c9f8:	2100201c 	xori	r4,r4,128
    c9fc:	213fe004 	addi	r4,r4,-128
    ca00:	394eb03a 	or	r7,r7,r5
    ca04:	318001c4 	addi	r6,r6,7
    ca08:	203ff516 	blt	r4,zero,c9e0 <__alt_data_end+0xfc00c9e0>
    ca0c:	10bfffc4 	addi	r2,r2,-1
    ca10:	10003226 	beq	r2,zero,cadc <__gxx_personality_sj0+0x2a0>
    ca14:	d9c01517 	ldw	r7,84(sp)
    ca18:	0011883a 	mov	r8,zero
    ca1c:	000d883a 	mov	r6,zero
    ca20:	39000003 	ldbu	r4,0(r7)
    ca24:	38c00044 	addi	r3,r7,1
    ca28:	180f883a 	mov	r7,r3
    ca2c:	21401fcc 	andi	r5,r4,127
    ca30:	298a983a 	sll	r5,r5,r6
    ca34:	21003fcc 	andi	r4,r4,255
    ca38:	2100201c 	xori	r4,r4,128
    ca3c:	213fe004 	addi	r4,r4,-128
    ca40:	4150b03a 	or	r8,r8,r5
    ca44:	318001c4 	addi	r6,r6,7
    ca48:	203ff516 	blt	r4,zero,ca20 <__alt_data_end+0xfc00ca20>
    ca4c:	003fe206 	br	c9d8 <__alt_data_end+0xfc00c9d8>
    ca50:	d9001c17 	ldw	r4,112(sp)
    ca54:	203faa1e 	bne	r4,zero,c900 <__alt_data_end+0xfc00c900>
    ca58:	d9c01517 	ldw	r7,84(sp)
    ca5c:	d8801b17 	ldw	r2,108(sp)
    ca60:	38bfa736 	bltu	r7,r2,c900 <__alt_data_end+0xfc00c900>
    ca64:	d8c02317 	ldw	r3,140(sp)
    ca68:	18fffe17 	ldw	r3,-8(r3)
    ca6c:	d8c01f15 	stw	r3,124(sp)
    ca70:	18008226 	beq	r3,zero,cc7c <__gxx_personality_sj0+0x440>
    ca74:	d9002317 	ldw	r4,140(sp)
    ca78:	d9c02317 	ldw	r7,140(sp)
    ca7c:	213ffb17 	ldw	r4,-20(r4)
    ca80:	39fffd17 	ldw	r7,-12(r7)
    ca84:	d9001515 	stw	r4,84(sp)
    ca88:	d9c01a15 	stw	r7,104(sp)
    ca8c:	d8801517 	ldw	r2,84(sp)
    ca90:	103fc10e 	bge	r2,zero,c998 <__alt_data_end+0xfc00c998>
    ca94:	d9002417 	ldw	r4,144(sp)
    ca98:	d9401a17 	ldw	r5,104(sp)
    ca9c:	d80d883a 	mov	r6,sp
    caa0:	00bfffc4 	movi	r2,-1
    caa4:	d8800915 	stw	r2,36(sp)
    caa8:	000c3ac0 	call	c3ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    caac:	d9402417 	ldw	r5,144(sp)
    cab0:	d9000503 	ldbu	r4,20(sp)
    cab4:	000c3200 	call	c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cab8:	d9000503 	ldbu	r4,20(sp)
    cabc:	d9402417 	ldw	r5,144(sp)
    cac0:	d8800215 	stw	r2,8(sp)
    cac4:	000c3200 	call	c320 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cac8:	d8c02317 	ldw	r3,140(sp)
    cacc:	18bffe15 	stw	r2,-8(r3)
    cad0:	003fb106 	br	c998 <__alt_data_end+0xfc00c998>
    cad4:	10bfffc4 	addi	r2,r2,-1
    cad8:	003f9d06 	br	c950 <__alt_data_end+0xfc00c950>
    cadc:	42000044 	addi	r8,r8,1
    cae0:	da001f15 	stw	r8,124(sp)
    cae4:	38005326 	beq	r7,zero,cc34 <__gxx_personality_sj0+0x3f8>
    cae8:	d8800417 	ldw	r2,16(sp)
    caec:	39ffffc4 	addi	r7,r7,-1
    caf0:	11c5883a 	add	r2,r2,r7
    caf4:	d8801815 	stw	r2,96(sp)
    caf8:	40005026 	beq	r8,zero,cc3c <__gxx_personality_sj0+0x400>
    cafc:	10007426 	beq	r2,zero,ccd0 <__gxx_personality_sj0+0x494>
    cb00:	d8801917 	ldw	r2,100(sp)
    cb04:	1080020c 	andi	r2,r2,8
    cb08:	d8802015 	stw	r2,128(sp)
    cb0c:	1000a21e 	bne	r2,zero,cd98 <__gxx_personality_sj0+0x55c>
    cb10:	d8c01c17 	ldw	r3,112(sp)
    cb14:	1800b026 	beq	r3,zero,cdd8 <__gxx_personality_sj0+0x59c>
    cb18:	01c000f4 	movhi	r7,3
    cb1c:	39faf604 	addi	r7,r7,-5160
    cb20:	d9c01e15 	stw	r7,120(sp)
    cb24:	d8001d05 	stb	zero,116(sp)
    cb28:	d8c01817 	ldw	r3,96(sp)
    cb2c:	d8001515 	stw	zero,84(sp)
    cb30:	0009883a 	mov	r4,zero
    cb34:	19400003 	ldbu	r5,0(r3)
    cb38:	18800044 	addi	r2,r3,1
    cb3c:	d9c01517 	ldw	r7,84(sp)
    cb40:	28c01fcc 	andi	r3,r5,127
    cb44:	1906983a 	sll	r3,r3,r4
    cb48:	29803fcc 	andi	r6,r5,255
    cb4c:	3180201c 	xori	r6,r6,128
    cb50:	38ceb03a 	or	r7,r7,r3
    cb54:	d8801715 	stw	r2,92(sp)
    cb58:	31bfe004 	addi	r6,r6,-128
    cb5c:	d9c01515 	stw	r7,84(sp)
    cb60:	210001c4 	addi	r4,r4,7
    cb64:	1007883a 	mov	r3,r2
    cb68:	303ff216 	blt	r6,zero,cb34 <__alt_data_end+0xfc00cb34>
    cb6c:	00c007c4 	movi	r3,31
    cb70:	19000836 	bltu	r3,r4,cb94 <__gxx_personality_sj0+0x358>
    cb74:	2940100c 	andi	r5,r5,64
    cb78:	28000626 	beq	r5,zero,cb94 <__gxx_personality_sj0+0x358>
    cb7c:	01c00044 	movi	r7,1
    cb80:	3908983a 	sll	r4,r7,r4
    cb84:	d8c01517 	ldw	r3,84(sp)
    cb88:	0109c83a 	sub	r4,zero,r4
    cb8c:	1906b03a 	or	r3,r3,r4
    cb90:	d8c01515 	stw	r3,84(sp)
    cb94:	d8001615 	stw	zero,88(sp)
    cb98:	0009883a 	mov	r4,zero
    cb9c:	11400003 	ldbu	r5,0(r2)
    cba0:	d9c01617 	ldw	r7,88(sp)
    cba4:	10800044 	addi	r2,r2,1
    cba8:	28c01fcc 	andi	r3,r5,127
    cbac:	1906983a 	sll	r3,r3,r4
    cbb0:	29803fcc 	andi	r6,r5,255
    cbb4:	3180201c 	xori	r6,r6,128
    cbb8:	38ceb03a 	or	r7,r7,r3
    cbbc:	31bfe004 	addi	r6,r6,-128
    cbc0:	d9c01615 	stw	r7,88(sp)
    cbc4:	210001c4 	addi	r4,r4,7
    cbc8:	303ff416 	blt	r6,zero,cb9c <__alt_data_end+0xfc00cb9c>
    cbcc:	008007c4 	movi	r2,31
    cbd0:	11000736 	bltu	r2,r4,cbf0 <__gxx_personality_sj0+0x3b4>
    cbd4:	2940100c 	andi	r5,r5,64
    cbd8:	28000526 	beq	r5,zero,cbf0 <__gxx_personality_sj0+0x3b4>
    cbdc:	00c00044 	movi	r3,1
    cbe0:	1908983a 	sll	r4,r3,r4
    cbe4:	0109c83a 	sub	r4,zero,r4
    cbe8:	390eb03a 	or	r7,r7,r4
    cbec:	d9c01615 	stw	r7,88(sp)
    cbf0:	d9001517 	ldw	r4,84(sp)
    cbf4:	20003c26 	beq	r4,zero,cce8 <__gxx_personality_sj0+0x4ac>
    cbf8:	01003e0e 	bge	zero,r4,ccf4 <__gxx_personality_sj0+0x4b8>
    cbfc:	01ffffc4 	movi	r7,-1
    cc00:	200b883a 	mov	r5,r4
    cc04:	d809883a 	mov	r4,sp
    cc08:	d9c00915 	stw	r7,36(sp)
    cc0c:	000c2cc0 	call	c2cc <_ZL15get_ttype_entryP16lsda_header_infom>
    cc10:	10005f26 	beq	r2,zero,cd90 <__gxx_personality_sj0+0x554>
    cc14:	d8c01e17 	ldw	r3,120(sp)
    cc18:	1800571e 	bne	r3,zero,cd78 <__gxx_personality_sj0+0x53c>
    cc1c:	d9001617 	ldw	r4,88(sp)
    cc20:	20002926 	beq	r4,zero,ccc8 <__gxx_personality_sj0+0x48c>
    cc24:	d9c01717 	ldw	r7,92(sp)
    cc28:	390f883a 	add	r7,r7,r4
    cc2c:	d9c01815 	stw	r7,96(sp)
    cc30:	003fbd06 	br	cb28 <__alt_data_end+0xfc00cb28>
    cc34:	d8c01f17 	ldw	r3,124(sp)
    cc38:	1800251e 	bne	r3,zero,ccd0 <__gxx_personality_sj0+0x494>
    cc3c:	01000204 	movi	r4,8
    cc40:	d9001515 	stw	r4,84(sp)
    cc44:	003f1806 	br	c8a8 <__alt_data_end+0xfc00c8a8>
    cc48:	d8801c17 	ldw	r2,112(sp)
    cc4c:	10000d26 	beq	r2,zero,cc84 <__gxx_personality_sj0+0x448>
    cc50:	00800184 	movi	r2,6
    cc54:	d8801515 	stw	r2,84(sp)
    cc58:	003f1306 	br	c8a8 <__alt_data_end+0xfc00c8a8>
    cc5c:	00800044 	movi	r2,1
    cc60:	18bf4d1e 	bne	r3,r2,c998 <__alt_data_end+0xfc00c998>
    cc64:	000bf940 	call	bf94 <_ZSt9terminatev>
    cc68:	d9001b17 	ldw	r4,108(sp)
    cc6c:	00800044 	movi	r2,1
    cc70:	113f4536 	bltu	r2,r4,c988 <__alt_data_end+0xfc00c988>
    cc74:	00800044 	movi	r2,1
    cc78:	18bf841e 	bne	r3,r2,ca8c <__alt_data_end+0xfc00ca8c>
    cc7c:	d9002317 	ldw	r4,140(sp)
    cc80:	000d6180 	call	d618 <__cxa_call_terminate>
    cc84:	d8c01b17 	ldw	r3,108(sp)
    cc88:	00800044 	movi	r2,1
    cc8c:	10fff036 	bltu	r2,r3,cc50 <__alt_data_end+0xfc00cc50>
    cc90:	d9002317 	ldw	r4,140(sp)
    cc94:	d8801817 	ldw	r2,96(sp)
    cc98:	d9c01517 	ldw	r7,84(sp)
    cc9c:	d8c01a17 	ldw	r3,104(sp)
    cca0:	20bffc15 	stw	r2,-16(r4)
    cca4:	d8800717 	ldw	r2,28(sp)
    cca8:	21fffb15 	stw	r7,-20(r4)
    ccac:	d9c01f17 	ldw	r7,124(sp)
    ccb0:	20bfff15 	stw	r2,-4(r4)
    ccb4:	00800184 	movi	r2,6
    ccb8:	20fffd15 	stw	r3,-12(r4)
    ccbc:	21fffe15 	stw	r7,-8(r4)
    ccc0:	d8801515 	stw	r2,84(sp)
    ccc4:	003ef806 	br	c8a8 <__alt_data_end+0xfc00c8a8>
    ccc8:	d8801d03 	ldbu	r2,116(sp)
    cccc:	103fdb26 	beq	r2,zero,cc3c <__alt_data_end+0xfc00cc3c>
    ccd0:	d8c01917 	ldw	r3,100(sp)
    ccd4:	1880004c 	andi	r2,r3,1
    ccd8:	103fd81e 	bne	r2,zero,cc3c <__alt_data_end+0xfc00cc3c>
    ccdc:	d8001515 	stw	zero,84(sp)
    cce0:	00c00084 	movi	r3,2
    cce4:	003f2306 	br	c974 <__alt_data_end+0xfc00c974>
    cce8:	00c00044 	movi	r3,1
    ccec:	d8c01d05 	stb	r3,116(sp)
    ccf0:	003fca06 	br	cc1c <__alt_data_end+0xfc00cc1c>
    ccf4:	d9001e17 	ldw	r4,120(sp)
    ccf8:	20000426 	beq	r4,zero,cd0c <__gxx_personality_sj0+0x4d0>
    ccfc:	d9c02017 	ldw	r7,128(sp)
    cd00:	3800021e 	bne	r7,zero,cd0c <__gxx_personality_sj0+0x4d0>
    cd04:	d8801c17 	ldw	r2,112(sp)
    cd08:	10002726 	beq	r2,zero,cda8 <__gxx_personality_sj0+0x56c>
    cd0c:	d8801517 	ldw	r2,84(sp)
    cd10:	000d883a 	mov	r6,zero
    cd14:	000b883a 	mov	r5,zero
    cd18:	0088303a 	nor	r4,zero,r2
    cd1c:	d8800317 	ldw	r2,12(sp)
    cd20:	1109883a 	add	r4,r2,r4
    cd24:	20800003 	ldbu	r2,0(r4)
    cd28:	21000044 	addi	r4,r4,1
    cd2c:	10c01fcc 	andi	r3,r2,127
    cd30:	1946983a 	sll	r3,r3,r5
    cd34:	10803fcc 	andi	r2,r2,255
    cd38:	1080201c 	xori	r2,r2,128
    cd3c:	10bfe004 	addi	r2,r2,-128
    cd40:	30ccb03a 	or	r6,r6,r3
    cd44:	294001c4 	addi	r5,r5,7
    cd48:	103ff616 	blt	r2,zero,cd24 <__alt_data_end+0xfc00cd24>
    cd4c:	3005003a 	cmpeq	r2,r6,zero
    cd50:	10803fcc 	andi	r2,r2,255
    cd54:	103fb126 	beq	r2,zero,cc1c <__alt_data_end+0xfc00cc1c>
    cd58:	d9c01917 	ldw	r7,100(sp)
    cd5c:	3880004c 	andi	r2,r7,1
    cd60:	103fb91e 	bne	r2,zero,cc48 <__alt_data_end+0xfc00cc48>
    cd64:	d8802017 	ldw	r2,128(sp)
    cd68:	10002d26 	beq	r2,zero,ce20 <__gxx_personality_sj0+0x5e4>
    cd6c:	00800044 	movi	r2,1
    cd70:	d8800915 	stw	r2,36(sp)
    cd74:	000bfbc0 	call	bfbc <_ZSt10unexpectedv>
    cd78:	d9800704 	addi	r6,sp,28
    cd7c:	180b883a 	mov	r5,r3
    cd80:	1009883a 	mov	r4,r2
    cd84:	000c4e00 	call	c4e0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    cd88:	10803fcc 	andi	r2,r2,255
    cd8c:	103fa326 	beq	r2,zero,cc1c <__alt_data_end+0xfc00cc1c>
    cd90:	00c000c4 	movi	r3,3
    cd94:	003ef406 	br	c968 <__alt_data_end+0xfc00c968>
    cd98:	010000f4 	movhi	r4,3
    cd9c:	213af404 	addi	r4,r4,-5168
    cda0:	d9001e15 	stw	r4,120(sp)
    cda4:	003f5f06 	br	cb24 <__alt_data_end+0xfc00cb24>
    cda8:	d9001b17 	ldw	r4,108(sp)
    cdac:	00c00044 	movi	r3,1
    cdb0:	193fd636 	bltu	r3,r4,cd0c <__alt_data_end+0xfc00cd0c>
    cdb4:	01ffffc4 	movi	r7,-1
    cdb8:	d9c00915 	stw	r7,36(sp)
    cdbc:	d9800717 	ldw	r6,28(sp)
    cdc0:	d9c01517 	ldw	r7,84(sp)
    cdc4:	d9401e17 	ldw	r5,120(sp)
    cdc8:	d809883a 	mov	r4,sp
    cdcc:	000c7940 	call	c794 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    cdd0:	1080005c 	xori	r2,r2,1
    cdd4:	003fde06 	br	cd50 <__alt_data_end+0xfc00cd50>
    cdd8:	d9001b17 	ldw	r4,108(sp)
    cddc:	00800044 	movi	r2,1
    cde0:	113f4d36 	bltu	r2,r4,cb18 <__alt_data_end+0xfc00cb18>
    cde4:	d9c02317 	ldw	r7,140(sp)
    cde8:	38800017 	ldw	r2,0(r7)
    cdec:	1080004c 	andi	r2,r2,1
    cdf0:	1000061e 	bne	r2,zero,ce0c <__gxx_personality_sj0+0x5d0>
    cdf4:	d8c02317 	ldw	r3,140(sp)
    cdf8:	18800504 	addi	r2,r3,20
    cdfc:	d8800715 	stw	r2,28(sp)
    ce00:	10bff017 	ldw	r2,-64(r2)
    ce04:	d8801e15 	stw	r2,120(sp)
    ce08:	003f4606 	br	cb24 <__alt_data_end+0xfc00cb24>
    ce0c:	38bff517 	ldw	r2,-44(r7)
    ce10:	003ffa06 	br	cdfc <__alt_data_end+0xfc00cdfc>
    ce14:	d9000a17 	ldw	r4,40(sp)
    ce18:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    ce1c:	003f9106 	br	cc64 <__alt_data_end+0xfc00cc64>
    ce20:	d9c01c17 	ldw	r7,112(sp)
    ce24:	383eda1e 	bne	r7,zero,c990 <__alt_data_end+0xfc00c990>
    ce28:	d8c01b17 	ldw	r3,108(sp)
    ce2c:	00800044 	movi	r2,1
    ce30:	10fed736 	bltu	r2,r3,c990 <__alt_data_end+0xfc00c990>
    ce34:	00c000c4 	movi	r3,3
    ce38:	003f8e06 	br	cc74 <__alt_data_end+0xfc00cc74>

0000ce3c <__cxa_call_unexpected>:
    ce3c:	00800074 	movhi	r2,1
    ce40:	deffe604 	addi	sp,sp,-104
    ce44:	10b20f04 	addi	r2,r2,-14276
    ce48:	d8800d15 	stw	r2,52(sp)
    ce4c:	008000b4 	movhi	r2,2
    ce50:	1092c304 	addi	r2,r2,19212
    ce54:	d8800e15 	stw	r2,56(sp)
    ce58:	d8800104 	addi	r2,sp,4
    ce5c:	d8800f15 	stw	r2,60(sp)
    ce60:	00800074 	movhi	r2,1
    ce64:	10b3b204 	addi	r2,r2,-12600
    ce68:	d9001415 	stw	r4,80(sp)
    ce6c:	d9000704 	addi	r4,sp,28
    ce70:	dfc01915 	stw	ra,100(sp)
    ce74:	d8801015 	stw	r2,64(sp)
    ce78:	df001815 	stw	fp,96(sp)
    ce7c:	dec01115 	stw	sp,68(sp)
    ce80:	000f0600 	call	f060 <_Unwind_SjLj_Register>
    ce84:	d9001417 	ldw	r4,80(sp)
    ce88:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    ce8c:	d8c01417 	ldw	r3,80(sp)
    ce90:	18bffe17 	ldw	r2,-8(r3)
    ce94:	193ff717 	ldw	r4,-36(r3)
    ce98:	18fffd17 	ldw	r3,-12(r3)
    ce9c:	d8800315 	stw	r2,12(sp)
    cea0:	d8c01615 	stw	r3,88(sp)
    cea4:	d8c01417 	ldw	r3,80(sp)
    cea8:	18fffb17 	ldw	r3,-20(r3)
    ceac:	d8c01515 	stw	r3,84(sp)
    ceb0:	d8c01417 	ldw	r3,80(sp)
    ceb4:	18fff817 	ldw	r3,-32(r3)
    ceb8:	d8c01415 	stw	r3,80(sp)
    cebc:	00c00044 	movi	r3,1
    cec0:	d8c00815 	stw	r3,32(sp)
    cec4:	000bfac0 	call	bfac <_ZN10__cxxabiv112__unexpectedEPFvvE>
    cec8:	d8c00917 	ldw	r3,36(sp)
    cecc:	d8800817 	ldw	r2,32(sp)
    ced0:	d8c01715 	stw	r3,92(sp)
    ced4:	10000a26 	beq	r2,zero,cf00 <__cxa_call_unexpected+0xc4>
    ced8:	10bfffc4 	addi	r2,r2,-1
    cedc:	10000126 	beq	r2,zero,cee4 <__cxa_call_unexpected+0xa8>
    cee0:	003b68fa 	trap	3
    cee4:	d8000815 	stw	zero,32(sp)
    cee8:	000d2800 	call	d280 <__cxa_end_catch>
    ceec:	000d2800 	call	d280 <__cxa_end_catch>
    cef0:	d9001717 	ldw	r4,92(sp)
    cef4:	00bfffc4 	movi	r2,-1
    cef8:	d8800815 	stw	r2,32(sp)
    cefc:	000f25c0 	call	f25c <_Unwind_SjLj_Resume>
    cf00:	d9001717 	ldw	r4,92(sp)
    cf04:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    cf08:	000d6700 	call	d670 <__cxa_get_globals_fast>
    cf0c:	10800017 	ldw	r2,0(r2)
    cf10:	10c00b17 	ldw	r3,44(r2)
    cf14:	18c0004c 	andi	r3,r3,1
    cf18:	18001e26 	beq	r3,zero,cf94 <__cxa_call_unexpected+0x158>
    cf1c:	10800017 	ldw	r2,0(r2)
    cf20:	d8801715 	stw	r2,92(sp)
    cf24:	d8801517 	ldw	r2,84(sp)
    cf28:	00802b0e 	bge	zero,r2,cfd8 <__cxa_call_unexpected+0x19c>
    cf2c:	d8c01717 	ldw	r3,92(sp)
    cf30:	d8800317 	ldw	r2,12(sp)
    cf34:	d9c01517 	ldw	r7,84(sp)
    cf38:	193ff017 	ldw	r4,-64(r3)
    cf3c:	d9801617 	ldw	r6,88(sp)
    cf40:	d8800015 	stw	r2,0(sp)
    cf44:	180b883a 	mov	r5,r3
    cf48:	00800084 	movi	r2,2
    cf4c:	d8800815 	stw	r2,32(sp)
    cf50:	000c5680 	call	c568 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf54:	10803fcc 	andi	r2,r2,255
    cf58:	10001e1e 	bne	r2,zero,cfd4 <__cxa_call_unexpected+0x198>
    cf5c:	d8800317 	ldw	r2,12(sp)
    cf60:	d9c01517 	ldw	r7,84(sp)
    cf64:	d9801617 	ldw	r6,88(sp)
    cf68:	010000f4 	movhi	r4,3
    cf6c:	d8800015 	stw	r2,0(sp)
    cf70:	212d8a04 	addi	r4,r4,-18904
    cf74:	00800084 	movi	r2,2
    cf78:	000b883a 	mov	r5,zero
    cf7c:	d8800815 	stw	r2,32(sp)
    cf80:	000c5680 	call	c568 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cf84:	10803fcc 	andi	r2,r2,255
    cf88:	1000051e 	bne	r2,zero,cfa0 <__cxa_call_unexpected+0x164>
    cf8c:	d9001417 	ldw	r4,80(sp)
    cf90:	000bed40 	call	bed4 <_ZN10__cxxabiv111__terminateEPFvvE>
    cf94:	10801004 	addi	r2,r2,64
    cf98:	d8801715 	stw	r2,92(sp)
    cf9c:	003fe106 	br	cf24 <__alt_data_end+0xfc00cf24>
    cfa0:	01000104 	movi	r4,4
    cfa4:	000d4b40 	call	d4b4 <__cxa_allocate_exception>
    cfa8:	00c000f4 	movhi	r3,3
    cfac:	18eda504 	addi	r3,r3,-18796
    cfb0:	01800074 	movhi	r6,1
    cfb4:	014000f4 	movhi	r5,3
    cfb8:	10c00015 	stw	r3,0(r2)
    cfbc:	31b5a304 	addi	r6,r6,-10612
    cfc0:	00c00084 	movi	r3,2
    cfc4:	296d8a04 	addi	r5,r5,-18904
    cfc8:	1009883a 	mov	r4,r2
    cfcc:	d8c00815 	stw	r3,32(sp)
    cfd0:	000d0b00 	call	d0b0 <__cxa_throw>
    cfd4:	000d1400 	call	d140 <__cxa_rethrow>
    cfd8:	d9401617 	ldw	r5,88(sp)
    cfdc:	00800084 	movi	r2,2
    cfe0:	d9800104 	addi	r6,sp,4
    cfe4:	0009883a 	mov	r4,zero
    cfe8:	d8800815 	stw	r2,32(sp)
    cfec:	000c3ac0 	call	c3ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    cff0:	d9801717 	ldw	r6,92(sp)
    cff4:	d9c01517 	ldw	r7,84(sp)
    cff8:	d9000104 	addi	r4,sp,4
    cffc:	317ff017 	ldw	r5,-64(r6)
    d000:	000c7940 	call	c794 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d004:	10803fcc 	andi	r2,r2,255
    d008:	1000171e 	bne	r2,zero,d068 <__cxa_call_unexpected+0x22c>
    d00c:	d9c01517 	ldw	r7,84(sp)
    d010:	014000f4 	movhi	r5,3
    d014:	00800084 	movi	r2,2
    d018:	296d8a04 	addi	r5,r5,-18904
    d01c:	000d883a 	mov	r6,zero
    d020:	d9000104 	addi	r4,sp,4
    d024:	d8800815 	stw	r2,32(sp)
    d028:	000c7940 	call	c794 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d02c:	10803fcc 	andi	r2,r2,255
    d030:	103fd626 	beq	r2,zero,cf8c <__alt_data_end+0xfc00cf8c>
    d034:	01000104 	movi	r4,4
    d038:	000d4b40 	call	d4b4 <__cxa_allocate_exception>
    d03c:	00c000f4 	movhi	r3,3
    d040:	18eda504 	addi	r3,r3,-18796
    d044:	01800074 	movhi	r6,1
    d048:	014000f4 	movhi	r5,3
    d04c:	10c00015 	stw	r3,0(r2)
    d050:	31b5a304 	addi	r6,r6,-10612
    d054:	00c00084 	movi	r3,2
    d058:	296d8a04 	addi	r5,r5,-18904
    d05c:	1009883a 	mov	r4,r2
    d060:	d8c00815 	stw	r3,32(sp)
    d064:	000d0b00 	call	d0b0 <__cxa_throw>
    d068:	000d1400 	call	d140 <__cxa_rethrow>

0000d06c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    d06c:	defffe04 	addi	sp,sp,-8
    d070:	dfc00115 	stw	ra,4(sp)
    d074:	dc000015 	stw	r16,0(sp)
    d078:	00800044 	movi	r2,1
    d07c:	11000a36 	bltu	r2,r4,d0a8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    d080:	28bff617 	ldw	r2,-40(r5)
    d084:	2c000504 	addi	r16,r5,20
    d088:	10000226 	beq	r2,zero,d094 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    d08c:	8009883a 	mov	r4,r16
    d090:	103ee83a 	callr	r2
    d094:	8009883a 	mov	r4,r16
    d098:	dfc00117 	ldw	ra,4(sp)
    d09c:	dc000017 	ldw	r16,0(sp)
    d0a0:	dec00204 	addi	sp,sp,8
    d0a4:	000d5141 	jmpi	d514 <__cxa_free_exception>
    d0a8:	293ff817 	ldw	r4,-32(r5)
    d0ac:	000bed40 	call	bed4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d0b0 <__cxa_throw>:
    d0b0:	defffb04 	addi	sp,sp,-20
    d0b4:	dfc00415 	stw	ra,16(sp)
    d0b8:	dcc00315 	stw	r19,12(sp)
    d0bc:	dc800215 	stw	r18,8(sp)
    d0c0:	2827883a 	mov	r19,r5
    d0c4:	3025883a 	mov	r18,r6
    d0c8:	dc400115 	stw	r17,4(sp)
    d0cc:	dc000015 	stw	r16,0(sp)
    d0d0:	2021883a 	mov	r16,r4
    d0d4:	000d67c0 	call	d67c <__cxa_get_globals>
    d0d8:	10c00117 	ldw	r3,4(r2)
    d0dc:	847ffb04 	addi	r17,r16,-20
    d0e0:	18c00044 	addi	r3,r3,1
    d0e4:	10c00115 	stw	r3,4(r2)
    d0e8:	00800044 	movi	r2,1
    d0ec:	80bfef15 	stw	r2,-68(r16)
    d0f0:	84fff015 	stw	r19,-64(r16)
    d0f4:	84bff115 	stw	r18,-60(r16)
    d0f8:	000c00c0 	call	c00c <_ZSt14get_unexpectedv>
    d0fc:	80bff215 	stw	r2,-56(r16)
    d100:	000bfe80 	call	bfe8 <_ZSt13get_terminatev>
    d104:	80bff315 	stw	r2,-52(r16)
    d108:	0090caf4 	movhi	r2,17195
    d10c:	108ac004 	addi	r2,r2,11008
    d110:	80bffb15 	stw	r2,-20(r16)
    d114:	0091d3b4 	movhi	r2,18254
    d118:	109550c4 	addi	r2,r2,21827
    d11c:	80bffc15 	stw	r2,-16(r16)
    d120:	00800074 	movhi	r2,1
    d124:	10b41b04 	addi	r2,r2,-12180
    d128:	8809883a 	mov	r4,r17
    d12c:	80bffd15 	stw	r2,-12(r16)
    d130:	000f1480 	call	f148 <_Unwind_SjLj_RaiseException>
    d134:	8809883a 	mov	r4,r17
    d138:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    d13c:	000bf940 	call	bf94 <_ZSt9terminatev>

0000d140 <__cxa_rethrow>:
    d140:	defffe04 	addi	sp,sp,-8
    d144:	dfc00115 	stw	ra,4(sp)
    d148:	dc000015 	stw	r16,0(sp)
    d14c:	000d67c0 	call	d67c <__cxa_get_globals>
    d150:	10c00117 	ldw	r3,4(r2)
    d154:	11000017 	ldw	r4,0(r2)
    d158:	18c00044 	addi	r3,r3,1
    d15c:	10c00115 	stw	r3,4(r2)
    d160:	20001126 	beq	r4,zero,d1a8 <__cxa_rethrow+0x68>
    d164:	21400b17 	ldw	r5,44(r4)
    d168:	01ef3574 	movhi	r7,48341
    d16c:	39f54004 	addi	r7,r7,-11008
    d170:	29cf883a 	add	r7,r5,r7
    d174:	20c00c17 	ldw	r3,48(r4)
    d178:	394d803a 	cmpltu	r6,r7,r5
    d17c:	016e2cb4 	movhi	r5,47282
    d180:	296aaf04 	addi	r5,r5,-21828
    d184:	1947883a 	add	r3,r3,r5
    d188:	30c7883a 	add	r3,r6,r3
    d18c:	18000726 	beq	r3,zero,d1ac <__cxa_rethrow+0x6c>
    d190:	10000015 	stw	zero,0(r2)
    d194:	24000b04 	addi	r16,r4,44
    d198:	8009883a 	mov	r4,r16
    d19c:	000f2a00 	call	f2a0 <_Unwind_SjLj_Resume_or_Rethrow>
    d1a0:	8009883a 	mov	r4,r16
    d1a4:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    d1a8:	000bf940 	call	bf94 <_ZSt9terminatev>
    d1ac:	00c00044 	movi	r3,1
    d1b0:	19fff736 	bltu	r3,r7,d190 <__alt_data_end+0xfc00d190>
    d1b4:	20800517 	ldw	r2,20(r4)
    d1b8:	0085c83a 	sub	r2,zero,r2
    d1bc:	20800515 	stw	r2,20(r4)
    d1c0:	003ff406 	br	d194 <__alt_data_end+0xfc00d194>

0000d1c4 <__cxa_get_exception_ptr>:
    d1c4:	20bfff17 	ldw	r2,-4(r4)
    d1c8:	f800283a 	ret

0000d1cc <__cxa_begin_catch>:
    d1cc:	defffe04 	addi	sp,sp,-8
    d1d0:	dc000015 	stw	r16,0(sp)
    d1d4:	dfc00115 	stw	ra,4(sp)
    d1d8:	2021883a 	mov	r16,r4
    d1dc:	000d67c0 	call	d67c <__cxa_get_globals>
    d1e0:	81000017 	ldw	r4,0(r16)
    d1e4:	80c00117 	ldw	r3,4(r16)
    d1e8:	01af3574 	movhi	r6,48341
    d1ec:	31b54004 	addi	r6,r6,-11008
    d1f0:	016e2cb4 	movhi	r5,47282
    d1f4:	296aaf04 	addi	r5,r5,-21828
    d1f8:	218d883a 	add	r6,r4,r6
    d1fc:	3109803a 	cmpltu	r4,r6,r4
    d200:	1947883a 	add	r3,r3,r5
    d204:	20c7883a 	add	r3,r4,r3
    d208:	817ff504 	addi	r5,r16,-44
    d20c:	11000017 	ldw	r4,0(r2)
    d210:	18000726 	beq	r3,zero,d230 <__cxa_begin_catch+0x64>
    d214:	2000191e 	bne	r4,zero,d27c <__cxa_begin_catch+0xb0>
    d218:	11400015 	stw	r5,0(r2)
    d21c:	0005883a 	mov	r2,zero
    d220:	dfc00117 	ldw	ra,4(sp)
    d224:	dc000017 	ldw	r16,0(sp)
    d228:	dec00204 	addi	sp,sp,8
    d22c:	f800283a 	ret
    d230:	01c00044 	movi	r7,1
    d234:	39bff736 	bltu	r7,r6,d214 <__alt_data_end+0xfc00d214>
    d238:	80fffa17 	ldw	r3,-24(r16)
    d23c:	18000d16 	blt	r3,zero,d274 <__cxa_begin_catch+0xa8>
    d240:	18c00044 	addi	r3,r3,1
    d244:	11800117 	ldw	r6,4(r2)
    d248:	80fffa15 	stw	r3,-24(r16)
    d24c:	30ffffc4 	addi	r3,r6,-1
    d250:	10c00115 	stw	r3,4(r2)
    d254:	21400226 	beq	r4,r5,d260 <__cxa_begin_catch+0x94>
    d258:	813ff915 	stw	r4,-28(r16)
    d25c:	11400015 	stw	r5,0(r2)
    d260:	80bfff17 	ldw	r2,-4(r16)
    d264:	dfc00117 	ldw	ra,4(sp)
    d268:	dc000017 	ldw	r16,0(sp)
    d26c:	dec00204 	addi	sp,sp,8
    d270:	f800283a 	ret
    d274:	38c7c83a 	sub	r3,r7,r3
    d278:	003ff206 	br	d244 <__alt_data_end+0xfc00d244>
    d27c:	000bf940 	call	bf94 <_ZSt9terminatev>

0000d280 <__cxa_end_catch>:
    d280:	deffff04 	addi	sp,sp,-4
    d284:	dfc00015 	stw	ra,0(sp)
    d288:	000d6700 	call	d670 <__cxa_get_globals_fast>
    d28c:	11000017 	ldw	r4,0(r2)
    d290:	20001426 	beq	r4,zero,d2e4 <__cxa_end_catch+0x64>
    d294:	21400b17 	ldw	r5,44(r4)
    d298:	01ef3574 	movhi	r7,48341
    d29c:	39f54004 	addi	r7,r7,-11008
    d2a0:	29cf883a 	add	r7,r5,r7
    d2a4:	20c00c17 	ldw	r3,48(r4)
    d2a8:	394d803a 	cmpltu	r6,r7,r5
    d2ac:	016e2cb4 	movhi	r5,47282
    d2b0:	296aaf04 	addi	r5,r5,-21828
    d2b4:	1947883a 	add	r3,r3,r5
    d2b8:	30c7883a 	add	r3,r6,r3
    d2bc:	18000c1e 	bne	r3,zero,d2f0 <__cxa_end_catch+0x70>
    d2c0:	00c00044 	movi	r3,1
    d2c4:	19c00a36 	bltu	r3,r7,d2f0 <__cxa_end_catch+0x70>
    d2c8:	20c00517 	ldw	r3,20(r4)
    d2cc:	18000d16 	blt	r3,zero,d304 <__cxa_end_catch+0x84>
    d2d0:	18ffffc4 	addi	r3,r3,-1
    d2d4:	18001026 	beq	r3,zero,d318 <__cxa_end_catch+0x98>
    d2d8:	00bfffc4 	movi	r2,-1
    d2dc:	18801426 	beq	r3,r2,d330 <__cxa_end_catch+0xb0>
    d2e0:	20c00515 	stw	r3,20(r4)
    d2e4:	dfc00017 	ldw	ra,0(sp)
    d2e8:	dec00104 	addi	sp,sp,4
    d2ec:	f800283a 	ret
    d2f0:	21000b04 	addi	r4,r4,44
    d2f4:	10000015 	stw	zero,0(r2)
    d2f8:	dfc00017 	ldw	ra,0(sp)
    d2fc:	dec00104 	addi	sp,sp,4
    d300:	000f2ec1 	jmpi	f2ec <_Unwind_DeleteException>
    d304:	18c00044 	addi	r3,r3,1
    d308:	183ff51e 	bne	r3,zero,d2e0 <__alt_data_end+0xfc00d2e0>
    d30c:	21400417 	ldw	r5,16(r4)
    d310:	11400015 	stw	r5,0(r2)
    d314:	003ff206 	br	d2e0 <__alt_data_end+0xfc00d2e0>
    d318:	20c00417 	ldw	r3,16(r4)
    d31c:	21000b04 	addi	r4,r4,44
    d320:	10c00015 	stw	r3,0(r2)
    d324:	dfc00017 	ldw	ra,0(sp)
    d328:	dec00104 	addi	sp,sp,4
    d32c:	000f2ec1 	jmpi	f2ec <_Unwind_DeleteException>
    d330:	000bf940 	call	bf94 <_ZSt9terminatev>

0000d334 <_ZSt18uncaught_exceptionv>:
    d334:	deffff04 	addi	sp,sp,-4
    d338:	dfc00015 	stw	ra,0(sp)
    d33c:	000d67c0 	call	d67c <__cxa_get_globals>
    d340:	10800117 	ldw	r2,4(r2)
    d344:	1004c03a 	cmpne	r2,r2,zero
    d348:	dfc00017 	ldw	ra,0(sp)
    d34c:	dec00104 	addi	sp,sp,4
    d350:	f800283a 	ret

0000d354 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    d354:	018000f4 	movhi	r6,3
    d358:	3187e704 	addi	r6,r6,8092
    d35c:	31400117 	ldw	r5,4(r6)
    d360:	223fff04 	addi	r8,r4,-4
    d364:	227fff17 	ldw	r9,-4(r4)
    d368:	28001326 	beq	r5,zero,d3b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    d36c:	424f883a 	add	r7,r8,r9
    d370:	29c01426 	beq	r5,r7,d3c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    d374:	28c00117 	ldw	r3,4(r5)
    d378:	18001c26 	beq	r3,zero,d3ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    d37c:	38c00336 	bltu	r7,r3,d38c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    d380:	00001e06 	br	d3fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    d384:	3880052e 	bgeu	r7,r2,d39c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    d388:	1007883a 	mov	r3,r2
    d38c:	18800117 	ldw	r2,4(r3)
    d390:	29800104 	addi	r6,r5,4
    d394:	180b883a 	mov	r5,r3
    d398:	103ffa1e 	bne	r2,zero,d384 <__alt_data_end+0xfc00d384>
    d39c:	19400017 	ldw	r5,0(r3)
    d3a0:	194f883a 	add	r7,r3,r5
    d3a4:	41c00e26 	beq	r8,r7,d3e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    d3a8:	20800015 	stw	r2,0(r4)
    d3ac:	30800017 	ldw	r2,0(r6)
    d3b0:	12000115 	stw	r8,4(r2)
    d3b4:	f800283a 	ret
    d3b8:	20000015 	stw	zero,0(r4)
    d3bc:	32000115 	stw	r8,4(r6)
    d3c0:	f800283a 	ret
    d3c4:	28c00017 	ldw	r3,0(r5)
    d3c8:	28800117 	ldw	r2,4(r5)
    d3cc:	1a53883a 	add	r9,r3,r9
    d3d0:	227fff15 	stw	r9,-4(r4)
    d3d4:	20800015 	stw	r2,0(r4)
    d3d8:	32000115 	stw	r8,4(r6)
    d3dc:	f800283a 	ret
    d3e0:	494b883a 	add	r5,r9,r5
    d3e4:	19400015 	stw	r5,0(r3)
    d3e8:	f800283a 	ret
    d3ec:	0005883a 	mov	r2,zero
    d3f0:	2807883a 	mov	r3,r5
    d3f4:	31800104 	addi	r6,r6,4
    d3f8:	003fe806 	br	d39c <__alt_data_end+0xfc00d39c>
    d3fc:	1805883a 	mov	r2,r3
    d400:	31800104 	addi	r6,r6,4
    d404:	2807883a 	mov	r3,r5
    d408:	003fe406 	br	d39c <__alt_data_end+0xfc00d39c>

0000d40c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    d40c:	20800104 	addi	r2,r4,4
    d410:	00c001c4 	movi	r3,7
    d414:	1880112e 	bgeu	r3,r2,d45c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    d418:	20c9883a 	add	r4,r4,r3
    d41c:	00bfff04 	movi	r2,-4
    d420:	208a703a 	and	r5,r4,r2
    d424:	018000f4 	movhi	r6,3
    d428:	3187e704 	addi	r6,r6,8092
    d42c:	30c00117 	ldw	r3,4(r6)
    d430:	18000826 	beq	r3,zero,d454 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    d434:	19000017 	ldw	r4,0(r3)
    d438:	21400436 	bltu	r4,r5,d44c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    d43c:	00001a06 	br	d4a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    d440:	11000017 	ldw	r4,0(r2)
    d444:	2140072e 	bgeu	r4,r5,d464 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    d448:	1007883a 	mov	r3,r2
    d44c:	18800117 	ldw	r2,4(r3)
    d450:	103ffb1e 	bne	r2,zero,d440 <__alt_data_end+0xfc00d440>
    d454:	0005883a 	mov	r2,zero
    d458:	f800283a 	ret
    d45c:	01400204 	movi	r5,8
    d460:	003ff006 	br	d424 <__alt_data_end+0xfc00d424>
    d464:	18c00104 	addi	r3,r3,4
    d468:	2149c83a 	sub	r4,r4,r5
    d46c:	018001c4 	movi	r6,7
    d470:	3100092e 	bgeu	r6,r4,d498 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    d474:	11c00117 	ldw	r7,4(r2)
    d478:	114d883a 	add	r6,r2,r5
    d47c:	31000015 	stw	r4,0(r6)
    d480:	31c00115 	stw	r7,4(r6)
    d484:	18800017 	ldw	r2,0(r3)
    d488:	11400015 	stw	r5,0(r2)
    d48c:	19800015 	stw	r6,0(r3)
    d490:	10800104 	addi	r2,r2,4
    d494:	f800283a 	ret
    d498:	11000117 	ldw	r4,4(r2)
    d49c:	10800104 	addi	r2,r2,4
    d4a0:	19000015 	stw	r4,0(r3)
    d4a4:	f800283a 	ret
    d4a8:	1805883a 	mov	r2,r3
    d4ac:	30c00104 	addi	r3,r6,4
    d4b0:	003fed06 	br	d468 <__alt_data_end+0xfc00d468>

0000d4b4 <__cxa_allocate_exception>:
    d4b4:	defffd04 	addi	sp,sp,-12
    d4b8:	dc400115 	stw	r17,4(sp)
    d4bc:	24401104 	addi	r17,r4,68
    d4c0:	8809883a 	mov	r4,r17
    d4c4:	dc000015 	stw	r16,0(sp)
    d4c8:	dfc00215 	stw	ra,8(sp)
    d4cc:	000f4400 	call	f440 <malloc>
    d4d0:	1021883a 	mov	r16,r2
    d4d4:	10000a26 	beq	r2,zero,d500 <__cxa_allocate_exception+0x4c>
    d4d8:	01801104 	movi	r6,68
    d4dc:	000b883a 	mov	r5,zero
    d4e0:	8009883a 	mov	r4,r16
    d4e4:	000fdbc0 	call	fdbc <memset>
    d4e8:	80801104 	addi	r2,r16,68
    d4ec:	dfc00217 	ldw	ra,8(sp)
    d4f0:	dc400117 	ldw	r17,4(sp)
    d4f4:	dc000017 	ldw	r16,0(sp)
    d4f8:	dec00304 	addi	sp,sp,12
    d4fc:	f800283a 	ret
    d500:	8809883a 	mov	r4,r17
    d504:	000d40c0 	call	d40c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d508:	1021883a 	mov	r16,r2
    d50c:	103ff21e 	bne	r2,zero,d4d8 <__alt_data_end+0xfc00d4d8>
    d510:	000bf940 	call	bf94 <_ZSt9terminatev>

0000d514 <__cxa_free_exception>:
    d514:	00c000f4 	movhi	r3,3
    d518:	18c7e704 	addi	r3,r3,8092
    d51c:	18800217 	ldw	r2,8(r3)
    d520:	213fef04 	addi	r4,r4,-68
    d524:	1100042e 	bgeu	r2,r4,d538 <__cxa_free_exception+0x24>
    d528:	18c00317 	ldw	r3,12(r3)
    d52c:	10c5883a 	add	r2,r2,r3
    d530:	2080012e 	bgeu	r4,r2,d538 <__cxa_free_exception+0x24>
    d534:	000d3541 	jmpi	d354 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d538:	000f4541 	jmpi	f454 <free>

0000d53c <__cxa_allocate_dependent_exception>:
    d53c:	defffe04 	addi	sp,sp,-8
    d540:	01001004 	movi	r4,64
    d544:	dc000015 	stw	r16,0(sp)
    d548:	dfc00115 	stw	ra,4(sp)
    d54c:	000f4400 	call	f440 <malloc>
    d550:	1021883a 	mov	r16,r2
    d554:	10000926 	beq	r2,zero,d57c <__cxa_allocate_dependent_exception+0x40>
    d558:	01801004 	movi	r6,64
    d55c:	000b883a 	mov	r5,zero
    d560:	8009883a 	mov	r4,r16
    d564:	000fdbc0 	call	fdbc <memset>
    d568:	8005883a 	mov	r2,r16
    d56c:	dfc00117 	ldw	ra,4(sp)
    d570:	dc000017 	ldw	r16,0(sp)
    d574:	dec00204 	addi	sp,sp,8
    d578:	f800283a 	ret
    d57c:	01001004 	movi	r4,64
    d580:	000d40c0 	call	d40c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d584:	1021883a 	mov	r16,r2
    d588:	103ff31e 	bne	r2,zero,d558 <__alt_data_end+0xfc00d558>
    d58c:	000bf940 	call	bf94 <_ZSt9terminatev>

0000d590 <__cxa_free_dependent_exception>:
    d590:	014000f4 	movhi	r5,3
    d594:	2947e704 	addi	r5,r5,8092
    d598:	28c00217 	ldw	r3,8(r5)
    d59c:	2005883a 	mov	r2,r4
    d5a0:	1900042e 	bgeu	r3,r4,d5b4 <__cxa_free_dependent_exception+0x24>
    d5a4:	29400317 	ldw	r5,12(r5)
    d5a8:	1947883a 	add	r3,r3,r5
    d5ac:	20c0012e 	bgeu	r4,r3,d5b4 <__cxa_free_dependent_exception+0x24>
    d5b0:	000d3541 	jmpi	d354 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d5b4:	1009883a 	mov	r4,r2
    d5b8:	000f4541 	jmpi	f454 <free>

0000d5bc <_GLOBAL__sub_I___cxa_allocate_exception>:
    d5bc:	defffd04 	addi	sp,sp,-12
    d5c0:	dc400115 	stw	r17,4(sp)
    d5c4:	dc000015 	stw	r16,0(sp)
    d5c8:	04424004 	movi	r17,2304
    d5cc:	040000f4 	movhi	r16,3
    d5d0:	8407e704 	addi	r16,r16,8092
    d5d4:	8809883a 	mov	r4,r17
    d5d8:	dfc00215 	stw	ra,8(sp)
    d5dc:	84400315 	stw	r17,12(r16)
    d5e0:	000f4400 	call	f440 <malloc>
    d5e4:	80800215 	stw	r2,8(r16)
    d5e8:	10000826 	beq	r2,zero,d60c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    d5ec:	80800115 	stw	r2,4(r16)
    d5f0:	14400015 	stw	r17,0(r2)
    d5f4:	10000115 	stw	zero,4(r2)
    d5f8:	dfc00217 	ldw	ra,8(sp)
    d5fc:	dc400117 	ldw	r17,4(sp)
    d600:	dc000017 	ldw	r16,0(sp)
    d604:	dec00304 	addi	sp,sp,12
    d608:	f800283a 	ret
    d60c:	80000315 	stw	zero,12(r16)
    d610:	80000115 	stw	zero,4(r16)
    d614:	003ff806 	br	d5f8 <__alt_data_end+0xfc00d5f8>

0000d618 <__cxa_call_terminate>:
    d618:	defffe04 	addi	sp,sp,-8
    d61c:	dfc00115 	stw	ra,4(sp)
    d620:	dc000015 	stw	r16,0(sp)
    d624:	20000d26 	beq	r4,zero,d65c <__cxa_call_terminate+0x44>
    d628:	2021883a 	mov	r16,r4
    d62c:	000d1cc0 	call	d1cc <__cxa_begin_catch>
    d630:	80c00017 	ldw	r3,0(r16)
    d634:	016f3574 	movhi	r5,48341
    d638:	29754004 	addi	r5,r5,-11008
    d63c:	194b883a 	add	r5,r3,r5
    d640:	80800117 	ldw	r2,4(r16)
    d644:	28c9803a 	cmpltu	r4,r5,r3
    d648:	00ee2cb4 	movhi	r3,47282
    d64c:	18eaaf04 	addi	r3,r3,-21828
    d650:	10c5883a 	add	r2,r2,r3
    d654:	2085883a 	add	r2,r4,r2
    d658:	10000126 	beq	r2,zero,d660 <__cxa_call_terminate+0x48>
    d65c:	000bf940 	call	bf94 <_ZSt9terminatev>
    d660:	00800044 	movi	r2,1
    d664:	117ffd36 	bltu	r2,r5,d65c <__alt_data_end+0xfc00d65c>
    d668:	813ff817 	ldw	r4,-32(r16)
    d66c:	000bed40 	call	bed4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d670 <__cxa_get_globals_fast>:
    d670:	008000f4 	movhi	r2,3
    d674:	10878e04 	addi	r2,r2,7736
    d678:	f800283a 	ret

0000d67c <__cxa_get_globals>:
    d67c:	008000f4 	movhi	r2,3
    d680:	10878e04 	addi	r2,r2,7736
    d684:	f800283a 	ret

0000d688 <_ZNSt9exceptionD1Ev>:
    d688:	f800283a 	ret

0000d68c <_ZNSt13bad_exceptionD1Ev>:
    d68c:	f800283a 	ret

0000d690 <_ZNKSt9exception4whatEv>:
    d690:	008000f4 	movhi	r2,3
    d694:	10ad7804 	addi	r2,r2,-18976
    d698:	f800283a 	ret

0000d69c <_ZNKSt13bad_exception4whatEv>:
    d69c:	008000f4 	movhi	r2,3
    d6a0:	10ad7c04 	addi	r2,r2,-18960
    d6a4:	f800283a 	ret

0000d6a8 <_ZNSt9exceptionD0Ev>:
    d6a8:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000d6ac <_ZNSt13bad_exceptionD0Ev>:
    d6ac:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000d6b0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    d6b0:	f800283a 	ret

0000d6b4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    d6b4:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000d6b8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    d6b8:	f800283a 	ret

0000d6bc <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    d6bc:	000bbc81 	jmpi	bbc8 <_ZdlPv>

0000d6c0 <__fixunssfsi>:
    d6c0:	defffd04 	addi	sp,sp,-12
    d6c4:	dc000015 	stw	r16,0(sp)
    d6c8:	0413c034 	movhi	r16,20224
    d6cc:	800b883a 	mov	r5,r16
    d6d0:	dc400115 	stw	r17,4(sp)
    d6d4:	dfc00215 	stw	ra,8(sp)
    d6d8:	2023883a 	mov	r17,r4
    d6dc:	000e2040 	call	e204 <__gesf2>
    d6e0:	1000070e 	bge	r2,zero,d700 <__fixunssfsi+0x40>
    d6e4:	8809883a 	mov	r4,r17
    d6e8:	000ebd40 	call	ebd4 <__fixsfsi>
    d6ec:	dfc00217 	ldw	ra,8(sp)
    d6f0:	dc400117 	ldw	r17,4(sp)
    d6f4:	dc000017 	ldw	r16,0(sp)
    d6f8:	dec00304 	addi	sp,sp,12
    d6fc:	f800283a 	ret
    d700:	800b883a 	mov	r5,r16
    d704:	8809883a 	mov	r4,r17
    d708:	000e6f00 	call	e6f0 <__subsf3>
    d70c:	1009883a 	mov	r4,r2
    d710:	000ebd40 	call	ebd4 <__fixsfsi>
    d714:	00e00034 	movhi	r3,32768
    d718:	10c5883a 	add	r2,r2,r3
    d71c:	003ff306 	br	d6ec <__alt_data_end+0xfc00d6ec>

0000d720 <__divsi3>:
    d720:	20001b16 	blt	r4,zero,d790 <__divsi3+0x70>
    d724:	000f883a 	mov	r7,zero
    d728:	28001616 	blt	r5,zero,d784 <__divsi3+0x64>
    d72c:	200d883a 	mov	r6,r4
    d730:	29001a2e 	bgeu	r5,r4,d79c <__divsi3+0x7c>
    d734:	00800804 	movi	r2,32
    d738:	00c00044 	movi	r3,1
    d73c:	00000106 	br	d744 <__divsi3+0x24>
    d740:	10000d26 	beq	r2,zero,d778 <__divsi3+0x58>
    d744:	294b883a 	add	r5,r5,r5
    d748:	10bfffc4 	addi	r2,r2,-1
    d74c:	18c7883a 	add	r3,r3,r3
    d750:	293ffb36 	bltu	r5,r4,d740 <__alt_data_end+0xfc00d740>
    d754:	0005883a 	mov	r2,zero
    d758:	18000726 	beq	r3,zero,d778 <__divsi3+0x58>
    d75c:	0005883a 	mov	r2,zero
    d760:	31400236 	bltu	r6,r5,d76c <__divsi3+0x4c>
    d764:	314dc83a 	sub	r6,r6,r5
    d768:	10c4b03a 	or	r2,r2,r3
    d76c:	1806d07a 	srli	r3,r3,1
    d770:	280ad07a 	srli	r5,r5,1
    d774:	183ffa1e 	bne	r3,zero,d760 <__alt_data_end+0xfc00d760>
    d778:	38000126 	beq	r7,zero,d780 <__divsi3+0x60>
    d77c:	0085c83a 	sub	r2,zero,r2
    d780:	f800283a 	ret
    d784:	014bc83a 	sub	r5,zero,r5
    d788:	39c0005c 	xori	r7,r7,1
    d78c:	003fe706 	br	d72c <__alt_data_end+0xfc00d72c>
    d790:	0109c83a 	sub	r4,zero,r4
    d794:	01c00044 	movi	r7,1
    d798:	003fe306 	br	d728 <__alt_data_end+0xfc00d728>
    d79c:	00c00044 	movi	r3,1
    d7a0:	003fee06 	br	d75c <__alt_data_end+0xfc00d75c>

0000d7a4 <__modsi3>:
    d7a4:	20001716 	blt	r4,zero,d804 <__modsi3+0x60>
    d7a8:	000f883a 	mov	r7,zero
    d7ac:	2005883a 	mov	r2,r4
    d7b0:	28001216 	blt	r5,zero,d7fc <__modsi3+0x58>
    d7b4:	2900162e 	bgeu	r5,r4,d810 <__modsi3+0x6c>
    d7b8:	01800804 	movi	r6,32
    d7bc:	00c00044 	movi	r3,1
    d7c0:	00000106 	br	d7c8 <__modsi3+0x24>
    d7c4:	30000a26 	beq	r6,zero,d7f0 <__modsi3+0x4c>
    d7c8:	294b883a 	add	r5,r5,r5
    d7cc:	31bfffc4 	addi	r6,r6,-1
    d7d0:	18c7883a 	add	r3,r3,r3
    d7d4:	293ffb36 	bltu	r5,r4,d7c4 <__alt_data_end+0xfc00d7c4>
    d7d8:	18000526 	beq	r3,zero,d7f0 <__modsi3+0x4c>
    d7dc:	1806d07a 	srli	r3,r3,1
    d7e0:	11400136 	bltu	r2,r5,d7e8 <__modsi3+0x44>
    d7e4:	1145c83a 	sub	r2,r2,r5
    d7e8:	280ad07a 	srli	r5,r5,1
    d7ec:	183ffb1e 	bne	r3,zero,d7dc <__alt_data_end+0xfc00d7dc>
    d7f0:	38000126 	beq	r7,zero,d7f8 <__modsi3+0x54>
    d7f4:	0085c83a 	sub	r2,zero,r2
    d7f8:	f800283a 	ret
    d7fc:	014bc83a 	sub	r5,zero,r5
    d800:	003fec06 	br	d7b4 <__alt_data_end+0xfc00d7b4>
    d804:	0109c83a 	sub	r4,zero,r4
    d808:	01c00044 	movi	r7,1
    d80c:	003fe706 	br	d7ac <__alt_data_end+0xfc00d7ac>
    d810:	00c00044 	movi	r3,1
    d814:	003ff106 	br	d7dc <__alt_data_end+0xfc00d7dc>

0000d818 <__udivsi3>:
    d818:	200d883a 	mov	r6,r4
    d81c:	2900152e 	bgeu	r5,r4,d874 <__udivsi3+0x5c>
    d820:	28001416 	blt	r5,zero,d874 <__udivsi3+0x5c>
    d824:	00800804 	movi	r2,32
    d828:	00c00044 	movi	r3,1
    d82c:	00000206 	br	d838 <__udivsi3+0x20>
    d830:	10000e26 	beq	r2,zero,d86c <__udivsi3+0x54>
    d834:	28000516 	blt	r5,zero,d84c <__udivsi3+0x34>
    d838:	294b883a 	add	r5,r5,r5
    d83c:	10bfffc4 	addi	r2,r2,-1
    d840:	18c7883a 	add	r3,r3,r3
    d844:	293ffa36 	bltu	r5,r4,d830 <__alt_data_end+0xfc00d830>
    d848:	18000826 	beq	r3,zero,d86c <__udivsi3+0x54>
    d84c:	0005883a 	mov	r2,zero
    d850:	31400236 	bltu	r6,r5,d85c <__udivsi3+0x44>
    d854:	314dc83a 	sub	r6,r6,r5
    d858:	10c4b03a 	or	r2,r2,r3
    d85c:	1806d07a 	srli	r3,r3,1
    d860:	280ad07a 	srli	r5,r5,1
    d864:	183ffa1e 	bne	r3,zero,d850 <__alt_data_end+0xfc00d850>
    d868:	f800283a 	ret
    d86c:	0005883a 	mov	r2,zero
    d870:	f800283a 	ret
    d874:	00c00044 	movi	r3,1
    d878:	003ff406 	br	d84c <__alt_data_end+0xfc00d84c>

0000d87c <__umodsi3>:
    d87c:	2005883a 	mov	r2,r4
    d880:	2900122e 	bgeu	r5,r4,d8cc <__umodsi3+0x50>
    d884:	28001116 	blt	r5,zero,d8cc <__umodsi3+0x50>
    d888:	01800804 	movi	r6,32
    d88c:	00c00044 	movi	r3,1
    d890:	00000206 	br	d89c <__umodsi3+0x20>
    d894:	30000c26 	beq	r6,zero,d8c8 <__umodsi3+0x4c>
    d898:	28000516 	blt	r5,zero,d8b0 <__umodsi3+0x34>
    d89c:	294b883a 	add	r5,r5,r5
    d8a0:	31bfffc4 	addi	r6,r6,-1
    d8a4:	18c7883a 	add	r3,r3,r3
    d8a8:	293ffa36 	bltu	r5,r4,d894 <__alt_data_end+0xfc00d894>
    d8ac:	18000626 	beq	r3,zero,d8c8 <__umodsi3+0x4c>
    d8b0:	1806d07a 	srli	r3,r3,1
    d8b4:	11400136 	bltu	r2,r5,d8bc <__umodsi3+0x40>
    d8b8:	1145c83a 	sub	r2,r2,r5
    d8bc:	280ad07a 	srli	r5,r5,1
    d8c0:	183ffb1e 	bne	r3,zero,d8b0 <__alt_data_end+0xfc00d8b0>
    d8c4:	f800283a 	ret
    d8c8:	f800283a 	ret
    d8cc:	00c00044 	movi	r3,1
    d8d0:	003ff706 	br	d8b0 <__alt_data_end+0xfc00d8b0>

0000d8d4 <__mulsi3>:
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	20000726 	beq	r4,zero,d8f8 <__mulsi3+0x24>
    d8dc:	20c0004c 	andi	r3,r4,1
    d8e0:	2008d07a 	srli	r4,r4,1
    d8e4:	18000126 	beq	r3,zero,d8ec <__mulsi3+0x18>
    d8e8:	1145883a 	add	r2,r2,r5
    d8ec:	294b883a 	add	r5,r5,r5
    d8f0:	203ffa1e 	bne	r4,zero,d8dc <__alt_data_end+0xfc00d8dc>
    d8f4:	f800283a 	ret
    d8f8:	f800283a 	ret

0000d8fc <__addsf3>:
    d8fc:	defffc04 	addi	sp,sp,-16
    d900:	2004d7fa 	srli	r2,r4,31
    d904:	280cd5fa 	srli	r6,r5,23
    d908:	dc000015 	stw	r16,0(sp)
    d90c:	00c02034 	movhi	r3,128
    d910:	2020d5fa 	srli	r16,r4,23
    d914:	280ed7fa 	srli	r7,r5,31
    d918:	18ffffc4 	addi	r3,r3,-1
    d91c:	dc400115 	stw	r17,4(sp)
    d920:	1908703a 	and	r4,r3,r4
    d924:	194a703a 	and	r5,r3,r5
    d928:	dfc00315 	stw	ra,12(sp)
    d92c:	dc800215 	stw	r18,8(sp)
    d930:	14403fcc 	andi	r17,r2,255
    d934:	84003fcc 	andi	r16,r16,255
    d938:	200890fa 	slli	r4,r4,3
    d93c:	31803fcc 	andi	r6,r6,255
    d940:	280a90fa 	slli	r5,r5,3
    d944:	89c05026 	beq	r17,r7,da88 <__addsf3+0x18c>
    d948:	8185c83a 	sub	r2,r16,r6
    d94c:	00807a0e 	bge	zero,r2,db38 <__addsf3+0x23c>
    d950:	30001e1e 	bne	r6,zero,d9cc <__addsf3+0xd0>
    d954:	28006d1e 	bne	r5,zero,db0c <__addsf3+0x210>
    d958:	208001cc 	andi	r2,r4,7
    d95c:	10000426 	beq	r2,zero,d970 <__addsf3+0x74>
    d960:	208003cc 	andi	r2,r4,15
    d964:	00c00104 	movi	r3,4
    d968:	10c00126 	beq	r2,r3,d970 <__addsf3+0x74>
    d96c:	20c9883a 	add	r4,r4,r3
    d970:	2081002c 	andhi	r2,r4,1024
    d974:	10003926 	beq	r2,zero,da5c <__addsf3+0x160>
    d978:	84000044 	addi	r16,r16,1
    d97c:	00803fc4 	movi	r2,255
    d980:	80807826 	beq	r16,r2,db64 <__addsf3+0x268>
    d984:	200891ba 	slli	r4,r4,6
    d988:	8805883a 	mov	r2,r17
    d98c:	2008d27a 	srli	r4,r4,9
    d990:	84003fcc 	andi	r16,r16,255
    d994:	800695fa 	slli	r3,r16,23
    d998:	10803fcc 	andi	r2,r2,255
    d99c:	04002034 	movhi	r16,128
    d9a0:	843fffc4 	addi	r16,r16,-1
    d9a4:	100497fa 	slli	r2,r2,31
    d9a8:	2408703a 	and	r4,r4,r16
    d9ac:	20e0b03a 	or	r16,r4,r3
    d9b0:	8084b03a 	or	r2,r16,r2
    d9b4:	dfc00317 	ldw	ra,12(sp)
    d9b8:	dc800217 	ldw	r18,8(sp)
    d9bc:	dc400117 	ldw	r17,4(sp)
    d9c0:	dc000017 	ldw	r16,0(sp)
    d9c4:	dec00404 	addi	sp,sp,16
    d9c8:	f800283a 	ret
    d9cc:	00c03fc4 	movi	r3,255
    d9d0:	80ffe126 	beq	r16,r3,d958 <__alt_data_end+0xfc00d958>
    d9d4:	29410034 	orhi	r5,r5,1024
    d9d8:	00c006c4 	movi	r3,27
    d9dc:	18807516 	blt	r3,r2,dbb4 <__addsf3+0x2b8>
    d9e0:	00c00804 	movi	r3,32
    d9e4:	1887c83a 	sub	r3,r3,r2
    d9e8:	28c6983a 	sll	r3,r5,r3
    d9ec:	288ad83a 	srl	r5,r5,r2
    d9f0:	1804c03a 	cmpne	r2,r3,zero
    d9f4:	288ab03a 	or	r5,r5,r2
    d9f8:	2149c83a 	sub	r4,r4,r5
    d9fc:	2081002c 	andhi	r2,r4,1024
    da00:	10001426 	beq	r2,zero,da54 <__addsf3+0x158>
    da04:	04810034 	movhi	r18,1024
    da08:	94bfffc4 	addi	r18,r18,-1
    da0c:	24a4703a 	and	r18,r4,r18
    da10:	9009883a 	mov	r4,r18
    da14:	000f3780 	call	f378 <__clzsi2>
    da18:	10bffec4 	addi	r2,r2,-5
    da1c:	90a4983a 	sll	r18,r18,r2
    da20:	14005416 	blt	r2,r16,db74 <__addsf3+0x278>
    da24:	1405c83a 	sub	r2,r2,r16
    da28:	11000044 	addi	r4,r2,1
    da2c:	00800804 	movi	r2,32
    da30:	1105c83a 	sub	r2,r2,r4
    da34:	9084983a 	sll	r2,r18,r2
    da38:	9124d83a 	srl	r18,r18,r4
    da3c:	0021883a 	mov	r16,zero
    da40:	1008c03a 	cmpne	r4,r2,zero
    da44:	9108b03a 	or	r4,r18,r4
    da48:	003fc306 	br	d958 <__alt_data_end+0xfc00d958>
    da4c:	1000db26 	beq	r2,zero,ddbc <__addsf3+0x4c0>
    da50:	1009883a 	mov	r4,r2
    da54:	208001cc 	andi	r2,r4,7
    da58:	103fc11e 	bne	r2,zero,d960 <__alt_data_end+0xfc00d960>
    da5c:	2006d0fa 	srli	r3,r4,3
    da60:	01003fc4 	movi	r4,255
    da64:	8805883a 	mov	r2,r17
    da68:	8100241e 	bne	r16,r4,dafc <__addsf3+0x200>
    da6c:	18006e26 	beq	r3,zero,dc28 <__addsf3+0x32c>
    da70:	19001034 	orhi	r4,r3,64
    da74:	00c02034 	movhi	r3,128
    da78:	18ffffc4 	addi	r3,r3,-1
    da7c:	043fffc4 	movi	r16,-1
    da80:	20c8703a 	and	r4,r4,r3
    da84:	003fc206 	br	d990 <__alt_data_end+0xfc00d990>
    da88:	8187c83a 	sub	r3,r16,r6
    da8c:	00c03e0e 	bge	zero,r3,db88 <__addsf3+0x28c>
    da90:	30002326 	beq	r6,zero,db20 <__addsf3+0x224>
    da94:	01803fc4 	movi	r6,255
    da98:	81bfaf26 	beq	r16,r6,d958 <__alt_data_end+0xfc00d958>
    da9c:	29410034 	orhi	r5,r5,1024
    daa0:	018006c4 	movi	r6,27
    daa4:	30c07416 	blt	r6,r3,dc78 <__addsf3+0x37c>
    daa8:	01800804 	movi	r6,32
    daac:	30cdc83a 	sub	r6,r6,r3
    dab0:	298c983a 	sll	r6,r5,r6
    dab4:	28cad83a 	srl	r5,r5,r3
    dab8:	3006c03a 	cmpne	r3,r6,zero
    dabc:	28cab03a 	or	r5,r5,r3
    dac0:	2149883a 	add	r4,r4,r5
    dac4:	20c1002c 	andhi	r3,r4,1024
    dac8:	183fe226 	beq	r3,zero,da54 <__alt_data_end+0xfc00da54>
    dacc:	84000044 	addi	r16,r16,1
    dad0:	00c03fc4 	movi	r3,255
    dad4:	80c05426 	beq	r16,r3,dc28 <__addsf3+0x32c>
    dad8:	00bf0034 	movhi	r2,64512
    dadc:	10bfffc4 	addi	r2,r2,-1
    dae0:	20c0004c 	andi	r3,r4,1
    dae4:	2088703a 	and	r4,r4,r2
    dae8:	2008d07a 	srli	r4,r4,1
    daec:	20c8b03a 	or	r4,r4,r3
    daf0:	003f9906 	br	d958 <__alt_data_end+0xfc00d958>
    daf4:	0007883a 	mov	r3,zero
    daf8:	0005883a 	mov	r2,zero
    dafc:	01002034 	movhi	r4,128
    db00:	213fffc4 	addi	r4,r4,-1
    db04:	1908703a 	and	r4,r3,r4
    db08:	003fa106 	br	d990 <__alt_data_end+0xfc00d990>
    db0c:	10bfffc4 	addi	r2,r2,-1
    db10:	103fb926 	beq	r2,zero,d9f8 <__alt_data_end+0xfc00d9f8>
    db14:	00c03fc4 	movi	r3,255
    db18:	80ffaf1e 	bne	r16,r3,d9d8 <__alt_data_end+0xfc00d9d8>
    db1c:	003f8e06 	br	d958 <__alt_data_end+0xfc00d958>
    db20:	283f8d26 	beq	r5,zero,d958 <__alt_data_end+0xfc00d958>
    db24:	18ffffc4 	addi	r3,r3,-1
    db28:	183fe526 	beq	r3,zero,dac0 <__alt_data_end+0xfc00dac0>
    db2c:	01803fc4 	movi	r6,255
    db30:	81bfdb1e 	bne	r16,r6,daa0 <__alt_data_end+0xfc00daa0>
    db34:	003f8806 	br	d958 <__alt_data_end+0xfc00d958>
    db38:	1000201e 	bne	r2,zero,dbbc <__addsf3+0x2c0>
    db3c:	80800044 	addi	r2,r16,1
    db40:	10803fcc 	andi	r2,r2,255
    db44:	01800044 	movi	r6,1
    db48:	3080450e 	bge	r6,r2,dc60 <__addsf3+0x364>
    db4c:	2165c83a 	sub	r18,r4,r5
    db50:	90c1002c 	andhi	r3,r18,1024
    db54:	18002b26 	beq	r3,zero,dc04 <__addsf3+0x308>
    db58:	2925c83a 	sub	r18,r5,r4
    db5c:	3823883a 	mov	r17,r7
    db60:	003fab06 	br	da10 <__alt_data_end+0xfc00da10>
    db64:	8805883a 	mov	r2,r17
    db68:	043fffc4 	movi	r16,-1
    db6c:	0009883a 	mov	r4,zero
    db70:	003f8706 	br	d990 <__alt_data_end+0xfc00d990>
    db74:	013f0034 	movhi	r4,64512
    db78:	213fffc4 	addi	r4,r4,-1
    db7c:	80a1c83a 	sub	r16,r16,r2
    db80:	9108703a 	and	r4,r18,r4
    db84:	003f7406 	br	d958 <__alt_data_end+0xfc00d958>
    db88:	1800411e 	bne	r3,zero,dc90 <__addsf3+0x394>
    db8c:	80c00044 	addi	r3,r16,1
    db90:	19c03fcc 	andi	r7,r3,255
    db94:	01800044 	movi	r6,1
    db98:	31c0260e 	bge	r6,r7,dc34 <__addsf3+0x338>
    db9c:	01803fc4 	movi	r6,255
    dba0:	19802126 	beq	r3,r6,dc28 <__addsf3+0x32c>
    dba4:	2149883a 	add	r4,r4,r5
    dba8:	2008d07a 	srli	r4,r4,1
    dbac:	1821883a 	mov	r16,r3
    dbb0:	003f6906 	br	d958 <__alt_data_end+0xfc00d958>
    dbb4:	01400044 	movi	r5,1
    dbb8:	003f8f06 	br	d9f8 <__alt_data_end+0xfc00d9f8>
    dbbc:	8000151e 	bne	r16,zero,dc14 <__addsf3+0x318>
    dbc0:	20002f26 	beq	r4,zero,dc80 <__addsf3+0x384>
    dbc4:	0084303a 	nor	r2,zero,r2
    dbc8:	10000a26 	beq	r2,zero,dbf4 <__addsf3+0x2f8>
    dbcc:	00c03fc4 	movi	r3,255
    dbd0:	30c02b26 	beq	r6,r3,dc80 <__addsf3+0x384>
    dbd4:	00c006c4 	movi	r3,27
    dbd8:	18806d16 	blt	r3,r2,dd90 <__addsf3+0x494>
    dbdc:	00c00804 	movi	r3,32
    dbe0:	1887c83a 	sub	r3,r3,r2
    dbe4:	20c6983a 	sll	r3,r4,r3
    dbe8:	2084d83a 	srl	r2,r4,r2
    dbec:	1808c03a 	cmpne	r4,r3,zero
    dbf0:	1108b03a 	or	r4,r2,r4
    dbf4:	2909c83a 	sub	r4,r5,r4
    dbf8:	3021883a 	mov	r16,r6
    dbfc:	3823883a 	mov	r17,r7
    dc00:	003f7e06 	br	d9fc <__alt_data_end+0xfc00d9fc>
    dc04:	903f821e 	bne	r18,zero,da10 <__alt_data_end+0xfc00da10>
    dc08:	0005883a 	mov	r2,zero
    dc0c:	0021883a 	mov	r16,zero
    dc10:	003fba06 	br	dafc <__alt_data_end+0xfc00dafc>
    dc14:	00c03fc4 	movi	r3,255
    dc18:	30c01926 	beq	r6,r3,dc80 <__addsf3+0x384>
    dc1c:	0085c83a 	sub	r2,zero,r2
    dc20:	21010034 	orhi	r4,r4,1024
    dc24:	003feb06 	br	dbd4 <__alt_data_end+0xfc00dbd4>
    dc28:	043fffc4 	movi	r16,-1
    dc2c:	0009883a 	mov	r4,zero
    dc30:	003f5706 	br	d990 <__alt_data_end+0xfc00d990>
    dc34:	80004a1e 	bne	r16,zero,dd60 <__addsf3+0x464>
    dc38:	20005926 	beq	r4,zero,dda0 <__addsf3+0x4a4>
    dc3c:	283f4626 	beq	r5,zero,d958 <__alt_data_end+0xfc00d958>
    dc40:	2149883a 	add	r4,r4,r5
    dc44:	2081002c 	andhi	r2,r4,1024
    dc48:	103f8226 	beq	r2,zero,da54 <__alt_data_end+0xfc00da54>
    dc4c:	00bf0034 	movhi	r2,64512
    dc50:	10bfffc4 	addi	r2,r2,-1
    dc54:	3021883a 	mov	r16,r6
    dc58:	2088703a 	and	r4,r4,r2
    dc5c:	003f3e06 	br	d958 <__alt_data_end+0xfc00d958>
    dc60:	8000121e 	bne	r16,zero,dcac <__addsf3+0x3b0>
    dc64:	2000261e 	bne	r4,zero,dd00 <__addsf3+0x404>
    dc68:	283fa226 	beq	r5,zero,daf4 <__alt_data_end+0xfc00daf4>
    dc6c:	2809883a 	mov	r4,r5
    dc70:	3823883a 	mov	r17,r7
    dc74:	003f3806 	br	d958 <__alt_data_end+0xfc00d958>
    dc78:	01400044 	movi	r5,1
    dc7c:	003f9006 	br	dac0 <__alt_data_end+0xfc00dac0>
    dc80:	2809883a 	mov	r4,r5
    dc84:	3021883a 	mov	r16,r6
    dc88:	3823883a 	mov	r17,r7
    dc8c:	003f3206 	br	d958 <__alt_data_end+0xfc00d958>
    dc90:	80000c1e 	bne	r16,zero,dcc4 <__addsf3+0x3c8>
    dc94:	20002f26 	beq	r4,zero,dd54 <__addsf3+0x458>
    dc98:	00c6303a 	nor	r3,zero,r3
    dc9c:	18002b1e 	bne	r3,zero,dd4c <__addsf3+0x450>
    dca0:	2149883a 	add	r4,r4,r5
    dca4:	3021883a 	mov	r16,r6
    dca8:	003f8606 	br	dac4 <__alt_data_end+0xfc00dac4>
    dcac:	20001b1e 	bne	r4,zero,dd1c <__addsf3+0x420>
    dcb0:	28003926 	beq	r5,zero,dd98 <__addsf3+0x49c>
    dcb4:	2809883a 	mov	r4,r5
    dcb8:	3823883a 	mov	r17,r7
    dcbc:	04003fc4 	movi	r16,255
    dcc0:	003f2506 	br	d958 <__alt_data_end+0xfc00d958>
    dcc4:	01c03fc4 	movi	r7,255
    dcc8:	31c02226 	beq	r6,r7,dd54 <__addsf3+0x458>
    dccc:	00c7c83a 	sub	r3,zero,r3
    dcd0:	21010034 	orhi	r4,r4,1024
    dcd4:	01c006c4 	movi	r7,27
    dcd8:	38c03616 	blt	r7,r3,ddb4 <__addsf3+0x4b8>
    dcdc:	01c00804 	movi	r7,32
    dce0:	38cfc83a 	sub	r7,r7,r3
    dce4:	21ce983a 	sll	r7,r4,r7
    dce8:	20c6d83a 	srl	r3,r4,r3
    dcec:	3808c03a 	cmpne	r4,r7,zero
    dcf0:	1906b03a 	or	r3,r3,r4
    dcf4:	1949883a 	add	r4,r3,r5
    dcf8:	3021883a 	mov	r16,r6
    dcfc:	003f7106 	br	dac4 <__alt_data_end+0xfc00dac4>
    dd00:	283f1526 	beq	r5,zero,d958 <__alt_data_end+0xfc00d958>
    dd04:	2145c83a 	sub	r2,r4,r5
    dd08:	10c1002c 	andhi	r3,r2,1024
    dd0c:	183f4f26 	beq	r3,zero,da4c <__alt_data_end+0xfc00da4c>
    dd10:	2909c83a 	sub	r4,r5,r4
    dd14:	3823883a 	mov	r17,r7
    dd18:	003f0f06 	br	d958 <__alt_data_end+0xfc00d958>
    dd1c:	28001a26 	beq	r5,zero,dd88 <__addsf3+0x48c>
    dd20:	2008d0fa 	srli	r4,r4,3
    dd24:	2080102c 	andhi	r2,r4,64
    dd28:	10000526 	beq	r2,zero,dd40 <__addsf3+0x444>
    dd2c:	280ad0fa 	srli	r5,r5,3
    dd30:	2880102c 	andhi	r2,r5,64
    dd34:	1000021e 	bne	r2,zero,dd40 <__addsf3+0x444>
    dd38:	2809883a 	mov	r4,r5
    dd3c:	3823883a 	mov	r17,r7
    dd40:	200890fa 	slli	r4,r4,3
    dd44:	04003fc4 	movi	r16,255
    dd48:	003f0306 	br	d958 <__alt_data_end+0xfc00d958>
    dd4c:	01c03fc4 	movi	r7,255
    dd50:	31ffe01e 	bne	r6,r7,dcd4 <__alt_data_end+0xfc00dcd4>
    dd54:	2809883a 	mov	r4,r5
    dd58:	3021883a 	mov	r16,r6
    dd5c:	003efe06 	br	d958 <__alt_data_end+0xfc00d958>
    dd60:	20001126 	beq	r4,zero,dda8 <__addsf3+0x4ac>
    dd64:	28000826 	beq	r5,zero,dd88 <__addsf3+0x48c>
    dd68:	2008d0fa 	srli	r4,r4,3
    dd6c:	2080102c 	andhi	r2,r4,64
    dd70:	103ff326 	beq	r2,zero,dd40 <__alt_data_end+0xfc00dd40>
    dd74:	280ad0fa 	srli	r5,r5,3
    dd78:	2880102c 	andhi	r2,r5,64
    dd7c:	103ff01e 	bne	r2,zero,dd40 <__alt_data_end+0xfc00dd40>
    dd80:	2809883a 	mov	r4,r5
    dd84:	003fee06 	br	dd40 <__alt_data_end+0xfc00dd40>
    dd88:	04003fc4 	movi	r16,255
    dd8c:	003ef206 	br	d958 <__alt_data_end+0xfc00d958>
    dd90:	01000044 	movi	r4,1
    dd94:	003f9706 	br	dbf4 <__alt_data_end+0xfc00dbf4>
    dd98:	0005883a 	mov	r2,zero
    dd9c:	003f3406 	br	da70 <__alt_data_end+0xfc00da70>
    dda0:	2809883a 	mov	r4,r5
    dda4:	003eec06 	br	d958 <__alt_data_end+0xfc00d958>
    dda8:	2809883a 	mov	r4,r5
    ddac:	04003fc4 	movi	r16,255
    ddb0:	003ee906 	br	d958 <__alt_data_end+0xfc00d958>
    ddb4:	00c00044 	movi	r3,1
    ddb8:	003fce06 	br	dcf4 <__alt_data_end+0xfc00dcf4>
    ddbc:	0005883a 	mov	r2,zero
    ddc0:	003f4e06 	br	dafc <__alt_data_end+0xfc00dafc>

0000ddc4 <__divsf3>:
    ddc4:	defff504 	addi	sp,sp,-44
    ddc8:	200cd5fa 	srli	r6,r4,23
    ddcc:	dcc00415 	stw	r19,16(sp)
    ddd0:	2026d7fa 	srli	r19,r4,31
    ddd4:	00c02034 	movhi	r3,128
    ddd8:	dd800715 	stw	r22,28(sp)
    dddc:	dd000515 	stw	r20,20(sp)
    dde0:	dc800315 	stw	r18,12(sp)
    dde4:	18ffffc4 	addi	r3,r3,-1
    dde8:	dfc00a15 	stw	ra,40(sp)
    ddec:	df000915 	stw	fp,36(sp)
    ddf0:	ddc00815 	stw	r23,32(sp)
    ddf4:	dd400615 	stw	r21,24(sp)
    ddf8:	dc400215 	stw	r17,8(sp)
    ddfc:	dc000115 	stw	r16,4(sp)
    de00:	35003fcc 	andi	r20,r6,255
    de04:	1924703a 	and	r18,r3,r4
    de08:	9d803fcc 	andi	r22,r19,255
    de0c:	a0005226 	beq	r20,zero,df58 <__divsf3+0x194>
    de10:	00803fc4 	movi	r2,255
    de14:	a0802e26 	beq	r20,r2,ded0 <__divsf3+0x10c>
    de18:	91002034 	orhi	r4,r18,128
    de1c:	202490fa 	slli	r18,r4,3
    de20:	a53fe044 	addi	r20,r20,-127
    de24:	0021883a 	mov	r16,zero
    de28:	002f883a 	mov	r23,zero
    de2c:	280cd5fa 	srli	r6,r5,23
    de30:	282ad7fa 	srli	r21,r5,31
    de34:	00c02034 	movhi	r3,128
    de38:	18ffffc4 	addi	r3,r3,-1
    de3c:	31803fcc 	andi	r6,r6,255
    de40:	1962703a 	and	r17,r3,r5
    de44:	af003fcc 	andi	fp,r21,255
    de48:	30004a26 	beq	r6,zero,df74 <__divsf3+0x1b0>
    de4c:	00803fc4 	movi	r2,255
    de50:	30804526 	beq	r6,r2,df68 <__divsf3+0x1a4>
    de54:	89402034 	orhi	r5,r17,128
    de58:	282290fa 	slli	r17,r5,3
    de5c:	31bfe044 	addi	r6,r6,-127
    de60:	000b883a 	mov	r5,zero
    de64:	2c20b03a 	or	r16,r5,r16
    de68:	802090ba 	slli	r16,r16,2
    de6c:	00800074 	movhi	r2,1
    de70:	10b7a404 	addi	r2,r2,-8560
    de74:	80a1883a 	add	r16,r16,r2
    de78:	81000017 	ldw	r4,0(r16)
    de7c:	9d46f03a 	xor	r3,r19,r21
    de80:	180f883a 	mov	r7,r3
    de84:	18803fcc 	andi	r2,r3,255
    de88:	a18dc83a 	sub	r6,r20,r6
    de8c:	2000683a 	jmp	r4
    de90:	0000e074 	movhi	zero,897
    de94:	0000def8 	rdprs	zero,zero,891
    de98:	0000e068 	cmpgeui	zero,zero,897
    de9c:	0000dee4 	muli	zero,zero,891
    dea0:	0000e068 	cmpgeui	zero,zero,897
    dea4:	0000e040 	call	e04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x268>
    dea8:	0000e068 	cmpgeui	zero,zero,897
    deac:	0000dee4 	muli	zero,zero,891
    deb0:	0000def8 	rdprs	zero,zero,891
    deb4:	0000def8 	rdprs	zero,zero,891
    deb8:	0000e040 	call	e04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x268>
    debc:	0000dee4 	muli	zero,zero,891
    dec0:	0000e154 	movui	zero,901
    dec4:	0000e154 	movui	zero,901
    dec8:	0000e154 	movui	zero,901
    decc:	0000e108 	cmpgei	zero,zero,900
    ded0:	9000581e 	bne	r18,zero,e034 <__divsf3+0x270>
    ded4:	04000204 	movi	r16,8
    ded8:	05c00084 	movi	r23,2
    dedc:	003fd306 	br	de2c <__alt_data_end+0xfc00de2c>
    dee0:	0023883a 	mov	r17,zero
    dee4:	e02d883a 	mov	r22,fp
    dee8:	282f883a 	mov	r23,r5
    deec:	00800084 	movi	r2,2
    def0:	b8808f1e 	bne	r23,r2,e130 <__divsf3+0x36c>
    def4:	b005883a 	mov	r2,r22
    def8:	11c0004c 	andi	r7,r2,1
    defc:	013fffc4 	movi	r4,-1
    df00:	000d883a 	mov	r6,zero
    df04:	21003fcc 	andi	r4,r4,255
    df08:	200895fa 	slli	r4,r4,23
    df0c:	38803fcc 	andi	r2,r7,255
    df10:	00c02034 	movhi	r3,128
    df14:	100497fa 	slli	r2,r2,31
    df18:	18ffffc4 	addi	r3,r3,-1
    df1c:	30c6703a 	and	r3,r6,r3
    df20:	1906b03a 	or	r3,r3,r4
    df24:	1884b03a 	or	r2,r3,r2
    df28:	dfc00a17 	ldw	ra,40(sp)
    df2c:	df000917 	ldw	fp,36(sp)
    df30:	ddc00817 	ldw	r23,32(sp)
    df34:	dd800717 	ldw	r22,28(sp)
    df38:	dd400617 	ldw	r21,24(sp)
    df3c:	dd000517 	ldw	r20,20(sp)
    df40:	dcc00417 	ldw	r19,16(sp)
    df44:	dc800317 	ldw	r18,12(sp)
    df48:	dc400217 	ldw	r17,8(sp)
    df4c:	dc000117 	ldw	r16,4(sp)
    df50:	dec00b04 	addi	sp,sp,44
    df54:	f800283a 	ret
    df58:	90002b1e 	bne	r18,zero,e008 <__divsf3+0x244>
    df5c:	04000104 	movi	r16,4
    df60:	05c00044 	movi	r23,1
    df64:	003fb106 	br	de2c <__alt_data_end+0xfc00de2c>
    df68:	8800251e 	bne	r17,zero,e000 <__divsf3+0x23c>
    df6c:	01400084 	movi	r5,2
    df70:	00000206 	br	df7c <__divsf3+0x1b8>
    df74:	88001a1e 	bne	r17,zero,dfe0 <__divsf3+0x21c>
    df78:	01400044 	movi	r5,1
    df7c:	8160b03a 	or	r16,r16,r5
    df80:	802090ba 	slli	r16,r16,2
    df84:	00c00074 	movhi	r3,1
    df88:	18f7e804 	addi	r3,r3,-8288
    df8c:	80e1883a 	add	r16,r16,r3
    df90:	80c00017 	ldw	r3,0(r16)
    df94:	9d44f03a 	xor	r2,r19,r21
    df98:	a18dc83a 	sub	r6,r20,r6
    df9c:	1800683a 	jmp	r3
    dfa0:	0000def8 	rdprs	zero,zero,891
    dfa4:	0000def8 	rdprs	zero,zero,891
    dfa8:	0000e144 	movi	zero,901
    dfac:	0000dee0 	cmpeqi	zero,zero,891
    dfb0:	0000e144 	movi	zero,901
    dfb4:	0000e040 	call	e04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x268>
    dfb8:	0000e144 	movi	zero,901
    dfbc:	0000dee0 	cmpeqi	zero,zero,891
    dfc0:	0000def8 	rdprs	zero,zero,891
    dfc4:	0000def8 	rdprs	zero,zero,891
    dfc8:	0000e040 	call	e04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x268>
    dfcc:	0000dee0 	cmpeqi	zero,zero,891
    dfd0:	0000e154 	movui	zero,901
    dfd4:	0000e154 	movui	zero,901
    dfd8:	0000e154 	movui	zero,901
    dfdc:	0000e16c 	andhi	zero,zero,901
    dfe0:	8809883a 	mov	r4,r17
    dfe4:	000f3780 	call	f378 <__clzsi2>
    dfe8:	10fffec4 	addi	r3,r2,-5
    dfec:	10801d84 	addi	r2,r2,118
    dff0:	88e2983a 	sll	r17,r17,r3
    dff4:	008dc83a 	sub	r6,zero,r2
    dff8:	000b883a 	mov	r5,zero
    dffc:	003f9906 	br	de64 <__alt_data_end+0xfc00de64>
    e000:	014000c4 	movi	r5,3
    e004:	003f9706 	br	de64 <__alt_data_end+0xfc00de64>
    e008:	9009883a 	mov	r4,r18
    e00c:	d9400015 	stw	r5,0(sp)
    e010:	000f3780 	call	f378 <__clzsi2>
    e014:	10fffec4 	addi	r3,r2,-5
    e018:	11801d84 	addi	r6,r2,118
    e01c:	90e4983a 	sll	r18,r18,r3
    e020:	01a9c83a 	sub	r20,zero,r6
    e024:	0021883a 	mov	r16,zero
    e028:	002f883a 	mov	r23,zero
    e02c:	d9400017 	ldw	r5,0(sp)
    e030:	003f7e06 	br	de2c <__alt_data_end+0xfc00de2c>
    e034:	04000304 	movi	r16,12
    e038:	05c000c4 	movi	r23,3
    e03c:	003f7b06 	br	de2c <__alt_data_end+0xfc00de2c>
    e040:	01802034 	movhi	r6,128
    e044:	000f883a 	mov	r7,zero
    e048:	31bfffc4 	addi	r6,r6,-1
    e04c:	013fffc4 	movi	r4,-1
    e050:	003fac06 	br	df04 <__alt_data_end+0xfc00df04>
    e054:	01400044 	movi	r5,1
    e058:	2909c83a 	sub	r4,r5,r4
    e05c:	00c006c4 	movi	r3,27
    e060:	19004b0e 	bge	r3,r4,e190 <__divsf3+0x3cc>
    e064:	114e703a 	and	r7,r2,r5
    e068:	0009883a 	mov	r4,zero
    e06c:	000d883a 	mov	r6,zero
    e070:	003fa406 	br	df04 <__alt_data_end+0xfc00df04>
    e074:	9006917a 	slli	r3,r18,5
    e078:	8822917a 	slli	r17,r17,5
    e07c:	1c40372e 	bgeu	r3,r17,e15c <__divsf3+0x398>
    e080:	31bfffc4 	addi	r6,r6,-1
    e084:	010006c4 	movi	r4,27
    e088:	000b883a 	mov	r5,zero
    e08c:	180f883a 	mov	r7,r3
    e090:	294b883a 	add	r5,r5,r5
    e094:	18c7883a 	add	r3,r3,r3
    e098:	38000116 	blt	r7,zero,e0a0 <__divsf3+0x2dc>
    e09c:	1c400236 	bltu	r3,r17,e0a8 <__divsf3+0x2e4>
    e0a0:	1c47c83a 	sub	r3,r3,r17
    e0a4:	29400054 	ori	r5,r5,1
    e0a8:	213fffc4 	addi	r4,r4,-1
    e0ac:	203ff71e 	bne	r4,zero,e08c <__alt_data_end+0xfc00e08c>
    e0b0:	1806c03a 	cmpne	r3,r3,zero
    e0b4:	1962b03a 	or	r17,r3,r5
    e0b8:	31001fc4 	addi	r4,r6,127
    e0bc:	013fe50e 	bge	zero,r4,e054 <__alt_data_end+0xfc00e054>
    e0c0:	88c001cc 	andi	r3,r17,7
    e0c4:	18000426 	beq	r3,zero,e0d8 <__divsf3+0x314>
    e0c8:	88c003cc 	andi	r3,r17,15
    e0cc:	01400104 	movi	r5,4
    e0d0:	19400126 	beq	r3,r5,e0d8 <__divsf3+0x314>
    e0d4:	8963883a 	add	r17,r17,r5
    e0d8:	88c2002c 	andhi	r3,r17,2048
    e0dc:	18000426 	beq	r3,zero,e0f0 <__divsf3+0x32c>
    e0e0:	00fe0034 	movhi	r3,63488
    e0e4:	18ffffc4 	addi	r3,r3,-1
    e0e8:	31002004 	addi	r4,r6,128
    e0ec:	88e2703a 	and	r17,r17,r3
    e0f0:	00c03f84 	movi	r3,254
    e0f4:	193f8016 	blt	r3,r4,def8 <__alt_data_end+0xfc00def8>
    e0f8:	880c91ba 	slli	r6,r17,6
    e0fc:	11c0004c 	andi	r7,r2,1
    e100:	300cd27a 	srli	r6,r6,9
    e104:	003f7f06 	br	df04 <__alt_data_end+0xfc00df04>
    e108:	9080102c 	andhi	r2,r18,64
    e10c:	10000226 	beq	r2,zero,e118 <__divsf3+0x354>
    e110:	8880102c 	andhi	r2,r17,64
    e114:	10001826 	beq	r2,zero,e178 <__divsf3+0x3b4>
    e118:	00802034 	movhi	r2,128
    e11c:	91801034 	orhi	r6,r18,64
    e120:	10bfffc4 	addi	r2,r2,-1
    e124:	980f883a 	mov	r7,r19
    e128:	308c703a 	and	r6,r6,r2
    e12c:	003fc706 	br	e04c <__alt_data_end+0xfc00e04c>
    e130:	008000c4 	movi	r2,3
    e134:	b8802d26 	beq	r23,r2,e1ec <__divsf3+0x428>
    e138:	00c00044 	movi	r3,1
    e13c:	b005883a 	mov	r2,r22
    e140:	b8ffdd1e 	bne	r23,r3,e0b8 <__alt_data_end+0xfc00e0b8>
    e144:	11c0004c 	andi	r7,r2,1
    e148:	0009883a 	mov	r4,zero
    e14c:	000d883a 	mov	r6,zero
    e150:	003f6c06 	br	df04 <__alt_data_end+0xfc00df04>
    e154:	9023883a 	mov	r17,r18
    e158:	003f6406 	br	deec <__alt_data_end+0xfc00deec>
    e15c:	1c47c83a 	sub	r3,r3,r17
    e160:	01000684 	movi	r4,26
    e164:	01400044 	movi	r5,1
    e168:	003fc806 	br	e08c <__alt_data_end+0xfc00e08c>
    e16c:	9080102c 	andhi	r2,r18,64
    e170:	103fe926 	beq	r2,zero,e118 <__alt_data_end+0xfc00e118>
    e174:	0023883a 	mov	r17,zero
    e178:	00802034 	movhi	r2,128
    e17c:	89801034 	orhi	r6,r17,64
    e180:	10bfffc4 	addi	r2,r2,-1
    e184:	a80f883a 	mov	r7,r21
    e188:	308c703a 	and	r6,r6,r2
    e18c:	003faf06 	br	e04c <__alt_data_end+0xfc00e04c>
    e190:	01c00804 	movi	r7,32
    e194:	390fc83a 	sub	r7,r7,r4
    e198:	89ce983a 	sll	r7,r17,r7
    e19c:	890ad83a 	srl	r5,r17,r4
    e1a0:	380ec03a 	cmpne	r7,r7,zero
    e1a4:	29cab03a 	or	r5,r5,r7
    e1a8:	28c001cc 	andi	r3,r5,7
    e1ac:	18000426 	beq	r3,zero,e1c0 <__divsf3+0x3fc>
    e1b0:	28c003cc 	andi	r3,r5,15
    e1b4:	01000104 	movi	r4,4
    e1b8:	19000126 	beq	r3,r4,e1c0 <__divsf3+0x3fc>
    e1bc:	290b883a 	add	r5,r5,r4
    e1c0:	28c1002c 	andhi	r3,r5,1024
    e1c4:	18000426 	beq	r3,zero,e1d8 <__divsf3+0x414>
    e1c8:	11c0004c 	andi	r7,r2,1
    e1cc:	01000044 	movi	r4,1
    e1d0:	000d883a 	mov	r6,zero
    e1d4:	003f4b06 	br	df04 <__alt_data_end+0xfc00df04>
    e1d8:	280a91ba 	slli	r5,r5,6
    e1dc:	11c0004c 	andi	r7,r2,1
    e1e0:	0009883a 	mov	r4,zero
    e1e4:	280cd27a 	srli	r6,r5,9
    e1e8:	003f4606 	br	df04 <__alt_data_end+0xfc00df04>
    e1ec:	00802034 	movhi	r2,128
    e1f0:	89801034 	orhi	r6,r17,64
    e1f4:	10bfffc4 	addi	r2,r2,-1
    e1f8:	b00f883a 	mov	r7,r22
    e1fc:	308c703a 	and	r6,r6,r2
    e200:	003f9206 	br	e04c <__alt_data_end+0xfc00e04c>

0000e204 <__gesf2>:
    e204:	2004d5fa 	srli	r2,r4,23
    e208:	2806d5fa 	srli	r3,r5,23
    e20c:	01802034 	movhi	r6,128
    e210:	31bfffc4 	addi	r6,r6,-1
    e214:	10803fcc 	andi	r2,r2,255
    e218:	01c03fc4 	movi	r7,255
    e21c:	3110703a 	and	r8,r6,r4
    e220:	18c03fcc 	andi	r3,r3,255
    e224:	314c703a 	and	r6,r6,r5
    e228:	2008d7fa 	srli	r4,r4,31
    e22c:	280ad7fa 	srli	r5,r5,31
    e230:	11c01926 	beq	r2,r7,e298 <__gesf2+0x94>
    e234:	01c03fc4 	movi	r7,255
    e238:	19c00f26 	beq	r3,r7,e278 <__gesf2+0x74>
    e23c:	1000061e 	bne	r2,zero,e258 <__gesf2+0x54>
    e240:	400f003a 	cmpeq	r7,r8,zero
    e244:	1800071e 	bne	r3,zero,e264 <__gesf2+0x60>
    e248:	3000061e 	bne	r6,zero,e264 <__gesf2+0x60>
    e24c:	0005883a 	mov	r2,zero
    e250:	40000e1e 	bne	r8,zero,e28c <__gesf2+0x88>
    e254:	f800283a 	ret
    e258:	18000a1e 	bne	r3,zero,e284 <__gesf2+0x80>
    e25c:	30000b26 	beq	r6,zero,e28c <__gesf2+0x88>
    e260:	000f883a 	mov	r7,zero
    e264:	29403fcc 	andi	r5,r5,255
    e268:	38000726 	beq	r7,zero,e288 <__gesf2+0x84>
    e26c:	28000826 	beq	r5,zero,e290 <__gesf2+0x8c>
    e270:	00800044 	movi	r2,1
    e274:	f800283a 	ret
    e278:	303ff026 	beq	r6,zero,e23c <__alt_data_end+0xfc00e23c>
    e27c:	00bfff84 	movi	r2,-2
    e280:	f800283a 	ret
    e284:	29403fcc 	andi	r5,r5,255
    e288:	21400526 	beq	r4,r5,e2a0 <__gesf2+0x9c>
    e28c:	203ff826 	beq	r4,zero,e270 <__alt_data_end+0xfc00e270>
    e290:	00bfffc4 	movi	r2,-1
    e294:	f800283a 	ret
    e298:	403fe626 	beq	r8,zero,e234 <__alt_data_end+0xfc00e234>
    e29c:	003ff706 	br	e27c <__alt_data_end+0xfc00e27c>
    e2a0:	18bffa16 	blt	r3,r2,e28c <__alt_data_end+0xfc00e28c>
    e2a4:	10c00216 	blt	r2,r3,e2b0 <__gesf2+0xac>
    e2a8:	323ff836 	bltu	r6,r8,e28c <__alt_data_end+0xfc00e28c>
    e2ac:	4180022e 	bgeu	r8,r6,e2b8 <__gesf2+0xb4>
    e2b0:	203fef1e 	bne	r4,zero,e270 <__alt_data_end+0xfc00e270>
    e2b4:	003ff606 	br	e290 <__alt_data_end+0xfc00e290>
    e2b8:	0005883a 	mov	r2,zero
    e2bc:	f800283a 	ret

0000e2c0 <__mulsf3>:
    e2c0:	defff504 	addi	sp,sp,-44
    e2c4:	dc000115 	stw	r16,4(sp)
    e2c8:	2020d5fa 	srli	r16,r4,23
    e2cc:	dd400615 	stw	r21,24(sp)
    e2d0:	202ad7fa 	srli	r21,r4,31
    e2d4:	dc800315 	stw	r18,12(sp)
    e2d8:	04802034 	movhi	r18,128
    e2dc:	df000915 	stw	fp,36(sp)
    e2e0:	dd000515 	stw	r20,20(sp)
    e2e4:	94bfffc4 	addi	r18,r18,-1
    e2e8:	dfc00a15 	stw	ra,40(sp)
    e2ec:	ddc00815 	stw	r23,32(sp)
    e2f0:	dd800715 	stw	r22,28(sp)
    e2f4:	dcc00415 	stw	r19,16(sp)
    e2f8:	dc400215 	stw	r17,8(sp)
    e2fc:	84003fcc 	andi	r16,r16,255
    e300:	9124703a 	and	r18,r18,r4
    e304:	a829883a 	mov	r20,r21
    e308:	af003fcc 	andi	fp,r21,255
    e30c:	80005426 	beq	r16,zero,e460 <__mulsf3+0x1a0>
    e310:	00803fc4 	movi	r2,255
    e314:	80802f26 	beq	r16,r2,e3d4 <__mulsf3+0x114>
    e318:	91002034 	orhi	r4,r18,128
    e31c:	202490fa 	slli	r18,r4,3
    e320:	843fe044 	addi	r16,r16,-127
    e324:	0023883a 	mov	r17,zero
    e328:	002f883a 	mov	r23,zero
    e32c:	2804d5fa 	srli	r2,r5,23
    e330:	282cd7fa 	srli	r22,r5,31
    e334:	01002034 	movhi	r4,128
    e338:	213fffc4 	addi	r4,r4,-1
    e33c:	10803fcc 	andi	r2,r2,255
    e340:	2166703a 	and	r19,r4,r5
    e344:	b1803fcc 	andi	r6,r22,255
    e348:	10004c26 	beq	r2,zero,e47c <__mulsf3+0x1bc>
    e34c:	00c03fc4 	movi	r3,255
    e350:	10c04726 	beq	r2,r3,e470 <__mulsf3+0x1b0>
    e354:	99002034 	orhi	r4,r19,128
    e358:	202690fa 	slli	r19,r4,3
    e35c:	10bfe044 	addi	r2,r2,-127
    e360:	0007883a 	mov	r3,zero
    e364:	80a1883a 	add	r16,r16,r2
    e368:	010003c4 	movi	r4,15
    e36c:	1c44b03a 	or	r2,r3,r17
    e370:	b56af03a 	xor	r21,r22,r21
    e374:	81c00044 	addi	r7,r16,1
    e378:	20806b36 	bltu	r4,r2,e528 <__mulsf3+0x268>
    e37c:	100490ba 	slli	r2,r2,2
    e380:	01000074 	movhi	r4,1
    e384:	2138e504 	addi	r4,r4,-7276
    e388:	1105883a 	add	r2,r2,r4
    e38c:	10800017 	ldw	r2,0(r2)
    e390:	1000683a 	jmp	r2
    e394:	0000e528 	cmpgeui	zero,zero,916
    e398:	0000e3e8 	cmpgeui	zero,zero,911
    e39c:	0000e3e8 	cmpgeui	zero,zero,911
    e3a0:	0000e3e4 	muli	zero,zero,911
    e3a4:	0000e50c 	andi	zero,zero,916
    e3a8:	0000e50c 	andi	zero,zero,916
    e3ac:	0000e4f8 	rdprs	zero,zero,915
    e3b0:	0000e3e4 	muli	zero,zero,911
    e3b4:	0000e50c 	andi	zero,zero,916
    e3b8:	0000e4f8 	rdprs	zero,zero,915
    e3bc:	0000e50c 	andi	zero,zero,916
    e3c0:	0000e3e4 	muli	zero,zero,911
    e3c4:	0000e518 	cmpnei	zero,zero,916
    e3c8:	0000e518 	cmpnei	zero,zero,916
    e3cc:	0000e518 	cmpnei	zero,zero,916
    e3d0:	0000e628 	cmpgeui	zero,zero,920
    e3d4:	90003b1e 	bne	r18,zero,e4c4 <__mulsf3+0x204>
    e3d8:	04400204 	movi	r17,8
    e3dc:	05c00084 	movi	r23,2
    e3e0:	003fd206 	br	e32c <__alt_data_end+0xfc00e32c>
    e3e4:	302b883a 	mov	r21,r6
    e3e8:	00800084 	movi	r2,2
    e3ec:	18802626 	beq	r3,r2,e488 <__mulsf3+0x1c8>
    e3f0:	008000c4 	movi	r2,3
    e3f4:	1880b826 	beq	r3,r2,e6d8 <__mulsf3+0x418>
    e3f8:	00800044 	movi	r2,1
    e3fc:	1880af1e 	bne	r3,r2,e6bc <__mulsf3+0x3fc>
    e400:	a829883a 	mov	r20,r21
    e404:	0007883a 	mov	r3,zero
    e408:	0009883a 	mov	r4,zero
    e40c:	18803fcc 	andi	r2,r3,255
    e410:	100695fa 	slli	r3,r2,23
    e414:	a0803fcc 	andi	r2,r20,255
    e418:	100a97fa 	slli	r5,r2,31
    e41c:	00802034 	movhi	r2,128
    e420:	10bfffc4 	addi	r2,r2,-1
    e424:	2084703a 	and	r2,r4,r2
    e428:	10c4b03a 	or	r2,r2,r3
    e42c:	1144b03a 	or	r2,r2,r5
    e430:	dfc00a17 	ldw	ra,40(sp)
    e434:	df000917 	ldw	fp,36(sp)
    e438:	ddc00817 	ldw	r23,32(sp)
    e43c:	dd800717 	ldw	r22,28(sp)
    e440:	dd400617 	ldw	r21,24(sp)
    e444:	dd000517 	ldw	r20,20(sp)
    e448:	dcc00417 	ldw	r19,16(sp)
    e44c:	dc800317 	ldw	r18,12(sp)
    e450:	dc400217 	ldw	r17,8(sp)
    e454:	dc000117 	ldw	r16,4(sp)
    e458:	dec00b04 	addi	sp,sp,44
    e45c:	f800283a 	ret
    e460:	90000d1e 	bne	r18,zero,e498 <__mulsf3+0x1d8>
    e464:	04400104 	movi	r17,4
    e468:	05c00044 	movi	r23,1
    e46c:	003faf06 	br	e32c <__alt_data_end+0xfc00e32c>
    e470:	9806c03a 	cmpne	r3,r19,zero
    e474:	18c00084 	addi	r3,r3,2
    e478:	003fba06 	br	e364 <__alt_data_end+0xfc00e364>
    e47c:	9800141e 	bne	r19,zero,e4d0 <__mulsf3+0x210>
    e480:	00c00044 	movi	r3,1
    e484:	003fb706 	br	e364 <__alt_data_end+0xfc00e364>
    e488:	a829883a 	mov	r20,r21
    e48c:	00ffffc4 	movi	r3,-1
    e490:	0009883a 	mov	r4,zero
    e494:	003fdd06 	br	e40c <__alt_data_end+0xfc00e40c>
    e498:	9009883a 	mov	r4,r18
    e49c:	d9400015 	stw	r5,0(sp)
    e4a0:	000f3780 	call	f378 <__clzsi2>
    e4a4:	10fffec4 	addi	r3,r2,-5
    e4a8:	10801d84 	addi	r2,r2,118
    e4ac:	90e4983a 	sll	r18,r18,r3
    e4b0:	00a1c83a 	sub	r16,zero,r2
    e4b4:	0023883a 	mov	r17,zero
    e4b8:	002f883a 	mov	r23,zero
    e4bc:	d9400017 	ldw	r5,0(sp)
    e4c0:	003f9a06 	br	e32c <__alt_data_end+0xfc00e32c>
    e4c4:	04400304 	movi	r17,12
    e4c8:	05c000c4 	movi	r23,3
    e4cc:	003f9706 	br	e32c <__alt_data_end+0xfc00e32c>
    e4d0:	9809883a 	mov	r4,r19
    e4d4:	d9800015 	stw	r6,0(sp)
    e4d8:	000f3780 	call	f378 <__clzsi2>
    e4dc:	10fffec4 	addi	r3,r2,-5
    e4e0:	10801d84 	addi	r2,r2,118
    e4e4:	98e6983a 	sll	r19,r19,r3
    e4e8:	0085c83a 	sub	r2,zero,r2
    e4ec:	0007883a 	mov	r3,zero
    e4f0:	d9800017 	ldw	r6,0(sp)
    e4f4:	003f9b06 	br	e364 <__alt_data_end+0xfc00e364>
    e4f8:	01002034 	movhi	r4,128
    e4fc:	0029883a 	mov	r20,zero
    e500:	213fffc4 	addi	r4,r4,-1
    e504:	00ffffc4 	movi	r3,-1
    e508:	003fc006 	br	e40c <__alt_data_end+0xfc00e40c>
    e50c:	9027883a 	mov	r19,r18
    e510:	b807883a 	mov	r3,r23
    e514:	003fb406 	br	e3e8 <__alt_data_end+0xfc00e3e8>
    e518:	9027883a 	mov	r19,r18
    e51c:	e02b883a 	mov	r21,fp
    e520:	b807883a 	mov	r3,r23
    e524:	003fb006 	br	e3e8 <__alt_data_end+0xfc00e3e8>
    e528:	9028d43a 	srli	r20,r18,16
    e52c:	982cd43a 	srli	r22,r19,16
    e530:	94bfffcc 	andi	r18,r18,65535
    e534:	9cffffcc 	andi	r19,r19,65535
    e538:	980b883a 	mov	r5,r19
    e53c:	9009883a 	mov	r4,r18
    e540:	d9c00015 	stw	r7,0(sp)
    e544:	000d8d40 	call	d8d4 <__mulsi3>
    e548:	a00b883a 	mov	r5,r20
    e54c:	9809883a 	mov	r4,r19
    e550:	1023883a 	mov	r17,r2
    e554:	000d8d40 	call	d8d4 <__mulsi3>
    e558:	a009883a 	mov	r4,r20
    e55c:	b00b883a 	mov	r5,r22
    e560:	1027883a 	mov	r19,r2
    e564:	000d8d40 	call	d8d4 <__mulsi3>
    e568:	b00b883a 	mov	r5,r22
    e56c:	9009883a 	mov	r4,r18
    e570:	1029883a 	mov	r20,r2
    e574:	000d8d40 	call	d8d4 <__mulsi3>
    e578:	8806d43a 	srli	r3,r17,16
    e57c:	14c5883a 	add	r2,r2,r19
    e580:	d9c00017 	ldw	r7,0(sp)
    e584:	1885883a 	add	r2,r3,r2
    e588:	14c0022e 	bgeu	r2,r19,e594 <__mulsf3+0x2d4>
    e58c:	00c00074 	movhi	r3,1
    e590:	a0e9883a 	add	r20,r20,r3
    e594:	1026943a 	slli	r19,r2,16
    e598:	8c7fffcc 	andi	r17,r17,65535
    e59c:	1004d43a 	srli	r2,r2,16
    e5a0:	9c63883a 	add	r17,r19,r17
    e5a4:	882691ba 	slli	r19,r17,6
    e5a8:	1505883a 	add	r2,r2,r20
    e5ac:	8822d6ba 	srli	r17,r17,26
    e5b0:	100891ba 	slli	r4,r2,6
    e5b4:	9826c03a 	cmpne	r19,r19,zero
    e5b8:	9c62b03a 	or	r17,r19,r17
    e5bc:	8926b03a 	or	r19,r17,r4
    e5c0:	9882002c 	andhi	r2,r19,2048
    e5c4:	10000426 	beq	r2,zero,e5d8 <__mulsf3+0x318>
    e5c8:	9804d07a 	srli	r2,r19,1
    e5cc:	9900004c 	andi	r4,r19,1
    e5d0:	3821883a 	mov	r16,r7
    e5d4:	1126b03a 	or	r19,r2,r4
    e5d8:	80c01fc4 	addi	r3,r16,127
    e5dc:	00c0210e 	bge	zero,r3,e664 <__mulsf3+0x3a4>
    e5e0:	988001cc 	andi	r2,r19,7
    e5e4:	10000426 	beq	r2,zero,e5f8 <__mulsf3+0x338>
    e5e8:	988003cc 	andi	r2,r19,15
    e5ec:	01000104 	movi	r4,4
    e5f0:	11000126 	beq	r2,r4,e5f8 <__mulsf3+0x338>
    e5f4:	9927883a 	add	r19,r19,r4
    e5f8:	9882002c 	andhi	r2,r19,2048
    e5fc:	10000426 	beq	r2,zero,e610 <__mulsf3+0x350>
    e600:	00be0034 	movhi	r2,63488
    e604:	10bfffc4 	addi	r2,r2,-1
    e608:	80c02004 	addi	r3,r16,128
    e60c:	98a6703a 	and	r19,r19,r2
    e610:	00803f84 	movi	r2,254
    e614:	10ff9c16 	blt	r2,r3,e488 <__alt_data_end+0xfc00e488>
    e618:	980891ba 	slli	r4,r19,6
    e61c:	a829883a 	mov	r20,r21
    e620:	2008d27a 	srli	r4,r4,9
    e624:	003f7906 	br	e40c <__alt_data_end+0xfc00e40c>
    e628:	9080102c 	andhi	r2,r18,64
    e62c:	10000826 	beq	r2,zero,e650 <__mulsf3+0x390>
    e630:	9880102c 	andhi	r2,r19,64
    e634:	1000061e 	bne	r2,zero,e650 <__mulsf3+0x390>
    e638:	00802034 	movhi	r2,128
    e63c:	99001034 	orhi	r4,r19,64
    e640:	10bfffc4 	addi	r2,r2,-1
    e644:	b029883a 	mov	r20,r22
    e648:	2088703a 	and	r4,r4,r2
    e64c:	003fad06 	br	e504 <__alt_data_end+0xfc00e504>
    e650:	00802034 	movhi	r2,128
    e654:	91001034 	orhi	r4,r18,64
    e658:	10bfffc4 	addi	r2,r2,-1
    e65c:	2088703a 	and	r4,r4,r2
    e660:	003fa806 	br	e504 <__alt_data_end+0xfc00e504>
    e664:	00800044 	movi	r2,1
    e668:	10c7c83a 	sub	r3,r2,r3
    e66c:	008006c4 	movi	r2,27
    e670:	10ff6316 	blt	r2,r3,e400 <__alt_data_end+0xfc00e400>
    e674:	00800804 	movi	r2,32
    e678:	10c5c83a 	sub	r2,r2,r3
    e67c:	9884983a 	sll	r2,r19,r2
    e680:	98c6d83a 	srl	r3,r19,r3
    e684:	1004c03a 	cmpne	r2,r2,zero
    e688:	1884b03a 	or	r2,r3,r2
    e68c:	10c001cc 	andi	r3,r2,7
    e690:	18000426 	beq	r3,zero,e6a4 <__mulsf3+0x3e4>
    e694:	10c003cc 	andi	r3,r2,15
    e698:	01000104 	movi	r4,4
    e69c:	19000126 	beq	r3,r4,e6a4 <__mulsf3+0x3e4>
    e6a0:	1105883a 	add	r2,r2,r4
    e6a4:	10c1002c 	andhi	r3,r2,1024
    e6a8:	18000626 	beq	r3,zero,e6c4 <__mulsf3+0x404>
    e6ac:	a829883a 	mov	r20,r21
    e6b0:	00c00044 	movi	r3,1
    e6b4:	0009883a 	mov	r4,zero
    e6b8:	003f5406 	br	e40c <__alt_data_end+0xfc00e40c>
    e6bc:	3821883a 	mov	r16,r7
    e6c0:	003fc506 	br	e5d8 <__alt_data_end+0xfc00e5d8>
    e6c4:	100491ba 	slli	r2,r2,6
    e6c8:	a829883a 	mov	r20,r21
    e6cc:	0007883a 	mov	r3,zero
    e6d0:	1008d27a 	srli	r4,r2,9
    e6d4:	003f4d06 	br	e40c <__alt_data_end+0xfc00e40c>
    e6d8:	00802034 	movhi	r2,128
    e6dc:	99001034 	orhi	r4,r19,64
    e6e0:	10bfffc4 	addi	r2,r2,-1
    e6e4:	a829883a 	mov	r20,r21
    e6e8:	2088703a 	and	r4,r4,r2
    e6ec:	003f8506 	br	e504 <__alt_data_end+0xfc00e504>

0000e6f0 <__subsf3>:
    e6f0:	defffc04 	addi	sp,sp,-16
    e6f4:	280cd5fa 	srli	r6,r5,23
    e6f8:	dc000015 	stw	r16,0(sp)
    e6fc:	01c02034 	movhi	r7,128
    e700:	2020d5fa 	srli	r16,r4,23
    e704:	39ffffc4 	addi	r7,r7,-1
    e708:	3906703a 	and	r3,r7,r4
    e70c:	dc400115 	stw	r17,4(sp)
    e710:	394e703a 	and	r7,r7,r5
    e714:	2022d7fa 	srli	r17,r4,31
    e718:	dfc00315 	stw	ra,12(sp)
    e71c:	dc800215 	stw	r18,8(sp)
    e720:	31803fcc 	andi	r6,r6,255
    e724:	01003fc4 	movi	r4,255
    e728:	84003fcc 	andi	r16,r16,255
    e72c:	180690fa 	slli	r3,r3,3
    e730:	2804d7fa 	srli	r2,r5,31
    e734:	380e90fa 	slli	r7,r7,3
    e738:	31006d26 	beq	r6,r4,e8f0 <__subsf3+0x200>
    e73c:	1080005c 	xori	r2,r2,1
    e740:	8189c83a 	sub	r4,r16,r6
    e744:	14404f26 	beq	r2,r17,e884 <__subsf3+0x194>
    e748:	0100770e 	bge	zero,r4,e928 <__subsf3+0x238>
    e74c:	30001e1e 	bne	r6,zero,e7c8 <__subsf3+0xd8>
    e750:	38006a1e 	bne	r7,zero,e8fc <__subsf3+0x20c>
    e754:	188001cc 	andi	r2,r3,7
    e758:	10000426 	beq	r2,zero,e76c <__subsf3+0x7c>
    e75c:	188003cc 	andi	r2,r3,15
    e760:	01000104 	movi	r4,4
    e764:	11000126 	beq	r2,r4,e76c <__subsf3+0x7c>
    e768:	1907883a 	add	r3,r3,r4
    e76c:	1881002c 	andhi	r2,r3,1024
    e770:	10003926 	beq	r2,zero,e858 <__subsf3+0x168>
    e774:	84000044 	addi	r16,r16,1
    e778:	00803fc4 	movi	r2,255
    e77c:	80807526 	beq	r16,r2,e954 <__subsf3+0x264>
    e780:	180691ba 	slli	r3,r3,6
    e784:	8880004c 	andi	r2,r17,1
    e788:	180ad27a 	srli	r5,r3,9
    e78c:	84003fcc 	andi	r16,r16,255
    e790:	800695fa 	slli	r3,r16,23
    e794:	10803fcc 	andi	r2,r2,255
    e798:	01002034 	movhi	r4,128
    e79c:	213fffc4 	addi	r4,r4,-1
    e7a0:	100497fa 	slli	r2,r2,31
    e7a4:	2920703a 	and	r16,r5,r4
    e7a8:	80e0b03a 	or	r16,r16,r3
    e7ac:	8084b03a 	or	r2,r16,r2
    e7b0:	dfc00317 	ldw	ra,12(sp)
    e7b4:	dc800217 	ldw	r18,8(sp)
    e7b8:	dc400117 	ldw	r17,4(sp)
    e7bc:	dc000017 	ldw	r16,0(sp)
    e7c0:	dec00404 	addi	sp,sp,16
    e7c4:	f800283a 	ret
    e7c8:	00803fc4 	movi	r2,255
    e7cc:	80bfe126 	beq	r16,r2,e754 <__alt_data_end+0xfc00e754>
    e7d0:	39c10034 	orhi	r7,r7,1024
    e7d4:	008006c4 	movi	r2,27
    e7d8:	11007416 	blt	r2,r4,e9ac <__subsf3+0x2bc>
    e7dc:	00800804 	movi	r2,32
    e7e0:	1105c83a 	sub	r2,r2,r4
    e7e4:	3884983a 	sll	r2,r7,r2
    e7e8:	390ed83a 	srl	r7,r7,r4
    e7ec:	1008c03a 	cmpne	r4,r2,zero
    e7f0:	390eb03a 	or	r7,r7,r4
    e7f4:	19c7c83a 	sub	r3,r3,r7
    e7f8:	1881002c 	andhi	r2,r3,1024
    e7fc:	10001426 	beq	r2,zero,e850 <__subsf3+0x160>
    e800:	04810034 	movhi	r18,1024
    e804:	94bfffc4 	addi	r18,r18,-1
    e808:	1ca4703a 	and	r18,r3,r18
    e80c:	9009883a 	mov	r4,r18
    e810:	000f3780 	call	f378 <__clzsi2>
    e814:	10bffec4 	addi	r2,r2,-5
    e818:	90a4983a 	sll	r18,r18,r2
    e81c:	14005116 	blt	r2,r16,e964 <__subsf3+0x274>
    e820:	1405c83a 	sub	r2,r2,r16
    e824:	10c00044 	addi	r3,r2,1
    e828:	00800804 	movi	r2,32
    e82c:	10c5c83a 	sub	r2,r2,r3
    e830:	9084983a 	sll	r2,r18,r2
    e834:	90e4d83a 	srl	r18,r18,r3
    e838:	0021883a 	mov	r16,zero
    e83c:	1006c03a 	cmpne	r3,r2,zero
    e840:	90c6b03a 	or	r3,r18,r3
    e844:	003fc306 	br	e754 <__alt_data_end+0xfc00e754>
    e848:	2000e026 	beq	r4,zero,ebcc <__subsf3+0x4dc>
    e84c:	2007883a 	mov	r3,r4
    e850:	188001cc 	andi	r2,r3,7
    e854:	103fc11e 	bne	r2,zero,e75c <__alt_data_end+0xfc00e75c>
    e858:	180ad0fa 	srli	r5,r3,3
    e85c:	00c03fc4 	movi	r3,255
    e860:	8880004c 	andi	r2,r17,1
    e864:	80c0031e 	bne	r16,r3,e874 <__subsf3+0x184>
    e868:	28006d26 	beq	r5,zero,ea20 <__subsf3+0x330>
    e86c:	29401034 	orhi	r5,r5,64
    e870:	043fffc4 	movi	r16,-1
    e874:	00c02034 	movhi	r3,128
    e878:	18ffffc4 	addi	r3,r3,-1
    e87c:	28ca703a 	and	r5,r5,r3
    e880:	003fc206 	br	e78c <__alt_data_end+0xfc00e78c>
    e884:	01003c0e 	bge	zero,r4,e978 <__subsf3+0x288>
    e888:	30002126 	beq	r6,zero,e910 <__subsf3+0x220>
    e88c:	01403fc4 	movi	r5,255
    e890:	817fb026 	beq	r16,r5,e754 <__alt_data_end+0xfc00e754>
    e894:	39c10034 	orhi	r7,r7,1024
    e898:	014006c4 	movi	r5,27
    e89c:	29007416 	blt	r5,r4,ea70 <__subsf3+0x380>
    e8a0:	01400804 	movi	r5,32
    e8a4:	290bc83a 	sub	r5,r5,r4
    e8a8:	394a983a 	sll	r5,r7,r5
    e8ac:	390ed83a 	srl	r7,r7,r4
    e8b0:	2808c03a 	cmpne	r4,r5,zero
    e8b4:	390eb03a 	or	r7,r7,r4
    e8b8:	19c7883a 	add	r3,r3,r7
    e8bc:	1901002c 	andhi	r4,r3,1024
    e8c0:	20003826 	beq	r4,zero,e9a4 <__subsf3+0x2b4>
    e8c4:	84000044 	addi	r16,r16,1
    e8c8:	01003fc4 	movi	r4,255
    e8cc:	81005426 	beq	r16,r4,ea20 <__subsf3+0x330>
    e8d0:	1023883a 	mov	r17,r2
    e8d4:	00bf0034 	movhi	r2,64512
    e8d8:	10bfffc4 	addi	r2,r2,-1
    e8dc:	1900004c 	andi	r4,r3,1
    e8e0:	1886703a 	and	r3,r3,r2
    e8e4:	1806d07a 	srli	r3,r3,1
    e8e8:	1906b03a 	or	r3,r3,r4
    e8ec:	003f9906 	br	e754 <__alt_data_end+0xfc00e754>
    e8f0:	383f9226 	beq	r7,zero,e73c <__alt_data_end+0xfc00e73c>
    e8f4:	10803fcc 	andi	r2,r2,255
    e8f8:	003f9106 	br	e740 <__alt_data_end+0xfc00e740>
    e8fc:	213fffc4 	addi	r4,r4,-1
    e900:	203fbc26 	beq	r4,zero,e7f4 <__alt_data_end+0xfc00e7f4>
    e904:	00803fc4 	movi	r2,255
    e908:	80bfb21e 	bne	r16,r2,e7d4 <__alt_data_end+0xfc00e7d4>
    e90c:	003f9106 	br	e754 <__alt_data_end+0xfc00e754>
    e910:	383f9026 	beq	r7,zero,e754 <__alt_data_end+0xfc00e754>
    e914:	213fffc4 	addi	r4,r4,-1
    e918:	203fe726 	beq	r4,zero,e8b8 <__alt_data_end+0xfc00e8b8>
    e91c:	01403fc4 	movi	r5,255
    e920:	817fdd1e 	bne	r16,r5,e898 <__alt_data_end+0xfc00e898>
    e924:	003f8b06 	br	e754 <__alt_data_end+0xfc00e754>
    e928:	2000221e 	bne	r4,zero,e9b4 <__subsf3+0x2c4>
    e92c:	81000044 	addi	r4,r16,1
    e930:	21003fcc 	andi	r4,r4,255
    e934:	01400044 	movi	r5,1
    e938:	2900470e 	bge	r5,r4,ea58 <__subsf3+0x368>
    e93c:	19e5c83a 	sub	r18,r3,r7
    e940:	9141002c 	andhi	r5,r18,1024
    e944:	28002d26 	beq	r5,zero,e9fc <__subsf3+0x30c>
    e948:	38e5c83a 	sub	r18,r7,r3
    e94c:	1023883a 	mov	r17,r2
    e950:	003fae06 	br	e80c <__alt_data_end+0xfc00e80c>
    e954:	8880004c 	andi	r2,r17,1
    e958:	043fffc4 	movi	r16,-1
    e95c:	000b883a 	mov	r5,zero
    e960:	003f8a06 	br	e78c <__alt_data_end+0xfc00e78c>
    e964:	00ff0034 	movhi	r3,64512
    e968:	18ffffc4 	addi	r3,r3,-1
    e96c:	80a1c83a 	sub	r16,r16,r2
    e970:	90c6703a 	and	r3,r18,r3
    e974:	003f7706 	br	e754 <__alt_data_end+0xfc00e754>
    e978:	2000431e 	bne	r4,zero,ea88 <__subsf3+0x398>
    e97c:	81000044 	addi	r4,r16,1
    e980:	21803fcc 	andi	r6,r4,255
    e984:	01400044 	movi	r5,1
    e988:	2980280e 	bge	r5,r6,ea2c <__subsf3+0x33c>
    e98c:	01403fc4 	movi	r5,255
    e990:	21402326 	beq	r4,r5,ea20 <__subsf3+0x330>
    e994:	19c7883a 	add	r3,r3,r7
    e998:	1806d07a 	srli	r3,r3,1
    e99c:	2021883a 	mov	r16,r4
    e9a0:	003f6c06 	br	e754 <__alt_data_end+0xfc00e754>
    e9a4:	1023883a 	mov	r17,r2
    e9a8:	003fa906 	br	e850 <__alt_data_end+0xfc00e850>
    e9ac:	01c00044 	movi	r7,1
    e9b0:	003f9006 	br	e7f4 <__alt_data_end+0xfc00e7f4>
    e9b4:	8000151e 	bne	r16,zero,ea0c <__subsf3+0x31c>
    e9b8:	18002f26 	beq	r3,zero,ea78 <__subsf3+0x388>
    e9bc:	0108303a 	nor	r4,zero,r4
    e9c0:	20000a26 	beq	r4,zero,e9ec <__subsf3+0x2fc>
    e9c4:	01403fc4 	movi	r5,255
    e9c8:	31402b26 	beq	r6,r5,ea78 <__subsf3+0x388>
    e9cc:	014006c4 	movi	r5,27
    e9d0:	29006e16 	blt	r5,r4,eb8c <__subsf3+0x49c>
    e9d4:	01400804 	movi	r5,32
    e9d8:	290bc83a 	sub	r5,r5,r4
    e9dc:	194a983a 	sll	r5,r3,r5
    e9e0:	1908d83a 	srl	r4,r3,r4
    e9e4:	2806c03a 	cmpne	r3,r5,zero
    e9e8:	20c6b03a 	or	r3,r4,r3
    e9ec:	38c7c83a 	sub	r3,r7,r3
    e9f0:	3021883a 	mov	r16,r6
    e9f4:	1023883a 	mov	r17,r2
    e9f8:	003f7f06 	br	e7f8 <__alt_data_end+0xfc00e7f8>
    e9fc:	903f831e 	bne	r18,zero,e80c <__alt_data_end+0xfc00e80c>
    ea00:	0005883a 	mov	r2,zero
    ea04:	0021883a 	mov	r16,zero
    ea08:	003f9a06 	br	e874 <__alt_data_end+0xfc00e874>
    ea0c:	01403fc4 	movi	r5,255
    ea10:	31401926 	beq	r6,r5,ea78 <__subsf3+0x388>
    ea14:	0109c83a 	sub	r4,zero,r4
    ea18:	18c10034 	orhi	r3,r3,1024
    ea1c:	003feb06 	br	e9cc <__alt_data_end+0xfc00e9cc>
    ea20:	043fffc4 	movi	r16,-1
    ea24:	000b883a 	mov	r5,zero
    ea28:	003f5806 	br	e78c <__alt_data_end+0xfc00e78c>
    ea2c:	8000481e 	bne	r16,zero,eb50 <__subsf3+0x460>
    ea30:	18006226 	beq	r3,zero,ebbc <__subsf3+0x4cc>
    ea34:	383f4726 	beq	r7,zero,e754 <__alt_data_end+0xfc00e754>
    ea38:	19c7883a 	add	r3,r3,r7
    ea3c:	1881002c 	andhi	r2,r3,1024
    ea40:	103f8326 	beq	r2,zero,e850 <__alt_data_end+0xfc00e850>
    ea44:	00bf0034 	movhi	r2,64512
    ea48:	10bfffc4 	addi	r2,r2,-1
    ea4c:	2821883a 	mov	r16,r5
    ea50:	1886703a 	and	r3,r3,r2
    ea54:	003f3f06 	br	e754 <__alt_data_end+0xfc00e754>
    ea58:	80001c1e 	bne	r16,zero,eacc <__subsf3+0x3dc>
    ea5c:	1800261e 	bne	r3,zero,eaf8 <__subsf3+0x408>
    ea60:	38004c26 	beq	r7,zero,eb94 <__subsf3+0x4a4>
    ea64:	3807883a 	mov	r3,r7
    ea68:	1023883a 	mov	r17,r2
    ea6c:	003f3906 	br	e754 <__alt_data_end+0xfc00e754>
    ea70:	01c00044 	movi	r7,1
    ea74:	003f9006 	br	e8b8 <__alt_data_end+0xfc00e8b8>
    ea78:	3807883a 	mov	r3,r7
    ea7c:	3021883a 	mov	r16,r6
    ea80:	1023883a 	mov	r17,r2
    ea84:	003f3306 	br	e754 <__alt_data_end+0xfc00e754>
    ea88:	8000161e 	bne	r16,zero,eae4 <__subsf3+0x3f4>
    ea8c:	18002d26 	beq	r3,zero,eb44 <__subsf3+0x454>
    ea90:	0108303a 	nor	r4,zero,r4
    ea94:	20000a26 	beq	r4,zero,eac0 <__subsf3+0x3d0>
    ea98:	01403fc4 	movi	r5,255
    ea9c:	31402926 	beq	r6,r5,eb44 <__subsf3+0x454>
    eaa0:	014006c4 	movi	r5,27
    eaa4:	29004716 	blt	r5,r4,ebc4 <__subsf3+0x4d4>
    eaa8:	01400804 	movi	r5,32
    eaac:	290bc83a 	sub	r5,r5,r4
    eab0:	194a983a 	sll	r5,r3,r5
    eab4:	1908d83a 	srl	r4,r3,r4
    eab8:	2806c03a 	cmpne	r3,r5,zero
    eabc:	20c6b03a 	or	r3,r4,r3
    eac0:	19c7883a 	add	r3,r3,r7
    eac4:	3021883a 	mov	r16,r6
    eac8:	003f7c06 	br	e8bc <__alt_data_end+0xfc00e8bc>
    eacc:	1800111e 	bne	r3,zero,eb14 <__subsf3+0x424>
    ead0:	38003326 	beq	r7,zero,eba0 <__subsf3+0x4b0>
    ead4:	3807883a 	mov	r3,r7
    ead8:	1023883a 	mov	r17,r2
    eadc:	04003fc4 	movi	r16,255
    eae0:	003f1c06 	br	e754 <__alt_data_end+0xfc00e754>
    eae4:	01403fc4 	movi	r5,255
    eae8:	31401626 	beq	r6,r5,eb44 <__subsf3+0x454>
    eaec:	0109c83a 	sub	r4,zero,r4
    eaf0:	18c10034 	orhi	r3,r3,1024
    eaf4:	003fea06 	br	eaa0 <__alt_data_end+0xfc00eaa0>
    eaf8:	383f1626 	beq	r7,zero,e754 <__alt_data_end+0xfc00e754>
    eafc:	19c9c83a 	sub	r4,r3,r7
    eb00:	2141002c 	andhi	r5,r4,1024
    eb04:	283f5026 	beq	r5,zero,e848 <__alt_data_end+0xfc00e848>
    eb08:	38c7c83a 	sub	r3,r7,r3
    eb0c:	1023883a 	mov	r17,r2
    eb10:	003f1006 	br	e754 <__alt_data_end+0xfc00e754>
    eb14:	38001b26 	beq	r7,zero,eb84 <__subsf3+0x494>
    eb18:	1806d0fa 	srli	r3,r3,3
    eb1c:	1900102c 	andhi	r4,r3,64
    eb20:	20000526 	beq	r4,zero,eb38 <__subsf3+0x448>
    eb24:	380ed0fa 	srli	r7,r7,3
    eb28:	3900102c 	andhi	r4,r7,64
    eb2c:	2000021e 	bne	r4,zero,eb38 <__subsf3+0x448>
    eb30:	3807883a 	mov	r3,r7
    eb34:	1023883a 	mov	r17,r2
    eb38:	180690fa 	slli	r3,r3,3
    eb3c:	04003fc4 	movi	r16,255
    eb40:	003f0406 	br	e754 <__alt_data_end+0xfc00e754>
    eb44:	3807883a 	mov	r3,r7
    eb48:	3021883a 	mov	r16,r6
    eb4c:	003f0106 	br	e754 <__alt_data_end+0xfc00e754>
    eb50:	18001726 	beq	r3,zero,ebb0 <__subsf3+0x4c0>
    eb54:	38000b26 	beq	r7,zero,eb84 <__subsf3+0x494>
    eb58:	1806d0fa 	srli	r3,r3,3
    eb5c:	1900102c 	andhi	r4,r3,64
    eb60:	20000426 	beq	r4,zero,eb74 <__subsf3+0x484>
    eb64:	380ed0fa 	srli	r7,r7,3
    eb68:	3900102c 	andhi	r4,r7,64
    eb6c:	2000011e 	bne	r4,zero,eb74 <__subsf3+0x484>
    eb70:	3807883a 	mov	r3,r7
    eb74:	180690fa 	slli	r3,r3,3
    eb78:	1023883a 	mov	r17,r2
    eb7c:	04003fc4 	movi	r16,255
    eb80:	003ef406 	br	e754 <__alt_data_end+0xfc00e754>
    eb84:	04003fc4 	movi	r16,255
    eb88:	003ef206 	br	e754 <__alt_data_end+0xfc00e754>
    eb8c:	00c00044 	movi	r3,1
    eb90:	003f9606 	br	e9ec <__alt_data_end+0xfc00e9ec>
    eb94:	000b883a 	mov	r5,zero
    eb98:	0005883a 	mov	r2,zero
    eb9c:	003f3506 	br	e874 <__alt_data_end+0xfc00e874>
    eba0:	01402034 	movhi	r5,128
    eba4:	297fffc4 	addi	r5,r5,-1
    eba8:	0005883a 	mov	r2,zero
    ebac:	003f2f06 	br	e86c <__alt_data_end+0xfc00e86c>
    ebb0:	3807883a 	mov	r3,r7
    ebb4:	04003fc4 	movi	r16,255
    ebb8:	003ee606 	br	e754 <__alt_data_end+0xfc00e754>
    ebbc:	3807883a 	mov	r3,r7
    ebc0:	003ee406 	br	e754 <__alt_data_end+0xfc00e754>
    ebc4:	00c00044 	movi	r3,1
    ebc8:	003fbd06 	br	eac0 <__alt_data_end+0xfc00eac0>
    ebcc:	0005883a 	mov	r2,zero
    ebd0:	003f2806 	br	e874 <__alt_data_end+0xfc00e874>

0000ebd4 <__fixsfsi>:
    ebd4:	200ad5fa 	srli	r5,r4,23
    ebd8:	00c02034 	movhi	r3,128
    ebdc:	18ffffc4 	addi	r3,r3,-1
    ebe0:	29403fcc 	andi	r5,r5,255
    ebe4:	00801f84 	movi	r2,126
    ebe8:	1906703a 	and	r3,r3,r4
    ebec:	2008d7fa 	srli	r4,r4,31
    ebf0:	11400e0e 	bge	r2,r5,ec2c <__fixsfsi+0x58>
    ebf4:	00802744 	movi	r2,157
    ebf8:	11400816 	blt	r2,r5,ec1c <__fixsfsi+0x48>
    ebfc:	00802544 	movi	r2,149
    ec00:	18c02034 	orhi	r3,r3,128
    ec04:	11400b0e 	bge	r2,r5,ec34 <__fixsfsi+0x60>
    ec08:	28bfda84 	addi	r2,r5,-150
    ec0c:	1884983a 	sll	r2,r3,r2
    ec10:	20000726 	beq	r4,zero,ec30 <__fixsfsi+0x5c>
    ec14:	0085c83a 	sub	r2,zero,r2
    ec18:	f800283a 	ret
    ec1c:	00a00034 	movhi	r2,32768
    ec20:	10bfffc4 	addi	r2,r2,-1
    ec24:	2085883a 	add	r2,r4,r2
    ec28:	f800283a 	ret
    ec2c:	0005883a 	mov	r2,zero
    ec30:	f800283a 	ret
    ec34:	00802584 	movi	r2,150
    ec38:	1145c83a 	sub	r2,r2,r5
    ec3c:	1884d83a 	srl	r2,r3,r2
    ec40:	003ff306 	br	ec10 <__alt_data_end+0xfc00ec10>

0000ec44 <__floatsisf>:
    ec44:	defffd04 	addi	sp,sp,-12
    ec48:	dfc00215 	stw	ra,8(sp)
    ec4c:	dc400115 	stw	r17,4(sp)
    ec50:	dc000015 	stw	r16,0(sp)
    ec54:	20003526 	beq	r4,zero,ed2c <__floatsisf+0xe8>
    ec58:	2021883a 	mov	r16,r4
    ec5c:	2022d7fa 	srli	r17,r4,31
    ec60:	20003616 	blt	r4,zero,ed3c <__floatsisf+0xf8>
    ec64:	8009883a 	mov	r4,r16
    ec68:	000f3780 	call	f378 <__clzsi2>
    ec6c:	00c02784 	movi	r3,158
    ec70:	1887c83a 	sub	r3,r3,r2
    ec74:	01002584 	movi	r4,150
    ec78:	20c01416 	blt	r4,r3,eccc <__floatsisf+0x88>
    ec7c:	20c9c83a 	sub	r4,r4,r3
    ec80:	8120983a 	sll	r16,r16,r4
    ec84:	00802034 	movhi	r2,128
    ec88:	10bfffc4 	addi	r2,r2,-1
    ec8c:	8809883a 	mov	r4,r17
    ec90:	80a0703a 	and	r16,r16,r2
    ec94:	18803fcc 	andi	r2,r3,255
    ec98:	100695fa 	slli	r3,r2,23
    ec9c:	20803fcc 	andi	r2,r4,255
    eca0:	100897fa 	slli	r4,r2,31
    eca4:	00802034 	movhi	r2,128
    eca8:	10bfffc4 	addi	r2,r2,-1
    ecac:	8084703a 	and	r2,r16,r2
    ecb0:	10c4b03a 	or	r2,r2,r3
    ecb4:	1104b03a 	or	r2,r2,r4
    ecb8:	dfc00217 	ldw	ra,8(sp)
    ecbc:	dc400117 	ldw	r17,4(sp)
    ecc0:	dc000017 	ldw	r16,0(sp)
    ecc4:	dec00304 	addi	sp,sp,12
    ecc8:	f800283a 	ret
    eccc:	01002644 	movi	r4,153
    ecd0:	20c01c16 	blt	r4,r3,ed44 <__floatsisf+0x100>
    ecd4:	20c9c83a 	sub	r4,r4,r3
    ecd8:	8120983a 	sll	r16,r16,r4
    ecdc:	013f0034 	movhi	r4,64512
    ece0:	213fffc4 	addi	r4,r4,-1
    ece4:	814001cc 	andi	r5,r16,7
    ece8:	8108703a 	and	r4,r16,r4
    ecec:	28000426 	beq	r5,zero,ed00 <__floatsisf+0xbc>
    ecf0:	840003cc 	andi	r16,r16,15
    ecf4:	01400104 	movi	r5,4
    ecf8:	81400126 	beq	r16,r5,ed00 <__floatsisf+0xbc>
    ecfc:	2149883a 	add	r4,r4,r5
    ed00:	2141002c 	andhi	r5,r4,1024
    ed04:	28000526 	beq	r5,zero,ed1c <__floatsisf+0xd8>
    ed08:	00c027c4 	movi	r3,159
    ed0c:	1887c83a 	sub	r3,r3,r2
    ed10:	00bf0034 	movhi	r2,64512
    ed14:	10bfffc4 	addi	r2,r2,-1
    ed18:	2088703a 	and	r4,r4,r2
    ed1c:	202091ba 	slli	r16,r4,6
    ed20:	8809883a 	mov	r4,r17
    ed24:	8020d27a 	srli	r16,r16,9
    ed28:	003fda06 	br	ec94 <__alt_data_end+0xfc00ec94>
    ed2c:	0009883a 	mov	r4,zero
    ed30:	0007883a 	mov	r3,zero
    ed34:	0021883a 	mov	r16,zero
    ed38:	003fd606 	br	ec94 <__alt_data_end+0xfc00ec94>
    ed3c:	0121c83a 	sub	r16,zero,r4
    ed40:	003fc806 	br	ec64 <__alt_data_end+0xfc00ec64>
    ed44:	01002e44 	movi	r4,185
    ed48:	20c9c83a 	sub	r4,r4,r3
    ed4c:	01400144 	movi	r5,5
    ed50:	8108983a 	sll	r4,r16,r4
    ed54:	288bc83a 	sub	r5,r5,r2
    ed58:	8160d83a 	srl	r16,r16,r5
    ed5c:	2008c03a 	cmpne	r4,r4,zero
    ed60:	8120b03a 	or	r16,r16,r4
    ed64:	003fdd06 	br	ecdc <__alt_data_end+0xfc00ecdc>

0000ed68 <__floatunsisf>:
    ed68:	defffe04 	addi	sp,sp,-8
    ed6c:	dfc00115 	stw	ra,4(sp)
    ed70:	dc000015 	stw	r16,0(sp)
    ed74:	20002c26 	beq	r4,zero,ee28 <__floatunsisf+0xc0>
    ed78:	2021883a 	mov	r16,r4
    ed7c:	000f3780 	call	f378 <__clzsi2>
    ed80:	00c02784 	movi	r3,158
    ed84:	1887c83a 	sub	r3,r3,r2
    ed88:	01002584 	movi	r4,150
    ed8c:	20c00f16 	blt	r4,r3,edcc <__floatunsisf+0x64>
    ed90:	20c9c83a 	sub	r4,r4,r3
    ed94:	8108983a 	sll	r4,r16,r4
    ed98:	00802034 	movhi	r2,128
    ed9c:	10bfffc4 	addi	r2,r2,-1
    eda0:	2088703a 	and	r4,r4,r2
    eda4:	18803fcc 	andi	r2,r3,255
    eda8:	100695fa 	slli	r3,r2,23
    edac:	00802034 	movhi	r2,128
    edb0:	10bfffc4 	addi	r2,r2,-1
    edb4:	2084703a 	and	r2,r4,r2
    edb8:	10c4b03a 	or	r2,r2,r3
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	dc000017 	ldw	r16,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret
    edcc:	01002644 	movi	r4,153
    edd0:	20c01816 	blt	r4,r3,ee34 <__floatunsisf+0xcc>
    edd4:	20c9c83a 	sub	r4,r4,r3
    edd8:	8108983a 	sll	r4,r16,r4
    eddc:	017f0034 	movhi	r5,64512
    ede0:	297fffc4 	addi	r5,r5,-1
    ede4:	218001cc 	andi	r6,r4,7
    ede8:	214a703a 	and	r5,r4,r5
    edec:	30000426 	beq	r6,zero,ee00 <__floatunsisf+0x98>
    edf0:	210003cc 	andi	r4,r4,15
    edf4:	01800104 	movi	r6,4
    edf8:	21800126 	beq	r4,r6,ee00 <__floatunsisf+0x98>
    edfc:	298b883a 	add	r5,r5,r6
    ee00:	2901002c 	andhi	r4,r5,1024
    ee04:	20000526 	beq	r4,zero,ee1c <__floatunsisf+0xb4>
    ee08:	00c027c4 	movi	r3,159
    ee0c:	1887c83a 	sub	r3,r3,r2
    ee10:	00bf0034 	movhi	r2,64512
    ee14:	10bfffc4 	addi	r2,r2,-1
    ee18:	288a703a 	and	r5,r5,r2
    ee1c:	280891ba 	slli	r4,r5,6
    ee20:	2008d27a 	srli	r4,r4,9
    ee24:	003fdf06 	br	eda4 <__alt_data_end+0xfc00eda4>
    ee28:	0007883a 	mov	r3,zero
    ee2c:	0009883a 	mov	r4,zero
    ee30:	003fdc06 	br	eda4 <__alt_data_end+0xfc00eda4>
    ee34:	01402e44 	movi	r5,185
    ee38:	28cbc83a 	sub	r5,r5,r3
    ee3c:	01000144 	movi	r4,5
    ee40:	2089c83a 	sub	r4,r4,r2
    ee44:	814a983a 	sll	r5,r16,r5
    ee48:	8108d83a 	srl	r4,r16,r4
    ee4c:	2820c03a 	cmpne	r16,r5,zero
    ee50:	2408b03a 	or	r4,r4,r16
    ee54:	003fe106 	br	eddc <__alt_data_end+0xfc00eddc>

0000ee58 <_Unwind_ForcedUnwind_Phase2>:
    ee58:	defff404 	addi	sp,sp,-48
    ee5c:	dd800915 	stw	r22,36(sp)
    ee60:	058000f4 	movhi	r22,3
    ee64:	ddc00a15 	stw	r23,40(sp)
    ee68:	dd400815 	stw	r21,32(sp)
    ee6c:	dd000715 	stw	r20,28(sp)
    ee70:	dcc00615 	stw	r19,24(sp)
    ee74:	dc400415 	stw	r17,16(sp)
    ee78:	dc000315 	stw	r16,12(sp)
    ee7c:	dfc00b15 	stw	ra,44(sp)
    ee80:	dc800515 	stw	r18,20(sp)
    ee84:	2021883a 	mov	r16,r4
    ee88:	2823883a 	mov	r17,r5
    ee8c:	24c00317 	ldw	r19,12(r4)
    ee90:	25000417 	ldw	r20,16(r4)
    ee94:	28c00017 	ldw	r3,0(r5)
    ee98:	b5879004 	addi	r22,r22,7744
    ee9c:	054001c4 	movi	r21,7
    eea0:	05c00204 	movi	r23,8
    eea4:	00001606 	br	ef00 <_Unwind_ForcedUnwind_Phase2+0xa8>
    eea8:	81800017 	ldw	r6,0(r16)
    eeac:	81c00117 	ldw	r7,4(r16)
    eeb0:	1c800617 	ldw	r18,24(r3)
    eeb4:	dd000215 	stw	r20,8(sp)
    eeb8:	dc400115 	stw	r17,4(sp)
    eebc:	dc000015 	stw	r16,0(sp)
    eec0:	983ee83a 	callr	r19
    eec4:	01400284 	movi	r5,10
    eec8:	01000044 	movi	r4,1
    eecc:	1000241e 	bne	r2,zero,ef60 <_Unwind_ForcedUnwind_Phase2+0x108>
    eed0:	90000726 	beq	r18,zero,eef0 <_Unwind_ForcedUnwind_Phase2+0x98>
    eed4:	81800017 	ldw	r6,0(r16)
    eed8:	81c00117 	ldw	r7,4(r16)
    eedc:	dc400115 	stw	r17,4(sp)
    eee0:	dc000015 	stw	r16,0(sp)
    eee4:	903ee83a 	callr	r18
    eee8:	15401f26 	beq	r2,r21,ef68 <_Unwind_ForcedUnwind_Phase2+0x110>
    eeec:	15c01c1e 	bne	r2,r23,ef60 <_Unwind_ForcedUnwind_Phase2+0x108>
    eef0:	88800017 	ldw	r2,0(r17)
    eef4:	10c00017 	ldw	r3,0(r2)
    eef8:	b0c00015 	stw	r3,0(r22)
    eefc:	88c00015 	stw	r3,0(r17)
    ef00:	01400284 	movi	r5,10
    ef04:	01000044 	movi	r4,1
    ef08:	183fe71e 	bne	r3,zero,eea8 <__alt_data_end+0xfc00eea8>
    ef0c:	81800017 	ldw	r6,0(r16)
    ef10:	81c00117 	ldw	r7,4(r16)
    ef14:	01400684 	movi	r5,26
    ef18:	dd000215 	stw	r20,8(sp)
    ef1c:	dc400115 	stw	r17,4(sp)
    ef20:	dc000015 	stw	r16,0(sp)
    ef24:	01000044 	movi	r4,1
    ef28:	983ee83a 	callr	r19
    ef2c:	10000c1e 	bne	r2,zero,ef60 <_Unwind_ForcedUnwind_Phase2+0x108>
    ef30:	00800144 	movi	r2,5
    ef34:	dfc00b17 	ldw	ra,44(sp)
    ef38:	ddc00a17 	ldw	r23,40(sp)
    ef3c:	dd800917 	ldw	r22,36(sp)
    ef40:	dd400817 	ldw	r21,32(sp)
    ef44:	dd000717 	ldw	r20,28(sp)
    ef48:	dcc00617 	ldw	r19,24(sp)
    ef4c:	dc800517 	ldw	r18,20(sp)
    ef50:	dc400417 	ldw	r17,16(sp)
    ef54:	dc000317 	ldw	r16,12(sp)
    ef58:	dec00c04 	addi	sp,sp,48
    ef5c:	f800283a 	ret
    ef60:	00800084 	movi	r2,2
    ef64:	003ff306 	br	ef34 <__alt_data_end+0xfc00ef34>
    ef68:	a805883a 	mov	r2,r21
    ef6c:	003ff106 	br	ef34 <__alt_data_end+0xfc00ef34>

0000ef70 <_Unwind_RaiseException_Phase2>:
    ef70:	28c00017 	ldw	r3,0(r5)
    ef74:	defff804 	addi	sp,sp,-32
    ef78:	dcc00515 	stw	r19,20(sp)
    ef7c:	dc800415 	stw	r18,16(sp)
    ef80:	dc400315 	stw	r17,12(sp)
    ef84:	dc000215 	stw	r16,8(sp)
    ef88:	dfc00715 	stw	ra,28(sp)
    ef8c:	dd000615 	stw	r20,24(sp)
    ef90:	2823883a 	mov	r17,r5
    ef94:	2021883a 	mov	r16,r4
    ef98:	048001c4 	movi	r18,7
    ef9c:	04c00204 	movi	r19,8
    efa0:	18001326 	beq	r3,zero,eff0 <_Unwind_RaiseException_Phase2+0x80>
    efa4:	81000417 	ldw	r4,16(r16)
    efa8:	1a000617 	ldw	r8,24(r3)
    efac:	19001926 	beq	r3,r4,f014 <_Unwind_RaiseException_Phase2+0xa4>
    efb0:	40000c26 	beq	r8,zero,efe4 <_Unwind_RaiseException_Phase2+0x74>
    efb4:	01400084 	movi	r5,2
    efb8:	0029883a 	mov	r20,zero
    efbc:	81800017 	ldw	r6,0(r16)
    efc0:	81c00117 	ldw	r7,4(r16)
    efc4:	01000044 	movi	r4,1
    efc8:	dc400115 	stw	r17,4(sp)
    efcc:	dc000015 	stw	r16,0(sp)
    efd0:	403ee83a 	callr	r8
    efd4:	14801326 	beq	r2,r18,f024 <_Unwind_RaiseException_Phase2+0xb4>
    efd8:	14c0051e 	bne	r2,r19,eff0 <_Unwind_RaiseException_Phase2+0x80>
    efdc:	a000131e 	bne	r20,zero,f02c <_Unwind_RaiseException_Phase2+0xbc>
    efe0:	88c00017 	ldw	r3,0(r17)
    efe4:	18c00017 	ldw	r3,0(r3)
    efe8:	88c00015 	stw	r3,0(r17)
    efec:	183fed1e 	bne	r3,zero,efa4 <__alt_data_end+0xfc00efa4>
    eff0:	00800084 	movi	r2,2
    eff4:	dfc00717 	ldw	ra,28(sp)
    eff8:	dd000617 	ldw	r20,24(sp)
    effc:	dcc00517 	ldw	r19,20(sp)
    f000:	dc800417 	ldw	r18,16(sp)
    f004:	dc400317 	ldw	r17,12(sp)
    f008:	dc000217 	ldw	r16,8(sp)
    f00c:	dec00804 	addi	sp,sp,32
    f010:	f800283a 	ret
    f014:	40000526 	beq	r8,zero,f02c <_Unwind_RaiseException_Phase2+0xbc>
    f018:	01400184 	movi	r5,6
    f01c:	05000104 	movi	r20,4
    f020:	003fe606 	br	efbc <__alt_data_end+0xfc00efbc>
    f024:	9005883a 	mov	r2,r18
    f028:	003ff206 	br	eff4 <__alt_data_end+0xfc00eff4>
    f02c:	000f3dc0 	call	f3dc <abort>

0000f030 <uw_install_context.isra.1>:
    f030:	20c00017 	ldw	r3,0(r4)
    f034:	deffff04 	addi	sp,sp,-4
    f038:	014000f4 	movhi	r5,3
    f03c:	19000917 	ldw	r4,36(r3)
    f040:	df000015 	stw	fp,0(sp)
    f044:	18800804 	addi	r2,r3,32
    f048:	d839883a 	mov	fp,sp
    f04c:	29479004 	addi	r5,r5,7744
    f050:	28c00015 	stw	r3,0(r5)
    f054:	17000017 	ldw	fp,0(r2)
    f058:	1ec00a17 	ldw	sp,40(r3)
    f05c:	2000683a 	jmp	r4

0000f060 <_Unwind_SjLj_Register>:
    f060:	008000f4 	movhi	r2,3
    f064:	10879004 	addi	r2,r2,7744
    f068:	10c00017 	ldw	r3,0(r2)
    f06c:	11000015 	stw	r4,0(r2)
    f070:	20c00015 	stw	r3,0(r4)
    f074:	f800283a 	ret

0000f078 <_Unwind_SjLj_Unregister>:
    f078:	20c00017 	ldw	r3,0(r4)
    f07c:	008000f4 	movhi	r2,3
    f080:	10879004 	addi	r2,r2,7744
    f084:	10c00015 	stw	r3,0(r2)
    f088:	f800283a 	ret

0000f08c <_Unwind_GetGR>:
    f08c:	20800017 	ldw	r2,0(r4)
    f090:	29400084 	addi	r5,r5,2
    f094:	294b883a 	add	r5,r5,r5
    f098:	294b883a 	add	r5,r5,r5
    f09c:	114b883a 	add	r5,r2,r5
    f0a0:	28800017 	ldw	r2,0(r5)
    f0a4:	f800283a 	ret

0000f0a8 <_Unwind_GetCFA>:
    f0a8:	20800017 	ldw	r2,0(r4)
    f0ac:	10000226 	beq	r2,zero,f0b8 <_Unwind_GetCFA+0x10>
    f0b0:	10800a17 	ldw	r2,40(r2)
    f0b4:	f800283a 	ret
    f0b8:	0005883a 	mov	r2,zero
    f0bc:	f800283a 	ret

0000f0c0 <_Unwind_SetGR>:
    f0c0:	20800017 	ldw	r2,0(r4)
    f0c4:	29400084 	addi	r5,r5,2
    f0c8:	294b883a 	add	r5,r5,r5
    f0cc:	294b883a 	add	r5,r5,r5
    f0d0:	114b883a 	add	r5,r2,r5
    f0d4:	29800015 	stw	r6,0(r5)
    f0d8:	f800283a 	ret

0000f0dc <_Unwind_GetIP>:
    f0dc:	20800017 	ldw	r2,0(r4)
    f0e0:	10800117 	ldw	r2,4(r2)
    f0e4:	10800044 	addi	r2,r2,1
    f0e8:	f800283a 	ret

0000f0ec <_Unwind_GetIPInfo>:
    f0ec:	20800017 	ldw	r2,0(r4)
    f0f0:	28000015 	stw	zero,0(r5)
    f0f4:	10000326 	beq	r2,zero,f104 <_Unwind_GetIPInfo+0x18>
    f0f8:	10800117 	ldw	r2,4(r2)
    f0fc:	10800044 	addi	r2,r2,1
    f100:	f800283a 	ret
    f104:	0005883a 	mov	r2,zero
    f108:	f800283a 	ret

0000f10c <_Unwind_SetIP>:
    f10c:	20800017 	ldw	r2,0(r4)
    f110:	297fffc4 	addi	r5,r5,-1
    f114:	11400115 	stw	r5,4(r2)
    f118:	f800283a 	ret

0000f11c <_Unwind_GetLanguageSpecificData>:
    f11c:	20800017 	ldw	r2,0(r4)
    f120:	10800717 	ldw	r2,28(r2)
    f124:	f800283a 	ret

0000f128 <_Unwind_GetRegionStart>:
    f128:	0005883a 	mov	r2,zero
    f12c:	f800283a 	ret

0000f130 <_Unwind_FindEnclosingFunction>:
    f130:	0005883a 	mov	r2,zero
    f134:	f800283a 	ret

0000f138 <_Unwind_GetDataRelBase>:
    f138:	0005883a 	mov	r2,zero
    f13c:	f800283a 	ret

0000f140 <_Unwind_GetTextRelBase>:
    f140:	0005883a 	mov	r2,zero
    f144:	f800283a 	ret

0000f148 <_Unwind_SjLj_RaiseException>:
    f148:	008000f4 	movhi	r2,3
    f14c:	defff804 	addi	sp,sp,-32
    f150:	10879004 	addi	r2,r2,7744
    f154:	dc800515 	stw	r18,20(sp)
    f158:	14800017 	ldw	r18,0(r2)
    f15c:	dfc00715 	stw	ra,28(sp)
    f160:	dcc00615 	stw	r19,24(sp)
    f164:	dc400415 	stw	r17,16(sp)
    f168:	dc000315 	stw	r16,12(sp)
    f16c:	dc800215 	stw	r18,8(sp)
    f170:	90001426 	beq	r18,zero,f1c4 <_Unwind_SjLj_RaiseException+0x7c>
    f174:	2021883a 	mov	r16,r4
    f178:	9005883a 	mov	r2,r18
    f17c:	04400184 	movi	r17,6
    f180:	04c00204 	movi	r19,8
    f184:	10800617 	ldw	r2,24(r2)
    f188:	10000a26 	beq	r2,zero,f1b4 <_Unwind_SjLj_RaiseException+0x6c>
    f18c:	81800017 	ldw	r6,0(r16)
    f190:	81c00117 	ldw	r7,4(r16)
    f194:	01400044 	movi	r5,1
    f198:	d8c00204 	addi	r3,sp,8
    f19c:	d8c00115 	stw	r3,4(sp)
    f1a0:	dc000015 	stw	r16,0(sp)
    f1a4:	2809883a 	mov	r4,r5
    f1a8:	103ee83a 	callr	r2
    f1ac:	14400d26 	beq	r2,r17,f1e4 <_Unwind_SjLj_RaiseException+0x9c>
    f1b0:	14c0171e 	bne	r2,r19,f210 <_Unwind_SjLj_RaiseException+0xc8>
    f1b4:	d8800217 	ldw	r2,8(sp)
    f1b8:	10800017 	ldw	r2,0(r2)
    f1bc:	d8800215 	stw	r2,8(sp)
    f1c0:	103ff01e 	bne	r2,zero,f184 <__alt_data_end+0xfc00f184>
    f1c4:	00800144 	movi	r2,5
    f1c8:	dfc00717 	ldw	ra,28(sp)
    f1cc:	dcc00617 	ldw	r19,24(sp)
    f1d0:	dc800517 	ldw	r18,20(sp)
    f1d4:	dc400417 	ldw	r17,16(sp)
    f1d8:	dc000317 	ldw	r16,12(sp)
    f1dc:	dec00804 	addi	sp,sp,32
    f1e0:	f800283a 	ret
    f1e4:	d8800217 	ldw	r2,8(sp)
    f1e8:	80000315 	stw	zero,12(r16)
    f1ec:	d9400204 	addi	r5,sp,8
    f1f0:	80800415 	stw	r2,16(r16)
    f1f4:	8009883a 	mov	r4,r16
    f1f8:	dc800215 	stw	r18,8(sp)
    f1fc:	000ef700 	call	ef70 <_Unwind_RaiseException_Phase2>
    f200:	00c001c4 	movi	r3,7
    f204:	10fff01e 	bne	r2,r3,f1c8 <__alt_data_end+0xfc00f1c8>
    f208:	d9000204 	addi	r4,sp,8
    f20c:	000f0300 	call	f030 <uw_install_context.isra.1>
    f210:	008000c4 	movi	r2,3
    f214:	003fec06 	br	f1c8 <__alt_data_end+0xfc00f1c8>

0000f218 <_Unwind_SjLj_ForcedUnwind>:
    f218:	00c000f4 	movhi	r3,3
    f21c:	18c79004 	addi	r3,r3,7744
    f220:	defffe04 	addi	sp,sp,-8
    f224:	18c00017 	ldw	r3,0(r3)
    f228:	dfc00115 	stw	ra,4(sp)
    f22c:	21400315 	stw	r5,12(r4)
    f230:	21800415 	stw	r6,16(r4)
    f234:	d80b883a 	mov	r5,sp
    f238:	d8c00015 	stw	r3,0(sp)
    f23c:	000ee580 	call	ee58 <_Unwind_ForcedUnwind_Phase2>
    f240:	00c001c4 	movi	r3,7
    f244:	10c00326 	beq	r2,r3,f254 <_Unwind_SjLj_ForcedUnwind+0x3c>
    f248:	dfc00117 	ldw	ra,4(sp)
    f24c:	dec00204 	addi	sp,sp,8
    f250:	f800283a 	ret
    f254:	d809883a 	mov	r4,sp
    f258:	000f0300 	call	f030 <uw_install_context.isra.1>

0000f25c <_Unwind_SjLj_Resume>:
    f25c:	00c000f4 	movhi	r3,3
    f260:	18c79004 	addi	r3,r3,7744
    f264:	18c00017 	ldw	r3,0(r3)
    f268:	20800317 	ldw	r2,12(r4)
    f26c:	defffe04 	addi	sp,sp,-8
    f270:	dfc00115 	stw	ra,4(sp)
    f274:	d8c00015 	stw	r3,0(sp)
    f278:	d80b883a 	mov	r5,sp
    f27c:	1000041e 	bne	r2,zero,f290 <_Unwind_SjLj_Resume+0x34>
    f280:	000ef700 	call	ef70 <_Unwind_RaiseException_Phase2>
    f284:	00c001c4 	movi	r3,7
    f288:	10c00326 	beq	r2,r3,f298 <_Unwind_SjLj_Resume+0x3c>
    f28c:	000f3dc0 	call	f3dc <abort>
    f290:	000ee580 	call	ee58 <_Unwind_ForcedUnwind_Phase2>
    f294:	003ffb06 	br	f284 <__alt_data_end+0xfc00f284>
    f298:	d809883a 	mov	r4,sp
    f29c:	000f0300 	call	f030 <uw_install_context.isra.1>

0000f2a0 <_Unwind_SjLj_Resume_or_Rethrow>:
    f2a0:	20800317 	ldw	r2,12(r4)
    f2a4:	defffe04 	addi	sp,sp,-8
    f2a8:	dfc00115 	stw	ra,4(sp)
    f2ac:	1000041e 	bne	r2,zero,f2c0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    f2b0:	000f1480 	call	f148 <_Unwind_SjLj_RaiseException>
    f2b4:	dfc00117 	ldw	ra,4(sp)
    f2b8:	dec00204 	addi	sp,sp,8
    f2bc:	f800283a 	ret
    f2c0:	008000f4 	movhi	r2,3
    f2c4:	10879004 	addi	r2,r2,7744
    f2c8:	10800017 	ldw	r2,0(r2)
    f2cc:	d80b883a 	mov	r5,sp
    f2d0:	d8800015 	stw	r2,0(sp)
    f2d4:	000ee580 	call	ee58 <_Unwind_ForcedUnwind_Phase2>
    f2d8:	00c001c4 	movi	r3,7
    f2dc:	10c00126 	beq	r2,r3,f2e4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    f2e0:	000f3dc0 	call	f3dc <abort>
    f2e4:	d809883a 	mov	r4,sp
    f2e8:	000f0300 	call	f030 <uw_install_context.isra.1>

0000f2ec <_Unwind_DeleteException>:
    f2ec:	20800217 	ldw	r2,8(r4)
    f2f0:	10000326 	beq	r2,zero,f300 <_Unwind_DeleteException+0x14>
    f2f4:	200b883a 	mov	r5,r4
    f2f8:	01000044 	movi	r4,1
    f2fc:	1000683a 	jmp	r2
    f300:	f800283a 	ret

0000f304 <_Unwind_Backtrace>:
    f304:	008000f4 	movhi	r2,3
    f308:	10879004 	addi	r2,r2,7744
    f30c:	10800017 	ldw	r2,0(r2)
    f310:	defffc04 	addi	sp,sp,-16
    f314:	dc400215 	stw	r17,8(sp)
    f318:	dc000115 	stw	r16,4(sp)
    f31c:	dfc00315 	stw	ra,12(sp)
    f320:	2023883a 	mov	r17,r4
    f324:	2821883a 	mov	r16,r5
    f328:	d8800015 	stw	r2,0(sp)
    f32c:	00000506 	br	f344 <_Unwind_Backtrace+0x40>
    f330:	883ee83a 	callr	r17
    f334:	10000e1e 	bne	r2,zero,f370 <_Unwind_Backtrace+0x6c>
    f338:	d8800017 	ldw	r2,0(sp)
    f33c:	10800017 	ldw	r2,0(r2)
    f340:	d8800015 	stw	r2,0(sp)
    f344:	800b883a 	mov	r5,r16
    f348:	d809883a 	mov	r4,sp
    f34c:	103ff81e 	bne	r2,zero,f330 <__alt_data_end+0xfc00f330>
    f350:	883ee83a 	callr	r17
    f354:	1000061e 	bne	r2,zero,f370 <_Unwind_Backtrace+0x6c>
    f358:	00800144 	movi	r2,5
    f35c:	dfc00317 	ldw	ra,12(sp)
    f360:	dc400217 	ldw	r17,8(sp)
    f364:	dc000117 	ldw	r16,4(sp)
    f368:	dec00404 	addi	sp,sp,16
    f36c:	f800283a 	ret
    f370:	008000c4 	movi	r2,3
    f374:	003ff906 	br	f35c <__alt_data_end+0xfc00f35c>

0000f378 <__clzsi2>:
    f378:	00bfffd4 	movui	r2,65535
    f37c:	11000536 	bltu	r2,r4,f394 <__clzsi2+0x1c>
    f380:	00803fc4 	movi	r2,255
    f384:	11000f36 	bltu	r2,r4,f3c4 <__clzsi2+0x4c>
    f388:	00800804 	movi	r2,32
    f38c:	0007883a 	mov	r3,zero
    f390:	00000506 	br	f3a8 <__clzsi2+0x30>
    f394:	00804034 	movhi	r2,256
    f398:	10bfffc4 	addi	r2,r2,-1
    f39c:	11000c2e 	bgeu	r2,r4,f3d0 <__clzsi2+0x58>
    f3a0:	00800204 	movi	r2,8
    f3a4:	00c00604 	movi	r3,24
    f3a8:	20c8d83a 	srl	r4,r4,r3
    f3ac:	00c000f4 	movhi	r3,3
    f3b0:	18edb204 	addi	r3,r3,-18744
    f3b4:	1909883a 	add	r4,r3,r4
    f3b8:	20c00003 	ldbu	r3,0(r4)
    f3bc:	10c5c83a 	sub	r2,r2,r3
    f3c0:	f800283a 	ret
    f3c4:	00800604 	movi	r2,24
    f3c8:	00c00204 	movi	r3,8
    f3cc:	003ff606 	br	f3a8 <__alt_data_end+0xfc00f3a8>
    f3d0:	00800404 	movi	r2,16
    f3d4:	1007883a 	mov	r3,r2
    f3d8:	003ff306 	br	f3a8 <__alt_data_end+0xfc00f3a8>

0000f3dc <abort>:
    f3dc:	deffff04 	addi	sp,sp,-4
    f3e0:	01000184 	movi	r4,6
    f3e4:	dfc00015 	stw	ra,0(sp)
    f3e8:	00102ec0 	call	102ec <raise>
    f3ec:	01000044 	movi	r4,1
    f3f0:	002002c0 	call	2002c <_exit>

0000f3f4 <clock>:
    f3f4:	008000f4 	movhi	r2,3
    f3f8:	10baf904 	addi	r2,r2,-5148
    f3fc:	11000017 	ldw	r4,0(r2)
    f400:	defffb04 	addi	sp,sp,-20
    f404:	d80b883a 	mov	r5,sp
    f408:	dfc00415 	stw	ra,16(sp)
    f40c:	00128900 	call	12890 <_times_r>
    f410:	00ffffc4 	movi	r3,-1
    f414:	10c00726 	beq	r2,r3,f434 <clock+0x40>
    f418:	d8c00017 	ldw	r3,0(sp)
    f41c:	d8800117 	ldw	r2,4(sp)
    f420:	1885883a 	add	r2,r3,r2
    f424:	d8c00217 	ldw	r3,8(sp)
    f428:	10c7883a 	add	r3,r2,r3
    f42c:	d8800317 	ldw	r2,12(sp)
    f430:	1885883a 	add	r2,r3,r2
    f434:	dfc00417 	ldw	ra,16(sp)
    f438:	dec00504 	addi	sp,sp,20
    f43c:	f800283a 	ret

0000f440 <malloc>:
    f440:	008000f4 	movhi	r2,3
    f444:	10baf904 	addi	r2,r2,-5148
    f448:	200b883a 	mov	r5,r4
    f44c:	11000017 	ldw	r4,0(r2)
    f450:	000f4681 	jmpi	f468 <_malloc_r>

0000f454 <free>:
    f454:	008000f4 	movhi	r2,3
    f458:	10baf904 	addi	r2,r2,-5148
    f45c:	200b883a 	mov	r5,r4
    f460:	11000017 	ldw	r4,0(r2)
    f464:	0016dcc1 	jmpi	16dcc <_free_r>

0000f468 <_malloc_r>:
    f468:	defff504 	addi	sp,sp,-44
    f46c:	dc800315 	stw	r18,12(sp)
    f470:	dfc00a15 	stw	ra,40(sp)
    f474:	df000915 	stw	fp,36(sp)
    f478:	ddc00815 	stw	r23,32(sp)
    f47c:	dd800715 	stw	r22,28(sp)
    f480:	dd400615 	stw	r21,24(sp)
    f484:	dd000515 	stw	r20,20(sp)
    f488:	dcc00415 	stw	r19,16(sp)
    f48c:	dc400215 	stw	r17,8(sp)
    f490:	dc000115 	stw	r16,4(sp)
    f494:	288002c4 	addi	r2,r5,11
    f498:	00c00584 	movi	r3,22
    f49c:	2025883a 	mov	r18,r4
    f4a0:	18807f2e 	bgeu	r3,r2,f6a0 <_malloc_r+0x238>
    f4a4:	047ffe04 	movi	r17,-8
    f4a8:	1462703a 	and	r17,r2,r17
    f4ac:	8800a316 	blt	r17,zero,f73c <_malloc_r+0x2d4>
    f4b0:	8940a236 	bltu	r17,r5,f73c <_malloc_r+0x2d4>
    f4b4:	00206480 	call	20648 <__malloc_lock>
    f4b8:	00807dc4 	movi	r2,503
    f4bc:	1441e92e 	bgeu	r2,r17,fc64 <_malloc_r+0x7fc>
    f4c0:	8804d27a 	srli	r2,r17,9
    f4c4:	1000a126 	beq	r2,zero,f74c <_malloc_r+0x2e4>
    f4c8:	00c00104 	movi	r3,4
    f4cc:	18811e36 	bltu	r3,r2,f948 <_malloc_r+0x4e0>
    f4d0:	8804d1ba 	srli	r2,r17,6
    f4d4:	12000e44 	addi	r8,r2,57
    f4d8:	11c00e04 	addi	r7,r2,56
    f4dc:	4209883a 	add	r4,r8,r8
    f4e0:	04c000f4 	movhi	r19,3
    f4e4:	2109883a 	add	r4,r4,r4
    f4e8:	9cef9604 	addi	r19,r19,-16808
    f4ec:	2109883a 	add	r4,r4,r4
    f4f0:	9909883a 	add	r4,r19,r4
    f4f4:	24000117 	ldw	r16,4(r4)
    f4f8:	213ffe04 	addi	r4,r4,-8
    f4fc:	24009726 	beq	r4,r16,f75c <_malloc_r+0x2f4>
    f500:	80800117 	ldw	r2,4(r16)
    f504:	01bfff04 	movi	r6,-4
    f508:	014003c4 	movi	r5,15
    f50c:	1184703a 	and	r2,r2,r6
    f510:	1447c83a 	sub	r3,r2,r17
    f514:	28c00716 	blt	r5,r3,f534 <_malloc_r+0xcc>
    f518:	1800920e 	bge	r3,zero,f764 <_malloc_r+0x2fc>
    f51c:	84000317 	ldw	r16,12(r16)
    f520:	24008e26 	beq	r4,r16,f75c <_malloc_r+0x2f4>
    f524:	80800117 	ldw	r2,4(r16)
    f528:	1184703a 	and	r2,r2,r6
    f52c:	1447c83a 	sub	r3,r2,r17
    f530:	28fff90e 	bge	r5,r3,f518 <__alt_data_end+0xfc00f518>
    f534:	3809883a 	mov	r4,r7
    f538:	018000f4 	movhi	r6,3
    f53c:	9c000417 	ldw	r16,16(r19)
    f540:	31af9604 	addi	r6,r6,-16808
    f544:	32000204 	addi	r8,r6,8
    f548:	82013426 	beq	r16,r8,fa1c <_malloc_r+0x5b4>
    f54c:	80c00117 	ldw	r3,4(r16)
    f550:	00bfff04 	movi	r2,-4
    f554:	188e703a 	and	r7,r3,r2
    f558:	3c45c83a 	sub	r2,r7,r17
    f55c:	00c003c4 	movi	r3,15
    f560:	18811f16 	blt	r3,r2,f9e0 <_malloc_r+0x578>
    f564:	32000515 	stw	r8,20(r6)
    f568:	32000415 	stw	r8,16(r6)
    f56c:	10007f0e 	bge	r2,zero,f76c <_malloc_r+0x304>
    f570:	00807fc4 	movi	r2,511
    f574:	11c0fd36 	bltu	r2,r7,f96c <_malloc_r+0x504>
    f578:	3806d0fa 	srli	r3,r7,3
    f57c:	01c00044 	movi	r7,1
    f580:	30800117 	ldw	r2,4(r6)
    f584:	19400044 	addi	r5,r3,1
    f588:	294b883a 	add	r5,r5,r5
    f58c:	1807d0ba 	srai	r3,r3,2
    f590:	294b883a 	add	r5,r5,r5
    f594:	294b883a 	add	r5,r5,r5
    f598:	298b883a 	add	r5,r5,r6
    f59c:	38c6983a 	sll	r3,r7,r3
    f5a0:	29c00017 	ldw	r7,0(r5)
    f5a4:	2a7ffe04 	addi	r9,r5,-8
    f5a8:	1886b03a 	or	r3,r3,r2
    f5ac:	82400315 	stw	r9,12(r16)
    f5b0:	81c00215 	stw	r7,8(r16)
    f5b4:	30c00115 	stw	r3,4(r6)
    f5b8:	2c000015 	stw	r16,0(r5)
    f5bc:	3c000315 	stw	r16,12(r7)
    f5c0:	2005d0ba 	srai	r2,r4,2
    f5c4:	01400044 	movi	r5,1
    f5c8:	288a983a 	sll	r5,r5,r2
    f5cc:	19406f36 	bltu	r3,r5,f78c <_malloc_r+0x324>
    f5d0:	28c4703a 	and	r2,r5,r3
    f5d4:	10000a1e 	bne	r2,zero,f600 <_malloc_r+0x198>
    f5d8:	00bfff04 	movi	r2,-4
    f5dc:	294b883a 	add	r5,r5,r5
    f5e0:	2088703a 	and	r4,r4,r2
    f5e4:	28c4703a 	and	r2,r5,r3
    f5e8:	21000104 	addi	r4,r4,4
    f5ec:	1000041e 	bne	r2,zero,f600 <_malloc_r+0x198>
    f5f0:	294b883a 	add	r5,r5,r5
    f5f4:	28c4703a 	and	r2,r5,r3
    f5f8:	21000104 	addi	r4,r4,4
    f5fc:	103ffc26 	beq	r2,zero,f5f0 <__alt_data_end+0xfc00f5f0>
    f600:	02bfff04 	movi	r10,-4
    f604:	024003c4 	movi	r9,15
    f608:	21800044 	addi	r6,r4,1
    f60c:	318d883a 	add	r6,r6,r6
    f610:	318d883a 	add	r6,r6,r6
    f614:	318d883a 	add	r6,r6,r6
    f618:	998d883a 	add	r6,r19,r6
    f61c:	333ffe04 	addi	r12,r6,-8
    f620:	2017883a 	mov	r11,r4
    f624:	31800104 	addi	r6,r6,4
    f628:	34000017 	ldw	r16,0(r6)
    f62c:	31fffd04 	addi	r7,r6,-12
    f630:	81c0041e 	bne	r16,r7,f644 <_malloc_r+0x1dc>
    f634:	0000fb06 	br	fa24 <_malloc_r+0x5bc>
    f638:	1801030e 	bge	r3,zero,fa48 <_malloc_r+0x5e0>
    f63c:	84000317 	ldw	r16,12(r16)
    f640:	81c0f826 	beq	r16,r7,fa24 <_malloc_r+0x5bc>
    f644:	80800117 	ldw	r2,4(r16)
    f648:	1284703a 	and	r2,r2,r10
    f64c:	1447c83a 	sub	r3,r2,r17
    f650:	48fff90e 	bge	r9,r3,f638 <__alt_data_end+0xfc00f638>
    f654:	80800317 	ldw	r2,12(r16)
    f658:	81000217 	ldw	r4,8(r16)
    f65c:	89400054 	ori	r5,r17,1
    f660:	81400115 	stw	r5,4(r16)
    f664:	20800315 	stw	r2,12(r4)
    f668:	11000215 	stw	r4,8(r2)
    f66c:	8463883a 	add	r17,r16,r17
    f670:	9c400515 	stw	r17,20(r19)
    f674:	9c400415 	stw	r17,16(r19)
    f678:	18800054 	ori	r2,r3,1
    f67c:	88800115 	stw	r2,4(r17)
    f680:	8a000315 	stw	r8,12(r17)
    f684:	8a000215 	stw	r8,8(r17)
    f688:	88e3883a 	add	r17,r17,r3
    f68c:	88c00015 	stw	r3,0(r17)
    f690:	9009883a 	mov	r4,r18
    f694:	002066c0 	call	2066c <__malloc_unlock>
    f698:	80800204 	addi	r2,r16,8
    f69c:	00001b06 	br	f70c <_malloc_r+0x2a4>
    f6a0:	04400404 	movi	r17,16
    f6a4:	89402536 	bltu	r17,r5,f73c <_malloc_r+0x2d4>
    f6a8:	00206480 	call	20648 <__malloc_lock>
    f6ac:	00800184 	movi	r2,6
    f6b0:	01000084 	movi	r4,2
    f6b4:	04c000f4 	movhi	r19,3
    f6b8:	1085883a 	add	r2,r2,r2
    f6bc:	9cef9604 	addi	r19,r19,-16808
    f6c0:	1085883a 	add	r2,r2,r2
    f6c4:	9885883a 	add	r2,r19,r2
    f6c8:	14000117 	ldw	r16,4(r2)
    f6cc:	10fffe04 	addi	r3,r2,-8
    f6d0:	80c0d926 	beq	r16,r3,fa38 <_malloc_r+0x5d0>
    f6d4:	80c00117 	ldw	r3,4(r16)
    f6d8:	81000317 	ldw	r4,12(r16)
    f6dc:	00bfff04 	movi	r2,-4
    f6e0:	1884703a 	and	r2,r3,r2
    f6e4:	81400217 	ldw	r5,8(r16)
    f6e8:	8085883a 	add	r2,r16,r2
    f6ec:	10c00117 	ldw	r3,4(r2)
    f6f0:	29000315 	stw	r4,12(r5)
    f6f4:	21400215 	stw	r5,8(r4)
    f6f8:	18c00054 	ori	r3,r3,1
    f6fc:	10c00115 	stw	r3,4(r2)
    f700:	9009883a 	mov	r4,r18
    f704:	002066c0 	call	2066c <__malloc_unlock>
    f708:	80800204 	addi	r2,r16,8
    f70c:	dfc00a17 	ldw	ra,40(sp)
    f710:	df000917 	ldw	fp,36(sp)
    f714:	ddc00817 	ldw	r23,32(sp)
    f718:	dd800717 	ldw	r22,28(sp)
    f71c:	dd400617 	ldw	r21,24(sp)
    f720:	dd000517 	ldw	r20,20(sp)
    f724:	dcc00417 	ldw	r19,16(sp)
    f728:	dc800317 	ldw	r18,12(sp)
    f72c:	dc400217 	ldw	r17,8(sp)
    f730:	dc000117 	ldw	r16,4(sp)
    f734:	dec00b04 	addi	sp,sp,44
    f738:	f800283a 	ret
    f73c:	00800304 	movi	r2,12
    f740:	90800015 	stw	r2,0(r18)
    f744:	0005883a 	mov	r2,zero
    f748:	003ff006 	br	f70c <__alt_data_end+0xfc00f70c>
    f74c:	01002004 	movi	r4,128
    f750:	02001004 	movi	r8,64
    f754:	01c00fc4 	movi	r7,63
    f758:	003f6106 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    f75c:	4009883a 	mov	r4,r8
    f760:	003f7506 	br	f538 <__alt_data_end+0xfc00f538>
    f764:	81000317 	ldw	r4,12(r16)
    f768:	003fde06 	br	f6e4 <__alt_data_end+0xfc00f6e4>
    f76c:	81c5883a 	add	r2,r16,r7
    f770:	11400117 	ldw	r5,4(r2)
    f774:	9009883a 	mov	r4,r18
    f778:	29400054 	ori	r5,r5,1
    f77c:	11400115 	stw	r5,4(r2)
    f780:	002066c0 	call	2066c <__malloc_unlock>
    f784:	80800204 	addi	r2,r16,8
    f788:	003fe006 	br	f70c <__alt_data_end+0xfc00f70c>
    f78c:	9c000217 	ldw	r16,8(r19)
    f790:	00bfff04 	movi	r2,-4
    f794:	85800117 	ldw	r22,4(r16)
    f798:	b0ac703a 	and	r22,r22,r2
    f79c:	b4400336 	bltu	r22,r17,f7ac <_malloc_r+0x344>
    f7a0:	b445c83a 	sub	r2,r22,r17
    f7a4:	00c003c4 	movi	r3,15
    f7a8:	18805d16 	blt	r3,r2,f920 <_malloc_r+0x4b8>
    f7ac:	05c000f4 	movhi	r23,3
    f7b0:	008000f4 	movhi	r2,3
    f7b4:	10879304 	addi	r2,r2,7756
    f7b8:	bdfafa04 	addi	r23,r23,-5144
    f7bc:	15400017 	ldw	r21,0(r2)
    f7c0:	b8c00017 	ldw	r3,0(r23)
    f7c4:	00bfffc4 	movi	r2,-1
    f7c8:	858d883a 	add	r6,r16,r22
    f7cc:	8d6b883a 	add	r21,r17,r21
    f7d0:	1880ea26 	beq	r3,r2,fb7c <_malloc_r+0x714>
    f7d4:	ad4403c4 	addi	r21,r21,4111
    f7d8:	00bc0004 	movi	r2,-4096
    f7dc:	a8aa703a 	and	r21,r21,r2
    f7e0:	a80b883a 	mov	r5,r21
    f7e4:	9009883a 	mov	r4,r18
    f7e8:	d9800015 	stw	r6,0(sp)
    f7ec:	00100440 	call	10044 <_sbrk_r>
    f7f0:	1029883a 	mov	r20,r2
    f7f4:	00bfffc4 	movi	r2,-1
    f7f8:	d9800017 	ldw	r6,0(sp)
    f7fc:	a080e826 	beq	r20,r2,fba0 <_malloc_r+0x738>
    f800:	a180a636 	bltu	r20,r6,fa9c <_malloc_r+0x634>
    f804:	070000f4 	movhi	fp,3
    f808:	e707eb04 	addi	fp,fp,8108
    f80c:	e0800017 	ldw	r2,0(fp)
    f810:	a887883a 	add	r3,r21,r2
    f814:	e0c00015 	stw	r3,0(fp)
    f818:	3500e626 	beq	r6,r20,fbb4 <_malloc_r+0x74c>
    f81c:	b9000017 	ldw	r4,0(r23)
    f820:	00bfffc4 	movi	r2,-1
    f824:	2080ee26 	beq	r4,r2,fbe0 <_malloc_r+0x778>
    f828:	a185c83a 	sub	r2,r20,r6
    f82c:	10c5883a 	add	r2,r2,r3
    f830:	e0800015 	stw	r2,0(fp)
    f834:	a0c001cc 	andi	r3,r20,7
    f838:	1800bc26 	beq	r3,zero,fb2c <_malloc_r+0x6c4>
    f83c:	a0e9c83a 	sub	r20,r20,r3
    f840:	00840204 	movi	r2,4104
    f844:	a5000204 	addi	r20,r20,8
    f848:	10c7c83a 	sub	r3,r2,r3
    f84c:	a545883a 	add	r2,r20,r21
    f850:	1083ffcc 	andi	r2,r2,4095
    f854:	18abc83a 	sub	r21,r3,r2
    f858:	a80b883a 	mov	r5,r21
    f85c:	9009883a 	mov	r4,r18
    f860:	00100440 	call	10044 <_sbrk_r>
    f864:	00ffffc4 	movi	r3,-1
    f868:	10c0e126 	beq	r2,r3,fbf0 <_malloc_r+0x788>
    f86c:	1505c83a 	sub	r2,r2,r20
    f870:	1545883a 	add	r2,r2,r21
    f874:	10800054 	ori	r2,r2,1
    f878:	e0c00017 	ldw	r3,0(fp)
    f87c:	9d000215 	stw	r20,8(r19)
    f880:	a0800115 	stw	r2,4(r20)
    f884:	a8c7883a 	add	r3,r21,r3
    f888:	e0c00015 	stw	r3,0(fp)
    f88c:	84c00e26 	beq	r16,r19,f8c8 <_malloc_r+0x460>
    f890:	018003c4 	movi	r6,15
    f894:	3580a72e 	bgeu	r6,r22,fb34 <_malloc_r+0x6cc>
    f898:	81400117 	ldw	r5,4(r16)
    f89c:	013ffe04 	movi	r4,-8
    f8a0:	b0bffd04 	addi	r2,r22,-12
    f8a4:	1104703a 	and	r2,r2,r4
    f8a8:	2900004c 	andi	r4,r5,1
    f8ac:	2088b03a 	or	r4,r4,r2
    f8b0:	81000115 	stw	r4,4(r16)
    f8b4:	01400144 	movi	r5,5
    f8b8:	8089883a 	add	r4,r16,r2
    f8bc:	21400115 	stw	r5,4(r4)
    f8c0:	21400215 	stw	r5,8(r4)
    f8c4:	3080cd36 	bltu	r6,r2,fbfc <_malloc_r+0x794>
    f8c8:	008000f4 	movhi	r2,3
    f8cc:	10879204 	addi	r2,r2,7752
    f8d0:	11000017 	ldw	r4,0(r2)
    f8d4:	20c0012e 	bgeu	r4,r3,f8dc <_malloc_r+0x474>
    f8d8:	10c00015 	stw	r3,0(r2)
    f8dc:	008000f4 	movhi	r2,3
    f8e0:	10879104 	addi	r2,r2,7748
    f8e4:	11000017 	ldw	r4,0(r2)
    f8e8:	9c000217 	ldw	r16,8(r19)
    f8ec:	20c0012e 	bgeu	r4,r3,f8f4 <_malloc_r+0x48c>
    f8f0:	10c00015 	stw	r3,0(r2)
    f8f4:	80c00117 	ldw	r3,4(r16)
    f8f8:	00bfff04 	movi	r2,-4
    f8fc:	1886703a 	and	r3,r3,r2
    f900:	1c45c83a 	sub	r2,r3,r17
    f904:	1c400236 	bltu	r3,r17,f910 <_malloc_r+0x4a8>
    f908:	00c003c4 	movi	r3,15
    f90c:	18800416 	blt	r3,r2,f920 <_malloc_r+0x4b8>
    f910:	9009883a 	mov	r4,r18
    f914:	002066c0 	call	2066c <__malloc_unlock>
    f918:	0005883a 	mov	r2,zero
    f91c:	003f7b06 	br	f70c <__alt_data_end+0xfc00f70c>
    f920:	88c00054 	ori	r3,r17,1
    f924:	80c00115 	stw	r3,4(r16)
    f928:	8463883a 	add	r17,r16,r17
    f92c:	10800054 	ori	r2,r2,1
    f930:	9c400215 	stw	r17,8(r19)
    f934:	88800115 	stw	r2,4(r17)
    f938:	9009883a 	mov	r4,r18
    f93c:	002066c0 	call	2066c <__malloc_unlock>
    f940:	80800204 	addi	r2,r16,8
    f944:	003f7106 	br	f70c <__alt_data_end+0xfc00f70c>
    f948:	00c00504 	movi	r3,20
    f94c:	18804a2e 	bgeu	r3,r2,fa78 <_malloc_r+0x610>
    f950:	00c01504 	movi	r3,84
    f954:	18806e36 	bltu	r3,r2,fb10 <_malloc_r+0x6a8>
    f958:	8804d33a 	srli	r2,r17,12
    f95c:	12001bc4 	addi	r8,r2,111
    f960:	11c01b84 	addi	r7,r2,110
    f964:	4209883a 	add	r4,r8,r8
    f968:	003edd06 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    f96c:	3804d27a 	srli	r2,r7,9
    f970:	00c00104 	movi	r3,4
    f974:	1880442e 	bgeu	r3,r2,fa88 <_malloc_r+0x620>
    f978:	00c00504 	movi	r3,20
    f97c:	18808136 	bltu	r3,r2,fb84 <_malloc_r+0x71c>
    f980:	11401704 	addi	r5,r2,92
    f984:	10c016c4 	addi	r3,r2,91
    f988:	294b883a 	add	r5,r5,r5
    f98c:	294b883a 	add	r5,r5,r5
    f990:	294b883a 	add	r5,r5,r5
    f994:	994b883a 	add	r5,r19,r5
    f998:	28800017 	ldw	r2,0(r5)
    f99c:	018000f4 	movhi	r6,3
    f9a0:	297ffe04 	addi	r5,r5,-8
    f9a4:	31af9604 	addi	r6,r6,-16808
    f9a8:	28806526 	beq	r5,r2,fb40 <_malloc_r+0x6d8>
    f9ac:	01bfff04 	movi	r6,-4
    f9b0:	10c00117 	ldw	r3,4(r2)
    f9b4:	1986703a 	and	r3,r3,r6
    f9b8:	38c0022e 	bgeu	r7,r3,f9c4 <_malloc_r+0x55c>
    f9bc:	10800217 	ldw	r2,8(r2)
    f9c0:	28bffb1e 	bne	r5,r2,f9b0 <__alt_data_end+0xfc00f9b0>
    f9c4:	11400317 	ldw	r5,12(r2)
    f9c8:	98c00117 	ldw	r3,4(r19)
    f9cc:	81400315 	stw	r5,12(r16)
    f9d0:	80800215 	stw	r2,8(r16)
    f9d4:	2c000215 	stw	r16,8(r5)
    f9d8:	14000315 	stw	r16,12(r2)
    f9dc:	003ef806 	br	f5c0 <__alt_data_end+0xfc00f5c0>
    f9e0:	88c00054 	ori	r3,r17,1
    f9e4:	80c00115 	stw	r3,4(r16)
    f9e8:	8463883a 	add	r17,r16,r17
    f9ec:	34400515 	stw	r17,20(r6)
    f9f0:	34400415 	stw	r17,16(r6)
    f9f4:	10c00054 	ori	r3,r2,1
    f9f8:	8a000315 	stw	r8,12(r17)
    f9fc:	8a000215 	stw	r8,8(r17)
    fa00:	88c00115 	stw	r3,4(r17)
    fa04:	88a3883a 	add	r17,r17,r2
    fa08:	88800015 	stw	r2,0(r17)
    fa0c:	9009883a 	mov	r4,r18
    fa10:	002066c0 	call	2066c <__malloc_unlock>
    fa14:	80800204 	addi	r2,r16,8
    fa18:	003f3c06 	br	f70c <__alt_data_end+0xfc00f70c>
    fa1c:	30c00117 	ldw	r3,4(r6)
    fa20:	003ee706 	br	f5c0 <__alt_data_end+0xfc00f5c0>
    fa24:	5ac00044 	addi	r11,r11,1
    fa28:	588000cc 	andi	r2,r11,3
    fa2c:	31800204 	addi	r6,r6,8
    fa30:	103efd1e 	bne	r2,zero,f628 <__alt_data_end+0xfc00f628>
    fa34:	00002406 	br	fac8 <_malloc_r+0x660>
    fa38:	14000317 	ldw	r16,12(r2)
    fa3c:	143f251e 	bne	r2,r16,f6d4 <__alt_data_end+0xfc00f6d4>
    fa40:	21000084 	addi	r4,r4,2
    fa44:	003ebc06 	br	f538 <__alt_data_end+0xfc00f538>
    fa48:	8085883a 	add	r2,r16,r2
    fa4c:	10c00117 	ldw	r3,4(r2)
    fa50:	81000317 	ldw	r4,12(r16)
    fa54:	81400217 	ldw	r5,8(r16)
    fa58:	18c00054 	ori	r3,r3,1
    fa5c:	10c00115 	stw	r3,4(r2)
    fa60:	29000315 	stw	r4,12(r5)
    fa64:	21400215 	stw	r5,8(r4)
    fa68:	9009883a 	mov	r4,r18
    fa6c:	002066c0 	call	2066c <__malloc_unlock>
    fa70:	80800204 	addi	r2,r16,8
    fa74:	003f2506 	br	f70c <__alt_data_end+0xfc00f70c>
    fa78:	12001704 	addi	r8,r2,92
    fa7c:	11c016c4 	addi	r7,r2,91
    fa80:	4209883a 	add	r4,r8,r8
    fa84:	003e9606 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    fa88:	3804d1ba 	srli	r2,r7,6
    fa8c:	11400e44 	addi	r5,r2,57
    fa90:	10c00e04 	addi	r3,r2,56
    fa94:	294b883a 	add	r5,r5,r5
    fa98:	003fbc06 	br	f98c <__alt_data_end+0xfc00f98c>
    fa9c:	84ff5926 	beq	r16,r19,f804 <__alt_data_end+0xfc00f804>
    faa0:	008000f4 	movhi	r2,3
    faa4:	10af9604 	addi	r2,r2,-16808
    faa8:	14000217 	ldw	r16,8(r2)
    faac:	00bfff04 	movi	r2,-4
    fab0:	80c00117 	ldw	r3,4(r16)
    fab4:	1886703a 	and	r3,r3,r2
    fab8:	003f9106 	br	f900 <__alt_data_end+0xfc00f900>
    fabc:	60800217 	ldw	r2,8(r12)
    fac0:	213fffc4 	addi	r4,r4,-1
    fac4:	1300651e 	bne	r2,r12,fc5c <_malloc_r+0x7f4>
    fac8:	208000cc 	andi	r2,r4,3
    facc:	633ffe04 	addi	r12,r12,-8
    fad0:	103ffa1e 	bne	r2,zero,fabc <__alt_data_end+0xfc00fabc>
    fad4:	98800117 	ldw	r2,4(r19)
    fad8:	0146303a 	nor	r3,zero,r5
    fadc:	1884703a 	and	r2,r3,r2
    fae0:	98800115 	stw	r2,4(r19)
    fae4:	294b883a 	add	r5,r5,r5
    fae8:	117f2836 	bltu	r2,r5,f78c <__alt_data_end+0xfc00f78c>
    faec:	283f2726 	beq	r5,zero,f78c <__alt_data_end+0xfc00f78c>
    faf0:	2886703a 	and	r3,r5,r2
    faf4:	5809883a 	mov	r4,r11
    faf8:	183ec31e 	bne	r3,zero,f608 <__alt_data_end+0xfc00f608>
    fafc:	294b883a 	add	r5,r5,r5
    fb00:	2886703a 	and	r3,r5,r2
    fb04:	21000104 	addi	r4,r4,4
    fb08:	183ffc26 	beq	r3,zero,fafc <__alt_data_end+0xfc00fafc>
    fb0c:	003ebe06 	br	f608 <__alt_data_end+0xfc00f608>
    fb10:	00c05504 	movi	r3,340
    fb14:	18801236 	bltu	r3,r2,fb60 <_malloc_r+0x6f8>
    fb18:	8804d3fa 	srli	r2,r17,15
    fb1c:	12001e04 	addi	r8,r2,120
    fb20:	11c01dc4 	addi	r7,r2,119
    fb24:	4209883a 	add	r4,r8,r8
    fb28:	003e6d06 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    fb2c:	00c40004 	movi	r3,4096
    fb30:	003f4606 	br	f84c <__alt_data_end+0xfc00f84c>
    fb34:	00800044 	movi	r2,1
    fb38:	a0800115 	stw	r2,4(r20)
    fb3c:	003f7406 	br	f910 <__alt_data_end+0xfc00f910>
    fb40:	1805d0ba 	srai	r2,r3,2
    fb44:	01c00044 	movi	r7,1
    fb48:	30c00117 	ldw	r3,4(r6)
    fb4c:	388e983a 	sll	r7,r7,r2
    fb50:	2805883a 	mov	r2,r5
    fb54:	38c6b03a 	or	r3,r7,r3
    fb58:	30c00115 	stw	r3,4(r6)
    fb5c:	003f9b06 	br	f9cc <__alt_data_end+0xfc00f9cc>
    fb60:	00c15504 	movi	r3,1364
    fb64:	18801a36 	bltu	r3,r2,fbd0 <_malloc_r+0x768>
    fb68:	8804d4ba 	srli	r2,r17,18
    fb6c:	12001f44 	addi	r8,r2,125
    fb70:	11c01f04 	addi	r7,r2,124
    fb74:	4209883a 	add	r4,r8,r8
    fb78:	003e5906 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    fb7c:	ad400404 	addi	r21,r21,16
    fb80:	003f1706 	br	f7e0 <__alt_data_end+0xfc00f7e0>
    fb84:	00c01504 	movi	r3,84
    fb88:	18802336 	bltu	r3,r2,fc18 <_malloc_r+0x7b0>
    fb8c:	3804d33a 	srli	r2,r7,12
    fb90:	11401bc4 	addi	r5,r2,111
    fb94:	10c01b84 	addi	r3,r2,110
    fb98:	294b883a 	add	r5,r5,r5
    fb9c:	003f7b06 	br	f98c <__alt_data_end+0xfc00f98c>
    fba0:	9c000217 	ldw	r16,8(r19)
    fba4:	00bfff04 	movi	r2,-4
    fba8:	80c00117 	ldw	r3,4(r16)
    fbac:	1886703a 	and	r3,r3,r2
    fbb0:	003f5306 	br	f900 <__alt_data_end+0xfc00f900>
    fbb4:	3083ffcc 	andi	r2,r6,4095
    fbb8:	103f181e 	bne	r2,zero,f81c <__alt_data_end+0xfc00f81c>
    fbbc:	99000217 	ldw	r4,8(r19)
    fbc0:	b545883a 	add	r2,r22,r21
    fbc4:	10800054 	ori	r2,r2,1
    fbc8:	20800115 	stw	r2,4(r4)
    fbcc:	003f3e06 	br	f8c8 <__alt_data_end+0xfc00f8c8>
    fbd0:	01003f84 	movi	r4,254
    fbd4:	02001fc4 	movi	r8,127
    fbd8:	01c01f84 	movi	r7,126
    fbdc:	003e4006 	br	f4e0 <__alt_data_end+0xfc00f4e0>
    fbe0:	008000f4 	movhi	r2,3
    fbe4:	10bafa04 	addi	r2,r2,-5144
    fbe8:	15000015 	stw	r20,0(r2)
    fbec:	003f1106 	br	f834 <__alt_data_end+0xfc00f834>
    fbf0:	00800044 	movi	r2,1
    fbf4:	002b883a 	mov	r21,zero
    fbf8:	003f1f06 	br	f878 <__alt_data_end+0xfc00f878>
    fbfc:	81400204 	addi	r5,r16,8
    fc00:	9009883a 	mov	r4,r18
    fc04:	0016dcc0 	call	16dcc <_free_r>
    fc08:	008000f4 	movhi	r2,3
    fc0c:	1087eb04 	addi	r2,r2,8108
    fc10:	10c00017 	ldw	r3,0(r2)
    fc14:	003f2c06 	br	f8c8 <__alt_data_end+0xfc00f8c8>
    fc18:	00c05504 	movi	r3,340
    fc1c:	18800536 	bltu	r3,r2,fc34 <_malloc_r+0x7cc>
    fc20:	3804d3fa 	srli	r2,r7,15
    fc24:	11401e04 	addi	r5,r2,120
    fc28:	10c01dc4 	addi	r3,r2,119
    fc2c:	294b883a 	add	r5,r5,r5
    fc30:	003f5606 	br	f98c <__alt_data_end+0xfc00f98c>
    fc34:	00c15504 	movi	r3,1364
    fc38:	18800536 	bltu	r3,r2,fc50 <_malloc_r+0x7e8>
    fc3c:	3804d4ba 	srli	r2,r7,18
    fc40:	11401f44 	addi	r5,r2,125
    fc44:	10c01f04 	addi	r3,r2,124
    fc48:	294b883a 	add	r5,r5,r5
    fc4c:	003f4f06 	br	f98c <__alt_data_end+0xfc00f98c>
    fc50:	01403f84 	movi	r5,254
    fc54:	00c01f84 	movi	r3,126
    fc58:	003f4c06 	br	f98c <__alt_data_end+0xfc00f98c>
    fc5c:	98800117 	ldw	r2,4(r19)
    fc60:	003fa006 	br	fae4 <__alt_data_end+0xfc00fae4>
    fc64:	8808d0fa 	srli	r4,r17,3
    fc68:	20800044 	addi	r2,r4,1
    fc6c:	1085883a 	add	r2,r2,r2
    fc70:	003e9006 	br	f6b4 <__alt_data_end+0xfc00f6b4>

0000fc74 <memcpy>:
    fc74:	defffd04 	addi	sp,sp,-12
    fc78:	dfc00215 	stw	ra,8(sp)
    fc7c:	dc400115 	stw	r17,4(sp)
    fc80:	dc000015 	stw	r16,0(sp)
    fc84:	00c003c4 	movi	r3,15
    fc88:	2005883a 	mov	r2,r4
    fc8c:	1980452e 	bgeu	r3,r6,fda4 <memcpy+0x130>
    fc90:	2906b03a 	or	r3,r5,r4
    fc94:	18c000cc 	andi	r3,r3,3
    fc98:	1800441e 	bne	r3,zero,fdac <memcpy+0x138>
    fc9c:	347ffc04 	addi	r17,r6,-16
    fca0:	8822d13a 	srli	r17,r17,4
    fca4:	28c00104 	addi	r3,r5,4
    fca8:	23400104 	addi	r13,r4,4
    fcac:	8820913a 	slli	r16,r17,4
    fcb0:	2b000204 	addi	r12,r5,8
    fcb4:	22c00204 	addi	r11,r4,8
    fcb8:	84000504 	addi	r16,r16,20
    fcbc:	2a800304 	addi	r10,r5,12
    fcc0:	22400304 	addi	r9,r4,12
    fcc4:	2c21883a 	add	r16,r5,r16
    fcc8:	2811883a 	mov	r8,r5
    fccc:	200f883a 	mov	r7,r4
    fcd0:	41000017 	ldw	r4,0(r8)
    fcd4:	1fc00017 	ldw	ra,0(r3)
    fcd8:	63c00017 	ldw	r15,0(r12)
    fcdc:	39000015 	stw	r4,0(r7)
    fce0:	53800017 	ldw	r14,0(r10)
    fce4:	6fc00015 	stw	ra,0(r13)
    fce8:	5bc00015 	stw	r15,0(r11)
    fcec:	4b800015 	stw	r14,0(r9)
    fcf0:	18c00404 	addi	r3,r3,16
    fcf4:	39c00404 	addi	r7,r7,16
    fcf8:	42000404 	addi	r8,r8,16
    fcfc:	6b400404 	addi	r13,r13,16
    fd00:	63000404 	addi	r12,r12,16
    fd04:	5ac00404 	addi	r11,r11,16
    fd08:	52800404 	addi	r10,r10,16
    fd0c:	4a400404 	addi	r9,r9,16
    fd10:	1c3fef1e 	bne	r3,r16,fcd0 <__alt_data_end+0xfc00fcd0>
    fd14:	89c00044 	addi	r7,r17,1
    fd18:	380e913a 	slli	r7,r7,4
    fd1c:	310003cc 	andi	r4,r6,15
    fd20:	02c000c4 	movi	r11,3
    fd24:	11c7883a 	add	r3,r2,r7
    fd28:	29cb883a 	add	r5,r5,r7
    fd2c:	5900212e 	bgeu	r11,r4,fdb4 <memcpy+0x140>
    fd30:	1813883a 	mov	r9,r3
    fd34:	2811883a 	mov	r8,r5
    fd38:	200f883a 	mov	r7,r4
    fd3c:	42800017 	ldw	r10,0(r8)
    fd40:	4a400104 	addi	r9,r9,4
    fd44:	39ffff04 	addi	r7,r7,-4
    fd48:	4abfff15 	stw	r10,-4(r9)
    fd4c:	42000104 	addi	r8,r8,4
    fd50:	59fffa36 	bltu	r11,r7,fd3c <__alt_data_end+0xfc00fd3c>
    fd54:	213fff04 	addi	r4,r4,-4
    fd58:	2008d0ba 	srli	r4,r4,2
    fd5c:	318000cc 	andi	r6,r6,3
    fd60:	21000044 	addi	r4,r4,1
    fd64:	2109883a 	add	r4,r4,r4
    fd68:	2109883a 	add	r4,r4,r4
    fd6c:	1907883a 	add	r3,r3,r4
    fd70:	290b883a 	add	r5,r5,r4
    fd74:	30000626 	beq	r6,zero,fd90 <memcpy+0x11c>
    fd78:	198d883a 	add	r6,r3,r6
    fd7c:	29c00003 	ldbu	r7,0(r5)
    fd80:	18c00044 	addi	r3,r3,1
    fd84:	29400044 	addi	r5,r5,1
    fd88:	19ffffc5 	stb	r7,-1(r3)
    fd8c:	19bffb1e 	bne	r3,r6,fd7c <__alt_data_end+0xfc00fd7c>
    fd90:	dfc00217 	ldw	ra,8(sp)
    fd94:	dc400117 	ldw	r17,4(sp)
    fd98:	dc000017 	ldw	r16,0(sp)
    fd9c:	dec00304 	addi	sp,sp,12
    fda0:	f800283a 	ret
    fda4:	2007883a 	mov	r3,r4
    fda8:	003ff206 	br	fd74 <__alt_data_end+0xfc00fd74>
    fdac:	2007883a 	mov	r3,r4
    fdb0:	003ff106 	br	fd78 <__alt_data_end+0xfc00fd78>
    fdb4:	200d883a 	mov	r6,r4
    fdb8:	003fee06 	br	fd74 <__alt_data_end+0xfc00fd74>

0000fdbc <memset>:
    fdbc:	20c000cc 	andi	r3,r4,3
    fdc0:	2005883a 	mov	r2,r4
    fdc4:	18004426 	beq	r3,zero,fed8 <memset+0x11c>
    fdc8:	31ffffc4 	addi	r7,r6,-1
    fdcc:	30004026 	beq	r6,zero,fed0 <memset+0x114>
    fdd0:	2813883a 	mov	r9,r5
    fdd4:	200d883a 	mov	r6,r4
    fdd8:	2007883a 	mov	r3,r4
    fddc:	00000406 	br	fdf0 <memset+0x34>
    fde0:	3a3fffc4 	addi	r8,r7,-1
    fde4:	31800044 	addi	r6,r6,1
    fde8:	38003926 	beq	r7,zero,fed0 <memset+0x114>
    fdec:	400f883a 	mov	r7,r8
    fdf0:	18c00044 	addi	r3,r3,1
    fdf4:	32400005 	stb	r9,0(r6)
    fdf8:	1a0000cc 	andi	r8,r3,3
    fdfc:	403ff81e 	bne	r8,zero,fde0 <__alt_data_end+0xfc00fde0>
    fe00:	010000c4 	movi	r4,3
    fe04:	21c02d2e 	bgeu	r4,r7,febc <memset+0x100>
    fe08:	29003fcc 	andi	r4,r5,255
    fe0c:	200c923a 	slli	r6,r4,8
    fe10:	3108b03a 	or	r4,r6,r4
    fe14:	200c943a 	slli	r6,r4,16
    fe18:	218cb03a 	or	r6,r4,r6
    fe1c:	010003c4 	movi	r4,15
    fe20:	21c0182e 	bgeu	r4,r7,fe84 <memset+0xc8>
    fe24:	3b3ffc04 	addi	r12,r7,-16
    fe28:	6018d13a 	srli	r12,r12,4
    fe2c:	1a000104 	addi	r8,r3,4
    fe30:	1ac00204 	addi	r11,r3,8
    fe34:	6008913a 	slli	r4,r12,4
    fe38:	1a800304 	addi	r10,r3,12
    fe3c:	1813883a 	mov	r9,r3
    fe40:	21000504 	addi	r4,r4,20
    fe44:	1909883a 	add	r4,r3,r4
    fe48:	49800015 	stw	r6,0(r9)
    fe4c:	41800015 	stw	r6,0(r8)
    fe50:	59800015 	stw	r6,0(r11)
    fe54:	51800015 	stw	r6,0(r10)
    fe58:	42000404 	addi	r8,r8,16
    fe5c:	4a400404 	addi	r9,r9,16
    fe60:	5ac00404 	addi	r11,r11,16
    fe64:	52800404 	addi	r10,r10,16
    fe68:	413ff71e 	bne	r8,r4,fe48 <__alt_data_end+0xfc00fe48>
    fe6c:	63000044 	addi	r12,r12,1
    fe70:	6018913a 	slli	r12,r12,4
    fe74:	39c003cc 	andi	r7,r7,15
    fe78:	010000c4 	movi	r4,3
    fe7c:	1b07883a 	add	r3,r3,r12
    fe80:	21c00e2e 	bgeu	r4,r7,febc <memset+0x100>
    fe84:	1813883a 	mov	r9,r3
    fe88:	3811883a 	mov	r8,r7
    fe8c:	010000c4 	movi	r4,3
    fe90:	49800015 	stw	r6,0(r9)
    fe94:	423fff04 	addi	r8,r8,-4
    fe98:	4a400104 	addi	r9,r9,4
    fe9c:	223ffc36 	bltu	r4,r8,fe90 <__alt_data_end+0xfc00fe90>
    fea0:	393fff04 	addi	r4,r7,-4
    fea4:	2008d0ba 	srli	r4,r4,2
    fea8:	39c000cc 	andi	r7,r7,3
    feac:	21000044 	addi	r4,r4,1
    feb0:	2109883a 	add	r4,r4,r4
    feb4:	2109883a 	add	r4,r4,r4
    feb8:	1907883a 	add	r3,r3,r4
    febc:	38000526 	beq	r7,zero,fed4 <memset+0x118>
    fec0:	19cf883a 	add	r7,r3,r7
    fec4:	19400005 	stb	r5,0(r3)
    fec8:	18c00044 	addi	r3,r3,1
    fecc:	38fffd1e 	bne	r7,r3,fec4 <__alt_data_end+0xfc00fec4>
    fed0:	f800283a 	ret
    fed4:	f800283a 	ret
    fed8:	2007883a 	mov	r3,r4
    fedc:	300f883a 	mov	r7,r6
    fee0:	003fc706 	br	fe00 <__alt_data_end+0xfc00fe00>

0000fee4 <_printf_r>:
    fee4:	defffd04 	addi	sp,sp,-12
    fee8:	2805883a 	mov	r2,r5
    feec:	dfc00015 	stw	ra,0(sp)
    fef0:	d9800115 	stw	r6,4(sp)
    fef4:	d9c00215 	stw	r7,8(sp)
    fef8:	21400217 	ldw	r5,8(r4)
    fefc:	d9c00104 	addi	r7,sp,4
    ff00:	100d883a 	mov	r6,r2
    ff04:	00128980 	call	12898 <___vfprintf_internal_r>
    ff08:	dfc00017 	ldw	ra,0(sp)
    ff0c:	dec00304 	addi	sp,sp,12
    ff10:	f800283a 	ret

0000ff14 <printf>:
    ff14:	defffc04 	addi	sp,sp,-16
    ff18:	dfc00015 	stw	ra,0(sp)
    ff1c:	d9400115 	stw	r5,4(sp)
    ff20:	d9800215 	stw	r6,8(sp)
    ff24:	d9c00315 	stw	r7,12(sp)
    ff28:	008000f4 	movhi	r2,3
    ff2c:	10baf904 	addi	r2,r2,-5148
    ff30:	10800017 	ldw	r2,0(r2)
    ff34:	200b883a 	mov	r5,r4
    ff38:	d9800104 	addi	r6,sp,4
    ff3c:	11000217 	ldw	r4,8(r2)
    ff40:	0014b740 	call	14b74 <__vfprintf_internal>
    ff44:	dfc00017 	ldw	ra,0(sp)
    ff48:	dec00404 	addi	sp,sp,16
    ff4c:	f800283a 	ret

0000ff50 <_putchar_r>:
    ff50:	21800217 	ldw	r6,8(r4)
    ff54:	0018cbc1 	jmpi	18cbc <_putc_r>

0000ff58 <putchar>:
    ff58:	008000f4 	movhi	r2,3
    ff5c:	10baf904 	addi	r2,r2,-5148
    ff60:	200b883a 	mov	r5,r4
    ff64:	11000017 	ldw	r4,0(r2)
    ff68:	21800217 	ldw	r6,8(r4)
    ff6c:	0018cbc1 	jmpi	18cbc <_putc_r>

0000ff70 <_puts_r>:
    ff70:	defff604 	addi	sp,sp,-40
    ff74:	dc000715 	stw	r16,28(sp)
    ff78:	2021883a 	mov	r16,r4
    ff7c:	2809883a 	mov	r4,r5
    ff80:	dc400815 	stw	r17,32(sp)
    ff84:	dfc00915 	stw	ra,36(sp)
    ff88:	2823883a 	mov	r17,r5
    ff8c:	001053c0 	call	1053c <strlen>
    ff90:	10c00044 	addi	r3,r2,1
    ff94:	d8800115 	stw	r2,4(sp)
    ff98:	008000f4 	movhi	r2,3
    ff9c:	10adf304 	addi	r2,r2,-18484
    ffa0:	d8800215 	stw	r2,8(sp)
    ffa4:	00800044 	movi	r2,1
    ffa8:	d8800315 	stw	r2,12(sp)
    ffac:	00800084 	movi	r2,2
    ffb0:	dc400015 	stw	r17,0(sp)
    ffb4:	d8c00615 	stw	r3,24(sp)
    ffb8:	dec00415 	stw	sp,16(sp)
    ffbc:	d8800515 	stw	r2,20(sp)
    ffc0:	80000226 	beq	r16,zero,ffcc <_puts_r+0x5c>
    ffc4:	80800e17 	ldw	r2,56(r16)
    ffc8:	10001426 	beq	r2,zero,1001c <_puts_r+0xac>
    ffcc:	81400217 	ldw	r5,8(r16)
    ffd0:	2880030b 	ldhu	r2,12(r5)
    ffd4:	10c8000c 	andi	r3,r2,8192
    ffd8:	1800061e 	bne	r3,zero,fff4 <_puts_r+0x84>
    ffdc:	29001917 	ldw	r4,100(r5)
    ffe0:	00f7ffc4 	movi	r3,-8193
    ffe4:	10880014 	ori	r2,r2,8192
    ffe8:	20c6703a 	and	r3,r4,r3
    ffec:	2880030d 	sth	r2,12(r5)
    fff0:	28c01915 	stw	r3,100(r5)
    fff4:	d9800404 	addi	r6,sp,16
    fff8:	8009883a 	mov	r4,r16
    fffc:	00170dc0 	call	170dc <__sfvwrite_r>
   10000:	1000091e 	bne	r2,zero,10028 <_puts_r+0xb8>
   10004:	00800284 	movi	r2,10
   10008:	dfc00917 	ldw	ra,36(sp)
   1000c:	dc400817 	ldw	r17,32(sp)
   10010:	dc000717 	ldw	r16,28(sp)
   10014:	dec00a04 	addi	sp,sp,40
   10018:	f800283a 	ret
   1001c:	8009883a 	mov	r4,r16
   10020:	0016c580 	call	16c58 <__sinit>
   10024:	003fe906 	br	ffcc <__alt_data_end+0xfc00ffcc>
   10028:	00bfffc4 	movi	r2,-1
   1002c:	003ff606 	br	10008 <__alt_data_end+0xfc010008>

00010030 <puts>:
   10030:	008000f4 	movhi	r2,3
   10034:	10baf904 	addi	r2,r2,-5148
   10038:	200b883a 	mov	r5,r4
   1003c:	11000017 	ldw	r4,0(r2)
   10040:	000ff701 	jmpi	ff70 <_puts_r>

00010044 <_sbrk_r>:
   10044:	defffd04 	addi	sp,sp,-12
   10048:	dc000015 	stw	r16,0(sp)
   1004c:	040000f4 	movhi	r16,3
   10050:	dc400115 	stw	r17,4(sp)
   10054:	84079404 	addi	r16,r16,7760
   10058:	2023883a 	mov	r17,r4
   1005c:	2809883a 	mov	r4,r5
   10060:	dfc00215 	stw	ra,8(sp)
   10064:	80000015 	stw	zero,0(r16)
   10068:	00208540 	call	20854 <sbrk>
   1006c:	00ffffc4 	movi	r3,-1
   10070:	10c00526 	beq	r2,r3,10088 <_sbrk_r+0x44>
   10074:	dfc00217 	ldw	ra,8(sp)
   10078:	dc400117 	ldw	r17,4(sp)
   1007c:	dc000017 	ldw	r16,0(sp)
   10080:	dec00304 	addi	sp,sp,12
   10084:	f800283a 	ret
   10088:	80c00017 	ldw	r3,0(r16)
   1008c:	183ff926 	beq	r3,zero,10074 <__alt_data_end+0xfc010074>
   10090:	88c00015 	stw	r3,0(r17)
   10094:	003ff706 	br	10074 <__alt_data_end+0xfc010074>

00010098 <_init_signal_r>:
   10098:	2080b717 	ldw	r2,732(r4)
   1009c:	10000226 	beq	r2,zero,100a8 <_init_signal_r+0x10>
   100a0:	0005883a 	mov	r2,zero
   100a4:	f800283a 	ret
   100a8:	defffe04 	addi	sp,sp,-8
   100ac:	01402004 	movi	r5,128
   100b0:	dc000015 	stw	r16,0(sp)
   100b4:	dfc00115 	stw	ra,4(sp)
   100b8:	2021883a 	mov	r16,r4
   100bc:	000f4680 	call	f468 <_malloc_r>
   100c0:	8080b715 	stw	r2,732(r16)
   100c4:	10000d26 	beq	r2,zero,100fc <_init_signal_r+0x64>
   100c8:	0007883a 	mov	r3,zero
   100cc:	01002004 	movi	r4,128
   100d0:	00000106 	br	100d8 <_init_signal_r+0x40>
   100d4:	8080b717 	ldw	r2,732(r16)
   100d8:	10c5883a 	add	r2,r2,r3
   100dc:	10000015 	stw	zero,0(r2)
   100e0:	18c00104 	addi	r3,r3,4
   100e4:	193ffb1e 	bne	r3,r4,100d4 <__alt_data_end+0xfc0100d4>
   100e8:	0005883a 	mov	r2,zero
   100ec:	dfc00117 	ldw	ra,4(sp)
   100f0:	dc000017 	ldw	r16,0(sp)
   100f4:	dec00204 	addi	sp,sp,8
   100f8:	f800283a 	ret
   100fc:	00bfffc4 	movi	r2,-1
   10100:	003ffa06 	br	100ec <__alt_data_end+0xfc0100ec>

00010104 <_signal_r>:
   10104:	00c007c4 	movi	r3,31
   10108:	19401536 	bltu	r3,r5,10160 <_signal_r+0x5c>
   1010c:	2080b717 	ldw	r2,732(r4)
   10110:	defffc04 	addi	sp,sp,-16
   10114:	dc800215 	stw	r18,8(sp)
   10118:	dc400115 	stw	r17,4(sp)
   1011c:	dc000015 	stw	r16,0(sp)
   10120:	dfc00315 	stw	ra,12(sp)
   10124:	3023883a 	mov	r17,r6
   10128:	2021883a 	mov	r16,r4
   1012c:	2825883a 	mov	r18,r5
   10130:	10000f26 	beq	r2,zero,10170 <_signal_r+0x6c>
   10134:	948b883a 	add	r5,r18,r18
   10138:	294b883a 	add	r5,r5,r5
   1013c:	114b883a 	add	r5,r2,r5
   10140:	28800017 	ldw	r2,0(r5)
   10144:	2c400015 	stw	r17,0(r5)
   10148:	dfc00317 	ldw	ra,12(sp)
   1014c:	dc800217 	ldw	r18,8(sp)
   10150:	dc400117 	ldw	r17,4(sp)
   10154:	dc000017 	ldw	r16,0(sp)
   10158:	dec00404 	addi	sp,sp,16
   1015c:	f800283a 	ret
   10160:	00c00584 	movi	r3,22
   10164:	20c00015 	stw	r3,0(r4)
   10168:	00bfffc4 	movi	r2,-1
   1016c:	f800283a 	ret
   10170:	00100980 	call	10098 <_init_signal_r>
   10174:	1000021e 	bne	r2,zero,10180 <_signal_r+0x7c>
   10178:	8080b717 	ldw	r2,732(r16)
   1017c:	003fed06 	br	10134 <__alt_data_end+0xfc010134>
   10180:	00bfffc4 	movi	r2,-1
   10184:	003ff006 	br	10148 <__alt_data_end+0xfc010148>

00010188 <_raise_r>:
   10188:	008007c4 	movi	r2,31
   1018c:	11402936 	bltu	r2,r5,10234 <_raise_r+0xac>
   10190:	20c0b717 	ldw	r3,732(r4)
   10194:	defffd04 	addi	sp,sp,-12
   10198:	dc400115 	stw	r17,4(sp)
   1019c:	dc000015 	stw	r16,0(sp)
   101a0:	dfc00215 	stw	ra,8(sp)
   101a4:	2021883a 	mov	r16,r4
   101a8:	2823883a 	mov	r17,r5
   101ac:	18001726 	beq	r3,zero,1020c <_raise_r+0x84>
   101b0:	2945883a 	add	r2,r5,r5
   101b4:	1085883a 	add	r2,r2,r2
   101b8:	1887883a 	add	r3,r3,r2
   101bc:	19800017 	ldw	r6,0(r3)
   101c0:	30001226 	beq	r6,zero,1020c <_raise_r+0x84>
   101c4:	00800044 	movi	r2,1
   101c8:	30800e26 	beq	r6,r2,10204 <_raise_r+0x7c>
   101cc:	013fffc4 	movi	r4,-1
   101d0:	31000926 	beq	r6,r4,101f8 <_raise_r+0x70>
   101d4:	18000015 	stw	zero,0(r3)
   101d8:	2809883a 	mov	r4,r5
   101dc:	303ee83a 	callr	r6
   101e0:	0005883a 	mov	r2,zero
   101e4:	dfc00217 	ldw	ra,8(sp)
   101e8:	dc400117 	ldw	r17,4(sp)
   101ec:	dc000017 	ldw	r16,0(sp)
   101f0:	dec00304 	addi	sp,sp,12
   101f4:	f800283a 	ret
   101f8:	00c00584 	movi	r3,22
   101fc:	80c00015 	stw	r3,0(r16)
   10200:	003ff806 	br	101e4 <__alt_data_end+0xfc0101e4>
   10204:	0005883a 	mov	r2,zero
   10208:	003ff606 	br	101e4 <__alt_data_end+0xfc0101e4>
   1020c:	8009883a 	mov	r4,r16
   10210:	00103980 	call	10398 <_getpid_r>
   10214:	880d883a 	mov	r6,r17
   10218:	100b883a 	mov	r5,r2
   1021c:	8009883a 	mov	r4,r16
   10220:	dfc00217 	ldw	ra,8(sp)
   10224:	dc400117 	ldw	r17,4(sp)
   10228:	dc000017 	ldw	r16,0(sp)
   1022c:	dec00304 	addi	sp,sp,12
   10230:	001033c1 	jmpi	1033c <_kill_r>
   10234:	00800584 	movi	r2,22
   10238:	20800015 	stw	r2,0(r4)
   1023c:	00bfffc4 	movi	r2,-1
   10240:	f800283a 	ret

00010244 <__sigtramp_r>:
   10244:	008007c4 	movi	r2,31
   10248:	11402436 	bltu	r2,r5,102dc <__sigtramp_r+0x98>
   1024c:	20c0b717 	ldw	r3,732(r4)
   10250:	defffd04 	addi	sp,sp,-12
   10254:	dc400115 	stw	r17,4(sp)
   10258:	dc000015 	stw	r16,0(sp)
   1025c:	dfc00215 	stw	ra,8(sp)
   10260:	2021883a 	mov	r16,r4
   10264:	2823883a 	mov	r17,r5
   10268:	18001826 	beq	r3,zero,102cc <__sigtramp_r+0x88>
   1026c:	8c45883a 	add	r2,r17,r17
   10270:	1085883a 	add	r2,r2,r2
   10274:	1885883a 	add	r2,r3,r2
   10278:	10c00017 	ldw	r3,0(r2)
   1027c:	18001126 	beq	r3,zero,102c4 <__sigtramp_r+0x80>
   10280:	013fffc4 	movi	r4,-1
   10284:	19000d26 	beq	r3,r4,102bc <__sigtramp_r+0x78>
   10288:	01000044 	movi	r4,1
   1028c:	19000926 	beq	r3,r4,102b4 <__sigtramp_r+0x70>
   10290:	10000015 	stw	zero,0(r2)
   10294:	8809883a 	mov	r4,r17
   10298:	183ee83a 	callr	r3
   1029c:	0005883a 	mov	r2,zero
   102a0:	dfc00217 	ldw	ra,8(sp)
   102a4:	dc400117 	ldw	r17,4(sp)
   102a8:	dc000017 	ldw	r16,0(sp)
   102ac:	dec00304 	addi	sp,sp,12
   102b0:	f800283a 	ret
   102b4:	008000c4 	movi	r2,3
   102b8:	003ff906 	br	102a0 <__alt_data_end+0xfc0102a0>
   102bc:	00800084 	movi	r2,2
   102c0:	003ff706 	br	102a0 <__alt_data_end+0xfc0102a0>
   102c4:	00800044 	movi	r2,1
   102c8:	003ff506 	br	102a0 <__alt_data_end+0xfc0102a0>
   102cc:	00100980 	call	10098 <_init_signal_r>
   102d0:	1000041e 	bne	r2,zero,102e4 <__sigtramp_r+0xa0>
   102d4:	80c0b717 	ldw	r3,732(r16)
   102d8:	003fe406 	br	1026c <__alt_data_end+0xfc01026c>
   102dc:	00bfffc4 	movi	r2,-1
   102e0:	f800283a 	ret
   102e4:	00bfffc4 	movi	r2,-1
   102e8:	003fed06 	br	102a0 <__alt_data_end+0xfc0102a0>

000102ec <raise>:
   102ec:	008000f4 	movhi	r2,3
   102f0:	10baf904 	addi	r2,r2,-5148
   102f4:	200b883a 	mov	r5,r4
   102f8:	11000017 	ldw	r4,0(r2)
   102fc:	00101881 	jmpi	10188 <_raise_r>

00010300 <signal>:
   10300:	008000f4 	movhi	r2,3
   10304:	10baf904 	addi	r2,r2,-5148
   10308:	280d883a 	mov	r6,r5
   1030c:	200b883a 	mov	r5,r4
   10310:	11000017 	ldw	r4,0(r2)
   10314:	00101041 	jmpi	10104 <_signal_r>

00010318 <_init_signal>:
   10318:	008000f4 	movhi	r2,3
   1031c:	10baf904 	addi	r2,r2,-5148
   10320:	11000017 	ldw	r4,0(r2)
   10324:	00100981 	jmpi	10098 <_init_signal_r>

00010328 <__sigtramp>:
   10328:	008000f4 	movhi	r2,3
   1032c:	10baf904 	addi	r2,r2,-5148
   10330:	200b883a 	mov	r5,r4
   10334:	11000017 	ldw	r4,0(r2)
   10338:	00102441 	jmpi	10244 <__sigtramp_r>

0001033c <_kill_r>:
   1033c:	defffd04 	addi	sp,sp,-12
   10340:	2805883a 	mov	r2,r5
   10344:	dc000015 	stw	r16,0(sp)
   10348:	040000f4 	movhi	r16,3
   1034c:	dc400115 	stw	r17,4(sp)
   10350:	84079404 	addi	r16,r16,7760
   10354:	2023883a 	mov	r17,r4
   10358:	300b883a 	mov	r5,r6
   1035c:	1009883a 	mov	r4,r2
   10360:	dfc00215 	stw	ra,8(sp)
   10364:	80000015 	stw	zero,0(r16)
   10368:	00202980 	call	20298 <kill>
   1036c:	00ffffc4 	movi	r3,-1
   10370:	10c00526 	beq	r2,r3,10388 <_kill_r+0x4c>
   10374:	dfc00217 	ldw	ra,8(sp)
   10378:	dc400117 	ldw	r17,4(sp)
   1037c:	dc000017 	ldw	r16,0(sp)
   10380:	dec00304 	addi	sp,sp,12
   10384:	f800283a 	ret
   10388:	80c00017 	ldw	r3,0(r16)
   1038c:	183ff926 	beq	r3,zero,10374 <__alt_data_end+0xfc010374>
   10390:	88c00015 	stw	r3,0(r17)
   10394:	003ff706 	br	10374 <__alt_data_end+0xfc010374>

00010398 <_getpid_r>:
   10398:	00201541 	jmpi	20154 <getpid>

0001039c <_sprintf_r>:
   1039c:	deffe404 	addi	sp,sp,-112
   103a0:	2807883a 	mov	r3,r5
   103a4:	dfc01a15 	stw	ra,104(sp)
   103a8:	d9c01b15 	stw	r7,108(sp)
   103ac:	00a00034 	movhi	r2,32768
   103b0:	10bfffc4 	addi	r2,r2,-1
   103b4:	02008204 	movi	r8,520
   103b8:	d8800215 	stw	r2,8(sp)
   103bc:	d8800515 	stw	r2,20(sp)
   103c0:	d9c01b04 	addi	r7,sp,108
   103c4:	d80b883a 	mov	r5,sp
   103c8:	00bfffc4 	movi	r2,-1
   103cc:	d8c00015 	stw	r3,0(sp)
   103d0:	d8c00415 	stw	r3,16(sp)
   103d4:	da00030d 	sth	r8,12(sp)
   103d8:	d880038d 	sth	r2,14(sp)
   103dc:	00105d40 	call	105d4 <___svfprintf_internal_r>
   103e0:	d8c00017 	ldw	r3,0(sp)
   103e4:	18000005 	stb	zero,0(r3)
   103e8:	dfc01a17 	ldw	ra,104(sp)
   103ec:	dec01c04 	addi	sp,sp,112
   103f0:	f800283a 	ret

000103f4 <sprintf>:
   103f4:	deffe304 	addi	sp,sp,-116
   103f8:	2007883a 	mov	r3,r4
   103fc:	dfc01a15 	stw	ra,104(sp)
   10400:	d9801b15 	stw	r6,108(sp)
   10404:	d9c01c15 	stw	r7,112(sp)
   10408:	010000f4 	movhi	r4,3
   1040c:	213af904 	addi	r4,r4,-5148
   10410:	21000017 	ldw	r4,0(r4)
   10414:	00a00034 	movhi	r2,32768
   10418:	10bfffc4 	addi	r2,r2,-1
   1041c:	280d883a 	mov	r6,r5
   10420:	02008204 	movi	r8,520
   10424:	d8800215 	stw	r2,8(sp)
   10428:	d8800515 	stw	r2,20(sp)
   1042c:	d9c01b04 	addi	r7,sp,108
   10430:	d80b883a 	mov	r5,sp
   10434:	00bfffc4 	movi	r2,-1
   10438:	d8c00015 	stw	r3,0(sp)
   1043c:	d8c00415 	stw	r3,16(sp)
   10440:	da00030d 	sth	r8,12(sp)
   10444:	d880038d 	sth	r2,14(sp)
   10448:	00105d40 	call	105d4 <___svfprintf_internal_r>
   1044c:	d8c00017 	ldw	r3,0(sp)
   10450:	18000005 	stb	zero,0(r3)
   10454:	dfc01a17 	ldw	ra,104(sp)
   10458:	dec01d04 	addi	sp,sp,116
   1045c:	f800283a 	ret

00010460 <strcmp>:
   10460:	2144b03a 	or	r2,r4,r5
   10464:	108000cc 	andi	r2,r2,3
   10468:	1000171e 	bne	r2,zero,104c8 <strcmp+0x68>
   1046c:	20800017 	ldw	r2,0(r4)
   10470:	28c00017 	ldw	r3,0(r5)
   10474:	10c0141e 	bne	r2,r3,104c8 <strcmp+0x68>
   10478:	027fbff4 	movhi	r9,65279
   1047c:	4a7fbfc4 	addi	r9,r9,-257
   10480:	0086303a 	nor	r3,zero,r2
   10484:	02202074 	movhi	r8,32897
   10488:	1245883a 	add	r2,r2,r9
   1048c:	42202004 	addi	r8,r8,-32640
   10490:	10c4703a 	and	r2,r2,r3
   10494:	1204703a 	and	r2,r2,r8
   10498:	10000226 	beq	r2,zero,104a4 <strcmp+0x44>
   1049c:	00002306 	br	1052c <strcmp+0xcc>
   104a0:	1000221e 	bne	r2,zero,1052c <strcmp+0xcc>
   104a4:	21000104 	addi	r4,r4,4
   104a8:	20c00017 	ldw	r3,0(r4)
   104ac:	29400104 	addi	r5,r5,4
   104b0:	29800017 	ldw	r6,0(r5)
   104b4:	1a4f883a 	add	r7,r3,r9
   104b8:	00c4303a 	nor	r2,zero,r3
   104bc:	3884703a 	and	r2,r7,r2
   104c0:	1204703a 	and	r2,r2,r8
   104c4:	19bff626 	beq	r3,r6,104a0 <__alt_data_end+0xfc0104a0>
   104c8:	20800003 	ldbu	r2,0(r4)
   104cc:	10c03fcc 	andi	r3,r2,255
   104d0:	18c0201c 	xori	r3,r3,128
   104d4:	18ffe004 	addi	r3,r3,-128
   104d8:	18000c26 	beq	r3,zero,1050c <strcmp+0xac>
   104dc:	29800007 	ldb	r6,0(r5)
   104e0:	19800326 	beq	r3,r6,104f0 <strcmp+0x90>
   104e4:	00001306 	br	10534 <strcmp+0xd4>
   104e8:	29800007 	ldb	r6,0(r5)
   104ec:	11800b1e 	bne	r2,r6,1051c <strcmp+0xbc>
   104f0:	21000044 	addi	r4,r4,1
   104f4:	20c00003 	ldbu	r3,0(r4)
   104f8:	29400044 	addi	r5,r5,1
   104fc:	18803fcc 	andi	r2,r3,255
   10500:	1080201c 	xori	r2,r2,128
   10504:	10bfe004 	addi	r2,r2,-128
   10508:	103ff71e 	bne	r2,zero,104e8 <__alt_data_end+0xfc0104e8>
   1050c:	0007883a 	mov	r3,zero
   10510:	28800003 	ldbu	r2,0(r5)
   10514:	1885c83a 	sub	r2,r3,r2
   10518:	f800283a 	ret
   1051c:	28800003 	ldbu	r2,0(r5)
   10520:	18c03fcc 	andi	r3,r3,255
   10524:	1885c83a 	sub	r2,r3,r2
   10528:	f800283a 	ret
   1052c:	0005883a 	mov	r2,zero
   10530:	f800283a 	ret
   10534:	10c03fcc 	andi	r3,r2,255
   10538:	003ff506 	br	10510 <__alt_data_end+0xfc010510>

0001053c <strlen>:
   1053c:	208000cc 	andi	r2,r4,3
   10540:	10002026 	beq	r2,zero,105c4 <strlen+0x88>
   10544:	20800007 	ldb	r2,0(r4)
   10548:	10002026 	beq	r2,zero,105cc <strlen+0x90>
   1054c:	2005883a 	mov	r2,r4
   10550:	00000206 	br	1055c <strlen+0x20>
   10554:	10c00007 	ldb	r3,0(r2)
   10558:	18001826 	beq	r3,zero,105bc <strlen+0x80>
   1055c:	10800044 	addi	r2,r2,1
   10560:	10c000cc 	andi	r3,r2,3
   10564:	183ffb1e 	bne	r3,zero,10554 <__alt_data_end+0xfc010554>
   10568:	10c00017 	ldw	r3,0(r2)
   1056c:	01ffbff4 	movhi	r7,65279
   10570:	39ffbfc4 	addi	r7,r7,-257
   10574:	00ca303a 	nor	r5,zero,r3
   10578:	01a02074 	movhi	r6,32897
   1057c:	19c7883a 	add	r3,r3,r7
   10580:	31a02004 	addi	r6,r6,-32640
   10584:	1946703a 	and	r3,r3,r5
   10588:	1986703a 	and	r3,r3,r6
   1058c:	1800091e 	bne	r3,zero,105b4 <strlen+0x78>
   10590:	10800104 	addi	r2,r2,4
   10594:	10c00017 	ldw	r3,0(r2)
   10598:	19cb883a 	add	r5,r3,r7
   1059c:	00c6303a 	nor	r3,zero,r3
   105a0:	28c6703a 	and	r3,r5,r3
   105a4:	1986703a 	and	r3,r3,r6
   105a8:	183ff926 	beq	r3,zero,10590 <__alt_data_end+0xfc010590>
   105ac:	00000106 	br	105b4 <strlen+0x78>
   105b0:	10800044 	addi	r2,r2,1
   105b4:	10c00007 	ldb	r3,0(r2)
   105b8:	183ffd1e 	bne	r3,zero,105b0 <__alt_data_end+0xfc0105b0>
   105bc:	1105c83a 	sub	r2,r2,r4
   105c0:	f800283a 	ret
   105c4:	2005883a 	mov	r2,r4
   105c8:	003fe706 	br	10568 <__alt_data_end+0xfc010568>
   105cc:	0005883a 	mov	r2,zero
   105d0:	f800283a 	ret

000105d4 <___svfprintf_internal_r>:
   105d4:	deffb704 	addi	sp,sp,-292
   105d8:	dfc04815 	stw	ra,288(sp)
   105dc:	ddc04615 	stw	r23,280(sp)
   105e0:	d9402d15 	stw	r5,180(sp)
   105e4:	d9003915 	stw	r4,228(sp)
   105e8:	302f883a 	mov	r23,r6
   105ec:	d9c02e15 	stw	r7,184(sp)
   105f0:	df004715 	stw	fp,284(sp)
   105f4:	dd804515 	stw	r22,276(sp)
   105f8:	dd404415 	stw	r21,272(sp)
   105fc:	dd004315 	stw	r20,268(sp)
   10600:	dcc04215 	stw	r19,264(sp)
   10604:	dc804115 	stw	r18,260(sp)
   10608:	dc404015 	stw	r17,256(sp)
   1060c:	dc003f15 	stw	r16,252(sp)
   10610:	00177d80 	call	177d8 <_localeconv_r>
   10614:	10800017 	ldw	r2,0(r2)
   10618:	1009883a 	mov	r4,r2
   1061c:	d8803415 	stw	r2,208(sp)
   10620:	001053c0 	call	1053c <strlen>
   10624:	d8c02d17 	ldw	r3,180(sp)
   10628:	d8803815 	stw	r2,224(sp)
   1062c:	1880030b 	ldhu	r2,12(r3)
   10630:	1080200c 	andi	r2,r2,128
   10634:	10000226 	beq	r2,zero,10640 <___svfprintf_internal_r+0x6c>
   10638:	18800417 	ldw	r2,16(r3)
   1063c:	1006b126 	beq	r2,zero,12104 <___svfprintf_internal_r+0x1b30>
   10640:	dcc03917 	ldw	r19,228(sp)
   10644:	d8c00404 	addi	r3,sp,16
   10648:	054000f4 	movhi	r21,3
   1064c:	d9001e04 	addi	r4,sp,120
   10650:	ad6e0484 	addi	r21,r21,-18414
   10654:	d8c01e15 	stw	r3,120(sp)
   10658:	d8002015 	stw	zero,128(sp)
   1065c:	d8001f15 	stw	zero,124(sp)
   10660:	d8003315 	stw	zero,204(sp)
   10664:	d8003615 	stw	zero,216(sp)
   10668:	d8003715 	stw	zero,220(sp)
   1066c:	1811883a 	mov	r8,r3
   10670:	d8003a15 	stw	zero,232(sp)
   10674:	d8003b15 	stw	zero,236(sp)
   10678:	d8002f15 	stw	zero,188(sp)
   1067c:	d9002815 	stw	r4,160(sp)
   10680:	b8800007 	ldb	r2,0(r23)
   10684:	10027726 	beq	r2,zero,11064 <___svfprintf_internal_r+0xa90>
   10688:	00c00944 	movi	r3,37
   1068c:	b823883a 	mov	r17,r23
   10690:	10c0021e 	bne	r2,r3,1069c <___svfprintf_internal_r+0xc8>
   10694:	00001406 	br	106e8 <___svfprintf_internal_r+0x114>
   10698:	10c00326 	beq	r2,r3,106a8 <___svfprintf_internal_r+0xd4>
   1069c:	8c400044 	addi	r17,r17,1
   106a0:	88800007 	ldb	r2,0(r17)
   106a4:	103ffc1e 	bne	r2,zero,10698 <__alt_data_end+0xfc010698>
   106a8:	8de1c83a 	sub	r16,r17,r23
   106ac:	80000e26 	beq	r16,zero,106e8 <___svfprintf_internal_r+0x114>
   106b0:	d8c02017 	ldw	r3,128(sp)
   106b4:	d8801f17 	ldw	r2,124(sp)
   106b8:	45c00015 	stw	r23,0(r8)
   106bc:	1c07883a 	add	r3,r3,r16
   106c0:	10800044 	addi	r2,r2,1
   106c4:	d8c02015 	stw	r3,128(sp)
   106c8:	44000115 	stw	r16,4(r8)
   106cc:	d8801f15 	stw	r2,124(sp)
   106d0:	00c001c4 	movi	r3,7
   106d4:	18809916 	blt	r3,r2,1093c <___svfprintf_internal_r+0x368>
   106d8:	42000204 	addi	r8,r8,8
   106dc:	d9402f17 	ldw	r5,188(sp)
   106e0:	2c0b883a 	add	r5,r5,r16
   106e4:	d9402f15 	stw	r5,188(sp)
   106e8:	88800007 	ldb	r2,0(r17)
   106ec:	10009a26 	beq	r2,zero,10958 <___svfprintf_internal_r+0x384>
   106f0:	8dc00044 	addi	r23,r17,1
   106f4:	8c400047 	ldb	r17,1(r17)
   106f8:	0021883a 	mov	r16,zero
   106fc:	00bfffc4 	movi	r2,-1
   10700:	0025883a 	mov	r18,zero
   10704:	dc002905 	stb	r16,164(sp)
   10708:	d8002785 	stb	zero,158(sp)
   1070c:	d8002b05 	stb	zero,172(sp)
   10710:	d8802a15 	stw	r2,168(sp)
   10714:	d8003115 	stw	zero,196(sp)
   10718:	05001604 	movi	r20,88
   1071c:	05800244 	movi	r22,9
   10720:	4039883a 	mov	fp,r8
   10724:	9021883a 	mov	r16,r18
   10728:	bdc00044 	addi	r23,r23,1
   1072c:	88bff804 	addi	r2,r17,-32
   10730:	a0831e36 	bltu	r20,r2,113ac <___svfprintf_internal_r+0xdd8>
   10734:	100490ba 	slli	r2,r2,2
   10738:	00c00074 	movhi	r3,1
   1073c:	18c1d304 	addi	r3,r3,1868
   10740:	10c5883a 	add	r2,r2,r3
   10744:	10800017 	ldw	r2,0(r2)
   10748:	1000683a 	jmp	r2
   1074c:	000112f4 	movhi	zero,1099
   10750:	000113ac 	andhi	zero,zero,1102
   10754:	000113ac 	andhi	zero,zero,1102
   10758:	000112e8 	cmpgeui	zero,zero,1099
   1075c:	000113ac 	andhi	zero,zero,1102
   10760:	000113ac 	andhi	zero,zero,1102
   10764:	000113ac 	andhi	zero,zero,1102
   10768:	000113ac 	andhi	zero,zero,1102
   1076c:	000113ac 	andhi	zero,zero,1102
   10770:	000113ac 	andhi	zero,zero,1102
   10774:	000109b4 	movhi	zero,1062
   10778:	000111f8 	rdprs	zero,zero,1095
   1077c:	000113ac 	andhi	zero,zero,1102
   10780:	000108c0 	call	108c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xf8>
   10784:	000109d8 	cmpnei	zero,zero,1063
   10788:	000113ac 	andhi	zero,zero,1102
   1078c:	00010a64 	muli	zero,zero,1065
   10790:	00010a28 	cmpgeui	zero,zero,1064
   10794:	00010a28 	cmpgeui	zero,zero,1064
   10798:	00010a28 	cmpgeui	zero,zero,1064
   1079c:	00010a28 	cmpgeui	zero,zero,1064
   107a0:	00010a28 	cmpgeui	zero,zero,1064
   107a4:	00010a28 	cmpgeui	zero,zero,1064
   107a8:	00010a28 	cmpgeui	zero,zero,1064
   107ac:	00010a28 	cmpgeui	zero,zero,1064
   107b0:	00010a28 	cmpgeui	zero,zero,1064
   107b4:	000113ac 	andhi	zero,zero,1102
   107b8:	000113ac 	andhi	zero,zero,1102
   107bc:	000113ac 	andhi	zero,zero,1102
   107c0:	000113ac 	andhi	zero,zero,1102
   107c4:	000113ac 	andhi	zero,zero,1102
   107c8:	000113ac 	andhi	zero,zero,1102
   107cc:	000113ac 	andhi	zero,zero,1102
   107d0:	000113ac 	andhi	zero,zero,1102
   107d4:	000113ac 	andhi	zero,zero,1102
   107d8:	000113ac 	andhi	zero,zero,1102
   107dc:	00010b28 	cmpgeui	zero,zero,1068
   107e0:	00010a70 	cmpltui	zero,zero,1065
   107e4:	000113ac 	andhi	zero,zero,1102
   107e8:	00010a70 	cmpltui	zero,zero,1065
   107ec:	000113ac 	andhi	zero,zero,1102
   107f0:	000113ac 	andhi	zero,zero,1102
   107f4:	000113ac 	andhi	zero,zero,1102
   107f8:	000113ac 	andhi	zero,zero,1102
   107fc:	00010b1c 	xori	zero,zero,1068
   10800:	000113ac 	andhi	zero,zero,1102
   10804:	000113ac 	andhi	zero,zero,1102
   10808:	00010bf0 	cmpltui	zero,zero,1071
   1080c:	000113ac 	andhi	zero,zero,1102
   10810:	000113ac 	andhi	zero,zero,1102
   10814:	000113ac 	andhi	zero,zero,1102
   10818:	000113ac 	andhi	zero,zero,1102
   1081c:	000113ac 	andhi	zero,zero,1102
   10820:	0001106c 	andhi	zero,zero,1089
   10824:	000113ac 	andhi	zero,zero,1102
   10828:	000113ac 	andhi	zero,zero,1102
   1082c:	000110d8 	cmpnei	zero,zero,1091
   10830:	000113ac 	andhi	zero,zero,1102
   10834:	000113ac 	andhi	zero,zero,1102
   10838:	000113ac 	andhi	zero,zero,1102
   1083c:	000113ac 	andhi	zero,zero,1102
   10840:	000113ac 	andhi	zero,zero,1102
   10844:	000113ac 	andhi	zero,zero,1102
   10848:	000113ac 	andhi	zero,zero,1102
   1084c:	000113ac 	andhi	zero,zero,1102
   10850:	000113ac 	andhi	zero,zero,1102
   10854:	000113ac 	andhi	zero,zero,1102
   10858:	00011194 	movui	zero,1094
   1085c:	00011314 	movui	zero,1100
   10860:	00010a70 	cmpltui	zero,zero,1065
   10864:	00010a70 	cmpltui	zero,zero,1065
   10868:	00010a70 	cmpltui	zero,zero,1065
   1086c:	00011388 	cmpgei	zero,zero,1102
   10870:	00011314 	movui	zero,1100
   10874:	000113ac 	andhi	zero,zero,1102
   10878:	000113ac 	andhi	zero,zero,1102
   1087c:	00011334 	movhi	zero,1100
   10880:	000113ac 	andhi	zero,zero,1102
   10884:	00011348 	cmpgei	zero,zero,1101
   10888:	000111d8 	cmpnei	zero,zero,1095
   1088c:	000108cc 	andi	zero,zero,1059
   10890:	00011210 	cmplti	zero,zero,1096
   10894:	000113ac 	andhi	zero,zero,1102
   10898:	0001121c 	xori	zero,zero,1096
   1089c:	000113ac 	andhi	zero,zero,1102
   108a0:	00011280 	call	1128 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x194>
   108a4:	000113ac 	andhi	zero,zero,1102
   108a8:	000113ac 	andhi	zero,zero,1102
   108ac:	000112a0 	cmpeqi	zero,zero,1098
   108b0:	d8c03117 	ldw	r3,196(sp)
   108b4:	d8802e15 	stw	r2,184(sp)
   108b8:	00c7c83a 	sub	r3,zero,r3
   108bc:	d8c03115 	stw	r3,196(sp)
   108c0:	84000114 	ori	r16,r16,4
   108c4:	bc400007 	ldb	r17,0(r23)
   108c8:	003f9706 	br	10728 <__alt_data_end+0xfc010728>
   108cc:	00800c04 	movi	r2,48
   108d0:	d8802705 	stb	r2,156(sp)
   108d4:	00801e04 	movi	r2,120
   108d8:	d8802745 	stb	r2,157(sp)
   108dc:	d9002a17 	ldw	r4,168(sp)
   108e0:	d8802e17 	ldw	r2,184(sp)
   108e4:	d8002785 	stb	zero,158(sp)
   108e8:	e011883a 	mov	r8,fp
   108ec:	10c00104 	addi	r3,r2,4
   108f0:	15000017 	ldw	r20,0(r2)
   108f4:	002d883a 	mov	r22,zero
   108f8:	80800094 	ori	r2,r16,2
   108fc:	2002b616 	blt	r4,zero,113d8 <___svfprintf_internal_r+0xe04>
   10900:	00bfdfc4 	movi	r2,-129
   10904:	80a4703a 	and	r18,r16,r2
   10908:	d8c02e15 	stw	r3,184(sp)
   1090c:	94800094 	ori	r18,r18,2
   10910:	a002a01e 	bne	r20,zero,11394 <___svfprintf_internal_r+0xdc0>
   10914:	014000f4 	movhi	r5,3
   10918:	296dfd04 	addi	r5,r5,-18444
   1091c:	d9403a15 	stw	r5,232(sp)
   10920:	04401e04 	movi	r17,120
   10924:	d8c02a17 	ldw	r3,168(sp)
   10928:	0039883a 	mov	fp,zero
   1092c:	1801e626 	beq	r3,zero,110c8 <___svfprintf_internal_r+0xaf4>
   10930:	0029883a 	mov	r20,zero
   10934:	002d883a 	mov	r22,zero
   10938:	00020506 	br	11150 <___svfprintf_internal_r+0xb7c>
   1093c:	d9402d17 	ldw	r5,180(sp)
   10940:	d9801e04 	addi	r6,sp,120
   10944:	9809883a 	mov	r4,r19
   10948:	00195380 	call	19538 <__ssprint_r>
   1094c:	1000081e 	bne	r2,zero,10970 <___svfprintf_internal_r+0x39c>
   10950:	da000404 	addi	r8,sp,16
   10954:	003f6106 	br	106dc <__alt_data_end+0xfc0106dc>
   10958:	d8802017 	ldw	r2,128(sp)
   1095c:	10000426 	beq	r2,zero,10970 <___svfprintf_internal_r+0x39c>
   10960:	d9402d17 	ldw	r5,180(sp)
   10964:	d9003917 	ldw	r4,228(sp)
   10968:	d9801e04 	addi	r6,sp,120
   1096c:	00195380 	call	19538 <__ssprint_r>
   10970:	d8802d17 	ldw	r2,180(sp)
   10974:	10c0030b 	ldhu	r3,12(r2)
   10978:	d8802f17 	ldw	r2,188(sp)
   1097c:	18c0100c 	andi	r3,r3,64
   10980:	1806251e 	bne	r3,zero,12218 <___svfprintf_internal_r+0x1c44>
   10984:	dfc04817 	ldw	ra,288(sp)
   10988:	df004717 	ldw	fp,284(sp)
   1098c:	ddc04617 	ldw	r23,280(sp)
   10990:	dd804517 	ldw	r22,276(sp)
   10994:	dd404417 	ldw	r21,272(sp)
   10998:	dd004317 	ldw	r20,268(sp)
   1099c:	dcc04217 	ldw	r19,264(sp)
   109a0:	dc804117 	ldw	r18,260(sp)
   109a4:	dc404017 	ldw	r17,256(sp)
   109a8:	dc003f17 	ldw	r16,252(sp)
   109ac:	dec04904 	addi	sp,sp,292
   109b0:	f800283a 	ret
   109b4:	d9002e17 	ldw	r4,184(sp)
   109b8:	d9402e17 	ldw	r5,184(sp)
   109bc:	21000017 	ldw	r4,0(r4)
   109c0:	28800104 	addi	r2,r5,4
   109c4:	d9003115 	stw	r4,196(sp)
   109c8:	203fb916 	blt	r4,zero,108b0 <__alt_data_end+0xfc0108b0>
   109cc:	d8802e15 	stw	r2,184(sp)
   109d0:	bc400007 	ldb	r17,0(r23)
   109d4:	003f5406 	br	10728 <__alt_data_end+0xfc010728>
   109d8:	bc400007 	ldb	r17,0(r23)
   109dc:	01000a84 	movi	r4,42
   109e0:	b8c00044 	addi	r3,r23,1
   109e4:	89076926 	beq	r17,r4,1278c <___svfprintf_internal_r+0x21b8>
   109e8:	8cbff404 	addi	r18,r17,-48
   109ec:	b486b936 	bltu	r22,r18,124d4 <___svfprintf_internal_r+0x1f00>
   109f0:	0009883a 	mov	r4,zero
   109f4:	1823883a 	mov	r17,r3
   109f8:	01400284 	movi	r5,10
   109fc:	000d8d40 	call	d8d4 <__mulsi3>
   10a00:	88c00007 	ldb	r3,0(r17)
   10a04:	1489883a 	add	r4,r2,r18
   10a08:	8dc00044 	addi	r23,r17,1
   10a0c:	1cbff404 	addi	r18,r3,-48
   10a10:	b823883a 	mov	r17,r23
   10a14:	b4bff82e 	bgeu	r22,r18,109f8 <__alt_data_end+0xfc0109f8>
   10a18:	1823883a 	mov	r17,r3
   10a1c:	20060416 	blt	r4,zero,12230 <___svfprintf_internal_r+0x1c5c>
   10a20:	d9002a15 	stw	r4,168(sp)
   10a24:	003f4106 	br	1072c <__alt_data_end+0xfc01072c>
   10a28:	8cbff404 	addi	r18,r17,-48
   10a2c:	d8003115 	stw	zero,196(sp)
   10a30:	0009883a 	mov	r4,zero
   10a34:	b823883a 	mov	r17,r23
   10a38:	01400284 	movi	r5,10
   10a3c:	000d8d40 	call	d8d4 <__mulsi3>
   10a40:	88c00007 	ldb	r3,0(r17)
   10a44:	9089883a 	add	r4,r18,r2
   10a48:	bdc00044 	addi	r23,r23,1
   10a4c:	1cbff404 	addi	r18,r3,-48
   10a50:	b823883a 	mov	r17,r23
   10a54:	b4bff82e 	bgeu	r22,r18,10a38 <__alt_data_end+0xfc010a38>
   10a58:	1823883a 	mov	r17,r3
   10a5c:	d9003115 	stw	r4,196(sp)
   10a60:	003f3206 	br	1072c <__alt_data_end+0xfc01072c>
   10a64:	84002014 	ori	r16,r16,128
   10a68:	bc400007 	ldb	r17,0(r23)
   10a6c:	003f2e06 	br	10728 <__alt_data_end+0xfc010728>
   10a70:	8025883a 	mov	r18,r16
   10a74:	dc002903 	ldbu	r16,164(sp)
   10a78:	e011883a 	mov	r8,fp
   10a7c:	84003fcc 	andi	r16,r16,255
   10a80:	8007721e 	bne	r16,zero,1284c <___svfprintf_internal_r+0x2278>
   10a84:	9080020c 	andi	r2,r18,8
   10a88:	1004a526 	beq	r2,zero,11d20 <___svfprintf_internal_r+0x174c>
   10a8c:	d9002e17 	ldw	r4,184(sp)
   10a90:	d9402e17 	ldw	r5,184(sp)
   10a94:	d8802e17 	ldw	r2,184(sp)
   10a98:	21000017 	ldw	r4,0(r4)
   10a9c:	29400117 	ldw	r5,4(r5)
   10aa0:	10800204 	addi	r2,r2,8
   10aa4:	d9003615 	stw	r4,216(sp)
   10aa8:	d9403715 	stw	r5,220(sp)
   10aac:	d8802e15 	stw	r2,184(sp)
   10ab0:	d9003617 	ldw	r4,216(sp)
   10ab4:	d9403717 	ldw	r5,220(sp)
   10ab8:	da003e15 	stw	r8,248(sp)
   10abc:	04000044 	movi	r16,1
   10ac0:	00193880 	call	19388 <__fpclassifyd>
   10ac4:	da003e17 	ldw	r8,248(sp)
   10ac8:	1404731e 	bne	r2,r16,11c98 <___svfprintf_internal_r+0x16c4>
   10acc:	d9003617 	ldw	r4,216(sp)
   10ad0:	d9403717 	ldw	r5,220(sp)
   10ad4:	000d883a 	mov	r6,zero
   10ad8:	000f883a 	mov	r7,zero
   10adc:	001ea8c0 	call	1ea8c <__ledf2>
   10ae0:	da003e17 	ldw	r8,248(sp)
   10ae4:	10061b16 	blt	r2,zero,12354 <___svfprintf_internal_r+0x1d80>
   10ae8:	df002783 	ldbu	fp,158(sp)
   10aec:	008011c4 	movi	r2,71
   10af0:	1445810e 	bge	r2,r17,120f8 <___svfprintf_internal_r+0x1b24>
   10af4:	040000f4 	movhi	r16,3
   10af8:	842df504 	addi	r16,r16,-18476
   10afc:	00c000c4 	movi	r3,3
   10b00:	00bfdfc4 	movi	r2,-129
   10b04:	d8c02915 	stw	r3,164(sp)
   10b08:	90a4703a 	and	r18,r18,r2
   10b0c:	d8c02b15 	stw	r3,172(sp)
   10b10:	d8002a15 	stw	zero,168(sp)
   10b14:	d8003215 	stw	zero,200(sp)
   10b18:	00006c06 	br	10ccc <___svfprintf_internal_r+0x6f8>
   10b1c:	84000214 	ori	r16,r16,8
   10b20:	bc400007 	ldb	r17,0(r23)
   10b24:	003f0006 	br	10728 <__alt_data_end+0xfc010728>
   10b28:	8025883a 	mov	r18,r16
   10b2c:	dc002903 	ldbu	r16,164(sp)
   10b30:	e011883a 	mov	r8,fp
   10b34:	84003fcc 	andi	r16,r16,255
   10b38:	80073f1e 	bne	r16,zero,12838 <___svfprintf_internal_r+0x2264>
   10b3c:	94800414 	ori	r18,r18,16
   10b40:	9080080c 	andi	r2,r18,32
   10b44:	1003bb26 	beq	r2,zero,11a34 <___svfprintf_internal_r+0x1460>
   10b48:	d9002e17 	ldw	r4,184(sp)
   10b4c:	20800117 	ldw	r2,4(r4)
   10b50:	25000017 	ldw	r20,0(r4)
   10b54:	21000204 	addi	r4,r4,8
   10b58:	d9002e15 	stw	r4,184(sp)
   10b5c:	102d883a 	mov	r22,r2
   10b60:	1003bd16 	blt	r2,zero,11a58 <___svfprintf_internal_r+0x1484>
   10b64:	d9002a17 	ldw	r4,168(sp)
   10b68:	df002783 	ldbu	fp,158(sp)
   10b6c:	2003d016 	blt	r4,zero,11ab0 <___svfprintf_internal_r+0x14dc>
   10b70:	00ffdfc4 	movi	r3,-129
   10b74:	a584b03a 	or	r2,r20,r22
   10b78:	90e4703a 	and	r18,r18,r3
   10b7c:	10015026 	beq	r2,zero,110c0 <___svfprintf_internal_r+0xaec>
   10b80:	b0037026 	beq	r22,zero,11944 <___svfprintf_internal_r+0x1370>
   10b84:	dc402915 	stw	r17,164(sp)
   10b88:	dc001e04 	addi	r16,sp,120
   10b8c:	b023883a 	mov	r17,r22
   10b90:	402d883a 	mov	r22,r8
   10b94:	a009883a 	mov	r4,r20
   10b98:	880b883a 	mov	r5,r17
   10b9c:	01800284 	movi	r6,10
   10ba0:	000f883a 	mov	r7,zero
   10ba4:	001d0e80 	call	1d0e8 <__umoddi3>
   10ba8:	10800c04 	addi	r2,r2,48
   10bac:	843fffc4 	addi	r16,r16,-1
   10bb0:	a009883a 	mov	r4,r20
   10bb4:	880b883a 	mov	r5,r17
   10bb8:	80800005 	stb	r2,0(r16)
   10bbc:	01800284 	movi	r6,10
   10bc0:	000f883a 	mov	r7,zero
   10bc4:	001caec0 	call	1caec <__udivdi3>
   10bc8:	1029883a 	mov	r20,r2
   10bcc:	10c4b03a 	or	r2,r2,r3
   10bd0:	1823883a 	mov	r17,r3
   10bd4:	103fef1e 	bne	r2,zero,10b94 <__alt_data_end+0xfc010b94>
   10bd8:	d8c02817 	ldw	r3,160(sp)
   10bdc:	dc402917 	ldw	r17,164(sp)
   10be0:	b011883a 	mov	r8,r22
   10be4:	1c07c83a 	sub	r3,r3,r16
   10be8:	d8c02b15 	stw	r3,172(sp)
   10bec:	00003106 	br	10cb4 <___svfprintf_internal_r+0x6e0>
   10bf0:	8025883a 	mov	r18,r16
   10bf4:	dc002903 	ldbu	r16,164(sp)
   10bf8:	e011883a 	mov	r8,fp
   10bfc:	84003fcc 	andi	r16,r16,255
   10c00:	80070a1e 	bne	r16,zero,1282c <___svfprintf_internal_r+0x2258>
   10c04:	94800414 	ori	r18,r18,16
   10c08:	9080080c 	andi	r2,r18,32
   10c0c:	1002f626 	beq	r2,zero,117e8 <___svfprintf_internal_r+0x1214>
   10c10:	d9002e17 	ldw	r4,184(sp)
   10c14:	d9402a17 	ldw	r5,168(sp)
   10c18:	d8002785 	stb	zero,158(sp)
   10c1c:	20800204 	addi	r2,r4,8
   10c20:	25000017 	ldw	r20,0(r4)
   10c24:	25800117 	ldw	r22,4(r4)
   10c28:	28043716 	blt	r5,zero,11d08 <___svfprintf_internal_r+0x1734>
   10c2c:	013fdfc4 	movi	r4,-129
   10c30:	a586b03a 	or	r3,r20,r22
   10c34:	d8802e15 	stw	r2,184(sp)
   10c38:	9124703a 	and	r18,r18,r4
   10c3c:	1802f71e 	bne	r3,zero,1181c <___svfprintf_internal_r+0x1248>
   10c40:	d9402a17 	ldw	r5,168(sp)
   10c44:	0039883a 	mov	fp,zero
   10c48:	2806df26 	beq	r5,zero,127c8 <___svfprintf_internal_r+0x21f4>
   10c4c:	0029883a 	mov	r20,zero
   10c50:	002d883a 	mov	r22,zero
   10c54:	dc001e04 	addi	r16,sp,120
   10c58:	a006d0fa 	srli	r3,r20,3
   10c5c:	b008977a 	slli	r4,r22,29
   10c60:	b02cd0fa 	srli	r22,r22,3
   10c64:	a50001cc 	andi	r20,r20,7
   10c68:	a0800c04 	addi	r2,r20,48
   10c6c:	843fffc4 	addi	r16,r16,-1
   10c70:	20e8b03a 	or	r20,r4,r3
   10c74:	80800005 	stb	r2,0(r16)
   10c78:	a586b03a 	or	r3,r20,r22
   10c7c:	183ff61e 	bne	r3,zero,10c58 <__alt_data_end+0xfc010c58>
   10c80:	90c0004c 	andi	r3,r18,1
   10c84:	18013f26 	beq	r3,zero,11184 <___svfprintf_internal_r+0xbb0>
   10c88:	10803fcc 	andi	r2,r2,255
   10c8c:	1080201c 	xori	r2,r2,128
   10c90:	10bfe004 	addi	r2,r2,-128
   10c94:	00c00c04 	movi	r3,48
   10c98:	10c13a26 	beq	r2,r3,11184 <___svfprintf_internal_r+0xbb0>
   10c9c:	80ffffc5 	stb	r3,-1(r16)
   10ca0:	d8c02817 	ldw	r3,160(sp)
   10ca4:	80bfffc4 	addi	r2,r16,-1
   10ca8:	1021883a 	mov	r16,r2
   10cac:	1887c83a 	sub	r3,r3,r2
   10cb0:	d8c02b15 	stw	r3,172(sp)
   10cb4:	d8802b17 	ldw	r2,172(sp)
   10cb8:	d9002a17 	ldw	r4,168(sp)
   10cbc:	1100010e 	bge	r2,r4,10cc4 <___svfprintf_internal_r+0x6f0>
   10cc0:	2005883a 	mov	r2,r4
   10cc4:	d8802915 	stw	r2,164(sp)
   10cc8:	d8003215 	stw	zero,200(sp)
   10ccc:	e7003fcc 	andi	fp,fp,255
   10cd0:	e700201c 	xori	fp,fp,128
   10cd4:	e73fe004 	addi	fp,fp,-128
   10cd8:	e0000326 	beq	fp,zero,10ce8 <___svfprintf_internal_r+0x714>
   10cdc:	d8c02917 	ldw	r3,164(sp)
   10ce0:	18c00044 	addi	r3,r3,1
   10ce4:	d8c02915 	stw	r3,164(sp)
   10ce8:	90c0008c 	andi	r3,r18,2
   10cec:	d8c02c15 	stw	r3,176(sp)
   10cf0:	18000326 	beq	r3,zero,10d00 <___svfprintf_internal_r+0x72c>
   10cf4:	d8c02917 	ldw	r3,164(sp)
   10cf8:	18c00084 	addi	r3,r3,2
   10cfc:	d8c02915 	stw	r3,164(sp)
   10d00:	90c0210c 	andi	r3,r18,132
   10d04:	d8c03015 	stw	r3,192(sp)
   10d08:	1801c31e 	bne	r3,zero,11418 <___svfprintf_internal_r+0xe44>
   10d0c:	d9003117 	ldw	r4,196(sp)
   10d10:	d8c02917 	ldw	r3,164(sp)
   10d14:	20e9c83a 	sub	r20,r4,r3
   10d18:	0501bf0e 	bge	zero,r20,11418 <___svfprintf_internal_r+0xe44>
   10d1c:	02400404 	movi	r9,16
   10d20:	d8c02017 	ldw	r3,128(sp)
   10d24:	d8801f17 	ldw	r2,124(sp)
   10d28:	4d053d0e 	bge	r9,r20,12220 <___svfprintf_internal_r+0x1c4c>
   10d2c:	014000f4 	movhi	r5,3
   10d30:	296e0884 	addi	r5,r5,-18398
   10d34:	dc403c15 	stw	r17,240(sp)
   10d38:	d9403515 	stw	r5,212(sp)
   10d3c:	a023883a 	mov	r17,r20
   10d40:	482d883a 	mov	r22,r9
   10d44:	9029883a 	mov	r20,r18
   10d48:	070001c4 	movi	fp,7
   10d4c:	8025883a 	mov	r18,r16
   10d50:	dc002d17 	ldw	r16,180(sp)
   10d54:	00000306 	br	10d64 <___svfprintf_internal_r+0x790>
   10d58:	8c7ffc04 	addi	r17,r17,-16
   10d5c:	42000204 	addi	r8,r8,8
   10d60:	b440130e 	bge	r22,r17,10db0 <___svfprintf_internal_r+0x7dc>
   10d64:	010000f4 	movhi	r4,3
   10d68:	18c00404 	addi	r3,r3,16
   10d6c:	10800044 	addi	r2,r2,1
   10d70:	212e0884 	addi	r4,r4,-18398
   10d74:	41000015 	stw	r4,0(r8)
   10d78:	45800115 	stw	r22,4(r8)
   10d7c:	d8c02015 	stw	r3,128(sp)
   10d80:	d8801f15 	stw	r2,124(sp)
   10d84:	e0bff40e 	bge	fp,r2,10d58 <__alt_data_end+0xfc010d58>
   10d88:	d9801e04 	addi	r6,sp,120
   10d8c:	800b883a 	mov	r5,r16
   10d90:	9809883a 	mov	r4,r19
   10d94:	00195380 	call	19538 <__ssprint_r>
   10d98:	103ef51e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   10d9c:	8c7ffc04 	addi	r17,r17,-16
   10da0:	d8c02017 	ldw	r3,128(sp)
   10da4:	d8801f17 	ldw	r2,124(sp)
   10da8:	da000404 	addi	r8,sp,16
   10dac:	b47fed16 	blt	r22,r17,10d64 <__alt_data_end+0xfc010d64>
   10db0:	9021883a 	mov	r16,r18
   10db4:	a025883a 	mov	r18,r20
   10db8:	8829883a 	mov	r20,r17
   10dbc:	dc403c17 	ldw	r17,240(sp)
   10dc0:	d9403517 	ldw	r5,212(sp)
   10dc4:	a0c7883a 	add	r3,r20,r3
   10dc8:	10800044 	addi	r2,r2,1
   10dcc:	41400015 	stw	r5,0(r8)
   10dd0:	45000115 	stw	r20,4(r8)
   10dd4:	d8c02015 	stw	r3,128(sp)
   10dd8:	d8801f15 	stw	r2,124(sp)
   10ddc:	010001c4 	movi	r4,7
   10de0:	2082c116 	blt	r4,r2,118e8 <___svfprintf_internal_r+0x1314>
   10de4:	df002787 	ldb	fp,158(sp)
   10de8:	42000204 	addi	r8,r8,8
   10dec:	e0000c26 	beq	fp,zero,10e20 <___svfprintf_internal_r+0x84c>
   10df0:	d8801f17 	ldw	r2,124(sp)
   10df4:	d9002784 	addi	r4,sp,158
   10df8:	18c00044 	addi	r3,r3,1
   10dfc:	10800044 	addi	r2,r2,1
   10e00:	41000015 	stw	r4,0(r8)
   10e04:	01000044 	movi	r4,1
   10e08:	41000115 	stw	r4,4(r8)
   10e0c:	d8c02015 	stw	r3,128(sp)
   10e10:	d8801f15 	stw	r2,124(sp)
   10e14:	010001c4 	movi	r4,7
   10e18:	20825a16 	blt	r4,r2,11784 <___svfprintf_internal_r+0x11b0>
   10e1c:	42000204 	addi	r8,r8,8
   10e20:	d8802c17 	ldw	r2,176(sp)
   10e24:	10000c26 	beq	r2,zero,10e58 <___svfprintf_internal_r+0x884>
   10e28:	d8801f17 	ldw	r2,124(sp)
   10e2c:	d9002704 	addi	r4,sp,156
   10e30:	18c00084 	addi	r3,r3,2
   10e34:	10800044 	addi	r2,r2,1
   10e38:	41000015 	stw	r4,0(r8)
   10e3c:	01000084 	movi	r4,2
   10e40:	41000115 	stw	r4,4(r8)
   10e44:	d8c02015 	stw	r3,128(sp)
   10e48:	d8801f15 	stw	r2,124(sp)
   10e4c:	010001c4 	movi	r4,7
   10e50:	20825416 	blt	r4,r2,117a4 <___svfprintf_internal_r+0x11d0>
   10e54:	42000204 	addi	r8,r8,8
   10e58:	d9003017 	ldw	r4,192(sp)
   10e5c:	00802004 	movi	r2,128
   10e60:	2081b926 	beq	r4,r2,11548 <___svfprintf_internal_r+0xf74>
   10e64:	d9402a17 	ldw	r5,168(sp)
   10e68:	d8802b17 	ldw	r2,172(sp)
   10e6c:	28adc83a 	sub	r22,r5,r2
   10e70:	05802f0e 	bge	zero,r22,10f30 <___svfprintf_internal_r+0x95c>
   10e74:	07000404 	movi	fp,16
   10e78:	d8801f17 	ldw	r2,124(sp)
   10e7c:	e583e20e 	bge	fp,r22,11e08 <___svfprintf_internal_r+0x1834>
   10e80:	014000f4 	movhi	r5,3
   10e84:	296e0484 	addi	r5,r5,-18414
   10e88:	dc402a15 	stw	r17,168(sp)
   10e8c:	d9402c15 	stw	r5,176(sp)
   10e90:	b023883a 	mov	r17,r22
   10e94:	050001c4 	movi	r20,7
   10e98:	902d883a 	mov	r22,r18
   10e9c:	8025883a 	mov	r18,r16
   10ea0:	dc002d17 	ldw	r16,180(sp)
   10ea4:	00000306 	br	10eb4 <___svfprintf_internal_r+0x8e0>
   10ea8:	8c7ffc04 	addi	r17,r17,-16
   10eac:	42000204 	addi	r8,r8,8
   10eb0:	e440110e 	bge	fp,r17,10ef8 <___svfprintf_internal_r+0x924>
   10eb4:	18c00404 	addi	r3,r3,16
   10eb8:	10800044 	addi	r2,r2,1
   10ebc:	45400015 	stw	r21,0(r8)
   10ec0:	47000115 	stw	fp,4(r8)
   10ec4:	d8c02015 	stw	r3,128(sp)
   10ec8:	d8801f15 	stw	r2,124(sp)
   10ecc:	a0bff60e 	bge	r20,r2,10ea8 <__alt_data_end+0xfc010ea8>
   10ed0:	d9801e04 	addi	r6,sp,120
   10ed4:	800b883a 	mov	r5,r16
   10ed8:	9809883a 	mov	r4,r19
   10edc:	00195380 	call	19538 <__ssprint_r>
   10ee0:	103ea31e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   10ee4:	8c7ffc04 	addi	r17,r17,-16
   10ee8:	d8c02017 	ldw	r3,128(sp)
   10eec:	d8801f17 	ldw	r2,124(sp)
   10ef0:	da000404 	addi	r8,sp,16
   10ef4:	e47fef16 	blt	fp,r17,10eb4 <__alt_data_end+0xfc010eb4>
   10ef8:	9021883a 	mov	r16,r18
   10efc:	b025883a 	mov	r18,r22
   10f00:	882d883a 	mov	r22,r17
   10f04:	dc402a17 	ldw	r17,168(sp)
   10f08:	d9002c17 	ldw	r4,176(sp)
   10f0c:	1d87883a 	add	r3,r3,r22
   10f10:	10800044 	addi	r2,r2,1
   10f14:	41000015 	stw	r4,0(r8)
   10f18:	45800115 	stw	r22,4(r8)
   10f1c:	d8c02015 	stw	r3,128(sp)
   10f20:	d8801f15 	stw	r2,124(sp)
   10f24:	010001c4 	movi	r4,7
   10f28:	20820e16 	blt	r4,r2,11764 <___svfprintf_internal_r+0x1190>
   10f2c:	42000204 	addi	r8,r8,8
   10f30:	9080400c 	andi	r2,r18,256
   10f34:	10013a1e 	bne	r2,zero,11420 <___svfprintf_internal_r+0xe4c>
   10f38:	d9402b17 	ldw	r5,172(sp)
   10f3c:	d8801f17 	ldw	r2,124(sp)
   10f40:	44000015 	stw	r16,0(r8)
   10f44:	1947883a 	add	r3,r3,r5
   10f48:	10800044 	addi	r2,r2,1
   10f4c:	41400115 	stw	r5,4(r8)
   10f50:	d8c02015 	stw	r3,128(sp)
   10f54:	d8801f15 	stw	r2,124(sp)
   10f58:	010001c4 	movi	r4,7
   10f5c:	2081f316 	blt	r4,r2,1172c <___svfprintf_internal_r+0x1158>
   10f60:	42000204 	addi	r8,r8,8
   10f64:	9480010c 	andi	r18,r18,4
   10f68:	90003226 	beq	r18,zero,11034 <___svfprintf_internal_r+0xa60>
   10f6c:	d9403117 	ldw	r5,196(sp)
   10f70:	d8802917 	ldw	r2,164(sp)
   10f74:	28a1c83a 	sub	r16,r5,r2
   10f78:	04002e0e 	bge	zero,r16,11034 <___svfprintf_internal_r+0xa60>
   10f7c:	04400404 	movi	r17,16
   10f80:	d8801f17 	ldw	r2,124(sp)
   10f84:	8c04db0e 	bge	r17,r16,122f4 <___svfprintf_internal_r+0x1d20>
   10f88:	014000f4 	movhi	r5,3
   10f8c:	296e0884 	addi	r5,r5,-18398
   10f90:	d9403515 	stw	r5,212(sp)
   10f94:	048001c4 	movi	r18,7
   10f98:	dd002d17 	ldw	r20,180(sp)
   10f9c:	00000306 	br	10fac <___svfprintf_internal_r+0x9d8>
   10fa0:	843ffc04 	addi	r16,r16,-16
   10fa4:	42000204 	addi	r8,r8,8
   10fa8:	8c00130e 	bge	r17,r16,10ff8 <___svfprintf_internal_r+0xa24>
   10fac:	010000f4 	movhi	r4,3
   10fb0:	18c00404 	addi	r3,r3,16
   10fb4:	10800044 	addi	r2,r2,1
   10fb8:	212e0884 	addi	r4,r4,-18398
   10fbc:	41000015 	stw	r4,0(r8)
   10fc0:	44400115 	stw	r17,4(r8)
   10fc4:	d8c02015 	stw	r3,128(sp)
   10fc8:	d8801f15 	stw	r2,124(sp)
   10fcc:	90bff40e 	bge	r18,r2,10fa0 <__alt_data_end+0xfc010fa0>
   10fd0:	d9801e04 	addi	r6,sp,120
   10fd4:	a00b883a 	mov	r5,r20
   10fd8:	9809883a 	mov	r4,r19
   10fdc:	00195380 	call	19538 <__ssprint_r>
   10fe0:	103e631e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   10fe4:	843ffc04 	addi	r16,r16,-16
   10fe8:	d8c02017 	ldw	r3,128(sp)
   10fec:	d8801f17 	ldw	r2,124(sp)
   10ff0:	da000404 	addi	r8,sp,16
   10ff4:	8c3fed16 	blt	r17,r16,10fac <__alt_data_end+0xfc010fac>
   10ff8:	d9403517 	ldw	r5,212(sp)
   10ffc:	1c07883a 	add	r3,r3,r16
   11000:	10800044 	addi	r2,r2,1
   11004:	41400015 	stw	r5,0(r8)
   11008:	44000115 	stw	r16,4(r8)
   1100c:	d8c02015 	stw	r3,128(sp)
   11010:	d8801f15 	stw	r2,124(sp)
   11014:	010001c4 	movi	r4,7
   11018:	2080060e 	bge	r4,r2,11034 <___svfprintf_internal_r+0xa60>
   1101c:	d9402d17 	ldw	r5,180(sp)
   11020:	d9801e04 	addi	r6,sp,120
   11024:	9809883a 	mov	r4,r19
   11028:	00195380 	call	19538 <__ssprint_r>
   1102c:	103e501e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11030:	d8c02017 	ldw	r3,128(sp)
   11034:	d8803117 	ldw	r2,196(sp)
   11038:	d9002917 	ldw	r4,164(sp)
   1103c:	1100010e 	bge	r2,r4,11044 <___svfprintf_internal_r+0xa70>
   11040:	2005883a 	mov	r2,r4
   11044:	d9402f17 	ldw	r5,188(sp)
   11048:	288b883a 	add	r5,r5,r2
   1104c:	d9402f15 	stw	r5,188(sp)
   11050:	1801be1e 	bne	r3,zero,1174c <___svfprintf_internal_r+0x1178>
   11054:	b8800007 	ldb	r2,0(r23)
   11058:	d8001f15 	stw	zero,124(sp)
   1105c:	da000404 	addi	r8,sp,16
   11060:	103d891e 	bne	r2,zero,10688 <__alt_data_end+0xfc010688>
   11064:	b823883a 	mov	r17,r23
   11068:	003d9f06 	br	106e8 <__alt_data_end+0xfc0106e8>
   1106c:	8025883a 	mov	r18,r16
   11070:	dc002903 	ldbu	r16,164(sp)
   11074:	e011883a 	mov	r8,fp
   11078:	84003fcc 	andi	r16,r16,255
   1107c:	8005e61e 	bne	r16,zero,12818 <___svfprintf_internal_r+0x2244>
   11080:	94800414 	ori	r18,r18,16
   11084:	9080080c 	andi	r2,r18,32
   11088:	10022026 	beq	r2,zero,1190c <___svfprintf_internal_r+0x1338>
   1108c:	d9002e17 	ldw	r4,184(sp)
   11090:	d9402a17 	ldw	r5,168(sp)
   11094:	d8002785 	stb	zero,158(sp)
   11098:	20c00204 	addi	r3,r4,8
   1109c:	25000017 	ldw	r20,0(r4)
   110a0:	25800117 	ldw	r22,4(r4)
   110a4:	2803ad16 	blt	r5,zero,11f5c <___svfprintf_internal_r+0x1988>
   110a8:	013fdfc4 	movi	r4,-129
   110ac:	a584b03a 	or	r2,r20,r22
   110b0:	d8c02e15 	stw	r3,184(sp)
   110b4:	9124703a 	and	r18,r18,r4
   110b8:	0039883a 	mov	fp,zero
   110bc:	103eb01e 	bne	r2,zero,10b80 <__alt_data_end+0xfc010b80>
   110c0:	d8802a17 	ldw	r2,168(sp)
   110c4:	1002e71e 	bne	r2,zero,11c64 <___svfprintf_internal_r+0x1690>
   110c8:	d8002a15 	stw	zero,168(sp)
   110cc:	d8002b15 	stw	zero,172(sp)
   110d0:	dc001e04 	addi	r16,sp,120
   110d4:	003ef706 	br	10cb4 <__alt_data_end+0xfc010cb4>
   110d8:	8025883a 	mov	r18,r16
   110dc:	dc002903 	ldbu	r16,164(sp)
   110e0:	e011883a 	mov	r8,fp
   110e4:	84003fcc 	andi	r16,r16,255
   110e8:	8005c81e 	bne	r16,zero,1280c <___svfprintf_internal_r+0x2238>
   110ec:	010000f4 	movhi	r4,3
   110f0:	212df804 	addi	r4,r4,-18464
   110f4:	d9003a15 	stw	r4,232(sp)
   110f8:	9080080c 	andi	r2,r18,32
   110fc:	10007226 	beq	r2,zero,112c8 <___svfprintf_internal_r+0xcf4>
   11100:	d9402e17 	ldw	r5,184(sp)
   11104:	2d000017 	ldw	r20,0(r5)
   11108:	2d800117 	ldw	r22,4(r5)
   1110c:	29400204 	addi	r5,r5,8
   11110:	d9402e15 	stw	r5,184(sp)
   11114:	9080004c 	andi	r2,r18,1
   11118:	1001aa26 	beq	r2,zero,117c4 <___svfprintf_internal_r+0x11f0>
   1111c:	a584b03a 	or	r2,r20,r22
   11120:	10032526 	beq	r2,zero,11db8 <___svfprintf_internal_r+0x17e4>
   11124:	d8c02a17 	ldw	r3,168(sp)
   11128:	00800c04 	movi	r2,48
   1112c:	d8802705 	stb	r2,156(sp)
   11130:	dc402745 	stb	r17,157(sp)
   11134:	d8002785 	stb	zero,158(sp)
   11138:	90800094 	ori	r2,r18,2
   1113c:	1804a316 	blt	r3,zero,123cc <___svfprintf_internal_r+0x1df8>
   11140:	00bfdfc4 	movi	r2,-129
   11144:	90a4703a 	and	r18,r18,r2
   11148:	94800094 	ori	r18,r18,2
   1114c:	0039883a 	mov	fp,zero
   11150:	d9003a17 	ldw	r4,232(sp)
   11154:	dc001e04 	addi	r16,sp,120
   11158:	a08003cc 	andi	r2,r20,15
   1115c:	b006973a 	slli	r3,r22,28
   11160:	2085883a 	add	r2,r4,r2
   11164:	a028d13a 	srli	r20,r20,4
   11168:	10800003 	ldbu	r2,0(r2)
   1116c:	b02cd13a 	srli	r22,r22,4
   11170:	843fffc4 	addi	r16,r16,-1
   11174:	1d28b03a 	or	r20,r3,r20
   11178:	80800005 	stb	r2,0(r16)
   1117c:	a584b03a 	or	r2,r20,r22
   11180:	103ff51e 	bne	r2,zero,11158 <__alt_data_end+0xfc011158>
   11184:	d8c02817 	ldw	r3,160(sp)
   11188:	1c07c83a 	sub	r3,r3,r16
   1118c:	d8c02b15 	stw	r3,172(sp)
   11190:	003ec806 	br	10cb4 <__alt_data_end+0xfc010cb4>
   11194:	d8c02e17 	ldw	r3,184(sp)
   11198:	d9002e17 	ldw	r4,184(sp)
   1119c:	8025883a 	mov	r18,r16
   111a0:	18800017 	ldw	r2,0(r3)
   111a4:	21000104 	addi	r4,r4,4
   111a8:	00c00044 	movi	r3,1
   111ac:	e011883a 	mov	r8,fp
   111b0:	d8c02915 	stw	r3,164(sp)
   111b4:	d8002785 	stb	zero,158(sp)
   111b8:	d8801405 	stb	r2,80(sp)
   111bc:	d9002e15 	stw	r4,184(sp)
   111c0:	d8c02b15 	stw	r3,172(sp)
   111c4:	d8002a15 	stw	zero,168(sp)
   111c8:	d8003215 	stw	zero,200(sp)
   111cc:	dc001404 	addi	r16,sp,80
   111d0:	0039883a 	mov	fp,zero
   111d4:	003ec406 	br	10ce8 <__alt_data_end+0xfc010ce8>
   111d8:	8025883a 	mov	r18,r16
   111dc:	dc002903 	ldbu	r16,164(sp)
   111e0:	e011883a 	mov	r8,fp
   111e4:	84003fcc 	andi	r16,r16,255
   111e8:	803e8726 	beq	r16,zero,10c08 <__alt_data_end+0xfc010c08>
   111ec:	d8c02b03 	ldbu	r3,172(sp)
   111f0:	d8c02785 	stb	r3,158(sp)
   111f4:	003e8406 	br	10c08 <__alt_data_end+0xfc010c08>
   111f8:	00c00044 	movi	r3,1
   111fc:	d8c02905 	stb	r3,164(sp)
   11200:	00c00ac4 	movi	r3,43
   11204:	d8c02b05 	stb	r3,172(sp)
   11208:	bc400007 	ldb	r17,0(r23)
   1120c:	003d4606 	br	10728 <__alt_data_end+0xfc010728>
   11210:	84000814 	ori	r16,r16,32
   11214:	bc400007 	ldb	r17,0(r23)
   11218:	003d4306 	br	10728 <__alt_data_end+0xfc010728>
   1121c:	d8802e17 	ldw	r2,184(sp)
   11220:	8025883a 	mov	r18,r16
   11224:	d8002785 	stb	zero,158(sp)
   11228:	14000017 	ldw	r16,0(r2)
   1122c:	e011883a 	mov	r8,fp
   11230:	15000104 	addi	r20,r2,4
   11234:	80042126 	beq	r16,zero,122bc <___svfprintf_internal_r+0x1ce8>
   11238:	d8c02a17 	ldw	r3,168(sp)
   1123c:	1803ee16 	blt	r3,zero,121f8 <___svfprintf_internal_r+0x1c24>
   11240:	180d883a 	mov	r6,r3
   11244:	000b883a 	mov	r5,zero
   11248:	8009883a 	mov	r4,r16
   1124c:	df003e15 	stw	fp,248(sp)
   11250:	00179c40 	call	179c4 <memchr>
   11254:	da003e17 	ldw	r8,248(sp)
   11258:	10046a26 	beq	r2,zero,12404 <___svfprintf_internal_r+0x1e30>
   1125c:	1405c83a 	sub	r2,r2,r16
   11260:	d8802b15 	stw	r2,172(sp)
   11264:	1003ea16 	blt	r2,zero,12210 <___svfprintf_internal_r+0x1c3c>
   11268:	df002783 	ldbu	fp,158(sp)
   1126c:	d8802915 	stw	r2,164(sp)
   11270:	dd002e15 	stw	r20,184(sp)
   11274:	d8002a15 	stw	zero,168(sp)
   11278:	d8003215 	stw	zero,200(sp)
   1127c:	003e9306 	br	10ccc <__alt_data_end+0xfc010ccc>
   11280:	8025883a 	mov	r18,r16
   11284:	dc002903 	ldbu	r16,164(sp)
   11288:	e011883a 	mov	r8,fp
   1128c:	84003fcc 	andi	r16,r16,255
   11290:	803f7c26 	beq	r16,zero,11084 <__alt_data_end+0xfc011084>
   11294:	d8c02b03 	ldbu	r3,172(sp)
   11298:	d8c02785 	stb	r3,158(sp)
   1129c:	003f7906 	br	11084 <__alt_data_end+0xfc011084>
   112a0:	8025883a 	mov	r18,r16
   112a4:	dc002903 	ldbu	r16,164(sp)
   112a8:	e011883a 	mov	r8,fp
   112ac:	84003fcc 	andi	r16,r16,255
   112b0:	8005741e 	bne	r16,zero,12884 <___svfprintf_internal_r+0x22b0>
   112b4:	010000f4 	movhi	r4,3
   112b8:	212dfd04 	addi	r4,r4,-18444
   112bc:	d9003a15 	stw	r4,232(sp)
   112c0:	9080080c 	andi	r2,r18,32
   112c4:	103f8e1e 	bne	r2,zero,11100 <__alt_data_end+0xfc011100>
   112c8:	9080040c 	andi	r2,r18,16
   112cc:	1002a726 	beq	r2,zero,11d6c <___svfprintf_internal_r+0x1798>
   112d0:	d8802e17 	ldw	r2,184(sp)
   112d4:	002d883a 	mov	r22,zero
   112d8:	15000017 	ldw	r20,0(r2)
   112dc:	10800104 	addi	r2,r2,4
   112e0:	d8802e15 	stw	r2,184(sp)
   112e4:	003f8b06 	br	11114 <__alt_data_end+0xfc011114>
   112e8:	84000054 	ori	r16,r16,1
   112ec:	bc400007 	ldb	r17,0(r23)
   112f0:	003d0d06 	br	10728 <__alt_data_end+0xfc010728>
   112f4:	d8802b07 	ldb	r2,172(sp)
   112f8:	1002a41e 	bne	r2,zero,11d8c <___svfprintf_internal_r+0x17b8>
   112fc:	00c00044 	movi	r3,1
   11300:	d8c02905 	stb	r3,164(sp)
   11304:	00c00804 	movi	r3,32
   11308:	d8c02b05 	stb	r3,172(sp)
   1130c:	bc400007 	ldb	r17,0(r23)
   11310:	003d0506 	br	10728 <__alt_data_end+0xfc010728>
   11314:	8025883a 	mov	r18,r16
   11318:	dc002903 	ldbu	r16,164(sp)
   1131c:	e011883a 	mov	r8,fp
   11320:	84003fcc 	andi	r16,r16,255
   11324:	803e0626 	beq	r16,zero,10b40 <__alt_data_end+0xfc010b40>
   11328:	d8c02b03 	ldbu	r3,172(sp)
   1132c:	d8c02785 	stb	r3,158(sp)
   11330:	003e0306 	br	10b40 <__alt_data_end+0xfc010b40>
   11334:	bc400007 	ldb	r17,0(r23)
   11338:	00801b04 	movi	r2,108
   1133c:	88830a26 	beq	r17,r2,11f68 <___svfprintf_internal_r+0x1994>
   11340:	84000414 	ori	r16,r16,16
   11344:	003cf806 	br	10728 <__alt_data_end+0xfc010728>
   11348:	8025883a 	mov	r18,r16
   1134c:	dc002903 	ldbu	r16,164(sp)
   11350:	e011883a 	mov	r8,fp
   11354:	84003fcc 	andi	r16,r16,255
   11358:	8005471e 	bne	r16,zero,12878 <___svfprintf_internal_r+0x22a4>
   1135c:	9080080c 	andi	r2,r18,32
   11360:	10028c26 	beq	r2,zero,11d94 <___svfprintf_internal_r+0x17c0>
   11364:	d9002e17 	ldw	r4,184(sp)
   11368:	d9402f17 	ldw	r5,188(sp)
   1136c:	20800017 	ldw	r2,0(r4)
   11370:	2807d7fa 	srai	r3,r5,31
   11374:	21000104 	addi	r4,r4,4
   11378:	d9002e15 	stw	r4,184(sp)
   1137c:	11400015 	stw	r5,0(r2)
   11380:	10c00115 	stw	r3,4(r2)
   11384:	003cbe06 	br	10680 <__alt_data_end+0xfc010680>
   11388:	84001014 	ori	r16,r16,64
   1138c:	bc400007 	ldb	r17,0(r23)
   11390:	003ce506 	br	10728 <__alt_data_end+0xfc010728>
   11394:	010000f4 	movhi	r4,3
   11398:	212dfd04 	addi	r4,r4,-18444
   1139c:	0039883a 	mov	fp,zero
   113a0:	d9003a15 	stw	r4,232(sp)
   113a4:	04401e04 	movi	r17,120
   113a8:	003f6906 	br	11150 <__alt_data_end+0xfc011150>
   113ac:	8025883a 	mov	r18,r16
   113b0:	dc002903 	ldbu	r16,164(sp)
   113b4:	e011883a 	mov	r8,fp
   113b8:	84003fcc 	andi	r16,r16,255
   113bc:	8005261e 	bne	r16,zero,12858 <___svfprintf_internal_r+0x2284>
   113c0:	883d6526 	beq	r17,zero,10958 <__alt_data_end+0xfc010958>
   113c4:	00c00044 	movi	r3,1
   113c8:	d8c02915 	stw	r3,164(sp)
   113cc:	dc401405 	stb	r17,80(sp)
   113d0:	d8002785 	stb	zero,158(sp)
   113d4:	003f7a06 	br	111c0 <__alt_data_end+0xfc0111c0>
   113d8:	010000f4 	movhi	r4,3
   113dc:	212dfd04 	addi	r4,r4,-18444
   113e0:	d9003a15 	stw	r4,232(sp)
   113e4:	d8c02e15 	stw	r3,184(sp)
   113e8:	1025883a 	mov	r18,r2
   113ec:	04401e04 	movi	r17,120
   113f0:	a584b03a 	or	r2,r20,r22
   113f4:	1000fa1e 	bne	r2,zero,117e0 <___svfprintf_internal_r+0x120c>
   113f8:	0039883a 	mov	fp,zero
   113fc:	00800084 	movi	r2,2
   11400:	10803fcc 	andi	r2,r2,255
   11404:	00c00044 	movi	r3,1
   11408:	10c21626 	beq	r2,r3,11c64 <___svfprintf_internal_r+0x1690>
   1140c:	00c00084 	movi	r3,2
   11410:	10fe0e1e 	bne	r2,r3,10c4c <__alt_data_end+0xfc010c4c>
   11414:	003d4606 	br	10930 <__alt_data_end+0xfc010930>
   11418:	d8c02017 	ldw	r3,128(sp)
   1141c:	003e7306 	br	10dec <__alt_data_end+0xfc010dec>
   11420:	00801944 	movi	r2,101
   11424:	14407c0e 	bge	r2,r17,11618 <___svfprintf_internal_r+0x1044>
   11428:	d9003617 	ldw	r4,216(sp)
   1142c:	d9403717 	ldw	r5,220(sp)
   11430:	000d883a 	mov	r6,zero
   11434:	000f883a 	mov	r7,zero
   11438:	d8c03d15 	stw	r3,244(sp)
   1143c:	da003e15 	stw	r8,248(sp)
   11440:	001e9280 	call	1e928 <__eqdf2>
   11444:	d8c03d17 	ldw	r3,244(sp)
   11448:	da003e17 	ldw	r8,248(sp)
   1144c:	1000f51e 	bne	r2,zero,11824 <___svfprintf_internal_r+0x1250>
   11450:	d8801f17 	ldw	r2,124(sp)
   11454:	010000f4 	movhi	r4,3
   11458:	212e0404 	addi	r4,r4,-18416
   1145c:	18c00044 	addi	r3,r3,1
   11460:	10800044 	addi	r2,r2,1
   11464:	41000015 	stw	r4,0(r8)
   11468:	01000044 	movi	r4,1
   1146c:	41000115 	stw	r4,4(r8)
   11470:	d8c02015 	stw	r3,128(sp)
   11474:	d8801f15 	stw	r2,124(sp)
   11478:	010001c4 	movi	r4,7
   1147c:	20826616 	blt	r4,r2,11e18 <___svfprintf_internal_r+0x1844>
   11480:	42000204 	addi	r8,r8,8
   11484:	d8802617 	ldw	r2,152(sp)
   11488:	d9403317 	ldw	r5,204(sp)
   1148c:	11400216 	blt	r2,r5,11498 <___svfprintf_internal_r+0xec4>
   11490:	9080004c 	andi	r2,r18,1
   11494:	103eb326 	beq	r2,zero,10f64 <__alt_data_end+0xfc010f64>
   11498:	d8803817 	ldw	r2,224(sp)
   1149c:	d9003417 	ldw	r4,208(sp)
   114a0:	d9403817 	ldw	r5,224(sp)
   114a4:	1887883a 	add	r3,r3,r2
   114a8:	d8801f17 	ldw	r2,124(sp)
   114ac:	41000015 	stw	r4,0(r8)
   114b0:	41400115 	stw	r5,4(r8)
   114b4:	10800044 	addi	r2,r2,1
   114b8:	d8c02015 	stw	r3,128(sp)
   114bc:	d8801f15 	stw	r2,124(sp)
   114c0:	010001c4 	movi	r4,7
   114c4:	2082af16 	blt	r4,r2,11f84 <___svfprintf_internal_r+0x19b0>
   114c8:	42000204 	addi	r8,r8,8
   114cc:	d8803317 	ldw	r2,204(sp)
   114d0:	143fffc4 	addi	r16,r2,-1
   114d4:	043ea30e 	bge	zero,r16,10f64 <__alt_data_end+0xfc010f64>
   114d8:	04400404 	movi	r17,16
   114dc:	d8801f17 	ldw	r2,124(sp)
   114e0:	8c00860e 	bge	r17,r16,116fc <___svfprintf_internal_r+0x1128>
   114e4:	014000f4 	movhi	r5,3
   114e8:	296e0484 	addi	r5,r5,-18414
   114ec:	d9402c15 	stw	r5,176(sp)
   114f0:	058001c4 	movi	r22,7
   114f4:	dd002d17 	ldw	r20,180(sp)
   114f8:	00000306 	br	11508 <___svfprintf_internal_r+0xf34>
   114fc:	42000204 	addi	r8,r8,8
   11500:	843ffc04 	addi	r16,r16,-16
   11504:	8c00800e 	bge	r17,r16,11708 <___svfprintf_internal_r+0x1134>
   11508:	18c00404 	addi	r3,r3,16
   1150c:	10800044 	addi	r2,r2,1
   11510:	45400015 	stw	r21,0(r8)
   11514:	44400115 	stw	r17,4(r8)
   11518:	d8c02015 	stw	r3,128(sp)
   1151c:	d8801f15 	stw	r2,124(sp)
   11520:	b0bff60e 	bge	r22,r2,114fc <__alt_data_end+0xfc0114fc>
   11524:	d9801e04 	addi	r6,sp,120
   11528:	a00b883a 	mov	r5,r20
   1152c:	9809883a 	mov	r4,r19
   11530:	00195380 	call	19538 <__ssprint_r>
   11534:	103d0e1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11538:	d8c02017 	ldw	r3,128(sp)
   1153c:	d8801f17 	ldw	r2,124(sp)
   11540:	da000404 	addi	r8,sp,16
   11544:	003fee06 	br	11500 <__alt_data_end+0xfc011500>
   11548:	d9403117 	ldw	r5,196(sp)
   1154c:	d8802917 	ldw	r2,164(sp)
   11550:	28adc83a 	sub	r22,r5,r2
   11554:	05be430e 	bge	zero,r22,10e64 <__alt_data_end+0xfc010e64>
   11558:	07000404 	movi	fp,16
   1155c:	d8801f17 	ldw	r2,124(sp)
   11560:	e583a20e 	bge	fp,r22,123ec <___svfprintf_internal_r+0x1e18>
   11564:	014000f4 	movhi	r5,3
   11568:	296e0484 	addi	r5,r5,-18414
   1156c:	dc403015 	stw	r17,192(sp)
   11570:	d9402c15 	stw	r5,176(sp)
   11574:	b023883a 	mov	r17,r22
   11578:	050001c4 	movi	r20,7
   1157c:	902d883a 	mov	r22,r18
   11580:	8025883a 	mov	r18,r16
   11584:	dc002d17 	ldw	r16,180(sp)
   11588:	00000306 	br	11598 <___svfprintf_internal_r+0xfc4>
   1158c:	8c7ffc04 	addi	r17,r17,-16
   11590:	42000204 	addi	r8,r8,8
   11594:	e440110e 	bge	fp,r17,115dc <___svfprintf_internal_r+0x1008>
   11598:	18c00404 	addi	r3,r3,16
   1159c:	10800044 	addi	r2,r2,1
   115a0:	45400015 	stw	r21,0(r8)
   115a4:	47000115 	stw	fp,4(r8)
   115a8:	d8c02015 	stw	r3,128(sp)
   115ac:	d8801f15 	stw	r2,124(sp)
   115b0:	a0bff60e 	bge	r20,r2,1158c <__alt_data_end+0xfc01158c>
   115b4:	d9801e04 	addi	r6,sp,120
   115b8:	800b883a 	mov	r5,r16
   115bc:	9809883a 	mov	r4,r19
   115c0:	00195380 	call	19538 <__ssprint_r>
   115c4:	103cea1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   115c8:	8c7ffc04 	addi	r17,r17,-16
   115cc:	d8c02017 	ldw	r3,128(sp)
   115d0:	d8801f17 	ldw	r2,124(sp)
   115d4:	da000404 	addi	r8,sp,16
   115d8:	e47fef16 	blt	fp,r17,11598 <__alt_data_end+0xfc011598>
   115dc:	9021883a 	mov	r16,r18
   115e0:	b025883a 	mov	r18,r22
   115e4:	882d883a 	mov	r22,r17
   115e8:	dc403017 	ldw	r17,192(sp)
   115ec:	d9002c17 	ldw	r4,176(sp)
   115f0:	1d87883a 	add	r3,r3,r22
   115f4:	10800044 	addi	r2,r2,1
   115f8:	41000015 	stw	r4,0(r8)
   115fc:	45800115 	stw	r22,4(r8)
   11600:	d8c02015 	stw	r3,128(sp)
   11604:	d8801f15 	stw	r2,124(sp)
   11608:	010001c4 	movi	r4,7
   1160c:	20819a16 	blt	r4,r2,11c78 <___svfprintf_internal_r+0x16a4>
   11610:	42000204 	addi	r8,r8,8
   11614:	003e1306 	br	10e64 <__alt_data_end+0xfc010e64>
   11618:	d9403317 	ldw	r5,204(sp)
   1161c:	00800044 	movi	r2,1
   11620:	18c00044 	addi	r3,r3,1
   11624:	1141710e 	bge	r2,r5,11bec <___svfprintf_internal_r+0x1618>
   11628:	dc401f17 	ldw	r17,124(sp)
   1162c:	00800044 	movi	r2,1
   11630:	40800115 	stw	r2,4(r8)
   11634:	8c400044 	addi	r17,r17,1
   11638:	44000015 	stw	r16,0(r8)
   1163c:	d8c02015 	stw	r3,128(sp)
   11640:	dc401f15 	stw	r17,124(sp)
   11644:	008001c4 	movi	r2,7
   11648:	14417416 	blt	r2,r17,11c1c <___svfprintf_internal_r+0x1648>
   1164c:	42000204 	addi	r8,r8,8
   11650:	d8803817 	ldw	r2,224(sp)
   11654:	d9003417 	ldw	r4,208(sp)
   11658:	8c400044 	addi	r17,r17,1
   1165c:	10c7883a 	add	r3,r2,r3
   11660:	40800115 	stw	r2,4(r8)
   11664:	41000015 	stw	r4,0(r8)
   11668:	d8c02015 	stw	r3,128(sp)
   1166c:	dc401f15 	stw	r17,124(sp)
   11670:	008001c4 	movi	r2,7
   11674:	14417216 	blt	r2,r17,11c40 <___svfprintf_internal_r+0x166c>
   11678:	45800204 	addi	r22,r8,8
   1167c:	d9003617 	ldw	r4,216(sp)
   11680:	d9403717 	ldw	r5,220(sp)
   11684:	000d883a 	mov	r6,zero
   11688:	000f883a 	mov	r7,zero
   1168c:	d8c03d15 	stw	r3,244(sp)
   11690:	001e9280 	call	1e928 <__eqdf2>
   11694:	d8c03d17 	ldw	r3,244(sp)
   11698:	1000b326 	beq	r2,zero,11968 <___svfprintf_internal_r+0x1394>
   1169c:	d9403317 	ldw	r5,204(sp)
   116a0:	84000044 	addi	r16,r16,1
   116a4:	8c400044 	addi	r17,r17,1
   116a8:	28bfffc4 	addi	r2,r5,-1
   116ac:	1887883a 	add	r3,r3,r2
   116b0:	b0800115 	stw	r2,4(r22)
   116b4:	b4000015 	stw	r16,0(r22)
   116b8:	d8c02015 	stw	r3,128(sp)
   116bc:	dc401f15 	stw	r17,124(sp)
   116c0:	008001c4 	movi	r2,7
   116c4:	1440d216 	blt	r2,r17,11a10 <___svfprintf_internal_r+0x143c>
   116c8:	b5800204 	addi	r22,r22,8
   116cc:	d9003b17 	ldw	r4,236(sp)
   116d0:	df0022c4 	addi	fp,sp,139
   116d4:	8c400044 	addi	r17,r17,1
   116d8:	20c7883a 	add	r3,r4,r3
   116dc:	b7000015 	stw	fp,0(r22)
   116e0:	b1000115 	stw	r4,4(r22)
   116e4:	d8c02015 	stw	r3,128(sp)
   116e8:	dc401f15 	stw	r17,124(sp)
   116ec:	008001c4 	movi	r2,7
   116f0:	14400e16 	blt	r2,r17,1172c <___svfprintf_internal_r+0x1158>
   116f4:	b2000204 	addi	r8,r22,8
   116f8:	003e1a06 	br	10f64 <__alt_data_end+0xfc010f64>
   116fc:	010000f4 	movhi	r4,3
   11700:	212e0484 	addi	r4,r4,-18414
   11704:	d9002c15 	stw	r4,176(sp)
   11708:	d9002c17 	ldw	r4,176(sp)
   1170c:	1c07883a 	add	r3,r3,r16
   11710:	44000115 	stw	r16,4(r8)
   11714:	41000015 	stw	r4,0(r8)
   11718:	10800044 	addi	r2,r2,1
   1171c:	d8c02015 	stw	r3,128(sp)
   11720:	d8801f15 	stw	r2,124(sp)
   11724:	010001c4 	movi	r4,7
   11728:	20be0d0e 	bge	r4,r2,10f60 <__alt_data_end+0xfc010f60>
   1172c:	d9402d17 	ldw	r5,180(sp)
   11730:	d9801e04 	addi	r6,sp,120
   11734:	9809883a 	mov	r4,r19
   11738:	00195380 	call	19538 <__ssprint_r>
   1173c:	103c8c1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11740:	d8c02017 	ldw	r3,128(sp)
   11744:	da000404 	addi	r8,sp,16
   11748:	003e0606 	br	10f64 <__alt_data_end+0xfc010f64>
   1174c:	d9402d17 	ldw	r5,180(sp)
   11750:	d9801e04 	addi	r6,sp,120
   11754:	9809883a 	mov	r4,r19
   11758:	00195380 	call	19538 <__ssprint_r>
   1175c:	103e3d26 	beq	r2,zero,11054 <__alt_data_end+0xfc011054>
   11760:	003c8306 	br	10970 <__alt_data_end+0xfc010970>
   11764:	d9402d17 	ldw	r5,180(sp)
   11768:	d9801e04 	addi	r6,sp,120
   1176c:	9809883a 	mov	r4,r19
   11770:	00195380 	call	19538 <__ssprint_r>
   11774:	103c7e1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11778:	d8c02017 	ldw	r3,128(sp)
   1177c:	da000404 	addi	r8,sp,16
   11780:	003deb06 	br	10f30 <__alt_data_end+0xfc010f30>
   11784:	d9402d17 	ldw	r5,180(sp)
   11788:	d9801e04 	addi	r6,sp,120
   1178c:	9809883a 	mov	r4,r19
   11790:	00195380 	call	19538 <__ssprint_r>
   11794:	103c761e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11798:	d8c02017 	ldw	r3,128(sp)
   1179c:	da000404 	addi	r8,sp,16
   117a0:	003d9f06 	br	10e20 <__alt_data_end+0xfc010e20>
   117a4:	d9402d17 	ldw	r5,180(sp)
   117a8:	d9801e04 	addi	r6,sp,120
   117ac:	9809883a 	mov	r4,r19
   117b0:	00195380 	call	19538 <__ssprint_r>
   117b4:	103c6e1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   117b8:	d8c02017 	ldw	r3,128(sp)
   117bc:	da000404 	addi	r8,sp,16
   117c0:	003da506 	br	10e58 <__alt_data_end+0xfc010e58>
   117c4:	d9402a17 	ldw	r5,168(sp)
   117c8:	d8002785 	stb	zero,158(sp)
   117cc:	283f0816 	blt	r5,zero,113f0 <__alt_data_end+0xfc0113f0>
   117d0:	00ffdfc4 	movi	r3,-129
   117d4:	a584b03a 	or	r2,r20,r22
   117d8:	90e4703a 	and	r18,r18,r3
   117dc:	103c5126 	beq	r2,zero,10924 <__alt_data_end+0xfc010924>
   117e0:	0039883a 	mov	fp,zero
   117e4:	003e5a06 	br	11150 <__alt_data_end+0xfc011150>
   117e8:	9080040c 	andi	r2,r18,16
   117ec:	10013d26 	beq	r2,zero,11ce4 <___svfprintf_internal_r+0x1710>
   117f0:	d8c02e17 	ldw	r3,184(sp)
   117f4:	d9002a17 	ldw	r4,168(sp)
   117f8:	d8002785 	stb	zero,158(sp)
   117fc:	18800104 	addi	r2,r3,4
   11800:	1d000017 	ldw	r20,0(r3)
   11804:	002d883a 	mov	r22,zero
   11808:	20013f16 	blt	r4,zero,11d08 <___svfprintf_internal_r+0x1734>
   1180c:	00ffdfc4 	movi	r3,-129
   11810:	d8802e15 	stw	r2,184(sp)
   11814:	90e4703a 	and	r18,r18,r3
   11818:	a03d0926 	beq	r20,zero,10c40 <__alt_data_end+0xfc010c40>
   1181c:	0039883a 	mov	fp,zero
   11820:	003d0c06 	br	10c54 <__alt_data_end+0xfc010c54>
   11824:	dc402617 	ldw	r17,152(sp)
   11828:	0441830e 	bge	zero,r17,11e38 <___svfprintf_internal_r+0x1864>
   1182c:	dc403217 	ldw	r17,200(sp)
   11830:	d8803317 	ldw	r2,204(sp)
   11834:	1440010e 	bge	r2,r17,1183c <___svfprintf_internal_r+0x1268>
   11838:	1023883a 	mov	r17,r2
   1183c:	04400a0e 	bge	zero,r17,11868 <___svfprintf_internal_r+0x1294>
   11840:	d8801f17 	ldw	r2,124(sp)
   11844:	1c47883a 	add	r3,r3,r17
   11848:	44000015 	stw	r16,0(r8)
   1184c:	10800044 	addi	r2,r2,1
   11850:	44400115 	stw	r17,4(r8)
   11854:	d8c02015 	stw	r3,128(sp)
   11858:	d8801f15 	stw	r2,124(sp)
   1185c:	010001c4 	movi	r4,7
   11860:	20827516 	blt	r4,r2,12238 <___svfprintf_internal_r+0x1c64>
   11864:	42000204 	addi	r8,r8,8
   11868:	88027b16 	blt	r17,zero,12258 <___svfprintf_internal_r+0x1c84>
   1186c:	d9003217 	ldw	r4,200(sp)
   11870:	2463c83a 	sub	r17,r4,r17
   11874:	0440990e 	bge	zero,r17,11adc <___svfprintf_internal_r+0x1508>
   11878:	05800404 	movi	r22,16
   1187c:	d8801f17 	ldw	r2,124(sp)
   11880:	b441530e 	bge	r22,r17,11dd0 <___svfprintf_internal_r+0x17fc>
   11884:	010000f4 	movhi	r4,3
   11888:	212e0484 	addi	r4,r4,-18414
   1188c:	d9002c15 	stw	r4,176(sp)
   11890:	070001c4 	movi	fp,7
   11894:	dd002d17 	ldw	r20,180(sp)
   11898:	00000306 	br	118a8 <___svfprintf_internal_r+0x12d4>
   1189c:	42000204 	addi	r8,r8,8
   118a0:	8c7ffc04 	addi	r17,r17,-16
   118a4:	b4414d0e 	bge	r22,r17,11ddc <___svfprintf_internal_r+0x1808>
   118a8:	18c00404 	addi	r3,r3,16
   118ac:	10800044 	addi	r2,r2,1
   118b0:	45400015 	stw	r21,0(r8)
   118b4:	45800115 	stw	r22,4(r8)
   118b8:	d8c02015 	stw	r3,128(sp)
   118bc:	d8801f15 	stw	r2,124(sp)
   118c0:	e0bff60e 	bge	fp,r2,1189c <__alt_data_end+0xfc01189c>
   118c4:	d9801e04 	addi	r6,sp,120
   118c8:	a00b883a 	mov	r5,r20
   118cc:	9809883a 	mov	r4,r19
   118d0:	00195380 	call	19538 <__ssprint_r>
   118d4:	103c261e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   118d8:	d8c02017 	ldw	r3,128(sp)
   118dc:	d8801f17 	ldw	r2,124(sp)
   118e0:	da000404 	addi	r8,sp,16
   118e4:	003fee06 	br	118a0 <__alt_data_end+0xfc0118a0>
   118e8:	d9402d17 	ldw	r5,180(sp)
   118ec:	d9801e04 	addi	r6,sp,120
   118f0:	9809883a 	mov	r4,r19
   118f4:	00195380 	call	19538 <__ssprint_r>
   118f8:	103c1d1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   118fc:	d8c02017 	ldw	r3,128(sp)
   11900:	df002787 	ldb	fp,158(sp)
   11904:	da000404 	addi	r8,sp,16
   11908:	003d3806 	br	10dec <__alt_data_end+0xfc010dec>
   1190c:	9080040c 	andi	r2,r18,16
   11910:	10005c26 	beq	r2,zero,11a84 <___svfprintf_internal_r+0x14b0>
   11914:	d8c02e17 	ldw	r3,184(sp)
   11918:	d9002a17 	ldw	r4,168(sp)
   1191c:	d8002785 	stb	zero,158(sp)
   11920:	18800104 	addi	r2,r3,4
   11924:	1d000017 	ldw	r20,0(r3)
   11928:	002d883a 	mov	r22,zero
   1192c:	20005e16 	blt	r4,zero,11aa8 <___svfprintf_internal_r+0x14d4>
   11930:	00ffdfc4 	movi	r3,-129
   11934:	d8802e15 	stw	r2,184(sp)
   11938:	90e4703a 	and	r18,r18,r3
   1193c:	0039883a 	mov	fp,zero
   11940:	a03ddf26 	beq	r20,zero,110c0 <__alt_data_end+0xfc0110c0>
   11944:	00800244 	movi	r2,9
   11948:	153c8e36 	bltu	r2,r20,10b84 <__alt_data_end+0xfc010b84>
   1194c:	a5000c04 	addi	r20,r20,48
   11950:	dc001dc4 	addi	r16,sp,119
   11954:	dd001dc5 	stb	r20,119(sp)
   11958:	d8c02817 	ldw	r3,160(sp)
   1195c:	1c07c83a 	sub	r3,r3,r16
   11960:	d8c02b15 	stw	r3,172(sp)
   11964:	003cd306 	br	10cb4 <__alt_data_end+0xfc010cb4>
   11968:	d8803317 	ldw	r2,204(sp)
   1196c:	143fffc4 	addi	r16,r2,-1
   11970:	043f560e 	bge	zero,r16,116cc <__alt_data_end+0xfc0116cc>
   11974:	07000404 	movi	fp,16
   11978:	e403530e 	bge	fp,r16,126c8 <___svfprintf_internal_r+0x20f4>
   1197c:	014000f4 	movhi	r5,3
   11980:	296e0484 	addi	r5,r5,-18414
   11984:	d9402c15 	stw	r5,176(sp)
   11988:	01c001c4 	movi	r7,7
   1198c:	dd002d17 	ldw	r20,180(sp)
   11990:	00000306 	br	119a0 <___svfprintf_internal_r+0x13cc>
   11994:	843ffc04 	addi	r16,r16,-16
   11998:	b5800204 	addi	r22,r22,8
   1199c:	e400130e 	bge	fp,r16,119ec <___svfprintf_internal_r+0x1418>
   119a0:	18c00404 	addi	r3,r3,16
   119a4:	8c400044 	addi	r17,r17,1
   119a8:	b5400015 	stw	r21,0(r22)
   119ac:	b7000115 	stw	fp,4(r22)
   119b0:	d8c02015 	stw	r3,128(sp)
   119b4:	dc401f15 	stw	r17,124(sp)
   119b8:	3c7ff60e 	bge	r7,r17,11994 <__alt_data_end+0xfc011994>
   119bc:	d9801e04 	addi	r6,sp,120
   119c0:	a00b883a 	mov	r5,r20
   119c4:	9809883a 	mov	r4,r19
   119c8:	d9c03d15 	stw	r7,244(sp)
   119cc:	00195380 	call	19538 <__ssprint_r>
   119d0:	d9c03d17 	ldw	r7,244(sp)
   119d4:	103be61e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   119d8:	843ffc04 	addi	r16,r16,-16
   119dc:	d8c02017 	ldw	r3,128(sp)
   119e0:	dc401f17 	ldw	r17,124(sp)
   119e4:	dd800404 	addi	r22,sp,16
   119e8:	e43fed16 	blt	fp,r16,119a0 <__alt_data_end+0xfc0119a0>
   119ec:	d8802c17 	ldw	r2,176(sp)
   119f0:	1c07883a 	add	r3,r3,r16
   119f4:	8c400044 	addi	r17,r17,1
   119f8:	b0800015 	stw	r2,0(r22)
   119fc:	b4000115 	stw	r16,4(r22)
   11a00:	d8c02015 	stw	r3,128(sp)
   11a04:	dc401f15 	stw	r17,124(sp)
   11a08:	008001c4 	movi	r2,7
   11a0c:	147f2e0e 	bge	r2,r17,116c8 <__alt_data_end+0xfc0116c8>
   11a10:	d9402d17 	ldw	r5,180(sp)
   11a14:	d9801e04 	addi	r6,sp,120
   11a18:	9809883a 	mov	r4,r19
   11a1c:	00195380 	call	19538 <__ssprint_r>
   11a20:	103bd31e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11a24:	d8c02017 	ldw	r3,128(sp)
   11a28:	dc401f17 	ldw	r17,124(sp)
   11a2c:	dd800404 	addi	r22,sp,16
   11a30:	003f2606 	br	116cc <__alt_data_end+0xfc0116cc>
   11a34:	9080040c 	andi	r2,r18,16
   11a38:	1000c326 	beq	r2,zero,11d48 <___svfprintf_internal_r+0x1774>
   11a3c:	d9402e17 	ldw	r5,184(sp)
   11a40:	2d000017 	ldw	r20,0(r5)
   11a44:	29400104 	addi	r5,r5,4
   11a48:	d9402e15 	stw	r5,184(sp)
   11a4c:	a02dd7fa 	srai	r22,r20,31
   11a50:	b005883a 	mov	r2,r22
   11a54:	103c430e 	bge	r2,zero,10b64 <__alt_data_end+0xfc010b64>
   11a58:	d9402a17 	ldw	r5,168(sp)
   11a5c:	0529c83a 	sub	r20,zero,r20
   11a60:	07000b44 	movi	fp,45
   11a64:	a004c03a 	cmpne	r2,r20,zero
   11a68:	05adc83a 	sub	r22,zero,r22
   11a6c:	df002785 	stb	fp,158(sp)
   11a70:	b0adc83a 	sub	r22,r22,r2
   11a74:	28022e16 	blt	r5,zero,12330 <___svfprintf_internal_r+0x1d5c>
   11a78:	00bfdfc4 	movi	r2,-129
   11a7c:	90a4703a 	and	r18,r18,r2
   11a80:	003c3f06 	br	10b80 <__alt_data_end+0xfc010b80>
   11a84:	9080100c 	andi	r2,r18,64
   11a88:	d8002785 	stb	zero,158(sp)
   11a8c:	10012526 	beq	r2,zero,11f24 <___svfprintf_internal_r+0x1950>
   11a90:	d9402e17 	ldw	r5,184(sp)
   11a94:	d8c02a17 	ldw	r3,168(sp)
   11a98:	002d883a 	mov	r22,zero
   11a9c:	28800104 	addi	r2,r5,4
   11aa0:	2d00000b 	ldhu	r20,0(r5)
   11aa4:	183fa20e 	bge	r3,zero,11930 <__alt_data_end+0xfc011930>
   11aa8:	d8802e15 	stw	r2,184(sp)
   11aac:	0039883a 	mov	fp,zero
   11ab0:	a584b03a 	or	r2,r20,r22
   11ab4:	103c321e 	bne	r2,zero,10b80 <__alt_data_end+0xfc010b80>
   11ab8:	00800044 	movi	r2,1
   11abc:	003e5006 	br	11400 <__alt_data_end+0xfc011400>
   11ac0:	d9402d17 	ldw	r5,180(sp)
   11ac4:	d9801e04 	addi	r6,sp,120
   11ac8:	9809883a 	mov	r4,r19
   11acc:	00195380 	call	19538 <__ssprint_r>
   11ad0:	103ba71e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11ad4:	d8c02017 	ldw	r3,128(sp)
   11ad8:	da000404 	addi	r8,sp,16
   11adc:	d9003217 	ldw	r4,200(sp)
   11ae0:	d8802617 	ldw	r2,152(sp)
   11ae4:	d9403317 	ldw	r5,204(sp)
   11ae8:	8123883a 	add	r17,r16,r4
   11aec:	11400216 	blt	r2,r5,11af8 <___svfprintf_internal_r+0x1524>
   11af0:	9100004c 	andi	r4,r18,1
   11af4:	20000d26 	beq	r4,zero,11b2c <___svfprintf_internal_r+0x1558>
   11af8:	d9003817 	ldw	r4,224(sp)
   11afc:	d9403417 	ldw	r5,208(sp)
   11b00:	1907883a 	add	r3,r3,r4
   11b04:	d9001f17 	ldw	r4,124(sp)
   11b08:	41400015 	stw	r5,0(r8)
   11b0c:	d9403817 	ldw	r5,224(sp)
   11b10:	21000044 	addi	r4,r4,1
   11b14:	d8c02015 	stw	r3,128(sp)
   11b18:	41400115 	stw	r5,4(r8)
   11b1c:	d9001f15 	stw	r4,124(sp)
   11b20:	014001c4 	movi	r5,7
   11b24:	2901dc16 	blt	r5,r4,12298 <___svfprintf_internal_r+0x1cc4>
   11b28:	42000204 	addi	r8,r8,8
   11b2c:	d9003317 	ldw	r4,204(sp)
   11b30:	8121883a 	add	r16,r16,r4
   11b34:	2085c83a 	sub	r2,r4,r2
   11b38:	8461c83a 	sub	r16,r16,r17
   11b3c:	1400010e 	bge	r2,r16,11b44 <___svfprintf_internal_r+0x1570>
   11b40:	1021883a 	mov	r16,r2
   11b44:	04000a0e 	bge	zero,r16,11b70 <___svfprintf_internal_r+0x159c>
   11b48:	d9001f17 	ldw	r4,124(sp)
   11b4c:	1c07883a 	add	r3,r3,r16
   11b50:	44400015 	stw	r17,0(r8)
   11b54:	21000044 	addi	r4,r4,1
   11b58:	44000115 	stw	r16,4(r8)
   11b5c:	d8c02015 	stw	r3,128(sp)
   11b60:	d9001f15 	stw	r4,124(sp)
   11b64:	014001c4 	movi	r5,7
   11b68:	2901e616 	blt	r5,r4,12304 <___svfprintf_internal_r+0x1d30>
   11b6c:	42000204 	addi	r8,r8,8
   11b70:	8001f616 	blt	r16,zero,1234c <___svfprintf_internal_r+0x1d78>
   11b74:	1421c83a 	sub	r16,r2,r16
   11b78:	043cfa0e 	bge	zero,r16,10f64 <__alt_data_end+0xfc010f64>
   11b7c:	04400404 	movi	r17,16
   11b80:	d8801f17 	ldw	r2,124(sp)
   11b84:	8c3edd0e 	bge	r17,r16,116fc <__alt_data_end+0xfc0116fc>
   11b88:	014000f4 	movhi	r5,3
   11b8c:	296e0484 	addi	r5,r5,-18414
   11b90:	d9402c15 	stw	r5,176(sp)
   11b94:	058001c4 	movi	r22,7
   11b98:	dd002d17 	ldw	r20,180(sp)
   11b9c:	00000306 	br	11bac <___svfprintf_internal_r+0x15d8>
   11ba0:	42000204 	addi	r8,r8,8
   11ba4:	843ffc04 	addi	r16,r16,-16
   11ba8:	8c3ed70e 	bge	r17,r16,11708 <__alt_data_end+0xfc011708>
   11bac:	18c00404 	addi	r3,r3,16
   11bb0:	10800044 	addi	r2,r2,1
   11bb4:	45400015 	stw	r21,0(r8)
   11bb8:	44400115 	stw	r17,4(r8)
   11bbc:	d8c02015 	stw	r3,128(sp)
   11bc0:	d8801f15 	stw	r2,124(sp)
   11bc4:	b0bff60e 	bge	r22,r2,11ba0 <__alt_data_end+0xfc011ba0>
   11bc8:	d9801e04 	addi	r6,sp,120
   11bcc:	a00b883a 	mov	r5,r20
   11bd0:	9809883a 	mov	r4,r19
   11bd4:	00195380 	call	19538 <__ssprint_r>
   11bd8:	103b651e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11bdc:	d8c02017 	ldw	r3,128(sp)
   11be0:	d8801f17 	ldw	r2,124(sp)
   11be4:	da000404 	addi	r8,sp,16
   11be8:	003fee06 	br	11ba4 <__alt_data_end+0xfc011ba4>
   11bec:	9088703a 	and	r4,r18,r2
   11bf0:	203e8d1e 	bne	r4,zero,11628 <__alt_data_end+0xfc011628>
   11bf4:	dc401f17 	ldw	r17,124(sp)
   11bf8:	40800115 	stw	r2,4(r8)
   11bfc:	44000015 	stw	r16,0(r8)
   11c00:	8c400044 	addi	r17,r17,1
   11c04:	d8c02015 	stw	r3,128(sp)
   11c08:	dc401f15 	stw	r17,124(sp)
   11c0c:	008001c4 	movi	r2,7
   11c10:	147f7f16 	blt	r2,r17,11a10 <__alt_data_end+0xfc011a10>
   11c14:	45800204 	addi	r22,r8,8
   11c18:	003eac06 	br	116cc <__alt_data_end+0xfc0116cc>
   11c1c:	d9402d17 	ldw	r5,180(sp)
   11c20:	d9801e04 	addi	r6,sp,120
   11c24:	9809883a 	mov	r4,r19
   11c28:	00195380 	call	19538 <__ssprint_r>
   11c2c:	103b501e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11c30:	d8c02017 	ldw	r3,128(sp)
   11c34:	dc401f17 	ldw	r17,124(sp)
   11c38:	da000404 	addi	r8,sp,16
   11c3c:	003e8406 	br	11650 <__alt_data_end+0xfc011650>
   11c40:	d9402d17 	ldw	r5,180(sp)
   11c44:	d9801e04 	addi	r6,sp,120
   11c48:	9809883a 	mov	r4,r19
   11c4c:	00195380 	call	19538 <__ssprint_r>
   11c50:	103b471e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11c54:	d8c02017 	ldw	r3,128(sp)
   11c58:	dc401f17 	ldw	r17,124(sp)
   11c5c:	dd800404 	addi	r22,sp,16
   11c60:	003e8606 	br	1167c <__alt_data_end+0xfc01167c>
   11c64:	0029883a 	mov	r20,zero
   11c68:	a5000c04 	addi	r20,r20,48
   11c6c:	dc001dc4 	addi	r16,sp,119
   11c70:	dd001dc5 	stb	r20,119(sp)
   11c74:	003f3806 	br	11958 <__alt_data_end+0xfc011958>
   11c78:	d9402d17 	ldw	r5,180(sp)
   11c7c:	d9801e04 	addi	r6,sp,120
   11c80:	9809883a 	mov	r4,r19
   11c84:	00195380 	call	19538 <__ssprint_r>
   11c88:	103b391e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11c8c:	d8c02017 	ldw	r3,128(sp)
   11c90:	da000404 	addi	r8,sp,16
   11c94:	003c7306 	br	10e64 <__alt_data_end+0xfc010e64>
   11c98:	d9003617 	ldw	r4,216(sp)
   11c9c:	d9403717 	ldw	r5,220(sp)
   11ca0:	da003e15 	stw	r8,248(sp)
   11ca4:	00193880 	call	19388 <__fpclassifyd>
   11ca8:	da003e17 	ldw	r8,248(sp)
   11cac:	1000bd1e 	bne	r2,zero,11fa4 <___svfprintf_internal_r+0x19d0>
   11cb0:	008011c4 	movi	r2,71
   11cb4:	14411e0e 	bge	r2,r17,12130 <___svfprintf_internal_r+0x1b5c>
   11cb8:	040000f4 	movhi	r16,3
   11cbc:	842df704 	addi	r16,r16,-18468
   11cc0:	00c000c4 	movi	r3,3
   11cc4:	00bfdfc4 	movi	r2,-129
   11cc8:	d8c02915 	stw	r3,164(sp)
   11ccc:	90a4703a 	and	r18,r18,r2
   11cd0:	df002783 	ldbu	fp,158(sp)
   11cd4:	d8c02b15 	stw	r3,172(sp)
   11cd8:	d8002a15 	stw	zero,168(sp)
   11cdc:	d8003215 	stw	zero,200(sp)
   11ce0:	003bfa06 	br	10ccc <__alt_data_end+0xfc010ccc>
   11ce4:	9080100c 	andi	r2,r18,64
   11ce8:	d8002785 	stb	zero,158(sp)
   11cec:	10009426 	beq	r2,zero,11f40 <___svfprintf_internal_r+0x196c>
   11cf0:	d9402e17 	ldw	r5,184(sp)
   11cf4:	d8c02a17 	ldw	r3,168(sp)
   11cf8:	002d883a 	mov	r22,zero
   11cfc:	28800104 	addi	r2,r5,4
   11d00:	2d00000b 	ldhu	r20,0(r5)
   11d04:	183ec10e 	bge	r3,zero,1180c <__alt_data_end+0xfc01180c>
   11d08:	a586b03a 	or	r3,r20,r22
   11d0c:	d8802e15 	stw	r2,184(sp)
   11d10:	183ec21e 	bne	r3,zero,1181c <__alt_data_end+0xfc01181c>
   11d14:	0039883a 	mov	fp,zero
   11d18:	0005883a 	mov	r2,zero
   11d1c:	003db806 	br	11400 <__alt_data_end+0xfc011400>
   11d20:	d8c02e17 	ldw	r3,184(sp)
   11d24:	d9002e17 	ldw	r4,184(sp)
   11d28:	d9402e17 	ldw	r5,184(sp)
   11d2c:	18c00017 	ldw	r3,0(r3)
   11d30:	21000117 	ldw	r4,4(r4)
   11d34:	29400204 	addi	r5,r5,8
   11d38:	d8c03615 	stw	r3,216(sp)
   11d3c:	d9003715 	stw	r4,220(sp)
   11d40:	d9402e15 	stw	r5,184(sp)
   11d44:	003b5a06 	br	10ab0 <__alt_data_end+0xfc010ab0>
   11d48:	9080100c 	andi	r2,r18,64
   11d4c:	10010726 	beq	r2,zero,1216c <___svfprintf_internal_r+0x1b98>
   11d50:	d8802e17 	ldw	r2,184(sp)
   11d54:	1500000f 	ldh	r20,0(r2)
   11d58:	10800104 	addi	r2,r2,4
   11d5c:	d8802e15 	stw	r2,184(sp)
   11d60:	a02dd7fa 	srai	r22,r20,31
   11d64:	b005883a 	mov	r2,r22
   11d68:	003b7d06 	br	10b60 <__alt_data_end+0xfc010b60>
   11d6c:	9080100c 	andi	r2,r18,64
   11d70:	10010526 	beq	r2,zero,12188 <___svfprintf_internal_r+0x1bb4>
   11d74:	d8c02e17 	ldw	r3,184(sp)
   11d78:	002d883a 	mov	r22,zero
   11d7c:	1d00000b 	ldhu	r20,0(r3)
   11d80:	18c00104 	addi	r3,r3,4
   11d84:	d8c02e15 	stw	r3,184(sp)
   11d88:	003ce206 	br	11114 <__alt_data_end+0xfc011114>
   11d8c:	bc400007 	ldb	r17,0(r23)
   11d90:	003a6506 	br	10728 <__alt_data_end+0xfc010728>
   11d94:	9080040c 	andi	r2,r18,16
   11d98:	10010126 	beq	r2,zero,121a0 <___svfprintf_internal_r+0x1bcc>
   11d9c:	d8c02e17 	ldw	r3,184(sp)
   11da0:	d9002f17 	ldw	r4,188(sp)
   11da4:	18800017 	ldw	r2,0(r3)
   11da8:	18c00104 	addi	r3,r3,4
   11dac:	d8c02e15 	stw	r3,184(sp)
   11db0:	11000015 	stw	r4,0(r2)
   11db4:	003a3206 	br	10680 <__alt_data_end+0xfc010680>
   11db8:	d9002a17 	ldw	r4,168(sp)
   11dbc:	d8002785 	stb	zero,158(sp)
   11dc0:	203d8d16 	blt	r4,zero,113f8 <__alt_data_end+0xfc0113f8>
   11dc4:	00bfdfc4 	movi	r2,-129
   11dc8:	90a4703a 	and	r18,r18,r2
   11dcc:	003ad506 	br	10924 <__alt_data_end+0xfc010924>
   11dd0:	014000f4 	movhi	r5,3
   11dd4:	296e0484 	addi	r5,r5,-18414
   11dd8:	d9402c15 	stw	r5,176(sp)
   11ddc:	d9402c17 	ldw	r5,176(sp)
   11de0:	1c47883a 	add	r3,r3,r17
   11de4:	10800044 	addi	r2,r2,1
   11de8:	41400015 	stw	r5,0(r8)
   11dec:	44400115 	stw	r17,4(r8)
   11df0:	d8c02015 	stw	r3,128(sp)
   11df4:	d8801f15 	stw	r2,124(sp)
   11df8:	010001c4 	movi	r4,7
   11dfc:	20bf3016 	blt	r4,r2,11ac0 <__alt_data_end+0xfc011ac0>
   11e00:	42000204 	addi	r8,r8,8
   11e04:	003f3506 	br	11adc <__alt_data_end+0xfc011adc>
   11e08:	010000f4 	movhi	r4,3
   11e0c:	212e0484 	addi	r4,r4,-18414
   11e10:	d9002c15 	stw	r4,176(sp)
   11e14:	003c3c06 	br	10f08 <__alt_data_end+0xfc010f08>
   11e18:	d9402d17 	ldw	r5,180(sp)
   11e1c:	d9801e04 	addi	r6,sp,120
   11e20:	9809883a 	mov	r4,r19
   11e24:	00195380 	call	19538 <__ssprint_r>
   11e28:	103ad11e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11e2c:	d8c02017 	ldw	r3,128(sp)
   11e30:	da000404 	addi	r8,sp,16
   11e34:	003d9306 	br	11484 <__alt_data_end+0xfc011484>
   11e38:	d8801f17 	ldw	r2,124(sp)
   11e3c:	014000f4 	movhi	r5,3
   11e40:	01000044 	movi	r4,1
   11e44:	18c00044 	addi	r3,r3,1
   11e48:	10800044 	addi	r2,r2,1
   11e4c:	296e0404 	addi	r5,r5,-18416
   11e50:	41000115 	stw	r4,4(r8)
   11e54:	41400015 	stw	r5,0(r8)
   11e58:	d8c02015 	stw	r3,128(sp)
   11e5c:	d8801f15 	stw	r2,124(sp)
   11e60:	010001c4 	movi	r4,7
   11e64:	2080b516 	blt	r4,r2,1213c <___svfprintf_internal_r+0x1b68>
   11e68:	42000204 	addi	r8,r8,8
   11e6c:	8800041e 	bne	r17,zero,11e80 <___svfprintf_internal_r+0x18ac>
   11e70:	d8803317 	ldw	r2,204(sp)
   11e74:	1000021e 	bne	r2,zero,11e80 <___svfprintf_internal_r+0x18ac>
   11e78:	9080004c 	andi	r2,r18,1
   11e7c:	103c3926 	beq	r2,zero,10f64 <__alt_data_end+0xfc010f64>
   11e80:	d9003817 	ldw	r4,224(sp)
   11e84:	d8801f17 	ldw	r2,124(sp)
   11e88:	d9403417 	ldw	r5,208(sp)
   11e8c:	20c7883a 	add	r3,r4,r3
   11e90:	10800044 	addi	r2,r2,1
   11e94:	41000115 	stw	r4,4(r8)
   11e98:	41400015 	stw	r5,0(r8)
   11e9c:	d8c02015 	stw	r3,128(sp)
   11ea0:	d8801f15 	stw	r2,124(sp)
   11ea4:	010001c4 	movi	r4,7
   11ea8:	20818016 	blt	r4,r2,124ac <___svfprintf_internal_r+0x1ed8>
   11eac:	42000204 	addi	r8,r8,8
   11eb0:	0463c83a 	sub	r17,zero,r17
   11eb4:	0440cb0e 	bge	zero,r17,121e4 <___svfprintf_internal_r+0x1c10>
   11eb8:	05800404 	movi	r22,16
   11ebc:	b440e80e 	bge	r22,r17,12260 <___svfprintf_internal_r+0x1c8c>
   11ec0:	014000f4 	movhi	r5,3
   11ec4:	296e0484 	addi	r5,r5,-18414
   11ec8:	d9402c15 	stw	r5,176(sp)
   11ecc:	070001c4 	movi	fp,7
   11ed0:	dd002d17 	ldw	r20,180(sp)
   11ed4:	00000306 	br	11ee4 <___svfprintf_internal_r+0x1910>
   11ed8:	42000204 	addi	r8,r8,8
   11edc:	8c7ffc04 	addi	r17,r17,-16
   11ee0:	b440e20e 	bge	r22,r17,1226c <___svfprintf_internal_r+0x1c98>
   11ee4:	18c00404 	addi	r3,r3,16
   11ee8:	10800044 	addi	r2,r2,1
   11eec:	45400015 	stw	r21,0(r8)
   11ef0:	45800115 	stw	r22,4(r8)
   11ef4:	d8c02015 	stw	r3,128(sp)
   11ef8:	d8801f15 	stw	r2,124(sp)
   11efc:	e0bff60e 	bge	fp,r2,11ed8 <__alt_data_end+0xfc011ed8>
   11f00:	d9801e04 	addi	r6,sp,120
   11f04:	a00b883a 	mov	r5,r20
   11f08:	9809883a 	mov	r4,r19
   11f0c:	00195380 	call	19538 <__ssprint_r>
   11f10:	103a971e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11f14:	d8c02017 	ldw	r3,128(sp)
   11f18:	d8801f17 	ldw	r2,124(sp)
   11f1c:	da000404 	addi	r8,sp,16
   11f20:	003fee06 	br	11edc <__alt_data_end+0xfc011edc>
   11f24:	d9002e17 	ldw	r4,184(sp)
   11f28:	d9402a17 	ldw	r5,168(sp)
   11f2c:	002d883a 	mov	r22,zero
   11f30:	20800104 	addi	r2,r4,4
   11f34:	25000017 	ldw	r20,0(r4)
   11f38:	283e7d0e 	bge	r5,zero,11930 <__alt_data_end+0xfc011930>
   11f3c:	003eda06 	br	11aa8 <__alt_data_end+0xfc011aa8>
   11f40:	d9002e17 	ldw	r4,184(sp)
   11f44:	d9402a17 	ldw	r5,168(sp)
   11f48:	002d883a 	mov	r22,zero
   11f4c:	20800104 	addi	r2,r4,4
   11f50:	25000017 	ldw	r20,0(r4)
   11f54:	283e2d0e 	bge	r5,zero,1180c <__alt_data_end+0xfc01180c>
   11f58:	003f6b06 	br	11d08 <__alt_data_end+0xfc011d08>
   11f5c:	d8c02e15 	stw	r3,184(sp)
   11f60:	0039883a 	mov	fp,zero
   11f64:	003ed206 	br	11ab0 <__alt_data_end+0xfc011ab0>
   11f68:	bc400043 	ldbu	r17,1(r23)
   11f6c:	84000814 	ori	r16,r16,32
   11f70:	bdc00044 	addi	r23,r23,1
   11f74:	8c403fcc 	andi	r17,r17,255
   11f78:	8c40201c 	xori	r17,r17,128
   11f7c:	8c7fe004 	addi	r17,r17,-128
   11f80:	0039e906 	br	10728 <__alt_data_end+0xfc010728>
   11f84:	d9402d17 	ldw	r5,180(sp)
   11f88:	d9801e04 	addi	r6,sp,120
   11f8c:	9809883a 	mov	r4,r19
   11f90:	00195380 	call	19538 <__ssprint_r>
   11f94:	103a761e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   11f98:	d8c02017 	ldw	r3,128(sp)
   11f9c:	da000404 	addi	r8,sp,16
   11fa0:	003d4a06 	br	114cc <__alt_data_end+0xfc0114cc>
   11fa4:	d9002a17 	ldw	r4,168(sp)
   11fa8:	05bff7c4 	movi	r22,-33
   11fac:	00bfffc4 	movi	r2,-1
   11fb0:	8dac703a 	and	r22,r17,r22
   11fb4:	20806a26 	beq	r4,r2,12160 <___svfprintf_internal_r+0x1b8c>
   11fb8:	008011c4 	movi	r2,71
   11fbc:	b0813726 	beq	r22,r2,1249c <___svfprintf_internal_r+0x1ec8>
   11fc0:	d9003717 	ldw	r4,220(sp)
   11fc4:	90c04014 	ori	r3,r18,256
   11fc8:	d8c02c15 	stw	r3,176(sp)
   11fcc:	20015d16 	blt	r4,zero,12544 <___svfprintf_internal_r+0x1f70>
   11fd0:	dd003717 	ldw	r20,220(sp)
   11fd4:	d8002905 	stb	zero,164(sp)
   11fd8:	00801984 	movi	r2,102
   11fdc:	88814026 	beq	r17,r2,124e0 <___svfprintf_internal_r+0x1f0c>
   11fe0:	00801184 	movi	r2,70
   11fe4:	88817126 	beq	r17,r2,125ac <___svfprintf_internal_r+0x1fd8>
   11fe8:	00801144 	movi	r2,69
   11fec:	b0816226 	beq	r22,r2,12578 <___svfprintf_internal_r+0x1fa4>
   11ff0:	d8c02a17 	ldw	r3,168(sp)
   11ff4:	d8802104 	addi	r2,sp,132
   11ff8:	d8800315 	stw	r2,12(sp)
   11ffc:	d9403617 	ldw	r5,216(sp)
   12000:	d8802504 	addi	r2,sp,148
   12004:	d8800215 	stw	r2,8(sp)
   12008:	d8802604 	addi	r2,sp,152
   1200c:	d8c00015 	stw	r3,0(sp)
   12010:	d8800115 	stw	r2,4(sp)
   12014:	01c00084 	movi	r7,2
   12018:	a00d883a 	mov	r6,r20
   1201c:	9809883a 	mov	r4,r19
   12020:	d8c03d15 	stw	r3,244(sp)
   12024:	da003e15 	stw	r8,248(sp)
   12028:	0014fc80 	call	14fc8 <_dtoa_r>
   1202c:	1021883a 	mov	r16,r2
   12030:	008019c4 	movi	r2,103
   12034:	d8c03d17 	ldw	r3,244(sp)
   12038:	da003e17 	ldw	r8,248(sp)
   1203c:	8880e726 	beq	r17,r2,123dc <___svfprintf_internal_r+0x1e08>
   12040:	008011c4 	movi	r2,71
   12044:	8880d426 	beq	r17,r2,12398 <___svfprintf_internal_r+0x1dc4>
   12048:	80f9883a 	add	fp,r16,r3
   1204c:	d9003617 	ldw	r4,216(sp)
   12050:	000d883a 	mov	r6,zero
   12054:	000f883a 	mov	r7,zero
   12058:	a00b883a 	mov	r5,r20
   1205c:	da003e15 	stw	r8,248(sp)
   12060:	001e9280 	call	1e928 <__eqdf2>
   12064:	da003e17 	ldw	r8,248(sp)
   12068:	1000e426 	beq	r2,zero,123fc <___svfprintf_internal_r+0x1e28>
   1206c:	d8802117 	ldw	r2,132(sp)
   12070:	1700062e 	bgeu	r2,fp,1208c <___svfprintf_internal_r+0x1ab8>
   12074:	01000c04 	movi	r4,48
   12078:	10c00044 	addi	r3,r2,1
   1207c:	d8c02115 	stw	r3,132(sp)
   12080:	11000005 	stb	r4,0(r2)
   12084:	d8802117 	ldw	r2,132(sp)
   12088:	173ffb36 	bltu	r2,fp,12078 <__alt_data_end+0xfc012078>
   1208c:	1405c83a 	sub	r2,r2,r16
   12090:	d8803315 	stw	r2,204(sp)
   12094:	008011c4 	movi	r2,71
   12098:	b080c526 	beq	r22,r2,123b0 <___svfprintf_internal_r+0x1ddc>
   1209c:	00801944 	movi	r2,101
   120a0:	1441d80e 	bge	r2,r17,12804 <___svfprintf_internal_r+0x2230>
   120a4:	d8c02617 	ldw	r3,152(sp)
   120a8:	00801984 	movi	r2,102
   120ac:	d8c03215 	stw	r3,200(sp)
   120b0:	88813426 	beq	r17,r2,12584 <___svfprintf_internal_r+0x1fb0>
   120b4:	d8c03217 	ldw	r3,200(sp)
   120b8:	d9003317 	ldw	r4,204(sp)
   120bc:	19012516 	blt	r3,r4,12554 <___svfprintf_internal_r+0x1f80>
   120c0:	9480004c 	andi	r18,r18,1
   120c4:	9001841e 	bne	r18,zero,126d8 <___svfprintf_internal_r+0x2104>
   120c8:	1805883a 	mov	r2,r3
   120cc:	1801cb16 	blt	r3,zero,127fc <___svfprintf_internal_r+0x2228>
   120d0:	d8c03217 	ldw	r3,200(sp)
   120d4:	044019c4 	movi	r17,103
   120d8:	d8c02b15 	stw	r3,172(sp)
   120dc:	df002907 	ldb	fp,164(sp)
   120e0:	e000a61e 	bne	fp,zero,1237c <___svfprintf_internal_r+0x1da8>
   120e4:	df002783 	ldbu	fp,158(sp)
   120e8:	d8802915 	stw	r2,164(sp)
   120ec:	dc802c17 	ldw	r18,176(sp)
   120f0:	d8002a15 	stw	zero,168(sp)
   120f4:	003af506 	br	10ccc <__alt_data_end+0xfc010ccc>
   120f8:	040000f4 	movhi	r16,3
   120fc:	842df404 	addi	r16,r16,-18480
   12100:	003a7e06 	br	10afc <__alt_data_end+0xfc010afc>
   12104:	d9003917 	ldw	r4,228(sp)
   12108:	04001004 	movi	r16,64
   1210c:	800b883a 	mov	r5,r16
   12110:	000f4680 	call	f468 <_malloc_r>
   12114:	d9002d17 	ldw	r4,180(sp)
   12118:	20800015 	stw	r2,0(r4)
   1211c:	20800415 	stw	r2,16(r4)
   12120:	1001d026 	beq	r2,zero,12864 <___svfprintf_internal_r+0x2290>
   12124:	d8802d17 	ldw	r2,180(sp)
   12128:	14000515 	stw	r16,20(r2)
   1212c:	00394406 	br	10640 <__alt_data_end+0xfc010640>
   12130:	040000f4 	movhi	r16,3
   12134:	842df604 	addi	r16,r16,-18472
   12138:	003ee106 	br	11cc0 <__alt_data_end+0xfc011cc0>
   1213c:	d9402d17 	ldw	r5,180(sp)
   12140:	d9801e04 	addi	r6,sp,120
   12144:	9809883a 	mov	r4,r19
   12148:	00195380 	call	19538 <__ssprint_r>
   1214c:	103a081e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   12150:	dc402617 	ldw	r17,152(sp)
   12154:	d8c02017 	ldw	r3,128(sp)
   12158:	da000404 	addi	r8,sp,16
   1215c:	003f4306 	br	11e6c <__alt_data_end+0xfc011e6c>
   12160:	01400184 	movi	r5,6
   12164:	d9402a15 	stw	r5,168(sp)
   12168:	003f9506 	br	11fc0 <__alt_data_end+0xfc011fc0>
   1216c:	d8c02e17 	ldw	r3,184(sp)
   12170:	1d000017 	ldw	r20,0(r3)
   12174:	18c00104 	addi	r3,r3,4
   12178:	d8c02e15 	stw	r3,184(sp)
   1217c:	a02dd7fa 	srai	r22,r20,31
   12180:	b005883a 	mov	r2,r22
   12184:	003a7606 	br	10b60 <__alt_data_end+0xfc010b60>
   12188:	d9002e17 	ldw	r4,184(sp)
   1218c:	002d883a 	mov	r22,zero
   12190:	25000017 	ldw	r20,0(r4)
   12194:	21000104 	addi	r4,r4,4
   12198:	d9002e15 	stw	r4,184(sp)
   1219c:	003bdd06 	br	11114 <__alt_data_end+0xfc011114>
   121a0:	9480100c 	andi	r18,r18,64
   121a4:	90006e26 	beq	r18,zero,12360 <___svfprintf_internal_r+0x1d8c>
   121a8:	d9402e17 	ldw	r5,184(sp)
   121ac:	d8c02f17 	ldw	r3,188(sp)
   121b0:	28800017 	ldw	r2,0(r5)
   121b4:	29400104 	addi	r5,r5,4
   121b8:	d9402e15 	stw	r5,184(sp)
   121bc:	10c0000d 	sth	r3,0(r2)
   121c0:	00392f06 	br	10680 <__alt_data_end+0xfc010680>
   121c4:	d9402d17 	ldw	r5,180(sp)
   121c8:	d9801e04 	addi	r6,sp,120
   121cc:	9809883a 	mov	r4,r19
   121d0:	00195380 	call	19538 <__ssprint_r>
   121d4:	1039e61e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   121d8:	d8c02017 	ldw	r3,128(sp)
   121dc:	d8801f17 	ldw	r2,124(sp)
   121e0:	da000404 	addi	r8,sp,16
   121e4:	d9403317 	ldw	r5,204(sp)
   121e8:	10800044 	addi	r2,r2,1
   121ec:	44000015 	stw	r16,0(r8)
   121f0:	28c7883a 	add	r3,r5,r3
   121f4:	003b5506 	br	10f4c <__alt_data_end+0xfc010f4c>
   121f8:	8009883a 	mov	r4,r16
   121fc:	df003e15 	stw	fp,248(sp)
   12200:	001053c0 	call	1053c <strlen>
   12204:	d8802b15 	stw	r2,172(sp)
   12208:	da003e17 	ldw	r8,248(sp)
   1220c:	103c160e 	bge	r2,zero,11268 <__alt_data_end+0xfc011268>
   12210:	0005883a 	mov	r2,zero
   12214:	003c1406 	br	11268 <__alt_data_end+0xfc011268>
   12218:	00bfffc4 	movi	r2,-1
   1221c:	0039d906 	br	10984 <__alt_data_end+0xfc010984>
   12220:	010000f4 	movhi	r4,3
   12224:	212e0884 	addi	r4,r4,-18398
   12228:	d9003515 	stw	r4,212(sp)
   1222c:	003ae406 	br	10dc0 <__alt_data_end+0xfc010dc0>
   12230:	013fffc4 	movi	r4,-1
   12234:	0039fa06 	br	10a20 <__alt_data_end+0xfc010a20>
   12238:	d9402d17 	ldw	r5,180(sp)
   1223c:	d9801e04 	addi	r6,sp,120
   12240:	9809883a 	mov	r4,r19
   12244:	00195380 	call	19538 <__ssprint_r>
   12248:	1039c91e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   1224c:	d8c02017 	ldw	r3,128(sp)
   12250:	da000404 	addi	r8,sp,16
   12254:	003d8406 	br	11868 <__alt_data_end+0xfc011868>
   12258:	0023883a 	mov	r17,zero
   1225c:	003d8306 	br	1186c <__alt_data_end+0xfc01186c>
   12260:	010000f4 	movhi	r4,3
   12264:	212e0484 	addi	r4,r4,-18414
   12268:	d9002c15 	stw	r4,176(sp)
   1226c:	d9002c17 	ldw	r4,176(sp)
   12270:	1c47883a 	add	r3,r3,r17
   12274:	10800044 	addi	r2,r2,1
   12278:	41000015 	stw	r4,0(r8)
   1227c:	44400115 	stw	r17,4(r8)
   12280:	d8c02015 	stw	r3,128(sp)
   12284:	d8801f15 	stw	r2,124(sp)
   12288:	010001c4 	movi	r4,7
   1228c:	20bfcd16 	blt	r4,r2,121c4 <__alt_data_end+0xfc0121c4>
   12290:	42000204 	addi	r8,r8,8
   12294:	003fd306 	br	121e4 <__alt_data_end+0xfc0121e4>
   12298:	d9402d17 	ldw	r5,180(sp)
   1229c:	d9801e04 	addi	r6,sp,120
   122a0:	9809883a 	mov	r4,r19
   122a4:	00195380 	call	19538 <__ssprint_r>
   122a8:	1039b11e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   122ac:	d8802617 	ldw	r2,152(sp)
   122b0:	d8c02017 	ldw	r3,128(sp)
   122b4:	da000404 	addi	r8,sp,16
   122b8:	003e1c06 	br	11b2c <__alt_data_end+0xfc011b2c>
   122bc:	d8802a17 	ldw	r2,168(sp)
   122c0:	00c00184 	movi	r3,6
   122c4:	1880012e 	bgeu	r3,r2,122cc <___svfprintf_internal_r+0x1cf8>
   122c8:	1805883a 	mov	r2,r3
   122cc:	d8802b15 	stw	r2,172(sp)
   122d0:	1000f316 	blt	r2,zero,126a0 <___svfprintf_internal_r+0x20cc>
   122d4:	040000f4 	movhi	r16,3
   122d8:	d8802915 	stw	r2,164(sp)
   122dc:	dd002e15 	stw	r20,184(sp)
   122e0:	d8002a15 	stw	zero,168(sp)
   122e4:	d8003215 	stw	zero,200(sp)
   122e8:	842e0204 	addi	r16,r16,-18424
   122ec:	0039883a 	mov	fp,zero
   122f0:	003a7d06 	br	10ce8 <__alt_data_end+0xfc010ce8>
   122f4:	010000f4 	movhi	r4,3
   122f8:	212e0884 	addi	r4,r4,-18398
   122fc:	d9003515 	stw	r4,212(sp)
   12300:	003b3d06 	br	10ff8 <__alt_data_end+0xfc010ff8>
   12304:	d9402d17 	ldw	r5,180(sp)
   12308:	d9801e04 	addi	r6,sp,120
   1230c:	9809883a 	mov	r4,r19
   12310:	00195380 	call	19538 <__ssprint_r>
   12314:	1039961e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   12318:	d8802617 	ldw	r2,152(sp)
   1231c:	d9403317 	ldw	r5,204(sp)
   12320:	d8c02017 	ldw	r3,128(sp)
   12324:	da000404 	addi	r8,sp,16
   12328:	2885c83a 	sub	r2,r5,r2
   1232c:	003e1006 	br	11b70 <__alt_data_end+0xfc011b70>
   12330:	00800044 	movi	r2,1
   12334:	10803fcc 	andi	r2,r2,255
   12338:	00c00044 	movi	r3,1
   1233c:	10fa1026 	beq	r2,r3,10b80 <__alt_data_end+0xfc010b80>
   12340:	00c00084 	movi	r3,2
   12344:	10fb8226 	beq	r2,r3,11150 <__alt_data_end+0xfc011150>
   12348:	003a4206 	br	10c54 <__alt_data_end+0xfc010c54>
   1234c:	0021883a 	mov	r16,zero
   12350:	003e0806 	br	11b74 <__alt_data_end+0xfc011b74>
   12354:	07000b44 	movi	fp,45
   12358:	df002785 	stb	fp,158(sp)
   1235c:	0039e306 	br	10aec <__alt_data_end+0xfc010aec>
   12360:	d9002e17 	ldw	r4,184(sp)
   12364:	d9402f17 	ldw	r5,188(sp)
   12368:	20800017 	ldw	r2,0(r4)
   1236c:	21000104 	addi	r4,r4,4
   12370:	d9002e15 	stw	r4,184(sp)
   12374:	11400015 	stw	r5,0(r2)
   12378:	0038c106 	br	10680 <__alt_data_end+0xfc010680>
   1237c:	00c00b44 	movi	r3,45
   12380:	d8c02785 	stb	r3,158(sp)
   12384:	d8802915 	stw	r2,164(sp)
   12388:	dc802c17 	ldw	r18,176(sp)
   1238c:	d8002a15 	stw	zero,168(sp)
   12390:	07000b44 	movi	fp,45
   12394:	003a5106 	br	10cdc <__alt_data_end+0xfc010cdc>
   12398:	9080004c 	andi	r2,r18,1
   1239c:	1000941e 	bne	r2,zero,125f0 <___svfprintf_internal_r+0x201c>
   123a0:	d8802117 	ldw	r2,132(sp)
   123a4:	1405c83a 	sub	r2,r2,r16
   123a8:	d8803315 	stw	r2,204(sp)
   123ac:	b441151e 	bne	r22,r17,12804 <___svfprintf_internal_r+0x2230>
   123b0:	dd802617 	ldw	r22,152(sp)
   123b4:	00bfff44 	movi	r2,-3
   123b8:	b0801a16 	blt	r22,r2,12424 <___svfprintf_internal_r+0x1e50>
   123bc:	d9402a17 	ldw	r5,168(sp)
   123c0:	2d801816 	blt	r5,r22,12424 <___svfprintf_internal_r+0x1e50>
   123c4:	dd803215 	stw	r22,200(sp)
   123c8:	003f3a06 	br	120b4 <__alt_data_end+0xfc0120b4>
   123cc:	1025883a 	mov	r18,r2
   123d0:	0039883a 	mov	fp,zero
   123d4:	00800084 	movi	r2,2
   123d8:	003fd606 	br	12334 <__alt_data_end+0xfc012334>
   123dc:	9080004c 	andi	r2,r18,1
   123e0:	103f191e 	bne	r2,zero,12048 <__alt_data_end+0xfc012048>
   123e4:	d8802117 	ldw	r2,132(sp)
   123e8:	003f2806 	br	1208c <__alt_data_end+0xfc01208c>
   123ec:	010000f4 	movhi	r4,3
   123f0:	212e0484 	addi	r4,r4,-18414
   123f4:	d9002c15 	stw	r4,176(sp)
   123f8:	003c7c06 	br	115ec <__alt_data_end+0xfc0115ec>
   123fc:	e005883a 	mov	r2,fp
   12400:	003f2206 	br	1208c <__alt_data_end+0xfc01208c>
   12404:	d9002a17 	ldw	r4,168(sp)
   12408:	df002783 	ldbu	fp,158(sp)
   1240c:	dd002e15 	stw	r20,184(sp)
   12410:	d9002915 	stw	r4,164(sp)
   12414:	d9002b15 	stw	r4,172(sp)
   12418:	d8002a15 	stw	zero,168(sp)
   1241c:	d8003215 	stw	zero,200(sp)
   12420:	003a2a06 	br	10ccc <__alt_data_end+0xfc010ccc>
   12424:	8c7fff84 	addi	r17,r17,-2
   12428:	b5bfffc4 	addi	r22,r22,-1
   1242c:	dd802615 	stw	r22,152(sp)
   12430:	dc4022c5 	stb	r17,139(sp)
   12434:	b000c316 	blt	r22,zero,12744 <___svfprintf_internal_r+0x2170>
   12438:	00800ac4 	movi	r2,43
   1243c:	d8802305 	stb	r2,140(sp)
   12440:	00800244 	movi	r2,9
   12444:	15806e16 	blt	r2,r22,12600 <___svfprintf_internal_r+0x202c>
   12448:	00800c04 	movi	r2,48
   1244c:	b5800c04 	addi	r22,r22,48
   12450:	d8802345 	stb	r2,141(sp)
   12454:	dd802385 	stb	r22,142(sp)
   12458:	d88023c4 	addi	r2,sp,143
   1245c:	df0022c4 	addi	fp,sp,139
   12460:	d8c03317 	ldw	r3,204(sp)
   12464:	1739c83a 	sub	fp,r2,fp
   12468:	d9003317 	ldw	r4,204(sp)
   1246c:	e0c7883a 	add	r3,fp,r3
   12470:	df003b15 	stw	fp,236(sp)
   12474:	d8c02b15 	stw	r3,172(sp)
   12478:	00800044 	movi	r2,1
   1247c:	1100b70e 	bge	r2,r4,1275c <___svfprintf_internal_r+0x2188>
   12480:	d8c02b17 	ldw	r3,172(sp)
   12484:	18c00044 	addi	r3,r3,1
   12488:	d8c02b15 	stw	r3,172(sp)
   1248c:	1805883a 	mov	r2,r3
   12490:	1800b016 	blt	r3,zero,12754 <___svfprintf_internal_r+0x2180>
   12494:	d8003215 	stw	zero,200(sp)
   12498:	003f1006 	br	120dc <__alt_data_end+0xfc0120dc>
   1249c:	d8802a17 	ldw	r2,168(sp)
   124a0:	103ec71e 	bne	r2,zero,11fc0 <__alt_data_end+0xfc011fc0>
   124a4:	dc002a15 	stw	r16,168(sp)
   124a8:	003ec506 	br	11fc0 <__alt_data_end+0xfc011fc0>
   124ac:	d9402d17 	ldw	r5,180(sp)
   124b0:	d9801e04 	addi	r6,sp,120
   124b4:	9809883a 	mov	r4,r19
   124b8:	00195380 	call	19538 <__ssprint_r>
   124bc:	10392c1e 	bne	r2,zero,10970 <__alt_data_end+0xfc010970>
   124c0:	dc402617 	ldw	r17,152(sp)
   124c4:	d8c02017 	ldw	r3,128(sp)
   124c8:	d8801f17 	ldw	r2,124(sp)
   124cc:	da000404 	addi	r8,sp,16
   124d0:	003e7706 	br	11eb0 <__alt_data_end+0xfc011eb0>
   124d4:	182f883a 	mov	r23,r3
   124d8:	d8002a15 	stw	zero,168(sp)
   124dc:	00389306 	br	1072c <__alt_data_end+0xfc01072c>
   124e0:	d8c02a17 	ldw	r3,168(sp)
   124e4:	d8802104 	addi	r2,sp,132
   124e8:	d8800315 	stw	r2,12(sp)
   124ec:	d9403617 	ldw	r5,216(sp)
   124f0:	d8802504 	addi	r2,sp,148
   124f4:	d8800215 	stw	r2,8(sp)
   124f8:	d8802604 	addi	r2,sp,152
   124fc:	d8c00015 	stw	r3,0(sp)
   12500:	9809883a 	mov	r4,r19
   12504:	d8800115 	stw	r2,4(sp)
   12508:	01c000c4 	movi	r7,3
   1250c:	a00d883a 	mov	r6,r20
   12510:	da003e15 	stw	r8,248(sp)
   12514:	0014fc80 	call	14fc8 <_dtoa_r>
   12518:	d9002a17 	ldw	r4,168(sp)
   1251c:	da003e17 	ldw	r8,248(sp)
   12520:	1021883a 	mov	r16,r2
   12524:	1139883a 	add	fp,r2,r4
   12528:	2007883a 	mov	r3,r4
   1252c:	81000007 	ldb	r4,0(r16)
   12530:	00800c04 	movi	r2,48
   12534:	20806f26 	beq	r4,r2,126f4 <___svfprintf_internal_r+0x2120>
   12538:	d8c02617 	ldw	r3,152(sp)
   1253c:	e0f9883a 	add	fp,fp,r3
   12540:	003ec206 	br	1204c <__alt_data_end+0xfc01204c>
   12544:	00c00b44 	movi	r3,45
   12548:	2520003c 	xorhi	r20,r4,32768
   1254c:	d8c02905 	stb	r3,164(sp)
   12550:	003ea106 	br	11fd8 <__alt_data_end+0xfc011fd8>
   12554:	d8c03217 	ldw	r3,200(sp)
   12558:	00c0890e 	bge	zero,r3,12780 <___svfprintf_internal_r+0x21ac>
   1255c:	00800044 	movi	r2,1
   12560:	d9003317 	ldw	r4,204(sp)
   12564:	1105883a 	add	r2,r2,r4
   12568:	d8802b15 	stw	r2,172(sp)
   1256c:	10005f16 	blt	r2,zero,126ec <___svfprintf_internal_r+0x2118>
   12570:	044019c4 	movi	r17,103
   12574:	003ed906 	br	120dc <__alt_data_end+0xfc0120dc>
   12578:	d9002a17 	ldw	r4,168(sp)
   1257c:	20c00044 	addi	r3,r4,1
   12580:	003e9c06 	br	11ff4 <__alt_data_end+0xfc011ff4>
   12584:	d9002a17 	ldw	r4,168(sp)
   12588:	00c0680e 	bge	zero,r3,1272c <___svfprintf_internal_r+0x2158>
   1258c:	2000461e 	bne	r4,zero,126a8 <___svfprintf_internal_r+0x20d4>
   12590:	9480004c 	andi	r18,r18,1
   12594:	9000441e 	bne	r18,zero,126a8 <___svfprintf_internal_r+0x20d4>
   12598:	1805883a 	mov	r2,r3
   1259c:	1800a116 	blt	r3,zero,12824 <___svfprintf_internal_r+0x2250>
   125a0:	d8c03217 	ldw	r3,200(sp)
   125a4:	d8c02b15 	stw	r3,172(sp)
   125a8:	003ecc06 	br	120dc <__alt_data_end+0xfc0120dc>
   125ac:	d9402a17 	ldw	r5,168(sp)
   125b0:	d8802104 	addi	r2,sp,132
   125b4:	d8800315 	stw	r2,12(sp)
   125b8:	d9400015 	stw	r5,0(sp)
   125bc:	d8802504 	addi	r2,sp,148
   125c0:	d9403617 	ldw	r5,216(sp)
   125c4:	d8800215 	stw	r2,8(sp)
   125c8:	d8802604 	addi	r2,sp,152
   125cc:	d8800115 	stw	r2,4(sp)
   125d0:	01c000c4 	movi	r7,3
   125d4:	a00d883a 	mov	r6,r20
   125d8:	9809883a 	mov	r4,r19
   125dc:	da003e15 	stw	r8,248(sp)
   125e0:	0014fc80 	call	14fc8 <_dtoa_r>
   125e4:	d8c02a17 	ldw	r3,168(sp)
   125e8:	da003e17 	ldw	r8,248(sp)
   125ec:	1021883a 	mov	r16,r2
   125f0:	00801184 	movi	r2,70
   125f4:	80f9883a 	add	fp,r16,r3
   125f8:	88bfcc26 	beq	r17,r2,1252c <__alt_data_end+0xfc01252c>
   125fc:	003e9306 	br	1204c <__alt_data_end+0xfc01204c>
   12600:	df0022c4 	addi	fp,sp,139
   12604:	dc002a15 	stw	r16,168(sp)
   12608:	9829883a 	mov	r20,r19
   1260c:	e021883a 	mov	r16,fp
   12610:	4027883a 	mov	r19,r8
   12614:	b009883a 	mov	r4,r22
   12618:	01400284 	movi	r5,10
   1261c:	000d7a40 	call	d7a4 <__modsi3>
   12620:	10800c04 	addi	r2,r2,48
   12624:	843fffc4 	addi	r16,r16,-1
   12628:	b009883a 	mov	r4,r22
   1262c:	01400284 	movi	r5,10
   12630:	80800005 	stb	r2,0(r16)
   12634:	000d7200 	call	d720 <__divsi3>
   12638:	102d883a 	mov	r22,r2
   1263c:	00800244 	movi	r2,9
   12640:	15bff416 	blt	r2,r22,12614 <__alt_data_end+0xfc012614>
   12644:	9811883a 	mov	r8,r19
   12648:	b0800c04 	addi	r2,r22,48
   1264c:	a027883a 	mov	r19,r20
   12650:	8029883a 	mov	r20,r16
   12654:	a17fffc4 	addi	r5,r20,-1
   12658:	a0bfffc5 	stb	r2,-1(r20)
   1265c:	dc002a17 	ldw	r16,168(sp)
   12660:	2f00782e 	bgeu	r5,fp,12844 <___svfprintf_internal_r+0x2270>
   12664:	d9c02384 	addi	r7,sp,142
   12668:	3d0fc83a 	sub	r7,r7,r20
   1266c:	d9002344 	addi	r4,sp,141
   12670:	e1cf883a 	add	r7,fp,r7
   12674:	00000106 	br	1267c <___svfprintf_internal_r+0x20a8>
   12678:	28800003 	ldbu	r2,0(r5)
   1267c:	20800005 	stb	r2,0(r4)
   12680:	21000044 	addi	r4,r4,1
   12684:	29400044 	addi	r5,r5,1
   12688:	21fffb1e 	bne	r4,r7,12678 <__alt_data_end+0xfc012678>
   1268c:	d8802304 	addi	r2,sp,140
   12690:	1505c83a 	sub	r2,r2,r20
   12694:	d8c02344 	addi	r3,sp,141
   12698:	1885883a 	add	r2,r3,r2
   1269c:	003f7006 	br	12460 <__alt_data_end+0xfc012460>
   126a0:	0005883a 	mov	r2,zero
   126a4:	003f0b06 	br	122d4 <__alt_data_end+0xfc0122d4>
   126a8:	d9002a17 	ldw	r4,168(sp)
   126ac:	d8c03217 	ldw	r3,200(sp)
   126b0:	20800044 	addi	r2,r4,1
   126b4:	1885883a 	add	r2,r3,r2
   126b8:	d8802b15 	stw	r2,172(sp)
   126bc:	103e870e 	bge	r2,zero,120dc <__alt_data_end+0xfc0120dc>
   126c0:	0005883a 	mov	r2,zero
   126c4:	003e8506 	br	120dc <__alt_data_end+0xfc0120dc>
   126c8:	010000f4 	movhi	r4,3
   126cc:	212e0484 	addi	r4,r4,-18414
   126d0:	d9002c15 	stw	r4,176(sp)
   126d4:	003cc506 	br	119ec <__alt_data_end+0xfc0119ec>
   126d8:	d8c03217 	ldw	r3,200(sp)
   126dc:	18c00044 	addi	r3,r3,1
   126e0:	d8c02b15 	stw	r3,172(sp)
   126e4:	1805883a 	mov	r2,r3
   126e8:	183fa10e 	bge	r3,zero,12570 <__alt_data_end+0xfc012570>
   126ec:	0005883a 	mov	r2,zero
   126f0:	003f9f06 	br	12570 <__alt_data_end+0xfc012570>
   126f4:	d9003617 	ldw	r4,216(sp)
   126f8:	000d883a 	mov	r6,zero
   126fc:	000f883a 	mov	r7,zero
   12700:	a00b883a 	mov	r5,r20
   12704:	d8c03d15 	stw	r3,244(sp)
   12708:	da003e15 	stw	r8,248(sp)
   1270c:	001e9280 	call	1e928 <__eqdf2>
   12710:	d8c03d17 	ldw	r3,244(sp)
   12714:	da003e17 	ldw	r8,248(sp)
   12718:	103f8726 	beq	r2,zero,12538 <__alt_data_end+0xfc012538>
   1271c:	00800044 	movi	r2,1
   12720:	10c7c83a 	sub	r3,r2,r3
   12724:	d8c02615 	stw	r3,152(sp)
   12728:	003f8406 	br	1253c <__alt_data_end+0xfc01253c>
   1272c:	20000e1e 	bne	r4,zero,12768 <___svfprintf_internal_r+0x2194>
   12730:	9480004c 	andi	r18,r18,1
   12734:	90000c1e 	bne	r18,zero,12768 <___svfprintf_internal_r+0x2194>
   12738:	00800044 	movi	r2,1
   1273c:	d8802b15 	stw	r2,172(sp)
   12740:	003e6606 	br	120dc <__alt_data_end+0xfc0120dc>
   12744:	00800b44 	movi	r2,45
   12748:	05adc83a 	sub	r22,zero,r22
   1274c:	d8802305 	stb	r2,140(sp)
   12750:	003f3b06 	br	12440 <__alt_data_end+0xfc012440>
   12754:	0005883a 	mov	r2,zero
   12758:	003f4e06 	br	12494 <__alt_data_end+0xfc012494>
   1275c:	90a4703a 	and	r18,r18,r2
   12760:	903f4a26 	beq	r18,zero,1248c <__alt_data_end+0xfc01248c>
   12764:	003f4606 	br	12480 <__alt_data_end+0xfc012480>
   12768:	d8c02a17 	ldw	r3,168(sp)
   1276c:	18c00084 	addi	r3,r3,2
   12770:	d8c02b15 	stw	r3,172(sp)
   12774:	1805883a 	mov	r2,r3
   12778:	183e580e 	bge	r3,zero,120dc <__alt_data_end+0xfc0120dc>
   1277c:	003fd006 	br	126c0 <__alt_data_end+0xfc0126c0>
   12780:	00800084 	movi	r2,2
   12784:	10c5c83a 	sub	r2,r2,r3
   12788:	003f7506 	br	12560 <__alt_data_end+0xfc012560>
   1278c:	d9402e17 	ldw	r5,184(sp)
   12790:	d9002e17 	ldw	r4,184(sp)
   12794:	bc400043 	ldbu	r17,1(r23)
   12798:	29400017 	ldw	r5,0(r5)
   1279c:	20800104 	addi	r2,r4,4
   127a0:	d8802e15 	stw	r2,184(sp)
   127a4:	d9402a15 	stw	r5,168(sp)
   127a8:	182f883a 	mov	r23,r3
   127ac:	283df10e 	bge	r5,zero,11f74 <__alt_data_end+0xfc011f74>
   127b0:	8c403fcc 	andi	r17,r17,255
   127b4:	017fffc4 	movi	r5,-1
   127b8:	8c40201c 	xori	r17,r17,128
   127bc:	d9402a15 	stw	r5,168(sp)
   127c0:	8c7fe004 	addi	r17,r17,-128
   127c4:	0037d806 	br	10728 <__alt_data_end+0xfc010728>
   127c8:	9080004c 	andi	r2,r18,1
   127cc:	0039883a 	mov	fp,zero
   127d0:	10000726 	beq	r2,zero,127f0 <___svfprintf_internal_r+0x221c>
   127d4:	d8c02817 	ldw	r3,160(sp)
   127d8:	dc001dc4 	addi	r16,sp,119
   127dc:	00800c04 	movi	r2,48
   127e0:	1c07c83a 	sub	r3,r3,r16
   127e4:	d8801dc5 	stb	r2,119(sp)
   127e8:	d8c02b15 	stw	r3,172(sp)
   127ec:	00393106 	br	10cb4 <__alt_data_end+0xfc010cb4>
   127f0:	d8002b15 	stw	zero,172(sp)
   127f4:	dc001e04 	addi	r16,sp,120
   127f8:	00392e06 	br	10cb4 <__alt_data_end+0xfc010cb4>
   127fc:	0005883a 	mov	r2,zero
   12800:	003e3306 	br	120d0 <__alt_data_end+0xfc0120d0>
   12804:	dd802617 	ldw	r22,152(sp)
   12808:	003f0706 	br	12428 <__alt_data_end+0xfc012428>
   1280c:	d8c02b03 	ldbu	r3,172(sp)
   12810:	d8c02785 	stb	r3,158(sp)
   12814:	003a3506 	br	110ec <__alt_data_end+0xfc0110ec>
   12818:	d8c02b03 	ldbu	r3,172(sp)
   1281c:	d8c02785 	stb	r3,158(sp)
   12820:	003a1706 	br	11080 <__alt_data_end+0xfc011080>
   12824:	0005883a 	mov	r2,zero
   12828:	003f5d06 	br	125a0 <__alt_data_end+0xfc0125a0>
   1282c:	d8c02b03 	ldbu	r3,172(sp)
   12830:	d8c02785 	stb	r3,158(sp)
   12834:	0038f306 	br	10c04 <__alt_data_end+0xfc010c04>
   12838:	d8c02b03 	ldbu	r3,172(sp)
   1283c:	d8c02785 	stb	r3,158(sp)
   12840:	0038be06 	br	10b3c <__alt_data_end+0xfc010b3c>
   12844:	d8802344 	addi	r2,sp,141
   12848:	003f0506 	br	12460 <__alt_data_end+0xfc012460>
   1284c:	d8c02b03 	ldbu	r3,172(sp)
   12850:	d8c02785 	stb	r3,158(sp)
   12854:	00388b06 	br	10a84 <__alt_data_end+0xfc010a84>
   12858:	d8c02b03 	ldbu	r3,172(sp)
   1285c:	d8c02785 	stb	r3,158(sp)
   12860:	003ad706 	br	113c0 <__alt_data_end+0xfc0113c0>
   12864:	d9403917 	ldw	r5,228(sp)
   12868:	00800304 	movi	r2,12
   1286c:	28800015 	stw	r2,0(r5)
   12870:	00bfffc4 	movi	r2,-1
   12874:	00384306 	br	10984 <__alt_data_end+0xfc010984>
   12878:	d8c02b03 	ldbu	r3,172(sp)
   1287c:	d8c02785 	stb	r3,158(sp)
   12880:	003ab606 	br	1135c <__alt_data_end+0xfc01135c>
   12884:	d8c02b03 	ldbu	r3,172(sp)
   12888:	d8c02785 	stb	r3,158(sp)
   1288c:	003a8906 	br	112b4 <__alt_data_end+0xfc0112b4>

00012890 <_times_r>:
   12890:	2809883a 	mov	r4,r5
   12894:	00209401 	jmpi	20940 <times>

00012898 <___vfprintf_internal_r>:
   12898:	deffb804 	addi	sp,sp,-288
   1289c:	dfc04715 	stw	ra,284(sp)
   128a0:	ddc04515 	stw	r23,276(sp)
   128a4:	dd404315 	stw	r21,268(sp)
   128a8:	d9002d15 	stw	r4,180(sp)
   128ac:	282f883a 	mov	r23,r5
   128b0:	302b883a 	mov	r21,r6
   128b4:	d9c02e15 	stw	r7,184(sp)
   128b8:	df004615 	stw	fp,280(sp)
   128bc:	dd804415 	stw	r22,272(sp)
   128c0:	dd004215 	stw	r20,264(sp)
   128c4:	dcc04115 	stw	r19,260(sp)
   128c8:	dc804015 	stw	r18,256(sp)
   128cc:	dc403f15 	stw	r17,252(sp)
   128d0:	dc003e15 	stw	r16,248(sp)
   128d4:	00177d80 	call	177d8 <_localeconv_r>
   128d8:	10800017 	ldw	r2,0(r2)
   128dc:	1009883a 	mov	r4,r2
   128e0:	d8803415 	stw	r2,208(sp)
   128e4:	001053c0 	call	1053c <strlen>
   128e8:	d8803715 	stw	r2,220(sp)
   128ec:	d8802d17 	ldw	r2,180(sp)
   128f0:	10000226 	beq	r2,zero,128fc <___vfprintf_internal_r+0x64>
   128f4:	10800e17 	ldw	r2,56(r2)
   128f8:	1000fb26 	beq	r2,zero,12ce8 <___vfprintf_internal_r+0x450>
   128fc:	b880030b 	ldhu	r2,12(r23)
   12900:	10c8000c 	andi	r3,r2,8192
   12904:	1800061e 	bne	r3,zero,12920 <___vfprintf_internal_r+0x88>
   12908:	b9001917 	ldw	r4,100(r23)
   1290c:	00f7ffc4 	movi	r3,-8193
   12910:	10880014 	ori	r2,r2,8192
   12914:	20c6703a 	and	r3,r4,r3
   12918:	b880030d 	sth	r2,12(r23)
   1291c:	b8c01915 	stw	r3,100(r23)
   12920:	10c0020c 	andi	r3,r2,8
   12924:	1800c326 	beq	r3,zero,12c34 <___vfprintf_internal_r+0x39c>
   12928:	b8c00417 	ldw	r3,16(r23)
   1292c:	1800c126 	beq	r3,zero,12c34 <___vfprintf_internal_r+0x39c>
   12930:	1080068c 	andi	r2,r2,26
   12934:	00c00284 	movi	r3,10
   12938:	10c0c626 	beq	r2,r3,12c54 <___vfprintf_internal_r+0x3bc>
   1293c:	d8c00404 	addi	r3,sp,16
   12940:	050000f4 	movhi	r20,3
   12944:	d9001e04 	addi	r4,sp,120
   12948:	a52e0c84 	addi	r20,r20,-18382
   1294c:	d8c01e15 	stw	r3,120(sp)
   12950:	d8002015 	stw	zero,128(sp)
   12954:	d8001f15 	stw	zero,124(sp)
   12958:	d8003315 	stw	zero,204(sp)
   1295c:	d8003615 	stw	zero,216(sp)
   12960:	d8003815 	stw	zero,224(sp)
   12964:	1811883a 	mov	r8,r3
   12968:	d8003915 	stw	zero,228(sp)
   1296c:	d8003a15 	stw	zero,232(sp)
   12970:	d8002f15 	stw	zero,188(sp)
   12974:	d9002815 	stw	r4,160(sp)
   12978:	a8800007 	ldb	r2,0(r21)
   1297c:	10028b26 	beq	r2,zero,133ac <___vfprintf_internal_r+0xb14>
   12980:	00c00944 	movi	r3,37
   12984:	a823883a 	mov	r17,r21
   12988:	10c0021e 	bne	r2,r3,12994 <___vfprintf_internal_r+0xfc>
   1298c:	00001406 	br	129e0 <___vfprintf_internal_r+0x148>
   12990:	10c00326 	beq	r2,r3,129a0 <___vfprintf_internal_r+0x108>
   12994:	8c400044 	addi	r17,r17,1
   12998:	88800007 	ldb	r2,0(r17)
   1299c:	103ffc1e 	bne	r2,zero,12990 <__alt_data_end+0xfc012990>
   129a0:	8d61c83a 	sub	r16,r17,r21
   129a4:	80000e26 	beq	r16,zero,129e0 <___vfprintf_internal_r+0x148>
   129a8:	d8c02017 	ldw	r3,128(sp)
   129ac:	d8801f17 	ldw	r2,124(sp)
   129b0:	45400015 	stw	r21,0(r8)
   129b4:	1c07883a 	add	r3,r3,r16
   129b8:	10800044 	addi	r2,r2,1
   129bc:	d8c02015 	stw	r3,128(sp)
   129c0:	44000115 	stw	r16,4(r8)
   129c4:	d8801f15 	stw	r2,124(sp)
   129c8:	00c001c4 	movi	r3,7
   129cc:	1880a916 	blt	r3,r2,12c74 <___vfprintf_internal_r+0x3dc>
   129d0:	42000204 	addi	r8,r8,8
   129d4:	d9402f17 	ldw	r5,188(sp)
   129d8:	2c0b883a 	add	r5,r5,r16
   129dc:	d9402f15 	stw	r5,188(sp)
   129e0:	88800007 	ldb	r2,0(r17)
   129e4:	1000aa26 	beq	r2,zero,12c90 <___vfprintf_internal_r+0x3f8>
   129e8:	8d400044 	addi	r21,r17,1
   129ec:	8c400047 	ldb	r17,1(r17)
   129f0:	0021883a 	mov	r16,zero
   129f4:	00bfffc4 	movi	r2,-1
   129f8:	0025883a 	mov	r18,zero
   129fc:	dc002905 	stb	r16,164(sp)
   12a00:	d8002785 	stb	zero,158(sp)
   12a04:	d8002b05 	stb	zero,172(sp)
   12a08:	d8802a15 	stw	r2,168(sp)
   12a0c:	d8003115 	stw	zero,196(sp)
   12a10:	04c01604 	movi	r19,88
   12a14:	05800244 	movi	r22,9
   12a18:	9021883a 	mov	r16,r18
   12a1c:	4039883a 	mov	fp,r8
   12a20:	ad400044 	addi	r21,r21,1
   12a24:	88bff804 	addi	r2,r17,-32
   12a28:	98833236 	bltu	r19,r2,136f4 <___vfprintf_internal_r+0xe5c>
   12a2c:	100490ba 	slli	r2,r2,2
   12a30:	00c00074 	movhi	r3,1
   12a34:	18ca9104 	addi	r3,r3,10820
   12a38:	10c5883a 	add	r2,r2,r3
   12a3c:	10800017 	ldw	r2,0(r2)
   12a40:	1000683a 	jmp	r2
   12a44:	000135ec 	andhi	zero,zero,1239
   12a48:	000136f4 	movhi	zero,1243
   12a4c:	000136f4 	movhi	zero,1243
   12a50:	0001360c 	andi	zero,zero,1240
   12a54:	000136f4 	movhi	zero,1243
   12a58:	000136f4 	movhi	zero,1243
   12a5c:	000136f4 	movhi	zero,1243
   12a60:	000136f4 	movhi	zero,1243
   12a64:	000136f4 	movhi	zero,1243
   12a68:	000136f4 	movhi	zero,1243
   12a6c:	00012cf4 	movhi	zero,1203
   12a70:	000134fc 	xorhi	zero,zero,1235
   12a74:	000136f4 	movhi	zero,1243
   12a78:	00012bb8 	rdprs	zero,zero,1198
   12a7c:	00012d18 	cmpnei	zero,zero,1204
   12a80:	000136f4 	movhi	zero,1243
   12a84:	00012d68 	cmpgeui	zero,zero,1205
   12a88:	00012d74 	movhi	zero,1205
   12a8c:	00012d74 	movhi	zero,1205
   12a90:	00012d74 	movhi	zero,1205
   12a94:	00012d74 	movhi	zero,1205
   12a98:	00012d74 	movhi	zero,1205
   12a9c:	00012d74 	movhi	zero,1205
   12aa0:	00012d74 	movhi	zero,1205
   12aa4:	00012d74 	movhi	zero,1205
   12aa8:	00012d74 	movhi	zero,1205
   12aac:	000136f4 	movhi	zero,1243
   12ab0:	000136f4 	movhi	zero,1243
   12ab4:	000136f4 	movhi	zero,1243
   12ab8:	000136f4 	movhi	zero,1243
   12abc:	000136f4 	movhi	zero,1243
   12ac0:	000136f4 	movhi	zero,1243
   12ac4:	000136f4 	movhi	zero,1243
   12ac8:	000136f4 	movhi	zero,1243
   12acc:	000136f4 	movhi	zero,1243
   12ad0:	000136f4 	movhi	zero,1243
   12ad4:	00012db0 	cmpltui	zero,zero,1206
   12ad8:	00012e78 	rdprs	zero,zero,1209
   12adc:	000136f4 	movhi	zero,1243
   12ae0:	00012e78 	rdprs	zero,zero,1209
   12ae4:	000136f4 	movhi	zero,1243
   12ae8:	000136f4 	movhi	zero,1243
   12aec:	000136f4 	movhi	zero,1243
   12af0:	000136f4 	movhi	zero,1243
   12af4:	00012f24 	muli	zero,zero,1212
   12af8:	000136f4 	movhi	zero,1243
   12afc:	000136f4 	movhi	zero,1243
   12b00:	00012f30 	cmpltui	zero,zero,1212
   12b04:	000136f4 	movhi	zero,1243
   12b08:	000136f4 	movhi	zero,1243
   12b0c:	000136f4 	movhi	zero,1243
   12b10:	000136f4 	movhi	zero,1243
   12b14:	000136f4 	movhi	zero,1243
   12b18:	000133b4 	movhi	zero,1230
   12b1c:	000136f4 	movhi	zero,1243
   12b20:	000136f4 	movhi	zero,1243
   12b24:	00013420 	cmpeqi	zero,zero,1232
   12b28:	000136f4 	movhi	zero,1243
   12b2c:	000136f4 	movhi	zero,1243
   12b30:	000136f4 	movhi	zero,1243
   12b34:	000136f4 	movhi	zero,1243
   12b38:	000136f4 	movhi	zero,1243
   12b3c:	000136f4 	movhi	zero,1243
   12b40:	000136f4 	movhi	zero,1243
   12b44:	000136f4 	movhi	zero,1243
   12b48:	000136f4 	movhi	zero,1243
   12b4c:	000136f4 	movhi	zero,1243
   12b50:	00013698 	cmpnei	zero,zero,1242
   12b54:	00013618 	cmpnei	zero,zero,1240
   12b58:	00012e78 	rdprs	zero,zero,1209
   12b5c:	00012e78 	rdprs	zero,zero,1209
   12b60:	00012e78 	rdprs	zero,zero,1209
   12b64:	00013638 	rdprs	zero,zero,1240
   12b68:	00013618 	cmpnei	zero,zero,1240
   12b6c:	000136f4 	movhi	zero,1243
   12b70:	000136f4 	movhi	zero,1243
   12b74:	00013644 	movi	zero,1241
   12b78:	000136f4 	movhi	zero,1243
   12b7c:	00013658 	cmpnei	zero,zero,1241
   12b80:	000134dc 	xori	zero,zero,1235
   12b84:	00012bc4 	movi	zero,1199
   12b88:	00013514 	movui	zero,1236
   12b8c:	000136f4 	movhi	zero,1243
   12b90:	00013520 	cmpeqi	zero,zero,1236
   12b94:	000136f4 	movhi	zero,1243
   12b98:	00013584 	movi	zero,1238
   12b9c:	000136f4 	movhi	zero,1243
   12ba0:	000136f4 	movhi	zero,1243
   12ba4:	000135a4 	muli	zero,zero,1238
   12ba8:	d8c03117 	ldw	r3,196(sp)
   12bac:	d8802e15 	stw	r2,184(sp)
   12bb0:	00c7c83a 	sub	r3,zero,r3
   12bb4:	d8c03115 	stw	r3,196(sp)
   12bb8:	84000114 	ori	r16,r16,4
   12bbc:	ac400007 	ldb	r17,0(r21)
   12bc0:	003f9706 	br	12a20 <__alt_data_end+0xfc012a20>
   12bc4:	00800c04 	movi	r2,48
   12bc8:	d8802705 	stb	r2,156(sp)
   12bcc:	00801e04 	movi	r2,120
   12bd0:	d8802745 	stb	r2,157(sp)
   12bd4:	d9002a17 	ldw	r4,168(sp)
   12bd8:	d8802e17 	ldw	r2,184(sp)
   12bdc:	d8002785 	stb	zero,158(sp)
   12be0:	e011883a 	mov	r8,fp
   12be4:	10c00104 	addi	r3,r2,4
   12be8:	14c00017 	ldw	r19,0(r2)
   12bec:	002d883a 	mov	r22,zero
   12bf0:	80800094 	ori	r2,r16,2
   12bf4:	2002ca16 	blt	r4,zero,13720 <___vfprintf_internal_r+0xe88>
   12bf8:	00bfdfc4 	movi	r2,-129
   12bfc:	80a4703a 	and	r18,r16,r2
   12c00:	d8c02e15 	stw	r3,184(sp)
   12c04:	94800094 	ori	r18,r18,2
   12c08:	9802b41e 	bne	r19,zero,136dc <___vfprintf_internal_r+0xe44>
   12c0c:	014000f4 	movhi	r5,3
   12c10:	296dfd04 	addi	r5,r5,-18444
   12c14:	d9403915 	stw	r5,228(sp)
   12c18:	04401e04 	movi	r17,120
   12c1c:	d8802a17 	ldw	r2,168(sp)
   12c20:	0039883a 	mov	fp,zero
   12c24:	1001fa26 	beq	r2,zero,13410 <___vfprintf_internal_r+0xb78>
   12c28:	0027883a 	mov	r19,zero
   12c2c:	002d883a 	mov	r22,zero
   12c30:	00021906 	br	13498 <___vfprintf_internal_r+0xc00>
   12c34:	d9002d17 	ldw	r4,180(sp)
   12c38:	b80b883a 	mov	r5,r23
   12c3c:	0014c4c0 	call	14c4c <__swsetup_r>
   12c40:	1005dc1e 	bne	r2,zero,143b4 <___vfprintf_internal_r+0x1b1c>
   12c44:	b880030b 	ldhu	r2,12(r23)
   12c48:	00c00284 	movi	r3,10
   12c4c:	1080068c 	andi	r2,r2,26
   12c50:	10ff3a1e 	bne	r2,r3,1293c <__alt_data_end+0xfc01293c>
   12c54:	b880038f 	ldh	r2,14(r23)
   12c58:	103f3816 	blt	r2,zero,1293c <__alt_data_end+0xfc01293c>
   12c5c:	d9c02e17 	ldw	r7,184(sp)
   12c60:	d9002d17 	ldw	r4,180(sp)
   12c64:	a80d883a 	mov	r6,r21
   12c68:	b80b883a 	mov	r5,r23
   12c6c:	0014b900 	call	14b90 <__sbprintf>
   12c70:	00001106 	br	12cb8 <___vfprintf_internal_r+0x420>
   12c74:	d9002d17 	ldw	r4,180(sp)
   12c78:	d9801e04 	addi	r6,sp,120
   12c7c:	b80b883a 	mov	r5,r23
   12c80:	001aba40 	call	1aba4 <__sprint_r>
   12c84:	1000081e 	bne	r2,zero,12ca8 <___vfprintf_internal_r+0x410>
   12c88:	da000404 	addi	r8,sp,16
   12c8c:	003f5106 	br	129d4 <__alt_data_end+0xfc0129d4>
   12c90:	d8802017 	ldw	r2,128(sp)
   12c94:	10000426 	beq	r2,zero,12ca8 <___vfprintf_internal_r+0x410>
   12c98:	d9002d17 	ldw	r4,180(sp)
   12c9c:	d9801e04 	addi	r6,sp,120
   12ca0:	b80b883a 	mov	r5,r23
   12ca4:	001aba40 	call	1aba4 <__sprint_r>
   12ca8:	b880030b 	ldhu	r2,12(r23)
   12cac:	1080100c 	andi	r2,r2,64
   12cb0:	1005c01e 	bne	r2,zero,143b4 <___vfprintf_internal_r+0x1b1c>
   12cb4:	d8802f17 	ldw	r2,188(sp)
   12cb8:	dfc04717 	ldw	ra,284(sp)
   12cbc:	df004617 	ldw	fp,280(sp)
   12cc0:	ddc04517 	ldw	r23,276(sp)
   12cc4:	dd804417 	ldw	r22,272(sp)
   12cc8:	dd404317 	ldw	r21,268(sp)
   12ccc:	dd004217 	ldw	r20,264(sp)
   12cd0:	dcc04117 	ldw	r19,260(sp)
   12cd4:	dc804017 	ldw	r18,256(sp)
   12cd8:	dc403f17 	ldw	r17,252(sp)
   12cdc:	dc003e17 	ldw	r16,248(sp)
   12ce0:	dec04804 	addi	sp,sp,288
   12ce4:	f800283a 	ret
   12ce8:	d9002d17 	ldw	r4,180(sp)
   12cec:	0016c580 	call	16c58 <__sinit>
   12cf0:	003f0206 	br	128fc <__alt_data_end+0xfc0128fc>
   12cf4:	d9002e17 	ldw	r4,184(sp)
   12cf8:	d9402e17 	ldw	r5,184(sp)
   12cfc:	21000017 	ldw	r4,0(r4)
   12d00:	28800104 	addi	r2,r5,4
   12d04:	d9003115 	stw	r4,196(sp)
   12d08:	203fa716 	blt	r4,zero,12ba8 <__alt_data_end+0xfc012ba8>
   12d0c:	d8802e15 	stw	r2,184(sp)
   12d10:	ac400007 	ldb	r17,0(r21)
   12d14:	003f4206 	br	12a20 <__alt_data_end+0xfc012a20>
   12d18:	ac400007 	ldb	r17,0(r21)
   12d1c:	01000a84 	movi	r4,42
   12d20:	a8c00044 	addi	r3,r21,1
   12d24:	89075826 	beq	r17,r4,14a88 <___vfprintf_internal_r+0x21f0>
   12d28:	8cbff404 	addi	r18,r17,-48
   12d2c:	b486ae36 	bltu	r22,r18,147e8 <___vfprintf_internal_r+0x1f50>
   12d30:	0009883a 	mov	r4,zero
   12d34:	1823883a 	mov	r17,r3
   12d38:	01400284 	movi	r5,10
   12d3c:	000d8d40 	call	d8d4 <__mulsi3>
   12d40:	88c00007 	ldb	r3,0(r17)
   12d44:	1489883a 	add	r4,r2,r18
   12d48:	8d400044 	addi	r21,r17,1
   12d4c:	1cbff404 	addi	r18,r3,-48
   12d50:	a823883a 	mov	r17,r21
   12d54:	b4bff82e 	bgeu	r22,r18,12d38 <__alt_data_end+0xfc012d38>
   12d58:	1823883a 	mov	r17,r3
   12d5c:	2005f616 	blt	r4,zero,14538 <___vfprintf_internal_r+0x1ca0>
   12d60:	d9002a15 	stw	r4,168(sp)
   12d64:	003f2f06 	br	12a24 <__alt_data_end+0xfc012a24>
   12d68:	84002014 	ori	r16,r16,128
   12d6c:	ac400007 	ldb	r17,0(r21)
   12d70:	003f2b06 	br	12a20 <__alt_data_end+0xfc012a20>
   12d74:	8cbff404 	addi	r18,r17,-48
   12d78:	d8003115 	stw	zero,196(sp)
   12d7c:	0009883a 	mov	r4,zero
   12d80:	a823883a 	mov	r17,r21
   12d84:	01400284 	movi	r5,10
   12d88:	000d8d40 	call	d8d4 <__mulsi3>
   12d8c:	88c00007 	ldb	r3,0(r17)
   12d90:	9089883a 	add	r4,r18,r2
   12d94:	ad400044 	addi	r21,r21,1
   12d98:	1cbff404 	addi	r18,r3,-48
   12d9c:	a823883a 	mov	r17,r21
   12da0:	b4bff82e 	bgeu	r22,r18,12d84 <__alt_data_end+0xfc012d84>
   12da4:	1823883a 	mov	r17,r3
   12da8:	d9003115 	stw	r4,196(sp)
   12dac:	003f1d06 	br	12a24 <__alt_data_end+0xfc012a24>
   12db0:	8025883a 	mov	r18,r16
   12db4:	dc002903 	ldbu	r16,164(sp)
   12db8:	e011883a 	mov	r8,fp
   12dbc:	84003fcc 	andi	r16,r16,255
   12dc0:	8007531e 	bne	r16,zero,14b10 <___vfprintf_internal_r+0x2278>
   12dc4:	94800414 	ori	r18,r18,16
   12dc8:	9080080c 	andi	r2,r18,32
   12dcc:	1003a326 	beq	r2,zero,13c5c <___vfprintf_internal_r+0x13c4>
   12dd0:	d9002e17 	ldw	r4,184(sp)
   12dd4:	20800117 	ldw	r2,4(r4)
   12dd8:	24c00017 	ldw	r19,0(r4)
   12ddc:	21000204 	addi	r4,r4,8
   12de0:	d9002e15 	stw	r4,184(sp)
   12de4:	102d883a 	mov	r22,r2
   12de8:	10047316 	blt	r2,zero,13fb8 <___vfprintf_internal_r+0x1720>
   12dec:	d9002a17 	ldw	r4,168(sp)
   12df0:	df002783 	ldbu	fp,158(sp)
   12df4:	2003e416 	blt	r4,zero,13d88 <___vfprintf_internal_r+0x14f0>
   12df8:	00ffdfc4 	movi	r3,-129
   12dfc:	9d84b03a 	or	r2,r19,r22
   12e00:	90e4703a 	and	r18,r18,r3
   12e04:	10018026 	beq	r2,zero,13408 <___vfprintf_internal_r+0xb70>
   12e08:	b003ab26 	beq	r22,zero,13cb8 <___vfprintf_internal_r+0x1420>
   12e0c:	dc402915 	stw	r17,164(sp)
   12e10:	dc001e04 	addi	r16,sp,120
   12e14:	b023883a 	mov	r17,r22
   12e18:	402d883a 	mov	r22,r8
   12e1c:	9809883a 	mov	r4,r19
   12e20:	880b883a 	mov	r5,r17
   12e24:	01800284 	movi	r6,10
   12e28:	000f883a 	mov	r7,zero
   12e2c:	001d0e80 	call	1d0e8 <__umoddi3>
   12e30:	10800c04 	addi	r2,r2,48
   12e34:	843fffc4 	addi	r16,r16,-1
   12e38:	9809883a 	mov	r4,r19
   12e3c:	880b883a 	mov	r5,r17
   12e40:	80800005 	stb	r2,0(r16)
   12e44:	01800284 	movi	r6,10
   12e48:	000f883a 	mov	r7,zero
   12e4c:	001caec0 	call	1caec <__udivdi3>
   12e50:	1027883a 	mov	r19,r2
   12e54:	10c4b03a 	or	r2,r2,r3
   12e58:	1823883a 	mov	r17,r3
   12e5c:	103fef1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   12e60:	d8c02817 	ldw	r3,160(sp)
   12e64:	dc402917 	ldw	r17,164(sp)
   12e68:	b011883a 	mov	r8,r22
   12e6c:	1c07c83a 	sub	r3,r3,r16
   12e70:	d8c02b15 	stw	r3,172(sp)
   12e74:	00005f06 	br	12ff4 <___vfprintf_internal_r+0x75c>
   12e78:	8025883a 	mov	r18,r16
   12e7c:	dc002903 	ldbu	r16,164(sp)
   12e80:	e011883a 	mov	r8,fp
   12e84:	84003fcc 	andi	r16,r16,255
   12e88:	80071e1e 	bne	r16,zero,14b04 <___vfprintf_internal_r+0x226c>
   12e8c:	9080020c 	andi	r2,r18,8
   12e90:	1004af26 	beq	r2,zero,14150 <___vfprintf_internal_r+0x18b8>
   12e94:	d9002e17 	ldw	r4,184(sp)
   12e98:	d9402e17 	ldw	r5,184(sp)
   12e9c:	d8802e17 	ldw	r2,184(sp)
   12ea0:	21000017 	ldw	r4,0(r4)
   12ea4:	29400117 	ldw	r5,4(r5)
   12ea8:	10800204 	addi	r2,r2,8
   12eac:	d9003615 	stw	r4,216(sp)
   12eb0:	d9403815 	stw	r5,224(sp)
   12eb4:	d8802e15 	stw	r2,184(sp)
   12eb8:	d9003617 	ldw	r4,216(sp)
   12ebc:	d9403817 	ldw	r5,224(sp)
   12ec0:	da003d15 	stw	r8,244(sp)
   12ec4:	04000044 	movi	r16,1
   12ec8:	00193880 	call	19388 <__fpclassifyd>
   12ecc:	da003d17 	ldw	r8,244(sp)
   12ed0:	1404441e 	bne	r2,r16,13fe4 <___vfprintf_internal_r+0x174c>
   12ed4:	d9003617 	ldw	r4,216(sp)
   12ed8:	d9403817 	ldw	r5,224(sp)
   12edc:	000d883a 	mov	r6,zero
   12ee0:	000f883a 	mov	r7,zero
   12ee4:	001ea8c0 	call	1ea8c <__ledf2>
   12ee8:	da003d17 	ldw	r8,244(sp)
   12eec:	1005e316 	blt	r2,zero,1467c <___vfprintf_internal_r+0x1de4>
   12ef0:	df002783 	ldbu	fp,158(sp)
   12ef4:	008011c4 	movi	r2,71
   12ef8:	1445580e 	bge	r2,r17,1445c <___vfprintf_internal_r+0x1bc4>
   12efc:	040000f4 	movhi	r16,3
   12f00:	842df504 	addi	r16,r16,-18476
   12f04:	00c000c4 	movi	r3,3
   12f08:	00bfdfc4 	movi	r2,-129
   12f0c:	d8c02915 	stw	r3,164(sp)
   12f10:	90a4703a 	and	r18,r18,r2
   12f14:	d8c02b15 	stw	r3,172(sp)
   12f18:	d8002a15 	stw	zero,168(sp)
   12f1c:	d8003215 	stw	zero,200(sp)
   12f20:	00003a06 	br	1300c <___vfprintf_internal_r+0x774>
   12f24:	84000214 	ori	r16,r16,8
   12f28:	ac400007 	ldb	r17,0(r21)
   12f2c:	003ebc06 	br	12a20 <__alt_data_end+0xfc012a20>
   12f30:	8025883a 	mov	r18,r16
   12f34:	dc002903 	ldbu	r16,164(sp)
   12f38:	e011883a 	mov	r8,fp
   12f3c:	84003fcc 	andi	r16,r16,255
   12f40:	8007001e 	bne	r16,zero,14b44 <___vfprintf_internal_r+0x22ac>
   12f44:	94800414 	ori	r18,r18,16
   12f48:	9080080c 	andi	r2,r18,32
   12f4c:	1002fa26 	beq	r2,zero,13b38 <___vfprintf_internal_r+0x12a0>
   12f50:	d9002e17 	ldw	r4,184(sp)
   12f54:	d9402a17 	ldw	r5,168(sp)
   12f58:	d8002785 	stb	zero,158(sp)
   12f5c:	20800204 	addi	r2,r4,8
   12f60:	24c00017 	ldw	r19,0(r4)
   12f64:	25800117 	ldw	r22,4(r4)
   12f68:	2804b116 	blt	r5,zero,14230 <___vfprintf_internal_r+0x1998>
   12f6c:	013fdfc4 	movi	r4,-129
   12f70:	9d86b03a 	or	r3,r19,r22
   12f74:	d8802e15 	stw	r2,184(sp)
   12f78:	9124703a 	and	r18,r18,r4
   12f7c:	1802fb1e 	bne	r3,zero,13b6c <___vfprintf_internal_r+0x12d4>
   12f80:	d8c02a17 	ldw	r3,168(sp)
   12f84:	0039883a 	mov	fp,zero
   12f88:	1805e526 	beq	r3,zero,14720 <___vfprintf_internal_r+0x1e88>
   12f8c:	0027883a 	mov	r19,zero
   12f90:	002d883a 	mov	r22,zero
   12f94:	dc001e04 	addi	r16,sp,120
   12f98:	9806d0fa 	srli	r3,r19,3
   12f9c:	b008977a 	slli	r4,r22,29
   12fa0:	b02cd0fa 	srli	r22,r22,3
   12fa4:	9cc001cc 	andi	r19,r19,7
   12fa8:	98800c04 	addi	r2,r19,48
   12fac:	843fffc4 	addi	r16,r16,-1
   12fb0:	20e6b03a 	or	r19,r4,r3
   12fb4:	80800005 	stb	r2,0(r16)
   12fb8:	9d86b03a 	or	r3,r19,r22
   12fbc:	183ff61e 	bne	r3,zero,12f98 <__alt_data_end+0xfc012f98>
   12fc0:	90c0004c 	andi	r3,r18,1
   12fc4:	18014126 	beq	r3,zero,134cc <___vfprintf_internal_r+0xc34>
   12fc8:	10803fcc 	andi	r2,r2,255
   12fcc:	1080201c 	xori	r2,r2,128
   12fd0:	10bfe004 	addi	r2,r2,-128
   12fd4:	00c00c04 	movi	r3,48
   12fd8:	10c13c26 	beq	r2,r3,134cc <___vfprintf_internal_r+0xc34>
   12fdc:	80ffffc5 	stb	r3,-1(r16)
   12fe0:	d8c02817 	ldw	r3,160(sp)
   12fe4:	80bfffc4 	addi	r2,r16,-1
   12fe8:	1021883a 	mov	r16,r2
   12fec:	1887c83a 	sub	r3,r3,r2
   12ff0:	d8c02b15 	stw	r3,172(sp)
   12ff4:	d8802b17 	ldw	r2,172(sp)
   12ff8:	d9002a17 	ldw	r4,168(sp)
   12ffc:	1100010e 	bge	r2,r4,13004 <___vfprintf_internal_r+0x76c>
   13000:	2005883a 	mov	r2,r4
   13004:	d8802915 	stw	r2,164(sp)
   13008:	d8003215 	stw	zero,200(sp)
   1300c:	e7003fcc 	andi	fp,fp,255
   13010:	e700201c 	xori	fp,fp,128
   13014:	e73fe004 	addi	fp,fp,-128
   13018:	e0000326 	beq	fp,zero,13028 <___vfprintf_internal_r+0x790>
   1301c:	d8c02917 	ldw	r3,164(sp)
   13020:	18c00044 	addi	r3,r3,1
   13024:	d8c02915 	stw	r3,164(sp)
   13028:	90c0008c 	andi	r3,r18,2
   1302c:	d8c02c15 	stw	r3,176(sp)
   13030:	18000326 	beq	r3,zero,13040 <___vfprintf_internal_r+0x7a8>
   13034:	d8c02917 	ldw	r3,164(sp)
   13038:	18c00084 	addi	r3,r3,2
   1303c:	d8c02915 	stw	r3,164(sp)
   13040:	90c0210c 	andi	r3,r18,132
   13044:	d8c03015 	stw	r3,192(sp)
   13048:	1801c51e 	bne	r3,zero,13760 <___vfprintf_internal_r+0xec8>
   1304c:	d9003117 	ldw	r4,196(sp)
   13050:	d8c02917 	ldw	r3,164(sp)
   13054:	20e7c83a 	sub	r19,r4,r3
   13058:	04c1c10e 	bge	zero,r19,13760 <___vfprintf_internal_r+0xec8>
   1305c:	02400404 	movi	r9,16
   13060:	d8c02017 	ldw	r3,128(sp)
   13064:	d8801f17 	ldw	r2,124(sp)
   13068:	4cc52f0e 	bge	r9,r19,14528 <___vfprintf_internal_r+0x1c90>
   1306c:	014000f4 	movhi	r5,3
   13070:	296e1084 	addi	r5,r5,-18366
   13074:	dc403b15 	stw	r17,236(sp)
   13078:	d9403515 	stw	r5,212(sp)
   1307c:	9823883a 	mov	r17,r19
   13080:	482d883a 	mov	r22,r9
   13084:	9027883a 	mov	r19,r18
   13088:	070001c4 	movi	fp,7
   1308c:	8025883a 	mov	r18,r16
   13090:	dc002d17 	ldw	r16,180(sp)
   13094:	00000306 	br	130a4 <___vfprintf_internal_r+0x80c>
   13098:	8c7ffc04 	addi	r17,r17,-16
   1309c:	42000204 	addi	r8,r8,8
   130a0:	b440130e 	bge	r22,r17,130f0 <___vfprintf_internal_r+0x858>
   130a4:	010000f4 	movhi	r4,3
   130a8:	18c00404 	addi	r3,r3,16
   130ac:	10800044 	addi	r2,r2,1
   130b0:	212e1084 	addi	r4,r4,-18366
   130b4:	41000015 	stw	r4,0(r8)
   130b8:	45800115 	stw	r22,4(r8)
   130bc:	d8c02015 	stw	r3,128(sp)
   130c0:	d8801f15 	stw	r2,124(sp)
   130c4:	e0bff40e 	bge	fp,r2,13098 <__alt_data_end+0xfc013098>
   130c8:	d9801e04 	addi	r6,sp,120
   130cc:	b80b883a 	mov	r5,r23
   130d0:	8009883a 	mov	r4,r16
   130d4:	001aba40 	call	1aba4 <__sprint_r>
   130d8:	103ef31e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   130dc:	8c7ffc04 	addi	r17,r17,-16
   130e0:	d8c02017 	ldw	r3,128(sp)
   130e4:	d8801f17 	ldw	r2,124(sp)
   130e8:	da000404 	addi	r8,sp,16
   130ec:	b47fed16 	blt	r22,r17,130a4 <__alt_data_end+0xfc0130a4>
   130f0:	9021883a 	mov	r16,r18
   130f4:	9825883a 	mov	r18,r19
   130f8:	8827883a 	mov	r19,r17
   130fc:	dc403b17 	ldw	r17,236(sp)
   13100:	d9403517 	ldw	r5,212(sp)
   13104:	98c7883a 	add	r3,r19,r3
   13108:	10800044 	addi	r2,r2,1
   1310c:	41400015 	stw	r5,0(r8)
   13110:	44c00115 	stw	r19,4(r8)
   13114:	d8c02015 	stw	r3,128(sp)
   13118:	d8801f15 	stw	r2,124(sp)
   1311c:	010001c4 	movi	r4,7
   13120:	2082c516 	blt	r4,r2,13c38 <___vfprintf_internal_r+0x13a0>
   13124:	df002787 	ldb	fp,158(sp)
   13128:	42000204 	addi	r8,r8,8
   1312c:	e0000c26 	beq	fp,zero,13160 <___vfprintf_internal_r+0x8c8>
   13130:	d8801f17 	ldw	r2,124(sp)
   13134:	d9002784 	addi	r4,sp,158
   13138:	18c00044 	addi	r3,r3,1
   1313c:	10800044 	addi	r2,r2,1
   13140:	41000015 	stw	r4,0(r8)
   13144:	01000044 	movi	r4,1
   13148:	41000115 	stw	r4,4(r8)
   1314c:	d8c02015 	stw	r3,128(sp)
   13150:	d8801f15 	stw	r2,124(sp)
   13154:	010001c4 	movi	r4,7
   13158:	20825e16 	blt	r4,r2,13ad4 <___vfprintf_internal_r+0x123c>
   1315c:	42000204 	addi	r8,r8,8
   13160:	d8802c17 	ldw	r2,176(sp)
   13164:	10000c26 	beq	r2,zero,13198 <___vfprintf_internal_r+0x900>
   13168:	d8801f17 	ldw	r2,124(sp)
   1316c:	d9002704 	addi	r4,sp,156
   13170:	18c00084 	addi	r3,r3,2
   13174:	10800044 	addi	r2,r2,1
   13178:	41000015 	stw	r4,0(r8)
   1317c:	01000084 	movi	r4,2
   13180:	41000115 	stw	r4,4(r8)
   13184:	d8c02015 	stw	r3,128(sp)
   13188:	d8801f15 	stw	r2,124(sp)
   1318c:	010001c4 	movi	r4,7
   13190:	20825816 	blt	r4,r2,13af4 <___vfprintf_internal_r+0x125c>
   13194:	42000204 	addi	r8,r8,8
   13198:	d9003017 	ldw	r4,192(sp)
   1319c:	00802004 	movi	r2,128
   131a0:	2081bb26 	beq	r4,r2,13890 <___vfprintf_internal_r+0xff8>
   131a4:	d9402a17 	ldw	r5,168(sp)
   131a8:	d8802b17 	ldw	r2,172(sp)
   131ac:	28adc83a 	sub	r22,r5,r2
   131b0:	0580310e 	bge	zero,r22,13278 <___vfprintf_internal_r+0x9e0>
   131b4:	07000404 	movi	fp,16
   131b8:	d8801f17 	ldw	r2,124(sp)
   131bc:	e584360e 	bge	fp,r22,14298 <___vfprintf_internal_r+0x1a00>
   131c0:	014000f4 	movhi	r5,3
   131c4:	296e0c84 	addi	r5,r5,-18382
   131c8:	dc402a15 	stw	r17,168(sp)
   131cc:	d9402c15 	stw	r5,176(sp)
   131d0:	b023883a 	mov	r17,r22
   131d4:	04c001c4 	movi	r19,7
   131d8:	a82d883a 	mov	r22,r21
   131dc:	902b883a 	mov	r21,r18
   131e0:	8025883a 	mov	r18,r16
   131e4:	dc002d17 	ldw	r16,180(sp)
   131e8:	00000306 	br	131f8 <___vfprintf_internal_r+0x960>
   131ec:	8c7ffc04 	addi	r17,r17,-16
   131f0:	42000204 	addi	r8,r8,8
   131f4:	e440110e 	bge	fp,r17,1323c <___vfprintf_internal_r+0x9a4>
   131f8:	18c00404 	addi	r3,r3,16
   131fc:	10800044 	addi	r2,r2,1
   13200:	45000015 	stw	r20,0(r8)
   13204:	47000115 	stw	fp,4(r8)
   13208:	d8c02015 	stw	r3,128(sp)
   1320c:	d8801f15 	stw	r2,124(sp)
   13210:	98bff60e 	bge	r19,r2,131ec <__alt_data_end+0xfc0131ec>
   13214:	d9801e04 	addi	r6,sp,120
   13218:	b80b883a 	mov	r5,r23
   1321c:	8009883a 	mov	r4,r16
   13220:	001aba40 	call	1aba4 <__sprint_r>
   13224:	103ea01e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13228:	8c7ffc04 	addi	r17,r17,-16
   1322c:	d8c02017 	ldw	r3,128(sp)
   13230:	d8801f17 	ldw	r2,124(sp)
   13234:	da000404 	addi	r8,sp,16
   13238:	e47fef16 	blt	fp,r17,131f8 <__alt_data_end+0xfc0131f8>
   1323c:	9021883a 	mov	r16,r18
   13240:	a825883a 	mov	r18,r21
   13244:	b02b883a 	mov	r21,r22
   13248:	882d883a 	mov	r22,r17
   1324c:	dc402a17 	ldw	r17,168(sp)
   13250:	d9002c17 	ldw	r4,176(sp)
   13254:	1d87883a 	add	r3,r3,r22
   13258:	10800044 	addi	r2,r2,1
   1325c:	41000015 	stw	r4,0(r8)
   13260:	45800115 	stw	r22,4(r8)
   13264:	d8c02015 	stw	r3,128(sp)
   13268:	d8801f15 	stw	r2,124(sp)
   1326c:	010001c4 	movi	r4,7
   13270:	20821016 	blt	r4,r2,13ab4 <___vfprintf_internal_r+0x121c>
   13274:	42000204 	addi	r8,r8,8
   13278:	9080400c 	andi	r2,r18,256
   1327c:	10013a1e 	bne	r2,zero,13768 <___vfprintf_internal_r+0xed0>
   13280:	d9402b17 	ldw	r5,172(sp)
   13284:	d8801f17 	ldw	r2,124(sp)
   13288:	44000015 	stw	r16,0(r8)
   1328c:	1947883a 	add	r3,r3,r5
   13290:	10800044 	addi	r2,r2,1
   13294:	41400115 	stw	r5,4(r8)
   13298:	d8c02015 	stw	r3,128(sp)
   1329c:	d8801f15 	stw	r2,124(sp)
   132a0:	010001c4 	movi	r4,7
   132a4:	2081f516 	blt	r4,r2,13a7c <___vfprintf_internal_r+0x11e4>
   132a8:	42000204 	addi	r8,r8,8
   132ac:	9480010c 	andi	r18,r18,4
   132b0:	90003226 	beq	r18,zero,1337c <___vfprintf_internal_r+0xae4>
   132b4:	d9403117 	ldw	r5,196(sp)
   132b8:	d8802917 	ldw	r2,164(sp)
   132bc:	28a1c83a 	sub	r16,r5,r2
   132c0:	04002e0e 	bge	zero,r16,1337c <___vfprintf_internal_r+0xae4>
   132c4:	04400404 	movi	r17,16
   132c8:	d8801f17 	ldw	r2,124(sp)
   132cc:	8c04c40e 	bge	r17,r16,145e0 <___vfprintf_internal_r+0x1d48>
   132d0:	014000f4 	movhi	r5,3
   132d4:	296e1084 	addi	r5,r5,-18366
   132d8:	d9403515 	stw	r5,212(sp)
   132dc:	048001c4 	movi	r18,7
   132e0:	dcc02d17 	ldw	r19,180(sp)
   132e4:	00000306 	br	132f4 <___vfprintf_internal_r+0xa5c>
   132e8:	843ffc04 	addi	r16,r16,-16
   132ec:	42000204 	addi	r8,r8,8
   132f0:	8c00130e 	bge	r17,r16,13340 <___vfprintf_internal_r+0xaa8>
   132f4:	010000f4 	movhi	r4,3
   132f8:	18c00404 	addi	r3,r3,16
   132fc:	10800044 	addi	r2,r2,1
   13300:	212e1084 	addi	r4,r4,-18366
   13304:	41000015 	stw	r4,0(r8)
   13308:	44400115 	stw	r17,4(r8)
   1330c:	d8c02015 	stw	r3,128(sp)
   13310:	d8801f15 	stw	r2,124(sp)
   13314:	90bff40e 	bge	r18,r2,132e8 <__alt_data_end+0xfc0132e8>
   13318:	d9801e04 	addi	r6,sp,120
   1331c:	b80b883a 	mov	r5,r23
   13320:	9809883a 	mov	r4,r19
   13324:	001aba40 	call	1aba4 <__sprint_r>
   13328:	103e5f1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   1332c:	843ffc04 	addi	r16,r16,-16
   13330:	d8c02017 	ldw	r3,128(sp)
   13334:	d8801f17 	ldw	r2,124(sp)
   13338:	da000404 	addi	r8,sp,16
   1333c:	8c3fed16 	blt	r17,r16,132f4 <__alt_data_end+0xfc0132f4>
   13340:	d9403517 	ldw	r5,212(sp)
   13344:	1c07883a 	add	r3,r3,r16
   13348:	10800044 	addi	r2,r2,1
   1334c:	41400015 	stw	r5,0(r8)
   13350:	44000115 	stw	r16,4(r8)
   13354:	d8c02015 	stw	r3,128(sp)
   13358:	d8801f15 	stw	r2,124(sp)
   1335c:	010001c4 	movi	r4,7
   13360:	2080060e 	bge	r4,r2,1337c <___vfprintf_internal_r+0xae4>
   13364:	d9002d17 	ldw	r4,180(sp)
   13368:	d9801e04 	addi	r6,sp,120
   1336c:	b80b883a 	mov	r5,r23
   13370:	001aba40 	call	1aba4 <__sprint_r>
   13374:	103e4c1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13378:	d8c02017 	ldw	r3,128(sp)
   1337c:	d8803117 	ldw	r2,196(sp)
   13380:	d9002917 	ldw	r4,164(sp)
   13384:	1100010e 	bge	r2,r4,1338c <___vfprintf_internal_r+0xaf4>
   13388:	2005883a 	mov	r2,r4
   1338c:	d9402f17 	ldw	r5,188(sp)
   13390:	288b883a 	add	r5,r5,r2
   13394:	d9402f15 	stw	r5,188(sp)
   13398:	1801c01e 	bne	r3,zero,13a9c <___vfprintf_internal_r+0x1204>
   1339c:	a8800007 	ldb	r2,0(r21)
   133a0:	d8001f15 	stw	zero,124(sp)
   133a4:	da000404 	addi	r8,sp,16
   133a8:	103d751e 	bne	r2,zero,12980 <__alt_data_end+0xfc012980>
   133ac:	a823883a 	mov	r17,r21
   133b0:	003d8b06 	br	129e0 <__alt_data_end+0xfc0129e0>
   133b4:	8025883a 	mov	r18,r16
   133b8:	dc002903 	ldbu	r16,164(sp)
   133bc:	e011883a 	mov	r8,fp
   133c0:	84003fcc 	andi	r16,r16,255
   133c4:	8005e51e 	bne	r16,zero,14b5c <___vfprintf_internal_r+0x22c4>
   133c8:	94800414 	ori	r18,r18,16
   133cc:	9080080c 	andi	r2,r18,32
   133d0:	10022b26 	beq	r2,zero,13c80 <___vfprintf_internal_r+0x13e8>
   133d4:	d9002e17 	ldw	r4,184(sp)
   133d8:	d9402a17 	ldw	r5,168(sp)
   133dc:	d8002785 	stb	zero,158(sp)
   133e0:	20c00204 	addi	r3,r4,8
   133e4:	24c00017 	ldw	r19,0(r4)
   133e8:	25800117 	ldw	r22,4(r4)
   133ec:	28042e16 	blt	r5,zero,144a8 <___vfprintf_internal_r+0x1c10>
   133f0:	013fdfc4 	movi	r4,-129
   133f4:	9d84b03a 	or	r2,r19,r22
   133f8:	d8c02e15 	stw	r3,184(sp)
   133fc:	9124703a 	and	r18,r18,r4
   13400:	0039883a 	mov	fp,zero
   13404:	103e801e 	bne	r2,zero,12e08 <__alt_data_end+0xfc012e08>
   13408:	d9002a17 	ldw	r4,168(sp)
   1340c:	2002e01e 	bne	r4,zero,13f90 <___vfprintf_internal_r+0x16f8>
   13410:	d8002a15 	stw	zero,168(sp)
   13414:	d8002b15 	stw	zero,172(sp)
   13418:	dc001e04 	addi	r16,sp,120
   1341c:	003ef506 	br	12ff4 <__alt_data_end+0xfc012ff4>
   13420:	8025883a 	mov	r18,r16
   13424:	dc002903 	ldbu	r16,164(sp)
   13428:	e011883a 	mov	r8,fp
   1342c:	84003fcc 	andi	r16,r16,255
   13430:	8005ba1e 	bne	r16,zero,14b1c <___vfprintf_internal_r+0x2284>
   13434:	010000f4 	movhi	r4,3
   13438:	212df804 	addi	r4,r4,-18464
   1343c:	d9003915 	stw	r4,228(sp)
   13440:	9080080c 	andi	r2,r18,32
   13444:	10006126 	beq	r2,zero,135cc <___vfprintf_internal_r+0xd34>
   13448:	d9402e17 	ldw	r5,184(sp)
   1344c:	2cc00017 	ldw	r19,0(r5)
   13450:	2d800117 	ldw	r22,4(r5)
   13454:	29400204 	addi	r5,r5,8
   13458:	d9402e15 	stw	r5,184(sp)
   1345c:	9080004c 	andi	r2,r18,1
   13460:	1001ac26 	beq	r2,zero,13b14 <___vfprintf_internal_r+0x127c>
   13464:	9d84b03a 	or	r2,r19,r22
   13468:	10038526 	beq	r2,zero,14280 <___vfprintf_internal_r+0x19e8>
   1346c:	d8c02a17 	ldw	r3,168(sp)
   13470:	00800c04 	movi	r2,48
   13474:	d8802705 	stb	r2,156(sp)
   13478:	dc402745 	stb	r17,157(sp)
   1347c:	d8002785 	stb	zero,158(sp)
   13480:	90800094 	ori	r2,r18,2
   13484:	18047916 	blt	r3,zero,1466c <___vfprintf_internal_r+0x1dd4>
   13488:	00bfdfc4 	movi	r2,-129
   1348c:	90a4703a 	and	r18,r18,r2
   13490:	94800094 	ori	r18,r18,2
   13494:	0039883a 	mov	fp,zero
   13498:	d9003917 	ldw	r4,228(sp)
   1349c:	dc001e04 	addi	r16,sp,120
   134a0:	988003cc 	andi	r2,r19,15
   134a4:	b006973a 	slli	r3,r22,28
   134a8:	2085883a 	add	r2,r4,r2
   134ac:	9826d13a 	srli	r19,r19,4
   134b0:	10800003 	ldbu	r2,0(r2)
   134b4:	b02cd13a 	srli	r22,r22,4
   134b8:	843fffc4 	addi	r16,r16,-1
   134bc:	1ce6b03a 	or	r19,r3,r19
   134c0:	80800005 	stb	r2,0(r16)
   134c4:	9d84b03a 	or	r2,r19,r22
   134c8:	103ff51e 	bne	r2,zero,134a0 <__alt_data_end+0xfc0134a0>
   134cc:	d8c02817 	ldw	r3,160(sp)
   134d0:	1c07c83a 	sub	r3,r3,r16
   134d4:	d8c02b15 	stw	r3,172(sp)
   134d8:	003ec606 	br	12ff4 <__alt_data_end+0xfc012ff4>
   134dc:	8025883a 	mov	r18,r16
   134e0:	dc002903 	ldbu	r16,164(sp)
   134e4:	e011883a 	mov	r8,fp
   134e8:	84003fcc 	andi	r16,r16,255
   134ec:	803e9626 	beq	r16,zero,12f48 <__alt_data_end+0xfc012f48>
   134f0:	d8c02b03 	ldbu	r3,172(sp)
   134f4:	d8c02785 	stb	r3,158(sp)
   134f8:	003e9306 	br	12f48 <__alt_data_end+0xfc012f48>
   134fc:	00c00044 	movi	r3,1
   13500:	d8c02905 	stb	r3,164(sp)
   13504:	00c00ac4 	movi	r3,43
   13508:	d8c02b05 	stb	r3,172(sp)
   1350c:	ac400007 	ldb	r17,0(r21)
   13510:	003d4306 	br	12a20 <__alt_data_end+0xfc012a20>
   13514:	84000814 	ori	r16,r16,32
   13518:	ac400007 	ldb	r17,0(r21)
   1351c:	003d4006 	br	12a20 <__alt_data_end+0xfc012a20>
   13520:	d8802e17 	ldw	r2,184(sp)
   13524:	8025883a 	mov	r18,r16
   13528:	d8002785 	stb	zero,158(sp)
   1352c:	14000017 	ldw	r16,0(r2)
   13530:	e011883a 	mov	r8,fp
   13534:	14c00104 	addi	r19,r2,4
   13538:	80042d26 	beq	r16,zero,145f0 <___vfprintf_internal_r+0x1d58>
   1353c:	d8c02a17 	ldw	r3,168(sp)
   13540:	1803e416 	blt	r3,zero,144d4 <___vfprintf_internal_r+0x1c3c>
   13544:	180d883a 	mov	r6,r3
   13548:	000b883a 	mov	r5,zero
   1354c:	8009883a 	mov	r4,r16
   13550:	df003d15 	stw	fp,244(sp)
   13554:	00179c40 	call	179c4 <memchr>
   13558:	da003d17 	ldw	r8,244(sp)
   1355c:	10046826 	beq	r2,zero,14700 <___vfprintf_internal_r+0x1e68>
   13560:	1405c83a 	sub	r2,r2,r16
   13564:	d8802b15 	stw	r2,172(sp)
   13568:	1003e016 	blt	r2,zero,144ec <___vfprintf_internal_r+0x1c54>
   1356c:	df002783 	ldbu	fp,158(sp)
   13570:	d8802915 	stw	r2,164(sp)
   13574:	dcc02e15 	stw	r19,184(sp)
   13578:	d8002a15 	stw	zero,168(sp)
   1357c:	d8003215 	stw	zero,200(sp)
   13580:	003ea206 	br	1300c <__alt_data_end+0xfc01300c>
   13584:	8025883a 	mov	r18,r16
   13588:	dc002903 	ldbu	r16,164(sp)
   1358c:	e011883a 	mov	r8,fp
   13590:	84003fcc 	andi	r16,r16,255
   13594:	803f8d26 	beq	r16,zero,133cc <__alt_data_end+0xfc0133cc>
   13598:	d8c02b03 	ldbu	r3,172(sp)
   1359c:	d8c02785 	stb	r3,158(sp)
   135a0:	003f8a06 	br	133cc <__alt_data_end+0xfc0133cc>
   135a4:	8025883a 	mov	r18,r16
   135a8:	dc002903 	ldbu	r16,164(sp)
   135ac:	e011883a 	mov	r8,fp
   135b0:	84003fcc 	andi	r16,r16,255
   135b4:	8005661e 	bne	r16,zero,14b50 <___vfprintf_internal_r+0x22b8>
   135b8:	010000f4 	movhi	r4,3
   135bc:	212dfd04 	addi	r4,r4,-18444
   135c0:	d9003915 	stw	r4,228(sp)
   135c4:	9080080c 	andi	r2,r18,32
   135c8:	103f9f1e 	bne	r2,zero,13448 <__alt_data_end+0xfc013448>
   135cc:	9080040c 	andi	r2,r18,16
   135d0:	1002eb26 	beq	r2,zero,14180 <___vfprintf_internal_r+0x18e8>
   135d4:	d8802e17 	ldw	r2,184(sp)
   135d8:	002d883a 	mov	r22,zero
   135dc:	14c00017 	ldw	r19,0(r2)
   135e0:	10800104 	addi	r2,r2,4
   135e4:	d8802e15 	stw	r2,184(sp)
   135e8:	003f9c06 	br	1345c <__alt_data_end+0xfc01345c>
   135ec:	d8802b07 	ldb	r2,172(sp)
   135f0:	1002e11e 	bne	r2,zero,14178 <___vfprintf_internal_r+0x18e0>
   135f4:	00c00044 	movi	r3,1
   135f8:	d8c02905 	stb	r3,164(sp)
   135fc:	00c00804 	movi	r3,32
   13600:	d8c02b05 	stb	r3,172(sp)
   13604:	ac400007 	ldb	r17,0(r21)
   13608:	003d0506 	br	12a20 <__alt_data_end+0xfc012a20>
   1360c:	84000054 	ori	r16,r16,1
   13610:	ac400007 	ldb	r17,0(r21)
   13614:	003d0206 	br	12a20 <__alt_data_end+0xfc012a20>
   13618:	8025883a 	mov	r18,r16
   1361c:	dc002903 	ldbu	r16,164(sp)
   13620:	e011883a 	mov	r8,fp
   13624:	84003fcc 	andi	r16,r16,255
   13628:	803de726 	beq	r16,zero,12dc8 <__alt_data_end+0xfc012dc8>
   1362c:	d8c02b03 	ldbu	r3,172(sp)
   13630:	d8c02785 	stb	r3,158(sp)
   13634:	003de406 	br	12dc8 <__alt_data_end+0xfc012dc8>
   13638:	84001014 	ori	r16,r16,64
   1363c:	ac400007 	ldb	r17,0(r21)
   13640:	003cf706 	br	12a20 <__alt_data_end+0xfc012a20>
   13644:	ac400007 	ldb	r17,0(r21)
   13648:	00801b04 	movi	r2,108
   1364c:	88838f26 	beq	r17,r2,1448c <___vfprintf_internal_r+0x1bf4>
   13650:	84000414 	ori	r16,r16,16
   13654:	003cf206 	br	12a20 <__alt_data_end+0xfc012a20>
   13658:	8025883a 	mov	r18,r16
   1365c:	dc002903 	ldbu	r16,164(sp)
   13660:	e011883a 	mov	r8,fp
   13664:	84003fcc 	andi	r16,r16,255
   13668:	80053f1e 	bne	r16,zero,14b68 <___vfprintf_internal_r+0x22d0>
   1366c:	9080080c 	andi	r2,r18,32
   13670:	1002d226 	beq	r2,zero,141bc <___vfprintf_internal_r+0x1924>
   13674:	d9002e17 	ldw	r4,184(sp)
   13678:	d9402f17 	ldw	r5,188(sp)
   1367c:	20800017 	ldw	r2,0(r4)
   13680:	2807d7fa 	srai	r3,r5,31
   13684:	21000104 	addi	r4,r4,4
   13688:	d9002e15 	stw	r4,184(sp)
   1368c:	11400015 	stw	r5,0(r2)
   13690:	10c00115 	stw	r3,4(r2)
   13694:	003cb806 	br	12978 <__alt_data_end+0xfc012978>
   13698:	d8c02e17 	ldw	r3,184(sp)
   1369c:	d9002e17 	ldw	r4,184(sp)
   136a0:	8025883a 	mov	r18,r16
   136a4:	18800017 	ldw	r2,0(r3)
   136a8:	21000104 	addi	r4,r4,4
   136ac:	00c00044 	movi	r3,1
   136b0:	e011883a 	mov	r8,fp
   136b4:	d8c02915 	stw	r3,164(sp)
   136b8:	d8002785 	stb	zero,158(sp)
   136bc:	d8801405 	stb	r2,80(sp)
   136c0:	d9002e15 	stw	r4,184(sp)
   136c4:	d8c02b15 	stw	r3,172(sp)
   136c8:	d8002a15 	stw	zero,168(sp)
   136cc:	d8003215 	stw	zero,200(sp)
   136d0:	dc001404 	addi	r16,sp,80
   136d4:	0039883a 	mov	fp,zero
   136d8:	003e5306 	br	13028 <__alt_data_end+0xfc013028>
   136dc:	010000f4 	movhi	r4,3
   136e0:	212dfd04 	addi	r4,r4,-18444
   136e4:	0039883a 	mov	fp,zero
   136e8:	d9003915 	stw	r4,228(sp)
   136ec:	04401e04 	movi	r17,120
   136f0:	003f6906 	br	13498 <__alt_data_end+0xfc013498>
   136f4:	8025883a 	mov	r18,r16
   136f8:	dc002903 	ldbu	r16,164(sp)
   136fc:	e011883a 	mov	r8,fp
   13700:	84003fcc 	andi	r16,r16,255
   13704:	8005081e 	bne	r16,zero,14b28 <___vfprintf_internal_r+0x2290>
   13708:	883d6126 	beq	r17,zero,12c90 <__alt_data_end+0xfc012c90>
   1370c:	00c00044 	movi	r3,1
   13710:	d8c02915 	stw	r3,164(sp)
   13714:	dc401405 	stb	r17,80(sp)
   13718:	d8002785 	stb	zero,158(sp)
   1371c:	003fe906 	br	136c4 <__alt_data_end+0xfc0136c4>
   13720:	014000f4 	movhi	r5,3
   13724:	296dfd04 	addi	r5,r5,-18444
   13728:	d9403915 	stw	r5,228(sp)
   1372c:	d8c02e15 	stw	r3,184(sp)
   13730:	1025883a 	mov	r18,r2
   13734:	04401e04 	movi	r17,120
   13738:	9d84b03a 	or	r2,r19,r22
   1373c:	1000fc1e 	bne	r2,zero,13b30 <___vfprintf_internal_r+0x1298>
   13740:	0039883a 	mov	fp,zero
   13744:	00800084 	movi	r2,2
   13748:	10803fcc 	andi	r2,r2,255
   1374c:	00c00044 	movi	r3,1
   13750:	10c20f26 	beq	r2,r3,13f90 <___vfprintf_internal_r+0x16f8>
   13754:	00c00084 	movi	r3,2
   13758:	10fd3326 	beq	r2,r3,12c28 <__alt_data_end+0xfc012c28>
   1375c:	003e0b06 	br	12f8c <__alt_data_end+0xfc012f8c>
   13760:	d8c02017 	ldw	r3,128(sp)
   13764:	003e7106 	br	1312c <__alt_data_end+0xfc01312c>
   13768:	00801944 	movi	r2,101
   1376c:	14407e0e 	bge	r2,r17,13968 <___vfprintf_internal_r+0x10d0>
   13770:	d9003617 	ldw	r4,216(sp)
   13774:	d9403817 	ldw	r5,224(sp)
   13778:	000d883a 	mov	r6,zero
   1377c:	000f883a 	mov	r7,zero
   13780:	d8c03c15 	stw	r3,240(sp)
   13784:	da003d15 	stw	r8,244(sp)
   13788:	001e9280 	call	1e928 <__eqdf2>
   1378c:	d8c03c17 	ldw	r3,240(sp)
   13790:	da003d17 	ldw	r8,244(sp)
   13794:	1000f71e 	bne	r2,zero,13b74 <___vfprintf_internal_r+0x12dc>
   13798:	d8801f17 	ldw	r2,124(sp)
   1379c:	010000f4 	movhi	r4,3
   137a0:	212e0404 	addi	r4,r4,-18416
   137a4:	18c00044 	addi	r3,r3,1
   137a8:	10800044 	addi	r2,r2,1
   137ac:	41000015 	stw	r4,0(r8)
   137b0:	01000044 	movi	r4,1
   137b4:	41000115 	stw	r4,4(r8)
   137b8:	d8c02015 	stw	r3,128(sp)
   137bc:	d8801f15 	stw	r2,124(sp)
   137c0:	010001c4 	movi	r4,7
   137c4:	2082b816 	blt	r4,r2,142a8 <___vfprintf_internal_r+0x1a10>
   137c8:	42000204 	addi	r8,r8,8
   137cc:	d8802617 	ldw	r2,152(sp)
   137d0:	d9403317 	ldw	r5,204(sp)
   137d4:	11400216 	blt	r2,r5,137e0 <___vfprintf_internal_r+0xf48>
   137d8:	9080004c 	andi	r2,r18,1
   137dc:	103eb326 	beq	r2,zero,132ac <__alt_data_end+0xfc0132ac>
   137e0:	d8803717 	ldw	r2,220(sp)
   137e4:	d9003417 	ldw	r4,208(sp)
   137e8:	d9403717 	ldw	r5,220(sp)
   137ec:	1887883a 	add	r3,r3,r2
   137f0:	d8801f17 	ldw	r2,124(sp)
   137f4:	41000015 	stw	r4,0(r8)
   137f8:	41400115 	stw	r5,4(r8)
   137fc:	10800044 	addi	r2,r2,1
   13800:	d8c02015 	stw	r3,128(sp)
   13804:	d8801f15 	stw	r2,124(sp)
   13808:	010001c4 	movi	r4,7
   1380c:	20832916 	blt	r4,r2,144b4 <___vfprintf_internal_r+0x1c1c>
   13810:	42000204 	addi	r8,r8,8
   13814:	d8803317 	ldw	r2,204(sp)
   13818:	143fffc4 	addi	r16,r2,-1
   1381c:	043ea30e 	bge	zero,r16,132ac <__alt_data_end+0xfc0132ac>
   13820:	04400404 	movi	r17,16
   13824:	d8801f17 	ldw	r2,124(sp)
   13828:	8c00880e 	bge	r17,r16,13a4c <___vfprintf_internal_r+0x11b4>
   1382c:	014000f4 	movhi	r5,3
   13830:	296e0c84 	addi	r5,r5,-18382
   13834:	d9402c15 	stw	r5,176(sp)
   13838:	058001c4 	movi	r22,7
   1383c:	dcc02d17 	ldw	r19,180(sp)
   13840:	00000306 	br	13850 <___vfprintf_internal_r+0xfb8>
   13844:	42000204 	addi	r8,r8,8
   13848:	843ffc04 	addi	r16,r16,-16
   1384c:	8c00820e 	bge	r17,r16,13a58 <___vfprintf_internal_r+0x11c0>
   13850:	18c00404 	addi	r3,r3,16
   13854:	10800044 	addi	r2,r2,1
   13858:	45000015 	stw	r20,0(r8)
   1385c:	44400115 	stw	r17,4(r8)
   13860:	d8c02015 	stw	r3,128(sp)
   13864:	d8801f15 	stw	r2,124(sp)
   13868:	b0bff60e 	bge	r22,r2,13844 <__alt_data_end+0xfc013844>
   1386c:	d9801e04 	addi	r6,sp,120
   13870:	b80b883a 	mov	r5,r23
   13874:	9809883a 	mov	r4,r19
   13878:	001aba40 	call	1aba4 <__sprint_r>
   1387c:	103d0a1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13880:	d8c02017 	ldw	r3,128(sp)
   13884:	d8801f17 	ldw	r2,124(sp)
   13888:	da000404 	addi	r8,sp,16
   1388c:	003fee06 	br	13848 <__alt_data_end+0xfc013848>
   13890:	d9403117 	ldw	r5,196(sp)
   13894:	d8802917 	ldw	r2,164(sp)
   13898:	28adc83a 	sub	r22,r5,r2
   1389c:	05be410e 	bge	zero,r22,131a4 <__alt_data_end+0xfc0131a4>
   138a0:	07000404 	movi	fp,16
   138a4:	d8801f17 	ldw	r2,124(sp)
   138a8:	e5838f0e 	bge	fp,r22,146e8 <___vfprintf_internal_r+0x1e50>
   138ac:	014000f4 	movhi	r5,3
   138b0:	296e0c84 	addi	r5,r5,-18382
   138b4:	dc403015 	stw	r17,192(sp)
   138b8:	d9402c15 	stw	r5,176(sp)
   138bc:	b023883a 	mov	r17,r22
   138c0:	04c001c4 	movi	r19,7
   138c4:	a82d883a 	mov	r22,r21
   138c8:	902b883a 	mov	r21,r18
   138cc:	8025883a 	mov	r18,r16
   138d0:	dc002d17 	ldw	r16,180(sp)
   138d4:	00000306 	br	138e4 <___vfprintf_internal_r+0x104c>
   138d8:	8c7ffc04 	addi	r17,r17,-16
   138dc:	42000204 	addi	r8,r8,8
   138e0:	e440110e 	bge	fp,r17,13928 <___vfprintf_internal_r+0x1090>
   138e4:	18c00404 	addi	r3,r3,16
   138e8:	10800044 	addi	r2,r2,1
   138ec:	45000015 	stw	r20,0(r8)
   138f0:	47000115 	stw	fp,4(r8)
   138f4:	d8c02015 	stw	r3,128(sp)
   138f8:	d8801f15 	stw	r2,124(sp)
   138fc:	98bff60e 	bge	r19,r2,138d8 <__alt_data_end+0xfc0138d8>
   13900:	d9801e04 	addi	r6,sp,120
   13904:	b80b883a 	mov	r5,r23
   13908:	8009883a 	mov	r4,r16
   1390c:	001aba40 	call	1aba4 <__sprint_r>
   13910:	103ce51e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13914:	8c7ffc04 	addi	r17,r17,-16
   13918:	d8c02017 	ldw	r3,128(sp)
   1391c:	d8801f17 	ldw	r2,124(sp)
   13920:	da000404 	addi	r8,sp,16
   13924:	e47fef16 	blt	fp,r17,138e4 <__alt_data_end+0xfc0138e4>
   13928:	9021883a 	mov	r16,r18
   1392c:	a825883a 	mov	r18,r21
   13930:	b02b883a 	mov	r21,r22
   13934:	882d883a 	mov	r22,r17
   13938:	dc403017 	ldw	r17,192(sp)
   1393c:	d9002c17 	ldw	r4,176(sp)
   13940:	1d87883a 	add	r3,r3,r22
   13944:	10800044 	addi	r2,r2,1
   13948:	41000015 	stw	r4,0(r8)
   1394c:	45800115 	stw	r22,4(r8)
   13950:	d8c02015 	stw	r3,128(sp)
   13954:	d8801f15 	stw	r2,124(sp)
   13958:	010001c4 	movi	r4,7
   1395c:	20818e16 	blt	r4,r2,13f98 <___vfprintf_internal_r+0x1700>
   13960:	42000204 	addi	r8,r8,8
   13964:	003e0f06 	br	131a4 <__alt_data_end+0xfc0131a4>
   13968:	d9403317 	ldw	r5,204(sp)
   1396c:	00800044 	movi	r2,1
   13970:	18c00044 	addi	r3,r3,1
   13974:	1141530e 	bge	r2,r5,13ec4 <___vfprintf_internal_r+0x162c>
   13978:	dc401f17 	ldw	r17,124(sp)
   1397c:	00800044 	movi	r2,1
   13980:	40800115 	stw	r2,4(r8)
   13984:	8c400044 	addi	r17,r17,1
   13988:	44000015 	stw	r16,0(r8)
   1398c:	d8c02015 	stw	r3,128(sp)
   13990:	dc401f15 	stw	r17,124(sp)
   13994:	008001c4 	movi	r2,7
   13998:	14416b16 	blt	r2,r17,13f48 <___vfprintf_internal_r+0x16b0>
   1399c:	42000204 	addi	r8,r8,8
   139a0:	d8803717 	ldw	r2,220(sp)
   139a4:	d9003417 	ldw	r4,208(sp)
   139a8:	8c400044 	addi	r17,r17,1
   139ac:	10c7883a 	add	r3,r2,r3
   139b0:	40800115 	stw	r2,4(r8)
   139b4:	41000015 	stw	r4,0(r8)
   139b8:	d8c02015 	stw	r3,128(sp)
   139bc:	dc401f15 	stw	r17,124(sp)
   139c0:	008001c4 	movi	r2,7
   139c4:	14416916 	blt	r2,r17,13f6c <___vfprintf_internal_r+0x16d4>
   139c8:	45800204 	addi	r22,r8,8
   139cc:	d9003617 	ldw	r4,216(sp)
   139d0:	d9403817 	ldw	r5,224(sp)
   139d4:	000d883a 	mov	r6,zero
   139d8:	000f883a 	mov	r7,zero
   139dc:	d8c03c15 	stw	r3,240(sp)
   139e0:	001e9280 	call	1e928 <__eqdf2>
   139e4:	d8c03c17 	ldw	r3,240(sp)
   139e8:	1000bc26 	beq	r2,zero,13cdc <___vfprintf_internal_r+0x1444>
   139ec:	d9403317 	ldw	r5,204(sp)
   139f0:	84000044 	addi	r16,r16,1
   139f4:	8c400044 	addi	r17,r17,1
   139f8:	28bfffc4 	addi	r2,r5,-1
   139fc:	1887883a 	add	r3,r3,r2
   13a00:	b0800115 	stw	r2,4(r22)
   13a04:	b4000015 	stw	r16,0(r22)
   13a08:	d8c02015 	stw	r3,128(sp)
   13a0c:	dc401f15 	stw	r17,124(sp)
   13a10:	008001c4 	movi	r2,7
   13a14:	14414316 	blt	r2,r17,13f24 <___vfprintf_internal_r+0x168c>
   13a18:	b5800204 	addi	r22,r22,8
   13a1c:	d9003a17 	ldw	r4,232(sp)
   13a20:	df0022c4 	addi	fp,sp,139
   13a24:	8c400044 	addi	r17,r17,1
   13a28:	20c7883a 	add	r3,r4,r3
   13a2c:	b7000015 	stw	fp,0(r22)
   13a30:	b1000115 	stw	r4,4(r22)
   13a34:	d8c02015 	stw	r3,128(sp)
   13a38:	dc401f15 	stw	r17,124(sp)
   13a3c:	008001c4 	movi	r2,7
   13a40:	14400e16 	blt	r2,r17,13a7c <___vfprintf_internal_r+0x11e4>
   13a44:	b2000204 	addi	r8,r22,8
   13a48:	003e1806 	br	132ac <__alt_data_end+0xfc0132ac>
   13a4c:	010000f4 	movhi	r4,3
   13a50:	212e0c84 	addi	r4,r4,-18382
   13a54:	d9002c15 	stw	r4,176(sp)
   13a58:	d9002c17 	ldw	r4,176(sp)
   13a5c:	1c07883a 	add	r3,r3,r16
   13a60:	44000115 	stw	r16,4(r8)
   13a64:	41000015 	stw	r4,0(r8)
   13a68:	10800044 	addi	r2,r2,1
   13a6c:	d8c02015 	stw	r3,128(sp)
   13a70:	d8801f15 	stw	r2,124(sp)
   13a74:	010001c4 	movi	r4,7
   13a78:	20be0b0e 	bge	r4,r2,132a8 <__alt_data_end+0xfc0132a8>
   13a7c:	d9002d17 	ldw	r4,180(sp)
   13a80:	d9801e04 	addi	r6,sp,120
   13a84:	b80b883a 	mov	r5,r23
   13a88:	001aba40 	call	1aba4 <__sprint_r>
   13a8c:	103c861e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13a90:	d8c02017 	ldw	r3,128(sp)
   13a94:	da000404 	addi	r8,sp,16
   13a98:	003e0406 	br	132ac <__alt_data_end+0xfc0132ac>
   13a9c:	d9002d17 	ldw	r4,180(sp)
   13aa0:	d9801e04 	addi	r6,sp,120
   13aa4:	b80b883a 	mov	r5,r23
   13aa8:	001aba40 	call	1aba4 <__sprint_r>
   13aac:	103e3b26 	beq	r2,zero,1339c <__alt_data_end+0xfc01339c>
   13ab0:	003c7d06 	br	12ca8 <__alt_data_end+0xfc012ca8>
   13ab4:	d9002d17 	ldw	r4,180(sp)
   13ab8:	d9801e04 	addi	r6,sp,120
   13abc:	b80b883a 	mov	r5,r23
   13ac0:	001aba40 	call	1aba4 <__sprint_r>
   13ac4:	103c781e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13ac8:	d8c02017 	ldw	r3,128(sp)
   13acc:	da000404 	addi	r8,sp,16
   13ad0:	003de906 	br	13278 <__alt_data_end+0xfc013278>
   13ad4:	d9002d17 	ldw	r4,180(sp)
   13ad8:	d9801e04 	addi	r6,sp,120
   13adc:	b80b883a 	mov	r5,r23
   13ae0:	001aba40 	call	1aba4 <__sprint_r>
   13ae4:	103c701e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13ae8:	d8c02017 	ldw	r3,128(sp)
   13aec:	da000404 	addi	r8,sp,16
   13af0:	003d9b06 	br	13160 <__alt_data_end+0xfc013160>
   13af4:	d9002d17 	ldw	r4,180(sp)
   13af8:	d9801e04 	addi	r6,sp,120
   13afc:	b80b883a 	mov	r5,r23
   13b00:	001aba40 	call	1aba4 <__sprint_r>
   13b04:	103c681e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13b08:	d8c02017 	ldw	r3,128(sp)
   13b0c:	da000404 	addi	r8,sp,16
   13b10:	003da106 	br	13198 <__alt_data_end+0xfc013198>
   13b14:	d9402a17 	ldw	r5,168(sp)
   13b18:	d8002785 	stb	zero,158(sp)
   13b1c:	283f0616 	blt	r5,zero,13738 <__alt_data_end+0xfc013738>
   13b20:	00ffdfc4 	movi	r3,-129
   13b24:	9d84b03a 	or	r2,r19,r22
   13b28:	90e4703a 	and	r18,r18,r3
   13b2c:	103c3b26 	beq	r2,zero,12c1c <__alt_data_end+0xfc012c1c>
   13b30:	0039883a 	mov	fp,zero
   13b34:	003e5806 	br	13498 <__alt_data_end+0xfc013498>
   13b38:	9080040c 	andi	r2,r18,16
   13b3c:	1001b326 	beq	r2,zero,1420c <___vfprintf_internal_r+0x1974>
   13b40:	d8c02e17 	ldw	r3,184(sp)
   13b44:	d9002a17 	ldw	r4,168(sp)
   13b48:	d8002785 	stb	zero,158(sp)
   13b4c:	18800104 	addi	r2,r3,4
   13b50:	1cc00017 	ldw	r19,0(r3)
   13b54:	002d883a 	mov	r22,zero
   13b58:	2001b516 	blt	r4,zero,14230 <___vfprintf_internal_r+0x1998>
   13b5c:	00ffdfc4 	movi	r3,-129
   13b60:	d8802e15 	stw	r2,184(sp)
   13b64:	90e4703a 	and	r18,r18,r3
   13b68:	983d0526 	beq	r19,zero,12f80 <__alt_data_end+0xfc012f80>
   13b6c:	0039883a 	mov	fp,zero
   13b70:	003d0806 	br	12f94 <__alt_data_end+0xfc012f94>
   13b74:	dc402617 	ldw	r17,152(sp)
   13b78:	0441d30e 	bge	zero,r17,142c8 <___vfprintf_internal_r+0x1a30>
   13b7c:	dc403217 	ldw	r17,200(sp)
   13b80:	d8803317 	ldw	r2,204(sp)
   13b84:	1440010e 	bge	r2,r17,13b8c <___vfprintf_internal_r+0x12f4>
   13b88:	1023883a 	mov	r17,r2
   13b8c:	04400a0e 	bge	zero,r17,13bb8 <___vfprintf_internal_r+0x1320>
   13b90:	d8801f17 	ldw	r2,124(sp)
   13b94:	1c47883a 	add	r3,r3,r17
   13b98:	44000015 	stw	r16,0(r8)
   13b9c:	10800044 	addi	r2,r2,1
   13ba0:	44400115 	stw	r17,4(r8)
   13ba4:	d8c02015 	stw	r3,128(sp)
   13ba8:	d8801f15 	stw	r2,124(sp)
   13bac:	010001c4 	movi	r4,7
   13bb0:	20826516 	blt	r4,r2,14548 <___vfprintf_internal_r+0x1cb0>
   13bb4:	42000204 	addi	r8,r8,8
   13bb8:	88026116 	blt	r17,zero,14540 <___vfprintf_internal_r+0x1ca8>
   13bbc:	d9003217 	ldw	r4,200(sp)
   13bc0:	2463c83a 	sub	r17,r4,r17
   13bc4:	04407b0e 	bge	zero,r17,13db4 <___vfprintf_internal_r+0x151c>
   13bc8:	05800404 	movi	r22,16
   13bcc:	d8801f17 	ldw	r2,124(sp)
   13bd0:	b4419d0e 	bge	r22,r17,14248 <___vfprintf_internal_r+0x19b0>
   13bd4:	010000f4 	movhi	r4,3
   13bd8:	212e0c84 	addi	r4,r4,-18382
   13bdc:	d9002c15 	stw	r4,176(sp)
   13be0:	070001c4 	movi	fp,7
   13be4:	dcc02d17 	ldw	r19,180(sp)
   13be8:	00000306 	br	13bf8 <___vfprintf_internal_r+0x1360>
   13bec:	42000204 	addi	r8,r8,8
   13bf0:	8c7ffc04 	addi	r17,r17,-16
   13bf4:	b441970e 	bge	r22,r17,14254 <___vfprintf_internal_r+0x19bc>
   13bf8:	18c00404 	addi	r3,r3,16
   13bfc:	10800044 	addi	r2,r2,1
   13c00:	45000015 	stw	r20,0(r8)
   13c04:	45800115 	stw	r22,4(r8)
   13c08:	d8c02015 	stw	r3,128(sp)
   13c0c:	d8801f15 	stw	r2,124(sp)
   13c10:	e0bff60e 	bge	fp,r2,13bec <__alt_data_end+0xfc013bec>
   13c14:	d9801e04 	addi	r6,sp,120
   13c18:	b80b883a 	mov	r5,r23
   13c1c:	9809883a 	mov	r4,r19
   13c20:	001aba40 	call	1aba4 <__sprint_r>
   13c24:	103c201e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13c28:	d8c02017 	ldw	r3,128(sp)
   13c2c:	d8801f17 	ldw	r2,124(sp)
   13c30:	da000404 	addi	r8,sp,16
   13c34:	003fee06 	br	13bf0 <__alt_data_end+0xfc013bf0>
   13c38:	d9002d17 	ldw	r4,180(sp)
   13c3c:	d9801e04 	addi	r6,sp,120
   13c40:	b80b883a 	mov	r5,r23
   13c44:	001aba40 	call	1aba4 <__sprint_r>
   13c48:	103c171e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13c4c:	d8c02017 	ldw	r3,128(sp)
   13c50:	df002787 	ldb	fp,158(sp)
   13c54:	da000404 	addi	r8,sp,16
   13c58:	003d3406 	br	1312c <__alt_data_end+0xfc01312c>
   13c5c:	9080040c 	andi	r2,r18,16
   13c60:	10016126 	beq	r2,zero,141e8 <___vfprintf_internal_r+0x1950>
   13c64:	d9402e17 	ldw	r5,184(sp)
   13c68:	2cc00017 	ldw	r19,0(r5)
   13c6c:	29400104 	addi	r5,r5,4
   13c70:	d9402e15 	stw	r5,184(sp)
   13c74:	982dd7fa 	srai	r22,r19,31
   13c78:	b005883a 	mov	r2,r22
   13c7c:	003c5a06 	br	12de8 <__alt_data_end+0xfc012de8>
   13c80:	9080040c 	andi	r2,r18,16
   13c84:	10003526 	beq	r2,zero,13d5c <___vfprintf_internal_r+0x14c4>
   13c88:	d8c02e17 	ldw	r3,184(sp)
   13c8c:	d9002a17 	ldw	r4,168(sp)
   13c90:	d8002785 	stb	zero,158(sp)
   13c94:	18800104 	addi	r2,r3,4
   13c98:	1cc00017 	ldw	r19,0(r3)
   13c9c:	002d883a 	mov	r22,zero
   13ca0:	20003716 	blt	r4,zero,13d80 <___vfprintf_internal_r+0x14e8>
   13ca4:	00ffdfc4 	movi	r3,-129
   13ca8:	d8802e15 	stw	r2,184(sp)
   13cac:	90e4703a 	and	r18,r18,r3
   13cb0:	0039883a 	mov	fp,zero
   13cb4:	983dd426 	beq	r19,zero,13408 <__alt_data_end+0xfc013408>
   13cb8:	00800244 	movi	r2,9
   13cbc:	14fc5336 	bltu	r2,r19,12e0c <__alt_data_end+0xfc012e0c>
   13cc0:	d8c02817 	ldw	r3,160(sp)
   13cc4:	dc001dc4 	addi	r16,sp,119
   13cc8:	9cc00c04 	addi	r19,r19,48
   13ccc:	1c07c83a 	sub	r3,r3,r16
   13cd0:	dcc01dc5 	stb	r19,119(sp)
   13cd4:	d8c02b15 	stw	r3,172(sp)
   13cd8:	003cc606 	br	12ff4 <__alt_data_end+0xfc012ff4>
   13cdc:	d8803317 	ldw	r2,204(sp)
   13ce0:	143fffc4 	addi	r16,r2,-1
   13ce4:	043f4d0e 	bge	zero,r16,13a1c <__alt_data_end+0xfc013a1c>
   13ce8:	07000404 	movi	fp,16
   13cec:	e400810e 	bge	fp,r16,13ef4 <___vfprintf_internal_r+0x165c>
   13cf0:	014000f4 	movhi	r5,3
   13cf4:	296e0c84 	addi	r5,r5,-18382
   13cf8:	d9402c15 	stw	r5,176(sp)
   13cfc:	01c001c4 	movi	r7,7
   13d00:	dcc02d17 	ldw	r19,180(sp)
   13d04:	00000306 	br	13d14 <___vfprintf_internal_r+0x147c>
   13d08:	b5800204 	addi	r22,r22,8
   13d0c:	843ffc04 	addi	r16,r16,-16
   13d10:	e4007b0e 	bge	fp,r16,13f00 <___vfprintf_internal_r+0x1668>
   13d14:	18c00404 	addi	r3,r3,16
   13d18:	8c400044 	addi	r17,r17,1
   13d1c:	b5000015 	stw	r20,0(r22)
   13d20:	b7000115 	stw	fp,4(r22)
   13d24:	d8c02015 	stw	r3,128(sp)
   13d28:	dc401f15 	stw	r17,124(sp)
   13d2c:	3c7ff60e 	bge	r7,r17,13d08 <__alt_data_end+0xfc013d08>
   13d30:	d9801e04 	addi	r6,sp,120
   13d34:	b80b883a 	mov	r5,r23
   13d38:	9809883a 	mov	r4,r19
   13d3c:	d9c03c15 	stw	r7,240(sp)
   13d40:	001aba40 	call	1aba4 <__sprint_r>
   13d44:	d9c03c17 	ldw	r7,240(sp)
   13d48:	103bd71e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13d4c:	d8c02017 	ldw	r3,128(sp)
   13d50:	dc401f17 	ldw	r17,124(sp)
   13d54:	dd800404 	addi	r22,sp,16
   13d58:	003fec06 	br	13d0c <__alt_data_end+0xfc013d0c>
   13d5c:	9080100c 	andi	r2,r18,64
   13d60:	d8002785 	stb	zero,158(sp)
   13d64:	10010e26 	beq	r2,zero,141a0 <___vfprintf_internal_r+0x1908>
   13d68:	d9402e17 	ldw	r5,184(sp)
   13d6c:	d8c02a17 	ldw	r3,168(sp)
   13d70:	002d883a 	mov	r22,zero
   13d74:	28800104 	addi	r2,r5,4
   13d78:	2cc0000b 	ldhu	r19,0(r5)
   13d7c:	183fc90e 	bge	r3,zero,13ca4 <__alt_data_end+0xfc013ca4>
   13d80:	d8802e15 	stw	r2,184(sp)
   13d84:	0039883a 	mov	fp,zero
   13d88:	9d84b03a 	or	r2,r19,r22
   13d8c:	103c1e1e 	bne	r2,zero,12e08 <__alt_data_end+0xfc012e08>
   13d90:	00800044 	movi	r2,1
   13d94:	003e6c06 	br	13748 <__alt_data_end+0xfc013748>
   13d98:	d9002d17 	ldw	r4,180(sp)
   13d9c:	d9801e04 	addi	r6,sp,120
   13da0:	b80b883a 	mov	r5,r23
   13da4:	001aba40 	call	1aba4 <__sprint_r>
   13da8:	103bbf1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13dac:	d8c02017 	ldw	r3,128(sp)
   13db0:	da000404 	addi	r8,sp,16
   13db4:	d9003217 	ldw	r4,200(sp)
   13db8:	d8802617 	ldw	r2,152(sp)
   13dbc:	d9403317 	ldw	r5,204(sp)
   13dc0:	8123883a 	add	r17,r16,r4
   13dc4:	11400216 	blt	r2,r5,13dd0 <___vfprintf_internal_r+0x1538>
   13dc8:	9100004c 	andi	r4,r18,1
   13dcc:	20000d26 	beq	r4,zero,13e04 <___vfprintf_internal_r+0x156c>
   13dd0:	d9003717 	ldw	r4,220(sp)
   13dd4:	d9403417 	ldw	r5,208(sp)
   13dd8:	1907883a 	add	r3,r3,r4
   13ddc:	d9001f17 	ldw	r4,124(sp)
   13de0:	41400015 	stw	r5,0(r8)
   13de4:	d9403717 	ldw	r5,220(sp)
   13de8:	21000044 	addi	r4,r4,1
   13dec:	d8c02015 	stw	r3,128(sp)
   13df0:	41400115 	stw	r5,4(r8)
   13df4:	d9001f15 	stw	r4,124(sp)
   13df8:	014001c4 	movi	r5,7
   13dfc:	2901e816 	blt	r5,r4,145a0 <___vfprintf_internal_r+0x1d08>
   13e00:	42000204 	addi	r8,r8,8
   13e04:	d9003317 	ldw	r4,204(sp)
   13e08:	8121883a 	add	r16,r16,r4
   13e0c:	2085c83a 	sub	r2,r4,r2
   13e10:	8461c83a 	sub	r16,r16,r17
   13e14:	1400010e 	bge	r2,r16,13e1c <___vfprintf_internal_r+0x1584>
   13e18:	1021883a 	mov	r16,r2
   13e1c:	04000a0e 	bge	zero,r16,13e48 <___vfprintf_internal_r+0x15b0>
   13e20:	d9001f17 	ldw	r4,124(sp)
   13e24:	1c07883a 	add	r3,r3,r16
   13e28:	44400015 	stw	r17,0(r8)
   13e2c:	21000044 	addi	r4,r4,1
   13e30:	44000115 	stw	r16,4(r8)
   13e34:	d8c02015 	stw	r3,128(sp)
   13e38:	d9001f15 	stw	r4,124(sp)
   13e3c:	014001c4 	movi	r5,7
   13e40:	2901fb16 	blt	r5,r4,14630 <___vfprintf_internal_r+0x1d98>
   13e44:	42000204 	addi	r8,r8,8
   13e48:	8001f716 	blt	r16,zero,14628 <___vfprintf_internal_r+0x1d90>
   13e4c:	1421c83a 	sub	r16,r2,r16
   13e50:	043d160e 	bge	zero,r16,132ac <__alt_data_end+0xfc0132ac>
   13e54:	04400404 	movi	r17,16
   13e58:	d8801f17 	ldw	r2,124(sp)
   13e5c:	8c3efb0e 	bge	r17,r16,13a4c <__alt_data_end+0xfc013a4c>
   13e60:	014000f4 	movhi	r5,3
   13e64:	296e0c84 	addi	r5,r5,-18382
   13e68:	d9402c15 	stw	r5,176(sp)
   13e6c:	058001c4 	movi	r22,7
   13e70:	dcc02d17 	ldw	r19,180(sp)
   13e74:	00000306 	br	13e84 <___vfprintf_internal_r+0x15ec>
   13e78:	42000204 	addi	r8,r8,8
   13e7c:	843ffc04 	addi	r16,r16,-16
   13e80:	8c3ef50e 	bge	r17,r16,13a58 <__alt_data_end+0xfc013a58>
   13e84:	18c00404 	addi	r3,r3,16
   13e88:	10800044 	addi	r2,r2,1
   13e8c:	45000015 	stw	r20,0(r8)
   13e90:	44400115 	stw	r17,4(r8)
   13e94:	d8c02015 	stw	r3,128(sp)
   13e98:	d8801f15 	stw	r2,124(sp)
   13e9c:	b0bff60e 	bge	r22,r2,13e78 <__alt_data_end+0xfc013e78>
   13ea0:	d9801e04 	addi	r6,sp,120
   13ea4:	b80b883a 	mov	r5,r23
   13ea8:	9809883a 	mov	r4,r19
   13eac:	001aba40 	call	1aba4 <__sprint_r>
   13eb0:	103b7d1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13eb4:	d8c02017 	ldw	r3,128(sp)
   13eb8:	d8801f17 	ldw	r2,124(sp)
   13ebc:	da000404 	addi	r8,sp,16
   13ec0:	003fee06 	br	13e7c <__alt_data_end+0xfc013e7c>
   13ec4:	9088703a 	and	r4,r18,r2
   13ec8:	203eab1e 	bne	r4,zero,13978 <__alt_data_end+0xfc013978>
   13ecc:	dc401f17 	ldw	r17,124(sp)
   13ed0:	40800115 	stw	r2,4(r8)
   13ed4:	44000015 	stw	r16,0(r8)
   13ed8:	8c400044 	addi	r17,r17,1
   13edc:	d8c02015 	stw	r3,128(sp)
   13ee0:	dc401f15 	stw	r17,124(sp)
   13ee4:	008001c4 	movi	r2,7
   13ee8:	14400e16 	blt	r2,r17,13f24 <___vfprintf_internal_r+0x168c>
   13eec:	45800204 	addi	r22,r8,8
   13ef0:	003eca06 	br	13a1c <__alt_data_end+0xfc013a1c>
   13ef4:	010000f4 	movhi	r4,3
   13ef8:	212e0c84 	addi	r4,r4,-18382
   13efc:	d9002c15 	stw	r4,176(sp)
   13f00:	d8802c17 	ldw	r2,176(sp)
   13f04:	1c07883a 	add	r3,r3,r16
   13f08:	8c400044 	addi	r17,r17,1
   13f0c:	b0800015 	stw	r2,0(r22)
   13f10:	b4000115 	stw	r16,4(r22)
   13f14:	d8c02015 	stw	r3,128(sp)
   13f18:	dc401f15 	stw	r17,124(sp)
   13f1c:	008001c4 	movi	r2,7
   13f20:	147ebd0e 	bge	r2,r17,13a18 <__alt_data_end+0xfc013a18>
   13f24:	d9002d17 	ldw	r4,180(sp)
   13f28:	d9801e04 	addi	r6,sp,120
   13f2c:	b80b883a 	mov	r5,r23
   13f30:	001aba40 	call	1aba4 <__sprint_r>
   13f34:	103b5c1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13f38:	d8c02017 	ldw	r3,128(sp)
   13f3c:	dc401f17 	ldw	r17,124(sp)
   13f40:	dd800404 	addi	r22,sp,16
   13f44:	003eb506 	br	13a1c <__alt_data_end+0xfc013a1c>
   13f48:	d9002d17 	ldw	r4,180(sp)
   13f4c:	d9801e04 	addi	r6,sp,120
   13f50:	b80b883a 	mov	r5,r23
   13f54:	001aba40 	call	1aba4 <__sprint_r>
   13f58:	103b531e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13f5c:	d8c02017 	ldw	r3,128(sp)
   13f60:	dc401f17 	ldw	r17,124(sp)
   13f64:	da000404 	addi	r8,sp,16
   13f68:	003e8d06 	br	139a0 <__alt_data_end+0xfc0139a0>
   13f6c:	d9002d17 	ldw	r4,180(sp)
   13f70:	d9801e04 	addi	r6,sp,120
   13f74:	b80b883a 	mov	r5,r23
   13f78:	001aba40 	call	1aba4 <__sprint_r>
   13f7c:	103b4a1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13f80:	d8c02017 	ldw	r3,128(sp)
   13f84:	dc401f17 	ldw	r17,124(sp)
   13f88:	dd800404 	addi	r22,sp,16
   13f8c:	003e8f06 	br	139cc <__alt_data_end+0xfc0139cc>
   13f90:	0027883a 	mov	r19,zero
   13f94:	003f4a06 	br	13cc0 <__alt_data_end+0xfc013cc0>
   13f98:	d9002d17 	ldw	r4,180(sp)
   13f9c:	d9801e04 	addi	r6,sp,120
   13fa0:	b80b883a 	mov	r5,r23
   13fa4:	001aba40 	call	1aba4 <__sprint_r>
   13fa8:	103b3f1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   13fac:	d8c02017 	ldw	r3,128(sp)
   13fb0:	da000404 	addi	r8,sp,16
   13fb4:	003c7b06 	br	131a4 <__alt_data_end+0xfc0131a4>
   13fb8:	d9402a17 	ldw	r5,168(sp)
   13fbc:	04e7c83a 	sub	r19,zero,r19
   13fc0:	07000b44 	movi	fp,45
   13fc4:	9804c03a 	cmpne	r2,r19,zero
   13fc8:	05adc83a 	sub	r22,zero,r22
   13fcc:	df002785 	stb	fp,158(sp)
   13fd0:	b0adc83a 	sub	r22,r22,r2
   13fd4:	28017b16 	blt	r5,zero,145c4 <___vfprintf_internal_r+0x1d2c>
   13fd8:	00bfdfc4 	movi	r2,-129
   13fdc:	90a4703a 	and	r18,r18,r2
   13fe0:	003b8906 	br	12e08 <__alt_data_end+0xfc012e08>
   13fe4:	d9003617 	ldw	r4,216(sp)
   13fe8:	d9403817 	ldw	r5,224(sp)
   13fec:	da003d15 	stw	r8,244(sp)
   13ff0:	00193880 	call	19388 <__fpclassifyd>
   13ff4:	da003d17 	ldw	r8,244(sp)
   13ff8:	1000f026 	beq	r2,zero,143bc <___vfprintf_internal_r+0x1b24>
   13ffc:	d9002a17 	ldw	r4,168(sp)
   14000:	05bff7c4 	movi	r22,-33
   14004:	00bfffc4 	movi	r2,-1
   14008:	8dac703a 	and	r22,r17,r22
   1400c:	20820026 	beq	r4,r2,14810 <___vfprintf_internal_r+0x1f78>
   14010:	008011c4 	movi	r2,71
   14014:	b081f726 	beq	r22,r2,147f4 <___vfprintf_internal_r+0x1f5c>
   14018:	d9003817 	ldw	r4,224(sp)
   1401c:	90c04014 	ori	r3,r18,256
   14020:	d8c02c15 	stw	r3,176(sp)
   14024:	20021516 	blt	r4,zero,1487c <___vfprintf_internal_r+0x1fe4>
   14028:	dcc03817 	ldw	r19,224(sp)
   1402c:	d8002905 	stb	zero,164(sp)
   14030:	00801984 	movi	r2,102
   14034:	8881f926 	beq	r17,r2,1481c <___vfprintf_internal_r+0x1f84>
   14038:	00801184 	movi	r2,70
   1403c:	88821c26 	beq	r17,r2,148b0 <___vfprintf_internal_r+0x2018>
   14040:	00801144 	movi	r2,69
   14044:	b081ef26 	beq	r22,r2,14804 <___vfprintf_internal_r+0x1f6c>
   14048:	d8c02a17 	ldw	r3,168(sp)
   1404c:	d8802104 	addi	r2,sp,132
   14050:	d8800315 	stw	r2,12(sp)
   14054:	d9403617 	ldw	r5,216(sp)
   14058:	d8802504 	addi	r2,sp,148
   1405c:	d9002d17 	ldw	r4,180(sp)
   14060:	d8800215 	stw	r2,8(sp)
   14064:	d8802604 	addi	r2,sp,152
   14068:	d8c00015 	stw	r3,0(sp)
   1406c:	d8800115 	stw	r2,4(sp)
   14070:	01c00084 	movi	r7,2
   14074:	980d883a 	mov	r6,r19
   14078:	d8c03c15 	stw	r3,240(sp)
   1407c:	da003d15 	stw	r8,244(sp)
   14080:	0014fc80 	call	14fc8 <_dtoa_r>
   14084:	1021883a 	mov	r16,r2
   14088:	008019c4 	movi	r2,103
   1408c:	d8c03c17 	ldw	r3,240(sp)
   14090:	da003d17 	ldw	r8,244(sp)
   14094:	88817126 	beq	r17,r2,1465c <___vfprintf_internal_r+0x1dc4>
   14098:	008011c4 	movi	r2,71
   1409c:	88829126 	beq	r17,r2,14ae4 <___vfprintf_internal_r+0x224c>
   140a0:	80f9883a 	add	fp,r16,r3
   140a4:	d9003617 	ldw	r4,216(sp)
   140a8:	000d883a 	mov	r6,zero
   140ac:	000f883a 	mov	r7,zero
   140b0:	980b883a 	mov	r5,r19
   140b4:	da003d15 	stw	r8,244(sp)
   140b8:	001e9280 	call	1e928 <__eqdf2>
   140bc:	da003d17 	ldw	r8,244(sp)
   140c0:	10018d26 	beq	r2,zero,146f8 <___vfprintf_internal_r+0x1e60>
   140c4:	d8802117 	ldw	r2,132(sp)
   140c8:	1700062e 	bgeu	r2,fp,140e4 <___vfprintf_internal_r+0x184c>
   140cc:	01000c04 	movi	r4,48
   140d0:	10c00044 	addi	r3,r2,1
   140d4:	d8c02115 	stw	r3,132(sp)
   140d8:	11000005 	stb	r4,0(r2)
   140dc:	d8802117 	ldw	r2,132(sp)
   140e0:	173ffb36 	bltu	r2,fp,140d0 <__alt_data_end+0xfc0140d0>
   140e4:	1405c83a 	sub	r2,r2,r16
   140e8:	d8803315 	stw	r2,204(sp)
   140ec:	008011c4 	movi	r2,71
   140f0:	b0817626 	beq	r22,r2,146cc <___vfprintf_internal_r+0x1e34>
   140f4:	00801944 	movi	r2,101
   140f8:	1442800e 	bge	r2,r17,14afc <___vfprintf_internal_r+0x2264>
   140fc:	d8c02617 	ldw	r3,152(sp)
   14100:	00801984 	movi	r2,102
   14104:	d8c03215 	stw	r3,200(sp)
   14108:	8881fe26 	beq	r17,r2,14904 <___vfprintf_internal_r+0x206c>
   1410c:	d8c03217 	ldw	r3,200(sp)
   14110:	d9003317 	ldw	r4,204(sp)
   14114:	1901dd16 	blt	r3,r4,1488c <___vfprintf_internal_r+0x1ff4>
   14118:	9480004c 	andi	r18,r18,1
   1411c:	90022b1e 	bne	r18,zero,149cc <___vfprintf_internal_r+0x2134>
   14120:	1805883a 	mov	r2,r3
   14124:	18028316 	blt	r3,zero,14b34 <___vfprintf_internal_r+0x229c>
   14128:	d8c03217 	ldw	r3,200(sp)
   1412c:	044019c4 	movi	r17,103
   14130:	d8c02b15 	stw	r3,172(sp)
   14134:	df002907 	ldb	fp,164(sp)
   14138:	e001531e 	bne	fp,zero,14688 <___vfprintf_internal_r+0x1df0>
   1413c:	df002783 	ldbu	fp,158(sp)
   14140:	d8802915 	stw	r2,164(sp)
   14144:	dc802c17 	ldw	r18,176(sp)
   14148:	d8002a15 	stw	zero,168(sp)
   1414c:	003baf06 	br	1300c <__alt_data_end+0xfc01300c>
   14150:	d8c02e17 	ldw	r3,184(sp)
   14154:	d9002e17 	ldw	r4,184(sp)
   14158:	d9402e17 	ldw	r5,184(sp)
   1415c:	18c00017 	ldw	r3,0(r3)
   14160:	21000117 	ldw	r4,4(r4)
   14164:	29400204 	addi	r5,r5,8
   14168:	d8c03615 	stw	r3,216(sp)
   1416c:	d9003815 	stw	r4,224(sp)
   14170:	d9402e15 	stw	r5,184(sp)
   14174:	003b5006 	br	12eb8 <__alt_data_end+0xfc012eb8>
   14178:	ac400007 	ldb	r17,0(r21)
   1417c:	003a2806 	br	12a20 <__alt_data_end+0xfc012a20>
   14180:	9080100c 	andi	r2,r18,64
   14184:	1000a826 	beq	r2,zero,14428 <___vfprintf_internal_r+0x1b90>
   14188:	d8c02e17 	ldw	r3,184(sp)
   1418c:	002d883a 	mov	r22,zero
   14190:	1cc0000b 	ldhu	r19,0(r3)
   14194:	18c00104 	addi	r3,r3,4
   14198:	d8c02e15 	stw	r3,184(sp)
   1419c:	003caf06 	br	1345c <__alt_data_end+0xfc01345c>
   141a0:	d9002e17 	ldw	r4,184(sp)
   141a4:	d9402a17 	ldw	r5,168(sp)
   141a8:	002d883a 	mov	r22,zero
   141ac:	20800104 	addi	r2,r4,4
   141b0:	24c00017 	ldw	r19,0(r4)
   141b4:	283ebb0e 	bge	r5,zero,13ca4 <__alt_data_end+0xfc013ca4>
   141b8:	003ef106 	br	13d80 <__alt_data_end+0xfc013d80>
   141bc:	9080040c 	andi	r2,r18,16
   141c0:	1000921e 	bne	r2,zero,1440c <___vfprintf_internal_r+0x1b74>
   141c4:	9480100c 	andi	r18,r18,64
   141c8:	90013926 	beq	r18,zero,146b0 <___vfprintf_internal_r+0x1e18>
   141cc:	d9402e17 	ldw	r5,184(sp)
   141d0:	d8c02f17 	ldw	r3,188(sp)
   141d4:	28800017 	ldw	r2,0(r5)
   141d8:	29400104 	addi	r5,r5,4
   141dc:	d9402e15 	stw	r5,184(sp)
   141e0:	10c0000d 	sth	r3,0(r2)
   141e4:	0039e406 	br	12978 <__alt_data_end+0xfc012978>
   141e8:	9080100c 	andi	r2,r18,64
   141ec:	10008026 	beq	r2,zero,143f0 <___vfprintf_internal_r+0x1b58>
   141f0:	d8802e17 	ldw	r2,184(sp)
   141f4:	14c0000f 	ldh	r19,0(r2)
   141f8:	10800104 	addi	r2,r2,4
   141fc:	d8802e15 	stw	r2,184(sp)
   14200:	982dd7fa 	srai	r22,r19,31
   14204:	b005883a 	mov	r2,r22
   14208:	003af706 	br	12de8 <__alt_data_end+0xfc012de8>
   1420c:	9080100c 	andi	r2,r18,64
   14210:	d8002785 	stb	zero,158(sp)
   14214:	10008a1e 	bne	r2,zero,14440 <___vfprintf_internal_r+0x1ba8>
   14218:	d9002e17 	ldw	r4,184(sp)
   1421c:	d9402a17 	ldw	r5,168(sp)
   14220:	002d883a 	mov	r22,zero
   14224:	20800104 	addi	r2,r4,4
   14228:	24c00017 	ldw	r19,0(r4)
   1422c:	283e4b0e 	bge	r5,zero,13b5c <__alt_data_end+0xfc013b5c>
   14230:	9d86b03a 	or	r3,r19,r22
   14234:	d8802e15 	stw	r2,184(sp)
   14238:	183e4c1e 	bne	r3,zero,13b6c <__alt_data_end+0xfc013b6c>
   1423c:	0039883a 	mov	fp,zero
   14240:	0005883a 	mov	r2,zero
   14244:	003d4006 	br	13748 <__alt_data_end+0xfc013748>
   14248:	014000f4 	movhi	r5,3
   1424c:	296e0c84 	addi	r5,r5,-18382
   14250:	d9402c15 	stw	r5,176(sp)
   14254:	d9402c17 	ldw	r5,176(sp)
   14258:	1c47883a 	add	r3,r3,r17
   1425c:	10800044 	addi	r2,r2,1
   14260:	41400015 	stw	r5,0(r8)
   14264:	44400115 	stw	r17,4(r8)
   14268:	d8c02015 	stw	r3,128(sp)
   1426c:	d8801f15 	stw	r2,124(sp)
   14270:	010001c4 	movi	r4,7
   14274:	20bec816 	blt	r4,r2,13d98 <__alt_data_end+0xfc013d98>
   14278:	42000204 	addi	r8,r8,8
   1427c:	003ecd06 	br	13db4 <__alt_data_end+0xfc013db4>
   14280:	d9002a17 	ldw	r4,168(sp)
   14284:	d8002785 	stb	zero,158(sp)
   14288:	203d2d16 	blt	r4,zero,13740 <__alt_data_end+0xfc013740>
   1428c:	00bfdfc4 	movi	r2,-129
   14290:	90a4703a 	and	r18,r18,r2
   14294:	003a6106 	br	12c1c <__alt_data_end+0xfc012c1c>
   14298:	010000f4 	movhi	r4,3
   1429c:	212e0c84 	addi	r4,r4,-18382
   142a0:	d9002c15 	stw	r4,176(sp)
   142a4:	003bea06 	br	13250 <__alt_data_end+0xfc013250>
   142a8:	d9002d17 	ldw	r4,180(sp)
   142ac:	d9801e04 	addi	r6,sp,120
   142b0:	b80b883a 	mov	r5,r23
   142b4:	001aba40 	call	1aba4 <__sprint_r>
   142b8:	103a7b1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   142bc:	d8c02017 	ldw	r3,128(sp)
   142c0:	da000404 	addi	r8,sp,16
   142c4:	003d4106 	br	137cc <__alt_data_end+0xfc0137cc>
   142c8:	d8801f17 	ldw	r2,124(sp)
   142cc:	014000f4 	movhi	r5,3
   142d0:	01000044 	movi	r4,1
   142d4:	18c00044 	addi	r3,r3,1
   142d8:	10800044 	addi	r2,r2,1
   142dc:	296e0404 	addi	r5,r5,-18416
   142e0:	41000115 	stw	r4,4(r8)
   142e4:	41400015 	stw	r5,0(r8)
   142e8:	d8c02015 	stw	r3,128(sp)
   142ec:	d8801f15 	stw	r2,124(sp)
   142f0:	010001c4 	movi	r4,7
   142f4:	20805c16 	blt	r4,r2,14468 <___vfprintf_internal_r+0x1bd0>
   142f8:	42000204 	addi	r8,r8,8
   142fc:	8800041e 	bne	r17,zero,14310 <___vfprintf_internal_r+0x1a78>
   14300:	d8803317 	ldw	r2,204(sp)
   14304:	1000021e 	bne	r2,zero,14310 <___vfprintf_internal_r+0x1a78>
   14308:	9080004c 	andi	r2,r18,1
   1430c:	103be726 	beq	r2,zero,132ac <__alt_data_end+0xfc0132ac>
   14310:	d9003717 	ldw	r4,220(sp)
   14314:	d8801f17 	ldw	r2,124(sp)
   14318:	d9403417 	ldw	r5,208(sp)
   1431c:	20c7883a 	add	r3,r4,r3
   14320:	10800044 	addi	r2,r2,1
   14324:	41000115 	stw	r4,4(r8)
   14328:	41400015 	stw	r5,0(r8)
   1432c:	d8c02015 	stw	r3,128(sp)
   14330:	d8801f15 	stw	r2,124(sp)
   14334:	010001c4 	movi	r4,7
   14338:	20812116 	blt	r4,r2,147c0 <___vfprintf_internal_r+0x1f28>
   1433c:	42000204 	addi	r8,r8,8
   14340:	0463c83a 	sub	r17,zero,r17
   14344:	0440730e 	bge	zero,r17,14514 <___vfprintf_internal_r+0x1c7c>
   14348:	05800404 	movi	r22,16
   1434c:	b440860e 	bge	r22,r17,14568 <___vfprintf_internal_r+0x1cd0>
   14350:	014000f4 	movhi	r5,3
   14354:	296e0c84 	addi	r5,r5,-18382
   14358:	d9402c15 	stw	r5,176(sp)
   1435c:	070001c4 	movi	fp,7
   14360:	dcc02d17 	ldw	r19,180(sp)
   14364:	00000306 	br	14374 <___vfprintf_internal_r+0x1adc>
   14368:	42000204 	addi	r8,r8,8
   1436c:	8c7ffc04 	addi	r17,r17,-16
   14370:	b440800e 	bge	r22,r17,14574 <___vfprintf_internal_r+0x1cdc>
   14374:	18c00404 	addi	r3,r3,16
   14378:	10800044 	addi	r2,r2,1
   1437c:	45000015 	stw	r20,0(r8)
   14380:	45800115 	stw	r22,4(r8)
   14384:	d8c02015 	stw	r3,128(sp)
   14388:	d8801f15 	stw	r2,124(sp)
   1438c:	e0bff60e 	bge	fp,r2,14368 <__alt_data_end+0xfc014368>
   14390:	d9801e04 	addi	r6,sp,120
   14394:	b80b883a 	mov	r5,r23
   14398:	9809883a 	mov	r4,r19
   1439c:	001aba40 	call	1aba4 <__sprint_r>
   143a0:	103a411e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   143a4:	d8c02017 	ldw	r3,128(sp)
   143a8:	d8801f17 	ldw	r2,124(sp)
   143ac:	da000404 	addi	r8,sp,16
   143b0:	003fee06 	br	1436c <__alt_data_end+0xfc01436c>
   143b4:	00bfffc4 	movi	r2,-1
   143b8:	003a3f06 	br	12cb8 <__alt_data_end+0xfc012cb8>
   143bc:	008011c4 	movi	r2,71
   143c0:	1440b816 	blt	r2,r17,146a4 <___vfprintf_internal_r+0x1e0c>
   143c4:	040000f4 	movhi	r16,3
   143c8:	842df604 	addi	r16,r16,-18472
   143cc:	00c000c4 	movi	r3,3
   143d0:	00bfdfc4 	movi	r2,-129
   143d4:	d8c02915 	stw	r3,164(sp)
   143d8:	90a4703a 	and	r18,r18,r2
   143dc:	df002783 	ldbu	fp,158(sp)
   143e0:	d8c02b15 	stw	r3,172(sp)
   143e4:	d8002a15 	stw	zero,168(sp)
   143e8:	d8003215 	stw	zero,200(sp)
   143ec:	003b0706 	br	1300c <__alt_data_end+0xfc01300c>
   143f0:	d8c02e17 	ldw	r3,184(sp)
   143f4:	1cc00017 	ldw	r19,0(r3)
   143f8:	18c00104 	addi	r3,r3,4
   143fc:	d8c02e15 	stw	r3,184(sp)
   14400:	982dd7fa 	srai	r22,r19,31
   14404:	b005883a 	mov	r2,r22
   14408:	003a7706 	br	12de8 <__alt_data_end+0xfc012de8>
   1440c:	d8c02e17 	ldw	r3,184(sp)
   14410:	d9002f17 	ldw	r4,188(sp)
   14414:	18800017 	ldw	r2,0(r3)
   14418:	18c00104 	addi	r3,r3,4
   1441c:	d8c02e15 	stw	r3,184(sp)
   14420:	11000015 	stw	r4,0(r2)
   14424:	00395406 	br	12978 <__alt_data_end+0xfc012978>
   14428:	d9002e17 	ldw	r4,184(sp)
   1442c:	002d883a 	mov	r22,zero
   14430:	24c00017 	ldw	r19,0(r4)
   14434:	21000104 	addi	r4,r4,4
   14438:	d9002e15 	stw	r4,184(sp)
   1443c:	003c0706 	br	1345c <__alt_data_end+0xfc01345c>
   14440:	d9402e17 	ldw	r5,184(sp)
   14444:	d8c02a17 	ldw	r3,168(sp)
   14448:	002d883a 	mov	r22,zero
   1444c:	28800104 	addi	r2,r5,4
   14450:	2cc0000b 	ldhu	r19,0(r5)
   14454:	183dc10e 	bge	r3,zero,13b5c <__alt_data_end+0xfc013b5c>
   14458:	003f7506 	br	14230 <__alt_data_end+0xfc014230>
   1445c:	040000f4 	movhi	r16,3
   14460:	842df404 	addi	r16,r16,-18480
   14464:	003aa706 	br	12f04 <__alt_data_end+0xfc012f04>
   14468:	d9002d17 	ldw	r4,180(sp)
   1446c:	d9801e04 	addi	r6,sp,120
   14470:	b80b883a 	mov	r5,r23
   14474:	001aba40 	call	1aba4 <__sprint_r>
   14478:	103a0b1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   1447c:	dc402617 	ldw	r17,152(sp)
   14480:	d8c02017 	ldw	r3,128(sp)
   14484:	da000404 	addi	r8,sp,16
   14488:	003f9c06 	br	142fc <__alt_data_end+0xfc0142fc>
   1448c:	ac400043 	ldbu	r17,1(r21)
   14490:	84000814 	ori	r16,r16,32
   14494:	ad400044 	addi	r21,r21,1
   14498:	8c403fcc 	andi	r17,r17,255
   1449c:	8c40201c 	xori	r17,r17,128
   144a0:	8c7fe004 	addi	r17,r17,-128
   144a4:	00395e06 	br	12a20 <__alt_data_end+0xfc012a20>
   144a8:	d8c02e15 	stw	r3,184(sp)
   144ac:	0039883a 	mov	fp,zero
   144b0:	003e3506 	br	13d88 <__alt_data_end+0xfc013d88>
   144b4:	d9002d17 	ldw	r4,180(sp)
   144b8:	d9801e04 	addi	r6,sp,120
   144bc:	b80b883a 	mov	r5,r23
   144c0:	001aba40 	call	1aba4 <__sprint_r>
   144c4:	1039f81e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   144c8:	d8c02017 	ldw	r3,128(sp)
   144cc:	da000404 	addi	r8,sp,16
   144d0:	003cd006 	br	13814 <__alt_data_end+0xfc013814>
   144d4:	8009883a 	mov	r4,r16
   144d8:	df003d15 	stw	fp,244(sp)
   144dc:	001053c0 	call	1053c <strlen>
   144e0:	d8802b15 	stw	r2,172(sp)
   144e4:	da003d17 	ldw	r8,244(sp)
   144e8:	103c200e 	bge	r2,zero,1356c <__alt_data_end+0xfc01356c>
   144ec:	0005883a 	mov	r2,zero
   144f0:	003c1e06 	br	1356c <__alt_data_end+0xfc01356c>
   144f4:	d9002d17 	ldw	r4,180(sp)
   144f8:	d9801e04 	addi	r6,sp,120
   144fc:	b80b883a 	mov	r5,r23
   14500:	001aba40 	call	1aba4 <__sprint_r>
   14504:	1039e81e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   14508:	d8c02017 	ldw	r3,128(sp)
   1450c:	d8801f17 	ldw	r2,124(sp)
   14510:	da000404 	addi	r8,sp,16
   14514:	d9403317 	ldw	r5,204(sp)
   14518:	10800044 	addi	r2,r2,1
   1451c:	44000015 	stw	r16,0(r8)
   14520:	28c7883a 	add	r3,r5,r3
   14524:	003b5b06 	br	13294 <__alt_data_end+0xfc013294>
   14528:	010000f4 	movhi	r4,3
   1452c:	212e1084 	addi	r4,r4,-18366
   14530:	d9003515 	stw	r4,212(sp)
   14534:	003af206 	br	13100 <__alt_data_end+0xfc013100>
   14538:	013fffc4 	movi	r4,-1
   1453c:	003a0806 	br	12d60 <__alt_data_end+0xfc012d60>
   14540:	0023883a 	mov	r17,zero
   14544:	003d9d06 	br	13bbc <__alt_data_end+0xfc013bbc>
   14548:	d9002d17 	ldw	r4,180(sp)
   1454c:	d9801e04 	addi	r6,sp,120
   14550:	b80b883a 	mov	r5,r23
   14554:	001aba40 	call	1aba4 <__sprint_r>
   14558:	1039d31e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   1455c:	d8c02017 	ldw	r3,128(sp)
   14560:	da000404 	addi	r8,sp,16
   14564:	003d9406 	br	13bb8 <__alt_data_end+0xfc013bb8>
   14568:	010000f4 	movhi	r4,3
   1456c:	212e0c84 	addi	r4,r4,-18382
   14570:	d9002c15 	stw	r4,176(sp)
   14574:	d9002c17 	ldw	r4,176(sp)
   14578:	1c47883a 	add	r3,r3,r17
   1457c:	10800044 	addi	r2,r2,1
   14580:	41000015 	stw	r4,0(r8)
   14584:	44400115 	stw	r17,4(r8)
   14588:	d8c02015 	stw	r3,128(sp)
   1458c:	d8801f15 	stw	r2,124(sp)
   14590:	010001c4 	movi	r4,7
   14594:	20bfd716 	blt	r4,r2,144f4 <__alt_data_end+0xfc0144f4>
   14598:	42000204 	addi	r8,r8,8
   1459c:	003fdd06 	br	14514 <__alt_data_end+0xfc014514>
   145a0:	d9002d17 	ldw	r4,180(sp)
   145a4:	d9801e04 	addi	r6,sp,120
   145a8:	b80b883a 	mov	r5,r23
   145ac:	001aba40 	call	1aba4 <__sprint_r>
   145b0:	1039bd1e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   145b4:	d8802617 	ldw	r2,152(sp)
   145b8:	d8c02017 	ldw	r3,128(sp)
   145bc:	da000404 	addi	r8,sp,16
   145c0:	003e1006 	br	13e04 <__alt_data_end+0xfc013e04>
   145c4:	00800044 	movi	r2,1
   145c8:	10803fcc 	andi	r2,r2,255
   145cc:	00c00044 	movi	r3,1
   145d0:	10fa0d26 	beq	r2,r3,12e08 <__alt_data_end+0xfc012e08>
   145d4:	00c00084 	movi	r3,2
   145d8:	10fbaf26 	beq	r2,r3,13498 <__alt_data_end+0xfc013498>
   145dc:	003a6d06 	br	12f94 <__alt_data_end+0xfc012f94>
   145e0:	010000f4 	movhi	r4,3
   145e4:	212e1084 	addi	r4,r4,-18366
   145e8:	d9003515 	stw	r4,212(sp)
   145ec:	003b5406 	br	13340 <__alt_data_end+0xfc013340>
   145f0:	d8802a17 	ldw	r2,168(sp)
   145f4:	00c00184 	movi	r3,6
   145f8:	1880012e 	bgeu	r3,r2,14600 <___vfprintf_internal_r+0x1d68>
   145fc:	1805883a 	mov	r2,r3
   14600:	d8802b15 	stw	r2,172(sp)
   14604:	1000ef16 	blt	r2,zero,149c4 <___vfprintf_internal_r+0x212c>
   14608:	040000f4 	movhi	r16,3
   1460c:	d8802915 	stw	r2,164(sp)
   14610:	dcc02e15 	stw	r19,184(sp)
   14614:	d8002a15 	stw	zero,168(sp)
   14618:	d8003215 	stw	zero,200(sp)
   1461c:	842e0204 	addi	r16,r16,-18424
   14620:	0039883a 	mov	fp,zero
   14624:	003a8006 	br	13028 <__alt_data_end+0xfc013028>
   14628:	0021883a 	mov	r16,zero
   1462c:	003e0706 	br	13e4c <__alt_data_end+0xfc013e4c>
   14630:	d9002d17 	ldw	r4,180(sp)
   14634:	d9801e04 	addi	r6,sp,120
   14638:	b80b883a 	mov	r5,r23
   1463c:	001aba40 	call	1aba4 <__sprint_r>
   14640:	1039991e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   14644:	d8802617 	ldw	r2,152(sp)
   14648:	d9403317 	ldw	r5,204(sp)
   1464c:	d8c02017 	ldw	r3,128(sp)
   14650:	da000404 	addi	r8,sp,16
   14654:	2885c83a 	sub	r2,r5,r2
   14658:	003dfb06 	br	13e48 <__alt_data_end+0xfc013e48>
   1465c:	9080004c 	andi	r2,r18,1
   14660:	103e8f1e 	bne	r2,zero,140a0 <__alt_data_end+0xfc0140a0>
   14664:	d8802117 	ldw	r2,132(sp)
   14668:	003e9e06 	br	140e4 <__alt_data_end+0xfc0140e4>
   1466c:	1025883a 	mov	r18,r2
   14670:	0039883a 	mov	fp,zero
   14674:	00800084 	movi	r2,2
   14678:	003fd306 	br	145c8 <__alt_data_end+0xfc0145c8>
   1467c:	07000b44 	movi	fp,45
   14680:	df002785 	stb	fp,158(sp)
   14684:	003a1b06 	br	12ef4 <__alt_data_end+0xfc012ef4>
   14688:	00c00b44 	movi	r3,45
   1468c:	d8c02785 	stb	r3,158(sp)
   14690:	d8802915 	stw	r2,164(sp)
   14694:	dc802c17 	ldw	r18,176(sp)
   14698:	d8002a15 	stw	zero,168(sp)
   1469c:	07000b44 	movi	fp,45
   146a0:	003a5e06 	br	1301c <__alt_data_end+0xfc01301c>
   146a4:	040000f4 	movhi	r16,3
   146a8:	842df704 	addi	r16,r16,-18468
   146ac:	003f4706 	br	143cc <__alt_data_end+0xfc0143cc>
   146b0:	d9002e17 	ldw	r4,184(sp)
   146b4:	d9402f17 	ldw	r5,188(sp)
   146b8:	20800017 	ldw	r2,0(r4)
   146bc:	21000104 	addi	r4,r4,4
   146c0:	d9002e15 	stw	r4,184(sp)
   146c4:	11400015 	stw	r5,0(r2)
   146c8:	0038ab06 	br	12978 <__alt_data_end+0xfc012978>
   146cc:	dd802617 	ldw	r22,152(sp)
   146d0:	00bfff44 	movi	r2,-3
   146d4:	b0801c16 	blt	r22,r2,14748 <___vfprintf_internal_r+0x1eb0>
   146d8:	d9402a17 	ldw	r5,168(sp)
   146dc:	2d801a16 	blt	r5,r22,14748 <___vfprintf_internal_r+0x1eb0>
   146e0:	dd803215 	stw	r22,200(sp)
   146e4:	003e8906 	br	1410c <__alt_data_end+0xfc01410c>
   146e8:	010000f4 	movhi	r4,3
   146ec:	212e0c84 	addi	r4,r4,-18382
   146f0:	d9002c15 	stw	r4,176(sp)
   146f4:	003c9106 	br	1393c <__alt_data_end+0xfc01393c>
   146f8:	e005883a 	mov	r2,fp
   146fc:	003e7906 	br	140e4 <__alt_data_end+0xfc0140e4>
   14700:	d9002a17 	ldw	r4,168(sp)
   14704:	df002783 	ldbu	fp,158(sp)
   14708:	dcc02e15 	stw	r19,184(sp)
   1470c:	d9002915 	stw	r4,164(sp)
   14710:	d9002b15 	stw	r4,172(sp)
   14714:	d8002a15 	stw	zero,168(sp)
   14718:	d8003215 	stw	zero,200(sp)
   1471c:	003a3b06 	br	1300c <__alt_data_end+0xfc01300c>
   14720:	9080004c 	andi	r2,r18,1
   14724:	0039883a 	mov	fp,zero
   14728:	10000426 	beq	r2,zero,1473c <___vfprintf_internal_r+0x1ea4>
   1472c:	00800c04 	movi	r2,48
   14730:	dc001dc4 	addi	r16,sp,119
   14734:	d8801dc5 	stb	r2,119(sp)
   14738:	003b6406 	br	134cc <__alt_data_end+0xfc0134cc>
   1473c:	d8002b15 	stw	zero,172(sp)
   14740:	dc001e04 	addi	r16,sp,120
   14744:	003a2b06 	br	12ff4 <__alt_data_end+0xfc012ff4>
   14748:	8c7fff84 	addi	r17,r17,-2
   1474c:	b5bfffc4 	addi	r22,r22,-1
   14750:	dd802615 	stw	r22,152(sp)
   14754:	dc4022c5 	stb	r17,139(sp)
   14758:	b000bf16 	blt	r22,zero,14a58 <___vfprintf_internal_r+0x21c0>
   1475c:	00800ac4 	movi	r2,43
   14760:	d8802305 	stb	r2,140(sp)
   14764:	00800244 	movi	r2,9
   14768:	15807016 	blt	r2,r22,1492c <___vfprintf_internal_r+0x2094>
   1476c:	00800c04 	movi	r2,48
   14770:	b5800c04 	addi	r22,r22,48
   14774:	d8802345 	stb	r2,141(sp)
   14778:	dd802385 	stb	r22,142(sp)
   1477c:	d88023c4 	addi	r2,sp,143
   14780:	df0022c4 	addi	fp,sp,139
   14784:	d8c03317 	ldw	r3,204(sp)
   14788:	1739c83a 	sub	fp,r2,fp
   1478c:	d9003317 	ldw	r4,204(sp)
   14790:	e0c7883a 	add	r3,fp,r3
   14794:	df003a15 	stw	fp,232(sp)
   14798:	d8c02b15 	stw	r3,172(sp)
   1479c:	00800044 	movi	r2,1
   147a0:	1100b30e 	bge	r2,r4,14a70 <___vfprintf_internal_r+0x21d8>
   147a4:	d8c02b17 	ldw	r3,172(sp)
   147a8:	18c00044 	addi	r3,r3,1
   147ac:	d8c02b15 	stw	r3,172(sp)
   147b0:	1805883a 	mov	r2,r3
   147b4:	1800ac16 	blt	r3,zero,14a68 <___vfprintf_internal_r+0x21d0>
   147b8:	d8003215 	stw	zero,200(sp)
   147bc:	003e5d06 	br	14134 <__alt_data_end+0xfc014134>
   147c0:	d9002d17 	ldw	r4,180(sp)
   147c4:	d9801e04 	addi	r6,sp,120
   147c8:	b80b883a 	mov	r5,r23
   147cc:	001aba40 	call	1aba4 <__sprint_r>
   147d0:	1039351e 	bne	r2,zero,12ca8 <__alt_data_end+0xfc012ca8>
   147d4:	dc402617 	ldw	r17,152(sp)
   147d8:	d8c02017 	ldw	r3,128(sp)
   147dc:	d8801f17 	ldw	r2,124(sp)
   147e0:	da000404 	addi	r8,sp,16
   147e4:	003ed606 	br	14340 <__alt_data_end+0xfc014340>
   147e8:	182b883a 	mov	r21,r3
   147ec:	d8002a15 	stw	zero,168(sp)
   147f0:	00388c06 	br	12a24 <__alt_data_end+0xfc012a24>
   147f4:	d8802a17 	ldw	r2,168(sp)
   147f8:	103e071e 	bne	r2,zero,14018 <__alt_data_end+0xfc014018>
   147fc:	dc002a15 	stw	r16,168(sp)
   14800:	003e0506 	br	14018 <__alt_data_end+0xfc014018>
   14804:	d9002a17 	ldw	r4,168(sp)
   14808:	20c00044 	addi	r3,r4,1
   1480c:	003e0f06 	br	1404c <__alt_data_end+0xfc01404c>
   14810:	01400184 	movi	r5,6
   14814:	d9402a15 	stw	r5,168(sp)
   14818:	003dff06 	br	14018 <__alt_data_end+0xfc014018>
   1481c:	d8802104 	addi	r2,sp,132
   14820:	d8800315 	stw	r2,12(sp)
   14824:	d8802504 	addi	r2,sp,148
   14828:	d8800215 	stw	r2,8(sp)
   1482c:	d8802604 	addi	r2,sp,152
   14830:	d8800115 	stw	r2,4(sp)
   14834:	d8802a17 	ldw	r2,168(sp)
   14838:	d9403617 	ldw	r5,216(sp)
   1483c:	d9002d17 	ldw	r4,180(sp)
   14840:	d8800015 	stw	r2,0(sp)
   14844:	01c000c4 	movi	r7,3
   14848:	980d883a 	mov	r6,r19
   1484c:	da003d15 	stw	r8,244(sp)
   14850:	0014fc80 	call	14fc8 <_dtoa_r>
   14854:	d8c02a17 	ldw	r3,168(sp)
   14858:	da003d17 	ldw	r8,244(sp)
   1485c:	1021883a 	mov	r16,r2
   14860:	10f9883a 	add	fp,r2,r3
   14864:	81000007 	ldb	r4,0(r16)
   14868:	00800c04 	movi	r2,48
   1486c:	20805e26 	beq	r4,r2,149e8 <___vfprintf_internal_r+0x2150>
   14870:	d8c02617 	ldw	r3,152(sp)
   14874:	e0f9883a 	add	fp,fp,r3
   14878:	003e0a06 	br	140a4 <__alt_data_end+0xfc0140a4>
   1487c:	00c00b44 	movi	r3,45
   14880:	24e0003c 	xorhi	r19,r4,32768
   14884:	d8c02905 	stb	r3,164(sp)
   14888:	003de906 	br	14030 <__alt_data_end+0xfc014030>
   1488c:	d8c03217 	ldw	r3,200(sp)
   14890:	00c07a0e 	bge	zero,r3,14a7c <___vfprintf_internal_r+0x21e4>
   14894:	00800044 	movi	r2,1
   14898:	d9003317 	ldw	r4,204(sp)
   1489c:	1105883a 	add	r2,r2,r4
   148a0:	d8802b15 	stw	r2,172(sp)
   148a4:	10004e16 	blt	r2,zero,149e0 <___vfprintf_internal_r+0x2148>
   148a8:	044019c4 	movi	r17,103
   148ac:	003e2106 	br	14134 <__alt_data_end+0xfc014134>
   148b0:	d9002a17 	ldw	r4,168(sp)
   148b4:	d8802104 	addi	r2,sp,132
   148b8:	d8800315 	stw	r2,12(sp)
   148bc:	d9000015 	stw	r4,0(sp)
   148c0:	d8802504 	addi	r2,sp,148
   148c4:	d9403617 	ldw	r5,216(sp)
   148c8:	d9002d17 	ldw	r4,180(sp)
   148cc:	d8800215 	stw	r2,8(sp)
   148d0:	d8802604 	addi	r2,sp,152
   148d4:	d8800115 	stw	r2,4(sp)
   148d8:	01c000c4 	movi	r7,3
   148dc:	980d883a 	mov	r6,r19
   148e0:	da003d15 	stw	r8,244(sp)
   148e4:	0014fc80 	call	14fc8 <_dtoa_r>
   148e8:	d8c02a17 	ldw	r3,168(sp)
   148ec:	da003d17 	ldw	r8,244(sp)
   148f0:	1021883a 	mov	r16,r2
   148f4:	00801184 	movi	r2,70
   148f8:	80f9883a 	add	fp,r16,r3
   148fc:	88bfd926 	beq	r17,r2,14864 <__alt_data_end+0xfc014864>
   14900:	003de806 	br	140a4 <__alt_data_end+0xfc0140a4>
   14904:	d9002a17 	ldw	r4,168(sp)
   14908:	00c04d0e 	bge	zero,r3,14a40 <___vfprintf_internal_r+0x21a8>
   1490c:	2000441e 	bne	r4,zero,14a20 <___vfprintf_internal_r+0x2188>
   14910:	9480004c 	andi	r18,r18,1
   14914:	9000421e 	bne	r18,zero,14a20 <___vfprintf_internal_r+0x2188>
   14918:	1805883a 	mov	r2,r3
   1491c:	18006f16 	blt	r3,zero,14adc <___vfprintf_internal_r+0x2244>
   14920:	d8c03217 	ldw	r3,200(sp)
   14924:	d8c02b15 	stw	r3,172(sp)
   14928:	003e0206 	br	14134 <__alt_data_end+0xfc014134>
   1492c:	df0022c4 	addi	fp,sp,139
   14930:	dc002a15 	stw	r16,168(sp)
   14934:	4027883a 	mov	r19,r8
   14938:	e021883a 	mov	r16,fp
   1493c:	b009883a 	mov	r4,r22
   14940:	01400284 	movi	r5,10
   14944:	000d7a40 	call	d7a4 <__modsi3>
   14948:	10800c04 	addi	r2,r2,48
   1494c:	843fffc4 	addi	r16,r16,-1
   14950:	b009883a 	mov	r4,r22
   14954:	01400284 	movi	r5,10
   14958:	80800005 	stb	r2,0(r16)
   1495c:	000d7200 	call	d720 <__divsi3>
   14960:	102d883a 	mov	r22,r2
   14964:	00800244 	movi	r2,9
   14968:	15bff416 	blt	r2,r22,1493c <__alt_data_end+0xfc01493c>
   1496c:	9811883a 	mov	r8,r19
   14970:	b0800c04 	addi	r2,r22,48
   14974:	8027883a 	mov	r19,r16
   14978:	997fffc4 	addi	r5,r19,-1
   1497c:	98bfffc5 	stb	r2,-1(r19)
   14980:	dc002a17 	ldw	r16,168(sp)
   14984:	2f006d2e 	bgeu	r5,fp,14b3c <___vfprintf_internal_r+0x22a4>
   14988:	d9c02384 	addi	r7,sp,142
   1498c:	3ccfc83a 	sub	r7,r7,r19
   14990:	d9002344 	addi	r4,sp,141
   14994:	e1cf883a 	add	r7,fp,r7
   14998:	00000106 	br	149a0 <___vfprintf_internal_r+0x2108>
   1499c:	28800003 	ldbu	r2,0(r5)
   149a0:	20800005 	stb	r2,0(r4)
   149a4:	21000044 	addi	r4,r4,1
   149a8:	29400044 	addi	r5,r5,1
   149ac:	393ffb1e 	bne	r7,r4,1499c <__alt_data_end+0xfc01499c>
   149b0:	d8802304 	addi	r2,sp,140
   149b4:	14c5c83a 	sub	r2,r2,r19
   149b8:	d8c02344 	addi	r3,sp,141
   149bc:	1885883a 	add	r2,r3,r2
   149c0:	003f7006 	br	14784 <__alt_data_end+0xfc014784>
   149c4:	0005883a 	mov	r2,zero
   149c8:	003f0f06 	br	14608 <__alt_data_end+0xfc014608>
   149cc:	d8c03217 	ldw	r3,200(sp)
   149d0:	18c00044 	addi	r3,r3,1
   149d4:	d8c02b15 	stw	r3,172(sp)
   149d8:	1805883a 	mov	r2,r3
   149dc:	183fb20e 	bge	r3,zero,148a8 <__alt_data_end+0xfc0148a8>
   149e0:	0005883a 	mov	r2,zero
   149e4:	003fb006 	br	148a8 <__alt_data_end+0xfc0148a8>
   149e8:	d9003617 	ldw	r4,216(sp)
   149ec:	000d883a 	mov	r6,zero
   149f0:	000f883a 	mov	r7,zero
   149f4:	980b883a 	mov	r5,r19
   149f8:	d8c03c15 	stw	r3,240(sp)
   149fc:	da003d15 	stw	r8,244(sp)
   14a00:	001e9280 	call	1e928 <__eqdf2>
   14a04:	d8c03c17 	ldw	r3,240(sp)
   14a08:	da003d17 	ldw	r8,244(sp)
   14a0c:	103f9826 	beq	r2,zero,14870 <__alt_data_end+0xfc014870>
   14a10:	00800044 	movi	r2,1
   14a14:	10c7c83a 	sub	r3,r2,r3
   14a18:	d8c02615 	stw	r3,152(sp)
   14a1c:	003f9506 	br	14874 <__alt_data_end+0xfc014874>
   14a20:	d9002a17 	ldw	r4,168(sp)
   14a24:	d8c03217 	ldw	r3,200(sp)
   14a28:	20800044 	addi	r2,r4,1
   14a2c:	1885883a 	add	r2,r3,r2
   14a30:	d8802b15 	stw	r2,172(sp)
   14a34:	103dbf0e 	bge	r2,zero,14134 <__alt_data_end+0xfc014134>
   14a38:	0005883a 	mov	r2,zero
   14a3c:	003dbd06 	br	14134 <__alt_data_end+0xfc014134>
   14a40:	2000201e 	bne	r4,zero,14ac4 <___vfprintf_internal_r+0x222c>
   14a44:	9480004c 	andi	r18,r18,1
   14a48:	90001e1e 	bne	r18,zero,14ac4 <___vfprintf_internal_r+0x222c>
   14a4c:	00800044 	movi	r2,1
   14a50:	d8802b15 	stw	r2,172(sp)
   14a54:	003db706 	br	14134 <__alt_data_end+0xfc014134>
   14a58:	00800b44 	movi	r2,45
   14a5c:	05adc83a 	sub	r22,zero,r22
   14a60:	d8802305 	stb	r2,140(sp)
   14a64:	003f3f06 	br	14764 <__alt_data_end+0xfc014764>
   14a68:	0005883a 	mov	r2,zero
   14a6c:	003f5206 	br	147b8 <__alt_data_end+0xfc0147b8>
   14a70:	90a4703a 	and	r18,r18,r2
   14a74:	903f4e26 	beq	r18,zero,147b0 <__alt_data_end+0xfc0147b0>
   14a78:	003f4a06 	br	147a4 <__alt_data_end+0xfc0147a4>
   14a7c:	00800084 	movi	r2,2
   14a80:	10c5c83a 	sub	r2,r2,r3
   14a84:	003f8406 	br	14898 <__alt_data_end+0xfc014898>
   14a88:	d9402e17 	ldw	r5,184(sp)
   14a8c:	d9002e17 	ldw	r4,184(sp)
   14a90:	ac400043 	ldbu	r17,1(r21)
   14a94:	29400017 	ldw	r5,0(r5)
   14a98:	20800104 	addi	r2,r4,4
   14a9c:	d8802e15 	stw	r2,184(sp)
   14aa0:	d9402a15 	stw	r5,168(sp)
   14aa4:	182b883a 	mov	r21,r3
   14aa8:	283e7b0e 	bge	r5,zero,14498 <__alt_data_end+0xfc014498>
   14aac:	8c403fcc 	andi	r17,r17,255
   14ab0:	017fffc4 	movi	r5,-1
   14ab4:	8c40201c 	xori	r17,r17,128
   14ab8:	d9402a15 	stw	r5,168(sp)
   14abc:	8c7fe004 	addi	r17,r17,-128
   14ac0:	0037d706 	br	12a20 <__alt_data_end+0xfc012a20>
   14ac4:	d8c02a17 	ldw	r3,168(sp)
   14ac8:	18c00084 	addi	r3,r3,2
   14acc:	d8c02b15 	stw	r3,172(sp)
   14ad0:	1805883a 	mov	r2,r3
   14ad4:	183d970e 	bge	r3,zero,14134 <__alt_data_end+0xfc014134>
   14ad8:	003fd706 	br	14a38 <__alt_data_end+0xfc014a38>
   14adc:	0005883a 	mov	r2,zero
   14ae0:	003f8f06 	br	14920 <__alt_data_end+0xfc014920>
   14ae4:	9080004c 	andi	r2,r18,1
   14ae8:	103f821e 	bne	r2,zero,148f4 <__alt_data_end+0xfc0148f4>
   14aec:	d8802117 	ldw	r2,132(sp)
   14af0:	1405c83a 	sub	r2,r2,r16
   14af4:	d8803315 	stw	r2,204(sp)
   14af8:	b47ef426 	beq	r22,r17,146cc <__alt_data_end+0xfc0146cc>
   14afc:	dd802617 	ldw	r22,152(sp)
   14b00:	003f1206 	br	1474c <__alt_data_end+0xfc01474c>
   14b04:	d8c02b03 	ldbu	r3,172(sp)
   14b08:	d8c02785 	stb	r3,158(sp)
   14b0c:	0038df06 	br	12e8c <__alt_data_end+0xfc012e8c>
   14b10:	d8c02b03 	ldbu	r3,172(sp)
   14b14:	d8c02785 	stb	r3,158(sp)
   14b18:	0038aa06 	br	12dc4 <__alt_data_end+0xfc012dc4>
   14b1c:	d8c02b03 	ldbu	r3,172(sp)
   14b20:	d8c02785 	stb	r3,158(sp)
   14b24:	003a4306 	br	13434 <__alt_data_end+0xfc013434>
   14b28:	d8c02b03 	ldbu	r3,172(sp)
   14b2c:	d8c02785 	stb	r3,158(sp)
   14b30:	003af506 	br	13708 <__alt_data_end+0xfc013708>
   14b34:	0005883a 	mov	r2,zero
   14b38:	003d7b06 	br	14128 <__alt_data_end+0xfc014128>
   14b3c:	d8802344 	addi	r2,sp,141
   14b40:	003f1006 	br	14784 <__alt_data_end+0xfc014784>
   14b44:	d8c02b03 	ldbu	r3,172(sp)
   14b48:	d8c02785 	stb	r3,158(sp)
   14b4c:	0038fd06 	br	12f44 <__alt_data_end+0xfc012f44>
   14b50:	d8c02b03 	ldbu	r3,172(sp)
   14b54:	d8c02785 	stb	r3,158(sp)
   14b58:	003a9706 	br	135b8 <__alt_data_end+0xfc0135b8>
   14b5c:	d8c02b03 	ldbu	r3,172(sp)
   14b60:	d8c02785 	stb	r3,158(sp)
   14b64:	003a1806 	br	133c8 <__alt_data_end+0xfc0133c8>
   14b68:	d8c02b03 	ldbu	r3,172(sp)
   14b6c:	d8c02785 	stb	r3,158(sp)
   14b70:	003abe06 	br	1366c <__alt_data_end+0xfc01366c>

00014b74 <__vfprintf_internal>:
   14b74:	008000f4 	movhi	r2,3
   14b78:	10baf904 	addi	r2,r2,-5148
   14b7c:	300f883a 	mov	r7,r6
   14b80:	280d883a 	mov	r6,r5
   14b84:	200b883a 	mov	r5,r4
   14b88:	11000017 	ldw	r4,0(r2)
   14b8c:	00128981 	jmpi	12898 <___vfprintf_internal_r>

00014b90 <__sbprintf>:
   14b90:	2880030b 	ldhu	r2,12(r5)
   14b94:	2ac01917 	ldw	r11,100(r5)
   14b98:	2a80038b 	ldhu	r10,14(r5)
   14b9c:	2a400717 	ldw	r9,28(r5)
   14ba0:	2a000917 	ldw	r8,36(r5)
   14ba4:	defee204 	addi	sp,sp,-1144
   14ba8:	00c10004 	movi	r3,1024
   14bac:	dc011a15 	stw	r16,1128(sp)
   14bb0:	10bfff4c 	andi	r2,r2,65533
   14bb4:	2821883a 	mov	r16,r5
   14bb8:	d8cb883a 	add	r5,sp,r3
   14bbc:	dc811c15 	stw	r18,1136(sp)
   14bc0:	dc411b15 	stw	r17,1132(sp)
   14bc4:	dfc11d15 	stw	ra,1140(sp)
   14bc8:	2025883a 	mov	r18,r4
   14bcc:	d881030d 	sth	r2,1036(sp)
   14bd0:	dac11915 	stw	r11,1124(sp)
   14bd4:	da81038d 	sth	r10,1038(sp)
   14bd8:	da410715 	stw	r9,1052(sp)
   14bdc:	da010915 	stw	r8,1060(sp)
   14be0:	dec10015 	stw	sp,1024(sp)
   14be4:	dec10415 	stw	sp,1040(sp)
   14be8:	d8c10215 	stw	r3,1032(sp)
   14bec:	d8c10515 	stw	r3,1044(sp)
   14bf0:	d8010615 	stw	zero,1048(sp)
   14bf4:	00128980 	call	12898 <___vfprintf_internal_r>
   14bf8:	1023883a 	mov	r17,r2
   14bfc:	10000416 	blt	r2,zero,14c10 <__sbprintf+0x80>
   14c00:	d9410004 	addi	r5,sp,1024
   14c04:	9009883a 	mov	r4,r18
   14c08:	001686c0 	call	1686c <_fflush_r>
   14c0c:	10000d1e 	bne	r2,zero,14c44 <__sbprintf+0xb4>
   14c10:	d881030b 	ldhu	r2,1036(sp)
   14c14:	1080100c 	andi	r2,r2,64
   14c18:	10000326 	beq	r2,zero,14c28 <__sbprintf+0x98>
   14c1c:	8080030b 	ldhu	r2,12(r16)
   14c20:	10801014 	ori	r2,r2,64
   14c24:	8080030d 	sth	r2,12(r16)
   14c28:	8805883a 	mov	r2,r17
   14c2c:	dfc11d17 	ldw	ra,1140(sp)
   14c30:	dc811c17 	ldw	r18,1136(sp)
   14c34:	dc411b17 	ldw	r17,1132(sp)
   14c38:	dc011a17 	ldw	r16,1128(sp)
   14c3c:	dec11e04 	addi	sp,sp,1144
   14c40:	f800283a 	ret
   14c44:	047fffc4 	movi	r17,-1
   14c48:	003ff106 	br	14c10 <__alt_data_end+0xfc014c10>

00014c4c <__swsetup_r>:
   14c4c:	008000f4 	movhi	r2,3
   14c50:	defffd04 	addi	sp,sp,-12
   14c54:	10baf904 	addi	r2,r2,-5148
   14c58:	dc400115 	stw	r17,4(sp)
   14c5c:	2023883a 	mov	r17,r4
   14c60:	11000017 	ldw	r4,0(r2)
   14c64:	dc000015 	stw	r16,0(sp)
   14c68:	dfc00215 	stw	ra,8(sp)
   14c6c:	2821883a 	mov	r16,r5
   14c70:	20000226 	beq	r4,zero,14c7c <__swsetup_r+0x30>
   14c74:	20800e17 	ldw	r2,56(r4)
   14c78:	10003126 	beq	r2,zero,14d40 <__swsetup_r+0xf4>
   14c7c:	8080030b 	ldhu	r2,12(r16)
   14c80:	10c0020c 	andi	r3,r2,8
   14c84:	1009883a 	mov	r4,r2
   14c88:	18000f26 	beq	r3,zero,14cc8 <__swsetup_r+0x7c>
   14c8c:	80c00417 	ldw	r3,16(r16)
   14c90:	18001526 	beq	r3,zero,14ce8 <__swsetup_r+0x9c>
   14c94:	1100004c 	andi	r4,r2,1
   14c98:	20001c1e 	bne	r4,zero,14d0c <__swsetup_r+0xc0>
   14c9c:	1080008c 	andi	r2,r2,2
   14ca0:	1000291e 	bne	r2,zero,14d48 <__swsetup_r+0xfc>
   14ca4:	80800517 	ldw	r2,20(r16)
   14ca8:	80800215 	stw	r2,8(r16)
   14cac:	18001c26 	beq	r3,zero,14d20 <__swsetup_r+0xd4>
   14cb0:	0005883a 	mov	r2,zero
   14cb4:	dfc00217 	ldw	ra,8(sp)
   14cb8:	dc400117 	ldw	r17,4(sp)
   14cbc:	dc000017 	ldw	r16,0(sp)
   14cc0:	dec00304 	addi	sp,sp,12
   14cc4:	f800283a 	ret
   14cc8:	2080040c 	andi	r2,r4,16
   14ccc:	10002e26 	beq	r2,zero,14d88 <__swsetup_r+0x13c>
   14cd0:	2080010c 	andi	r2,r4,4
   14cd4:	10001e1e 	bne	r2,zero,14d50 <__swsetup_r+0x104>
   14cd8:	80c00417 	ldw	r3,16(r16)
   14cdc:	20800214 	ori	r2,r4,8
   14ce0:	8080030d 	sth	r2,12(r16)
   14ce4:	183feb1e 	bne	r3,zero,14c94 <__alt_data_end+0xfc014c94>
   14ce8:	1100a00c 	andi	r4,r2,640
   14cec:	01408004 	movi	r5,512
   14cf0:	217fe826 	beq	r4,r5,14c94 <__alt_data_end+0xfc014c94>
   14cf4:	800b883a 	mov	r5,r16
   14cf8:	8809883a 	mov	r4,r17
   14cfc:	00178080 	call	17808 <__smakebuf_r>
   14d00:	8080030b 	ldhu	r2,12(r16)
   14d04:	80c00417 	ldw	r3,16(r16)
   14d08:	003fe206 	br	14c94 <__alt_data_end+0xfc014c94>
   14d0c:	80800517 	ldw	r2,20(r16)
   14d10:	80000215 	stw	zero,8(r16)
   14d14:	0085c83a 	sub	r2,zero,r2
   14d18:	80800615 	stw	r2,24(r16)
   14d1c:	183fe41e 	bne	r3,zero,14cb0 <__alt_data_end+0xfc014cb0>
   14d20:	80c0030b 	ldhu	r3,12(r16)
   14d24:	0005883a 	mov	r2,zero
   14d28:	1900200c 	andi	r4,r3,128
   14d2c:	203fe126 	beq	r4,zero,14cb4 <__alt_data_end+0xfc014cb4>
   14d30:	18c01014 	ori	r3,r3,64
   14d34:	80c0030d 	sth	r3,12(r16)
   14d38:	00bfffc4 	movi	r2,-1
   14d3c:	003fdd06 	br	14cb4 <__alt_data_end+0xfc014cb4>
   14d40:	0016c580 	call	16c58 <__sinit>
   14d44:	003fcd06 	br	14c7c <__alt_data_end+0xfc014c7c>
   14d48:	0005883a 	mov	r2,zero
   14d4c:	003fd606 	br	14ca8 <__alt_data_end+0xfc014ca8>
   14d50:	81400c17 	ldw	r5,48(r16)
   14d54:	28000626 	beq	r5,zero,14d70 <__swsetup_r+0x124>
   14d58:	80801004 	addi	r2,r16,64
   14d5c:	28800326 	beq	r5,r2,14d6c <__swsetup_r+0x120>
   14d60:	8809883a 	mov	r4,r17
   14d64:	0016dcc0 	call	16dcc <_free_r>
   14d68:	8100030b 	ldhu	r4,12(r16)
   14d6c:	80000c15 	stw	zero,48(r16)
   14d70:	80c00417 	ldw	r3,16(r16)
   14d74:	00bff6c4 	movi	r2,-37
   14d78:	1108703a 	and	r4,r2,r4
   14d7c:	80000115 	stw	zero,4(r16)
   14d80:	80c00015 	stw	r3,0(r16)
   14d84:	003fd506 	br	14cdc <__alt_data_end+0xfc014cdc>
   14d88:	00800244 	movi	r2,9
   14d8c:	88800015 	stw	r2,0(r17)
   14d90:	20801014 	ori	r2,r4,64
   14d94:	8080030d 	sth	r2,12(r16)
   14d98:	00bfffc4 	movi	r2,-1
   14d9c:	003fc506 	br	14cb4 <__alt_data_end+0xfc014cb4>

00014da0 <quorem>:
   14da0:	defff204 	addi	sp,sp,-56
   14da4:	ddc00b15 	stw	r23,44(sp)
   14da8:	20800417 	ldw	r2,16(r4)
   14dac:	2dc00417 	ldw	r23,16(r5)
   14db0:	dfc00d15 	stw	ra,52(sp)
   14db4:	df000c15 	stw	fp,48(sp)
   14db8:	dd800a15 	stw	r22,40(sp)
   14dbc:	dd400915 	stw	r21,36(sp)
   14dc0:	dd000815 	stw	r20,32(sp)
   14dc4:	dcc00715 	stw	r19,28(sp)
   14dc8:	dc800615 	stw	r18,24(sp)
   14dcc:	dc400515 	stw	r17,20(sp)
   14dd0:	dc000415 	stw	r16,16(sp)
   14dd4:	15c07a16 	blt	r2,r23,14fc0 <quorem+0x220>
   14dd8:	bdffffc4 	addi	r23,r23,-1
   14ddc:	bde9883a 	add	r20,r23,r23
   14de0:	28c00504 	addi	r3,r5,20
   14de4:	a529883a 	add	r20,r20,r20
   14de8:	1d39883a 	add	fp,r3,r20
   14dec:	24c00504 	addi	r19,r4,20
   14df0:	d9400215 	stw	r5,8(sp)
   14df4:	9d29883a 	add	r20,r19,r20
   14df8:	e1400017 	ldw	r5,0(fp)
   14dfc:	d9000015 	stw	r4,0(sp)
   14e00:	a1000017 	ldw	r4,0(r20)
   14e04:	29400044 	addi	r5,r5,1
   14e08:	d8c00115 	stw	r3,4(sp)
   14e0c:	dd000315 	stw	r20,12(sp)
   14e10:	000d8180 	call	d818 <__udivsi3>
   14e14:	1025883a 	mov	r18,r2
   14e18:	10003026 	beq	r2,zero,14edc <quorem+0x13c>
   14e1c:	dc400117 	ldw	r17,4(sp)
   14e20:	9829883a 	mov	r20,r19
   14e24:	002d883a 	mov	r22,zero
   14e28:	0021883a 	mov	r16,zero
   14e2c:	8d400017 	ldw	r21,0(r17)
   14e30:	900b883a 	mov	r5,r18
   14e34:	8c400104 	addi	r17,r17,4
   14e38:	a93fffcc 	andi	r4,r21,65535
   14e3c:	000d8d40 	call	d8d4 <__mulsi3>
   14e40:	a808d43a 	srli	r4,r21,16
   14e44:	900b883a 	mov	r5,r18
   14e48:	15ad883a 	add	r22,r2,r22
   14e4c:	000d8d40 	call	d8d4 <__mulsi3>
   14e50:	a1000017 	ldw	r4,0(r20)
   14e54:	b00cd43a 	srli	r6,r22,16
   14e58:	b0ffffcc 	andi	r3,r22,65535
   14e5c:	217fffcc 	andi	r5,r4,65535
   14e60:	2c21883a 	add	r16,r5,r16
   14e64:	80c7c83a 	sub	r3,r16,r3
   14e68:	2008d43a 	srli	r4,r4,16
   14e6c:	1185883a 	add	r2,r2,r6
   14e70:	1821d43a 	srai	r16,r3,16
   14e74:	117fffcc 	andi	r5,r2,65535
   14e78:	2149c83a 	sub	r4,r4,r5
   14e7c:	2421883a 	add	r16,r4,r16
   14e80:	8008943a 	slli	r4,r16,16
   14e84:	18ffffcc 	andi	r3,r3,65535
   14e88:	102cd43a 	srli	r22,r2,16
   14e8c:	20c8b03a 	or	r4,r4,r3
   14e90:	a1000015 	stw	r4,0(r20)
   14e94:	8021d43a 	srai	r16,r16,16
   14e98:	a5000104 	addi	r20,r20,4
   14e9c:	e47fe32e 	bgeu	fp,r17,14e2c <__alt_data_end+0xfc014e2c>
   14ea0:	d8c00317 	ldw	r3,12(sp)
   14ea4:	18800017 	ldw	r2,0(r3)
   14ea8:	10000c1e 	bne	r2,zero,14edc <quorem+0x13c>
   14eac:	18bfff04 	addi	r2,r3,-4
   14eb0:	9880082e 	bgeu	r19,r2,14ed4 <quorem+0x134>
   14eb4:	18ffff17 	ldw	r3,-4(r3)
   14eb8:	18000326 	beq	r3,zero,14ec8 <quorem+0x128>
   14ebc:	00000506 	br	14ed4 <quorem+0x134>
   14ec0:	10c00017 	ldw	r3,0(r2)
   14ec4:	1800031e 	bne	r3,zero,14ed4 <quorem+0x134>
   14ec8:	10bfff04 	addi	r2,r2,-4
   14ecc:	bdffffc4 	addi	r23,r23,-1
   14ed0:	98bffb36 	bltu	r19,r2,14ec0 <__alt_data_end+0xfc014ec0>
   14ed4:	d8c00017 	ldw	r3,0(sp)
   14ed8:	1dc00415 	stw	r23,16(r3)
   14edc:	d9400217 	ldw	r5,8(sp)
   14ee0:	d9000017 	ldw	r4,0(sp)
   14ee4:	00185880 	call	18588 <__mcmp>
   14ee8:	10002816 	blt	r2,zero,14f8c <quorem+0x1ec>
   14eec:	dc400117 	ldw	r17,4(sp)
   14ef0:	94800044 	addi	r18,r18,1
   14ef4:	980d883a 	mov	r6,r19
   14ef8:	0007883a 	mov	r3,zero
   14efc:	31000017 	ldw	r4,0(r6)
   14f00:	89400017 	ldw	r5,0(r17)
   14f04:	31800104 	addi	r6,r6,4
   14f08:	20bfffcc 	andi	r2,r4,65535
   14f0c:	10c7883a 	add	r3,r2,r3
   14f10:	28bfffcc 	andi	r2,r5,65535
   14f14:	1885c83a 	sub	r2,r3,r2
   14f18:	280ad43a 	srli	r5,r5,16
   14f1c:	2008d43a 	srli	r4,r4,16
   14f20:	1007d43a 	srai	r3,r2,16
   14f24:	10bfffcc 	andi	r2,r2,65535
   14f28:	2149c83a 	sub	r4,r4,r5
   14f2c:	20c9883a 	add	r4,r4,r3
   14f30:	200a943a 	slli	r5,r4,16
   14f34:	8c400104 	addi	r17,r17,4
   14f38:	2007d43a 	srai	r3,r4,16
   14f3c:	2884b03a 	or	r2,r5,r2
   14f40:	30bfff15 	stw	r2,-4(r6)
   14f44:	e47fed2e 	bgeu	fp,r17,14efc <__alt_data_end+0xfc014efc>
   14f48:	bdc5883a 	add	r2,r23,r23
   14f4c:	1085883a 	add	r2,r2,r2
   14f50:	9887883a 	add	r3,r19,r2
   14f54:	18800017 	ldw	r2,0(r3)
   14f58:	10000c1e 	bne	r2,zero,14f8c <quorem+0x1ec>
   14f5c:	18bfff04 	addi	r2,r3,-4
   14f60:	9880082e 	bgeu	r19,r2,14f84 <quorem+0x1e4>
   14f64:	18ffff17 	ldw	r3,-4(r3)
   14f68:	18000326 	beq	r3,zero,14f78 <quorem+0x1d8>
   14f6c:	00000506 	br	14f84 <quorem+0x1e4>
   14f70:	10c00017 	ldw	r3,0(r2)
   14f74:	1800031e 	bne	r3,zero,14f84 <quorem+0x1e4>
   14f78:	10bfff04 	addi	r2,r2,-4
   14f7c:	bdffffc4 	addi	r23,r23,-1
   14f80:	98bffb36 	bltu	r19,r2,14f70 <__alt_data_end+0xfc014f70>
   14f84:	d8c00017 	ldw	r3,0(sp)
   14f88:	1dc00415 	stw	r23,16(r3)
   14f8c:	9005883a 	mov	r2,r18
   14f90:	dfc00d17 	ldw	ra,52(sp)
   14f94:	df000c17 	ldw	fp,48(sp)
   14f98:	ddc00b17 	ldw	r23,44(sp)
   14f9c:	dd800a17 	ldw	r22,40(sp)
   14fa0:	dd400917 	ldw	r21,36(sp)
   14fa4:	dd000817 	ldw	r20,32(sp)
   14fa8:	dcc00717 	ldw	r19,28(sp)
   14fac:	dc800617 	ldw	r18,24(sp)
   14fb0:	dc400517 	ldw	r17,20(sp)
   14fb4:	dc000417 	ldw	r16,16(sp)
   14fb8:	dec00e04 	addi	sp,sp,56
   14fbc:	f800283a 	ret
   14fc0:	0005883a 	mov	r2,zero
   14fc4:	003ff206 	br	14f90 <__alt_data_end+0xfc014f90>

00014fc8 <_dtoa_r>:
   14fc8:	20801017 	ldw	r2,64(r4)
   14fcc:	deffde04 	addi	sp,sp,-136
   14fd0:	df002015 	stw	fp,128(sp)
   14fd4:	dcc01b15 	stw	r19,108(sp)
   14fd8:	dc801a15 	stw	r18,104(sp)
   14fdc:	dc401915 	stw	r17,100(sp)
   14fe0:	dc001815 	stw	r16,96(sp)
   14fe4:	dfc02115 	stw	ra,132(sp)
   14fe8:	ddc01f15 	stw	r23,124(sp)
   14fec:	dd801e15 	stw	r22,120(sp)
   14ff0:	dd401d15 	stw	r21,116(sp)
   14ff4:	dd001c15 	stw	r20,112(sp)
   14ff8:	d9c00315 	stw	r7,12(sp)
   14ffc:	2039883a 	mov	fp,r4
   15000:	3023883a 	mov	r17,r6
   15004:	2825883a 	mov	r18,r5
   15008:	dc002417 	ldw	r16,144(sp)
   1500c:	3027883a 	mov	r19,r6
   15010:	10000826 	beq	r2,zero,15034 <_dtoa_r+0x6c>
   15014:	21801117 	ldw	r6,68(r4)
   15018:	00c00044 	movi	r3,1
   1501c:	100b883a 	mov	r5,r2
   15020:	1986983a 	sll	r3,r3,r6
   15024:	11800115 	stw	r6,4(r2)
   15028:	10c00215 	stw	r3,8(r2)
   1502c:	0017cac0 	call	17cac <_Bfree>
   15030:	e0001015 	stw	zero,64(fp)
   15034:	88002e16 	blt	r17,zero,150f0 <_dtoa_r+0x128>
   15038:	80000015 	stw	zero,0(r16)
   1503c:	889ffc2c 	andhi	r2,r17,32752
   15040:	00dffc34 	movhi	r3,32752
   15044:	10c01c26 	beq	r2,r3,150b8 <_dtoa_r+0xf0>
   15048:	000d883a 	mov	r6,zero
   1504c:	000f883a 	mov	r7,zero
   15050:	9009883a 	mov	r4,r18
   15054:	980b883a 	mov	r5,r19
   15058:	001e9280 	call	1e928 <__eqdf2>
   1505c:	10002b1e 	bne	r2,zero,1510c <_dtoa_r+0x144>
   15060:	d9c02317 	ldw	r7,140(sp)
   15064:	00800044 	movi	r2,1
   15068:	38800015 	stw	r2,0(r7)
   1506c:	d8802517 	ldw	r2,148(sp)
   15070:	10019e26 	beq	r2,zero,156ec <_dtoa_r+0x724>
   15074:	d8c02517 	ldw	r3,148(sp)
   15078:	008000f4 	movhi	r2,3
   1507c:	10ae0444 	addi	r2,r2,-18415
   15080:	18800015 	stw	r2,0(r3)
   15084:	10bfffc4 	addi	r2,r2,-1
   15088:	dfc02117 	ldw	ra,132(sp)
   1508c:	df002017 	ldw	fp,128(sp)
   15090:	ddc01f17 	ldw	r23,124(sp)
   15094:	dd801e17 	ldw	r22,120(sp)
   15098:	dd401d17 	ldw	r21,116(sp)
   1509c:	dd001c17 	ldw	r20,112(sp)
   150a0:	dcc01b17 	ldw	r19,108(sp)
   150a4:	dc801a17 	ldw	r18,104(sp)
   150a8:	dc401917 	ldw	r17,100(sp)
   150ac:	dc001817 	ldw	r16,96(sp)
   150b0:	dec02204 	addi	sp,sp,136
   150b4:	f800283a 	ret
   150b8:	d8c02317 	ldw	r3,140(sp)
   150bc:	0089c3c4 	movi	r2,9999
   150c0:	18800015 	stw	r2,0(r3)
   150c4:	90017726 	beq	r18,zero,156a4 <_dtoa_r+0x6dc>
   150c8:	008000f4 	movhi	r2,3
   150cc:	10ae1804 	addi	r2,r2,-18336
   150d0:	d9002517 	ldw	r4,148(sp)
   150d4:	203fec26 	beq	r4,zero,15088 <__alt_data_end+0xfc015088>
   150d8:	10c000c7 	ldb	r3,3(r2)
   150dc:	1801781e 	bne	r3,zero,156c0 <_dtoa_r+0x6f8>
   150e0:	10c000c4 	addi	r3,r2,3
   150e4:	d9802517 	ldw	r6,148(sp)
   150e8:	30c00015 	stw	r3,0(r6)
   150ec:	003fe606 	br	15088 <__alt_data_end+0xfc015088>
   150f0:	04e00034 	movhi	r19,32768
   150f4:	9cffffc4 	addi	r19,r19,-1
   150f8:	00800044 	movi	r2,1
   150fc:	8ce6703a 	and	r19,r17,r19
   15100:	80800015 	stw	r2,0(r16)
   15104:	9823883a 	mov	r17,r19
   15108:	003fcc06 	br	1503c <__alt_data_end+0xfc01503c>
   1510c:	d8800204 	addi	r2,sp,8
   15110:	d8800015 	stw	r2,0(sp)
   15114:	d9c00104 	addi	r7,sp,4
   15118:	900b883a 	mov	r5,r18
   1511c:	980d883a 	mov	r6,r19
   15120:	e009883a 	mov	r4,fp
   15124:	8820d53a 	srli	r16,r17,20
   15128:	00189540 	call	18954 <__d2b>
   1512c:	d8800915 	stw	r2,36(sp)
   15130:	8001651e 	bne	r16,zero,156c8 <_dtoa_r+0x700>
   15134:	dd800217 	ldw	r22,8(sp)
   15138:	dc000117 	ldw	r16,4(sp)
   1513c:	00800804 	movi	r2,32
   15140:	b421883a 	add	r16,r22,r16
   15144:	80c10c84 	addi	r3,r16,1074
   15148:	10c2d10e 	bge	r2,r3,15c90 <_dtoa_r+0xcc8>
   1514c:	00801004 	movi	r2,64
   15150:	81010484 	addi	r4,r16,1042
   15154:	10c7c83a 	sub	r3,r2,r3
   15158:	9108d83a 	srl	r4,r18,r4
   1515c:	88e2983a 	sll	r17,r17,r3
   15160:	2448b03a 	or	r4,r4,r17
   15164:	001fe440 	call	1fe44 <__floatunsidf>
   15168:	017f8434 	movhi	r5,65040
   1516c:	01800044 	movi	r6,1
   15170:	1009883a 	mov	r4,r2
   15174:	194b883a 	add	r5,r3,r5
   15178:	843fffc4 	addi	r16,r16,-1
   1517c:	d9801115 	stw	r6,68(sp)
   15180:	000d883a 	mov	r6,zero
   15184:	01cffe34 	movhi	r7,16376
   15188:	001f3ec0 	call	1f3ec <__subdf3>
   1518c:	0198dbf4 	movhi	r6,25455
   15190:	01cff4f4 	movhi	r7,16339
   15194:	3190d844 	addi	r6,r6,17249
   15198:	39e1e9c4 	addi	r7,r7,-30809
   1519c:	1009883a 	mov	r4,r2
   151a0:	180b883a 	mov	r5,r3
   151a4:	001eb800 	call	1eb80 <__muldf3>
   151a8:	01a2d874 	movhi	r6,35681
   151ac:	01cff1f4 	movhi	r7,16327
   151b0:	31b22cc4 	addi	r6,r6,-14157
   151b4:	39e28a04 	addi	r7,r7,-30168
   151b8:	180b883a 	mov	r5,r3
   151bc:	1009883a 	mov	r4,r2
   151c0:	001d6ac0 	call	1d6ac <__adddf3>
   151c4:	8009883a 	mov	r4,r16
   151c8:	1029883a 	mov	r20,r2
   151cc:	1823883a 	mov	r17,r3
   151d0:	001fd680 	call	1fd68 <__floatsidf>
   151d4:	019427f4 	movhi	r6,20639
   151d8:	01cff4f4 	movhi	r7,16339
   151dc:	319e7ec4 	addi	r6,r6,31227
   151e0:	39d104c4 	addi	r7,r7,17427
   151e4:	1009883a 	mov	r4,r2
   151e8:	180b883a 	mov	r5,r3
   151ec:	001eb800 	call	1eb80 <__muldf3>
   151f0:	100d883a 	mov	r6,r2
   151f4:	180f883a 	mov	r7,r3
   151f8:	a009883a 	mov	r4,r20
   151fc:	880b883a 	mov	r5,r17
   15200:	001d6ac0 	call	1d6ac <__adddf3>
   15204:	1009883a 	mov	r4,r2
   15208:	180b883a 	mov	r5,r3
   1520c:	1029883a 	mov	r20,r2
   15210:	1823883a 	mov	r17,r3
   15214:	001fce80 	call	1fce8 <__fixdfsi>
   15218:	000d883a 	mov	r6,zero
   1521c:	000f883a 	mov	r7,zero
   15220:	a009883a 	mov	r4,r20
   15224:	880b883a 	mov	r5,r17
   15228:	d8800515 	stw	r2,20(sp)
   1522c:	001ea8c0 	call	1ea8c <__ledf2>
   15230:	10028716 	blt	r2,zero,15c50 <_dtoa_r+0xc88>
   15234:	d8c00517 	ldw	r3,20(sp)
   15238:	00800584 	movi	r2,22
   1523c:	10c27536 	bltu	r2,r3,15c14 <_dtoa_r+0xc4c>
   15240:	180490fa 	slli	r2,r3,3
   15244:	00c000f4 	movhi	r3,3
   15248:	18ee3304 	addi	r3,r3,-18228
   1524c:	1885883a 	add	r2,r3,r2
   15250:	11000017 	ldw	r4,0(r2)
   15254:	11400117 	ldw	r5,4(r2)
   15258:	900d883a 	mov	r6,r18
   1525c:	980f883a 	mov	r7,r19
   15260:	001e9b00 	call	1e9b0 <__gedf2>
   15264:	00828d0e 	bge	zero,r2,15c9c <_dtoa_r+0xcd4>
   15268:	d9000517 	ldw	r4,20(sp)
   1526c:	d8000e15 	stw	zero,56(sp)
   15270:	213fffc4 	addi	r4,r4,-1
   15274:	d9000515 	stw	r4,20(sp)
   15278:	b42dc83a 	sub	r22,r22,r16
   1527c:	b5bfffc4 	addi	r22,r22,-1
   15280:	b0026f16 	blt	r22,zero,15c40 <_dtoa_r+0xc78>
   15284:	d8000815 	stw	zero,32(sp)
   15288:	d9c00517 	ldw	r7,20(sp)
   1528c:	38026416 	blt	r7,zero,15c20 <_dtoa_r+0xc58>
   15290:	b1ed883a 	add	r22,r22,r7
   15294:	d9c00d15 	stw	r7,52(sp)
   15298:	d8000a15 	stw	zero,40(sp)
   1529c:	d9800317 	ldw	r6,12(sp)
   152a0:	00800244 	movi	r2,9
   152a4:	11811436 	bltu	r2,r6,156f8 <_dtoa_r+0x730>
   152a8:	00800144 	movi	r2,5
   152ac:	1184e10e 	bge	r2,r6,16634 <_dtoa_r+0x166c>
   152b0:	31bfff04 	addi	r6,r6,-4
   152b4:	d9800315 	stw	r6,12(sp)
   152b8:	0023883a 	mov	r17,zero
   152bc:	d9800317 	ldw	r6,12(sp)
   152c0:	008000c4 	movi	r2,3
   152c4:	30836726 	beq	r6,r2,16064 <_dtoa_r+0x109c>
   152c8:	1183410e 	bge	r2,r6,15fd0 <_dtoa_r+0x1008>
   152cc:	d9c00317 	ldw	r7,12(sp)
   152d0:	00800104 	movi	r2,4
   152d4:	38827c26 	beq	r7,r2,15cc8 <_dtoa_r+0xd00>
   152d8:	00800144 	movi	r2,5
   152dc:	3884c41e 	bne	r7,r2,165f0 <_dtoa_r+0x1628>
   152e0:	00800044 	movi	r2,1
   152e4:	d8800b15 	stw	r2,44(sp)
   152e8:	d8c00517 	ldw	r3,20(sp)
   152ec:	d9002217 	ldw	r4,136(sp)
   152f0:	1907883a 	add	r3,r3,r4
   152f4:	19800044 	addi	r6,r3,1
   152f8:	d8c00c15 	stw	r3,48(sp)
   152fc:	d9800615 	stw	r6,24(sp)
   15300:	0183a40e 	bge	zero,r6,16194 <_dtoa_r+0x11cc>
   15304:	d9800617 	ldw	r6,24(sp)
   15308:	3021883a 	mov	r16,r6
   1530c:	e0001115 	stw	zero,68(fp)
   15310:	008005c4 	movi	r2,23
   15314:	1184c92e 	bgeu	r2,r6,1663c <_dtoa_r+0x1674>
   15318:	00c00044 	movi	r3,1
   1531c:	00800104 	movi	r2,4
   15320:	1085883a 	add	r2,r2,r2
   15324:	11000504 	addi	r4,r2,20
   15328:	180b883a 	mov	r5,r3
   1532c:	18c00044 	addi	r3,r3,1
   15330:	313ffb2e 	bgeu	r6,r4,15320 <__alt_data_end+0xfc015320>
   15334:	e1401115 	stw	r5,68(fp)
   15338:	e009883a 	mov	r4,fp
   1533c:	0017c040 	call	17c04 <_Balloc>
   15340:	d8800715 	stw	r2,28(sp)
   15344:	e0801015 	stw	r2,64(fp)
   15348:	00800384 	movi	r2,14
   1534c:	1400f736 	bltu	r2,r16,1572c <_dtoa_r+0x764>
   15350:	8800f626 	beq	r17,zero,1572c <_dtoa_r+0x764>
   15354:	d9c00517 	ldw	r7,20(sp)
   15358:	01c39a0e 	bge	zero,r7,161c4 <_dtoa_r+0x11fc>
   1535c:	388003cc 	andi	r2,r7,15
   15360:	100490fa 	slli	r2,r2,3
   15364:	382bd13a 	srai	r21,r7,4
   15368:	00c000f4 	movhi	r3,3
   1536c:	18ee3304 	addi	r3,r3,-18228
   15370:	1885883a 	add	r2,r3,r2
   15374:	a8c0040c 	andi	r3,r21,16
   15378:	12400017 	ldw	r9,0(r2)
   1537c:	12000117 	ldw	r8,4(r2)
   15380:	18037926 	beq	r3,zero,16168 <_dtoa_r+0x11a0>
   15384:	008000f4 	movhi	r2,3
   15388:	10ae2904 	addi	r2,r2,-18268
   1538c:	11800817 	ldw	r6,32(r2)
   15390:	11c00917 	ldw	r7,36(r2)
   15394:	9009883a 	mov	r4,r18
   15398:	980b883a 	mov	r5,r19
   1539c:	da001715 	stw	r8,92(sp)
   153a0:	da401615 	stw	r9,88(sp)
   153a4:	001df580 	call	1df58 <__divdf3>
   153a8:	da001717 	ldw	r8,92(sp)
   153ac:	da401617 	ldw	r9,88(sp)
   153b0:	ad4003cc 	andi	r21,r21,15
   153b4:	040000c4 	movi	r16,3
   153b8:	1023883a 	mov	r17,r2
   153bc:	1829883a 	mov	r20,r3
   153c0:	a8001126 	beq	r21,zero,15408 <_dtoa_r+0x440>
   153c4:	05c000f4 	movhi	r23,3
   153c8:	bdee2904 	addi	r23,r23,-18268
   153cc:	4805883a 	mov	r2,r9
   153d0:	4007883a 	mov	r3,r8
   153d4:	a980004c 	andi	r6,r21,1
   153d8:	1009883a 	mov	r4,r2
   153dc:	a82bd07a 	srai	r21,r21,1
   153e0:	180b883a 	mov	r5,r3
   153e4:	30000426 	beq	r6,zero,153f8 <_dtoa_r+0x430>
   153e8:	b9800017 	ldw	r6,0(r23)
   153ec:	b9c00117 	ldw	r7,4(r23)
   153f0:	84000044 	addi	r16,r16,1
   153f4:	001eb800 	call	1eb80 <__muldf3>
   153f8:	bdc00204 	addi	r23,r23,8
   153fc:	a83ff51e 	bne	r21,zero,153d4 <__alt_data_end+0xfc0153d4>
   15400:	1013883a 	mov	r9,r2
   15404:	1811883a 	mov	r8,r3
   15408:	480d883a 	mov	r6,r9
   1540c:	400f883a 	mov	r7,r8
   15410:	8809883a 	mov	r4,r17
   15414:	a00b883a 	mov	r5,r20
   15418:	001df580 	call	1df58 <__divdf3>
   1541c:	d8800f15 	stw	r2,60(sp)
   15420:	d8c01015 	stw	r3,64(sp)
   15424:	d8c00e17 	ldw	r3,56(sp)
   15428:	18000626 	beq	r3,zero,15444 <_dtoa_r+0x47c>
   1542c:	d9000f17 	ldw	r4,60(sp)
   15430:	d9401017 	ldw	r5,64(sp)
   15434:	000d883a 	mov	r6,zero
   15438:	01cffc34 	movhi	r7,16368
   1543c:	001ea8c0 	call	1ea8c <__ledf2>
   15440:	10040b16 	blt	r2,zero,16470 <_dtoa_r+0x14a8>
   15444:	8009883a 	mov	r4,r16
   15448:	001fd680 	call	1fd68 <__floatsidf>
   1544c:	d9800f17 	ldw	r6,60(sp)
   15450:	d9c01017 	ldw	r7,64(sp)
   15454:	1009883a 	mov	r4,r2
   15458:	180b883a 	mov	r5,r3
   1545c:	001eb800 	call	1eb80 <__muldf3>
   15460:	000d883a 	mov	r6,zero
   15464:	01d00734 	movhi	r7,16412
   15468:	1009883a 	mov	r4,r2
   1546c:	180b883a 	mov	r5,r3
   15470:	001d6ac0 	call	1d6ac <__adddf3>
   15474:	1021883a 	mov	r16,r2
   15478:	d8800617 	ldw	r2,24(sp)
   1547c:	047f3034 	movhi	r17,64704
   15480:	1c63883a 	add	r17,r3,r17
   15484:	10031826 	beq	r2,zero,160e8 <_dtoa_r+0x1120>
   15488:	d8c00517 	ldw	r3,20(sp)
   1548c:	db000617 	ldw	r12,24(sp)
   15490:	d8c01315 	stw	r3,76(sp)
   15494:	d9000b17 	ldw	r4,44(sp)
   15498:	20038f26 	beq	r4,zero,162d8 <_dtoa_r+0x1310>
   1549c:	60bfffc4 	addi	r2,r12,-1
   154a0:	100490fa 	slli	r2,r2,3
   154a4:	00c000f4 	movhi	r3,3
   154a8:	18ee3304 	addi	r3,r3,-18228
   154ac:	1885883a 	add	r2,r3,r2
   154b0:	11800017 	ldw	r6,0(r2)
   154b4:	11c00117 	ldw	r7,4(r2)
   154b8:	d8800717 	ldw	r2,28(sp)
   154bc:	0009883a 	mov	r4,zero
   154c0:	014ff834 	movhi	r5,16352
   154c4:	db001615 	stw	r12,88(sp)
   154c8:	15c00044 	addi	r23,r2,1
   154cc:	001df580 	call	1df58 <__divdf3>
   154d0:	800d883a 	mov	r6,r16
   154d4:	880f883a 	mov	r7,r17
   154d8:	1009883a 	mov	r4,r2
   154dc:	180b883a 	mov	r5,r3
   154e0:	001f3ec0 	call	1f3ec <__subdf3>
   154e4:	d9401017 	ldw	r5,64(sp)
   154e8:	d9000f17 	ldw	r4,60(sp)
   154ec:	102b883a 	mov	r21,r2
   154f0:	d8c01215 	stw	r3,72(sp)
   154f4:	001fce80 	call	1fce8 <__fixdfsi>
   154f8:	1009883a 	mov	r4,r2
   154fc:	1029883a 	mov	r20,r2
   15500:	001fd680 	call	1fd68 <__floatsidf>
   15504:	d9000f17 	ldw	r4,60(sp)
   15508:	d9401017 	ldw	r5,64(sp)
   1550c:	100d883a 	mov	r6,r2
   15510:	180f883a 	mov	r7,r3
   15514:	001f3ec0 	call	1f3ec <__subdf3>
   15518:	1823883a 	mov	r17,r3
   1551c:	d8c00717 	ldw	r3,28(sp)
   15520:	d9401217 	ldw	r5,72(sp)
   15524:	a2000c04 	addi	r8,r20,48
   15528:	1021883a 	mov	r16,r2
   1552c:	1a000005 	stb	r8,0(r3)
   15530:	800d883a 	mov	r6,r16
   15534:	880f883a 	mov	r7,r17
   15538:	a809883a 	mov	r4,r21
   1553c:	4029883a 	mov	r20,r8
   15540:	001e9b00 	call	1e9b0 <__gedf2>
   15544:	00841d16 	blt	zero,r2,165bc <_dtoa_r+0x15f4>
   15548:	800d883a 	mov	r6,r16
   1554c:	880f883a 	mov	r7,r17
   15550:	0009883a 	mov	r4,zero
   15554:	014ffc34 	movhi	r5,16368
   15558:	001f3ec0 	call	1f3ec <__subdf3>
   1555c:	d9401217 	ldw	r5,72(sp)
   15560:	100d883a 	mov	r6,r2
   15564:	180f883a 	mov	r7,r3
   15568:	a809883a 	mov	r4,r21
   1556c:	001e9b00 	call	1e9b0 <__gedf2>
   15570:	db001617 	ldw	r12,88(sp)
   15574:	00840e16 	blt	zero,r2,165b0 <_dtoa_r+0x15e8>
   15578:	00800044 	movi	r2,1
   1557c:	13006b0e 	bge	r2,r12,1572c <_dtoa_r+0x764>
   15580:	d9000717 	ldw	r4,28(sp)
   15584:	dd800f15 	stw	r22,60(sp)
   15588:	dcc01015 	stw	r19,64(sp)
   1558c:	2319883a 	add	r12,r4,r12
   15590:	dcc01217 	ldw	r19,72(sp)
   15594:	602d883a 	mov	r22,r12
   15598:	dc801215 	stw	r18,72(sp)
   1559c:	b825883a 	mov	r18,r23
   155a0:	00000906 	br	155c8 <_dtoa_r+0x600>
   155a4:	001f3ec0 	call	1f3ec <__subdf3>
   155a8:	a80d883a 	mov	r6,r21
   155ac:	980f883a 	mov	r7,r19
   155b0:	1009883a 	mov	r4,r2
   155b4:	180b883a 	mov	r5,r3
   155b8:	001ea8c0 	call	1ea8c <__ledf2>
   155bc:	1003e816 	blt	r2,zero,16560 <_dtoa_r+0x1598>
   155c0:	b825883a 	mov	r18,r23
   155c4:	bd83e926 	beq	r23,r22,1656c <_dtoa_r+0x15a4>
   155c8:	a809883a 	mov	r4,r21
   155cc:	980b883a 	mov	r5,r19
   155d0:	000d883a 	mov	r6,zero
   155d4:	01d00934 	movhi	r7,16420
   155d8:	001eb800 	call	1eb80 <__muldf3>
   155dc:	000d883a 	mov	r6,zero
   155e0:	01d00934 	movhi	r7,16420
   155e4:	8009883a 	mov	r4,r16
   155e8:	880b883a 	mov	r5,r17
   155ec:	102b883a 	mov	r21,r2
   155f0:	1827883a 	mov	r19,r3
   155f4:	001eb800 	call	1eb80 <__muldf3>
   155f8:	180b883a 	mov	r5,r3
   155fc:	1009883a 	mov	r4,r2
   15600:	1821883a 	mov	r16,r3
   15604:	1023883a 	mov	r17,r2
   15608:	001fce80 	call	1fce8 <__fixdfsi>
   1560c:	1009883a 	mov	r4,r2
   15610:	1029883a 	mov	r20,r2
   15614:	001fd680 	call	1fd68 <__floatsidf>
   15618:	8809883a 	mov	r4,r17
   1561c:	800b883a 	mov	r5,r16
   15620:	100d883a 	mov	r6,r2
   15624:	180f883a 	mov	r7,r3
   15628:	001f3ec0 	call	1f3ec <__subdf3>
   1562c:	a5000c04 	addi	r20,r20,48
   15630:	a80d883a 	mov	r6,r21
   15634:	980f883a 	mov	r7,r19
   15638:	1009883a 	mov	r4,r2
   1563c:	180b883a 	mov	r5,r3
   15640:	95000005 	stb	r20,0(r18)
   15644:	1021883a 	mov	r16,r2
   15648:	1823883a 	mov	r17,r3
   1564c:	001ea8c0 	call	1ea8c <__ledf2>
   15650:	bdc00044 	addi	r23,r23,1
   15654:	800d883a 	mov	r6,r16
   15658:	880f883a 	mov	r7,r17
   1565c:	0009883a 	mov	r4,zero
   15660:	014ffc34 	movhi	r5,16368
   15664:	103fcf0e 	bge	r2,zero,155a4 <__alt_data_end+0xfc0155a4>
   15668:	d8c01317 	ldw	r3,76(sp)
   1566c:	d8c00515 	stw	r3,20(sp)
   15670:	d9400917 	ldw	r5,36(sp)
   15674:	e009883a 	mov	r4,fp
   15678:	0017cac0 	call	17cac <_Bfree>
   1567c:	d9000517 	ldw	r4,20(sp)
   15680:	d9802317 	ldw	r6,140(sp)
   15684:	d9c02517 	ldw	r7,148(sp)
   15688:	b8000005 	stb	zero,0(r23)
   1568c:	20800044 	addi	r2,r4,1
   15690:	30800015 	stw	r2,0(r6)
   15694:	3802aa26 	beq	r7,zero,16140 <_dtoa_r+0x1178>
   15698:	3dc00015 	stw	r23,0(r7)
   1569c:	d8800717 	ldw	r2,28(sp)
   156a0:	003e7906 	br	15088 <__alt_data_end+0xfc015088>
   156a4:	00800434 	movhi	r2,16
   156a8:	10bfffc4 	addi	r2,r2,-1
   156ac:	88a2703a 	and	r17,r17,r2
   156b0:	883e851e 	bne	r17,zero,150c8 <__alt_data_end+0xfc0150c8>
   156b4:	008000f4 	movhi	r2,3
   156b8:	10ae1504 	addi	r2,r2,-18348
   156bc:	003e8406 	br	150d0 <__alt_data_end+0xfc0150d0>
   156c0:	10c00204 	addi	r3,r2,8
   156c4:	003e8706 	br	150e4 <__alt_data_end+0xfc0150e4>
   156c8:	01400434 	movhi	r5,16
   156cc:	297fffc4 	addi	r5,r5,-1
   156d0:	994a703a 	and	r5,r19,r5
   156d4:	9009883a 	mov	r4,r18
   156d8:	843f0044 	addi	r16,r16,-1023
   156dc:	294ffc34 	orhi	r5,r5,16368
   156e0:	dd800217 	ldw	r22,8(sp)
   156e4:	d8001115 	stw	zero,68(sp)
   156e8:	003ea506 	br	15180 <__alt_data_end+0xfc015180>
   156ec:	008000f4 	movhi	r2,3
   156f0:	10ae0404 	addi	r2,r2,-18416
   156f4:	003e6406 	br	15088 <__alt_data_end+0xfc015088>
   156f8:	e0001115 	stw	zero,68(fp)
   156fc:	000b883a 	mov	r5,zero
   15700:	e009883a 	mov	r4,fp
   15704:	0017c040 	call	17c04 <_Balloc>
   15708:	01bfffc4 	movi	r6,-1
   1570c:	01c00044 	movi	r7,1
   15710:	d8800715 	stw	r2,28(sp)
   15714:	d9800c15 	stw	r6,48(sp)
   15718:	e0801015 	stw	r2,64(fp)
   1571c:	d8000315 	stw	zero,12(sp)
   15720:	d9c00b15 	stw	r7,44(sp)
   15724:	d9800615 	stw	r6,24(sp)
   15728:	d8002215 	stw	zero,136(sp)
   1572c:	d8800117 	ldw	r2,4(sp)
   15730:	10008916 	blt	r2,zero,15958 <_dtoa_r+0x990>
   15734:	d9000517 	ldw	r4,20(sp)
   15738:	00c00384 	movi	r3,14
   1573c:	19008616 	blt	r3,r4,15958 <_dtoa_r+0x990>
   15740:	200490fa 	slli	r2,r4,3
   15744:	00c000f4 	movhi	r3,3
   15748:	d9802217 	ldw	r6,136(sp)
   1574c:	18ee3304 	addi	r3,r3,-18228
   15750:	1885883a 	add	r2,r3,r2
   15754:	14000017 	ldw	r16,0(r2)
   15758:	14400117 	ldw	r17,4(r2)
   1575c:	30016316 	blt	r6,zero,15cec <_dtoa_r+0xd24>
   15760:	800d883a 	mov	r6,r16
   15764:	880f883a 	mov	r7,r17
   15768:	9009883a 	mov	r4,r18
   1576c:	980b883a 	mov	r5,r19
   15770:	001df580 	call	1df58 <__divdf3>
   15774:	180b883a 	mov	r5,r3
   15778:	1009883a 	mov	r4,r2
   1577c:	001fce80 	call	1fce8 <__fixdfsi>
   15780:	1009883a 	mov	r4,r2
   15784:	102b883a 	mov	r21,r2
   15788:	001fd680 	call	1fd68 <__floatsidf>
   1578c:	800d883a 	mov	r6,r16
   15790:	880f883a 	mov	r7,r17
   15794:	1009883a 	mov	r4,r2
   15798:	180b883a 	mov	r5,r3
   1579c:	001eb800 	call	1eb80 <__muldf3>
   157a0:	100d883a 	mov	r6,r2
   157a4:	180f883a 	mov	r7,r3
   157a8:	9009883a 	mov	r4,r18
   157ac:	980b883a 	mov	r5,r19
   157b0:	001f3ec0 	call	1f3ec <__subdf3>
   157b4:	d9c00717 	ldw	r7,28(sp)
   157b8:	1009883a 	mov	r4,r2
   157bc:	a8800c04 	addi	r2,r21,48
   157c0:	38800005 	stb	r2,0(r7)
   157c4:	3dc00044 	addi	r23,r7,1
   157c8:	d9c00617 	ldw	r7,24(sp)
   157cc:	01800044 	movi	r6,1
   157d0:	180b883a 	mov	r5,r3
   157d4:	2005883a 	mov	r2,r4
   157d8:	39803826 	beq	r7,r6,158bc <_dtoa_r+0x8f4>
   157dc:	000d883a 	mov	r6,zero
   157e0:	01d00934 	movhi	r7,16420
   157e4:	001eb800 	call	1eb80 <__muldf3>
   157e8:	000d883a 	mov	r6,zero
   157ec:	000f883a 	mov	r7,zero
   157f0:	1009883a 	mov	r4,r2
   157f4:	180b883a 	mov	r5,r3
   157f8:	1025883a 	mov	r18,r2
   157fc:	1827883a 	mov	r19,r3
   15800:	001e9280 	call	1e928 <__eqdf2>
   15804:	103f9a26 	beq	r2,zero,15670 <__alt_data_end+0xfc015670>
   15808:	d9c00617 	ldw	r7,24(sp)
   1580c:	d8c00717 	ldw	r3,28(sp)
   15810:	b829883a 	mov	r20,r23
   15814:	38bfffc4 	addi	r2,r7,-1
   15818:	18ad883a 	add	r22,r3,r2
   1581c:	00000a06 	br	15848 <_dtoa_r+0x880>
   15820:	001eb800 	call	1eb80 <__muldf3>
   15824:	000d883a 	mov	r6,zero
   15828:	000f883a 	mov	r7,zero
   1582c:	1009883a 	mov	r4,r2
   15830:	180b883a 	mov	r5,r3
   15834:	1025883a 	mov	r18,r2
   15838:	1827883a 	mov	r19,r3
   1583c:	b829883a 	mov	r20,r23
   15840:	001e9280 	call	1e928 <__eqdf2>
   15844:	103f8a26 	beq	r2,zero,15670 <__alt_data_end+0xfc015670>
   15848:	800d883a 	mov	r6,r16
   1584c:	880f883a 	mov	r7,r17
   15850:	9009883a 	mov	r4,r18
   15854:	980b883a 	mov	r5,r19
   15858:	001df580 	call	1df58 <__divdf3>
   1585c:	180b883a 	mov	r5,r3
   15860:	1009883a 	mov	r4,r2
   15864:	001fce80 	call	1fce8 <__fixdfsi>
   15868:	1009883a 	mov	r4,r2
   1586c:	102b883a 	mov	r21,r2
   15870:	001fd680 	call	1fd68 <__floatsidf>
   15874:	800d883a 	mov	r6,r16
   15878:	880f883a 	mov	r7,r17
   1587c:	1009883a 	mov	r4,r2
   15880:	180b883a 	mov	r5,r3
   15884:	001eb800 	call	1eb80 <__muldf3>
   15888:	100d883a 	mov	r6,r2
   1588c:	180f883a 	mov	r7,r3
   15890:	9009883a 	mov	r4,r18
   15894:	980b883a 	mov	r5,r19
   15898:	001f3ec0 	call	1f3ec <__subdf3>
   1589c:	aa000c04 	addi	r8,r21,48
   158a0:	a2000005 	stb	r8,0(r20)
   158a4:	000d883a 	mov	r6,zero
   158a8:	01d00934 	movhi	r7,16420
   158ac:	1009883a 	mov	r4,r2
   158b0:	180b883a 	mov	r5,r3
   158b4:	a5c00044 	addi	r23,r20,1
   158b8:	b53fd91e 	bne	r22,r20,15820 <__alt_data_end+0xfc015820>
   158bc:	100d883a 	mov	r6,r2
   158c0:	180f883a 	mov	r7,r3
   158c4:	1009883a 	mov	r4,r2
   158c8:	180b883a 	mov	r5,r3
   158cc:	001d6ac0 	call	1d6ac <__adddf3>
   158d0:	100d883a 	mov	r6,r2
   158d4:	180f883a 	mov	r7,r3
   158d8:	8009883a 	mov	r4,r16
   158dc:	880b883a 	mov	r5,r17
   158e0:	1027883a 	mov	r19,r2
   158e4:	1825883a 	mov	r18,r3
   158e8:	001ea8c0 	call	1ea8c <__ledf2>
   158ec:	10000816 	blt	r2,zero,15910 <_dtoa_r+0x948>
   158f0:	980d883a 	mov	r6,r19
   158f4:	900f883a 	mov	r7,r18
   158f8:	8009883a 	mov	r4,r16
   158fc:	880b883a 	mov	r5,r17
   15900:	001e9280 	call	1e928 <__eqdf2>
   15904:	103f5a1e 	bne	r2,zero,15670 <__alt_data_end+0xfc015670>
   15908:	ad40004c 	andi	r21,r21,1
   1590c:	a83f5826 	beq	r21,zero,15670 <__alt_data_end+0xfc015670>
   15910:	bd3fffc3 	ldbu	r20,-1(r23)
   15914:	b8bfffc4 	addi	r2,r23,-1
   15918:	1007883a 	mov	r3,r2
   1591c:	01400e44 	movi	r5,57
   15920:	d9800717 	ldw	r6,28(sp)
   15924:	00000506 	br	1593c <_dtoa_r+0x974>
   15928:	18ffffc4 	addi	r3,r3,-1
   1592c:	11824726 	beq	r2,r6,1624c <_dtoa_r+0x1284>
   15930:	1d000003 	ldbu	r20,0(r3)
   15934:	102f883a 	mov	r23,r2
   15938:	10bfffc4 	addi	r2,r2,-1
   1593c:	a1003fcc 	andi	r4,r20,255
   15940:	2100201c 	xori	r4,r4,128
   15944:	213fe004 	addi	r4,r4,-128
   15948:	217ff726 	beq	r4,r5,15928 <__alt_data_end+0xfc015928>
   1594c:	a2000044 	addi	r8,r20,1
   15950:	12000005 	stb	r8,0(r2)
   15954:	003f4606 	br	15670 <__alt_data_end+0xfc015670>
   15958:	d9000b17 	ldw	r4,44(sp)
   1595c:	2000c826 	beq	r4,zero,15c80 <_dtoa_r+0xcb8>
   15960:	d9800317 	ldw	r6,12(sp)
   15964:	00c00044 	movi	r3,1
   15968:	1980f90e 	bge	r3,r6,15d50 <_dtoa_r+0xd88>
   1596c:	d8800617 	ldw	r2,24(sp)
   15970:	d8c00a17 	ldw	r3,40(sp)
   15974:	157fffc4 	addi	r21,r2,-1
   15978:	1d41f316 	blt	r3,r21,16148 <_dtoa_r+0x1180>
   1597c:	1d6bc83a 	sub	r21,r3,r21
   15980:	d9c00617 	ldw	r7,24(sp)
   15984:	3802aa16 	blt	r7,zero,16430 <_dtoa_r+0x1468>
   15988:	dd000817 	ldw	r20,32(sp)
   1598c:	d8800617 	ldw	r2,24(sp)
   15990:	d8c00817 	ldw	r3,32(sp)
   15994:	01400044 	movi	r5,1
   15998:	e009883a 	mov	r4,fp
   1599c:	1887883a 	add	r3,r3,r2
   159a0:	d8c00815 	stw	r3,32(sp)
   159a4:	b0ad883a 	add	r22,r22,r2
   159a8:	00180380 	call	18038 <__i2b>
   159ac:	1023883a 	mov	r17,r2
   159b0:	a0000826 	beq	r20,zero,159d4 <_dtoa_r+0xa0c>
   159b4:	0580070e 	bge	zero,r22,159d4 <_dtoa_r+0xa0c>
   159b8:	a005883a 	mov	r2,r20
   159bc:	b500b916 	blt	r22,r20,15ca4 <_dtoa_r+0xcdc>
   159c0:	d9000817 	ldw	r4,32(sp)
   159c4:	a0a9c83a 	sub	r20,r20,r2
   159c8:	b0adc83a 	sub	r22,r22,r2
   159cc:	2089c83a 	sub	r4,r4,r2
   159d0:	d9000815 	stw	r4,32(sp)
   159d4:	d9800a17 	ldw	r6,40(sp)
   159d8:	0181810e 	bge	zero,r6,15fe0 <_dtoa_r+0x1018>
   159dc:	d9c00b17 	ldw	r7,44(sp)
   159e0:	3800b326 	beq	r7,zero,15cb0 <_dtoa_r+0xce8>
   159e4:	a800b226 	beq	r21,zero,15cb0 <_dtoa_r+0xce8>
   159e8:	880b883a 	mov	r5,r17
   159ec:	a80d883a 	mov	r6,r21
   159f0:	e009883a 	mov	r4,fp
   159f4:	00183000 	call	18300 <__pow5mult>
   159f8:	d9800917 	ldw	r6,36(sp)
   159fc:	100b883a 	mov	r5,r2
   15a00:	e009883a 	mov	r4,fp
   15a04:	1023883a 	mov	r17,r2
   15a08:	00180740 	call	18074 <__multiply>
   15a0c:	1021883a 	mov	r16,r2
   15a10:	d8800a17 	ldw	r2,40(sp)
   15a14:	d9400917 	ldw	r5,36(sp)
   15a18:	e009883a 	mov	r4,fp
   15a1c:	1545c83a 	sub	r2,r2,r21
   15a20:	d8800a15 	stw	r2,40(sp)
   15a24:	0017cac0 	call	17cac <_Bfree>
   15a28:	d8c00a17 	ldw	r3,40(sp)
   15a2c:	18009f1e 	bne	r3,zero,15cac <_dtoa_r+0xce4>
   15a30:	05c00044 	movi	r23,1
   15a34:	e009883a 	mov	r4,fp
   15a38:	b80b883a 	mov	r5,r23
   15a3c:	00180380 	call	18038 <__i2b>
   15a40:	d9000d17 	ldw	r4,52(sp)
   15a44:	102b883a 	mov	r21,r2
   15a48:	2000ce26 	beq	r4,zero,15d84 <_dtoa_r+0xdbc>
   15a4c:	200d883a 	mov	r6,r4
   15a50:	100b883a 	mov	r5,r2
   15a54:	e009883a 	mov	r4,fp
   15a58:	00183000 	call	18300 <__pow5mult>
   15a5c:	d9800317 	ldw	r6,12(sp)
   15a60:	102b883a 	mov	r21,r2
   15a64:	b981810e 	bge	r23,r6,1606c <_dtoa_r+0x10a4>
   15a68:	0027883a 	mov	r19,zero
   15a6c:	a8800417 	ldw	r2,16(r21)
   15a70:	05c00804 	movi	r23,32
   15a74:	10800104 	addi	r2,r2,4
   15a78:	1085883a 	add	r2,r2,r2
   15a7c:	1085883a 	add	r2,r2,r2
   15a80:	a885883a 	add	r2,r21,r2
   15a84:	11000017 	ldw	r4,0(r2)
   15a88:	0017f200 	call	17f20 <__hi0bits>
   15a8c:	b885c83a 	sub	r2,r23,r2
   15a90:	1585883a 	add	r2,r2,r22
   15a94:	108007cc 	andi	r2,r2,31
   15a98:	1000b326 	beq	r2,zero,15d68 <_dtoa_r+0xda0>
   15a9c:	00c00804 	movi	r3,32
   15aa0:	1887c83a 	sub	r3,r3,r2
   15aa4:	01000104 	movi	r4,4
   15aa8:	20c2cd0e 	bge	r4,r3,165e0 <_dtoa_r+0x1618>
   15aac:	00c00704 	movi	r3,28
   15ab0:	1885c83a 	sub	r2,r3,r2
   15ab4:	d8c00817 	ldw	r3,32(sp)
   15ab8:	a0a9883a 	add	r20,r20,r2
   15abc:	b0ad883a 	add	r22,r22,r2
   15ac0:	1887883a 	add	r3,r3,r2
   15ac4:	d8c00815 	stw	r3,32(sp)
   15ac8:	d9800817 	ldw	r6,32(sp)
   15acc:	0180040e 	bge	zero,r6,15ae0 <_dtoa_r+0xb18>
   15ad0:	800b883a 	mov	r5,r16
   15ad4:	e009883a 	mov	r4,fp
   15ad8:	00184400 	call	18440 <__lshift>
   15adc:	1021883a 	mov	r16,r2
   15ae0:	0580050e 	bge	zero,r22,15af8 <_dtoa_r+0xb30>
   15ae4:	a80b883a 	mov	r5,r21
   15ae8:	b00d883a 	mov	r6,r22
   15aec:	e009883a 	mov	r4,fp
   15af0:	00184400 	call	18440 <__lshift>
   15af4:	102b883a 	mov	r21,r2
   15af8:	d9c00e17 	ldw	r7,56(sp)
   15afc:	3801211e 	bne	r7,zero,15f84 <_dtoa_r+0xfbc>
   15b00:	d9800617 	ldw	r6,24(sp)
   15b04:	0181380e 	bge	zero,r6,15fe8 <_dtoa_r+0x1020>
   15b08:	d8c00b17 	ldw	r3,44(sp)
   15b0c:	1800ab1e 	bne	r3,zero,15dbc <_dtoa_r+0xdf4>
   15b10:	dc800717 	ldw	r18,28(sp)
   15b14:	dcc00617 	ldw	r19,24(sp)
   15b18:	9029883a 	mov	r20,r18
   15b1c:	00000206 	br	15b28 <_dtoa_r+0xb60>
   15b20:	0017cd40 	call	17cd4 <__multadd>
   15b24:	1021883a 	mov	r16,r2
   15b28:	a80b883a 	mov	r5,r21
   15b2c:	8009883a 	mov	r4,r16
   15b30:	0014da00 	call	14da0 <quorem>
   15b34:	10800c04 	addi	r2,r2,48
   15b38:	90800005 	stb	r2,0(r18)
   15b3c:	94800044 	addi	r18,r18,1
   15b40:	9507c83a 	sub	r3,r18,r20
   15b44:	000f883a 	mov	r7,zero
   15b48:	01800284 	movi	r6,10
   15b4c:	800b883a 	mov	r5,r16
   15b50:	e009883a 	mov	r4,fp
   15b54:	1cfff216 	blt	r3,r19,15b20 <__alt_data_end+0xfc015b20>
   15b58:	1011883a 	mov	r8,r2
   15b5c:	d8800617 	ldw	r2,24(sp)
   15b60:	0082370e 	bge	zero,r2,16440 <_dtoa_r+0x1478>
   15b64:	d9000717 	ldw	r4,28(sp)
   15b68:	0025883a 	mov	r18,zero
   15b6c:	20af883a 	add	r23,r4,r2
   15b70:	01800044 	movi	r6,1
   15b74:	800b883a 	mov	r5,r16
   15b78:	e009883a 	mov	r4,fp
   15b7c:	da001715 	stw	r8,92(sp)
   15b80:	00184400 	call	18440 <__lshift>
   15b84:	a80b883a 	mov	r5,r21
   15b88:	1009883a 	mov	r4,r2
   15b8c:	d8800915 	stw	r2,36(sp)
   15b90:	00185880 	call	18588 <__mcmp>
   15b94:	da001717 	ldw	r8,92(sp)
   15b98:	0081800e 	bge	zero,r2,1619c <_dtoa_r+0x11d4>
   15b9c:	b93fffc3 	ldbu	r4,-1(r23)
   15ba0:	b8bfffc4 	addi	r2,r23,-1
   15ba4:	1007883a 	mov	r3,r2
   15ba8:	01800e44 	movi	r6,57
   15bac:	d9c00717 	ldw	r7,28(sp)
   15bb0:	00000506 	br	15bc8 <_dtoa_r+0xc00>
   15bb4:	18ffffc4 	addi	r3,r3,-1
   15bb8:	11c12326 	beq	r2,r7,16048 <_dtoa_r+0x1080>
   15bbc:	19000003 	ldbu	r4,0(r3)
   15bc0:	102f883a 	mov	r23,r2
   15bc4:	10bfffc4 	addi	r2,r2,-1
   15bc8:	21403fcc 	andi	r5,r4,255
   15bcc:	2940201c 	xori	r5,r5,128
   15bd0:	297fe004 	addi	r5,r5,-128
   15bd4:	29bff726 	beq	r5,r6,15bb4 <__alt_data_end+0xfc015bb4>
   15bd8:	21000044 	addi	r4,r4,1
   15bdc:	11000005 	stb	r4,0(r2)
   15be0:	a80b883a 	mov	r5,r21
   15be4:	e009883a 	mov	r4,fp
   15be8:	0017cac0 	call	17cac <_Bfree>
   15bec:	883ea026 	beq	r17,zero,15670 <__alt_data_end+0xfc015670>
   15bf0:	90000426 	beq	r18,zero,15c04 <_dtoa_r+0xc3c>
   15bf4:	94400326 	beq	r18,r17,15c04 <_dtoa_r+0xc3c>
   15bf8:	900b883a 	mov	r5,r18
   15bfc:	e009883a 	mov	r4,fp
   15c00:	0017cac0 	call	17cac <_Bfree>
   15c04:	880b883a 	mov	r5,r17
   15c08:	e009883a 	mov	r4,fp
   15c0c:	0017cac0 	call	17cac <_Bfree>
   15c10:	003e9706 	br	15670 <__alt_data_end+0xfc015670>
   15c14:	01800044 	movi	r6,1
   15c18:	d9800e15 	stw	r6,56(sp)
   15c1c:	003d9606 	br	15278 <__alt_data_end+0xfc015278>
   15c20:	d8800817 	ldw	r2,32(sp)
   15c24:	d8c00517 	ldw	r3,20(sp)
   15c28:	d8000d15 	stw	zero,52(sp)
   15c2c:	10c5c83a 	sub	r2,r2,r3
   15c30:	00c9c83a 	sub	r4,zero,r3
   15c34:	d8800815 	stw	r2,32(sp)
   15c38:	d9000a15 	stw	r4,40(sp)
   15c3c:	003d9706 	br	1529c <__alt_data_end+0xfc01529c>
   15c40:	05adc83a 	sub	r22,zero,r22
   15c44:	dd800815 	stw	r22,32(sp)
   15c48:	002d883a 	mov	r22,zero
   15c4c:	003d8e06 	br	15288 <__alt_data_end+0xfc015288>
   15c50:	d9000517 	ldw	r4,20(sp)
   15c54:	001fd680 	call	1fd68 <__floatsidf>
   15c58:	100d883a 	mov	r6,r2
   15c5c:	180f883a 	mov	r7,r3
   15c60:	a009883a 	mov	r4,r20
   15c64:	880b883a 	mov	r5,r17
   15c68:	001e9280 	call	1e928 <__eqdf2>
   15c6c:	103d7126 	beq	r2,zero,15234 <__alt_data_end+0xfc015234>
   15c70:	d9c00517 	ldw	r7,20(sp)
   15c74:	39ffffc4 	addi	r7,r7,-1
   15c78:	d9c00515 	stw	r7,20(sp)
   15c7c:	003d6d06 	br	15234 <__alt_data_end+0xfc015234>
   15c80:	dd400a17 	ldw	r21,40(sp)
   15c84:	dd000817 	ldw	r20,32(sp)
   15c88:	0023883a 	mov	r17,zero
   15c8c:	003f4806 	br	159b0 <__alt_data_end+0xfc0159b0>
   15c90:	10e3c83a 	sub	r17,r2,r3
   15c94:	9448983a 	sll	r4,r18,r17
   15c98:	003d3206 	br	15164 <__alt_data_end+0xfc015164>
   15c9c:	d8000e15 	stw	zero,56(sp)
   15ca0:	003d7506 	br	15278 <__alt_data_end+0xfc015278>
   15ca4:	b005883a 	mov	r2,r22
   15ca8:	003f4506 	br	159c0 <__alt_data_end+0xfc0159c0>
   15cac:	dc000915 	stw	r16,36(sp)
   15cb0:	d9800a17 	ldw	r6,40(sp)
   15cb4:	d9400917 	ldw	r5,36(sp)
   15cb8:	e009883a 	mov	r4,fp
   15cbc:	00183000 	call	18300 <__pow5mult>
   15cc0:	1021883a 	mov	r16,r2
   15cc4:	003f5a06 	br	15a30 <__alt_data_end+0xfc015a30>
   15cc8:	01c00044 	movi	r7,1
   15ccc:	d9c00b15 	stw	r7,44(sp)
   15cd0:	d8802217 	ldw	r2,136(sp)
   15cd4:	0081280e 	bge	zero,r2,16178 <_dtoa_r+0x11b0>
   15cd8:	100d883a 	mov	r6,r2
   15cdc:	1021883a 	mov	r16,r2
   15ce0:	d8800c15 	stw	r2,48(sp)
   15ce4:	d8800615 	stw	r2,24(sp)
   15ce8:	003d8806 	br	1530c <__alt_data_end+0xfc01530c>
   15cec:	d8800617 	ldw	r2,24(sp)
   15cf0:	00be9b16 	blt	zero,r2,15760 <__alt_data_end+0xfc015760>
   15cf4:	10010f1e 	bne	r2,zero,16134 <_dtoa_r+0x116c>
   15cf8:	880b883a 	mov	r5,r17
   15cfc:	000d883a 	mov	r6,zero
   15d00:	01d00534 	movhi	r7,16404
   15d04:	8009883a 	mov	r4,r16
   15d08:	001eb800 	call	1eb80 <__muldf3>
   15d0c:	900d883a 	mov	r6,r18
   15d10:	980f883a 	mov	r7,r19
   15d14:	1009883a 	mov	r4,r2
   15d18:	180b883a 	mov	r5,r3
   15d1c:	001e9b00 	call	1e9b0 <__gedf2>
   15d20:	002b883a 	mov	r21,zero
   15d24:	0023883a 	mov	r17,zero
   15d28:	1000bf16 	blt	r2,zero,16028 <_dtoa_r+0x1060>
   15d2c:	d9802217 	ldw	r6,136(sp)
   15d30:	ddc00717 	ldw	r23,28(sp)
   15d34:	018c303a 	nor	r6,zero,r6
   15d38:	d9800515 	stw	r6,20(sp)
   15d3c:	a80b883a 	mov	r5,r21
   15d40:	e009883a 	mov	r4,fp
   15d44:	0017cac0 	call	17cac <_Bfree>
   15d48:	883e4926 	beq	r17,zero,15670 <__alt_data_end+0xfc015670>
   15d4c:	003fad06 	br	15c04 <__alt_data_end+0xfc015c04>
   15d50:	d9c01117 	ldw	r7,68(sp)
   15d54:	3801bc26 	beq	r7,zero,16448 <_dtoa_r+0x1480>
   15d58:	10810cc4 	addi	r2,r2,1075
   15d5c:	dd400a17 	ldw	r21,40(sp)
   15d60:	dd000817 	ldw	r20,32(sp)
   15d64:	003f0a06 	br	15990 <__alt_data_end+0xfc015990>
   15d68:	00800704 	movi	r2,28
   15d6c:	d9000817 	ldw	r4,32(sp)
   15d70:	a0a9883a 	add	r20,r20,r2
   15d74:	b0ad883a 	add	r22,r22,r2
   15d78:	2089883a 	add	r4,r4,r2
   15d7c:	d9000815 	stw	r4,32(sp)
   15d80:	003f5106 	br	15ac8 <__alt_data_end+0xfc015ac8>
   15d84:	d8c00317 	ldw	r3,12(sp)
   15d88:	b8c1fc0e 	bge	r23,r3,1657c <_dtoa_r+0x15b4>
   15d8c:	0027883a 	mov	r19,zero
   15d90:	b805883a 	mov	r2,r23
   15d94:	003f3e06 	br	15a90 <__alt_data_end+0xfc015a90>
   15d98:	880b883a 	mov	r5,r17
   15d9c:	e009883a 	mov	r4,fp
   15da0:	000f883a 	mov	r7,zero
   15da4:	01800284 	movi	r6,10
   15da8:	0017cd40 	call	17cd4 <__multadd>
   15dac:	d9000c17 	ldw	r4,48(sp)
   15db0:	1023883a 	mov	r17,r2
   15db4:	0102040e 	bge	zero,r4,165c8 <_dtoa_r+0x1600>
   15db8:	d9000615 	stw	r4,24(sp)
   15dbc:	0500050e 	bge	zero,r20,15dd4 <_dtoa_r+0xe0c>
   15dc0:	880b883a 	mov	r5,r17
   15dc4:	a00d883a 	mov	r6,r20
   15dc8:	e009883a 	mov	r4,fp
   15dcc:	00184400 	call	18440 <__lshift>
   15dd0:	1023883a 	mov	r17,r2
   15dd4:	9801241e 	bne	r19,zero,16268 <_dtoa_r+0x12a0>
   15dd8:	8829883a 	mov	r20,r17
   15ddc:	d9000617 	ldw	r4,24(sp)
   15de0:	dcc00717 	ldw	r19,28(sp)
   15de4:	9480004c 	andi	r18,r18,1
   15de8:	20bfffc4 	addi	r2,r4,-1
   15dec:	9885883a 	add	r2,r19,r2
   15df0:	d8800415 	stw	r2,16(sp)
   15df4:	dc800615 	stw	r18,24(sp)
   15df8:	a80b883a 	mov	r5,r21
   15dfc:	8009883a 	mov	r4,r16
   15e00:	0014da00 	call	14da0 <quorem>
   15e04:	880b883a 	mov	r5,r17
   15e08:	8009883a 	mov	r4,r16
   15e0c:	102f883a 	mov	r23,r2
   15e10:	00185880 	call	18588 <__mcmp>
   15e14:	a80b883a 	mov	r5,r21
   15e18:	a00d883a 	mov	r6,r20
   15e1c:	e009883a 	mov	r4,fp
   15e20:	102d883a 	mov	r22,r2
   15e24:	00185e80 	call	185e8 <__mdiff>
   15e28:	1007883a 	mov	r3,r2
   15e2c:	10800317 	ldw	r2,12(r2)
   15e30:	bc800c04 	addi	r18,r23,48
   15e34:	180b883a 	mov	r5,r3
   15e38:	10004e1e 	bne	r2,zero,15f74 <_dtoa_r+0xfac>
   15e3c:	8009883a 	mov	r4,r16
   15e40:	d8c01615 	stw	r3,88(sp)
   15e44:	00185880 	call	18588 <__mcmp>
   15e48:	d8c01617 	ldw	r3,88(sp)
   15e4c:	e009883a 	mov	r4,fp
   15e50:	d8801615 	stw	r2,88(sp)
   15e54:	180b883a 	mov	r5,r3
   15e58:	0017cac0 	call	17cac <_Bfree>
   15e5c:	d8801617 	ldw	r2,88(sp)
   15e60:	1000041e 	bne	r2,zero,15e74 <_dtoa_r+0xeac>
   15e64:	d9800317 	ldw	r6,12(sp)
   15e68:	3000021e 	bne	r6,zero,15e74 <_dtoa_r+0xeac>
   15e6c:	d8c00617 	ldw	r3,24(sp)
   15e70:	18003726 	beq	r3,zero,15f50 <_dtoa_r+0xf88>
   15e74:	b0002016 	blt	r22,zero,15ef8 <_dtoa_r+0xf30>
   15e78:	b000041e 	bne	r22,zero,15e8c <_dtoa_r+0xec4>
   15e7c:	d9000317 	ldw	r4,12(sp)
   15e80:	2000021e 	bne	r4,zero,15e8c <_dtoa_r+0xec4>
   15e84:	d8c00617 	ldw	r3,24(sp)
   15e88:	18001b26 	beq	r3,zero,15ef8 <_dtoa_r+0xf30>
   15e8c:	00810716 	blt	zero,r2,162ac <_dtoa_r+0x12e4>
   15e90:	d8c00417 	ldw	r3,16(sp)
   15e94:	9d800044 	addi	r22,r19,1
   15e98:	9c800005 	stb	r18,0(r19)
   15e9c:	b02f883a 	mov	r23,r22
   15ea0:	98c10626 	beq	r19,r3,162bc <_dtoa_r+0x12f4>
   15ea4:	800b883a 	mov	r5,r16
   15ea8:	000f883a 	mov	r7,zero
   15eac:	01800284 	movi	r6,10
   15eb0:	e009883a 	mov	r4,fp
   15eb4:	0017cd40 	call	17cd4 <__multadd>
   15eb8:	1021883a 	mov	r16,r2
   15ebc:	000f883a 	mov	r7,zero
   15ec0:	01800284 	movi	r6,10
   15ec4:	880b883a 	mov	r5,r17
   15ec8:	e009883a 	mov	r4,fp
   15ecc:	8d002526 	beq	r17,r20,15f64 <_dtoa_r+0xf9c>
   15ed0:	0017cd40 	call	17cd4 <__multadd>
   15ed4:	a00b883a 	mov	r5,r20
   15ed8:	000f883a 	mov	r7,zero
   15edc:	01800284 	movi	r6,10
   15ee0:	e009883a 	mov	r4,fp
   15ee4:	1023883a 	mov	r17,r2
   15ee8:	0017cd40 	call	17cd4 <__multadd>
   15eec:	1029883a 	mov	r20,r2
   15ef0:	b027883a 	mov	r19,r22
   15ef4:	003fc006 	br	15df8 <__alt_data_end+0xfc015df8>
   15ef8:	9011883a 	mov	r8,r18
   15efc:	00800e0e 	bge	zero,r2,15f38 <_dtoa_r+0xf70>
   15f00:	800b883a 	mov	r5,r16
   15f04:	01800044 	movi	r6,1
   15f08:	e009883a 	mov	r4,fp
   15f0c:	da001715 	stw	r8,92(sp)
   15f10:	00184400 	call	18440 <__lshift>
   15f14:	a80b883a 	mov	r5,r21
   15f18:	1009883a 	mov	r4,r2
   15f1c:	1021883a 	mov	r16,r2
   15f20:	00185880 	call	18588 <__mcmp>
   15f24:	da001717 	ldw	r8,92(sp)
   15f28:	0081960e 	bge	zero,r2,16584 <_dtoa_r+0x15bc>
   15f2c:	00800e44 	movi	r2,57
   15f30:	40817026 	beq	r8,r2,164f4 <_dtoa_r+0x152c>
   15f34:	ba000c44 	addi	r8,r23,49
   15f38:	8825883a 	mov	r18,r17
   15f3c:	9dc00044 	addi	r23,r19,1
   15f40:	9a000005 	stb	r8,0(r19)
   15f44:	a023883a 	mov	r17,r20
   15f48:	dc000915 	stw	r16,36(sp)
   15f4c:	003f2406 	br	15be0 <__alt_data_end+0xfc015be0>
   15f50:	00800e44 	movi	r2,57
   15f54:	9011883a 	mov	r8,r18
   15f58:	90816626 	beq	r18,r2,164f4 <_dtoa_r+0x152c>
   15f5c:	05bff516 	blt	zero,r22,15f34 <__alt_data_end+0xfc015f34>
   15f60:	003ff506 	br	15f38 <__alt_data_end+0xfc015f38>
   15f64:	0017cd40 	call	17cd4 <__multadd>
   15f68:	1023883a 	mov	r17,r2
   15f6c:	1029883a 	mov	r20,r2
   15f70:	003fdf06 	br	15ef0 <__alt_data_end+0xfc015ef0>
   15f74:	e009883a 	mov	r4,fp
   15f78:	0017cac0 	call	17cac <_Bfree>
   15f7c:	00800044 	movi	r2,1
   15f80:	003fbc06 	br	15e74 <__alt_data_end+0xfc015e74>
   15f84:	a80b883a 	mov	r5,r21
   15f88:	8009883a 	mov	r4,r16
   15f8c:	00185880 	call	18588 <__mcmp>
   15f90:	103edb0e 	bge	r2,zero,15b00 <__alt_data_end+0xfc015b00>
   15f94:	800b883a 	mov	r5,r16
   15f98:	000f883a 	mov	r7,zero
   15f9c:	01800284 	movi	r6,10
   15fa0:	e009883a 	mov	r4,fp
   15fa4:	0017cd40 	call	17cd4 <__multadd>
   15fa8:	1021883a 	mov	r16,r2
   15fac:	d8800517 	ldw	r2,20(sp)
   15fb0:	d8c00b17 	ldw	r3,44(sp)
   15fb4:	10bfffc4 	addi	r2,r2,-1
   15fb8:	d8800515 	stw	r2,20(sp)
   15fbc:	183f761e 	bne	r3,zero,15d98 <__alt_data_end+0xfc015d98>
   15fc0:	d9000c17 	ldw	r4,48(sp)
   15fc4:	0101730e 	bge	zero,r4,16594 <_dtoa_r+0x15cc>
   15fc8:	d9000615 	stw	r4,24(sp)
   15fcc:	003ed006 	br	15b10 <__alt_data_end+0xfc015b10>
   15fd0:	00800084 	movi	r2,2
   15fd4:	3081861e 	bne	r6,r2,165f0 <_dtoa_r+0x1628>
   15fd8:	d8000b15 	stw	zero,44(sp)
   15fdc:	003f3c06 	br	15cd0 <__alt_data_end+0xfc015cd0>
   15fe0:	dc000917 	ldw	r16,36(sp)
   15fe4:	003e9206 	br	15a30 <__alt_data_end+0xfc015a30>
   15fe8:	d9c00317 	ldw	r7,12(sp)
   15fec:	00800084 	movi	r2,2
   15ff0:	11fec50e 	bge	r2,r7,15b08 <__alt_data_end+0xfc015b08>
   15ff4:	d9000617 	ldw	r4,24(sp)
   15ff8:	20013c1e 	bne	r4,zero,164ec <_dtoa_r+0x1524>
   15ffc:	a80b883a 	mov	r5,r21
   16000:	000f883a 	mov	r7,zero
   16004:	01800144 	movi	r6,5
   16008:	e009883a 	mov	r4,fp
   1600c:	0017cd40 	call	17cd4 <__multadd>
   16010:	100b883a 	mov	r5,r2
   16014:	8009883a 	mov	r4,r16
   16018:	102b883a 	mov	r21,r2
   1601c:	00185880 	call	18588 <__mcmp>
   16020:	dc000915 	stw	r16,36(sp)
   16024:	00bf410e 	bge	zero,r2,15d2c <__alt_data_end+0xfc015d2c>
   16028:	d9c00717 	ldw	r7,28(sp)
   1602c:	00800c44 	movi	r2,49
   16030:	38800005 	stb	r2,0(r7)
   16034:	d8800517 	ldw	r2,20(sp)
   16038:	3dc00044 	addi	r23,r7,1
   1603c:	10800044 	addi	r2,r2,1
   16040:	d8800515 	stw	r2,20(sp)
   16044:	003f3d06 	br	15d3c <__alt_data_end+0xfc015d3c>
   16048:	d9800517 	ldw	r6,20(sp)
   1604c:	d9c00717 	ldw	r7,28(sp)
   16050:	00800c44 	movi	r2,49
   16054:	31800044 	addi	r6,r6,1
   16058:	d9800515 	stw	r6,20(sp)
   1605c:	38800005 	stb	r2,0(r7)
   16060:	003edf06 	br	15be0 <__alt_data_end+0xfc015be0>
   16064:	d8000b15 	stw	zero,44(sp)
   16068:	003c9f06 	br	152e8 <__alt_data_end+0xfc0152e8>
   1606c:	903e7e1e 	bne	r18,zero,15a68 <__alt_data_end+0xfc015a68>
   16070:	00800434 	movhi	r2,16
   16074:	10bfffc4 	addi	r2,r2,-1
   16078:	9884703a 	and	r2,r19,r2
   1607c:	1000ea1e 	bne	r2,zero,16428 <_dtoa_r+0x1460>
   16080:	9cdffc2c 	andhi	r19,r19,32752
   16084:	9800e826 	beq	r19,zero,16428 <_dtoa_r+0x1460>
   16088:	d9c00817 	ldw	r7,32(sp)
   1608c:	b5800044 	addi	r22,r22,1
   16090:	04c00044 	movi	r19,1
   16094:	39c00044 	addi	r7,r7,1
   16098:	d9c00815 	stw	r7,32(sp)
   1609c:	d8800d17 	ldw	r2,52(sp)
   160a0:	103e721e 	bne	r2,zero,15a6c <__alt_data_end+0xfc015a6c>
   160a4:	00800044 	movi	r2,1
   160a8:	003e7906 	br	15a90 <__alt_data_end+0xfc015a90>
   160ac:	8009883a 	mov	r4,r16
   160b0:	001fd680 	call	1fd68 <__floatsidf>
   160b4:	d9800f17 	ldw	r6,60(sp)
   160b8:	d9c01017 	ldw	r7,64(sp)
   160bc:	1009883a 	mov	r4,r2
   160c0:	180b883a 	mov	r5,r3
   160c4:	001eb800 	call	1eb80 <__muldf3>
   160c8:	000d883a 	mov	r6,zero
   160cc:	01d00734 	movhi	r7,16412
   160d0:	1009883a 	mov	r4,r2
   160d4:	180b883a 	mov	r5,r3
   160d8:	001d6ac0 	call	1d6ac <__adddf3>
   160dc:	047f3034 	movhi	r17,64704
   160e0:	1021883a 	mov	r16,r2
   160e4:	1c63883a 	add	r17,r3,r17
   160e8:	d9000f17 	ldw	r4,60(sp)
   160ec:	d9401017 	ldw	r5,64(sp)
   160f0:	000d883a 	mov	r6,zero
   160f4:	01d00534 	movhi	r7,16404
   160f8:	001f3ec0 	call	1f3ec <__subdf3>
   160fc:	800d883a 	mov	r6,r16
   16100:	880f883a 	mov	r7,r17
   16104:	1009883a 	mov	r4,r2
   16108:	180b883a 	mov	r5,r3
   1610c:	102b883a 	mov	r21,r2
   16110:	1829883a 	mov	r20,r3
   16114:	001e9b00 	call	1e9b0 <__gedf2>
   16118:	00806c16 	blt	zero,r2,162cc <_dtoa_r+0x1304>
   1611c:	89e0003c 	xorhi	r7,r17,32768
   16120:	800d883a 	mov	r6,r16
   16124:	a809883a 	mov	r4,r21
   16128:	a00b883a 	mov	r5,r20
   1612c:	001ea8c0 	call	1ea8c <__ledf2>
   16130:	103d7e0e 	bge	r2,zero,1572c <__alt_data_end+0xfc01572c>
   16134:	002b883a 	mov	r21,zero
   16138:	0023883a 	mov	r17,zero
   1613c:	003efb06 	br	15d2c <__alt_data_end+0xfc015d2c>
   16140:	d8800717 	ldw	r2,28(sp)
   16144:	003bd006 	br	15088 <__alt_data_end+0xfc015088>
   16148:	d9000a17 	ldw	r4,40(sp)
   1614c:	d9800d17 	ldw	r6,52(sp)
   16150:	dd400a15 	stw	r21,40(sp)
   16154:	a905c83a 	sub	r2,r21,r4
   16158:	308d883a 	add	r6,r6,r2
   1615c:	d9800d15 	stw	r6,52(sp)
   16160:	002b883a 	mov	r21,zero
   16164:	003e0606 	br	15980 <__alt_data_end+0xfc015980>
   16168:	9023883a 	mov	r17,r18
   1616c:	9829883a 	mov	r20,r19
   16170:	04000084 	movi	r16,2
   16174:	003c9206 	br	153c0 <__alt_data_end+0xfc0153c0>
   16178:	04000044 	movi	r16,1
   1617c:	dc000c15 	stw	r16,48(sp)
   16180:	dc000615 	stw	r16,24(sp)
   16184:	dc002215 	stw	r16,136(sp)
   16188:	e0001115 	stw	zero,68(fp)
   1618c:	000b883a 	mov	r5,zero
   16190:	003c6906 	br	15338 <__alt_data_end+0xfc015338>
   16194:	3021883a 	mov	r16,r6
   16198:	003ffb06 	br	16188 <__alt_data_end+0xfc016188>
   1619c:	1000021e 	bne	r2,zero,161a8 <_dtoa_r+0x11e0>
   161a0:	4200004c 	andi	r8,r8,1
   161a4:	403e7d1e 	bne	r8,zero,15b9c <__alt_data_end+0xfc015b9c>
   161a8:	01000c04 	movi	r4,48
   161ac:	00000106 	br	161b4 <_dtoa_r+0x11ec>
   161b0:	102f883a 	mov	r23,r2
   161b4:	b8bfffc4 	addi	r2,r23,-1
   161b8:	10c00007 	ldb	r3,0(r2)
   161bc:	193ffc26 	beq	r3,r4,161b0 <__alt_data_end+0xfc0161b0>
   161c0:	003e8706 	br	15be0 <__alt_data_end+0xfc015be0>
   161c4:	d8800517 	ldw	r2,20(sp)
   161c8:	00a3c83a 	sub	r17,zero,r2
   161cc:	8800a426 	beq	r17,zero,16460 <_dtoa_r+0x1498>
   161d0:	888003cc 	andi	r2,r17,15
   161d4:	100490fa 	slli	r2,r2,3
   161d8:	00c000f4 	movhi	r3,3
   161dc:	18ee3304 	addi	r3,r3,-18228
   161e0:	1885883a 	add	r2,r3,r2
   161e4:	11800017 	ldw	r6,0(r2)
   161e8:	11c00117 	ldw	r7,4(r2)
   161ec:	9009883a 	mov	r4,r18
   161f0:	980b883a 	mov	r5,r19
   161f4:	8823d13a 	srai	r17,r17,4
   161f8:	001eb800 	call	1eb80 <__muldf3>
   161fc:	d8800f15 	stw	r2,60(sp)
   16200:	d8c01015 	stw	r3,64(sp)
   16204:	8800e826 	beq	r17,zero,165a8 <_dtoa_r+0x15e0>
   16208:	050000f4 	movhi	r20,3
   1620c:	a52e2904 	addi	r20,r20,-18268
   16210:	04000084 	movi	r16,2
   16214:	8980004c 	andi	r6,r17,1
   16218:	1009883a 	mov	r4,r2
   1621c:	8823d07a 	srai	r17,r17,1
   16220:	180b883a 	mov	r5,r3
   16224:	30000426 	beq	r6,zero,16238 <_dtoa_r+0x1270>
   16228:	a1800017 	ldw	r6,0(r20)
   1622c:	a1c00117 	ldw	r7,4(r20)
   16230:	84000044 	addi	r16,r16,1
   16234:	001eb800 	call	1eb80 <__muldf3>
   16238:	a5000204 	addi	r20,r20,8
   1623c:	883ff51e 	bne	r17,zero,16214 <__alt_data_end+0xfc016214>
   16240:	d8800f15 	stw	r2,60(sp)
   16244:	d8c01015 	stw	r3,64(sp)
   16248:	003c7606 	br	15424 <__alt_data_end+0xfc015424>
   1624c:	00c00c04 	movi	r3,48
   16250:	10c00005 	stb	r3,0(r2)
   16254:	d8c00517 	ldw	r3,20(sp)
   16258:	bd3fffc3 	ldbu	r20,-1(r23)
   1625c:	18c00044 	addi	r3,r3,1
   16260:	d8c00515 	stw	r3,20(sp)
   16264:	003db906 	br	1594c <__alt_data_end+0xfc01594c>
   16268:	89400117 	ldw	r5,4(r17)
   1626c:	e009883a 	mov	r4,fp
   16270:	0017c040 	call	17c04 <_Balloc>
   16274:	89800417 	ldw	r6,16(r17)
   16278:	89400304 	addi	r5,r17,12
   1627c:	11000304 	addi	r4,r2,12
   16280:	31800084 	addi	r6,r6,2
   16284:	318d883a 	add	r6,r6,r6
   16288:	318d883a 	add	r6,r6,r6
   1628c:	1027883a 	mov	r19,r2
   16290:	000fc740 	call	fc74 <memcpy>
   16294:	01800044 	movi	r6,1
   16298:	980b883a 	mov	r5,r19
   1629c:	e009883a 	mov	r4,fp
   162a0:	00184400 	call	18440 <__lshift>
   162a4:	1029883a 	mov	r20,r2
   162a8:	003ecc06 	br	15ddc <__alt_data_end+0xfc015ddc>
   162ac:	00800e44 	movi	r2,57
   162b0:	90809026 	beq	r18,r2,164f4 <_dtoa_r+0x152c>
   162b4:	92000044 	addi	r8,r18,1
   162b8:	003f1f06 	br	15f38 <__alt_data_end+0xfc015f38>
   162bc:	9011883a 	mov	r8,r18
   162c0:	8825883a 	mov	r18,r17
   162c4:	a023883a 	mov	r17,r20
   162c8:	003e2906 	br	15b70 <__alt_data_end+0xfc015b70>
   162cc:	002b883a 	mov	r21,zero
   162d0:	0023883a 	mov	r17,zero
   162d4:	003f5406 	br	16028 <__alt_data_end+0xfc016028>
   162d8:	61bfffc4 	addi	r6,r12,-1
   162dc:	300490fa 	slli	r2,r6,3
   162e0:	00c000f4 	movhi	r3,3
   162e4:	18ee3304 	addi	r3,r3,-18228
   162e8:	1885883a 	add	r2,r3,r2
   162ec:	11000017 	ldw	r4,0(r2)
   162f0:	11400117 	ldw	r5,4(r2)
   162f4:	d8800717 	ldw	r2,28(sp)
   162f8:	880f883a 	mov	r7,r17
   162fc:	d9801215 	stw	r6,72(sp)
   16300:	800d883a 	mov	r6,r16
   16304:	db001615 	stw	r12,88(sp)
   16308:	15c00044 	addi	r23,r2,1
   1630c:	001eb800 	call	1eb80 <__muldf3>
   16310:	d9401017 	ldw	r5,64(sp)
   16314:	d9000f17 	ldw	r4,60(sp)
   16318:	d8c01515 	stw	r3,84(sp)
   1631c:	d8801415 	stw	r2,80(sp)
   16320:	001fce80 	call	1fce8 <__fixdfsi>
   16324:	1009883a 	mov	r4,r2
   16328:	1021883a 	mov	r16,r2
   1632c:	001fd680 	call	1fd68 <__floatsidf>
   16330:	d9000f17 	ldw	r4,60(sp)
   16334:	d9401017 	ldw	r5,64(sp)
   16338:	100d883a 	mov	r6,r2
   1633c:	180f883a 	mov	r7,r3
   16340:	001f3ec0 	call	1f3ec <__subdf3>
   16344:	1829883a 	mov	r20,r3
   16348:	d8c00717 	ldw	r3,28(sp)
   1634c:	84000c04 	addi	r16,r16,48
   16350:	1023883a 	mov	r17,r2
   16354:	1c000005 	stb	r16,0(r3)
   16358:	db001617 	ldw	r12,88(sp)
   1635c:	00800044 	movi	r2,1
   16360:	60802226 	beq	r12,r2,163ec <_dtoa_r+0x1424>
   16364:	d9c00717 	ldw	r7,28(sp)
   16368:	8805883a 	mov	r2,r17
   1636c:	b82b883a 	mov	r21,r23
   16370:	3b19883a 	add	r12,r7,r12
   16374:	6023883a 	mov	r17,r12
   16378:	a007883a 	mov	r3,r20
   1637c:	dc800f15 	stw	r18,60(sp)
   16380:	000d883a 	mov	r6,zero
   16384:	01d00934 	movhi	r7,16420
   16388:	1009883a 	mov	r4,r2
   1638c:	180b883a 	mov	r5,r3
   16390:	001eb800 	call	1eb80 <__muldf3>
   16394:	180b883a 	mov	r5,r3
   16398:	1009883a 	mov	r4,r2
   1639c:	1829883a 	mov	r20,r3
   163a0:	1025883a 	mov	r18,r2
   163a4:	001fce80 	call	1fce8 <__fixdfsi>
   163a8:	1009883a 	mov	r4,r2
   163ac:	1021883a 	mov	r16,r2
   163b0:	001fd680 	call	1fd68 <__floatsidf>
   163b4:	100d883a 	mov	r6,r2
   163b8:	180f883a 	mov	r7,r3
   163bc:	9009883a 	mov	r4,r18
   163c0:	a00b883a 	mov	r5,r20
   163c4:	84000c04 	addi	r16,r16,48
   163c8:	001f3ec0 	call	1f3ec <__subdf3>
   163cc:	ad400044 	addi	r21,r21,1
   163d0:	ac3fffc5 	stb	r16,-1(r21)
   163d4:	ac7fea1e 	bne	r21,r17,16380 <__alt_data_end+0xfc016380>
   163d8:	1023883a 	mov	r17,r2
   163dc:	d8801217 	ldw	r2,72(sp)
   163e0:	dc800f17 	ldw	r18,60(sp)
   163e4:	1829883a 	mov	r20,r3
   163e8:	b8af883a 	add	r23,r23,r2
   163ec:	d9001417 	ldw	r4,80(sp)
   163f0:	d9401517 	ldw	r5,84(sp)
   163f4:	000d883a 	mov	r6,zero
   163f8:	01cff834 	movhi	r7,16352
   163fc:	001d6ac0 	call	1d6ac <__adddf3>
   16400:	880d883a 	mov	r6,r17
   16404:	a00f883a 	mov	r7,r20
   16408:	1009883a 	mov	r4,r2
   1640c:	180b883a 	mov	r5,r3
   16410:	001ea8c0 	call	1ea8c <__ledf2>
   16414:	10003e0e 	bge	r2,zero,16510 <_dtoa_r+0x1548>
   16418:	d9001317 	ldw	r4,76(sp)
   1641c:	bd3fffc3 	ldbu	r20,-1(r23)
   16420:	d9000515 	stw	r4,20(sp)
   16424:	003d3b06 	br	15914 <__alt_data_end+0xfc015914>
   16428:	0027883a 	mov	r19,zero
   1642c:	003f1b06 	br	1609c <__alt_data_end+0xfc01609c>
   16430:	d8800817 	ldw	r2,32(sp)
   16434:	11e9c83a 	sub	r20,r2,r7
   16438:	0005883a 	mov	r2,zero
   1643c:	003d5406 	br	15990 <__alt_data_end+0xfc015990>
   16440:	00800044 	movi	r2,1
   16444:	003dc706 	br	15b64 <__alt_data_end+0xfc015b64>
   16448:	d8c00217 	ldw	r3,8(sp)
   1644c:	00800d84 	movi	r2,54
   16450:	dd400a17 	ldw	r21,40(sp)
   16454:	10c5c83a 	sub	r2,r2,r3
   16458:	dd000817 	ldw	r20,32(sp)
   1645c:	003d4c06 	br	15990 <__alt_data_end+0xfc015990>
   16460:	dc800f15 	stw	r18,60(sp)
   16464:	dcc01015 	stw	r19,64(sp)
   16468:	04000084 	movi	r16,2
   1646c:	003bed06 	br	15424 <__alt_data_end+0xfc015424>
   16470:	d9000617 	ldw	r4,24(sp)
   16474:	203f0d26 	beq	r4,zero,160ac <__alt_data_end+0xfc0160ac>
   16478:	d9800c17 	ldw	r6,48(sp)
   1647c:	01bcab0e 	bge	zero,r6,1572c <__alt_data_end+0xfc01572c>
   16480:	d9401017 	ldw	r5,64(sp)
   16484:	d9000f17 	ldw	r4,60(sp)
   16488:	000d883a 	mov	r6,zero
   1648c:	01d00934 	movhi	r7,16420
   16490:	001eb800 	call	1eb80 <__muldf3>
   16494:	81000044 	addi	r4,r16,1
   16498:	d8800f15 	stw	r2,60(sp)
   1649c:	d8c01015 	stw	r3,64(sp)
   164a0:	001fd680 	call	1fd68 <__floatsidf>
   164a4:	d9800f17 	ldw	r6,60(sp)
   164a8:	d9c01017 	ldw	r7,64(sp)
   164ac:	1009883a 	mov	r4,r2
   164b0:	180b883a 	mov	r5,r3
   164b4:	001eb800 	call	1eb80 <__muldf3>
   164b8:	01d00734 	movhi	r7,16412
   164bc:	000d883a 	mov	r6,zero
   164c0:	1009883a 	mov	r4,r2
   164c4:	180b883a 	mov	r5,r3
   164c8:	001d6ac0 	call	1d6ac <__adddf3>
   164cc:	d9c00517 	ldw	r7,20(sp)
   164d0:	047f3034 	movhi	r17,64704
   164d4:	1021883a 	mov	r16,r2
   164d8:	39ffffc4 	addi	r7,r7,-1
   164dc:	d9c01315 	stw	r7,76(sp)
   164e0:	1c63883a 	add	r17,r3,r17
   164e4:	db000c17 	ldw	r12,48(sp)
   164e8:	003bea06 	br	15494 <__alt_data_end+0xfc015494>
   164ec:	dc000915 	stw	r16,36(sp)
   164f0:	003e0e06 	br	15d2c <__alt_data_end+0xfc015d2c>
   164f4:	01000e44 	movi	r4,57
   164f8:	8825883a 	mov	r18,r17
   164fc:	9dc00044 	addi	r23,r19,1
   16500:	99000005 	stb	r4,0(r19)
   16504:	a023883a 	mov	r17,r20
   16508:	dc000915 	stw	r16,36(sp)
   1650c:	003da406 	br	15ba0 <__alt_data_end+0xfc015ba0>
   16510:	d9801417 	ldw	r6,80(sp)
   16514:	d9c01517 	ldw	r7,84(sp)
   16518:	0009883a 	mov	r4,zero
   1651c:	014ff834 	movhi	r5,16352
   16520:	001f3ec0 	call	1f3ec <__subdf3>
   16524:	880d883a 	mov	r6,r17
   16528:	a00f883a 	mov	r7,r20
   1652c:	1009883a 	mov	r4,r2
   16530:	180b883a 	mov	r5,r3
   16534:	001e9b00 	call	1e9b0 <__gedf2>
   16538:	00bc7c0e 	bge	zero,r2,1572c <__alt_data_end+0xfc01572c>
   1653c:	01000c04 	movi	r4,48
   16540:	00000106 	br	16548 <_dtoa_r+0x1580>
   16544:	102f883a 	mov	r23,r2
   16548:	b8bfffc4 	addi	r2,r23,-1
   1654c:	10c00007 	ldb	r3,0(r2)
   16550:	193ffc26 	beq	r3,r4,16544 <__alt_data_end+0xfc016544>
   16554:	d9801317 	ldw	r6,76(sp)
   16558:	d9800515 	stw	r6,20(sp)
   1655c:	003c4406 	br	15670 <__alt_data_end+0xfc015670>
   16560:	d9801317 	ldw	r6,76(sp)
   16564:	d9800515 	stw	r6,20(sp)
   16568:	003cea06 	br	15914 <__alt_data_end+0xfc015914>
   1656c:	dd800f17 	ldw	r22,60(sp)
   16570:	dcc01017 	ldw	r19,64(sp)
   16574:	dc801217 	ldw	r18,72(sp)
   16578:	003c6c06 	br	1572c <__alt_data_end+0xfc01572c>
   1657c:	903e031e 	bne	r18,zero,15d8c <__alt_data_end+0xfc015d8c>
   16580:	003ebb06 	br	16070 <__alt_data_end+0xfc016070>
   16584:	103e6c1e 	bne	r2,zero,15f38 <__alt_data_end+0xfc015f38>
   16588:	4080004c 	andi	r2,r8,1
   1658c:	103e6a26 	beq	r2,zero,15f38 <__alt_data_end+0xfc015f38>
   16590:	003e6606 	br	15f2c <__alt_data_end+0xfc015f2c>
   16594:	d8c00317 	ldw	r3,12(sp)
   16598:	00800084 	movi	r2,2
   1659c:	10c02916 	blt	r2,r3,16644 <_dtoa_r+0x167c>
   165a0:	d9000c17 	ldw	r4,48(sp)
   165a4:	003e8806 	br	15fc8 <__alt_data_end+0xfc015fc8>
   165a8:	04000084 	movi	r16,2
   165ac:	003b9d06 	br	15424 <__alt_data_end+0xfc015424>
   165b0:	d9001317 	ldw	r4,76(sp)
   165b4:	d9000515 	stw	r4,20(sp)
   165b8:	003cd606 	br	15914 <__alt_data_end+0xfc015914>
   165bc:	d8801317 	ldw	r2,76(sp)
   165c0:	d8800515 	stw	r2,20(sp)
   165c4:	003c2a06 	br	15670 <__alt_data_end+0xfc015670>
   165c8:	d9800317 	ldw	r6,12(sp)
   165cc:	00800084 	movi	r2,2
   165d0:	11801516 	blt	r2,r6,16628 <_dtoa_r+0x1660>
   165d4:	d9c00c17 	ldw	r7,48(sp)
   165d8:	d9c00615 	stw	r7,24(sp)
   165dc:	003df706 	br	15dbc <__alt_data_end+0xfc015dbc>
   165e0:	193d3926 	beq	r3,r4,15ac8 <__alt_data_end+0xfc015ac8>
   165e4:	00c00f04 	movi	r3,60
   165e8:	1885c83a 	sub	r2,r3,r2
   165ec:	003ddf06 	br	15d6c <__alt_data_end+0xfc015d6c>
   165f0:	e009883a 	mov	r4,fp
   165f4:	e0001115 	stw	zero,68(fp)
   165f8:	000b883a 	mov	r5,zero
   165fc:	0017c040 	call	17c04 <_Balloc>
   16600:	d8800715 	stw	r2,28(sp)
   16604:	d8c00717 	ldw	r3,28(sp)
   16608:	00bfffc4 	movi	r2,-1
   1660c:	01000044 	movi	r4,1
   16610:	d8800c15 	stw	r2,48(sp)
   16614:	e0c01015 	stw	r3,64(fp)
   16618:	d9000b15 	stw	r4,44(sp)
   1661c:	d8800615 	stw	r2,24(sp)
   16620:	d8002215 	stw	zero,136(sp)
   16624:	003c4106 	br	1572c <__alt_data_end+0xfc01572c>
   16628:	d8c00c17 	ldw	r3,48(sp)
   1662c:	d8c00615 	stw	r3,24(sp)
   16630:	003e7006 	br	15ff4 <__alt_data_end+0xfc015ff4>
   16634:	04400044 	movi	r17,1
   16638:	003b2006 	br	152bc <__alt_data_end+0xfc0152bc>
   1663c:	000b883a 	mov	r5,zero
   16640:	003b3d06 	br	15338 <__alt_data_end+0xfc015338>
   16644:	d8800c17 	ldw	r2,48(sp)
   16648:	d8800615 	stw	r2,24(sp)
   1664c:	003e6906 	br	15ff4 <__alt_data_end+0xfc015ff4>

00016650 <__sflush_r>:
   16650:	2880030b 	ldhu	r2,12(r5)
   16654:	defffb04 	addi	sp,sp,-20
   16658:	dcc00315 	stw	r19,12(sp)
   1665c:	dc400115 	stw	r17,4(sp)
   16660:	dfc00415 	stw	ra,16(sp)
   16664:	dc800215 	stw	r18,8(sp)
   16668:	dc000015 	stw	r16,0(sp)
   1666c:	10c0020c 	andi	r3,r2,8
   16670:	2823883a 	mov	r17,r5
   16674:	2027883a 	mov	r19,r4
   16678:	1800311e 	bne	r3,zero,16740 <__sflush_r+0xf0>
   1667c:	28c00117 	ldw	r3,4(r5)
   16680:	10820014 	ori	r2,r2,2048
   16684:	2880030d 	sth	r2,12(r5)
   16688:	00c04b0e 	bge	zero,r3,167b8 <__sflush_r+0x168>
   1668c:	8a000a17 	ldw	r8,40(r17)
   16690:	40002326 	beq	r8,zero,16720 <__sflush_r+0xd0>
   16694:	9c000017 	ldw	r16,0(r19)
   16698:	10c4000c 	andi	r3,r2,4096
   1669c:	98000015 	stw	zero,0(r19)
   166a0:	18004826 	beq	r3,zero,167c4 <__sflush_r+0x174>
   166a4:	89801417 	ldw	r6,80(r17)
   166a8:	10c0010c 	andi	r3,r2,4
   166ac:	18000626 	beq	r3,zero,166c8 <__sflush_r+0x78>
   166b0:	88c00117 	ldw	r3,4(r17)
   166b4:	88800c17 	ldw	r2,48(r17)
   166b8:	30cdc83a 	sub	r6,r6,r3
   166bc:	10000226 	beq	r2,zero,166c8 <__sflush_r+0x78>
   166c0:	88800f17 	ldw	r2,60(r17)
   166c4:	308dc83a 	sub	r6,r6,r2
   166c8:	89400717 	ldw	r5,28(r17)
   166cc:	000f883a 	mov	r7,zero
   166d0:	9809883a 	mov	r4,r19
   166d4:	403ee83a 	callr	r8
   166d8:	00ffffc4 	movi	r3,-1
   166dc:	10c04426 	beq	r2,r3,167f0 <__sflush_r+0x1a0>
   166e0:	88c0030b 	ldhu	r3,12(r17)
   166e4:	89000417 	ldw	r4,16(r17)
   166e8:	88000115 	stw	zero,4(r17)
   166ec:	197dffcc 	andi	r5,r3,63487
   166f0:	8940030d 	sth	r5,12(r17)
   166f4:	89000015 	stw	r4,0(r17)
   166f8:	18c4000c 	andi	r3,r3,4096
   166fc:	18002c1e 	bne	r3,zero,167b0 <__sflush_r+0x160>
   16700:	89400c17 	ldw	r5,48(r17)
   16704:	9c000015 	stw	r16,0(r19)
   16708:	28000526 	beq	r5,zero,16720 <__sflush_r+0xd0>
   1670c:	88801004 	addi	r2,r17,64
   16710:	28800226 	beq	r5,r2,1671c <__sflush_r+0xcc>
   16714:	9809883a 	mov	r4,r19
   16718:	0016dcc0 	call	16dcc <_free_r>
   1671c:	88000c15 	stw	zero,48(r17)
   16720:	0005883a 	mov	r2,zero
   16724:	dfc00417 	ldw	ra,16(sp)
   16728:	dcc00317 	ldw	r19,12(sp)
   1672c:	dc800217 	ldw	r18,8(sp)
   16730:	dc400117 	ldw	r17,4(sp)
   16734:	dc000017 	ldw	r16,0(sp)
   16738:	dec00504 	addi	sp,sp,20
   1673c:	f800283a 	ret
   16740:	2c800417 	ldw	r18,16(r5)
   16744:	903ff626 	beq	r18,zero,16720 <__alt_data_end+0xfc016720>
   16748:	2c000017 	ldw	r16,0(r5)
   1674c:	108000cc 	andi	r2,r2,3
   16750:	2c800015 	stw	r18,0(r5)
   16754:	84a1c83a 	sub	r16,r16,r18
   16758:	1000131e 	bne	r2,zero,167a8 <__sflush_r+0x158>
   1675c:	28800517 	ldw	r2,20(r5)
   16760:	88800215 	stw	r2,8(r17)
   16764:	04000316 	blt	zero,r16,16774 <__sflush_r+0x124>
   16768:	003fed06 	br	16720 <__alt_data_end+0xfc016720>
   1676c:	90a5883a 	add	r18,r18,r2
   16770:	043feb0e 	bge	zero,r16,16720 <__alt_data_end+0xfc016720>
   16774:	88800917 	ldw	r2,36(r17)
   16778:	89400717 	ldw	r5,28(r17)
   1677c:	800f883a 	mov	r7,r16
   16780:	900d883a 	mov	r6,r18
   16784:	9809883a 	mov	r4,r19
   16788:	103ee83a 	callr	r2
   1678c:	80a1c83a 	sub	r16,r16,r2
   16790:	00bff616 	blt	zero,r2,1676c <__alt_data_end+0xfc01676c>
   16794:	88c0030b 	ldhu	r3,12(r17)
   16798:	00bfffc4 	movi	r2,-1
   1679c:	18c01014 	ori	r3,r3,64
   167a0:	88c0030d 	sth	r3,12(r17)
   167a4:	003fdf06 	br	16724 <__alt_data_end+0xfc016724>
   167a8:	0005883a 	mov	r2,zero
   167ac:	003fec06 	br	16760 <__alt_data_end+0xfc016760>
   167b0:	88801415 	stw	r2,80(r17)
   167b4:	003fd206 	br	16700 <__alt_data_end+0xfc016700>
   167b8:	28c00f17 	ldw	r3,60(r5)
   167bc:	00ffb316 	blt	zero,r3,1668c <__alt_data_end+0xfc01668c>
   167c0:	003fd706 	br	16720 <__alt_data_end+0xfc016720>
   167c4:	89400717 	ldw	r5,28(r17)
   167c8:	000d883a 	mov	r6,zero
   167cc:	01c00044 	movi	r7,1
   167d0:	9809883a 	mov	r4,r19
   167d4:	403ee83a 	callr	r8
   167d8:	100d883a 	mov	r6,r2
   167dc:	00bfffc4 	movi	r2,-1
   167e0:	30801426 	beq	r6,r2,16834 <__sflush_r+0x1e4>
   167e4:	8880030b 	ldhu	r2,12(r17)
   167e8:	8a000a17 	ldw	r8,40(r17)
   167ec:	003fae06 	br	166a8 <__alt_data_end+0xfc0166a8>
   167f0:	98c00017 	ldw	r3,0(r19)
   167f4:	183fba26 	beq	r3,zero,166e0 <__alt_data_end+0xfc0166e0>
   167f8:	01000744 	movi	r4,29
   167fc:	19000626 	beq	r3,r4,16818 <__sflush_r+0x1c8>
   16800:	01000584 	movi	r4,22
   16804:	19000426 	beq	r3,r4,16818 <__sflush_r+0x1c8>
   16808:	88c0030b 	ldhu	r3,12(r17)
   1680c:	18c01014 	ori	r3,r3,64
   16810:	88c0030d 	sth	r3,12(r17)
   16814:	003fc306 	br	16724 <__alt_data_end+0xfc016724>
   16818:	8880030b 	ldhu	r2,12(r17)
   1681c:	88c00417 	ldw	r3,16(r17)
   16820:	88000115 	stw	zero,4(r17)
   16824:	10bdffcc 	andi	r2,r2,63487
   16828:	8880030d 	sth	r2,12(r17)
   1682c:	88c00015 	stw	r3,0(r17)
   16830:	003fb306 	br	16700 <__alt_data_end+0xfc016700>
   16834:	98800017 	ldw	r2,0(r19)
   16838:	103fea26 	beq	r2,zero,167e4 <__alt_data_end+0xfc0167e4>
   1683c:	00c00744 	movi	r3,29
   16840:	10c00226 	beq	r2,r3,1684c <__sflush_r+0x1fc>
   16844:	00c00584 	movi	r3,22
   16848:	10c0031e 	bne	r2,r3,16858 <__sflush_r+0x208>
   1684c:	9c000015 	stw	r16,0(r19)
   16850:	0005883a 	mov	r2,zero
   16854:	003fb306 	br	16724 <__alt_data_end+0xfc016724>
   16858:	88c0030b 	ldhu	r3,12(r17)
   1685c:	3005883a 	mov	r2,r6
   16860:	18c01014 	ori	r3,r3,64
   16864:	88c0030d 	sth	r3,12(r17)
   16868:	003fae06 	br	16724 <__alt_data_end+0xfc016724>

0001686c <_fflush_r>:
   1686c:	defffd04 	addi	sp,sp,-12
   16870:	dc000115 	stw	r16,4(sp)
   16874:	dfc00215 	stw	ra,8(sp)
   16878:	2021883a 	mov	r16,r4
   1687c:	20000226 	beq	r4,zero,16888 <_fflush_r+0x1c>
   16880:	20800e17 	ldw	r2,56(r4)
   16884:	10000c26 	beq	r2,zero,168b8 <_fflush_r+0x4c>
   16888:	2880030f 	ldh	r2,12(r5)
   1688c:	1000051e 	bne	r2,zero,168a4 <_fflush_r+0x38>
   16890:	0005883a 	mov	r2,zero
   16894:	dfc00217 	ldw	ra,8(sp)
   16898:	dc000117 	ldw	r16,4(sp)
   1689c:	dec00304 	addi	sp,sp,12
   168a0:	f800283a 	ret
   168a4:	8009883a 	mov	r4,r16
   168a8:	dfc00217 	ldw	ra,8(sp)
   168ac:	dc000117 	ldw	r16,4(sp)
   168b0:	dec00304 	addi	sp,sp,12
   168b4:	00166501 	jmpi	16650 <__sflush_r>
   168b8:	d9400015 	stw	r5,0(sp)
   168bc:	0016c580 	call	16c58 <__sinit>
   168c0:	d9400017 	ldw	r5,0(sp)
   168c4:	003ff006 	br	16888 <__alt_data_end+0xfc016888>

000168c8 <fflush>:
   168c8:	20000526 	beq	r4,zero,168e0 <fflush+0x18>
   168cc:	008000f4 	movhi	r2,3
   168d0:	10baf904 	addi	r2,r2,-5148
   168d4:	200b883a 	mov	r5,r4
   168d8:	11000017 	ldw	r4,0(r2)
   168dc:	001686c1 	jmpi	1686c <_fflush_r>
   168e0:	008000f4 	movhi	r2,3
   168e4:	10baf804 	addi	r2,r2,-5152
   168e8:	11000017 	ldw	r4,0(r2)
   168ec:	01400074 	movhi	r5,1
   168f0:	295a1b04 	addi	r5,r5,26732
   168f4:	00176681 	jmpi	17668 <_fwalk_reent>

000168f8 <__fp_unlock>:
   168f8:	0005883a 	mov	r2,zero
   168fc:	f800283a 	ret

00016900 <_cleanup_r>:
   16900:	014000b4 	movhi	r5,2
   16904:	29712204 	addi	r5,r5,-15224
   16908:	00176681 	jmpi	17668 <_fwalk_reent>

0001690c <__sinit.part.1>:
   1690c:	defff704 	addi	sp,sp,-36
   16910:	00c00074 	movhi	r3,1
   16914:	dfc00815 	stw	ra,32(sp)
   16918:	ddc00715 	stw	r23,28(sp)
   1691c:	dd800615 	stw	r22,24(sp)
   16920:	dd400515 	stw	r21,20(sp)
   16924:	dd000415 	stw	r20,16(sp)
   16928:	dcc00315 	stw	r19,12(sp)
   1692c:	dc800215 	stw	r18,8(sp)
   16930:	dc400115 	stw	r17,4(sp)
   16934:	dc000015 	stw	r16,0(sp)
   16938:	18da4004 	addi	r3,r3,26880
   1693c:	24000117 	ldw	r16,4(r4)
   16940:	20c00f15 	stw	r3,60(r4)
   16944:	2080bb04 	addi	r2,r4,748
   16948:	00c000c4 	movi	r3,3
   1694c:	20c0b915 	stw	r3,740(r4)
   16950:	2080ba15 	stw	r2,744(r4)
   16954:	2000b815 	stw	zero,736(r4)
   16958:	05c00204 	movi	r23,8
   1695c:	00800104 	movi	r2,4
   16960:	2025883a 	mov	r18,r4
   16964:	b80d883a 	mov	r6,r23
   16968:	81001704 	addi	r4,r16,92
   1696c:	000b883a 	mov	r5,zero
   16970:	80000015 	stw	zero,0(r16)
   16974:	80000115 	stw	zero,4(r16)
   16978:	80000215 	stw	zero,8(r16)
   1697c:	8080030d 	sth	r2,12(r16)
   16980:	80001915 	stw	zero,100(r16)
   16984:	8000038d 	sth	zero,14(r16)
   16988:	80000415 	stw	zero,16(r16)
   1698c:	80000515 	stw	zero,20(r16)
   16990:	80000615 	stw	zero,24(r16)
   16994:	000fdbc0 	call	fdbc <memset>
   16998:	058000b4 	movhi	r22,2
   1699c:	94400217 	ldw	r17,8(r18)
   169a0:	054000b4 	movhi	r21,2
   169a4:	050000b4 	movhi	r20,2
   169a8:	04c000b4 	movhi	r19,2
   169ac:	b5a4ff04 	addi	r22,r22,-27652
   169b0:	ad651604 	addi	r21,r21,-27560
   169b4:	a5253504 	addi	r20,r20,-27436
   169b8:	9ce54c04 	addi	r19,r19,-27344
   169bc:	85800815 	stw	r22,32(r16)
   169c0:	85400915 	stw	r21,36(r16)
   169c4:	85000a15 	stw	r20,40(r16)
   169c8:	84c00b15 	stw	r19,44(r16)
   169cc:	84000715 	stw	r16,28(r16)
   169d0:	00800284 	movi	r2,10
   169d4:	8880030d 	sth	r2,12(r17)
   169d8:	00800044 	movi	r2,1
   169dc:	b80d883a 	mov	r6,r23
   169e0:	89001704 	addi	r4,r17,92
   169e4:	000b883a 	mov	r5,zero
   169e8:	88000015 	stw	zero,0(r17)
   169ec:	88000115 	stw	zero,4(r17)
   169f0:	88000215 	stw	zero,8(r17)
   169f4:	88001915 	stw	zero,100(r17)
   169f8:	8880038d 	sth	r2,14(r17)
   169fc:	88000415 	stw	zero,16(r17)
   16a00:	88000515 	stw	zero,20(r17)
   16a04:	88000615 	stw	zero,24(r17)
   16a08:	000fdbc0 	call	fdbc <memset>
   16a0c:	94000317 	ldw	r16,12(r18)
   16a10:	00800484 	movi	r2,18
   16a14:	8c400715 	stw	r17,28(r17)
   16a18:	8d800815 	stw	r22,32(r17)
   16a1c:	8d400915 	stw	r21,36(r17)
   16a20:	8d000a15 	stw	r20,40(r17)
   16a24:	8cc00b15 	stw	r19,44(r17)
   16a28:	8080030d 	sth	r2,12(r16)
   16a2c:	00800084 	movi	r2,2
   16a30:	80000015 	stw	zero,0(r16)
   16a34:	80000115 	stw	zero,4(r16)
   16a38:	80000215 	stw	zero,8(r16)
   16a3c:	80001915 	stw	zero,100(r16)
   16a40:	8080038d 	sth	r2,14(r16)
   16a44:	80000415 	stw	zero,16(r16)
   16a48:	80000515 	stw	zero,20(r16)
   16a4c:	80000615 	stw	zero,24(r16)
   16a50:	b80d883a 	mov	r6,r23
   16a54:	000b883a 	mov	r5,zero
   16a58:	81001704 	addi	r4,r16,92
   16a5c:	000fdbc0 	call	fdbc <memset>
   16a60:	00800044 	movi	r2,1
   16a64:	84000715 	stw	r16,28(r16)
   16a68:	85800815 	stw	r22,32(r16)
   16a6c:	85400915 	stw	r21,36(r16)
   16a70:	85000a15 	stw	r20,40(r16)
   16a74:	84c00b15 	stw	r19,44(r16)
   16a78:	90800e15 	stw	r2,56(r18)
   16a7c:	dfc00817 	ldw	ra,32(sp)
   16a80:	ddc00717 	ldw	r23,28(sp)
   16a84:	dd800617 	ldw	r22,24(sp)
   16a88:	dd400517 	ldw	r21,20(sp)
   16a8c:	dd000417 	ldw	r20,16(sp)
   16a90:	dcc00317 	ldw	r19,12(sp)
   16a94:	dc800217 	ldw	r18,8(sp)
   16a98:	dc400117 	ldw	r17,4(sp)
   16a9c:	dc000017 	ldw	r16,0(sp)
   16aa0:	dec00904 	addi	sp,sp,36
   16aa4:	f800283a 	ret

00016aa8 <__fp_lock>:
   16aa8:	0005883a 	mov	r2,zero
   16aac:	f800283a 	ret

00016ab0 <__sfmoreglue>:
   16ab0:	defffc04 	addi	sp,sp,-16
   16ab4:	dc800215 	stw	r18,8(sp)
   16ab8:	2825883a 	mov	r18,r5
   16abc:	dc000015 	stw	r16,0(sp)
   16ac0:	01401a04 	movi	r5,104
   16ac4:	2021883a 	mov	r16,r4
   16ac8:	913fffc4 	addi	r4,r18,-1
   16acc:	dfc00315 	stw	ra,12(sp)
   16ad0:	dc400115 	stw	r17,4(sp)
   16ad4:	000d8d40 	call	d8d4 <__mulsi3>
   16ad8:	8009883a 	mov	r4,r16
   16adc:	11401d04 	addi	r5,r2,116
   16ae0:	1023883a 	mov	r17,r2
   16ae4:	000f4680 	call	f468 <_malloc_r>
   16ae8:	1021883a 	mov	r16,r2
   16aec:	10000726 	beq	r2,zero,16b0c <__sfmoreglue+0x5c>
   16af0:	11000304 	addi	r4,r2,12
   16af4:	10000015 	stw	zero,0(r2)
   16af8:	14800115 	stw	r18,4(r2)
   16afc:	11000215 	stw	r4,8(r2)
   16b00:	89801a04 	addi	r6,r17,104
   16b04:	000b883a 	mov	r5,zero
   16b08:	000fdbc0 	call	fdbc <memset>
   16b0c:	8005883a 	mov	r2,r16
   16b10:	dfc00317 	ldw	ra,12(sp)
   16b14:	dc800217 	ldw	r18,8(sp)
   16b18:	dc400117 	ldw	r17,4(sp)
   16b1c:	dc000017 	ldw	r16,0(sp)
   16b20:	dec00404 	addi	sp,sp,16
   16b24:	f800283a 	ret

00016b28 <__sfp>:
   16b28:	defffb04 	addi	sp,sp,-20
   16b2c:	dc000015 	stw	r16,0(sp)
   16b30:	040000f4 	movhi	r16,3
   16b34:	843af804 	addi	r16,r16,-5152
   16b38:	dcc00315 	stw	r19,12(sp)
   16b3c:	2027883a 	mov	r19,r4
   16b40:	81000017 	ldw	r4,0(r16)
   16b44:	dfc00415 	stw	ra,16(sp)
   16b48:	dc800215 	stw	r18,8(sp)
   16b4c:	20800e17 	ldw	r2,56(r4)
   16b50:	dc400115 	stw	r17,4(sp)
   16b54:	1000021e 	bne	r2,zero,16b60 <__sfp+0x38>
   16b58:	001690c0 	call	1690c <__sinit.part.1>
   16b5c:	81000017 	ldw	r4,0(r16)
   16b60:	2480b804 	addi	r18,r4,736
   16b64:	047fffc4 	movi	r17,-1
   16b68:	91000117 	ldw	r4,4(r18)
   16b6c:	94000217 	ldw	r16,8(r18)
   16b70:	213fffc4 	addi	r4,r4,-1
   16b74:	20000a16 	blt	r4,zero,16ba0 <__sfp+0x78>
   16b78:	8080030f 	ldh	r2,12(r16)
   16b7c:	10000c26 	beq	r2,zero,16bb0 <__sfp+0x88>
   16b80:	80c01d04 	addi	r3,r16,116
   16b84:	00000206 	br	16b90 <__sfp+0x68>
   16b88:	18bfe60f 	ldh	r2,-104(r3)
   16b8c:	10000826 	beq	r2,zero,16bb0 <__sfp+0x88>
   16b90:	213fffc4 	addi	r4,r4,-1
   16b94:	1c3ffd04 	addi	r16,r3,-12
   16b98:	18c01a04 	addi	r3,r3,104
   16b9c:	247ffa1e 	bne	r4,r17,16b88 <__alt_data_end+0xfc016b88>
   16ba0:	90800017 	ldw	r2,0(r18)
   16ba4:	10001d26 	beq	r2,zero,16c1c <__sfp+0xf4>
   16ba8:	1025883a 	mov	r18,r2
   16bac:	003fee06 	br	16b68 <__alt_data_end+0xfc016b68>
   16bb0:	00bfffc4 	movi	r2,-1
   16bb4:	8080038d 	sth	r2,14(r16)
   16bb8:	00800044 	movi	r2,1
   16bbc:	8080030d 	sth	r2,12(r16)
   16bc0:	80001915 	stw	zero,100(r16)
   16bc4:	80000015 	stw	zero,0(r16)
   16bc8:	80000215 	stw	zero,8(r16)
   16bcc:	80000115 	stw	zero,4(r16)
   16bd0:	80000415 	stw	zero,16(r16)
   16bd4:	80000515 	stw	zero,20(r16)
   16bd8:	80000615 	stw	zero,24(r16)
   16bdc:	01800204 	movi	r6,8
   16be0:	000b883a 	mov	r5,zero
   16be4:	81001704 	addi	r4,r16,92
   16be8:	000fdbc0 	call	fdbc <memset>
   16bec:	8005883a 	mov	r2,r16
   16bf0:	80000c15 	stw	zero,48(r16)
   16bf4:	80000d15 	stw	zero,52(r16)
   16bf8:	80001115 	stw	zero,68(r16)
   16bfc:	80001215 	stw	zero,72(r16)
   16c00:	dfc00417 	ldw	ra,16(sp)
   16c04:	dcc00317 	ldw	r19,12(sp)
   16c08:	dc800217 	ldw	r18,8(sp)
   16c0c:	dc400117 	ldw	r17,4(sp)
   16c10:	dc000017 	ldw	r16,0(sp)
   16c14:	dec00504 	addi	sp,sp,20
   16c18:	f800283a 	ret
   16c1c:	01400104 	movi	r5,4
   16c20:	9809883a 	mov	r4,r19
   16c24:	0016ab00 	call	16ab0 <__sfmoreglue>
   16c28:	90800015 	stw	r2,0(r18)
   16c2c:	103fde1e 	bne	r2,zero,16ba8 <__alt_data_end+0xfc016ba8>
   16c30:	00800304 	movi	r2,12
   16c34:	98800015 	stw	r2,0(r19)
   16c38:	0005883a 	mov	r2,zero
   16c3c:	003ff006 	br	16c00 <__alt_data_end+0xfc016c00>

00016c40 <_cleanup>:
   16c40:	008000f4 	movhi	r2,3
   16c44:	10baf804 	addi	r2,r2,-5152
   16c48:	11000017 	ldw	r4,0(r2)
   16c4c:	014000b4 	movhi	r5,2
   16c50:	29712204 	addi	r5,r5,-15224
   16c54:	00176681 	jmpi	17668 <_fwalk_reent>

00016c58 <__sinit>:
   16c58:	20800e17 	ldw	r2,56(r4)
   16c5c:	10000126 	beq	r2,zero,16c64 <__sinit+0xc>
   16c60:	f800283a 	ret
   16c64:	001690c1 	jmpi	1690c <__sinit.part.1>

00016c68 <__sfp_lock_acquire>:
   16c68:	f800283a 	ret

00016c6c <__sfp_lock_release>:
   16c6c:	f800283a 	ret

00016c70 <__sinit_lock_acquire>:
   16c70:	f800283a 	ret

00016c74 <__sinit_lock_release>:
   16c74:	f800283a 	ret

00016c78 <__fp_lock_all>:
   16c78:	008000f4 	movhi	r2,3
   16c7c:	10baf904 	addi	r2,r2,-5148
   16c80:	11000017 	ldw	r4,0(r2)
   16c84:	01400074 	movhi	r5,1
   16c88:	295aaa04 	addi	r5,r5,27304
   16c8c:	00175a41 	jmpi	175a4 <_fwalk>

00016c90 <__fp_unlock_all>:
   16c90:	008000f4 	movhi	r2,3
   16c94:	10baf904 	addi	r2,r2,-5148
   16c98:	11000017 	ldw	r4,0(r2)
   16c9c:	01400074 	movhi	r5,1
   16ca0:	295a3e04 	addi	r5,r5,26872
   16ca4:	00175a41 	jmpi	175a4 <_fwalk>

00016ca8 <_malloc_trim_r>:
   16ca8:	defffb04 	addi	sp,sp,-20
   16cac:	dcc00315 	stw	r19,12(sp)
   16cb0:	04c000f4 	movhi	r19,3
   16cb4:	dc800215 	stw	r18,8(sp)
   16cb8:	dc400115 	stw	r17,4(sp)
   16cbc:	dc000015 	stw	r16,0(sp)
   16cc0:	dfc00415 	stw	ra,16(sp)
   16cc4:	2821883a 	mov	r16,r5
   16cc8:	9cef9604 	addi	r19,r19,-16808
   16ccc:	2025883a 	mov	r18,r4
   16cd0:	00206480 	call	20648 <__malloc_lock>
   16cd4:	98800217 	ldw	r2,8(r19)
   16cd8:	14400117 	ldw	r17,4(r2)
   16cdc:	00bfff04 	movi	r2,-4
   16ce0:	88a2703a 	and	r17,r17,r2
   16ce4:	8c21c83a 	sub	r16,r17,r16
   16ce8:	8403fbc4 	addi	r16,r16,4079
   16cec:	8020d33a 	srli	r16,r16,12
   16cf0:	0083ffc4 	movi	r2,4095
   16cf4:	843fffc4 	addi	r16,r16,-1
   16cf8:	8020933a 	slli	r16,r16,12
   16cfc:	1400060e 	bge	r2,r16,16d18 <_malloc_trim_r+0x70>
   16d00:	000b883a 	mov	r5,zero
   16d04:	9009883a 	mov	r4,r18
   16d08:	00100440 	call	10044 <_sbrk_r>
   16d0c:	98c00217 	ldw	r3,8(r19)
   16d10:	1c47883a 	add	r3,r3,r17
   16d14:	10c00a26 	beq	r2,r3,16d40 <_malloc_trim_r+0x98>
   16d18:	9009883a 	mov	r4,r18
   16d1c:	002066c0 	call	2066c <__malloc_unlock>
   16d20:	0005883a 	mov	r2,zero
   16d24:	dfc00417 	ldw	ra,16(sp)
   16d28:	dcc00317 	ldw	r19,12(sp)
   16d2c:	dc800217 	ldw	r18,8(sp)
   16d30:	dc400117 	ldw	r17,4(sp)
   16d34:	dc000017 	ldw	r16,0(sp)
   16d38:	dec00504 	addi	sp,sp,20
   16d3c:	f800283a 	ret
   16d40:	040bc83a 	sub	r5,zero,r16
   16d44:	9009883a 	mov	r4,r18
   16d48:	00100440 	call	10044 <_sbrk_r>
   16d4c:	00ffffc4 	movi	r3,-1
   16d50:	10c00d26 	beq	r2,r3,16d88 <_malloc_trim_r+0xe0>
   16d54:	00c000f4 	movhi	r3,3
   16d58:	18c7eb04 	addi	r3,r3,8108
   16d5c:	18800017 	ldw	r2,0(r3)
   16d60:	99000217 	ldw	r4,8(r19)
   16d64:	8c23c83a 	sub	r17,r17,r16
   16d68:	8c400054 	ori	r17,r17,1
   16d6c:	1421c83a 	sub	r16,r2,r16
   16d70:	24400115 	stw	r17,4(r4)
   16d74:	9009883a 	mov	r4,r18
   16d78:	1c000015 	stw	r16,0(r3)
   16d7c:	002066c0 	call	2066c <__malloc_unlock>
   16d80:	00800044 	movi	r2,1
   16d84:	003fe706 	br	16d24 <__alt_data_end+0xfc016d24>
   16d88:	000b883a 	mov	r5,zero
   16d8c:	9009883a 	mov	r4,r18
   16d90:	00100440 	call	10044 <_sbrk_r>
   16d94:	99000217 	ldw	r4,8(r19)
   16d98:	014003c4 	movi	r5,15
   16d9c:	1107c83a 	sub	r3,r2,r4
   16da0:	28ffdd0e 	bge	r5,r3,16d18 <__alt_data_end+0xfc016d18>
   16da4:	014000f4 	movhi	r5,3
   16da8:	297afa04 	addi	r5,r5,-5144
   16dac:	29400017 	ldw	r5,0(r5)
   16db0:	18c00054 	ori	r3,r3,1
   16db4:	20c00115 	stw	r3,4(r4)
   16db8:	00c000f4 	movhi	r3,3
   16dbc:	1145c83a 	sub	r2,r2,r5
   16dc0:	18c7eb04 	addi	r3,r3,8108
   16dc4:	18800015 	stw	r2,0(r3)
   16dc8:	003fd306 	br	16d18 <__alt_data_end+0xfc016d18>

00016dcc <_free_r>:
   16dcc:	28004126 	beq	r5,zero,16ed4 <_free_r+0x108>
   16dd0:	defffd04 	addi	sp,sp,-12
   16dd4:	dc400115 	stw	r17,4(sp)
   16dd8:	dc000015 	stw	r16,0(sp)
   16ddc:	2023883a 	mov	r17,r4
   16de0:	2821883a 	mov	r16,r5
   16de4:	dfc00215 	stw	ra,8(sp)
   16de8:	00206480 	call	20648 <__malloc_lock>
   16dec:	81ffff17 	ldw	r7,-4(r16)
   16df0:	00bfff84 	movi	r2,-2
   16df4:	010000f4 	movhi	r4,3
   16df8:	81bffe04 	addi	r6,r16,-8
   16dfc:	3884703a 	and	r2,r7,r2
   16e00:	212f9604 	addi	r4,r4,-16808
   16e04:	308b883a 	add	r5,r6,r2
   16e08:	2a400117 	ldw	r9,4(r5)
   16e0c:	22000217 	ldw	r8,8(r4)
   16e10:	00ffff04 	movi	r3,-4
   16e14:	48c6703a 	and	r3,r9,r3
   16e18:	2a005726 	beq	r5,r8,16f78 <_free_r+0x1ac>
   16e1c:	28c00115 	stw	r3,4(r5)
   16e20:	39c0004c 	andi	r7,r7,1
   16e24:	3800091e 	bne	r7,zero,16e4c <_free_r+0x80>
   16e28:	823ffe17 	ldw	r8,-8(r16)
   16e2c:	22400204 	addi	r9,r4,8
   16e30:	320dc83a 	sub	r6,r6,r8
   16e34:	31c00217 	ldw	r7,8(r6)
   16e38:	1205883a 	add	r2,r2,r8
   16e3c:	3a406526 	beq	r7,r9,16fd4 <_free_r+0x208>
   16e40:	32000317 	ldw	r8,12(r6)
   16e44:	3a000315 	stw	r8,12(r7)
   16e48:	41c00215 	stw	r7,8(r8)
   16e4c:	28cf883a 	add	r7,r5,r3
   16e50:	39c00117 	ldw	r7,4(r7)
   16e54:	39c0004c 	andi	r7,r7,1
   16e58:	38003a26 	beq	r7,zero,16f44 <_free_r+0x178>
   16e5c:	10c00054 	ori	r3,r2,1
   16e60:	30c00115 	stw	r3,4(r6)
   16e64:	3087883a 	add	r3,r6,r2
   16e68:	18800015 	stw	r2,0(r3)
   16e6c:	00c07fc4 	movi	r3,511
   16e70:	18801936 	bltu	r3,r2,16ed8 <_free_r+0x10c>
   16e74:	1004d0fa 	srli	r2,r2,3
   16e78:	01c00044 	movi	r7,1
   16e7c:	21400117 	ldw	r5,4(r4)
   16e80:	10c00044 	addi	r3,r2,1
   16e84:	18c7883a 	add	r3,r3,r3
   16e88:	1005d0ba 	srai	r2,r2,2
   16e8c:	18c7883a 	add	r3,r3,r3
   16e90:	18c7883a 	add	r3,r3,r3
   16e94:	1907883a 	add	r3,r3,r4
   16e98:	3884983a 	sll	r2,r7,r2
   16e9c:	19c00017 	ldw	r7,0(r3)
   16ea0:	1a3ffe04 	addi	r8,r3,-8
   16ea4:	1144b03a 	or	r2,r2,r5
   16ea8:	32000315 	stw	r8,12(r6)
   16eac:	31c00215 	stw	r7,8(r6)
   16eb0:	20800115 	stw	r2,4(r4)
   16eb4:	19800015 	stw	r6,0(r3)
   16eb8:	39800315 	stw	r6,12(r7)
   16ebc:	8809883a 	mov	r4,r17
   16ec0:	dfc00217 	ldw	ra,8(sp)
   16ec4:	dc400117 	ldw	r17,4(sp)
   16ec8:	dc000017 	ldw	r16,0(sp)
   16ecc:	dec00304 	addi	sp,sp,12
   16ed0:	002066c1 	jmpi	2066c <__malloc_unlock>
   16ed4:	f800283a 	ret
   16ed8:	100ad27a 	srli	r5,r2,9
   16edc:	00c00104 	movi	r3,4
   16ee0:	19404a36 	bltu	r3,r5,1700c <_free_r+0x240>
   16ee4:	100ad1ba 	srli	r5,r2,6
   16ee8:	28c00e44 	addi	r3,r5,57
   16eec:	18c7883a 	add	r3,r3,r3
   16ef0:	29400e04 	addi	r5,r5,56
   16ef4:	18c7883a 	add	r3,r3,r3
   16ef8:	18c7883a 	add	r3,r3,r3
   16efc:	1909883a 	add	r4,r3,r4
   16f00:	20c00017 	ldw	r3,0(r4)
   16f04:	01c000f4 	movhi	r7,3
   16f08:	213ffe04 	addi	r4,r4,-8
   16f0c:	39ef9604 	addi	r7,r7,-16808
   16f10:	20c04426 	beq	r4,r3,17024 <_free_r+0x258>
   16f14:	01ffff04 	movi	r7,-4
   16f18:	19400117 	ldw	r5,4(r3)
   16f1c:	29ca703a 	and	r5,r5,r7
   16f20:	1140022e 	bgeu	r2,r5,16f2c <_free_r+0x160>
   16f24:	18c00217 	ldw	r3,8(r3)
   16f28:	20fffb1e 	bne	r4,r3,16f18 <__alt_data_end+0xfc016f18>
   16f2c:	19000317 	ldw	r4,12(r3)
   16f30:	31000315 	stw	r4,12(r6)
   16f34:	30c00215 	stw	r3,8(r6)
   16f38:	21800215 	stw	r6,8(r4)
   16f3c:	19800315 	stw	r6,12(r3)
   16f40:	003fde06 	br	16ebc <__alt_data_end+0xfc016ebc>
   16f44:	29c00217 	ldw	r7,8(r5)
   16f48:	10c5883a 	add	r2,r2,r3
   16f4c:	00c000f4 	movhi	r3,3
   16f50:	18ef9804 	addi	r3,r3,-16800
   16f54:	38c03b26 	beq	r7,r3,17044 <_free_r+0x278>
   16f58:	2a000317 	ldw	r8,12(r5)
   16f5c:	11400054 	ori	r5,r2,1
   16f60:	3087883a 	add	r3,r6,r2
   16f64:	3a000315 	stw	r8,12(r7)
   16f68:	41c00215 	stw	r7,8(r8)
   16f6c:	31400115 	stw	r5,4(r6)
   16f70:	18800015 	stw	r2,0(r3)
   16f74:	003fbd06 	br	16e6c <__alt_data_end+0xfc016e6c>
   16f78:	39c0004c 	andi	r7,r7,1
   16f7c:	10c5883a 	add	r2,r2,r3
   16f80:	3800071e 	bne	r7,zero,16fa0 <_free_r+0x1d4>
   16f84:	81fffe17 	ldw	r7,-8(r16)
   16f88:	31cdc83a 	sub	r6,r6,r7
   16f8c:	30c00317 	ldw	r3,12(r6)
   16f90:	31400217 	ldw	r5,8(r6)
   16f94:	11c5883a 	add	r2,r2,r7
   16f98:	28c00315 	stw	r3,12(r5)
   16f9c:	19400215 	stw	r5,8(r3)
   16fa0:	10c00054 	ori	r3,r2,1
   16fa4:	30c00115 	stw	r3,4(r6)
   16fa8:	00c000f4 	movhi	r3,3
   16fac:	18fafb04 	addi	r3,r3,-5140
   16fb0:	18c00017 	ldw	r3,0(r3)
   16fb4:	21800215 	stw	r6,8(r4)
   16fb8:	10ffc036 	bltu	r2,r3,16ebc <__alt_data_end+0xfc016ebc>
   16fbc:	008000f4 	movhi	r2,3
   16fc0:	10879304 	addi	r2,r2,7756
   16fc4:	11400017 	ldw	r5,0(r2)
   16fc8:	8809883a 	mov	r4,r17
   16fcc:	0016ca80 	call	16ca8 <_malloc_trim_r>
   16fd0:	003fba06 	br	16ebc <__alt_data_end+0xfc016ebc>
   16fd4:	28c9883a 	add	r4,r5,r3
   16fd8:	21000117 	ldw	r4,4(r4)
   16fdc:	2100004c 	andi	r4,r4,1
   16fe0:	2000391e 	bne	r4,zero,170c8 <_free_r+0x2fc>
   16fe4:	29c00217 	ldw	r7,8(r5)
   16fe8:	29000317 	ldw	r4,12(r5)
   16fec:	1885883a 	add	r2,r3,r2
   16ff0:	10c00054 	ori	r3,r2,1
   16ff4:	39000315 	stw	r4,12(r7)
   16ff8:	21c00215 	stw	r7,8(r4)
   16ffc:	30c00115 	stw	r3,4(r6)
   17000:	308d883a 	add	r6,r6,r2
   17004:	30800015 	stw	r2,0(r6)
   17008:	003fac06 	br	16ebc <__alt_data_end+0xfc016ebc>
   1700c:	00c00504 	movi	r3,20
   17010:	19401536 	bltu	r3,r5,17068 <_free_r+0x29c>
   17014:	28c01704 	addi	r3,r5,92
   17018:	18c7883a 	add	r3,r3,r3
   1701c:	294016c4 	addi	r5,r5,91
   17020:	003fb406 	br	16ef4 <__alt_data_end+0xfc016ef4>
   17024:	280bd0ba 	srai	r5,r5,2
   17028:	00c00044 	movi	r3,1
   1702c:	38800117 	ldw	r2,4(r7)
   17030:	194a983a 	sll	r5,r3,r5
   17034:	2007883a 	mov	r3,r4
   17038:	2884b03a 	or	r2,r5,r2
   1703c:	38800115 	stw	r2,4(r7)
   17040:	003fbb06 	br	16f30 <__alt_data_end+0xfc016f30>
   17044:	21800515 	stw	r6,20(r4)
   17048:	21800415 	stw	r6,16(r4)
   1704c:	10c00054 	ori	r3,r2,1
   17050:	31c00315 	stw	r7,12(r6)
   17054:	31c00215 	stw	r7,8(r6)
   17058:	30c00115 	stw	r3,4(r6)
   1705c:	308d883a 	add	r6,r6,r2
   17060:	30800015 	stw	r2,0(r6)
   17064:	003f9506 	br	16ebc <__alt_data_end+0xfc016ebc>
   17068:	00c01504 	movi	r3,84
   1706c:	19400536 	bltu	r3,r5,17084 <_free_r+0x2b8>
   17070:	100ad33a 	srli	r5,r2,12
   17074:	28c01bc4 	addi	r3,r5,111
   17078:	18c7883a 	add	r3,r3,r3
   1707c:	29401b84 	addi	r5,r5,110
   17080:	003f9c06 	br	16ef4 <__alt_data_end+0xfc016ef4>
   17084:	00c05504 	movi	r3,340
   17088:	19400536 	bltu	r3,r5,170a0 <_free_r+0x2d4>
   1708c:	100ad3fa 	srli	r5,r2,15
   17090:	28c01e04 	addi	r3,r5,120
   17094:	18c7883a 	add	r3,r3,r3
   17098:	29401dc4 	addi	r5,r5,119
   1709c:	003f9506 	br	16ef4 <__alt_data_end+0xfc016ef4>
   170a0:	00c15504 	movi	r3,1364
   170a4:	19400536 	bltu	r3,r5,170bc <_free_r+0x2f0>
   170a8:	100ad4ba 	srli	r5,r2,18
   170ac:	28c01f44 	addi	r3,r5,125
   170b0:	18c7883a 	add	r3,r3,r3
   170b4:	29401f04 	addi	r5,r5,124
   170b8:	003f8e06 	br	16ef4 <__alt_data_end+0xfc016ef4>
   170bc:	00c03f84 	movi	r3,254
   170c0:	01401f84 	movi	r5,126
   170c4:	003f8b06 	br	16ef4 <__alt_data_end+0xfc016ef4>
   170c8:	10c00054 	ori	r3,r2,1
   170cc:	30c00115 	stw	r3,4(r6)
   170d0:	308d883a 	add	r6,r6,r2
   170d4:	30800015 	stw	r2,0(r6)
   170d8:	003f7806 	br	16ebc <__alt_data_end+0xfc016ebc>

000170dc <__sfvwrite_r>:
   170dc:	30800217 	ldw	r2,8(r6)
   170e0:	10006726 	beq	r2,zero,17280 <__sfvwrite_r+0x1a4>
   170e4:	28c0030b 	ldhu	r3,12(r5)
   170e8:	defff404 	addi	sp,sp,-48
   170ec:	dd400715 	stw	r21,28(sp)
   170f0:	dd000615 	stw	r20,24(sp)
   170f4:	dc000215 	stw	r16,8(sp)
   170f8:	dfc00b15 	stw	ra,44(sp)
   170fc:	df000a15 	stw	fp,40(sp)
   17100:	ddc00915 	stw	r23,36(sp)
   17104:	dd800815 	stw	r22,32(sp)
   17108:	dcc00515 	stw	r19,20(sp)
   1710c:	dc800415 	stw	r18,16(sp)
   17110:	dc400315 	stw	r17,12(sp)
   17114:	1880020c 	andi	r2,r3,8
   17118:	2821883a 	mov	r16,r5
   1711c:	202b883a 	mov	r21,r4
   17120:	3029883a 	mov	r20,r6
   17124:	10002726 	beq	r2,zero,171c4 <__sfvwrite_r+0xe8>
   17128:	28800417 	ldw	r2,16(r5)
   1712c:	10002526 	beq	r2,zero,171c4 <__sfvwrite_r+0xe8>
   17130:	1880008c 	andi	r2,r3,2
   17134:	a4400017 	ldw	r17,0(r20)
   17138:	10002a26 	beq	r2,zero,171e4 <__sfvwrite_r+0x108>
   1713c:	05a00034 	movhi	r22,32768
   17140:	0027883a 	mov	r19,zero
   17144:	0025883a 	mov	r18,zero
   17148:	b5bf0004 	addi	r22,r22,-1024
   1714c:	980d883a 	mov	r6,r19
   17150:	a809883a 	mov	r4,r21
   17154:	90004626 	beq	r18,zero,17270 <__sfvwrite_r+0x194>
   17158:	900f883a 	mov	r7,r18
   1715c:	b480022e 	bgeu	r22,r18,17168 <__sfvwrite_r+0x8c>
   17160:	01e00034 	movhi	r7,32768
   17164:	39ff0004 	addi	r7,r7,-1024
   17168:	80800917 	ldw	r2,36(r16)
   1716c:	81400717 	ldw	r5,28(r16)
   17170:	103ee83a 	callr	r2
   17174:	00805a0e 	bge	zero,r2,172e0 <__sfvwrite_r+0x204>
   17178:	a0c00217 	ldw	r3,8(r20)
   1717c:	98a7883a 	add	r19,r19,r2
   17180:	90a5c83a 	sub	r18,r18,r2
   17184:	1885c83a 	sub	r2,r3,r2
   17188:	a0800215 	stw	r2,8(r20)
   1718c:	103fef1e 	bne	r2,zero,1714c <__alt_data_end+0xfc01714c>
   17190:	0005883a 	mov	r2,zero
   17194:	dfc00b17 	ldw	ra,44(sp)
   17198:	df000a17 	ldw	fp,40(sp)
   1719c:	ddc00917 	ldw	r23,36(sp)
   171a0:	dd800817 	ldw	r22,32(sp)
   171a4:	dd400717 	ldw	r21,28(sp)
   171a8:	dd000617 	ldw	r20,24(sp)
   171ac:	dcc00517 	ldw	r19,20(sp)
   171b0:	dc800417 	ldw	r18,16(sp)
   171b4:	dc400317 	ldw	r17,12(sp)
   171b8:	dc000217 	ldw	r16,8(sp)
   171bc:	dec00c04 	addi	sp,sp,48
   171c0:	f800283a 	ret
   171c4:	800b883a 	mov	r5,r16
   171c8:	a809883a 	mov	r4,r21
   171cc:	0014c4c0 	call	14c4c <__swsetup_r>
   171d0:	1000ee1e 	bne	r2,zero,1758c <__sfvwrite_r+0x4b0>
   171d4:	80c0030b 	ldhu	r3,12(r16)
   171d8:	a4400017 	ldw	r17,0(r20)
   171dc:	1880008c 	andi	r2,r3,2
   171e0:	103fd61e 	bne	r2,zero,1713c <__alt_data_end+0xfc01713c>
   171e4:	1880004c 	andi	r2,r3,1
   171e8:	1000421e 	bne	r2,zero,172f4 <__sfvwrite_r+0x218>
   171ec:	0039883a 	mov	fp,zero
   171f0:	0025883a 	mov	r18,zero
   171f4:	90001a26 	beq	r18,zero,17260 <__sfvwrite_r+0x184>
   171f8:	1880800c 	andi	r2,r3,512
   171fc:	84c00217 	ldw	r19,8(r16)
   17200:	10002126 	beq	r2,zero,17288 <__sfvwrite_r+0x1ac>
   17204:	982f883a 	mov	r23,r19
   17208:	94c09636 	bltu	r18,r19,17464 <__sfvwrite_r+0x388>
   1720c:	1881200c 	andi	r2,r3,1152
   17210:	1000a11e 	bne	r2,zero,17498 <__sfvwrite_r+0x3bc>
   17214:	81000017 	ldw	r4,0(r16)
   17218:	b80d883a 	mov	r6,r23
   1721c:	e00b883a 	mov	r5,fp
   17220:	0017aa80 	call	17aa8 <memmove>
   17224:	80c00217 	ldw	r3,8(r16)
   17228:	81000017 	ldw	r4,0(r16)
   1722c:	9005883a 	mov	r2,r18
   17230:	1ce7c83a 	sub	r19,r3,r19
   17234:	25cf883a 	add	r7,r4,r23
   17238:	84c00215 	stw	r19,8(r16)
   1723c:	81c00015 	stw	r7,0(r16)
   17240:	a0c00217 	ldw	r3,8(r20)
   17244:	e0b9883a 	add	fp,fp,r2
   17248:	90a5c83a 	sub	r18,r18,r2
   1724c:	18a7c83a 	sub	r19,r3,r2
   17250:	a4c00215 	stw	r19,8(r20)
   17254:	983fce26 	beq	r19,zero,17190 <__alt_data_end+0xfc017190>
   17258:	80c0030b 	ldhu	r3,12(r16)
   1725c:	903fe61e 	bne	r18,zero,171f8 <__alt_data_end+0xfc0171f8>
   17260:	8f000017 	ldw	fp,0(r17)
   17264:	8c800117 	ldw	r18,4(r17)
   17268:	8c400204 	addi	r17,r17,8
   1726c:	003fe106 	br	171f4 <__alt_data_end+0xfc0171f4>
   17270:	8cc00017 	ldw	r19,0(r17)
   17274:	8c800117 	ldw	r18,4(r17)
   17278:	8c400204 	addi	r17,r17,8
   1727c:	003fb306 	br	1714c <__alt_data_end+0xfc01714c>
   17280:	0005883a 	mov	r2,zero
   17284:	f800283a 	ret
   17288:	81000017 	ldw	r4,0(r16)
   1728c:	80800417 	ldw	r2,16(r16)
   17290:	11005a36 	bltu	r2,r4,173fc <__sfvwrite_r+0x320>
   17294:	85c00517 	ldw	r23,20(r16)
   17298:	95c05836 	bltu	r18,r23,173fc <__sfvwrite_r+0x320>
   1729c:	00a00034 	movhi	r2,32768
   172a0:	10bfffc4 	addi	r2,r2,-1
   172a4:	9009883a 	mov	r4,r18
   172a8:	1480012e 	bgeu	r2,r18,172b0 <__sfvwrite_r+0x1d4>
   172ac:	1009883a 	mov	r4,r2
   172b0:	b80b883a 	mov	r5,r23
   172b4:	000d7200 	call	d720 <__divsi3>
   172b8:	b80b883a 	mov	r5,r23
   172bc:	1009883a 	mov	r4,r2
   172c0:	000d8d40 	call	d8d4 <__mulsi3>
   172c4:	81400717 	ldw	r5,28(r16)
   172c8:	80c00917 	ldw	r3,36(r16)
   172cc:	100f883a 	mov	r7,r2
   172d0:	e00d883a 	mov	r6,fp
   172d4:	a809883a 	mov	r4,r21
   172d8:	183ee83a 	callr	r3
   172dc:	00bfd816 	blt	zero,r2,17240 <__alt_data_end+0xfc017240>
   172e0:	8080030b 	ldhu	r2,12(r16)
   172e4:	10801014 	ori	r2,r2,64
   172e8:	8080030d 	sth	r2,12(r16)
   172ec:	00bfffc4 	movi	r2,-1
   172f0:	003fa806 	br	17194 <__alt_data_end+0xfc017194>
   172f4:	0027883a 	mov	r19,zero
   172f8:	0011883a 	mov	r8,zero
   172fc:	0039883a 	mov	fp,zero
   17300:	0025883a 	mov	r18,zero
   17304:	90001f26 	beq	r18,zero,17384 <__sfvwrite_r+0x2a8>
   17308:	40005a26 	beq	r8,zero,17474 <__sfvwrite_r+0x398>
   1730c:	982d883a 	mov	r22,r19
   17310:	94c0012e 	bgeu	r18,r19,17318 <__sfvwrite_r+0x23c>
   17314:	902d883a 	mov	r22,r18
   17318:	81000017 	ldw	r4,0(r16)
   1731c:	80800417 	ldw	r2,16(r16)
   17320:	b02f883a 	mov	r23,r22
   17324:	81c00517 	ldw	r7,20(r16)
   17328:	1100032e 	bgeu	r2,r4,17338 <__sfvwrite_r+0x25c>
   1732c:	80c00217 	ldw	r3,8(r16)
   17330:	38c7883a 	add	r3,r7,r3
   17334:	1d801816 	blt	r3,r22,17398 <__sfvwrite_r+0x2bc>
   17338:	b1c03e16 	blt	r22,r7,17434 <__sfvwrite_r+0x358>
   1733c:	80800917 	ldw	r2,36(r16)
   17340:	81400717 	ldw	r5,28(r16)
   17344:	e00d883a 	mov	r6,fp
   17348:	da000115 	stw	r8,4(sp)
   1734c:	a809883a 	mov	r4,r21
   17350:	103ee83a 	callr	r2
   17354:	102f883a 	mov	r23,r2
   17358:	da000117 	ldw	r8,4(sp)
   1735c:	00bfe00e 	bge	zero,r2,172e0 <__alt_data_end+0xfc0172e0>
   17360:	9de7c83a 	sub	r19,r19,r23
   17364:	98001f26 	beq	r19,zero,173e4 <__sfvwrite_r+0x308>
   17368:	a0800217 	ldw	r2,8(r20)
   1736c:	e5f9883a 	add	fp,fp,r23
   17370:	95e5c83a 	sub	r18,r18,r23
   17374:	15efc83a 	sub	r23,r2,r23
   17378:	a5c00215 	stw	r23,8(r20)
   1737c:	b83f8426 	beq	r23,zero,17190 <__alt_data_end+0xfc017190>
   17380:	903fe11e 	bne	r18,zero,17308 <__alt_data_end+0xfc017308>
   17384:	8f000017 	ldw	fp,0(r17)
   17388:	8c800117 	ldw	r18,4(r17)
   1738c:	0011883a 	mov	r8,zero
   17390:	8c400204 	addi	r17,r17,8
   17394:	003fdb06 	br	17304 <__alt_data_end+0xfc017304>
   17398:	180d883a 	mov	r6,r3
   1739c:	e00b883a 	mov	r5,fp
   173a0:	da000115 	stw	r8,4(sp)
   173a4:	d8c00015 	stw	r3,0(sp)
   173a8:	0017aa80 	call	17aa8 <memmove>
   173ac:	d8c00017 	ldw	r3,0(sp)
   173b0:	80800017 	ldw	r2,0(r16)
   173b4:	800b883a 	mov	r5,r16
   173b8:	a809883a 	mov	r4,r21
   173bc:	10c5883a 	add	r2,r2,r3
   173c0:	80800015 	stw	r2,0(r16)
   173c4:	d8c00015 	stw	r3,0(sp)
   173c8:	001686c0 	call	1686c <_fflush_r>
   173cc:	d8c00017 	ldw	r3,0(sp)
   173d0:	da000117 	ldw	r8,4(sp)
   173d4:	103fc21e 	bne	r2,zero,172e0 <__alt_data_end+0xfc0172e0>
   173d8:	182f883a 	mov	r23,r3
   173dc:	9de7c83a 	sub	r19,r19,r23
   173e0:	983fe11e 	bne	r19,zero,17368 <__alt_data_end+0xfc017368>
   173e4:	800b883a 	mov	r5,r16
   173e8:	a809883a 	mov	r4,r21
   173ec:	001686c0 	call	1686c <_fflush_r>
   173f0:	103fbb1e 	bne	r2,zero,172e0 <__alt_data_end+0xfc0172e0>
   173f4:	0011883a 	mov	r8,zero
   173f8:	003fdb06 	br	17368 <__alt_data_end+0xfc017368>
   173fc:	94c0012e 	bgeu	r18,r19,17404 <__sfvwrite_r+0x328>
   17400:	9027883a 	mov	r19,r18
   17404:	980d883a 	mov	r6,r19
   17408:	e00b883a 	mov	r5,fp
   1740c:	0017aa80 	call	17aa8 <memmove>
   17410:	80800217 	ldw	r2,8(r16)
   17414:	80c00017 	ldw	r3,0(r16)
   17418:	14c5c83a 	sub	r2,r2,r19
   1741c:	1cc7883a 	add	r3,r3,r19
   17420:	80800215 	stw	r2,8(r16)
   17424:	80c00015 	stw	r3,0(r16)
   17428:	10004326 	beq	r2,zero,17538 <__sfvwrite_r+0x45c>
   1742c:	9805883a 	mov	r2,r19
   17430:	003f8306 	br	17240 <__alt_data_end+0xfc017240>
   17434:	b00d883a 	mov	r6,r22
   17438:	e00b883a 	mov	r5,fp
   1743c:	da000115 	stw	r8,4(sp)
   17440:	0017aa80 	call	17aa8 <memmove>
   17444:	80800217 	ldw	r2,8(r16)
   17448:	80c00017 	ldw	r3,0(r16)
   1744c:	da000117 	ldw	r8,4(sp)
   17450:	1585c83a 	sub	r2,r2,r22
   17454:	1dad883a 	add	r22,r3,r22
   17458:	80800215 	stw	r2,8(r16)
   1745c:	85800015 	stw	r22,0(r16)
   17460:	003fbf06 	br	17360 <__alt_data_end+0xfc017360>
   17464:	81000017 	ldw	r4,0(r16)
   17468:	9027883a 	mov	r19,r18
   1746c:	902f883a 	mov	r23,r18
   17470:	003f6906 	br	17218 <__alt_data_end+0xfc017218>
   17474:	900d883a 	mov	r6,r18
   17478:	01400284 	movi	r5,10
   1747c:	e009883a 	mov	r4,fp
   17480:	00179c40 	call	179c4 <memchr>
   17484:	10003e26 	beq	r2,zero,17580 <__sfvwrite_r+0x4a4>
   17488:	10800044 	addi	r2,r2,1
   1748c:	1727c83a 	sub	r19,r2,fp
   17490:	02000044 	movi	r8,1
   17494:	003f9d06 	br	1730c <__alt_data_end+0xfc01730c>
   17498:	80800517 	ldw	r2,20(r16)
   1749c:	81400417 	ldw	r5,16(r16)
   174a0:	81c00017 	ldw	r7,0(r16)
   174a4:	10a7883a 	add	r19,r2,r2
   174a8:	9885883a 	add	r2,r19,r2
   174ac:	1026d7fa 	srli	r19,r2,31
   174b0:	396dc83a 	sub	r22,r7,r5
   174b4:	b1000044 	addi	r4,r22,1
   174b8:	9885883a 	add	r2,r19,r2
   174bc:	1027d07a 	srai	r19,r2,1
   174c0:	2485883a 	add	r2,r4,r18
   174c4:	980d883a 	mov	r6,r19
   174c8:	9880022e 	bgeu	r19,r2,174d4 <__sfvwrite_r+0x3f8>
   174cc:	1027883a 	mov	r19,r2
   174d0:	100d883a 	mov	r6,r2
   174d4:	18c1000c 	andi	r3,r3,1024
   174d8:	18001c26 	beq	r3,zero,1754c <__sfvwrite_r+0x470>
   174dc:	300b883a 	mov	r5,r6
   174e0:	a809883a 	mov	r4,r21
   174e4:	000f4680 	call	f468 <_malloc_r>
   174e8:	102f883a 	mov	r23,r2
   174ec:	10002926 	beq	r2,zero,17594 <__sfvwrite_r+0x4b8>
   174f0:	81400417 	ldw	r5,16(r16)
   174f4:	b00d883a 	mov	r6,r22
   174f8:	1009883a 	mov	r4,r2
   174fc:	000fc740 	call	fc74 <memcpy>
   17500:	8080030b 	ldhu	r2,12(r16)
   17504:	00fedfc4 	movi	r3,-1153
   17508:	10c4703a 	and	r2,r2,r3
   1750c:	10802014 	ori	r2,r2,128
   17510:	8080030d 	sth	r2,12(r16)
   17514:	bd89883a 	add	r4,r23,r22
   17518:	9d8fc83a 	sub	r7,r19,r22
   1751c:	85c00415 	stw	r23,16(r16)
   17520:	84c00515 	stw	r19,20(r16)
   17524:	81000015 	stw	r4,0(r16)
   17528:	9027883a 	mov	r19,r18
   1752c:	81c00215 	stw	r7,8(r16)
   17530:	902f883a 	mov	r23,r18
   17534:	003f3806 	br	17218 <__alt_data_end+0xfc017218>
   17538:	800b883a 	mov	r5,r16
   1753c:	a809883a 	mov	r4,r21
   17540:	001686c0 	call	1686c <_fflush_r>
   17544:	103fb926 	beq	r2,zero,1742c <__alt_data_end+0xfc01742c>
   17548:	003f6506 	br	172e0 <__alt_data_end+0xfc0172e0>
   1754c:	a809883a 	mov	r4,r21
   17550:	0018e240 	call	18e24 <_realloc_r>
   17554:	102f883a 	mov	r23,r2
   17558:	103fee1e 	bne	r2,zero,17514 <__alt_data_end+0xfc017514>
   1755c:	81400417 	ldw	r5,16(r16)
   17560:	a809883a 	mov	r4,r21
   17564:	0016dcc0 	call	16dcc <_free_r>
   17568:	8080030b 	ldhu	r2,12(r16)
   1756c:	00ffdfc4 	movi	r3,-129
   17570:	1884703a 	and	r2,r3,r2
   17574:	00c00304 	movi	r3,12
   17578:	a8c00015 	stw	r3,0(r21)
   1757c:	003f5906 	br	172e4 <__alt_data_end+0xfc0172e4>
   17580:	94c00044 	addi	r19,r18,1
   17584:	02000044 	movi	r8,1
   17588:	003f6006 	br	1730c <__alt_data_end+0xfc01730c>
   1758c:	00bfffc4 	movi	r2,-1
   17590:	003f0006 	br	17194 <__alt_data_end+0xfc017194>
   17594:	00800304 	movi	r2,12
   17598:	a8800015 	stw	r2,0(r21)
   1759c:	8080030b 	ldhu	r2,12(r16)
   175a0:	003f5006 	br	172e4 <__alt_data_end+0xfc0172e4>

000175a4 <_fwalk>:
   175a4:	defff704 	addi	sp,sp,-36
   175a8:	dd000415 	stw	r20,16(sp)
   175ac:	dfc00815 	stw	ra,32(sp)
   175b0:	ddc00715 	stw	r23,28(sp)
   175b4:	dd800615 	stw	r22,24(sp)
   175b8:	dd400515 	stw	r21,20(sp)
   175bc:	dcc00315 	stw	r19,12(sp)
   175c0:	dc800215 	stw	r18,8(sp)
   175c4:	dc400115 	stw	r17,4(sp)
   175c8:	dc000015 	stw	r16,0(sp)
   175cc:	2500b804 	addi	r20,r4,736
   175d0:	a0002326 	beq	r20,zero,17660 <_fwalk+0xbc>
   175d4:	282b883a 	mov	r21,r5
   175d8:	002f883a 	mov	r23,zero
   175dc:	05800044 	movi	r22,1
   175e0:	04ffffc4 	movi	r19,-1
   175e4:	a4400117 	ldw	r17,4(r20)
   175e8:	a4800217 	ldw	r18,8(r20)
   175ec:	8c7fffc4 	addi	r17,r17,-1
   175f0:	88000d16 	blt	r17,zero,17628 <_fwalk+0x84>
   175f4:	94000304 	addi	r16,r18,12
   175f8:	94800384 	addi	r18,r18,14
   175fc:	8080000b 	ldhu	r2,0(r16)
   17600:	8c7fffc4 	addi	r17,r17,-1
   17604:	813ffd04 	addi	r4,r16,-12
   17608:	b080042e 	bgeu	r22,r2,1761c <_fwalk+0x78>
   1760c:	9080000f 	ldh	r2,0(r18)
   17610:	14c00226 	beq	r2,r19,1761c <_fwalk+0x78>
   17614:	a83ee83a 	callr	r21
   17618:	b8aeb03a 	or	r23,r23,r2
   1761c:	84001a04 	addi	r16,r16,104
   17620:	94801a04 	addi	r18,r18,104
   17624:	8cfff51e 	bne	r17,r19,175fc <__alt_data_end+0xfc0175fc>
   17628:	a5000017 	ldw	r20,0(r20)
   1762c:	a03fed1e 	bne	r20,zero,175e4 <__alt_data_end+0xfc0175e4>
   17630:	b805883a 	mov	r2,r23
   17634:	dfc00817 	ldw	ra,32(sp)
   17638:	ddc00717 	ldw	r23,28(sp)
   1763c:	dd800617 	ldw	r22,24(sp)
   17640:	dd400517 	ldw	r21,20(sp)
   17644:	dd000417 	ldw	r20,16(sp)
   17648:	dcc00317 	ldw	r19,12(sp)
   1764c:	dc800217 	ldw	r18,8(sp)
   17650:	dc400117 	ldw	r17,4(sp)
   17654:	dc000017 	ldw	r16,0(sp)
   17658:	dec00904 	addi	sp,sp,36
   1765c:	f800283a 	ret
   17660:	002f883a 	mov	r23,zero
   17664:	003ff206 	br	17630 <__alt_data_end+0xfc017630>

00017668 <_fwalk_reent>:
   17668:	defff704 	addi	sp,sp,-36
   1766c:	dd000415 	stw	r20,16(sp)
   17670:	dfc00815 	stw	ra,32(sp)
   17674:	ddc00715 	stw	r23,28(sp)
   17678:	dd800615 	stw	r22,24(sp)
   1767c:	dd400515 	stw	r21,20(sp)
   17680:	dcc00315 	stw	r19,12(sp)
   17684:	dc800215 	stw	r18,8(sp)
   17688:	dc400115 	stw	r17,4(sp)
   1768c:	dc000015 	stw	r16,0(sp)
   17690:	2500b804 	addi	r20,r4,736
   17694:	a0002326 	beq	r20,zero,17724 <_fwalk_reent+0xbc>
   17698:	282b883a 	mov	r21,r5
   1769c:	2027883a 	mov	r19,r4
   176a0:	002f883a 	mov	r23,zero
   176a4:	05800044 	movi	r22,1
   176a8:	04bfffc4 	movi	r18,-1
   176ac:	a4400117 	ldw	r17,4(r20)
   176b0:	a4000217 	ldw	r16,8(r20)
   176b4:	8c7fffc4 	addi	r17,r17,-1
   176b8:	88000c16 	blt	r17,zero,176ec <_fwalk_reent+0x84>
   176bc:	84000304 	addi	r16,r16,12
   176c0:	8080000b 	ldhu	r2,0(r16)
   176c4:	8c7fffc4 	addi	r17,r17,-1
   176c8:	817ffd04 	addi	r5,r16,-12
   176cc:	b080052e 	bgeu	r22,r2,176e4 <_fwalk_reent+0x7c>
   176d0:	8080008f 	ldh	r2,2(r16)
   176d4:	9809883a 	mov	r4,r19
   176d8:	14800226 	beq	r2,r18,176e4 <_fwalk_reent+0x7c>
   176dc:	a83ee83a 	callr	r21
   176e0:	b8aeb03a 	or	r23,r23,r2
   176e4:	84001a04 	addi	r16,r16,104
   176e8:	8cbff51e 	bne	r17,r18,176c0 <__alt_data_end+0xfc0176c0>
   176ec:	a5000017 	ldw	r20,0(r20)
   176f0:	a03fee1e 	bne	r20,zero,176ac <__alt_data_end+0xfc0176ac>
   176f4:	b805883a 	mov	r2,r23
   176f8:	dfc00817 	ldw	ra,32(sp)
   176fc:	ddc00717 	ldw	r23,28(sp)
   17700:	dd800617 	ldw	r22,24(sp)
   17704:	dd400517 	ldw	r21,20(sp)
   17708:	dd000417 	ldw	r20,16(sp)
   1770c:	dcc00317 	ldw	r19,12(sp)
   17710:	dc800217 	ldw	r18,8(sp)
   17714:	dc400117 	ldw	r17,4(sp)
   17718:	dc000017 	ldw	r16,0(sp)
   1771c:	dec00904 	addi	sp,sp,36
   17720:	f800283a 	ret
   17724:	002f883a 	mov	r23,zero
   17728:	003ff206 	br	176f4 <__alt_data_end+0xfc0176f4>

0001772c <_setlocale_r>:
   1772c:	30001b26 	beq	r6,zero,1779c <_setlocale_r+0x70>
   17730:	014000f4 	movhi	r5,3
   17734:	defffe04 	addi	sp,sp,-8
   17738:	296e1904 	addi	r5,r5,-18332
   1773c:	3009883a 	mov	r4,r6
   17740:	dc000015 	stw	r16,0(sp)
   17744:	dfc00115 	stw	ra,4(sp)
   17748:	3021883a 	mov	r16,r6
   1774c:	00104600 	call	10460 <strcmp>
   17750:	1000061e 	bne	r2,zero,1776c <_setlocale_r+0x40>
   17754:	008000f4 	movhi	r2,3
   17758:	10adf204 	addi	r2,r2,-18488
   1775c:	dfc00117 	ldw	ra,4(sp)
   17760:	dc000017 	ldw	r16,0(sp)
   17764:	dec00204 	addi	sp,sp,8
   17768:	f800283a 	ret
   1776c:	014000f4 	movhi	r5,3
   17770:	296df204 	addi	r5,r5,-18488
   17774:	8009883a 	mov	r4,r16
   17778:	00104600 	call	10460 <strcmp>
   1777c:	103ff526 	beq	r2,zero,17754 <__alt_data_end+0xfc017754>
   17780:	014000f4 	movhi	r5,3
   17784:	296dfc04 	addi	r5,r5,-18448
   17788:	8009883a 	mov	r4,r16
   1778c:	00104600 	call	10460 <strcmp>
   17790:	103ff026 	beq	r2,zero,17754 <__alt_data_end+0xfc017754>
   17794:	0005883a 	mov	r2,zero
   17798:	003ff006 	br	1775c <__alt_data_end+0xfc01775c>
   1779c:	008000f4 	movhi	r2,3
   177a0:	10adf204 	addi	r2,r2,-18488
   177a4:	f800283a 	ret

000177a8 <__locale_charset>:
   177a8:	008000f4 	movhi	r2,3
   177ac:	10b0a004 	addi	r2,r2,-15744
   177b0:	f800283a 	ret

000177b4 <__locale_mb_cur_max>:
   177b4:	008000f4 	movhi	r2,3
   177b8:	10bafc04 	addi	r2,r2,-5136
   177bc:	10800017 	ldw	r2,0(r2)
   177c0:	f800283a 	ret

000177c4 <__locale_msgcharset>:
   177c4:	008000f4 	movhi	r2,3
   177c8:	10b09804 	addi	r2,r2,-15776
   177cc:	f800283a 	ret

000177d0 <__locale_cjk_lang>:
   177d0:	0005883a 	mov	r2,zero
   177d4:	f800283a 	ret

000177d8 <_localeconv_r>:
   177d8:	008000f4 	movhi	r2,3
   177dc:	10b0a804 	addi	r2,r2,-15712
   177e0:	f800283a 	ret

000177e4 <setlocale>:
   177e4:	008000f4 	movhi	r2,3
   177e8:	10baf904 	addi	r2,r2,-5148
   177ec:	280d883a 	mov	r6,r5
   177f0:	200b883a 	mov	r5,r4
   177f4:	11000017 	ldw	r4,0(r2)
   177f8:	001772c1 	jmpi	1772c <_setlocale_r>

000177fc <localeconv>:
   177fc:	008000f4 	movhi	r2,3
   17800:	10b0a804 	addi	r2,r2,-15712
   17804:	f800283a 	ret

00017808 <__smakebuf_r>:
   17808:	2880030b 	ldhu	r2,12(r5)
   1780c:	10c0008c 	andi	r3,r2,2
   17810:	1800411e 	bne	r3,zero,17918 <__smakebuf_r+0x110>
   17814:	deffec04 	addi	sp,sp,-80
   17818:	dc000f15 	stw	r16,60(sp)
   1781c:	2821883a 	mov	r16,r5
   17820:	2940038f 	ldh	r5,14(r5)
   17824:	dc401015 	stw	r17,64(sp)
   17828:	dfc01315 	stw	ra,76(sp)
   1782c:	dcc01215 	stw	r19,72(sp)
   17830:	dc801115 	stw	r18,68(sp)
   17834:	2023883a 	mov	r17,r4
   17838:	28001c16 	blt	r5,zero,178ac <__smakebuf_r+0xa4>
   1783c:	d80d883a 	mov	r6,sp
   17840:	001c7940 	call	1c794 <_fstat_r>
   17844:	10001816 	blt	r2,zero,178a8 <__smakebuf_r+0xa0>
   17848:	d8800117 	ldw	r2,4(sp)
   1784c:	00e00014 	movui	r3,32768
   17850:	10bc000c 	andi	r2,r2,61440
   17854:	14c80020 	cmpeqi	r19,r2,8192
   17858:	10c03726 	beq	r2,r3,17938 <__smakebuf_r+0x130>
   1785c:	80c0030b 	ldhu	r3,12(r16)
   17860:	18c20014 	ori	r3,r3,2048
   17864:	80c0030d 	sth	r3,12(r16)
   17868:	00c80004 	movi	r3,8192
   1786c:	10c0521e 	bne	r2,r3,179b8 <__smakebuf_r+0x1b0>
   17870:	8140038f 	ldh	r5,14(r16)
   17874:	8809883a 	mov	r4,r17
   17878:	001c7f00 	call	1c7f0 <_isatty_r>
   1787c:	10004c26 	beq	r2,zero,179b0 <__smakebuf_r+0x1a8>
   17880:	8080030b 	ldhu	r2,12(r16)
   17884:	80c010c4 	addi	r3,r16,67
   17888:	80c00015 	stw	r3,0(r16)
   1788c:	10800054 	ori	r2,r2,1
   17890:	8080030d 	sth	r2,12(r16)
   17894:	00800044 	movi	r2,1
   17898:	80c00415 	stw	r3,16(r16)
   1789c:	80800515 	stw	r2,20(r16)
   178a0:	04810004 	movi	r18,1024
   178a4:	00000706 	br	178c4 <__smakebuf_r+0xbc>
   178a8:	8080030b 	ldhu	r2,12(r16)
   178ac:	10c0200c 	andi	r3,r2,128
   178b0:	18001f1e 	bne	r3,zero,17930 <__smakebuf_r+0x128>
   178b4:	04810004 	movi	r18,1024
   178b8:	10820014 	ori	r2,r2,2048
   178bc:	8080030d 	sth	r2,12(r16)
   178c0:	0027883a 	mov	r19,zero
   178c4:	900b883a 	mov	r5,r18
   178c8:	8809883a 	mov	r4,r17
   178cc:	000f4680 	call	f468 <_malloc_r>
   178d0:	10002c26 	beq	r2,zero,17984 <__smakebuf_r+0x17c>
   178d4:	80c0030b 	ldhu	r3,12(r16)
   178d8:	01000074 	movhi	r4,1
   178dc:	211a4004 	addi	r4,r4,26880
   178e0:	89000f15 	stw	r4,60(r17)
   178e4:	18c02014 	ori	r3,r3,128
   178e8:	80c0030d 	sth	r3,12(r16)
   178ec:	80800015 	stw	r2,0(r16)
   178f0:	80800415 	stw	r2,16(r16)
   178f4:	84800515 	stw	r18,20(r16)
   178f8:	98001a1e 	bne	r19,zero,17964 <__smakebuf_r+0x15c>
   178fc:	dfc01317 	ldw	ra,76(sp)
   17900:	dcc01217 	ldw	r19,72(sp)
   17904:	dc801117 	ldw	r18,68(sp)
   17908:	dc401017 	ldw	r17,64(sp)
   1790c:	dc000f17 	ldw	r16,60(sp)
   17910:	dec01404 	addi	sp,sp,80
   17914:	f800283a 	ret
   17918:	288010c4 	addi	r2,r5,67
   1791c:	28800015 	stw	r2,0(r5)
   17920:	28800415 	stw	r2,16(r5)
   17924:	00800044 	movi	r2,1
   17928:	28800515 	stw	r2,20(r5)
   1792c:	f800283a 	ret
   17930:	04801004 	movi	r18,64
   17934:	003fe006 	br	178b8 <__alt_data_end+0xfc0178b8>
   17938:	81000a17 	ldw	r4,40(r16)
   1793c:	00c000b4 	movhi	r3,2
   17940:	18e53504 	addi	r3,r3,-27436
   17944:	20ffc51e 	bne	r4,r3,1785c <__alt_data_end+0xfc01785c>
   17948:	8080030b 	ldhu	r2,12(r16)
   1794c:	04810004 	movi	r18,1024
   17950:	84801315 	stw	r18,76(r16)
   17954:	1484b03a 	or	r2,r2,r18
   17958:	8080030d 	sth	r2,12(r16)
   1795c:	0027883a 	mov	r19,zero
   17960:	003fd806 	br	178c4 <__alt_data_end+0xfc0178c4>
   17964:	8140038f 	ldh	r5,14(r16)
   17968:	8809883a 	mov	r4,r17
   1796c:	001c7f00 	call	1c7f0 <_isatty_r>
   17970:	103fe226 	beq	r2,zero,178fc <__alt_data_end+0xfc0178fc>
   17974:	8080030b 	ldhu	r2,12(r16)
   17978:	10800054 	ori	r2,r2,1
   1797c:	8080030d 	sth	r2,12(r16)
   17980:	003fde06 	br	178fc <__alt_data_end+0xfc0178fc>
   17984:	8080030b 	ldhu	r2,12(r16)
   17988:	10c0800c 	andi	r3,r2,512
   1798c:	183fdb1e 	bne	r3,zero,178fc <__alt_data_end+0xfc0178fc>
   17990:	10800094 	ori	r2,r2,2
   17994:	80c010c4 	addi	r3,r16,67
   17998:	8080030d 	sth	r2,12(r16)
   1799c:	00800044 	movi	r2,1
   179a0:	80c00015 	stw	r3,0(r16)
   179a4:	80c00415 	stw	r3,16(r16)
   179a8:	80800515 	stw	r2,20(r16)
   179ac:	003fd306 	br	178fc <__alt_data_end+0xfc0178fc>
   179b0:	04810004 	movi	r18,1024
   179b4:	003fc306 	br	178c4 <__alt_data_end+0xfc0178c4>
   179b8:	0027883a 	mov	r19,zero
   179bc:	04810004 	movi	r18,1024
   179c0:	003fc006 	br	178c4 <__alt_data_end+0xfc0178c4>

000179c4 <memchr>:
   179c4:	208000cc 	andi	r2,r4,3
   179c8:	280f883a 	mov	r7,r5
   179cc:	10003426 	beq	r2,zero,17aa0 <memchr+0xdc>
   179d0:	30bfffc4 	addi	r2,r6,-1
   179d4:	30001a26 	beq	r6,zero,17a40 <memchr+0x7c>
   179d8:	20c00003 	ldbu	r3,0(r4)
   179dc:	29803fcc 	andi	r6,r5,255
   179e0:	30c0051e 	bne	r6,r3,179f8 <memchr+0x34>
   179e4:	00001806 	br	17a48 <memchr+0x84>
   179e8:	10001526 	beq	r2,zero,17a40 <memchr+0x7c>
   179ec:	20c00003 	ldbu	r3,0(r4)
   179f0:	10bfffc4 	addi	r2,r2,-1
   179f4:	30c01426 	beq	r6,r3,17a48 <memchr+0x84>
   179f8:	21000044 	addi	r4,r4,1
   179fc:	20c000cc 	andi	r3,r4,3
   17a00:	183ff91e 	bne	r3,zero,179e8 <__alt_data_end+0xfc0179e8>
   17a04:	020000c4 	movi	r8,3
   17a08:	40801136 	bltu	r8,r2,17a50 <memchr+0x8c>
   17a0c:	10000c26 	beq	r2,zero,17a40 <memchr+0x7c>
   17a10:	20c00003 	ldbu	r3,0(r4)
   17a14:	29403fcc 	andi	r5,r5,255
   17a18:	28c00b26 	beq	r5,r3,17a48 <memchr+0x84>
   17a1c:	20c00044 	addi	r3,r4,1
   17a20:	39803fcc 	andi	r6,r7,255
   17a24:	2089883a 	add	r4,r4,r2
   17a28:	00000306 	br	17a38 <memchr+0x74>
   17a2c:	18c00044 	addi	r3,r3,1
   17a30:	197fffc3 	ldbu	r5,-1(r3)
   17a34:	31400526 	beq	r6,r5,17a4c <memchr+0x88>
   17a38:	1805883a 	mov	r2,r3
   17a3c:	20fffb1e 	bne	r4,r3,17a2c <__alt_data_end+0xfc017a2c>
   17a40:	0005883a 	mov	r2,zero
   17a44:	f800283a 	ret
   17a48:	2005883a 	mov	r2,r4
   17a4c:	f800283a 	ret
   17a50:	28c03fcc 	andi	r3,r5,255
   17a54:	1812923a 	slli	r9,r3,8
   17a58:	02ffbff4 	movhi	r11,65279
   17a5c:	02a02074 	movhi	r10,32897
   17a60:	48d2b03a 	or	r9,r9,r3
   17a64:	4806943a 	slli	r3,r9,16
   17a68:	5affbfc4 	addi	r11,r11,-257
   17a6c:	52a02004 	addi	r10,r10,-32640
   17a70:	48d2b03a 	or	r9,r9,r3
   17a74:	20c00017 	ldw	r3,0(r4)
   17a78:	48c6f03a 	xor	r3,r9,r3
   17a7c:	1acd883a 	add	r6,r3,r11
   17a80:	00c6303a 	nor	r3,zero,r3
   17a84:	30c6703a 	and	r3,r6,r3
   17a88:	1a86703a 	and	r3,r3,r10
   17a8c:	183fe01e 	bne	r3,zero,17a10 <__alt_data_end+0xfc017a10>
   17a90:	10bfff04 	addi	r2,r2,-4
   17a94:	21000104 	addi	r4,r4,4
   17a98:	40bff636 	bltu	r8,r2,17a74 <__alt_data_end+0xfc017a74>
   17a9c:	003fdb06 	br	17a0c <__alt_data_end+0xfc017a0c>
   17aa0:	3005883a 	mov	r2,r6
   17aa4:	003fd706 	br	17a04 <__alt_data_end+0xfc017a04>

00017aa8 <memmove>:
   17aa8:	2005883a 	mov	r2,r4
   17aac:	29000b2e 	bgeu	r5,r4,17adc <memmove+0x34>
   17ab0:	298f883a 	add	r7,r5,r6
   17ab4:	21c0092e 	bgeu	r4,r7,17adc <memmove+0x34>
   17ab8:	2187883a 	add	r3,r4,r6
   17abc:	198bc83a 	sub	r5,r3,r6
   17ac0:	30004826 	beq	r6,zero,17be4 <memmove+0x13c>
   17ac4:	39ffffc4 	addi	r7,r7,-1
   17ac8:	39000003 	ldbu	r4,0(r7)
   17acc:	18ffffc4 	addi	r3,r3,-1
   17ad0:	19000005 	stb	r4,0(r3)
   17ad4:	28fffb1e 	bne	r5,r3,17ac4 <__alt_data_end+0xfc017ac4>
   17ad8:	f800283a 	ret
   17adc:	00c003c4 	movi	r3,15
   17ae0:	1980412e 	bgeu	r3,r6,17be8 <memmove+0x140>
   17ae4:	2886b03a 	or	r3,r5,r2
   17ae8:	18c000cc 	andi	r3,r3,3
   17aec:	1800401e 	bne	r3,zero,17bf0 <memmove+0x148>
   17af0:	33fffc04 	addi	r15,r6,-16
   17af4:	781ed13a 	srli	r15,r15,4
   17af8:	28c00104 	addi	r3,r5,4
   17afc:	13400104 	addi	r13,r2,4
   17b00:	781c913a 	slli	r14,r15,4
   17b04:	2b000204 	addi	r12,r5,8
   17b08:	12c00204 	addi	r11,r2,8
   17b0c:	73800504 	addi	r14,r14,20
   17b10:	2a800304 	addi	r10,r5,12
   17b14:	12400304 	addi	r9,r2,12
   17b18:	2b9d883a 	add	r14,r5,r14
   17b1c:	2811883a 	mov	r8,r5
   17b20:	100f883a 	mov	r7,r2
   17b24:	41000017 	ldw	r4,0(r8)
   17b28:	39c00404 	addi	r7,r7,16
   17b2c:	18c00404 	addi	r3,r3,16
   17b30:	393ffc15 	stw	r4,-16(r7)
   17b34:	193ffc17 	ldw	r4,-16(r3)
   17b38:	6b400404 	addi	r13,r13,16
   17b3c:	5ac00404 	addi	r11,r11,16
   17b40:	693ffc15 	stw	r4,-16(r13)
   17b44:	61000017 	ldw	r4,0(r12)
   17b48:	4a400404 	addi	r9,r9,16
   17b4c:	42000404 	addi	r8,r8,16
   17b50:	593ffc15 	stw	r4,-16(r11)
   17b54:	51000017 	ldw	r4,0(r10)
   17b58:	63000404 	addi	r12,r12,16
   17b5c:	52800404 	addi	r10,r10,16
   17b60:	493ffc15 	stw	r4,-16(r9)
   17b64:	1bbfef1e 	bne	r3,r14,17b24 <__alt_data_end+0xfc017b24>
   17b68:	79000044 	addi	r4,r15,1
   17b6c:	2008913a 	slli	r4,r4,4
   17b70:	328003cc 	andi	r10,r6,15
   17b74:	02c000c4 	movi	r11,3
   17b78:	1107883a 	add	r3,r2,r4
   17b7c:	290b883a 	add	r5,r5,r4
   17b80:	5a801e2e 	bgeu	r11,r10,17bfc <memmove+0x154>
   17b84:	1813883a 	mov	r9,r3
   17b88:	2811883a 	mov	r8,r5
   17b8c:	500f883a 	mov	r7,r10
   17b90:	41000017 	ldw	r4,0(r8)
   17b94:	4a400104 	addi	r9,r9,4
   17b98:	39ffff04 	addi	r7,r7,-4
   17b9c:	493fff15 	stw	r4,-4(r9)
   17ba0:	42000104 	addi	r8,r8,4
   17ba4:	59fffa36 	bltu	r11,r7,17b90 <__alt_data_end+0xfc017b90>
   17ba8:	513fff04 	addi	r4,r10,-4
   17bac:	2008d0ba 	srli	r4,r4,2
   17bb0:	318000cc 	andi	r6,r6,3
   17bb4:	21000044 	addi	r4,r4,1
   17bb8:	2109883a 	add	r4,r4,r4
   17bbc:	2109883a 	add	r4,r4,r4
   17bc0:	1907883a 	add	r3,r3,r4
   17bc4:	290b883a 	add	r5,r5,r4
   17bc8:	30000b26 	beq	r6,zero,17bf8 <memmove+0x150>
   17bcc:	198d883a 	add	r6,r3,r6
   17bd0:	29c00003 	ldbu	r7,0(r5)
   17bd4:	18c00044 	addi	r3,r3,1
   17bd8:	29400044 	addi	r5,r5,1
   17bdc:	19ffffc5 	stb	r7,-1(r3)
   17be0:	19bffb1e 	bne	r3,r6,17bd0 <__alt_data_end+0xfc017bd0>
   17be4:	f800283a 	ret
   17be8:	1007883a 	mov	r3,r2
   17bec:	003ff606 	br	17bc8 <__alt_data_end+0xfc017bc8>
   17bf0:	1007883a 	mov	r3,r2
   17bf4:	003ff506 	br	17bcc <__alt_data_end+0xfc017bcc>
   17bf8:	f800283a 	ret
   17bfc:	500d883a 	mov	r6,r10
   17c00:	003ff106 	br	17bc8 <__alt_data_end+0xfc017bc8>

00017c04 <_Balloc>:
   17c04:	20801317 	ldw	r2,76(r4)
   17c08:	defffc04 	addi	sp,sp,-16
   17c0c:	dc400115 	stw	r17,4(sp)
   17c10:	dc000015 	stw	r16,0(sp)
   17c14:	dfc00315 	stw	ra,12(sp)
   17c18:	dc800215 	stw	r18,8(sp)
   17c1c:	2023883a 	mov	r17,r4
   17c20:	2821883a 	mov	r16,r5
   17c24:	10000f26 	beq	r2,zero,17c64 <_Balloc+0x60>
   17c28:	8407883a 	add	r3,r16,r16
   17c2c:	18c7883a 	add	r3,r3,r3
   17c30:	10c7883a 	add	r3,r2,r3
   17c34:	18800017 	ldw	r2,0(r3)
   17c38:	10001126 	beq	r2,zero,17c80 <_Balloc+0x7c>
   17c3c:	11000017 	ldw	r4,0(r2)
   17c40:	19000015 	stw	r4,0(r3)
   17c44:	10000415 	stw	zero,16(r2)
   17c48:	10000315 	stw	zero,12(r2)
   17c4c:	dfc00317 	ldw	ra,12(sp)
   17c50:	dc800217 	ldw	r18,8(sp)
   17c54:	dc400117 	ldw	r17,4(sp)
   17c58:	dc000017 	ldw	r16,0(sp)
   17c5c:	dec00404 	addi	sp,sp,16
   17c60:	f800283a 	ret
   17c64:	01800844 	movi	r6,33
   17c68:	01400104 	movi	r5,4
   17c6c:	001c3ac0 	call	1c3ac <_calloc_r>
   17c70:	88801315 	stw	r2,76(r17)
   17c74:	103fec1e 	bne	r2,zero,17c28 <__alt_data_end+0xfc017c28>
   17c78:	0005883a 	mov	r2,zero
   17c7c:	003ff306 	br	17c4c <__alt_data_end+0xfc017c4c>
   17c80:	01400044 	movi	r5,1
   17c84:	2c24983a 	sll	r18,r5,r16
   17c88:	8809883a 	mov	r4,r17
   17c8c:	91800144 	addi	r6,r18,5
   17c90:	318d883a 	add	r6,r6,r6
   17c94:	318d883a 	add	r6,r6,r6
   17c98:	001c3ac0 	call	1c3ac <_calloc_r>
   17c9c:	103ff626 	beq	r2,zero,17c78 <__alt_data_end+0xfc017c78>
   17ca0:	14000115 	stw	r16,4(r2)
   17ca4:	14800215 	stw	r18,8(r2)
   17ca8:	003fe606 	br	17c44 <__alt_data_end+0xfc017c44>

00017cac <_Bfree>:
   17cac:	28000826 	beq	r5,zero,17cd0 <_Bfree+0x24>
   17cb0:	28c00117 	ldw	r3,4(r5)
   17cb4:	20801317 	ldw	r2,76(r4)
   17cb8:	18c7883a 	add	r3,r3,r3
   17cbc:	18c7883a 	add	r3,r3,r3
   17cc0:	10c5883a 	add	r2,r2,r3
   17cc4:	10c00017 	ldw	r3,0(r2)
   17cc8:	28c00015 	stw	r3,0(r5)
   17ccc:	11400015 	stw	r5,0(r2)
   17cd0:	f800283a 	ret

00017cd4 <__multadd>:
   17cd4:	defff704 	addi	sp,sp,-36
   17cd8:	dc800215 	stw	r18,8(sp)
   17cdc:	2c800417 	ldw	r18,16(r5)
   17ce0:	dd800615 	stw	r22,24(sp)
   17ce4:	dd400515 	stw	r21,20(sp)
   17ce8:	dd000415 	stw	r20,16(sp)
   17cec:	dcc00315 	stw	r19,12(sp)
   17cf0:	dc400115 	stw	r17,4(sp)
   17cf4:	dc000015 	stw	r16,0(sp)
   17cf8:	dfc00815 	stw	ra,32(sp)
   17cfc:	ddc00715 	stw	r23,28(sp)
   17d00:	2827883a 	mov	r19,r5
   17d04:	2029883a 	mov	r20,r4
   17d08:	3023883a 	mov	r17,r6
   17d0c:	3821883a 	mov	r16,r7
   17d10:	2d400504 	addi	r21,r5,20
   17d14:	002d883a 	mov	r22,zero
   17d18:	adc00017 	ldw	r23,0(r21)
   17d1c:	880b883a 	mov	r5,r17
   17d20:	ad400104 	addi	r21,r21,4
   17d24:	b93fffcc 	andi	r4,r23,65535
   17d28:	000d8d40 	call	d8d4 <__mulsi3>
   17d2c:	b808d43a 	srli	r4,r23,16
   17d30:	880b883a 	mov	r5,r17
   17d34:	1421883a 	add	r16,r2,r16
   17d38:	000d8d40 	call	d8d4 <__mulsi3>
   17d3c:	800ed43a 	srli	r7,r16,16
   17d40:	80ffffcc 	andi	r3,r16,65535
   17d44:	b5800044 	addi	r22,r22,1
   17d48:	11c5883a 	add	r2,r2,r7
   17d4c:	100e943a 	slli	r7,r2,16
   17d50:	1020d43a 	srli	r16,r2,16
   17d54:	38c7883a 	add	r3,r7,r3
   17d58:	a8ffff15 	stw	r3,-4(r21)
   17d5c:	b4bfee16 	blt	r22,r18,17d18 <__alt_data_end+0xfc017d18>
   17d60:	80000926 	beq	r16,zero,17d88 <__multadd+0xb4>
   17d64:	98800217 	ldw	r2,8(r19)
   17d68:	9080130e 	bge	r18,r2,17db8 <__multadd+0xe4>
   17d6c:	90800144 	addi	r2,r18,5
   17d70:	1085883a 	add	r2,r2,r2
   17d74:	1085883a 	add	r2,r2,r2
   17d78:	9885883a 	add	r2,r19,r2
   17d7c:	14000015 	stw	r16,0(r2)
   17d80:	94800044 	addi	r18,r18,1
   17d84:	9c800415 	stw	r18,16(r19)
   17d88:	9805883a 	mov	r2,r19
   17d8c:	dfc00817 	ldw	ra,32(sp)
   17d90:	ddc00717 	ldw	r23,28(sp)
   17d94:	dd800617 	ldw	r22,24(sp)
   17d98:	dd400517 	ldw	r21,20(sp)
   17d9c:	dd000417 	ldw	r20,16(sp)
   17da0:	dcc00317 	ldw	r19,12(sp)
   17da4:	dc800217 	ldw	r18,8(sp)
   17da8:	dc400117 	ldw	r17,4(sp)
   17dac:	dc000017 	ldw	r16,0(sp)
   17db0:	dec00904 	addi	sp,sp,36
   17db4:	f800283a 	ret
   17db8:	99400117 	ldw	r5,4(r19)
   17dbc:	a009883a 	mov	r4,r20
   17dc0:	29400044 	addi	r5,r5,1
   17dc4:	0017c040 	call	17c04 <_Balloc>
   17dc8:	99800417 	ldw	r6,16(r19)
   17dcc:	99400304 	addi	r5,r19,12
   17dd0:	11000304 	addi	r4,r2,12
   17dd4:	31800084 	addi	r6,r6,2
   17dd8:	318d883a 	add	r6,r6,r6
   17ddc:	318d883a 	add	r6,r6,r6
   17de0:	1023883a 	mov	r17,r2
   17de4:	000fc740 	call	fc74 <memcpy>
   17de8:	98000a26 	beq	r19,zero,17e14 <__multadd+0x140>
   17dec:	98c00117 	ldw	r3,4(r19)
   17df0:	a0801317 	ldw	r2,76(r20)
   17df4:	18c7883a 	add	r3,r3,r3
   17df8:	18c7883a 	add	r3,r3,r3
   17dfc:	10c5883a 	add	r2,r2,r3
   17e00:	10c00017 	ldw	r3,0(r2)
   17e04:	98c00015 	stw	r3,0(r19)
   17e08:	14c00015 	stw	r19,0(r2)
   17e0c:	8827883a 	mov	r19,r17
   17e10:	003fd606 	br	17d6c <__alt_data_end+0xfc017d6c>
   17e14:	8827883a 	mov	r19,r17
   17e18:	003fd406 	br	17d6c <__alt_data_end+0xfc017d6c>

00017e1c <__s2b>:
   17e1c:	defff904 	addi	sp,sp,-28
   17e20:	dc400115 	stw	r17,4(sp)
   17e24:	dc000015 	stw	r16,0(sp)
   17e28:	2023883a 	mov	r17,r4
   17e2c:	2821883a 	mov	r16,r5
   17e30:	39000204 	addi	r4,r7,8
   17e34:	01400244 	movi	r5,9
   17e38:	dcc00315 	stw	r19,12(sp)
   17e3c:	dc800215 	stw	r18,8(sp)
   17e40:	dfc00615 	stw	ra,24(sp)
   17e44:	dd400515 	stw	r21,20(sp)
   17e48:	dd000415 	stw	r20,16(sp)
   17e4c:	3825883a 	mov	r18,r7
   17e50:	3027883a 	mov	r19,r6
   17e54:	000d7200 	call	d720 <__divsi3>
   17e58:	00c00044 	movi	r3,1
   17e5c:	000b883a 	mov	r5,zero
   17e60:	1880030e 	bge	r3,r2,17e70 <__s2b+0x54>
   17e64:	18c7883a 	add	r3,r3,r3
   17e68:	29400044 	addi	r5,r5,1
   17e6c:	18bffd16 	blt	r3,r2,17e64 <__alt_data_end+0xfc017e64>
   17e70:	8809883a 	mov	r4,r17
   17e74:	0017c040 	call	17c04 <_Balloc>
   17e78:	d8c00717 	ldw	r3,28(sp)
   17e7c:	10c00515 	stw	r3,20(r2)
   17e80:	00c00044 	movi	r3,1
   17e84:	10c00415 	stw	r3,16(r2)
   17e88:	00c00244 	movi	r3,9
   17e8c:	1cc0210e 	bge	r3,r19,17f14 <__s2b+0xf8>
   17e90:	80eb883a 	add	r21,r16,r3
   17e94:	a829883a 	mov	r20,r21
   17e98:	84e1883a 	add	r16,r16,r19
   17e9c:	a1c00007 	ldb	r7,0(r20)
   17ea0:	01800284 	movi	r6,10
   17ea4:	a5000044 	addi	r20,r20,1
   17ea8:	100b883a 	mov	r5,r2
   17eac:	39fff404 	addi	r7,r7,-48
   17eb0:	8809883a 	mov	r4,r17
   17eb4:	0017cd40 	call	17cd4 <__multadd>
   17eb8:	a43ff81e 	bne	r20,r16,17e9c <__alt_data_end+0xfc017e9c>
   17ebc:	ace1883a 	add	r16,r21,r19
   17ec0:	843ffe04 	addi	r16,r16,-8
   17ec4:	9c800a0e 	bge	r19,r18,17ef0 <__s2b+0xd4>
   17ec8:	94e5c83a 	sub	r18,r18,r19
   17ecc:	84a5883a 	add	r18,r16,r18
   17ed0:	81c00007 	ldb	r7,0(r16)
   17ed4:	01800284 	movi	r6,10
   17ed8:	84000044 	addi	r16,r16,1
   17edc:	100b883a 	mov	r5,r2
   17ee0:	39fff404 	addi	r7,r7,-48
   17ee4:	8809883a 	mov	r4,r17
   17ee8:	0017cd40 	call	17cd4 <__multadd>
   17eec:	84bff81e 	bne	r16,r18,17ed0 <__alt_data_end+0xfc017ed0>
   17ef0:	dfc00617 	ldw	ra,24(sp)
   17ef4:	dd400517 	ldw	r21,20(sp)
   17ef8:	dd000417 	ldw	r20,16(sp)
   17efc:	dcc00317 	ldw	r19,12(sp)
   17f00:	dc800217 	ldw	r18,8(sp)
   17f04:	dc400117 	ldw	r17,4(sp)
   17f08:	dc000017 	ldw	r16,0(sp)
   17f0c:	dec00704 	addi	sp,sp,28
   17f10:	f800283a 	ret
   17f14:	84000284 	addi	r16,r16,10
   17f18:	1827883a 	mov	r19,r3
   17f1c:	003fe906 	br	17ec4 <__alt_data_end+0xfc017ec4>

00017f20 <__hi0bits>:
   17f20:	20bfffec 	andhi	r2,r4,65535
   17f24:	1000141e 	bne	r2,zero,17f78 <__hi0bits+0x58>
   17f28:	2008943a 	slli	r4,r4,16
   17f2c:	00800404 	movi	r2,16
   17f30:	20ffc02c 	andhi	r3,r4,65280
   17f34:	1800021e 	bne	r3,zero,17f40 <__hi0bits+0x20>
   17f38:	2008923a 	slli	r4,r4,8
   17f3c:	10800204 	addi	r2,r2,8
   17f40:	20fc002c 	andhi	r3,r4,61440
   17f44:	1800021e 	bne	r3,zero,17f50 <__hi0bits+0x30>
   17f48:	2008913a 	slli	r4,r4,4
   17f4c:	10800104 	addi	r2,r2,4
   17f50:	20f0002c 	andhi	r3,r4,49152
   17f54:	1800031e 	bne	r3,zero,17f64 <__hi0bits+0x44>
   17f58:	2109883a 	add	r4,r4,r4
   17f5c:	10800084 	addi	r2,r2,2
   17f60:	2109883a 	add	r4,r4,r4
   17f64:	20000316 	blt	r4,zero,17f74 <__hi0bits+0x54>
   17f68:	2110002c 	andhi	r4,r4,16384
   17f6c:	2000041e 	bne	r4,zero,17f80 <__hi0bits+0x60>
   17f70:	00800804 	movi	r2,32
   17f74:	f800283a 	ret
   17f78:	0005883a 	mov	r2,zero
   17f7c:	003fec06 	br	17f30 <__alt_data_end+0xfc017f30>
   17f80:	10800044 	addi	r2,r2,1
   17f84:	f800283a 	ret

00017f88 <__lo0bits>:
   17f88:	20c00017 	ldw	r3,0(r4)
   17f8c:	188001cc 	andi	r2,r3,7
   17f90:	10000826 	beq	r2,zero,17fb4 <__lo0bits+0x2c>
   17f94:	1880004c 	andi	r2,r3,1
   17f98:	1000211e 	bne	r2,zero,18020 <__lo0bits+0x98>
   17f9c:	1880008c 	andi	r2,r3,2
   17fa0:	1000211e 	bne	r2,zero,18028 <__lo0bits+0xa0>
   17fa4:	1806d0ba 	srli	r3,r3,2
   17fa8:	00800084 	movi	r2,2
   17fac:	20c00015 	stw	r3,0(r4)
   17fb0:	f800283a 	ret
   17fb4:	18bfffcc 	andi	r2,r3,65535
   17fb8:	10001326 	beq	r2,zero,18008 <__lo0bits+0x80>
   17fbc:	0005883a 	mov	r2,zero
   17fc0:	19403fcc 	andi	r5,r3,255
   17fc4:	2800021e 	bne	r5,zero,17fd0 <__lo0bits+0x48>
   17fc8:	1806d23a 	srli	r3,r3,8
   17fcc:	10800204 	addi	r2,r2,8
   17fd0:	194003cc 	andi	r5,r3,15
   17fd4:	2800021e 	bne	r5,zero,17fe0 <__lo0bits+0x58>
   17fd8:	1806d13a 	srli	r3,r3,4
   17fdc:	10800104 	addi	r2,r2,4
   17fe0:	194000cc 	andi	r5,r3,3
   17fe4:	2800021e 	bne	r5,zero,17ff0 <__lo0bits+0x68>
   17fe8:	1806d0ba 	srli	r3,r3,2
   17fec:	10800084 	addi	r2,r2,2
   17ff0:	1940004c 	andi	r5,r3,1
   17ff4:	2800081e 	bne	r5,zero,18018 <__lo0bits+0x90>
   17ff8:	1806d07a 	srli	r3,r3,1
   17ffc:	1800051e 	bne	r3,zero,18014 <__lo0bits+0x8c>
   18000:	00800804 	movi	r2,32
   18004:	f800283a 	ret
   18008:	1806d43a 	srli	r3,r3,16
   1800c:	00800404 	movi	r2,16
   18010:	003feb06 	br	17fc0 <__alt_data_end+0xfc017fc0>
   18014:	10800044 	addi	r2,r2,1
   18018:	20c00015 	stw	r3,0(r4)
   1801c:	f800283a 	ret
   18020:	0005883a 	mov	r2,zero
   18024:	f800283a 	ret
   18028:	1806d07a 	srli	r3,r3,1
   1802c:	00800044 	movi	r2,1
   18030:	20c00015 	stw	r3,0(r4)
   18034:	f800283a 	ret

00018038 <__i2b>:
   18038:	defffd04 	addi	sp,sp,-12
   1803c:	dc000015 	stw	r16,0(sp)
   18040:	04000044 	movi	r16,1
   18044:	dc400115 	stw	r17,4(sp)
   18048:	2823883a 	mov	r17,r5
   1804c:	800b883a 	mov	r5,r16
   18050:	dfc00215 	stw	ra,8(sp)
   18054:	0017c040 	call	17c04 <_Balloc>
   18058:	14400515 	stw	r17,20(r2)
   1805c:	14000415 	stw	r16,16(r2)
   18060:	dfc00217 	ldw	ra,8(sp)
   18064:	dc400117 	ldw	r17,4(sp)
   18068:	dc000017 	ldw	r16,0(sp)
   1806c:	dec00304 	addi	sp,sp,12
   18070:	f800283a 	ret

00018074 <__multiply>:
   18074:	deffef04 	addi	sp,sp,-68
   18078:	dc400815 	stw	r17,32(sp)
   1807c:	dc000715 	stw	r16,28(sp)
   18080:	34400417 	ldw	r17,16(r6)
   18084:	2c000417 	ldw	r16,16(r5)
   18088:	dd800d15 	stw	r22,52(sp)
   1808c:	dc800915 	stw	r18,36(sp)
   18090:	dfc01015 	stw	ra,64(sp)
   18094:	df000f15 	stw	fp,60(sp)
   18098:	ddc00e15 	stw	r23,56(sp)
   1809c:	dd400c15 	stw	r21,48(sp)
   180a0:	dd000b15 	stw	r20,44(sp)
   180a4:	dcc00a15 	stw	r19,40(sp)
   180a8:	2825883a 	mov	r18,r5
   180ac:	302d883a 	mov	r22,r6
   180b0:	8440050e 	bge	r16,r17,180c8 <__multiply+0x54>
   180b4:	8007883a 	mov	r3,r16
   180b8:	3025883a 	mov	r18,r6
   180bc:	8821883a 	mov	r16,r17
   180c0:	282d883a 	mov	r22,r5
   180c4:	1823883a 	mov	r17,r3
   180c8:	90800217 	ldw	r2,8(r18)
   180cc:	8447883a 	add	r3,r16,r17
   180d0:	d8c00215 	stw	r3,8(sp)
   180d4:	91400117 	ldw	r5,4(r18)
   180d8:	10c0010e 	bge	r2,r3,180e0 <__multiply+0x6c>
   180dc:	29400044 	addi	r5,r5,1
   180e0:	0017c040 	call	17c04 <_Balloc>
   180e4:	d8c00217 	ldw	r3,8(sp)
   180e8:	d8800615 	stw	r2,24(sp)
   180ec:	18eb883a 	add	r21,r3,r3
   180f0:	ad6b883a 	add	r21,r21,r21
   180f4:	10c00504 	addi	r3,r2,20
   180f8:	1d6b883a 	add	r21,r3,r21
   180fc:	d8c00115 	stw	r3,4(sp)
   18100:	dd400315 	stw	r21,12(sp)
   18104:	1805883a 	mov	r2,r3
   18108:	1d40042e 	bgeu	r3,r21,1811c <__multiply+0xa8>
   1810c:	d8c00317 	ldw	r3,12(sp)
   18110:	10000015 	stw	zero,0(r2)
   18114:	10800104 	addi	r2,r2,4
   18118:	10fffc36 	bltu	r2,r3,1810c <__alt_data_end+0xfc01810c>
   1811c:	8c63883a 	add	r17,r17,r17
   18120:	b5800504 	addi	r22,r22,20
   18124:	8c63883a 	add	r17,r17,r17
   18128:	94800504 	addi	r18,r18,20
   1812c:	8421883a 	add	r16,r16,r16
   18130:	b463883a 	add	r17,r22,r17
   18134:	8421883a 	add	r16,r16,r16
   18138:	dd800015 	stw	r22,0(sp)
   1813c:	dc800415 	stw	r18,16(sp)
   18140:	dc400515 	stw	r17,20(sp)
   18144:	9429883a 	add	r20,r18,r16
   18148:	b4404f2e 	bgeu	r22,r17,18288 <__multiply+0x214>
   1814c:	d8c00017 	ldw	r3,0(sp)
   18150:	1c800017 	ldw	r18,0(r3)
   18154:	947fffcc 	andi	r17,r18,65535
   18158:	88001e26 	beq	r17,zero,181d4 <__multiply+0x160>
   1815c:	dd800117 	ldw	r22,4(sp)
   18160:	dd400417 	ldw	r21,16(sp)
   18164:	0027883a 	mov	r19,zero
   18168:	ac800017 	ldw	r18,0(r21)
   1816c:	b4000017 	ldw	r16,0(r22)
   18170:	880b883a 	mov	r5,r17
   18174:	913fffcc 	andi	r4,r18,65535
   18178:	000d8d40 	call	d8d4 <__mulsi3>
   1817c:	9008d43a 	srli	r4,r18,16
   18180:	84bfffcc 	andi	r18,r16,65535
   18184:	1485883a 	add	r2,r2,r18
   18188:	14e5883a 	add	r18,r2,r19
   1818c:	8020d43a 	srli	r16,r16,16
   18190:	9026d43a 	srli	r19,r18,16
   18194:	880b883a 	mov	r5,r17
   18198:	000d8d40 	call	d8d4 <__mulsi3>
   1819c:	1405883a 	add	r2,r2,r16
   181a0:	14e1883a 	add	r16,r2,r19
   181a4:	90ffffcc 	andi	r3,r18,65535
   181a8:	8024943a 	slli	r18,r16,16
   181ac:	ad400104 	addi	r21,r21,4
   181b0:	b005883a 	mov	r2,r22
   181b4:	90c6b03a 	or	r3,r18,r3
   181b8:	b0c00015 	stw	r3,0(r22)
   181bc:	8026d43a 	srli	r19,r16,16
   181c0:	b5800104 	addi	r22,r22,4
   181c4:	ad3fe836 	bltu	r21,r20,18168 <__alt_data_end+0xfc018168>
   181c8:	d8c00017 	ldw	r3,0(sp)
   181cc:	14c00115 	stw	r19,4(r2)
   181d0:	1c800017 	ldw	r18,0(r3)
   181d4:	9024d43a 	srli	r18,r18,16
   181d8:	90002226 	beq	r18,zero,18264 <__multiply+0x1f0>
   181dc:	d8c00117 	ldw	r3,4(sp)
   181e0:	dd800417 	ldw	r22,16(sp)
   181e4:	002f883a 	mov	r23,zero
   181e8:	1f000017 	ldw	fp,0(r3)
   181ec:	1823883a 	mov	r17,r3
   181f0:	182b883a 	mov	r21,r3
   181f4:	e021883a 	mov	r16,fp
   181f8:	00000106 	br	18200 <__multiply+0x18c>
   181fc:	982b883a 	mov	r21,r19
   18200:	b100000b 	ldhu	r4,0(r22)
   18204:	8020d43a 	srli	r16,r16,16
   18208:	900b883a 	mov	r5,r18
   1820c:	000d8d40 	call	d8d4 <__mulsi3>
   18210:	1405883a 	add	r2,r2,r16
   18214:	15ef883a 	add	r23,r2,r23
   18218:	b804943a 	slli	r2,r23,16
   1821c:	e0ffffcc 	andi	r3,fp,65535
   18220:	8c400104 	addi	r17,r17,4
   18224:	10c6b03a 	or	r3,r2,r3
   18228:	88ffff15 	stw	r3,-4(r17)
   1822c:	b5800104 	addi	r22,r22,4
   18230:	b13fff17 	ldw	r4,-4(r22)
   18234:	acc00104 	addi	r19,r21,4
   18238:	900b883a 	mov	r5,r18
   1823c:	2008d43a 	srli	r4,r4,16
   18240:	9c000017 	ldw	r16,0(r19)
   18244:	000d8d40 	call	d8d4 <__mulsi3>
   18248:	b806d43a 	srli	r3,r23,16
   1824c:	813fffcc 	andi	r4,r16,65535
   18250:	1105883a 	add	r2,r2,r4
   18254:	10f9883a 	add	fp,r2,r3
   18258:	e02ed43a 	srli	r23,fp,16
   1825c:	b53fe736 	bltu	r22,r20,181fc <__alt_data_end+0xfc0181fc>
   18260:	af000115 	stw	fp,4(r21)
   18264:	d8c00017 	ldw	r3,0(sp)
   18268:	d9000517 	ldw	r4,20(sp)
   1826c:	18c00104 	addi	r3,r3,4
   18270:	d8c00015 	stw	r3,0(sp)
   18274:	d8c00117 	ldw	r3,4(sp)
   18278:	18c00104 	addi	r3,r3,4
   1827c:	d8c00115 	stw	r3,4(sp)
   18280:	d8c00017 	ldw	r3,0(sp)
   18284:	193fb136 	bltu	r3,r4,1814c <__alt_data_end+0xfc01814c>
   18288:	d8c00217 	ldw	r3,8(sp)
   1828c:	00c00c0e 	bge	zero,r3,182c0 <__multiply+0x24c>
   18290:	d8c00317 	ldw	r3,12(sp)
   18294:	18bfff17 	ldw	r2,-4(r3)
   18298:	1d7fff04 	addi	r21,r3,-4
   1829c:	10000326 	beq	r2,zero,182ac <__multiply+0x238>
   182a0:	00000706 	br	182c0 <__multiply+0x24c>
   182a4:	a8800017 	ldw	r2,0(r21)
   182a8:	1000051e 	bne	r2,zero,182c0 <__multiply+0x24c>
   182ac:	d8c00217 	ldw	r3,8(sp)
   182b0:	ad7fff04 	addi	r21,r21,-4
   182b4:	18ffffc4 	addi	r3,r3,-1
   182b8:	d8c00215 	stw	r3,8(sp)
   182bc:	183ff91e 	bne	r3,zero,182a4 <__alt_data_end+0xfc0182a4>
   182c0:	d8c00617 	ldw	r3,24(sp)
   182c4:	d9000217 	ldw	r4,8(sp)
   182c8:	1805883a 	mov	r2,r3
   182cc:	19000415 	stw	r4,16(r3)
   182d0:	dfc01017 	ldw	ra,64(sp)
   182d4:	df000f17 	ldw	fp,60(sp)
   182d8:	ddc00e17 	ldw	r23,56(sp)
   182dc:	dd800d17 	ldw	r22,52(sp)
   182e0:	dd400c17 	ldw	r21,48(sp)
   182e4:	dd000b17 	ldw	r20,44(sp)
   182e8:	dcc00a17 	ldw	r19,40(sp)
   182ec:	dc800917 	ldw	r18,36(sp)
   182f0:	dc400817 	ldw	r17,32(sp)
   182f4:	dc000717 	ldw	r16,28(sp)
   182f8:	dec01104 	addi	sp,sp,68
   182fc:	f800283a 	ret

00018300 <__pow5mult>:
   18300:	defffa04 	addi	sp,sp,-24
   18304:	dcc00315 	stw	r19,12(sp)
   18308:	dc000015 	stw	r16,0(sp)
   1830c:	dfc00515 	stw	ra,20(sp)
   18310:	dd000415 	stw	r20,16(sp)
   18314:	dc800215 	stw	r18,8(sp)
   18318:	dc400115 	stw	r17,4(sp)
   1831c:	308000cc 	andi	r2,r6,3
   18320:	3021883a 	mov	r16,r6
   18324:	2027883a 	mov	r19,r4
   18328:	10002f1e 	bne	r2,zero,183e8 <__pow5mult+0xe8>
   1832c:	2825883a 	mov	r18,r5
   18330:	8021d0ba 	srai	r16,r16,2
   18334:	80001a26 	beq	r16,zero,183a0 <__pow5mult+0xa0>
   18338:	9c401217 	ldw	r17,72(r19)
   1833c:	8800061e 	bne	r17,zero,18358 <__pow5mult+0x58>
   18340:	00003406 	br	18414 <__pow5mult+0x114>
   18344:	8021d07a 	srai	r16,r16,1
   18348:	80001526 	beq	r16,zero,183a0 <__pow5mult+0xa0>
   1834c:	88800017 	ldw	r2,0(r17)
   18350:	10001c26 	beq	r2,zero,183c4 <__pow5mult+0xc4>
   18354:	1023883a 	mov	r17,r2
   18358:	8080004c 	andi	r2,r16,1
   1835c:	103ff926 	beq	r2,zero,18344 <__alt_data_end+0xfc018344>
   18360:	880d883a 	mov	r6,r17
   18364:	900b883a 	mov	r5,r18
   18368:	9809883a 	mov	r4,r19
   1836c:	00180740 	call	18074 <__multiply>
   18370:	90001b26 	beq	r18,zero,183e0 <__pow5mult+0xe0>
   18374:	91000117 	ldw	r4,4(r18)
   18378:	98c01317 	ldw	r3,76(r19)
   1837c:	8021d07a 	srai	r16,r16,1
   18380:	2109883a 	add	r4,r4,r4
   18384:	2109883a 	add	r4,r4,r4
   18388:	1907883a 	add	r3,r3,r4
   1838c:	19000017 	ldw	r4,0(r3)
   18390:	91000015 	stw	r4,0(r18)
   18394:	1c800015 	stw	r18,0(r3)
   18398:	1025883a 	mov	r18,r2
   1839c:	803feb1e 	bne	r16,zero,1834c <__alt_data_end+0xfc01834c>
   183a0:	9005883a 	mov	r2,r18
   183a4:	dfc00517 	ldw	ra,20(sp)
   183a8:	dd000417 	ldw	r20,16(sp)
   183ac:	dcc00317 	ldw	r19,12(sp)
   183b0:	dc800217 	ldw	r18,8(sp)
   183b4:	dc400117 	ldw	r17,4(sp)
   183b8:	dc000017 	ldw	r16,0(sp)
   183bc:	dec00604 	addi	sp,sp,24
   183c0:	f800283a 	ret
   183c4:	880d883a 	mov	r6,r17
   183c8:	880b883a 	mov	r5,r17
   183cc:	9809883a 	mov	r4,r19
   183d0:	00180740 	call	18074 <__multiply>
   183d4:	88800015 	stw	r2,0(r17)
   183d8:	10000015 	stw	zero,0(r2)
   183dc:	003fdd06 	br	18354 <__alt_data_end+0xfc018354>
   183e0:	1025883a 	mov	r18,r2
   183e4:	003fd706 	br	18344 <__alt_data_end+0xfc018344>
   183e8:	10bfffc4 	addi	r2,r2,-1
   183ec:	1085883a 	add	r2,r2,r2
   183f0:	00c000f4 	movhi	r3,3
   183f4:	18ee1c04 	addi	r3,r3,-18320
   183f8:	1085883a 	add	r2,r2,r2
   183fc:	1885883a 	add	r2,r3,r2
   18400:	11800017 	ldw	r6,0(r2)
   18404:	000f883a 	mov	r7,zero
   18408:	0017cd40 	call	17cd4 <__multadd>
   1840c:	1025883a 	mov	r18,r2
   18410:	003fc706 	br	18330 <__alt_data_end+0xfc018330>
   18414:	05000044 	movi	r20,1
   18418:	a00b883a 	mov	r5,r20
   1841c:	9809883a 	mov	r4,r19
   18420:	0017c040 	call	17c04 <_Balloc>
   18424:	1023883a 	mov	r17,r2
   18428:	00809c44 	movi	r2,625
   1842c:	88800515 	stw	r2,20(r17)
   18430:	8d000415 	stw	r20,16(r17)
   18434:	9c401215 	stw	r17,72(r19)
   18438:	88000015 	stw	zero,0(r17)
   1843c:	003fc606 	br	18358 <__alt_data_end+0xfc018358>

00018440 <__lshift>:
   18440:	defff904 	addi	sp,sp,-28
   18444:	dd400515 	stw	r21,20(sp)
   18448:	dcc00315 	stw	r19,12(sp)
   1844c:	302bd17a 	srai	r21,r6,5
   18450:	2cc00417 	ldw	r19,16(r5)
   18454:	28800217 	ldw	r2,8(r5)
   18458:	dd000415 	stw	r20,16(sp)
   1845c:	ace7883a 	add	r19,r21,r19
   18460:	dc800215 	stw	r18,8(sp)
   18464:	dc400115 	stw	r17,4(sp)
   18468:	dc000015 	stw	r16,0(sp)
   1846c:	dfc00615 	stw	ra,24(sp)
   18470:	9c000044 	addi	r16,r19,1
   18474:	2823883a 	mov	r17,r5
   18478:	3029883a 	mov	r20,r6
   1847c:	2025883a 	mov	r18,r4
   18480:	29400117 	ldw	r5,4(r5)
   18484:	1400030e 	bge	r2,r16,18494 <__lshift+0x54>
   18488:	1085883a 	add	r2,r2,r2
   1848c:	29400044 	addi	r5,r5,1
   18490:	143ffd16 	blt	r2,r16,18488 <__alt_data_end+0xfc018488>
   18494:	9009883a 	mov	r4,r18
   18498:	0017c040 	call	17c04 <_Balloc>
   1849c:	10c00504 	addi	r3,r2,20
   184a0:	0540070e 	bge	zero,r21,184c0 <__lshift+0x80>
   184a4:	ad6b883a 	add	r21,r21,r21
   184a8:	ad6b883a 	add	r21,r21,r21
   184ac:	1809883a 	mov	r4,r3
   184b0:	1d47883a 	add	r3,r3,r21
   184b4:	20000015 	stw	zero,0(r4)
   184b8:	21000104 	addi	r4,r4,4
   184bc:	193ffd1e 	bne	r3,r4,184b4 <__alt_data_end+0xfc0184b4>
   184c0:	8a000417 	ldw	r8,16(r17)
   184c4:	89000504 	addi	r4,r17,20
   184c8:	a18007cc 	andi	r6,r20,31
   184cc:	4211883a 	add	r8,r8,r8
   184d0:	4211883a 	add	r8,r8,r8
   184d4:	2211883a 	add	r8,r4,r8
   184d8:	30002326 	beq	r6,zero,18568 <__lshift+0x128>
   184dc:	02400804 	movi	r9,32
   184e0:	4993c83a 	sub	r9,r9,r6
   184e4:	000b883a 	mov	r5,zero
   184e8:	21c00017 	ldw	r7,0(r4)
   184ec:	1815883a 	mov	r10,r3
   184f0:	18c00104 	addi	r3,r3,4
   184f4:	398e983a 	sll	r7,r7,r6
   184f8:	21000104 	addi	r4,r4,4
   184fc:	394ab03a 	or	r5,r7,r5
   18500:	197fff15 	stw	r5,-4(r3)
   18504:	217fff17 	ldw	r5,-4(r4)
   18508:	2a4ad83a 	srl	r5,r5,r9
   1850c:	223ff636 	bltu	r4,r8,184e8 <__alt_data_end+0xfc0184e8>
   18510:	51400115 	stw	r5,4(r10)
   18514:	28001a1e 	bne	r5,zero,18580 <__lshift+0x140>
   18518:	843fffc4 	addi	r16,r16,-1
   1851c:	14000415 	stw	r16,16(r2)
   18520:	88000826 	beq	r17,zero,18544 <__lshift+0x104>
   18524:	89000117 	ldw	r4,4(r17)
   18528:	90c01317 	ldw	r3,76(r18)
   1852c:	2109883a 	add	r4,r4,r4
   18530:	2109883a 	add	r4,r4,r4
   18534:	1907883a 	add	r3,r3,r4
   18538:	19000017 	ldw	r4,0(r3)
   1853c:	89000015 	stw	r4,0(r17)
   18540:	1c400015 	stw	r17,0(r3)
   18544:	dfc00617 	ldw	ra,24(sp)
   18548:	dd400517 	ldw	r21,20(sp)
   1854c:	dd000417 	ldw	r20,16(sp)
   18550:	dcc00317 	ldw	r19,12(sp)
   18554:	dc800217 	ldw	r18,8(sp)
   18558:	dc400117 	ldw	r17,4(sp)
   1855c:	dc000017 	ldw	r16,0(sp)
   18560:	dec00704 	addi	sp,sp,28
   18564:	f800283a 	ret
   18568:	21400017 	ldw	r5,0(r4)
   1856c:	18c00104 	addi	r3,r3,4
   18570:	21000104 	addi	r4,r4,4
   18574:	197fff15 	stw	r5,-4(r3)
   18578:	223ffb36 	bltu	r4,r8,18568 <__alt_data_end+0xfc018568>
   1857c:	003fe606 	br	18518 <__alt_data_end+0xfc018518>
   18580:	9c000084 	addi	r16,r19,2
   18584:	003fe406 	br	18518 <__alt_data_end+0xfc018518>

00018588 <__mcmp>:
   18588:	20800417 	ldw	r2,16(r4)
   1858c:	28c00417 	ldw	r3,16(r5)
   18590:	10c5c83a 	sub	r2,r2,r3
   18594:	1000111e 	bne	r2,zero,185dc <__mcmp+0x54>
   18598:	18c7883a 	add	r3,r3,r3
   1859c:	18c7883a 	add	r3,r3,r3
   185a0:	21000504 	addi	r4,r4,20
   185a4:	29400504 	addi	r5,r5,20
   185a8:	20c5883a 	add	r2,r4,r3
   185ac:	28cb883a 	add	r5,r5,r3
   185b0:	00000106 	br	185b8 <__mcmp+0x30>
   185b4:	20800a2e 	bgeu	r4,r2,185e0 <__mcmp+0x58>
   185b8:	10bfff04 	addi	r2,r2,-4
   185bc:	297fff04 	addi	r5,r5,-4
   185c0:	11800017 	ldw	r6,0(r2)
   185c4:	28c00017 	ldw	r3,0(r5)
   185c8:	30fffa26 	beq	r6,r3,185b4 <__alt_data_end+0xfc0185b4>
   185cc:	30c00236 	bltu	r6,r3,185d8 <__mcmp+0x50>
   185d0:	00800044 	movi	r2,1
   185d4:	f800283a 	ret
   185d8:	00bfffc4 	movi	r2,-1
   185dc:	f800283a 	ret
   185e0:	0005883a 	mov	r2,zero
   185e4:	f800283a 	ret

000185e8 <__mdiff>:
   185e8:	28c00417 	ldw	r3,16(r5)
   185ec:	30800417 	ldw	r2,16(r6)
   185f0:	defffa04 	addi	sp,sp,-24
   185f4:	dcc00315 	stw	r19,12(sp)
   185f8:	dc800215 	stw	r18,8(sp)
   185fc:	dfc00515 	stw	ra,20(sp)
   18600:	dd000415 	stw	r20,16(sp)
   18604:	dc400115 	stw	r17,4(sp)
   18608:	dc000015 	stw	r16,0(sp)
   1860c:	1887c83a 	sub	r3,r3,r2
   18610:	2825883a 	mov	r18,r5
   18614:	3027883a 	mov	r19,r6
   18618:	1800141e 	bne	r3,zero,1866c <__mdiff+0x84>
   1861c:	1085883a 	add	r2,r2,r2
   18620:	1085883a 	add	r2,r2,r2
   18624:	2a000504 	addi	r8,r5,20
   18628:	34000504 	addi	r16,r6,20
   1862c:	4087883a 	add	r3,r8,r2
   18630:	8085883a 	add	r2,r16,r2
   18634:	00000106 	br	1863c <__mdiff+0x54>
   18638:	40c0592e 	bgeu	r8,r3,187a0 <__mdiff+0x1b8>
   1863c:	18ffff04 	addi	r3,r3,-4
   18640:	10bfff04 	addi	r2,r2,-4
   18644:	19c00017 	ldw	r7,0(r3)
   18648:	11400017 	ldw	r5,0(r2)
   1864c:	397ffa26 	beq	r7,r5,18638 <__alt_data_end+0xfc018638>
   18650:	3940592e 	bgeu	r7,r5,187b8 <__mdiff+0x1d0>
   18654:	9005883a 	mov	r2,r18
   18658:	4023883a 	mov	r17,r8
   1865c:	9825883a 	mov	r18,r19
   18660:	05000044 	movi	r20,1
   18664:	1027883a 	mov	r19,r2
   18668:	00000406 	br	1867c <__mdiff+0x94>
   1866c:	18005616 	blt	r3,zero,187c8 <__mdiff+0x1e0>
   18670:	34400504 	addi	r17,r6,20
   18674:	2c000504 	addi	r16,r5,20
   18678:	0029883a 	mov	r20,zero
   1867c:	91400117 	ldw	r5,4(r18)
   18680:	0017c040 	call	17c04 <_Balloc>
   18684:	92400417 	ldw	r9,16(r18)
   18688:	9b000417 	ldw	r12,16(r19)
   1868c:	12c00504 	addi	r11,r2,20
   18690:	4a51883a 	add	r8,r9,r9
   18694:	6319883a 	add	r12,r12,r12
   18698:	4211883a 	add	r8,r8,r8
   1869c:	6319883a 	add	r12,r12,r12
   186a0:	15000315 	stw	r20,12(r2)
   186a4:	8211883a 	add	r8,r16,r8
   186a8:	8b19883a 	add	r12,r17,r12
   186ac:	0007883a 	mov	r3,zero
   186b0:	81400017 	ldw	r5,0(r16)
   186b4:	89c00017 	ldw	r7,0(r17)
   186b8:	59800104 	addi	r6,r11,4
   186bc:	293fffcc 	andi	r4,r5,65535
   186c0:	20c7883a 	add	r3,r4,r3
   186c4:	393fffcc 	andi	r4,r7,65535
   186c8:	1909c83a 	sub	r4,r3,r4
   186cc:	280ad43a 	srli	r5,r5,16
   186d0:	380ed43a 	srli	r7,r7,16
   186d4:	2007d43a 	srai	r3,r4,16
   186d8:	213fffcc 	andi	r4,r4,65535
   186dc:	29cbc83a 	sub	r5,r5,r7
   186e0:	28c7883a 	add	r3,r5,r3
   186e4:	180a943a 	slli	r5,r3,16
   186e8:	8c400104 	addi	r17,r17,4
   186ec:	84000104 	addi	r16,r16,4
   186f0:	2908b03a 	or	r4,r5,r4
   186f4:	59000015 	stw	r4,0(r11)
   186f8:	1807d43a 	srai	r3,r3,16
   186fc:	3015883a 	mov	r10,r6
   18700:	3017883a 	mov	r11,r6
   18704:	8b3fea36 	bltu	r17,r12,186b0 <__alt_data_end+0xfc0186b0>
   18708:	8200162e 	bgeu	r16,r8,18764 <__mdiff+0x17c>
   1870c:	8017883a 	mov	r11,r16
   18710:	59400017 	ldw	r5,0(r11)
   18714:	31800104 	addi	r6,r6,4
   18718:	5ac00104 	addi	r11,r11,4
   1871c:	293fffcc 	andi	r4,r5,65535
   18720:	20c7883a 	add	r3,r4,r3
   18724:	280ed43a 	srli	r7,r5,16
   18728:	180bd43a 	srai	r5,r3,16
   1872c:	193fffcc 	andi	r4,r3,65535
   18730:	3947883a 	add	r3,r7,r5
   18734:	180a943a 	slli	r5,r3,16
   18738:	1807d43a 	srai	r3,r3,16
   1873c:	2908b03a 	or	r4,r5,r4
   18740:	313fff15 	stw	r4,-4(r6)
   18744:	5a3ff236 	bltu	r11,r8,18710 <__alt_data_end+0xfc018710>
   18748:	0406303a 	nor	r3,zero,r16
   1874c:	1a07883a 	add	r3,r3,r8
   18750:	1806d0ba 	srli	r3,r3,2
   18754:	18c00044 	addi	r3,r3,1
   18758:	18c7883a 	add	r3,r3,r3
   1875c:	18c7883a 	add	r3,r3,r3
   18760:	50d5883a 	add	r10,r10,r3
   18764:	50ffff04 	addi	r3,r10,-4
   18768:	2000041e 	bne	r4,zero,1877c <__mdiff+0x194>
   1876c:	18ffff04 	addi	r3,r3,-4
   18770:	19000017 	ldw	r4,0(r3)
   18774:	4a7fffc4 	addi	r9,r9,-1
   18778:	203ffc26 	beq	r4,zero,1876c <__alt_data_end+0xfc01876c>
   1877c:	12400415 	stw	r9,16(r2)
   18780:	dfc00517 	ldw	ra,20(sp)
   18784:	dd000417 	ldw	r20,16(sp)
   18788:	dcc00317 	ldw	r19,12(sp)
   1878c:	dc800217 	ldw	r18,8(sp)
   18790:	dc400117 	ldw	r17,4(sp)
   18794:	dc000017 	ldw	r16,0(sp)
   18798:	dec00604 	addi	sp,sp,24
   1879c:	f800283a 	ret
   187a0:	000b883a 	mov	r5,zero
   187a4:	0017c040 	call	17c04 <_Balloc>
   187a8:	00c00044 	movi	r3,1
   187ac:	10c00415 	stw	r3,16(r2)
   187b0:	10000515 	stw	zero,20(r2)
   187b4:	003ff206 	br	18780 <__alt_data_end+0xfc018780>
   187b8:	8023883a 	mov	r17,r16
   187bc:	0029883a 	mov	r20,zero
   187c0:	4021883a 	mov	r16,r8
   187c4:	003fad06 	br	1867c <__alt_data_end+0xfc01867c>
   187c8:	9005883a 	mov	r2,r18
   187cc:	94400504 	addi	r17,r18,20
   187d0:	9c000504 	addi	r16,r19,20
   187d4:	9825883a 	mov	r18,r19
   187d8:	05000044 	movi	r20,1
   187dc:	1027883a 	mov	r19,r2
   187e0:	003fa606 	br	1867c <__alt_data_end+0xfc01867c>

000187e4 <__ulp>:
   187e4:	295ffc2c 	andhi	r5,r5,32752
   187e8:	00bf3034 	movhi	r2,64704
   187ec:	2887883a 	add	r3,r5,r2
   187f0:	00c0020e 	bge	zero,r3,187fc <__ulp+0x18>
   187f4:	0005883a 	mov	r2,zero
   187f8:	f800283a 	ret
   187fc:	00c7c83a 	sub	r3,zero,r3
   18800:	1807d53a 	srai	r3,r3,20
   18804:	008004c4 	movi	r2,19
   18808:	10c00b0e 	bge	r2,r3,18838 <__ulp+0x54>
   1880c:	18bffb04 	addi	r2,r3,-20
   18810:	01000784 	movi	r4,30
   18814:	0007883a 	mov	r3,zero
   18818:	20800516 	blt	r4,r2,18830 <__ulp+0x4c>
   1881c:	010007c4 	movi	r4,31
   18820:	2089c83a 	sub	r4,r4,r2
   18824:	00800044 	movi	r2,1
   18828:	1104983a 	sll	r2,r2,r4
   1882c:	f800283a 	ret
   18830:	00800044 	movi	r2,1
   18834:	f800283a 	ret
   18838:	01400234 	movhi	r5,8
   1883c:	28c7d83a 	sra	r3,r5,r3
   18840:	0005883a 	mov	r2,zero
   18844:	f800283a 	ret

00018848 <__b2d>:
   18848:	defffa04 	addi	sp,sp,-24
   1884c:	dc000015 	stw	r16,0(sp)
   18850:	24000417 	ldw	r16,16(r4)
   18854:	dc400115 	stw	r17,4(sp)
   18858:	24400504 	addi	r17,r4,20
   1885c:	8421883a 	add	r16,r16,r16
   18860:	8421883a 	add	r16,r16,r16
   18864:	8c21883a 	add	r16,r17,r16
   18868:	dc800215 	stw	r18,8(sp)
   1886c:	84bfff17 	ldw	r18,-4(r16)
   18870:	dd000415 	stw	r20,16(sp)
   18874:	dcc00315 	stw	r19,12(sp)
   18878:	9009883a 	mov	r4,r18
   1887c:	2829883a 	mov	r20,r5
   18880:	dfc00515 	stw	ra,20(sp)
   18884:	0017f200 	call	17f20 <__hi0bits>
   18888:	00c00804 	movi	r3,32
   1888c:	1889c83a 	sub	r4,r3,r2
   18890:	a1000015 	stw	r4,0(r20)
   18894:	01000284 	movi	r4,10
   18898:	84ffff04 	addi	r19,r16,-4
   1889c:	20801216 	blt	r4,r2,188e8 <__b2d+0xa0>
   188a0:	018002c4 	movi	r6,11
   188a4:	308dc83a 	sub	r6,r6,r2
   188a8:	9186d83a 	srl	r3,r18,r6
   188ac:	18cffc34 	orhi	r3,r3,16368
   188b0:	8cc0212e 	bgeu	r17,r19,18938 <__b2d+0xf0>
   188b4:	813ffe17 	ldw	r4,-8(r16)
   188b8:	218cd83a 	srl	r6,r4,r6
   188bc:	10800544 	addi	r2,r2,21
   188c0:	9084983a 	sll	r2,r18,r2
   188c4:	1184b03a 	or	r2,r2,r6
   188c8:	dfc00517 	ldw	ra,20(sp)
   188cc:	dd000417 	ldw	r20,16(sp)
   188d0:	dcc00317 	ldw	r19,12(sp)
   188d4:	dc800217 	ldw	r18,8(sp)
   188d8:	dc400117 	ldw	r17,4(sp)
   188dc:	dc000017 	ldw	r16,0(sp)
   188e0:	dec00604 	addi	sp,sp,24
   188e4:	f800283a 	ret
   188e8:	8cc00f2e 	bgeu	r17,r19,18928 <__b2d+0xe0>
   188ec:	117ffd44 	addi	r5,r2,-11
   188f0:	80bffe17 	ldw	r2,-8(r16)
   188f4:	28000e26 	beq	r5,zero,18930 <__b2d+0xe8>
   188f8:	1949c83a 	sub	r4,r3,r5
   188fc:	9164983a 	sll	r18,r18,r5
   18900:	1106d83a 	srl	r3,r2,r4
   18904:	81bffe04 	addi	r6,r16,-8
   18908:	948ffc34 	orhi	r18,r18,16368
   1890c:	90c6b03a 	or	r3,r18,r3
   18910:	89800e2e 	bgeu	r17,r6,1894c <__b2d+0x104>
   18914:	81bffd17 	ldw	r6,-12(r16)
   18918:	1144983a 	sll	r2,r2,r5
   1891c:	310ad83a 	srl	r5,r6,r4
   18920:	2884b03a 	or	r2,r5,r2
   18924:	003fe806 	br	188c8 <__alt_data_end+0xfc0188c8>
   18928:	10bffd44 	addi	r2,r2,-11
   1892c:	1000041e 	bne	r2,zero,18940 <__b2d+0xf8>
   18930:	90cffc34 	orhi	r3,r18,16368
   18934:	003fe406 	br	188c8 <__alt_data_end+0xfc0188c8>
   18938:	000d883a 	mov	r6,zero
   1893c:	003fdf06 	br	188bc <__alt_data_end+0xfc0188bc>
   18940:	90a4983a 	sll	r18,r18,r2
   18944:	0005883a 	mov	r2,zero
   18948:	003ff906 	br	18930 <__alt_data_end+0xfc018930>
   1894c:	1144983a 	sll	r2,r2,r5
   18950:	003fdd06 	br	188c8 <__alt_data_end+0xfc0188c8>

00018954 <__d2b>:
   18954:	defff804 	addi	sp,sp,-32
   18958:	dc000215 	stw	r16,8(sp)
   1895c:	3021883a 	mov	r16,r6
   18960:	dc400315 	stw	r17,12(sp)
   18964:	8022907a 	slli	r17,r16,1
   18968:	dd000615 	stw	r20,24(sp)
   1896c:	2829883a 	mov	r20,r5
   18970:	01400044 	movi	r5,1
   18974:	dcc00515 	stw	r19,20(sp)
   18978:	dc800415 	stw	r18,16(sp)
   1897c:	dfc00715 	stw	ra,28(sp)
   18980:	3825883a 	mov	r18,r7
   18984:	8822d57a 	srli	r17,r17,21
   18988:	0017c040 	call	17c04 <_Balloc>
   1898c:	1027883a 	mov	r19,r2
   18990:	00800434 	movhi	r2,16
   18994:	10bfffc4 	addi	r2,r2,-1
   18998:	808c703a 	and	r6,r16,r2
   1899c:	88000126 	beq	r17,zero,189a4 <__d2b+0x50>
   189a0:	31800434 	orhi	r6,r6,16
   189a4:	d9800015 	stw	r6,0(sp)
   189a8:	a0002426 	beq	r20,zero,18a3c <__d2b+0xe8>
   189ac:	d9000104 	addi	r4,sp,4
   189b0:	dd000115 	stw	r20,4(sp)
   189b4:	0017f880 	call	17f88 <__lo0bits>
   189b8:	d8c00017 	ldw	r3,0(sp)
   189bc:	10002f1e 	bne	r2,zero,18a7c <__d2b+0x128>
   189c0:	d9000117 	ldw	r4,4(sp)
   189c4:	99000515 	stw	r4,20(r19)
   189c8:	1821003a 	cmpeq	r16,r3,zero
   189cc:	01000084 	movi	r4,2
   189d0:	2421c83a 	sub	r16,r4,r16
   189d4:	98c00615 	stw	r3,24(r19)
   189d8:	9c000415 	stw	r16,16(r19)
   189dc:	88001f1e 	bne	r17,zero,18a5c <__d2b+0x108>
   189e0:	10bef384 	addi	r2,r2,-1074
   189e4:	90800015 	stw	r2,0(r18)
   189e8:	00900034 	movhi	r2,16384
   189ec:	10bfffc4 	addi	r2,r2,-1
   189f0:	8085883a 	add	r2,r16,r2
   189f4:	1085883a 	add	r2,r2,r2
   189f8:	1085883a 	add	r2,r2,r2
   189fc:	9885883a 	add	r2,r19,r2
   18a00:	11000517 	ldw	r4,20(r2)
   18a04:	8020917a 	slli	r16,r16,5
   18a08:	0017f200 	call	17f20 <__hi0bits>
   18a0c:	d8c00817 	ldw	r3,32(sp)
   18a10:	8085c83a 	sub	r2,r16,r2
   18a14:	18800015 	stw	r2,0(r3)
   18a18:	9805883a 	mov	r2,r19
   18a1c:	dfc00717 	ldw	ra,28(sp)
   18a20:	dd000617 	ldw	r20,24(sp)
   18a24:	dcc00517 	ldw	r19,20(sp)
   18a28:	dc800417 	ldw	r18,16(sp)
   18a2c:	dc400317 	ldw	r17,12(sp)
   18a30:	dc000217 	ldw	r16,8(sp)
   18a34:	dec00804 	addi	sp,sp,32
   18a38:	f800283a 	ret
   18a3c:	d809883a 	mov	r4,sp
   18a40:	0017f880 	call	17f88 <__lo0bits>
   18a44:	d8c00017 	ldw	r3,0(sp)
   18a48:	04000044 	movi	r16,1
   18a4c:	9c000415 	stw	r16,16(r19)
   18a50:	98c00515 	stw	r3,20(r19)
   18a54:	10800804 	addi	r2,r2,32
   18a58:	883fe126 	beq	r17,zero,189e0 <__alt_data_end+0xfc0189e0>
   18a5c:	00c00d44 	movi	r3,53
   18a60:	8c7ef344 	addi	r17,r17,-1075
   18a64:	88a3883a 	add	r17,r17,r2
   18a68:	1885c83a 	sub	r2,r3,r2
   18a6c:	d8c00817 	ldw	r3,32(sp)
   18a70:	94400015 	stw	r17,0(r18)
   18a74:	18800015 	stw	r2,0(r3)
   18a78:	003fe706 	br	18a18 <__alt_data_end+0xfc018a18>
   18a7c:	01000804 	movi	r4,32
   18a80:	2089c83a 	sub	r4,r4,r2
   18a84:	1908983a 	sll	r4,r3,r4
   18a88:	d9400117 	ldw	r5,4(sp)
   18a8c:	1886d83a 	srl	r3,r3,r2
   18a90:	2148b03a 	or	r4,r4,r5
   18a94:	99000515 	stw	r4,20(r19)
   18a98:	d8c00015 	stw	r3,0(sp)
   18a9c:	003fca06 	br	189c8 <__alt_data_end+0xfc0189c8>

00018aa0 <__ratio>:
   18aa0:	defff904 	addi	sp,sp,-28
   18aa4:	dc400315 	stw	r17,12(sp)
   18aa8:	2823883a 	mov	r17,r5
   18aac:	d9400104 	addi	r5,sp,4
   18ab0:	dfc00615 	stw	ra,24(sp)
   18ab4:	dcc00515 	stw	r19,20(sp)
   18ab8:	dc800415 	stw	r18,16(sp)
   18abc:	2027883a 	mov	r19,r4
   18ac0:	dc000215 	stw	r16,8(sp)
   18ac4:	00188480 	call	18848 <__b2d>
   18ac8:	d80b883a 	mov	r5,sp
   18acc:	8809883a 	mov	r4,r17
   18ad0:	1025883a 	mov	r18,r2
   18ad4:	1821883a 	mov	r16,r3
   18ad8:	00188480 	call	18848 <__b2d>
   18adc:	8a000417 	ldw	r8,16(r17)
   18ae0:	99000417 	ldw	r4,16(r19)
   18ae4:	d9400117 	ldw	r5,4(sp)
   18ae8:	2209c83a 	sub	r4,r4,r8
   18aec:	2010917a 	slli	r8,r4,5
   18af0:	d9000017 	ldw	r4,0(sp)
   18af4:	2909c83a 	sub	r4,r5,r4
   18af8:	4109883a 	add	r4,r8,r4
   18afc:	01000e0e 	bge	zero,r4,18b38 <__ratio+0x98>
   18b00:	2008953a 	slli	r4,r4,20
   18b04:	2421883a 	add	r16,r4,r16
   18b08:	100d883a 	mov	r6,r2
   18b0c:	180f883a 	mov	r7,r3
   18b10:	9009883a 	mov	r4,r18
   18b14:	800b883a 	mov	r5,r16
   18b18:	001df580 	call	1df58 <__divdf3>
   18b1c:	dfc00617 	ldw	ra,24(sp)
   18b20:	dcc00517 	ldw	r19,20(sp)
   18b24:	dc800417 	ldw	r18,16(sp)
   18b28:	dc400317 	ldw	r17,12(sp)
   18b2c:	dc000217 	ldw	r16,8(sp)
   18b30:	dec00704 	addi	sp,sp,28
   18b34:	f800283a 	ret
   18b38:	2008953a 	slli	r4,r4,20
   18b3c:	1907c83a 	sub	r3,r3,r4
   18b40:	003ff106 	br	18b08 <__alt_data_end+0xfc018b08>

00018b44 <_mprec_log10>:
   18b44:	defffe04 	addi	sp,sp,-8
   18b48:	dc000015 	stw	r16,0(sp)
   18b4c:	dfc00115 	stw	ra,4(sp)
   18b50:	008005c4 	movi	r2,23
   18b54:	2021883a 	mov	r16,r4
   18b58:	11000d0e 	bge	r2,r4,18b90 <_mprec_log10+0x4c>
   18b5c:	0005883a 	mov	r2,zero
   18b60:	00cffc34 	movhi	r3,16368
   18b64:	843fffc4 	addi	r16,r16,-1
   18b68:	000d883a 	mov	r6,zero
   18b6c:	01d00934 	movhi	r7,16420
   18b70:	1009883a 	mov	r4,r2
   18b74:	180b883a 	mov	r5,r3
   18b78:	001eb800 	call	1eb80 <__muldf3>
   18b7c:	803ff91e 	bne	r16,zero,18b64 <__alt_data_end+0xfc018b64>
   18b80:	dfc00117 	ldw	ra,4(sp)
   18b84:	dc000017 	ldw	r16,0(sp)
   18b88:	dec00204 	addi	sp,sp,8
   18b8c:	f800283a 	ret
   18b90:	202090fa 	slli	r16,r4,3
   18b94:	008000f4 	movhi	r2,3
   18b98:	10ae3304 	addi	r2,r2,-18228
   18b9c:	1421883a 	add	r16,r2,r16
   18ba0:	80800017 	ldw	r2,0(r16)
   18ba4:	80c00117 	ldw	r3,4(r16)
   18ba8:	dfc00117 	ldw	ra,4(sp)
   18bac:	dc000017 	ldw	r16,0(sp)
   18bb0:	dec00204 	addi	sp,sp,8
   18bb4:	f800283a 	ret

00018bb8 <__copybits>:
   18bb8:	297fffc4 	addi	r5,r5,-1
   18bbc:	280fd17a 	srai	r7,r5,5
   18bc0:	30c00417 	ldw	r3,16(r6)
   18bc4:	30800504 	addi	r2,r6,20
   18bc8:	39c00044 	addi	r7,r7,1
   18bcc:	18c7883a 	add	r3,r3,r3
   18bd0:	39cf883a 	add	r7,r7,r7
   18bd4:	18c7883a 	add	r3,r3,r3
   18bd8:	39cf883a 	add	r7,r7,r7
   18bdc:	10c7883a 	add	r3,r2,r3
   18be0:	21cf883a 	add	r7,r4,r7
   18be4:	10c00d2e 	bgeu	r2,r3,18c1c <__copybits+0x64>
   18be8:	200b883a 	mov	r5,r4
   18bec:	12000017 	ldw	r8,0(r2)
   18bf0:	29400104 	addi	r5,r5,4
   18bf4:	10800104 	addi	r2,r2,4
   18bf8:	2a3fff15 	stw	r8,-4(r5)
   18bfc:	10fffb36 	bltu	r2,r3,18bec <__alt_data_end+0xfc018bec>
   18c00:	1985c83a 	sub	r2,r3,r6
   18c04:	10bffac4 	addi	r2,r2,-21
   18c08:	1004d0ba 	srli	r2,r2,2
   18c0c:	10800044 	addi	r2,r2,1
   18c10:	1085883a 	add	r2,r2,r2
   18c14:	1085883a 	add	r2,r2,r2
   18c18:	2089883a 	add	r4,r4,r2
   18c1c:	21c0032e 	bgeu	r4,r7,18c2c <__copybits+0x74>
   18c20:	20000015 	stw	zero,0(r4)
   18c24:	21000104 	addi	r4,r4,4
   18c28:	21fffd36 	bltu	r4,r7,18c20 <__alt_data_end+0xfc018c20>
   18c2c:	f800283a 	ret

00018c30 <__any_on>:
   18c30:	20c00417 	ldw	r3,16(r4)
   18c34:	2805d17a 	srai	r2,r5,5
   18c38:	21000504 	addi	r4,r4,20
   18c3c:	18800d0e 	bge	r3,r2,18c74 <__any_on+0x44>
   18c40:	18c7883a 	add	r3,r3,r3
   18c44:	18c7883a 	add	r3,r3,r3
   18c48:	20c7883a 	add	r3,r4,r3
   18c4c:	20c0192e 	bgeu	r4,r3,18cb4 <__any_on+0x84>
   18c50:	18bfff17 	ldw	r2,-4(r3)
   18c54:	18ffff04 	addi	r3,r3,-4
   18c58:	1000041e 	bne	r2,zero,18c6c <__any_on+0x3c>
   18c5c:	20c0142e 	bgeu	r4,r3,18cb0 <__any_on+0x80>
   18c60:	18ffff04 	addi	r3,r3,-4
   18c64:	19400017 	ldw	r5,0(r3)
   18c68:	283ffc26 	beq	r5,zero,18c5c <__alt_data_end+0xfc018c5c>
   18c6c:	00800044 	movi	r2,1
   18c70:	f800283a 	ret
   18c74:	10c00a0e 	bge	r2,r3,18ca0 <__any_on+0x70>
   18c78:	1085883a 	add	r2,r2,r2
   18c7c:	1085883a 	add	r2,r2,r2
   18c80:	294007cc 	andi	r5,r5,31
   18c84:	2087883a 	add	r3,r4,r2
   18c88:	283ff026 	beq	r5,zero,18c4c <__alt_data_end+0xfc018c4c>
   18c8c:	19800017 	ldw	r6,0(r3)
   18c90:	3144d83a 	srl	r2,r6,r5
   18c94:	114a983a 	sll	r5,r2,r5
   18c98:	317ff41e 	bne	r6,r5,18c6c <__alt_data_end+0xfc018c6c>
   18c9c:	003feb06 	br	18c4c <__alt_data_end+0xfc018c4c>
   18ca0:	1085883a 	add	r2,r2,r2
   18ca4:	1085883a 	add	r2,r2,r2
   18ca8:	2087883a 	add	r3,r4,r2
   18cac:	003fe706 	br	18c4c <__alt_data_end+0xfc018c4c>
   18cb0:	f800283a 	ret
   18cb4:	0005883a 	mov	r2,zero
   18cb8:	f800283a 	ret

00018cbc <_putc_r>:
   18cbc:	defffc04 	addi	sp,sp,-16
   18cc0:	dc000215 	stw	r16,8(sp)
   18cc4:	dfc00315 	stw	ra,12(sp)
   18cc8:	2021883a 	mov	r16,r4
   18ccc:	20000226 	beq	r4,zero,18cd8 <_putc_r+0x1c>
   18cd0:	20800e17 	ldw	r2,56(r4)
   18cd4:	10001b26 	beq	r2,zero,18d44 <_putc_r+0x88>
   18cd8:	30800217 	ldw	r2,8(r6)
   18cdc:	10bfffc4 	addi	r2,r2,-1
   18ce0:	30800215 	stw	r2,8(r6)
   18ce4:	10000a16 	blt	r2,zero,18d10 <_putc_r+0x54>
   18ce8:	30800017 	ldw	r2,0(r6)
   18cec:	11400005 	stb	r5,0(r2)
   18cf0:	30800017 	ldw	r2,0(r6)
   18cf4:	10c00044 	addi	r3,r2,1
   18cf8:	30c00015 	stw	r3,0(r6)
   18cfc:	10800003 	ldbu	r2,0(r2)
   18d00:	dfc00317 	ldw	ra,12(sp)
   18d04:	dc000217 	ldw	r16,8(sp)
   18d08:	dec00404 	addi	sp,sp,16
   18d0c:	f800283a 	ret
   18d10:	30c00617 	ldw	r3,24(r6)
   18d14:	10c00616 	blt	r2,r3,18d30 <_putc_r+0x74>
   18d18:	30800017 	ldw	r2,0(r6)
   18d1c:	00c00284 	movi	r3,10
   18d20:	11400005 	stb	r5,0(r2)
   18d24:	30800017 	ldw	r2,0(r6)
   18d28:	11400003 	ldbu	r5,0(r2)
   18d2c:	28fff11e 	bne	r5,r3,18cf4 <__alt_data_end+0xfc018cf4>
   18d30:	8009883a 	mov	r4,r16
   18d34:	dfc00317 	ldw	ra,12(sp)
   18d38:	dc000217 	ldw	r16,8(sp)
   18d3c:	dec00404 	addi	sp,sp,16
   18d40:	001c1a01 	jmpi	1c1a0 <__swbuf_r>
   18d44:	d9400015 	stw	r5,0(sp)
   18d48:	d9800115 	stw	r6,4(sp)
   18d4c:	0016c580 	call	16c58 <__sinit>
   18d50:	d9800117 	ldw	r6,4(sp)
   18d54:	d9400017 	ldw	r5,0(sp)
   18d58:	003fdf06 	br	18cd8 <__alt_data_end+0xfc018cd8>

00018d5c <putc>:
   18d5c:	008000f4 	movhi	r2,3
   18d60:	defffc04 	addi	sp,sp,-16
   18d64:	10baf904 	addi	r2,r2,-5148
   18d68:	dc000115 	stw	r16,4(sp)
   18d6c:	14000017 	ldw	r16,0(r2)
   18d70:	dc400215 	stw	r17,8(sp)
   18d74:	dfc00315 	stw	ra,12(sp)
   18d78:	2023883a 	mov	r17,r4
   18d7c:	80000226 	beq	r16,zero,18d88 <putc+0x2c>
   18d80:	80800e17 	ldw	r2,56(r16)
   18d84:	10001a26 	beq	r2,zero,18df0 <putc+0x94>
   18d88:	28800217 	ldw	r2,8(r5)
   18d8c:	10bfffc4 	addi	r2,r2,-1
   18d90:	28800215 	stw	r2,8(r5)
   18d94:	10000b16 	blt	r2,zero,18dc4 <putc+0x68>
   18d98:	28800017 	ldw	r2,0(r5)
   18d9c:	14400005 	stb	r17,0(r2)
   18da0:	28800017 	ldw	r2,0(r5)
   18da4:	10c00044 	addi	r3,r2,1
   18da8:	28c00015 	stw	r3,0(r5)
   18dac:	10800003 	ldbu	r2,0(r2)
   18db0:	dfc00317 	ldw	ra,12(sp)
   18db4:	dc400217 	ldw	r17,8(sp)
   18db8:	dc000117 	ldw	r16,4(sp)
   18dbc:	dec00404 	addi	sp,sp,16
   18dc0:	f800283a 	ret
   18dc4:	28c00617 	ldw	r3,24(r5)
   18dc8:	10c00e16 	blt	r2,r3,18e04 <putc+0xa8>
   18dcc:	28800017 	ldw	r2,0(r5)
   18dd0:	01000284 	movi	r4,10
   18dd4:	14400005 	stb	r17,0(r2)
   18dd8:	28800017 	ldw	r2,0(r5)
   18ddc:	10c00003 	ldbu	r3,0(r2)
   18de0:	193ff01e 	bne	r3,r4,18da4 <__alt_data_end+0xfc018da4>
   18de4:	280d883a 	mov	r6,r5
   18de8:	180b883a 	mov	r5,r3
   18dec:	00000706 	br	18e0c <putc+0xb0>
   18df0:	8009883a 	mov	r4,r16
   18df4:	d9400015 	stw	r5,0(sp)
   18df8:	0016c580 	call	16c58 <__sinit>
   18dfc:	d9400017 	ldw	r5,0(sp)
   18e00:	003fe106 	br	18d88 <__alt_data_end+0xfc018d88>
   18e04:	280d883a 	mov	r6,r5
   18e08:	880b883a 	mov	r5,r17
   18e0c:	8009883a 	mov	r4,r16
   18e10:	dfc00317 	ldw	ra,12(sp)
   18e14:	dc400217 	ldw	r17,8(sp)
   18e18:	dc000117 	ldw	r16,4(sp)
   18e1c:	dec00404 	addi	sp,sp,16
   18e20:	001c1a01 	jmpi	1c1a0 <__swbuf_r>

00018e24 <_realloc_r>:
   18e24:	defff604 	addi	sp,sp,-40
   18e28:	dc800215 	stw	r18,8(sp)
   18e2c:	dfc00915 	stw	ra,36(sp)
   18e30:	df000815 	stw	fp,32(sp)
   18e34:	ddc00715 	stw	r23,28(sp)
   18e38:	dd800615 	stw	r22,24(sp)
   18e3c:	dd400515 	stw	r21,20(sp)
   18e40:	dd000415 	stw	r20,16(sp)
   18e44:	dcc00315 	stw	r19,12(sp)
   18e48:	dc400115 	stw	r17,4(sp)
   18e4c:	dc000015 	stw	r16,0(sp)
   18e50:	3025883a 	mov	r18,r6
   18e54:	2800b726 	beq	r5,zero,19134 <_realloc_r+0x310>
   18e58:	282b883a 	mov	r21,r5
   18e5c:	2029883a 	mov	r20,r4
   18e60:	00206480 	call	20648 <__malloc_lock>
   18e64:	a8bfff17 	ldw	r2,-4(r21)
   18e68:	043fff04 	movi	r16,-4
   18e6c:	90c002c4 	addi	r3,r18,11
   18e70:	01000584 	movi	r4,22
   18e74:	acfffe04 	addi	r19,r21,-8
   18e78:	1420703a 	and	r16,r2,r16
   18e7c:	20c0332e 	bgeu	r4,r3,18f4c <_realloc_r+0x128>
   18e80:	047ffe04 	movi	r17,-8
   18e84:	1c62703a 	and	r17,r3,r17
   18e88:	8807883a 	mov	r3,r17
   18e8c:	88005816 	blt	r17,zero,18ff0 <_realloc_r+0x1cc>
   18e90:	8c805736 	bltu	r17,r18,18ff0 <_realloc_r+0x1cc>
   18e94:	80c0300e 	bge	r16,r3,18f58 <_realloc_r+0x134>
   18e98:	070000f4 	movhi	fp,3
   18e9c:	e72f9604 	addi	fp,fp,-16808
   18ea0:	e1c00217 	ldw	r7,8(fp)
   18ea4:	9c09883a 	add	r4,r19,r16
   18ea8:	22000117 	ldw	r8,4(r4)
   18eac:	21c06326 	beq	r4,r7,1903c <_realloc_r+0x218>
   18eb0:	017fff84 	movi	r5,-2
   18eb4:	414a703a 	and	r5,r8,r5
   18eb8:	214b883a 	add	r5,r4,r5
   18ebc:	29800117 	ldw	r6,4(r5)
   18ec0:	3180004c 	andi	r6,r6,1
   18ec4:	30003f26 	beq	r6,zero,18fc4 <_realloc_r+0x1a0>
   18ec8:	1080004c 	andi	r2,r2,1
   18ecc:	10008326 	beq	r2,zero,190dc <_realloc_r+0x2b8>
   18ed0:	900b883a 	mov	r5,r18
   18ed4:	a009883a 	mov	r4,r20
   18ed8:	000f4680 	call	f468 <_malloc_r>
   18edc:	1025883a 	mov	r18,r2
   18ee0:	10011e26 	beq	r2,zero,1935c <_realloc_r+0x538>
   18ee4:	a93fff17 	ldw	r4,-4(r21)
   18ee8:	10fffe04 	addi	r3,r2,-8
   18eec:	00bfff84 	movi	r2,-2
   18ef0:	2084703a 	and	r2,r4,r2
   18ef4:	9885883a 	add	r2,r19,r2
   18ef8:	1880ee26 	beq	r3,r2,192b4 <_realloc_r+0x490>
   18efc:	81bfff04 	addi	r6,r16,-4
   18f00:	00800904 	movi	r2,36
   18f04:	1180b836 	bltu	r2,r6,191e8 <_realloc_r+0x3c4>
   18f08:	00c004c4 	movi	r3,19
   18f0c:	19809636 	bltu	r3,r6,19168 <_realloc_r+0x344>
   18f10:	9005883a 	mov	r2,r18
   18f14:	a807883a 	mov	r3,r21
   18f18:	19000017 	ldw	r4,0(r3)
   18f1c:	11000015 	stw	r4,0(r2)
   18f20:	19000117 	ldw	r4,4(r3)
   18f24:	11000115 	stw	r4,4(r2)
   18f28:	18c00217 	ldw	r3,8(r3)
   18f2c:	10c00215 	stw	r3,8(r2)
   18f30:	a80b883a 	mov	r5,r21
   18f34:	a009883a 	mov	r4,r20
   18f38:	0016dcc0 	call	16dcc <_free_r>
   18f3c:	a009883a 	mov	r4,r20
   18f40:	002066c0 	call	2066c <__malloc_unlock>
   18f44:	9005883a 	mov	r2,r18
   18f48:	00001206 	br	18f94 <_realloc_r+0x170>
   18f4c:	00c00404 	movi	r3,16
   18f50:	1823883a 	mov	r17,r3
   18f54:	003fce06 	br	18e90 <__alt_data_end+0xfc018e90>
   18f58:	a825883a 	mov	r18,r21
   18f5c:	8445c83a 	sub	r2,r16,r17
   18f60:	00c003c4 	movi	r3,15
   18f64:	18802636 	bltu	r3,r2,19000 <_realloc_r+0x1dc>
   18f68:	99800117 	ldw	r6,4(r19)
   18f6c:	9c07883a 	add	r3,r19,r16
   18f70:	3180004c 	andi	r6,r6,1
   18f74:	3420b03a 	or	r16,r6,r16
   18f78:	9c000115 	stw	r16,4(r19)
   18f7c:	18800117 	ldw	r2,4(r3)
   18f80:	10800054 	ori	r2,r2,1
   18f84:	18800115 	stw	r2,4(r3)
   18f88:	a009883a 	mov	r4,r20
   18f8c:	002066c0 	call	2066c <__malloc_unlock>
   18f90:	9005883a 	mov	r2,r18
   18f94:	dfc00917 	ldw	ra,36(sp)
   18f98:	df000817 	ldw	fp,32(sp)
   18f9c:	ddc00717 	ldw	r23,28(sp)
   18fa0:	dd800617 	ldw	r22,24(sp)
   18fa4:	dd400517 	ldw	r21,20(sp)
   18fa8:	dd000417 	ldw	r20,16(sp)
   18fac:	dcc00317 	ldw	r19,12(sp)
   18fb0:	dc800217 	ldw	r18,8(sp)
   18fb4:	dc400117 	ldw	r17,4(sp)
   18fb8:	dc000017 	ldw	r16,0(sp)
   18fbc:	dec00a04 	addi	sp,sp,40
   18fc0:	f800283a 	ret
   18fc4:	017fff04 	movi	r5,-4
   18fc8:	414a703a 	and	r5,r8,r5
   18fcc:	814d883a 	add	r6,r16,r5
   18fd0:	30c01f16 	blt	r6,r3,19050 <_realloc_r+0x22c>
   18fd4:	20800317 	ldw	r2,12(r4)
   18fd8:	20c00217 	ldw	r3,8(r4)
   18fdc:	a825883a 	mov	r18,r21
   18fe0:	3021883a 	mov	r16,r6
   18fe4:	18800315 	stw	r2,12(r3)
   18fe8:	10c00215 	stw	r3,8(r2)
   18fec:	003fdb06 	br	18f5c <__alt_data_end+0xfc018f5c>
   18ff0:	00800304 	movi	r2,12
   18ff4:	a0800015 	stw	r2,0(r20)
   18ff8:	0005883a 	mov	r2,zero
   18ffc:	003fe506 	br	18f94 <__alt_data_end+0xfc018f94>
   19000:	98c00117 	ldw	r3,4(r19)
   19004:	9c4b883a 	add	r5,r19,r17
   19008:	11000054 	ori	r4,r2,1
   1900c:	18c0004c 	andi	r3,r3,1
   19010:	1c62b03a 	or	r17,r3,r17
   19014:	9c400115 	stw	r17,4(r19)
   19018:	29000115 	stw	r4,4(r5)
   1901c:	2885883a 	add	r2,r5,r2
   19020:	10c00117 	ldw	r3,4(r2)
   19024:	29400204 	addi	r5,r5,8
   19028:	a009883a 	mov	r4,r20
   1902c:	18c00054 	ori	r3,r3,1
   19030:	10c00115 	stw	r3,4(r2)
   19034:	0016dcc0 	call	16dcc <_free_r>
   19038:	003fd306 	br	18f88 <__alt_data_end+0xfc018f88>
   1903c:	017fff04 	movi	r5,-4
   19040:	414a703a 	and	r5,r8,r5
   19044:	89800404 	addi	r6,r17,16
   19048:	8151883a 	add	r8,r16,r5
   1904c:	4180590e 	bge	r8,r6,191b4 <_realloc_r+0x390>
   19050:	1080004c 	andi	r2,r2,1
   19054:	103f9e1e 	bne	r2,zero,18ed0 <__alt_data_end+0xfc018ed0>
   19058:	adbffe17 	ldw	r22,-8(r21)
   1905c:	00bfff04 	movi	r2,-4
   19060:	9dadc83a 	sub	r22,r19,r22
   19064:	b1800117 	ldw	r6,4(r22)
   19068:	3084703a 	and	r2,r6,r2
   1906c:	20002026 	beq	r4,zero,190f0 <_realloc_r+0x2cc>
   19070:	80af883a 	add	r23,r16,r2
   19074:	b96f883a 	add	r23,r23,r5
   19078:	21c05f26 	beq	r4,r7,191f8 <_realloc_r+0x3d4>
   1907c:	b8c01c16 	blt	r23,r3,190f0 <_realloc_r+0x2cc>
   19080:	20800317 	ldw	r2,12(r4)
   19084:	20c00217 	ldw	r3,8(r4)
   19088:	81bfff04 	addi	r6,r16,-4
   1908c:	01000904 	movi	r4,36
   19090:	18800315 	stw	r2,12(r3)
   19094:	10c00215 	stw	r3,8(r2)
   19098:	b0c00217 	ldw	r3,8(r22)
   1909c:	b0800317 	ldw	r2,12(r22)
   190a0:	b4800204 	addi	r18,r22,8
   190a4:	18800315 	stw	r2,12(r3)
   190a8:	10c00215 	stw	r3,8(r2)
   190ac:	21801b36 	bltu	r4,r6,1911c <_realloc_r+0x2f8>
   190b0:	008004c4 	movi	r2,19
   190b4:	1180352e 	bgeu	r2,r6,1918c <_realloc_r+0x368>
   190b8:	a8800017 	ldw	r2,0(r21)
   190bc:	b0800215 	stw	r2,8(r22)
   190c0:	a8800117 	ldw	r2,4(r21)
   190c4:	b0800315 	stw	r2,12(r22)
   190c8:	008006c4 	movi	r2,27
   190cc:	11807f36 	bltu	r2,r6,192cc <_realloc_r+0x4a8>
   190d0:	b0800404 	addi	r2,r22,16
   190d4:	ad400204 	addi	r21,r21,8
   190d8:	00002d06 	br	19190 <_realloc_r+0x36c>
   190dc:	adbffe17 	ldw	r22,-8(r21)
   190e0:	00bfff04 	movi	r2,-4
   190e4:	9dadc83a 	sub	r22,r19,r22
   190e8:	b1000117 	ldw	r4,4(r22)
   190ec:	2084703a 	and	r2,r4,r2
   190f0:	b03f7726 	beq	r22,zero,18ed0 <__alt_data_end+0xfc018ed0>
   190f4:	80af883a 	add	r23,r16,r2
   190f8:	b8ff7516 	blt	r23,r3,18ed0 <__alt_data_end+0xfc018ed0>
   190fc:	b0800317 	ldw	r2,12(r22)
   19100:	b0c00217 	ldw	r3,8(r22)
   19104:	81bfff04 	addi	r6,r16,-4
   19108:	01000904 	movi	r4,36
   1910c:	18800315 	stw	r2,12(r3)
   19110:	10c00215 	stw	r3,8(r2)
   19114:	b4800204 	addi	r18,r22,8
   19118:	21bfe52e 	bgeu	r4,r6,190b0 <__alt_data_end+0xfc0190b0>
   1911c:	a80b883a 	mov	r5,r21
   19120:	9009883a 	mov	r4,r18
   19124:	0017aa80 	call	17aa8 <memmove>
   19128:	b821883a 	mov	r16,r23
   1912c:	b027883a 	mov	r19,r22
   19130:	003f8a06 	br	18f5c <__alt_data_end+0xfc018f5c>
   19134:	300b883a 	mov	r5,r6
   19138:	dfc00917 	ldw	ra,36(sp)
   1913c:	df000817 	ldw	fp,32(sp)
   19140:	ddc00717 	ldw	r23,28(sp)
   19144:	dd800617 	ldw	r22,24(sp)
   19148:	dd400517 	ldw	r21,20(sp)
   1914c:	dd000417 	ldw	r20,16(sp)
   19150:	dcc00317 	ldw	r19,12(sp)
   19154:	dc800217 	ldw	r18,8(sp)
   19158:	dc400117 	ldw	r17,4(sp)
   1915c:	dc000017 	ldw	r16,0(sp)
   19160:	dec00a04 	addi	sp,sp,40
   19164:	000f4681 	jmpi	f468 <_malloc_r>
   19168:	a8c00017 	ldw	r3,0(r21)
   1916c:	90c00015 	stw	r3,0(r18)
   19170:	a8c00117 	ldw	r3,4(r21)
   19174:	90c00115 	stw	r3,4(r18)
   19178:	00c006c4 	movi	r3,27
   1917c:	19804536 	bltu	r3,r6,19294 <_realloc_r+0x470>
   19180:	90800204 	addi	r2,r18,8
   19184:	a8c00204 	addi	r3,r21,8
   19188:	003f6306 	br	18f18 <__alt_data_end+0xfc018f18>
   1918c:	9005883a 	mov	r2,r18
   19190:	a8c00017 	ldw	r3,0(r21)
   19194:	b821883a 	mov	r16,r23
   19198:	b027883a 	mov	r19,r22
   1919c:	10c00015 	stw	r3,0(r2)
   191a0:	a8c00117 	ldw	r3,4(r21)
   191a4:	10c00115 	stw	r3,4(r2)
   191a8:	a8c00217 	ldw	r3,8(r21)
   191ac:	10c00215 	stw	r3,8(r2)
   191b0:	003f6a06 	br	18f5c <__alt_data_end+0xfc018f5c>
   191b4:	9c67883a 	add	r19,r19,r17
   191b8:	4445c83a 	sub	r2,r8,r17
   191bc:	e4c00215 	stw	r19,8(fp)
   191c0:	10800054 	ori	r2,r2,1
   191c4:	98800115 	stw	r2,4(r19)
   191c8:	a8bfff17 	ldw	r2,-4(r21)
   191cc:	a009883a 	mov	r4,r20
   191d0:	1080004c 	andi	r2,r2,1
   191d4:	1462b03a 	or	r17,r2,r17
   191d8:	ac7fff15 	stw	r17,-4(r21)
   191dc:	002066c0 	call	2066c <__malloc_unlock>
   191e0:	a805883a 	mov	r2,r21
   191e4:	003f6b06 	br	18f94 <__alt_data_end+0xfc018f94>
   191e8:	a80b883a 	mov	r5,r21
   191ec:	9009883a 	mov	r4,r18
   191f0:	0017aa80 	call	17aa8 <memmove>
   191f4:	003f4e06 	br	18f30 <__alt_data_end+0xfc018f30>
   191f8:	89000404 	addi	r4,r17,16
   191fc:	b93fbc16 	blt	r23,r4,190f0 <__alt_data_end+0xfc0190f0>
   19200:	b0800317 	ldw	r2,12(r22)
   19204:	b0c00217 	ldw	r3,8(r22)
   19208:	81bfff04 	addi	r6,r16,-4
   1920c:	01000904 	movi	r4,36
   19210:	18800315 	stw	r2,12(r3)
   19214:	10c00215 	stw	r3,8(r2)
   19218:	b4800204 	addi	r18,r22,8
   1921c:	21804336 	bltu	r4,r6,1932c <_realloc_r+0x508>
   19220:	008004c4 	movi	r2,19
   19224:	11803f2e 	bgeu	r2,r6,19324 <_realloc_r+0x500>
   19228:	a8800017 	ldw	r2,0(r21)
   1922c:	b0800215 	stw	r2,8(r22)
   19230:	a8800117 	ldw	r2,4(r21)
   19234:	b0800315 	stw	r2,12(r22)
   19238:	008006c4 	movi	r2,27
   1923c:	11803f36 	bltu	r2,r6,1933c <_realloc_r+0x518>
   19240:	b0800404 	addi	r2,r22,16
   19244:	ad400204 	addi	r21,r21,8
   19248:	a8c00017 	ldw	r3,0(r21)
   1924c:	10c00015 	stw	r3,0(r2)
   19250:	a8c00117 	ldw	r3,4(r21)
   19254:	10c00115 	stw	r3,4(r2)
   19258:	a8c00217 	ldw	r3,8(r21)
   1925c:	10c00215 	stw	r3,8(r2)
   19260:	b447883a 	add	r3,r22,r17
   19264:	bc45c83a 	sub	r2,r23,r17
   19268:	e0c00215 	stw	r3,8(fp)
   1926c:	10800054 	ori	r2,r2,1
   19270:	18800115 	stw	r2,4(r3)
   19274:	b0800117 	ldw	r2,4(r22)
   19278:	a009883a 	mov	r4,r20
   1927c:	1080004c 	andi	r2,r2,1
   19280:	1462b03a 	or	r17,r2,r17
   19284:	b4400115 	stw	r17,4(r22)
   19288:	002066c0 	call	2066c <__malloc_unlock>
   1928c:	9005883a 	mov	r2,r18
   19290:	003f4006 	br	18f94 <__alt_data_end+0xfc018f94>
   19294:	a8c00217 	ldw	r3,8(r21)
   19298:	90c00215 	stw	r3,8(r18)
   1929c:	a8c00317 	ldw	r3,12(r21)
   192a0:	90c00315 	stw	r3,12(r18)
   192a4:	30801126 	beq	r6,r2,192ec <_realloc_r+0x4c8>
   192a8:	90800404 	addi	r2,r18,16
   192ac:	a8c00404 	addi	r3,r21,16
   192b0:	003f1906 	br	18f18 <__alt_data_end+0xfc018f18>
   192b4:	90ffff17 	ldw	r3,-4(r18)
   192b8:	00bfff04 	movi	r2,-4
   192bc:	a825883a 	mov	r18,r21
   192c0:	1884703a 	and	r2,r3,r2
   192c4:	80a1883a 	add	r16,r16,r2
   192c8:	003f2406 	br	18f5c <__alt_data_end+0xfc018f5c>
   192cc:	a8800217 	ldw	r2,8(r21)
   192d0:	b0800415 	stw	r2,16(r22)
   192d4:	a8800317 	ldw	r2,12(r21)
   192d8:	b0800515 	stw	r2,20(r22)
   192dc:	31000a26 	beq	r6,r4,19308 <_realloc_r+0x4e4>
   192e0:	b0800604 	addi	r2,r22,24
   192e4:	ad400404 	addi	r21,r21,16
   192e8:	003fa906 	br	19190 <__alt_data_end+0xfc019190>
   192ec:	a9000417 	ldw	r4,16(r21)
   192f0:	90800604 	addi	r2,r18,24
   192f4:	a8c00604 	addi	r3,r21,24
   192f8:	91000415 	stw	r4,16(r18)
   192fc:	a9000517 	ldw	r4,20(r21)
   19300:	91000515 	stw	r4,20(r18)
   19304:	003f0406 	br	18f18 <__alt_data_end+0xfc018f18>
   19308:	a8c00417 	ldw	r3,16(r21)
   1930c:	ad400604 	addi	r21,r21,24
   19310:	b0800804 	addi	r2,r22,32
   19314:	b0c00615 	stw	r3,24(r22)
   19318:	a8ffff17 	ldw	r3,-4(r21)
   1931c:	b0c00715 	stw	r3,28(r22)
   19320:	003f9b06 	br	19190 <__alt_data_end+0xfc019190>
   19324:	9005883a 	mov	r2,r18
   19328:	003fc706 	br	19248 <__alt_data_end+0xfc019248>
   1932c:	a80b883a 	mov	r5,r21
   19330:	9009883a 	mov	r4,r18
   19334:	0017aa80 	call	17aa8 <memmove>
   19338:	003fc906 	br	19260 <__alt_data_end+0xfc019260>
   1933c:	a8800217 	ldw	r2,8(r21)
   19340:	b0800415 	stw	r2,16(r22)
   19344:	a8800317 	ldw	r2,12(r21)
   19348:	b0800515 	stw	r2,20(r22)
   1934c:	31000726 	beq	r6,r4,1936c <_realloc_r+0x548>
   19350:	b0800604 	addi	r2,r22,24
   19354:	ad400404 	addi	r21,r21,16
   19358:	003fbb06 	br	19248 <__alt_data_end+0xfc019248>
   1935c:	a009883a 	mov	r4,r20
   19360:	002066c0 	call	2066c <__malloc_unlock>
   19364:	0005883a 	mov	r2,zero
   19368:	003f0a06 	br	18f94 <__alt_data_end+0xfc018f94>
   1936c:	a8c00417 	ldw	r3,16(r21)
   19370:	ad400604 	addi	r21,r21,24
   19374:	b0800804 	addi	r2,r22,32
   19378:	b0c00615 	stw	r3,24(r22)
   1937c:	a8ffff17 	ldw	r3,-4(r21)
   19380:	b0c00715 	stw	r3,28(r22)
   19384:	003fb006 	br	19248 <__alt_data_end+0xfc019248>

00019388 <__fpclassifyd>:
   19388:	00a00034 	movhi	r2,32768
   1938c:	10bfffc4 	addi	r2,r2,-1
   19390:	2884703a 	and	r2,r5,r2
   19394:	10000726 	beq	r2,zero,193b4 <__fpclassifyd+0x2c>
   19398:	00fffc34 	movhi	r3,65520
   1939c:	019ff834 	movhi	r6,32736
   193a0:	28c7883a 	add	r3,r5,r3
   193a4:	31bfffc4 	addi	r6,r6,-1
   193a8:	30c00536 	bltu	r6,r3,193c0 <__fpclassifyd+0x38>
   193ac:	00800104 	movi	r2,4
   193b0:	f800283a 	ret
   193b4:	2000021e 	bne	r4,zero,193c0 <__fpclassifyd+0x38>
   193b8:	00800084 	movi	r2,2
   193bc:	f800283a 	ret
   193c0:	00dffc34 	movhi	r3,32752
   193c4:	019ff834 	movhi	r6,32736
   193c8:	28cb883a 	add	r5,r5,r3
   193cc:	31bfffc4 	addi	r6,r6,-1
   193d0:	317ff62e 	bgeu	r6,r5,193ac <__alt_data_end+0xfc0193ac>
   193d4:	01400434 	movhi	r5,16
   193d8:	297fffc4 	addi	r5,r5,-1
   193dc:	28800236 	bltu	r5,r2,193e8 <__fpclassifyd+0x60>
   193e0:	008000c4 	movi	r2,3
   193e4:	f800283a 	ret
   193e8:	10c00226 	beq	r2,r3,193f4 <__fpclassifyd+0x6c>
   193ec:	0005883a 	mov	r2,zero
   193f0:	f800283a 	ret
   193f4:	2005003a 	cmpeq	r2,r4,zero
   193f8:	f800283a 	ret

000193fc <__sread>:
   193fc:	defffe04 	addi	sp,sp,-8
   19400:	dc000015 	stw	r16,0(sp)
   19404:	2821883a 	mov	r16,r5
   19408:	2940038f 	ldh	r5,14(r5)
   1940c:	dfc00115 	stw	ra,4(sp)
   19410:	001c8a40 	call	1c8a4 <_read_r>
   19414:	10000716 	blt	r2,zero,19434 <__sread+0x38>
   19418:	80c01417 	ldw	r3,80(r16)
   1941c:	1887883a 	add	r3,r3,r2
   19420:	80c01415 	stw	r3,80(r16)
   19424:	dfc00117 	ldw	ra,4(sp)
   19428:	dc000017 	ldw	r16,0(sp)
   1942c:	dec00204 	addi	sp,sp,8
   19430:	f800283a 	ret
   19434:	80c0030b 	ldhu	r3,12(r16)
   19438:	18fbffcc 	andi	r3,r3,61439
   1943c:	80c0030d 	sth	r3,12(r16)
   19440:	dfc00117 	ldw	ra,4(sp)
   19444:	dc000017 	ldw	r16,0(sp)
   19448:	dec00204 	addi	sp,sp,8
   1944c:	f800283a 	ret

00019450 <__seofread>:
   19450:	0005883a 	mov	r2,zero
   19454:	f800283a 	ret

00019458 <__swrite>:
   19458:	2880030b 	ldhu	r2,12(r5)
   1945c:	defffb04 	addi	sp,sp,-20
   19460:	dcc00315 	stw	r19,12(sp)
   19464:	dc800215 	stw	r18,8(sp)
   19468:	dc400115 	stw	r17,4(sp)
   1946c:	dc000015 	stw	r16,0(sp)
   19470:	dfc00415 	stw	ra,16(sp)
   19474:	10c0400c 	andi	r3,r2,256
   19478:	2821883a 	mov	r16,r5
   1947c:	2023883a 	mov	r17,r4
   19480:	3025883a 	mov	r18,r6
   19484:	3827883a 	mov	r19,r7
   19488:	18000526 	beq	r3,zero,194a0 <__swrite+0x48>
   1948c:	2940038f 	ldh	r5,14(r5)
   19490:	01c00084 	movi	r7,2
   19494:	000d883a 	mov	r6,zero
   19498:	001c8440 	call	1c844 <_lseek_r>
   1949c:	8080030b 	ldhu	r2,12(r16)
   194a0:	8140038f 	ldh	r5,14(r16)
   194a4:	10bbffcc 	andi	r2,r2,61439
   194a8:	980f883a 	mov	r7,r19
   194ac:	900d883a 	mov	r6,r18
   194b0:	8809883a 	mov	r4,r17
   194b4:	8080030d 	sth	r2,12(r16)
   194b8:	dfc00417 	ldw	ra,16(sp)
   194bc:	dcc00317 	ldw	r19,12(sp)
   194c0:	dc800217 	ldw	r18,8(sp)
   194c4:	dc400117 	ldw	r17,4(sp)
   194c8:	dc000017 	ldw	r16,0(sp)
   194cc:	dec00504 	addi	sp,sp,20
   194d0:	001c2f81 	jmpi	1c2f8 <_write_r>

000194d4 <__sseek>:
   194d4:	defffe04 	addi	sp,sp,-8
   194d8:	dc000015 	stw	r16,0(sp)
   194dc:	2821883a 	mov	r16,r5
   194e0:	2940038f 	ldh	r5,14(r5)
   194e4:	dfc00115 	stw	ra,4(sp)
   194e8:	001c8440 	call	1c844 <_lseek_r>
   194ec:	00ffffc4 	movi	r3,-1
   194f0:	10c00826 	beq	r2,r3,19514 <__sseek+0x40>
   194f4:	80c0030b 	ldhu	r3,12(r16)
   194f8:	80801415 	stw	r2,80(r16)
   194fc:	18c40014 	ori	r3,r3,4096
   19500:	80c0030d 	sth	r3,12(r16)
   19504:	dfc00117 	ldw	ra,4(sp)
   19508:	dc000017 	ldw	r16,0(sp)
   1950c:	dec00204 	addi	sp,sp,8
   19510:	f800283a 	ret
   19514:	80c0030b 	ldhu	r3,12(r16)
   19518:	18fbffcc 	andi	r3,r3,61439
   1951c:	80c0030d 	sth	r3,12(r16)
   19520:	dfc00117 	ldw	ra,4(sp)
   19524:	dc000017 	ldw	r16,0(sp)
   19528:	dec00204 	addi	sp,sp,8
   1952c:	f800283a 	ret

00019530 <__sclose>:
   19530:	2940038f 	ldh	r5,14(r5)
   19534:	001c3581 	jmpi	1c358 <_close_r>

00019538 <__ssprint_r>:
   19538:	30800217 	ldw	r2,8(r6)
   1953c:	defff604 	addi	sp,sp,-40
   19540:	dc800215 	stw	r18,8(sp)
   19544:	dfc00915 	stw	ra,36(sp)
   19548:	df000815 	stw	fp,32(sp)
   1954c:	ddc00715 	stw	r23,28(sp)
   19550:	dd800615 	stw	r22,24(sp)
   19554:	dd400515 	stw	r21,20(sp)
   19558:	dd000415 	stw	r20,16(sp)
   1955c:	dcc00315 	stw	r19,12(sp)
   19560:	dc400115 	stw	r17,4(sp)
   19564:	dc000015 	stw	r16,0(sp)
   19568:	3025883a 	mov	r18,r6
   1956c:	10005826 	beq	r2,zero,196d0 <__ssprint_r+0x198>
   19570:	2027883a 	mov	r19,r4
   19574:	35c00017 	ldw	r23,0(r6)
   19578:	29000017 	ldw	r4,0(r5)
   1957c:	28800217 	ldw	r2,8(r5)
   19580:	2823883a 	mov	r17,r5
   19584:	0039883a 	mov	fp,zero
   19588:	0021883a 	mov	r16,zero
   1958c:	80003926 	beq	r16,zero,19674 <__ssprint_r+0x13c>
   19590:	102b883a 	mov	r21,r2
   19594:	102d883a 	mov	r22,r2
   19598:	80803a36 	bltu	r16,r2,19684 <__ssprint_r+0x14c>
   1959c:	88c0030b 	ldhu	r3,12(r17)
   195a0:	1881200c 	andi	r2,r3,1152
   195a4:	10002626 	beq	r2,zero,19640 <__ssprint_r+0x108>
   195a8:	88800517 	ldw	r2,20(r17)
   195ac:	89400417 	ldw	r5,16(r17)
   195b0:	81800044 	addi	r6,r16,1
   195b4:	108f883a 	add	r7,r2,r2
   195b8:	3885883a 	add	r2,r7,r2
   195bc:	100ed7fa 	srli	r7,r2,31
   195c0:	216dc83a 	sub	r22,r4,r5
   195c4:	3589883a 	add	r4,r6,r22
   195c8:	3885883a 	add	r2,r7,r2
   195cc:	102bd07a 	srai	r21,r2,1
   195d0:	a80d883a 	mov	r6,r21
   195d4:	a900022e 	bgeu	r21,r4,195e0 <__ssprint_r+0xa8>
   195d8:	202b883a 	mov	r21,r4
   195dc:	200d883a 	mov	r6,r4
   195e0:	18c1000c 	andi	r3,r3,1024
   195e4:	18002a26 	beq	r3,zero,19690 <__ssprint_r+0x158>
   195e8:	300b883a 	mov	r5,r6
   195ec:	9809883a 	mov	r4,r19
   195f0:	000f4680 	call	f468 <_malloc_r>
   195f4:	1029883a 	mov	r20,r2
   195f8:	10002c26 	beq	r2,zero,196ac <__ssprint_r+0x174>
   195fc:	89400417 	ldw	r5,16(r17)
   19600:	b00d883a 	mov	r6,r22
   19604:	1009883a 	mov	r4,r2
   19608:	000fc740 	call	fc74 <memcpy>
   1960c:	8880030b 	ldhu	r2,12(r17)
   19610:	00fedfc4 	movi	r3,-1153
   19614:	10c4703a 	and	r2,r2,r3
   19618:	10802014 	ori	r2,r2,128
   1961c:	8880030d 	sth	r2,12(r17)
   19620:	a589883a 	add	r4,r20,r22
   19624:	adadc83a 	sub	r22,r21,r22
   19628:	8d400515 	stw	r21,20(r17)
   1962c:	8d800215 	stw	r22,8(r17)
   19630:	8d000415 	stw	r20,16(r17)
   19634:	89000015 	stw	r4,0(r17)
   19638:	802b883a 	mov	r21,r16
   1963c:	802d883a 	mov	r22,r16
   19640:	b00d883a 	mov	r6,r22
   19644:	e00b883a 	mov	r5,fp
   19648:	0017aa80 	call	17aa8 <memmove>
   1964c:	88800217 	ldw	r2,8(r17)
   19650:	89000017 	ldw	r4,0(r17)
   19654:	90c00217 	ldw	r3,8(r18)
   19658:	1545c83a 	sub	r2,r2,r21
   1965c:	2589883a 	add	r4,r4,r22
   19660:	88800215 	stw	r2,8(r17)
   19664:	89000015 	stw	r4,0(r17)
   19668:	1c21c83a 	sub	r16,r3,r16
   1966c:	94000215 	stw	r16,8(r18)
   19670:	80001726 	beq	r16,zero,196d0 <__ssprint_r+0x198>
   19674:	bf000017 	ldw	fp,0(r23)
   19678:	bc000117 	ldw	r16,4(r23)
   1967c:	bdc00204 	addi	r23,r23,8
   19680:	003fc206 	br	1958c <__alt_data_end+0xfc01958c>
   19684:	802b883a 	mov	r21,r16
   19688:	802d883a 	mov	r22,r16
   1968c:	003fec06 	br	19640 <__alt_data_end+0xfc019640>
   19690:	9809883a 	mov	r4,r19
   19694:	0018e240 	call	18e24 <_realloc_r>
   19698:	1029883a 	mov	r20,r2
   1969c:	103fe01e 	bne	r2,zero,19620 <__alt_data_end+0xfc019620>
   196a0:	89400417 	ldw	r5,16(r17)
   196a4:	9809883a 	mov	r4,r19
   196a8:	0016dcc0 	call	16dcc <_free_r>
   196ac:	88c0030b 	ldhu	r3,12(r17)
   196b0:	00800304 	movi	r2,12
   196b4:	98800015 	stw	r2,0(r19)
   196b8:	18c01014 	ori	r3,r3,64
   196bc:	88c0030d 	sth	r3,12(r17)
   196c0:	00bfffc4 	movi	r2,-1
   196c4:	90000215 	stw	zero,8(r18)
   196c8:	90000115 	stw	zero,4(r18)
   196cc:	00000206 	br	196d8 <__ssprint_r+0x1a0>
   196d0:	90000115 	stw	zero,4(r18)
   196d4:	0005883a 	mov	r2,zero
   196d8:	dfc00917 	ldw	ra,36(sp)
   196dc:	df000817 	ldw	fp,32(sp)
   196e0:	ddc00717 	ldw	r23,28(sp)
   196e4:	dd800617 	ldw	r22,24(sp)
   196e8:	dd400517 	ldw	r21,20(sp)
   196ec:	dd000417 	ldw	r20,16(sp)
   196f0:	dcc00317 	ldw	r19,12(sp)
   196f4:	dc800217 	ldw	r18,8(sp)
   196f8:	dc400117 	ldw	r17,4(sp)
   196fc:	dc000017 	ldw	r16,0(sp)
   19700:	dec00a04 	addi	sp,sp,40
   19704:	f800283a 	ret

00019708 <___svfiprintf_internal_r>:
   19708:	2880030b 	ldhu	r2,12(r5)
   1970c:	deffc804 	addi	sp,sp,-224
   19710:	dcc03115 	stw	r19,196(sp)
   19714:	dfc03715 	stw	ra,220(sp)
   19718:	df003615 	stw	fp,216(sp)
   1971c:	ddc03515 	stw	r23,212(sp)
   19720:	dd803415 	stw	r22,208(sp)
   19724:	dd403315 	stw	r21,204(sp)
   19728:	dd003215 	stw	r20,200(sp)
   1972c:	dc803015 	stw	r18,192(sp)
   19730:	dc402f15 	stw	r17,188(sp)
   19734:	dc002e15 	stw	r16,184(sp)
   19738:	d9402315 	stw	r5,140(sp)
   1973c:	d9002715 	stw	r4,156(sp)
   19740:	1080200c 	andi	r2,r2,128
   19744:	d9c02415 	stw	r7,144(sp)
   19748:	3027883a 	mov	r19,r6
   1974c:	10000226 	beq	r2,zero,19758 <___svfiprintf_internal_r+0x50>
   19750:	28800417 	ldw	r2,16(r5)
   19754:	10046d26 	beq	r2,zero,1a90c <___svfiprintf_internal_r+0x1204>
   19758:	d8801a04 	addi	r2,sp,104
   1975c:	d8c019c4 	addi	r3,sp,103
   19760:	058000f4 	movhi	r22,3
   19764:	10c9c83a 	sub	r4,r2,r3
   19768:	b5ae6504 	addi	r22,r22,-18028
   1976c:	d8801e15 	stw	r2,120(sp)
   19770:	d8c01f15 	stw	r3,124(sp)
   19774:	dec01a15 	stw	sp,104(sp)
   19778:	d8001c15 	stw	zero,112(sp)
   1977c:	d8001b15 	stw	zero,108(sp)
   19780:	d811883a 	mov	r8,sp
   19784:	d8002915 	stw	zero,164(sp)
   19788:	d8002615 	stw	zero,152(sp)
   1978c:	d9002c15 	stw	r4,176(sp)
   19790:	98800007 	ldb	r2,0(r19)
   19794:	10031426 	beq	r2,zero,1a3e8 <___svfiprintf_internal_r+0xce0>
   19798:	00c00944 	movi	r3,37
   1979c:	9825883a 	mov	r18,r19
   197a0:	10c0021e 	bne	r2,r3,197ac <___svfiprintf_internal_r+0xa4>
   197a4:	00001406 	br	197f8 <___svfiprintf_internal_r+0xf0>
   197a8:	10c00326 	beq	r2,r3,197b8 <___svfiprintf_internal_r+0xb0>
   197ac:	94800044 	addi	r18,r18,1
   197b0:	90800007 	ldb	r2,0(r18)
   197b4:	103ffc1e 	bne	r2,zero,197a8 <__alt_data_end+0xfc0197a8>
   197b8:	94e1c83a 	sub	r16,r18,r19
   197bc:	80000e26 	beq	r16,zero,197f8 <___svfiprintf_internal_r+0xf0>
   197c0:	d8c01c17 	ldw	r3,112(sp)
   197c4:	d8801b17 	ldw	r2,108(sp)
   197c8:	44c00015 	stw	r19,0(r8)
   197cc:	1c07883a 	add	r3,r3,r16
   197d0:	10800044 	addi	r2,r2,1
   197d4:	d8c01c15 	stw	r3,112(sp)
   197d8:	44000115 	stw	r16,4(r8)
   197dc:	d8801b15 	stw	r2,108(sp)
   197e0:	00c001c4 	movi	r3,7
   197e4:	18835c16 	blt	r3,r2,1a558 <___svfiprintf_internal_r+0xe50>
   197e8:	42000204 	addi	r8,r8,8
   197ec:	d9402617 	ldw	r5,152(sp)
   197f0:	2c0b883a 	add	r5,r5,r16
   197f4:	d9402615 	stw	r5,152(sp)
   197f8:	90800007 	ldb	r2,0(r18)
   197fc:	1002fc26 	beq	r2,zero,1a3f0 <___svfiprintf_internal_r+0xce8>
   19800:	0023883a 	mov	r17,zero
   19804:	00bfffc4 	movi	r2,-1
   19808:	0021883a 	mov	r16,zero
   1980c:	94c00044 	addi	r19,r18,1
   19810:	90c00047 	ldb	r3,1(r18)
   19814:	dc402105 	stb	r17,132(sp)
   19818:	d8001d85 	stb	zero,118(sp)
   1981c:	002b883a 	mov	r21,zero
   19820:	d8802015 	stw	r2,128(sp)
   19824:	d8002515 	stw	zero,148(sp)
   19828:	04801604 	movi	r18,88
   1982c:	05000244 	movi	r20,9
   19830:	402f883a 	mov	r23,r8
   19834:	8023883a 	mov	r17,r16
   19838:	9cc00044 	addi	r19,r19,1
   1983c:	18bff804 	addi	r2,r3,-32
   19840:	9081fb36 	bltu	r18,r2,1a030 <___svfiprintf_internal_r+0x928>
   19844:	100490ba 	slli	r2,r2,2
   19848:	010000b4 	movhi	r4,2
   1984c:	21261704 	addi	r4,r4,-26532
   19850:	1105883a 	add	r2,r2,r4
   19854:	10800017 	ldw	r2,0(r2)
   19858:	1000683a 	jmp	r2
   1985c:	00019a5c 	xori	zero,zero,1641
   19860:	0001a030 	cmpltui	zero,zero,1664
   19864:	0001a030 	cmpltui	zero,zero,1664
   19868:	00019a50 	cmplti	zero,zero,1641
   1986c:	0001a030 	cmpltui	zero,zero,1664
   19870:	0001a030 	cmpltui	zero,zero,1664
   19874:	0001a030 	cmpltui	zero,zero,1664
   19878:	0001a030 	cmpltui	zero,zero,1664
   1987c:	0001a030 	cmpltui	zero,zero,1664
   19880:	0001a030 	cmpltui	zero,zero,1664
   19884:	000199c0 	call	199c <_ZN3USB4TaskEv+0x180>
   19888:	00019bbc 	xorhi	zero,zero,1646
   1988c:	0001a030 	cmpltui	zero,zero,1664
   19890:	000199e8 	cmpgeui	zero,zero,1639
   19894:	0001a06c 	andhi	zero,zero,1665
   19898:	0001a030 	cmpltui	zero,zero,1664
   1989c:	0001a060 	cmpeqi	zero,zero,1665
   198a0:	00019ff4 	movhi	zero,1663
   198a4:	00019ff4 	movhi	zero,1663
   198a8:	00019ff4 	movhi	zero,1663
   198ac:	00019ff4 	movhi	zero,1663
   198b0:	00019ff4 	movhi	zero,1663
   198b4:	00019ff4 	movhi	zero,1663
   198b8:	00019ff4 	movhi	zero,1663
   198bc:	00019ff4 	movhi	zero,1663
   198c0:	00019ff4 	movhi	zero,1663
   198c4:	0001a030 	cmpltui	zero,zero,1664
   198c8:	0001a030 	cmpltui	zero,zero,1664
   198cc:	0001a030 	cmpltui	zero,zero,1664
   198d0:	0001a030 	cmpltui	zero,zero,1664
   198d4:	0001a030 	cmpltui	zero,zero,1664
   198d8:	0001a030 	cmpltui	zero,zero,1664
   198dc:	0001a030 	cmpltui	zero,zero,1664
   198e0:	0001a030 	cmpltui	zero,zero,1664
   198e4:	0001a030 	cmpltui	zero,zero,1664
   198e8:	0001a030 	cmpltui	zero,zero,1664
   198ec:	00019f78 	rdprs	zero,zero,1661
   198f0:	0001a030 	cmpltui	zero,zero,1664
   198f4:	0001a030 	cmpltui	zero,zero,1664
   198f8:	0001a030 	cmpltui	zero,zero,1664
   198fc:	0001a030 	cmpltui	zero,zero,1664
   19900:	0001a030 	cmpltui	zero,zero,1664
   19904:	0001a030 	cmpltui	zero,zero,1664
   19908:	0001a030 	cmpltui	zero,zero,1664
   1990c:	0001a030 	cmpltui	zero,zero,1664
   19910:	0001a030 	cmpltui	zero,zero,1664
   19914:	0001a030 	cmpltui	zero,zero,1664
   19918:	0001a128 	cmpgeui	zero,zero,1668
   1991c:	0001a030 	cmpltui	zero,zero,1664
   19920:	0001a030 	cmpltui	zero,zero,1664
   19924:	0001a030 	cmpltui	zero,zero,1664
   19928:	0001a030 	cmpltui	zero,zero,1664
   1992c:	0001a030 	cmpltui	zero,zero,1664
   19930:	0001a0b4 	movhi	zero,1666
   19934:	0001a030 	cmpltui	zero,zero,1664
   19938:	0001a030 	cmpltui	zero,zero,1664
   1993c:	00019db4 	movhi	zero,1654
   19940:	0001a030 	cmpltui	zero,zero,1664
   19944:	0001a030 	cmpltui	zero,zero,1664
   19948:	0001a030 	cmpltui	zero,zero,1664
   1994c:	0001a030 	cmpltui	zero,zero,1664
   19950:	0001a030 	cmpltui	zero,zero,1664
   19954:	0001a030 	cmpltui	zero,zero,1664
   19958:	0001a030 	cmpltui	zero,zero,1664
   1995c:	0001a030 	cmpltui	zero,zero,1664
   19960:	0001a030 	cmpltui	zero,zero,1664
   19964:	0001a030 	cmpltui	zero,zero,1664
   19968:	00019c80 	call	19c8 <_ZN3USB4TaskEv+0x1ac>
   1996c:	00019e64 	muli	zero,zero,1657
   19970:	0001a030 	cmpltui	zero,zero,1664
   19974:	0001a030 	cmpltui	zero,zero,1664
   19978:	0001a030 	cmpltui	zero,zero,1664
   1997c:	00019e58 	cmpnei	zero,zero,1657
   19980:	00019e64 	muli	zero,zero,1657
   19984:	0001a030 	cmpltui	zero,zero,1664
   19988:	0001a030 	cmpltui	zero,zero,1664
   1998c:	00019e44 	movi	zero,1657
   19990:	0001a030 	cmpltui	zero,zero,1664
   19994:	00019e04 	movi	zero,1656
   19998:	00019bd0 	cmplti	zero,zero,1647
   1999c:	000199f4 	movhi	zero,1639
   199a0:	00019f6c 	andhi	zero,zero,1661
   199a4:	0001a030 	cmpltui	zero,zero,1664
   199a8:	00019f18 	cmpnei	zero,zero,1660
   199ac:	0001a030 	cmpltui	zero,zero,1664
   199b0:	00019b34 	movhi	zero,1644
   199b4:	0001a030 	cmpltui	zero,zero,1664
   199b8:	0001a030 	cmpltui	zero,zero,1664
   199bc:	00019a80 	call	19a8 <_ZN3USB4TaskEv+0x18c>
   199c0:	d9002417 	ldw	r4,144(sp)
   199c4:	d9402417 	ldw	r5,144(sp)
   199c8:	21000017 	ldw	r4,0(r4)
   199cc:	28800104 	addi	r2,r5,4
   199d0:	d9002515 	stw	r4,148(sp)
   199d4:	20032b0e 	bge	r4,zero,1a684 <___svfiprintf_internal_r+0xf7c>
   199d8:	d8c02517 	ldw	r3,148(sp)
   199dc:	d8802415 	stw	r2,144(sp)
   199e0:	00c7c83a 	sub	r3,zero,r3
   199e4:	d8c02515 	stw	r3,148(sp)
   199e8:	8c400114 	ori	r17,r17,4
   199ec:	98c00007 	ldb	r3,0(r19)
   199f0:	003f9106 	br	19838 <__alt_data_end+0xfc019838>
   199f4:	00800c04 	movi	r2,48
   199f8:	d9402417 	ldw	r5,144(sp)
   199fc:	d9002017 	ldw	r4,128(sp)
   19a00:	d8801d05 	stb	r2,116(sp)
   19a04:	00801e04 	movi	r2,120
   19a08:	d8801d45 	stb	r2,117(sp)
   19a0c:	d8001d85 	stb	zero,118(sp)
   19a10:	b811883a 	mov	r8,r23
   19a14:	28c00104 	addi	r3,r5,4
   19a18:	2c800017 	ldw	r18,0(r5)
   19a1c:	0029883a 	mov	r20,zero
   19a20:	88800094 	ori	r2,r17,2
   19a24:	20036316 	blt	r4,zero,1a7b4 <___svfiprintf_internal_r+0x10ac>
   19a28:	00bfdfc4 	movi	r2,-129
   19a2c:	88a0703a 	and	r16,r17,r2
   19a30:	d8c02415 	stw	r3,144(sp)
   19a34:	84000094 	ori	r16,r16,2
   19a38:	90031c26 	beq	r18,zero,1a6ac <___svfiprintf_internal_r+0xfa4>
   19a3c:	014000f4 	movhi	r5,3
   19a40:	296dfd04 	addi	r5,r5,-18444
   19a44:	002b883a 	mov	r21,zero
   19a48:	d9402915 	stw	r5,164(sp)
   19a4c:	00002906 	br	19af4 <___svfiprintf_internal_r+0x3ec>
   19a50:	8c400054 	ori	r17,r17,1
   19a54:	98c00007 	ldb	r3,0(r19)
   19a58:	003f7706 	br	19838 <__alt_data_end+0xfc019838>
   19a5c:	a8803fcc 	andi	r2,r21,255
   19a60:	1080201c 	xori	r2,r2,128
   19a64:	10bfe004 	addi	r2,r2,-128
   19a68:	10032a1e 	bne	r2,zero,1a714 <___svfiprintf_internal_r+0x100c>
   19a6c:	00c00044 	movi	r3,1
   19a70:	d8c02105 	stb	r3,132(sp)
   19a74:	05400804 	movi	r21,32
   19a78:	98c00007 	ldb	r3,0(r19)
   19a7c:	003f6e06 	br	19838 <__alt_data_end+0xfc019838>
   19a80:	8821883a 	mov	r16,r17
   19a84:	dc402103 	ldbu	r17,132(sp)
   19a88:	b811883a 	mov	r8,r23
   19a8c:	8c403fcc 	andi	r17,r17,255
   19a90:	8803f01e 	bne	r17,zero,1aa54 <___svfiprintf_internal_r+0x134c>
   19a94:	008000f4 	movhi	r2,3
   19a98:	10adfd04 	addi	r2,r2,-18444
   19a9c:	d8802915 	stw	r2,164(sp)
   19aa0:	8080080c 	andi	r2,r16,32
   19aa4:	1000cd26 	beq	r2,zero,19ddc <___svfiprintf_internal_r+0x6d4>
   19aa8:	d9002417 	ldw	r4,144(sp)
   19aac:	24800017 	ldw	r18,0(r4)
   19ab0:	25000117 	ldw	r20,4(r4)
   19ab4:	21000204 	addi	r4,r4,8
   19ab8:	d9002415 	stw	r4,144(sp)
   19abc:	8080004c 	andi	r2,r16,1
   19ac0:	1002c726 	beq	r2,zero,1a5e0 <___svfiprintf_internal_r+0xed8>
   19ac4:	9504b03a 	or	r2,r18,r20
   19ac8:	1003061e 	bne	r2,zero,1a6e4 <___svfiprintf_internal_r+0xfdc>
   19acc:	d9002017 	ldw	r4,128(sp)
   19ad0:	d8001d85 	stb	zero,118(sp)
   19ad4:	20033e16 	blt	r4,zero,1a7d0 <___svfiprintf_internal_r+0x10c8>
   19ad8:	00bfdfc4 	movi	r2,-129
   19adc:	80a0703a 	and	r16,r16,r2
   19ae0:	d9402017 	ldw	r5,128(sp)
   19ae4:	002b883a 	mov	r21,zero
   19ae8:	28002826 	beq	r5,zero,19b8c <___svfiprintf_internal_r+0x484>
   19aec:	0025883a 	mov	r18,zero
   19af0:	0029883a 	mov	r20,zero
   19af4:	d9002917 	ldw	r4,164(sp)
   19af8:	dc401a04 	addi	r17,sp,104
   19afc:	908003cc 	andi	r2,r18,15
   19b00:	a006973a 	slli	r3,r20,28
   19b04:	2085883a 	add	r2,r4,r2
   19b08:	9024d13a 	srli	r18,r18,4
   19b0c:	10800003 	ldbu	r2,0(r2)
   19b10:	a028d13a 	srli	r20,r20,4
   19b14:	8c7fffc4 	addi	r17,r17,-1
   19b18:	1ca4b03a 	or	r18,r3,r18
   19b1c:	88800005 	stb	r2,0(r17)
   19b20:	9504b03a 	or	r2,r18,r20
   19b24:	103ff51e 	bne	r2,zero,19afc <__alt_data_end+0xfc019afc>
   19b28:	d8801e17 	ldw	r2,120(sp)
   19b2c:	1469c83a 	sub	r20,r2,r17
   19b30:	00001906 	br	19b98 <___svfiprintf_internal_r+0x490>
   19b34:	8821883a 	mov	r16,r17
   19b38:	dc402103 	ldbu	r17,132(sp)
   19b3c:	b811883a 	mov	r8,r23
   19b40:	8c403fcc 	andi	r17,r17,255
   19b44:	8803d01e 	bne	r17,zero,1aa88 <___svfiprintf_internal_r+0x1380>
   19b48:	8080080c 	andi	r2,r16,32
   19b4c:	10016126 	beq	r2,zero,1a0d4 <___svfiprintf_internal_r+0x9cc>
   19b50:	d9002417 	ldw	r4,144(sp)
   19b54:	d9402017 	ldw	r5,128(sp)
   19b58:	d8001d85 	stb	zero,118(sp)
   19b5c:	20c00204 	addi	r3,r4,8
   19b60:	24800017 	ldw	r18,0(r4)
   19b64:	25000117 	ldw	r20,4(r4)
   19b68:	28030f16 	blt	r5,zero,1a7a8 <___svfiprintf_internal_r+0x10a0>
   19b6c:	013fdfc4 	movi	r4,-129
   19b70:	9504b03a 	or	r2,r18,r20
   19b74:	d8c02415 	stw	r3,144(sp)
   19b78:	8120703a 	and	r16,r16,r4
   19b7c:	002b883a 	mov	r21,zero
   19b80:	1000cd1e 	bne	r2,zero,19eb8 <___svfiprintf_internal_r+0x7b0>
   19b84:	d8c02017 	ldw	r3,128(sp)
   19b88:	1803141e 	bne	r3,zero,1a7dc <___svfiprintf_internal_r+0x10d4>
   19b8c:	d8002015 	stw	zero,128(sp)
   19b90:	0029883a 	mov	r20,zero
   19b94:	dc401a04 	addi	r17,sp,104
   19b98:	dc802017 	ldw	r18,128(sp)
   19b9c:	9500010e 	bge	r18,r20,19ba4 <___svfiprintf_internal_r+0x49c>
   19ba0:	a025883a 	mov	r18,r20
   19ba4:	ad403fcc 	andi	r21,r21,255
   19ba8:	ad40201c 	xori	r21,r21,128
   19bac:	ad7fe004 	addi	r21,r21,-128
   19bb0:	a8003f26 	beq	r21,zero,19cb0 <___svfiprintf_internal_r+0x5a8>
   19bb4:	94800044 	addi	r18,r18,1
   19bb8:	00003d06 	br	19cb0 <___svfiprintf_internal_r+0x5a8>
   19bbc:	00c00044 	movi	r3,1
   19bc0:	d8c02105 	stb	r3,132(sp)
   19bc4:	05400ac4 	movi	r21,43
   19bc8:	98c00007 	ldb	r3,0(r19)
   19bcc:	003f1a06 	br	19838 <__alt_data_end+0xfc019838>
   19bd0:	8821883a 	mov	r16,r17
   19bd4:	dc402103 	ldbu	r17,132(sp)
   19bd8:	b811883a 	mov	r8,r23
   19bdc:	8c403fcc 	andi	r17,r17,255
   19be0:	8803a71e 	bne	r17,zero,1aa80 <___svfiprintf_internal_r+0x1378>
   19be4:	8080080c 	andi	r2,r16,32
   19be8:	10015726 	beq	r2,zero,1a148 <___svfiprintf_internal_r+0xa40>
   19bec:	d8c02417 	ldw	r3,144(sp)
   19bf0:	d9002017 	ldw	r4,128(sp)
   19bf4:	d8001d85 	stb	zero,118(sp)
   19bf8:	18800204 	addi	r2,r3,8
   19bfc:	1c800017 	ldw	r18,0(r3)
   19c00:	1d000117 	ldw	r20,4(r3)
   19c04:	2002db16 	blt	r4,zero,1a774 <___svfiprintf_internal_r+0x106c>
   19c08:	013fdfc4 	movi	r4,-129
   19c0c:	9506b03a 	or	r3,r18,r20
   19c10:	d8802415 	stw	r2,144(sp)
   19c14:	8120703a 	and	r16,r16,r4
   19c18:	18015826 	beq	r3,zero,1a17c <___svfiprintf_internal_r+0xa74>
   19c1c:	002b883a 	mov	r21,zero
   19c20:	dc401a04 	addi	r17,sp,104
   19c24:	9006d0fa 	srli	r3,r18,3
   19c28:	a008977a 	slli	r4,r20,29
   19c2c:	a028d0fa 	srli	r20,r20,3
   19c30:	948001cc 	andi	r18,r18,7
   19c34:	90800c04 	addi	r2,r18,48
   19c38:	8c7fffc4 	addi	r17,r17,-1
   19c3c:	20e4b03a 	or	r18,r4,r3
   19c40:	88800005 	stb	r2,0(r17)
   19c44:	9506b03a 	or	r3,r18,r20
   19c48:	183ff61e 	bne	r3,zero,19c24 <__alt_data_end+0xfc019c24>
   19c4c:	80c0004c 	andi	r3,r16,1
   19c50:	18028926 	beq	r3,zero,1a678 <___svfiprintf_internal_r+0xf70>
   19c54:	10803fcc 	andi	r2,r2,255
   19c58:	1080201c 	xori	r2,r2,128
   19c5c:	10bfe004 	addi	r2,r2,-128
   19c60:	00c00c04 	movi	r3,48
   19c64:	10ffb026 	beq	r2,r3,19b28 <__alt_data_end+0xfc019b28>
   19c68:	88ffffc5 	stb	r3,-1(r17)
   19c6c:	d8c01e17 	ldw	r3,120(sp)
   19c70:	88bfffc4 	addi	r2,r17,-1
   19c74:	1023883a 	mov	r17,r2
   19c78:	18a9c83a 	sub	r20,r3,r2
   19c7c:	003fc606 	br	19b98 <__alt_data_end+0xfc019b98>
   19c80:	d8c02417 	ldw	r3,144(sp)
   19c84:	04800044 	movi	r18,1
   19c88:	8821883a 	mov	r16,r17
   19c8c:	18800017 	ldw	r2,0(r3)
   19c90:	18c00104 	addi	r3,r3,4
   19c94:	b811883a 	mov	r8,r23
   19c98:	d8001d85 	stb	zero,118(sp)
   19c9c:	d8801005 	stb	r2,64(sp)
   19ca0:	d8c02415 	stw	r3,144(sp)
   19ca4:	9029883a 	mov	r20,r18
   19ca8:	dc401004 	addi	r17,sp,64
   19cac:	d8002015 	stw	zero,128(sp)
   19cb0:	80c0008c 	andi	r3,r16,2
   19cb4:	d8c02115 	stw	r3,132(sp)
   19cb8:	18000126 	beq	r3,zero,19cc0 <___svfiprintf_internal_r+0x5b8>
   19cbc:	94800084 	addi	r18,r18,2
   19cc0:	80c0210c 	andi	r3,r16,132
   19cc4:	d8c02215 	stw	r3,136(sp)
   19cc8:	1801321e 	bne	r3,zero,1a194 <___svfiprintf_internal_r+0xa8c>
   19ccc:	d9002517 	ldw	r4,148(sp)
   19cd0:	24b9c83a 	sub	fp,r4,r18
   19cd4:	07012f0e 	bge	zero,fp,1a194 <___svfiprintf_internal_r+0xa8c>
   19cd8:	02400404 	movi	r9,16
   19cdc:	d8c01c17 	ldw	r3,112(sp)
   19ce0:	d8801b17 	ldw	r2,108(sp)
   19ce4:	4f03250e 	bge	r9,fp,1a97c <___svfiprintf_internal_r+0x1274>
   19ce8:	010000f4 	movhi	r4,3
   19cec:	212e6904 	addi	r4,r4,-18012
   19cf0:	dc002a15 	stw	r16,168(sp)
   19cf4:	dc402b15 	stw	r17,172(sp)
   19cf8:	d9002815 	stw	r4,160(sp)
   19cfc:	e023883a 	mov	r17,fp
   19d00:	482f883a 	mov	r23,r9
   19d04:	9839883a 	mov	fp,r19
   19d08:	054001c4 	movi	r21,7
   19d0c:	9027883a 	mov	r19,r18
   19d10:	dc002717 	ldw	r16,156(sp)
   19d14:	dc802317 	ldw	r18,140(sp)
   19d18:	00000306 	br	19d28 <___svfiprintf_internal_r+0x620>
   19d1c:	8c7ffc04 	addi	r17,r17,-16
   19d20:	42000204 	addi	r8,r8,8
   19d24:	bc40130e 	bge	r23,r17,19d74 <___svfiprintf_internal_r+0x66c>
   19d28:	014000f4 	movhi	r5,3
   19d2c:	18c00404 	addi	r3,r3,16
   19d30:	10800044 	addi	r2,r2,1
   19d34:	296e6904 	addi	r5,r5,-18012
   19d38:	41400015 	stw	r5,0(r8)
   19d3c:	45c00115 	stw	r23,4(r8)
   19d40:	d8c01c15 	stw	r3,112(sp)
   19d44:	d8801b15 	stw	r2,108(sp)
   19d48:	a8bff40e 	bge	r21,r2,19d1c <__alt_data_end+0xfc019d1c>
   19d4c:	d9801a04 	addi	r6,sp,104
   19d50:	900b883a 	mov	r5,r18
   19d54:	8009883a 	mov	r4,r16
   19d58:	00195380 	call	19538 <__ssprint_r>
   19d5c:	1001aa1e 	bne	r2,zero,1a408 <___svfiprintf_internal_r+0xd00>
   19d60:	8c7ffc04 	addi	r17,r17,-16
   19d64:	d8c01c17 	ldw	r3,112(sp)
   19d68:	d8801b17 	ldw	r2,108(sp)
   19d6c:	d811883a 	mov	r8,sp
   19d70:	bc7fed16 	blt	r23,r17,19d28 <__alt_data_end+0xfc019d28>
   19d74:	9825883a 	mov	r18,r19
   19d78:	dc002a17 	ldw	r16,168(sp)
   19d7c:	e027883a 	mov	r19,fp
   19d80:	8839883a 	mov	fp,r17
   19d84:	dc402b17 	ldw	r17,172(sp)
   19d88:	d9002817 	ldw	r4,160(sp)
   19d8c:	e0c7883a 	add	r3,fp,r3
   19d90:	10800044 	addi	r2,r2,1
   19d94:	41000015 	stw	r4,0(r8)
   19d98:	47000115 	stw	fp,4(r8)
   19d9c:	d8c01c15 	stw	r3,112(sp)
   19da0:	d8801b15 	stw	r2,108(sp)
   19da4:	010001c4 	movi	r4,7
   19da8:	20821616 	blt	r4,r2,1a604 <___svfiprintf_internal_r+0xefc>
   19dac:	42000204 	addi	r8,r8,8
   19db0:	0000fa06 	br	1a19c <___svfiprintf_internal_r+0xa94>
   19db4:	8821883a 	mov	r16,r17
   19db8:	dc402103 	ldbu	r17,132(sp)
   19dbc:	b811883a 	mov	r8,r23
   19dc0:	8c403fcc 	andi	r17,r17,255
   19dc4:	8803361e 	bne	r17,zero,1aaa0 <___svfiprintf_internal_r+0x1398>
   19dc8:	014000f4 	movhi	r5,3
   19dcc:	296df804 	addi	r5,r5,-18464
   19dd0:	d9402915 	stw	r5,164(sp)
   19dd4:	8080080c 	andi	r2,r16,32
   19dd8:	103f331e 	bne	r2,zero,19aa8 <__alt_data_end+0xfc019aa8>
   19ddc:	8080040c 	andi	r2,r16,16
   19de0:	1002551e 	bne	r2,zero,1a738 <___svfiprintf_internal_r+0x1030>
   19de4:	8080100c 	andi	r2,r16,64
   19de8:	1002a626 	beq	r2,zero,1a884 <___svfiprintf_internal_r+0x117c>
   19dec:	d8802417 	ldw	r2,144(sp)
   19df0:	0029883a 	mov	r20,zero
   19df4:	1480000b 	ldhu	r18,0(r2)
   19df8:	10800104 	addi	r2,r2,4
   19dfc:	d8802415 	stw	r2,144(sp)
   19e00:	003f2e06 	br	19abc <__alt_data_end+0xfc019abc>
   19e04:	8821883a 	mov	r16,r17
   19e08:	dc402103 	ldbu	r17,132(sp)
   19e0c:	b811883a 	mov	r8,r23
   19e10:	8c403fcc 	andi	r17,r17,255
   19e14:	88030b1e 	bne	r17,zero,1aa44 <___svfiprintf_internal_r+0x133c>
   19e18:	8080080c 	andi	r2,r16,32
   19e1c:	1002271e 	bne	r2,zero,1a6bc <___svfiprintf_internal_r+0xfb4>
   19e20:	8080040c 	andi	r2,r16,16
   19e24:	10028e26 	beq	r2,zero,1a860 <___svfiprintf_internal_r+0x1158>
   19e28:	d8c02417 	ldw	r3,144(sp)
   19e2c:	d9002617 	ldw	r4,152(sp)
   19e30:	18800017 	ldw	r2,0(r3)
   19e34:	18c00104 	addi	r3,r3,4
   19e38:	d8c02415 	stw	r3,144(sp)
   19e3c:	11000015 	stw	r4,0(r2)
   19e40:	003e5306 	br	19790 <__alt_data_end+0xfc019790>
   19e44:	98c00007 	ldb	r3,0(r19)
   19e48:	01401b04 	movi	r5,108
   19e4c:	19424f26 	beq	r3,r5,1a78c <___svfiprintf_internal_r+0x1084>
   19e50:	8c400414 	ori	r17,r17,16
   19e54:	003e7806 	br	19838 <__alt_data_end+0xfc019838>
   19e58:	8c401014 	ori	r17,r17,64
   19e5c:	98c00007 	ldb	r3,0(r19)
   19e60:	003e7506 	br	19838 <__alt_data_end+0xfc019838>
   19e64:	8821883a 	mov	r16,r17
   19e68:	dc402103 	ldbu	r17,132(sp)
   19e6c:	b811883a 	mov	r8,r23
   19e70:	8c403fcc 	andi	r17,r17,255
   19e74:	8802fe1e 	bne	r17,zero,1aa70 <___svfiprintf_internal_r+0x1368>
   19e78:	8080080c 	andi	r2,r16,32
   19e7c:	10004626 	beq	r2,zero,19f98 <___svfiprintf_internal_r+0x890>
   19e80:	d9002417 	ldw	r4,144(sp)
   19e84:	20800117 	ldw	r2,4(r4)
   19e88:	24800017 	ldw	r18,0(r4)
   19e8c:	21000204 	addi	r4,r4,8
   19e90:	d9002415 	stw	r4,144(sp)
   19e94:	1029883a 	mov	r20,r2
   19e98:	10004a16 	blt	r2,zero,19fc4 <___svfiprintf_internal_r+0x8bc>
   19e9c:	d9002017 	ldw	r4,128(sp)
   19ea0:	dd401d83 	ldbu	r21,118(sp)
   19ea4:	2001eb16 	blt	r4,zero,1a654 <___svfiprintf_internal_r+0xf4c>
   19ea8:	00ffdfc4 	movi	r3,-129
   19eac:	9504b03a 	or	r2,r18,r20
   19eb0:	80e0703a 	and	r16,r16,r3
   19eb4:	103f3326 	beq	r2,zero,19b84 <__alt_data_end+0xfc019b84>
   19eb8:	a0009426 	beq	r20,zero,1a10c <___svfiprintf_internal_r+0xa04>
   19ebc:	dc401a04 	addi	r17,sp,104
   19ec0:	402f883a 	mov	r23,r8
   19ec4:	9009883a 	mov	r4,r18
   19ec8:	a00b883a 	mov	r5,r20
   19ecc:	01800284 	movi	r6,10
   19ed0:	000f883a 	mov	r7,zero
   19ed4:	001d0e80 	call	1d0e8 <__umoddi3>
   19ed8:	10800c04 	addi	r2,r2,48
   19edc:	8c7fffc4 	addi	r17,r17,-1
   19ee0:	9009883a 	mov	r4,r18
   19ee4:	a00b883a 	mov	r5,r20
   19ee8:	88800005 	stb	r2,0(r17)
   19eec:	01800284 	movi	r6,10
   19ef0:	000f883a 	mov	r7,zero
   19ef4:	001caec0 	call	1caec <__udivdi3>
   19ef8:	1025883a 	mov	r18,r2
   19efc:	10c4b03a 	or	r2,r2,r3
   19f00:	1829883a 	mov	r20,r3
   19f04:	103fef1e 	bne	r2,zero,19ec4 <__alt_data_end+0xfc019ec4>
   19f08:	d9001e17 	ldw	r4,120(sp)
   19f0c:	b811883a 	mov	r8,r23
   19f10:	2469c83a 	sub	r20,r4,r17
   19f14:	003f2006 	br	19b98 <__alt_data_end+0xfc019b98>
   19f18:	d8802417 	ldw	r2,144(sp)
   19f1c:	8821883a 	mov	r16,r17
   19f20:	d8001d85 	stb	zero,118(sp)
   19f24:	14400017 	ldw	r17,0(r2)
   19f28:	b811883a 	mov	r8,r23
   19f2c:	15c00104 	addi	r23,r2,4
   19f30:	88026c26 	beq	r17,zero,1a8e4 <___svfiprintf_internal_r+0x11dc>
   19f34:	d8c02017 	ldw	r3,128(sp)
   19f38:	18025f16 	blt	r3,zero,1a8b8 <___svfiprintf_internal_r+0x11b0>
   19f3c:	180d883a 	mov	r6,r3
   19f40:	000b883a 	mov	r5,zero
   19f44:	8809883a 	mov	r4,r17
   19f48:	da002d15 	stw	r8,180(sp)
   19f4c:	00179c40 	call	179c4 <memchr>
   19f50:	da002d17 	ldw	r8,180(sp)
   19f54:	1002a526 	beq	r2,zero,1a9ec <___svfiprintf_internal_r+0x12e4>
   19f58:	1469c83a 	sub	r20,r2,r17
   19f5c:	dd401d83 	ldbu	r21,118(sp)
   19f60:	ddc02415 	stw	r23,144(sp)
   19f64:	d8002015 	stw	zero,128(sp)
   19f68:	003f0b06 	br	19b98 <__alt_data_end+0xfc019b98>
   19f6c:	8c400814 	ori	r17,r17,32
   19f70:	98c00007 	ldb	r3,0(r19)
   19f74:	003e3006 	br	19838 <__alt_data_end+0xfc019838>
   19f78:	8821883a 	mov	r16,r17
   19f7c:	dc402103 	ldbu	r17,132(sp)
   19f80:	b811883a 	mov	r8,r23
   19f84:	8c403fcc 	andi	r17,r17,255
   19f88:	8802b01e 	bne	r17,zero,1aa4c <___svfiprintf_internal_r+0x1344>
   19f8c:	84000414 	ori	r16,r16,16
   19f90:	8080080c 	andi	r2,r16,32
   19f94:	103fba1e 	bne	r2,zero,19e80 <__alt_data_end+0xfc019e80>
   19f98:	8080040c 	andi	r2,r16,16
   19f9c:	1001df1e 	bne	r2,zero,1a71c <___svfiprintf_internal_r+0x1014>
   19fa0:	8080100c 	andi	r2,r16,64
   19fa4:	10023d26 	beq	r2,zero,1a89c <___svfiprintf_internal_r+0x1194>
   19fa8:	d8802417 	ldw	r2,144(sp)
   19fac:	1480000f 	ldh	r18,0(r2)
   19fb0:	10800104 	addi	r2,r2,4
   19fb4:	d8802415 	stw	r2,144(sp)
   19fb8:	9029d7fa 	srai	r20,r18,31
   19fbc:	a005883a 	mov	r2,r20
   19fc0:	103fb60e 	bge	r2,zero,19e9c <__alt_data_end+0xfc019e9c>
   19fc4:	d9402017 	ldw	r5,128(sp)
   19fc8:	04a5c83a 	sub	r18,zero,r18
   19fcc:	05400b44 	movi	r21,45
   19fd0:	9004c03a 	cmpne	r2,r18,zero
   19fd4:	0529c83a 	sub	r20,zero,r20
   19fd8:	dd401d85 	stb	r21,118(sp)
   19fdc:	a0a9c83a 	sub	r20,r20,r2
   19fe0:	28026c16 	blt	r5,zero,1a994 <___svfiprintf_internal_r+0x128c>
   19fe4:	00bfdfc4 	movi	r2,-129
   19fe8:	80a0703a 	and	r16,r16,r2
   19fec:	a03fb31e 	bne	r20,zero,19ebc <__alt_data_end+0xfc019ebc>
   19ff0:	00004606 	br	1a10c <___svfiprintf_internal_r+0xa04>
   19ff4:	9839883a 	mov	fp,r19
   19ff8:	d8002515 	stw	zero,148(sp)
   19ffc:	1c3ff404 	addi	r16,r3,-48
   1a000:	0009883a 	mov	r4,zero
   1a004:	01400284 	movi	r5,10
   1a008:	000d8d40 	call	d8d4 <__mulsi3>
   1a00c:	e0c00007 	ldb	r3,0(fp)
   1a010:	8089883a 	add	r4,r16,r2
   1a014:	9cc00044 	addi	r19,r19,1
   1a018:	1c3ff404 	addi	r16,r3,-48
   1a01c:	9839883a 	mov	fp,r19
   1a020:	a43ff82e 	bgeu	r20,r16,1a004 <__alt_data_end+0xfc01a004>
   1a024:	d9002515 	stw	r4,148(sp)
   1a028:	18bff804 	addi	r2,r3,-32
   1a02c:	90be052e 	bgeu	r18,r2,19844 <__alt_data_end+0xfc019844>
   1a030:	8821883a 	mov	r16,r17
   1a034:	dc402103 	ldbu	r17,132(sp)
   1a038:	b811883a 	mov	r8,r23
   1a03c:	8c403fcc 	andi	r17,r17,255
   1a040:	88028d1e 	bne	r17,zero,1aa78 <___svfiprintf_internal_r+0x1370>
   1a044:	1800ea26 	beq	r3,zero,1a3f0 <___svfiprintf_internal_r+0xce8>
   1a048:	04800044 	movi	r18,1
   1a04c:	d8c01005 	stb	r3,64(sp)
   1a050:	d8001d85 	stb	zero,118(sp)
   1a054:	9029883a 	mov	r20,r18
   1a058:	dc401004 	addi	r17,sp,64
   1a05c:	003f1306 	br	19cac <__alt_data_end+0xfc019cac>
   1a060:	8c402014 	ori	r17,r17,128
   1a064:	98c00007 	ldb	r3,0(r19)
   1a068:	003df306 	br	19838 <__alt_data_end+0xfc019838>
   1a06c:	98c00007 	ldb	r3,0(r19)
   1a070:	01000a84 	movi	r4,42
   1a074:	9f000044 	addi	fp,r19,1
   1a078:	19026326 	beq	r3,r4,1aa08 <___svfiprintf_internal_r+0x1300>
   1a07c:	1c3ff404 	addi	r16,r3,-48
   1a080:	0009883a 	mov	r4,zero
   1a084:	a4025636 	bltu	r20,r16,1a9e0 <___svfiprintf_internal_r+0x12d8>
   1a088:	01400284 	movi	r5,10
   1a08c:	000d8d40 	call	d8d4 <__mulsi3>
   1a090:	e0c00007 	ldb	r3,0(fp)
   1a094:	1409883a 	add	r4,r2,r16
   1a098:	e4c00044 	addi	r19,fp,1
   1a09c:	1c3ff404 	addi	r16,r3,-48
   1a0a0:	9839883a 	mov	fp,r19
   1a0a4:	a43ff82e 	bgeu	r20,r16,1a088 <__alt_data_end+0xfc01a088>
   1a0a8:	20020c16 	blt	r4,zero,1a8dc <___svfiprintf_internal_r+0x11d4>
   1a0ac:	d9002015 	stw	r4,128(sp)
   1a0b0:	003de206 	br	1983c <__alt_data_end+0xfc01983c>
   1a0b4:	8821883a 	mov	r16,r17
   1a0b8:	dc402103 	ldbu	r17,132(sp)
   1a0bc:	b811883a 	mov	r8,r23
   1a0c0:	8c403fcc 	andi	r17,r17,255
   1a0c4:	8802721e 	bne	r17,zero,1aa90 <___svfiprintf_internal_r+0x1388>
   1a0c8:	84000414 	ori	r16,r16,16
   1a0cc:	8080080c 	andi	r2,r16,32
   1a0d0:	103e9f1e 	bne	r2,zero,19b50 <__alt_data_end+0xfc019b50>
   1a0d4:	8080040c 	andi	r2,r16,16
   1a0d8:	10015326 	beq	r2,zero,1a628 <___svfiprintf_internal_r+0xf20>
   1a0dc:	d8c02417 	ldw	r3,144(sp)
   1a0e0:	d9002017 	ldw	r4,128(sp)
   1a0e4:	d8001d85 	stb	zero,118(sp)
   1a0e8:	18800104 	addi	r2,r3,4
   1a0ec:	1c800017 	ldw	r18,0(r3)
   1a0f0:	0029883a 	mov	r20,zero
   1a0f4:	20015516 	blt	r4,zero,1a64c <___svfiprintf_internal_r+0xf44>
   1a0f8:	00ffdfc4 	movi	r3,-129
   1a0fc:	d8802415 	stw	r2,144(sp)
   1a100:	80e0703a 	and	r16,r16,r3
   1a104:	002b883a 	mov	r21,zero
   1a108:	903e9e26 	beq	r18,zero,19b84 <__alt_data_end+0xfc019b84>
   1a10c:	00800244 	movi	r2,9
   1a110:	14bf6a36 	bltu	r2,r18,19ebc <__alt_data_end+0xfc019ebc>
   1a114:	94800c04 	addi	r18,r18,48
   1a118:	dc8019c5 	stb	r18,103(sp)
   1a11c:	dd002c17 	ldw	r20,176(sp)
   1a120:	dc4019c4 	addi	r17,sp,103
   1a124:	003e9c06 	br	19b98 <__alt_data_end+0xfc019b98>
   1a128:	8821883a 	mov	r16,r17
   1a12c:	dc402103 	ldbu	r17,132(sp)
   1a130:	b811883a 	mov	r8,r23
   1a134:	8c403fcc 	andi	r17,r17,255
   1a138:	8802571e 	bne	r17,zero,1aa98 <___svfiprintf_internal_r+0x1390>
   1a13c:	84000414 	ori	r16,r16,16
   1a140:	8080080c 	andi	r2,r16,32
   1a144:	103ea91e 	bne	r2,zero,19bec <__alt_data_end+0xfc019bec>
   1a148:	8080040c 	andi	r2,r16,16
   1a14c:	10018026 	beq	r2,zero,1a750 <___svfiprintf_internal_r+0x1048>
   1a150:	d9402417 	ldw	r5,144(sp)
   1a154:	d8c02017 	ldw	r3,128(sp)
   1a158:	d8001d85 	stb	zero,118(sp)
   1a15c:	28800104 	addi	r2,r5,4
   1a160:	2c800017 	ldw	r18,0(r5)
   1a164:	0029883a 	mov	r20,zero
   1a168:	18018216 	blt	r3,zero,1a774 <___svfiprintf_internal_r+0x106c>
   1a16c:	00ffdfc4 	movi	r3,-129
   1a170:	d8802415 	stw	r2,144(sp)
   1a174:	80e0703a 	and	r16,r16,r3
   1a178:	903ea81e 	bne	r18,zero,19c1c <__alt_data_end+0xfc019c1c>
   1a17c:	d8802017 	ldw	r2,128(sp)
   1a180:	002b883a 	mov	r21,zero
   1a184:	1001f226 	beq	r2,zero,1a950 <___svfiprintf_internal_r+0x1248>
   1a188:	0025883a 	mov	r18,zero
   1a18c:	0029883a 	mov	r20,zero
   1a190:	003ea306 	br	19c20 <__alt_data_end+0xfc019c20>
   1a194:	d8c01c17 	ldw	r3,112(sp)
   1a198:	d8801b17 	ldw	r2,108(sp)
   1a19c:	d9001d87 	ldb	r4,118(sp)
   1a1a0:	20000b26 	beq	r4,zero,1a1d0 <___svfiprintf_internal_r+0xac8>
   1a1a4:	d9001d84 	addi	r4,sp,118
   1a1a8:	18c00044 	addi	r3,r3,1
   1a1ac:	10800044 	addi	r2,r2,1
   1a1b0:	41000015 	stw	r4,0(r8)
   1a1b4:	01000044 	movi	r4,1
   1a1b8:	41000115 	stw	r4,4(r8)
   1a1bc:	d8c01c15 	stw	r3,112(sp)
   1a1c0:	d8801b15 	stw	r2,108(sp)
   1a1c4:	010001c4 	movi	r4,7
   1a1c8:	2080f316 	blt	r4,r2,1a598 <___svfiprintf_internal_r+0xe90>
   1a1cc:	42000204 	addi	r8,r8,8
   1a1d0:	d9402117 	ldw	r5,132(sp)
   1a1d4:	28000b26 	beq	r5,zero,1a204 <___svfiprintf_internal_r+0xafc>
   1a1d8:	d9001d04 	addi	r4,sp,116
   1a1dc:	18c00084 	addi	r3,r3,2
   1a1e0:	10800044 	addi	r2,r2,1
   1a1e4:	41000015 	stw	r4,0(r8)
   1a1e8:	01000084 	movi	r4,2
   1a1ec:	41000115 	stw	r4,4(r8)
   1a1f0:	d8c01c15 	stw	r3,112(sp)
   1a1f4:	d8801b15 	stw	r2,108(sp)
   1a1f8:	010001c4 	movi	r4,7
   1a1fc:	2080ef16 	blt	r4,r2,1a5bc <___svfiprintf_internal_r+0xeb4>
   1a200:	42000204 	addi	r8,r8,8
   1a204:	d9402217 	ldw	r5,136(sp)
   1a208:	01002004 	movi	r4,128
   1a20c:	29008f26 	beq	r5,r4,1a44c <___svfiprintf_internal_r+0xd44>
   1a210:	d9002017 	ldw	r4,128(sp)
   1a214:	252fc83a 	sub	r23,r4,r20
   1a218:	05c0310e 	bge	zero,r23,1a2e0 <___svfiprintf_internal_r+0xbd8>
   1a21c:	07000404 	movi	fp,16
   1a220:	e5c17d0e 	bge	fp,r23,1a818 <___svfiprintf_internal_r+0x1110>
   1a224:	010000f4 	movhi	r4,3
   1a228:	212e6504 	addi	r4,r4,-18028
   1a22c:	dc002015 	stw	r16,128(sp)
   1a230:	dc402215 	stw	r17,136(sp)
   1a234:	d9002115 	stw	r4,132(sp)
   1a238:	b823883a 	mov	r17,r23
   1a23c:	054001c4 	movi	r21,7
   1a240:	982f883a 	mov	r23,r19
   1a244:	dc002717 	ldw	r16,156(sp)
   1a248:	9027883a 	mov	r19,r18
   1a24c:	dc802317 	ldw	r18,140(sp)
   1a250:	00000306 	br	1a260 <___svfiprintf_internal_r+0xb58>
   1a254:	8c7ffc04 	addi	r17,r17,-16
   1a258:	42000204 	addi	r8,r8,8
   1a25c:	e440110e 	bge	fp,r17,1a2a4 <___svfiprintf_internal_r+0xb9c>
   1a260:	18c00404 	addi	r3,r3,16
   1a264:	10800044 	addi	r2,r2,1
   1a268:	45800015 	stw	r22,0(r8)
   1a26c:	47000115 	stw	fp,4(r8)
   1a270:	d8c01c15 	stw	r3,112(sp)
   1a274:	d8801b15 	stw	r2,108(sp)
   1a278:	a8bff60e 	bge	r21,r2,1a254 <__alt_data_end+0xfc01a254>
   1a27c:	d9801a04 	addi	r6,sp,104
   1a280:	900b883a 	mov	r5,r18
   1a284:	8009883a 	mov	r4,r16
   1a288:	00195380 	call	19538 <__ssprint_r>
   1a28c:	10005e1e 	bne	r2,zero,1a408 <___svfiprintf_internal_r+0xd00>
   1a290:	8c7ffc04 	addi	r17,r17,-16
   1a294:	d8c01c17 	ldw	r3,112(sp)
   1a298:	d8801b17 	ldw	r2,108(sp)
   1a29c:	d811883a 	mov	r8,sp
   1a2a0:	e47fef16 	blt	fp,r17,1a260 <__alt_data_end+0xfc01a260>
   1a2a4:	9825883a 	mov	r18,r19
   1a2a8:	dc002017 	ldw	r16,128(sp)
   1a2ac:	b827883a 	mov	r19,r23
   1a2b0:	882f883a 	mov	r23,r17
   1a2b4:	dc402217 	ldw	r17,136(sp)
   1a2b8:	d9402117 	ldw	r5,132(sp)
   1a2bc:	1dc7883a 	add	r3,r3,r23
   1a2c0:	10800044 	addi	r2,r2,1
   1a2c4:	41400015 	stw	r5,0(r8)
   1a2c8:	45c00115 	stw	r23,4(r8)
   1a2cc:	d8c01c15 	stw	r3,112(sp)
   1a2d0:	d8801b15 	stw	r2,108(sp)
   1a2d4:	010001c4 	movi	r4,7
   1a2d8:	2080a616 	blt	r4,r2,1a574 <___svfiprintf_internal_r+0xe6c>
   1a2dc:	42000204 	addi	r8,r8,8
   1a2e0:	a0c7883a 	add	r3,r20,r3
   1a2e4:	10800044 	addi	r2,r2,1
   1a2e8:	44400015 	stw	r17,0(r8)
   1a2ec:	45000115 	stw	r20,4(r8)
   1a2f0:	d8c01c15 	stw	r3,112(sp)
   1a2f4:	d8801b15 	stw	r2,108(sp)
   1a2f8:	010001c4 	movi	r4,7
   1a2fc:	20808816 	blt	r4,r2,1a520 <___svfiprintf_internal_r+0xe18>
   1a300:	42000204 	addi	r8,r8,8
   1a304:	8400010c 	andi	r16,r16,4
   1a308:	80002c26 	beq	r16,zero,1a3bc <___svfiprintf_internal_r+0xcb4>
   1a30c:	d8802517 	ldw	r2,148(sp)
   1a310:	14a1c83a 	sub	r16,r2,r18
   1a314:	0400290e 	bge	zero,r16,1a3bc <___svfiprintf_internal_r+0xcb4>
   1a318:	04400404 	movi	r17,16
   1a31c:	d8801b17 	ldw	r2,108(sp)
   1a320:	8c01a70e 	bge	r17,r16,1a9c0 <___svfiprintf_internal_r+0x12b8>
   1a324:	014000f4 	movhi	r5,3
   1a328:	296e6904 	addi	r5,r5,-18012
   1a32c:	d9402815 	stw	r5,160(sp)
   1a330:	050001c4 	movi	r20,7
   1a334:	dd402717 	ldw	r21,156(sp)
   1a338:	ddc02317 	ldw	r23,140(sp)
   1a33c:	00000306 	br	1a34c <___svfiprintf_internal_r+0xc44>
   1a340:	843ffc04 	addi	r16,r16,-16
   1a344:	42000204 	addi	r8,r8,8
   1a348:	8c00130e 	bge	r17,r16,1a398 <___svfiprintf_internal_r+0xc90>
   1a34c:	010000f4 	movhi	r4,3
   1a350:	18c00404 	addi	r3,r3,16
   1a354:	10800044 	addi	r2,r2,1
   1a358:	212e6904 	addi	r4,r4,-18012
   1a35c:	41000015 	stw	r4,0(r8)
   1a360:	44400115 	stw	r17,4(r8)
   1a364:	d8c01c15 	stw	r3,112(sp)
   1a368:	d8801b15 	stw	r2,108(sp)
   1a36c:	a0bff40e 	bge	r20,r2,1a340 <__alt_data_end+0xfc01a340>
   1a370:	d9801a04 	addi	r6,sp,104
   1a374:	b80b883a 	mov	r5,r23
   1a378:	a809883a 	mov	r4,r21
   1a37c:	00195380 	call	19538 <__ssprint_r>
   1a380:	1000211e 	bne	r2,zero,1a408 <___svfiprintf_internal_r+0xd00>
   1a384:	843ffc04 	addi	r16,r16,-16
   1a388:	d8c01c17 	ldw	r3,112(sp)
   1a38c:	d8801b17 	ldw	r2,108(sp)
   1a390:	d811883a 	mov	r8,sp
   1a394:	8c3fed16 	blt	r17,r16,1a34c <__alt_data_end+0xfc01a34c>
   1a398:	d9402817 	ldw	r5,160(sp)
   1a39c:	1c07883a 	add	r3,r3,r16
   1a3a0:	10800044 	addi	r2,r2,1
   1a3a4:	41400015 	stw	r5,0(r8)
   1a3a8:	44000115 	stw	r16,4(r8)
   1a3ac:	d8c01c15 	stw	r3,112(sp)
   1a3b0:	d8801b15 	stw	r2,108(sp)
   1a3b4:	010001c4 	movi	r4,7
   1a3b8:	2080b516 	blt	r4,r2,1a690 <___svfiprintf_internal_r+0xf88>
   1a3bc:	d8802517 	ldw	r2,148(sp)
   1a3c0:	1480010e 	bge	r2,r18,1a3c8 <___svfiprintf_internal_r+0xcc0>
   1a3c4:	9005883a 	mov	r2,r18
   1a3c8:	d9002617 	ldw	r4,152(sp)
   1a3cc:	2089883a 	add	r4,r4,r2
   1a3d0:	d9002615 	stw	r4,152(sp)
   1a3d4:	18005a1e 	bne	r3,zero,1a540 <___svfiprintf_internal_r+0xe38>
   1a3d8:	98800007 	ldb	r2,0(r19)
   1a3dc:	d8001b15 	stw	zero,108(sp)
   1a3e0:	d811883a 	mov	r8,sp
   1a3e4:	103cec1e 	bne	r2,zero,19798 <__alt_data_end+0xfc019798>
   1a3e8:	9825883a 	mov	r18,r19
   1a3ec:	003d0206 	br	197f8 <__alt_data_end+0xfc0197f8>
   1a3f0:	d8801c17 	ldw	r2,112(sp)
   1a3f4:	10000426 	beq	r2,zero,1a408 <___svfiprintf_internal_r+0xd00>
   1a3f8:	d9402317 	ldw	r5,140(sp)
   1a3fc:	d9002717 	ldw	r4,156(sp)
   1a400:	d9801a04 	addi	r6,sp,104
   1a404:	00195380 	call	19538 <__ssprint_r>
   1a408:	d9402317 	ldw	r5,140(sp)
   1a40c:	d8802617 	ldw	r2,152(sp)
   1a410:	28c0030b 	ldhu	r3,12(r5)
   1a414:	18c0100c 	andi	r3,r3,64
   1a418:	18015c1e 	bne	r3,zero,1a98c <___svfiprintf_internal_r+0x1284>
   1a41c:	dfc03717 	ldw	ra,220(sp)
   1a420:	df003617 	ldw	fp,216(sp)
   1a424:	ddc03517 	ldw	r23,212(sp)
   1a428:	dd803417 	ldw	r22,208(sp)
   1a42c:	dd403317 	ldw	r21,204(sp)
   1a430:	dd003217 	ldw	r20,200(sp)
   1a434:	dcc03117 	ldw	r19,196(sp)
   1a438:	dc803017 	ldw	r18,192(sp)
   1a43c:	dc402f17 	ldw	r17,188(sp)
   1a440:	dc002e17 	ldw	r16,184(sp)
   1a444:	dec03804 	addi	sp,sp,224
   1a448:	f800283a 	ret
   1a44c:	d9002517 	ldw	r4,148(sp)
   1a450:	24afc83a 	sub	r23,r4,r18
   1a454:	05ff6e0e 	bge	zero,r23,1a210 <__alt_data_end+0xfc01a210>
   1a458:	07000404 	movi	fp,16
   1a45c:	e5c15c0e 	bge	fp,r23,1a9d0 <___svfiprintf_internal_r+0x12c8>
   1a460:	010000f4 	movhi	r4,3
   1a464:	212e6504 	addi	r4,r4,-18028
   1a468:	dc002215 	stw	r16,136(sp)
   1a46c:	dc402815 	stw	r17,160(sp)
   1a470:	d9002115 	stw	r4,132(sp)
   1a474:	b823883a 	mov	r17,r23
   1a478:	054001c4 	movi	r21,7
   1a47c:	982f883a 	mov	r23,r19
   1a480:	dc002717 	ldw	r16,156(sp)
   1a484:	9027883a 	mov	r19,r18
   1a488:	dc802317 	ldw	r18,140(sp)
   1a48c:	00000306 	br	1a49c <___svfiprintf_internal_r+0xd94>
   1a490:	8c7ffc04 	addi	r17,r17,-16
   1a494:	42000204 	addi	r8,r8,8
   1a498:	e440110e 	bge	fp,r17,1a4e0 <___svfiprintf_internal_r+0xdd8>
   1a49c:	18c00404 	addi	r3,r3,16
   1a4a0:	10800044 	addi	r2,r2,1
   1a4a4:	45800015 	stw	r22,0(r8)
   1a4a8:	47000115 	stw	fp,4(r8)
   1a4ac:	d8c01c15 	stw	r3,112(sp)
   1a4b0:	d8801b15 	stw	r2,108(sp)
   1a4b4:	a8bff60e 	bge	r21,r2,1a490 <__alt_data_end+0xfc01a490>
   1a4b8:	d9801a04 	addi	r6,sp,104
   1a4bc:	900b883a 	mov	r5,r18
   1a4c0:	8009883a 	mov	r4,r16
   1a4c4:	00195380 	call	19538 <__ssprint_r>
   1a4c8:	103fcf1e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a4cc:	8c7ffc04 	addi	r17,r17,-16
   1a4d0:	d8c01c17 	ldw	r3,112(sp)
   1a4d4:	d8801b17 	ldw	r2,108(sp)
   1a4d8:	d811883a 	mov	r8,sp
   1a4dc:	e47fef16 	blt	fp,r17,1a49c <__alt_data_end+0xfc01a49c>
   1a4e0:	9825883a 	mov	r18,r19
   1a4e4:	dc002217 	ldw	r16,136(sp)
   1a4e8:	b827883a 	mov	r19,r23
   1a4ec:	882f883a 	mov	r23,r17
   1a4f0:	dc402817 	ldw	r17,160(sp)
   1a4f4:	d9402117 	ldw	r5,132(sp)
   1a4f8:	1dc7883a 	add	r3,r3,r23
   1a4fc:	10800044 	addi	r2,r2,1
   1a500:	41400015 	stw	r5,0(r8)
   1a504:	45c00115 	stw	r23,4(r8)
   1a508:	d8c01c15 	stw	r3,112(sp)
   1a50c:	d8801b15 	stw	r2,108(sp)
   1a510:	010001c4 	movi	r4,7
   1a514:	2080b716 	blt	r4,r2,1a7f4 <___svfiprintf_internal_r+0x10ec>
   1a518:	42000204 	addi	r8,r8,8
   1a51c:	003f3c06 	br	1a210 <__alt_data_end+0xfc01a210>
   1a520:	d9402317 	ldw	r5,140(sp)
   1a524:	d9002717 	ldw	r4,156(sp)
   1a528:	d9801a04 	addi	r6,sp,104
   1a52c:	00195380 	call	19538 <__ssprint_r>
   1a530:	103fb51e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a534:	d8c01c17 	ldw	r3,112(sp)
   1a538:	d811883a 	mov	r8,sp
   1a53c:	003f7106 	br	1a304 <__alt_data_end+0xfc01a304>
   1a540:	d9402317 	ldw	r5,140(sp)
   1a544:	d9002717 	ldw	r4,156(sp)
   1a548:	d9801a04 	addi	r6,sp,104
   1a54c:	00195380 	call	19538 <__ssprint_r>
   1a550:	103fa126 	beq	r2,zero,1a3d8 <__alt_data_end+0xfc01a3d8>
   1a554:	003fac06 	br	1a408 <__alt_data_end+0xfc01a408>
   1a558:	d9402317 	ldw	r5,140(sp)
   1a55c:	d9002717 	ldw	r4,156(sp)
   1a560:	d9801a04 	addi	r6,sp,104
   1a564:	00195380 	call	19538 <__ssprint_r>
   1a568:	103fa71e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a56c:	d811883a 	mov	r8,sp
   1a570:	003c9e06 	br	197ec <__alt_data_end+0xfc0197ec>
   1a574:	d9402317 	ldw	r5,140(sp)
   1a578:	d9002717 	ldw	r4,156(sp)
   1a57c:	d9801a04 	addi	r6,sp,104
   1a580:	00195380 	call	19538 <__ssprint_r>
   1a584:	103fa01e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a588:	d8c01c17 	ldw	r3,112(sp)
   1a58c:	d8801b17 	ldw	r2,108(sp)
   1a590:	d811883a 	mov	r8,sp
   1a594:	003f5206 	br	1a2e0 <__alt_data_end+0xfc01a2e0>
   1a598:	d9402317 	ldw	r5,140(sp)
   1a59c:	d9002717 	ldw	r4,156(sp)
   1a5a0:	d9801a04 	addi	r6,sp,104
   1a5a4:	00195380 	call	19538 <__ssprint_r>
   1a5a8:	103f971e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a5ac:	d8c01c17 	ldw	r3,112(sp)
   1a5b0:	d8801b17 	ldw	r2,108(sp)
   1a5b4:	d811883a 	mov	r8,sp
   1a5b8:	003f0506 	br	1a1d0 <__alt_data_end+0xfc01a1d0>
   1a5bc:	d9402317 	ldw	r5,140(sp)
   1a5c0:	d9002717 	ldw	r4,156(sp)
   1a5c4:	d9801a04 	addi	r6,sp,104
   1a5c8:	00195380 	call	19538 <__ssprint_r>
   1a5cc:	103f8e1e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a5d0:	d8c01c17 	ldw	r3,112(sp)
   1a5d4:	d8801b17 	ldw	r2,108(sp)
   1a5d8:	d811883a 	mov	r8,sp
   1a5dc:	003f0906 	br	1a204 <__alt_data_end+0xfc01a204>
   1a5e0:	d9402017 	ldw	r5,128(sp)
   1a5e4:	d8001d85 	stb	zero,118(sp)
   1a5e8:	28007716 	blt	r5,zero,1a7c8 <___svfiprintf_internal_r+0x10c0>
   1a5ec:	00ffdfc4 	movi	r3,-129
   1a5f0:	9504b03a 	or	r2,r18,r20
   1a5f4:	80e0703a 	and	r16,r16,r3
   1a5f8:	103d3926 	beq	r2,zero,19ae0 <__alt_data_end+0xfc019ae0>
   1a5fc:	002b883a 	mov	r21,zero
   1a600:	003d3c06 	br	19af4 <__alt_data_end+0xfc019af4>
   1a604:	d9402317 	ldw	r5,140(sp)
   1a608:	d9002717 	ldw	r4,156(sp)
   1a60c:	d9801a04 	addi	r6,sp,104
   1a610:	00195380 	call	19538 <__ssprint_r>
   1a614:	103f7c1e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a618:	d8c01c17 	ldw	r3,112(sp)
   1a61c:	d8801b17 	ldw	r2,108(sp)
   1a620:	d811883a 	mov	r8,sp
   1a624:	003edd06 	br	1a19c <__alt_data_end+0xfc01a19c>
   1a628:	8080100c 	andi	r2,r16,64
   1a62c:	d8001d85 	stb	zero,118(sp)
   1a630:	10008426 	beq	r2,zero,1a844 <___svfiprintf_internal_r+0x113c>
   1a634:	d9402417 	ldw	r5,144(sp)
   1a638:	d8c02017 	ldw	r3,128(sp)
   1a63c:	0029883a 	mov	r20,zero
   1a640:	28800104 	addi	r2,r5,4
   1a644:	2c80000b 	ldhu	r18,0(r5)
   1a648:	183eab0e 	bge	r3,zero,1a0f8 <__alt_data_end+0xfc01a0f8>
   1a64c:	d8802415 	stw	r2,144(sp)
   1a650:	002b883a 	mov	r21,zero
   1a654:	9504b03a 	or	r2,r18,r20
   1a658:	103e171e 	bne	r2,zero,19eb8 <__alt_data_end+0xfc019eb8>
   1a65c:	00800044 	movi	r2,1
   1a660:	10803fcc 	andi	r2,r2,255
   1a664:	00c00044 	movi	r3,1
   1a668:	10c05c26 	beq	r2,r3,1a7dc <___svfiprintf_internal_r+0x10d4>
   1a66c:	00c00084 	movi	r3,2
   1a670:	10fd1e26 	beq	r2,r3,19aec <__alt_data_end+0xfc019aec>
   1a674:	003ec406 	br	1a188 <__alt_data_end+0xfc01a188>
   1a678:	d9401e17 	ldw	r5,120(sp)
   1a67c:	2c69c83a 	sub	r20,r5,r17
   1a680:	003d4506 	br	19b98 <__alt_data_end+0xfc019b98>
   1a684:	d8802415 	stw	r2,144(sp)
   1a688:	98c00007 	ldb	r3,0(r19)
   1a68c:	003c6a06 	br	19838 <__alt_data_end+0xfc019838>
   1a690:	d9402317 	ldw	r5,140(sp)
   1a694:	d9002717 	ldw	r4,156(sp)
   1a698:	d9801a04 	addi	r6,sp,104
   1a69c:	00195380 	call	19538 <__ssprint_r>
   1a6a0:	103f591e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a6a4:	d8c01c17 	ldw	r3,112(sp)
   1a6a8:	003f4406 	br	1a3bc <__alt_data_end+0xfc01a3bc>
   1a6ac:	014000f4 	movhi	r5,3
   1a6b0:	296dfd04 	addi	r5,r5,-18444
   1a6b4:	d9402915 	stw	r5,164(sp)
   1a6b8:	003d0906 	br	19ae0 <__alt_data_end+0xfc019ae0>
   1a6bc:	d8c02417 	ldw	r3,144(sp)
   1a6c0:	d9002617 	ldw	r4,152(sp)
   1a6c4:	d9402417 	ldw	r5,144(sp)
   1a6c8:	18800017 	ldw	r2,0(r3)
   1a6cc:	2007d7fa 	srai	r3,r4,31
   1a6d0:	29400104 	addi	r5,r5,4
   1a6d4:	d9402415 	stw	r5,144(sp)
   1a6d8:	11000015 	stw	r4,0(r2)
   1a6dc:	10c00115 	stw	r3,4(r2)
   1a6e0:	003c2b06 	br	19790 <__alt_data_end+0xfc019790>
   1a6e4:	d8c01d45 	stb	r3,117(sp)
   1a6e8:	d8c02017 	ldw	r3,128(sp)
   1a6ec:	00800c04 	movi	r2,48
   1a6f0:	d8801d05 	stb	r2,116(sp)
   1a6f4:	d8001d85 	stb	zero,118(sp)
   1a6f8:	80800094 	ori	r2,r16,2
   1a6fc:	1800ac16 	blt	r3,zero,1a9b0 <___svfiprintf_internal_r+0x12a8>
   1a700:	00bfdfc4 	movi	r2,-129
   1a704:	80a0703a 	and	r16,r16,r2
   1a708:	84000094 	ori	r16,r16,2
   1a70c:	002b883a 	mov	r21,zero
   1a710:	003cf806 	br	19af4 <__alt_data_end+0xfc019af4>
   1a714:	98c00007 	ldb	r3,0(r19)
   1a718:	003c4706 	br	19838 <__alt_data_end+0xfc019838>
   1a71c:	d9402417 	ldw	r5,144(sp)
   1a720:	2c800017 	ldw	r18,0(r5)
   1a724:	29400104 	addi	r5,r5,4
   1a728:	d9402415 	stw	r5,144(sp)
   1a72c:	9029d7fa 	srai	r20,r18,31
   1a730:	a005883a 	mov	r2,r20
   1a734:	003dd806 	br	19e98 <__alt_data_end+0xfc019e98>
   1a738:	d9402417 	ldw	r5,144(sp)
   1a73c:	0029883a 	mov	r20,zero
   1a740:	2c800017 	ldw	r18,0(r5)
   1a744:	29400104 	addi	r5,r5,4
   1a748:	d9402415 	stw	r5,144(sp)
   1a74c:	003cdb06 	br	19abc <__alt_data_end+0xfc019abc>
   1a750:	8080100c 	andi	r2,r16,64
   1a754:	d8001d85 	stb	zero,118(sp)
   1a758:	10003326 	beq	r2,zero,1a828 <___svfiprintf_internal_r+0x1120>
   1a75c:	d9002417 	ldw	r4,144(sp)
   1a760:	d9402017 	ldw	r5,128(sp)
   1a764:	0029883a 	mov	r20,zero
   1a768:	20800104 	addi	r2,r4,4
   1a76c:	2480000b 	ldhu	r18,0(r4)
   1a770:	283e7e0e 	bge	r5,zero,1a16c <__alt_data_end+0xfc01a16c>
   1a774:	9506b03a 	or	r3,r18,r20
   1a778:	d8802415 	stw	r2,144(sp)
   1a77c:	183d271e 	bne	r3,zero,19c1c <__alt_data_end+0xfc019c1c>
   1a780:	002b883a 	mov	r21,zero
   1a784:	0005883a 	mov	r2,zero
   1a788:	003fb506 	br	1a660 <__alt_data_end+0xfc01a660>
   1a78c:	98c00043 	ldbu	r3,1(r19)
   1a790:	8c400814 	ori	r17,r17,32
   1a794:	9cc00044 	addi	r19,r19,1
   1a798:	18c03fcc 	andi	r3,r3,255
   1a79c:	18c0201c 	xori	r3,r3,128
   1a7a0:	18ffe004 	addi	r3,r3,-128
   1a7a4:	003c2406 	br	19838 <__alt_data_end+0xfc019838>
   1a7a8:	d8c02415 	stw	r3,144(sp)
   1a7ac:	002b883a 	mov	r21,zero
   1a7b0:	003fa806 	br	1a654 <__alt_data_end+0xfc01a654>
   1a7b4:	010000f4 	movhi	r4,3
   1a7b8:	212dfd04 	addi	r4,r4,-18444
   1a7bc:	d9002915 	stw	r4,164(sp)
   1a7c0:	d8c02415 	stw	r3,144(sp)
   1a7c4:	1021883a 	mov	r16,r2
   1a7c8:	9504b03a 	or	r2,r18,r20
   1a7cc:	103f8b1e 	bne	r2,zero,1a5fc <__alt_data_end+0xfc01a5fc>
   1a7d0:	002b883a 	mov	r21,zero
   1a7d4:	00800084 	movi	r2,2
   1a7d8:	003fa106 	br	1a660 <__alt_data_end+0xfc01a660>
   1a7dc:	0025883a 	mov	r18,zero
   1a7e0:	94800c04 	addi	r18,r18,48
   1a7e4:	dc8019c5 	stb	r18,103(sp)
   1a7e8:	dd002c17 	ldw	r20,176(sp)
   1a7ec:	dc4019c4 	addi	r17,sp,103
   1a7f0:	003ce906 	br	19b98 <__alt_data_end+0xfc019b98>
   1a7f4:	d9402317 	ldw	r5,140(sp)
   1a7f8:	d9002717 	ldw	r4,156(sp)
   1a7fc:	d9801a04 	addi	r6,sp,104
   1a800:	00195380 	call	19538 <__ssprint_r>
   1a804:	103f001e 	bne	r2,zero,1a408 <__alt_data_end+0xfc01a408>
   1a808:	d8c01c17 	ldw	r3,112(sp)
   1a80c:	d8801b17 	ldw	r2,108(sp)
   1a810:	d811883a 	mov	r8,sp
   1a814:	003e7e06 	br	1a210 <__alt_data_end+0xfc01a210>
   1a818:	014000f4 	movhi	r5,3
   1a81c:	296e6504 	addi	r5,r5,-18028
   1a820:	d9402115 	stw	r5,132(sp)
   1a824:	003ea406 	br	1a2b8 <__alt_data_end+0xfc01a2b8>
   1a828:	d8c02417 	ldw	r3,144(sp)
   1a82c:	d9002017 	ldw	r4,128(sp)
   1a830:	0029883a 	mov	r20,zero
   1a834:	18800104 	addi	r2,r3,4
   1a838:	1c800017 	ldw	r18,0(r3)
   1a83c:	203e4b0e 	bge	r4,zero,1a16c <__alt_data_end+0xfc01a16c>
   1a840:	003fcc06 	br	1a774 <__alt_data_end+0xfc01a774>
   1a844:	d9002417 	ldw	r4,144(sp)
   1a848:	d9402017 	ldw	r5,128(sp)
   1a84c:	0029883a 	mov	r20,zero
   1a850:	20800104 	addi	r2,r4,4
   1a854:	24800017 	ldw	r18,0(r4)
   1a858:	283e270e 	bge	r5,zero,1a0f8 <__alt_data_end+0xfc01a0f8>
   1a85c:	003f7b06 	br	1a64c <__alt_data_end+0xfc01a64c>
   1a860:	8400100c 	andi	r16,r16,64
   1a864:	80003326 	beq	r16,zero,1a934 <___svfiprintf_internal_r+0x122c>
   1a868:	d9402417 	ldw	r5,144(sp)
   1a86c:	d8c02617 	ldw	r3,152(sp)
   1a870:	28800017 	ldw	r2,0(r5)
   1a874:	29400104 	addi	r5,r5,4
   1a878:	d9402415 	stw	r5,144(sp)
   1a87c:	10c0000d 	sth	r3,0(r2)
   1a880:	003bc306 	br	19790 <__alt_data_end+0xfc019790>
   1a884:	d9002417 	ldw	r4,144(sp)
   1a888:	0029883a 	mov	r20,zero
   1a88c:	24800017 	ldw	r18,0(r4)
   1a890:	21000104 	addi	r4,r4,4
   1a894:	d9002415 	stw	r4,144(sp)
   1a898:	003c8806 	br	19abc <__alt_data_end+0xfc019abc>
   1a89c:	d8c02417 	ldw	r3,144(sp)
   1a8a0:	1c800017 	ldw	r18,0(r3)
   1a8a4:	18c00104 	addi	r3,r3,4
   1a8a8:	d8c02415 	stw	r3,144(sp)
   1a8ac:	9029d7fa 	srai	r20,r18,31
   1a8b0:	a005883a 	mov	r2,r20
   1a8b4:	003d7806 	br	19e98 <__alt_data_end+0xfc019e98>
   1a8b8:	8809883a 	mov	r4,r17
   1a8bc:	da002d15 	stw	r8,180(sp)
   1a8c0:	001053c0 	call	1053c <strlen>
   1a8c4:	1029883a 	mov	r20,r2
   1a8c8:	dd401d83 	ldbu	r21,118(sp)
   1a8cc:	ddc02415 	stw	r23,144(sp)
   1a8d0:	d8002015 	stw	zero,128(sp)
   1a8d4:	da002d17 	ldw	r8,180(sp)
   1a8d8:	003caf06 	br	19b98 <__alt_data_end+0xfc019b98>
   1a8dc:	013fffc4 	movi	r4,-1
   1a8e0:	003df206 	br	1a0ac <__alt_data_end+0xfc01a0ac>
   1a8e4:	dd002017 	ldw	r20,128(sp)
   1a8e8:	00800184 	movi	r2,6
   1a8ec:	1500012e 	bgeu	r2,r20,1a8f4 <___svfiprintf_internal_r+0x11ec>
   1a8f0:	1029883a 	mov	r20,r2
   1a8f4:	a025883a 	mov	r18,r20
   1a8f8:	a0004116 	blt	r20,zero,1aa00 <___svfiprintf_internal_r+0x12f8>
   1a8fc:	044000f4 	movhi	r17,3
   1a900:	ddc02415 	stw	r23,144(sp)
   1a904:	8c6e0204 	addi	r17,r17,-18424
   1a908:	003ce806 	br	19cac <__alt_data_end+0xfc019cac>
   1a90c:	04001004 	movi	r16,64
   1a910:	800b883a 	mov	r5,r16
   1a914:	000f4680 	call	f468 <_malloc_r>
   1a918:	d8c02317 	ldw	r3,140(sp)
   1a91c:	18800015 	stw	r2,0(r3)
   1a920:	18800415 	stw	r2,16(r3)
   1a924:	10004d26 	beq	r2,zero,1aa5c <___svfiprintf_internal_r+0x1354>
   1a928:	d9402317 	ldw	r5,140(sp)
   1a92c:	2c000515 	stw	r16,20(r5)
   1a930:	003b8906 	br	19758 <__alt_data_end+0xfc019758>
   1a934:	d9002417 	ldw	r4,144(sp)
   1a938:	d9402617 	ldw	r5,152(sp)
   1a93c:	20800017 	ldw	r2,0(r4)
   1a940:	21000104 	addi	r4,r4,4
   1a944:	d9002415 	stw	r4,144(sp)
   1a948:	11400015 	stw	r5,0(r2)
   1a94c:	003b9006 	br	19790 <__alt_data_end+0xfc019790>
   1a950:	8080004c 	andi	r2,r16,1
   1a954:	002b883a 	mov	r21,zero
   1a958:	10000526 	beq	r2,zero,1a970 <___svfiprintf_internal_r+0x1268>
   1a95c:	00800c04 	movi	r2,48
   1a960:	d88019c5 	stb	r2,103(sp)
   1a964:	dd002c17 	ldw	r20,176(sp)
   1a968:	dc4019c4 	addi	r17,sp,103
   1a96c:	003c8a06 	br	19b98 <__alt_data_end+0xfc019b98>
   1a970:	0029883a 	mov	r20,zero
   1a974:	dc401a04 	addi	r17,sp,104
   1a978:	003c8706 	br	19b98 <__alt_data_end+0xfc019b98>
   1a97c:	014000f4 	movhi	r5,3
   1a980:	296e6904 	addi	r5,r5,-18012
   1a984:	d9402815 	stw	r5,160(sp)
   1a988:	003cff06 	br	19d88 <__alt_data_end+0xfc019d88>
   1a98c:	00bfffc4 	movi	r2,-1
   1a990:	003ea206 	br	1a41c <__alt_data_end+0xfc01a41c>
   1a994:	00800044 	movi	r2,1
   1a998:	10803fcc 	andi	r2,r2,255
   1a99c:	00c00044 	movi	r3,1
   1a9a0:	10fd4526 	beq	r2,r3,19eb8 <__alt_data_end+0xfc019eb8>
   1a9a4:	00c00084 	movi	r3,2
   1a9a8:	10fc5226 	beq	r2,r3,19af4 <__alt_data_end+0xfc019af4>
   1a9ac:	003c9c06 	br	19c20 <__alt_data_end+0xfc019c20>
   1a9b0:	1021883a 	mov	r16,r2
   1a9b4:	002b883a 	mov	r21,zero
   1a9b8:	00800084 	movi	r2,2
   1a9bc:	003ff606 	br	1a998 <__alt_data_end+0xfc01a998>
   1a9c0:	010000f4 	movhi	r4,3
   1a9c4:	212e6904 	addi	r4,r4,-18012
   1a9c8:	d9002815 	stw	r4,160(sp)
   1a9cc:	003e7206 	br	1a398 <__alt_data_end+0xfc01a398>
   1a9d0:	014000f4 	movhi	r5,3
   1a9d4:	296e6504 	addi	r5,r5,-18028
   1a9d8:	d9402115 	stw	r5,132(sp)
   1a9dc:	003ec506 	br	1a4f4 <__alt_data_end+0xfc01a4f4>
   1a9e0:	e027883a 	mov	r19,fp
   1a9e4:	d8002015 	stw	zero,128(sp)
   1a9e8:	003b9406 	br	1983c <__alt_data_end+0xfc01983c>
   1a9ec:	dd002017 	ldw	r20,128(sp)
   1a9f0:	dd401d83 	ldbu	r21,118(sp)
   1a9f4:	ddc02415 	stw	r23,144(sp)
   1a9f8:	d8002015 	stw	zero,128(sp)
   1a9fc:	003c6606 	br	19b98 <__alt_data_end+0xfc019b98>
   1aa00:	0025883a 	mov	r18,zero
   1aa04:	003fbd06 	br	1a8fc <__alt_data_end+0xfc01a8fc>
   1aa08:	d9402417 	ldw	r5,144(sp)
   1aa0c:	d8c02417 	ldw	r3,144(sp)
   1aa10:	29400017 	ldw	r5,0(r5)
   1aa14:	19000104 	addi	r4,r3,4
   1aa18:	d9002415 	stw	r4,144(sp)
   1aa1c:	d9402015 	stw	r5,128(sp)
   1aa20:	98c00043 	ldbu	r3,1(r19)
   1aa24:	e027883a 	mov	r19,fp
   1aa28:	283f5b0e 	bge	r5,zero,1a798 <__alt_data_end+0xfc01a798>
   1aa2c:	18c03fcc 	andi	r3,r3,255
   1aa30:	013fffc4 	movi	r4,-1
   1aa34:	18c0201c 	xori	r3,r3,128
   1aa38:	d9002015 	stw	r4,128(sp)
   1aa3c:	18ffe004 	addi	r3,r3,-128
   1aa40:	003b7d06 	br	19838 <__alt_data_end+0xfc019838>
   1aa44:	dd401d85 	stb	r21,118(sp)
   1aa48:	003cf306 	br	19e18 <__alt_data_end+0xfc019e18>
   1aa4c:	dd401d85 	stb	r21,118(sp)
   1aa50:	003d4e06 	br	19f8c <__alt_data_end+0xfc019f8c>
   1aa54:	dd401d85 	stb	r21,118(sp)
   1aa58:	003c0e06 	br	19a94 <__alt_data_end+0xfc019a94>
   1aa5c:	d9002717 	ldw	r4,156(sp)
   1aa60:	00800304 	movi	r2,12
   1aa64:	20800015 	stw	r2,0(r4)
   1aa68:	00bfffc4 	movi	r2,-1
   1aa6c:	003e6b06 	br	1a41c <__alt_data_end+0xfc01a41c>
   1aa70:	dd401d85 	stb	r21,118(sp)
   1aa74:	003d0006 	br	19e78 <__alt_data_end+0xfc019e78>
   1aa78:	dd401d85 	stb	r21,118(sp)
   1aa7c:	003d7106 	br	1a044 <__alt_data_end+0xfc01a044>
   1aa80:	dd401d85 	stb	r21,118(sp)
   1aa84:	003c5706 	br	19be4 <__alt_data_end+0xfc019be4>
   1aa88:	dd401d85 	stb	r21,118(sp)
   1aa8c:	003c2e06 	br	19b48 <__alt_data_end+0xfc019b48>
   1aa90:	dd401d85 	stb	r21,118(sp)
   1aa94:	003d8c06 	br	1a0c8 <__alt_data_end+0xfc01a0c8>
   1aa98:	dd401d85 	stb	r21,118(sp)
   1aa9c:	003da706 	br	1a13c <__alt_data_end+0xfc01a13c>
   1aaa0:	dd401d85 	stb	r21,118(sp)
   1aaa4:	003cc806 	br	19dc8 <__alt_data_end+0xfc019dc8>

0001aaa8 <__sprint_r.part.0>:
   1aaa8:	28801917 	ldw	r2,100(r5)
   1aaac:	defff604 	addi	sp,sp,-40
   1aab0:	dd400515 	stw	r21,20(sp)
   1aab4:	dfc00915 	stw	ra,36(sp)
   1aab8:	df000815 	stw	fp,32(sp)
   1aabc:	ddc00715 	stw	r23,28(sp)
   1aac0:	dd800615 	stw	r22,24(sp)
   1aac4:	dd000415 	stw	r20,16(sp)
   1aac8:	dcc00315 	stw	r19,12(sp)
   1aacc:	dc800215 	stw	r18,8(sp)
   1aad0:	dc400115 	stw	r17,4(sp)
   1aad4:	dc000015 	stw	r16,0(sp)
   1aad8:	1088000c 	andi	r2,r2,8192
   1aadc:	302b883a 	mov	r21,r6
   1aae0:	10002e26 	beq	r2,zero,1ab9c <__sprint_r.part.0+0xf4>
   1aae4:	30800217 	ldw	r2,8(r6)
   1aae8:	35800017 	ldw	r22,0(r6)
   1aaec:	10002926 	beq	r2,zero,1ab94 <__sprint_r.part.0+0xec>
   1aaf0:	2827883a 	mov	r19,r5
   1aaf4:	2029883a 	mov	r20,r4
   1aaf8:	b5c00104 	addi	r23,r22,4
   1aafc:	04bfffc4 	movi	r18,-1
   1ab00:	bc400017 	ldw	r17,0(r23)
   1ab04:	b4000017 	ldw	r16,0(r22)
   1ab08:	0039883a 	mov	fp,zero
   1ab0c:	8822d0ba 	srli	r17,r17,2
   1ab10:	8800031e 	bne	r17,zero,1ab20 <__sprint_r.part.0+0x78>
   1ab14:	00001806 	br	1ab78 <__sprint_r.part.0+0xd0>
   1ab18:	84000104 	addi	r16,r16,4
   1ab1c:	8f001526 	beq	r17,fp,1ab74 <__sprint_r.part.0+0xcc>
   1ab20:	81400017 	ldw	r5,0(r16)
   1ab24:	980d883a 	mov	r6,r19
   1ab28:	a009883a 	mov	r4,r20
   1ab2c:	001c6f00 	call	1c6f0 <_fputwc_r>
   1ab30:	e7000044 	addi	fp,fp,1
   1ab34:	14bff81e 	bne	r2,r18,1ab18 <__alt_data_end+0xfc01ab18>
   1ab38:	9005883a 	mov	r2,r18
   1ab3c:	a8000215 	stw	zero,8(r21)
   1ab40:	a8000115 	stw	zero,4(r21)
   1ab44:	dfc00917 	ldw	ra,36(sp)
   1ab48:	df000817 	ldw	fp,32(sp)
   1ab4c:	ddc00717 	ldw	r23,28(sp)
   1ab50:	dd800617 	ldw	r22,24(sp)
   1ab54:	dd400517 	ldw	r21,20(sp)
   1ab58:	dd000417 	ldw	r20,16(sp)
   1ab5c:	dcc00317 	ldw	r19,12(sp)
   1ab60:	dc800217 	ldw	r18,8(sp)
   1ab64:	dc400117 	ldw	r17,4(sp)
   1ab68:	dc000017 	ldw	r16,0(sp)
   1ab6c:	dec00a04 	addi	sp,sp,40
   1ab70:	f800283a 	ret
   1ab74:	a8800217 	ldw	r2,8(r21)
   1ab78:	8c63883a 	add	r17,r17,r17
   1ab7c:	8c63883a 	add	r17,r17,r17
   1ab80:	1445c83a 	sub	r2,r2,r17
   1ab84:	a8800215 	stw	r2,8(r21)
   1ab88:	b5800204 	addi	r22,r22,8
   1ab8c:	bdc00204 	addi	r23,r23,8
   1ab90:	103fdb1e 	bne	r2,zero,1ab00 <__alt_data_end+0xfc01ab00>
   1ab94:	0005883a 	mov	r2,zero
   1ab98:	003fe806 	br	1ab3c <__alt_data_end+0xfc01ab3c>
   1ab9c:	00170dc0 	call	170dc <__sfvwrite_r>
   1aba0:	003fe606 	br	1ab3c <__alt_data_end+0xfc01ab3c>

0001aba4 <__sprint_r>:
   1aba4:	30c00217 	ldw	r3,8(r6)
   1aba8:	18000126 	beq	r3,zero,1abb0 <__sprint_r+0xc>
   1abac:	001aaa81 	jmpi	1aaa8 <__sprint_r.part.0>
   1abb0:	30000115 	stw	zero,4(r6)
   1abb4:	0005883a 	mov	r2,zero
   1abb8:	f800283a 	ret

0001abbc <___vfiprintf_internal_r>:
   1abbc:	deffca04 	addi	sp,sp,-216
   1abc0:	dd403115 	stw	r21,196(sp)
   1abc4:	dfc03515 	stw	ra,212(sp)
   1abc8:	df003415 	stw	fp,208(sp)
   1abcc:	ddc03315 	stw	r23,204(sp)
   1abd0:	dd803215 	stw	r22,200(sp)
   1abd4:	dd003015 	stw	r20,192(sp)
   1abd8:	dcc02f15 	stw	r19,188(sp)
   1abdc:	dc802e15 	stw	r18,184(sp)
   1abe0:	dc402d15 	stw	r17,180(sp)
   1abe4:	dc002c15 	stw	r16,176(sp)
   1abe8:	d9002115 	stw	r4,132(sp)
   1abec:	d9402015 	stw	r5,128(sp)
   1abf0:	d9c02215 	stw	r7,136(sp)
   1abf4:	302b883a 	mov	r21,r6
   1abf8:	20000226 	beq	r4,zero,1ac04 <___vfiprintf_internal_r+0x48>
   1abfc:	20800e17 	ldw	r2,56(r4)
   1ac00:	1000cf26 	beq	r2,zero,1af40 <___vfiprintf_internal_r+0x384>
   1ac04:	d8c02017 	ldw	r3,128(sp)
   1ac08:	1880030b 	ldhu	r2,12(r3)
   1ac0c:	10c8000c 	andi	r3,r2,8192
   1ac10:	1800071e 	bne	r3,zero,1ac30 <___vfiprintf_internal_r+0x74>
   1ac14:	d9402017 	ldw	r5,128(sp)
   1ac18:	00f7ffc4 	movi	r3,-8193
   1ac1c:	10880014 	ori	r2,r2,8192
   1ac20:	29001917 	ldw	r4,100(r5)
   1ac24:	2880030d 	sth	r2,12(r5)
   1ac28:	20c6703a 	and	r3,r4,r3
   1ac2c:	28c01915 	stw	r3,100(r5)
   1ac30:	10c0020c 	andi	r3,r2,8
   1ac34:	1800a526 	beq	r3,zero,1aecc <___vfiprintf_internal_r+0x310>
   1ac38:	d9002017 	ldw	r4,128(sp)
   1ac3c:	20c00417 	ldw	r3,16(r4)
   1ac40:	1800a226 	beq	r3,zero,1aecc <___vfiprintf_internal_r+0x310>
   1ac44:	1080068c 	andi	r2,r2,26
   1ac48:	00c00284 	movi	r3,10
   1ac4c:	10c0a826 	beq	r2,r3,1aef0 <___vfiprintf_internal_r+0x334>
   1ac50:	d9001a04 	addi	r4,sp,104
   1ac54:	d94019c4 	addi	r5,sp,103
   1ac58:	048000f4 	movhi	r18,3
   1ac5c:	2145c83a 	sub	r2,r4,r5
   1ac60:	94ae6d04 	addi	r18,r18,-17996
   1ac64:	d9001e15 	stw	r4,120(sp)
   1ac68:	d9401f15 	stw	r5,124(sp)
   1ac6c:	dec01a15 	stw	sp,104(sp)
   1ac70:	d8001c15 	stw	zero,112(sp)
   1ac74:	d8001b15 	stw	zero,108(sp)
   1ac78:	d811883a 	mov	r8,sp
   1ac7c:	d8002615 	stw	zero,152(sp)
   1ac80:	d8002415 	stw	zero,144(sp)
   1ac84:	d8802815 	stw	r2,160(sp)
   1ac88:	a82d883a 	mov	r22,r21
   1ac8c:	b0800007 	ldb	r2,0(r22)
   1ac90:	10040d26 	beq	r2,zero,1bcc8 <___vfiprintf_internal_r+0x110c>
   1ac94:	00c00944 	movi	r3,37
   1ac98:	b029883a 	mov	r20,r22
   1ac9c:	10c0021e 	bne	r2,r3,1aca8 <___vfiprintf_internal_r+0xec>
   1aca0:	00001606 	br	1acfc <___vfiprintf_internal_r+0x140>
   1aca4:	10c00326 	beq	r2,r3,1acb4 <___vfiprintf_internal_r+0xf8>
   1aca8:	a5000044 	addi	r20,r20,1
   1acac:	a0800007 	ldb	r2,0(r20)
   1acb0:	103ffc1e 	bne	r2,zero,1aca4 <__alt_data_end+0xfc01aca4>
   1acb4:	a5a1c83a 	sub	r16,r20,r22
   1acb8:	80001026 	beq	r16,zero,1acfc <___vfiprintf_internal_r+0x140>
   1acbc:	d8c01c17 	ldw	r3,112(sp)
   1acc0:	d8801b17 	ldw	r2,108(sp)
   1acc4:	45800015 	stw	r22,0(r8)
   1acc8:	80c7883a 	add	r3,r16,r3
   1accc:	10800044 	addi	r2,r2,1
   1acd0:	44000115 	stw	r16,4(r8)
   1acd4:	d8c01c15 	stw	r3,112(sp)
   1acd8:	d8801b15 	stw	r2,108(sp)
   1acdc:	010001c4 	movi	r4,7
   1ace0:	2080750e 	bge	r4,r2,1aeb8 <___vfiprintf_internal_r+0x2fc>
   1ace4:	1803951e 	bne	r3,zero,1bb3c <___vfiprintf_internal_r+0xf80>
   1ace8:	d8c02417 	ldw	r3,144(sp)
   1acec:	d8001b15 	stw	zero,108(sp)
   1acf0:	d811883a 	mov	r8,sp
   1acf4:	1c07883a 	add	r3,r3,r16
   1acf8:	d8c02415 	stw	r3,144(sp)
   1acfc:	a0800007 	ldb	r2,0(r20)
   1ad00:	1002e026 	beq	r2,zero,1b884 <___vfiprintf_internal_r+0xcc8>
   1ad04:	a5800044 	addi	r22,r20,1
   1ad08:	a0c00047 	ldb	r3,1(r20)
   1ad0c:	d8001d85 	stb	zero,118(sp)
   1ad10:	0027883a 	mov	r19,zero
   1ad14:	d8002305 	stb	zero,140(sp)
   1ad18:	043fffc4 	movi	r16,-1
   1ad1c:	d8002515 	stw	zero,148(sp)
   1ad20:	0023883a 	mov	r17,zero
   1ad24:	05001604 	movi	r20,88
   1ad28:	05400244 	movi	r21,9
   1ad2c:	402f883a 	mov	r23,r8
   1ad30:	b5800044 	addi	r22,r22,1
   1ad34:	18bff804 	addi	r2,r3,-32
   1ad38:	a0827736 	bltu	r20,r2,1b718 <___vfiprintf_internal_r+0xb5c>
   1ad3c:	100490ba 	slli	r2,r2,2
   1ad40:	010000b4 	movhi	r4,2
   1ad44:	212b5504 	addi	r4,r4,-21164
   1ad48:	1105883a 	add	r2,r2,r4
   1ad4c:	10800017 	ldw	r2,0(r2)
   1ad50:	1000683a 	jmp	r2
   1ad54:	0001b418 	cmpnei	zero,zero,1744
   1ad58:	0001b718 	cmpnei	zero,zero,1756
   1ad5c:	0001b718 	cmpnei	zero,zero,1756
   1ad60:	0001b434 	movhi	zero,1744
   1ad64:	0001b718 	cmpnei	zero,zero,1756
   1ad68:	0001b718 	cmpnei	zero,zero,1756
   1ad6c:	0001b718 	cmpnei	zero,zero,1756
   1ad70:	0001b718 	cmpnei	zero,zero,1756
   1ad74:	0001b718 	cmpnei	zero,zero,1756
   1ad78:	0001b718 	cmpnei	zero,zero,1756
   1ad7c:	0001b63c 	xorhi	zero,zero,1752
   1ad80:	0001b660 	cmpeqi	zero,zero,1753
   1ad84:	0001b718 	cmpnei	zero,zero,1756
   1ad88:	0001af58 	cmpnei	zero,zero,1725
   1ad8c:	0001b674 	movhi	zero,1753
   1ad90:	0001b718 	cmpnei	zero,zero,1756
   1ad94:	0001b440 	call	1b44 <_ZN3USB4TaskEv+0x328>
   1ad98:	0001b44c 	andi	zero,zero,1745
   1ad9c:	0001b44c 	andi	zero,zero,1745
   1ada0:	0001b44c 	andi	zero,zero,1745
   1ada4:	0001b44c 	andi	zero,zero,1745
   1ada8:	0001b44c 	andi	zero,zero,1745
   1adac:	0001b44c 	andi	zero,zero,1745
   1adb0:	0001b44c 	andi	zero,zero,1745
   1adb4:	0001b44c 	andi	zero,zero,1745
   1adb8:	0001b44c 	andi	zero,zero,1745
   1adbc:	0001b718 	cmpnei	zero,zero,1756
   1adc0:	0001b718 	cmpnei	zero,zero,1756
   1adc4:	0001b718 	cmpnei	zero,zero,1756
   1adc8:	0001b718 	cmpnei	zero,zero,1756
   1adcc:	0001b718 	cmpnei	zero,zero,1756
   1add0:	0001b718 	cmpnei	zero,zero,1756
   1add4:	0001b718 	cmpnei	zero,zero,1756
   1add8:	0001b718 	cmpnei	zero,zero,1756
   1addc:	0001b718 	cmpnei	zero,zero,1756
   1ade0:	0001b718 	cmpnei	zero,zero,1756
   1ade4:	0001b48c 	andi	zero,zero,1746
   1ade8:	0001b718 	cmpnei	zero,zero,1756
   1adec:	0001b718 	cmpnei	zero,zero,1756
   1adf0:	0001b718 	cmpnei	zero,zero,1756
   1adf4:	0001b718 	cmpnei	zero,zero,1756
   1adf8:	0001b718 	cmpnei	zero,zero,1756
   1adfc:	0001b718 	cmpnei	zero,zero,1756
   1ae00:	0001b718 	cmpnei	zero,zero,1756
   1ae04:	0001b718 	cmpnei	zero,zero,1756
   1ae08:	0001b718 	cmpnei	zero,zero,1756
   1ae0c:	0001b718 	cmpnei	zero,zero,1756
   1ae10:	0001b4c8 	cmpgei	zero,zero,1747
   1ae14:	0001b718 	cmpnei	zero,zero,1756
   1ae18:	0001b718 	cmpnei	zero,zero,1756
   1ae1c:	0001b718 	cmpnei	zero,zero,1756
   1ae20:	0001b718 	cmpnei	zero,zero,1756
   1ae24:	0001b718 	cmpnei	zero,zero,1756
   1ae28:	0001b524 	muli	zero,zero,1748
   1ae2c:	0001b718 	cmpnei	zero,zero,1756
   1ae30:	0001b718 	cmpnei	zero,zero,1756
   1ae34:	0001b598 	cmpnei	zero,zero,1750
   1ae38:	0001b718 	cmpnei	zero,zero,1756
   1ae3c:	0001b718 	cmpnei	zero,zero,1756
   1ae40:	0001b718 	cmpnei	zero,zero,1756
   1ae44:	0001b718 	cmpnei	zero,zero,1756
   1ae48:	0001b718 	cmpnei	zero,zero,1756
   1ae4c:	0001b718 	cmpnei	zero,zero,1756
   1ae50:	0001b718 	cmpnei	zero,zero,1756
   1ae54:	0001b718 	cmpnei	zero,zero,1756
   1ae58:	0001b718 	cmpnei	zero,zero,1756
   1ae5c:	0001b718 	cmpnei	zero,zero,1756
   1ae60:	0001b340 	call	1b34 <_ZN3USB4TaskEv+0x318>
   1ae64:	0001b370 	cmpltui	zero,zero,1741
   1ae68:	0001b718 	cmpnei	zero,zero,1756
   1ae6c:	0001b718 	cmpnei	zero,zero,1756
   1ae70:	0001b718 	cmpnei	zero,zero,1756
   1ae74:	0001b6c0 	call	1b6c <_ZN3USB4TaskEv+0x350>
   1ae78:	0001b370 	cmpltui	zero,zero,1741
   1ae7c:	0001b718 	cmpnei	zero,zero,1756
   1ae80:	0001b718 	cmpnei	zero,zero,1756
   1ae84:	0001b218 	cmpnei	zero,zero,1736
   1ae88:	0001b718 	cmpnei	zero,zero,1756
   1ae8c:	0001b22c 	andhi	zero,zero,1736
   1ae90:	0001b264 	muli	zero,zero,1737
   1ae94:	0001af64 	muli	zero,zero,1725
   1ae98:	0001b20c 	andi	zero,zero,1736
   1ae9c:	0001b718 	cmpnei	zero,zero,1756
   1aea0:	0001b5d8 	cmpnei	zero,zero,1751
   1aea4:	0001b718 	cmpnei	zero,zero,1756
   1aea8:	0001b624 	muli	zero,zero,1752
   1aeac:	0001b718 	cmpnei	zero,zero,1756
   1aeb0:	0001b718 	cmpnei	zero,zero,1756
   1aeb4:	0001b2e8 	cmpgeui	zero,zero,1739
   1aeb8:	42000204 	addi	r8,r8,8
   1aebc:	d8c02417 	ldw	r3,144(sp)
   1aec0:	1c07883a 	add	r3,r3,r16
   1aec4:	d8c02415 	stw	r3,144(sp)
   1aec8:	003f8c06 	br	1acfc <__alt_data_end+0xfc01acfc>
   1aecc:	d9402017 	ldw	r5,128(sp)
   1aed0:	d9002117 	ldw	r4,132(sp)
   1aed4:	0014c4c0 	call	14c4c <__swsetup_r>
   1aed8:	1003c11e 	bne	r2,zero,1bde0 <___vfiprintf_internal_r+0x1224>
   1aedc:	d9402017 	ldw	r5,128(sp)
   1aee0:	00c00284 	movi	r3,10
   1aee4:	2880030b 	ldhu	r2,12(r5)
   1aee8:	1080068c 	andi	r2,r2,26
   1aeec:	10ff581e 	bne	r2,r3,1ac50 <__alt_data_end+0xfc01ac50>
   1aef0:	d8c02017 	ldw	r3,128(sp)
   1aef4:	1880038f 	ldh	r2,14(r3)
   1aef8:	103f5516 	blt	r2,zero,1ac50 <__alt_data_end+0xfc01ac50>
   1aefc:	d9c02217 	ldw	r7,136(sp)
   1af00:	d9002117 	ldw	r4,132(sp)
   1af04:	a80d883a 	mov	r6,r21
   1af08:	180b883a 	mov	r5,r3
   1af0c:	001c0e40 	call	1c0e4 <__sbprintf>
   1af10:	dfc03517 	ldw	ra,212(sp)
   1af14:	df003417 	ldw	fp,208(sp)
   1af18:	ddc03317 	ldw	r23,204(sp)
   1af1c:	dd803217 	ldw	r22,200(sp)
   1af20:	dd403117 	ldw	r21,196(sp)
   1af24:	dd003017 	ldw	r20,192(sp)
   1af28:	dcc02f17 	ldw	r19,188(sp)
   1af2c:	dc802e17 	ldw	r18,184(sp)
   1af30:	dc402d17 	ldw	r17,180(sp)
   1af34:	dc002c17 	ldw	r16,176(sp)
   1af38:	dec03604 	addi	sp,sp,216
   1af3c:	f800283a 	ret
   1af40:	0016c580 	call	16c58 <__sinit>
   1af44:	003f2f06 	br	1ac04 <__alt_data_end+0xfc01ac04>
   1af48:	d8c02517 	ldw	r3,148(sp)
   1af4c:	d8802215 	stw	r2,136(sp)
   1af50:	00c7c83a 	sub	r3,zero,r3
   1af54:	d8c02515 	stw	r3,148(sp)
   1af58:	8c400114 	ori	r17,r17,4
   1af5c:	b0c00007 	ldb	r3,0(r22)
   1af60:	003f7306 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1af64:	00800c04 	movi	r2,48
   1af68:	d9402217 	ldw	r5,136(sp)
   1af6c:	d8801d05 	stb	r2,116(sp)
   1af70:	00801e04 	movi	r2,120
   1af74:	d8801d45 	stb	r2,117(sp)
   1af78:	d8001d85 	stb	zero,118(sp)
   1af7c:	b811883a 	mov	r8,r23
   1af80:	28c00104 	addi	r3,r5,4
   1af84:	2cc00017 	ldw	r19,0(r5)
   1af88:	0029883a 	mov	r20,zero
   1af8c:	88800094 	ori	r2,r17,2
   1af90:	80032516 	blt	r16,zero,1bc28 <___vfiprintf_internal_r+0x106c>
   1af94:	00bfdfc4 	movi	r2,-129
   1af98:	88a2703a 	and	r17,r17,r2
   1af9c:	d8c02215 	stw	r3,136(sp)
   1afa0:	8c400094 	ori	r17,r17,2
   1afa4:	98032a1e 	bne	r19,zero,1bc50 <___vfiprintf_internal_r+0x1094>
   1afa8:	008000f4 	movhi	r2,3
   1afac:	10adfd04 	addi	r2,r2,-18444
   1afb0:	d8802615 	stw	r2,152(sp)
   1afb4:	002b883a 	mov	r21,zero
   1afb8:	8001741e 	bne	r16,zero,1b58c <___vfiprintf_internal_r+0x9d0>
   1afbc:	0021883a 	mov	r16,zero
   1afc0:	0029883a 	mov	r20,zero
   1afc4:	ddc01a04 	addi	r23,sp,104
   1afc8:	8027883a 	mov	r19,r16
   1afcc:	8500010e 	bge	r16,r20,1afd4 <___vfiprintf_internal_r+0x418>
   1afd0:	a027883a 	mov	r19,r20
   1afd4:	ad403fcc 	andi	r21,r21,255
   1afd8:	ad40201c 	xori	r21,r21,128
   1afdc:	ad7fe004 	addi	r21,r21,-128
   1afe0:	a8000126 	beq	r21,zero,1afe8 <___vfiprintf_internal_r+0x42c>
   1afe4:	9cc00044 	addi	r19,r19,1
   1afe8:	89c0008c 	andi	r7,r17,2
   1afec:	38000126 	beq	r7,zero,1aff4 <___vfiprintf_internal_r+0x438>
   1aff0:	9cc00084 	addi	r19,r19,2
   1aff4:	88c0210c 	andi	r3,r17,132
   1aff8:	1801dd1e 	bne	r3,zero,1b770 <___vfiprintf_internal_r+0xbb4>
   1affc:	d9402517 	ldw	r5,148(sp)
   1b000:	2cebc83a 	sub	r21,r5,r19
   1b004:	0541da0e 	bge	zero,r21,1b770 <___vfiprintf_internal_r+0xbb4>
   1b008:	07000404 	movi	fp,16
   1b00c:	d8801c17 	ldw	r2,112(sp)
   1b010:	e543be0e 	bge	fp,r21,1bf0c <___vfiprintf_internal_r+0x1350>
   1b014:	014000f4 	movhi	r5,3
   1b018:	296e7104 	addi	r5,r5,-17980
   1b01c:	dc002715 	stw	r16,156(sp)
   1b020:	d9801b17 	ldw	r6,108(sp)
   1b024:	a821883a 	mov	r16,r21
   1b028:	d9402315 	stw	r5,140(sp)
   1b02c:	028001c4 	movi	r10,7
   1b030:	d9c02915 	stw	r7,164(sp)
   1b034:	182b883a 	mov	r21,r3
   1b038:	00000506 	br	1b050 <___vfiprintf_internal_r+0x494>
   1b03c:	31000084 	addi	r4,r6,2
   1b040:	42000204 	addi	r8,r8,8
   1b044:	180d883a 	mov	r6,r3
   1b048:	843ffc04 	addi	r16,r16,-16
   1b04c:	e4000f0e 	bge	fp,r16,1b08c <___vfiprintf_internal_r+0x4d0>
   1b050:	010000f4 	movhi	r4,3
   1b054:	10800404 	addi	r2,r2,16
   1b058:	30c00044 	addi	r3,r6,1
   1b05c:	212e7104 	addi	r4,r4,-17980
   1b060:	41000015 	stw	r4,0(r8)
   1b064:	47000115 	stw	fp,4(r8)
   1b068:	d8801c15 	stw	r2,112(sp)
   1b06c:	d8c01b15 	stw	r3,108(sp)
   1b070:	50fff20e 	bge	r10,r3,1b03c <__alt_data_end+0xfc01b03c>
   1b074:	1001b21e 	bne	r2,zero,1b740 <___vfiprintf_internal_r+0xb84>
   1b078:	843ffc04 	addi	r16,r16,-16
   1b07c:	000d883a 	mov	r6,zero
   1b080:	01000044 	movi	r4,1
   1b084:	d811883a 	mov	r8,sp
   1b088:	e43ff116 	blt	fp,r16,1b050 <__alt_data_end+0xfc01b050>
   1b08c:	a807883a 	mov	r3,r21
   1b090:	d9c02917 	ldw	r7,164(sp)
   1b094:	802b883a 	mov	r21,r16
   1b098:	dc002717 	ldw	r16,156(sp)
   1b09c:	d9402317 	ldw	r5,140(sp)
   1b0a0:	a885883a 	add	r2,r21,r2
   1b0a4:	45400115 	stw	r21,4(r8)
   1b0a8:	41400015 	stw	r5,0(r8)
   1b0ac:	d8801c15 	stw	r2,112(sp)
   1b0b0:	d9001b15 	stw	r4,108(sp)
   1b0b4:	014001c4 	movi	r5,7
   1b0b8:	29026216 	blt	r5,r4,1ba44 <___vfiprintf_internal_r+0xe88>
   1b0bc:	d9801d87 	ldb	r6,118(sp)
   1b0c0:	42000204 	addi	r8,r8,8
   1b0c4:	21400044 	addi	r5,r4,1
   1b0c8:	3001ae1e 	bne	r6,zero,1b784 <___vfiprintf_internal_r+0xbc8>
   1b0cc:	3801bb26 	beq	r7,zero,1b7bc <___vfiprintf_internal_r+0xc00>
   1b0d0:	d9001d04 	addi	r4,sp,116
   1b0d4:	10800084 	addi	r2,r2,2
   1b0d8:	41000015 	stw	r4,0(r8)
   1b0dc:	01000084 	movi	r4,2
   1b0e0:	41000115 	stw	r4,4(r8)
   1b0e4:	d8801c15 	stw	r2,112(sp)
   1b0e8:	d9401b15 	stw	r5,108(sp)
   1b0ec:	010001c4 	movi	r4,7
   1b0f0:	2142680e 	bge	r4,r5,1ba94 <___vfiprintf_internal_r+0xed8>
   1b0f4:	1002b11e 	bne	r2,zero,1bbbc <___vfiprintf_internal_r+0x1000>
   1b0f8:	01802004 	movi	r6,128
   1b0fc:	01400044 	movi	r5,1
   1b100:	0009883a 	mov	r4,zero
   1b104:	d811883a 	mov	r8,sp
   1b108:	1981ae1e 	bne	r3,r6,1b7c4 <___vfiprintf_internal_r+0xc08>
   1b10c:	d8c02517 	ldw	r3,148(sp)
   1b110:	1cf9c83a 	sub	fp,r3,r19
   1b114:	0701ab0e 	bge	zero,fp,1b7c4 <___vfiprintf_internal_r+0xc08>
   1b118:	05400404 	movi	r21,16
   1b11c:	af03a90e 	bge	r21,fp,1bfc4 <___vfiprintf_internal_r+0x1408>
   1b120:	014000f4 	movhi	r5,3
   1b124:	296e6d04 	addi	r5,r5,-17996
   1b128:	d9402315 	stw	r5,140(sp)
   1b12c:	01c001c4 	movi	r7,7
   1b130:	00000506 	br	1b148 <___vfiprintf_internal_r+0x58c>
   1b134:	21800084 	addi	r6,r4,2
   1b138:	42000204 	addi	r8,r8,8
   1b13c:	1809883a 	mov	r4,r3
   1b140:	e73ffc04 	addi	fp,fp,-16
   1b144:	af000d0e 	bge	r21,fp,1b17c <___vfiprintf_internal_r+0x5c0>
   1b148:	10800404 	addi	r2,r2,16
   1b14c:	20c00044 	addi	r3,r4,1
   1b150:	44800015 	stw	r18,0(r8)
   1b154:	45400115 	stw	r21,4(r8)
   1b158:	d8801c15 	stw	r2,112(sp)
   1b15c:	d8c01b15 	stw	r3,108(sp)
   1b160:	38fff40e 	bge	r7,r3,1b134 <__alt_data_end+0xfc01b134>
   1b164:	10022b1e 	bne	r2,zero,1ba14 <___vfiprintf_internal_r+0xe58>
   1b168:	e73ffc04 	addi	fp,fp,-16
   1b16c:	01800044 	movi	r6,1
   1b170:	0009883a 	mov	r4,zero
   1b174:	d811883a 	mov	r8,sp
   1b178:	af3ff316 	blt	r21,fp,1b148 <__alt_data_end+0xfc01b148>
   1b17c:	d8c02317 	ldw	r3,140(sp)
   1b180:	1705883a 	add	r2,r2,fp
   1b184:	47000115 	stw	fp,4(r8)
   1b188:	40c00015 	stw	r3,0(r8)
   1b18c:	d8801c15 	stw	r2,112(sp)
   1b190:	d9801b15 	stw	r6,108(sp)
   1b194:	00c001c4 	movi	r3,7
   1b198:	19829416 	blt	r3,r6,1bbec <___vfiprintf_internal_r+0x1030>
   1b19c:	8521c83a 	sub	r16,r16,r20
   1b1a0:	42000204 	addi	r8,r8,8
   1b1a4:	31400044 	addi	r5,r6,1
   1b1a8:	3009883a 	mov	r4,r6
   1b1ac:	04018716 	blt	zero,r16,1b7cc <___vfiprintf_internal_r+0xc10>
   1b1b0:	a085883a 	add	r2,r20,r2
   1b1b4:	45c00015 	stw	r23,0(r8)
   1b1b8:	45000115 	stw	r20,4(r8)
   1b1bc:	d8801c15 	stw	r2,112(sp)
   1b1c0:	d9401b15 	stw	r5,108(sp)
   1b1c4:	00c001c4 	movi	r3,7
   1b1c8:	1941c20e 	bge	r3,r5,1b8d4 <___vfiprintf_internal_r+0xd18>
   1b1cc:	1002531e 	bne	r2,zero,1bb1c <___vfiprintf_internal_r+0xf60>
   1b1d0:	d8001b15 	stw	zero,108(sp)
   1b1d4:	8c40010c 	andi	r17,r17,4
   1b1d8:	88023226 	beq	r17,zero,1baa4 <___vfiprintf_internal_r+0xee8>
   1b1dc:	d9002517 	ldw	r4,148(sp)
   1b1e0:	24e3c83a 	sub	r17,r4,r19
   1b1e4:	04432916 	blt	zero,r17,1be8c <___vfiprintf_internal_r+0x12d0>
   1b1e8:	d8802517 	ldw	r2,148(sp)
   1b1ec:	14c0010e 	bge	r2,r19,1b1f4 <___vfiprintf_internal_r+0x638>
   1b1f0:	9805883a 	mov	r2,r19
   1b1f4:	d8c02417 	ldw	r3,144(sp)
   1b1f8:	1887883a 	add	r3,r3,r2
   1b1fc:	d8c02415 	stw	r3,144(sp)
   1b200:	d8001b15 	stw	zero,108(sp)
   1b204:	d811883a 	mov	r8,sp
   1b208:	003ea006 	br	1ac8c <__alt_data_end+0xfc01ac8c>
   1b20c:	8c400814 	ori	r17,r17,32
   1b210:	b0c00007 	ldb	r3,0(r22)
   1b214:	003ec606 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b218:	b0c00007 	ldb	r3,0(r22)
   1b21c:	00801b04 	movi	r2,108
   1b220:	18832026 	beq	r3,r2,1bea4 <___vfiprintf_internal_r+0x12e8>
   1b224:	8c400414 	ori	r17,r17,16
   1b228:	003ec106 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b22c:	9cc03fcc 	andi	r19,r19,255
   1b230:	b811883a 	mov	r8,r23
   1b234:	9803981e 	bne	r19,zero,1c098 <___vfiprintf_internal_r+0x14dc>
   1b238:	8880080c 	andi	r2,r17,32
   1b23c:	1002be26 	beq	r2,zero,1bd38 <___vfiprintf_internal_r+0x117c>
   1b240:	d9002217 	ldw	r4,136(sp)
   1b244:	d9402417 	ldw	r5,144(sp)
   1b248:	20800017 	ldw	r2,0(r4)
   1b24c:	2807d7fa 	srai	r3,r5,31
   1b250:	21000104 	addi	r4,r4,4
   1b254:	d9002215 	stw	r4,136(sp)
   1b258:	11400015 	stw	r5,0(r2)
   1b25c:	10c00115 	stw	r3,4(r2)
   1b260:	003e8a06 	br	1ac8c <__alt_data_end+0xfc01ac8c>
   1b264:	9cc03fcc 	andi	r19,r19,255
   1b268:	b811883a 	mov	r8,r23
   1b26c:	9803871e 	bne	r19,zero,1c08c <___vfiprintf_internal_r+0x14d0>
   1b270:	8880080c 	andi	r2,r17,32
   1b274:	10009a26 	beq	r2,zero,1b4e0 <___vfiprintf_internal_r+0x924>
   1b278:	d9002217 	ldw	r4,136(sp)
   1b27c:	d8001d85 	stb	zero,118(sp)
   1b280:	20800204 	addi	r2,r4,8
   1b284:	24c00017 	ldw	r19,0(r4)
   1b288:	25000117 	ldw	r20,4(r4)
   1b28c:	8002a416 	blt	r16,zero,1bd20 <___vfiprintf_internal_r+0x1164>
   1b290:	013fdfc4 	movi	r4,-129
   1b294:	9d06b03a 	or	r3,r19,r20
   1b298:	d8802215 	stw	r2,136(sp)
   1b29c:	8922703a 	and	r17,r17,r4
   1b2a0:	18009b26 	beq	r3,zero,1b510 <___vfiprintf_internal_r+0x954>
   1b2a4:	002b883a 	mov	r21,zero
   1b2a8:	ddc01a04 	addi	r23,sp,104
   1b2ac:	9806d0fa 	srli	r3,r19,3
   1b2b0:	a008977a 	slli	r4,r20,29
   1b2b4:	a028d0fa 	srli	r20,r20,3
   1b2b8:	9cc001cc 	andi	r19,r19,7
   1b2bc:	98800c04 	addi	r2,r19,48
   1b2c0:	bdffffc4 	addi	r23,r23,-1
   1b2c4:	20e6b03a 	or	r19,r4,r3
   1b2c8:	b8800005 	stb	r2,0(r23)
   1b2cc:	9d06b03a 	or	r3,r19,r20
   1b2d0:	183ff61e 	bne	r3,zero,1b2ac <__alt_data_end+0xfc01b2ac>
   1b2d4:	88c0004c 	andi	r3,r17,1
   1b2d8:	18021f1e 	bne	r3,zero,1bb58 <___vfiprintf_internal_r+0xf9c>
   1b2dc:	d9401e17 	ldw	r5,120(sp)
   1b2e0:	2de9c83a 	sub	r20,r5,r23
   1b2e4:	003f3806 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1b2e8:	9cc03fcc 	andi	r19,r19,255
   1b2ec:	b811883a 	mov	r8,r23
   1b2f0:	98034f1e 	bne	r19,zero,1c030 <___vfiprintf_internal_r+0x1474>
   1b2f4:	008000f4 	movhi	r2,3
   1b2f8:	10adfd04 	addi	r2,r2,-18444
   1b2fc:	d8802615 	stw	r2,152(sp)
   1b300:	8880080c 	andi	r2,r17,32
   1b304:	1000ac26 	beq	r2,zero,1b5b8 <___vfiprintf_internal_r+0x9fc>
   1b308:	d9002217 	ldw	r4,136(sp)
   1b30c:	24c00017 	ldw	r19,0(r4)
   1b310:	25000117 	ldw	r20,4(r4)
   1b314:	21000204 	addi	r4,r4,8
   1b318:	d9002215 	stw	r4,136(sp)
   1b31c:	8880004c 	andi	r2,r17,1
   1b320:	1001e726 	beq	r2,zero,1bac0 <___vfiprintf_internal_r+0xf04>
   1b324:	9d04b03a 	or	r2,r19,r20
   1b328:	10025c1e 	bne	r2,zero,1bc9c <___vfiprintf_internal_r+0x10e0>
   1b32c:	d8001d85 	stb	zero,118(sp)
   1b330:	80024416 	blt	r16,zero,1bc44 <___vfiprintf_internal_r+0x1088>
   1b334:	00bfdfc4 	movi	r2,-129
   1b338:	88a2703a 	and	r17,r17,r2
   1b33c:	003f1d06 	br	1afb4 <__alt_data_end+0xfc01afb4>
   1b340:	d8c02217 	ldw	r3,136(sp)
   1b344:	04c00044 	movi	r19,1
   1b348:	b811883a 	mov	r8,r23
   1b34c:	18800017 	ldw	r2,0(r3)
   1b350:	18c00104 	addi	r3,r3,4
   1b354:	d8001d85 	stb	zero,118(sp)
   1b358:	d8801005 	stb	r2,64(sp)
   1b35c:	d8c02215 	stw	r3,136(sp)
   1b360:	9829883a 	mov	r20,r19
   1b364:	ddc01004 	addi	r23,sp,64
   1b368:	0021883a 	mov	r16,zero
   1b36c:	003f1e06 	br	1afe8 <__alt_data_end+0xfc01afe8>
   1b370:	9cc03fcc 	andi	r19,r19,255
   1b374:	b811883a 	mov	r8,r23
   1b378:	9803331e 	bne	r19,zero,1c048 <___vfiprintf_internal_r+0x148c>
   1b37c:	8880080c 	andi	r2,r17,32
   1b380:	10004826 	beq	r2,zero,1b4a4 <___vfiprintf_internal_r+0x8e8>
   1b384:	d9002217 	ldw	r4,136(sp)
   1b388:	20800117 	ldw	r2,4(r4)
   1b38c:	24c00017 	ldw	r19,0(r4)
   1b390:	21000204 	addi	r4,r4,8
   1b394:	d9002215 	stw	r4,136(sp)
   1b398:	1029883a 	mov	r20,r2
   1b39c:	10024c16 	blt	r2,zero,1bcd0 <___vfiprintf_internal_r+0x1114>
   1b3a0:	dd401d83 	ldbu	r21,118(sp)
   1b3a4:	80007116 	blt	r16,zero,1b56c <___vfiprintf_internal_r+0x9b0>
   1b3a8:	00ffdfc4 	movi	r3,-129
   1b3ac:	9d04b03a 	or	r2,r19,r20
   1b3b0:	88e2703a 	and	r17,r17,r3
   1b3b4:	1000d126 	beq	r2,zero,1b6fc <___vfiprintf_internal_r+0xb40>
   1b3b8:	a0023526 	beq	r20,zero,1bc90 <___vfiprintf_internal_r+0x10d4>
   1b3bc:	ddc01a04 	addi	r23,sp,104
   1b3c0:	4039883a 	mov	fp,r8
   1b3c4:	9809883a 	mov	r4,r19
   1b3c8:	a00b883a 	mov	r5,r20
   1b3cc:	01800284 	movi	r6,10
   1b3d0:	000f883a 	mov	r7,zero
   1b3d4:	001d0e80 	call	1d0e8 <__umoddi3>
   1b3d8:	10800c04 	addi	r2,r2,48
   1b3dc:	bdffffc4 	addi	r23,r23,-1
   1b3e0:	9809883a 	mov	r4,r19
   1b3e4:	a00b883a 	mov	r5,r20
   1b3e8:	b8800005 	stb	r2,0(r23)
   1b3ec:	01800284 	movi	r6,10
   1b3f0:	000f883a 	mov	r7,zero
   1b3f4:	001caec0 	call	1caec <__udivdi3>
   1b3f8:	1027883a 	mov	r19,r2
   1b3fc:	10c4b03a 	or	r2,r2,r3
   1b400:	1829883a 	mov	r20,r3
   1b404:	103fef1e 	bne	r2,zero,1b3c4 <__alt_data_end+0xfc01b3c4>
   1b408:	d9001e17 	ldw	r4,120(sp)
   1b40c:	e011883a 	mov	r8,fp
   1b410:	25e9c83a 	sub	r20,r4,r23
   1b414:	003eec06 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1b418:	d8802307 	ldb	r2,140(sp)
   1b41c:	1002361e 	bne	r2,zero,1bcf8 <___vfiprintf_internal_r+0x113c>
   1b420:	00c00804 	movi	r3,32
   1b424:	d8c02305 	stb	r3,140(sp)
   1b428:	04c00044 	movi	r19,1
   1b42c:	b0c00007 	ldb	r3,0(r22)
   1b430:	003e3f06 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b434:	8c400054 	ori	r17,r17,1
   1b438:	b0c00007 	ldb	r3,0(r22)
   1b43c:	003e3c06 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b440:	8c402014 	ori	r17,r17,128
   1b444:	b0c00007 	ldb	r3,0(r22)
   1b448:	003e3906 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b44c:	dc002715 	stw	r16,156(sp)
   1b450:	d8002515 	stw	zero,148(sp)
   1b454:	1f3ff404 	addi	fp,r3,-48
   1b458:	0009883a 	mov	r4,zero
   1b45c:	b021883a 	mov	r16,r22
   1b460:	01400284 	movi	r5,10
   1b464:	000d8d40 	call	d8d4 <__mulsi3>
   1b468:	80c00007 	ldb	r3,0(r16)
   1b46c:	e089883a 	add	r4,fp,r2
   1b470:	b5800044 	addi	r22,r22,1
   1b474:	1f3ff404 	addi	fp,r3,-48
   1b478:	b021883a 	mov	r16,r22
   1b47c:	af3ff82e 	bgeu	r21,fp,1b460 <__alt_data_end+0xfc01b460>
   1b480:	d9002515 	stw	r4,148(sp)
   1b484:	dc002717 	ldw	r16,156(sp)
   1b488:	003e2a06 	br	1ad34 <__alt_data_end+0xfc01ad34>
   1b48c:	9cc03fcc 	andi	r19,r19,255
   1b490:	b811883a 	mov	r8,r23
   1b494:	9802e91e 	bne	r19,zero,1c03c <___vfiprintf_internal_r+0x1480>
   1b498:	8c400414 	ori	r17,r17,16
   1b49c:	8880080c 	andi	r2,r17,32
   1b4a0:	103fb81e 	bne	r2,zero,1b384 <__alt_data_end+0xfc01b384>
   1b4a4:	8880040c 	andi	r2,r17,16
   1b4a8:	10022e26 	beq	r2,zero,1bd64 <___vfiprintf_internal_r+0x11a8>
   1b4ac:	d9402217 	ldw	r5,136(sp)
   1b4b0:	2cc00017 	ldw	r19,0(r5)
   1b4b4:	29400104 	addi	r5,r5,4
   1b4b8:	d9402215 	stw	r5,136(sp)
   1b4bc:	9829d7fa 	srai	r20,r19,31
   1b4c0:	a005883a 	mov	r2,r20
   1b4c4:	003fb506 	br	1b39c <__alt_data_end+0xfc01b39c>
   1b4c8:	9cc03fcc 	andi	r19,r19,255
   1b4cc:	b811883a 	mov	r8,r23
   1b4d0:	9802fa1e 	bne	r19,zero,1c0bc <___vfiprintf_internal_r+0x1500>
   1b4d4:	8c400414 	ori	r17,r17,16
   1b4d8:	8880080c 	andi	r2,r17,32
   1b4dc:	103f661e 	bne	r2,zero,1b278 <__alt_data_end+0xfc01b278>
   1b4e0:	8880040c 	andi	r2,r17,16
   1b4e4:	10020626 	beq	r2,zero,1bd00 <___vfiprintf_internal_r+0x1144>
   1b4e8:	d9402217 	ldw	r5,136(sp)
   1b4ec:	d8001d85 	stb	zero,118(sp)
   1b4f0:	0029883a 	mov	r20,zero
   1b4f4:	28800104 	addi	r2,r5,4
   1b4f8:	2cc00017 	ldw	r19,0(r5)
   1b4fc:	80020816 	blt	r16,zero,1bd20 <___vfiprintf_internal_r+0x1164>
   1b500:	00ffdfc4 	movi	r3,-129
   1b504:	d8802215 	stw	r2,136(sp)
   1b508:	88e2703a 	and	r17,r17,r3
   1b50c:	983f651e 	bne	r19,zero,1b2a4 <__alt_data_end+0xfc01b2a4>
   1b510:	002b883a 	mov	r21,zero
   1b514:	8002cf26 	beq	r16,zero,1c054 <___vfiprintf_internal_r+0x1498>
   1b518:	0027883a 	mov	r19,zero
   1b51c:	0029883a 	mov	r20,zero
   1b520:	003f6106 	br	1b2a8 <__alt_data_end+0xfc01b2a8>
   1b524:	9cc03fcc 	andi	r19,r19,255
   1b528:	b811883a 	mov	r8,r23
   1b52c:	9802e01e 	bne	r19,zero,1c0b0 <___vfiprintf_internal_r+0x14f4>
   1b530:	8c400414 	ori	r17,r17,16
   1b534:	8880080c 	andi	r2,r17,32
   1b538:	1000641e 	bne	r2,zero,1b6cc <___vfiprintf_internal_r+0xb10>
   1b53c:	8880040c 	andi	r2,r17,16
   1b540:	1001c81e 	bne	r2,zero,1bc64 <___vfiprintf_internal_r+0x10a8>
   1b544:	8880100c 	andi	r2,r17,64
   1b548:	d8001d85 	stb	zero,118(sp)
   1b54c:	1002281e 	bne	r2,zero,1bdf0 <___vfiprintf_internal_r+0x1234>
   1b550:	d9002217 	ldw	r4,136(sp)
   1b554:	0029883a 	mov	r20,zero
   1b558:	20800104 	addi	r2,r4,4
   1b55c:	24c00017 	ldw	r19,0(r4)
   1b560:	8001c60e 	bge	r16,zero,1bc7c <___vfiprintf_internal_r+0x10c0>
   1b564:	d8802215 	stw	r2,136(sp)
   1b568:	002b883a 	mov	r21,zero
   1b56c:	9d04b03a 	or	r2,r19,r20
   1b570:	103f911e 	bne	r2,zero,1b3b8 <__alt_data_end+0xfc01b3b8>
   1b574:	00800044 	movi	r2,1
   1b578:	10803fcc 	andi	r2,r2,255
   1b57c:	00c00044 	movi	r3,1
   1b580:	10c05f26 	beq	r2,r3,1b700 <___vfiprintf_internal_r+0xb44>
   1b584:	00c00084 	movi	r3,2
   1b588:	10ffe31e 	bne	r2,r3,1b518 <__alt_data_end+0xfc01b518>
   1b58c:	0027883a 	mov	r19,zero
   1b590:	0029883a 	mov	r20,zero
   1b594:	00015106 	br	1badc <___vfiprintf_internal_r+0xf20>
   1b598:	9cc03fcc 	andi	r19,r19,255
   1b59c:	b811883a 	mov	r8,r23
   1b5a0:	9802c01e 	bne	r19,zero,1c0a4 <___vfiprintf_internal_r+0x14e8>
   1b5a4:	014000f4 	movhi	r5,3
   1b5a8:	296df804 	addi	r5,r5,-18464
   1b5ac:	d9402615 	stw	r5,152(sp)
   1b5b0:	8880080c 	andi	r2,r17,32
   1b5b4:	103f541e 	bne	r2,zero,1b308 <__alt_data_end+0xfc01b308>
   1b5b8:	8880040c 	andi	r2,r17,16
   1b5bc:	1001f226 	beq	r2,zero,1bd88 <___vfiprintf_internal_r+0x11cc>
   1b5c0:	d9402217 	ldw	r5,136(sp)
   1b5c4:	0029883a 	mov	r20,zero
   1b5c8:	2cc00017 	ldw	r19,0(r5)
   1b5cc:	29400104 	addi	r5,r5,4
   1b5d0:	d9402215 	stw	r5,136(sp)
   1b5d4:	003f5106 	br	1b31c <__alt_data_end+0xfc01b31c>
   1b5d8:	d8c02217 	ldw	r3,136(sp)
   1b5dc:	b811883a 	mov	r8,r23
   1b5e0:	d8001d85 	stb	zero,118(sp)
   1b5e4:	1dc00017 	ldw	r23,0(r3)
   1b5e8:	1f000104 	addi	fp,r3,4
   1b5ec:	b8025926 	beq	r23,zero,1bf54 <___vfiprintf_internal_r+0x1398>
   1b5f0:	80023316 	blt	r16,zero,1bec0 <___vfiprintf_internal_r+0x1304>
   1b5f4:	800d883a 	mov	r6,r16
   1b5f8:	000b883a 	mov	r5,zero
   1b5fc:	b809883a 	mov	r4,r23
   1b600:	da002a15 	stw	r8,168(sp)
   1b604:	00179c40 	call	179c4 <memchr>
   1b608:	da002a17 	ldw	r8,168(sp)
   1b60c:	10026826 	beq	r2,zero,1bfb0 <___vfiprintf_internal_r+0x13f4>
   1b610:	15e9c83a 	sub	r20,r2,r23
   1b614:	dd401d83 	ldbu	r21,118(sp)
   1b618:	df002215 	stw	fp,136(sp)
   1b61c:	0021883a 	mov	r16,zero
   1b620:	003e6906 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1b624:	9cc03fcc 	andi	r19,r19,255
   1b628:	b811883a 	mov	r8,r23
   1b62c:	983fc126 	beq	r19,zero,1b534 <__alt_data_end+0xfc01b534>
   1b630:	d8c02303 	ldbu	r3,140(sp)
   1b634:	d8c01d85 	stb	r3,118(sp)
   1b638:	003fbe06 	br	1b534 <__alt_data_end+0xfc01b534>
   1b63c:	d9002217 	ldw	r4,136(sp)
   1b640:	d9402217 	ldw	r5,136(sp)
   1b644:	21000017 	ldw	r4,0(r4)
   1b648:	28800104 	addi	r2,r5,4
   1b64c:	d9002515 	stw	r4,148(sp)
   1b650:	203e3d16 	blt	r4,zero,1af48 <__alt_data_end+0xfc01af48>
   1b654:	d8802215 	stw	r2,136(sp)
   1b658:	b0c00007 	ldb	r3,0(r22)
   1b65c:	003db406 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b660:	00c00ac4 	movi	r3,43
   1b664:	d8c02305 	stb	r3,140(sp)
   1b668:	04c00044 	movi	r19,1
   1b66c:	b0c00007 	ldb	r3,0(r22)
   1b670:	003daf06 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b674:	b0c00007 	ldb	r3,0(r22)
   1b678:	01000a84 	movi	r4,42
   1b67c:	b4000044 	addi	r16,r22,1
   1b680:	19025e26 	beq	r3,r4,1bffc <___vfiprintf_internal_r+0x1440>
   1b684:	1f3ff404 	addi	fp,r3,-48
   1b688:	0009883a 	mov	r4,zero
   1b68c:	af025236 	bltu	r21,fp,1bfd8 <___vfiprintf_internal_r+0x141c>
   1b690:	01400284 	movi	r5,10
   1b694:	000d8d40 	call	d8d4 <__mulsi3>
   1b698:	80c00007 	ldb	r3,0(r16)
   1b69c:	1709883a 	add	r4,r2,fp
   1b6a0:	85800044 	addi	r22,r16,1
   1b6a4:	1f3ff404 	addi	fp,r3,-48
   1b6a8:	b021883a 	mov	r16,r22
   1b6ac:	af3ff82e 	bgeu	r21,fp,1b690 <__alt_data_end+0xfc01b690>
   1b6b0:	2021883a 	mov	r16,r4
   1b6b4:	203d9f0e 	bge	r4,zero,1ad34 <__alt_data_end+0xfc01ad34>
   1b6b8:	043fffc4 	movi	r16,-1
   1b6bc:	003d9d06 	br	1ad34 <__alt_data_end+0xfc01ad34>
   1b6c0:	8c401014 	ori	r17,r17,64
   1b6c4:	b0c00007 	ldb	r3,0(r22)
   1b6c8:	003d9906 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1b6cc:	d9002217 	ldw	r4,136(sp)
   1b6d0:	d8001d85 	stb	zero,118(sp)
   1b6d4:	20c00204 	addi	r3,r4,8
   1b6d8:	24c00017 	ldw	r19,0(r4)
   1b6dc:	25000117 	ldw	r20,4(r4)
   1b6e0:	8001e716 	blt	r16,zero,1be80 <___vfiprintf_internal_r+0x12c4>
   1b6e4:	013fdfc4 	movi	r4,-129
   1b6e8:	9d04b03a 	or	r2,r19,r20
   1b6ec:	d8c02215 	stw	r3,136(sp)
   1b6f0:	8922703a 	and	r17,r17,r4
   1b6f4:	002b883a 	mov	r21,zero
   1b6f8:	103f2f1e 	bne	r2,zero,1b3b8 <__alt_data_end+0xfc01b3b8>
   1b6fc:	803e2f26 	beq	r16,zero,1afbc <__alt_data_end+0xfc01afbc>
   1b700:	0027883a 	mov	r19,zero
   1b704:	9cc00c04 	addi	r19,r19,48
   1b708:	dcc019c5 	stb	r19,103(sp)
   1b70c:	dd002817 	ldw	r20,160(sp)
   1b710:	ddc019c4 	addi	r23,sp,103
   1b714:	003e2c06 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1b718:	9cc03fcc 	andi	r19,r19,255
   1b71c:	b811883a 	mov	r8,r23
   1b720:	9802571e 	bne	r19,zero,1c080 <___vfiprintf_internal_r+0x14c4>
   1b724:	18005726 	beq	r3,zero,1b884 <___vfiprintf_internal_r+0xcc8>
   1b728:	04c00044 	movi	r19,1
   1b72c:	d8c01005 	stb	r3,64(sp)
   1b730:	d8001d85 	stb	zero,118(sp)
   1b734:	9829883a 	mov	r20,r19
   1b738:	ddc01004 	addi	r23,sp,64
   1b73c:	003f0a06 	br	1b368 <__alt_data_end+0xfc01b368>
   1b740:	d9402017 	ldw	r5,128(sp)
   1b744:	d9002117 	ldw	r4,132(sp)
   1b748:	d9801a04 	addi	r6,sp,104
   1b74c:	da802a15 	stw	r10,168(sp)
   1b750:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1b754:	da802a17 	ldw	r10,168(sp)
   1b758:	1000501e 	bne	r2,zero,1b89c <___vfiprintf_internal_r+0xce0>
   1b75c:	d9801b17 	ldw	r6,108(sp)
   1b760:	d8801c17 	ldw	r2,112(sp)
   1b764:	d811883a 	mov	r8,sp
   1b768:	31000044 	addi	r4,r6,1
   1b76c:	003e3606 	br	1b048 <__alt_data_end+0xfc01b048>
   1b770:	d9001b17 	ldw	r4,108(sp)
   1b774:	d8801c17 	ldw	r2,112(sp)
   1b778:	21400044 	addi	r5,r4,1
   1b77c:	d9801d87 	ldb	r6,118(sp)
   1b780:	303e5226 	beq	r6,zero,1b0cc <__alt_data_end+0xfc01b0cc>
   1b784:	01800044 	movi	r6,1
   1b788:	d9001d84 	addi	r4,sp,118
   1b78c:	1185883a 	add	r2,r2,r6
   1b790:	41000015 	stw	r4,0(r8)
   1b794:	41800115 	stw	r6,4(r8)
   1b798:	d8801c15 	stw	r2,112(sp)
   1b79c:	d9401b15 	stw	r5,108(sp)
   1b7a0:	010001c4 	movi	r4,7
   1b7a4:	2140b00e 	bge	r4,r5,1ba68 <___vfiprintf_internal_r+0xeac>
   1b7a8:	1000f61e 	bne	r2,zero,1bb84 <___vfiprintf_internal_r+0xfc8>
   1b7ac:	3800b31e 	bne	r7,zero,1ba7c <___vfiprintf_internal_r+0xec0>
   1b7b0:	0009883a 	mov	r4,zero
   1b7b4:	300b883a 	mov	r5,r6
   1b7b8:	d811883a 	mov	r8,sp
   1b7bc:	01802004 	movi	r6,128
   1b7c0:	19be5226 	beq	r3,r6,1b10c <__alt_data_end+0xfc01b10c>
   1b7c4:	8521c83a 	sub	r16,r16,r20
   1b7c8:	043e790e 	bge	zero,r16,1b1b0 <__alt_data_end+0xfc01b1b0>
   1b7cc:	05400404 	movi	r21,16
   1b7d0:	ac01b00e 	bge	r21,r16,1be94 <___vfiprintf_internal_r+0x12d8>
   1b7d4:	014000f4 	movhi	r5,3
   1b7d8:	296e6d04 	addi	r5,r5,-17996
   1b7dc:	d9402315 	stw	r5,140(sp)
   1b7e0:	070001c4 	movi	fp,7
   1b7e4:	00000506 	br	1b7fc <___vfiprintf_internal_r+0xc40>
   1b7e8:	21400084 	addi	r5,r4,2
   1b7ec:	42000204 	addi	r8,r8,8
   1b7f0:	1809883a 	mov	r4,r3
   1b7f4:	843ffc04 	addi	r16,r16,-16
   1b7f8:	ac000d0e 	bge	r21,r16,1b830 <___vfiprintf_internal_r+0xc74>
   1b7fc:	10800404 	addi	r2,r2,16
   1b800:	20c00044 	addi	r3,r4,1
   1b804:	44800015 	stw	r18,0(r8)
   1b808:	45400115 	stw	r21,4(r8)
   1b80c:	d8801c15 	stw	r2,112(sp)
   1b810:	d8c01b15 	stw	r3,108(sp)
   1b814:	e0fff40e 	bge	fp,r3,1b7e8 <__alt_data_end+0xfc01b7e8>
   1b818:	1000101e 	bne	r2,zero,1b85c <___vfiprintf_internal_r+0xca0>
   1b81c:	843ffc04 	addi	r16,r16,-16
   1b820:	01400044 	movi	r5,1
   1b824:	0009883a 	mov	r4,zero
   1b828:	d811883a 	mov	r8,sp
   1b82c:	ac3ff316 	blt	r21,r16,1b7fc <__alt_data_end+0xfc01b7fc>
   1b830:	d8c02317 	ldw	r3,140(sp)
   1b834:	1405883a 	add	r2,r2,r16
   1b838:	44000115 	stw	r16,4(r8)
   1b83c:	40c00015 	stw	r3,0(r8)
   1b840:	d8801c15 	stw	r2,112(sp)
   1b844:	d9401b15 	stw	r5,108(sp)
   1b848:	00c001c4 	movi	r3,7
   1b84c:	19401916 	blt	r3,r5,1b8b4 <___vfiprintf_internal_r+0xcf8>
   1b850:	42000204 	addi	r8,r8,8
   1b854:	29400044 	addi	r5,r5,1
   1b858:	003e5506 	br	1b1b0 <__alt_data_end+0xfc01b1b0>
   1b85c:	d9402017 	ldw	r5,128(sp)
   1b860:	d9002117 	ldw	r4,132(sp)
   1b864:	d9801a04 	addi	r6,sp,104
   1b868:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1b86c:	10000b1e 	bne	r2,zero,1b89c <___vfiprintf_internal_r+0xce0>
   1b870:	d9001b17 	ldw	r4,108(sp)
   1b874:	d8801c17 	ldw	r2,112(sp)
   1b878:	d811883a 	mov	r8,sp
   1b87c:	21400044 	addi	r5,r4,1
   1b880:	003fdc06 	br	1b7f4 <__alt_data_end+0xfc01b7f4>
   1b884:	d8801c17 	ldw	r2,112(sp)
   1b888:	10000426 	beq	r2,zero,1b89c <___vfiprintf_internal_r+0xce0>
   1b88c:	d9402017 	ldw	r5,128(sp)
   1b890:	d9002117 	ldw	r4,132(sp)
   1b894:	d9801a04 	addi	r6,sp,104
   1b898:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1b89c:	d9402017 	ldw	r5,128(sp)
   1b8a0:	2880030b 	ldhu	r2,12(r5)
   1b8a4:	1080100c 	andi	r2,r2,64
   1b8a8:	10014d1e 	bne	r2,zero,1bde0 <___vfiprintf_internal_r+0x1224>
   1b8ac:	d8802417 	ldw	r2,144(sp)
   1b8b0:	003d9706 	br	1af10 <__alt_data_end+0xfc01af10>
   1b8b4:	1000d21e 	bne	r2,zero,1bc00 <___vfiprintf_internal_r+0x1044>
   1b8b8:	00c00044 	movi	r3,1
   1b8bc:	a005883a 	mov	r2,r20
   1b8c0:	ddc00015 	stw	r23,0(sp)
   1b8c4:	dd000115 	stw	r20,4(sp)
   1b8c8:	dd001c15 	stw	r20,112(sp)
   1b8cc:	d8c01b15 	stw	r3,108(sp)
   1b8d0:	d811883a 	mov	r8,sp
   1b8d4:	42000204 	addi	r8,r8,8
   1b8d8:	8c40010c 	andi	r17,r17,4
   1b8dc:	88004026 	beq	r17,zero,1b9e0 <___vfiprintf_internal_r+0xe24>
   1b8e0:	d9002517 	ldw	r4,148(sp)
   1b8e4:	24e3c83a 	sub	r17,r4,r19
   1b8e8:	04403d0e 	bge	zero,r17,1b9e0 <___vfiprintf_internal_r+0xe24>
   1b8ec:	04000404 	movi	r16,16
   1b8f0:	8441a90e 	bge	r16,r17,1bf98 <___vfiprintf_internal_r+0x13dc>
   1b8f4:	00c000f4 	movhi	r3,3
   1b8f8:	18ee7104 	addi	r3,r3,-17980
   1b8fc:	d9001b17 	ldw	r4,108(sp)
   1b900:	d8c02315 	stw	r3,140(sp)
   1b904:	050001c4 	movi	r20,7
   1b908:	dd402117 	ldw	r21,132(sp)
   1b90c:	ddc02017 	ldw	r23,128(sp)
   1b910:	00000506 	br	1b928 <___vfiprintf_internal_r+0xd6c>
   1b914:	21400084 	addi	r5,r4,2
   1b918:	42000204 	addi	r8,r8,8
   1b91c:	1809883a 	mov	r4,r3
   1b920:	8c7ffc04 	addi	r17,r17,-16
   1b924:	84400f0e 	bge	r16,r17,1b964 <___vfiprintf_internal_r+0xda8>
   1b928:	014000f4 	movhi	r5,3
   1b92c:	10800404 	addi	r2,r2,16
   1b930:	20c00044 	addi	r3,r4,1
   1b934:	296e7104 	addi	r5,r5,-17980
   1b938:	41400015 	stw	r5,0(r8)
   1b93c:	44000115 	stw	r16,4(r8)
   1b940:	d8801c15 	stw	r2,112(sp)
   1b944:	d8c01b15 	stw	r3,108(sp)
   1b948:	a0fff20e 	bge	r20,r3,1b914 <__alt_data_end+0xfc01b914>
   1b94c:	1000141e 	bne	r2,zero,1b9a0 <___vfiprintf_internal_r+0xde4>
   1b950:	8c7ffc04 	addi	r17,r17,-16
   1b954:	01400044 	movi	r5,1
   1b958:	0009883a 	mov	r4,zero
   1b95c:	d811883a 	mov	r8,sp
   1b960:	847ff116 	blt	r16,r17,1b928 <__alt_data_end+0xfc01b928>
   1b964:	d8c02317 	ldw	r3,140(sp)
   1b968:	1445883a 	add	r2,r2,r17
   1b96c:	44400115 	stw	r17,4(r8)
   1b970:	40c00015 	stw	r3,0(r8)
   1b974:	d8801c15 	stw	r2,112(sp)
   1b978:	d9401b15 	stw	r5,108(sp)
   1b97c:	00c001c4 	movi	r3,7
   1b980:	1940170e 	bge	r3,r5,1b9e0 <___vfiprintf_internal_r+0xe24>
   1b984:	1000101e 	bne	r2,zero,1b9c8 <___vfiprintf_internal_r+0xe0c>
   1b988:	d8802517 	ldw	r2,148(sp)
   1b98c:	14c11616 	blt	r2,r19,1bde8 <___vfiprintf_internal_r+0x122c>
   1b990:	d9002417 	ldw	r4,144(sp)
   1b994:	2089883a 	add	r4,r4,r2
   1b998:	d9002415 	stw	r4,144(sp)
   1b99c:	003e1806 	br	1b200 <__alt_data_end+0xfc01b200>
   1b9a0:	d9801a04 	addi	r6,sp,104
   1b9a4:	b80b883a 	mov	r5,r23
   1b9a8:	a809883a 	mov	r4,r21
   1b9ac:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1b9b0:	103fba1e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1b9b4:	d9001b17 	ldw	r4,108(sp)
   1b9b8:	d8801c17 	ldw	r2,112(sp)
   1b9bc:	d811883a 	mov	r8,sp
   1b9c0:	21400044 	addi	r5,r4,1
   1b9c4:	003fd606 	br	1b920 <__alt_data_end+0xfc01b920>
   1b9c8:	d9402017 	ldw	r5,128(sp)
   1b9cc:	d9002117 	ldw	r4,132(sp)
   1b9d0:	d9801a04 	addi	r6,sp,104
   1b9d4:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1b9d8:	103fb01e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1b9dc:	d8801c17 	ldw	r2,112(sp)
   1b9e0:	d8c02517 	ldw	r3,148(sp)
   1b9e4:	1cc0010e 	bge	r3,r19,1b9ec <___vfiprintf_internal_r+0xe30>
   1b9e8:	9807883a 	mov	r3,r19
   1b9ec:	d9002417 	ldw	r4,144(sp)
   1b9f0:	20c9883a 	add	r4,r4,r3
   1b9f4:	d9002415 	stw	r4,144(sp)
   1b9f8:	103e0126 	beq	r2,zero,1b200 <__alt_data_end+0xfc01b200>
   1b9fc:	d9402017 	ldw	r5,128(sp)
   1ba00:	d9002117 	ldw	r4,132(sp)
   1ba04:	d9801a04 	addi	r6,sp,104
   1ba08:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1ba0c:	103dfc26 	beq	r2,zero,1b200 <__alt_data_end+0xfc01b200>
   1ba10:	003fa206 	br	1b89c <__alt_data_end+0xfc01b89c>
   1ba14:	d9402017 	ldw	r5,128(sp)
   1ba18:	d9002117 	ldw	r4,132(sp)
   1ba1c:	d9801a04 	addi	r6,sp,104
   1ba20:	d9c02b15 	stw	r7,172(sp)
   1ba24:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1ba28:	d9c02b17 	ldw	r7,172(sp)
   1ba2c:	103f9b1e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1ba30:	d9001b17 	ldw	r4,108(sp)
   1ba34:	d8801c17 	ldw	r2,112(sp)
   1ba38:	d811883a 	mov	r8,sp
   1ba3c:	21800044 	addi	r6,r4,1
   1ba40:	003dbf06 	br	1b140 <__alt_data_end+0xfc01b140>
   1ba44:	1000d81e 	bne	r2,zero,1bda8 <___vfiprintf_internal_r+0x11ec>
   1ba48:	d9001d87 	ldb	r4,118(sp)
   1ba4c:	20000a26 	beq	r4,zero,1ba78 <___vfiprintf_internal_r+0xebc>
   1ba50:	00800044 	movi	r2,1
   1ba54:	d9001d84 	addi	r4,sp,118
   1ba58:	100b883a 	mov	r5,r2
   1ba5c:	d9000015 	stw	r4,0(sp)
   1ba60:	d8800115 	stw	r2,4(sp)
   1ba64:	d811883a 	mov	r8,sp
   1ba68:	2809883a 	mov	r4,r5
   1ba6c:	42000204 	addi	r8,r8,8
   1ba70:	29400044 	addi	r5,r5,1
   1ba74:	003d9506 	br	1b0cc <__alt_data_end+0xfc01b0cc>
   1ba78:	3800fd26 	beq	r7,zero,1be70 <___vfiprintf_internal_r+0x12b4>
   1ba7c:	00800084 	movi	r2,2
   1ba80:	d9001d04 	addi	r4,sp,116
   1ba84:	d9000015 	stw	r4,0(sp)
   1ba88:	d8800115 	stw	r2,4(sp)
   1ba8c:	01400044 	movi	r5,1
   1ba90:	d811883a 	mov	r8,sp
   1ba94:	2809883a 	mov	r4,r5
   1ba98:	42000204 	addi	r8,r8,8
   1ba9c:	29400044 	addi	r5,r5,1
   1baa0:	003f4606 	br	1b7bc <__alt_data_end+0xfc01b7bc>
   1baa4:	d8802517 	ldw	r2,148(sp)
   1baa8:	14c0010e 	bge	r2,r19,1bab0 <___vfiprintf_internal_r+0xef4>
   1baac:	9805883a 	mov	r2,r19
   1bab0:	d9402417 	ldw	r5,144(sp)
   1bab4:	288b883a 	add	r5,r5,r2
   1bab8:	d9402415 	stw	r5,144(sp)
   1babc:	003dd006 	br	1b200 <__alt_data_end+0xfc01b200>
   1bac0:	d8001d85 	stb	zero,118(sp)
   1bac4:	80005d16 	blt	r16,zero,1bc3c <___vfiprintf_internal_r+0x1080>
   1bac8:	00ffdfc4 	movi	r3,-129
   1bacc:	9d04b03a 	or	r2,r19,r20
   1bad0:	88e2703a 	and	r17,r17,r3
   1bad4:	103d3726 	beq	r2,zero,1afb4 <__alt_data_end+0xfc01afb4>
   1bad8:	002b883a 	mov	r21,zero
   1badc:	d9002617 	ldw	r4,152(sp)
   1bae0:	ddc01a04 	addi	r23,sp,104
   1bae4:	988003cc 	andi	r2,r19,15
   1bae8:	a006973a 	slli	r3,r20,28
   1baec:	2085883a 	add	r2,r4,r2
   1baf0:	9826d13a 	srli	r19,r19,4
   1baf4:	10800003 	ldbu	r2,0(r2)
   1baf8:	a028d13a 	srli	r20,r20,4
   1bafc:	bdffffc4 	addi	r23,r23,-1
   1bb00:	1ce6b03a 	or	r19,r3,r19
   1bb04:	b8800005 	stb	r2,0(r23)
   1bb08:	9d04b03a 	or	r2,r19,r20
   1bb0c:	103ff51e 	bne	r2,zero,1bae4 <__alt_data_end+0xfc01bae4>
   1bb10:	d8801e17 	ldw	r2,120(sp)
   1bb14:	15e9c83a 	sub	r20,r2,r23
   1bb18:	003d2b06 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1bb1c:	d9402017 	ldw	r5,128(sp)
   1bb20:	d9002117 	ldw	r4,132(sp)
   1bb24:	d9801a04 	addi	r6,sp,104
   1bb28:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bb2c:	103f5b1e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bb30:	d8801c17 	ldw	r2,112(sp)
   1bb34:	d811883a 	mov	r8,sp
   1bb38:	003f6706 	br	1b8d8 <__alt_data_end+0xfc01b8d8>
   1bb3c:	d9402017 	ldw	r5,128(sp)
   1bb40:	d9002117 	ldw	r4,132(sp)
   1bb44:	d9801a04 	addi	r6,sp,104
   1bb48:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bb4c:	103f531e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bb50:	d811883a 	mov	r8,sp
   1bb54:	003cd906 	br	1aebc <__alt_data_end+0xfc01aebc>
   1bb58:	10803fcc 	andi	r2,r2,255
   1bb5c:	1080201c 	xori	r2,r2,128
   1bb60:	10bfe004 	addi	r2,r2,-128
   1bb64:	00c00c04 	movi	r3,48
   1bb68:	10ffe926 	beq	r2,r3,1bb10 <__alt_data_end+0xfc01bb10>
   1bb6c:	b8ffffc5 	stb	r3,-1(r23)
   1bb70:	d8c01e17 	ldw	r3,120(sp)
   1bb74:	b8bfffc4 	addi	r2,r23,-1
   1bb78:	102f883a 	mov	r23,r2
   1bb7c:	18a9c83a 	sub	r20,r3,r2
   1bb80:	003d1106 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1bb84:	d9402017 	ldw	r5,128(sp)
   1bb88:	d9002117 	ldw	r4,132(sp)
   1bb8c:	d9801a04 	addi	r6,sp,104
   1bb90:	d8c02a15 	stw	r3,168(sp)
   1bb94:	d9c02b15 	stw	r7,172(sp)
   1bb98:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bb9c:	d8c02a17 	ldw	r3,168(sp)
   1bba0:	d9c02b17 	ldw	r7,172(sp)
   1bba4:	103f3d1e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bba8:	d9001b17 	ldw	r4,108(sp)
   1bbac:	d8801c17 	ldw	r2,112(sp)
   1bbb0:	d811883a 	mov	r8,sp
   1bbb4:	21400044 	addi	r5,r4,1
   1bbb8:	003d4406 	br	1b0cc <__alt_data_end+0xfc01b0cc>
   1bbbc:	d9402017 	ldw	r5,128(sp)
   1bbc0:	d9002117 	ldw	r4,132(sp)
   1bbc4:	d9801a04 	addi	r6,sp,104
   1bbc8:	d8c02a15 	stw	r3,168(sp)
   1bbcc:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bbd0:	d8c02a17 	ldw	r3,168(sp)
   1bbd4:	103f311e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bbd8:	d9001b17 	ldw	r4,108(sp)
   1bbdc:	d8801c17 	ldw	r2,112(sp)
   1bbe0:	d811883a 	mov	r8,sp
   1bbe4:	21400044 	addi	r5,r4,1
   1bbe8:	003ef406 	br	1b7bc <__alt_data_end+0xfc01b7bc>
   1bbec:	1000bd1e 	bne	r2,zero,1bee4 <___vfiprintf_internal_r+0x1328>
   1bbf0:	01400044 	movi	r5,1
   1bbf4:	0009883a 	mov	r4,zero
   1bbf8:	d811883a 	mov	r8,sp
   1bbfc:	003ef106 	br	1b7c4 <__alt_data_end+0xfc01b7c4>
   1bc00:	d9402017 	ldw	r5,128(sp)
   1bc04:	d9002117 	ldw	r4,132(sp)
   1bc08:	d9801a04 	addi	r6,sp,104
   1bc0c:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bc10:	103f221e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bc14:	d9401b17 	ldw	r5,108(sp)
   1bc18:	d8801c17 	ldw	r2,112(sp)
   1bc1c:	d811883a 	mov	r8,sp
   1bc20:	29400044 	addi	r5,r5,1
   1bc24:	003d6206 	br	1b1b0 <__alt_data_end+0xfc01b1b0>
   1bc28:	014000f4 	movhi	r5,3
   1bc2c:	296dfd04 	addi	r5,r5,-18444
   1bc30:	d9402615 	stw	r5,152(sp)
   1bc34:	d8c02215 	stw	r3,136(sp)
   1bc38:	1023883a 	mov	r17,r2
   1bc3c:	9d04b03a 	or	r2,r19,r20
   1bc40:	103fa51e 	bne	r2,zero,1bad8 <__alt_data_end+0xfc01bad8>
   1bc44:	002b883a 	mov	r21,zero
   1bc48:	00800084 	movi	r2,2
   1bc4c:	003e4a06 	br	1b578 <__alt_data_end+0xfc01b578>
   1bc50:	014000f4 	movhi	r5,3
   1bc54:	296dfd04 	addi	r5,r5,-18444
   1bc58:	002b883a 	mov	r21,zero
   1bc5c:	d9402615 	stw	r5,152(sp)
   1bc60:	003f9e06 	br	1badc <__alt_data_end+0xfc01badc>
   1bc64:	d9402217 	ldw	r5,136(sp)
   1bc68:	d8001d85 	stb	zero,118(sp)
   1bc6c:	0029883a 	mov	r20,zero
   1bc70:	28800104 	addi	r2,r5,4
   1bc74:	2cc00017 	ldw	r19,0(r5)
   1bc78:	803e3a16 	blt	r16,zero,1b564 <__alt_data_end+0xfc01b564>
   1bc7c:	00ffdfc4 	movi	r3,-129
   1bc80:	d8802215 	stw	r2,136(sp)
   1bc84:	88e2703a 	and	r17,r17,r3
   1bc88:	002b883a 	mov	r21,zero
   1bc8c:	983e9b26 	beq	r19,zero,1b6fc <__alt_data_end+0xfc01b6fc>
   1bc90:	00800244 	movi	r2,9
   1bc94:	14fdc936 	bltu	r2,r19,1b3bc <__alt_data_end+0xfc01b3bc>
   1bc98:	003e9a06 	br	1b704 <__alt_data_end+0xfc01b704>
   1bc9c:	00800c04 	movi	r2,48
   1bca0:	d8c01d45 	stb	r3,117(sp)
   1bca4:	d8801d05 	stb	r2,116(sp)
   1bca8:	d8001d85 	stb	zero,118(sp)
   1bcac:	88c00094 	ori	r3,r17,2
   1bcb0:	80009c16 	blt	r16,zero,1bf24 <___vfiprintf_internal_r+0x1368>
   1bcb4:	00bfdfc4 	movi	r2,-129
   1bcb8:	88a2703a 	and	r17,r17,r2
   1bcbc:	8c400094 	ori	r17,r17,2
   1bcc0:	002b883a 	mov	r21,zero
   1bcc4:	003f8506 	br	1badc <__alt_data_end+0xfc01badc>
   1bcc8:	b029883a 	mov	r20,r22
   1bccc:	003c0b06 	br	1acfc <__alt_data_end+0xfc01acfc>
   1bcd0:	04e7c83a 	sub	r19,zero,r19
   1bcd4:	05400b44 	movi	r21,45
   1bcd8:	9804c03a 	cmpne	r2,r19,zero
   1bcdc:	0529c83a 	sub	r20,zero,r20
   1bce0:	dd401d85 	stb	r21,118(sp)
   1bce4:	a0a9c83a 	sub	r20,r20,r2
   1bce8:	80009716 	blt	r16,zero,1bf48 <___vfiprintf_internal_r+0x138c>
   1bcec:	00bfdfc4 	movi	r2,-129
   1bcf0:	88a2703a 	and	r17,r17,r2
   1bcf4:	003db006 	br	1b3b8 <__alt_data_end+0xfc01b3b8>
   1bcf8:	b0c00007 	ldb	r3,0(r22)
   1bcfc:	003c0c06 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1bd00:	8880100c 	andi	r2,r17,64
   1bd04:	d8001d85 	stb	zero,118(sp)
   1bd08:	1000461e 	bne	r2,zero,1be24 <___vfiprintf_internal_r+0x1268>
   1bd0c:	d9002217 	ldw	r4,136(sp)
   1bd10:	0029883a 	mov	r20,zero
   1bd14:	20800104 	addi	r2,r4,4
   1bd18:	24c00017 	ldw	r19,0(r4)
   1bd1c:	803df80e 	bge	r16,zero,1b500 <__alt_data_end+0xfc01b500>
   1bd20:	9d06b03a 	or	r3,r19,r20
   1bd24:	d8802215 	stw	r2,136(sp)
   1bd28:	183d5e1e 	bne	r3,zero,1b2a4 <__alt_data_end+0xfc01b2a4>
   1bd2c:	002b883a 	mov	r21,zero
   1bd30:	0005883a 	mov	r2,zero
   1bd34:	003e1006 	br	1b578 <__alt_data_end+0xfc01b578>
   1bd38:	8880040c 	andi	r2,r17,16
   1bd3c:	1000321e 	bne	r2,zero,1be08 <___vfiprintf_internal_r+0x124c>
   1bd40:	8c40100c 	andi	r17,r17,64
   1bd44:	88008d26 	beq	r17,zero,1bf7c <___vfiprintf_internal_r+0x13c0>
   1bd48:	d9402217 	ldw	r5,136(sp)
   1bd4c:	d8c02417 	ldw	r3,144(sp)
   1bd50:	28800017 	ldw	r2,0(r5)
   1bd54:	29400104 	addi	r5,r5,4
   1bd58:	d9402215 	stw	r5,136(sp)
   1bd5c:	10c0000d 	sth	r3,0(r2)
   1bd60:	003bca06 	br	1ac8c <__alt_data_end+0xfc01ac8c>
   1bd64:	8880100c 	andi	r2,r17,64
   1bd68:	10003a26 	beq	r2,zero,1be54 <___vfiprintf_internal_r+0x1298>
   1bd6c:	d8802217 	ldw	r2,136(sp)
   1bd70:	14c0000f 	ldh	r19,0(r2)
   1bd74:	10800104 	addi	r2,r2,4
   1bd78:	d8802215 	stw	r2,136(sp)
   1bd7c:	9829d7fa 	srai	r20,r19,31
   1bd80:	a005883a 	mov	r2,r20
   1bd84:	003d8506 	br	1b39c <__alt_data_end+0xfc01b39c>
   1bd88:	8880100c 	andi	r2,r17,64
   1bd8c:	10002b26 	beq	r2,zero,1be3c <___vfiprintf_internal_r+0x1280>
   1bd90:	d8802217 	ldw	r2,136(sp)
   1bd94:	0029883a 	mov	r20,zero
   1bd98:	14c0000b 	ldhu	r19,0(r2)
   1bd9c:	10800104 	addi	r2,r2,4
   1bda0:	d8802215 	stw	r2,136(sp)
   1bda4:	003d5d06 	br	1b31c <__alt_data_end+0xfc01b31c>
   1bda8:	d9402017 	ldw	r5,128(sp)
   1bdac:	d9002117 	ldw	r4,132(sp)
   1bdb0:	d9801a04 	addi	r6,sp,104
   1bdb4:	d8c02a15 	stw	r3,168(sp)
   1bdb8:	d9c02b15 	stw	r7,172(sp)
   1bdbc:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bdc0:	d8c02a17 	ldw	r3,168(sp)
   1bdc4:	d9c02b17 	ldw	r7,172(sp)
   1bdc8:	103eb41e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bdcc:	d9001b17 	ldw	r4,108(sp)
   1bdd0:	d8801c17 	ldw	r2,112(sp)
   1bdd4:	d811883a 	mov	r8,sp
   1bdd8:	21400044 	addi	r5,r4,1
   1bddc:	003e6706 	br	1b77c <__alt_data_end+0xfc01b77c>
   1bde0:	00bfffc4 	movi	r2,-1
   1bde4:	003c4a06 	br	1af10 <__alt_data_end+0xfc01af10>
   1bde8:	9805883a 	mov	r2,r19
   1bdec:	003ee806 	br	1b990 <__alt_data_end+0xfc01b990>
   1bdf0:	d8c02217 	ldw	r3,136(sp)
   1bdf4:	0029883a 	mov	r20,zero
   1bdf8:	18800104 	addi	r2,r3,4
   1bdfc:	1cc0000b 	ldhu	r19,0(r3)
   1be00:	803f9e0e 	bge	r16,zero,1bc7c <__alt_data_end+0xfc01bc7c>
   1be04:	003dd706 	br	1b564 <__alt_data_end+0xfc01b564>
   1be08:	d8c02217 	ldw	r3,136(sp)
   1be0c:	d9002417 	ldw	r4,144(sp)
   1be10:	18800017 	ldw	r2,0(r3)
   1be14:	18c00104 	addi	r3,r3,4
   1be18:	d8c02215 	stw	r3,136(sp)
   1be1c:	11000015 	stw	r4,0(r2)
   1be20:	003b9a06 	br	1ac8c <__alt_data_end+0xfc01ac8c>
   1be24:	d8c02217 	ldw	r3,136(sp)
   1be28:	0029883a 	mov	r20,zero
   1be2c:	18800104 	addi	r2,r3,4
   1be30:	1cc0000b 	ldhu	r19,0(r3)
   1be34:	803db20e 	bge	r16,zero,1b500 <__alt_data_end+0xfc01b500>
   1be38:	003fb906 	br	1bd20 <__alt_data_end+0xfc01bd20>
   1be3c:	d9002217 	ldw	r4,136(sp)
   1be40:	0029883a 	mov	r20,zero
   1be44:	24c00017 	ldw	r19,0(r4)
   1be48:	21000104 	addi	r4,r4,4
   1be4c:	d9002215 	stw	r4,136(sp)
   1be50:	003d3206 	br	1b31c <__alt_data_end+0xfc01b31c>
   1be54:	d8c02217 	ldw	r3,136(sp)
   1be58:	1cc00017 	ldw	r19,0(r3)
   1be5c:	18c00104 	addi	r3,r3,4
   1be60:	d8c02215 	stw	r3,136(sp)
   1be64:	9829d7fa 	srai	r20,r19,31
   1be68:	a005883a 	mov	r2,r20
   1be6c:	003d4b06 	br	1b39c <__alt_data_end+0xfc01b39c>
   1be70:	0009883a 	mov	r4,zero
   1be74:	01400044 	movi	r5,1
   1be78:	d811883a 	mov	r8,sp
   1be7c:	003e4f06 	br	1b7bc <__alt_data_end+0xfc01b7bc>
   1be80:	d8c02215 	stw	r3,136(sp)
   1be84:	002b883a 	mov	r21,zero
   1be88:	003db806 	br	1b56c <__alt_data_end+0xfc01b56c>
   1be8c:	d811883a 	mov	r8,sp
   1be90:	003e9606 	br	1b8ec <__alt_data_end+0xfc01b8ec>
   1be94:	010000f4 	movhi	r4,3
   1be98:	212e6d04 	addi	r4,r4,-17996
   1be9c:	d9002315 	stw	r4,140(sp)
   1bea0:	003e6306 	br	1b830 <__alt_data_end+0xfc01b830>
   1bea4:	b0c00043 	ldbu	r3,1(r22)
   1bea8:	8c400814 	ori	r17,r17,32
   1beac:	b5800044 	addi	r22,r22,1
   1beb0:	18c03fcc 	andi	r3,r3,255
   1beb4:	18c0201c 	xori	r3,r3,128
   1beb8:	18ffe004 	addi	r3,r3,-128
   1bebc:	003b9c06 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1bec0:	b809883a 	mov	r4,r23
   1bec4:	da002a15 	stw	r8,168(sp)
   1bec8:	001053c0 	call	1053c <strlen>
   1becc:	1029883a 	mov	r20,r2
   1bed0:	dd401d83 	ldbu	r21,118(sp)
   1bed4:	df002215 	stw	fp,136(sp)
   1bed8:	0021883a 	mov	r16,zero
   1bedc:	da002a17 	ldw	r8,168(sp)
   1bee0:	003c3906 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1bee4:	d9402017 	ldw	r5,128(sp)
   1bee8:	d9002117 	ldw	r4,132(sp)
   1beec:	d9801a04 	addi	r6,sp,104
   1bef0:	001aaa80 	call	1aaa8 <__sprint_r.part.0>
   1bef4:	103e691e 	bne	r2,zero,1b89c <__alt_data_end+0xfc01b89c>
   1bef8:	d9001b17 	ldw	r4,108(sp)
   1befc:	d8801c17 	ldw	r2,112(sp)
   1bf00:	d811883a 	mov	r8,sp
   1bf04:	21400044 	addi	r5,r4,1
   1bf08:	003e2e06 	br	1b7c4 <__alt_data_end+0xfc01b7c4>
   1bf0c:	010000f4 	movhi	r4,3
   1bf10:	212e7104 	addi	r4,r4,-17980
   1bf14:	d9002315 	stw	r4,140(sp)
   1bf18:	d9001b17 	ldw	r4,108(sp)
   1bf1c:	21000044 	addi	r4,r4,1
   1bf20:	003c5e06 	br	1b09c <__alt_data_end+0xfc01b09c>
   1bf24:	002b883a 	mov	r21,zero
   1bf28:	00800084 	movi	r2,2
   1bf2c:	10803fcc 	andi	r2,r2,255
   1bf30:	01000044 	movi	r4,1
   1bf34:	11002b26 	beq	r2,r4,1bfe4 <___vfiprintf_internal_r+0x1428>
   1bf38:	01000084 	movi	r4,2
   1bf3c:	11002b1e 	bne	r2,r4,1bfec <___vfiprintf_internal_r+0x1430>
   1bf40:	1823883a 	mov	r17,r3
   1bf44:	003ee506 	br	1badc <__alt_data_end+0xfc01badc>
   1bf48:	8807883a 	mov	r3,r17
   1bf4c:	00800044 	movi	r2,1
   1bf50:	003ff606 	br	1bf2c <__alt_data_end+0xfc01bf2c>
   1bf54:	00800184 	movi	r2,6
   1bf58:	1400012e 	bgeu	r2,r16,1bf60 <___vfiprintf_internal_r+0x13a4>
   1bf5c:	1021883a 	mov	r16,r2
   1bf60:	8029883a 	mov	r20,r16
   1bf64:	8027883a 	mov	r19,r16
   1bf68:	80002216 	blt	r16,zero,1bff4 <___vfiprintf_internal_r+0x1438>
   1bf6c:	05c000f4 	movhi	r23,3
   1bf70:	df002215 	stw	fp,136(sp)
   1bf74:	bdee0204 	addi	r23,r23,-18424
   1bf78:	003cfb06 	br	1b368 <__alt_data_end+0xfc01b368>
   1bf7c:	d9002217 	ldw	r4,136(sp)
   1bf80:	d9402417 	ldw	r5,144(sp)
   1bf84:	20800017 	ldw	r2,0(r4)
   1bf88:	21000104 	addi	r4,r4,4
   1bf8c:	d9002215 	stw	r4,136(sp)
   1bf90:	11400015 	stw	r5,0(r2)
   1bf94:	003b3d06 	br	1ac8c <__alt_data_end+0xfc01ac8c>
   1bf98:	014000f4 	movhi	r5,3
   1bf9c:	296e7104 	addi	r5,r5,-17980
   1bfa0:	d9402315 	stw	r5,140(sp)
   1bfa4:	d9401b17 	ldw	r5,108(sp)
   1bfa8:	29400044 	addi	r5,r5,1
   1bfac:	003e6d06 	br	1b964 <__alt_data_end+0xfc01b964>
   1bfb0:	8029883a 	mov	r20,r16
   1bfb4:	dd401d83 	ldbu	r21,118(sp)
   1bfb8:	df002215 	stw	fp,136(sp)
   1bfbc:	0021883a 	mov	r16,zero
   1bfc0:	003c0106 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1bfc4:	00c000f4 	movhi	r3,3
   1bfc8:	18ee6d04 	addi	r3,r3,-17996
   1bfcc:	d8c02315 	stw	r3,140(sp)
   1bfd0:	280d883a 	mov	r6,r5
   1bfd4:	003c6906 	br	1b17c <__alt_data_end+0xfc01b17c>
   1bfd8:	802d883a 	mov	r22,r16
   1bfdc:	0021883a 	mov	r16,zero
   1bfe0:	003b5406 	br	1ad34 <__alt_data_end+0xfc01ad34>
   1bfe4:	1823883a 	mov	r17,r3
   1bfe8:	003cf306 	br	1b3b8 <__alt_data_end+0xfc01b3b8>
   1bfec:	1823883a 	mov	r17,r3
   1bff0:	003cad06 	br	1b2a8 <__alt_data_end+0xfc01b2a8>
   1bff4:	0027883a 	mov	r19,zero
   1bff8:	003fdc06 	br	1bf6c <__alt_data_end+0xfc01bf6c>
   1bffc:	d9402217 	ldw	r5,136(sp)
   1c000:	8005883a 	mov	r2,r16
   1c004:	b0c00043 	ldbu	r3,1(r22)
   1c008:	2c000017 	ldw	r16,0(r5)
   1c00c:	29000104 	addi	r4,r5,4
   1c010:	d9002215 	stw	r4,136(sp)
   1c014:	102d883a 	mov	r22,r2
   1c018:	803fa50e 	bge	r16,zero,1beb0 <__alt_data_end+0xfc01beb0>
   1c01c:	18c03fcc 	andi	r3,r3,255
   1c020:	18c0201c 	xori	r3,r3,128
   1c024:	043fffc4 	movi	r16,-1
   1c028:	18ffe004 	addi	r3,r3,-128
   1c02c:	003b4006 	br	1ad30 <__alt_data_end+0xfc01ad30>
   1c030:	d9402303 	ldbu	r5,140(sp)
   1c034:	d9401d85 	stb	r5,118(sp)
   1c038:	003cae06 	br	1b2f4 <__alt_data_end+0xfc01b2f4>
   1c03c:	d8c02303 	ldbu	r3,140(sp)
   1c040:	d8c01d85 	stb	r3,118(sp)
   1c044:	003d1406 	br	1b498 <__alt_data_end+0xfc01b498>
   1c048:	d8c02303 	ldbu	r3,140(sp)
   1c04c:	d8c01d85 	stb	r3,118(sp)
   1c050:	003cca06 	br	1b37c <__alt_data_end+0xfc01b37c>
   1c054:	8880004c 	andi	r2,r17,1
   1c058:	002b883a 	mov	r21,zero
   1c05c:	10000526 	beq	r2,zero,1c074 <___vfiprintf_internal_r+0x14b8>
   1c060:	00800c04 	movi	r2,48
   1c064:	d88019c5 	stb	r2,103(sp)
   1c068:	dd002817 	ldw	r20,160(sp)
   1c06c:	ddc019c4 	addi	r23,sp,103
   1c070:	003bd506 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1c074:	0029883a 	mov	r20,zero
   1c078:	ddc01a04 	addi	r23,sp,104
   1c07c:	003bd206 	br	1afc8 <__alt_data_end+0xfc01afc8>
   1c080:	d9002303 	ldbu	r4,140(sp)
   1c084:	d9001d85 	stb	r4,118(sp)
   1c088:	003da606 	br	1b724 <__alt_data_end+0xfc01b724>
   1c08c:	d8c02303 	ldbu	r3,140(sp)
   1c090:	d8c01d85 	stb	r3,118(sp)
   1c094:	003c7606 	br	1b270 <__alt_data_end+0xfc01b270>
   1c098:	d8c02303 	ldbu	r3,140(sp)
   1c09c:	d8c01d85 	stb	r3,118(sp)
   1c0a0:	003c6506 	br	1b238 <__alt_data_end+0xfc01b238>
   1c0a4:	d9002303 	ldbu	r4,140(sp)
   1c0a8:	d9001d85 	stb	r4,118(sp)
   1c0ac:	003d3d06 	br	1b5a4 <__alt_data_end+0xfc01b5a4>
   1c0b0:	d8c02303 	ldbu	r3,140(sp)
   1c0b4:	d8c01d85 	stb	r3,118(sp)
   1c0b8:	003d1d06 	br	1b530 <__alt_data_end+0xfc01b530>
   1c0bc:	d8c02303 	ldbu	r3,140(sp)
   1c0c0:	d8c01d85 	stb	r3,118(sp)
   1c0c4:	003d0306 	br	1b4d4 <__alt_data_end+0xfc01b4d4>

0001c0c8 <__vfiprintf_internal>:
   1c0c8:	008000f4 	movhi	r2,3
   1c0cc:	10baf904 	addi	r2,r2,-5148
   1c0d0:	300f883a 	mov	r7,r6
   1c0d4:	280d883a 	mov	r6,r5
   1c0d8:	200b883a 	mov	r5,r4
   1c0dc:	11000017 	ldw	r4,0(r2)
   1c0e0:	001abbc1 	jmpi	1abbc <___vfiprintf_internal_r>

0001c0e4 <__sbprintf>:
   1c0e4:	2880030b 	ldhu	r2,12(r5)
   1c0e8:	2ac01917 	ldw	r11,100(r5)
   1c0ec:	2a80038b 	ldhu	r10,14(r5)
   1c0f0:	2a400717 	ldw	r9,28(r5)
   1c0f4:	2a000917 	ldw	r8,36(r5)
   1c0f8:	defee204 	addi	sp,sp,-1144
   1c0fc:	00c10004 	movi	r3,1024
   1c100:	dc011a15 	stw	r16,1128(sp)
   1c104:	10bfff4c 	andi	r2,r2,65533
   1c108:	2821883a 	mov	r16,r5
   1c10c:	d8cb883a 	add	r5,sp,r3
   1c110:	dc811c15 	stw	r18,1136(sp)
   1c114:	dc411b15 	stw	r17,1132(sp)
   1c118:	dfc11d15 	stw	ra,1140(sp)
   1c11c:	2025883a 	mov	r18,r4
   1c120:	d881030d 	sth	r2,1036(sp)
   1c124:	dac11915 	stw	r11,1124(sp)
   1c128:	da81038d 	sth	r10,1038(sp)
   1c12c:	da410715 	stw	r9,1052(sp)
   1c130:	da010915 	stw	r8,1060(sp)
   1c134:	dec10015 	stw	sp,1024(sp)
   1c138:	dec10415 	stw	sp,1040(sp)
   1c13c:	d8c10215 	stw	r3,1032(sp)
   1c140:	d8c10515 	stw	r3,1044(sp)
   1c144:	d8010615 	stw	zero,1048(sp)
   1c148:	001abbc0 	call	1abbc <___vfiprintf_internal_r>
   1c14c:	1023883a 	mov	r17,r2
   1c150:	10000416 	blt	r2,zero,1c164 <__sbprintf+0x80>
   1c154:	d9410004 	addi	r5,sp,1024
   1c158:	9009883a 	mov	r4,r18
   1c15c:	001686c0 	call	1686c <_fflush_r>
   1c160:	10000d1e 	bne	r2,zero,1c198 <__sbprintf+0xb4>
   1c164:	d881030b 	ldhu	r2,1036(sp)
   1c168:	1080100c 	andi	r2,r2,64
   1c16c:	10000326 	beq	r2,zero,1c17c <__sbprintf+0x98>
   1c170:	8080030b 	ldhu	r2,12(r16)
   1c174:	10801014 	ori	r2,r2,64
   1c178:	8080030d 	sth	r2,12(r16)
   1c17c:	8805883a 	mov	r2,r17
   1c180:	dfc11d17 	ldw	ra,1140(sp)
   1c184:	dc811c17 	ldw	r18,1136(sp)
   1c188:	dc411b17 	ldw	r17,1132(sp)
   1c18c:	dc011a17 	ldw	r16,1128(sp)
   1c190:	dec11e04 	addi	sp,sp,1144
   1c194:	f800283a 	ret
   1c198:	047fffc4 	movi	r17,-1
   1c19c:	003ff106 	br	1c164 <__alt_data_end+0xfc01c164>

0001c1a0 <__swbuf_r>:
   1c1a0:	defffb04 	addi	sp,sp,-20
   1c1a4:	dcc00315 	stw	r19,12(sp)
   1c1a8:	dc800215 	stw	r18,8(sp)
   1c1ac:	dc000015 	stw	r16,0(sp)
   1c1b0:	dfc00415 	stw	ra,16(sp)
   1c1b4:	dc400115 	stw	r17,4(sp)
   1c1b8:	2025883a 	mov	r18,r4
   1c1bc:	2827883a 	mov	r19,r5
   1c1c0:	3021883a 	mov	r16,r6
   1c1c4:	20000226 	beq	r4,zero,1c1d0 <__swbuf_r+0x30>
   1c1c8:	20800e17 	ldw	r2,56(r4)
   1c1cc:	10004226 	beq	r2,zero,1c2d8 <__swbuf_r+0x138>
   1c1d0:	80800617 	ldw	r2,24(r16)
   1c1d4:	8100030b 	ldhu	r4,12(r16)
   1c1d8:	80800215 	stw	r2,8(r16)
   1c1dc:	2080020c 	andi	r2,r4,8
   1c1e0:	10003626 	beq	r2,zero,1c2bc <__swbuf_r+0x11c>
   1c1e4:	80c00417 	ldw	r3,16(r16)
   1c1e8:	18003426 	beq	r3,zero,1c2bc <__swbuf_r+0x11c>
   1c1ec:	2088000c 	andi	r2,r4,8192
   1c1f0:	9c403fcc 	andi	r17,r19,255
   1c1f4:	10001a26 	beq	r2,zero,1c260 <__swbuf_r+0xc0>
   1c1f8:	80800017 	ldw	r2,0(r16)
   1c1fc:	81000517 	ldw	r4,20(r16)
   1c200:	10c7c83a 	sub	r3,r2,r3
   1c204:	1900200e 	bge	r3,r4,1c288 <__swbuf_r+0xe8>
   1c208:	18c00044 	addi	r3,r3,1
   1c20c:	81000217 	ldw	r4,8(r16)
   1c210:	11400044 	addi	r5,r2,1
   1c214:	81400015 	stw	r5,0(r16)
   1c218:	213fffc4 	addi	r4,r4,-1
   1c21c:	81000215 	stw	r4,8(r16)
   1c220:	14c00005 	stb	r19,0(r2)
   1c224:	80800517 	ldw	r2,20(r16)
   1c228:	10c01e26 	beq	r2,r3,1c2a4 <__swbuf_r+0x104>
   1c22c:	8080030b 	ldhu	r2,12(r16)
   1c230:	1080004c 	andi	r2,r2,1
   1c234:	10000226 	beq	r2,zero,1c240 <__swbuf_r+0xa0>
   1c238:	00800284 	movi	r2,10
   1c23c:	88801926 	beq	r17,r2,1c2a4 <__swbuf_r+0x104>
   1c240:	8805883a 	mov	r2,r17
   1c244:	dfc00417 	ldw	ra,16(sp)
   1c248:	dcc00317 	ldw	r19,12(sp)
   1c24c:	dc800217 	ldw	r18,8(sp)
   1c250:	dc400117 	ldw	r17,4(sp)
   1c254:	dc000017 	ldw	r16,0(sp)
   1c258:	dec00504 	addi	sp,sp,20
   1c25c:	f800283a 	ret
   1c260:	81401917 	ldw	r5,100(r16)
   1c264:	00b7ffc4 	movi	r2,-8193
   1c268:	21080014 	ori	r4,r4,8192
   1c26c:	2884703a 	and	r2,r5,r2
   1c270:	80801915 	stw	r2,100(r16)
   1c274:	80800017 	ldw	r2,0(r16)
   1c278:	8100030d 	sth	r4,12(r16)
   1c27c:	81000517 	ldw	r4,20(r16)
   1c280:	10c7c83a 	sub	r3,r2,r3
   1c284:	193fe016 	blt	r3,r4,1c208 <__alt_data_end+0xfc01c208>
   1c288:	800b883a 	mov	r5,r16
   1c28c:	9009883a 	mov	r4,r18
   1c290:	001686c0 	call	1686c <_fflush_r>
   1c294:	1000071e 	bne	r2,zero,1c2b4 <__swbuf_r+0x114>
   1c298:	80800017 	ldw	r2,0(r16)
   1c29c:	00c00044 	movi	r3,1
   1c2a0:	003fda06 	br	1c20c <__alt_data_end+0xfc01c20c>
   1c2a4:	800b883a 	mov	r5,r16
   1c2a8:	9009883a 	mov	r4,r18
   1c2ac:	001686c0 	call	1686c <_fflush_r>
   1c2b0:	103fe326 	beq	r2,zero,1c240 <__alt_data_end+0xfc01c240>
   1c2b4:	00bfffc4 	movi	r2,-1
   1c2b8:	003fe206 	br	1c244 <__alt_data_end+0xfc01c244>
   1c2bc:	800b883a 	mov	r5,r16
   1c2c0:	9009883a 	mov	r4,r18
   1c2c4:	0014c4c0 	call	14c4c <__swsetup_r>
   1c2c8:	103ffa1e 	bne	r2,zero,1c2b4 <__alt_data_end+0xfc01c2b4>
   1c2cc:	8100030b 	ldhu	r4,12(r16)
   1c2d0:	80c00417 	ldw	r3,16(r16)
   1c2d4:	003fc506 	br	1c1ec <__alt_data_end+0xfc01c1ec>
   1c2d8:	0016c580 	call	16c58 <__sinit>
   1c2dc:	003fbc06 	br	1c1d0 <__alt_data_end+0xfc01c1d0>

0001c2e0 <__swbuf>:
   1c2e0:	008000f4 	movhi	r2,3
   1c2e4:	10baf904 	addi	r2,r2,-5148
   1c2e8:	280d883a 	mov	r6,r5
   1c2ec:	200b883a 	mov	r5,r4
   1c2f0:	11000017 	ldw	r4,0(r2)
   1c2f4:	001c1a01 	jmpi	1c1a0 <__swbuf_r>

0001c2f8 <_write_r>:
   1c2f8:	defffd04 	addi	sp,sp,-12
   1c2fc:	2805883a 	mov	r2,r5
   1c300:	dc000015 	stw	r16,0(sp)
   1c304:	040000f4 	movhi	r16,3
   1c308:	dc400115 	stw	r17,4(sp)
   1c30c:	300b883a 	mov	r5,r6
   1c310:	84079404 	addi	r16,r16,7760
   1c314:	2023883a 	mov	r17,r4
   1c318:	380d883a 	mov	r6,r7
   1c31c:	1009883a 	mov	r4,r2
   1c320:	dfc00215 	stw	ra,8(sp)
   1c324:	80000015 	stw	zero,0(r16)
   1c328:	0020a240 	call	20a24 <write>
   1c32c:	00ffffc4 	movi	r3,-1
   1c330:	10c00526 	beq	r2,r3,1c348 <_write_r+0x50>
   1c334:	dfc00217 	ldw	ra,8(sp)
   1c338:	dc400117 	ldw	r17,4(sp)
   1c33c:	dc000017 	ldw	r16,0(sp)
   1c340:	dec00304 	addi	sp,sp,12
   1c344:	f800283a 	ret
   1c348:	80c00017 	ldw	r3,0(r16)
   1c34c:	183ff926 	beq	r3,zero,1c334 <__alt_data_end+0xfc01c334>
   1c350:	88c00015 	stw	r3,0(r17)
   1c354:	003ff706 	br	1c334 <__alt_data_end+0xfc01c334>

0001c358 <_close_r>:
   1c358:	defffd04 	addi	sp,sp,-12
   1c35c:	dc000015 	stw	r16,0(sp)
   1c360:	040000f4 	movhi	r16,3
   1c364:	dc400115 	stw	r17,4(sp)
   1c368:	84079404 	addi	r16,r16,7760
   1c36c:	2023883a 	mov	r17,r4
   1c370:	2809883a 	mov	r4,r5
   1c374:	dfc00215 	stw	ra,8(sp)
   1c378:	80000015 	stw	zero,0(r16)
   1c37c:	001ff280 	call	1ff28 <close>
   1c380:	00ffffc4 	movi	r3,-1
   1c384:	10c00526 	beq	r2,r3,1c39c <_close_r+0x44>
   1c388:	dfc00217 	ldw	ra,8(sp)
   1c38c:	dc400117 	ldw	r17,4(sp)
   1c390:	dc000017 	ldw	r16,0(sp)
   1c394:	dec00304 	addi	sp,sp,12
   1c398:	f800283a 	ret
   1c39c:	80c00017 	ldw	r3,0(r16)
   1c3a0:	183ff926 	beq	r3,zero,1c388 <__alt_data_end+0xfc01c388>
   1c3a4:	88c00015 	stw	r3,0(r17)
   1c3a8:	003ff706 	br	1c388 <__alt_data_end+0xfc01c388>

0001c3ac <_calloc_r>:
   1c3ac:	defffe04 	addi	sp,sp,-8
   1c3b0:	2805883a 	mov	r2,r5
   1c3b4:	dc000015 	stw	r16,0(sp)
   1c3b8:	300b883a 	mov	r5,r6
   1c3bc:	2021883a 	mov	r16,r4
   1c3c0:	1009883a 	mov	r4,r2
   1c3c4:	dfc00115 	stw	ra,4(sp)
   1c3c8:	000d8d40 	call	d8d4 <__mulsi3>
   1c3cc:	100b883a 	mov	r5,r2
   1c3d0:	8009883a 	mov	r4,r16
   1c3d4:	000f4680 	call	f468 <_malloc_r>
   1c3d8:	10002926 	beq	r2,zero,1c480 <_calloc_r+0xd4>
   1c3dc:	11bfff17 	ldw	r6,-4(r2)
   1c3e0:	1021883a 	mov	r16,r2
   1c3e4:	00bfff04 	movi	r2,-4
   1c3e8:	308c703a 	and	r6,r6,r2
   1c3ec:	00c00904 	movi	r3,36
   1c3f0:	308d883a 	add	r6,r6,r2
   1c3f4:	19801636 	bltu	r3,r6,1c450 <_calloc_r+0xa4>
   1c3f8:	008004c4 	movi	r2,19
   1c3fc:	11800b2e 	bgeu	r2,r6,1c42c <_calloc_r+0x80>
   1c400:	80000015 	stw	zero,0(r16)
   1c404:	80000115 	stw	zero,4(r16)
   1c408:	008006c4 	movi	r2,27
   1c40c:	11801a2e 	bgeu	r2,r6,1c478 <_calloc_r+0xcc>
   1c410:	80000215 	stw	zero,8(r16)
   1c414:	80000315 	stw	zero,12(r16)
   1c418:	30c0151e 	bne	r6,r3,1c470 <_calloc_r+0xc4>
   1c41c:	80000415 	stw	zero,16(r16)
   1c420:	80800604 	addi	r2,r16,24
   1c424:	80000515 	stw	zero,20(r16)
   1c428:	00000106 	br	1c430 <_calloc_r+0x84>
   1c42c:	8005883a 	mov	r2,r16
   1c430:	10000015 	stw	zero,0(r2)
   1c434:	10000115 	stw	zero,4(r2)
   1c438:	10000215 	stw	zero,8(r2)
   1c43c:	8005883a 	mov	r2,r16
   1c440:	dfc00117 	ldw	ra,4(sp)
   1c444:	dc000017 	ldw	r16,0(sp)
   1c448:	dec00204 	addi	sp,sp,8
   1c44c:	f800283a 	ret
   1c450:	000b883a 	mov	r5,zero
   1c454:	8009883a 	mov	r4,r16
   1c458:	000fdbc0 	call	fdbc <memset>
   1c45c:	8005883a 	mov	r2,r16
   1c460:	dfc00117 	ldw	ra,4(sp)
   1c464:	dc000017 	ldw	r16,0(sp)
   1c468:	dec00204 	addi	sp,sp,8
   1c46c:	f800283a 	ret
   1c470:	80800404 	addi	r2,r16,16
   1c474:	003fee06 	br	1c430 <__alt_data_end+0xfc01c430>
   1c478:	80800204 	addi	r2,r16,8
   1c47c:	003fec06 	br	1c430 <__alt_data_end+0xfc01c430>
   1c480:	0005883a 	mov	r2,zero
   1c484:	003fee06 	br	1c440 <__alt_data_end+0xfc01c440>

0001c488 <_fclose_r>:
   1c488:	28003926 	beq	r5,zero,1c570 <_fclose_r+0xe8>
   1c48c:	defffc04 	addi	sp,sp,-16
   1c490:	dc400115 	stw	r17,4(sp)
   1c494:	dc000015 	stw	r16,0(sp)
   1c498:	dfc00315 	stw	ra,12(sp)
   1c49c:	dc800215 	stw	r18,8(sp)
   1c4a0:	2023883a 	mov	r17,r4
   1c4a4:	2821883a 	mov	r16,r5
   1c4a8:	20000226 	beq	r4,zero,1c4b4 <_fclose_r+0x2c>
   1c4ac:	20800e17 	ldw	r2,56(r4)
   1c4b0:	10002726 	beq	r2,zero,1c550 <_fclose_r+0xc8>
   1c4b4:	8080030f 	ldh	r2,12(r16)
   1c4b8:	1000071e 	bne	r2,zero,1c4d8 <_fclose_r+0x50>
   1c4bc:	0005883a 	mov	r2,zero
   1c4c0:	dfc00317 	ldw	ra,12(sp)
   1c4c4:	dc800217 	ldw	r18,8(sp)
   1c4c8:	dc400117 	ldw	r17,4(sp)
   1c4cc:	dc000017 	ldw	r16,0(sp)
   1c4d0:	dec00404 	addi	sp,sp,16
   1c4d4:	f800283a 	ret
   1c4d8:	800b883a 	mov	r5,r16
   1c4dc:	8809883a 	mov	r4,r17
   1c4e0:	00166500 	call	16650 <__sflush_r>
   1c4e4:	1025883a 	mov	r18,r2
   1c4e8:	80800b17 	ldw	r2,44(r16)
   1c4ec:	10000426 	beq	r2,zero,1c500 <_fclose_r+0x78>
   1c4f0:	81400717 	ldw	r5,28(r16)
   1c4f4:	8809883a 	mov	r4,r17
   1c4f8:	103ee83a 	callr	r2
   1c4fc:	10001616 	blt	r2,zero,1c558 <_fclose_r+0xd0>
   1c500:	8080030b 	ldhu	r2,12(r16)
   1c504:	1080200c 	andi	r2,r2,128
   1c508:	1000151e 	bne	r2,zero,1c560 <_fclose_r+0xd8>
   1c50c:	81400c17 	ldw	r5,48(r16)
   1c510:	28000526 	beq	r5,zero,1c528 <_fclose_r+0xa0>
   1c514:	80801004 	addi	r2,r16,64
   1c518:	28800226 	beq	r5,r2,1c524 <_fclose_r+0x9c>
   1c51c:	8809883a 	mov	r4,r17
   1c520:	0016dcc0 	call	16dcc <_free_r>
   1c524:	80000c15 	stw	zero,48(r16)
   1c528:	81401117 	ldw	r5,68(r16)
   1c52c:	28000326 	beq	r5,zero,1c53c <_fclose_r+0xb4>
   1c530:	8809883a 	mov	r4,r17
   1c534:	0016dcc0 	call	16dcc <_free_r>
   1c538:	80001115 	stw	zero,68(r16)
   1c53c:	0016c680 	call	16c68 <__sfp_lock_acquire>
   1c540:	8000030d 	sth	zero,12(r16)
   1c544:	0016c6c0 	call	16c6c <__sfp_lock_release>
   1c548:	9005883a 	mov	r2,r18
   1c54c:	003fdc06 	br	1c4c0 <__alt_data_end+0xfc01c4c0>
   1c550:	0016c580 	call	16c58 <__sinit>
   1c554:	003fd706 	br	1c4b4 <__alt_data_end+0xfc01c4b4>
   1c558:	04bfffc4 	movi	r18,-1
   1c55c:	003fe806 	br	1c500 <__alt_data_end+0xfc01c500>
   1c560:	81400417 	ldw	r5,16(r16)
   1c564:	8809883a 	mov	r4,r17
   1c568:	0016dcc0 	call	16dcc <_free_r>
   1c56c:	003fe706 	br	1c50c <__alt_data_end+0xfc01c50c>
   1c570:	0005883a 	mov	r2,zero
   1c574:	f800283a 	ret

0001c578 <fclose>:
   1c578:	008000f4 	movhi	r2,3
   1c57c:	10baf904 	addi	r2,r2,-5148
   1c580:	200b883a 	mov	r5,r4
   1c584:	11000017 	ldw	r4,0(r2)
   1c588:	001c4881 	jmpi	1c488 <_fclose_r>

0001c58c <__fputwc>:
   1c58c:	defff804 	addi	sp,sp,-32
   1c590:	dcc00415 	stw	r19,16(sp)
   1c594:	dc800315 	stw	r18,12(sp)
   1c598:	dc000115 	stw	r16,4(sp)
   1c59c:	dfc00715 	stw	ra,28(sp)
   1c5a0:	dd400615 	stw	r21,24(sp)
   1c5a4:	dd000515 	stw	r20,20(sp)
   1c5a8:	dc400215 	stw	r17,8(sp)
   1c5ac:	2027883a 	mov	r19,r4
   1c5b0:	2825883a 	mov	r18,r5
   1c5b4:	3021883a 	mov	r16,r6
   1c5b8:	00177b40 	call	177b4 <__locale_mb_cur_max>
   1c5bc:	00c00044 	movi	r3,1
   1c5c0:	10c03e26 	beq	r2,r3,1c6bc <__fputwc+0x130>
   1c5c4:	81c01704 	addi	r7,r16,92
   1c5c8:	900d883a 	mov	r6,r18
   1c5cc:	d80b883a 	mov	r5,sp
   1c5d0:	9809883a 	mov	r4,r19
   1c5d4:	001c9040 	call	1c904 <_wcrtomb_r>
   1c5d8:	1029883a 	mov	r20,r2
   1c5dc:	00bfffc4 	movi	r2,-1
   1c5e0:	a0802026 	beq	r20,r2,1c664 <__fputwc+0xd8>
   1c5e4:	d9400003 	ldbu	r5,0(sp)
   1c5e8:	a0001c26 	beq	r20,zero,1c65c <__fputwc+0xd0>
   1c5ec:	0023883a 	mov	r17,zero
   1c5f0:	05400284 	movi	r21,10
   1c5f4:	00000906 	br	1c61c <__fputwc+0x90>
   1c5f8:	80800017 	ldw	r2,0(r16)
   1c5fc:	11400005 	stb	r5,0(r2)
   1c600:	80c00017 	ldw	r3,0(r16)
   1c604:	18c00044 	addi	r3,r3,1
   1c608:	80c00015 	stw	r3,0(r16)
   1c60c:	8c400044 	addi	r17,r17,1
   1c610:	dc45883a 	add	r2,sp,r17
   1c614:	8d00112e 	bgeu	r17,r20,1c65c <__fputwc+0xd0>
   1c618:	11400003 	ldbu	r5,0(r2)
   1c61c:	80c00217 	ldw	r3,8(r16)
   1c620:	18ffffc4 	addi	r3,r3,-1
   1c624:	80c00215 	stw	r3,8(r16)
   1c628:	183ff30e 	bge	r3,zero,1c5f8 <__alt_data_end+0xfc01c5f8>
   1c62c:	80800617 	ldw	r2,24(r16)
   1c630:	18801916 	blt	r3,r2,1c698 <__fputwc+0x10c>
   1c634:	80800017 	ldw	r2,0(r16)
   1c638:	11400005 	stb	r5,0(r2)
   1c63c:	80800017 	ldw	r2,0(r16)
   1c640:	10c00003 	ldbu	r3,0(r2)
   1c644:	10800044 	addi	r2,r2,1
   1c648:	1d402326 	beq	r3,r21,1c6d8 <__fputwc+0x14c>
   1c64c:	80800015 	stw	r2,0(r16)
   1c650:	8c400044 	addi	r17,r17,1
   1c654:	dc45883a 	add	r2,sp,r17
   1c658:	8d3fef36 	bltu	r17,r20,1c618 <__alt_data_end+0xfc01c618>
   1c65c:	9005883a 	mov	r2,r18
   1c660:	00000406 	br	1c674 <__fputwc+0xe8>
   1c664:	80c0030b 	ldhu	r3,12(r16)
   1c668:	a005883a 	mov	r2,r20
   1c66c:	18c01014 	ori	r3,r3,64
   1c670:	80c0030d 	sth	r3,12(r16)
   1c674:	dfc00717 	ldw	ra,28(sp)
   1c678:	dd400617 	ldw	r21,24(sp)
   1c67c:	dd000517 	ldw	r20,20(sp)
   1c680:	dcc00417 	ldw	r19,16(sp)
   1c684:	dc800317 	ldw	r18,12(sp)
   1c688:	dc400217 	ldw	r17,8(sp)
   1c68c:	dc000117 	ldw	r16,4(sp)
   1c690:	dec00804 	addi	sp,sp,32
   1c694:	f800283a 	ret
   1c698:	800d883a 	mov	r6,r16
   1c69c:	29403fcc 	andi	r5,r5,255
   1c6a0:	9809883a 	mov	r4,r19
   1c6a4:	001c1a00 	call	1c1a0 <__swbuf_r>
   1c6a8:	10bfffe0 	cmpeqi	r2,r2,-1
   1c6ac:	10803fcc 	andi	r2,r2,255
   1c6b0:	103fd626 	beq	r2,zero,1c60c <__alt_data_end+0xfc01c60c>
   1c6b4:	00bfffc4 	movi	r2,-1
   1c6b8:	003fee06 	br	1c674 <__alt_data_end+0xfc01c674>
   1c6bc:	90ffffc4 	addi	r3,r18,-1
   1c6c0:	01003f84 	movi	r4,254
   1c6c4:	20ffbf36 	bltu	r4,r3,1c5c4 <__alt_data_end+0xfc01c5c4>
   1c6c8:	900b883a 	mov	r5,r18
   1c6cc:	dc800005 	stb	r18,0(sp)
   1c6d0:	1029883a 	mov	r20,r2
   1c6d4:	003fc506 	br	1c5ec <__alt_data_end+0xfc01c5ec>
   1c6d8:	800d883a 	mov	r6,r16
   1c6dc:	a80b883a 	mov	r5,r21
   1c6e0:	9809883a 	mov	r4,r19
   1c6e4:	001c1a00 	call	1c1a0 <__swbuf_r>
   1c6e8:	10bfffe0 	cmpeqi	r2,r2,-1
   1c6ec:	003fef06 	br	1c6ac <__alt_data_end+0xfc01c6ac>

0001c6f0 <_fputwc_r>:
   1c6f0:	3080030b 	ldhu	r2,12(r6)
   1c6f4:	10c8000c 	andi	r3,r2,8192
   1c6f8:	1800051e 	bne	r3,zero,1c710 <_fputwc_r+0x20>
   1c6fc:	30c01917 	ldw	r3,100(r6)
   1c700:	10880014 	ori	r2,r2,8192
   1c704:	3080030d 	sth	r2,12(r6)
   1c708:	18880014 	ori	r2,r3,8192
   1c70c:	30801915 	stw	r2,100(r6)
   1c710:	001c58c1 	jmpi	1c58c <__fputwc>

0001c714 <fputwc>:
   1c714:	008000f4 	movhi	r2,3
   1c718:	defffc04 	addi	sp,sp,-16
   1c71c:	10baf904 	addi	r2,r2,-5148
   1c720:	dc000115 	stw	r16,4(sp)
   1c724:	14000017 	ldw	r16,0(r2)
   1c728:	dc400215 	stw	r17,8(sp)
   1c72c:	dfc00315 	stw	ra,12(sp)
   1c730:	2023883a 	mov	r17,r4
   1c734:	80000226 	beq	r16,zero,1c740 <fputwc+0x2c>
   1c738:	80800e17 	ldw	r2,56(r16)
   1c73c:	10001026 	beq	r2,zero,1c780 <fputwc+0x6c>
   1c740:	2880030b 	ldhu	r2,12(r5)
   1c744:	10c8000c 	andi	r3,r2,8192
   1c748:	1800051e 	bne	r3,zero,1c760 <fputwc+0x4c>
   1c74c:	28c01917 	ldw	r3,100(r5)
   1c750:	10880014 	ori	r2,r2,8192
   1c754:	2880030d 	sth	r2,12(r5)
   1c758:	18880014 	ori	r2,r3,8192
   1c75c:	28801915 	stw	r2,100(r5)
   1c760:	280d883a 	mov	r6,r5
   1c764:	8009883a 	mov	r4,r16
   1c768:	880b883a 	mov	r5,r17
   1c76c:	dfc00317 	ldw	ra,12(sp)
   1c770:	dc400217 	ldw	r17,8(sp)
   1c774:	dc000117 	ldw	r16,4(sp)
   1c778:	dec00404 	addi	sp,sp,16
   1c77c:	001c58c1 	jmpi	1c58c <__fputwc>
   1c780:	8009883a 	mov	r4,r16
   1c784:	d9400015 	stw	r5,0(sp)
   1c788:	0016c580 	call	16c58 <__sinit>
   1c78c:	d9400017 	ldw	r5,0(sp)
   1c790:	003feb06 	br	1c740 <__alt_data_end+0xfc01c740>

0001c794 <_fstat_r>:
   1c794:	defffd04 	addi	sp,sp,-12
   1c798:	2805883a 	mov	r2,r5
   1c79c:	dc000015 	stw	r16,0(sp)
   1c7a0:	040000f4 	movhi	r16,3
   1c7a4:	dc400115 	stw	r17,4(sp)
   1c7a8:	84079404 	addi	r16,r16,7760
   1c7ac:	2023883a 	mov	r17,r4
   1c7b0:	300b883a 	mov	r5,r6
   1c7b4:	1009883a 	mov	r4,r2
   1c7b8:	dfc00215 	stw	ra,8(sp)
   1c7bc:	80000015 	stw	zero,0(r16)
   1c7c0:	002009c0 	call	2009c <fstat>
   1c7c4:	00ffffc4 	movi	r3,-1
   1c7c8:	10c00526 	beq	r2,r3,1c7e0 <_fstat_r+0x4c>
   1c7cc:	dfc00217 	ldw	ra,8(sp)
   1c7d0:	dc400117 	ldw	r17,4(sp)
   1c7d4:	dc000017 	ldw	r16,0(sp)
   1c7d8:	dec00304 	addi	sp,sp,12
   1c7dc:	f800283a 	ret
   1c7e0:	80c00017 	ldw	r3,0(r16)
   1c7e4:	183ff926 	beq	r3,zero,1c7cc <__alt_data_end+0xfc01c7cc>
   1c7e8:	88c00015 	stw	r3,0(r17)
   1c7ec:	003ff706 	br	1c7cc <__alt_data_end+0xfc01c7cc>

0001c7f0 <_isatty_r>:
   1c7f0:	defffd04 	addi	sp,sp,-12
   1c7f4:	dc000015 	stw	r16,0(sp)
   1c7f8:	040000f4 	movhi	r16,3
   1c7fc:	dc400115 	stw	r17,4(sp)
   1c800:	84079404 	addi	r16,r16,7760
   1c804:	2023883a 	mov	r17,r4
   1c808:	2809883a 	mov	r4,r5
   1c80c:	dfc00215 	stw	ra,8(sp)
   1c810:	80000015 	stw	zero,0(r16)
   1c814:	00201b00 	call	201b0 <isatty>
   1c818:	00ffffc4 	movi	r3,-1
   1c81c:	10c00526 	beq	r2,r3,1c834 <_isatty_r+0x44>
   1c820:	dfc00217 	ldw	ra,8(sp)
   1c824:	dc400117 	ldw	r17,4(sp)
   1c828:	dc000017 	ldw	r16,0(sp)
   1c82c:	dec00304 	addi	sp,sp,12
   1c830:	f800283a 	ret
   1c834:	80c00017 	ldw	r3,0(r16)
   1c838:	183ff926 	beq	r3,zero,1c820 <__alt_data_end+0xfc01c820>
   1c83c:	88c00015 	stw	r3,0(r17)
   1c840:	003ff706 	br	1c820 <__alt_data_end+0xfc01c820>

0001c844 <_lseek_r>:
   1c844:	defffd04 	addi	sp,sp,-12
   1c848:	2805883a 	mov	r2,r5
   1c84c:	dc000015 	stw	r16,0(sp)
   1c850:	040000f4 	movhi	r16,3
   1c854:	dc400115 	stw	r17,4(sp)
   1c858:	300b883a 	mov	r5,r6
   1c85c:	84079404 	addi	r16,r16,7760
   1c860:	2023883a 	mov	r17,r4
   1c864:	380d883a 	mov	r6,r7
   1c868:	1009883a 	mov	r4,r2
   1c86c:	dfc00215 	stw	ra,8(sp)
   1c870:	80000015 	stw	zero,0(r16)
   1c874:	00204f00 	call	204f0 <lseek>
   1c878:	00ffffc4 	movi	r3,-1
   1c87c:	10c00526 	beq	r2,r3,1c894 <_lseek_r+0x50>
   1c880:	dfc00217 	ldw	ra,8(sp)
   1c884:	dc400117 	ldw	r17,4(sp)
   1c888:	dc000017 	ldw	r16,0(sp)
   1c88c:	dec00304 	addi	sp,sp,12
   1c890:	f800283a 	ret
   1c894:	80c00017 	ldw	r3,0(r16)
   1c898:	183ff926 	beq	r3,zero,1c880 <__alt_data_end+0xfc01c880>
   1c89c:	88c00015 	stw	r3,0(r17)
   1c8a0:	003ff706 	br	1c880 <__alt_data_end+0xfc01c880>

0001c8a4 <_read_r>:
   1c8a4:	defffd04 	addi	sp,sp,-12
   1c8a8:	2805883a 	mov	r2,r5
   1c8ac:	dc000015 	stw	r16,0(sp)
   1c8b0:	040000f4 	movhi	r16,3
   1c8b4:	dc400115 	stw	r17,4(sp)
   1c8b8:	300b883a 	mov	r5,r6
   1c8bc:	84079404 	addi	r16,r16,7760
   1c8c0:	2023883a 	mov	r17,r4
   1c8c4:	380d883a 	mov	r6,r7
   1c8c8:	1009883a 	mov	r4,r2
   1c8cc:	dfc00215 	stw	ra,8(sp)
   1c8d0:	80000015 	stw	zero,0(r16)
   1c8d4:	00206cc0 	call	206cc <read>
   1c8d8:	00ffffc4 	movi	r3,-1
   1c8dc:	10c00526 	beq	r2,r3,1c8f4 <_read_r+0x50>
   1c8e0:	dfc00217 	ldw	ra,8(sp)
   1c8e4:	dc400117 	ldw	r17,4(sp)
   1c8e8:	dc000017 	ldw	r16,0(sp)
   1c8ec:	dec00304 	addi	sp,sp,12
   1c8f0:	f800283a 	ret
   1c8f4:	80c00017 	ldw	r3,0(r16)
   1c8f8:	183ff926 	beq	r3,zero,1c8e0 <__alt_data_end+0xfc01c8e0>
   1c8fc:	88c00015 	stw	r3,0(r17)
   1c900:	003ff706 	br	1c8e0 <__alt_data_end+0xfc01c8e0>

0001c904 <_wcrtomb_r>:
   1c904:	defff604 	addi	sp,sp,-40
   1c908:	008000f4 	movhi	r2,3
   1c90c:	dc800815 	stw	r18,32(sp)
   1c910:	dc400715 	stw	r17,28(sp)
   1c914:	dc000615 	stw	r16,24(sp)
   1c918:	10bafd04 	addi	r2,r2,-5132
   1c91c:	dfc00915 	stw	ra,36(sp)
   1c920:	2021883a 	mov	r16,r4
   1c924:	3823883a 	mov	r17,r7
   1c928:	14800017 	ldw	r18,0(r2)
   1c92c:	28001426 	beq	r5,zero,1c980 <_wcrtomb_r+0x7c>
   1c930:	d9400415 	stw	r5,16(sp)
   1c934:	d9800515 	stw	r6,20(sp)
   1c938:	00177a80 	call	177a8 <__locale_charset>
   1c93c:	d9800517 	ldw	r6,20(sp)
   1c940:	d9400417 	ldw	r5,16(sp)
   1c944:	100f883a 	mov	r7,r2
   1c948:	dc400015 	stw	r17,0(sp)
   1c94c:	8009883a 	mov	r4,r16
   1c950:	903ee83a 	callr	r18
   1c954:	00ffffc4 	movi	r3,-1
   1c958:	10c0031e 	bne	r2,r3,1c968 <_wcrtomb_r+0x64>
   1c95c:	88000015 	stw	zero,0(r17)
   1c960:	00c02284 	movi	r3,138
   1c964:	80c00015 	stw	r3,0(r16)
   1c968:	dfc00917 	ldw	ra,36(sp)
   1c96c:	dc800817 	ldw	r18,32(sp)
   1c970:	dc400717 	ldw	r17,28(sp)
   1c974:	dc000617 	ldw	r16,24(sp)
   1c978:	dec00a04 	addi	sp,sp,40
   1c97c:	f800283a 	ret
   1c980:	00177a80 	call	177a8 <__locale_charset>
   1c984:	100f883a 	mov	r7,r2
   1c988:	dc400015 	stw	r17,0(sp)
   1c98c:	000d883a 	mov	r6,zero
   1c990:	d9400104 	addi	r5,sp,4
   1c994:	8009883a 	mov	r4,r16
   1c998:	903ee83a 	callr	r18
   1c99c:	003fed06 	br	1c954 <__alt_data_end+0xfc01c954>

0001c9a0 <wcrtomb>:
   1c9a0:	defff604 	addi	sp,sp,-40
   1c9a4:	008000f4 	movhi	r2,3
   1c9a8:	dc800615 	stw	r18,24(sp)
   1c9ac:	dc400515 	stw	r17,20(sp)
   1c9b0:	10baf904 	addi	r2,r2,-5148
   1c9b4:	dfc00915 	stw	ra,36(sp)
   1c9b8:	dd000815 	stw	r20,32(sp)
   1c9bc:	dcc00715 	stw	r19,28(sp)
   1c9c0:	dc000415 	stw	r16,16(sp)
   1c9c4:	3025883a 	mov	r18,r6
   1c9c8:	14400017 	ldw	r17,0(r2)
   1c9cc:	20001926 	beq	r4,zero,1ca34 <wcrtomb+0x94>
   1c9d0:	008000f4 	movhi	r2,3
   1c9d4:	10bafd04 	addi	r2,r2,-5132
   1c9d8:	15000017 	ldw	r20,0(r2)
   1c9dc:	2021883a 	mov	r16,r4
   1c9e0:	2827883a 	mov	r19,r5
   1c9e4:	00177a80 	call	177a8 <__locale_charset>
   1c9e8:	100f883a 	mov	r7,r2
   1c9ec:	dc800015 	stw	r18,0(sp)
   1c9f0:	980d883a 	mov	r6,r19
   1c9f4:	800b883a 	mov	r5,r16
   1c9f8:	8809883a 	mov	r4,r17
   1c9fc:	a03ee83a 	callr	r20
   1ca00:	00ffffc4 	movi	r3,-1
   1ca04:	10c0031e 	bne	r2,r3,1ca14 <wcrtomb+0x74>
   1ca08:	90000015 	stw	zero,0(r18)
   1ca0c:	00c02284 	movi	r3,138
   1ca10:	88c00015 	stw	r3,0(r17)
   1ca14:	dfc00917 	ldw	ra,36(sp)
   1ca18:	dd000817 	ldw	r20,32(sp)
   1ca1c:	dcc00717 	ldw	r19,28(sp)
   1ca20:	dc800617 	ldw	r18,24(sp)
   1ca24:	dc400517 	ldw	r17,20(sp)
   1ca28:	dc000417 	ldw	r16,16(sp)
   1ca2c:	dec00a04 	addi	sp,sp,40
   1ca30:	f800283a 	ret
   1ca34:	008000f4 	movhi	r2,3
   1ca38:	10bafd04 	addi	r2,r2,-5132
   1ca3c:	14000017 	ldw	r16,0(r2)
   1ca40:	00177a80 	call	177a8 <__locale_charset>
   1ca44:	100f883a 	mov	r7,r2
   1ca48:	dc800015 	stw	r18,0(sp)
   1ca4c:	000d883a 	mov	r6,zero
   1ca50:	d9400104 	addi	r5,sp,4
   1ca54:	8809883a 	mov	r4,r17
   1ca58:	803ee83a 	callr	r16
   1ca5c:	003fe806 	br	1ca00 <__alt_data_end+0xfc01ca00>

0001ca60 <__ascii_wctomb>:
   1ca60:	28000526 	beq	r5,zero,1ca78 <__ascii_wctomb+0x18>
   1ca64:	00803fc4 	movi	r2,255
   1ca68:	11800536 	bltu	r2,r6,1ca80 <__ascii_wctomb+0x20>
   1ca6c:	29800005 	stb	r6,0(r5)
   1ca70:	00800044 	movi	r2,1
   1ca74:	f800283a 	ret
   1ca78:	0005883a 	mov	r2,zero
   1ca7c:	f800283a 	ret
   1ca80:	00802284 	movi	r2,138
   1ca84:	20800015 	stw	r2,0(r4)
   1ca88:	00bfffc4 	movi	r2,-1
   1ca8c:	f800283a 	ret

0001ca90 <_wctomb_r>:
   1ca90:	008000f4 	movhi	r2,3
   1ca94:	defff904 	addi	sp,sp,-28
   1ca98:	10bafd04 	addi	r2,r2,-5132
   1ca9c:	dfc00615 	stw	ra,24(sp)
   1caa0:	dc400515 	stw	r17,20(sp)
   1caa4:	dc000415 	stw	r16,16(sp)
   1caa8:	3823883a 	mov	r17,r7
   1caac:	14000017 	ldw	r16,0(r2)
   1cab0:	d9000115 	stw	r4,4(sp)
   1cab4:	d9400215 	stw	r5,8(sp)
   1cab8:	d9800315 	stw	r6,12(sp)
   1cabc:	00177a80 	call	177a8 <__locale_charset>
   1cac0:	d9800317 	ldw	r6,12(sp)
   1cac4:	d9400217 	ldw	r5,8(sp)
   1cac8:	d9000117 	ldw	r4,4(sp)
   1cacc:	100f883a 	mov	r7,r2
   1cad0:	dc400015 	stw	r17,0(sp)
   1cad4:	803ee83a 	callr	r16
   1cad8:	dfc00617 	ldw	ra,24(sp)
   1cadc:	dc400517 	ldw	r17,20(sp)
   1cae0:	dc000417 	ldw	r16,16(sp)
   1cae4:	dec00704 	addi	sp,sp,28
   1cae8:	f800283a 	ret

0001caec <__udivdi3>:
   1caec:	defff404 	addi	sp,sp,-48
   1caf0:	dcc00515 	stw	r19,20(sp)
   1caf4:	dc000215 	stw	r16,8(sp)
   1caf8:	dfc00b15 	stw	ra,44(sp)
   1cafc:	df000a15 	stw	fp,40(sp)
   1cb00:	ddc00915 	stw	r23,36(sp)
   1cb04:	dd800815 	stw	r22,32(sp)
   1cb08:	dd400715 	stw	r21,28(sp)
   1cb0c:	dd000615 	stw	r20,24(sp)
   1cb10:	dc800415 	stw	r18,16(sp)
   1cb14:	dc400315 	stw	r17,12(sp)
   1cb18:	2027883a 	mov	r19,r4
   1cb1c:	2821883a 	mov	r16,r5
   1cb20:	3800461e 	bne	r7,zero,1cc3c <__udivdi3+0x150>
   1cb24:	3023883a 	mov	r17,r6
   1cb28:	2025883a 	mov	r18,r4
   1cb2c:	2980572e 	bgeu	r5,r6,1cc8c <__udivdi3+0x1a0>
   1cb30:	00bfffd4 	movui	r2,65535
   1cb34:	282d883a 	mov	r22,r5
   1cb38:	1180b236 	bltu	r2,r6,1ce04 <__udivdi3+0x318>
   1cb3c:	00803fc4 	movi	r2,255
   1cb40:	1185803a 	cmpltu	r2,r2,r6
   1cb44:	100490fa 	slli	r2,r2,3
   1cb48:	3086d83a 	srl	r3,r6,r2
   1cb4c:	010000f4 	movhi	r4,3
   1cb50:	212db204 	addi	r4,r4,-18744
   1cb54:	20c7883a 	add	r3,r4,r3
   1cb58:	18c00003 	ldbu	r3,0(r3)
   1cb5c:	1885883a 	add	r2,r3,r2
   1cb60:	00c00804 	movi	r3,32
   1cb64:	1887c83a 	sub	r3,r3,r2
   1cb68:	18000526 	beq	r3,zero,1cb80 <__udivdi3+0x94>
   1cb6c:	80e0983a 	sll	r16,r16,r3
   1cb70:	9884d83a 	srl	r2,r19,r2
   1cb74:	30e2983a 	sll	r17,r6,r3
   1cb78:	98e4983a 	sll	r18,r19,r3
   1cb7c:	142cb03a 	or	r22,r2,r16
   1cb80:	882ad43a 	srli	r21,r17,16
   1cb84:	b009883a 	mov	r4,r22
   1cb88:	8d3fffcc 	andi	r20,r17,65535
   1cb8c:	a80b883a 	mov	r5,r21
   1cb90:	000d87c0 	call	d87c <__umodsi3>
   1cb94:	b009883a 	mov	r4,r22
   1cb98:	a80b883a 	mov	r5,r21
   1cb9c:	1027883a 	mov	r19,r2
   1cba0:	000d8180 	call	d818 <__udivsi3>
   1cba4:	100b883a 	mov	r5,r2
   1cba8:	a009883a 	mov	r4,r20
   1cbac:	102d883a 	mov	r22,r2
   1cbb0:	000d8d40 	call	d8d4 <__mulsi3>
   1cbb4:	9826943a 	slli	r19,r19,16
   1cbb8:	9006d43a 	srli	r3,r18,16
   1cbbc:	1cc6b03a 	or	r3,r3,r19
   1cbc0:	1880052e 	bgeu	r3,r2,1cbd8 <__udivdi3+0xec>
   1cbc4:	1c47883a 	add	r3,r3,r17
   1cbc8:	b13fffc4 	addi	r4,r22,-1
   1cbcc:	1c400136 	bltu	r3,r17,1cbd4 <__udivdi3+0xe8>
   1cbd0:	18814236 	bltu	r3,r2,1d0dc <__udivdi3+0x5f0>
   1cbd4:	202d883a 	mov	r22,r4
   1cbd8:	18a1c83a 	sub	r16,r3,r2
   1cbdc:	8009883a 	mov	r4,r16
   1cbe0:	a80b883a 	mov	r5,r21
   1cbe4:	000d87c0 	call	d87c <__umodsi3>
   1cbe8:	1027883a 	mov	r19,r2
   1cbec:	8009883a 	mov	r4,r16
   1cbf0:	a80b883a 	mov	r5,r21
   1cbf4:	9826943a 	slli	r19,r19,16
   1cbf8:	000d8180 	call	d818 <__udivsi3>
   1cbfc:	100b883a 	mov	r5,r2
   1cc00:	a009883a 	mov	r4,r20
   1cc04:	94bfffcc 	andi	r18,r18,65535
   1cc08:	1021883a 	mov	r16,r2
   1cc0c:	94e4b03a 	or	r18,r18,r19
   1cc10:	000d8d40 	call	d8d4 <__mulsi3>
   1cc14:	9080052e 	bgeu	r18,r2,1cc2c <__udivdi3+0x140>
   1cc18:	8ca5883a 	add	r18,r17,r18
   1cc1c:	80ffffc4 	addi	r3,r16,-1
   1cc20:	94410c36 	bltu	r18,r17,1d054 <__udivdi3+0x568>
   1cc24:	90810b2e 	bgeu	r18,r2,1d054 <__udivdi3+0x568>
   1cc28:	843fff84 	addi	r16,r16,-2
   1cc2c:	b004943a 	slli	r2,r22,16
   1cc30:	0007883a 	mov	r3,zero
   1cc34:	1404b03a 	or	r2,r2,r16
   1cc38:	00005e06 	br	1cdb4 <__udivdi3+0x2c8>
   1cc3c:	29c05b36 	bltu	r5,r7,1cdac <__udivdi3+0x2c0>
   1cc40:	00bfffd4 	movui	r2,65535
   1cc44:	11c0672e 	bgeu	r2,r7,1cde4 <__udivdi3+0x2f8>
   1cc48:	00804034 	movhi	r2,256
   1cc4c:	10bfffc4 	addi	r2,r2,-1
   1cc50:	11c10a36 	bltu	r2,r7,1d07c <__udivdi3+0x590>
   1cc54:	00800404 	movi	r2,16
   1cc58:	3886d83a 	srl	r3,r7,r2
   1cc5c:	010000f4 	movhi	r4,3
   1cc60:	212db204 	addi	r4,r4,-18744
   1cc64:	20c7883a 	add	r3,r4,r3
   1cc68:	18c00003 	ldbu	r3,0(r3)
   1cc6c:	05c00804 	movi	r23,32
   1cc70:	1885883a 	add	r2,r3,r2
   1cc74:	b8afc83a 	sub	r23,r23,r2
   1cc78:	b800671e 	bne	r23,zero,1ce18 <__udivdi3+0x32c>
   1cc7c:	3c010536 	bltu	r7,r16,1d094 <__udivdi3+0x5a8>
   1cc80:	9985403a 	cmpgeu	r2,r19,r6
   1cc84:	0007883a 	mov	r3,zero
   1cc88:	00004a06 	br	1cdb4 <__udivdi3+0x2c8>
   1cc8c:	3000041e 	bne	r6,zero,1cca0 <__udivdi3+0x1b4>
   1cc90:	000b883a 	mov	r5,zero
   1cc94:	01000044 	movi	r4,1
   1cc98:	000d8180 	call	d818 <__udivsi3>
   1cc9c:	1023883a 	mov	r17,r2
   1cca0:	00bfffd4 	movui	r2,65535
   1cca4:	1440532e 	bgeu	r2,r17,1cdf4 <__udivdi3+0x308>
   1cca8:	00804034 	movhi	r2,256
   1ccac:	10bfffc4 	addi	r2,r2,-1
   1ccb0:	1440f436 	bltu	r2,r17,1d084 <__udivdi3+0x598>
   1ccb4:	00800404 	movi	r2,16
   1ccb8:	8886d83a 	srl	r3,r17,r2
   1ccbc:	010000f4 	movhi	r4,3
   1ccc0:	212db204 	addi	r4,r4,-18744
   1ccc4:	20c7883a 	add	r3,r4,r3
   1ccc8:	18c00003 	ldbu	r3,0(r3)
   1cccc:	1885883a 	add	r2,r3,r2
   1ccd0:	00c00804 	movi	r3,32
   1ccd4:	1887c83a 	sub	r3,r3,r2
   1ccd8:	1800a51e 	bne	r3,zero,1cf70 <__udivdi3+0x484>
   1ccdc:	882ad43a 	srli	r21,r17,16
   1cce0:	8461c83a 	sub	r16,r16,r17
   1cce4:	8d3fffcc 	andi	r20,r17,65535
   1cce8:	00c00044 	movi	r3,1
   1ccec:	a80b883a 	mov	r5,r21
   1ccf0:	8009883a 	mov	r4,r16
   1ccf4:	d8c00115 	stw	r3,4(sp)
   1ccf8:	000d87c0 	call	d87c <__umodsi3>
   1ccfc:	a80b883a 	mov	r5,r21
   1cd00:	8009883a 	mov	r4,r16
   1cd04:	1027883a 	mov	r19,r2
   1cd08:	000d8180 	call	d818 <__udivsi3>
   1cd0c:	a00b883a 	mov	r5,r20
   1cd10:	1009883a 	mov	r4,r2
   1cd14:	102d883a 	mov	r22,r2
   1cd18:	000d8d40 	call	d8d4 <__mulsi3>
   1cd1c:	9826943a 	slli	r19,r19,16
   1cd20:	900ed43a 	srli	r7,r18,16
   1cd24:	d8c00117 	ldw	r3,4(sp)
   1cd28:	3cceb03a 	or	r7,r7,r19
   1cd2c:	3880052e 	bgeu	r7,r2,1cd44 <__udivdi3+0x258>
   1cd30:	3c4f883a 	add	r7,r7,r17
   1cd34:	b13fffc4 	addi	r4,r22,-1
   1cd38:	3c400136 	bltu	r7,r17,1cd40 <__udivdi3+0x254>
   1cd3c:	3880e436 	bltu	r7,r2,1d0d0 <__udivdi3+0x5e4>
   1cd40:	202d883a 	mov	r22,r4
   1cd44:	38a1c83a 	sub	r16,r7,r2
   1cd48:	8009883a 	mov	r4,r16
   1cd4c:	a80b883a 	mov	r5,r21
   1cd50:	d8c00115 	stw	r3,4(sp)
   1cd54:	000d87c0 	call	d87c <__umodsi3>
   1cd58:	1027883a 	mov	r19,r2
   1cd5c:	8009883a 	mov	r4,r16
   1cd60:	a80b883a 	mov	r5,r21
   1cd64:	9826943a 	slli	r19,r19,16
   1cd68:	000d8180 	call	d818 <__udivsi3>
   1cd6c:	a00b883a 	mov	r5,r20
   1cd70:	1009883a 	mov	r4,r2
   1cd74:	94bfffcc 	andi	r18,r18,65535
   1cd78:	1021883a 	mov	r16,r2
   1cd7c:	94e4b03a 	or	r18,r18,r19
   1cd80:	000d8d40 	call	d8d4 <__mulsi3>
   1cd84:	d8c00117 	ldw	r3,4(sp)
   1cd88:	9080052e 	bgeu	r18,r2,1cda0 <__udivdi3+0x2b4>
   1cd8c:	8ca5883a 	add	r18,r17,r18
   1cd90:	813fffc4 	addi	r4,r16,-1
   1cd94:	9440ad36 	bltu	r18,r17,1d04c <__udivdi3+0x560>
   1cd98:	9080ac2e 	bgeu	r18,r2,1d04c <__udivdi3+0x560>
   1cd9c:	843fff84 	addi	r16,r16,-2
   1cda0:	b004943a 	slli	r2,r22,16
   1cda4:	1404b03a 	or	r2,r2,r16
   1cda8:	00000206 	br	1cdb4 <__udivdi3+0x2c8>
   1cdac:	0007883a 	mov	r3,zero
   1cdb0:	0005883a 	mov	r2,zero
   1cdb4:	dfc00b17 	ldw	ra,44(sp)
   1cdb8:	df000a17 	ldw	fp,40(sp)
   1cdbc:	ddc00917 	ldw	r23,36(sp)
   1cdc0:	dd800817 	ldw	r22,32(sp)
   1cdc4:	dd400717 	ldw	r21,28(sp)
   1cdc8:	dd000617 	ldw	r20,24(sp)
   1cdcc:	dcc00517 	ldw	r19,20(sp)
   1cdd0:	dc800417 	ldw	r18,16(sp)
   1cdd4:	dc400317 	ldw	r17,12(sp)
   1cdd8:	dc000217 	ldw	r16,8(sp)
   1cddc:	dec00c04 	addi	sp,sp,48
   1cde0:	f800283a 	ret
   1cde4:	00803fc4 	movi	r2,255
   1cde8:	11c5803a 	cmpltu	r2,r2,r7
   1cdec:	100490fa 	slli	r2,r2,3
   1cdf0:	003f9906 	br	1cc58 <__alt_data_end+0xfc01cc58>
   1cdf4:	00803fc4 	movi	r2,255
   1cdf8:	1445803a 	cmpltu	r2,r2,r17
   1cdfc:	100490fa 	slli	r2,r2,3
   1ce00:	003fad06 	br	1ccb8 <__alt_data_end+0xfc01ccb8>
   1ce04:	00804034 	movhi	r2,256
   1ce08:	10bfffc4 	addi	r2,r2,-1
   1ce0c:	11809f36 	bltu	r2,r6,1d08c <__udivdi3+0x5a0>
   1ce10:	00800404 	movi	r2,16
   1ce14:	003f4c06 	br	1cb48 <__alt_data_end+0xfc01cb48>
   1ce18:	3dce983a 	sll	r7,r7,r23
   1ce1c:	30b8d83a 	srl	fp,r6,r2
   1ce20:	80a2d83a 	srl	r17,r16,r2
   1ce24:	35cc983a 	sll	r6,r6,r23
   1ce28:	3f38b03a 	or	fp,r7,fp
   1ce2c:	e024d43a 	srli	r18,fp,16
   1ce30:	9884d83a 	srl	r2,r19,r2
   1ce34:	85e0983a 	sll	r16,r16,r23
   1ce38:	8809883a 	mov	r4,r17
   1ce3c:	900b883a 	mov	r5,r18
   1ce40:	d9800015 	stw	r6,0(sp)
   1ce44:	1420b03a 	or	r16,r2,r16
   1ce48:	000d87c0 	call	d87c <__umodsi3>
   1ce4c:	900b883a 	mov	r5,r18
   1ce50:	8809883a 	mov	r4,r17
   1ce54:	1029883a 	mov	r20,r2
   1ce58:	e5bfffcc 	andi	r22,fp,65535
   1ce5c:	000d8180 	call	d818 <__udivsi3>
   1ce60:	100b883a 	mov	r5,r2
   1ce64:	b009883a 	mov	r4,r22
   1ce68:	102b883a 	mov	r21,r2
   1ce6c:	000d8d40 	call	d8d4 <__mulsi3>
   1ce70:	a028943a 	slli	r20,r20,16
   1ce74:	8006d43a 	srli	r3,r16,16
   1ce78:	1d06b03a 	or	r3,r3,r20
   1ce7c:	1880042e 	bgeu	r3,r2,1ce90 <__udivdi3+0x3a4>
   1ce80:	1f07883a 	add	r3,r3,fp
   1ce84:	a93fffc4 	addi	r4,r21,-1
   1ce88:	1f00892e 	bgeu	r3,fp,1d0b0 <__udivdi3+0x5c4>
   1ce8c:	202b883a 	mov	r21,r4
   1ce90:	18a3c83a 	sub	r17,r3,r2
   1ce94:	8809883a 	mov	r4,r17
   1ce98:	900b883a 	mov	r5,r18
   1ce9c:	000d87c0 	call	d87c <__umodsi3>
   1cea0:	1029883a 	mov	r20,r2
   1cea4:	8809883a 	mov	r4,r17
   1cea8:	900b883a 	mov	r5,r18
   1ceac:	a028943a 	slli	r20,r20,16
   1ceb0:	000d8180 	call	d818 <__udivsi3>
   1ceb4:	100b883a 	mov	r5,r2
   1ceb8:	b009883a 	mov	r4,r22
   1cebc:	843fffcc 	andi	r16,r16,65535
   1cec0:	1023883a 	mov	r17,r2
   1cec4:	8520b03a 	or	r16,r16,r20
   1cec8:	000d8d40 	call	d8d4 <__mulsi3>
   1cecc:	8080042e 	bgeu	r16,r2,1cee0 <__udivdi3+0x3f4>
   1ced0:	8721883a 	add	r16,r16,fp
   1ced4:	88ffffc4 	addi	r3,r17,-1
   1ced8:	8700712e 	bgeu	r16,fp,1d0a0 <__udivdi3+0x5b4>
   1cedc:	1823883a 	mov	r17,r3
   1cee0:	a80e943a 	slli	r7,r21,16
   1cee4:	d8c00017 	ldw	r3,0(sp)
   1cee8:	80a1c83a 	sub	r16,r16,r2
   1ceec:	3c64b03a 	or	r18,r7,r17
   1cef0:	1d3fffcc 	andi	r20,r3,65535
   1cef4:	9022d43a 	srli	r17,r18,16
   1cef8:	95bfffcc 	andi	r22,r18,65535
   1cefc:	a00b883a 	mov	r5,r20
   1cf00:	b009883a 	mov	r4,r22
   1cf04:	182ad43a 	srli	r21,r3,16
   1cf08:	000d8d40 	call	d8d4 <__mulsi3>
   1cf0c:	a00b883a 	mov	r5,r20
   1cf10:	8809883a 	mov	r4,r17
   1cf14:	1039883a 	mov	fp,r2
   1cf18:	000d8d40 	call	d8d4 <__mulsi3>
   1cf1c:	8809883a 	mov	r4,r17
   1cf20:	a80b883a 	mov	r5,r21
   1cf24:	1029883a 	mov	r20,r2
   1cf28:	000d8d40 	call	d8d4 <__mulsi3>
   1cf2c:	a80b883a 	mov	r5,r21
   1cf30:	b009883a 	mov	r4,r22
   1cf34:	1023883a 	mov	r17,r2
   1cf38:	000d8d40 	call	d8d4 <__mulsi3>
   1cf3c:	e006d43a 	srli	r3,fp,16
   1cf40:	1505883a 	add	r2,r2,r20
   1cf44:	1887883a 	add	r3,r3,r2
   1cf48:	1d00022e 	bgeu	r3,r20,1cf54 <__udivdi3+0x468>
   1cf4c:	00800074 	movhi	r2,1
   1cf50:	88a3883a 	add	r17,r17,r2
   1cf54:	1804d43a 	srli	r2,r3,16
   1cf58:	1463883a 	add	r17,r2,r17
   1cf5c:	84404436 	bltu	r16,r17,1d070 <__udivdi3+0x584>
   1cf60:	84403e26 	beq	r16,r17,1d05c <__udivdi3+0x570>
   1cf64:	9005883a 	mov	r2,r18
   1cf68:	0007883a 	mov	r3,zero
   1cf6c:	003f9106 	br	1cdb4 <__alt_data_end+0xfc01cdb4>
   1cf70:	88e2983a 	sll	r17,r17,r3
   1cf74:	80aed83a 	srl	r23,r16,r2
   1cf78:	80e0983a 	sll	r16,r16,r3
   1cf7c:	882ad43a 	srli	r21,r17,16
   1cf80:	9884d83a 	srl	r2,r19,r2
   1cf84:	b809883a 	mov	r4,r23
   1cf88:	a80b883a 	mov	r5,r21
   1cf8c:	98e4983a 	sll	r18,r19,r3
   1cf90:	142cb03a 	or	r22,r2,r16
   1cf94:	000d87c0 	call	d87c <__umodsi3>
   1cf98:	b809883a 	mov	r4,r23
   1cf9c:	a80b883a 	mov	r5,r21
   1cfa0:	1027883a 	mov	r19,r2
   1cfa4:	8d3fffcc 	andi	r20,r17,65535
   1cfa8:	000d8180 	call	d818 <__udivsi3>
   1cfac:	a009883a 	mov	r4,r20
   1cfb0:	100b883a 	mov	r5,r2
   1cfb4:	102f883a 	mov	r23,r2
   1cfb8:	000d8d40 	call	d8d4 <__mulsi3>
   1cfbc:	9826943a 	slli	r19,r19,16
   1cfc0:	b008d43a 	srli	r4,r22,16
   1cfc4:	24c8b03a 	or	r4,r4,r19
   1cfc8:	2080062e 	bgeu	r4,r2,1cfe4 <__udivdi3+0x4f8>
   1cfcc:	2449883a 	add	r4,r4,r17
   1cfd0:	b8ffffc4 	addi	r3,r23,-1
   1cfd4:	24403c36 	bltu	r4,r17,1d0c8 <__udivdi3+0x5dc>
   1cfd8:	20803b2e 	bgeu	r4,r2,1d0c8 <__udivdi3+0x5dc>
   1cfdc:	bdffff84 	addi	r23,r23,-2
   1cfe0:	2449883a 	add	r4,r4,r17
   1cfe4:	20a1c83a 	sub	r16,r4,r2
   1cfe8:	a80b883a 	mov	r5,r21
   1cfec:	8009883a 	mov	r4,r16
   1cff0:	000d87c0 	call	d87c <__umodsi3>
   1cff4:	a80b883a 	mov	r5,r21
   1cff8:	8009883a 	mov	r4,r16
   1cffc:	1027883a 	mov	r19,r2
   1d000:	000d8180 	call	d818 <__udivsi3>
   1d004:	a009883a 	mov	r4,r20
   1d008:	100b883a 	mov	r5,r2
   1d00c:	9826943a 	slli	r19,r19,16
   1d010:	1039883a 	mov	fp,r2
   1d014:	000d8d40 	call	d8d4 <__mulsi3>
   1d018:	b13fffcc 	andi	r4,r22,65535
   1d01c:	24c8b03a 	or	r4,r4,r19
   1d020:	2080062e 	bgeu	r4,r2,1d03c <__udivdi3+0x550>
   1d024:	2449883a 	add	r4,r4,r17
   1d028:	e0ffffc4 	addi	r3,fp,-1
   1d02c:	24402436 	bltu	r4,r17,1d0c0 <__udivdi3+0x5d4>
   1d030:	2080232e 	bgeu	r4,r2,1d0c0 <__udivdi3+0x5d4>
   1d034:	e73fff84 	addi	fp,fp,-2
   1d038:	2449883a 	add	r4,r4,r17
   1d03c:	b82e943a 	slli	r23,r23,16
   1d040:	20a1c83a 	sub	r16,r4,r2
   1d044:	bf06b03a 	or	r3,r23,fp
   1d048:	003f2806 	br	1ccec <__alt_data_end+0xfc01ccec>
   1d04c:	2021883a 	mov	r16,r4
   1d050:	003f5306 	br	1cda0 <__alt_data_end+0xfc01cda0>
   1d054:	1821883a 	mov	r16,r3
   1d058:	003ef406 	br	1cc2c <__alt_data_end+0xfc01cc2c>
   1d05c:	1806943a 	slli	r3,r3,16
   1d060:	9de6983a 	sll	r19,r19,r23
   1d064:	e73fffcc 	andi	fp,fp,65535
   1d068:	1f07883a 	add	r3,r3,fp
   1d06c:	98ffbd2e 	bgeu	r19,r3,1cf64 <__alt_data_end+0xfc01cf64>
   1d070:	90bfffc4 	addi	r2,r18,-1
   1d074:	0007883a 	mov	r3,zero
   1d078:	003f4e06 	br	1cdb4 <__alt_data_end+0xfc01cdb4>
   1d07c:	00800604 	movi	r2,24
   1d080:	003ef506 	br	1cc58 <__alt_data_end+0xfc01cc58>
   1d084:	00800604 	movi	r2,24
   1d088:	003f0b06 	br	1ccb8 <__alt_data_end+0xfc01ccb8>
   1d08c:	00800604 	movi	r2,24
   1d090:	003ead06 	br	1cb48 <__alt_data_end+0xfc01cb48>
   1d094:	0007883a 	mov	r3,zero
   1d098:	00800044 	movi	r2,1
   1d09c:	003f4506 	br	1cdb4 <__alt_data_end+0xfc01cdb4>
   1d0a0:	80bf8e2e 	bgeu	r16,r2,1cedc <__alt_data_end+0xfc01cedc>
   1d0a4:	8c7fff84 	addi	r17,r17,-2
   1d0a8:	8721883a 	add	r16,r16,fp
   1d0ac:	003f8c06 	br	1cee0 <__alt_data_end+0xfc01cee0>
   1d0b0:	18bf762e 	bgeu	r3,r2,1ce8c <__alt_data_end+0xfc01ce8c>
   1d0b4:	ad7fff84 	addi	r21,r21,-2
   1d0b8:	1f07883a 	add	r3,r3,fp
   1d0bc:	003f7406 	br	1ce90 <__alt_data_end+0xfc01ce90>
   1d0c0:	1839883a 	mov	fp,r3
   1d0c4:	003fdd06 	br	1d03c <__alt_data_end+0xfc01d03c>
   1d0c8:	182f883a 	mov	r23,r3
   1d0cc:	003fc506 	br	1cfe4 <__alt_data_end+0xfc01cfe4>
   1d0d0:	b5bfff84 	addi	r22,r22,-2
   1d0d4:	3c4f883a 	add	r7,r7,r17
   1d0d8:	003f1a06 	br	1cd44 <__alt_data_end+0xfc01cd44>
   1d0dc:	b5bfff84 	addi	r22,r22,-2
   1d0e0:	1c47883a 	add	r3,r3,r17
   1d0e4:	003ebc06 	br	1cbd8 <__alt_data_end+0xfc01cbd8>

0001d0e8 <__umoddi3>:
   1d0e8:	defff304 	addi	sp,sp,-52
   1d0ec:	df000b15 	stw	fp,44(sp)
   1d0f0:	dc400415 	stw	r17,16(sp)
   1d0f4:	dc000315 	stw	r16,12(sp)
   1d0f8:	dfc00c15 	stw	ra,48(sp)
   1d0fc:	ddc00a15 	stw	r23,40(sp)
   1d100:	dd800915 	stw	r22,36(sp)
   1d104:	dd400815 	stw	r21,32(sp)
   1d108:	dd000715 	stw	r20,28(sp)
   1d10c:	dcc00615 	stw	r19,24(sp)
   1d110:	dc800515 	stw	r18,20(sp)
   1d114:	2021883a 	mov	r16,r4
   1d118:	2823883a 	mov	r17,r5
   1d11c:	2839883a 	mov	fp,r5
   1d120:	3800401e 	bne	r7,zero,1d224 <__umoddi3+0x13c>
   1d124:	3027883a 	mov	r19,r6
   1d128:	2029883a 	mov	r20,r4
   1d12c:	2980552e 	bgeu	r5,r6,1d284 <__umoddi3+0x19c>
   1d130:	00bfffd4 	movui	r2,65535
   1d134:	1180a236 	bltu	r2,r6,1d3c0 <__umoddi3+0x2d8>
   1d138:	01003fc4 	movi	r4,255
   1d13c:	2189803a 	cmpltu	r4,r4,r6
   1d140:	200890fa 	slli	r4,r4,3
   1d144:	3104d83a 	srl	r2,r6,r4
   1d148:	00c000f4 	movhi	r3,3
   1d14c:	18edb204 	addi	r3,r3,-18744
   1d150:	1885883a 	add	r2,r3,r2
   1d154:	10c00003 	ldbu	r3,0(r2)
   1d158:	00800804 	movi	r2,32
   1d15c:	1909883a 	add	r4,r3,r4
   1d160:	1125c83a 	sub	r18,r2,r4
   1d164:	90000526 	beq	r18,zero,1d17c <__umoddi3+0x94>
   1d168:	8ca2983a 	sll	r17,r17,r18
   1d16c:	8108d83a 	srl	r4,r16,r4
   1d170:	34a6983a 	sll	r19,r6,r18
   1d174:	84a8983a 	sll	r20,r16,r18
   1d178:	2478b03a 	or	fp,r4,r17
   1d17c:	982cd43a 	srli	r22,r19,16
   1d180:	e009883a 	mov	r4,fp
   1d184:	9dffffcc 	andi	r23,r19,65535
   1d188:	b00b883a 	mov	r5,r22
   1d18c:	000d87c0 	call	d87c <__umodsi3>
   1d190:	b00b883a 	mov	r5,r22
   1d194:	e009883a 	mov	r4,fp
   1d198:	102b883a 	mov	r21,r2
   1d19c:	000d8180 	call	d818 <__udivsi3>
   1d1a0:	100b883a 	mov	r5,r2
   1d1a4:	b809883a 	mov	r4,r23
   1d1a8:	000d8d40 	call	d8d4 <__mulsi3>
   1d1ac:	a82a943a 	slli	r21,r21,16
   1d1b0:	a006d43a 	srli	r3,r20,16
   1d1b4:	1d46b03a 	or	r3,r3,r21
   1d1b8:	1880032e 	bgeu	r3,r2,1d1c8 <__umoddi3+0xe0>
   1d1bc:	1cc7883a 	add	r3,r3,r19
   1d1c0:	1cc00136 	bltu	r3,r19,1d1c8 <__umoddi3+0xe0>
   1d1c4:	18813136 	bltu	r3,r2,1d68c <__umoddi3+0x5a4>
   1d1c8:	18a1c83a 	sub	r16,r3,r2
   1d1cc:	b00b883a 	mov	r5,r22
   1d1d0:	8009883a 	mov	r4,r16
   1d1d4:	000d87c0 	call	d87c <__umodsi3>
   1d1d8:	b00b883a 	mov	r5,r22
   1d1dc:	8009883a 	mov	r4,r16
   1d1e0:	1023883a 	mov	r17,r2
   1d1e4:	000d8180 	call	d818 <__udivsi3>
   1d1e8:	100b883a 	mov	r5,r2
   1d1ec:	b809883a 	mov	r4,r23
   1d1f0:	8822943a 	slli	r17,r17,16
   1d1f4:	000d8d40 	call	d8d4 <__mulsi3>
   1d1f8:	a0ffffcc 	andi	r3,r20,65535
   1d1fc:	1c46b03a 	or	r3,r3,r17
   1d200:	1880042e 	bgeu	r3,r2,1d214 <__umoddi3+0x12c>
   1d204:	1cc7883a 	add	r3,r3,r19
   1d208:	1cc00236 	bltu	r3,r19,1d214 <__umoddi3+0x12c>
   1d20c:	1880012e 	bgeu	r3,r2,1d214 <__umoddi3+0x12c>
   1d210:	1cc7883a 	add	r3,r3,r19
   1d214:	1885c83a 	sub	r2,r3,r2
   1d218:	1484d83a 	srl	r2,r2,r18
   1d21c:	0007883a 	mov	r3,zero
   1d220:	00005306 	br	1d370 <__umoddi3+0x288>
   1d224:	29c05036 	bltu	r5,r7,1d368 <__umoddi3+0x280>
   1d228:	00bfffd4 	movui	r2,65535
   1d22c:	11c05c2e 	bgeu	r2,r7,1d3a0 <__umoddi3+0x2b8>
   1d230:	00804034 	movhi	r2,256
   1d234:	10bfffc4 	addi	r2,r2,-1
   1d238:	11c10636 	bltu	r2,r7,1d654 <__umoddi3+0x56c>
   1d23c:	01000404 	movi	r4,16
   1d240:	3904d83a 	srl	r2,r7,r4
   1d244:	00c000f4 	movhi	r3,3
   1d248:	18edb204 	addi	r3,r3,-18744
   1d24c:	1885883a 	add	r2,r3,r2
   1d250:	14c00003 	ldbu	r19,0(r2)
   1d254:	00c00804 	movi	r3,32
   1d258:	9927883a 	add	r19,r19,r4
   1d25c:	1ce9c83a 	sub	r20,r3,r19
   1d260:	a0005c1e 	bne	r20,zero,1d3d4 <__umoddi3+0x2ec>
   1d264:	3c400136 	bltu	r7,r17,1d26c <__umoddi3+0x184>
   1d268:	81810a36 	bltu	r16,r6,1d694 <__umoddi3+0x5ac>
   1d26c:	8185c83a 	sub	r2,r16,r6
   1d270:	89e3c83a 	sub	r17,r17,r7
   1d274:	8089803a 	cmpltu	r4,r16,r2
   1d278:	8939c83a 	sub	fp,r17,r4
   1d27c:	e007883a 	mov	r3,fp
   1d280:	00003b06 	br	1d370 <__umoddi3+0x288>
   1d284:	3000041e 	bne	r6,zero,1d298 <__umoddi3+0x1b0>
   1d288:	000b883a 	mov	r5,zero
   1d28c:	01000044 	movi	r4,1
   1d290:	000d8180 	call	d818 <__udivsi3>
   1d294:	1027883a 	mov	r19,r2
   1d298:	00bfffd4 	movui	r2,65535
   1d29c:	14c0442e 	bgeu	r2,r19,1d3b0 <__umoddi3+0x2c8>
   1d2a0:	00804034 	movhi	r2,256
   1d2a4:	10bfffc4 	addi	r2,r2,-1
   1d2a8:	14c0ec36 	bltu	r2,r19,1d65c <__umoddi3+0x574>
   1d2ac:	00800404 	movi	r2,16
   1d2b0:	9886d83a 	srl	r3,r19,r2
   1d2b4:	010000f4 	movhi	r4,3
   1d2b8:	212db204 	addi	r4,r4,-18744
   1d2bc:	20c7883a 	add	r3,r4,r3
   1d2c0:	18c00003 	ldbu	r3,0(r3)
   1d2c4:	1887883a 	add	r3,r3,r2
   1d2c8:	00800804 	movi	r2,32
   1d2cc:	10e5c83a 	sub	r18,r2,r3
   1d2d0:	9000ab1e 	bne	r18,zero,1d580 <__umoddi3+0x498>
   1d2d4:	982cd43a 	srli	r22,r19,16
   1d2d8:	8ce3c83a 	sub	r17,r17,r19
   1d2dc:	9dffffcc 	andi	r23,r19,65535
   1d2e0:	b00b883a 	mov	r5,r22
   1d2e4:	8809883a 	mov	r4,r17
   1d2e8:	000d87c0 	call	d87c <__umodsi3>
   1d2ec:	b00b883a 	mov	r5,r22
   1d2f0:	8809883a 	mov	r4,r17
   1d2f4:	102b883a 	mov	r21,r2
   1d2f8:	000d8180 	call	d818 <__udivsi3>
   1d2fc:	b80b883a 	mov	r5,r23
   1d300:	1009883a 	mov	r4,r2
   1d304:	000d8d40 	call	d8d4 <__mulsi3>
   1d308:	a82a943a 	slli	r21,r21,16
   1d30c:	a006d43a 	srli	r3,r20,16
   1d310:	1d46b03a 	or	r3,r3,r21
   1d314:	1880042e 	bgeu	r3,r2,1d328 <__umoddi3+0x240>
   1d318:	1cc7883a 	add	r3,r3,r19
   1d31c:	1cc00236 	bltu	r3,r19,1d328 <__umoddi3+0x240>
   1d320:	1880012e 	bgeu	r3,r2,1d328 <__umoddi3+0x240>
   1d324:	1cc7883a 	add	r3,r3,r19
   1d328:	18a1c83a 	sub	r16,r3,r2
   1d32c:	b00b883a 	mov	r5,r22
   1d330:	8009883a 	mov	r4,r16
   1d334:	000d87c0 	call	d87c <__umodsi3>
   1d338:	1023883a 	mov	r17,r2
   1d33c:	b00b883a 	mov	r5,r22
   1d340:	8009883a 	mov	r4,r16
   1d344:	000d8180 	call	d818 <__udivsi3>
   1d348:	8822943a 	slli	r17,r17,16
   1d34c:	b80b883a 	mov	r5,r23
   1d350:	1009883a 	mov	r4,r2
   1d354:	000d8d40 	call	d8d4 <__mulsi3>
   1d358:	a53fffcc 	andi	r20,r20,65535
   1d35c:	a446b03a 	or	r3,r20,r17
   1d360:	18bfac2e 	bgeu	r3,r2,1d214 <__alt_data_end+0xfc01d214>
   1d364:	003fa706 	br	1d204 <__alt_data_end+0xfc01d204>
   1d368:	2005883a 	mov	r2,r4
   1d36c:	2807883a 	mov	r3,r5
   1d370:	dfc00c17 	ldw	ra,48(sp)
   1d374:	df000b17 	ldw	fp,44(sp)
   1d378:	ddc00a17 	ldw	r23,40(sp)
   1d37c:	dd800917 	ldw	r22,36(sp)
   1d380:	dd400817 	ldw	r21,32(sp)
   1d384:	dd000717 	ldw	r20,28(sp)
   1d388:	dcc00617 	ldw	r19,24(sp)
   1d38c:	dc800517 	ldw	r18,20(sp)
   1d390:	dc400417 	ldw	r17,16(sp)
   1d394:	dc000317 	ldw	r16,12(sp)
   1d398:	dec00d04 	addi	sp,sp,52
   1d39c:	f800283a 	ret
   1d3a0:	04c03fc4 	movi	r19,255
   1d3a4:	99c9803a 	cmpltu	r4,r19,r7
   1d3a8:	200890fa 	slli	r4,r4,3
   1d3ac:	003fa406 	br	1d240 <__alt_data_end+0xfc01d240>
   1d3b0:	00803fc4 	movi	r2,255
   1d3b4:	14c5803a 	cmpltu	r2,r2,r19
   1d3b8:	100490fa 	slli	r2,r2,3
   1d3bc:	003fbc06 	br	1d2b0 <__alt_data_end+0xfc01d2b0>
   1d3c0:	00804034 	movhi	r2,256
   1d3c4:	10bfffc4 	addi	r2,r2,-1
   1d3c8:	1180a636 	bltu	r2,r6,1d664 <__umoddi3+0x57c>
   1d3cc:	01000404 	movi	r4,16
   1d3d0:	003f5c06 	br	1d144 <__alt_data_end+0xfc01d144>
   1d3d4:	3d0e983a 	sll	r7,r7,r20
   1d3d8:	34ead83a 	srl	r21,r6,r19
   1d3dc:	8cc6d83a 	srl	r3,r17,r19
   1d3e0:	8d10983a 	sll	r8,r17,r20
   1d3e4:	3d6ab03a 	or	r21,r7,r21
   1d3e8:	a82cd43a 	srli	r22,r21,16
   1d3ec:	84e2d83a 	srl	r17,r16,r19
   1d3f0:	1809883a 	mov	r4,r3
   1d3f4:	b00b883a 	mov	r5,r22
   1d3f8:	8a22b03a 	or	r17,r17,r8
   1d3fc:	3524983a 	sll	r18,r6,r20
   1d400:	dc400015 	stw	r17,0(sp)
   1d404:	d8c00115 	stw	r3,4(sp)
   1d408:	000d87c0 	call	d87c <__umodsi3>
   1d40c:	d8c00117 	ldw	r3,4(sp)
   1d410:	b00b883a 	mov	r5,r22
   1d414:	1039883a 	mov	fp,r2
   1d418:	1809883a 	mov	r4,r3
   1d41c:	000d8180 	call	d818 <__udivsi3>
   1d420:	adffffcc 	andi	r23,r21,65535
   1d424:	100b883a 	mov	r5,r2
   1d428:	b809883a 	mov	r4,r23
   1d42c:	1023883a 	mov	r17,r2
   1d430:	000d8d40 	call	d8d4 <__mulsi3>
   1d434:	d9400017 	ldw	r5,0(sp)
   1d438:	e008943a 	slli	r4,fp,16
   1d43c:	8520983a 	sll	r16,r16,r20
   1d440:	2806d43a 	srli	r3,r5,16
   1d444:	1906b03a 	or	r3,r3,r4
   1d448:	1880042e 	bgeu	r3,r2,1d45c <__umoddi3+0x374>
   1d44c:	1d47883a 	add	r3,r3,r21
   1d450:	893fffc4 	addi	r4,r17,-1
   1d454:	1d40892e 	bgeu	r3,r21,1d67c <__umoddi3+0x594>
   1d458:	2023883a 	mov	r17,r4
   1d45c:	18b9c83a 	sub	fp,r3,r2
   1d460:	b00b883a 	mov	r5,r22
   1d464:	e009883a 	mov	r4,fp
   1d468:	000d87c0 	call	d87c <__umodsi3>
   1d46c:	b00b883a 	mov	r5,r22
   1d470:	e009883a 	mov	r4,fp
   1d474:	d8800215 	stw	r2,8(sp)
   1d478:	000d8180 	call	d818 <__udivsi3>
   1d47c:	100b883a 	mov	r5,r2
   1d480:	b809883a 	mov	r4,r23
   1d484:	102d883a 	mov	r22,r2
   1d488:	000d8d40 	call	d8d4 <__mulsi3>
   1d48c:	d9800217 	ldw	r6,8(sp)
   1d490:	d8c00017 	ldw	r3,0(sp)
   1d494:	300c943a 	slli	r6,r6,16
   1d498:	1a3fffcc 	andi	r8,r3,65535
   1d49c:	4190b03a 	or	r8,r8,r6
   1d4a0:	4080042e 	bgeu	r8,r2,1d4b4 <__umoddi3+0x3cc>
   1d4a4:	4551883a 	add	r8,r8,r21
   1d4a8:	b0ffffc4 	addi	r3,r22,-1
   1d4ac:	45406f2e 	bgeu	r8,r21,1d66c <__umoddi3+0x584>
   1d4b0:	182d883a 	mov	r22,r3
   1d4b4:	880e943a 	slli	r7,r17,16
   1d4b8:	9006d43a 	srli	r3,r18,16
   1d4bc:	91bfffcc 	andi	r6,r18,65535
   1d4c0:	3dacb03a 	or	r22,r7,r22
   1d4c4:	b02ed43a 	srli	r23,r22,16
   1d4c8:	b5bfffcc 	andi	r22,r22,65535
   1d4cc:	300b883a 	mov	r5,r6
   1d4d0:	b009883a 	mov	r4,r22
   1d4d4:	40a3c83a 	sub	r17,r8,r2
   1d4d8:	d8c00115 	stw	r3,4(sp)
   1d4dc:	d9800215 	stw	r6,8(sp)
   1d4e0:	000d8d40 	call	d8d4 <__mulsi3>
   1d4e4:	d9800217 	ldw	r6,8(sp)
   1d4e8:	b809883a 	mov	r4,r23
   1d4ec:	1039883a 	mov	fp,r2
   1d4f0:	300b883a 	mov	r5,r6
   1d4f4:	000d8d40 	call	d8d4 <__mulsi3>
   1d4f8:	d8c00117 	ldw	r3,4(sp)
   1d4fc:	b809883a 	mov	r4,r23
   1d500:	d8800215 	stw	r2,8(sp)
   1d504:	180b883a 	mov	r5,r3
   1d508:	000d8d40 	call	d8d4 <__mulsi3>
   1d50c:	d8c00117 	ldw	r3,4(sp)
   1d510:	b009883a 	mov	r4,r22
   1d514:	102f883a 	mov	r23,r2
   1d518:	180b883a 	mov	r5,r3
   1d51c:	000d8d40 	call	d8d4 <__mulsi3>
   1d520:	d9800217 	ldw	r6,8(sp)
   1d524:	e006d43a 	srli	r3,fp,16
   1d528:	1185883a 	add	r2,r2,r6
   1d52c:	1885883a 	add	r2,r3,r2
   1d530:	1180022e 	bgeu	r2,r6,1d53c <__umoddi3+0x454>
   1d534:	00c00074 	movhi	r3,1
   1d538:	b8ef883a 	add	r23,r23,r3
   1d53c:	1006d43a 	srli	r3,r2,16
   1d540:	1004943a 	slli	r2,r2,16
   1d544:	e73fffcc 	andi	fp,fp,65535
   1d548:	1dc7883a 	add	r3,r3,r23
   1d54c:	1739883a 	add	fp,r2,fp
   1d550:	88c03a36 	bltu	r17,r3,1d63c <__umoddi3+0x554>
   1d554:	88c05126 	beq	r17,r3,1d69c <__umoddi3+0x5b4>
   1d558:	88c9c83a 	sub	r4,r17,r3
   1d55c:	e00f883a 	mov	r7,fp
   1d560:	81cfc83a 	sub	r7,r16,r7
   1d564:	81c7803a 	cmpltu	r3,r16,r7
   1d568:	20c7c83a 	sub	r3,r4,r3
   1d56c:	1cc4983a 	sll	r2,r3,r19
   1d570:	3d0ed83a 	srl	r7,r7,r20
   1d574:	1d06d83a 	srl	r3,r3,r20
   1d578:	11c4b03a 	or	r2,r2,r7
   1d57c:	003f7c06 	br	1d370 <__alt_data_end+0xfc01d370>
   1d580:	9ca6983a 	sll	r19,r19,r18
   1d584:	88f8d83a 	srl	fp,r17,r3
   1d588:	80c4d83a 	srl	r2,r16,r3
   1d58c:	982cd43a 	srli	r22,r19,16
   1d590:	8ca2983a 	sll	r17,r17,r18
   1d594:	e009883a 	mov	r4,fp
   1d598:	b00b883a 	mov	r5,r22
   1d59c:	146ab03a 	or	r21,r2,r17
   1d5a0:	000d87c0 	call	d87c <__umodsi3>
   1d5a4:	b00b883a 	mov	r5,r22
   1d5a8:	e009883a 	mov	r4,fp
   1d5ac:	1029883a 	mov	r20,r2
   1d5b0:	9dffffcc 	andi	r23,r19,65535
   1d5b4:	000d8180 	call	d818 <__udivsi3>
   1d5b8:	b809883a 	mov	r4,r23
   1d5bc:	100b883a 	mov	r5,r2
   1d5c0:	000d8d40 	call	d8d4 <__mulsi3>
   1d5c4:	a008943a 	slli	r4,r20,16
   1d5c8:	a806d43a 	srli	r3,r21,16
   1d5cc:	84a8983a 	sll	r20,r16,r18
   1d5d0:	1906b03a 	or	r3,r3,r4
   1d5d4:	1880042e 	bgeu	r3,r2,1d5e8 <__umoddi3+0x500>
   1d5d8:	1cc7883a 	add	r3,r3,r19
   1d5dc:	1cc00236 	bltu	r3,r19,1d5e8 <__umoddi3+0x500>
   1d5e0:	1880012e 	bgeu	r3,r2,1d5e8 <__umoddi3+0x500>
   1d5e4:	1cc7883a 	add	r3,r3,r19
   1d5e8:	18a3c83a 	sub	r17,r3,r2
   1d5ec:	b00b883a 	mov	r5,r22
   1d5f0:	8809883a 	mov	r4,r17
   1d5f4:	000d87c0 	call	d87c <__umodsi3>
   1d5f8:	b00b883a 	mov	r5,r22
   1d5fc:	8809883a 	mov	r4,r17
   1d600:	1021883a 	mov	r16,r2
   1d604:	000d8180 	call	d818 <__udivsi3>
   1d608:	100b883a 	mov	r5,r2
   1d60c:	b809883a 	mov	r4,r23
   1d610:	8020943a 	slli	r16,r16,16
   1d614:	000d8d40 	call	d8d4 <__mulsi3>
   1d618:	a8ffffcc 	andi	r3,r21,65535
   1d61c:	1c06b03a 	or	r3,r3,r16
   1d620:	1880042e 	bgeu	r3,r2,1d634 <__umoddi3+0x54c>
   1d624:	1cc7883a 	add	r3,r3,r19
   1d628:	1cc00236 	bltu	r3,r19,1d634 <__umoddi3+0x54c>
   1d62c:	1880012e 	bgeu	r3,r2,1d634 <__umoddi3+0x54c>
   1d630:	1cc7883a 	add	r3,r3,r19
   1d634:	18a3c83a 	sub	r17,r3,r2
   1d638:	003f2906 	br	1d2e0 <__alt_data_end+0xfc01d2e0>
   1d63c:	e48fc83a 	sub	r7,fp,r18
   1d640:	1d49c83a 	sub	r4,r3,r21
   1d644:	e1f9803a 	cmpltu	fp,fp,r7
   1d648:	2739c83a 	sub	fp,r4,fp
   1d64c:	8f09c83a 	sub	r4,r17,fp
   1d650:	003fc306 	br	1d560 <__alt_data_end+0xfc01d560>
   1d654:	01000604 	movi	r4,24
   1d658:	003ef906 	br	1d240 <__alt_data_end+0xfc01d240>
   1d65c:	00800604 	movi	r2,24
   1d660:	003f1306 	br	1d2b0 <__alt_data_end+0xfc01d2b0>
   1d664:	01000604 	movi	r4,24
   1d668:	003eb606 	br	1d144 <__alt_data_end+0xfc01d144>
   1d66c:	40bf902e 	bgeu	r8,r2,1d4b0 <__alt_data_end+0xfc01d4b0>
   1d670:	b5bfff84 	addi	r22,r22,-2
   1d674:	4551883a 	add	r8,r8,r21
   1d678:	003f8e06 	br	1d4b4 <__alt_data_end+0xfc01d4b4>
   1d67c:	18bf762e 	bgeu	r3,r2,1d458 <__alt_data_end+0xfc01d458>
   1d680:	8c7fff84 	addi	r17,r17,-2
   1d684:	1d47883a 	add	r3,r3,r21
   1d688:	003f7406 	br	1d45c <__alt_data_end+0xfc01d45c>
   1d68c:	1cc7883a 	add	r3,r3,r19
   1d690:	003ecd06 	br	1d1c8 <__alt_data_end+0xfc01d1c8>
   1d694:	8005883a 	mov	r2,r16
   1d698:	003ef806 	br	1d27c <__alt_data_end+0xfc01d27c>
   1d69c:	873fe736 	bltu	r16,fp,1d63c <__alt_data_end+0xfc01d63c>
   1d6a0:	e00f883a 	mov	r7,fp
   1d6a4:	0009883a 	mov	r4,zero
   1d6a8:	003fad06 	br	1d560 <__alt_data_end+0xfc01d560>

0001d6ac <__adddf3>:
   1d6ac:	02c00434 	movhi	r11,16
   1d6b0:	5affffc4 	addi	r11,r11,-1
   1d6b4:	2806d7fa 	srli	r3,r5,31
   1d6b8:	2ad4703a 	and	r10,r5,r11
   1d6bc:	3ad2703a 	and	r9,r7,r11
   1d6c0:	3804d53a 	srli	r2,r7,20
   1d6c4:	3018d77a 	srli	r12,r6,29
   1d6c8:	280ad53a 	srli	r5,r5,20
   1d6cc:	501490fa 	slli	r10,r10,3
   1d6d0:	2010d77a 	srli	r8,r4,29
   1d6d4:	481290fa 	slli	r9,r9,3
   1d6d8:	380ed7fa 	srli	r7,r7,31
   1d6dc:	defffb04 	addi	sp,sp,-20
   1d6e0:	dc800215 	stw	r18,8(sp)
   1d6e4:	dc400115 	stw	r17,4(sp)
   1d6e8:	dc000015 	stw	r16,0(sp)
   1d6ec:	dfc00415 	stw	ra,16(sp)
   1d6f0:	dcc00315 	stw	r19,12(sp)
   1d6f4:	1c803fcc 	andi	r18,r3,255
   1d6f8:	2c01ffcc 	andi	r16,r5,2047
   1d6fc:	5210b03a 	or	r8,r10,r8
   1d700:	202290fa 	slli	r17,r4,3
   1d704:	1081ffcc 	andi	r2,r2,2047
   1d708:	4b12b03a 	or	r9,r9,r12
   1d70c:	300c90fa 	slli	r6,r6,3
   1d710:	91c07526 	beq	r18,r7,1d8e8 <__adddf3+0x23c>
   1d714:	8087c83a 	sub	r3,r16,r2
   1d718:	00c0ab0e 	bge	zero,r3,1d9c8 <__adddf3+0x31c>
   1d71c:	10002a1e 	bne	r2,zero,1d7c8 <__adddf3+0x11c>
   1d720:	4984b03a 	or	r2,r9,r6
   1d724:	1000961e 	bne	r2,zero,1d980 <__adddf3+0x2d4>
   1d728:	888001cc 	andi	r2,r17,7
   1d72c:	10000726 	beq	r2,zero,1d74c <__adddf3+0xa0>
   1d730:	888003cc 	andi	r2,r17,15
   1d734:	00c00104 	movi	r3,4
   1d738:	10c00426 	beq	r2,r3,1d74c <__adddf3+0xa0>
   1d73c:	88c7883a 	add	r3,r17,r3
   1d740:	1c63803a 	cmpltu	r17,r3,r17
   1d744:	4451883a 	add	r8,r8,r17
   1d748:	1823883a 	mov	r17,r3
   1d74c:	4080202c 	andhi	r2,r8,128
   1d750:	10005926 	beq	r2,zero,1d8b8 <__adddf3+0x20c>
   1d754:	84000044 	addi	r16,r16,1
   1d758:	0081ffc4 	movi	r2,2047
   1d75c:	8080ba26 	beq	r16,r2,1da48 <__adddf3+0x39c>
   1d760:	00bfe034 	movhi	r2,65408
   1d764:	10bfffc4 	addi	r2,r2,-1
   1d768:	4090703a 	and	r8,r8,r2
   1d76c:	4004977a 	slli	r2,r8,29
   1d770:	4010927a 	slli	r8,r8,9
   1d774:	8822d0fa 	srli	r17,r17,3
   1d778:	8401ffcc 	andi	r16,r16,2047
   1d77c:	4010d33a 	srli	r8,r8,12
   1d780:	9007883a 	mov	r3,r18
   1d784:	1444b03a 	or	r2,r2,r17
   1d788:	8401ffcc 	andi	r16,r16,2047
   1d78c:	8020953a 	slli	r16,r16,20
   1d790:	18c03fcc 	andi	r3,r3,255
   1d794:	01000434 	movhi	r4,16
   1d798:	213fffc4 	addi	r4,r4,-1
   1d79c:	180697fa 	slli	r3,r3,31
   1d7a0:	4110703a 	and	r8,r8,r4
   1d7a4:	4410b03a 	or	r8,r8,r16
   1d7a8:	40c6b03a 	or	r3,r8,r3
   1d7ac:	dfc00417 	ldw	ra,16(sp)
   1d7b0:	dcc00317 	ldw	r19,12(sp)
   1d7b4:	dc800217 	ldw	r18,8(sp)
   1d7b8:	dc400117 	ldw	r17,4(sp)
   1d7bc:	dc000017 	ldw	r16,0(sp)
   1d7c0:	dec00504 	addi	sp,sp,20
   1d7c4:	f800283a 	ret
   1d7c8:	0081ffc4 	movi	r2,2047
   1d7cc:	80bfd626 	beq	r16,r2,1d728 <__alt_data_end+0xfc01d728>
   1d7d0:	4a402034 	orhi	r9,r9,128
   1d7d4:	00800e04 	movi	r2,56
   1d7d8:	10c09f16 	blt	r2,r3,1da58 <__adddf3+0x3ac>
   1d7dc:	008007c4 	movi	r2,31
   1d7e0:	10c0c216 	blt	r2,r3,1daec <__adddf3+0x440>
   1d7e4:	00800804 	movi	r2,32
   1d7e8:	10c5c83a 	sub	r2,r2,r3
   1d7ec:	488a983a 	sll	r5,r9,r2
   1d7f0:	30c8d83a 	srl	r4,r6,r3
   1d7f4:	3084983a 	sll	r2,r6,r2
   1d7f8:	48c6d83a 	srl	r3,r9,r3
   1d7fc:	290cb03a 	or	r6,r5,r4
   1d800:	1004c03a 	cmpne	r2,r2,zero
   1d804:	308cb03a 	or	r6,r6,r2
   1d808:	898dc83a 	sub	r6,r17,r6
   1d80c:	89a3803a 	cmpltu	r17,r17,r6
   1d810:	40d1c83a 	sub	r8,r8,r3
   1d814:	4451c83a 	sub	r8,r8,r17
   1d818:	3023883a 	mov	r17,r6
   1d81c:	4080202c 	andhi	r2,r8,128
   1d820:	10002326 	beq	r2,zero,1d8b0 <__adddf3+0x204>
   1d824:	04c02034 	movhi	r19,128
   1d828:	9cffffc4 	addi	r19,r19,-1
   1d82c:	44e6703a 	and	r19,r8,r19
   1d830:	98007626 	beq	r19,zero,1da0c <__adddf3+0x360>
   1d834:	9809883a 	mov	r4,r19
   1d838:	000f3780 	call	f378 <__clzsi2>
   1d83c:	10fffe04 	addi	r3,r2,-8
   1d840:	010007c4 	movi	r4,31
   1d844:	20c07716 	blt	r4,r3,1da24 <__adddf3+0x378>
   1d848:	00800804 	movi	r2,32
   1d84c:	10c5c83a 	sub	r2,r2,r3
   1d850:	8884d83a 	srl	r2,r17,r2
   1d854:	98d0983a 	sll	r8,r19,r3
   1d858:	88e2983a 	sll	r17,r17,r3
   1d85c:	1204b03a 	or	r2,r2,r8
   1d860:	1c007416 	blt	r3,r16,1da34 <__adddf3+0x388>
   1d864:	1c21c83a 	sub	r16,r3,r16
   1d868:	82000044 	addi	r8,r16,1
   1d86c:	00c007c4 	movi	r3,31
   1d870:	1a009116 	blt	r3,r8,1dab8 <__adddf3+0x40c>
   1d874:	00c00804 	movi	r3,32
   1d878:	1a07c83a 	sub	r3,r3,r8
   1d87c:	8a08d83a 	srl	r4,r17,r8
   1d880:	88e2983a 	sll	r17,r17,r3
   1d884:	10c6983a 	sll	r3,r2,r3
   1d888:	1210d83a 	srl	r8,r2,r8
   1d88c:	8804c03a 	cmpne	r2,r17,zero
   1d890:	1906b03a 	or	r3,r3,r4
   1d894:	18a2b03a 	or	r17,r3,r2
   1d898:	0021883a 	mov	r16,zero
   1d89c:	003fa206 	br	1d728 <__alt_data_end+0xfc01d728>
   1d8a0:	1890b03a 	or	r8,r3,r2
   1d8a4:	40017d26 	beq	r8,zero,1de9c <__adddf3+0x7f0>
   1d8a8:	1011883a 	mov	r8,r2
   1d8ac:	1823883a 	mov	r17,r3
   1d8b0:	888001cc 	andi	r2,r17,7
   1d8b4:	103f9e1e 	bne	r2,zero,1d730 <__alt_data_end+0xfc01d730>
   1d8b8:	4004977a 	slli	r2,r8,29
   1d8bc:	8822d0fa 	srli	r17,r17,3
   1d8c0:	4010d0fa 	srli	r8,r8,3
   1d8c4:	9007883a 	mov	r3,r18
   1d8c8:	1444b03a 	or	r2,r2,r17
   1d8cc:	0101ffc4 	movi	r4,2047
   1d8d0:	81002426 	beq	r16,r4,1d964 <__adddf3+0x2b8>
   1d8d4:	8120703a 	and	r16,r16,r4
   1d8d8:	01000434 	movhi	r4,16
   1d8dc:	213fffc4 	addi	r4,r4,-1
   1d8e0:	4110703a 	and	r8,r8,r4
   1d8e4:	003fa806 	br	1d788 <__alt_data_end+0xfc01d788>
   1d8e8:	8089c83a 	sub	r4,r16,r2
   1d8ec:	01005e0e 	bge	zero,r4,1da68 <__adddf3+0x3bc>
   1d8f0:	10002b26 	beq	r2,zero,1d9a0 <__adddf3+0x2f4>
   1d8f4:	0081ffc4 	movi	r2,2047
   1d8f8:	80bf8b26 	beq	r16,r2,1d728 <__alt_data_end+0xfc01d728>
   1d8fc:	4a402034 	orhi	r9,r9,128
   1d900:	00800e04 	movi	r2,56
   1d904:	1100a40e 	bge	r2,r4,1db98 <__adddf3+0x4ec>
   1d908:	498cb03a 	or	r6,r9,r6
   1d90c:	300ac03a 	cmpne	r5,r6,zero
   1d910:	0013883a 	mov	r9,zero
   1d914:	2c4b883a 	add	r5,r5,r17
   1d918:	2c63803a 	cmpltu	r17,r5,r17
   1d91c:	4a11883a 	add	r8,r9,r8
   1d920:	8a11883a 	add	r8,r17,r8
   1d924:	2823883a 	mov	r17,r5
   1d928:	4080202c 	andhi	r2,r8,128
   1d92c:	103fe026 	beq	r2,zero,1d8b0 <__alt_data_end+0xfc01d8b0>
   1d930:	84000044 	addi	r16,r16,1
   1d934:	0081ffc4 	movi	r2,2047
   1d938:	8080d226 	beq	r16,r2,1dc84 <__adddf3+0x5d8>
   1d93c:	00bfe034 	movhi	r2,65408
   1d940:	10bfffc4 	addi	r2,r2,-1
   1d944:	4090703a 	and	r8,r8,r2
   1d948:	880ad07a 	srli	r5,r17,1
   1d94c:	400897fa 	slli	r4,r8,31
   1d950:	88c0004c 	andi	r3,r17,1
   1d954:	28e2b03a 	or	r17,r5,r3
   1d958:	4010d07a 	srli	r8,r8,1
   1d95c:	2462b03a 	or	r17,r4,r17
   1d960:	003f7106 	br	1d728 <__alt_data_end+0xfc01d728>
   1d964:	4088b03a 	or	r4,r8,r2
   1d968:	20014526 	beq	r4,zero,1de80 <__adddf3+0x7d4>
   1d96c:	01000434 	movhi	r4,16
   1d970:	42000234 	orhi	r8,r8,8
   1d974:	213fffc4 	addi	r4,r4,-1
   1d978:	4110703a 	and	r8,r8,r4
   1d97c:	003f8206 	br	1d788 <__alt_data_end+0xfc01d788>
   1d980:	18ffffc4 	addi	r3,r3,-1
   1d984:	1800491e 	bne	r3,zero,1daac <__adddf3+0x400>
   1d988:	898bc83a 	sub	r5,r17,r6
   1d98c:	8963803a 	cmpltu	r17,r17,r5
   1d990:	4251c83a 	sub	r8,r8,r9
   1d994:	4451c83a 	sub	r8,r8,r17
   1d998:	2823883a 	mov	r17,r5
   1d99c:	003f9f06 	br	1d81c <__alt_data_end+0xfc01d81c>
   1d9a0:	4984b03a 	or	r2,r9,r6
   1d9a4:	103f6026 	beq	r2,zero,1d728 <__alt_data_end+0xfc01d728>
   1d9a8:	213fffc4 	addi	r4,r4,-1
   1d9ac:	2000931e 	bne	r4,zero,1dbfc <__adddf3+0x550>
   1d9b0:	898d883a 	add	r6,r17,r6
   1d9b4:	3463803a 	cmpltu	r17,r6,r17
   1d9b8:	4251883a 	add	r8,r8,r9
   1d9bc:	8a11883a 	add	r8,r17,r8
   1d9c0:	3023883a 	mov	r17,r6
   1d9c4:	003fd806 	br	1d928 <__alt_data_end+0xfc01d928>
   1d9c8:	1800541e 	bne	r3,zero,1db1c <__adddf3+0x470>
   1d9cc:	80800044 	addi	r2,r16,1
   1d9d0:	1081ffcc 	andi	r2,r2,2047
   1d9d4:	00c00044 	movi	r3,1
   1d9d8:	1880a00e 	bge	r3,r2,1dc5c <__adddf3+0x5b0>
   1d9dc:	8989c83a 	sub	r4,r17,r6
   1d9e0:	8905803a 	cmpltu	r2,r17,r4
   1d9e4:	4267c83a 	sub	r19,r8,r9
   1d9e8:	98a7c83a 	sub	r19,r19,r2
   1d9ec:	9880202c 	andhi	r2,r19,128
   1d9f0:	10006326 	beq	r2,zero,1db80 <__adddf3+0x4d4>
   1d9f4:	3463c83a 	sub	r17,r6,r17
   1d9f8:	4a07c83a 	sub	r3,r9,r8
   1d9fc:	344d803a 	cmpltu	r6,r6,r17
   1da00:	19a7c83a 	sub	r19,r3,r6
   1da04:	3825883a 	mov	r18,r7
   1da08:	983f8a1e 	bne	r19,zero,1d834 <__alt_data_end+0xfc01d834>
   1da0c:	8809883a 	mov	r4,r17
   1da10:	000f3780 	call	f378 <__clzsi2>
   1da14:	10800804 	addi	r2,r2,32
   1da18:	10fffe04 	addi	r3,r2,-8
   1da1c:	010007c4 	movi	r4,31
   1da20:	20ff890e 	bge	r4,r3,1d848 <__alt_data_end+0xfc01d848>
   1da24:	10bff604 	addi	r2,r2,-40
   1da28:	8884983a 	sll	r2,r17,r2
   1da2c:	0023883a 	mov	r17,zero
   1da30:	1c3f8c0e 	bge	r3,r16,1d864 <__alt_data_end+0xfc01d864>
   1da34:	023fe034 	movhi	r8,65408
   1da38:	423fffc4 	addi	r8,r8,-1
   1da3c:	80e1c83a 	sub	r16,r16,r3
   1da40:	1210703a 	and	r8,r2,r8
   1da44:	003f3806 	br	1d728 <__alt_data_end+0xfc01d728>
   1da48:	9007883a 	mov	r3,r18
   1da4c:	0011883a 	mov	r8,zero
   1da50:	0005883a 	mov	r2,zero
   1da54:	003f4c06 	br	1d788 <__alt_data_end+0xfc01d788>
   1da58:	498cb03a 	or	r6,r9,r6
   1da5c:	300cc03a 	cmpne	r6,r6,zero
   1da60:	0007883a 	mov	r3,zero
   1da64:	003f6806 	br	1d808 <__alt_data_end+0xfc01d808>
   1da68:	20009c1e 	bne	r4,zero,1dcdc <__adddf3+0x630>
   1da6c:	80800044 	addi	r2,r16,1
   1da70:	1141ffcc 	andi	r5,r2,2047
   1da74:	01000044 	movi	r4,1
   1da78:	2140670e 	bge	r4,r5,1dc18 <__adddf3+0x56c>
   1da7c:	0101ffc4 	movi	r4,2047
   1da80:	11007f26 	beq	r2,r4,1dc80 <__adddf3+0x5d4>
   1da84:	898d883a 	add	r6,r17,r6
   1da88:	4247883a 	add	r3,r8,r9
   1da8c:	3451803a 	cmpltu	r8,r6,r17
   1da90:	40d1883a 	add	r8,r8,r3
   1da94:	402297fa 	slli	r17,r8,31
   1da98:	300cd07a 	srli	r6,r6,1
   1da9c:	4010d07a 	srli	r8,r8,1
   1daa0:	1021883a 	mov	r16,r2
   1daa4:	89a2b03a 	or	r17,r17,r6
   1daa8:	003f1f06 	br	1d728 <__alt_data_end+0xfc01d728>
   1daac:	0081ffc4 	movi	r2,2047
   1dab0:	80bf481e 	bne	r16,r2,1d7d4 <__alt_data_end+0xfc01d7d4>
   1dab4:	003f1c06 	br	1d728 <__alt_data_end+0xfc01d728>
   1dab8:	843ff844 	addi	r16,r16,-31
   1dabc:	01000804 	movi	r4,32
   1dac0:	1406d83a 	srl	r3,r2,r16
   1dac4:	41005026 	beq	r8,r4,1dc08 <__adddf3+0x55c>
   1dac8:	01001004 	movi	r4,64
   1dacc:	2211c83a 	sub	r8,r4,r8
   1dad0:	1204983a 	sll	r2,r2,r8
   1dad4:	88a2b03a 	or	r17,r17,r2
   1dad8:	8822c03a 	cmpne	r17,r17,zero
   1dadc:	1c62b03a 	or	r17,r3,r17
   1dae0:	0011883a 	mov	r8,zero
   1dae4:	0021883a 	mov	r16,zero
   1dae8:	003f7106 	br	1d8b0 <__alt_data_end+0xfc01d8b0>
   1daec:	193ff804 	addi	r4,r3,-32
   1daf0:	00800804 	movi	r2,32
   1daf4:	4908d83a 	srl	r4,r9,r4
   1daf8:	18804526 	beq	r3,r2,1dc10 <__adddf3+0x564>
   1dafc:	00801004 	movi	r2,64
   1db00:	10c5c83a 	sub	r2,r2,r3
   1db04:	4886983a 	sll	r3,r9,r2
   1db08:	198cb03a 	or	r6,r3,r6
   1db0c:	300cc03a 	cmpne	r6,r6,zero
   1db10:	218cb03a 	or	r6,r4,r6
   1db14:	0007883a 	mov	r3,zero
   1db18:	003f3b06 	br	1d808 <__alt_data_end+0xfc01d808>
   1db1c:	80002a26 	beq	r16,zero,1dbc8 <__adddf3+0x51c>
   1db20:	0101ffc4 	movi	r4,2047
   1db24:	11006826 	beq	r2,r4,1dcc8 <__adddf3+0x61c>
   1db28:	00c7c83a 	sub	r3,zero,r3
   1db2c:	42002034 	orhi	r8,r8,128
   1db30:	01000e04 	movi	r4,56
   1db34:	20c07c16 	blt	r4,r3,1dd28 <__adddf3+0x67c>
   1db38:	010007c4 	movi	r4,31
   1db3c:	20c0da16 	blt	r4,r3,1dea8 <__adddf3+0x7fc>
   1db40:	01000804 	movi	r4,32
   1db44:	20c9c83a 	sub	r4,r4,r3
   1db48:	4114983a 	sll	r10,r8,r4
   1db4c:	88cad83a 	srl	r5,r17,r3
   1db50:	8908983a 	sll	r4,r17,r4
   1db54:	40c6d83a 	srl	r3,r8,r3
   1db58:	5162b03a 	or	r17,r10,r5
   1db5c:	2008c03a 	cmpne	r4,r4,zero
   1db60:	8922b03a 	or	r17,r17,r4
   1db64:	3463c83a 	sub	r17,r6,r17
   1db68:	48c7c83a 	sub	r3,r9,r3
   1db6c:	344d803a 	cmpltu	r6,r6,r17
   1db70:	1991c83a 	sub	r8,r3,r6
   1db74:	1021883a 	mov	r16,r2
   1db78:	3825883a 	mov	r18,r7
   1db7c:	003f2706 	br	1d81c <__alt_data_end+0xfc01d81c>
   1db80:	24d0b03a 	or	r8,r4,r19
   1db84:	40001b1e 	bne	r8,zero,1dbf4 <__adddf3+0x548>
   1db88:	0005883a 	mov	r2,zero
   1db8c:	0007883a 	mov	r3,zero
   1db90:	0021883a 	mov	r16,zero
   1db94:	003f4d06 	br	1d8cc <__alt_data_end+0xfc01d8cc>
   1db98:	008007c4 	movi	r2,31
   1db9c:	11003c16 	blt	r2,r4,1dc90 <__adddf3+0x5e4>
   1dba0:	00800804 	movi	r2,32
   1dba4:	1105c83a 	sub	r2,r2,r4
   1dba8:	488e983a 	sll	r7,r9,r2
   1dbac:	310ad83a 	srl	r5,r6,r4
   1dbb0:	3084983a 	sll	r2,r6,r2
   1dbb4:	4912d83a 	srl	r9,r9,r4
   1dbb8:	394ab03a 	or	r5,r7,r5
   1dbbc:	1004c03a 	cmpne	r2,r2,zero
   1dbc0:	288ab03a 	or	r5,r5,r2
   1dbc4:	003f5306 	br	1d914 <__alt_data_end+0xfc01d914>
   1dbc8:	4448b03a 	or	r4,r8,r17
   1dbcc:	20003e26 	beq	r4,zero,1dcc8 <__adddf3+0x61c>
   1dbd0:	00c6303a 	nor	r3,zero,r3
   1dbd4:	18003a1e 	bne	r3,zero,1dcc0 <__adddf3+0x614>
   1dbd8:	3463c83a 	sub	r17,r6,r17
   1dbdc:	4a07c83a 	sub	r3,r9,r8
   1dbe0:	344d803a 	cmpltu	r6,r6,r17
   1dbe4:	1991c83a 	sub	r8,r3,r6
   1dbe8:	1021883a 	mov	r16,r2
   1dbec:	3825883a 	mov	r18,r7
   1dbf0:	003f0a06 	br	1d81c <__alt_data_end+0xfc01d81c>
   1dbf4:	2023883a 	mov	r17,r4
   1dbf8:	003f0d06 	br	1d830 <__alt_data_end+0xfc01d830>
   1dbfc:	0081ffc4 	movi	r2,2047
   1dc00:	80bf3f1e 	bne	r16,r2,1d900 <__alt_data_end+0xfc01d900>
   1dc04:	003ec806 	br	1d728 <__alt_data_end+0xfc01d728>
   1dc08:	0005883a 	mov	r2,zero
   1dc0c:	003fb106 	br	1dad4 <__alt_data_end+0xfc01dad4>
   1dc10:	0007883a 	mov	r3,zero
   1dc14:	003fbc06 	br	1db08 <__alt_data_end+0xfc01db08>
   1dc18:	4444b03a 	or	r2,r8,r17
   1dc1c:	8000871e 	bne	r16,zero,1de3c <__adddf3+0x790>
   1dc20:	1000ba26 	beq	r2,zero,1df0c <__adddf3+0x860>
   1dc24:	4984b03a 	or	r2,r9,r6
   1dc28:	103ebf26 	beq	r2,zero,1d728 <__alt_data_end+0xfc01d728>
   1dc2c:	8985883a 	add	r2,r17,r6
   1dc30:	4247883a 	add	r3,r8,r9
   1dc34:	1451803a 	cmpltu	r8,r2,r17
   1dc38:	40d1883a 	add	r8,r8,r3
   1dc3c:	40c0202c 	andhi	r3,r8,128
   1dc40:	1023883a 	mov	r17,r2
   1dc44:	183f1a26 	beq	r3,zero,1d8b0 <__alt_data_end+0xfc01d8b0>
   1dc48:	00bfe034 	movhi	r2,65408
   1dc4c:	10bfffc4 	addi	r2,r2,-1
   1dc50:	2021883a 	mov	r16,r4
   1dc54:	4090703a 	and	r8,r8,r2
   1dc58:	003eb306 	br	1d728 <__alt_data_end+0xfc01d728>
   1dc5c:	4444b03a 	or	r2,r8,r17
   1dc60:	8000291e 	bne	r16,zero,1dd08 <__adddf3+0x65c>
   1dc64:	10004b1e 	bne	r2,zero,1dd94 <__adddf3+0x6e8>
   1dc68:	4990b03a 	or	r8,r9,r6
   1dc6c:	40008b26 	beq	r8,zero,1de9c <__adddf3+0x7f0>
   1dc70:	4811883a 	mov	r8,r9
   1dc74:	3023883a 	mov	r17,r6
   1dc78:	3825883a 	mov	r18,r7
   1dc7c:	003eaa06 	br	1d728 <__alt_data_end+0xfc01d728>
   1dc80:	1021883a 	mov	r16,r2
   1dc84:	0011883a 	mov	r8,zero
   1dc88:	0005883a 	mov	r2,zero
   1dc8c:	003f0f06 	br	1d8cc <__alt_data_end+0xfc01d8cc>
   1dc90:	217ff804 	addi	r5,r4,-32
   1dc94:	00800804 	movi	r2,32
   1dc98:	494ad83a 	srl	r5,r9,r5
   1dc9c:	20807d26 	beq	r4,r2,1de94 <__adddf3+0x7e8>
   1dca0:	00801004 	movi	r2,64
   1dca4:	1109c83a 	sub	r4,r2,r4
   1dca8:	4912983a 	sll	r9,r9,r4
   1dcac:	498cb03a 	or	r6,r9,r6
   1dcb0:	300cc03a 	cmpne	r6,r6,zero
   1dcb4:	298ab03a 	or	r5,r5,r6
   1dcb8:	0013883a 	mov	r9,zero
   1dcbc:	003f1506 	br	1d914 <__alt_data_end+0xfc01d914>
   1dcc0:	0101ffc4 	movi	r4,2047
   1dcc4:	113f9a1e 	bne	r2,r4,1db30 <__alt_data_end+0xfc01db30>
   1dcc8:	4811883a 	mov	r8,r9
   1dccc:	3023883a 	mov	r17,r6
   1dcd0:	1021883a 	mov	r16,r2
   1dcd4:	3825883a 	mov	r18,r7
   1dcd8:	003e9306 	br	1d728 <__alt_data_end+0xfc01d728>
   1dcdc:	8000161e 	bne	r16,zero,1dd38 <__adddf3+0x68c>
   1dce0:	444ab03a 	or	r5,r8,r17
   1dce4:	28005126 	beq	r5,zero,1de2c <__adddf3+0x780>
   1dce8:	0108303a 	nor	r4,zero,r4
   1dcec:	20004d1e 	bne	r4,zero,1de24 <__adddf3+0x778>
   1dcf0:	89a3883a 	add	r17,r17,r6
   1dcf4:	4253883a 	add	r9,r8,r9
   1dcf8:	898d803a 	cmpltu	r6,r17,r6
   1dcfc:	3251883a 	add	r8,r6,r9
   1dd00:	1021883a 	mov	r16,r2
   1dd04:	003f0806 	br	1d928 <__alt_data_end+0xfc01d928>
   1dd08:	1000301e 	bne	r2,zero,1ddcc <__adddf3+0x720>
   1dd0c:	4984b03a 	or	r2,r9,r6
   1dd10:	10007126 	beq	r2,zero,1ded8 <__adddf3+0x82c>
   1dd14:	4811883a 	mov	r8,r9
   1dd18:	3023883a 	mov	r17,r6
   1dd1c:	3825883a 	mov	r18,r7
   1dd20:	0401ffc4 	movi	r16,2047
   1dd24:	003e8006 	br	1d728 <__alt_data_end+0xfc01d728>
   1dd28:	4462b03a 	or	r17,r8,r17
   1dd2c:	8822c03a 	cmpne	r17,r17,zero
   1dd30:	0007883a 	mov	r3,zero
   1dd34:	003f8b06 	br	1db64 <__alt_data_end+0xfc01db64>
   1dd38:	0141ffc4 	movi	r5,2047
   1dd3c:	11403b26 	beq	r2,r5,1de2c <__adddf3+0x780>
   1dd40:	0109c83a 	sub	r4,zero,r4
   1dd44:	42002034 	orhi	r8,r8,128
   1dd48:	01400e04 	movi	r5,56
   1dd4c:	29006716 	blt	r5,r4,1deec <__adddf3+0x840>
   1dd50:	014007c4 	movi	r5,31
   1dd54:	29007016 	blt	r5,r4,1df18 <__adddf3+0x86c>
   1dd58:	01400804 	movi	r5,32
   1dd5c:	290bc83a 	sub	r5,r5,r4
   1dd60:	4154983a 	sll	r10,r8,r5
   1dd64:	890ed83a 	srl	r7,r17,r4
   1dd68:	894a983a 	sll	r5,r17,r5
   1dd6c:	4108d83a 	srl	r4,r8,r4
   1dd70:	51e2b03a 	or	r17,r10,r7
   1dd74:	280ac03a 	cmpne	r5,r5,zero
   1dd78:	8962b03a 	or	r17,r17,r5
   1dd7c:	89a3883a 	add	r17,r17,r6
   1dd80:	2253883a 	add	r9,r4,r9
   1dd84:	898d803a 	cmpltu	r6,r17,r6
   1dd88:	3251883a 	add	r8,r6,r9
   1dd8c:	1021883a 	mov	r16,r2
   1dd90:	003ee506 	br	1d928 <__alt_data_end+0xfc01d928>
   1dd94:	4984b03a 	or	r2,r9,r6
   1dd98:	103e6326 	beq	r2,zero,1d728 <__alt_data_end+0xfc01d728>
   1dd9c:	8987c83a 	sub	r3,r17,r6
   1dda0:	88c9803a 	cmpltu	r4,r17,r3
   1dda4:	4245c83a 	sub	r2,r8,r9
   1dda8:	1105c83a 	sub	r2,r2,r4
   1ddac:	1100202c 	andhi	r4,r2,128
   1ddb0:	203ebb26 	beq	r4,zero,1d8a0 <__alt_data_end+0xfc01d8a0>
   1ddb4:	3463c83a 	sub	r17,r6,r17
   1ddb8:	4a07c83a 	sub	r3,r9,r8
   1ddbc:	344d803a 	cmpltu	r6,r6,r17
   1ddc0:	1991c83a 	sub	r8,r3,r6
   1ddc4:	3825883a 	mov	r18,r7
   1ddc8:	003e5706 	br	1d728 <__alt_data_end+0xfc01d728>
   1ddcc:	4984b03a 	or	r2,r9,r6
   1ddd0:	10002e26 	beq	r2,zero,1de8c <__adddf3+0x7e0>
   1ddd4:	4004d0fa 	srli	r2,r8,3
   1ddd8:	8822d0fa 	srli	r17,r17,3
   1dddc:	4010977a 	slli	r8,r8,29
   1dde0:	10c0022c 	andhi	r3,r2,8
   1dde4:	4462b03a 	or	r17,r8,r17
   1dde8:	18000826 	beq	r3,zero,1de0c <__adddf3+0x760>
   1ddec:	4808d0fa 	srli	r4,r9,3
   1ddf0:	20c0022c 	andhi	r3,r4,8
   1ddf4:	1800051e 	bne	r3,zero,1de0c <__adddf3+0x760>
   1ddf8:	300cd0fa 	srli	r6,r6,3
   1ddfc:	4806977a 	slli	r3,r9,29
   1de00:	2005883a 	mov	r2,r4
   1de04:	3825883a 	mov	r18,r7
   1de08:	19a2b03a 	or	r17,r3,r6
   1de0c:	8810d77a 	srli	r8,r17,29
   1de10:	100490fa 	slli	r2,r2,3
   1de14:	882290fa 	slli	r17,r17,3
   1de18:	0401ffc4 	movi	r16,2047
   1de1c:	4090b03a 	or	r8,r8,r2
   1de20:	003e4106 	br	1d728 <__alt_data_end+0xfc01d728>
   1de24:	0141ffc4 	movi	r5,2047
   1de28:	117fc71e 	bne	r2,r5,1dd48 <__alt_data_end+0xfc01dd48>
   1de2c:	4811883a 	mov	r8,r9
   1de30:	3023883a 	mov	r17,r6
   1de34:	1021883a 	mov	r16,r2
   1de38:	003e3b06 	br	1d728 <__alt_data_end+0xfc01d728>
   1de3c:	10002f26 	beq	r2,zero,1defc <__adddf3+0x850>
   1de40:	4984b03a 	or	r2,r9,r6
   1de44:	10001126 	beq	r2,zero,1de8c <__adddf3+0x7e0>
   1de48:	4004d0fa 	srli	r2,r8,3
   1de4c:	8822d0fa 	srli	r17,r17,3
   1de50:	4010977a 	slli	r8,r8,29
   1de54:	10c0022c 	andhi	r3,r2,8
   1de58:	4462b03a 	or	r17,r8,r17
   1de5c:	183feb26 	beq	r3,zero,1de0c <__alt_data_end+0xfc01de0c>
   1de60:	4808d0fa 	srli	r4,r9,3
   1de64:	20c0022c 	andhi	r3,r4,8
   1de68:	183fe81e 	bne	r3,zero,1de0c <__alt_data_end+0xfc01de0c>
   1de6c:	300cd0fa 	srli	r6,r6,3
   1de70:	4806977a 	slli	r3,r9,29
   1de74:	2005883a 	mov	r2,r4
   1de78:	19a2b03a 	or	r17,r3,r6
   1de7c:	003fe306 	br	1de0c <__alt_data_end+0xfc01de0c>
   1de80:	0011883a 	mov	r8,zero
   1de84:	0005883a 	mov	r2,zero
   1de88:	003e3f06 	br	1d788 <__alt_data_end+0xfc01d788>
   1de8c:	0401ffc4 	movi	r16,2047
   1de90:	003e2506 	br	1d728 <__alt_data_end+0xfc01d728>
   1de94:	0013883a 	mov	r9,zero
   1de98:	003f8406 	br	1dcac <__alt_data_end+0xfc01dcac>
   1de9c:	0005883a 	mov	r2,zero
   1dea0:	0007883a 	mov	r3,zero
   1dea4:	003e8906 	br	1d8cc <__alt_data_end+0xfc01d8cc>
   1dea8:	197ff804 	addi	r5,r3,-32
   1deac:	01000804 	movi	r4,32
   1deb0:	414ad83a 	srl	r5,r8,r5
   1deb4:	19002426 	beq	r3,r4,1df48 <__adddf3+0x89c>
   1deb8:	01001004 	movi	r4,64
   1debc:	20c7c83a 	sub	r3,r4,r3
   1dec0:	40c6983a 	sll	r3,r8,r3
   1dec4:	1c46b03a 	or	r3,r3,r17
   1dec8:	1806c03a 	cmpne	r3,r3,zero
   1decc:	28e2b03a 	or	r17,r5,r3
   1ded0:	0007883a 	mov	r3,zero
   1ded4:	003f2306 	br	1db64 <__alt_data_end+0xfc01db64>
   1ded8:	0007883a 	mov	r3,zero
   1dedc:	5811883a 	mov	r8,r11
   1dee0:	00bfffc4 	movi	r2,-1
   1dee4:	0401ffc4 	movi	r16,2047
   1dee8:	003e7806 	br	1d8cc <__alt_data_end+0xfc01d8cc>
   1deec:	4462b03a 	or	r17,r8,r17
   1def0:	8822c03a 	cmpne	r17,r17,zero
   1def4:	0009883a 	mov	r4,zero
   1def8:	003fa006 	br	1dd7c <__alt_data_end+0xfc01dd7c>
   1defc:	4811883a 	mov	r8,r9
   1df00:	3023883a 	mov	r17,r6
   1df04:	0401ffc4 	movi	r16,2047
   1df08:	003e0706 	br	1d728 <__alt_data_end+0xfc01d728>
   1df0c:	4811883a 	mov	r8,r9
   1df10:	3023883a 	mov	r17,r6
   1df14:	003e0406 	br	1d728 <__alt_data_end+0xfc01d728>
   1df18:	21fff804 	addi	r7,r4,-32
   1df1c:	01400804 	movi	r5,32
   1df20:	41ced83a 	srl	r7,r8,r7
   1df24:	21400a26 	beq	r4,r5,1df50 <__adddf3+0x8a4>
   1df28:	01401004 	movi	r5,64
   1df2c:	2909c83a 	sub	r4,r5,r4
   1df30:	4108983a 	sll	r4,r8,r4
   1df34:	2448b03a 	or	r4,r4,r17
   1df38:	2008c03a 	cmpne	r4,r4,zero
   1df3c:	3922b03a 	or	r17,r7,r4
   1df40:	0009883a 	mov	r4,zero
   1df44:	003f8d06 	br	1dd7c <__alt_data_end+0xfc01dd7c>
   1df48:	0007883a 	mov	r3,zero
   1df4c:	003fdd06 	br	1dec4 <__alt_data_end+0xfc01dec4>
   1df50:	0009883a 	mov	r4,zero
   1df54:	003ff706 	br	1df34 <__alt_data_end+0xfc01df34>

0001df58 <__divdf3>:
   1df58:	defff004 	addi	sp,sp,-64
   1df5c:	dc800815 	stw	r18,32(sp)
   1df60:	2824d53a 	srli	r18,r5,20
   1df64:	dd800c15 	stw	r22,48(sp)
   1df68:	282cd7fa 	srli	r22,r5,31
   1df6c:	dc000615 	stw	r16,24(sp)
   1df70:	04000434 	movhi	r16,16
   1df74:	843fffc4 	addi	r16,r16,-1
   1df78:	dfc00f15 	stw	ra,60(sp)
   1df7c:	df000e15 	stw	fp,56(sp)
   1df80:	ddc00d15 	stw	r23,52(sp)
   1df84:	dd400b15 	stw	r21,44(sp)
   1df88:	dd000a15 	stw	r20,40(sp)
   1df8c:	dcc00915 	stw	r19,36(sp)
   1df90:	dc400715 	stw	r17,28(sp)
   1df94:	9481ffcc 	andi	r18,r18,2047
   1df98:	2c20703a 	and	r16,r5,r16
   1df9c:	b2003fcc 	andi	r8,r22,255
   1dfa0:	90006126 	beq	r18,zero,1e128 <__divdf3+0x1d0>
   1dfa4:	0081ffc4 	movi	r2,2047
   1dfa8:	202b883a 	mov	r21,r4
   1dfac:	90803726 	beq	r18,r2,1e08c <__divdf3+0x134>
   1dfb0:	80800434 	orhi	r2,r16,16
   1dfb4:	100490fa 	slli	r2,r2,3
   1dfb8:	2020d77a 	srli	r16,r4,29
   1dfbc:	202a90fa 	slli	r21,r4,3
   1dfc0:	94bf0044 	addi	r18,r18,-1023
   1dfc4:	80a0b03a 	or	r16,r16,r2
   1dfc8:	0013883a 	mov	r9,zero
   1dfcc:	000b883a 	mov	r5,zero
   1dfd0:	3806d53a 	srli	r3,r7,20
   1dfd4:	382ed7fa 	srli	r23,r7,31
   1dfd8:	04400434 	movhi	r17,16
   1dfdc:	8c7fffc4 	addi	r17,r17,-1
   1dfe0:	18c1ffcc 	andi	r3,r3,2047
   1dfe4:	3029883a 	mov	r20,r6
   1dfe8:	3c62703a 	and	r17,r7,r17
   1dfec:	bf003fcc 	andi	fp,r23,255
   1dff0:	18006e26 	beq	r3,zero,1e1ac <__divdf3+0x254>
   1dff4:	0081ffc4 	movi	r2,2047
   1dff8:	18806626 	beq	r3,r2,1e194 <__divdf3+0x23c>
   1dffc:	88800434 	orhi	r2,r17,16
   1e000:	100490fa 	slli	r2,r2,3
   1e004:	3022d77a 	srli	r17,r6,29
   1e008:	302890fa 	slli	r20,r6,3
   1e00c:	18ff0044 	addi	r3,r3,-1023
   1e010:	88a2b03a 	or	r17,r17,r2
   1e014:	000f883a 	mov	r7,zero
   1e018:	b5e6f03a 	xor	r19,r22,r23
   1e01c:	3a4cb03a 	or	r6,r7,r9
   1e020:	008003c4 	movi	r2,15
   1e024:	9809883a 	mov	r4,r19
   1e028:	90c7c83a 	sub	r3,r18,r3
   1e02c:	9cc03fcc 	andi	r19,r19,255
   1e030:	11809636 	bltu	r2,r6,1e28c <__divdf3+0x334>
   1e034:	300c90ba 	slli	r6,r6,2
   1e038:	008000b4 	movhi	r2,2
   1e03c:	10b81304 	addi	r2,r2,-8116
   1e040:	308d883a 	add	r6,r6,r2
   1e044:	30800017 	ldw	r2,0(r6)
   1e048:	1000683a 	jmp	r2
   1e04c:	0001e28c 	andi	zero,zero,1930
   1e050:	0001e0c4 	movi	zero,1923
   1e054:	0001e27c 	xorhi	zero,zero,1929
   1e058:	0001e0b8 	rdprs	zero,zero,1922
   1e05c:	0001e27c 	xorhi	zero,zero,1929
   1e060:	0001e250 	cmplti	zero,zero,1929
   1e064:	0001e27c 	xorhi	zero,zero,1929
   1e068:	0001e0b8 	rdprs	zero,zero,1922
   1e06c:	0001e0c4 	movi	zero,1923
   1e070:	0001e0c4 	movi	zero,1923
   1e074:	0001e250 	cmplti	zero,zero,1929
   1e078:	0001e0b8 	rdprs	zero,zero,1922
   1e07c:	0001e0a8 	cmpgeui	zero,zero,1922
   1e080:	0001e0a8 	cmpgeui	zero,zero,1922
   1e084:	0001e0a8 	cmpgeui	zero,zero,1922
   1e088:	0001e614 	movui	zero,1944
   1e08c:	2404b03a 	or	r2,r4,r16
   1e090:	10006c1e 	bne	r2,zero,1e244 <__divdf3+0x2ec>
   1e094:	02400204 	movi	r9,8
   1e098:	0021883a 	mov	r16,zero
   1e09c:	002b883a 	mov	r21,zero
   1e0a0:	01400084 	movi	r5,2
   1e0a4:	003fca06 	br	1dfd0 <__alt_data_end+0xfc01dfd0>
   1e0a8:	8023883a 	mov	r17,r16
   1e0ac:	a829883a 	mov	r20,r21
   1e0b0:	4039883a 	mov	fp,r8
   1e0b4:	280f883a 	mov	r7,r5
   1e0b8:	00800084 	movi	r2,2
   1e0bc:	3881601e 	bne	r7,r2,1e640 <__divdf3+0x6e8>
   1e0c0:	e027883a 	mov	r19,fp
   1e0c4:	9900004c 	andi	r4,r19,1
   1e0c8:	0081ffc4 	movi	r2,2047
   1e0cc:	0021883a 	mov	r16,zero
   1e0d0:	002b883a 	mov	r21,zero
   1e0d4:	1004953a 	slli	r2,r2,20
   1e0d8:	20c03fcc 	andi	r3,r4,255
   1e0dc:	01400434 	movhi	r5,16
   1e0e0:	297fffc4 	addi	r5,r5,-1
   1e0e4:	180697fa 	slli	r3,r3,31
   1e0e8:	8160703a 	and	r16,r16,r5
   1e0ec:	80a0b03a 	or	r16,r16,r2
   1e0f0:	80c6b03a 	or	r3,r16,r3
   1e0f4:	a805883a 	mov	r2,r21
   1e0f8:	dfc00f17 	ldw	ra,60(sp)
   1e0fc:	df000e17 	ldw	fp,56(sp)
   1e100:	ddc00d17 	ldw	r23,52(sp)
   1e104:	dd800c17 	ldw	r22,48(sp)
   1e108:	dd400b17 	ldw	r21,44(sp)
   1e10c:	dd000a17 	ldw	r20,40(sp)
   1e110:	dcc00917 	ldw	r19,36(sp)
   1e114:	dc800817 	ldw	r18,32(sp)
   1e118:	dc400717 	ldw	r17,28(sp)
   1e11c:	dc000617 	ldw	r16,24(sp)
   1e120:	dec01004 	addi	sp,sp,64
   1e124:	f800283a 	ret
   1e128:	2404b03a 	or	r2,r4,r16
   1e12c:	2023883a 	mov	r17,r4
   1e130:	10003f26 	beq	r2,zero,1e230 <__divdf3+0x2d8>
   1e134:	80015e26 	beq	r16,zero,1e6b0 <__divdf3+0x758>
   1e138:	8009883a 	mov	r4,r16
   1e13c:	d9800215 	stw	r6,8(sp)
   1e140:	d9c00515 	stw	r7,20(sp)
   1e144:	da000415 	stw	r8,16(sp)
   1e148:	000f3780 	call	f378 <__clzsi2>
   1e14c:	d9800217 	ldw	r6,8(sp)
   1e150:	d9c00517 	ldw	r7,20(sp)
   1e154:	da000417 	ldw	r8,16(sp)
   1e158:	113ffd44 	addi	r4,r2,-11
   1e15c:	00c00704 	movi	r3,28
   1e160:	19014f16 	blt	r3,r4,1e6a0 <__divdf3+0x748>
   1e164:	00c00744 	movi	r3,29
   1e168:	157ffe04 	addi	r21,r2,-8
   1e16c:	1907c83a 	sub	r3,r3,r4
   1e170:	8560983a 	sll	r16,r16,r21
   1e174:	88c6d83a 	srl	r3,r17,r3
   1e178:	8d6a983a 	sll	r21,r17,r21
   1e17c:	1c20b03a 	or	r16,r3,r16
   1e180:	1080fcc4 	addi	r2,r2,1011
   1e184:	00a5c83a 	sub	r18,zero,r2
   1e188:	0013883a 	mov	r9,zero
   1e18c:	000b883a 	mov	r5,zero
   1e190:	003f8f06 	br	1dfd0 <__alt_data_end+0xfc01dfd0>
   1e194:	3444b03a 	or	r2,r6,r17
   1e198:	1000231e 	bne	r2,zero,1e228 <__divdf3+0x2d0>
   1e19c:	0023883a 	mov	r17,zero
   1e1a0:	0029883a 	mov	r20,zero
   1e1a4:	01c00084 	movi	r7,2
   1e1a8:	003f9b06 	br	1e018 <__alt_data_end+0xfc01e018>
   1e1ac:	3444b03a 	or	r2,r6,r17
   1e1b0:	10001926 	beq	r2,zero,1e218 <__divdf3+0x2c0>
   1e1b4:	88014b26 	beq	r17,zero,1e6e4 <__divdf3+0x78c>
   1e1b8:	8809883a 	mov	r4,r17
   1e1bc:	d9400115 	stw	r5,4(sp)
   1e1c0:	d9800215 	stw	r6,8(sp)
   1e1c4:	da000415 	stw	r8,16(sp)
   1e1c8:	da400315 	stw	r9,12(sp)
   1e1cc:	000f3780 	call	f378 <__clzsi2>
   1e1d0:	d9400117 	ldw	r5,4(sp)
   1e1d4:	d9800217 	ldw	r6,8(sp)
   1e1d8:	da000417 	ldw	r8,16(sp)
   1e1dc:	da400317 	ldw	r9,12(sp)
   1e1e0:	113ffd44 	addi	r4,r2,-11
   1e1e4:	00c00704 	movi	r3,28
   1e1e8:	19013a16 	blt	r3,r4,1e6d4 <__divdf3+0x77c>
   1e1ec:	00c00744 	movi	r3,29
   1e1f0:	153ffe04 	addi	r20,r2,-8
   1e1f4:	1907c83a 	sub	r3,r3,r4
   1e1f8:	8d22983a 	sll	r17,r17,r20
   1e1fc:	30c6d83a 	srl	r3,r6,r3
   1e200:	3528983a 	sll	r20,r6,r20
   1e204:	1c62b03a 	or	r17,r3,r17
   1e208:	1080fcc4 	addi	r2,r2,1011
   1e20c:	0087c83a 	sub	r3,zero,r2
   1e210:	000f883a 	mov	r7,zero
   1e214:	003f8006 	br	1e018 <__alt_data_end+0xfc01e018>
   1e218:	0023883a 	mov	r17,zero
   1e21c:	0029883a 	mov	r20,zero
   1e220:	01c00044 	movi	r7,1
   1e224:	003f7c06 	br	1e018 <__alt_data_end+0xfc01e018>
   1e228:	01c000c4 	movi	r7,3
   1e22c:	003f7a06 	br	1e018 <__alt_data_end+0xfc01e018>
   1e230:	02400104 	movi	r9,4
   1e234:	0021883a 	mov	r16,zero
   1e238:	002b883a 	mov	r21,zero
   1e23c:	01400044 	movi	r5,1
   1e240:	003f6306 	br	1dfd0 <__alt_data_end+0xfc01dfd0>
   1e244:	02400304 	movi	r9,12
   1e248:	014000c4 	movi	r5,3
   1e24c:	003f6006 	br	1dfd0 <__alt_data_end+0xfc01dfd0>
   1e250:	04000434 	movhi	r16,16
   1e254:	0009883a 	mov	r4,zero
   1e258:	843fffc4 	addi	r16,r16,-1
   1e25c:	057fffc4 	movi	r21,-1
   1e260:	0081ffc4 	movi	r2,2047
   1e264:	003f9b06 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e268:	00c00044 	movi	r3,1
   1e26c:	1887c83a 	sub	r3,r3,r2
   1e270:	01000e04 	movi	r4,56
   1e274:	20c1530e 	bge	r4,r3,1e7c4 <__divdf3+0x86c>
   1e278:	9900004c 	andi	r4,r19,1
   1e27c:	0005883a 	mov	r2,zero
   1e280:	0021883a 	mov	r16,zero
   1e284:	002b883a 	mov	r21,zero
   1e288:	003f9206 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e28c:	8c012e36 	bltu	r17,r16,1e748 <__divdf3+0x7f0>
   1e290:	84412c26 	beq	r16,r17,1e744 <__divdf3+0x7ec>
   1e294:	a82f883a 	mov	r23,r21
   1e298:	18ffffc4 	addi	r3,r3,-1
   1e29c:	002b883a 	mov	r21,zero
   1e2a0:	a004d63a 	srli	r2,r20,24
   1e2a4:	8822923a 	slli	r17,r17,8
   1e2a8:	a028923a 	slli	r20,r20,8
   1e2ac:	8009883a 	mov	r4,r16
   1e2b0:	88acb03a 	or	r22,r17,r2
   1e2b4:	dd000015 	stw	r20,0(sp)
   1e2b8:	b028d43a 	srli	r20,r22,16
   1e2bc:	d8c00215 	stw	r3,8(sp)
   1e2c0:	b4bfffcc 	andi	r18,r22,65535
   1e2c4:	a00b883a 	mov	r5,r20
   1e2c8:	000d8180 	call	d818 <__udivsi3>
   1e2cc:	100b883a 	mov	r5,r2
   1e2d0:	9009883a 	mov	r4,r18
   1e2d4:	1023883a 	mov	r17,r2
   1e2d8:	000d8d40 	call	d8d4 <__mulsi3>
   1e2dc:	8009883a 	mov	r4,r16
   1e2e0:	a00b883a 	mov	r5,r20
   1e2e4:	1039883a 	mov	fp,r2
   1e2e8:	000d87c0 	call	d87c <__umodsi3>
   1e2ec:	1004943a 	slli	r2,r2,16
   1e2f0:	b808d43a 	srli	r4,r23,16
   1e2f4:	d8c00217 	ldw	r3,8(sp)
   1e2f8:	2084b03a 	or	r2,r4,r2
   1e2fc:	1700062e 	bgeu	r2,fp,1e318 <__divdf3+0x3c0>
   1e300:	1585883a 	add	r2,r2,r22
   1e304:	893fffc4 	addi	r4,r17,-1
   1e308:	15811d36 	bltu	r2,r22,1e780 <__divdf3+0x828>
   1e30c:	17011c2e 	bgeu	r2,fp,1e780 <__divdf3+0x828>
   1e310:	8c7fff84 	addi	r17,r17,-2
   1e314:	1585883a 	add	r2,r2,r22
   1e318:	1739c83a 	sub	fp,r2,fp
   1e31c:	a00b883a 	mov	r5,r20
   1e320:	e009883a 	mov	r4,fp
   1e324:	d8c00215 	stw	r3,8(sp)
   1e328:	000d8180 	call	d818 <__udivsi3>
   1e32c:	100b883a 	mov	r5,r2
   1e330:	9009883a 	mov	r4,r18
   1e334:	1021883a 	mov	r16,r2
   1e338:	000d8d40 	call	d8d4 <__mulsi3>
   1e33c:	a00b883a 	mov	r5,r20
   1e340:	e009883a 	mov	r4,fp
   1e344:	d8800415 	stw	r2,16(sp)
   1e348:	000d87c0 	call	d87c <__umodsi3>
   1e34c:	1004943a 	slli	r2,r2,16
   1e350:	da000417 	ldw	r8,16(sp)
   1e354:	bdffffcc 	andi	r23,r23,65535
   1e358:	b884b03a 	or	r2,r23,r2
   1e35c:	d8c00217 	ldw	r3,8(sp)
   1e360:	1200062e 	bgeu	r2,r8,1e37c <__divdf3+0x424>
   1e364:	1585883a 	add	r2,r2,r22
   1e368:	813fffc4 	addi	r4,r16,-1
   1e36c:	15810236 	bltu	r2,r22,1e778 <__divdf3+0x820>
   1e370:	1201012e 	bgeu	r2,r8,1e778 <__divdf3+0x820>
   1e374:	843fff84 	addi	r16,r16,-2
   1e378:	1585883a 	add	r2,r2,r22
   1e37c:	8822943a 	slli	r17,r17,16
   1e380:	d9800017 	ldw	r6,0(sp)
   1e384:	1211c83a 	sub	r8,r2,r8
   1e388:	8c22b03a 	or	r17,r17,r16
   1e38c:	373fffcc 	andi	fp,r6,65535
   1e390:	8abfffcc 	andi	r10,r17,65535
   1e394:	8820d43a 	srli	r16,r17,16
   1e398:	5009883a 	mov	r4,r10
   1e39c:	e00b883a 	mov	r5,fp
   1e3a0:	302ed43a 	srli	r23,r6,16
   1e3a4:	d8c00215 	stw	r3,8(sp)
   1e3a8:	da000415 	stw	r8,16(sp)
   1e3ac:	da800115 	stw	r10,4(sp)
   1e3b0:	000d8d40 	call	d8d4 <__mulsi3>
   1e3b4:	800b883a 	mov	r5,r16
   1e3b8:	e009883a 	mov	r4,fp
   1e3bc:	d8800515 	stw	r2,20(sp)
   1e3c0:	000d8d40 	call	d8d4 <__mulsi3>
   1e3c4:	8009883a 	mov	r4,r16
   1e3c8:	b80b883a 	mov	r5,r23
   1e3cc:	d8800315 	stw	r2,12(sp)
   1e3d0:	000d8d40 	call	d8d4 <__mulsi3>
   1e3d4:	da800117 	ldw	r10,4(sp)
   1e3d8:	b80b883a 	mov	r5,r23
   1e3dc:	1021883a 	mov	r16,r2
   1e3e0:	5009883a 	mov	r4,r10
   1e3e4:	000d8d40 	call	d8d4 <__mulsi3>
   1e3e8:	d9c00517 	ldw	r7,20(sp)
   1e3ec:	da400317 	ldw	r9,12(sp)
   1e3f0:	d8c00217 	ldw	r3,8(sp)
   1e3f4:	3808d43a 	srli	r4,r7,16
   1e3f8:	1245883a 	add	r2,r2,r9
   1e3fc:	da000417 	ldw	r8,16(sp)
   1e400:	2085883a 	add	r2,r4,r2
   1e404:	1240022e 	bgeu	r2,r9,1e410 <__divdf3+0x4b8>
   1e408:	01000074 	movhi	r4,1
   1e40c:	8121883a 	add	r16,r16,r4
   1e410:	1008d43a 	srli	r4,r2,16
   1e414:	1004943a 	slli	r2,r2,16
   1e418:	39ffffcc 	andi	r7,r7,65535
   1e41c:	2409883a 	add	r4,r4,r16
   1e420:	11c5883a 	add	r2,r2,r7
   1e424:	4100bb36 	bltu	r8,r4,1e714 <__divdf3+0x7bc>
   1e428:	4100d726 	beq	r8,r4,1e788 <__divdf3+0x830>
   1e42c:	4109c83a 	sub	r4,r8,r4
   1e430:	a8a1c83a 	sub	r16,r21,r2
   1e434:	ac2b803a 	cmpltu	r21,r21,r16
   1e438:	256bc83a 	sub	r21,r4,r21
   1e43c:	b540d926 	beq	r22,r21,1e7a4 <__divdf3+0x84c>
   1e440:	a00b883a 	mov	r5,r20
   1e444:	a809883a 	mov	r4,r21
   1e448:	d8c00215 	stw	r3,8(sp)
   1e44c:	000d8180 	call	d818 <__udivsi3>
   1e450:	100b883a 	mov	r5,r2
   1e454:	9009883a 	mov	r4,r18
   1e458:	d8800515 	stw	r2,20(sp)
   1e45c:	000d8d40 	call	d8d4 <__mulsi3>
   1e460:	a809883a 	mov	r4,r21
   1e464:	a00b883a 	mov	r5,r20
   1e468:	d8800415 	stw	r2,16(sp)
   1e46c:	000d87c0 	call	d87c <__umodsi3>
   1e470:	1004943a 	slli	r2,r2,16
   1e474:	8008d43a 	srli	r4,r16,16
   1e478:	da000417 	ldw	r8,16(sp)
   1e47c:	d8c00217 	ldw	r3,8(sp)
   1e480:	2084b03a 	or	r2,r4,r2
   1e484:	d9c00517 	ldw	r7,20(sp)
   1e488:	1200062e 	bgeu	r2,r8,1e4a4 <__divdf3+0x54c>
   1e48c:	1585883a 	add	r2,r2,r22
   1e490:	393fffc4 	addi	r4,r7,-1
   1e494:	1580c536 	bltu	r2,r22,1e7ac <__divdf3+0x854>
   1e498:	1200c42e 	bgeu	r2,r8,1e7ac <__divdf3+0x854>
   1e49c:	39ffff84 	addi	r7,r7,-2
   1e4a0:	1585883a 	add	r2,r2,r22
   1e4a4:	122bc83a 	sub	r21,r2,r8
   1e4a8:	a00b883a 	mov	r5,r20
   1e4ac:	a809883a 	mov	r4,r21
   1e4b0:	d8c00215 	stw	r3,8(sp)
   1e4b4:	d9c00515 	stw	r7,20(sp)
   1e4b8:	000d8180 	call	d818 <__udivsi3>
   1e4bc:	9009883a 	mov	r4,r18
   1e4c0:	100b883a 	mov	r5,r2
   1e4c4:	d8800415 	stw	r2,16(sp)
   1e4c8:	000d8d40 	call	d8d4 <__mulsi3>
   1e4cc:	a809883a 	mov	r4,r21
   1e4d0:	a00b883a 	mov	r5,r20
   1e4d4:	1025883a 	mov	r18,r2
   1e4d8:	000d87c0 	call	d87c <__umodsi3>
   1e4dc:	1004943a 	slli	r2,r2,16
   1e4e0:	813fffcc 	andi	r4,r16,65535
   1e4e4:	d8c00217 	ldw	r3,8(sp)
   1e4e8:	20a0b03a 	or	r16,r4,r2
   1e4ec:	d9c00517 	ldw	r7,20(sp)
   1e4f0:	da000417 	ldw	r8,16(sp)
   1e4f4:	8480062e 	bgeu	r16,r18,1e510 <__divdf3+0x5b8>
   1e4f8:	85a1883a 	add	r16,r16,r22
   1e4fc:	40bfffc4 	addi	r2,r8,-1
   1e500:	8580ac36 	bltu	r16,r22,1e7b4 <__divdf3+0x85c>
   1e504:	8480ab2e 	bgeu	r16,r18,1e7b4 <__divdf3+0x85c>
   1e508:	423fff84 	addi	r8,r8,-2
   1e50c:	85a1883a 	add	r16,r16,r22
   1e510:	3804943a 	slli	r2,r7,16
   1e514:	84a1c83a 	sub	r16,r16,r18
   1e518:	e009883a 	mov	r4,fp
   1e51c:	1228b03a 	or	r20,r2,r8
   1e520:	a1ffffcc 	andi	r7,r20,65535
   1e524:	a024d43a 	srli	r18,r20,16
   1e528:	380b883a 	mov	r5,r7
   1e52c:	d8c00215 	stw	r3,8(sp)
   1e530:	d9c00515 	stw	r7,20(sp)
   1e534:	000d8d40 	call	d8d4 <__mulsi3>
   1e538:	900b883a 	mov	r5,r18
   1e53c:	e009883a 	mov	r4,fp
   1e540:	102b883a 	mov	r21,r2
   1e544:	000d8d40 	call	d8d4 <__mulsi3>
   1e548:	900b883a 	mov	r5,r18
   1e54c:	b809883a 	mov	r4,r23
   1e550:	1039883a 	mov	fp,r2
   1e554:	000d8d40 	call	d8d4 <__mulsi3>
   1e558:	d9c00517 	ldw	r7,20(sp)
   1e55c:	b80b883a 	mov	r5,r23
   1e560:	1025883a 	mov	r18,r2
   1e564:	3809883a 	mov	r4,r7
   1e568:	000d8d40 	call	d8d4 <__mulsi3>
   1e56c:	a808d43a 	srli	r4,r21,16
   1e570:	1705883a 	add	r2,r2,fp
   1e574:	d8c00217 	ldw	r3,8(sp)
   1e578:	2085883a 	add	r2,r4,r2
   1e57c:	1700022e 	bgeu	r2,fp,1e588 <__divdf3+0x630>
   1e580:	01000074 	movhi	r4,1
   1e584:	9125883a 	add	r18,r18,r4
   1e588:	1008d43a 	srli	r4,r2,16
   1e58c:	1004943a 	slli	r2,r2,16
   1e590:	ad7fffcc 	andi	r21,r21,65535
   1e594:	2489883a 	add	r4,r4,r18
   1e598:	1545883a 	add	r2,r2,r21
   1e59c:	81003836 	bltu	r16,r4,1e680 <__divdf3+0x728>
   1e5a0:	81003626 	beq	r16,r4,1e67c <__divdf3+0x724>
   1e5a4:	a5000054 	ori	r20,r20,1
   1e5a8:	1880ffc4 	addi	r2,r3,1023
   1e5ac:	00bf2e0e 	bge	zero,r2,1e268 <__alt_data_end+0xfc01e268>
   1e5b0:	a10001cc 	andi	r4,r20,7
   1e5b4:	20000726 	beq	r4,zero,1e5d4 <__divdf3+0x67c>
   1e5b8:	a10003cc 	andi	r4,r20,15
   1e5bc:	01400104 	movi	r5,4
   1e5c0:	21400426 	beq	r4,r5,1e5d4 <__divdf3+0x67c>
   1e5c4:	a149883a 	add	r4,r20,r5
   1e5c8:	2529803a 	cmpltu	r20,r4,r20
   1e5cc:	8d23883a 	add	r17,r17,r20
   1e5d0:	2029883a 	mov	r20,r4
   1e5d4:	8900402c 	andhi	r4,r17,256
   1e5d8:	20000426 	beq	r4,zero,1e5ec <__divdf3+0x694>
   1e5dc:	18810004 	addi	r2,r3,1024
   1e5e0:	00ffc034 	movhi	r3,65280
   1e5e4:	18ffffc4 	addi	r3,r3,-1
   1e5e8:	88e2703a 	and	r17,r17,r3
   1e5ec:	00c1ff84 	movi	r3,2046
   1e5f0:	18beb416 	blt	r3,r2,1e0c4 <__alt_data_end+0xfc01e0c4>
   1e5f4:	a028d0fa 	srli	r20,r20,3
   1e5f8:	882a977a 	slli	r21,r17,29
   1e5fc:	8820927a 	slli	r16,r17,9
   1e600:	1081ffcc 	andi	r2,r2,2047
   1e604:	ad2ab03a 	or	r21,r21,r20
   1e608:	8020d33a 	srli	r16,r16,12
   1e60c:	9900004c 	andi	r4,r19,1
   1e610:	003eb006 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e614:	8080022c 	andhi	r2,r16,8
   1e618:	10001226 	beq	r2,zero,1e664 <__divdf3+0x70c>
   1e61c:	8880022c 	andhi	r2,r17,8
   1e620:	1000101e 	bne	r2,zero,1e664 <__divdf3+0x70c>
   1e624:	00800434 	movhi	r2,16
   1e628:	8c000234 	orhi	r16,r17,8
   1e62c:	10bfffc4 	addi	r2,r2,-1
   1e630:	b809883a 	mov	r4,r23
   1e634:	80a0703a 	and	r16,r16,r2
   1e638:	a02b883a 	mov	r21,r20
   1e63c:	003f0806 	br	1e260 <__alt_data_end+0xfc01e260>
   1e640:	008000c4 	movi	r2,3
   1e644:	3880b126 	beq	r7,r2,1e90c <__divdf3+0x9b4>
   1e648:	00800044 	movi	r2,1
   1e64c:	38805b1e 	bne	r7,r2,1e7bc <__divdf3+0x864>
   1e650:	e009883a 	mov	r4,fp
   1e654:	0005883a 	mov	r2,zero
   1e658:	0021883a 	mov	r16,zero
   1e65c:	002b883a 	mov	r21,zero
   1e660:	003e9c06 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e664:	00800434 	movhi	r2,16
   1e668:	84000234 	orhi	r16,r16,8
   1e66c:	10bfffc4 	addi	r2,r2,-1
   1e670:	b009883a 	mov	r4,r22
   1e674:	80a0703a 	and	r16,r16,r2
   1e678:	003ef906 	br	1e260 <__alt_data_end+0xfc01e260>
   1e67c:	103fca26 	beq	r2,zero,1e5a8 <__alt_data_end+0xfc01e5a8>
   1e680:	b421883a 	add	r16,r22,r16
   1e684:	a17fffc4 	addi	r5,r20,-1
   1e688:	8580422e 	bgeu	r16,r22,1e794 <__divdf3+0x83c>
   1e68c:	2829883a 	mov	r20,r5
   1e690:	813fc41e 	bne	r16,r4,1e5a4 <__alt_data_end+0xfc01e5a4>
   1e694:	d9800017 	ldw	r6,0(sp)
   1e698:	30bfc21e 	bne	r6,r2,1e5a4 <__alt_data_end+0xfc01e5a4>
   1e69c:	003fc206 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e6a0:	143ff604 	addi	r16,r2,-40
   1e6a4:	8c20983a 	sll	r16,r17,r16
   1e6a8:	002b883a 	mov	r21,zero
   1e6ac:	003eb406 	br	1e180 <__alt_data_end+0xfc01e180>
   1e6b0:	d9800215 	stw	r6,8(sp)
   1e6b4:	d9c00515 	stw	r7,20(sp)
   1e6b8:	da000415 	stw	r8,16(sp)
   1e6bc:	000f3780 	call	f378 <__clzsi2>
   1e6c0:	10800804 	addi	r2,r2,32
   1e6c4:	da000417 	ldw	r8,16(sp)
   1e6c8:	d9c00517 	ldw	r7,20(sp)
   1e6cc:	d9800217 	ldw	r6,8(sp)
   1e6d0:	003ea106 	br	1e158 <__alt_data_end+0xfc01e158>
   1e6d4:	147ff604 	addi	r17,r2,-40
   1e6d8:	3462983a 	sll	r17,r6,r17
   1e6dc:	0029883a 	mov	r20,zero
   1e6e0:	003ec906 	br	1e208 <__alt_data_end+0xfc01e208>
   1e6e4:	3009883a 	mov	r4,r6
   1e6e8:	d9400115 	stw	r5,4(sp)
   1e6ec:	d9800215 	stw	r6,8(sp)
   1e6f0:	da000415 	stw	r8,16(sp)
   1e6f4:	da400315 	stw	r9,12(sp)
   1e6f8:	000f3780 	call	f378 <__clzsi2>
   1e6fc:	10800804 	addi	r2,r2,32
   1e700:	da400317 	ldw	r9,12(sp)
   1e704:	da000417 	ldw	r8,16(sp)
   1e708:	d9800217 	ldw	r6,8(sp)
   1e70c:	d9400117 	ldw	r5,4(sp)
   1e710:	003eb306 	br	1e1e0 <__alt_data_end+0xfc01e1e0>
   1e714:	d9800017 	ldw	r6,0(sp)
   1e718:	a9ab883a 	add	r21,r21,r6
   1e71c:	a98b803a 	cmpltu	r5,r21,r6
   1e720:	2d8b883a 	add	r5,r5,r22
   1e724:	2a11883a 	add	r8,r5,r8
   1e728:	897fffc4 	addi	r5,r17,-1
   1e72c:	b2000c2e 	bgeu	r22,r8,1e760 <__divdf3+0x808>
   1e730:	41003f36 	bltu	r8,r4,1e830 <__divdf3+0x8d8>
   1e734:	22006c26 	beq	r4,r8,1e8e8 <__divdf3+0x990>
   1e738:	4109c83a 	sub	r4,r8,r4
   1e73c:	2823883a 	mov	r17,r5
   1e740:	003f3b06 	br	1e430 <__alt_data_end+0xfc01e430>
   1e744:	ad3ed336 	bltu	r21,r20,1e294 <__alt_data_end+0xfc01e294>
   1e748:	a804d07a 	srli	r2,r21,1
   1e74c:	802e97fa 	slli	r23,r16,31
   1e750:	a82a97fa 	slli	r21,r21,31
   1e754:	8020d07a 	srli	r16,r16,1
   1e758:	b8aeb03a 	or	r23,r23,r2
   1e75c:	003ed006 	br	1e2a0 <__alt_data_end+0xfc01e2a0>
   1e760:	b23ff51e 	bne	r22,r8,1e738 <__alt_data_end+0xfc01e738>
   1e764:	d9800017 	ldw	r6,0(sp)
   1e768:	a9bff12e 	bgeu	r21,r6,1e730 <__alt_data_end+0xfc01e730>
   1e76c:	b109c83a 	sub	r4,r22,r4
   1e770:	2823883a 	mov	r17,r5
   1e774:	003f2e06 	br	1e430 <__alt_data_end+0xfc01e430>
   1e778:	2021883a 	mov	r16,r4
   1e77c:	003eff06 	br	1e37c <__alt_data_end+0xfc01e37c>
   1e780:	2023883a 	mov	r17,r4
   1e784:	003ee406 	br	1e318 <__alt_data_end+0xfc01e318>
   1e788:	a8bfe236 	bltu	r21,r2,1e714 <__alt_data_end+0xfc01e714>
   1e78c:	0009883a 	mov	r4,zero
   1e790:	003f2706 	br	1e430 <__alt_data_end+0xfc01e430>
   1e794:	81002d36 	bltu	r16,r4,1e84c <__divdf3+0x8f4>
   1e798:	24005626 	beq	r4,r16,1e8f4 <__divdf3+0x99c>
   1e79c:	2829883a 	mov	r20,r5
   1e7a0:	003f8006 	br	1e5a4 <__alt_data_end+0xfc01e5a4>
   1e7a4:	053fffc4 	movi	r20,-1
   1e7a8:	003f7f06 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e7ac:	200f883a 	mov	r7,r4
   1e7b0:	003f3c06 	br	1e4a4 <__alt_data_end+0xfc01e4a4>
   1e7b4:	1011883a 	mov	r8,r2
   1e7b8:	003f5506 	br	1e510 <__alt_data_end+0xfc01e510>
   1e7bc:	e027883a 	mov	r19,fp
   1e7c0:	003f7906 	br	1e5a8 <__alt_data_end+0xfc01e5a8>
   1e7c4:	010007c4 	movi	r4,31
   1e7c8:	20c02816 	blt	r4,r3,1e86c <__divdf3+0x914>
   1e7cc:	00800804 	movi	r2,32
   1e7d0:	10c5c83a 	sub	r2,r2,r3
   1e7d4:	888a983a 	sll	r5,r17,r2
   1e7d8:	a0c8d83a 	srl	r4,r20,r3
   1e7dc:	a084983a 	sll	r2,r20,r2
   1e7e0:	88e2d83a 	srl	r17,r17,r3
   1e7e4:	2906b03a 	or	r3,r5,r4
   1e7e8:	1004c03a 	cmpne	r2,r2,zero
   1e7ec:	1886b03a 	or	r3,r3,r2
   1e7f0:	188001cc 	andi	r2,r3,7
   1e7f4:	10000726 	beq	r2,zero,1e814 <__divdf3+0x8bc>
   1e7f8:	188003cc 	andi	r2,r3,15
   1e7fc:	01000104 	movi	r4,4
   1e800:	11000426 	beq	r2,r4,1e814 <__divdf3+0x8bc>
   1e804:	1805883a 	mov	r2,r3
   1e808:	10c00104 	addi	r3,r2,4
   1e80c:	1885803a 	cmpltu	r2,r3,r2
   1e810:	88a3883a 	add	r17,r17,r2
   1e814:	8880202c 	andhi	r2,r17,128
   1e818:	10002926 	beq	r2,zero,1e8c0 <__divdf3+0x968>
   1e81c:	9900004c 	andi	r4,r19,1
   1e820:	00800044 	movi	r2,1
   1e824:	0021883a 	mov	r16,zero
   1e828:	002b883a 	mov	r21,zero
   1e82c:	003e2906 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e830:	d9800017 	ldw	r6,0(sp)
   1e834:	8c7fff84 	addi	r17,r17,-2
   1e838:	a9ab883a 	add	r21,r21,r6
   1e83c:	a98b803a 	cmpltu	r5,r21,r6
   1e840:	2d8b883a 	add	r5,r5,r22
   1e844:	2a11883a 	add	r8,r5,r8
   1e848:	003ef806 	br	1e42c <__alt_data_end+0xfc01e42c>
   1e84c:	d9800017 	ldw	r6,0(sp)
   1e850:	318f883a 	add	r7,r6,r6
   1e854:	398b803a 	cmpltu	r5,r7,r6
   1e858:	2d8d883a 	add	r6,r5,r22
   1e85c:	81a1883a 	add	r16,r16,r6
   1e860:	a17fff84 	addi	r5,r20,-2
   1e864:	d9c00015 	stw	r7,0(sp)
   1e868:	003f8806 	br	1e68c <__alt_data_end+0xfc01e68c>
   1e86c:	013ff844 	movi	r4,-31
   1e870:	2085c83a 	sub	r2,r4,r2
   1e874:	8888d83a 	srl	r4,r17,r2
   1e878:	00800804 	movi	r2,32
   1e87c:	18802126 	beq	r3,r2,1e904 <__divdf3+0x9ac>
   1e880:	04001004 	movi	r16,64
   1e884:	80c7c83a 	sub	r3,r16,r3
   1e888:	88e0983a 	sll	r16,r17,r3
   1e88c:	8504b03a 	or	r2,r16,r20
   1e890:	1004c03a 	cmpne	r2,r2,zero
   1e894:	2084b03a 	or	r2,r4,r2
   1e898:	144001cc 	andi	r17,r2,7
   1e89c:	88000d1e 	bne	r17,zero,1e8d4 <__divdf3+0x97c>
   1e8a0:	0021883a 	mov	r16,zero
   1e8a4:	102ad0fa 	srli	r21,r2,3
   1e8a8:	9900004c 	andi	r4,r19,1
   1e8ac:	0005883a 	mov	r2,zero
   1e8b0:	ac6ab03a 	or	r21,r21,r17
   1e8b4:	003e0706 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e8b8:	1007883a 	mov	r3,r2
   1e8bc:	0023883a 	mov	r17,zero
   1e8c0:	8820927a 	slli	r16,r17,9
   1e8c4:	1805883a 	mov	r2,r3
   1e8c8:	8822977a 	slli	r17,r17,29
   1e8cc:	8020d33a 	srli	r16,r16,12
   1e8d0:	003ff406 	br	1e8a4 <__alt_data_end+0xfc01e8a4>
   1e8d4:	10c003cc 	andi	r3,r2,15
   1e8d8:	01000104 	movi	r4,4
   1e8dc:	193ff626 	beq	r3,r4,1e8b8 <__alt_data_end+0xfc01e8b8>
   1e8e0:	0023883a 	mov	r17,zero
   1e8e4:	003fc806 	br	1e808 <__alt_data_end+0xfc01e808>
   1e8e8:	a8bfd136 	bltu	r21,r2,1e830 <__alt_data_end+0xfc01e830>
   1e8ec:	2823883a 	mov	r17,r5
   1e8f0:	003fa606 	br	1e78c <__alt_data_end+0xfc01e78c>
   1e8f4:	d9800017 	ldw	r6,0(sp)
   1e8f8:	30bfd436 	bltu	r6,r2,1e84c <__alt_data_end+0xfc01e84c>
   1e8fc:	2829883a 	mov	r20,r5
   1e900:	003f6406 	br	1e694 <__alt_data_end+0xfc01e694>
   1e904:	0021883a 	mov	r16,zero
   1e908:	003fe006 	br	1e88c <__alt_data_end+0xfc01e88c>
   1e90c:	00800434 	movhi	r2,16
   1e910:	8c000234 	orhi	r16,r17,8
   1e914:	10bfffc4 	addi	r2,r2,-1
   1e918:	e009883a 	mov	r4,fp
   1e91c:	80a0703a 	and	r16,r16,r2
   1e920:	a02b883a 	mov	r21,r20
   1e924:	003e4e06 	br	1e260 <__alt_data_end+0xfc01e260>

0001e928 <__eqdf2>:
   1e928:	2804d53a 	srli	r2,r5,20
   1e92c:	3806d53a 	srli	r3,r7,20
   1e930:	02000434 	movhi	r8,16
   1e934:	423fffc4 	addi	r8,r8,-1
   1e938:	1081ffcc 	andi	r2,r2,2047
   1e93c:	0281ffc4 	movi	r10,2047
   1e940:	2a12703a 	and	r9,r5,r8
   1e944:	18c1ffcc 	andi	r3,r3,2047
   1e948:	3a10703a 	and	r8,r7,r8
   1e94c:	280ad7fa 	srli	r5,r5,31
   1e950:	380ed7fa 	srli	r7,r7,31
   1e954:	12801026 	beq	r2,r10,1e998 <__eqdf2+0x70>
   1e958:	0281ffc4 	movi	r10,2047
   1e95c:	1a800a26 	beq	r3,r10,1e988 <__eqdf2+0x60>
   1e960:	10c00226 	beq	r2,r3,1e96c <__eqdf2+0x44>
   1e964:	00800044 	movi	r2,1
   1e968:	f800283a 	ret
   1e96c:	4a3ffd1e 	bne	r9,r8,1e964 <__alt_data_end+0xfc01e964>
   1e970:	21bffc1e 	bne	r4,r6,1e964 <__alt_data_end+0xfc01e964>
   1e974:	29c00c26 	beq	r5,r7,1e9a8 <__eqdf2+0x80>
   1e978:	103ffa1e 	bne	r2,zero,1e964 <__alt_data_end+0xfc01e964>
   1e97c:	2244b03a 	or	r2,r4,r9
   1e980:	1004c03a 	cmpne	r2,r2,zero
   1e984:	f800283a 	ret
   1e988:	3214b03a 	or	r10,r6,r8
   1e98c:	503ff426 	beq	r10,zero,1e960 <__alt_data_end+0xfc01e960>
   1e990:	00800044 	movi	r2,1
   1e994:	f800283a 	ret
   1e998:	2254b03a 	or	r10,r4,r9
   1e99c:	503fee26 	beq	r10,zero,1e958 <__alt_data_end+0xfc01e958>
   1e9a0:	00800044 	movi	r2,1
   1e9a4:	f800283a 	ret
   1e9a8:	0005883a 	mov	r2,zero
   1e9ac:	f800283a 	ret

0001e9b0 <__gedf2>:
   1e9b0:	2804d53a 	srli	r2,r5,20
   1e9b4:	3806d53a 	srli	r3,r7,20
   1e9b8:	02000434 	movhi	r8,16
   1e9bc:	423fffc4 	addi	r8,r8,-1
   1e9c0:	1081ffcc 	andi	r2,r2,2047
   1e9c4:	0241ffc4 	movi	r9,2047
   1e9c8:	2a14703a 	and	r10,r5,r8
   1e9cc:	18c1ffcc 	andi	r3,r3,2047
   1e9d0:	3a10703a 	and	r8,r7,r8
   1e9d4:	280ad7fa 	srli	r5,r5,31
   1e9d8:	380ed7fa 	srli	r7,r7,31
   1e9dc:	12401d26 	beq	r2,r9,1ea54 <__gedf2+0xa4>
   1e9e0:	0241ffc4 	movi	r9,2047
   1e9e4:	1a401226 	beq	r3,r9,1ea30 <__gedf2+0x80>
   1e9e8:	1000081e 	bne	r2,zero,1ea0c <__gedf2+0x5c>
   1e9ec:	2296b03a 	or	r11,r4,r10
   1e9f0:	5813003a 	cmpeq	r9,r11,zero
   1e9f4:	1800091e 	bne	r3,zero,1ea1c <__gedf2+0x6c>
   1e9f8:	3218b03a 	or	r12,r6,r8
   1e9fc:	6000071e 	bne	r12,zero,1ea1c <__gedf2+0x6c>
   1ea00:	0005883a 	mov	r2,zero
   1ea04:	5800101e 	bne	r11,zero,1ea48 <__gedf2+0x98>
   1ea08:	f800283a 	ret
   1ea0c:	18000c1e 	bne	r3,zero,1ea40 <__gedf2+0x90>
   1ea10:	3212b03a 	or	r9,r6,r8
   1ea14:	48000c26 	beq	r9,zero,1ea48 <__gedf2+0x98>
   1ea18:	0013883a 	mov	r9,zero
   1ea1c:	39c03fcc 	andi	r7,r7,255
   1ea20:	48000826 	beq	r9,zero,1ea44 <__gedf2+0x94>
   1ea24:	38000926 	beq	r7,zero,1ea4c <__gedf2+0x9c>
   1ea28:	00800044 	movi	r2,1
   1ea2c:	f800283a 	ret
   1ea30:	3212b03a 	or	r9,r6,r8
   1ea34:	483fec26 	beq	r9,zero,1e9e8 <__alt_data_end+0xfc01e9e8>
   1ea38:	00bfff84 	movi	r2,-2
   1ea3c:	f800283a 	ret
   1ea40:	39c03fcc 	andi	r7,r7,255
   1ea44:	29c00626 	beq	r5,r7,1ea60 <__gedf2+0xb0>
   1ea48:	283ff726 	beq	r5,zero,1ea28 <__alt_data_end+0xfc01ea28>
   1ea4c:	00bfffc4 	movi	r2,-1
   1ea50:	f800283a 	ret
   1ea54:	2292b03a 	or	r9,r4,r10
   1ea58:	483fe126 	beq	r9,zero,1e9e0 <__alt_data_end+0xfc01e9e0>
   1ea5c:	003ff606 	br	1ea38 <__alt_data_end+0xfc01ea38>
   1ea60:	18bff916 	blt	r3,r2,1ea48 <__alt_data_end+0xfc01ea48>
   1ea64:	10c00316 	blt	r2,r3,1ea74 <__gedf2+0xc4>
   1ea68:	42bff736 	bltu	r8,r10,1ea48 <__alt_data_end+0xfc01ea48>
   1ea6c:	52000326 	beq	r10,r8,1ea7c <__gedf2+0xcc>
   1ea70:	5200042e 	bgeu	r10,r8,1ea84 <__gedf2+0xd4>
   1ea74:	283fec1e 	bne	r5,zero,1ea28 <__alt_data_end+0xfc01ea28>
   1ea78:	003ff406 	br	1ea4c <__alt_data_end+0xfc01ea4c>
   1ea7c:	313ff236 	bltu	r6,r4,1ea48 <__alt_data_end+0xfc01ea48>
   1ea80:	21bffc36 	bltu	r4,r6,1ea74 <__alt_data_end+0xfc01ea74>
   1ea84:	0005883a 	mov	r2,zero
   1ea88:	f800283a 	ret

0001ea8c <__ledf2>:
   1ea8c:	2804d53a 	srli	r2,r5,20
   1ea90:	3810d53a 	srli	r8,r7,20
   1ea94:	00c00434 	movhi	r3,16
   1ea98:	18ffffc4 	addi	r3,r3,-1
   1ea9c:	1081ffcc 	andi	r2,r2,2047
   1eaa0:	0241ffc4 	movi	r9,2047
   1eaa4:	28d4703a 	and	r10,r5,r3
   1eaa8:	4201ffcc 	andi	r8,r8,2047
   1eaac:	38c6703a 	and	r3,r7,r3
   1eab0:	280ad7fa 	srli	r5,r5,31
   1eab4:	380ed7fa 	srli	r7,r7,31
   1eab8:	12401f26 	beq	r2,r9,1eb38 <__ledf2+0xac>
   1eabc:	0241ffc4 	movi	r9,2047
   1eac0:	42401426 	beq	r8,r9,1eb14 <__ledf2+0x88>
   1eac4:	1000091e 	bne	r2,zero,1eaec <__ledf2+0x60>
   1eac8:	2296b03a 	or	r11,r4,r10
   1eacc:	5813003a 	cmpeq	r9,r11,zero
   1ead0:	29403fcc 	andi	r5,r5,255
   1ead4:	40000a1e 	bne	r8,zero,1eb00 <__ledf2+0x74>
   1ead8:	30d8b03a 	or	r12,r6,r3
   1eadc:	6000081e 	bne	r12,zero,1eb00 <__ledf2+0x74>
   1eae0:	0005883a 	mov	r2,zero
   1eae4:	5800111e 	bne	r11,zero,1eb2c <__ledf2+0xa0>
   1eae8:	f800283a 	ret
   1eaec:	29403fcc 	andi	r5,r5,255
   1eaf0:	40000c1e 	bne	r8,zero,1eb24 <__ledf2+0x98>
   1eaf4:	30d2b03a 	or	r9,r6,r3
   1eaf8:	48000c26 	beq	r9,zero,1eb2c <__ledf2+0xa0>
   1eafc:	0013883a 	mov	r9,zero
   1eb00:	39c03fcc 	andi	r7,r7,255
   1eb04:	48000826 	beq	r9,zero,1eb28 <__ledf2+0x9c>
   1eb08:	38001126 	beq	r7,zero,1eb50 <__ledf2+0xc4>
   1eb0c:	00800044 	movi	r2,1
   1eb10:	f800283a 	ret
   1eb14:	30d2b03a 	or	r9,r6,r3
   1eb18:	483fea26 	beq	r9,zero,1eac4 <__alt_data_end+0xfc01eac4>
   1eb1c:	00800084 	movi	r2,2
   1eb20:	f800283a 	ret
   1eb24:	39c03fcc 	andi	r7,r7,255
   1eb28:	39400726 	beq	r7,r5,1eb48 <__ledf2+0xbc>
   1eb2c:	2800081e 	bne	r5,zero,1eb50 <__ledf2+0xc4>
   1eb30:	00800044 	movi	r2,1
   1eb34:	f800283a 	ret
   1eb38:	2292b03a 	or	r9,r4,r10
   1eb3c:	483fdf26 	beq	r9,zero,1eabc <__alt_data_end+0xfc01eabc>
   1eb40:	00800084 	movi	r2,2
   1eb44:	f800283a 	ret
   1eb48:	4080030e 	bge	r8,r2,1eb58 <__ledf2+0xcc>
   1eb4c:	383fef26 	beq	r7,zero,1eb0c <__alt_data_end+0xfc01eb0c>
   1eb50:	00bfffc4 	movi	r2,-1
   1eb54:	f800283a 	ret
   1eb58:	123feb16 	blt	r2,r8,1eb08 <__alt_data_end+0xfc01eb08>
   1eb5c:	1abff336 	bltu	r3,r10,1eb2c <__alt_data_end+0xfc01eb2c>
   1eb60:	50c00326 	beq	r10,r3,1eb70 <__ledf2+0xe4>
   1eb64:	50c0042e 	bgeu	r10,r3,1eb78 <__ledf2+0xec>
   1eb68:	283fe81e 	bne	r5,zero,1eb0c <__alt_data_end+0xfc01eb0c>
   1eb6c:	003ff806 	br	1eb50 <__alt_data_end+0xfc01eb50>
   1eb70:	313fee36 	bltu	r6,r4,1eb2c <__alt_data_end+0xfc01eb2c>
   1eb74:	21bffc36 	bltu	r4,r6,1eb68 <__alt_data_end+0xfc01eb68>
   1eb78:	0005883a 	mov	r2,zero
   1eb7c:	f800283a 	ret

0001eb80 <__muldf3>:
   1eb80:	deffee04 	addi	sp,sp,-72
   1eb84:	dd000c15 	stw	r20,48(sp)
   1eb88:	2828d53a 	srli	r20,r5,20
   1eb8c:	ddc00f15 	stw	r23,60(sp)
   1eb90:	282ed7fa 	srli	r23,r5,31
   1eb94:	dc000815 	stw	r16,32(sp)
   1eb98:	04000434 	movhi	r16,16
   1eb9c:	dcc00b15 	stw	r19,44(sp)
   1eba0:	843fffc4 	addi	r16,r16,-1
   1eba4:	dfc01115 	stw	ra,68(sp)
   1eba8:	df001015 	stw	fp,64(sp)
   1ebac:	dd800e15 	stw	r22,56(sp)
   1ebb0:	dd400d15 	stw	r21,52(sp)
   1ebb4:	dc800a15 	stw	r18,40(sp)
   1ebb8:	dc400915 	stw	r17,36(sp)
   1ebbc:	a501ffcc 	andi	r20,r20,2047
   1ebc0:	2c20703a 	and	r16,r5,r16
   1ebc4:	b827883a 	mov	r19,r23
   1ebc8:	ba403fcc 	andi	r9,r23,255
   1ebcc:	a0006026 	beq	r20,zero,1ed50 <__muldf3+0x1d0>
   1ebd0:	0081ffc4 	movi	r2,2047
   1ebd4:	202d883a 	mov	r22,r4
   1ebd8:	a0803626 	beq	r20,r2,1ecb4 <__muldf3+0x134>
   1ebdc:	84000434 	orhi	r16,r16,16
   1ebe0:	200ad77a 	srli	r5,r4,29
   1ebe4:	800490fa 	slli	r2,r16,3
   1ebe8:	202c90fa 	slli	r22,r4,3
   1ebec:	a53f0044 	addi	r20,r20,-1023
   1ebf0:	28a0b03a 	or	r16,r5,r2
   1ebf4:	002b883a 	mov	r21,zero
   1ebf8:	000b883a 	mov	r5,zero
   1ebfc:	3804d53a 	srli	r2,r7,20
   1ec00:	3838d7fa 	srli	fp,r7,31
   1ec04:	04400434 	movhi	r17,16
   1ec08:	8c7fffc4 	addi	r17,r17,-1
   1ec0c:	1081ffcc 	andi	r2,r2,2047
   1ec10:	3025883a 	mov	r18,r6
   1ec14:	3c62703a 	and	r17,r7,r17
   1ec18:	e2803fcc 	andi	r10,fp,255
   1ec1c:	10006d26 	beq	r2,zero,1edd4 <__muldf3+0x254>
   1ec20:	00c1ffc4 	movi	r3,2047
   1ec24:	10c06526 	beq	r2,r3,1edbc <__muldf3+0x23c>
   1ec28:	8c400434 	orhi	r17,r17,16
   1ec2c:	300ed77a 	srli	r7,r6,29
   1ec30:	880690fa 	slli	r3,r17,3
   1ec34:	302490fa 	slli	r18,r6,3
   1ec38:	10bf0044 	addi	r2,r2,-1023
   1ec3c:	38e2b03a 	or	r17,r7,r3
   1ec40:	000f883a 	mov	r7,zero
   1ec44:	a087883a 	add	r3,r20,r2
   1ec48:	010003c4 	movi	r4,15
   1ec4c:	3d44b03a 	or	r2,r7,r21
   1ec50:	e5ccf03a 	xor	r6,fp,r23
   1ec54:	1a000044 	addi	r8,r3,1
   1ec58:	20809b36 	bltu	r4,r2,1eec8 <__muldf3+0x348>
   1ec5c:	100490ba 	slli	r2,r2,2
   1ec60:	010000b4 	movhi	r4,2
   1ec64:	213b1d04 	addi	r4,r4,-5004
   1ec68:	1105883a 	add	r2,r2,r4
   1ec6c:	10800017 	ldw	r2,0(r2)
   1ec70:	1000683a 	jmp	r2
   1ec74:	0001eec8 	cmpgei	zero,zero,1979
   1ec78:	0001ecd4 	movui	zero,1971
   1ec7c:	0001ecd4 	movui	zero,1971
   1ec80:	0001ecd0 	cmplti	zero,zero,1971
   1ec84:	0001eea4 	muli	zero,zero,1978
   1ec88:	0001eea4 	muli	zero,zero,1978
   1ec8c:	0001ee8c 	andi	zero,zero,1978
   1ec90:	0001ecd0 	cmplti	zero,zero,1971
   1ec94:	0001eea4 	muli	zero,zero,1978
   1ec98:	0001ee8c 	andi	zero,zero,1978
   1ec9c:	0001eea4 	muli	zero,zero,1978
   1eca0:	0001ecd0 	cmplti	zero,zero,1971
   1eca4:	0001eeb4 	movhi	zero,1978
   1eca8:	0001eeb4 	movhi	zero,1978
   1ecac:	0001eeb4 	movhi	zero,1978
   1ecb0:	0001f214 	movui	zero,1992
   1ecb4:	2404b03a 	or	r2,r4,r16
   1ecb8:	1000711e 	bne	r2,zero,1ee80 <__muldf3+0x300>
   1ecbc:	05400204 	movi	r21,8
   1ecc0:	0021883a 	mov	r16,zero
   1ecc4:	002d883a 	mov	r22,zero
   1ecc8:	01400084 	movi	r5,2
   1eccc:	003fcb06 	br	1ebfc <__alt_data_end+0xfc01ebfc>
   1ecd0:	500d883a 	mov	r6,r10
   1ecd4:	00800084 	movi	r2,2
   1ecd8:	38805926 	beq	r7,r2,1ee40 <__muldf3+0x2c0>
   1ecdc:	008000c4 	movi	r2,3
   1ece0:	3881bb26 	beq	r7,r2,1f3d0 <__muldf3+0x850>
   1ece4:	00800044 	movi	r2,1
   1ece8:	3881961e 	bne	r7,r2,1f344 <__muldf3+0x7c4>
   1ecec:	3027883a 	mov	r19,r6
   1ecf0:	0005883a 	mov	r2,zero
   1ecf4:	0021883a 	mov	r16,zero
   1ecf8:	002d883a 	mov	r22,zero
   1ecfc:	1004953a 	slli	r2,r2,20
   1ed00:	98c03fcc 	andi	r3,r19,255
   1ed04:	04400434 	movhi	r17,16
   1ed08:	8c7fffc4 	addi	r17,r17,-1
   1ed0c:	180697fa 	slli	r3,r3,31
   1ed10:	8460703a 	and	r16,r16,r17
   1ed14:	80a0b03a 	or	r16,r16,r2
   1ed18:	80c6b03a 	or	r3,r16,r3
   1ed1c:	b005883a 	mov	r2,r22
   1ed20:	dfc01117 	ldw	ra,68(sp)
   1ed24:	df001017 	ldw	fp,64(sp)
   1ed28:	ddc00f17 	ldw	r23,60(sp)
   1ed2c:	dd800e17 	ldw	r22,56(sp)
   1ed30:	dd400d17 	ldw	r21,52(sp)
   1ed34:	dd000c17 	ldw	r20,48(sp)
   1ed38:	dcc00b17 	ldw	r19,44(sp)
   1ed3c:	dc800a17 	ldw	r18,40(sp)
   1ed40:	dc400917 	ldw	r17,36(sp)
   1ed44:	dc000817 	ldw	r16,32(sp)
   1ed48:	dec01204 	addi	sp,sp,72
   1ed4c:	f800283a 	ret
   1ed50:	2404b03a 	or	r2,r4,r16
   1ed54:	202b883a 	mov	r21,r4
   1ed58:	10004426 	beq	r2,zero,1ee6c <__muldf3+0x2ec>
   1ed5c:	80015126 	beq	r16,zero,1f2a4 <__muldf3+0x724>
   1ed60:	8009883a 	mov	r4,r16
   1ed64:	d9800715 	stw	r6,28(sp)
   1ed68:	d9c00215 	stw	r7,8(sp)
   1ed6c:	da400415 	stw	r9,16(sp)
   1ed70:	000f3780 	call	f378 <__clzsi2>
   1ed74:	d9800717 	ldw	r6,28(sp)
   1ed78:	d9c00217 	ldw	r7,8(sp)
   1ed7c:	da400417 	ldw	r9,16(sp)
   1ed80:	113ffd44 	addi	r4,r2,-11
   1ed84:	00c00704 	movi	r3,28
   1ed88:	19014216 	blt	r3,r4,1f294 <__muldf3+0x714>
   1ed8c:	00c00744 	movi	r3,29
   1ed90:	15bffe04 	addi	r22,r2,-8
   1ed94:	1907c83a 	sub	r3,r3,r4
   1ed98:	85a0983a 	sll	r16,r16,r22
   1ed9c:	a8c6d83a 	srl	r3,r21,r3
   1eda0:	adac983a 	sll	r22,r21,r22
   1eda4:	1c20b03a 	or	r16,r3,r16
   1eda8:	1080fcc4 	addi	r2,r2,1011
   1edac:	00a9c83a 	sub	r20,zero,r2
   1edb0:	002b883a 	mov	r21,zero
   1edb4:	000b883a 	mov	r5,zero
   1edb8:	003f9006 	br	1ebfc <__alt_data_end+0xfc01ebfc>
   1edbc:	3446b03a 	or	r3,r6,r17
   1edc0:	1800281e 	bne	r3,zero,1ee64 <__muldf3+0x2e4>
   1edc4:	0023883a 	mov	r17,zero
   1edc8:	0025883a 	mov	r18,zero
   1edcc:	01c00084 	movi	r7,2
   1edd0:	003f9c06 	br	1ec44 <__alt_data_end+0xfc01ec44>
   1edd4:	3446b03a 	or	r3,r6,r17
   1edd8:	18001e26 	beq	r3,zero,1ee54 <__muldf3+0x2d4>
   1eddc:	88012126 	beq	r17,zero,1f264 <__muldf3+0x6e4>
   1ede0:	8809883a 	mov	r4,r17
   1ede4:	d9400215 	stw	r5,8(sp)
   1ede8:	d9800715 	stw	r6,28(sp)
   1edec:	da400415 	stw	r9,16(sp)
   1edf0:	da800315 	stw	r10,12(sp)
   1edf4:	000f3780 	call	f378 <__clzsi2>
   1edf8:	d9400217 	ldw	r5,8(sp)
   1edfc:	d9800717 	ldw	r6,28(sp)
   1ee00:	da400417 	ldw	r9,16(sp)
   1ee04:	da800317 	ldw	r10,12(sp)
   1ee08:	113ffd44 	addi	r4,r2,-11
   1ee0c:	00c00704 	movi	r3,28
   1ee10:	19011016 	blt	r3,r4,1f254 <__muldf3+0x6d4>
   1ee14:	00c00744 	movi	r3,29
   1ee18:	14bffe04 	addi	r18,r2,-8
   1ee1c:	1907c83a 	sub	r3,r3,r4
   1ee20:	8ca2983a 	sll	r17,r17,r18
   1ee24:	30c6d83a 	srl	r3,r6,r3
   1ee28:	34a4983a 	sll	r18,r6,r18
   1ee2c:	1c62b03a 	or	r17,r3,r17
   1ee30:	1080fcc4 	addi	r2,r2,1011
   1ee34:	0085c83a 	sub	r2,zero,r2
   1ee38:	000f883a 	mov	r7,zero
   1ee3c:	003f8106 	br	1ec44 <__alt_data_end+0xfc01ec44>
   1ee40:	3027883a 	mov	r19,r6
   1ee44:	0081ffc4 	movi	r2,2047
   1ee48:	0021883a 	mov	r16,zero
   1ee4c:	002d883a 	mov	r22,zero
   1ee50:	003faa06 	br	1ecfc <__alt_data_end+0xfc01ecfc>
   1ee54:	0023883a 	mov	r17,zero
   1ee58:	0025883a 	mov	r18,zero
   1ee5c:	01c00044 	movi	r7,1
   1ee60:	003f7806 	br	1ec44 <__alt_data_end+0xfc01ec44>
   1ee64:	01c000c4 	movi	r7,3
   1ee68:	003f7606 	br	1ec44 <__alt_data_end+0xfc01ec44>
   1ee6c:	05400104 	movi	r21,4
   1ee70:	0021883a 	mov	r16,zero
   1ee74:	002d883a 	mov	r22,zero
   1ee78:	01400044 	movi	r5,1
   1ee7c:	003f5f06 	br	1ebfc <__alt_data_end+0xfc01ebfc>
   1ee80:	05400304 	movi	r21,12
   1ee84:	014000c4 	movi	r5,3
   1ee88:	003f5c06 	br	1ebfc <__alt_data_end+0xfc01ebfc>
   1ee8c:	04000434 	movhi	r16,16
   1ee90:	0027883a 	mov	r19,zero
   1ee94:	843fffc4 	addi	r16,r16,-1
   1ee98:	05bfffc4 	movi	r22,-1
   1ee9c:	0081ffc4 	movi	r2,2047
   1eea0:	003f9606 	br	1ecfc <__alt_data_end+0xfc01ecfc>
   1eea4:	8023883a 	mov	r17,r16
   1eea8:	b025883a 	mov	r18,r22
   1eeac:	280f883a 	mov	r7,r5
   1eeb0:	003f8806 	br	1ecd4 <__alt_data_end+0xfc01ecd4>
   1eeb4:	8023883a 	mov	r17,r16
   1eeb8:	b025883a 	mov	r18,r22
   1eebc:	480d883a 	mov	r6,r9
   1eec0:	280f883a 	mov	r7,r5
   1eec4:	003f8306 	br	1ecd4 <__alt_data_end+0xfc01ecd4>
   1eec8:	b026d43a 	srli	r19,r22,16
   1eecc:	902ed43a 	srli	r23,r18,16
   1eed0:	b5bfffcc 	andi	r22,r22,65535
   1eed4:	94bfffcc 	andi	r18,r18,65535
   1eed8:	b00b883a 	mov	r5,r22
   1eedc:	9009883a 	mov	r4,r18
   1eee0:	d8c00515 	stw	r3,20(sp)
   1eee4:	d9800715 	stw	r6,28(sp)
   1eee8:	da000615 	stw	r8,24(sp)
   1eeec:	000d8d40 	call	d8d4 <__mulsi3>
   1eef0:	980b883a 	mov	r5,r19
   1eef4:	9009883a 	mov	r4,r18
   1eef8:	1029883a 	mov	r20,r2
   1eefc:	000d8d40 	call	d8d4 <__mulsi3>
   1ef00:	b80b883a 	mov	r5,r23
   1ef04:	9809883a 	mov	r4,r19
   1ef08:	102b883a 	mov	r21,r2
   1ef0c:	000d8d40 	call	d8d4 <__mulsi3>
   1ef10:	b809883a 	mov	r4,r23
   1ef14:	b00b883a 	mov	r5,r22
   1ef18:	1039883a 	mov	fp,r2
   1ef1c:	000d8d40 	call	d8d4 <__mulsi3>
   1ef20:	a008d43a 	srli	r4,r20,16
   1ef24:	1545883a 	add	r2,r2,r21
   1ef28:	d8c00517 	ldw	r3,20(sp)
   1ef2c:	2085883a 	add	r2,r4,r2
   1ef30:	d9800717 	ldw	r6,28(sp)
   1ef34:	da000617 	ldw	r8,24(sp)
   1ef38:	1540022e 	bgeu	r2,r21,1ef44 <__muldf3+0x3c4>
   1ef3c:	01000074 	movhi	r4,1
   1ef40:	e139883a 	add	fp,fp,r4
   1ef44:	100e943a 	slli	r7,r2,16
   1ef48:	1004d43a 	srli	r2,r2,16
   1ef4c:	882ad43a 	srli	r21,r17,16
   1ef50:	a53fffcc 	andi	r20,r20,65535
   1ef54:	8c7fffcc 	andi	r17,r17,65535
   1ef58:	3d29883a 	add	r20,r7,r20
   1ef5c:	b00b883a 	mov	r5,r22
   1ef60:	8809883a 	mov	r4,r17
   1ef64:	d8c00515 	stw	r3,20(sp)
   1ef68:	d9800715 	stw	r6,28(sp)
   1ef6c:	da000615 	stw	r8,24(sp)
   1ef70:	dd000115 	stw	r20,4(sp)
   1ef74:	d8800015 	stw	r2,0(sp)
   1ef78:	000d8d40 	call	d8d4 <__mulsi3>
   1ef7c:	980b883a 	mov	r5,r19
   1ef80:	8809883a 	mov	r4,r17
   1ef84:	d8800215 	stw	r2,8(sp)
   1ef88:	000d8d40 	call	d8d4 <__mulsi3>
   1ef8c:	9809883a 	mov	r4,r19
   1ef90:	a80b883a 	mov	r5,r21
   1ef94:	1029883a 	mov	r20,r2
   1ef98:	000d8d40 	call	d8d4 <__mulsi3>
   1ef9c:	b00b883a 	mov	r5,r22
   1efa0:	a809883a 	mov	r4,r21
   1efa4:	d8800415 	stw	r2,16(sp)
   1efa8:	000d8d40 	call	d8d4 <__mulsi3>
   1efac:	d9c00217 	ldw	r7,8(sp)
   1efb0:	1505883a 	add	r2,r2,r20
   1efb4:	d8c00517 	ldw	r3,20(sp)
   1efb8:	3826d43a 	srli	r19,r7,16
   1efbc:	d9800717 	ldw	r6,28(sp)
   1efc0:	da000617 	ldw	r8,24(sp)
   1efc4:	9885883a 	add	r2,r19,r2
   1efc8:	da400417 	ldw	r9,16(sp)
   1efcc:	1500022e 	bgeu	r2,r20,1efd8 <__muldf3+0x458>
   1efd0:	01000074 	movhi	r4,1
   1efd4:	4913883a 	add	r9,r9,r4
   1efd8:	1028d43a 	srli	r20,r2,16
   1efdc:	1004943a 	slli	r2,r2,16
   1efe0:	802cd43a 	srli	r22,r16,16
   1efe4:	843fffcc 	andi	r16,r16,65535
   1efe8:	3cffffcc 	andi	r19,r7,65535
   1efec:	9009883a 	mov	r4,r18
   1eff0:	800b883a 	mov	r5,r16
   1eff4:	a269883a 	add	r20,r20,r9
   1eff8:	d8c00515 	stw	r3,20(sp)
   1effc:	d9800715 	stw	r6,28(sp)
   1f000:	da000615 	stw	r8,24(sp)
   1f004:	14e7883a 	add	r19,r2,r19
   1f008:	000d8d40 	call	d8d4 <__mulsi3>
   1f00c:	9009883a 	mov	r4,r18
   1f010:	b00b883a 	mov	r5,r22
   1f014:	d8800315 	stw	r2,12(sp)
   1f018:	000d8d40 	call	d8d4 <__mulsi3>
   1f01c:	b809883a 	mov	r4,r23
   1f020:	b00b883a 	mov	r5,r22
   1f024:	d8800215 	stw	r2,8(sp)
   1f028:	000d8d40 	call	d8d4 <__mulsi3>
   1f02c:	b80b883a 	mov	r5,r23
   1f030:	8009883a 	mov	r4,r16
   1f034:	d8800415 	stw	r2,16(sp)
   1f038:	000d8d40 	call	d8d4 <__mulsi3>
   1f03c:	da800317 	ldw	r10,12(sp)
   1f040:	d9c00217 	ldw	r7,8(sp)
   1f044:	d9000017 	ldw	r4,0(sp)
   1f048:	502ed43a 	srli	r23,r10,16
   1f04c:	11c5883a 	add	r2,r2,r7
   1f050:	24e5883a 	add	r18,r4,r19
   1f054:	b885883a 	add	r2,r23,r2
   1f058:	d8c00517 	ldw	r3,20(sp)
   1f05c:	d9800717 	ldw	r6,28(sp)
   1f060:	da000617 	ldw	r8,24(sp)
   1f064:	da400417 	ldw	r9,16(sp)
   1f068:	11c0022e 	bgeu	r2,r7,1f074 <__muldf3+0x4f4>
   1f06c:	01000074 	movhi	r4,1
   1f070:	4913883a 	add	r9,r9,r4
   1f074:	100ed43a 	srli	r7,r2,16
   1f078:	1004943a 	slli	r2,r2,16
   1f07c:	55ffffcc 	andi	r23,r10,65535
   1f080:	3a53883a 	add	r9,r7,r9
   1f084:	8809883a 	mov	r4,r17
   1f088:	800b883a 	mov	r5,r16
   1f08c:	d8c00515 	stw	r3,20(sp)
   1f090:	d9800715 	stw	r6,28(sp)
   1f094:	da000615 	stw	r8,24(sp)
   1f098:	da400415 	stw	r9,16(sp)
   1f09c:	15ef883a 	add	r23,r2,r23
   1f0a0:	000d8d40 	call	d8d4 <__mulsi3>
   1f0a4:	8809883a 	mov	r4,r17
   1f0a8:	b00b883a 	mov	r5,r22
   1f0ac:	d8800215 	stw	r2,8(sp)
   1f0b0:	000d8d40 	call	d8d4 <__mulsi3>
   1f0b4:	b00b883a 	mov	r5,r22
   1f0b8:	a809883a 	mov	r4,r21
   1f0bc:	d8800315 	stw	r2,12(sp)
   1f0c0:	000d8d40 	call	d8d4 <__mulsi3>
   1f0c4:	8009883a 	mov	r4,r16
   1f0c8:	a80b883a 	mov	r5,r21
   1f0cc:	1023883a 	mov	r17,r2
   1f0d0:	000d8d40 	call	d8d4 <__mulsi3>
   1f0d4:	d9c00217 	ldw	r7,8(sp)
   1f0d8:	da800317 	ldw	r10,12(sp)
   1f0dc:	d8c00517 	ldw	r3,20(sp)
   1f0e0:	3808d43a 	srli	r4,r7,16
   1f0e4:	1285883a 	add	r2,r2,r10
   1f0e8:	d9800717 	ldw	r6,28(sp)
   1f0ec:	2085883a 	add	r2,r4,r2
   1f0f0:	da000617 	ldw	r8,24(sp)
   1f0f4:	da400417 	ldw	r9,16(sp)
   1f0f8:	1280022e 	bgeu	r2,r10,1f104 <__muldf3+0x584>
   1f0fc:	01000074 	movhi	r4,1
   1f100:	8923883a 	add	r17,r17,r4
   1f104:	1008943a 	slli	r4,r2,16
   1f108:	39ffffcc 	andi	r7,r7,65535
   1f10c:	e4b9883a 	add	fp,fp,r18
   1f110:	21cf883a 	add	r7,r4,r7
   1f114:	e4e7803a 	cmpltu	r19,fp,r19
   1f118:	3d0f883a 	add	r7,r7,r20
   1f11c:	bf39883a 	add	fp,r23,fp
   1f120:	99c9883a 	add	r4,r19,r7
   1f124:	e5ef803a 	cmpltu	r23,fp,r23
   1f128:	490b883a 	add	r5,r9,r4
   1f12c:	1004d43a 	srli	r2,r2,16
   1f130:	b965883a 	add	r18,r23,r5
   1f134:	24c9803a 	cmpltu	r4,r4,r19
   1f138:	3d29803a 	cmpltu	r20,r7,r20
   1f13c:	a128b03a 	or	r20,r20,r4
   1f140:	95ef803a 	cmpltu	r23,r18,r23
   1f144:	2a53803a 	cmpltu	r9,r5,r9
   1f148:	a0a9883a 	add	r20,r20,r2
   1f14c:	4deeb03a 	or	r23,r9,r23
   1f150:	a5ef883a 	add	r23,r20,r23
   1f154:	bc63883a 	add	r17,r23,r17
   1f158:	e004927a 	slli	r2,fp,9
   1f15c:	d9000117 	ldw	r4,4(sp)
   1f160:	882e927a 	slli	r23,r17,9
   1f164:	9022d5fa 	srli	r17,r18,23
   1f168:	e038d5fa 	srli	fp,fp,23
   1f16c:	1104b03a 	or	r2,r2,r4
   1f170:	9024927a 	slli	r18,r18,9
   1f174:	1004c03a 	cmpne	r2,r2,zero
   1f178:	bc62b03a 	or	r17,r23,r17
   1f17c:	1738b03a 	or	fp,r2,fp
   1f180:	8880402c 	andhi	r2,r17,256
   1f184:	e4a4b03a 	or	r18,fp,r18
   1f188:	10000726 	beq	r2,zero,1f1a8 <__muldf3+0x628>
   1f18c:	9006d07a 	srli	r3,r18,1
   1f190:	880497fa 	slli	r2,r17,31
   1f194:	9480004c 	andi	r18,r18,1
   1f198:	8822d07a 	srli	r17,r17,1
   1f19c:	1ca4b03a 	or	r18,r3,r18
   1f1a0:	14a4b03a 	or	r18,r2,r18
   1f1a4:	4007883a 	mov	r3,r8
   1f1a8:	1880ffc4 	addi	r2,r3,1023
   1f1ac:	0080460e 	bge	zero,r2,1f2c8 <__muldf3+0x748>
   1f1b0:	910001cc 	andi	r4,r18,7
   1f1b4:	20000726 	beq	r4,zero,1f1d4 <__muldf3+0x654>
   1f1b8:	910003cc 	andi	r4,r18,15
   1f1bc:	01400104 	movi	r5,4
   1f1c0:	21400426 	beq	r4,r5,1f1d4 <__muldf3+0x654>
   1f1c4:	9149883a 	add	r4,r18,r5
   1f1c8:	24a5803a 	cmpltu	r18,r4,r18
   1f1cc:	8ca3883a 	add	r17,r17,r18
   1f1d0:	2025883a 	mov	r18,r4
   1f1d4:	8900402c 	andhi	r4,r17,256
   1f1d8:	20000426 	beq	r4,zero,1f1ec <__muldf3+0x66c>
   1f1dc:	18810004 	addi	r2,r3,1024
   1f1e0:	00ffc034 	movhi	r3,65280
   1f1e4:	18ffffc4 	addi	r3,r3,-1
   1f1e8:	88e2703a 	and	r17,r17,r3
   1f1ec:	00c1ff84 	movi	r3,2046
   1f1f0:	18bf1316 	blt	r3,r2,1ee40 <__alt_data_end+0xfc01ee40>
   1f1f4:	882c977a 	slli	r22,r17,29
   1f1f8:	9024d0fa 	srli	r18,r18,3
   1f1fc:	8822927a 	slli	r17,r17,9
   1f200:	1081ffcc 	andi	r2,r2,2047
   1f204:	b4acb03a 	or	r22,r22,r18
   1f208:	8820d33a 	srli	r16,r17,12
   1f20c:	3027883a 	mov	r19,r6
   1f210:	003eba06 	br	1ecfc <__alt_data_end+0xfc01ecfc>
   1f214:	8080022c 	andhi	r2,r16,8
   1f218:	10000926 	beq	r2,zero,1f240 <__muldf3+0x6c0>
   1f21c:	8880022c 	andhi	r2,r17,8
   1f220:	1000071e 	bne	r2,zero,1f240 <__muldf3+0x6c0>
   1f224:	00800434 	movhi	r2,16
   1f228:	8c000234 	orhi	r16,r17,8
   1f22c:	10bfffc4 	addi	r2,r2,-1
   1f230:	e027883a 	mov	r19,fp
   1f234:	80a0703a 	and	r16,r16,r2
   1f238:	902d883a 	mov	r22,r18
   1f23c:	003f1706 	br	1ee9c <__alt_data_end+0xfc01ee9c>
   1f240:	00800434 	movhi	r2,16
   1f244:	84000234 	orhi	r16,r16,8
   1f248:	10bfffc4 	addi	r2,r2,-1
   1f24c:	80a0703a 	and	r16,r16,r2
   1f250:	003f1206 	br	1ee9c <__alt_data_end+0xfc01ee9c>
   1f254:	147ff604 	addi	r17,r2,-40
   1f258:	3462983a 	sll	r17,r6,r17
   1f25c:	0025883a 	mov	r18,zero
   1f260:	003ef306 	br	1ee30 <__alt_data_end+0xfc01ee30>
   1f264:	3009883a 	mov	r4,r6
   1f268:	d9400215 	stw	r5,8(sp)
   1f26c:	d9800715 	stw	r6,28(sp)
   1f270:	da400415 	stw	r9,16(sp)
   1f274:	da800315 	stw	r10,12(sp)
   1f278:	000f3780 	call	f378 <__clzsi2>
   1f27c:	10800804 	addi	r2,r2,32
   1f280:	da800317 	ldw	r10,12(sp)
   1f284:	da400417 	ldw	r9,16(sp)
   1f288:	d9800717 	ldw	r6,28(sp)
   1f28c:	d9400217 	ldw	r5,8(sp)
   1f290:	003edd06 	br	1ee08 <__alt_data_end+0xfc01ee08>
   1f294:	143ff604 	addi	r16,r2,-40
   1f298:	ac20983a 	sll	r16,r21,r16
   1f29c:	002d883a 	mov	r22,zero
   1f2a0:	003ec106 	br	1eda8 <__alt_data_end+0xfc01eda8>
   1f2a4:	d9800715 	stw	r6,28(sp)
   1f2a8:	d9c00215 	stw	r7,8(sp)
   1f2ac:	da400415 	stw	r9,16(sp)
   1f2b0:	000f3780 	call	f378 <__clzsi2>
   1f2b4:	10800804 	addi	r2,r2,32
   1f2b8:	da400417 	ldw	r9,16(sp)
   1f2bc:	d9c00217 	ldw	r7,8(sp)
   1f2c0:	d9800717 	ldw	r6,28(sp)
   1f2c4:	003eae06 	br	1ed80 <__alt_data_end+0xfc01ed80>
   1f2c8:	00c00044 	movi	r3,1
   1f2cc:	1887c83a 	sub	r3,r3,r2
   1f2d0:	01000e04 	movi	r4,56
   1f2d4:	20fe8516 	blt	r4,r3,1ecec <__alt_data_end+0xfc01ecec>
   1f2d8:	010007c4 	movi	r4,31
   1f2dc:	20c01b16 	blt	r4,r3,1f34c <__muldf3+0x7cc>
   1f2e0:	00800804 	movi	r2,32
   1f2e4:	10c5c83a 	sub	r2,r2,r3
   1f2e8:	888a983a 	sll	r5,r17,r2
   1f2ec:	90c8d83a 	srl	r4,r18,r3
   1f2f0:	9084983a 	sll	r2,r18,r2
   1f2f4:	88e2d83a 	srl	r17,r17,r3
   1f2f8:	2906b03a 	or	r3,r5,r4
   1f2fc:	1004c03a 	cmpne	r2,r2,zero
   1f300:	1886b03a 	or	r3,r3,r2
   1f304:	188001cc 	andi	r2,r3,7
   1f308:	10000726 	beq	r2,zero,1f328 <__muldf3+0x7a8>
   1f30c:	188003cc 	andi	r2,r3,15
   1f310:	01000104 	movi	r4,4
   1f314:	11000426 	beq	r2,r4,1f328 <__muldf3+0x7a8>
   1f318:	1805883a 	mov	r2,r3
   1f31c:	10c00104 	addi	r3,r2,4
   1f320:	1885803a 	cmpltu	r2,r3,r2
   1f324:	88a3883a 	add	r17,r17,r2
   1f328:	8880202c 	andhi	r2,r17,128
   1f32c:	10001c26 	beq	r2,zero,1f3a0 <__muldf3+0x820>
   1f330:	3027883a 	mov	r19,r6
   1f334:	00800044 	movi	r2,1
   1f338:	0021883a 	mov	r16,zero
   1f33c:	002d883a 	mov	r22,zero
   1f340:	003e6e06 	br	1ecfc <__alt_data_end+0xfc01ecfc>
   1f344:	4007883a 	mov	r3,r8
   1f348:	003f9706 	br	1f1a8 <__alt_data_end+0xfc01f1a8>
   1f34c:	017ff844 	movi	r5,-31
   1f350:	2885c83a 	sub	r2,r5,r2
   1f354:	888ad83a 	srl	r5,r17,r2
   1f358:	00800804 	movi	r2,32
   1f35c:	18801a26 	beq	r3,r2,1f3c8 <__muldf3+0x848>
   1f360:	01001004 	movi	r4,64
   1f364:	20c7c83a 	sub	r3,r4,r3
   1f368:	88e2983a 	sll	r17,r17,r3
   1f36c:	8ca4b03a 	or	r18,r17,r18
   1f370:	9004c03a 	cmpne	r2,r18,zero
   1f374:	2884b03a 	or	r2,r5,r2
   1f378:	144001cc 	andi	r17,r2,7
   1f37c:	88000d1e 	bne	r17,zero,1f3b4 <__muldf3+0x834>
   1f380:	0021883a 	mov	r16,zero
   1f384:	102cd0fa 	srli	r22,r2,3
   1f388:	3027883a 	mov	r19,r6
   1f38c:	0005883a 	mov	r2,zero
   1f390:	b46cb03a 	or	r22,r22,r17
   1f394:	003e5906 	br	1ecfc <__alt_data_end+0xfc01ecfc>
   1f398:	1007883a 	mov	r3,r2
   1f39c:	0023883a 	mov	r17,zero
   1f3a0:	8820927a 	slli	r16,r17,9
   1f3a4:	1805883a 	mov	r2,r3
   1f3a8:	8822977a 	slli	r17,r17,29
   1f3ac:	8020d33a 	srli	r16,r16,12
   1f3b0:	003ff406 	br	1f384 <__alt_data_end+0xfc01f384>
   1f3b4:	10c003cc 	andi	r3,r2,15
   1f3b8:	01000104 	movi	r4,4
   1f3bc:	193ff626 	beq	r3,r4,1f398 <__alt_data_end+0xfc01f398>
   1f3c0:	0023883a 	mov	r17,zero
   1f3c4:	003fd506 	br	1f31c <__alt_data_end+0xfc01f31c>
   1f3c8:	0023883a 	mov	r17,zero
   1f3cc:	003fe706 	br	1f36c <__alt_data_end+0xfc01f36c>
   1f3d0:	00800434 	movhi	r2,16
   1f3d4:	8c000234 	orhi	r16,r17,8
   1f3d8:	10bfffc4 	addi	r2,r2,-1
   1f3dc:	3027883a 	mov	r19,r6
   1f3e0:	80a0703a 	and	r16,r16,r2
   1f3e4:	902d883a 	mov	r22,r18
   1f3e8:	003eac06 	br	1ee9c <__alt_data_end+0xfc01ee9c>

0001f3ec <__subdf3>:
   1f3ec:	02000434 	movhi	r8,16
   1f3f0:	423fffc4 	addi	r8,r8,-1
   1f3f4:	defffb04 	addi	sp,sp,-20
   1f3f8:	2a14703a 	and	r10,r5,r8
   1f3fc:	3812d53a 	srli	r9,r7,20
   1f400:	3a10703a 	and	r8,r7,r8
   1f404:	2006d77a 	srli	r3,r4,29
   1f408:	3004d77a 	srli	r2,r6,29
   1f40c:	dc000015 	stw	r16,0(sp)
   1f410:	501490fa 	slli	r10,r10,3
   1f414:	2820d53a 	srli	r16,r5,20
   1f418:	401090fa 	slli	r8,r8,3
   1f41c:	dc800215 	stw	r18,8(sp)
   1f420:	dc400115 	stw	r17,4(sp)
   1f424:	dfc00415 	stw	ra,16(sp)
   1f428:	202290fa 	slli	r17,r4,3
   1f42c:	dcc00315 	stw	r19,12(sp)
   1f430:	4a41ffcc 	andi	r9,r9,2047
   1f434:	0101ffc4 	movi	r4,2047
   1f438:	2824d7fa 	srli	r18,r5,31
   1f43c:	8401ffcc 	andi	r16,r16,2047
   1f440:	50c6b03a 	or	r3,r10,r3
   1f444:	380ed7fa 	srli	r7,r7,31
   1f448:	408ab03a 	or	r5,r8,r2
   1f44c:	300c90fa 	slli	r6,r6,3
   1f450:	49009626 	beq	r9,r4,1f6ac <__subdf3+0x2c0>
   1f454:	39c0005c 	xori	r7,r7,1
   1f458:	8245c83a 	sub	r2,r16,r9
   1f45c:	3c807426 	beq	r7,r18,1f630 <__subdf3+0x244>
   1f460:	0080af0e 	bge	zero,r2,1f720 <__subdf3+0x334>
   1f464:	48002a1e 	bne	r9,zero,1f510 <__subdf3+0x124>
   1f468:	2988b03a 	or	r4,r5,r6
   1f46c:	20009a1e 	bne	r4,zero,1f6d8 <__subdf3+0x2ec>
   1f470:	888001cc 	andi	r2,r17,7
   1f474:	10000726 	beq	r2,zero,1f494 <__subdf3+0xa8>
   1f478:	888003cc 	andi	r2,r17,15
   1f47c:	01000104 	movi	r4,4
   1f480:	11000426 	beq	r2,r4,1f494 <__subdf3+0xa8>
   1f484:	890b883a 	add	r5,r17,r4
   1f488:	2c63803a 	cmpltu	r17,r5,r17
   1f48c:	1c47883a 	add	r3,r3,r17
   1f490:	2823883a 	mov	r17,r5
   1f494:	1880202c 	andhi	r2,r3,128
   1f498:	10005926 	beq	r2,zero,1f600 <__subdf3+0x214>
   1f49c:	84000044 	addi	r16,r16,1
   1f4a0:	0081ffc4 	movi	r2,2047
   1f4a4:	8080be26 	beq	r16,r2,1f7a0 <__subdf3+0x3b4>
   1f4a8:	017fe034 	movhi	r5,65408
   1f4ac:	297fffc4 	addi	r5,r5,-1
   1f4b0:	1946703a 	and	r3,r3,r5
   1f4b4:	1804977a 	slli	r2,r3,29
   1f4b8:	1806927a 	slli	r3,r3,9
   1f4bc:	8822d0fa 	srli	r17,r17,3
   1f4c0:	8401ffcc 	andi	r16,r16,2047
   1f4c4:	180ad33a 	srli	r5,r3,12
   1f4c8:	9100004c 	andi	r4,r18,1
   1f4cc:	1444b03a 	or	r2,r2,r17
   1f4d0:	80c1ffcc 	andi	r3,r16,2047
   1f4d4:	1820953a 	slli	r16,r3,20
   1f4d8:	20c03fcc 	andi	r3,r4,255
   1f4dc:	180897fa 	slli	r4,r3,31
   1f4e0:	00c00434 	movhi	r3,16
   1f4e4:	18ffffc4 	addi	r3,r3,-1
   1f4e8:	28c6703a 	and	r3,r5,r3
   1f4ec:	1c06b03a 	or	r3,r3,r16
   1f4f0:	1906b03a 	or	r3,r3,r4
   1f4f4:	dfc00417 	ldw	ra,16(sp)
   1f4f8:	dcc00317 	ldw	r19,12(sp)
   1f4fc:	dc800217 	ldw	r18,8(sp)
   1f500:	dc400117 	ldw	r17,4(sp)
   1f504:	dc000017 	ldw	r16,0(sp)
   1f508:	dec00504 	addi	sp,sp,20
   1f50c:	f800283a 	ret
   1f510:	0101ffc4 	movi	r4,2047
   1f514:	813fd626 	beq	r16,r4,1f470 <__alt_data_end+0xfc01f470>
   1f518:	29402034 	orhi	r5,r5,128
   1f51c:	01000e04 	movi	r4,56
   1f520:	2080a316 	blt	r4,r2,1f7b0 <__subdf3+0x3c4>
   1f524:	010007c4 	movi	r4,31
   1f528:	2080c616 	blt	r4,r2,1f844 <__subdf3+0x458>
   1f52c:	01000804 	movi	r4,32
   1f530:	2089c83a 	sub	r4,r4,r2
   1f534:	2910983a 	sll	r8,r5,r4
   1f538:	308ed83a 	srl	r7,r6,r2
   1f53c:	3108983a 	sll	r4,r6,r4
   1f540:	2884d83a 	srl	r2,r5,r2
   1f544:	41ccb03a 	or	r6,r8,r7
   1f548:	2008c03a 	cmpne	r4,r4,zero
   1f54c:	310cb03a 	or	r6,r6,r4
   1f550:	898dc83a 	sub	r6,r17,r6
   1f554:	89a3803a 	cmpltu	r17,r17,r6
   1f558:	1887c83a 	sub	r3,r3,r2
   1f55c:	1c47c83a 	sub	r3,r3,r17
   1f560:	3023883a 	mov	r17,r6
   1f564:	1880202c 	andhi	r2,r3,128
   1f568:	10002326 	beq	r2,zero,1f5f8 <__subdf3+0x20c>
   1f56c:	04c02034 	movhi	r19,128
   1f570:	9cffffc4 	addi	r19,r19,-1
   1f574:	1ce6703a 	and	r19,r3,r19
   1f578:	98007a26 	beq	r19,zero,1f764 <__subdf3+0x378>
   1f57c:	9809883a 	mov	r4,r19
   1f580:	000f3780 	call	f378 <__clzsi2>
   1f584:	113ffe04 	addi	r4,r2,-8
   1f588:	00c007c4 	movi	r3,31
   1f58c:	19007b16 	blt	r3,r4,1f77c <__subdf3+0x390>
   1f590:	00800804 	movi	r2,32
   1f594:	1105c83a 	sub	r2,r2,r4
   1f598:	8884d83a 	srl	r2,r17,r2
   1f59c:	9906983a 	sll	r3,r19,r4
   1f5a0:	8922983a 	sll	r17,r17,r4
   1f5a4:	10c4b03a 	or	r2,r2,r3
   1f5a8:	24007816 	blt	r4,r16,1f78c <__subdf3+0x3a0>
   1f5ac:	2421c83a 	sub	r16,r4,r16
   1f5b0:	80c00044 	addi	r3,r16,1
   1f5b4:	010007c4 	movi	r4,31
   1f5b8:	20c09516 	blt	r4,r3,1f810 <__subdf3+0x424>
   1f5bc:	01400804 	movi	r5,32
   1f5c0:	28cbc83a 	sub	r5,r5,r3
   1f5c4:	88c8d83a 	srl	r4,r17,r3
   1f5c8:	8962983a 	sll	r17,r17,r5
   1f5cc:	114a983a 	sll	r5,r2,r5
   1f5d0:	10c6d83a 	srl	r3,r2,r3
   1f5d4:	8804c03a 	cmpne	r2,r17,zero
   1f5d8:	290ab03a 	or	r5,r5,r4
   1f5dc:	28a2b03a 	or	r17,r5,r2
   1f5e0:	0021883a 	mov	r16,zero
   1f5e4:	003fa206 	br	1f470 <__alt_data_end+0xfc01f470>
   1f5e8:	2090b03a 	or	r8,r4,r2
   1f5ec:	40018e26 	beq	r8,zero,1fc28 <__subdf3+0x83c>
   1f5f0:	1007883a 	mov	r3,r2
   1f5f4:	2023883a 	mov	r17,r4
   1f5f8:	888001cc 	andi	r2,r17,7
   1f5fc:	103f9e1e 	bne	r2,zero,1f478 <__alt_data_end+0xfc01f478>
   1f600:	1804977a 	slli	r2,r3,29
   1f604:	8822d0fa 	srli	r17,r17,3
   1f608:	1810d0fa 	srli	r8,r3,3
   1f60c:	9100004c 	andi	r4,r18,1
   1f610:	1444b03a 	or	r2,r2,r17
   1f614:	00c1ffc4 	movi	r3,2047
   1f618:	80c02826 	beq	r16,r3,1f6bc <__subdf3+0x2d0>
   1f61c:	01400434 	movhi	r5,16
   1f620:	297fffc4 	addi	r5,r5,-1
   1f624:	80e0703a 	and	r16,r16,r3
   1f628:	414a703a 	and	r5,r8,r5
   1f62c:	003fa806 	br	1f4d0 <__alt_data_end+0xfc01f4d0>
   1f630:	0080630e 	bge	zero,r2,1f7c0 <__subdf3+0x3d4>
   1f634:	48003026 	beq	r9,zero,1f6f8 <__subdf3+0x30c>
   1f638:	0101ffc4 	movi	r4,2047
   1f63c:	813f8c26 	beq	r16,r4,1f470 <__alt_data_end+0xfc01f470>
   1f640:	29402034 	orhi	r5,r5,128
   1f644:	01000e04 	movi	r4,56
   1f648:	2080a90e 	bge	r4,r2,1f8f0 <__subdf3+0x504>
   1f64c:	298cb03a 	or	r6,r5,r6
   1f650:	3012c03a 	cmpne	r9,r6,zero
   1f654:	0005883a 	mov	r2,zero
   1f658:	4c53883a 	add	r9,r9,r17
   1f65c:	4c63803a 	cmpltu	r17,r9,r17
   1f660:	10c7883a 	add	r3,r2,r3
   1f664:	88c7883a 	add	r3,r17,r3
   1f668:	4823883a 	mov	r17,r9
   1f66c:	1880202c 	andhi	r2,r3,128
   1f670:	1000d026 	beq	r2,zero,1f9b4 <__subdf3+0x5c8>
   1f674:	84000044 	addi	r16,r16,1
   1f678:	0081ffc4 	movi	r2,2047
   1f67c:	8080fe26 	beq	r16,r2,1fa78 <__subdf3+0x68c>
   1f680:	00bfe034 	movhi	r2,65408
   1f684:	10bfffc4 	addi	r2,r2,-1
   1f688:	1886703a 	and	r3,r3,r2
   1f68c:	880ad07a 	srli	r5,r17,1
   1f690:	180497fa 	slli	r2,r3,31
   1f694:	8900004c 	andi	r4,r17,1
   1f698:	2922b03a 	or	r17,r5,r4
   1f69c:	1806d07a 	srli	r3,r3,1
   1f6a0:	1462b03a 	or	r17,r2,r17
   1f6a4:	3825883a 	mov	r18,r7
   1f6a8:	003f7106 	br	1f470 <__alt_data_end+0xfc01f470>
   1f6ac:	2984b03a 	or	r2,r5,r6
   1f6b0:	103f6826 	beq	r2,zero,1f454 <__alt_data_end+0xfc01f454>
   1f6b4:	39c03fcc 	andi	r7,r7,255
   1f6b8:	003f6706 	br	1f458 <__alt_data_end+0xfc01f458>
   1f6bc:	4086b03a 	or	r3,r8,r2
   1f6c0:	18015226 	beq	r3,zero,1fc0c <__subdf3+0x820>
   1f6c4:	00c00434 	movhi	r3,16
   1f6c8:	41400234 	orhi	r5,r8,8
   1f6cc:	18ffffc4 	addi	r3,r3,-1
   1f6d0:	28ca703a 	and	r5,r5,r3
   1f6d4:	003f7e06 	br	1f4d0 <__alt_data_end+0xfc01f4d0>
   1f6d8:	10bfffc4 	addi	r2,r2,-1
   1f6dc:	1000491e 	bne	r2,zero,1f804 <__subdf3+0x418>
   1f6e0:	898fc83a 	sub	r7,r17,r6
   1f6e4:	89e3803a 	cmpltu	r17,r17,r7
   1f6e8:	1947c83a 	sub	r3,r3,r5
   1f6ec:	1c47c83a 	sub	r3,r3,r17
   1f6f0:	3823883a 	mov	r17,r7
   1f6f4:	003f9b06 	br	1f564 <__alt_data_end+0xfc01f564>
   1f6f8:	2988b03a 	or	r4,r5,r6
   1f6fc:	203f5c26 	beq	r4,zero,1f470 <__alt_data_end+0xfc01f470>
   1f700:	10bfffc4 	addi	r2,r2,-1
   1f704:	1000931e 	bne	r2,zero,1f954 <__subdf3+0x568>
   1f708:	898d883a 	add	r6,r17,r6
   1f70c:	3463803a 	cmpltu	r17,r6,r17
   1f710:	1947883a 	add	r3,r3,r5
   1f714:	88c7883a 	add	r3,r17,r3
   1f718:	3023883a 	mov	r17,r6
   1f71c:	003fd306 	br	1f66c <__alt_data_end+0xfc01f66c>
   1f720:	1000541e 	bne	r2,zero,1f874 <__subdf3+0x488>
   1f724:	80800044 	addi	r2,r16,1
   1f728:	1081ffcc 	andi	r2,r2,2047
   1f72c:	01000044 	movi	r4,1
   1f730:	2080a20e 	bge	r4,r2,1f9bc <__subdf3+0x5d0>
   1f734:	8989c83a 	sub	r4,r17,r6
   1f738:	8905803a 	cmpltu	r2,r17,r4
   1f73c:	1967c83a 	sub	r19,r3,r5
   1f740:	98a7c83a 	sub	r19,r19,r2
   1f744:	9880202c 	andhi	r2,r19,128
   1f748:	10006326 	beq	r2,zero,1f8d8 <__subdf3+0x4ec>
   1f74c:	3463c83a 	sub	r17,r6,r17
   1f750:	28c7c83a 	sub	r3,r5,r3
   1f754:	344d803a 	cmpltu	r6,r6,r17
   1f758:	19a7c83a 	sub	r19,r3,r6
   1f75c:	3825883a 	mov	r18,r7
   1f760:	983f861e 	bne	r19,zero,1f57c <__alt_data_end+0xfc01f57c>
   1f764:	8809883a 	mov	r4,r17
   1f768:	000f3780 	call	f378 <__clzsi2>
   1f76c:	10800804 	addi	r2,r2,32
   1f770:	113ffe04 	addi	r4,r2,-8
   1f774:	00c007c4 	movi	r3,31
   1f778:	193f850e 	bge	r3,r4,1f590 <__alt_data_end+0xfc01f590>
   1f77c:	10bff604 	addi	r2,r2,-40
   1f780:	8884983a 	sll	r2,r17,r2
   1f784:	0023883a 	mov	r17,zero
   1f788:	243f880e 	bge	r4,r16,1f5ac <__alt_data_end+0xfc01f5ac>
   1f78c:	00ffe034 	movhi	r3,65408
   1f790:	18ffffc4 	addi	r3,r3,-1
   1f794:	8121c83a 	sub	r16,r16,r4
   1f798:	10c6703a 	and	r3,r2,r3
   1f79c:	003f3406 	br	1f470 <__alt_data_end+0xfc01f470>
   1f7a0:	9100004c 	andi	r4,r18,1
   1f7a4:	000b883a 	mov	r5,zero
   1f7a8:	0005883a 	mov	r2,zero
   1f7ac:	003f4806 	br	1f4d0 <__alt_data_end+0xfc01f4d0>
   1f7b0:	298cb03a 	or	r6,r5,r6
   1f7b4:	300cc03a 	cmpne	r6,r6,zero
   1f7b8:	0005883a 	mov	r2,zero
   1f7bc:	003f6406 	br	1f550 <__alt_data_end+0xfc01f550>
   1f7c0:	10009a1e 	bne	r2,zero,1fa2c <__subdf3+0x640>
   1f7c4:	82400044 	addi	r9,r16,1
   1f7c8:	4881ffcc 	andi	r2,r9,2047
   1f7cc:	02800044 	movi	r10,1
   1f7d0:	5080670e 	bge	r10,r2,1f970 <__subdf3+0x584>
   1f7d4:	0081ffc4 	movi	r2,2047
   1f7d8:	4880af26 	beq	r9,r2,1fa98 <__subdf3+0x6ac>
   1f7dc:	898d883a 	add	r6,r17,r6
   1f7e0:	1945883a 	add	r2,r3,r5
   1f7e4:	3447803a 	cmpltu	r3,r6,r17
   1f7e8:	1887883a 	add	r3,r3,r2
   1f7ec:	182297fa 	slli	r17,r3,31
   1f7f0:	300cd07a 	srli	r6,r6,1
   1f7f4:	1806d07a 	srli	r3,r3,1
   1f7f8:	4821883a 	mov	r16,r9
   1f7fc:	89a2b03a 	or	r17,r17,r6
   1f800:	003f1b06 	br	1f470 <__alt_data_end+0xfc01f470>
   1f804:	0101ffc4 	movi	r4,2047
   1f808:	813f441e 	bne	r16,r4,1f51c <__alt_data_end+0xfc01f51c>
   1f80c:	003f1806 	br	1f470 <__alt_data_end+0xfc01f470>
   1f810:	843ff844 	addi	r16,r16,-31
   1f814:	01400804 	movi	r5,32
   1f818:	1408d83a 	srl	r4,r2,r16
   1f81c:	19405026 	beq	r3,r5,1f960 <__subdf3+0x574>
   1f820:	01401004 	movi	r5,64
   1f824:	28c7c83a 	sub	r3,r5,r3
   1f828:	10c4983a 	sll	r2,r2,r3
   1f82c:	88a2b03a 	or	r17,r17,r2
   1f830:	8822c03a 	cmpne	r17,r17,zero
   1f834:	2462b03a 	or	r17,r4,r17
   1f838:	0007883a 	mov	r3,zero
   1f83c:	0021883a 	mov	r16,zero
   1f840:	003f6d06 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1f844:	11fff804 	addi	r7,r2,-32
   1f848:	01000804 	movi	r4,32
   1f84c:	29ced83a 	srl	r7,r5,r7
   1f850:	11004526 	beq	r2,r4,1f968 <__subdf3+0x57c>
   1f854:	01001004 	movi	r4,64
   1f858:	2089c83a 	sub	r4,r4,r2
   1f85c:	2904983a 	sll	r2,r5,r4
   1f860:	118cb03a 	or	r6,r2,r6
   1f864:	300cc03a 	cmpne	r6,r6,zero
   1f868:	398cb03a 	or	r6,r7,r6
   1f86c:	0005883a 	mov	r2,zero
   1f870:	003f3706 	br	1f550 <__alt_data_end+0xfc01f550>
   1f874:	80002a26 	beq	r16,zero,1f920 <__subdf3+0x534>
   1f878:	0101ffc4 	movi	r4,2047
   1f87c:	49006626 	beq	r9,r4,1fa18 <__subdf3+0x62c>
   1f880:	0085c83a 	sub	r2,zero,r2
   1f884:	18c02034 	orhi	r3,r3,128
   1f888:	01000e04 	movi	r4,56
   1f88c:	20807e16 	blt	r4,r2,1fa88 <__subdf3+0x69c>
   1f890:	010007c4 	movi	r4,31
   1f894:	2080e716 	blt	r4,r2,1fc34 <__subdf3+0x848>
   1f898:	01000804 	movi	r4,32
   1f89c:	2089c83a 	sub	r4,r4,r2
   1f8a0:	1914983a 	sll	r10,r3,r4
   1f8a4:	8890d83a 	srl	r8,r17,r2
   1f8a8:	8908983a 	sll	r4,r17,r4
   1f8ac:	1884d83a 	srl	r2,r3,r2
   1f8b0:	5222b03a 	or	r17,r10,r8
   1f8b4:	2006c03a 	cmpne	r3,r4,zero
   1f8b8:	88e2b03a 	or	r17,r17,r3
   1f8bc:	3463c83a 	sub	r17,r6,r17
   1f8c0:	2885c83a 	sub	r2,r5,r2
   1f8c4:	344d803a 	cmpltu	r6,r6,r17
   1f8c8:	1187c83a 	sub	r3,r2,r6
   1f8cc:	4821883a 	mov	r16,r9
   1f8d0:	3825883a 	mov	r18,r7
   1f8d4:	003f2306 	br	1f564 <__alt_data_end+0xfc01f564>
   1f8d8:	24d0b03a 	or	r8,r4,r19
   1f8dc:	40001b1e 	bne	r8,zero,1f94c <__subdf3+0x560>
   1f8e0:	0005883a 	mov	r2,zero
   1f8e4:	0009883a 	mov	r4,zero
   1f8e8:	0021883a 	mov	r16,zero
   1f8ec:	003f4906 	br	1f614 <__alt_data_end+0xfc01f614>
   1f8f0:	010007c4 	movi	r4,31
   1f8f4:	20803a16 	blt	r4,r2,1f9e0 <__subdf3+0x5f4>
   1f8f8:	01000804 	movi	r4,32
   1f8fc:	2089c83a 	sub	r4,r4,r2
   1f900:	2912983a 	sll	r9,r5,r4
   1f904:	3090d83a 	srl	r8,r6,r2
   1f908:	3108983a 	sll	r4,r6,r4
   1f90c:	2884d83a 	srl	r2,r5,r2
   1f910:	4a12b03a 	or	r9,r9,r8
   1f914:	2008c03a 	cmpne	r4,r4,zero
   1f918:	4912b03a 	or	r9,r9,r4
   1f91c:	003f4e06 	br	1f658 <__alt_data_end+0xfc01f658>
   1f920:	1c48b03a 	or	r4,r3,r17
   1f924:	20003c26 	beq	r4,zero,1fa18 <__subdf3+0x62c>
   1f928:	0084303a 	nor	r2,zero,r2
   1f92c:	1000381e 	bne	r2,zero,1fa10 <__subdf3+0x624>
   1f930:	3463c83a 	sub	r17,r6,r17
   1f934:	28c5c83a 	sub	r2,r5,r3
   1f938:	344d803a 	cmpltu	r6,r6,r17
   1f93c:	1187c83a 	sub	r3,r2,r6
   1f940:	4821883a 	mov	r16,r9
   1f944:	3825883a 	mov	r18,r7
   1f948:	003f0606 	br	1f564 <__alt_data_end+0xfc01f564>
   1f94c:	2023883a 	mov	r17,r4
   1f950:	003f0906 	br	1f578 <__alt_data_end+0xfc01f578>
   1f954:	0101ffc4 	movi	r4,2047
   1f958:	813f3a1e 	bne	r16,r4,1f644 <__alt_data_end+0xfc01f644>
   1f95c:	003ec406 	br	1f470 <__alt_data_end+0xfc01f470>
   1f960:	0005883a 	mov	r2,zero
   1f964:	003fb106 	br	1f82c <__alt_data_end+0xfc01f82c>
   1f968:	0005883a 	mov	r2,zero
   1f96c:	003fbc06 	br	1f860 <__alt_data_end+0xfc01f860>
   1f970:	1c44b03a 	or	r2,r3,r17
   1f974:	80008e1e 	bne	r16,zero,1fbb0 <__subdf3+0x7c4>
   1f978:	1000c826 	beq	r2,zero,1fc9c <__subdf3+0x8b0>
   1f97c:	2984b03a 	or	r2,r5,r6
   1f980:	103ebb26 	beq	r2,zero,1f470 <__alt_data_end+0xfc01f470>
   1f984:	8989883a 	add	r4,r17,r6
   1f988:	1945883a 	add	r2,r3,r5
   1f98c:	2447803a 	cmpltu	r3,r4,r17
   1f990:	1887883a 	add	r3,r3,r2
   1f994:	1880202c 	andhi	r2,r3,128
   1f998:	2023883a 	mov	r17,r4
   1f99c:	103f1626 	beq	r2,zero,1f5f8 <__alt_data_end+0xfc01f5f8>
   1f9a0:	00bfe034 	movhi	r2,65408
   1f9a4:	10bfffc4 	addi	r2,r2,-1
   1f9a8:	5021883a 	mov	r16,r10
   1f9ac:	1886703a 	and	r3,r3,r2
   1f9b0:	003eaf06 	br	1f470 <__alt_data_end+0xfc01f470>
   1f9b4:	3825883a 	mov	r18,r7
   1f9b8:	003f0f06 	br	1f5f8 <__alt_data_end+0xfc01f5f8>
   1f9bc:	1c44b03a 	or	r2,r3,r17
   1f9c0:	8000251e 	bne	r16,zero,1fa58 <__subdf3+0x66c>
   1f9c4:	1000661e 	bne	r2,zero,1fb60 <__subdf3+0x774>
   1f9c8:	2990b03a 	or	r8,r5,r6
   1f9cc:	40009626 	beq	r8,zero,1fc28 <__subdf3+0x83c>
   1f9d0:	2807883a 	mov	r3,r5
   1f9d4:	3023883a 	mov	r17,r6
   1f9d8:	3825883a 	mov	r18,r7
   1f9dc:	003ea406 	br	1f470 <__alt_data_end+0xfc01f470>
   1f9e0:	127ff804 	addi	r9,r2,-32
   1f9e4:	01000804 	movi	r4,32
   1f9e8:	2a52d83a 	srl	r9,r5,r9
   1f9ec:	11008c26 	beq	r2,r4,1fc20 <__subdf3+0x834>
   1f9f0:	01001004 	movi	r4,64
   1f9f4:	2085c83a 	sub	r2,r4,r2
   1f9f8:	2884983a 	sll	r2,r5,r2
   1f9fc:	118cb03a 	or	r6,r2,r6
   1fa00:	300cc03a 	cmpne	r6,r6,zero
   1fa04:	4992b03a 	or	r9,r9,r6
   1fa08:	0005883a 	mov	r2,zero
   1fa0c:	003f1206 	br	1f658 <__alt_data_end+0xfc01f658>
   1fa10:	0101ffc4 	movi	r4,2047
   1fa14:	493f9c1e 	bne	r9,r4,1f888 <__alt_data_end+0xfc01f888>
   1fa18:	2807883a 	mov	r3,r5
   1fa1c:	3023883a 	mov	r17,r6
   1fa20:	4821883a 	mov	r16,r9
   1fa24:	3825883a 	mov	r18,r7
   1fa28:	003e9106 	br	1f470 <__alt_data_end+0xfc01f470>
   1fa2c:	80001f1e 	bne	r16,zero,1faac <__subdf3+0x6c0>
   1fa30:	1c48b03a 	or	r4,r3,r17
   1fa34:	20005a26 	beq	r4,zero,1fba0 <__subdf3+0x7b4>
   1fa38:	0084303a 	nor	r2,zero,r2
   1fa3c:	1000561e 	bne	r2,zero,1fb98 <__subdf3+0x7ac>
   1fa40:	89a3883a 	add	r17,r17,r6
   1fa44:	1945883a 	add	r2,r3,r5
   1fa48:	898d803a 	cmpltu	r6,r17,r6
   1fa4c:	3087883a 	add	r3,r6,r2
   1fa50:	4821883a 	mov	r16,r9
   1fa54:	003f0506 	br	1f66c <__alt_data_end+0xfc01f66c>
   1fa58:	10002b1e 	bne	r2,zero,1fb08 <__subdf3+0x71c>
   1fa5c:	2984b03a 	or	r2,r5,r6
   1fa60:	10008026 	beq	r2,zero,1fc64 <__subdf3+0x878>
   1fa64:	2807883a 	mov	r3,r5
   1fa68:	3023883a 	mov	r17,r6
   1fa6c:	3825883a 	mov	r18,r7
   1fa70:	0401ffc4 	movi	r16,2047
   1fa74:	003e7e06 	br	1f470 <__alt_data_end+0xfc01f470>
   1fa78:	3809883a 	mov	r4,r7
   1fa7c:	0011883a 	mov	r8,zero
   1fa80:	0005883a 	mov	r2,zero
   1fa84:	003ee306 	br	1f614 <__alt_data_end+0xfc01f614>
   1fa88:	1c62b03a 	or	r17,r3,r17
   1fa8c:	8822c03a 	cmpne	r17,r17,zero
   1fa90:	0005883a 	mov	r2,zero
   1fa94:	003f8906 	br	1f8bc <__alt_data_end+0xfc01f8bc>
   1fa98:	3809883a 	mov	r4,r7
   1fa9c:	4821883a 	mov	r16,r9
   1faa0:	0011883a 	mov	r8,zero
   1faa4:	0005883a 	mov	r2,zero
   1faa8:	003eda06 	br	1f614 <__alt_data_end+0xfc01f614>
   1faac:	0101ffc4 	movi	r4,2047
   1fab0:	49003b26 	beq	r9,r4,1fba0 <__subdf3+0x7b4>
   1fab4:	0085c83a 	sub	r2,zero,r2
   1fab8:	18c02034 	orhi	r3,r3,128
   1fabc:	01000e04 	movi	r4,56
   1fac0:	20806e16 	blt	r4,r2,1fc7c <__subdf3+0x890>
   1fac4:	010007c4 	movi	r4,31
   1fac8:	20807716 	blt	r4,r2,1fca8 <__subdf3+0x8bc>
   1facc:	01000804 	movi	r4,32
   1fad0:	2089c83a 	sub	r4,r4,r2
   1fad4:	1914983a 	sll	r10,r3,r4
   1fad8:	8890d83a 	srl	r8,r17,r2
   1fadc:	8908983a 	sll	r4,r17,r4
   1fae0:	1884d83a 	srl	r2,r3,r2
   1fae4:	5222b03a 	or	r17,r10,r8
   1fae8:	2006c03a 	cmpne	r3,r4,zero
   1faec:	88e2b03a 	or	r17,r17,r3
   1faf0:	89a3883a 	add	r17,r17,r6
   1faf4:	1145883a 	add	r2,r2,r5
   1faf8:	898d803a 	cmpltu	r6,r17,r6
   1fafc:	3087883a 	add	r3,r6,r2
   1fb00:	4821883a 	mov	r16,r9
   1fb04:	003ed906 	br	1f66c <__alt_data_end+0xfc01f66c>
   1fb08:	2984b03a 	or	r2,r5,r6
   1fb0c:	10004226 	beq	r2,zero,1fc18 <__subdf3+0x82c>
   1fb10:	1808d0fa 	srli	r4,r3,3
   1fb14:	8822d0fa 	srli	r17,r17,3
   1fb18:	1806977a 	slli	r3,r3,29
   1fb1c:	2080022c 	andhi	r2,r4,8
   1fb20:	1c62b03a 	or	r17,r3,r17
   1fb24:	10000826 	beq	r2,zero,1fb48 <__subdf3+0x75c>
   1fb28:	2812d0fa 	srli	r9,r5,3
   1fb2c:	4880022c 	andhi	r2,r9,8
   1fb30:	1000051e 	bne	r2,zero,1fb48 <__subdf3+0x75c>
   1fb34:	300cd0fa 	srli	r6,r6,3
   1fb38:	2804977a 	slli	r2,r5,29
   1fb3c:	4809883a 	mov	r4,r9
   1fb40:	3825883a 	mov	r18,r7
   1fb44:	11a2b03a 	or	r17,r2,r6
   1fb48:	8806d77a 	srli	r3,r17,29
   1fb4c:	200890fa 	slli	r4,r4,3
   1fb50:	882290fa 	slli	r17,r17,3
   1fb54:	0401ffc4 	movi	r16,2047
   1fb58:	1906b03a 	or	r3,r3,r4
   1fb5c:	003e4406 	br	1f470 <__alt_data_end+0xfc01f470>
   1fb60:	2984b03a 	or	r2,r5,r6
   1fb64:	103e4226 	beq	r2,zero,1f470 <__alt_data_end+0xfc01f470>
   1fb68:	8989c83a 	sub	r4,r17,r6
   1fb6c:	8911803a 	cmpltu	r8,r17,r4
   1fb70:	1945c83a 	sub	r2,r3,r5
   1fb74:	1205c83a 	sub	r2,r2,r8
   1fb78:	1200202c 	andhi	r8,r2,128
   1fb7c:	403e9a26 	beq	r8,zero,1f5e8 <__alt_data_end+0xfc01f5e8>
   1fb80:	3463c83a 	sub	r17,r6,r17
   1fb84:	28c5c83a 	sub	r2,r5,r3
   1fb88:	344d803a 	cmpltu	r6,r6,r17
   1fb8c:	1187c83a 	sub	r3,r2,r6
   1fb90:	3825883a 	mov	r18,r7
   1fb94:	003e3606 	br	1f470 <__alt_data_end+0xfc01f470>
   1fb98:	0101ffc4 	movi	r4,2047
   1fb9c:	493fc71e 	bne	r9,r4,1fabc <__alt_data_end+0xfc01fabc>
   1fba0:	2807883a 	mov	r3,r5
   1fba4:	3023883a 	mov	r17,r6
   1fba8:	4821883a 	mov	r16,r9
   1fbac:	003e3006 	br	1f470 <__alt_data_end+0xfc01f470>
   1fbb0:	10003626 	beq	r2,zero,1fc8c <__subdf3+0x8a0>
   1fbb4:	2984b03a 	or	r2,r5,r6
   1fbb8:	10001726 	beq	r2,zero,1fc18 <__subdf3+0x82c>
   1fbbc:	1808d0fa 	srli	r4,r3,3
   1fbc0:	8822d0fa 	srli	r17,r17,3
   1fbc4:	1806977a 	slli	r3,r3,29
   1fbc8:	2080022c 	andhi	r2,r4,8
   1fbcc:	1c62b03a 	or	r17,r3,r17
   1fbd0:	10000726 	beq	r2,zero,1fbf0 <__subdf3+0x804>
   1fbd4:	2812d0fa 	srli	r9,r5,3
   1fbd8:	4880022c 	andhi	r2,r9,8
   1fbdc:	1000041e 	bne	r2,zero,1fbf0 <__subdf3+0x804>
   1fbe0:	300cd0fa 	srli	r6,r6,3
   1fbe4:	2804977a 	slli	r2,r5,29
   1fbe8:	4809883a 	mov	r4,r9
   1fbec:	11a2b03a 	or	r17,r2,r6
   1fbf0:	8806d77a 	srli	r3,r17,29
   1fbf4:	200890fa 	slli	r4,r4,3
   1fbf8:	882290fa 	slli	r17,r17,3
   1fbfc:	3825883a 	mov	r18,r7
   1fc00:	1906b03a 	or	r3,r3,r4
   1fc04:	0401ffc4 	movi	r16,2047
   1fc08:	003e1906 	br	1f470 <__alt_data_end+0xfc01f470>
   1fc0c:	000b883a 	mov	r5,zero
   1fc10:	0005883a 	mov	r2,zero
   1fc14:	003e2e06 	br	1f4d0 <__alt_data_end+0xfc01f4d0>
   1fc18:	0401ffc4 	movi	r16,2047
   1fc1c:	003e1406 	br	1f470 <__alt_data_end+0xfc01f470>
   1fc20:	0005883a 	mov	r2,zero
   1fc24:	003f7506 	br	1f9fc <__alt_data_end+0xfc01f9fc>
   1fc28:	0005883a 	mov	r2,zero
   1fc2c:	0009883a 	mov	r4,zero
   1fc30:	003e7806 	br	1f614 <__alt_data_end+0xfc01f614>
   1fc34:	123ff804 	addi	r8,r2,-32
   1fc38:	01000804 	movi	r4,32
   1fc3c:	1a10d83a 	srl	r8,r3,r8
   1fc40:	11002526 	beq	r2,r4,1fcd8 <__subdf3+0x8ec>
   1fc44:	01001004 	movi	r4,64
   1fc48:	2085c83a 	sub	r2,r4,r2
   1fc4c:	1884983a 	sll	r2,r3,r2
   1fc50:	1444b03a 	or	r2,r2,r17
   1fc54:	1004c03a 	cmpne	r2,r2,zero
   1fc58:	40a2b03a 	or	r17,r8,r2
   1fc5c:	0005883a 	mov	r2,zero
   1fc60:	003f1606 	br	1f8bc <__alt_data_end+0xfc01f8bc>
   1fc64:	02000434 	movhi	r8,16
   1fc68:	0009883a 	mov	r4,zero
   1fc6c:	423fffc4 	addi	r8,r8,-1
   1fc70:	00bfffc4 	movi	r2,-1
   1fc74:	0401ffc4 	movi	r16,2047
   1fc78:	003e6606 	br	1f614 <__alt_data_end+0xfc01f614>
   1fc7c:	1c62b03a 	or	r17,r3,r17
   1fc80:	8822c03a 	cmpne	r17,r17,zero
   1fc84:	0005883a 	mov	r2,zero
   1fc88:	003f9906 	br	1faf0 <__alt_data_end+0xfc01faf0>
   1fc8c:	2807883a 	mov	r3,r5
   1fc90:	3023883a 	mov	r17,r6
   1fc94:	0401ffc4 	movi	r16,2047
   1fc98:	003df506 	br	1f470 <__alt_data_end+0xfc01f470>
   1fc9c:	2807883a 	mov	r3,r5
   1fca0:	3023883a 	mov	r17,r6
   1fca4:	003df206 	br	1f470 <__alt_data_end+0xfc01f470>
   1fca8:	123ff804 	addi	r8,r2,-32
   1fcac:	01000804 	movi	r4,32
   1fcb0:	1a10d83a 	srl	r8,r3,r8
   1fcb4:	11000a26 	beq	r2,r4,1fce0 <__subdf3+0x8f4>
   1fcb8:	01001004 	movi	r4,64
   1fcbc:	2085c83a 	sub	r2,r4,r2
   1fcc0:	1884983a 	sll	r2,r3,r2
   1fcc4:	1444b03a 	or	r2,r2,r17
   1fcc8:	1004c03a 	cmpne	r2,r2,zero
   1fccc:	40a2b03a 	or	r17,r8,r2
   1fcd0:	0005883a 	mov	r2,zero
   1fcd4:	003f8606 	br	1faf0 <__alt_data_end+0xfc01faf0>
   1fcd8:	0005883a 	mov	r2,zero
   1fcdc:	003fdc06 	br	1fc50 <__alt_data_end+0xfc01fc50>
   1fce0:	0005883a 	mov	r2,zero
   1fce4:	003ff706 	br	1fcc4 <__alt_data_end+0xfc01fcc4>

0001fce8 <__fixdfsi>:
   1fce8:	280cd53a 	srli	r6,r5,20
   1fcec:	00c00434 	movhi	r3,16
   1fcf0:	18ffffc4 	addi	r3,r3,-1
   1fcf4:	3181ffcc 	andi	r6,r6,2047
   1fcf8:	01c0ff84 	movi	r7,1022
   1fcfc:	28c6703a 	and	r3,r5,r3
   1fd00:	280ad7fa 	srli	r5,r5,31
   1fd04:	3980120e 	bge	r7,r6,1fd50 <__fixdfsi+0x68>
   1fd08:	00810744 	movi	r2,1053
   1fd0c:	11800c16 	blt	r2,r6,1fd40 <__fixdfsi+0x58>
   1fd10:	00810cc4 	movi	r2,1075
   1fd14:	1185c83a 	sub	r2,r2,r6
   1fd18:	01c007c4 	movi	r7,31
   1fd1c:	18c00434 	orhi	r3,r3,16
   1fd20:	38800d16 	blt	r7,r2,1fd58 <__fixdfsi+0x70>
   1fd24:	31befb44 	addi	r6,r6,-1043
   1fd28:	2084d83a 	srl	r2,r4,r2
   1fd2c:	1986983a 	sll	r3,r3,r6
   1fd30:	1884b03a 	or	r2,r3,r2
   1fd34:	28000726 	beq	r5,zero,1fd54 <__fixdfsi+0x6c>
   1fd38:	0085c83a 	sub	r2,zero,r2
   1fd3c:	f800283a 	ret
   1fd40:	00a00034 	movhi	r2,32768
   1fd44:	10bfffc4 	addi	r2,r2,-1
   1fd48:	2885883a 	add	r2,r5,r2
   1fd4c:	f800283a 	ret
   1fd50:	0005883a 	mov	r2,zero
   1fd54:	f800283a 	ret
   1fd58:	008104c4 	movi	r2,1043
   1fd5c:	1185c83a 	sub	r2,r2,r6
   1fd60:	1884d83a 	srl	r2,r3,r2
   1fd64:	003ff306 	br	1fd34 <__alt_data_end+0xfc01fd34>

0001fd68 <__floatsidf>:
   1fd68:	defffd04 	addi	sp,sp,-12
   1fd6c:	dfc00215 	stw	ra,8(sp)
   1fd70:	dc400115 	stw	r17,4(sp)
   1fd74:	dc000015 	stw	r16,0(sp)
   1fd78:	20002b26 	beq	r4,zero,1fe28 <__floatsidf+0xc0>
   1fd7c:	2023883a 	mov	r17,r4
   1fd80:	2020d7fa 	srli	r16,r4,31
   1fd84:	20002d16 	blt	r4,zero,1fe3c <__floatsidf+0xd4>
   1fd88:	8809883a 	mov	r4,r17
   1fd8c:	000f3780 	call	f378 <__clzsi2>
   1fd90:	01410784 	movi	r5,1054
   1fd94:	288bc83a 	sub	r5,r5,r2
   1fd98:	01010cc4 	movi	r4,1075
   1fd9c:	2149c83a 	sub	r4,r4,r5
   1fda0:	00c007c4 	movi	r3,31
   1fda4:	1900160e 	bge	r3,r4,1fe00 <__floatsidf+0x98>
   1fda8:	00c104c4 	movi	r3,1043
   1fdac:	1947c83a 	sub	r3,r3,r5
   1fdb0:	88c6983a 	sll	r3,r17,r3
   1fdb4:	00800434 	movhi	r2,16
   1fdb8:	10bfffc4 	addi	r2,r2,-1
   1fdbc:	1886703a 	and	r3,r3,r2
   1fdc0:	2941ffcc 	andi	r5,r5,2047
   1fdc4:	800d883a 	mov	r6,r16
   1fdc8:	0005883a 	mov	r2,zero
   1fdcc:	280a953a 	slli	r5,r5,20
   1fdd0:	31803fcc 	andi	r6,r6,255
   1fdd4:	01000434 	movhi	r4,16
   1fdd8:	300c97fa 	slli	r6,r6,31
   1fddc:	213fffc4 	addi	r4,r4,-1
   1fde0:	1906703a 	and	r3,r3,r4
   1fde4:	1946b03a 	or	r3,r3,r5
   1fde8:	1986b03a 	or	r3,r3,r6
   1fdec:	dfc00217 	ldw	ra,8(sp)
   1fdf0:	dc400117 	ldw	r17,4(sp)
   1fdf4:	dc000017 	ldw	r16,0(sp)
   1fdf8:	dec00304 	addi	sp,sp,12
   1fdfc:	f800283a 	ret
   1fe00:	00c002c4 	movi	r3,11
   1fe04:	1887c83a 	sub	r3,r3,r2
   1fe08:	88c6d83a 	srl	r3,r17,r3
   1fe0c:	8904983a 	sll	r2,r17,r4
   1fe10:	01000434 	movhi	r4,16
   1fe14:	213fffc4 	addi	r4,r4,-1
   1fe18:	2941ffcc 	andi	r5,r5,2047
   1fe1c:	1906703a 	and	r3,r3,r4
   1fe20:	800d883a 	mov	r6,r16
   1fe24:	003fe906 	br	1fdcc <__alt_data_end+0xfc01fdcc>
   1fe28:	000d883a 	mov	r6,zero
   1fe2c:	000b883a 	mov	r5,zero
   1fe30:	0007883a 	mov	r3,zero
   1fe34:	0005883a 	mov	r2,zero
   1fe38:	003fe406 	br	1fdcc <__alt_data_end+0xfc01fdcc>
   1fe3c:	0123c83a 	sub	r17,zero,r4
   1fe40:	003fd106 	br	1fd88 <__alt_data_end+0xfc01fd88>

0001fe44 <__floatunsidf>:
   1fe44:	defffe04 	addi	sp,sp,-8
   1fe48:	dc000015 	stw	r16,0(sp)
   1fe4c:	dfc00115 	stw	ra,4(sp)
   1fe50:	2021883a 	mov	r16,r4
   1fe54:	20002226 	beq	r4,zero,1fee0 <__floatunsidf+0x9c>
   1fe58:	000f3780 	call	f378 <__clzsi2>
   1fe5c:	01010784 	movi	r4,1054
   1fe60:	2089c83a 	sub	r4,r4,r2
   1fe64:	01810cc4 	movi	r6,1075
   1fe68:	310dc83a 	sub	r6,r6,r4
   1fe6c:	00c007c4 	movi	r3,31
   1fe70:	1980120e 	bge	r3,r6,1febc <__floatunsidf+0x78>
   1fe74:	00c104c4 	movi	r3,1043
   1fe78:	1907c83a 	sub	r3,r3,r4
   1fe7c:	80ca983a 	sll	r5,r16,r3
   1fe80:	00800434 	movhi	r2,16
   1fe84:	10bfffc4 	addi	r2,r2,-1
   1fe88:	2101ffcc 	andi	r4,r4,2047
   1fe8c:	0021883a 	mov	r16,zero
   1fe90:	288a703a 	and	r5,r5,r2
   1fe94:	2008953a 	slli	r4,r4,20
   1fe98:	00c00434 	movhi	r3,16
   1fe9c:	18ffffc4 	addi	r3,r3,-1
   1fea0:	28c6703a 	and	r3,r5,r3
   1fea4:	8005883a 	mov	r2,r16
   1fea8:	1906b03a 	or	r3,r3,r4
   1feac:	dfc00117 	ldw	ra,4(sp)
   1feb0:	dc000017 	ldw	r16,0(sp)
   1feb4:	dec00204 	addi	sp,sp,8
   1feb8:	f800283a 	ret
   1febc:	00c002c4 	movi	r3,11
   1fec0:	188bc83a 	sub	r5,r3,r2
   1fec4:	814ad83a 	srl	r5,r16,r5
   1fec8:	00c00434 	movhi	r3,16
   1fecc:	18ffffc4 	addi	r3,r3,-1
   1fed0:	81a0983a 	sll	r16,r16,r6
   1fed4:	2101ffcc 	andi	r4,r4,2047
   1fed8:	28ca703a 	and	r5,r5,r3
   1fedc:	003fed06 	br	1fe94 <__alt_data_end+0xfc01fe94>
   1fee0:	0009883a 	mov	r4,zero
   1fee4:	000b883a 	mov	r5,zero
   1fee8:	003fea06 	br	1fe94 <__alt_data_end+0xfc01fe94>

0001feec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1feec:	defffe04 	addi	sp,sp,-8
   1fef0:	dfc00115 	stw	ra,4(sp)
   1fef4:	df000015 	stw	fp,0(sp)
   1fef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fefc:	d0a5bd17 	ldw	r2,-26892(gp)
   1ff00:	10000326 	beq	r2,zero,1ff10 <alt_get_errno+0x24>
   1ff04:	d0a5bd17 	ldw	r2,-26892(gp)
   1ff08:	103ee83a 	callr	r2
   1ff0c:	00000106 	br	1ff14 <alt_get_errno+0x28>
   1ff10:	d0b24e04 	addi	r2,gp,-14024
}
   1ff14:	e037883a 	mov	sp,fp
   1ff18:	dfc00117 	ldw	ra,4(sp)
   1ff1c:	df000017 	ldw	fp,0(sp)
   1ff20:	dec00204 	addi	sp,sp,8
   1ff24:	f800283a 	ret

0001ff28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ff28:	defffb04 	addi	sp,sp,-20
   1ff2c:	dfc00415 	stw	ra,16(sp)
   1ff30:	df000315 	stw	fp,12(sp)
   1ff34:	df000304 	addi	fp,sp,12
   1ff38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ff3c:	e0bfff17 	ldw	r2,-4(fp)
   1ff40:	10000816 	blt	r2,zero,1ff64 <close+0x3c>
   1ff44:	01400304 	movi	r5,12
   1ff48:	e13fff17 	ldw	r4,-4(fp)
   1ff4c:	000d8d40 	call	d8d4 <__mulsi3>
   1ff50:	1007883a 	mov	r3,r2
   1ff54:	008000f4 	movhi	r2,3
   1ff58:	10b0c004 	addi	r2,r2,-15616
   1ff5c:	1885883a 	add	r2,r3,r2
   1ff60:	00000106 	br	1ff68 <close+0x40>
   1ff64:	0005883a 	mov	r2,zero
   1ff68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ff6c:	e0bffd17 	ldw	r2,-12(fp)
   1ff70:	10001926 	beq	r2,zero,1ffd8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ff74:	e0bffd17 	ldw	r2,-12(fp)
   1ff78:	10800017 	ldw	r2,0(r2)
   1ff7c:	10800417 	ldw	r2,16(r2)
   1ff80:	10000626 	beq	r2,zero,1ff9c <close+0x74>
   1ff84:	e0bffd17 	ldw	r2,-12(fp)
   1ff88:	10800017 	ldw	r2,0(r2)
   1ff8c:	10800417 	ldw	r2,16(r2)
   1ff90:	e13ffd17 	ldw	r4,-12(fp)
   1ff94:	103ee83a 	callr	r2
   1ff98:	00000106 	br	1ffa0 <close+0x78>
   1ff9c:	0005883a 	mov	r2,zero
   1ffa0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1ffa4:	e13fff17 	ldw	r4,-4(fp)
   1ffa8:	00207d00 	call	207d0 <alt_release_fd>
    if (rval < 0)
   1ffac:	e0bffe17 	ldw	r2,-8(fp)
   1ffb0:	1000070e 	bge	r2,zero,1ffd0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1ffb4:	001feec0 	call	1feec <alt_get_errno>
   1ffb8:	1007883a 	mov	r3,r2
   1ffbc:	e0bffe17 	ldw	r2,-8(fp)
   1ffc0:	0085c83a 	sub	r2,zero,r2
   1ffc4:	18800015 	stw	r2,0(r3)
      return -1;
   1ffc8:	00bfffc4 	movi	r2,-1
   1ffcc:	00000706 	br	1ffec <close+0xc4>
    }
    return 0;
   1ffd0:	0005883a 	mov	r2,zero
   1ffd4:	00000506 	br	1ffec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1ffd8:	001feec0 	call	1feec <alt_get_errno>
   1ffdc:	1007883a 	mov	r3,r2
   1ffe0:	00801444 	movi	r2,81
   1ffe4:	18800015 	stw	r2,0(r3)
    return -1;
   1ffe8:	00bfffc4 	movi	r2,-1
  }
}
   1ffec:	e037883a 	mov	sp,fp
   1fff0:	dfc00117 	ldw	ra,4(sp)
   1fff4:	df000017 	ldw	fp,0(sp)
   1fff8:	dec00204 	addi	sp,sp,8
   1fffc:	f800283a 	ret

00020000 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20000:	defffc04 	addi	sp,sp,-16
   20004:	df000315 	stw	fp,12(sp)
   20008:	df000304 	addi	fp,sp,12
   2000c:	e13ffd15 	stw	r4,-12(fp)
   20010:	e17ffe15 	stw	r5,-8(fp)
   20014:	e1bfff15 	stw	r6,-4(fp)
  return len;
   20018:	e0bfff17 	ldw	r2,-4(fp)
}
   2001c:	e037883a 	mov	sp,fp
   20020:	df000017 	ldw	fp,0(sp)
   20024:	dec00104 	addi	sp,sp,4
   20028:	f800283a 	ret

0002002c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2002c:	defffd04 	addi	sp,sp,-12
   20030:	df000215 	stw	fp,8(sp)
   20034:	df000204 	addi	fp,sp,8
   20038:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2003c:	0001883a 	nop
   20040:	e0bfff17 	ldw	r2,-4(fp)
   20044:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20048:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2004c:	10000226 	beq	r2,zero,20058 <_exit+0x2c>
    ALT_SIM_FAIL();
   20050:	002af070 	cmpltui	zero,zero,43969
   20054:	00000106 	br	2005c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   20058:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2005c:	003fff06 	br	2005c <__alt_data_end+0xfc02005c>

00020060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20060:	defffe04 	addi	sp,sp,-8
   20064:	dfc00115 	stw	ra,4(sp)
   20068:	df000015 	stw	fp,0(sp)
   2006c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20070:	d0a5bd17 	ldw	r2,-26892(gp)
   20074:	10000326 	beq	r2,zero,20084 <alt_get_errno+0x24>
   20078:	d0a5bd17 	ldw	r2,-26892(gp)
   2007c:	103ee83a 	callr	r2
   20080:	00000106 	br	20088 <alt_get_errno+0x28>
   20084:	d0b24e04 	addi	r2,gp,-14024
}
   20088:	e037883a 	mov	sp,fp
   2008c:	dfc00117 	ldw	ra,4(sp)
   20090:	df000017 	ldw	fp,0(sp)
   20094:	dec00204 	addi	sp,sp,8
   20098:	f800283a 	ret

0002009c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2009c:	defffb04 	addi	sp,sp,-20
   200a0:	dfc00415 	stw	ra,16(sp)
   200a4:	df000315 	stw	fp,12(sp)
   200a8:	df000304 	addi	fp,sp,12
   200ac:	e13ffe15 	stw	r4,-8(fp)
   200b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   200b4:	e0bffe17 	ldw	r2,-8(fp)
   200b8:	10000816 	blt	r2,zero,200dc <fstat+0x40>
   200bc:	01400304 	movi	r5,12
   200c0:	e13ffe17 	ldw	r4,-8(fp)
   200c4:	000d8d40 	call	d8d4 <__mulsi3>
   200c8:	1007883a 	mov	r3,r2
   200cc:	008000f4 	movhi	r2,3
   200d0:	10b0c004 	addi	r2,r2,-15616
   200d4:	1885883a 	add	r2,r3,r2
   200d8:	00000106 	br	200e0 <fstat+0x44>
   200dc:	0005883a 	mov	r2,zero
   200e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   200e4:	e0bffd17 	ldw	r2,-12(fp)
   200e8:	10001026 	beq	r2,zero,2012c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   200ec:	e0bffd17 	ldw	r2,-12(fp)
   200f0:	10800017 	ldw	r2,0(r2)
   200f4:	10800817 	ldw	r2,32(r2)
   200f8:	10000726 	beq	r2,zero,20118 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   200fc:	e0bffd17 	ldw	r2,-12(fp)
   20100:	10800017 	ldw	r2,0(r2)
   20104:	10800817 	ldw	r2,32(r2)
   20108:	e17fff17 	ldw	r5,-4(fp)
   2010c:	e13ffd17 	ldw	r4,-12(fp)
   20110:	103ee83a 	callr	r2
   20114:	00000a06 	br	20140 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   20118:	e0bfff17 	ldw	r2,-4(fp)
   2011c:	00c80004 	movi	r3,8192
   20120:	10c00115 	stw	r3,4(r2)
      return 0;
   20124:	0005883a 	mov	r2,zero
   20128:	00000506 	br	20140 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2012c:	00200600 	call	20060 <alt_get_errno>
   20130:	1007883a 	mov	r3,r2
   20134:	00801444 	movi	r2,81
   20138:	18800015 	stw	r2,0(r3)
    return -1;
   2013c:	00bfffc4 	movi	r2,-1
  }
}
   20140:	e037883a 	mov	sp,fp
   20144:	dfc00117 	ldw	ra,4(sp)
   20148:	df000017 	ldw	fp,0(sp)
   2014c:	dec00204 	addi	sp,sp,8
   20150:	f800283a 	ret

00020154 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   20154:	deffff04 	addi	sp,sp,-4
   20158:	df000015 	stw	fp,0(sp)
   2015c:	d839883a 	mov	fp,sp
  return 0;
   20160:	0005883a 	mov	r2,zero
}
   20164:	e037883a 	mov	sp,fp
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00104 	addi	sp,sp,4
   20170:	f800283a 	ret

00020174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20174:	defffe04 	addi	sp,sp,-8
   20178:	dfc00115 	stw	ra,4(sp)
   2017c:	df000015 	stw	fp,0(sp)
   20180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20184:	d0a5bd17 	ldw	r2,-26892(gp)
   20188:	10000326 	beq	r2,zero,20198 <alt_get_errno+0x24>
   2018c:	d0a5bd17 	ldw	r2,-26892(gp)
   20190:	103ee83a 	callr	r2
   20194:	00000106 	br	2019c <alt_get_errno+0x28>
   20198:	d0b24e04 	addi	r2,gp,-14024
}
   2019c:	e037883a 	mov	sp,fp
   201a0:	dfc00117 	ldw	ra,4(sp)
   201a4:	df000017 	ldw	fp,0(sp)
   201a8:	dec00204 	addi	sp,sp,8
   201ac:	f800283a 	ret

000201b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   201b0:	deffed04 	addi	sp,sp,-76
   201b4:	dfc01215 	stw	ra,72(sp)
   201b8:	df001115 	stw	fp,68(sp)
   201bc:	df001104 	addi	fp,sp,68
   201c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   201c4:	e0bfff17 	ldw	r2,-4(fp)
   201c8:	10000816 	blt	r2,zero,201ec <isatty+0x3c>
   201cc:	01400304 	movi	r5,12
   201d0:	e13fff17 	ldw	r4,-4(fp)
   201d4:	000d8d40 	call	d8d4 <__mulsi3>
   201d8:	1007883a 	mov	r3,r2
   201dc:	008000f4 	movhi	r2,3
   201e0:	10b0c004 	addi	r2,r2,-15616
   201e4:	1885883a 	add	r2,r3,r2
   201e8:	00000106 	br	201f0 <isatty+0x40>
   201ec:	0005883a 	mov	r2,zero
   201f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   201f4:	e0bfef17 	ldw	r2,-68(fp)
   201f8:	10000e26 	beq	r2,zero,20234 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   201fc:	e0bfef17 	ldw	r2,-68(fp)
   20200:	10800017 	ldw	r2,0(r2)
   20204:	10800817 	ldw	r2,32(r2)
   20208:	1000021e 	bne	r2,zero,20214 <isatty+0x64>
    {
      return 1;
   2020c:	00800044 	movi	r2,1
   20210:	00000d06 	br	20248 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   20214:	e0bff004 	addi	r2,fp,-64
   20218:	100b883a 	mov	r5,r2
   2021c:	e13fff17 	ldw	r4,-4(fp)
   20220:	002009c0 	call	2009c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   20224:	e0bff117 	ldw	r2,-60(fp)
   20228:	10880020 	cmpeqi	r2,r2,8192
   2022c:	10803fcc 	andi	r2,r2,255
   20230:	00000506 	br	20248 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20234:	00201740 	call	20174 <alt_get_errno>
   20238:	1007883a 	mov	r3,r2
   2023c:	00801444 	movi	r2,81
   20240:	18800015 	stw	r2,0(r3)
    return 0;
   20244:	0005883a 	mov	r2,zero
  }
}
   20248:	e037883a 	mov	sp,fp
   2024c:	dfc00117 	ldw	ra,4(sp)
   20250:	df000017 	ldw	fp,0(sp)
   20254:	dec00204 	addi	sp,sp,8
   20258:	f800283a 	ret

0002025c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2025c:	defffe04 	addi	sp,sp,-8
   20260:	dfc00115 	stw	ra,4(sp)
   20264:	df000015 	stw	fp,0(sp)
   20268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2026c:	d0a5bd17 	ldw	r2,-26892(gp)
   20270:	10000326 	beq	r2,zero,20280 <alt_get_errno+0x24>
   20274:	d0a5bd17 	ldw	r2,-26892(gp)
   20278:	103ee83a 	callr	r2
   2027c:	00000106 	br	20284 <alt_get_errno+0x28>
   20280:	d0b24e04 	addi	r2,gp,-14024
}
   20284:	e037883a 	mov	sp,fp
   20288:	dfc00117 	ldw	ra,4(sp)
   2028c:	df000017 	ldw	fp,0(sp)
   20290:	dec00204 	addi	sp,sp,8
   20294:	f800283a 	ret

00020298 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   20298:	defffb04 	addi	sp,sp,-20
   2029c:	dfc00415 	stw	ra,16(sp)
   202a0:	df000315 	stw	fp,12(sp)
   202a4:	df000304 	addi	fp,sp,12
   202a8:	e13ffe15 	stw	r4,-8(fp)
   202ac:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   202b0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   202b4:	e0bffe17 	ldw	r2,-8(fp)
   202b8:	00802f16 	blt	zero,r2,20378 <kill+0xe0>
  {
    switch (sig)
   202bc:	e0bfff17 	ldw	r2,-4(fp)
   202c0:	10800828 	cmpgeui	r2,r2,32
   202c4:	1000291e 	bne	r2,zero,2036c <kill+0xd4>
   202c8:	e0bfff17 	ldw	r2,-4(fp)
   202cc:	100690ba 	slli	r3,r2,2
   202d0:	008000b4 	movhi	r2,2
   202d4:	1080b904 	addi	r2,r2,740
   202d8:	1885883a 	add	r2,r3,r2
   202dc:	10800017 	ldw	r2,0(r2)
   202e0:	1000683a 	jmp	r2
   202e4:	0002038c 	andi	zero,zero,2062
   202e8:	0002036c 	andhi	zero,zero,2061
   202ec:	0002036c 	andhi	zero,zero,2061
   202f0:	00020364 	muli	zero,zero,2061
   202f4:	00020364 	muli	zero,zero,2061
   202f8:	00020364 	muli	zero,zero,2061
   202fc:	00020364 	muli	zero,zero,2061
   20300:	0002036c 	andhi	zero,zero,2061
   20304:	00020364 	muli	zero,zero,2061
   20308:	00020364 	muli	zero,zero,2061
   2030c:	00020364 	muli	zero,zero,2061
   20310:	00020364 	muli	zero,zero,2061
   20314:	00020364 	muli	zero,zero,2061
   20318:	00020364 	muli	zero,zero,2061
   2031c:	00020364 	muli	zero,zero,2061
   20320:	00020364 	muli	zero,zero,2061
   20324:	0002038c 	andi	zero,zero,2062
   20328:	0002036c 	andhi	zero,zero,2061
   2032c:	0002036c 	andhi	zero,zero,2061
   20330:	0002036c 	andhi	zero,zero,2061
   20334:	0002038c 	andi	zero,zero,2062
   20338:	0002036c 	andhi	zero,zero,2061
   2033c:	0002036c 	andhi	zero,zero,2061
   20340:	00020364 	muli	zero,zero,2061
   20344:	00020364 	muli	zero,zero,2061
   20348:	00020364 	muli	zero,zero,2061
   2034c:	00020364 	muli	zero,zero,2061
   20350:	00020364 	muli	zero,zero,2061
   20354:	0002036c 	andhi	zero,zero,2061
   20358:	0002036c 	andhi	zero,zero,2061
   2035c:	00020364 	muli	zero,zero,2061
   20360:	00020364 	muli	zero,zero,2061
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   20364:	0009883a 	mov	r4,zero
   20368:	002002c0 	call	2002c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   2036c:	00800584 	movi	r2,22
   20370:	e0bffd15 	stw	r2,-12(fp)
   20374:	00000606 	br	20390 <kill+0xf8>
    }
  }

  else if (pid > 0)
   20378:	e0bffe17 	ldw	r2,-8(fp)
   2037c:	0080040e 	bge	zero,r2,20390 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   20380:	008000c4 	movi	r2,3
   20384:	e0bffd15 	stw	r2,-12(fp)
   20388:	00000106 	br	20390 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   2038c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   20390:	e0bffd17 	ldw	r2,-12(fp)
   20394:	10000626 	beq	r2,zero,203b0 <kill+0x118>
  {
    ALT_ERRNO = status;
   20398:	002025c0 	call	2025c <alt_get_errno>
   2039c:	1007883a 	mov	r3,r2
   203a0:	e0bffd17 	ldw	r2,-12(fp)
   203a4:	18800015 	stw	r2,0(r3)
    return -1;
   203a8:	00bfffc4 	movi	r2,-1
   203ac:	00000106 	br	203b4 <kill+0x11c>
  }

  return 0;
   203b0:	0005883a 	mov	r2,zero
}
   203b4:	e037883a 	mov	sp,fp
   203b8:	dfc00117 	ldw	ra,4(sp)
   203bc:	df000017 	ldw	fp,0(sp)
   203c0:	dec00204 	addi	sp,sp,8
   203c4:	f800283a 	ret

000203c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   203c8:	defffc04 	addi	sp,sp,-16
   203cc:	df000315 	stw	fp,12(sp)
   203d0:	df000304 	addi	fp,sp,12
   203d4:	e13ffd15 	stw	r4,-12(fp)
   203d8:	e17ffe15 	stw	r5,-8(fp)
   203dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   203e0:	e0fffe17 	ldw	r3,-8(fp)
   203e4:	e0bffd17 	ldw	r2,-12(fp)
   203e8:	18800c26 	beq	r3,r2,2041c <alt_load_section+0x54>
  {
    while( to != end )
   203ec:	00000806 	br	20410 <alt_load_section+0x48>
    {
      *to++ = *from++;
   203f0:	e0bffe17 	ldw	r2,-8(fp)
   203f4:	10c00104 	addi	r3,r2,4
   203f8:	e0fffe15 	stw	r3,-8(fp)
   203fc:	e0fffd17 	ldw	r3,-12(fp)
   20400:	19000104 	addi	r4,r3,4
   20404:	e13ffd15 	stw	r4,-12(fp)
   20408:	18c00017 	ldw	r3,0(r3)
   2040c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20410:	e0fffe17 	ldw	r3,-8(fp)
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	18bff51e 	bne	r3,r2,203f0 <__alt_data_end+0xfc0203f0>
    {
      *to++ = *from++;
    }
  }
}
   2041c:	0001883a 	nop
   20420:	e037883a 	mov	sp,fp
   20424:	df000017 	ldw	fp,0(sp)
   20428:	dec00104 	addi	sp,sp,4
   2042c:	f800283a 	ret

00020430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20430:	defffe04 	addi	sp,sp,-8
   20434:	dfc00115 	stw	ra,4(sp)
   20438:	df000015 	stw	fp,0(sp)
   2043c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20440:	018000f4 	movhi	r6,3
   20444:	31bb0a04 	addi	r6,r6,-5080
   20448:	014000f4 	movhi	r5,3
   2044c:	296e8d04 	addi	r5,r5,-17868
   20450:	010000f4 	movhi	r4,3
   20454:	213b0a04 	addi	r4,r4,-5080
   20458:	00203c80 	call	203c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2045c:	01800034 	movhi	r6,0
   20460:	31808c04 	addi	r6,r6,560
   20464:	01400034 	movhi	r5,0
   20468:	29400804 	addi	r5,r5,32
   2046c:	01000034 	movhi	r4,0
   20470:	21000804 	addi	r4,r4,32
   20474:	00203c80 	call	203c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20478:	018000f4 	movhi	r6,3
   2047c:	31ae8d04 	addi	r6,r6,-17868
   20480:	014000b4 	movhi	r5,2
   20484:	2952c904 	addi	r5,r5,19236
   20488:	010000b4 	movhi	r4,2
   2048c:	2112c904 	addi	r4,r4,19236
   20490:	00203c80 	call	203c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20494:	00237f80 	call	237f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20498:	0023a480 	call	23a48 <alt_icache_flush_all>
}
   2049c:	0001883a 	nop
   204a0:	e037883a 	mov	sp,fp
   204a4:	dfc00117 	ldw	ra,4(sp)
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00204 	addi	sp,sp,8
   204b0:	f800283a 	ret

000204b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   204b4:	defffe04 	addi	sp,sp,-8
   204b8:	dfc00115 	stw	ra,4(sp)
   204bc:	df000015 	stw	fp,0(sp)
   204c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   204c4:	d0a5bd17 	ldw	r2,-26892(gp)
   204c8:	10000326 	beq	r2,zero,204d8 <alt_get_errno+0x24>
   204cc:	d0a5bd17 	ldw	r2,-26892(gp)
   204d0:	103ee83a 	callr	r2
   204d4:	00000106 	br	204dc <alt_get_errno+0x28>
   204d8:	d0b24e04 	addi	r2,gp,-14024
}
   204dc:	e037883a 	mov	sp,fp
   204e0:	dfc00117 	ldw	ra,4(sp)
   204e4:	df000017 	ldw	fp,0(sp)
   204e8:	dec00204 	addi	sp,sp,8
   204ec:	f800283a 	ret

000204f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   204f0:	defff904 	addi	sp,sp,-28
   204f4:	dfc00615 	stw	ra,24(sp)
   204f8:	df000515 	stw	fp,20(sp)
   204fc:	df000504 	addi	fp,sp,20
   20500:	e13ffd15 	stw	r4,-12(fp)
   20504:	e17ffe15 	stw	r5,-8(fp)
   20508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2050c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20510:	e0bffd17 	ldw	r2,-12(fp)
   20514:	10000816 	blt	r2,zero,20538 <lseek+0x48>
   20518:	01400304 	movi	r5,12
   2051c:	e13ffd17 	ldw	r4,-12(fp)
   20520:	000d8d40 	call	d8d4 <__mulsi3>
   20524:	1007883a 	mov	r3,r2
   20528:	008000f4 	movhi	r2,3
   2052c:	10b0c004 	addi	r2,r2,-15616
   20530:	1885883a 	add	r2,r3,r2
   20534:	00000106 	br	2053c <lseek+0x4c>
   20538:	0005883a 	mov	r2,zero
   2053c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   20540:	e0bffc17 	ldw	r2,-16(fp)
   20544:	10001026 	beq	r2,zero,20588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   20548:	e0bffc17 	ldw	r2,-16(fp)
   2054c:	10800017 	ldw	r2,0(r2)
   20550:	10800717 	ldw	r2,28(r2)
   20554:	10000926 	beq	r2,zero,2057c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   20558:	e0bffc17 	ldw	r2,-16(fp)
   2055c:	10800017 	ldw	r2,0(r2)
   20560:	10800717 	ldw	r2,28(r2)
   20564:	e1bfff17 	ldw	r6,-4(fp)
   20568:	e17ffe17 	ldw	r5,-8(fp)
   2056c:	e13ffc17 	ldw	r4,-16(fp)
   20570:	103ee83a 	callr	r2
   20574:	e0bffb15 	stw	r2,-20(fp)
   20578:	00000506 	br	20590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2057c:	00bfde84 	movi	r2,-134
   20580:	e0bffb15 	stw	r2,-20(fp)
   20584:	00000206 	br	20590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   20588:	00bfebc4 	movi	r2,-81
   2058c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   20590:	e0bffb17 	ldw	r2,-20(fp)
   20594:	1000070e 	bge	r2,zero,205b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   20598:	00204b40 	call	204b4 <alt_get_errno>
   2059c:	1007883a 	mov	r3,r2
   205a0:	e0bffb17 	ldw	r2,-20(fp)
   205a4:	0085c83a 	sub	r2,zero,r2
   205a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   205ac:	00bfffc4 	movi	r2,-1
   205b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   205b4:	e0bffb17 	ldw	r2,-20(fp)
}
   205b8:	e037883a 	mov	sp,fp
   205bc:	dfc00117 	ldw	ra,4(sp)
   205c0:	df000017 	ldw	fp,0(sp)
   205c4:	dec00204 	addi	sp,sp,8
   205c8:	f800283a 	ret

000205cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   205cc:	defffd04 	addi	sp,sp,-12
   205d0:	dfc00215 	stw	ra,8(sp)
   205d4:	df000115 	stw	fp,4(sp)
   205d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   205dc:	0009883a 	mov	r4,zero
   205e0:	0020b580 	call	20b58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   205e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   205e8:	0020b900 	call	20b90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   205ec:	018000f4 	movhi	r6,3
   205f0:	31ae7804 	addi	r6,r6,-17952
   205f4:	014000f4 	movhi	r5,3
   205f8:	296e7804 	addi	r5,r5,-17952
   205fc:	010000f4 	movhi	r4,3
   20600:	212e7804 	addi	r4,r4,-17952
   20604:	0023dec0 	call	23dec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20608:	00238f80 	call	238f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2060c:	010000b4 	movhi	r4,2
   20610:	210e5604 	addi	r4,r4,14680
   20614:	00247840 	call	24784 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20618:	d0b25217 	ldw	r2,-14008(gp)
   2061c:	d0f25317 	ldw	r3,-14004(gp)
   20620:	d1325417 	ldw	r4,-14000(gp)
   20624:	200d883a 	mov	r6,r4
   20628:	180b883a 	mov	r5,r3
   2062c:	1009883a 	mov	r4,r2
   20630:	000ac140 	call	ac14 <main>
   20634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20638:	01000044 	movi	r4,1
   2063c:	001ff280 	call	1ff28 <close>
  exit (result);
   20640:	e13fff17 	ldw	r4,-4(fp)
   20644:	00247980 	call	24798 <exit>

00020648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   20648:	defffe04 	addi	sp,sp,-8
   2064c:	df000115 	stw	fp,4(sp)
   20650:	df000104 	addi	fp,sp,4
   20654:	e13fff15 	stw	r4,-4(fp)
}
   20658:	0001883a 	nop
   2065c:	e037883a 	mov	sp,fp
   20660:	df000017 	ldw	fp,0(sp)
   20664:	dec00104 	addi	sp,sp,4
   20668:	f800283a 	ret

0002066c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2066c:	defffe04 	addi	sp,sp,-8
   20670:	df000115 	stw	fp,4(sp)
   20674:	df000104 	addi	fp,sp,4
   20678:	e13fff15 	stw	r4,-4(fp)
}
   2067c:	0001883a 	nop
   20680:	e037883a 	mov	sp,fp
   20684:	df000017 	ldw	fp,0(sp)
   20688:	dec00104 	addi	sp,sp,4
   2068c:	f800283a 	ret

00020690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20690:	defffe04 	addi	sp,sp,-8
   20694:	dfc00115 	stw	ra,4(sp)
   20698:	df000015 	stw	fp,0(sp)
   2069c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   206a0:	d0a5bd17 	ldw	r2,-26892(gp)
   206a4:	10000326 	beq	r2,zero,206b4 <alt_get_errno+0x24>
   206a8:	d0a5bd17 	ldw	r2,-26892(gp)
   206ac:	103ee83a 	callr	r2
   206b0:	00000106 	br	206b8 <alt_get_errno+0x28>
   206b4:	d0b24e04 	addi	r2,gp,-14024
}
   206b8:	e037883a 	mov	sp,fp
   206bc:	dfc00117 	ldw	ra,4(sp)
   206c0:	df000017 	ldw	fp,0(sp)
   206c4:	dec00204 	addi	sp,sp,8
   206c8:	f800283a 	ret

000206cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   206cc:	defff904 	addi	sp,sp,-28
   206d0:	dfc00615 	stw	ra,24(sp)
   206d4:	df000515 	stw	fp,20(sp)
   206d8:	df000504 	addi	fp,sp,20
   206dc:	e13ffd15 	stw	r4,-12(fp)
   206e0:	e17ffe15 	stw	r5,-8(fp)
   206e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   206e8:	e0bffd17 	ldw	r2,-12(fp)
   206ec:	10000816 	blt	r2,zero,20710 <read+0x44>
   206f0:	01400304 	movi	r5,12
   206f4:	e13ffd17 	ldw	r4,-12(fp)
   206f8:	000d8d40 	call	d8d4 <__mulsi3>
   206fc:	1007883a 	mov	r3,r2
   20700:	008000f4 	movhi	r2,3
   20704:	10b0c004 	addi	r2,r2,-15616
   20708:	1885883a 	add	r2,r3,r2
   2070c:	00000106 	br	20714 <read+0x48>
   20710:	0005883a 	mov	r2,zero
   20714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20718:	e0bffb17 	ldw	r2,-20(fp)
   2071c:	10002226 	beq	r2,zero,207a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   20720:	e0bffb17 	ldw	r2,-20(fp)
   20724:	10800217 	ldw	r2,8(r2)
   20728:	108000cc 	andi	r2,r2,3
   2072c:	10800060 	cmpeqi	r2,r2,1
   20730:	1000181e 	bne	r2,zero,20794 <read+0xc8>
        (fd->dev->read))
   20734:	e0bffb17 	ldw	r2,-20(fp)
   20738:	10800017 	ldw	r2,0(r2)
   2073c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   20740:	10001426 	beq	r2,zero,20794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   20744:	e0bffb17 	ldw	r2,-20(fp)
   20748:	10800017 	ldw	r2,0(r2)
   2074c:	10800517 	ldw	r2,20(r2)
   20750:	e0ffff17 	ldw	r3,-4(fp)
   20754:	180d883a 	mov	r6,r3
   20758:	e17ffe17 	ldw	r5,-8(fp)
   2075c:	e13ffb17 	ldw	r4,-20(fp)
   20760:	103ee83a 	callr	r2
   20764:	e0bffc15 	stw	r2,-16(fp)
   20768:	e0bffc17 	ldw	r2,-16(fp)
   2076c:	1000070e 	bge	r2,zero,2078c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   20770:	00206900 	call	20690 <alt_get_errno>
   20774:	1007883a 	mov	r3,r2
   20778:	e0bffc17 	ldw	r2,-16(fp)
   2077c:	0085c83a 	sub	r2,zero,r2
   20780:	18800015 	stw	r2,0(r3)
          return -1;
   20784:	00bfffc4 	movi	r2,-1
   20788:	00000c06 	br	207bc <read+0xf0>
        }
        return rval;
   2078c:	e0bffc17 	ldw	r2,-16(fp)
   20790:	00000a06 	br	207bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   20794:	00206900 	call	20690 <alt_get_errno>
   20798:	1007883a 	mov	r3,r2
   2079c:	00800344 	movi	r2,13
   207a0:	18800015 	stw	r2,0(r3)
   207a4:	00000406 	br	207b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   207a8:	00206900 	call	20690 <alt_get_errno>
   207ac:	1007883a 	mov	r3,r2
   207b0:	00801444 	movi	r2,81
   207b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   207b8:	00bfffc4 	movi	r2,-1
}
   207bc:	e037883a 	mov	sp,fp
   207c0:	dfc00117 	ldw	ra,4(sp)
   207c4:	df000017 	ldw	fp,0(sp)
   207c8:	dec00204 	addi	sp,sp,8
   207cc:	f800283a 	ret

000207d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   207d0:	defffc04 	addi	sp,sp,-16
   207d4:	dfc00315 	stw	ra,12(sp)
   207d8:	df000215 	stw	fp,8(sp)
   207dc:	dc000115 	stw	r16,4(sp)
   207e0:	df000204 	addi	fp,sp,8
   207e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   207e8:	e0bffe17 	ldw	r2,-8(fp)
   207ec:	108000d0 	cmplti	r2,r2,3
   207f0:	1000111e 	bne	r2,zero,20838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   207f4:	040000f4 	movhi	r16,3
   207f8:	8430c004 	addi	r16,r16,-15616
   207fc:	e0bffe17 	ldw	r2,-8(fp)
   20800:	01400304 	movi	r5,12
   20804:	1009883a 	mov	r4,r2
   20808:	000d8d40 	call	d8d4 <__mulsi3>
   2080c:	8085883a 	add	r2,r16,r2
   20810:	10800204 	addi	r2,r2,8
   20814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20818:	040000f4 	movhi	r16,3
   2081c:	8430c004 	addi	r16,r16,-15616
   20820:	e0bffe17 	ldw	r2,-8(fp)
   20824:	01400304 	movi	r5,12
   20828:	1009883a 	mov	r4,r2
   2082c:	000d8d40 	call	d8d4 <__mulsi3>
   20830:	8085883a 	add	r2,r16,r2
   20834:	10000015 	stw	zero,0(r2)
  }
}
   20838:	0001883a 	nop
   2083c:	e6ffff04 	addi	sp,fp,-4
   20840:	dfc00217 	ldw	ra,8(sp)
   20844:	df000117 	ldw	fp,4(sp)
   20848:	dc000017 	ldw	r16,0(sp)
   2084c:	dec00304 	addi	sp,sp,12
   20850:	f800283a 	ret

00020854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   20854:	defff904 	addi	sp,sp,-28
   20858:	df000615 	stw	fp,24(sp)
   2085c:	df000604 	addi	fp,sp,24
   20860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20864:	0005303a 	rdctl	r2,status
   20868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2086c:	e0fffe17 	ldw	r3,-8(fp)
   20870:	00bfff84 	movi	r2,-2
   20874:	1884703a 	and	r2,r3,r2
   20878:	1001703a 	wrctl	status,r2
  
  return context;
   2087c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   20880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   20884:	d0a5be17 	ldw	r2,-26888(gp)
   20888:	10c000c4 	addi	r3,r2,3
   2088c:	00bfff04 	movi	r2,-4
   20890:	1884703a 	and	r2,r3,r2
   20894:	d0a5be15 	stw	r2,-26888(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   20898:	d0e5be17 	ldw	r3,-26888(gp)
   2089c:	e0bfff17 	ldw	r2,-4(fp)
   208a0:	1887883a 	add	r3,r3,r2
   208a4:	00810034 	movhi	r2,1024
   208a8:	10800004 	addi	r2,r2,0
   208ac:	10c0062e 	bgeu	r2,r3,208c8 <sbrk+0x74>
   208b0:	e0bffb17 	ldw	r2,-20(fp)
   208b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   208b8:	e0bffa17 	ldw	r2,-24(fp)
   208bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   208c0:	00bfffc4 	movi	r2,-1
   208c4:	00000b06 	br	208f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   208c8:	d0a5be17 	ldw	r2,-26888(gp)
   208cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   208d0:	d0e5be17 	ldw	r3,-26888(gp)
   208d4:	e0bfff17 	ldw	r2,-4(fp)
   208d8:	1885883a 	add	r2,r3,r2
   208dc:	d0a5be15 	stw	r2,-26888(gp)
   208e0:	e0bffb17 	ldw	r2,-20(fp)
   208e4:	e0bffc15 	stw	r2,-16(fp)
   208e8:	e0bffc17 	ldw	r2,-16(fp)
   208ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   208f0:	e0bffd17 	ldw	r2,-12(fp)
} 
   208f4:	e037883a 	mov	sp,fp
   208f8:	df000017 	ldw	fp,0(sp)
   208fc:	dec00104 	addi	sp,sp,4
   20900:	f800283a 	ret

00020904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20904:	defffe04 	addi	sp,sp,-8
   20908:	dfc00115 	stw	ra,4(sp)
   2090c:	df000015 	stw	fp,0(sp)
   20910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20914:	d0a5bd17 	ldw	r2,-26892(gp)
   20918:	10000326 	beq	r2,zero,20928 <alt_get_errno+0x24>
   2091c:	d0a5bd17 	ldw	r2,-26892(gp)
   20920:	103ee83a 	callr	r2
   20924:	00000106 	br	2092c <alt_get_errno+0x28>
   20928:	d0b24e04 	addi	r2,gp,-14024
}
   2092c:	e037883a 	mov	sp,fp
   20930:	dfc00117 	ldw	ra,4(sp)
   20934:	df000017 	ldw	fp,0(sp)
   20938:	dec00204 	addi	sp,sp,8
   2093c:	f800283a 	ret

00020940 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   20940:	defffc04 	addi	sp,sp,-16
   20944:	dfc00315 	stw	ra,12(sp)
   20948:	df000215 	stw	fp,8(sp)
   2094c:	df000204 	addi	fp,sp,8
   20950:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20954:	d0b25717 	ldw	r2,-13988(gp)
  clock_t ticks = alt_nticks(); 
   20958:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2095c:	d0b25617 	ldw	r2,-13992(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   20960:	1000061e 	bne	r2,zero,2097c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   20964:	00209040 	call	20904 <alt_get_errno>
   20968:	1007883a 	mov	r3,r2
   2096c:	00801604 	movi	r2,88
   20970:	18800015 	stw	r2,0(r3)
    return 0;
   20974:	0005883a 	mov	r2,zero
   20978:	00000a06 	br	209a4 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   2097c:	e0bfff17 	ldw	r2,-4(fp)
   20980:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   20984:	e0bfff17 	ldw	r2,-4(fp)
   20988:	e0fffe17 	ldw	r3,-8(fp)
   2098c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   20990:	e0bfff17 	ldw	r2,-4(fp)
   20994:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   20998:	e0bfff17 	ldw	r2,-4(fp)
   2099c:	10000315 	stw	zero,12(r2)

  return ticks;
   209a0:	e0bffe17 	ldw	r2,-8(fp)
}
   209a4:	e037883a 	mov	sp,fp
   209a8:	dfc00117 	ldw	ra,4(sp)
   209ac:	df000017 	ldw	fp,0(sp)
   209b0:	dec00204 	addi	sp,sp,8
   209b4:	f800283a 	ret

000209b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   209b8:	defffd04 	addi	sp,sp,-12
   209bc:	dfc00215 	stw	ra,8(sp)
   209c0:	df000115 	stw	fp,4(sp)
   209c4:	df000104 	addi	fp,sp,4
   209c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   209cc:	e13fff17 	ldw	r4,-4(fp)
   209d0:	00236a00 	call	236a0 <alt_busy_sleep>
}
   209d4:	e037883a 	mov	sp,fp
   209d8:	dfc00117 	ldw	ra,4(sp)
   209dc:	df000017 	ldw	fp,0(sp)
   209e0:	dec00204 	addi	sp,sp,8
   209e4:	f800283a 	ret

000209e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   209e8:	defffe04 	addi	sp,sp,-8
   209ec:	dfc00115 	stw	ra,4(sp)
   209f0:	df000015 	stw	fp,0(sp)
   209f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   209f8:	d0a5bd17 	ldw	r2,-26892(gp)
   209fc:	10000326 	beq	r2,zero,20a0c <alt_get_errno+0x24>
   20a00:	d0a5bd17 	ldw	r2,-26892(gp)
   20a04:	103ee83a 	callr	r2
   20a08:	00000106 	br	20a10 <alt_get_errno+0x28>
   20a0c:	d0b24e04 	addi	r2,gp,-14024
}
   20a10:	e037883a 	mov	sp,fp
   20a14:	dfc00117 	ldw	ra,4(sp)
   20a18:	df000017 	ldw	fp,0(sp)
   20a1c:	dec00204 	addi	sp,sp,8
   20a20:	f800283a 	ret

00020a24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20a24:	defff904 	addi	sp,sp,-28
   20a28:	dfc00615 	stw	ra,24(sp)
   20a2c:	df000515 	stw	fp,20(sp)
   20a30:	df000504 	addi	fp,sp,20
   20a34:	e13ffd15 	stw	r4,-12(fp)
   20a38:	e17ffe15 	stw	r5,-8(fp)
   20a3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20a40:	e0bffd17 	ldw	r2,-12(fp)
   20a44:	10000816 	blt	r2,zero,20a68 <write+0x44>
   20a48:	01400304 	movi	r5,12
   20a4c:	e13ffd17 	ldw	r4,-12(fp)
   20a50:	000d8d40 	call	d8d4 <__mulsi3>
   20a54:	1007883a 	mov	r3,r2
   20a58:	008000f4 	movhi	r2,3
   20a5c:	10b0c004 	addi	r2,r2,-15616
   20a60:	1885883a 	add	r2,r3,r2
   20a64:	00000106 	br	20a6c <write+0x48>
   20a68:	0005883a 	mov	r2,zero
   20a6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20a70:	e0bffb17 	ldw	r2,-20(fp)
   20a74:	10002126 	beq	r2,zero,20afc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20a78:	e0bffb17 	ldw	r2,-20(fp)
   20a7c:	10800217 	ldw	r2,8(r2)
   20a80:	108000cc 	andi	r2,r2,3
   20a84:	10001826 	beq	r2,zero,20ae8 <write+0xc4>
   20a88:	e0bffb17 	ldw	r2,-20(fp)
   20a8c:	10800017 	ldw	r2,0(r2)
   20a90:	10800617 	ldw	r2,24(r2)
   20a94:	10001426 	beq	r2,zero,20ae8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20a98:	e0bffb17 	ldw	r2,-20(fp)
   20a9c:	10800017 	ldw	r2,0(r2)
   20aa0:	10800617 	ldw	r2,24(r2)
   20aa4:	e0ffff17 	ldw	r3,-4(fp)
   20aa8:	180d883a 	mov	r6,r3
   20aac:	e17ffe17 	ldw	r5,-8(fp)
   20ab0:	e13ffb17 	ldw	r4,-20(fp)
   20ab4:	103ee83a 	callr	r2
   20ab8:	e0bffc15 	stw	r2,-16(fp)
   20abc:	e0bffc17 	ldw	r2,-16(fp)
   20ac0:	1000070e 	bge	r2,zero,20ae0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   20ac4:	00209e80 	call	209e8 <alt_get_errno>
   20ac8:	1007883a 	mov	r3,r2
   20acc:	e0bffc17 	ldw	r2,-16(fp)
   20ad0:	0085c83a 	sub	r2,zero,r2
   20ad4:	18800015 	stw	r2,0(r3)
        return -1;
   20ad8:	00bfffc4 	movi	r2,-1
   20adc:	00000c06 	br	20b10 <write+0xec>
      }
      return rval;
   20ae0:	e0bffc17 	ldw	r2,-16(fp)
   20ae4:	00000a06 	br	20b10 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20ae8:	00209e80 	call	209e8 <alt_get_errno>
   20aec:	1007883a 	mov	r3,r2
   20af0:	00800344 	movi	r2,13
   20af4:	18800015 	stw	r2,0(r3)
   20af8:	00000406 	br	20b0c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20afc:	00209e80 	call	209e8 <alt_get_errno>
   20b00:	1007883a 	mov	r3,r2
   20b04:	00801444 	movi	r2,81
   20b08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20b0c:	00bfffc4 	movi	r2,-1
}
   20b10:	e037883a 	mov	sp,fp
   20b14:	dfc00117 	ldw	ra,4(sp)
   20b18:	df000017 	ldw	fp,0(sp)
   20b1c:	dec00204 	addi	sp,sp,8
   20b20:	f800283a 	ret

00020b24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20b24:	defffd04 	addi	sp,sp,-12
   20b28:	dfc00215 	stw	ra,8(sp)
   20b2c:	df000115 	stw	fp,4(sp)
   20b30:	df000104 	addi	fp,sp,4
   20b34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20b38:	d165ba04 	addi	r5,gp,-26904
   20b3c:	e13fff17 	ldw	r4,-4(fp)
   20b40:	00238540 	call	23854 <alt_dev_llist_insert>
}
   20b44:	e037883a 	mov	sp,fp
   20b48:	dfc00117 	ldw	ra,4(sp)
   20b4c:	df000017 	ldw	fp,0(sp)
   20b50:	dec00204 	addi	sp,sp,8
   20b54:	f800283a 	ret

00020b58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20b58:	defffd04 	addi	sp,sp,-12
   20b5c:	dfc00215 	stw	ra,8(sp)
   20b60:	df000115 	stw	fp,4(sp)
   20b64:	df000104 	addi	fp,sp,4
   20b68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   20b6c:	00244f80 	call	244f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20b70:	00800044 	movi	r2,1
   20b74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20b78:	0001883a 	nop
   20b7c:	e037883a 	mov	sp,fp
   20b80:	dfc00117 	ldw	ra,4(sp)
   20b84:	df000017 	ldw	fp,0(sp)
   20b88:	dec00204 	addi	sp,sp,8
   20b8c:	f800283a 	ret

00020b90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20b90:	defffe04 	addi	sp,sp,-8
   20b94:	dfc00115 	stw	ra,4(sp)
   20b98:	df000015 	stw	fp,0(sp)
   20b9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20ba0:	01c0fa04 	movi	r7,1000
   20ba4:	01800084 	movi	r6,2
   20ba8:	000b883a 	mov	r5,zero
   20bac:	01010034 	movhi	r4,1024
   20bb0:	21042004 	addi	r4,r4,4224
   20bb4:	00234f80 	call	234f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   20bb8:	010000f4 	movhi	r4,3
   20bbc:	21312004 	addi	r4,r4,-15232
   20bc0:	0020e540 	call	20e54 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20bc4:	01800044 	movi	r6,1
   20bc8:	000b883a 	mov	r5,zero
   20bcc:	010000f4 	movhi	r4,3
   20bd0:	21313804 	addi	r4,r4,-15136
   20bd4:	00229800 	call	22980 <altera_avalon_jtag_uart_init>
   20bd8:	010000f4 	movhi	r4,3
   20bdc:	21312e04 	addi	r4,r4,-15176
   20be0:	0020b240 	call	20b24 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   20be4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   20be8:	0001883a 	nop
}
   20bec:	0001883a 	nop
   20bf0:	e037883a 	mov	sp,fp
   20bf4:	dfc00117 	ldw	ra,4(sp)
   20bf8:	df000017 	ldw	fp,0(sp)
   20bfc:	dec00204 	addi	sp,sp,8
   20c00:	f800283a 	ret

00020c04 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   20c04:	defff904 	addi	sp,sp,-28
   20c08:	dfc00615 	stw	ra,24(sp)
   20c0c:	df000515 	stw	fp,20(sp)
   20c10:	df000504 	addi	fp,sp,20
   20c14:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   20c18:	008000b4 	movhi	r2,2
   20c1c:	10a1a804 	addi	r2,r2,-31072
   20c20:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   20c24:	e0bfff17 	ldw	r2,-4(fp)
   20c28:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   20c2c:	e0bffc17 	ldw	r2,-16(fp)
   20c30:	10800717 	ldw	r2,28(r2)
   20c34:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   20c38:	e0bffd17 	ldw	r2,-12(fp)
   20c3c:	10800217 	ldw	r2,8(r2)
   20c40:	10800098 	cmpnei	r2,r2,2
   20c44:	1000251e 	bne	r2,zero,20cdc <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   20c48:	e0bffd17 	ldw	r2,-12(fp)
   20c4c:	10c00017 	ldw	r3,0(r2)
   20c50:	e0bffd17 	ldw	r2,-12(fp)
   20c54:	10800117 	ldw	r2,4(r2)
   20c58:	e13ffe04 	addi	r4,fp,-8
   20c5c:	200f883a 	mov	r7,r4
   20c60:	100d883a 	mov	r6,r2
   20c64:	180b883a 	mov	r5,r3
   20c68:	e13ffc17 	ldw	r4,-16(fp)
   20c6c:	00213b40 	call	213b4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   20c70:	e0bffd17 	ldw	r2,-12(fp)
   20c74:	10c00117 	ldw	r3,4(r2)
   20c78:	e0bffe17 	ldw	r2,-8(fp)
   20c7c:	1887c83a 	sub	r3,r3,r2
   20c80:	e0bffd17 	ldw	r2,-12(fp)
   20c84:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   20c88:	e0bffd17 	ldw	r2,-12(fp)
   20c8c:	10c00017 	ldw	r3,0(r2)
   20c90:	e0bffe17 	ldw	r2,-8(fp)
   20c94:	1887883a 	add	r3,r3,r2
   20c98:	e0bffd17 	ldw	r2,-12(fp)
   20c9c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   20ca0:	e0bffd17 	ldw	r2,-12(fp)
   20ca4:	10800117 	ldw	r2,4(r2)
   20ca8:	10000c26 	beq	r2,zero,20cdc <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20cac:	01400704 	movi	r5,28
   20cb0:	e13ffc17 	ldw	r4,-16(fp)
   20cb4:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20cb8:	01400084 	movi	r5,2
   20cbc:	e13ffc17 	ldw	r4,-16(fp)
   20cc0:	00226100 	call	22610 <alt_avalon_i2c_int_enable>
   20cc4:	00000e06 	br	20d00 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   20cc8:	e0bffb17 	ldw	r2,-20(fp)
   20ccc:	10bfffc4 	addi	r2,r2,-1
   20cd0:	e0bffb15 	stw	r2,-20(fp)
   20cd4:	e0bffb17 	ldw	r2,-20(fp)
   20cd8:	10000426 	beq	r2,zero,20cec <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   20cdc:	e13ffc17 	ldw	r4,-16(fp)
   20ce0:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   20ce4:	103ff81e 	bne	r2,zero,20cc8 <__alt_data_end+0xfc020cc8>
   20ce8:	00000106 	br	20cf0 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   20cec:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   20cf0:	e13ffc17 	ldw	r4,-16(fp)
   20cf4:	00210180 	call	21018 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   20cf8:	e0bffd17 	ldw	r2,-12(fp)
   20cfc:	10000215 	stw	zero,8(r2)
}
   20d00:	e037883a 	mov	sp,fp
   20d04:	dfc00117 	ldw	ra,4(sp)
   20d08:	df000017 	ldw	fp,0(sp)
   20d0c:	dec00204 	addi	sp,sp,8
   20d10:	f800283a 	ret

00020d14 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   20d14:	defffc04 	addi	sp,sp,-16
   20d18:	dfc00315 	stw	ra,12(sp)
   20d1c:	df000215 	stw	fp,8(sp)
   20d20:	df000204 	addi	fp,sp,8
   20d24:	e13ffe15 	stw	r4,-8(fp)
   20d28:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   20d2c:	e0bfff17 	ldw	r2,-4(fp)
   20d30:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   20d34:	e1ffff17 	ldw	r7,-4(fp)
   20d38:	000d883a 	mov	r6,zero
   20d3c:	014000b4 	movhi	r5,2
   20d40:	29430104 	addi	r5,r5,3076
   20d44:	e13ffe17 	ldw	r4,-8(fp)
   20d48:	0020e000 	call	20e00 <alt_avalon_i2c_register_callback>
}
   20d4c:	0001883a 	nop
   20d50:	e037883a 	mov	sp,fp
   20d54:	dfc00117 	ldw	ra,4(sp)
   20d58:	df000017 	ldw	fp,0(sp)
   20d5c:	dec00204 	addi	sp,sp,8
   20d60:	f800283a 	ret

00020d64 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   20d64:	defff904 	addi	sp,sp,-28
   20d68:	dfc00615 	stw	ra,24(sp)
   20d6c:	df000515 	stw	fp,20(sp)
   20d70:	df000504 	addi	fp,sp,20
   20d74:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   20d78:	e0bfff17 	ldw	r2,-4(fp)
   20d7c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20d80:	014007c4 	movi	r5,31
   20d84:	e13ffb17 	ldw	r4,-20(fp)
   20d88:	00225a80 	call	225a8 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d8c:	01400704 	movi	r5,28
   20d90:	e13ffb17 	ldw	r4,-20(fp)
   20d94:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20d98:	e0bffb17 	ldw	r2,-20(fp)
   20d9c:	10800617 	ldw	r2,24(r2)
   20da0:	10001126 	beq	r2,zero,20de8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20da4:	0005303a 	rdctl	r2,status
   20da8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20dac:	e0fffd17 	ldw	r3,-12(fp)
   20db0:	00bfff84 	movi	r2,-2
   20db4:	1884703a 	and	r2,r3,r2
   20db8:	1001703a 	wrctl	status,r2
  
  return context;
   20dbc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   20dc0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   20dc4:	e0bffb17 	ldw	r2,-20(fp)
   20dc8:	10800617 	ldw	r2,24(r2)
   20dcc:	e13ffb17 	ldw	r4,-20(fp)
   20dd0:	103ee83a 	callr	r2
   20dd4:	e0bffc17 	ldw	r2,-16(fp)
   20dd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ddc:	e0bffe17 	ldw	r2,-8(fp)
   20de0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   20de4:	0001883a 	nop
   20de8:	0001883a 	nop
}
   20dec:	e037883a 	mov	sp,fp
   20df0:	dfc00117 	ldw	ra,4(sp)
   20df4:	df000017 	ldw	fp,0(sp)
   20df8:	dec00204 	addi	sp,sp,8
   20dfc:	f800283a 	ret

00020e00 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   20e00:	defffb04 	addi	sp,sp,-20
   20e04:	df000415 	stw	fp,16(sp)
   20e08:	df000404 	addi	fp,sp,16
   20e0c:	e13ffc15 	stw	r4,-16(fp)
   20e10:	e17ffd15 	stw	r5,-12(fp)
   20e14:	e1bffe15 	stw	r6,-8(fp)
   20e18:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   20e1c:	e0bffc17 	ldw	r2,-16(fp)
   20e20:	e0fffd17 	ldw	r3,-12(fp)
   20e24:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   20e28:	e0bffc17 	ldw	r2,-16(fp)
   20e2c:	e0ffff17 	ldw	r3,-4(fp)
   20e30:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20e34:	e0bffc17 	ldw	r2,-16(fp)
   20e38:	e0fffe17 	ldw	r3,-8(fp)
   20e3c:	10c00815 	stw	r3,32(r2)

    return ;
   20e40:	0001883a 	nop
}
   20e44:	e037883a 	mov	sp,fp
   20e48:	df000017 	ldw	fp,0(sp)
   20e4c:	dec00104 	addi	sp,sp,4
   20e50:	f800283a 	ret

00020e54 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20e54:	defff704 	addi	sp,sp,-36
   20e58:	dfc00815 	stw	ra,32(sp)
   20e5c:	df000715 	stw	fp,28(sp)
   20e60:	df000704 	addi	fp,sp,28
   20e64:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20e68:	e13fff17 	ldw	r4,-4(fp)
   20e6c:	00210180 	call	21018 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20e70:	014007c4 	movi	r5,31
   20e74:	e13fff17 	ldw	r4,-4(fp)
   20e78:	00225a80 	call	225a8 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e7c:	01400704 	movi	r5,28
   20e80:	e13fff17 	ldw	r4,-4(fp)
   20e84:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20e88:	014000c4 	movi	r5,3
   20e8c:	e13fff17 	ldw	r4,-4(fp)
   20e90:	00227b40 	call	227b4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   20e94:	014000c4 	movi	r5,3
   20e98:	e13fff17 	ldw	r4,-4(fp)
   20e9c:	00227040 	call	22704 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   20ea0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   20ea4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   20ea8:	e0bffb04 	addi	r2,fp,-20
   20eac:	018000b4 	movhi	r6,2
   20eb0:	31a1a804 	addi	r6,r6,-31072
   20eb4:	100b883a 	mov	r5,r2
   20eb8:	e13fff17 	ldw	r4,-4(fp)
   20ebc:	00212740 	call	21274 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   20ec0:	e0bffb04 	addi	r2,fp,-20
   20ec4:	100b883a 	mov	r5,r2
   20ec8:	e13fff17 	ldw	r4,-4(fp)
   20ecc:	00211140 	call	21114 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   20ed0:	d165bf04 	addi	r5,gp,-26884
   20ed4:	e13fff17 	ldw	r4,-4(fp)
   20ed8:	00238540 	call	23854 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   20edc:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   20ee0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   20ee4:	e0bffa17 	ldw	r2,-24(fp)
   20ee8:	10000c1e 	bne	r2,zero,20f1c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   20eec:	e0bfff17 	ldw	r2,-4(fp)
   20ef0:	10c00417 	ldw	r3,16(r2)
   20ef4:	e0bfff17 	ldw	r2,-4(fp)
   20ef8:	10800517 	ldw	r2,20(r2)
   20efc:	d8000015 	stw	zero,0(sp)
   20f00:	e1ffff17 	ldw	r7,-4(fp)
   20f04:	018000b4 	movhi	r6,2
   20f08:	31835904 	addi	r6,r6,3428
   20f0c:	100b883a 	mov	r5,r2
   20f10:	1809883a 	mov	r4,r3
   20f14:	0023a680 	call	23a68 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   20f18:	00000406 	br	20f2c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   20f1c:	010000f4 	movhi	r4,3
   20f20:	212e8504 	addi	r4,r4,-17900
   20f24:	00240ec0 	call	240ec <alt_printf>
    }

    return;
   20f28:	0001883a 	nop

}
   20f2c:	e037883a 	mov	sp,fp
   20f30:	dfc00117 	ldw	ra,4(sp)
   20f34:	df000017 	ldw	fp,0(sp)
   20f38:	dec00204 	addi	sp,sp,8
   20f3c:	f800283a 	ret

00020f40 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   20f40:	defffc04 	addi	sp,sp,-16
   20f44:	dfc00315 	stw	ra,12(sp)
   20f48:	df000215 	stw	fp,8(sp)
   20f4c:	df000204 	addi	fp,sp,8
   20f50:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   20f54:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20f58:	d165bf04 	addi	r5,gp,-26884
   20f5c:	e13fff17 	ldw	r4,-4(fp)
   20f60:	00239b80 	call	239b8 <alt_find_dev>
   20f64:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   20f68:	e0bffe17 	ldw	r2,-8(fp)
}
   20f6c:	e037883a 	mov	sp,fp
   20f70:	dfc00117 	ldw	ra,4(sp)
   20f74:	df000017 	ldw	fp,0(sp)
   20f78:	dec00204 	addi	sp,sp,8
   20f7c:	f800283a 	ret

00020f80 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20f80:	defffc04 	addi	sp,sp,-16
   20f84:	df000315 	stw	fp,12(sp)
   20f88:	df000304 	addi	fp,sp,12
   20f8c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20f90:	e0bfff17 	ldw	r2,-4(fp)
   20f94:	10800717 	ldw	r2,28(r2)
   20f98:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20f9c:	e0bfff17 	ldw	r2,-4(fp)
   20fa0:	10800317 	ldw	r2,12(r2)
   20fa4:	10800204 	addi	r2,r2,8
   20fa8:	10800037 	ldwio	r2,0(r2)
   20fac:	1080004c 	andi	r2,r2,1
   20fb0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   20fb4:	e0bffe17 	ldw	r2,-8(fp)
   20fb8:	10000226 	beq	r2,zero,20fc4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20fbc:	00bffe44 	movi	r2,-7
   20fc0:	00001106 	br	21008 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20fc4:	e0bfff17 	ldw	r2,-4(fp)
   20fc8:	10c00617 	ldw	r3,24(r2)
   20fcc:	008000b4 	movhi	r2,2
   20fd0:	10830104 	addi	r2,r2,3076
   20fd4:	1880021e 	bne	r3,r2,20fe0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   20fd8:	e0bffd17 	ldw	r2,-12(fp)
   20fdc:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20fe0:	e0bfff17 	ldw	r2,-4(fp)
   20fe4:	10800317 	ldw	r2,12(r2)
   20fe8:	10800204 	addi	r2,r2,8
   20fec:	e0ffff17 	ldw	r3,-4(fp)
   20ff0:	18c00317 	ldw	r3,12(r3)
   20ff4:	18c00204 	addi	r3,r3,8
   20ff8:	18c00037 	ldwio	r3,0(r3)
   20ffc:	18c00054 	ori	r3,r3,1
   21000:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   21004:	0005883a 	mov	r2,zero
}
   21008:	e037883a 	mov	sp,fp
   2100c:	df000017 	ldw	fp,0(sp)
   21010:	dec00104 	addi	sp,sp,4
   21014:	f800283a 	ret

00021018 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21018:	defffe04 	addi	sp,sp,-8
   2101c:	df000115 	stw	fp,4(sp)
   21020:	df000104 	addi	fp,sp,4
   21024:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   21028:	e0bfff17 	ldw	r2,-4(fp)
   2102c:	10800317 	ldw	r2,12(r2)
   21030:	10800204 	addi	r2,r2,8
   21034:	e0ffff17 	ldw	r3,-4(fp)
   21038:	18c00317 	ldw	r3,12(r3)
   2103c:	18c00204 	addi	r3,r3,8
   21040:	19000037 	ldwio	r4,0(r3)
   21044:	00ffff84 	movi	r3,-2
   21048:	20c6703a 	and	r3,r4,r3
   2104c:	10c00035 	stwio	r3,0(r2)

}
   21050:	0001883a 	nop
   21054:	e037883a 	mov	sp,fp
   21058:	df000017 	ldw	fp,0(sp)
   2105c:	dec00104 	addi	sp,sp,4
   21060:	f800283a 	ret

00021064 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21064:	defffd04 	addi	sp,sp,-12
   21068:	df000215 	stw	fp,8(sp)
   2106c:	df000204 	addi	fp,sp,8
   21070:	e13ffe15 	stw	r4,-8(fp)
   21074:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   21078:	e0bffe17 	ldw	r2,-8(fp)
   2107c:	10c00d17 	ldw	r3,52(r2)
   21080:	e0bfff17 	ldw	r2,-4(fp)
   21084:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   21088:	e0bffe17 	ldw	r2,-8(fp)
   2108c:	10800317 	ldw	r2,12(r2)
   21090:	10800204 	addi	r2,r2,8
   21094:	10800037 	ldwio	r2,0(r2)
   21098:	1080008c 	andi	r2,r2,2
   2109c:	1005d07a 	srai	r2,r2,1
   210a0:	1007883a 	mov	r3,r2
   210a4:	e0bfff17 	ldw	r2,-4(fp)
   210a8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   210ac:	e0bffe17 	ldw	r2,-8(fp)
   210b0:	10800317 	ldw	r2,12(r2)
   210b4:	10800904 	addi	r2,r2,36
   210b8:	10800037 	ldwio	r2,0(r2)
   210bc:	1007883a 	mov	r3,r2
   210c0:	e0bfff17 	ldw	r2,-4(fp)
   210c4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   210c8:	e0bffe17 	ldw	r2,-8(fp)
   210cc:	10800317 	ldw	r2,12(r2)
   210d0:	10800804 	addi	r2,r2,32
   210d4:	10800037 	ldwio	r2,0(r2)
   210d8:	1007883a 	mov	r3,r2
   210dc:	e0bfff17 	ldw	r2,-4(fp)
   210e0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   210e4:	e0bffe17 	ldw	r2,-8(fp)
   210e8:	10800317 	ldw	r2,12(r2)
   210ec:	10800a04 	addi	r2,r2,40
   210f0:	10800037 	ldwio	r2,0(r2)
   210f4:	1007883a 	mov	r3,r2
   210f8:	e0bfff17 	ldw	r2,-4(fp)
   210fc:	10c0030d 	sth	r3,12(r2)
}
   21100:	0001883a 	nop
   21104:	e037883a 	mov	sp,fp
   21108:	df000017 	ldw	fp,0(sp)
   2110c:	dec00104 	addi	sp,sp,4
   21110:	f800283a 	ret

00021114 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21114:	defffd04 	addi	sp,sp,-12
   21118:	df000215 	stw	fp,8(sp)
   2111c:	df000204 	addi	fp,sp,8
   21120:	e13ffe15 	stw	r4,-8(fp)
   21124:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   21128:	e0bfff17 	ldw	r2,-4(fp)
   2112c:	10c00017 	ldw	r3,0(r2)
   21130:	e0bffe17 	ldw	r2,-8(fp)
   21134:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   21138:	e0bffe17 	ldw	r2,-8(fp)
   2113c:	10800317 	ldw	r2,12(r2)
   21140:	10c00204 	addi	r3,r2,8
   21144:	e0bffe17 	ldw	r2,-8(fp)
   21148:	10800317 	ldw	r2,12(r2)
   2114c:	10800204 	addi	r2,r2,8
   21150:	10800037 	ldwio	r2,0(r2)
   21154:	1009883a 	mov	r4,r2
   21158:	00bfff44 	movi	r2,-3
   2115c:	2088703a 	and	r4,r4,r2
   21160:	e0bfff17 	ldw	r2,-4(fp)
   21164:	10800117 	ldw	r2,4(r2)
   21168:	1085883a 	add	r2,r2,r2
   2116c:	1080008c 	andi	r2,r2,2
   21170:	2084b03a 	or	r2,r4,r2
   21174:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   21178:	e0bffe17 	ldw	r2,-8(fp)
   2117c:	10800317 	ldw	r2,12(r2)
   21180:	10800904 	addi	r2,r2,36
   21184:	e0ffff17 	ldw	r3,-4(fp)
   21188:	18c0020b 	ldhu	r3,8(r3)
   2118c:	18ffffcc 	andi	r3,r3,65535
   21190:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   21194:	e0bffe17 	ldw	r2,-8(fp)
   21198:	10800317 	ldw	r2,12(r2)
   2119c:	10800804 	addi	r2,r2,32
   211a0:	e0ffff17 	ldw	r3,-4(fp)
   211a4:	18c0028b 	ldhu	r3,10(r3)
   211a8:	18ffffcc 	andi	r3,r3,65535
   211ac:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   211b0:	e0bffe17 	ldw	r2,-8(fp)
   211b4:	10800317 	ldw	r2,12(r2)
   211b8:	10800a04 	addi	r2,r2,40
   211bc:	e0ffff17 	ldw	r3,-4(fp)
   211c0:	18c0030b 	ldhu	r3,12(r3)
   211c4:	18ffffcc 	andi	r3,r3,65535
   211c8:	10c00035 	stwio	r3,0(r2)
}
   211cc:	0001883a 	nop
   211d0:	e037883a 	mov	sp,fp
   211d4:	df000017 	ldw	fp,0(sp)
   211d8:	dec00104 	addi	sp,sp,4
   211dc:	f800283a 	ret

000211e0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   211e0:	defffb04 	addi	sp,sp,-20
   211e4:	dfc00415 	stw	ra,16(sp)
   211e8:	df000315 	stw	fp,12(sp)
   211ec:	df000304 	addi	fp,sp,12
   211f0:	e13ffd15 	stw	r4,-12(fp)
   211f4:	e17ffe15 	stw	r5,-8(fp)
   211f8:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   211fc:	e0bffe17 	ldw	r2,-8(fp)
   21200:	1080028b 	ldhu	r2,10(r2)
   21204:	10bfffcc 	andi	r2,r2,65535
   21208:	10000426 	beq	r2,zero,2121c <alt_avalon_i2c_master_config_speed_get+0x3c>
   2120c:	e0bffe17 	ldw	r2,-8(fp)
   21210:	1080020b 	ldhu	r2,8(r2)
   21214:	10bfffcc 	andi	r2,r2,65535
   21218:	1000021e 	bne	r2,zero,21224 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   2121c:	00bfff44 	movi	r2,-3
   21220:	00000f06 	br	21260 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   21224:	e0bffd17 	ldw	r2,-12(fp)
   21228:	11000c17 	ldw	r4,48(r2)
   2122c:	e0bffe17 	ldw	r2,-8(fp)
   21230:	1080028b 	ldhu	r2,10(r2)
   21234:	10ffffcc 	andi	r3,r2,65535
   21238:	e0bffe17 	ldw	r2,-8(fp)
   2123c:	1080020b 	ldhu	r2,8(r2)
   21240:	10bfffcc 	andi	r2,r2,65535
   21244:	1885883a 	add	r2,r3,r2
   21248:	100b883a 	mov	r5,r2
   2124c:	000d8180 	call	d818 <__udivsi3>
   21250:	1007883a 	mov	r3,r2
   21254:	e0bfff17 	ldw	r2,-4(fp)
   21258:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2125c:	0005883a 	mov	r2,zero
}
   21260:	e037883a 	mov	sp,fp
   21264:	dfc00117 	ldw	ra,4(sp)
   21268:	df000017 	ldw	fp,0(sp)
   2126c:	dec00204 	addi	sp,sp,8
   21270:	f800283a 	ret

00021274 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   21274:	defff904 	addi	sp,sp,-28
   21278:	dfc00615 	stw	ra,24(sp)
   2127c:	df000515 	stw	fp,20(sp)
   21280:	df000504 	addi	fp,sp,20
   21284:	e13ffd15 	stw	r4,-12(fp)
   21288:	e17ffe15 	stw	r5,-8(fp)
   2128c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   21290:	e0ffff17 	ldw	r3,-4(fp)
   21294:	008001b4 	movhi	r2,6
   21298:	1086a004 	addi	r2,r2,6784
   2129c:	10c00436 	bltu	r2,r3,212b0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   212a0:	e0bfff17 	ldw	r2,-4(fp)
   212a4:	10000226 	beq	r2,zero,212b0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   212a8:	e0bfff17 	ldw	r2,-4(fp)
   212ac:	1000021e 	bne	r2,zero,212b8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   212b0:	00bfff04 	movi	r2,-4
   212b4:	00002906 	br	2135c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   212b8:	e0bffd17 	ldw	r2,-12(fp)
   212bc:	10c00c17 	ldw	r3,48(r2)
   212c0:	e0bfff17 	ldw	r2,-4(fp)
   212c4:	1085883a 	add	r2,r2,r2
   212c8:	100b883a 	mov	r5,r2
   212cc:	1809883a 	mov	r4,r3
   212d0:	000d8180 	call	d818 <__udivsi3>
   212d4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212d8:	e0bffb17 	ldw	r2,-20(fp)
   212dc:	10800f04 	addi	r2,r2,60
   212e0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   212e4:	e0bffb17 	ldw	r2,-20(fp)
   212e8:	10bff104 	addi	r2,r2,-60
   212ec:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   212f0:	e0ffff17 	ldw	r3,-4(fp)
   212f4:	008000b4 	movhi	r2,2
   212f8:	10a1a804 	addi	r2,r2,-31072
   212fc:	10c0042e 	bgeu	r2,r3,21310 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   21300:	e0bffe17 	ldw	r2,-8(fp)
   21304:	00c00044 	movi	r3,1
   21308:	10c00115 	stw	r3,4(r2)
   2130c:	00000206 	br	21318 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   21310:	e0bffe17 	ldw	r2,-8(fp)
   21314:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   21318:	e0bffb17 	ldw	r2,-20(fp)
   2131c:	1007883a 	mov	r3,r2
   21320:	e0bffe17 	ldw	r2,-8(fp)
   21324:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   21328:	e0bffc17 	ldw	r2,-16(fp)
   2132c:	1007883a 	mov	r3,r2
   21330:	e0bffe17 	ldw	r2,-8(fp)
   21334:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   21338:	e0bffb17 	ldw	r2,-20(fp)
   2133c:	1007883a 	mov	r3,r2
   21340:	e0bffb17 	ldw	r2,-20(fp)
   21344:	1004d07a 	srli	r2,r2,1
   21348:	1885c83a 	sub	r2,r3,r2
   2134c:	1007883a 	mov	r3,r2
   21350:	e0bffe17 	ldw	r2,-8(fp)
   21354:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   21358:	0005883a 	mov	r2,zero

}
   2135c:	e037883a 	mov	sp,fp
   21360:	dfc00117 	ldw	ra,4(sp)
   21364:	df000017 	ldw	fp,0(sp)
   21368:	dec00204 	addi	sp,sp,8
   2136c:	f800283a 	ret

00021370 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21370:	defffe04 	addi	sp,sp,-8
   21374:	df000115 	stw	fp,4(sp)
   21378:	df000104 	addi	fp,sp,4
   2137c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   21380:	e0bfff17 	ldw	r2,-4(fp)
   21384:	10800317 	ldw	r2,12(r2)
   21388:	10800504 	addi	r2,r2,20
   2138c:	10800037 	ldwio	r2,0(r2)
   21390:	1080004c 	andi	r2,r2,1
   21394:	10000226 	beq	r2,zero,213a0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   21398:	00800044 	movi	r2,1
   2139c:	00000106 	br	213a4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   213a0:	0005883a 	mov	r2,zero
}
   213a4:	e037883a 	mov	sp,fp
   213a8:	df000017 	ldw	fp,0(sp)
   213ac:	dec00104 	addi	sp,sp,4
   213b0:	f800283a 	ret

000213b4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   213b4:	defffb04 	addi	sp,sp,-20
   213b8:	df000415 	stw	fp,16(sp)
   213bc:	df000404 	addi	fp,sp,16
   213c0:	e13ffc15 	stw	r4,-16(fp)
   213c4:	e17ffd15 	stw	r5,-12(fp)
   213c8:	e1bffe15 	stw	r6,-8(fp)
   213cc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   213d0:	e0bfff17 	ldw	r2,-4(fp)
   213d4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   213d8:	00001406 	br	2142c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   213dc:	e0bfff17 	ldw	r2,-4(fp)
   213e0:	10800017 	ldw	r2,0(r2)
   213e4:	e0fffd17 	ldw	r3,-12(fp)
   213e8:	1885883a 	add	r2,r3,r2
   213ec:	e0fffc17 	ldw	r3,-16(fp)
   213f0:	18c00317 	ldw	r3,12(r3)
   213f4:	18c00104 	addi	r3,r3,4
   213f8:	18c00037 	ldwio	r3,0(r3)
   213fc:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   21400:	e0bfff17 	ldw	r2,-4(fp)
   21404:	10800017 	ldw	r2,0(r2)
   21408:	10c00044 	addi	r3,r2,1
   2140c:	e0bfff17 	ldw	r2,-4(fp)
   21410:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21414:	e0bfff17 	ldw	r2,-4(fp)
   21418:	10c00017 	ldw	r3,0(r2)
   2141c:	e0bffe17 	ldw	r2,-8(fp)
   21420:	1880021e 	bne	r3,r2,2142c <alt_avalon_i2c_rx_read_available+0x78>
   21424:	e0bffe17 	ldw	r2,-8(fp)
   21428:	1000061e 	bne	r2,zero,21444 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2142c:	e0bffc17 	ldw	r2,-16(fp)
   21430:	10800317 	ldw	r2,12(r2)
   21434:	10800704 	addi	r2,r2,28
   21438:	10800037 	ldwio	r2,0(r2)
   2143c:	103fe71e 	bne	r2,zero,213dc <__alt_data_end+0xfc0213dc>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   21440:	00000106 	br	21448 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21444:	0001883a 	nop
    }
}
   21448:	0001883a 	nop
   2144c:	e037883a 	mov	sp,fp
   21450:	df000017 	ldw	fp,0(sp)
   21454:	dec00104 	addi	sp,sp,4
   21458:	f800283a 	ret

0002145c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   2145c:	defffa04 	addi	sp,sp,-24
   21460:	dfc00515 	stw	ra,20(sp)
   21464:	df000415 	stw	fp,16(sp)
   21468:	df000404 	addi	fp,sp,16
   2146c:	e13ffe15 	stw	r4,-8(fp)
   21470:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   21474:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   21478:	008000b4 	movhi	r2,2
   2147c:	10a1a804 	addi	r2,r2,-31072
   21480:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21484:	00000d06 	br	214bc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   21488:	e0bffd17 	ldw	r2,-12(fp)
   2148c:	108002a8 	cmpgeui	r2,r2,10
   21490:	1000021e 	bne	r2,zero,2149c <alt_avalon_i2c_rx_read+0x40>
   21494:	0109c404 	movi	r4,10000
   21498:	00236a00 	call	236a0 <alt_busy_sleep>
      if (--timeout == 0)
   2149c:	e0bffd17 	ldw	r2,-12(fp)
   214a0:	10bfffc4 	addi	r2,r2,-1
   214a4:	e0bffd15 	stw	r2,-12(fp)
   214a8:	e0bffd17 	ldw	r2,-12(fp)
   214ac:	1000031e 	bne	r2,zero,214bc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   214b0:	00bfff84 	movi	r2,-2
   214b4:	e0bffc15 	stw	r2,-16(fp)
        break;
   214b8:	00000506 	br	214d0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   214bc:	e0bffe17 	ldw	r2,-8(fp)
   214c0:	10800317 	ldw	r2,12(r2)
   214c4:	10800704 	addi	r2,r2,28
   214c8:	10800037 	ldwio	r2,0(r2)
   214cc:	103fee26 	beq	r2,zero,21488 <__alt_data_end+0xfc021488>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   214d0:	e0bffe17 	ldw	r2,-8(fp)
   214d4:	10800317 	ldw	r2,12(r2)
   214d8:	10800104 	addi	r2,r2,4
   214dc:	10800037 	ldwio	r2,0(r2)
   214e0:	1007883a 	mov	r3,r2
   214e4:	e0bfff17 	ldw	r2,-4(fp)
   214e8:	10c00005 	stb	r3,0(r2)
        
    return status;
   214ec:	e0bffc17 	ldw	r2,-16(fp)
}
   214f0:	e037883a 	mov	sp,fp
   214f4:	dfc00117 	ldw	ra,4(sp)
   214f8:	df000017 	ldw	fp,0(sp)
   214fc:	dec00204 	addi	sp,sp,8
   21500:	f800283a 	ret

00021504 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   21504:	defff804 	addi	sp,sp,-32
   21508:	dfc00715 	stw	ra,28(sp)
   2150c:	df000615 	stw	fp,24(sp)
   21510:	df000604 	addi	fp,sp,24
   21514:	e13ffc15 	stw	r4,-16(fp)
   21518:	2809883a 	mov	r4,r5
   2151c:	3007883a 	mov	r3,r6
   21520:	3805883a 	mov	r2,r7
   21524:	e13ffd05 	stb	r4,-12(fp)
   21528:	e0fffe05 	stb	r3,-8(fp)
   2152c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   21530:	0089c404 	movi	r2,10000
   21534:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21538:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2153c:	00000c06 	br	21570 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   21540:	e0bffa17 	ldw	r2,-24(fp)
   21544:	108002a8 	cmpgeui	r2,r2,10
   21548:	1000021e 	bne	r2,zero,21554 <alt_avalon_i2c_cmd_write+0x50>
   2154c:	0109c404 	movi	r4,10000
   21550:	00236a00 	call	236a0 <alt_busy_sleep>
      if (--timeout == 0)
   21554:	e0bffa17 	ldw	r2,-24(fp)
   21558:	10bfffc4 	addi	r2,r2,-1
   2155c:	e0bffa15 	stw	r2,-24(fp)
   21560:	e0bffa17 	ldw	r2,-24(fp)
   21564:	1000021e 	bne	r2,zero,21570 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   21568:	00bfff84 	movi	r2,-2
   2156c:	00001906 	br	215d4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   21570:	e0bffc17 	ldw	r2,-16(fp)
   21574:	10800317 	ldw	r2,12(r2)
   21578:	10800404 	addi	r2,r2,16
   2157c:	10800037 	ldwio	r2,0(r2)
   21580:	1080004c 	andi	r2,r2,1
   21584:	103fee26 	beq	r2,zero,21540 <__alt_data_end+0xfc021540>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   21588:	e0bffc17 	ldw	r2,-16(fp)
   2158c:	10800317 	ldw	r2,12(r2)
   21590:	e13ffd03 	ldbu	r4,-12(fp)
   21594:	e0fffe03 	ldbu	r3,-8(fp)
   21598:	1806927a 	slli	r3,r3,9
   2159c:	20c8b03a 	or	r4,r4,r3
   215a0:	e0ffff03 	ldbu	r3,-4(fp)
   215a4:	1806923a 	slli	r3,r3,8
   215a8:	20c6b03a 	or	r3,r4,r3
   215ac:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   215b0:	e0bffb04 	addi	r2,fp,-20
   215b4:	100b883a 	mov	r5,r2
   215b8:	e13ffc17 	ldw	r4,-16(fp)
   215bc:	00217440 	call	21744 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   215c0:	e0bffb04 	addi	r2,fp,-20
   215c4:	100b883a 	mov	r5,r2
   215c8:	e13ffc17 	ldw	r4,-16(fp)
   215cc:	00217900 	call	21790 <alt_avalon_i2c_check_arblost>
    
    return status;
   215d0:	e0bffb17 	ldw	r2,-20(fp)
}
   215d4:	e037883a 	mov	sp,fp
   215d8:	dfc00117 	ldw	ra,4(sp)
   215dc:	df000017 	ldw	fp,0(sp)
   215e0:	dec00204 	addi	sp,sp,8
   215e4:	f800283a 	ret

000215e8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   215e8:	defffa04 	addi	sp,sp,-24
   215ec:	dfc00515 	stw	ra,20(sp)
   215f0:	df000415 	stw	fp,16(sp)
   215f4:	df000404 	addi	fp,sp,16
   215f8:	e13ffd15 	stw	r4,-12(fp)
   215fc:	e17ffe15 	stw	r5,-8(fp)
   21600:	3005883a 	mov	r2,r6
   21604:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   21608:	e0bffd17 	ldw	r2,-12(fp)
   2160c:	10800d17 	ldw	r2,52(r2)
   21610:	10800058 	cmpnei	r2,r2,1
   21614:	10001c1e 	bne	r2,zero,21688 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   21618:	e0bffd17 	ldw	r2,-12(fp)
   2161c:	10800917 	ldw	r2,36(r2)
   21620:	109e0014 	ori	r2,r2,30720
   21624:	1004d1fa 	srli	r2,r2,7
   21628:	1007883a 	mov	r3,r2
   2162c:	00bfff84 	movi	r2,-2
   21630:	1884703a 	and	r2,r3,r2
   21634:	1007883a 	mov	r3,r2
   21638:	e0bffe17 	ldw	r2,-8(fp)
   2163c:	1884b03a 	or	r2,r3,r2
   21640:	10803fcc 	andi	r2,r2,255
   21644:	e0ffff03 	ldbu	r3,-4(fp)
   21648:	000f883a 	mov	r7,zero
   2164c:	180d883a 	mov	r6,r3
   21650:	100b883a 	mov	r5,r2
   21654:	e13ffd17 	ldw	r4,-12(fp)
   21658:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   2165c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   21660:	e0bffd17 	ldw	r2,-12(fp)
   21664:	10800917 	ldw	r2,36(r2)
   21668:	10803fcc 	andi	r2,r2,255
   2166c:	000f883a 	mov	r7,zero
   21670:	000d883a 	mov	r6,zero
   21674:	100b883a 	mov	r5,r2
   21678:	e13ffd17 	ldw	r4,-12(fp)
   2167c:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   21680:	e0bffc15 	stw	r2,-16(fp)
   21684:	00000e06 	br	216c0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   21688:	e0bffd17 	ldw	r2,-12(fp)
   2168c:	10800917 	ldw	r2,36(r2)
   21690:	1085883a 	add	r2,r2,r2
   21694:	1007883a 	mov	r3,r2
   21698:	e0bffe17 	ldw	r2,-8(fp)
   2169c:	1884b03a 	or	r2,r3,r2
   216a0:	10803fcc 	andi	r2,r2,255
   216a4:	e0ffff03 	ldbu	r3,-4(fp)
   216a8:	000f883a 	mov	r7,zero
   216ac:	180d883a 	mov	r6,r3
   216b0:	100b883a 	mov	r5,r2
   216b4:	e13ffd17 	ldw	r4,-12(fp)
   216b8:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   216bc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   216c0:	e0bffc17 	ldw	r2,-16(fp)
}
   216c4:	e037883a 	mov	sp,fp
   216c8:	dfc00117 	ldw	ra,4(sp)
   216cc:	df000017 	ldw	fp,0(sp)
   216d0:	dec00204 	addi	sp,sp,8
   216d4:	f800283a 	ret

000216d8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   216d8:	defffd04 	addi	sp,sp,-12
   216dc:	df000215 	stw	fp,8(sp)
   216e0:	df000204 	addi	fp,sp,8
   216e4:	e13ffe15 	stw	r4,-8(fp)
   216e8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   216ec:	e0bffe17 	ldw	r2,-8(fp)
   216f0:	10c00917 	ldw	r3,36(r2)
   216f4:	e0bfff17 	ldw	r2,-4(fp)
   216f8:	10c00015 	stw	r3,0(r2)
}
   216fc:	0001883a 	nop
   21700:	e037883a 	mov	sp,fp
   21704:	df000017 	ldw	fp,0(sp)
   21708:	dec00104 	addi	sp,sp,4
   2170c:	f800283a 	ret

00021710 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   21710:	defffd04 	addi	sp,sp,-12
   21714:	df000215 	stw	fp,8(sp)
   21718:	df000204 	addi	fp,sp,8
   2171c:	e13ffe15 	stw	r4,-8(fp)
   21720:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   21724:	e0bffe17 	ldw	r2,-8(fp)
   21728:	e0ffff17 	ldw	r3,-4(fp)
   2172c:	10c00915 	stw	r3,36(r2)
}
   21730:	0001883a 	nop
   21734:	e037883a 	mov	sp,fp
   21738:	df000017 	ldw	fp,0(sp)
   2173c:	dec00104 	addi	sp,sp,4
   21740:	f800283a 	ret

00021744 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   21744:	defffd04 	addi	sp,sp,-12
   21748:	df000215 	stw	fp,8(sp)
   2174c:	df000204 	addi	fp,sp,8
   21750:	e13ffe15 	stw	r4,-8(fp)
   21754:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   21758:	e0bffe17 	ldw	r2,-8(fp)
   2175c:	10800317 	ldw	r2,12(r2)
   21760:	10800404 	addi	r2,r2,16
   21764:	10800037 	ldwio	r2,0(r2)
   21768:	1080010c 	andi	r2,r2,4
   2176c:	10000326 	beq	r2,zero,2177c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   21770:	e0bfff17 	ldw	r2,-4(fp)
   21774:	00fffec4 	movi	r3,-5
   21778:	10c00015 	stw	r3,0(r2)
    }
}
   2177c:	0001883a 	nop
   21780:	e037883a 	mov	sp,fp
   21784:	df000017 	ldw	fp,0(sp)
   21788:	dec00104 	addi	sp,sp,4
   2178c:	f800283a 	ret

00021790 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   21790:	defffd04 	addi	sp,sp,-12
   21794:	df000215 	stw	fp,8(sp)
   21798:	df000204 	addi	fp,sp,8
   2179c:	e13ffe15 	stw	r4,-8(fp)
   217a0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   217a4:	e0bffe17 	ldw	r2,-8(fp)
   217a8:	10800317 	ldw	r2,12(r2)
   217ac:	10800404 	addi	r2,r2,16
   217b0:	10800037 	ldwio	r2,0(r2)
   217b4:	1080020c 	andi	r2,r2,8
   217b8:	10000326 	beq	r2,zero,217c8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   217bc:	e0bfff17 	ldw	r2,-4(fp)
   217c0:	00fffe84 	movi	r3,-6
   217c4:	10c00015 	stw	r3,0(r2)
    }
}
   217c8:	0001883a 	nop
   217cc:	e037883a 	mov	sp,fp
   217d0:	df000017 	ldw	fp,0(sp)
   217d4:	dec00104 	addi	sp,sp,4
   217d8:	f800283a 	ret

000217dc <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   217dc:	defff804 	addi	sp,sp,-32
   217e0:	dfc00715 	stw	ra,28(sp)
   217e4:	df000615 	stw	fp,24(sp)
   217e8:	df000604 	addi	fp,sp,24
   217ec:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   217f0:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	10800717 	ldw	r2,28(r2)
   217fc:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   21800:	e0bffb17 	ldw	r2,-20(fp)
   21804:	10800117 	ldw	r2,4(r2)
   21808:	10800044 	addi	r2,r2,1
   2180c:	0149c404 	movi	r5,10000
   21810:	1009883a 	mov	r4,r2
   21814:	000d8d40 	call	d8d4 <__mulsi3>
   21818:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2181c:	e0bffd04 	addi	r2,fp,-12
   21820:	100b883a 	mov	r5,r2
   21824:	e13fff17 	ldw	r4,-4(fp)
   21828:	00226740 	call	22674 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   2182c:	e0bffd17 	ldw	r2,-12(fp)
   21830:	100b883a 	mov	r5,r2
   21834:	e13fff17 	ldw	r4,-4(fp)
   21838:	00225a80 	call	225a8 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2183c:	e0bffc04 	addi	r2,fp,-16
   21840:	100b883a 	mov	r5,r2
   21844:	e13fff17 	ldw	r4,-4(fp)
   21848:	00217440 	call	21744 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   2184c:	e0bffc17 	ldw	r2,-16(fp)
   21850:	10002226 	beq	r2,zero,218dc <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   21854:	e0bffb17 	ldw	r2,-20(fp)
   21858:	10800217 	ldw	r2,8(r2)
   2185c:	10001d26 	beq	r2,zero,218d4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21860:	00000d06 	br	21898 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   21864:	e0bffa17 	ldw	r2,-24(fp)
   21868:	108002a8 	cmpgeui	r2,r2,10
   2186c:	1000021e 	bne	r2,zero,21878 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   21870:	0109c404 	movi	r4,10000
   21874:	00236a00 	call	236a0 <alt_busy_sleep>
              if (--timeout == 0)
   21878:	e0bffa17 	ldw	r2,-24(fp)
   2187c:	10bfffc4 	addi	r2,r2,-1
   21880:	e0bffa15 	stw	r2,-24(fp)
   21884:	e0bffa17 	ldw	r2,-24(fp)
   21888:	1000031e 	bne	r2,zero,21898 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   2188c:	00bfff84 	movi	r2,-2
   21890:	e0bffc15 	stw	r2,-16(fp)
                 break;
   21894:	00000306 	br	218a4 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21898:	e13fff17 	ldw	r4,-4(fp)
   2189c:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   218a0:	103ff01e 	bne	r2,zero,21864 <__alt_data_end+0xfc021864>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   218a4:	e0bffb17 	ldw	r2,-20(fp)
   218a8:	10800017 	ldw	r2,0(r2)
   218ac:	e0fffe04 	addi	r3,fp,-8
   218b0:	180f883a 	mov	r7,r3
   218b4:	000d883a 	mov	r6,zero
   218b8:	100b883a 	mov	r5,r2
   218bc:	e13fff17 	ldw	r4,-4(fp)
   218c0:	00213b40 	call	213b4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   218c4:	e13fff17 	ldw	r4,-4(fp)
   218c8:	00210180 	call	21018 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   218cc:	e0bffb17 	ldw	r2,-20(fp)
   218d0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   218d4:	e0bffc17 	ldw	r2,-16(fp)
   218d8:	00000a06 	br	21904 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   218dc:	e0bffb17 	ldw	r2,-20(fp)
   218e0:	10800217 	ldw	r2,8(r2)
   218e4:	10000626 	beq	r2,zero,21900 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   218e8:	e0bffd17 	ldw	r2,-12(fp)
   218ec:	100b883a 	mov	r5,r2
   218f0:	e13fff17 	ldw	r4,-4(fp)
   218f4:	00226100 	call	22610 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   218f8:	00bffe44 	movi	r2,-7
   218fc:	00000106 	br	21904 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   21900:	0005883a 	mov	r2,zero
}
   21904:	e037883a 	mov	sp,fp
   21908:	dfc00117 	ldw	ra,4(sp)
   2190c:	df000017 	ldw	fp,0(sp)
   21910:	dec00204 	addi	sp,sp,8
   21914:	f800283a 	ret

00021918 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21918:	defff704 	addi	sp,sp,-36
   2191c:	dfc00815 	stw	ra,32(sp)
   21920:	df000715 	stw	fp,28(sp)
   21924:	df000704 	addi	fp,sp,28
   21928:	e13ffc15 	stw	r4,-16(fp)
   2192c:	e17ffd15 	stw	r5,-12(fp)
   21930:	e1bffe15 	stw	r6,-8(fp)
   21934:	3805883a 	mov	r2,r7
   21938:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2193c:	0089c404 	movi	r2,10000
   21940:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   21944:	00002206 	br	219d0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   21948:	e0bffb17 	ldw	r2,-20(fp)
   2194c:	108002a8 	cmpgeui	r2,r2,10
   21950:	1000021e 	bne	r2,zero,2195c <alt_avalon_i2c_master_tx+0x44>
   21954:	0109c404 	movi	r4,10000
   21958:	00236a00 	call	236a0 <alt_busy_sleep>
      if (use_interrupts)
   2195c:	e0bfff03 	ldbu	r2,-4(fp)
   21960:	10000926 	beq	r2,zero,21988 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21964:	00800044 	movi	r2,1
   21968:	d8800015 	stw	r2,0(sp)
   2196c:	000f883a 	mov	r7,zero
   21970:	e1bffe17 	ldw	r6,-8(fp)
   21974:	e17ffd17 	ldw	r5,-12(fp)
   21978:	e13ffc17 	ldw	r4,-16(fp)
   2197c:	0021ec40 	call	21ec4 <alt_avalon_i2c_master_transmit_using_interrupts>
   21980:	e0bffa15 	stw	r2,-24(fp)
   21984:	00000806 	br	219a8 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   21988:	00800044 	movi	r2,1
   2198c:	d8800015 	stw	r2,0(sp)
   21990:	000f883a 	mov	r7,zero
   21994:	e1bffe17 	ldw	r6,-8(fp)
   21998:	e17ffd17 	ldw	r5,-12(fp)
   2199c:	e13ffc17 	ldw	r4,-16(fp)
   219a0:	0021d040 	call	21d04 <alt_avalon_i2c_master_transmit>
   219a4:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   219a8:	e0bffa17 	ldw	r2,-24(fp)
   219ac:	10bffea0 	cmpeqi	r2,r2,-6
   219b0:	1000061e 	bne	r2,zero,219cc <alt_avalon_i2c_master_tx+0xb4>
   219b4:	e0bffa17 	ldw	r2,-24(fp)
   219b8:	10bffee0 	cmpeqi	r2,r2,-5
   219bc:	1000031e 	bne	r2,zero,219cc <alt_avalon_i2c_master_tx+0xb4>
   219c0:	e0bffa17 	ldw	r2,-24(fp)
   219c4:	10bffe58 	cmpnei	r2,r2,-7
   219c8:	1000061e 	bne	r2,zero,219e4 <alt_avalon_i2c_master_tx+0xcc>
   219cc:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   219d0:	e0bffb17 	ldw	r2,-20(fp)
   219d4:	10ffffc4 	addi	r3,r2,-1
   219d8:	e0fffb15 	stw	r3,-20(fp)
   219dc:	103fda1e 	bne	r2,zero,21948 <__alt_data_end+0xfc021948>
   219e0:	00000106 	br	219e8 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   219e4:	0001883a 	nop
    }

    return status;
   219e8:	e0bffa17 	ldw	r2,-24(fp)
}        
   219ec:	e037883a 	mov	sp,fp
   219f0:	dfc00117 	ldw	ra,4(sp)
   219f4:	df000017 	ldw	fp,0(sp)
   219f8:	dec00204 	addi	sp,sp,8
   219fc:	f800283a 	ret

00021a00 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21a00:	defff704 	addi	sp,sp,-36
   21a04:	dfc00815 	stw	ra,32(sp)
   21a08:	df000715 	stw	fp,28(sp)
   21a0c:	df000704 	addi	fp,sp,28
   21a10:	e13ffc15 	stw	r4,-16(fp)
   21a14:	e17ffd15 	stw	r5,-12(fp)
   21a18:	e1bffe15 	stw	r6,-8(fp)
   21a1c:	3805883a 	mov	r2,r7
   21a20:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21a24:	0089c404 	movi	r2,10000
   21a28:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   21a2c:	e0bfff03 	ldbu	r2,-4(fp)
   21a30:	10003426 	beq	r2,zero,21b04 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   21a34:	00001706 	br	21a94 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21a38:	e0bffb17 	ldw	r2,-20(fp)
   21a3c:	108002a8 	cmpgeui	r2,r2,10
   21a40:	1000021e 	bne	r2,zero,21a4c <alt_avalon_i2c_master_rx+0x4c>
   21a44:	0109c404 	movi	r4,10000
   21a48:	00236a00 	call	236a0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21a4c:	00800044 	movi	r2,1
   21a50:	d8800015 	stw	r2,0(sp)
   21a54:	000f883a 	mov	r7,zero
   21a58:	e1bffe17 	ldw	r6,-8(fp)
   21a5c:	e17ffd17 	ldw	r5,-12(fp)
   21a60:	e13ffc17 	ldw	r4,-16(fp)
   21a64:	00222e00 	call	222e0 <alt_avalon_i2c_master_receive_using_interrupts>
   21a68:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21a6c:	e0bffa17 	ldw	r2,-24(fp)
   21a70:	10bffea0 	cmpeqi	r2,r2,-6
   21a74:	1000061e 	bne	r2,zero,21a90 <alt_avalon_i2c_master_rx+0x90>
   21a78:	e0bffa17 	ldw	r2,-24(fp)
   21a7c:	10bffee0 	cmpeqi	r2,r2,-5
   21a80:	1000031e 	bne	r2,zero,21a90 <alt_avalon_i2c_master_rx+0x90>
   21a84:	e0bffa17 	ldw	r2,-24(fp)
   21a88:	10bffe58 	cmpnei	r2,r2,-7
   21a8c:	1000221e 	bne	r2,zero,21b18 <alt_avalon_i2c_master_rx+0x118>
   21a90:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   21a94:	e0bffb17 	ldw	r2,-20(fp)
   21a98:	10ffffc4 	addi	r3,r2,-1
   21a9c:	e0fffb15 	stw	r3,-20(fp)
   21aa0:	103fe51e 	bne	r2,zero,21a38 <__alt_data_end+0xfc021a38>
   21aa4:	00001f06 	br	21b24 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21aa8:	e0bffb17 	ldw	r2,-20(fp)
   21aac:	108002a8 	cmpgeui	r2,r2,10
   21ab0:	1000021e 	bne	r2,zero,21abc <alt_avalon_i2c_master_rx+0xbc>
   21ab4:	0109c404 	movi	r4,10000
   21ab8:	00236a00 	call	236a0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21abc:	00800044 	movi	r2,1
   21ac0:	d8800015 	stw	r2,0(sp)
   21ac4:	000f883a 	mov	r7,zero
   21ac8:	e1bffe17 	ldw	r6,-8(fp)
   21acc:	e17ffd17 	ldw	r5,-12(fp)
   21ad0:	e13ffc17 	ldw	r4,-16(fp)
   21ad4:	00220d00 	call	220d0 <alt_avalon_i2c_master_receive>
   21ad8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21adc:	e0bffa17 	ldw	r2,-24(fp)
   21ae0:	10bffea0 	cmpeqi	r2,r2,-6
   21ae4:	1000061e 	bne	r2,zero,21b00 <alt_avalon_i2c_master_rx+0x100>
   21ae8:	e0bffa17 	ldw	r2,-24(fp)
   21aec:	10bffee0 	cmpeqi	r2,r2,-5
   21af0:	1000031e 	bne	r2,zero,21b00 <alt_avalon_i2c_master_rx+0x100>
   21af4:	e0bffa17 	ldw	r2,-24(fp)
   21af8:	10bffe58 	cmpnei	r2,r2,-7
   21afc:	1000081e 	bne	r2,zero,21b20 <alt_avalon_i2c_master_rx+0x120>
   21b00:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   21b04:	e0bffb17 	ldw	r2,-20(fp)
   21b08:	10ffffc4 	addi	r3,r2,-1
   21b0c:	e0fffb15 	stw	r3,-20(fp)
   21b10:	103fe51e 	bne	r2,zero,21aa8 <__alt_data_end+0xfc021aa8>
   21b14:	00000306 	br	21b24 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21b18:	0001883a 	nop
   21b1c:	00000106 	br	21b24 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21b20:	0001883a 	nop
      }
    }
    
    return status;
   21b24:	e0bffa17 	ldw	r2,-24(fp)
}        
   21b28:	e037883a 	mov	sp,fp
   21b2c:	dfc00117 	ldw	ra,4(sp)
   21b30:	df000017 	ldw	fp,0(sp)
   21b34:	dec00204 	addi	sp,sp,8
   21b38:	f800283a 	ret

00021b3c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   21b3c:	defff604 	addi	sp,sp,-40
   21b40:	dfc00915 	stw	ra,36(sp)
   21b44:	df000815 	stw	fp,32(sp)
   21b48:	df000804 	addi	fp,sp,32
   21b4c:	e13ffb15 	stw	r4,-20(fp)
   21b50:	e17ffc15 	stw	r5,-16(fp)
   21b54:	e1bffd15 	stw	r6,-12(fp)
   21b58:	e1fffe15 	stw	r7,-8(fp)
   21b5c:	e0800317 	ldw	r2,12(fp)
   21b60:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21b64:	0089c404 	movi	r2,10000
   21b68:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   21b6c:	e0bfff03 	ldbu	r2,-4(fp)
   21b70:	10005626 	beq	r2,zero,21ccc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   21b74:	00002806 	br	21c18 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21b78:	e0bffa17 	ldw	r2,-24(fp)
   21b7c:	108002a8 	cmpgeui	r2,r2,10
   21b80:	1000021e 	bne	r2,zero,21b8c <alt_avalon_i2c_master_tx_rx+0x50>
   21b84:	0109c404 	movi	r4,10000
   21b88:	00236a00 	call	236a0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21b8c:	d8000015 	stw	zero,0(sp)
   21b90:	000f883a 	mov	r7,zero
   21b94:	e1bffd17 	ldw	r6,-12(fp)
   21b98:	e17ffc17 	ldw	r5,-16(fp)
   21b9c:	e13ffb17 	ldw	r4,-20(fp)
   21ba0:	0021ec40 	call	21ec4 <alt_avalon_i2c_master_transmit_using_interrupts>
   21ba4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21ba8:	e0bff917 	ldw	r2,-28(fp)
   21bac:	10bffea0 	cmpeqi	r2,r2,-6
   21bb0:	1000191e 	bne	r2,zero,21c18 <alt_avalon_i2c_master_tx_rx+0xdc>
   21bb4:	e0bff917 	ldw	r2,-28(fp)
   21bb8:	10bffee0 	cmpeqi	r2,r2,-5
   21bbc:	1000161e 	bne	r2,zero,21c18 <alt_avalon_i2c_master_tx_rx+0xdc>
   21bc0:	e0bff917 	ldw	r2,-28(fp)
   21bc4:	10bffe58 	cmpnei	r2,r2,-7
   21bc8:	1000011e 	bne	r2,zero,21bd0 <alt_avalon_i2c_master_tx_rx+0x94>
   21bcc:	00001206 	br	21c18 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21bd0:	00800044 	movi	r2,1
   21bd4:	d8800015 	stw	r2,0(sp)
   21bd8:	01c00044 	movi	r7,1
   21bdc:	e1800217 	ldw	r6,8(fp)
   21be0:	e17ffe17 	ldw	r5,-8(fp)
   21be4:	e13ffb17 	ldw	r4,-20(fp)
   21be8:	00222e00 	call	222e0 <alt_avalon_i2c_master_receive_using_interrupts>
   21bec:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21bf0:	e0bff917 	ldw	r2,-28(fp)
   21bf4:	10bffea0 	cmpeqi	r2,r2,-6
   21bf8:	1000061e 	bne	r2,zero,21c14 <alt_avalon_i2c_master_tx_rx+0xd8>
   21bfc:	e0bff917 	ldw	r2,-28(fp)
   21c00:	10bffee0 	cmpeqi	r2,r2,-5
   21c04:	1000031e 	bne	r2,zero,21c14 <alt_avalon_i2c_master_tx_rx+0xd8>
   21c08:	e0bff917 	ldw	r2,-28(fp)
   21c0c:	10bffe58 	cmpnei	r2,r2,-7
   21c10:	1000331e 	bne	r2,zero,21ce0 <alt_avalon_i2c_master_tx_rx+0x1a4>
   21c14:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   21c18:	e0bffa17 	ldw	r2,-24(fp)
   21c1c:	10ffffc4 	addi	r3,r2,-1
   21c20:	e0fffa15 	stw	r3,-24(fp)
   21c24:	103fd41e 	bne	r2,zero,21b78 <__alt_data_end+0xfc021b78>
   21c28:	00003006 	br	21cec <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21c2c:	e0bffa17 	ldw	r2,-24(fp)
   21c30:	108002a8 	cmpgeui	r2,r2,10
   21c34:	1000021e 	bne	r2,zero,21c40 <alt_avalon_i2c_master_tx_rx+0x104>
   21c38:	0109c404 	movi	r4,10000
   21c3c:	00236a00 	call	236a0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21c40:	d8000015 	stw	zero,0(sp)
   21c44:	000f883a 	mov	r7,zero
   21c48:	e1bffd17 	ldw	r6,-12(fp)
   21c4c:	e17ffc17 	ldw	r5,-16(fp)
   21c50:	e13ffb17 	ldw	r4,-20(fp)
   21c54:	0021d040 	call	21d04 <alt_avalon_i2c_master_transmit>
   21c58:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21c5c:	e0bff917 	ldw	r2,-28(fp)
   21c60:	10bffea0 	cmpeqi	r2,r2,-6
   21c64:	1000191e 	bne	r2,zero,21ccc <alt_avalon_i2c_master_tx_rx+0x190>
   21c68:	e0bff917 	ldw	r2,-28(fp)
   21c6c:	10bffee0 	cmpeqi	r2,r2,-5
   21c70:	1000161e 	bne	r2,zero,21ccc <alt_avalon_i2c_master_tx_rx+0x190>
   21c74:	e0bff917 	ldw	r2,-28(fp)
   21c78:	10bffe58 	cmpnei	r2,r2,-7
   21c7c:	1000011e 	bne	r2,zero,21c84 <alt_avalon_i2c_master_tx_rx+0x148>
   21c80:	00001206 	br	21ccc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21c84:	00800044 	movi	r2,1
   21c88:	d8800015 	stw	r2,0(sp)
   21c8c:	01c00044 	movi	r7,1
   21c90:	e1800217 	ldw	r6,8(fp)
   21c94:	e17ffe17 	ldw	r5,-8(fp)
   21c98:	e13ffb17 	ldw	r4,-20(fp)
   21c9c:	00220d00 	call	220d0 <alt_avalon_i2c_master_receive>
   21ca0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21ca4:	e0bff917 	ldw	r2,-28(fp)
   21ca8:	10bffea0 	cmpeqi	r2,r2,-6
   21cac:	1000061e 	bne	r2,zero,21cc8 <alt_avalon_i2c_master_tx_rx+0x18c>
   21cb0:	e0bff917 	ldw	r2,-28(fp)
   21cb4:	10bffee0 	cmpeqi	r2,r2,-5
   21cb8:	1000031e 	bne	r2,zero,21cc8 <alt_avalon_i2c_master_tx_rx+0x18c>
   21cbc:	e0bff917 	ldw	r2,-28(fp)
   21cc0:	10bffe58 	cmpnei	r2,r2,-7
   21cc4:	1000081e 	bne	r2,zero,21ce8 <alt_avalon_i2c_master_tx_rx+0x1ac>
   21cc8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   21ccc:	e0bffa17 	ldw	r2,-24(fp)
   21cd0:	10ffffc4 	addi	r3,r2,-1
   21cd4:	e0fffa15 	stw	r3,-24(fp)
   21cd8:	103fd41e 	bne	r2,zero,21c2c <__alt_data_end+0xfc021c2c>
   21cdc:	00000306 	br	21cec <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21ce0:	0001883a 	nop
   21ce4:	00000106 	br	21cec <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21ce8:	0001883a 	nop
      }
    }
    
    return status;
   21cec:	e0bff917 	ldw	r2,-28(fp)
}                                       
   21cf0:	e037883a 	mov	sp,fp
   21cf4:	dfc00117 	ldw	ra,4(sp)
   21cf8:	df000017 	ldw	fp,0(sp)
   21cfc:	dec00204 	addi	sp,sp,8
   21d00:	f800283a 	ret

00021d04 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21d04:	defff704 	addi	sp,sp,-36
   21d08:	dfc00815 	stw	ra,32(sp)
   21d0c:	df000715 	stw	fp,28(sp)
   21d10:	df000704 	addi	fp,sp,28
   21d14:	e13ffb15 	stw	r4,-20(fp)
   21d18:	e17ffc15 	stw	r5,-16(fp)
   21d1c:	e1bffd15 	stw	r6,-12(fp)
   21d20:	3807883a 	mov	r3,r7
   21d24:	e0800217 	ldw	r2,8(fp)
   21d28:	e0fffe05 	stb	r3,-8(fp)
   21d2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21d30:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   21d34:	0149c404 	movi	r5,10000
   21d38:	e13ffd17 	ldw	r4,-12(fp)
   21d3c:	000d8d40 	call	d8d4 <__mulsi3>
   21d40:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   21d44:	e0bffd17 	ldw	r2,-12(fp)
   21d48:	1000021e 	bne	r2,zero,21d54 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21d4c:	0005883a 	mov	r2,zero
   21d50:	00005706 	br	21eb0 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21d54:	e0bffe03 	ldbu	r2,-8(fp)
   21d58:	10000a1e 	bne	r2,zero,21d84 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21d5c:	e13ffb17 	ldw	r4,-20(fp)
   21d60:	0020f800 	call	20f80 <alt_avalon_i2c_enable>
   21d64:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21d68:	e0bffa17 	ldw	r2,-24(fp)
   21d6c:	10000226 	beq	r2,zero,21d78 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   21d70:	e0bffa17 	ldw	r2,-24(fp)
   21d74:	00004e06 	br	21eb0 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21d78:	01400704 	movi	r5,28
   21d7c:	e13ffb17 	ldw	r4,-20(fp)
   21d80:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21d84:	e0bffe03 	ldbu	r2,-8(fp)
   21d88:	100d883a 	mov	r6,r2
   21d8c:	000b883a 	mov	r5,zero
   21d90:	e13ffb17 	ldw	r4,-20(fp)
   21d94:	00215e80 	call	215e8 <alt_avalon_i2c_send_address>
   21d98:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   21d9c:	e0bffa17 	ldw	r2,-24(fp)
   21da0:	1000271e 	bne	r2,zero,21e40 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21da4:	00000f06 	br	21de4 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21da8:	e0bffc17 	ldw	r2,-16(fp)
   21dac:	10800003 	ldbu	r2,0(r2)
   21db0:	10803fcc 	andi	r2,r2,255
   21db4:	000f883a 	mov	r7,zero
   21db8:	000d883a 	mov	r6,zero
   21dbc:	100b883a 	mov	r5,r2
   21dc0:	e13ffb17 	ldw	r4,-20(fp)
   21dc4:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   21dc8:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   21dcc:	e0bffc17 	ldw	r2,-16(fp)
   21dd0:	10800044 	addi	r2,r2,1
   21dd4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21dd8:	e0bffd17 	ldw	r2,-12(fp)
   21ddc:	10bfffc4 	addi	r2,r2,-1
   21de0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21de4:	e0bffd17 	ldw	r2,-12(fp)
   21de8:	108000b0 	cmpltui	r2,r2,2
   21dec:	1000021e 	bne	r2,zero,21df8 <alt_avalon_i2c_master_transmit+0xf4>
   21df0:	e0bffa17 	ldw	r2,-24(fp)
   21df4:	103fec26 	beq	r2,zero,21da8 <__alt_data_end+0xfc021da8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21df8:	e0bffa17 	ldw	r2,-24(fp)
   21dfc:	1000101e 	bne	r2,zero,21e40 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21e00:	e0bffc17 	ldw	r2,-16(fp)
   21e04:	10800003 	ldbu	r2,0(r2)
   21e08:	10803fcc 	andi	r2,r2,255
   21e0c:	e0ffff03 	ldbu	r3,-4(fp)
   21e10:	180f883a 	mov	r7,r3
   21e14:	000d883a 	mov	r6,zero
   21e18:	100b883a 	mov	r5,r2
   21e1c:	e13ffb17 	ldw	r4,-20(fp)
   21e20:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   21e24:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   21e28:	e0bffc17 	ldw	r2,-16(fp)
   21e2c:	10800044 	addi	r2,r2,1
   21e30:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21e34:	e0bffd17 	ldw	r2,-12(fp)
   21e38:	10bfffc4 	addi	r2,r2,-1
   21e3c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21e40:	e0bfff03 	ldbu	r2,-4(fp)
   21e44:	1000101e 	bne	r2,zero,21e88 <alt_avalon_i2c_master_transmit+0x184>
   21e48:	e0bffa17 	ldw	r2,-24(fp)
   21e4c:	10001726 	beq	r2,zero,21eac <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e50:	00000d06 	br	21e88 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21e54:	e0bff917 	ldw	r2,-28(fp)
   21e58:	108002a8 	cmpgeui	r2,r2,10
   21e5c:	1000021e 	bne	r2,zero,21e68 <alt_avalon_i2c_master_transmit+0x164>
   21e60:	0109c404 	movi	r4,10000
   21e64:	00236a00 	call	236a0 <alt_busy_sleep>
            if (--timeout == 0)
   21e68:	e0bff917 	ldw	r2,-28(fp)
   21e6c:	10bfffc4 	addi	r2,r2,-1
   21e70:	e0bff915 	stw	r2,-28(fp)
   21e74:	e0bff917 	ldw	r2,-28(fp)
   21e78:	1000031e 	bne	r2,zero,21e88 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21e7c:	00bfff84 	movi	r2,-2
   21e80:	e0bffa15 	stw	r2,-24(fp)
               break;
   21e84:	00000306 	br	21e94 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21e88:	e13ffb17 	ldw	r4,-20(fp)
   21e8c:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   21e90:	103ff01e 	bne	r2,zero,21e54 <__alt_data_end+0xfc021e54>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   21e94:	e0bffa04 	addi	r2,fp,-24
   21e98:	100b883a 	mov	r5,r2
   21e9c:	e13ffb17 	ldw	r4,-20(fp)
   21ea0:	00217440 	call	21744 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21ea4:	e13ffb17 	ldw	r4,-20(fp)
   21ea8:	00210180 	call	21018 <alt_avalon_i2c_disable>
    }


    return status;
   21eac:	e0bffa17 	ldw	r2,-24(fp)
}
   21eb0:	e037883a 	mov	sp,fp
   21eb4:	dfc00117 	ldw	ra,4(sp)
   21eb8:	df000017 	ldw	fp,0(sp)
   21ebc:	dec00204 	addi	sp,sp,8
   21ec0:	f800283a 	ret

00021ec4 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21ec4:	defff604 	addi	sp,sp,-40
   21ec8:	dfc00915 	stw	ra,36(sp)
   21ecc:	df000815 	stw	fp,32(sp)
   21ed0:	df000804 	addi	fp,sp,32
   21ed4:	e13ffb15 	stw	r4,-20(fp)
   21ed8:	e17ffc15 	stw	r5,-16(fp)
   21edc:	e1bffd15 	stw	r6,-12(fp)
   21ee0:	3807883a 	mov	r3,r7
   21ee4:	e0800217 	ldw	r2,8(fp)
   21ee8:	e0fffe05 	stb	r3,-8(fp)
   21eec:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21ef0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   21ef4:	0149c404 	movi	r5,10000
   21ef8:	e13ffd17 	ldw	r4,-12(fp)
   21efc:	000d8d40 	call	d8d4 <__mulsi3>
   21f00:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21f04:	e0bffb17 	ldw	r2,-20(fp)
   21f08:	10800717 	ldw	r2,28(r2)
   21f0c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   21f10:	e0bffd17 	ldw	r2,-12(fp)
   21f14:	1000021e 	bne	r2,zero,21f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21f18:	0005883a 	mov	r2,zero
   21f1c:	00006706 	br	220bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21f20:	e0bffb17 	ldw	r2,-20(fp)
   21f24:	10c00617 	ldw	r3,24(r2)
   21f28:	008000b4 	movhi	r2,2
   21f2c:	10830104 	addi	r2,r2,3076
   21f30:	18800226 	beq	r3,r2,21f3c <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21f34:	00bfff44 	movi	r2,-3
   21f38:	00006006 	br	220bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21f3c:	e0bffe03 	ldbu	r2,-8(fp)
   21f40:	10000a1e 	bne	r2,zero,21f6c <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21f44:	e13ffb17 	ldw	r4,-20(fp)
   21f48:	0020f800 	call	20f80 <alt_avalon_i2c_enable>
   21f4c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21f50:	e0bff817 	ldw	r2,-32(fp)
   21f54:	10000226 	beq	r2,zero,21f60 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   21f58:	e0bff817 	ldw	r2,-32(fp)
   21f5c:	00005706 	br	220bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21f60:	01400704 	movi	r5,28
   21f64:	e13ffb17 	ldw	r4,-20(fp)
   21f68:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21f6c:	e0bffe03 	ldbu	r2,-8(fp)
   21f70:	100d883a 	mov	r6,r2
   21f74:	000b883a 	mov	r5,zero
   21f78:	e13ffb17 	ldw	r4,-20(fp)
   21f7c:	00215e80 	call	215e8 <alt_avalon_i2c_send_address>
   21f80:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   21f84:	e0bff817 	ldw	r2,-32(fp)
   21f88:	1000271e 	bne	r2,zero,22028 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21f8c:	00000f06 	br	21fcc <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21f90:	e0bffc17 	ldw	r2,-16(fp)
   21f94:	10800003 	ldbu	r2,0(r2)
   21f98:	10803fcc 	andi	r2,r2,255
   21f9c:	000f883a 	mov	r7,zero
   21fa0:	000d883a 	mov	r6,zero
   21fa4:	100b883a 	mov	r5,r2
   21fa8:	e13ffb17 	ldw	r4,-20(fp)
   21fac:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   21fb0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   21fb4:	e0bffc17 	ldw	r2,-16(fp)
   21fb8:	10800044 	addi	r2,r2,1
   21fbc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21fc0:	e0bffd17 	ldw	r2,-12(fp)
   21fc4:	10bfffc4 	addi	r2,r2,-1
   21fc8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21fcc:	e0bffd17 	ldw	r2,-12(fp)
   21fd0:	108000b0 	cmpltui	r2,r2,2
   21fd4:	1000021e 	bne	r2,zero,21fe0 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   21fd8:	e0bff817 	ldw	r2,-32(fp)
   21fdc:	103fec26 	beq	r2,zero,21f90 <__alt_data_end+0xfc021f90>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21fe0:	e0bff817 	ldw	r2,-32(fp)
   21fe4:	1000101e 	bne	r2,zero,22028 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21fe8:	e0bffc17 	ldw	r2,-16(fp)
   21fec:	10800003 	ldbu	r2,0(r2)
   21ff0:	10803fcc 	andi	r2,r2,255
   21ff4:	e0ffff03 	ldbu	r3,-4(fp)
   21ff8:	180f883a 	mov	r7,r3
   21ffc:	000d883a 	mov	r6,zero
   22000:	100b883a 	mov	r5,r2
   22004:	e13ffb17 	ldw	r4,-20(fp)
   22008:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   2200c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   22010:	e0bffc17 	ldw	r2,-16(fp)
   22014:	10800044 	addi	r2,r2,1
   22018:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2201c:	e0bffd17 	ldw	r2,-12(fp)
   22020:	10bfffc4 	addi	r2,r2,-1
   22024:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   22028:	e0bff817 	ldw	r2,-32(fp)
   2202c:	10001426 	beq	r2,zero,22080 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   22030:	00000d06 	br	22068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   22034:	e0bff917 	ldw	r2,-28(fp)
   22038:	108002a8 	cmpgeui	r2,r2,10
   2203c:	1000021e 	bne	r2,zero,22048 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   22040:	0109c404 	movi	r4,10000
   22044:	00236a00 	call	236a0 <alt_busy_sleep>
            if (--timeout == 0)
   22048:	e0bff917 	ldw	r2,-28(fp)
   2204c:	10bfffc4 	addi	r2,r2,-1
   22050:	e0bff915 	stw	r2,-28(fp)
   22054:	e0bff917 	ldw	r2,-28(fp)
   22058:	1000031e 	bne	r2,zero,22068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2205c:	00bfff84 	movi	r2,-2
   22060:	e0bff815 	stw	r2,-32(fp)
               break;
   22064:	00000306 	br	22074 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   22068:	e13ffb17 	ldw	r4,-20(fp)
   2206c:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   22070:	103ff01e 	bne	r2,zero,22034 <__alt_data_end+0xfc022034>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22074:	e13ffb17 	ldw	r4,-20(fp)
   22078:	00210180 	call	21018 <alt_avalon_i2c_disable>
   2207c:	00000e06 	br	220b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   22080:	e0bfff03 	ldbu	r2,-4(fp)
   22084:	10000c26 	beq	r2,zero,220b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22088:	01400704 	movi	r5,28
   2208c:	e13ffb17 	ldw	r4,-20(fp)
   22090:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   22094:	000b883a 	mov	r5,zero
   22098:	e13ffb17 	ldw	r4,-20(fp)
   2209c:	00227b40 	call	227b4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   220a0:	e0bffa17 	ldw	r2,-24(fp)
   220a4:	00c00044 	movi	r3,1
   220a8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   220ac:	01400044 	movi	r5,1
   220b0:	e13ffb17 	ldw	r4,-20(fp)
   220b4:	00226100 	call	22610 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   220b8:	e0bff817 	ldw	r2,-32(fp)
}
   220bc:	e037883a 	mov	sp,fp
   220c0:	dfc00117 	ldw	ra,4(sp)
   220c4:	df000017 	ldw	fp,0(sp)
   220c8:	dec00204 	addi	sp,sp,8
   220cc:	f800283a 	ret

000220d0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   220d0:	defff404 	addi	sp,sp,-48
   220d4:	dfc00b15 	stw	ra,44(sp)
   220d8:	df000a15 	stw	fp,40(sp)
   220dc:	df000a04 	addi	fp,sp,40
   220e0:	e13ffb15 	stw	r4,-20(fp)
   220e4:	e17ffc15 	stw	r5,-16(fp)
   220e8:	e1bffd15 	stw	r6,-12(fp)
   220ec:	3807883a 	mov	r3,r7
   220f0:	e0800217 	ldw	r2,8(fp)
   220f4:	e0fffe05 	stb	r3,-8(fp)
   220f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   220fc:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   22100:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   22104:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   22108:	e0bffd17 	ldw	r2,-12(fp)
   2210c:	1000021e 	bne	r2,zero,22118 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   22110:	0005883a 	mov	r2,zero
   22114:	00006d06 	br	222cc <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   22118:	e0bffe03 	ldbu	r2,-8(fp)
   2211c:	10000a1e 	bne	r2,zero,22148 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22120:	e13ffb17 	ldw	r4,-20(fp)
   22124:	0020f800 	call	20f80 <alt_avalon_i2c_enable>
   22128:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2212c:	e0bff917 	ldw	r2,-28(fp)
   22130:	10000226 	beq	r2,zero,2213c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   22134:	e0bff917 	ldw	r2,-28(fp)
   22138:	00006406 	br	222cc <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2213c:	01400704 	movi	r5,28
   22140:	e13ffb17 	ldw	r4,-20(fp)
   22144:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   22148:	e0bffe03 	ldbu	r2,-8(fp)
   2214c:	100d883a 	mov	r6,r2
   22150:	01400044 	movi	r5,1
   22154:	e13ffb17 	ldw	r4,-20(fp)
   22158:	00215e80 	call	215e8 <alt_avalon_i2c_send_address>
   2215c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   22160:	e0bff917 	ldw	r2,-28(fp)
   22164:	1000341e 	bne	r2,zero,22238 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22168:	00001906 	br	221d0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2216c:	000f883a 	mov	r7,zero
   22170:	000d883a 	mov	r6,zero
   22174:	000b883a 	mov	r5,zero
   22178:	e13ffb17 	ldw	r4,-20(fp)
   2217c:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   22180:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   22184:	e0bff817 	ldw	r2,-32(fp)
   22188:	10800044 	addi	r2,r2,1
   2218c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   22190:	e0bff917 	ldw	r2,-28(fp)
   22194:	10000e1e 	bne	r2,zero,221d0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   22198:	e0bffa04 	addi	r2,fp,-24
   2219c:	100f883a 	mov	r7,r2
   221a0:	000d883a 	mov	r6,zero
   221a4:	e17ffc17 	ldw	r5,-16(fp)
   221a8:	e13ffb17 	ldw	r4,-20(fp)
   221ac:	00213b40 	call	213b4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   221b0:	e0bffa17 	ldw	r2,-24(fp)
   221b4:	e0fffc17 	ldw	r3,-16(fp)
   221b8:	1885883a 	add	r2,r3,r2
   221bc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   221c0:	e0bffa17 	ldw	r2,-24(fp)
   221c4:	e0fff717 	ldw	r3,-36(fp)
   221c8:	1885883a 	add	r2,r3,r2
   221cc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   221d0:	e0bffd17 	ldw	r2,-12(fp)
   221d4:	10bfffc4 	addi	r2,r2,-1
   221d8:	e0fff817 	ldw	r3,-32(fp)
   221dc:	1880022e 	bgeu	r3,r2,221e8 <alt_avalon_i2c_master_receive+0x118>
   221e0:	e0bff917 	ldw	r2,-28(fp)
   221e4:	103fe126 	beq	r2,zero,2216c <__alt_data_end+0xfc02216c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   221e8:	e0bff917 	ldw	r2,-28(fp)
   221ec:	1000121e 	bne	r2,zero,22238 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   221f0:	e0bfff03 	ldbu	r2,-4(fp)
   221f4:	100f883a 	mov	r7,r2
   221f8:	000d883a 	mov	r6,zero
   221fc:	000b883a 	mov	r5,zero
   22200:	e13ffb17 	ldw	r4,-20(fp)
   22204:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   22208:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2220c:	00000a06 	br	22238 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   22210:	e17ffc17 	ldw	r5,-16(fp)
   22214:	e13ffb17 	ldw	r4,-20(fp)
   22218:	002145c0 	call	2145c <alt_avalon_i2c_rx_read>
   2221c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   22220:	e0bffc17 	ldw	r2,-16(fp)
   22224:	10800044 	addi	r2,r2,1
   22228:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   2222c:	e0bff717 	ldw	r2,-36(fp)
   22230:	10800044 	addi	r2,r2,1
   22234:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   22238:	e0fff717 	ldw	r3,-36(fp)
   2223c:	e0bffd17 	ldw	r2,-12(fp)
   22240:	1880022e 	bgeu	r3,r2,2224c <alt_avalon_i2c_master_receive+0x17c>
   22244:	e0bff917 	ldw	r2,-28(fp)
   22248:	103ff126 	beq	r2,zero,22210 <__alt_data_end+0xfc022210>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2224c:	e0bfff03 	ldbu	r2,-4(fp)
   22250:	1000021e 	bne	r2,zero,2225c <alt_avalon_i2c_master_receive+0x18c>
   22254:	e0bff917 	ldw	r2,-28(fp)
   22258:	10001b26 	beq	r2,zero,222c8 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   2225c:	0149c404 	movi	r5,10000
   22260:	e13ffd17 	ldw	r4,-12(fp)
   22264:	000d8d40 	call	d8d4 <__mulsi3>
   22268:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2226c:	00000d06 	br	222a4 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22270:	e0bff617 	ldw	r2,-40(fp)
   22274:	108002a8 	cmpgeui	r2,r2,10
   22278:	1000021e 	bne	r2,zero,22284 <alt_avalon_i2c_master_receive+0x1b4>
   2227c:	0109c404 	movi	r4,10000
   22280:	00236a00 	call	236a0 <alt_busy_sleep>
            if (--timeout == 0)
   22284:	e0bff617 	ldw	r2,-40(fp)
   22288:	10bfffc4 	addi	r2,r2,-1
   2228c:	e0bff615 	stw	r2,-40(fp)
   22290:	e0bff617 	ldw	r2,-40(fp)
   22294:	1000031e 	bne	r2,zero,222a4 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22298:	00bfff84 	movi	r2,-2
   2229c:	e0bff915 	stw	r2,-28(fp)
               break;
   222a0:	00000306 	br	222b0 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   222a4:	e13ffb17 	ldw	r4,-20(fp)
   222a8:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   222ac:	103ff01e 	bne	r2,zero,22270 <__alt_data_end+0xfc022270>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   222b0:	e0bff904 	addi	r2,fp,-28
   222b4:	100b883a 	mov	r5,r2
   222b8:	e13ffb17 	ldw	r4,-20(fp)
   222bc:	00217440 	call	21744 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   222c0:	e13ffb17 	ldw	r4,-20(fp)
   222c4:	00210180 	call	21018 <alt_avalon_i2c_disable>
    }

    return status;
   222c8:	e0bff917 	ldw	r2,-28(fp)
}
   222cc:	e037883a 	mov	sp,fp
   222d0:	dfc00117 	ldw	ra,4(sp)
   222d4:	df000017 	ldw	fp,0(sp)
   222d8:	dec00204 	addi	sp,sp,8
   222dc:	f800283a 	ret

000222e0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   222e0:	defff504 	addi	sp,sp,-44
   222e4:	dfc00a15 	stw	ra,40(sp)
   222e8:	df000915 	stw	fp,36(sp)
   222ec:	df000904 	addi	fp,sp,36
   222f0:	e13ffb15 	stw	r4,-20(fp)
   222f4:	e17ffc15 	stw	r5,-16(fp)
   222f8:	e1bffd15 	stw	r6,-12(fp)
   222fc:	3807883a 	mov	r3,r7
   22300:	e0800217 	ldw	r2,8(fp)
   22304:	e0fffe05 	stb	r3,-8(fp)
   22308:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2230c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   22310:	e0bffb17 	ldw	r2,-20(fp)
   22314:	10800717 	ldw	r2,28(r2)
   22318:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2231c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   22320:	e0bffd17 	ldw	r2,-12(fp)
   22324:	1000021e 	bne	r2,zero,22330 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   22328:	0005883a 	mov	r2,zero
   2232c:	00006306 	br	224bc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   22330:	e0bffb17 	ldw	r2,-20(fp)
   22334:	10c00617 	ldw	r3,24(r2)
   22338:	008000b4 	movhi	r2,2
   2233c:	10830104 	addi	r2,r2,3076
   22340:	18800226 	beq	r3,r2,2234c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   22344:	00bfff44 	movi	r2,-3
   22348:	00005c06 	br	224bc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2234c:	e0bffe03 	ldbu	r2,-8(fp)
   22350:	10000a1e 	bne	r2,zero,2237c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22354:	e13ffb17 	ldw	r4,-20(fp)
   22358:	0020f800 	call	20f80 <alt_avalon_i2c_enable>
   2235c:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   22360:	e0bff717 	ldw	r2,-36(fp)
   22364:	10000226 	beq	r2,zero,22370 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   22368:	e0bff717 	ldw	r2,-36(fp)
   2236c:	00005306 	br	224bc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22370:	01400704 	movi	r5,28
   22374:	e13ffb17 	ldw	r4,-20(fp)
   22378:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2237c:	e0bffe03 	ldbu	r2,-8(fp)
   22380:	100d883a 	mov	r6,r2
   22384:	01400044 	movi	r5,1
   22388:	e13ffb17 	ldw	r4,-20(fp)
   2238c:	00215e80 	call	215e8 <alt_avalon_i2c_send_address>
   22390:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   22394:	e0bff717 	ldw	r2,-36(fp)
   22398:	1000191e 	bne	r2,zero,22400 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2239c:	00000906 	br	223c4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   223a0:	000f883a 	mov	r7,zero
   223a4:	000d883a 	mov	r6,zero
   223a8:	000b883a 	mov	r5,zero
   223ac:	e13ffb17 	ldw	r4,-20(fp)
   223b0:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   223b4:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   223b8:	e0bff917 	ldw	r2,-28(fp)
   223bc:	10800044 	addi	r2,r2,1
   223c0:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   223c4:	e0bffd17 	ldw	r2,-12(fp)
   223c8:	10bfffc4 	addi	r2,r2,-1
   223cc:	e0fff917 	ldw	r3,-28(fp)
   223d0:	1880022e 	bgeu	r3,r2,223dc <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   223d4:	e0bff717 	ldw	r2,-36(fp)
   223d8:	103ff126 	beq	r2,zero,223a0 <__alt_data_end+0xfc0223a0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   223dc:	e0bff717 	ldw	r2,-36(fp)
   223e0:	1000071e 	bne	r2,zero,22400 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   223e4:	e0bfff03 	ldbu	r2,-4(fp)
   223e8:	100f883a 	mov	r7,r2
   223ec:	000d883a 	mov	r6,zero
   223f0:	000b883a 	mov	r5,zero
   223f4:	e13ffb17 	ldw	r4,-20(fp)
   223f8:	00215040 	call	21504 <alt_avalon_i2c_cmd_write>
   223fc:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   22400:	e0bff717 	ldw	r2,-36(fp)
   22404:	10001826 	beq	r2,zero,22468 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   22408:	0149c404 	movi	r5,10000
   2240c:	e13ffd17 	ldw	r4,-12(fp)
   22410:	000d8d40 	call	d8d4 <__mulsi3>
   22414:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22418:	00000d06 	br	22450 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2241c:	e0bff817 	ldw	r2,-32(fp)
   22420:	108002a8 	cmpgeui	r2,r2,10
   22424:	1000021e 	bne	r2,zero,22430 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   22428:	0109c404 	movi	r4,10000
   2242c:	00236a00 	call	236a0 <alt_busy_sleep>
            if (--timeout == 0)
   22430:	e0bff817 	ldw	r2,-32(fp)
   22434:	10bfffc4 	addi	r2,r2,-1
   22438:	e0bff815 	stw	r2,-32(fp)
   2243c:	e0bff817 	ldw	r2,-32(fp)
   22440:	1000031e 	bne	r2,zero,22450 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22444:	00bfff84 	movi	r2,-2
   22448:	e0bff715 	stw	r2,-36(fp)
               break;
   2244c:	00000306 	br	2245c <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22450:	e13ffb17 	ldw	r4,-20(fp)
   22454:	00213700 	call	21370 <alt_avalon_i2c_is_busy>
   22458:	103ff01e 	bne	r2,zero,2241c <__alt_data_end+0xfc02241c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2245c:	e13ffb17 	ldw	r4,-20(fp)
   22460:	00210180 	call	21018 <alt_avalon_i2c_disable>
   22464:	00001406 	br	224b8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   22468:	e0bfff03 	ldbu	r2,-4(fp)
   2246c:	10001226 	beq	r2,zero,224b8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22470:	01400704 	movi	r5,28
   22474:	e13ffb17 	ldw	r4,-20(fp)
   22478:	002256c0 	call	2256c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   2247c:	000b883a 	mov	r5,zero
   22480:	e13ffb17 	ldw	r4,-20(fp)
   22484:	00227040 	call	22704 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   22488:	e0bffa17 	ldw	r2,-24(fp)
   2248c:	00c00084 	movi	r3,2
   22490:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   22494:	e0bffa17 	ldw	r2,-24(fp)
   22498:	e0fffc17 	ldw	r3,-16(fp)
   2249c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   224a0:	e0bffa17 	ldw	r2,-24(fp)
   224a4:	e0fffd17 	ldw	r3,-12(fp)
   224a8:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   224ac:	01400084 	movi	r5,2
   224b0:	e13ffb17 	ldw	r4,-20(fp)
   224b4:	00226100 	call	22610 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   224b8:	e0bff717 	ldw	r2,-36(fp)
}
   224bc:	e037883a 	mov	sp,fp
   224c0:	dfc00117 	ldw	ra,4(sp)
   224c4:	df000017 	ldw	fp,0(sp)
   224c8:	dec00204 	addi	sp,sp,8
   224cc:	f800283a 	ret

000224d0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   224d0:	defffd04 	addi	sp,sp,-12
   224d4:	df000215 	stw	fp,8(sp)
   224d8:	df000204 	addi	fp,sp,8
   224dc:	e13ffe15 	stw	r4,-8(fp)
   224e0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   224e4:	e0bffe17 	ldw	r2,-8(fp)
   224e8:	10800317 	ldw	r2,12(r2)
   224ec:	10800404 	addi	r2,r2,16
   224f0:	10c00037 	ldwio	r3,0(r2)
   224f4:	e0bffe17 	ldw	r2,-8(fp)
   224f8:	10800317 	ldw	r2,12(r2)
   224fc:	10800304 	addi	r2,r2,12
   22500:	10800037 	ldwio	r2,0(r2)
   22504:	1884703a 	and	r2,r3,r2
   22508:	1007883a 	mov	r3,r2
   2250c:	e0bfff17 	ldw	r2,-4(fp)
   22510:	10c00015 	stw	r3,0(r2)
}
   22514:	0001883a 	nop
   22518:	e037883a 	mov	sp,fp
   2251c:	df000017 	ldw	fp,0(sp)
   22520:	dec00104 	addi	sp,sp,4
   22524:	f800283a 	ret

00022528 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   22528:	defffd04 	addi	sp,sp,-12
   2252c:	df000215 	stw	fp,8(sp)
   22530:	df000204 	addi	fp,sp,8
   22534:	e13ffe15 	stw	r4,-8(fp)
   22538:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   2253c:	e0bffe17 	ldw	r2,-8(fp)
   22540:	10800317 	ldw	r2,12(r2)
   22544:	10800404 	addi	r2,r2,16
   22548:	10800037 	ldwio	r2,0(r2)
   2254c:	1007883a 	mov	r3,r2
   22550:	e0bfff17 	ldw	r2,-4(fp)
   22554:	10c00015 	stw	r3,0(r2)
}
   22558:	0001883a 	nop
   2255c:	e037883a 	mov	sp,fp
   22560:	df000017 	ldw	fp,0(sp)
   22564:	dec00104 	addi	sp,sp,4
   22568:	f800283a 	ret

0002256c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2256c:	defffd04 	addi	sp,sp,-12
   22570:	df000215 	stw	fp,8(sp)
   22574:	df000204 	addi	fp,sp,8
   22578:	e13ffe15 	stw	r4,-8(fp)
   2257c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   22580:	e0bffe17 	ldw	r2,-8(fp)
   22584:	10800317 	ldw	r2,12(r2)
   22588:	10800404 	addi	r2,r2,16
   2258c:	e0ffff17 	ldw	r3,-4(fp)
   22590:	10c00035 	stwio	r3,0(r2)
}
   22594:	0001883a 	nop
   22598:	e037883a 	mov	sp,fp
   2259c:	df000017 	ldw	fp,0(sp)
   225a0:	dec00104 	addi	sp,sp,4
   225a4:	f800283a 	ret

000225a8 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   225a8:	defffb04 	addi	sp,sp,-20
   225ac:	dfc00415 	stw	ra,16(sp)
   225b0:	df000315 	stw	fp,12(sp)
   225b4:	df000304 	addi	fp,sp,12
   225b8:	e13ffe15 	stw	r4,-8(fp)
   225bc:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   225c0:	e17ffd04 	addi	r5,fp,-12
   225c4:	e13ffe17 	ldw	r4,-8(fp)
   225c8:	00226740 	call	22674 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   225cc:	e0bfff17 	ldw	r2,-4(fp)
   225d0:	0086303a 	nor	r3,zero,r2
   225d4:	e0bffd17 	ldw	r2,-12(fp)
   225d8:	1884703a 	and	r2,r3,r2
   225dc:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   225e0:	e0bffe17 	ldw	r2,-8(fp)
   225e4:	10800317 	ldw	r2,12(r2)
   225e8:	10800304 	addi	r2,r2,12
   225ec:	e0fffd17 	ldw	r3,-12(fp)
   225f0:	18c007cc 	andi	r3,r3,31
   225f4:	10c00035 	stwio	r3,0(r2)
}
   225f8:	0001883a 	nop
   225fc:	e037883a 	mov	sp,fp
   22600:	dfc00117 	ldw	ra,4(sp)
   22604:	df000017 	ldw	fp,0(sp)
   22608:	dec00204 	addi	sp,sp,8
   2260c:	f800283a 	ret

00022610 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   22610:	defffb04 	addi	sp,sp,-20
   22614:	dfc00415 	stw	ra,16(sp)
   22618:	df000315 	stw	fp,12(sp)
   2261c:	df000304 	addi	fp,sp,12
   22620:	e13ffe15 	stw	r4,-8(fp)
   22624:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   22628:	e17ffd04 	addi	r5,fp,-12
   2262c:	e13ffe17 	ldw	r4,-8(fp)
   22630:	00226740 	call	22674 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   22634:	e0fffd17 	ldw	r3,-12(fp)
   22638:	e0bfff17 	ldw	r2,-4(fp)
   2263c:	1884b03a 	or	r2,r3,r2
   22640:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22644:	e0bffe17 	ldw	r2,-8(fp)
   22648:	10800317 	ldw	r2,12(r2)
   2264c:	10800304 	addi	r2,r2,12
   22650:	e0fffd17 	ldw	r3,-12(fp)
   22654:	18c007cc 	andi	r3,r3,31
   22658:	10c00035 	stwio	r3,0(r2)
}
   2265c:	0001883a 	nop
   22660:	e037883a 	mov	sp,fp
   22664:	dfc00117 	ldw	ra,4(sp)
   22668:	df000017 	ldw	fp,0(sp)
   2266c:	dec00204 	addi	sp,sp,8
   22670:	f800283a 	ret

00022674 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   22674:	defffd04 	addi	sp,sp,-12
   22678:	df000215 	stw	fp,8(sp)
   2267c:	df000204 	addi	fp,sp,8
   22680:	e13ffe15 	stw	r4,-8(fp)
   22684:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   22688:	e0bffe17 	ldw	r2,-8(fp)
   2268c:	10800317 	ldw	r2,12(r2)
   22690:	10800304 	addi	r2,r2,12
   22694:	10800037 	ldwio	r2,0(r2)
   22698:	10c007cc 	andi	r3,r2,31
   2269c:	e0bfff17 	ldw	r2,-4(fp)
   226a0:	10c00015 	stw	r3,0(r2)
}
   226a4:	0001883a 	nop
   226a8:	e037883a 	mov	sp,fp
   226ac:	df000017 	ldw	fp,0(sp)
   226b0:	dec00104 	addi	sp,sp,4
   226b4:	f800283a 	ret

000226b8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   226b8:	defffd04 	addi	sp,sp,-12
   226bc:	df000215 	stw	fp,8(sp)
   226c0:	df000204 	addi	fp,sp,8
   226c4:	e13ffe15 	stw	r4,-8(fp)
   226c8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   226cc:	e0bffe17 	ldw	r2,-8(fp)
   226d0:	10800317 	ldw	r2,12(r2)
   226d4:	10800204 	addi	r2,r2,8
   226d8:	10800037 	ldwio	r2,0(r2)
   226dc:	10800c0c 	andi	r2,r2,48
   226e0:	1005d13a 	srai	r2,r2,4
   226e4:	1007883a 	mov	r3,r2
   226e8:	e0bfff17 	ldw	r2,-4(fp)
   226ec:	10c00015 	stw	r3,0(r2)
}
   226f0:	0001883a 	nop
   226f4:	e037883a 	mov	sp,fp
   226f8:	df000017 	ldw	fp,0(sp)
   226fc:	dec00104 	addi	sp,sp,4
   22700:	f800283a 	ret

00022704 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   22704:	defffd04 	addi	sp,sp,-12
   22708:	df000215 	stw	fp,8(sp)
   2270c:	df000204 	addi	fp,sp,8
   22710:	e13ffe15 	stw	r4,-8(fp)
   22714:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   22718:	e0bffe17 	ldw	r2,-8(fp)
   2271c:	10800317 	ldw	r2,12(r2)
   22720:	10800204 	addi	r2,r2,8
   22724:	e0fffe17 	ldw	r3,-8(fp)
   22728:	18c00317 	ldw	r3,12(r3)
   2272c:	18c00204 	addi	r3,r3,8
   22730:	18c00037 	ldwio	r3,0(r3)
   22734:	1809883a 	mov	r4,r3
   22738:	00fff3c4 	movi	r3,-49
   2273c:	20c8703a 	and	r4,r4,r3
   22740:	e0ffff17 	ldw	r3,-4(fp)
   22744:	1806913a 	slli	r3,r3,4
   22748:	18c00c0c 	andi	r3,r3,48
   2274c:	20c6b03a 	or	r3,r4,r3
   22750:	10c00035 	stwio	r3,0(r2)
}
   22754:	0001883a 	nop
   22758:	e037883a 	mov	sp,fp
   2275c:	df000017 	ldw	fp,0(sp)
   22760:	dec00104 	addi	sp,sp,4
   22764:	f800283a 	ret

00022768 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   22768:	defffd04 	addi	sp,sp,-12
   2276c:	df000215 	stw	fp,8(sp)
   22770:	df000204 	addi	fp,sp,8
   22774:	e13ffe15 	stw	r4,-8(fp)
   22778:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   2277c:	e0bffe17 	ldw	r2,-8(fp)
   22780:	10800317 	ldw	r2,12(r2)
   22784:	10800204 	addi	r2,r2,8
   22788:	10800037 	ldwio	r2,0(r2)
   2278c:	1080030c 	andi	r2,r2,12
   22790:	1005d0ba 	srai	r2,r2,2
   22794:	1007883a 	mov	r3,r2
   22798:	e0bfff17 	ldw	r2,-4(fp)
   2279c:	10c00015 	stw	r3,0(r2)
}
   227a0:	0001883a 	nop
   227a4:	e037883a 	mov	sp,fp
   227a8:	df000017 	ldw	fp,0(sp)
   227ac:	dec00104 	addi	sp,sp,4
   227b0:	f800283a 	ret

000227b4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   227b4:	defffd04 	addi	sp,sp,-12
   227b8:	df000215 	stw	fp,8(sp)
   227bc:	df000204 	addi	fp,sp,8
   227c0:	e13ffe15 	stw	r4,-8(fp)
   227c4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   227c8:	e0bffe17 	ldw	r2,-8(fp)
   227cc:	10800317 	ldw	r2,12(r2)
   227d0:	10c00204 	addi	r3,r2,8
   227d4:	e0bffe17 	ldw	r2,-8(fp)
   227d8:	10800317 	ldw	r2,12(r2)
   227dc:	10800204 	addi	r2,r2,8
   227e0:	10800037 	ldwio	r2,0(r2)
   227e4:	1009883a 	mov	r4,r2
   227e8:	00bffcc4 	movi	r2,-13
   227ec:	2088703a 	and	r4,r4,r2
   227f0:	e0bfff17 	ldw	r2,-4(fp)
   227f4:	1085883a 	add	r2,r2,r2
   227f8:	1085883a 	add	r2,r2,r2
   227fc:	1080030c 	andi	r2,r2,12
   22800:	2084b03a 	or	r2,r4,r2
   22804:	18800035 	stwio	r2,0(r3)
}
   22808:	0001883a 	nop
   2280c:	e037883a 	mov	sp,fp
   22810:	df000017 	ldw	fp,0(sp)
   22814:	dec00104 	addi	sp,sp,4
   22818:	f800283a 	ret

0002281c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2281c:	defffa04 	addi	sp,sp,-24
   22820:	dfc00515 	stw	ra,20(sp)
   22824:	df000415 	stw	fp,16(sp)
   22828:	df000404 	addi	fp,sp,16
   2282c:	e13ffd15 	stw	r4,-12(fp)
   22830:	e17ffe15 	stw	r5,-8(fp)
   22834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22838:	e0bffd17 	ldw	r2,-12(fp)
   2283c:	10800017 	ldw	r2,0(r2)
   22840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22844:	e0bffc17 	ldw	r2,-16(fp)
   22848:	10c00a04 	addi	r3,r2,40
   2284c:	e0bffd17 	ldw	r2,-12(fp)
   22850:	10800217 	ldw	r2,8(r2)
   22854:	100f883a 	mov	r7,r2
   22858:	e1bfff17 	ldw	r6,-4(fp)
   2285c:	e17ffe17 	ldw	r5,-8(fp)
   22860:	1809883a 	mov	r4,r3
   22864:	0022e440 	call	22e44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22868:	e037883a 	mov	sp,fp
   2286c:	dfc00117 	ldw	ra,4(sp)
   22870:	df000017 	ldw	fp,0(sp)
   22874:	dec00204 	addi	sp,sp,8
   22878:	f800283a 	ret

0002287c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2287c:	defffa04 	addi	sp,sp,-24
   22880:	dfc00515 	stw	ra,20(sp)
   22884:	df000415 	stw	fp,16(sp)
   22888:	df000404 	addi	fp,sp,16
   2288c:	e13ffd15 	stw	r4,-12(fp)
   22890:	e17ffe15 	stw	r5,-8(fp)
   22894:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22898:	e0bffd17 	ldw	r2,-12(fp)
   2289c:	10800017 	ldw	r2,0(r2)
   228a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   228a4:	e0bffc17 	ldw	r2,-16(fp)
   228a8:	10c00a04 	addi	r3,r2,40
   228ac:	e0bffd17 	ldw	r2,-12(fp)
   228b0:	10800217 	ldw	r2,8(r2)
   228b4:	100f883a 	mov	r7,r2
   228b8:	e1bfff17 	ldw	r6,-4(fp)
   228bc:	e17ffe17 	ldw	r5,-8(fp)
   228c0:	1809883a 	mov	r4,r3
   228c4:	00230600 	call	23060 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   228c8:	e037883a 	mov	sp,fp
   228cc:	dfc00117 	ldw	ra,4(sp)
   228d0:	df000017 	ldw	fp,0(sp)
   228d4:	dec00204 	addi	sp,sp,8
   228d8:	f800283a 	ret

000228dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   228dc:	defffc04 	addi	sp,sp,-16
   228e0:	dfc00315 	stw	ra,12(sp)
   228e4:	df000215 	stw	fp,8(sp)
   228e8:	df000204 	addi	fp,sp,8
   228ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228f0:	e0bfff17 	ldw	r2,-4(fp)
   228f4:	10800017 	ldw	r2,0(r2)
   228f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   228fc:	e0bffe17 	ldw	r2,-8(fp)
   22900:	10c00a04 	addi	r3,r2,40
   22904:	e0bfff17 	ldw	r2,-4(fp)
   22908:	10800217 	ldw	r2,8(r2)
   2290c:	100b883a 	mov	r5,r2
   22910:	1809883a 	mov	r4,r3
   22914:	0022cec0 	call	22cec <altera_avalon_jtag_uart_close>
}
   22918:	e037883a 	mov	sp,fp
   2291c:	dfc00117 	ldw	ra,4(sp)
   22920:	df000017 	ldw	fp,0(sp)
   22924:	dec00204 	addi	sp,sp,8
   22928:	f800283a 	ret

0002292c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2292c:	defffa04 	addi	sp,sp,-24
   22930:	dfc00515 	stw	ra,20(sp)
   22934:	df000415 	stw	fp,16(sp)
   22938:	df000404 	addi	fp,sp,16
   2293c:	e13ffd15 	stw	r4,-12(fp)
   22940:	e17ffe15 	stw	r5,-8(fp)
   22944:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22948:	e0bffd17 	ldw	r2,-12(fp)
   2294c:	10800017 	ldw	r2,0(r2)
   22950:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22954:	e0bffc17 	ldw	r2,-16(fp)
   22958:	10800a04 	addi	r2,r2,40
   2295c:	e1bfff17 	ldw	r6,-4(fp)
   22960:	e17ffe17 	ldw	r5,-8(fp)
   22964:	1009883a 	mov	r4,r2
   22968:	0022d540 	call	22d54 <altera_avalon_jtag_uart_ioctl>
}
   2296c:	e037883a 	mov	sp,fp
   22970:	dfc00117 	ldw	ra,4(sp)
   22974:	df000017 	ldw	fp,0(sp)
   22978:	dec00204 	addi	sp,sp,8
   2297c:	f800283a 	ret

00022980 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   22980:	defffa04 	addi	sp,sp,-24
   22984:	dfc00515 	stw	ra,20(sp)
   22988:	df000415 	stw	fp,16(sp)
   2298c:	df000404 	addi	fp,sp,16
   22990:	e13ffd15 	stw	r4,-12(fp)
   22994:	e17ffe15 	stw	r5,-8(fp)
   22998:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2299c:	e0bffd17 	ldw	r2,-12(fp)
   229a0:	00c00044 	movi	r3,1
   229a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   229a8:	e0bffd17 	ldw	r2,-12(fp)
   229ac:	10800017 	ldw	r2,0(r2)
   229b0:	10800104 	addi	r2,r2,4
   229b4:	1007883a 	mov	r3,r2
   229b8:	e0bffd17 	ldw	r2,-12(fp)
   229bc:	10800817 	ldw	r2,32(r2)
   229c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   229c4:	e0bffe17 	ldw	r2,-8(fp)
   229c8:	e0ffff17 	ldw	r3,-4(fp)
   229cc:	d8000015 	stw	zero,0(sp)
   229d0:	e1fffd17 	ldw	r7,-12(fp)
   229d4:	018000b4 	movhi	r6,2
   229d8:	318a9004 	addi	r6,r6,10816
   229dc:	180b883a 	mov	r5,r3
   229e0:	1009883a 	mov	r4,r2
   229e4:	0023a680 	call	23a68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   229e8:	e0bffd17 	ldw	r2,-12(fp)
   229ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   229f0:	e0bffd17 	ldw	r2,-12(fp)
   229f4:	10800204 	addi	r2,r2,8
   229f8:	d0f25617 	ldw	r3,-13992(gp)
   229fc:	e1fffd17 	ldw	r7,-12(fp)
   22a00:	018000b4 	movhi	r6,2
   22a04:	318b1304 	addi	r6,r6,11340
   22a08:	180b883a 	mov	r5,r3
   22a0c:	1009883a 	mov	r4,r2
   22a10:	00235740 	call	23574 <alt_alarm_start>
   22a14:	1000040e 	bge	r2,zero,22a28 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22a18:	e0fffd17 	ldw	r3,-12(fp)
   22a1c:	00a00034 	movhi	r2,32768
   22a20:	10bfffc4 	addi	r2,r2,-1
   22a24:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22a28:	0001883a 	nop
   22a2c:	e037883a 	mov	sp,fp
   22a30:	dfc00117 	ldw	ra,4(sp)
   22a34:	df000017 	ldw	fp,0(sp)
   22a38:	dec00204 	addi	sp,sp,8
   22a3c:	f800283a 	ret

00022a40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22a40:	defff804 	addi	sp,sp,-32
   22a44:	df000715 	stw	fp,28(sp)
   22a48:	df000704 	addi	fp,sp,28
   22a4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22a50:	e0bfff17 	ldw	r2,-4(fp)
   22a54:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   22a58:	e0bffb17 	ldw	r2,-20(fp)
   22a5c:	10800017 	ldw	r2,0(r2)
   22a60:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22a64:	e0bffc17 	ldw	r2,-16(fp)
   22a68:	10800104 	addi	r2,r2,4
   22a6c:	10800037 	ldwio	r2,0(r2)
   22a70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   22a74:	e0bffd17 	ldw	r2,-12(fp)
   22a78:	1080c00c 	andi	r2,r2,768
   22a7c:	10006d26 	beq	r2,zero,22c34 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   22a80:	e0bffd17 	ldw	r2,-12(fp)
   22a84:	1080400c 	andi	r2,r2,256
   22a88:	10003526 	beq	r2,zero,22b60 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   22a8c:	00800074 	movhi	r2,1
   22a90:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22a94:	e0bffb17 	ldw	r2,-20(fp)
   22a98:	10800a17 	ldw	r2,40(r2)
   22a9c:	10800044 	addi	r2,r2,1
   22aa0:	1081ffcc 	andi	r2,r2,2047
   22aa4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   22aa8:	e0bffb17 	ldw	r2,-20(fp)
   22aac:	10c00b17 	ldw	r3,44(r2)
   22ab0:	e0bffe17 	ldw	r2,-8(fp)
   22ab4:	18801526 	beq	r3,r2,22b0c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22ab8:	e0bffc17 	ldw	r2,-16(fp)
   22abc:	10800037 	ldwio	r2,0(r2)
   22ac0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   22ac4:	e0bff917 	ldw	r2,-28(fp)
   22ac8:	10a0000c 	andi	r2,r2,32768
   22acc:	10001126 	beq	r2,zero,22b14 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22ad0:	e0bffb17 	ldw	r2,-20(fp)
   22ad4:	10800a17 	ldw	r2,40(r2)
   22ad8:	e0fff917 	ldw	r3,-28(fp)
   22adc:	1809883a 	mov	r4,r3
   22ae0:	e0fffb17 	ldw	r3,-20(fp)
   22ae4:	1885883a 	add	r2,r3,r2
   22ae8:	10800e04 	addi	r2,r2,56
   22aec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22af0:	e0bffb17 	ldw	r2,-20(fp)
   22af4:	10800a17 	ldw	r2,40(r2)
   22af8:	10800044 	addi	r2,r2,1
   22afc:	10c1ffcc 	andi	r3,r2,2047
   22b00:	e0bffb17 	ldw	r2,-20(fp)
   22b04:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   22b08:	003fe206 	br	22a94 <__alt_data_end+0xfc022a94>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   22b0c:	0001883a 	nop
   22b10:	00000106 	br	22b18 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   22b14:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22b18:	e0bff917 	ldw	r2,-28(fp)
   22b1c:	10bfffec 	andhi	r2,r2,65535
   22b20:	10000f26 	beq	r2,zero,22b60 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22b24:	e0bffb17 	ldw	r2,-20(fp)
   22b28:	10c00817 	ldw	r3,32(r2)
   22b2c:	00bfff84 	movi	r2,-2
   22b30:	1886703a 	and	r3,r3,r2
   22b34:	e0bffb17 	ldw	r2,-20(fp)
   22b38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   22b3c:	e0bffc17 	ldw	r2,-16(fp)
   22b40:	10800104 	addi	r2,r2,4
   22b44:	1007883a 	mov	r3,r2
   22b48:	e0bffb17 	ldw	r2,-20(fp)
   22b4c:	10800817 	ldw	r2,32(r2)
   22b50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22b54:	e0bffc17 	ldw	r2,-16(fp)
   22b58:	10800104 	addi	r2,r2,4
   22b5c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   22b60:	e0bffd17 	ldw	r2,-12(fp)
   22b64:	1080800c 	andi	r2,r2,512
   22b68:	103fbe26 	beq	r2,zero,22a64 <__alt_data_end+0xfc022a64>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   22b6c:	e0bffd17 	ldw	r2,-12(fp)
   22b70:	1004d43a 	srli	r2,r2,16
   22b74:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   22b78:	00001406 	br	22bcc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   22b7c:	e0bffc17 	ldw	r2,-16(fp)
   22b80:	e0fffb17 	ldw	r3,-20(fp)
   22b84:	18c00d17 	ldw	r3,52(r3)
   22b88:	e13ffb17 	ldw	r4,-20(fp)
   22b8c:	20c7883a 	add	r3,r4,r3
   22b90:	18c20e04 	addi	r3,r3,2104
   22b94:	18c00003 	ldbu	r3,0(r3)
   22b98:	18c03fcc 	andi	r3,r3,255
   22b9c:	18c0201c 	xori	r3,r3,128
   22ba0:	18ffe004 	addi	r3,r3,-128
   22ba4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22ba8:	e0bffb17 	ldw	r2,-20(fp)
   22bac:	10800d17 	ldw	r2,52(r2)
   22bb0:	10800044 	addi	r2,r2,1
   22bb4:	10c1ffcc 	andi	r3,r2,2047
   22bb8:	e0bffb17 	ldw	r2,-20(fp)
   22bbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   22bc0:	e0bffa17 	ldw	r2,-24(fp)
   22bc4:	10bfffc4 	addi	r2,r2,-1
   22bc8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   22bcc:	e0bffa17 	ldw	r2,-24(fp)
   22bd0:	10000526 	beq	r2,zero,22be8 <altera_avalon_jtag_uart_irq+0x1a8>
   22bd4:	e0bffb17 	ldw	r2,-20(fp)
   22bd8:	10c00d17 	ldw	r3,52(r2)
   22bdc:	e0bffb17 	ldw	r2,-20(fp)
   22be0:	10800c17 	ldw	r2,48(r2)
   22be4:	18bfe51e 	bne	r3,r2,22b7c <__alt_data_end+0xfc022b7c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   22be8:	e0bffa17 	ldw	r2,-24(fp)
   22bec:	103f9d26 	beq	r2,zero,22a64 <__alt_data_end+0xfc022a64>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22bf0:	e0bffb17 	ldw	r2,-20(fp)
   22bf4:	10c00817 	ldw	r3,32(r2)
   22bf8:	00bfff44 	movi	r2,-3
   22bfc:	1886703a 	and	r3,r3,r2
   22c00:	e0bffb17 	ldw	r2,-20(fp)
   22c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22c08:	e0bffb17 	ldw	r2,-20(fp)
   22c0c:	10800017 	ldw	r2,0(r2)
   22c10:	10800104 	addi	r2,r2,4
   22c14:	1007883a 	mov	r3,r2
   22c18:	e0bffb17 	ldw	r2,-20(fp)
   22c1c:	10800817 	ldw	r2,32(r2)
   22c20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22c24:	e0bffc17 	ldw	r2,-16(fp)
   22c28:	10800104 	addi	r2,r2,4
   22c2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   22c30:	003f8c06 	br	22a64 <__alt_data_end+0xfc022a64>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   22c34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   22c38:	0001883a 	nop
   22c3c:	e037883a 	mov	sp,fp
   22c40:	df000017 	ldw	fp,0(sp)
   22c44:	dec00104 	addi	sp,sp,4
   22c48:	f800283a 	ret

00022c4c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22c4c:	defff804 	addi	sp,sp,-32
   22c50:	df000715 	stw	fp,28(sp)
   22c54:	df000704 	addi	fp,sp,28
   22c58:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   22c5c:	e0bffb17 	ldw	r2,-20(fp)
   22c60:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   22c64:	e0bff917 	ldw	r2,-28(fp)
   22c68:	10800017 	ldw	r2,0(r2)
   22c6c:	10800104 	addi	r2,r2,4
   22c70:	10800037 	ldwio	r2,0(r2)
   22c74:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   22c78:	e0bffa17 	ldw	r2,-24(fp)
   22c7c:	1081000c 	andi	r2,r2,1024
   22c80:	10000b26 	beq	r2,zero,22cb0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   22c84:	e0bff917 	ldw	r2,-28(fp)
   22c88:	10800017 	ldw	r2,0(r2)
   22c8c:	10800104 	addi	r2,r2,4
   22c90:	1007883a 	mov	r3,r2
   22c94:	e0bff917 	ldw	r2,-28(fp)
   22c98:	10800817 	ldw	r2,32(r2)
   22c9c:	10810014 	ori	r2,r2,1024
   22ca0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   22ca4:	e0bff917 	ldw	r2,-28(fp)
   22ca8:	10000915 	stw	zero,36(r2)
   22cac:	00000a06 	br	22cd8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   22cb0:	e0bff917 	ldw	r2,-28(fp)
   22cb4:	10c00917 	ldw	r3,36(r2)
   22cb8:	00a00034 	movhi	r2,32768
   22cbc:	10bfff04 	addi	r2,r2,-4
   22cc0:	10c00536 	bltu	r2,r3,22cd8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   22cc4:	e0bff917 	ldw	r2,-28(fp)
   22cc8:	10800917 	ldw	r2,36(r2)
   22ccc:	10c00044 	addi	r3,r2,1
   22cd0:	e0bff917 	ldw	r2,-28(fp)
   22cd4:	10c00915 	stw	r3,36(r2)
   22cd8:	d0b25617 	ldw	r2,-13992(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   22cdc:	e037883a 	mov	sp,fp
   22ce0:	df000017 	ldw	fp,0(sp)
   22ce4:	dec00104 	addi	sp,sp,4
   22ce8:	f800283a 	ret

00022cec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22cec:	defffd04 	addi	sp,sp,-12
   22cf0:	df000215 	stw	fp,8(sp)
   22cf4:	df000204 	addi	fp,sp,8
   22cf8:	e13ffe15 	stw	r4,-8(fp)
   22cfc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d00:	00000506 	br	22d18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22d04:	e0bfff17 	ldw	r2,-4(fp)
   22d08:	1090000c 	andi	r2,r2,16384
   22d0c:	10000226 	beq	r2,zero,22d18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   22d10:	00bffd44 	movi	r2,-11
   22d14:	00000b06 	br	22d44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d18:	e0bffe17 	ldw	r2,-8(fp)
   22d1c:	10c00d17 	ldw	r3,52(r2)
   22d20:	e0bffe17 	ldw	r2,-8(fp)
   22d24:	10800c17 	ldw	r2,48(r2)
   22d28:	18800526 	beq	r3,r2,22d40 <altera_avalon_jtag_uart_close+0x54>
   22d2c:	e0bffe17 	ldw	r2,-8(fp)
   22d30:	10c00917 	ldw	r3,36(r2)
   22d34:	e0bffe17 	ldw	r2,-8(fp)
   22d38:	10800117 	ldw	r2,4(r2)
   22d3c:	18bff136 	bltu	r3,r2,22d04 <__alt_data_end+0xfc022d04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   22d40:	0005883a 	mov	r2,zero
}
   22d44:	e037883a 	mov	sp,fp
   22d48:	df000017 	ldw	fp,0(sp)
   22d4c:	dec00104 	addi	sp,sp,4
   22d50:	f800283a 	ret

00022d54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22d54:	defffa04 	addi	sp,sp,-24
   22d58:	df000515 	stw	fp,20(sp)
   22d5c:	df000504 	addi	fp,sp,20
   22d60:	e13ffd15 	stw	r4,-12(fp)
   22d64:	e17ffe15 	stw	r5,-8(fp)
   22d68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22d6c:	00bff9c4 	movi	r2,-25
   22d70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22d74:	e0bffe17 	ldw	r2,-8(fp)
   22d78:	10da8060 	cmpeqi	r3,r2,27137
   22d7c:	1800031e 	bne	r3,zero,22d8c <altera_avalon_jtag_uart_ioctl+0x38>
   22d80:	109a80a0 	cmpeqi	r2,r2,27138
   22d84:	1000181e 	bne	r2,zero,22de8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22d88:	00002906 	br	22e30 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22d8c:	e0bffd17 	ldw	r2,-12(fp)
   22d90:	10c00117 	ldw	r3,4(r2)
   22d94:	00a00034 	movhi	r2,32768
   22d98:	10bfffc4 	addi	r2,r2,-1
   22d9c:	18802126 	beq	r3,r2,22e24 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22da0:	e0bfff17 	ldw	r2,-4(fp)
   22da4:	10800017 	ldw	r2,0(r2)
   22da8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22dac:	e0bffc17 	ldw	r2,-16(fp)
   22db0:	10800090 	cmplti	r2,r2,2
   22db4:	1000061e 	bne	r2,zero,22dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   22db8:	e0fffc17 	ldw	r3,-16(fp)
   22dbc:	00a00034 	movhi	r2,32768
   22dc0:	10bfffc4 	addi	r2,r2,-1
   22dc4:	18800226 	beq	r3,r2,22dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   22dc8:	e0bffc17 	ldw	r2,-16(fp)
   22dcc:	00000206 	br	22dd8 <altera_avalon_jtag_uart_ioctl+0x84>
   22dd0:	00a00034 	movhi	r2,32768
   22dd4:	10bfff84 	addi	r2,r2,-2
   22dd8:	e0fffd17 	ldw	r3,-12(fp)
   22ddc:	18800115 	stw	r2,4(r3)
      rc = 0;
   22de0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22de4:	00000f06 	br	22e24 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22de8:	e0bffd17 	ldw	r2,-12(fp)
   22dec:	10c00117 	ldw	r3,4(r2)
   22df0:	00a00034 	movhi	r2,32768
   22df4:	10bfffc4 	addi	r2,r2,-1
   22df8:	18800c26 	beq	r3,r2,22e2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22dfc:	e0bffd17 	ldw	r2,-12(fp)
   22e00:	10c00917 	ldw	r3,36(r2)
   22e04:	e0bffd17 	ldw	r2,-12(fp)
   22e08:	10800117 	ldw	r2,4(r2)
   22e0c:	1885803a 	cmpltu	r2,r3,r2
   22e10:	10c03fcc 	andi	r3,r2,255
   22e14:	e0bfff17 	ldw	r2,-4(fp)
   22e18:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22e1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22e20:	00000206 	br	22e2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   22e24:	0001883a 	nop
   22e28:	00000106 	br	22e30 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   22e2c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22e30:	e0bffb17 	ldw	r2,-20(fp)
}
   22e34:	e037883a 	mov	sp,fp
   22e38:	df000017 	ldw	fp,0(sp)
   22e3c:	dec00104 	addi	sp,sp,4
   22e40:	f800283a 	ret

00022e44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22e44:	defff304 	addi	sp,sp,-52
   22e48:	dfc00c15 	stw	ra,48(sp)
   22e4c:	df000b15 	stw	fp,44(sp)
   22e50:	df000b04 	addi	fp,sp,44
   22e54:	e13ffc15 	stw	r4,-16(fp)
   22e58:	e17ffd15 	stw	r5,-12(fp)
   22e5c:	e1bffe15 	stw	r6,-8(fp)
   22e60:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22e64:	e0bffd17 	ldw	r2,-12(fp)
   22e68:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22e6c:	00004706 	br	22f8c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22e70:	e0bffc17 	ldw	r2,-16(fp)
   22e74:	10800a17 	ldw	r2,40(r2)
   22e78:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   22e7c:	e0bffc17 	ldw	r2,-16(fp)
   22e80:	10800b17 	ldw	r2,44(r2)
   22e84:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22e88:	e0fff717 	ldw	r3,-36(fp)
   22e8c:	e0bff817 	ldw	r2,-32(fp)
   22e90:	18800536 	bltu	r3,r2,22ea8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22e94:	e0fff717 	ldw	r3,-36(fp)
   22e98:	e0bff817 	ldw	r2,-32(fp)
   22e9c:	1885c83a 	sub	r2,r3,r2
   22ea0:	e0bff615 	stw	r2,-40(fp)
   22ea4:	00000406 	br	22eb8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22ea8:	00c20004 	movi	r3,2048
   22eac:	e0bff817 	ldw	r2,-32(fp)
   22eb0:	1885c83a 	sub	r2,r3,r2
   22eb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22eb8:	e0bff617 	ldw	r2,-40(fp)
   22ebc:	10001e26 	beq	r2,zero,22f38 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   22ec0:	e0fffe17 	ldw	r3,-8(fp)
   22ec4:	e0bff617 	ldw	r2,-40(fp)
   22ec8:	1880022e 	bgeu	r3,r2,22ed4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22ed4:	e0bffc17 	ldw	r2,-16(fp)
   22ed8:	10c00e04 	addi	r3,r2,56
   22edc:	e0bff817 	ldw	r2,-32(fp)
   22ee0:	1885883a 	add	r2,r3,r2
   22ee4:	e1bff617 	ldw	r6,-40(fp)
   22ee8:	100b883a 	mov	r5,r2
   22eec:	e13ff517 	ldw	r4,-44(fp)
   22ef0:	000fc740 	call	fc74 <memcpy>
      ptr   += n;
   22ef4:	e0fff517 	ldw	r3,-44(fp)
   22ef8:	e0bff617 	ldw	r2,-40(fp)
   22efc:	1885883a 	add	r2,r3,r2
   22f00:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   22f04:	e0fffe17 	ldw	r3,-8(fp)
   22f08:	e0bff617 	ldw	r2,-40(fp)
   22f0c:	1885c83a 	sub	r2,r3,r2
   22f10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22f14:	e0fff817 	ldw	r3,-32(fp)
   22f18:	e0bff617 	ldw	r2,-40(fp)
   22f1c:	1885883a 	add	r2,r3,r2
   22f20:	10c1ffcc 	andi	r3,r2,2047
   22f24:	e0bffc17 	ldw	r2,-16(fp)
   22f28:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   22f2c:	e0bffe17 	ldw	r2,-8(fp)
   22f30:	00bfcf16 	blt	zero,r2,22e70 <__alt_data_end+0xfc022e70>
   22f34:	00000106 	br	22f3c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   22f38:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   22f3c:	e0fff517 	ldw	r3,-44(fp)
   22f40:	e0bffd17 	ldw	r2,-12(fp)
   22f44:	1880141e 	bne	r3,r2,22f98 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22f48:	e0bfff17 	ldw	r2,-4(fp)
   22f4c:	1090000c 	andi	r2,r2,16384
   22f50:	1000131e 	bne	r2,zero,22fa0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22f54:	0001883a 	nop
   22f58:	e0bffc17 	ldw	r2,-16(fp)
   22f5c:	10c00a17 	ldw	r3,40(r2)
   22f60:	e0bff717 	ldw	r2,-36(fp)
   22f64:	1880051e 	bne	r3,r2,22f7c <altera_avalon_jtag_uart_read+0x138>
   22f68:	e0bffc17 	ldw	r2,-16(fp)
   22f6c:	10c00917 	ldw	r3,36(r2)
   22f70:	e0bffc17 	ldw	r2,-16(fp)
   22f74:	10800117 	ldw	r2,4(r2)
   22f78:	18bff736 	bltu	r3,r2,22f58 <__alt_data_end+0xfc022f58>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22f7c:	e0bffc17 	ldw	r2,-16(fp)
   22f80:	10c00a17 	ldw	r3,40(r2)
   22f84:	e0bff717 	ldw	r2,-36(fp)
   22f88:	18800726 	beq	r3,r2,22fa8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22f8c:	e0bffe17 	ldw	r2,-8(fp)
   22f90:	00bfb716 	blt	zero,r2,22e70 <__alt_data_end+0xfc022e70>
   22f94:	00000506 	br	22fac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   22f98:	0001883a 	nop
   22f9c:	00000306 	br	22fac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   22fa0:	0001883a 	nop
   22fa4:	00000106 	br	22fac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   22fa8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   22fac:	e0fff517 	ldw	r3,-44(fp)
   22fb0:	e0bffd17 	ldw	r2,-12(fp)
   22fb4:	18801826 	beq	r3,r2,23018 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22fb8:	0005303a 	rdctl	r2,status
   22fbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22fc0:	e0fffb17 	ldw	r3,-20(fp)
   22fc4:	00bfff84 	movi	r2,-2
   22fc8:	1884703a 	and	r2,r3,r2
   22fcc:	1001703a 	wrctl	status,r2
  
  return context;
   22fd0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22fd4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22fd8:	e0bffc17 	ldw	r2,-16(fp)
   22fdc:	10800817 	ldw	r2,32(r2)
   22fe0:	10c00054 	ori	r3,r2,1
   22fe4:	e0bffc17 	ldw	r2,-16(fp)
   22fe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22fec:	e0bffc17 	ldw	r2,-16(fp)
   22ff0:	10800017 	ldw	r2,0(r2)
   22ff4:	10800104 	addi	r2,r2,4
   22ff8:	1007883a 	mov	r3,r2
   22ffc:	e0bffc17 	ldw	r2,-16(fp)
   23000:	10800817 	ldw	r2,32(r2)
   23004:	18800035 	stwio	r2,0(r3)
   23008:	e0bffa17 	ldw	r2,-24(fp)
   2300c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23010:	e0bff917 	ldw	r2,-28(fp)
   23014:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23018:	e0fff517 	ldw	r3,-44(fp)
   2301c:	e0bffd17 	ldw	r2,-12(fp)
   23020:	18800426 	beq	r3,r2,23034 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23024:	e0fff517 	ldw	r3,-44(fp)
   23028:	e0bffd17 	ldw	r2,-12(fp)
   2302c:	1885c83a 	sub	r2,r3,r2
   23030:	00000606 	br	2304c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   23034:	e0bfff17 	ldw	r2,-4(fp)
   23038:	1090000c 	andi	r2,r2,16384
   2303c:	10000226 	beq	r2,zero,23048 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   23040:	00bffd44 	movi	r2,-11
   23044:	00000106 	br	2304c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   23048:	00bffec4 	movi	r2,-5
}
   2304c:	e037883a 	mov	sp,fp
   23050:	dfc00117 	ldw	ra,4(sp)
   23054:	df000017 	ldw	fp,0(sp)
   23058:	dec00204 	addi	sp,sp,8
   2305c:	f800283a 	ret

00023060 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23060:	defff304 	addi	sp,sp,-52
   23064:	dfc00c15 	stw	ra,48(sp)
   23068:	df000b15 	stw	fp,44(sp)
   2306c:	df000b04 	addi	fp,sp,44
   23070:	e13ffc15 	stw	r4,-16(fp)
   23074:	e17ffd15 	stw	r5,-12(fp)
   23078:	e1bffe15 	stw	r6,-8(fp)
   2307c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23080:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23084:	e0bffd17 	ldw	r2,-12(fp)
   23088:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2308c:	00003706 	br	2316c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23090:	e0bffc17 	ldw	r2,-16(fp)
   23094:	10800c17 	ldw	r2,48(r2)
   23098:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2309c:	e0bffc17 	ldw	r2,-16(fp)
   230a0:	10800d17 	ldw	r2,52(r2)
   230a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   230a8:	e0fff917 	ldw	r3,-28(fp)
   230ac:	e0bff517 	ldw	r2,-44(fp)
   230b0:	1880062e 	bgeu	r3,r2,230cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   230b4:	e0fff517 	ldw	r3,-44(fp)
   230b8:	e0bff917 	ldw	r2,-28(fp)
   230bc:	1885c83a 	sub	r2,r3,r2
   230c0:	10bfffc4 	addi	r2,r2,-1
   230c4:	e0bff615 	stw	r2,-40(fp)
   230c8:	00000b06 	br	230f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   230cc:	e0bff517 	ldw	r2,-44(fp)
   230d0:	10000526 	beq	r2,zero,230e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   230d4:	00c20004 	movi	r3,2048
   230d8:	e0bff917 	ldw	r2,-28(fp)
   230dc:	1885c83a 	sub	r2,r3,r2
   230e0:	e0bff615 	stw	r2,-40(fp)
   230e4:	00000406 	br	230f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   230e8:	00c1ffc4 	movi	r3,2047
   230ec:	e0bff917 	ldw	r2,-28(fp)
   230f0:	1885c83a 	sub	r2,r3,r2
   230f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   230f8:	e0bff617 	ldw	r2,-40(fp)
   230fc:	10001e26 	beq	r2,zero,23178 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   23100:	e0fffe17 	ldw	r3,-8(fp)
   23104:	e0bff617 	ldw	r2,-40(fp)
   23108:	1880022e 	bgeu	r3,r2,23114 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2310c:	e0bffe17 	ldw	r2,-8(fp)
   23110:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   23114:	e0bffc17 	ldw	r2,-16(fp)
   23118:	10c20e04 	addi	r3,r2,2104
   2311c:	e0bff917 	ldw	r2,-28(fp)
   23120:	1885883a 	add	r2,r3,r2
   23124:	e1bff617 	ldw	r6,-40(fp)
   23128:	e17ffd17 	ldw	r5,-12(fp)
   2312c:	1009883a 	mov	r4,r2
   23130:	000fc740 	call	fc74 <memcpy>
      ptr   += n;
   23134:	e0fffd17 	ldw	r3,-12(fp)
   23138:	e0bff617 	ldw	r2,-40(fp)
   2313c:	1885883a 	add	r2,r3,r2
   23140:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   23144:	e0fffe17 	ldw	r3,-8(fp)
   23148:	e0bff617 	ldw	r2,-40(fp)
   2314c:	1885c83a 	sub	r2,r3,r2
   23150:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23154:	e0fff917 	ldw	r3,-28(fp)
   23158:	e0bff617 	ldw	r2,-40(fp)
   2315c:	1885883a 	add	r2,r3,r2
   23160:	10c1ffcc 	andi	r3,r2,2047
   23164:	e0bffc17 	ldw	r2,-16(fp)
   23168:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2316c:	e0bffe17 	ldw	r2,-8(fp)
   23170:	00bfc716 	blt	zero,r2,23090 <__alt_data_end+0xfc023090>
   23174:	00000106 	br	2317c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   23178:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2317c:	0005303a 	rdctl	r2,status
   23180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23184:	e0fffb17 	ldw	r3,-20(fp)
   23188:	00bfff84 	movi	r2,-2
   2318c:	1884703a 	and	r2,r3,r2
   23190:	1001703a 	wrctl	status,r2
  
  return context;
   23194:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   23198:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2319c:	e0bffc17 	ldw	r2,-16(fp)
   231a0:	10800817 	ldw	r2,32(r2)
   231a4:	10c00094 	ori	r3,r2,2
   231a8:	e0bffc17 	ldw	r2,-16(fp)
   231ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   231b0:	e0bffc17 	ldw	r2,-16(fp)
   231b4:	10800017 	ldw	r2,0(r2)
   231b8:	10800104 	addi	r2,r2,4
   231bc:	1007883a 	mov	r3,r2
   231c0:	e0bffc17 	ldw	r2,-16(fp)
   231c4:	10800817 	ldw	r2,32(r2)
   231c8:	18800035 	stwio	r2,0(r3)
   231cc:	e0bffa17 	ldw	r2,-24(fp)
   231d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   231d4:	e0bff817 	ldw	r2,-32(fp)
   231d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   231dc:	e0bffe17 	ldw	r2,-8(fp)
   231e0:	0080100e 	bge	zero,r2,23224 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   231e4:	e0bfff17 	ldw	r2,-4(fp)
   231e8:	1090000c 	andi	r2,r2,16384
   231ec:	1000101e 	bne	r2,zero,23230 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   231f0:	0001883a 	nop
   231f4:	e0bffc17 	ldw	r2,-16(fp)
   231f8:	10c00d17 	ldw	r3,52(r2)
   231fc:	e0bff517 	ldw	r2,-44(fp)
   23200:	1880051e 	bne	r3,r2,23218 <altera_avalon_jtag_uart_write+0x1b8>
   23204:	e0bffc17 	ldw	r2,-16(fp)
   23208:	10c00917 	ldw	r3,36(r2)
   2320c:	e0bffc17 	ldw	r2,-16(fp)
   23210:	10800117 	ldw	r2,4(r2)
   23214:	18bff736 	bltu	r3,r2,231f4 <__alt_data_end+0xfc0231f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   23218:	e0bffc17 	ldw	r2,-16(fp)
   2321c:	10800917 	ldw	r2,36(r2)
   23220:	1000051e 	bne	r2,zero,23238 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   23224:	e0bffe17 	ldw	r2,-8(fp)
   23228:	00bfd016 	blt	zero,r2,2316c <__alt_data_end+0xfc02316c>
   2322c:	00000306 	br	2323c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   23230:	0001883a 	nop
   23234:	00000106 	br	2323c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   23238:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2323c:	e0fffd17 	ldw	r3,-12(fp)
   23240:	e0bff717 	ldw	r2,-36(fp)
   23244:	18800426 	beq	r3,r2,23258 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   23248:	e0fffd17 	ldw	r3,-12(fp)
   2324c:	e0bff717 	ldw	r2,-36(fp)
   23250:	1885c83a 	sub	r2,r3,r2
   23254:	00000606 	br	23270 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   23258:	e0bfff17 	ldw	r2,-4(fp)
   2325c:	1090000c 	andi	r2,r2,16384
   23260:	10000226 	beq	r2,zero,2326c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   23264:	00bffd44 	movi	r2,-11
   23268:	00000106 	br	23270 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2326c:	00bffec4 	movi	r2,-5
}
   23270:	e037883a 	mov	sp,fp
   23274:	dfc00117 	ldw	ra,4(sp)
   23278:	df000017 	ldw	fp,0(sp)
   2327c:	dec00204 	addi	sp,sp,8
   23280:	f800283a 	ret

00023284 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   23284:	defff404 	addi	sp,sp,-48
   23288:	df000b15 	stw	fp,44(sp)
   2328c:	df000b04 	addi	fp,sp,44
   23290:	e13ffc15 	stw	r4,-16(fp)
   23294:	e17ffd15 	stw	r5,-12(fp)
   23298:	e1bffe15 	stw	r6,-8(fp)
   2329c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   232a0:	e0ffff17 	ldw	r3,-4(fp)
   232a4:	e0bffe17 	ldw	r2,-8(fp)
   232a8:	1885883a 	add	r2,r3,r2
   232ac:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   232b0:	e0c00217 	ldw	r3,8(fp)
   232b4:	e0800117 	ldw	r2,4(fp)
   232b8:	1885883a 	add	r2,r3,r2
   232bc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   232c0:	e0800117 	ldw	r2,4(fp)
   232c4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   232c8:	e0bffe17 	ldw	r2,-8(fp)
   232cc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   232d0:	00800044 	movi	r2,1
   232d4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   232d8:	e0bffc17 	ldw	r2,-16(fp)
   232dc:	10800504 	addi	r2,r2,20
   232e0:	1009883a 	mov	r4,r2
   232e4:	00c00044 	movi	r3,1
   232e8:	e0bffd17 	ldw	r2,-12(fp)
   232ec:	1884983a 	sll	r2,r3,r2
   232f0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   232f4:	e0800317 	ldw	r2,12(fp)
   232f8:	1080008c 	andi	r2,r2,2
   232fc:	1000051e 	bne	r2,zero,23314 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   23300:	e0bffc17 	ldw	r2,-16(fp)
   23304:	10800304 	addi	r2,r2,12
   23308:	1007883a 	mov	r3,r2
   2330c:	00810004 	movi	r2,1024
   23310:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23314:	e0bffc17 	ldw	r2,-16(fp)
   23318:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   2331c:	e0bffc17 	ldw	r2,-16(fp)
   23320:	10800204 	addi	r2,r2,8
   23324:	10800037 	ldwio	r2,0(r2)
   23328:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2332c:	e0bffa17 	ldw	r2,-24(fp)
   23330:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23334:	10000226 	beq	r2,zero,23340 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23338:	e0bff717 	ldw	r2,-36(fp)
   2333c:	1000031e 	bne	r2,zero,2334c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23340:	e0bffa17 	ldw	r2,-24(fp)
   23344:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23348:	103ff426 	beq	r2,zero,2331c <__alt_data_end+0xfc02331c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   2334c:	e0bffa17 	ldw	r2,-24(fp)
   23350:	1080100c 	andi	r2,r2,64
   23354:	10001e26 	beq	r2,zero,233d0 <alt_avalon_spi_command+0x14c>
   23358:	e0bff717 	ldw	r2,-36(fp)
   2335c:	00801c0e 	bge	zero,r2,233d0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   23360:	e0bff717 	ldw	r2,-36(fp)
   23364:	10bfffc4 	addi	r2,r2,-1
   23368:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   2336c:	e0ffff17 	ldw	r3,-4(fp)
   23370:	e0bff817 	ldw	r2,-32(fp)
   23374:	18800a2e 	bgeu	r3,r2,233a0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   23378:	e0bffc17 	ldw	r2,-16(fp)
   2337c:	10800104 	addi	r2,r2,4
   23380:	1009883a 	mov	r4,r2
   23384:	e0bfff17 	ldw	r2,-4(fp)
   23388:	10c00044 	addi	r3,r2,1
   2338c:	e0ffff15 	stw	r3,-4(fp)
   23390:	10800003 	ldbu	r2,0(r2)
   23394:	10803fcc 	andi	r2,r2,255
   23398:	20800035 	stwio	r2,0(r4)
   2339c:	00000c06 	br	233d0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   233a0:	e0bff517 	ldw	r2,-44(fp)
   233a4:	10000826 	beq	r2,zero,233c8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   233a8:	e0bff517 	ldw	r2,-44(fp)
   233ac:	10bfffc4 	addi	r2,r2,-1
   233b0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   233b4:	e0bffc17 	ldw	r2,-16(fp)
   233b8:	10800104 	addi	r2,r2,4
   233bc:	0007883a 	mov	r3,zero
   233c0:	10c00035 	stwio	r3,0(r2)
   233c4:	00000206 	br	233d0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   233c8:	00bf0004 	movi	r2,-1024
   233cc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   233d0:	e0bffa17 	ldw	r2,-24(fp)
   233d4:	1080200c 	andi	r2,r2,128
   233d8:	103fd026 	beq	r2,zero,2331c <__alt_data_end+0xfc02331c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   233dc:	e0bffc17 	ldw	r2,-16(fp)
   233e0:	10800037 	ldwio	r2,0(r2)
   233e4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   233e8:	e0bff617 	ldw	r2,-40(fp)
   233ec:	10000426 	beq	r2,zero,23400 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   233f0:	e0bff617 	ldw	r2,-40(fp)
   233f4:	10bfffc4 	addi	r2,r2,-1
   233f8:	e0bff615 	stw	r2,-40(fp)
   233fc:	00000506 	br	23414 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   23400:	e0800217 	ldw	r2,8(fp)
   23404:	10c00044 	addi	r3,r2,1
   23408:	e0c00215 	stw	r3,8(fp)
   2340c:	e0fffb17 	ldw	r3,-20(fp)
   23410:	10c00005 	stb	r3,0(r2)
      credits++;
   23414:	e0bff717 	ldw	r2,-36(fp)
   23418:	10800044 	addi	r2,r2,1
   2341c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   23420:	e0bff617 	ldw	r2,-40(fp)
   23424:	103fbd1e 	bne	r2,zero,2331c <__alt_data_end+0xfc02331c>
   23428:	e0c00217 	ldw	r3,8(fp)
   2342c:	e0bff917 	ldw	r2,-28(fp)
   23430:	18bfba1e 	bne	r3,r2,2331c <__alt_data_end+0xfc02331c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23434:	e0bffc17 	ldw	r2,-16(fp)
   23438:	10800204 	addi	r2,r2,8
   2343c:	10800037 	ldwio	r2,0(r2)
   23440:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   23444:	e0bffa17 	ldw	r2,-24(fp)
   23448:	1080080c 	andi	r2,r2,32
   2344c:	103ff926 	beq	r2,zero,23434 <__alt_data_end+0xfc023434>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   23450:	e0800317 	ldw	r2,12(fp)
   23454:	1080004c 	andi	r2,r2,1
   23458:	1000041e 	bne	r2,zero,2346c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   2345c:	e0bffc17 	ldw	r2,-16(fp)
   23460:	10800304 	addi	r2,r2,12
   23464:	0007883a 	mov	r3,zero
   23468:	10c00035 	stwio	r3,0(r2)

  return read_length;
   2346c:	e0800117 	ldw	r2,4(fp)
}
   23470:	e037883a 	mov	sp,fp
   23474:	df000017 	ldw	fp,0(sp)
   23478:	dec00104 	addi	sp,sp,4
   2347c:	f800283a 	ret

00023480 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   23480:	defffa04 	addi	sp,sp,-24
   23484:	dfc00515 	stw	ra,20(sp)
   23488:	df000415 	stw	fp,16(sp)
   2348c:	df000404 	addi	fp,sp,16
   23490:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23494:	0007883a 	mov	r3,zero
   23498:	e0bfff17 	ldw	r2,-4(fp)
   2349c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   234a0:	e0bfff17 	ldw	r2,-4(fp)
   234a4:	10800104 	addi	r2,r2,4
   234a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234ac:	0005303a 	rdctl	r2,status
   234b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234b4:	e0fffd17 	ldw	r3,-12(fp)
   234b8:	00bfff84 	movi	r2,-2
   234bc:	1884703a 	and	r2,r3,r2
   234c0:	1001703a 	wrctl	status,r2
  
  return context;
   234c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   234c8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   234cc:	00243f00 	call	243f0 <alt_tick>
   234d0:	e0bffc17 	ldw	r2,-16(fp)
   234d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234d8:	e0bffe17 	ldw	r2,-8(fp)
   234dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   234e0:	0001883a 	nop
   234e4:	e037883a 	mov	sp,fp
   234e8:	dfc00117 	ldw	ra,4(sp)
   234ec:	df000017 	ldw	fp,0(sp)
   234f0:	dec00204 	addi	sp,sp,8
   234f4:	f800283a 	ret

000234f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   234f8:	defff804 	addi	sp,sp,-32
   234fc:	dfc00715 	stw	ra,28(sp)
   23500:	df000615 	stw	fp,24(sp)
   23504:	df000604 	addi	fp,sp,24
   23508:	e13ffc15 	stw	r4,-16(fp)
   2350c:	e17ffd15 	stw	r5,-12(fp)
   23510:	e1bffe15 	stw	r6,-8(fp)
   23514:	e1ffff15 	stw	r7,-4(fp)
   23518:	e0bfff17 	ldw	r2,-4(fp)
   2351c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23520:	d0b25617 	ldw	r2,-13992(gp)
   23524:	1000021e 	bne	r2,zero,23530 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   23528:	e0bffb17 	ldw	r2,-20(fp)
   2352c:	d0b25615 	stw	r2,-13992(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   23530:	e0bffc17 	ldw	r2,-16(fp)
   23534:	10800104 	addi	r2,r2,4
   23538:	00c001c4 	movi	r3,7
   2353c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   23540:	d8000015 	stw	zero,0(sp)
   23544:	e1fffc17 	ldw	r7,-16(fp)
   23548:	018000b4 	movhi	r6,2
   2354c:	318d2004 	addi	r6,r6,13440
   23550:	e17ffe17 	ldw	r5,-8(fp)
   23554:	e13ffd17 	ldw	r4,-12(fp)
   23558:	0023a680 	call	23a68 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2355c:	0001883a 	nop
   23560:	e037883a 	mov	sp,fp
   23564:	dfc00117 	ldw	ra,4(sp)
   23568:	df000017 	ldw	fp,0(sp)
   2356c:	dec00204 	addi	sp,sp,8
   23570:	f800283a 	ret

00023574 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23574:	defff504 	addi	sp,sp,-44
   23578:	df000a15 	stw	fp,40(sp)
   2357c:	df000a04 	addi	fp,sp,40
   23580:	e13ffc15 	stw	r4,-16(fp)
   23584:	e17ffd15 	stw	r5,-12(fp)
   23588:	e1bffe15 	stw	r6,-8(fp)
   2358c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23590:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23594:	d0b25617 	ldw	r2,-13992(gp)
  
  if (alt_ticks_per_second ())
   23598:	10003c26 	beq	r2,zero,2368c <alt_alarm_start+0x118>
  {
    if (alarm)
   2359c:	e0bffc17 	ldw	r2,-16(fp)
   235a0:	10003826 	beq	r2,zero,23684 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   235a4:	e0bffc17 	ldw	r2,-16(fp)
   235a8:	e0fffe17 	ldw	r3,-8(fp)
   235ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   235b0:	e0bffc17 	ldw	r2,-16(fp)
   235b4:	e0ffff17 	ldw	r3,-4(fp)
   235b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   235bc:	0005303a 	rdctl	r2,status
   235c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   235c4:	e0fff917 	ldw	r3,-28(fp)
   235c8:	00bfff84 	movi	r2,-2
   235cc:	1884703a 	and	r2,r3,r2
   235d0:	1001703a 	wrctl	status,r2
  
  return context;
   235d4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   235d8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   235dc:	d0b25717 	ldw	r2,-13988(gp)
      
      current_nticks = alt_nticks();
   235e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   235e4:	e0fffd17 	ldw	r3,-12(fp)
   235e8:	e0bff617 	ldw	r2,-40(fp)
   235ec:	1885883a 	add	r2,r3,r2
   235f0:	10c00044 	addi	r3,r2,1
   235f4:	e0bffc17 	ldw	r2,-16(fp)
   235f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   235fc:	e0bffc17 	ldw	r2,-16(fp)
   23600:	10c00217 	ldw	r3,8(r2)
   23604:	e0bff617 	ldw	r2,-40(fp)
   23608:	1880042e 	bgeu	r3,r2,2361c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2360c:	e0bffc17 	ldw	r2,-16(fp)
   23610:	00c00044 	movi	r3,1
   23614:	10c00405 	stb	r3,16(r2)
   23618:	00000206 	br	23624 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2361c:	e0bffc17 	ldw	r2,-16(fp)
   23620:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23624:	e0bffc17 	ldw	r2,-16(fp)
   23628:	d0e5c204 	addi	r3,gp,-26872
   2362c:	e0fffa15 	stw	r3,-24(fp)
   23630:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23634:	e0bffb17 	ldw	r2,-20(fp)
   23638:	e0fffa17 	ldw	r3,-24(fp)
   2363c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23640:	e0bffa17 	ldw	r2,-24(fp)
   23644:	10c00017 	ldw	r3,0(r2)
   23648:	e0bffb17 	ldw	r2,-20(fp)
   2364c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23650:	e0bffa17 	ldw	r2,-24(fp)
   23654:	10800017 	ldw	r2,0(r2)
   23658:	e0fffb17 	ldw	r3,-20(fp)
   2365c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23660:	e0bffa17 	ldw	r2,-24(fp)
   23664:	e0fffb17 	ldw	r3,-20(fp)
   23668:	10c00015 	stw	r3,0(r2)
   2366c:	e0bff817 	ldw	r2,-32(fp)
   23670:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23674:	e0bff717 	ldw	r2,-36(fp)
   23678:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2367c:	0005883a 	mov	r2,zero
   23680:	00000306 	br	23690 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   23684:	00bffa84 	movi	r2,-22
   23688:	00000106 	br	23690 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2368c:	00bfde84 	movi	r2,-134
  }
}
   23690:	e037883a 	mov	sp,fp
   23694:	df000017 	ldw	fp,0(sp)
   23698:	dec00104 	addi	sp,sp,4
   2369c:	f800283a 	ret

000236a0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   236a0:	defffa04 	addi	sp,sp,-24
   236a4:	dfc00515 	stw	ra,20(sp)
   236a8:	df000415 	stw	fp,16(sp)
   236ac:	df000404 	addi	fp,sp,16
   236b0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   236b4:	00800244 	movi	r2,9
   236b8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   236bc:	014003f4 	movhi	r5,15
   236c0:	29509004 	addi	r5,r5,16960
   236c4:	e13ffd17 	ldw	r4,-12(fp)
   236c8:	000d8d40 	call	d8d4 <__mulsi3>
   236cc:	100b883a 	mov	r5,r2
   236d0:	01017db4 	movhi	r4,1526
   236d4:	21384004 	addi	r4,r4,-7936
   236d8:	000d8180 	call	d818 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   236dc:	100b883a 	mov	r5,r2
   236e0:	01200034 	movhi	r4,32768
   236e4:	213fffc4 	addi	r4,r4,-1
   236e8:	000d8180 	call	d818 <__udivsi3>
   236ec:	100b883a 	mov	r5,r2
   236f0:	e13fff17 	ldw	r4,-4(fp)
   236f4:	000d8180 	call	d818 <__udivsi3>
   236f8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   236fc:	e0bffe17 	ldw	r2,-8(fp)
   23700:	10002a26 	beq	r2,zero,237ac <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   23704:	e03ffc15 	stw	zero,-16(fp)
   23708:	00001706 	br	23768 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2370c:	00a00034 	movhi	r2,32768
   23710:	10bfffc4 	addi	r2,r2,-1
   23714:	10bfffc4 	addi	r2,r2,-1
   23718:	103ffe1e 	bne	r2,zero,23714 <__alt_data_end+0xfc023714>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2371c:	014003f4 	movhi	r5,15
   23720:	29509004 	addi	r5,r5,16960
   23724:	e13ffd17 	ldw	r4,-12(fp)
   23728:	000d8d40 	call	d8d4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2372c:	100b883a 	mov	r5,r2
   23730:	01017db4 	movhi	r4,1526
   23734:	21384004 	addi	r4,r4,-7936
   23738:	000d8180 	call	d818 <__udivsi3>
   2373c:	100b883a 	mov	r5,r2
   23740:	01200034 	movhi	r4,32768
   23744:	213fffc4 	addi	r4,r4,-1
   23748:	000d8180 	call	d818 <__udivsi3>
   2374c:	1007883a 	mov	r3,r2
   23750:	e0bfff17 	ldw	r2,-4(fp)
   23754:	10c5c83a 	sub	r2,r2,r3
   23758:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2375c:	e0bffc17 	ldw	r2,-16(fp)
   23760:	10800044 	addi	r2,r2,1
   23764:	e0bffc15 	stw	r2,-16(fp)
   23768:	e0fffc17 	ldw	r3,-16(fp)
   2376c:	e0bffe17 	ldw	r2,-8(fp)
   23770:	18bfe616 	blt	r3,r2,2370c <__alt_data_end+0xfc02370c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23774:	014003f4 	movhi	r5,15
   23778:	29509004 	addi	r5,r5,16960
   2377c:	e13ffd17 	ldw	r4,-12(fp)
   23780:	000d8d40 	call	d8d4 <__mulsi3>
   23784:	100b883a 	mov	r5,r2
   23788:	01017db4 	movhi	r4,1526
   2378c:	21384004 	addi	r4,r4,-7936
   23790:	000d8180 	call	d818 <__udivsi3>
   23794:	e17fff17 	ldw	r5,-4(fp)
   23798:	1009883a 	mov	r4,r2
   2379c:	000d8d40 	call	d8d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   237a0:	10bfffc4 	addi	r2,r2,-1
   237a4:	103ffe1e 	bne	r2,zero,237a0 <__alt_data_end+0xfc0237a0>
   237a8:	00000d06 	br	237e0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   237ac:	014003f4 	movhi	r5,15
   237b0:	29509004 	addi	r5,r5,16960
   237b4:	e13ffd17 	ldw	r4,-12(fp)
   237b8:	000d8d40 	call	d8d4 <__mulsi3>
   237bc:	100b883a 	mov	r5,r2
   237c0:	01017db4 	movhi	r4,1526
   237c4:	21384004 	addi	r4,r4,-7936
   237c8:	000d8180 	call	d818 <__udivsi3>
   237cc:	e17fff17 	ldw	r5,-4(fp)
   237d0:	1009883a 	mov	r4,r2
   237d4:	000d8d40 	call	d8d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   237d8:	10bfffc4 	addi	r2,r2,-1
   237dc:	00bffe16 	blt	zero,r2,237d8 <__alt_data_end+0xfc0237d8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   237e0:	0005883a 	mov	r2,zero
}
   237e4:	e037883a 	mov	sp,fp
   237e8:	dfc00117 	ldw	ra,4(sp)
   237ec:	df000017 	ldw	fp,0(sp)
   237f0:	dec00204 	addi	sp,sp,8
   237f4:	f800283a 	ret

000237f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   237f8:	deffff04 	addi	sp,sp,-4
   237fc:	df000015 	stw	fp,0(sp)
   23800:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23804:	0001883a 	nop
   23808:	e037883a 	mov	sp,fp
   2380c:	df000017 	ldw	fp,0(sp)
   23810:	dec00104 	addi	sp,sp,4
   23814:	f800283a 	ret

00023818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23818:	defffe04 	addi	sp,sp,-8
   2381c:	dfc00115 	stw	ra,4(sp)
   23820:	df000015 	stw	fp,0(sp)
   23824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23828:	d0a5bd17 	ldw	r2,-26892(gp)
   2382c:	10000326 	beq	r2,zero,2383c <alt_get_errno+0x24>
   23830:	d0a5bd17 	ldw	r2,-26892(gp)
   23834:	103ee83a 	callr	r2
   23838:	00000106 	br	23840 <alt_get_errno+0x28>
   2383c:	d0b24e04 	addi	r2,gp,-14024
}
   23840:	e037883a 	mov	sp,fp
   23844:	dfc00117 	ldw	ra,4(sp)
   23848:	df000017 	ldw	fp,0(sp)
   2384c:	dec00204 	addi	sp,sp,8
   23850:	f800283a 	ret

00023854 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23854:	defffa04 	addi	sp,sp,-24
   23858:	dfc00515 	stw	ra,20(sp)
   2385c:	df000415 	stw	fp,16(sp)
   23860:	df000404 	addi	fp,sp,16
   23864:	e13ffe15 	stw	r4,-8(fp)
   23868:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2386c:	e0bffe17 	ldw	r2,-8(fp)
   23870:	10000326 	beq	r2,zero,23880 <alt_dev_llist_insert+0x2c>
   23874:	e0bffe17 	ldw	r2,-8(fp)
   23878:	10800217 	ldw	r2,8(r2)
   2387c:	1000061e 	bne	r2,zero,23898 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23880:	00238180 	call	23818 <alt_get_errno>
   23884:	1007883a 	mov	r3,r2
   23888:	00800584 	movi	r2,22
   2388c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23890:	00bffa84 	movi	r2,-22
   23894:	00001306 	br	238e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23898:	e0bffe17 	ldw	r2,-8(fp)
   2389c:	e0ffff17 	ldw	r3,-4(fp)
   238a0:	e0fffc15 	stw	r3,-16(fp)
   238a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   238a8:	e0bffd17 	ldw	r2,-12(fp)
   238ac:	e0fffc17 	ldw	r3,-16(fp)
   238b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   238b4:	e0bffc17 	ldw	r2,-16(fp)
   238b8:	10c00017 	ldw	r3,0(r2)
   238bc:	e0bffd17 	ldw	r2,-12(fp)
   238c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   238c4:	e0bffc17 	ldw	r2,-16(fp)
   238c8:	10800017 	ldw	r2,0(r2)
   238cc:	e0fffd17 	ldw	r3,-12(fp)
   238d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   238d4:	e0bffc17 	ldw	r2,-16(fp)
   238d8:	e0fffd17 	ldw	r3,-12(fp)
   238dc:	10c00015 	stw	r3,0(r2)

  return 0;  
   238e0:	0005883a 	mov	r2,zero
}
   238e4:	e037883a 	mov	sp,fp
   238e8:	dfc00117 	ldw	ra,4(sp)
   238ec:	df000017 	ldw	fp,0(sp)
   238f0:	dec00204 	addi	sp,sp,8
   238f4:	f800283a 	ret

000238f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   238f8:	defffd04 	addi	sp,sp,-12
   238fc:	dfc00215 	stw	ra,8(sp)
   23900:	df000115 	stw	fp,4(sp)
   23904:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23908:	008000b4 	movhi	r2,2
   2390c:	1092c804 	addi	r2,r2,19232
   23910:	e0bfff15 	stw	r2,-4(fp)
   23914:	00000606 	br	23930 <_do_ctors+0x38>
        (*ctor) (); 
   23918:	e0bfff17 	ldw	r2,-4(fp)
   2391c:	10800017 	ldw	r2,0(r2)
   23920:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23924:	e0bfff17 	ldw	r2,-4(fp)
   23928:	10bfff04 	addi	r2,r2,-4
   2392c:	e0bfff15 	stw	r2,-4(fp)
   23930:	e0ffff17 	ldw	r3,-4(fp)
   23934:	008000b4 	movhi	r2,2
   23938:	1092c704 	addi	r2,r2,19228
   2393c:	18bff62e 	bgeu	r3,r2,23918 <__alt_data_end+0xfc023918>
        (*ctor) (); 
}
   23940:	0001883a 	nop
   23944:	e037883a 	mov	sp,fp
   23948:	dfc00117 	ldw	ra,4(sp)
   2394c:	df000017 	ldw	fp,0(sp)
   23950:	dec00204 	addi	sp,sp,8
   23954:	f800283a 	ret

00023958 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23958:	defffd04 	addi	sp,sp,-12
   2395c:	dfc00215 	stw	ra,8(sp)
   23960:	df000115 	stw	fp,4(sp)
   23964:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23968:	008000b4 	movhi	r2,2
   2396c:	1092c804 	addi	r2,r2,19232
   23970:	e0bfff15 	stw	r2,-4(fp)
   23974:	00000606 	br	23990 <_do_dtors+0x38>
        (*dtor) (); 
   23978:	e0bfff17 	ldw	r2,-4(fp)
   2397c:	10800017 	ldw	r2,0(r2)
   23980:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23984:	e0bfff17 	ldw	r2,-4(fp)
   23988:	10bfff04 	addi	r2,r2,-4
   2398c:	e0bfff15 	stw	r2,-4(fp)
   23990:	e0ffff17 	ldw	r3,-4(fp)
   23994:	008000b4 	movhi	r2,2
   23998:	1092c904 	addi	r2,r2,19236
   2399c:	18bff62e 	bgeu	r3,r2,23978 <__alt_data_end+0xfc023978>
        (*dtor) (); 
}
   239a0:	0001883a 	nop
   239a4:	e037883a 	mov	sp,fp
   239a8:	dfc00117 	ldw	ra,4(sp)
   239ac:	df000017 	ldw	fp,0(sp)
   239b0:	dec00204 	addi	sp,sp,8
   239b4:	f800283a 	ret

000239b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   239b8:	defffa04 	addi	sp,sp,-24
   239bc:	dfc00515 	stw	ra,20(sp)
   239c0:	df000415 	stw	fp,16(sp)
   239c4:	df000404 	addi	fp,sp,16
   239c8:	e13ffe15 	stw	r4,-8(fp)
   239cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   239d0:	e0bfff17 	ldw	r2,-4(fp)
   239d4:	10800017 	ldw	r2,0(r2)
   239d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   239dc:	e13ffe17 	ldw	r4,-8(fp)
   239e0:	001053c0 	call	1053c <strlen>
   239e4:	10800044 	addi	r2,r2,1
   239e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   239ec:	00000d06 	br	23a24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   239f0:	e0bffc17 	ldw	r2,-16(fp)
   239f4:	10800217 	ldw	r2,8(r2)
   239f8:	e0fffd17 	ldw	r3,-12(fp)
   239fc:	180d883a 	mov	r6,r3
   23a00:	e17ffe17 	ldw	r5,-8(fp)
   23a04:	1009883a 	mov	r4,r2
   23a08:	00247d00 	call	247d0 <memcmp>
   23a0c:	1000021e 	bne	r2,zero,23a18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23a10:	e0bffc17 	ldw	r2,-16(fp)
   23a14:	00000706 	br	23a34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23a18:	e0bffc17 	ldw	r2,-16(fp)
   23a1c:	10800017 	ldw	r2,0(r2)
   23a20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23a24:	e0fffc17 	ldw	r3,-16(fp)
   23a28:	e0bfff17 	ldw	r2,-4(fp)
   23a2c:	18bff01e 	bne	r3,r2,239f0 <__alt_data_end+0xfc0239f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23a30:	0005883a 	mov	r2,zero
}
   23a34:	e037883a 	mov	sp,fp
   23a38:	dfc00117 	ldw	ra,4(sp)
   23a3c:	df000017 	ldw	fp,0(sp)
   23a40:	dec00204 	addi	sp,sp,8
   23a44:	f800283a 	ret

00023a48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23a48:	deffff04 	addi	sp,sp,-4
   23a4c:	df000015 	stw	fp,0(sp)
   23a50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23a54:	0001883a 	nop
   23a58:	e037883a 	mov	sp,fp
   23a5c:	df000017 	ldw	fp,0(sp)
   23a60:	dec00104 	addi	sp,sp,4
   23a64:	f800283a 	ret

00023a68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23a68:	defff904 	addi	sp,sp,-28
   23a6c:	dfc00615 	stw	ra,24(sp)
   23a70:	df000515 	stw	fp,20(sp)
   23a74:	df000504 	addi	fp,sp,20
   23a78:	e13ffc15 	stw	r4,-16(fp)
   23a7c:	e17ffd15 	stw	r5,-12(fp)
   23a80:	e1bffe15 	stw	r6,-8(fp)
   23a84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23a88:	e0800217 	ldw	r2,8(fp)
   23a8c:	d8800015 	stw	r2,0(sp)
   23a90:	e1ffff17 	ldw	r7,-4(fp)
   23a94:	e1bffe17 	ldw	r6,-8(fp)
   23a98:	e17ffd17 	ldw	r5,-12(fp)
   23a9c:	e13ffc17 	ldw	r4,-16(fp)
   23aa0:	0023c180 	call	23c18 <alt_iic_isr_register>
}  
   23aa4:	e037883a 	mov	sp,fp
   23aa8:	dfc00117 	ldw	ra,4(sp)
   23aac:	df000017 	ldw	fp,0(sp)
   23ab0:	dec00204 	addi	sp,sp,8
   23ab4:	f800283a 	ret

00023ab8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23ab8:	defff904 	addi	sp,sp,-28
   23abc:	df000615 	stw	fp,24(sp)
   23ac0:	df000604 	addi	fp,sp,24
   23ac4:	e13ffe15 	stw	r4,-8(fp)
   23ac8:	e17fff15 	stw	r5,-4(fp)
   23acc:	e0bfff17 	ldw	r2,-4(fp)
   23ad0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ad4:	0005303a 	rdctl	r2,status
   23ad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23adc:	e0fffb17 	ldw	r3,-20(fp)
   23ae0:	00bfff84 	movi	r2,-2
   23ae4:	1884703a 	and	r2,r3,r2
   23ae8:	1001703a 	wrctl	status,r2
  
  return context;
   23aec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23af0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23af4:	00c00044 	movi	r3,1
   23af8:	e0bffa17 	ldw	r2,-24(fp)
   23afc:	1884983a 	sll	r2,r3,r2
   23b00:	1007883a 	mov	r3,r2
   23b04:	d0b25517 	ldw	r2,-13996(gp)
   23b08:	1884b03a 	or	r2,r3,r2
   23b0c:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23b10:	d0b25517 	ldw	r2,-13996(gp)
   23b14:	100170fa 	wrctl	ienable,r2
   23b18:	e0bffc17 	ldw	r2,-16(fp)
   23b1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b20:	e0bffd17 	ldw	r2,-12(fp)
   23b24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23b28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   23b2c:	0001883a 	nop
}
   23b30:	e037883a 	mov	sp,fp
   23b34:	df000017 	ldw	fp,0(sp)
   23b38:	dec00104 	addi	sp,sp,4
   23b3c:	f800283a 	ret

00023b40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23b40:	defff904 	addi	sp,sp,-28
   23b44:	df000615 	stw	fp,24(sp)
   23b48:	df000604 	addi	fp,sp,24
   23b4c:	e13ffe15 	stw	r4,-8(fp)
   23b50:	e17fff15 	stw	r5,-4(fp)
   23b54:	e0bfff17 	ldw	r2,-4(fp)
   23b58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b5c:	0005303a 	rdctl	r2,status
   23b60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b64:	e0fffb17 	ldw	r3,-20(fp)
   23b68:	00bfff84 	movi	r2,-2
   23b6c:	1884703a 	and	r2,r3,r2
   23b70:	1001703a 	wrctl	status,r2
  
  return context;
   23b74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23b78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   23b7c:	00c00044 	movi	r3,1
   23b80:	e0bffa17 	ldw	r2,-24(fp)
   23b84:	1884983a 	sll	r2,r3,r2
   23b88:	0084303a 	nor	r2,zero,r2
   23b8c:	1007883a 	mov	r3,r2
   23b90:	d0b25517 	ldw	r2,-13996(gp)
   23b94:	1884703a 	and	r2,r3,r2
   23b98:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23b9c:	d0b25517 	ldw	r2,-13996(gp)
   23ba0:	100170fa 	wrctl	ienable,r2
   23ba4:	e0bffc17 	ldw	r2,-16(fp)
   23ba8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23bac:	e0bffd17 	ldw	r2,-12(fp)
   23bb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23bb4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   23bb8:	0001883a 	nop
}
   23bbc:	e037883a 	mov	sp,fp
   23bc0:	df000017 	ldw	fp,0(sp)
   23bc4:	dec00104 	addi	sp,sp,4
   23bc8:	f800283a 	ret

00023bcc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23bcc:	defffc04 	addi	sp,sp,-16
   23bd0:	df000315 	stw	fp,12(sp)
   23bd4:	df000304 	addi	fp,sp,12
   23bd8:	e13ffe15 	stw	r4,-8(fp)
   23bdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23be0:	000530fa 	rdctl	r2,ienable
   23be4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23be8:	00c00044 	movi	r3,1
   23bec:	e0bfff17 	ldw	r2,-4(fp)
   23bf0:	1884983a 	sll	r2,r3,r2
   23bf4:	1007883a 	mov	r3,r2
   23bf8:	e0bffd17 	ldw	r2,-12(fp)
   23bfc:	1884703a 	and	r2,r3,r2
   23c00:	1004c03a 	cmpne	r2,r2,zero
   23c04:	10803fcc 	andi	r2,r2,255
}
   23c08:	e037883a 	mov	sp,fp
   23c0c:	df000017 	ldw	fp,0(sp)
   23c10:	dec00104 	addi	sp,sp,4
   23c14:	f800283a 	ret

00023c18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23c18:	defff504 	addi	sp,sp,-44
   23c1c:	dfc00a15 	stw	ra,40(sp)
   23c20:	df000915 	stw	fp,36(sp)
   23c24:	df000904 	addi	fp,sp,36
   23c28:	e13ffc15 	stw	r4,-16(fp)
   23c2c:	e17ffd15 	stw	r5,-12(fp)
   23c30:	e1bffe15 	stw	r6,-8(fp)
   23c34:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   23c38:	00bffa84 	movi	r2,-22
   23c3c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23c40:	e0bffd17 	ldw	r2,-12(fp)
   23c44:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23c48:	e0bff817 	ldw	r2,-32(fp)
   23c4c:	10800808 	cmpgei	r2,r2,32
   23c50:	1000271e 	bne	r2,zero,23cf0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23c54:	0005303a 	rdctl	r2,status
   23c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c5c:	e0fffb17 	ldw	r3,-20(fp)
   23c60:	00bfff84 	movi	r2,-2
   23c64:	1884703a 	and	r2,r3,r2
   23c68:	1001703a 	wrctl	status,r2
  
  return context;
   23c6c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23c70:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   23c74:	008000f4 	movhi	r2,3
   23c78:	1087f504 	addi	r2,r2,8148
   23c7c:	e0fff817 	ldw	r3,-32(fp)
   23c80:	180690fa 	slli	r3,r3,3
   23c84:	10c5883a 	add	r2,r2,r3
   23c88:	e0fffe17 	ldw	r3,-8(fp)
   23c8c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   23c90:	008000f4 	movhi	r2,3
   23c94:	1087f504 	addi	r2,r2,8148
   23c98:	e0fff817 	ldw	r3,-32(fp)
   23c9c:	180690fa 	slli	r3,r3,3
   23ca0:	10c5883a 	add	r2,r2,r3
   23ca4:	10800104 	addi	r2,r2,4
   23ca8:	e0ffff17 	ldw	r3,-4(fp)
   23cac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   23cb0:	e0bffe17 	ldw	r2,-8(fp)
   23cb4:	10000526 	beq	r2,zero,23ccc <alt_iic_isr_register+0xb4>
   23cb8:	e0bff817 	ldw	r2,-32(fp)
   23cbc:	100b883a 	mov	r5,r2
   23cc0:	e13ffc17 	ldw	r4,-16(fp)
   23cc4:	0023ab80 	call	23ab8 <alt_ic_irq_enable>
   23cc8:	00000406 	br	23cdc <alt_iic_isr_register+0xc4>
   23ccc:	e0bff817 	ldw	r2,-32(fp)
   23cd0:	100b883a 	mov	r5,r2
   23cd4:	e13ffc17 	ldw	r4,-16(fp)
   23cd8:	0023b400 	call	23b40 <alt_ic_irq_disable>
   23cdc:	e0bff715 	stw	r2,-36(fp)
   23ce0:	e0bffa17 	ldw	r2,-24(fp)
   23ce4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23ce8:	e0bff917 	ldw	r2,-28(fp)
   23cec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   23cf0:	e0bff717 	ldw	r2,-36(fp)
}
   23cf4:	e037883a 	mov	sp,fp
   23cf8:	dfc00117 	ldw	ra,4(sp)
   23cfc:	df000017 	ldw	fp,0(sp)
   23d00:	dec00204 	addi	sp,sp,8
   23d04:	f800283a 	ret

00023d08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23d08:	defff804 	addi	sp,sp,-32
   23d0c:	dfc00715 	stw	ra,28(sp)
   23d10:	df000615 	stw	fp,24(sp)
   23d14:	dc000515 	stw	r16,20(sp)
   23d18:	df000604 	addi	fp,sp,24
   23d1c:	e13ffb15 	stw	r4,-20(fp)
   23d20:	e17ffc15 	stw	r5,-16(fp)
   23d24:	e1bffd15 	stw	r6,-12(fp)
   23d28:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23d2c:	e1bffe17 	ldw	r6,-8(fp)
   23d30:	e17ffd17 	ldw	r5,-12(fp)
   23d34:	e13ffc17 	ldw	r4,-16(fp)
   23d38:	0023f900 	call	23f90 <open>
   23d3c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23d40:	e0bffa17 	ldw	r2,-24(fp)
   23d44:	10002216 	blt	r2,zero,23dd0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23d48:	040000f4 	movhi	r16,3
   23d4c:	8430c004 	addi	r16,r16,-15616
   23d50:	e0bffa17 	ldw	r2,-24(fp)
   23d54:	01400304 	movi	r5,12
   23d58:	1009883a 	mov	r4,r2
   23d5c:	000d8d40 	call	d8d4 <__mulsi3>
   23d60:	8085883a 	add	r2,r16,r2
   23d64:	10c00017 	ldw	r3,0(r2)
   23d68:	e0bffb17 	ldw	r2,-20(fp)
   23d6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23d70:	040000f4 	movhi	r16,3
   23d74:	8430c004 	addi	r16,r16,-15616
   23d78:	e0bffa17 	ldw	r2,-24(fp)
   23d7c:	01400304 	movi	r5,12
   23d80:	1009883a 	mov	r4,r2
   23d84:	000d8d40 	call	d8d4 <__mulsi3>
   23d88:	8085883a 	add	r2,r16,r2
   23d8c:	10800104 	addi	r2,r2,4
   23d90:	10c00017 	ldw	r3,0(r2)
   23d94:	e0bffb17 	ldw	r2,-20(fp)
   23d98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23d9c:	040000f4 	movhi	r16,3
   23da0:	8430c004 	addi	r16,r16,-15616
   23da4:	e0bffa17 	ldw	r2,-24(fp)
   23da8:	01400304 	movi	r5,12
   23dac:	1009883a 	mov	r4,r2
   23db0:	000d8d40 	call	d8d4 <__mulsi3>
   23db4:	8085883a 	add	r2,r16,r2
   23db8:	10800204 	addi	r2,r2,8
   23dbc:	10c00017 	ldw	r3,0(r2)
   23dc0:	e0bffb17 	ldw	r2,-20(fp)
   23dc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23dc8:	e13ffa17 	ldw	r4,-24(fp)
   23dcc:	00207d00 	call	207d0 <alt_release_fd>
  }
} 
   23dd0:	0001883a 	nop
   23dd4:	e6ffff04 	addi	sp,fp,-4
   23dd8:	dfc00217 	ldw	ra,8(sp)
   23ddc:	df000117 	ldw	fp,4(sp)
   23de0:	dc000017 	ldw	r16,0(sp)
   23de4:	dec00304 	addi	sp,sp,12
   23de8:	f800283a 	ret

00023dec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23dec:	defffb04 	addi	sp,sp,-20
   23df0:	dfc00415 	stw	ra,16(sp)
   23df4:	df000315 	stw	fp,12(sp)
   23df8:	df000304 	addi	fp,sp,12
   23dfc:	e13ffd15 	stw	r4,-12(fp)
   23e00:	e17ffe15 	stw	r5,-8(fp)
   23e04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23e08:	01c07fc4 	movi	r7,511
   23e0c:	01800044 	movi	r6,1
   23e10:	e17ffd17 	ldw	r5,-12(fp)
   23e14:	010000f4 	movhi	r4,3
   23e18:	2130c304 	addi	r4,r4,-15604
   23e1c:	0023d080 	call	23d08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23e20:	01c07fc4 	movi	r7,511
   23e24:	000d883a 	mov	r6,zero
   23e28:	e17ffe17 	ldw	r5,-8(fp)
   23e2c:	010000f4 	movhi	r4,3
   23e30:	2130c004 	addi	r4,r4,-15616
   23e34:	0023d080 	call	23d08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23e38:	01c07fc4 	movi	r7,511
   23e3c:	01800044 	movi	r6,1
   23e40:	e17fff17 	ldw	r5,-4(fp)
   23e44:	010000f4 	movhi	r4,3
   23e48:	2130c604 	addi	r4,r4,-15592
   23e4c:	0023d080 	call	23d08 <alt_open_fd>
}  
   23e50:	0001883a 	nop
   23e54:	e037883a 	mov	sp,fp
   23e58:	dfc00117 	ldw	ra,4(sp)
   23e5c:	df000017 	ldw	fp,0(sp)
   23e60:	dec00204 	addi	sp,sp,8
   23e64:	f800283a 	ret

00023e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e68:	defffe04 	addi	sp,sp,-8
   23e6c:	dfc00115 	stw	ra,4(sp)
   23e70:	df000015 	stw	fp,0(sp)
   23e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e78:	d0a5bd17 	ldw	r2,-26892(gp)
   23e7c:	10000326 	beq	r2,zero,23e8c <alt_get_errno+0x24>
   23e80:	d0a5bd17 	ldw	r2,-26892(gp)
   23e84:	103ee83a 	callr	r2
   23e88:	00000106 	br	23e90 <alt_get_errno+0x28>
   23e8c:	d0b24e04 	addi	r2,gp,-14024
}
   23e90:	e037883a 	mov	sp,fp
   23e94:	dfc00117 	ldw	ra,4(sp)
   23e98:	df000017 	ldw	fp,0(sp)
   23e9c:	dec00204 	addi	sp,sp,8
   23ea0:	f800283a 	ret

00023ea4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23ea4:	defffb04 	addi	sp,sp,-20
   23ea8:	dfc00415 	stw	ra,16(sp)
   23eac:	df000315 	stw	fp,12(sp)
   23eb0:	dc000215 	stw	r16,8(sp)
   23eb4:	df000304 	addi	fp,sp,12
   23eb8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23ebc:	e0bffe17 	ldw	r2,-8(fp)
   23ec0:	10800217 	ldw	r2,8(r2)
   23ec4:	10d00034 	orhi	r3,r2,16384
   23ec8:	e0bffe17 	ldw	r2,-8(fp)
   23ecc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23ed0:	e03ffd15 	stw	zero,-12(fp)
   23ed4:	00002306 	br	23f64 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23ed8:	040000f4 	movhi	r16,3
   23edc:	8430c004 	addi	r16,r16,-15616
   23ee0:	e0bffd17 	ldw	r2,-12(fp)
   23ee4:	01400304 	movi	r5,12
   23ee8:	1009883a 	mov	r4,r2
   23eec:	000d8d40 	call	d8d4 <__mulsi3>
   23ef0:	8085883a 	add	r2,r16,r2
   23ef4:	10c00017 	ldw	r3,0(r2)
   23ef8:	e0bffe17 	ldw	r2,-8(fp)
   23efc:	10800017 	ldw	r2,0(r2)
   23f00:	1880151e 	bne	r3,r2,23f58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f04:	040000f4 	movhi	r16,3
   23f08:	8430c004 	addi	r16,r16,-15616
   23f0c:	e0bffd17 	ldw	r2,-12(fp)
   23f10:	01400304 	movi	r5,12
   23f14:	1009883a 	mov	r4,r2
   23f18:	000d8d40 	call	d8d4 <__mulsi3>
   23f1c:	8085883a 	add	r2,r16,r2
   23f20:	10800204 	addi	r2,r2,8
   23f24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23f28:	10000b0e 	bge	r2,zero,23f58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23f2c:	01400304 	movi	r5,12
   23f30:	e13ffd17 	ldw	r4,-12(fp)
   23f34:	000d8d40 	call	d8d4 <__mulsi3>
   23f38:	1007883a 	mov	r3,r2
   23f3c:	008000f4 	movhi	r2,3
   23f40:	10b0c004 	addi	r2,r2,-15616
   23f44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f48:	e0bffe17 	ldw	r2,-8(fp)
   23f4c:	18800226 	beq	r3,r2,23f58 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23f50:	00bffcc4 	movi	r2,-13
   23f54:	00000806 	br	23f78 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23f58:	e0bffd17 	ldw	r2,-12(fp)
   23f5c:	10800044 	addi	r2,r2,1
   23f60:	e0bffd15 	stw	r2,-12(fp)
   23f64:	d0a5bc17 	ldw	r2,-26896(gp)
   23f68:	1007883a 	mov	r3,r2
   23f6c:	e0bffd17 	ldw	r2,-12(fp)
   23f70:	18bfd92e 	bgeu	r3,r2,23ed8 <__alt_data_end+0xfc023ed8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23f74:	0005883a 	mov	r2,zero
}
   23f78:	e6ffff04 	addi	sp,fp,-4
   23f7c:	dfc00217 	ldw	ra,8(sp)
   23f80:	df000117 	ldw	fp,4(sp)
   23f84:	dc000017 	ldw	r16,0(sp)
   23f88:	dec00304 	addi	sp,sp,12
   23f8c:	f800283a 	ret

00023f90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23f90:	defff604 	addi	sp,sp,-40
   23f94:	dfc00915 	stw	ra,36(sp)
   23f98:	df000815 	stw	fp,32(sp)
   23f9c:	df000804 	addi	fp,sp,32
   23fa0:	e13ffd15 	stw	r4,-12(fp)
   23fa4:	e17ffe15 	stw	r5,-8(fp)
   23fa8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23fac:	00bfffc4 	movi	r2,-1
   23fb0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23fb4:	00bffb44 	movi	r2,-19
   23fb8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23fbc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23fc0:	d165ba04 	addi	r5,gp,-26904
   23fc4:	e13ffd17 	ldw	r4,-12(fp)
   23fc8:	00239b80 	call	239b8 <alt_find_dev>
   23fcc:	e0bff815 	stw	r2,-32(fp)
   23fd0:	e0bff817 	ldw	r2,-32(fp)
   23fd4:	1000051e 	bne	r2,zero,23fec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23fd8:	e13ffd17 	ldw	r4,-12(fp)
   23fdc:	002451c0 	call	2451c <alt_find_file>
   23fe0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23fe4:	00800044 	movi	r2,1
   23fe8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23fec:	e0bff817 	ldw	r2,-32(fp)
   23ff0:	10002b26 	beq	r2,zero,240a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23ff4:	e13ff817 	ldw	r4,-32(fp)
   23ff8:	00246240 	call	24624 <alt_get_fd>
   23ffc:	e0bff915 	stw	r2,-28(fp)
   24000:	e0bff917 	ldw	r2,-28(fp)
   24004:	1000030e 	bge	r2,zero,24014 <open+0x84>
    {
      status = index;
   24008:	e0bff917 	ldw	r2,-28(fp)
   2400c:	e0bffa15 	stw	r2,-24(fp)
   24010:	00002506 	br	240a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24014:	01400304 	movi	r5,12
   24018:	e13ff917 	ldw	r4,-28(fp)
   2401c:	000d8d40 	call	d8d4 <__mulsi3>
   24020:	1007883a 	mov	r3,r2
   24024:	008000f4 	movhi	r2,3
   24028:	10b0c004 	addi	r2,r2,-15616
   2402c:	1885883a 	add	r2,r3,r2
   24030:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24034:	e0fffe17 	ldw	r3,-8(fp)
   24038:	00900034 	movhi	r2,16384
   2403c:	10bfffc4 	addi	r2,r2,-1
   24040:	1886703a 	and	r3,r3,r2
   24044:	e0bffc17 	ldw	r2,-16(fp)
   24048:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2404c:	e0bffb17 	ldw	r2,-20(fp)
   24050:	1000051e 	bne	r2,zero,24068 <open+0xd8>
   24054:	e13ffc17 	ldw	r4,-16(fp)
   24058:	0023ea40 	call	23ea4 <alt_file_locked>
   2405c:	e0bffa15 	stw	r2,-24(fp)
   24060:	e0bffa17 	ldw	r2,-24(fp)
   24064:	10001016 	blt	r2,zero,240a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24068:	e0bff817 	ldw	r2,-32(fp)
   2406c:	10800317 	ldw	r2,12(r2)
   24070:	10000826 	beq	r2,zero,24094 <open+0x104>
   24074:	e0bff817 	ldw	r2,-32(fp)
   24078:	10800317 	ldw	r2,12(r2)
   2407c:	e1ffff17 	ldw	r7,-4(fp)
   24080:	e1bffe17 	ldw	r6,-8(fp)
   24084:	e17ffd17 	ldw	r5,-12(fp)
   24088:	e13ffc17 	ldw	r4,-16(fp)
   2408c:	103ee83a 	callr	r2
   24090:	00000106 	br	24098 <open+0x108>
   24094:	0005883a 	mov	r2,zero
   24098:	e0bffa15 	stw	r2,-24(fp)
   2409c:	00000206 	br	240a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   240a0:	00bffb44 	movi	r2,-19
   240a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   240a8:	e0bffa17 	ldw	r2,-24(fp)
   240ac:	1000090e 	bge	r2,zero,240d4 <open+0x144>
  {
    alt_release_fd (index);  
   240b0:	e13ff917 	ldw	r4,-28(fp)
   240b4:	00207d00 	call	207d0 <alt_release_fd>
    ALT_ERRNO = -status;
   240b8:	0023e680 	call	23e68 <alt_get_errno>
   240bc:	1007883a 	mov	r3,r2
   240c0:	e0bffa17 	ldw	r2,-24(fp)
   240c4:	0085c83a 	sub	r2,zero,r2
   240c8:	18800015 	stw	r2,0(r3)
    return -1;
   240cc:	00bfffc4 	movi	r2,-1
   240d0:	00000106 	br	240d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   240d4:	e0bff917 	ldw	r2,-28(fp)
}
   240d8:	e037883a 	mov	sp,fp
   240dc:	dfc00117 	ldw	ra,4(sp)
   240e0:	df000017 	ldw	fp,0(sp)
   240e4:	dec00204 	addi	sp,sp,8
   240e8:	f800283a 	ret

000240ec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   240ec:	defff204 	addi	sp,sp,-56
   240f0:	dfc00a15 	stw	ra,40(sp)
   240f4:	df000915 	stw	fp,36(sp)
   240f8:	df000904 	addi	fp,sp,36
   240fc:	e13fff15 	stw	r4,-4(fp)
   24100:	e1400215 	stw	r5,8(fp)
   24104:	e1800315 	stw	r6,12(fp)
   24108:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   2410c:	e0800204 	addi	r2,fp,8
   24110:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   24114:	e0bfff17 	ldw	r2,-4(fp)
   24118:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   2411c:	00006f06 	br	242dc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   24120:	e0bff807 	ldb	r2,-32(fp)
   24124:	10800960 	cmpeqi	r2,r2,37
   24128:	1000041e 	bne	r2,zero,2413c <alt_printf+0x50>
        {
            alt_putchar(c);
   2412c:	e0bff807 	ldb	r2,-32(fp)
   24130:	1009883a 	mov	r4,r2
   24134:	00243180 	call	24318 <alt_putchar>
   24138:	00006806 	br	242dc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2413c:	e0bff717 	ldw	r2,-36(fp)
   24140:	10c00044 	addi	r3,r2,1
   24144:	e0fff715 	stw	r3,-36(fp)
   24148:	10800003 	ldbu	r2,0(r2)
   2414c:	e0bff805 	stb	r2,-32(fp)
   24150:	e0bff807 	ldb	r2,-32(fp)
   24154:	10006926 	beq	r2,zero,242fc <alt_printf+0x210>
            {
                if (c == '%')
   24158:	e0bff807 	ldb	r2,-32(fp)
   2415c:	10800958 	cmpnei	r2,r2,37
   24160:	1000041e 	bne	r2,zero,24174 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   24164:	e0bff807 	ldb	r2,-32(fp)
   24168:	1009883a 	mov	r4,r2
   2416c:	00243180 	call	24318 <alt_putchar>
   24170:	00005a06 	br	242dc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   24174:	e0bff807 	ldb	r2,-32(fp)
   24178:	108018d8 	cmpnei	r2,r2,99
   2417c:	1000081e 	bne	r2,zero,241a0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   24180:	e0bffe17 	ldw	r2,-8(fp)
   24184:	10c00104 	addi	r3,r2,4
   24188:	e0fffe15 	stw	r3,-8(fp)
   2418c:	10800017 	ldw	r2,0(r2)
   24190:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   24194:	e13ffd17 	ldw	r4,-12(fp)
   24198:	00243180 	call	24318 <alt_putchar>
   2419c:	00004f06 	br	242dc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   241a0:	e0bff807 	ldb	r2,-32(fp)
   241a4:	10801e18 	cmpnei	r2,r2,120
   241a8:	1000341e 	bne	r2,zero,2427c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   241ac:	e0bffe17 	ldw	r2,-8(fp)
   241b0:	10c00104 	addi	r3,r2,4
   241b4:	e0fffe15 	stw	r3,-8(fp)
   241b8:	10800017 	ldw	r2,0(r2)
   241bc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   241c0:	e0bffb17 	ldw	r2,-20(fp)
   241c4:	1000031e 	bne	r2,zero,241d4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   241c8:	01000c04 	movi	r4,48
   241cc:	00243180 	call	24318 <alt_putchar>
                        continue;
   241d0:	00004206 	br	242dc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   241d4:	00800704 	movi	r2,28
   241d8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   241dc:	00000306 	br	241ec <alt_printf+0x100>
                        digit_shift -= 4;
   241e0:	e0bff917 	ldw	r2,-28(fp)
   241e4:	10bfff04 	addi	r2,r2,-4
   241e8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   241ec:	00c003c4 	movi	r3,15
   241f0:	e0bff917 	ldw	r2,-28(fp)
   241f4:	1884983a 	sll	r2,r3,r2
   241f8:	1007883a 	mov	r3,r2
   241fc:	e0bffb17 	ldw	r2,-20(fp)
   24200:	1884703a 	and	r2,r3,r2
   24204:	103ff626 	beq	r2,zero,241e0 <__alt_data_end+0xfc0241e0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24208:	00001906 	br	24270 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2420c:	00c003c4 	movi	r3,15
   24210:	e0bff917 	ldw	r2,-28(fp)
   24214:	1884983a 	sll	r2,r3,r2
   24218:	1007883a 	mov	r3,r2
   2421c:	e0bffb17 	ldw	r2,-20(fp)
   24220:	1886703a 	and	r3,r3,r2
   24224:	e0bff917 	ldw	r2,-28(fp)
   24228:	1884d83a 	srl	r2,r3,r2
   2422c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   24230:	e0bffc17 	ldw	r2,-16(fp)
   24234:	108002a8 	cmpgeui	r2,r2,10
   24238:	1000041e 	bne	r2,zero,2424c <alt_printf+0x160>
                            c = '0' + digit;
   2423c:	e0bffc17 	ldw	r2,-16(fp)
   24240:	10800c04 	addi	r2,r2,48
   24244:	e0bff805 	stb	r2,-32(fp)
   24248:	00000306 	br	24258 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2424c:	e0bffc17 	ldw	r2,-16(fp)
   24250:	108015c4 	addi	r2,r2,87
   24254:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   24258:	e0bff807 	ldb	r2,-32(fp)
   2425c:	1009883a 	mov	r4,r2
   24260:	00243180 	call	24318 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24264:	e0bff917 	ldw	r2,-28(fp)
   24268:	10bfff04 	addi	r2,r2,-4
   2426c:	e0bff915 	stw	r2,-28(fp)
   24270:	e0bff917 	ldw	r2,-28(fp)
   24274:	103fe50e 	bge	r2,zero,2420c <__alt_data_end+0xfc02420c>
   24278:	00001806 	br	242dc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2427c:	e0bff807 	ldb	r2,-32(fp)
   24280:	10801cd8 	cmpnei	r2,r2,115
   24284:	1000151e 	bne	r2,zero,242dc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   24288:	e0bffe17 	ldw	r2,-8(fp)
   2428c:	10c00104 	addi	r3,r2,4
   24290:	e0fffe15 	stw	r3,-8(fp)
   24294:	10800017 	ldw	r2,0(r2)
   24298:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2429c:	00000906 	br	242c4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   242a0:	e0bffa17 	ldw	r2,-24(fp)
   242a4:	10c00044 	addi	r3,r2,1
   242a8:	e0fffa15 	stw	r3,-24(fp)
   242ac:	10800003 	ldbu	r2,0(r2)
   242b0:	10803fcc 	andi	r2,r2,255
   242b4:	1080201c 	xori	r2,r2,128
   242b8:	10bfe004 	addi	r2,r2,-128
   242bc:	1009883a 	mov	r4,r2
   242c0:	00243180 	call	24318 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   242c4:	e0bffa17 	ldw	r2,-24(fp)
   242c8:	10800003 	ldbu	r2,0(r2)
   242cc:	10803fcc 	andi	r2,r2,255
   242d0:	1080201c 	xori	r2,r2,128
   242d4:	10bfe004 	addi	r2,r2,-128
   242d8:	103ff11e 	bne	r2,zero,242a0 <__alt_data_end+0xfc0242a0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   242dc:	e0bff717 	ldw	r2,-36(fp)
   242e0:	10c00044 	addi	r3,r2,1
   242e4:	e0fff715 	stw	r3,-36(fp)
   242e8:	10800003 	ldbu	r2,0(r2)
   242ec:	e0bff805 	stb	r2,-32(fp)
   242f0:	e0bff807 	ldb	r2,-32(fp)
   242f4:	103f8a1e 	bne	r2,zero,24120 <__alt_data_end+0xfc024120>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   242f8:	00000106 	br	24300 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   242fc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   24300:	0001883a 	nop
   24304:	e037883a 	mov	sp,fp
   24308:	dfc00117 	ldw	ra,4(sp)
   2430c:	df000017 	ldw	fp,0(sp)
   24310:	dec00504 	addi	sp,sp,20
   24314:	f800283a 	ret

00024318 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   24318:	defffd04 	addi	sp,sp,-12
   2431c:	dfc00215 	stw	ra,8(sp)
   24320:	df000115 	stw	fp,4(sp)
   24324:	df000104 	addi	fp,sp,4
   24328:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2432c:	d0a5b317 	ldw	r2,-26932(gp)
   24330:	10800217 	ldw	r2,8(r2)
   24334:	100b883a 	mov	r5,r2
   24338:	e13fff17 	ldw	r4,-4(fp)
   2433c:	0018d5c0 	call	18d5c <putc>
#endif
#endif
}
   24340:	e037883a 	mov	sp,fp
   24344:	dfc00117 	ldw	ra,4(sp)
   24348:	df000017 	ldw	fp,0(sp)
   2434c:	dec00204 	addi	sp,sp,8
   24350:	f800283a 	ret

00024354 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24354:	defffa04 	addi	sp,sp,-24
   24358:	df000515 	stw	fp,20(sp)
   2435c:	df000504 	addi	fp,sp,20
   24360:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24364:	0005303a 	rdctl	r2,status
   24368:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2436c:	e0fffc17 	ldw	r3,-16(fp)
   24370:	00bfff84 	movi	r2,-2
   24374:	1884703a 	and	r2,r3,r2
   24378:	1001703a 	wrctl	status,r2
  
  return context;
   2437c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24380:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24384:	e0bfff17 	ldw	r2,-4(fp)
   24388:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10800017 	ldw	r2,0(r2)
   24394:	e0fffd17 	ldw	r3,-12(fp)
   24398:	18c00117 	ldw	r3,4(r3)
   2439c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   243a0:	e0bffd17 	ldw	r2,-12(fp)
   243a4:	10800117 	ldw	r2,4(r2)
   243a8:	e0fffd17 	ldw	r3,-12(fp)
   243ac:	18c00017 	ldw	r3,0(r3)
   243b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   243b4:	e0bffd17 	ldw	r2,-12(fp)
   243b8:	e0fffd17 	ldw	r3,-12(fp)
   243bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   243c0:	e0bffd17 	ldw	r2,-12(fp)
   243c4:	e0fffd17 	ldw	r3,-12(fp)
   243c8:	10c00015 	stw	r3,0(r2)
   243cc:	e0bffb17 	ldw	r2,-20(fp)
   243d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243d4:	e0bffe17 	ldw	r2,-8(fp)
   243d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   243dc:	0001883a 	nop
   243e0:	e037883a 	mov	sp,fp
   243e4:	df000017 	ldw	fp,0(sp)
   243e8:	dec00104 	addi	sp,sp,4
   243ec:	f800283a 	ret

000243f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   243f0:	defffb04 	addi	sp,sp,-20
   243f4:	dfc00415 	stw	ra,16(sp)
   243f8:	df000315 	stw	fp,12(sp)
   243fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24400:	d0a5c217 	ldw	r2,-26872(gp)
   24404:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24408:	d0b25717 	ldw	r2,-13988(gp)
   2440c:	10800044 	addi	r2,r2,1
   24410:	d0b25715 	stw	r2,-13988(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24414:	00002e06 	br	244d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24418:	e0bffd17 	ldw	r2,-12(fp)
   2441c:	10800017 	ldw	r2,0(r2)
   24420:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24424:	e0bffd17 	ldw	r2,-12(fp)
   24428:	10800403 	ldbu	r2,16(r2)
   2442c:	10803fcc 	andi	r2,r2,255
   24430:	10000426 	beq	r2,zero,24444 <alt_tick+0x54>
   24434:	d0b25717 	ldw	r2,-13988(gp)
   24438:	1000021e 	bne	r2,zero,24444 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2443c:	e0bffd17 	ldw	r2,-12(fp)
   24440:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24444:	e0bffd17 	ldw	r2,-12(fp)
   24448:	10800217 	ldw	r2,8(r2)
   2444c:	d0f25717 	ldw	r3,-13988(gp)
   24450:	18801d36 	bltu	r3,r2,244c8 <alt_tick+0xd8>
   24454:	e0bffd17 	ldw	r2,-12(fp)
   24458:	10800403 	ldbu	r2,16(r2)
   2445c:	10803fcc 	andi	r2,r2,255
   24460:	1000191e 	bne	r2,zero,244c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24464:	e0bffd17 	ldw	r2,-12(fp)
   24468:	10800317 	ldw	r2,12(r2)
   2446c:	e0fffd17 	ldw	r3,-12(fp)
   24470:	18c00517 	ldw	r3,20(r3)
   24474:	1809883a 	mov	r4,r3
   24478:	103ee83a 	callr	r2
   2447c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24480:	e0bfff17 	ldw	r2,-4(fp)
   24484:	1000031e 	bne	r2,zero,24494 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24488:	e13ffd17 	ldw	r4,-12(fp)
   2448c:	00243540 	call	24354 <alt_alarm_stop>
   24490:	00000d06 	br	244c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24494:	e0bffd17 	ldw	r2,-12(fp)
   24498:	10c00217 	ldw	r3,8(r2)
   2449c:	e0bfff17 	ldw	r2,-4(fp)
   244a0:	1887883a 	add	r3,r3,r2
   244a4:	e0bffd17 	ldw	r2,-12(fp)
   244a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   244ac:	e0bffd17 	ldw	r2,-12(fp)
   244b0:	10c00217 	ldw	r3,8(r2)
   244b4:	d0b25717 	ldw	r2,-13988(gp)
   244b8:	1880032e 	bgeu	r3,r2,244c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   244bc:	e0bffd17 	ldw	r2,-12(fp)
   244c0:	00c00044 	movi	r3,1
   244c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   244c8:	e0bffe17 	ldw	r2,-8(fp)
   244cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   244d0:	e0fffd17 	ldw	r3,-12(fp)
   244d4:	d0a5c204 	addi	r2,gp,-26872
   244d8:	18bfcf1e 	bne	r3,r2,24418 <__alt_data_end+0xfc024418>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   244dc:	0001883a 	nop
}
   244e0:	0001883a 	nop
   244e4:	e037883a 	mov	sp,fp
   244e8:	dfc00117 	ldw	ra,4(sp)
   244ec:	df000017 	ldw	fp,0(sp)
   244f0:	dec00204 	addi	sp,sp,8
   244f4:	f800283a 	ret

000244f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   244f8:	deffff04 	addi	sp,sp,-4
   244fc:	df000015 	stw	fp,0(sp)
   24500:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24504:	000170fa 	wrctl	ienable,zero
}
   24508:	0001883a 	nop
   2450c:	e037883a 	mov	sp,fp
   24510:	df000017 	ldw	fp,0(sp)
   24514:	dec00104 	addi	sp,sp,4
   24518:	f800283a 	ret

0002451c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2451c:	defffb04 	addi	sp,sp,-20
   24520:	dfc00415 	stw	ra,16(sp)
   24524:	df000315 	stw	fp,12(sp)
   24528:	df000304 	addi	fp,sp,12
   2452c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24530:	d0a5b817 	ldw	r2,-26912(gp)
   24534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24538:	00003106 	br	24600 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2453c:	e0bffd17 	ldw	r2,-12(fp)
   24540:	10800217 	ldw	r2,8(r2)
   24544:	1009883a 	mov	r4,r2
   24548:	001053c0 	call	1053c <strlen>
   2454c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24550:	e0bffd17 	ldw	r2,-12(fp)
   24554:	10c00217 	ldw	r3,8(r2)
   24558:	e0bffe17 	ldw	r2,-8(fp)
   2455c:	10bfffc4 	addi	r2,r2,-1
   24560:	1885883a 	add	r2,r3,r2
   24564:	10800003 	ldbu	r2,0(r2)
   24568:	10803fcc 	andi	r2,r2,255
   2456c:	1080201c 	xori	r2,r2,128
   24570:	10bfe004 	addi	r2,r2,-128
   24574:	10800bd8 	cmpnei	r2,r2,47
   24578:	1000031e 	bne	r2,zero,24588 <alt_find_file+0x6c>
    {
      len -= 1;
   2457c:	e0bffe17 	ldw	r2,-8(fp)
   24580:	10bfffc4 	addi	r2,r2,-1
   24584:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24588:	e0bffe17 	ldw	r2,-8(fp)
   2458c:	e0ffff17 	ldw	r3,-4(fp)
   24590:	1885883a 	add	r2,r3,r2
   24594:	10800003 	ldbu	r2,0(r2)
   24598:	10803fcc 	andi	r2,r2,255
   2459c:	1080201c 	xori	r2,r2,128
   245a0:	10bfe004 	addi	r2,r2,-128
   245a4:	10800be0 	cmpeqi	r2,r2,47
   245a8:	1000081e 	bne	r2,zero,245cc <alt_find_file+0xb0>
   245ac:	e0bffe17 	ldw	r2,-8(fp)
   245b0:	e0ffff17 	ldw	r3,-4(fp)
   245b4:	1885883a 	add	r2,r3,r2
   245b8:	10800003 	ldbu	r2,0(r2)
   245bc:	10803fcc 	andi	r2,r2,255
   245c0:	1080201c 	xori	r2,r2,128
   245c4:	10bfe004 	addi	r2,r2,-128
   245c8:	10000a1e 	bne	r2,zero,245f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   245cc:	e0bffd17 	ldw	r2,-12(fp)
   245d0:	10800217 	ldw	r2,8(r2)
   245d4:	e0fffe17 	ldw	r3,-8(fp)
   245d8:	180d883a 	mov	r6,r3
   245dc:	e17fff17 	ldw	r5,-4(fp)
   245e0:	1009883a 	mov	r4,r2
   245e4:	00247d00 	call	247d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   245e8:	1000021e 	bne	r2,zero,245f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   245ec:	e0bffd17 	ldw	r2,-12(fp)
   245f0:	00000706 	br	24610 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   245f4:	e0bffd17 	ldw	r2,-12(fp)
   245f8:	10800017 	ldw	r2,0(r2)
   245fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24600:	e0fffd17 	ldw	r3,-12(fp)
   24604:	d0a5b804 	addi	r2,gp,-26912
   24608:	18bfcc1e 	bne	r3,r2,2453c <__alt_data_end+0xfc02453c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2460c:	0005883a 	mov	r2,zero
}
   24610:	e037883a 	mov	sp,fp
   24614:	dfc00117 	ldw	ra,4(sp)
   24618:	df000017 	ldw	fp,0(sp)
   2461c:	dec00204 	addi	sp,sp,8
   24620:	f800283a 	ret

00024624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24624:	defffa04 	addi	sp,sp,-24
   24628:	dfc00515 	stw	ra,20(sp)
   2462c:	df000415 	stw	fp,16(sp)
   24630:	dc000315 	stw	r16,12(sp)
   24634:	df000404 	addi	fp,sp,16
   24638:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2463c:	00bffa04 	movi	r2,-24
   24640:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24644:	e03ffc15 	stw	zero,-16(fp)
   24648:	00001d06 	br	246c0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   2464c:	040000f4 	movhi	r16,3
   24650:	8430c004 	addi	r16,r16,-15616
   24654:	e0bffc17 	ldw	r2,-16(fp)
   24658:	01400304 	movi	r5,12
   2465c:	1009883a 	mov	r4,r2
   24660:	000d8d40 	call	d8d4 <__mulsi3>
   24664:	8085883a 	add	r2,r16,r2
   24668:	10800017 	ldw	r2,0(r2)
   2466c:	1000111e 	bne	r2,zero,246b4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   24670:	040000f4 	movhi	r16,3
   24674:	8430c004 	addi	r16,r16,-15616
   24678:	e0bffc17 	ldw	r2,-16(fp)
   2467c:	01400304 	movi	r5,12
   24680:	1009883a 	mov	r4,r2
   24684:	000d8d40 	call	d8d4 <__mulsi3>
   24688:	8085883a 	add	r2,r16,r2
   2468c:	e0fffe17 	ldw	r3,-8(fp)
   24690:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24694:	d0e5bc17 	ldw	r3,-26896(gp)
   24698:	e0bffc17 	ldw	r2,-16(fp)
   2469c:	1880020e 	bge	r3,r2,246a8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   246a0:	e0bffc17 	ldw	r2,-16(fp)
   246a4:	d0a5bc15 	stw	r2,-26896(gp)
      }
      rc = i;
   246a8:	e0bffc17 	ldw	r2,-16(fp)
   246ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   246b0:	00000606 	br	246cc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   246b4:	e0bffc17 	ldw	r2,-16(fp)
   246b8:	10800044 	addi	r2,r2,1
   246bc:	e0bffc15 	stw	r2,-16(fp)
   246c0:	e0bffc17 	ldw	r2,-16(fp)
   246c4:	10800810 	cmplti	r2,r2,32
   246c8:	103fe01e 	bne	r2,zero,2464c <__alt_data_end+0xfc02464c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   246cc:	e0bffd17 	ldw	r2,-12(fp)
}
   246d0:	e6ffff04 	addi	sp,fp,-4
   246d4:	dfc00217 	ldw	ra,8(sp)
   246d8:	df000117 	ldw	fp,4(sp)
   246dc:	dc000017 	ldw	r16,0(sp)
   246e0:	dec00304 	addi	sp,sp,12
   246e4:	f800283a 	ret

000246e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   246e8:	defffe04 	addi	sp,sp,-8
   246ec:	df000115 	stw	fp,4(sp)
   246f0:	df000104 	addi	fp,sp,4
   246f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   246f8:	e0bfff17 	ldw	r2,-4(fp)
   246fc:	10bffe84 	addi	r2,r2,-6
   24700:	10c00428 	cmpgeui	r3,r2,16
   24704:	18001a1e 	bne	r3,zero,24770 <alt_exception_cause_generated_bad_addr+0x88>
   24708:	100690ba 	slli	r3,r2,2
   2470c:	008000b4 	movhi	r2,2
   24710:	1091c804 	addi	r2,r2,18208
   24714:	1885883a 	add	r2,r3,r2
   24718:	10800017 	ldw	r2,0(r2)
   2471c:	1000683a 	jmp	r2
   24720:	00024760 	cmpeqi	zero,zero,2333
   24724:	00024760 	cmpeqi	zero,zero,2333
   24728:	00024770 	cmpltui	zero,zero,2333
   2472c:	00024770 	cmpltui	zero,zero,2333
   24730:	00024770 	cmpltui	zero,zero,2333
   24734:	00024760 	cmpeqi	zero,zero,2333
   24738:	00024768 	cmpgeui	zero,zero,2333
   2473c:	00024770 	cmpltui	zero,zero,2333
   24740:	00024760 	cmpeqi	zero,zero,2333
   24744:	00024760 	cmpeqi	zero,zero,2333
   24748:	00024770 	cmpltui	zero,zero,2333
   2474c:	00024760 	cmpeqi	zero,zero,2333
   24750:	00024768 	cmpgeui	zero,zero,2333
   24754:	00024770 	cmpltui	zero,zero,2333
   24758:	00024770 	cmpltui	zero,zero,2333
   2475c:	00024760 	cmpeqi	zero,zero,2333
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24760:	00800044 	movi	r2,1
   24764:	00000306 	br	24774 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24768:	0005883a 	mov	r2,zero
   2476c:	00000106 	br	24774 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24770:	0005883a 	mov	r2,zero
  }
}
   24774:	e037883a 	mov	sp,fp
   24778:	df000017 	ldw	fp,0(sp)
   2477c:	dec00104 	addi	sp,sp,4
   24780:	f800283a 	ret

00024784 <atexit>:
   24784:	200b883a 	mov	r5,r4
   24788:	000f883a 	mov	r7,zero
   2478c:	000d883a 	mov	r6,zero
   24790:	0009883a 	mov	r4,zero
   24794:	002484c1 	jmpi	2484c <__register_exitproc>

00024798 <exit>:
   24798:	defffe04 	addi	sp,sp,-8
   2479c:	000b883a 	mov	r5,zero
   247a0:	dc000015 	stw	r16,0(sp)
   247a4:	dfc00115 	stw	ra,4(sp)
   247a8:	2021883a 	mov	r16,r4
   247ac:	00249640 	call	24964 <__call_exitprocs>
   247b0:	008000f4 	movhi	r2,3
   247b4:	10baf804 	addi	r2,r2,-5152
   247b8:	11000017 	ldw	r4,0(r2)
   247bc:	20800f17 	ldw	r2,60(r4)
   247c0:	10000126 	beq	r2,zero,247c8 <exit+0x30>
   247c4:	103ee83a 	callr	r2
   247c8:	8009883a 	mov	r4,r16
   247cc:	002002c0 	call	2002c <_exit>

000247d0 <memcmp>:
   247d0:	01c000c4 	movi	r7,3
   247d4:	3980192e 	bgeu	r7,r6,2483c <memcmp+0x6c>
   247d8:	2144b03a 	or	r2,r4,r5
   247dc:	11c4703a 	and	r2,r2,r7
   247e0:	10000f26 	beq	r2,zero,24820 <memcmp+0x50>
   247e4:	20800003 	ldbu	r2,0(r4)
   247e8:	28c00003 	ldbu	r3,0(r5)
   247ec:	10c0151e 	bne	r2,r3,24844 <memcmp+0x74>
   247f0:	31bfff84 	addi	r6,r6,-2
   247f4:	01ffffc4 	movi	r7,-1
   247f8:	00000406 	br	2480c <memcmp+0x3c>
   247fc:	20800003 	ldbu	r2,0(r4)
   24800:	28c00003 	ldbu	r3,0(r5)
   24804:	31bfffc4 	addi	r6,r6,-1
   24808:	10c00e1e 	bne	r2,r3,24844 <memcmp+0x74>
   2480c:	21000044 	addi	r4,r4,1
   24810:	29400044 	addi	r5,r5,1
   24814:	31fff91e 	bne	r6,r7,247fc <__alt_data_end+0xfc0247fc>
   24818:	0005883a 	mov	r2,zero
   2481c:	f800283a 	ret
   24820:	20c00017 	ldw	r3,0(r4)
   24824:	28800017 	ldw	r2,0(r5)
   24828:	18bfee1e 	bne	r3,r2,247e4 <__alt_data_end+0xfc0247e4>
   2482c:	31bfff04 	addi	r6,r6,-4
   24830:	21000104 	addi	r4,r4,4
   24834:	29400104 	addi	r5,r5,4
   24838:	39bff936 	bltu	r7,r6,24820 <__alt_data_end+0xfc024820>
   2483c:	303fe91e 	bne	r6,zero,247e4 <__alt_data_end+0xfc0247e4>
   24840:	003ff506 	br	24818 <__alt_data_end+0xfc024818>
   24844:	10c5c83a 	sub	r2,r2,r3
   24848:	f800283a 	ret

0002484c <__register_exitproc>:
   2484c:	defffa04 	addi	sp,sp,-24
   24850:	dc000315 	stw	r16,12(sp)
   24854:	040000f4 	movhi	r16,3
   24858:	843af804 	addi	r16,r16,-5152
   2485c:	80c00017 	ldw	r3,0(r16)
   24860:	dc400415 	stw	r17,16(sp)
   24864:	dfc00515 	stw	ra,20(sp)
   24868:	18805217 	ldw	r2,328(r3)
   2486c:	2023883a 	mov	r17,r4
   24870:	10003726 	beq	r2,zero,24950 <__register_exitproc+0x104>
   24874:	10c00117 	ldw	r3,4(r2)
   24878:	010007c4 	movi	r4,31
   2487c:	20c00e16 	blt	r4,r3,248b8 <__register_exitproc+0x6c>
   24880:	1a000044 	addi	r8,r3,1
   24884:	8800221e 	bne	r17,zero,24910 <__register_exitproc+0xc4>
   24888:	18c00084 	addi	r3,r3,2
   2488c:	18c7883a 	add	r3,r3,r3
   24890:	18c7883a 	add	r3,r3,r3
   24894:	12000115 	stw	r8,4(r2)
   24898:	10c7883a 	add	r3,r2,r3
   2489c:	19400015 	stw	r5,0(r3)
   248a0:	0005883a 	mov	r2,zero
   248a4:	dfc00517 	ldw	ra,20(sp)
   248a8:	dc400417 	ldw	r17,16(sp)
   248ac:	dc000317 	ldw	r16,12(sp)
   248b0:	dec00604 	addi	sp,sp,24
   248b4:	f800283a 	ret
   248b8:	00800074 	movhi	r2,1
   248bc:	10bd1004 	addi	r2,r2,-3008
   248c0:	10002626 	beq	r2,zero,2495c <__register_exitproc+0x110>
   248c4:	01006404 	movi	r4,400
   248c8:	d9400015 	stw	r5,0(sp)
   248cc:	d9800115 	stw	r6,4(sp)
   248d0:	d9c00215 	stw	r7,8(sp)
   248d4:	000f4400 	call	f440 <malloc>
   248d8:	d9400017 	ldw	r5,0(sp)
   248dc:	d9800117 	ldw	r6,4(sp)
   248e0:	d9c00217 	ldw	r7,8(sp)
   248e4:	10001d26 	beq	r2,zero,2495c <__register_exitproc+0x110>
   248e8:	81000017 	ldw	r4,0(r16)
   248ec:	10000115 	stw	zero,4(r2)
   248f0:	02000044 	movi	r8,1
   248f4:	22405217 	ldw	r9,328(r4)
   248f8:	0007883a 	mov	r3,zero
   248fc:	12400015 	stw	r9,0(r2)
   24900:	20805215 	stw	r2,328(r4)
   24904:	10006215 	stw	zero,392(r2)
   24908:	10006315 	stw	zero,396(r2)
   2490c:	883fde26 	beq	r17,zero,24888 <__alt_data_end+0xfc024888>
   24910:	18c9883a 	add	r4,r3,r3
   24914:	2109883a 	add	r4,r4,r4
   24918:	1109883a 	add	r4,r2,r4
   2491c:	21802215 	stw	r6,136(r4)
   24920:	01800044 	movi	r6,1
   24924:	12406217 	ldw	r9,392(r2)
   24928:	30cc983a 	sll	r6,r6,r3
   2492c:	4992b03a 	or	r9,r9,r6
   24930:	12406215 	stw	r9,392(r2)
   24934:	21c04215 	stw	r7,264(r4)
   24938:	01000084 	movi	r4,2
   2493c:	893fd21e 	bne	r17,r4,24888 <__alt_data_end+0xfc024888>
   24940:	11006317 	ldw	r4,396(r2)
   24944:	218cb03a 	or	r6,r4,r6
   24948:	11806315 	stw	r6,396(r2)
   2494c:	003fce06 	br	24888 <__alt_data_end+0xfc024888>
   24950:	18805304 	addi	r2,r3,332
   24954:	18805215 	stw	r2,328(r3)
   24958:	003fc606 	br	24874 <__alt_data_end+0xfc024874>
   2495c:	00bfffc4 	movi	r2,-1
   24960:	003fd006 	br	248a4 <__alt_data_end+0xfc0248a4>

00024964 <__call_exitprocs>:
   24964:	defff504 	addi	sp,sp,-44
   24968:	df000915 	stw	fp,36(sp)
   2496c:	dd400615 	stw	r21,24(sp)
   24970:	dc800315 	stw	r18,12(sp)
   24974:	dfc00a15 	stw	ra,40(sp)
   24978:	ddc00815 	stw	r23,32(sp)
   2497c:	dd800715 	stw	r22,28(sp)
   24980:	dd000515 	stw	r20,20(sp)
   24984:	dcc00415 	stw	r19,16(sp)
   24988:	dc400215 	stw	r17,8(sp)
   2498c:	dc000115 	stw	r16,4(sp)
   24990:	d9000015 	stw	r4,0(sp)
   24994:	2839883a 	mov	fp,r5
   24998:	04800044 	movi	r18,1
   2499c:	057fffc4 	movi	r21,-1
   249a0:	008000f4 	movhi	r2,3
   249a4:	10baf804 	addi	r2,r2,-5152
   249a8:	12000017 	ldw	r8,0(r2)
   249ac:	45005217 	ldw	r20,328(r8)
   249b0:	44c05204 	addi	r19,r8,328
   249b4:	a0001c26 	beq	r20,zero,24a28 <__call_exitprocs+0xc4>
   249b8:	a0800117 	ldw	r2,4(r20)
   249bc:	15ffffc4 	addi	r23,r2,-1
   249c0:	b8000d16 	blt	r23,zero,249f8 <__call_exitprocs+0x94>
   249c4:	14000044 	addi	r16,r2,1
   249c8:	8421883a 	add	r16,r16,r16
   249cc:	8421883a 	add	r16,r16,r16
   249d0:	84402004 	addi	r17,r16,128
   249d4:	a463883a 	add	r17,r20,r17
   249d8:	a421883a 	add	r16,r20,r16
   249dc:	e0001e26 	beq	fp,zero,24a58 <__call_exitprocs+0xf4>
   249e0:	80804017 	ldw	r2,256(r16)
   249e4:	e0801c26 	beq	fp,r2,24a58 <__call_exitprocs+0xf4>
   249e8:	bdffffc4 	addi	r23,r23,-1
   249ec:	843fff04 	addi	r16,r16,-4
   249f0:	8c7fff04 	addi	r17,r17,-4
   249f4:	bd7ff91e 	bne	r23,r21,249dc <__alt_data_end+0xfc0249dc>
   249f8:	00800074 	movhi	r2,1
   249fc:	10bd1504 	addi	r2,r2,-2988
   24a00:	10000926 	beq	r2,zero,24a28 <__call_exitprocs+0xc4>
   24a04:	a0800117 	ldw	r2,4(r20)
   24a08:	1000301e 	bne	r2,zero,24acc <__call_exitprocs+0x168>
   24a0c:	a0800017 	ldw	r2,0(r20)
   24a10:	10003226 	beq	r2,zero,24adc <__call_exitprocs+0x178>
   24a14:	a009883a 	mov	r4,r20
   24a18:	98800015 	stw	r2,0(r19)
   24a1c:	000f4540 	call	f454 <free>
   24a20:	9d000017 	ldw	r20,0(r19)
   24a24:	a03fe41e 	bne	r20,zero,249b8 <__alt_data_end+0xfc0249b8>
   24a28:	dfc00a17 	ldw	ra,40(sp)
   24a2c:	df000917 	ldw	fp,36(sp)
   24a30:	ddc00817 	ldw	r23,32(sp)
   24a34:	dd800717 	ldw	r22,28(sp)
   24a38:	dd400617 	ldw	r21,24(sp)
   24a3c:	dd000517 	ldw	r20,20(sp)
   24a40:	dcc00417 	ldw	r19,16(sp)
   24a44:	dc800317 	ldw	r18,12(sp)
   24a48:	dc400217 	ldw	r17,8(sp)
   24a4c:	dc000117 	ldw	r16,4(sp)
   24a50:	dec00b04 	addi	sp,sp,44
   24a54:	f800283a 	ret
   24a58:	a0800117 	ldw	r2,4(r20)
   24a5c:	80c00017 	ldw	r3,0(r16)
   24a60:	10bfffc4 	addi	r2,r2,-1
   24a64:	15c01426 	beq	r2,r23,24ab8 <__call_exitprocs+0x154>
   24a68:	80000015 	stw	zero,0(r16)
   24a6c:	183fde26 	beq	r3,zero,249e8 <__alt_data_end+0xfc0249e8>
   24a70:	95c8983a 	sll	r4,r18,r23
   24a74:	a0806217 	ldw	r2,392(r20)
   24a78:	a5800117 	ldw	r22,4(r20)
   24a7c:	2084703a 	and	r2,r4,r2
   24a80:	10000b26 	beq	r2,zero,24ab0 <__call_exitprocs+0x14c>
   24a84:	a0806317 	ldw	r2,396(r20)
   24a88:	2088703a 	and	r4,r4,r2
   24a8c:	20000c1e 	bne	r4,zero,24ac0 <__call_exitprocs+0x15c>
   24a90:	89400017 	ldw	r5,0(r17)
   24a94:	d9000017 	ldw	r4,0(sp)
   24a98:	183ee83a 	callr	r3
   24a9c:	a0800117 	ldw	r2,4(r20)
   24aa0:	15bfbf1e 	bne	r2,r22,249a0 <__alt_data_end+0xfc0249a0>
   24aa4:	98800017 	ldw	r2,0(r19)
   24aa8:	153fcf26 	beq	r2,r20,249e8 <__alt_data_end+0xfc0249e8>
   24aac:	003fbc06 	br	249a0 <__alt_data_end+0xfc0249a0>
   24ab0:	183ee83a 	callr	r3
   24ab4:	003ff906 	br	24a9c <__alt_data_end+0xfc024a9c>
   24ab8:	a5c00115 	stw	r23,4(r20)
   24abc:	003feb06 	br	24a6c <__alt_data_end+0xfc024a6c>
   24ac0:	89000017 	ldw	r4,0(r17)
   24ac4:	183ee83a 	callr	r3
   24ac8:	003ff406 	br	24a9c <__alt_data_end+0xfc024a9c>
   24acc:	a0800017 	ldw	r2,0(r20)
   24ad0:	a027883a 	mov	r19,r20
   24ad4:	1029883a 	mov	r20,r2
   24ad8:	003fb606 	br	249b4 <__alt_data_end+0xfc0249b4>
   24adc:	0005883a 	mov	r2,zero
   24ae0:	003ffb06 	br	24ad0 <__alt_data_end+0xfc024ad0>
   24ae4:	01110bff 	0x1110bff
   24ae8:	01010004 	movi	r4,1024
   24aec:	7f000105 	stb	fp,4(r15)
   24af0:	007d0000 	call	7d000 <_gp+0x47ae8>
   24af4:	00000000 	call	0 <__alt_mem_sdram>
   24af8:	01883a00 	call	1883a0 <_gp+0x152e88>
   24afc:	010d0bff 	0x10d0bff
   24b00:	01010002 	0x1010002
	...
   24b0c:	010d0bff 	0x10d0bff
   24b10:	01010004 	movi	r4,1024
   24b14:	00000100 	call	10 <__alt_mem_sdram+0x10>
   24b18:	00000000 	call	0 <__alt_mem_sdram>
   24b1c:	0000ade8 	cmpgeui	zero,zero,695
   24b20:	0000d5bc 	xorhi	zero,zero,854
