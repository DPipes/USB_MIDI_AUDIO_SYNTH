
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002ac5c memsz 0x0002ac5c flags r-x
    LOAD off    0x0002bc7c vaddr 0x0002ac7c paddr 0x0002de60 align 2**12
         filesz 0x000031e4 memsz 0x000031e4 flags rw-
    LOAD off    0x0002f044 vaddr 0x00031044 paddr 0x00031044 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000238f8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007154  00023b28  00023b28  00024b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031e4  0002ac7c  0002de60  0002bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00031044  00031044  0002f044  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000312f0  000312f0  0002ee60  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a98  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005343f  00000000  00000000  00030920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010da0  00000000  00000000  00083d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015701  00000000  00000000  00094aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a2c  00000000  00000000  000aa200  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ff45  00000000  00000000  000afc2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000243a9  00000000  00000000  000bfb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e3f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c10  00000000  00000000  000e3f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ff60a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000ff60d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ff612  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ff613  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ff614  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ff618  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ff61c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000ff620  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000ff62b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000ff636  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000ff641  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000ff655  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000ff680  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fb7b  00000000  00000000  00104b07  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023b28 l    d  .rodata	00000000 .rodata
0002ac7c l    d  .rwdata	00000000 .rwdata
00031044 l    d  .bss	00000000 .bss
000312f0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002c760 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c761 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c762 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c763 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002c764 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c765 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c766 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c767 l     O .rwdata	00000001 _ZL9SPI_MODE3
00031044 l     O .bss	00000001 _ZL9usb_error
00031045 l     O .bss	00000001 _ZL14usb_task_state
00031048 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002c770 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c771 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c772 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c773 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c774 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00023c32 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003900 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002c794 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002c798 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c799 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c79a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c79b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c79c l     O .rwdata	00000002 _ZL9pstrSpace
0002c7a0 l     O .rwdata	00000003 _ZL8pstrCRLF
0002c7a4 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c7a8 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c7ac l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c7b0 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00023f5c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00023f70 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00023f7c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00023f88 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00023f94 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00023fa0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00023fb0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c7b8 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c7c0 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c7c8 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c7d0 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00023fbc l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00023fc8 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c7d4 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c7d8 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00023fd4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00023fe4 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c7e0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c7e8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00023ff4 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c7f0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00024004 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c7f8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0002401c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c7fc l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00024028 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00024034 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c804 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c80c l     O .rwdata	00000006 _ZL14pstrUsageMouse
00024040 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0002404c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c814 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c81c l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00024058 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00024068 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c824 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c828 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c82c l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c830 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c834 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c838 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c83c l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c844 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c84c l     O .rwdata	00000006 _ZL14pstrUsageWheel
0002407c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00024088 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00024094 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000240a0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c854 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c85c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c860 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c864 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c868 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c86c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c874 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c87c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c884 l     O .rwdata	00000004 _ZL12pstrUsageVno
000240b0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000240c0 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000240cc l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000240d8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000240e8 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000240f4 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00024100 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00024114 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00024124 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00024134 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00024144 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00024154 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00024164 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00024174 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00024184 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00024190 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000241a0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000241b4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000241c8 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000241d4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000241e0 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000241ec l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000241f8 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00024204 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00024210 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0002421c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00024228 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00024234 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00024240 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002424c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0002425c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00024268 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00024278 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00024288 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00024298 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000242a8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000242b8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000242d0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000242e8 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00024300 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00024310 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00024320 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00024330 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00024340 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00024350 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00024360 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00024370 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00024380 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00024390 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000243a0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000243b8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000243c8 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000243dc l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000243ec l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000243f8 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00024404 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00024410 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c888 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0002441c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0002442c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00024440 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00024454 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00024464 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00024474 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00024480 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00024494 l     O .rodata	00000009 _ZL17pstrUsageElevator
000244a0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c890 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000244b0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000244bc l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000244c8 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000244d8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000244e8 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c898 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000244f4 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00024500 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0002450c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c8a0 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c8a8 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c8b0 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c8b8 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00024518 l     O .rodata	00000009 _ZL17pstrUsageSteering
00024524 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00024530 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002453c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c8c0 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00024548 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00024558 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00024564 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00024570 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c8c8 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002457c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c8d0 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c8d8 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00024588 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00024594 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000245a0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000245ac l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c8e0 l     O .rwdata	00000005 _ZL13pstrUsageVest
000245b8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000245c4 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000245d0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000245e0 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000245f0 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000245fc l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00024608 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c8e8 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c8ec l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c8f4 l     O .rwdata	00000005 _ZL13pstrUsageRate
00024614 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00024620 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00024630 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00024640 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024650 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002465c l     O .rodata	0000000b _ZL18pstrUsageStickType
00024668 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c8fc l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c904 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c90c l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c914 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c91c l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c924 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c92c l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c934 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c93c l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c944 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c94c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c954 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00024674 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024680 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002468c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c95c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c964 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c96c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c974 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c97c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00024698 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000246a8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c984 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c98c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000246b4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000246c4 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000246d4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000246e4 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000246f4 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00024704 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00024714 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00024724 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00024734 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c990 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00024744 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c998 l     O .rwdata	00000005 _ZL13pstrUsageBump
00024754 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024760 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c9a0 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0002476c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00024778 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c9a8 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00024784 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00024794 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000247a0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000247ac l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000247b8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000247cc l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000247dc l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000247ec l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000247f8 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00024804 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0002481c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00024830 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00024848 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0002485c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00024868 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00024874 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c9b0 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c9b8 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c9c0 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c9c4 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c9cc l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c9d0 l     O .rwdata	00000005 _ZL13pstrUsageMute
00024880 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0002488c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0002489c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c9d8 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000248ac l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000248bc l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c9e0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c9e8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000248c8 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000248dc l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c9f0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c9f4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000248e8 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000248fc l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c9f8 l     O .rwdata	00000005 _ZL13pstrUsageRing
00024908 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00024914 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002ca00 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002ca08 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002ca10 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002ca18 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00024920 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002ca20 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002ca28 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0002492c l     O .rodata	00000009 _ZL17pstrUsageCoverage
00024938 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00024944 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024950 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002ca2c l     O .rwdata	00000005 _ZL19pstrUsageConference
0002495c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002ca34 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002ca3c l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002ca44 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00024968 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002ca4c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002ca54 l     O .rwdata	00000006 _ZL14pstrUsageReady
00024974 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024980 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002ca5c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002ca64 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002ca68 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002ca6c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002ca74 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0002498c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002ca7c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002ca84 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002ca8c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002ca90 l     O .rwdata	00000006 _ZL14pstrUsageError
00024998 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000249a8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000249bc l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002ca98 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000249d4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000249e0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000249f0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002caa0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00024a00 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00024a10 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00024a24 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00024a38 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00024a4c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024a60 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002caa8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024a70 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00024a7c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002cab0 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00024a88 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00024a94 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002cab8 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00024aa4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00024ab0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002cac0 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002cac8 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00024abc l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00024ac8 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002cad0 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002cad8 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002cae0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002cae8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00024ad4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002caf0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002caf8 l     O .rwdata	00000005 _ZL13pstrUsagePark
00024ae0 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00024aec l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002cb00 l     O .rwdata	00000005 _ZL13pstrUsageLine
00024af8 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024b04 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024b10 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00024b1c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024b28 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002cb08 l     O .rwdata	00000005 _ZL13pstrUsageSend
00024b34 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024b40 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00024b4c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024b58 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024b64 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024b70 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002cb10 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024b80 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00024b90 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00024ba4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00024bb8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00024bcc l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00024be0 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00024bf0 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024c00 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024c14 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024c24 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024c34 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024c44 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024c50 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00024c5c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024c68 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002cb14 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002cb1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002cb20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002cb24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002cb28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002cb2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002cb30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002cb34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002cb38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002cb3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002cb40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002cb44 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002cb48 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002cb4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002cb50 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002cb54 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002cb58 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00024c7c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00024c8c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00024c98 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00024ca4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002cb5c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002cb60 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002cb68 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002cb70 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002cb78 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00024cb0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00024cbc l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002cb80 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00024cc8 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002cb88 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00024cd4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002cb90 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00024ce0 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00024cec l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00024cf8 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00024d04 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00024d10 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00024d20 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00024d30 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00024d3c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00024d48 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002cb98 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00024d58 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00024d68 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002cba0 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002cba8 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00024d74 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00024d80 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00024d8c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00024d98 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00024da8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002cbac l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002cbb4 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00024db4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00024dc4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00024dd0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00024ddc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00024de8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00024df4 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00024e00 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00024e0c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00024e1c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00024e28 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00024e34 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00024e40 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002cbbc l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002cbc4 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00024e50 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00024e60 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00024e6c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00024e78 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00024e88 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00024e98 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002cbcc l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002cbd4 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00024ea8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002cbdc l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002cbe4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002cbec l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002cbf4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002cbfc l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00024eb4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00024ec0 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002cc04 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002cc0c l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00024ecc l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00024ed8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00024ee4 l     O .rodata	00000009 _ZL17pstrUsageTracking
00024ef0 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00024efc l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002cc14 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00024f08 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002cc1c l     O .rwdata	00000005 _ZL13pstrUsageMark
00024f14 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00024f20 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00024f2c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00024f38 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00024f48 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00024f5c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00024f6c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00024f7c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00024f88 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00024f94 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00024fa0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00024fac l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002cc24 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002cc28 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002cc30 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002cc38 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00024fb8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00024fc4 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002cc40 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002cc48 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002cc4c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002cc54 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002cc5c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00024fd0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00024fdc l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00024fe8 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00024ff4 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002cc64 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00025000 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002500c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00025018 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00025024 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00025034 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00025044 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025050 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002505c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00025068 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002cc6c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002cc74 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00025074 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025080 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002cc7c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002508c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002509c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000250ac l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000250b8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000250c4 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000250d0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002cc84 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002cc8c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000250dc l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000250e8 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000250f4 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00025100 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002cc94 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00025110 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002511c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002cc9c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002cca4 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002ccac l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002512c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00025138 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00025144 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025150 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002515c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002516c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025180 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002518c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000251a0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000251b0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000251bc l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000251cc l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000251dc l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000251ec l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000251f8 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00025208 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00025214 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00025224 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00025234 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00025244 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00025254 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00025268 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002ccb4 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00025278 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002528c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000252a0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000252b0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000252c0 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000252d0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000252dc l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000252e8 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000252f4 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00025300 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002530c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002531c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00025334 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00025340 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002534c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00025358 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00025364 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00025370 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002537c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00025390 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002ccbc l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002539c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002ccc4 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000253a8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000253b4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000253c4 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000253d0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000253e0 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000253f0 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00025400 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002540c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00025418 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00025424 l     O .rodata	00000009 _ZL16pstrUsageALClock
00025430 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00025440 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002544c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00025458 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00025464 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00025470 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00025484 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00025494 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000254a0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000254b4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000254c0 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000254d0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000254e4 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000254f8 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002550c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002551c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00025534 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00025548 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00025558 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00025568 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002cccc l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002ccd4 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002557c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ccdc l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002cce4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002ccec l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002ccf4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00025588 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002ccfc l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002cd04 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002cd0c l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002cd14 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00025594 l     O .rodata	00000009 _ZL16pstrUsageACPaste
000255a0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002cd1c l     O .rwdata	00000008 _ZL15pstrUsageACFind
000255ac l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000255bc l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002cd24 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002cd2c l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002cd34 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002cd3c l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002cd44 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000255c8 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000255d4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000255e4 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000255f4 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002cd4c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00025600 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002560c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00025618 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002cd54 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00025624 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00025630 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00025640 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002564c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002565c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002566c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00025678 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00025684 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002cd5c l     O .rwdata	00000007 _ZL14pstrUsageACPan
00025694 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000256a0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000256b0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002cd64 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002cd6c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002cd74 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002cd7c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000256c0 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000256cc l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002cd84 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000256d8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000256e4 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000256f0 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000256fc l     O .rodata	0000000a _ZL17pstrUsageACResize
00025708 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00025714 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00025720 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002572c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00025738 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00025744 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025750 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002575c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002576c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002577c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002578c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002579c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000257a8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000257b8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000257c4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000257d4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000257e4 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000257f4 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00025800 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002580c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00025818 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00025824 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002cd8c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002cd94 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00025830 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002cd9c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002cda4 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002583c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002cdac l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00025848 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00025858 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00025864 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00025874 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00025884 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00025894 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002cdb4 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002cdbc l     O .rwdata	00000008 _ZL15pstrUsageACLock
000258a0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002cdc4 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000258ac l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000258b8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000258c8 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000258d4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000258e4 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000258f0 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000258fc l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00025908 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00025914 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00025920 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002592c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002cdcc l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002cdd4 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00025938 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00025944 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002cddc l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00025954 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025960 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002596c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002597c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002598c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00025998 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000259a4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000259b0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002cde4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000259bc l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000259c8 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000259d4 l     O .rodata	00000009 _ZL16pstrUsageACReply
000259e0 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000259f0 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002cdec l     O .rwdata	00000007 _ZL15pstrUsageACSend
000259fc l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002cdf4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002cdfc l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00025a08 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00025a14 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00025a20 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00025a2c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00025a38 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00025a44 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025a50 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00025a5c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025a68 l     O .rodata	0000000a _ZL17pstrUsageACRename
00025a74 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025a80 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00025a8c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00025a98 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00025aa4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002ce04 l     O .rwdata	00000004 _ZL12pstrUsagePen
00025ab0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00025abc l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00025ac8 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00025ad4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00025ae0 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002ce08 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00025af0 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002ce10 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00025afc l     O .rodata	00000009 _ZL17pstrUsageArmature
00025b08 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00025b1c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002ce18 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002ce20 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002ce28 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00025b2c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025b38 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025b44 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ce30 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002ce38 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002ce40 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002ce44 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025b50 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00025b5c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00025b6c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00025b7c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002ce4c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002ce54 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002ce5c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002ce64 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00025b8c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002ce6c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002ce74 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00025b98 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002ce7c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002ce84 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00025ba4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00025bb0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00025bc0 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00025bcc l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00025bdc l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00025be8 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00025bf8 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025c04 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025c14 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025c20 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025c30 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025c40 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00025c4c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025c58 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025c64 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025c70 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00025c7c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025c88 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00025c94 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00025ca4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00025cb4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002ce8c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002ce90 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002ce94 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002ce9c l     O .rwdata	00000005 _ZL16pstrUsageColumns
00025cc0 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00025ccc l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00025cd8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00025ce4 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002cea4 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00025cf0 l     O .rodata	00000009 _ZL17pstrUsageFontData
00025cfc l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00025d08 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00025d14 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00025d24 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00025d34 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00025d44 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00025d50 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00025d5c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00025d68 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00025d74 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00025d80 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00025d8c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00025d98 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00025da4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00025db0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00025dc0 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00025dd0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00025de0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00025dec l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00025df8 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00025e08 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002ceac l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00025e14 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00025e24 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00025e34 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00025e40 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00025e4c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00025e5c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00025e6c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00025e7c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00025e8c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00025e98 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00025ea4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00025eb0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00025ec0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00025ed0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00025ee0 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00025ef0 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002ceb4 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002cebc l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00025f00 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002cec4 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002cecc l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ced4 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002cedc l     O .rwdata	00000006 _ZL14pstrUsagePrint
00025f0c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002cee4 l     O .rwdata	00000005 _ZL13pstrUsageCine
00025f18 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ceec l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002cef4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00025f24 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00025f34 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00025f44 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00025f54 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00025f60 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00025f6c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00025f80 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00025f94 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00025fa8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00025fbc l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00025fcc l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00025fdc l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00025fe8 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00025ff4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00026004 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002cf08 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cf09 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cf0a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cf0b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002cf10 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cf11 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cf12 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cf13 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002cf14 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cf15 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cf16 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cf17 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002625e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002626e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008b30 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002cf20 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002cf21 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002cf22 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002cf23 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002cf24 l     O .rwdata	00000002 _ZL9pstrSpace
0002cf28 l     O .rwdata	00000003 _ZL8pstrCRLF
0002cf2c l     O .rwdata	00000002 _ZL13pstrSingleTab
0002cf30 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002cf34 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002cf38 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00026338 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0002634c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00026358 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00026364 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00026370 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002637c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002638c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002cf40 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002cf48 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002cf50 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002cf58 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00026398 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000263a4 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002cf5c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002cf60 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000263b0 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000263c0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002cf68 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002cf70 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000263d0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002cf78 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000263e0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002cf80 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000263f8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002cf84 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00026404 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00026410 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002cf8c l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002cf94 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0002641c l     O .rodata	00000009 _ZL17pstrUsageJoystick
00026428 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002cf9c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002cfa4 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00026434 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00026444 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002cfac l     O .rwdata	00000002 _ZL10pstrUsageX
0002cfb0 l     O .rwdata	00000002 _ZL10pstrUsageY
0002cfb4 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002cfb8 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002cfbc l     O .rwdata	00000003 _ZL11pstrUsageRy
0002cfc0 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002cfc4 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002cfcc l     O .rwdata	00000005 _ZL13pstrUsageDial
0002cfd4 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00026458 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00026464 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00026470 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002647c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002cfdc l     O .rwdata	00000006 _ZL14pstrUsageStart
0002cfe4 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002cfe8 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002cfec l     O .rwdata	00000003 _ZL11pstrUsageVy
0002cff0 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002cff4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002cffc l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d004 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d00c l     O .rwdata	00000004 _ZL12pstrUsageVno
0002648c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002649c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000264a8 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000264b4 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000264c4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000264d0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000264dc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000264f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00026500 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00026510 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00026520 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00026530 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00026540 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00026550 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00026560 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0002656c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002657c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00026590 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000265a4 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000265b0 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000265bc l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000265c8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000265d4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000265e0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000265ec l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000265f8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00026604 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00026610 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0002661c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00026628 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00026638 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00026644 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00026654 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00026664 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00026674 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00026684 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00026694 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000266ac l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000266c4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000266dc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000266ec l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000266fc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0002670c l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0002671c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0002672c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0002673c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0002674c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0002675c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0002676c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002677c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00026794 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000267a4 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000267b8 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000267c8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000267d4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000267e0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000267ec l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d010 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000267f8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00026808 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0002681c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00026830 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00026840 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00026850 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0002685c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00026870 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002687c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d018 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002688c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00026898 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000268a4 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000268b4 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000268c4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d020 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000268d0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000268dc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000268e8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d028 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d030 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d038 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d040 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000268f4 l     O .rodata	00000009 _ZL17pstrUsageSteering
00026900 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0002690c l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00026918 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d048 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00026924 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00026934 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00026940 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0002694c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d050 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00026958 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d058 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d060 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00026964 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00026970 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0002697c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00026988 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d068 l     O .rwdata	00000005 _ZL13pstrUsageVest
00026994 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000269a0 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000269ac l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000269bc l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000269cc l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000269d8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000269e4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d070 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d074 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d07c l     O .rwdata	00000005 _ZL13pstrUsageRate
000269f0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000269fc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00026a0c l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00026a1c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00026a2c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00026a38 l     O .rodata	0000000b _ZL18pstrUsageStickType
00026a44 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d084 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d08c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d094 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d09c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d0a4 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d0ac l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d0b4 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d0bc l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d0c4 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d0cc l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d0d4 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d0dc l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00026a50 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00026a5c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026a68 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d0e4 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d0ec l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d0f4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d0fc l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d104 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00026a74 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00026a84 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d10c l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d114 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00026a90 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00026aa0 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00026ab0 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00026ac0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00026ad0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00026ae0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00026af0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00026b00 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00026b10 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d118 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00026b20 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d120 l     O .rwdata	00000005 _ZL13pstrUsageBump
00026b30 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00026b3c l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d128 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026b48 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026b54 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d130 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00026b60 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00026b70 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00026b7c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026b88 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026b94 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00026ba8 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00026bb8 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00026bc8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00026bd4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00026be0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00026bf8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026c0c l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026c24 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026c38 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026c44 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00026c50 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d138 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d140 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d148 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d14c l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d154 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d158 l     O .rwdata	00000005 _ZL13pstrUsageMute
00026c5c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026c68 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026c78 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d160 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026c88 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026c98 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d168 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d170 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00026ca4 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00026cb8 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d178 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d17c l     O .rwdata	00000004 _ZL12pstrUsageCLV
00026cc4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00026cd8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d180 l     O .rwdata	00000005 _ZL13pstrUsageRing
00026ce4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00026cf0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d188 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d190 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d198 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d1a0 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00026cfc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d1a8 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d1b0 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00026d08 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00026d14 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00026d20 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00026d2c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d1b4 l     O .rwdata	00000005 _ZL19pstrUsageConference
00026d38 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d1bc l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d1c4 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d1cc l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00026d44 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d1d4 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d1dc l     O .rwdata	00000006 _ZL14pstrUsageReady
00026d50 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00026d5c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d1e4 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d1ec l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d1f0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d1f4 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d1fc l     O .rwdata	00000007 _ZL15pstrUsageRewind
00026d68 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d204 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d20c l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d214 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d218 l     O .rwdata	00000006 _ZL14pstrUsageError
00026d74 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00026d84 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00026d98 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d220 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00026db0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00026dbc l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00026dcc l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d228 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00026ddc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00026dec l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00026e00 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00026e14 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00026e28 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00026e3c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d230 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00026e4c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00026e58 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d238 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00026e64 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00026e70 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d240 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00026e80 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00026e8c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d248 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d250 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00026e98 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00026ea4 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d258 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d260 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d268 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d270 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00026eb0 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d278 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d280 l     O .rwdata	00000005 _ZL13pstrUsagePark
00026ebc l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00026ec8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d288 l     O .rwdata	00000005 _ZL13pstrUsageLine
00026ed4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00026ee0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00026eec l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00026ef8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00026f04 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d290 l     O .rwdata	00000005 _ZL13pstrUsageSend
00026f10 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00026f1c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00026f28 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00026f34 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00026f40 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00026f4c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d298 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00026f5c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00026f6c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00026f80 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00026f94 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00026fa8 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00026fbc l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00026fcc l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00026fdc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00026ff0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027000 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027010 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027020 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0002702c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027038 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027044 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d29c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d2a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d2a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d2ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d2b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d2b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d2b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d2bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d2c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d2c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d2c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d2cc l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d2d0 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d2d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d2d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d2dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d2e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027058 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027068 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027074 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027080 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d2e4 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d2e8 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d2f0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d2f8 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d300 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002708c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027098 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d308 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
000270a4 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d310 l     O .rwdata	00000005 _ZL13pstrUsageMenu
000270b0 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d318 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000270bc l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000270c8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
000270d4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
000270e0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
000270ec l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
000270fc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0002710c l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027118 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00027124 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d320 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00027134 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00027144 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d328 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d330 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027150 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002715c l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027168 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027174 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00027184 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d334 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d33c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00027190 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000271a0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000271ac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000271b8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000271c4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000271d0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000271dc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
000271e8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
000271f8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00027204 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027210 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002721c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d344 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d34c l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002722c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002723c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00027248 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00027254 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00027264 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00027274 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d354 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d35c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00027284 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d364 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d36c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d374 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d37c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d384 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00027290 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002729c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d38c l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d394 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000272a8 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000272b4 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000272c0 l     O .rodata	00000009 _ZL17pstrUsageTracking
000272cc l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000272d8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d39c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000272e4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d3a4 l     O .rwdata	00000005 _ZL13pstrUsageMark
000272f0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000272fc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00027308 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00027314 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00027324 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00027338 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00027348 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00027358 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00027364 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00027370 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002737c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00027388 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d3ac l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d3b0 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d3b8 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d3c0 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00027394 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000273a0 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d3c8 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d3d0 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d3d4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d3dc l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d3e4 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000273ac l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000273b8 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000273c4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000273d0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d3ec l     O .rwdata	00000005 _ZL13pstrUsageSlow
000273dc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000273e8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000273f4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00027400 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00027410 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00027420 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002742c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00027438 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00027444 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d3f4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d3fc l     O .rwdata	00000007 _ZL15pstrUsageMotion
00027450 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002745c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d404 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00027468 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00027478 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00027488 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00027494 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000274a0 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000274ac l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d40c l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d414 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000274b8 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000274c4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000274d0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000274dc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d41c l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000274ec l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000274f8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d424 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d42c l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d434 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00027508 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00027514 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00027520 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002752c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00027538 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00027548 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002755c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00027568 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002757c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002758c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00027598 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000275a8 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000275b8 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000275c8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000275d4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000275e4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000275f0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00027600 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00027610 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00027620 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00027630 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00027644 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d43c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00027654 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00027668 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002767c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002768c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002769c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000276ac l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000276b8 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000276c4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000276d0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000276dc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000276e8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000276f8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00027710 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002771c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00027728 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00027734 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00027740 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002774c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00027758 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002776c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d444 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00027778 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d44c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00027784 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00027790 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000277a0 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000277ac l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000277bc l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000277cc l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000277dc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000277e8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000277f4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00027800 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002780c l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002781c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00027828 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00027834 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00027840 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002784c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00027860 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00027870 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002787c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00027890 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002789c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000278ac l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000278c0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000278d4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000278e8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000278f8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00027910 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00027924 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00027934 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00027944 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d454 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d45c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00027958 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d464 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d46c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d474 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d47c l     O .rwdata	00000008 _ZL15pstrUsageACSave
00027964 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d484 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d48c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d494 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d49c l     O .rwdata	00000007 _ZL14pstrUsageACCut
00027970 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002797c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d4a4 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00027988 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00027998 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d4ac l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d4b4 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d4bc l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d4c4 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d4cc l     O .rwdata	00000008 _ZL15pstrUsageACStop
000279a4 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000279b0 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000279c0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000279d0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d4d4 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000279dc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000279e8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000279f4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d4dc l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00027a00 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00027a0c l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00027a1c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00027a28 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00027a38 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00027a48 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00027a54 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00027a60 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d4e4 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00027a70 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00027a7c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00027a8c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d4ec l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d4f4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d4fc l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d504 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00027a9c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00027aa8 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d50c l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00027ab4 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00027ac0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00027acc l     O .rodata	0000000a _ZL17pstrUsageACRotate
00027ad8 l     O .rodata	0000000a _ZL17pstrUsageACResize
00027ae4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00027af0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00027afc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027b08 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027b14 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00027b20 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00027b2c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027b38 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027b48 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027b58 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027b68 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027b78 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027b84 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027b94 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00027ba0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00027bb0 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00027bc0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00027bd0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00027bdc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00027be8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00027bf4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00027c00 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d514 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d51c l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027c0c l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d524 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d52c l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027c18 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d534 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027c24 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027c34 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00027c40 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00027c50 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00027c60 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00027c70 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d53c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d544 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027c7c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d54c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027c88 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027c94 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00027ca4 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00027cb0 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00027cc0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00027ccc l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00027cd8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00027ce4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00027cf0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00027cfc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00027d08 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d554 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d55c l     O .rwdata	00000008 _ZL15pstrUsageACSort
00027d14 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00027d20 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d564 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00027d30 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00027d3c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00027d48 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00027d58 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00027d68 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00027d74 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00027d80 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00027d8c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d56c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00027d98 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00027da4 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00027db0 l     O .rodata	00000009 _ZL16pstrUsageACReply
00027dbc l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00027dcc l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d574 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00027dd8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d57c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d584 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00027de4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00027df0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00027dfc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00027e08 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00027e14 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00027e20 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00027e2c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00027e38 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00027e44 l     O .rodata	0000000a _ZL17pstrUsageACRename
00027e50 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00027e5c l     O .rodata	00000009 _ZL16pstrUsageACSplit
00027e68 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00027e74 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00027e80 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d58c l     O .rwdata	00000004 _ZL12pstrUsagePen
00027e8c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00027e98 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00027ea4 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00027eb0 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00027ebc l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d590 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00027ecc l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d598 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00027ed8 l     O .rodata	00000009 _ZL17pstrUsageArmature
00027ee4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00027ef8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d5a0 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d5a8 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d5b0 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00027f08 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00027f14 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00027f20 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d5b8 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d5c0 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d5c8 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d5cc l     O .rwdata	00000005 _ZL16pstrUsageQuality
00027f2c l     O .rodata	0000000b _ZL18pstrUsageDataValid
00027f38 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00027f48 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00027f58 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d5d4 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d5dc l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d5e4 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d5ec l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00027f68 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d5f4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d5fc l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00027f74 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d604 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d60c l     O .rwdata	00000007 _ZL15pstrUsageEraser
00027f80 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00027f8c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00027f9c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00027fa8 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00027fb8 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00027fc4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00027fd4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00027fe0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00027ff0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00027ffc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002800c l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002801c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028028 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028034 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028040 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002804c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028058 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028064 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028070 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028080 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028090 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d614 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d618 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d61c l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d624 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002809c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
000280a8 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
000280b4 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
000280c0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d62c l     O .rwdata	00000008 _ZL19pstrUsageFontReport
000280cc l     O .rodata	00000009 _ZL17pstrUsageFontData
000280d8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
000280e4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
000280f0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028100 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028110 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028120 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002812c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028138 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00028144 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028150 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002815c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028168 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028174 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028180 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002818c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002819c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000281ac l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000281bc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000281c8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000281d4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000281e4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d634 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
000281f0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028200 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028210 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002821c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00028228 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00028238 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00028248 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00028258 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00028268 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00028274 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00028280 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002828c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002829c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000282ac l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000282bc l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000282cc l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d63c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d644 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000282dc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d64c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d654 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d65c l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d664 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000282e8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d66c l     O .rwdata	00000005 _ZL13pstrUsageCine
000282f4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d674 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d67c l     O .rwdata	00000006 _ZL14pstrUsageDepth
00028300 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00028310 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00028320 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00028330 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002833c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00028348 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002835c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00028370 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00028384 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00028398 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000283a8 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000283b8 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000283c4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000283d0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000283e0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d682 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d683 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d684 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d685 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d688 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d689 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d68a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d68b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d68c l     O .rwdata	00000002 _ZL9pstrSpace
0002d690 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d694 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d698 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d69c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d6a0 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000284c0 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000284d4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000284e0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000284ec l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000284f8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00028504 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00028514 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d6a8 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d6b0 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d6b8 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d6c0 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00028520 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0002852c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d6c4 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d6c8 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00028538 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00028548 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d6d0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d6d8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00028558 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d6e0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00028568 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d6e8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00028580 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d6ec l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002858c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00028598 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d6f4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d6fc l     O .rwdata	00000006 _ZL14pstrUsageMouse
000285a4 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000285b0 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d704 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d70c l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000285bc l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000285cc l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d714 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d718 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d71c l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d720 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d724 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d728 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d72c l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d734 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d73c l     O .rwdata	00000006 _ZL14pstrUsageWheel
000285e0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000285ec l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000285f8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00028604 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d744 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d74c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d750 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d754 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d758 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d75c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d764 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d76c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d774 l     O .rwdata	00000004 _ZL12pstrUsageVno
00028614 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00028624 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00028630 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0002863c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002864c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00028658 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00028664 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00028678 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00028688 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00028698 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000286a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000286b8 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000286c8 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000286d8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000286e8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000286f4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00028704 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00028718 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0002872c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00028738 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00028744 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00028750 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0002875c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00028768 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00028774 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00028780 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002878c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00028798 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000287a4 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000287b0 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000287c0 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000287cc l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000287dc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000287ec l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000287fc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002880c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0002881c l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00028834 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002884c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00028864 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00028874 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00028884 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00028894 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000288a4 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000288b4 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000288c4 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000288d4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000288e4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000288f4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00028904 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0002891c l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0002892c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00028940 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00028950 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0002895c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00028968 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00028974 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d778 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00028980 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00028990 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000289a4 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000289b8 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000289c8 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000289d8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000289e4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000289f8 l     O .rodata	00000009 _ZL17pstrUsageElevator
00028a04 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d780 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00028a14 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00028a20 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00028a2c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00028a3c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00028a4c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d788 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028a58 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00028a64 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00028a70 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d790 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d798 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d7a0 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d7a8 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00028a7c l     O .rodata	00000009 _ZL17pstrUsageSteering
00028a88 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00028a94 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00028aa0 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d7b0 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00028aac l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00028abc l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00028ac8 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00028ad4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d7b8 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00028ae0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d7c0 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d7c8 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00028aec l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00028af8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028b04 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00028b10 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d7d0 l     O .rwdata	00000005 _ZL13pstrUsageVest
00028b1c l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028b28 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028b34 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028b44 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028b54 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00028b60 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00028b6c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d7d8 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d7dc l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d7e4 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028b78 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028b84 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028b94 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00028ba4 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00028bb4 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00028bc0 l     O .rodata	0000000b _ZL18pstrUsageStickType
00028bcc l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d7ec l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d7f4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d7fc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d804 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d80c l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d814 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d81c l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d824 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d82c l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d834 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d83c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d844 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00028bd8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00028be4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00028bf0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d84c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d854 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d85c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d864 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d86c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00028bfc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028c0c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d874 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d87c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028c18 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028c28 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028c38 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028c48 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028c58 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028c68 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028c78 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028c88 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028c98 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d880 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00028ca8 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d888 l     O .rwdata	00000005 _ZL13pstrUsageBump
00028cb8 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00028cc4 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d890 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00028cd0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00028cdc l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d898 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00028ce8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00028cf8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00028d04 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00028d10 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00028d1c l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00028d30 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00028d40 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00028d50 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00028d5c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00028d68 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00028d80 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00028d94 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00028dac l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00028dc0 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00028dcc l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00028dd8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d8a0 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d8a8 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d8b0 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d8b4 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d8bc l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d8c0 l     O .rwdata	00000005 _ZL13pstrUsageMute
00028de4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00028df0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00028e00 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d8c8 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00028e10 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00028e20 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d8d0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d8d8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00028e2c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00028e40 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d8e0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d8e4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00028e4c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00028e60 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d8e8 l     O .rwdata	00000005 _ZL13pstrUsageRing
00028e6c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00028e78 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d8f0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d8f8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d900 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d908 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00028e84 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d910 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d918 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00028e90 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00028e9c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00028ea8 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00028eb4 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d91c l     O .rwdata	00000005 _ZL19pstrUsageConference
00028ec0 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d924 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d92c l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d934 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00028ecc l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d93c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d944 l     O .rwdata	00000006 _ZL14pstrUsageReady
00028ed8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00028ee4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d94c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d954 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d958 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d95c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d964 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00028ef0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d96c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d974 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d97c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d980 l     O .rwdata	00000006 _ZL14pstrUsageError
00028efc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00028f0c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00028f20 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d988 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00028f38 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00028f44 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00028f54 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d990 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00028f64 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00028f74 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00028f88 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00028f9c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00028fb0 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00028fc4 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d998 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00028fd4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00028fe0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d9a0 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00028fec l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00028ff8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d9a8 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00029008 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00029014 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d9b0 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d9b8 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00029020 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0002902c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d9c0 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d9c8 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d9d0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d9d8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00029038 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d9e0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d9e8 l     O .rwdata	00000005 _ZL13pstrUsagePark
00029044 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029050 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d9f0 l     O .rwdata	00000005 _ZL13pstrUsageLine
0002905c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00029068 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00029074 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029080 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0002908c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d9f8 l     O .rwdata	00000005 _ZL13pstrUsageSend
00029098 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
000290a4 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
000290b0 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
000290bc l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
000290c8 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
000290d4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002da00 l     O .rwdata	00000004 _ZL16pstrUsageMessage
000290e4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
000290f4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029108 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0002911c l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00029130 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00029144 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00029154 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00029164 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00029178 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00029188 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00029198 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
000291a8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
000291b4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
000291c0 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
000291cc l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002da04 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002da0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002da10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002da14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002da18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002da1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002da20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002da24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002da28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002da2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002da30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002da34 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002da38 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002da3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002da40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002da44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002da48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
000291e0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
000291f0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
000291fc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029208 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002da4c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002da50 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002da58 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002da60 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002da68 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00029214 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00029220 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002da70 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0002922c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002da78 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00029238 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002da80 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00029244 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00029250 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002925c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00029268 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00029274 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00029284 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00029294 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000292a0 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000292ac l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002da88 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000292bc l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000292cc l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002da90 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002da98 l     O .rwdata	00000004 _ZL18pstrUsageSelection
000292d8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
000292e4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
000292f0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
000292fc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002930c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002da9c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002daa4 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00029318 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00029328 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00029334 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00029340 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002934c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00029358 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00029364 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00029370 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00029380 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002938c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00029398 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000293a4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002daac l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002dab4 l     O .rwdata	00000005 _ZL13pstrUsageHelp
000293b4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000293c4 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000293d0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
000293dc l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
000293ec l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000293fc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002dabc l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002dac4 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002940c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002dacc l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002dad4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002dadc l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002dae4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002daec l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00029418 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00029424 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002daf4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002dafc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00029430 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002943c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00029448 l     O .rodata	00000009 _ZL17pstrUsageTracking
00029454 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00029460 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002db04 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002946c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002db0c l     O .rwdata	00000005 _ZL13pstrUsageMark
00029478 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00029484 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00029490 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002949c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000294ac l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000294c0 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000294d0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000294e0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000294ec l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000294f8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00029504 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00029510 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002db14 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002db18 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002db20 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002db28 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002951c l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00029528 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002db30 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002db38 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002db3c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002db44 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002db4c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00029534 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00029540 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002954c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00029558 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002db54 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00029564 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00029570 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002957c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00029588 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00029598 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000295a8 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000295b4 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000295c0 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000295cc l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002db5c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002db64 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000295d8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000295e4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002db6c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000295f0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00029600 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00029610 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002961c l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00029628 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00029634 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002db74 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002db7c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00029640 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002964c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00029658 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00029664 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002db84 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00029674 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00029680 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002db8c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002db94 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002db9c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00029690 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002969c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000296a8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000296b4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000296c0 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000296d0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000296e4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000296f0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00029704 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00029714 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00029720 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00029730 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00029740 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00029750 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002975c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002976c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00029778 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00029788 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00029798 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000297a8 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000297b8 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000297cc l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002dba4 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000297dc l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000297f0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00029804 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00029814 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00029824 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00029834 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00029840 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002984c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00029858 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00029864 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00029870 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00029880 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00029898 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000298a4 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000298b0 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000298bc l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000298c8 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000298d4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000298e0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000298f4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002dbac l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00029900 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002dbb4 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002990c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00029918 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00029928 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00029934 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00029944 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00029954 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00029964 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00029970 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002997c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00029988 l     O .rodata	00000009 _ZL16pstrUsageALClock
00029994 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000299a4 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000299b0 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000299bc l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000299c8 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000299d4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000299e8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000299f8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00029a04 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00029a18 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00029a24 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00029a34 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00029a48 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00029a5c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00029a70 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00029a80 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00029a98 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00029aac l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00029abc l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00029acc l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002dbbc l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002dbc4 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00029ae0 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002dbcc l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dbd4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002dbdc l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002dbe4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00029aec l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002dbec l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002dbf4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002dbfc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002dc04 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00029af8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029b04 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dc0c l     O .rwdata	00000008 _ZL15pstrUsageACFind
00029b10 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00029b20 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dc14 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002dc1c l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002dc24 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002dc2c l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002dc34 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00029b2c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029b38 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029b48 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029b58 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002dc3c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029b64 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00029b70 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00029b7c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002dc44 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029b88 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029b94 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00029ba4 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00029bb0 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00029bc0 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00029bd0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00029bdc l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00029be8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002dc4c l     O .rwdata	00000007 _ZL14pstrUsageACPan
00029bf8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029c04 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029c14 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002dc54 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002dc5c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002dc64 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002dc6c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029c24 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00029c30 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002dc74 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029c3c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029c48 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029c54 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00029c60 l     O .rodata	0000000a _ZL17pstrUsageACResize
00029c6c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029c78 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029c84 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00029c90 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029c9c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00029ca8 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00029cb4 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00029cc0 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00029cd0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00029ce0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00029cf0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00029d00 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00029d0c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00029d1c l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00029d28 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00029d38 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00029d48 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00029d58 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00029d64 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00029d70 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00029d7c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00029d88 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002dc7c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002dc84 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00029d94 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002dc8c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002dc94 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00029da0 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002dc9c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00029dac l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00029dbc l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00029dc8 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00029dd8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00029de8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00029df8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002dca4 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002dcac l     O .rwdata	00000008 _ZL15pstrUsageACLock
00029e04 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002dcb4 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00029e10 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00029e1c l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00029e2c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00029e38 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00029e48 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00029e54 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00029e60 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00029e6c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00029e78 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00029e84 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00029e90 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dcbc l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dcc4 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00029e9c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00029ea8 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dccc l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00029eb8 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00029ec4 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00029ed0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00029ee0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00029ef0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00029efc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00029f08 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00029f14 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dcd4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00029f20 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00029f2c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00029f38 l     O .rodata	00000009 _ZL16pstrUsageACReply
00029f44 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00029f54 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dcdc l     O .rwdata	00000007 _ZL15pstrUsageACSend
00029f60 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dce4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dcec l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00029f6c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00029f78 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00029f84 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00029f90 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00029f9c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00029fa8 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00029fb4 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00029fc0 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00029fcc l     O .rodata	0000000a _ZL17pstrUsageACRename
00029fd8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00029fe4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00029ff0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00029ffc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002a008 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dcf4 l     O .rwdata	00000004 _ZL12pstrUsagePen
0002a014 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002a020 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002a02c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002a038 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002a044 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dcf8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002a054 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dd00 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002a060 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002a06c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002a080 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dd08 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dd10 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dd18 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002a090 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002a09c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002a0a8 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dd20 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dd28 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dd30 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dd34 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002a0b4 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002a0c0 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002a0d0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002a0e0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dd3c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dd44 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dd4c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dd54 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002a0f0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dd5c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dd64 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002a0fc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dd6c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dd74 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002a108 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002a114 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002a124 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002a130 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002a140 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002a14c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002a15c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002a168 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002a178 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002a184 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002a194 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002a1a4 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002a1b0 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002a1bc l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002a1c8 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002a1d4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002a1e0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002a1ec l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002a1f8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002a208 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002a218 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dd7c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dd80 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dd84 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dd8c l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002a224 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002a230 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002a23c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002a248 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dd94 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002a254 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002a260 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002a26c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002a278 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002a288 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002a298 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002a2a8 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002a2b4 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002a2c0 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002a2cc l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002a2d8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002a2e4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002a2f0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002a2fc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002a308 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002a314 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002a324 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002a334 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002a344 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002a350 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002a35c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002a36c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dd9c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002a378 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002a388 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002a398 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002a3a4 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002a3b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002a3c0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002a3d0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002a3e0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002a3f0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002a3fc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002a408 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002a414 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002a424 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002a434 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002a444 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002a454 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dda4 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ddac l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002a464 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ddb4 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ddbc l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ddc4 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ddcc l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002a470 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ddd4 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002a47c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dddc l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dde4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002a488 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002a498 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002a4a8 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002a4b8 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002a4c4 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002a4d0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002a4e4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002a4f8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002a50c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002a520 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002a530 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002a540 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002a54c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002a558 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002a568 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002a576 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002a586 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002ddec l     O .rwdata	00000004 _ZL5synth
0000a370 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a3d8 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b60c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b6b0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b8bc l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b910 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b99c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000bad0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000bb58 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bd84 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c65c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c944 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000311b8 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c9fc l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000cbac l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00031054 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000de5c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0003105c l     O .bss	00000004 fc_static
0000df74 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000e034 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002ac7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aa5a l     O .rodata	00000010 zeroes.4389
0002aa6a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aa7a l     O .rodata	00000010 zeroes.4404
00013b94 l     F .text	000000bc __sbprintf
0002aa8a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00013da4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000158fc l     F .text	00000008 __fp_unlock
00015910 l     F .text	0000019c __sinit.part.1
00015aac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002b4c8 l     O .rwdata	00000020 lc_ctype_charset
0002b4a8 l     O .rwdata	00000020 lc_message_charset
0002b4e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002aab8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002abdc l     O .rodata	00000010 zeroes.4333
0002abec l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00019aac l     F .text	000000fc __sprint_r.part.0
0002abfc l     O .rodata	00000010 zeroes.4349
0001b0e8 l     F .text	000000bc __sbprintf
0002ac0c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001eef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001f004 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001f064 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001f178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001f260 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001f3cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001f4b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002de48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001f908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001f9ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fb28 l     F .text	00000034 alt_dev_reg
0002b6c8 l     O .rwdata	00000038 i2c_0
0002b700 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001fc08 l     F .text	00000110 optional_irq_callback
0001fd68 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021a44 l     F .text	0000020c altera_avalon_jtag_uart_irq
00021c50 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022484 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002281c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022d0c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022e6c l     F .text	0000003c alt_get_errno
00022ea8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00031094 g     O .bss	00000004 alt_instruction_exception_handler
0000cb04 g     F .text	00000028 __cxa_free_exception
00023c98  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ef5c g     F .text	00000018 putchar
0000b160 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017b48 g     F .text	00000074 _mprec_log10
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b5ac g     F .text	00000018 _ZSt10unexpectedv
00017c34 g     F .text	0000008c __any_on
0001b7f4 g     F .text	00000054 _isatty_r
0002aac4 g     O .rodata	00000028 __mprec_tinytens
0001f5d0 g     F .text	0000007c alt_main
00006910 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ef74 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
000311f0 g     O .bss	00000100 alt_irq
0000cca0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0000933c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001b848 g     F .text	00000060 _lseek_r
0000e0f0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002de60 g       *ABS*	00000000 __flash_rwdata_start
000062b0 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001d92c g     F .text	00000088 .hidden __eqdf2
0000443c  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000024c8 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c730 g     F .text	00000084 __cxa_rethrow
0000e07c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b5e8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006b54 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000e0e0 g     F .text	00000010 .hidden _Unwind_GetIP
000312f0 g       *ABS*	00000000 __alt_heap_start
00008c7c  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000f340 g     F .text	0000005c _kill_r
00006ec0 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000ef18 g     F .text	0000003c printf
00023cbc  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001b908 g     F .text	0000009c _wcrtomb_r
0000f108 g     F .text	00000084 _signal_r
00006038  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000184d8 g     F .text	0000005c __sseek
00015c5c g     F .text	00000010 __sinit
0001b1a4 g     F .text	00000140 __swbuf_r
000099b0 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000cb80 g     F .text	0000002c __cxa_free_dependent_exception
0000a4b4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00016730 g     F .text	0000007c _setlocale_r
0002a6a0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00015ab4 g     F .text	00000078 __sfmoreglue
00020460 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f670 g     F .text	00000024 __malloc_unlock
000051b0 g     F .text	00000080 _Z8set_notehh
0000cca0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000085cc g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000aee8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008d64  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	0000030c _ZN3USB11ConfiguringEhhb
0000c924 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000ceec g     F .text	00000440 .hidden __divsf3
00021678 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009d84 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b1dc g     F .text	00000020 __cxa_deleted_virtual
000201e4 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002938  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008e28 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
000097c0 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00016aac g     F .text	0000015c memmove
00005d54  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cc78 g     F .text	00000004 _ZNSt9exceptionD2Ev
00015c44 g     F .text	00000018 _cleanup
0000a18c g     F .text	00000088 _Z7controlv
00020ec8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00016c08 g     F .text	000000a8 _Balloc
0000dcfc g     F .text	00000070 .hidden __fixsfsi
00003a3c g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001d9b4 g     F .text	000000dc .hidden __gtdf2
00003b00 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002a8d4  w    O .rodata	00000014 _ZTVSt13bad_exception
000234fc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001f944 g     F .text	00000078 times
00008ce4  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000e12c g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002c77c  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008550 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004908  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001b798 g     F .text	0000005c _fstat_r
0000948c g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0003106c g     O .bss	00000004 errno
00005a94 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00018454 g     F .text	00000008 __seofread
00009038 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0001870c g     F .text	000013a0 ___svfiprintf_internal_r
0000e308 g     F .text	00000074 .hidden _Unwind_Backtrace
00031080 g     O .bss	00000004 alt_argv
000030c8 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00034760 g       *ABS*	00000000 _gp
0001f9bc g     F .text	00000030 usleep
000216bc g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000d818 g     F .text	000004e4 .hidden __subsf3
00007edc g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002cf18  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001f158 g     F .text	00000020 getpid
0000c42c g     F .text	00000230 __cxa_call_unexpected
0000c7b4 g     F .text	00000008 __cxa_get_exception_ptr
00020374 g     F .text	00000044 alt_avalon_i2c_is_busy
0002b548 g     O .rwdata	00000180 alt_fd_list
000091e8 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023c08  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006ec0 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004214 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ef54 g     F .text	00000008 _putchar_r
0000e21c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00020118 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000e0ac g     F .text	00000018 .hidden _Unwind_GetCFA
0000b5c4 g     F .text	00000014 _ZSt13set_terminatePFvvE
000229bc g     F .text	00000090 alt_find_dev
00023bfc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00011894 g     F .text	00000008 _times_r
0000ec78 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005e1c  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000cb2c g     F .text	00000054 __cxa_allocate_dependent_exception
00015904 g     F .text	0000000c _cleanup_r
0000b274 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001ed6c g     F .text	000000dc .hidden __floatsidf
00023cb0  w    O .rodata	0000000c _ZTV13USBReadParser
00022df0 g     F .text	0000007c alt_io_redirect
0001da90 g     F .text	000000f4 .hidden __ltdf2
0000475c  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023b28 g       *ABS*	00000000 __DTOR_END__
0000b28c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020d08 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000f034 g     F .text	00000014 puts
0002a728  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000236ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007f64 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
00009270 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0001838c g     F .text	00000074 __fpclassifyd
00009f0c g     F .text	00000280 _Z9MIDI_pollv
00017aa4 g     F .text	000000a4 __ratio
0001b0cc g     F .text	0000001c __vfiprintf_internal
000079e0 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00021e48 g     F .text	0000021c altera_avalon_jtag_uart_read
0000e444 g     F .text	00000014 malloc
0000eee8 g     F .text	00000030 _printf_r
0000ce08 g     F .text	00000064 .hidden __udivsi3
0001f1b4 g     F .text	000000ac isatty
0000f18c g     F .text	000000bc _raise_r
0000942c g     F .text	0000003c _ZN8MAX3421eC2Ev
0002ab14 g     O .rodata	000000c8 __mprec_tens
00006bc0 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
000167ac g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004714  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001ff84 g     F .text	00000098 alt_avalon_i2c_enable
00031068 g     O .bss	00000004 __malloc_top_pad
0000f39c g     F .text	00000004 _getpid_r
000215ac g     F .text	00000068 alt_avalon_i2c_int_disable
0003104c g     O .bss	00000001 usb_task_state
0002de28 g     O .rwdata	00000004 __mb_cur_max
000167dc g     F .text	0000000c _localeconv_r
0000a778 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003a6c g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007040 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
0001703c g     F .text	0000003c __i2b
000160e0 g     F .text	000004c8 __sfvwrite_r
0000b40c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000f248 g     F .text	000000a8 __sigtramp_r
00008298 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
000029f0  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000f048 g     F .text	00000054 _sbrk_r
0002a770  w    O .rodata	00000020 _ZTVSt9type_info
0000480c  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
000090d0 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001b8a8 g     F .text	00000060 _read_r
0000cc80 g     F .text	0000000c _ZNKSt9exception4whatEv
00005230 g     F .text	0000004c _Z8set_adsrhm
0002de40 g     O .rwdata	00000004 alt_max_fd
00006108 g     F .text	00000050 _Z9E_Notifycci
000083d8 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001b48c g     F .text	000000f0 _fclose_r
000158cc g     F .text	00000030 fflush
00009e1c g     F .text	00000078 _Z6onInitv
00031064 g     O .bss	00000004 __malloc_max_sbrked_mem
00009738 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
000210d4 g     F .text	00000210 alt_avalon_i2c_master_receive
000262f4  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c6b0 g     F .text	000008ac .hidden __adddf3
0002a6d4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004838  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008b30 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001784c g     F .text	0000010c __b2d
0001c0ec g     F .text	000005c4 .hidden __umoddi3
0001f4f4 g     F .text	000000dc lseek
00005e44  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b2d0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006260 g     F .text	00000028 _Z8E_Notifyhi
0000b1b8 g     F .text	00000004 _ZdlPv
00021614 g     F .text	00000064 alt_avalon_i2c_int_enable
0002de18 g     O .rwdata	00000004 _global_impure_ptr
0000a788 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00017e28 g     F .text	00000564 _realloc_r
000312f0 g       *ABS*	00000000 __bss_end
00022c1c g     F .text	000000f0 alt_iic_isr_register
000233f4 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000e064 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001baf0 g     F .text	000005fc .hidden __udivdi3
000214d4 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b6f4 g     F .text	00000024 _fputwc_r
0002aaec g     O .rodata	00000028 __mprec_bigtens
00016e20 g     F .text	00000104 __s2b
0000e3e0 g     F .text	00000018 abort
0001ee48 g     F .text	000000a8 .hidden __floatunsidf
000260b8  w    O .rodata	00000014 _ZTS17MouseReportParser
0001758c g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008da0  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000032ac g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c870 g     F .text	000000b4 __cxa_end_catch
00009164 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015c7c g     F .text	00000018 __fp_lock_all
00023cf4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00022bd0 g     F .text	0000004c alt_ic_irq_enabled
0000cc7c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002cbc  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005df4  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00023358 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00026280  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001fe04 g     F .text	00000054 alt_avalon_i2c_register_callback
00031088 g     O .bss	00000004 alt_irq_active
0001fe58 g     F .text	000000ec alt_avalon_i2c_init
0000b584 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002b520 g     O .rwdata	00000028 alt_dev_null
0000a7bc g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000606c  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cca8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00002e68  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002790 g     F .text	00000084 _ZN3USB7setConfEhhh
00008c74 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002a7cc  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000227fc g     F .text	00000020 alt_dcache_flush_all
00016f24 g     F .text	00000068 __hi0bits
00026300  w    O .rodata	0000000c _ZTI14MidiDescParser
00009988 g     F .text	00000028 _Z10Vbus_powerb
0002de00  w    O .rwdata	00000008 _ZTISt9exception
0001ecec g     F .text	00000080 .hidden __fixdfsi
000260cc  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a408  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002de60 g       *ABS*	00000000 __ram_rwdata_end
0000b15c g     F .text	00000004 _ZNSt9type_infoD1Ev
0002de38 g     O .rwdata	00000008 alt_dev_list
0000cca8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001fa28 g     F .text	00000100 write
00017cc0 g     F .text	000000a0 _putc_r
00009df8 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00020794 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b170 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004930  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000d32c g     F .text	000000bc .hidden __gtsf2
00021570 g     F .text	0000003c alt_avalon_i2c_int_clear
00008dfc  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00023be8  w    O .rodata	00000014 _ZTV11AddressPool
0002ac7c g       *ABS*	00000000 __ram_rodata_end
0001f0a0 g     F .text	000000b8 fstat
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001f29c g     F .text	00000130 kill
000060e4  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001da90 g     F .text	000000f4 .hidden __ledf2
00023d1c  w    O .rodata	00000020 _ZTI7XBOXONE
0002de4c g     O .rwdata	00000008 alt_avalon_i2c_list
0000469c  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00026012 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00017304 g     F .text	00000140 __pow5mult
00004c84  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
00019bc0 g     F .text	0000150c ___vfiprintf_internal_r
00031078 g     O .bss	00000004 __nlocale_changed
0000ce6c g     F .text	00000058 .hidden __umodsi3
0000b168 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004478  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009e94 g     F .text	00000078 _Z10MIDI_setupv
00002308 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b5d8 g     F .text	00000010 _ZSt13get_terminatev
000312f0 g       *ABS*	00000000 end
00023ca4  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
0000964c g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00006004  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000e2f0 g     F .text	00000018 .hidden _Unwind_DeleteException
00021984 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005dcc  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001ff44 g     F .text	00000040 alt_avalon_i2c_open
00026028 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b33c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a778 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002cf0c g     O .rwdata	00000004 UsbDEBUGlvl
00023b20 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0002091c g     F .text	000000e8 alt_avalon_i2c_master_tx
000224fc g     F .text	0000007c alt_avalon_timer_sc_init
0000e37c g     F .text	00000064 .hidden __clzsi2
0000b1fc g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00022064 g     F .text	00000224 altera_avalon_jtag_uart_write
00015c6c g     F .text	00000004 __sfp_lock_acquire
0002a85c  w    O .rodata	00000012 _ZTSSt13bad_exception
000169c8 g     F .text	000000e4 memchr
0001189c g     F .text	000022dc ___vfprintf_internal_r
0000f3a0 g     F .text	00000058 _sprintf_r
000043dc  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00015dd0 g     F .text	00000310 _free_r
000230f0 g     F .text	0000022c alt_printf
000167b8 g     F .text	00000010 __locale_mb_cur_max
00023968 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00031074 g     O .bss	00000004 __mlocale_changed
0001fd18 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002de20 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003a44 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0003108c g     O .bss	00000004 _alt_tick_rate
0002a760  w    O .rodata	0000000d _ZTSSt9type_info
000212e4 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b1bc g     F .text	00000020 __cxa_pure_virtual
00023bd4  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00023d5c  w    O .rodata	00000010 _ZTS13USBReadParser
00021708 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00017444 g     F .text	00000148 __lshift
00022288 g     F .text	000001fc alt_avalon_spi_command
00031090 g     O .bss	00000004 _alt_nticks
0000f304 g     F .text	00000018 signal
0001f6d0 g     F .text	00000104 read
000055bc g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001fb94 g     F .text	00000074 alt_sys_init
00023c58  w    O .rodata	00000040 _ZTV7XBOXONE
0001853c g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00023850 g     F .text	00000118 __register_exitproc
000026fc g     F .text	00000094 _ZN3USB7setAddrEhhh
00006158 g     F .text	00000084 _Z8E_NotifyPKci
000262bc  w    O .rodata	0000000c _ZTV14MidiDescParser
00008d0c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00002efc  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a4f8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00005fd0  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
000048c8  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00020b40 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00017078 g     F .text	0000028c __multiply
00002654 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002cefa g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00021cf0 g     F .text	00000068 altera_avalon_jtag_uart_close
0000286c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000cec4 g     F .text	00000028 .hidden __mulsi3
0002ac7c g       *ABS*	00000000 __ram_rwdata_start
0000e14c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023b28 g       *ABS*	00000000 __ram_rodata_start
000311c8 g     O .bss	00000028 __malloc_current_mallinfo
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000e260 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00017958 g     F .text	0000014c __d2b
0002a8fc  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000b15c g     F .text	00000004 _ZNSt9type_infoD2Ev
00008cbc  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004534  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002c768  w    O .rwdata	00000008 _ZTI11AddressPool
0000ccac g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a6f4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0002630c  w    O .rodata	00000011 _ZTS14MidiDescParser
0002a700  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00021820 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023628 g     F .text	000000c4 alt_get_fd
000057d8 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
000226a4 g     F .text	00000158 alt_busy_sleep
000066b0 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002de10  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001b35c g     F .text	00000054 _close_r
000237d4 g     F .text	0000007c memcmp
000203b8 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000218e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007ab4 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000312f0 g       *ABS*	00000000 __alt_stack_base
00021930 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000527c g     F .text	00000340 _Z9calc_adsrtttf
0000a4b4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007d1c g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004174 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00013c50 g     F .text	00000154 __swsetup_r
0000e2a4 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031050 g     O .bss	00000004 i2c_dev
0001cf5c g     F .text	000009d0 .hidden __divdf3
0000a458  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015b2c g     F .text	00000118 __sfp
00017bbc g     F .text	00000078 __copybits
0000b160 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002b0a0 g     O .rwdata	00000408 __malloc_av_
000044f8  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015c78 g     F .text	00000004 __sinit_lock_release
0001db84 g     F .text	0000086c .hidden __muldf3
00018400 g     F .text	00000054 __sread
00004aec  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002a8c0  w    O .rodata	00000014 _ZTVSt9exception
0000cca4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002838  w    F .text	00000034 _ZN11AddressPoolC2Ev
00023520 g     F .text	00000108 alt_find_file
000047e0  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00022858 g     F .text	000000a4 alt_dev_llist_insert
0001f64c g     F .text	00000024 __malloc_lock
0001f858 g     F .text	000000b0 sbrk
0000f5d8 g     F .text	000022bc ___svfprintf_internal_r
000207e0 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00020748 g     F .text	0000004c alt_avalon_i2c_check_nack
0002a7fc  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c6a0 g     F .text	00000090 __cxa_throw
00015870 g     F .text	0000005c _fflush_r
0000e110 g     F .text	00000010 .hidden _Unwind_SetIP
00006abc g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001b3b0 g     F .text	000000dc _calloc_r
00023d48  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00006288 g     F .text	00000028 _Z8E_Notifydi
000078d8 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00031044 g       *ABS*	00000000 __bss_start
0002c78c  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000edc0 g     F .text	00000128 memset
000083d8 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00004d00  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a214 g     F .text	0000015c main
000096c0 g     F .text	00000078 _ZN8MAX3421e5regRdEh
000098bc g     F .text	000000cc _ZN8MAX3421e5resetEv
00020714 g     F .text	00000034 alt_avalon_i2c_master_target_set
00031084 g     O .bss	00000004 alt_envp
00023d6c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031060 g     O .bss	00000004 __malloc_max_total_mem
00021880 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0003104d g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001b2e4 g     F .text	00000018 __swbuf
0000cc60 g     F .text	0000000c __cxa_get_globals_fast
0002152c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006d6c g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
0000942c g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ab8  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002814  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00018534 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001b57c g     F .text	00000014 fclose
0000a480  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004048 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000061dc g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00013fcc g     F .text	00001688 _dtoa_r
0000e46c g     F .text	0000080c _malloc_r
0001ba64 g     F .text	00000030 __ascii_wctomb
0000cc8c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002de44 g     O .rwdata	00000004 alt_errno
000260ac  w    O .rodata	0000000c _ZTI17MouseReportParser
0000f31c g     F .text	00000010 _init_signal
0000255c g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006868 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002a7f0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000042b8 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
000165a8 g     F .text	000000c4 _fwalk
00009468 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00002e00  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cc7c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00017d60 g     F .text	000000c8 putc
0000cd10 g     F .text	00000084 .hidden __divsi3
00026320  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00015cac g     F .text	00000124 _malloc_trim_r
00023b28 g       *ABS*	00000000 __CTOR_END__
0000d3e8 g     F .text	00000430 .hidden __mulsf3
000046d8  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008dc8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026060  w    O .rodata	00000028 _ZTV17MouseReportParser
0000f464 g     F .text	000000dc strcmp
000030c8 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023b28 g       *ABS*	00000000 __flash_rodata_start
0002a8e8  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a430  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023b28 g       *ABS*	00000000 __DTOR_LIST__
000262c8  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001d92c g     F .text	00000088 .hidden __nedf2
0001fb5c g     F .text	00000038 alt_irq_init
0001f7d4 g     F .text	00000084 alt_release_fd
0000a4c4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023d3c  w    O .rodata	00000009 _ZTS7XBOXONE
0000f3f8 g     F .text	0000006c sprintf
0002a910 g     O .rodata	00000100 .hidden __clz_tab
00031070 g     O .bss	00000004 _PathLocale
00023788 g     F .text	00000014 atexit
0000d32c g     F .text	000000bc .hidden __gesf2
0001b2fc g     F .text	00000060 _write_r
00002440 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
000029c4  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000167e8 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00026034  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009840 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000e144 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002a734  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000cc08 g     F .text	00000058 __cxa_call_terminate
0002de1c g     O .rwdata	00000004 _impure_ptr
0002de08  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023c24  w    O .rodata	0000000e _ZTS11AddressPool
0003107c g     O .bss	00000004 alt_argc
00003000  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00015654 g     F .text	0000021c __sflush_r
00008dc8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00002c50  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0002295c g     F .text	00000060 _do_dtors
00031154 g     O .bss	00000064 Midi
000167d4 g     F .text	00000008 __locale_cjk_lang
000206dc g     F .text	00000038 alt_avalon_i2c_master_target_get
000205ec g     F .text	000000f0 alt_avalon_i2c_send_address
0000b5fc g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002838  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000177e8 g     F .text	00000064 __ulp
0000e134 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00015c94 g     F .text	00000018 __fp_unlock_all
00004b20  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004138 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004780  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002de30 g     O .rwdata	00000008 alt_fs_list
0002a89c  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00026094  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004aec  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000e120 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000047ac  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c7bc g     F .text	000000b4 __cxa_begin_catch
00004330 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b28c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b59c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005da4  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00016800 g     F .text	0000000c localeconv
00009bac g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004958  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cc9c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000217b8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ddfc g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006e40 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008ec8 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022a6c g     F .text	00000050 alt_ic_isr_register
0002001c g     F .text	0000004c alt_avalon_i2c_disable
0000caa4 g     F .text	00000060 __cxa_allocate_exception
0002a6c8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002de60 g       *ABS*	00000000 _edata
00004a84  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000312f0 g       *ABS*	00000000 _end
0000a8e4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000be2c g     F .text	00000600 __gxx_personality_sj0
0001b590 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00021d58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002c784  w    O .rwdata	00000008 _ZTI13USBReadParser
00020068 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cc78 g     F .text	00000004 _ZNSt9exceptionD1Ev
00022b44 g     F .text	0000008c alt_ic_irq_disable
00005d2c  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
0001845c g     F .text	0000007c __swrite
0002de24 g     O .rwdata	00000004 __malloc_trim_threshold
000167c8 g     F .text	0000000c __locale_msgcharset
0002379c g     F .text	00000038 exit
0000e0c4 g     F .text	0000001c .hidden _Unwind_SetGR
00005d7c  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
0001666c g     F .text	000000c4 _fwalk_reent
0000a658 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000dd6c g     F .text	000000f0 .hidden __floatunsisf
000175ec g     F .text	000001fc __mdiff
0000b4c4 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cd94 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00015c70 g     F .text	00000004 __sfp_lock_release
0002a870  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00006094  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003bf8 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00020278 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009a94 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
00020508 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000262d4  w    O .rodata	00000020 _ZTI9USBH_MIDI
00003fc0 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000ccb0 g     F .text	00000060 .hidden __fixunssfsi
00007860 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001f030 g     F .text	00000034 _exit
00022578 g     F .text	0000012c alt_alarm_start
00026088  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007e78 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000e090 g     F .text	0000001c .hidden _Unwind_GetGR
0000cc6c g     F .text	0000000c __cxa_get_globals
000063b8 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
0001680c g     F .text	000001bc __smakebuf_r
0002ddf8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004738  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000f540 g     F .text	00000098 strlen
0000f09c g     F .text	0000006c _init_signal_r
0002ddf0  w    O .rwdata	00000008 _ZTISt9type_info
00022f94 g     F .text	0000015c open
0001d9b4 g     F .text	000000dc .hidden __gedf2
0002331c g     F .text	0000003c alt_putchar
0002a84c  w    O .rodata	0000000d _ZTSSt9exception
0000e3f8 g     F .text	0000004c clock
000060bc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009d20 g     F .text	00000064 _ZN8MAX3421e4TaskEv
0002601c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009518 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002de2c g     O .rwdata	00000004 __wctomb
0000cc98 g     F .text	00000004 _ZNSt9exceptionD0Ev
00019ba8 g     F .text	00000018 __sprint_r
00022a4c g     F .text	00000020 alt_icache_flush_all
0000e13c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00031098 g     O .bss	000000bc Usb
0002de54 g     O .rwdata	00000004 alt_priority_mask
000044f8  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00022abc g     F .text	00000088 alt_ic_irq_enable
00013b78 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001ba94 g     F .text	0000005c _wctomb_r
0001e3f0 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003900 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016f8c g     F .text	000000b0 __lo0bits
0002de58 g     O .rwdata	00000008 alt_alarm_list
000228fc g     F .text	00000060 _do_ctors
00023ce8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f32c g     F .text	00000014 __sigtramp
00008f80 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001b9a4 g     F .text	000000c0 wcrtomb
0001ef2c g     F .text	000000d8 close
0002176c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002a87c  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001f434 g     F .text	00000084 alt_load
00020a04 g     F .text	0000013c alt_avalon_i2c_master_rx
0000b174 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0000459c  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b718 g     F .text	00000080 fputwc
0000f2f0 g     F .text	00000014 raise
0002cf00  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000e458 g     F .text	00000014 free
00015c74 g     F .text	00000004 __sinit_lock_acquire
00016cd8 g     F .text	00000148 __multadd
0000b29c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00016cb0 g     F .text	00000028 _Bfree
0000660c g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10847c04 	addi	r2,r2,4592
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10847c04 	addi	r2,r2,4592
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b24d17 	ldw	r2,-14028(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b24d17 	ldw	r2,-14028(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d691d814 	ori	gp,gp,18272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10841114 	ori	r2,r2,4164

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c4bc14 	ori	r3,r3,4848

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001f4340 	call	1f434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001f5d00 	call	1f5d0 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210eca04 	addi	r4,r4,15144
     28c:	000f0340 	call	f034 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210ecd04 	addi	r4,r4,15156
     2d0:	000f0340 	call	f034 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210ed204 	addi	r4,r4,15176
     304:	000f0340 	call	f034 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210ed504 	addi	r4,r4,15188
     340:	000f0340 	call	f034 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210ed904 	addi	r4,r4,15204
     374:	000f0340 	call	f034 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210edd04 	addi	r4,r4,15220
     3b0:	000f0340 	call	f034 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210ee004 	addi	r4,r4,15232
     3ec:	000f0340 	call	f034 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210ee304 	addi	r4,r4,15244
     428:	000f0340 	call	f034 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210ee604 	addi	r4,r4,15256
     464:	000f0340 	call	f034 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210ee904 	addi	r4,r4,15268
     4a0:	000f0340 	call	f034 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210eed04 	addi	r4,r4,15284
     4dc:	000f0340 	call	f034 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210ef104 	addi	r4,r4,15300
     510:	000f0340 	call	f034 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000cec40 	call	cec4 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000ce080 	call	ce08 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000ce080 	call	ce08 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000ce080 	call	ce08 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000cec40 	call	cec4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000ce080 	call	ce08 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000ce080 	call	ce08 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000cec40 	call	cec4 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000ce080 	call	ce08 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000cec40 	call	cec4 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000cec40 	call	cec4 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000ce080 	call	ce08 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000cec40 	call	cec4 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000e3f80 	call	e3f8 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000e3f80 	call	e3f8 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000e3f80 	call	e3f8 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000942c0 	call	942c <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	000286c0 	call	286c <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23945 	stb	r2,-14107(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23943 	ldbu	r2,-14107(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23945 	stb	r2,-14107(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00095180 	call	9518 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00097380 	call	9738 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00095180 	call	9518 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009d200 	call	9d20 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00094680 	call	9468 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23943 	ldbu	r2,-14107(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23945 	stb	r2,-14107(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23943 	ldbu	r2,-14107(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23a15 	stw	r2,-14104(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23945 	stb	r2,-14107(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23943 	ldbu	r2,-14107(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23a17 	ldw	r2,-14104(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23945 	stb	r2,-14107(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23945 	stb	r2,-14107(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23945 	stb	r2,-14107(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23a15 	stw	r2,-14104(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23a17 	ldw	r2,-14104(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23945 	stb	r2,-14107(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b23905 	stb	r2,-14108(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b23945 	stb	r2,-14107(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b23945 	stb	r2,-14107(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	00029f00 	call	29f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	00029380 	call	2938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	0002c500 	call	2c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff005 	stb	zero,-64(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00009106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff005 	stb	r2,-64(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff003 	ldbu	r2,-64(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff003 	ldbu	r2,-64(fp)
    222c:	00003106 	br	22f4 <_ZN3USB11ConfiguringEhhb+0x2f8>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)

        devConfig[0]->GetAddress();
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	10801e17 	ldw	r2,120(r2)
    2280:	10800017 	ldw	r2,0(r2)
    2284:	10800404 	addi	r2,r2,16
    2288:	10800017 	ldw	r2,0(r2)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	18c01e17 	ldw	r3,120(r3)
    2294:	1809883a 	mov	r4,r3
    2298:	103ee83a 	callr	r2
        devConfig[0]->DEVSUBCLASSOK(subklass);
    229c:	e0bffc17 	ldw	r2,-16(fp)
    22a0:	10801e17 	ldw	r2,120(r2)
    22a4:	10800017 	ldw	r2,0(r2)
    22a8:	10800804 	addi	r2,r2,32
    22ac:	10800017 	ldw	r2,0(r2)
    22b0:	e0fffc17 	ldw	r3,-16(fp)
    22b4:	18c01e17 	ldw	r3,120(r3)
    22b8:	e13ff643 	ldbu	r4,-39(fp)
    22bc:	200b883a 	mov	r5,r4
    22c0:	1809883a 	mov	r4,r3
    22c4:	103ee83a 	callr	r2
        rcode = AttemptConfig(0, parent, port, lowspeed);
    22c8:	e0fffd03 	ldbu	r3,-12(fp)
    22cc:	e13ffe03 	ldbu	r4,-8(fp)
    22d0:	e0bfff03 	ldbu	r2,-4(fp)
    22d4:	d8800015 	stw	r2,0(sp)
    22d8:	200f883a 	mov	r7,r4
    22dc:	180d883a 	mov	r6,r3
    22e0:	000b883a 	mov	r5,zero
    22e4:	e13ffc17 	ldw	r4,-16(fp)
    22e8:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    22ec:	e0bff005 	stb	r2,-64(fp)
        return rcode;
    22f0:	e0bff003 	ldbu	r2,-64(fp)
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);

        return rcode;
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    2308:	defffb04 	addi	sp,sp,-20
    230c:	dfc00415 	stw	ra,16(sp)
    2310:	df000315 	stw	fp,12(sp)
    2314:	df000304 	addi	fp,sp,12
    2318:	e13ffe15 	stw	r4,-8(fp)
    231c:	2805883a 	mov	r2,r5
    2320:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2324:	e0bfff03 	ldbu	r2,-4(fp)
    2328:	1000021e 	bne	r2,zero,2334 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    232c:	0005883a 	mov	r2,zero
    2330:	00003e06 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2334:	e03ffd05 	stb	zero,-12(fp)
    2338:	e0bffd03 	ldbu	r2,-12(fp)
    233c:	10800428 	cmpgeui	r2,r2,16
    2340:	1000391e 	bne	r2,zero,2428 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2344:	e0bffd03 	ldbu	r2,-12(fp)
    2348:	e0fffe17 	ldw	r3,-8(fp)
    234c:	10800784 	addi	r2,r2,30
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	1885883a 	add	r2,r3,r2
    235c:	10800017 	ldw	r2,0(r2)
    2360:	10002c26 	beq	r2,zero,2414 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2364:	e0bffd03 	ldbu	r2,-12(fp)
    2368:	e0fffe17 	ldw	r3,-8(fp)
    236c:	10800784 	addi	r2,r2,30
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1885883a 	add	r2,r3,r2
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800017 	ldw	r2,0(r2)
    2384:	10800404 	addi	r2,r2,16
    2388:	10c00017 	ldw	r3,0(r2)
    238c:	e0bffd03 	ldbu	r2,-12(fp)
    2390:	e13ffe17 	ldw	r4,-8(fp)
    2394:	10800784 	addi	r2,r2,30
    2398:	1085883a 	add	r2,r2,r2
    239c:	1085883a 	add	r2,r2,r2
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	10800017 	ldw	r2,0(r2)
    23a8:	1009883a 	mov	r4,r2
    23ac:	183ee83a 	callr	r3
    23b0:	10c03fcc 	andi	r3,r2,255
    23b4:	e0bfff03 	ldbu	r2,-4(fp)
    23b8:	1885003a 	cmpeq	r2,r3,r2
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	10001526 	beq	r2,zero,2418 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    23c4:	e0bffd03 	ldbu	r2,-12(fp)
    23c8:	e0fffe17 	ldw	r3,-8(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800204 	addi	r2,r2,8
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bffd03 	ldbu	r2,-12(fp)
    23f0:	e13ffe17 	ldw	r4,-8(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	1009883a 	mov	r4,r2
    240c:	183ee83a 	callr	r3
    2410:	00000606 	br	242c <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2414:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2418:	e0bffd03 	ldbu	r2,-12(fp)
    241c:	10800044 	addi	r2,r2,1
    2420:	e0bffd05 	stb	r2,-12(fp)
    2424:	003fc406 	br	2338 <__alt_data_end+0xfc002338>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2428:	0005883a 	mov	r2,zero
        printf("END\n");
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2440:	defff204 	addi	sp,sp,-56
    2444:	dfc00d15 	stw	ra,52(sp)
    2448:	df000c15 	stw	fp,48(sp)
    244c:	df000c04 	addi	fp,sp,48
    2450:	e13ffc15 	stw	r4,-16(fp)
    2454:	2809883a 	mov	r4,r5
    2458:	3007883a 	mov	r3,r6
    245c:	3805883a 	mov	r2,r7
    2460:	e13ffd05 	stb	r4,-12(fp)
    2464:	e0fffe05 	stb	r3,-8(fp)
    2468:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    246c:	e17ffd03 	ldbu	r5,-12(fp)
    2470:	e1bffe03 	ldbu	r6,-8(fp)
    2474:	e0bfff0b 	ldhu	r2,-4(fp)
    2478:	e0ffff0b 	ldhu	r3,-4(fp)
    247c:	d8000715 	stw	zero,28(sp)
    2480:	e1000217 	ldw	r4,8(fp)
    2484:	d9000615 	stw	r4,24(sp)
    2488:	d8c00515 	stw	r3,20(sp)
    248c:	d8800415 	stw	r2,16(sp)
    2490:	d8000315 	stw	zero,12(sp)
    2494:	00800044 	movi	r2,1
    2498:	d8800215 	stw	r2,8(sp)
    249c:	d8000115 	stw	zero,4(sp)
    24a0:	00800184 	movi	r2,6
    24a4:	d8800015 	stw	r2,0(sp)
    24a8:	01c02004 	movi	r7,128
    24ac:	e13ffc17 	ldw	r4,-16(fp)
    24b0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    24b4:	e037883a 	mov	sp,fp
    24b8:	dfc00117 	ldw	ra,4(sp)
    24bc:	df000017 	ldw	fp,0(sp)
    24c0:	dec00204 	addi	sp,sp,8
    24c4:	f800283a 	ret

000024c8 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    24c8:	defff104 	addi	sp,sp,-60
    24cc:	dfc00e15 	stw	ra,56(sp)
    24d0:	df000d15 	stw	fp,52(sp)
    24d4:	df000d04 	addi	fp,sp,52
    24d8:	e13ffb15 	stw	r4,-20(fp)
    24dc:	3009883a 	mov	r4,r6
    24e0:	3807883a 	mov	r3,r7
    24e4:	e0800217 	ldw	r2,8(fp)
    24e8:	e17ffc05 	stb	r5,-16(fp)
    24ec:	e13ffd05 	stb	r4,-12(fp)
    24f0:	e0fffe0d 	sth	r3,-8(fp)
    24f4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    24f8:	e23ffc03 	ldbu	r8,-16(fp)
    24fc:	e1bffd03 	ldbu	r6,-12(fp)
    2500:	e0bfff03 	ldbu	r2,-4(fp)
    2504:	e0fffe0b 	ldhu	r3,-8(fp)
    2508:	e13ffe0b 	ldhu	r4,-8(fp)
    250c:	d8000715 	stw	zero,28(sp)
    2510:	e1400317 	ldw	r5,12(fp)
    2514:	d9400615 	stw	r5,24(sp)
    2518:	d9000515 	stw	r4,20(sp)
    251c:	d8c00415 	stw	r3,16(sp)
    2520:	d8000315 	stw	zero,12(sp)
    2524:	00c00084 	movi	r3,2
    2528:	d8c00215 	stw	r3,8(sp)
    252c:	d8800115 	stw	r2,4(sp)
    2530:	00800184 	movi	r2,6
    2534:	d8800015 	stw	r2,0(sp)
    2538:	01c02004 	movi	r7,128
    253c:	400b883a 	mov	r5,r8
    2540:	e13ffb17 	ldw	r4,-20(fp)
    2544:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    255c:	deffdf04 	addi	sp,sp,-132
    2560:	dfc02015 	stw	ra,128(sp)
    2564:	df001f15 	stw	fp,124(sp)
    2568:	df001f04 	addi	fp,sp,124
    256c:	e13ffc15 	stw	r4,-16(fp)
    2570:	2809883a 	mov	r4,r5
    2574:	3007883a 	mov	r3,r6
    2578:	3805883a 	mov	r2,r7
    257c:	e13ffd05 	stb	r4,-12(fp)
    2580:	e0fffe05 	stb	r3,-8(fp)
    2584:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2588:	00801004 	movi	r2,64
    258c:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2590:	e0bfec04 	addi	r2,fp,-80
    2594:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2598:	e13ffd03 	ldbu	r4,-12(fp)
    259c:	e17ffe03 	ldbu	r5,-8(fp)
    25a0:	e0bfff03 	ldbu	r2,-4(fp)
    25a4:	e0ffec04 	addi	r3,fp,-80
    25a8:	d8c00115 	stw	r3,4(sp)
    25ac:	d8800015 	stw	r2,0(sp)
    25b0:	01c00244 	movi	r7,9
    25b4:	280d883a 	mov	r6,r5
    25b8:	200b883a 	mov	r5,r4
    25bc:	e13ffc17 	ldw	r4,-16(fp)
    25c0:	00024c80 	call	24c8 <_ZN3USB12getConfDescrEhhthPh>
    25c4:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    25c8:	e0bfeb03 	ldbu	r2,-84(fp)
    25cc:	10000226 	beq	r2,zero,25d8 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    25d0:	e0bfeb03 	ldbu	r2,-84(fp)
    25d4:	00001a06 	br	2640 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    25d8:	e0bfea17 	ldw	r2,-88(fp)
    25dc:	10c00083 	ldbu	r3,2(r2)
    25e0:	108000c3 	ldbu	r2,3(r2)
    25e4:	1004923a 	slli	r2,r2,8
    25e8:	10c4b03a 	or	r2,r2,r3
    25ec:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    25f0:	e17ffd03 	ldbu	r5,-12(fp)
    25f4:	e1bffe03 	ldbu	r6,-8(fp)
    25f8:	e0bfff03 	ldbu	r2,-4(fp)
    25fc:	e0ffeb8b 	ldhu	r3,-82(fp)
    2600:	e1000217 	ldw	r4,8(fp)
    2604:	d9000715 	stw	r4,28(sp)
    2608:	e13fec04 	addi	r4,fp,-80
    260c:	d9000615 	stw	r4,24(sp)
    2610:	01001004 	movi	r4,64
    2614:	d9000515 	stw	r4,20(sp)
    2618:	d8c00415 	stw	r3,16(sp)
    261c:	d8000315 	stw	zero,12(sp)
    2620:	00c00084 	movi	r3,2
    2624:	d8c00215 	stw	r3,8(sp)
    2628:	d8800115 	stw	r2,4(sp)
    262c:	00800184 	movi	r2,6
    2630:	d8800015 	stw	r2,0(sp)
    2634:	01c02004 	movi	r7,128
    2638:	e13ffc17 	ldw	r4,-16(fp)
    263c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2640:	e037883a 	mov	sp,fp
    2644:	dfc00117 	ldw	ra,4(sp)
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00204 	addi	sp,sp,8
    2650:	f800283a 	ret

00002654 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2654:	defff004 	addi	sp,sp,-64
    2658:	dfc00f15 	stw	ra,60(sp)
    265c:	df000e15 	stw	fp,56(sp)
    2660:	df000e04 	addi	fp,sp,56
    2664:	e13ffa15 	stw	r4,-24(fp)
    2668:	2811883a 	mov	r8,r5
    266c:	300b883a 	mov	r5,r6
    2670:	3809883a 	mov	r4,r7
    2674:	e0c00217 	ldw	r3,8(fp)
    2678:	e0800317 	ldw	r2,12(fp)
    267c:	e23ffb05 	stb	r8,-20(fp)
    2680:	e17ffc05 	stb	r5,-16(fp)
    2684:	e13ffd0d 	sth	r4,-12(fp)
    2688:	e0fffe05 	stb	r3,-8(fp)
    268c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2690:	e23ffb03 	ldbu	r8,-20(fp)
    2694:	e27ffc03 	ldbu	r9,-16(fp)
    2698:	e0bffe03 	ldbu	r2,-8(fp)
    269c:	e0ffff0b 	ldhu	r3,-4(fp)
    26a0:	e13ffd0b 	ldhu	r4,-12(fp)
    26a4:	e17ffd0b 	ldhu	r5,-12(fp)
    26a8:	d8000715 	stw	zero,28(sp)
    26ac:	e1800417 	ldw	r6,16(fp)
    26b0:	d9800615 	stw	r6,24(sp)
    26b4:	d9400515 	stw	r5,20(sp)
    26b8:	d9000415 	stw	r4,16(sp)
    26bc:	d8c00315 	stw	r3,12(sp)
    26c0:	00c000c4 	movi	r3,3
    26c4:	d8c00215 	stw	r3,8(sp)
    26c8:	d8800115 	stw	r2,4(sp)
    26cc:	00800184 	movi	r2,6
    26d0:	d8800015 	stw	r2,0(sp)
    26d4:	01c02004 	movi	r7,128
    26d8:	480d883a 	mov	r6,r9
    26dc:	400b883a 	mov	r5,r8
    26e0:	e13ffa17 	ldw	r4,-24(fp)
    26e4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    26e8:	e037883a 	mov	sp,fp
    26ec:	dfc00117 	ldw	ra,4(sp)
    26f0:	df000017 	ldw	fp,0(sp)
    26f4:	dec00204 	addi	sp,sp,8
    26f8:	f800283a 	ret

000026fc <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    26fc:	defff104 	addi	sp,sp,-60
    2700:	dfc00e15 	stw	ra,56(sp)
    2704:	df000d15 	stw	fp,52(sp)
    2708:	df000d04 	addi	fp,sp,52
    270c:	e13ffc15 	stw	r4,-16(fp)
    2710:	2809883a 	mov	r4,r5
    2714:	3007883a 	mov	r3,r6
    2718:	3805883a 	mov	r2,r7
    271c:	e13ffd05 	stb	r4,-12(fp)
    2720:	e0fffe05 	stb	r3,-8(fp)
    2724:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2728:	e0fffd03 	ldbu	r3,-12(fp)
    272c:	e13ffe03 	ldbu	r4,-8(fp)
    2730:	e0bfff03 	ldbu	r2,-4(fp)
    2734:	d8000715 	stw	zero,28(sp)
    2738:	d8000615 	stw	zero,24(sp)
    273c:	d8000515 	stw	zero,20(sp)
    2740:	d8000415 	stw	zero,16(sp)
    2744:	d8000315 	stw	zero,12(sp)
    2748:	d8000215 	stw	zero,8(sp)
    274c:	d8800115 	stw	r2,4(sp)
    2750:	00800144 	movi	r2,5
    2754:	d8800015 	stw	r2,0(sp)
    2758:	000f883a 	mov	r7,zero
    275c:	200d883a 	mov	r6,r4
    2760:	180b883a 	mov	r5,r3
    2764:	e13ffc17 	ldw	r4,-16(fp)
    2768:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    276c:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2770:	01004b04 	movi	r4,300
    2774:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2778:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2790:	defff204 	addi	sp,sp,-56
    2794:	dfc00d15 	stw	ra,52(sp)
    2798:	df000c15 	stw	fp,48(sp)
    279c:	df000c04 	addi	fp,sp,48
    27a0:	e13ffc15 	stw	r4,-16(fp)
    27a4:	2809883a 	mov	r4,r5
    27a8:	3007883a 	mov	r3,r6
    27ac:	3805883a 	mov	r2,r7
    27b0:	e13ffd05 	stb	r4,-12(fp)
    27b4:	e0fffe05 	stb	r3,-8(fp)
    27b8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    27bc:	e0fffd03 	ldbu	r3,-12(fp)
    27c0:	e13ffe03 	ldbu	r4,-8(fp)
    27c4:	e0bfff03 	ldbu	r2,-4(fp)
    27c8:	d8000715 	stw	zero,28(sp)
    27cc:	d8000615 	stw	zero,24(sp)
    27d0:	d8000515 	stw	zero,20(sp)
    27d4:	d8000415 	stw	zero,16(sp)
    27d8:	d8000315 	stw	zero,12(sp)
    27dc:	d8000215 	stw	zero,8(sp)
    27e0:	d8800115 	stw	r2,4(sp)
    27e4:	00800244 	movi	r2,9
    27e8:	d8800015 	stw	r2,0(sp)
    27ec:	000f883a 	mov	r7,zero
    27f0:	200d883a 	mov	r6,r4
    27f4:	180b883a 	mov	r5,r3
    27f8:	e13ffc17 	ldw	r4,-16(fp)
    27fc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2800:	e037883a 	mov	sp,fp
    2804:	dfc00117 	ldw	ra,4(sp)
    2808:	df000017 	ldw	fp,0(sp)
    280c:	dec00204 	addi	sp,sp,8
    2810:	f800283a 	ret

00002814 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2814:	defffe04 	addi	sp,sp,-8
    2818:	df000115 	stw	fp,4(sp)
    281c:	df000104 	addi	fp,sp,4
    2820:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2824:	e0bfff17 	ldw	r2,-4(fp)
        };
    2828:	e037883a 	mov	sp,fp
    282c:	df000017 	ldw	fp,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2838:	defffe04 	addi	sp,sp,-8
    283c:	df000115 	stw	fp,4(sp)
    2840:	df000104 	addi	fp,sp,4
    2844:	e13fff15 	stw	r4,-4(fp)
    2848:	008000b4 	movhi	r2,2
    284c:	108efc04 	addi	r2,r2,15344
    2850:	e0ffff17 	ldw	r3,-4(fp)
    2854:	18800015 	stw	r2,0(r3)
    2858:	0001883a 	nop
    285c:	e037883a 	mov	sp,fp
    2860:	df000017 	ldw	fp,0(sp)
    2864:	dec00104 	addi	sp,sp,4
    2868:	f800283a 	ret

0000286c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dfc00215 	stw	ra,8(sp)
    2874:	df000115 	stw	fp,4(sp)
    2878:	df000104 	addi	fp,sp,4
    287c:	e13fff15 	stw	r4,-4(fp)
    2880:	e0bfff17 	ldw	r2,-4(fp)
    2884:	1009883a 	mov	r4,r2
    2888:	00028380 	call	2838 <_ZN11AddressPoolC1Ev>
    288c:	008000b4 	movhi	r2,2
    2890:	108ef704 	addi	r2,r2,15324
    2894:	e0ffff17 	ldw	r3,-4(fp)
    2898:	18800015 	stw	r2,0(r3)
    289c:	e0bfff17 	ldw	r2,-4(fp)
    28a0:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    28a4:	000b883a 	mov	r5,zero
    28a8:	e13fff17 	ldw	r4,-4(fp)
    28ac:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    28b0:	e0bfff17 	ldw	r2,-4(fp)
    28b4:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00104 	addi	r3,r2,4
    28c0:	e0bfff17 	ldw	r2,-4(fp)
    28c4:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    28c8:	e0bfff17 	ldw	r2,-4(fp)
    28cc:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    28d0:	e0bfff17 	ldw	r2,-4(fp)
    28d4:	00c00204 	movi	r3,8
    28d8:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	11000183 	ldbu	r4,6(r2)
    28e4:	00ffff84 	movi	r3,-2
    28e8:	20c6703a 	and	r3,r4,r3
    28ec:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    28f0:	e0bfff17 	ldw	r2,-4(fp)
    28f4:	11000183 	ldbu	r4,6(r2)
    28f8:	00ffff44 	movi	r3,-3
    28fc:	20c6703a 	and	r3,r4,r3
    2900:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2904:	e0bfff17 	ldw	r2,-4(fp)
    2908:	10c00183 	ldbu	r3,6(r2)
    290c:	18c000cc 	andi	r3,r3,3
    2910:	18c00f14 	ori	r3,r3,60
    2914:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2918:	e13fff17 	ldw	r4,-4(fp)
    291c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2920:	0001883a 	nop
    2924:	e037883a 	mov	sp,fp
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	df000017 	ldw	fp,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret

00002938 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2938:	defffa04 	addi	sp,sp,-24
    293c:	dfc00515 	stw	ra,20(sp)
    2940:	df000415 	stw	fp,16(sp)
    2944:	dc000315 	stw	r16,12(sp)
    2948:	df000404 	addi	fp,sp,16
    294c:	e13ffd15 	stw	r4,-12(fp)
    2950:	2805883a 	mov	r2,r5
    2954:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2958:	e0bffe03 	ldbu	r2,-8(fp)
    295c:	1000031e 	bne	r2,zero,296c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800204 	addi	r2,r2,8
    2968:	00001006 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    296c:	e0bffe03 	ldbu	r2,-8(fp)
    2970:	100b883a 	mov	r5,r2
    2974:	e13ffd17 	ldw	r4,-12(fp)
    2978:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    297c:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2980:	e0bffc03 	ldbu	r2,-16(fp)
    2984:	10000826 	beq	r2,zero,29a8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	14000204 	addi	r16,r2,8
    2990:	e0bffc03 	ldbu	r2,-16(fp)
    2994:	014001c4 	movi	r5,7
    2998:	1009883a 	mov	r4,r2
    299c:	000cec40 	call	cec4 <__mulsi3>
    29a0:	8085883a 	add	r2,r16,r2
    29a4:	00000106 	br	29ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    29a8:	0005883a 	mov	r2,zero
        };
    29ac:	e6ffff04 	addi	sp,fp,-4
    29b0:	dfc00217 	ldw	ra,8(sp)
    29b4:	df000117 	ldw	fp,4(sp)
    29b8:	dc000017 	ldw	r16,0(sp)
    29bc:	dec00304 	addi	sp,sp,12
    29c0:	f800283a 	ret

000029c4 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    29c4:	defffd04 	addi	sp,sp,-12
    29c8:	df000215 	stw	fp,8(sp)
    29cc:	df000204 	addi	fp,sp,8
    29d0:	2005883a 	mov	r2,r4
    29d4:	e17fff15 	stw	r5,-4(fp)
    29d8:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    29dc:	0001883a 	nop
    29e0:	e037883a 	mov	sp,fp
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00104 	addi	sp,sp,4
    29ec:	f800283a 	ret

000029f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    29f0:	defff804 	addi	sp,sp,-32
    29f4:	dfc00715 	stw	ra,28(sp)
    29f8:	df000615 	stw	fp,24(sp)
    29fc:	dc000515 	stw	r16,20(sp)
    2a00:	df000604 	addi	fp,sp,24
    2a04:	e13ffb15 	stw	r4,-20(fp)
    2a08:	2809883a 	mov	r4,r5
    2a0c:	3007883a 	mov	r3,r6
    2a10:	3805883a 	mov	r2,r7
    2a14:	e13ffc05 	stb	r4,-16(fp)
    2a18:	e0fffd05 	stb	r3,-12(fp)
    2a1c:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2a20:	e0bffc03 	ldbu	r2,-16(fp)
    2a24:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2a28:	e0fffa43 	ldbu	r3,-23(fp)
    2a2c:	00bfe004 	movi	r2,-128
    2a30:	1884703a 	and	r2,r3,r2
    2a34:	10803fcc 	andi	r2,r2,255
    2a38:	1000031e 	bne	r2,zero,2a48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2a3c:	e0bffe03 	ldbu	r2,-8(fp)
    2a40:	10800230 	cmpltui	r2,r2,8
    2a44:	1000021e 	bne	r2,zero,2a50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2a48:	0005883a 	mov	r2,zero
    2a4c:	00007a06 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2a50:	e0bffd03 	ldbu	r2,-12(fp)
    2a54:	10000726 	beq	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2a58:	e0bffb17 	ldw	r2,-20(fp)
    2a5c:	108001c3 	ldbu	r2,7(r2)
    2a60:	10803fcc 	andi	r2,r2,255
    2a64:	108001d8 	cmpnei	r2,r2,7
    2a68:	1000021e 	bne	r2,zero,2a74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2a6c:	0005883a 	mov	r2,zero
    2a70:	00007106 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2a74:	000b883a 	mov	r5,zero
    2a78:	e13ffb17 	ldw	r4,-20(fp)
    2a7c:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2a80:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2a84:	e0bffa03 	ldbu	r2,-24(fp)
    2a88:	1000021e 	bne	r2,zero,2a94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2a8c:	0005883a 	mov	r2,zero
    2a90:	00006906 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2a94:	e0bffa43 	ldbu	r2,-23(fp)
    2a98:	10803fcc 	andi	r2,r2,255
    2a9c:	1000241e 	bne	r2,zero,2b30 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2aa0:	e0bffd03 	ldbu	r2,-12(fp)
    2aa4:	10001026 	beq	r2,zero,2ae8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2aa8:	e0bffa03 	ldbu	r2,-24(fp)
    2aac:	e43ffb17 	ldw	r16,-20(fp)
    2ab0:	014001c4 	movi	r5,7
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	000cec40 	call	cec4 <__mulsi3>
    2abc:	8085883a 	add	r2,r16,r2
    2ac0:	10800304 	addi	r2,r2,12
    2ac4:	00c01044 	movi	r3,65
    2ac8:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2acc:	e0bffb17 	ldw	r2,-20(fp)
    2ad0:	108001c3 	ldbu	r2,7(r2)
    2ad4:	10800044 	addi	r2,r2,1
    2ad8:	1007883a 	mov	r3,r2
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	10c001c5 	stb	r3,7(r2)
    2ae4:	00000906 	br	2b0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2ae8:	e0bffa03 	ldbu	r2,-24(fp)
    2aec:	e43ffb17 	ldw	r16,-20(fp)
    2af0:	014001c4 	movi	r5,7
    2af4:	1009883a 	mov	r4,r2
    2af8:	000cec40 	call	cec4 <__mulsi3>
    2afc:	8085883a 	add	r2,r16,r2
    2b00:	10800304 	addi	r2,r2,12
    2b04:	00c00044 	movi	r3,1
    2b08:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2b0c:	e0bffa03 	ldbu	r2,-24(fp)
    2b10:	e43ffb17 	ldw	r16,-20(fp)
    2b14:	014001c4 	movi	r5,7
    2b18:	1009883a 	mov	r4,r2
    2b1c:	000cec40 	call	cec4 <__mulsi3>
    2b20:	8085883a 	add	r2,r16,r2
    2b24:	10800304 	addi	r2,r2,12
    2b28:	10800003 	ldbu	r2,0(r2)
    2b2c:	00004206 	br	2c38 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2b30:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2b34:	e0bffa43 	ldbu	r2,-23(fp)
    2b38:	108001cc 	andi	r2,r2,7
    2b3c:	108001cc 	andi	r2,r2,7
    2b40:	100890fa 	slli	r4,r2,3
    2b44:	e0fffa83 	ldbu	r3,-22(fp)
    2b48:	00bff1c4 	movi	r2,-57
    2b4c:	1884703a 	and	r2,r3,r2
    2b50:	1007883a 	mov	r3,r2
    2b54:	2005883a 	mov	r2,r4
    2b58:	1884b03a 	or	r2,r3,r2
    2b5c:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2b60:	e0bffd03 	ldbu	r2,-12(fp)
    2b64:	10001526 	beq	r2,zero,2bbc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2b68:	e0bffa83 	ldbu	r2,-22(fp)
    2b6c:	10801014 	ori	r2,r2,64
    2b70:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2b74:	e0bffb17 	ldw	r2,-20(fp)
    2b78:	108001c3 	ldbu	r2,7(r2)
    2b7c:	10800044 	addi	r2,r2,1
    2b80:	1007883a 	mov	r3,r2
    2b84:	e0bffb17 	ldw	r2,-20(fp)
    2b88:	10c001c5 	stb	r3,7(r2)
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	108001c3 	ldbu	r2,7(r2)
    2b94:	108001cc 	andi	r2,r2,7
    2b98:	110001cc 	andi	r4,r2,7
    2b9c:	e0fffa83 	ldbu	r3,-22(fp)
    2ba0:	00bffe04 	movi	r2,-8
    2ba4:	1884703a 	and	r2,r3,r2
    2ba8:	1007883a 	mov	r3,r2
    2bac:	2005883a 	mov	r2,r4
    2bb0:	1884b03a 	or	r2,r3,r2
    2bb4:	e0bffa85 	stb	r2,-22(fp)
    2bb8:	00000e06 	br	2bf4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2bbc:	e0fffa83 	ldbu	r3,-22(fp)
    2bc0:	00bfefc4 	movi	r2,-65
    2bc4:	1884703a 	and	r2,r3,r2
    2bc8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2bcc:	e0bffe03 	ldbu	r2,-8(fp)
    2bd0:	108001cc 	andi	r2,r2,7
    2bd4:	110001cc 	andi	r4,r2,7
    2bd8:	e0fffa83 	ldbu	r3,-22(fp)
    2bdc:	00bffe04 	movi	r2,-8
    2be0:	1884703a 	and	r2,r3,r2
    2be4:	1007883a 	mov	r3,r2
    2be8:	2005883a 	mov	r2,r4
    2bec:	1884b03a 	or	r2,r3,r2
    2bf0:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2bf4:	e0bffa03 	ldbu	r2,-24(fp)
    2bf8:	e43ffb17 	ldw	r16,-20(fp)
    2bfc:	014001c4 	movi	r5,7
    2c00:	1009883a 	mov	r4,r2
    2c04:	000cec40 	call	cec4 <__mulsi3>
    2c08:	8085883a 	add	r2,r16,r2
    2c0c:	10800304 	addi	r2,r2,12
    2c10:	e0fffa83 	ldbu	r3,-22(fp)
    2c14:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    2c18:	e0bffa03 	ldbu	r2,-24(fp)
    2c1c:	e43ffb17 	ldw	r16,-20(fp)
    2c20:	014001c4 	movi	r5,7
    2c24:	1009883a 	mov	r4,r2
    2c28:	000cec40 	call	cec4 <__mulsi3>
    2c2c:	8085883a 	add	r2,r16,r2
    2c30:	10800304 	addi	r2,r2,12
    2c34:	10800003 	ldbu	r2,0(r2)
        };
    2c38:	e6ffff04 	addi	sp,fp,-4
    2c3c:	dfc00217 	ldw	ra,8(sp)
    2c40:	df000117 	ldw	fp,4(sp)
    2c44:	dc000017 	ldw	r16,0(sp)
    2c48:	dec00304 	addi	sp,sp,12
    2c4c:	f800283a 	ret

00002c50 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    2c50:	defffb04 	addi	sp,sp,-20
    2c54:	dfc00415 	stw	ra,16(sp)
    2c58:	df000315 	stw	fp,12(sp)
    2c5c:	df000304 	addi	fp,sp,12
    2c60:	e13ffe15 	stw	r4,-8(fp)
    2c64:	2805883a 	mov	r2,r5
    2c68:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    2c6c:	e0bfff03 	ldbu	r2,-4(fp)
    2c70:	10801058 	cmpnei	r2,r2,65
    2c74:	1000031e 	bne	r2,zero,2c84 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    2c78:	e13ffe17 	ldw	r4,-8(fp)
    2c7c:	0002e000 	call	2e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    2c80:	00000906 	br	2ca8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    2c84:	e0bfff03 	ldbu	r2,-4(fp)
    2c88:	100b883a 	mov	r5,r2
    2c8c:	e13ffe17 	ldw	r4,-8(fp)
    2c90:	0002e680 	call	2e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2c94:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    2c98:	e0bffd03 	ldbu	r2,-12(fp)
    2c9c:	100b883a 	mov	r5,r2
    2ca0:	e13ffe17 	ldw	r4,-8(fp)
    2ca4:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    2ca8:	e037883a 	mov	sp,fp
    2cac:	dfc00117 	ldw	ra,4(sp)
    2cb0:	df000017 	ldw	fp,0(sp)
    2cb4:	dec00204 	addi	sp,sp,8
    2cb8:	f800283a 	ret

00002cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    2cbc:	defffa04 	addi	sp,sp,-24
    2cc0:	dfc00515 	stw	ra,20(sp)
    2cc4:	df000415 	stw	fp,16(sp)
    2cc8:	dc400315 	stw	r17,12(sp)
    2ccc:	dc000215 	stw	r16,8(sp)
    2cd0:	df000404 	addi	fp,sp,16
    2cd4:	e13ffc15 	stw	r4,-16(fp)
    2cd8:	2805883a 	mov	r2,r5
    2cdc:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    2ce0:	e0bffd03 	ldbu	r2,-12(fp)
    2ce4:	e43ffc17 	ldw	r16,-16(fp)
    2ce8:	014001c4 	movi	r5,7
    2cec:	1009883a 	mov	r4,r2
    2cf0:	000cec40 	call	cec4 <__mulsi3>
    2cf4:	8085883a 	add	r2,r16,r2
    2cf8:	10800304 	addi	r2,r2,12
    2cfc:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    2d00:	e0bffd03 	ldbu	r2,-12(fp)
    2d04:	e43ffc17 	ldw	r16,-16(fp)
    2d08:	014001c4 	movi	r5,7
    2d0c:	1009883a 	mov	r4,r2
    2d10:	000cec40 	call	cec4 <__mulsi3>
    2d14:	8085883a 	add	r2,r16,r2
    2d18:	10800344 	addi	r2,r2,13
    2d1c:	00c00044 	movi	r3,1
    2d20:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    2d24:	e0bffd03 	ldbu	r2,-12(fp)
    2d28:	e43ffc17 	ldw	r16,-16(fp)
    2d2c:	014001c4 	movi	r5,7
    2d30:	1009883a 	mov	r4,r2
    2d34:	000cec40 	call	cec4 <__mulsi3>
    2d38:	8085883a 	add	r2,r16,r2
    2d3c:	10800384 	addi	r2,r2,14
    2d40:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    2d44:	e0fffd03 	ldbu	r3,-12(fp)
    2d48:	e0bffc17 	ldw	r2,-16(fp)
    2d4c:	14000104 	addi	r16,r2,4
    2d50:	e47ffc17 	ldw	r17,-16(fp)
    2d54:	014001c4 	movi	r5,7
    2d58:	1809883a 	mov	r4,r3
    2d5c:	000cec40 	call	cec4 <__mulsi3>
    2d60:	8885883a 	add	r2,r17,r2
    2d64:	10800204 	addi	r2,r2,8
    2d68:	81403fcc 	andi	r5,r16,255
    2d6c:	10c00003 	ldbu	r3,0(r2)
    2d70:	1806703a 	and	r3,r3,zero
    2d74:	1809883a 	mov	r4,r3
    2d78:	2807883a 	mov	r3,r5
    2d7c:	20c6b03a 	or	r3,r4,r3
    2d80:	10c00005 	stb	r3,0(r2)
    2d84:	8006d23a 	srli	r3,r16,8
    2d88:	19403fcc 	andi	r5,r3,255
    2d8c:	10c00043 	ldbu	r3,1(r2)
    2d90:	1806703a 	and	r3,r3,zero
    2d94:	1809883a 	mov	r4,r3
    2d98:	2807883a 	mov	r3,r5
    2d9c:	20c6b03a 	or	r3,r4,r3
    2da0:	10c00045 	stb	r3,1(r2)
    2da4:	8006d43a 	srli	r3,r16,16
    2da8:	19403fcc 	andi	r5,r3,255
    2dac:	10c00083 	ldbu	r3,2(r2)
    2db0:	1806703a 	and	r3,r3,zero
    2db4:	1809883a 	mov	r4,r3
    2db8:	2807883a 	mov	r3,r5
    2dbc:	20c6b03a 	or	r3,r4,r3
    2dc0:	10c00085 	stb	r3,2(r2)
    2dc4:	800ad63a 	srli	r5,r16,24
    2dc8:	10c000c3 	ldbu	r3,3(r2)
    2dcc:	1806703a 	and	r3,r3,zero
    2dd0:	1809883a 	mov	r4,r3
    2dd4:	2807883a 	mov	r3,r5
    2dd8:	20c6b03a 	or	r3,r4,r3
    2ddc:	10c000c5 	stb	r3,3(r2)
        };
    2de0:	0001883a 	nop
    2de4:	e6fffe04 	addi	sp,fp,-8
    2de8:	dfc00317 	ldw	ra,12(sp)
    2dec:	df000217 	ldw	fp,8(sp)
    2df0:	dc400117 	ldw	r17,4(sp)
    2df4:	dc000017 	ldw	r16,0(sp)
    2df8:	dec00404 	addi	sp,sp,16
    2dfc:	f800283a 	ret

00002e00 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    2e00:	defffc04 	addi	sp,sp,-16
    2e04:	dfc00315 	stw	ra,12(sp)
    2e08:	df000215 	stw	fp,8(sp)
    2e0c:	df000204 	addi	fp,sp,8
    2e10:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e14:	00800044 	movi	r2,1
    2e18:	e0bffe05 	stb	r2,-8(fp)
    2e1c:	e0bffe03 	ldbu	r2,-8(fp)
    2e20:	10800428 	cmpgeui	r2,r2,16
    2e24:	1000081e 	bne	r2,zero,2e48 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    2e28:	e0bffe03 	ldbu	r2,-8(fp)
    2e2c:	100b883a 	mov	r5,r2
    2e30:	e13fff17 	ldw	r4,-4(fp)
    2e34:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2e38:	e0bffe03 	ldbu	r2,-8(fp)
    2e3c:	10800044 	addi	r2,r2,1
    2e40:	e0bffe05 	stb	r2,-8(fp)
    2e44:	003ff506 	br	2e1c <__alt_data_end+0xfc002e1c>
                        InitEntry(i);

                hubCounter = 0;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	100001c5 	stb	zero,7(r2)
        };
    2e50:	0001883a 	nop
    2e54:	e037883a 	mov	sp,fp
    2e58:	dfc00117 	ldw	ra,4(sp)
    2e5c:	df000017 	ldw	fp,0(sp)
    2e60:	dec00204 	addi	sp,sp,8
    2e64:	f800283a 	ret

00002e68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    2e68:	defffa04 	addi	sp,sp,-24
    2e6c:	dfc00515 	stw	ra,20(sp)
    2e70:	df000415 	stw	fp,16(sp)
    2e74:	dc000315 	stw	r16,12(sp)
    2e78:	df000404 	addi	fp,sp,16
    2e7c:	e13ffd15 	stw	r4,-12(fp)
    2e80:	2805883a 	mov	r2,r5
    2e84:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2e88:	00800044 	movi	r2,1
    2e8c:	e0bffc05 	stb	r2,-16(fp)
    2e90:	e0bffc03 	ldbu	r2,-16(fp)
    2e94:	10800428 	cmpgeui	r2,r2,16
    2e98:	1000111e 	bne	r2,zero,2ee0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    2e9c:	e0bffc03 	ldbu	r2,-16(fp)
    2ea0:	e43ffd17 	ldw	r16,-12(fp)
    2ea4:	014001c4 	movi	r5,7
    2ea8:	1009883a 	mov	r4,r2
    2eac:	000cec40 	call	cec4 <__mulsi3>
    2eb0:	8085883a 	add	r2,r16,r2
    2eb4:	10800304 	addi	r2,r2,12
    2eb8:	10800003 	ldbu	r2,0(r2)
    2ebc:	10c03fcc 	andi	r3,r2,255
    2ec0:	e0bffe03 	ldbu	r2,-8(fp)
    2ec4:	1880021e 	bne	r3,r2,2ed0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    2ec8:	e0bffc03 	ldbu	r2,-16(fp)
    2ecc:	00000506 	br	2ee4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2ed0:	e0bffc03 	ldbu	r2,-16(fp)
    2ed4:	10800044 	addi	r2,r2,1
    2ed8:	e0bffc05 	stb	r2,-16(fp)
    2edc:	003fec06 	br	2e90 <__alt_data_end+0xfc002e90>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    2ee0:	0005883a 	mov	r2,zero
        };
    2ee4:	e6ffff04 	addi	sp,fp,-4
    2ee8:	dfc00217 	ldw	ra,8(sp)
    2eec:	df000117 	ldw	fp,4(sp)
    2ef0:	dc000017 	ldw	r16,0(sp)
    2ef4:	dec00304 	addi	sp,sp,12
    2ef8:	f800283a 	ret

00002efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    2efc:	defffa04 	addi	sp,sp,-24
    2f00:	dfc00515 	stw	ra,20(sp)
    2f04:	df000415 	stw	fp,16(sp)
    2f08:	dc000315 	stw	r16,12(sp)
    2f0c:	df000404 	addi	fp,sp,16
    2f10:	e13ffd15 	stw	r4,-12(fp)
    2f14:	2805883a 	mov	r2,r5
    2f18:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    2f1c:	e0bffe03 	ldbu	r2,-8(fp)
    2f20:	10003026 	beq	r2,zero,2fe4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    2f24:	e0bffe03 	ldbu	r2,-8(fp)
    2f28:	e43ffd17 	ldw	r16,-12(fp)
    2f2c:	014001c4 	movi	r5,7
    2f30:	1009883a 	mov	r4,r2
    2f34:	000cec40 	call	cec4 <__mulsi3>
    2f38:	8085883a 	add	r2,r16,r2
    2f3c:	10800304 	addi	r2,r2,12
    2f40:	10800003 	ldbu	r2,0(r2)
    2f44:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    2f48:	e0bffc43 	ldbu	r2,-15(fp)
    2f4c:	1080100c 	andi	r2,r2,64
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	10001e26 	beq	r2,zero,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f58:	00800044 	movi	r2,1
    2f5c:	e0bffc05 	stb	r2,-16(fp)
    2f60:	e0bffc03 	ldbu	r2,-16(fp)
    2f64:	100d883a 	mov	r6,r2
    2f68:	e17ffc43 	ldbu	r5,-15(fp)
    2f6c:	e13ffd17 	ldw	r4,-12(fp)
    2f70:	00030000 	call	3000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    2f74:	e0bffc05 	stb	r2,-16(fp)
    2f78:	e0bffc03 	ldbu	r2,-16(fp)
    2f7c:	1004c03a 	cmpne	r2,r2,zero
    2f80:	10803fcc 	andi	r2,r2,255
    2f84:	10000526 	beq	r2,zero,2f9c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    2f88:	e0bffc03 	ldbu	r2,-16(fp)
    2f8c:	100b883a 	mov	r5,r2
    2f90:	e13ffd17 	ldw	r4,-12(fp)
    2f94:	0002efc0 	call	2efc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    2f98:	003ff106 	br	2f60 <__alt_data_end+0xfc002f60>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c001c3 	ldbu	r3,7(r2)
    2fa4:	e0bffc43 	ldbu	r2,-15(fp)
    2fa8:	108001cc 	andi	r2,r2,7
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	10803fcc 	andi	r2,r2,255
    2fb4:	1880061e 	bne	r3,r2,2fd0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	108001c3 	ldbu	r2,7(r2)
    2fc0:	10bfffc4 	addi	r2,r2,-1
    2fc4:	1007883a 	mov	r3,r2
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	100b883a 	mov	r5,r2
    2fd8:	e13ffd17 	ldw	r4,-12(fp)
    2fdc:	0002cbc0 	call	2cbc <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    2fe0:	00000106 	br	2fe8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    2fe4:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    2fe8:	e6ffff04 	addi	sp,fp,-4
    2fec:	dfc00217 	ldw	ra,8(sp)
    2ff0:	df000117 	ldw	fp,4(sp)
    2ff4:	dc000017 	ldw	r16,0(sp)
    2ff8:	dec00304 	addi	sp,sp,12
    2ffc:	f800283a 	ret

00003000 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3000:	defff904 	addi	sp,sp,-28
    3004:	dfc00615 	stw	ra,24(sp)
    3008:	df000515 	stw	fp,20(sp)
    300c:	dc000415 	stw	r16,16(sp)
    3010:	df000504 	addi	fp,sp,20
    3014:	e13ffc15 	stw	r4,-16(fp)
    3018:	e17ffd05 	stb	r5,-12(fp)
    301c:	3005883a 	mov	r2,r6
    3020:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3024:	e0bffe03 	ldbu	r2,-8(fp)
    3028:	10000526 	beq	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    302c:	e0bffe03 	ldbu	r2,-8(fp)
    3030:	10800428 	cmpgeui	r2,r2,16
    3034:	1000021e 	bne	r2,zero,3040 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3038:	e0bffe03 	ldbu	r2,-8(fp)
    303c:	00000106 	br	3044 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3040:	00800044 	movi	r2,1
    3044:	e0bffb05 	stb	r2,-20(fp)
    3048:	e0bffb03 	ldbu	r2,-20(fp)
    304c:	10800428 	cmpgeui	r2,r2,16
    3050:	1000161e 	bne	r2,zero,30ac <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3054:	e0bffb03 	ldbu	r2,-20(fp)
    3058:	e43ffc17 	ldw	r16,-16(fp)
    305c:	014001c4 	movi	r5,7
    3060:	1009883a 	mov	r4,r2
    3064:	000cec40 	call	cec4 <__mulsi3>
    3068:	8085883a 	add	r2,r16,r2
    306c:	10800304 	addi	r2,r2,12
    3070:	10800003 	ldbu	r2,0(r2)
    3074:	1004d0fa 	srli	r2,r2,3
    3078:	108001cc 	andi	r2,r2,7
    307c:	1007883a 	mov	r3,r2
    3080:	e0bffd03 	ldbu	r2,-12(fp)
    3084:	108001cc 	andi	r2,r2,7
    3088:	18c03fcc 	andi	r3,r3,255
    308c:	10803fcc 	andi	r2,r2,255
    3090:	1880021e 	bne	r3,r2,309c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3094:	e0bffb03 	ldbu	r2,-20(fp)
    3098:	00000506 	br	30b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    309c:	e0bffb03 	ldbu	r2,-20(fp)
    30a0:	10800044 	addi	r2,r2,1
    30a4:	e0bffb05 	stb	r2,-20(fp)
    30a8:	003fe706 	br	3048 <__alt_data_end+0xfc003048>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    30ac:	0005883a 	mov	r2,zero
        };
    30b0:	e6ffff04 	addi	sp,fp,-4
    30b4:	dfc00217 	ldw	ra,8(sp)
    30b8:	df000117 	ldw	fp,4(sp)
    30bc:	dc000017 	ldw	r16,0(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret

000030c8 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    30c8:	defffb04 	addi	sp,sp,-20
    30cc:	dfc00415 	stw	ra,16(sp)
    30d0:	df000315 	stw	fp,12(sp)
    30d4:	df000304 	addi	fp,sp,12
    30d8:	e13ffe15 	stw	r4,-8(fp)
    30dc:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    30e0:	e0bffe17 	ldw	r2,-8(fp)
    30e4:	1009883a 	mov	r4,r2
    30e8:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	10800104 	addi	r2,r2,4
    30f4:	1009883a 	mov	r4,r2
    30f8:	0004ab80 	call	4ab8 <_ZN17UsbConfigXtracterC1Ev>
    30fc:	008000b4 	movhi	r2,2
    3100:	108f1804 	addi	r2,r2,15456
    3104:	e0fffe17 	ldw	r3,-8(fp)
    3108:	18800015 	stw	r2,0(r3)
    310c:	008000b4 	movhi	r2,2
    3110:	108f2504 	addi	r2,r2,15508
    3114:	e0fffe17 	ldw	r3,-8(fp)
    3118:	18800115 	stw	r2,4(r3)
    311c:	e0bffe17 	ldw	r2,-8(fp)
    3120:	e0ffff17 	ldw	r3,-4(fp)
    3124:	10c00315 	stw	r3,12(r2)
    3128:	e0bffe17 	ldw	r2,-8(fp)
    312c:	10000405 	stb	zero,16(r2)
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	00c00044 	movi	r3,1
    3138:	10c006c5 	stb	r3,27(r2)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	10000715 	stw	zero,28(r2)
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10000905 	stb	zero,36(r2)
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3154:	e03ffd05 	stb	zero,-12(fp)
    3158:	e0bffd03 	ldbu	r2,-12(fp)
    315c:	108000e8 	cmpgeui	r2,r2,3
    3160:	1000431e 	bne	r2,zero,3270 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3164:	e0fffd03 	ldbu	r3,-12(fp)
    3168:	e13ffe17 	ldw	r4,-8(fp)
    316c:	1805883a 	mov	r2,r3
    3170:	1085883a 	add	r2,r2,r2
    3174:	10c5883a 	add	r2,r2,r3
    3178:	2085883a 	add	r2,r4,r2
    317c:	10800444 	addi	r2,r2,17
    3180:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3184:	e13ffd03 	ldbu	r4,-12(fp)
    3188:	e0bffd03 	ldbu	r2,-12(fp)
    318c:	10000226 	beq	r2,zero,3198 <_ZN7XBOXONEC1EP3USB+0xd0>
    3190:	0007883a 	mov	r3,zero
    3194:	00000106 	br	319c <_ZN7XBOXONEC1EP3USB+0xd4>
    3198:	00c00204 	movi	r3,8
    319c:	e17ffe17 	ldw	r5,-8(fp)
    31a0:	2005883a 	mov	r2,r4
    31a4:	1085883a 	add	r2,r2,r2
    31a8:	1105883a 	add	r2,r2,r4
    31ac:	2885883a 	add	r2,r5,r2
    31b0:	10800484 	addi	r2,r2,18
    31b4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    31b8:	e0fffd03 	ldbu	r3,-12(fp)
    31bc:	e13ffe17 	ldw	r4,-8(fp)
    31c0:	1805883a 	mov	r2,r3
    31c4:	1085883a 	add	r2,r2,r2
    31c8:	10c5883a 	add	r2,r2,r3
    31cc:	2085883a 	add	r2,r4,r2
    31d0:	10800404 	addi	r2,r2,16
    31d4:	110000c3 	ldbu	r4,3(r2)
    31d8:	00ffff84 	movi	r3,-2
    31dc:	20c6703a 	and	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    31e4:	e0fffd03 	ldbu	r3,-12(fp)
    31e8:	e13ffe17 	ldw	r4,-8(fp)
    31ec:	1805883a 	mov	r2,r3
    31f0:	1085883a 	add	r2,r2,r2
    31f4:	10c5883a 	add	r2,r2,r3
    31f8:	2085883a 	add	r2,r4,r2
    31fc:	10800404 	addi	r2,r2,16
    3200:	110000c3 	ldbu	r4,3(r2)
    3204:	00ffff44 	movi	r3,-3
    3208:	20c6703a 	and	r3,r4,r3
    320c:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3210:	e13ffd03 	ldbu	r4,-12(fp)
    3214:	e0bffd03 	ldbu	r2,-12(fp)
    3218:	10000226 	beq	r2,zero,3224 <_ZN7XBOXONEC1EP3USB+0x15c>
    321c:	00c00044 	movi	r3,1
    3220:	00000106 	br	3228 <_ZN7XBOXONEC1EP3USB+0x160>
    3224:	00c003c4 	movi	r3,15
    3228:	e17ffe17 	ldw	r5,-8(fp)
    322c:	2005883a 	mov	r2,r4
    3230:	1085883a 	add	r2,r2,r2
    3234:	1105883a 	add	r2,r2,r4
    3238:	2885883a 	add	r2,r5,r2
    323c:	10800404 	addi	r2,r2,16
    3240:	18c7883a 	add	r3,r3,r3
    3244:	18cb883a 	add	r5,r3,r3
    3248:	10c000c3 	ldbu	r3,3(r2)
    324c:	18c000cc 	andi	r3,r3,3
    3250:	1809883a 	mov	r4,r3
    3254:	2807883a 	mov	r3,r5
    3258:	20c6b03a 	or	r3,r4,r3
    325c:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3260:	e0bffd03 	ldbu	r2,-12(fp)
    3264:	10800044 	addi	r2,r2,1
    3268:	e0bffd05 	stb	r2,-12(fp)
    326c:	003fba06 	br	3158 <__alt_data_end+0xfc003158>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	10800317 	ldw	r2,12(r2)
    3278:	10000626 	beq	r2,zero,3294 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800317 	ldw	r2,12(r2)
    3284:	e0fffe17 	ldw	r3,-8(fp)
    3288:	180b883a 	mov	r5,r3
    328c:	1009883a 	mov	r4,r2
    3290:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3294:	0001883a 	nop
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00117 	ldw	ra,4(sp)
    32a0:	df000017 	ldw	fp,0(sp)
    32a4:	dec00204 	addi	sp,sp,8
    32a8:	f800283a 	ret

000032ac <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    32ac:	deffde04 	addi	sp,sp,-136
    32b0:	dfc02115 	stw	ra,132(sp)
    32b4:	df002015 	stw	fp,128(sp)
    32b8:	df002004 	addi	fp,sp,128
    32bc:	e13ffc15 	stw	r4,-16(fp)
    32c0:	2809883a 	mov	r4,r5
    32c4:	3007883a 	mov	r3,r6
    32c8:	3805883a 	mov	r2,r7
    32cc:	e13ffd05 	stb	r4,-12(fp)
    32d0:	e0fffe05 	stb	r3,-8(fp)
    32d4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    32d8:	e0bfe744 	addi	r2,fp,-99
    32dc:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    32e0:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    32e4:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    32e8:	e0bffc17 	ldw	r2,-16(fp)
    32ec:	10800317 	ldw	r2,12(r2)
    32f0:	1009883a 	mov	r4,r2
    32f4:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    32f8:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    32fc:	e0bffc17 	ldw	r2,-16(fp)
    3300:	10800403 	ldbu	r2,16(r2)
    3304:	10803fcc 	andi	r2,r2,255
    3308:	10000226 	beq	r2,zero,3314 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    330c:	00bff644 	movi	r2,-39
    3310:	00017606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3314:	e0bfe517 	ldw	r2,-108(fp)
    3318:	10800017 	ldw	r2,0(r2)
    331c:	10800017 	ldw	r2,0(r2)
    3320:	000b883a 	mov	r5,zero
    3324:	e13fe517 	ldw	r4,-108(fp)
    3328:	103ee83a 	callr	r2
    332c:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3330:	e0bfe317 	ldw	r2,-116(fp)
    3334:	1000021e 	bne	r2,zero,3340 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3338:	00bff584 	movi	r2,-42
    333c:	00016b06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3340:	e0bfe317 	ldw	r2,-116(fp)
    3344:	10c00003 	ldbu	r3,0(r2)
    3348:	11000043 	ldbu	r4,1(r2)
    334c:	2008923a 	slli	r4,r4,8
    3350:	20c6b03a 	or	r3,r4,r3
    3354:	11000083 	ldbu	r4,2(r2)
    3358:	2008943a 	slli	r4,r4,16
    335c:	20c6b03a 	or	r3,r4,r3
    3360:	108000c3 	ldbu	r2,3(r2)
    3364:	1004963a 	slli	r2,r2,24
    3368:	10c4b03a 	or	r2,r2,r3
    336c:	1000021e 	bne	r2,zero,3378 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3370:	00bff5c4 	movi	r2,-41
    3374:	00015d06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3378:	e0bfe317 	ldw	r2,-116(fp)
    337c:	10c00003 	ldbu	r3,0(r2)
    3380:	11000043 	ldbu	r4,1(r2)
    3384:	2008923a 	slli	r4,r4,8
    3388:	20c6b03a 	or	r3,r4,r3
    338c:	11000083 	ldbu	r4,2(r2)
    3390:	2008943a 	slli	r4,r4,16
    3394:	20c6b03a 	or	r3,r4,r3
    3398:	108000c3 	ldbu	r2,3(r2)
    339c:	1004963a 	slli	r2,r2,24
    33a0:	10c4b03a 	or	r2,r2,r3
    33a4:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    33a8:	e0bffc17 	ldw	r2,-16(fp)
    33ac:	10c00444 	addi	r3,r2,17
    33b0:	e0bfe317 	ldw	r2,-116(fp)
    33b4:	19803fcc 	andi	r6,r3,255
    33b8:	11000003 	ldbu	r4,0(r2)
    33bc:	2008703a 	and	r4,r4,zero
    33c0:	200b883a 	mov	r5,r4
    33c4:	3009883a 	mov	r4,r6
    33c8:	2908b03a 	or	r4,r5,r4
    33cc:	11000005 	stb	r4,0(r2)
    33d0:	1808d23a 	srli	r4,r3,8
    33d4:	21803fcc 	andi	r6,r4,255
    33d8:	11000043 	ldbu	r4,1(r2)
    33dc:	2008703a 	and	r4,r4,zero
    33e0:	200b883a 	mov	r5,r4
    33e4:	3009883a 	mov	r4,r6
    33e8:	2908b03a 	or	r4,r5,r4
    33ec:	11000045 	stb	r4,1(r2)
    33f0:	1808d43a 	srli	r4,r3,16
    33f4:	21803fcc 	andi	r6,r4,255
    33f8:	11000083 	ldbu	r4,2(r2)
    33fc:	2008703a 	and	r4,r4,zero
    3400:	200b883a 	mov	r5,r4
    3404:	3009883a 	mov	r4,r6
    3408:	2908b03a 	or	r4,r5,r4
    340c:	11000085 	stb	r4,2(r2)
    3410:	180ad63a 	srli	r5,r3,24
    3414:	10c000c3 	ldbu	r3,3(r2)
    3418:	1806703a 	and	r3,r3,zero
    341c:	1809883a 	mov	r4,r3
    3420:	2807883a 	mov	r3,r5
    3424:	20c6b03a 	or	r3,r4,r3
    3428:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    342c:	e0bfe317 	ldw	r2,-116(fp)
    3430:	e0ffff03 	ldbu	r3,-4(fp)
    3434:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3438:	e0bffc17 	ldw	r2,-16(fp)
    343c:	10c00317 	ldw	r3,12(r2)
    3440:	00800484 	movi	r2,18
    3444:	113fffcc 	andi	r4,r2,65535
    3448:	e0bfe744 	addi	r2,fp,-99
    344c:	d8800015 	stw	r2,0(sp)
    3450:	200f883a 	mov	r7,r4
    3454:	000d883a 	mov	r6,zero
    3458:	000b883a 	mov	r5,zero
    345c:	1809883a 	mov	r4,r3
    3460:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    3464:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3468:	e0bfe317 	ldw	r2,-116(fp)
    346c:	e0ffe417 	ldw	r3,-112(fp)
    3470:	19403fcc 	andi	r5,r3,255
    3474:	10c00003 	ldbu	r3,0(r2)
    3478:	1806703a 	and	r3,r3,zero
    347c:	1809883a 	mov	r4,r3
    3480:	2807883a 	mov	r3,r5
    3484:	20c6b03a 	or	r3,r4,r3
    3488:	10c00005 	stb	r3,0(r2)
    348c:	e0ffe417 	ldw	r3,-112(fp)
    3490:	1806d23a 	srli	r3,r3,8
    3494:	19403fcc 	andi	r5,r3,255
    3498:	10c00043 	ldbu	r3,1(r2)
    349c:	1806703a 	and	r3,r3,zero
    34a0:	1809883a 	mov	r4,r3
    34a4:	2807883a 	mov	r3,r5
    34a8:	20c6b03a 	or	r3,r4,r3
    34ac:	10c00045 	stb	r3,1(r2)
    34b0:	e0ffe417 	ldw	r3,-112(fp)
    34b4:	1806d43a 	srli	r3,r3,16
    34b8:	19403fcc 	andi	r5,r3,255
    34bc:	10c00083 	ldbu	r3,2(r2)
    34c0:	1806703a 	and	r3,r3,zero
    34c4:	1809883a 	mov	r4,r3
    34c8:	2807883a 	mov	r3,r5
    34cc:	20c6b03a 	or	r3,r4,r3
    34d0:	10c00085 	stb	r3,2(r2)
    34d4:	e0ffe417 	ldw	r3,-112(fp)
    34d8:	180ad63a 	srli	r5,r3,24
    34dc:	10c000c3 	ldbu	r3,3(r2)
    34e0:	1806703a 	and	r3,r3,zero
    34e4:	1809883a 	mov	r4,r3
    34e8:	2807883a 	mov	r3,r5
    34ec:	20c6b03a 	or	r3,r4,r3
    34f0:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    34f4:	e0bfe103 	ldbu	r2,-124(fp)
    34f8:	1000e61e 	bne	r2,zero,3894 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    34fc:	e0bfe217 	ldw	r2,-120(fp)
    3500:	10c00203 	ldbu	r3,8(r2)
    3504:	10800243 	ldbu	r2,9(r2)
    3508:	1004923a 	slli	r2,r2,8
    350c:	10c4b03a 	or	r2,r2,r3
    3510:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3514:	e0bfe217 	ldw	r2,-120(fp)
    3518:	10c00283 	ldbu	r3,10(r2)
    351c:	108002c3 	ldbu	r2,11(r2)
    3520:	1004923a 	slli	r2,r2,8
    3524:	10c4b03a 	or	r2,r2,r3
    3528:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    352c:	e0bffc17 	ldw	r2,-16(fp)
    3530:	10800017 	ldw	r2,0(r2)
    3534:	10800604 	addi	r2,r2,24
    3538:	10800017 	ldw	r2,0(r2)
    353c:	e0ffe60b 	ldhu	r3,-104(fp)
    3540:	e13fe68b 	ldhu	r4,-102(fp)
    3544:	200d883a 	mov	r6,r4
    3548:	180b883a 	mov	r5,r3
    354c:	e13ffc17 	ldw	r4,-16(fp)
    3550:	103ee83a 	callr	r2
    3554:	1080005c 	xori	r2,r2,1
    3558:	10803fcc 	andi	r2,r2,255
    355c:	1000d51e 	bne	r2,zero,38b4 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3560:	e0bfe517 	ldw	r2,-108(fp)
    3564:	10800017 	ldw	r2,0(r2)
    3568:	10800104 	addi	r2,r2,4
    356c:	10800017 	ldw	r2,0(r2)
    3570:	e0fffd03 	ldbu	r3,-12(fp)
    3574:	e13ffe03 	ldbu	r4,-8(fp)
    3578:	200f883a 	mov	r7,r4
    357c:	000d883a 	mov	r6,zero
    3580:	180b883a 	mov	r5,r3
    3584:	e13fe517 	ldw	r4,-108(fp)
    3588:	103ee83a 	callr	r2
    358c:	1007883a 	mov	r3,r2
    3590:	e0bffc17 	ldw	r2,-16(fp)
    3594:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3598:	e0bffc17 	ldw	r2,-16(fp)
    359c:	10800403 	ldbu	r2,16(r2)
    35a0:	10803fcc 	andi	r2,r2,255
    35a4:	1000021e 	bne	r2,zero,35b0 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    35a8:	00bff504 	movi	r2,-44
    35ac:	0000cf06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    35b0:	e0bfe217 	ldw	r2,-120(fp)
    35b4:	10c001c3 	ldbu	r3,7(r2)
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    35c0:	e0bffc17 	ldw	r2,-16(fp)
    35c4:	10c00317 	ldw	r3,12(r2)
    35c8:	e0bffc17 	ldw	r2,-16(fp)
    35cc:	10800403 	ldbu	r2,16(r2)
    35d0:	10803fcc 	andi	r2,r2,255
    35d4:	100f883a 	mov	r7,r2
    35d8:	000d883a 	mov	r6,zero
    35dc:	000b883a 	mov	r5,zero
    35e0:	1809883a 	mov	r4,r3
    35e4:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    35e8:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    35ec:	e0bfe103 	ldbu	r2,-124(fp)
    35f0:	10001026 	beq	r2,zero,3634 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    35f4:	e0bfe317 	ldw	r2,-116(fp)
    35f8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    35fc:	e0bfe517 	ldw	r2,-108(fp)
    3600:	10800017 	ldw	r2,0(r2)
    3604:	10800204 	addi	r2,r2,8
    3608:	10800017 	ldw	r2,0(r2)
    360c:	e0fffc17 	ldw	r3,-16(fp)
    3610:	18c00403 	ldbu	r3,16(r3)
    3614:	18c03fcc 	andi	r3,r3,255
    3618:	180b883a 	mov	r5,r3
    361c:	e13fe517 	ldw	r4,-108(fp)
    3620:	103ee83a 	callr	r2
                bAddress = 0;
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    362c:	e0bfe103 	ldbu	r2,-124(fp)
    3630:	0000ae06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3634:	e0bfe317 	ldw	r2,-116(fp)
    3638:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	e0fffc17 	ldw	r3,-16(fp)
    364c:	18c00403 	ldbu	r3,16(r3)
    3650:	18c03fcc 	andi	r3,r3,255
    3654:	180b883a 	mov	r5,r3
    3658:	e13fe517 	ldw	r4,-108(fp)
    365c:	103ee83a 	callr	r2
    3660:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3664:	e0bfe317 	ldw	r2,-116(fp)
    3668:	1000021e 	bne	r2,zero,3674 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    366c:	00bff584 	movi	r2,-42
    3670:	00009e06 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3674:	e0bfe317 	ldw	r2,-116(fp)
    3678:	e0ffff03 	ldbu	r3,-4(fp)
    367c:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	10c00317 	ldw	r3,12(r2)
    3688:	e0bffc17 	ldw	r2,-16(fp)
    368c:	10800403 	ldbu	r2,16(r2)
    3690:	11003fcc 	andi	r4,r2,255
    3694:	e0bffc17 	ldw	r2,-16(fp)
    3698:	10800444 	addi	r2,r2,17
    369c:	100f883a 	mov	r7,r2
    36a0:	01800044 	movi	r6,1
    36a4:	200b883a 	mov	r5,r4
    36a8:	1809883a 	mov	r4,r3
    36ac:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    36b0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    36b4:	e0bfe103 	ldbu	r2,-124(fp)
    36b8:	1000781e 	bne	r2,zero,389c <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    36bc:	e0bfe217 	ldw	r2,-120(fp)
    36c0:	10800443 	ldbu	r2,17(r2)
    36c4:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    36c8:	e0bfe703 	ldbu	r2,-100(fp)
    36cc:	01402004 	movi	r5,128
    36d0:	1009883a 	mov	r4,r2
    36d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    36d8:	e03fe145 	stb	zero,-123(fp)
    36dc:	e0ffe143 	ldbu	r3,-123(fp)
    36e0:	e0bfe703 	ldbu	r2,-100(fp)
    36e4:	1880222e 	bgeu	r3,r2,3770 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    36e8:	e0bffc17 	ldw	r2,-16(fp)
    36ec:	10c00104 	addi	r3,r2,4
    36f0:	e0bfed04 	addi	r2,fp,-76
    36f4:	180b883a 	mov	r5,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	0004b200 	call	4b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10c00317 	ldw	r3,12(r2)
    3708:	e0bffc17 	ldw	r2,-16(fp)
    370c:	10800403 	ldbu	r2,16(r2)
    3710:	11003fcc 	andi	r4,r2,255
    3714:	e17fe143 	ldbu	r5,-123(fp)
    3718:	e0bfed04 	addi	r2,fp,-76
    371c:	d8800015 	stw	r2,0(sp)
    3720:	280f883a 	mov	r7,r5
    3724:	000d883a 	mov	r6,zero
    3728:	200b883a 	mov	r5,r4
    372c:	1809883a 	mov	r4,r3
    3730:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3734:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3738:	e0bfe103 	ldbu	r2,-124(fp)
    373c:	10000226 	beq	r2,zero,3748 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3740:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3744:	00006206 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	108006c3 	ldbu	r2,27(r2)
    3750:	10803fcc 	andi	r2,r2,255
    3754:	108000f0 	cmpltui	r2,r2,3
    3758:	10000426 	beq	r2,zero,376c <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    375c:	e0bfe143 	ldbu	r2,-123(fp)
    3760:	10800044 	addi	r2,r2,1
    3764:	e0bfe145 	stb	r2,-123(fp)
    3768:	003fdc06 	br	36dc <__alt_data_end+0xfc0036dc>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    376c:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3770:	e0bffc17 	ldw	r2,-16(fp)
    3774:	108006c3 	ldbu	r2,27(r2)
    3778:	10803fcc 	andi	r2,r2,255
    377c:	108000e8 	cmpgeui	r2,r2,3
    3780:	10004e26 	beq	r2,zero,38bc <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3784:	e0bffc17 	ldw	r2,-16(fp)
    3788:	10c00317 	ldw	r3,12(r2)
    378c:	e0bffc17 	ldw	r2,-16(fp)
    3790:	10800403 	ldbu	r2,16(r2)
    3794:	11003fcc 	andi	r4,r2,255
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	108006c3 	ldbu	r2,27(r2)
    37a0:	11403fcc 	andi	r5,r2,255
    37a4:	e0bffc17 	ldw	r2,-16(fp)
    37a8:	10800444 	addi	r2,r2,17
    37ac:	100f883a 	mov	r7,r2
    37b0:	280d883a 	mov	r6,r5
    37b4:	200b883a 	mov	r5,r4
    37b8:	1809883a 	mov	r4,r3
    37bc:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    37c0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    37c4:	e0bfe103 	ldbu	r2,-124(fp)
    37c8:	1000361e 	bne	r2,zero,38a4 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    37cc:	01003204 	movi	r4,200
    37d0:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    37d4:	e0bffc17 	ldw	r2,-16(fp)
    37d8:	10c00317 	ldw	r3,12(r2)
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10800403 	ldbu	r2,16(r2)
    37e4:	11003fcc 	andi	r4,r2,255
    37e8:	e0bffc17 	ldw	r2,-16(fp)
    37ec:	10800443 	ldbu	r2,17(r2)
    37f0:	11403fcc 	andi	r5,r2,255
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	10800683 	ldbu	r2,26(r2)
    37fc:	10803fcc 	andi	r2,r2,255
    3800:	100f883a 	mov	r7,r2
    3804:	280d883a 	mov	r6,r5
    3808:	200b883a 	mov	r5,r4
    380c:	1809883a 	mov	r4,r3
    3810:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    3814:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3818:	e0bfe103 	ldbu	r2,-124(fp)
    381c:	1000231e 	bne	r2,zero,38ac <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3820:	01003204 	movi	r4,200
    3824:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3828:	e0bffc17 	ldw	r2,-16(fp)
    382c:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3830:	00800144 	movi	r2,5
    3834:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3838:	00800804 	movi	r2,32
    383c:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3840:	00800044 	movi	r2,1
    3844:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3848:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    384c:	e0bfebc4 	addi	r2,fp,-81
    3850:	01800144 	movi	r6,5
    3854:	100b883a 	mov	r5,r2
    3858:	e13ffc17 	ldw	r4,-16(fp)
    385c:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
    3860:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3864:	e0bfe103 	ldbu	r2,-124(fp)
    3868:	1000181e 	bne	r2,zero,38cc <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    386c:	e13ffc17 	ldw	r4,-16(fp)
    3870:	00042140 	call	4214 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	00c00044 	movi	r3,1
    387c:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	00c00044 	movi	r3,1
    3888:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    388c:	0005883a 	mov	r2,zero
    3890:	00001606 	br	38ec <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3894:	0001883a 	nop
    3898:	00000d06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    389c:	0001883a 	nop
    38a0:	00000b06 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    38a4:	0001883a 	nop
    38a8:	00000906 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    38ac:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    38b0:	00000706 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    38b4:	0001883a 	nop
    38b8:	00000106 	br	38c0 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    38bc:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    38c0:	00bff444 	movi	r2,-47
    38c4:	e0bfe105 	stb	r2,-124(fp)
    38c8:	00000106 	br	38d0 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    38cc:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10800017 	ldw	r2,0(r2)
    38d8:	10800204 	addi	r2,r2,8
    38dc:	10800017 	ldw	r2,0(r2)
    38e0:	e13ffc17 	ldw	r4,-16(fp)
    38e4:	103ee83a 	callr	r2
        return rcode;
    38e8:	e0bfe103 	ldbu	r2,-124(fp)
}
    38ec:	e037883a 	mov	sp,fp
    38f0:	dfc00117 	ldw	ra,4(sp)
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00204 	addi	sp,sp,8
    38fc:	f800283a 	ret

00003900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3900:	defff904 	addi	sp,sp,-28
    3904:	df000615 	stw	fp,24(sp)
    3908:	df000604 	addi	fp,sp,24
    390c:	e13ffb15 	stw	r4,-20(fp)
    3910:	3009883a 	mov	r4,r6
    3914:	3807883a 	mov	r3,r7
    3918:	e0800117 	ldw	r2,4(fp)
    391c:	e17ffc05 	stb	r5,-16(fp)
    3920:	e13ffd05 	stb	r4,-12(fp)
    3924:	e0fffe05 	stb	r3,-8(fp)
    3928:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    392c:	e0bffb17 	ldw	r2,-20(fp)
    3930:	e0fffc03 	ldbu	r3,-16(fp)
    3934:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3938:	e0800217 	ldw	r2,8(fp)
    393c:	108000c3 	ldbu	r2,3(r2)
    3940:	10803fcc 	andi	r2,r2,255
    3944:	108000cc 	andi	r2,r2,3
    3948:	108000d8 	cmpnei	r2,r2,3
    394c:	1000361e 	bne	r2,zero,3a28 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3950:	e0800217 	ldw	r2,8(fp)
    3954:	10800083 	ldbu	r2,2(r2)
    3958:	10803fcc 	andi	r2,r2,255
    395c:	1080201c 	xori	r2,r2,128
    3960:	10bfe004 	addi	r2,r2,-128
    3964:	1000020e 	bge	r2,zero,3970 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3968:	00800084 	movi	r2,2
    396c:	00000106 	br	3974 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3970:	00800044 	movi	r2,1
    3974:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3978:	e0fffa03 	ldbu	r3,-24(fp)
    397c:	e0800217 	ldw	r2,8(fp)
    3980:	10800083 	ldbu	r2,2(r2)
    3984:	108003cc 	andi	r2,r2,15
    3988:	100b883a 	mov	r5,r2
    398c:	e13ffb17 	ldw	r4,-20(fp)
    3990:	1805883a 	mov	r2,r3
    3994:	1085883a 	add	r2,r2,r2
    3998:	10c5883a 	add	r2,r2,r3
    399c:	2085883a 	add	r2,r4,r2
    39a0:	10800444 	addi	r2,r2,17
    39a4:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    39a8:	e0fffa03 	ldbu	r3,-24(fp)
    39ac:	e0800217 	ldw	r2,8(fp)
    39b0:	11000103 	ldbu	r4,4(r2)
    39b4:	10800143 	ldbu	r2,5(r2)
    39b8:	1004923a 	slli	r2,r2,8
    39bc:	1104b03a 	or	r2,r2,r4
    39c0:	100b883a 	mov	r5,r2
    39c4:	e13ffb17 	ldw	r4,-20(fp)
    39c8:	1805883a 	mov	r2,r3
    39cc:	1085883a 	add	r2,r2,r2
    39d0:	10c5883a 	add	r2,r2,r3
    39d4:	2085883a 	add	r2,r4,r2
    39d8:	10800484 	addi	r2,r2,18
    39dc:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    39e0:	e0bffb17 	ldw	r2,-20(fp)
    39e4:	10c00903 	ldbu	r3,36(r2)
    39e8:	e0800217 	ldw	r2,8(fp)
    39ec:	10800183 	ldbu	r2,6(r2)
    39f0:	18c03fcc 	andi	r3,r3,255
    39f4:	10803fcc 	andi	r2,r2,255
    39f8:	1880042e 	bgeu	r3,r2,3a0c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    39fc:	e0800217 	ldw	r2,8(fp)
    3a00:	10c00183 	ldbu	r3,6(r2)
    3a04:	e0bffb17 	ldw	r2,-20(fp)
    3a08:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	108006c3 	ldbu	r2,27(r2)
    3a14:	10800044 	addi	r2,r2,1
    3a18:	1007883a 	mov	r3,r2
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10c006c5 	stb	r3,27(r2)
    3a24:	00000106 	br	3a2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3a28:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	df000017 	ldw	fp,0(sp)
    3a34:	dec00104 	addi	sp,sp,4
    3a38:	f800283a 	ret

00003a3c <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3a3c:	213fff04 	addi	r4,r4,-4
    3a40:	00039001 	jmpi	3900 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003a44 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3a44:	defffd04 	addi	sp,sp,-12
    3a48:	df000215 	stw	fp,8(sp)
    3a4c:	df000204 	addi	fp,sp,8
    3a50:	e13ffe15 	stw	r4,-8(fp)
    3a54:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3a58:	0001883a 	nop
    3a5c:	e037883a 	mov	sp,fp
    3a60:	df000017 	ldw	fp,0(sp)
    3a64:	dec00104 	addi	sp,sp,4
    3a68:	f800283a 	ret

00003a6c <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3a6c:	defffd04 	addi	sp,sp,-12
    3a70:	dfc00215 	stw	ra,8(sp)
    3a74:	df000115 	stw	fp,4(sp)
    3a78:	df000104 	addi	fp,sp,4
    3a7c:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3a88:	e0bfff17 	ldw	r2,-4(fp)
    3a8c:	10800317 	ldw	r2,12(r2)
    3a90:	1009883a 	mov	r4,r2
    3a94:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    3a98:	1009883a 	mov	r4,r2
    3a9c:	20800017 	ldw	r2,0(r4)
    3aa0:	10800204 	addi	r2,r2,8
    3aa4:	10800017 	ldw	r2,0(r2)
    3aa8:	e0ffff17 	ldw	r3,-4(fp)
    3aac:	18c00403 	ldbu	r3,16(r3)
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	180b883a 	mov	r5,r3
    3ab8:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3abc:	e0bfff17 	ldw	r2,-4(fp)
    3ac0:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	00c00044 	movi	r3,1
    3acc:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ae0:	e0bfff17 	ldw	r2,-4(fp)
    3ae4:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3ae8:	0005883a 	mov	r2,zero
}
    3aec:	e037883a 	mov	sp,fp
    3af0:	dfc00117 	ldw	ra,4(sp)
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00204 	addi	sp,sp,8
    3afc:	f800283a 	ret

00003b00 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3b00:	defffa04 	addi	sp,sp,-24
    3b04:	dfc00515 	stw	ra,20(sp)
    3b08:	df000415 	stw	fp,16(sp)
    3b0c:	df000404 	addi	fp,sp,16
    3b10:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3b14:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3b18:	e0bfff17 	ldw	r2,-4(fp)
    3b1c:	10800943 	ldbu	r2,37(r2)
    3b20:	1080005c 	xori	r2,r2,1
    3b24:	10803fcc 	andi	r2,r2,255
    3b28:	10000226 	beq	r2,zero,3b34 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3b2c:	0005883a 	mov	r2,zero
    3b30:	00002c06 	br	3be4 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3b34:	00006dc0 	call	6dc <_Z6millisv>
    3b38:	1007883a 	mov	r3,r2
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	10800717 	ldw	r2,28(r2)
    3b44:	1885c83a 	sub	r2,r3,r2
    3b48:	0084303a 	nor	r2,zero,r2
    3b4c:	1004d7fa 	srli	r2,r2,31
    3b50:	10803fcc 	andi	r2,r2,255
    3b54:	10002226 	beq	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3b58:	00006dc0 	call	6dc <_Z6millisv>
    3b5c:	1007883a 	mov	r3,r2
    3b60:	e0bfff17 	ldw	r2,-4(fp)
    3b64:	10800903 	ldbu	r2,36(r2)
    3b68:	10803fcc 	andi	r2,r2,255
    3b6c:	1887883a 	add	r3,r3,r2
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3b78:	e0bfff17 	ldw	r2,-4(fp)
    3b7c:	10800603 	ldbu	r2,24(r2)
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3b88:	e0bfff17 	ldw	r2,-4(fp)
    3b8c:	11000317 	ldw	r4,12(r2)
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11403fcc 	andi	r5,r2,255
    3b9c:	e0bfff17 	ldw	r2,-4(fp)
    3ba0:	108005c3 	ldbu	r2,23(r2)
    3ba4:	11803fcc 	andi	r6,r2,255
    3ba8:	e0bfff17 	ldw	r2,-4(fp)
    3bac:	10800f84 	addi	r2,r2,62
    3bb0:	e0ffff17 	ldw	r3,-4(fp)
    3bb4:	18c00903 	ldbu	r3,36(r3)
    3bb8:	18c03fcc 	andi	r3,r3,255
    3bbc:	e1fffe84 	addi	r7,fp,-6
    3bc0:	d8c00115 	stw	r3,4(sp)
    3bc4:	d8800015 	stw	r2,0(sp)
    3bc8:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3bcc:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3bd0:	e0bffe43 	ldbu	r2,-7(fp)
    3bd4:	1000021e 	bne	r2,zero,3be0 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3bd8:	e13fff17 	ldw	r4,-4(fp)
    3bdc:	0003bf80 	call	3bf8 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3be0:	e0bffe03 	ldbu	r2,-8(fp)
}
    3be4:	e037883a 	mov	sp,fp
    3be8:	dfc00117 	ldw	ra,4(sp)
    3bec:	df000017 	ldw	fp,0(sp)
    3bf0:	dec00204 	addi	sp,sp,8
    3bf4:	f800283a 	ret

00003bf8 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3bf8:	defffd04 	addi	sp,sp,-12
    3bfc:	df000215 	stw	fp,8(sp)
    3c00:	df000204 	addi	fp,sp,8
    3c04:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    3c08:	e0bfff17 	ldw	r2,-4(fp)
    3c0c:	10800f83 	ldbu	r2,62(r2)
    3c10:	10803fcc 	andi	r2,r2,255
    3c14:	108001d8 	cmpnei	r2,r2,7
    3c18:	10002f1e 	bne	r2,zero,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    3c1c:	e0bfff17 	ldw	r2,-4(fp)
    3c20:	10801083 	ldbu	r2,66(r2)
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	10800058 	cmpnei	r2,r2,1
    3c2c:	10000a1e 	bne	r2,zero,3c58 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c30:	e0bfff17 	ldw	r2,-4(fp)
    3c34:	10c0098b 	ldhu	r3,38(r2)
    3c38:	008000b4 	movhi	r2,2
    3c3c:	108f1484 	addi	r2,r2,15442
    3c40:	1080000b 	ldhu	r2,0(r2)
    3c44:	1884b03a 	or	r2,r3,r2
    3c48:	1007883a 	mov	r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10c0098d 	sth	r3,38(r2)
    3c54:	00000b06 	br	3c84 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	1080098b 	ldhu	r2,38(r2)
    3c60:	1007883a 	mov	r3,r2
    3c64:	008000b4 	movhi	r2,2
    3c68:	108f1484 	addi	r2,r2,15442
    3c6c:	1080000b 	ldhu	r2,0(r2)
    3c70:	0084303a 	nor	r2,zero,r2
    3c74:	1884703a 	and	r2,r3,r2
    3c78:	1007883a 	mov	r3,r2
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10c0098b 	ldhu	r3,38(r2)
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	10800a0b 	ldhu	r2,40(r2)
    3c94:	18ffffcc 	andi	r3,r3,65535
    3c98:	10bfffcc 	andi	r2,r2,65535
    3c9c:	18800e26 	beq	r3,r2,3cd8 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ca0:	e0bfff17 	ldw	r2,-4(fp)
    3ca4:	1080098b 	ldhu	r2,38(r2)
    3ca8:	1007883a 	mov	r3,r2
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10800a0b 	ldhu	r2,40(r2)
    3cb4:	0084303a 	nor	r2,zero,r2
    3cb8:	1884703a 	and	r2,r3,r2
    3cbc:	1007883a 	mov	r3,r2
    3cc0:	e0bfff17 	ldw	r2,-4(fp)
    3cc4:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    3cc8:	e0bfff17 	ldw	r2,-4(fp)
    3ccc:	10c0098b 	ldhu	r3,38(r2)
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    3cd8:	e0bfff17 	ldw	r2,-4(fp)
    3cdc:	10800f83 	ldbu	r2,62(r2)
    3ce0:	10803fcc 	andi	r2,r2,255
    3ce4:	10800820 	cmpeqi	r2,r2,32
    3ce8:	1000b026 	beq	r2,zero,3fac <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    3cec:	e0bfff17 	ldw	r2,-4(fp)
    3cf0:	10c0098b 	ldhu	r3,38(r2)
    3cf4:	008000b4 	movhi	r2,2
    3cf8:	108f1484 	addi	r2,r2,15442
    3cfc:	1080000b 	ldhu	r2,0(r2)
    3d00:	1884703a 	and	r2,r3,r2
    3d04:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    3d08:	e0bfff17 	ldw	r2,-4(fp)
    3d0c:	108010c3 	ldbu	r2,67(r2)
    3d10:	10803fcc 	andi	r2,r2,255
    3d14:	108003cc 	andi	r2,r2,15
    3d18:	1004923a 	slli	r2,r2,8
    3d1c:	1007883a 	mov	r3,r2
    3d20:	e0bffe0b 	ldhu	r2,-8(fp)
    3d24:	1884b03a 	or	r2,r3,r2
    3d28:	1007883a 	mov	r3,r2
    3d2c:	e0bfff17 	ldw	r2,-4(fp)
    3d30:	10801083 	ldbu	r2,66(r2)
    3d34:	10803fcc 	andi	r2,r2,255
    3d38:	10803c0c 	andi	r2,r2,240
    3d3c:	1884b03a 	or	r2,r3,r2
    3d40:	1007883a 	mov	r3,r2
    3d44:	e0bfff17 	ldw	r2,-4(fp)
    3d48:	10801083 	ldbu	r2,66(r2)
    3d4c:	10803fcc 	andi	r2,r2,255
    3d50:	1080030c 	andi	r2,r2,12
    3d54:	100492ba 	slli	r2,r2,10
    3d58:	1884b03a 	or	r2,r3,r2
    3d5c:	1007883a 	mov	r3,r2
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	10801083 	ldbu	r2,66(r2)
    3d68:	10803fcc 	andi	r2,r2,255
    3d6c:	1080004c 	andi	r2,r2,1
    3d70:	100490fa 	slli	r2,r2,3
    3d74:	1884b03a 	or	r2,r3,r2
    3d78:	1007883a 	mov	r3,r2
    3d7c:	e0bfff17 	ldw	r2,-4(fp)
    3d80:	108010c3 	ldbu	r2,67(r2)
    3d84:	10803fcc 	andi	r2,r2,255
    3d88:	1080300c 	andi	r2,r2,192
    3d8c:	1004923a 	slli	r2,r2,8
    3d90:	1884b03a 	or	r2,r3,r2
    3d94:	1007883a 	mov	r3,r2
    3d98:	e0bfff17 	ldw	r2,-4(fp)
    3d9c:	108010c3 	ldbu	r2,67(r2)
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	10800c0c 	andi	r2,r2,48
    3da8:	1005d13a 	srai	r2,r2,4
    3dac:	1884b03a 	or	r2,r3,r2
    3db0:	1007883a 	mov	r3,r2
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    3dbc:	e0bfff17 	ldw	r2,-4(fp)
    3dc0:	10801143 	ldbu	r2,69(r2)
    3dc4:	10803fcc 	andi	r2,r2,255
    3dc8:	1004923a 	slli	r2,r2,8
    3dcc:	1007883a 	mov	r3,r2
    3dd0:	e0bfff17 	ldw	r2,-4(fp)
    3dd4:	10801103 	ldbu	r2,68(r2)
    3dd8:	10803fcc 	andi	r2,r2,255
    3ddc:	1884b03a 	or	r2,r3,r2
    3de0:	1007883a 	mov	r3,r2
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	108011c3 	ldbu	r2,71(r2)
    3df4:	10803fcc 	andi	r2,r2,255
    3df8:	1004923a 	slli	r2,r2,8
    3dfc:	1007883a 	mov	r3,r2
    3e00:	e0bfff17 	ldw	r2,-4(fp)
    3e04:	10801183 	ldbu	r2,70(r2)
    3e08:	10803fcc 	andi	r2,r2,255
    3e0c:	1884b03a 	or	r2,r3,r2
    3e10:	1007883a 	mov	r3,r2
    3e14:	e0bfff17 	ldw	r2,-4(fp)
    3e18:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10801243 	ldbu	r2,73(r2)
    3e24:	10803fcc 	andi	r2,r2,255
    3e28:	1004923a 	slli	r2,r2,8
    3e2c:	1007883a 	mov	r3,r2
    3e30:	e0bfff17 	ldw	r2,-4(fp)
    3e34:	10801203 	ldbu	r2,72(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	1884b03a 	or	r2,r3,r2
    3e40:	1007883a 	mov	r3,r2
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    3e4c:	e0bfff17 	ldw	r2,-4(fp)
    3e50:	108012c3 	ldbu	r2,75(r2)
    3e54:	10803fcc 	andi	r2,r2,255
    3e58:	1004923a 	slli	r2,r2,8
    3e5c:	1007883a 	mov	r3,r2
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	10801283 	ldbu	r2,74(r2)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	1884b03a 	or	r2,r3,r2
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    3e7c:	e0bfff17 	ldw	r2,-4(fp)
    3e80:	10801343 	ldbu	r2,77(r2)
    3e84:	10803fcc 	andi	r2,r2,255
    3e88:	1004923a 	slli	r2,r2,8
    3e8c:	1007883a 	mov	r3,r2
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10801303 	ldbu	r2,76(r2)
    3e98:	10803fcc 	andi	r2,r2,255
    3e9c:	1884b03a 	or	r2,r3,r2
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bfff17 	ldw	r2,-4(fp)
    3ea8:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	108013c3 	ldbu	r2,79(r2)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1004923a 	slli	r2,r2,8
    3ebc:	1007883a 	mov	r3,r2
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10801383 	ldbu	r2,78(r2)
    3ec8:	10803fcc 	andi	r2,r2,255
    3ecc:	1884b03a 	or	r2,r3,r2
    3ed0:	1007883a 	mov	r3,r2
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10c0098b 	ldhu	r3,38(r2)
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10800a0b 	ldhu	r2,40(r2)
    3eec:	18ffffcc 	andi	r3,r3,65535
    3ef0:	10bfffcc 	andi	r2,r2,65535
    3ef4:	18800e26 	beq	r3,r2,3f30 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	1080098b 	ldhu	r2,38(r2)
    3f00:	1007883a 	mov	r3,r2
    3f04:	e0bfff17 	ldw	r2,-4(fp)
    3f08:	10800a0b 	ldhu	r2,40(r2)
    3f0c:	0084303a 	nor	r2,zero,r2
    3f10:	1884703a 	and	r2,r3,r2
    3f14:	1007883a 	mov	r3,r2
    3f18:	e0bfff17 	ldw	r2,-4(fp)
    3f1c:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c0098b 	ldhu	r3,38(r2)
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10800d0b 	ldhu	r2,52(r2)
    3f38:	10bfffcc 	andi	r2,r2,65535
    3f3c:	10000726 	beq	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800e0b 	ldhu	r2,56(r2)
    3f48:	10bfffcc 	andi	r2,r2,65535
    3f4c:	1000031e 	bne	r2,zero,3f5c <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	00c00044 	movi	r3,1
    3f58:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	10c00d0b 	ldhu	r3,52(r2)
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10800d8b 	ldhu	r2,54(r2)
    3f74:	10bfffcc 	andi	r2,r2,65535
    3f78:	10000726 	beq	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800e8b 	ldhu	r2,58(r2)
    3f84:	10bfffcc 	andi	r2,r2,65535
    3f88:	1000031e 	bne	r2,zero,3f98 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	00c00044 	movi	r3,1
    3f94:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    3f98:	e0bfff17 	ldw	r2,-4(fp)
    3f9c:	10c00d8b 	ldhu	r3,54(r2)
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	10c00e8d 	sth	r3,58(r2)
    3fa8:	00000106 	br	3fb0 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    3fac:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    3fb0:	e037883a 	mov	sp,fp
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00104 	addi	sp,sp,4
    3fbc:	f800283a 	ret

00003fc0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    3fc0:	defffd04 	addi	sp,sp,-12
    3fc4:	df000215 	stw	fp,8(sp)
    3fc8:	df000204 	addi	fp,sp,8
    3fcc:	e13ffe15 	stw	r4,-8(fp)
    3fd0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10800218 	cmpnei	r2,r2,8
    3fdc:	1000031e 	bne	r2,zero,3fec <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10800d0b 	ldhu	r2,52(r2)
    3fe8:	00001306 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    3fec:	e0bfff17 	ldw	r2,-4(fp)
    3ff0:	10800258 	cmpnei	r2,r2,9
    3ff4:	1000031e 	bne	r2,zero,4004 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    3ff8:	e0bffe17 	ldw	r2,-8(fp)
    3ffc:	10800d8b 	ldhu	r2,54(r2)
    4000:	00000d06 	br	4038 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4004:	e0bffe17 	ldw	r2,-8(fp)
    4008:	10c0098b 	ldhu	r3,38(r2)
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10803fcc 	andi	r2,r2,255
    4014:	1089883a 	add	r4,r2,r2
    4018:	008000b4 	movhi	r2,2
    401c:	108f0c84 	addi	r2,r2,15410
    4020:	2085883a 	add	r2,r4,r2
    4024:	1080000b 	ldhu	r2,0(r2)
    4028:	1884703a 	and	r2,r3,r2
    402c:	10bfffcc 	andi	r2,r2,65535
    4030:	1004c03a 	cmpne	r2,r2,zero
    4034:	10803fcc 	andi	r2,r2,255
}
    4038:	e037883a 	mov	sp,fp
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00104 	addi	sp,sp,4
    4044:	f800283a 	ret

00004048 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4048:	defffc04 	addi	sp,sp,-16
    404c:	df000315 	stw	fp,12(sp)
    4050:	df000304 	addi	fp,sp,12
    4054:	e13ffe15 	stw	r4,-8(fp)
    4058:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	10800218 	cmpnei	r2,r2,8
    4064:	10000a1e 	bne	r2,zero,4090 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	10800f03 	ldbu	r2,60(r2)
    4070:	10803fcc 	andi	r2,r2,255
    4074:	10000426 	beq	r2,zero,4088 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4078:	e0bffe17 	ldw	r2,-8(fp)
    407c:	10000f05 	stb	zero,60(r2)
                        return true;
    4080:	00800044 	movi	r2,1
    4084:	00002806 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4088:	0005883a 	mov	r2,zero
    408c:	00002606 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800258 	cmpnei	r2,r2,9
    4098:	10000a1e 	bne	r2,zero,40c4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    409c:	e0bffe17 	ldw	r2,-8(fp)
    40a0:	10800f43 	ldbu	r2,61(r2)
    40a4:	10803fcc 	andi	r2,r2,255
    40a8:	10000426 	beq	r2,zero,40bc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10000f45 	stb	zero,61(r2)
                        return true;
    40b4:	00800044 	movi	r2,1
    40b8:	00001b06 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    40bc:	0005883a 	mov	r2,zero
    40c0:	00001906 	br	4128 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10803fcc 	andi	r2,r2,255
    40cc:	1087883a 	add	r3,r2,r2
    40d0:	008000b4 	movhi	r2,2
    40d4:	108f0c84 	addi	r2,r2,15410
    40d8:	1885883a 	add	r2,r3,r2
    40dc:	1080000b 	ldhu	r2,0(r2)
    40e0:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    40e4:	e0bffe17 	ldw	r2,-8(fp)
    40e8:	10c00a8b 	ldhu	r3,42(r2)
    40ec:	e0bffd0b 	ldhu	r2,-12(fp)
    40f0:	1884703a 	and	r2,r3,r2
    40f4:	10bfffcc 	andi	r2,r2,65535
    40f8:	1004c03a 	cmpne	r2,r2,zero
    40fc:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4100:	e0bffe17 	ldw	r2,-8(fp)
    4104:	10800a8b 	ldhu	r2,42(r2)
    4108:	1007883a 	mov	r3,r2
    410c:	e0bffd0b 	ldhu	r2,-12(fp)
    4110:	0084303a 	nor	r2,zero,r2
    4114:	1884703a 	and	r2,r3,r2
    4118:	1007883a 	mov	r3,r2
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00a8d 	sth	r3,42(r2)
        return click;
    4124:	e0bffd83 	ldbu	r2,-10(fp)
}
    4128:	e037883a 	mov	sp,fp
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00104 	addi	sp,sp,4
    4134:	f800283a 	ret

00004138 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4138:	defffd04 	addi	sp,sp,-12
    413c:	df000215 	stw	fp,8(sp)
    4140:	df000204 	addi	fp,sp,8
    4144:	e13ffe15 	stw	r4,-8(fp)
    4148:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	e0fffe17 	ldw	r3,-8(fp)
    4154:	10800584 	addi	r2,r2,22
    4158:	1085883a 	add	r2,r2,r2
    415c:	1885883a 	add	r2,r3,r2
    4160:	1080000b 	ldhu	r2,0(r2)
}
    4164:	e037883a 	mov	sp,fp
    4168:	df000017 	ldw	fp,0(sp)
    416c:	dec00104 	addi	sp,sp,4
    4170:	f800283a 	ret

00004174 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4174:	defff904 	addi	sp,sp,-28
    4178:	dfc00615 	stw	ra,24(sp)
    417c:	df000515 	stw	fp,20(sp)
    4180:	df000504 	addi	fp,sp,20
    4184:	e13ffd15 	stw	r4,-12(fp)
    4188:	e17ffe15 	stw	r5,-8(fp)
    418c:	3005883a 	mov	r2,r6
    4190:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4194:	e0bffe17 	ldw	r2,-8(fp)
    4198:	10c00084 	addi	r3,r2,2
    419c:	e0bffd17 	ldw	r2,-12(fp)
    41a0:	10801f83 	ldbu	r2,126(r2)
    41a4:	11000044 	addi	r4,r2,1
    41a8:	200b883a 	mov	r5,r4
    41ac:	e13ffd17 	ldw	r4,-12(fp)
    41b0:	21401f85 	stb	r5,126(r4)
    41b4:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    41b8:	e0bffd17 	ldw	r2,-12(fp)
    41bc:	10c00317 	ldw	r3,12(r2)
    41c0:	e0bffd17 	ldw	r2,-12(fp)
    41c4:	10800403 	ldbu	r2,16(r2)
    41c8:	11003fcc 	andi	r4,r2,255
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800503 	ldbu	r2,20(r2)
    41d4:	11403fcc 	andi	r5,r2,255
    41d8:	e1bfff0b 	ldhu	r6,-4(fp)
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	d8800015 	stw	r2,0(sp)
    41e4:	300f883a 	mov	r7,r6
    41e8:	280d883a 	mov	r6,r5
    41ec:	200b883a 	mov	r5,r4
    41f0:	1809883a 	mov	r4,r3
    41f4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    41f8:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    41fc:	e0bffc03 	ldbu	r2,-16(fp)
}
    4200:	e037883a 	mov	sp,fp
    4204:	dfc00117 	ldw	ra,4(sp)
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00204 	addi	sp,sp,8
    4210:	f800283a 	ret

00004214 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4214:	defff904 	addi	sp,sp,-28
    4218:	dfc00615 	stw	ra,24(sp)
    421c:	df000515 	stw	fp,20(sp)
    4220:	df000504 	addi	fp,sp,20
    4224:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4228:	00800244 	movi	r2,9
    422c:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4230:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4234:	00800244 	movi	r2,9
    4238:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    423c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4240:	008003c4 	movi	r2,15
    4244:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4248:	00800104 	movi	r2,4
    424c:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4250:	00800104 	movi	r2,4
    4254:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4258:	00800804 	movi	r2,32
    425c:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4260:	00800804 	movi	r2,32
    4264:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4268:	00bfe004 	movi	r2,-128
    426c:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4270:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4274:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4278:	01800344 	movi	r6,13
    427c:	e17ffb04 	addi	r5,fp,-20
    4280:	e13fff17 	ldw	r4,-4(fp)
    4284:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10800817 	ldw	r2,32(r2)
    4290:	10000326 	beq	r2,zero,42a0 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10800817 	ldw	r2,32(r2)
    429c:	103ee83a 	callr	r2
}
    42a0:	0001883a 	nop
    42a4:	e037883a 	mov	sp,fp
    42a8:	dfc00117 	ldw	ra,4(sp)
    42ac:	df000017 	ldw	fp,0(sp)
    42b0:	dec00204 	addi	sp,sp,8
    42b4:	f800283a 	ret

000042b8 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    42b8:	defff904 	addi	sp,sp,-28
    42bc:	dfc00615 	stw	ra,24(sp)
    42c0:	df000515 	stw	fp,20(sp)
    42c4:	df000504 	addi	fp,sp,20
    42c8:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    42cc:	00800244 	movi	r2,9
    42d0:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    42d4:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    42d8:	00800244 	movi	r2,9
    42dc:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    42e0:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    42e4:	008003c4 	movi	r2,15
    42e8:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    42ec:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    42f0:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    42f4:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    42f8:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    42fc:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4300:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4304:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4308:	01800344 	movi	r6,13
    430c:	e17ffb04 	addi	r5,fp,-20
    4310:	e13fff17 	ldw	r4,-4(fp)
    4314:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    4318:	0001883a 	nop
    431c:	e037883a 	mov	sp,fp
    4320:	dfc00117 	ldw	ra,4(sp)
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00204 	addi	sp,sp,8
    432c:	f800283a 	ret

00004330 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4330:	defff504 	addi	sp,sp,-44
    4334:	dfc00a15 	stw	ra,40(sp)
    4338:	df000915 	stw	fp,36(sp)
    433c:	df000904 	addi	fp,sp,36
    4340:	e13ffb15 	stw	r4,-20(fp)
    4344:	3009883a 	mov	r4,r6
    4348:	3807883a 	mov	r3,r7
    434c:	e0800217 	ldw	r2,8(fp)
    4350:	e17ffc05 	stb	r5,-16(fp)
    4354:	e13ffd05 	stb	r4,-12(fp)
    4358:	e0fffe05 	stb	r3,-8(fp)
    435c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4360:	00800244 	movi	r2,9
    4364:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4368:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    436c:	00800244 	movi	r2,9
    4370:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4374:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4378:	008003c4 	movi	r2,15
    437c:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4380:	e0bffc03 	ldbu	r2,-16(fp)
    4384:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4388:	e0bffd03 	ldbu	r2,-12(fp)
    438c:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4390:	e0bffe03 	ldbu	r2,-8(fp)
    4394:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4398:	e0bfff03 	ldbu	r2,-4(fp)
    439c:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    43a0:	00bfffc4 	movi	r2,-1
    43a4:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    43a8:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    43ac:	00bfffc4 	movi	r2,-1
    43b0:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    43b4:	01800344 	movi	r6,13
    43b8:	e17ff704 	addi	r5,fp,-36
    43bc:	e13ffb17 	ldw	r4,-20(fp)
    43c0:	00041740 	call	4174 <_ZN7XBOXONE11XboxCommandEPht>
}
    43c4:	0001883a 	nop
    43c8:	e037883a 	mov	sp,fp
    43cc:	dfc00117 	ldw	ra,4(sp)
    43d0:	df000017 	ldw	fp,0(sp)
    43d4:	dec00204 	addi	sp,sp,8
    43d8:	f800283a 	ret

000043dc <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    43dc:	defffe04 	addi	sp,sp,-8
    43e0:	df000115 	stw	fp,4(sp)
    43e4:	df000104 	addi	fp,sp,4
    43e8:	e13fff15 	stw	r4,-4(fp)
    43ec:	e0bfff17 	ldw	r2,-4(fp)
    43f0:	10000005 	stb	zero,0(r2)
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10c00043 	ldbu	r3,1(r2)
    43fc:	1806703a 	and	r3,r3,zero
    4400:	10c00045 	stb	r3,1(r2)
    4404:	10c00083 	ldbu	r3,2(r2)
    4408:	1806703a 	and	r3,r3,zero
    440c:	10c00085 	stb	r3,2(r2)
    4410:	10c000c3 	ldbu	r3,3(r2)
    4414:	1806703a 	and	r3,r3,zero
    4418:	10c000c5 	stb	r3,3(r2)
    441c:	10c00103 	ldbu	r3,4(r2)
    4420:	1806703a 	and	r3,r3,zero
    4424:	10c00105 	stb	r3,4(r2)
        };
    4428:	0001883a 	nop
    442c:	e037883a 	mov	sp,fp
    4430:	df000017 	ldw	fp,0(sp)
    4434:	dec00104 	addi	sp,sp,4
    4438:	f800283a 	ret

0000443c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    443c:	defffe04 	addi	sp,sp,-8
    4440:	df000115 	stw	fp,4(sp)
    4444:	df000104 	addi	fp,sp,4
    4448:	e13fff15 	stw	r4,-4(fp)
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10000015 	stw	zero,0(r2)
    4454:	e0bfff17 	ldw	r2,-4(fp)
    4458:	10000105 	stb	zero,4(r2)
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10000145 	stb	zero,5(r2)
        };
    4464:	0001883a 	nop
    4468:	e037883a 	mov	sp,fp
    446c:	df000017 	ldw	fp,0(sp)
    4470:	dec00104 	addi	sp,sp,4
    4474:	f800283a 	ret

00004478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4478:	defffd04 	addi	sp,sp,-12
    447c:	df000215 	stw	fp,8(sp)
    4480:	df000204 	addi	fp,sp,8
    4484:	e13ffe15 	stw	r4,-8(fp)
    4488:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10c00043 	ldbu	r3,1(r2)
    4494:	11000083 	ldbu	r4,2(r2)
    4498:	2008923a 	slli	r4,r4,8
    449c:	20c6b03a 	or	r3,r4,r3
    44a0:	110000c3 	ldbu	r4,3(r2)
    44a4:	2008943a 	slli	r4,r4,16
    44a8:	20c6b03a 	or	r3,r4,r3
    44ac:	10800103 	ldbu	r2,4(r2)
    44b0:	1004963a 	slli	r2,r2,24
    44b4:	10c4b03a 	or	r2,r2,r3
    44b8:	1007883a 	mov	r3,r2
    44bc:	e0bffe17 	ldw	r2,-8(fp)
    44c0:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    44c4:	e0bfff17 	ldw	r2,-4(fp)
    44c8:	10c00003 	ldbu	r3,0(r2)
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00145 	stb	r3,5(r2)
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10c00143 	ldbu	r3,5(r2)
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	10c00105 	stb	r3,4(r2)
        };
    44e4:	0001883a 	nop
    44e8:	e037883a 	mov	sp,fp
    44ec:	df000017 	ldw	fp,0(sp)
    44f0:	dec00104 	addi	sp,sp,4
    44f4:	f800283a 	ret

000044f8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    44f8:	defffe04 	addi	sp,sp,-8
    44fc:	df000115 	stw	fp,4(sp)
    4500:	df000104 	addi	fp,sp,4
    4504:	e13fff15 	stw	r4,-4(fp)
    4508:	e0bfff17 	ldw	r2,-4(fp)
    450c:	10000015 	stw	zero,0(r2)
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	10000105 	stb	zero,4(r2)
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	1000018d 	sth	zero,6(r2)
        };
    4520:	0001883a 	nop
    4524:	e037883a 	mov	sp,fp
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00104 	addi	sp,sp,4
    4530:	f800283a 	ret

00004534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4534:	defffd04 	addi	sp,sp,-12
    4538:	df000215 	stw	fp,8(sp)
    453c:	df000204 	addi	fp,sp,8
    4540:	e13ffe15 	stw	r4,-8(fp)
    4544:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4548:	e0bfff17 	ldw	r2,-4(fp)
    454c:	10c00043 	ldbu	r3,1(r2)
    4550:	11000083 	ldbu	r4,2(r2)
    4554:	2008923a 	slli	r4,r4,8
    4558:	20c6b03a 	or	r3,r4,r3
    455c:	110000c3 	ldbu	r4,3(r2)
    4560:	2008943a 	slli	r4,r4,16
    4564:	20c6b03a 	or	r3,r4,r3
    4568:	10800103 	ldbu	r2,4(r2)
    456c:	1004963a 	slli	r2,r2,24
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	1007883a 	mov	r3,r2
    4578:	e0bffe17 	ldw	r2,-8(fp)
    457c:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	1000018d 	sth	zero,6(r2)
        };
    4588:	0001883a 	nop
    458c:	e037883a 	mov	sp,fp
    4590:	df000017 	ldw	fp,0(sp)
    4594:	dec00104 	addi	sp,sp,4
    4598:	f800283a 	ret

0000459c <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    459c:	defffb04 	addi	sp,sp,-20
    45a0:	df000415 	stw	fp,16(sp)
    45a4:	df000404 	addi	fp,sp,16
    45a8:	e13ffc15 	stw	r4,-16(fp)
    45ac:	e17ffd15 	stw	r5,-12(fp)
    45b0:	e1bffe15 	stw	r6,-8(fp)
    45b4:	3805883a 	mov	r2,r7
    45b8:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	10800103 	ldbu	r2,4(r2)
    45c4:	10803fcc 	andi	r2,r2,255
    45c8:	10000326 	beq	r2,zero,45d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    45cc:	10800060 	cmpeqi	r2,r2,1
    45d0:	10000a1e 	bne	r2,zero,45fc <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    45d4:	00002906 	br	467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	e0ffff0b 	ldhu	r3,-4(fp)
    45e0:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	10800103 	ldbu	r2,4(r2)
    45ec:	10800044 	addi	r2,r2,1
    45f0:	1007883a 	mov	r3,r2
    45f4:	e0bffc17 	ldw	r2,-16(fp)
    45f8:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    45fc:	e0bffc17 	ldw	r2,-16(fp)
    4600:	1080018b 	ldhu	r2,6(r2)
    4604:	10bfffcc 	andi	r2,r2,65535
    4608:	10001626 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	1080000b 	ldhu	r2,0(r2)
    4614:	10bfffcc 	andi	r2,r2,65535
    4618:	10001226 	beq	r2,zero,4664 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    461c:	e0bffc17 	ldw	r2,-16(fp)
    4620:	1080018b 	ldhu	r2,6(r2)
    4624:	10bfffc4 	addi	r2,r2,-1
    4628:	1007883a 	mov	r3,r2
    462c:	e0bffc17 	ldw	r2,-16(fp)
    4630:	10c0018d 	sth	r3,6(r2)
    4634:	e0bffd17 	ldw	r2,-12(fp)
    4638:	10800017 	ldw	r2,0(r2)
    463c:	10c00044 	addi	r3,r2,1
    4640:	e0bffd17 	ldw	r2,-12(fp)
    4644:	10c00015 	stw	r3,0(r2)
    4648:	e0bffe17 	ldw	r2,-8(fp)
    464c:	1080000b 	ldhu	r2,0(r2)
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	1007883a 	mov	r3,r2
    4658:	e0bffe17 	ldw	r2,-8(fp)
    465c:	10c0000d 	sth	r3,0(r2)
    4660:	003fe606 	br	45fc <__alt_data_end+0xfc0045fc>

                                if(!countDown)
    4664:	e0bffc17 	ldw	r2,-16(fp)
    4668:	1080018b 	ldhu	r2,6(r2)
    466c:	10bfffcc 	andi	r2,r2,65535
    4670:	1000021e 	bne	r2,zero,467c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	1080018b 	ldhu	r2,6(r2)
    4684:	10bfffcc 	andi	r2,r2,65535
    4688:	1005003a 	cmpeq	r2,r2,zero
        };
    468c:	e037883a 	mov	sp,fp
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00104 	addi	sp,sp,4
    4698:	f800283a 	ret

0000469c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    469c:	defffb04 	addi	sp,sp,-20
    46a0:	df000415 	stw	fp,16(sp)
    46a4:	df000404 	addi	fp,sp,16
    46a8:	e13ffc15 	stw	r4,-16(fp)
    46ac:	2809883a 	mov	r4,r5
    46b0:	3007883a 	mov	r3,r6
    46b4:	3805883a 	mov	r2,r7
    46b8:	e13ffd05 	stb	r4,-12(fp)
    46bc:	e0fffe05 	stb	r3,-8(fp)
    46c0:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    46c4:	0005883a 	mov	r2,zero
        }
    46c8:	e037883a 	mov	sp,fp
    46cc:	df000017 	ldw	fp,0(sp)
    46d0:	dec00104 	addi	sp,sp,4
    46d4:	f800283a 	ret

000046d8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    46d8:	defffb04 	addi	sp,sp,-20
    46dc:	df000415 	stw	fp,16(sp)
    46e0:	df000404 	addi	fp,sp,16
    46e4:	e13ffc15 	stw	r4,-16(fp)
    46e8:	2809883a 	mov	r4,r5
    46ec:	3007883a 	mov	r3,r6
    46f0:	3805883a 	mov	r2,r7
    46f4:	e13ffd05 	stb	r4,-12(fp)
    46f8:	e0fffe05 	stb	r3,-8(fp)
    46fc:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4700:	0005883a 	mov	r2,zero
        }
    4704:	e037883a 	mov	sp,fp
    4708:	df000017 	ldw	fp,0(sp)
    470c:	dec00104 	addi	sp,sp,4
    4710:	f800283a 	ret

00004714 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4714:	defffe04 	addi	sp,sp,-8
    4718:	df000115 	stw	fp,4(sp)
    471c:	df000104 	addi	fp,sp,4
    4720:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4724:	0005883a 	mov	r2,zero
        }
    4728:	e037883a 	mov	sp,fp
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00104 	addi	sp,sp,4
    4734:	f800283a 	ret

00004738 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4738:	defffe04 	addi	sp,sp,-8
    473c:	df000115 	stw	fp,4(sp)
    4740:	df000104 	addi	fp,sp,4
    4744:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4748:	0005883a 	mov	r2,zero
        }
    474c:	e037883a 	mov	sp,fp
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00104 	addi	sp,sp,4
    4758:	f800283a 	ret

0000475c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    475c:	defffe04 	addi	sp,sp,-8
    4760:	df000115 	stw	fp,4(sp)
    4764:	df000104 	addi	fp,sp,4
    4768:	e13fff15 	stw	r4,-4(fp)
                return 0;
    476c:	0005883a 	mov	r2,zero
        }
    4770:	e037883a 	mov	sp,fp
    4774:	df000017 	ldw	fp,0(sp)
    4778:	dec00104 	addi	sp,sp,4
    477c:	f800283a 	ret

00004780 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4780:	defffd04 	addi	sp,sp,-12
    4784:	df000215 	stw	fp,8(sp)
    4788:	df000204 	addi	fp,sp,8
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	2805883a 	mov	r2,r5
    4794:	e0bfff05 	stb	r2,-4(fp)
                return;
    4798:	0001883a 	nop
        } // Note used for hubs only!
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    47ac:	defffc04 	addi	sp,sp,-16
    47b0:	df000315 	stw	fp,12(sp)
    47b4:	df000304 	addi	fp,sp,12
    47b8:	e13ffd15 	stw	r4,-12(fp)
    47bc:	2807883a 	mov	r3,r5
    47c0:	3005883a 	mov	r2,r6
    47c4:	e0fffe0d 	sth	r3,-8(fp)
    47c8:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    47cc:	0005883a 	mov	r2,zero
        }
    47d0:	e037883a 	mov	sp,fp
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00104 	addi	sp,sp,4
    47dc:	f800283a 	ret

000047e0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    47e0:	defffd04 	addi	sp,sp,-12
    47e4:	df000215 	stw	fp,8(sp)
    47e8:	df000204 	addi	fp,sp,8
    47ec:	e13ffe15 	stw	r4,-8(fp)
    47f0:	2805883a 	mov	r2,r5
    47f4:	e0bfff05 	stb	r2,-4(fp)
                return false;
    47f8:	0005883a 	mov	r2,zero
        }
    47fc:	e037883a 	mov	sp,fp
    4800:	df000017 	ldw	fp,0(sp)
    4804:	dec00104 	addi	sp,sp,4
    4808:	f800283a 	ret

0000480c <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    480c:	defffd04 	addi	sp,sp,-12
    4810:	df000215 	stw	fp,8(sp)
    4814:	df000204 	addi	fp,sp,8
    4818:	e13ffe15 	stw	r4,-8(fp)
    481c:	2805883a 	mov	r2,r5
    4820:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4824:	00800044 	movi	r2,1
        }
    4828:	e037883a 	mov	sp,fp
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00104 	addi	sp,sp,4
    4834:	f800283a 	ret

00004838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4838:	defffc04 	addi	sp,sp,-16
    483c:	df000315 	stw	fp,12(sp)
    4840:	df000304 	addi	fp,sp,12
    4844:	e13ffe15 	stw	r4,-8(fp)
    4848:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    484c:	e03ffd05 	stb	zero,-12(fp)
    4850:	e0bffd03 	ldbu	r2,-12(fp)
    4854:	10800428 	cmpgeui	r2,r2,16
    4858:	1000161e 	bne	r2,zero,48b4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    485c:	e0bffd03 	ldbu	r2,-12(fp)
    4860:	e0fffe17 	ldw	r3,-8(fp)
    4864:	10800784 	addi	r2,r2,30
    4868:	1085883a 	add	r2,r2,r2
    486c:	1085883a 	add	r2,r2,r2
    4870:	1885883a 	add	r2,r3,r2
    4874:	10800017 	ldw	r2,0(r2)
    4878:	10000a1e 	bne	r2,zero,48a4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    487c:	e0bffd03 	ldbu	r2,-12(fp)
    4880:	e0fffe17 	ldw	r3,-8(fp)
    4884:	10800784 	addi	r2,r2,30
    4888:	1085883a 	add	r2,r2,r2
    488c:	1085883a 	add	r2,r2,r2
    4890:	1885883a 	add	r2,r3,r2
    4894:	e0ffff17 	ldw	r3,-4(fp)
    4898:	10c00015 	stw	r3,0(r2)
                                return 0;
    489c:	0005883a 	mov	r2,zero
    48a0:	00000506 	br	48b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    48a4:	e0bffd03 	ldbu	r2,-12(fp)
    48a8:	10800044 	addi	r2,r2,1
    48ac:	e0bffd05 	stb	r2,-12(fp)
    48b0:	003fe706 	br	4850 <__alt_data_end+0xfc004850>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    48b4:	00bff4c4 	movi	r2,-45
        };
    48b8:	e037883a 	mov	sp,fp
    48bc:	df000017 	ldw	fp,0(sp)
    48c0:	dec00104 	addi	sp,sp,4
    48c4:	f800283a 	ret

000048c8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    48c8:	defffa04 	addi	sp,sp,-24
    48cc:	df000515 	stw	fp,20(sp)
    48d0:	df000504 	addi	fp,sp,20
    48d4:	e13ffb15 	stw	r4,-20(fp)
    48d8:	3009883a 	mov	r4,r6
    48dc:	3807883a 	mov	r3,r7
    48e0:	e0800117 	ldw	r2,4(fp)
    48e4:	e17ffc05 	stb	r5,-16(fp)
    48e8:	e13ffd05 	stb	r4,-12(fp)
    48ec:	e0fffe05 	stb	r3,-8(fp)
    48f0:	e0bfff05 	stb	r2,-4(fp)
        };
    48f4:	0001883a 	nop
    48f8:	e037883a 	mov	sp,fp
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	f800283a 	ret

00004908 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4908:	defffe04 	addi	sp,sp,-8
    490c:	df000115 	stw	fp,4(sp)
    4910:	df000104 	addi	fp,sp,4
    4914:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4918:	e0bfff17 	ldw	r2,-4(fp)
    491c:	10800403 	ldbu	r2,16(r2)
        };
    4920:	e037883a 	mov	sp,fp
    4924:	df000017 	ldw	fp,0(sp)
    4928:	dec00104 	addi	sp,sp,4
    492c:	f800283a 	ret

00004930 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4930:	defffe04 	addi	sp,sp,-8
    4934:	df000115 	stw	fp,4(sp)
    4938:	df000104 	addi	fp,sp,4
    493c:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10800943 	ldbu	r2,37(r2)
        };
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4958:	defffc04 	addi	sp,sp,-16
    495c:	df000315 	stw	fp,12(sp)
    4960:	df000304 	addi	fp,sp,12
    4964:	e13ffd15 	stw	r4,-12(fp)
    4968:	2807883a 	mov	r3,r5
    496c:	3005883a 	mov	r2,r6
    4970:	e0fffe0d 	sth	r3,-8(fp)
    4974:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4978:	e0bffe0b 	ldhu	r2,-8(fp)
    497c:	108117a0 	cmpeqi	r2,r2,1118
    4980:	10000f1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4984:	e0bffe0b 	ldhu	r2,-8(fp)
    4988:	1081ce20 	cmpeqi	r2,r2,1848
    498c:	10000c1e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4990:	e0bffe0b 	ldhu	r2,-8(fp)
    4994:	10839be0 	cmpeqi	r2,r2,3695
    4998:	1000091e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    499c:	e0bffe0b 	ldhu	r2,-8(fp)
    49a0:	1083c360 	cmpeqi	r2,r2,3853
    49a4:	1000061e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49a8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ac:	10854ca0 	cmpeqi	r2,r2,5426
    49b0:	1000031e 	bne	r2,zero,49c0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    49b4:	e0bffe0b 	ldhu	r2,-8(fp)
    49b8:	10893198 	cmpnei	r2,r2,9414
    49bc:	10002c1e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    49c0:	e0bfff0b 	ldhu	r2,-4(fp)
    49c4:	1080b460 	cmpeqi	r2,r2,721
    49c8:	1000271e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    49cc:	e0bfff0b 	ldhu	r2,-4(fp)
    49d0:	1080b760 	cmpeqi	r2,r2,733
    49d4:	1000241e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49d8:	e0bfff0b 	ldhu	r2,-4(fp)
    49dc:	1080b8e0 	cmpeqi	r2,r2,739
    49e0:	1000211e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49e4:	e0bfff0b 	ldhu	r2,-4(fp)
    49e8:	1080baa0 	cmpeqi	r2,r2,746
    49ec:	10001e1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    49f0:	e0bfff0b 	ldhu	r2,-4(fp)
    49f4:	10928060 	cmpeqi	r2,r2,18945
    49f8:	10001b1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    49fc:	e0bfff0b 	ldhu	r2,-4(fp)
    4a00:	10804e60 	cmpeqi	r2,r2,313
    4a04:	1000181e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a08:	e0bfff0b 	ldhu	r2,-4(fp)
    4a0c:	108051a0 	cmpeqi	r2,r2,326
    4a10:	1000151e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a14:	e0bfff0b 	ldhu	r2,-4(fp)
    4a18:	108019e0 	cmpeqi	r2,r2,103
    4a1c:	1000121e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a20:	e0bfff0b 	ldhu	r2,-4(fp)
    4a24:	108280e0 	cmpeqi	r2,r2,2563
    4a28:	10000f1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4a2c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a30:	109506a0 	cmpeqi	r2,r2,21530
    4a34:	10000c1e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a38:	e0bfff0b 	ldhu	r2,-4(fp)
    4a3c:	10950aa0 	cmpeqi	r2,r2,21546
    4a40:	1000091e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a44:	e0bfff0b 	ldhu	r2,-4(fp)
    4a48:	10950ea0 	cmpeqi	r2,r2,21562
    4a4c:	1000061e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4a50:	e0bfff0b 	ldhu	r2,-4(fp)
    4a54:	1082c2a0 	cmpeqi	r2,r2,2826
    4a58:	1000031e 	bne	r2,zero,4a68 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4a5c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a60:	1082c498 	cmpnei	r2,r2,2834
    4a64:	1000021e 	bne	r2,zero,4a70 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4a68:	00800044 	movi	r2,1
    4a6c:	00000106 	br	4a74 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4a70:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4a84:	defffe04 	addi	sp,sp,-8
    4a88:	df000115 	stw	fp,4(sp)
    4a8c:	df000104 	addi	fp,sp,4
    4a90:	e13fff15 	stw	r4,-4(fp)
    4a94:	008000b4 	movhi	r2,2
    4a98:	108f3104 	addi	r2,r2,15556
    4a9c:	e0ffff17 	ldw	r3,-4(fp)
    4aa0:	18800015 	stw	r2,0(r3)
    4aa4:	0001883a 	nop
    4aa8:	e037883a 	mov	sp,fp
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00104 	addi	sp,sp,4
    4ab4:	f800283a 	ret

00004ab8 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ab8:	defffe04 	addi	sp,sp,-8
    4abc:	df000115 	stw	fp,4(sp)
    4ac0:	df000104 	addi	fp,sp,4
    4ac4:	e13fff15 	stw	r4,-4(fp)
    4ac8:	008000b4 	movhi	r2,2
    4acc:	108f2b04 	addi	r2,r2,15532
    4ad0:	e0ffff17 	ldw	r3,-4(fp)
    4ad4:	18800015 	stw	r2,0(r3)
    4ad8:	0001883a 	nop
    4adc:	e037883a 	mov	sp,fp
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00104 	addi	sp,sp,4
    4ae8:	f800283a 	ret

00004aec <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4aec:	defffe04 	addi	sp,sp,-8
    4af0:	df000115 	stw	fp,4(sp)
    4af4:	df000104 	addi	fp,sp,4
    4af8:	e13fff15 	stw	r4,-4(fp)
    4afc:	008000b4 	movhi	r2,2
    4b00:	108f2e04 	addi	r2,r2,15544
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	18800015 	stw	r2,0(r3)
    4b0c:	0001883a 	nop
    4b10:	e037883a 	mov	sp,fp
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00104 	addi	sp,sp,4
    4b1c:	f800283a 	ret

00004b20 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4b20:	defffc04 	addi	sp,sp,-16
    4b24:	dfc00315 	stw	ra,12(sp)
    4b28:	df000215 	stw	fp,8(sp)
    4b2c:	df000204 	addi	fp,sp,8
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	1009883a 	mov	r4,r2
    4b40:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    4b44:	008000b4 	movhi	r2,2
    4b48:	108f2804 	addi	r2,r2,15520
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	18800015 	stw	r2,0(r3)
    4b54:	e0bffe17 	ldw	r2,-8(fp)
    4b58:	e0ffff17 	ldw	r3,-4(fp)
    4b5c:	10c00115 	stw	r3,4(r2)
    4b60:	e0bffe17 	ldw	r2,-8(fp)
    4b64:	10800204 	addi	r2,r2,8
    4b68:	1009883a 	mov	r4,r2
    4b6c:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    4b70:	e0bffe17 	ldw	r2,-8(fp)
    4b74:	10800404 	addi	r2,r2,16
    4b78:	1009883a 	mov	r4,r2
    4b7c:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    4b80:	e0bffe17 	ldw	r2,-8(fp)
    4b84:	10800604 	addi	r2,r2,24
    4b88:	1009883a 	mov	r4,r2
    4b8c:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    4b90:	e0bffe17 	ldw	r2,-8(fp)
    4b94:	10000c05 	stb	zero,48(r2)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	10000c45 	stb	zero,49(r2)
    4ba0:	e0bffe17 	ldw	r2,-8(fp)
    4ba4:	10000c85 	stb	zero,50(r2)
    4ba8:	e0bffe17 	ldw	r2,-8(fp)
    4bac:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10c00804 	addi	r3,r2,32
    4bb8:	e0bffe17 	ldw	r2,-8(fp)
    4bbc:	19803fcc 	andi	r6,r3,255
    4bc0:	11000243 	ldbu	r4,9(r2)
    4bc4:	2008703a 	and	r4,r4,zero
    4bc8:	200b883a 	mov	r5,r4
    4bcc:	3009883a 	mov	r4,r6
    4bd0:	2908b03a 	or	r4,r5,r4
    4bd4:	11000245 	stb	r4,9(r2)
    4bd8:	1808d23a 	srli	r4,r3,8
    4bdc:	21803fcc 	andi	r6,r4,255
    4be0:	11000283 	ldbu	r4,10(r2)
    4be4:	2008703a 	and	r4,r4,zero
    4be8:	200b883a 	mov	r5,r4
    4bec:	3009883a 	mov	r4,r6
    4bf0:	2908b03a 	or	r4,r5,r4
    4bf4:	11000285 	stb	r4,10(r2)
    4bf8:	1808d43a 	srli	r4,r3,16
    4bfc:	21803fcc 	andi	r6,r4,255
    4c00:	110002c3 	ldbu	r4,11(r2)
    4c04:	2008703a 	and	r4,r4,zero
    4c08:	200b883a 	mov	r5,r4
    4c0c:	3009883a 	mov	r4,r6
    4c10:	2908b03a 	or	r4,r5,r4
    4c14:	110002c5 	stb	r4,11(r2)
    4c18:	180ad63a 	srli	r5,r3,24
    4c1c:	10c00303 	ldbu	r3,12(r2)
    4c20:	1806703a 	and	r3,r3,zero
    4c24:	1809883a 	mov	r4,r3
    4c28:	2807883a 	mov	r3,r5
    4c2c:	20c6b03a 	or	r3,r4,r3
    4c30:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    4c34:	e0bffe17 	ldw	r2,-8(fp)
    4c38:	10c00404 	addi	r3,r2,16
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	10800204 	addi	r2,r2,8
    4c44:	100b883a 	mov	r5,r2
    4c48:	1809883a 	mov	r4,r3
    4c4c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10c00604 	addi	r3,r2,24
    4c58:	e0bffe17 	ldw	r2,-8(fp)
    4c5c:	10800204 	addi	r2,r2,8
    4c60:	100b883a 	mov	r5,r2
    4c64:	1809883a 	mov	r4,r3
    4c68:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    4c6c:	0001883a 	nop
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    4c84:	defff804 	addi	sp,sp,-32
    4c88:	dfc00715 	stw	ra,28(sp)
    4c8c:	df000615 	stw	fp,24(sp)
    4c90:	df000604 	addi	fp,sp,24
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	2805883a 	mov	r2,r5
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
    4ca4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    4ca8:	e0bffd0b 	ldhu	r2,-12(fp)
    4cac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    4cb0:	e0bffe17 	ldw	r2,-8(fp)
    4cb4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    4cb8:	e0bffa0b 	ldhu	r2,-24(fp)
    4cbc:	10bfffcc 	andi	r2,r2,65535
    4cc0:	10000a26 	beq	r2,zero,4cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    4cc4:	e0bffb04 	addi	r2,fp,-20
    4cc8:	e1bffa04 	addi	r6,fp,-24
    4ccc:	100b883a 	mov	r5,r2
    4cd0:	e13ffc17 	ldw	r4,-16(fp)
    4cd4:	0004d000 	call	4d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    4cd8:	1080005c 	xori	r2,r2,1
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	1000011e 	bne	r2,zero,4ce8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    4ce4:	003ff406 	br	4cb8 <__alt_data_end+0xfc004cb8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    4ce8:	0001883a 	nop
}
    4cec:	e037883a 	mov	sp,fp
    4cf0:	dfc00117 	ldw	ra,4(sp)
    4cf4:	df000017 	ldw	fp,0(sp)
    4cf8:	dec00204 	addi	sp,sp,8
    4cfc:	f800283a 	ret

00004d00 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    4d00:	defff604 	addi	sp,sp,-40
    4d04:	dfc00915 	stw	ra,36(sp)
    4d08:	df000815 	stw	fp,32(sp)
    4d0c:	df000804 	addi	fp,sp,32
    4d10:	e13ffc15 	stw	r4,-16(fp)
    4d14:	e17ffd15 	stw	r5,-12(fp)
    4d18:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	10800804 	addi	r2,r2,32
    4d24:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	10800804 	addi	r2,r2,32
    4d30:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800c03 	ldbu	r2,48(r2)
    4d3c:	10803fcc 	andi	r2,r2,255
    4d40:	10c00168 	cmpgeui	r3,r2,5
    4d44:	1801141e 	bne	r3,zero,5198 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    4d48:	100690ba 	slli	r3,r2,2
    4d4c:	00800034 	movhi	r2,0
    4d50:	10935804 	addi	r2,r2,19808
    4d54:	1885883a 	add	r2,r3,r2
    4d58:	10800017 	ldw	r2,0(r2)
    4d5c:	1000683a 	jmp	r2
    4d60:	00004d74 	movhi	zero,309
    4d64:	00004da8 	cmpgeui	zero,zero,310
    4d68:	00004e30 	cmpltui	zero,zero,312
    4d6c:	00004ec4 	movi	zero,315
    4d70:	00004f30 	cmpltui	zero,zero,316
                case 0:
                        theBuffer.valueSize = 2;
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	00c00084 	movi	r3,2
    4d7c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4d80:	e0bffc17 	ldw	r2,-16(fp)
    4d84:	10c00404 	addi	r3,r2,16
    4d88:	e0bffc17 	ldw	r2,-16(fp)
    4d8c:	10800204 	addi	r2,r2,8
    4d90:	100b883a 	mov	r5,r2
    4d94:	1809883a 	mov	r4,r3
    4d98:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    4d9c:	e0bffc17 	ldw	r2,-16(fp)
    4da0:	00c00044 	movi	r3,1
    4da4:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	10800404 	addi	r2,r2,16
    4db0:	e1bffe17 	ldw	r6,-8(fp)
    4db4:	e17ffd17 	ldw	r5,-12(fp)
    4db8:	1009883a 	mov	r4,r2
    4dbc:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4dc0:	1080005c 	xori	r2,r2,1
    4dc4:	10803fcc 	andi	r2,r2,255
    4dc8:	10000226 	beq	r2,zero,4dd4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    4dcc:	0005883a 	mov	r2,zero
    4dd0:	0000f206 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10c00217 	ldw	r3,8(r2)
    4ddc:	1806d23a 	srli	r3,r3,8
    4de0:	10800317 	ldw	r2,12(r2)
    4de4:	10803fcc 	andi	r2,r2,255
    4de8:	1004963a 	slli	r2,r2,24
    4dec:	10c4b03a 	or	r2,r2,r3
    4df0:	10c00003 	ldbu	r3,0(r2)
    4df4:	e0bffc17 	ldw	r2,-16(fp)
    4df8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    4dfc:	e0bffc17 	ldw	r2,-16(fp)
    4e00:	10c00217 	ldw	r3,8(r2)
    4e04:	1806d23a 	srli	r3,r3,8
    4e08:	10800317 	ldw	r2,12(r2)
    4e0c:	10803fcc 	andi	r2,r2,255
    4e10:	1004963a 	slli	r2,r2,24
    4e14:	10c4b03a 	or	r2,r2,r3
    4e18:	10c00043 	ldbu	r3,1(r2)
    4e1c:	e0bffc17 	ldw	r2,-16(fp)
    4e20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    4e24:	e0bffc17 	ldw	r2,-16(fp)
    4e28:	00c00084 	movi	r3,2
    4e2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    4e30:	e0bffc17 	ldw	r2,-16(fp)
    4e34:	10800804 	addi	r2,r2,32
    4e38:	10c00084 	addi	r3,r2,2
    4e3c:	e0bffc17 	ldw	r2,-16(fp)
    4e40:	19803fcc 	andi	r6,r3,255
    4e44:	11000243 	ldbu	r4,9(r2)
    4e48:	2008703a 	and	r4,r4,zero
    4e4c:	200b883a 	mov	r5,r4
    4e50:	3009883a 	mov	r4,r6
    4e54:	2908b03a 	or	r4,r5,r4
    4e58:	11000245 	stb	r4,9(r2)
    4e5c:	1808d23a 	srli	r4,r3,8
    4e60:	21803fcc 	andi	r6,r4,255
    4e64:	11000283 	ldbu	r4,10(r2)
    4e68:	2008703a 	and	r4,r4,zero
    4e6c:	200b883a 	mov	r5,r4
    4e70:	3009883a 	mov	r4,r6
    4e74:	2908b03a 	or	r4,r5,r4
    4e78:	11000285 	stb	r4,10(r2)
    4e7c:	1808d43a 	srli	r4,r3,16
    4e80:	21803fcc 	andi	r6,r4,255
    4e84:	110002c3 	ldbu	r4,11(r2)
    4e88:	2008703a 	and	r4,r4,zero
    4e8c:	200b883a 	mov	r5,r4
    4e90:	3009883a 	mov	r4,r6
    4e94:	2908b03a 	or	r4,r5,r4
    4e98:	110002c5 	stb	r4,11(r2)
    4e9c:	180ad63a 	srli	r5,r3,24
    4ea0:	10c00303 	ldbu	r3,12(r2)
    4ea4:	1806703a 	and	r3,r3,zero
    4ea8:	1809883a 	mov	r4,r3
    4eac:	2807883a 	mov	r3,r5
    4eb0:	20c6b03a 	or	r3,r4,r3
    4eb4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    4eb8:	e0bffc17 	ldw	r2,-16(fp)
    4ebc:	00c000c4 	movi	r3,3
    4ec0:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    4ec4:	e0bffc17 	ldw	r2,-16(fp)
    4ec8:	10800c83 	ldbu	r2,50(r2)
    4ecc:	10803fcc 	andi	r2,r2,255
    4ed0:	10c00120 	cmpeqi	r3,r2,4
    4ed4:	1800021e 	bne	r3,zero,4ee0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    4ed8:	10800148 	cmpgei	r2,r2,5
    4edc:	00000306 	br	4eec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    4ee0:	e0bffc17 	ldw	r2,-16(fp)
    4ee4:	10000cc5 	stb	zero,51(r2)
                                        break;
    4ee8:	00000106 	br	4ef0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    4eec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	10800c43 	ldbu	r2,49(r2)
    4ef8:	10bfff84 	addi	r2,r2,-2
    4efc:	1007883a 	mov	r3,r2
    4f00:	e0bffc17 	ldw	r2,-16(fp)
    4f04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4f08:	e0bffc17 	ldw	r2,-16(fp)
    4f0c:	10c00404 	addi	r3,r2,16
    4f10:	e0bffc17 	ldw	r2,-16(fp)
    4f14:	10800204 	addi	r2,r2,8
    4f18:	100b883a 	mov	r5,r2
    4f1c:	1809883a 	mov	r4,r3
    4f20:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    4f24:	e0bffc17 	ldw	r2,-16(fp)
    4f28:	00c00104 	movi	r3,4
    4f2c:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    4f30:	e0bffc17 	ldw	r2,-16(fp)
    4f34:	10800c83 	ldbu	r2,50(r2)
    4f38:	10803fcc 	andi	r2,r2,255
    4f3c:	10c00120 	cmpeqi	r3,r2,4
    4f40:	1800141e 	bne	r3,zero,4f94 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    4f44:	10c00160 	cmpeqi	r3,r2,5
    4f48:	1800311e 	bne	r3,zero,5010 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    4f4c:	108000a0 	cmpeqi	r2,r2,2
    4f50:	10005a26 	beq	r2,zero,50bc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    4f54:	e0bffc17 	ldw	r2,-16(fp)
    4f58:	10800404 	addi	r2,r2,16
    4f5c:	e1bffe17 	ldw	r6,-8(fp)
    4f60:	e17ffd17 	ldw	r5,-12(fp)
    4f64:	1009883a 	mov	r4,r2
    4f68:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4f6c:	1080005c 	xori	r2,r2,1
    4f70:	10803fcc 	andi	r2,r2,255
    4f74:	10000226 	beq	r2,zero,4f80 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    4f78:	0005883a 	mov	r2,zero
    4f7c:	00008706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    4f80:	e0bffa17 	ldw	r2,-24(fp)
    4f84:	10c00143 	ldbu	r3,5(r2)
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	10c00d05 	stb	r3,52(r2)
                                        break;
    4f90:	00005e06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    4f94:	e0bffc17 	ldw	r2,-16(fp)
    4f98:	10800404 	addi	r2,r2,16
    4f9c:	e1bffe17 	ldw	r6,-8(fp)
    4fa0:	e17ffd17 	ldw	r5,-12(fp)
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4fac:	1080005c 	xori	r2,r2,1
    4fb0:	10803fcc 	andi	r2,r2,255
    4fb4:	10000226 	beq	r2,zero,4fc0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    4fb8:	0005883a 	mov	r2,zero
    4fbc:	00007706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	10800e03 	ldbu	r2,56(r2)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	10004c1e 	bne	r2,zero,5100 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	00c00044 	movi	r3,1
    4fd8:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    4fdc:	e0bffb17 	ldw	r2,-20(fp)
    4fe0:	10c00083 	ldbu	r3,2(r2)
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	10c000c3 	ldbu	r3,3(r2)
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
    5000:	10c001c3 	ldbu	r3,7(r2)
    5004:	e0bffc17 	ldw	r2,-16(fp)
    5008:	10c00d45 	stb	r3,53(r2)
                                        break;
    500c:	00003f06 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5010:	e0bffc17 	ldw	r2,-16(fp)
    5014:	10800404 	addi	r2,r2,16
    5018:	e1bffe17 	ldw	r6,-8(fp)
    501c:	e17ffd17 	ldw	r5,-12(fp)
    5020:	1009883a 	mov	r4,r2
    5024:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5028:	1080005c 	xori	r2,r2,1
    502c:	10803fcc 	andi	r2,r2,255
    5030:	10000226 	beq	r2,zero,503c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5034:	0005883a 	mov	r2,zero
    5038:	00005806 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    503c:	e0bffc17 	ldw	r2,-16(fp)
    5040:	10800cc3 	ldbu	r2,51(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	10002f26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    504c:	e0bffc17 	ldw	r2,-16(fp)
    5050:	10800117 	ldw	r2,4(r2)
    5054:	10002c26 	beq	r2,zero,5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10800117 	ldw	r2,4(r2)
    5060:	10800017 	ldw	r2,0(r2)
    5064:	10800017 	ldw	r2,0(r2)
    5068:	e0fffc17 	ldw	r3,-16(fp)
    506c:	1a000117 	ldw	r8,4(r3)
    5070:	e0fffc17 	ldw	r3,-16(fp)
    5074:	18c00d03 	ldbu	r3,52(r3)
    5078:	19403fcc 	andi	r5,r3,255
    507c:	e0fffc17 	ldw	r3,-16(fp)
    5080:	18c00d83 	ldbu	r3,54(r3)
    5084:	19803fcc 	andi	r6,r3,255
    5088:	e0fffc17 	ldw	r3,-16(fp)
    508c:	18c00dc3 	ldbu	r3,55(r3)
    5090:	19c03fcc 	andi	r7,r3,255
    5094:	e0fffc17 	ldw	r3,-16(fp)
    5098:	18c00d43 	ldbu	r3,53(r3)
    509c:	18c03fcc 	andi	r3,r3,255
    50a0:	e13ffc17 	ldw	r4,-16(fp)
    50a4:	21000804 	addi	r4,r4,32
    50a8:	d9000115 	stw	r4,4(sp)
    50ac:	d8c00015 	stw	r3,0(sp)
    50b0:	4009883a 	mov	r4,r8
    50b4:	103ee83a 	callr	r2
                                        break;
    50b8:	00001306 	br	5108 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    50bc:	e0bffc17 	ldw	r2,-16(fp)
    50c0:	10c00604 	addi	r3,r2,24
    50c4:	e0bffc17 	ldw	r2,-16(fp)
    50c8:	10800c43 	ldbu	r2,49(r2)
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	10bfff84 	addi	r2,r2,-2
    50d4:	10bfffcc 	andi	r2,r2,65535
    50d8:	100f883a 	mov	r7,r2
    50dc:	e1bffe17 	ldw	r6,-8(fp)
    50e0:	e17ffd17 	ldw	r5,-12(fp)
    50e4:	1809883a 	mov	r4,r3
    50e8:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    50ec:	1080005c 	xori	r2,r2,1
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	10000526 	beq	r2,zero,510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    50f8:	0005883a 	mov	r2,zero
    50fc:	00002706 	br	519c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5100:	0001883a 	nop
    5104:	00000106 	br	510c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    5108:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    510c:	e0bffc17 	ldw	r2,-16(fp)
    5110:	10c00804 	addi	r3,r2,32
    5114:	e0bffc17 	ldw	r2,-16(fp)
    5118:	19803fcc 	andi	r6,r3,255
    511c:	11000243 	ldbu	r4,9(r2)
    5120:	2008703a 	and	r4,r4,zero
    5124:	200b883a 	mov	r5,r4
    5128:	3009883a 	mov	r4,r6
    512c:	2908b03a 	or	r4,r5,r4
    5130:	11000245 	stb	r4,9(r2)
    5134:	1808d23a 	srli	r4,r3,8
    5138:	21803fcc 	andi	r6,r4,255
    513c:	11000283 	ldbu	r4,10(r2)
    5140:	2008703a 	and	r4,r4,zero
    5144:	200b883a 	mov	r5,r4
    5148:	3009883a 	mov	r4,r6
    514c:	2908b03a 	or	r4,r5,r4
    5150:	11000285 	stb	r4,10(r2)
    5154:	1808d43a 	srli	r4,r3,16
    5158:	21803fcc 	andi	r6,r4,255
    515c:	110002c3 	ldbu	r4,11(r2)
    5160:	2008703a 	and	r4,r4,zero
    5164:	200b883a 	mov	r5,r4
    5168:	3009883a 	mov	r4,r6
    516c:	2908b03a 	or	r4,r5,r4
    5170:	110002c5 	stb	r4,11(r2)
    5174:	180ad63a 	srli	r5,r3,24
    5178:	10c00303 	ldbu	r3,12(r2)
    517c:	1806703a 	and	r3,r3,zero
    5180:	1809883a 	mov	r4,r3
    5184:	2807883a 	mov	r3,r5
    5188:	20c6b03a 	or	r3,r4,r3
    518c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5198:	00800044 	movi	r2,1
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	df000315 	stw	fp,12(sp)
    51b8:	df000304 	addi	fp,sp,12
    51bc:	2007883a 	mov	r3,r4
    51c0:	2805883a 	mov	r2,r5
    51c4:	e0fffe05 	stb	r3,-8(fp)
    51c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0) {
    51cc:	e0bfff03 	ldbu	r2,-4(fp)
    51d0:	1000081e 	bne	r2,zero,51f4 <_Z8set_notehh+0x44>
		set_val = synth->KEY[note];
    51d4:	d0e00d17 	ldw	r3,-32716(gp)
    51d8:	e0bffe03 	ldbu	r2,-8(fp)
    51dc:	1085883a 	add	r2,r2,r2
    51e0:	1085883a 	add	r2,r2,r2
    51e4:	1885883a 	add	r2,r3,r2
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	e0bffd15 	stw	r2,-12(fp)
    51f0:	00000306 	br	5200 <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    51f4:	e0bfff03 	ldbu	r2,-4(fp)
    51f8:	10802004 	addi	r2,r2,128
    51fc:	e0bffd15 	stw	r2,-12(fp)
	}

	synth->KEY[note] = set_val;
    5200:	d0e00d17 	ldw	r3,-32716(gp)
    5204:	e0bffe03 	ldbu	r2,-8(fp)
    5208:	1085883a 	add	r2,r2,r2
    520c:	1085883a 	add	r2,r2,r2
    5210:	1885883a 	add	r2,r3,r2
    5214:	e0fffd17 	ldw	r3,-12(fp)
    5218:	10c00015 	stw	r3,0(r2)
}
    521c:	0001883a 	nop
    5220:	e037883a 	mov	sp,fp
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00104 	addi	sp,sp,4
    522c:	f800283a 	ret

00005230 <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    5230:	defffd04 	addi	sp,sp,-12
    5234:	df000215 	stw	fp,8(sp)
    5238:	df000204 	addi	fp,sp,8
    523c:	2005883a 	mov	r2,r4
    5240:	e17fff15 	stw	r5,-4(fp)
    5244:	e0bffe05 	stb	r2,-8(fp)
	synth->ADSR[par] = val;
    5248:	d0e00d17 	ldw	r3,-32716(gp)
    524c:	e0bffe03 	ldbu	r2,-8(fp)
    5250:	10802004 	addi	r2,r2,128
    5254:	1085883a 	add	r2,r2,r2
    5258:	1085883a 	add	r2,r2,r2
    525c:	1885883a 	add	r2,r3,r2
    5260:	e0ffff17 	ldw	r3,-4(fp)
    5264:	10c00015 	stw	r3,0(r2)
}
    5268:	0001883a 	nop
    526c:	e037883a 	mov	sp,fp
    5270:	df000017 	ldw	fp,0(sp)
    5274:	dec00104 	addi	sp,sp,4
    5278:	f800283a 	ret

0000527c <_Z9calc_adsrtttf>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 rel_m_seconds, float peak_amp) {
    527c:	defff204 	addi	sp,sp,-56
    5280:	dfc00d15 	stw	ra,52(sp)
    5284:	df000c15 	stw	fp,48(sp)
    5288:	dc000b15 	stw	r16,44(sp)
    528c:	df000c04 	addi	fp,sp,48
    5290:	2807883a 	mov	r3,r5
    5294:	3005883a 	mov	r2,r6
    5298:	e1fffe15 	stw	r7,-8(fp)
    529c:	e13ffb0d 	sth	r4,-20(fp)
    52a0:	e0fffc0d 	sth	r3,-16(fp)
    52a4:	e0bffd0d 	sth	r2,-12(fp)

	alt_u32 ATT_LEN, ATT_STEP, PEAK_ATT, DEC_LEN, DEC_STEP, REL_LEN, REL_STEP;

	if (att_m_seconds > 5000) {
    52a8:	e0bffb0b 	ldhu	r2,-20(fp)
    52ac:	1084e270 	cmpltui	r2,r2,5001
    52b0:	1000041e 	bne	r2,zero,52c4 <_Z9calc_adsrtttf+0x48>
		printf("ERRROR: Requested attack length is too long.\n");
    52b4:	010000b4 	movhi	r4,2
    52b8:	210f6004 	addi	r4,r4,15744
    52bc:	000f0340 	call	f034 <puts>
		return;
    52c0:	0000b806 	br	55a4 <_Z9calc_adsrtttf+0x328>
	}
	if (dec_m_seconds > 5000) {
    52c4:	e0bffc0b 	ldhu	r2,-16(fp)
    52c8:	1084e270 	cmpltui	r2,r2,5001
    52cc:	1000041e 	bne	r2,zero,52e0 <_Z9calc_adsrtttf+0x64>
		printf("ERRROR: Requested decay length is too long.\n");
    52d0:	010000b4 	movhi	r4,2
    52d4:	210f6c04 	addi	r4,r4,15792
    52d8:	000f0340 	call	f034 <puts>
		return;
    52dc:	0000b106 	br	55a4 <_Z9calc_adsrtttf+0x328>
	}
	if (rel_m_seconds > 10000) {
    52e0:	e0bffd0b 	ldhu	r2,-12(fp)
    52e4:	1089c470 	cmpltui	r2,r2,10001
    52e8:	1000041e 	bne	r2,zero,52fc <_Z9calc_adsrtttf+0x80>
		printf("ERRROR: Requested release length is too long.\n");
    52ec:	010000b4 	movhi	r4,2
    52f0:	210f7704 	addi	r4,r4,15836
    52f4:	000f0340 	call	f034 <puts>
		return;
    52f8:	0000aa06 	br	55a4 <_Z9calc_adsrtttf+0x328>
	}
	if (peak_amp > (float) 1.9) {
    52fc:	014ffcf4 	movhi	r5,16371
    5300:	294cccc4 	addi	r5,r5,13107
    5304:	e13ffe17 	ldw	r4,-8(fp)
    5308:	000d32c0 	call	d32c <__gesf2>
    530c:	0080040e 	bge	zero,r2,5320 <_Z9calc_adsrtttf+0xa4>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    5310:	010000b4 	movhi	r4,2
    5314:	210f8304 	addi	r4,r4,15884
    5318:	000f0340 	call	f034 <puts>
		return;
    531c:	0000a106 	br	55a4 <_Z9calc_adsrtttf+0x328>
	}

	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5320:	e0bffb0b 	ldhu	r2,-20(fp)
    5324:	016b1114 	movui	r5,44100
    5328:	1009883a 	mov	r4,r2
    532c:	000cec40 	call	cec4 <__mulsi3>
    5330:	0140fa04 	movi	r5,1000
    5334:	1009883a 	mov	r4,r2
    5338:	000cd100 	call	cd10 <__divsi3>
    533c:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = (peak_amp * (alt_u32) 0x80000) / ATT_LEN;
    5340:	01524034 	movhi	r5,18688
    5344:	e13ffe17 	ldw	r4,-8(fp)
    5348:	000d3e80 	call	d3e8 <__mulsf3>
    534c:	1007883a 	mov	r3,r2
    5350:	1821883a 	mov	r16,r3
    5354:	e13ff417 	ldw	r4,-48(fp)
    5358:	000dd6c0 	call	dd6c <__floatunsisf>
    535c:	1007883a 	mov	r3,r2
    5360:	180b883a 	mov	r5,r3
    5364:	8009883a 	mov	r4,r16
    5368:	000ceec0 	call	ceec <__divsf3>
    536c:	1007883a 	mov	r3,r2
    5370:	1805883a 	mov	r2,r3
    5374:	1009883a 	mov	r4,r2
    5378:	000ccb00 	call	ccb0 <__fixunssfsi>
    537c:	e0bff515 	stw	r2,-44(fp)
	PEAK_ATT = ATT_LEN * ATT_STEP;
    5380:	e17ff517 	ldw	r5,-44(fp)
    5384:	e13ff417 	ldw	r4,-48(fp)
    5388:	000cec40 	call	cec4 <__mulsi3>
    538c:	e0bff615 	stw	r2,-40(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    5390:	e0bffc0b 	ldhu	r2,-16(fp)
    5394:	016b1114 	movui	r5,44100
    5398:	1009883a 	mov	r4,r2
    539c:	000cec40 	call	cec4 <__mulsi3>
    53a0:	0140fa04 	movi	r5,1000
    53a4:	1009883a 	mov	r4,r2
    53a8:	000cd100 	call	cd10 <__divsi3>
    53ac:	e0bff715 	stw	r2,-36(fp)
	DEC_STEP = ((peak_amp - 1) * (alt_u32) 0x80000) / DEC_LEN;
    53b0:	014fe034 	movhi	r5,16256
    53b4:	e13ffe17 	ldw	r4,-8(fp)
    53b8:	000d8180 	call	d818 <__subsf3>
    53bc:	1007883a 	mov	r3,r2
    53c0:	1805883a 	mov	r2,r3
    53c4:	01524034 	movhi	r5,18688
    53c8:	1009883a 	mov	r4,r2
    53cc:	000d3e80 	call	d3e8 <__mulsf3>
    53d0:	1007883a 	mov	r3,r2
    53d4:	1821883a 	mov	r16,r3
    53d8:	e13ff717 	ldw	r4,-36(fp)
    53dc:	000dd6c0 	call	dd6c <__floatunsisf>
    53e0:	1007883a 	mov	r3,r2
    53e4:	180b883a 	mov	r5,r3
    53e8:	8009883a 	mov	r4,r16
    53ec:	000ceec0 	call	ceec <__divsf3>
    53f0:	1007883a 	mov	r3,r2
    53f4:	1805883a 	mov	r2,r3
    53f8:	1009883a 	mov	r4,r2
    53fc:	000ccb00 	call	ccb0 <__fixunssfsi>
    5400:	e0bff815 	stw	r2,-32(fp)
	REL_LEN = (rel_m_seconds * 44100) / 1000;
    5404:	e0bffd0b 	ldhu	r2,-12(fp)
    5408:	016b1114 	movui	r5,44100
    540c:	1009883a 	mov	r4,r2
    5410:	000cec40 	call	cec4 <__mulsi3>
    5414:	0140fa04 	movi	r5,1000
    5418:	1009883a 	mov	r4,r2
    541c:	000cd100 	call	cd10 <__divsi3>
    5420:	e0bff915 	stw	r2,-28(fp)
	REL_STEP = ((alt_u32) 0x80000) / REL_LEN;
    5424:	e17ff917 	ldw	r5,-28(fp)
    5428:	01000234 	movhi	r4,8
    542c:	000ce080 	call	ce08 <__udivsi3>
    5430:	e0bffa15 	stw	r2,-24(fp)

	printf("PEAK_ATT Calc: %X\n", PEAK_ATT);
    5434:	e17ff617 	ldw	r5,-40(fp)
    5438:	010000b4 	movhi	r4,2
    543c:	210f9104 	addi	r4,r4,15940
    5440:	000ef180 	call	ef18 <printf>
	set_adsr(PEAK_A, PEAK_ATT);
    5444:	e17ff617 	ldw	r5,-40(fp)
    5448:	0009883a 	mov	r4,zero
    544c:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("PEAK_ATT Set:  %X\n", synth->ADSR[PEAK_A]);
    5450:	d0a00d17 	ldw	r2,-32716(gp)
    5454:	10808017 	ldw	r2,512(r2)
    5458:	100b883a 	mov	r5,r2
    545c:	010000b4 	movhi	r4,2
    5460:	210f9604 	addi	r4,r4,15960
    5464:	000ef180 	call	ef18 <printf>
	printf("ATT_LEN Calc:  %X\n", ATT_LEN);
    5468:	e17ff417 	ldw	r5,-48(fp)
    546c:	010000b4 	movhi	r4,2
    5470:	210f9b04 	addi	r4,r4,15980
    5474:	000ef180 	call	ef18 <printf>
	set_adsr(ATT_L, ATT_LEN);
    5478:	e17ff417 	ldw	r5,-48(fp)
    547c:	01000044 	movi	r4,1
    5480:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("ATT_LEN Set:   %X\n", synth->ADSR[ATT_L]);
    5484:	d0a00d17 	ldw	r2,-32716(gp)
    5488:	10808117 	ldw	r2,516(r2)
    548c:	100b883a 	mov	r5,r2
    5490:	010000b4 	movhi	r4,2
    5494:	210fa004 	addi	r4,r4,16000
    5498:	000ef180 	call	ef18 <printf>
	printf("ATT_STEP Calc: %X\n", ATT_STEP);
    549c:	e17ff517 	ldw	r5,-44(fp)
    54a0:	010000b4 	movhi	r4,2
    54a4:	210fa504 	addi	r4,r4,16020
    54a8:	000ef180 	call	ef18 <printf>
	set_adsr(ATT_S, ATT_STEP);
    54ac:	e17ff517 	ldw	r5,-44(fp)
    54b0:	01000084 	movi	r4,2
    54b4:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("ATT_STEP Set:  %X\n", synth->ADSR[ATT_S]);
    54b8:	d0a00d17 	ldw	r2,-32716(gp)
    54bc:	10808217 	ldw	r2,520(r2)
    54c0:	100b883a 	mov	r5,r2
    54c4:	010000b4 	movhi	r4,2
    54c8:	210faa04 	addi	r4,r4,16040
    54cc:	000ef180 	call	ef18 <printf>
	printf("DEC_LEN Calc:  %X\n", DEC_LEN);
    54d0:	e17ff717 	ldw	r5,-36(fp)
    54d4:	010000b4 	movhi	r4,2
    54d8:	210faf04 	addi	r4,r4,16060
    54dc:	000ef180 	call	ef18 <printf>
	set_adsr(DEC_L, DEC_LEN);
    54e0:	e17ff717 	ldw	r5,-36(fp)
    54e4:	010000c4 	movi	r4,3
    54e8:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("DEC_LEN Set:   %X\n", synth->ADSR[DEC_L]);
    54ec:	d0a00d17 	ldw	r2,-32716(gp)
    54f0:	10808317 	ldw	r2,524(r2)
    54f4:	100b883a 	mov	r5,r2
    54f8:	010000b4 	movhi	r4,2
    54fc:	210fb404 	addi	r4,r4,16080
    5500:	000ef180 	call	ef18 <printf>
	printf("DEC_STEP Calc: %X\n", DEC_STEP);
    5504:	e17ff817 	ldw	r5,-32(fp)
    5508:	010000b4 	movhi	r4,2
    550c:	210fb904 	addi	r4,r4,16100
    5510:	000ef180 	call	ef18 <printf>
	set_adsr(DEC_S, DEC_STEP);
    5514:	e17ff817 	ldw	r5,-32(fp)
    5518:	01000104 	movi	r4,4
    551c:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("DEC_STEP Set:  %X\n", synth->ADSR[DEC_S]);
    5520:	d0a00d17 	ldw	r2,-32716(gp)
    5524:	10808417 	ldw	r2,528(r2)
    5528:	100b883a 	mov	r5,r2
    552c:	010000b4 	movhi	r4,2
    5530:	210fbe04 	addi	r4,r4,16120
    5534:	000ef180 	call	ef18 <printf>
	printf("REL_LEN Calc:  %X\n", REL_LEN);
    5538:	e17ff917 	ldw	r5,-28(fp)
    553c:	010000b4 	movhi	r4,2
    5540:	210fc304 	addi	r4,r4,16140
    5544:	000ef180 	call	ef18 <printf>
	set_adsr(REL_L, REL_LEN);
    5548:	e17ff917 	ldw	r5,-28(fp)
    554c:	01000144 	movi	r4,5
    5550:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("REL_LEN Set:   %X\n", synth->ADSR[REL_L]);
    5554:	d0a00d17 	ldw	r2,-32716(gp)
    5558:	10808517 	ldw	r2,532(r2)
    555c:	100b883a 	mov	r5,r2
    5560:	010000b4 	movhi	r4,2
    5564:	210fc804 	addi	r4,r4,16160
    5568:	000ef180 	call	ef18 <printf>
	printf("REL_STEP Calc: %X\n", REL_STEP);
    556c:	e17ffa17 	ldw	r5,-24(fp)
    5570:	010000b4 	movhi	r4,2
    5574:	210fcd04 	addi	r4,r4,16180
    5578:	000ef180 	call	ef18 <printf>
	set_adsr(REL_S, REL_STEP);
    557c:	e17ffa17 	ldw	r5,-24(fp)
    5580:	01000184 	movi	r4,6
    5584:	00052300 	call	5230 <_Z8set_adsrhm>
	printf("REL_STEP Set:  %X\n", synth->ADSR[REL_S]);
    5588:	d0a00d17 	ldw	r2,-32716(gp)
    558c:	10808617 	ldw	r2,536(r2)
    5590:	100b883a 	mov	r5,r2
    5594:	010000b4 	movhi	r4,2
    5598:	210fd204 	addi	r4,r4,16200
    559c:	000ef180 	call	ef18 <printf>

	return;
    55a0:	0001883a 	nop
}
    55a4:	e6ffff04 	addi	sp,fp,-4
    55a8:	dfc00217 	ldw	ra,8(sp)
    55ac:	df000117 	ldw	fp,4(sp)
    55b0:	dc000017 	ldw	r16,0(sp)
    55b4:	dec00304 	addi	sp,sp,12
    55b8:	f800283a 	ret

000055bc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    55bc:	defff904 	addi	sp,sp,-28
    55c0:	dfc00615 	stw	ra,24(sp)
    55c4:	df000515 	stw	fp,20(sp)
    55c8:	df000504 	addi	fp,sp,20
    55cc:	e13ffc15 	stw	r4,-16(fp)
    55d0:	e17ffd15 	stw	r5,-12(fp)
    55d4:	3007883a 	mov	r3,r6
    55d8:	3805883a 	mov	r2,r7
    55dc:	e0fffe05 	stb	r3,-8(fp)
    55e0:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    55e4:	e0800217 	ldw	r2,8(fp)
    55e8:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    55ec:	e0bffc17 	ldw	r2,-16(fp)
    55f0:	10800117 	ldw	r2,4(r2)
    55f4:	1080004c 	andi	r2,r2,1
    55f8:	1007883a 	mov	r3,r2
    55fc:	e0bffb17 	ldw	r2,-20(fp)
    5600:	10800003 	ldbu	r2,0(r2)
    5604:	1080004c 	andi	r2,r2,1
    5608:	18c03fcc 	andi	r3,r3,255
    560c:	10803fcc 	andi	r2,r2,255
    5610:	18801426 	beq	r3,r2,5664 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5614:	e0bffb17 	ldw	r2,-20(fp)
    5618:	10800003 	ldbu	r2,0(r2)
    561c:	1080004c 	andi	r2,r2,1
    5620:	10803fcc 	andi	r2,r2,255
    5624:	10000826 	beq	r2,zero,5648 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5628:	e0bffc17 	ldw	r2,-16(fp)
    562c:	10800017 	ldw	r2,0(r2)
    5630:	10800304 	addi	r2,r2,12
    5634:	10800017 	ldw	r2,0(r2)
    5638:	e17ffb17 	ldw	r5,-20(fp)
    563c:	e13ffc17 	ldw	r4,-16(fp)
    5640:	103ee83a 	callr	r2
    5644:	00000706 	br	5664 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5648:	e0bffc17 	ldw	r2,-16(fp)
    564c:	10800017 	ldw	r2,0(r2)
    5650:	10800204 	addi	r2,r2,8
    5654:	10800017 	ldw	r2,0(r2)
    5658:	e17ffb17 	ldw	r5,-20(fp)
    565c:	e13ffc17 	ldw	r4,-16(fp)
    5660:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5664:	e0bffc17 	ldw	r2,-16(fp)
    5668:	10800117 	ldw	r2,4(r2)
    566c:	1004d07a 	srli	r2,r2,1
    5670:	1080004c 	andi	r2,r2,1
    5674:	1007883a 	mov	r3,r2
    5678:	e0bffb17 	ldw	r2,-20(fp)
    567c:	10800003 	ldbu	r2,0(r2)
    5680:	1004d07a 	srli	r2,r2,1
    5684:	1080004c 	andi	r2,r2,1
    5688:	18c03fcc 	andi	r3,r3,255
    568c:	10803fcc 	andi	r2,r2,255
    5690:	18801426 	beq	r3,r2,56e4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5694:	e0bffb17 	ldw	r2,-20(fp)
    5698:	10800003 	ldbu	r2,0(r2)
    569c:	1080008c 	andi	r2,r2,2
    56a0:	10803fcc 	andi	r2,r2,255
    56a4:	10000826 	beq	r2,zero,56c8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    56a8:	e0bffc17 	ldw	r2,-16(fp)
    56ac:	10800017 	ldw	r2,0(r2)
    56b0:	10800504 	addi	r2,r2,20
    56b4:	10800017 	ldw	r2,0(r2)
    56b8:	e17ffb17 	ldw	r5,-20(fp)
    56bc:	e13ffc17 	ldw	r4,-16(fp)
    56c0:	103ee83a 	callr	r2
    56c4:	00000706 	br	56e4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    56c8:	e0bffc17 	ldw	r2,-16(fp)
    56cc:	10800017 	ldw	r2,0(r2)
    56d0:	10800404 	addi	r2,r2,16
    56d4:	10800017 	ldw	r2,0(r2)
    56d8:	e17ffb17 	ldw	r5,-20(fp)
    56dc:	e13ffc17 	ldw	r4,-16(fp)
    56e0:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    56e4:	e0bffc17 	ldw	r2,-16(fp)
    56e8:	10800117 	ldw	r2,4(r2)
    56ec:	1004d0ba 	srli	r2,r2,2
    56f0:	1080004c 	andi	r2,r2,1
    56f4:	1007883a 	mov	r3,r2
    56f8:	e0bffb17 	ldw	r2,-20(fp)
    56fc:	10800003 	ldbu	r2,0(r2)
    5700:	1004d0ba 	srli	r2,r2,2
    5704:	1080004c 	andi	r2,r2,1
    5708:	18c03fcc 	andi	r3,r3,255
    570c:	10803fcc 	andi	r2,r2,255
    5710:	18801426 	beq	r3,r2,5764 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5714:	e0bffb17 	ldw	r2,-20(fp)
    5718:	10800003 	ldbu	r2,0(r2)
    571c:	1080010c 	andi	r2,r2,4
    5720:	10803fcc 	andi	r2,r2,255
    5724:	10000826 	beq	r2,zero,5748 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5728:	e0bffc17 	ldw	r2,-16(fp)
    572c:	10800017 	ldw	r2,0(r2)
    5730:	10800704 	addi	r2,r2,28
    5734:	10800017 	ldw	r2,0(r2)
    5738:	e17ffb17 	ldw	r5,-20(fp)
    573c:	e13ffc17 	ldw	r4,-16(fp)
    5740:	103ee83a 	callr	r2
    5744:	00000706 	br	5764 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5748:	e0bffc17 	ldw	r2,-16(fp)
    574c:	10800017 	ldw	r2,0(r2)
    5750:	10800604 	addi	r2,r2,24
    5754:	10800017 	ldw	r2,0(r2)
    5758:	e17ffb17 	ldw	r5,-20(fp)
    575c:	e13ffc17 	ldw	r4,-16(fp)
    5760:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5764:	e0bffb17 	ldw	r2,-20(fp)
    5768:	10800043 	ldbu	r2,1(r2)
    576c:	10803fcc 	andi	r2,r2,255
    5770:	1080201c 	xori	r2,r2,128
    5774:	10bfe004 	addi	r2,r2,-128
    5778:	1000061e 	bne	r2,zero,5794 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    577c:	e0bffb17 	ldw	r2,-20(fp)
    5780:	10800083 	ldbu	r2,2(r2)
    5784:	10803fcc 	andi	r2,r2,255
    5788:	1080201c 	xori	r2,r2,128
    578c:	10bfe004 	addi	r2,r2,-128
    5790:	10000726 	beq	r2,zero,57b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5794:	e0bffc17 	ldw	r2,-16(fp)
    5798:	10800017 	ldw	r2,0(r2)
    579c:	10800104 	addi	r2,r2,4
    57a0:	10800017 	ldw	r2,0(r2)
    57a4:	e17ffb17 	ldw	r5,-20(fp)
    57a8:	e13ffc17 	ldw	r4,-16(fp)
    57ac:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    57b0:	e0800217 	ldw	r2,8(fp)
    57b4:	10c00003 	ldbu	r3,0(r2)
    57b8:	e0bffc17 	ldw	r2,-16(fp)
    57bc:	10c00105 	stb	r3,4(r2)
#endif

};
    57c0:	0001883a 	nop
    57c4:	e037883a 	mov	sp,fp
    57c8:	dfc00117 	ldw	ra,4(sp)
    57cc:	df000017 	ldw	fp,0(sp)
    57d0:	dec00204 	addi	sp,sp,8
    57d4:	f800283a 	ret

000057d8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    57d8:	defff804 	addi	sp,sp,-32
    57dc:	dfc00715 	stw	ra,28(sp)
    57e0:	df000615 	stw	fp,24(sp)
    57e4:	df000604 	addi	fp,sp,24
    57e8:	e13ffc15 	stw	r4,-16(fp)
    57ec:	e17ffd15 	stw	r5,-12(fp)
    57f0:	3007883a 	mov	r3,r6
    57f4:	3805883a 	mov	r2,r7
    57f8:	e0fffe05 	stb	r3,-8(fp)
    57fc:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5800:	e0800217 	ldw	r2,8(fp)
    5804:	10800084 	addi	r2,r2,2
    5808:	10800003 	ldbu	r2,0(r2)
    580c:	10803fcc 	andi	r2,r2,255
    5810:	10800058 	cmpnei	r2,r2,1
    5814:	10009926 	beq	r2,zero,5a7c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5818:	e0bffc17 	ldw	r2,-16(fp)
    581c:	10c00103 	ldbu	r3,4(r2)
    5820:	e0800217 	ldw	r2,8(fp)
    5824:	10800003 	ldbu	r2,0(r2)
    5828:	18c03fcc 	andi	r3,r3,255
    582c:	10803fcc 	andi	r2,r2,255
    5830:	18800e26 	beq	r3,r2,586c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5834:	e0bffc17 	ldw	r2,-16(fp)
    5838:	10800017 	ldw	r2,0(r2)
    583c:	10800204 	addi	r2,r2,8
    5840:	10800017 	ldw	r2,0(r2)
    5844:	e0fffc17 	ldw	r3,-16(fp)
    5848:	18c00103 	ldbu	r3,4(r3)
    584c:	19003fcc 	andi	r4,r3,255
    5850:	e0c00217 	ldw	r3,8(fp)
    5854:	18c00003 	ldbu	r3,0(r3)
    5858:	18c03fcc 	andi	r3,r3,255
    585c:	180d883a 	mov	r6,r3
    5860:	200b883a 	mov	r5,r4
    5864:	e13ffc17 	ldw	r4,-16(fp)
    5868:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    586c:	00800084 	movi	r2,2
    5870:	e0bffa05 	stb	r2,-24(fp)
    5874:	e0bffa03 	ldbu	r2,-24(fp)
    5878:	10800228 	cmpgeui	r2,r2,8
    587c:	10006e1e 	bne	r2,zero,5a38 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5880:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5884:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5888:	00800084 	movi	r2,2
    588c:	e0bffac5 	stb	r2,-21(fp)
    5890:	e0bffac3 	ldbu	r2,-21(fp)
    5894:	10800228 	cmpgeui	r2,r2,8
    5898:	10002f1e 	bne	r2,zero,5958 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    589c:	e0bffa03 	ldbu	r2,-24(fp)
    58a0:	e0c00217 	ldw	r3,8(fp)
    58a4:	1885883a 	add	r2,r3,r2
    58a8:	11000003 	ldbu	r4,0(r2)
    58ac:	e0bffac3 	ldbu	r2,-21(fp)
    58b0:	e0fffc17 	ldw	r3,-16(fp)
    58b4:	1885883a 	add	r2,r3,r2
    58b8:	10800104 	addi	r2,r2,4
    58bc:	10800003 	ldbu	r2,0(r2)
    58c0:	20c03fcc 	andi	r3,r4,255
    58c4:	10803fcc 	andi	r2,r2,255
    58c8:	1880091e 	bne	r3,r2,58f0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    58cc:	e0bffa03 	ldbu	r2,-24(fp)
    58d0:	e0c00217 	ldw	r3,8(fp)
    58d4:	1885883a 	add	r2,r3,r2
    58d8:	10800003 	ldbu	r2,0(r2)
    58dc:	10803fcc 	andi	r2,r2,255
    58e0:	10800060 	cmpeqi	r2,r2,1
    58e4:	1000021e 	bne	r2,zero,58f0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    58e8:	00800044 	movi	r2,1
    58ec:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    58f0:	e0bffac3 	ldbu	r2,-21(fp)
    58f4:	e0c00217 	ldw	r3,8(fp)
    58f8:	1885883a 	add	r2,r3,r2
    58fc:	11000003 	ldbu	r4,0(r2)
    5900:	e0bffa03 	ldbu	r2,-24(fp)
    5904:	e0fffc17 	ldw	r3,-16(fp)
    5908:	1885883a 	add	r2,r3,r2
    590c:	10800104 	addi	r2,r2,4
    5910:	10800003 	ldbu	r2,0(r2)
    5914:	20c03fcc 	andi	r3,r4,255
    5918:	10803fcc 	andi	r2,r2,255
    591c:	18800a1e 	bne	r3,r2,5948 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5920:	e0bffa03 	ldbu	r2,-24(fp)
    5924:	e0fffc17 	ldw	r3,-16(fp)
    5928:	1885883a 	add	r2,r3,r2
    592c:	10800104 	addi	r2,r2,4
    5930:	10800003 	ldbu	r2,0(r2)
    5934:	10803fcc 	andi	r2,r2,255
    5938:	10800060 	cmpeqi	r2,r2,1
    593c:	1000021e 	bne	r2,zero,5948 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5940:	00800044 	movi	r2,1
    5944:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5948:	e0bffac3 	ldbu	r2,-21(fp)
    594c:	10800044 	addi	r2,r2,1
    5950:	e0bffac5 	stb	r2,-21(fp)
    5954:	003fce06 	br	5890 <__alt_data_end+0xfc005890>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5958:	e0bffa43 	ldbu	r2,-23(fp)
    595c:	1080005c 	xori	r2,r2,1
    5960:	10803fcc 	andi	r2,r2,255
    5964:	10001c26 	beq	r2,zero,59d8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5968:	e0bffc17 	ldw	r2,-16(fp)
    596c:	10800017 	ldw	r2,0(r2)
    5970:	10800104 	addi	r2,r2,4
    5974:	10800017 	ldw	r2,0(r2)
    5978:	e0fffa03 	ldbu	r3,-24(fp)
    597c:	e1000217 	ldw	r4,8(fp)
    5980:	20c7883a 	add	r3,r4,r3
    5984:	18c00003 	ldbu	r3,0(r3)
    5988:	18c03fcc 	andi	r3,r3,255
    598c:	180d883a 	mov	r6,r3
    5990:	e17ffd17 	ldw	r5,-12(fp)
    5994:	e13ffc17 	ldw	r4,-16(fp)
    5998:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    599c:	e0bffc17 	ldw	r2,-16(fp)
    59a0:	10800017 	ldw	r2,0(r2)
    59a4:	10800304 	addi	r2,r2,12
    59a8:	10800017 	ldw	r2,0(r2)
    59ac:	e0c00217 	ldw	r3,8(fp)
    59b0:	18c00003 	ldbu	r3,0(r3)
    59b4:	19403fcc 	andi	r5,r3,255
    59b8:	e0fffa03 	ldbu	r3,-24(fp)
    59bc:	e1000217 	ldw	r4,8(fp)
    59c0:	20c7883a 	add	r3,r4,r3
    59c4:	18c00003 	ldbu	r3,0(r3)
    59c8:	18c03fcc 	andi	r3,r3,255
    59cc:	180d883a 	mov	r6,r3
    59d0:	e13ffc17 	ldw	r4,-16(fp)
    59d4:	103ee83a 	callr	r2
                }
                if (!up)
    59d8:	e0bffa83 	ldbu	r2,-22(fp)
    59dc:	1080005c 	xori	r2,r2,1
    59e0:	10803fcc 	andi	r2,r2,255
    59e4:	10001026 	beq	r2,zero,5a28 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    59e8:	e0bffc17 	ldw	r2,-16(fp)
    59ec:	10800017 	ldw	r2,0(r2)
    59f0:	10800404 	addi	r2,r2,16
    59f4:	10800017 	ldw	r2,0(r2)
    59f8:	e0fffc17 	ldw	r3,-16(fp)
    59fc:	18c00103 	ldbu	r3,4(r3)
    5a00:	19403fcc 	andi	r5,r3,255
    5a04:	e0fffa03 	ldbu	r3,-24(fp)
    5a08:	e13ffc17 	ldw	r4,-16(fp)
    5a0c:	20c7883a 	add	r3,r4,r3
    5a10:	18c00104 	addi	r3,r3,4
    5a14:	18c00003 	ldbu	r3,0(r3)
    5a18:	18c03fcc 	andi	r3,r3,255
    5a1c:	180d883a 	mov	r6,r3
    5a20:	e13ffc17 	ldw	r4,-16(fp)
    5a24:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5a28:	e0bffa03 	ldbu	r2,-24(fp)
    5a2c:	10800044 	addi	r2,r2,1
    5a30:	e0bffa05 	stb	r2,-24(fp)
    5a34:	003f8f06 	br	5874 <__alt_data_end+0xfc005874>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a38:	e03ffb05 	stb	zero,-20(fp)
    5a3c:	e0bffb03 	ldbu	r2,-20(fp)
    5a40:	10800228 	cmpgeui	r2,r2,8
    5a44:	10000e1e 	bne	r2,zero,5a80 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5a48:	e0bffb03 	ldbu	r2,-20(fp)
    5a4c:	e0fffb03 	ldbu	r3,-20(fp)
    5a50:	e1000217 	ldw	r4,8(fp)
    5a54:	20c7883a 	add	r3,r4,r3
    5a58:	18c00003 	ldbu	r3,0(r3)
    5a5c:	e13ffc17 	ldw	r4,-16(fp)
    5a60:	2085883a 	add	r2,r4,r2
    5a64:	10800104 	addi	r2,r2,4
    5a68:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a6c:	e0bffb03 	ldbu	r2,-20(fp)
    5a70:	10800044 	addi	r2,r2,1
    5a74:	e0bffb05 	stb	r2,-20(fp)
    5a78:	003ff006 	br	5a3c <__alt_data_end+0xfc005a3c>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5a7c:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5a80:	e037883a 	mov	sp,fp
    5a84:	dfc00117 	ldw	ra,4(sp)
    5a88:	df000017 	ldw	fp,0(sp)
    5a8c:	dec00204 	addi	sp,sp,8
    5a90:	f800283a 	ret

00005a94 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5a94:	defffa04 	addi	sp,sp,-24
    5a98:	dfc00515 	stw	ra,20(sp)
    5a9c:	df000415 	stw	fp,16(sp)
    5aa0:	df000404 	addi	fp,sp,16
    5aa4:	e13ffd15 	stw	r4,-12(fp)
    5aa8:	2807883a 	mov	r3,r5
    5aac:	3005883a 	mov	r2,r6
    5ab0:	e0fffe05 	stb	r3,-8(fp)
    5ab4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ab8:	e0bffe03 	ldbu	r2,-8(fp)
    5abc:	1080088c 	andi	r2,r2,34
    5ac0:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5ac4:	e0bfff03 	ldbu	r2,-4(fp)
    5ac8:	10800130 	cmpltui	r2,r2,4
    5acc:	1000151e 	bne	r2,zero,5b24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5ad0:	e0bfff03 	ldbu	r2,-4(fp)
    5ad4:	108007a8 	cmpgeui	r2,r2,30
    5ad8:	1000121e 	bne	r2,zero,5b24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5adc:	e0bffd17 	ldw	r2,-12(fp)
    5ae0:	10800317 	ldw	r2,12(r2)
    5ae4:	1080008c 	andi	r2,r2,2
    5ae8:	1000021e 	bne	r2,zero,5af4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5aec:	e0bffc03 	ldbu	r2,-16(fp)
    5af0:	1000061e 	bne	r2,zero,5b0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5af4:	e0bffd17 	ldw	r2,-12(fp)
    5af8:	10800317 	ldw	r2,12(r2)
    5afc:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5b00:	10000526 	beq	r2,zero,5b18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5b04:	e0bffc03 	ldbu	r2,-16(fp)
    5b08:	1000031e 	bne	r2,zero,5b18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5b0c:	e0bfff03 	ldbu	r2,-4(fp)
    5b10:	10800f44 	addi	r2,r2,61
    5b14:	00008006 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5b18:	e0bfff03 	ldbu	r2,-4(fp)
    5b1c:	10801744 	addi	r2,r2,93
    5b20:	00007d06 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5b24:	e0bfff03 	ldbu	r2,-4(fp)
    5b28:	108007b0 	cmpltui	r2,r2,30
    5b2c:	1000191e 	bne	r2,zero,5b94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5b30:	e0bfff03 	ldbu	r2,-4(fp)
    5b34:	10800a28 	cmpgeui	r2,r2,40
    5b38:	1000161e 	bne	r2,zero,5b94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5b3c:	e0bffc03 	ldbu	r2,-16(fp)
    5b40:	10000c26 	beq	r2,zero,5b74 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5b44:	e0bffd17 	ldw	r2,-12(fp)
    5b48:	10800017 	ldw	r2,0(r2)
    5b4c:	10800504 	addi	r2,r2,20
    5b50:	10800017 	ldw	r2,0(r2)
    5b54:	e13ffd17 	ldw	r4,-12(fp)
    5b58:	103ee83a 	callr	r2
    5b5c:	1007883a 	mov	r3,r2
    5b60:	e0bfff03 	ldbu	r2,-4(fp)
    5b64:	10bff884 	addi	r2,r2,-30
    5b68:	1885883a 	add	r2,r3,r2
    5b6c:	10800003 	ldbu	r2,0(r2)
    5b70:	00006906 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5b74:	e0bfff03 	ldbu	r2,-4(fp)
    5b78:	108009e0 	cmpeqi	r2,r2,39
    5b7c:	1000031e 	bne	r2,zero,5b8c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5b80:	e0bfff03 	ldbu	r2,-4(fp)
    5b84:	108004c4 	addi	r2,r2,19
    5b88:	00006306 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5b8c:	00800c04 	movi	r2,48
    5b90:	00006106 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5b94:	e0bfff03 	ldbu	r2,-4(fp)
    5b98:	10801670 	cmpltui	r2,r2,89
    5b9c:	10000a1e 	bne	r2,zero,5bc8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5ba0:	e0bfff03 	ldbu	r2,-4(fp)
    5ba4:	108018a8 	cmpgeui	r2,r2,98
    5ba8:	1000071e 	bne	r2,zero,5bc8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5bac:	e0bffd17 	ldw	r2,-12(fp)
    5bb0:	10800317 	ldw	r2,12(r2)
    5bb4:	1080004c 	andi	r2,r2,1
    5bb8:	10005626 	beq	r2,zero,5d14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5bbc:	e0bfff03 	ldbu	r2,-4(fp)
    5bc0:	10bff604 	addi	r2,r2,-40
    5bc4:	00005406 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5bc8:	e0bfff03 	ldbu	r2,-4(fp)
    5bcc:	10800b70 	cmpltui	r2,r2,45
    5bd0:	10001d1e 	bne	r2,zero,5c48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5bd4:	e0bfff03 	ldbu	r2,-4(fp)
    5bd8:	10800e68 	cmpgeui	r2,r2,57
    5bdc:	10001a1e 	bne	r2,zero,5c48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5be0:	e0bffc03 	ldbu	r2,-16(fp)
    5be4:	10000c26 	beq	r2,zero,5c18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5be8:	e0bffd17 	ldw	r2,-12(fp)
    5bec:	10800017 	ldw	r2,0(r2)
    5bf0:	10800604 	addi	r2,r2,24
    5bf4:	10800017 	ldw	r2,0(r2)
    5bf8:	e13ffd17 	ldw	r4,-12(fp)
    5bfc:	103ee83a 	callr	r2
    5c00:	1007883a 	mov	r3,r2
    5c04:	e0bfff03 	ldbu	r2,-4(fp)
    5c08:	10bff4c4 	addi	r2,r2,-45
    5c0c:	1885883a 	add	r2,r3,r2
    5c10:	10800003 	ldbu	r2,0(r2)
    5c14:	00004006 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c18:	e0bffd17 	ldw	r2,-12(fp)
    5c1c:	10800017 	ldw	r2,0(r2)
    5c20:	10800704 	addi	r2,r2,28
    5c24:	10800017 	ldw	r2,0(r2)
    5c28:	e13ffd17 	ldw	r4,-12(fp)
    5c2c:	103ee83a 	callr	r2
    5c30:	1007883a 	mov	r3,r2
    5c34:	e0bfff03 	ldbu	r2,-4(fp)
    5c38:	10bff4c4 	addi	r2,r2,-45
    5c3c:	1885883a 	add	r2,r3,r2
    5c40:	10800003 	ldbu	r2,0(r2)
    5c44:	00003406 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5c48:	e0bfff03 	ldbu	r2,-4(fp)
    5c4c:	10801530 	cmpltui	r2,r2,84
    5c50:	10000f1e 	bne	r2,zero,5c90 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5c54:	e0bfff03 	ldbu	r2,-4(fp)
    5c58:	10801668 	cmpgeui	r2,r2,89
    5c5c:	10000c1e 	bne	r2,zero,5c90 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5c60:	e0bffd17 	ldw	r2,-12(fp)
    5c64:	10800017 	ldw	r2,0(r2)
    5c68:	10800804 	addi	r2,r2,32
    5c6c:	10800017 	ldw	r2,0(r2)
    5c70:	e13ffd17 	ldw	r4,-12(fp)
    5c74:	103ee83a 	callr	r2
    5c78:	1007883a 	mov	r3,r2
    5c7c:	e0bfff03 	ldbu	r2,-4(fp)
    5c80:	10bfeb04 	addi	r2,r2,-84
    5c84:	1885883a 	add	r2,r3,r2
    5c88:	10800003 	ldbu	r2,0(r2)
    5c8c:	00002206 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5c90:	e0bfff03 	ldbu	r2,-4(fp)
    5c94:	10c00b20 	cmpeqi	r3,r2,44
    5c98:	18000a1e 	bne	r3,zero,5cc4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5c9c:	10c00b48 	cmpgei	r3,r2,45
    5ca0:	1800031e 	bne	r3,zero,5cb0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5ca4:	10800a20 	cmpeqi	r2,r2,40
    5ca8:	1000081e 	bne	r2,zero,5ccc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5cac:	00001906 	br	5d14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5cb0:	10c018a0 	cmpeqi	r3,r2,98
    5cb4:	1800071e 	bne	r3,zero,5cd4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5cb8:	108018e0 	cmpeqi	r2,r2,99
    5cbc:	10000d1e 	bne	r2,zero,5cf4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5cc0:	00001406 	br	5d14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5cc4:	00800804 	movi	r2,32
    5cc8:	00001306 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5ccc:	00800344 	movi	r2,13
    5cd0:	00001106 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5cd4:	e0bffd17 	ldw	r2,-12(fp)
    5cd8:	10800317 	ldw	r2,12(r2)
    5cdc:	1080004c 	andi	r2,r2,1
    5ce0:	10000226 	beq	r2,zero,5cec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5ce4:	00800c04 	movi	r2,48
    5ce8:	00000b06 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5cec:	0005883a 	mov	r2,zero
    5cf0:	00000906 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5cf4:	e0bffd17 	ldw	r2,-12(fp)
    5cf8:	10800317 	ldw	r2,12(r2)
    5cfc:	1080004c 	andi	r2,r2,1
    5d00:	10000226 	beq	r2,zero,5d0c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5d04:	00800b84 	movi	r2,46
    5d08:	00000306 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d0c:	0005883a 	mov	r2,zero
    5d10:	00000106 	br	5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5d14:	0005883a 	mov	r2,zero
}
    5d18:	e037883a 	mov	sp,fp
    5d1c:	dfc00117 	ldw	ra,4(sp)
    5d20:	df000017 	ldw	fp,0(sp)
    5d24:	dec00204 	addi	sp,sp,8
    5d28:	f800283a 	ret

00005d2c <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5d2c:	defffd04 	addi	sp,sp,-12
    5d30:	df000215 	stw	fp,8(sp)
    5d34:	df000204 	addi	fp,sp,8
    5d38:	e13ffe15 	stw	r4,-8(fp)
    5d3c:	e17fff15 	stw	r5,-4(fp)
        };
    5d40:	0001883a 	nop
    5d44:	e037883a 	mov	sp,fp
    5d48:	df000017 	ldw	fp,0(sp)
    5d4c:	dec00104 	addi	sp,sp,4
    5d50:	f800283a 	ret

00005d54 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d54:	defffd04 	addi	sp,sp,-12
    5d58:	df000215 	stw	fp,8(sp)
    5d5c:	df000204 	addi	fp,sp,8
    5d60:	e13ffe15 	stw	r4,-8(fp)
    5d64:	e17fff15 	stw	r5,-4(fp)
        };
    5d68:	0001883a 	nop
    5d6c:	e037883a 	mov	sp,fp
    5d70:	df000017 	ldw	fp,0(sp)
    5d74:	dec00104 	addi	sp,sp,4
    5d78:	f800283a 	ret

00005d7c <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5d7c:	defffd04 	addi	sp,sp,-12
    5d80:	df000215 	stw	fp,8(sp)
    5d84:	df000204 	addi	fp,sp,8
    5d88:	e13ffe15 	stw	r4,-8(fp)
    5d8c:	e17fff15 	stw	r5,-4(fp)
        };
    5d90:	0001883a 	nop
    5d94:	e037883a 	mov	sp,fp
    5d98:	df000017 	ldw	fp,0(sp)
    5d9c:	dec00104 	addi	sp,sp,4
    5da0:	f800283a 	ret

00005da4 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5da4:	defffd04 	addi	sp,sp,-12
    5da8:	df000215 	stw	fp,8(sp)
    5dac:	df000204 	addi	fp,sp,8
    5db0:	e13ffe15 	stw	r4,-8(fp)
    5db4:	e17fff15 	stw	r5,-4(fp)
        };
    5db8:	0001883a 	nop
    5dbc:	e037883a 	mov	sp,fp
    5dc0:	df000017 	ldw	fp,0(sp)
    5dc4:	dec00104 	addi	sp,sp,4
    5dc8:	f800283a 	ret

00005dcc <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dcc:	defffd04 	addi	sp,sp,-12
    5dd0:	df000215 	stw	fp,8(sp)
    5dd4:	df000204 	addi	fp,sp,8
    5dd8:	e13ffe15 	stw	r4,-8(fp)
    5ddc:	e17fff15 	stw	r5,-4(fp)
        };
    5de0:	0001883a 	nop
    5de4:	e037883a 	mov	sp,fp
    5de8:	df000017 	ldw	fp,0(sp)
    5dec:	dec00104 	addi	sp,sp,4
    5df0:	f800283a 	ret

00005df4 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5df4:	defffd04 	addi	sp,sp,-12
    5df8:	df000215 	stw	fp,8(sp)
    5dfc:	df000204 	addi	fp,sp,8
    5e00:	e13ffe15 	stw	r4,-8(fp)
    5e04:	e17fff15 	stw	r5,-4(fp)
        };
    5e08:	0001883a 	nop
    5e0c:	e037883a 	mov	sp,fp
    5e10:	df000017 	ldw	fp,0(sp)
    5e14:	dec00104 	addi	sp,sp,4
    5e18:	f800283a 	ret

00005e1c <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5e1c:	defffd04 	addi	sp,sp,-12
    5e20:	df000215 	stw	fp,8(sp)
    5e24:	df000204 	addi	fp,sp,8
    5e28:	e13ffe15 	stw	r4,-8(fp)
    5e2c:	e17fff15 	stw	r5,-4(fp)
        };
    5e30:	0001883a 	nop
    5e34:	e037883a 	mov	sp,fp
    5e38:	df000017 	ldw	fp,0(sp)
    5e3c:	dec00104 	addi	sp,sp,4
    5e40:	f800283a 	ret

00005e44 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5e44:	defff704 	addi	sp,sp,-36
    5e48:	dfc00815 	stw	ra,32(sp)
    5e4c:	df000715 	stw	fp,28(sp)
    5e50:	df000704 	addi	fp,sp,28
    5e54:	e13ffd15 	stw	r4,-12(fp)
    5e58:	e17ffe15 	stw	r5,-8(fp)
    5e5c:	3005883a 	mov	r2,r6
    5e60:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5e64:	e0bffd17 	ldw	r2,-12(fp)
    5e68:	10800303 	ldbu	r2,12(r2)
    5e6c:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5e70:	e0bfff03 	ldbu	r2,-4(fp)
    5e74:	10c011e0 	cmpeqi	r3,r2,71
    5e78:	1800271e 	bne	r3,zero,5f18 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5e7c:	10c014e0 	cmpeqi	r3,r2,83
    5e80:	1800031e 	bne	r3,zero,5e90 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5e84:	10800e60 	cmpeqi	r2,r2,57
    5e88:	1000111e 	bne	r2,zero,5ed0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5e8c:	00003506 	br	5f64 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5e90:	e0bffd17 	ldw	r2,-12(fp)
    5e94:	10800317 	ldw	r2,12(r2)
    5e98:	1080004c 	andi	r2,r2,1
    5e9c:	0084303a 	nor	r2,zero,r2
    5ea0:	1080004c 	andi	r2,r2,1
    5ea4:	1007883a 	mov	r3,r2
    5ea8:	e0bffd17 	ldw	r2,-12(fp)
    5eac:	1940004c 	andi	r5,r3,1
    5eb0:	11000303 	ldbu	r4,12(r2)
    5eb4:	00ffff84 	movi	r3,-2
    5eb8:	20c6703a 	and	r3,r4,r3
    5ebc:	1809883a 	mov	r4,r3
    5ec0:	2807883a 	mov	r3,r5
    5ec4:	20c6b03a 	or	r3,r4,r3
    5ec8:	10c00305 	stb	r3,12(r2)
                                break;
    5ecc:	00002506 	br	5f64 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5ed0:	e0bffd17 	ldw	r2,-12(fp)
    5ed4:	10800317 	ldw	r2,12(r2)
    5ed8:	1004d07a 	srli	r2,r2,1
    5edc:	1080004c 	andi	r2,r2,1
    5ee0:	0084303a 	nor	r2,zero,r2
    5ee4:	1080004c 	andi	r2,r2,1
    5ee8:	1007883a 	mov	r3,r2
    5eec:	e0bffd17 	ldw	r2,-12(fp)
    5ef0:	18c0004c 	andi	r3,r3,1
    5ef4:	18cb883a 	add	r5,r3,r3
    5ef8:	11000303 	ldbu	r4,12(r2)
    5efc:	00ffff44 	movi	r3,-3
    5f00:	20c6703a 	and	r3,r4,r3
    5f04:	1809883a 	mov	r4,r3
    5f08:	2807883a 	mov	r3,r5
    5f0c:	20c6b03a 	or	r3,r4,r3
    5f10:	10c00305 	stb	r3,12(r2)
                                break;
    5f14:	00001306 	br	5f64 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5f18:	e0bffd17 	ldw	r2,-12(fp)
    5f1c:	10800317 	ldw	r2,12(r2)
    5f20:	1004d0ba 	srli	r2,r2,2
    5f24:	1080004c 	andi	r2,r2,1
    5f28:	0084303a 	nor	r2,zero,r2
    5f2c:	1080004c 	andi	r2,r2,1
    5f30:	1007883a 	mov	r3,r2
    5f34:	e0bffd17 	ldw	r2,-12(fp)
    5f38:	18c0004c 	andi	r3,r3,1
    5f3c:	18c7883a 	add	r3,r3,r3
    5f40:	18cb883a 	add	r5,r3,r3
    5f44:	11000303 	ldbu	r4,12(r2)
    5f48:	00fffec4 	movi	r3,-5
    5f4c:	20c6703a 	and	r3,r4,r3
    5f50:	1809883a 	mov	r4,r3
    5f54:	2807883a 	mov	r3,r5
    5f58:	20c6b03a 	or	r3,r4,r3
    5f5c:	10c00305 	stb	r3,12(r2)
                                break;
    5f60:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5f64:	e0bffd17 	ldw	r2,-12(fp)
    5f68:	10800303 	ldbu	r2,12(r2)
    5f6c:	10c03fcc 	andi	r3,r2,255
    5f70:	e0bffc03 	ldbu	r2,-16(fp)
    5f74:	18801026 	beq	r3,r2,5fb8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5f78:	e0bffe17 	ldw	r2,-8(fp)
    5f7c:	10000e26 	beq	r2,zero,5fb8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	10800303 	ldbu	r2,12(r2)
    5f88:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5f8c:	e0bffc44 	addi	r2,fp,-15
    5f90:	d8800215 	stw	r2,8(sp)
    5f94:	00800044 	movi	r2,1
    5f98:	d8800115 	stw	r2,4(sp)
    5f9c:	d8000015 	stw	zero,0(sp)
    5fa0:	01c00084 	movi	r7,2
    5fa4:	000d883a 	mov	r6,zero
    5fa8:	000b883a 	mov	r5,zero
    5fac:	e13ffe17 	ldw	r4,-8(fp)
    5fb0:	0008ec80 	call	8ec8 <_ZN6USBHID9SetReportEhhhhtPh>
    5fb4:	00000106 	br	5fbc <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5fb8:	0005883a 	mov	r2,zero
        };
    5fbc:	e037883a 	mov	sp,fp
    5fc0:	dfc00117 	ldw	ra,4(sp)
    5fc4:	df000017 	ldw	fp,0(sp)
    5fc8:	dec00204 	addi	sp,sp,8
    5fcc:	f800283a 	ret

00005fd0 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    5fd0:	defffc04 	addi	sp,sp,-16
    5fd4:	df000315 	stw	fp,12(sp)
    5fd8:	df000304 	addi	fp,sp,12
    5fdc:	e13ffd15 	stw	r4,-12(fp)
    5fe0:	2807883a 	mov	r3,r5
    5fe4:	3005883a 	mov	r2,r6
    5fe8:	e0fffe05 	stb	r3,-8(fp)
    5fec:	e0bfff05 	stb	r2,-4(fp)
        };
    5ff0:	0001883a 	nop
    5ff4:	e037883a 	mov	sp,fp
    5ff8:	df000017 	ldw	fp,0(sp)
    5ffc:	dec00104 	addi	sp,sp,4
    6000:	f800283a 	ret

00006004 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6004:	defffc04 	addi	sp,sp,-16
    6008:	df000315 	stw	fp,12(sp)
    600c:	df000304 	addi	fp,sp,12
    6010:	e13ffd15 	stw	r4,-12(fp)
    6014:	2807883a 	mov	r3,r5
    6018:	3005883a 	mov	r2,r6
    601c:	e0fffe05 	stb	r3,-8(fp)
    6020:	e0bfff05 	stb	r2,-4(fp)
        };
    6024:	0001883a 	nop
    6028:	e037883a 	mov	sp,fp
    602c:	df000017 	ldw	fp,0(sp)
    6030:	dec00104 	addi	sp,sp,4
    6034:	f800283a 	ret

00006038 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6038:	defffc04 	addi	sp,sp,-16
    603c:	df000315 	stw	fp,12(sp)
    6040:	df000304 	addi	fp,sp,12
    6044:	e13ffd15 	stw	r4,-12(fp)
    6048:	2807883a 	mov	r3,r5
    604c:	3005883a 	mov	r2,r6
    6050:	e0fffe05 	stb	r3,-8(fp)
    6054:	e0bfff05 	stb	r2,-4(fp)
        };
    6058:	0001883a 	nop
    605c:	e037883a 	mov	sp,fp
    6060:	df000017 	ldw	fp,0(sp)
    6064:	dec00104 	addi	sp,sp,4
    6068:	f800283a 	ret

0000606c <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    606c:	defffe04 	addi	sp,sp,-8
    6070:	df000115 	stw	fp,4(sp)
    6074:	df000104 	addi	fp,sp,4
    6078:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    607c:	008000b4 	movhi	r2,2
    6080:	10980484 	addi	r2,r2,24594
        };
    6084:	e037883a 	mov	sp,fp
    6088:	df000017 	ldw	fp,0(sp)
    608c:	dec00104 	addi	sp,sp,4
    6090:	f800283a 	ret

00006094 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    6094:	defffe04 	addi	sp,sp,-8
    6098:	df000115 	stw	fp,4(sp)
    609c:	df000104 	addi	fp,sp,4
    60a0:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    60a4:	008000b4 	movhi	r2,2
    60a8:	10980704 	addi	r2,r2,24604
        };
    60ac:	e037883a 	mov	sp,fp
    60b0:	df000017 	ldw	fp,0(sp)
    60b4:	dec00104 	addi	sp,sp,4
    60b8:	f800283a 	ret

000060bc <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    60bc:	defffe04 	addi	sp,sp,-8
    60c0:	df000115 	stw	fp,4(sp)
    60c4:	df000104 	addi	fp,sp,4
    60c8:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    60cc:	008000b4 	movhi	r2,2
    60d0:	10980a04 	addi	r2,r2,24616
        };
    60d4:	e037883a 	mov	sp,fp
    60d8:	df000017 	ldw	fp,0(sp)
    60dc:	dec00104 	addi	sp,sp,4
    60e0:	f800283a 	ret

000060e4 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    60e4:	defffe04 	addi	sp,sp,-8
    60e8:	df000115 	stw	fp,4(sp)
    60ec:	df000104 	addi	fp,sp,4
    60f0:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    60f4:	d0a1e684 	addi	r2,gp,-30822
        };
    60f8:	e037883a 	mov	sp,fp
    60fc:	df000017 	ldw	fp,0(sp)
    6100:	dec00104 	addi	sp,sp,4
    6104:	f800283a 	ret

00006108 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6108:	defffc04 	addi	sp,sp,-16
    610c:	dfc00315 	stw	ra,12(sp)
    6110:	df000215 	stw	fp,8(sp)
    6114:	df000204 	addi	fp,sp,8
    6118:	2005883a 	mov	r2,r4
    611c:	e17fff15 	stw	r5,-4(fp)
    6120:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6124:	d0e1eb17 	ldw	r3,-30804(gp)
    6128:	e0bfff17 	ldw	r2,-4(fp)
    612c:	18800416 	blt	r3,r2,6140 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6130:	e0bffe07 	ldb	r2,-8(fp)
    6134:	1009883a 	mov	r4,r2
    6138:	000ef5c0 	call	ef5c <putchar>
    613c:	00000106 	br	6144 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6140:	0001883a 	nop
        printf("%c", c);
}
    6144:	e037883a 	mov	sp,fp
    6148:	dfc00117 	ldw	ra,4(sp)
    614c:	df000017 	ldw	fp,0(sp)
    6150:	dec00204 	addi	sp,sp,8
    6154:	f800283a 	ret

00006158 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6158:	defffb04 	addi	sp,sp,-20
    615c:	dfc00415 	stw	ra,16(sp)
    6160:	df000315 	stw	fp,12(sp)
    6164:	df000304 	addi	fp,sp,12
    6168:	e13ffe15 	stw	r4,-8(fp)
    616c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6170:	d0e1eb17 	ldw	r3,-30804(gp)
    6174:	e0bfff17 	ldw	r2,-4(fp)
    6178:	18801016 	blt	r3,r2,61bc <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    617c:	e0bffe17 	ldw	r2,-8(fp)
    6180:	10001026 	beq	r2,zero,61c4 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    6184:	e0bffe17 	ldw	r2,-8(fp)
    6188:	10c00044 	addi	r3,r2,1
    618c:	e0fffe15 	stw	r3,-8(fp)
    6190:	10800003 	ldbu	r2,0(r2)
    6194:	e0bffd05 	stb	r2,-12(fp)
    6198:	e0bffd07 	ldb	r2,-12(fp)
    619c:	1004c03a 	cmpne	r2,r2,zero
    61a0:	10803fcc 	andi	r2,r2,255
    61a4:	10000826 	beq	r2,zero,61c8 <_Z8E_NotifyPKci+0x70>
    61a8:	e0bffd07 	ldb	r2,-12(fp)
    61ac:	e17fff17 	ldw	r5,-4(fp)
    61b0:	1009883a 	mov	r4,r2
    61b4:	00061080 	call	6108 <_Z9E_Notifycci>
    61b8:	003ff206 	br	6184 <__alt_data_end+0xfc006184>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    61bc:	0001883a 	nop
    61c0:	00000106 	br	61c8 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    61c4:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    61c8:	e037883a 	mov	sp,fp
    61cc:	dfc00117 	ldw	ra,4(sp)
    61d0:	df000017 	ldw	fp,0(sp)
    61d4:	dec00204 	addi	sp,sp,8
    61d8:	f800283a 	ret

000061dc <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    61dc:	defffb04 	addi	sp,sp,-20
    61e0:	dfc00415 	stw	ra,16(sp)
    61e4:	df000315 	stw	fp,12(sp)
    61e8:	df000304 	addi	fp,sp,12
    61ec:	e13ffe15 	stw	r4,-8(fp)
    61f0:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    61f4:	d0e1eb17 	ldw	r3,-30804(gp)
    61f8:	e0bfff17 	ldw	r2,-4(fp)
    61fc:	18801016 	blt	r3,r2,6240 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6200:	e0bffe17 	ldw	r2,-8(fp)
    6204:	10001026 	beq	r2,zero,6248 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6208:	e0bffe17 	ldw	r2,-8(fp)
    620c:	10c00044 	addi	r3,r2,1
    6210:	e0fffe15 	stw	r3,-8(fp)
    6214:	10800003 	ldbu	r2,0(r2)
    6218:	e0bffd05 	stb	r2,-12(fp)
    621c:	e0bffd07 	ldb	r2,-12(fp)
    6220:	1004c03a 	cmpne	r2,r2,zero
    6224:	10803fcc 	andi	r2,r2,255
    6228:	10000826 	beq	r2,zero,624c <_Z11E_NotifyStrPKci+0x70>
    622c:	e0bffd07 	ldb	r2,-12(fp)
    6230:	e17fff17 	ldw	r5,-4(fp)
    6234:	1009883a 	mov	r4,r2
    6238:	00061080 	call	6108 <_Z9E_Notifycci>
    623c:	003ff206 	br	6208 <__alt_data_end+0xfc006208>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6240:	0001883a 	nop
    6244:	00000106 	br	624c <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6248:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    624c:	e037883a 	mov	sp,fp
    6250:	dfc00117 	ldw	ra,4(sp)
    6254:	df000017 	ldw	fp,0(sp)
    6258:	dec00204 	addi	sp,sp,8
    625c:	f800283a 	ret

00006260 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6260:	defffd04 	addi	sp,sp,-12
    6264:	df000215 	stw	fp,8(sp)
    6268:	df000204 	addi	fp,sp,8
    626c:	2005883a 	mov	r2,r4
    6270:	e17fff15 	stw	r5,-4(fp)
    6274:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6278:	e037883a 	mov	sp,fp
    627c:	df000017 	ldw	fp,0(sp)
    6280:	dec00104 	addi	sp,sp,4
    6284:	f800283a 	ret

00006288 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    6288:	defffc04 	addi	sp,sp,-16
    628c:	df000315 	stw	fp,12(sp)
    6290:	df000304 	addi	fp,sp,12
    6294:	e13ffd15 	stw	r4,-12(fp)
    6298:	e17ffe15 	stw	r5,-8(fp)
    629c:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    62a0:	e037883a 	mov	sp,fp
    62a4:	df000017 	ldw	fp,0(sp)
    62a8:	dec00104 	addi	sp,sp,4
    62ac:	f800283a 	ret

000062b0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    62b0:	defffc04 	addi	sp,sp,-16
    62b4:	df000315 	stw	fp,12(sp)
    62b8:	df000304 	addi	fp,sp,12
    62bc:	e13ffd15 	stw	r4,-12(fp)
    62c0:	e17ffe15 	stw	r5,-8(fp)
    62c4:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    62c8:	e0bffd17 	ldw	r2,-12(fp)
    62cc:	10800017 	ldw	r2,0(r2)
    62d0:	1000021e 	bne	r2,zero,62dc <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    62d4:	0005883a 	mov	r2,zero
    62d8:	00003306 	br	63a8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    62dc:	e0bffd17 	ldw	r2,-12(fp)
    62e0:	10800103 	ldbu	r2,4(r2)
    62e4:	10803fcc 	andi	r2,r2,255
    62e8:	10002426 	beq	r2,zero,637c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    62ec:	e0bfff17 	ldw	r2,-4(fp)
    62f0:	1080000b 	ldhu	r2,0(r2)
    62f4:	10bfffcc 	andi	r2,r2,65535
    62f8:	10002026 	beq	r2,zero,637c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    62fc:	e0bffd17 	ldw	r2,-12(fp)
    6300:	10800017 	ldw	r2,0(r2)
    6304:	e0fffd17 	ldw	r3,-12(fp)
    6308:	18c00143 	ldbu	r3,5(r3)
    630c:	19003fcc 	andi	r4,r3,255
    6310:	e0fffd17 	ldw	r3,-12(fp)
    6314:	18c00103 	ldbu	r3,4(r3)
    6318:	18c03fcc 	andi	r3,r3,255
    631c:	20c7c83a 	sub	r3,r4,r3
    6320:	10c5883a 	add	r2,r2,r3
    6324:	e0fffe17 	ldw	r3,-8(fp)
    6328:	18c00017 	ldw	r3,0(r3)
    632c:	18c00003 	ldbu	r3,0(r3)
    6330:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6334:	e0bffd17 	ldw	r2,-12(fp)
    6338:	10800103 	ldbu	r2,4(r2)
    633c:	10bfffc4 	addi	r2,r2,-1
    6340:	1007883a 	mov	r3,r2
    6344:	e0bffd17 	ldw	r2,-12(fp)
    6348:	10c00105 	stb	r3,4(r2)
    634c:	e0bfff17 	ldw	r2,-4(fp)
    6350:	1080000b 	ldhu	r2,0(r2)
    6354:	10bfffc4 	addi	r2,r2,-1
    6358:	1007883a 	mov	r3,r2
    635c:	e0bfff17 	ldw	r2,-4(fp)
    6360:	10c0000d 	sth	r3,0(r2)
    6364:	e0bffe17 	ldw	r2,-8(fp)
    6368:	10800017 	ldw	r2,0(r2)
    636c:	10c00044 	addi	r3,r2,1
    6370:	e0bffe17 	ldw	r2,-8(fp)
    6374:	10c00015 	stw	r3,0(r2)
    6378:	003fd806 	br	62dc <__alt_data_end+0xfc0062dc>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    637c:	e0bffd17 	ldw	r2,-12(fp)
    6380:	10800103 	ldbu	r2,4(r2)
    6384:	10803fcc 	andi	r2,r2,255
    6388:	10000226 	beq	r2,zero,6394 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    638c:	0005883a 	mov	r2,zero
    6390:	00000506 	br	63a8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    6394:	e0bffd17 	ldw	r2,-12(fp)
    6398:	10c00143 	ldbu	r3,5(r2)
    639c:	e0bffd17 	ldw	r2,-12(fp)
    63a0:	10c00105 	stb	r3,4(r2)
        return true;
    63a4:	00800044 	movi	r2,1
}
    63a8:	e037883a 	mov	sp,fp
    63ac:	df000017 	ldw	fp,0(sp)
    63b0:	dec00104 	addi	sp,sp,4
    63b4:	f800283a 	ret

000063b8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    63b8:	defffa04 	addi	sp,sp,-24
    63bc:	dfc00515 	stw	ra,20(sp)
    63c0:	df000415 	stw	fp,16(sp)
    63c4:	df000404 	addi	fp,sp,16
    63c8:	e13ffc15 	stw	r4,-16(fp)
    63cc:	e17ffd15 	stw	r5,-12(fp)
    63d0:	e1bffe15 	stw	r6,-8(fp)
    63d4:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    63d8:	e0bffc17 	ldw	r2,-16(fp)
    63dc:	10800003 	ldbu	r2,0(r2)
    63e0:	10803fcc 	andi	r2,r2,255
    63e4:	10c00060 	cmpeqi	r3,r2,1
    63e8:	1800181e 	bne	r3,zero,644c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    63ec:	10c00088 	cmpgei	r3,r2,2
    63f0:	1800021e 	bne	r3,zero,63fc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    63f4:	10000626 	beq	r2,zero,6410 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    63f8:	00007e06 	br	65f4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    63fc:	10c000a0 	cmpeqi	r3,r2,2
    6400:	18004a1e 	bne	r3,zero,652c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6404:	108000e0 	cmpeqi	r2,r2,3
    6408:	1000571e 	bne	r2,zero,6568 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    640c:	00007906 	br	65f4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6410:	e0bffc17 	ldw	r2,-16(fp)
    6414:	10800417 	ldw	r2,16(r2)
    6418:	e0fffc17 	ldw	r3,-16(fp)
    641c:	18c00303 	ldbu	r3,12(r3)
    6420:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	10c00504 	addi	r3,r2,20
    642c:	e0bffc17 	ldw	r2,-16(fp)
    6430:	10800417 	ldw	r2,16(r2)
    6434:	100b883a 	mov	r5,r2
    6438:	1809883a 	mov	r4,r3
    643c:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6440:	e0bffc17 	ldw	r2,-16(fp)
    6444:	00c00044 	movi	r3,1
    6448:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    644c:	e0bffc17 	ldw	r2,-16(fp)
    6450:	10800504 	addi	r2,r2,20
    6454:	e1bffe17 	ldw	r6,-8(fp)
    6458:	e17ffd17 	ldw	r5,-12(fp)
    645c:	1009883a 	mov	r4,r2
    6460:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    6464:	1080005c 	xori	r2,r2,1
    6468:	10803fcc 	andi	r2,r2,255
    646c:	10000226 	beq	r2,zero,6478 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6470:	0005883a 	mov	r2,zero
    6474:	00006006 	br	65f8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6478:	e0bffc17 	ldw	r2,-16(fp)
    647c:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6480:	e0bffc17 	ldw	r2,-16(fp)
    6484:	10800417 	ldw	r2,16(r2)
    6488:	10800003 	ldbu	r2,0(r2)
    648c:	10803fcc 	andi	r2,r2,255
    6490:	10800130 	cmpltui	r2,r2,4
    6494:	10000e1e 	bne	r2,zero,64d0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    6498:	e0bffc17 	ldw	r2,-16(fp)
    649c:	10800417 	ldw	r2,16(r2)
    64a0:	10c00043 	ldbu	r3,1(r2)
    64a4:	11000083 	ldbu	r4,2(r2)
    64a8:	2008923a 	slli	r4,r4,8
    64ac:	20c6b03a 	or	r3,r4,r3
    64b0:	110000c3 	ldbu	r4,3(r2)
    64b4:	2008943a 	slli	r4,r4,16
    64b8:	20c6b03a 	or	r3,r4,r3
    64bc:	10800103 	ldbu	r2,4(r2)
    64c0:	1004963a 	slli	r2,r2,24
    64c4:	10c4b03a 	or	r2,r2,r3
    64c8:	10800017 	ldw	r2,0(r2)
    64cc:	00000e06 	br	6508 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    64d0:	e0bffc17 	ldw	r2,-16(fp)
    64d4:	10800417 	ldw	r2,16(r2)
    64d8:	10c00043 	ldbu	r3,1(r2)
    64dc:	11000083 	ldbu	r4,2(r2)
    64e0:	2008923a 	slli	r4,r4,8
    64e4:	20c6b03a 	or	r3,r4,r3
    64e8:	110000c3 	ldbu	r4,3(r2)
    64ec:	2008943a 	slli	r4,r4,16
    64f0:	20c6b03a 	or	r3,r4,r3
    64f4:	10800103 	ldbu	r2,4(r2)
    64f8:	1004963a 	slli	r2,r2,24
    64fc:	10c4b03a 	or	r2,r2,r3
    6500:	1080000b 	ldhu	r2,0(r2)
    6504:	10bfffcc 	andi	r2,r2,65535
    6508:	e0fffc17 	ldw	r3,-16(fp)
    650c:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6510:	e0bffc17 	ldw	r2,-16(fp)
    6514:	10c00117 	ldw	r3,4(r2)
    6518:	e0bffc17 	ldw	r2,-16(fp)
    651c:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6520:	e0bffc17 	ldw	r2,-16(fp)
    6524:	00c00084 	movi	r3,2
    6528:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    652c:	e0bffc17 	ldw	r2,-16(fp)
    6530:	10800417 	ldw	r2,16(r2)
    6534:	e0fffc17 	ldw	r3,-16(fp)
    6538:	18c00343 	ldbu	r3,13(r3)
    653c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6540:	e0bffc17 	ldw	r2,-16(fp)
    6544:	10c00504 	addi	r3,r2,20
    6548:	e0bffc17 	ldw	r2,-16(fp)
    654c:	10800417 	ldw	r2,16(r2)
    6550:	100b883a 	mov	r5,r2
    6554:	1809883a 	mov	r4,r3
    6558:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    655c:	e0bffc17 	ldw	r2,-16(fp)
    6560:	00c000c4 	movi	r3,3
    6564:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6568:	e0bffc17 	ldw	r2,-16(fp)
    656c:	10800217 	ldw	r2,8(r2)
    6570:	10001e26 	beq	r2,zero,65ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    6574:	e0bffc17 	ldw	r2,-16(fp)
    6578:	10800504 	addi	r2,r2,20
    657c:	e1bffe17 	ldw	r6,-8(fp)
    6580:	e17ffd17 	ldw	r5,-12(fp)
    6584:	1009883a 	mov	r4,r2
    6588:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    658c:	1080005c 	xori	r2,r2,1
    6590:	10803fcc 	andi	r2,r2,255
    6594:	10000226 	beq	r2,zero,65a0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    6598:	0005883a 	mov	r2,zero
    659c:	00001606 	br	65f8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    65a0:	e0bfff17 	ldw	r2,-4(fp)
    65a4:	10000b26 	beq	r2,zero,65d4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	11000417 	ldw	r4,16(r2)
    65b0:	e0bffc17 	ldw	r2,-16(fp)
    65b4:	10c00117 	ldw	r3,4(r2)
    65b8:	e0bffc17 	ldw	r2,-16(fp)
    65bc:	10800217 	ldw	r2,8(r2)
    65c0:	1887c83a 	sub	r3,r3,r2
    65c4:	e0bfff17 	ldw	r2,-4(fp)
    65c8:	e1800217 	ldw	r6,8(fp)
    65cc:	180b883a 	mov	r5,r3
    65d0:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    65d4:	e0bffc17 	ldw	r2,-16(fp)
    65d8:	10800217 	ldw	r2,8(r2)
    65dc:	10ffffc4 	addi	r3,r2,-1
    65e0:	e0bffc17 	ldw	r2,-16(fp)
    65e4:	10c00215 	stw	r3,8(r2)
    65e8:	003fdf06 	br	6568 <__alt_data_end+0xfc006568>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    65ec:	e0bffc17 	ldw	r2,-16(fp)
    65f0:	10000005 	stb	zero,0(r2)
        }
        return true;
    65f4:	00800044 	movi	r2,1
}
    65f8:	e037883a 	mov	sp,fp
    65fc:	dfc00117 	ldw	ra,4(sp)
    6600:	df000017 	ldw	fp,0(sp)
    6604:	dec00204 	addi	sp,sp,8
    6608:	f800283a 	ret

0000660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    660c:	defff904 	addi	sp,sp,-28
    6610:	dfc00615 	stw	ra,24(sp)
    6614:	df000515 	stw	fp,20(sp)
    6618:	df000504 	addi	fp,sp,20
    661c:	e13ffd15 	stw	r4,-12(fp)
    6620:	2807883a 	mov	r3,r5
    6624:	3005883a 	mov	r2,r6
    6628:	e0fffe05 	stb	r3,-8(fp)
    662c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6630:	e0bfff0b 	ldhu	r2,-4(fp)
    6634:	1005d23a 	srai	r2,r2,8
    6638:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    663c:	e0bfff0b 	ldhu	r2,-4(fp)
    6640:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6644:	e03ffb8d 	sth	zero,-18(fp)
    6648:	e03ffc0d 	sth	zero,-16(fp)
    664c:	e0bffe03 	ldbu	r2,-8(fp)
    6650:	e0bffbc5 	stb	r2,-17(fp)
    6654:	e0bffb03 	ldbu	r2,-20(fp)
    6658:	e0bffc05 	stb	r2,-16(fp)
    665c:	e0bffb43 	ldbu	r2,-19(fp)
    6660:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6664:	e0bffb84 	addi	r2,fp,-18
    6668:	000f883a 	mov	r7,zero
    666c:	01800104 	movi	r6,4
    6670:	100b883a 	mov	r5,r2
    6674:	e13ffd17 	ldw	r4,-12(fp)
    6678:	002091c0 	call	2091c <alt_avalon_i2c_master_tx>
    667c:	1004c03a 	cmpne	r2,r2,zero
    6680:	10803fcc 	andi	r2,r2,255
    6684:	10000426 	beq	r2,zero,6698 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6688:	010000b4 	movhi	r4,2
    668c:	21183804 	addi	r4,r4,24800
    6690:	000ef180 	call	ef18 <printf>
	}
	return;
    6694:	0001883a 	nop
    6698:	0001883a 	nop
}
    669c:	e037883a 	mov	sp,fp
    66a0:	dfc00117 	ldw	ra,4(sp)
    66a4:	df000017 	ldw	fp,0(sp)
    66a8:	dec00204 	addi	sp,sp,8
    66ac:	f800283a 	ret

000066b0 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    66b0:	defff604 	addi	sp,sp,-40
    66b4:	dfc00915 	stw	ra,36(sp)
    66b8:	df000815 	stw	fp,32(sp)
    66bc:	dc000715 	stw	r16,28(sp)
    66c0:	df000804 	addi	fp,sp,32
    66c4:	e13ffb15 	stw	r4,-20(fp)
    66c8:	3009883a 	mov	r4,r6
    66cc:	e1fffe15 	stw	r7,-8(fp)
    66d0:	e17ffc05 	stb	r5,-16(fp)
    66d4:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    66d8:	d809883a 	mov	r4,sp
    66dc:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    66e0:	e13ffd03 	ldbu	r4,-12(fp)
    66e4:	21000044 	addi	r4,r4,1
    66e8:	2109883a 	add	r4,r4,r4
    66ec:	213fffc4 	addi	r4,r4,-1
    66f0:	e13ff915 	stw	r4,-28(fp)
    66f4:	200b883a 	mov	r5,r4
    66f8:	29400044 	addi	r5,r5,1
    66fc:	2819883a 	mov	r12,r5
    6700:	001b883a 	mov	r13,zero
    6704:	600ad77a 	srli	r5,r12,29
    6708:	681290fa 	slli	r9,r13,3
    670c:	2a52b03a 	or	r9,r5,r9
    6710:	601090fa 	slli	r8,r12,3
    6714:	200b883a 	mov	r5,r4
    6718:	29400044 	addi	r5,r5,1
    671c:	2815883a 	mov	r10,r5
    6720:	0017883a 	mov	r11,zero
    6724:	500ad77a 	srli	r5,r10,29
    6728:	580690fa 	slli	r3,r11,3
    672c:	28c6b03a 	or	r3,r5,r3
    6730:	500490fa 	slli	r2,r10,3
    6734:	2005883a 	mov	r2,r4
    6738:	10800044 	addi	r2,r2,1
    673c:	108000c4 	addi	r2,r2,3
    6740:	1004d0ba 	srli	r2,r2,2
    6744:	1085883a 	add	r2,r2,r2
    6748:	1085883a 	add	r2,r2,r2
    674c:	d8b7c83a 	sub	sp,sp,r2
    6750:	d805883a 	mov	r2,sp
    6754:	1005883a 	mov	r2,r2
    6758:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    675c:	e0bffa17 	ldw	r2,-24(fp)
    6760:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6764:	e0bffa17 	ldw	r2,-24(fp)
    6768:	e0fffc03 	ldbu	r3,-16(fp)
    676c:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6770:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6774:	e03ff815 	stw	zero,-32(fp)
    6778:	e0bffd03 	ldbu	r2,-12(fp)
    677c:	e0fff817 	ldw	r3,-32(fp)
    6780:	18801e0e 	bge	r3,r2,67fc <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6784:	e0bff817 	ldw	r2,-32(fp)
    6788:	10c00084 	addi	r3,r2,2
    678c:	e0bff817 	ldw	r2,-32(fp)
    6790:	1085883a 	add	r2,r2,r2
    6794:	1009883a 	mov	r4,r2
    6798:	e0bffe17 	ldw	r2,-8(fp)
    679c:	1105883a 	add	r2,r2,r4
    67a0:	1080000b 	ldhu	r2,0(r2)
    67a4:	10bfffcc 	andi	r2,r2,65535
    67a8:	1005d23a 	srai	r2,r2,8
    67ac:	1009883a 	mov	r4,r2
    67b0:	e0bffa17 	ldw	r2,-24(fp)
    67b4:	10c5883a 	add	r2,r2,r3
    67b8:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    67bc:	e0bff817 	ldw	r2,-32(fp)
    67c0:	10c000c4 	addi	r3,r2,3
    67c4:	e0bff817 	ldw	r2,-32(fp)
    67c8:	1085883a 	add	r2,r2,r2
    67cc:	1009883a 	mov	r4,r2
    67d0:	e0bffe17 	ldw	r2,-8(fp)
    67d4:	1105883a 	add	r2,r2,r4
    67d8:	1080000b 	ldhu	r2,0(r2)
    67dc:	1009883a 	mov	r4,r2
    67e0:	e0bffa17 	ldw	r2,-24(fp)
    67e4:	10c5883a 	add	r2,r2,r3
    67e8:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    67ec:	e0bff817 	ldw	r2,-32(fp)
    67f0:	10800044 	addi	r2,r2,1
    67f4:	e0bff815 	stw	r2,-32(fp)
    67f8:	003fdf06 	br	6778 <__alt_data_end+0xfc006778>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    67fc:	e0fffa17 	ldw	r3,-24(fp)
    6800:	e0bffd03 	ldbu	r2,-12(fp)
    6804:	10800044 	addi	r2,r2,1
    6808:	1085883a 	add	r2,r2,r2
    680c:	000f883a 	mov	r7,zero
    6810:	100d883a 	mov	r6,r2
    6814:	180b883a 	mov	r5,r3
    6818:	e13ffb17 	ldw	r4,-20(fp)
    681c:	002091c0 	call	2091c <alt_avalon_i2c_master_tx>
    6820:	1004c03a 	cmpne	r2,r2,zero
    6824:	10803fcc 	andi	r2,r2,255
    6828:	10000326 	beq	r2,zero,6838 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    682c:	010000b4 	movhi	r4,2
    6830:	21183f04 	addi	r4,r4,24828
    6834:	000ef180 	call	ef18 <printf>
	}
	return (data+nwords);
    6838:	e0bffd03 	ldbu	r2,-12(fp)
    683c:	1085883a 	add	r2,r2,r2
    6840:	1007883a 	mov	r3,r2
    6844:	e0bffe17 	ldw	r2,-8(fp)
    6848:	10c5883a 	add	r2,r2,r3
    684c:	8037883a 	mov	sp,r16
}
    6850:	e6ffff04 	addi	sp,fp,-4
    6854:	dfc00217 	ldw	ra,8(sp)
    6858:	df000117 	ldw	fp,4(sp)
    685c:	dc000017 	ldw	r16,0(sp)
    6860:	dec00304 	addi	sp,sp,12
    6864:	f800283a 	ret

00006868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6868:	defff804 	addi	sp,sp,-32
    686c:	dfc00715 	stw	ra,28(sp)
    6870:	df000615 	stw	fp,24(sp)
    6874:	df000604 	addi	fp,sp,24
    6878:	e13ffe15 	stw	r4,-8(fp)
    687c:	2805883a 	mov	r2,r5
    6880:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6884:	e03ffc8d 	sth	zero,-14(fp)
    6888:	e0bfff03 	ldbu	r2,-4(fp)
    688c:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6890:	e03ffd05 	stb	zero,-12(fp)
    6894:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6898:	e13ffd04 	addi	r4,fp,-12
    689c:	e0fffc84 	addi	r3,fp,-14
    68a0:	d8000115 	stw	zero,4(sp)
    68a4:	00800084 	movi	r2,2
    68a8:	d8800015 	stw	r2,0(sp)
    68ac:	200f883a 	mov	r7,r4
    68b0:	01800084 	movi	r6,2
    68b4:	180b883a 	mov	r5,r3
    68b8:	e13ffe17 	ldw	r4,-8(fp)
    68bc:	0020b400 	call	20b40 <alt_avalon_i2c_master_tx_rx>
    68c0:	1004c03a 	cmpne	r2,r2,zero
    68c4:	10803fcc 	andi	r2,r2,255
    68c8:	10000326 	beq	r2,zero,68d8 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    68cc:	010000b4 	movhi	r4,2
    68d0:	21184504 	addi	r4,r4,24852
    68d4:	000ef180 	call	ef18 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    68d8:	e0bffd03 	ldbu	r2,-12(fp)
    68dc:	10803fcc 	andi	r2,r2,255
    68e0:	1004923a 	slli	r2,r2,8
    68e4:	1007883a 	mov	r3,r2
    68e8:	e0bffd43 	ldbu	r2,-11(fp)
    68ec:	10803fcc 	andi	r2,r2,255
    68f0:	1884b03a 	or	r2,r3,r2
    68f4:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    68f8:	e0bffc0b 	ldhu	r2,-16(fp)
}
    68fc:	e037883a 	mov	sp,fp
    6900:	dfc00117 	ldw	ra,4(sp)
    6904:	df000017 	ldw	fp,0(sp)
    6908:	dec00204 	addi	sp,sp,8
    690c:	f800283a 	ret

00006910 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6910:	defff304 	addi	sp,sp,-52
    6914:	dfc00c15 	stw	ra,48(sp)
    6918:	df000b15 	stw	fp,44(sp)
    691c:	dc000a15 	stw	r16,40(sp)
    6920:	df000b04 	addi	fp,sp,44
    6924:	e13ffb15 	stw	r4,-20(fp)
    6928:	3009883a 	mov	r4,r6
    692c:	e1fffe15 	stw	r7,-8(fp)
    6930:	e17ffc05 	stb	r5,-16(fp)
    6934:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6938:	d809883a 	mov	r4,sp
    693c:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6940:	e03ffa0d 	sth	zero,-24(fp)
    6944:	e13ffc03 	ldbu	r4,-16(fp)
    6948:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    694c:	e13ffd03 	ldbu	r4,-12(fp)
    6950:	2109883a 	add	r4,r4,r4
    6954:	213fffc4 	addi	r4,r4,-1
    6958:	e13ff815 	stw	r4,-32(fp)
    695c:	200b883a 	mov	r5,r4
    6960:	29400044 	addi	r5,r5,1
    6964:	2819883a 	mov	r12,r5
    6968:	001b883a 	mov	r13,zero
    696c:	600ad77a 	srli	r5,r12,29
    6970:	681290fa 	slli	r9,r13,3
    6974:	2a52b03a 	or	r9,r5,r9
    6978:	601090fa 	slli	r8,r12,3
    697c:	200b883a 	mov	r5,r4
    6980:	29400044 	addi	r5,r5,1
    6984:	2815883a 	mov	r10,r5
    6988:	0017883a 	mov	r11,zero
    698c:	500ad77a 	srli	r5,r10,29
    6990:	580690fa 	slli	r3,r11,3
    6994:	28c6b03a 	or	r3,r5,r3
    6998:	500490fa 	slli	r2,r10,3
    699c:	2005883a 	mov	r2,r4
    69a0:	10800044 	addi	r2,r2,1
    69a4:	108000c4 	addi	r2,r2,3
    69a8:	1004d0ba 	srli	r2,r2,2
    69ac:	1085883a 	add	r2,r2,r2
    69b0:	1085883a 	add	r2,r2,r2
    69b4:	d8b7c83a 	sub	sp,sp,r2
    69b8:	d8800204 	addi	r2,sp,8
    69bc:	1005883a 	mov	r2,r2
    69c0:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    69c4:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    69c8:	e0fff917 	ldw	r3,-28(fp)
    69cc:	e0bffd03 	ldbu	r2,-12(fp)
    69d0:	1085883a 	add	r2,r2,r2
    69d4:	1009883a 	mov	r4,r2
    69d8:	e0bffa04 	addi	r2,fp,-24
    69dc:	d8000115 	stw	zero,4(sp)
    69e0:	d9000015 	stw	r4,0(sp)
    69e4:	180f883a 	mov	r7,r3
    69e8:	01800084 	movi	r6,2
    69ec:	100b883a 	mov	r5,r2
    69f0:	e13ffb17 	ldw	r4,-20(fp)
    69f4:	0020b400 	call	20b40 <alt_avalon_i2c_master_tx_rx>
    69f8:	1004c03a 	cmpne	r2,r2,zero
    69fc:	10803fcc 	andi	r2,r2,255
    6a00:	10000326 	beq	r2,zero,6a10 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6a04:	010000b4 	movhi	r4,2
    6a08:	21184b04 	addi	r4,r4,24876
    6a0c:	000ef180 	call	ef18 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6a10:	e03ff715 	stw	zero,-36(fp)
    6a14:	e0bffd03 	ldbu	r2,-12(fp)
    6a18:	e0fff717 	ldw	r3,-36(fp)
    6a1c:	18801b0e 	bge	r3,r2,6a8c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6a20:	e0bff717 	ldw	r2,-36(fp)
    6a24:	1085883a 	add	r2,r2,r2
    6a28:	1007883a 	mov	r3,r2
    6a2c:	e0bffe17 	ldw	r2,-8(fp)
    6a30:	10c7883a 	add	r3,r2,r3
    6a34:	e0bff717 	ldw	r2,-36(fp)
    6a38:	1085883a 	add	r2,r2,r2
    6a3c:	1009883a 	mov	r4,r2
    6a40:	e0bff917 	ldw	r2,-28(fp)
    6a44:	1105883a 	add	r2,r2,r4
    6a48:	10800003 	ldbu	r2,0(r2)
    6a4c:	10803fcc 	andi	r2,r2,255
    6a50:	1004923a 	slli	r2,r2,8
    6a54:	100b883a 	mov	r5,r2
    6a58:	e0bff717 	ldw	r2,-36(fp)
    6a5c:	1085883a 	add	r2,r2,r2
    6a60:	10800044 	addi	r2,r2,1
    6a64:	e13ff917 	ldw	r4,-28(fp)
    6a68:	2085883a 	add	r2,r4,r2
    6a6c:	10800003 	ldbu	r2,0(r2)
    6a70:	10803fcc 	andi	r2,r2,255
    6a74:	2884b03a 	or	r2,r5,r2
    6a78:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6a7c:	e0bff717 	ldw	r2,-36(fp)
    6a80:	10800044 	addi	r2,r2,1
    6a84:	e0bff715 	stw	r2,-36(fp)
    6a88:	003fe206 	br	6a14 <__alt_data_end+0xfc006a14>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6a8c:	e0bffd03 	ldbu	r2,-12(fp)
    6a90:	1085883a 	add	r2,r2,r2
    6a94:	1007883a 	mov	r3,r2
    6a98:	e0bffe17 	ldw	r2,-8(fp)
    6a9c:	10c5883a 	add	r2,r2,r3
    6aa0:	8037883a 	mov	sp,r16
}
    6aa4:	e6ffff04 	addi	sp,fp,-4
    6aa8:	dfc00217 	ldw	ra,8(sp)
    6aac:	df000117 	ldw	fp,4(sp)
    6ab0:	dc000017 	ldw	r16,0(sp)
    6ab4:	dec00304 	addi	sp,sp,12
    6ab8:	f800283a 	ret

00006abc <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6abc:	defffd04 	addi	sp,sp,-12
    6ac0:	dfc00215 	stw	ra,8(sp)
    6ac4:	df000115 	stw	fp,4(sp)
    6ac8:	df000104 	addi	fp,sp,4
    6acc:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6ad0:	01400284 	movi	r5,10
    6ad4:	e13fff17 	ldw	r4,-4(fp)
    6ad8:	00207140 	call	20714 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6adc:	01902f04 	movi	r6,16572
    6ae0:	01400c04 	movi	r5,48
    6ae4:	e13fff17 	ldw	r4,-4(fp)
    6ae8:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6aec:	01801384 	movi	r6,78
    6af0:	01400a04 	movi	r5,40
    6af4:	e13fff17 	ldw	r4,-4(fp)
    6af8:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6afc:	01800844 	movi	r6,33
    6b00:	01400084 	movi	r5,2
    6b04:	e13fff17 	ldw	r4,-4(fp)
    6b08:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6b0c:	01800104 	movi	r6,4
    6b10:	01400104 	movi	r5,4
    6b14:	e13fff17 	ldw	r4,-4(fp)
    6b18:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6b1c:	000d883a 	mov	r6,zero
    6b20:	01400184 	movi	r5,6
    6b24:	e13fff17 	ldw	r4,-4(fp)
    6b28:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6b2c:	01800404 	movi	r6,16
    6b30:	01400284 	movi	r5,10
    6b34:	e13fff17 	ldw	r4,-4(fp)
    6b38:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b3c:	0001883a 	nop
    6b40:	e037883a 	mov	sp,fp
    6b44:	dfc00117 	ldw	ra,4(sp)
    6b48:	df000017 	ldw	fp,0(sp)
    6b4c:	dec00204 	addi	sp,sp,8
    6b50:	f800283a 	ret

00006b54 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6b54:	defffd04 	addi	sp,sp,-12
    6b58:	dfc00215 	stw	ra,8(sp)
    6b5c:	df000115 	stw	fp,4(sp)
    6b60:	df000104 	addi	fp,sp,4
    6b64:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6b68:	01901004 	movi	r6,16448
    6b6c:	01400884 	movi	r5,34
    6b70:	e13fff17 	ldw	r4,-4(fp)
    6b74:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6b78:	019c1c04 	movi	r6,28784
    6b7c:	01400404 	movi	r5,16
    6b80:	e13fff17 	ldw	r4,-4(fp)
    6b84:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6b88:	01808004 	movi	r6,512
    6b8c:	01400384 	movi	r5,14
    6b90:	e13fff17 	ldw	r4,-4(fp)
    6b94:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6b98:	01804044 	movi	r6,257
    6b9c:	01400904 	movi	r5,36
    6ba0:	e13fff17 	ldw	r4,-4(fp)
    6ba4:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6ba8:	0001883a 	nop
    6bac:	e037883a 	mov	sp,fp
    6bb0:	dfc00117 	ldw	ra,4(sp)
    6bb4:	df000017 	ldw	fp,0(sp)
    6bb8:	dec00204 	addi	sp,sp,8
    6bbc:	f800283a 	ret

00006bc0 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6bc0:	defffd04 	addi	sp,sp,-12
    6bc4:	dfc00215 	stw	ra,8(sp)
    6bc8:	df000115 	stw	fp,4(sp)
    6bcc:	df000104 	addi	fp,sp,4
    6bd0:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6bd4:	000b883a 	mov	r5,zero
    6bd8:	e13fff17 	ldw	r4,-4(fp)
    6bdc:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6be0:	10bfffcc 	andi	r2,r2,65535
    6be4:	100b883a 	mov	r5,r2
    6be8:	010000b4 	movhi	r4,2
    6bec:	21185104 	addi	r4,r4,24900
    6bf0:	000ef180 	call	ef18 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6bf4:	01400084 	movi	r5,2
    6bf8:	e13fff17 	ldw	r4,-4(fp)
    6bfc:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c00:	10bfffcc 	andi	r2,r2,65535
    6c04:	100b883a 	mov	r5,r2
    6c08:	010000b4 	movhi	r4,2
    6c0c:	21185404 	addi	r4,r4,24912
    6c10:	000ef180 	call	ef18 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6c14:	01400104 	movi	r5,4
    6c18:	e13fff17 	ldw	r4,-4(fp)
    6c1c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c20:	10bfffcc 	andi	r2,r2,65535
    6c24:	100b883a 	mov	r5,r2
    6c28:	010000b4 	movhi	r4,2
    6c2c:	21185904 	addi	r4,r4,24932
    6c30:	000ef180 	call	ef18 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6c34:	01400184 	movi	r5,6
    6c38:	e13fff17 	ldw	r4,-4(fp)
    6c3c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c40:	10bfffcc 	andi	r2,r2,65535
    6c44:	100b883a 	mov	r5,r2
    6c48:	010000b4 	movhi	r4,2
    6c4c:	21185e04 	addi	r4,r4,24952
    6c50:	000ef180 	call	ef18 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6c54:	01400284 	movi	r5,10
    6c58:	e13fff17 	ldw	r4,-4(fp)
    6c5c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c60:	10bfffcc 	andi	r2,r2,65535
    6c64:	100b883a 	mov	r5,r2
    6c68:	010000b4 	movhi	r4,2
    6c6c:	21186304 	addi	r4,r4,24972
    6c70:	000ef180 	call	ef18 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6c74:	01400c04 	movi	r5,48
    6c78:	e13fff17 	ldw	r4,-4(fp)
    6c7c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c80:	10bfffcc 	andi	r2,r2,65535
    6c84:	100b883a 	mov	r5,r2
    6c88:	010000b4 	movhi	r4,2
    6c8c:	21186804 	addi	r4,r4,24992
    6c90:	000ef180 	call	ef18 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6c94:	01400384 	movi	r5,14
    6c98:	e13fff17 	ldw	r4,-4(fp)
    6c9c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ca0:	10bfffcc 	andi	r2,r2,65535
    6ca4:	100b883a 	mov	r5,r2
    6ca8:	010000b4 	movhi	r4,2
    6cac:	21186d04 	addi	r4,r4,25012
    6cb0:	000ef180 	call	ef18 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6cb4:	01400904 	movi	r5,36
    6cb8:	e13fff17 	ldw	r4,-4(fp)
    6cbc:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cc0:	10bfffcc 	andi	r2,r2,65535
    6cc4:	100b883a 	mov	r5,r2
    6cc8:	010000b4 	movhi	r4,2
    6ccc:	21187204 	addi	r4,r4,25032
    6cd0:	000ef180 	call	ef18 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6cd4:	01400e04 	movi	r5,56
    6cd8:	e13fff17 	ldw	r4,-4(fp)
    6cdc:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ce0:	10bfffcc 	andi	r2,r2,65535
    6ce4:	100b883a 	mov	r5,r2
    6ce8:	010000b4 	movhi	r4,2
    6cec:	21187704 	addi	r4,r4,25052
    6cf0:	000ef180 	call	ef18 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6cf4:	01400804 	movi	r5,32
    6cf8:	e13fff17 	ldw	r4,-4(fp)
    6cfc:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d00:	10bfffcc 	andi	r2,r2,65535
    6d04:	100b883a 	mov	r5,r2
    6d08:	010000b4 	movhi	r4,2
    6d0c:	21187c04 	addi	r4,r4,25072
    6d10:	000ef180 	call	ef18 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6d14:	01400404 	movi	r5,16
    6d18:	e13fff17 	ldw	r4,-4(fp)
    6d1c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d20:	10bfffcc 	andi	r2,r2,65535
    6d24:	100b883a 	mov	r5,r2
    6d28:	010000b4 	movhi	r4,2
    6d2c:	21188104 	addi	r4,r4,25092
    6d30:	000ef180 	call	ef18 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6d34:	01400884 	movi	r5,34
    6d38:	e13fff17 	ldw	r4,-4(fp)
    6d3c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d40:	10bfffcc 	andi	r2,r2,65535
    6d44:	100b883a 	mov	r5,r2
    6d48:	010000b4 	movhi	r4,2
    6d4c:	21188604 	addi	r4,r4,25112
    6d50:	000ef180 	call	ef18 <printf>
}
    6d54:	0001883a 	nop
    6d58:	e037883a 	mov	sp,fp
    6d5c:	dfc00117 	ldw	ra,4(sp)
    6d60:	df000017 	ldw	fp,0(sp)
    6d64:	dec00204 	addi	sp,sp,8
    6d68:	f800283a 	ret

00006d6c <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6d6c:	defffc04 	addi	sp,sp,-16
    6d70:	dfc00315 	stw	ra,12(sp)
    6d74:	df000215 	stw	fp,8(sp)
    6d78:	df000204 	addi	fp,sp,8
    6d7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6d80:	01400404 	movi	r5,16
    6d84:	e13fff17 	ldw	r4,-4(fp)
    6d88:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d8c:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6d90:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6d94:	e0bffe8b 	ldhu	r2,-6(fp)
    6d98:	100b883a 	mov	r5,r2
    6d9c:	010000b4 	movhi	r4,2
    6da0:	21188b04 	addi	r4,r4,25132
    6da4:	000ef180 	call	ef18 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6da8:	e0bffe8b 	ldhu	r2,-6(fp)
    6dac:	1005d23a 	srai	r2,r2,8
    6db0:	10800084 	addi	r2,r2,2
    6db4:	100b883a 	mov	r5,r2
    6db8:	010000b4 	movhi	r4,2
    6dbc:	21188f04 	addi	r4,r4,25148
    6dc0:	000ef180 	call	ef18 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6dc4:	01400f04 	movi	r5,60
    6dc8:	010000b4 	movhi	r4,2
    6dcc:	21189204 	addi	r4,r4,25160
    6dd0:	000ef180 	call	ef18 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6dd4:	e0bffe8b 	ldhu	r2,-6(fp)
    6dd8:	1005d23a 	srai	r2,r2,8
    6ddc:	10bfff84 	addi	r2,r2,-2
    6de0:	10800f48 	cmpgei	r2,r2,61
    6de4:	1000031e 	bne	r2,zero,6df4 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6de8:	008f0f04 	movi	r2,15420
    6dec:	e0bffe0d 	sth	r2,-8(fp)
    6df0:	00000306 	br	6e00 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6df4:	e0bffe8b 	ldhu	r2,-6(fp)
    6df8:	10bf7f84 	addi	r2,r2,-514
    6dfc:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6e00:	e0bffe0b 	ldhu	r2,-8(fp)
    6e04:	100b883a 	mov	r5,r2
    6e08:	010000b4 	movhi	r4,2
    6e0c:	21189504 	addi	r4,r4,25172
    6e10:	000ef180 	call	ef18 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e14:	e0bffe0b 	ldhu	r2,-8(fp)
    6e18:	100d883a 	mov	r6,r2
    6e1c:	01400404 	movi	r5,16
    6e20:	e13fff17 	ldw	r4,-4(fp)
    6e24:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6e28:	0001883a 	nop
    6e2c:	e037883a 	mov	sp,fp
    6e30:	dfc00117 	ldw	ra,4(sp)
    6e34:	df000017 	ldw	fp,0(sp)
    6e38:	dec00204 	addi	sp,sp,8
    6e3c:	f800283a 	ret

00006e40 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6e40:	defffc04 	addi	sp,sp,-16
    6e44:	dfc00315 	stw	ra,12(sp)
    6e48:	df000215 	stw	fp,8(sp)
    6e4c:	df000204 	addi	fp,sp,8
    6e50:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6e54:	01400404 	movi	r5,16
    6e58:	e13fff17 	ldw	r4,-4(fp)
    6e5c:	00068680 	call	6868 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6e60:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6e64:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6e68:	e0bffe8b 	ldhu	r2,-6(fp)
    6e6c:	1005d23a 	srai	r2,r2,8
    6e70:	10800084 	addi	r2,r2,2
    6e74:	10803c10 	cmplti	r2,r2,240
    6e78:	1000031e 	bne	r2,zero,6e88 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6e7c:	00bc3c04 	movi	r2,-3856
    6e80:	e0bffe0d 	sth	r2,-8(fp)
    6e84:	00000306 	br	6e94 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6e88:	e0bffe8b 	ldhu	r2,-6(fp)
    6e8c:	10808084 	addi	r2,r2,514
    6e90:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e94:	e0bffe0b 	ldhu	r2,-8(fp)
    6e98:	100d883a 	mov	r6,r2
    6e9c:	01400404 	movi	r5,16
    6ea0:	e13fff17 	ldw	r4,-4(fp)
    6ea4:	000660c0 	call	660c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6ea8:	0001883a 	nop
    6eac:	e037883a 	mov	sp,fp
    6eb0:	dfc00117 	ldw	ra,4(sp)
    6eb4:	df000017 	ldw	fp,0(sp)
    6eb8:	dec00204 	addi	sp,sp,8
    6ebc:	f800283a 	ret

00006ec0 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6ec0:	defffb04 	addi	sp,sp,-20
    6ec4:	dfc00415 	stw	ra,16(sp)
    6ec8:	df000315 	stw	fp,12(sp)
    6ecc:	df000304 	addi	fp,sp,12
    6ed0:	e13ffe15 	stw	r4,-8(fp)
    6ed4:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6ed8:	e0bffe17 	ldw	r2,-8(fp)
    6edc:	1009883a 	mov	r4,r2
    6ee0:	0004a840 	call	4a84 <_ZN15USBDeviceConfigC1Ev>
    6ee4:	e0bffe17 	ldw	r2,-8(fp)
    6ee8:	10800104 	addi	r2,r2,4
    6eec:	1009883a 	mov	r4,r2
    6ef0:	0008dc80 	call	8dc8 <_ZN21UsbMidiConfigXtracterC1Ev>
    6ef4:	008000b4 	movhi	r2,2
    6ef8:	1098a204 	addi	r2,r2,25224
    6efc:	e0fffe17 	ldw	r3,-8(fp)
    6f00:	18800015 	stw	r2,0(r3)
    6f04:	008000b4 	movhi	r2,2
    6f08:	1098ae04 	addi	r2,r2,25272
    6f0c:	e0fffe17 	ldw	r3,-8(fp)
    6f10:	18800115 	stw	r2,4(r3)
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	e0ffff17 	ldw	r3,-4(fp)
    6f1c:	10c00215 	stw	r3,8(r2)
    6f20:	e0bffe17 	ldw	r2,-8(fp)
    6f24:	10000305 	stb	zero,12(r2)
    6f28:	e0bffe17 	ldw	r2,-8(fp)
    6f2c:	10000345 	stb	zero,13(r2)
    6f30:	e0bffe17 	ldw	r2,-8(fp)
    6f34:	10001705 	stb	zero,92(r2)
    6f38:	e0bffe17 	ldw	r2,-8(fp)
    6f3c:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f40:	e03ffd05 	stb	zero,-12(fp)
    6f44:	e0bffd03 	ldbu	r2,-12(fp)
    6f48:	108000e8 	cmpgeui	r2,r2,3
    6f4c:	10002d1e 	bne	r2,zero,7004 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6f50:	e0fffd03 	ldbu	r3,-12(fp)
    6f54:	e13ffe17 	ldw	r4,-8(fp)
    6f58:	1805883a 	mov	r2,r3
    6f5c:	1085883a 	add	r2,r2,r2
    6f60:	10c5883a 	add	r2,r2,r3
    6f64:	2085883a 	add	r2,r4,r2
    6f68:	108004c4 	addi	r2,r2,19
    6f6c:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6f70:	e13ffd03 	ldbu	r4,-12(fp)
    6f74:	e0bffd03 	ldbu	r2,-12(fp)
    6f78:	10000226 	beq	r2,zero,6f84 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6f7c:	0007883a 	mov	r3,zero
    6f80:	00000106 	br	6f88 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6f84:	00c00204 	movi	r3,8
    6f88:	e17ffe17 	ldw	r5,-8(fp)
    6f8c:	2005883a 	mov	r2,r4
    6f90:	1085883a 	add	r2,r2,r2
    6f94:	1105883a 	add	r2,r2,r4
    6f98:	2885883a 	add	r2,r5,r2
    6f9c:	10800504 	addi	r2,r2,20
    6fa0:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6fa4:	e13ffd03 	ldbu	r4,-12(fp)
    6fa8:	e0bffd03 	ldbu	r2,-12(fp)
    6fac:	10000226 	beq	r2,zero,6fb8 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6fb0:	00c00044 	movi	r3,1
    6fb4:	00000106 	br	6fbc <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6fb8:	00c003c4 	movi	r3,15
    6fbc:	e17ffe17 	ldw	r5,-8(fp)
    6fc0:	2005883a 	mov	r2,r4
    6fc4:	1085883a 	add	r2,r2,r2
    6fc8:	1105883a 	add	r2,r2,r4
    6fcc:	2885883a 	add	r2,r5,r2
    6fd0:	10800404 	addi	r2,r2,16
    6fd4:	18c7883a 	add	r3,r3,r3
    6fd8:	18cb883a 	add	r5,r3,r3
    6fdc:	10c00143 	ldbu	r3,5(r2)
    6fe0:	18c000cc 	andi	r3,r3,3
    6fe4:	1809883a 	mov	r4,r3
    6fe8:	2807883a 	mov	r3,r5
    6fec:	20c6b03a 	or	r3,r4,r3
    6ff0:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6ff4:	e0bffd03 	ldbu	r2,-12(fp)
    6ff8:	10800044 	addi	r2,r2,1
    6ffc:	e0bffd05 	stb	r2,-12(fp)
    7000:	003fd006 	br	6f44 <__alt_data_end+0xfc006f44>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7004:	e0bffe17 	ldw	r2,-8(fp)
    7008:	10800217 	ldw	r2,8(r2)
    700c:	10000626 	beq	r2,zero,7028 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7010:	e0bffe17 	ldw	r2,-8(fp)
    7014:	10800217 	ldw	r2,8(r2)
    7018:	e0fffe17 	ldw	r3,-8(fp)
    701c:	180b883a 	mov	r5,r3
    7020:	1009883a 	mov	r4,r2
    7024:	00048380 	call	4838 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7028:	0001883a 	nop
    702c:	e037883a 	mov	sp,fp
    7030:	dfc00117 	ldw	ra,4(sp)
    7034:	df000017 	ldw	fp,0(sp)
    7038:	dec00204 	addi	sp,sp,8
    703c:	f800283a 	ret

00007040 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7040:	deffe004 	addi	sp,sp,-128
    7044:	dfc01f15 	stw	ra,124(sp)
    7048:	df001e15 	stw	fp,120(sp)
    704c:	df001e04 	addi	fp,sp,120
    7050:	e13ffc15 	stw	r4,-16(fp)
    7054:	2809883a 	mov	r4,r5
    7058:	3007883a 	mov	r3,r6
    705c:	3805883a 	mov	r2,r7
    7060:	e13ffd05 	stb	r4,-12(fp)
    7064:	e0fffe05 	stb	r3,-8(fp)
    7068:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    706c:	e0bfe944 	addi	r2,fp,-91
    7070:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    7074:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    7078:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    707c:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    7080:	00800044 	movi	r2,1
    7084:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7088:	00800044 	movi	r2,1
    708c:	e0bfe3c5 	stb	r2,-113(fp)
    7090:	e0bfe3c3 	ldbu	r2,-113(fp)
    7094:	108000e8 	cmpgeui	r2,r2,3
    7098:	10001a1e 	bne	r2,zero,7104 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    709c:	e0ffe3c3 	ldbu	r3,-113(fp)
    70a0:	e13ffc17 	ldw	r4,-16(fp)
    70a4:	1805883a 	mov	r2,r3
    70a8:	1085883a 	add	r2,r2,r2
    70ac:	10c5883a 	add	r2,r2,r3
    70b0:	2085883a 	add	r2,r4,r2
    70b4:	10800404 	addi	r2,r2,16
    70b8:	11000143 	ldbu	r4,5(r2)
    70bc:	00ffff84 	movi	r3,-2
    70c0:	20c6703a 	and	r3,r4,r3
    70c4:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    70c8:	e0ffe3c3 	ldbu	r3,-113(fp)
    70cc:	e13ffc17 	ldw	r4,-16(fp)
    70d0:	1805883a 	mov	r2,r3
    70d4:	1085883a 	add	r2,r2,r2
    70d8:	10c5883a 	add	r2,r2,r3
    70dc:	2085883a 	add	r2,r4,r2
    70e0:	10800404 	addi	r2,r2,16
    70e4:	11000143 	ldbu	r4,5(r2)
    70e8:	00ffff44 	movi	r3,-3
    70ec:	20c6703a 	and	r3,r4,r3
    70f0:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    70f4:	e0bfe3c3 	ldbu	r2,-113(fp)
    70f8:	10800044 	addi	r2,r2,1
    70fc:	e0bfe3c5 	stb	r2,-113(fp)
    7100:	003fe306 	br	7090 <__alt_data_end+0xfc007090>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7104:	e0bffc17 	ldw	r2,-16(fp)
    7108:	10800217 	ldw	r2,8(r2)
    710c:	1009883a 	mov	r4,r2
    7110:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    7114:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7118:	e0bffc17 	ldw	r2,-16(fp)
    711c:	10800303 	ldbu	r2,12(r2)
    7120:	10803fcc 	andi	r2,r2,255
    7124:	10000226 	beq	r2,zero,7130 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7128:	00bff644 	movi	r2,-39
    712c:	0001c706 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7130:	e0bfe817 	ldw	r2,-96(fp)
    7134:	10800017 	ldw	r2,0(r2)
    7138:	10800017 	ldw	r2,0(r2)
    713c:	e0fffc17 	ldw	r3,-16(fp)
    7140:	18c00303 	ldbu	r3,12(r3)
    7144:	18c03fcc 	andi	r3,r3,255
    7148:	180b883a 	mov	r5,r3
    714c:	e13fe817 	ldw	r4,-96(fp)
    7150:	103ee83a 	callr	r2
    7154:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7158:	e0bfe617 	ldw	r2,-104(fp)
    715c:	1000021e 	bne	r2,zero,7168 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7160:	00bff584 	movi	r2,-42
    7164:	0001b906 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    7168:	e0bfe617 	ldw	r2,-104(fp)
    716c:	10c00003 	ldbu	r3,0(r2)
    7170:	11000043 	ldbu	r4,1(r2)
    7174:	2008923a 	slli	r4,r4,8
    7178:	20c6b03a 	or	r3,r4,r3
    717c:	11000083 	ldbu	r4,2(r2)
    7180:	2008943a 	slli	r4,r4,16
    7184:	20c6b03a 	or	r3,r4,r3
    7188:	108000c3 	ldbu	r2,3(r2)
    718c:	1004963a 	slli	r2,r2,24
    7190:	10c4b03a 	or	r2,r2,r3
    7194:	1000021e 	bne	r2,zero,71a0 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    7198:	00bff5c4 	movi	r2,-41
    719c:	0001ab06 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    71a0:	e0bfe617 	ldw	r2,-104(fp)
    71a4:	10c00003 	ldbu	r3,0(r2)
    71a8:	11000043 	ldbu	r4,1(r2)
    71ac:	2008923a 	slli	r4,r4,8
    71b0:	20c6b03a 	or	r3,r4,r3
    71b4:	11000083 	ldbu	r4,2(r2)
    71b8:	2008943a 	slli	r4,r4,16
    71bc:	20c6b03a 	or	r3,r4,r3
    71c0:	108000c3 	ldbu	r2,3(r2)
    71c4:	1004963a 	slli	r2,r2,24
    71c8:	10c4b03a 	or	r2,r2,r3
    71cc:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    71d0:	e0bffc17 	ldw	r2,-16(fp)
    71d4:	10c004c4 	addi	r3,r2,19
    71d8:	e0bfe617 	ldw	r2,-104(fp)
    71dc:	19803fcc 	andi	r6,r3,255
    71e0:	11000003 	ldbu	r4,0(r2)
    71e4:	2008703a 	and	r4,r4,zero
    71e8:	200b883a 	mov	r5,r4
    71ec:	3009883a 	mov	r4,r6
    71f0:	2908b03a 	or	r4,r5,r4
    71f4:	11000005 	stb	r4,0(r2)
    71f8:	1808d23a 	srli	r4,r3,8
    71fc:	21803fcc 	andi	r6,r4,255
    7200:	11000043 	ldbu	r4,1(r2)
    7204:	2008703a 	and	r4,r4,zero
    7208:	200b883a 	mov	r5,r4
    720c:	3009883a 	mov	r4,r6
    7210:	2908b03a 	or	r4,r5,r4
    7214:	11000045 	stb	r4,1(r2)
    7218:	1808d43a 	srli	r4,r3,16
    721c:	21803fcc 	andi	r6,r4,255
    7220:	11000083 	ldbu	r4,2(r2)
    7224:	2008703a 	and	r4,r4,zero
    7228:	200b883a 	mov	r5,r4
    722c:	3009883a 	mov	r4,r6
    7230:	2908b03a 	or	r4,r5,r4
    7234:	11000085 	stb	r4,2(r2)
    7238:	180ad63a 	srli	r5,r3,24
    723c:	10c000c3 	ldbu	r3,3(r2)
    7240:	1806703a 	and	r3,r3,zero
    7244:	1809883a 	mov	r4,r3
    7248:	2807883a 	mov	r3,r5
    724c:	20c6b03a 	or	r3,r4,r3
    7250:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    7254:	e0bfe617 	ldw	r2,-104(fp)
    7258:	e0ffff03 	ldbu	r3,-4(fp)
    725c:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7260:	e0bffc17 	ldw	r2,-16(fp)
    7264:	10c00217 	ldw	r3,8(r2)
    7268:	e0bfe944 	addi	r2,fp,-91
    726c:	d8800015 	stw	r2,0(sp)
    7270:	01c00204 	movi	r7,8
    7274:	000d883a 	mov	r6,zero
    7278:	000b883a 	mov	r5,zero
    727c:	1809883a 	mov	r4,r3
    7280:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    7284:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    7288:	e0bfe617 	ldw	r2,-104(fp)
    728c:	e0ffe717 	ldw	r3,-100(fp)
    7290:	19403fcc 	andi	r5,r3,255
    7294:	10c00003 	ldbu	r3,0(r2)
    7298:	1806703a 	and	r3,r3,zero
    729c:	1809883a 	mov	r4,r3
    72a0:	2807883a 	mov	r3,r5
    72a4:	20c6b03a 	or	r3,r4,r3
    72a8:	10c00005 	stb	r3,0(r2)
    72ac:	e0ffe717 	ldw	r3,-100(fp)
    72b0:	1806d23a 	srli	r3,r3,8
    72b4:	19403fcc 	andi	r5,r3,255
    72b8:	10c00043 	ldbu	r3,1(r2)
    72bc:	1806703a 	and	r3,r3,zero
    72c0:	1809883a 	mov	r4,r3
    72c4:	2807883a 	mov	r3,r5
    72c8:	20c6b03a 	or	r3,r4,r3
    72cc:	10c00045 	stb	r3,1(r2)
    72d0:	e0ffe717 	ldw	r3,-100(fp)
    72d4:	1806d43a 	srli	r3,r3,16
    72d8:	19403fcc 	andi	r5,r3,255
    72dc:	10c00083 	ldbu	r3,2(r2)
    72e0:	1806703a 	and	r3,r3,zero
    72e4:	1809883a 	mov	r4,r3
    72e8:	2807883a 	mov	r3,r5
    72ec:	20c6b03a 	or	r3,r4,r3
    72f0:	10c00085 	stb	r3,2(r2)
    72f4:	e0ffe717 	ldw	r3,-100(fp)
    72f8:	180ad63a 	srli	r5,r3,24
    72fc:	10c000c3 	ldbu	r3,3(r2)
    7300:	1806703a 	and	r3,r3,zero
    7304:	1809883a 	mov	r4,r3
    7308:	2807883a 	mov	r3,r5
    730c:	20c6b03a 	or	r3,r4,r3
    7310:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7314:	e0bfe303 	ldbu	r2,-116(fp)
    7318:	10013a1e 	bne	r2,zero,7804 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    731c:	e0bfe817 	ldw	r2,-96(fp)
    7320:	10800017 	ldw	r2,0(r2)
    7324:	10800104 	addi	r2,r2,4
    7328:	10800017 	ldw	r2,0(r2)
    732c:	e0fffd03 	ldbu	r3,-12(fp)
    7330:	e13ffe03 	ldbu	r4,-8(fp)
    7334:	200f883a 	mov	r7,r4
    7338:	000d883a 	mov	r6,zero
    733c:	180b883a 	mov	r5,r3
    7340:	e13fe817 	ldw	r4,-96(fp)
    7344:	103ee83a 	callr	r2
    7348:	1007883a 	mov	r3,r2
    734c:	e0bffc17 	ldw	r2,-16(fp)
    7350:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    7354:	e0bffc17 	ldw	r2,-16(fp)
    7358:	10800303 	ldbu	r2,12(r2)
    735c:	10803fcc 	andi	r2,r2,255
    7360:	1000021e 	bne	r2,zero,736c <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    7364:	00bff504 	movi	r2,-44
    7368:	00013806 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    736c:	e0bfe517 	ldw	r2,-108(fp)
    7370:	10c001c3 	ldbu	r3,7(r2)
    7374:	e0bffc17 	ldw	r2,-16(fp)
    7378:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    737c:	e0bffc17 	ldw	r2,-16(fp)
    7380:	10c00217 	ldw	r3,8(r2)
    7384:	e0bffc17 	ldw	r2,-16(fp)
    7388:	10800303 	ldbu	r2,12(r2)
    738c:	10803fcc 	andi	r2,r2,255
    7390:	100f883a 	mov	r7,r2
    7394:	000d883a 	mov	r6,zero
    7398:	000b883a 	mov	r5,zero
    739c:	1809883a 	mov	r4,r3
    73a0:	00026fc0 	call	26fc <_ZN3USB7setAddrEhhh>
    73a4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    73a8:	e0bfe303 	ldbu	r2,-116(fp)
    73ac:	10001026 	beq	r2,zero,73f0 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    73b0:	e0bfe617 	ldw	r2,-104(fp)
    73b4:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    73b8:	e0bfe817 	ldw	r2,-96(fp)
    73bc:	10800017 	ldw	r2,0(r2)
    73c0:	10800204 	addi	r2,r2,8
    73c4:	10800017 	ldw	r2,0(r2)
    73c8:	e0fffc17 	ldw	r3,-16(fp)
    73cc:	18c00303 	ldbu	r3,12(r3)
    73d0:	18c03fcc 	andi	r3,r3,255
    73d4:	180b883a 	mov	r5,r3
    73d8:	e13fe817 	ldw	r4,-96(fp)
    73dc:	103ee83a 	callr	r2
                bAddress = 0;
    73e0:	e0bffc17 	ldw	r2,-16(fp)
    73e4:	10000305 	stb	zero,12(r2)
                return rcode;
    73e8:	e0bfe303 	ldbu	r2,-116(fp)
    73ec:	00011706 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    73f0:	e0bffc17 	ldw	r2,-16(fp)
    73f4:	10800303 	ldbu	r2,12(r2)
    73f8:	10803fcc 	andi	r2,r2,255
    73fc:	01402004 	movi	r5,128
    7400:	1009883a 	mov	r4,r2
    7404:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7408:	e0bfe617 	ldw	r2,-104(fp)
    740c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7410:	e0bfe817 	ldw	r2,-96(fp)
    7414:	10800017 	ldw	r2,0(r2)
    7418:	10800017 	ldw	r2,0(r2)
    741c:	e0fffc17 	ldw	r3,-16(fp)
    7420:	18c00303 	ldbu	r3,12(r3)
    7424:	18c03fcc 	andi	r3,r3,255
    7428:	180b883a 	mov	r5,r3
    742c:	e13fe817 	ldw	r4,-96(fp)
    7430:	103ee83a 	callr	r2
    7434:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7438:	e0bfe617 	ldw	r2,-104(fp)
    743c:	1000021e 	bne	r2,zero,7448 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7440:	00bff584 	movi	r2,-42
    7444:	00010106 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7448:	e0bfe617 	ldw	r2,-104(fp)
    744c:	e0ffff03 	ldbu	r3,-4(fp)
    7450:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    7454:	e0bffc17 	ldw	r2,-16(fp)
    7458:	10c00217 	ldw	r3,8(r2)
    745c:	e0bffc17 	ldw	r2,-16(fp)
    7460:	10800303 	ldbu	r2,12(r2)
    7464:	11003fcc 	andi	r4,r2,255
    7468:	00800484 	movi	r2,18
    746c:	117fffcc 	andi	r5,r2,65535
    7470:	e0bfe944 	addi	r2,fp,-91
    7474:	d8800015 	stw	r2,0(sp)
    7478:	280f883a 	mov	r7,r5
    747c:	000d883a 	mov	r6,zero
    7480:	200b883a 	mov	r5,r4
    7484:	1809883a 	mov	r4,r3
    7488:	00024400 	call	2440 <_ZN3USB11getDevDescrEhhtPh>
    748c:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    7490:	e0bfe303 	ldbu	r2,-116(fp)
    7494:	1000dd1e 	bne	r2,zero,780c <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    7498:	e0bfe517 	ldw	r2,-108(fp)
    749c:	10c00203 	ldbu	r3,8(r2)
    74a0:	10800243 	ldbu	r2,9(r2)
    74a4:	1004923a 	slli	r2,r2,8
    74a8:	10c4b03a 	or	r2,r2,r3
    74ac:	1007883a 	mov	r3,r2
    74b0:	e0bffc17 	ldw	r2,-16(fp)
    74b4:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    74b8:	e0bfe517 	ldw	r2,-108(fp)
    74bc:	10c00283 	ldbu	r3,10(r2)
    74c0:	108002c3 	ldbu	r2,11(r2)
    74c4:	1004923a 	slli	r2,r2,8
    74c8:	10c4b03a 	or	r2,r2,r3
    74cc:	1007883a 	mov	r3,r2
    74d0:	e0bffc17 	ldw	r2,-16(fp)
    74d4:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    74d8:	e0bfe517 	ldw	r2,-108(fp)
    74dc:	10800443 	ldbu	r2,17(r2)
    74e0:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    74e4:	e0bffc17 	ldw	r2,-16(fp)
    74e8:	10c00217 	ldw	r3,8(r2)
    74ec:	e0bffc17 	ldw	r2,-16(fp)
    74f0:	10800303 	ldbu	r2,12(r2)
    74f4:	11003fcc 	andi	r4,r2,255
    74f8:	e0bffc17 	ldw	r2,-16(fp)
    74fc:	108004c4 	addi	r2,r2,19
    7500:	100f883a 	mov	r7,r2
    7504:	01800044 	movi	r6,1
    7508:	200b883a 	mov	r5,r4
    750c:	1809883a 	mov	r4,r3
    7510:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7514:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7518:	e0bfe303 	ldbu	r2,-116(fp)
    751c:	1000bd1e 	bne	r2,zero,7814 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7520:	e0bffc17 	ldw	r2,-16(fp)
    7524:	1080040b 	ldhu	r2,16(r2)
    7528:	10bfffcc 	andi	r2,r2,65535
    752c:	01402004 	movi	r5,128
    7530:	1009883a 	mov	r4,r2
    7534:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7538:	e0bffc17 	ldw	r2,-16(fp)
    753c:	1080038b 	ldhu	r2,14(r2)
    7540:	10bfffcc 	andi	r2,r2,65535
    7544:	01402004 	movi	r5,128
    7548:	1009883a 	mov	r4,r2
    754c:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7550:	e0bfe903 	ldbu	r2,-92(fp)
    7554:	01402004 	movi	r5,128
    7558:	1009883a 	mov	r4,r2
    755c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7560:	e0bffc17 	ldw	r2,-16(fp)
    7564:	00c000c4 	movi	r3,3
    7568:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    756c:	e13ffc17 	ldw	r4,-16(fp)
    7570:	00078d80 	call	78d8 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7574:	e03fe405 	stb	zero,-112(fp)
    7578:	e0ffe403 	ldbu	r3,-112(fp)
    757c:	e0bfe903 	ldbu	r2,-92(fp)
    7580:	18802a2e 	bgeu	r3,r2,762c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    7584:	e0bffc17 	ldw	r2,-16(fp)
    7588:	10c00104 	addi	r3,r2,4
    758c:	e0bfee04 	addi	r2,fp,-72
    7590:	01800044 	movi	r6,1
    7594:	180b883a 	mov	r5,r3
    7598:	1009883a 	mov	r4,r2
    759c:	00083d80 	call	83d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    75a0:	e0bffc17 	ldw	r2,-16(fp)
    75a4:	10c00217 	ldw	r3,8(r2)
    75a8:	e0bffc17 	ldw	r2,-16(fp)
    75ac:	10800303 	ldbu	r2,12(r2)
    75b0:	11003fcc 	andi	r4,r2,255
    75b4:	e17fe403 	ldbu	r5,-112(fp)
    75b8:	e0bfee04 	addi	r2,fp,-72
    75bc:	d8800015 	stw	r2,0(sp)
    75c0:	280f883a 	mov	r7,r5
    75c4:	000d883a 	mov	r6,zero
    75c8:	200b883a 	mov	r5,r4
    75cc:	1809883a 	mov	r4,r3
    75d0:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    75d4:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    75d8:	e0bfe303 	ldbu	r2,-116(fp)
    75dc:	10008f1e 	bne	r2,zero,781c <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    75e0:	e0bfee04 	addi	r2,fp,-72
    75e4:	1009883a 	mov	r4,r2
    75e8:	0008ce40 	call	8ce4 <_ZN14MidiDescParser9getNumEPsEv>
    75ec:	1007883a 	mov	r3,r2
    75f0:	e0bfe383 	ldbu	r2,-114(fp)
    75f4:	10c5883a 	add	r2,r2,r3
    75f8:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    75fc:	e0bfe383 	ldbu	r2,-114(fp)
    7600:	108000b0 	cmpltui	r2,r2,2
    7604:	1000051e 	bne	r2,zero,761c <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7608:	e0bfee04 	addi	r2,fp,-72
    760c:	1009883a 	mov	r4,r2
    7610:	0008cbc0 	call	8cbc <_ZN14MidiDescParser12getConfValueEv>
    7614:	e0bfe345 	stb	r2,-115(fp)
    7618:	00000406 	br	762c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    761c:	e0bfe403 	ldbu	r2,-112(fp)
    7620:	10800044 	addi	r2,r2,1
    7624:	e0bfe405 	stb	r2,-112(fp)
    7628:	003fd306 	br	7578 <__alt_data_end+0xfc007578>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    762c:	e0bfe383 	ldbu	r2,-114(fp)
    7630:	01402004 	movi	r5,128
    7634:	1009883a 	mov	r4,r2
    7638:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    763c:	e0bfe383 	ldbu	r2,-114(fp)
    7640:	10800058 	cmpnei	r2,r2,1
    7644:	1000321e 	bne	r2,zero,7710 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7648:	e03fe445 	stb	zero,-111(fp)
    764c:	e0ffe443 	ldbu	r3,-111(fp)
    7650:	e0bfe903 	ldbu	r2,-92(fp)
    7654:	18802a2e 	bgeu	r3,r2,7700 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7658:	e0bffc17 	ldw	r2,-16(fp)
    765c:	10c00104 	addi	r3,r2,4
    7660:	e0bfee04 	addi	r2,fp,-72
    7664:	000d883a 	mov	r6,zero
    7668:	180b883a 	mov	r5,r3
    766c:	1009883a 	mov	r4,r2
    7670:	00083d80 	call	83d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7674:	e0bffc17 	ldw	r2,-16(fp)
    7678:	10c00217 	ldw	r3,8(r2)
    767c:	e0bffc17 	ldw	r2,-16(fp)
    7680:	10800303 	ldbu	r2,12(r2)
    7684:	11003fcc 	andi	r4,r2,255
    7688:	e17fe443 	ldbu	r5,-111(fp)
    768c:	e0bfee04 	addi	r2,fp,-72
    7690:	d8800015 	stw	r2,0(sp)
    7694:	280f883a 	mov	r7,r5
    7698:	000d883a 	mov	r6,zero
    769c:	200b883a 	mov	r5,r4
    76a0:	1809883a 	mov	r4,r3
    76a4:	000255c0 	call	255c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    76a8:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    76ac:	e0bfe303 	ldbu	r2,-116(fp)
    76b0:	10005c1e 	bne	r2,zero,7824 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    76b4:	e0bfee04 	addi	r2,fp,-72
    76b8:	1009883a 	mov	r4,r2
    76bc:	0008ce40 	call	8ce4 <_ZN14MidiDescParser9getNumEPsEv>
    76c0:	1007883a 	mov	r3,r2
    76c4:	e0bfe383 	ldbu	r2,-114(fp)
    76c8:	10c5883a 	add	r2,r2,r3
    76cc:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    76d0:	e0bfe383 	ldbu	r2,-114(fp)
    76d4:	108000b0 	cmpltui	r2,r2,2
    76d8:	1000051e 	bne	r2,zero,76f0 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    76dc:	e0bfee04 	addi	r2,fp,-72
    76e0:	1009883a 	mov	r4,r2
    76e4:	0008cbc0 	call	8cbc <_ZN14MidiDescParser12getConfValueEv>
    76e8:	e0bfe345 	stb	r2,-115(fp)
    76ec:	00000406 	br	7700 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    76f0:	e0bfe443 	ldbu	r2,-111(fp)
    76f4:	10800044 	addi	r2,r2,1
    76f8:	e0bfe445 	stb	r2,-111(fp)
    76fc:	003fd306 	br	764c <__alt_data_end+0xfc00764c>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7700:	e0bfe383 	ldbu	r2,-114(fp)
    7704:	01402004 	movi	r5,128
    7708:	1009883a 	mov	r4,r2
    770c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7710:	e0bfe383 	ldbu	r2,-114(fp)
    7714:	108000a8 	cmpgeui	r2,r2,2
    7718:	1000031e 	bne	r2,zero,7728 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    771c:	00bfffc4 	movi	r2,-1
    7720:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7724:	00004206 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7728:	e0bffc17 	ldw	r2,-16(fp)
    772c:	10c00217 	ldw	r3,8(r2)
    7730:	e0bffc17 	ldw	r2,-16(fp)
    7734:	10800303 	ldbu	r2,12(r2)
    7738:	11003fcc 	andi	r4,r2,255
    773c:	e0bffc17 	ldw	r2,-16(fp)
    7740:	108004c4 	addi	r2,r2,19
    7744:	100f883a 	mov	r7,r2
    7748:	018000c4 	movi	r6,3
    774c:	200b883a 	mov	r5,r4
    7750:	1809883a 	mov	r4,r3
    7754:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7758:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    775c:	e0bfe343 	ldbu	r2,-115(fp)
    7760:	01402004 	movi	r5,128
    7764:	1009883a 	mov	r4,r2
    7768:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    776c:	e0bffc17 	ldw	r2,-16(fp)
    7770:	10800583 	ldbu	r2,22(r2)
    7774:	10bfe004 	addi	r2,r2,-128
    7778:	10803fcc 	andi	r2,r2,255
    777c:	01402004 	movi	r5,128
    7780:	1009883a 	mov	r4,r2
    7784:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	10800643 	ldbu	r2,25(r2)
    7790:	10803fcc 	andi	r2,r2,255
    7794:	01402004 	movi	r5,128
    7798:	1009883a 	mov	r4,r2
    779c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    77a0:	e0bffc17 	ldw	r2,-16(fp)
    77a4:	10c00217 	ldw	r3,8(r2)
    77a8:	e0bffc17 	ldw	r2,-16(fp)
    77ac:	10800303 	ldbu	r2,12(r2)
    77b0:	10803fcc 	andi	r2,r2,255
    77b4:	e13fe343 	ldbu	r4,-115(fp)
    77b8:	200f883a 	mov	r7,r4
    77bc:	000d883a 	mov	r6,zero
    77c0:	100b883a 	mov	r5,r2
    77c4:	1809883a 	mov	r4,r3
    77c8:	00027900 	call	2790 <_ZN3USB7setConfEhhh>
    77cc:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    77d0:	e0bfe303 	ldbu	r2,-116(fp)
    77d4:	1000151e 	bne	r2,zero,782c <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    77d8:	e0bffc17 	ldw	r2,-16(fp)
    77dc:	10801817 	ldw	r2,96(r2)
    77e0:	10000326 	beq	r2,zero,77f0 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    77e4:	e0bffc17 	ldw	r2,-16(fp)
    77e8:	10801817 	ldw	r2,96(r2)
    77ec:	103ee83a 	callr	r2

        bPollEnable = true;
    77f0:	e0bffc17 	ldw	r2,-16(fp)
    77f4:	00c00044 	movi	r3,1
    77f8:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    77fc:	0005883a 	mov	r2,zero
    7800:	00001206 	br	784c <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7804:	0001883a 	nop
    7808:	00000906 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    780c:	0001883a 	nop
    7810:	00000706 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7814:	0001883a 	nop
    7818:	00000506 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    781c:	0001883a 	nop
    7820:	00000306 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7824:	0001883a 	nop
    7828:	00000106 	br	7830 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    782c:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7830:	e0bffc17 	ldw	r2,-16(fp)
    7834:	10800017 	ldw	r2,0(r2)
    7838:	10800204 	addi	r2,r2,8
    783c:	10800017 	ldw	r2,0(r2)
    7840:	e13ffc17 	ldw	r4,-16(fp)
    7844:	103ee83a 	callr	r2
        return rcode;
    7848:	e0bfe303 	ldbu	r2,-116(fp)
}
    784c:	e037883a 	mov	sp,fp
    7850:	dfc00117 	ldw	ra,4(sp)
    7854:	df000017 	ldw	fp,0(sp)
    7858:	dec00204 	addi	sp,sp,8
    785c:	f800283a 	ret

00007860 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7860:	defffd04 	addi	sp,sp,-12
    7864:	dfc00215 	stw	ra,8(sp)
    7868:	df000115 	stw	fp,4(sp)
    786c:	df000104 	addi	fp,sp,4
    7870:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7874:	e0bfff17 	ldw	r2,-4(fp)
    7878:	10800217 	ldw	r2,8(r2)
    787c:	1009883a 	mov	r4,r2
    7880:	00028140 	call	2814 <_ZN3USB14GetAddressPoolEv>
    7884:	1009883a 	mov	r4,r2
    7888:	20800017 	ldw	r2,0(r4)
    788c:	10800204 	addi	r2,r2,8
    7890:	10800017 	ldw	r2,0(r2)
    7894:	e0ffff17 	ldw	r3,-4(fp)
    7898:	18c00303 	ldbu	r3,12(r3)
    789c:	18c03fcc 	andi	r3,r3,255
    78a0:	180b883a 	mov	r5,r3
    78a4:	103ee83a 	callr	r2
        bAddress     = 0;
    78a8:	e0bfff17 	ldw	r2,-4(fp)
    78ac:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    78b0:	e0bfff17 	ldw	r2,-4(fp)
    78b4:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    78b8:	e0bfff17 	ldw	r2,-4(fp)
    78bc:	10001705 	stb	zero,92(r2)
        return 0;
    78c0:	0005883a 	mov	r2,zero
}
    78c4:	e037883a 	mov	sp,fp
    78c8:	dfc00117 	ldw	ra,4(sp)
    78cc:	df000017 	ldw	fp,0(sp)
    78d0:	dec00204 	addi	sp,sp,8
    78d4:	f800283a 	ret

000078d8 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    78d8:	defffe04 	addi	sp,sp,-8
    78dc:	df000115 	stw	fp,4(sp)
    78e0:	df000104 	addi	fp,sp,4
    78e4:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    78e8:	e0bfff17 	ldw	r2,-4(fp)
    78ec:	1080040b 	ldhu	r2,16(r2)
    78f0:	10bfffcc 	andi	r2,r2,65535
    78f4:	10848d58 	cmpnei	r2,r2,4661
    78f8:	1000351e 	bne	r2,zero,79d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    78fc:	e0bfff17 	ldw	r2,-4(fp)
    7900:	1080038b 	ldhu	r2,14(r2)
    7904:	10bfffcc 	andi	r2,r2,65535
    7908:	10800820 	cmpeqi	r2,r2,32
    790c:	10000f1e 	bne	r2,zero,794c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7910:	e0bfff17 	ldw	r2,-4(fp)
    7914:	1080038b 	ldhu	r2,14(r2)
    7918:	10bfffcc 	andi	r2,r2,65535
    791c:	10800da0 	cmpeqi	r2,r2,54
    7920:	10000a1e 	bne	r2,zero,794c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7924:	e0bfff17 	ldw	r2,-4(fp)
    7928:	1080038b 	ldhu	r2,14(r2)
    792c:	10bfffcc 	andi	r2,r2,65535
    7930:	10801460 	cmpeqi	r2,r2,81
    7934:	1000051e 	bne	r2,zero,794c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7938:	e0bfff17 	ldw	r2,-4(fp)
    793c:	1080038b 	ldhu	r2,14(r2)
    7940:	10bfffcc 	andi	r2,r2,65535
    7944:	10801a58 	cmpnei	r2,r2,105
    7948:	1000041e 	bne	r2,zero,795c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    794c:	e0bfff17 	ldw	r2,-4(fp)
    7950:	00c00084 	movi	r3,2
    7954:	10c00485 	stb	r3,18(r2)
                        return;
    7958:	00001d06 	br	79d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    795c:	e0bfff17 	ldw	r2,-4(fp)
    7960:	1080038b 	ldhu	r2,14(r2)
    7964:	10bfffcc 	andi	r2,r2,65535
    7968:	10800c30 	cmpltui	r2,r2,48
    796c:	1000051e 	bne	r2,zero,7984 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7970:	e0bfff17 	ldw	r2,-4(fp)
    7974:	1080038b 	ldhu	r2,14(r2)
    7978:	10bfffcc 	andi	r2,r2,65535
    797c:	10800cf0 	cmpltui	r2,r2,51
    7980:	10000f1e 	bne	r2,zero,79c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7984:	e0bfff17 	ldw	r2,-4(fp)
    7988:	1080038b 	ldhu	r2,14(r2)
    798c:	10bfffcc 	andi	r2,r2,65535
    7990:	10800d60 	cmpeqi	r2,r2,53
    7994:	10000a1e 	bne	r2,zero,79c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7998:	e0bfff17 	ldw	r2,-4(fp)
    799c:	1080038b 	ldhu	r2,14(r2)
    79a0:	10bfffcc 	andi	r2,r2,65535
    79a4:	10801ef0 	cmpltui	r2,r2,123
    79a8:	1000091e 	bne	r2,zero,79d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    79ac:	e0bfff17 	ldw	r2,-4(fp)
    79b0:	1080038b 	ldhu	r2,14(r2)
    79b4:	10bfffcc 	andi	r2,r2,65535
    79b8:	10801fa8 	cmpgeui	r2,r2,126
    79bc:	1000041e 	bne	r2,zero,79d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    79c0:	e0bfff17 	ldw	r2,-4(fp)
    79c4:	00c00084 	movi	r3,2
    79c8:	10c00485 	stb	r3,18(r2)
                        return;
    79cc:	0001883a 	nop
                }
        }
}
    79d0:	e037883a 	mov	sp,fp
    79d4:	df000017 	ldw	fp,0(sp)
    79d8:	dec00104 	addi	sp,sp,4
    79dc:	f800283a 	ret

000079e0 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    79e0:	defff804 	addi	sp,sp,-32
    79e4:	dfc00715 	stw	ra,28(sp)
    79e8:	df000615 	stw	fp,24(sp)
    79ec:	df000604 	addi	fp,sp,24
    79f0:	e13ffd15 	stw	r4,-12(fp)
    79f4:	e17ffe15 	stw	r5,-8(fp)
    79f8:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    79fc:	e0bffd17 	ldw	r2,-12(fp)
    7a00:	108005c3 	ldbu	r2,23(r2)
    7a04:	10c03fcc 	andi	r3,r2,255
    7a08:	e0bffe17 	ldw	r2,-8(fp)
    7a0c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7a10:	e0bffd17 	ldw	r2,-12(fp)
    7a14:	10c00217 	ldw	r3,8(r2)
    7a18:	e0bffd17 	ldw	r2,-12(fp)
    7a1c:	10800303 	ldbu	r2,12(r2)
    7a20:	11003fcc 	andi	r4,r2,255
    7a24:	e0bffd17 	ldw	r2,-12(fp)
    7a28:	10800583 	ldbu	r2,22(r2)
    7a2c:	11403fcc 	andi	r5,r2,255
    7a30:	d8000115 	stw	zero,4(sp)
    7a34:	e0bfff17 	ldw	r2,-4(fp)
    7a38:	d8800015 	stw	r2,0(sp)
    7a3c:	e1fffe17 	ldw	r7,-8(fp)
    7a40:	280d883a 	mov	r6,r5
    7a44:	200b883a 	mov	r5,r4
    7a48:	1809883a 	mov	r4,r3
    7a4c:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7a50:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7a54:	e0bffe17 	ldw	r2,-8(fp)
    7a58:	1080000b 	ldhu	r2,0(r2)
    7a5c:	10bfffcc 	andi	r2,r2,65535
    7a60:	10800f28 	cmpgeui	r2,r2,60
    7a64:	10000d1e 	bne	r2,zero,7a9c <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7a68:	e0bffe17 	ldw	r2,-8(fp)
    7a6c:	1080000b 	ldhu	r2,0(r2)
    7a70:	10bfffcc 	andi	r2,r2,65535
    7a74:	e0ffff17 	ldw	r3,-4(fp)
    7a78:	1885883a 	add	r2,r3,r2
    7a7c:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7a80:	e0bffe17 	ldw	r2,-8(fp)
    7a84:	1080000b 	ldhu	r2,0(r2)
    7a88:	10bfffcc 	andi	r2,r2,65535
    7a8c:	10800044 	addi	r2,r2,1
    7a90:	e0ffff17 	ldw	r3,-4(fp)
    7a94:	1885883a 	add	r2,r3,r2
    7a98:	10000005 	stb	zero,0(r2)
        }
        return r;
    7a9c:	e0bffc03 	ldbu	r2,-16(fp)
}
    7aa0:	e037883a 	mov	sp,fp
    7aa4:	dfc00117 	ldw	ra,4(sp)
    7aa8:	df000017 	ldw	fp,0(sp)
    7aac:	dec00204 	addi	sp,sp,8
    7ab0:	f800283a 	ret

00007ab4 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7ab4:	defff904 	addi	sp,sp,-28
    7ab8:	dfc00615 	stw	ra,24(sp)
    7abc:	df000515 	stw	fp,20(sp)
    7ac0:	df000504 	addi	fp,sp,20
    7ac4:	e13ffd15 	stw	r4,-12(fp)
    7ac8:	e17ffe15 	stw	r5,-8(fp)
    7acc:	3005883a 	mov	r2,r6
    7ad0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7ad4:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7ad8:	e0bffd17 	ldw	r2,-12(fp)
    7adc:	10800343 	ldbu	r2,13(r2)
    7ae0:	1080005c 	xori	r2,r2,1
    7ae4:	10803fcc 	andi	r2,r2,255
    7ae8:	10000226 	beq	r2,zero,7af4 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7aec:	0005883a 	mov	r2,zero
    7af0:	00008506 	br	7d08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7af4:	e0bffd17 	ldw	r2,-12(fp)
    7af8:	10801703 	ldbu	r2,92(r2)
    7afc:	10803fcc 	andi	r2,r2,255
    7b00:	10001826 	beq	r2,zero,7b64 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7b04:	e0bffd17 	ldw	r2,-12(fp)
    7b08:	10801703 	ldbu	r2,92(r2)
    7b0c:	10803fcc 	andi	r2,r2,255
    7b10:	10801028 	cmpgeui	r2,r2,64
    7b14:	1000131e 	bne	r2,zero,7b64 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7b18:	e0bffd17 	ldw	r2,-12(fp)
    7b1c:	10801703 	ldbu	r2,92(r2)
    7b20:	10803fcc 	andi	r2,r2,255
    7b24:	e0fffd17 	ldw	r3,-12(fp)
    7b28:	1885883a 	add	r2,r3,r2
    7b2c:	10800704 	addi	r2,r2,28
    7b30:	10800003 	ldbu	r2,0(r2)
    7b34:	10803fcc 	andi	r2,r2,255
    7b38:	10002a1e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b3c:	e0bffd17 	ldw	r2,-12(fp)
    7b40:	10801703 	ldbu	r2,92(r2)
    7b44:	10803fcc 	andi	r2,r2,255
    7b48:	10800044 	addi	r2,r2,1
    7b4c:	e0fffd17 	ldw	r3,-12(fp)
    7b50:	1885883a 	add	r2,r3,r2
    7b54:	10800704 	addi	r2,r2,28
    7b58:	10800003 	ldbu	r2,0(r2)
    7b5c:	10803fcc 	andi	r2,r2,255
    7b60:	1000201e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7b64:	e0bffd17 	ldw	r2,-12(fp)
    7b68:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7b6c:	e0bffd17 	ldw	r2,-12(fp)
    7b70:	10c00704 	addi	r3,r2,28
    7b74:	e0bffc04 	addi	r2,fp,-16
    7b78:	180d883a 	mov	r6,r3
    7b7c:	100b883a 	mov	r5,r2
    7b80:	e13ffd17 	ldw	r4,-12(fp)
    7b84:	00079e00 	call	79e0 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7b88:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7b8c:	e0bffb03 	ldbu	r2,-20(fp)
    7b90:	10000226 	beq	r2,zero,7b9c <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7b94:	0005883a 	mov	r2,zero
    7b98:	00005b06 	br	7d08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7b9c:	e0bffd17 	ldw	r2,-12(fp)
    7ba0:	10800703 	ldbu	r2,28(r2)
    7ba4:	10803fcc 	andi	r2,r2,255
    7ba8:	10000e1e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bac:	e0bffd17 	ldw	r2,-12(fp)
    7bb0:	10800743 	ldbu	r2,29(r2)
    7bb4:	10803fcc 	andi	r2,r2,255
    7bb8:	10000a1e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bbc:	e0bffd17 	ldw	r2,-12(fp)
    7bc0:	10800783 	ldbu	r2,30(r2)
    7bc4:	10803fcc 	andi	r2,r2,255
    7bc8:	1000061e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bcc:	e0bffd17 	ldw	r2,-12(fp)
    7bd0:	108007c3 	ldbu	r2,31(r2)
    7bd4:	10803fcc 	andi	r2,r2,255
    7bd8:	1000021e 	bne	r2,zero,7be4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7bdc:	0005883a 	mov	r2,zero
    7be0:	00004906 	br	7d08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7be4:	e0bffd17 	ldw	r2,-12(fp)
    7be8:	10801703 	ldbu	r2,92(r2)
    7bec:	10803fcc 	andi	r2,r2,255
    7bf0:	e0fffd17 	ldw	r3,-12(fp)
    7bf4:	1885883a 	add	r2,r3,r2
    7bf8:	10800704 	addi	r2,r2,28
    7bfc:	10800003 	ldbu	r2,0(r2)
    7c00:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7c04:	e0bfff03 	ldbu	r2,-4(fp)
    7c08:	10000526 	beq	r2,zero,7c20 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7c0c:	e0bffe17 	ldw	r2,-8(fp)
    7c10:	10c00044 	addi	r3,r2,1
    7c14:	e0fffe15 	stw	r3,-8(fp)
    7c18:	e0fffb43 	ldbu	r3,-19(fp)
    7c1c:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7c20:	e0bffd17 	ldw	r2,-12(fp)
    7c24:	10801703 	ldbu	r2,92(r2)
    7c28:	10800044 	addi	r2,r2,1
    7c2c:	1007883a 	mov	r3,r2
    7c30:	e0bffd17 	ldw	r2,-12(fp)
    7c34:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7c38:	e0bffe17 	ldw	r2,-8(fp)
    7c3c:	10c00044 	addi	r3,r2,1
    7c40:	e0fffe15 	stw	r3,-8(fp)
    7c44:	e0fffd17 	ldw	r3,-12(fp)
    7c48:	18c01703 	ldbu	r3,92(r3)
    7c4c:	19000044 	addi	r4,r3,1
    7c50:	200b883a 	mov	r5,r4
    7c54:	e13ffd17 	ldw	r4,-12(fp)
    7c58:	21401705 	stb	r5,92(r4)
    7c5c:	18c03fcc 	andi	r3,r3,255
    7c60:	e13ffd17 	ldw	r4,-12(fp)
    7c64:	20c7883a 	add	r3,r4,r3
    7c68:	18c00704 	addi	r3,r3,28
    7c6c:	18c00003 	ldbu	r3,0(r3)
    7c70:	e0fffb85 	stb	r3,-18(fp)
    7c74:	e0fffb83 	ldbu	r3,-18(fp)
    7c78:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7c7c:	e0bffe17 	ldw	r2,-8(fp)
    7c80:	10c00044 	addi	r3,r2,1
    7c84:	e0fffe15 	stw	r3,-8(fp)
    7c88:	e0fffd17 	ldw	r3,-12(fp)
    7c8c:	18c01703 	ldbu	r3,92(r3)
    7c90:	19000044 	addi	r4,r3,1
    7c94:	200b883a 	mov	r5,r4
    7c98:	e13ffd17 	ldw	r4,-12(fp)
    7c9c:	21401705 	stb	r5,92(r4)
    7ca0:	18c03fcc 	andi	r3,r3,255
    7ca4:	e13ffd17 	ldw	r4,-12(fp)
    7ca8:	20c7883a 	add	r3,r4,r3
    7cac:	18c00704 	addi	r3,r3,28
    7cb0:	18c00003 	ldbu	r3,0(r3)
    7cb4:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7cb8:	e0bffe17 	ldw	r2,-8(fp)
    7cbc:	10c00044 	addi	r3,r2,1
    7cc0:	e0fffe15 	stw	r3,-8(fp)
    7cc4:	e0fffd17 	ldw	r3,-12(fp)
    7cc8:	18c01703 	ldbu	r3,92(r3)
    7ccc:	19000044 	addi	r4,r3,1
    7cd0:	200b883a 	mov	r5,r4
    7cd4:	e13ffd17 	ldw	r4,-12(fp)
    7cd8:	21401705 	stb	r5,92(r4)
    7cdc:	18c03fcc 	andi	r3,r3,255
    7ce0:	e13ffd17 	ldw	r4,-12(fp)
    7ce4:	20c7883a 	add	r3,r4,r3
    7ce8:	18c00704 	addi	r3,r3,28
    7cec:	18c00003 	ldbu	r3,0(r3)
    7cf0:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7cf4:	e0bffb43 	ldbu	r2,-19(fp)
    7cf8:	108003cc 	andi	r2,r2,15
    7cfc:	100b883a 	mov	r5,r2
    7d00:	e13ffd17 	ldw	r4,-12(fp)
    7d04:	0008d640 	call	8d64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7d08:	e037883a 	mov	sp,fp
    7d0c:	dfc00117 	ldw	ra,4(sp)
    7d10:	df000017 	ldw	fp,0(sp)
    7d14:	dec00204 	addi	sp,sp,8
    7d18:	f800283a 	ret

00007d1c <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7d1c:	defff804 	addi	sp,sp,-32
    7d20:	dfc00715 	stw	ra,28(sp)
    7d24:	df000615 	stw	fp,24(sp)
    7d28:	df000604 	addi	fp,sp,24
    7d2c:	e13ffd15 	stw	r4,-12(fp)
    7d30:	e17ffe15 	stw	r5,-8(fp)
    7d34:	3005883a 	mov	r2,r6
    7d38:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7d3c:	e0bffe17 	ldw	r2,-8(fp)
    7d40:	10800003 	ldbu	r2,0(r2)
    7d44:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7d48:	e0bffb03 	ldbu	r2,-20(fp)
    7d4c:	100b883a 	mov	r5,r2
    7d50:	e13ffd17 	ldw	r4,-12(fp)
    7d54:	0008d0c0 	call	8d0c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7d58:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7d5c:	e0bffb03 	ldbu	r2,-20(fp)
    7d60:	10803c18 	cmpnei	r2,r2,240
    7d64:	10000b1e 	bne	r2,zero,7d94 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7d68:	e17ffe17 	ldw	r5,-8(fp)
    7d6c:	e13ffd17 	ldw	r4,-12(fp)
    7d70:	0007edc0 	call	7edc <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7d74:	10bfffcc 	andi	r2,r2,65535
    7d78:	e0ffff03 	ldbu	r3,-4(fp)
    7d7c:	180f883a 	mov	r7,r3
    7d80:	100d883a 	mov	r6,r2
    7d84:	e17ffe17 	ldw	r5,-8(fp)
    7d88:	e13ffd17 	ldw	r4,-12(fp)
    7d8c:	0007f640 	call	7f64 <_ZN9USBH_MIDI9SendSysExEPhth>
    7d90:	00003406 	br	7e64 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7d94:	e0bfff03 	ldbu	r2,-4(fp)
    7d98:	1004913a 	slli	r2,r2,4
    7d9c:	1007883a 	mov	r3,r2
    7da0:	e0bffb43 	ldbu	r2,-19(fp)
    7da4:	1884b03a 	or	r2,r3,r2
    7da8:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7dac:	e0bffe17 	ldw	r2,-8(fp)
    7db0:	10800003 	ldbu	r2,0(r2)
    7db4:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7db8:	e0bffb43 	ldbu	r2,-19(fp)
    7dbc:	100b883a 	mov	r5,r2
    7dc0:	e13ffd17 	ldw	r4,-12(fp)
    7dc4:	0008d640 	call	8d64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7dc8:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7dcc:	e0bffb83 	ldbu	r2,-18(fp)
    7dd0:	10c000a0 	cmpeqi	r3,r2,2
    7dd4:	18000c1e 	bne	r3,zero,7e08 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7dd8:	10c000e0 	cmpeqi	r3,r2,3
    7ddc:	1800031e 	bne	r3,zero,7dec <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7de0:	10800060 	cmpeqi	r2,r2,1
    7de4:	10000d1e 	bne	r2,zero,7e1c <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7de8:	00000f06 	br	7e28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7dec:	e0bffe17 	ldw	r2,-8(fp)
    7df0:	10800043 	ldbu	r2,1(r2)
    7df4:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7df8:	e0bffe17 	ldw	r2,-8(fp)
    7dfc:	10800083 	ldbu	r2,2(r2)
    7e00:	e0bffc85 	stb	r2,-14(fp)
                break;
    7e04:	00000806 	br	7e28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7e08:	e0bffe17 	ldw	r2,-8(fp)
    7e0c:	10800043 	ldbu	r2,1(r2)
    7e10:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7e14:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e18:	00000306 	br	7e28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7e1c:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7e20:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e24:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	10c00217 	ldw	r3,8(r2)
    7e30:	e0bffd17 	ldw	r2,-12(fp)
    7e34:	10800303 	ldbu	r2,12(r2)
    7e38:	11003fcc 	andi	r4,r2,255
    7e3c:	e0bffd17 	ldw	r2,-12(fp)
    7e40:	10800643 	ldbu	r2,25(r2)
    7e44:	11403fcc 	andi	r5,r2,255
    7e48:	e0bffbc4 	addi	r2,fp,-17
    7e4c:	d8800015 	stw	r2,0(sp)
    7e50:	01c00104 	movi	r7,4
    7e54:	280d883a 	mov	r6,r5
    7e58:	200b883a 	mov	r5,r4
    7e5c:	1809883a 	mov	r4,r3
    7e60:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7e64:	e037883a 	mov	sp,fp
    7e68:	dfc00117 	ldw	ra,4(sp)
    7e6c:	df000017 	ldw	fp,0(sp)
    7e70:	dec00204 	addi	sp,sp,8
    7e74:	f800283a 	ret

00007e78 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7e78:	defffb04 	addi	sp,sp,-20
    7e7c:	dfc00415 	stw	ra,16(sp)
    7e80:	df000315 	stw	fp,12(sp)
    7e84:	df000304 	addi	fp,sp,12
    7e88:	e13ffd15 	stw	r4,-12(fp)
    7e8c:	2807883a 	mov	r3,r5
    7e90:	3005883a 	mov	r2,r6
    7e94:	e0fffe05 	stb	r3,-8(fp)
    7e98:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7e9c:	e0bfff03 	ldbu	r2,-4(fp)
    7ea0:	1000051e 	bne	r2,zero,7eb8 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7ea4:	e0bffe03 	ldbu	r2,-8(fp)
    7ea8:	100b883a 	mov	r5,r2
    7eac:	e13ffd17 	ldw	r4,-12(fp)
    7eb0:	0008d0c0 	call	8d0c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7eb4:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7eb8:	e0bfff03 	ldbu	r2,-4(fp)
    7ebc:	100b883a 	mov	r5,r2
    7ec0:	e13ffd17 	ldw	r4,-12(fp)
    7ec4:	0008d640 	call	8d64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7ec8:	e037883a 	mov	sp,fp
    7ecc:	dfc00117 	ldw	ra,4(sp)
    7ed0:	df000017 	ldw	fp,0(sp)
    7ed4:	dec00204 	addi	sp,sp,8
    7ed8:	f800283a 	ret

00007edc <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7edc:	defffc04 	addi	sp,sp,-16
    7ee0:	df000315 	stw	fp,12(sp)
    7ee4:	df000304 	addi	fp,sp,12
    7ee8:	e13ffe15 	stw	r4,-8(fp)
    7eec:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7ef0:	00800044 	movi	r2,1
    7ef4:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7ef8:	e0bfff17 	ldw	r2,-4(fp)
    7efc:	10800003 	ldbu	r2,0(r2)
    7f00:	10803fcc 	andi	r2,r2,255
    7f04:	10803c20 	cmpeqi	r2,r2,240
    7f08:	1000021e 	bne	r2,zero,7f14 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7f0c:	0005883a 	mov	r2,zero
    7f10:	00001006 	br	7f54 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7f14:	e0bfff17 	ldw	r2,-4(fp)
    7f18:	10800003 	ldbu	r2,0(r2)
    7f1c:	10803fcc 	andi	r2,r2,255
    7f20:	10803de0 	cmpeqi	r2,r2,247
    7f24:	10000a1e 	bne	r2,zero,7f50 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7f28:	e0bfff17 	ldw	r2,-4(fp)
    7f2c:	10800044 	addi	r2,r2,1
    7f30:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7f34:	e0bffd0b 	ldhu	r2,-12(fp)
    7f38:	10800044 	addi	r2,r2,1
    7f3c:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7f40:	e0bffd0b 	ldhu	r2,-12(fp)
    7f44:	10804070 	cmpltui	r2,r2,257
    7f48:	103ff21e 	bne	r2,zero,7f14 <__alt_data_end+0xfc007f14>
                        c = 0;
    7f4c:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7f50:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7f54:	e037883a 	mov	sp,fp
    7f58:	df000017 	ldw	fp,0(sp)
    7f5c:	dec00104 	addi	sp,sp,4
    7f60:	f800283a 	ret

00007f64 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7f64:	deffe704 	addi	sp,sp,-100
    7f68:	dfc01815 	stw	ra,96(sp)
    7f6c:	df001715 	stw	fp,92(sp)
    7f70:	df001704 	addi	fp,sp,92
    7f74:	e13ffc15 	stw	r4,-16(fp)
    7f78:	e17ffd15 	stw	r5,-12(fp)
    7f7c:	3007883a 	mov	r3,r6
    7f80:	3805883a 	mov	r2,r7
    7f84:	e0fffe0d 	sth	r3,-8(fp)
    7f88:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7f8c:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7f90:	e0bffe0b 	ldhu	r2,-8(fp)
    7f94:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7f98:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7f9c:	e0bffc17 	ldw	r2,-16(fp)
    7fa0:	108005c3 	ldbu	r2,23(r2)
    7fa4:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7fa8:	e0bffe0b 	ldhu	r2,-8(fp)
    7fac:	01402004 	movi	r5,128
    7fb0:	1009883a 	mov	r4,r2
    7fb4:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7fb8:	e0bfea8b 	ldhu	r2,-86(fp)
    7fbc:	1000b026 	beq	r2,zero,8280 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7fc0:	e0bfeb03 	ldbu	r2,-84(fp)
    7fc4:	e0ffff03 	ldbu	r3,-4(fp)
    7fc8:	1806913a 	slli	r3,r3,4
    7fcc:	18c00114 	ori	r3,r3,4
    7fd0:	1809883a 	mov	r4,r3
    7fd4:	e0ffeb84 	addi	r3,fp,-82
    7fd8:	1885883a 	add	r2,r3,r2
    7fdc:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    7fe0:	e0bfea8b 	ldhu	r2,-86(fp)
    7fe4:	10c000a0 	cmpeqi	r3,r2,2
    7fe8:	18002a1e 	bne	r3,zero,8094 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    7fec:	10c000e0 	cmpeqi	r3,r2,3
    7ff0:	1800521e 	bne	r3,zero,813c <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    7ff4:	10800060 	cmpeqi	r2,r2,1
    7ff8:	10005826 	beq	r2,zero,815c <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    7ffc:	e0bfeb03 	ldbu	r2,-84(fp)
    8000:	10c00044 	addi	r3,r2,1
    8004:	e0ffeb05 	stb	r3,-84(fp)
    8008:	10803fcc 	andi	r2,r2,255
    800c:	e0ffff03 	ldbu	r3,-4(fp)
    8010:	1806913a 	slli	r3,r3,4
    8014:	18c00154 	ori	r3,r3,5
    8018:	1809883a 	mov	r4,r3
    801c:	e0ffeb84 	addi	r3,fp,-82
    8020:	1885883a 	add	r2,r3,r2
    8024:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8028:	e0bfeb03 	ldbu	r2,-84(fp)
    802c:	10c00044 	addi	r3,r2,1
    8030:	e0ffeb05 	stb	r3,-84(fp)
    8034:	11003fcc 	andi	r4,r2,255
    8038:	e0bffd17 	ldw	r2,-12(fp)
    803c:	10c00044 	addi	r3,r2,1
    8040:	e0fffd15 	stw	r3,-12(fp)
    8044:	10c00003 	ldbu	r3,0(r2)
    8048:	e0bfeb84 	addi	r2,fp,-82
    804c:	1105883a 	add	r2,r2,r4
    8050:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8054:	e0bfeb03 	ldbu	r2,-84(fp)
    8058:	10c00044 	addi	r3,r2,1
    805c:	e0ffeb05 	stb	r3,-84(fp)
    8060:	10803fcc 	andi	r2,r2,255
    8064:	e0ffeb84 	addi	r3,fp,-82
    8068:	1885883a 	add	r2,r3,r2
    806c:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    8070:	e0bfeb03 	ldbu	r2,-84(fp)
    8074:	10c00044 	addi	r3,r2,1
    8078:	e0ffeb05 	stb	r3,-84(fp)
    807c:	10803fcc 	andi	r2,r2,255
    8080:	e0ffeb84 	addi	r3,fp,-82
    8084:	1885883a 	add	r2,r3,r2
    8088:	10000005 	stb	zero,0(r2)
                        n = 0;
    808c:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8090:	00005a06 	br	81fc <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    8094:	e0bfeb03 	ldbu	r2,-84(fp)
    8098:	10c00044 	addi	r3,r2,1
    809c:	e0ffeb05 	stb	r3,-84(fp)
    80a0:	10803fcc 	andi	r2,r2,255
    80a4:	e0ffff03 	ldbu	r3,-4(fp)
    80a8:	1806913a 	slli	r3,r3,4
    80ac:	18c00194 	ori	r3,r3,6
    80b0:	1809883a 	mov	r4,r3
    80b4:	e0ffeb84 	addi	r3,fp,-82
    80b8:	1885883a 	add	r2,r3,r2
    80bc:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    80c0:	e0bfeb03 	ldbu	r2,-84(fp)
    80c4:	10c00044 	addi	r3,r2,1
    80c8:	e0ffeb05 	stb	r3,-84(fp)
    80cc:	11003fcc 	andi	r4,r2,255
    80d0:	e0bffd17 	ldw	r2,-12(fp)
    80d4:	10c00044 	addi	r3,r2,1
    80d8:	e0fffd15 	stw	r3,-12(fp)
    80dc:	10c00003 	ldbu	r3,0(r2)
    80e0:	e0bfeb84 	addi	r2,fp,-82
    80e4:	1105883a 	add	r2,r2,r4
    80e8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    80ec:	e0bfeb03 	ldbu	r2,-84(fp)
    80f0:	10c00044 	addi	r3,r2,1
    80f4:	e0ffeb05 	stb	r3,-84(fp)
    80f8:	11003fcc 	andi	r4,r2,255
    80fc:	e0bffd17 	ldw	r2,-12(fp)
    8100:	10c00044 	addi	r3,r2,1
    8104:	e0fffd15 	stw	r3,-12(fp)
    8108:	10c00003 	ldbu	r3,0(r2)
    810c:	e0bfeb84 	addi	r2,fp,-82
    8110:	1105883a 	add	r2,r2,r4
    8114:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8118:	e0bfeb03 	ldbu	r2,-84(fp)
    811c:	10c00044 	addi	r3,r2,1
    8120:	e0ffeb05 	stb	r3,-84(fp)
    8124:	10803fcc 	andi	r2,r2,255
    8128:	e0ffeb84 	addi	r3,fp,-82
    812c:	1885883a 	add	r2,r3,r2
    8130:	10000005 	stb	zero,0(r2)
                        n = 0;
    8134:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8138:	00003006 	br	81fc <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    813c:	e0bfeb03 	ldbu	r2,-84(fp)
    8140:	e0ffff03 	ldbu	r3,-4(fp)
    8144:	1806913a 	slli	r3,r3,4
    8148:	18c001d4 	ori	r3,r3,7
    814c:	1809883a 	mov	r4,r3
    8150:	e0ffeb84 	addi	r3,fp,-82
    8154:	1885883a 	add	r2,r3,r2
    8158:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    815c:	e0bfeb03 	ldbu	r2,-84(fp)
    8160:	10800044 	addi	r2,r2,1
    8164:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    8168:	e0bfeb03 	ldbu	r2,-84(fp)
    816c:	10c00044 	addi	r3,r2,1
    8170:	e0ffeb05 	stb	r3,-84(fp)
    8174:	11003fcc 	andi	r4,r2,255
    8178:	e0bffd17 	ldw	r2,-12(fp)
    817c:	10c00044 	addi	r3,r2,1
    8180:	e0fffd15 	stw	r3,-12(fp)
    8184:	10c00003 	ldbu	r3,0(r2)
    8188:	e0bfeb84 	addi	r2,fp,-82
    818c:	1105883a 	add	r2,r2,r4
    8190:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8194:	e0bfeb03 	ldbu	r2,-84(fp)
    8198:	10c00044 	addi	r3,r2,1
    819c:	e0ffeb05 	stb	r3,-84(fp)
    81a0:	11003fcc 	andi	r4,r2,255
    81a4:	e0bffd17 	ldw	r2,-12(fp)
    81a8:	10c00044 	addi	r3,r2,1
    81ac:	e0fffd15 	stw	r3,-12(fp)
    81b0:	10c00003 	ldbu	r3,0(r2)
    81b4:	e0bfeb84 	addi	r2,fp,-82
    81b8:	1105883a 	add	r2,r2,r4
    81bc:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    81c0:	e0bfeb03 	ldbu	r2,-84(fp)
    81c4:	10c00044 	addi	r3,r2,1
    81c8:	e0ffeb05 	stb	r3,-84(fp)
    81cc:	11003fcc 	andi	r4,r2,255
    81d0:	e0bffd17 	ldw	r2,-12(fp)
    81d4:	10c00044 	addi	r3,r2,1
    81d8:	e0fffd15 	stw	r3,-12(fp)
    81dc:	10c00003 	ldbu	r3,0(r2)
    81e0:	e0bfeb84 	addi	r2,fp,-82
    81e4:	1105883a 	add	r2,r2,r4
    81e8:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    81ec:	e0bfea8b 	ldhu	r2,-86(fp)
    81f0:	10bfff44 	addi	r2,r2,-3
    81f4:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    81f8:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    81fc:	e0ffeb03 	ldbu	r3,-84(fp)
    8200:	e0bfeb43 	ldbu	r2,-83(fp)
    8204:	1880022e 	bgeu	r3,r2,8210 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8208:	e0bfea8b 	ldhu	r2,-86(fp)
    820c:	103f6a1e 	bne	r2,zero,7fb8 <__alt_data_end+0xfc007fb8>
                        USBTRACE2(" wptr:\t", wptr);
    8210:	e0bfeb03 	ldbu	r2,-84(fp)
    8214:	01402004 	movi	r5,128
    8218:	1009883a 	mov	r4,r2
    821c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8220:	e0bffc17 	ldw	r2,-16(fp)
    8224:	10c00217 	ldw	r3,8(r2)
    8228:	e0bffc17 	ldw	r2,-16(fp)
    822c:	10800303 	ldbu	r2,12(r2)
    8230:	11003fcc 	andi	r4,r2,255
    8234:	e0bffc17 	ldw	r2,-16(fp)
    8238:	10800643 	ldbu	r2,25(r2)
    823c:	11403fcc 	andi	r5,r2,255
    8240:	e1bfeb03 	ldbu	r6,-84(fp)
    8244:	e0bfeb84 	addi	r2,fp,-82
    8248:	d8800015 	stw	r2,0(sp)
    824c:	300f883a 	mov	r7,r6
    8250:	280d883a 	mov	r6,r5
    8254:	200b883a 	mov	r5,r4
    8258:	1809883a 	mov	r4,r3
    825c:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8260:	e0bfea05 	stb	r2,-88(fp)
    8264:	e0bfea03 	ldbu	r2,-88(fp)
    8268:	1004c03a 	cmpne	r2,r2,zero
    826c:	10803fcc 	andi	r2,r2,255
    8270:	1000021e 	bne	r2,zero,827c <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    8274:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8278:	003f4f06 	br	7fb8 <__alt_data_end+0xfc007fb8>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    827c:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    8280:	e0bfea03 	ldbu	r2,-88(fp)
}
    8284:	e037883a 	mov	sp,fp
    8288:	dfc00117 	ldw	ra,4(sp)
    828c:	df000017 	ldw	fp,0(sp)
    8290:	dec00204 	addi	sp,sp,8
    8294:	f800283a 	ret

00008298 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    8298:	defffb04 	addi	sp,sp,-20
    829c:	df000415 	stw	fp,16(sp)
    82a0:	df000404 	addi	fp,sp,16
    82a4:	e13ffd15 	stw	r4,-12(fp)
    82a8:	e17ffe15 	stw	r5,-8(fp)
    82ac:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    82b0:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    82b4:	e0bffe17 	ldw	r2,-8(fp)
    82b8:	10800003 	ldbu	r2,0(r2)
    82bc:	108003cc 	andi	r2,r2,15
    82c0:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    82c4:	e0bffc43 	ldbu	r2,-15(fp)
    82c8:	1080030c 	andi	r2,r2,12
    82cc:	10800120 	cmpeqi	r2,r2,4
    82d0:	1000021e 	bne	r2,zero,82dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    82d4:	e0bffc03 	ldbu	r2,-16(fp)
    82d8:	00003b06 	br	83c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    82dc:	e0bffc43 	ldbu	r2,-15(fp)
    82e0:	10c00160 	cmpeqi	r3,r2,5
    82e4:	18002e1e 	bne	r3,zero,83a0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    82e8:	10c00188 	cmpgei	r3,r2,6
    82ec:	1800031e 	bne	r3,zero,82fc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    82f0:	10800120 	cmpeqi	r2,r2,4
    82f4:	1000061e 	bne	r2,zero,8310 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    82f8:	00003206 	br	83c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    82fc:	10c001a0 	cmpeqi	r3,r2,6
    8300:	1800181e 	bne	r3,zero,8364 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8304:	108001e0 	cmpeqi	r2,r2,7
    8308:	1000011e 	bne	r2,zero,8310 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    830c:	00002d06 	br	83c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8310:	e0bfff17 	ldw	r2,-4(fp)
    8314:	10c00044 	addi	r3,r2,1
    8318:	e0ffff15 	stw	r3,-4(fp)
    831c:	e0fffe17 	ldw	r3,-8(fp)
    8320:	18c00043 	ldbu	r3,1(r3)
    8324:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	10c00044 	addi	r3,r2,1
    8330:	e0ffff15 	stw	r3,-4(fp)
    8334:	e0fffe17 	ldw	r3,-8(fp)
    8338:	18c00083 	ldbu	r3,2(r3)
    833c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8340:	e0bfff17 	ldw	r2,-4(fp)
    8344:	10c00044 	addi	r3,r2,1
    8348:	e0ffff15 	stw	r3,-4(fp)
    834c:	e0fffe17 	ldw	r3,-8(fp)
    8350:	18c000c3 	ldbu	r3,3(r3)
    8354:	10c00005 	stb	r3,0(r2)
                rc = 3;
    8358:	008000c4 	movi	r2,3
    835c:	e0bffc05 	stb	r2,-16(fp)
                break;
    8360:	00001806 	br	83c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    8364:	e0bfff17 	ldw	r2,-4(fp)
    8368:	10c00044 	addi	r3,r2,1
    836c:	e0ffff15 	stw	r3,-4(fp)
    8370:	e0fffe17 	ldw	r3,-8(fp)
    8374:	18c00043 	ldbu	r3,1(r3)
    8378:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    837c:	e0bfff17 	ldw	r2,-4(fp)
    8380:	10c00044 	addi	r3,r2,1
    8384:	e0ffff15 	stw	r3,-4(fp)
    8388:	e0fffe17 	ldw	r3,-8(fp)
    838c:	18c00083 	ldbu	r3,2(r3)
    8390:	10c00005 	stb	r3,0(r2)
                rc = 2;
    8394:	00800084 	movi	r2,2
    8398:	e0bffc05 	stb	r2,-16(fp)
                break;
    839c:	00000906 	br	83c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    83a0:	e0bfff17 	ldw	r2,-4(fp)
    83a4:	10c00044 	addi	r3,r2,1
    83a8:	e0ffff15 	stw	r3,-4(fp)
    83ac:	e0fffe17 	ldw	r3,-8(fp)
    83b0:	18c00043 	ldbu	r3,1(r3)
    83b4:	10c00005 	stb	r3,0(r2)
                rc = 1;
    83b8:	00800044 	movi	r2,1
    83bc:	e0bffc05 	stb	r2,-16(fp)
                break;
    83c0:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    83c4:	e0bffc03 	ldbu	r2,-16(fp)
}
    83c8:	e037883a 	mov	sp,fp
    83cc:	df000017 	ldw	fp,0(sp)
    83d0:	dec00104 	addi	sp,sp,4
    83d4:	f800283a 	ret

000083d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    83d8:	defffb04 	addi	sp,sp,-20
    83dc:	dfc00415 	stw	ra,16(sp)
    83e0:	df000315 	stw	fp,12(sp)
    83e4:	df000304 	addi	fp,sp,12
    83e8:	e13ffd15 	stw	r4,-12(fp)
    83ec:	e17ffe15 	stw	r5,-8(fp)
    83f0:	3005883a 	mov	r2,r6
    83f4:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    83f8:	e0bffd17 	ldw	r2,-12(fp)
    83fc:	1009883a 	mov	r4,r2
    8400:	0004aec0 	call	4aec <_ZN13USBReadParserC1Ev>
    8404:	008000b4 	movhi	r2,2
    8408:	1098b104 	addi	r2,r2,25284
    840c:	e0fffd17 	ldw	r3,-12(fp)
    8410:	18800015 	stw	r2,0(r3)
    8414:	e0bffd17 	ldw	r2,-12(fp)
    8418:	e0fffe17 	ldw	r3,-8(fp)
    841c:	10c00115 	stw	r3,4(r2)
    8420:	e0bffd17 	ldw	r2,-12(fp)
    8424:	10800204 	addi	r2,r2,8
    8428:	1009883a 	mov	r4,r2
    842c:	00043dc0 	call	43dc <_ZN16MultiValueBufferC1Ev>
    8430:	e0bffd17 	ldw	r2,-12(fp)
    8434:	10800404 	addi	r2,r2,16
    8438:	1009883a 	mov	r4,r2
    843c:	000443c0 	call	443c <_ZN20MultiByteValueParserC1Ev>
    8440:	e0bffd17 	ldw	r2,-12(fp)
    8444:	10800604 	addi	r2,r2,24
    8448:	1009883a 	mov	r4,r2
    844c:	00044f80 	call	44f8 <_ZN11ByteSkipperC1Ev>
    8450:	e0bffd17 	ldw	r2,-12(fp)
    8454:	10000c05 	stb	zero,48(r2)
    8458:	e0bffd17 	ldw	r2,-12(fp)
    845c:	10000c45 	stb	zero,49(r2)
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	10000c85 	stb	zero,50(r2)
    8468:	e0bffd17 	ldw	r2,-12(fp)
    846c:	10000cc5 	stb	zero,51(r2)
    8470:	e0bffd17 	ldw	r2,-12(fp)
    8474:	e0ffff03 	ldbu	r3,-4(fp)
    8478:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    847c:	e0bffd17 	ldw	r2,-12(fp)
    8480:	10c00804 	addi	r3,r2,32
    8484:	e0bffd17 	ldw	r2,-12(fp)
    8488:	19803fcc 	andi	r6,r3,255
    848c:	11000243 	ldbu	r4,9(r2)
    8490:	2008703a 	and	r4,r4,zero
    8494:	200b883a 	mov	r5,r4
    8498:	3009883a 	mov	r4,r6
    849c:	2908b03a 	or	r4,r5,r4
    84a0:	11000245 	stb	r4,9(r2)
    84a4:	1808d23a 	srli	r4,r3,8
    84a8:	21803fcc 	andi	r6,r4,255
    84ac:	11000283 	ldbu	r4,10(r2)
    84b0:	2008703a 	and	r4,r4,zero
    84b4:	200b883a 	mov	r5,r4
    84b8:	3009883a 	mov	r4,r6
    84bc:	2908b03a 	or	r4,r5,r4
    84c0:	11000285 	stb	r4,10(r2)
    84c4:	1808d43a 	srli	r4,r3,16
    84c8:	21803fcc 	andi	r6,r4,255
    84cc:	110002c3 	ldbu	r4,11(r2)
    84d0:	2008703a 	and	r4,r4,zero
    84d4:	200b883a 	mov	r5,r4
    84d8:	3009883a 	mov	r4,r6
    84dc:	2908b03a 	or	r4,r5,r4
    84e0:	110002c5 	stb	r4,11(r2)
    84e4:	180ad63a 	srli	r5,r3,24
    84e8:	10c00303 	ldbu	r3,12(r2)
    84ec:	1806703a 	and	r3,r3,zero
    84f0:	1809883a 	mov	r4,r3
    84f4:	2807883a 	mov	r3,r5
    84f8:	20c6b03a 	or	r3,r4,r3
    84fc:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8500:	e0bffd17 	ldw	r2,-12(fp)
    8504:	10c00404 	addi	r3,r2,16
    8508:	e0bffd17 	ldw	r2,-12(fp)
    850c:	10800204 	addi	r2,r2,8
    8510:	100b883a 	mov	r5,r2
    8514:	1809883a 	mov	r4,r3
    8518:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    851c:	e0bffd17 	ldw	r2,-12(fp)
    8520:	10c00604 	addi	r3,r2,24
    8524:	e0bffd17 	ldw	r2,-12(fp)
    8528:	10800204 	addi	r2,r2,8
    852c:	100b883a 	mov	r5,r2
    8530:	1809883a 	mov	r4,r3
    8534:	00045340 	call	4534 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8538:	0001883a 	nop
    853c:	e037883a 	mov	sp,fp
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret

00008550 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8550:	defff804 	addi	sp,sp,-32
    8554:	dfc00715 	stw	ra,28(sp)
    8558:	df000615 	stw	fp,24(sp)
    855c:	df000604 	addi	fp,sp,24
    8560:	e13ffc15 	stw	r4,-16(fp)
    8564:	2805883a 	mov	r2,r5
    8568:	e1bffe15 	stw	r6,-8(fp)
    856c:	e1ffff15 	stw	r7,-4(fp)
    8570:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    8574:	e0bffd0b 	ldhu	r2,-12(fp)
    8578:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    857c:	e0bffe17 	ldw	r2,-8(fp)
    8580:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    8584:	e0bffa0b 	ldhu	r2,-24(fp)
    8588:	10bfffcc 	andi	r2,r2,65535
    858c:	10000a26 	beq	r2,zero,85b8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    8590:	e0bffb04 	addi	r2,fp,-20
    8594:	e1bffa04 	addi	r6,fp,-24
    8598:	100b883a 	mov	r5,r2
    859c:	e13ffc17 	ldw	r4,-16(fp)
    85a0:	00085cc0 	call	85cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    85a4:	1080005c 	xori	r2,r2,1
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	1000011e 	bne	r2,zero,85b4 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    85b0:	003ff406 	br	8584 <__alt_data_end+0xfc008584>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    85b4:	0001883a 	nop
}
    85b8:	e037883a 	mov	sp,fp
    85bc:	dfc00117 	ldw	ra,4(sp)
    85c0:	df000017 	ldw	fp,0(sp)
    85c4:	dec00204 	addi	sp,sp,8
    85c8:	f800283a 	ret

000085cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    85cc:	defff604 	addi	sp,sp,-40
    85d0:	dfc00915 	stw	ra,36(sp)
    85d4:	df000815 	stw	fp,32(sp)
    85d8:	df000804 	addi	fp,sp,32
    85dc:	e13ffc15 	stw	r4,-16(fp)
    85e0:	e17ffd15 	stw	r5,-12(fp)
    85e4:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    85e8:	e0bffc17 	ldw	r2,-16(fp)
    85ec:	10800804 	addi	r2,r2,32
    85f0:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    85f4:	e0bffc17 	ldw	r2,-16(fp)
    85f8:	10800804 	addi	r2,r2,32
    85fc:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8600:	e0bffc17 	ldw	r2,-16(fp)
    8604:	10800c03 	ldbu	r2,48(r2)
    8608:	10803fcc 	andi	r2,r2,255
    860c:	10c00168 	cmpgeui	r3,r2,5
    8610:	1801411e 	bne	r3,zero,8b18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8614:	100690ba 	slli	r3,r2,2
    8618:	00800074 	movhi	r2,1
    861c:	10a18b04 	addi	r2,r2,-31188
    8620:	1885883a 	add	r2,r3,r2
    8624:	10800017 	ldw	r2,0(r2)
    8628:	1000683a 	jmp	r2
    862c:	00008640 	call	864 <_ZN3USB14getEpInfoEntryEhh+0x84>
    8630:	00008674 	movhi	zero,537
    8634:	000086fc 	xorhi	zero,zero,539
    8638:	00008790 	cmplti	zero,zero,542
    863c:	000087fc 	xorhi	zero,zero,543
                case 0:
                        theBuffer.valueSize = 2;
    8640:	e0bffc17 	ldw	r2,-16(fp)
    8644:	00c00084 	movi	r3,2
    8648:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    864c:	e0bffc17 	ldw	r2,-16(fp)
    8650:	10c00404 	addi	r3,r2,16
    8654:	e0bffc17 	ldw	r2,-16(fp)
    8658:	10800204 	addi	r2,r2,8
    865c:	100b883a 	mov	r5,r2
    8660:	1809883a 	mov	r4,r3
    8664:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8668:	e0bffc17 	ldw	r2,-16(fp)
    866c:	00c00044 	movi	r3,1
    8670:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    8674:	e0bffc17 	ldw	r2,-16(fp)
    8678:	10800404 	addi	r2,r2,16
    867c:	e1bffe17 	ldw	r6,-8(fp)
    8680:	e17ffd17 	ldw	r5,-12(fp)
    8684:	1009883a 	mov	r4,r2
    8688:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    868c:	1080005c 	xori	r2,r2,1
    8690:	10803fcc 	andi	r2,r2,255
    8694:	10000226 	beq	r2,zero,86a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8698:	0005883a 	mov	r2,zero
    869c:	00011f06 	br	8b1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    86a0:	e0bffc17 	ldw	r2,-16(fp)
    86a4:	10c00217 	ldw	r3,8(r2)
    86a8:	1806d23a 	srli	r3,r3,8
    86ac:	10800317 	ldw	r2,12(r2)
    86b0:	10803fcc 	andi	r2,r2,255
    86b4:	1004963a 	slli	r2,r2,24
    86b8:	10c4b03a 	or	r2,r2,r3
    86bc:	10c00003 	ldbu	r3,0(r2)
    86c0:	e0bffc17 	ldw	r2,-16(fp)
    86c4:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    86c8:	e0bffc17 	ldw	r2,-16(fp)
    86cc:	10c00217 	ldw	r3,8(r2)
    86d0:	1806d23a 	srli	r3,r3,8
    86d4:	10800317 	ldw	r2,12(r2)
    86d8:	10803fcc 	andi	r2,r2,255
    86dc:	1004963a 	slli	r2,r2,24
    86e0:	10c4b03a 	or	r2,r2,r3
    86e4:	10c00043 	ldbu	r3,1(r2)
    86e8:	e0bffc17 	ldw	r2,-16(fp)
    86ec:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    86f0:	e0bffc17 	ldw	r2,-16(fp)
    86f4:	00c00084 	movi	r3,2
    86f8:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    86fc:	e0bffc17 	ldw	r2,-16(fp)
    8700:	10800804 	addi	r2,r2,32
    8704:	10c00084 	addi	r3,r2,2
    8708:	e0bffc17 	ldw	r2,-16(fp)
    870c:	19803fcc 	andi	r6,r3,255
    8710:	11000243 	ldbu	r4,9(r2)
    8714:	2008703a 	and	r4,r4,zero
    8718:	200b883a 	mov	r5,r4
    871c:	3009883a 	mov	r4,r6
    8720:	2908b03a 	or	r4,r5,r4
    8724:	11000245 	stb	r4,9(r2)
    8728:	1808d23a 	srli	r4,r3,8
    872c:	21803fcc 	andi	r6,r4,255
    8730:	11000283 	ldbu	r4,10(r2)
    8734:	2008703a 	and	r4,r4,zero
    8738:	200b883a 	mov	r5,r4
    873c:	3009883a 	mov	r4,r6
    8740:	2908b03a 	or	r4,r5,r4
    8744:	11000285 	stb	r4,10(r2)
    8748:	1808d43a 	srli	r4,r3,16
    874c:	21803fcc 	andi	r6,r4,255
    8750:	110002c3 	ldbu	r4,11(r2)
    8754:	2008703a 	and	r4,r4,zero
    8758:	200b883a 	mov	r5,r4
    875c:	3009883a 	mov	r4,r6
    8760:	2908b03a 	or	r4,r5,r4
    8764:	110002c5 	stb	r4,11(r2)
    8768:	180ad63a 	srli	r5,r3,24
    876c:	10c00303 	ldbu	r3,12(r2)
    8770:	1806703a 	and	r3,r3,zero
    8774:	1809883a 	mov	r4,r3
    8778:	2807883a 	mov	r3,r5
    877c:	20c6b03a 	or	r3,r4,r3
    8780:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8784:	e0bffc17 	ldw	r2,-16(fp)
    8788:	00c000c4 	movi	r3,3
    878c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8790:	e0bffc17 	ldw	r2,-16(fp)
    8794:	10800c83 	ldbu	r2,50(r2)
    8798:	10803fcc 	andi	r2,r2,255
    879c:	10c00120 	cmpeqi	r3,r2,4
    87a0:	1800021e 	bne	r3,zero,87ac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    87a4:	10800148 	cmpgei	r2,r2,5
    87a8:	00000306 	br	87b8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    87ac:	e0bffc17 	ldw	r2,-16(fp)
    87b0:	10000d45 	stb	zero,53(r2)
                                        break;
    87b4:	00000106 	br	87bc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    87b8:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    87bc:	e0bffc17 	ldw	r2,-16(fp)
    87c0:	10800c43 	ldbu	r2,49(r2)
    87c4:	10bfff84 	addi	r2,r2,-2
    87c8:	1007883a 	mov	r3,r2
    87cc:	e0bffc17 	ldw	r2,-16(fp)
    87d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    87d4:	e0bffc17 	ldw	r2,-16(fp)
    87d8:	10c00404 	addi	r3,r2,16
    87dc:	e0bffc17 	ldw	r2,-16(fp)
    87e0:	10800204 	addi	r2,r2,8
    87e4:	100b883a 	mov	r5,r2
    87e8:	1809883a 	mov	r4,r3
    87ec:	00044780 	call	4478 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    87f0:	e0bffc17 	ldw	r2,-16(fp)
    87f4:	00c00104 	movi	r3,4
    87f8:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    87fc:	e0bffc17 	ldw	r2,-16(fp)
    8800:	10800c83 	ldbu	r2,50(r2)
    8804:	10803fcc 	andi	r2,r2,255
    8808:	10c00120 	cmpeqi	r3,r2,4
    880c:	1800141e 	bne	r3,zero,8860 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8810:	10c00160 	cmpeqi	r3,r2,5
    8814:	18005a1e 	bne	r3,zero,8980 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8818:	108000a0 	cmpeqi	r2,r2,2
    881c:	10008526 	beq	r2,zero,8a34 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8820:	e0bffc17 	ldw	r2,-16(fp)
    8824:	10800404 	addi	r2,r2,16
    8828:	e1bffe17 	ldw	r6,-8(fp)
    882c:	e17ffd17 	ldw	r5,-12(fp)
    8830:	1009883a 	mov	r4,r2
    8834:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8838:	1080005c 	xori	r2,r2,1
    883c:	10803fcc 	andi	r2,r2,255
    8840:	10000226 	beq	r2,zero,884c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8844:	0005883a 	mov	r2,zero
    8848:	0000b406 	br	8b1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    884c:	e0bffa17 	ldw	r2,-24(fp)
    8850:	10c00143 	ldbu	r3,5(r2)
    8854:	e0bffc17 	ldw	r2,-16(fp)
    8858:	10c00d85 	stb	r3,54(r2)
                                        break;
    885c:	00008b06 	br	8a8c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8860:	e0bffc17 	ldw	r2,-16(fp)
    8864:	10800404 	addi	r2,r2,16
    8868:	e1bffe17 	ldw	r6,-8(fp)
    886c:	e17ffd17 	ldw	r5,-12(fp)
    8870:	1009883a 	mov	r4,r2
    8874:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8878:	1080005c 	xori	r2,r2,1
    887c:	10803fcc 	andi	r2,r2,255
    8880:	10000226 	beq	r2,zero,888c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8884:	0005883a 	mov	r2,zero
    8888:	0000a406 	br	8b1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    888c:	e0bffb17 	ldw	r2,-20(fp)
    8890:	10800083 	ldbu	r2,2(r2)
    8894:	10803fcc 	andi	r2,r2,255
    8898:	01402004 	movi	r5,128
    889c:	1009883a 	mov	r4,r2
    88a0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    88a4:	e0bffb17 	ldw	r2,-20(fp)
    88a8:	108000c3 	ldbu	r2,3(r2)
    88ac:	10803fcc 	andi	r2,r2,255
    88b0:	01402004 	movi	r5,128
    88b4:	1009883a 	mov	r4,r2
    88b8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    88bc:	e0bffb17 	ldw	r2,-20(fp)
    88c0:	10800103 	ldbu	r2,4(r2)
    88c4:	10803fcc 	andi	r2,r2,255
    88c8:	01402004 	movi	r5,128
    88cc:	1009883a 	mov	r4,r2
    88d0:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    88d4:	e0bffb17 	ldw	r2,-20(fp)
    88d8:	10800143 	ldbu	r2,5(r2)
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	01402004 	movi	r5,128
    88e4:	1009883a 	mov	r4,r2
    88e8:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    88ec:	e0bffb17 	ldw	r2,-20(fp)
    88f0:	10800183 	ldbu	r2,6(r2)
    88f4:	10803fcc 	andi	r2,r2,255
    88f8:	01402004 	movi	r5,128
    88fc:	1009883a 	mov	r4,r2
    8900:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8904:	e0bffb17 	ldw	r2,-20(fp)
    8908:	108001c3 	ldbu	r2,7(r2)
    890c:	10803fcc 	andi	r2,r2,255
    8910:	01402004 	movi	r5,128
    8914:	1009883a 	mov	r4,r2
    8918:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    891c:	e0bffc17 	ldw	r2,-16(fp)
    8920:	10800d03 	ldbu	r2,52(r2)
    8924:	10803fcc 	andi	r2,r2,255
    8928:	10000a26 	beq	r2,zero,8954 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    892c:	e0bffb17 	ldw	r2,-20(fp)
    8930:	10800143 	ldbu	r2,5(r2)
    8934:	10803fcc 	andi	r2,r2,255
    8938:	10800058 	cmpnei	r2,r2,1
    893c:	10004e1e 	bne	r2,zero,8a78 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8940:	e0bffb17 	ldw	r2,-20(fp)
    8944:	10800183 	ldbu	r2,6(r2)
    8948:	10803fcc 	andi	r2,r2,255
    894c:	108000d8 	cmpnei	r2,r2,3
    8950:	1000491e 	bne	r2,zero,8a78 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8954:	e0bffc17 	ldw	r2,-16(fp)
    8958:	00c00044 	movi	r3,1
    895c:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8960:	e0bffc17 	ldw	r2,-16(fp)
    8964:	10800cc3 	ldbu	r2,51(r2)
    8968:	10803fcc 	andi	r2,r2,255
    896c:	108000a8 	cmpgeui	r2,r2,2
    8970:	1000431e 	bne	r2,zero,8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8974:	e0bffc17 	ldw	r2,-16(fp)
    8978:	10000cc5 	stb	zero,51(r2)
                                        break;
    897c:	00004006 	br	8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8980:	e0bffc17 	ldw	r2,-16(fp)
    8984:	10800404 	addi	r2,r2,16
    8988:	e1bffe17 	ldw	r6,-8(fp)
    898c:	e17ffd17 	ldw	r5,-12(fp)
    8990:	1009883a 	mov	r4,r2
    8994:	00062b00 	call	62b0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8998:	1080005c 	xori	r2,r2,1
    899c:	10803fcc 	andi	r2,r2,255
    89a0:	10000226 	beq	r2,zero,89ac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    89a4:	0005883a 	mov	r2,zero
    89a8:	00005c06 	br	8b1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    89ac:	e0bffc17 	ldw	r2,-16(fp)
    89b0:	10800d43 	ldbu	r2,53(r2)
    89b4:	10803fcc 	andi	r2,r2,255
    89b8:	10003326 	beq	r2,zero,8a88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	10800cc3 	ldbu	r2,51(r2)
    89c4:	10803fcc 	andi	r2,r2,255
    89c8:	108000a8 	cmpgeui	r2,r2,2
    89cc:	10002e1e 	bne	r2,zero,8a88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    89d0:	e0bffc17 	ldw	r2,-16(fp)
    89d4:	10800117 	ldw	r2,4(r2)
    89d8:	10800017 	ldw	r2,0(r2)
    89dc:	10800017 	ldw	r2,0(r2)
    89e0:	e0fffc17 	ldw	r3,-16(fp)
    89e4:	19000117 	ldw	r4,4(r3)
    89e8:	e0fffc17 	ldw	r3,-16(fp)
    89ec:	18c00d83 	ldbu	r3,54(r3)
    89f0:	19403fcc 	andi	r5,r3,255
    89f4:	e0fffc17 	ldw	r3,-16(fp)
    89f8:	18c00804 	addi	r3,r3,32
    89fc:	d8c00115 	stw	r3,4(sp)
    8a00:	d8000015 	stw	zero,0(sp)
    8a04:	000f883a 	mov	r7,zero
    8a08:	000d883a 	mov	r6,zero
    8a0c:	103ee83a 	callr	r2
    8a10:	10803fcc 	andi	r2,r2,255
    8a14:	10001c26 	beq	r2,zero,8a88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8a18:	e0bffc17 	ldw	r2,-16(fp)
    8a1c:	10800cc3 	ldbu	r2,51(r2)
    8a20:	10800044 	addi	r2,r2,1
    8a24:	1007883a 	mov	r3,r2
    8a28:	e0bffc17 	ldw	r2,-16(fp)
    8a2c:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8a30:	00001506 	br	8a88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	10c00604 	addi	r3,r2,24
    8a3c:	e0bffc17 	ldw	r2,-16(fp)
    8a40:	10800c43 	ldbu	r2,49(r2)
    8a44:	10803fcc 	andi	r2,r2,255
    8a48:	10bfff84 	addi	r2,r2,-2
    8a4c:	10bfffcc 	andi	r2,r2,65535
    8a50:	100f883a 	mov	r7,r2
    8a54:	e1bffe17 	ldw	r6,-8(fp)
    8a58:	e17ffd17 	ldw	r5,-12(fp)
    8a5c:	1809883a 	mov	r4,r3
    8a60:	000459c0 	call	459c <_ZN11ByteSkipper4SkipEPPhPtt>
    8a64:	1080005c 	xori	r2,r2,1
    8a68:	10803fcc 	andi	r2,r2,255
    8a6c:	10000726 	beq	r2,zero,8a8c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8a70:	0005883a 	mov	r2,zero
    8a74:	00002906 	br	8b1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8a78:	0001883a 	nop
    8a7c:	00000306 	br	8a8c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8a80:	0001883a 	nop
    8a84:	00000106 	br	8a8c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8a88:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8a8c:	e0bffc17 	ldw	r2,-16(fp)
    8a90:	10c00804 	addi	r3,r2,32
    8a94:	e0bffc17 	ldw	r2,-16(fp)
    8a98:	19803fcc 	andi	r6,r3,255
    8a9c:	11000243 	ldbu	r4,9(r2)
    8aa0:	2008703a 	and	r4,r4,zero
    8aa4:	200b883a 	mov	r5,r4
    8aa8:	3009883a 	mov	r4,r6
    8aac:	2908b03a 	or	r4,r5,r4
    8ab0:	11000245 	stb	r4,9(r2)
    8ab4:	1808d23a 	srli	r4,r3,8
    8ab8:	21803fcc 	andi	r6,r4,255
    8abc:	11000283 	ldbu	r4,10(r2)
    8ac0:	2008703a 	and	r4,r4,zero
    8ac4:	200b883a 	mov	r5,r4
    8ac8:	3009883a 	mov	r4,r6
    8acc:	2908b03a 	or	r4,r5,r4
    8ad0:	11000285 	stb	r4,10(r2)
    8ad4:	1808d43a 	srli	r4,r3,16
    8ad8:	21803fcc 	andi	r6,r4,255
    8adc:	110002c3 	ldbu	r4,11(r2)
    8ae0:	2008703a 	and	r4,r4,zero
    8ae4:	200b883a 	mov	r5,r4
    8ae8:	3009883a 	mov	r4,r6
    8aec:	2908b03a 	or	r4,r5,r4
    8af0:	110002c5 	stb	r4,11(r2)
    8af4:	180ad63a 	srli	r5,r3,24
    8af8:	10c00303 	ldbu	r3,12(r2)
    8afc:	1806703a 	and	r3,r3,zero
    8b00:	1809883a 	mov	r4,r3
    8b04:	2807883a 	mov	r3,r5
    8b08:	20c6b03a 	or	r3,r4,r3
    8b0c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8b10:	e0bffc17 	ldw	r2,-16(fp)
    8b14:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8b18:	00800044 	movi	r2,1
}
    8b1c:	e037883a 	mov	sp,fp
    8b20:	dfc00117 	ldw	ra,4(sp)
    8b24:	df000017 	ldw	fp,0(sp)
    8b28:	dec00204 	addi	sp,sp,8
    8b2c:	f800283a 	ret

00008b30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8b30:	defff904 	addi	sp,sp,-28
    8b34:	df000615 	stw	fp,24(sp)
    8b38:	df000604 	addi	fp,sp,24
    8b3c:	e13ffb15 	stw	r4,-20(fp)
    8b40:	3009883a 	mov	r4,r6
    8b44:	3807883a 	mov	r3,r7
    8b48:	e0800117 	ldw	r2,4(fp)
    8b4c:	e17ffc05 	stb	r5,-16(fp)
    8b50:	e13ffd05 	stb	r4,-12(fp)
    8b54:	e0fffe05 	stb	r3,-8(fp)
    8b58:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8b5c:	e0800217 	ldw	r2,8(fp)
    8b60:	10c000c3 	ldbu	r3,3(r2)
    8b64:	e0bffb17 	ldw	r2,-20(fp)
    8b68:	10800483 	ldbu	r2,18(r2)
    8b6c:	1884703a 	and	r2,r3,r2
    8b70:	10803fcc 	andi	r2,r2,255
    8b74:	10800098 	cmpnei	r2,r2,2
    8b78:	10001f1e 	bne	r2,zero,8bf8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8b7c:	e0800217 	ldw	r2,8(fp)
    8b80:	10800083 	ldbu	r2,2(r2)
    8b84:	10803fcc 	andi	r2,r2,255
    8b88:	1080201c 	xori	r2,r2,128
    8b8c:	10bfe004 	addi	r2,r2,-128
    8b90:	1000020e 	bge	r2,zero,8b9c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8b94:	00800044 	movi	r2,1
    8b98:	00000106 	br	8ba0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8b9c:	00800084 	movi	r2,2
    8ba0:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8ba4:	e0fffa03 	ldbu	r3,-24(fp)
    8ba8:	e0800217 	ldw	r2,8(fp)
    8bac:	10800083 	ldbu	r2,2(r2)
    8bb0:	108003cc 	andi	r2,r2,15
    8bb4:	100b883a 	mov	r5,r2
    8bb8:	e13ffb17 	ldw	r4,-20(fp)
    8bbc:	1805883a 	mov	r2,r3
    8bc0:	1085883a 	add	r2,r2,r2
    8bc4:	10c5883a 	add	r2,r2,r3
    8bc8:	2085883a 	add	r2,r4,r2
    8bcc:	108004c4 	addi	r2,r2,19
    8bd0:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8bd4:	e0800217 	ldw	r2,8(fp)
    8bd8:	10c00103 	ldbu	r3,4(r2)
    8bdc:	10800143 	ldbu	r2,5(r2)
    8be0:	1004923a 	slli	r2,r2,8
    8be4:	10c4b03a 	or	r2,r2,r3
    8be8:	10bfffcc 	andi	r2,r2,65535
    8bec:	10801070 	cmpltui	r2,r2,65
    8bf0:	10000d1e 	bne	r2,zero,8c28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8bf4:	00000206 	br	8c00 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8bf8:	0005883a 	mov	r2,zero
    8bfc:	00001906 	br	8c64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8c00:	e0fffa03 	ldbu	r3,-24(fp)
    8c04:	e13ffb17 	ldw	r4,-20(fp)
    8c08:	1805883a 	mov	r2,r3
    8c0c:	1085883a 	add	r2,r2,r2
    8c10:	10c5883a 	add	r2,r2,r3
    8c14:	2085883a 	add	r2,r4,r2
    8c18:	10800504 	addi	r2,r2,20
    8c1c:	00c01004 	movi	r3,64
    8c20:	10c00005 	stb	r3,0(r2)
    8c24:	00000e06 	br	8c60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8c28:	e0fffa03 	ldbu	r3,-24(fp)
    8c2c:	e0800217 	ldw	r2,8(fp)
    8c30:	11000103 	ldbu	r4,4(r2)
    8c34:	10800143 	ldbu	r2,5(r2)
    8c38:	1004923a 	slli	r2,r2,8
    8c3c:	1104b03a 	or	r2,r2,r4
    8c40:	100b883a 	mov	r5,r2
    8c44:	e13ffb17 	ldw	r4,-20(fp)
    8c48:	1805883a 	mov	r2,r3
    8c4c:	1085883a 	add	r2,r2,r2
    8c50:	10c5883a 	add	r2,r2,r3
    8c54:	2085883a 	add	r2,r4,r2
    8c58:	10800504 	addi	r2,r2,20
    8c5c:	11400005 	stb	r5,0(r2)
        }

        return true;
    8c60:	00800044 	movi	r2,1
}
    8c64:	e037883a 	mov	sp,fp
    8c68:	df000017 	ldw	fp,0(sp)
    8c6c:	dec00104 	addi	sp,sp,4
    8c70:	f800283a 	ret

00008c74 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8c74:	213fff04 	addi	r4,r4,-4
    8c78:	0008b301 	jmpi	8b30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008c7c <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8c7c:	defffa04 	addi	sp,sp,-24
    8c80:	df000515 	stw	fp,20(sp)
    8c84:	df000504 	addi	fp,sp,20
    8c88:	e13ffb15 	stw	r4,-20(fp)
    8c8c:	3009883a 	mov	r4,r6
    8c90:	3807883a 	mov	r3,r7
    8c94:	e0800117 	ldw	r2,4(fp)
    8c98:	e17ffc05 	stb	r5,-16(fp)
    8c9c:	e13ffd05 	stb	r4,-12(fp)
    8ca0:	e0fffe05 	stb	r3,-8(fp)
    8ca4:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8ca8:	00800044 	movi	r2,1
        };
    8cac:	e037883a 	mov	sp,fp
    8cb0:	df000017 	ldw	fp,0(sp)
    8cb4:	dec00104 	addi	sp,sp,4
    8cb8:	f800283a 	ret

00008cbc <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8cbc:	defffe04 	addi	sp,sp,-8
    8cc0:	df000115 	stw	fp,4(sp)
    8cc4:	df000104 	addi	fp,sp,4
    8cc8:	e13fff15 	stw	r4,-4(fp)
    8ccc:	e0bfff17 	ldw	r2,-4(fp)
    8cd0:	10800d83 	ldbu	r2,54(r2)
    8cd4:	e037883a 	mov	sp,fp
    8cd8:	df000017 	ldw	fp,0(sp)
    8cdc:	dec00104 	addi	sp,sp,4
    8ce0:	f800283a 	ret

00008ce4 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8ce4:	defffe04 	addi	sp,sp,-8
    8ce8:	df000115 	stw	fp,4(sp)
    8cec:	df000104 	addi	fp,sp,4
    8cf0:	e13fff15 	stw	r4,-4(fp)
    8cf4:	e0bfff17 	ldw	r2,-4(fp)
    8cf8:	10800cc3 	ldbu	r2,51(r2)
    8cfc:	e037883a 	mov	sp,fp
    8d00:	df000017 	ldw	fp,0(sp)
    8d04:	dec00104 	addi	sp,sp,4
    8d08:	f800283a 	ret

00008d0c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8d0c:	defffd04 	addi	sp,sp,-12
    8d10:	df000215 	stw	fp,8(sp)
    8d14:	df000204 	addi	fp,sp,8
    8d18:	e13ffe15 	stw	r4,-8(fp)
    8d1c:	2805883a 	mov	r2,r5
    8d20:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8d24:	e0bfff03 	ldbu	r2,-4(fp)
    8d28:	10803c28 	cmpgeui	r2,r2,240
    8d2c:	1000031e 	bne	r2,zero,8d3c <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8d30:	e0bfff03 	ldbu	r2,-4(fp)
    8d34:	1004d13a 	srli	r2,r2,4
    8d38:	00000606 	br	8d54 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8d3c:	e0bfff03 	ldbu	r2,-4(fp)
    8d40:	10c003cc 	andi	r3,r2,15
    8d44:	008000b4 	movhi	r2,2
    8d48:	10989b84 	addi	r2,r2,25198
    8d4c:	1885883a 	add	r2,r3,r2
    8d50:	10800003 	ldbu	r2,0(r2)
        };
    8d54:	e037883a 	mov	sp,fp
    8d58:	df000017 	ldw	fp,0(sp)
    8d5c:	dec00104 	addi	sp,sp,4
    8d60:	f800283a 	ret

00008d64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8d64:	defffd04 	addi	sp,sp,-12
    8d68:	df000215 	stw	fp,8(sp)
    8d6c:	df000204 	addi	fp,sp,8
    8d70:	e13ffe15 	stw	r4,-8(fp)
    8d74:	2805883a 	mov	r2,r5
    8d78:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8d7c:	e0ffff03 	ldbu	r3,-4(fp)
    8d80:	008000b4 	movhi	r2,2
    8d84:	10989784 	addi	r2,r2,25182
    8d88:	1885883a 	add	r2,r3,r2
    8d8c:	10800003 	ldbu	r2,0(r2)
        };
    8d90:	e037883a 	mov	sp,fp
    8d94:	df000017 	ldw	fp,0(sp)
    8d98:	dec00104 	addi	sp,sp,4
    8d9c:	f800283a 	ret

00008da0 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8da0:	defffe04 	addi	sp,sp,-8
    8da4:	df000115 	stw	fp,4(sp)
    8da8:	df000104 	addi	fp,sp,4
    8dac:	e13fff15 	stw	r4,-4(fp)
    8db0:	e0bfff17 	ldw	r2,-4(fp)
    8db4:	10800303 	ldbu	r2,12(r2)
    8db8:	e037883a 	mov	sp,fp
    8dbc:	df000017 	ldw	fp,0(sp)
    8dc0:	dec00104 	addi	sp,sp,4
    8dc4:	f800283a 	ret

00008dc8 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8dc8:	defffe04 	addi	sp,sp,-8
    8dcc:	df000115 	stw	fp,4(sp)
    8dd0:	df000104 	addi	fp,sp,4
    8dd4:	e13fff15 	stw	r4,-4(fp)
    8dd8:	008000b4 	movhi	r2,2
    8ddc:	1098b404 	addi	r2,r2,25296
    8de0:	e0ffff17 	ldw	r3,-4(fp)
    8de4:	18800015 	stw	r2,0(r3)
    8de8:	0001883a 	nop
    8dec:	e037883a 	mov	sp,fp
    8df0:	df000017 	ldw	fp,0(sp)
    8df4:	dec00104 	addi	sp,sp,4
    8df8:	f800283a 	ret

00008dfc <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8dfc:	defffd04 	addi	sp,sp,-12
    8e00:	df000215 	stw	fp,8(sp)
    8e04:	df000204 	addi	fp,sp,8
    8e08:	2005883a 	mov	r2,r4
    8e0c:	e17fff15 	stw	r5,-4(fp)
    8e10:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8e14:	0001883a 	nop
    8e18:	e037883a 	mov	sp,fp
    8e1c:	df000017 	ldw	fp,0(sp)
    8e20:	dec00104 	addi	sp,sp,4
    8e24:	f800283a 	ret

00008e28 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8e28:	deffe204 	addi	sp,sp,-120
    8e2c:	dfc01d15 	stw	ra,116(sp)
    8e30:	df001c15 	stw	fp,112(sp)
    8e34:	df001c04 	addi	fp,sp,112
    8e38:	e13ffd15 	stw	r4,-12(fp)
    8e3c:	2805883a 	mov	r2,r5
    8e40:	e1bfff15 	stw	r6,-4(fp)
    8e44:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8e48:	00801004 	movi	r2,64
    8e4c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8e50:	e0bffd17 	ldw	r2,-12(fp)
    8e54:	11000217 	ldw	r4,8(r2)
    8e58:	e0bffd17 	ldw	r2,-12(fp)
    8e5c:	10800303 	ldbu	r2,12(r2)
    8e60:	11403fcc 	andi	r5,r2,255
    8e64:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8e68:	e0ffff17 	ldw	r3,-4(fp)
    8e6c:	d8c00715 	stw	r3,28(sp)
    8e70:	e0ffec84 	addi	r3,fp,-78
    8e74:	d8c00615 	stw	r3,24(sp)
    8e78:	00c01004 	movi	r3,64
    8e7c:	d8c00515 	stw	r3,20(sp)
    8e80:	00c02004 	movi	r3,128
    8e84:	d8c00415 	stw	r3,16(sp)
    8e88:	d8800315 	stw	r2,12(sp)
    8e8c:	00800884 	movi	r2,34
    8e90:	d8800215 	stw	r2,8(sp)
    8e94:	d8000115 	stw	zero,4(sp)
    8e98:	00800184 	movi	r2,6
    8e9c:	d8800015 	stw	r2,0(sp)
    8ea0:	01c02044 	movi	r7,129
    8ea4:	000d883a 	mov	r6,zero
    8ea8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8eac:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8eb0:	e0bfec43 	ldbu	r2,-79(fp)
}
    8eb4:	e037883a 	mov	sp,fp
    8eb8:	dfc00117 	ldw	ra,4(sp)
    8ebc:	df000017 	ldw	fp,0(sp)
    8ec0:	dec00204 	addi	sp,sp,8
    8ec4:	f800283a 	ret

00008ec8 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8ec8:	defff004 	addi	sp,sp,-64
    8ecc:	dfc00f15 	stw	ra,60(sp)
    8ed0:	df000e15 	stw	fp,56(sp)
    8ed4:	df000e04 	addi	fp,sp,56
    8ed8:	e13ffa15 	stw	r4,-24(fp)
    8edc:	2811883a 	mov	r8,r5
    8ee0:	300b883a 	mov	r5,r6
    8ee4:	3809883a 	mov	r4,r7
    8ee8:	e0c00217 	ldw	r3,8(fp)
    8eec:	e0800317 	ldw	r2,12(fp)
    8ef0:	e23ffb05 	stb	r8,-20(fp)
    8ef4:	e17ffc05 	stb	r5,-16(fp)
    8ef8:	e13ffd05 	stb	r4,-12(fp)
    8efc:	e0fffe05 	stb	r3,-8(fp)
    8f00:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8f04:	e0bffa17 	ldw	r2,-24(fp)
    8f08:	12000217 	ldw	r8,8(r2)
    8f0c:	e0bffa17 	ldw	r2,-24(fp)
    8f10:	10800303 	ldbu	r2,12(r2)
    8f14:	12403fcc 	andi	r9,r2,255
    8f18:	e2bffb03 	ldbu	r10,-20(fp)
    8f1c:	e0bffe03 	ldbu	r2,-8(fp)
    8f20:	e0fffd03 	ldbu	r3,-12(fp)
    8f24:	e13ffc03 	ldbu	r4,-16(fp)
    8f28:	e17fff0b 	ldhu	r5,-4(fp)
    8f2c:	e1bfff0b 	ldhu	r6,-4(fp)
    8f30:	d8000715 	stw	zero,28(sp)
    8f34:	e1c00417 	ldw	r7,16(fp)
    8f38:	d9c00615 	stw	r7,24(sp)
    8f3c:	d9800515 	stw	r6,20(sp)
    8f40:	d9400415 	stw	r5,16(sp)
    8f44:	d9000315 	stw	r4,12(sp)
    8f48:	d8c00215 	stw	r3,8(sp)
    8f4c:	d8800115 	stw	r2,4(sp)
    8f50:	00800244 	movi	r2,9
    8f54:	d8800015 	stw	r2,0(sp)
    8f58:	01c00844 	movi	r7,33
    8f5c:	500d883a 	mov	r6,r10
    8f60:	480b883a 	mov	r5,r9
    8f64:	4009883a 	mov	r4,r8
    8f68:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8f6c:	e037883a 	mov	sp,fp
    8f70:	dfc00117 	ldw	ra,4(sp)
    8f74:	df000017 	ldw	fp,0(sp)
    8f78:	dec00204 	addi	sp,sp,8
    8f7c:	f800283a 	ret

00008f80 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8f80:	defff004 	addi	sp,sp,-64
    8f84:	dfc00f15 	stw	ra,60(sp)
    8f88:	df000e15 	stw	fp,56(sp)
    8f8c:	df000e04 	addi	fp,sp,56
    8f90:	e13ffa15 	stw	r4,-24(fp)
    8f94:	2811883a 	mov	r8,r5
    8f98:	300b883a 	mov	r5,r6
    8f9c:	3809883a 	mov	r4,r7
    8fa0:	e0c00217 	ldw	r3,8(fp)
    8fa4:	e0800317 	ldw	r2,12(fp)
    8fa8:	e23ffb05 	stb	r8,-20(fp)
    8fac:	e17ffc05 	stb	r5,-16(fp)
    8fb0:	e13ffd05 	stb	r4,-12(fp)
    8fb4:	e0fffe05 	stb	r3,-8(fp)
    8fb8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8fbc:	e0bffa17 	ldw	r2,-24(fp)
    8fc0:	12000217 	ldw	r8,8(r2)
    8fc4:	e0bffa17 	ldw	r2,-24(fp)
    8fc8:	10800303 	ldbu	r2,12(r2)
    8fcc:	12403fcc 	andi	r9,r2,255
    8fd0:	e2bffb03 	ldbu	r10,-20(fp)
    8fd4:	e0bffe03 	ldbu	r2,-8(fp)
    8fd8:	e0fffd03 	ldbu	r3,-12(fp)
    8fdc:	e13ffc03 	ldbu	r4,-16(fp)
    8fe0:	e17fff0b 	ldhu	r5,-4(fp)
    8fe4:	e1bfff0b 	ldhu	r6,-4(fp)
    8fe8:	d8000715 	stw	zero,28(sp)
    8fec:	e1c00417 	ldw	r7,16(fp)
    8ff0:	d9c00615 	stw	r7,24(sp)
    8ff4:	d9800515 	stw	r6,20(sp)
    8ff8:	d9400415 	stw	r5,16(sp)
    8ffc:	d9000315 	stw	r4,12(sp)
    9000:	d8c00215 	stw	r3,8(sp)
    9004:	d8800115 	stw	r2,4(sp)
    9008:	00800044 	movi	r2,1
    900c:	d8800015 	stw	r2,0(sp)
    9010:	01c02844 	movi	r7,161
    9014:	500d883a 	mov	r6,r10
    9018:	480b883a 	mov	r5,r9
    901c:	4009883a 	mov	r4,r8
    9020:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9024:	e037883a 	mov	sp,fp
    9028:	dfc00117 	ldw	ra,4(sp)
    902c:	df000017 	ldw	fp,0(sp)
    9030:	dec00204 	addi	sp,sp,8
    9034:	f800283a 	ret

00009038 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9038:	defff204 	addi	sp,sp,-56
    903c:	dfc00d15 	stw	ra,52(sp)
    9040:	df000c15 	stw	fp,48(sp)
    9044:	df000c04 	addi	fp,sp,48
    9048:	e13ffc15 	stw	r4,-16(fp)
    904c:	2807883a 	mov	r3,r5
    9050:	3005883a 	mov	r2,r6
    9054:	e1ffff15 	stw	r7,-4(fp)
    9058:	e0fffd05 	stb	r3,-12(fp)
    905c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9060:	e0bffc17 	ldw	r2,-16(fp)
    9064:	12000217 	ldw	r8,8(r2)
    9068:	e0bffc17 	ldw	r2,-16(fp)
    906c:	10800303 	ldbu	r2,12(r2)
    9070:	11403fcc 	andi	r5,r2,255
    9074:	e0bffe03 	ldbu	r2,-8(fp)
    9078:	e0fffd03 	ldbu	r3,-12(fp)
    907c:	d8000715 	stw	zero,28(sp)
    9080:	e13fff17 	ldw	r4,-4(fp)
    9084:	d9000615 	stw	r4,24(sp)
    9088:	01000044 	movi	r4,1
    908c:	d9000515 	stw	r4,20(sp)
    9090:	01000044 	movi	r4,1
    9094:	d9000415 	stw	r4,16(sp)
    9098:	d8c00315 	stw	r3,12(sp)
    909c:	d8000215 	stw	zero,8(sp)
    90a0:	d8800115 	stw	r2,4(sp)
    90a4:	00800084 	movi	r2,2
    90a8:	d8800015 	stw	r2,0(sp)
    90ac:	01c02844 	movi	r7,161
    90b0:	000d883a 	mov	r6,zero
    90b4:	4009883a 	mov	r4,r8
    90b8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90bc:	e037883a 	mov	sp,fp
    90c0:	dfc00117 	ldw	ra,4(sp)
    90c4:	df000017 	ldw	fp,0(sp)
    90c8:	dec00204 	addi	sp,sp,8
    90cc:	f800283a 	ret

000090d0 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    90d0:	defff204 	addi	sp,sp,-56
    90d4:	dfc00d15 	stw	ra,52(sp)
    90d8:	df000c15 	stw	fp,48(sp)
    90dc:	df000c04 	addi	fp,sp,48
    90e0:	e13ffc15 	stw	r4,-16(fp)
    90e4:	2809883a 	mov	r4,r5
    90e8:	3007883a 	mov	r3,r6
    90ec:	3805883a 	mov	r2,r7
    90f0:	e13ffd05 	stb	r4,-12(fp)
    90f4:	e0fffe05 	stb	r3,-8(fp)
    90f8:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    90fc:	e0bffc17 	ldw	r2,-16(fp)
    9100:	12000217 	ldw	r8,8(r2)
    9104:	e0bffc17 	ldw	r2,-16(fp)
    9108:	10800303 	ldbu	r2,12(r2)
    910c:	11403fcc 	andi	r5,r2,255
    9110:	e0bffe03 	ldbu	r2,-8(fp)
    9114:	e0ffff03 	ldbu	r3,-4(fp)
    9118:	e13ffd03 	ldbu	r4,-12(fp)
    911c:	d8000715 	stw	zero,28(sp)
    9120:	d8000615 	stw	zero,24(sp)
    9124:	d8000515 	stw	zero,20(sp)
    9128:	d8000415 	stw	zero,16(sp)
    912c:	d9000315 	stw	r4,12(sp)
    9130:	d8c00215 	stw	r3,8(sp)
    9134:	d8800115 	stw	r2,4(sp)
    9138:	00800284 	movi	r2,10
    913c:	d8800015 	stw	r2,0(sp)
    9140:	01c00844 	movi	r7,33
    9144:	000d883a 	mov	r6,zero
    9148:	4009883a 	mov	r4,r8
    914c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9150:	e037883a 	mov	sp,fp
    9154:	dfc00117 	ldw	ra,4(sp)
    9158:	df000017 	ldw	fp,0(sp)
    915c:	dec00204 	addi	sp,sp,8
    9160:	f800283a 	ret

00009164 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    9164:	defff304 	addi	sp,sp,-52
    9168:	dfc00c15 	stw	ra,48(sp)
    916c:	df000b15 	stw	fp,44(sp)
    9170:	df000b04 	addi	fp,sp,44
    9174:	e13ffd15 	stw	r4,-12(fp)
    9178:	2807883a 	mov	r3,r5
    917c:	3005883a 	mov	r2,r6
    9180:	e0fffe05 	stb	r3,-8(fp)
    9184:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    9188:	e0bffd17 	ldw	r2,-12(fp)
    918c:	11000217 	ldw	r4,8(r2)
    9190:	e0bffd17 	ldw	r2,-12(fp)
    9194:	10800303 	ldbu	r2,12(r2)
    9198:	11403fcc 	andi	r5,r2,255
    919c:	e0bfff03 	ldbu	r2,-4(fp)
    91a0:	e0fffe03 	ldbu	r3,-8(fp)
    91a4:	d8000715 	stw	zero,28(sp)
    91a8:	d8000615 	stw	zero,24(sp)
    91ac:	d8000515 	stw	zero,20(sp)
    91b0:	d8000415 	stw	zero,16(sp)
    91b4:	d8c00315 	stw	r3,12(sp)
    91b8:	d8000215 	stw	zero,8(sp)
    91bc:	d8800115 	stw	r2,4(sp)
    91c0:	008002c4 	movi	r2,11
    91c4:	d8800015 	stw	r2,0(sp)
    91c8:	01c00844 	movi	r7,33
    91cc:	000d883a 	mov	r6,zero
    91d0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    91d4:	e037883a 	mov	sp,fp
    91d8:	dfc00117 	ldw	ra,4(sp)
    91dc:	df000017 	ldw	fp,0(sp)
    91e0:	dec00204 	addi	sp,sp,8
    91e4:	f800283a 	ret

000091e8 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    91e8:	defff304 	addi	sp,sp,-52
    91ec:	dfc00c15 	stw	ra,48(sp)
    91f0:	df000b15 	stw	fp,44(sp)
    91f4:	df000b04 	addi	fp,sp,44
    91f8:	e13ffd15 	stw	r4,-12(fp)
    91fc:	2805883a 	mov	r2,r5
    9200:	e1bfff15 	stw	r6,-4(fp)
    9204:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9208:	e0bffd17 	ldw	r2,-12(fp)
    920c:	11000217 	ldw	r4,8(r2)
    9210:	e0bffd17 	ldw	r2,-12(fp)
    9214:	10800303 	ldbu	r2,12(r2)
    9218:	11403fcc 	andi	r5,r2,255
    921c:	e0bffe03 	ldbu	r2,-8(fp)
    9220:	d8000715 	stw	zero,28(sp)
    9224:	e0ffff17 	ldw	r3,-4(fp)
    9228:	d8c00615 	stw	r3,24(sp)
    922c:	00c00044 	movi	r3,1
    9230:	d8c00515 	stw	r3,20(sp)
    9234:	00c00044 	movi	r3,1
    9238:	d8c00415 	stw	r3,16(sp)
    923c:	d8800315 	stw	r2,12(sp)
    9240:	d8000215 	stw	zero,8(sp)
    9244:	d8000115 	stw	zero,4(sp)
    9248:	008000c4 	movi	r2,3
    924c:	d8800015 	stw	r2,0(sp)
    9250:	01c02844 	movi	r7,161
    9254:	000d883a 	mov	r6,zero
    9258:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    925c:	e037883a 	mov	sp,fp
    9260:	dfc00117 	ldw	ra,4(sp)
    9264:	df000017 	ldw	fp,0(sp)
    9268:	dec00204 	addi	sp,sp,8
    926c:	f800283a 	ret

00009270 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    9270:	defffc04 	addi	sp,sp,-16
    9274:	dfc00315 	stw	ra,12(sp)
    9278:	df000215 	stw	fp,8(sp)
    927c:	df000204 	addi	fp,sp,8
    9280:	e13ffe15 	stw	r4,-8(fp)
    9284:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    9288:	e0bfff17 	ldw	r2,-4(fp)
    928c:	10800003 	ldbu	r2,0(r2)
    9290:	10803fcc 	andi	r2,r2,255
    9294:	01402004 	movi	r5,128
    9298:	1009883a 	mov	r4,r2
    929c:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    92a0:	e0bfff17 	ldw	r2,-4(fp)
    92a4:	10800043 	ldbu	r2,1(r2)
    92a8:	10803fcc 	andi	r2,r2,255
    92ac:	01402004 	movi	r5,128
    92b0:	1009883a 	mov	r4,r2
    92b4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    92b8:	e0bfff17 	ldw	r2,-4(fp)
    92bc:	10800083 	ldbu	r2,2(r2)
    92c0:	10803fcc 	andi	r2,r2,255
    92c4:	01402004 	movi	r5,128
    92c8:	1009883a 	mov	r4,r2
    92cc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    92d0:	e0bfff17 	ldw	r2,-4(fp)
    92d4:	108000c3 	ldbu	r2,3(r2)
    92d8:	10803fcc 	andi	r2,r2,255
    92dc:	01402004 	movi	r5,128
    92e0:	1009883a 	mov	r4,r2
    92e4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    92e8:	e0bfff17 	ldw	r2,-4(fp)
    92ec:	10c00103 	ldbu	r3,4(r2)
    92f0:	10800143 	ldbu	r2,5(r2)
    92f4:	1004923a 	slli	r2,r2,8
    92f8:	10c4b03a 	or	r2,r2,r3
    92fc:	10bfffcc 	andi	r2,r2,65535
    9300:	01402004 	movi	r5,128
    9304:	1009883a 	mov	r4,r2
    9308:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    930c:	e0bfff17 	ldw	r2,-4(fp)
    9310:	10800183 	ldbu	r2,6(r2)
    9314:	10803fcc 	andi	r2,r2,255
    9318:	01402004 	movi	r5,128
    931c:	1009883a 	mov	r4,r2
    9320:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>
}
    9324:	0001883a 	nop
    9328:	e037883a 	mov	sp,fp
    932c:	dfc00117 	ldw	ra,4(sp)
    9330:	df000017 	ldw	fp,0(sp)
    9334:	dec00204 	addi	sp,sp,8
    9338:	f800283a 	ret

0000933c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    933c:	defffc04 	addi	sp,sp,-16
    9340:	dfc00315 	stw	ra,12(sp)
    9344:	df000215 	stw	fp,8(sp)
    9348:	df000204 	addi	fp,sp,8
    934c:	e13ffe15 	stw	r4,-8(fp)
    9350:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    9354:	e0bfff17 	ldw	r2,-4(fp)
    9358:	10800003 	ldbu	r2,0(r2)
    935c:	10803fcc 	andi	r2,r2,255
    9360:	01402004 	movi	r5,128
    9364:	1009883a 	mov	r4,r2
    9368:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    936c:	e0bfff17 	ldw	r2,-4(fp)
    9370:	10800043 	ldbu	r2,1(r2)
    9374:	10803fcc 	andi	r2,r2,255
    9378:	01402004 	movi	r5,128
    937c:	1009883a 	mov	r4,r2
    9380:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    9384:	e0bfff17 	ldw	r2,-4(fp)
    9388:	10c00083 	ldbu	r3,2(r2)
    938c:	108000c3 	ldbu	r2,3(r2)
    9390:	1004923a 	slli	r2,r2,8
    9394:	10c4b03a 	or	r2,r2,r3
    9398:	10bfffcc 	andi	r2,r2,65535
    939c:	01402004 	movi	r5,128
    93a0:	1009883a 	mov	r4,r2
    93a4:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    93a8:	e0bfff17 	ldw	r2,-4(fp)
    93ac:	10800103 	ldbu	r2,4(r2)
    93b0:	10803fcc 	andi	r2,r2,255
    93b4:	01402004 	movi	r5,128
    93b8:	1009883a 	mov	r4,r2
    93bc:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    93c0:	e0bfff17 	ldw	r2,-4(fp)
    93c4:	10800143 	ldbu	r2,5(r2)
    93c8:	10803fcc 	andi	r2,r2,255
    93cc:	01402004 	movi	r5,128
    93d0:	1009883a 	mov	r4,r2
    93d4:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    93d8:	e0bfff17 	ldw	r2,-4(fp)
    93dc:	10800183 	ldbu	r2,6(r2)
    93e0:	10803fcc 	andi	r2,r2,255
    93e4:	01402004 	movi	r5,128
    93e8:	1009883a 	mov	r4,r2
    93ec:	00029c40 	call	29c4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    93f0:	e0bfff17 	ldw	r2,-4(fp)
    93f4:	10c001c3 	ldbu	r3,7(r2)
    93f8:	10800203 	ldbu	r2,8(r2)
    93fc:	1004923a 	slli	r2,r2,8
    9400:	10c4b03a 	or	r2,r2,r3
    9404:	10bfffcc 	andi	r2,r2,65535
    9408:	01402004 	movi	r5,128
    940c:	1009883a 	mov	r4,r2
    9410:	0008dfc0 	call	8dfc <_Z10D_PrintHexItEvT_i>
}
    9414:	0001883a 	nop
    9418:	e037883a 	mov	sp,fp
    941c:	dfc00117 	ldw	ra,4(sp)
    9420:	df000017 	ldw	fp,0(sp)
    9424:	dec00204 	addi	sp,sp,8
    9428:	f800283a 	ret

0000942c <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    942c:	defffd04 	addi	sp,sp,-12
    9430:	dfc00215 	stw	ra,8(sp)
    9434:	df000115 	stw	fp,4(sp)
    9438:	df000104 	addi	fp,sp,4
    943c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9440:	010000f4 	movhi	r4,3
    9444:	2120fc04 	addi	r4,r4,-31760
    9448:	000f0340 	call	f034 <puts>
	vbusState = 0;
    944c:	d0323b45 	stb	zero,-14099(gp)
};
    9450:	0001883a 	nop
    9454:	e037883a 	mov	sp,fp
    9458:	dfc00117 	ldw	ra,4(sp)
    945c:	df000017 	ldw	fp,0(sp)
    9460:	dec00204 	addi	sp,sp,8
    9464:	f800283a 	ret

00009468 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    9468:	defffe04 	addi	sp,sp,-8
    946c:	df000115 	stw	fp,4(sp)
    9470:	df000104 	addi	fp,sp,4
    9474:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    9478:	d0b23b43 	ldbu	r2,-14099(gp)
};
    947c:	e037883a 	mov	sp,fp
    9480:	df000017 	ldw	fp,0(sp)
    9484:	dec00104 	addi	sp,sp,4
    9488:	f800283a 	ret

0000948c <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    948c:	defff704 	addi	sp,sp,-36
    9490:	dfc00815 	stw	ra,32(sp)
    9494:	df000715 	stw	fp,28(sp)
    9498:	df000704 	addi	fp,sp,28
    949c:	e13ffd15 	stw	r4,-12(fp)
    94a0:	2807883a 	mov	r3,r5
    94a4:	3005883a 	mov	r2,r6
    94a8:	e0fffe05 	stb	r3,-8(fp)
    94ac:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    94b0:	e03ffc45 	stb	zero,-15(fp)
    94b4:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    94b8:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    94bc:	e0bffe03 	ldbu	r2,-8(fp)
    94c0:	10800084 	addi	r2,r2,2
    94c4:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    94c8:	e0bfff03 	ldbu	r2,-4(fp)
    94cc:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    94d0:	e0fffc44 	addi	r3,fp,-15
    94d4:	d8000215 	stw	zero,8(sp)
    94d8:	e0bffcc4 	addi	r2,fp,-13
    94dc:	d8800115 	stw	r2,4(sp)
    94e0:	d8000015 	stw	zero,0(sp)
    94e4:	180f883a 	mov	r7,r3
    94e8:	01800084 	movi	r6,2
    94ec:	000b883a 	mov	r5,zero
    94f0:	01010034 	movhi	r4,1024
    94f4:	21044804 	addi	r4,r4,4384
    94f8:	00222880 	call	22288 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    94fc:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9500:	0001883a 	nop
    9504:	e037883a 	mov	sp,fp
    9508:	dfc00117 	ldw	ra,4(sp)
    950c:	df000017 	ldw	fp,0(sp)
    9510:	dec00204 	addi	sp,sp,8
    9514:	f800283a 	ret

00009518 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9518:	defff304 	addi	sp,sp,-52
    951c:	dfc00c15 	stw	ra,48(sp)
    9520:	df000b15 	stw	fp,44(sp)
    9524:	dc000a15 	stw	r16,40(sp)
    9528:	df000b04 	addi	fp,sp,44
    952c:	e13ffb15 	stw	r4,-20(fp)
    9530:	3009883a 	mov	r4,r6
    9534:	e1fffe15 	stw	r7,-8(fp)
    9538:	e17ffc05 	stb	r5,-16(fp)
    953c:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9540:	d809883a 	mov	r4,sp
    9544:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9548:	e13ffd03 	ldbu	r4,-12(fp)
    954c:	e13ff815 	stw	r4,-32(fp)
    9550:	200b883a 	mov	r5,r4
    9554:	29400044 	addi	r5,r5,1
    9558:	2819883a 	mov	r12,r5
    955c:	001b883a 	mov	r13,zero
    9560:	600ad77a 	srli	r5,r12,29
    9564:	681290fa 	slli	r9,r13,3
    9568:	2a52b03a 	or	r9,r5,r9
    956c:	601090fa 	slli	r8,r12,3
    9570:	200b883a 	mov	r5,r4
    9574:	29400044 	addi	r5,r5,1
    9578:	2815883a 	mov	r10,r5
    957c:	0017883a 	mov	r11,zero
    9580:	500ad77a 	srli	r5,r10,29
    9584:	580690fa 	slli	r3,r11,3
    9588:	28c6b03a 	or	r3,r5,r3
    958c:	500490fa 	slli	r2,r10,3
    9590:	2005883a 	mov	r2,r4
    9594:	10800044 	addi	r2,r2,1
    9598:	108000c4 	addi	r2,r2,3
    959c:	1004d0ba 	srli	r2,r2,2
    95a0:	1085883a 	add	r2,r2,r2
    95a4:	1085883a 	add	r2,r2,r2
    95a8:	d8b7c83a 	sub	sp,sp,r2
    95ac:	d8800304 	addi	r2,sp,12
    95b0:	1005883a 	mov	r2,r2
    95b4:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    95b8:	e0bffc03 	ldbu	r2,-16(fp)
    95bc:	10800084 	addi	r2,r2,2
    95c0:	1007883a 	mov	r3,r2
    95c4:	e0bff917 	ldw	r2,-28(fp)
    95c8:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    95cc:	e0bff917 	ldw	r2,-28(fp)
    95d0:	10800044 	addi	r2,r2,1
    95d4:	e0fffd03 	ldbu	r3,-12(fp)
    95d8:	180d883a 	mov	r6,r3
    95dc:	e17ffe17 	ldw	r5,-8(fp)
    95e0:	1009883a 	mov	r4,r2
    95e4:	000ec780 	call	ec78 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    95e8:	e0bffd03 	ldbu	r2,-12(fp)
    95ec:	10800044 	addi	r2,r2,1
    95f0:	1009883a 	mov	r4,r2
    95f4:	e0fff917 	ldw	r3,-28(fp)
    95f8:	d8000215 	stw	zero,8(sp)
    95fc:	e0bffa44 	addi	r2,fp,-23
    9600:	d8800115 	stw	r2,4(sp)
    9604:	d8000015 	stw	zero,0(sp)
    9608:	180f883a 	mov	r7,r3
    960c:	200d883a 	mov	r6,r4
    9610:	000b883a 	mov	r5,zero
    9614:	01010034 	movhi	r4,1024
    9618:	21044804 	addi	r4,r4,4384
    961c:	00222880 	call	22288 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9620:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9624:	e0bffd03 	ldbu	r2,-12(fp)
    9628:	e0fffe17 	ldw	r3,-8(fp)
    962c:	1885883a 	add	r2,r3,r2
    9630:	8037883a 	mov	sp,r16
}
    9634:	e6ffff04 	addi	sp,fp,-4
    9638:	dfc00217 	ldw	ra,8(sp)
    963c:	df000117 	ldw	fp,4(sp)
    9640:	dc000017 	ldw	r16,0(sp)
    9644:	dec00304 	addi	sp,sp,12
    9648:	f800283a 	ret

0000964c <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    964c:	defffc04 	addi	sp,sp,-16
    9650:	dfc00315 	stw	ra,12(sp)
    9654:	df000215 	stw	fp,8(sp)
    9658:	df000204 	addi	fp,sp,8
    965c:	e13ffe15 	stw	r4,-8(fp)
    9660:	2805883a 	mov	r2,r5
    9664:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9668:	010000f4 	movhi	r4,3
    966c:	21210204 	addi	r4,r4,-31736
    9670:	000f0340 	call	f034 <puts>
	regWr(rIOPINS1, data);
    9674:	e0bfff03 	ldbu	r2,-4(fp)
    9678:	100d883a 	mov	r6,r2
    967c:	01402804 	movi	r5,160
    9680:	e13ffe17 	ldw	r4,-8(fp)
    9684:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9688:	e0bfff03 	ldbu	r2,-4(fp)
    968c:	1005d13a 	srai	r2,r2,4
    9690:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    9694:	e0bfff03 	ldbu	r2,-4(fp)
    9698:	100d883a 	mov	r6,r2
    969c:	01402a04 	movi	r5,168
    96a0:	e13ffe17 	ldw	r4,-8(fp)
    96a4:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	return;
    96a8:	0001883a 	nop
}
    96ac:	e037883a 	mov	sp,fp
    96b0:	dfc00117 	ldw	ra,4(sp)
    96b4:	df000017 	ldw	fp,0(sp)
    96b8:	dec00204 	addi	sp,sp,8
    96bc:	f800283a 	ret

000096c0 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    96c0:	defff804 	addi	sp,sp,-32
    96c4:	dfc00715 	stw	ra,28(sp)
    96c8:	df000615 	stw	fp,24(sp)
    96cc:	df000604 	addi	fp,sp,24
    96d0:	e13ffe15 	stw	r4,-8(fp)
    96d4:	2805883a 	mov	r2,r5
    96d8:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    96dc:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    96e0:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    96e4:	e0bfff03 	ldbu	r2,-4(fp)
    96e8:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    96ec:	e0fffd44 	addi	r3,fp,-11
    96f0:	d8000215 	stw	zero,8(sp)
    96f4:	e0bffd84 	addi	r2,fp,-10
    96f8:	d8800115 	stw	r2,4(sp)
    96fc:	00800044 	movi	r2,1
    9700:	d8800015 	stw	r2,0(sp)
    9704:	180f883a 	mov	r7,r3
    9708:	01800044 	movi	r6,1
    970c:	000b883a 	mov	r5,zero
    9710:	01010034 	movhi	r4,1024
    9714:	21044804 	addi	r4,r4,4384
    9718:	00222880 	call	22288 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    971c:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9720:	e0bffd83 	ldbu	r2,-10(fp)
}
    9724:	e037883a 	mov	sp,fp
    9728:	dfc00117 	ldw	ra,4(sp)
    972c:	df000017 	ldw	fp,0(sp)
    9730:	dec00204 	addi	sp,sp,8
    9734:	f800283a 	ret

00009738 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9738:	defff604 	addi	sp,sp,-40
    973c:	dfc00915 	stw	ra,36(sp)
    9740:	df000815 	stw	fp,32(sp)
    9744:	df000804 	addi	fp,sp,32
    9748:	e13ffc15 	stw	r4,-16(fp)
    974c:	2807883a 	mov	r3,r5
    9750:	3005883a 	mov	r2,r6
    9754:	e1ffff15 	stw	r7,-4(fp)
    9758:	e0fffd05 	stb	r3,-12(fp)
    975c:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9760:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9764:	e0bffd03 	ldbu	r2,-12(fp)
    9768:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    976c:	e0bffe03 	ldbu	r2,-8(fp)
    9770:	e13ffb44 	addi	r4,fp,-19
    9774:	d8000215 	stw	zero,8(sp)
    9778:	e0ffff17 	ldw	r3,-4(fp)
    977c:	d8c00115 	stw	r3,4(sp)
    9780:	d8800015 	stw	r2,0(sp)
    9784:	200f883a 	mov	r7,r4
    9788:	01800044 	movi	r6,1
    978c:	000b883a 	mov	r5,zero
    9790:	01010034 	movhi	r4,1024
    9794:	21044804 	addi	r4,r4,4384
    9798:	00222880 	call	22288 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    979c:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    97a0:	e0bffe03 	ldbu	r2,-8(fp)
    97a4:	e0ffff17 	ldw	r3,-4(fp)
    97a8:	1885883a 	add	r2,r3,r2
}
    97ac:	e037883a 	mov	sp,fp
    97b0:	dfc00117 	ldw	ra,4(sp)
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00204 	addi	sp,sp,8
    97bc:	f800283a 	ret

000097c0 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    97c0:	defffc04 	addi	sp,sp,-16
    97c4:	dfc00315 	stw	ra,12(sp)
    97c8:	df000215 	stw	fp,8(sp)
    97cc:	df000204 	addi	fp,sp,8
    97d0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    97d4:	010000f4 	movhi	r4,3
    97d8:	21210604 	addi	r4,r4,-31720
    97dc:	000f0340 	call	f034 <puts>
	uint8_t gpin = 0;
    97e0:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    97e4:	01402a04 	movi	r5,168
    97e8:	e13fff17 	ldw	r4,-4(fp)
    97ec:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    97f0:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    97f4:	e0fffe03 	ldbu	r3,-8(fp)
    97f8:	00bffc04 	movi	r2,-16
    97fc:	1884703a 	and	r2,r3,r2
    9800:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9804:	01402804 	movi	r5,160
    9808:	e13fff17 	ldw	r4,-4(fp)
    980c:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9810:	10803fcc 	andi	r2,r2,255
    9814:	1005d13a 	srai	r2,r2,4
    9818:	1007883a 	mov	r3,r2
    981c:	e0bffe03 	ldbu	r2,-8(fp)
    9820:	1884b03a 	or	r2,r3,r2
    9824:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9828:	e0bffe03 	ldbu	r2,-8(fp)
}
    982c:	e037883a 	mov	sp,fp
    9830:	dfc00117 	ldw	ra,4(sp)
    9834:	df000017 	ldw	fp,0(sp)
    9838:	dec00204 	addi	sp,sp,8
    983c:	f800283a 	ret

00009840 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9840:	defffc04 	addi	sp,sp,-16
    9844:	dfc00315 	stw	ra,12(sp)
    9848:	df000215 	stw	fp,8(sp)
    984c:	df000204 	addi	fp,sp,8
    9850:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9854:	010000f4 	movhi	r4,3
    9858:	21210a04 	addi	r4,r4,-31704
    985c:	000f0340 	call	f034 <puts>
	uint8_t gpout = 0;
    9860:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9864:	01402804 	movi	r5,160
    9868:	e13fff17 	ldw	r4,-4(fp)
    986c:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9870:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9874:	e0bffe03 	ldbu	r2,-8(fp)
    9878:	108003cc 	andi	r2,r2,15
    987c:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9880:	01402a04 	movi	r5,168
    9884:	e13fff17 	ldw	r4,-4(fp)
    9888:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    988c:	10803fcc 	andi	r2,r2,255
    9890:	1004913a 	slli	r2,r2,4
    9894:	1007883a 	mov	r3,r2
    9898:	e0bffe03 	ldbu	r2,-8(fp)
    989c:	1884b03a 	or	r2,r3,r2
    98a0:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    98a4:	e0bffe03 	ldbu	r2,-8(fp)
}
    98a8:	e037883a 	mov	sp,fp
    98ac:	dfc00117 	ldw	ra,4(sp)
    98b0:	df000017 	ldw	fp,0(sp)
    98b4:	dec00204 	addi	sp,sp,8
    98b8:	f800283a 	ret

000098bc <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    98bc:	defffc04 	addi	sp,sp,-16
    98c0:	dfc00315 	stw	ra,12(sp)
    98c4:	df000215 	stw	fp,8(sp)
    98c8:	df000204 	addi	fp,sp,8
    98cc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    98d0:	010000f4 	movhi	r4,3
    98d4:	21211004 	addi	r4,r4,-31680
    98d8:	000f0340 	call	f034 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    98dc:	0007883a 	mov	r3,zero
    98e0:	00810034 	movhi	r2,1024
    98e4:	10847404 	addi	r2,r2,4560
    98e8:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    98ec:	010003f4 	movhi	r4,15
    98f0:	21109004 	addi	r4,r4,16960
    98f4:	001f9bc0 	call	1f9bc <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    98f8:	00c00044 	movi	r3,1
    98fc:	00810034 	movhi	r2,1024
    9900:	10847404 	addi	r2,r2,4560
    9904:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9908:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    990c:	01800804 	movi	r6,32
    9910:	01401e04 	movi	r5,120
    9914:	e13fff17 	ldw	r4,-4(fp)
    9918:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    991c:	000d883a 	mov	r6,zero
    9920:	01401e04 	movi	r5,120
    9924:	e13fff17 	ldw	r4,-4(fp)
    9928:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    992c:	e0bffe0b 	ldhu	r2,-8(fp)
    9930:	10800044 	addi	r2,r2,1
    9934:	e0bffe0d 	sth	r2,-8(fp)
    9938:	e0bffe0b 	ldhu	r2,-8(fp)
    993c:	1004c03a 	cmpne	r2,r2,zero
    9940:	10803fcc 	andi	r2,r2,255
    9944:	10000a26 	beq	r2,zero,9970 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9948:	01401a04 	movi	r5,104
    994c:	e13fff17 	ldw	r4,-4(fp)
    9950:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9954:	10803fcc 	andi	r2,r2,255
    9958:	1080004c 	andi	r2,r2,1
    995c:	1004c03a 	cmpne	r2,r2,zero
    9960:	10803fcc 	andi	r2,r2,255
    9964:	1000011e 	bne	r2,zero,996c <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9968:	003ff006 	br	992c <__alt_data_end+0xfc00992c>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    996c:	0001883a 	nop
		}
	}
	return ( i);
    9970:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9974:	e037883a 	mov	sp,fp
    9978:	dfc00117 	ldw	ra,4(sp)
    997c:	df000017 	ldw	fp,0(sp)
    9980:	dec00204 	addi	sp,sp,8
    9984:	f800283a 	ret

00009988 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9988:	defffe04 	addi	sp,sp,-8
    998c:	df000115 	stw	fp,4(sp)
    9990:	df000104 	addi	fp,sp,4
    9994:	2005883a 	mov	r2,r4
    9998:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    999c:	00800044 	movi	r2,1
}
    99a0:	e037883a 	mov	sp,fp
    99a4:	df000017 	ldw	fp,0(sp)
    99a8:	dec00104 	addi	sp,sp,4
    99ac:	f800283a 	ret

000099b0 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    99b0:	defffd04 	addi	sp,sp,-12
    99b4:	dfc00215 	stw	ra,8(sp)
    99b8:	df000115 	stw	fp,4(sp)
    99bc:	df000104 	addi	fp,sp,4
    99c0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    99c4:	010000f4 	movhi	r4,3
    99c8:	21211404 	addi	r4,r4,-31664
    99cc:	000f0340 	call	f034 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    99d0:	01800604 	movi	r6,24
    99d4:	01402204 	movi	r5,136
    99d8:	e13fff17 	ldw	r4,-4(fp)
    99dc:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    99e0:	e13fff17 	ldw	r4,-4(fp)
    99e4:	00098bc0 	call	98bc <_ZN8MAX3421e5resetEv>
    99e8:	10bfffcc 	andi	r2,r2,65535
    99ec:	1005003a 	cmpeq	r2,r2,zero
    99f0:	10803fcc 	andi	r2,r2,255
    99f4:	10000226 	beq	r2,zero,9a00 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    99f8:	00bfffc4 	movi	r2,-1
    99fc:	00002006 	br	9a80 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a00:	01803044 	movi	r6,193
    9a04:	01403604 	movi	r5,216
    9a08:	e13fff17 	ldw	r4,-4(fp)
    9a0c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a10:	01801804 	movi	r6,96
    9a14:	01403404 	movi	r5,208
    9a18:	e13fff17 	ldw	r4,-4(fp)
    9a1c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a20:	01800104 	movi	r6,4
    9a24:	01403a04 	movi	r5,232
    9a28:	e13fff17 	ldw	r4,-4(fp)
    9a2c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a30:	01403a04 	movi	r5,232
    9a34:	e13fff17 	ldw	r4,-4(fp)
    9a38:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9a3c:	10803fcc 	andi	r2,r2,255
    9a40:	1080010c 	andi	r2,r2,4
    9a44:	1005003a 	cmpeq	r2,r2,zero
    9a48:	10803fcc 	andi	r2,r2,255
    9a4c:	10000126 	beq	r2,zero,9a54 <_ZN8MAX3421e4InitEv+0xa4>
    9a50:	003ff706 	br	9a30 <__alt_data_end+0xfc009a30>

	busprobe(); //check if anything is connected
    9a54:	e13fff17 	ldw	r4,-4(fp)
    9a58:	0009bac0 	call	9bac <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9a5c:	01800804 	movi	r6,32
    9a60:	01403204 	movi	r5,200
    9a64:	e13fff17 	ldw	r4,-4(fp)
    9a68:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9a6c:	01800044 	movi	r6,1
    9a70:	01402004 	movi	r5,128
    9a74:	e13fff17 	ldw	r4,-4(fp)
    9a78:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9a7c:	0005883a 	mov	r2,zero
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	dfc00117 	ldw	ra,4(sp)
    9a88:	df000017 	ldw	fp,0(sp)
    9a8c:	dec00204 	addi	sp,sp,8
    9a90:	f800283a 	ret

00009a94 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9a94:	defffc04 	addi	sp,sp,-16
    9a98:	dfc00315 	stw	ra,12(sp)
    9a9c:	df000215 	stw	fp,8(sp)
    9aa0:	df000204 	addi	fp,sp,8
    9aa4:	e13ffe15 	stw	r4,-8(fp)
    9aa8:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9aac:	010000f4 	movhi	r4,3
    9ab0:	21211804 	addi	r4,r4,-31648
    9ab4:	000f0340 	call	f034 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9ab8:	01800644 	movi	r6,25
    9abc:	01402204 	movi	r5,136
    9ac0:	e13ffe17 	ldw	r4,-8(fp)
    9ac4:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9ac8:	e13ffe17 	ldw	r4,-8(fp)
    9acc:	00098bc0 	call	98bc <_ZN8MAX3421e5resetEv>
    9ad0:	10bfffcc 	andi	r2,r2,65535
    9ad4:	1005003a 	cmpeq	r2,r2,zero
    9ad8:	10803fcc 	andi	r2,r2,255
    9adc:	10000226 	beq	r2,zero,9ae8 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9ae0:	00bfffc4 	movi	r2,-1
    9ae4:	00002c06 	br	9b98 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9ae8:	e0bfff17 	ldw	r2,-4(fp)
    9aec:	1080fa08 	cmpgei	r2,r2,1000
    9af0:	1000021e 	bne	r2,zero,9afc <_ZN8MAX3421e4InitEi+0x68>
    9af4:	0080fa04 	movi	r2,1000
    9af8:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9afc:	e0bfff17 	ldw	r2,-4(fp)
    9b00:	1009883a 	mov	r4,r2
    9b04:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9b08:	01803044 	movi	r6,193
    9b0c:	01403604 	movi	r5,216
    9b10:	e13ffe17 	ldw	r4,-8(fp)
    9b14:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9b18:	01801804 	movi	r6,96
    9b1c:	01403404 	movi	r5,208
    9b20:	e13ffe17 	ldw	r4,-8(fp)
    9b24:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9b28:	01800104 	movi	r6,4
    9b2c:	01403a04 	movi	r5,232
    9b30:	e13ffe17 	ldw	r4,-8(fp)
    9b34:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9b38:	01403a04 	movi	r5,232
    9b3c:	e13ffe17 	ldw	r4,-8(fp)
    9b40:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9b44:	10803fcc 	andi	r2,r2,255
    9b48:	1080010c 	andi	r2,r2,4
    9b4c:	1005003a 	cmpeq	r2,r2,zero
    9b50:	10803fcc 	andi	r2,r2,255
    9b54:	10000126 	beq	r2,zero,9b5c <_ZN8MAX3421e4InitEi+0xc8>
    9b58:	003ff706 	br	9b38 <__alt_data_end+0xfc009b38>

	busprobe(); //check if anything is connected
    9b5c:	e13ffe17 	ldw	r4,-8(fp)
    9b60:	0009bac0 	call	9bac <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9b64:	01800804 	movi	r6,32
    9b68:	01403204 	movi	r5,200
    9b6c:	e13ffe17 	ldw	r4,-8(fp)
    9b70:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9b74:	01800044 	movi	r6,1
    9b78:	01402004 	movi	r5,128
    9b7c:	e13ffe17 	ldw	r4,-8(fp)
    9b80:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9b84:	01800604 	movi	r6,24
    9b88:	01402204 	movi	r5,136
    9b8c:	e13ffe17 	ldw	r4,-8(fp)
    9b90:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9b94:	0005883a 	mov	r2,zero
}
    9b98:	e037883a 	mov	sp,fp
    9b9c:	dfc00117 	ldw	ra,4(sp)
    9ba0:	df000017 	ldw	fp,0(sp)
    9ba4:	dec00204 	addi	sp,sp,8
    9ba8:	f800283a 	ret

00009bac <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9bac:	defffc04 	addi	sp,sp,-16
    9bb0:	dfc00315 	stw	ra,12(sp)
    9bb4:	df000215 	stw	fp,8(sp)
    9bb8:	df000204 	addi	fp,sp,8
    9bbc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9bc0:	010000f4 	movhi	r4,3
    9bc4:	21211e04 	addi	r4,r4,-31624
    9bc8:	000f0340 	call	f034 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9bcc:	01403e04 	movi	r5,248
    9bd0:	e13fff17 	ldw	r4,-4(fp)
    9bd4:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9bd8:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9bdc:	e0fffe03 	ldbu	r3,-8(fp)
    9be0:	00bff004 	movi	r2,-64
    9be4:	1884703a 	and	r2,r3,r2
    9be8:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9bec:	e0bffe03 	ldbu	r2,-8(fp)
    9bf0:	10c01020 	cmpeqi	r3,r2,64
    9bf4:	1800251e 	bne	r3,zero,9c8c <_ZN8MAX3421e8busprobeEv+0xe0>
    9bf8:	10c01048 	cmpgei	r3,r2,65
    9bfc:	1800021e 	bne	r3,zero,9c08 <_ZN8MAX3421e8busprobeEv+0x5c>
    9c00:	10003b26 	beq	r2,zero,9cf0 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c04:	00004006 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9c08:	10c02020 	cmpeqi	r3,r2,128
    9c0c:	1800031e 	bne	r3,zero,9c1c <_ZN8MAX3421e8busprobeEv+0x70>
    9c10:	10803020 	cmpeqi	r2,r2,192
    9c14:	1000331e 	bne	r2,zero,9ce4 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c18:	00003b06 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c1c:	01403604 	movi	r5,216
    9c20:	e13fff17 	ldw	r4,-4(fp)
    9c24:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9c28:	10803fcc 	andi	r2,r2,255
    9c2c:	1080008c 	andi	r2,r2,2
    9c30:	1005003a 	cmpeq	r2,r2,zero
    9c34:	10803fcc 	andi	r2,r2,255
    9c38:	10000a26 	beq	r2,zero,9c64 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9c3c:	010000f4 	movhi	r4,3
    9c40:	21212304 	addi	r4,r4,-31604
    9c44:	000f0340 	call	f034 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c48:	01803244 	movi	r6,201
    9c4c:	01403604 	movi	r5,216
    9c50:	e13fff17 	ldw	r4,-4(fp)
    9c54:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9c58:	00800084 	movi	r2,2
    9c5c:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9c60:	00002906 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9c64:	010000f4 	movhi	r4,3
    9c68:	21212a04 	addi	r4,r4,-31576
    9c6c:	000f0340 	call	f034 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9c70:	018032c4 	movi	r6,203
    9c74:	01403604 	movi	r5,216
    9c78:	e13fff17 	ldw	r4,-4(fp)
    9c7c:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9c80:	008000c4 	movi	r2,3
    9c84:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9c88:	00001f06 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c8c:	01403604 	movi	r5,216
    9c90:	e13fff17 	ldw	r4,-4(fp)
    9c94:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9c98:	10803fcc 	andi	r2,r2,255
    9c9c:	1080008c 	andi	r2,r2,2
    9ca0:	1005003a 	cmpeq	r2,r2,zero
    9ca4:	10803fcc 	andi	r2,r2,255
    9ca8:	10000726 	beq	r2,zero,9cc8 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9cac:	018032c4 	movi	r6,203
    9cb0:	01403604 	movi	r5,216
    9cb4:	e13fff17 	ldw	r4,-4(fp)
    9cb8:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9cbc:	008000c4 	movi	r2,3
    9cc0:	d0b23b45 	stb	r2,-14099(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9cc4:	00001006 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9cc8:	01803244 	movi	r6,201
    9ccc:	01403604 	movi	r5,216
    9cd0:	e13fff17 	ldw	r4,-4(fp)
    9cd4:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9cd8:	00800084 	movi	r2,2
    9cdc:	d0b23b45 	stb	r2,-14099(gp)
			}
			break;
    9ce0:	00000906 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9ce4:	00800044 	movi	r2,1
    9ce8:	d0b23b45 	stb	r2,-14099(gp)
			break;
    9cec:	00000606 	br	9d08 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9cf0:	01803444 	movi	r6,209
    9cf4:	01403604 	movi	r5,216
    9cf8:	e13fff17 	ldw	r4,-4(fp)
    9cfc:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9d00:	d0323b45 	stb	zero,-14099(gp)
			break;
    9d04:	0001883a 	nop
	}//end switch( bus_sample )
}
    9d08:	0001883a 	nop
    9d0c:	e037883a 	mov	sp,fp
    9d10:	dfc00117 	ldw	ra,4(sp)
    9d14:	df000017 	ldw	fp,0(sp)
    9d18:	dec00204 	addi	sp,sp,8
    9d1c:	f800283a 	ret

00009d20 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9d20:	defffc04 	addi	sp,sp,-16
    9d24:	dfc00315 	stw	ra,12(sp)
    9d28:	df000215 	stw	fp,8(sp)
    9d2c:	df000204 	addi	fp,sp,8
    9d30:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9d34:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9d38:	00810034 	movhi	r2,1024
    9d3c:	10847c04 	addi	r2,r2,4592
    9d40:	10800003 	ldbu	r2,0(r2)
    9d44:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9d48:	00810034 	movhi	r2,1024
    9d4c:	10847c04 	addi	r2,r2,4592
    9d50:	10800037 	ldwio	r2,0(r2)
    9d54:	1005003a 	cmpeq	r2,r2,zero
    9d58:	10803fcc 	andi	r2,r2,255
    9d5c:	10000326 	beq	r2,zero,9d6c <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9d60:	e13fff17 	ldw	r4,-4(fp)
    9d64:	0009d840 	call	9d84 <_ZN8MAX3421e10IntHandlerEv>
    9d68:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9d6c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9d70:	e037883a 	mov	sp,fp
    9d74:	dfc00117 	ldw	ra,4(sp)
    9d78:	df000017 	ldw	fp,0(sp)
    9d7c:	dec00204 	addi	sp,sp,8
    9d80:	f800283a 	ret

00009d84 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9d84:	defffc04 	addi	sp,sp,-16
    9d88:	dfc00315 	stw	ra,12(sp)
    9d8c:	df000215 	stw	fp,8(sp)
    9d90:	df000204 	addi	fp,sp,8
    9d94:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9d98:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9d9c:	01403204 	movi	r5,200
    9da0:	e13fff17 	ldw	r4,-4(fp)
    9da4:	00096c00 	call	96c0 <_ZN8MAX3421e5regRdEh>
    9da8:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9dac:	e0bffe43 	ldbu	r2,-7(fp)
    9db0:	1080080c 	andi	r2,r2,32
    9db4:	10000526 	beq	r2,zero,9dcc <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9db8:	e13fff17 	ldw	r4,-4(fp)
    9dbc:	0009bac0 	call	9bac <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9dc0:	e0bffe03 	ldbu	r2,-8(fp)
    9dc4:	10800814 	ori	r2,r2,32
    9dc8:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9dcc:	e0bffe03 	ldbu	r2,-8(fp)
    9dd0:	100d883a 	mov	r6,r2
    9dd4:	01403204 	movi	r5,200
    9dd8:	e13fff17 	ldw	r4,-4(fp)
    9ddc:	000948c0 	call	948c <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9de0:	e0bffe03 	ldbu	r2,-8(fp)
}
    9de4:	e037883a 	mov	sp,fp
    9de8:	dfc00117 	ldw	ra,4(sp)
    9dec:	df000017 	ldw	fp,0(sp)
    9df0:	dec00204 	addi	sp,sp,8
    9df4:	f800283a 	ret

00009df8 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9df8:	defffe04 	addi	sp,sp,-8
    9dfc:	df000115 	stw	fp,4(sp)
    9e00:	df000104 	addi	fp,sp,4
    9e04:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9e08:	0005883a 	mov	r2,zero
}
    9e0c:	e037883a 	mov	sp,fp
    9e10:	df000017 	ldw	fp,0(sp)
    9e14:	dec00104 	addi	sp,sp,4
    9e18:	f800283a 	ret

00009e1c <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev;

void MIDI_poll();

void onInit()
{
    9e1c:	defff804 	addi	sp,sp,-32
    9e20:	dfc00715 	stw	ra,28(sp)
    9e24:	df000615 	stw	fp,24(sp)
    9e28:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9e2c:	010000f4 	movhi	r4,3
    9e30:	21045504 	addi	r4,r4,4436
    9e34:	000a4300 	call	a430 <_ZN9USBH_MIDI8idVendorEv>
    9e38:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9e3c:	010000f4 	movhi	r4,3
    9e40:	21045504 	addi	r4,r4,4436
    9e44:	000a4580 	call	a458 <_ZN9USBH_MIDI9idProductEv>
    9e48:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9e4c:	e0fffa0b 	ldhu	r3,-24(fp)
    9e50:	e13ffa8b 	ldhu	r4,-22(fp)
    9e54:	e0bffb04 	addi	r2,fp,-20
    9e58:	200f883a 	mov	r7,r4
    9e5c:	180d883a 	mov	r6,r3
    9e60:	014000f4 	movhi	r5,3
    9e64:	29696604 	addi	r5,r5,-23144
    9e68:	1009883a 	mov	r4,r2
    9e6c:	000f3f80 	call	f3f8 <sprintf>
  printf("%s\n", buf);
    9e70:	e0bffb04 	addi	r2,fp,-20
    9e74:	1009883a 	mov	r4,r2
    9e78:	000f0340 	call	f034 <puts>
}
    9e7c:	0001883a 	nop
    9e80:	e037883a 	mov	sp,fp
    9e84:	dfc00117 	ldw	ra,4(sp)
    9e88:	df000017 	ldw	fp,0(sp)
    9e8c:	dec00204 	addi	sp,sp,8
    9e90:	f800283a 	ret

00009e94 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9e94:	defffe04 	addi	sp,sp,-8
    9e98:	dfc00115 	stw	ra,4(sp)
    9e9c:	df000015 	stw	fp,0(sp)
    9ea0:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9ea4:	010000f4 	movhi	r4,3
    9ea8:	21042604 	addi	r4,r4,4248
    9eac:	00099b00 	call	99b0 <_ZN8MAX3421e4InitEv>
    9eb0:	10803fcc 	andi	r2,r2,255
    9eb4:	1080201c 	xori	r2,r2,128
    9eb8:	10bfe004 	addi	r2,r2,-128
    9ebc:	10bfffe0 	cmpeqi	r2,r2,-1
    9ec0:	10803fcc 	andi	r2,r2,255
    9ec4:	10000326 	beq	r2,zero,9ed4 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9ec8:	010000f4 	movhi	r4,3
    9ecc:	21296b04 	addi	r4,r4,-23124
    9ed0:	000ef180 	call	ef18 <printf>
	printf ("USB Started\n\r");
    9ed4:	010000f4 	movhi	r4,3
    9ed8:	21296d04 	addi	r4,r4,-23116
    9edc:	000ef180 	call	ef18 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9ee0:	01400074 	movhi	r5,1
    9ee4:	29678704 	addi	r5,r5,-25060
    9ee8:	010000f4 	movhi	r4,3
    9eec:	21045504 	addi	r4,r4,4436
    9ef0:	000a4800 	call	a480 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9ef4:	0001883a 	nop
    9ef8:	e037883a 	mov	sp,fp
    9efc:	dfc00117 	ldw	ra,4(sp)
    9f00:	df000017 	ldw	fp,0(sp)
    9f04:	dec00204 	addi	sp,sp,8
    9f08:	f800283a 	ret

00009f0c <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    9f0c:	deffea04 	addi	sp,sp,-88
    9f10:	dfc01515 	stw	ra,84(sp)
    9f14:	df001415 	stw	fp,80(sp)
    9f18:	df001404 	addi	fp,sp,80
  uint8_t note, vel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9f1c:	e0ffef04 	addi	r3,fp,-68
    9f20:	e0bfff04 	addi	r2,fp,-4
    9f24:	180d883a 	mov	r6,r3
    9f28:	100b883a 	mov	r5,r2
    9f2c:	010000f4 	movhi	r4,3
    9f30:	21045504 	addi	r4,r4,4436
    9f34:	00079e00 	call	79e0 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9f38:	10803fcc 	andi	r2,r2,255
    9f3c:	1005003a 	cmpeq	r2,r2,zero
    9f40:	10803fcc 	andi	r2,r2,255
    9f44:	10008b26 	beq	r2,zero,a174 <_Z9MIDI_pollv+0x268>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    9f48:	e03fec15 	stw	zero,-80(fp)
    9f4c:	e0bfec17 	ldw	r2,-80(fp)
    9f50:	10801008 	cmpgei	r2,r2,64
    9f54:	1000871e 	bne	r2,zero,a174 <_Z9MIDI_pollv+0x268>
    	switch (bufMidi[i] & MIDI_MASK) {
    9f58:	e0ffef04 	addi	r3,fp,-68
    9f5c:	e0bfec17 	ldw	r2,-80(fp)
    9f60:	1885883a 	add	r2,r3,r2
    9f64:	10800003 	ldbu	r2,0(r2)
    9f68:	10803fcc 	andi	r2,r2,255
    9f6c:	10803c0c 	andi	r2,r2,240
    9f70:	10c02420 	cmpeqi	r3,r2,144
    9f74:	1800181e 	bne	r3,zero,9fd8 <_Z9MIDI_pollv+0xcc>
    9f78:	10c02448 	cmpgei	r3,r2,145
    9f7c:	1800031e 	bne	r3,zero,9f8c <_Z9MIDI_pollv+0x80>
    9f80:	10802020 	cmpeqi	r2,r2,128
    9f84:	1000061e 	bne	r2,zero,9fa0 <_Z9MIDI_pollv+0x94>
				printf("%X\n", bufMidi[i]);
				printf("%X\n", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9f88:	00007606 	br	a164 <_Z9MIDI_pollv+0x258>
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & MIDI_MASK) {
    9f8c:	10c02c20 	cmpeqi	r3,r2,176
    9f90:	1800261e 	bne	r3,zero,a02c <_Z9MIDI_pollv+0x120>
    9f94:	10803820 	cmpeqi	r2,r2,224
    9f98:	1000511e 	bne	r2,zero,a0e0 <_Z9MIDI_pollv+0x1d4>
				printf("%X\n", bufMidi[i]);
				printf("%X\n", bufMidi[i+1]);
				printf("%X\n", bufMidi[i+2]);
				break;
			default:
				break;
    9f9c:	00007106 	br	a164 <_Z9MIDI_pollv+0x258>

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    	switch (bufMidi[i] & MIDI_MASK) {
			case NOTE_OFF:
				note = bufMidi[i+1];
    9fa0:	e0bfec17 	ldw	r2,-80(fp)
    9fa4:	10800044 	addi	r2,r2,1
    9fa8:	e0ffef04 	addi	r3,fp,-68
    9fac:	1885883a 	add	r2,r3,r2
    9fb0:	10800003 	ldbu	r2,0(r2)
    9fb4:	e0bfed05 	stb	r2,-76(fp)
				i += 2;
    9fb8:	e0bfec17 	ldw	r2,-80(fp)
    9fbc:	10800084 	addi	r2,r2,2
    9fc0:	e0bfec15 	stw	r2,-80(fp)
				set_note(note, 0x00);
    9fc4:	e0bfed03 	ldbu	r2,-76(fp)
    9fc8:	000b883a 	mov	r5,zero
    9fcc:	1009883a 	mov	r4,r2
    9fd0:	00051b00 	call	51b0 <_Z8set_notehh>
				//printf("Note Off\n");
				break;
    9fd4:	00006306 	br	a164 <_Z9MIDI_pollv+0x258>
			case NOTE_ON:
				note = bufMidi[i+1];
    9fd8:	e0bfec17 	ldw	r2,-80(fp)
    9fdc:	10800044 	addi	r2,r2,1
    9fe0:	e0ffef04 	addi	r3,fp,-68
    9fe4:	1885883a 	add	r2,r3,r2
    9fe8:	10800003 	ldbu	r2,0(r2)
    9fec:	e0bfed05 	stb	r2,-76(fp)
				vel = bufMidi[i+2];
    9ff0:	e0bfec17 	ldw	r2,-80(fp)
    9ff4:	10800084 	addi	r2,r2,2
    9ff8:	e0ffef04 	addi	r3,fp,-68
    9ffc:	1885883a 	add	r2,r3,r2
    a000:	10800003 	ldbu	r2,0(r2)
    a004:	e0bfed45 	stb	r2,-75(fp)
				i += 2;
    a008:	e0bfec17 	ldw	r2,-80(fp)
    a00c:	10800084 	addi	r2,r2,2
    a010:	e0bfec15 	stw	r2,-80(fp)
				set_note(note, vel);
    a014:	e0bfed03 	ldbu	r2,-76(fp)
    a018:	e0ffed43 	ldbu	r3,-75(fp)
    a01c:	180b883a 	mov	r5,r3
    a020:	1009883a 	mov	r4,r2
    a024:	00051b00 	call	51b0 <_Z8set_notehh>
				//if (vel) printf("Note On\n");
				//else printf("Note Off\n");
				break;
    a028:	00004e06 	br	a164 <_Z9MIDI_pollv+0x258>
			case CONTROL_CHANGE:
				//PEDAL CONTROLS HERE
				ctrl = bufMidi[i+1];
    a02c:	e0bfec17 	ldw	r2,-80(fp)
    a030:	10800044 	addi	r2,r2,1
    a034:	e0ffef04 	addi	r3,fp,-68
    a038:	1885883a 	add	r2,r3,r2
    a03c:	10800003 	ldbu	r2,0(r2)
    a040:	e0bfed85 	stb	r2,-74(fp)
				par = bufMidi[i+2];
    a044:	e0bfec17 	ldw	r2,-80(fp)
    a048:	10800084 	addi	r2,r2,2
    a04c:	e0ffef04 	addi	r3,fp,-68
    a050:	1885883a 	add	r2,r3,r2
    a054:	10800003 	ldbu	r2,0(r2)
    a058:	e0bfedc5 	stb	r2,-73(fp)
				long_par = par;
    a05c:	e0bfedc3 	ldbu	r2,-73(fp)
    a060:	e0bfee15 	stw	r2,-72(fp)
				switch(ctrl) {
    a064:	e0bfed83 	ldbu	r2,-74(fp)
    a068:	10c00060 	cmpeqi	r3,r2,1
    a06c:	1800061e 	bne	r3,zero,a088 <_Z9MIDI_pollv+0x17c>
    a070:	10801020 	cmpeqi	r2,r2,64
    a074:	10000826 	beq	r2,zero,a098 <_Z9MIDI_pollv+0x18c>
					case SUSTAIN_PEDAL:
						set_adsr(SUS, long_par);
    a078:	e17fee17 	ldw	r5,-72(fp)
    a07c:	010001c4 	movi	r4,7
    a080:	00052300 	call	5230 <_Z8set_adsrhm>
						break;
    a084:	00001206 	br	a0d0 <_Z9MIDI_pollv+0x1c4>
					case MOD_WHEEL:
						printf("Mod Wheel\n");
    a088:	010000f4 	movhi	r4,3
    a08c:	21297104 	addi	r4,r4,-23100
    a090:	000f0340 	call	f034 <puts>
						break;
    a094:	00000e06 	br	a0d0 <_Z9MIDI_pollv+0x1c4>
					default:
						printf("Other Control Change");
    a098:	010000f4 	movhi	r4,3
    a09c:	21297404 	addi	r4,r4,-23088
    a0a0:	000ef180 	call	ef18 <printf>
						printf("%X\n", ctrl);
    a0a4:	e0bfed83 	ldbu	r2,-74(fp)
    a0a8:	100b883a 	mov	r5,r2
    a0ac:	010000f4 	movhi	r4,3
    a0b0:	21297a04 	addi	r4,r4,-23064
    a0b4:	000ef180 	call	ef18 <printf>
						printf("%X\n", par);
    a0b8:	e0bfedc3 	ldbu	r2,-73(fp)
    a0bc:	100b883a 	mov	r5,r2
    a0c0:	010000f4 	movhi	r4,3
    a0c4:	21297a04 	addi	r4,r4,-23064
    a0c8:	000ef180 	call	ef18 <printf>
						break;
    a0cc:	0001883a 	nop
				}
				i += 2;
    a0d0:	e0bfec17 	ldw	r2,-80(fp)
    a0d4:	10800084 	addi	r2,r2,2
    a0d8:	e0bfec15 	stw	r2,-80(fp)
				break;
    a0dc:	00002106 	br	a164 <_Z9MIDI_pollv+0x258>
			case PITCH_BEND:
				//PITCH WHEEL CONTROLS HERE
				printf("Pitch Bend\n");
    a0e0:	010000f4 	movhi	r4,3
    a0e4:	21297b04 	addi	r4,r4,-23060
    a0e8:	000f0340 	call	f034 <puts>
				printf("%X\n", bufMidi[i]);
    a0ec:	e0ffef04 	addi	r3,fp,-68
    a0f0:	e0bfec17 	ldw	r2,-80(fp)
    a0f4:	1885883a 	add	r2,r3,r2
    a0f8:	10800003 	ldbu	r2,0(r2)
    a0fc:	10803fcc 	andi	r2,r2,255
    a100:	100b883a 	mov	r5,r2
    a104:	010000f4 	movhi	r4,3
    a108:	21297a04 	addi	r4,r4,-23064
    a10c:	000ef180 	call	ef18 <printf>
				printf("%X\n", bufMidi[i+1]);
    a110:	e0bfec17 	ldw	r2,-80(fp)
    a114:	10800044 	addi	r2,r2,1
    a118:	e0ffef04 	addi	r3,fp,-68
    a11c:	1885883a 	add	r2,r3,r2
    a120:	10800003 	ldbu	r2,0(r2)
    a124:	10803fcc 	andi	r2,r2,255
    a128:	100b883a 	mov	r5,r2
    a12c:	010000f4 	movhi	r4,3
    a130:	21297a04 	addi	r4,r4,-23064
    a134:	000ef180 	call	ef18 <printf>
				printf("%X\n", bufMidi[i+2]);
    a138:	e0bfec17 	ldw	r2,-80(fp)
    a13c:	10800084 	addi	r2,r2,2
    a140:	e0ffef04 	addi	r3,fp,-68
    a144:	1885883a 	add	r2,r3,r2
    a148:	10800003 	ldbu	r2,0(r2)
    a14c:	10803fcc 	andi	r2,r2,255
    a150:	100b883a 	mov	r5,r2
    a154:	010000f4 	movhi	r4,3
    a158:	21297a04 	addi	r4,r4,-23064
    a15c:	000ef180 	call	ef18 <printf>
				break;
    a160:	0001883a 	nop
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
    a164:	e0bfec17 	ldw	r2,-80(fp)
    a168:	10800044 	addi	r2,r2,1
    a16c:	e0bfec15 	stw	r2,-80(fp)
    a170:	003f7606 	br	9f4c <__alt_data_end+0xfc009f4c>
			default:
				break;
    	}
    }
  }
}
    a174:	0001883a 	nop
    a178:	e037883a 	mov	sp,fp
    a17c:	dfc00117 	ldw	ra,4(sp)
    a180:	df000017 	ldw	fp,0(sp)
    a184:	dec00204 	addi	sp,sp,8
    a188:	f800283a 	ret

0000a18c <_Z7controlv>:

void control() {
    a18c:	defffd04 	addi	sp,sp,-12
    a190:	dfc00215 	stw	ra,8(sp)
    a194:	df000115 	stw	fp,4(sp)
    a198:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a19c:	00810034 	movhi	r2,1024
    a1a0:	10848804 	addi	r2,r2,4640
    a1a4:	10800037 	ldwio	r2,0(r2)
    a1a8:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a1ac:	e0bfff03 	ldbu	r2,-4(fp)
    a1b0:	1080004c 	andi	r2,r2,1
    a1b4:	1000031e 	bne	r2,zero,a1c4 <_Z7controlv+0x38>
    a1b8:	e0bfff03 	ldbu	r2,-4(fp)
    a1bc:	1080008c 	andi	r2,r2,2
    a1c0:	10000e26 	beq	r2,zero,a1fc <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a1c4:	e0bfff03 	ldbu	r2,-4(fp)
    a1c8:	1080004c 	andi	r2,r2,1
    a1cc:	1000041e 	bne	r2,zero,a1e0 <_Z7controlv+0x54>
    a1d0:	d0b23c17 	ldw	r2,-14096(gp)
    a1d4:	1009883a 	mov	r4,r2
    a1d8:	0006d6c0 	call	6d6c <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a1dc:	00000706 	br	a1fc <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a1e0:	e0bfff03 	ldbu	r2,-4(fp)
    a1e4:	1080008c 	andi	r2,r2,2
    a1e8:	1000041e 	bne	r2,zero,a1fc <_Z7controlv+0x70>
    a1ec:	d0b23c17 	ldw	r2,-14096(gp)
    a1f0:	1009883a 	mov	r4,r2
    a1f4:	0006e400 	call	6e40 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a1f8:	00000006 	br	a1fc <_Z7controlv+0x70>
    a1fc:	0001883a 	nop
    a200:	e037883a 	mov	sp,fp
    a204:	dfc00117 	ldw	ra,4(sp)
    a208:	df000017 	ldw	fp,0(sp)
    a20c:	dec00204 	addi	sp,sp,8
    a210:	f800283a 	ret

0000a214 <main>:

int main() {
    a214:	defffb04 	addi	sp,sp,-20
    a218:	dfc00415 	stw	ra,16(sp)
    a21c:	df000315 	stw	fp,12(sp)
    a220:	df000304 	addi	fp,sp,12

	uint8_t timer;

	//Initial ADSR values
	alt_u16 att_m_seconds = 10;
    a224:	00800284 	movi	r2,10
    a228:	e0bffd8d 	sth	r2,-10(fp)
	alt_u16 dec_m_seconds = 30;
    a22c:	00800784 	movi	r2,30
    a230:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16 rel_m_seconds = 80;
    a234:	00801404 	movi	r2,80
    a238:	e0bffe8d 	sth	r2,-6(fp)
	float peak_amp = 1.9;
    a23c:	008ffcf4 	movhi	r2,16371
    a240:	108cccc4 	addi	r2,r2,13107
    a244:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a248:	010000f4 	movhi	r4,3
    a24c:	21297e04 	addi	r4,r4,-23048
    a250:	000f0340 	call	f034 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a254:	010000f4 	movhi	r4,3
    a258:	21298504 	addi	r4,r4,-23020
    a25c:	001ff440 	call	1ff44 <alt_avalon_i2c_open>
    a260:	d0b23c15 	stw	r2,-14096(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a264:	d0b23c17 	ldw	r2,-14096(gp)
    a268:	1000031e 	bne	r2,zero,a278 <main+0x64>
    a26c:	010000f4 	movhi	r4,3
    a270:	21298804 	addi	r4,r4,-23008
    a274:	000f0340 	call	f034 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a278:	d0b23c17 	ldw	r2,-14096(gp)
    a27c:	1009883a 	mov	r4,r2
    a280:	0006abc0 	call	6abc <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a284:	010000f4 	movhi	r4,3
    a288:	21299004 	addi	r4,r4,-22976
    a28c:	000f0340 	call	f034 <puts>
	SGTL5000audio_on(i2c_dev);
    a290:	d0b23c17 	ldw	r2,-14096(gp)
    a294:	1009883a 	mov	r4,r2
    a298:	0006b540 	call	6b54 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    a29c:	d0b23c17 	ldw	r2,-14096(gp)
    a2a0:	1009883a 	mov	r4,r2
    a2a4:	0006bc00 	call	6bc0 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    a2a8:	010000f4 	movhi	r4,3
    a2ac:	21299504 	addi	r4,r4,-22956
    a2b0:	000f0340 	call	f034 <puts>

	printf("Initializing ADSR...\n");
    a2b4:	010000f4 	movhi	r4,3
    a2b8:	21299904 	addi	r4,r4,-22940
    a2bc:	000f0340 	call	f034 <puts>
	calc_adsr(att_m_seconds, dec_m_seconds, rel_m_seconds, peak_amp);
    a2c0:	e0bffd8b 	ldhu	r2,-10(fp)
    a2c4:	e0fffe0b 	ldhu	r3,-8(fp)
    a2c8:	e13ffe8b 	ldhu	r4,-6(fp)
    a2cc:	e1ffff17 	ldw	r7,-4(fp)
    a2d0:	200d883a 	mov	r6,r4
    a2d4:	180b883a 	mov	r5,r3
    a2d8:	1009883a 	mov	r4,r2
    a2dc:	000527c0 	call	527c <_Z9calc_adsrtttf>
	printf("ADSR set\n");
    a2e0:	010000f4 	movhi	r4,3
    a2e4:	21299f04 	addi	r4,r4,-22916
    a2e8:	000f0340 	call	f034 <puts>

	MIDI_setup();
    a2ec:	0009e940 	call	9e94 <_Z10MIDI_setupv>
	printf("MIDI set\n");
    a2f0:	010000f4 	movhi	r4,3
    a2f4:	2129a204 	addi	r4,r4,-22904
    a2f8:	000f0340 	call	f034 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a2fc:	010000f4 	movhi	r4,3
    a300:	21042604 	addi	r4,r4,4248
    a304:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a308:	10803fcc 	andi	r2,r2,255
    a30c:	10802418 	cmpnei	r2,r2,144
    a310:	10803fcc 	andi	r2,r2,255
    a314:	10000426 	beq	r2,zero,a328 <main+0x114>
		Usb.Task();
    a318:	010000f4 	movhi	r4,3
    a31c:	21042604 	addi	r4,r4,4248
    a320:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a324:	003ff506 	br	a2fc <__alt_data_end+0xfc00a2fc>
		Usb.Task();
	}
	printf("USB running\n");
    a328:	010000f4 	movhi	r4,3
    a32c:	2129a504 	addi	r4,r4,-22892
    a330:	000f0340 	call	f034 <puts>

	while(1) {
		if ( Midi ) {
    a334:	010000f4 	movhi	r4,3
    a338:	21045504 	addi	r4,r4,4436
    a33c:	000a4080 	call	a408 <_ZN9USBH_MIDIcvbEv>
    a340:	10803fcc 	andi	r2,r2,255
    a344:	10000126 	beq	r2,zero,a34c <main+0x138>
			MIDI_poll();
    a348:	0009f0c0 	call	9f0c <_Z9MIDI_pollv>
		}
		timer ++;
    a34c:	e0bffd03 	ldbu	r2,-12(fp)
    a350:	10800044 	addi	r2,r2,1
    a354:	e0bffd05 	stb	r2,-12(fp)
		if (timer & 0x40) {
    a358:	e0bffd03 	ldbu	r2,-12(fp)
    a35c:	1080100c 	andi	r2,r2,64
    a360:	103ff426 	beq	r2,zero,a334 <__alt_data_end+0xfc00a334>
			control();
    a364:	000a18c0 	call	a18c <_Z7controlv>
			timer = 0;
    a368:	e03ffd05 	stb	zero,-12(fp)
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    a36c:	003ff106 	br	a334 <__alt_data_end+0xfc00a334>

0000a370 <_Z41__static_initialization_and_destruction_0ii>:
		if (timer & 0x40) {
			control();
			timer = 0;
		}
	}
}
    a370:	defffc04 	addi	sp,sp,-16
    a374:	dfc00315 	stw	ra,12(sp)
    a378:	df000215 	stw	fp,8(sp)
    a37c:	df000204 	addi	fp,sp,8
    a380:	e13ffe15 	stw	r4,-8(fp)
    a384:	e17fff15 	stw	r5,-4(fp)
    a388:	e0bffe17 	ldw	r2,-8(fp)
    a38c:	10800058 	cmpnei	r2,r2,1
    a390:	10000b1e 	bne	r2,zero,a3c0 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a394:	e0ffff17 	ldw	r3,-4(fp)
    a398:	00bfffd4 	movui	r2,65535
    a39c:	1880081e 	bne	r3,r2,a3c0 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    a3a0:	010000f4 	movhi	r4,3
    a3a4:	21042604 	addi	r4,r4,4248
    a3a8:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    a3ac:	014000f4 	movhi	r5,3
    a3b0:	29442604 	addi	r5,r5,4248
    a3b4:	010000f4 	movhi	r4,3
    a3b8:	21045504 	addi	r4,r4,4436
    a3bc:	0006ec00 	call	6ec0 <_ZN9USBH_MIDIC1EP3USB>
		if (timer & 0x40) {
			control();
			timer = 0;
		}
	}
}
    a3c0:	0001883a 	nop
    a3c4:	e037883a 	mov	sp,fp
    a3c8:	dfc00117 	ldw	ra,4(sp)
    a3cc:	df000017 	ldw	fp,0(sp)
    a3d0:	dec00204 	addi	sp,sp,8
    a3d4:	f800283a 	ret

0000a3d8 <_GLOBAL__sub_I_Usb>:
    a3d8:	defffe04 	addi	sp,sp,-8
    a3dc:	dfc00115 	stw	ra,4(sp)
    a3e0:	df000015 	stw	fp,0(sp)
    a3e4:	d839883a 	mov	fp,sp
    a3e8:	017fffd4 	movui	r5,65535
    a3ec:	01000044 	movi	r4,1
    a3f0:	000a3700 	call	a370 <_Z41__static_initialization_and_destruction_0ii>
    a3f4:	e037883a 	mov	sp,fp
    a3f8:	dfc00117 	ldw	ra,4(sp)
    a3fc:	df000017 	ldw	fp,0(sp)
    a400:	dec00204 	addi	sp,sp,8
    a404:	f800283a 	ret

0000a408 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a408:	defffe04 	addi	sp,sp,-8
    a40c:	df000115 	stw	fp,4(sp)
    a410:	df000104 	addi	fp,sp,4
    a414:	e13fff15 	stw	r4,-4(fp)
    a418:	e0bfff17 	ldw	r2,-4(fp)
    a41c:	10800343 	ldbu	r2,13(r2)
    a420:	e037883a 	mov	sp,fp
    a424:	df000017 	ldw	fp,0(sp)
    a428:	dec00104 	addi	sp,sp,4
    a42c:	f800283a 	ret

0000a430 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a430:	defffe04 	addi	sp,sp,-8
    a434:	df000115 	stw	fp,4(sp)
    a438:	df000104 	addi	fp,sp,4
    a43c:	e13fff15 	stw	r4,-4(fp)
    a440:	e0bfff17 	ldw	r2,-4(fp)
    a444:	1080040b 	ldhu	r2,16(r2)
    a448:	e037883a 	mov	sp,fp
    a44c:	df000017 	ldw	fp,0(sp)
    a450:	dec00104 	addi	sp,sp,4
    a454:	f800283a 	ret

0000a458 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a458:	defffe04 	addi	sp,sp,-8
    a45c:	df000115 	stw	fp,4(sp)
    a460:	df000104 	addi	fp,sp,4
    a464:	e13fff15 	stw	r4,-4(fp)
    a468:	e0bfff17 	ldw	r2,-4(fp)
    a46c:	1080038b 	ldhu	r2,14(r2)
    a470:	e037883a 	mov	sp,fp
    a474:	df000017 	ldw	fp,0(sp)
    a478:	dec00104 	addi	sp,sp,4
    a47c:	f800283a 	ret

0000a480 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a480:	defffd04 	addi	sp,sp,-12
    a484:	df000215 	stw	fp,8(sp)
    a488:	df000204 	addi	fp,sp,8
    a48c:	e13ffe15 	stw	r4,-8(fp)
    a490:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a494:	e0bffe17 	ldw	r2,-8(fp)
    a498:	e0ffff17 	ldw	r3,-4(fp)
    a49c:	10c01815 	stw	r3,96(r2)
        };
    a4a0:	0001883a 	nop
    a4a4:	e037883a 	mov	sp,fp
    a4a8:	df000017 	ldw	fp,0(sp)
    a4ac:	dec00104 	addi	sp,sp,4
    a4b0:	f800283a 	ret

0000a4b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a4b4:	008000f4 	movhi	r2,3
    a4b8:	10a9b704 	addi	r2,r2,-22820
    a4bc:	20800015 	stw	r2,0(r4)
    a4c0:	000b28c1 	jmpi	b28c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a4c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a4c4:	defffe04 	addi	sp,sp,-8
    a4c8:	008000f4 	movhi	r2,3
    a4cc:	dc000015 	stw	r16,0(sp)
    a4d0:	dfc00115 	stw	ra,4(sp)
    a4d4:	10a9b704 	addi	r2,r2,-22820
    a4d8:	20800015 	stw	r2,0(r4)
    a4dc:	2021883a 	mov	r16,r4
    a4e0:	000b28c0 	call	b28c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a4e4:	8009883a 	mov	r4,r16
    a4e8:	dfc00117 	ldw	ra,4(sp)
    a4ec:	dc000017 	ldw	r16,0(sp)
    a4f0:	dec00204 	addi	sp,sp,8
    a4f4:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000a4f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a4f8:	defff504 	addi	sp,sp,-44
    a4fc:	dc000115 	stw	r16,4(sp)
    a500:	38800117 	ldw	r2,4(r7)
    a504:	24000117 	ldw	r16,4(r4)
    a508:	df000915 	stw	fp,36(sp)
    a50c:	ddc00815 	stw	r23,32(sp)
    a510:	dd800715 	stw	r22,28(sp)
    a514:	dcc00415 	stw	r19,16(sp)
    a518:	dc800315 	stw	r18,12(sp)
    a51c:	dc400215 	stw	r17,8(sp)
    a520:	dfc00a15 	stw	ra,40(sp)
    a524:	dd400615 	stw	r21,24(sp)
    a528:	dd000515 	stw	r20,20(sp)
    a52c:	2823883a 	mov	r17,r5
    a530:	3039883a 	mov	fp,r6
    a534:	dcc00b17 	ldw	r19,44(sp)
    a538:	ddc00c17 	ldw	r23,48(sp)
    a53c:	dd800d17 	ldw	r22,52(sp)
    a540:	dc800e17 	ldw	r18,56(sp)
    a544:	80800b26 	beq	r16,r2,a574 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a548:	80c00007 	ldb	r3,0(r16)
    a54c:	2029883a 	mov	r20,r4
    a550:	01000a84 	movi	r4,42
    a554:	382b883a 	mov	r21,r7
    a558:	19001a26 	beq	r3,r4,a5c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a55c:	100b883a 	mov	r5,r2
    a560:	8009883a 	mov	r4,r16
    a564:	d8c00015 	stw	r3,0(sp)
    a568:	000f4640 	call	f464 <strcmp>
    a56c:	d8c00017 	ldw	r3,0(sp)
    a570:	1000141e 	bne	r2,zero,a5c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a574:	94c00015 	stw	r19,0(r18)
    a578:	97000115 	stw	fp,4(r18)
    a57c:	88002816 	blt	r17,zero,a620 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a580:	9c63883a 	add	r17,r19,r17
    a584:	b4403226 	beq	r22,r17,a650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a588:	00800044 	movi	r2,1
    a58c:	90800315 	stw	r2,12(r18)
    a590:	0005883a 	mov	r2,zero
    a594:	dfc00a17 	ldw	ra,40(sp)
    a598:	df000917 	ldw	fp,36(sp)
    a59c:	ddc00817 	ldw	r23,32(sp)
    a5a0:	dd800717 	ldw	r22,28(sp)
    a5a4:	dd400617 	ldw	r21,24(sp)
    a5a8:	dd000517 	ldw	r20,20(sp)
    a5ac:	dcc00417 	ldw	r19,16(sp)
    a5b0:	dc800317 	ldw	r18,12(sp)
    a5b4:	dc400217 	ldw	r17,8(sp)
    a5b8:	dc000117 	ldw	r16,4(sp)
    a5bc:	dec00b04 	addi	sp,sp,44
    a5c0:	f800283a 	ret
    a5c4:	9d801926 	beq	r19,r22,a62c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a5c8:	a1000217 	ldw	r4,8(r20)
    a5cc:	a80f883a 	mov	r7,r21
    a5d0:	e00d883a 	mov	r6,fp
    a5d4:	20800017 	ldw	r2,0(r4)
    a5d8:	dc800e15 	stw	r18,56(sp)
    a5dc:	dd800d15 	stw	r22,52(sp)
    a5e0:	ddc00c15 	stw	r23,48(sp)
    a5e4:	dcc00b15 	stw	r19,44(sp)
    a5e8:	10800717 	ldw	r2,28(r2)
    a5ec:	880b883a 	mov	r5,r17
    a5f0:	dfc00a17 	ldw	ra,40(sp)
    a5f4:	df000917 	ldw	fp,36(sp)
    a5f8:	ddc00817 	ldw	r23,32(sp)
    a5fc:	dd800717 	ldw	r22,28(sp)
    a600:	dd400617 	ldw	r21,24(sp)
    a604:	dd000517 	ldw	r20,20(sp)
    a608:	dcc00417 	ldw	r19,16(sp)
    a60c:	dc800317 	ldw	r18,12(sp)
    a610:	dc400217 	ldw	r17,8(sp)
    a614:	dc000117 	ldw	r16,4(sp)
    a618:	dec00b04 	addi	sp,sp,44
    a61c:	1000683a 	jmp	r2
    a620:	00bfff84 	movi	r2,-2
    a624:	88bfda1e 	bne	r17,r2,a590 <__alt_data_end+0xfc00a590>
    a628:	003fd706 	br	a588 <__alt_data_end+0xfc00a588>
    a62c:	b9400117 	ldw	r5,4(r23)
    a630:	81400526 	beq	r16,r5,a648 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a634:	00800a84 	movi	r2,42
    a638:	18bfe326 	beq	r3,r2,a5c8 <__alt_data_end+0xfc00a5c8>
    a63c:	8009883a 	mov	r4,r16
    a640:	000f4640 	call	f464 <strcmp>
    a644:	103fe01e 	bne	r2,zero,a5c8 <__alt_data_end+0xfc00a5c8>
    a648:	97000215 	stw	fp,8(r18)
    a64c:	003fd006 	br	a590 <__alt_data_end+0xfc00a590>
    a650:	00800184 	movi	r2,6
    a654:	003fcd06 	br	a58c <__alt_data_end+0xfc00a58c>

0000a658 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a658:	defffa04 	addi	sp,sp,-24
    a65c:	dc000215 	stw	r16,8(sp)
    a660:	dc000617 	ldw	r16,24(sp)
    a664:	dc800415 	stw	r18,16(sp)
    a668:	dc400315 	stw	r17,12(sp)
    a66c:	dfc00515 	stw	ra,20(sp)
    a670:	2023883a 	mov	r17,r4
    a674:	2825883a 	mov	r18,r5
    a678:	81800b26 	beq	r16,r6,a6a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a67c:	89000217 	ldw	r4,8(r17)
    a680:	900b883a 	mov	r5,r18
    a684:	20800017 	ldw	r2,0(r4)
    a688:	dc000615 	stw	r16,24(sp)
    a68c:	10800817 	ldw	r2,32(r2)
    a690:	dfc00517 	ldw	ra,20(sp)
    a694:	dc800417 	ldw	r18,16(sp)
    a698:	dc400317 	ldw	r17,12(sp)
    a69c:	dc000217 	ldw	r16,8(sp)
    a6a0:	dec00604 	addi	sp,sp,24
    a6a4:	1000683a 	jmp	r2
    a6a8:	21000117 	ldw	r4,4(r4)
    a6ac:	39400117 	ldw	r5,4(r7)
    a6b0:	21400926 	beq	r4,r5,a6d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a6b4:	20c00007 	ldb	r3,0(r4)
    a6b8:	00800a84 	movi	r2,42
    a6bc:	18bfef26 	beq	r3,r2,a67c <__alt_data_end+0xfc00a67c>
    a6c0:	d9800015 	stw	r6,0(sp)
    a6c4:	d9c00115 	stw	r7,4(sp)
    a6c8:	000f4640 	call	f464 <strcmp>
    a6cc:	d9800017 	ldw	r6,0(sp)
    a6d0:	d9c00117 	ldw	r7,4(sp)
    a6d4:	103fe91e 	bne	r2,zero,a67c <__alt_data_end+0xfc00a67c>
    a6d8:	00800184 	movi	r2,6
    a6dc:	dfc00517 	ldw	ra,20(sp)
    a6e0:	dc800417 	ldw	r18,16(sp)
    a6e4:	dc400317 	ldw	r17,12(sp)
    a6e8:	dc000217 	ldw	r16,8(sp)
    a6ec:	dec00604 	addi	sp,sp,24
    a6f0:	f800283a 	ret

0000a6f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a6f4:	defffb04 	addi	sp,sp,-20
    a6f8:	dcc00315 	stw	r19,12(sp)
    a6fc:	dc800215 	stw	r18,8(sp)
    a700:	dc400115 	stw	r17,4(sp)
    a704:	dc000015 	stw	r16,0(sp)
    a708:	dfc00415 	stw	ra,16(sp)
    a70c:	2027883a 	mov	r19,r4
    a710:	2821883a 	mov	r16,r5
    a714:	3023883a 	mov	r17,r6
    a718:	3825883a 	mov	r18,r7
    a71c:	000b2d00 	call	b2d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a720:	10c03fcc 	andi	r3,r2,255
    a724:	18000726 	beq	r3,zero,a744 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a728:	dfc00417 	ldw	ra,16(sp)
    a72c:	dcc00317 	ldw	r19,12(sp)
    a730:	dc800217 	ldw	r18,8(sp)
    a734:	dc400117 	ldw	r17,4(sp)
    a738:	dc000017 	ldw	r16,0(sp)
    a73c:	dec00504 	addi	sp,sp,20
    a740:	f800283a 	ret
    a744:	99000217 	ldw	r4,8(r19)
    a748:	900f883a 	mov	r7,r18
    a74c:	880d883a 	mov	r6,r17
    a750:	20800017 	ldw	r2,0(r4)
    a754:	800b883a 	mov	r5,r16
    a758:	10800617 	ldw	r2,24(r2)
    a75c:	dfc00417 	ldw	ra,16(sp)
    a760:	dcc00317 	ldw	r19,12(sp)
    a764:	dc800217 	ldw	r18,8(sp)
    a768:	dc400117 	ldw	r17,4(sp)
    a76c:	dc000017 	ldw	r16,0(sp)
    a770:	dec00504 	addi	sp,sp,20
    a774:	1000683a 	jmp	r2

0000a778 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a778:	008000f4 	movhi	r2,3
    a77c:	10a9cf04 	addi	r2,r2,-22724
    a780:	20800015 	stw	r2,0(r4)
    a784:	000b28c1 	jmpi	b28c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a788 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a788:	defffe04 	addi	sp,sp,-8
    a78c:	008000f4 	movhi	r2,3
    a790:	dc000015 	stw	r16,0(sp)
    a794:	dfc00115 	stw	ra,4(sp)
    a798:	10a9cf04 	addi	r2,r2,-22724
    a79c:	20800015 	stw	r2,0(r4)
    a7a0:	2021883a 	mov	r16,r4
    a7a4:	000b28c0 	call	b28c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a7a8:	8009883a 	mov	r4,r16
    a7ac:	dfc00117 	ldw	ra,4(sp)
    a7b0:	dc000017 	ldw	r16,0(sp)
    a7b4:	dec00204 	addi	sp,sp,8
    a7b8:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000a7bc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a7bc:	defff504 	addi	sp,sp,-44
    a7c0:	dc400215 	stw	r17,8(sp)
    a7c4:	dc400b17 	ldw	r17,44(sp)
    a7c8:	df000915 	stw	fp,36(sp)
    a7cc:	ddc00815 	stw	r23,32(sp)
    a7d0:	dd800715 	stw	r22,28(sp)
    a7d4:	dc000115 	stw	r16,4(sp)
    a7d8:	dfc00a15 	stw	ra,40(sp)
    a7dc:	dd400615 	stw	r21,24(sp)
    a7e0:	dd000515 	stw	r20,20(sp)
    a7e4:	dcc00415 	stw	r19,16(sp)
    a7e8:	dc800315 	stw	r18,12(sp)
    a7ec:	3039883a 	mov	fp,r6
    a7f0:	2021883a 	mov	r16,r4
    a7f4:	282d883a 	mov	r22,r5
    a7f8:	382f883a 	mov	r23,r7
    a7fc:	34402c26 	beq	r6,r17,a8b0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a800:	85000317 	ldw	r20,12(r16)
    a804:	048000c4 	movi	r18,3
    a808:	04ffff44 	movi	r19,-3
    a80c:	a484983a 	sll	r2,r20,r18
    a810:	b80f883a 	mov	r7,r23
    a814:	b00b883a 	mov	r5,r22
    a818:	10800304 	addi	r2,r2,12
    a81c:	80a1883a 	add	r16,r16,r2
    a820:	a0001626 	beq	r20,zero,a87c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a824:	81800017 	ldw	r6,0(r16)
    a828:	a53fffc4 	addi	r20,r20,-1
    a82c:	3080008c 	andi	r2,r6,2
    a830:	3540004c 	andi	r21,r6,1
    a834:	10000d26 	beq	r2,zero,a86c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a838:	300dd23a 	srai	r6,r6,8
    a83c:	a8000426 	beq	r21,zero,a850 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a840:	b4c00a26 	beq	r22,r19,a86c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a844:	e0800017 	ldw	r2,0(fp)
    a848:	118d883a 	add	r6,r2,r6
    a84c:	31800017 	ldw	r6,0(r6)
    a850:	813fff17 	ldw	r4,-4(r16)
    a854:	e18d883a 	add	r6,fp,r6
    a858:	20800017 	ldw	r2,0(r4)
    a85c:	dc400015 	stw	r17,0(sp)
    a860:	10800817 	ldw	r2,32(r2)
    a864:	103ee83a 	callr	r2
    a868:	90801b16 	blt	r18,r2,a8d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a86c:	843ffe04 	addi	r16,r16,-8
    a870:	b80f883a 	mov	r7,r23
    a874:	b00b883a 	mov	r5,r22
    a878:	a03fea1e 	bne	r20,zero,a824 <__alt_data_end+0xfc00a824>
    a87c:	00800044 	movi	r2,1
    a880:	dfc00a17 	ldw	ra,40(sp)
    a884:	df000917 	ldw	fp,36(sp)
    a888:	ddc00817 	ldw	r23,32(sp)
    a88c:	dd800717 	ldw	r22,28(sp)
    a890:	dd400617 	ldw	r21,24(sp)
    a894:	dd000517 	ldw	r20,20(sp)
    a898:	dcc00417 	ldw	r19,16(sp)
    a89c:	dc800317 	ldw	r18,12(sp)
    a8a0:	dc400217 	ldw	r17,8(sp)
    a8a4:	dc000117 	ldw	r16,4(sp)
    a8a8:	dec00b04 	addi	sp,sp,44
    a8ac:	f800283a 	ret
    a8b0:	21000117 	ldw	r4,4(r4)
    a8b4:	39400117 	ldw	r5,4(r7)
    a8b8:	21400526 	beq	r4,r5,a8d0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a8bc:	20c00007 	ldb	r3,0(r4)
    a8c0:	00800a84 	movi	r2,42
    a8c4:	18bfce26 	beq	r3,r2,a800 <__alt_data_end+0xfc00a800>
    a8c8:	000f4640 	call	f464 <strcmp>
    a8cc:	103fcc1e 	bne	r2,zero,a800 <__alt_data_end+0xfc00a800>
    a8d0:	00800184 	movi	r2,6
    a8d4:	003fea06 	br	a880 <__alt_data_end+0xfc00a880>
    a8d8:	a83fe926 	beq	r21,zero,a880 <__alt_data_end+0xfc00a880>
    a8dc:	10800054 	ori	r2,r2,1
    a8e0:	003fe706 	br	a880 <__alt_data_end+0xfc00a880>

0000a8e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a8e4:	deffe804 	addi	sp,sp,-96
    a8e8:	df001615 	stw	fp,88(sp)
    a8ec:	df001b17 	ldw	fp,108(sp)
    a8f0:	ddc01515 	stw	r23,84(sp)
    a8f4:	dd001215 	stw	r20,72(sp)
    a8f8:	e0800417 	ldw	r2,16(fp)
    a8fc:	dcc01115 	stw	r19,68(sp)
    a900:	dfc01715 	stw	ra,92(sp)
    a904:	dd801415 	stw	r22,80(sp)
    a908:	dd401315 	stw	r21,76(sp)
    a90c:	dc801015 	stw	r18,64(sp)
    a910:	dc400f15 	stw	r17,60(sp)
    a914:	dc000e15 	stw	r16,56(sp)
    a918:	d9000b15 	stw	r4,44(sp)
    a91c:	d9c00915 	stw	r7,36(sp)
    a920:	1080040c 	andi	r2,r2,16
    a924:	282f883a 	mov	r23,r5
    a928:	3027883a 	mov	r19,r6
    a92c:	dd001817 	ldw	r20,96(sp)
    a930:	10000226 	beq	r2,zero,a93c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a934:	20800217 	ldw	r2,8(r4)
    a938:	e0800415 	stw	r2,16(fp)
    a93c:	d8c01a17 	ldw	r3,104(sp)
    a940:	a0c0cb26 	beq	r20,r3,ac70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a944:	d8c00b17 	ldw	r3,44(sp)
    a948:	1c000117 	ldw	r16,4(r3)
    a94c:	d8c00917 	ldw	r3,36(sp)
    a950:	19400117 	ldw	r5,4(r3)
    a954:	2c000626 	beq	r5,r16,a970 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a958:	80c00007 	ldb	r3,0(r16)
    a95c:	00800a84 	movi	r2,42
    a960:	18801b26 	beq	r3,r2,a9d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a964:	8009883a 	mov	r4,r16
    a968:	000f4640 	call	f464 <strcmp>
    a96c:	1000181e 	bne	r2,zero,a9d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a970:	e5000015 	stw	r20,0(fp)
    a974:	e4c00115 	stw	r19,4(fp)
    a978:	b8010916 	blt	r23,zero,ada0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a97c:	d8c01a17 	ldw	r3,104(sp)
    a980:	a5d9883a 	add	r12,r20,r23
    a984:	1b014126 	beq	r3,r12,ae8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a988:	00800044 	movi	r2,1
    a98c:	e0800315 	stw	r2,12(fp)
    a990:	0005883a 	mov	r2,zero
    a994:	dfc01717 	ldw	ra,92(sp)
    a998:	df001617 	ldw	fp,88(sp)
    a99c:	ddc01517 	ldw	r23,84(sp)
    a9a0:	dd801417 	ldw	r22,80(sp)
    a9a4:	dd401317 	ldw	r21,76(sp)
    a9a8:	dd001217 	ldw	r20,72(sp)
    a9ac:	dcc01117 	ldw	r19,68(sp)
    a9b0:	dc801017 	ldw	r18,64(sp)
    a9b4:	dc400f17 	ldw	r17,60(sp)
    a9b8:	dc000e17 	ldw	r16,56(sp)
    a9bc:	dec01804 	addi	sp,sp,96
    a9c0:	f800283a 	ret
    a9c4:	d8c00917 	ldw	r3,36(sp)
    a9c8:	18800117 	ldw	r2,4(r3)
    a9cc:	80bfe826 	beq	r16,r2,a970 <__alt_data_end+0xfc00a970>
    a9d0:	b800ef16 	blt	r23,zero,ad90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a9d4:	d8c01a17 	ldw	r3,104(sp)
    a9d8:	1dedc83a 	sub	r22,r3,r23
    a9dc:	e005883a 	mov	r2,fp
    a9e0:	00c00044 	movi	r3,1
    a9e4:	b039883a 	mov	fp,r22
    a9e8:	0021883a 	mov	r16,zero
    a9ec:	a02d883a 	mov	r22,r20
    a9f0:	d8000a45 	stb	zero,41(sp)
    a9f4:	d8c00a05 	stb	r3,40(sp)
    a9f8:	048000c4 	movi	r18,3
    a9fc:	1029883a 	mov	r20,r2
    aa00:	d8c00b17 	ldw	r3,44(sp)
    aa04:	b805883a 	mov	r2,r23
    aa08:	1ac00317 	ldw	r11,12(r3)
    aa0c:	581490fa 	slli	r10,r11,3
    aa10:	52800304 	addi	r10,r10,12
    aa14:	1aab883a 	add	r21,r3,r10
    aa18:	b007883a 	mov	r3,r22
    aa1c:	582d883a 	mov	r22,r11
    aa20:	a82f883a 	mov	r23,r21
    aa24:	1823883a 	mov	r17,r3
    aa28:	102b883a 	mov	r21,r2
    aa2c:	b0005526 	beq	r22,zero,ab84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    aa30:	b8800017 	ldw	r2,0(r23)
    aa34:	a1400417 	ldw	r5,16(r20)
    aa38:	d8000415 	stw	zero,16(sp)
    aa3c:	d8000515 	stw	zero,20(sp)
    aa40:	d8000615 	stw	zero,24(sp)
    aa44:	d8000715 	stw	zero,28(sp)
    aa48:	d9400815 	stw	r5,32(sp)
    aa4c:	1100004c 	andi	r4,r2,1
    aa50:	1007d23a 	srai	r3,r2,8
    aa54:	20007526 	beq	r4,zero,ac2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    aa58:	89000017 	ldw	r4,0(r17)
    aa5c:	99800054 	ori	r6,r19,1
    aa60:	20c7883a 	add	r3,r4,r3
    aa64:	18c00017 	ldw	r3,0(r3)
    aa68:	88c7883a 	add	r3,r17,r3
    aa6c:	e0000326 	beq	fp,zero,aa7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    aa70:	d9c00a03 	ldbu	r7,40(sp)
    aa74:	e0c9803a 	cmpltu	r4,fp,r3
    aa78:	21c07226 	beq	r4,r7,ac44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    aa7c:	1080008c 	andi	r2,r2,2
    aa80:	1000041e 	bne	r2,zero,aa94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    aa84:	013fff84 	movi	r4,-2
    aa88:	a9007126 	beq	r21,r4,ac50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    aa8c:	00bfff44 	movi	r2,-3
    aa90:	308c703a 	and	r6,r6,r2
    aa94:	b93fff17 	ldw	r4,-4(r23)
    aa98:	d9400404 	addi	r5,sp,16
    aa9c:	d9c00917 	ldw	r7,36(sp)
    aaa0:	20800017 	ldw	r2,0(r4)
    aaa4:	d9400315 	stw	r5,12(sp)
    aaa8:	d9401a17 	ldw	r5,104(sp)
    aaac:	d8c00015 	stw	r3,0(sp)
    aab0:	d9400215 	stw	r5,8(sp)
    aab4:	d9401917 	ldw	r5,100(sp)
    aab8:	d9400115 	stw	r5,4(sp)
    aabc:	10800717 	ldw	r2,28(r2)
    aac0:	a80b883a 	mov	r5,r21
    aac4:	103ee83a 	callr	r2
    aac8:	a1400217 	ldw	r5,8(r20)
    aacc:	d9000617 	ldw	r4,24(sp)
    aad0:	d8c00717 	ldw	r3,28(sp)
    aad4:	2908b03a 	or	r4,r5,r4
    aad8:	a1000215 	stw	r4,8(r20)
    aadc:	01400184 	movi	r5,6
    aae0:	1940a426 	beq	r3,r5,ad74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    aae4:	01400084 	movi	r5,2
    aae8:	1940a226 	beq	r3,r5,ad74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    aaec:	81403fcc 	andi	r5,r16,255
    aaf0:	a1800017 	ldw	r6,0(r20)
    aaf4:	28004f1e 	bne	r5,zero,ac34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    aaf8:	30007926 	beq	r6,zero,ace0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    aafc:	d9400417 	ldw	r5,16(sp)
    ab00:	29806926 	beq	r5,r6,aca8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    ab04:	28006d26 	beq	r5,zero,acbc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    ab08:	a2800317 	ldw	r10,12(r20)
    ab0c:	9100250e 	bge	r18,r4,aba4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    ab10:	2100004c 	andi	r4,r4,1
    ab14:	20000326 	beq	r4,zero,ab24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    ab18:	a0800417 	ldw	r2,16(r20)
    ab1c:	1080008c 	andi	r2,r2,2
    ab20:	1000201e 	bne	r2,zero,aba4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    ab24:	50004d1e 	bne	r10,zero,ac5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    ab28:	18002626 	beq	r3,zero,abc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    ab2c:	02800044 	movi	r10,1
    ab30:	181b883a 	mov	r13,r3
    ab34:	1a84f03a 	xor	r2,r3,r10
    ab38:	501f883a 	mov	r15,r10
    ab3c:	90801f0e 	bge	r18,r2,abbc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    ab40:	90c0880e 	bge	r18,r3,ad64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    ab44:	d9400417 	ldw	r5,16(sp)
    ab48:	1880008c 	andi	r2,r3,2
    ab4c:	d9000517 	ldw	r4,20(sp)
    ab50:	a1400015 	stw	r5,0(r20)
    ab54:	0021883a 	mov	r16,zero
    ab58:	a1000115 	stw	r4,4(r20)
    ab5c:	a0c00315 	stw	r3,12(r20)
    ab60:	10004f1e 	bne	r2,zero,aca0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    ab64:	6b40004c 	andi	r13,r13,1
    ab68:	68004d26 	beq	r13,zero,aca0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    ab6c:	a1000217 	ldw	r4,8(r20)
    ab70:	01400104 	movi	r5,4
    ab74:	21408826 	beq	r4,r5,ad98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ab78:	b5bfffc4 	addi	r22,r22,-1
    ab7c:	bdfffe04 	addi	r23,r23,-8
    ab80:	b03fab1e 	bne	r22,zero,aa30 <__alt_data_end+0xfc00aa30>
    ab84:	d8800a43 	ldbu	r2,41(sp)
    ab88:	a82f883a 	mov	r23,r21
    ab8c:	882d883a 	mov	r22,r17
    ab90:	10008126 	beq	r2,zero,ad98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ab94:	dd400a03 	ldbu	r21,40(sp)
    ab98:	a8007f26 	beq	r21,zero,ad98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ab9c:	d8000a05 	stb	zero,40(sp)
    aba0:	003f9706 	br	aa00 <__alt_data_end+0xfc00aa00>
    aba4:	501f883a 	mov	r15,r10
    aba8:	181b883a 	mov	r13,r3
    abac:	02800b0e 	bge	zero,r10,abdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    abb0:	00c0570e 	bge	zero,r3,ad10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    abb4:	1a84f03a 	xor	r2,r3,r10
    abb8:	90bfe116 	blt	r18,r2,ab40 <__alt_data_end+0xfc00ab40>
    abbc:	1bc6703a 	and	r3,r3,r15
    abc0:	90c09916 	blt	r18,r3,ae28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    abc4:	01000044 	movi	r4,1
    abc8:	a1000315 	stw	r4,12(r20)
    abcc:	a0000015 	stw	zero,0(r20)
    abd0:	a1000217 	ldw	r4,8(r20)
    abd4:	04000044 	movi	r16,1
    abd8:	003fe506 	br	ab70 <__alt_data_end+0xfc00ab70>
    abdc:	90c00a0e 	bge	r18,r3,ac08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    abe0:	1880004c 	andi	r2,r3,1
    abe4:	10000426 	beq	r2,zero,abf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    abe8:	d9000b17 	ldw	r4,44(sp)
    abec:	20800217 	ldw	r2,8(r4)
    abf0:	1080008c 	andi	r2,r2,2
    abf4:	1000041e 	bne	r2,zero,ac08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    abf8:	1880005c 	xori	r2,r3,1
    abfc:	90bfd216 	blt	r18,r2,ab48 <__alt_data_end+0xfc00ab48>
    ac00:	03c00044 	movi	r15,1
    ac04:	003fed06 	br	abbc <__alt_data_end+0xfc00abbc>
    ac08:	a8006e16 	blt	r21,zero,adc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    ac0c:	d8801a17 	ldw	r2,104(sp)
    ac10:	354d883a 	add	r6,r6,r21
    ac14:	11805026 	beq	r2,r6,ad58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    ac18:	00c0a50e 	bge	zero,r3,aeb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    ac1c:	03c00044 	movi	r15,1
    ac20:	1bc4f03a 	xor	r2,r3,r15
    ac24:	7815883a 	mov	r10,r15
    ac28:	003fc406 	br	ab3c <__alt_data_end+0xfc00ab3c>
    ac2c:	980d883a 	mov	r6,r19
    ac30:	003f8d06 	br	aa68 <__alt_data_end+0xfc00aa68>
    ac34:	303fb11e 	bne	r6,zero,aafc <__alt_data_end+0xfc00aafc>
    ac38:	d9400417 	ldw	r5,16(sp)
    ac3c:	283fb21e 	bne	r5,zero,ab08 <__alt_data_end+0xfc00ab08>
    ac40:	003fcb06 	br	ab70 <__alt_data_end+0xfc00ab70>
    ac44:	00c00044 	movi	r3,1
    ac48:	d8c00a45 	stb	r3,41(sp)
    ac4c:	003fca06 	br	ab78 <__alt_data_end+0xfc00ab78>
    ac50:	294000cc 	andi	r5,r5,3
    ac54:	283fc826 	beq	r5,zero,ab78 <__alt_data_end+0xfc00ab78>
    ac58:	003f8c06 	br	aa8c <__alt_data_end+0xfc00aa8c>
    ac5c:	18001a26 	beq	r3,zero,acc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    ac60:	181b883a 	mov	r13,r3
    ac64:	501f883a 	mov	r15,r10
    ac68:	50c4f03a 	xor	r2,r10,r3
    ac6c:	003fb306 	br	ab3c <__alt_data_end+0xfc00ab3c>
    ac70:	d8c00b17 	ldw	r3,44(sp)
    ac74:	1c000117 	ldw	r16,4(r3)
    ac78:	d8c01917 	ldw	r3,100(sp)
    ac7c:	19400117 	ldw	r5,4(r3)
    ac80:	81400626 	beq	r16,r5,ac9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    ac84:	80c00007 	ldb	r3,0(r16)
    ac88:	00800a84 	movi	r2,42
    ac8c:	18bf4d26 	beq	r3,r2,a9c4 <__alt_data_end+0xfc00a9c4>
    ac90:	8009883a 	mov	r4,r16
    ac94:	000f4640 	call	f464 <strcmp>
    ac98:	10005c1e 	bne	r2,zero,ae0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    ac9c:	e4c00215 	stw	r19,8(fp)
    aca0:	0005883a 	mov	r2,zero
    aca4:	003f3b06 	br	a994 <__alt_data_end+0xfc00a994>
    aca8:	a0c00117 	ldw	r3,4(r20)
    acac:	d8800517 	ldw	r2,20(sp)
    acb0:	1884b03a 	or	r2,r3,r2
    acb4:	a0800115 	stw	r2,4(r20)
    acb8:	003fad06 	br	ab70 <__alt_data_end+0xfc00ab70>
    acbc:	10803fcc 	andi	r2,r2,255
    acc0:	103f911e 	bne	r2,zero,ab08 <__alt_data_end+0xfc00ab08>
    acc4:	003faa06 	br	ab70 <__alt_data_end+0xfc00ab70>
    acc8:	501b883a 	mov	r13,r10
    accc:	5080005c 	xori	r2,r10,1
    acd0:	5007883a 	mov	r3,r10
    acd4:	90bfbb0e 	bge	r18,r2,abc4 <__alt_data_end+0xfc00abc4>
    acd8:	6880008c 	andi	r2,r13,2
    acdc:	003f9f06 	br	ab5c <__alt_data_end+0xfc00ab5c>
    ace0:	d8c00417 	ldw	r3,16(sp)
    ace4:	d9400517 	ldw	r5,20(sp)
    ace8:	a0c00015 	stw	r3,0(r20)
    acec:	a1400115 	stw	r5,4(r20)
    acf0:	18000526 	beq	r3,zero,ad08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    acf4:	20001626 	beq	r4,zero,ad50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    acf8:	d9400b17 	ldw	r5,44(sp)
    acfc:	28c00217 	ldw	r3,8(r5)
    ad00:	18c0004c 	andi	r3,r3,1
    ad04:	183f2326 	beq	r3,zero,a994 <__alt_data_end+0xfc00a994>
    ad08:	1021883a 	mov	r16,r2
    ad0c:	003f9806 	br	ab70 <__alt_data_end+0xfc00ab70>
    ad10:	9280060e 	bge	r18,r10,ad2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    ad14:	5080004c 	andi	r2,r10,1
    ad18:	10002426 	beq	r2,zero,adac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ad1c:	d8c00b17 	ldw	r3,44(sp)
    ad20:	18800217 	ldw	r2,8(r3)
    ad24:	1080008c 	andi	r2,r2,2
    ad28:	10003c26 	beq	r2,zero,ae1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ad2c:	d9400417 	ldw	r5,16(sp)
    ad30:	a8004216 	blt	r21,zero,ae3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ad34:	d8c01a17 	ldw	r3,104(sp)
    ad38:	2d45883a 	add	r2,r5,r21
    ad3c:	18805726 	beq	r3,r2,ae9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ad40:	7880005c 	xori	r2,r15,1
    ad44:	781b883a 	mov	r13,r15
    ad48:	5007883a 	mov	r3,r10
    ad4c:	003fe106 	br	acd4 <__alt_data_end+0xfc00acd4>
    ad50:	1021883a 	mov	r16,r2
    ad54:	003f8806 	br	ab78 <__alt_data_end+0xfc00ab78>
    ad58:	03c00184 	movi	r15,6
    ad5c:	00ffb016 	blt	zero,r3,ac20 <__alt_data_end+0xfc00ac20>
    ad60:	7815883a 	mov	r10,r15
    ad64:	7880008c 	andi	r2,r15,2
    ad68:	781b883a 	mov	r13,r15
    ad6c:	5007883a 	mov	r3,r10
    ad70:	003f7a06 	br	ab5c <__alt_data_end+0xfc00ab5c>
    ad74:	a039883a 	mov	fp,r20
    ad78:	e0c00315 	stw	r3,12(fp)
    ad7c:	d8c00417 	ldw	r3,16(sp)
    ad80:	a0c00015 	stw	r3,0(r20)
    ad84:	d8c00517 	ldw	r3,20(sp)
    ad88:	a0c00115 	stw	r3,4(r20)
    ad8c:	003f0106 	br	a994 <__alt_data_end+0xfc00a994>
    ad90:	002d883a 	mov	r22,zero
    ad94:	003f1106 	br	a9dc <__alt_data_end+0xfc00a9dc>
    ad98:	8005883a 	mov	r2,r16
    ad9c:	003efd06 	br	a994 <__alt_data_end+0xfc00a994>
    ada0:	00bfff84 	movi	r2,-2
    ada4:	b8bfbe1e 	bne	r23,r2,aca0 <__alt_data_end+0xfc00aca0>
    ada8:	003ef706 	br	a988 <__alt_data_end+0xfc00a988>
    adac:	5080005c 	xori	r2,r10,1
    adb0:	90bf840e 	bge	r18,r2,abc4 <__alt_data_end+0xfc00abc4>
    adb4:	501b883a 	mov	r13,r10
    adb8:	5080008c 	andi	r2,r10,2
    adbc:	5007883a 	mov	r3,r10
    adc0:	003f6606 	br	ab5c <__alt_data_end+0xfc00ab5c>
    adc4:	013fff84 	movi	r4,-2
    adc8:	a9003226 	beq	r21,r4,ae94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    adcc:	d9400917 	ldw	r5,36(sp)
    add0:	d9001a17 	ldw	r4,104(sp)
    add4:	d9c01917 	ldw	r7,100(sp)
    add8:	28800017 	ldw	r2,0(r5)
    addc:	d9000015 	stw	r4,0(sp)
    ade0:	d9000917 	ldw	r4,36(sp)
    ade4:	10800817 	ldw	r2,32(r2)
    ade8:	a80b883a 	mov	r5,r21
    adec:	d8c00d15 	stw	r3,52(sp)
    adf0:	db400c15 	stw	r13,48(sp)
    adf4:	103ee83a 	callr	r2
    adf8:	1015883a 	mov	r10,r2
    adfc:	101f883a 	mov	r15,r2
    ae00:	db400c17 	ldw	r13,48(sp)
    ae04:	d8c00d17 	ldw	r3,52(sp)
    ae08:	003f6906 	br	abb0 <__alt_data_end+0xfc00abb0>
    ae0c:	d8c00917 	ldw	r3,36(sp)
    ae10:	19400117 	ldw	r5,4(r3)
    ae14:	817ed31e 	bne	r16,r5,a964 <__alt_data_end+0xfc00a964>
    ae18:	003ed506 	br	a970 <__alt_data_end+0xfc00a970>
    ae1c:	5080005c 	xori	r2,r10,1
    ae20:	90bfe416 	blt	r18,r2,adb4 <__alt_data_end+0xfc00adb4>
    ae24:	003f6706 	br	abc4 <__alt_data_end+0xfc00abc4>
    ae28:	00800084 	movi	r2,2
    ae2c:	a0800315 	stw	r2,12(r20)
    ae30:	a0000015 	stw	zero,0(r20)
    ae34:	00800044 	movi	r2,1
    ae38:	003ed606 	br	a994 <__alt_data_end+0xfc00a994>
    ae3c:	013fff84 	movi	r4,-2
    ae40:	a9002526 	beq	r21,r4,aed8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ae44:	d8c00917 	ldw	r3,36(sp)
    ae48:	d9c01917 	ldw	r7,100(sp)
    ae4c:	d9000917 	ldw	r4,36(sp)
    ae50:	18800017 	ldw	r2,0(r3)
    ae54:	d8c01a17 	ldw	r3,104(sp)
    ae58:	280d883a 	mov	r6,r5
    ae5c:	a80b883a 	mov	r5,r21
    ae60:	d8c00015 	stw	r3,0(sp)
    ae64:	10800817 	ldw	r2,32(r2)
    ae68:	da800c15 	stw	r10,48(sp)
    ae6c:	dbc00d15 	stw	r15,52(sp)
    ae70:	103ee83a 	callr	r2
    ae74:	da800c17 	ldw	r10,48(sp)
    ae78:	1007883a 	mov	r3,r2
    ae7c:	101b883a 	mov	r13,r2
    ae80:	dbc00d17 	ldw	r15,52(sp)
    ae84:	1284f03a 	xor	r2,r2,r10
    ae88:	003f2c06 	br	ab3c <__alt_data_end+0xfc00ab3c>
    ae8c:	00800184 	movi	r2,6
    ae90:	003ebe06 	br	a98c <__alt_data_end+0xfc00a98c>
    ae94:	00ff4b0e 	bge	zero,r3,abc4 <__alt_data_end+0xfc00abc4>
    ae98:	003f6006 	br	ac1c <__alt_data_end+0xfc00ac1c>
    ae9c:	5080019c 	xori	r2,r10,6
    aea0:	90800916 	blt	r18,r2,aec8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    aea4:	50c0018c 	andi	r3,r10,6
    aea8:	90ff460e 	bge	r18,r3,abc4 <__alt_data_end+0xfc00abc4>
    aeac:	003fde06 	br	ae28 <__alt_data_end+0xfc00ae28>
    aeb0:	d8c01a17 	ldw	r3,104(sp)
    aeb4:	2d45883a 	add	r2,r5,r21
    aeb8:	18800326 	beq	r3,r2,aec8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    aebc:	02800044 	movi	r10,1
    aec0:	501f883a 	mov	r15,r10
    aec4:	003f9e06 	br	ad40 <__alt_data_end+0xfc00ad40>
    aec8:	03400184 	movi	r13,6
    aecc:	00800084 	movi	r2,2
    aed0:	6807883a 	mov	r3,r13
    aed4:	003f1d06 	br	ab4c <__alt_data_end+0xfc00ab4c>
    aed8:	501b883a 	mov	r13,r10
    aedc:	5080005c 	xori	r2,r10,1
    aee0:	5007883a 	mov	r3,r10
    aee4:	003f7b06 	br	acd4 <__alt_data_end+0xfc00acd4>

0000aee8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    aee8:	deffef04 	addi	sp,sp,-68
    aeec:	ddc00e15 	stw	r23,56(sp)
    aef0:	dd000b15 	stw	r20,44(sp)
    aef4:	dc400815 	stw	r17,32(sp)
    aef8:	3029883a 	mov	r20,r6
    aefc:	dfc01015 	stw	ra,64(sp)
    af00:	df000f15 	stw	fp,60(sp)
    af04:	dd800d15 	stw	r22,52(sp)
    af08:	dd400c15 	stw	r21,48(sp)
    af0c:	dcc00a15 	stw	r19,40(sp)
    af10:	dc800915 	stw	r18,36(sp)
    af14:	dc000715 	stw	r16,28(sp)
    af18:	d9000515 	stw	r4,20(sp)
    af1c:	2823883a 	mov	r17,r5
    af20:	382f883a 	mov	r23,r7
    af24:	000b2d00 	call	b2d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    af28:	100d883a 	mov	r6,r2
    af2c:	10803fcc 	andi	r2,r2,255
    af30:	1000441e 	bne	r2,zero,b044 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    af34:	bc000217 	ldw	r16,8(r23)
    af38:	8080040c 	andi	r2,r16,16
    af3c:	10000226 	beq	r2,zero,af48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    af40:	d8c00517 	ldw	r3,20(sp)
    af44:	1c000217 	ldw	r16,8(r3)
    af48:	d8c00517 	ldw	r3,20(sp)
    af4c:	d8800517 	ldw	r2,20(sp)
    af50:	1f000317 	ldw	fp,12(r3)
    af54:	e01090fa 	slli	r8,fp,3
    af58:	40c00304 	addi	r3,r8,12
    af5c:	10ed883a 	add	r22,r2,r3
    af60:	80c0004c 	andi	r3,r16,1
    af64:	42000204 	addi	r8,r8,8
    af68:	d8c00415 	stw	r3,16(sp)
    af6c:	122b883a 	add	r21,r2,r8
    af70:	e0003226 	beq	fp,zero,b03c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    af74:	b1800017 	ldw	r6,0(r22)
    af78:	d8000015 	stw	zero,0(sp)
    af7c:	d8000115 	stw	zero,4(sp)
    af80:	dc000215 	stw	r16,8(sp)
    af84:	d8000315 	stw	zero,12(sp)
    af88:	34c0008c 	andi	r19,r6,2
    af8c:	3480004c 	andi	r18,r6,1
    af90:	9800021e 	bne	r19,zero,af9c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    af94:	d8c00417 	ldw	r3,16(sp)
    af98:	18002426 	beq	r3,zero,b02c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    af9c:	a0003626 	beq	r20,zero,b078 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    afa0:	300dd23a 	srai	r6,r6,8
    afa4:	90000326 	beq	r18,zero,afb4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    afa8:	a0800017 	ldw	r2,0(r20)
    afac:	118d883a 	add	r6,r2,r6
    afb0:	31800017 	ldw	r6,0(r6)
    afb4:	a18d883a 	add	r6,r20,r6
    afb8:	a9000017 	ldw	r4,0(r21)
    afbc:	d80f883a 	mov	r7,sp
    afc0:	880b883a 	mov	r5,r17
    afc4:	20800017 	ldw	r2,0(r4)
    afc8:	10800617 	ldw	r2,24(r2)
    afcc:	103ee83a 	callr	r2
    afd0:	100d883a 	mov	r6,r2
    afd4:	10803fcc 	andi	r2,r2,255
    afd8:	10001426 	beq	r2,zero,b02c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    afdc:	d8800317 	ldw	r2,12(sp)
    afe0:	00c00204 	movi	r3,8
    afe4:	10c02626 	beq	r2,r3,b080 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    afe8:	d8800117 	ldw	r2,4(sp)
    afec:	00c000c4 	movi	r3,3
    aff0:	1880040e 	bge	r3,r2,b004 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    aff4:	9800031e 	bne	r19,zero,b004 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    aff8:	00ffff44 	movi	r3,-3
    affc:	10c4703a 	and	r2,r2,r3
    b000:	d8800115 	stw	r2,4(sp)
    b004:	b9400317 	ldw	r5,12(r23)
    b008:	28002126 	beq	r5,zero,b090 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    b00c:	b8800017 	ldw	r2,0(r23)
    b010:	d9000017 	ldw	r4,0(sp)
    b014:	11004d1e 	bne	r2,r4,b14c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    b018:	10003126 	beq	r2,zero,b0e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    b01c:	b9000117 	ldw	r4,4(r23)
    b020:	d8800117 	ldw	r2,4(sp)
    b024:	2084b03a 	or	r2,r4,r2
    b028:	b8800115 	stw	r2,4(r23)
    b02c:	e73fffc4 	addi	fp,fp,-1
    b030:	b5bffe04 	addi	r22,r22,-8
    b034:	ad7ffe04 	addi	r21,r21,-8
    b038:	e03fce1e 	bne	fp,zero,af74 <__alt_data_end+0xfc00af74>
    b03c:	b9800117 	ldw	r6,4(r23)
    b040:	300cc03a 	cmpne	r6,r6,zero
    b044:	3005883a 	mov	r2,r6
    b048:	dfc01017 	ldw	ra,64(sp)
    b04c:	df000f17 	ldw	fp,60(sp)
    b050:	ddc00e17 	ldw	r23,56(sp)
    b054:	dd800d17 	ldw	r22,52(sp)
    b058:	dd400c17 	ldw	r21,48(sp)
    b05c:	dd000b17 	ldw	r20,44(sp)
    b060:	dcc00a17 	ldw	r19,40(sp)
    b064:	dc800917 	ldw	r18,36(sp)
    b068:	dc400817 	ldw	r17,32(sp)
    b06c:	dc000717 	ldw	r16,28(sp)
    b070:	dec01104 	addi	sp,sp,68
    b074:	f800283a 	ret
    b078:	000d883a 	mov	r6,zero
    b07c:	003fce06 	br	afb8 <__alt_data_end+0xfc00afb8>
    b080:	903fd926 	beq	r18,zero,afe8 <__alt_data_end+0xfc00afe8>
    b084:	a8800017 	ldw	r2,0(r21)
    b088:	d8800315 	stw	r2,12(sp)
    b08c:	003fd606 	br	afe8 <__alt_data_end+0xfc00afe8>
    b090:	d9000017 	ldw	r4,0(sp)
    b094:	d8800117 	ldw	r2,4(sp)
    b098:	00c000c4 	movi	r3,3
    b09c:	b9000015 	stw	r4,0(r23)
    b0a0:	d9000217 	ldw	r4,8(sp)
    b0a4:	b8800115 	stw	r2,4(r23)
    b0a8:	b9000215 	stw	r4,8(r23)
    b0ac:	d9000317 	ldw	r4,12(sp)
    b0b0:	b9000315 	stw	r4,12(r23)
    b0b4:	18bfe30e 	bge	r3,r2,b044 <__alt_data_end+0xfc00b044>
    b0b8:	1100008c 	andi	r4,r2,2
    b0bc:	20001926 	beq	r4,zero,b124 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    b0c0:	d8c00517 	ldw	r3,20(sp)
    b0c4:	18800217 	ldw	r2,8(r3)
    b0c8:	1080004c 	andi	r2,r2,1
    b0cc:	103fdd26 	beq	r2,zero,b044 <__alt_data_end+0xfc00b044>
    b0d0:	e73fffc4 	addi	fp,fp,-1
    b0d4:	b5bffe04 	addi	r22,r22,-8
    b0d8:	ad7ffe04 	addi	r21,r21,-8
    b0dc:	003fd606 	br	b038 <__alt_data_end+0xfc00b038>
    b0e0:	d8800317 	ldw	r2,12(sp)
    b0e4:	00c00204 	movi	r3,8
    b0e8:	10c00b26 	beq	r2,r3,b118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b0ec:	28c00a26 	beq	r5,r3,b118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b0f0:	11000117 	ldw	r4,4(r2)
    b0f4:	29400117 	ldw	r5,4(r5)
    b0f8:	217fc826 	beq	r4,r5,b01c <__alt_data_end+0xfc00b01c>
    b0fc:	20800007 	ldb	r2,0(r4)
    b100:	00c00a84 	movi	r3,42
    b104:	10c00426 	beq	r2,r3,b118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b108:	d9800615 	stw	r6,24(sp)
    b10c:	000f4640 	call	f464 <strcmp>
    b110:	d9800617 	ldw	r6,24(sp)
    b114:	103fc126 	beq	r2,zero,b01c <__alt_data_end+0xfc00b01c>
    b118:	00800084 	movi	r2,2
    b11c:	b8800115 	stw	r2,4(r23)
    b120:	003fc806 	br	b044 <__alt_data_end+0xfc00b044>
    b124:	1080004c 	andi	r2,r2,1
    b128:	103fc626 	beq	r2,zero,b044 <__alt_data_end+0xfc00b044>
    b12c:	d8c00517 	ldw	r3,20(sp)
    b130:	18800217 	ldw	r2,8(r3)
    b134:	1080008c 	andi	r2,r2,2
    b138:	103fc226 	beq	r2,zero,b044 <__alt_data_end+0xfc00b044>
    b13c:	e73fffc4 	addi	fp,fp,-1
    b140:	b5bffe04 	addi	r22,r22,-8
    b144:	ad7ffe04 	addi	r21,r21,-8
    b148:	003fbb06 	br	b038 <__alt_data_end+0xfc00b038>
    b14c:	00800084 	movi	r2,2
    b150:	b8000015 	stw	zero,0(r23)
    b154:	b8800115 	stw	r2,4(r23)
    b158:	003fba06 	br	b044 <__alt_data_end+0xfc00b044>

0000b15c <_ZNSt9type_infoD1Ev>:
    b15c:	f800283a 	ret

0000b160 <_ZNKSt9type_info14__is_pointer_pEv>:
    b160:	0005883a 	mov	r2,zero
    b164:	f800283a 	ret

0000b168 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    b168:	0005883a 	mov	r2,zero
    b16c:	f800283a 	ret

0000b170 <_ZNSt9type_infoD0Ev>:
    b170:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000b174 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b174:	21000117 	ldw	r4,4(r4)
    b178:	29400117 	ldw	r5,4(r5)
    b17c:	21400c26 	beq	r4,r5,b1b0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b180:	20c00007 	ldb	r3,0(r4)
    b184:	00800a84 	movi	r2,42
    b188:	18800726 	beq	r3,r2,b1a8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b18c:	deffff04 	addi	sp,sp,-4
    b190:	dfc00015 	stw	ra,0(sp)
    b194:	000f4640 	call	f464 <strcmp>
    b198:	1005003a 	cmpeq	r2,r2,zero
    b19c:	dfc00017 	ldw	ra,0(sp)
    b1a0:	dec00104 	addi	sp,sp,4
    b1a4:	f800283a 	ret
    b1a8:	0005883a 	mov	r2,zero
    b1ac:	f800283a 	ret
    b1b0:	00800044 	movi	r2,1
    b1b4:	f800283a 	ret

0000b1b8 <_ZdlPv>:
    b1b8:	000e4581 	jmpi	e458 <free>

0000b1bc <__cxa_pure_virtual>:
    b1bc:	014000f4 	movhi	r5,3
    b1c0:	deffff04 	addi	sp,sp,-4
    b1c4:	2969e404 	addi	r5,r5,-22640
    b1c8:	018006c4 	movi	r6,27
    b1cc:	01000084 	movi	r4,2
    b1d0:	dfc00015 	stw	ra,0(sp)
    b1d4:	001fa280 	call	1fa28 <write>
    b1d8:	000b5840 	call	b584 <_ZSt9terminatev>

0000b1dc <__cxa_deleted_virtual>:
    b1dc:	014000f4 	movhi	r5,3
    b1e0:	deffff04 	addi	sp,sp,-4
    b1e4:	2969eb04 	addi	r5,r5,-22612
    b1e8:	01800784 	movi	r6,30
    b1ec:	01000084 	movi	r4,2
    b1f0:	dfc00015 	stw	ra,0(sp)
    b1f4:	001fa280 	call	1fa28 <write>
    b1f8:	000b5840 	call	b584 <_ZSt9terminatev>

0000b1fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b1fc:	20800017 	ldw	r2,0(r4)
    b200:	defffa04 	addi	sp,sp,-24
    b204:	dc000415 	stw	r16,16(sp)
    b208:	10800617 	ldw	r2,24(r2)
    b20c:	3021883a 	mov	r16,r6
    b210:	31800017 	ldw	r6,0(r6)
    b214:	00c00404 	movi	r3,16
    b218:	d8c00215 	stw	r3,8(sp)
    b21c:	dfc00515 	stw	ra,20(sp)
    b220:	d8000015 	stw	zero,0(sp)
    b224:	d8000115 	stw	zero,4(sp)
    b228:	d8000315 	stw	zero,12(sp)
    b22c:	d80f883a 	mov	r7,sp
    b230:	103ee83a 	callr	r2
    b234:	d8800117 	ldw	r2,4(sp)
    b238:	00c00184 	movi	r3,6
    b23c:	1080018c 	andi	r2,r2,6
    b240:	10c00526 	beq	r2,r3,b258 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b244:	0005883a 	mov	r2,zero
    b248:	dfc00517 	ldw	ra,20(sp)
    b24c:	dc000417 	ldw	r16,16(sp)
    b250:	dec00604 	addi	sp,sp,24
    b254:	f800283a 	ret
    b258:	d8c00017 	ldw	r3,0(sp)
    b25c:	00800044 	movi	r2,1
    b260:	80c00015 	stw	r3,0(r16)
    b264:	dfc00517 	ldw	ra,20(sp)
    b268:	dc000417 	ldw	r16,16(sp)
    b26c:	dec00604 	addi	sp,sp,24
    b270:	f800283a 	ret

0000b274 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b274:	d8800017 	ldw	r2,0(sp)
    b278:	11800226 	beq	r2,r6,b284 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b27c:	00800044 	movi	r2,1
    b280:	f800283a 	ret
    b284:	00800184 	movi	r2,6
    b288:	f800283a 	ret

0000b28c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b28c:	008000f4 	movhi	r2,3
    b290:	10aa0104 	addi	r2,r2,-22524
    b294:	20800015 	stw	r2,0(r4)
    b298:	000b15c1 	jmpi	b15c <_ZNSt9type_infoD1Ev>

0000b29c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b29c:	defffe04 	addi	sp,sp,-8
    b2a0:	008000f4 	movhi	r2,3
    b2a4:	dc000015 	stw	r16,0(sp)
    b2a8:	dfc00115 	stw	ra,4(sp)
    b2ac:	10aa0104 	addi	r2,r2,-22524
    b2b0:	20800015 	stw	r2,0(r4)
    b2b4:	2021883a 	mov	r16,r4
    b2b8:	000b15c0 	call	b15c <_ZNSt9type_infoD1Ev>
    b2bc:	8009883a 	mov	r4,r16
    b2c0:	dfc00117 	ldw	ra,4(sp)
    b2c4:	dc000017 	ldw	r16,0(sp)
    b2c8:	dec00204 	addi	sp,sp,8
    b2cc:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000b2d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b2d0:	21000117 	ldw	r4,4(r4)
    b2d4:	29400117 	ldw	r5,4(r5)
    b2d8:	defffd04 	addi	sp,sp,-12
    b2dc:	dc400115 	stw	r17,4(sp)
    b2e0:	dc000015 	stw	r16,0(sp)
    b2e4:	dfc00215 	stw	ra,8(sp)
    b2e8:	3023883a 	mov	r17,r6
    b2ec:	3821883a 	mov	r16,r7
    b2f0:	21400526 	beq	r4,r5,b308 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b2f4:	20c00007 	ldb	r3,0(r4)
    b2f8:	00800a84 	movi	r2,42
    b2fc:	18800d26 	beq	r3,r2,b334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b300:	000f4640 	call	f464 <strcmp>
    b304:	10000b1e 	bne	r2,zero,b334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b308:	00800204 	movi	r2,8
    b30c:	80800315 	stw	r2,12(r16)
    b310:	00800184 	movi	r2,6
    b314:	80800115 	stw	r2,4(r16)
    b318:	84400015 	stw	r17,0(r16)
    b31c:	00800044 	movi	r2,1
    b320:	dfc00217 	ldw	ra,8(sp)
    b324:	dc400117 	ldw	r17,4(sp)
    b328:	dc000017 	ldw	r16,0(sp)
    b32c:	dec00304 	addi	sp,sp,12
    b330:	f800283a 	ret
    b334:	0005883a 	mov	r2,zero
    b338:	003ff906 	br	b320 <__alt_data_end+0xfc00b320>

0000b33c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b33c:	defffa04 	addi	sp,sp,-24
    b340:	dc800415 	stw	r18,16(sp)
    b344:	d8800817 	ldw	r2,32(sp)
    b348:	dc800617 	ldw	r18,24(sp)
    b34c:	dc400315 	stw	r17,12(sp)
    b350:	dc000215 	stw	r16,8(sp)
    b354:	dfc00515 	stw	ra,20(sp)
    b358:	dc400917 	ldw	r17,36(sp)
    b35c:	24000117 	ldw	r16,4(r4)
    b360:	90801526 	beq	r18,r2,b3b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b364:	39400117 	ldw	r5,4(r7)
    b368:	2c000826 	beq	r5,r16,b38c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b36c:	80c00007 	ldb	r3,0(r16)
    b370:	00800a84 	movi	r2,42
    b374:	18800926 	beq	r3,r2,b39c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b378:	8009883a 	mov	r4,r16
    b37c:	d9800115 	stw	r6,4(sp)
    b380:	000f4640 	call	f464 <strcmp>
    b384:	d9800117 	ldw	r6,4(sp)
    b388:	1000041e 	bne	r2,zero,b39c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b38c:	00800044 	movi	r2,1
    b390:	8c800015 	stw	r18,0(r17)
    b394:	89800115 	stw	r6,4(r17)
    b398:	88800315 	stw	r2,12(r17)
    b39c:	0005883a 	mov	r2,zero
    b3a0:	dfc00517 	ldw	ra,20(sp)
    b3a4:	dc800417 	ldw	r18,16(sp)
    b3a8:	dc400317 	ldw	r17,12(sp)
    b3ac:	dc000217 	ldw	r16,8(sp)
    b3b0:	dec00604 	addi	sp,sp,24
    b3b4:	f800283a 	ret
    b3b8:	d8800717 	ldw	r2,28(sp)
    b3bc:	11400117 	ldw	r5,4(r2)
    b3c0:	81400a26 	beq	r16,r5,b3ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b3c4:	80c00007 	ldb	r3,0(r16)
    b3c8:	00800a84 	movi	r2,42
    b3cc:	18800c26 	beq	r3,r2,b400 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b3d0:	8009883a 	mov	r4,r16
    b3d4:	d9800115 	stw	r6,4(sp)
    b3d8:	d9c00015 	stw	r7,0(sp)
    b3dc:	000f4640 	call	f464 <strcmp>
    b3e0:	d9800117 	ldw	r6,4(sp)
    b3e4:	d9c00017 	ldw	r7,0(sp)
    b3e8:	1000021e 	bne	r2,zero,b3f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b3ec:	89800215 	stw	r6,8(r17)
    b3f0:	003fea06 	br	b39c <__alt_data_end+0xfc00b39c>
    b3f4:	39400117 	ldw	r5,4(r7)
    b3f8:	817fdf1e 	bne	r16,r5,b378 <__alt_data_end+0xfc00b378>
    b3fc:	003fe306 	br	b38c <__alt_data_end+0xfc00b38c>
    b400:	38800117 	ldw	r2,4(r7)
    b404:	80bfe51e 	bne	r16,r2,b39c <__alt_data_end+0xfc00b39c>
    b408:	003fe006 	br	b38c <__alt_data_end+0xfc00b38c>

0000b40c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b40c:	20800117 	ldw	r2,4(r4)
    b410:	28c00117 	ldw	r3,4(r5)
    b414:	10c02926 	beq	r2,r3,b4bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b418:	defffb04 	addi	sp,sp,-20
    b41c:	dcc00315 	stw	r19,12(sp)
    b420:	dc800215 	stw	r18,8(sp)
    b424:	dc400115 	stw	r17,4(sp)
    b428:	dc000015 	stw	r16,0(sp)
    b42c:	dfc00415 	stw	ra,16(sp)
    b430:	2821883a 	mov	r16,r5
    b434:	11400007 	ldb	r5,0(r2)
    b438:	2025883a 	mov	r18,r4
    b43c:	01000a84 	movi	r4,42
    b440:	3823883a 	mov	r17,r7
    b444:	3027883a 	mov	r19,r6
    b448:	29000626 	beq	r5,r4,b464 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b44c:	180b883a 	mov	r5,r3
    b450:	1009883a 	mov	r4,r2
    b454:	000f4640 	call	f464 <strcmp>
    b458:	1000021e 	bne	r2,zero,b464 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b45c:	00800044 	movi	r2,1
    b460:	00000306 	br	b470 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b464:	008000c4 	movi	r2,3
    b468:	1440082e 	bgeu	r2,r17,b48c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b46c:	0005883a 	mov	r2,zero
    b470:	dfc00417 	ldw	ra,16(sp)
    b474:	dcc00317 	ldw	r19,12(sp)
    b478:	dc800217 	ldw	r18,8(sp)
    b47c:	dc400117 	ldw	r17,4(sp)
    b480:	dc000017 	ldw	r16,0(sp)
    b484:	dec00504 	addi	sp,sp,20
    b488:	f800283a 	ret
    b48c:	80800017 	ldw	r2,0(r16)
    b490:	980d883a 	mov	r6,r19
    b494:	900b883a 	mov	r5,r18
    b498:	10800517 	ldw	r2,20(r2)
    b49c:	8009883a 	mov	r4,r16
    b4a0:	dfc00417 	ldw	ra,16(sp)
    b4a4:	dcc00317 	ldw	r19,12(sp)
    b4a8:	dc800217 	ldw	r18,8(sp)
    b4ac:	dc400117 	ldw	r17,4(sp)
    b4b0:	dc000017 	ldw	r16,0(sp)
    b4b4:	dec00504 	addi	sp,sp,20
    b4b8:	1000683a 	jmp	r2
    b4bc:	00800044 	movi	r2,1
    b4c0:	f800283a 	ret

0000b4c4 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b4c4:	00800074 	movhi	r2,1
    b4c8:	deffef04 	addi	sp,sp,-68
    b4cc:	10af8b04 	addi	r2,r2,-16852
    b4d0:	d8800615 	stw	r2,24(sp)
    b4d4:	008000b4 	movhi	r2,2
    b4d8:	108eba04 	addi	r2,r2,15080
    b4dc:	d8800715 	stw	r2,28(sp)
    b4e0:	00800074 	movhi	r2,1
    b4e4:	10ad4704 	addi	r2,r2,-19172
    b4e8:	d9000d15 	stw	r4,52(sp)
    b4ec:	d809883a 	mov	r4,sp
    b4f0:	d8800915 	stw	r2,36(sp)
    b4f4:	dfc01015 	stw	ra,64(sp)
    b4f8:	df000f15 	stw	fp,60(sp)
    b4fc:	dec00815 	stw	sp,32(sp)
    b500:	dec00a15 	stw	sp,40(sp)
    b504:	000e0640 	call	e064 <_Unwind_SjLj_Register>
    b508:	00800044 	movi	r2,1
    b50c:	d8800115 	stw	r2,4(sp)
    b510:	d8800d17 	ldw	r2,52(sp)
    b514:	103ee83a 	callr	r2
    b518:	000e3e00 	call	e3e0 <abort>
    b51c:	d8c00217 	ldw	r3,8(sp)
    b520:	d8800117 	ldw	r2,4(sp)
    b524:	d8c00d15 	stw	r3,52(sp)
    b528:	d8c00317 	ldw	r3,12(sp)
    b52c:	d8c00e15 	stw	r3,56(sp)
    b530:	10000b26 	beq	r2,zero,b560 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b534:	10bfffc4 	addi	r2,r2,-1
    b538:	10000126 	beq	r2,zero,b540 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b53c:	003b68fa 	trap	3
    b540:	d8000115 	stw	zero,4(sp)
    b544:	000c8700 	call	c870 <__cxa_end_catch>
    b548:	d8c00e17 	ldw	r3,56(sp)
    b54c:	00bfffc4 	movi	r2,-1
    b550:	18800826 	beq	r3,r2,b574 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b554:	d9000d17 	ldw	r4,52(sp)
    b558:	d8800115 	stw	r2,4(sp)
    b55c:	000e2600 	call	e260 <_Unwind_SjLj_Resume>
    b560:	d9000d17 	ldw	r4,52(sp)
    b564:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    b568:	00800084 	movi	r2,2
    b56c:	d8800115 	stw	r2,4(sp)
    b570:	000e3e00 	call	e3e0 <abort>
    b574:	d8800e17 	ldw	r2,56(sp)
    b578:	d9000d17 	ldw	r4,52(sp)
    b57c:	d8800115 	stw	r2,4(sp)
    b580:	000c42c0 	call	c42c <__cxa_call_unexpected>

0000b584 <_ZSt9terminatev>:
    b584:	008000f4 	movhi	r2,3
    b588:	10b77f04 	addi	r2,r2,-8708
    b58c:	11000017 	ldw	r4,0(r2)
    b590:	deffff04 	addi	sp,sp,-4
    b594:	dfc00015 	stw	ra,0(sp)
    b598:	000b4c40 	call	b4c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b59c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b59c:	deffff04 	addi	sp,sp,-4
    b5a0:	dfc00015 	stw	ra,0(sp)
    b5a4:	203ee83a 	callr	r4
    b5a8:	000b5840 	call	b584 <_ZSt9terminatev>

0000b5ac <_ZSt10unexpectedv>:
    b5ac:	008000f4 	movhi	r2,3
    b5b0:	10b77e04 	addi	r2,r2,-8712
    b5b4:	11000017 	ldw	r4,0(r2)
    b5b8:	deffff04 	addi	sp,sp,-4
    b5bc:	dfc00015 	stw	ra,0(sp)
    b5c0:	000b59c0 	call	b59c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b5c4 <_ZSt13set_terminatePFvvE>:
    b5c4:	00c000f4 	movhi	r3,3
    b5c8:	18f77f04 	addi	r3,r3,-8708
    b5cc:	18800017 	ldw	r2,0(r3)
    b5d0:	19000015 	stw	r4,0(r3)
    b5d4:	f800283a 	ret

0000b5d8 <_ZSt13get_terminatev>:
    b5d8:	008000f4 	movhi	r2,3
    b5dc:	10b77f04 	addi	r2,r2,-8708
    b5e0:	10800017 	ldw	r2,0(r2)
    b5e4:	f800283a 	ret

0000b5e8 <_ZSt14set_unexpectedPFvvE>:
    b5e8:	00c000f4 	movhi	r3,3
    b5ec:	18f77e04 	addi	r3,r3,-8712
    b5f0:	18800017 	ldw	r2,0(r3)
    b5f4:	19000015 	stw	r4,0(r3)
    b5f8:	f800283a 	ret

0000b5fc <_ZSt14get_unexpectedv>:
    b5fc:	008000f4 	movhi	r2,3
    b600:	10b77e04 	addi	r2,r2,-8712
    b604:	10800017 	ldw	r2,0(r2)
    b608:	f800283a 	ret

0000b60c <_ZL21size_of_encoded_valueh>:
    b60c:	deffff04 	addi	sp,sp,-4
    b610:	dfc00015 	stw	ra,0(sp)
    b614:	20c03fcc 	andi	r3,r4,255
    b618:	00803fc4 	movi	r2,255
    b61c:	18802026 	beq	r3,r2,b6a0 <_ZL21size_of_encoded_valueh+0x94>
    b620:	210001cc 	andi	r4,r4,7
    b624:	00800144 	movi	r2,5
    b628:	11001c36 	bltu	r2,r4,b69c <_ZL21size_of_encoded_valueh+0x90>
    b62c:	200890ba 	slli	r4,r4,2
    b630:	00800074 	movhi	r2,1
    b634:	10ad9104 	addi	r2,r2,-18876
    b638:	2089883a 	add	r4,r4,r2
    b63c:	20800017 	ldw	r2,0(r4)
    b640:	1000683a 	jmp	r2
    b644:	0000b65c 	xori	zero,zero,729
    b648:	0000b69c 	xori	zero,zero,730
    b64c:	0000b66c 	andhi	zero,zero,729
    b650:	0000b65c 	xori	zero,zero,729
    b654:	0000b68c 	andi	zero,zero,730
    b658:	0000b67c 	xorhi	zero,zero,729
    b65c:	00800104 	movi	r2,4
    b660:	dfc00017 	ldw	ra,0(sp)
    b664:	dec00104 	addi	sp,sp,4
    b668:	f800283a 	ret
    b66c:	00800084 	movi	r2,2
    b670:	dfc00017 	ldw	ra,0(sp)
    b674:	dec00104 	addi	sp,sp,4
    b678:	f800283a 	ret
    b67c:	00800044 	movi	r2,1
    b680:	dfc00017 	ldw	ra,0(sp)
    b684:	dec00104 	addi	sp,sp,4
    b688:	f800283a 	ret
    b68c:	00800204 	movi	r2,8
    b690:	dfc00017 	ldw	ra,0(sp)
    b694:	dec00104 	addi	sp,sp,4
    b698:	f800283a 	ret
    b69c:	000e3e00 	call	e3e0 <abort>
    b6a0:	0005883a 	mov	r2,zero
    b6a4:	dfc00017 	ldw	ra,0(sp)
    b6a8:	dec00104 	addi	sp,sp,4
    b6ac:	f800283a 	ret

0000b6b0 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b6b0:	deffff04 	addi	sp,sp,-4
    b6b4:	dfc00015 	stw	ra,0(sp)
    b6b8:	20c03fcc 	andi	r3,r4,255
    b6bc:	00801404 	movi	r2,80
    b6c0:	18807326 	beq	r3,r2,b890 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b6c4:	20c003cc 	andi	r3,r4,15
    b6c8:	00800304 	movi	r2,12
    b6cc:	10c06f36 	bltu	r2,r3,b88c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b6d0:	180690ba 	slli	r3,r3,2
    b6d4:	02000074 	movhi	r8,1
    b6d8:	422dba04 	addi	r8,r8,-18712
    b6dc:	1a07883a 	add	r3,r3,r8
    b6e0:	18800017 	ldw	r2,0(r3)
    b6e4:	1000683a 	jmp	r2
    b6e8:	0000b71c 	xori	zero,zero,732
    b6ec:	0000b838 	rdprs	zero,zero,736
    b6f0:	0000b874 	movhi	zero,737
    b6f4:	0000b71c 	xori	zero,zero,732
    b6f8:	0000b780 	call	b78 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x168>
    b6fc:	0000b7d4 	movui	zero,735
    b700:	0000b88c 	andi	zero,zero,738
    b704:	0000b88c 	andi	zero,zero,738
    b708:	0000b88c 	andi	zero,zero,738
    b70c:	0000b7e0 	cmpeqi	zero,zero,735
    b710:	0000b7b0 	cmpltui	zero,zero,734
    b714:	0000b71c 	xori	zero,zero,732
    b718:	0000b780 	call	b78 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x168>
    b71c:	30800043 	ldbu	r2,1(r6)
    b720:	30c00083 	ldbu	r3,2(r6)
    b724:	324000c3 	ldbu	r9,3(r6)
    b728:	32000003 	ldbu	r8,0(r6)
    b72c:	1004923a 	slli	r2,r2,8
    b730:	1806943a 	slli	r3,r3,16
    b734:	4812963a 	slli	r9,r9,24
    b738:	1204b03a 	or	r2,r2,r8
    b73c:	1884b03a 	or	r2,r3,r2
    b740:	4886b03a 	or	r3,r9,r2
    b744:	30800104 	addi	r2,r6,4
    b748:	18000926 	beq	r3,zero,b770 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b74c:	22001c0c 	andi	r8,r4,112
    b750:	02400404 	movi	r9,16
    b754:	42405726 	beq	r8,r9,b8b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b758:	21003fcc 	andi	r4,r4,255
    b75c:	2100201c 	xori	r4,r4,128
    b760:	213fe004 	addi	r4,r4,-128
    b764:	1947883a 	add	r3,r3,r5
    b768:	2000010e 	bge	r4,zero,b770 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b76c:	18c00017 	ldw	r3,0(r3)
    b770:	38c00015 	stw	r3,0(r7)
    b774:	dfc00017 	ldw	ra,0(sp)
    b778:	dec00104 	addi	sp,sp,4
    b77c:	f800283a 	ret
    b780:	30800043 	ldbu	r2,1(r6)
    b784:	30c00083 	ldbu	r3,2(r6)
    b788:	324000c3 	ldbu	r9,3(r6)
    b78c:	32000003 	ldbu	r8,0(r6)
    b790:	1004923a 	slli	r2,r2,8
    b794:	1806943a 	slli	r3,r3,16
    b798:	4812963a 	slli	r9,r9,24
    b79c:	1204b03a 	or	r2,r2,r8
    b7a0:	1884b03a 	or	r2,r3,r2
    b7a4:	4886b03a 	or	r3,r9,r2
    b7a8:	30800204 	addi	r2,r6,8
    b7ac:	003fe606 	br	b748 <__alt_data_end+0xfc00b748>
    b7b0:	30c00043 	ldbu	r3,1(r6)
    b7b4:	32000003 	ldbu	r8,0(r6)
    b7b8:	30800084 	addi	r2,r6,2
    b7bc:	1806923a 	slli	r3,r3,8
    b7c0:	1a06b03a 	or	r3,r3,r8
    b7c4:	18ffffcc 	andi	r3,r3,65535
    b7c8:	18e0001c 	xori	r3,r3,32768
    b7cc:	18e00004 	addi	r3,r3,-32768
    b7d0:	003fdd06 	br	b748 <__alt_data_end+0xfc00b748>
    b7d4:	30c00003 	ldbu	r3,0(r6)
    b7d8:	30800044 	addi	r2,r6,1
    b7dc:	003fda06 	br	b748 <__alt_data_end+0xfc00b748>
    b7e0:	3017883a 	mov	r11,r6
    b7e4:	0007883a 	mov	r3,zero
    b7e8:	0013883a 	mov	r9,zero
    b7ec:	5a800003 	ldbu	r10,0(r11)
    b7f0:	58800044 	addi	r2,r11,1
    b7f4:	1017883a 	mov	r11,r2
    b7f8:	52001fcc 	andi	r8,r10,127
    b7fc:	4250983a 	sll	r8,r8,r9
    b800:	53003fcc 	andi	r12,r10,255
    b804:	6300201c 	xori	r12,r12,128
    b808:	633fe004 	addi	r12,r12,-128
    b80c:	1a06b03a 	or	r3,r3,r8
    b810:	4a4001c4 	addi	r9,r9,7
    b814:	603ff516 	blt	r12,zero,b7ec <__alt_data_end+0xfc00b7ec>
    b818:	020007c4 	movi	r8,31
    b81c:	427fca36 	bltu	r8,r9,b748 <__alt_data_end+0xfc00b748>
    b820:	5280100c 	andi	r10,r10,64
    b824:	503fc826 	beq	r10,zero,b748 <__alt_data_end+0xfc00b748>
    b828:	023fffc4 	movi	r8,-1
    b82c:	4252983a 	sll	r9,r8,r9
    b830:	1a46b03a 	or	r3,r3,r9
    b834:	003fc506 	br	b74c <__alt_data_end+0xfc00b74c>
    b838:	3017883a 	mov	r11,r6
    b83c:	0007883a 	mov	r3,zero
    b840:	0015883a 	mov	r10,zero
    b844:	5a000003 	ldbu	r8,0(r11)
    b848:	58800044 	addi	r2,r11,1
    b84c:	1017883a 	mov	r11,r2
    b850:	42401fcc 	andi	r9,r8,127
    b854:	4a92983a 	sll	r9,r9,r10
    b858:	42003fcc 	andi	r8,r8,255
    b85c:	4200201c 	xori	r8,r8,128
    b860:	423fe004 	addi	r8,r8,-128
    b864:	1a46b03a 	or	r3,r3,r9
    b868:	528001c4 	addi	r10,r10,7
    b86c:	403ff516 	blt	r8,zero,b844 <__alt_data_end+0xfc00b844>
    b870:	003fb506 	br	b748 <__alt_data_end+0xfc00b748>
    b874:	30c00043 	ldbu	r3,1(r6)
    b878:	32000003 	ldbu	r8,0(r6)
    b87c:	30800084 	addi	r2,r6,2
    b880:	1806923a 	slli	r3,r3,8
    b884:	1a06b03a 	or	r3,r3,r8
    b888:	003faf06 	br	b748 <__alt_data_end+0xfc00b748>
    b88c:	000e3e00 	call	e3e0 <abort>
    b890:	308000c4 	addi	r2,r6,3
    b894:	00ffff04 	movi	r3,-4
    b898:	10c4703a 	and	r2,r2,r3
    b89c:	10c00017 	ldw	r3,0(r2)
    b8a0:	10800104 	addi	r2,r2,4
    b8a4:	38c00015 	stw	r3,0(r7)
    b8a8:	dfc00017 	ldw	ra,0(sp)
    b8ac:	dec00104 	addi	sp,sp,4
    b8b0:	f800283a 	ret
    b8b4:	300b883a 	mov	r5,r6
    b8b8:	003fa706 	br	b758 <__alt_data_end+0xfc00b758>

0000b8bc <_ZL15get_ttype_entryP16lsda_header_infom>:
    b8bc:	defffc04 	addi	sp,sp,-16
    b8c0:	dfc00315 	stw	ra,12(sp)
    b8c4:	dc000215 	stw	r16,8(sp)
    b8c8:	2021883a 	mov	r16,r4
    b8cc:	21000503 	ldbu	r4,20(r4)
    b8d0:	d9400115 	stw	r5,4(sp)
    b8d4:	000b60c0 	call	b60c <_ZL21size_of_encoded_valueh>
    b8d8:	d9400117 	ldw	r5,4(sp)
    b8dc:	1009883a 	mov	r4,r2
    b8e0:	000cec40 	call	cec4 <__mulsi3>
    b8e4:	81800317 	ldw	r6,12(r16)
    b8e8:	81400217 	ldw	r5,8(r16)
    b8ec:	81000503 	ldbu	r4,20(r16)
    b8f0:	d80f883a 	mov	r7,sp
    b8f4:	308dc83a 	sub	r6,r6,r2
    b8f8:	000b6b00 	call	b6b0 <_ZL28read_encoded_value_with_basehjPKhPj>
    b8fc:	d8800017 	ldw	r2,0(sp)
    b900:	dfc00317 	ldw	ra,12(sp)
    b904:	dc000217 	ldw	r16,8(sp)
    b908:	dec00404 	addi	sp,sp,16
    b90c:	f800283a 	ret

0000b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b910:	deffff04 	addi	sp,sp,-4
    b914:	dfc00015 	stw	ra,0(sp)
    b918:	20c03fcc 	andi	r3,r4,255
    b91c:	00803fc4 	movi	r2,255
    b920:	18800e26 	beq	r3,r2,b95c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b924:	20801c0c 	andi	r2,r4,112
    b928:	00c00804 	movi	r3,32
    b92c:	10c01726 	beq	r2,r3,b98c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b930:	18800e2e 	bgeu	r3,r2,b96c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b934:	00c01004 	movi	r3,64
    b938:	10c01026 	beq	r2,r3,b97c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b93c:	00c01404 	movi	r3,80
    b940:	10c00626 	beq	r2,r3,b95c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b944:	00c00c04 	movi	r3,48
    b948:	10c00b1e 	bne	r2,r3,b978 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b94c:	2809883a 	mov	r4,r5
    b950:	dfc00017 	ldw	ra,0(sp)
    b954:	dec00104 	addi	sp,sp,4
    b958:	000e13c1 	jmpi	e13c <_Unwind_GetDataRelBase>
    b95c:	0005883a 	mov	r2,zero
    b960:	dfc00017 	ldw	ra,0(sp)
    b964:	dec00104 	addi	sp,sp,4
    b968:	f800283a 	ret
    b96c:	103ffb26 	beq	r2,zero,b95c <__alt_data_end+0xfc00b95c>
    b970:	00c00404 	movi	r3,16
    b974:	10fff926 	beq	r2,r3,b95c <__alt_data_end+0xfc00b95c>
    b978:	000e3e00 	call	e3e0 <abort>
    b97c:	2809883a 	mov	r4,r5
    b980:	dfc00017 	ldw	ra,0(sp)
    b984:	dec00104 	addi	sp,sp,4
    b988:	000e12c1 	jmpi	e12c <_Unwind_GetRegionStart>
    b98c:	2809883a 	mov	r4,r5
    b990:	dfc00017 	ldw	ra,0(sp)
    b994:	dec00104 	addi	sp,sp,4
    b998:	000e1441 	jmpi	e144 <_Unwind_GetTextRelBase>

0000b99c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b99c:	defffb04 	addi	sp,sp,-20
    b9a0:	dcc00315 	stw	r19,12(sp)
    b9a4:	dc400115 	stw	r17,4(sp)
    b9a8:	dc000015 	stw	r16,0(sp)
    b9ac:	dfc00415 	stw	ra,16(sp)
    b9b0:	dc800215 	stw	r18,8(sp)
    b9b4:	2027883a 	mov	r19,r4
    b9b8:	2821883a 	mov	r16,r5
    b9bc:	3023883a 	mov	r17,r6
    b9c0:	20003f26 	beq	r4,zero,bac0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b9c4:	000e12c0 	call	e12c <_Unwind_GetRegionStart>
    b9c8:	88800015 	stw	r2,0(r17)
    b9cc:	84800003 	ldbu	r18,0(r16)
    b9d0:	00c03fc4 	movi	r3,255
    b9d4:	84000044 	addi	r16,r16,1
    b9d8:	90c03726 	beq	r18,r3,bab8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b9dc:	980b883a 	mov	r5,r19
    b9e0:	9009883a 	mov	r4,r18
    b9e4:	000b9100 	call	b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b9e8:	800d883a 	mov	r6,r16
    b9ec:	89c00104 	addi	r7,r17,4
    b9f0:	100b883a 	mov	r5,r2
    b9f4:	9009883a 	mov	r4,r18
    b9f8:	000b6b00 	call	b6b0 <_ZL28read_encoded_value_with_basehjPKhPj>
    b9fc:	1021883a 	mov	r16,r2
    ba00:	80c00003 	ldbu	r3,0(r16)
    ba04:	01003fc4 	movi	r4,255
    ba08:	80800044 	addi	r2,r16,1
    ba0c:	88c00505 	stb	r3,20(r17)
    ba10:	18c03fcc 	andi	r3,r3,255
    ba14:	19002c26 	beq	r3,r4,bac8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    ba18:	100f883a 	mov	r7,r2
    ba1c:	000d883a 	mov	r6,zero
    ba20:	000b883a 	mov	r5,zero
    ba24:	38c00003 	ldbu	r3,0(r7)
    ba28:	10800044 	addi	r2,r2,1
    ba2c:	100f883a 	mov	r7,r2
    ba30:	19001fcc 	andi	r4,r3,127
    ba34:	2148983a 	sll	r4,r4,r5
    ba38:	18c03fcc 	andi	r3,r3,255
    ba3c:	18c0201c 	xori	r3,r3,128
    ba40:	18ffe004 	addi	r3,r3,-128
    ba44:	310cb03a 	or	r6,r6,r4
    ba48:	294001c4 	addi	r5,r5,7
    ba4c:	183ff516 	blt	r3,zero,ba24 <__alt_data_end+0xfc00ba24>
    ba50:	118d883a 	add	r6,r2,r6
    ba54:	89800315 	stw	r6,12(r17)
    ba58:	10c00003 	ldbu	r3,0(r2)
    ba5c:	000d883a 	mov	r6,zero
    ba60:	10800044 	addi	r2,r2,1
    ba64:	88c00545 	stb	r3,21(r17)
    ba68:	000b883a 	mov	r5,zero
    ba6c:	10c00003 	ldbu	r3,0(r2)
    ba70:	10800044 	addi	r2,r2,1
    ba74:	19001fcc 	andi	r4,r3,127
    ba78:	2148983a 	sll	r4,r4,r5
    ba7c:	18c03fcc 	andi	r3,r3,255
    ba80:	18c0201c 	xori	r3,r3,128
    ba84:	18ffe004 	addi	r3,r3,-128
    ba88:	310cb03a 	or	r6,r6,r4
    ba8c:	294001c4 	addi	r5,r5,7
    ba90:	183ff616 	blt	r3,zero,ba6c <__alt_data_end+0xfc00ba6c>
    ba94:	118d883a 	add	r6,r2,r6
    ba98:	89800415 	stw	r6,16(r17)
    ba9c:	dfc00417 	ldw	ra,16(sp)
    baa0:	dcc00317 	ldw	r19,12(sp)
    baa4:	dc800217 	ldw	r18,8(sp)
    baa8:	dc400117 	ldw	r17,4(sp)
    baac:	dc000017 	ldw	r16,0(sp)
    bab0:	dec00504 	addi	sp,sp,20
    bab4:	f800283a 	ret
    bab8:	88800115 	stw	r2,4(r17)
    babc:	003fd006 	br	ba00 <__alt_data_end+0xfc00ba00>
    bac0:	0005883a 	mov	r2,zero
    bac4:	003fc006 	br	b9c8 <__alt_data_end+0xfc00b9c8>
    bac8:	88000315 	stw	zero,12(r17)
    bacc:	003fe206 	br	ba58 <__alt_data_end+0xfc00ba58>

0000bad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    bad0:	28800017 	ldw	r2,0(r5)
    bad4:	30c00017 	ldw	r3,0(r6)
    bad8:	defffb04 	addi	sp,sp,-20
    badc:	10800217 	ldw	r2,8(r2)
    bae0:	dc400315 	stw	r17,12(sp)
    bae4:	dc000215 	stw	r16,8(sp)
    bae8:	d9400115 	stw	r5,4(sp)
    baec:	dfc00415 	stw	ra,16(sp)
    baf0:	2021883a 	mov	r16,r4
    baf4:	d8c00015 	stw	r3,0(sp)
    baf8:	2809883a 	mov	r4,r5
    bafc:	3023883a 	mov	r17,r6
    bb00:	103ee83a 	callr	r2
    bb04:	10803fcc 	andi	r2,r2,255
    bb08:	d9400117 	ldw	r5,4(sp)
    bb0c:	10000326 	beq	r2,zero,bb1c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    bb10:	d8800017 	ldw	r2,0(sp)
    bb14:	10800017 	ldw	r2,0(r2)
    bb18:	d8800015 	stw	r2,0(sp)
    bb1c:	80800017 	ldw	r2,0(r16)
    bb20:	01c00044 	movi	r7,1
    bb24:	d80d883a 	mov	r6,sp
    bb28:	10800417 	ldw	r2,16(r2)
    bb2c:	8009883a 	mov	r4,r16
    bb30:	103ee83a 	callr	r2
    bb34:	10c03fcc 	andi	r3,r2,255
    bb38:	18000226 	beq	r3,zero,bb44 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    bb3c:	d8c00017 	ldw	r3,0(sp)
    bb40:	88c00015 	stw	r3,0(r17)
    bb44:	dfc00417 	ldw	ra,16(sp)
    bb48:	dc400317 	ldw	r17,12(sp)
    bb4c:	dc000217 	ldw	r16,8(sp)
    bb50:	dec00504 	addi	sp,sp,20
    bb54:	f800283a 	ret

0000bb58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    bb58:	defff304 	addi	sp,sp,-52
    bb5c:	dc800615 	stw	r18,24(sp)
    bb60:	3825d23a 	srai	r18,r7,8
    bb64:	dd000815 	stw	r20,32(sp)
    bb68:	dcc00715 	stw	r19,28(sp)
    bb6c:	dfc00c15 	stw	ra,48(sp)
    bb70:	ddc00b15 	stw	r23,44(sp)
    bb74:	dd800a15 	stw	r22,40(sp)
    bb78:	dd400915 	stw	r21,36(sp)
    bb7c:	dc400515 	stw	r17,20(sp)
    bb80:	dc000415 	stw	r16,16(sp)
    bb84:	d9400215 	stw	r5,8(sp)
    bb88:	3827883a 	mov	r19,r7
    bb8c:	2029883a 	mov	r20,r4
    bb90:	9000010e 	bge	r18,zero,bb98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    bb94:	04a5c83a 	sub	r18,zero,r18
    bb98:	000b883a 	mov	r5,zero
    bb9c:	01000144 	movi	r4,5
    bba0:	d9800315 	stw	r6,12(sp)
    bba4:	000b9100 	call	b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bba8:	d9800317 	ldw	r6,12(sp)
    bbac:	d9c00104 	addi	r7,sp,4
    bbb0:	100b883a 	mov	r5,r2
    bbb4:	01000144 	movi	r4,5
    bbb8:	000b6b00 	call	b6b0 <_ZL28read_encoded_value_with_basehjPKhPj>
    bbbc:	017ffe44 	movi	r5,-7
    bbc0:	1009883a 	mov	r4,r2
    bbc4:	1021883a 	mov	r16,r2
    bbc8:	000cec40 	call	cec4 <__mulsi3>
    bbcc:	102d883a 	mov	r22,r2
    bbd0:	0023883a 	mov	r17,zero
    bbd4:	85400003 	ldbu	r21,0(r16)
    bbd8:	8009883a 	mov	r4,r16
    bbdc:	014001c4 	movi	r5,7
    bbe0:	000cec40 	call	cec4 <__mulsi3>
    bbe4:	a8c01fcc 	andi	r3,r21,127
    bbe8:	1585883a 	add	r2,r2,r22
    bbec:	1886983a 	sll	r3,r3,r2
    bbf0:	ad403fcc 	andi	r21,r21,255
    bbf4:	ad40201c 	xori	r21,r21,128
    bbf8:	ad7fe004 	addi	r21,r21,-128
    bbfc:	84000044 	addi	r16,r16,1
    bc00:	88e2b03a 	or	r17,r17,r3
    bc04:	a83ff316 	blt	r21,zero,bbd4 <__alt_data_end+0xfc00bbd4>
    bc08:	8461883a 	add	r16,r16,r17
    bc0c:	017ffe44 	movi	r5,-7
    bc10:	8009883a 	mov	r4,r16
    bc14:	000cec40 	call	cec4 <__mulsi3>
    bc18:	102d883a 	mov	r22,r2
    bc1c:	002b883a 	mov	r21,zero
    bc20:	84400003 	ldbu	r17,0(r16)
    bc24:	8009883a 	mov	r4,r16
    bc28:	014001c4 	movi	r5,7
    bc2c:	000cec40 	call	cec4 <__mulsi3>
    bc30:	88c01fcc 	andi	r3,r17,127
    bc34:	1585883a 	add	r2,r2,r22
    bc38:	1886983a 	sll	r3,r3,r2
    bc3c:	8c403fcc 	andi	r17,r17,255
    bc40:	8c40201c 	xori	r17,r17,128
    bc44:	8c7fe004 	addi	r17,r17,-128
    bc48:	84000044 	addi	r16,r16,1
    bc4c:	a8eab03a 	or	r21,r21,r3
    bc50:	883ff316 	blt	r17,zero,bc20 <__alt_data_end+0xfc00bc20>
    bc54:	94403fcc 	andi	r17,r18,255
    bc58:	8c7fffc4 	addi	r17,r17,-1
    bc5c:	8463883a 	add	r17,r16,r17
    bc60:	ad4000c4 	addi	r21,r21,3
    bc64:	00bfff04 	movi	r2,-4
    bc68:	ac21883a 	add	r16,r21,r16
    bc6c:	017ffe44 	movi	r5,-7
    bc70:	8809883a 	mov	r4,r17
    bc74:	80a0703a 	and	r16,r16,r2
    bc78:	000cec40 	call	cec4 <__mulsi3>
    bc7c:	0025883a 	mov	r18,zero
    bc80:	102f883a 	mov	r23,r2
    bc84:	8d800003 	ldbu	r22,0(r17)
    bc88:	8809883a 	mov	r4,r17
    bc8c:	014001c4 	movi	r5,7
    bc90:	000cec40 	call	cec4 <__mulsi3>
    bc94:	b0c01fcc 	andi	r3,r22,127
    bc98:	15c5883a 	add	r2,r2,r23
    bc9c:	1886983a 	sll	r3,r3,r2
    bca0:	b5803fcc 	andi	r22,r22,255
    bca4:	b580201c 	xori	r22,r22,128
    bca8:	8d400044 	addi	r21,r17,1
    bcac:	b5bfe004 	addi	r22,r22,-128
    bcb0:	90e4b03a 	or	r18,r18,r3
    bcb4:	a823883a 	mov	r17,r21
    bcb8:	b03ff216 	blt	r22,zero,bc84 <__alt_data_end+0xfc00bc84>
    bcbc:	9cc03fcc 	andi	r19,r19,255
    bcc0:	90002426 	beq	r18,zero,bd54 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bcc4:	9809883a 	mov	r4,r19
    bcc8:	000b60c0 	call	b60c <_ZL21size_of_encoded_valueh>
    bccc:	100b883a 	mov	r5,r2
    bcd0:	913fffc4 	addi	r4,r18,-1
    bcd4:	000cec40 	call	cec4 <__mulsi3>
    bcd8:	d9400d17 	ldw	r5,52(sp)
    bcdc:	d80f883a 	mov	r7,sp
    bce0:	9809883a 	mov	r4,r19
    bce4:	140d883a 	add	r6,r2,r16
    bce8:	000b6b00 	call	b6b0 <_ZL28read_encoded_value_with_basehjPKhPj>
    bcec:	d9000017 	ldw	r4,0(sp)
    bcf0:	d9800204 	addi	r6,sp,8
    bcf4:	a00b883a 	mov	r5,r20
    bcf8:	000bad00 	call	bad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bcfc:	10c03fcc 	andi	r3,r2,255
    bd00:	1800151e 	bne	r3,zero,bd58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bd04:	a809883a 	mov	r4,r21
    bd08:	017ffe44 	movi	r5,-7
    bd0c:	000cec40 	call	cec4 <__mulsi3>
    bd10:	102d883a 	mov	r22,r2
    bd14:	a809883a 	mov	r4,r21
    bd18:	0025883a 	mov	r18,zero
    bd1c:	24400003 	ldbu	r17,0(r4)
    bd20:	014001c4 	movi	r5,7
    bd24:	000cec40 	call	cec4 <__mulsi3>
    bd28:	88c01fcc 	andi	r3,r17,127
    bd2c:	1585883a 	add	r2,r2,r22
    bd30:	1886983a 	sll	r3,r3,r2
    bd34:	8c403fcc 	andi	r17,r17,255
    bd38:	8c40201c 	xori	r17,r17,128
    bd3c:	ad400044 	addi	r21,r21,1
    bd40:	8c7fe004 	addi	r17,r17,-128
    bd44:	90e4b03a 	or	r18,r18,r3
    bd48:	a809883a 	mov	r4,r21
    bd4c:	883ff316 	blt	r17,zero,bd1c <__alt_data_end+0xfc00bd1c>
    bd50:	003fdb06 	br	bcc0 <__alt_data_end+0xfc00bcc0>
    bd54:	0005883a 	mov	r2,zero
    bd58:	dfc00c17 	ldw	ra,48(sp)
    bd5c:	ddc00b17 	ldw	r23,44(sp)
    bd60:	dd800a17 	ldw	r22,40(sp)
    bd64:	dd400917 	ldw	r21,36(sp)
    bd68:	dd000817 	ldw	r20,32(sp)
    bd6c:	dcc00717 	ldw	r19,28(sp)
    bd70:	dc800617 	ldw	r18,24(sp)
    bd74:	dc400517 	ldw	r17,20(sp)
    bd78:	dc000417 	ldw	r16,16(sp)
    bd7c:	dec00d04 	addi	sp,sp,52
    bd80:	f800283a 	ret

0000bd84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bd84:	defffb04 	addi	sp,sp,-20
    bd88:	dc000115 	stw	r16,4(sp)
    bd8c:	24000317 	ldw	r16,12(r4)
    bd90:	01ce303a 	nor	r7,zero,r7
    bd94:	dc800315 	stw	r18,12(sp)
    bd98:	dc400215 	stw	r17,8(sp)
    bd9c:	dfc00415 	stw	ra,16(sp)
    bda0:	2023883a 	mov	r17,r4
    bda4:	2825883a 	mov	r18,r5
    bda8:	d9800015 	stw	r6,0(sp)
    bdac:	81e1883a 	add	r16,r16,r7
    bdb0:	800d883a 	mov	r6,r16
    bdb4:	000b883a 	mov	r5,zero
    bdb8:	0009883a 	mov	r4,zero
    bdbc:	30800003 	ldbu	r2,0(r6)
    bdc0:	84000044 	addi	r16,r16,1
    bdc4:	800d883a 	mov	r6,r16
    bdc8:	10c01fcc 	andi	r3,r2,127
    bdcc:	1906983a 	sll	r3,r3,r4
    bdd0:	10803fcc 	andi	r2,r2,255
    bdd4:	1080201c 	xori	r2,r2,128
    bdd8:	10bfe004 	addi	r2,r2,-128
    bddc:	28cab03a 	or	r5,r5,r3
    bde0:	210001c4 	addi	r4,r4,7
    bde4:	103ff516 	blt	r2,zero,bdbc <__alt_data_end+0xfc00bdbc>
    bde8:	28000e26 	beq	r5,zero,be24 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bdec:	8809883a 	mov	r4,r17
    bdf0:	000b8bc0 	call	b8bc <_ZL15get_ttype_entryP16lsda_header_infom>
    bdf4:	d80d883a 	mov	r6,sp
    bdf8:	900b883a 	mov	r5,r18
    bdfc:	1009883a 	mov	r4,r2
    be00:	000bad00 	call	bad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    be04:	10c03fcc 	andi	r3,r2,255
    be08:	183fe926 	beq	r3,zero,bdb0 <__alt_data_end+0xfc00bdb0>
    be0c:	dfc00417 	ldw	ra,16(sp)
    be10:	dc800317 	ldw	r18,12(sp)
    be14:	dc400217 	ldw	r17,8(sp)
    be18:	dc000117 	ldw	r16,4(sp)
    be1c:	dec00504 	addi	sp,sp,20
    be20:	f800283a 	ret
    be24:	0005883a 	mov	r2,zero
    be28:	003ff806 	br	be0c <__alt_data_end+0xfc00be0c>

0000be2c <__gxx_personality_sj0>:
    be2c:	00800074 	movhi	r2,1
    be30:	deffdd04 	addi	sp,sp,-140
    be34:	10af8b04 	addi	r2,r2,-16852
    be38:	d8800e15 	stw	r2,56(sp)
    be3c:	008000b4 	movhi	r2,2
    be40:	108ec004 	addi	r2,r2,15104
    be44:	d8800f15 	stw	r2,60(sp)
    be48:	00800074 	movhi	r2,1
    be4c:	10b10104 	addi	r2,r2,-15356
    be50:	d9001515 	stw	r4,84(sp)
    be54:	d9000804 	addi	r4,sp,32
    be58:	d8801115 	stw	r2,68(sp)
    be5c:	dfc02215 	stw	ra,136(sp)
    be60:	df002115 	stw	fp,132(sp)
    be64:	dec01015 	stw	sp,64(sp)
    be68:	dec01215 	stw	sp,72(sp)
    be6c:	d9401915 	stw	r5,100(sp)
    be70:	d9801615 	stw	r6,88(sp)
    be74:	d9c01715 	stw	r7,92(sp)
    be78:	000e0640 	call	e064 <_Unwind_SjLj_Register>
    be7c:	d8c01517 	ldw	r3,84(sp)
    be80:	d8000715 	stw	zero,28(sp)
    be84:	d8000615 	stw	zero,24(sp)
    be88:	00800044 	movi	r2,1
    be8c:	18800926 	beq	r3,r2,beb4 <__gxx_personality_sj0+0x88>
    be90:	01c000c4 	movi	r7,3
    be94:	d9c01515 	stw	r7,84(sp)
    be98:	d9000804 	addi	r4,sp,32
    be9c:	000e07c0 	call	e07c <_Unwind_SjLj_Unregister>
    bea0:	d8801517 	ldw	r2,84(sp)
    bea4:	dfc02217 	ldw	ra,136(sp)
    bea8:	df002117 	ldw	fp,132(sp)
    beac:	dec02304 	addi	sp,sp,140
    beb0:	f800283a 	ret
    beb4:	d9001617 	ldw	r4,88(sp)
    beb8:	00af3574 	movhi	r2,48341
    bebc:	d9c01717 	ldw	r7,92(sp)
    bec0:	10b54004 	addi	r2,r2,-11008
    bec4:	00ee2cb4 	movhi	r3,47282
    bec8:	2085883a 	add	r2,r4,r2
    becc:	18eaaf04 	addi	r3,r3,-21828
    bed0:	d8801b15 	stw	r2,108(sp)
    bed4:	38c7883a 	add	r3,r7,r3
    bed8:	1105803a 	cmpltu	r2,r2,r4
    bedc:	10c7883a 	add	r3,r2,r3
    bee0:	d8c01c15 	stw	r3,112(sp)
    bee4:	d8c01917 	ldw	r3,100(sp)
    bee8:	00800184 	movi	r2,6
    beec:	18805426 	beq	r3,r2,c040 <__gxx_personality_sj0+0x214>
    bef0:	d9002417 	ldw	r4,144(sp)
    bef4:	00bfffc4 	movi	r2,-1
    bef8:	d8800915 	stw	r2,36(sp)
    befc:	000e1200 	call	e120 <_Unwind_GetLanguageSpecificData>
    bf00:	d8801a15 	stw	r2,104(sp)
    bf04:	1000c926 	beq	r2,zero,c22c <__gxx_personality_sj0+0x400>
    bf08:	d9002417 	ldw	r4,144(sp)
    bf0c:	d80d883a 	mov	r6,sp
    bf10:	100b883a 	mov	r5,r2
    bf14:	000b99c0 	call	b99c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bf18:	d9402417 	ldw	r5,144(sp)
    bf1c:	d9000503 	ldbu	r4,20(sp)
    bf20:	d8801515 	stw	r2,84(sp)
    bf24:	000b9100 	call	b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf28:	d9002417 	ldw	r4,144(sp)
    bf2c:	d9400604 	addi	r5,sp,24
    bf30:	d8800215 	stw	r2,8(sp)
    bf34:	000e0f00 	call	e0f0 <_Unwind_GetIPInfo>
    bf38:	d8c00617 	ldw	r3,24(sp)
    bf3c:	18006126 	beq	r3,zero,c0c4 <__gxx_personality_sj0+0x298>
    bf40:	1000ba16 	blt	r2,zero,c22c <__gxx_personality_sj0+0x400>
    bf44:	10002f1e 	bne	r2,zero,c004 <__gxx_personality_sj0+0x1d8>
    bf48:	d8001515 	stw	zero,84(sp)
    bf4c:	d8001f15 	stw	zero,124(sp)
    bf50:	d8001815 	stw	zero,96(sp)
    bf54:	00c00044 	movi	r3,1
    bf58:	d9001917 	ldw	r4,100(sp)
    bf5c:	2080004c 	andi	r2,r4,1
    bf60:	1000b51e 	bne	r2,zero,c238 <__gxx_personality_sj0+0x40c>
    bf64:	d9001917 	ldw	r4,100(sp)
    bf68:	2080020c 	andi	r2,r4,8
    bf6c:	1000b71e 	bne	r2,zero,c24c <__gxx_personality_sj0+0x420>
    bf70:	d9c01c17 	ldw	r7,112(sp)
    bf74:	3800b826 	beq	r7,zero,c258 <__gxx_personality_sj0+0x42c>
    bf78:	00800044 	movi	r2,1
    bf7c:	1880b526 	beq	r3,r2,c254 <__gxx_personality_sj0+0x428>
    bf80:	d9c01517 	ldw	r7,84(sp)
    bf84:	3800f516 	blt	r7,zero,c35c <__gxx_personality_sj0+0x530>
    bf88:	d9002417 	ldw	r4,144(sp)
    bf8c:	d9802317 	ldw	r6,140(sp)
    bf90:	00bfffc4 	movi	r2,-1
    bf94:	000b883a 	mov	r5,zero
    bf98:	d8800915 	stw	r2,36(sp)
    bf9c:	000e0c40 	call	e0c4 <_Unwind_SetGR>
    bfa0:	d9801517 	ldw	r6,84(sp)
    bfa4:	d9002417 	ldw	r4,144(sp)
    bfa8:	01400044 	movi	r5,1
    bfac:	000e0c40 	call	e0c4 <_Unwind_SetGR>
    bfb0:	d9002417 	ldw	r4,144(sp)
    bfb4:	d9401f17 	ldw	r5,124(sp)
    bfb8:	000e1100 	call	e110 <_Unwind_SetIP>
    bfbc:	010001c4 	movi	r4,7
    bfc0:	d9001515 	stw	r4,84(sp)
    bfc4:	003fb406 	br	be98 <__alt_data_end+0xfc00be98>
    bfc8:	000f883a 	mov	r7,zero
    bfcc:	000d883a 	mov	r6,zero
    bfd0:	19000003 	ldbu	r4,0(r3)
    bfd4:	18c00044 	addi	r3,r3,1
    bfd8:	d8c01515 	stw	r3,84(sp)
    bfdc:	21401fcc 	andi	r5,r4,127
    bfe0:	298a983a 	sll	r5,r5,r6
    bfe4:	21003fcc 	andi	r4,r4,255
    bfe8:	2100201c 	xori	r4,r4,128
    bfec:	213fe004 	addi	r4,r4,-128
    bff0:	394eb03a 	or	r7,r7,r5
    bff4:	318001c4 	addi	r6,r6,7
    bff8:	203ff516 	blt	r4,zero,bfd0 <__alt_data_end+0xfc00bfd0>
    bffc:	10bfffc4 	addi	r2,r2,-1
    c000:	10003226 	beq	r2,zero,c0cc <__gxx_personality_sj0+0x2a0>
    c004:	d9c01517 	ldw	r7,84(sp)
    c008:	0011883a 	mov	r8,zero
    c00c:	000d883a 	mov	r6,zero
    c010:	39000003 	ldbu	r4,0(r7)
    c014:	38c00044 	addi	r3,r7,1
    c018:	180f883a 	mov	r7,r3
    c01c:	21401fcc 	andi	r5,r4,127
    c020:	298a983a 	sll	r5,r5,r6
    c024:	21003fcc 	andi	r4,r4,255
    c028:	2100201c 	xori	r4,r4,128
    c02c:	213fe004 	addi	r4,r4,-128
    c030:	4150b03a 	or	r8,r8,r5
    c034:	318001c4 	addi	r6,r6,7
    c038:	203ff516 	blt	r4,zero,c010 <__alt_data_end+0xfc00c010>
    c03c:	003fe206 	br	bfc8 <__alt_data_end+0xfc00bfc8>
    c040:	d9001c17 	ldw	r4,112(sp)
    c044:	203faa1e 	bne	r4,zero,bef0 <__alt_data_end+0xfc00bef0>
    c048:	d9c01517 	ldw	r7,84(sp)
    c04c:	d8801b17 	ldw	r2,108(sp)
    c050:	38bfa736 	bltu	r7,r2,bef0 <__alt_data_end+0xfc00bef0>
    c054:	d8c02317 	ldw	r3,140(sp)
    c058:	18fffe17 	ldw	r3,-8(r3)
    c05c:	d8c01f15 	stw	r3,124(sp)
    c060:	18008226 	beq	r3,zero,c26c <__gxx_personality_sj0+0x440>
    c064:	d9002317 	ldw	r4,140(sp)
    c068:	d9c02317 	ldw	r7,140(sp)
    c06c:	213ffb17 	ldw	r4,-20(r4)
    c070:	39fffd17 	ldw	r7,-12(r7)
    c074:	d9001515 	stw	r4,84(sp)
    c078:	d9c01a15 	stw	r7,104(sp)
    c07c:	d8801517 	ldw	r2,84(sp)
    c080:	103fc10e 	bge	r2,zero,bf88 <__alt_data_end+0xfc00bf88>
    c084:	d9002417 	ldw	r4,144(sp)
    c088:	d9401a17 	ldw	r5,104(sp)
    c08c:	d80d883a 	mov	r6,sp
    c090:	00bfffc4 	movi	r2,-1
    c094:	d8800915 	stw	r2,36(sp)
    c098:	000b99c0 	call	b99c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c09c:	d9402417 	ldw	r5,144(sp)
    c0a0:	d9000503 	ldbu	r4,20(sp)
    c0a4:	000b9100 	call	b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c0a8:	d9000503 	ldbu	r4,20(sp)
    c0ac:	d9402417 	ldw	r5,144(sp)
    c0b0:	d8800215 	stw	r2,8(sp)
    c0b4:	000b9100 	call	b910 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c0b8:	d8c02317 	ldw	r3,140(sp)
    c0bc:	18bffe15 	stw	r2,-8(r3)
    c0c0:	003fb106 	br	bf88 <__alt_data_end+0xfc00bf88>
    c0c4:	10bfffc4 	addi	r2,r2,-1
    c0c8:	003f9d06 	br	bf40 <__alt_data_end+0xfc00bf40>
    c0cc:	42000044 	addi	r8,r8,1
    c0d0:	da001f15 	stw	r8,124(sp)
    c0d4:	38005326 	beq	r7,zero,c224 <__gxx_personality_sj0+0x3f8>
    c0d8:	d8800417 	ldw	r2,16(sp)
    c0dc:	39ffffc4 	addi	r7,r7,-1
    c0e0:	11c5883a 	add	r2,r2,r7
    c0e4:	d8801815 	stw	r2,96(sp)
    c0e8:	40005026 	beq	r8,zero,c22c <__gxx_personality_sj0+0x400>
    c0ec:	10007426 	beq	r2,zero,c2c0 <__gxx_personality_sj0+0x494>
    c0f0:	d8801917 	ldw	r2,100(sp)
    c0f4:	1080020c 	andi	r2,r2,8
    c0f8:	d8802015 	stw	r2,128(sp)
    c0fc:	1000a21e 	bne	r2,zero,c388 <__gxx_personality_sj0+0x55c>
    c100:	d8c01c17 	ldw	r3,112(sp)
    c104:	1800b026 	beq	r3,zero,c3c8 <__gxx_personality_sj0+0x59c>
    c108:	01c000f4 	movhi	r7,3
    c10c:	39f78404 	addi	r7,r7,-8688
    c110:	d9c01e15 	stw	r7,120(sp)
    c114:	d8001d05 	stb	zero,116(sp)
    c118:	d8c01817 	ldw	r3,96(sp)
    c11c:	d8001515 	stw	zero,84(sp)
    c120:	0009883a 	mov	r4,zero
    c124:	19400003 	ldbu	r5,0(r3)
    c128:	18800044 	addi	r2,r3,1
    c12c:	d9c01517 	ldw	r7,84(sp)
    c130:	28c01fcc 	andi	r3,r5,127
    c134:	1906983a 	sll	r3,r3,r4
    c138:	29803fcc 	andi	r6,r5,255
    c13c:	3180201c 	xori	r6,r6,128
    c140:	38ceb03a 	or	r7,r7,r3
    c144:	d8801715 	stw	r2,92(sp)
    c148:	31bfe004 	addi	r6,r6,-128
    c14c:	d9c01515 	stw	r7,84(sp)
    c150:	210001c4 	addi	r4,r4,7
    c154:	1007883a 	mov	r3,r2
    c158:	303ff216 	blt	r6,zero,c124 <__alt_data_end+0xfc00c124>
    c15c:	00c007c4 	movi	r3,31
    c160:	19000836 	bltu	r3,r4,c184 <__gxx_personality_sj0+0x358>
    c164:	2940100c 	andi	r5,r5,64
    c168:	28000626 	beq	r5,zero,c184 <__gxx_personality_sj0+0x358>
    c16c:	01c00044 	movi	r7,1
    c170:	3908983a 	sll	r4,r7,r4
    c174:	d8c01517 	ldw	r3,84(sp)
    c178:	0109c83a 	sub	r4,zero,r4
    c17c:	1906b03a 	or	r3,r3,r4
    c180:	d8c01515 	stw	r3,84(sp)
    c184:	d8001615 	stw	zero,88(sp)
    c188:	0009883a 	mov	r4,zero
    c18c:	11400003 	ldbu	r5,0(r2)
    c190:	d9c01617 	ldw	r7,88(sp)
    c194:	10800044 	addi	r2,r2,1
    c198:	28c01fcc 	andi	r3,r5,127
    c19c:	1906983a 	sll	r3,r3,r4
    c1a0:	29803fcc 	andi	r6,r5,255
    c1a4:	3180201c 	xori	r6,r6,128
    c1a8:	38ceb03a 	or	r7,r7,r3
    c1ac:	31bfe004 	addi	r6,r6,-128
    c1b0:	d9c01615 	stw	r7,88(sp)
    c1b4:	210001c4 	addi	r4,r4,7
    c1b8:	303ff416 	blt	r6,zero,c18c <__alt_data_end+0xfc00c18c>
    c1bc:	008007c4 	movi	r2,31
    c1c0:	11000736 	bltu	r2,r4,c1e0 <__gxx_personality_sj0+0x3b4>
    c1c4:	2940100c 	andi	r5,r5,64
    c1c8:	28000526 	beq	r5,zero,c1e0 <__gxx_personality_sj0+0x3b4>
    c1cc:	00c00044 	movi	r3,1
    c1d0:	1908983a 	sll	r4,r3,r4
    c1d4:	0109c83a 	sub	r4,zero,r4
    c1d8:	390eb03a 	or	r7,r7,r4
    c1dc:	d9c01615 	stw	r7,88(sp)
    c1e0:	d9001517 	ldw	r4,84(sp)
    c1e4:	20003c26 	beq	r4,zero,c2d8 <__gxx_personality_sj0+0x4ac>
    c1e8:	01003e0e 	bge	zero,r4,c2e4 <__gxx_personality_sj0+0x4b8>
    c1ec:	01ffffc4 	movi	r7,-1
    c1f0:	200b883a 	mov	r5,r4
    c1f4:	d809883a 	mov	r4,sp
    c1f8:	d9c00915 	stw	r7,36(sp)
    c1fc:	000b8bc0 	call	b8bc <_ZL15get_ttype_entryP16lsda_header_infom>
    c200:	10005f26 	beq	r2,zero,c380 <__gxx_personality_sj0+0x554>
    c204:	d8c01e17 	ldw	r3,120(sp)
    c208:	1800571e 	bne	r3,zero,c368 <__gxx_personality_sj0+0x53c>
    c20c:	d9001617 	ldw	r4,88(sp)
    c210:	20002926 	beq	r4,zero,c2b8 <__gxx_personality_sj0+0x48c>
    c214:	d9c01717 	ldw	r7,92(sp)
    c218:	390f883a 	add	r7,r7,r4
    c21c:	d9c01815 	stw	r7,96(sp)
    c220:	003fbd06 	br	c118 <__alt_data_end+0xfc00c118>
    c224:	d8c01f17 	ldw	r3,124(sp)
    c228:	1800251e 	bne	r3,zero,c2c0 <__gxx_personality_sj0+0x494>
    c22c:	01000204 	movi	r4,8
    c230:	d9001515 	stw	r4,84(sp)
    c234:	003f1806 	br	be98 <__alt_data_end+0xfc00be98>
    c238:	d8801c17 	ldw	r2,112(sp)
    c23c:	10000d26 	beq	r2,zero,c274 <__gxx_personality_sj0+0x448>
    c240:	00800184 	movi	r2,6
    c244:	d8801515 	stw	r2,84(sp)
    c248:	003f1306 	br	be98 <__alt_data_end+0xfc00be98>
    c24c:	00800044 	movi	r2,1
    c250:	18bf4d1e 	bne	r3,r2,bf88 <__alt_data_end+0xfc00bf88>
    c254:	000b5840 	call	b584 <_ZSt9terminatev>
    c258:	d9001b17 	ldw	r4,108(sp)
    c25c:	00800044 	movi	r2,1
    c260:	113f4536 	bltu	r2,r4,bf78 <__alt_data_end+0xfc00bf78>
    c264:	00800044 	movi	r2,1
    c268:	18bf841e 	bne	r3,r2,c07c <__alt_data_end+0xfc00c07c>
    c26c:	d9002317 	ldw	r4,140(sp)
    c270:	000cc080 	call	cc08 <__cxa_call_terminate>
    c274:	d8c01b17 	ldw	r3,108(sp)
    c278:	00800044 	movi	r2,1
    c27c:	10fff036 	bltu	r2,r3,c240 <__alt_data_end+0xfc00c240>
    c280:	d9002317 	ldw	r4,140(sp)
    c284:	d8801817 	ldw	r2,96(sp)
    c288:	d9c01517 	ldw	r7,84(sp)
    c28c:	d8c01a17 	ldw	r3,104(sp)
    c290:	20bffc15 	stw	r2,-16(r4)
    c294:	d8800717 	ldw	r2,28(sp)
    c298:	21fffb15 	stw	r7,-20(r4)
    c29c:	d9c01f17 	ldw	r7,124(sp)
    c2a0:	20bfff15 	stw	r2,-4(r4)
    c2a4:	00800184 	movi	r2,6
    c2a8:	20fffd15 	stw	r3,-12(r4)
    c2ac:	21fffe15 	stw	r7,-8(r4)
    c2b0:	d8801515 	stw	r2,84(sp)
    c2b4:	003ef806 	br	be98 <__alt_data_end+0xfc00be98>
    c2b8:	d8801d03 	ldbu	r2,116(sp)
    c2bc:	103fdb26 	beq	r2,zero,c22c <__alt_data_end+0xfc00c22c>
    c2c0:	d8c01917 	ldw	r3,100(sp)
    c2c4:	1880004c 	andi	r2,r3,1
    c2c8:	103fd81e 	bne	r2,zero,c22c <__alt_data_end+0xfc00c22c>
    c2cc:	d8001515 	stw	zero,84(sp)
    c2d0:	00c00084 	movi	r3,2
    c2d4:	003f2306 	br	bf64 <__alt_data_end+0xfc00bf64>
    c2d8:	00c00044 	movi	r3,1
    c2dc:	d8c01d05 	stb	r3,116(sp)
    c2e0:	003fca06 	br	c20c <__alt_data_end+0xfc00c20c>
    c2e4:	d9001e17 	ldw	r4,120(sp)
    c2e8:	20000426 	beq	r4,zero,c2fc <__gxx_personality_sj0+0x4d0>
    c2ec:	d9c02017 	ldw	r7,128(sp)
    c2f0:	3800021e 	bne	r7,zero,c2fc <__gxx_personality_sj0+0x4d0>
    c2f4:	d8801c17 	ldw	r2,112(sp)
    c2f8:	10002726 	beq	r2,zero,c398 <__gxx_personality_sj0+0x56c>
    c2fc:	d8801517 	ldw	r2,84(sp)
    c300:	000d883a 	mov	r6,zero
    c304:	000b883a 	mov	r5,zero
    c308:	0088303a 	nor	r4,zero,r2
    c30c:	d8800317 	ldw	r2,12(sp)
    c310:	1109883a 	add	r4,r2,r4
    c314:	20800003 	ldbu	r2,0(r4)
    c318:	21000044 	addi	r4,r4,1
    c31c:	10c01fcc 	andi	r3,r2,127
    c320:	1946983a 	sll	r3,r3,r5
    c324:	10803fcc 	andi	r2,r2,255
    c328:	1080201c 	xori	r2,r2,128
    c32c:	10bfe004 	addi	r2,r2,-128
    c330:	30ccb03a 	or	r6,r6,r3
    c334:	294001c4 	addi	r5,r5,7
    c338:	103ff616 	blt	r2,zero,c314 <__alt_data_end+0xfc00c314>
    c33c:	3005003a 	cmpeq	r2,r6,zero
    c340:	10803fcc 	andi	r2,r2,255
    c344:	103fb126 	beq	r2,zero,c20c <__alt_data_end+0xfc00c20c>
    c348:	d9c01917 	ldw	r7,100(sp)
    c34c:	3880004c 	andi	r2,r7,1
    c350:	103fb91e 	bne	r2,zero,c238 <__alt_data_end+0xfc00c238>
    c354:	d8802017 	ldw	r2,128(sp)
    c358:	10002d26 	beq	r2,zero,c410 <__gxx_personality_sj0+0x5e4>
    c35c:	00800044 	movi	r2,1
    c360:	d8800915 	stw	r2,36(sp)
    c364:	000b5ac0 	call	b5ac <_ZSt10unexpectedv>
    c368:	d9800704 	addi	r6,sp,28
    c36c:	180b883a 	mov	r5,r3
    c370:	1009883a 	mov	r4,r2
    c374:	000bad00 	call	bad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c378:	10803fcc 	andi	r2,r2,255
    c37c:	103fa326 	beq	r2,zero,c20c <__alt_data_end+0xfc00c20c>
    c380:	00c000c4 	movi	r3,3
    c384:	003ef406 	br	bf58 <__alt_data_end+0xfc00bf58>
    c388:	010000f4 	movhi	r4,3
    c38c:	21378204 	addi	r4,r4,-8696
    c390:	d9001e15 	stw	r4,120(sp)
    c394:	003f5f06 	br	c114 <__alt_data_end+0xfc00c114>
    c398:	d9001b17 	ldw	r4,108(sp)
    c39c:	00c00044 	movi	r3,1
    c3a0:	193fd636 	bltu	r3,r4,c2fc <__alt_data_end+0xfc00c2fc>
    c3a4:	01ffffc4 	movi	r7,-1
    c3a8:	d9c00915 	stw	r7,36(sp)
    c3ac:	d9800717 	ldw	r6,28(sp)
    c3b0:	d9c01517 	ldw	r7,84(sp)
    c3b4:	d9401e17 	ldw	r5,120(sp)
    c3b8:	d809883a 	mov	r4,sp
    c3bc:	000bd840 	call	bd84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c3c0:	1080005c 	xori	r2,r2,1
    c3c4:	003fde06 	br	c340 <__alt_data_end+0xfc00c340>
    c3c8:	d9001b17 	ldw	r4,108(sp)
    c3cc:	00800044 	movi	r2,1
    c3d0:	113f4d36 	bltu	r2,r4,c108 <__alt_data_end+0xfc00c108>
    c3d4:	d9c02317 	ldw	r7,140(sp)
    c3d8:	38800017 	ldw	r2,0(r7)
    c3dc:	1080004c 	andi	r2,r2,1
    c3e0:	1000061e 	bne	r2,zero,c3fc <__gxx_personality_sj0+0x5d0>
    c3e4:	d8c02317 	ldw	r3,140(sp)
    c3e8:	18800504 	addi	r2,r3,20
    c3ec:	d8800715 	stw	r2,28(sp)
    c3f0:	10bff017 	ldw	r2,-64(r2)
    c3f4:	d8801e15 	stw	r2,120(sp)
    c3f8:	003f4606 	br	c114 <__alt_data_end+0xfc00c114>
    c3fc:	38bff517 	ldw	r2,-44(r7)
    c400:	003ffa06 	br	c3ec <__alt_data_end+0xfc00c3ec>
    c404:	d9000a17 	ldw	r4,40(sp)
    c408:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    c40c:	003f9106 	br	c254 <__alt_data_end+0xfc00c254>
    c410:	d9c01c17 	ldw	r7,112(sp)
    c414:	383eda1e 	bne	r7,zero,bf80 <__alt_data_end+0xfc00bf80>
    c418:	d8c01b17 	ldw	r3,108(sp)
    c41c:	00800044 	movi	r2,1
    c420:	10fed736 	bltu	r2,r3,bf80 <__alt_data_end+0xfc00bf80>
    c424:	00c000c4 	movi	r3,3
    c428:	003f8e06 	br	c264 <__alt_data_end+0xfc00c264>

0000c42c <__cxa_call_unexpected>:
    c42c:	00800074 	movhi	r2,1
    c430:	deffe604 	addi	sp,sp,-104
    c434:	10af8b04 	addi	r2,r2,-16852
    c438:	d8800d15 	stw	r2,52(sp)
    c43c:	008000b4 	movhi	r2,2
    c440:	108ec404 	addi	r2,r2,15120
    c444:	d8800e15 	stw	r2,56(sp)
    c448:	d8800104 	addi	r2,sp,4
    c44c:	d8800f15 	stw	r2,60(sp)
    c450:	00800074 	movhi	r2,1
    c454:	10b12e04 	addi	r2,r2,-15176
    c458:	d9001415 	stw	r4,80(sp)
    c45c:	d9000704 	addi	r4,sp,28
    c460:	dfc01915 	stw	ra,100(sp)
    c464:	d8801015 	stw	r2,64(sp)
    c468:	df001815 	stw	fp,96(sp)
    c46c:	dec01115 	stw	sp,68(sp)
    c470:	000e0640 	call	e064 <_Unwind_SjLj_Register>
    c474:	d9001417 	ldw	r4,80(sp)
    c478:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    c47c:	d8c01417 	ldw	r3,80(sp)
    c480:	18bffe17 	ldw	r2,-8(r3)
    c484:	193ff717 	ldw	r4,-36(r3)
    c488:	18fffd17 	ldw	r3,-12(r3)
    c48c:	d8800315 	stw	r2,12(sp)
    c490:	d8c01615 	stw	r3,88(sp)
    c494:	d8c01417 	ldw	r3,80(sp)
    c498:	18fffb17 	ldw	r3,-20(r3)
    c49c:	d8c01515 	stw	r3,84(sp)
    c4a0:	d8c01417 	ldw	r3,80(sp)
    c4a4:	18fff817 	ldw	r3,-32(r3)
    c4a8:	d8c01415 	stw	r3,80(sp)
    c4ac:	00c00044 	movi	r3,1
    c4b0:	d8c00815 	stw	r3,32(sp)
    c4b4:	000b59c0 	call	b59c <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c4b8:	d8c00917 	ldw	r3,36(sp)
    c4bc:	d8800817 	ldw	r2,32(sp)
    c4c0:	d8c01715 	stw	r3,92(sp)
    c4c4:	10000a26 	beq	r2,zero,c4f0 <__cxa_call_unexpected+0xc4>
    c4c8:	10bfffc4 	addi	r2,r2,-1
    c4cc:	10000126 	beq	r2,zero,c4d4 <__cxa_call_unexpected+0xa8>
    c4d0:	003b68fa 	trap	3
    c4d4:	d8000815 	stw	zero,32(sp)
    c4d8:	000c8700 	call	c870 <__cxa_end_catch>
    c4dc:	000c8700 	call	c870 <__cxa_end_catch>
    c4e0:	d9001717 	ldw	r4,92(sp)
    c4e4:	00bfffc4 	movi	r2,-1
    c4e8:	d8800815 	stw	r2,32(sp)
    c4ec:	000e2600 	call	e260 <_Unwind_SjLj_Resume>
    c4f0:	d9001717 	ldw	r4,92(sp)
    c4f4:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    c4f8:	000cc600 	call	cc60 <__cxa_get_globals_fast>
    c4fc:	10800017 	ldw	r2,0(r2)
    c500:	10c00b17 	ldw	r3,44(r2)
    c504:	18c0004c 	andi	r3,r3,1
    c508:	18001e26 	beq	r3,zero,c584 <__cxa_call_unexpected+0x158>
    c50c:	10800017 	ldw	r2,0(r2)
    c510:	d8801715 	stw	r2,92(sp)
    c514:	d8801517 	ldw	r2,84(sp)
    c518:	00802b0e 	bge	zero,r2,c5c8 <__cxa_call_unexpected+0x19c>
    c51c:	d8c01717 	ldw	r3,92(sp)
    c520:	d8800317 	ldw	r2,12(sp)
    c524:	d9c01517 	ldw	r7,84(sp)
    c528:	193ff017 	ldw	r4,-64(r3)
    c52c:	d9801617 	ldw	r6,88(sp)
    c530:	d8800015 	stw	r2,0(sp)
    c534:	180b883a 	mov	r5,r3
    c538:	00800084 	movi	r2,2
    c53c:	d8800815 	stw	r2,32(sp)
    c540:	000bb580 	call	bb58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c544:	10803fcc 	andi	r2,r2,255
    c548:	10001e1e 	bne	r2,zero,c5c4 <__cxa_call_unexpected+0x198>
    c54c:	d8800317 	ldw	r2,12(sp)
    c550:	d9c01517 	ldw	r7,84(sp)
    c554:	d9801617 	ldw	r6,88(sp)
    c558:	010000f4 	movhi	r4,3
    c55c:	d8800015 	stw	r2,0(sp)
    c560:	212a1c04 	addi	r4,r4,-22416
    c564:	00800084 	movi	r2,2
    c568:	000b883a 	mov	r5,zero
    c56c:	d8800815 	stw	r2,32(sp)
    c570:	000bb580 	call	bb58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c574:	10803fcc 	andi	r2,r2,255
    c578:	1000051e 	bne	r2,zero,c590 <__cxa_call_unexpected+0x164>
    c57c:	d9001417 	ldw	r4,80(sp)
    c580:	000b4c40 	call	b4c4 <_ZN10__cxxabiv111__terminateEPFvvE>
    c584:	10801004 	addi	r2,r2,64
    c588:	d8801715 	stw	r2,92(sp)
    c58c:	003fe106 	br	c514 <__alt_data_end+0xfc00c514>
    c590:	01000104 	movi	r4,4
    c594:	000caa40 	call	caa4 <__cxa_allocate_exception>
    c598:	00c000f4 	movhi	r3,3
    c59c:	18ea3704 	addi	r3,r3,-22308
    c5a0:	01800074 	movhi	r6,1
    c5a4:	014000f4 	movhi	r5,3
    c5a8:	10c00015 	stw	r3,0(r2)
    c5ac:	31b31f04 	addi	r6,r6,-13188
    c5b0:	00c00084 	movi	r3,2
    c5b4:	296a1c04 	addi	r5,r5,-22416
    c5b8:	1009883a 	mov	r4,r2
    c5bc:	d8c00815 	stw	r3,32(sp)
    c5c0:	000c6a00 	call	c6a0 <__cxa_throw>
    c5c4:	000c7300 	call	c730 <__cxa_rethrow>
    c5c8:	d9401617 	ldw	r5,88(sp)
    c5cc:	00800084 	movi	r2,2
    c5d0:	d9800104 	addi	r6,sp,4
    c5d4:	0009883a 	mov	r4,zero
    c5d8:	d8800815 	stw	r2,32(sp)
    c5dc:	000b99c0 	call	b99c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c5e0:	d9801717 	ldw	r6,92(sp)
    c5e4:	d9c01517 	ldw	r7,84(sp)
    c5e8:	d9000104 	addi	r4,sp,4
    c5ec:	317ff017 	ldw	r5,-64(r6)
    c5f0:	000bd840 	call	bd84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c5f4:	10803fcc 	andi	r2,r2,255
    c5f8:	1000171e 	bne	r2,zero,c658 <__cxa_call_unexpected+0x22c>
    c5fc:	d9c01517 	ldw	r7,84(sp)
    c600:	014000f4 	movhi	r5,3
    c604:	00800084 	movi	r2,2
    c608:	296a1c04 	addi	r5,r5,-22416
    c60c:	000d883a 	mov	r6,zero
    c610:	d9000104 	addi	r4,sp,4
    c614:	d8800815 	stw	r2,32(sp)
    c618:	000bd840 	call	bd84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c61c:	10803fcc 	andi	r2,r2,255
    c620:	103fd626 	beq	r2,zero,c57c <__alt_data_end+0xfc00c57c>
    c624:	01000104 	movi	r4,4
    c628:	000caa40 	call	caa4 <__cxa_allocate_exception>
    c62c:	00c000f4 	movhi	r3,3
    c630:	18ea3704 	addi	r3,r3,-22308
    c634:	01800074 	movhi	r6,1
    c638:	014000f4 	movhi	r5,3
    c63c:	10c00015 	stw	r3,0(r2)
    c640:	31b31f04 	addi	r6,r6,-13188
    c644:	00c00084 	movi	r3,2
    c648:	296a1c04 	addi	r5,r5,-22416
    c64c:	1009883a 	mov	r4,r2
    c650:	d8c00815 	stw	r3,32(sp)
    c654:	000c6a00 	call	c6a0 <__cxa_throw>
    c658:	000c7300 	call	c730 <__cxa_rethrow>

0000c65c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c65c:	defffe04 	addi	sp,sp,-8
    c660:	dfc00115 	stw	ra,4(sp)
    c664:	dc000015 	stw	r16,0(sp)
    c668:	00800044 	movi	r2,1
    c66c:	11000a36 	bltu	r2,r4,c698 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c670:	28bff617 	ldw	r2,-40(r5)
    c674:	2c000504 	addi	r16,r5,20
    c678:	10000226 	beq	r2,zero,c684 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c67c:	8009883a 	mov	r4,r16
    c680:	103ee83a 	callr	r2
    c684:	8009883a 	mov	r4,r16
    c688:	dfc00117 	ldw	ra,4(sp)
    c68c:	dc000017 	ldw	r16,0(sp)
    c690:	dec00204 	addi	sp,sp,8
    c694:	000cb041 	jmpi	cb04 <__cxa_free_exception>
    c698:	293ff817 	ldw	r4,-32(r5)
    c69c:	000b4c40 	call	b4c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c6a0 <__cxa_throw>:
    c6a0:	defffb04 	addi	sp,sp,-20
    c6a4:	dfc00415 	stw	ra,16(sp)
    c6a8:	dcc00315 	stw	r19,12(sp)
    c6ac:	dc800215 	stw	r18,8(sp)
    c6b0:	2827883a 	mov	r19,r5
    c6b4:	3025883a 	mov	r18,r6
    c6b8:	dc400115 	stw	r17,4(sp)
    c6bc:	dc000015 	stw	r16,0(sp)
    c6c0:	2021883a 	mov	r16,r4
    c6c4:	000cc6c0 	call	cc6c <__cxa_get_globals>
    c6c8:	10c00117 	ldw	r3,4(r2)
    c6cc:	847ffb04 	addi	r17,r16,-20
    c6d0:	18c00044 	addi	r3,r3,1
    c6d4:	10c00115 	stw	r3,4(r2)
    c6d8:	00800044 	movi	r2,1
    c6dc:	80bfef15 	stw	r2,-68(r16)
    c6e0:	84fff015 	stw	r19,-64(r16)
    c6e4:	84bff115 	stw	r18,-60(r16)
    c6e8:	000b5fc0 	call	b5fc <_ZSt14get_unexpectedv>
    c6ec:	80bff215 	stw	r2,-56(r16)
    c6f0:	000b5d80 	call	b5d8 <_ZSt13get_terminatev>
    c6f4:	80bff315 	stw	r2,-52(r16)
    c6f8:	0090caf4 	movhi	r2,17195
    c6fc:	108ac004 	addi	r2,r2,11008
    c700:	80bffb15 	stw	r2,-20(r16)
    c704:	0091d3b4 	movhi	r2,18254
    c708:	109550c4 	addi	r2,r2,21827
    c70c:	80bffc15 	stw	r2,-16(r16)
    c710:	00800074 	movhi	r2,1
    c714:	10b19704 	addi	r2,r2,-14756
    c718:	8809883a 	mov	r4,r17
    c71c:	80bffd15 	stw	r2,-12(r16)
    c720:	000e14c0 	call	e14c <_Unwind_SjLj_RaiseException>
    c724:	8809883a 	mov	r4,r17
    c728:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    c72c:	000b5840 	call	b584 <_ZSt9terminatev>

0000c730 <__cxa_rethrow>:
    c730:	defffe04 	addi	sp,sp,-8
    c734:	dfc00115 	stw	ra,4(sp)
    c738:	dc000015 	stw	r16,0(sp)
    c73c:	000cc6c0 	call	cc6c <__cxa_get_globals>
    c740:	10c00117 	ldw	r3,4(r2)
    c744:	11000017 	ldw	r4,0(r2)
    c748:	18c00044 	addi	r3,r3,1
    c74c:	10c00115 	stw	r3,4(r2)
    c750:	20001126 	beq	r4,zero,c798 <__cxa_rethrow+0x68>
    c754:	21400b17 	ldw	r5,44(r4)
    c758:	01ef3574 	movhi	r7,48341
    c75c:	39f54004 	addi	r7,r7,-11008
    c760:	29cf883a 	add	r7,r5,r7
    c764:	20c00c17 	ldw	r3,48(r4)
    c768:	394d803a 	cmpltu	r6,r7,r5
    c76c:	016e2cb4 	movhi	r5,47282
    c770:	296aaf04 	addi	r5,r5,-21828
    c774:	1947883a 	add	r3,r3,r5
    c778:	30c7883a 	add	r3,r6,r3
    c77c:	18000726 	beq	r3,zero,c79c <__cxa_rethrow+0x6c>
    c780:	10000015 	stw	zero,0(r2)
    c784:	24000b04 	addi	r16,r4,44
    c788:	8009883a 	mov	r4,r16
    c78c:	000e2a40 	call	e2a4 <_Unwind_SjLj_Resume_or_Rethrow>
    c790:	8009883a 	mov	r4,r16
    c794:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    c798:	000b5840 	call	b584 <_ZSt9terminatev>
    c79c:	00c00044 	movi	r3,1
    c7a0:	19fff736 	bltu	r3,r7,c780 <__alt_data_end+0xfc00c780>
    c7a4:	20800517 	ldw	r2,20(r4)
    c7a8:	0085c83a 	sub	r2,zero,r2
    c7ac:	20800515 	stw	r2,20(r4)
    c7b0:	003ff406 	br	c784 <__alt_data_end+0xfc00c784>

0000c7b4 <__cxa_get_exception_ptr>:
    c7b4:	20bfff17 	ldw	r2,-4(r4)
    c7b8:	f800283a 	ret

0000c7bc <__cxa_begin_catch>:
    c7bc:	defffe04 	addi	sp,sp,-8
    c7c0:	dc000015 	stw	r16,0(sp)
    c7c4:	dfc00115 	stw	ra,4(sp)
    c7c8:	2021883a 	mov	r16,r4
    c7cc:	000cc6c0 	call	cc6c <__cxa_get_globals>
    c7d0:	81000017 	ldw	r4,0(r16)
    c7d4:	80c00117 	ldw	r3,4(r16)
    c7d8:	01af3574 	movhi	r6,48341
    c7dc:	31b54004 	addi	r6,r6,-11008
    c7e0:	016e2cb4 	movhi	r5,47282
    c7e4:	296aaf04 	addi	r5,r5,-21828
    c7e8:	218d883a 	add	r6,r4,r6
    c7ec:	3109803a 	cmpltu	r4,r6,r4
    c7f0:	1947883a 	add	r3,r3,r5
    c7f4:	20c7883a 	add	r3,r4,r3
    c7f8:	817ff504 	addi	r5,r16,-44
    c7fc:	11000017 	ldw	r4,0(r2)
    c800:	18000726 	beq	r3,zero,c820 <__cxa_begin_catch+0x64>
    c804:	2000191e 	bne	r4,zero,c86c <__cxa_begin_catch+0xb0>
    c808:	11400015 	stw	r5,0(r2)
    c80c:	0005883a 	mov	r2,zero
    c810:	dfc00117 	ldw	ra,4(sp)
    c814:	dc000017 	ldw	r16,0(sp)
    c818:	dec00204 	addi	sp,sp,8
    c81c:	f800283a 	ret
    c820:	01c00044 	movi	r7,1
    c824:	39bff736 	bltu	r7,r6,c804 <__alt_data_end+0xfc00c804>
    c828:	80fffa17 	ldw	r3,-24(r16)
    c82c:	18000d16 	blt	r3,zero,c864 <__cxa_begin_catch+0xa8>
    c830:	18c00044 	addi	r3,r3,1
    c834:	11800117 	ldw	r6,4(r2)
    c838:	80fffa15 	stw	r3,-24(r16)
    c83c:	30ffffc4 	addi	r3,r6,-1
    c840:	10c00115 	stw	r3,4(r2)
    c844:	21400226 	beq	r4,r5,c850 <__cxa_begin_catch+0x94>
    c848:	813ff915 	stw	r4,-28(r16)
    c84c:	11400015 	stw	r5,0(r2)
    c850:	80bfff17 	ldw	r2,-4(r16)
    c854:	dfc00117 	ldw	ra,4(sp)
    c858:	dc000017 	ldw	r16,0(sp)
    c85c:	dec00204 	addi	sp,sp,8
    c860:	f800283a 	ret
    c864:	38c7c83a 	sub	r3,r7,r3
    c868:	003ff206 	br	c834 <__alt_data_end+0xfc00c834>
    c86c:	000b5840 	call	b584 <_ZSt9terminatev>

0000c870 <__cxa_end_catch>:
    c870:	deffff04 	addi	sp,sp,-4
    c874:	dfc00015 	stw	ra,0(sp)
    c878:	000cc600 	call	cc60 <__cxa_get_globals_fast>
    c87c:	11000017 	ldw	r4,0(r2)
    c880:	20001426 	beq	r4,zero,c8d4 <__cxa_end_catch+0x64>
    c884:	21400b17 	ldw	r5,44(r4)
    c888:	01ef3574 	movhi	r7,48341
    c88c:	39f54004 	addi	r7,r7,-11008
    c890:	29cf883a 	add	r7,r5,r7
    c894:	20c00c17 	ldw	r3,48(r4)
    c898:	394d803a 	cmpltu	r6,r7,r5
    c89c:	016e2cb4 	movhi	r5,47282
    c8a0:	296aaf04 	addi	r5,r5,-21828
    c8a4:	1947883a 	add	r3,r3,r5
    c8a8:	30c7883a 	add	r3,r6,r3
    c8ac:	18000c1e 	bne	r3,zero,c8e0 <__cxa_end_catch+0x70>
    c8b0:	00c00044 	movi	r3,1
    c8b4:	19c00a36 	bltu	r3,r7,c8e0 <__cxa_end_catch+0x70>
    c8b8:	20c00517 	ldw	r3,20(r4)
    c8bc:	18000d16 	blt	r3,zero,c8f4 <__cxa_end_catch+0x84>
    c8c0:	18ffffc4 	addi	r3,r3,-1
    c8c4:	18001026 	beq	r3,zero,c908 <__cxa_end_catch+0x98>
    c8c8:	00bfffc4 	movi	r2,-1
    c8cc:	18801426 	beq	r3,r2,c920 <__cxa_end_catch+0xb0>
    c8d0:	20c00515 	stw	r3,20(r4)
    c8d4:	dfc00017 	ldw	ra,0(sp)
    c8d8:	dec00104 	addi	sp,sp,4
    c8dc:	f800283a 	ret
    c8e0:	21000b04 	addi	r4,r4,44
    c8e4:	10000015 	stw	zero,0(r2)
    c8e8:	dfc00017 	ldw	ra,0(sp)
    c8ec:	dec00104 	addi	sp,sp,4
    c8f0:	000e2f01 	jmpi	e2f0 <_Unwind_DeleteException>
    c8f4:	18c00044 	addi	r3,r3,1
    c8f8:	183ff51e 	bne	r3,zero,c8d0 <__alt_data_end+0xfc00c8d0>
    c8fc:	21400417 	ldw	r5,16(r4)
    c900:	11400015 	stw	r5,0(r2)
    c904:	003ff206 	br	c8d0 <__alt_data_end+0xfc00c8d0>
    c908:	20c00417 	ldw	r3,16(r4)
    c90c:	21000b04 	addi	r4,r4,44
    c910:	10c00015 	stw	r3,0(r2)
    c914:	dfc00017 	ldw	ra,0(sp)
    c918:	dec00104 	addi	sp,sp,4
    c91c:	000e2f01 	jmpi	e2f0 <_Unwind_DeleteException>
    c920:	000b5840 	call	b584 <_ZSt9terminatev>

0000c924 <_ZSt18uncaught_exceptionv>:
    c924:	deffff04 	addi	sp,sp,-4
    c928:	dfc00015 	stw	ra,0(sp)
    c92c:	000cc6c0 	call	cc6c <__cxa_get_globals>
    c930:	10800117 	ldw	r2,4(r2)
    c934:	1004c03a 	cmpne	r2,r2,zero
    c938:	dfc00017 	ldw	ra,0(sp)
    c93c:	dec00104 	addi	sp,sp,4
    c940:	f800283a 	ret

0000c944 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c944:	018000f4 	movhi	r6,3
    c948:	31846e04 	addi	r6,r6,4536
    c94c:	31400117 	ldw	r5,4(r6)
    c950:	223fff04 	addi	r8,r4,-4
    c954:	227fff17 	ldw	r9,-4(r4)
    c958:	28001326 	beq	r5,zero,c9a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c95c:	424f883a 	add	r7,r8,r9
    c960:	29c01426 	beq	r5,r7,c9b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c964:	28c00117 	ldw	r3,4(r5)
    c968:	18001c26 	beq	r3,zero,c9dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c96c:	38c00336 	bltu	r7,r3,c97c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c970:	00001e06 	br	c9ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c974:	3880052e 	bgeu	r7,r2,c98c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c978:	1007883a 	mov	r3,r2
    c97c:	18800117 	ldw	r2,4(r3)
    c980:	29800104 	addi	r6,r5,4
    c984:	180b883a 	mov	r5,r3
    c988:	103ffa1e 	bne	r2,zero,c974 <__alt_data_end+0xfc00c974>
    c98c:	19400017 	ldw	r5,0(r3)
    c990:	194f883a 	add	r7,r3,r5
    c994:	41c00e26 	beq	r8,r7,c9d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c998:	20800015 	stw	r2,0(r4)
    c99c:	30800017 	ldw	r2,0(r6)
    c9a0:	12000115 	stw	r8,4(r2)
    c9a4:	f800283a 	ret
    c9a8:	20000015 	stw	zero,0(r4)
    c9ac:	32000115 	stw	r8,4(r6)
    c9b0:	f800283a 	ret
    c9b4:	28c00017 	ldw	r3,0(r5)
    c9b8:	28800117 	ldw	r2,4(r5)
    c9bc:	1a53883a 	add	r9,r3,r9
    c9c0:	227fff15 	stw	r9,-4(r4)
    c9c4:	20800015 	stw	r2,0(r4)
    c9c8:	32000115 	stw	r8,4(r6)
    c9cc:	f800283a 	ret
    c9d0:	494b883a 	add	r5,r9,r5
    c9d4:	19400015 	stw	r5,0(r3)
    c9d8:	f800283a 	ret
    c9dc:	0005883a 	mov	r2,zero
    c9e0:	2807883a 	mov	r3,r5
    c9e4:	31800104 	addi	r6,r6,4
    c9e8:	003fe806 	br	c98c <__alt_data_end+0xfc00c98c>
    c9ec:	1805883a 	mov	r2,r3
    c9f0:	31800104 	addi	r6,r6,4
    c9f4:	2807883a 	mov	r3,r5
    c9f8:	003fe406 	br	c98c <__alt_data_end+0xfc00c98c>

0000c9fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c9fc:	20800104 	addi	r2,r4,4
    ca00:	00c001c4 	movi	r3,7
    ca04:	1880112e 	bgeu	r3,r2,ca4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    ca08:	20c9883a 	add	r4,r4,r3
    ca0c:	00bfff04 	movi	r2,-4
    ca10:	208a703a 	and	r5,r4,r2
    ca14:	018000f4 	movhi	r6,3
    ca18:	31846e04 	addi	r6,r6,4536
    ca1c:	30c00117 	ldw	r3,4(r6)
    ca20:	18000826 	beq	r3,zero,ca44 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    ca24:	19000017 	ldw	r4,0(r3)
    ca28:	21400436 	bltu	r4,r5,ca3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    ca2c:	00001a06 	br	ca98 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    ca30:	11000017 	ldw	r4,0(r2)
    ca34:	2140072e 	bgeu	r4,r5,ca54 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    ca38:	1007883a 	mov	r3,r2
    ca3c:	18800117 	ldw	r2,4(r3)
    ca40:	103ffb1e 	bne	r2,zero,ca30 <__alt_data_end+0xfc00ca30>
    ca44:	0005883a 	mov	r2,zero
    ca48:	f800283a 	ret
    ca4c:	01400204 	movi	r5,8
    ca50:	003ff006 	br	ca14 <__alt_data_end+0xfc00ca14>
    ca54:	18c00104 	addi	r3,r3,4
    ca58:	2149c83a 	sub	r4,r4,r5
    ca5c:	018001c4 	movi	r6,7
    ca60:	3100092e 	bgeu	r6,r4,ca88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    ca64:	11c00117 	ldw	r7,4(r2)
    ca68:	114d883a 	add	r6,r2,r5
    ca6c:	31000015 	stw	r4,0(r6)
    ca70:	31c00115 	stw	r7,4(r6)
    ca74:	18800017 	ldw	r2,0(r3)
    ca78:	11400015 	stw	r5,0(r2)
    ca7c:	19800015 	stw	r6,0(r3)
    ca80:	10800104 	addi	r2,r2,4
    ca84:	f800283a 	ret
    ca88:	11000117 	ldw	r4,4(r2)
    ca8c:	10800104 	addi	r2,r2,4
    ca90:	19000015 	stw	r4,0(r3)
    ca94:	f800283a 	ret
    ca98:	1805883a 	mov	r2,r3
    ca9c:	30c00104 	addi	r3,r6,4
    caa0:	003fed06 	br	ca58 <__alt_data_end+0xfc00ca58>

0000caa4 <__cxa_allocate_exception>:
    caa4:	defffd04 	addi	sp,sp,-12
    caa8:	dc400115 	stw	r17,4(sp)
    caac:	24401104 	addi	r17,r4,68
    cab0:	8809883a 	mov	r4,r17
    cab4:	dc000015 	stw	r16,0(sp)
    cab8:	dfc00215 	stw	ra,8(sp)
    cabc:	000e4440 	call	e444 <malloc>
    cac0:	1021883a 	mov	r16,r2
    cac4:	10000a26 	beq	r2,zero,caf0 <__cxa_allocate_exception+0x4c>
    cac8:	01801104 	movi	r6,68
    cacc:	000b883a 	mov	r5,zero
    cad0:	8009883a 	mov	r4,r16
    cad4:	000edc00 	call	edc0 <memset>
    cad8:	80801104 	addi	r2,r16,68
    cadc:	dfc00217 	ldw	ra,8(sp)
    cae0:	dc400117 	ldw	r17,4(sp)
    cae4:	dc000017 	ldw	r16,0(sp)
    cae8:	dec00304 	addi	sp,sp,12
    caec:	f800283a 	ret
    caf0:	8809883a 	mov	r4,r17
    caf4:	000c9fc0 	call	c9fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    caf8:	1021883a 	mov	r16,r2
    cafc:	103ff21e 	bne	r2,zero,cac8 <__alt_data_end+0xfc00cac8>
    cb00:	000b5840 	call	b584 <_ZSt9terminatev>

0000cb04 <__cxa_free_exception>:
    cb04:	00c000f4 	movhi	r3,3
    cb08:	18c46e04 	addi	r3,r3,4536
    cb0c:	18800217 	ldw	r2,8(r3)
    cb10:	213fef04 	addi	r4,r4,-68
    cb14:	1100042e 	bgeu	r2,r4,cb28 <__cxa_free_exception+0x24>
    cb18:	18c00317 	ldw	r3,12(r3)
    cb1c:	10c5883a 	add	r2,r2,r3
    cb20:	2080012e 	bgeu	r4,r2,cb28 <__cxa_free_exception+0x24>
    cb24:	000c9441 	jmpi	c944 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cb28:	000e4581 	jmpi	e458 <free>

0000cb2c <__cxa_allocate_dependent_exception>:
    cb2c:	defffe04 	addi	sp,sp,-8
    cb30:	01001004 	movi	r4,64
    cb34:	dc000015 	stw	r16,0(sp)
    cb38:	dfc00115 	stw	ra,4(sp)
    cb3c:	000e4440 	call	e444 <malloc>
    cb40:	1021883a 	mov	r16,r2
    cb44:	10000926 	beq	r2,zero,cb6c <__cxa_allocate_dependent_exception+0x40>
    cb48:	01801004 	movi	r6,64
    cb4c:	000b883a 	mov	r5,zero
    cb50:	8009883a 	mov	r4,r16
    cb54:	000edc00 	call	edc0 <memset>
    cb58:	8005883a 	mov	r2,r16
    cb5c:	dfc00117 	ldw	ra,4(sp)
    cb60:	dc000017 	ldw	r16,0(sp)
    cb64:	dec00204 	addi	sp,sp,8
    cb68:	f800283a 	ret
    cb6c:	01001004 	movi	r4,64
    cb70:	000c9fc0 	call	c9fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    cb74:	1021883a 	mov	r16,r2
    cb78:	103ff31e 	bne	r2,zero,cb48 <__alt_data_end+0xfc00cb48>
    cb7c:	000b5840 	call	b584 <_ZSt9terminatev>

0000cb80 <__cxa_free_dependent_exception>:
    cb80:	014000f4 	movhi	r5,3
    cb84:	29446e04 	addi	r5,r5,4536
    cb88:	28c00217 	ldw	r3,8(r5)
    cb8c:	2005883a 	mov	r2,r4
    cb90:	1900042e 	bgeu	r3,r4,cba4 <__cxa_free_dependent_exception+0x24>
    cb94:	29400317 	ldw	r5,12(r5)
    cb98:	1947883a 	add	r3,r3,r5
    cb9c:	20c0012e 	bgeu	r4,r3,cba4 <__cxa_free_dependent_exception+0x24>
    cba0:	000c9441 	jmpi	c944 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cba4:	1009883a 	mov	r4,r2
    cba8:	000e4581 	jmpi	e458 <free>

0000cbac <_GLOBAL__sub_I___cxa_allocate_exception>:
    cbac:	defffd04 	addi	sp,sp,-12
    cbb0:	dc400115 	stw	r17,4(sp)
    cbb4:	dc000015 	stw	r16,0(sp)
    cbb8:	04424004 	movi	r17,2304
    cbbc:	040000f4 	movhi	r16,3
    cbc0:	84046e04 	addi	r16,r16,4536
    cbc4:	8809883a 	mov	r4,r17
    cbc8:	dfc00215 	stw	ra,8(sp)
    cbcc:	84400315 	stw	r17,12(r16)
    cbd0:	000e4440 	call	e444 <malloc>
    cbd4:	80800215 	stw	r2,8(r16)
    cbd8:	10000826 	beq	r2,zero,cbfc <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    cbdc:	80800115 	stw	r2,4(r16)
    cbe0:	14400015 	stw	r17,0(r2)
    cbe4:	10000115 	stw	zero,4(r2)
    cbe8:	dfc00217 	ldw	ra,8(sp)
    cbec:	dc400117 	ldw	r17,4(sp)
    cbf0:	dc000017 	ldw	r16,0(sp)
    cbf4:	dec00304 	addi	sp,sp,12
    cbf8:	f800283a 	ret
    cbfc:	80000315 	stw	zero,12(r16)
    cc00:	80000115 	stw	zero,4(r16)
    cc04:	003ff806 	br	cbe8 <__alt_data_end+0xfc00cbe8>

0000cc08 <__cxa_call_terminate>:
    cc08:	defffe04 	addi	sp,sp,-8
    cc0c:	dfc00115 	stw	ra,4(sp)
    cc10:	dc000015 	stw	r16,0(sp)
    cc14:	20000d26 	beq	r4,zero,cc4c <__cxa_call_terminate+0x44>
    cc18:	2021883a 	mov	r16,r4
    cc1c:	000c7bc0 	call	c7bc <__cxa_begin_catch>
    cc20:	80c00017 	ldw	r3,0(r16)
    cc24:	016f3574 	movhi	r5,48341
    cc28:	29754004 	addi	r5,r5,-11008
    cc2c:	194b883a 	add	r5,r3,r5
    cc30:	80800117 	ldw	r2,4(r16)
    cc34:	28c9803a 	cmpltu	r4,r5,r3
    cc38:	00ee2cb4 	movhi	r3,47282
    cc3c:	18eaaf04 	addi	r3,r3,-21828
    cc40:	10c5883a 	add	r2,r2,r3
    cc44:	2085883a 	add	r2,r4,r2
    cc48:	10000126 	beq	r2,zero,cc50 <__cxa_call_terminate+0x48>
    cc4c:	000b5840 	call	b584 <_ZSt9terminatev>
    cc50:	00800044 	movi	r2,1
    cc54:	117ffd36 	bltu	r2,r5,cc4c <__alt_data_end+0xfc00cc4c>
    cc58:	813ff817 	ldw	r4,-32(r16)
    cc5c:	000b4c40 	call	b4c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0000cc60 <__cxa_get_globals_fast>:
    cc60:	008000f4 	movhi	r2,3
    cc64:	10841504 	addi	r2,r2,4180
    cc68:	f800283a 	ret

0000cc6c <__cxa_get_globals>:
    cc6c:	008000f4 	movhi	r2,3
    cc70:	10841504 	addi	r2,r2,4180
    cc74:	f800283a 	ret

0000cc78 <_ZNSt9exceptionD1Ev>:
    cc78:	f800283a 	ret

0000cc7c <_ZNSt13bad_exceptionD1Ev>:
    cc7c:	f800283a 	ret

0000cc80 <_ZNKSt9exception4whatEv>:
    cc80:	008000f4 	movhi	r2,3
    cc84:	10aa0a04 	addi	r2,r2,-22488
    cc88:	f800283a 	ret

0000cc8c <_ZNKSt13bad_exception4whatEv>:
    cc8c:	008000f4 	movhi	r2,3
    cc90:	10aa0e04 	addi	r2,r2,-22472
    cc94:	f800283a 	ret

0000cc98 <_ZNSt9exceptionD0Ev>:
    cc98:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000cc9c <_ZNSt13bad_exceptionD0Ev>:
    cc9c:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000cca0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cca0:	f800283a 	ret

0000cca4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cca4:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000cca8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cca8:	f800283a 	ret

0000ccac <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    ccac:	000b1b81 	jmpi	b1b8 <_ZdlPv>

0000ccb0 <__fixunssfsi>:
    ccb0:	defffd04 	addi	sp,sp,-12
    ccb4:	dc000015 	stw	r16,0(sp)
    ccb8:	0413c034 	movhi	r16,20224
    ccbc:	800b883a 	mov	r5,r16
    ccc0:	dc400115 	stw	r17,4(sp)
    ccc4:	dfc00215 	stw	ra,8(sp)
    ccc8:	2023883a 	mov	r17,r4
    cccc:	000d32c0 	call	d32c <__gesf2>
    ccd0:	1000070e 	bge	r2,zero,ccf0 <__fixunssfsi+0x40>
    ccd4:	8809883a 	mov	r4,r17
    ccd8:	000dcfc0 	call	dcfc <__fixsfsi>
    ccdc:	dfc00217 	ldw	ra,8(sp)
    cce0:	dc400117 	ldw	r17,4(sp)
    cce4:	dc000017 	ldw	r16,0(sp)
    cce8:	dec00304 	addi	sp,sp,12
    ccec:	f800283a 	ret
    ccf0:	800b883a 	mov	r5,r16
    ccf4:	8809883a 	mov	r4,r17
    ccf8:	000d8180 	call	d818 <__subsf3>
    ccfc:	1009883a 	mov	r4,r2
    cd00:	000dcfc0 	call	dcfc <__fixsfsi>
    cd04:	00e00034 	movhi	r3,32768
    cd08:	10c5883a 	add	r2,r2,r3
    cd0c:	003ff306 	br	ccdc <__alt_data_end+0xfc00ccdc>

0000cd10 <__divsi3>:
    cd10:	20001b16 	blt	r4,zero,cd80 <__divsi3+0x70>
    cd14:	000f883a 	mov	r7,zero
    cd18:	28001616 	blt	r5,zero,cd74 <__divsi3+0x64>
    cd1c:	200d883a 	mov	r6,r4
    cd20:	29001a2e 	bgeu	r5,r4,cd8c <__divsi3+0x7c>
    cd24:	00800804 	movi	r2,32
    cd28:	00c00044 	movi	r3,1
    cd2c:	00000106 	br	cd34 <__divsi3+0x24>
    cd30:	10000d26 	beq	r2,zero,cd68 <__divsi3+0x58>
    cd34:	294b883a 	add	r5,r5,r5
    cd38:	10bfffc4 	addi	r2,r2,-1
    cd3c:	18c7883a 	add	r3,r3,r3
    cd40:	293ffb36 	bltu	r5,r4,cd30 <__alt_data_end+0xfc00cd30>
    cd44:	0005883a 	mov	r2,zero
    cd48:	18000726 	beq	r3,zero,cd68 <__divsi3+0x58>
    cd4c:	0005883a 	mov	r2,zero
    cd50:	31400236 	bltu	r6,r5,cd5c <__divsi3+0x4c>
    cd54:	314dc83a 	sub	r6,r6,r5
    cd58:	10c4b03a 	or	r2,r2,r3
    cd5c:	1806d07a 	srli	r3,r3,1
    cd60:	280ad07a 	srli	r5,r5,1
    cd64:	183ffa1e 	bne	r3,zero,cd50 <__alt_data_end+0xfc00cd50>
    cd68:	38000126 	beq	r7,zero,cd70 <__divsi3+0x60>
    cd6c:	0085c83a 	sub	r2,zero,r2
    cd70:	f800283a 	ret
    cd74:	014bc83a 	sub	r5,zero,r5
    cd78:	39c0005c 	xori	r7,r7,1
    cd7c:	003fe706 	br	cd1c <__alt_data_end+0xfc00cd1c>
    cd80:	0109c83a 	sub	r4,zero,r4
    cd84:	01c00044 	movi	r7,1
    cd88:	003fe306 	br	cd18 <__alt_data_end+0xfc00cd18>
    cd8c:	00c00044 	movi	r3,1
    cd90:	003fee06 	br	cd4c <__alt_data_end+0xfc00cd4c>

0000cd94 <__modsi3>:
    cd94:	20001716 	blt	r4,zero,cdf4 <__modsi3+0x60>
    cd98:	000f883a 	mov	r7,zero
    cd9c:	2005883a 	mov	r2,r4
    cda0:	28001216 	blt	r5,zero,cdec <__modsi3+0x58>
    cda4:	2900162e 	bgeu	r5,r4,ce00 <__modsi3+0x6c>
    cda8:	01800804 	movi	r6,32
    cdac:	00c00044 	movi	r3,1
    cdb0:	00000106 	br	cdb8 <__modsi3+0x24>
    cdb4:	30000a26 	beq	r6,zero,cde0 <__modsi3+0x4c>
    cdb8:	294b883a 	add	r5,r5,r5
    cdbc:	31bfffc4 	addi	r6,r6,-1
    cdc0:	18c7883a 	add	r3,r3,r3
    cdc4:	293ffb36 	bltu	r5,r4,cdb4 <__alt_data_end+0xfc00cdb4>
    cdc8:	18000526 	beq	r3,zero,cde0 <__modsi3+0x4c>
    cdcc:	1806d07a 	srli	r3,r3,1
    cdd0:	11400136 	bltu	r2,r5,cdd8 <__modsi3+0x44>
    cdd4:	1145c83a 	sub	r2,r2,r5
    cdd8:	280ad07a 	srli	r5,r5,1
    cddc:	183ffb1e 	bne	r3,zero,cdcc <__alt_data_end+0xfc00cdcc>
    cde0:	38000126 	beq	r7,zero,cde8 <__modsi3+0x54>
    cde4:	0085c83a 	sub	r2,zero,r2
    cde8:	f800283a 	ret
    cdec:	014bc83a 	sub	r5,zero,r5
    cdf0:	003fec06 	br	cda4 <__alt_data_end+0xfc00cda4>
    cdf4:	0109c83a 	sub	r4,zero,r4
    cdf8:	01c00044 	movi	r7,1
    cdfc:	003fe706 	br	cd9c <__alt_data_end+0xfc00cd9c>
    ce00:	00c00044 	movi	r3,1
    ce04:	003ff106 	br	cdcc <__alt_data_end+0xfc00cdcc>

0000ce08 <__udivsi3>:
    ce08:	200d883a 	mov	r6,r4
    ce0c:	2900152e 	bgeu	r5,r4,ce64 <__udivsi3+0x5c>
    ce10:	28001416 	blt	r5,zero,ce64 <__udivsi3+0x5c>
    ce14:	00800804 	movi	r2,32
    ce18:	00c00044 	movi	r3,1
    ce1c:	00000206 	br	ce28 <__udivsi3+0x20>
    ce20:	10000e26 	beq	r2,zero,ce5c <__udivsi3+0x54>
    ce24:	28000516 	blt	r5,zero,ce3c <__udivsi3+0x34>
    ce28:	294b883a 	add	r5,r5,r5
    ce2c:	10bfffc4 	addi	r2,r2,-1
    ce30:	18c7883a 	add	r3,r3,r3
    ce34:	293ffa36 	bltu	r5,r4,ce20 <__alt_data_end+0xfc00ce20>
    ce38:	18000826 	beq	r3,zero,ce5c <__udivsi3+0x54>
    ce3c:	0005883a 	mov	r2,zero
    ce40:	31400236 	bltu	r6,r5,ce4c <__udivsi3+0x44>
    ce44:	314dc83a 	sub	r6,r6,r5
    ce48:	10c4b03a 	or	r2,r2,r3
    ce4c:	1806d07a 	srli	r3,r3,1
    ce50:	280ad07a 	srli	r5,r5,1
    ce54:	183ffa1e 	bne	r3,zero,ce40 <__alt_data_end+0xfc00ce40>
    ce58:	f800283a 	ret
    ce5c:	0005883a 	mov	r2,zero
    ce60:	f800283a 	ret
    ce64:	00c00044 	movi	r3,1
    ce68:	003ff406 	br	ce3c <__alt_data_end+0xfc00ce3c>

0000ce6c <__umodsi3>:
    ce6c:	2005883a 	mov	r2,r4
    ce70:	2900122e 	bgeu	r5,r4,cebc <__umodsi3+0x50>
    ce74:	28001116 	blt	r5,zero,cebc <__umodsi3+0x50>
    ce78:	01800804 	movi	r6,32
    ce7c:	00c00044 	movi	r3,1
    ce80:	00000206 	br	ce8c <__umodsi3+0x20>
    ce84:	30000c26 	beq	r6,zero,ceb8 <__umodsi3+0x4c>
    ce88:	28000516 	blt	r5,zero,cea0 <__umodsi3+0x34>
    ce8c:	294b883a 	add	r5,r5,r5
    ce90:	31bfffc4 	addi	r6,r6,-1
    ce94:	18c7883a 	add	r3,r3,r3
    ce98:	293ffa36 	bltu	r5,r4,ce84 <__alt_data_end+0xfc00ce84>
    ce9c:	18000626 	beq	r3,zero,ceb8 <__umodsi3+0x4c>
    cea0:	1806d07a 	srli	r3,r3,1
    cea4:	11400136 	bltu	r2,r5,ceac <__umodsi3+0x40>
    cea8:	1145c83a 	sub	r2,r2,r5
    ceac:	280ad07a 	srli	r5,r5,1
    ceb0:	183ffb1e 	bne	r3,zero,cea0 <__alt_data_end+0xfc00cea0>
    ceb4:	f800283a 	ret
    ceb8:	f800283a 	ret
    cebc:	00c00044 	movi	r3,1
    cec0:	003ff706 	br	cea0 <__alt_data_end+0xfc00cea0>

0000cec4 <__mulsi3>:
    cec4:	0005883a 	mov	r2,zero
    cec8:	20000726 	beq	r4,zero,cee8 <__mulsi3+0x24>
    cecc:	20c0004c 	andi	r3,r4,1
    ced0:	2008d07a 	srli	r4,r4,1
    ced4:	18000126 	beq	r3,zero,cedc <__mulsi3+0x18>
    ced8:	1145883a 	add	r2,r2,r5
    cedc:	294b883a 	add	r5,r5,r5
    cee0:	203ffa1e 	bne	r4,zero,cecc <__alt_data_end+0xfc00cecc>
    cee4:	f800283a 	ret
    cee8:	f800283a 	ret

0000ceec <__divsf3>:
    ceec:	defff504 	addi	sp,sp,-44
    cef0:	200cd5fa 	srli	r6,r4,23
    cef4:	dcc00415 	stw	r19,16(sp)
    cef8:	2026d7fa 	srli	r19,r4,31
    cefc:	00c02034 	movhi	r3,128
    cf00:	dd800715 	stw	r22,28(sp)
    cf04:	dd000515 	stw	r20,20(sp)
    cf08:	dc800315 	stw	r18,12(sp)
    cf0c:	18ffffc4 	addi	r3,r3,-1
    cf10:	dfc00a15 	stw	ra,40(sp)
    cf14:	df000915 	stw	fp,36(sp)
    cf18:	ddc00815 	stw	r23,32(sp)
    cf1c:	dd400615 	stw	r21,24(sp)
    cf20:	dc400215 	stw	r17,8(sp)
    cf24:	dc000115 	stw	r16,4(sp)
    cf28:	35003fcc 	andi	r20,r6,255
    cf2c:	1924703a 	and	r18,r3,r4
    cf30:	9d803fcc 	andi	r22,r19,255
    cf34:	a0005226 	beq	r20,zero,d080 <__divsf3+0x194>
    cf38:	00803fc4 	movi	r2,255
    cf3c:	a0802e26 	beq	r20,r2,cff8 <__divsf3+0x10c>
    cf40:	91002034 	orhi	r4,r18,128
    cf44:	202490fa 	slli	r18,r4,3
    cf48:	a53fe044 	addi	r20,r20,-127
    cf4c:	0021883a 	mov	r16,zero
    cf50:	002f883a 	mov	r23,zero
    cf54:	280cd5fa 	srli	r6,r5,23
    cf58:	282ad7fa 	srli	r21,r5,31
    cf5c:	00c02034 	movhi	r3,128
    cf60:	18ffffc4 	addi	r3,r3,-1
    cf64:	31803fcc 	andi	r6,r6,255
    cf68:	1962703a 	and	r17,r3,r5
    cf6c:	af003fcc 	andi	fp,r21,255
    cf70:	30004a26 	beq	r6,zero,d09c <__divsf3+0x1b0>
    cf74:	00803fc4 	movi	r2,255
    cf78:	30804526 	beq	r6,r2,d090 <__divsf3+0x1a4>
    cf7c:	89402034 	orhi	r5,r17,128
    cf80:	282290fa 	slli	r17,r5,3
    cf84:	31bfe044 	addi	r6,r6,-127
    cf88:	000b883a 	mov	r5,zero
    cf8c:	2c20b03a 	or	r16,r5,r16
    cf90:	802090ba 	slli	r16,r16,2
    cf94:	00800074 	movhi	r2,1
    cf98:	10b3ee04 	addi	r2,r2,-12360
    cf9c:	80a1883a 	add	r16,r16,r2
    cfa0:	81000017 	ldw	r4,0(r16)
    cfa4:	9d46f03a 	xor	r3,r19,r21
    cfa8:	180f883a 	mov	r7,r3
    cfac:	18803fcc 	andi	r2,r3,255
    cfb0:	a18dc83a 	sub	r6,r20,r6
    cfb4:	2000683a 	jmp	r4
    cfb8:	0000d19c 	xori	zero,zero,838
    cfbc:	0000d020 	cmpeqi	zero,zero,832
    cfc0:	0000d190 	cmplti	zero,zero,838
    cfc4:	0000d00c 	andi	zero,zero,832
    cfc8:	0000d190 	cmplti	zero,zero,838
    cfcc:	0000d168 	cmpgeui	zero,zero,837
    cfd0:	0000d190 	cmplti	zero,zero,838
    cfd4:	0000d00c 	andi	zero,zero,832
    cfd8:	0000d020 	cmpeqi	zero,zero,832
    cfdc:	0000d020 	cmpeqi	zero,zero,832
    cfe0:	0000d168 	cmpgeui	zero,zero,837
    cfe4:	0000d00c 	andi	zero,zero,832
    cfe8:	0000d27c 	xorhi	zero,zero,841
    cfec:	0000d27c 	xorhi	zero,zero,841
    cff0:	0000d27c 	xorhi	zero,zero,841
    cff4:	0000d230 	cmpltui	zero,zero,840
    cff8:	9000581e 	bne	r18,zero,d15c <__divsf3+0x270>
    cffc:	04000204 	movi	r16,8
    d000:	05c00084 	movi	r23,2
    d004:	003fd306 	br	cf54 <__alt_data_end+0xfc00cf54>
    d008:	0023883a 	mov	r17,zero
    d00c:	e02d883a 	mov	r22,fp
    d010:	282f883a 	mov	r23,r5
    d014:	00800084 	movi	r2,2
    d018:	b8808f1e 	bne	r23,r2,d258 <__divsf3+0x36c>
    d01c:	b005883a 	mov	r2,r22
    d020:	11c0004c 	andi	r7,r2,1
    d024:	013fffc4 	movi	r4,-1
    d028:	000d883a 	mov	r6,zero
    d02c:	21003fcc 	andi	r4,r4,255
    d030:	200895fa 	slli	r4,r4,23
    d034:	38803fcc 	andi	r2,r7,255
    d038:	00c02034 	movhi	r3,128
    d03c:	100497fa 	slli	r2,r2,31
    d040:	18ffffc4 	addi	r3,r3,-1
    d044:	30c6703a 	and	r3,r6,r3
    d048:	1906b03a 	or	r3,r3,r4
    d04c:	1884b03a 	or	r2,r3,r2
    d050:	dfc00a17 	ldw	ra,40(sp)
    d054:	df000917 	ldw	fp,36(sp)
    d058:	ddc00817 	ldw	r23,32(sp)
    d05c:	dd800717 	ldw	r22,28(sp)
    d060:	dd400617 	ldw	r21,24(sp)
    d064:	dd000517 	ldw	r20,20(sp)
    d068:	dcc00417 	ldw	r19,16(sp)
    d06c:	dc800317 	ldw	r18,12(sp)
    d070:	dc400217 	ldw	r17,8(sp)
    d074:	dc000117 	ldw	r16,4(sp)
    d078:	dec00b04 	addi	sp,sp,44
    d07c:	f800283a 	ret
    d080:	90002b1e 	bne	r18,zero,d130 <__divsf3+0x244>
    d084:	04000104 	movi	r16,4
    d088:	05c00044 	movi	r23,1
    d08c:	003fb106 	br	cf54 <__alt_data_end+0xfc00cf54>
    d090:	8800251e 	bne	r17,zero,d128 <__divsf3+0x23c>
    d094:	01400084 	movi	r5,2
    d098:	00000206 	br	d0a4 <__divsf3+0x1b8>
    d09c:	88001a1e 	bne	r17,zero,d108 <__divsf3+0x21c>
    d0a0:	01400044 	movi	r5,1
    d0a4:	8160b03a 	or	r16,r16,r5
    d0a8:	802090ba 	slli	r16,r16,2
    d0ac:	00c00074 	movhi	r3,1
    d0b0:	18f43204 	addi	r3,r3,-12088
    d0b4:	80e1883a 	add	r16,r16,r3
    d0b8:	80c00017 	ldw	r3,0(r16)
    d0bc:	9d44f03a 	xor	r2,r19,r21
    d0c0:	a18dc83a 	sub	r6,r20,r6
    d0c4:	1800683a 	jmp	r3
    d0c8:	0000d020 	cmpeqi	zero,zero,832
    d0cc:	0000d020 	cmpeqi	zero,zero,832
    d0d0:	0000d26c 	andhi	zero,zero,841
    d0d4:	0000d008 	cmpgei	zero,zero,832
    d0d8:	0000d26c 	andhi	zero,zero,841
    d0dc:	0000d168 	cmpgeui	zero,zero,837
    d0e0:	0000d26c 	andhi	zero,zero,841
    d0e4:	0000d008 	cmpgei	zero,zero,832
    d0e8:	0000d020 	cmpeqi	zero,zero,832
    d0ec:	0000d020 	cmpeqi	zero,zero,832
    d0f0:	0000d168 	cmpgeui	zero,zero,837
    d0f4:	0000d008 	cmpgei	zero,zero,832
    d0f8:	0000d27c 	xorhi	zero,zero,841
    d0fc:	0000d27c 	xorhi	zero,zero,841
    d100:	0000d27c 	xorhi	zero,zero,841
    d104:	0000d294 	movui	zero,842
    d108:	8809883a 	mov	r4,r17
    d10c:	000e37c0 	call	e37c <__clzsi2>
    d110:	10fffec4 	addi	r3,r2,-5
    d114:	10801d84 	addi	r2,r2,118
    d118:	88e2983a 	sll	r17,r17,r3
    d11c:	008dc83a 	sub	r6,zero,r2
    d120:	000b883a 	mov	r5,zero
    d124:	003f9906 	br	cf8c <__alt_data_end+0xfc00cf8c>
    d128:	014000c4 	movi	r5,3
    d12c:	003f9706 	br	cf8c <__alt_data_end+0xfc00cf8c>
    d130:	9009883a 	mov	r4,r18
    d134:	d9400015 	stw	r5,0(sp)
    d138:	000e37c0 	call	e37c <__clzsi2>
    d13c:	10fffec4 	addi	r3,r2,-5
    d140:	11801d84 	addi	r6,r2,118
    d144:	90e4983a 	sll	r18,r18,r3
    d148:	01a9c83a 	sub	r20,zero,r6
    d14c:	0021883a 	mov	r16,zero
    d150:	002f883a 	mov	r23,zero
    d154:	d9400017 	ldw	r5,0(sp)
    d158:	003f7e06 	br	cf54 <__alt_data_end+0xfc00cf54>
    d15c:	04000304 	movi	r16,12
    d160:	05c000c4 	movi	r23,3
    d164:	003f7b06 	br	cf54 <__alt_data_end+0xfc00cf54>
    d168:	01802034 	movhi	r6,128
    d16c:	000f883a 	mov	r7,zero
    d170:	31bfffc4 	addi	r6,r6,-1
    d174:	013fffc4 	movi	r4,-1
    d178:	003fac06 	br	d02c <__alt_data_end+0xfc00d02c>
    d17c:	01400044 	movi	r5,1
    d180:	2909c83a 	sub	r4,r5,r4
    d184:	00c006c4 	movi	r3,27
    d188:	19004b0e 	bge	r3,r4,d2b8 <__divsf3+0x3cc>
    d18c:	114e703a 	and	r7,r2,r5
    d190:	0009883a 	mov	r4,zero
    d194:	000d883a 	mov	r6,zero
    d198:	003fa406 	br	d02c <__alt_data_end+0xfc00d02c>
    d19c:	9006917a 	slli	r3,r18,5
    d1a0:	8822917a 	slli	r17,r17,5
    d1a4:	1c40372e 	bgeu	r3,r17,d284 <__divsf3+0x398>
    d1a8:	31bfffc4 	addi	r6,r6,-1
    d1ac:	010006c4 	movi	r4,27
    d1b0:	000b883a 	mov	r5,zero
    d1b4:	180f883a 	mov	r7,r3
    d1b8:	294b883a 	add	r5,r5,r5
    d1bc:	18c7883a 	add	r3,r3,r3
    d1c0:	38000116 	blt	r7,zero,d1c8 <__divsf3+0x2dc>
    d1c4:	1c400236 	bltu	r3,r17,d1d0 <__divsf3+0x2e4>
    d1c8:	1c47c83a 	sub	r3,r3,r17
    d1cc:	29400054 	ori	r5,r5,1
    d1d0:	213fffc4 	addi	r4,r4,-1
    d1d4:	203ff71e 	bne	r4,zero,d1b4 <__alt_data_end+0xfc00d1b4>
    d1d8:	1806c03a 	cmpne	r3,r3,zero
    d1dc:	1962b03a 	or	r17,r3,r5
    d1e0:	31001fc4 	addi	r4,r6,127
    d1e4:	013fe50e 	bge	zero,r4,d17c <__alt_data_end+0xfc00d17c>
    d1e8:	88c001cc 	andi	r3,r17,7
    d1ec:	18000426 	beq	r3,zero,d200 <__divsf3+0x314>
    d1f0:	88c003cc 	andi	r3,r17,15
    d1f4:	01400104 	movi	r5,4
    d1f8:	19400126 	beq	r3,r5,d200 <__divsf3+0x314>
    d1fc:	8963883a 	add	r17,r17,r5
    d200:	88c2002c 	andhi	r3,r17,2048
    d204:	18000426 	beq	r3,zero,d218 <__divsf3+0x32c>
    d208:	00fe0034 	movhi	r3,63488
    d20c:	18ffffc4 	addi	r3,r3,-1
    d210:	31002004 	addi	r4,r6,128
    d214:	88e2703a 	and	r17,r17,r3
    d218:	00c03f84 	movi	r3,254
    d21c:	193f8016 	blt	r3,r4,d020 <__alt_data_end+0xfc00d020>
    d220:	880c91ba 	slli	r6,r17,6
    d224:	11c0004c 	andi	r7,r2,1
    d228:	300cd27a 	srli	r6,r6,9
    d22c:	003f7f06 	br	d02c <__alt_data_end+0xfc00d02c>
    d230:	9080102c 	andhi	r2,r18,64
    d234:	10000226 	beq	r2,zero,d240 <__divsf3+0x354>
    d238:	8880102c 	andhi	r2,r17,64
    d23c:	10001826 	beq	r2,zero,d2a0 <__divsf3+0x3b4>
    d240:	00802034 	movhi	r2,128
    d244:	91801034 	orhi	r6,r18,64
    d248:	10bfffc4 	addi	r2,r2,-1
    d24c:	980f883a 	mov	r7,r19
    d250:	308c703a 	and	r6,r6,r2
    d254:	003fc706 	br	d174 <__alt_data_end+0xfc00d174>
    d258:	008000c4 	movi	r2,3
    d25c:	b8802d26 	beq	r23,r2,d314 <__divsf3+0x428>
    d260:	00c00044 	movi	r3,1
    d264:	b005883a 	mov	r2,r22
    d268:	b8ffdd1e 	bne	r23,r3,d1e0 <__alt_data_end+0xfc00d1e0>
    d26c:	11c0004c 	andi	r7,r2,1
    d270:	0009883a 	mov	r4,zero
    d274:	000d883a 	mov	r6,zero
    d278:	003f6c06 	br	d02c <__alt_data_end+0xfc00d02c>
    d27c:	9023883a 	mov	r17,r18
    d280:	003f6406 	br	d014 <__alt_data_end+0xfc00d014>
    d284:	1c47c83a 	sub	r3,r3,r17
    d288:	01000684 	movi	r4,26
    d28c:	01400044 	movi	r5,1
    d290:	003fc806 	br	d1b4 <__alt_data_end+0xfc00d1b4>
    d294:	9080102c 	andhi	r2,r18,64
    d298:	103fe926 	beq	r2,zero,d240 <__alt_data_end+0xfc00d240>
    d29c:	0023883a 	mov	r17,zero
    d2a0:	00802034 	movhi	r2,128
    d2a4:	89801034 	orhi	r6,r17,64
    d2a8:	10bfffc4 	addi	r2,r2,-1
    d2ac:	a80f883a 	mov	r7,r21
    d2b0:	308c703a 	and	r6,r6,r2
    d2b4:	003faf06 	br	d174 <__alt_data_end+0xfc00d174>
    d2b8:	01c00804 	movi	r7,32
    d2bc:	390fc83a 	sub	r7,r7,r4
    d2c0:	89ce983a 	sll	r7,r17,r7
    d2c4:	890ad83a 	srl	r5,r17,r4
    d2c8:	380ec03a 	cmpne	r7,r7,zero
    d2cc:	29cab03a 	or	r5,r5,r7
    d2d0:	28c001cc 	andi	r3,r5,7
    d2d4:	18000426 	beq	r3,zero,d2e8 <__divsf3+0x3fc>
    d2d8:	28c003cc 	andi	r3,r5,15
    d2dc:	01000104 	movi	r4,4
    d2e0:	19000126 	beq	r3,r4,d2e8 <__divsf3+0x3fc>
    d2e4:	290b883a 	add	r5,r5,r4
    d2e8:	28c1002c 	andhi	r3,r5,1024
    d2ec:	18000426 	beq	r3,zero,d300 <__divsf3+0x414>
    d2f0:	11c0004c 	andi	r7,r2,1
    d2f4:	01000044 	movi	r4,1
    d2f8:	000d883a 	mov	r6,zero
    d2fc:	003f4b06 	br	d02c <__alt_data_end+0xfc00d02c>
    d300:	280a91ba 	slli	r5,r5,6
    d304:	11c0004c 	andi	r7,r2,1
    d308:	0009883a 	mov	r4,zero
    d30c:	280cd27a 	srli	r6,r5,9
    d310:	003f4606 	br	d02c <__alt_data_end+0xfc00d02c>
    d314:	00802034 	movhi	r2,128
    d318:	89801034 	orhi	r6,r17,64
    d31c:	10bfffc4 	addi	r2,r2,-1
    d320:	b00f883a 	mov	r7,r22
    d324:	308c703a 	and	r6,r6,r2
    d328:	003f9206 	br	d174 <__alt_data_end+0xfc00d174>

0000d32c <__gesf2>:
    d32c:	2004d5fa 	srli	r2,r4,23
    d330:	2806d5fa 	srli	r3,r5,23
    d334:	01802034 	movhi	r6,128
    d338:	31bfffc4 	addi	r6,r6,-1
    d33c:	10803fcc 	andi	r2,r2,255
    d340:	01c03fc4 	movi	r7,255
    d344:	3110703a 	and	r8,r6,r4
    d348:	18c03fcc 	andi	r3,r3,255
    d34c:	314c703a 	and	r6,r6,r5
    d350:	2008d7fa 	srli	r4,r4,31
    d354:	280ad7fa 	srli	r5,r5,31
    d358:	11c01926 	beq	r2,r7,d3c0 <__gesf2+0x94>
    d35c:	01c03fc4 	movi	r7,255
    d360:	19c00f26 	beq	r3,r7,d3a0 <__gesf2+0x74>
    d364:	1000061e 	bne	r2,zero,d380 <__gesf2+0x54>
    d368:	400f003a 	cmpeq	r7,r8,zero
    d36c:	1800071e 	bne	r3,zero,d38c <__gesf2+0x60>
    d370:	3000061e 	bne	r6,zero,d38c <__gesf2+0x60>
    d374:	0005883a 	mov	r2,zero
    d378:	40000e1e 	bne	r8,zero,d3b4 <__gesf2+0x88>
    d37c:	f800283a 	ret
    d380:	18000a1e 	bne	r3,zero,d3ac <__gesf2+0x80>
    d384:	30000b26 	beq	r6,zero,d3b4 <__gesf2+0x88>
    d388:	000f883a 	mov	r7,zero
    d38c:	29403fcc 	andi	r5,r5,255
    d390:	38000726 	beq	r7,zero,d3b0 <__gesf2+0x84>
    d394:	28000826 	beq	r5,zero,d3b8 <__gesf2+0x8c>
    d398:	00800044 	movi	r2,1
    d39c:	f800283a 	ret
    d3a0:	303ff026 	beq	r6,zero,d364 <__alt_data_end+0xfc00d364>
    d3a4:	00bfff84 	movi	r2,-2
    d3a8:	f800283a 	ret
    d3ac:	29403fcc 	andi	r5,r5,255
    d3b0:	21400526 	beq	r4,r5,d3c8 <__gesf2+0x9c>
    d3b4:	203ff826 	beq	r4,zero,d398 <__alt_data_end+0xfc00d398>
    d3b8:	00bfffc4 	movi	r2,-1
    d3bc:	f800283a 	ret
    d3c0:	403fe626 	beq	r8,zero,d35c <__alt_data_end+0xfc00d35c>
    d3c4:	003ff706 	br	d3a4 <__alt_data_end+0xfc00d3a4>
    d3c8:	18bffa16 	blt	r3,r2,d3b4 <__alt_data_end+0xfc00d3b4>
    d3cc:	10c00216 	blt	r2,r3,d3d8 <__gesf2+0xac>
    d3d0:	323ff836 	bltu	r6,r8,d3b4 <__alt_data_end+0xfc00d3b4>
    d3d4:	4180022e 	bgeu	r8,r6,d3e0 <__gesf2+0xb4>
    d3d8:	203fef1e 	bne	r4,zero,d398 <__alt_data_end+0xfc00d398>
    d3dc:	003ff606 	br	d3b8 <__alt_data_end+0xfc00d3b8>
    d3e0:	0005883a 	mov	r2,zero
    d3e4:	f800283a 	ret

0000d3e8 <__mulsf3>:
    d3e8:	defff504 	addi	sp,sp,-44
    d3ec:	dc000115 	stw	r16,4(sp)
    d3f0:	2020d5fa 	srli	r16,r4,23
    d3f4:	dd400615 	stw	r21,24(sp)
    d3f8:	202ad7fa 	srli	r21,r4,31
    d3fc:	dc800315 	stw	r18,12(sp)
    d400:	04802034 	movhi	r18,128
    d404:	df000915 	stw	fp,36(sp)
    d408:	dd000515 	stw	r20,20(sp)
    d40c:	94bfffc4 	addi	r18,r18,-1
    d410:	dfc00a15 	stw	ra,40(sp)
    d414:	ddc00815 	stw	r23,32(sp)
    d418:	dd800715 	stw	r22,28(sp)
    d41c:	dcc00415 	stw	r19,16(sp)
    d420:	dc400215 	stw	r17,8(sp)
    d424:	84003fcc 	andi	r16,r16,255
    d428:	9124703a 	and	r18,r18,r4
    d42c:	a829883a 	mov	r20,r21
    d430:	af003fcc 	andi	fp,r21,255
    d434:	80005426 	beq	r16,zero,d588 <__mulsf3+0x1a0>
    d438:	00803fc4 	movi	r2,255
    d43c:	80802f26 	beq	r16,r2,d4fc <__mulsf3+0x114>
    d440:	91002034 	orhi	r4,r18,128
    d444:	202490fa 	slli	r18,r4,3
    d448:	843fe044 	addi	r16,r16,-127
    d44c:	0023883a 	mov	r17,zero
    d450:	002f883a 	mov	r23,zero
    d454:	2804d5fa 	srli	r2,r5,23
    d458:	282cd7fa 	srli	r22,r5,31
    d45c:	01002034 	movhi	r4,128
    d460:	213fffc4 	addi	r4,r4,-1
    d464:	10803fcc 	andi	r2,r2,255
    d468:	2166703a 	and	r19,r4,r5
    d46c:	b1803fcc 	andi	r6,r22,255
    d470:	10004c26 	beq	r2,zero,d5a4 <__mulsf3+0x1bc>
    d474:	00c03fc4 	movi	r3,255
    d478:	10c04726 	beq	r2,r3,d598 <__mulsf3+0x1b0>
    d47c:	99002034 	orhi	r4,r19,128
    d480:	202690fa 	slli	r19,r4,3
    d484:	10bfe044 	addi	r2,r2,-127
    d488:	0007883a 	mov	r3,zero
    d48c:	80a1883a 	add	r16,r16,r2
    d490:	010003c4 	movi	r4,15
    d494:	1c44b03a 	or	r2,r3,r17
    d498:	b56af03a 	xor	r21,r22,r21
    d49c:	81c00044 	addi	r7,r16,1
    d4a0:	20806b36 	bltu	r4,r2,d650 <__mulsf3+0x268>
    d4a4:	100490ba 	slli	r2,r2,2
    d4a8:	01000074 	movhi	r4,1
    d4ac:	21352f04 	addi	r4,r4,-11076
    d4b0:	1105883a 	add	r2,r2,r4
    d4b4:	10800017 	ldw	r2,0(r2)
    d4b8:	1000683a 	jmp	r2
    d4bc:	0000d650 	cmplti	zero,zero,857
    d4c0:	0000d510 	cmplti	zero,zero,852
    d4c4:	0000d510 	cmplti	zero,zero,852
    d4c8:	0000d50c 	andi	zero,zero,852
    d4cc:	0000d634 	movhi	zero,856
    d4d0:	0000d634 	movhi	zero,856
    d4d4:	0000d620 	cmpeqi	zero,zero,856
    d4d8:	0000d50c 	andi	zero,zero,852
    d4dc:	0000d634 	movhi	zero,856
    d4e0:	0000d620 	cmpeqi	zero,zero,856
    d4e4:	0000d634 	movhi	zero,856
    d4e8:	0000d50c 	andi	zero,zero,852
    d4ec:	0000d640 	call	d64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1c8>
    d4f0:	0000d640 	call	d64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1c8>
    d4f4:	0000d640 	call	d64 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1c8>
    d4f8:	0000d750 	cmplti	zero,zero,861
    d4fc:	90003b1e 	bne	r18,zero,d5ec <__mulsf3+0x204>
    d500:	04400204 	movi	r17,8
    d504:	05c00084 	movi	r23,2
    d508:	003fd206 	br	d454 <__alt_data_end+0xfc00d454>
    d50c:	302b883a 	mov	r21,r6
    d510:	00800084 	movi	r2,2
    d514:	18802626 	beq	r3,r2,d5b0 <__mulsf3+0x1c8>
    d518:	008000c4 	movi	r2,3
    d51c:	1880b826 	beq	r3,r2,d800 <__mulsf3+0x418>
    d520:	00800044 	movi	r2,1
    d524:	1880af1e 	bne	r3,r2,d7e4 <__mulsf3+0x3fc>
    d528:	a829883a 	mov	r20,r21
    d52c:	0007883a 	mov	r3,zero
    d530:	0009883a 	mov	r4,zero
    d534:	18803fcc 	andi	r2,r3,255
    d538:	100695fa 	slli	r3,r2,23
    d53c:	a0803fcc 	andi	r2,r20,255
    d540:	100a97fa 	slli	r5,r2,31
    d544:	00802034 	movhi	r2,128
    d548:	10bfffc4 	addi	r2,r2,-1
    d54c:	2084703a 	and	r2,r4,r2
    d550:	10c4b03a 	or	r2,r2,r3
    d554:	1144b03a 	or	r2,r2,r5
    d558:	dfc00a17 	ldw	ra,40(sp)
    d55c:	df000917 	ldw	fp,36(sp)
    d560:	ddc00817 	ldw	r23,32(sp)
    d564:	dd800717 	ldw	r22,28(sp)
    d568:	dd400617 	ldw	r21,24(sp)
    d56c:	dd000517 	ldw	r20,20(sp)
    d570:	dcc00417 	ldw	r19,16(sp)
    d574:	dc800317 	ldw	r18,12(sp)
    d578:	dc400217 	ldw	r17,8(sp)
    d57c:	dc000117 	ldw	r16,4(sp)
    d580:	dec00b04 	addi	sp,sp,44
    d584:	f800283a 	ret
    d588:	90000d1e 	bne	r18,zero,d5c0 <__mulsf3+0x1d8>
    d58c:	04400104 	movi	r17,4
    d590:	05c00044 	movi	r23,1
    d594:	003faf06 	br	d454 <__alt_data_end+0xfc00d454>
    d598:	9806c03a 	cmpne	r3,r19,zero
    d59c:	18c00084 	addi	r3,r3,2
    d5a0:	003fba06 	br	d48c <__alt_data_end+0xfc00d48c>
    d5a4:	9800141e 	bne	r19,zero,d5f8 <__mulsf3+0x210>
    d5a8:	00c00044 	movi	r3,1
    d5ac:	003fb706 	br	d48c <__alt_data_end+0xfc00d48c>
    d5b0:	a829883a 	mov	r20,r21
    d5b4:	00ffffc4 	movi	r3,-1
    d5b8:	0009883a 	mov	r4,zero
    d5bc:	003fdd06 	br	d534 <__alt_data_end+0xfc00d534>
    d5c0:	9009883a 	mov	r4,r18
    d5c4:	d9400015 	stw	r5,0(sp)
    d5c8:	000e37c0 	call	e37c <__clzsi2>
    d5cc:	10fffec4 	addi	r3,r2,-5
    d5d0:	10801d84 	addi	r2,r2,118
    d5d4:	90e4983a 	sll	r18,r18,r3
    d5d8:	00a1c83a 	sub	r16,zero,r2
    d5dc:	0023883a 	mov	r17,zero
    d5e0:	002f883a 	mov	r23,zero
    d5e4:	d9400017 	ldw	r5,0(sp)
    d5e8:	003f9a06 	br	d454 <__alt_data_end+0xfc00d454>
    d5ec:	04400304 	movi	r17,12
    d5f0:	05c000c4 	movi	r23,3
    d5f4:	003f9706 	br	d454 <__alt_data_end+0xfc00d454>
    d5f8:	9809883a 	mov	r4,r19
    d5fc:	d9800015 	stw	r6,0(sp)
    d600:	000e37c0 	call	e37c <__clzsi2>
    d604:	10fffec4 	addi	r3,r2,-5
    d608:	10801d84 	addi	r2,r2,118
    d60c:	98e6983a 	sll	r19,r19,r3
    d610:	0085c83a 	sub	r2,zero,r2
    d614:	0007883a 	mov	r3,zero
    d618:	d9800017 	ldw	r6,0(sp)
    d61c:	003f9b06 	br	d48c <__alt_data_end+0xfc00d48c>
    d620:	01002034 	movhi	r4,128
    d624:	0029883a 	mov	r20,zero
    d628:	213fffc4 	addi	r4,r4,-1
    d62c:	00ffffc4 	movi	r3,-1
    d630:	003fc006 	br	d534 <__alt_data_end+0xfc00d534>
    d634:	9027883a 	mov	r19,r18
    d638:	b807883a 	mov	r3,r23
    d63c:	003fb406 	br	d510 <__alt_data_end+0xfc00d510>
    d640:	9027883a 	mov	r19,r18
    d644:	e02b883a 	mov	r21,fp
    d648:	b807883a 	mov	r3,r23
    d64c:	003fb006 	br	d510 <__alt_data_end+0xfc00d510>
    d650:	9028d43a 	srli	r20,r18,16
    d654:	982cd43a 	srli	r22,r19,16
    d658:	94bfffcc 	andi	r18,r18,65535
    d65c:	9cffffcc 	andi	r19,r19,65535
    d660:	980b883a 	mov	r5,r19
    d664:	9009883a 	mov	r4,r18
    d668:	d9c00015 	stw	r7,0(sp)
    d66c:	000cec40 	call	cec4 <__mulsi3>
    d670:	a00b883a 	mov	r5,r20
    d674:	9809883a 	mov	r4,r19
    d678:	1023883a 	mov	r17,r2
    d67c:	000cec40 	call	cec4 <__mulsi3>
    d680:	a009883a 	mov	r4,r20
    d684:	b00b883a 	mov	r5,r22
    d688:	1027883a 	mov	r19,r2
    d68c:	000cec40 	call	cec4 <__mulsi3>
    d690:	b00b883a 	mov	r5,r22
    d694:	9009883a 	mov	r4,r18
    d698:	1029883a 	mov	r20,r2
    d69c:	000cec40 	call	cec4 <__mulsi3>
    d6a0:	8806d43a 	srli	r3,r17,16
    d6a4:	14c5883a 	add	r2,r2,r19
    d6a8:	d9c00017 	ldw	r7,0(sp)
    d6ac:	1885883a 	add	r2,r3,r2
    d6b0:	14c0022e 	bgeu	r2,r19,d6bc <__mulsf3+0x2d4>
    d6b4:	00c00074 	movhi	r3,1
    d6b8:	a0e9883a 	add	r20,r20,r3
    d6bc:	1026943a 	slli	r19,r2,16
    d6c0:	8c7fffcc 	andi	r17,r17,65535
    d6c4:	1004d43a 	srli	r2,r2,16
    d6c8:	9c63883a 	add	r17,r19,r17
    d6cc:	882691ba 	slli	r19,r17,6
    d6d0:	1505883a 	add	r2,r2,r20
    d6d4:	8822d6ba 	srli	r17,r17,26
    d6d8:	100891ba 	slli	r4,r2,6
    d6dc:	9826c03a 	cmpne	r19,r19,zero
    d6e0:	9c62b03a 	or	r17,r19,r17
    d6e4:	8926b03a 	or	r19,r17,r4
    d6e8:	9882002c 	andhi	r2,r19,2048
    d6ec:	10000426 	beq	r2,zero,d700 <__mulsf3+0x318>
    d6f0:	9804d07a 	srli	r2,r19,1
    d6f4:	9900004c 	andi	r4,r19,1
    d6f8:	3821883a 	mov	r16,r7
    d6fc:	1126b03a 	or	r19,r2,r4
    d700:	80c01fc4 	addi	r3,r16,127
    d704:	00c0210e 	bge	zero,r3,d78c <__mulsf3+0x3a4>
    d708:	988001cc 	andi	r2,r19,7
    d70c:	10000426 	beq	r2,zero,d720 <__mulsf3+0x338>
    d710:	988003cc 	andi	r2,r19,15
    d714:	01000104 	movi	r4,4
    d718:	11000126 	beq	r2,r4,d720 <__mulsf3+0x338>
    d71c:	9927883a 	add	r19,r19,r4
    d720:	9882002c 	andhi	r2,r19,2048
    d724:	10000426 	beq	r2,zero,d738 <__mulsf3+0x350>
    d728:	00be0034 	movhi	r2,63488
    d72c:	10bfffc4 	addi	r2,r2,-1
    d730:	80c02004 	addi	r3,r16,128
    d734:	98a6703a 	and	r19,r19,r2
    d738:	00803f84 	movi	r2,254
    d73c:	10ff9c16 	blt	r2,r3,d5b0 <__alt_data_end+0xfc00d5b0>
    d740:	980891ba 	slli	r4,r19,6
    d744:	a829883a 	mov	r20,r21
    d748:	2008d27a 	srli	r4,r4,9
    d74c:	003f7906 	br	d534 <__alt_data_end+0xfc00d534>
    d750:	9080102c 	andhi	r2,r18,64
    d754:	10000826 	beq	r2,zero,d778 <__mulsf3+0x390>
    d758:	9880102c 	andhi	r2,r19,64
    d75c:	1000061e 	bne	r2,zero,d778 <__mulsf3+0x390>
    d760:	00802034 	movhi	r2,128
    d764:	99001034 	orhi	r4,r19,64
    d768:	10bfffc4 	addi	r2,r2,-1
    d76c:	b029883a 	mov	r20,r22
    d770:	2088703a 	and	r4,r4,r2
    d774:	003fad06 	br	d62c <__alt_data_end+0xfc00d62c>
    d778:	00802034 	movhi	r2,128
    d77c:	91001034 	orhi	r4,r18,64
    d780:	10bfffc4 	addi	r2,r2,-1
    d784:	2088703a 	and	r4,r4,r2
    d788:	003fa806 	br	d62c <__alt_data_end+0xfc00d62c>
    d78c:	00800044 	movi	r2,1
    d790:	10c7c83a 	sub	r3,r2,r3
    d794:	008006c4 	movi	r2,27
    d798:	10ff6316 	blt	r2,r3,d528 <__alt_data_end+0xfc00d528>
    d79c:	00800804 	movi	r2,32
    d7a0:	10c5c83a 	sub	r2,r2,r3
    d7a4:	9884983a 	sll	r2,r19,r2
    d7a8:	98c6d83a 	srl	r3,r19,r3
    d7ac:	1004c03a 	cmpne	r2,r2,zero
    d7b0:	1884b03a 	or	r2,r3,r2
    d7b4:	10c001cc 	andi	r3,r2,7
    d7b8:	18000426 	beq	r3,zero,d7cc <__mulsf3+0x3e4>
    d7bc:	10c003cc 	andi	r3,r2,15
    d7c0:	01000104 	movi	r4,4
    d7c4:	19000126 	beq	r3,r4,d7cc <__mulsf3+0x3e4>
    d7c8:	1105883a 	add	r2,r2,r4
    d7cc:	10c1002c 	andhi	r3,r2,1024
    d7d0:	18000626 	beq	r3,zero,d7ec <__mulsf3+0x404>
    d7d4:	a829883a 	mov	r20,r21
    d7d8:	00c00044 	movi	r3,1
    d7dc:	0009883a 	mov	r4,zero
    d7e0:	003f5406 	br	d534 <__alt_data_end+0xfc00d534>
    d7e4:	3821883a 	mov	r16,r7
    d7e8:	003fc506 	br	d700 <__alt_data_end+0xfc00d700>
    d7ec:	100491ba 	slli	r2,r2,6
    d7f0:	a829883a 	mov	r20,r21
    d7f4:	0007883a 	mov	r3,zero
    d7f8:	1008d27a 	srli	r4,r2,9
    d7fc:	003f4d06 	br	d534 <__alt_data_end+0xfc00d534>
    d800:	00802034 	movhi	r2,128
    d804:	99001034 	orhi	r4,r19,64
    d808:	10bfffc4 	addi	r2,r2,-1
    d80c:	a829883a 	mov	r20,r21
    d810:	2088703a 	and	r4,r4,r2
    d814:	003f8506 	br	d62c <__alt_data_end+0xfc00d62c>

0000d818 <__subsf3>:
    d818:	defffc04 	addi	sp,sp,-16
    d81c:	280cd5fa 	srli	r6,r5,23
    d820:	dc000015 	stw	r16,0(sp)
    d824:	01c02034 	movhi	r7,128
    d828:	2020d5fa 	srli	r16,r4,23
    d82c:	39ffffc4 	addi	r7,r7,-1
    d830:	3906703a 	and	r3,r7,r4
    d834:	dc400115 	stw	r17,4(sp)
    d838:	394e703a 	and	r7,r7,r5
    d83c:	2022d7fa 	srli	r17,r4,31
    d840:	dfc00315 	stw	ra,12(sp)
    d844:	dc800215 	stw	r18,8(sp)
    d848:	31803fcc 	andi	r6,r6,255
    d84c:	01003fc4 	movi	r4,255
    d850:	84003fcc 	andi	r16,r16,255
    d854:	180690fa 	slli	r3,r3,3
    d858:	2804d7fa 	srli	r2,r5,31
    d85c:	380e90fa 	slli	r7,r7,3
    d860:	31006d26 	beq	r6,r4,da18 <__subsf3+0x200>
    d864:	1080005c 	xori	r2,r2,1
    d868:	8189c83a 	sub	r4,r16,r6
    d86c:	14404f26 	beq	r2,r17,d9ac <__subsf3+0x194>
    d870:	0100770e 	bge	zero,r4,da50 <__subsf3+0x238>
    d874:	30001e1e 	bne	r6,zero,d8f0 <__subsf3+0xd8>
    d878:	38006a1e 	bne	r7,zero,da24 <__subsf3+0x20c>
    d87c:	188001cc 	andi	r2,r3,7
    d880:	10000426 	beq	r2,zero,d894 <__subsf3+0x7c>
    d884:	188003cc 	andi	r2,r3,15
    d888:	01000104 	movi	r4,4
    d88c:	11000126 	beq	r2,r4,d894 <__subsf3+0x7c>
    d890:	1907883a 	add	r3,r3,r4
    d894:	1881002c 	andhi	r2,r3,1024
    d898:	10003926 	beq	r2,zero,d980 <__subsf3+0x168>
    d89c:	84000044 	addi	r16,r16,1
    d8a0:	00803fc4 	movi	r2,255
    d8a4:	80807526 	beq	r16,r2,da7c <__subsf3+0x264>
    d8a8:	180691ba 	slli	r3,r3,6
    d8ac:	8880004c 	andi	r2,r17,1
    d8b0:	180ad27a 	srli	r5,r3,9
    d8b4:	84003fcc 	andi	r16,r16,255
    d8b8:	800695fa 	slli	r3,r16,23
    d8bc:	10803fcc 	andi	r2,r2,255
    d8c0:	01002034 	movhi	r4,128
    d8c4:	213fffc4 	addi	r4,r4,-1
    d8c8:	100497fa 	slli	r2,r2,31
    d8cc:	2920703a 	and	r16,r5,r4
    d8d0:	80e0b03a 	or	r16,r16,r3
    d8d4:	8084b03a 	or	r2,r16,r2
    d8d8:	dfc00317 	ldw	ra,12(sp)
    d8dc:	dc800217 	ldw	r18,8(sp)
    d8e0:	dc400117 	ldw	r17,4(sp)
    d8e4:	dc000017 	ldw	r16,0(sp)
    d8e8:	dec00404 	addi	sp,sp,16
    d8ec:	f800283a 	ret
    d8f0:	00803fc4 	movi	r2,255
    d8f4:	80bfe126 	beq	r16,r2,d87c <__alt_data_end+0xfc00d87c>
    d8f8:	39c10034 	orhi	r7,r7,1024
    d8fc:	008006c4 	movi	r2,27
    d900:	11007416 	blt	r2,r4,dad4 <__subsf3+0x2bc>
    d904:	00800804 	movi	r2,32
    d908:	1105c83a 	sub	r2,r2,r4
    d90c:	3884983a 	sll	r2,r7,r2
    d910:	390ed83a 	srl	r7,r7,r4
    d914:	1008c03a 	cmpne	r4,r2,zero
    d918:	390eb03a 	or	r7,r7,r4
    d91c:	19c7c83a 	sub	r3,r3,r7
    d920:	1881002c 	andhi	r2,r3,1024
    d924:	10001426 	beq	r2,zero,d978 <__subsf3+0x160>
    d928:	04810034 	movhi	r18,1024
    d92c:	94bfffc4 	addi	r18,r18,-1
    d930:	1ca4703a 	and	r18,r3,r18
    d934:	9009883a 	mov	r4,r18
    d938:	000e37c0 	call	e37c <__clzsi2>
    d93c:	10bffec4 	addi	r2,r2,-5
    d940:	90a4983a 	sll	r18,r18,r2
    d944:	14005116 	blt	r2,r16,da8c <__subsf3+0x274>
    d948:	1405c83a 	sub	r2,r2,r16
    d94c:	10c00044 	addi	r3,r2,1
    d950:	00800804 	movi	r2,32
    d954:	10c5c83a 	sub	r2,r2,r3
    d958:	9084983a 	sll	r2,r18,r2
    d95c:	90e4d83a 	srl	r18,r18,r3
    d960:	0021883a 	mov	r16,zero
    d964:	1006c03a 	cmpne	r3,r2,zero
    d968:	90c6b03a 	or	r3,r18,r3
    d96c:	003fc306 	br	d87c <__alt_data_end+0xfc00d87c>
    d970:	2000e026 	beq	r4,zero,dcf4 <__subsf3+0x4dc>
    d974:	2007883a 	mov	r3,r4
    d978:	188001cc 	andi	r2,r3,7
    d97c:	103fc11e 	bne	r2,zero,d884 <__alt_data_end+0xfc00d884>
    d980:	180ad0fa 	srli	r5,r3,3
    d984:	00c03fc4 	movi	r3,255
    d988:	8880004c 	andi	r2,r17,1
    d98c:	80c0031e 	bne	r16,r3,d99c <__subsf3+0x184>
    d990:	28006d26 	beq	r5,zero,db48 <__subsf3+0x330>
    d994:	29401034 	orhi	r5,r5,64
    d998:	043fffc4 	movi	r16,-1
    d99c:	00c02034 	movhi	r3,128
    d9a0:	18ffffc4 	addi	r3,r3,-1
    d9a4:	28ca703a 	and	r5,r5,r3
    d9a8:	003fc206 	br	d8b4 <__alt_data_end+0xfc00d8b4>
    d9ac:	01003c0e 	bge	zero,r4,daa0 <__subsf3+0x288>
    d9b0:	30002126 	beq	r6,zero,da38 <__subsf3+0x220>
    d9b4:	01403fc4 	movi	r5,255
    d9b8:	817fb026 	beq	r16,r5,d87c <__alt_data_end+0xfc00d87c>
    d9bc:	39c10034 	orhi	r7,r7,1024
    d9c0:	014006c4 	movi	r5,27
    d9c4:	29007416 	blt	r5,r4,db98 <__subsf3+0x380>
    d9c8:	01400804 	movi	r5,32
    d9cc:	290bc83a 	sub	r5,r5,r4
    d9d0:	394a983a 	sll	r5,r7,r5
    d9d4:	390ed83a 	srl	r7,r7,r4
    d9d8:	2808c03a 	cmpne	r4,r5,zero
    d9dc:	390eb03a 	or	r7,r7,r4
    d9e0:	19c7883a 	add	r3,r3,r7
    d9e4:	1901002c 	andhi	r4,r3,1024
    d9e8:	20003826 	beq	r4,zero,dacc <__subsf3+0x2b4>
    d9ec:	84000044 	addi	r16,r16,1
    d9f0:	01003fc4 	movi	r4,255
    d9f4:	81005426 	beq	r16,r4,db48 <__subsf3+0x330>
    d9f8:	1023883a 	mov	r17,r2
    d9fc:	00bf0034 	movhi	r2,64512
    da00:	10bfffc4 	addi	r2,r2,-1
    da04:	1900004c 	andi	r4,r3,1
    da08:	1886703a 	and	r3,r3,r2
    da0c:	1806d07a 	srli	r3,r3,1
    da10:	1906b03a 	or	r3,r3,r4
    da14:	003f9906 	br	d87c <__alt_data_end+0xfc00d87c>
    da18:	383f9226 	beq	r7,zero,d864 <__alt_data_end+0xfc00d864>
    da1c:	10803fcc 	andi	r2,r2,255
    da20:	003f9106 	br	d868 <__alt_data_end+0xfc00d868>
    da24:	213fffc4 	addi	r4,r4,-1
    da28:	203fbc26 	beq	r4,zero,d91c <__alt_data_end+0xfc00d91c>
    da2c:	00803fc4 	movi	r2,255
    da30:	80bfb21e 	bne	r16,r2,d8fc <__alt_data_end+0xfc00d8fc>
    da34:	003f9106 	br	d87c <__alt_data_end+0xfc00d87c>
    da38:	383f9026 	beq	r7,zero,d87c <__alt_data_end+0xfc00d87c>
    da3c:	213fffc4 	addi	r4,r4,-1
    da40:	203fe726 	beq	r4,zero,d9e0 <__alt_data_end+0xfc00d9e0>
    da44:	01403fc4 	movi	r5,255
    da48:	817fdd1e 	bne	r16,r5,d9c0 <__alt_data_end+0xfc00d9c0>
    da4c:	003f8b06 	br	d87c <__alt_data_end+0xfc00d87c>
    da50:	2000221e 	bne	r4,zero,dadc <__subsf3+0x2c4>
    da54:	81000044 	addi	r4,r16,1
    da58:	21003fcc 	andi	r4,r4,255
    da5c:	01400044 	movi	r5,1
    da60:	2900470e 	bge	r5,r4,db80 <__subsf3+0x368>
    da64:	19e5c83a 	sub	r18,r3,r7
    da68:	9141002c 	andhi	r5,r18,1024
    da6c:	28002d26 	beq	r5,zero,db24 <__subsf3+0x30c>
    da70:	38e5c83a 	sub	r18,r7,r3
    da74:	1023883a 	mov	r17,r2
    da78:	003fae06 	br	d934 <__alt_data_end+0xfc00d934>
    da7c:	8880004c 	andi	r2,r17,1
    da80:	043fffc4 	movi	r16,-1
    da84:	000b883a 	mov	r5,zero
    da88:	003f8a06 	br	d8b4 <__alt_data_end+0xfc00d8b4>
    da8c:	00ff0034 	movhi	r3,64512
    da90:	18ffffc4 	addi	r3,r3,-1
    da94:	80a1c83a 	sub	r16,r16,r2
    da98:	90c6703a 	and	r3,r18,r3
    da9c:	003f7706 	br	d87c <__alt_data_end+0xfc00d87c>
    daa0:	2000431e 	bne	r4,zero,dbb0 <__subsf3+0x398>
    daa4:	81000044 	addi	r4,r16,1
    daa8:	21803fcc 	andi	r6,r4,255
    daac:	01400044 	movi	r5,1
    dab0:	2980280e 	bge	r5,r6,db54 <__subsf3+0x33c>
    dab4:	01403fc4 	movi	r5,255
    dab8:	21402326 	beq	r4,r5,db48 <__subsf3+0x330>
    dabc:	19c7883a 	add	r3,r3,r7
    dac0:	1806d07a 	srli	r3,r3,1
    dac4:	2021883a 	mov	r16,r4
    dac8:	003f6c06 	br	d87c <__alt_data_end+0xfc00d87c>
    dacc:	1023883a 	mov	r17,r2
    dad0:	003fa906 	br	d978 <__alt_data_end+0xfc00d978>
    dad4:	01c00044 	movi	r7,1
    dad8:	003f9006 	br	d91c <__alt_data_end+0xfc00d91c>
    dadc:	8000151e 	bne	r16,zero,db34 <__subsf3+0x31c>
    dae0:	18002f26 	beq	r3,zero,dba0 <__subsf3+0x388>
    dae4:	0108303a 	nor	r4,zero,r4
    dae8:	20000a26 	beq	r4,zero,db14 <__subsf3+0x2fc>
    daec:	01403fc4 	movi	r5,255
    daf0:	31402b26 	beq	r6,r5,dba0 <__subsf3+0x388>
    daf4:	014006c4 	movi	r5,27
    daf8:	29006e16 	blt	r5,r4,dcb4 <__subsf3+0x49c>
    dafc:	01400804 	movi	r5,32
    db00:	290bc83a 	sub	r5,r5,r4
    db04:	194a983a 	sll	r5,r3,r5
    db08:	1908d83a 	srl	r4,r3,r4
    db0c:	2806c03a 	cmpne	r3,r5,zero
    db10:	20c6b03a 	or	r3,r4,r3
    db14:	38c7c83a 	sub	r3,r7,r3
    db18:	3021883a 	mov	r16,r6
    db1c:	1023883a 	mov	r17,r2
    db20:	003f7f06 	br	d920 <__alt_data_end+0xfc00d920>
    db24:	903f831e 	bne	r18,zero,d934 <__alt_data_end+0xfc00d934>
    db28:	0005883a 	mov	r2,zero
    db2c:	0021883a 	mov	r16,zero
    db30:	003f9a06 	br	d99c <__alt_data_end+0xfc00d99c>
    db34:	01403fc4 	movi	r5,255
    db38:	31401926 	beq	r6,r5,dba0 <__subsf3+0x388>
    db3c:	0109c83a 	sub	r4,zero,r4
    db40:	18c10034 	orhi	r3,r3,1024
    db44:	003feb06 	br	daf4 <__alt_data_end+0xfc00daf4>
    db48:	043fffc4 	movi	r16,-1
    db4c:	000b883a 	mov	r5,zero
    db50:	003f5806 	br	d8b4 <__alt_data_end+0xfc00d8b4>
    db54:	8000481e 	bne	r16,zero,dc78 <__subsf3+0x460>
    db58:	18006226 	beq	r3,zero,dce4 <__subsf3+0x4cc>
    db5c:	383f4726 	beq	r7,zero,d87c <__alt_data_end+0xfc00d87c>
    db60:	19c7883a 	add	r3,r3,r7
    db64:	1881002c 	andhi	r2,r3,1024
    db68:	103f8326 	beq	r2,zero,d978 <__alt_data_end+0xfc00d978>
    db6c:	00bf0034 	movhi	r2,64512
    db70:	10bfffc4 	addi	r2,r2,-1
    db74:	2821883a 	mov	r16,r5
    db78:	1886703a 	and	r3,r3,r2
    db7c:	003f3f06 	br	d87c <__alt_data_end+0xfc00d87c>
    db80:	80001c1e 	bne	r16,zero,dbf4 <__subsf3+0x3dc>
    db84:	1800261e 	bne	r3,zero,dc20 <__subsf3+0x408>
    db88:	38004c26 	beq	r7,zero,dcbc <__subsf3+0x4a4>
    db8c:	3807883a 	mov	r3,r7
    db90:	1023883a 	mov	r17,r2
    db94:	003f3906 	br	d87c <__alt_data_end+0xfc00d87c>
    db98:	01c00044 	movi	r7,1
    db9c:	003f9006 	br	d9e0 <__alt_data_end+0xfc00d9e0>
    dba0:	3807883a 	mov	r3,r7
    dba4:	3021883a 	mov	r16,r6
    dba8:	1023883a 	mov	r17,r2
    dbac:	003f3306 	br	d87c <__alt_data_end+0xfc00d87c>
    dbb0:	8000161e 	bne	r16,zero,dc0c <__subsf3+0x3f4>
    dbb4:	18002d26 	beq	r3,zero,dc6c <__subsf3+0x454>
    dbb8:	0108303a 	nor	r4,zero,r4
    dbbc:	20000a26 	beq	r4,zero,dbe8 <__subsf3+0x3d0>
    dbc0:	01403fc4 	movi	r5,255
    dbc4:	31402926 	beq	r6,r5,dc6c <__subsf3+0x454>
    dbc8:	014006c4 	movi	r5,27
    dbcc:	29004716 	blt	r5,r4,dcec <__subsf3+0x4d4>
    dbd0:	01400804 	movi	r5,32
    dbd4:	290bc83a 	sub	r5,r5,r4
    dbd8:	194a983a 	sll	r5,r3,r5
    dbdc:	1908d83a 	srl	r4,r3,r4
    dbe0:	2806c03a 	cmpne	r3,r5,zero
    dbe4:	20c6b03a 	or	r3,r4,r3
    dbe8:	19c7883a 	add	r3,r3,r7
    dbec:	3021883a 	mov	r16,r6
    dbf0:	003f7c06 	br	d9e4 <__alt_data_end+0xfc00d9e4>
    dbf4:	1800111e 	bne	r3,zero,dc3c <__subsf3+0x424>
    dbf8:	38003326 	beq	r7,zero,dcc8 <__subsf3+0x4b0>
    dbfc:	3807883a 	mov	r3,r7
    dc00:	1023883a 	mov	r17,r2
    dc04:	04003fc4 	movi	r16,255
    dc08:	003f1c06 	br	d87c <__alt_data_end+0xfc00d87c>
    dc0c:	01403fc4 	movi	r5,255
    dc10:	31401626 	beq	r6,r5,dc6c <__subsf3+0x454>
    dc14:	0109c83a 	sub	r4,zero,r4
    dc18:	18c10034 	orhi	r3,r3,1024
    dc1c:	003fea06 	br	dbc8 <__alt_data_end+0xfc00dbc8>
    dc20:	383f1626 	beq	r7,zero,d87c <__alt_data_end+0xfc00d87c>
    dc24:	19c9c83a 	sub	r4,r3,r7
    dc28:	2141002c 	andhi	r5,r4,1024
    dc2c:	283f5026 	beq	r5,zero,d970 <__alt_data_end+0xfc00d970>
    dc30:	38c7c83a 	sub	r3,r7,r3
    dc34:	1023883a 	mov	r17,r2
    dc38:	003f1006 	br	d87c <__alt_data_end+0xfc00d87c>
    dc3c:	38001b26 	beq	r7,zero,dcac <__subsf3+0x494>
    dc40:	1806d0fa 	srli	r3,r3,3
    dc44:	1900102c 	andhi	r4,r3,64
    dc48:	20000526 	beq	r4,zero,dc60 <__subsf3+0x448>
    dc4c:	380ed0fa 	srli	r7,r7,3
    dc50:	3900102c 	andhi	r4,r7,64
    dc54:	2000021e 	bne	r4,zero,dc60 <__subsf3+0x448>
    dc58:	3807883a 	mov	r3,r7
    dc5c:	1023883a 	mov	r17,r2
    dc60:	180690fa 	slli	r3,r3,3
    dc64:	04003fc4 	movi	r16,255
    dc68:	003f0406 	br	d87c <__alt_data_end+0xfc00d87c>
    dc6c:	3807883a 	mov	r3,r7
    dc70:	3021883a 	mov	r16,r6
    dc74:	003f0106 	br	d87c <__alt_data_end+0xfc00d87c>
    dc78:	18001726 	beq	r3,zero,dcd8 <__subsf3+0x4c0>
    dc7c:	38000b26 	beq	r7,zero,dcac <__subsf3+0x494>
    dc80:	1806d0fa 	srli	r3,r3,3
    dc84:	1900102c 	andhi	r4,r3,64
    dc88:	20000426 	beq	r4,zero,dc9c <__subsf3+0x484>
    dc8c:	380ed0fa 	srli	r7,r7,3
    dc90:	3900102c 	andhi	r4,r7,64
    dc94:	2000011e 	bne	r4,zero,dc9c <__subsf3+0x484>
    dc98:	3807883a 	mov	r3,r7
    dc9c:	180690fa 	slli	r3,r3,3
    dca0:	1023883a 	mov	r17,r2
    dca4:	04003fc4 	movi	r16,255
    dca8:	003ef406 	br	d87c <__alt_data_end+0xfc00d87c>
    dcac:	04003fc4 	movi	r16,255
    dcb0:	003ef206 	br	d87c <__alt_data_end+0xfc00d87c>
    dcb4:	00c00044 	movi	r3,1
    dcb8:	003f9606 	br	db14 <__alt_data_end+0xfc00db14>
    dcbc:	000b883a 	mov	r5,zero
    dcc0:	0005883a 	mov	r2,zero
    dcc4:	003f3506 	br	d99c <__alt_data_end+0xfc00d99c>
    dcc8:	01402034 	movhi	r5,128
    dccc:	297fffc4 	addi	r5,r5,-1
    dcd0:	0005883a 	mov	r2,zero
    dcd4:	003f2f06 	br	d994 <__alt_data_end+0xfc00d994>
    dcd8:	3807883a 	mov	r3,r7
    dcdc:	04003fc4 	movi	r16,255
    dce0:	003ee606 	br	d87c <__alt_data_end+0xfc00d87c>
    dce4:	3807883a 	mov	r3,r7
    dce8:	003ee406 	br	d87c <__alt_data_end+0xfc00d87c>
    dcec:	00c00044 	movi	r3,1
    dcf0:	003fbd06 	br	dbe8 <__alt_data_end+0xfc00dbe8>
    dcf4:	0005883a 	mov	r2,zero
    dcf8:	003f2806 	br	d99c <__alt_data_end+0xfc00d99c>

0000dcfc <__fixsfsi>:
    dcfc:	200ad5fa 	srli	r5,r4,23
    dd00:	00c02034 	movhi	r3,128
    dd04:	18ffffc4 	addi	r3,r3,-1
    dd08:	29403fcc 	andi	r5,r5,255
    dd0c:	00801f84 	movi	r2,126
    dd10:	1906703a 	and	r3,r3,r4
    dd14:	2008d7fa 	srli	r4,r4,31
    dd18:	11400e0e 	bge	r2,r5,dd54 <__fixsfsi+0x58>
    dd1c:	00802744 	movi	r2,157
    dd20:	11400816 	blt	r2,r5,dd44 <__fixsfsi+0x48>
    dd24:	00802544 	movi	r2,149
    dd28:	18c02034 	orhi	r3,r3,128
    dd2c:	11400b0e 	bge	r2,r5,dd5c <__fixsfsi+0x60>
    dd30:	28bfda84 	addi	r2,r5,-150
    dd34:	1884983a 	sll	r2,r3,r2
    dd38:	20000726 	beq	r4,zero,dd58 <__fixsfsi+0x5c>
    dd3c:	0085c83a 	sub	r2,zero,r2
    dd40:	f800283a 	ret
    dd44:	00a00034 	movhi	r2,32768
    dd48:	10bfffc4 	addi	r2,r2,-1
    dd4c:	2085883a 	add	r2,r4,r2
    dd50:	f800283a 	ret
    dd54:	0005883a 	mov	r2,zero
    dd58:	f800283a 	ret
    dd5c:	00802584 	movi	r2,150
    dd60:	1145c83a 	sub	r2,r2,r5
    dd64:	1884d83a 	srl	r2,r3,r2
    dd68:	003ff306 	br	dd38 <__alt_data_end+0xfc00dd38>

0000dd6c <__floatunsisf>:
    dd6c:	defffe04 	addi	sp,sp,-8
    dd70:	dfc00115 	stw	ra,4(sp)
    dd74:	dc000015 	stw	r16,0(sp)
    dd78:	20002c26 	beq	r4,zero,de2c <__floatunsisf+0xc0>
    dd7c:	2021883a 	mov	r16,r4
    dd80:	000e37c0 	call	e37c <__clzsi2>
    dd84:	00c02784 	movi	r3,158
    dd88:	1887c83a 	sub	r3,r3,r2
    dd8c:	01002584 	movi	r4,150
    dd90:	20c00f16 	blt	r4,r3,ddd0 <__floatunsisf+0x64>
    dd94:	20c9c83a 	sub	r4,r4,r3
    dd98:	8108983a 	sll	r4,r16,r4
    dd9c:	00802034 	movhi	r2,128
    dda0:	10bfffc4 	addi	r2,r2,-1
    dda4:	2088703a 	and	r4,r4,r2
    dda8:	18803fcc 	andi	r2,r3,255
    ddac:	100695fa 	slli	r3,r2,23
    ddb0:	00802034 	movhi	r2,128
    ddb4:	10bfffc4 	addi	r2,r2,-1
    ddb8:	2084703a 	and	r2,r4,r2
    ddbc:	10c4b03a 	or	r2,r2,r3
    ddc0:	dfc00117 	ldw	ra,4(sp)
    ddc4:	dc000017 	ldw	r16,0(sp)
    ddc8:	dec00204 	addi	sp,sp,8
    ddcc:	f800283a 	ret
    ddd0:	01002644 	movi	r4,153
    ddd4:	20c01816 	blt	r4,r3,de38 <__floatunsisf+0xcc>
    ddd8:	20c9c83a 	sub	r4,r4,r3
    dddc:	8108983a 	sll	r4,r16,r4
    dde0:	017f0034 	movhi	r5,64512
    dde4:	297fffc4 	addi	r5,r5,-1
    dde8:	218001cc 	andi	r6,r4,7
    ddec:	214a703a 	and	r5,r4,r5
    ddf0:	30000426 	beq	r6,zero,de04 <__floatunsisf+0x98>
    ddf4:	210003cc 	andi	r4,r4,15
    ddf8:	01800104 	movi	r6,4
    ddfc:	21800126 	beq	r4,r6,de04 <__floatunsisf+0x98>
    de00:	298b883a 	add	r5,r5,r6
    de04:	2901002c 	andhi	r4,r5,1024
    de08:	20000526 	beq	r4,zero,de20 <__floatunsisf+0xb4>
    de0c:	00c027c4 	movi	r3,159
    de10:	1887c83a 	sub	r3,r3,r2
    de14:	00bf0034 	movhi	r2,64512
    de18:	10bfffc4 	addi	r2,r2,-1
    de1c:	288a703a 	and	r5,r5,r2
    de20:	280891ba 	slli	r4,r5,6
    de24:	2008d27a 	srli	r4,r4,9
    de28:	003fdf06 	br	dda8 <__alt_data_end+0xfc00dda8>
    de2c:	0007883a 	mov	r3,zero
    de30:	0009883a 	mov	r4,zero
    de34:	003fdc06 	br	dda8 <__alt_data_end+0xfc00dda8>
    de38:	01402e44 	movi	r5,185
    de3c:	28cbc83a 	sub	r5,r5,r3
    de40:	01000144 	movi	r4,5
    de44:	2089c83a 	sub	r4,r4,r2
    de48:	814a983a 	sll	r5,r16,r5
    de4c:	8108d83a 	srl	r4,r16,r4
    de50:	2820c03a 	cmpne	r16,r5,zero
    de54:	2408b03a 	or	r4,r4,r16
    de58:	003fe106 	br	dde0 <__alt_data_end+0xfc00dde0>

0000de5c <_Unwind_ForcedUnwind_Phase2>:
    de5c:	defff404 	addi	sp,sp,-48
    de60:	dd800915 	stw	r22,36(sp)
    de64:	058000f4 	movhi	r22,3
    de68:	ddc00a15 	stw	r23,40(sp)
    de6c:	dd400815 	stw	r21,32(sp)
    de70:	dd000715 	stw	r20,28(sp)
    de74:	dcc00615 	stw	r19,24(sp)
    de78:	dc400415 	stw	r17,16(sp)
    de7c:	dc000315 	stw	r16,12(sp)
    de80:	dfc00b15 	stw	ra,44(sp)
    de84:	dc800515 	stw	r18,20(sp)
    de88:	2021883a 	mov	r16,r4
    de8c:	2823883a 	mov	r17,r5
    de90:	24c00317 	ldw	r19,12(r4)
    de94:	25000417 	ldw	r20,16(r4)
    de98:	28c00017 	ldw	r3,0(r5)
    de9c:	b5841704 	addi	r22,r22,4188
    dea0:	054001c4 	movi	r21,7
    dea4:	05c00204 	movi	r23,8
    dea8:	00001606 	br	df04 <_Unwind_ForcedUnwind_Phase2+0xa8>
    deac:	81800017 	ldw	r6,0(r16)
    deb0:	81c00117 	ldw	r7,4(r16)
    deb4:	1c800617 	ldw	r18,24(r3)
    deb8:	dd000215 	stw	r20,8(sp)
    debc:	dc400115 	stw	r17,4(sp)
    dec0:	dc000015 	stw	r16,0(sp)
    dec4:	983ee83a 	callr	r19
    dec8:	01400284 	movi	r5,10
    decc:	01000044 	movi	r4,1
    ded0:	1000241e 	bne	r2,zero,df64 <_Unwind_ForcedUnwind_Phase2+0x108>
    ded4:	90000726 	beq	r18,zero,def4 <_Unwind_ForcedUnwind_Phase2+0x98>
    ded8:	81800017 	ldw	r6,0(r16)
    dedc:	81c00117 	ldw	r7,4(r16)
    dee0:	dc400115 	stw	r17,4(sp)
    dee4:	dc000015 	stw	r16,0(sp)
    dee8:	903ee83a 	callr	r18
    deec:	15401f26 	beq	r2,r21,df6c <_Unwind_ForcedUnwind_Phase2+0x110>
    def0:	15c01c1e 	bne	r2,r23,df64 <_Unwind_ForcedUnwind_Phase2+0x108>
    def4:	88800017 	ldw	r2,0(r17)
    def8:	10c00017 	ldw	r3,0(r2)
    defc:	b0c00015 	stw	r3,0(r22)
    df00:	88c00015 	stw	r3,0(r17)
    df04:	01400284 	movi	r5,10
    df08:	01000044 	movi	r4,1
    df0c:	183fe71e 	bne	r3,zero,deac <__alt_data_end+0xfc00deac>
    df10:	81800017 	ldw	r6,0(r16)
    df14:	81c00117 	ldw	r7,4(r16)
    df18:	01400684 	movi	r5,26
    df1c:	dd000215 	stw	r20,8(sp)
    df20:	dc400115 	stw	r17,4(sp)
    df24:	dc000015 	stw	r16,0(sp)
    df28:	01000044 	movi	r4,1
    df2c:	983ee83a 	callr	r19
    df30:	10000c1e 	bne	r2,zero,df64 <_Unwind_ForcedUnwind_Phase2+0x108>
    df34:	00800144 	movi	r2,5
    df38:	dfc00b17 	ldw	ra,44(sp)
    df3c:	ddc00a17 	ldw	r23,40(sp)
    df40:	dd800917 	ldw	r22,36(sp)
    df44:	dd400817 	ldw	r21,32(sp)
    df48:	dd000717 	ldw	r20,28(sp)
    df4c:	dcc00617 	ldw	r19,24(sp)
    df50:	dc800517 	ldw	r18,20(sp)
    df54:	dc400417 	ldw	r17,16(sp)
    df58:	dc000317 	ldw	r16,12(sp)
    df5c:	dec00c04 	addi	sp,sp,48
    df60:	f800283a 	ret
    df64:	00800084 	movi	r2,2
    df68:	003ff306 	br	df38 <__alt_data_end+0xfc00df38>
    df6c:	a805883a 	mov	r2,r21
    df70:	003ff106 	br	df38 <__alt_data_end+0xfc00df38>

0000df74 <_Unwind_RaiseException_Phase2>:
    df74:	28c00017 	ldw	r3,0(r5)
    df78:	defff804 	addi	sp,sp,-32
    df7c:	dcc00515 	stw	r19,20(sp)
    df80:	dc800415 	stw	r18,16(sp)
    df84:	dc400315 	stw	r17,12(sp)
    df88:	dc000215 	stw	r16,8(sp)
    df8c:	dfc00715 	stw	ra,28(sp)
    df90:	dd000615 	stw	r20,24(sp)
    df94:	2823883a 	mov	r17,r5
    df98:	2021883a 	mov	r16,r4
    df9c:	048001c4 	movi	r18,7
    dfa0:	04c00204 	movi	r19,8
    dfa4:	18001326 	beq	r3,zero,dff4 <_Unwind_RaiseException_Phase2+0x80>
    dfa8:	81000417 	ldw	r4,16(r16)
    dfac:	1a000617 	ldw	r8,24(r3)
    dfb0:	19001926 	beq	r3,r4,e018 <_Unwind_RaiseException_Phase2+0xa4>
    dfb4:	40000c26 	beq	r8,zero,dfe8 <_Unwind_RaiseException_Phase2+0x74>
    dfb8:	01400084 	movi	r5,2
    dfbc:	0029883a 	mov	r20,zero
    dfc0:	81800017 	ldw	r6,0(r16)
    dfc4:	81c00117 	ldw	r7,4(r16)
    dfc8:	01000044 	movi	r4,1
    dfcc:	dc400115 	stw	r17,4(sp)
    dfd0:	dc000015 	stw	r16,0(sp)
    dfd4:	403ee83a 	callr	r8
    dfd8:	14801326 	beq	r2,r18,e028 <_Unwind_RaiseException_Phase2+0xb4>
    dfdc:	14c0051e 	bne	r2,r19,dff4 <_Unwind_RaiseException_Phase2+0x80>
    dfe0:	a000131e 	bne	r20,zero,e030 <_Unwind_RaiseException_Phase2+0xbc>
    dfe4:	88c00017 	ldw	r3,0(r17)
    dfe8:	18c00017 	ldw	r3,0(r3)
    dfec:	88c00015 	stw	r3,0(r17)
    dff0:	183fed1e 	bne	r3,zero,dfa8 <__alt_data_end+0xfc00dfa8>
    dff4:	00800084 	movi	r2,2
    dff8:	dfc00717 	ldw	ra,28(sp)
    dffc:	dd000617 	ldw	r20,24(sp)
    e000:	dcc00517 	ldw	r19,20(sp)
    e004:	dc800417 	ldw	r18,16(sp)
    e008:	dc400317 	ldw	r17,12(sp)
    e00c:	dc000217 	ldw	r16,8(sp)
    e010:	dec00804 	addi	sp,sp,32
    e014:	f800283a 	ret
    e018:	40000526 	beq	r8,zero,e030 <_Unwind_RaiseException_Phase2+0xbc>
    e01c:	01400184 	movi	r5,6
    e020:	05000104 	movi	r20,4
    e024:	003fe606 	br	dfc0 <__alt_data_end+0xfc00dfc0>
    e028:	9005883a 	mov	r2,r18
    e02c:	003ff206 	br	dff8 <__alt_data_end+0xfc00dff8>
    e030:	000e3e00 	call	e3e0 <abort>

0000e034 <uw_install_context.isra.1>:
    e034:	20c00017 	ldw	r3,0(r4)
    e038:	deffff04 	addi	sp,sp,-4
    e03c:	014000f4 	movhi	r5,3
    e040:	19000917 	ldw	r4,36(r3)
    e044:	df000015 	stw	fp,0(sp)
    e048:	18800804 	addi	r2,r3,32
    e04c:	d839883a 	mov	fp,sp
    e050:	29441704 	addi	r5,r5,4188
    e054:	28c00015 	stw	r3,0(r5)
    e058:	17000017 	ldw	fp,0(r2)
    e05c:	1ec00a17 	ldw	sp,40(r3)
    e060:	2000683a 	jmp	r4

0000e064 <_Unwind_SjLj_Register>:
    e064:	008000f4 	movhi	r2,3
    e068:	10841704 	addi	r2,r2,4188
    e06c:	10c00017 	ldw	r3,0(r2)
    e070:	11000015 	stw	r4,0(r2)
    e074:	20c00015 	stw	r3,0(r4)
    e078:	f800283a 	ret

0000e07c <_Unwind_SjLj_Unregister>:
    e07c:	20c00017 	ldw	r3,0(r4)
    e080:	008000f4 	movhi	r2,3
    e084:	10841704 	addi	r2,r2,4188
    e088:	10c00015 	stw	r3,0(r2)
    e08c:	f800283a 	ret

0000e090 <_Unwind_GetGR>:
    e090:	20800017 	ldw	r2,0(r4)
    e094:	29400084 	addi	r5,r5,2
    e098:	294b883a 	add	r5,r5,r5
    e09c:	294b883a 	add	r5,r5,r5
    e0a0:	114b883a 	add	r5,r2,r5
    e0a4:	28800017 	ldw	r2,0(r5)
    e0a8:	f800283a 	ret

0000e0ac <_Unwind_GetCFA>:
    e0ac:	20800017 	ldw	r2,0(r4)
    e0b0:	10000226 	beq	r2,zero,e0bc <_Unwind_GetCFA+0x10>
    e0b4:	10800a17 	ldw	r2,40(r2)
    e0b8:	f800283a 	ret
    e0bc:	0005883a 	mov	r2,zero
    e0c0:	f800283a 	ret

0000e0c4 <_Unwind_SetGR>:
    e0c4:	20800017 	ldw	r2,0(r4)
    e0c8:	29400084 	addi	r5,r5,2
    e0cc:	294b883a 	add	r5,r5,r5
    e0d0:	294b883a 	add	r5,r5,r5
    e0d4:	114b883a 	add	r5,r2,r5
    e0d8:	29800015 	stw	r6,0(r5)
    e0dc:	f800283a 	ret

0000e0e0 <_Unwind_GetIP>:
    e0e0:	20800017 	ldw	r2,0(r4)
    e0e4:	10800117 	ldw	r2,4(r2)
    e0e8:	10800044 	addi	r2,r2,1
    e0ec:	f800283a 	ret

0000e0f0 <_Unwind_GetIPInfo>:
    e0f0:	20800017 	ldw	r2,0(r4)
    e0f4:	28000015 	stw	zero,0(r5)
    e0f8:	10000326 	beq	r2,zero,e108 <_Unwind_GetIPInfo+0x18>
    e0fc:	10800117 	ldw	r2,4(r2)
    e100:	10800044 	addi	r2,r2,1
    e104:	f800283a 	ret
    e108:	0005883a 	mov	r2,zero
    e10c:	f800283a 	ret

0000e110 <_Unwind_SetIP>:
    e110:	20800017 	ldw	r2,0(r4)
    e114:	297fffc4 	addi	r5,r5,-1
    e118:	11400115 	stw	r5,4(r2)
    e11c:	f800283a 	ret

0000e120 <_Unwind_GetLanguageSpecificData>:
    e120:	20800017 	ldw	r2,0(r4)
    e124:	10800717 	ldw	r2,28(r2)
    e128:	f800283a 	ret

0000e12c <_Unwind_GetRegionStart>:
    e12c:	0005883a 	mov	r2,zero
    e130:	f800283a 	ret

0000e134 <_Unwind_FindEnclosingFunction>:
    e134:	0005883a 	mov	r2,zero
    e138:	f800283a 	ret

0000e13c <_Unwind_GetDataRelBase>:
    e13c:	0005883a 	mov	r2,zero
    e140:	f800283a 	ret

0000e144 <_Unwind_GetTextRelBase>:
    e144:	0005883a 	mov	r2,zero
    e148:	f800283a 	ret

0000e14c <_Unwind_SjLj_RaiseException>:
    e14c:	008000f4 	movhi	r2,3
    e150:	defff804 	addi	sp,sp,-32
    e154:	10841704 	addi	r2,r2,4188
    e158:	dc800515 	stw	r18,20(sp)
    e15c:	14800017 	ldw	r18,0(r2)
    e160:	dfc00715 	stw	ra,28(sp)
    e164:	dcc00615 	stw	r19,24(sp)
    e168:	dc400415 	stw	r17,16(sp)
    e16c:	dc000315 	stw	r16,12(sp)
    e170:	dc800215 	stw	r18,8(sp)
    e174:	90001426 	beq	r18,zero,e1c8 <_Unwind_SjLj_RaiseException+0x7c>
    e178:	2021883a 	mov	r16,r4
    e17c:	9005883a 	mov	r2,r18
    e180:	04400184 	movi	r17,6
    e184:	04c00204 	movi	r19,8
    e188:	10800617 	ldw	r2,24(r2)
    e18c:	10000a26 	beq	r2,zero,e1b8 <_Unwind_SjLj_RaiseException+0x6c>
    e190:	81800017 	ldw	r6,0(r16)
    e194:	81c00117 	ldw	r7,4(r16)
    e198:	01400044 	movi	r5,1
    e19c:	d8c00204 	addi	r3,sp,8
    e1a0:	d8c00115 	stw	r3,4(sp)
    e1a4:	dc000015 	stw	r16,0(sp)
    e1a8:	2809883a 	mov	r4,r5
    e1ac:	103ee83a 	callr	r2
    e1b0:	14400d26 	beq	r2,r17,e1e8 <_Unwind_SjLj_RaiseException+0x9c>
    e1b4:	14c0171e 	bne	r2,r19,e214 <_Unwind_SjLj_RaiseException+0xc8>
    e1b8:	d8800217 	ldw	r2,8(sp)
    e1bc:	10800017 	ldw	r2,0(r2)
    e1c0:	d8800215 	stw	r2,8(sp)
    e1c4:	103ff01e 	bne	r2,zero,e188 <__alt_data_end+0xfc00e188>
    e1c8:	00800144 	movi	r2,5
    e1cc:	dfc00717 	ldw	ra,28(sp)
    e1d0:	dcc00617 	ldw	r19,24(sp)
    e1d4:	dc800517 	ldw	r18,20(sp)
    e1d8:	dc400417 	ldw	r17,16(sp)
    e1dc:	dc000317 	ldw	r16,12(sp)
    e1e0:	dec00804 	addi	sp,sp,32
    e1e4:	f800283a 	ret
    e1e8:	d8800217 	ldw	r2,8(sp)
    e1ec:	80000315 	stw	zero,12(r16)
    e1f0:	d9400204 	addi	r5,sp,8
    e1f4:	80800415 	stw	r2,16(r16)
    e1f8:	8009883a 	mov	r4,r16
    e1fc:	dc800215 	stw	r18,8(sp)
    e200:	000df740 	call	df74 <_Unwind_RaiseException_Phase2>
    e204:	00c001c4 	movi	r3,7
    e208:	10fff01e 	bne	r2,r3,e1cc <__alt_data_end+0xfc00e1cc>
    e20c:	d9000204 	addi	r4,sp,8
    e210:	000e0340 	call	e034 <uw_install_context.isra.1>
    e214:	008000c4 	movi	r2,3
    e218:	003fec06 	br	e1cc <__alt_data_end+0xfc00e1cc>

0000e21c <_Unwind_SjLj_ForcedUnwind>:
    e21c:	00c000f4 	movhi	r3,3
    e220:	18c41704 	addi	r3,r3,4188
    e224:	defffe04 	addi	sp,sp,-8
    e228:	18c00017 	ldw	r3,0(r3)
    e22c:	dfc00115 	stw	ra,4(sp)
    e230:	21400315 	stw	r5,12(r4)
    e234:	21800415 	stw	r6,16(r4)
    e238:	d80b883a 	mov	r5,sp
    e23c:	d8c00015 	stw	r3,0(sp)
    e240:	000de5c0 	call	de5c <_Unwind_ForcedUnwind_Phase2>
    e244:	00c001c4 	movi	r3,7
    e248:	10c00326 	beq	r2,r3,e258 <_Unwind_SjLj_ForcedUnwind+0x3c>
    e24c:	dfc00117 	ldw	ra,4(sp)
    e250:	dec00204 	addi	sp,sp,8
    e254:	f800283a 	ret
    e258:	d809883a 	mov	r4,sp
    e25c:	000e0340 	call	e034 <uw_install_context.isra.1>

0000e260 <_Unwind_SjLj_Resume>:
    e260:	00c000f4 	movhi	r3,3
    e264:	18c41704 	addi	r3,r3,4188
    e268:	18c00017 	ldw	r3,0(r3)
    e26c:	20800317 	ldw	r2,12(r4)
    e270:	defffe04 	addi	sp,sp,-8
    e274:	dfc00115 	stw	ra,4(sp)
    e278:	d8c00015 	stw	r3,0(sp)
    e27c:	d80b883a 	mov	r5,sp
    e280:	1000041e 	bne	r2,zero,e294 <_Unwind_SjLj_Resume+0x34>
    e284:	000df740 	call	df74 <_Unwind_RaiseException_Phase2>
    e288:	00c001c4 	movi	r3,7
    e28c:	10c00326 	beq	r2,r3,e29c <_Unwind_SjLj_Resume+0x3c>
    e290:	000e3e00 	call	e3e0 <abort>
    e294:	000de5c0 	call	de5c <_Unwind_ForcedUnwind_Phase2>
    e298:	003ffb06 	br	e288 <__alt_data_end+0xfc00e288>
    e29c:	d809883a 	mov	r4,sp
    e2a0:	000e0340 	call	e034 <uw_install_context.isra.1>

0000e2a4 <_Unwind_SjLj_Resume_or_Rethrow>:
    e2a4:	20800317 	ldw	r2,12(r4)
    e2a8:	defffe04 	addi	sp,sp,-8
    e2ac:	dfc00115 	stw	ra,4(sp)
    e2b0:	1000041e 	bne	r2,zero,e2c4 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    e2b4:	000e14c0 	call	e14c <_Unwind_SjLj_RaiseException>
    e2b8:	dfc00117 	ldw	ra,4(sp)
    e2bc:	dec00204 	addi	sp,sp,8
    e2c0:	f800283a 	ret
    e2c4:	008000f4 	movhi	r2,3
    e2c8:	10841704 	addi	r2,r2,4188
    e2cc:	10800017 	ldw	r2,0(r2)
    e2d0:	d80b883a 	mov	r5,sp
    e2d4:	d8800015 	stw	r2,0(sp)
    e2d8:	000de5c0 	call	de5c <_Unwind_ForcedUnwind_Phase2>
    e2dc:	00c001c4 	movi	r3,7
    e2e0:	10c00126 	beq	r2,r3,e2e8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    e2e4:	000e3e00 	call	e3e0 <abort>
    e2e8:	d809883a 	mov	r4,sp
    e2ec:	000e0340 	call	e034 <uw_install_context.isra.1>

0000e2f0 <_Unwind_DeleteException>:
    e2f0:	20800217 	ldw	r2,8(r4)
    e2f4:	10000326 	beq	r2,zero,e304 <_Unwind_DeleteException+0x14>
    e2f8:	200b883a 	mov	r5,r4
    e2fc:	01000044 	movi	r4,1
    e300:	1000683a 	jmp	r2
    e304:	f800283a 	ret

0000e308 <_Unwind_Backtrace>:
    e308:	008000f4 	movhi	r2,3
    e30c:	10841704 	addi	r2,r2,4188
    e310:	10800017 	ldw	r2,0(r2)
    e314:	defffc04 	addi	sp,sp,-16
    e318:	dc400215 	stw	r17,8(sp)
    e31c:	dc000115 	stw	r16,4(sp)
    e320:	dfc00315 	stw	ra,12(sp)
    e324:	2023883a 	mov	r17,r4
    e328:	2821883a 	mov	r16,r5
    e32c:	d8800015 	stw	r2,0(sp)
    e330:	00000506 	br	e348 <_Unwind_Backtrace+0x40>
    e334:	883ee83a 	callr	r17
    e338:	10000e1e 	bne	r2,zero,e374 <_Unwind_Backtrace+0x6c>
    e33c:	d8800017 	ldw	r2,0(sp)
    e340:	10800017 	ldw	r2,0(r2)
    e344:	d8800015 	stw	r2,0(sp)
    e348:	800b883a 	mov	r5,r16
    e34c:	d809883a 	mov	r4,sp
    e350:	103ff81e 	bne	r2,zero,e334 <__alt_data_end+0xfc00e334>
    e354:	883ee83a 	callr	r17
    e358:	1000061e 	bne	r2,zero,e374 <_Unwind_Backtrace+0x6c>
    e35c:	00800144 	movi	r2,5
    e360:	dfc00317 	ldw	ra,12(sp)
    e364:	dc400217 	ldw	r17,8(sp)
    e368:	dc000117 	ldw	r16,4(sp)
    e36c:	dec00404 	addi	sp,sp,16
    e370:	f800283a 	ret
    e374:	008000c4 	movi	r2,3
    e378:	003ff906 	br	e360 <__alt_data_end+0xfc00e360>

0000e37c <__clzsi2>:
    e37c:	00bfffd4 	movui	r2,65535
    e380:	11000536 	bltu	r2,r4,e398 <__clzsi2+0x1c>
    e384:	00803fc4 	movi	r2,255
    e388:	11000f36 	bltu	r2,r4,e3c8 <__clzsi2+0x4c>
    e38c:	00800804 	movi	r2,32
    e390:	0007883a 	mov	r3,zero
    e394:	00000506 	br	e3ac <__clzsi2+0x30>
    e398:	00804034 	movhi	r2,256
    e39c:	10bfffc4 	addi	r2,r2,-1
    e3a0:	11000c2e 	bgeu	r2,r4,e3d4 <__clzsi2+0x58>
    e3a4:	00800204 	movi	r2,8
    e3a8:	00c00604 	movi	r3,24
    e3ac:	20c8d83a 	srl	r4,r4,r3
    e3b0:	00c000f4 	movhi	r3,3
    e3b4:	18ea4404 	addi	r3,r3,-22256
    e3b8:	1909883a 	add	r4,r3,r4
    e3bc:	20c00003 	ldbu	r3,0(r4)
    e3c0:	10c5c83a 	sub	r2,r2,r3
    e3c4:	f800283a 	ret
    e3c8:	00800604 	movi	r2,24
    e3cc:	00c00204 	movi	r3,8
    e3d0:	003ff606 	br	e3ac <__alt_data_end+0xfc00e3ac>
    e3d4:	00800404 	movi	r2,16
    e3d8:	1007883a 	mov	r3,r2
    e3dc:	003ff306 	br	e3ac <__alt_data_end+0xfc00e3ac>

0000e3e0 <abort>:
    e3e0:	deffff04 	addi	sp,sp,-4
    e3e4:	01000184 	movi	r4,6
    e3e8:	dfc00015 	stw	ra,0(sp)
    e3ec:	000f2f00 	call	f2f0 <raise>
    e3f0:	01000044 	movi	r4,1
    e3f4:	001f0300 	call	1f030 <_exit>

0000e3f8 <clock>:
    e3f8:	008000f4 	movhi	r2,3
    e3fc:	10b78704 	addi	r2,r2,-8676
    e400:	11000017 	ldw	r4,0(r2)
    e404:	defffb04 	addi	sp,sp,-20
    e408:	d80b883a 	mov	r5,sp
    e40c:	dfc00415 	stw	ra,16(sp)
    e410:	00118940 	call	11894 <_times_r>
    e414:	00ffffc4 	movi	r3,-1
    e418:	10c00726 	beq	r2,r3,e438 <clock+0x40>
    e41c:	d8c00017 	ldw	r3,0(sp)
    e420:	d8800117 	ldw	r2,4(sp)
    e424:	1885883a 	add	r2,r3,r2
    e428:	d8c00217 	ldw	r3,8(sp)
    e42c:	10c7883a 	add	r3,r2,r3
    e430:	d8800317 	ldw	r2,12(sp)
    e434:	1885883a 	add	r2,r3,r2
    e438:	dfc00417 	ldw	ra,16(sp)
    e43c:	dec00504 	addi	sp,sp,20
    e440:	f800283a 	ret

0000e444 <malloc>:
    e444:	008000f4 	movhi	r2,3
    e448:	10b78704 	addi	r2,r2,-8676
    e44c:	200b883a 	mov	r5,r4
    e450:	11000017 	ldw	r4,0(r2)
    e454:	000e46c1 	jmpi	e46c <_malloc_r>

0000e458 <free>:
    e458:	008000f4 	movhi	r2,3
    e45c:	10b78704 	addi	r2,r2,-8676
    e460:	200b883a 	mov	r5,r4
    e464:	11000017 	ldw	r4,0(r2)
    e468:	0015dd01 	jmpi	15dd0 <_free_r>

0000e46c <_malloc_r>:
    e46c:	defff504 	addi	sp,sp,-44
    e470:	dc800315 	stw	r18,12(sp)
    e474:	dfc00a15 	stw	ra,40(sp)
    e478:	df000915 	stw	fp,36(sp)
    e47c:	ddc00815 	stw	r23,32(sp)
    e480:	dd800715 	stw	r22,28(sp)
    e484:	dd400615 	stw	r21,24(sp)
    e488:	dd000515 	stw	r20,20(sp)
    e48c:	dcc00415 	stw	r19,16(sp)
    e490:	dc400215 	stw	r17,8(sp)
    e494:	dc000115 	stw	r16,4(sp)
    e498:	288002c4 	addi	r2,r5,11
    e49c:	00c00584 	movi	r3,22
    e4a0:	2025883a 	mov	r18,r4
    e4a4:	18807f2e 	bgeu	r3,r2,e6a4 <_malloc_r+0x238>
    e4a8:	047ffe04 	movi	r17,-8
    e4ac:	1462703a 	and	r17,r2,r17
    e4b0:	8800a316 	blt	r17,zero,e740 <_malloc_r+0x2d4>
    e4b4:	8940a236 	bltu	r17,r5,e740 <_malloc_r+0x2d4>
    e4b8:	001f64c0 	call	1f64c <__malloc_lock>
    e4bc:	00807dc4 	movi	r2,503
    e4c0:	1441e92e 	bgeu	r2,r17,ec68 <_malloc_r+0x7fc>
    e4c4:	8804d27a 	srli	r2,r17,9
    e4c8:	1000a126 	beq	r2,zero,e750 <_malloc_r+0x2e4>
    e4cc:	00c00104 	movi	r3,4
    e4d0:	18811e36 	bltu	r3,r2,e94c <_malloc_r+0x4e0>
    e4d4:	8804d1ba 	srli	r2,r17,6
    e4d8:	12000e44 	addi	r8,r2,57
    e4dc:	11c00e04 	addi	r7,r2,56
    e4e0:	4209883a 	add	r4,r8,r8
    e4e4:	04c000f4 	movhi	r19,3
    e4e8:	2109883a 	add	r4,r4,r4
    e4ec:	9cec2804 	addi	r19,r19,-20320
    e4f0:	2109883a 	add	r4,r4,r4
    e4f4:	9909883a 	add	r4,r19,r4
    e4f8:	24000117 	ldw	r16,4(r4)
    e4fc:	213ffe04 	addi	r4,r4,-8
    e500:	24009726 	beq	r4,r16,e760 <_malloc_r+0x2f4>
    e504:	80800117 	ldw	r2,4(r16)
    e508:	01bfff04 	movi	r6,-4
    e50c:	014003c4 	movi	r5,15
    e510:	1184703a 	and	r2,r2,r6
    e514:	1447c83a 	sub	r3,r2,r17
    e518:	28c00716 	blt	r5,r3,e538 <_malloc_r+0xcc>
    e51c:	1800920e 	bge	r3,zero,e768 <_malloc_r+0x2fc>
    e520:	84000317 	ldw	r16,12(r16)
    e524:	24008e26 	beq	r4,r16,e760 <_malloc_r+0x2f4>
    e528:	80800117 	ldw	r2,4(r16)
    e52c:	1184703a 	and	r2,r2,r6
    e530:	1447c83a 	sub	r3,r2,r17
    e534:	28fff90e 	bge	r5,r3,e51c <__alt_data_end+0xfc00e51c>
    e538:	3809883a 	mov	r4,r7
    e53c:	018000f4 	movhi	r6,3
    e540:	9c000417 	ldw	r16,16(r19)
    e544:	31ac2804 	addi	r6,r6,-20320
    e548:	32000204 	addi	r8,r6,8
    e54c:	82013426 	beq	r16,r8,ea20 <_malloc_r+0x5b4>
    e550:	80c00117 	ldw	r3,4(r16)
    e554:	00bfff04 	movi	r2,-4
    e558:	188e703a 	and	r7,r3,r2
    e55c:	3c45c83a 	sub	r2,r7,r17
    e560:	00c003c4 	movi	r3,15
    e564:	18811f16 	blt	r3,r2,e9e4 <_malloc_r+0x578>
    e568:	32000515 	stw	r8,20(r6)
    e56c:	32000415 	stw	r8,16(r6)
    e570:	10007f0e 	bge	r2,zero,e770 <_malloc_r+0x304>
    e574:	00807fc4 	movi	r2,511
    e578:	11c0fd36 	bltu	r2,r7,e970 <_malloc_r+0x504>
    e57c:	3806d0fa 	srli	r3,r7,3
    e580:	01c00044 	movi	r7,1
    e584:	30800117 	ldw	r2,4(r6)
    e588:	19400044 	addi	r5,r3,1
    e58c:	294b883a 	add	r5,r5,r5
    e590:	1807d0ba 	srai	r3,r3,2
    e594:	294b883a 	add	r5,r5,r5
    e598:	294b883a 	add	r5,r5,r5
    e59c:	298b883a 	add	r5,r5,r6
    e5a0:	38c6983a 	sll	r3,r7,r3
    e5a4:	29c00017 	ldw	r7,0(r5)
    e5a8:	2a7ffe04 	addi	r9,r5,-8
    e5ac:	1886b03a 	or	r3,r3,r2
    e5b0:	82400315 	stw	r9,12(r16)
    e5b4:	81c00215 	stw	r7,8(r16)
    e5b8:	30c00115 	stw	r3,4(r6)
    e5bc:	2c000015 	stw	r16,0(r5)
    e5c0:	3c000315 	stw	r16,12(r7)
    e5c4:	2005d0ba 	srai	r2,r4,2
    e5c8:	01400044 	movi	r5,1
    e5cc:	288a983a 	sll	r5,r5,r2
    e5d0:	19406f36 	bltu	r3,r5,e790 <_malloc_r+0x324>
    e5d4:	28c4703a 	and	r2,r5,r3
    e5d8:	10000a1e 	bne	r2,zero,e604 <_malloc_r+0x198>
    e5dc:	00bfff04 	movi	r2,-4
    e5e0:	294b883a 	add	r5,r5,r5
    e5e4:	2088703a 	and	r4,r4,r2
    e5e8:	28c4703a 	and	r2,r5,r3
    e5ec:	21000104 	addi	r4,r4,4
    e5f0:	1000041e 	bne	r2,zero,e604 <_malloc_r+0x198>
    e5f4:	294b883a 	add	r5,r5,r5
    e5f8:	28c4703a 	and	r2,r5,r3
    e5fc:	21000104 	addi	r4,r4,4
    e600:	103ffc26 	beq	r2,zero,e5f4 <__alt_data_end+0xfc00e5f4>
    e604:	02bfff04 	movi	r10,-4
    e608:	024003c4 	movi	r9,15
    e60c:	21800044 	addi	r6,r4,1
    e610:	318d883a 	add	r6,r6,r6
    e614:	318d883a 	add	r6,r6,r6
    e618:	318d883a 	add	r6,r6,r6
    e61c:	998d883a 	add	r6,r19,r6
    e620:	333ffe04 	addi	r12,r6,-8
    e624:	2017883a 	mov	r11,r4
    e628:	31800104 	addi	r6,r6,4
    e62c:	34000017 	ldw	r16,0(r6)
    e630:	31fffd04 	addi	r7,r6,-12
    e634:	81c0041e 	bne	r16,r7,e648 <_malloc_r+0x1dc>
    e638:	0000fb06 	br	ea28 <_malloc_r+0x5bc>
    e63c:	1801030e 	bge	r3,zero,ea4c <_malloc_r+0x5e0>
    e640:	84000317 	ldw	r16,12(r16)
    e644:	81c0f826 	beq	r16,r7,ea28 <_malloc_r+0x5bc>
    e648:	80800117 	ldw	r2,4(r16)
    e64c:	1284703a 	and	r2,r2,r10
    e650:	1447c83a 	sub	r3,r2,r17
    e654:	48fff90e 	bge	r9,r3,e63c <__alt_data_end+0xfc00e63c>
    e658:	80800317 	ldw	r2,12(r16)
    e65c:	81000217 	ldw	r4,8(r16)
    e660:	89400054 	ori	r5,r17,1
    e664:	81400115 	stw	r5,4(r16)
    e668:	20800315 	stw	r2,12(r4)
    e66c:	11000215 	stw	r4,8(r2)
    e670:	8463883a 	add	r17,r16,r17
    e674:	9c400515 	stw	r17,20(r19)
    e678:	9c400415 	stw	r17,16(r19)
    e67c:	18800054 	ori	r2,r3,1
    e680:	88800115 	stw	r2,4(r17)
    e684:	8a000315 	stw	r8,12(r17)
    e688:	8a000215 	stw	r8,8(r17)
    e68c:	88e3883a 	add	r17,r17,r3
    e690:	88c00015 	stw	r3,0(r17)
    e694:	9009883a 	mov	r4,r18
    e698:	001f6700 	call	1f670 <__malloc_unlock>
    e69c:	80800204 	addi	r2,r16,8
    e6a0:	00001b06 	br	e710 <_malloc_r+0x2a4>
    e6a4:	04400404 	movi	r17,16
    e6a8:	89402536 	bltu	r17,r5,e740 <_malloc_r+0x2d4>
    e6ac:	001f64c0 	call	1f64c <__malloc_lock>
    e6b0:	00800184 	movi	r2,6
    e6b4:	01000084 	movi	r4,2
    e6b8:	04c000f4 	movhi	r19,3
    e6bc:	1085883a 	add	r2,r2,r2
    e6c0:	9cec2804 	addi	r19,r19,-20320
    e6c4:	1085883a 	add	r2,r2,r2
    e6c8:	9885883a 	add	r2,r19,r2
    e6cc:	14000117 	ldw	r16,4(r2)
    e6d0:	10fffe04 	addi	r3,r2,-8
    e6d4:	80c0d926 	beq	r16,r3,ea3c <_malloc_r+0x5d0>
    e6d8:	80c00117 	ldw	r3,4(r16)
    e6dc:	81000317 	ldw	r4,12(r16)
    e6e0:	00bfff04 	movi	r2,-4
    e6e4:	1884703a 	and	r2,r3,r2
    e6e8:	81400217 	ldw	r5,8(r16)
    e6ec:	8085883a 	add	r2,r16,r2
    e6f0:	10c00117 	ldw	r3,4(r2)
    e6f4:	29000315 	stw	r4,12(r5)
    e6f8:	21400215 	stw	r5,8(r4)
    e6fc:	18c00054 	ori	r3,r3,1
    e700:	10c00115 	stw	r3,4(r2)
    e704:	9009883a 	mov	r4,r18
    e708:	001f6700 	call	1f670 <__malloc_unlock>
    e70c:	80800204 	addi	r2,r16,8
    e710:	dfc00a17 	ldw	ra,40(sp)
    e714:	df000917 	ldw	fp,36(sp)
    e718:	ddc00817 	ldw	r23,32(sp)
    e71c:	dd800717 	ldw	r22,28(sp)
    e720:	dd400617 	ldw	r21,24(sp)
    e724:	dd000517 	ldw	r20,20(sp)
    e728:	dcc00417 	ldw	r19,16(sp)
    e72c:	dc800317 	ldw	r18,12(sp)
    e730:	dc400217 	ldw	r17,8(sp)
    e734:	dc000117 	ldw	r16,4(sp)
    e738:	dec00b04 	addi	sp,sp,44
    e73c:	f800283a 	ret
    e740:	00800304 	movi	r2,12
    e744:	90800015 	stw	r2,0(r18)
    e748:	0005883a 	mov	r2,zero
    e74c:	003ff006 	br	e710 <__alt_data_end+0xfc00e710>
    e750:	01002004 	movi	r4,128
    e754:	02001004 	movi	r8,64
    e758:	01c00fc4 	movi	r7,63
    e75c:	003f6106 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    e760:	4009883a 	mov	r4,r8
    e764:	003f7506 	br	e53c <__alt_data_end+0xfc00e53c>
    e768:	81000317 	ldw	r4,12(r16)
    e76c:	003fde06 	br	e6e8 <__alt_data_end+0xfc00e6e8>
    e770:	81c5883a 	add	r2,r16,r7
    e774:	11400117 	ldw	r5,4(r2)
    e778:	9009883a 	mov	r4,r18
    e77c:	29400054 	ori	r5,r5,1
    e780:	11400115 	stw	r5,4(r2)
    e784:	001f6700 	call	1f670 <__malloc_unlock>
    e788:	80800204 	addi	r2,r16,8
    e78c:	003fe006 	br	e710 <__alt_data_end+0xfc00e710>
    e790:	9c000217 	ldw	r16,8(r19)
    e794:	00bfff04 	movi	r2,-4
    e798:	85800117 	ldw	r22,4(r16)
    e79c:	b0ac703a 	and	r22,r22,r2
    e7a0:	b4400336 	bltu	r22,r17,e7b0 <_malloc_r+0x344>
    e7a4:	b445c83a 	sub	r2,r22,r17
    e7a8:	00c003c4 	movi	r3,15
    e7ac:	18805d16 	blt	r3,r2,e924 <_malloc_r+0x4b8>
    e7b0:	05c000f4 	movhi	r23,3
    e7b4:	008000f4 	movhi	r2,3
    e7b8:	10841a04 	addi	r2,r2,4200
    e7bc:	bdf78804 	addi	r23,r23,-8672
    e7c0:	15400017 	ldw	r21,0(r2)
    e7c4:	b8c00017 	ldw	r3,0(r23)
    e7c8:	00bfffc4 	movi	r2,-1
    e7cc:	858d883a 	add	r6,r16,r22
    e7d0:	8d6b883a 	add	r21,r17,r21
    e7d4:	1880ea26 	beq	r3,r2,eb80 <_malloc_r+0x714>
    e7d8:	ad4403c4 	addi	r21,r21,4111
    e7dc:	00bc0004 	movi	r2,-4096
    e7e0:	a8aa703a 	and	r21,r21,r2
    e7e4:	a80b883a 	mov	r5,r21
    e7e8:	9009883a 	mov	r4,r18
    e7ec:	d9800015 	stw	r6,0(sp)
    e7f0:	000f0480 	call	f048 <_sbrk_r>
    e7f4:	1029883a 	mov	r20,r2
    e7f8:	00bfffc4 	movi	r2,-1
    e7fc:	d9800017 	ldw	r6,0(sp)
    e800:	a080e826 	beq	r20,r2,eba4 <_malloc_r+0x738>
    e804:	a180a636 	bltu	r20,r6,eaa0 <_malloc_r+0x634>
    e808:	070000f4 	movhi	fp,3
    e80c:	e7047204 	addi	fp,fp,4552
    e810:	e0800017 	ldw	r2,0(fp)
    e814:	a887883a 	add	r3,r21,r2
    e818:	e0c00015 	stw	r3,0(fp)
    e81c:	3500e626 	beq	r6,r20,ebb8 <_malloc_r+0x74c>
    e820:	b9000017 	ldw	r4,0(r23)
    e824:	00bfffc4 	movi	r2,-1
    e828:	2080ee26 	beq	r4,r2,ebe4 <_malloc_r+0x778>
    e82c:	a185c83a 	sub	r2,r20,r6
    e830:	10c5883a 	add	r2,r2,r3
    e834:	e0800015 	stw	r2,0(fp)
    e838:	a0c001cc 	andi	r3,r20,7
    e83c:	1800bc26 	beq	r3,zero,eb30 <_malloc_r+0x6c4>
    e840:	a0e9c83a 	sub	r20,r20,r3
    e844:	00840204 	movi	r2,4104
    e848:	a5000204 	addi	r20,r20,8
    e84c:	10c7c83a 	sub	r3,r2,r3
    e850:	a545883a 	add	r2,r20,r21
    e854:	1083ffcc 	andi	r2,r2,4095
    e858:	18abc83a 	sub	r21,r3,r2
    e85c:	a80b883a 	mov	r5,r21
    e860:	9009883a 	mov	r4,r18
    e864:	000f0480 	call	f048 <_sbrk_r>
    e868:	00ffffc4 	movi	r3,-1
    e86c:	10c0e126 	beq	r2,r3,ebf4 <_malloc_r+0x788>
    e870:	1505c83a 	sub	r2,r2,r20
    e874:	1545883a 	add	r2,r2,r21
    e878:	10800054 	ori	r2,r2,1
    e87c:	e0c00017 	ldw	r3,0(fp)
    e880:	9d000215 	stw	r20,8(r19)
    e884:	a0800115 	stw	r2,4(r20)
    e888:	a8c7883a 	add	r3,r21,r3
    e88c:	e0c00015 	stw	r3,0(fp)
    e890:	84c00e26 	beq	r16,r19,e8cc <_malloc_r+0x460>
    e894:	018003c4 	movi	r6,15
    e898:	3580a72e 	bgeu	r6,r22,eb38 <_malloc_r+0x6cc>
    e89c:	81400117 	ldw	r5,4(r16)
    e8a0:	013ffe04 	movi	r4,-8
    e8a4:	b0bffd04 	addi	r2,r22,-12
    e8a8:	1104703a 	and	r2,r2,r4
    e8ac:	2900004c 	andi	r4,r5,1
    e8b0:	2088b03a 	or	r4,r4,r2
    e8b4:	81000115 	stw	r4,4(r16)
    e8b8:	01400144 	movi	r5,5
    e8bc:	8089883a 	add	r4,r16,r2
    e8c0:	21400115 	stw	r5,4(r4)
    e8c4:	21400215 	stw	r5,8(r4)
    e8c8:	3080cd36 	bltu	r6,r2,ec00 <_malloc_r+0x794>
    e8cc:	008000f4 	movhi	r2,3
    e8d0:	10841904 	addi	r2,r2,4196
    e8d4:	11000017 	ldw	r4,0(r2)
    e8d8:	20c0012e 	bgeu	r4,r3,e8e0 <_malloc_r+0x474>
    e8dc:	10c00015 	stw	r3,0(r2)
    e8e0:	008000f4 	movhi	r2,3
    e8e4:	10841804 	addi	r2,r2,4192
    e8e8:	11000017 	ldw	r4,0(r2)
    e8ec:	9c000217 	ldw	r16,8(r19)
    e8f0:	20c0012e 	bgeu	r4,r3,e8f8 <_malloc_r+0x48c>
    e8f4:	10c00015 	stw	r3,0(r2)
    e8f8:	80c00117 	ldw	r3,4(r16)
    e8fc:	00bfff04 	movi	r2,-4
    e900:	1886703a 	and	r3,r3,r2
    e904:	1c45c83a 	sub	r2,r3,r17
    e908:	1c400236 	bltu	r3,r17,e914 <_malloc_r+0x4a8>
    e90c:	00c003c4 	movi	r3,15
    e910:	18800416 	blt	r3,r2,e924 <_malloc_r+0x4b8>
    e914:	9009883a 	mov	r4,r18
    e918:	001f6700 	call	1f670 <__malloc_unlock>
    e91c:	0005883a 	mov	r2,zero
    e920:	003f7b06 	br	e710 <__alt_data_end+0xfc00e710>
    e924:	88c00054 	ori	r3,r17,1
    e928:	80c00115 	stw	r3,4(r16)
    e92c:	8463883a 	add	r17,r16,r17
    e930:	10800054 	ori	r2,r2,1
    e934:	9c400215 	stw	r17,8(r19)
    e938:	88800115 	stw	r2,4(r17)
    e93c:	9009883a 	mov	r4,r18
    e940:	001f6700 	call	1f670 <__malloc_unlock>
    e944:	80800204 	addi	r2,r16,8
    e948:	003f7106 	br	e710 <__alt_data_end+0xfc00e710>
    e94c:	00c00504 	movi	r3,20
    e950:	18804a2e 	bgeu	r3,r2,ea7c <_malloc_r+0x610>
    e954:	00c01504 	movi	r3,84
    e958:	18806e36 	bltu	r3,r2,eb14 <_malloc_r+0x6a8>
    e95c:	8804d33a 	srli	r2,r17,12
    e960:	12001bc4 	addi	r8,r2,111
    e964:	11c01b84 	addi	r7,r2,110
    e968:	4209883a 	add	r4,r8,r8
    e96c:	003edd06 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    e970:	3804d27a 	srli	r2,r7,9
    e974:	00c00104 	movi	r3,4
    e978:	1880442e 	bgeu	r3,r2,ea8c <_malloc_r+0x620>
    e97c:	00c00504 	movi	r3,20
    e980:	18808136 	bltu	r3,r2,eb88 <_malloc_r+0x71c>
    e984:	11401704 	addi	r5,r2,92
    e988:	10c016c4 	addi	r3,r2,91
    e98c:	294b883a 	add	r5,r5,r5
    e990:	294b883a 	add	r5,r5,r5
    e994:	294b883a 	add	r5,r5,r5
    e998:	994b883a 	add	r5,r19,r5
    e99c:	28800017 	ldw	r2,0(r5)
    e9a0:	018000f4 	movhi	r6,3
    e9a4:	297ffe04 	addi	r5,r5,-8
    e9a8:	31ac2804 	addi	r6,r6,-20320
    e9ac:	28806526 	beq	r5,r2,eb44 <_malloc_r+0x6d8>
    e9b0:	01bfff04 	movi	r6,-4
    e9b4:	10c00117 	ldw	r3,4(r2)
    e9b8:	1986703a 	and	r3,r3,r6
    e9bc:	38c0022e 	bgeu	r7,r3,e9c8 <_malloc_r+0x55c>
    e9c0:	10800217 	ldw	r2,8(r2)
    e9c4:	28bffb1e 	bne	r5,r2,e9b4 <__alt_data_end+0xfc00e9b4>
    e9c8:	11400317 	ldw	r5,12(r2)
    e9cc:	98c00117 	ldw	r3,4(r19)
    e9d0:	81400315 	stw	r5,12(r16)
    e9d4:	80800215 	stw	r2,8(r16)
    e9d8:	2c000215 	stw	r16,8(r5)
    e9dc:	14000315 	stw	r16,12(r2)
    e9e0:	003ef806 	br	e5c4 <__alt_data_end+0xfc00e5c4>
    e9e4:	88c00054 	ori	r3,r17,1
    e9e8:	80c00115 	stw	r3,4(r16)
    e9ec:	8463883a 	add	r17,r16,r17
    e9f0:	34400515 	stw	r17,20(r6)
    e9f4:	34400415 	stw	r17,16(r6)
    e9f8:	10c00054 	ori	r3,r2,1
    e9fc:	8a000315 	stw	r8,12(r17)
    ea00:	8a000215 	stw	r8,8(r17)
    ea04:	88c00115 	stw	r3,4(r17)
    ea08:	88a3883a 	add	r17,r17,r2
    ea0c:	88800015 	stw	r2,0(r17)
    ea10:	9009883a 	mov	r4,r18
    ea14:	001f6700 	call	1f670 <__malloc_unlock>
    ea18:	80800204 	addi	r2,r16,8
    ea1c:	003f3c06 	br	e710 <__alt_data_end+0xfc00e710>
    ea20:	30c00117 	ldw	r3,4(r6)
    ea24:	003ee706 	br	e5c4 <__alt_data_end+0xfc00e5c4>
    ea28:	5ac00044 	addi	r11,r11,1
    ea2c:	588000cc 	andi	r2,r11,3
    ea30:	31800204 	addi	r6,r6,8
    ea34:	103efd1e 	bne	r2,zero,e62c <__alt_data_end+0xfc00e62c>
    ea38:	00002406 	br	eacc <_malloc_r+0x660>
    ea3c:	14000317 	ldw	r16,12(r2)
    ea40:	143f251e 	bne	r2,r16,e6d8 <__alt_data_end+0xfc00e6d8>
    ea44:	21000084 	addi	r4,r4,2
    ea48:	003ebc06 	br	e53c <__alt_data_end+0xfc00e53c>
    ea4c:	8085883a 	add	r2,r16,r2
    ea50:	10c00117 	ldw	r3,4(r2)
    ea54:	81000317 	ldw	r4,12(r16)
    ea58:	81400217 	ldw	r5,8(r16)
    ea5c:	18c00054 	ori	r3,r3,1
    ea60:	10c00115 	stw	r3,4(r2)
    ea64:	29000315 	stw	r4,12(r5)
    ea68:	21400215 	stw	r5,8(r4)
    ea6c:	9009883a 	mov	r4,r18
    ea70:	001f6700 	call	1f670 <__malloc_unlock>
    ea74:	80800204 	addi	r2,r16,8
    ea78:	003f2506 	br	e710 <__alt_data_end+0xfc00e710>
    ea7c:	12001704 	addi	r8,r2,92
    ea80:	11c016c4 	addi	r7,r2,91
    ea84:	4209883a 	add	r4,r8,r8
    ea88:	003e9606 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    ea8c:	3804d1ba 	srli	r2,r7,6
    ea90:	11400e44 	addi	r5,r2,57
    ea94:	10c00e04 	addi	r3,r2,56
    ea98:	294b883a 	add	r5,r5,r5
    ea9c:	003fbc06 	br	e990 <__alt_data_end+0xfc00e990>
    eaa0:	84ff5926 	beq	r16,r19,e808 <__alt_data_end+0xfc00e808>
    eaa4:	008000f4 	movhi	r2,3
    eaa8:	10ac2804 	addi	r2,r2,-20320
    eaac:	14000217 	ldw	r16,8(r2)
    eab0:	00bfff04 	movi	r2,-4
    eab4:	80c00117 	ldw	r3,4(r16)
    eab8:	1886703a 	and	r3,r3,r2
    eabc:	003f9106 	br	e904 <__alt_data_end+0xfc00e904>
    eac0:	60800217 	ldw	r2,8(r12)
    eac4:	213fffc4 	addi	r4,r4,-1
    eac8:	1300651e 	bne	r2,r12,ec60 <_malloc_r+0x7f4>
    eacc:	208000cc 	andi	r2,r4,3
    ead0:	633ffe04 	addi	r12,r12,-8
    ead4:	103ffa1e 	bne	r2,zero,eac0 <__alt_data_end+0xfc00eac0>
    ead8:	98800117 	ldw	r2,4(r19)
    eadc:	0146303a 	nor	r3,zero,r5
    eae0:	1884703a 	and	r2,r3,r2
    eae4:	98800115 	stw	r2,4(r19)
    eae8:	294b883a 	add	r5,r5,r5
    eaec:	117f2836 	bltu	r2,r5,e790 <__alt_data_end+0xfc00e790>
    eaf0:	283f2726 	beq	r5,zero,e790 <__alt_data_end+0xfc00e790>
    eaf4:	2886703a 	and	r3,r5,r2
    eaf8:	5809883a 	mov	r4,r11
    eafc:	183ec31e 	bne	r3,zero,e60c <__alt_data_end+0xfc00e60c>
    eb00:	294b883a 	add	r5,r5,r5
    eb04:	2886703a 	and	r3,r5,r2
    eb08:	21000104 	addi	r4,r4,4
    eb0c:	183ffc26 	beq	r3,zero,eb00 <__alt_data_end+0xfc00eb00>
    eb10:	003ebe06 	br	e60c <__alt_data_end+0xfc00e60c>
    eb14:	00c05504 	movi	r3,340
    eb18:	18801236 	bltu	r3,r2,eb64 <_malloc_r+0x6f8>
    eb1c:	8804d3fa 	srli	r2,r17,15
    eb20:	12001e04 	addi	r8,r2,120
    eb24:	11c01dc4 	addi	r7,r2,119
    eb28:	4209883a 	add	r4,r8,r8
    eb2c:	003e6d06 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    eb30:	00c40004 	movi	r3,4096
    eb34:	003f4606 	br	e850 <__alt_data_end+0xfc00e850>
    eb38:	00800044 	movi	r2,1
    eb3c:	a0800115 	stw	r2,4(r20)
    eb40:	003f7406 	br	e914 <__alt_data_end+0xfc00e914>
    eb44:	1805d0ba 	srai	r2,r3,2
    eb48:	01c00044 	movi	r7,1
    eb4c:	30c00117 	ldw	r3,4(r6)
    eb50:	388e983a 	sll	r7,r7,r2
    eb54:	2805883a 	mov	r2,r5
    eb58:	38c6b03a 	or	r3,r7,r3
    eb5c:	30c00115 	stw	r3,4(r6)
    eb60:	003f9b06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    eb64:	00c15504 	movi	r3,1364
    eb68:	18801a36 	bltu	r3,r2,ebd4 <_malloc_r+0x768>
    eb6c:	8804d4ba 	srli	r2,r17,18
    eb70:	12001f44 	addi	r8,r2,125
    eb74:	11c01f04 	addi	r7,r2,124
    eb78:	4209883a 	add	r4,r8,r8
    eb7c:	003e5906 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    eb80:	ad400404 	addi	r21,r21,16
    eb84:	003f1706 	br	e7e4 <__alt_data_end+0xfc00e7e4>
    eb88:	00c01504 	movi	r3,84
    eb8c:	18802336 	bltu	r3,r2,ec1c <_malloc_r+0x7b0>
    eb90:	3804d33a 	srli	r2,r7,12
    eb94:	11401bc4 	addi	r5,r2,111
    eb98:	10c01b84 	addi	r3,r2,110
    eb9c:	294b883a 	add	r5,r5,r5
    eba0:	003f7b06 	br	e990 <__alt_data_end+0xfc00e990>
    eba4:	9c000217 	ldw	r16,8(r19)
    eba8:	00bfff04 	movi	r2,-4
    ebac:	80c00117 	ldw	r3,4(r16)
    ebb0:	1886703a 	and	r3,r3,r2
    ebb4:	003f5306 	br	e904 <__alt_data_end+0xfc00e904>
    ebb8:	3083ffcc 	andi	r2,r6,4095
    ebbc:	103f181e 	bne	r2,zero,e820 <__alt_data_end+0xfc00e820>
    ebc0:	99000217 	ldw	r4,8(r19)
    ebc4:	b545883a 	add	r2,r22,r21
    ebc8:	10800054 	ori	r2,r2,1
    ebcc:	20800115 	stw	r2,4(r4)
    ebd0:	003f3e06 	br	e8cc <__alt_data_end+0xfc00e8cc>
    ebd4:	01003f84 	movi	r4,254
    ebd8:	02001fc4 	movi	r8,127
    ebdc:	01c01f84 	movi	r7,126
    ebe0:	003e4006 	br	e4e4 <__alt_data_end+0xfc00e4e4>
    ebe4:	008000f4 	movhi	r2,3
    ebe8:	10b78804 	addi	r2,r2,-8672
    ebec:	15000015 	stw	r20,0(r2)
    ebf0:	003f1106 	br	e838 <__alt_data_end+0xfc00e838>
    ebf4:	00800044 	movi	r2,1
    ebf8:	002b883a 	mov	r21,zero
    ebfc:	003f1f06 	br	e87c <__alt_data_end+0xfc00e87c>
    ec00:	81400204 	addi	r5,r16,8
    ec04:	9009883a 	mov	r4,r18
    ec08:	0015dd00 	call	15dd0 <_free_r>
    ec0c:	008000f4 	movhi	r2,3
    ec10:	10847204 	addi	r2,r2,4552
    ec14:	10c00017 	ldw	r3,0(r2)
    ec18:	003f2c06 	br	e8cc <__alt_data_end+0xfc00e8cc>
    ec1c:	00c05504 	movi	r3,340
    ec20:	18800536 	bltu	r3,r2,ec38 <_malloc_r+0x7cc>
    ec24:	3804d3fa 	srli	r2,r7,15
    ec28:	11401e04 	addi	r5,r2,120
    ec2c:	10c01dc4 	addi	r3,r2,119
    ec30:	294b883a 	add	r5,r5,r5
    ec34:	003f5606 	br	e990 <__alt_data_end+0xfc00e990>
    ec38:	00c15504 	movi	r3,1364
    ec3c:	18800536 	bltu	r3,r2,ec54 <_malloc_r+0x7e8>
    ec40:	3804d4ba 	srli	r2,r7,18
    ec44:	11401f44 	addi	r5,r2,125
    ec48:	10c01f04 	addi	r3,r2,124
    ec4c:	294b883a 	add	r5,r5,r5
    ec50:	003f4f06 	br	e990 <__alt_data_end+0xfc00e990>
    ec54:	01403f84 	movi	r5,254
    ec58:	00c01f84 	movi	r3,126
    ec5c:	003f4c06 	br	e990 <__alt_data_end+0xfc00e990>
    ec60:	98800117 	ldw	r2,4(r19)
    ec64:	003fa006 	br	eae8 <__alt_data_end+0xfc00eae8>
    ec68:	8808d0fa 	srli	r4,r17,3
    ec6c:	20800044 	addi	r2,r4,1
    ec70:	1085883a 	add	r2,r2,r2
    ec74:	003e9006 	br	e6b8 <__alt_data_end+0xfc00e6b8>

0000ec78 <memcpy>:
    ec78:	defffd04 	addi	sp,sp,-12
    ec7c:	dfc00215 	stw	ra,8(sp)
    ec80:	dc400115 	stw	r17,4(sp)
    ec84:	dc000015 	stw	r16,0(sp)
    ec88:	00c003c4 	movi	r3,15
    ec8c:	2005883a 	mov	r2,r4
    ec90:	1980452e 	bgeu	r3,r6,eda8 <memcpy+0x130>
    ec94:	2906b03a 	or	r3,r5,r4
    ec98:	18c000cc 	andi	r3,r3,3
    ec9c:	1800441e 	bne	r3,zero,edb0 <memcpy+0x138>
    eca0:	347ffc04 	addi	r17,r6,-16
    eca4:	8822d13a 	srli	r17,r17,4
    eca8:	28c00104 	addi	r3,r5,4
    ecac:	23400104 	addi	r13,r4,4
    ecb0:	8820913a 	slli	r16,r17,4
    ecb4:	2b000204 	addi	r12,r5,8
    ecb8:	22c00204 	addi	r11,r4,8
    ecbc:	84000504 	addi	r16,r16,20
    ecc0:	2a800304 	addi	r10,r5,12
    ecc4:	22400304 	addi	r9,r4,12
    ecc8:	2c21883a 	add	r16,r5,r16
    eccc:	2811883a 	mov	r8,r5
    ecd0:	200f883a 	mov	r7,r4
    ecd4:	41000017 	ldw	r4,0(r8)
    ecd8:	1fc00017 	ldw	ra,0(r3)
    ecdc:	63c00017 	ldw	r15,0(r12)
    ece0:	39000015 	stw	r4,0(r7)
    ece4:	53800017 	ldw	r14,0(r10)
    ece8:	6fc00015 	stw	ra,0(r13)
    ecec:	5bc00015 	stw	r15,0(r11)
    ecf0:	4b800015 	stw	r14,0(r9)
    ecf4:	18c00404 	addi	r3,r3,16
    ecf8:	39c00404 	addi	r7,r7,16
    ecfc:	42000404 	addi	r8,r8,16
    ed00:	6b400404 	addi	r13,r13,16
    ed04:	63000404 	addi	r12,r12,16
    ed08:	5ac00404 	addi	r11,r11,16
    ed0c:	52800404 	addi	r10,r10,16
    ed10:	4a400404 	addi	r9,r9,16
    ed14:	1c3fef1e 	bne	r3,r16,ecd4 <__alt_data_end+0xfc00ecd4>
    ed18:	89c00044 	addi	r7,r17,1
    ed1c:	380e913a 	slli	r7,r7,4
    ed20:	310003cc 	andi	r4,r6,15
    ed24:	02c000c4 	movi	r11,3
    ed28:	11c7883a 	add	r3,r2,r7
    ed2c:	29cb883a 	add	r5,r5,r7
    ed30:	5900212e 	bgeu	r11,r4,edb8 <memcpy+0x140>
    ed34:	1813883a 	mov	r9,r3
    ed38:	2811883a 	mov	r8,r5
    ed3c:	200f883a 	mov	r7,r4
    ed40:	42800017 	ldw	r10,0(r8)
    ed44:	4a400104 	addi	r9,r9,4
    ed48:	39ffff04 	addi	r7,r7,-4
    ed4c:	4abfff15 	stw	r10,-4(r9)
    ed50:	42000104 	addi	r8,r8,4
    ed54:	59fffa36 	bltu	r11,r7,ed40 <__alt_data_end+0xfc00ed40>
    ed58:	213fff04 	addi	r4,r4,-4
    ed5c:	2008d0ba 	srli	r4,r4,2
    ed60:	318000cc 	andi	r6,r6,3
    ed64:	21000044 	addi	r4,r4,1
    ed68:	2109883a 	add	r4,r4,r4
    ed6c:	2109883a 	add	r4,r4,r4
    ed70:	1907883a 	add	r3,r3,r4
    ed74:	290b883a 	add	r5,r5,r4
    ed78:	30000626 	beq	r6,zero,ed94 <memcpy+0x11c>
    ed7c:	198d883a 	add	r6,r3,r6
    ed80:	29c00003 	ldbu	r7,0(r5)
    ed84:	18c00044 	addi	r3,r3,1
    ed88:	29400044 	addi	r5,r5,1
    ed8c:	19ffffc5 	stb	r7,-1(r3)
    ed90:	19bffb1e 	bne	r3,r6,ed80 <__alt_data_end+0xfc00ed80>
    ed94:	dfc00217 	ldw	ra,8(sp)
    ed98:	dc400117 	ldw	r17,4(sp)
    ed9c:	dc000017 	ldw	r16,0(sp)
    eda0:	dec00304 	addi	sp,sp,12
    eda4:	f800283a 	ret
    eda8:	2007883a 	mov	r3,r4
    edac:	003ff206 	br	ed78 <__alt_data_end+0xfc00ed78>
    edb0:	2007883a 	mov	r3,r4
    edb4:	003ff106 	br	ed7c <__alt_data_end+0xfc00ed7c>
    edb8:	200d883a 	mov	r6,r4
    edbc:	003fee06 	br	ed78 <__alt_data_end+0xfc00ed78>

0000edc0 <memset>:
    edc0:	20c000cc 	andi	r3,r4,3
    edc4:	2005883a 	mov	r2,r4
    edc8:	18004426 	beq	r3,zero,eedc <memset+0x11c>
    edcc:	31ffffc4 	addi	r7,r6,-1
    edd0:	30004026 	beq	r6,zero,eed4 <memset+0x114>
    edd4:	2813883a 	mov	r9,r5
    edd8:	200d883a 	mov	r6,r4
    eddc:	2007883a 	mov	r3,r4
    ede0:	00000406 	br	edf4 <memset+0x34>
    ede4:	3a3fffc4 	addi	r8,r7,-1
    ede8:	31800044 	addi	r6,r6,1
    edec:	38003926 	beq	r7,zero,eed4 <memset+0x114>
    edf0:	400f883a 	mov	r7,r8
    edf4:	18c00044 	addi	r3,r3,1
    edf8:	32400005 	stb	r9,0(r6)
    edfc:	1a0000cc 	andi	r8,r3,3
    ee00:	403ff81e 	bne	r8,zero,ede4 <__alt_data_end+0xfc00ede4>
    ee04:	010000c4 	movi	r4,3
    ee08:	21c02d2e 	bgeu	r4,r7,eec0 <memset+0x100>
    ee0c:	29003fcc 	andi	r4,r5,255
    ee10:	200c923a 	slli	r6,r4,8
    ee14:	3108b03a 	or	r4,r6,r4
    ee18:	200c943a 	slli	r6,r4,16
    ee1c:	218cb03a 	or	r6,r4,r6
    ee20:	010003c4 	movi	r4,15
    ee24:	21c0182e 	bgeu	r4,r7,ee88 <memset+0xc8>
    ee28:	3b3ffc04 	addi	r12,r7,-16
    ee2c:	6018d13a 	srli	r12,r12,4
    ee30:	1a000104 	addi	r8,r3,4
    ee34:	1ac00204 	addi	r11,r3,8
    ee38:	6008913a 	slli	r4,r12,4
    ee3c:	1a800304 	addi	r10,r3,12
    ee40:	1813883a 	mov	r9,r3
    ee44:	21000504 	addi	r4,r4,20
    ee48:	1909883a 	add	r4,r3,r4
    ee4c:	49800015 	stw	r6,0(r9)
    ee50:	41800015 	stw	r6,0(r8)
    ee54:	59800015 	stw	r6,0(r11)
    ee58:	51800015 	stw	r6,0(r10)
    ee5c:	42000404 	addi	r8,r8,16
    ee60:	4a400404 	addi	r9,r9,16
    ee64:	5ac00404 	addi	r11,r11,16
    ee68:	52800404 	addi	r10,r10,16
    ee6c:	413ff71e 	bne	r8,r4,ee4c <__alt_data_end+0xfc00ee4c>
    ee70:	63000044 	addi	r12,r12,1
    ee74:	6018913a 	slli	r12,r12,4
    ee78:	39c003cc 	andi	r7,r7,15
    ee7c:	010000c4 	movi	r4,3
    ee80:	1b07883a 	add	r3,r3,r12
    ee84:	21c00e2e 	bgeu	r4,r7,eec0 <memset+0x100>
    ee88:	1813883a 	mov	r9,r3
    ee8c:	3811883a 	mov	r8,r7
    ee90:	010000c4 	movi	r4,3
    ee94:	49800015 	stw	r6,0(r9)
    ee98:	423fff04 	addi	r8,r8,-4
    ee9c:	4a400104 	addi	r9,r9,4
    eea0:	223ffc36 	bltu	r4,r8,ee94 <__alt_data_end+0xfc00ee94>
    eea4:	393fff04 	addi	r4,r7,-4
    eea8:	2008d0ba 	srli	r4,r4,2
    eeac:	39c000cc 	andi	r7,r7,3
    eeb0:	21000044 	addi	r4,r4,1
    eeb4:	2109883a 	add	r4,r4,r4
    eeb8:	2109883a 	add	r4,r4,r4
    eebc:	1907883a 	add	r3,r3,r4
    eec0:	38000526 	beq	r7,zero,eed8 <memset+0x118>
    eec4:	19cf883a 	add	r7,r3,r7
    eec8:	19400005 	stb	r5,0(r3)
    eecc:	18c00044 	addi	r3,r3,1
    eed0:	38fffd1e 	bne	r7,r3,eec8 <__alt_data_end+0xfc00eec8>
    eed4:	f800283a 	ret
    eed8:	f800283a 	ret
    eedc:	2007883a 	mov	r3,r4
    eee0:	300f883a 	mov	r7,r6
    eee4:	003fc706 	br	ee04 <__alt_data_end+0xfc00ee04>

0000eee8 <_printf_r>:
    eee8:	defffd04 	addi	sp,sp,-12
    eeec:	2805883a 	mov	r2,r5
    eef0:	dfc00015 	stw	ra,0(sp)
    eef4:	d9800115 	stw	r6,4(sp)
    eef8:	d9c00215 	stw	r7,8(sp)
    eefc:	21400217 	ldw	r5,8(r4)
    ef00:	d9c00104 	addi	r7,sp,4
    ef04:	100d883a 	mov	r6,r2
    ef08:	001189c0 	call	1189c <___vfprintf_internal_r>
    ef0c:	dfc00017 	ldw	ra,0(sp)
    ef10:	dec00304 	addi	sp,sp,12
    ef14:	f800283a 	ret

0000ef18 <printf>:
    ef18:	defffc04 	addi	sp,sp,-16
    ef1c:	dfc00015 	stw	ra,0(sp)
    ef20:	d9400115 	stw	r5,4(sp)
    ef24:	d9800215 	stw	r6,8(sp)
    ef28:	d9c00315 	stw	r7,12(sp)
    ef2c:	008000f4 	movhi	r2,3
    ef30:	10b78704 	addi	r2,r2,-8676
    ef34:	10800017 	ldw	r2,0(r2)
    ef38:	200b883a 	mov	r5,r4
    ef3c:	d9800104 	addi	r6,sp,4
    ef40:	11000217 	ldw	r4,8(r2)
    ef44:	0013b780 	call	13b78 <__vfprintf_internal>
    ef48:	dfc00017 	ldw	ra,0(sp)
    ef4c:	dec00404 	addi	sp,sp,16
    ef50:	f800283a 	ret

0000ef54 <_putchar_r>:
    ef54:	21800217 	ldw	r6,8(r4)
    ef58:	0017cc01 	jmpi	17cc0 <_putc_r>

0000ef5c <putchar>:
    ef5c:	008000f4 	movhi	r2,3
    ef60:	10b78704 	addi	r2,r2,-8676
    ef64:	200b883a 	mov	r5,r4
    ef68:	11000017 	ldw	r4,0(r2)
    ef6c:	21800217 	ldw	r6,8(r4)
    ef70:	0017cc01 	jmpi	17cc0 <_putc_r>

0000ef74 <_puts_r>:
    ef74:	defff604 	addi	sp,sp,-40
    ef78:	dc000715 	stw	r16,28(sp)
    ef7c:	2021883a 	mov	r16,r4
    ef80:	2809883a 	mov	r4,r5
    ef84:	dc400815 	stw	r17,32(sp)
    ef88:	dfc00915 	stw	ra,36(sp)
    ef8c:	2823883a 	mov	r17,r5
    ef90:	000f5400 	call	f540 <strlen>
    ef94:	10c00044 	addi	r3,r2,1
    ef98:	d8800115 	stw	r2,4(sp)
    ef9c:	008000f4 	movhi	r2,3
    efa0:	10aa8504 	addi	r2,r2,-21996
    efa4:	d8800215 	stw	r2,8(sp)
    efa8:	00800044 	movi	r2,1
    efac:	d8800315 	stw	r2,12(sp)
    efb0:	00800084 	movi	r2,2
    efb4:	dc400015 	stw	r17,0(sp)
    efb8:	d8c00615 	stw	r3,24(sp)
    efbc:	dec00415 	stw	sp,16(sp)
    efc0:	d8800515 	stw	r2,20(sp)
    efc4:	80000226 	beq	r16,zero,efd0 <_puts_r+0x5c>
    efc8:	80800e17 	ldw	r2,56(r16)
    efcc:	10001426 	beq	r2,zero,f020 <_puts_r+0xac>
    efd0:	81400217 	ldw	r5,8(r16)
    efd4:	2880030b 	ldhu	r2,12(r5)
    efd8:	10c8000c 	andi	r3,r2,8192
    efdc:	1800061e 	bne	r3,zero,eff8 <_puts_r+0x84>
    efe0:	29001917 	ldw	r4,100(r5)
    efe4:	00f7ffc4 	movi	r3,-8193
    efe8:	10880014 	ori	r2,r2,8192
    efec:	20c6703a 	and	r3,r4,r3
    eff0:	2880030d 	sth	r2,12(r5)
    eff4:	28c01915 	stw	r3,100(r5)
    eff8:	d9800404 	addi	r6,sp,16
    effc:	8009883a 	mov	r4,r16
    f000:	00160e00 	call	160e0 <__sfvwrite_r>
    f004:	1000091e 	bne	r2,zero,f02c <_puts_r+0xb8>
    f008:	00800284 	movi	r2,10
    f00c:	dfc00917 	ldw	ra,36(sp)
    f010:	dc400817 	ldw	r17,32(sp)
    f014:	dc000717 	ldw	r16,28(sp)
    f018:	dec00a04 	addi	sp,sp,40
    f01c:	f800283a 	ret
    f020:	8009883a 	mov	r4,r16
    f024:	0015c5c0 	call	15c5c <__sinit>
    f028:	003fe906 	br	efd0 <__alt_data_end+0xfc00efd0>
    f02c:	00bfffc4 	movi	r2,-1
    f030:	003ff606 	br	f00c <__alt_data_end+0xfc00f00c>

0000f034 <puts>:
    f034:	008000f4 	movhi	r2,3
    f038:	10b78704 	addi	r2,r2,-8676
    f03c:	200b883a 	mov	r5,r4
    f040:	11000017 	ldw	r4,0(r2)
    f044:	000ef741 	jmpi	ef74 <_puts_r>

0000f048 <_sbrk_r>:
    f048:	defffd04 	addi	sp,sp,-12
    f04c:	dc000015 	stw	r16,0(sp)
    f050:	040000f4 	movhi	r16,3
    f054:	dc400115 	stw	r17,4(sp)
    f058:	84041b04 	addi	r16,r16,4204
    f05c:	2023883a 	mov	r17,r4
    f060:	2809883a 	mov	r4,r5
    f064:	dfc00215 	stw	ra,8(sp)
    f068:	80000015 	stw	zero,0(r16)
    f06c:	001f8580 	call	1f858 <sbrk>
    f070:	00ffffc4 	movi	r3,-1
    f074:	10c00526 	beq	r2,r3,f08c <_sbrk_r+0x44>
    f078:	dfc00217 	ldw	ra,8(sp)
    f07c:	dc400117 	ldw	r17,4(sp)
    f080:	dc000017 	ldw	r16,0(sp)
    f084:	dec00304 	addi	sp,sp,12
    f088:	f800283a 	ret
    f08c:	80c00017 	ldw	r3,0(r16)
    f090:	183ff926 	beq	r3,zero,f078 <__alt_data_end+0xfc00f078>
    f094:	88c00015 	stw	r3,0(r17)
    f098:	003ff706 	br	f078 <__alt_data_end+0xfc00f078>

0000f09c <_init_signal_r>:
    f09c:	2080b717 	ldw	r2,732(r4)
    f0a0:	10000226 	beq	r2,zero,f0ac <_init_signal_r+0x10>
    f0a4:	0005883a 	mov	r2,zero
    f0a8:	f800283a 	ret
    f0ac:	defffe04 	addi	sp,sp,-8
    f0b0:	01402004 	movi	r5,128
    f0b4:	dc000015 	stw	r16,0(sp)
    f0b8:	dfc00115 	stw	ra,4(sp)
    f0bc:	2021883a 	mov	r16,r4
    f0c0:	000e46c0 	call	e46c <_malloc_r>
    f0c4:	8080b715 	stw	r2,732(r16)
    f0c8:	10000d26 	beq	r2,zero,f100 <_init_signal_r+0x64>
    f0cc:	0007883a 	mov	r3,zero
    f0d0:	01002004 	movi	r4,128
    f0d4:	00000106 	br	f0dc <_init_signal_r+0x40>
    f0d8:	8080b717 	ldw	r2,732(r16)
    f0dc:	10c5883a 	add	r2,r2,r3
    f0e0:	10000015 	stw	zero,0(r2)
    f0e4:	18c00104 	addi	r3,r3,4
    f0e8:	193ffb1e 	bne	r3,r4,f0d8 <__alt_data_end+0xfc00f0d8>
    f0ec:	0005883a 	mov	r2,zero
    f0f0:	dfc00117 	ldw	ra,4(sp)
    f0f4:	dc000017 	ldw	r16,0(sp)
    f0f8:	dec00204 	addi	sp,sp,8
    f0fc:	f800283a 	ret
    f100:	00bfffc4 	movi	r2,-1
    f104:	003ffa06 	br	f0f0 <__alt_data_end+0xfc00f0f0>

0000f108 <_signal_r>:
    f108:	00c007c4 	movi	r3,31
    f10c:	19401536 	bltu	r3,r5,f164 <_signal_r+0x5c>
    f110:	2080b717 	ldw	r2,732(r4)
    f114:	defffc04 	addi	sp,sp,-16
    f118:	dc800215 	stw	r18,8(sp)
    f11c:	dc400115 	stw	r17,4(sp)
    f120:	dc000015 	stw	r16,0(sp)
    f124:	dfc00315 	stw	ra,12(sp)
    f128:	3023883a 	mov	r17,r6
    f12c:	2021883a 	mov	r16,r4
    f130:	2825883a 	mov	r18,r5
    f134:	10000f26 	beq	r2,zero,f174 <_signal_r+0x6c>
    f138:	948b883a 	add	r5,r18,r18
    f13c:	294b883a 	add	r5,r5,r5
    f140:	114b883a 	add	r5,r2,r5
    f144:	28800017 	ldw	r2,0(r5)
    f148:	2c400015 	stw	r17,0(r5)
    f14c:	dfc00317 	ldw	ra,12(sp)
    f150:	dc800217 	ldw	r18,8(sp)
    f154:	dc400117 	ldw	r17,4(sp)
    f158:	dc000017 	ldw	r16,0(sp)
    f15c:	dec00404 	addi	sp,sp,16
    f160:	f800283a 	ret
    f164:	00c00584 	movi	r3,22
    f168:	20c00015 	stw	r3,0(r4)
    f16c:	00bfffc4 	movi	r2,-1
    f170:	f800283a 	ret
    f174:	000f09c0 	call	f09c <_init_signal_r>
    f178:	1000021e 	bne	r2,zero,f184 <_signal_r+0x7c>
    f17c:	8080b717 	ldw	r2,732(r16)
    f180:	003fed06 	br	f138 <__alt_data_end+0xfc00f138>
    f184:	00bfffc4 	movi	r2,-1
    f188:	003ff006 	br	f14c <__alt_data_end+0xfc00f14c>

0000f18c <_raise_r>:
    f18c:	008007c4 	movi	r2,31
    f190:	11402936 	bltu	r2,r5,f238 <_raise_r+0xac>
    f194:	20c0b717 	ldw	r3,732(r4)
    f198:	defffd04 	addi	sp,sp,-12
    f19c:	dc400115 	stw	r17,4(sp)
    f1a0:	dc000015 	stw	r16,0(sp)
    f1a4:	dfc00215 	stw	ra,8(sp)
    f1a8:	2021883a 	mov	r16,r4
    f1ac:	2823883a 	mov	r17,r5
    f1b0:	18001726 	beq	r3,zero,f210 <_raise_r+0x84>
    f1b4:	2945883a 	add	r2,r5,r5
    f1b8:	1085883a 	add	r2,r2,r2
    f1bc:	1887883a 	add	r3,r3,r2
    f1c0:	19800017 	ldw	r6,0(r3)
    f1c4:	30001226 	beq	r6,zero,f210 <_raise_r+0x84>
    f1c8:	00800044 	movi	r2,1
    f1cc:	30800e26 	beq	r6,r2,f208 <_raise_r+0x7c>
    f1d0:	013fffc4 	movi	r4,-1
    f1d4:	31000926 	beq	r6,r4,f1fc <_raise_r+0x70>
    f1d8:	18000015 	stw	zero,0(r3)
    f1dc:	2809883a 	mov	r4,r5
    f1e0:	303ee83a 	callr	r6
    f1e4:	0005883a 	mov	r2,zero
    f1e8:	dfc00217 	ldw	ra,8(sp)
    f1ec:	dc400117 	ldw	r17,4(sp)
    f1f0:	dc000017 	ldw	r16,0(sp)
    f1f4:	dec00304 	addi	sp,sp,12
    f1f8:	f800283a 	ret
    f1fc:	00c00584 	movi	r3,22
    f200:	80c00015 	stw	r3,0(r16)
    f204:	003ff806 	br	f1e8 <__alt_data_end+0xfc00f1e8>
    f208:	0005883a 	mov	r2,zero
    f20c:	003ff606 	br	f1e8 <__alt_data_end+0xfc00f1e8>
    f210:	8009883a 	mov	r4,r16
    f214:	000f39c0 	call	f39c <_getpid_r>
    f218:	880d883a 	mov	r6,r17
    f21c:	100b883a 	mov	r5,r2
    f220:	8009883a 	mov	r4,r16
    f224:	dfc00217 	ldw	ra,8(sp)
    f228:	dc400117 	ldw	r17,4(sp)
    f22c:	dc000017 	ldw	r16,0(sp)
    f230:	dec00304 	addi	sp,sp,12
    f234:	000f3401 	jmpi	f340 <_kill_r>
    f238:	00800584 	movi	r2,22
    f23c:	20800015 	stw	r2,0(r4)
    f240:	00bfffc4 	movi	r2,-1
    f244:	f800283a 	ret

0000f248 <__sigtramp_r>:
    f248:	008007c4 	movi	r2,31
    f24c:	11402436 	bltu	r2,r5,f2e0 <__sigtramp_r+0x98>
    f250:	20c0b717 	ldw	r3,732(r4)
    f254:	defffd04 	addi	sp,sp,-12
    f258:	dc400115 	stw	r17,4(sp)
    f25c:	dc000015 	stw	r16,0(sp)
    f260:	dfc00215 	stw	ra,8(sp)
    f264:	2021883a 	mov	r16,r4
    f268:	2823883a 	mov	r17,r5
    f26c:	18001826 	beq	r3,zero,f2d0 <__sigtramp_r+0x88>
    f270:	8c45883a 	add	r2,r17,r17
    f274:	1085883a 	add	r2,r2,r2
    f278:	1885883a 	add	r2,r3,r2
    f27c:	10c00017 	ldw	r3,0(r2)
    f280:	18001126 	beq	r3,zero,f2c8 <__sigtramp_r+0x80>
    f284:	013fffc4 	movi	r4,-1
    f288:	19000d26 	beq	r3,r4,f2c0 <__sigtramp_r+0x78>
    f28c:	01000044 	movi	r4,1
    f290:	19000926 	beq	r3,r4,f2b8 <__sigtramp_r+0x70>
    f294:	10000015 	stw	zero,0(r2)
    f298:	8809883a 	mov	r4,r17
    f29c:	183ee83a 	callr	r3
    f2a0:	0005883a 	mov	r2,zero
    f2a4:	dfc00217 	ldw	ra,8(sp)
    f2a8:	dc400117 	ldw	r17,4(sp)
    f2ac:	dc000017 	ldw	r16,0(sp)
    f2b0:	dec00304 	addi	sp,sp,12
    f2b4:	f800283a 	ret
    f2b8:	008000c4 	movi	r2,3
    f2bc:	003ff906 	br	f2a4 <__alt_data_end+0xfc00f2a4>
    f2c0:	00800084 	movi	r2,2
    f2c4:	003ff706 	br	f2a4 <__alt_data_end+0xfc00f2a4>
    f2c8:	00800044 	movi	r2,1
    f2cc:	003ff506 	br	f2a4 <__alt_data_end+0xfc00f2a4>
    f2d0:	000f09c0 	call	f09c <_init_signal_r>
    f2d4:	1000041e 	bne	r2,zero,f2e8 <__sigtramp_r+0xa0>
    f2d8:	80c0b717 	ldw	r3,732(r16)
    f2dc:	003fe406 	br	f270 <__alt_data_end+0xfc00f270>
    f2e0:	00bfffc4 	movi	r2,-1
    f2e4:	f800283a 	ret
    f2e8:	00bfffc4 	movi	r2,-1
    f2ec:	003fed06 	br	f2a4 <__alt_data_end+0xfc00f2a4>

0000f2f0 <raise>:
    f2f0:	008000f4 	movhi	r2,3
    f2f4:	10b78704 	addi	r2,r2,-8676
    f2f8:	200b883a 	mov	r5,r4
    f2fc:	11000017 	ldw	r4,0(r2)
    f300:	000f18c1 	jmpi	f18c <_raise_r>

0000f304 <signal>:
    f304:	008000f4 	movhi	r2,3
    f308:	10b78704 	addi	r2,r2,-8676
    f30c:	280d883a 	mov	r6,r5
    f310:	200b883a 	mov	r5,r4
    f314:	11000017 	ldw	r4,0(r2)
    f318:	000f1081 	jmpi	f108 <_signal_r>

0000f31c <_init_signal>:
    f31c:	008000f4 	movhi	r2,3
    f320:	10b78704 	addi	r2,r2,-8676
    f324:	11000017 	ldw	r4,0(r2)
    f328:	000f09c1 	jmpi	f09c <_init_signal_r>

0000f32c <__sigtramp>:
    f32c:	008000f4 	movhi	r2,3
    f330:	10b78704 	addi	r2,r2,-8676
    f334:	200b883a 	mov	r5,r4
    f338:	11000017 	ldw	r4,0(r2)
    f33c:	000f2481 	jmpi	f248 <__sigtramp_r>

0000f340 <_kill_r>:
    f340:	defffd04 	addi	sp,sp,-12
    f344:	2805883a 	mov	r2,r5
    f348:	dc000015 	stw	r16,0(sp)
    f34c:	040000f4 	movhi	r16,3
    f350:	dc400115 	stw	r17,4(sp)
    f354:	84041b04 	addi	r16,r16,4204
    f358:	2023883a 	mov	r17,r4
    f35c:	300b883a 	mov	r5,r6
    f360:	1009883a 	mov	r4,r2
    f364:	dfc00215 	stw	ra,8(sp)
    f368:	80000015 	stw	zero,0(r16)
    f36c:	001f29c0 	call	1f29c <kill>
    f370:	00ffffc4 	movi	r3,-1
    f374:	10c00526 	beq	r2,r3,f38c <_kill_r+0x4c>
    f378:	dfc00217 	ldw	ra,8(sp)
    f37c:	dc400117 	ldw	r17,4(sp)
    f380:	dc000017 	ldw	r16,0(sp)
    f384:	dec00304 	addi	sp,sp,12
    f388:	f800283a 	ret
    f38c:	80c00017 	ldw	r3,0(r16)
    f390:	183ff926 	beq	r3,zero,f378 <__alt_data_end+0xfc00f378>
    f394:	88c00015 	stw	r3,0(r17)
    f398:	003ff706 	br	f378 <__alt_data_end+0xfc00f378>

0000f39c <_getpid_r>:
    f39c:	001f1581 	jmpi	1f158 <getpid>

0000f3a0 <_sprintf_r>:
    f3a0:	deffe404 	addi	sp,sp,-112
    f3a4:	2807883a 	mov	r3,r5
    f3a8:	dfc01a15 	stw	ra,104(sp)
    f3ac:	d9c01b15 	stw	r7,108(sp)
    f3b0:	00a00034 	movhi	r2,32768
    f3b4:	10bfffc4 	addi	r2,r2,-1
    f3b8:	02008204 	movi	r8,520
    f3bc:	d8800215 	stw	r2,8(sp)
    f3c0:	d8800515 	stw	r2,20(sp)
    f3c4:	d9c01b04 	addi	r7,sp,108
    f3c8:	d80b883a 	mov	r5,sp
    f3cc:	00bfffc4 	movi	r2,-1
    f3d0:	d8c00015 	stw	r3,0(sp)
    f3d4:	d8c00415 	stw	r3,16(sp)
    f3d8:	da00030d 	sth	r8,12(sp)
    f3dc:	d880038d 	sth	r2,14(sp)
    f3e0:	000f5d80 	call	f5d8 <___svfprintf_internal_r>
    f3e4:	d8c00017 	ldw	r3,0(sp)
    f3e8:	18000005 	stb	zero,0(r3)
    f3ec:	dfc01a17 	ldw	ra,104(sp)
    f3f0:	dec01c04 	addi	sp,sp,112
    f3f4:	f800283a 	ret

0000f3f8 <sprintf>:
    f3f8:	deffe304 	addi	sp,sp,-116
    f3fc:	2007883a 	mov	r3,r4
    f400:	dfc01a15 	stw	ra,104(sp)
    f404:	d9801b15 	stw	r6,108(sp)
    f408:	d9c01c15 	stw	r7,112(sp)
    f40c:	010000f4 	movhi	r4,3
    f410:	21378704 	addi	r4,r4,-8676
    f414:	21000017 	ldw	r4,0(r4)
    f418:	00a00034 	movhi	r2,32768
    f41c:	10bfffc4 	addi	r2,r2,-1
    f420:	280d883a 	mov	r6,r5
    f424:	02008204 	movi	r8,520
    f428:	d8800215 	stw	r2,8(sp)
    f42c:	d8800515 	stw	r2,20(sp)
    f430:	d9c01b04 	addi	r7,sp,108
    f434:	d80b883a 	mov	r5,sp
    f438:	00bfffc4 	movi	r2,-1
    f43c:	d8c00015 	stw	r3,0(sp)
    f440:	d8c00415 	stw	r3,16(sp)
    f444:	da00030d 	sth	r8,12(sp)
    f448:	d880038d 	sth	r2,14(sp)
    f44c:	000f5d80 	call	f5d8 <___svfprintf_internal_r>
    f450:	d8c00017 	ldw	r3,0(sp)
    f454:	18000005 	stb	zero,0(r3)
    f458:	dfc01a17 	ldw	ra,104(sp)
    f45c:	dec01d04 	addi	sp,sp,116
    f460:	f800283a 	ret

0000f464 <strcmp>:
    f464:	2144b03a 	or	r2,r4,r5
    f468:	108000cc 	andi	r2,r2,3
    f46c:	1000171e 	bne	r2,zero,f4cc <strcmp+0x68>
    f470:	20800017 	ldw	r2,0(r4)
    f474:	28c00017 	ldw	r3,0(r5)
    f478:	10c0141e 	bne	r2,r3,f4cc <strcmp+0x68>
    f47c:	027fbff4 	movhi	r9,65279
    f480:	4a7fbfc4 	addi	r9,r9,-257
    f484:	0086303a 	nor	r3,zero,r2
    f488:	02202074 	movhi	r8,32897
    f48c:	1245883a 	add	r2,r2,r9
    f490:	42202004 	addi	r8,r8,-32640
    f494:	10c4703a 	and	r2,r2,r3
    f498:	1204703a 	and	r2,r2,r8
    f49c:	10000226 	beq	r2,zero,f4a8 <strcmp+0x44>
    f4a0:	00002306 	br	f530 <strcmp+0xcc>
    f4a4:	1000221e 	bne	r2,zero,f530 <strcmp+0xcc>
    f4a8:	21000104 	addi	r4,r4,4
    f4ac:	20c00017 	ldw	r3,0(r4)
    f4b0:	29400104 	addi	r5,r5,4
    f4b4:	29800017 	ldw	r6,0(r5)
    f4b8:	1a4f883a 	add	r7,r3,r9
    f4bc:	00c4303a 	nor	r2,zero,r3
    f4c0:	3884703a 	and	r2,r7,r2
    f4c4:	1204703a 	and	r2,r2,r8
    f4c8:	19bff626 	beq	r3,r6,f4a4 <__alt_data_end+0xfc00f4a4>
    f4cc:	20800003 	ldbu	r2,0(r4)
    f4d0:	10c03fcc 	andi	r3,r2,255
    f4d4:	18c0201c 	xori	r3,r3,128
    f4d8:	18ffe004 	addi	r3,r3,-128
    f4dc:	18000c26 	beq	r3,zero,f510 <strcmp+0xac>
    f4e0:	29800007 	ldb	r6,0(r5)
    f4e4:	19800326 	beq	r3,r6,f4f4 <strcmp+0x90>
    f4e8:	00001306 	br	f538 <strcmp+0xd4>
    f4ec:	29800007 	ldb	r6,0(r5)
    f4f0:	11800b1e 	bne	r2,r6,f520 <strcmp+0xbc>
    f4f4:	21000044 	addi	r4,r4,1
    f4f8:	20c00003 	ldbu	r3,0(r4)
    f4fc:	29400044 	addi	r5,r5,1
    f500:	18803fcc 	andi	r2,r3,255
    f504:	1080201c 	xori	r2,r2,128
    f508:	10bfe004 	addi	r2,r2,-128
    f50c:	103ff71e 	bne	r2,zero,f4ec <__alt_data_end+0xfc00f4ec>
    f510:	0007883a 	mov	r3,zero
    f514:	28800003 	ldbu	r2,0(r5)
    f518:	1885c83a 	sub	r2,r3,r2
    f51c:	f800283a 	ret
    f520:	28800003 	ldbu	r2,0(r5)
    f524:	18c03fcc 	andi	r3,r3,255
    f528:	1885c83a 	sub	r2,r3,r2
    f52c:	f800283a 	ret
    f530:	0005883a 	mov	r2,zero
    f534:	f800283a 	ret
    f538:	10c03fcc 	andi	r3,r2,255
    f53c:	003ff506 	br	f514 <__alt_data_end+0xfc00f514>

0000f540 <strlen>:
    f540:	208000cc 	andi	r2,r4,3
    f544:	10002026 	beq	r2,zero,f5c8 <strlen+0x88>
    f548:	20800007 	ldb	r2,0(r4)
    f54c:	10002026 	beq	r2,zero,f5d0 <strlen+0x90>
    f550:	2005883a 	mov	r2,r4
    f554:	00000206 	br	f560 <strlen+0x20>
    f558:	10c00007 	ldb	r3,0(r2)
    f55c:	18001826 	beq	r3,zero,f5c0 <strlen+0x80>
    f560:	10800044 	addi	r2,r2,1
    f564:	10c000cc 	andi	r3,r2,3
    f568:	183ffb1e 	bne	r3,zero,f558 <__alt_data_end+0xfc00f558>
    f56c:	10c00017 	ldw	r3,0(r2)
    f570:	01ffbff4 	movhi	r7,65279
    f574:	39ffbfc4 	addi	r7,r7,-257
    f578:	00ca303a 	nor	r5,zero,r3
    f57c:	01a02074 	movhi	r6,32897
    f580:	19c7883a 	add	r3,r3,r7
    f584:	31a02004 	addi	r6,r6,-32640
    f588:	1946703a 	and	r3,r3,r5
    f58c:	1986703a 	and	r3,r3,r6
    f590:	1800091e 	bne	r3,zero,f5b8 <strlen+0x78>
    f594:	10800104 	addi	r2,r2,4
    f598:	10c00017 	ldw	r3,0(r2)
    f59c:	19cb883a 	add	r5,r3,r7
    f5a0:	00c6303a 	nor	r3,zero,r3
    f5a4:	28c6703a 	and	r3,r5,r3
    f5a8:	1986703a 	and	r3,r3,r6
    f5ac:	183ff926 	beq	r3,zero,f594 <__alt_data_end+0xfc00f594>
    f5b0:	00000106 	br	f5b8 <strlen+0x78>
    f5b4:	10800044 	addi	r2,r2,1
    f5b8:	10c00007 	ldb	r3,0(r2)
    f5bc:	183ffd1e 	bne	r3,zero,f5b4 <__alt_data_end+0xfc00f5b4>
    f5c0:	1105c83a 	sub	r2,r2,r4
    f5c4:	f800283a 	ret
    f5c8:	2005883a 	mov	r2,r4
    f5cc:	003fe706 	br	f56c <__alt_data_end+0xfc00f56c>
    f5d0:	0005883a 	mov	r2,zero
    f5d4:	f800283a 	ret

0000f5d8 <___svfprintf_internal_r>:
    f5d8:	deffb704 	addi	sp,sp,-292
    f5dc:	dfc04815 	stw	ra,288(sp)
    f5e0:	ddc04615 	stw	r23,280(sp)
    f5e4:	d9402d15 	stw	r5,180(sp)
    f5e8:	d9003915 	stw	r4,228(sp)
    f5ec:	302f883a 	mov	r23,r6
    f5f0:	d9c02e15 	stw	r7,184(sp)
    f5f4:	df004715 	stw	fp,284(sp)
    f5f8:	dd804515 	stw	r22,276(sp)
    f5fc:	dd404415 	stw	r21,272(sp)
    f600:	dd004315 	stw	r20,268(sp)
    f604:	dcc04215 	stw	r19,264(sp)
    f608:	dc804115 	stw	r18,260(sp)
    f60c:	dc404015 	stw	r17,256(sp)
    f610:	dc003f15 	stw	r16,252(sp)
    f614:	00167dc0 	call	167dc <_localeconv_r>
    f618:	10800017 	ldw	r2,0(r2)
    f61c:	1009883a 	mov	r4,r2
    f620:	d8803415 	stw	r2,208(sp)
    f624:	000f5400 	call	f540 <strlen>
    f628:	d8c02d17 	ldw	r3,180(sp)
    f62c:	d8803815 	stw	r2,224(sp)
    f630:	1880030b 	ldhu	r2,12(r3)
    f634:	1080200c 	andi	r2,r2,128
    f638:	10000226 	beq	r2,zero,f644 <___svfprintf_internal_r+0x6c>
    f63c:	18800417 	ldw	r2,16(r3)
    f640:	1006b126 	beq	r2,zero,11108 <___svfprintf_internal_r+0x1b30>
    f644:	dcc03917 	ldw	r19,228(sp)
    f648:	d8c00404 	addi	r3,sp,16
    f64c:	054000f4 	movhi	r21,3
    f650:	d9001e04 	addi	r4,sp,120
    f654:	ad6a9684 	addi	r21,r21,-21926
    f658:	d8c01e15 	stw	r3,120(sp)
    f65c:	d8002015 	stw	zero,128(sp)
    f660:	d8001f15 	stw	zero,124(sp)
    f664:	d8003315 	stw	zero,204(sp)
    f668:	d8003615 	stw	zero,216(sp)
    f66c:	d8003715 	stw	zero,220(sp)
    f670:	1811883a 	mov	r8,r3
    f674:	d8003a15 	stw	zero,232(sp)
    f678:	d8003b15 	stw	zero,236(sp)
    f67c:	d8002f15 	stw	zero,188(sp)
    f680:	d9002815 	stw	r4,160(sp)
    f684:	b8800007 	ldb	r2,0(r23)
    f688:	10027726 	beq	r2,zero,10068 <___svfprintf_internal_r+0xa90>
    f68c:	00c00944 	movi	r3,37
    f690:	b823883a 	mov	r17,r23
    f694:	10c0021e 	bne	r2,r3,f6a0 <___svfprintf_internal_r+0xc8>
    f698:	00001406 	br	f6ec <___svfprintf_internal_r+0x114>
    f69c:	10c00326 	beq	r2,r3,f6ac <___svfprintf_internal_r+0xd4>
    f6a0:	8c400044 	addi	r17,r17,1
    f6a4:	88800007 	ldb	r2,0(r17)
    f6a8:	103ffc1e 	bne	r2,zero,f69c <__alt_data_end+0xfc00f69c>
    f6ac:	8de1c83a 	sub	r16,r17,r23
    f6b0:	80000e26 	beq	r16,zero,f6ec <___svfprintf_internal_r+0x114>
    f6b4:	d8c02017 	ldw	r3,128(sp)
    f6b8:	d8801f17 	ldw	r2,124(sp)
    f6bc:	45c00015 	stw	r23,0(r8)
    f6c0:	1c07883a 	add	r3,r3,r16
    f6c4:	10800044 	addi	r2,r2,1
    f6c8:	d8c02015 	stw	r3,128(sp)
    f6cc:	44000115 	stw	r16,4(r8)
    f6d0:	d8801f15 	stw	r2,124(sp)
    f6d4:	00c001c4 	movi	r3,7
    f6d8:	18809916 	blt	r3,r2,f940 <___svfprintf_internal_r+0x368>
    f6dc:	42000204 	addi	r8,r8,8
    f6e0:	d9402f17 	ldw	r5,188(sp)
    f6e4:	2c0b883a 	add	r5,r5,r16
    f6e8:	d9402f15 	stw	r5,188(sp)
    f6ec:	88800007 	ldb	r2,0(r17)
    f6f0:	10009a26 	beq	r2,zero,f95c <___svfprintf_internal_r+0x384>
    f6f4:	8dc00044 	addi	r23,r17,1
    f6f8:	8c400047 	ldb	r17,1(r17)
    f6fc:	0021883a 	mov	r16,zero
    f700:	00bfffc4 	movi	r2,-1
    f704:	0025883a 	mov	r18,zero
    f708:	dc002905 	stb	r16,164(sp)
    f70c:	d8002785 	stb	zero,158(sp)
    f710:	d8002b05 	stb	zero,172(sp)
    f714:	d8802a15 	stw	r2,168(sp)
    f718:	d8003115 	stw	zero,196(sp)
    f71c:	05001604 	movi	r20,88
    f720:	05800244 	movi	r22,9
    f724:	4039883a 	mov	fp,r8
    f728:	9021883a 	mov	r16,r18
    f72c:	bdc00044 	addi	r23,r23,1
    f730:	88bff804 	addi	r2,r17,-32
    f734:	a0831e36 	bltu	r20,r2,103b0 <___svfprintf_internal_r+0xdd8>
    f738:	100490ba 	slli	r2,r2,2
    f73c:	00c00074 	movhi	r3,1
    f740:	18fdd404 	addi	r3,r3,-2224
    f744:	10c5883a 	add	r2,r2,r3
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	1000683a 	jmp	r2
    f750:	000102f8 	rdprs	zero,zero,1035
    f754:	000103b0 	cmpltui	zero,zero,1038
    f758:	000103b0 	cmpltui	zero,zero,1038
    f75c:	000102ec 	andhi	zero,zero,1035
    f760:	000103b0 	cmpltui	zero,zero,1038
    f764:	000103b0 	cmpltui	zero,zero,1038
    f768:	000103b0 	cmpltui	zero,zero,1038
    f76c:	000103b0 	cmpltui	zero,zero,1038
    f770:	000103b0 	cmpltui	zero,zero,1038
    f774:	000103b0 	cmpltui	zero,zero,1038
    f778:	0000f9b8 	rdprs	zero,zero,998
    f77c:	000101fc 	xorhi	zero,zero,1031
    f780:	000103b0 	cmpltui	zero,zero,1038
    f784:	0000f8c4 	movi	zero,995
    f788:	0000f9dc 	xori	zero,zero,999
    f78c:	000103b0 	cmpltui	zero,zero,1038
    f790:	0000fa68 	cmpgeui	zero,zero,1001
    f794:	0000fa2c 	andhi	zero,zero,1000
    f798:	0000fa2c 	andhi	zero,zero,1000
    f79c:	0000fa2c 	andhi	zero,zero,1000
    f7a0:	0000fa2c 	andhi	zero,zero,1000
    f7a4:	0000fa2c 	andhi	zero,zero,1000
    f7a8:	0000fa2c 	andhi	zero,zero,1000
    f7ac:	0000fa2c 	andhi	zero,zero,1000
    f7b0:	0000fa2c 	andhi	zero,zero,1000
    f7b4:	0000fa2c 	andhi	zero,zero,1000
    f7b8:	000103b0 	cmpltui	zero,zero,1038
    f7bc:	000103b0 	cmpltui	zero,zero,1038
    f7c0:	000103b0 	cmpltui	zero,zero,1038
    f7c4:	000103b0 	cmpltui	zero,zero,1038
    f7c8:	000103b0 	cmpltui	zero,zero,1038
    f7cc:	000103b0 	cmpltui	zero,zero,1038
    f7d0:	000103b0 	cmpltui	zero,zero,1038
    f7d4:	000103b0 	cmpltui	zero,zero,1038
    f7d8:	000103b0 	cmpltui	zero,zero,1038
    f7dc:	000103b0 	cmpltui	zero,zero,1038
    f7e0:	0000fb2c 	andhi	zero,zero,1004
    f7e4:	0000fa74 	movhi	zero,1001
    f7e8:	000103b0 	cmpltui	zero,zero,1038
    f7ec:	0000fa74 	movhi	zero,1001
    f7f0:	000103b0 	cmpltui	zero,zero,1038
    f7f4:	000103b0 	cmpltui	zero,zero,1038
    f7f8:	000103b0 	cmpltui	zero,zero,1038
    f7fc:	000103b0 	cmpltui	zero,zero,1038
    f800:	0000fb20 	cmpeqi	zero,zero,1004
    f804:	000103b0 	cmpltui	zero,zero,1038
    f808:	000103b0 	cmpltui	zero,zero,1038
    f80c:	0000fbf4 	movhi	zero,1007
    f810:	000103b0 	cmpltui	zero,zero,1038
    f814:	000103b0 	cmpltui	zero,zero,1038
    f818:	000103b0 	cmpltui	zero,zero,1038
    f81c:	000103b0 	cmpltui	zero,zero,1038
    f820:	000103b0 	cmpltui	zero,zero,1038
    f824:	00010070 	cmpltui	zero,zero,1025
    f828:	000103b0 	cmpltui	zero,zero,1038
    f82c:	000103b0 	cmpltui	zero,zero,1038
    f830:	000100dc 	xori	zero,zero,1027
    f834:	000103b0 	cmpltui	zero,zero,1038
    f838:	000103b0 	cmpltui	zero,zero,1038
    f83c:	000103b0 	cmpltui	zero,zero,1038
    f840:	000103b0 	cmpltui	zero,zero,1038
    f844:	000103b0 	cmpltui	zero,zero,1038
    f848:	000103b0 	cmpltui	zero,zero,1038
    f84c:	000103b0 	cmpltui	zero,zero,1038
    f850:	000103b0 	cmpltui	zero,zero,1038
    f854:	000103b0 	cmpltui	zero,zero,1038
    f858:	000103b0 	cmpltui	zero,zero,1038
    f85c:	00010198 	cmpnei	zero,zero,1030
    f860:	00010318 	cmpnei	zero,zero,1036
    f864:	0000fa74 	movhi	zero,1001
    f868:	0000fa74 	movhi	zero,1001
    f86c:	0000fa74 	movhi	zero,1001
    f870:	0001038c 	andi	zero,zero,1038
    f874:	00010318 	cmpnei	zero,zero,1036
    f878:	000103b0 	cmpltui	zero,zero,1038
    f87c:	000103b0 	cmpltui	zero,zero,1038
    f880:	00010338 	rdprs	zero,zero,1036
    f884:	000103b0 	cmpltui	zero,zero,1038
    f888:	0001034c 	andi	zero,zero,1037
    f88c:	000101dc 	xori	zero,zero,1031
    f890:	0000f8d0 	cmplti	zero,zero,995
    f894:	00010214 	movui	zero,1032
    f898:	000103b0 	cmpltui	zero,zero,1038
    f89c:	00010220 	cmpeqi	zero,zero,1032
    f8a0:	000103b0 	cmpltui	zero,zero,1038
    f8a4:	00010284 	movi	zero,1034
    f8a8:	000103b0 	cmpltui	zero,zero,1038
    f8ac:	000103b0 	cmpltui	zero,zero,1038
    f8b0:	000102a4 	muli	zero,zero,1034
    f8b4:	d8c03117 	ldw	r3,196(sp)
    f8b8:	d8802e15 	stw	r2,184(sp)
    f8bc:	00c7c83a 	sub	r3,zero,r3
    f8c0:	d8c03115 	stw	r3,196(sp)
    f8c4:	84000114 	ori	r16,r16,4
    f8c8:	bc400007 	ldb	r17,0(r23)
    f8cc:	003f9706 	br	f72c <__alt_data_end+0xfc00f72c>
    f8d0:	00800c04 	movi	r2,48
    f8d4:	d8802705 	stb	r2,156(sp)
    f8d8:	00801e04 	movi	r2,120
    f8dc:	d8802745 	stb	r2,157(sp)
    f8e0:	d9002a17 	ldw	r4,168(sp)
    f8e4:	d8802e17 	ldw	r2,184(sp)
    f8e8:	d8002785 	stb	zero,158(sp)
    f8ec:	e011883a 	mov	r8,fp
    f8f0:	10c00104 	addi	r3,r2,4
    f8f4:	15000017 	ldw	r20,0(r2)
    f8f8:	002d883a 	mov	r22,zero
    f8fc:	80800094 	ori	r2,r16,2
    f900:	2002b616 	blt	r4,zero,103dc <___svfprintf_internal_r+0xe04>
    f904:	00bfdfc4 	movi	r2,-129
    f908:	80a4703a 	and	r18,r16,r2
    f90c:	d8c02e15 	stw	r3,184(sp)
    f910:	94800094 	ori	r18,r18,2
    f914:	a002a01e 	bne	r20,zero,10398 <___svfprintf_internal_r+0xdc0>
    f918:	014000f4 	movhi	r5,3
    f91c:	296a8f04 	addi	r5,r5,-21956
    f920:	d9403a15 	stw	r5,232(sp)
    f924:	04401e04 	movi	r17,120
    f928:	d8c02a17 	ldw	r3,168(sp)
    f92c:	0039883a 	mov	fp,zero
    f930:	1801e626 	beq	r3,zero,100cc <___svfprintf_internal_r+0xaf4>
    f934:	0029883a 	mov	r20,zero
    f938:	002d883a 	mov	r22,zero
    f93c:	00020506 	br	10154 <___svfprintf_internal_r+0xb7c>
    f940:	d9402d17 	ldw	r5,180(sp)
    f944:	d9801e04 	addi	r6,sp,120
    f948:	9809883a 	mov	r4,r19
    f94c:	001853c0 	call	1853c <__ssprint_r>
    f950:	1000081e 	bne	r2,zero,f974 <___svfprintf_internal_r+0x39c>
    f954:	da000404 	addi	r8,sp,16
    f958:	003f6106 	br	f6e0 <__alt_data_end+0xfc00f6e0>
    f95c:	d8802017 	ldw	r2,128(sp)
    f960:	10000426 	beq	r2,zero,f974 <___svfprintf_internal_r+0x39c>
    f964:	d9402d17 	ldw	r5,180(sp)
    f968:	d9003917 	ldw	r4,228(sp)
    f96c:	d9801e04 	addi	r6,sp,120
    f970:	001853c0 	call	1853c <__ssprint_r>
    f974:	d8802d17 	ldw	r2,180(sp)
    f978:	10c0030b 	ldhu	r3,12(r2)
    f97c:	d8802f17 	ldw	r2,188(sp)
    f980:	18c0100c 	andi	r3,r3,64
    f984:	1806251e 	bne	r3,zero,1121c <___svfprintf_internal_r+0x1c44>
    f988:	dfc04817 	ldw	ra,288(sp)
    f98c:	df004717 	ldw	fp,284(sp)
    f990:	ddc04617 	ldw	r23,280(sp)
    f994:	dd804517 	ldw	r22,276(sp)
    f998:	dd404417 	ldw	r21,272(sp)
    f99c:	dd004317 	ldw	r20,268(sp)
    f9a0:	dcc04217 	ldw	r19,264(sp)
    f9a4:	dc804117 	ldw	r18,260(sp)
    f9a8:	dc404017 	ldw	r17,256(sp)
    f9ac:	dc003f17 	ldw	r16,252(sp)
    f9b0:	dec04904 	addi	sp,sp,292
    f9b4:	f800283a 	ret
    f9b8:	d9002e17 	ldw	r4,184(sp)
    f9bc:	d9402e17 	ldw	r5,184(sp)
    f9c0:	21000017 	ldw	r4,0(r4)
    f9c4:	28800104 	addi	r2,r5,4
    f9c8:	d9003115 	stw	r4,196(sp)
    f9cc:	203fb916 	blt	r4,zero,f8b4 <__alt_data_end+0xfc00f8b4>
    f9d0:	d8802e15 	stw	r2,184(sp)
    f9d4:	bc400007 	ldb	r17,0(r23)
    f9d8:	003f5406 	br	f72c <__alt_data_end+0xfc00f72c>
    f9dc:	bc400007 	ldb	r17,0(r23)
    f9e0:	01000a84 	movi	r4,42
    f9e4:	b8c00044 	addi	r3,r23,1
    f9e8:	89076926 	beq	r17,r4,11790 <___svfprintf_internal_r+0x21b8>
    f9ec:	8cbff404 	addi	r18,r17,-48
    f9f0:	b486b936 	bltu	r22,r18,114d8 <___svfprintf_internal_r+0x1f00>
    f9f4:	0009883a 	mov	r4,zero
    f9f8:	1823883a 	mov	r17,r3
    f9fc:	01400284 	movi	r5,10
    fa00:	000cec40 	call	cec4 <__mulsi3>
    fa04:	88c00007 	ldb	r3,0(r17)
    fa08:	1489883a 	add	r4,r2,r18
    fa0c:	8dc00044 	addi	r23,r17,1
    fa10:	1cbff404 	addi	r18,r3,-48
    fa14:	b823883a 	mov	r17,r23
    fa18:	b4bff82e 	bgeu	r22,r18,f9fc <__alt_data_end+0xfc00f9fc>
    fa1c:	1823883a 	mov	r17,r3
    fa20:	20060416 	blt	r4,zero,11234 <___svfprintf_internal_r+0x1c5c>
    fa24:	d9002a15 	stw	r4,168(sp)
    fa28:	003f4106 	br	f730 <__alt_data_end+0xfc00f730>
    fa2c:	8cbff404 	addi	r18,r17,-48
    fa30:	d8003115 	stw	zero,196(sp)
    fa34:	0009883a 	mov	r4,zero
    fa38:	b823883a 	mov	r17,r23
    fa3c:	01400284 	movi	r5,10
    fa40:	000cec40 	call	cec4 <__mulsi3>
    fa44:	88c00007 	ldb	r3,0(r17)
    fa48:	9089883a 	add	r4,r18,r2
    fa4c:	bdc00044 	addi	r23,r23,1
    fa50:	1cbff404 	addi	r18,r3,-48
    fa54:	b823883a 	mov	r17,r23
    fa58:	b4bff82e 	bgeu	r22,r18,fa3c <__alt_data_end+0xfc00fa3c>
    fa5c:	1823883a 	mov	r17,r3
    fa60:	d9003115 	stw	r4,196(sp)
    fa64:	003f3206 	br	f730 <__alt_data_end+0xfc00f730>
    fa68:	84002014 	ori	r16,r16,128
    fa6c:	bc400007 	ldb	r17,0(r23)
    fa70:	003f2e06 	br	f72c <__alt_data_end+0xfc00f72c>
    fa74:	8025883a 	mov	r18,r16
    fa78:	dc002903 	ldbu	r16,164(sp)
    fa7c:	e011883a 	mov	r8,fp
    fa80:	84003fcc 	andi	r16,r16,255
    fa84:	8007721e 	bne	r16,zero,11850 <___svfprintf_internal_r+0x2278>
    fa88:	9080020c 	andi	r2,r18,8
    fa8c:	1004a526 	beq	r2,zero,10d24 <___svfprintf_internal_r+0x174c>
    fa90:	d9002e17 	ldw	r4,184(sp)
    fa94:	d9402e17 	ldw	r5,184(sp)
    fa98:	d8802e17 	ldw	r2,184(sp)
    fa9c:	21000017 	ldw	r4,0(r4)
    faa0:	29400117 	ldw	r5,4(r5)
    faa4:	10800204 	addi	r2,r2,8
    faa8:	d9003615 	stw	r4,216(sp)
    faac:	d9403715 	stw	r5,220(sp)
    fab0:	d8802e15 	stw	r2,184(sp)
    fab4:	d9003617 	ldw	r4,216(sp)
    fab8:	d9403717 	ldw	r5,220(sp)
    fabc:	da003e15 	stw	r8,248(sp)
    fac0:	04000044 	movi	r16,1
    fac4:	001838c0 	call	1838c <__fpclassifyd>
    fac8:	da003e17 	ldw	r8,248(sp)
    facc:	1404731e 	bne	r2,r16,10c9c <___svfprintf_internal_r+0x16c4>
    fad0:	d9003617 	ldw	r4,216(sp)
    fad4:	d9403717 	ldw	r5,220(sp)
    fad8:	000d883a 	mov	r6,zero
    fadc:	000f883a 	mov	r7,zero
    fae0:	001da900 	call	1da90 <__ledf2>
    fae4:	da003e17 	ldw	r8,248(sp)
    fae8:	10061b16 	blt	r2,zero,11358 <___svfprintf_internal_r+0x1d80>
    faec:	df002783 	ldbu	fp,158(sp)
    faf0:	008011c4 	movi	r2,71
    faf4:	1445810e 	bge	r2,r17,110fc <___svfprintf_internal_r+0x1b24>
    faf8:	040000f4 	movhi	r16,3
    fafc:	842a8704 	addi	r16,r16,-21988
    fb00:	00c000c4 	movi	r3,3
    fb04:	00bfdfc4 	movi	r2,-129
    fb08:	d8c02915 	stw	r3,164(sp)
    fb0c:	90a4703a 	and	r18,r18,r2
    fb10:	d8c02b15 	stw	r3,172(sp)
    fb14:	d8002a15 	stw	zero,168(sp)
    fb18:	d8003215 	stw	zero,200(sp)
    fb1c:	00006c06 	br	fcd0 <___svfprintf_internal_r+0x6f8>
    fb20:	84000214 	ori	r16,r16,8
    fb24:	bc400007 	ldb	r17,0(r23)
    fb28:	003f0006 	br	f72c <__alt_data_end+0xfc00f72c>
    fb2c:	8025883a 	mov	r18,r16
    fb30:	dc002903 	ldbu	r16,164(sp)
    fb34:	e011883a 	mov	r8,fp
    fb38:	84003fcc 	andi	r16,r16,255
    fb3c:	80073f1e 	bne	r16,zero,1183c <___svfprintf_internal_r+0x2264>
    fb40:	94800414 	ori	r18,r18,16
    fb44:	9080080c 	andi	r2,r18,32
    fb48:	1003bb26 	beq	r2,zero,10a38 <___svfprintf_internal_r+0x1460>
    fb4c:	d9002e17 	ldw	r4,184(sp)
    fb50:	20800117 	ldw	r2,4(r4)
    fb54:	25000017 	ldw	r20,0(r4)
    fb58:	21000204 	addi	r4,r4,8
    fb5c:	d9002e15 	stw	r4,184(sp)
    fb60:	102d883a 	mov	r22,r2
    fb64:	1003bd16 	blt	r2,zero,10a5c <___svfprintf_internal_r+0x1484>
    fb68:	d9002a17 	ldw	r4,168(sp)
    fb6c:	df002783 	ldbu	fp,158(sp)
    fb70:	2003d016 	blt	r4,zero,10ab4 <___svfprintf_internal_r+0x14dc>
    fb74:	00ffdfc4 	movi	r3,-129
    fb78:	a584b03a 	or	r2,r20,r22
    fb7c:	90e4703a 	and	r18,r18,r3
    fb80:	10015026 	beq	r2,zero,100c4 <___svfprintf_internal_r+0xaec>
    fb84:	b0037026 	beq	r22,zero,10948 <___svfprintf_internal_r+0x1370>
    fb88:	dc402915 	stw	r17,164(sp)
    fb8c:	dc001e04 	addi	r16,sp,120
    fb90:	b023883a 	mov	r17,r22
    fb94:	402d883a 	mov	r22,r8
    fb98:	a009883a 	mov	r4,r20
    fb9c:	880b883a 	mov	r5,r17
    fba0:	01800284 	movi	r6,10
    fba4:	000f883a 	mov	r7,zero
    fba8:	001c0ec0 	call	1c0ec <__umoddi3>
    fbac:	10800c04 	addi	r2,r2,48
    fbb0:	843fffc4 	addi	r16,r16,-1
    fbb4:	a009883a 	mov	r4,r20
    fbb8:	880b883a 	mov	r5,r17
    fbbc:	80800005 	stb	r2,0(r16)
    fbc0:	01800284 	movi	r6,10
    fbc4:	000f883a 	mov	r7,zero
    fbc8:	001baf00 	call	1baf0 <__udivdi3>
    fbcc:	1029883a 	mov	r20,r2
    fbd0:	10c4b03a 	or	r2,r2,r3
    fbd4:	1823883a 	mov	r17,r3
    fbd8:	103fef1e 	bne	r2,zero,fb98 <__alt_data_end+0xfc00fb98>
    fbdc:	d8c02817 	ldw	r3,160(sp)
    fbe0:	dc402917 	ldw	r17,164(sp)
    fbe4:	b011883a 	mov	r8,r22
    fbe8:	1c07c83a 	sub	r3,r3,r16
    fbec:	d8c02b15 	stw	r3,172(sp)
    fbf0:	00003106 	br	fcb8 <___svfprintf_internal_r+0x6e0>
    fbf4:	8025883a 	mov	r18,r16
    fbf8:	dc002903 	ldbu	r16,164(sp)
    fbfc:	e011883a 	mov	r8,fp
    fc00:	84003fcc 	andi	r16,r16,255
    fc04:	80070a1e 	bne	r16,zero,11830 <___svfprintf_internal_r+0x2258>
    fc08:	94800414 	ori	r18,r18,16
    fc0c:	9080080c 	andi	r2,r18,32
    fc10:	1002f626 	beq	r2,zero,107ec <___svfprintf_internal_r+0x1214>
    fc14:	d9002e17 	ldw	r4,184(sp)
    fc18:	d9402a17 	ldw	r5,168(sp)
    fc1c:	d8002785 	stb	zero,158(sp)
    fc20:	20800204 	addi	r2,r4,8
    fc24:	25000017 	ldw	r20,0(r4)
    fc28:	25800117 	ldw	r22,4(r4)
    fc2c:	28043716 	blt	r5,zero,10d0c <___svfprintf_internal_r+0x1734>
    fc30:	013fdfc4 	movi	r4,-129
    fc34:	a586b03a 	or	r3,r20,r22
    fc38:	d8802e15 	stw	r2,184(sp)
    fc3c:	9124703a 	and	r18,r18,r4
    fc40:	1802f71e 	bne	r3,zero,10820 <___svfprintf_internal_r+0x1248>
    fc44:	d9402a17 	ldw	r5,168(sp)
    fc48:	0039883a 	mov	fp,zero
    fc4c:	2806df26 	beq	r5,zero,117cc <___svfprintf_internal_r+0x21f4>
    fc50:	0029883a 	mov	r20,zero
    fc54:	002d883a 	mov	r22,zero
    fc58:	dc001e04 	addi	r16,sp,120
    fc5c:	a006d0fa 	srli	r3,r20,3
    fc60:	b008977a 	slli	r4,r22,29
    fc64:	b02cd0fa 	srli	r22,r22,3
    fc68:	a50001cc 	andi	r20,r20,7
    fc6c:	a0800c04 	addi	r2,r20,48
    fc70:	843fffc4 	addi	r16,r16,-1
    fc74:	20e8b03a 	or	r20,r4,r3
    fc78:	80800005 	stb	r2,0(r16)
    fc7c:	a586b03a 	or	r3,r20,r22
    fc80:	183ff61e 	bne	r3,zero,fc5c <__alt_data_end+0xfc00fc5c>
    fc84:	90c0004c 	andi	r3,r18,1
    fc88:	18013f26 	beq	r3,zero,10188 <___svfprintf_internal_r+0xbb0>
    fc8c:	10803fcc 	andi	r2,r2,255
    fc90:	1080201c 	xori	r2,r2,128
    fc94:	10bfe004 	addi	r2,r2,-128
    fc98:	00c00c04 	movi	r3,48
    fc9c:	10c13a26 	beq	r2,r3,10188 <___svfprintf_internal_r+0xbb0>
    fca0:	80ffffc5 	stb	r3,-1(r16)
    fca4:	d8c02817 	ldw	r3,160(sp)
    fca8:	80bfffc4 	addi	r2,r16,-1
    fcac:	1021883a 	mov	r16,r2
    fcb0:	1887c83a 	sub	r3,r3,r2
    fcb4:	d8c02b15 	stw	r3,172(sp)
    fcb8:	d8802b17 	ldw	r2,172(sp)
    fcbc:	d9002a17 	ldw	r4,168(sp)
    fcc0:	1100010e 	bge	r2,r4,fcc8 <___svfprintf_internal_r+0x6f0>
    fcc4:	2005883a 	mov	r2,r4
    fcc8:	d8802915 	stw	r2,164(sp)
    fccc:	d8003215 	stw	zero,200(sp)
    fcd0:	e7003fcc 	andi	fp,fp,255
    fcd4:	e700201c 	xori	fp,fp,128
    fcd8:	e73fe004 	addi	fp,fp,-128
    fcdc:	e0000326 	beq	fp,zero,fcec <___svfprintf_internal_r+0x714>
    fce0:	d8c02917 	ldw	r3,164(sp)
    fce4:	18c00044 	addi	r3,r3,1
    fce8:	d8c02915 	stw	r3,164(sp)
    fcec:	90c0008c 	andi	r3,r18,2
    fcf0:	d8c02c15 	stw	r3,176(sp)
    fcf4:	18000326 	beq	r3,zero,fd04 <___svfprintf_internal_r+0x72c>
    fcf8:	d8c02917 	ldw	r3,164(sp)
    fcfc:	18c00084 	addi	r3,r3,2
    fd00:	d8c02915 	stw	r3,164(sp)
    fd04:	90c0210c 	andi	r3,r18,132
    fd08:	d8c03015 	stw	r3,192(sp)
    fd0c:	1801c31e 	bne	r3,zero,1041c <___svfprintf_internal_r+0xe44>
    fd10:	d9003117 	ldw	r4,196(sp)
    fd14:	d8c02917 	ldw	r3,164(sp)
    fd18:	20e9c83a 	sub	r20,r4,r3
    fd1c:	0501bf0e 	bge	zero,r20,1041c <___svfprintf_internal_r+0xe44>
    fd20:	02400404 	movi	r9,16
    fd24:	d8c02017 	ldw	r3,128(sp)
    fd28:	d8801f17 	ldw	r2,124(sp)
    fd2c:	4d053d0e 	bge	r9,r20,11224 <___svfprintf_internal_r+0x1c4c>
    fd30:	014000f4 	movhi	r5,3
    fd34:	296a9a84 	addi	r5,r5,-21910
    fd38:	dc403c15 	stw	r17,240(sp)
    fd3c:	d9403515 	stw	r5,212(sp)
    fd40:	a023883a 	mov	r17,r20
    fd44:	482d883a 	mov	r22,r9
    fd48:	9029883a 	mov	r20,r18
    fd4c:	070001c4 	movi	fp,7
    fd50:	8025883a 	mov	r18,r16
    fd54:	dc002d17 	ldw	r16,180(sp)
    fd58:	00000306 	br	fd68 <___svfprintf_internal_r+0x790>
    fd5c:	8c7ffc04 	addi	r17,r17,-16
    fd60:	42000204 	addi	r8,r8,8
    fd64:	b440130e 	bge	r22,r17,fdb4 <___svfprintf_internal_r+0x7dc>
    fd68:	010000f4 	movhi	r4,3
    fd6c:	18c00404 	addi	r3,r3,16
    fd70:	10800044 	addi	r2,r2,1
    fd74:	212a9a84 	addi	r4,r4,-21910
    fd78:	41000015 	stw	r4,0(r8)
    fd7c:	45800115 	stw	r22,4(r8)
    fd80:	d8c02015 	stw	r3,128(sp)
    fd84:	d8801f15 	stw	r2,124(sp)
    fd88:	e0bff40e 	bge	fp,r2,fd5c <__alt_data_end+0xfc00fd5c>
    fd8c:	d9801e04 	addi	r6,sp,120
    fd90:	800b883a 	mov	r5,r16
    fd94:	9809883a 	mov	r4,r19
    fd98:	001853c0 	call	1853c <__ssprint_r>
    fd9c:	103ef51e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
    fda0:	8c7ffc04 	addi	r17,r17,-16
    fda4:	d8c02017 	ldw	r3,128(sp)
    fda8:	d8801f17 	ldw	r2,124(sp)
    fdac:	da000404 	addi	r8,sp,16
    fdb0:	b47fed16 	blt	r22,r17,fd68 <__alt_data_end+0xfc00fd68>
    fdb4:	9021883a 	mov	r16,r18
    fdb8:	a025883a 	mov	r18,r20
    fdbc:	8829883a 	mov	r20,r17
    fdc0:	dc403c17 	ldw	r17,240(sp)
    fdc4:	d9403517 	ldw	r5,212(sp)
    fdc8:	a0c7883a 	add	r3,r20,r3
    fdcc:	10800044 	addi	r2,r2,1
    fdd0:	41400015 	stw	r5,0(r8)
    fdd4:	45000115 	stw	r20,4(r8)
    fdd8:	d8c02015 	stw	r3,128(sp)
    fddc:	d8801f15 	stw	r2,124(sp)
    fde0:	010001c4 	movi	r4,7
    fde4:	2082c116 	blt	r4,r2,108ec <___svfprintf_internal_r+0x1314>
    fde8:	df002787 	ldb	fp,158(sp)
    fdec:	42000204 	addi	r8,r8,8
    fdf0:	e0000c26 	beq	fp,zero,fe24 <___svfprintf_internal_r+0x84c>
    fdf4:	d8801f17 	ldw	r2,124(sp)
    fdf8:	d9002784 	addi	r4,sp,158
    fdfc:	18c00044 	addi	r3,r3,1
    fe00:	10800044 	addi	r2,r2,1
    fe04:	41000015 	stw	r4,0(r8)
    fe08:	01000044 	movi	r4,1
    fe0c:	41000115 	stw	r4,4(r8)
    fe10:	d8c02015 	stw	r3,128(sp)
    fe14:	d8801f15 	stw	r2,124(sp)
    fe18:	010001c4 	movi	r4,7
    fe1c:	20825a16 	blt	r4,r2,10788 <___svfprintf_internal_r+0x11b0>
    fe20:	42000204 	addi	r8,r8,8
    fe24:	d8802c17 	ldw	r2,176(sp)
    fe28:	10000c26 	beq	r2,zero,fe5c <___svfprintf_internal_r+0x884>
    fe2c:	d8801f17 	ldw	r2,124(sp)
    fe30:	d9002704 	addi	r4,sp,156
    fe34:	18c00084 	addi	r3,r3,2
    fe38:	10800044 	addi	r2,r2,1
    fe3c:	41000015 	stw	r4,0(r8)
    fe40:	01000084 	movi	r4,2
    fe44:	41000115 	stw	r4,4(r8)
    fe48:	d8c02015 	stw	r3,128(sp)
    fe4c:	d8801f15 	stw	r2,124(sp)
    fe50:	010001c4 	movi	r4,7
    fe54:	20825416 	blt	r4,r2,107a8 <___svfprintf_internal_r+0x11d0>
    fe58:	42000204 	addi	r8,r8,8
    fe5c:	d9003017 	ldw	r4,192(sp)
    fe60:	00802004 	movi	r2,128
    fe64:	2081b926 	beq	r4,r2,1054c <___svfprintf_internal_r+0xf74>
    fe68:	d9402a17 	ldw	r5,168(sp)
    fe6c:	d8802b17 	ldw	r2,172(sp)
    fe70:	28adc83a 	sub	r22,r5,r2
    fe74:	05802f0e 	bge	zero,r22,ff34 <___svfprintf_internal_r+0x95c>
    fe78:	07000404 	movi	fp,16
    fe7c:	d8801f17 	ldw	r2,124(sp)
    fe80:	e583e20e 	bge	fp,r22,10e0c <___svfprintf_internal_r+0x1834>
    fe84:	014000f4 	movhi	r5,3
    fe88:	296a9684 	addi	r5,r5,-21926
    fe8c:	dc402a15 	stw	r17,168(sp)
    fe90:	d9402c15 	stw	r5,176(sp)
    fe94:	b023883a 	mov	r17,r22
    fe98:	050001c4 	movi	r20,7
    fe9c:	902d883a 	mov	r22,r18
    fea0:	8025883a 	mov	r18,r16
    fea4:	dc002d17 	ldw	r16,180(sp)
    fea8:	00000306 	br	feb8 <___svfprintf_internal_r+0x8e0>
    feac:	8c7ffc04 	addi	r17,r17,-16
    feb0:	42000204 	addi	r8,r8,8
    feb4:	e440110e 	bge	fp,r17,fefc <___svfprintf_internal_r+0x924>
    feb8:	18c00404 	addi	r3,r3,16
    febc:	10800044 	addi	r2,r2,1
    fec0:	45400015 	stw	r21,0(r8)
    fec4:	47000115 	stw	fp,4(r8)
    fec8:	d8c02015 	stw	r3,128(sp)
    fecc:	d8801f15 	stw	r2,124(sp)
    fed0:	a0bff60e 	bge	r20,r2,feac <__alt_data_end+0xfc00feac>
    fed4:	d9801e04 	addi	r6,sp,120
    fed8:	800b883a 	mov	r5,r16
    fedc:	9809883a 	mov	r4,r19
    fee0:	001853c0 	call	1853c <__ssprint_r>
    fee4:	103ea31e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
    fee8:	8c7ffc04 	addi	r17,r17,-16
    feec:	d8c02017 	ldw	r3,128(sp)
    fef0:	d8801f17 	ldw	r2,124(sp)
    fef4:	da000404 	addi	r8,sp,16
    fef8:	e47fef16 	blt	fp,r17,feb8 <__alt_data_end+0xfc00feb8>
    fefc:	9021883a 	mov	r16,r18
    ff00:	b025883a 	mov	r18,r22
    ff04:	882d883a 	mov	r22,r17
    ff08:	dc402a17 	ldw	r17,168(sp)
    ff0c:	d9002c17 	ldw	r4,176(sp)
    ff10:	1d87883a 	add	r3,r3,r22
    ff14:	10800044 	addi	r2,r2,1
    ff18:	41000015 	stw	r4,0(r8)
    ff1c:	45800115 	stw	r22,4(r8)
    ff20:	d8c02015 	stw	r3,128(sp)
    ff24:	d8801f15 	stw	r2,124(sp)
    ff28:	010001c4 	movi	r4,7
    ff2c:	20820e16 	blt	r4,r2,10768 <___svfprintf_internal_r+0x1190>
    ff30:	42000204 	addi	r8,r8,8
    ff34:	9080400c 	andi	r2,r18,256
    ff38:	10013a1e 	bne	r2,zero,10424 <___svfprintf_internal_r+0xe4c>
    ff3c:	d9402b17 	ldw	r5,172(sp)
    ff40:	d8801f17 	ldw	r2,124(sp)
    ff44:	44000015 	stw	r16,0(r8)
    ff48:	1947883a 	add	r3,r3,r5
    ff4c:	10800044 	addi	r2,r2,1
    ff50:	41400115 	stw	r5,4(r8)
    ff54:	d8c02015 	stw	r3,128(sp)
    ff58:	d8801f15 	stw	r2,124(sp)
    ff5c:	010001c4 	movi	r4,7
    ff60:	2081f316 	blt	r4,r2,10730 <___svfprintf_internal_r+0x1158>
    ff64:	42000204 	addi	r8,r8,8
    ff68:	9480010c 	andi	r18,r18,4
    ff6c:	90003226 	beq	r18,zero,10038 <___svfprintf_internal_r+0xa60>
    ff70:	d9403117 	ldw	r5,196(sp)
    ff74:	d8802917 	ldw	r2,164(sp)
    ff78:	28a1c83a 	sub	r16,r5,r2
    ff7c:	04002e0e 	bge	zero,r16,10038 <___svfprintf_internal_r+0xa60>
    ff80:	04400404 	movi	r17,16
    ff84:	d8801f17 	ldw	r2,124(sp)
    ff88:	8c04db0e 	bge	r17,r16,112f8 <___svfprintf_internal_r+0x1d20>
    ff8c:	014000f4 	movhi	r5,3
    ff90:	296a9a84 	addi	r5,r5,-21910
    ff94:	d9403515 	stw	r5,212(sp)
    ff98:	048001c4 	movi	r18,7
    ff9c:	dd002d17 	ldw	r20,180(sp)
    ffa0:	00000306 	br	ffb0 <___svfprintf_internal_r+0x9d8>
    ffa4:	843ffc04 	addi	r16,r16,-16
    ffa8:	42000204 	addi	r8,r8,8
    ffac:	8c00130e 	bge	r17,r16,fffc <___svfprintf_internal_r+0xa24>
    ffb0:	010000f4 	movhi	r4,3
    ffb4:	18c00404 	addi	r3,r3,16
    ffb8:	10800044 	addi	r2,r2,1
    ffbc:	212a9a84 	addi	r4,r4,-21910
    ffc0:	41000015 	stw	r4,0(r8)
    ffc4:	44400115 	stw	r17,4(r8)
    ffc8:	d8c02015 	stw	r3,128(sp)
    ffcc:	d8801f15 	stw	r2,124(sp)
    ffd0:	90bff40e 	bge	r18,r2,ffa4 <__alt_data_end+0xfc00ffa4>
    ffd4:	d9801e04 	addi	r6,sp,120
    ffd8:	a00b883a 	mov	r5,r20
    ffdc:	9809883a 	mov	r4,r19
    ffe0:	001853c0 	call	1853c <__ssprint_r>
    ffe4:	103e631e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
    ffe8:	843ffc04 	addi	r16,r16,-16
    ffec:	d8c02017 	ldw	r3,128(sp)
    fff0:	d8801f17 	ldw	r2,124(sp)
    fff4:	da000404 	addi	r8,sp,16
    fff8:	8c3fed16 	blt	r17,r16,ffb0 <__alt_data_end+0xfc00ffb0>
    fffc:	d9403517 	ldw	r5,212(sp)
   10000:	1c07883a 	add	r3,r3,r16
   10004:	10800044 	addi	r2,r2,1
   10008:	41400015 	stw	r5,0(r8)
   1000c:	44000115 	stw	r16,4(r8)
   10010:	d8c02015 	stw	r3,128(sp)
   10014:	d8801f15 	stw	r2,124(sp)
   10018:	010001c4 	movi	r4,7
   1001c:	2080060e 	bge	r4,r2,10038 <___svfprintf_internal_r+0xa60>
   10020:	d9402d17 	ldw	r5,180(sp)
   10024:	d9801e04 	addi	r6,sp,120
   10028:	9809883a 	mov	r4,r19
   1002c:	001853c0 	call	1853c <__ssprint_r>
   10030:	103e501e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10034:	d8c02017 	ldw	r3,128(sp)
   10038:	d8803117 	ldw	r2,196(sp)
   1003c:	d9002917 	ldw	r4,164(sp)
   10040:	1100010e 	bge	r2,r4,10048 <___svfprintf_internal_r+0xa70>
   10044:	2005883a 	mov	r2,r4
   10048:	d9402f17 	ldw	r5,188(sp)
   1004c:	288b883a 	add	r5,r5,r2
   10050:	d9402f15 	stw	r5,188(sp)
   10054:	1801be1e 	bne	r3,zero,10750 <___svfprintf_internal_r+0x1178>
   10058:	b8800007 	ldb	r2,0(r23)
   1005c:	d8001f15 	stw	zero,124(sp)
   10060:	da000404 	addi	r8,sp,16
   10064:	103d891e 	bne	r2,zero,f68c <__alt_data_end+0xfc00f68c>
   10068:	b823883a 	mov	r17,r23
   1006c:	003d9f06 	br	f6ec <__alt_data_end+0xfc00f6ec>
   10070:	8025883a 	mov	r18,r16
   10074:	dc002903 	ldbu	r16,164(sp)
   10078:	e011883a 	mov	r8,fp
   1007c:	84003fcc 	andi	r16,r16,255
   10080:	8005e61e 	bne	r16,zero,1181c <___svfprintf_internal_r+0x2244>
   10084:	94800414 	ori	r18,r18,16
   10088:	9080080c 	andi	r2,r18,32
   1008c:	10022026 	beq	r2,zero,10910 <___svfprintf_internal_r+0x1338>
   10090:	d9002e17 	ldw	r4,184(sp)
   10094:	d9402a17 	ldw	r5,168(sp)
   10098:	d8002785 	stb	zero,158(sp)
   1009c:	20c00204 	addi	r3,r4,8
   100a0:	25000017 	ldw	r20,0(r4)
   100a4:	25800117 	ldw	r22,4(r4)
   100a8:	2803ad16 	blt	r5,zero,10f60 <___svfprintf_internal_r+0x1988>
   100ac:	013fdfc4 	movi	r4,-129
   100b0:	a584b03a 	or	r2,r20,r22
   100b4:	d8c02e15 	stw	r3,184(sp)
   100b8:	9124703a 	and	r18,r18,r4
   100bc:	0039883a 	mov	fp,zero
   100c0:	103eb01e 	bne	r2,zero,fb84 <__alt_data_end+0xfc00fb84>
   100c4:	d8802a17 	ldw	r2,168(sp)
   100c8:	1002e71e 	bne	r2,zero,10c68 <___svfprintf_internal_r+0x1690>
   100cc:	d8002a15 	stw	zero,168(sp)
   100d0:	d8002b15 	stw	zero,172(sp)
   100d4:	dc001e04 	addi	r16,sp,120
   100d8:	003ef706 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   100dc:	8025883a 	mov	r18,r16
   100e0:	dc002903 	ldbu	r16,164(sp)
   100e4:	e011883a 	mov	r8,fp
   100e8:	84003fcc 	andi	r16,r16,255
   100ec:	8005c81e 	bne	r16,zero,11810 <___svfprintf_internal_r+0x2238>
   100f0:	010000f4 	movhi	r4,3
   100f4:	212a8a04 	addi	r4,r4,-21976
   100f8:	d9003a15 	stw	r4,232(sp)
   100fc:	9080080c 	andi	r2,r18,32
   10100:	10007226 	beq	r2,zero,102cc <___svfprintf_internal_r+0xcf4>
   10104:	d9402e17 	ldw	r5,184(sp)
   10108:	2d000017 	ldw	r20,0(r5)
   1010c:	2d800117 	ldw	r22,4(r5)
   10110:	29400204 	addi	r5,r5,8
   10114:	d9402e15 	stw	r5,184(sp)
   10118:	9080004c 	andi	r2,r18,1
   1011c:	1001aa26 	beq	r2,zero,107c8 <___svfprintf_internal_r+0x11f0>
   10120:	a584b03a 	or	r2,r20,r22
   10124:	10032526 	beq	r2,zero,10dbc <___svfprintf_internal_r+0x17e4>
   10128:	d8c02a17 	ldw	r3,168(sp)
   1012c:	00800c04 	movi	r2,48
   10130:	d8802705 	stb	r2,156(sp)
   10134:	dc402745 	stb	r17,157(sp)
   10138:	d8002785 	stb	zero,158(sp)
   1013c:	90800094 	ori	r2,r18,2
   10140:	1804a316 	blt	r3,zero,113d0 <___svfprintf_internal_r+0x1df8>
   10144:	00bfdfc4 	movi	r2,-129
   10148:	90a4703a 	and	r18,r18,r2
   1014c:	94800094 	ori	r18,r18,2
   10150:	0039883a 	mov	fp,zero
   10154:	d9003a17 	ldw	r4,232(sp)
   10158:	dc001e04 	addi	r16,sp,120
   1015c:	a08003cc 	andi	r2,r20,15
   10160:	b006973a 	slli	r3,r22,28
   10164:	2085883a 	add	r2,r4,r2
   10168:	a028d13a 	srli	r20,r20,4
   1016c:	10800003 	ldbu	r2,0(r2)
   10170:	b02cd13a 	srli	r22,r22,4
   10174:	843fffc4 	addi	r16,r16,-1
   10178:	1d28b03a 	or	r20,r3,r20
   1017c:	80800005 	stb	r2,0(r16)
   10180:	a584b03a 	or	r2,r20,r22
   10184:	103ff51e 	bne	r2,zero,1015c <__alt_data_end+0xfc01015c>
   10188:	d8c02817 	ldw	r3,160(sp)
   1018c:	1c07c83a 	sub	r3,r3,r16
   10190:	d8c02b15 	stw	r3,172(sp)
   10194:	003ec806 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   10198:	d8c02e17 	ldw	r3,184(sp)
   1019c:	d9002e17 	ldw	r4,184(sp)
   101a0:	8025883a 	mov	r18,r16
   101a4:	18800017 	ldw	r2,0(r3)
   101a8:	21000104 	addi	r4,r4,4
   101ac:	00c00044 	movi	r3,1
   101b0:	e011883a 	mov	r8,fp
   101b4:	d8c02915 	stw	r3,164(sp)
   101b8:	d8002785 	stb	zero,158(sp)
   101bc:	d8801405 	stb	r2,80(sp)
   101c0:	d9002e15 	stw	r4,184(sp)
   101c4:	d8c02b15 	stw	r3,172(sp)
   101c8:	d8002a15 	stw	zero,168(sp)
   101cc:	d8003215 	stw	zero,200(sp)
   101d0:	dc001404 	addi	r16,sp,80
   101d4:	0039883a 	mov	fp,zero
   101d8:	003ec406 	br	fcec <__alt_data_end+0xfc00fcec>
   101dc:	8025883a 	mov	r18,r16
   101e0:	dc002903 	ldbu	r16,164(sp)
   101e4:	e011883a 	mov	r8,fp
   101e8:	84003fcc 	andi	r16,r16,255
   101ec:	803e8726 	beq	r16,zero,fc0c <__alt_data_end+0xfc00fc0c>
   101f0:	d8c02b03 	ldbu	r3,172(sp)
   101f4:	d8c02785 	stb	r3,158(sp)
   101f8:	003e8406 	br	fc0c <__alt_data_end+0xfc00fc0c>
   101fc:	00c00044 	movi	r3,1
   10200:	d8c02905 	stb	r3,164(sp)
   10204:	00c00ac4 	movi	r3,43
   10208:	d8c02b05 	stb	r3,172(sp)
   1020c:	bc400007 	ldb	r17,0(r23)
   10210:	003d4606 	br	f72c <__alt_data_end+0xfc00f72c>
   10214:	84000814 	ori	r16,r16,32
   10218:	bc400007 	ldb	r17,0(r23)
   1021c:	003d4306 	br	f72c <__alt_data_end+0xfc00f72c>
   10220:	d8802e17 	ldw	r2,184(sp)
   10224:	8025883a 	mov	r18,r16
   10228:	d8002785 	stb	zero,158(sp)
   1022c:	14000017 	ldw	r16,0(r2)
   10230:	e011883a 	mov	r8,fp
   10234:	15000104 	addi	r20,r2,4
   10238:	80042126 	beq	r16,zero,112c0 <___svfprintf_internal_r+0x1ce8>
   1023c:	d8c02a17 	ldw	r3,168(sp)
   10240:	1803ee16 	blt	r3,zero,111fc <___svfprintf_internal_r+0x1c24>
   10244:	180d883a 	mov	r6,r3
   10248:	000b883a 	mov	r5,zero
   1024c:	8009883a 	mov	r4,r16
   10250:	df003e15 	stw	fp,248(sp)
   10254:	00169c80 	call	169c8 <memchr>
   10258:	da003e17 	ldw	r8,248(sp)
   1025c:	10046a26 	beq	r2,zero,11408 <___svfprintf_internal_r+0x1e30>
   10260:	1405c83a 	sub	r2,r2,r16
   10264:	d8802b15 	stw	r2,172(sp)
   10268:	1003ea16 	blt	r2,zero,11214 <___svfprintf_internal_r+0x1c3c>
   1026c:	df002783 	ldbu	fp,158(sp)
   10270:	d8802915 	stw	r2,164(sp)
   10274:	dd002e15 	stw	r20,184(sp)
   10278:	d8002a15 	stw	zero,168(sp)
   1027c:	d8003215 	stw	zero,200(sp)
   10280:	003e9306 	br	fcd0 <__alt_data_end+0xfc00fcd0>
   10284:	8025883a 	mov	r18,r16
   10288:	dc002903 	ldbu	r16,164(sp)
   1028c:	e011883a 	mov	r8,fp
   10290:	84003fcc 	andi	r16,r16,255
   10294:	803f7c26 	beq	r16,zero,10088 <__alt_data_end+0xfc010088>
   10298:	d8c02b03 	ldbu	r3,172(sp)
   1029c:	d8c02785 	stb	r3,158(sp)
   102a0:	003f7906 	br	10088 <__alt_data_end+0xfc010088>
   102a4:	8025883a 	mov	r18,r16
   102a8:	dc002903 	ldbu	r16,164(sp)
   102ac:	e011883a 	mov	r8,fp
   102b0:	84003fcc 	andi	r16,r16,255
   102b4:	8005741e 	bne	r16,zero,11888 <___svfprintf_internal_r+0x22b0>
   102b8:	010000f4 	movhi	r4,3
   102bc:	212a8f04 	addi	r4,r4,-21956
   102c0:	d9003a15 	stw	r4,232(sp)
   102c4:	9080080c 	andi	r2,r18,32
   102c8:	103f8e1e 	bne	r2,zero,10104 <__alt_data_end+0xfc010104>
   102cc:	9080040c 	andi	r2,r18,16
   102d0:	1002a726 	beq	r2,zero,10d70 <___svfprintf_internal_r+0x1798>
   102d4:	d8802e17 	ldw	r2,184(sp)
   102d8:	002d883a 	mov	r22,zero
   102dc:	15000017 	ldw	r20,0(r2)
   102e0:	10800104 	addi	r2,r2,4
   102e4:	d8802e15 	stw	r2,184(sp)
   102e8:	003f8b06 	br	10118 <__alt_data_end+0xfc010118>
   102ec:	84000054 	ori	r16,r16,1
   102f0:	bc400007 	ldb	r17,0(r23)
   102f4:	003d0d06 	br	f72c <__alt_data_end+0xfc00f72c>
   102f8:	d8802b07 	ldb	r2,172(sp)
   102fc:	1002a41e 	bne	r2,zero,10d90 <___svfprintf_internal_r+0x17b8>
   10300:	00c00044 	movi	r3,1
   10304:	d8c02905 	stb	r3,164(sp)
   10308:	00c00804 	movi	r3,32
   1030c:	d8c02b05 	stb	r3,172(sp)
   10310:	bc400007 	ldb	r17,0(r23)
   10314:	003d0506 	br	f72c <__alt_data_end+0xfc00f72c>
   10318:	8025883a 	mov	r18,r16
   1031c:	dc002903 	ldbu	r16,164(sp)
   10320:	e011883a 	mov	r8,fp
   10324:	84003fcc 	andi	r16,r16,255
   10328:	803e0626 	beq	r16,zero,fb44 <__alt_data_end+0xfc00fb44>
   1032c:	d8c02b03 	ldbu	r3,172(sp)
   10330:	d8c02785 	stb	r3,158(sp)
   10334:	003e0306 	br	fb44 <__alt_data_end+0xfc00fb44>
   10338:	bc400007 	ldb	r17,0(r23)
   1033c:	00801b04 	movi	r2,108
   10340:	88830a26 	beq	r17,r2,10f6c <___svfprintf_internal_r+0x1994>
   10344:	84000414 	ori	r16,r16,16
   10348:	003cf806 	br	f72c <__alt_data_end+0xfc00f72c>
   1034c:	8025883a 	mov	r18,r16
   10350:	dc002903 	ldbu	r16,164(sp)
   10354:	e011883a 	mov	r8,fp
   10358:	84003fcc 	andi	r16,r16,255
   1035c:	8005471e 	bne	r16,zero,1187c <___svfprintf_internal_r+0x22a4>
   10360:	9080080c 	andi	r2,r18,32
   10364:	10028c26 	beq	r2,zero,10d98 <___svfprintf_internal_r+0x17c0>
   10368:	d9002e17 	ldw	r4,184(sp)
   1036c:	d9402f17 	ldw	r5,188(sp)
   10370:	20800017 	ldw	r2,0(r4)
   10374:	2807d7fa 	srai	r3,r5,31
   10378:	21000104 	addi	r4,r4,4
   1037c:	d9002e15 	stw	r4,184(sp)
   10380:	11400015 	stw	r5,0(r2)
   10384:	10c00115 	stw	r3,4(r2)
   10388:	003cbe06 	br	f684 <__alt_data_end+0xfc00f684>
   1038c:	84001014 	ori	r16,r16,64
   10390:	bc400007 	ldb	r17,0(r23)
   10394:	003ce506 	br	f72c <__alt_data_end+0xfc00f72c>
   10398:	010000f4 	movhi	r4,3
   1039c:	212a8f04 	addi	r4,r4,-21956
   103a0:	0039883a 	mov	fp,zero
   103a4:	d9003a15 	stw	r4,232(sp)
   103a8:	04401e04 	movi	r17,120
   103ac:	003f6906 	br	10154 <__alt_data_end+0xfc010154>
   103b0:	8025883a 	mov	r18,r16
   103b4:	dc002903 	ldbu	r16,164(sp)
   103b8:	e011883a 	mov	r8,fp
   103bc:	84003fcc 	andi	r16,r16,255
   103c0:	8005261e 	bne	r16,zero,1185c <___svfprintf_internal_r+0x2284>
   103c4:	883d6526 	beq	r17,zero,f95c <__alt_data_end+0xfc00f95c>
   103c8:	00c00044 	movi	r3,1
   103cc:	d8c02915 	stw	r3,164(sp)
   103d0:	dc401405 	stb	r17,80(sp)
   103d4:	d8002785 	stb	zero,158(sp)
   103d8:	003f7a06 	br	101c4 <__alt_data_end+0xfc0101c4>
   103dc:	010000f4 	movhi	r4,3
   103e0:	212a8f04 	addi	r4,r4,-21956
   103e4:	d9003a15 	stw	r4,232(sp)
   103e8:	d8c02e15 	stw	r3,184(sp)
   103ec:	1025883a 	mov	r18,r2
   103f0:	04401e04 	movi	r17,120
   103f4:	a584b03a 	or	r2,r20,r22
   103f8:	1000fa1e 	bne	r2,zero,107e4 <___svfprintf_internal_r+0x120c>
   103fc:	0039883a 	mov	fp,zero
   10400:	00800084 	movi	r2,2
   10404:	10803fcc 	andi	r2,r2,255
   10408:	00c00044 	movi	r3,1
   1040c:	10c21626 	beq	r2,r3,10c68 <___svfprintf_internal_r+0x1690>
   10410:	00c00084 	movi	r3,2
   10414:	10fe0e1e 	bne	r2,r3,fc50 <__alt_data_end+0xfc00fc50>
   10418:	003d4606 	br	f934 <__alt_data_end+0xfc00f934>
   1041c:	d8c02017 	ldw	r3,128(sp)
   10420:	003e7306 	br	fdf0 <__alt_data_end+0xfc00fdf0>
   10424:	00801944 	movi	r2,101
   10428:	14407c0e 	bge	r2,r17,1061c <___svfprintf_internal_r+0x1044>
   1042c:	d9003617 	ldw	r4,216(sp)
   10430:	d9403717 	ldw	r5,220(sp)
   10434:	000d883a 	mov	r6,zero
   10438:	000f883a 	mov	r7,zero
   1043c:	d8c03d15 	stw	r3,244(sp)
   10440:	da003e15 	stw	r8,248(sp)
   10444:	001d92c0 	call	1d92c <__eqdf2>
   10448:	d8c03d17 	ldw	r3,244(sp)
   1044c:	da003e17 	ldw	r8,248(sp)
   10450:	1000f51e 	bne	r2,zero,10828 <___svfprintf_internal_r+0x1250>
   10454:	d8801f17 	ldw	r2,124(sp)
   10458:	010000f4 	movhi	r4,3
   1045c:	212a9604 	addi	r4,r4,-21928
   10460:	18c00044 	addi	r3,r3,1
   10464:	10800044 	addi	r2,r2,1
   10468:	41000015 	stw	r4,0(r8)
   1046c:	01000044 	movi	r4,1
   10470:	41000115 	stw	r4,4(r8)
   10474:	d8c02015 	stw	r3,128(sp)
   10478:	d8801f15 	stw	r2,124(sp)
   1047c:	010001c4 	movi	r4,7
   10480:	20826616 	blt	r4,r2,10e1c <___svfprintf_internal_r+0x1844>
   10484:	42000204 	addi	r8,r8,8
   10488:	d8802617 	ldw	r2,152(sp)
   1048c:	d9403317 	ldw	r5,204(sp)
   10490:	11400216 	blt	r2,r5,1049c <___svfprintf_internal_r+0xec4>
   10494:	9080004c 	andi	r2,r18,1
   10498:	103eb326 	beq	r2,zero,ff68 <__alt_data_end+0xfc00ff68>
   1049c:	d8803817 	ldw	r2,224(sp)
   104a0:	d9003417 	ldw	r4,208(sp)
   104a4:	d9403817 	ldw	r5,224(sp)
   104a8:	1887883a 	add	r3,r3,r2
   104ac:	d8801f17 	ldw	r2,124(sp)
   104b0:	41000015 	stw	r4,0(r8)
   104b4:	41400115 	stw	r5,4(r8)
   104b8:	10800044 	addi	r2,r2,1
   104bc:	d8c02015 	stw	r3,128(sp)
   104c0:	d8801f15 	stw	r2,124(sp)
   104c4:	010001c4 	movi	r4,7
   104c8:	2082af16 	blt	r4,r2,10f88 <___svfprintf_internal_r+0x19b0>
   104cc:	42000204 	addi	r8,r8,8
   104d0:	d8803317 	ldw	r2,204(sp)
   104d4:	143fffc4 	addi	r16,r2,-1
   104d8:	043ea30e 	bge	zero,r16,ff68 <__alt_data_end+0xfc00ff68>
   104dc:	04400404 	movi	r17,16
   104e0:	d8801f17 	ldw	r2,124(sp)
   104e4:	8c00860e 	bge	r17,r16,10700 <___svfprintf_internal_r+0x1128>
   104e8:	014000f4 	movhi	r5,3
   104ec:	296a9684 	addi	r5,r5,-21926
   104f0:	d9402c15 	stw	r5,176(sp)
   104f4:	058001c4 	movi	r22,7
   104f8:	dd002d17 	ldw	r20,180(sp)
   104fc:	00000306 	br	1050c <___svfprintf_internal_r+0xf34>
   10500:	42000204 	addi	r8,r8,8
   10504:	843ffc04 	addi	r16,r16,-16
   10508:	8c00800e 	bge	r17,r16,1070c <___svfprintf_internal_r+0x1134>
   1050c:	18c00404 	addi	r3,r3,16
   10510:	10800044 	addi	r2,r2,1
   10514:	45400015 	stw	r21,0(r8)
   10518:	44400115 	stw	r17,4(r8)
   1051c:	d8c02015 	stw	r3,128(sp)
   10520:	d8801f15 	stw	r2,124(sp)
   10524:	b0bff60e 	bge	r22,r2,10500 <__alt_data_end+0xfc010500>
   10528:	d9801e04 	addi	r6,sp,120
   1052c:	a00b883a 	mov	r5,r20
   10530:	9809883a 	mov	r4,r19
   10534:	001853c0 	call	1853c <__ssprint_r>
   10538:	103d0e1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   1053c:	d8c02017 	ldw	r3,128(sp)
   10540:	d8801f17 	ldw	r2,124(sp)
   10544:	da000404 	addi	r8,sp,16
   10548:	003fee06 	br	10504 <__alt_data_end+0xfc010504>
   1054c:	d9403117 	ldw	r5,196(sp)
   10550:	d8802917 	ldw	r2,164(sp)
   10554:	28adc83a 	sub	r22,r5,r2
   10558:	05be430e 	bge	zero,r22,fe68 <__alt_data_end+0xfc00fe68>
   1055c:	07000404 	movi	fp,16
   10560:	d8801f17 	ldw	r2,124(sp)
   10564:	e583a20e 	bge	fp,r22,113f0 <___svfprintf_internal_r+0x1e18>
   10568:	014000f4 	movhi	r5,3
   1056c:	296a9684 	addi	r5,r5,-21926
   10570:	dc403015 	stw	r17,192(sp)
   10574:	d9402c15 	stw	r5,176(sp)
   10578:	b023883a 	mov	r17,r22
   1057c:	050001c4 	movi	r20,7
   10580:	902d883a 	mov	r22,r18
   10584:	8025883a 	mov	r18,r16
   10588:	dc002d17 	ldw	r16,180(sp)
   1058c:	00000306 	br	1059c <___svfprintf_internal_r+0xfc4>
   10590:	8c7ffc04 	addi	r17,r17,-16
   10594:	42000204 	addi	r8,r8,8
   10598:	e440110e 	bge	fp,r17,105e0 <___svfprintf_internal_r+0x1008>
   1059c:	18c00404 	addi	r3,r3,16
   105a0:	10800044 	addi	r2,r2,1
   105a4:	45400015 	stw	r21,0(r8)
   105a8:	47000115 	stw	fp,4(r8)
   105ac:	d8c02015 	stw	r3,128(sp)
   105b0:	d8801f15 	stw	r2,124(sp)
   105b4:	a0bff60e 	bge	r20,r2,10590 <__alt_data_end+0xfc010590>
   105b8:	d9801e04 	addi	r6,sp,120
   105bc:	800b883a 	mov	r5,r16
   105c0:	9809883a 	mov	r4,r19
   105c4:	001853c0 	call	1853c <__ssprint_r>
   105c8:	103cea1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   105cc:	8c7ffc04 	addi	r17,r17,-16
   105d0:	d8c02017 	ldw	r3,128(sp)
   105d4:	d8801f17 	ldw	r2,124(sp)
   105d8:	da000404 	addi	r8,sp,16
   105dc:	e47fef16 	blt	fp,r17,1059c <__alt_data_end+0xfc01059c>
   105e0:	9021883a 	mov	r16,r18
   105e4:	b025883a 	mov	r18,r22
   105e8:	882d883a 	mov	r22,r17
   105ec:	dc403017 	ldw	r17,192(sp)
   105f0:	d9002c17 	ldw	r4,176(sp)
   105f4:	1d87883a 	add	r3,r3,r22
   105f8:	10800044 	addi	r2,r2,1
   105fc:	41000015 	stw	r4,0(r8)
   10600:	45800115 	stw	r22,4(r8)
   10604:	d8c02015 	stw	r3,128(sp)
   10608:	d8801f15 	stw	r2,124(sp)
   1060c:	010001c4 	movi	r4,7
   10610:	20819a16 	blt	r4,r2,10c7c <___svfprintf_internal_r+0x16a4>
   10614:	42000204 	addi	r8,r8,8
   10618:	003e1306 	br	fe68 <__alt_data_end+0xfc00fe68>
   1061c:	d9403317 	ldw	r5,204(sp)
   10620:	00800044 	movi	r2,1
   10624:	18c00044 	addi	r3,r3,1
   10628:	1141710e 	bge	r2,r5,10bf0 <___svfprintf_internal_r+0x1618>
   1062c:	dc401f17 	ldw	r17,124(sp)
   10630:	00800044 	movi	r2,1
   10634:	40800115 	stw	r2,4(r8)
   10638:	8c400044 	addi	r17,r17,1
   1063c:	44000015 	stw	r16,0(r8)
   10640:	d8c02015 	stw	r3,128(sp)
   10644:	dc401f15 	stw	r17,124(sp)
   10648:	008001c4 	movi	r2,7
   1064c:	14417416 	blt	r2,r17,10c20 <___svfprintf_internal_r+0x1648>
   10650:	42000204 	addi	r8,r8,8
   10654:	d8803817 	ldw	r2,224(sp)
   10658:	d9003417 	ldw	r4,208(sp)
   1065c:	8c400044 	addi	r17,r17,1
   10660:	10c7883a 	add	r3,r2,r3
   10664:	40800115 	stw	r2,4(r8)
   10668:	41000015 	stw	r4,0(r8)
   1066c:	d8c02015 	stw	r3,128(sp)
   10670:	dc401f15 	stw	r17,124(sp)
   10674:	008001c4 	movi	r2,7
   10678:	14417216 	blt	r2,r17,10c44 <___svfprintf_internal_r+0x166c>
   1067c:	45800204 	addi	r22,r8,8
   10680:	d9003617 	ldw	r4,216(sp)
   10684:	d9403717 	ldw	r5,220(sp)
   10688:	000d883a 	mov	r6,zero
   1068c:	000f883a 	mov	r7,zero
   10690:	d8c03d15 	stw	r3,244(sp)
   10694:	001d92c0 	call	1d92c <__eqdf2>
   10698:	d8c03d17 	ldw	r3,244(sp)
   1069c:	1000b326 	beq	r2,zero,1096c <___svfprintf_internal_r+0x1394>
   106a0:	d9403317 	ldw	r5,204(sp)
   106a4:	84000044 	addi	r16,r16,1
   106a8:	8c400044 	addi	r17,r17,1
   106ac:	28bfffc4 	addi	r2,r5,-1
   106b0:	1887883a 	add	r3,r3,r2
   106b4:	b0800115 	stw	r2,4(r22)
   106b8:	b4000015 	stw	r16,0(r22)
   106bc:	d8c02015 	stw	r3,128(sp)
   106c0:	dc401f15 	stw	r17,124(sp)
   106c4:	008001c4 	movi	r2,7
   106c8:	1440d216 	blt	r2,r17,10a14 <___svfprintf_internal_r+0x143c>
   106cc:	b5800204 	addi	r22,r22,8
   106d0:	d9003b17 	ldw	r4,236(sp)
   106d4:	df0022c4 	addi	fp,sp,139
   106d8:	8c400044 	addi	r17,r17,1
   106dc:	20c7883a 	add	r3,r4,r3
   106e0:	b7000015 	stw	fp,0(r22)
   106e4:	b1000115 	stw	r4,4(r22)
   106e8:	d8c02015 	stw	r3,128(sp)
   106ec:	dc401f15 	stw	r17,124(sp)
   106f0:	008001c4 	movi	r2,7
   106f4:	14400e16 	blt	r2,r17,10730 <___svfprintf_internal_r+0x1158>
   106f8:	b2000204 	addi	r8,r22,8
   106fc:	003e1a06 	br	ff68 <__alt_data_end+0xfc00ff68>
   10700:	010000f4 	movhi	r4,3
   10704:	212a9684 	addi	r4,r4,-21926
   10708:	d9002c15 	stw	r4,176(sp)
   1070c:	d9002c17 	ldw	r4,176(sp)
   10710:	1c07883a 	add	r3,r3,r16
   10714:	44000115 	stw	r16,4(r8)
   10718:	41000015 	stw	r4,0(r8)
   1071c:	10800044 	addi	r2,r2,1
   10720:	d8c02015 	stw	r3,128(sp)
   10724:	d8801f15 	stw	r2,124(sp)
   10728:	010001c4 	movi	r4,7
   1072c:	20be0d0e 	bge	r4,r2,ff64 <__alt_data_end+0xfc00ff64>
   10730:	d9402d17 	ldw	r5,180(sp)
   10734:	d9801e04 	addi	r6,sp,120
   10738:	9809883a 	mov	r4,r19
   1073c:	001853c0 	call	1853c <__ssprint_r>
   10740:	103c8c1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10744:	d8c02017 	ldw	r3,128(sp)
   10748:	da000404 	addi	r8,sp,16
   1074c:	003e0606 	br	ff68 <__alt_data_end+0xfc00ff68>
   10750:	d9402d17 	ldw	r5,180(sp)
   10754:	d9801e04 	addi	r6,sp,120
   10758:	9809883a 	mov	r4,r19
   1075c:	001853c0 	call	1853c <__ssprint_r>
   10760:	103e3d26 	beq	r2,zero,10058 <__alt_data_end+0xfc010058>
   10764:	003c8306 	br	f974 <__alt_data_end+0xfc00f974>
   10768:	d9402d17 	ldw	r5,180(sp)
   1076c:	d9801e04 	addi	r6,sp,120
   10770:	9809883a 	mov	r4,r19
   10774:	001853c0 	call	1853c <__ssprint_r>
   10778:	103c7e1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   1077c:	d8c02017 	ldw	r3,128(sp)
   10780:	da000404 	addi	r8,sp,16
   10784:	003deb06 	br	ff34 <__alt_data_end+0xfc00ff34>
   10788:	d9402d17 	ldw	r5,180(sp)
   1078c:	d9801e04 	addi	r6,sp,120
   10790:	9809883a 	mov	r4,r19
   10794:	001853c0 	call	1853c <__ssprint_r>
   10798:	103c761e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   1079c:	d8c02017 	ldw	r3,128(sp)
   107a0:	da000404 	addi	r8,sp,16
   107a4:	003d9f06 	br	fe24 <__alt_data_end+0xfc00fe24>
   107a8:	d9402d17 	ldw	r5,180(sp)
   107ac:	d9801e04 	addi	r6,sp,120
   107b0:	9809883a 	mov	r4,r19
   107b4:	001853c0 	call	1853c <__ssprint_r>
   107b8:	103c6e1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   107bc:	d8c02017 	ldw	r3,128(sp)
   107c0:	da000404 	addi	r8,sp,16
   107c4:	003da506 	br	fe5c <__alt_data_end+0xfc00fe5c>
   107c8:	d9402a17 	ldw	r5,168(sp)
   107cc:	d8002785 	stb	zero,158(sp)
   107d0:	283f0816 	blt	r5,zero,103f4 <__alt_data_end+0xfc0103f4>
   107d4:	00ffdfc4 	movi	r3,-129
   107d8:	a584b03a 	or	r2,r20,r22
   107dc:	90e4703a 	and	r18,r18,r3
   107e0:	103c5126 	beq	r2,zero,f928 <__alt_data_end+0xfc00f928>
   107e4:	0039883a 	mov	fp,zero
   107e8:	003e5a06 	br	10154 <__alt_data_end+0xfc010154>
   107ec:	9080040c 	andi	r2,r18,16
   107f0:	10013d26 	beq	r2,zero,10ce8 <___svfprintf_internal_r+0x1710>
   107f4:	d8c02e17 	ldw	r3,184(sp)
   107f8:	d9002a17 	ldw	r4,168(sp)
   107fc:	d8002785 	stb	zero,158(sp)
   10800:	18800104 	addi	r2,r3,4
   10804:	1d000017 	ldw	r20,0(r3)
   10808:	002d883a 	mov	r22,zero
   1080c:	20013f16 	blt	r4,zero,10d0c <___svfprintf_internal_r+0x1734>
   10810:	00ffdfc4 	movi	r3,-129
   10814:	d8802e15 	stw	r2,184(sp)
   10818:	90e4703a 	and	r18,r18,r3
   1081c:	a03d0926 	beq	r20,zero,fc44 <__alt_data_end+0xfc00fc44>
   10820:	0039883a 	mov	fp,zero
   10824:	003d0c06 	br	fc58 <__alt_data_end+0xfc00fc58>
   10828:	dc402617 	ldw	r17,152(sp)
   1082c:	0441830e 	bge	zero,r17,10e3c <___svfprintf_internal_r+0x1864>
   10830:	dc403217 	ldw	r17,200(sp)
   10834:	d8803317 	ldw	r2,204(sp)
   10838:	1440010e 	bge	r2,r17,10840 <___svfprintf_internal_r+0x1268>
   1083c:	1023883a 	mov	r17,r2
   10840:	04400a0e 	bge	zero,r17,1086c <___svfprintf_internal_r+0x1294>
   10844:	d8801f17 	ldw	r2,124(sp)
   10848:	1c47883a 	add	r3,r3,r17
   1084c:	44000015 	stw	r16,0(r8)
   10850:	10800044 	addi	r2,r2,1
   10854:	44400115 	stw	r17,4(r8)
   10858:	d8c02015 	stw	r3,128(sp)
   1085c:	d8801f15 	stw	r2,124(sp)
   10860:	010001c4 	movi	r4,7
   10864:	20827516 	blt	r4,r2,1123c <___svfprintf_internal_r+0x1c64>
   10868:	42000204 	addi	r8,r8,8
   1086c:	88027b16 	blt	r17,zero,1125c <___svfprintf_internal_r+0x1c84>
   10870:	d9003217 	ldw	r4,200(sp)
   10874:	2463c83a 	sub	r17,r4,r17
   10878:	0440990e 	bge	zero,r17,10ae0 <___svfprintf_internal_r+0x1508>
   1087c:	05800404 	movi	r22,16
   10880:	d8801f17 	ldw	r2,124(sp)
   10884:	b441530e 	bge	r22,r17,10dd4 <___svfprintf_internal_r+0x17fc>
   10888:	010000f4 	movhi	r4,3
   1088c:	212a9684 	addi	r4,r4,-21926
   10890:	d9002c15 	stw	r4,176(sp)
   10894:	070001c4 	movi	fp,7
   10898:	dd002d17 	ldw	r20,180(sp)
   1089c:	00000306 	br	108ac <___svfprintf_internal_r+0x12d4>
   108a0:	42000204 	addi	r8,r8,8
   108a4:	8c7ffc04 	addi	r17,r17,-16
   108a8:	b4414d0e 	bge	r22,r17,10de0 <___svfprintf_internal_r+0x1808>
   108ac:	18c00404 	addi	r3,r3,16
   108b0:	10800044 	addi	r2,r2,1
   108b4:	45400015 	stw	r21,0(r8)
   108b8:	45800115 	stw	r22,4(r8)
   108bc:	d8c02015 	stw	r3,128(sp)
   108c0:	d8801f15 	stw	r2,124(sp)
   108c4:	e0bff60e 	bge	fp,r2,108a0 <__alt_data_end+0xfc0108a0>
   108c8:	d9801e04 	addi	r6,sp,120
   108cc:	a00b883a 	mov	r5,r20
   108d0:	9809883a 	mov	r4,r19
   108d4:	001853c0 	call	1853c <__ssprint_r>
   108d8:	103c261e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   108dc:	d8c02017 	ldw	r3,128(sp)
   108e0:	d8801f17 	ldw	r2,124(sp)
   108e4:	da000404 	addi	r8,sp,16
   108e8:	003fee06 	br	108a4 <__alt_data_end+0xfc0108a4>
   108ec:	d9402d17 	ldw	r5,180(sp)
   108f0:	d9801e04 	addi	r6,sp,120
   108f4:	9809883a 	mov	r4,r19
   108f8:	001853c0 	call	1853c <__ssprint_r>
   108fc:	103c1d1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10900:	d8c02017 	ldw	r3,128(sp)
   10904:	df002787 	ldb	fp,158(sp)
   10908:	da000404 	addi	r8,sp,16
   1090c:	003d3806 	br	fdf0 <__alt_data_end+0xfc00fdf0>
   10910:	9080040c 	andi	r2,r18,16
   10914:	10005c26 	beq	r2,zero,10a88 <___svfprintf_internal_r+0x14b0>
   10918:	d8c02e17 	ldw	r3,184(sp)
   1091c:	d9002a17 	ldw	r4,168(sp)
   10920:	d8002785 	stb	zero,158(sp)
   10924:	18800104 	addi	r2,r3,4
   10928:	1d000017 	ldw	r20,0(r3)
   1092c:	002d883a 	mov	r22,zero
   10930:	20005e16 	blt	r4,zero,10aac <___svfprintf_internal_r+0x14d4>
   10934:	00ffdfc4 	movi	r3,-129
   10938:	d8802e15 	stw	r2,184(sp)
   1093c:	90e4703a 	and	r18,r18,r3
   10940:	0039883a 	mov	fp,zero
   10944:	a03ddf26 	beq	r20,zero,100c4 <__alt_data_end+0xfc0100c4>
   10948:	00800244 	movi	r2,9
   1094c:	153c8e36 	bltu	r2,r20,fb88 <__alt_data_end+0xfc00fb88>
   10950:	a5000c04 	addi	r20,r20,48
   10954:	dc001dc4 	addi	r16,sp,119
   10958:	dd001dc5 	stb	r20,119(sp)
   1095c:	d8c02817 	ldw	r3,160(sp)
   10960:	1c07c83a 	sub	r3,r3,r16
   10964:	d8c02b15 	stw	r3,172(sp)
   10968:	003cd306 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   1096c:	d8803317 	ldw	r2,204(sp)
   10970:	143fffc4 	addi	r16,r2,-1
   10974:	043f560e 	bge	zero,r16,106d0 <__alt_data_end+0xfc0106d0>
   10978:	07000404 	movi	fp,16
   1097c:	e403530e 	bge	fp,r16,116cc <___svfprintf_internal_r+0x20f4>
   10980:	014000f4 	movhi	r5,3
   10984:	296a9684 	addi	r5,r5,-21926
   10988:	d9402c15 	stw	r5,176(sp)
   1098c:	01c001c4 	movi	r7,7
   10990:	dd002d17 	ldw	r20,180(sp)
   10994:	00000306 	br	109a4 <___svfprintf_internal_r+0x13cc>
   10998:	843ffc04 	addi	r16,r16,-16
   1099c:	b5800204 	addi	r22,r22,8
   109a0:	e400130e 	bge	fp,r16,109f0 <___svfprintf_internal_r+0x1418>
   109a4:	18c00404 	addi	r3,r3,16
   109a8:	8c400044 	addi	r17,r17,1
   109ac:	b5400015 	stw	r21,0(r22)
   109b0:	b7000115 	stw	fp,4(r22)
   109b4:	d8c02015 	stw	r3,128(sp)
   109b8:	dc401f15 	stw	r17,124(sp)
   109bc:	3c7ff60e 	bge	r7,r17,10998 <__alt_data_end+0xfc010998>
   109c0:	d9801e04 	addi	r6,sp,120
   109c4:	a00b883a 	mov	r5,r20
   109c8:	9809883a 	mov	r4,r19
   109cc:	d9c03d15 	stw	r7,244(sp)
   109d0:	001853c0 	call	1853c <__ssprint_r>
   109d4:	d9c03d17 	ldw	r7,244(sp)
   109d8:	103be61e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   109dc:	843ffc04 	addi	r16,r16,-16
   109e0:	d8c02017 	ldw	r3,128(sp)
   109e4:	dc401f17 	ldw	r17,124(sp)
   109e8:	dd800404 	addi	r22,sp,16
   109ec:	e43fed16 	blt	fp,r16,109a4 <__alt_data_end+0xfc0109a4>
   109f0:	d8802c17 	ldw	r2,176(sp)
   109f4:	1c07883a 	add	r3,r3,r16
   109f8:	8c400044 	addi	r17,r17,1
   109fc:	b0800015 	stw	r2,0(r22)
   10a00:	b4000115 	stw	r16,4(r22)
   10a04:	d8c02015 	stw	r3,128(sp)
   10a08:	dc401f15 	stw	r17,124(sp)
   10a0c:	008001c4 	movi	r2,7
   10a10:	147f2e0e 	bge	r2,r17,106cc <__alt_data_end+0xfc0106cc>
   10a14:	d9402d17 	ldw	r5,180(sp)
   10a18:	d9801e04 	addi	r6,sp,120
   10a1c:	9809883a 	mov	r4,r19
   10a20:	001853c0 	call	1853c <__ssprint_r>
   10a24:	103bd31e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10a28:	d8c02017 	ldw	r3,128(sp)
   10a2c:	dc401f17 	ldw	r17,124(sp)
   10a30:	dd800404 	addi	r22,sp,16
   10a34:	003f2606 	br	106d0 <__alt_data_end+0xfc0106d0>
   10a38:	9080040c 	andi	r2,r18,16
   10a3c:	1000c326 	beq	r2,zero,10d4c <___svfprintf_internal_r+0x1774>
   10a40:	d9402e17 	ldw	r5,184(sp)
   10a44:	2d000017 	ldw	r20,0(r5)
   10a48:	29400104 	addi	r5,r5,4
   10a4c:	d9402e15 	stw	r5,184(sp)
   10a50:	a02dd7fa 	srai	r22,r20,31
   10a54:	b005883a 	mov	r2,r22
   10a58:	103c430e 	bge	r2,zero,fb68 <__alt_data_end+0xfc00fb68>
   10a5c:	d9402a17 	ldw	r5,168(sp)
   10a60:	0529c83a 	sub	r20,zero,r20
   10a64:	07000b44 	movi	fp,45
   10a68:	a004c03a 	cmpne	r2,r20,zero
   10a6c:	05adc83a 	sub	r22,zero,r22
   10a70:	df002785 	stb	fp,158(sp)
   10a74:	b0adc83a 	sub	r22,r22,r2
   10a78:	28022e16 	blt	r5,zero,11334 <___svfprintf_internal_r+0x1d5c>
   10a7c:	00bfdfc4 	movi	r2,-129
   10a80:	90a4703a 	and	r18,r18,r2
   10a84:	003c3f06 	br	fb84 <__alt_data_end+0xfc00fb84>
   10a88:	9080100c 	andi	r2,r18,64
   10a8c:	d8002785 	stb	zero,158(sp)
   10a90:	10012526 	beq	r2,zero,10f28 <___svfprintf_internal_r+0x1950>
   10a94:	d9402e17 	ldw	r5,184(sp)
   10a98:	d8c02a17 	ldw	r3,168(sp)
   10a9c:	002d883a 	mov	r22,zero
   10aa0:	28800104 	addi	r2,r5,4
   10aa4:	2d00000b 	ldhu	r20,0(r5)
   10aa8:	183fa20e 	bge	r3,zero,10934 <__alt_data_end+0xfc010934>
   10aac:	d8802e15 	stw	r2,184(sp)
   10ab0:	0039883a 	mov	fp,zero
   10ab4:	a584b03a 	or	r2,r20,r22
   10ab8:	103c321e 	bne	r2,zero,fb84 <__alt_data_end+0xfc00fb84>
   10abc:	00800044 	movi	r2,1
   10ac0:	003e5006 	br	10404 <__alt_data_end+0xfc010404>
   10ac4:	d9402d17 	ldw	r5,180(sp)
   10ac8:	d9801e04 	addi	r6,sp,120
   10acc:	9809883a 	mov	r4,r19
   10ad0:	001853c0 	call	1853c <__ssprint_r>
   10ad4:	103ba71e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10ad8:	d8c02017 	ldw	r3,128(sp)
   10adc:	da000404 	addi	r8,sp,16
   10ae0:	d9003217 	ldw	r4,200(sp)
   10ae4:	d8802617 	ldw	r2,152(sp)
   10ae8:	d9403317 	ldw	r5,204(sp)
   10aec:	8123883a 	add	r17,r16,r4
   10af0:	11400216 	blt	r2,r5,10afc <___svfprintf_internal_r+0x1524>
   10af4:	9100004c 	andi	r4,r18,1
   10af8:	20000d26 	beq	r4,zero,10b30 <___svfprintf_internal_r+0x1558>
   10afc:	d9003817 	ldw	r4,224(sp)
   10b00:	d9403417 	ldw	r5,208(sp)
   10b04:	1907883a 	add	r3,r3,r4
   10b08:	d9001f17 	ldw	r4,124(sp)
   10b0c:	41400015 	stw	r5,0(r8)
   10b10:	d9403817 	ldw	r5,224(sp)
   10b14:	21000044 	addi	r4,r4,1
   10b18:	d8c02015 	stw	r3,128(sp)
   10b1c:	41400115 	stw	r5,4(r8)
   10b20:	d9001f15 	stw	r4,124(sp)
   10b24:	014001c4 	movi	r5,7
   10b28:	2901dc16 	blt	r5,r4,1129c <___svfprintf_internal_r+0x1cc4>
   10b2c:	42000204 	addi	r8,r8,8
   10b30:	d9003317 	ldw	r4,204(sp)
   10b34:	8121883a 	add	r16,r16,r4
   10b38:	2085c83a 	sub	r2,r4,r2
   10b3c:	8461c83a 	sub	r16,r16,r17
   10b40:	1400010e 	bge	r2,r16,10b48 <___svfprintf_internal_r+0x1570>
   10b44:	1021883a 	mov	r16,r2
   10b48:	04000a0e 	bge	zero,r16,10b74 <___svfprintf_internal_r+0x159c>
   10b4c:	d9001f17 	ldw	r4,124(sp)
   10b50:	1c07883a 	add	r3,r3,r16
   10b54:	44400015 	stw	r17,0(r8)
   10b58:	21000044 	addi	r4,r4,1
   10b5c:	44000115 	stw	r16,4(r8)
   10b60:	d8c02015 	stw	r3,128(sp)
   10b64:	d9001f15 	stw	r4,124(sp)
   10b68:	014001c4 	movi	r5,7
   10b6c:	2901e616 	blt	r5,r4,11308 <___svfprintf_internal_r+0x1d30>
   10b70:	42000204 	addi	r8,r8,8
   10b74:	8001f616 	blt	r16,zero,11350 <___svfprintf_internal_r+0x1d78>
   10b78:	1421c83a 	sub	r16,r2,r16
   10b7c:	043cfa0e 	bge	zero,r16,ff68 <__alt_data_end+0xfc00ff68>
   10b80:	04400404 	movi	r17,16
   10b84:	d8801f17 	ldw	r2,124(sp)
   10b88:	8c3edd0e 	bge	r17,r16,10700 <__alt_data_end+0xfc010700>
   10b8c:	014000f4 	movhi	r5,3
   10b90:	296a9684 	addi	r5,r5,-21926
   10b94:	d9402c15 	stw	r5,176(sp)
   10b98:	058001c4 	movi	r22,7
   10b9c:	dd002d17 	ldw	r20,180(sp)
   10ba0:	00000306 	br	10bb0 <___svfprintf_internal_r+0x15d8>
   10ba4:	42000204 	addi	r8,r8,8
   10ba8:	843ffc04 	addi	r16,r16,-16
   10bac:	8c3ed70e 	bge	r17,r16,1070c <__alt_data_end+0xfc01070c>
   10bb0:	18c00404 	addi	r3,r3,16
   10bb4:	10800044 	addi	r2,r2,1
   10bb8:	45400015 	stw	r21,0(r8)
   10bbc:	44400115 	stw	r17,4(r8)
   10bc0:	d8c02015 	stw	r3,128(sp)
   10bc4:	d8801f15 	stw	r2,124(sp)
   10bc8:	b0bff60e 	bge	r22,r2,10ba4 <__alt_data_end+0xfc010ba4>
   10bcc:	d9801e04 	addi	r6,sp,120
   10bd0:	a00b883a 	mov	r5,r20
   10bd4:	9809883a 	mov	r4,r19
   10bd8:	001853c0 	call	1853c <__ssprint_r>
   10bdc:	103b651e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10be0:	d8c02017 	ldw	r3,128(sp)
   10be4:	d8801f17 	ldw	r2,124(sp)
   10be8:	da000404 	addi	r8,sp,16
   10bec:	003fee06 	br	10ba8 <__alt_data_end+0xfc010ba8>
   10bf0:	9088703a 	and	r4,r18,r2
   10bf4:	203e8d1e 	bne	r4,zero,1062c <__alt_data_end+0xfc01062c>
   10bf8:	dc401f17 	ldw	r17,124(sp)
   10bfc:	40800115 	stw	r2,4(r8)
   10c00:	44000015 	stw	r16,0(r8)
   10c04:	8c400044 	addi	r17,r17,1
   10c08:	d8c02015 	stw	r3,128(sp)
   10c0c:	dc401f15 	stw	r17,124(sp)
   10c10:	008001c4 	movi	r2,7
   10c14:	147f7f16 	blt	r2,r17,10a14 <__alt_data_end+0xfc010a14>
   10c18:	45800204 	addi	r22,r8,8
   10c1c:	003eac06 	br	106d0 <__alt_data_end+0xfc0106d0>
   10c20:	d9402d17 	ldw	r5,180(sp)
   10c24:	d9801e04 	addi	r6,sp,120
   10c28:	9809883a 	mov	r4,r19
   10c2c:	001853c0 	call	1853c <__ssprint_r>
   10c30:	103b501e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10c34:	d8c02017 	ldw	r3,128(sp)
   10c38:	dc401f17 	ldw	r17,124(sp)
   10c3c:	da000404 	addi	r8,sp,16
   10c40:	003e8406 	br	10654 <__alt_data_end+0xfc010654>
   10c44:	d9402d17 	ldw	r5,180(sp)
   10c48:	d9801e04 	addi	r6,sp,120
   10c4c:	9809883a 	mov	r4,r19
   10c50:	001853c0 	call	1853c <__ssprint_r>
   10c54:	103b471e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10c58:	d8c02017 	ldw	r3,128(sp)
   10c5c:	dc401f17 	ldw	r17,124(sp)
   10c60:	dd800404 	addi	r22,sp,16
   10c64:	003e8606 	br	10680 <__alt_data_end+0xfc010680>
   10c68:	0029883a 	mov	r20,zero
   10c6c:	a5000c04 	addi	r20,r20,48
   10c70:	dc001dc4 	addi	r16,sp,119
   10c74:	dd001dc5 	stb	r20,119(sp)
   10c78:	003f3806 	br	1095c <__alt_data_end+0xfc01095c>
   10c7c:	d9402d17 	ldw	r5,180(sp)
   10c80:	d9801e04 	addi	r6,sp,120
   10c84:	9809883a 	mov	r4,r19
   10c88:	001853c0 	call	1853c <__ssprint_r>
   10c8c:	103b391e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10c90:	d8c02017 	ldw	r3,128(sp)
   10c94:	da000404 	addi	r8,sp,16
   10c98:	003c7306 	br	fe68 <__alt_data_end+0xfc00fe68>
   10c9c:	d9003617 	ldw	r4,216(sp)
   10ca0:	d9403717 	ldw	r5,220(sp)
   10ca4:	da003e15 	stw	r8,248(sp)
   10ca8:	001838c0 	call	1838c <__fpclassifyd>
   10cac:	da003e17 	ldw	r8,248(sp)
   10cb0:	1000bd1e 	bne	r2,zero,10fa8 <___svfprintf_internal_r+0x19d0>
   10cb4:	008011c4 	movi	r2,71
   10cb8:	14411e0e 	bge	r2,r17,11134 <___svfprintf_internal_r+0x1b5c>
   10cbc:	040000f4 	movhi	r16,3
   10cc0:	842a8904 	addi	r16,r16,-21980
   10cc4:	00c000c4 	movi	r3,3
   10cc8:	00bfdfc4 	movi	r2,-129
   10ccc:	d8c02915 	stw	r3,164(sp)
   10cd0:	90a4703a 	and	r18,r18,r2
   10cd4:	df002783 	ldbu	fp,158(sp)
   10cd8:	d8c02b15 	stw	r3,172(sp)
   10cdc:	d8002a15 	stw	zero,168(sp)
   10ce0:	d8003215 	stw	zero,200(sp)
   10ce4:	003bfa06 	br	fcd0 <__alt_data_end+0xfc00fcd0>
   10ce8:	9080100c 	andi	r2,r18,64
   10cec:	d8002785 	stb	zero,158(sp)
   10cf0:	10009426 	beq	r2,zero,10f44 <___svfprintf_internal_r+0x196c>
   10cf4:	d9402e17 	ldw	r5,184(sp)
   10cf8:	d8c02a17 	ldw	r3,168(sp)
   10cfc:	002d883a 	mov	r22,zero
   10d00:	28800104 	addi	r2,r5,4
   10d04:	2d00000b 	ldhu	r20,0(r5)
   10d08:	183ec10e 	bge	r3,zero,10810 <__alt_data_end+0xfc010810>
   10d0c:	a586b03a 	or	r3,r20,r22
   10d10:	d8802e15 	stw	r2,184(sp)
   10d14:	183ec21e 	bne	r3,zero,10820 <__alt_data_end+0xfc010820>
   10d18:	0039883a 	mov	fp,zero
   10d1c:	0005883a 	mov	r2,zero
   10d20:	003db806 	br	10404 <__alt_data_end+0xfc010404>
   10d24:	d8c02e17 	ldw	r3,184(sp)
   10d28:	d9002e17 	ldw	r4,184(sp)
   10d2c:	d9402e17 	ldw	r5,184(sp)
   10d30:	18c00017 	ldw	r3,0(r3)
   10d34:	21000117 	ldw	r4,4(r4)
   10d38:	29400204 	addi	r5,r5,8
   10d3c:	d8c03615 	stw	r3,216(sp)
   10d40:	d9003715 	stw	r4,220(sp)
   10d44:	d9402e15 	stw	r5,184(sp)
   10d48:	003b5a06 	br	fab4 <__alt_data_end+0xfc00fab4>
   10d4c:	9080100c 	andi	r2,r18,64
   10d50:	10010726 	beq	r2,zero,11170 <___svfprintf_internal_r+0x1b98>
   10d54:	d8802e17 	ldw	r2,184(sp)
   10d58:	1500000f 	ldh	r20,0(r2)
   10d5c:	10800104 	addi	r2,r2,4
   10d60:	d8802e15 	stw	r2,184(sp)
   10d64:	a02dd7fa 	srai	r22,r20,31
   10d68:	b005883a 	mov	r2,r22
   10d6c:	003b7d06 	br	fb64 <__alt_data_end+0xfc00fb64>
   10d70:	9080100c 	andi	r2,r18,64
   10d74:	10010526 	beq	r2,zero,1118c <___svfprintf_internal_r+0x1bb4>
   10d78:	d8c02e17 	ldw	r3,184(sp)
   10d7c:	002d883a 	mov	r22,zero
   10d80:	1d00000b 	ldhu	r20,0(r3)
   10d84:	18c00104 	addi	r3,r3,4
   10d88:	d8c02e15 	stw	r3,184(sp)
   10d8c:	003ce206 	br	10118 <__alt_data_end+0xfc010118>
   10d90:	bc400007 	ldb	r17,0(r23)
   10d94:	003a6506 	br	f72c <__alt_data_end+0xfc00f72c>
   10d98:	9080040c 	andi	r2,r18,16
   10d9c:	10010126 	beq	r2,zero,111a4 <___svfprintf_internal_r+0x1bcc>
   10da0:	d8c02e17 	ldw	r3,184(sp)
   10da4:	d9002f17 	ldw	r4,188(sp)
   10da8:	18800017 	ldw	r2,0(r3)
   10dac:	18c00104 	addi	r3,r3,4
   10db0:	d8c02e15 	stw	r3,184(sp)
   10db4:	11000015 	stw	r4,0(r2)
   10db8:	003a3206 	br	f684 <__alt_data_end+0xfc00f684>
   10dbc:	d9002a17 	ldw	r4,168(sp)
   10dc0:	d8002785 	stb	zero,158(sp)
   10dc4:	203d8d16 	blt	r4,zero,103fc <__alt_data_end+0xfc0103fc>
   10dc8:	00bfdfc4 	movi	r2,-129
   10dcc:	90a4703a 	and	r18,r18,r2
   10dd0:	003ad506 	br	f928 <__alt_data_end+0xfc00f928>
   10dd4:	014000f4 	movhi	r5,3
   10dd8:	296a9684 	addi	r5,r5,-21926
   10ddc:	d9402c15 	stw	r5,176(sp)
   10de0:	d9402c17 	ldw	r5,176(sp)
   10de4:	1c47883a 	add	r3,r3,r17
   10de8:	10800044 	addi	r2,r2,1
   10dec:	41400015 	stw	r5,0(r8)
   10df0:	44400115 	stw	r17,4(r8)
   10df4:	d8c02015 	stw	r3,128(sp)
   10df8:	d8801f15 	stw	r2,124(sp)
   10dfc:	010001c4 	movi	r4,7
   10e00:	20bf3016 	blt	r4,r2,10ac4 <__alt_data_end+0xfc010ac4>
   10e04:	42000204 	addi	r8,r8,8
   10e08:	003f3506 	br	10ae0 <__alt_data_end+0xfc010ae0>
   10e0c:	010000f4 	movhi	r4,3
   10e10:	212a9684 	addi	r4,r4,-21926
   10e14:	d9002c15 	stw	r4,176(sp)
   10e18:	003c3c06 	br	ff0c <__alt_data_end+0xfc00ff0c>
   10e1c:	d9402d17 	ldw	r5,180(sp)
   10e20:	d9801e04 	addi	r6,sp,120
   10e24:	9809883a 	mov	r4,r19
   10e28:	001853c0 	call	1853c <__ssprint_r>
   10e2c:	103ad11e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10e30:	d8c02017 	ldw	r3,128(sp)
   10e34:	da000404 	addi	r8,sp,16
   10e38:	003d9306 	br	10488 <__alt_data_end+0xfc010488>
   10e3c:	d8801f17 	ldw	r2,124(sp)
   10e40:	014000f4 	movhi	r5,3
   10e44:	01000044 	movi	r4,1
   10e48:	18c00044 	addi	r3,r3,1
   10e4c:	10800044 	addi	r2,r2,1
   10e50:	296a9604 	addi	r5,r5,-21928
   10e54:	41000115 	stw	r4,4(r8)
   10e58:	41400015 	stw	r5,0(r8)
   10e5c:	d8c02015 	stw	r3,128(sp)
   10e60:	d8801f15 	stw	r2,124(sp)
   10e64:	010001c4 	movi	r4,7
   10e68:	2080b516 	blt	r4,r2,11140 <___svfprintf_internal_r+0x1b68>
   10e6c:	42000204 	addi	r8,r8,8
   10e70:	8800041e 	bne	r17,zero,10e84 <___svfprintf_internal_r+0x18ac>
   10e74:	d8803317 	ldw	r2,204(sp)
   10e78:	1000021e 	bne	r2,zero,10e84 <___svfprintf_internal_r+0x18ac>
   10e7c:	9080004c 	andi	r2,r18,1
   10e80:	103c3926 	beq	r2,zero,ff68 <__alt_data_end+0xfc00ff68>
   10e84:	d9003817 	ldw	r4,224(sp)
   10e88:	d8801f17 	ldw	r2,124(sp)
   10e8c:	d9403417 	ldw	r5,208(sp)
   10e90:	20c7883a 	add	r3,r4,r3
   10e94:	10800044 	addi	r2,r2,1
   10e98:	41000115 	stw	r4,4(r8)
   10e9c:	41400015 	stw	r5,0(r8)
   10ea0:	d8c02015 	stw	r3,128(sp)
   10ea4:	d8801f15 	stw	r2,124(sp)
   10ea8:	010001c4 	movi	r4,7
   10eac:	20818016 	blt	r4,r2,114b0 <___svfprintf_internal_r+0x1ed8>
   10eb0:	42000204 	addi	r8,r8,8
   10eb4:	0463c83a 	sub	r17,zero,r17
   10eb8:	0440cb0e 	bge	zero,r17,111e8 <___svfprintf_internal_r+0x1c10>
   10ebc:	05800404 	movi	r22,16
   10ec0:	b440e80e 	bge	r22,r17,11264 <___svfprintf_internal_r+0x1c8c>
   10ec4:	014000f4 	movhi	r5,3
   10ec8:	296a9684 	addi	r5,r5,-21926
   10ecc:	d9402c15 	stw	r5,176(sp)
   10ed0:	070001c4 	movi	fp,7
   10ed4:	dd002d17 	ldw	r20,180(sp)
   10ed8:	00000306 	br	10ee8 <___svfprintf_internal_r+0x1910>
   10edc:	42000204 	addi	r8,r8,8
   10ee0:	8c7ffc04 	addi	r17,r17,-16
   10ee4:	b440e20e 	bge	r22,r17,11270 <___svfprintf_internal_r+0x1c98>
   10ee8:	18c00404 	addi	r3,r3,16
   10eec:	10800044 	addi	r2,r2,1
   10ef0:	45400015 	stw	r21,0(r8)
   10ef4:	45800115 	stw	r22,4(r8)
   10ef8:	d8c02015 	stw	r3,128(sp)
   10efc:	d8801f15 	stw	r2,124(sp)
   10f00:	e0bff60e 	bge	fp,r2,10edc <__alt_data_end+0xfc010edc>
   10f04:	d9801e04 	addi	r6,sp,120
   10f08:	a00b883a 	mov	r5,r20
   10f0c:	9809883a 	mov	r4,r19
   10f10:	001853c0 	call	1853c <__ssprint_r>
   10f14:	103a971e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10f18:	d8c02017 	ldw	r3,128(sp)
   10f1c:	d8801f17 	ldw	r2,124(sp)
   10f20:	da000404 	addi	r8,sp,16
   10f24:	003fee06 	br	10ee0 <__alt_data_end+0xfc010ee0>
   10f28:	d9002e17 	ldw	r4,184(sp)
   10f2c:	d9402a17 	ldw	r5,168(sp)
   10f30:	002d883a 	mov	r22,zero
   10f34:	20800104 	addi	r2,r4,4
   10f38:	25000017 	ldw	r20,0(r4)
   10f3c:	283e7d0e 	bge	r5,zero,10934 <__alt_data_end+0xfc010934>
   10f40:	003eda06 	br	10aac <__alt_data_end+0xfc010aac>
   10f44:	d9002e17 	ldw	r4,184(sp)
   10f48:	d9402a17 	ldw	r5,168(sp)
   10f4c:	002d883a 	mov	r22,zero
   10f50:	20800104 	addi	r2,r4,4
   10f54:	25000017 	ldw	r20,0(r4)
   10f58:	283e2d0e 	bge	r5,zero,10810 <__alt_data_end+0xfc010810>
   10f5c:	003f6b06 	br	10d0c <__alt_data_end+0xfc010d0c>
   10f60:	d8c02e15 	stw	r3,184(sp)
   10f64:	0039883a 	mov	fp,zero
   10f68:	003ed206 	br	10ab4 <__alt_data_end+0xfc010ab4>
   10f6c:	bc400043 	ldbu	r17,1(r23)
   10f70:	84000814 	ori	r16,r16,32
   10f74:	bdc00044 	addi	r23,r23,1
   10f78:	8c403fcc 	andi	r17,r17,255
   10f7c:	8c40201c 	xori	r17,r17,128
   10f80:	8c7fe004 	addi	r17,r17,-128
   10f84:	0039e906 	br	f72c <__alt_data_end+0xfc00f72c>
   10f88:	d9402d17 	ldw	r5,180(sp)
   10f8c:	d9801e04 	addi	r6,sp,120
   10f90:	9809883a 	mov	r4,r19
   10f94:	001853c0 	call	1853c <__ssprint_r>
   10f98:	103a761e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   10f9c:	d8c02017 	ldw	r3,128(sp)
   10fa0:	da000404 	addi	r8,sp,16
   10fa4:	003d4a06 	br	104d0 <__alt_data_end+0xfc0104d0>
   10fa8:	d9002a17 	ldw	r4,168(sp)
   10fac:	05bff7c4 	movi	r22,-33
   10fb0:	00bfffc4 	movi	r2,-1
   10fb4:	8dac703a 	and	r22,r17,r22
   10fb8:	20806a26 	beq	r4,r2,11164 <___svfprintf_internal_r+0x1b8c>
   10fbc:	008011c4 	movi	r2,71
   10fc0:	b0813726 	beq	r22,r2,114a0 <___svfprintf_internal_r+0x1ec8>
   10fc4:	d9003717 	ldw	r4,220(sp)
   10fc8:	90c04014 	ori	r3,r18,256
   10fcc:	d8c02c15 	stw	r3,176(sp)
   10fd0:	20015d16 	blt	r4,zero,11548 <___svfprintf_internal_r+0x1f70>
   10fd4:	dd003717 	ldw	r20,220(sp)
   10fd8:	d8002905 	stb	zero,164(sp)
   10fdc:	00801984 	movi	r2,102
   10fe0:	88814026 	beq	r17,r2,114e4 <___svfprintf_internal_r+0x1f0c>
   10fe4:	00801184 	movi	r2,70
   10fe8:	88817126 	beq	r17,r2,115b0 <___svfprintf_internal_r+0x1fd8>
   10fec:	00801144 	movi	r2,69
   10ff0:	b0816226 	beq	r22,r2,1157c <___svfprintf_internal_r+0x1fa4>
   10ff4:	d8c02a17 	ldw	r3,168(sp)
   10ff8:	d8802104 	addi	r2,sp,132
   10ffc:	d8800315 	stw	r2,12(sp)
   11000:	d9403617 	ldw	r5,216(sp)
   11004:	d8802504 	addi	r2,sp,148
   11008:	d8800215 	stw	r2,8(sp)
   1100c:	d8802604 	addi	r2,sp,152
   11010:	d8c00015 	stw	r3,0(sp)
   11014:	d8800115 	stw	r2,4(sp)
   11018:	01c00084 	movi	r7,2
   1101c:	a00d883a 	mov	r6,r20
   11020:	9809883a 	mov	r4,r19
   11024:	d8c03d15 	stw	r3,244(sp)
   11028:	da003e15 	stw	r8,248(sp)
   1102c:	0013fcc0 	call	13fcc <_dtoa_r>
   11030:	1021883a 	mov	r16,r2
   11034:	008019c4 	movi	r2,103
   11038:	d8c03d17 	ldw	r3,244(sp)
   1103c:	da003e17 	ldw	r8,248(sp)
   11040:	8880e726 	beq	r17,r2,113e0 <___svfprintf_internal_r+0x1e08>
   11044:	008011c4 	movi	r2,71
   11048:	8880d426 	beq	r17,r2,1139c <___svfprintf_internal_r+0x1dc4>
   1104c:	80f9883a 	add	fp,r16,r3
   11050:	d9003617 	ldw	r4,216(sp)
   11054:	000d883a 	mov	r6,zero
   11058:	000f883a 	mov	r7,zero
   1105c:	a00b883a 	mov	r5,r20
   11060:	da003e15 	stw	r8,248(sp)
   11064:	001d92c0 	call	1d92c <__eqdf2>
   11068:	da003e17 	ldw	r8,248(sp)
   1106c:	1000e426 	beq	r2,zero,11400 <___svfprintf_internal_r+0x1e28>
   11070:	d8802117 	ldw	r2,132(sp)
   11074:	1700062e 	bgeu	r2,fp,11090 <___svfprintf_internal_r+0x1ab8>
   11078:	01000c04 	movi	r4,48
   1107c:	10c00044 	addi	r3,r2,1
   11080:	d8c02115 	stw	r3,132(sp)
   11084:	11000005 	stb	r4,0(r2)
   11088:	d8802117 	ldw	r2,132(sp)
   1108c:	173ffb36 	bltu	r2,fp,1107c <__alt_data_end+0xfc01107c>
   11090:	1405c83a 	sub	r2,r2,r16
   11094:	d8803315 	stw	r2,204(sp)
   11098:	008011c4 	movi	r2,71
   1109c:	b080c526 	beq	r22,r2,113b4 <___svfprintf_internal_r+0x1ddc>
   110a0:	00801944 	movi	r2,101
   110a4:	1441d80e 	bge	r2,r17,11808 <___svfprintf_internal_r+0x2230>
   110a8:	d8c02617 	ldw	r3,152(sp)
   110ac:	00801984 	movi	r2,102
   110b0:	d8c03215 	stw	r3,200(sp)
   110b4:	88813426 	beq	r17,r2,11588 <___svfprintf_internal_r+0x1fb0>
   110b8:	d8c03217 	ldw	r3,200(sp)
   110bc:	d9003317 	ldw	r4,204(sp)
   110c0:	19012516 	blt	r3,r4,11558 <___svfprintf_internal_r+0x1f80>
   110c4:	9480004c 	andi	r18,r18,1
   110c8:	9001841e 	bne	r18,zero,116dc <___svfprintf_internal_r+0x2104>
   110cc:	1805883a 	mov	r2,r3
   110d0:	1801cb16 	blt	r3,zero,11800 <___svfprintf_internal_r+0x2228>
   110d4:	d8c03217 	ldw	r3,200(sp)
   110d8:	044019c4 	movi	r17,103
   110dc:	d8c02b15 	stw	r3,172(sp)
   110e0:	df002907 	ldb	fp,164(sp)
   110e4:	e000a61e 	bne	fp,zero,11380 <___svfprintf_internal_r+0x1da8>
   110e8:	df002783 	ldbu	fp,158(sp)
   110ec:	d8802915 	stw	r2,164(sp)
   110f0:	dc802c17 	ldw	r18,176(sp)
   110f4:	d8002a15 	stw	zero,168(sp)
   110f8:	003af506 	br	fcd0 <__alt_data_end+0xfc00fcd0>
   110fc:	040000f4 	movhi	r16,3
   11100:	842a8604 	addi	r16,r16,-21992
   11104:	003a7e06 	br	fb00 <__alt_data_end+0xfc00fb00>
   11108:	d9003917 	ldw	r4,228(sp)
   1110c:	04001004 	movi	r16,64
   11110:	800b883a 	mov	r5,r16
   11114:	000e46c0 	call	e46c <_malloc_r>
   11118:	d9002d17 	ldw	r4,180(sp)
   1111c:	20800015 	stw	r2,0(r4)
   11120:	20800415 	stw	r2,16(r4)
   11124:	1001d026 	beq	r2,zero,11868 <___svfprintf_internal_r+0x2290>
   11128:	d8802d17 	ldw	r2,180(sp)
   1112c:	14000515 	stw	r16,20(r2)
   11130:	00394406 	br	f644 <__alt_data_end+0xfc00f644>
   11134:	040000f4 	movhi	r16,3
   11138:	842a8804 	addi	r16,r16,-21984
   1113c:	003ee106 	br	10cc4 <__alt_data_end+0xfc010cc4>
   11140:	d9402d17 	ldw	r5,180(sp)
   11144:	d9801e04 	addi	r6,sp,120
   11148:	9809883a 	mov	r4,r19
   1114c:	001853c0 	call	1853c <__ssprint_r>
   11150:	103a081e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   11154:	dc402617 	ldw	r17,152(sp)
   11158:	d8c02017 	ldw	r3,128(sp)
   1115c:	da000404 	addi	r8,sp,16
   11160:	003f4306 	br	10e70 <__alt_data_end+0xfc010e70>
   11164:	01400184 	movi	r5,6
   11168:	d9402a15 	stw	r5,168(sp)
   1116c:	003f9506 	br	10fc4 <__alt_data_end+0xfc010fc4>
   11170:	d8c02e17 	ldw	r3,184(sp)
   11174:	1d000017 	ldw	r20,0(r3)
   11178:	18c00104 	addi	r3,r3,4
   1117c:	d8c02e15 	stw	r3,184(sp)
   11180:	a02dd7fa 	srai	r22,r20,31
   11184:	b005883a 	mov	r2,r22
   11188:	003a7606 	br	fb64 <__alt_data_end+0xfc00fb64>
   1118c:	d9002e17 	ldw	r4,184(sp)
   11190:	002d883a 	mov	r22,zero
   11194:	25000017 	ldw	r20,0(r4)
   11198:	21000104 	addi	r4,r4,4
   1119c:	d9002e15 	stw	r4,184(sp)
   111a0:	003bdd06 	br	10118 <__alt_data_end+0xfc010118>
   111a4:	9480100c 	andi	r18,r18,64
   111a8:	90006e26 	beq	r18,zero,11364 <___svfprintf_internal_r+0x1d8c>
   111ac:	d9402e17 	ldw	r5,184(sp)
   111b0:	d8c02f17 	ldw	r3,188(sp)
   111b4:	28800017 	ldw	r2,0(r5)
   111b8:	29400104 	addi	r5,r5,4
   111bc:	d9402e15 	stw	r5,184(sp)
   111c0:	10c0000d 	sth	r3,0(r2)
   111c4:	00392f06 	br	f684 <__alt_data_end+0xfc00f684>
   111c8:	d9402d17 	ldw	r5,180(sp)
   111cc:	d9801e04 	addi	r6,sp,120
   111d0:	9809883a 	mov	r4,r19
   111d4:	001853c0 	call	1853c <__ssprint_r>
   111d8:	1039e61e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   111dc:	d8c02017 	ldw	r3,128(sp)
   111e0:	d8801f17 	ldw	r2,124(sp)
   111e4:	da000404 	addi	r8,sp,16
   111e8:	d9403317 	ldw	r5,204(sp)
   111ec:	10800044 	addi	r2,r2,1
   111f0:	44000015 	stw	r16,0(r8)
   111f4:	28c7883a 	add	r3,r5,r3
   111f8:	003b5506 	br	ff50 <__alt_data_end+0xfc00ff50>
   111fc:	8009883a 	mov	r4,r16
   11200:	df003e15 	stw	fp,248(sp)
   11204:	000f5400 	call	f540 <strlen>
   11208:	d8802b15 	stw	r2,172(sp)
   1120c:	da003e17 	ldw	r8,248(sp)
   11210:	103c160e 	bge	r2,zero,1026c <__alt_data_end+0xfc01026c>
   11214:	0005883a 	mov	r2,zero
   11218:	003c1406 	br	1026c <__alt_data_end+0xfc01026c>
   1121c:	00bfffc4 	movi	r2,-1
   11220:	0039d906 	br	f988 <__alt_data_end+0xfc00f988>
   11224:	010000f4 	movhi	r4,3
   11228:	212a9a84 	addi	r4,r4,-21910
   1122c:	d9003515 	stw	r4,212(sp)
   11230:	003ae406 	br	fdc4 <__alt_data_end+0xfc00fdc4>
   11234:	013fffc4 	movi	r4,-1
   11238:	0039fa06 	br	fa24 <__alt_data_end+0xfc00fa24>
   1123c:	d9402d17 	ldw	r5,180(sp)
   11240:	d9801e04 	addi	r6,sp,120
   11244:	9809883a 	mov	r4,r19
   11248:	001853c0 	call	1853c <__ssprint_r>
   1124c:	1039c91e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   11250:	d8c02017 	ldw	r3,128(sp)
   11254:	da000404 	addi	r8,sp,16
   11258:	003d8406 	br	1086c <__alt_data_end+0xfc01086c>
   1125c:	0023883a 	mov	r17,zero
   11260:	003d8306 	br	10870 <__alt_data_end+0xfc010870>
   11264:	010000f4 	movhi	r4,3
   11268:	212a9684 	addi	r4,r4,-21926
   1126c:	d9002c15 	stw	r4,176(sp)
   11270:	d9002c17 	ldw	r4,176(sp)
   11274:	1c47883a 	add	r3,r3,r17
   11278:	10800044 	addi	r2,r2,1
   1127c:	41000015 	stw	r4,0(r8)
   11280:	44400115 	stw	r17,4(r8)
   11284:	d8c02015 	stw	r3,128(sp)
   11288:	d8801f15 	stw	r2,124(sp)
   1128c:	010001c4 	movi	r4,7
   11290:	20bfcd16 	blt	r4,r2,111c8 <__alt_data_end+0xfc0111c8>
   11294:	42000204 	addi	r8,r8,8
   11298:	003fd306 	br	111e8 <__alt_data_end+0xfc0111e8>
   1129c:	d9402d17 	ldw	r5,180(sp)
   112a0:	d9801e04 	addi	r6,sp,120
   112a4:	9809883a 	mov	r4,r19
   112a8:	001853c0 	call	1853c <__ssprint_r>
   112ac:	1039b11e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   112b0:	d8802617 	ldw	r2,152(sp)
   112b4:	d8c02017 	ldw	r3,128(sp)
   112b8:	da000404 	addi	r8,sp,16
   112bc:	003e1c06 	br	10b30 <__alt_data_end+0xfc010b30>
   112c0:	d8802a17 	ldw	r2,168(sp)
   112c4:	00c00184 	movi	r3,6
   112c8:	1880012e 	bgeu	r3,r2,112d0 <___svfprintf_internal_r+0x1cf8>
   112cc:	1805883a 	mov	r2,r3
   112d0:	d8802b15 	stw	r2,172(sp)
   112d4:	1000f316 	blt	r2,zero,116a4 <___svfprintf_internal_r+0x20cc>
   112d8:	040000f4 	movhi	r16,3
   112dc:	d8802915 	stw	r2,164(sp)
   112e0:	dd002e15 	stw	r20,184(sp)
   112e4:	d8002a15 	stw	zero,168(sp)
   112e8:	d8003215 	stw	zero,200(sp)
   112ec:	842a9404 	addi	r16,r16,-21936
   112f0:	0039883a 	mov	fp,zero
   112f4:	003a7d06 	br	fcec <__alt_data_end+0xfc00fcec>
   112f8:	010000f4 	movhi	r4,3
   112fc:	212a9a84 	addi	r4,r4,-21910
   11300:	d9003515 	stw	r4,212(sp)
   11304:	003b3d06 	br	fffc <__alt_data_end+0xfc00fffc>
   11308:	d9402d17 	ldw	r5,180(sp)
   1130c:	d9801e04 	addi	r6,sp,120
   11310:	9809883a 	mov	r4,r19
   11314:	001853c0 	call	1853c <__ssprint_r>
   11318:	1039961e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   1131c:	d8802617 	ldw	r2,152(sp)
   11320:	d9403317 	ldw	r5,204(sp)
   11324:	d8c02017 	ldw	r3,128(sp)
   11328:	da000404 	addi	r8,sp,16
   1132c:	2885c83a 	sub	r2,r5,r2
   11330:	003e1006 	br	10b74 <__alt_data_end+0xfc010b74>
   11334:	00800044 	movi	r2,1
   11338:	10803fcc 	andi	r2,r2,255
   1133c:	00c00044 	movi	r3,1
   11340:	10fa1026 	beq	r2,r3,fb84 <__alt_data_end+0xfc00fb84>
   11344:	00c00084 	movi	r3,2
   11348:	10fb8226 	beq	r2,r3,10154 <__alt_data_end+0xfc010154>
   1134c:	003a4206 	br	fc58 <__alt_data_end+0xfc00fc58>
   11350:	0021883a 	mov	r16,zero
   11354:	003e0806 	br	10b78 <__alt_data_end+0xfc010b78>
   11358:	07000b44 	movi	fp,45
   1135c:	df002785 	stb	fp,158(sp)
   11360:	0039e306 	br	faf0 <__alt_data_end+0xfc00faf0>
   11364:	d9002e17 	ldw	r4,184(sp)
   11368:	d9402f17 	ldw	r5,188(sp)
   1136c:	20800017 	ldw	r2,0(r4)
   11370:	21000104 	addi	r4,r4,4
   11374:	d9002e15 	stw	r4,184(sp)
   11378:	11400015 	stw	r5,0(r2)
   1137c:	0038c106 	br	f684 <__alt_data_end+0xfc00f684>
   11380:	00c00b44 	movi	r3,45
   11384:	d8c02785 	stb	r3,158(sp)
   11388:	d8802915 	stw	r2,164(sp)
   1138c:	dc802c17 	ldw	r18,176(sp)
   11390:	d8002a15 	stw	zero,168(sp)
   11394:	07000b44 	movi	fp,45
   11398:	003a5106 	br	fce0 <__alt_data_end+0xfc00fce0>
   1139c:	9080004c 	andi	r2,r18,1
   113a0:	1000941e 	bne	r2,zero,115f4 <___svfprintf_internal_r+0x201c>
   113a4:	d8802117 	ldw	r2,132(sp)
   113a8:	1405c83a 	sub	r2,r2,r16
   113ac:	d8803315 	stw	r2,204(sp)
   113b0:	b441151e 	bne	r22,r17,11808 <___svfprintf_internal_r+0x2230>
   113b4:	dd802617 	ldw	r22,152(sp)
   113b8:	00bfff44 	movi	r2,-3
   113bc:	b0801a16 	blt	r22,r2,11428 <___svfprintf_internal_r+0x1e50>
   113c0:	d9402a17 	ldw	r5,168(sp)
   113c4:	2d801816 	blt	r5,r22,11428 <___svfprintf_internal_r+0x1e50>
   113c8:	dd803215 	stw	r22,200(sp)
   113cc:	003f3a06 	br	110b8 <__alt_data_end+0xfc0110b8>
   113d0:	1025883a 	mov	r18,r2
   113d4:	0039883a 	mov	fp,zero
   113d8:	00800084 	movi	r2,2
   113dc:	003fd606 	br	11338 <__alt_data_end+0xfc011338>
   113e0:	9080004c 	andi	r2,r18,1
   113e4:	103f191e 	bne	r2,zero,1104c <__alt_data_end+0xfc01104c>
   113e8:	d8802117 	ldw	r2,132(sp)
   113ec:	003f2806 	br	11090 <__alt_data_end+0xfc011090>
   113f0:	010000f4 	movhi	r4,3
   113f4:	212a9684 	addi	r4,r4,-21926
   113f8:	d9002c15 	stw	r4,176(sp)
   113fc:	003c7c06 	br	105f0 <__alt_data_end+0xfc0105f0>
   11400:	e005883a 	mov	r2,fp
   11404:	003f2206 	br	11090 <__alt_data_end+0xfc011090>
   11408:	d9002a17 	ldw	r4,168(sp)
   1140c:	df002783 	ldbu	fp,158(sp)
   11410:	dd002e15 	stw	r20,184(sp)
   11414:	d9002915 	stw	r4,164(sp)
   11418:	d9002b15 	stw	r4,172(sp)
   1141c:	d8002a15 	stw	zero,168(sp)
   11420:	d8003215 	stw	zero,200(sp)
   11424:	003a2a06 	br	fcd0 <__alt_data_end+0xfc00fcd0>
   11428:	8c7fff84 	addi	r17,r17,-2
   1142c:	b5bfffc4 	addi	r22,r22,-1
   11430:	dd802615 	stw	r22,152(sp)
   11434:	dc4022c5 	stb	r17,139(sp)
   11438:	b000c316 	blt	r22,zero,11748 <___svfprintf_internal_r+0x2170>
   1143c:	00800ac4 	movi	r2,43
   11440:	d8802305 	stb	r2,140(sp)
   11444:	00800244 	movi	r2,9
   11448:	15806e16 	blt	r2,r22,11604 <___svfprintf_internal_r+0x202c>
   1144c:	00800c04 	movi	r2,48
   11450:	b5800c04 	addi	r22,r22,48
   11454:	d8802345 	stb	r2,141(sp)
   11458:	dd802385 	stb	r22,142(sp)
   1145c:	d88023c4 	addi	r2,sp,143
   11460:	df0022c4 	addi	fp,sp,139
   11464:	d8c03317 	ldw	r3,204(sp)
   11468:	1739c83a 	sub	fp,r2,fp
   1146c:	d9003317 	ldw	r4,204(sp)
   11470:	e0c7883a 	add	r3,fp,r3
   11474:	df003b15 	stw	fp,236(sp)
   11478:	d8c02b15 	stw	r3,172(sp)
   1147c:	00800044 	movi	r2,1
   11480:	1100b70e 	bge	r2,r4,11760 <___svfprintf_internal_r+0x2188>
   11484:	d8c02b17 	ldw	r3,172(sp)
   11488:	18c00044 	addi	r3,r3,1
   1148c:	d8c02b15 	stw	r3,172(sp)
   11490:	1805883a 	mov	r2,r3
   11494:	1800b016 	blt	r3,zero,11758 <___svfprintf_internal_r+0x2180>
   11498:	d8003215 	stw	zero,200(sp)
   1149c:	003f1006 	br	110e0 <__alt_data_end+0xfc0110e0>
   114a0:	d8802a17 	ldw	r2,168(sp)
   114a4:	103ec71e 	bne	r2,zero,10fc4 <__alt_data_end+0xfc010fc4>
   114a8:	dc002a15 	stw	r16,168(sp)
   114ac:	003ec506 	br	10fc4 <__alt_data_end+0xfc010fc4>
   114b0:	d9402d17 	ldw	r5,180(sp)
   114b4:	d9801e04 	addi	r6,sp,120
   114b8:	9809883a 	mov	r4,r19
   114bc:	001853c0 	call	1853c <__ssprint_r>
   114c0:	10392c1e 	bne	r2,zero,f974 <__alt_data_end+0xfc00f974>
   114c4:	dc402617 	ldw	r17,152(sp)
   114c8:	d8c02017 	ldw	r3,128(sp)
   114cc:	d8801f17 	ldw	r2,124(sp)
   114d0:	da000404 	addi	r8,sp,16
   114d4:	003e7706 	br	10eb4 <__alt_data_end+0xfc010eb4>
   114d8:	182f883a 	mov	r23,r3
   114dc:	d8002a15 	stw	zero,168(sp)
   114e0:	00389306 	br	f730 <__alt_data_end+0xfc00f730>
   114e4:	d8c02a17 	ldw	r3,168(sp)
   114e8:	d8802104 	addi	r2,sp,132
   114ec:	d8800315 	stw	r2,12(sp)
   114f0:	d9403617 	ldw	r5,216(sp)
   114f4:	d8802504 	addi	r2,sp,148
   114f8:	d8800215 	stw	r2,8(sp)
   114fc:	d8802604 	addi	r2,sp,152
   11500:	d8c00015 	stw	r3,0(sp)
   11504:	9809883a 	mov	r4,r19
   11508:	d8800115 	stw	r2,4(sp)
   1150c:	01c000c4 	movi	r7,3
   11510:	a00d883a 	mov	r6,r20
   11514:	da003e15 	stw	r8,248(sp)
   11518:	0013fcc0 	call	13fcc <_dtoa_r>
   1151c:	d9002a17 	ldw	r4,168(sp)
   11520:	da003e17 	ldw	r8,248(sp)
   11524:	1021883a 	mov	r16,r2
   11528:	1139883a 	add	fp,r2,r4
   1152c:	2007883a 	mov	r3,r4
   11530:	81000007 	ldb	r4,0(r16)
   11534:	00800c04 	movi	r2,48
   11538:	20806f26 	beq	r4,r2,116f8 <___svfprintf_internal_r+0x2120>
   1153c:	d8c02617 	ldw	r3,152(sp)
   11540:	e0f9883a 	add	fp,fp,r3
   11544:	003ec206 	br	11050 <__alt_data_end+0xfc011050>
   11548:	00c00b44 	movi	r3,45
   1154c:	2520003c 	xorhi	r20,r4,32768
   11550:	d8c02905 	stb	r3,164(sp)
   11554:	003ea106 	br	10fdc <__alt_data_end+0xfc010fdc>
   11558:	d8c03217 	ldw	r3,200(sp)
   1155c:	00c0890e 	bge	zero,r3,11784 <___svfprintf_internal_r+0x21ac>
   11560:	00800044 	movi	r2,1
   11564:	d9003317 	ldw	r4,204(sp)
   11568:	1105883a 	add	r2,r2,r4
   1156c:	d8802b15 	stw	r2,172(sp)
   11570:	10005f16 	blt	r2,zero,116f0 <___svfprintf_internal_r+0x2118>
   11574:	044019c4 	movi	r17,103
   11578:	003ed906 	br	110e0 <__alt_data_end+0xfc0110e0>
   1157c:	d9002a17 	ldw	r4,168(sp)
   11580:	20c00044 	addi	r3,r4,1
   11584:	003e9c06 	br	10ff8 <__alt_data_end+0xfc010ff8>
   11588:	d9002a17 	ldw	r4,168(sp)
   1158c:	00c0680e 	bge	zero,r3,11730 <___svfprintf_internal_r+0x2158>
   11590:	2000461e 	bne	r4,zero,116ac <___svfprintf_internal_r+0x20d4>
   11594:	9480004c 	andi	r18,r18,1
   11598:	9000441e 	bne	r18,zero,116ac <___svfprintf_internal_r+0x20d4>
   1159c:	1805883a 	mov	r2,r3
   115a0:	1800a116 	blt	r3,zero,11828 <___svfprintf_internal_r+0x2250>
   115a4:	d8c03217 	ldw	r3,200(sp)
   115a8:	d8c02b15 	stw	r3,172(sp)
   115ac:	003ecc06 	br	110e0 <__alt_data_end+0xfc0110e0>
   115b0:	d9402a17 	ldw	r5,168(sp)
   115b4:	d8802104 	addi	r2,sp,132
   115b8:	d8800315 	stw	r2,12(sp)
   115bc:	d9400015 	stw	r5,0(sp)
   115c0:	d8802504 	addi	r2,sp,148
   115c4:	d9403617 	ldw	r5,216(sp)
   115c8:	d8800215 	stw	r2,8(sp)
   115cc:	d8802604 	addi	r2,sp,152
   115d0:	d8800115 	stw	r2,4(sp)
   115d4:	01c000c4 	movi	r7,3
   115d8:	a00d883a 	mov	r6,r20
   115dc:	9809883a 	mov	r4,r19
   115e0:	da003e15 	stw	r8,248(sp)
   115e4:	0013fcc0 	call	13fcc <_dtoa_r>
   115e8:	d8c02a17 	ldw	r3,168(sp)
   115ec:	da003e17 	ldw	r8,248(sp)
   115f0:	1021883a 	mov	r16,r2
   115f4:	00801184 	movi	r2,70
   115f8:	80f9883a 	add	fp,r16,r3
   115fc:	88bfcc26 	beq	r17,r2,11530 <__alt_data_end+0xfc011530>
   11600:	003e9306 	br	11050 <__alt_data_end+0xfc011050>
   11604:	df0022c4 	addi	fp,sp,139
   11608:	dc002a15 	stw	r16,168(sp)
   1160c:	9829883a 	mov	r20,r19
   11610:	e021883a 	mov	r16,fp
   11614:	4027883a 	mov	r19,r8
   11618:	b009883a 	mov	r4,r22
   1161c:	01400284 	movi	r5,10
   11620:	000cd940 	call	cd94 <__modsi3>
   11624:	10800c04 	addi	r2,r2,48
   11628:	843fffc4 	addi	r16,r16,-1
   1162c:	b009883a 	mov	r4,r22
   11630:	01400284 	movi	r5,10
   11634:	80800005 	stb	r2,0(r16)
   11638:	000cd100 	call	cd10 <__divsi3>
   1163c:	102d883a 	mov	r22,r2
   11640:	00800244 	movi	r2,9
   11644:	15bff416 	blt	r2,r22,11618 <__alt_data_end+0xfc011618>
   11648:	9811883a 	mov	r8,r19
   1164c:	b0800c04 	addi	r2,r22,48
   11650:	a027883a 	mov	r19,r20
   11654:	8029883a 	mov	r20,r16
   11658:	a17fffc4 	addi	r5,r20,-1
   1165c:	a0bfffc5 	stb	r2,-1(r20)
   11660:	dc002a17 	ldw	r16,168(sp)
   11664:	2f00782e 	bgeu	r5,fp,11848 <___svfprintf_internal_r+0x2270>
   11668:	d9c02384 	addi	r7,sp,142
   1166c:	3d0fc83a 	sub	r7,r7,r20
   11670:	d9002344 	addi	r4,sp,141
   11674:	e1cf883a 	add	r7,fp,r7
   11678:	00000106 	br	11680 <___svfprintf_internal_r+0x20a8>
   1167c:	28800003 	ldbu	r2,0(r5)
   11680:	20800005 	stb	r2,0(r4)
   11684:	21000044 	addi	r4,r4,1
   11688:	29400044 	addi	r5,r5,1
   1168c:	21fffb1e 	bne	r4,r7,1167c <__alt_data_end+0xfc01167c>
   11690:	d8802304 	addi	r2,sp,140
   11694:	1505c83a 	sub	r2,r2,r20
   11698:	d8c02344 	addi	r3,sp,141
   1169c:	1885883a 	add	r2,r3,r2
   116a0:	003f7006 	br	11464 <__alt_data_end+0xfc011464>
   116a4:	0005883a 	mov	r2,zero
   116a8:	003f0b06 	br	112d8 <__alt_data_end+0xfc0112d8>
   116ac:	d9002a17 	ldw	r4,168(sp)
   116b0:	d8c03217 	ldw	r3,200(sp)
   116b4:	20800044 	addi	r2,r4,1
   116b8:	1885883a 	add	r2,r3,r2
   116bc:	d8802b15 	stw	r2,172(sp)
   116c0:	103e870e 	bge	r2,zero,110e0 <__alt_data_end+0xfc0110e0>
   116c4:	0005883a 	mov	r2,zero
   116c8:	003e8506 	br	110e0 <__alt_data_end+0xfc0110e0>
   116cc:	010000f4 	movhi	r4,3
   116d0:	212a9684 	addi	r4,r4,-21926
   116d4:	d9002c15 	stw	r4,176(sp)
   116d8:	003cc506 	br	109f0 <__alt_data_end+0xfc0109f0>
   116dc:	d8c03217 	ldw	r3,200(sp)
   116e0:	18c00044 	addi	r3,r3,1
   116e4:	d8c02b15 	stw	r3,172(sp)
   116e8:	1805883a 	mov	r2,r3
   116ec:	183fa10e 	bge	r3,zero,11574 <__alt_data_end+0xfc011574>
   116f0:	0005883a 	mov	r2,zero
   116f4:	003f9f06 	br	11574 <__alt_data_end+0xfc011574>
   116f8:	d9003617 	ldw	r4,216(sp)
   116fc:	000d883a 	mov	r6,zero
   11700:	000f883a 	mov	r7,zero
   11704:	a00b883a 	mov	r5,r20
   11708:	d8c03d15 	stw	r3,244(sp)
   1170c:	da003e15 	stw	r8,248(sp)
   11710:	001d92c0 	call	1d92c <__eqdf2>
   11714:	d8c03d17 	ldw	r3,244(sp)
   11718:	da003e17 	ldw	r8,248(sp)
   1171c:	103f8726 	beq	r2,zero,1153c <__alt_data_end+0xfc01153c>
   11720:	00800044 	movi	r2,1
   11724:	10c7c83a 	sub	r3,r2,r3
   11728:	d8c02615 	stw	r3,152(sp)
   1172c:	003f8406 	br	11540 <__alt_data_end+0xfc011540>
   11730:	20000e1e 	bne	r4,zero,1176c <___svfprintf_internal_r+0x2194>
   11734:	9480004c 	andi	r18,r18,1
   11738:	90000c1e 	bne	r18,zero,1176c <___svfprintf_internal_r+0x2194>
   1173c:	00800044 	movi	r2,1
   11740:	d8802b15 	stw	r2,172(sp)
   11744:	003e6606 	br	110e0 <__alt_data_end+0xfc0110e0>
   11748:	00800b44 	movi	r2,45
   1174c:	05adc83a 	sub	r22,zero,r22
   11750:	d8802305 	stb	r2,140(sp)
   11754:	003f3b06 	br	11444 <__alt_data_end+0xfc011444>
   11758:	0005883a 	mov	r2,zero
   1175c:	003f4e06 	br	11498 <__alt_data_end+0xfc011498>
   11760:	90a4703a 	and	r18,r18,r2
   11764:	903f4a26 	beq	r18,zero,11490 <__alt_data_end+0xfc011490>
   11768:	003f4606 	br	11484 <__alt_data_end+0xfc011484>
   1176c:	d8c02a17 	ldw	r3,168(sp)
   11770:	18c00084 	addi	r3,r3,2
   11774:	d8c02b15 	stw	r3,172(sp)
   11778:	1805883a 	mov	r2,r3
   1177c:	183e580e 	bge	r3,zero,110e0 <__alt_data_end+0xfc0110e0>
   11780:	003fd006 	br	116c4 <__alt_data_end+0xfc0116c4>
   11784:	00800084 	movi	r2,2
   11788:	10c5c83a 	sub	r2,r2,r3
   1178c:	003f7506 	br	11564 <__alt_data_end+0xfc011564>
   11790:	d9402e17 	ldw	r5,184(sp)
   11794:	d9002e17 	ldw	r4,184(sp)
   11798:	bc400043 	ldbu	r17,1(r23)
   1179c:	29400017 	ldw	r5,0(r5)
   117a0:	20800104 	addi	r2,r4,4
   117a4:	d8802e15 	stw	r2,184(sp)
   117a8:	d9402a15 	stw	r5,168(sp)
   117ac:	182f883a 	mov	r23,r3
   117b0:	283df10e 	bge	r5,zero,10f78 <__alt_data_end+0xfc010f78>
   117b4:	8c403fcc 	andi	r17,r17,255
   117b8:	017fffc4 	movi	r5,-1
   117bc:	8c40201c 	xori	r17,r17,128
   117c0:	d9402a15 	stw	r5,168(sp)
   117c4:	8c7fe004 	addi	r17,r17,-128
   117c8:	0037d806 	br	f72c <__alt_data_end+0xfc00f72c>
   117cc:	9080004c 	andi	r2,r18,1
   117d0:	0039883a 	mov	fp,zero
   117d4:	10000726 	beq	r2,zero,117f4 <___svfprintf_internal_r+0x221c>
   117d8:	d8c02817 	ldw	r3,160(sp)
   117dc:	dc001dc4 	addi	r16,sp,119
   117e0:	00800c04 	movi	r2,48
   117e4:	1c07c83a 	sub	r3,r3,r16
   117e8:	d8801dc5 	stb	r2,119(sp)
   117ec:	d8c02b15 	stw	r3,172(sp)
   117f0:	00393106 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   117f4:	d8002b15 	stw	zero,172(sp)
   117f8:	dc001e04 	addi	r16,sp,120
   117fc:	00392e06 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   11800:	0005883a 	mov	r2,zero
   11804:	003e3306 	br	110d4 <__alt_data_end+0xfc0110d4>
   11808:	dd802617 	ldw	r22,152(sp)
   1180c:	003f0706 	br	1142c <__alt_data_end+0xfc01142c>
   11810:	d8c02b03 	ldbu	r3,172(sp)
   11814:	d8c02785 	stb	r3,158(sp)
   11818:	003a3506 	br	100f0 <__alt_data_end+0xfc0100f0>
   1181c:	d8c02b03 	ldbu	r3,172(sp)
   11820:	d8c02785 	stb	r3,158(sp)
   11824:	003a1706 	br	10084 <__alt_data_end+0xfc010084>
   11828:	0005883a 	mov	r2,zero
   1182c:	003f5d06 	br	115a4 <__alt_data_end+0xfc0115a4>
   11830:	d8c02b03 	ldbu	r3,172(sp)
   11834:	d8c02785 	stb	r3,158(sp)
   11838:	0038f306 	br	fc08 <__alt_data_end+0xfc00fc08>
   1183c:	d8c02b03 	ldbu	r3,172(sp)
   11840:	d8c02785 	stb	r3,158(sp)
   11844:	0038be06 	br	fb40 <__alt_data_end+0xfc00fb40>
   11848:	d8802344 	addi	r2,sp,141
   1184c:	003f0506 	br	11464 <__alt_data_end+0xfc011464>
   11850:	d8c02b03 	ldbu	r3,172(sp)
   11854:	d8c02785 	stb	r3,158(sp)
   11858:	00388b06 	br	fa88 <__alt_data_end+0xfc00fa88>
   1185c:	d8c02b03 	ldbu	r3,172(sp)
   11860:	d8c02785 	stb	r3,158(sp)
   11864:	003ad706 	br	103c4 <__alt_data_end+0xfc0103c4>
   11868:	d9403917 	ldw	r5,228(sp)
   1186c:	00800304 	movi	r2,12
   11870:	28800015 	stw	r2,0(r5)
   11874:	00bfffc4 	movi	r2,-1
   11878:	00384306 	br	f988 <__alt_data_end+0xfc00f988>
   1187c:	d8c02b03 	ldbu	r3,172(sp)
   11880:	d8c02785 	stb	r3,158(sp)
   11884:	003ab606 	br	10360 <__alt_data_end+0xfc010360>
   11888:	d8c02b03 	ldbu	r3,172(sp)
   1188c:	d8c02785 	stb	r3,158(sp)
   11890:	003a8906 	br	102b8 <__alt_data_end+0xfc0102b8>

00011894 <_times_r>:
   11894:	2809883a 	mov	r4,r5
   11898:	001f9441 	jmpi	1f944 <times>

0001189c <___vfprintf_internal_r>:
   1189c:	deffb804 	addi	sp,sp,-288
   118a0:	dfc04715 	stw	ra,284(sp)
   118a4:	ddc04515 	stw	r23,276(sp)
   118a8:	dd404315 	stw	r21,268(sp)
   118ac:	d9002d15 	stw	r4,180(sp)
   118b0:	282f883a 	mov	r23,r5
   118b4:	302b883a 	mov	r21,r6
   118b8:	d9c02e15 	stw	r7,184(sp)
   118bc:	df004615 	stw	fp,280(sp)
   118c0:	dd804415 	stw	r22,272(sp)
   118c4:	dd004215 	stw	r20,264(sp)
   118c8:	dcc04115 	stw	r19,260(sp)
   118cc:	dc804015 	stw	r18,256(sp)
   118d0:	dc403f15 	stw	r17,252(sp)
   118d4:	dc003e15 	stw	r16,248(sp)
   118d8:	00167dc0 	call	167dc <_localeconv_r>
   118dc:	10800017 	ldw	r2,0(r2)
   118e0:	1009883a 	mov	r4,r2
   118e4:	d8803415 	stw	r2,208(sp)
   118e8:	000f5400 	call	f540 <strlen>
   118ec:	d8803715 	stw	r2,220(sp)
   118f0:	d8802d17 	ldw	r2,180(sp)
   118f4:	10000226 	beq	r2,zero,11900 <___vfprintf_internal_r+0x64>
   118f8:	10800e17 	ldw	r2,56(r2)
   118fc:	1000fb26 	beq	r2,zero,11cec <___vfprintf_internal_r+0x450>
   11900:	b880030b 	ldhu	r2,12(r23)
   11904:	10c8000c 	andi	r3,r2,8192
   11908:	1800061e 	bne	r3,zero,11924 <___vfprintf_internal_r+0x88>
   1190c:	b9001917 	ldw	r4,100(r23)
   11910:	00f7ffc4 	movi	r3,-8193
   11914:	10880014 	ori	r2,r2,8192
   11918:	20c6703a 	and	r3,r4,r3
   1191c:	b880030d 	sth	r2,12(r23)
   11920:	b8c01915 	stw	r3,100(r23)
   11924:	10c0020c 	andi	r3,r2,8
   11928:	1800c326 	beq	r3,zero,11c38 <___vfprintf_internal_r+0x39c>
   1192c:	b8c00417 	ldw	r3,16(r23)
   11930:	1800c126 	beq	r3,zero,11c38 <___vfprintf_internal_r+0x39c>
   11934:	1080068c 	andi	r2,r2,26
   11938:	00c00284 	movi	r3,10
   1193c:	10c0c626 	beq	r2,r3,11c58 <___vfprintf_internal_r+0x3bc>
   11940:	d8c00404 	addi	r3,sp,16
   11944:	050000f4 	movhi	r20,3
   11948:	d9001e04 	addi	r4,sp,120
   1194c:	a52a9e84 	addi	r20,r20,-21894
   11950:	d8c01e15 	stw	r3,120(sp)
   11954:	d8002015 	stw	zero,128(sp)
   11958:	d8001f15 	stw	zero,124(sp)
   1195c:	d8003315 	stw	zero,204(sp)
   11960:	d8003615 	stw	zero,216(sp)
   11964:	d8003815 	stw	zero,224(sp)
   11968:	1811883a 	mov	r8,r3
   1196c:	d8003915 	stw	zero,228(sp)
   11970:	d8003a15 	stw	zero,232(sp)
   11974:	d8002f15 	stw	zero,188(sp)
   11978:	d9002815 	stw	r4,160(sp)
   1197c:	a8800007 	ldb	r2,0(r21)
   11980:	10028b26 	beq	r2,zero,123b0 <___vfprintf_internal_r+0xb14>
   11984:	00c00944 	movi	r3,37
   11988:	a823883a 	mov	r17,r21
   1198c:	10c0021e 	bne	r2,r3,11998 <___vfprintf_internal_r+0xfc>
   11990:	00001406 	br	119e4 <___vfprintf_internal_r+0x148>
   11994:	10c00326 	beq	r2,r3,119a4 <___vfprintf_internal_r+0x108>
   11998:	8c400044 	addi	r17,r17,1
   1199c:	88800007 	ldb	r2,0(r17)
   119a0:	103ffc1e 	bne	r2,zero,11994 <__alt_data_end+0xfc011994>
   119a4:	8d61c83a 	sub	r16,r17,r21
   119a8:	80000e26 	beq	r16,zero,119e4 <___vfprintf_internal_r+0x148>
   119ac:	d8c02017 	ldw	r3,128(sp)
   119b0:	d8801f17 	ldw	r2,124(sp)
   119b4:	45400015 	stw	r21,0(r8)
   119b8:	1c07883a 	add	r3,r3,r16
   119bc:	10800044 	addi	r2,r2,1
   119c0:	d8c02015 	stw	r3,128(sp)
   119c4:	44000115 	stw	r16,4(r8)
   119c8:	d8801f15 	stw	r2,124(sp)
   119cc:	00c001c4 	movi	r3,7
   119d0:	1880a916 	blt	r3,r2,11c78 <___vfprintf_internal_r+0x3dc>
   119d4:	42000204 	addi	r8,r8,8
   119d8:	d9402f17 	ldw	r5,188(sp)
   119dc:	2c0b883a 	add	r5,r5,r16
   119e0:	d9402f15 	stw	r5,188(sp)
   119e4:	88800007 	ldb	r2,0(r17)
   119e8:	1000aa26 	beq	r2,zero,11c94 <___vfprintf_internal_r+0x3f8>
   119ec:	8d400044 	addi	r21,r17,1
   119f0:	8c400047 	ldb	r17,1(r17)
   119f4:	0021883a 	mov	r16,zero
   119f8:	00bfffc4 	movi	r2,-1
   119fc:	0025883a 	mov	r18,zero
   11a00:	dc002905 	stb	r16,164(sp)
   11a04:	d8002785 	stb	zero,158(sp)
   11a08:	d8002b05 	stb	zero,172(sp)
   11a0c:	d8802a15 	stw	r2,168(sp)
   11a10:	d8003115 	stw	zero,196(sp)
   11a14:	04c01604 	movi	r19,88
   11a18:	05800244 	movi	r22,9
   11a1c:	9021883a 	mov	r16,r18
   11a20:	4039883a 	mov	fp,r8
   11a24:	ad400044 	addi	r21,r21,1
   11a28:	88bff804 	addi	r2,r17,-32
   11a2c:	98833236 	bltu	r19,r2,126f8 <___vfprintf_internal_r+0xe5c>
   11a30:	100490ba 	slli	r2,r2,2
   11a34:	00c00074 	movhi	r3,1
   11a38:	18c69204 	addi	r3,r3,6728
   11a3c:	10c5883a 	add	r2,r2,r3
   11a40:	10800017 	ldw	r2,0(r2)
   11a44:	1000683a 	jmp	r2
   11a48:	000125f0 	cmpltui	zero,zero,1175
   11a4c:	000126f8 	rdprs	zero,zero,1179
   11a50:	000126f8 	rdprs	zero,zero,1179
   11a54:	00012610 	cmplti	zero,zero,1176
   11a58:	000126f8 	rdprs	zero,zero,1179
   11a5c:	000126f8 	rdprs	zero,zero,1179
   11a60:	000126f8 	rdprs	zero,zero,1179
   11a64:	000126f8 	rdprs	zero,zero,1179
   11a68:	000126f8 	rdprs	zero,zero,1179
   11a6c:	000126f8 	rdprs	zero,zero,1179
   11a70:	00011cf8 	rdprs	zero,zero,1139
   11a74:	00012500 	call	1250 <_ZN3USB11outTransferEhhtPh+0x10>
   11a78:	000126f8 	rdprs	zero,zero,1179
   11a7c:	00011bbc 	xorhi	zero,zero,1134
   11a80:	00011d1c 	xori	zero,zero,1140
   11a84:	000126f8 	rdprs	zero,zero,1179
   11a88:	00011d6c 	andhi	zero,zero,1141
   11a8c:	00011d78 	rdprs	zero,zero,1141
   11a90:	00011d78 	rdprs	zero,zero,1141
   11a94:	00011d78 	rdprs	zero,zero,1141
   11a98:	00011d78 	rdprs	zero,zero,1141
   11a9c:	00011d78 	rdprs	zero,zero,1141
   11aa0:	00011d78 	rdprs	zero,zero,1141
   11aa4:	00011d78 	rdprs	zero,zero,1141
   11aa8:	00011d78 	rdprs	zero,zero,1141
   11aac:	00011d78 	rdprs	zero,zero,1141
   11ab0:	000126f8 	rdprs	zero,zero,1179
   11ab4:	000126f8 	rdprs	zero,zero,1179
   11ab8:	000126f8 	rdprs	zero,zero,1179
   11abc:	000126f8 	rdprs	zero,zero,1179
   11ac0:	000126f8 	rdprs	zero,zero,1179
   11ac4:	000126f8 	rdprs	zero,zero,1179
   11ac8:	000126f8 	rdprs	zero,zero,1179
   11acc:	000126f8 	rdprs	zero,zero,1179
   11ad0:	000126f8 	rdprs	zero,zero,1179
   11ad4:	000126f8 	rdprs	zero,zero,1179
   11ad8:	00011db4 	movhi	zero,1142
   11adc:	00011e7c 	xorhi	zero,zero,1145
   11ae0:	000126f8 	rdprs	zero,zero,1179
   11ae4:	00011e7c 	xorhi	zero,zero,1145
   11ae8:	000126f8 	rdprs	zero,zero,1179
   11aec:	000126f8 	rdprs	zero,zero,1179
   11af0:	000126f8 	rdprs	zero,zero,1179
   11af4:	000126f8 	rdprs	zero,zero,1179
   11af8:	00011f28 	cmpgeui	zero,zero,1148
   11afc:	000126f8 	rdprs	zero,zero,1179
   11b00:	000126f8 	rdprs	zero,zero,1179
   11b04:	00011f34 	movhi	zero,1148
   11b08:	000126f8 	rdprs	zero,zero,1179
   11b0c:	000126f8 	rdprs	zero,zero,1179
   11b10:	000126f8 	rdprs	zero,zero,1179
   11b14:	000126f8 	rdprs	zero,zero,1179
   11b18:	000126f8 	rdprs	zero,zero,1179
   11b1c:	000123b8 	rdprs	zero,zero,1166
   11b20:	000126f8 	rdprs	zero,zero,1179
   11b24:	000126f8 	rdprs	zero,zero,1179
   11b28:	00012424 	muli	zero,zero,1168
   11b2c:	000126f8 	rdprs	zero,zero,1179
   11b30:	000126f8 	rdprs	zero,zero,1179
   11b34:	000126f8 	rdprs	zero,zero,1179
   11b38:	000126f8 	rdprs	zero,zero,1179
   11b3c:	000126f8 	rdprs	zero,zero,1179
   11b40:	000126f8 	rdprs	zero,zero,1179
   11b44:	000126f8 	rdprs	zero,zero,1179
   11b48:	000126f8 	rdprs	zero,zero,1179
   11b4c:	000126f8 	rdprs	zero,zero,1179
   11b50:	000126f8 	rdprs	zero,zero,1179
   11b54:	0001269c 	xori	zero,zero,1178
   11b58:	0001261c 	xori	zero,zero,1176
   11b5c:	00011e7c 	xorhi	zero,zero,1145
   11b60:	00011e7c 	xorhi	zero,zero,1145
   11b64:	00011e7c 	xorhi	zero,zero,1145
   11b68:	0001263c 	xorhi	zero,zero,1176
   11b6c:	0001261c 	xori	zero,zero,1176
   11b70:	000126f8 	rdprs	zero,zero,1179
   11b74:	000126f8 	rdprs	zero,zero,1179
   11b78:	00012648 	cmpgei	zero,zero,1177
   11b7c:	000126f8 	rdprs	zero,zero,1179
   11b80:	0001265c 	xori	zero,zero,1177
   11b84:	000124e0 	cmpeqi	zero,zero,1171
   11b88:	00011bc8 	cmpgei	zero,zero,1135
   11b8c:	00012518 	cmpnei	zero,zero,1172
   11b90:	000126f8 	rdprs	zero,zero,1179
   11b94:	00012524 	muli	zero,zero,1172
   11b98:	000126f8 	rdprs	zero,zero,1179
   11b9c:	00012588 	cmpgei	zero,zero,1174
   11ba0:	000126f8 	rdprs	zero,zero,1179
   11ba4:	000126f8 	rdprs	zero,zero,1179
   11ba8:	000125a8 	cmpgeui	zero,zero,1174
   11bac:	d8c03117 	ldw	r3,196(sp)
   11bb0:	d8802e15 	stw	r2,184(sp)
   11bb4:	00c7c83a 	sub	r3,zero,r3
   11bb8:	d8c03115 	stw	r3,196(sp)
   11bbc:	84000114 	ori	r16,r16,4
   11bc0:	ac400007 	ldb	r17,0(r21)
   11bc4:	003f9706 	br	11a24 <__alt_data_end+0xfc011a24>
   11bc8:	00800c04 	movi	r2,48
   11bcc:	d8802705 	stb	r2,156(sp)
   11bd0:	00801e04 	movi	r2,120
   11bd4:	d8802745 	stb	r2,157(sp)
   11bd8:	d9002a17 	ldw	r4,168(sp)
   11bdc:	d8802e17 	ldw	r2,184(sp)
   11be0:	d8002785 	stb	zero,158(sp)
   11be4:	e011883a 	mov	r8,fp
   11be8:	10c00104 	addi	r3,r2,4
   11bec:	14c00017 	ldw	r19,0(r2)
   11bf0:	002d883a 	mov	r22,zero
   11bf4:	80800094 	ori	r2,r16,2
   11bf8:	2002ca16 	blt	r4,zero,12724 <___vfprintf_internal_r+0xe88>
   11bfc:	00bfdfc4 	movi	r2,-129
   11c00:	80a4703a 	and	r18,r16,r2
   11c04:	d8c02e15 	stw	r3,184(sp)
   11c08:	94800094 	ori	r18,r18,2
   11c0c:	9802b41e 	bne	r19,zero,126e0 <___vfprintf_internal_r+0xe44>
   11c10:	014000f4 	movhi	r5,3
   11c14:	296a8f04 	addi	r5,r5,-21956
   11c18:	d9403915 	stw	r5,228(sp)
   11c1c:	04401e04 	movi	r17,120
   11c20:	d8802a17 	ldw	r2,168(sp)
   11c24:	0039883a 	mov	fp,zero
   11c28:	1001fa26 	beq	r2,zero,12414 <___vfprintf_internal_r+0xb78>
   11c2c:	0027883a 	mov	r19,zero
   11c30:	002d883a 	mov	r22,zero
   11c34:	00021906 	br	1249c <___vfprintf_internal_r+0xc00>
   11c38:	d9002d17 	ldw	r4,180(sp)
   11c3c:	b80b883a 	mov	r5,r23
   11c40:	0013c500 	call	13c50 <__swsetup_r>
   11c44:	1005dc1e 	bne	r2,zero,133b8 <___vfprintf_internal_r+0x1b1c>
   11c48:	b880030b 	ldhu	r2,12(r23)
   11c4c:	00c00284 	movi	r3,10
   11c50:	1080068c 	andi	r2,r2,26
   11c54:	10ff3a1e 	bne	r2,r3,11940 <__alt_data_end+0xfc011940>
   11c58:	b880038f 	ldh	r2,14(r23)
   11c5c:	103f3816 	blt	r2,zero,11940 <__alt_data_end+0xfc011940>
   11c60:	d9c02e17 	ldw	r7,184(sp)
   11c64:	d9002d17 	ldw	r4,180(sp)
   11c68:	a80d883a 	mov	r6,r21
   11c6c:	b80b883a 	mov	r5,r23
   11c70:	0013b940 	call	13b94 <__sbprintf>
   11c74:	00001106 	br	11cbc <___vfprintf_internal_r+0x420>
   11c78:	d9002d17 	ldw	r4,180(sp)
   11c7c:	d9801e04 	addi	r6,sp,120
   11c80:	b80b883a 	mov	r5,r23
   11c84:	0019ba80 	call	19ba8 <__sprint_r>
   11c88:	1000081e 	bne	r2,zero,11cac <___vfprintf_internal_r+0x410>
   11c8c:	da000404 	addi	r8,sp,16
   11c90:	003f5106 	br	119d8 <__alt_data_end+0xfc0119d8>
   11c94:	d8802017 	ldw	r2,128(sp)
   11c98:	10000426 	beq	r2,zero,11cac <___vfprintf_internal_r+0x410>
   11c9c:	d9002d17 	ldw	r4,180(sp)
   11ca0:	d9801e04 	addi	r6,sp,120
   11ca4:	b80b883a 	mov	r5,r23
   11ca8:	0019ba80 	call	19ba8 <__sprint_r>
   11cac:	b880030b 	ldhu	r2,12(r23)
   11cb0:	1080100c 	andi	r2,r2,64
   11cb4:	1005c01e 	bne	r2,zero,133b8 <___vfprintf_internal_r+0x1b1c>
   11cb8:	d8802f17 	ldw	r2,188(sp)
   11cbc:	dfc04717 	ldw	ra,284(sp)
   11cc0:	df004617 	ldw	fp,280(sp)
   11cc4:	ddc04517 	ldw	r23,276(sp)
   11cc8:	dd804417 	ldw	r22,272(sp)
   11ccc:	dd404317 	ldw	r21,268(sp)
   11cd0:	dd004217 	ldw	r20,264(sp)
   11cd4:	dcc04117 	ldw	r19,260(sp)
   11cd8:	dc804017 	ldw	r18,256(sp)
   11cdc:	dc403f17 	ldw	r17,252(sp)
   11ce0:	dc003e17 	ldw	r16,248(sp)
   11ce4:	dec04804 	addi	sp,sp,288
   11ce8:	f800283a 	ret
   11cec:	d9002d17 	ldw	r4,180(sp)
   11cf0:	0015c5c0 	call	15c5c <__sinit>
   11cf4:	003f0206 	br	11900 <__alt_data_end+0xfc011900>
   11cf8:	d9002e17 	ldw	r4,184(sp)
   11cfc:	d9402e17 	ldw	r5,184(sp)
   11d00:	21000017 	ldw	r4,0(r4)
   11d04:	28800104 	addi	r2,r5,4
   11d08:	d9003115 	stw	r4,196(sp)
   11d0c:	203fa716 	blt	r4,zero,11bac <__alt_data_end+0xfc011bac>
   11d10:	d8802e15 	stw	r2,184(sp)
   11d14:	ac400007 	ldb	r17,0(r21)
   11d18:	003f4206 	br	11a24 <__alt_data_end+0xfc011a24>
   11d1c:	ac400007 	ldb	r17,0(r21)
   11d20:	01000a84 	movi	r4,42
   11d24:	a8c00044 	addi	r3,r21,1
   11d28:	89075826 	beq	r17,r4,13a8c <___vfprintf_internal_r+0x21f0>
   11d2c:	8cbff404 	addi	r18,r17,-48
   11d30:	b486ae36 	bltu	r22,r18,137ec <___vfprintf_internal_r+0x1f50>
   11d34:	0009883a 	mov	r4,zero
   11d38:	1823883a 	mov	r17,r3
   11d3c:	01400284 	movi	r5,10
   11d40:	000cec40 	call	cec4 <__mulsi3>
   11d44:	88c00007 	ldb	r3,0(r17)
   11d48:	1489883a 	add	r4,r2,r18
   11d4c:	8d400044 	addi	r21,r17,1
   11d50:	1cbff404 	addi	r18,r3,-48
   11d54:	a823883a 	mov	r17,r21
   11d58:	b4bff82e 	bgeu	r22,r18,11d3c <__alt_data_end+0xfc011d3c>
   11d5c:	1823883a 	mov	r17,r3
   11d60:	2005f616 	blt	r4,zero,1353c <___vfprintf_internal_r+0x1ca0>
   11d64:	d9002a15 	stw	r4,168(sp)
   11d68:	003f2f06 	br	11a28 <__alt_data_end+0xfc011a28>
   11d6c:	84002014 	ori	r16,r16,128
   11d70:	ac400007 	ldb	r17,0(r21)
   11d74:	003f2b06 	br	11a24 <__alt_data_end+0xfc011a24>
   11d78:	8cbff404 	addi	r18,r17,-48
   11d7c:	d8003115 	stw	zero,196(sp)
   11d80:	0009883a 	mov	r4,zero
   11d84:	a823883a 	mov	r17,r21
   11d88:	01400284 	movi	r5,10
   11d8c:	000cec40 	call	cec4 <__mulsi3>
   11d90:	88c00007 	ldb	r3,0(r17)
   11d94:	9089883a 	add	r4,r18,r2
   11d98:	ad400044 	addi	r21,r21,1
   11d9c:	1cbff404 	addi	r18,r3,-48
   11da0:	a823883a 	mov	r17,r21
   11da4:	b4bff82e 	bgeu	r22,r18,11d88 <__alt_data_end+0xfc011d88>
   11da8:	1823883a 	mov	r17,r3
   11dac:	d9003115 	stw	r4,196(sp)
   11db0:	003f1d06 	br	11a28 <__alt_data_end+0xfc011a28>
   11db4:	8025883a 	mov	r18,r16
   11db8:	dc002903 	ldbu	r16,164(sp)
   11dbc:	e011883a 	mov	r8,fp
   11dc0:	84003fcc 	andi	r16,r16,255
   11dc4:	8007531e 	bne	r16,zero,13b14 <___vfprintf_internal_r+0x2278>
   11dc8:	94800414 	ori	r18,r18,16
   11dcc:	9080080c 	andi	r2,r18,32
   11dd0:	1003a326 	beq	r2,zero,12c60 <___vfprintf_internal_r+0x13c4>
   11dd4:	d9002e17 	ldw	r4,184(sp)
   11dd8:	20800117 	ldw	r2,4(r4)
   11ddc:	24c00017 	ldw	r19,0(r4)
   11de0:	21000204 	addi	r4,r4,8
   11de4:	d9002e15 	stw	r4,184(sp)
   11de8:	102d883a 	mov	r22,r2
   11dec:	10047316 	blt	r2,zero,12fbc <___vfprintf_internal_r+0x1720>
   11df0:	d9002a17 	ldw	r4,168(sp)
   11df4:	df002783 	ldbu	fp,158(sp)
   11df8:	2003e416 	blt	r4,zero,12d8c <___vfprintf_internal_r+0x14f0>
   11dfc:	00ffdfc4 	movi	r3,-129
   11e00:	9d84b03a 	or	r2,r19,r22
   11e04:	90e4703a 	and	r18,r18,r3
   11e08:	10018026 	beq	r2,zero,1240c <___vfprintf_internal_r+0xb70>
   11e0c:	b003ab26 	beq	r22,zero,12cbc <___vfprintf_internal_r+0x1420>
   11e10:	dc402915 	stw	r17,164(sp)
   11e14:	dc001e04 	addi	r16,sp,120
   11e18:	b023883a 	mov	r17,r22
   11e1c:	402d883a 	mov	r22,r8
   11e20:	9809883a 	mov	r4,r19
   11e24:	880b883a 	mov	r5,r17
   11e28:	01800284 	movi	r6,10
   11e2c:	000f883a 	mov	r7,zero
   11e30:	001c0ec0 	call	1c0ec <__umoddi3>
   11e34:	10800c04 	addi	r2,r2,48
   11e38:	843fffc4 	addi	r16,r16,-1
   11e3c:	9809883a 	mov	r4,r19
   11e40:	880b883a 	mov	r5,r17
   11e44:	80800005 	stb	r2,0(r16)
   11e48:	01800284 	movi	r6,10
   11e4c:	000f883a 	mov	r7,zero
   11e50:	001baf00 	call	1baf0 <__udivdi3>
   11e54:	1027883a 	mov	r19,r2
   11e58:	10c4b03a 	or	r2,r2,r3
   11e5c:	1823883a 	mov	r17,r3
   11e60:	103fef1e 	bne	r2,zero,11e20 <__alt_data_end+0xfc011e20>
   11e64:	d8c02817 	ldw	r3,160(sp)
   11e68:	dc402917 	ldw	r17,164(sp)
   11e6c:	b011883a 	mov	r8,r22
   11e70:	1c07c83a 	sub	r3,r3,r16
   11e74:	d8c02b15 	stw	r3,172(sp)
   11e78:	00005f06 	br	11ff8 <___vfprintf_internal_r+0x75c>
   11e7c:	8025883a 	mov	r18,r16
   11e80:	dc002903 	ldbu	r16,164(sp)
   11e84:	e011883a 	mov	r8,fp
   11e88:	84003fcc 	andi	r16,r16,255
   11e8c:	80071e1e 	bne	r16,zero,13b08 <___vfprintf_internal_r+0x226c>
   11e90:	9080020c 	andi	r2,r18,8
   11e94:	1004af26 	beq	r2,zero,13154 <___vfprintf_internal_r+0x18b8>
   11e98:	d9002e17 	ldw	r4,184(sp)
   11e9c:	d9402e17 	ldw	r5,184(sp)
   11ea0:	d8802e17 	ldw	r2,184(sp)
   11ea4:	21000017 	ldw	r4,0(r4)
   11ea8:	29400117 	ldw	r5,4(r5)
   11eac:	10800204 	addi	r2,r2,8
   11eb0:	d9003615 	stw	r4,216(sp)
   11eb4:	d9403815 	stw	r5,224(sp)
   11eb8:	d8802e15 	stw	r2,184(sp)
   11ebc:	d9003617 	ldw	r4,216(sp)
   11ec0:	d9403817 	ldw	r5,224(sp)
   11ec4:	da003d15 	stw	r8,244(sp)
   11ec8:	04000044 	movi	r16,1
   11ecc:	001838c0 	call	1838c <__fpclassifyd>
   11ed0:	da003d17 	ldw	r8,244(sp)
   11ed4:	1404441e 	bne	r2,r16,12fe8 <___vfprintf_internal_r+0x174c>
   11ed8:	d9003617 	ldw	r4,216(sp)
   11edc:	d9403817 	ldw	r5,224(sp)
   11ee0:	000d883a 	mov	r6,zero
   11ee4:	000f883a 	mov	r7,zero
   11ee8:	001da900 	call	1da90 <__ledf2>
   11eec:	da003d17 	ldw	r8,244(sp)
   11ef0:	1005e316 	blt	r2,zero,13680 <___vfprintf_internal_r+0x1de4>
   11ef4:	df002783 	ldbu	fp,158(sp)
   11ef8:	008011c4 	movi	r2,71
   11efc:	1445580e 	bge	r2,r17,13460 <___vfprintf_internal_r+0x1bc4>
   11f00:	040000f4 	movhi	r16,3
   11f04:	842a8704 	addi	r16,r16,-21988
   11f08:	00c000c4 	movi	r3,3
   11f0c:	00bfdfc4 	movi	r2,-129
   11f10:	d8c02915 	stw	r3,164(sp)
   11f14:	90a4703a 	and	r18,r18,r2
   11f18:	d8c02b15 	stw	r3,172(sp)
   11f1c:	d8002a15 	stw	zero,168(sp)
   11f20:	d8003215 	stw	zero,200(sp)
   11f24:	00003a06 	br	12010 <___vfprintf_internal_r+0x774>
   11f28:	84000214 	ori	r16,r16,8
   11f2c:	ac400007 	ldb	r17,0(r21)
   11f30:	003ebc06 	br	11a24 <__alt_data_end+0xfc011a24>
   11f34:	8025883a 	mov	r18,r16
   11f38:	dc002903 	ldbu	r16,164(sp)
   11f3c:	e011883a 	mov	r8,fp
   11f40:	84003fcc 	andi	r16,r16,255
   11f44:	8007001e 	bne	r16,zero,13b48 <___vfprintf_internal_r+0x22ac>
   11f48:	94800414 	ori	r18,r18,16
   11f4c:	9080080c 	andi	r2,r18,32
   11f50:	1002fa26 	beq	r2,zero,12b3c <___vfprintf_internal_r+0x12a0>
   11f54:	d9002e17 	ldw	r4,184(sp)
   11f58:	d9402a17 	ldw	r5,168(sp)
   11f5c:	d8002785 	stb	zero,158(sp)
   11f60:	20800204 	addi	r2,r4,8
   11f64:	24c00017 	ldw	r19,0(r4)
   11f68:	25800117 	ldw	r22,4(r4)
   11f6c:	2804b116 	blt	r5,zero,13234 <___vfprintf_internal_r+0x1998>
   11f70:	013fdfc4 	movi	r4,-129
   11f74:	9d86b03a 	or	r3,r19,r22
   11f78:	d8802e15 	stw	r2,184(sp)
   11f7c:	9124703a 	and	r18,r18,r4
   11f80:	1802fb1e 	bne	r3,zero,12b70 <___vfprintf_internal_r+0x12d4>
   11f84:	d8c02a17 	ldw	r3,168(sp)
   11f88:	0039883a 	mov	fp,zero
   11f8c:	1805e526 	beq	r3,zero,13724 <___vfprintf_internal_r+0x1e88>
   11f90:	0027883a 	mov	r19,zero
   11f94:	002d883a 	mov	r22,zero
   11f98:	dc001e04 	addi	r16,sp,120
   11f9c:	9806d0fa 	srli	r3,r19,3
   11fa0:	b008977a 	slli	r4,r22,29
   11fa4:	b02cd0fa 	srli	r22,r22,3
   11fa8:	9cc001cc 	andi	r19,r19,7
   11fac:	98800c04 	addi	r2,r19,48
   11fb0:	843fffc4 	addi	r16,r16,-1
   11fb4:	20e6b03a 	or	r19,r4,r3
   11fb8:	80800005 	stb	r2,0(r16)
   11fbc:	9d86b03a 	or	r3,r19,r22
   11fc0:	183ff61e 	bne	r3,zero,11f9c <__alt_data_end+0xfc011f9c>
   11fc4:	90c0004c 	andi	r3,r18,1
   11fc8:	18014126 	beq	r3,zero,124d0 <___vfprintf_internal_r+0xc34>
   11fcc:	10803fcc 	andi	r2,r2,255
   11fd0:	1080201c 	xori	r2,r2,128
   11fd4:	10bfe004 	addi	r2,r2,-128
   11fd8:	00c00c04 	movi	r3,48
   11fdc:	10c13c26 	beq	r2,r3,124d0 <___vfprintf_internal_r+0xc34>
   11fe0:	80ffffc5 	stb	r3,-1(r16)
   11fe4:	d8c02817 	ldw	r3,160(sp)
   11fe8:	80bfffc4 	addi	r2,r16,-1
   11fec:	1021883a 	mov	r16,r2
   11ff0:	1887c83a 	sub	r3,r3,r2
   11ff4:	d8c02b15 	stw	r3,172(sp)
   11ff8:	d8802b17 	ldw	r2,172(sp)
   11ffc:	d9002a17 	ldw	r4,168(sp)
   12000:	1100010e 	bge	r2,r4,12008 <___vfprintf_internal_r+0x76c>
   12004:	2005883a 	mov	r2,r4
   12008:	d8802915 	stw	r2,164(sp)
   1200c:	d8003215 	stw	zero,200(sp)
   12010:	e7003fcc 	andi	fp,fp,255
   12014:	e700201c 	xori	fp,fp,128
   12018:	e73fe004 	addi	fp,fp,-128
   1201c:	e0000326 	beq	fp,zero,1202c <___vfprintf_internal_r+0x790>
   12020:	d8c02917 	ldw	r3,164(sp)
   12024:	18c00044 	addi	r3,r3,1
   12028:	d8c02915 	stw	r3,164(sp)
   1202c:	90c0008c 	andi	r3,r18,2
   12030:	d8c02c15 	stw	r3,176(sp)
   12034:	18000326 	beq	r3,zero,12044 <___vfprintf_internal_r+0x7a8>
   12038:	d8c02917 	ldw	r3,164(sp)
   1203c:	18c00084 	addi	r3,r3,2
   12040:	d8c02915 	stw	r3,164(sp)
   12044:	90c0210c 	andi	r3,r18,132
   12048:	d8c03015 	stw	r3,192(sp)
   1204c:	1801c51e 	bne	r3,zero,12764 <___vfprintf_internal_r+0xec8>
   12050:	d9003117 	ldw	r4,196(sp)
   12054:	d8c02917 	ldw	r3,164(sp)
   12058:	20e7c83a 	sub	r19,r4,r3
   1205c:	04c1c10e 	bge	zero,r19,12764 <___vfprintf_internal_r+0xec8>
   12060:	02400404 	movi	r9,16
   12064:	d8c02017 	ldw	r3,128(sp)
   12068:	d8801f17 	ldw	r2,124(sp)
   1206c:	4cc52f0e 	bge	r9,r19,1352c <___vfprintf_internal_r+0x1c90>
   12070:	014000f4 	movhi	r5,3
   12074:	296aa284 	addi	r5,r5,-21878
   12078:	dc403b15 	stw	r17,236(sp)
   1207c:	d9403515 	stw	r5,212(sp)
   12080:	9823883a 	mov	r17,r19
   12084:	482d883a 	mov	r22,r9
   12088:	9027883a 	mov	r19,r18
   1208c:	070001c4 	movi	fp,7
   12090:	8025883a 	mov	r18,r16
   12094:	dc002d17 	ldw	r16,180(sp)
   12098:	00000306 	br	120a8 <___vfprintf_internal_r+0x80c>
   1209c:	8c7ffc04 	addi	r17,r17,-16
   120a0:	42000204 	addi	r8,r8,8
   120a4:	b440130e 	bge	r22,r17,120f4 <___vfprintf_internal_r+0x858>
   120a8:	010000f4 	movhi	r4,3
   120ac:	18c00404 	addi	r3,r3,16
   120b0:	10800044 	addi	r2,r2,1
   120b4:	212aa284 	addi	r4,r4,-21878
   120b8:	41000015 	stw	r4,0(r8)
   120bc:	45800115 	stw	r22,4(r8)
   120c0:	d8c02015 	stw	r3,128(sp)
   120c4:	d8801f15 	stw	r2,124(sp)
   120c8:	e0bff40e 	bge	fp,r2,1209c <__alt_data_end+0xfc01209c>
   120cc:	d9801e04 	addi	r6,sp,120
   120d0:	b80b883a 	mov	r5,r23
   120d4:	8009883a 	mov	r4,r16
   120d8:	0019ba80 	call	19ba8 <__sprint_r>
   120dc:	103ef31e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   120e0:	8c7ffc04 	addi	r17,r17,-16
   120e4:	d8c02017 	ldw	r3,128(sp)
   120e8:	d8801f17 	ldw	r2,124(sp)
   120ec:	da000404 	addi	r8,sp,16
   120f0:	b47fed16 	blt	r22,r17,120a8 <__alt_data_end+0xfc0120a8>
   120f4:	9021883a 	mov	r16,r18
   120f8:	9825883a 	mov	r18,r19
   120fc:	8827883a 	mov	r19,r17
   12100:	dc403b17 	ldw	r17,236(sp)
   12104:	d9403517 	ldw	r5,212(sp)
   12108:	98c7883a 	add	r3,r19,r3
   1210c:	10800044 	addi	r2,r2,1
   12110:	41400015 	stw	r5,0(r8)
   12114:	44c00115 	stw	r19,4(r8)
   12118:	d8c02015 	stw	r3,128(sp)
   1211c:	d8801f15 	stw	r2,124(sp)
   12120:	010001c4 	movi	r4,7
   12124:	2082c516 	blt	r4,r2,12c3c <___vfprintf_internal_r+0x13a0>
   12128:	df002787 	ldb	fp,158(sp)
   1212c:	42000204 	addi	r8,r8,8
   12130:	e0000c26 	beq	fp,zero,12164 <___vfprintf_internal_r+0x8c8>
   12134:	d8801f17 	ldw	r2,124(sp)
   12138:	d9002784 	addi	r4,sp,158
   1213c:	18c00044 	addi	r3,r3,1
   12140:	10800044 	addi	r2,r2,1
   12144:	41000015 	stw	r4,0(r8)
   12148:	01000044 	movi	r4,1
   1214c:	41000115 	stw	r4,4(r8)
   12150:	d8c02015 	stw	r3,128(sp)
   12154:	d8801f15 	stw	r2,124(sp)
   12158:	010001c4 	movi	r4,7
   1215c:	20825e16 	blt	r4,r2,12ad8 <___vfprintf_internal_r+0x123c>
   12160:	42000204 	addi	r8,r8,8
   12164:	d8802c17 	ldw	r2,176(sp)
   12168:	10000c26 	beq	r2,zero,1219c <___vfprintf_internal_r+0x900>
   1216c:	d8801f17 	ldw	r2,124(sp)
   12170:	d9002704 	addi	r4,sp,156
   12174:	18c00084 	addi	r3,r3,2
   12178:	10800044 	addi	r2,r2,1
   1217c:	41000015 	stw	r4,0(r8)
   12180:	01000084 	movi	r4,2
   12184:	41000115 	stw	r4,4(r8)
   12188:	d8c02015 	stw	r3,128(sp)
   1218c:	d8801f15 	stw	r2,124(sp)
   12190:	010001c4 	movi	r4,7
   12194:	20825816 	blt	r4,r2,12af8 <___vfprintf_internal_r+0x125c>
   12198:	42000204 	addi	r8,r8,8
   1219c:	d9003017 	ldw	r4,192(sp)
   121a0:	00802004 	movi	r2,128
   121a4:	2081bb26 	beq	r4,r2,12894 <___vfprintf_internal_r+0xff8>
   121a8:	d9402a17 	ldw	r5,168(sp)
   121ac:	d8802b17 	ldw	r2,172(sp)
   121b0:	28adc83a 	sub	r22,r5,r2
   121b4:	0580310e 	bge	zero,r22,1227c <___vfprintf_internal_r+0x9e0>
   121b8:	07000404 	movi	fp,16
   121bc:	d8801f17 	ldw	r2,124(sp)
   121c0:	e584360e 	bge	fp,r22,1329c <___vfprintf_internal_r+0x1a00>
   121c4:	014000f4 	movhi	r5,3
   121c8:	296a9e84 	addi	r5,r5,-21894
   121cc:	dc402a15 	stw	r17,168(sp)
   121d0:	d9402c15 	stw	r5,176(sp)
   121d4:	b023883a 	mov	r17,r22
   121d8:	04c001c4 	movi	r19,7
   121dc:	a82d883a 	mov	r22,r21
   121e0:	902b883a 	mov	r21,r18
   121e4:	8025883a 	mov	r18,r16
   121e8:	dc002d17 	ldw	r16,180(sp)
   121ec:	00000306 	br	121fc <___vfprintf_internal_r+0x960>
   121f0:	8c7ffc04 	addi	r17,r17,-16
   121f4:	42000204 	addi	r8,r8,8
   121f8:	e440110e 	bge	fp,r17,12240 <___vfprintf_internal_r+0x9a4>
   121fc:	18c00404 	addi	r3,r3,16
   12200:	10800044 	addi	r2,r2,1
   12204:	45000015 	stw	r20,0(r8)
   12208:	47000115 	stw	fp,4(r8)
   1220c:	d8c02015 	stw	r3,128(sp)
   12210:	d8801f15 	stw	r2,124(sp)
   12214:	98bff60e 	bge	r19,r2,121f0 <__alt_data_end+0xfc0121f0>
   12218:	d9801e04 	addi	r6,sp,120
   1221c:	b80b883a 	mov	r5,r23
   12220:	8009883a 	mov	r4,r16
   12224:	0019ba80 	call	19ba8 <__sprint_r>
   12228:	103ea01e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   1222c:	8c7ffc04 	addi	r17,r17,-16
   12230:	d8c02017 	ldw	r3,128(sp)
   12234:	d8801f17 	ldw	r2,124(sp)
   12238:	da000404 	addi	r8,sp,16
   1223c:	e47fef16 	blt	fp,r17,121fc <__alt_data_end+0xfc0121fc>
   12240:	9021883a 	mov	r16,r18
   12244:	a825883a 	mov	r18,r21
   12248:	b02b883a 	mov	r21,r22
   1224c:	882d883a 	mov	r22,r17
   12250:	dc402a17 	ldw	r17,168(sp)
   12254:	d9002c17 	ldw	r4,176(sp)
   12258:	1d87883a 	add	r3,r3,r22
   1225c:	10800044 	addi	r2,r2,1
   12260:	41000015 	stw	r4,0(r8)
   12264:	45800115 	stw	r22,4(r8)
   12268:	d8c02015 	stw	r3,128(sp)
   1226c:	d8801f15 	stw	r2,124(sp)
   12270:	010001c4 	movi	r4,7
   12274:	20821016 	blt	r4,r2,12ab8 <___vfprintf_internal_r+0x121c>
   12278:	42000204 	addi	r8,r8,8
   1227c:	9080400c 	andi	r2,r18,256
   12280:	10013a1e 	bne	r2,zero,1276c <___vfprintf_internal_r+0xed0>
   12284:	d9402b17 	ldw	r5,172(sp)
   12288:	d8801f17 	ldw	r2,124(sp)
   1228c:	44000015 	stw	r16,0(r8)
   12290:	1947883a 	add	r3,r3,r5
   12294:	10800044 	addi	r2,r2,1
   12298:	41400115 	stw	r5,4(r8)
   1229c:	d8c02015 	stw	r3,128(sp)
   122a0:	d8801f15 	stw	r2,124(sp)
   122a4:	010001c4 	movi	r4,7
   122a8:	2081f516 	blt	r4,r2,12a80 <___vfprintf_internal_r+0x11e4>
   122ac:	42000204 	addi	r8,r8,8
   122b0:	9480010c 	andi	r18,r18,4
   122b4:	90003226 	beq	r18,zero,12380 <___vfprintf_internal_r+0xae4>
   122b8:	d9403117 	ldw	r5,196(sp)
   122bc:	d8802917 	ldw	r2,164(sp)
   122c0:	28a1c83a 	sub	r16,r5,r2
   122c4:	04002e0e 	bge	zero,r16,12380 <___vfprintf_internal_r+0xae4>
   122c8:	04400404 	movi	r17,16
   122cc:	d8801f17 	ldw	r2,124(sp)
   122d0:	8c04c40e 	bge	r17,r16,135e4 <___vfprintf_internal_r+0x1d48>
   122d4:	014000f4 	movhi	r5,3
   122d8:	296aa284 	addi	r5,r5,-21878
   122dc:	d9403515 	stw	r5,212(sp)
   122e0:	048001c4 	movi	r18,7
   122e4:	dcc02d17 	ldw	r19,180(sp)
   122e8:	00000306 	br	122f8 <___vfprintf_internal_r+0xa5c>
   122ec:	843ffc04 	addi	r16,r16,-16
   122f0:	42000204 	addi	r8,r8,8
   122f4:	8c00130e 	bge	r17,r16,12344 <___vfprintf_internal_r+0xaa8>
   122f8:	010000f4 	movhi	r4,3
   122fc:	18c00404 	addi	r3,r3,16
   12300:	10800044 	addi	r2,r2,1
   12304:	212aa284 	addi	r4,r4,-21878
   12308:	41000015 	stw	r4,0(r8)
   1230c:	44400115 	stw	r17,4(r8)
   12310:	d8c02015 	stw	r3,128(sp)
   12314:	d8801f15 	stw	r2,124(sp)
   12318:	90bff40e 	bge	r18,r2,122ec <__alt_data_end+0xfc0122ec>
   1231c:	d9801e04 	addi	r6,sp,120
   12320:	b80b883a 	mov	r5,r23
   12324:	9809883a 	mov	r4,r19
   12328:	0019ba80 	call	19ba8 <__sprint_r>
   1232c:	103e5f1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12330:	843ffc04 	addi	r16,r16,-16
   12334:	d8c02017 	ldw	r3,128(sp)
   12338:	d8801f17 	ldw	r2,124(sp)
   1233c:	da000404 	addi	r8,sp,16
   12340:	8c3fed16 	blt	r17,r16,122f8 <__alt_data_end+0xfc0122f8>
   12344:	d9403517 	ldw	r5,212(sp)
   12348:	1c07883a 	add	r3,r3,r16
   1234c:	10800044 	addi	r2,r2,1
   12350:	41400015 	stw	r5,0(r8)
   12354:	44000115 	stw	r16,4(r8)
   12358:	d8c02015 	stw	r3,128(sp)
   1235c:	d8801f15 	stw	r2,124(sp)
   12360:	010001c4 	movi	r4,7
   12364:	2080060e 	bge	r4,r2,12380 <___vfprintf_internal_r+0xae4>
   12368:	d9002d17 	ldw	r4,180(sp)
   1236c:	d9801e04 	addi	r6,sp,120
   12370:	b80b883a 	mov	r5,r23
   12374:	0019ba80 	call	19ba8 <__sprint_r>
   12378:	103e4c1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   1237c:	d8c02017 	ldw	r3,128(sp)
   12380:	d8803117 	ldw	r2,196(sp)
   12384:	d9002917 	ldw	r4,164(sp)
   12388:	1100010e 	bge	r2,r4,12390 <___vfprintf_internal_r+0xaf4>
   1238c:	2005883a 	mov	r2,r4
   12390:	d9402f17 	ldw	r5,188(sp)
   12394:	288b883a 	add	r5,r5,r2
   12398:	d9402f15 	stw	r5,188(sp)
   1239c:	1801c01e 	bne	r3,zero,12aa0 <___vfprintf_internal_r+0x1204>
   123a0:	a8800007 	ldb	r2,0(r21)
   123a4:	d8001f15 	stw	zero,124(sp)
   123a8:	da000404 	addi	r8,sp,16
   123ac:	103d751e 	bne	r2,zero,11984 <__alt_data_end+0xfc011984>
   123b0:	a823883a 	mov	r17,r21
   123b4:	003d8b06 	br	119e4 <__alt_data_end+0xfc0119e4>
   123b8:	8025883a 	mov	r18,r16
   123bc:	dc002903 	ldbu	r16,164(sp)
   123c0:	e011883a 	mov	r8,fp
   123c4:	84003fcc 	andi	r16,r16,255
   123c8:	8005e51e 	bne	r16,zero,13b60 <___vfprintf_internal_r+0x22c4>
   123cc:	94800414 	ori	r18,r18,16
   123d0:	9080080c 	andi	r2,r18,32
   123d4:	10022b26 	beq	r2,zero,12c84 <___vfprintf_internal_r+0x13e8>
   123d8:	d9002e17 	ldw	r4,184(sp)
   123dc:	d9402a17 	ldw	r5,168(sp)
   123e0:	d8002785 	stb	zero,158(sp)
   123e4:	20c00204 	addi	r3,r4,8
   123e8:	24c00017 	ldw	r19,0(r4)
   123ec:	25800117 	ldw	r22,4(r4)
   123f0:	28042e16 	blt	r5,zero,134ac <___vfprintf_internal_r+0x1c10>
   123f4:	013fdfc4 	movi	r4,-129
   123f8:	9d84b03a 	or	r2,r19,r22
   123fc:	d8c02e15 	stw	r3,184(sp)
   12400:	9124703a 	and	r18,r18,r4
   12404:	0039883a 	mov	fp,zero
   12408:	103e801e 	bne	r2,zero,11e0c <__alt_data_end+0xfc011e0c>
   1240c:	d9002a17 	ldw	r4,168(sp)
   12410:	2002e01e 	bne	r4,zero,12f94 <___vfprintf_internal_r+0x16f8>
   12414:	d8002a15 	stw	zero,168(sp)
   12418:	d8002b15 	stw	zero,172(sp)
   1241c:	dc001e04 	addi	r16,sp,120
   12420:	003ef506 	br	11ff8 <__alt_data_end+0xfc011ff8>
   12424:	8025883a 	mov	r18,r16
   12428:	dc002903 	ldbu	r16,164(sp)
   1242c:	e011883a 	mov	r8,fp
   12430:	84003fcc 	andi	r16,r16,255
   12434:	8005ba1e 	bne	r16,zero,13b20 <___vfprintf_internal_r+0x2284>
   12438:	010000f4 	movhi	r4,3
   1243c:	212a8a04 	addi	r4,r4,-21976
   12440:	d9003915 	stw	r4,228(sp)
   12444:	9080080c 	andi	r2,r18,32
   12448:	10006126 	beq	r2,zero,125d0 <___vfprintf_internal_r+0xd34>
   1244c:	d9402e17 	ldw	r5,184(sp)
   12450:	2cc00017 	ldw	r19,0(r5)
   12454:	2d800117 	ldw	r22,4(r5)
   12458:	29400204 	addi	r5,r5,8
   1245c:	d9402e15 	stw	r5,184(sp)
   12460:	9080004c 	andi	r2,r18,1
   12464:	1001ac26 	beq	r2,zero,12b18 <___vfprintf_internal_r+0x127c>
   12468:	9d84b03a 	or	r2,r19,r22
   1246c:	10038526 	beq	r2,zero,13284 <___vfprintf_internal_r+0x19e8>
   12470:	d8c02a17 	ldw	r3,168(sp)
   12474:	00800c04 	movi	r2,48
   12478:	d8802705 	stb	r2,156(sp)
   1247c:	dc402745 	stb	r17,157(sp)
   12480:	d8002785 	stb	zero,158(sp)
   12484:	90800094 	ori	r2,r18,2
   12488:	18047916 	blt	r3,zero,13670 <___vfprintf_internal_r+0x1dd4>
   1248c:	00bfdfc4 	movi	r2,-129
   12490:	90a4703a 	and	r18,r18,r2
   12494:	94800094 	ori	r18,r18,2
   12498:	0039883a 	mov	fp,zero
   1249c:	d9003917 	ldw	r4,228(sp)
   124a0:	dc001e04 	addi	r16,sp,120
   124a4:	988003cc 	andi	r2,r19,15
   124a8:	b006973a 	slli	r3,r22,28
   124ac:	2085883a 	add	r2,r4,r2
   124b0:	9826d13a 	srli	r19,r19,4
   124b4:	10800003 	ldbu	r2,0(r2)
   124b8:	b02cd13a 	srli	r22,r22,4
   124bc:	843fffc4 	addi	r16,r16,-1
   124c0:	1ce6b03a 	or	r19,r3,r19
   124c4:	80800005 	stb	r2,0(r16)
   124c8:	9d84b03a 	or	r2,r19,r22
   124cc:	103ff51e 	bne	r2,zero,124a4 <__alt_data_end+0xfc0124a4>
   124d0:	d8c02817 	ldw	r3,160(sp)
   124d4:	1c07c83a 	sub	r3,r3,r16
   124d8:	d8c02b15 	stw	r3,172(sp)
   124dc:	003ec606 	br	11ff8 <__alt_data_end+0xfc011ff8>
   124e0:	8025883a 	mov	r18,r16
   124e4:	dc002903 	ldbu	r16,164(sp)
   124e8:	e011883a 	mov	r8,fp
   124ec:	84003fcc 	andi	r16,r16,255
   124f0:	803e9626 	beq	r16,zero,11f4c <__alt_data_end+0xfc011f4c>
   124f4:	d8c02b03 	ldbu	r3,172(sp)
   124f8:	d8c02785 	stb	r3,158(sp)
   124fc:	003e9306 	br	11f4c <__alt_data_end+0xfc011f4c>
   12500:	00c00044 	movi	r3,1
   12504:	d8c02905 	stb	r3,164(sp)
   12508:	00c00ac4 	movi	r3,43
   1250c:	d8c02b05 	stb	r3,172(sp)
   12510:	ac400007 	ldb	r17,0(r21)
   12514:	003d4306 	br	11a24 <__alt_data_end+0xfc011a24>
   12518:	84000814 	ori	r16,r16,32
   1251c:	ac400007 	ldb	r17,0(r21)
   12520:	003d4006 	br	11a24 <__alt_data_end+0xfc011a24>
   12524:	d8802e17 	ldw	r2,184(sp)
   12528:	8025883a 	mov	r18,r16
   1252c:	d8002785 	stb	zero,158(sp)
   12530:	14000017 	ldw	r16,0(r2)
   12534:	e011883a 	mov	r8,fp
   12538:	14c00104 	addi	r19,r2,4
   1253c:	80042d26 	beq	r16,zero,135f4 <___vfprintf_internal_r+0x1d58>
   12540:	d8c02a17 	ldw	r3,168(sp)
   12544:	1803e416 	blt	r3,zero,134d8 <___vfprintf_internal_r+0x1c3c>
   12548:	180d883a 	mov	r6,r3
   1254c:	000b883a 	mov	r5,zero
   12550:	8009883a 	mov	r4,r16
   12554:	df003d15 	stw	fp,244(sp)
   12558:	00169c80 	call	169c8 <memchr>
   1255c:	da003d17 	ldw	r8,244(sp)
   12560:	10046826 	beq	r2,zero,13704 <___vfprintf_internal_r+0x1e68>
   12564:	1405c83a 	sub	r2,r2,r16
   12568:	d8802b15 	stw	r2,172(sp)
   1256c:	1003e016 	blt	r2,zero,134f0 <___vfprintf_internal_r+0x1c54>
   12570:	df002783 	ldbu	fp,158(sp)
   12574:	d8802915 	stw	r2,164(sp)
   12578:	dcc02e15 	stw	r19,184(sp)
   1257c:	d8002a15 	stw	zero,168(sp)
   12580:	d8003215 	stw	zero,200(sp)
   12584:	003ea206 	br	12010 <__alt_data_end+0xfc012010>
   12588:	8025883a 	mov	r18,r16
   1258c:	dc002903 	ldbu	r16,164(sp)
   12590:	e011883a 	mov	r8,fp
   12594:	84003fcc 	andi	r16,r16,255
   12598:	803f8d26 	beq	r16,zero,123d0 <__alt_data_end+0xfc0123d0>
   1259c:	d8c02b03 	ldbu	r3,172(sp)
   125a0:	d8c02785 	stb	r3,158(sp)
   125a4:	003f8a06 	br	123d0 <__alt_data_end+0xfc0123d0>
   125a8:	8025883a 	mov	r18,r16
   125ac:	dc002903 	ldbu	r16,164(sp)
   125b0:	e011883a 	mov	r8,fp
   125b4:	84003fcc 	andi	r16,r16,255
   125b8:	8005661e 	bne	r16,zero,13b54 <___vfprintf_internal_r+0x22b8>
   125bc:	010000f4 	movhi	r4,3
   125c0:	212a8f04 	addi	r4,r4,-21956
   125c4:	d9003915 	stw	r4,228(sp)
   125c8:	9080080c 	andi	r2,r18,32
   125cc:	103f9f1e 	bne	r2,zero,1244c <__alt_data_end+0xfc01244c>
   125d0:	9080040c 	andi	r2,r18,16
   125d4:	1002eb26 	beq	r2,zero,13184 <___vfprintf_internal_r+0x18e8>
   125d8:	d8802e17 	ldw	r2,184(sp)
   125dc:	002d883a 	mov	r22,zero
   125e0:	14c00017 	ldw	r19,0(r2)
   125e4:	10800104 	addi	r2,r2,4
   125e8:	d8802e15 	stw	r2,184(sp)
   125ec:	003f9c06 	br	12460 <__alt_data_end+0xfc012460>
   125f0:	d8802b07 	ldb	r2,172(sp)
   125f4:	1002e11e 	bne	r2,zero,1317c <___vfprintf_internal_r+0x18e0>
   125f8:	00c00044 	movi	r3,1
   125fc:	d8c02905 	stb	r3,164(sp)
   12600:	00c00804 	movi	r3,32
   12604:	d8c02b05 	stb	r3,172(sp)
   12608:	ac400007 	ldb	r17,0(r21)
   1260c:	003d0506 	br	11a24 <__alt_data_end+0xfc011a24>
   12610:	84000054 	ori	r16,r16,1
   12614:	ac400007 	ldb	r17,0(r21)
   12618:	003d0206 	br	11a24 <__alt_data_end+0xfc011a24>
   1261c:	8025883a 	mov	r18,r16
   12620:	dc002903 	ldbu	r16,164(sp)
   12624:	e011883a 	mov	r8,fp
   12628:	84003fcc 	andi	r16,r16,255
   1262c:	803de726 	beq	r16,zero,11dcc <__alt_data_end+0xfc011dcc>
   12630:	d8c02b03 	ldbu	r3,172(sp)
   12634:	d8c02785 	stb	r3,158(sp)
   12638:	003de406 	br	11dcc <__alt_data_end+0xfc011dcc>
   1263c:	84001014 	ori	r16,r16,64
   12640:	ac400007 	ldb	r17,0(r21)
   12644:	003cf706 	br	11a24 <__alt_data_end+0xfc011a24>
   12648:	ac400007 	ldb	r17,0(r21)
   1264c:	00801b04 	movi	r2,108
   12650:	88838f26 	beq	r17,r2,13490 <___vfprintf_internal_r+0x1bf4>
   12654:	84000414 	ori	r16,r16,16
   12658:	003cf206 	br	11a24 <__alt_data_end+0xfc011a24>
   1265c:	8025883a 	mov	r18,r16
   12660:	dc002903 	ldbu	r16,164(sp)
   12664:	e011883a 	mov	r8,fp
   12668:	84003fcc 	andi	r16,r16,255
   1266c:	80053f1e 	bne	r16,zero,13b6c <___vfprintf_internal_r+0x22d0>
   12670:	9080080c 	andi	r2,r18,32
   12674:	1002d226 	beq	r2,zero,131c0 <___vfprintf_internal_r+0x1924>
   12678:	d9002e17 	ldw	r4,184(sp)
   1267c:	d9402f17 	ldw	r5,188(sp)
   12680:	20800017 	ldw	r2,0(r4)
   12684:	2807d7fa 	srai	r3,r5,31
   12688:	21000104 	addi	r4,r4,4
   1268c:	d9002e15 	stw	r4,184(sp)
   12690:	11400015 	stw	r5,0(r2)
   12694:	10c00115 	stw	r3,4(r2)
   12698:	003cb806 	br	1197c <__alt_data_end+0xfc01197c>
   1269c:	d8c02e17 	ldw	r3,184(sp)
   126a0:	d9002e17 	ldw	r4,184(sp)
   126a4:	8025883a 	mov	r18,r16
   126a8:	18800017 	ldw	r2,0(r3)
   126ac:	21000104 	addi	r4,r4,4
   126b0:	00c00044 	movi	r3,1
   126b4:	e011883a 	mov	r8,fp
   126b8:	d8c02915 	stw	r3,164(sp)
   126bc:	d8002785 	stb	zero,158(sp)
   126c0:	d8801405 	stb	r2,80(sp)
   126c4:	d9002e15 	stw	r4,184(sp)
   126c8:	d8c02b15 	stw	r3,172(sp)
   126cc:	d8002a15 	stw	zero,168(sp)
   126d0:	d8003215 	stw	zero,200(sp)
   126d4:	dc001404 	addi	r16,sp,80
   126d8:	0039883a 	mov	fp,zero
   126dc:	003e5306 	br	1202c <__alt_data_end+0xfc01202c>
   126e0:	010000f4 	movhi	r4,3
   126e4:	212a8f04 	addi	r4,r4,-21956
   126e8:	0039883a 	mov	fp,zero
   126ec:	d9003915 	stw	r4,228(sp)
   126f0:	04401e04 	movi	r17,120
   126f4:	003f6906 	br	1249c <__alt_data_end+0xfc01249c>
   126f8:	8025883a 	mov	r18,r16
   126fc:	dc002903 	ldbu	r16,164(sp)
   12700:	e011883a 	mov	r8,fp
   12704:	84003fcc 	andi	r16,r16,255
   12708:	8005081e 	bne	r16,zero,13b2c <___vfprintf_internal_r+0x2290>
   1270c:	883d6126 	beq	r17,zero,11c94 <__alt_data_end+0xfc011c94>
   12710:	00c00044 	movi	r3,1
   12714:	d8c02915 	stw	r3,164(sp)
   12718:	dc401405 	stb	r17,80(sp)
   1271c:	d8002785 	stb	zero,158(sp)
   12720:	003fe906 	br	126c8 <__alt_data_end+0xfc0126c8>
   12724:	014000f4 	movhi	r5,3
   12728:	296a8f04 	addi	r5,r5,-21956
   1272c:	d9403915 	stw	r5,228(sp)
   12730:	d8c02e15 	stw	r3,184(sp)
   12734:	1025883a 	mov	r18,r2
   12738:	04401e04 	movi	r17,120
   1273c:	9d84b03a 	or	r2,r19,r22
   12740:	1000fc1e 	bne	r2,zero,12b34 <___vfprintf_internal_r+0x1298>
   12744:	0039883a 	mov	fp,zero
   12748:	00800084 	movi	r2,2
   1274c:	10803fcc 	andi	r2,r2,255
   12750:	00c00044 	movi	r3,1
   12754:	10c20f26 	beq	r2,r3,12f94 <___vfprintf_internal_r+0x16f8>
   12758:	00c00084 	movi	r3,2
   1275c:	10fd3326 	beq	r2,r3,11c2c <__alt_data_end+0xfc011c2c>
   12760:	003e0b06 	br	11f90 <__alt_data_end+0xfc011f90>
   12764:	d8c02017 	ldw	r3,128(sp)
   12768:	003e7106 	br	12130 <__alt_data_end+0xfc012130>
   1276c:	00801944 	movi	r2,101
   12770:	14407e0e 	bge	r2,r17,1296c <___vfprintf_internal_r+0x10d0>
   12774:	d9003617 	ldw	r4,216(sp)
   12778:	d9403817 	ldw	r5,224(sp)
   1277c:	000d883a 	mov	r6,zero
   12780:	000f883a 	mov	r7,zero
   12784:	d8c03c15 	stw	r3,240(sp)
   12788:	da003d15 	stw	r8,244(sp)
   1278c:	001d92c0 	call	1d92c <__eqdf2>
   12790:	d8c03c17 	ldw	r3,240(sp)
   12794:	da003d17 	ldw	r8,244(sp)
   12798:	1000f71e 	bne	r2,zero,12b78 <___vfprintf_internal_r+0x12dc>
   1279c:	d8801f17 	ldw	r2,124(sp)
   127a0:	010000f4 	movhi	r4,3
   127a4:	212a9604 	addi	r4,r4,-21928
   127a8:	18c00044 	addi	r3,r3,1
   127ac:	10800044 	addi	r2,r2,1
   127b0:	41000015 	stw	r4,0(r8)
   127b4:	01000044 	movi	r4,1
   127b8:	41000115 	stw	r4,4(r8)
   127bc:	d8c02015 	stw	r3,128(sp)
   127c0:	d8801f15 	stw	r2,124(sp)
   127c4:	010001c4 	movi	r4,7
   127c8:	2082b816 	blt	r4,r2,132ac <___vfprintf_internal_r+0x1a10>
   127cc:	42000204 	addi	r8,r8,8
   127d0:	d8802617 	ldw	r2,152(sp)
   127d4:	d9403317 	ldw	r5,204(sp)
   127d8:	11400216 	blt	r2,r5,127e4 <___vfprintf_internal_r+0xf48>
   127dc:	9080004c 	andi	r2,r18,1
   127e0:	103eb326 	beq	r2,zero,122b0 <__alt_data_end+0xfc0122b0>
   127e4:	d8803717 	ldw	r2,220(sp)
   127e8:	d9003417 	ldw	r4,208(sp)
   127ec:	d9403717 	ldw	r5,220(sp)
   127f0:	1887883a 	add	r3,r3,r2
   127f4:	d8801f17 	ldw	r2,124(sp)
   127f8:	41000015 	stw	r4,0(r8)
   127fc:	41400115 	stw	r5,4(r8)
   12800:	10800044 	addi	r2,r2,1
   12804:	d8c02015 	stw	r3,128(sp)
   12808:	d8801f15 	stw	r2,124(sp)
   1280c:	010001c4 	movi	r4,7
   12810:	20832916 	blt	r4,r2,134b8 <___vfprintf_internal_r+0x1c1c>
   12814:	42000204 	addi	r8,r8,8
   12818:	d8803317 	ldw	r2,204(sp)
   1281c:	143fffc4 	addi	r16,r2,-1
   12820:	043ea30e 	bge	zero,r16,122b0 <__alt_data_end+0xfc0122b0>
   12824:	04400404 	movi	r17,16
   12828:	d8801f17 	ldw	r2,124(sp)
   1282c:	8c00880e 	bge	r17,r16,12a50 <___vfprintf_internal_r+0x11b4>
   12830:	014000f4 	movhi	r5,3
   12834:	296a9e84 	addi	r5,r5,-21894
   12838:	d9402c15 	stw	r5,176(sp)
   1283c:	058001c4 	movi	r22,7
   12840:	dcc02d17 	ldw	r19,180(sp)
   12844:	00000306 	br	12854 <___vfprintf_internal_r+0xfb8>
   12848:	42000204 	addi	r8,r8,8
   1284c:	843ffc04 	addi	r16,r16,-16
   12850:	8c00820e 	bge	r17,r16,12a5c <___vfprintf_internal_r+0x11c0>
   12854:	18c00404 	addi	r3,r3,16
   12858:	10800044 	addi	r2,r2,1
   1285c:	45000015 	stw	r20,0(r8)
   12860:	44400115 	stw	r17,4(r8)
   12864:	d8c02015 	stw	r3,128(sp)
   12868:	d8801f15 	stw	r2,124(sp)
   1286c:	b0bff60e 	bge	r22,r2,12848 <__alt_data_end+0xfc012848>
   12870:	d9801e04 	addi	r6,sp,120
   12874:	b80b883a 	mov	r5,r23
   12878:	9809883a 	mov	r4,r19
   1287c:	0019ba80 	call	19ba8 <__sprint_r>
   12880:	103d0a1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12884:	d8c02017 	ldw	r3,128(sp)
   12888:	d8801f17 	ldw	r2,124(sp)
   1288c:	da000404 	addi	r8,sp,16
   12890:	003fee06 	br	1284c <__alt_data_end+0xfc01284c>
   12894:	d9403117 	ldw	r5,196(sp)
   12898:	d8802917 	ldw	r2,164(sp)
   1289c:	28adc83a 	sub	r22,r5,r2
   128a0:	05be410e 	bge	zero,r22,121a8 <__alt_data_end+0xfc0121a8>
   128a4:	07000404 	movi	fp,16
   128a8:	d8801f17 	ldw	r2,124(sp)
   128ac:	e5838f0e 	bge	fp,r22,136ec <___vfprintf_internal_r+0x1e50>
   128b0:	014000f4 	movhi	r5,3
   128b4:	296a9e84 	addi	r5,r5,-21894
   128b8:	dc403015 	stw	r17,192(sp)
   128bc:	d9402c15 	stw	r5,176(sp)
   128c0:	b023883a 	mov	r17,r22
   128c4:	04c001c4 	movi	r19,7
   128c8:	a82d883a 	mov	r22,r21
   128cc:	902b883a 	mov	r21,r18
   128d0:	8025883a 	mov	r18,r16
   128d4:	dc002d17 	ldw	r16,180(sp)
   128d8:	00000306 	br	128e8 <___vfprintf_internal_r+0x104c>
   128dc:	8c7ffc04 	addi	r17,r17,-16
   128e0:	42000204 	addi	r8,r8,8
   128e4:	e440110e 	bge	fp,r17,1292c <___vfprintf_internal_r+0x1090>
   128e8:	18c00404 	addi	r3,r3,16
   128ec:	10800044 	addi	r2,r2,1
   128f0:	45000015 	stw	r20,0(r8)
   128f4:	47000115 	stw	fp,4(r8)
   128f8:	d8c02015 	stw	r3,128(sp)
   128fc:	d8801f15 	stw	r2,124(sp)
   12900:	98bff60e 	bge	r19,r2,128dc <__alt_data_end+0xfc0128dc>
   12904:	d9801e04 	addi	r6,sp,120
   12908:	b80b883a 	mov	r5,r23
   1290c:	8009883a 	mov	r4,r16
   12910:	0019ba80 	call	19ba8 <__sprint_r>
   12914:	103ce51e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12918:	8c7ffc04 	addi	r17,r17,-16
   1291c:	d8c02017 	ldw	r3,128(sp)
   12920:	d8801f17 	ldw	r2,124(sp)
   12924:	da000404 	addi	r8,sp,16
   12928:	e47fef16 	blt	fp,r17,128e8 <__alt_data_end+0xfc0128e8>
   1292c:	9021883a 	mov	r16,r18
   12930:	a825883a 	mov	r18,r21
   12934:	b02b883a 	mov	r21,r22
   12938:	882d883a 	mov	r22,r17
   1293c:	dc403017 	ldw	r17,192(sp)
   12940:	d9002c17 	ldw	r4,176(sp)
   12944:	1d87883a 	add	r3,r3,r22
   12948:	10800044 	addi	r2,r2,1
   1294c:	41000015 	stw	r4,0(r8)
   12950:	45800115 	stw	r22,4(r8)
   12954:	d8c02015 	stw	r3,128(sp)
   12958:	d8801f15 	stw	r2,124(sp)
   1295c:	010001c4 	movi	r4,7
   12960:	20818e16 	blt	r4,r2,12f9c <___vfprintf_internal_r+0x1700>
   12964:	42000204 	addi	r8,r8,8
   12968:	003e0f06 	br	121a8 <__alt_data_end+0xfc0121a8>
   1296c:	d9403317 	ldw	r5,204(sp)
   12970:	00800044 	movi	r2,1
   12974:	18c00044 	addi	r3,r3,1
   12978:	1141530e 	bge	r2,r5,12ec8 <___vfprintf_internal_r+0x162c>
   1297c:	dc401f17 	ldw	r17,124(sp)
   12980:	00800044 	movi	r2,1
   12984:	40800115 	stw	r2,4(r8)
   12988:	8c400044 	addi	r17,r17,1
   1298c:	44000015 	stw	r16,0(r8)
   12990:	d8c02015 	stw	r3,128(sp)
   12994:	dc401f15 	stw	r17,124(sp)
   12998:	008001c4 	movi	r2,7
   1299c:	14416b16 	blt	r2,r17,12f4c <___vfprintf_internal_r+0x16b0>
   129a0:	42000204 	addi	r8,r8,8
   129a4:	d8803717 	ldw	r2,220(sp)
   129a8:	d9003417 	ldw	r4,208(sp)
   129ac:	8c400044 	addi	r17,r17,1
   129b0:	10c7883a 	add	r3,r2,r3
   129b4:	40800115 	stw	r2,4(r8)
   129b8:	41000015 	stw	r4,0(r8)
   129bc:	d8c02015 	stw	r3,128(sp)
   129c0:	dc401f15 	stw	r17,124(sp)
   129c4:	008001c4 	movi	r2,7
   129c8:	14416916 	blt	r2,r17,12f70 <___vfprintf_internal_r+0x16d4>
   129cc:	45800204 	addi	r22,r8,8
   129d0:	d9003617 	ldw	r4,216(sp)
   129d4:	d9403817 	ldw	r5,224(sp)
   129d8:	000d883a 	mov	r6,zero
   129dc:	000f883a 	mov	r7,zero
   129e0:	d8c03c15 	stw	r3,240(sp)
   129e4:	001d92c0 	call	1d92c <__eqdf2>
   129e8:	d8c03c17 	ldw	r3,240(sp)
   129ec:	1000bc26 	beq	r2,zero,12ce0 <___vfprintf_internal_r+0x1444>
   129f0:	d9403317 	ldw	r5,204(sp)
   129f4:	84000044 	addi	r16,r16,1
   129f8:	8c400044 	addi	r17,r17,1
   129fc:	28bfffc4 	addi	r2,r5,-1
   12a00:	1887883a 	add	r3,r3,r2
   12a04:	b0800115 	stw	r2,4(r22)
   12a08:	b4000015 	stw	r16,0(r22)
   12a0c:	d8c02015 	stw	r3,128(sp)
   12a10:	dc401f15 	stw	r17,124(sp)
   12a14:	008001c4 	movi	r2,7
   12a18:	14414316 	blt	r2,r17,12f28 <___vfprintf_internal_r+0x168c>
   12a1c:	b5800204 	addi	r22,r22,8
   12a20:	d9003a17 	ldw	r4,232(sp)
   12a24:	df0022c4 	addi	fp,sp,139
   12a28:	8c400044 	addi	r17,r17,1
   12a2c:	20c7883a 	add	r3,r4,r3
   12a30:	b7000015 	stw	fp,0(r22)
   12a34:	b1000115 	stw	r4,4(r22)
   12a38:	d8c02015 	stw	r3,128(sp)
   12a3c:	dc401f15 	stw	r17,124(sp)
   12a40:	008001c4 	movi	r2,7
   12a44:	14400e16 	blt	r2,r17,12a80 <___vfprintf_internal_r+0x11e4>
   12a48:	b2000204 	addi	r8,r22,8
   12a4c:	003e1806 	br	122b0 <__alt_data_end+0xfc0122b0>
   12a50:	010000f4 	movhi	r4,3
   12a54:	212a9e84 	addi	r4,r4,-21894
   12a58:	d9002c15 	stw	r4,176(sp)
   12a5c:	d9002c17 	ldw	r4,176(sp)
   12a60:	1c07883a 	add	r3,r3,r16
   12a64:	44000115 	stw	r16,4(r8)
   12a68:	41000015 	stw	r4,0(r8)
   12a6c:	10800044 	addi	r2,r2,1
   12a70:	d8c02015 	stw	r3,128(sp)
   12a74:	d8801f15 	stw	r2,124(sp)
   12a78:	010001c4 	movi	r4,7
   12a7c:	20be0b0e 	bge	r4,r2,122ac <__alt_data_end+0xfc0122ac>
   12a80:	d9002d17 	ldw	r4,180(sp)
   12a84:	d9801e04 	addi	r6,sp,120
   12a88:	b80b883a 	mov	r5,r23
   12a8c:	0019ba80 	call	19ba8 <__sprint_r>
   12a90:	103c861e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12a94:	d8c02017 	ldw	r3,128(sp)
   12a98:	da000404 	addi	r8,sp,16
   12a9c:	003e0406 	br	122b0 <__alt_data_end+0xfc0122b0>
   12aa0:	d9002d17 	ldw	r4,180(sp)
   12aa4:	d9801e04 	addi	r6,sp,120
   12aa8:	b80b883a 	mov	r5,r23
   12aac:	0019ba80 	call	19ba8 <__sprint_r>
   12ab0:	103e3b26 	beq	r2,zero,123a0 <__alt_data_end+0xfc0123a0>
   12ab4:	003c7d06 	br	11cac <__alt_data_end+0xfc011cac>
   12ab8:	d9002d17 	ldw	r4,180(sp)
   12abc:	d9801e04 	addi	r6,sp,120
   12ac0:	b80b883a 	mov	r5,r23
   12ac4:	0019ba80 	call	19ba8 <__sprint_r>
   12ac8:	103c781e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12acc:	d8c02017 	ldw	r3,128(sp)
   12ad0:	da000404 	addi	r8,sp,16
   12ad4:	003de906 	br	1227c <__alt_data_end+0xfc01227c>
   12ad8:	d9002d17 	ldw	r4,180(sp)
   12adc:	d9801e04 	addi	r6,sp,120
   12ae0:	b80b883a 	mov	r5,r23
   12ae4:	0019ba80 	call	19ba8 <__sprint_r>
   12ae8:	103c701e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12aec:	d8c02017 	ldw	r3,128(sp)
   12af0:	da000404 	addi	r8,sp,16
   12af4:	003d9b06 	br	12164 <__alt_data_end+0xfc012164>
   12af8:	d9002d17 	ldw	r4,180(sp)
   12afc:	d9801e04 	addi	r6,sp,120
   12b00:	b80b883a 	mov	r5,r23
   12b04:	0019ba80 	call	19ba8 <__sprint_r>
   12b08:	103c681e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12b0c:	d8c02017 	ldw	r3,128(sp)
   12b10:	da000404 	addi	r8,sp,16
   12b14:	003da106 	br	1219c <__alt_data_end+0xfc01219c>
   12b18:	d9402a17 	ldw	r5,168(sp)
   12b1c:	d8002785 	stb	zero,158(sp)
   12b20:	283f0616 	blt	r5,zero,1273c <__alt_data_end+0xfc01273c>
   12b24:	00ffdfc4 	movi	r3,-129
   12b28:	9d84b03a 	or	r2,r19,r22
   12b2c:	90e4703a 	and	r18,r18,r3
   12b30:	103c3b26 	beq	r2,zero,11c20 <__alt_data_end+0xfc011c20>
   12b34:	0039883a 	mov	fp,zero
   12b38:	003e5806 	br	1249c <__alt_data_end+0xfc01249c>
   12b3c:	9080040c 	andi	r2,r18,16
   12b40:	1001b326 	beq	r2,zero,13210 <___vfprintf_internal_r+0x1974>
   12b44:	d8c02e17 	ldw	r3,184(sp)
   12b48:	d9002a17 	ldw	r4,168(sp)
   12b4c:	d8002785 	stb	zero,158(sp)
   12b50:	18800104 	addi	r2,r3,4
   12b54:	1cc00017 	ldw	r19,0(r3)
   12b58:	002d883a 	mov	r22,zero
   12b5c:	2001b516 	blt	r4,zero,13234 <___vfprintf_internal_r+0x1998>
   12b60:	00ffdfc4 	movi	r3,-129
   12b64:	d8802e15 	stw	r2,184(sp)
   12b68:	90e4703a 	and	r18,r18,r3
   12b6c:	983d0526 	beq	r19,zero,11f84 <__alt_data_end+0xfc011f84>
   12b70:	0039883a 	mov	fp,zero
   12b74:	003d0806 	br	11f98 <__alt_data_end+0xfc011f98>
   12b78:	dc402617 	ldw	r17,152(sp)
   12b7c:	0441d30e 	bge	zero,r17,132cc <___vfprintf_internal_r+0x1a30>
   12b80:	dc403217 	ldw	r17,200(sp)
   12b84:	d8803317 	ldw	r2,204(sp)
   12b88:	1440010e 	bge	r2,r17,12b90 <___vfprintf_internal_r+0x12f4>
   12b8c:	1023883a 	mov	r17,r2
   12b90:	04400a0e 	bge	zero,r17,12bbc <___vfprintf_internal_r+0x1320>
   12b94:	d8801f17 	ldw	r2,124(sp)
   12b98:	1c47883a 	add	r3,r3,r17
   12b9c:	44000015 	stw	r16,0(r8)
   12ba0:	10800044 	addi	r2,r2,1
   12ba4:	44400115 	stw	r17,4(r8)
   12ba8:	d8c02015 	stw	r3,128(sp)
   12bac:	d8801f15 	stw	r2,124(sp)
   12bb0:	010001c4 	movi	r4,7
   12bb4:	20826516 	blt	r4,r2,1354c <___vfprintf_internal_r+0x1cb0>
   12bb8:	42000204 	addi	r8,r8,8
   12bbc:	88026116 	blt	r17,zero,13544 <___vfprintf_internal_r+0x1ca8>
   12bc0:	d9003217 	ldw	r4,200(sp)
   12bc4:	2463c83a 	sub	r17,r4,r17
   12bc8:	04407b0e 	bge	zero,r17,12db8 <___vfprintf_internal_r+0x151c>
   12bcc:	05800404 	movi	r22,16
   12bd0:	d8801f17 	ldw	r2,124(sp)
   12bd4:	b4419d0e 	bge	r22,r17,1324c <___vfprintf_internal_r+0x19b0>
   12bd8:	010000f4 	movhi	r4,3
   12bdc:	212a9e84 	addi	r4,r4,-21894
   12be0:	d9002c15 	stw	r4,176(sp)
   12be4:	070001c4 	movi	fp,7
   12be8:	dcc02d17 	ldw	r19,180(sp)
   12bec:	00000306 	br	12bfc <___vfprintf_internal_r+0x1360>
   12bf0:	42000204 	addi	r8,r8,8
   12bf4:	8c7ffc04 	addi	r17,r17,-16
   12bf8:	b441970e 	bge	r22,r17,13258 <___vfprintf_internal_r+0x19bc>
   12bfc:	18c00404 	addi	r3,r3,16
   12c00:	10800044 	addi	r2,r2,1
   12c04:	45000015 	stw	r20,0(r8)
   12c08:	45800115 	stw	r22,4(r8)
   12c0c:	d8c02015 	stw	r3,128(sp)
   12c10:	d8801f15 	stw	r2,124(sp)
   12c14:	e0bff60e 	bge	fp,r2,12bf0 <__alt_data_end+0xfc012bf0>
   12c18:	d9801e04 	addi	r6,sp,120
   12c1c:	b80b883a 	mov	r5,r23
   12c20:	9809883a 	mov	r4,r19
   12c24:	0019ba80 	call	19ba8 <__sprint_r>
   12c28:	103c201e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12c2c:	d8c02017 	ldw	r3,128(sp)
   12c30:	d8801f17 	ldw	r2,124(sp)
   12c34:	da000404 	addi	r8,sp,16
   12c38:	003fee06 	br	12bf4 <__alt_data_end+0xfc012bf4>
   12c3c:	d9002d17 	ldw	r4,180(sp)
   12c40:	d9801e04 	addi	r6,sp,120
   12c44:	b80b883a 	mov	r5,r23
   12c48:	0019ba80 	call	19ba8 <__sprint_r>
   12c4c:	103c171e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12c50:	d8c02017 	ldw	r3,128(sp)
   12c54:	df002787 	ldb	fp,158(sp)
   12c58:	da000404 	addi	r8,sp,16
   12c5c:	003d3406 	br	12130 <__alt_data_end+0xfc012130>
   12c60:	9080040c 	andi	r2,r18,16
   12c64:	10016126 	beq	r2,zero,131ec <___vfprintf_internal_r+0x1950>
   12c68:	d9402e17 	ldw	r5,184(sp)
   12c6c:	2cc00017 	ldw	r19,0(r5)
   12c70:	29400104 	addi	r5,r5,4
   12c74:	d9402e15 	stw	r5,184(sp)
   12c78:	982dd7fa 	srai	r22,r19,31
   12c7c:	b005883a 	mov	r2,r22
   12c80:	003c5a06 	br	11dec <__alt_data_end+0xfc011dec>
   12c84:	9080040c 	andi	r2,r18,16
   12c88:	10003526 	beq	r2,zero,12d60 <___vfprintf_internal_r+0x14c4>
   12c8c:	d8c02e17 	ldw	r3,184(sp)
   12c90:	d9002a17 	ldw	r4,168(sp)
   12c94:	d8002785 	stb	zero,158(sp)
   12c98:	18800104 	addi	r2,r3,4
   12c9c:	1cc00017 	ldw	r19,0(r3)
   12ca0:	002d883a 	mov	r22,zero
   12ca4:	20003716 	blt	r4,zero,12d84 <___vfprintf_internal_r+0x14e8>
   12ca8:	00ffdfc4 	movi	r3,-129
   12cac:	d8802e15 	stw	r2,184(sp)
   12cb0:	90e4703a 	and	r18,r18,r3
   12cb4:	0039883a 	mov	fp,zero
   12cb8:	983dd426 	beq	r19,zero,1240c <__alt_data_end+0xfc01240c>
   12cbc:	00800244 	movi	r2,9
   12cc0:	14fc5336 	bltu	r2,r19,11e10 <__alt_data_end+0xfc011e10>
   12cc4:	d8c02817 	ldw	r3,160(sp)
   12cc8:	dc001dc4 	addi	r16,sp,119
   12ccc:	9cc00c04 	addi	r19,r19,48
   12cd0:	1c07c83a 	sub	r3,r3,r16
   12cd4:	dcc01dc5 	stb	r19,119(sp)
   12cd8:	d8c02b15 	stw	r3,172(sp)
   12cdc:	003cc606 	br	11ff8 <__alt_data_end+0xfc011ff8>
   12ce0:	d8803317 	ldw	r2,204(sp)
   12ce4:	143fffc4 	addi	r16,r2,-1
   12ce8:	043f4d0e 	bge	zero,r16,12a20 <__alt_data_end+0xfc012a20>
   12cec:	07000404 	movi	fp,16
   12cf0:	e400810e 	bge	fp,r16,12ef8 <___vfprintf_internal_r+0x165c>
   12cf4:	014000f4 	movhi	r5,3
   12cf8:	296a9e84 	addi	r5,r5,-21894
   12cfc:	d9402c15 	stw	r5,176(sp)
   12d00:	01c001c4 	movi	r7,7
   12d04:	dcc02d17 	ldw	r19,180(sp)
   12d08:	00000306 	br	12d18 <___vfprintf_internal_r+0x147c>
   12d0c:	b5800204 	addi	r22,r22,8
   12d10:	843ffc04 	addi	r16,r16,-16
   12d14:	e4007b0e 	bge	fp,r16,12f04 <___vfprintf_internal_r+0x1668>
   12d18:	18c00404 	addi	r3,r3,16
   12d1c:	8c400044 	addi	r17,r17,1
   12d20:	b5000015 	stw	r20,0(r22)
   12d24:	b7000115 	stw	fp,4(r22)
   12d28:	d8c02015 	stw	r3,128(sp)
   12d2c:	dc401f15 	stw	r17,124(sp)
   12d30:	3c7ff60e 	bge	r7,r17,12d0c <__alt_data_end+0xfc012d0c>
   12d34:	d9801e04 	addi	r6,sp,120
   12d38:	b80b883a 	mov	r5,r23
   12d3c:	9809883a 	mov	r4,r19
   12d40:	d9c03c15 	stw	r7,240(sp)
   12d44:	0019ba80 	call	19ba8 <__sprint_r>
   12d48:	d9c03c17 	ldw	r7,240(sp)
   12d4c:	103bd71e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12d50:	d8c02017 	ldw	r3,128(sp)
   12d54:	dc401f17 	ldw	r17,124(sp)
   12d58:	dd800404 	addi	r22,sp,16
   12d5c:	003fec06 	br	12d10 <__alt_data_end+0xfc012d10>
   12d60:	9080100c 	andi	r2,r18,64
   12d64:	d8002785 	stb	zero,158(sp)
   12d68:	10010e26 	beq	r2,zero,131a4 <___vfprintf_internal_r+0x1908>
   12d6c:	d9402e17 	ldw	r5,184(sp)
   12d70:	d8c02a17 	ldw	r3,168(sp)
   12d74:	002d883a 	mov	r22,zero
   12d78:	28800104 	addi	r2,r5,4
   12d7c:	2cc0000b 	ldhu	r19,0(r5)
   12d80:	183fc90e 	bge	r3,zero,12ca8 <__alt_data_end+0xfc012ca8>
   12d84:	d8802e15 	stw	r2,184(sp)
   12d88:	0039883a 	mov	fp,zero
   12d8c:	9d84b03a 	or	r2,r19,r22
   12d90:	103c1e1e 	bne	r2,zero,11e0c <__alt_data_end+0xfc011e0c>
   12d94:	00800044 	movi	r2,1
   12d98:	003e6c06 	br	1274c <__alt_data_end+0xfc01274c>
   12d9c:	d9002d17 	ldw	r4,180(sp)
   12da0:	d9801e04 	addi	r6,sp,120
   12da4:	b80b883a 	mov	r5,r23
   12da8:	0019ba80 	call	19ba8 <__sprint_r>
   12dac:	103bbf1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12db0:	d8c02017 	ldw	r3,128(sp)
   12db4:	da000404 	addi	r8,sp,16
   12db8:	d9003217 	ldw	r4,200(sp)
   12dbc:	d8802617 	ldw	r2,152(sp)
   12dc0:	d9403317 	ldw	r5,204(sp)
   12dc4:	8123883a 	add	r17,r16,r4
   12dc8:	11400216 	blt	r2,r5,12dd4 <___vfprintf_internal_r+0x1538>
   12dcc:	9100004c 	andi	r4,r18,1
   12dd0:	20000d26 	beq	r4,zero,12e08 <___vfprintf_internal_r+0x156c>
   12dd4:	d9003717 	ldw	r4,220(sp)
   12dd8:	d9403417 	ldw	r5,208(sp)
   12ddc:	1907883a 	add	r3,r3,r4
   12de0:	d9001f17 	ldw	r4,124(sp)
   12de4:	41400015 	stw	r5,0(r8)
   12de8:	d9403717 	ldw	r5,220(sp)
   12dec:	21000044 	addi	r4,r4,1
   12df0:	d8c02015 	stw	r3,128(sp)
   12df4:	41400115 	stw	r5,4(r8)
   12df8:	d9001f15 	stw	r4,124(sp)
   12dfc:	014001c4 	movi	r5,7
   12e00:	2901e816 	blt	r5,r4,135a4 <___vfprintf_internal_r+0x1d08>
   12e04:	42000204 	addi	r8,r8,8
   12e08:	d9003317 	ldw	r4,204(sp)
   12e0c:	8121883a 	add	r16,r16,r4
   12e10:	2085c83a 	sub	r2,r4,r2
   12e14:	8461c83a 	sub	r16,r16,r17
   12e18:	1400010e 	bge	r2,r16,12e20 <___vfprintf_internal_r+0x1584>
   12e1c:	1021883a 	mov	r16,r2
   12e20:	04000a0e 	bge	zero,r16,12e4c <___vfprintf_internal_r+0x15b0>
   12e24:	d9001f17 	ldw	r4,124(sp)
   12e28:	1c07883a 	add	r3,r3,r16
   12e2c:	44400015 	stw	r17,0(r8)
   12e30:	21000044 	addi	r4,r4,1
   12e34:	44000115 	stw	r16,4(r8)
   12e38:	d8c02015 	stw	r3,128(sp)
   12e3c:	d9001f15 	stw	r4,124(sp)
   12e40:	014001c4 	movi	r5,7
   12e44:	2901fb16 	blt	r5,r4,13634 <___vfprintf_internal_r+0x1d98>
   12e48:	42000204 	addi	r8,r8,8
   12e4c:	8001f716 	blt	r16,zero,1362c <___vfprintf_internal_r+0x1d90>
   12e50:	1421c83a 	sub	r16,r2,r16
   12e54:	043d160e 	bge	zero,r16,122b0 <__alt_data_end+0xfc0122b0>
   12e58:	04400404 	movi	r17,16
   12e5c:	d8801f17 	ldw	r2,124(sp)
   12e60:	8c3efb0e 	bge	r17,r16,12a50 <__alt_data_end+0xfc012a50>
   12e64:	014000f4 	movhi	r5,3
   12e68:	296a9e84 	addi	r5,r5,-21894
   12e6c:	d9402c15 	stw	r5,176(sp)
   12e70:	058001c4 	movi	r22,7
   12e74:	dcc02d17 	ldw	r19,180(sp)
   12e78:	00000306 	br	12e88 <___vfprintf_internal_r+0x15ec>
   12e7c:	42000204 	addi	r8,r8,8
   12e80:	843ffc04 	addi	r16,r16,-16
   12e84:	8c3ef50e 	bge	r17,r16,12a5c <__alt_data_end+0xfc012a5c>
   12e88:	18c00404 	addi	r3,r3,16
   12e8c:	10800044 	addi	r2,r2,1
   12e90:	45000015 	stw	r20,0(r8)
   12e94:	44400115 	stw	r17,4(r8)
   12e98:	d8c02015 	stw	r3,128(sp)
   12e9c:	d8801f15 	stw	r2,124(sp)
   12ea0:	b0bff60e 	bge	r22,r2,12e7c <__alt_data_end+0xfc012e7c>
   12ea4:	d9801e04 	addi	r6,sp,120
   12ea8:	b80b883a 	mov	r5,r23
   12eac:	9809883a 	mov	r4,r19
   12eb0:	0019ba80 	call	19ba8 <__sprint_r>
   12eb4:	103b7d1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12eb8:	d8c02017 	ldw	r3,128(sp)
   12ebc:	d8801f17 	ldw	r2,124(sp)
   12ec0:	da000404 	addi	r8,sp,16
   12ec4:	003fee06 	br	12e80 <__alt_data_end+0xfc012e80>
   12ec8:	9088703a 	and	r4,r18,r2
   12ecc:	203eab1e 	bne	r4,zero,1297c <__alt_data_end+0xfc01297c>
   12ed0:	dc401f17 	ldw	r17,124(sp)
   12ed4:	40800115 	stw	r2,4(r8)
   12ed8:	44000015 	stw	r16,0(r8)
   12edc:	8c400044 	addi	r17,r17,1
   12ee0:	d8c02015 	stw	r3,128(sp)
   12ee4:	dc401f15 	stw	r17,124(sp)
   12ee8:	008001c4 	movi	r2,7
   12eec:	14400e16 	blt	r2,r17,12f28 <___vfprintf_internal_r+0x168c>
   12ef0:	45800204 	addi	r22,r8,8
   12ef4:	003eca06 	br	12a20 <__alt_data_end+0xfc012a20>
   12ef8:	010000f4 	movhi	r4,3
   12efc:	212a9e84 	addi	r4,r4,-21894
   12f00:	d9002c15 	stw	r4,176(sp)
   12f04:	d8802c17 	ldw	r2,176(sp)
   12f08:	1c07883a 	add	r3,r3,r16
   12f0c:	8c400044 	addi	r17,r17,1
   12f10:	b0800015 	stw	r2,0(r22)
   12f14:	b4000115 	stw	r16,4(r22)
   12f18:	d8c02015 	stw	r3,128(sp)
   12f1c:	dc401f15 	stw	r17,124(sp)
   12f20:	008001c4 	movi	r2,7
   12f24:	147ebd0e 	bge	r2,r17,12a1c <__alt_data_end+0xfc012a1c>
   12f28:	d9002d17 	ldw	r4,180(sp)
   12f2c:	d9801e04 	addi	r6,sp,120
   12f30:	b80b883a 	mov	r5,r23
   12f34:	0019ba80 	call	19ba8 <__sprint_r>
   12f38:	103b5c1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12f3c:	d8c02017 	ldw	r3,128(sp)
   12f40:	dc401f17 	ldw	r17,124(sp)
   12f44:	dd800404 	addi	r22,sp,16
   12f48:	003eb506 	br	12a20 <__alt_data_end+0xfc012a20>
   12f4c:	d9002d17 	ldw	r4,180(sp)
   12f50:	d9801e04 	addi	r6,sp,120
   12f54:	b80b883a 	mov	r5,r23
   12f58:	0019ba80 	call	19ba8 <__sprint_r>
   12f5c:	103b531e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12f60:	d8c02017 	ldw	r3,128(sp)
   12f64:	dc401f17 	ldw	r17,124(sp)
   12f68:	da000404 	addi	r8,sp,16
   12f6c:	003e8d06 	br	129a4 <__alt_data_end+0xfc0129a4>
   12f70:	d9002d17 	ldw	r4,180(sp)
   12f74:	d9801e04 	addi	r6,sp,120
   12f78:	b80b883a 	mov	r5,r23
   12f7c:	0019ba80 	call	19ba8 <__sprint_r>
   12f80:	103b4a1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12f84:	d8c02017 	ldw	r3,128(sp)
   12f88:	dc401f17 	ldw	r17,124(sp)
   12f8c:	dd800404 	addi	r22,sp,16
   12f90:	003e8f06 	br	129d0 <__alt_data_end+0xfc0129d0>
   12f94:	0027883a 	mov	r19,zero
   12f98:	003f4a06 	br	12cc4 <__alt_data_end+0xfc012cc4>
   12f9c:	d9002d17 	ldw	r4,180(sp)
   12fa0:	d9801e04 	addi	r6,sp,120
   12fa4:	b80b883a 	mov	r5,r23
   12fa8:	0019ba80 	call	19ba8 <__sprint_r>
   12fac:	103b3f1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   12fb0:	d8c02017 	ldw	r3,128(sp)
   12fb4:	da000404 	addi	r8,sp,16
   12fb8:	003c7b06 	br	121a8 <__alt_data_end+0xfc0121a8>
   12fbc:	d9402a17 	ldw	r5,168(sp)
   12fc0:	04e7c83a 	sub	r19,zero,r19
   12fc4:	07000b44 	movi	fp,45
   12fc8:	9804c03a 	cmpne	r2,r19,zero
   12fcc:	05adc83a 	sub	r22,zero,r22
   12fd0:	df002785 	stb	fp,158(sp)
   12fd4:	b0adc83a 	sub	r22,r22,r2
   12fd8:	28017b16 	blt	r5,zero,135c8 <___vfprintf_internal_r+0x1d2c>
   12fdc:	00bfdfc4 	movi	r2,-129
   12fe0:	90a4703a 	and	r18,r18,r2
   12fe4:	003b8906 	br	11e0c <__alt_data_end+0xfc011e0c>
   12fe8:	d9003617 	ldw	r4,216(sp)
   12fec:	d9403817 	ldw	r5,224(sp)
   12ff0:	da003d15 	stw	r8,244(sp)
   12ff4:	001838c0 	call	1838c <__fpclassifyd>
   12ff8:	da003d17 	ldw	r8,244(sp)
   12ffc:	1000f026 	beq	r2,zero,133c0 <___vfprintf_internal_r+0x1b24>
   13000:	d9002a17 	ldw	r4,168(sp)
   13004:	05bff7c4 	movi	r22,-33
   13008:	00bfffc4 	movi	r2,-1
   1300c:	8dac703a 	and	r22,r17,r22
   13010:	20820026 	beq	r4,r2,13814 <___vfprintf_internal_r+0x1f78>
   13014:	008011c4 	movi	r2,71
   13018:	b081f726 	beq	r22,r2,137f8 <___vfprintf_internal_r+0x1f5c>
   1301c:	d9003817 	ldw	r4,224(sp)
   13020:	90c04014 	ori	r3,r18,256
   13024:	d8c02c15 	stw	r3,176(sp)
   13028:	20021516 	blt	r4,zero,13880 <___vfprintf_internal_r+0x1fe4>
   1302c:	dcc03817 	ldw	r19,224(sp)
   13030:	d8002905 	stb	zero,164(sp)
   13034:	00801984 	movi	r2,102
   13038:	8881f926 	beq	r17,r2,13820 <___vfprintf_internal_r+0x1f84>
   1303c:	00801184 	movi	r2,70
   13040:	88821c26 	beq	r17,r2,138b4 <___vfprintf_internal_r+0x2018>
   13044:	00801144 	movi	r2,69
   13048:	b081ef26 	beq	r22,r2,13808 <___vfprintf_internal_r+0x1f6c>
   1304c:	d8c02a17 	ldw	r3,168(sp)
   13050:	d8802104 	addi	r2,sp,132
   13054:	d8800315 	stw	r2,12(sp)
   13058:	d9403617 	ldw	r5,216(sp)
   1305c:	d8802504 	addi	r2,sp,148
   13060:	d9002d17 	ldw	r4,180(sp)
   13064:	d8800215 	stw	r2,8(sp)
   13068:	d8802604 	addi	r2,sp,152
   1306c:	d8c00015 	stw	r3,0(sp)
   13070:	d8800115 	stw	r2,4(sp)
   13074:	01c00084 	movi	r7,2
   13078:	980d883a 	mov	r6,r19
   1307c:	d8c03c15 	stw	r3,240(sp)
   13080:	da003d15 	stw	r8,244(sp)
   13084:	0013fcc0 	call	13fcc <_dtoa_r>
   13088:	1021883a 	mov	r16,r2
   1308c:	008019c4 	movi	r2,103
   13090:	d8c03c17 	ldw	r3,240(sp)
   13094:	da003d17 	ldw	r8,244(sp)
   13098:	88817126 	beq	r17,r2,13660 <___vfprintf_internal_r+0x1dc4>
   1309c:	008011c4 	movi	r2,71
   130a0:	88829126 	beq	r17,r2,13ae8 <___vfprintf_internal_r+0x224c>
   130a4:	80f9883a 	add	fp,r16,r3
   130a8:	d9003617 	ldw	r4,216(sp)
   130ac:	000d883a 	mov	r6,zero
   130b0:	000f883a 	mov	r7,zero
   130b4:	980b883a 	mov	r5,r19
   130b8:	da003d15 	stw	r8,244(sp)
   130bc:	001d92c0 	call	1d92c <__eqdf2>
   130c0:	da003d17 	ldw	r8,244(sp)
   130c4:	10018d26 	beq	r2,zero,136fc <___vfprintf_internal_r+0x1e60>
   130c8:	d8802117 	ldw	r2,132(sp)
   130cc:	1700062e 	bgeu	r2,fp,130e8 <___vfprintf_internal_r+0x184c>
   130d0:	01000c04 	movi	r4,48
   130d4:	10c00044 	addi	r3,r2,1
   130d8:	d8c02115 	stw	r3,132(sp)
   130dc:	11000005 	stb	r4,0(r2)
   130e0:	d8802117 	ldw	r2,132(sp)
   130e4:	173ffb36 	bltu	r2,fp,130d4 <__alt_data_end+0xfc0130d4>
   130e8:	1405c83a 	sub	r2,r2,r16
   130ec:	d8803315 	stw	r2,204(sp)
   130f0:	008011c4 	movi	r2,71
   130f4:	b0817626 	beq	r22,r2,136d0 <___vfprintf_internal_r+0x1e34>
   130f8:	00801944 	movi	r2,101
   130fc:	1442800e 	bge	r2,r17,13b00 <___vfprintf_internal_r+0x2264>
   13100:	d8c02617 	ldw	r3,152(sp)
   13104:	00801984 	movi	r2,102
   13108:	d8c03215 	stw	r3,200(sp)
   1310c:	8881fe26 	beq	r17,r2,13908 <___vfprintf_internal_r+0x206c>
   13110:	d8c03217 	ldw	r3,200(sp)
   13114:	d9003317 	ldw	r4,204(sp)
   13118:	1901dd16 	blt	r3,r4,13890 <___vfprintf_internal_r+0x1ff4>
   1311c:	9480004c 	andi	r18,r18,1
   13120:	90022b1e 	bne	r18,zero,139d0 <___vfprintf_internal_r+0x2134>
   13124:	1805883a 	mov	r2,r3
   13128:	18028316 	blt	r3,zero,13b38 <___vfprintf_internal_r+0x229c>
   1312c:	d8c03217 	ldw	r3,200(sp)
   13130:	044019c4 	movi	r17,103
   13134:	d8c02b15 	stw	r3,172(sp)
   13138:	df002907 	ldb	fp,164(sp)
   1313c:	e001531e 	bne	fp,zero,1368c <___vfprintf_internal_r+0x1df0>
   13140:	df002783 	ldbu	fp,158(sp)
   13144:	d8802915 	stw	r2,164(sp)
   13148:	dc802c17 	ldw	r18,176(sp)
   1314c:	d8002a15 	stw	zero,168(sp)
   13150:	003baf06 	br	12010 <__alt_data_end+0xfc012010>
   13154:	d8c02e17 	ldw	r3,184(sp)
   13158:	d9002e17 	ldw	r4,184(sp)
   1315c:	d9402e17 	ldw	r5,184(sp)
   13160:	18c00017 	ldw	r3,0(r3)
   13164:	21000117 	ldw	r4,4(r4)
   13168:	29400204 	addi	r5,r5,8
   1316c:	d8c03615 	stw	r3,216(sp)
   13170:	d9003815 	stw	r4,224(sp)
   13174:	d9402e15 	stw	r5,184(sp)
   13178:	003b5006 	br	11ebc <__alt_data_end+0xfc011ebc>
   1317c:	ac400007 	ldb	r17,0(r21)
   13180:	003a2806 	br	11a24 <__alt_data_end+0xfc011a24>
   13184:	9080100c 	andi	r2,r18,64
   13188:	1000a826 	beq	r2,zero,1342c <___vfprintf_internal_r+0x1b90>
   1318c:	d8c02e17 	ldw	r3,184(sp)
   13190:	002d883a 	mov	r22,zero
   13194:	1cc0000b 	ldhu	r19,0(r3)
   13198:	18c00104 	addi	r3,r3,4
   1319c:	d8c02e15 	stw	r3,184(sp)
   131a0:	003caf06 	br	12460 <__alt_data_end+0xfc012460>
   131a4:	d9002e17 	ldw	r4,184(sp)
   131a8:	d9402a17 	ldw	r5,168(sp)
   131ac:	002d883a 	mov	r22,zero
   131b0:	20800104 	addi	r2,r4,4
   131b4:	24c00017 	ldw	r19,0(r4)
   131b8:	283ebb0e 	bge	r5,zero,12ca8 <__alt_data_end+0xfc012ca8>
   131bc:	003ef106 	br	12d84 <__alt_data_end+0xfc012d84>
   131c0:	9080040c 	andi	r2,r18,16
   131c4:	1000921e 	bne	r2,zero,13410 <___vfprintf_internal_r+0x1b74>
   131c8:	9480100c 	andi	r18,r18,64
   131cc:	90013926 	beq	r18,zero,136b4 <___vfprintf_internal_r+0x1e18>
   131d0:	d9402e17 	ldw	r5,184(sp)
   131d4:	d8c02f17 	ldw	r3,188(sp)
   131d8:	28800017 	ldw	r2,0(r5)
   131dc:	29400104 	addi	r5,r5,4
   131e0:	d9402e15 	stw	r5,184(sp)
   131e4:	10c0000d 	sth	r3,0(r2)
   131e8:	0039e406 	br	1197c <__alt_data_end+0xfc01197c>
   131ec:	9080100c 	andi	r2,r18,64
   131f0:	10008026 	beq	r2,zero,133f4 <___vfprintf_internal_r+0x1b58>
   131f4:	d8802e17 	ldw	r2,184(sp)
   131f8:	14c0000f 	ldh	r19,0(r2)
   131fc:	10800104 	addi	r2,r2,4
   13200:	d8802e15 	stw	r2,184(sp)
   13204:	982dd7fa 	srai	r22,r19,31
   13208:	b005883a 	mov	r2,r22
   1320c:	003af706 	br	11dec <__alt_data_end+0xfc011dec>
   13210:	9080100c 	andi	r2,r18,64
   13214:	d8002785 	stb	zero,158(sp)
   13218:	10008a1e 	bne	r2,zero,13444 <___vfprintf_internal_r+0x1ba8>
   1321c:	d9002e17 	ldw	r4,184(sp)
   13220:	d9402a17 	ldw	r5,168(sp)
   13224:	002d883a 	mov	r22,zero
   13228:	20800104 	addi	r2,r4,4
   1322c:	24c00017 	ldw	r19,0(r4)
   13230:	283e4b0e 	bge	r5,zero,12b60 <__alt_data_end+0xfc012b60>
   13234:	9d86b03a 	or	r3,r19,r22
   13238:	d8802e15 	stw	r2,184(sp)
   1323c:	183e4c1e 	bne	r3,zero,12b70 <__alt_data_end+0xfc012b70>
   13240:	0039883a 	mov	fp,zero
   13244:	0005883a 	mov	r2,zero
   13248:	003d4006 	br	1274c <__alt_data_end+0xfc01274c>
   1324c:	014000f4 	movhi	r5,3
   13250:	296a9e84 	addi	r5,r5,-21894
   13254:	d9402c15 	stw	r5,176(sp)
   13258:	d9402c17 	ldw	r5,176(sp)
   1325c:	1c47883a 	add	r3,r3,r17
   13260:	10800044 	addi	r2,r2,1
   13264:	41400015 	stw	r5,0(r8)
   13268:	44400115 	stw	r17,4(r8)
   1326c:	d8c02015 	stw	r3,128(sp)
   13270:	d8801f15 	stw	r2,124(sp)
   13274:	010001c4 	movi	r4,7
   13278:	20bec816 	blt	r4,r2,12d9c <__alt_data_end+0xfc012d9c>
   1327c:	42000204 	addi	r8,r8,8
   13280:	003ecd06 	br	12db8 <__alt_data_end+0xfc012db8>
   13284:	d9002a17 	ldw	r4,168(sp)
   13288:	d8002785 	stb	zero,158(sp)
   1328c:	203d2d16 	blt	r4,zero,12744 <__alt_data_end+0xfc012744>
   13290:	00bfdfc4 	movi	r2,-129
   13294:	90a4703a 	and	r18,r18,r2
   13298:	003a6106 	br	11c20 <__alt_data_end+0xfc011c20>
   1329c:	010000f4 	movhi	r4,3
   132a0:	212a9e84 	addi	r4,r4,-21894
   132a4:	d9002c15 	stw	r4,176(sp)
   132a8:	003bea06 	br	12254 <__alt_data_end+0xfc012254>
   132ac:	d9002d17 	ldw	r4,180(sp)
   132b0:	d9801e04 	addi	r6,sp,120
   132b4:	b80b883a 	mov	r5,r23
   132b8:	0019ba80 	call	19ba8 <__sprint_r>
   132bc:	103a7b1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   132c0:	d8c02017 	ldw	r3,128(sp)
   132c4:	da000404 	addi	r8,sp,16
   132c8:	003d4106 	br	127d0 <__alt_data_end+0xfc0127d0>
   132cc:	d8801f17 	ldw	r2,124(sp)
   132d0:	014000f4 	movhi	r5,3
   132d4:	01000044 	movi	r4,1
   132d8:	18c00044 	addi	r3,r3,1
   132dc:	10800044 	addi	r2,r2,1
   132e0:	296a9604 	addi	r5,r5,-21928
   132e4:	41000115 	stw	r4,4(r8)
   132e8:	41400015 	stw	r5,0(r8)
   132ec:	d8c02015 	stw	r3,128(sp)
   132f0:	d8801f15 	stw	r2,124(sp)
   132f4:	010001c4 	movi	r4,7
   132f8:	20805c16 	blt	r4,r2,1346c <___vfprintf_internal_r+0x1bd0>
   132fc:	42000204 	addi	r8,r8,8
   13300:	8800041e 	bne	r17,zero,13314 <___vfprintf_internal_r+0x1a78>
   13304:	d8803317 	ldw	r2,204(sp)
   13308:	1000021e 	bne	r2,zero,13314 <___vfprintf_internal_r+0x1a78>
   1330c:	9080004c 	andi	r2,r18,1
   13310:	103be726 	beq	r2,zero,122b0 <__alt_data_end+0xfc0122b0>
   13314:	d9003717 	ldw	r4,220(sp)
   13318:	d8801f17 	ldw	r2,124(sp)
   1331c:	d9403417 	ldw	r5,208(sp)
   13320:	20c7883a 	add	r3,r4,r3
   13324:	10800044 	addi	r2,r2,1
   13328:	41000115 	stw	r4,4(r8)
   1332c:	41400015 	stw	r5,0(r8)
   13330:	d8c02015 	stw	r3,128(sp)
   13334:	d8801f15 	stw	r2,124(sp)
   13338:	010001c4 	movi	r4,7
   1333c:	20812116 	blt	r4,r2,137c4 <___vfprintf_internal_r+0x1f28>
   13340:	42000204 	addi	r8,r8,8
   13344:	0463c83a 	sub	r17,zero,r17
   13348:	0440730e 	bge	zero,r17,13518 <___vfprintf_internal_r+0x1c7c>
   1334c:	05800404 	movi	r22,16
   13350:	b440860e 	bge	r22,r17,1356c <___vfprintf_internal_r+0x1cd0>
   13354:	014000f4 	movhi	r5,3
   13358:	296a9e84 	addi	r5,r5,-21894
   1335c:	d9402c15 	stw	r5,176(sp)
   13360:	070001c4 	movi	fp,7
   13364:	dcc02d17 	ldw	r19,180(sp)
   13368:	00000306 	br	13378 <___vfprintf_internal_r+0x1adc>
   1336c:	42000204 	addi	r8,r8,8
   13370:	8c7ffc04 	addi	r17,r17,-16
   13374:	b440800e 	bge	r22,r17,13578 <___vfprintf_internal_r+0x1cdc>
   13378:	18c00404 	addi	r3,r3,16
   1337c:	10800044 	addi	r2,r2,1
   13380:	45000015 	stw	r20,0(r8)
   13384:	45800115 	stw	r22,4(r8)
   13388:	d8c02015 	stw	r3,128(sp)
   1338c:	d8801f15 	stw	r2,124(sp)
   13390:	e0bff60e 	bge	fp,r2,1336c <__alt_data_end+0xfc01336c>
   13394:	d9801e04 	addi	r6,sp,120
   13398:	b80b883a 	mov	r5,r23
   1339c:	9809883a 	mov	r4,r19
   133a0:	0019ba80 	call	19ba8 <__sprint_r>
   133a4:	103a411e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   133a8:	d8c02017 	ldw	r3,128(sp)
   133ac:	d8801f17 	ldw	r2,124(sp)
   133b0:	da000404 	addi	r8,sp,16
   133b4:	003fee06 	br	13370 <__alt_data_end+0xfc013370>
   133b8:	00bfffc4 	movi	r2,-1
   133bc:	003a3f06 	br	11cbc <__alt_data_end+0xfc011cbc>
   133c0:	008011c4 	movi	r2,71
   133c4:	1440b816 	blt	r2,r17,136a8 <___vfprintf_internal_r+0x1e0c>
   133c8:	040000f4 	movhi	r16,3
   133cc:	842a8804 	addi	r16,r16,-21984
   133d0:	00c000c4 	movi	r3,3
   133d4:	00bfdfc4 	movi	r2,-129
   133d8:	d8c02915 	stw	r3,164(sp)
   133dc:	90a4703a 	and	r18,r18,r2
   133e0:	df002783 	ldbu	fp,158(sp)
   133e4:	d8c02b15 	stw	r3,172(sp)
   133e8:	d8002a15 	stw	zero,168(sp)
   133ec:	d8003215 	stw	zero,200(sp)
   133f0:	003b0706 	br	12010 <__alt_data_end+0xfc012010>
   133f4:	d8c02e17 	ldw	r3,184(sp)
   133f8:	1cc00017 	ldw	r19,0(r3)
   133fc:	18c00104 	addi	r3,r3,4
   13400:	d8c02e15 	stw	r3,184(sp)
   13404:	982dd7fa 	srai	r22,r19,31
   13408:	b005883a 	mov	r2,r22
   1340c:	003a7706 	br	11dec <__alt_data_end+0xfc011dec>
   13410:	d8c02e17 	ldw	r3,184(sp)
   13414:	d9002f17 	ldw	r4,188(sp)
   13418:	18800017 	ldw	r2,0(r3)
   1341c:	18c00104 	addi	r3,r3,4
   13420:	d8c02e15 	stw	r3,184(sp)
   13424:	11000015 	stw	r4,0(r2)
   13428:	00395406 	br	1197c <__alt_data_end+0xfc01197c>
   1342c:	d9002e17 	ldw	r4,184(sp)
   13430:	002d883a 	mov	r22,zero
   13434:	24c00017 	ldw	r19,0(r4)
   13438:	21000104 	addi	r4,r4,4
   1343c:	d9002e15 	stw	r4,184(sp)
   13440:	003c0706 	br	12460 <__alt_data_end+0xfc012460>
   13444:	d9402e17 	ldw	r5,184(sp)
   13448:	d8c02a17 	ldw	r3,168(sp)
   1344c:	002d883a 	mov	r22,zero
   13450:	28800104 	addi	r2,r5,4
   13454:	2cc0000b 	ldhu	r19,0(r5)
   13458:	183dc10e 	bge	r3,zero,12b60 <__alt_data_end+0xfc012b60>
   1345c:	003f7506 	br	13234 <__alt_data_end+0xfc013234>
   13460:	040000f4 	movhi	r16,3
   13464:	842a8604 	addi	r16,r16,-21992
   13468:	003aa706 	br	11f08 <__alt_data_end+0xfc011f08>
   1346c:	d9002d17 	ldw	r4,180(sp)
   13470:	d9801e04 	addi	r6,sp,120
   13474:	b80b883a 	mov	r5,r23
   13478:	0019ba80 	call	19ba8 <__sprint_r>
   1347c:	103a0b1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   13480:	dc402617 	ldw	r17,152(sp)
   13484:	d8c02017 	ldw	r3,128(sp)
   13488:	da000404 	addi	r8,sp,16
   1348c:	003f9c06 	br	13300 <__alt_data_end+0xfc013300>
   13490:	ac400043 	ldbu	r17,1(r21)
   13494:	84000814 	ori	r16,r16,32
   13498:	ad400044 	addi	r21,r21,1
   1349c:	8c403fcc 	andi	r17,r17,255
   134a0:	8c40201c 	xori	r17,r17,128
   134a4:	8c7fe004 	addi	r17,r17,-128
   134a8:	00395e06 	br	11a24 <__alt_data_end+0xfc011a24>
   134ac:	d8c02e15 	stw	r3,184(sp)
   134b0:	0039883a 	mov	fp,zero
   134b4:	003e3506 	br	12d8c <__alt_data_end+0xfc012d8c>
   134b8:	d9002d17 	ldw	r4,180(sp)
   134bc:	d9801e04 	addi	r6,sp,120
   134c0:	b80b883a 	mov	r5,r23
   134c4:	0019ba80 	call	19ba8 <__sprint_r>
   134c8:	1039f81e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   134cc:	d8c02017 	ldw	r3,128(sp)
   134d0:	da000404 	addi	r8,sp,16
   134d4:	003cd006 	br	12818 <__alt_data_end+0xfc012818>
   134d8:	8009883a 	mov	r4,r16
   134dc:	df003d15 	stw	fp,244(sp)
   134e0:	000f5400 	call	f540 <strlen>
   134e4:	d8802b15 	stw	r2,172(sp)
   134e8:	da003d17 	ldw	r8,244(sp)
   134ec:	103c200e 	bge	r2,zero,12570 <__alt_data_end+0xfc012570>
   134f0:	0005883a 	mov	r2,zero
   134f4:	003c1e06 	br	12570 <__alt_data_end+0xfc012570>
   134f8:	d9002d17 	ldw	r4,180(sp)
   134fc:	d9801e04 	addi	r6,sp,120
   13500:	b80b883a 	mov	r5,r23
   13504:	0019ba80 	call	19ba8 <__sprint_r>
   13508:	1039e81e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   1350c:	d8c02017 	ldw	r3,128(sp)
   13510:	d8801f17 	ldw	r2,124(sp)
   13514:	da000404 	addi	r8,sp,16
   13518:	d9403317 	ldw	r5,204(sp)
   1351c:	10800044 	addi	r2,r2,1
   13520:	44000015 	stw	r16,0(r8)
   13524:	28c7883a 	add	r3,r5,r3
   13528:	003b5b06 	br	12298 <__alt_data_end+0xfc012298>
   1352c:	010000f4 	movhi	r4,3
   13530:	212aa284 	addi	r4,r4,-21878
   13534:	d9003515 	stw	r4,212(sp)
   13538:	003af206 	br	12104 <__alt_data_end+0xfc012104>
   1353c:	013fffc4 	movi	r4,-1
   13540:	003a0806 	br	11d64 <__alt_data_end+0xfc011d64>
   13544:	0023883a 	mov	r17,zero
   13548:	003d9d06 	br	12bc0 <__alt_data_end+0xfc012bc0>
   1354c:	d9002d17 	ldw	r4,180(sp)
   13550:	d9801e04 	addi	r6,sp,120
   13554:	b80b883a 	mov	r5,r23
   13558:	0019ba80 	call	19ba8 <__sprint_r>
   1355c:	1039d31e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   13560:	d8c02017 	ldw	r3,128(sp)
   13564:	da000404 	addi	r8,sp,16
   13568:	003d9406 	br	12bbc <__alt_data_end+0xfc012bbc>
   1356c:	010000f4 	movhi	r4,3
   13570:	212a9e84 	addi	r4,r4,-21894
   13574:	d9002c15 	stw	r4,176(sp)
   13578:	d9002c17 	ldw	r4,176(sp)
   1357c:	1c47883a 	add	r3,r3,r17
   13580:	10800044 	addi	r2,r2,1
   13584:	41000015 	stw	r4,0(r8)
   13588:	44400115 	stw	r17,4(r8)
   1358c:	d8c02015 	stw	r3,128(sp)
   13590:	d8801f15 	stw	r2,124(sp)
   13594:	010001c4 	movi	r4,7
   13598:	20bfd716 	blt	r4,r2,134f8 <__alt_data_end+0xfc0134f8>
   1359c:	42000204 	addi	r8,r8,8
   135a0:	003fdd06 	br	13518 <__alt_data_end+0xfc013518>
   135a4:	d9002d17 	ldw	r4,180(sp)
   135a8:	d9801e04 	addi	r6,sp,120
   135ac:	b80b883a 	mov	r5,r23
   135b0:	0019ba80 	call	19ba8 <__sprint_r>
   135b4:	1039bd1e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   135b8:	d8802617 	ldw	r2,152(sp)
   135bc:	d8c02017 	ldw	r3,128(sp)
   135c0:	da000404 	addi	r8,sp,16
   135c4:	003e1006 	br	12e08 <__alt_data_end+0xfc012e08>
   135c8:	00800044 	movi	r2,1
   135cc:	10803fcc 	andi	r2,r2,255
   135d0:	00c00044 	movi	r3,1
   135d4:	10fa0d26 	beq	r2,r3,11e0c <__alt_data_end+0xfc011e0c>
   135d8:	00c00084 	movi	r3,2
   135dc:	10fbaf26 	beq	r2,r3,1249c <__alt_data_end+0xfc01249c>
   135e0:	003a6d06 	br	11f98 <__alt_data_end+0xfc011f98>
   135e4:	010000f4 	movhi	r4,3
   135e8:	212aa284 	addi	r4,r4,-21878
   135ec:	d9003515 	stw	r4,212(sp)
   135f0:	003b5406 	br	12344 <__alt_data_end+0xfc012344>
   135f4:	d8802a17 	ldw	r2,168(sp)
   135f8:	00c00184 	movi	r3,6
   135fc:	1880012e 	bgeu	r3,r2,13604 <___vfprintf_internal_r+0x1d68>
   13600:	1805883a 	mov	r2,r3
   13604:	d8802b15 	stw	r2,172(sp)
   13608:	1000ef16 	blt	r2,zero,139c8 <___vfprintf_internal_r+0x212c>
   1360c:	040000f4 	movhi	r16,3
   13610:	d8802915 	stw	r2,164(sp)
   13614:	dcc02e15 	stw	r19,184(sp)
   13618:	d8002a15 	stw	zero,168(sp)
   1361c:	d8003215 	stw	zero,200(sp)
   13620:	842a9404 	addi	r16,r16,-21936
   13624:	0039883a 	mov	fp,zero
   13628:	003a8006 	br	1202c <__alt_data_end+0xfc01202c>
   1362c:	0021883a 	mov	r16,zero
   13630:	003e0706 	br	12e50 <__alt_data_end+0xfc012e50>
   13634:	d9002d17 	ldw	r4,180(sp)
   13638:	d9801e04 	addi	r6,sp,120
   1363c:	b80b883a 	mov	r5,r23
   13640:	0019ba80 	call	19ba8 <__sprint_r>
   13644:	1039991e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   13648:	d8802617 	ldw	r2,152(sp)
   1364c:	d9403317 	ldw	r5,204(sp)
   13650:	d8c02017 	ldw	r3,128(sp)
   13654:	da000404 	addi	r8,sp,16
   13658:	2885c83a 	sub	r2,r5,r2
   1365c:	003dfb06 	br	12e4c <__alt_data_end+0xfc012e4c>
   13660:	9080004c 	andi	r2,r18,1
   13664:	103e8f1e 	bne	r2,zero,130a4 <__alt_data_end+0xfc0130a4>
   13668:	d8802117 	ldw	r2,132(sp)
   1366c:	003e9e06 	br	130e8 <__alt_data_end+0xfc0130e8>
   13670:	1025883a 	mov	r18,r2
   13674:	0039883a 	mov	fp,zero
   13678:	00800084 	movi	r2,2
   1367c:	003fd306 	br	135cc <__alt_data_end+0xfc0135cc>
   13680:	07000b44 	movi	fp,45
   13684:	df002785 	stb	fp,158(sp)
   13688:	003a1b06 	br	11ef8 <__alt_data_end+0xfc011ef8>
   1368c:	00c00b44 	movi	r3,45
   13690:	d8c02785 	stb	r3,158(sp)
   13694:	d8802915 	stw	r2,164(sp)
   13698:	dc802c17 	ldw	r18,176(sp)
   1369c:	d8002a15 	stw	zero,168(sp)
   136a0:	07000b44 	movi	fp,45
   136a4:	003a5e06 	br	12020 <__alt_data_end+0xfc012020>
   136a8:	040000f4 	movhi	r16,3
   136ac:	842a8904 	addi	r16,r16,-21980
   136b0:	003f4706 	br	133d0 <__alt_data_end+0xfc0133d0>
   136b4:	d9002e17 	ldw	r4,184(sp)
   136b8:	d9402f17 	ldw	r5,188(sp)
   136bc:	20800017 	ldw	r2,0(r4)
   136c0:	21000104 	addi	r4,r4,4
   136c4:	d9002e15 	stw	r4,184(sp)
   136c8:	11400015 	stw	r5,0(r2)
   136cc:	0038ab06 	br	1197c <__alt_data_end+0xfc01197c>
   136d0:	dd802617 	ldw	r22,152(sp)
   136d4:	00bfff44 	movi	r2,-3
   136d8:	b0801c16 	blt	r22,r2,1374c <___vfprintf_internal_r+0x1eb0>
   136dc:	d9402a17 	ldw	r5,168(sp)
   136e0:	2d801a16 	blt	r5,r22,1374c <___vfprintf_internal_r+0x1eb0>
   136e4:	dd803215 	stw	r22,200(sp)
   136e8:	003e8906 	br	13110 <__alt_data_end+0xfc013110>
   136ec:	010000f4 	movhi	r4,3
   136f0:	212a9e84 	addi	r4,r4,-21894
   136f4:	d9002c15 	stw	r4,176(sp)
   136f8:	003c9106 	br	12940 <__alt_data_end+0xfc012940>
   136fc:	e005883a 	mov	r2,fp
   13700:	003e7906 	br	130e8 <__alt_data_end+0xfc0130e8>
   13704:	d9002a17 	ldw	r4,168(sp)
   13708:	df002783 	ldbu	fp,158(sp)
   1370c:	dcc02e15 	stw	r19,184(sp)
   13710:	d9002915 	stw	r4,164(sp)
   13714:	d9002b15 	stw	r4,172(sp)
   13718:	d8002a15 	stw	zero,168(sp)
   1371c:	d8003215 	stw	zero,200(sp)
   13720:	003a3b06 	br	12010 <__alt_data_end+0xfc012010>
   13724:	9080004c 	andi	r2,r18,1
   13728:	0039883a 	mov	fp,zero
   1372c:	10000426 	beq	r2,zero,13740 <___vfprintf_internal_r+0x1ea4>
   13730:	00800c04 	movi	r2,48
   13734:	dc001dc4 	addi	r16,sp,119
   13738:	d8801dc5 	stb	r2,119(sp)
   1373c:	003b6406 	br	124d0 <__alt_data_end+0xfc0124d0>
   13740:	d8002b15 	stw	zero,172(sp)
   13744:	dc001e04 	addi	r16,sp,120
   13748:	003a2b06 	br	11ff8 <__alt_data_end+0xfc011ff8>
   1374c:	8c7fff84 	addi	r17,r17,-2
   13750:	b5bfffc4 	addi	r22,r22,-1
   13754:	dd802615 	stw	r22,152(sp)
   13758:	dc4022c5 	stb	r17,139(sp)
   1375c:	b000bf16 	blt	r22,zero,13a5c <___vfprintf_internal_r+0x21c0>
   13760:	00800ac4 	movi	r2,43
   13764:	d8802305 	stb	r2,140(sp)
   13768:	00800244 	movi	r2,9
   1376c:	15807016 	blt	r2,r22,13930 <___vfprintf_internal_r+0x2094>
   13770:	00800c04 	movi	r2,48
   13774:	b5800c04 	addi	r22,r22,48
   13778:	d8802345 	stb	r2,141(sp)
   1377c:	dd802385 	stb	r22,142(sp)
   13780:	d88023c4 	addi	r2,sp,143
   13784:	df0022c4 	addi	fp,sp,139
   13788:	d8c03317 	ldw	r3,204(sp)
   1378c:	1739c83a 	sub	fp,r2,fp
   13790:	d9003317 	ldw	r4,204(sp)
   13794:	e0c7883a 	add	r3,fp,r3
   13798:	df003a15 	stw	fp,232(sp)
   1379c:	d8c02b15 	stw	r3,172(sp)
   137a0:	00800044 	movi	r2,1
   137a4:	1100b30e 	bge	r2,r4,13a74 <___vfprintf_internal_r+0x21d8>
   137a8:	d8c02b17 	ldw	r3,172(sp)
   137ac:	18c00044 	addi	r3,r3,1
   137b0:	d8c02b15 	stw	r3,172(sp)
   137b4:	1805883a 	mov	r2,r3
   137b8:	1800ac16 	blt	r3,zero,13a6c <___vfprintf_internal_r+0x21d0>
   137bc:	d8003215 	stw	zero,200(sp)
   137c0:	003e5d06 	br	13138 <__alt_data_end+0xfc013138>
   137c4:	d9002d17 	ldw	r4,180(sp)
   137c8:	d9801e04 	addi	r6,sp,120
   137cc:	b80b883a 	mov	r5,r23
   137d0:	0019ba80 	call	19ba8 <__sprint_r>
   137d4:	1039351e 	bne	r2,zero,11cac <__alt_data_end+0xfc011cac>
   137d8:	dc402617 	ldw	r17,152(sp)
   137dc:	d8c02017 	ldw	r3,128(sp)
   137e0:	d8801f17 	ldw	r2,124(sp)
   137e4:	da000404 	addi	r8,sp,16
   137e8:	003ed606 	br	13344 <__alt_data_end+0xfc013344>
   137ec:	182b883a 	mov	r21,r3
   137f0:	d8002a15 	stw	zero,168(sp)
   137f4:	00388c06 	br	11a28 <__alt_data_end+0xfc011a28>
   137f8:	d8802a17 	ldw	r2,168(sp)
   137fc:	103e071e 	bne	r2,zero,1301c <__alt_data_end+0xfc01301c>
   13800:	dc002a15 	stw	r16,168(sp)
   13804:	003e0506 	br	1301c <__alt_data_end+0xfc01301c>
   13808:	d9002a17 	ldw	r4,168(sp)
   1380c:	20c00044 	addi	r3,r4,1
   13810:	003e0f06 	br	13050 <__alt_data_end+0xfc013050>
   13814:	01400184 	movi	r5,6
   13818:	d9402a15 	stw	r5,168(sp)
   1381c:	003dff06 	br	1301c <__alt_data_end+0xfc01301c>
   13820:	d8802104 	addi	r2,sp,132
   13824:	d8800315 	stw	r2,12(sp)
   13828:	d8802504 	addi	r2,sp,148
   1382c:	d8800215 	stw	r2,8(sp)
   13830:	d8802604 	addi	r2,sp,152
   13834:	d8800115 	stw	r2,4(sp)
   13838:	d8802a17 	ldw	r2,168(sp)
   1383c:	d9403617 	ldw	r5,216(sp)
   13840:	d9002d17 	ldw	r4,180(sp)
   13844:	d8800015 	stw	r2,0(sp)
   13848:	01c000c4 	movi	r7,3
   1384c:	980d883a 	mov	r6,r19
   13850:	da003d15 	stw	r8,244(sp)
   13854:	0013fcc0 	call	13fcc <_dtoa_r>
   13858:	d8c02a17 	ldw	r3,168(sp)
   1385c:	da003d17 	ldw	r8,244(sp)
   13860:	1021883a 	mov	r16,r2
   13864:	10f9883a 	add	fp,r2,r3
   13868:	81000007 	ldb	r4,0(r16)
   1386c:	00800c04 	movi	r2,48
   13870:	20805e26 	beq	r4,r2,139ec <___vfprintf_internal_r+0x2150>
   13874:	d8c02617 	ldw	r3,152(sp)
   13878:	e0f9883a 	add	fp,fp,r3
   1387c:	003e0a06 	br	130a8 <__alt_data_end+0xfc0130a8>
   13880:	00c00b44 	movi	r3,45
   13884:	24e0003c 	xorhi	r19,r4,32768
   13888:	d8c02905 	stb	r3,164(sp)
   1388c:	003de906 	br	13034 <__alt_data_end+0xfc013034>
   13890:	d8c03217 	ldw	r3,200(sp)
   13894:	00c07a0e 	bge	zero,r3,13a80 <___vfprintf_internal_r+0x21e4>
   13898:	00800044 	movi	r2,1
   1389c:	d9003317 	ldw	r4,204(sp)
   138a0:	1105883a 	add	r2,r2,r4
   138a4:	d8802b15 	stw	r2,172(sp)
   138a8:	10004e16 	blt	r2,zero,139e4 <___vfprintf_internal_r+0x2148>
   138ac:	044019c4 	movi	r17,103
   138b0:	003e2106 	br	13138 <__alt_data_end+0xfc013138>
   138b4:	d9002a17 	ldw	r4,168(sp)
   138b8:	d8802104 	addi	r2,sp,132
   138bc:	d8800315 	stw	r2,12(sp)
   138c0:	d9000015 	stw	r4,0(sp)
   138c4:	d8802504 	addi	r2,sp,148
   138c8:	d9403617 	ldw	r5,216(sp)
   138cc:	d9002d17 	ldw	r4,180(sp)
   138d0:	d8800215 	stw	r2,8(sp)
   138d4:	d8802604 	addi	r2,sp,152
   138d8:	d8800115 	stw	r2,4(sp)
   138dc:	01c000c4 	movi	r7,3
   138e0:	980d883a 	mov	r6,r19
   138e4:	da003d15 	stw	r8,244(sp)
   138e8:	0013fcc0 	call	13fcc <_dtoa_r>
   138ec:	d8c02a17 	ldw	r3,168(sp)
   138f0:	da003d17 	ldw	r8,244(sp)
   138f4:	1021883a 	mov	r16,r2
   138f8:	00801184 	movi	r2,70
   138fc:	80f9883a 	add	fp,r16,r3
   13900:	88bfd926 	beq	r17,r2,13868 <__alt_data_end+0xfc013868>
   13904:	003de806 	br	130a8 <__alt_data_end+0xfc0130a8>
   13908:	d9002a17 	ldw	r4,168(sp)
   1390c:	00c04d0e 	bge	zero,r3,13a44 <___vfprintf_internal_r+0x21a8>
   13910:	2000441e 	bne	r4,zero,13a24 <___vfprintf_internal_r+0x2188>
   13914:	9480004c 	andi	r18,r18,1
   13918:	9000421e 	bne	r18,zero,13a24 <___vfprintf_internal_r+0x2188>
   1391c:	1805883a 	mov	r2,r3
   13920:	18006f16 	blt	r3,zero,13ae0 <___vfprintf_internal_r+0x2244>
   13924:	d8c03217 	ldw	r3,200(sp)
   13928:	d8c02b15 	stw	r3,172(sp)
   1392c:	003e0206 	br	13138 <__alt_data_end+0xfc013138>
   13930:	df0022c4 	addi	fp,sp,139
   13934:	dc002a15 	stw	r16,168(sp)
   13938:	4027883a 	mov	r19,r8
   1393c:	e021883a 	mov	r16,fp
   13940:	b009883a 	mov	r4,r22
   13944:	01400284 	movi	r5,10
   13948:	000cd940 	call	cd94 <__modsi3>
   1394c:	10800c04 	addi	r2,r2,48
   13950:	843fffc4 	addi	r16,r16,-1
   13954:	b009883a 	mov	r4,r22
   13958:	01400284 	movi	r5,10
   1395c:	80800005 	stb	r2,0(r16)
   13960:	000cd100 	call	cd10 <__divsi3>
   13964:	102d883a 	mov	r22,r2
   13968:	00800244 	movi	r2,9
   1396c:	15bff416 	blt	r2,r22,13940 <__alt_data_end+0xfc013940>
   13970:	9811883a 	mov	r8,r19
   13974:	b0800c04 	addi	r2,r22,48
   13978:	8027883a 	mov	r19,r16
   1397c:	997fffc4 	addi	r5,r19,-1
   13980:	98bfffc5 	stb	r2,-1(r19)
   13984:	dc002a17 	ldw	r16,168(sp)
   13988:	2f006d2e 	bgeu	r5,fp,13b40 <___vfprintf_internal_r+0x22a4>
   1398c:	d9c02384 	addi	r7,sp,142
   13990:	3ccfc83a 	sub	r7,r7,r19
   13994:	d9002344 	addi	r4,sp,141
   13998:	e1cf883a 	add	r7,fp,r7
   1399c:	00000106 	br	139a4 <___vfprintf_internal_r+0x2108>
   139a0:	28800003 	ldbu	r2,0(r5)
   139a4:	20800005 	stb	r2,0(r4)
   139a8:	21000044 	addi	r4,r4,1
   139ac:	29400044 	addi	r5,r5,1
   139b0:	393ffb1e 	bne	r7,r4,139a0 <__alt_data_end+0xfc0139a0>
   139b4:	d8802304 	addi	r2,sp,140
   139b8:	14c5c83a 	sub	r2,r2,r19
   139bc:	d8c02344 	addi	r3,sp,141
   139c0:	1885883a 	add	r2,r3,r2
   139c4:	003f7006 	br	13788 <__alt_data_end+0xfc013788>
   139c8:	0005883a 	mov	r2,zero
   139cc:	003f0f06 	br	1360c <__alt_data_end+0xfc01360c>
   139d0:	d8c03217 	ldw	r3,200(sp)
   139d4:	18c00044 	addi	r3,r3,1
   139d8:	d8c02b15 	stw	r3,172(sp)
   139dc:	1805883a 	mov	r2,r3
   139e0:	183fb20e 	bge	r3,zero,138ac <__alt_data_end+0xfc0138ac>
   139e4:	0005883a 	mov	r2,zero
   139e8:	003fb006 	br	138ac <__alt_data_end+0xfc0138ac>
   139ec:	d9003617 	ldw	r4,216(sp)
   139f0:	000d883a 	mov	r6,zero
   139f4:	000f883a 	mov	r7,zero
   139f8:	980b883a 	mov	r5,r19
   139fc:	d8c03c15 	stw	r3,240(sp)
   13a00:	da003d15 	stw	r8,244(sp)
   13a04:	001d92c0 	call	1d92c <__eqdf2>
   13a08:	d8c03c17 	ldw	r3,240(sp)
   13a0c:	da003d17 	ldw	r8,244(sp)
   13a10:	103f9826 	beq	r2,zero,13874 <__alt_data_end+0xfc013874>
   13a14:	00800044 	movi	r2,1
   13a18:	10c7c83a 	sub	r3,r2,r3
   13a1c:	d8c02615 	stw	r3,152(sp)
   13a20:	003f9506 	br	13878 <__alt_data_end+0xfc013878>
   13a24:	d9002a17 	ldw	r4,168(sp)
   13a28:	d8c03217 	ldw	r3,200(sp)
   13a2c:	20800044 	addi	r2,r4,1
   13a30:	1885883a 	add	r2,r3,r2
   13a34:	d8802b15 	stw	r2,172(sp)
   13a38:	103dbf0e 	bge	r2,zero,13138 <__alt_data_end+0xfc013138>
   13a3c:	0005883a 	mov	r2,zero
   13a40:	003dbd06 	br	13138 <__alt_data_end+0xfc013138>
   13a44:	2000201e 	bne	r4,zero,13ac8 <___vfprintf_internal_r+0x222c>
   13a48:	9480004c 	andi	r18,r18,1
   13a4c:	90001e1e 	bne	r18,zero,13ac8 <___vfprintf_internal_r+0x222c>
   13a50:	00800044 	movi	r2,1
   13a54:	d8802b15 	stw	r2,172(sp)
   13a58:	003db706 	br	13138 <__alt_data_end+0xfc013138>
   13a5c:	00800b44 	movi	r2,45
   13a60:	05adc83a 	sub	r22,zero,r22
   13a64:	d8802305 	stb	r2,140(sp)
   13a68:	003f3f06 	br	13768 <__alt_data_end+0xfc013768>
   13a6c:	0005883a 	mov	r2,zero
   13a70:	003f5206 	br	137bc <__alt_data_end+0xfc0137bc>
   13a74:	90a4703a 	and	r18,r18,r2
   13a78:	903f4e26 	beq	r18,zero,137b4 <__alt_data_end+0xfc0137b4>
   13a7c:	003f4a06 	br	137a8 <__alt_data_end+0xfc0137a8>
   13a80:	00800084 	movi	r2,2
   13a84:	10c5c83a 	sub	r2,r2,r3
   13a88:	003f8406 	br	1389c <__alt_data_end+0xfc01389c>
   13a8c:	d9402e17 	ldw	r5,184(sp)
   13a90:	d9002e17 	ldw	r4,184(sp)
   13a94:	ac400043 	ldbu	r17,1(r21)
   13a98:	29400017 	ldw	r5,0(r5)
   13a9c:	20800104 	addi	r2,r4,4
   13aa0:	d8802e15 	stw	r2,184(sp)
   13aa4:	d9402a15 	stw	r5,168(sp)
   13aa8:	182b883a 	mov	r21,r3
   13aac:	283e7b0e 	bge	r5,zero,1349c <__alt_data_end+0xfc01349c>
   13ab0:	8c403fcc 	andi	r17,r17,255
   13ab4:	017fffc4 	movi	r5,-1
   13ab8:	8c40201c 	xori	r17,r17,128
   13abc:	d9402a15 	stw	r5,168(sp)
   13ac0:	8c7fe004 	addi	r17,r17,-128
   13ac4:	0037d706 	br	11a24 <__alt_data_end+0xfc011a24>
   13ac8:	d8c02a17 	ldw	r3,168(sp)
   13acc:	18c00084 	addi	r3,r3,2
   13ad0:	d8c02b15 	stw	r3,172(sp)
   13ad4:	1805883a 	mov	r2,r3
   13ad8:	183d970e 	bge	r3,zero,13138 <__alt_data_end+0xfc013138>
   13adc:	003fd706 	br	13a3c <__alt_data_end+0xfc013a3c>
   13ae0:	0005883a 	mov	r2,zero
   13ae4:	003f8f06 	br	13924 <__alt_data_end+0xfc013924>
   13ae8:	9080004c 	andi	r2,r18,1
   13aec:	103f821e 	bne	r2,zero,138f8 <__alt_data_end+0xfc0138f8>
   13af0:	d8802117 	ldw	r2,132(sp)
   13af4:	1405c83a 	sub	r2,r2,r16
   13af8:	d8803315 	stw	r2,204(sp)
   13afc:	b47ef426 	beq	r22,r17,136d0 <__alt_data_end+0xfc0136d0>
   13b00:	dd802617 	ldw	r22,152(sp)
   13b04:	003f1206 	br	13750 <__alt_data_end+0xfc013750>
   13b08:	d8c02b03 	ldbu	r3,172(sp)
   13b0c:	d8c02785 	stb	r3,158(sp)
   13b10:	0038df06 	br	11e90 <__alt_data_end+0xfc011e90>
   13b14:	d8c02b03 	ldbu	r3,172(sp)
   13b18:	d8c02785 	stb	r3,158(sp)
   13b1c:	0038aa06 	br	11dc8 <__alt_data_end+0xfc011dc8>
   13b20:	d8c02b03 	ldbu	r3,172(sp)
   13b24:	d8c02785 	stb	r3,158(sp)
   13b28:	003a4306 	br	12438 <__alt_data_end+0xfc012438>
   13b2c:	d8c02b03 	ldbu	r3,172(sp)
   13b30:	d8c02785 	stb	r3,158(sp)
   13b34:	003af506 	br	1270c <__alt_data_end+0xfc01270c>
   13b38:	0005883a 	mov	r2,zero
   13b3c:	003d7b06 	br	1312c <__alt_data_end+0xfc01312c>
   13b40:	d8802344 	addi	r2,sp,141
   13b44:	003f1006 	br	13788 <__alt_data_end+0xfc013788>
   13b48:	d8c02b03 	ldbu	r3,172(sp)
   13b4c:	d8c02785 	stb	r3,158(sp)
   13b50:	0038fd06 	br	11f48 <__alt_data_end+0xfc011f48>
   13b54:	d8c02b03 	ldbu	r3,172(sp)
   13b58:	d8c02785 	stb	r3,158(sp)
   13b5c:	003a9706 	br	125bc <__alt_data_end+0xfc0125bc>
   13b60:	d8c02b03 	ldbu	r3,172(sp)
   13b64:	d8c02785 	stb	r3,158(sp)
   13b68:	003a1806 	br	123cc <__alt_data_end+0xfc0123cc>
   13b6c:	d8c02b03 	ldbu	r3,172(sp)
   13b70:	d8c02785 	stb	r3,158(sp)
   13b74:	003abe06 	br	12670 <__alt_data_end+0xfc012670>

00013b78 <__vfprintf_internal>:
   13b78:	008000f4 	movhi	r2,3
   13b7c:	10b78704 	addi	r2,r2,-8676
   13b80:	300f883a 	mov	r7,r6
   13b84:	280d883a 	mov	r6,r5
   13b88:	200b883a 	mov	r5,r4
   13b8c:	11000017 	ldw	r4,0(r2)
   13b90:	001189c1 	jmpi	1189c <___vfprintf_internal_r>

00013b94 <__sbprintf>:
   13b94:	2880030b 	ldhu	r2,12(r5)
   13b98:	2ac01917 	ldw	r11,100(r5)
   13b9c:	2a80038b 	ldhu	r10,14(r5)
   13ba0:	2a400717 	ldw	r9,28(r5)
   13ba4:	2a000917 	ldw	r8,36(r5)
   13ba8:	defee204 	addi	sp,sp,-1144
   13bac:	00c10004 	movi	r3,1024
   13bb0:	dc011a15 	stw	r16,1128(sp)
   13bb4:	10bfff4c 	andi	r2,r2,65533
   13bb8:	2821883a 	mov	r16,r5
   13bbc:	d8cb883a 	add	r5,sp,r3
   13bc0:	dc811c15 	stw	r18,1136(sp)
   13bc4:	dc411b15 	stw	r17,1132(sp)
   13bc8:	dfc11d15 	stw	ra,1140(sp)
   13bcc:	2025883a 	mov	r18,r4
   13bd0:	d881030d 	sth	r2,1036(sp)
   13bd4:	dac11915 	stw	r11,1124(sp)
   13bd8:	da81038d 	sth	r10,1038(sp)
   13bdc:	da410715 	stw	r9,1052(sp)
   13be0:	da010915 	stw	r8,1060(sp)
   13be4:	dec10015 	stw	sp,1024(sp)
   13be8:	dec10415 	stw	sp,1040(sp)
   13bec:	d8c10215 	stw	r3,1032(sp)
   13bf0:	d8c10515 	stw	r3,1044(sp)
   13bf4:	d8010615 	stw	zero,1048(sp)
   13bf8:	001189c0 	call	1189c <___vfprintf_internal_r>
   13bfc:	1023883a 	mov	r17,r2
   13c00:	10000416 	blt	r2,zero,13c14 <__sbprintf+0x80>
   13c04:	d9410004 	addi	r5,sp,1024
   13c08:	9009883a 	mov	r4,r18
   13c0c:	00158700 	call	15870 <_fflush_r>
   13c10:	10000d1e 	bne	r2,zero,13c48 <__sbprintf+0xb4>
   13c14:	d881030b 	ldhu	r2,1036(sp)
   13c18:	1080100c 	andi	r2,r2,64
   13c1c:	10000326 	beq	r2,zero,13c2c <__sbprintf+0x98>
   13c20:	8080030b 	ldhu	r2,12(r16)
   13c24:	10801014 	ori	r2,r2,64
   13c28:	8080030d 	sth	r2,12(r16)
   13c2c:	8805883a 	mov	r2,r17
   13c30:	dfc11d17 	ldw	ra,1140(sp)
   13c34:	dc811c17 	ldw	r18,1136(sp)
   13c38:	dc411b17 	ldw	r17,1132(sp)
   13c3c:	dc011a17 	ldw	r16,1128(sp)
   13c40:	dec11e04 	addi	sp,sp,1144
   13c44:	f800283a 	ret
   13c48:	047fffc4 	movi	r17,-1
   13c4c:	003ff106 	br	13c14 <__alt_data_end+0xfc013c14>

00013c50 <__swsetup_r>:
   13c50:	008000f4 	movhi	r2,3
   13c54:	defffd04 	addi	sp,sp,-12
   13c58:	10b78704 	addi	r2,r2,-8676
   13c5c:	dc400115 	stw	r17,4(sp)
   13c60:	2023883a 	mov	r17,r4
   13c64:	11000017 	ldw	r4,0(r2)
   13c68:	dc000015 	stw	r16,0(sp)
   13c6c:	dfc00215 	stw	ra,8(sp)
   13c70:	2821883a 	mov	r16,r5
   13c74:	20000226 	beq	r4,zero,13c80 <__swsetup_r+0x30>
   13c78:	20800e17 	ldw	r2,56(r4)
   13c7c:	10003126 	beq	r2,zero,13d44 <__swsetup_r+0xf4>
   13c80:	8080030b 	ldhu	r2,12(r16)
   13c84:	10c0020c 	andi	r3,r2,8
   13c88:	1009883a 	mov	r4,r2
   13c8c:	18000f26 	beq	r3,zero,13ccc <__swsetup_r+0x7c>
   13c90:	80c00417 	ldw	r3,16(r16)
   13c94:	18001526 	beq	r3,zero,13cec <__swsetup_r+0x9c>
   13c98:	1100004c 	andi	r4,r2,1
   13c9c:	20001c1e 	bne	r4,zero,13d10 <__swsetup_r+0xc0>
   13ca0:	1080008c 	andi	r2,r2,2
   13ca4:	1000291e 	bne	r2,zero,13d4c <__swsetup_r+0xfc>
   13ca8:	80800517 	ldw	r2,20(r16)
   13cac:	80800215 	stw	r2,8(r16)
   13cb0:	18001c26 	beq	r3,zero,13d24 <__swsetup_r+0xd4>
   13cb4:	0005883a 	mov	r2,zero
   13cb8:	dfc00217 	ldw	ra,8(sp)
   13cbc:	dc400117 	ldw	r17,4(sp)
   13cc0:	dc000017 	ldw	r16,0(sp)
   13cc4:	dec00304 	addi	sp,sp,12
   13cc8:	f800283a 	ret
   13ccc:	2080040c 	andi	r2,r4,16
   13cd0:	10002e26 	beq	r2,zero,13d8c <__swsetup_r+0x13c>
   13cd4:	2080010c 	andi	r2,r4,4
   13cd8:	10001e1e 	bne	r2,zero,13d54 <__swsetup_r+0x104>
   13cdc:	80c00417 	ldw	r3,16(r16)
   13ce0:	20800214 	ori	r2,r4,8
   13ce4:	8080030d 	sth	r2,12(r16)
   13ce8:	183feb1e 	bne	r3,zero,13c98 <__alt_data_end+0xfc013c98>
   13cec:	1100a00c 	andi	r4,r2,640
   13cf0:	01408004 	movi	r5,512
   13cf4:	217fe826 	beq	r4,r5,13c98 <__alt_data_end+0xfc013c98>
   13cf8:	800b883a 	mov	r5,r16
   13cfc:	8809883a 	mov	r4,r17
   13d00:	001680c0 	call	1680c <__smakebuf_r>
   13d04:	8080030b 	ldhu	r2,12(r16)
   13d08:	80c00417 	ldw	r3,16(r16)
   13d0c:	003fe206 	br	13c98 <__alt_data_end+0xfc013c98>
   13d10:	80800517 	ldw	r2,20(r16)
   13d14:	80000215 	stw	zero,8(r16)
   13d18:	0085c83a 	sub	r2,zero,r2
   13d1c:	80800615 	stw	r2,24(r16)
   13d20:	183fe41e 	bne	r3,zero,13cb4 <__alt_data_end+0xfc013cb4>
   13d24:	80c0030b 	ldhu	r3,12(r16)
   13d28:	0005883a 	mov	r2,zero
   13d2c:	1900200c 	andi	r4,r3,128
   13d30:	203fe126 	beq	r4,zero,13cb8 <__alt_data_end+0xfc013cb8>
   13d34:	18c01014 	ori	r3,r3,64
   13d38:	80c0030d 	sth	r3,12(r16)
   13d3c:	00bfffc4 	movi	r2,-1
   13d40:	003fdd06 	br	13cb8 <__alt_data_end+0xfc013cb8>
   13d44:	0015c5c0 	call	15c5c <__sinit>
   13d48:	003fcd06 	br	13c80 <__alt_data_end+0xfc013c80>
   13d4c:	0005883a 	mov	r2,zero
   13d50:	003fd606 	br	13cac <__alt_data_end+0xfc013cac>
   13d54:	81400c17 	ldw	r5,48(r16)
   13d58:	28000626 	beq	r5,zero,13d74 <__swsetup_r+0x124>
   13d5c:	80801004 	addi	r2,r16,64
   13d60:	28800326 	beq	r5,r2,13d70 <__swsetup_r+0x120>
   13d64:	8809883a 	mov	r4,r17
   13d68:	0015dd00 	call	15dd0 <_free_r>
   13d6c:	8100030b 	ldhu	r4,12(r16)
   13d70:	80000c15 	stw	zero,48(r16)
   13d74:	80c00417 	ldw	r3,16(r16)
   13d78:	00bff6c4 	movi	r2,-37
   13d7c:	1108703a 	and	r4,r2,r4
   13d80:	80000115 	stw	zero,4(r16)
   13d84:	80c00015 	stw	r3,0(r16)
   13d88:	003fd506 	br	13ce0 <__alt_data_end+0xfc013ce0>
   13d8c:	00800244 	movi	r2,9
   13d90:	88800015 	stw	r2,0(r17)
   13d94:	20801014 	ori	r2,r4,64
   13d98:	8080030d 	sth	r2,12(r16)
   13d9c:	00bfffc4 	movi	r2,-1
   13da0:	003fc506 	br	13cb8 <__alt_data_end+0xfc013cb8>

00013da4 <quorem>:
   13da4:	defff204 	addi	sp,sp,-56
   13da8:	ddc00b15 	stw	r23,44(sp)
   13dac:	20800417 	ldw	r2,16(r4)
   13db0:	2dc00417 	ldw	r23,16(r5)
   13db4:	dfc00d15 	stw	ra,52(sp)
   13db8:	df000c15 	stw	fp,48(sp)
   13dbc:	dd800a15 	stw	r22,40(sp)
   13dc0:	dd400915 	stw	r21,36(sp)
   13dc4:	dd000815 	stw	r20,32(sp)
   13dc8:	dcc00715 	stw	r19,28(sp)
   13dcc:	dc800615 	stw	r18,24(sp)
   13dd0:	dc400515 	stw	r17,20(sp)
   13dd4:	dc000415 	stw	r16,16(sp)
   13dd8:	15c07a16 	blt	r2,r23,13fc4 <quorem+0x220>
   13ddc:	bdffffc4 	addi	r23,r23,-1
   13de0:	bde9883a 	add	r20,r23,r23
   13de4:	28c00504 	addi	r3,r5,20
   13de8:	a529883a 	add	r20,r20,r20
   13dec:	1d39883a 	add	fp,r3,r20
   13df0:	24c00504 	addi	r19,r4,20
   13df4:	d9400215 	stw	r5,8(sp)
   13df8:	9d29883a 	add	r20,r19,r20
   13dfc:	e1400017 	ldw	r5,0(fp)
   13e00:	d9000015 	stw	r4,0(sp)
   13e04:	a1000017 	ldw	r4,0(r20)
   13e08:	29400044 	addi	r5,r5,1
   13e0c:	d8c00115 	stw	r3,4(sp)
   13e10:	dd000315 	stw	r20,12(sp)
   13e14:	000ce080 	call	ce08 <__udivsi3>
   13e18:	1025883a 	mov	r18,r2
   13e1c:	10003026 	beq	r2,zero,13ee0 <quorem+0x13c>
   13e20:	dc400117 	ldw	r17,4(sp)
   13e24:	9829883a 	mov	r20,r19
   13e28:	002d883a 	mov	r22,zero
   13e2c:	0021883a 	mov	r16,zero
   13e30:	8d400017 	ldw	r21,0(r17)
   13e34:	900b883a 	mov	r5,r18
   13e38:	8c400104 	addi	r17,r17,4
   13e3c:	a93fffcc 	andi	r4,r21,65535
   13e40:	000cec40 	call	cec4 <__mulsi3>
   13e44:	a808d43a 	srli	r4,r21,16
   13e48:	900b883a 	mov	r5,r18
   13e4c:	15ad883a 	add	r22,r2,r22
   13e50:	000cec40 	call	cec4 <__mulsi3>
   13e54:	a1000017 	ldw	r4,0(r20)
   13e58:	b00cd43a 	srli	r6,r22,16
   13e5c:	b0ffffcc 	andi	r3,r22,65535
   13e60:	217fffcc 	andi	r5,r4,65535
   13e64:	2c21883a 	add	r16,r5,r16
   13e68:	80c7c83a 	sub	r3,r16,r3
   13e6c:	2008d43a 	srli	r4,r4,16
   13e70:	1185883a 	add	r2,r2,r6
   13e74:	1821d43a 	srai	r16,r3,16
   13e78:	117fffcc 	andi	r5,r2,65535
   13e7c:	2149c83a 	sub	r4,r4,r5
   13e80:	2421883a 	add	r16,r4,r16
   13e84:	8008943a 	slli	r4,r16,16
   13e88:	18ffffcc 	andi	r3,r3,65535
   13e8c:	102cd43a 	srli	r22,r2,16
   13e90:	20c8b03a 	or	r4,r4,r3
   13e94:	a1000015 	stw	r4,0(r20)
   13e98:	8021d43a 	srai	r16,r16,16
   13e9c:	a5000104 	addi	r20,r20,4
   13ea0:	e47fe32e 	bgeu	fp,r17,13e30 <__alt_data_end+0xfc013e30>
   13ea4:	d8c00317 	ldw	r3,12(sp)
   13ea8:	18800017 	ldw	r2,0(r3)
   13eac:	10000c1e 	bne	r2,zero,13ee0 <quorem+0x13c>
   13eb0:	18bfff04 	addi	r2,r3,-4
   13eb4:	9880082e 	bgeu	r19,r2,13ed8 <quorem+0x134>
   13eb8:	18ffff17 	ldw	r3,-4(r3)
   13ebc:	18000326 	beq	r3,zero,13ecc <quorem+0x128>
   13ec0:	00000506 	br	13ed8 <quorem+0x134>
   13ec4:	10c00017 	ldw	r3,0(r2)
   13ec8:	1800031e 	bne	r3,zero,13ed8 <quorem+0x134>
   13ecc:	10bfff04 	addi	r2,r2,-4
   13ed0:	bdffffc4 	addi	r23,r23,-1
   13ed4:	98bffb36 	bltu	r19,r2,13ec4 <__alt_data_end+0xfc013ec4>
   13ed8:	d8c00017 	ldw	r3,0(sp)
   13edc:	1dc00415 	stw	r23,16(r3)
   13ee0:	d9400217 	ldw	r5,8(sp)
   13ee4:	d9000017 	ldw	r4,0(sp)
   13ee8:	001758c0 	call	1758c <__mcmp>
   13eec:	10002816 	blt	r2,zero,13f90 <quorem+0x1ec>
   13ef0:	dc400117 	ldw	r17,4(sp)
   13ef4:	94800044 	addi	r18,r18,1
   13ef8:	980d883a 	mov	r6,r19
   13efc:	0007883a 	mov	r3,zero
   13f00:	31000017 	ldw	r4,0(r6)
   13f04:	89400017 	ldw	r5,0(r17)
   13f08:	31800104 	addi	r6,r6,4
   13f0c:	20bfffcc 	andi	r2,r4,65535
   13f10:	10c7883a 	add	r3,r2,r3
   13f14:	28bfffcc 	andi	r2,r5,65535
   13f18:	1885c83a 	sub	r2,r3,r2
   13f1c:	280ad43a 	srli	r5,r5,16
   13f20:	2008d43a 	srli	r4,r4,16
   13f24:	1007d43a 	srai	r3,r2,16
   13f28:	10bfffcc 	andi	r2,r2,65535
   13f2c:	2149c83a 	sub	r4,r4,r5
   13f30:	20c9883a 	add	r4,r4,r3
   13f34:	200a943a 	slli	r5,r4,16
   13f38:	8c400104 	addi	r17,r17,4
   13f3c:	2007d43a 	srai	r3,r4,16
   13f40:	2884b03a 	or	r2,r5,r2
   13f44:	30bfff15 	stw	r2,-4(r6)
   13f48:	e47fed2e 	bgeu	fp,r17,13f00 <__alt_data_end+0xfc013f00>
   13f4c:	bdc5883a 	add	r2,r23,r23
   13f50:	1085883a 	add	r2,r2,r2
   13f54:	9887883a 	add	r3,r19,r2
   13f58:	18800017 	ldw	r2,0(r3)
   13f5c:	10000c1e 	bne	r2,zero,13f90 <quorem+0x1ec>
   13f60:	18bfff04 	addi	r2,r3,-4
   13f64:	9880082e 	bgeu	r19,r2,13f88 <quorem+0x1e4>
   13f68:	18ffff17 	ldw	r3,-4(r3)
   13f6c:	18000326 	beq	r3,zero,13f7c <quorem+0x1d8>
   13f70:	00000506 	br	13f88 <quorem+0x1e4>
   13f74:	10c00017 	ldw	r3,0(r2)
   13f78:	1800031e 	bne	r3,zero,13f88 <quorem+0x1e4>
   13f7c:	10bfff04 	addi	r2,r2,-4
   13f80:	bdffffc4 	addi	r23,r23,-1
   13f84:	98bffb36 	bltu	r19,r2,13f74 <__alt_data_end+0xfc013f74>
   13f88:	d8c00017 	ldw	r3,0(sp)
   13f8c:	1dc00415 	stw	r23,16(r3)
   13f90:	9005883a 	mov	r2,r18
   13f94:	dfc00d17 	ldw	ra,52(sp)
   13f98:	df000c17 	ldw	fp,48(sp)
   13f9c:	ddc00b17 	ldw	r23,44(sp)
   13fa0:	dd800a17 	ldw	r22,40(sp)
   13fa4:	dd400917 	ldw	r21,36(sp)
   13fa8:	dd000817 	ldw	r20,32(sp)
   13fac:	dcc00717 	ldw	r19,28(sp)
   13fb0:	dc800617 	ldw	r18,24(sp)
   13fb4:	dc400517 	ldw	r17,20(sp)
   13fb8:	dc000417 	ldw	r16,16(sp)
   13fbc:	dec00e04 	addi	sp,sp,56
   13fc0:	f800283a 	ret
   13fc4:	0005883a 	mov	r2,zero
   13fc8:	003ff206 	br	13f94 <__alt_data_end+0xfc013f94>

00013fcc <_dtoa_r>:
   13fcc:	20801017 	ldw	r2,64(r4)
   13fd0:	deffde04 	addi	sp,sp,-136
   13fd4:	df002015 	stw	fp,128(sp)
   13fd8:	dcc01b15 	stw	r19,108(sp)
   13fdc:	dc801a15 	stw	r18,104(sp)
   13fe0:	dc401915 	stw	r17,100(sp)
   13fe4:	dc001815 	stw	r16,96(sp)
   13fe8:	dfc02115 	stw	ra,132(sp)
   13fec:	ddc01f15 	stw	r23,124(sp)
   13ff0:	dd801e15 	stw	r22,120(sp)
   13ff4:	dd401d15 	stw	r21,116(sp)
   13ff8:	dd001c15 	stw	r20,112(sp)
   13ffc:	d9c00315 	stw	r7,12(sp)
   14000:	2039883a 	mov	fp,r4
   14004:	3023883a 	mov	r17,r6
   14008:	2825883a 	mov	r18,r5
   1400c:	dc002417 	ldw	r16,144(sp)
   14010:	3027883a 	mov	r19,r6
   14014:	10000826 	beq	r2,zero,14038 <_dtoa_r+0x6c>
   14018:	21801117 	ldw	r6,68(r4)
   1401c:	00c00044 	movi	r3,1
   14020:	100b883a 	mov	r5,r2
   14024:	1986983a 	sll	r3,r3,r6
   14028:	11800115 	stw	r6,4(r2)
   1402c:	10c00215 	stw	r3,8(r2)
   14030:	0016cb00 	call	16cb0 <_Bfree>
   14034:	e0001015 	stw	zero,64(fp)
   14038:	88002e16 	blt	r17,zero,140f4 <_dtoa_r+0x128>
   1403c:	80000015 	stw	zero,0(r16)
   14040:	889ffc2c 	andhi	r2,r17,32752
   14044:	00dffc34 	movhi	r3,32752
   14048:	10c01c26 	beq	r2,r3,140bc <_dtoa_r+0xf0>
   1404c:	000d883a 	mov	r6,zero
   14050:	000f883a 	mov	r7,zero
   14054:	9009883a 	mov	r4,r18
   14058:	980b883a 	mov	r5,r19
   1405c:	001d92c0 	call	1d92c <__eqdf2>
   14060:	10002b1e 	bne	r2,zero,14110 <_dtoa_r+0x144>
   14064:	d9c02317 	ldw	r7,140(sp)
   14068:	00800044 	movi	r2,1
   1406c:	38800015 	stw	r2,0(r7)
   14070:	d8802517 	ldw	r2,148(sp)
   14074:	10019e26 	beq	r2,zero,146f0 <_dtoa_r+0x724>
   14078:	d8c02517 	ldw	r3,148(sp)
   1407c:	008000f4 	movhi	r2,3
   14080:	10aa9644 	addi	r2,r2,-21927
   14084:	18800015 	stw	r2,0(r3)
   14088:	10bfffc4 	addi	r2,r2,-1
   1408c:	dfc02117 	ldw	ra,132(sp)
   14090:	df002017 	ldw	fp,128(sp)
   14094:	ddc01f17 	ldw	r23,124(sp)
   14098:	dd801e17 	ldw	r22,120(sp)
   1409c:	dd401d17 	ldw	r21,116(sp)
   140a0:	dd001c17 	ldw	r20,112(sp)
   140a4:	dcc01b17 	ldw	r19,108(sp)
   140a8:	dc801a17 	ldw	r18,104(sp)
   140ac:	dc401917 	ldw	r17,100(sp)
   140b0:	dc001817 	ldw	r16,96(sp)
   140b4:	dec02204 	addi	sp,sp,136
   140b8:	f800283a 	ret
   140bc:	d8c02317 	ldw	r3,140(sp)
   140c0:	0089c3c4 	movi	r2,9999
   140c4:	18800015 	stw	r2,0(r3)
   140c8:	90017726 	beq	r18,zero,146a8 <_dtoa_r+0x6dc>
   140cc:	008000f4 	movhi	r2,3
   140d0:	10aaaa04 	addi	r2,r2,-21848
   140d4:	d9002517 	ldw	r4,148(sp)
   140d8:	203fec26 	beq	r4,zero,1408c <__alt_data_end+0xfc01408c>
   140dc:	10c000c7 	ldb	r3,3(r2)
   140e0:	1801781e 	bne	r3,zero,146c4 <_dtoa_r+0x6f8>
   140e4:	10c000c4 	addi	r3,r2,3
   140e8:	d9802517 	ldw	r6,148(sp)
   140ec:	30c00015 	stw	r3,0(r6)
   140f0:	003fe606 	br	1408c <__alt_data_end+0xfc01408c>
   140f4:	04e00034 	movhi	r19,32768
   140f8:	9cffffc4 	addi	r19,r19,-1
   140fc:	00800044 	movi	r2,1
   14100:	8ce6703a 	and	r19,r17,r19
   14104:	80800015 	stw	r2,0(r16)
   14108:	9823883a 	mov	r17,r19
   1410c:	003fcc06 	br	14040 <__alt_data_end+0xfc014040>
   14110:	d8800204 	addi	r2,sp,8
   14114:	d8800015 	stw	r2,0(sp)
   14118:	d9c00104 	addi	r7,sp,4
   1411c:	900b883a 	mov	r5,r18
   14120:	980d883a 	mov	r6,r19
   14124:	e009883a 	mov	r4,fp
   14128:	8820d53a 	srli	r16,r17,20
   1412c:	00179580 	call	17958 <__d2b>
   14130:	d8800915 	stw	r2,36(sp)
   14134:	8001651e 	bne	r16,zero,146cc <_dtoa_r+0x700>
   14138:	dd800217 	ldw	r22,8(sp)
   1413c:	dc000117 	ldw	r16,4(sp)
   14140:	00800804 	movi	r2,32
   14144:	b421883a 	add	r16,r22,r16
   14148:	80c10c84 	addi	r3,r16,1074
   1414c:	10c2d10e 	bge	r2,r3,14c94 <_dtoa_r+0xcc8>
   14150:	00801004 	movi	r2,64
   14154:	81010484 	addi	r4,r16,1042
   14158:	10c7c83a 	sub	r3,r2,r3
   1415c:	9108d83a 	srl	r4,r18,r4
   14160:	88e2983a 	sll	r17,r17,r3
   14164:	2448b03a 	or	r4,r4,r17
   14168:	001ee480 	call	1ee48 <__floatunsidf>
   1416c:	017f8434 	movhi	r5,65040
   14170:	01800044 	movi	r6,1
   14174:	1009883a 	mov	r4,r2
   14178:	194b883a 	add	r5,r3,r5
   1417c:	843fffc4 	addi	r16,r16,-1
   14180:	d9801115 	stw	r6,68(sp)
   14184:	000d883a 	mov	r6,zero
   14188:	01cffe34 	movhi	r7,16376
   1418c:	001e3f00 	call	1e3f0 <__subdf3>
   14190:	0198dbf4 	movhi	r6,25455
   14194:	01cff4f4 	movhi	r7,16339
   14198:	3190d844 	addi	r6,r6,17249
   1419c:	39e1e9c4 	addi	r7,r7,-30809
   141a0:	1009883a 	mov	r4,r2
   141a4:	180b883a 	mov	r5,r3
   141a8:	001db840 	call	1db84 <__muldf3>
   141ac:	01a2d874 	movhi	r6,35681
   141b0:	01cff1f4 	movhi	r7,16327
   141b4:	31b22cc4 	addi	r6,r6,-14157
   141b8:	39e28a04 	addi	r7,r7,-30168
   141bc:	180b883a 	mov	r5,r3
   141c0:	1009883a 	mov	r4,r2
   141c4:	001c6b00 	call	1c6b0 <__adddf3>
   141c8:	8009883a 	mov	r4,r16
   141cc:	1029883a 	mov	r20,r2
   141d0:	1823883a 	mov	r17,r3
   141d4:	001ed6c0 	call	1ed6c <__floatsidf>
   141d8:	019427f4 	movhi	r6,20639
   141dc:	01cff4f4 	movhi	r7,16339
   141e0:	319e7ec4 	addi	r6,r6,31227
   141e4:	39d104c4 	addi	r7,r7,17427
   141e8:	1009883a 	mov	r4,r2
   141ec:	180b883a 	mov	r5,r3
   141f0:	001db840 	call	1db84 <__muldf3>
   141f4:	100d883a 	mov	r6,r2
   141f8:	180f883a 	mov	r7,r3
   141fc:	a009883a 	mov	r4,r20
   14200:	880b883a 	mov	r5,r17
   14204:	001c6b00 	call	1c6b0 <__adddf3>
   14208:	1009883a 	mov	r4,r2
   1420c:	180b883a 	mov	r5,r3
   14210:	1029883a 	mov	r20,r2
   14214:	1823883a 	mov	r17,r3
   14218:	001ecec0 	call	1ecec <__fixdfsi>
   1421c:	000d883a 	mov	r6,zero
   14220:	000f883a 	mov	r7,zero
   14224:	a009883a 	mov	r4,r20
   14228:	880b883a 	mov	r5,r17
   1422c:	d8800515 	stw	r2,20(sp)
   14230:	001da900 	call	1da90 <__ledf2>
   14234:	10028716 	blt	r2,zero,14c54 <_dtoa_r+0xc88>
   14238:	d8c00517 	ldw	r3,20(sp)
   1423c:	00800584 	movi	r2,22
   14240:	10c27536 	bltu	r2,r3,14c18 <_dtoa_r+0xc4c>
   14244:	180490fa 	slli	r2,r3,3
   14248:	00c000f4 	movhi	r3,3
   1424c:	18eac504 	addi	r3,r3,-21740
   14250:	1885883a 	add	r2,r3,r2
   14254:	11000017 	ldw	r4,0(r2)
   14258:	11400117 	ldw	r5,4(r2)
   1425c:	900d883a 	mov	r6,r18
   14260:	980f883a 	mov	r7,r19
   14264:	001d9b40 	call	1d9b4 <__gedf2>
   14268:	00828d0e 	bge	zero,r2,14ca0 <_dtoa_r+0xcd4>
   1426c:	d9000517 	ldw	r4,20(sp)
   14270:	d8000e15 	stw	zero,56(sp)
   14274:	213fffc4 	addi	r4,r4,-1
   14278:	d9000515 	stw	r4,20(sp)
   1427c:	b42dc83a 	sub	r22,r22,r16
   14280:	b5bfffc4 	addi	r22,r22,-1
   14284:	b0026f16 	blt	r22,zero,14c44 <_dtoa_r+0xc78>
   14288:	d8000815 	stw	zero,32(sp)
   1428c:	d9c00517 	ldw	r7,20(sp)
   14290:	38026416 	blt	r7,zero,14c24 <_dtoa_r+0xc58>
   14294:	b1ed883a 	add	r22,r22,r7
   14298:	d9c00d15 	stw	r7,52(sp)
   1429c:	d8000a15 	stw	zero,40(sp)
   142a0:	d9800317 	ldw	r6,12(sp)
   142a4:	00800244 	movi	r2,9
   142a8:	11811436 	bltu	r2,r6,146fc <_dtoa_r+0x730>
   142ac:	00800144 	movi	r2,5
   142b0:	1184e10e 	bge	r2,r6,15638 <_dtoa_r+0x166c>
   142b4:	31bfff04 	addi	r6,r6,-4
   142b8:	d9800315 	stw	r6,12(sp)
   142bc:	0023883a 	mov	r17,zero
   142c0:	d9800317 	ldw	r6,12(sp)
   142c4:	008000c4 	movi	r2,3
   142c8:	30836726 	beq	r6,r2,15068 <_dtoa_r+0x109c>
   142cc:	1183410e 	bge	r2,r6,14fd4 <_dtoa_r+0x1008>
   142d0:	d9c00317 	ldw	r7,12(sp)
   142d4:	00800104 	movi	r2,4
   142d8:	38827c26 	beq	r7,r2,14ccc <_dtoa_r+0xd00>
   142dc:	00800144 	movi	r2,5
   142e0:	3884c41e 	bne	r7,r2,155f4 <_dtoa_r+0x1628>
   142e4:	00800044 	movi	r2,1
   142e8:	d8800b15 	stw	r2,44(sp)
   142ec:	d8c00517 	ldw	r3,20(sp)
   142f0:	d9002217 	ldw	r4,136(sp)
   142f4:	1907883a 	add	r3,r3,r4
   142f8:	19800044 	addi	r6,r3,1
   142fc:	d8c00c15 	stw	r3,48(sp)
   14300:	d9800615 	stw	r6,24(sp)
   14304:	0183a40e 	bge	zero,r6,15198 <_dtoa_r+0x11cc>
   14308:	d9800617 	ldw	r6,24(sp)
   1430c:	3021883a 	mov	r16,r6
   14310:	e0001115 	stw	zero,68(fp)
   14314:	008005c4 	movi	r2,23
   14318:	1184c92e 	bgeu	r2,r6,15640 <_dtoa_r+0x1674>
   1431c:	00c00044 	movi	r3,1
   14320:	00800104 	movi	r2,4
   14324:	1085883a 	add	r2,r2,r2
   14328:	11000504 	addi	r4,r2,20
   1432c:	180b883a 	mov	r5,r3
   14330:	18c00044 	addi	r3,r3,1
   14334:	313ffb2e 	bgeu	r6,r4,14324 <__alt_data_end+0xfc014324>
   14338:	e1401115 	stw	r5,68(fp)
   1433c:	e009883a 	mov	r4,fp
   14340:	0016c080 	call	16c08 <_Balloc>
   14344:	d8800715 	stw	r2,28(sp)
   14348:	e0801015 	stw	r2,64(fp)
   1434c:	00800384 	movi	r2,14
   14350:	1400f736 	bltu	r2,r16,14730 <_dtoa_r+0x764>
   14354:	8800f626 	beq	r17,zero,14730 <_dtoa_r+0x764>
   14358:	d9c00517 	ldw	r7,20(sp)
   1435c:	01c39a0e 	bge	zero,r7,151c8 <_dtoa_r+0x11fc>
   14360:	388003cc 	andi	r2,r7,15
   14364:	100490fa 	slli	r2,r2,3
   14368:	382bd13a 	srai	r21,r7,4
   1436c:	00c000f4 	movhi	r3,3
   14370:	18eac504 	addi	r3,r3,-21740
   14374:	1885883a 	add	r2,r3,r2
   14378:	a8c0040c 	andi	r3,r21,16
   1437c:	12400017 	ldw	r9,0(r2)
   14380:	12000117 	ldw	r8,4(r2)
   14384:	18037926 	beq	r3,zero,1516c <_dtoa_r+0x11a0>
   14388:	008000f4 	movhi	r2,3
   1438c:	10aabb04 	addi	r2,r2,-21780
   14390:	11800817 	ldw	r6,32(r2)
   14394:	11c00917 	ldw	r7,36(r2)
   14398:	9009883a 	mov	r4,r18
   1439c:	980b883a 	mov	r5,r19
   143a0:	da001715 	stw	r8,92(sp)
   143a4:	da401615 	stw	r9,88(sp)
   143a8:	001cf5c0 	call	1cf5c <__divdf3>
   143ac:	da001717 	ldw	r8,92(sp)
   143b0:	da401617 	ldw	r9,88(sp)
   143b4:	ad4003cc 	andi	r21,r21,15
   143b8:	040000c4 	movi	r16,3
   143bc:	1023883a 	mov	r17,r2
   143c0:	1829883a 	mov	r20,r3
   143c4:	a8001126 	beq	r21,zero,1440c <_dtoa_r+0x440>
   143c8:	05c000f4 	movhi	r23,3
   143cc:	bdeabb04 	addi	r23,r23,-21780
   143d0:	4805883a 	mov	r2,r9
   143d4:	4007883a 	mov	r3,r8
   143d8:	a980004c 	andi	r6,r21,1
   143dc:	1009883a 	mov	r4,r2
   143e0:	a82bd07a 	srai	r21,r21,1
   143e4:	180b883a 	mov	r5,r3
   143e8:	30000426 	beq	r6,zero,143fc <_dtoa_r+0x430>
   143ec:	b9800017 	ldw	r6,0(r23)
   143f0:	b9c00117 	ldw	r7,4(r23)
   143f4:	84000044 	addi	r16,r16,1
   143f8:	001db840 	call	1db84 <__muldf3>
   143fc:	bdc00204 	addi	r23,r23,8
   14400:	a83ff51e 	bne	r21,zero,143d8 <__alt_data_end+0xfc0143d8>
   14404:	1013883a 	mov	r9,r2
   14408:	1811883a 	mov	r8,r3
   1440c:	480d883a 	mov	r6,r9
   14410:	400f883a 	mov	r7,r8
   14414:	8809883a 	mov	r4,r17
   14418:	a00b883a 	mov	r5,r20
   1441c:	001cf5c0 	call	1cf5c <__divdf3>
   14420:	d8800f15 	stw	r2,60(sp)
   14424:	d8c01015 	stw	r3,64(sp)
   14428:	d8c00e17 	ldw	r3,56(sp)
   1442c:	18000626 	beq	r3,zero,14448 <_dtoa_r+0x47c>
   14430:	d9000f17 	ldw	r4,60(sp)
   14434:	d9401017 	ldw	r5,64(sp)
   14438:	000d883a 	mov	r6,zero
   1443c:	01cffc34 	movhi	r7,16368
   14440:	001da900 	call	1da90 <__ledf2>
   14444:	10040b16 	blt	r2,zero,15474 <_dtoa_r+0x14a8>
   14448:	8009883a 	mov	r4,r16
   1444c:	001ed6c0 	call	1ed6c <__floatsidf>
   14450:	d9800f17 	ldw	r6,60(sp)
   14454:	d9c01017 	ldw	r7,64(sp)
   14458:	1009883a 	mov	r4,r2
   1445c:	180b883a 	mov	r5,r3
   14460:	001db840 	call	1db84 <__muldf3>
   14464:	000d883a 	mov	r6,zero
   14468:	01d00734 	movhi	r7,16412
   1446c:	1009883a 	mov	r4,r2
   14470:	180b883a 	mov	r5,r3
   14474:	001c6b00 	call	1c6b0 <__adddf3>
   14478:	1021883a 	mov	r16,r2
   1447c:	d8800617 	ldw	r2,24(sp)
   14480:	047f3034 	movhi	r17,64704
   14484:	1c63883a 	add	r17,r3,r17
   14488:	10031826 	beq	r2,zero,150ec <_dtoa_r+0x1120>
   1448c:	d8c00517 	ldw	r3,20(sp)
   14490:	db000617 	ldw	r12,24(sp)
   14494:	d8c01315 	stw	r3,76(sp)
   14498:	d9000b17 	ldw	r4,44(sp)
   1449c:	20038f26 	beq	r4,zero,152dc <_dtoa_r+0x1310>
   144a0:	60bfffc4 	addi	r2,r12,-1
   144a4:	100490fa 	slli	r2,r2,3
   144a8:	00c000f4 	movhi	r3,3
   144ac:	18eac504 	addi	r3,r3,-21740
   144b0:	1885883a 	add	r2,r3,r2
   144b4:	11800017 	ldw	r6,0(r2)
   144b8:	11c00117 	ldw	r7,4(r2)
   144bc:	d8800717 	ldw	r2,28(sp)
   144c0:	0009883a 	mov	r4,zero
   144c4:	014ff834 	movhi	r5,16352
   144c8:	db001615 	stw	r12,88(sp)
   144cc:	15c00044 	addi	r23,r2,1
   144d0:	001cf5c0 	call	1cf5c <__divdf3>
   144d4:	800d883a 	mov	r6,r16
   144d8:	880f883a 	mov	r7,r17
   144dc:	1009883a 	mov	r4,r2
   144e0:	180b883a 	mov	r5,r3
   144e4:	001e3f00 	call	1e3f0 <__subdf3>
   144e8:	d9401017 	ldw	r5,64(sp)
   144ec:	d9000f17 	ldw	r4,60(sp)
   144f0:	102b883a 	mov	r21,r2
   144f4:	d8c01215 	stw	r3,72(sp)
   144f8:	001ecec0 	call	1ecec <__fixdfsi>
   144fc:	1009883a 	mov	r4,r2
   14500:	1029883a 	mov	r20,r2
   14504:	001ed6c0 	call	1ed6c <__floatsidf>
   14508:	d9000f17 	ldw	r4,60(sp)
   1450c:	d9401017 	ldw	r5,64(sp)
   14510:	100d883a 	mov	r6,r2
   14514:	180f883a 	mov	r7,r3
   14518:	001e3f00 	call	1e3f0 <__subdf3>
   1451c:	1823883a 	mov	r17,r3
   14520:	d8c00717 	ldw	r3,28(sp)
   14524:	d9401217 	ldw	r5,72(sp)
   14528:	a2000c04 	addi	r8,r20,48
   1452c:	1021883a 	mov	r16,r2
   14530:	1a000005 	stb	r8,0(r3)
   14534:	800d883a 	mov	r6,r16
   14538:	880f883a 	mov	r7,r17
   1453c:	a809883a 	mov	r4,r21
   14540:	4029883a 	mov	r20,r8
   14544:	001d9b40 	call	1d9b4 <__gedf2>
   14548:	00841d16 	blt	zero,r2,155c0 <_dtoa_r+0x15f4>
   1454c:	800d883a 	mov	r6,r16
   14550:	880f883a 	mov	r7,r17
   14554:	0009883a 	mov	r4,zero
   14558:	014ffc34 	movhi	r5,16368
   1455c:	001e3f00 	call	1e3f0 <__subdf3>
   14560:	d9401217 	ldw	r5,72(sp)
   14564:	100d883a 	mov	r6,r2
   14568:	180f883a 	mov	r7,r3
   1456c:	a809883a 	mov	r4,r21
   14570:	001d9b40 	call	1d9b4 <__gedf2>
   14574:	db001617 	ldw	r12,88(sp)
   14578:	00840e16 	blt	zero,r2,155b4 <_dtoa_r+0x15e8>
   1457c:	00800044 	movi	r2,1
   14580:	13006b0e 	bge	r2,r12,14730 <_dtoa_r+0x764>
   14584:	d9000717 	ldw	r4,28(sp)
   14588:	dd800f15 	stw	r22,60(sp)
   1458c:	dcc01015 	stw	r19,64(sp)
   14590:	2319883a 	add	r12,r4,r12
   14594:	dcc01217 	ldw	r19,72(sp)
   14598:	602d883a 	mov	r22,r12
   1459c:	dc801215 	stw	r18,72(sp)
   145a0:	b825883a 	mov	r18,r23
   145a4:	00000906 	br	145cc <_dtoa_r+0x600>
   145a8:	001e3f00 	call	1e3f0 <__subdf3>
   145ac:	a80d883a 	mov	r6,r21
   145b0:	980f883a 	mov	r7,r19
   145b4:	1009883a 	mov	r4,r2
   145b8:	180b883a 	mov	r5,r3
   145bc:	001da900 	call	1da90 <__ledf2>
   145c0:	1003e816 	blt	r2,zero,15564 <_dtoa_r+0x1598>
   145c4:	b825883a 	mov	r18,r23
   145c8:	bd83e926 	beq	r23,r22,15570 <_dtoa_r+0x15a4>
   145cc:	a809883a 	mov	r4,r21
   145d0:	980b883a 	mov	r5,r19
   145d4:	000d883a 	mov	r6,zero
   145d8:	01d00934 	movhi	r7,16420
   145dc:	001db840 	call	1db84 <__muldf3>
   145e0:	000d883a 	mov	r6,zero
   145e4:	01d00934 	movhi	r7,16420
   145e8:	8009883a 	mov	r4,r16
   145ec:	880b883a 	mov	r5,r17
   145f0:	102b883a 	mov	r21,r2
   145f4:	1827883a 	mov	r19,r3
   145f8:	001db840 	call	1db84 <__muldf3>
   145fc:	180b883a 	mov	r5,r3
   14600:	1009883a 	mov	r4,r2
   14604:	1821883a 	mov	r16,r3
   14608:	1023883a 	mov	r17,r2
   1460c:	001ecec0 	call	1ecec <__fixdfsi>
   14610:	1009883a 	mov	r4,r2
   14614:	1029883a 	mov	r20,r2
   14618:	001ed6c0 	call	1ed6c <__floatsidf>
   1461c:	8809883a 	mov	r4,r17
   14620:	800b883a 	mov	r5,r16
   14624:	100d883a 	mov	r6,r2
   14628:	180f883a 	mov	r7,r3
   1462c:	001e3f00 	call	1e3f0 <__subdf3>
   14630:	a5000c04 	addi	r20,r20,48
   14634:	a80d883a 	mov	r6,r21
   14638:	980f883a 	mov	r7,r19
   1463c:	1009883a 	mov	r4,r2
   14640:	180b883a 	mov	r5,r3
   14644:	95000005 	stb	r20,0(r18)
   14648:	1021883a 	mov	r16,r2
   1464c:	1823883a 	mov	r17,r3
   14650:	001da900 	call	1da90 <__ledf2>
   14654:	bdc00044 	addi	r23,r23,1
   14658:	800d883a 	mov	r6,r16
   1465c:	880f883a 	mov	r7,r17
   14660:	0009883a 	mov	r4,zero
   14664:	014ffc34 	movhi	r5,16368
   14668:	103fcf0e 	bge	r2,zero,145a8 <__alt_data_end+0xfc0145a8>
   1466c:	d8c01317 	ldw	r3,76(sp)
   14670:	d8c00515 	stw	r3,20(sp)
   14674:	d9400917 	ldw	r5,36(sp)
   14678:	e009883a 	mov	r4,fp
   1467c:	0016cb00 	call	16cb0 <_Bfree>
   14680:	d9000517 	ldw	r4,20(sp)
   14684:	d9802317 	ldw	r6,140(sp)
   14688:	d9c02517 	ldw	r7,148(sp)
   1468c:	b8000005 	stb	zero,0(r23)
   14690:	20800044 	addi	r2,r4,1
   14694:	30800015 	stw	r2,0(r6)
   14698:	3802aa26 	beq	r7,zero,15144 <_dtoa_r+0x1178>
   1469c:	3dc00015 	stw	r23,0(r7)
   146a0:	d8800717 	ldw	r2,28(sp)
   146a4:	003e7906 	br	1408c <__alt_data_end+0xfc01408c>
   146a8:	00800434 	movhi	r2,16
   146ac:	10bfffc4 	addi	r2,r2,-1
   146b0:	88a2703a 	and	r17,r17,r2
   146b4:	883e851e 	bne	r17,zero,140cc <__alt_data_end+0xfc0140cc>
   146b8:	008000f4 	movhi	r2,3
   146bc:	10aaa704 	addi	r2,r2,-21860
   146c0:	003e8406 	br	140d4 <__alt_data_end+0xfc0140d4>
   146c4:	10c00204 	addi	r3,r2,8
   146c8:	003e8706 	br	140e8 <__alt_data_end+0xfc0140e8>
   146cc:	01400434 	movhi	r5,16
   146d0:	297fffc4 	addi	r5,r5,-1
   146d4:	994a703a 	and	r5,r19,r5
   146d8:	9009883a 	mov	r4,r18
   146dc:	843f0044 	addi	r16,r16,-1023
   146e0:	294ffc34 	orhi	r5,r5,16368
   146e4:	dd800217 	ldw	r22,8(sp)
   146e8:	d8001115 	stw	zero,68(sp)
   146ec:	003ea506 	br	14184 <__alt_data_end+0xfc014184>
   146f0:	008000f4 	movhi	r2,3
   146f4:	10aa9604 	addi	r2,r2,-21928
   146f8:	003e6406 	br	1408c <__alt_data_end+0xfc01408c>
   146fc:	e0001115 	stw	zero,68(fp)
   14700:	000b883a 	mov	r5,zero
   14704:	e009883a 	mov	r4,fp
   14708:	0016c080 	call	16c08 <_Balloc>
   1470c:	01bfffc4 	movi	r6,-1
   14710:	01c00044 	movi	r7,1
   14714:	d8800715 	stw	r2,28(sp)
   14718:	d9800c15 	stw	r6,48(sp)
   1471c:	e0801015 	stw	r2,64(fp)
   14720:	d8000315 	stw	zero,12(sp)
   14724:	d9c00b15 	stw	r7,44(sp)
   14728:	d9800615 	stw	r6,24(sp)
   1472c:	d8002215 	stw	zero,136(sp)
   14730:	d8800117 	ldw	r2,4(sp)
   14734:	10008916 	blt	r2,zero,1495c <_dtoa_r+0x990>
   14738:	d9000517 	ldw	r4,20(sp)
   1473c:	00c00384 	movi	r3,14
   14740:	19008616 	blt	r3,r4,1495c <_dtoa_r+0x990>
   14744:	200490fa 	slli	r2,r4,3
   14748:	00c000f4 	movhi	r3,3
   1474c:	d9802217 	ldw	r6,136(sp)
   14750:	18eac504 	addi	r3,r3,-21740
   14754:	1885883a 	add	r2,r3,r2
   14758:	14000017 	ldw	r16,0(r2)
   1475c:	14400117 	ldw	r17,4(r2)
   14760:	30016316 	blt	r6,zero,14cf0 <_dtoa_r+0xd24>
   14764:	800d883a 	mov	r6,r16
   14768:	880f883a 	mov	r7,r17
   1476c:	9009883a 	mov	r4,r18
   14770:	980b883a 	mov	r5,r19
   14774:	001cf5c0 	call	1cf5c <__divdf3>
   14778:	180b883a 	mov	r5,r3
   1477c:	1009883a 	mov	r4,r2
   14780:	001ecec0 	call	1ecec <__fixdfsi>
   14784:	1009883a 	mov	r4,r2
   14788:	102b883a 	mov	r21,r2
   1478c:	001ed6c0 	call	1ed6c <__floatsidf>
   14790:	800d883a 	mov	r6,r16
   14794:	880f883a 	mov	r7,r17
   14798:	1009883a 	mov	r4,r2
   1479c:	180b883a 	mov	r5,r3
   147a0:	001db840 	call	1db84 <__muldf3>
   147a4:	100d883a 	mov	r6,r2
   147a8:	180f883a 	mov	r7,r3
   147ac:	9009883a 	mov	r4,r18
   147b0:	980b883a 	mov	r5,r19
   147b4:	001e3f00 	call	1e3f0 <__subdf3>
   147b8:	d9c00717 	ldw	r7,28(sp)
   147bc:	1009883a 	mov	r4,r2
   147c0:	a8800c04 	addi	r2,r21,48
   147c4:	38800005 	stb	r2,0(r7)
   147c8:	3dc00044 	addi	r23,r7,1
   147cc:	d9c00617 	ldw	r7,24(sp)
   147d0:	01800044 	movi	r6,1
   147d4:	180b883a 	mov	r5,r3
   147d8:	2005883a 	mov	r2,r4
   147dc:	39803826 	beq	r7,r6,148c0 <_dtoa_r+0x8f4>
   147e0:	000d883a 	mov	r6,zero
   147e4:	01d00934 	movhi	r7,16420
   147e8:	001db840 	call	1db84 <__muldf3>
   147ec:	000d883a 	mov	r6,zero
   147f0:	000f883a 	mov	r7,zero
   147f4:	1009883a 	mov	r4,r2
   147f8:	180b883a 	mov	r5,r3
   147fc:	1025883a 	mov	r18,r2
   14800:	1827883a 	mov	r19,r3
   14804:	001d92c0 	call	1d92c <__eqdf2>
   14808:	103f9a26 	beq	r2,zero,14674 <__alt_data_end+0xfc014674>
   1480c:	d9c00617 	ldw	r7,24(sp)
   14810:	d8c00717 	ldw	r3,28(sp)
   14814:	b829883a 	mov	r20,r23
   14818:	38bfffc4 	addi	r2,r7,-1
   1481c:	18ad883a 	add	r22,r3,r2
   14820:	00000a06 	br	1484c <_dtoa_r+0x880>
   14824:	001db840 	call	1db84 <__muldf3>
   14828:	000d883a 	mov	r6,zero
   1482c:	000f883a 	mov	r7,zero
   14830:	1009883a 	mov	r4,r2
   14834:	180b883a 	mov	r5,r3
   14838:	1025883a 	mov	r18,r2
   1483c:	1827883a 	mov	r19,r3
   14840:	b829883a 	mov	r20,r23
   14844:	001d92c0 	call	1d92c <__eqdf2>
   14848:	103f8a26 	beq	r2,zero,14674 <__alt_data_end+0xfc014674>
   1484c:	800d883a 	mov	r6,r16
   14850:	880f883a 	mov	r7,r17
   14854:	9009883a 	mov	r4,r18
   14858:	980b883a 	mov	r5,r19
   1485c:	001cf5c0 	call	1cf5c <__divdf3>
   14860:	180b883a 	mov	r5,r3
   14864:	1009883a 	mov	r4,r2
   14868:	001ecec0 	call	1ecec <__fixdfsi>
   1486c:	1009883a 	mov	r4,r2
   14870:	102b883a 	mov	r21,r2
   14874:	001ed6c0 	call	1ed6c <__floatsidf>
   14878:	800d883a 	mov	r6,r16
   1487c:	880f883a 	mov	r7,r17
   14880:	1009883a 	mov	r4,r2
   14884:	180b883a 	mov	r5,r3
   14888:	001db840 	call	1db84 <__muldf3>
   1488c:	100d883a 	mov	r6,r2
   14890:	180f883a 	mov	r7,r3
   14894:	9009883a 	mov	r4,r18
   14898:	980b883a 	mov	r5,r19
   1489c:	001e3f00 	call	1e3f0 <__subdf3>
   148a0:	aa000c04 	addi	r8,r21,48
   148a4:	a2000005 	stb	r8,0(r20)
   148a8:	000d883a 	mov	r6,zero
   148ac:	01d00934 	movhi	r7,16420
   148b0:	1009883a 	mov	r4,r2
   148b4:	180b883a 	mov	r5,r3
   148b8:	a5c00044 	addi	r23,r20,1
   148bc:	b53fd91e 	bne	r22,r20,14824 <__alt_data_end+0xfc014824>
   148c0:	100d883a 	mov	r6,r2
   148c4:	180f883a 	mov	r7,r3
   148c8:	1009883a 	mov	r4,r2
   148cc:	180b883a 	mov	r5,r3
   148d0:	001c6b00 	call	1c6b0 <__adddf3>
   148d4:	100d883a 	mov	r6,r2
   148d8:	180f883a 	mov	r7,r3
   148dc:	8009883a 	mov	r4,r16
   148e0:	880b883a 	mov	r5,r17
   148e4:	1027883a 	mov	r19,r2
   148e8:	1825883a 	mov	r18,r3
   148ec:	001da900 	call	1da90 <__ledf2>
   148f0:	10000816 	blt	r2,zero,14914 <_dtoa_r+0x948>
   148f4:	980d883a 	mov	r6,r19
   148f8:	900f883a 	mov	r7,r18
   148fc:	8009883a 	mov	r4,r16
   14900:	880b883a 	mov	r5,r17
   14904:	001d92c0 	call	1d92c <__eqdf2>
   14908:	103f5a1e 	bne	r2,zero,14674 <__alt_data_end+0xfc014674>
   1490c:	ad40004c 	andi	r21,r21,1
   14910:	a83f5826 	beq	r21,zero,14674 <__alt_data_end+0xfc014674>
   14914:	bd3fffc3 	ldbu	r20,-1(r23)
   14918:	b8bfffc4 	addi	r2,r23,-1
   1491c:	1007883a 	mov	r3,r2
   14920:	01400e44 	movi	r5,57
   14924:	d9800717 	ldw	r6,28(sp)
   14928:	00000506 	br	14940 <_dtoa_r+0x974>
   1492c:	18ffffc4 	addi	r3,r3,-1
   14930:	11824726 	beq	r2,r6,15250 <_dtoa_r+0x1284>
   14934:	1d000003 	ldbu	r20,0(r3)
   14938:	102f883a 	mov	r23,r2
   1493c:	10bfffc4 	addi	r2,r2,-1
   14940:	a1003fcc 	andi	r4,r20,255
   14944:	2100201c 	xori	r4,r4,128
   14948:	213fe004 	addi	r4,r4,-128
   1494c:	217ff726 	beq	r4,r5,1492c <__alt_data_end+0xfc01492c>
   14950:	a2000044 	addi	r8,r20,1
   14954:	12000005 	stb	r8,0(r2)
   14958:	003f4606 	br	14674 <__alt_data_end+0xfc014674>
   1495c:	d9000b17 	ldw	r4,44(sp)
   14960:	2000c826 	beq	r4,zero,14c84 <_dtoa_r+0xcb8>
   14964:	d9800317 	ldw	r6,12(sp)
   14968:	00c00044 	movi	r3,1
   1496c:	1980f90e 	bge	r3,r6,14d54 <_dtoa_r+0xd88>
   14970:	d8800617 	ldw	r2,24(sp)
   14974:	d8c00a17 	ldw	r3,40(sp)
   14978:	157fffc4 	addi	r21,r2,-1
   1497c:	1d41f316 	blt	r3,r21,1514c <_dtoa_r+0x1180>
   14980:	1d6bc83a 	sub	r21,r3,r21
   14984:	d9c00617 	ldw	r7,24(sp)
   14988:	3802aa16 	blt	r7,zero,15434 <_dtoa_r+0x1468>
   1498c:	dd000817 	ldw	r20,32(sp)
   14990:	d8800617 	ldw	r2,24(sp)
   14994:	d8c00817 	ldw	r3,32(sp)
   14998:	01400044 	movi	r5,1
   1499c:	e009883a 	mov	r4,fp
   149a0:	1887883a 	add	r3,r3,r2
   149a4:	d8c00815 	stw	r3,32(sp)
   149a8:	b0ad883a 	add	r22,r22,r2
   149ac:	001703c0 	call	1703c <__i2b>
   149b0:	1023883a 	mov	r17,r2
   149b4:	a0000826 	beq	r20,zero,149d8 <_dtoa_r+0xa0c>
   149b8:	0580070e 	bge	zero,r22,149d8 <_dtoa_r+0xa0c>
   149bc:	a005883a 	mov	r2,r20
   149c0:	b500b916 	blt	r22,r20,14ca8 <_dtoa_r+0xcdc>
   149c4:	d9000817 	ldw	r4,32(sp)
   149c8:	a0a9c83a 	sub	r20,r20,r2
   149cc:	b0adc83a 	sub	r22,r22,r2
   149d0:	2089c83a 	sub	r4,r4,r2
   149d4:	d9000815 	stw	r4,32(sp)
   149d8:	d9800a17 	ldw	r6,40(sp)
   149dc:	0181810e 	bge	zero,r6,14fe4 <_dtoa_r+0x1018>
   149e0:	d9c00b17 	ldw	r7,44(sp)
   149e4:	3800b326 	beq	r7,zero,14cb4 <_dtoa_r+0xce8>
   149e8:	a800b226 	beq	r21,zero,14cb4 <_dtoa_r+0xce8>
   149ec:	880b883a 	mov	r5,r17
   149f0:	a80d883a 	mov	r6,r21
   149f4:	e009883a 	mov	r4,fp
   149f8:	00173040 	call	17304 <__pow5mult>
   149fc:	d9800917 	ldw	r6,36(sp)
   14a00:	100b883a 	mov	r5,r2
   14a04:	e009883a 	mov	r4,fp
   14a08:	1023883a 	mov	r17,r2
   14a0c:	00170780 	call	17078 <__multiply>
   14a10:	1021883a 	mov	r16,r2
   14a14:	d8800a17 	ldw	r2,40(sp)
   14a18:	d9400917 	ldw	r5,36(sp)
   14a1c:	e009883a 	mov	r4,fp
   14a20:	1545c83a 	sub	r2,r2,r21
   14a24:	d8800a15 	stw	r2,40(sp)
   14a28:	0016cb00 	call	16cb0 <_Bfree>
   14a2c:	d8c00a17 	ldw	r3,40(sp)
   14a30:	18009f1e 	bne	r3,zero,14cb0 <_dtoa_r+0xce4>
   14a34:	05c00044 	movi	r23,1
   14a38:	e009883a 	mov	r4,fp
   14a3c:	b80b883a 	mov	r5,r23
   14a40:	001703c0 	call	1703c <__i2b>
   14a44:	d9000d17 	ldw	r4,52(sp)
   14a48:	102b883a 	mov	r21,r2
   14a4c:	2000ce26 	beq	r4,zero,14d88 <_dtoa_r+0xdbc>
   14a50:	200d883a 	mov	r6,r4
   14a54:	100b883a 	mov	r5,r2
   14a58:	e009883a 	mov	r4,fp
   14a5c:	00173040 	call	17304 <__pow5mult>
   14a60:	d9800317 	ldw	r6,12(sp)
   14a64:	102b883a 	mov	r21,r2
   14a68:	b981810e 	bge	r23,r6,15070 <_dtoa_r+0x10a4>
   14a6c:	0027883a 	mov	r19,zero
   14a70:	a8800417 	ldw	r2,16(r21)
   14a74:	05c00804 	movi	r23,32
   14a78:	10800104 	addi	r2,r2,4
   14a7c:	1085883a 	add	r2,r2,r2
   14a80:	1085883a 	add	r2,r2,r2
   14a84:	a885883a 	add	r2,r21,r2
   14a88:	11000017 	ldw	r4,0(r2)
   14a8c:	0016f240 	call	16f24 <__hi0bits>
   14a90:	b885c83a 	sub	r2,r23,r2
   14a94:	1585883a 	add	r2,r2,r22
   14a98:	108007cc 	andi	r2,r2,31
   14a9c:	1000b326 	beq	r2,zero,14d6c <_dtoa_r+0xda0>
   14aa0:	00c00804 	movi	r3,32
   14aa4:	1887c83a 	sub	r3,r3,r2
   14aa8:	01000104 	movi	r4,4
   14aac:	20c2cd0e 	bge	r4,r3,155e4 <_dtoa_r+0x1618>
   14ab0:	00c00704 	movi	r3,28
   14ab4:	1885c83a 	sub	r2,r3,r2
   14ab8:	d8c00817 	ldw	r3,32(sp)
   14abc:	a0a9883a 	add	r20,r20,r2
   14ac0:	b0ad883a 	add	r22,r22,r2
   14ac4:	1887883a 	add	r3,r3,r2
   14ac8:	d8c00815 	stw	r3,32(sp)
   14acc:	d9800817 	ldw	r6,32(sp)
   14ad0:	0180040e 	bge	zero,r6,14ae4 <_dtoa_r+0xb18>
   14ad4:	800b883a 	mov	r5,r16
   14ad8:	e009883a 	mov	r4,fp
   14adc:	00174440 	call	17444 <__lshift>
   14ae0:	1021883a 	mov	r16,r2
   14ae4:	0580050e 	bge	zero,r22,14afc <_dtoa_r+0xb30>
   14ae8:	a80b883a 	mov	r5,r21
   14aec:	b00d883a 	mov	r6,r22
   14af0:	e009883a 	mov	r4,fp
   14af4:	00174440 	call	17444 <__lshift>
   14af8:	102b883a 	mov	r21,r2
   14afc:	d9c00e17 	ldw	r7,56(sp)
   14b00:	3801211e 	bne	r7,zero,14f88 <_dtoa_r+0xfbc>
   14b04:	d9800617 	ldw	r6,24(sp)
   14b08:	0181380e 	bge	zero,r6,14fec <_dtoa_r+0x1020>
   14b0c:	d8c00b17 	ldw	r3,44(sp)
   14b10:	1800ab1e 	bne	r3,zero,14dc0 <_dtoa_r+0xdf4>
   14b14:	dc800717 	ldw	r18,28(sp)
   14b18:	dcc00617 	ldw	r19,24(sp)
   14b1c:	9029883a 	mov	r20,r18
   14b20:	00000206 	br	14b2c <_dtoa_r+0xb60>
   14b24:	0016cd80 	call	16cd8 <__multadd>
   14b28:	1021883a 	mov	r16,r2
   14b2c:	a80b883a 	mov	r5,r21
   14b30:	8009883a 	mov	r4,r16
   14b34:	0013da40 	call	13da4 <quorem>
   14b38:	10800c04 	addi	r2,r2,48
   14b3c:	90800005 	stb	r2,0(r18)
   14b40:	94800044 	addi	r18,r18,1
   14b44:	9507c83a 	sub	r3,r18,r20
   14b48:	000f883a 	mov	r7,zero
   14b4c:	01800284 	movi	r6,10
   14b50:	800b883a 	mov	r5,r16
   14b54:	e009883a 	mov	r4,fp
   14b58:	1cfff216 	blt	r3,r19,14b24 <__alt_data_end+0xfc014b24>
   14b5c:	1011883a 	mov	r8,r2
   14b60:	d8800617 	ldw	r2,24(sp)
   14b64:	0082370e 	bge	zero,r2,15444 <_dtoa_r+0x1478>
   14b68:	d9000717 	ldw	r4,28(sp)
   14b6c:	0025883a 	mov	r18,zero
   14b70:	20af883a 	add	r23,r4,r2
   14b74:	01800044 	movi	r6,1
   14b78:	800b883a 	mov	r5,r16
   14b7c:	e009883a 	mov	r4,fp
   14b80:	da001715 	stw	r8,92(sp)
   14b84:	00174440 	call	17444 <__lshift>
   14b88:	a80b883a 	mov	r5,r21
   14b8c:	1009883a 	mov	r4,r2
   14b90:	d8800915 	stw	r2,36(sp)
   14b94:	001758c0 	call	1758c <__mcmp>
   14b98:	da001717 	ldw	r8,92(sp)
   14b9c:	0081800e 	bge	zero,r2,151a0 <_dtoa_r+0x11d4>
   14ba0:	b93fffc3 	ldbu	r4,-1(r23)
   14ba4:	b8bfffc4 	addi	r2,r23,-1
   14ba8:	1007883a 	mov	r3,r2
   14bac:	01800e44 	movi	r6,57
   14bb0:	d9c00717 	ldw	r7,28(sp)
   14bb4:	00000506 	br	14bcc <_dtoa_r+0xc00>
   14bb8:	18ffffc4 	addi	r3,r3,-1
   14bbc:	11c12326 	beq	r2,r7,1504c <_dtoa_r+0x1080>
   14bc0:	19000003 	ldbu	r4,0(r3)
   14bc4:	102f883a 	mov	r23,r2
   14bc8:	10bfffc4 	addi	r2,r2,-1
   14bcc:	21403fcc 	andi	r5,r4,255
   14bd0:	2940201c 	xori	r5,r5,128
   14bd4:	297fe004 	addi	r5,r5,-128
   14bd8:	29bff726 	beq	r5,r6,14bb8 <__alt_data_end+0xfc014bb8>
   14bdc:	21000044 	addi	r4,r4,1
   14be0:	11000005 	stb	r4,0(r2)
   14be4:	a80b883a 	mov	r5,r21
   14be8:	e009883a 	mov	r4,fp
   14bec:	0016cb00 	call	16cb0 <_Bfree>
   14bf0:	883ea026 	beq	r17,zero,14674 <__alt_data_end+0xfc014674>
   14bf4:	90000426 	beq	r18,zero,14c08 <_dtoa_r+0xc3c>
   14bf8:	94400326 	beq	r18,r17,14c08 <_dtoa_r+0xc3c>
   14bfc:	900b883a 	mov	r5,r18
   14c00:	e009883a 	mov	r4,fp
   14c04:	0016cb00 	call	16cb0 <_Bfree>
   14c08:	880b883a 	mov	r5,r17
   14c0c:	e009883a 	mov	r4,fp
   14c10:	0016cb00 	call	16cb0 <_Bfree>
   14c14:	003e9706 	br	14674 <__alt_data_end+0xfc014674>
   14c18:	01800044 	movi	r6,1
   14c1c:	d9800e15 	stw	r6,56(sp)
   14c20:	003d9606 	br	1427c <__alt_data_end+0xfc01427c>
   14c24:	d8800817 	ldw	r2,32(sp)
   14c28:	d8c00517 	ldw	r3,20(sp)
   14c2c:	d8000d15 	stw	zero,52(sp)
   14c30:	10c5c83a 	sub	r2,r2,r3
   14c34:	00c9c83a 	sub	r4,zero,r3
   14c38:	d8800815 	stw	r2,32(sp)
   14c3c:	d9000a15 	stw	r4,40(sp)
   14c40:	003d9706 	br	142a0 <__alt_data_end+0xfc0142a0>
   14c44:	05adc83a 	sub	r22,zero,r22
   14c48:	dd800815 	stw	r22,32(sp)
   14c4c:	002d883a 	mov	r22,zero
   14c50:	003d8e06 	br	1428c <__alt_data_end+0xfc01428c>
   14c54:	d9000517 	ldw	r4,20(sp)
   14c58:	001ed6c0 	call	1ed6c <__floatsidf>
   14c5c:	100d883a 	mov	r6,r2
   14c60:	180f883a 	mov	r7,r3
   14c64:	a009883a 	mov	r4,r20
   14c68:	880b883a 	mov	r5,r17
   14c6c:	001d92c0 	call	1d92c <__eqdf2>
   14c70:	103d7126 	beq	r2,zero,14238 <__alt_data_end+0xfc014238>
   14c74:	d9c00517 	ldw	r7,20(sp)
   14c78:	39ffffc4 	addi	r7,r7,-1
   14c7c:	d9c00515 	stw	r7,20(sp)
   14c80:	003d6d06 	br	14238 <__alt_data_end+0xfc014238>
   14c84:	dd400a17 	ldw	r21,40(sp)
   14c88:	dd000817 	ldw	r20,32(sp)
   14c8c:	0023883a 	mov	r17,zero
   14c90:	003f4806 	br	149b4 <__alt_data_end+0xfc0149b4>
   14c94:	10e3c83a 	sub	r17,r2,r3
   14c98:	9448983a 	sll	r4,r18,r17
   14c9c:	003d3206 	br	14168 <__alt_data_end+0xfc014168>
   14ca0:	d8000e15 	stw	zero,56(sp)
   14ca4:	003d7506 	br	1427c <__alt_data_end+0xfc01427c>
   14ca8:	b005883a 	mov	r2,r22
   14cac:	003f4506 	br	149c4 <__alt_data_end+0xfc0149c4>
   14cb0:	dc000915 	stw	r16,36(sp)
   14cb4:	d9800a17 	ldw	r6,40(sp)
   14cb8:	d9400917 	ldw	r5,36(sp)
   14cbc:	e009883a 	mov	r4,fp
   14cc0:	00173040 	call	17304 <__pow5mult>
   14cc4:	1021883a 	mov	r16,r2
   14cc8:	003f5a06 	br	14a34 <__alt_data_end+0xfc014a34>
   14ccc:	01c00044 	movi	r7,1
   14cd0:	d9c00b15 	stw	r7,44(sp)
   14cd4:	d8802217 	ldw	r2,136(sp)
   14cd8:	0081280e 	bge	zero,r2,1517c <_dtoa_r+0x11b0>
   14cdc:	100d883a 	mov	r6,r2
   14ce0:	1021883a 	mov	r16,r2
   14ce4:	d8800c15 	stw	r2,48(sp)
   14ce8:	d8800615 	stw	r2,24(sp)
   14cec:	003d8806 	br	14310 <__alt_data_end+0xfc014310>
   14cf0:	d8800617 	ldw	r2,24(sp)
   14cf4:	00be9b16 	blt	zero,r2,14764 <__alt_data_end+0xfc014764>
   14cf8:	10010f1e 	bne	r2,zero,15138 <_dtoa_r+0x116c>
   14cfc:	880b883a 	mov	r5,r17
   14d00:	000d883a 	mov	r6,zero
   14d04:	01d00534 	movhi	r7,16404
   14d08:	8009883a 	mov	r4,r16
   14d0c:	001db840 	call	1db84 <__muldf3>
   14d10:	900d883a 	mov	r6,r18
   14d14:	980f883a 	mov	r7,r19
   14d18:	1009883a 	mov	r4,r2
   14d1c:	180b883a 	mov	r5,r3
   14d20:	001d9b40 	call	1d9b4 <__gedf2>
   14d24:	002b883a 	mov	r21,zero
   14d28:	0023883a 	mov	r17,zero
   14d2c:	1000bf16 	blt	r2,zero,1502c <_dtoa_r+0x1060>
   14d30:	d9802217 	ldw	r6,136(sp)
   14d34:	ddc00717 	ldw	r23,28(sp)
   14d38:	018c303a 	nor	r6,zero,r6
   14d3c:	d9800515 	stw	r6,20(sp)
   14d40:	a80b883a 	mov	r5,r21
   14d44:	e009883a 	mov	r4,fp
   14d48:	0016cb00 	call	16cb0 <_Bfree>
   14d4c:	883e4926 	beq	r17,zero,14674 <__alt_data_end+0xfc014674>
   14d50:	003fad06 	br	14c08 <__alt_data_end+0xfc014c08>
   14d54:	d9c01117 	ldw	r7,68(sp)
   14d58:	3801bc26 	beq	r7,zero,1544c <_dtoa_r+0x1480>
   14d5c:	10810cc4 	addi	r2,r2,1075
   14d60:	dd400a17 	ldw	r21,40(sp)
   14d64:	dd000817 	ldw	r20,32(sp)
   14d68:	003f0a06 	br	14994 <__alt_data_end+0xfc014994>
   14d6c:	00800704 	movi	r2,28
   14d70:	d9000817 	ldw	r4,32(sp)
   14d74:	a0a9883a 	add	r20,r20,r2
   14d78:	b0ad883a 	add	r22,r22,r2
   14d7c:	2089883a 	add	r4,r4,r2
   14d80:	d9000815 	stw	r4,32(sp)
   14d84:	003f5106 	br	14acc <__alt_data_end+0xfc014acc>
   14d88:	d8c00317 	ldw	r3,12(sp)
   14d8c:	b8c1fc0e 	bge	r23,r3,15580 <_dtoa_r+0x15b4>
   14d90:	0027883a 	mov	r19,zero
   14d94:	b805883a 	mov	r2,r23
   14d98:	003f3e06 	br	14a94 <__alt_data_end+0xfc014a94>
   14d9c:	880b883a 	mov	r5,r17
   14da0:	e009883a 	mov	r4,fp
   14da4:	000f883a 	mov	r7,zero
   14da8:	01800284 	movi	r6,10
   14dac:	0016cd80 	call	16cd8 <__multadd>
   14db0:	d9000c17 	ldw	r4,48(sp)
   14db4:	1023883a 	mov	r17,r2
   14db8:	0102040e 	bge	zero,r4,155cc <_dtoa_r+0x1600>
   14dbc:	d9000615 	stw	r4,24(sp)
   14dc0:	0500050e 	bge	zero,r20,14dd8 <_dtoa_r+0xe0c>
   14dc4:	880b883a 	mov	r5,r17
   14dc8:	a00d883a 	mov	r6,r20
   14dcc:	e009883a 	mov	r4,fp
   14dd0:	00174440 	call	17444 <__lshift>
   14dd4:	1023883a 	mov	r17,r2
   14dd8:	9801241e 	bne	r19,zero,1526c <_dtoa_r+0x12a0>
   14ddc:	8829883a 	mov	r20,r17
   14de0:	d9000617 	ldw	r4,24(sp)
   14de4:	dcc00717 	ldw	r19,28(sp)
   14de8:	9480004c 	andi	r18,r18,1
   14dec:	20bfffc4 	addi	r2,r4,-1
   14df0:	9885883a 	add	r2,r19,r2
   14df4:	d8800415 	stw	r2,16(sp)
   14df8:	dc800615 	stw	r18,24(sp)
   14dfc:	a80b883a 	mov	r5,r21
   14e00:	8009883a 	mov	r4,r16
   14e04:	0013da40 	call	13da4 <quorem>
   14e08:	880b883a 	mov	r5,r17
   14e0c:	8009883a 	mov	r4,r16
   14e10:	102f883a 	mov	r23,r2
   14e14:	001758c0 	call	1758c <__mcmp>
   14e18:	a80b883a 	mov	r5,r21
   14e1c:	a00d883a 	mov	r6,r20
   14e20:	e009883a 	mov	r4,fp
   14e24:	102d883a 	mov	r22,r2
   14e28:	00175ec0 	call	175ec <__mdiff>
   14e2c:	1007883a 	mov	r3,r2
   14e30:	10800317 	ldw	r2,12(r2)
   14e34:	bc800c04 	addi	r18,r23,48
   14e38:	180b883a 	mov	r5,r3
   14e3c:	10004e1e 	bne	r2,zero,14f78 <_dtoa_r+0xfac>
   14e40:	8009883a 	mov	r4,r16
   14e44:	d8c01615 	stw	r3,88(sp)
   14e48:	001758c0 	call	1758c <__mcmp>
   14e4c:	d8c01617 	ldw	r3,88(sp)
   14e50:	e009883a 	mov	r4,fp
   14e54:	d8801615 	stw	r2,88(sp)
   14e58:	180b883a 	mov	r5,r3
   14e5c:	0016cb00 	call	16cb0 <_Bfree>
   14e60:	d8801617 	ldw	r2,88(sp)
   14e64:	1000041e 	bne	r2,zero,14e78 <_dtoa_r+0xeac>
   14e68:	d9800317 	ldw	r6,12(sp)
   14e6c:	3000021e 	bne	r6,zero,14e78 <_dtoa_r+0xeac>
   14e70:	d8c00617 	ldw	r3,24(sp)
   14e74:	18003726 	beq	r3,zero,14f54 <_dtoa_r+0xf88>
   14e78:	b0002016 	blt	r22,zero,14efc <_dtoa_r+0xf30>
   14e7c:	b000041e 	bne	r22,zero,14e90 <_dtoa_r+0xec4>
   14e80:	d9000317 	ldw	r4,12(sp)
   14e84:	2000021e 	bne	r4,zero,14e90 <_dtoa_r+0xec4>
   14e88:	d8c00617 	ldw	r3,24(sp)
   14e8c:	18001b26 	beq	r3,zero,14efc <_dtoa_r+0xf30>
   14e90:	00810716 	blt	zero,r2,152b0 <_dtoa_r+0x12e4>
   14e94:	d8c00417 	ldw	r3,16(sp)
   14e98:	9d800044 	addi	r22,r19,1
   14e9c:	9c800005 	stb	r18,0(r19)
   14ea0:	b02f883a 	mov	r23,r22
   14ea4:	98c10626 	beq	r19,r3,152c0 <_dtoa_r+0x12f4>
   14ea8:	800b883a 	mov	r5,r16
   14eac:	000f883a 	mov	r7,zero
   14eb0:	01800284 	movi	r6,10
   14eb4:	e009883a 	mov	r4,fp
   14eb8:	0016cd80 	call	16cd8 <__multadd>
   14ebc:	1021883a 	mov	r16,r2
   14ec0:	000f883a 	mov	r7,zero
   14ec4:	01800284 	movi	r6,10
   14ec8:	880b883a 	mov	r5,r17
   14ecc:	e009883a 	mov	r4,fp
   14ed0:	8d002526 	beq	r17,r20,14f68 <_dtoa_r+0xf9c>
   14ed4:	0016cd80 	call	16cd8 <__multadd>
   14ed8:	a00b883a 	mov	r5,r20
   14edc:	000f883a 	mov	r7,zero
   14ee0:	01800284 	movi	r6,10
   14ee4:	e009883a 	mov	r4,fp
   14ee8:	1023883a 	mov	r17,r2
   14eec:	0016cd80 	call	16cd8 <__multadd>
   14ef0:	1029883a 	mov	r20,r2
   14ef4:	b027883a 	mov	r19,r22
   14ef8:	003fc006 	br	14dfc <__alt_data_end+0xfc014dfc>
   14efc:	9011883a 	mov	r8,r18
   14f00:	00800e0e 	bge	zero,r2,14f3c <_dtoa_r+0xf70>
   14f04:	800b883a 	mov	r5,r16
   14f08:	01800044 	movi	r6,1
   14f0c:	e009883a 	mov	r4,fp
   14f10:	da001715 	stw	r8,92(sp)
   14f14:	00174440 	call	17444 <__lshift>
   14f18:	a80b883a 	mov	r5,r21
   14f1c:	1009883a 	mov	r4,r2
   14f20:	1021883a 	mov	r16,r2
   14f24:	001758c0 	call	1758c <__mcmp>
   14f28:	da001717 	ldw	r8,92(sp)
   14f2c:	0081960e 	bge	zero,r2,15588 <_dtoa_r+0x15bc>
   14f30:	00800e44 	movi	r2,57
   14f34:	40817026 	beq	r8,r2,154f8 <_dtoa_r+0x152c>
   14f38:	ba000c44 	addi	r8,r23,49
   14f3c:	8825883a 	mov	r18,r17
   14f40:	9dc00044 	addi	r23,r19,1
   14f44:	9a000005 	stb	r8,0(r19)
   14f48:	a023883a 	mov	r17,r20
   14f4c:	dc000915 	stw	r16,36(sp)
   14f50:	003f2406 	br	14be4 <__alt_data_end+0xfc014be4>
   14f54:	00800e44 	movi	r2,57
   14f58:	9011883a 	mov	r8,r18
   14f5c:	90816626 	beq	r18,r2,154f8 <_dtoa_r+0x152c>
   14f60:	05bff516 	blt	zero,r22,14f38 <__alt_data_end+0xfc014f38>
   14f64:	003ff506 	br	14f3c <__alt_data_end+0xfc014f3c>
   14f68:	0016cd80 	call	16cd8 <__multadd>
   14f6c:	1023883a 	mov	r17,r2
   14f70:	1029883a 	mov	r20,r2
   14f74:	003fdf06 	br	14ef4 <__alt_data_end+0xfc014ef4>
   14f78:	e009883a 	mov	r4,fp
   14f7c:	0016cb00 	call	16cb0 <_Bfree>
   14f80:	00800044 	movi	r2,1
   14f84:	003fbc06 	br	14e78 <__alt_data_end+0xfc014e78>
   14f88:	a80b883a 	mov	r5,r21
   14f8c:	8009883a 	mov	r4,r16
   14f90:	001758c0 	call	1758c <__mcmp>
   14f94:	103edb0e 	bge	r2,zero,14b04 <__alt_data_end+0xfc014b04>
   14f98:	800b883a 	mov	r5,r16
   14f9c:	000f883a 	mov	r7,zero
   14fa0:	01800284 	movi	r6,10
   14fa4:	e009883a 	mov	r4,fp
   14fa8:	0016cd80 	call	16cd8 <__multadd>
   14fac:	1021883a 	mov	r16,r2
   14fb0:	d8800517 	ldw	r2,20(sp)
   14fb4:	d8c00b17 	ldw	r3,44(sp)
   14fb8:	10bfffc4 	addi	r2,r2,-1
   14fbc:	d8800515 	stw	r2,20(sp)
   14fc0:	183f761e 	bne	r3,zero,14d9c <__alt_data_end+0xfc014d9c>
   14fc4:	d9000c17 	ldw	r4,48(sp)
   14fc8:	0101730e 	bge	zero,r4,15598 <_dtoa_r+0x15cc>
   14fcc:	d9000615 	stw	r4,24(sp)
   14fd0:	003ed006 	br	14b14 <__alt_data_end+0xfc014b14>
   14fd4:	00800084 	movi	r2,2
   14fd8:	3081861e 	bne	r6,r2,155f4 <_dtoa_r+0x1628>
   14fdc:	d8000b15 	stw	zero,44(sp)
   14fe0:	003f3c06 	br	14cd4 <__alt_data_end+0xfc014cd4>
   14fe4:	dc000917 	ldw	r16,36(sp)
   14fe8:	003e9206 	br	14a34 <__alt_data_end+0xfc014a34>
   14fec:	d9c00317 	ldw	r7,12(sp)
   14ff0:	00800084 	movi	r2,2
   14ff4:	11fec50e 	bge	r2,r7,14b0c <__alt_data_end+0xfc014b0c>
   14ff8:	d9000617 	ldw	r4,24(sp)
   14ffc:	20013c1e 	bne	r4,zero,154f0 <_dtoa_r+0x1524>
   15000:	a80b883a 	mov	r5,r21
   15004:	000f883a 	mov	r7,zero
   15008:	01800144 	movi	r6,5
   1500c:	e009883a 	mov	r4,fp
   15010:	0016cd80 	call	16cd8 <__multadd>
   15014:	100b883a 	mov	r5,r2
   15018:	8009883a 	mov	r4,r16
   1501c:	102b883a 	mov	r21,r2
   15020:	001758c0 	call	1758c <__mcmp>
   15024:	dc000915 	stw	r16,36(sp)
   15028:	00bf410e 	bge	zero,r2,14d30 <__alt_data_end+0xfc014d30>
   1502c:	d9c00717 	ldw	r7,28(sp)
   15030:	00800c44 	movi	r2,49
   15034:	38800005 	stb	r2,0(r7)
   15038:	d8800517 	ldw	r2,20(sp)
   1503c:	3dc00044 	addi	r23,r7,1
   15040:	10800044 	addi	r2,r2,1
   15044:	d8800515 	stw	r2,20(sp)
   15048:	003f3d06 	br	14d40 <__alt_data_end+0xfc014d40>
   1504c:	d9800517 	ldw	r6,20(sp)
   15050:	d9c00717 	ldw	r7,28(sp)
   15054:	00800c44 	movi	r2,49
   15058:	31800044 	addi	r6,r6,1
   1505c:	d9800515 	stw	r6,20(sp)
   15060:	38800005 	stb	r2,0(r7)
   15064:	003edf06 	br	14be4 <__alt_data_end+0xfc014be4>
   15068:	d8000b15 	stw	zero,44(sp)
   1506c:	003c9f06 	br	142ec <__alt_data_end+0xfc0142ec>
   15070:	903e7e1e 	bne	r18,zero,14a6c <__alt_data_end+0xfc014a6c>
   15074:	00800434 	movhi	r2,16
   15078:	10bfffc4 	addi	r2,r2,-1
   1507c:	9884703a 	and	r2,r19,r2
   15080:	1000ea1e 	bne	r2,zero,1542c <_dtoa_r+0x1460>
   15084:	9cdffc2c 	andhi	r19,r19,32752
   15088:	9800e826 	beq	r19,zero,1542c <_dtoa_r+0x1460>
   1508c:	d9c00817 	ldw	r7,32(sp)
   15090:	b5800044 	addi	r22,r22,1
   15094:	04c00044 	movi	r19,1
   15098:	39c00044 	addi	r7,r7,1
   1509c:	d9c00815 	stw	r7,32(sp)
   150a0:	d8800d17 	ldw	r2,52(sp)
   150a4:	103e721e 	bne	r2,zero,14a70 <__alt_data_end+0xfc014a70>
   150a8:	00800044 	movi	r2,1
   150ac:	003e7906 	br	14a94 <__alt_data_end+0xfc014a94>
   150b0:	8009883a 	mov	r4,r16
   150b4:	001ed6c0 	call	1ed6c <__floatsidf>
   150b8:	d9800f17 	ldw	r6,60(sp)
   150bc:	d9c01017 	ldw	r7,64(sp)
   150c0:	1009883a 	mov	r4,r2
   150c4:	180b883a 	mov	r5,r3
   150c8:	001db840 	call	1db84 <__muldf3>
   150cc:	000d883a 	mov	r6,zero
   150d0:	01d00734 	movhi	r7,16412
   150d4:	1009883a 	mov	r4,r2
   150d8:	180b883a 	mov	r5,r3
   150dc:	001c6b00 	call	1c6b0 <__adddf3>
   150e0:	047f3034 	movhi	r17,64704
   150e4:	1021883a 	mov	r16,r2
   150e8:	1c63883a 	add	r17,r3,r17
   150ec:	d9000f17 	ldw	r4,60(sp)
   150f0:	d9401017 	ldw	r5,64(sp)
   150f4:	000d883a 	mov	r6,zero
   150f8:	01d00534 	movhi	r7,16404
   150fc:	001e3f00 	call	1e3f0 <__subdf3>
   15100:	800d883a 	mov	r6,r16
   15104:	880f883a 	mov	r7,r17
   15108:	1009883a 	mov	r4,r2
   1510c:	180b883a 	mov	r5,r3
   15110:	102b883a 	mov	r21,r2
   15114:	1829883a 	mov	r20,r3
   15118:	001d9b40 	call	1d9b4 <__gedf2>
   1511c:	00806c16 	blt	zero,r2,152d0 <_dtoa_r+0x1304>
   15120:	89e0003c 	xorhi	r7,r17,32768
   15124:	800d883a 	mov	r6,r16
   15128:	a809883a 	mov	r4,r21
   1512c:	a00b883a 	mov	r5,r20
   15130:	001da900 	call	1da90 <__ledf2>
   15134:	103d7e0e 	bge	r2,zero,14730 <__alt_data_end+0xfc014730>
   15138:	002b883a 	mov	r21,zero
   1513c:	0023883a 	mov	r17,zero
   15140:	003efb06 	br	14d30 <__alt_data_end+0xfc014d30>
   15144:	d8800717 	ldw	r2,28(sp)
   15148:	003bd006 	br	1408c <__alt_data_end+0xfc01408c>
   1514c:	d9000a17 	ldw	r4,40(sp)
   15150:	d9800d17 	ldw	r6,52(sp)
   15154:	dd400a15 	stw	r21,40(sp)
   15158:	a905c83a 	sub	r2,r21,r4
   1515c:	308d883a 	add	r6,r6,r2
   15160:	d9800d15 	stw	r6,52(sp)
   15164:	002b883a 	mov	r21,zero
   15168:	003e0606 	br	14984 <__alt_data_end+0xfc014984>
   1516c:	9023883a 	mov	r17,r18
   15170:	9829883a 	mov	r20,r19
   15174:	04000084 	movi	r16,2
   15178:	003c9206 	br	143c4 <__alt_data_end+0xfc0143c4>
   1517c:	04000044 	movi	r16,1
   15180:	dc000c15 	stw	r16,48(sp)
   15184:	dc000615 	stw	r16,24(sp)
   15188:	dc002215 	stw	r16,136(sp)
   1518c:	e0001115 	stw	zero,68(fp)
   15190:	000b883a 	mov	r5,zero
   15194:	003c6906 	br	1433c <__alt_data_end+0xfc01433c>
   15198:	3021883a 	mov	r16,r6
   1519c:	003ffb06 	br	1518c <__alt_data_end+0xfc01518c>
   151a0:	1000021e 	bne	r2,zero,151ac <_dtoa_r+0x11e0>
   151a4:	4200004c 	andi	r8,r8,1
   151a8:	403e7d1e 	bne	r8,zero,14ba0 <__alt_data_end+0xfc014ba0>
   151ac:	01000c04 	movi	r4,48
   151b0:	00000106 	br	151b8 <_dtoa_r+0x11ec>
   151b4:	102f883a 	mov	r23,r2
   151b8:	b8bfffc4 	addi	r2,r23,-1
   151bc:	10c00007 	ldb	r3,0(r2)
   151c0:	193ffc26 	beq	r3,r4,151b4 <__alt_data_end+0xfc0151b4>
   151c4:	003e8706 	br	14be4 <__alt_data_end+0xfc014be4>
   151c8:	d8800517 	ldw	r2,20(sp)
   151cc:	00a3c83a 	sub	r17,zero,r2
   151d0:	8800a426 	beq	r17,zero,15464 <_dtoa_r+0x1498>
   151d4:	888003cc 	andi	r2,r17,15
   151d8:	100490fa 	slli	r2,r2,3
   151dc:	00c000f4 	movhi	r3,3
   151e0:	18eac504 	addi	r3,r3,-21740
   151e4:	1885883a 	add	r2,r3,r2
   151e8:	11800017 	ldw	r6,0(r2)
   151ec:	11c00117 	ldw	r7,4(r2)
   151f0:	9009883a 	mov	r4,r18
   151f4:	980b883a 	mov	r5,r19
   151f8:	8823d13a 	srai	r17,r17,4
   151fc:	001db840 	call	1db84 <__muldf3>
   15200:	d8800f15 	stw	r2,60(sp)
   15204:	d8c01015 	stw	r3,64(sp)
   15208:	8800e826 	beq	r17,zero,155ac <_dtoa_r+0x15e0>
   1520c:	050000f4 	movhi	r20,3
   15210:	a52abb04 	addi	r20,r20,-21780
   15214:	04000084 	movi	r16,2
   15218:	8980004c 	andi	r6,r17,1
   1521c:	1009883a 	mov	r4,r2
   15220:	8823d07a 	srai	r17,r17,1
   15224:	180b883a 	mov	r5,r3
   15228:	30000426 	beq	r6,zero,1523c <_dtoa_r+0x1270>
   1522c:	a1800017 	ldw	r6,0(r20)
   15230:	a1c00117 	ldw	r7,4(r20)
   15234:	84000044 	addi	r16,r16,1
   15238:	001db840 	call	1db84 <__muldf3>
   1523c:	a5000204 	addi	r20,r20,8
   15240:	883ff51e 	bne	r17,zero,15218 <__alt_data_end+0xfc015218>
   15244:	d8800f15 	stw	r2,60(sp)
   15248:	d8c01015 	stw	r3,64(sp)
   1524c:	003c7606 	br	14428 <__alt_data_end+0xfc014428>
   15250:	00c00c04 	movi	r3,48
   15254:	10c00005 	stb	r3,0(r2)
   15258:	d8c00517 	ldw	r3,20(sp)
   1525c:	bd3fffc3 	ldbu	r20,-1(r23)
   15260:	18c00044 	addi	r3,r3,1
   15264:	d8c00515 	stw	r3,20(sp)
   15268:	003db906 	br	14950 <__alt_data_end+0xfc014950>
   1526c:	89400117 	ldw	r5,4(r17)
   15270:	e009883a 	mov	r4,fp
   15274:	0016c080 	call	16c08 <_Balloc>
   15278:	89800417 	ldw	r6,16(r17)
   1527c:	89400304 	addi	r5,r17,12
   15280:	11000304 	addi	r4,r2,12
   15284:	31800084 	addi	r6,r6,2
   15288:	318d883a 	add	r6,r6,r6
   1528c:	318d883a 	add	r6,r6,r6
   15290:	1027883a 	mov	r19,r2
   15294:	000ec780 	call	ec78 <memcpy>
   15298:	01800044 	movi	r6,1
   1529c:	980b883a 	mov	r5,r19
   152a0:	e009883a 	mov	r4,fp
   152a4:	00174440 	call	17444 <__lshift>
   152a8:	1029883a 	mov	r20,r2
   152ac:	003ecc06 	br	14de0 <__alt_data_end+0xfc014de0>
   152b0:	00800e44 	movi	r2,57
   152b4:	90809026 	beq	r18,r2,154f8 <_dtoa_r+0x152c>
   152b8:	92000044 	addi	r8,r18,1
   152bc:	003f1f06 	br	14f3c <__alt_data_end+0xfc014f3c>
   152c0:	9011883a 	mov	r8,r18
   152c4:	8825883a 	mov	r18,r17
   152c8:	a023883a 	mov	r17,r20
   152cc:	003e2906 	br	14b74 <__alt_data_end+0xfc014b74>
   152d0:	002b883a 	mov	r21,zero
   152d4:	0023883a 	mov	r17,zero
   152d8:	003f5406 	br	1502c <__alt_data_end+0xfc01502c>
   152dc:	61bfffc4 	addi	r6,r12,-1
   152e0:	300490fa 	slli	r2,r6,3
   152e4:	00c000f4 	movhi	r3,3
   152e8:	18eac504 	addi	r3,r3,-21740
   152ec:	1885883a 	add	r2,r3,r2
   152f0:	11000017 	ldw	r4,0(r2)
   152f4:	11400117 	ldw	r5,4(r2)
   152f8:	d8800717 	ldw	r2,28(sp)
   152fc:	880f883a 	mov	r7,r17
   15300:	d9801215 	stw	r6,72(sp)
   15304:	800d883a 	mov	r6,r16
   15308:	db001615 	stw	r12,88(sp)
   1530c:	15c00044 	addi	r23,r2,1
   15310:	001db840 	call	1db84 <__muldf3>
   15314:	d9401017 	ldw	r5,64(sp)
   15318:	d9000f17 	ldw	r4,60(sp)
   1531c:	d8c01515 	stw	r3,84(sp)
   15320:	d8801415 	stw	r2,80(sp)
   15324:	001ecec0 	call	1ecec <__fixdfsi>
   15328:	1009883a 	mov	r4,r2
   1532c:	1021883a 	mov	r16,r2
   15330:	001ed6c0 	call	1ed6c <__floatsidf>
   15334:	d9000f17 	ldw	r4,60(sp)
   15338:	d9401017 	ldw	r5,64(sp)
   1533c:	100d883a 	mov	r6,r2
   15340:	180f883a 	mov	r7,r3
   15344:	001e3f00 	call	1e3f0 <__subdf3>
   15348:	1829883a 	mov	r20,r3
   1534c:	d8c00717 	ldw	r3,28(sp)
   15350:	84000c04 	addi	r16,r16,48
   15354:	1023883a 	mov	r17,r2
   15358:	1c000005 	stb	r16,0(r3)
   1535c:	db001617 	ldw	r12,88(sp)
   15360:	00800044 	movi	r2,1
   15364:	60802226 	beq	r12,r2,153f0 <_dtoa_r+0x1424>
   15368:	d9c00717 	ldw	r7,28(sp)
   1536c:	8805883a 	mov	r2,r17
   15370:	b82b883a 	mov	r21,r23
   15374:	3b19883a 	add	r12,r7,r12
   15378:	6023883a 	mov	r17,r12
   1537c:	a007883a 	mov	r3,r20
   15380:	dc800f15 	stw	r18,60(sp)
   15384:	000d883a 	mov	r6,zero
   15388:	01d00934 	movhi	r7,16420
   1538c:	1009883a 	mov	r4,r2
   15390:	180b883a 	mov	r5,r3
   15394:	001db840 	call	1db84 <__muldf3>
   15398:	180b883a 	mov	r5,r3
   1539c:	1009883a 	mov	r4,r2
   153a0:	1829883a 	mov	r20,r3
   153a4:	1025883a 	mov	r18,r2
   153a8:	001ecec0 	call	1ecec <__fixdfsi>
   153ac:	1009883a 	mov	r4,r2
   153b0:	1021883a 	mov	r16,r2
   153b4:	001ed6c0 	call	1ed6c <__floatsidf>
   153b8:	100d883a 	mov	r6,r2
   153bc:	180f883a 	mov	r7,r3
   153c0:	9009883a 	mov	r4,r18
   153c4:	a00b883a 	mov	r5,r20
   153c8:	84000c04 	addi	r16,r16,48
   153cc:	001e3f00 	call	1e3f0 <__subdf3>
   153d0:	ad400044 	addi	r21,r21,1
   153d4:	ac3fffc5 	stb	r16,-1(r21)
   153d8:	ac7fea1e 	bne	r21,r17,15384 <__alt_data_end+0xfc015384>
   153dc:	1023883a 	mov	r17,r2
   153e0:	d8801217 	ldw	r2,72(sp)
   153e4:	dc800f17 	ldw	r18,60(sp)
   153e8:	1829883a 	mov	r20,r3
   153ec:	b8af883a 	add	r23,r23,r2
   153f0:	d9001417 	ldw	r4,80(sp)
   153f4:	d9401517 	ldw	r5,84(sp)
   153f8:	000d883a 	mov	r6,zero
   153fc:	01cff834 	movhi	r7,16352
   15400:	001c6b00 	call	1c6b0 <__adddf3>
   15404:	880d883a 	mov	r6,r17
   15408:	a00f883a 	mov	r7,r20
   1540c:	1009883a 	mov	r4,r2
   15410:	180b883a 	mov	r5,r3
   15414:	001da900 	call	1da90 <__ledf2>
   15418:	10003e0e 	bge	r2,zero,15514 <_dtoa_r+0x1548>
   1541c:	d9001317 	ldw	r4,76(sp)
   15420:	bd3fffc3 	ldbu	r20,-1(r23)
   15424:	d9000515 	stw	r4,20(sp)
   15428:	003d3b06 	br	14918 <__alt_data_end+0xfc014918>
   1542c:	0027883a 	mov	r19,zero
   15430:	003f1b06 	br	150a0 <__alt_data_end+0xfc0150a0>
   15434:	d8800817 	ldw	r2,32(sp)
   15438:	11e9c83a 	sub	r20,r2,r7
   1543c:	0005883a 	mov	r2,zero
   15440:	003d5406 	br	14994 <__alt_data_end+0xfc014994>
   15444:	00800044 	movi	r2,1
   15448:	003dc706 	br	14b68 <__alt_data_end+0xfc014b68>
   1544c:	d8c00217 	ldw	r3,8(sp)
   15450:	00800d84 	movi	r2,54
   15454:	dd400a17 	ldw	r21,40(sp)
   15458:	10c5c83a 	sub	r2,r2,r3
   1545c:	dd000817 	ldw	r20,32(sp)
   15460:	003d4c06 	br	14994 <__alt_data_end+0xfc014994>
   15464:	dc800f15 	stw	r18,60(sp)
   15468:	dcc01015 	stw	r19,64(sp)
   1546c:	04000084 	movi	r16,2
   15470:	003bed06 	br	14428 <__alt_data_end+0xfc014428>
   15474:	d9000617 	ldw	r4,24(sp)
   15478:	203f0d26 	beq	r4,zero,150b0 <__alt_data_end+0xfc0150b0>
   1547c:	d9800c17 	ldw	r6,48(sp)
   15480:	01bcab0e 	bge	zero,r6,14730 <__alt_data_end+0xfc014730>
   15484:	d9401017 	ldw	r5,64(sp)
   15488:	d9000f17 	ldw	r4,60(sp)
   1548c:	000d883a 	mov	r6,zero
   15490:	01d00934 	movhi	r7,16420
   15494:	001db840 	call	1db84 <__muldf3>
   15498:	81000044 	addi	r4,r16,1
   1549c:	d8800f15 	stw	r2,60(sp)
   154a0:	d8c01015 	stw	r3,64(sp)
   154a4:	001ed6c0 	call	1ed6c <__floatsidf>
   154a8:	d9800f17 	ldw	r6,60(sp)
   154ac:	d9c01017 	ldw	r7,64(sp)
   154b0:	1009883a 	mov	r4,r2
   154b4:	180b883a 	mov	r5,r3
   154b8:	001db840 	call	1db84 <__muldf3>
   154bc:	01d00734 	movhi	r7,16412
   154c0:	000d883a 	mov	r6,zero
   154c4:	1009883a 	mov	r4,r2
   154c8:	180b883a 	mov	r5,r3
   154cc:	001c6b00 	call	1c6b0 <__adddf3>
   154d0:	d9c00517 	ldw	r7,20(sp)
   154d4:	047f3034 	movhi	r17,64704
   154d8:	1021883a 	mov	r16,r2
   154dc:	39ffffc4 	addi	r7,r7,-1
   154e0:	d9c01315 	stw	r7,76(sp)
   154e4:	1c63883a 	add	r17,r3,r17
   154e8:	db000c17 	ldw	r12,48(sp)
   154ec:	003bea06 	br	14498 <__alt_data_end+0xfc014498>
   154f0:	dc000915 	stw	r16,36(sp)
   154f4:	003e0e06 	br	14d30 <__alt_data_end+0xfc014d30>
   154f8:	01000e44 	movi	r4,57
   154fc:	8825883a 	mov	r18,r17
   15500:	9dc00044 	addi	r23,r19,1
   15504:	99000005 	stb	r4,0(r19)
   15508:	a023883a 	mov	r17,r20
   1550c:	dc000915 	stw	r16,36(sp)
   15510:	003da406 	br	14ba4 <__alt_data_end+0xfc014ba4>
   15514:	d9801417 	ldw	r6,80(sp)
   15518:	d9c01517 	ldw	r7,84(sp)
   1551c:	0009883a 	mov	r4,zero
   15520:	014ff834 	movhi	r5,16352
   15524:	001e3f00 	call	1e3f0 <__subdf3>
   15528:	880d883a 	mov	r6,r17
   1552c:	a00f883a 	mov	r7,r20
   15530:	1009883a 	mov	r4,r2
   15534:	180b883a 	mov	r5,r3
   15538:	001d9b40 	call	1d9b4 <__gedf2>
   1553c:	00bc7c0e 	bge	zero,r2,14730 <__alt_data_end+0xfc014730>
   15540:	01000c04 	movi	r4,48
   15544:	00000106 	br	1554c <_dtoa_r+0x1580>
   15548:	102f883a 	mov	r23,r2
   1554c:	b8bfffc4 	addi	r2,r23,-1
   15550:	10c00007 	ldb	r3,0(r2)
   15554:	193ffc26 	beq	r3,r4,15548 <__alt_data_end+0xfc015548>
   15558:	d9801317 	ldw	r6,76(sp)
   1555c:	d9800515 	stw	r6,20(sp)
   15560:	003c4406 	br	14674 <__alt_data_end+0xfc014674>
   15564:	d9801317 	ldw	r6,76(sp)
   15568:	d9800515 	stw	r6,20(sp)
   1556c:	003cea06 	br	14918 <__alt_data_end+0xfc014918>
   15570:	dd800f17 	ldw	r22,60(sp)
   15574:	dcc01017 	ldw	r19,64(sp)
   15578:	dc801217 	ldw	r18,72(sp)
   1557c:	003c6c06 	br	14730 <__alt_data_end+0xfc014730>
   15580:	903e031e 	bne	r18,zero,14d90 <__alt_data_end+0xfc014d90>
   15584:	003ebb06 	br	15074 <__alt_data_end+0xfc015074>
   15588:	103e6c1e 	bne	r2,zero,14f3c <__alt_data_end+0xfc014f3c>
   1558c:	4080004c 	andi	r2,r8,1
   15590:	103e6a26 	beq	r2,zero,14f3c <__alt_data_end+0xfc014f3c>
   15594:	003e6606 	br	14f30 <__alt_data_end+0xfc014f30>
   15598:	d8c00317 	ldw	r3,12(sp)
   1559c:	00800084 	movi	r2,2
   155a0:	10c02916 	blt	r2,r3,15648 <_dtoa_r+0x167c>
   155a4:	d9000c17 	ldw	r4,48(sp)
   155a8:	003e8806 	br	14fcc <__alt_data_end+0xfc014fcc>
   155ac:	04000084 	movi	r16,2
   155b0:	003b9d06 	br	14428 <__alt_data_end+0xfc014428>
   155b4:	d9001317 	ldw	r4,76(sp)
   155b8:	d9000515 	stw	r4,20(sp)
   155bc:	003cd606 	br	14918 <__alt_data_end+0xfc014918>
   155c0:	d8801317 	ldw	r2,76(sp)
   155c4:	d8800515 	stw	r2,20(sp)
   155c8:	003c2a06 	br	14674 <__alt_data_end+0xfc014674>
   155cc:	d9800317 	ldw	r6,12(sp)
   155d0:	00800084 	movi	r2,2
   155d4:	11801516 	blt	r2,r6,1562c <_dtoa_r+0x1660>
   155d8:	d9c00c17 	ldw	r7,48(sp)
   155dc:	d9c00615 	stw	r7,24(sp)
   155e0:	003df706 	br	14dc0 <__alt_data_end+0xfc014dc0>
   155e4:	193d3926 	beq	r3,r4,14acc <__alt_data_end+0xfc014acc>
   155e8:	00c00f04 	movi	r3,60
   155ec:	1885c83a 	sub	r2,r3,r2
   155f0:	003ddf06 	br	14d70 <__alt_data_end+0xfc014d70>
   155f4:	e009883a 	mov	r4,fp
   155f8:	e0001115 	stw	zero,68(fp)
   155fc:	000b883a 	mov	r5,zero
   15600:	0016c080 	call	16c08 <_Balloc>
   15604:	d8800715 	stw	r2,28(sp)
   15608:	d8c00717 	ldw	r3,28(sp)
   1560c:	00bfffc4 	movi	r2,-1
   15610:	01000044 	movi	r4,1
   15614:	d8800c15 	stw	r2,48(sp)
   15618:	e0c01015 	stw	r3,64(fp)
   1561c:	d9000b15 	stw	r4,44(sp)
   15620:	d8800615 	stw	r2,24(sp)
   15624:	d8002215 	stw	zero,136(sp)
   15628:	003c4106 	br	14730 <__alt_data_end+0xfc014730>
   1562c:	d8c00c17 	ldw	r3,48(sp)
   15630:	d8c00615 	stw	r3,24(sp)
   15634:	003e7006 	br	14ff8 <__alt_data_end+0xfc014ff8>
   15638:	04400044 	movi	r17,1
   1563c:	003b2006 	br	142c0 <__alt_data_end+0xfc0142c0>
   15640:	000b883a 	mov	r5,zero
   15644:	003b3d06 	br	1433c <__alt_data_end+0xfc01433c>
   15648:	d8800c17 	ldw	r2,48(sp)
   1564c:	d8800615 	stw	r2,24(sp)
   15650:	003e6906 	br	14ff8 <__alt_data_end+0xfc014ff8>

00015654 <__sflush_r>:
   15654:	2880030b 	ldhu	r2,12(r5)
   15658:	defffb04 	addi	sp,sp,-20
   1565c:	dcc00315 	stw	r19,12(sp)
   15660:	dc400115 	stw	r17,4(sp)
   15664:	dfc00415 	stw	ra,16(sp)
   15668:	dc800215 	stw	r18,8(sp)
   1566c:	dc000015 	stw	r16,0(sp)
   15670:	10c0020c 	andi	r3,r2,8
   15674:	2823883a 	mov	r17,r5
   15678:	2027883a 	mov	r19,r4
   1567c:	1800311e 	bne	r3,zero,15744 <__sflush_r+0xf0>
   15680:	28c00117 	ldw	r3,4(r5)
   15684:	10820014 	ori	r2,r2,2048
   15688:	2880030d 	sth	r2,12(r5)
   1568c:	00c04b0e 	bge	zero,r3,157bc <__sflush_r+0x168>
   15690:	8a000a17 	ldw	r8,40(r17)
   15694:	40002326 	beq	r8,zero,15724 <__sflush_r+0xd0>
   15698:	9c000017 	ldw	r16,0(r19)
   1569c:	10c4000c 	andi	r3,r2,4096
   156a0:	98000015 	stw	zero,0(r19)
   156a4:	18004826 	beq	r3,zero,157c8 <__sflush_r+0x174>
   156a8:	89801417 	ldw	r6,80(r17)
   156ac:	10c0010c 	andi	r3,r2,4
   156b0:	18000626 	beq	r3,zero,156cc <__sflush_r+0x78>
   156b4:	88c00117 	ldw	r3,4(r17)
   156b8:	88800c17 	ldw	r2,48(r17)
   156bc:	30cdc83a 	sub	r6,r6,r3
   156c0:	10000226 	beq	r2,zero,156cc <__sflush_r+0x78>
   156c4:	88800f17 	ldw	r2,60(r17)
   156c8:	308dc83a 	sub	r6,r6,r2
   156cc:	89400717 	ldw	r5,28(r17)
   156d0:	000f883a 	mov	r7,zero
   156d4:	9809883a 	mov	r4,r19
   156d8:	403ee83a 	callr	r8
   156dc:	00ffffc4 	movi	r3,-1
   156e0:	10c04426 	beq	r2,r3,157f4 <__sflush_r+0x1a0>
   156e4:	88c0030b 	ldhu	r3,12(r17)
   156e8:	89000417 	ldw	r4,16(r17)
   156ec:	88000115 	stw	zero,4(r17)
   156f0:	197dffcc 	andi	r5,r3,63487
   156f4:	8940030d 	sth	r5,12(r17)
   156f8:	89000015 	stw	r4,0(r17)
   156fc:	18c4000c 	andi	r3,r3,4096
   15700:	18002c1e 	bne	r3,zero,157b4 <__sflush_r+0x160>
   15704:	89400c17 	ldw	r5,48(r17)
   15708:	9c000015 	stw	r16,0(r19)
   1570c:	28000526 	beq	r5,zero,15724 <__sflush_r+0xd0>
   15710:	88801004 	addi	r2,r17,64
   15714:	28800226 	beq	r5,r2,15720 <__sflush_r+0xcc>
   15718:	9809883a 	mov	r4,r19
   1571c:	0015dd00 	call	15dd0 <_free_r>
   15720:	88000c15 	stw	zero,48(r17)
   15724:	0005883a 	mov	r2,zero
   15728:	dfc00417 	ldw	ra,16(sp)
   1572c:	dcc00317 	ldw	r19,12(sp)
   15730:	dc800217 	ldw	r18,8(sp)
   15734:	dc400117 	ldw	r17,4(sp)
   15738:	dc000017 	ldw	r16,0(sp)
   1573c:	dec00504 	addi	sp,sp,20
   15740:	f800283a 	ret
   15744:	2c800417 	ldw	r18,16(r5)
   15748:	903ff626 	beq	r18,zero,15724 <__alt_data_end+0xfc015724>
   1574c:	2c000017 	ldw	r16,0(r5)
   15750:	108000cc 	andi	r2,r2,3
   15754:	2c800015 	stw	r18,0(r5)
   15758:	84a1c83a 	sub	r16,r16,r18
   1575c:	1000131e 	bne	r2,zero,157ac <__sflush_r+0x158>
   15760:	28800517 	ldw	r2,20(r5)
   15764:	88800215 	stw	r2,8(r17)
   15768:	04000316 	blt	zero,r16,15778 <__sflush_r+0x124>
   1576c:	003fed06 	br	15724 <__alt_data_end+0xfc015724>
   15770:	90a5883a 	add	r18,r18,r2
   15774:	043feb0e 	bge	zero,r16,15724 <__alt_data_end+0xfc015724>
   15778:	88800917 	ldw	r2,36(r17)
   1577c:	89400717 	ldw	r5,28(r17)
   15780:	800f883a 	mov	r7,r16
   15784:	900d883a 	mov	r6,r18
   15788:	9809883a 	mov	r4,r19
   1578c:	103ee83a 	callr	r2
   15790:	80a1c83a 	sub	r16,r16,r2
   15794:	00bff616 	blt	zero,r2,15770 <__alt_data_end+0xfc015770>
   15798:	88c0030b 	ldhu	r3,12(r17)
   1579c:	00bfffc4 	movi	r2,-1
   157a0:	18c01014 	ori	r3,r3,64
   157a4:	88c0030d 	sth	r3,12(r17)
   157a8:	003fdf06 	br	15728 <__alt_data_end+0xfc015728>
   157ac:	0005883a 	mov	r2,zero
   157b0:	003fec06 	br	15764 <__alt_data_end+0xfc015764>
   157b4:	88801415 	stw	r2,80(r17)
   157b8:	003fd206 	br	15704 <__alt_data_end+0xfc015704>
   157bc:	28c00f17 	ldw	r3,60(r5)
   157c0:	00ffb316 	blt	zero,r3,15690 <__alt_data_end+0xfc015690>
   157c4:	003fd706 	br	15724 <__alt_data_end+0xfc015724>
   157c8:	89400717 	ldw	r5,28(r17)
   157cc:	000d883a 	mov	r6,zero
   157d0:	01c00044 	movi	r7,1
   157d4:	9809883a 	mov	r4,r19
   157d8:	403ee83a 	callr	r8
   157dc:	100d883a 	mov	r6,r2
   157e0:	00bfffc4 	movi	r2,-1
   157e4:	30801426 	beq	r6,r2,15838 <__sflush_r+0x1e4>
   157e8:	8880030b 	ldhu	r2,12(r17)
   157ec:	8a000a17 	ldw	r8,40(r17)
   157f0:	003fae06 	br	156ac <__alt_data_end+0xfc0156ac>
   157f4:	98c00017 	ldw	r3,0(r19)
   157f8:	183fba26 	beq	r3,zero,156e4 <__alt_data_end+0xfc0156e4>
   157fc:	01000744 	movi	r4,29
   15800:	19000626 	beq	r3,r4,1581c <__sflush_r+0x1c8>
   15804:	01000584 	movi	r4,22
   15808:	19000426 	beq	r3,r4,1581c <__sflush_r+0x1c8>
   1580c:	88c0030b 	ldhu	r3,12(r17)
   15810:	18c01014 	ori	r3,r3,64
   15814:	88c0030d 	sth	r3,12(r17)
   15818:	003fc306 	br	15728 <__alt_data_end+0xfc015728>
   1581c:	8880030b 	ldhu	r2,12(r17)
   15820:	88c00417 	ldw	r3,16(r17)
   15824:	88000115 	stw	zero,4(r17)
   15828:	10bdffcc 	andi	r2,r2,63487
   1582c:	8880030d 	sth	r2,12(r17)
   15830:	88c00015 	stw	r3,0(r17)
   15834:	003fb306 	br	15704 <__alt_data_end+0xfc015704>
   15838:	98800017 	ldw	r2,0(r19)
   1583c:	103fea26 	beq	r2,zero,157e8 <__alt_data_end+0xfc0157e8>
   15840:	00c00744 	movi	r3,29
   15844:	10c00226 	beq	r2,r3,15850 <__sflush_r+0x1fc>
   15848:	00c00584 	movi	r3,22
   1584c:	10c0031e 	bne	r2,r3,1585c <__sflush_r+0x208>
   15850:	9c000015 	stw	r16,0(r19)
   15854:	0005883a 	mov	r2,zero
   15858:	003fb306 	br	15728 <__alt_data_end+0xfc015728>
   1585c:	88c0030b 	ldhu	r3,12(r17)
   15860:	3005883a 	mov	r2,r6
   15864:	18c01014 	ori	r3,r3,64
   15868:	88c0030d 	sth	r3,12(r17)
   1586c:	003fae06 	br	15728 <__alt_data_end+0xfc015728>

00015870 <_fflush_r>:
   15870:	defffd04 	addi	sp,sp,-12
   15874:	dc000115 	stw	r16,4(sp)
   15878:	dfc00215 	stw	ra,8(sp)
   1587c:	2021883a 	mov	r16,r4
   15880:	20000226 	beq	r4,zero,1588c <_fflush_r+0x1c>
   15884:	20800e17 	ldw	r2,56(r4)
   15888:	10000c26 	beq	r2,zero,158bc <_fflush_r+0x4c>
   1588c:	2880030f 	ldh	r2,12(r5)
   15890:	1000051e 	bne	r2,zero,158a8 <_fflush_r+0x38>
   15894:	0005883a 	mov	r2,zero
   15898:	dfc00217 	ldw	ra,8(sp)
   1589c:	dc000117 	ldw	r16,4(sp)
   158a0:	dec00304 	addi	sp,sp,12
   158a4:	f800283a 	ret
   158a8:	8009883a 	mov	r4,r16
   158ac:	dfc00217 	ldw	ra,8(sp)
   158b0:	dc000117 	ldw	r16,4(sp)
   158b4:	dec00304 	addi	sp,sp,12
   158b8:	00156541 	jmpi	15654 <__sflush_r>
   158bc:	d9400015 	stw	r5,0(sp)
   158c0:	0015c5c0 	call	15c5c <__sinit>
   158c4:	d9400017 	ldw	r5,0(sp)
   158c8:	003ff006 	br	1588c <__alt_data_end+0xfc01588c>

000158cc <fflush>:
   158cc:	20000526 	beq	r4,zero,158e4 <fflush+0x18>
   158d0:	008000f4 	movhi	r2,3
   158d4:	10b78704 	addi	r2,r2,-8676
   158d8:	200b883a 	mov	r5,r4
   158dc:	11000017 	ldw	r4,0(r2)
   158e0:	00158701 	jmpi	15870 <_fflush_r>
   158e4:	008000f4 	movhi	r2,3
   158e8:	10b78604 	addi	r2,r2,-8680
   158ec:	11000017 	ldw	r4,0(r2)
   158f0:	01400074 	movhi	r5,1
   158f4:	29561c04 	addi	r5,r5,22640
   158f8:	001666c1 	jmpi	1666c <_fwalk_reent>

000158fc <__fp_unlock>:
   158fc:	0005883a 	mov	r2,zero
   15900:	f800283a 	ret

00015904 <_cleanup_r>:
   15904:	014000b4 	movhi	r5,2
   15908:	296d2304 	addi	r5,r5,-19316
   1590c:	001666c1 	jmpi	1666c <_fwalk_reent>

00015910 <__sinit.part.1>:
   15910:	defff704 	addi	sp,sp,-36
   15914:	00c00074 	movhi	r3,1
   15918:	dfc00815 	stw	ra,32(sp)
   1591c:	ddc00715 	stw	r23,28(sp)
   15920:	dd800615 	stw	r22,24(sp)
   15924:	dd400515 	stw	r21,20(sp)
   15928:	dd000415 	stw	r20,16(sp)
   1592c:	dcc00315 	stw	r19,12(sp)
   15930:	dc800215 	stw	r18,8(sp)
   15934:	dc400115 	stw	r17,4(sp)
   15938:	dc000015 	stw	r16,0(sp)
   1593c:	18d64104 	addi	r3,r3,22788
   15940:	24000117 	ldw	r16,4(r4)
   15944:	20c00f15 	stw	r3,60(r4)
   15948:	2080bb04 	addi	r2,r4,748
   1594c:	00c000c4 	movi	r3,3
   15950:	20c0b915 	stw	r3,740(r4)
   15954:	2080ba15 	stw	r2,744(r4)
   15958:	2000b815 	stw	zero,736(r4)
   1595c:	05c00204 	movi	r23,8
   15960:	00800104 	movi	r2,4
   15964:	2025883a 	mov	r18,r4
   15968:	b80d883a 	mov	r6,r23
   1596c:	81001704 	addi	r4,r16,92
   15970:	000b883a 	mov	r5,zero
   15974:	80000015 	stw	zero,0(r16)
   15978:	80000115 	stw	zero,4(r16)
   1597c:	80000215 	stw	zero,8(r16)
   15980:	8080030d 	sth	r2,12(r16)
   15984:	80001915 	stw	zero,100(r16)
   15988:	8000038d 	sth	zero,14(r16)
   1598c:	80000415 	stw	zero,16(r16)
   15990:	80000515 	stw	zero,20(r16)
   15994:	80000615 	stw	zero,24(r16)
   15998:	000edc00 	call	edc0 <memset>
   1599c:	058000b4 	movhi	r22,2
   159a0:	94400217 	ldw	r17,8(r18)
   159a4:	054000b4 	movhi	r21,2
   159a8:	050000b4 	movhi	r20,2
   159ac:	04c000b4 	movhi	r19,2
   159b0:	b5a10004 	addi	r22,r22,-31744
   159b4:	ad611704 	addi	r21,r21,-31652
   159b8:	a5213604 	addi	r20,r20,-31528
   159bc:	9ce14d04 	addi	r19,r19,-31436
   159c0:	85800815 	stw	r22,32(r16)
   159c4:	85400915 	stw	r21,36(r16)
   159c8:	85000a15 	stw	r20,40(r16)
   159cc:	84c00b15 	stw	r19,44(r16)
   159d0:	84000715 	stw	r16,28(r16)
   159d4:	00800284 	movi	r2,10
   159d8:	8880030d 	sth	r2,12(r17)
   159dc:	00800044 	movi	r2,1
   159e0:	b80d883a 	mov	r6,r23
   159e4:	89001704 	addi	r4,r17,92
   159e8:	000b883a 	mov	r5,zero
   159ec:	88000015 	stw	zero,0(r17)
   159f0:	88000115 	stw	zero,4(r17)
   159f4:	88000215 	stw	zero,8(r17)
   159f8:	88001915 	stw	zero,100(r17)
   159fc:	8880038d 	sth	r2,14(r17)
   15a00:	88000415 	stw	zero,16(r17)
   15a04:	88000515 	stw	zero,20(r17)
   15a08:	88000615 	stw	zero,24(r17)
   15a0c:	000edc00 	call	edc0 <memset>
   15a10:	94000317 	ldw	r16,12(r18)
   15a14:	00800484 	movi	r2,18
   15a18:	8c400715 	stw	r17,28(r17)
   15a1c:	8d800815 	stw	r22,32(r17)
   15a20:	8d400915 	stw	r21,36(r17)
   15a24:	8d000a15 	stw	r20,40(r17)
   15a28:	8cc00b15 	stw	r19,44(r17)
   15a2c:	8080030d 	sth	r2,12(r16)
   15a30:	00800084 	movi	r2,2
   15a34:	80000015 	stw	zero,0(r16)
   15a38:	80000115 	stw	zero,4(r16)
   15a3c:	80000215 	stw	zero,8(r16)
   15a40:	80001915 	stw	zero,100(r16)
   15a44:	8080038d 	sth	r2,14(r16)
   15a48:	80000415 	stw	zero,16(r16)
   15a4c:	80000515 	stw	zero,20(r16)
   15a50:	80000615 	stw	zero,24(r16)
   15a54:	b80d883a 	mov	r6,r23
   15a58:	000b883a 	mov	r5,zero
   15a5c:	81001704 	addi	r4,r16,92
   15a60:	000edc00 	call	edc0 <memset>
   15a64:	00800044 	movi	r2,1
   15a68:	84000715 	stw	r16,28(r16)
   15a6c:	85800815 	stw	r22,32(r16)
   15a70:	85400915 	stw	r21,36(r16)
   15a74:	85000a15 	stw	r20,40(r16)
   15a78:	84c00b15 	stw	r19,44(r16)
   15a7c:	90800e15 	stw	r2,56(r18)
   15a80:	dfc00817 	ldw	ra,32(sp)
   15a84:	ddc00717 	ldw	r23,28(sp)
   15a88:	dd800617 	ldw	r22,24(sp)
   15a8c:	dd400517 	ldw	r21,20(sp)
   15a90:	dd000417 	ldw	r20,16(sp)
   15a94:	dcc00317 	ldw	r19,12(sp)
   15a98:	dc800217 	ldw	r18,8(sp)
   15a9c:	dc400117 	ldw	r17,4(sp)
   15aa0:	dc000017 	ldw	r16,0(sp)
   15aa4:	dec00904 	addi	sp,sp,36
   15aa8:	f800283a 	ret

00015aac <__fp_lock>:
   15aac:	0005883a 	mov	r2,zero
   15ab0:	f800283a 	ret

00015ab4 <__sfmoreglue>:
   15ab4:	defffc04 	addi	sp,sp,-16
   15ab8:	dc800215 	stw	r18,8(sp)
   15abc:	2825883a 	mov	r18,r5
   15ac0:	dc000015 	stw	r16,0(sp)
   15ac4:	01401a04 	movi	r5,104
   15ac8:	2021883a 	mov	r16,r4
   15acc:	913fffc4 	addi	r4,r18,-1
   15ad0:	dfc00315 	stw	ra,12(sp)
   15ad4:	dc400115 	stw	r17,4(sp)
   15ad8:	000cec40 	call	cec4 <__mulsi3>
   15adc:	8009883a 	mov	r4,r16
   15ae0:	11401d04 	addi	r5,r2,116
   15ae4:	1023883a 	mov	r17,r2
   15ae8:	000e46c0 	call	e46c <_malloc_r>
   15aec:	1021883a 	mov	r16,r2
   15af0:	10000726 	beq	r2,zero,15b10 <__sfmoreglue+0x5c>
   15af4:	11000304 	addi	r4,r2,12
   15af8:	10000015 	stw	zero,0(r2)
   15afc:	14800115 	stw	r18,4(r2)
   15b00:	11000215 	stw	r4,8(r2)
   15b04:	89801a04 	addi	r6,r17,104
   15b08:	000b883a 	mov	r5,zero
   15b0c:	000edc00 	call	edc0 <memset>
   15b10:	8005883a 	mov	r2,r16
   15b14:	dfc00317 	ldw	ra,12(sp)
   15b18:	dc800217 	ldw	r18,8(sp)
   15b1c:	dc400117 	ldw	r17,4(sp)
   15b20:	dc000017 	ldw	r16,0(sp)
   15b24:	dec00404 	addi	sp,sp,16
   15b28:	f800283a 	ret

00015b2c <__sfp>:
   15b2c:	defffb04 	addi	sp,sp,-20
   15b30:	dc000015 	stw	r16,0(sp)
   15b34:	040000f4 	movhi	r16,3
   15b38:	84378604 	addi	r16,r16,-8680
   15b3c:	dcc00315 	stw	r19,12(sp)
   15b40:	2027883a 	mov	r19,r4
   15b44:	81000017 	ldw	r4,0(r16)
   15b48:	dfc00415 	stw	ra,16(sp)
   15b4c:	dc800215 	stw	r18,8(sp)
   15b50:	20800e17 	ldw	r2,56(r4)
   15b54:	dc400115 	stw	r17,4(sp)
   15b58:	1000021e 	bne	r2,zero,15b64 <__sfp+0x38>
   15b5c:	00159100 	call	15910 <__sinit.part.1>
   15b60:	81000017 	ldw	r4,0(r16)
   15b64:	2480b804 	addi	r18,r4,736
   15b68:	047fffc4 	movi	r17,-1
   15b6c:	91000117 	ldw	r4,4(r18)
   15b70:	94000217 	ldw	r16,8(r18)
   15b74:	213fffc4 	addi	r4,r4,-1
   15b78:	20000a16 	blt	r4,zero,15ba4 <__sfp+0x78>
   15b7c:	8080030f 	ldh	r2,12(r16)
   15b80:	10000c26 	beq	r2,zero,15bb4 <__sfp+0x88>
   15b84:	80c01d04 	addi	r3,r16,116
   15b88:	00000206 	br	15b94 <__sfp+0x68>
   15b8c:	18bfe60f 	ldh	r2,-104(r3)
   15b90:	10000826 	beq	r2,zero,15bb4 <__sfp+0x88>
   15b94:	213fffc4 	addi	r4,r4,-1
   15b98:	1c3ffd04 	addi	r16,r3,-12
   15b9c:	18c01a04 	addi	r3,r3,104
   15ba0:	247ffa1e 	bne	r4,r17,15b8c <__alt_data_end+0xfc015b8c>
   15ba4:	90800017 	ldw	r2,0(r18)
   15ba8:	10001d26 	beq	r2,zero,15c20 <__sfp+0xf4>
   15bac:	1025883a 	mov	r18,r2
   15bb0:	003fee06 	br	15b6c <__alt_data_end+0xfc015b6c>
   15bb4:	00bfffc4 	movi	r2,-1
   15bb8:	8080038d 	sth	r2,14(r16)
   15bbc:	00800044 	movi	r2,1
   15bc0:	8080030d 	sth	r2,12(r16)
   15bc4:	80001915 	stw	zero,100(r16)
   15bc8:	80000015 	stw	zero,0(r16)
   15bcc:	80000215 	stw	zero,8(r16)
   15bd0:	80000115 	stw	zero,4(r16)
   15bd4:	80000415 	stw	zero,16(r16)
   15bd8:	80000515 	stw	zero,20(r16)
   15bdc:	80000615 	stw	zero,24(r16)
   15be0:	01800204 	movi	r6,8
   15be4:	000b883a 	mov	r5,zero
   15be8:	81001704 	addi	r4,r16,92
   15bec:	000edc00 	call	edc0 <memset>
   15bf0:	8005883a 	mov	r2,r16
   15bf4:	80000c15 	stw	zero,48(r16)
   15bf8:	80000d15 	stw	zero,52(r16)
   15bfc:	80001115 	stw	zero,68(r16)
   15c00:	80001215 	stw	zero,72(r16)
   15c04:	dfc00417 	ldw	ra,16(sp)
   15c08:	dcc00317 	ldw	r19,12(sp)
   15c0c:	dc800217 	ldw	r18,8(sp)
   15c10:	dc400117 	ldw	r17,4(sp)
   15c14:	dc000017 	ldw	r16,0(sp)
   15c18:	dec00504 	addi	sp,sp,20
   15c1c:	f800283a 	ret
   15c20:	01400104 	movi	r5,4
   15c24:	9809883a 	mov	r4,r19
   15c28:	0015ab40 	call	15ab4 <__sfmoreglue>
   15c2c:	90800015 	stw	r2,0(r18)
   15c30:	103fde1e 	bne	r2,zero,15bac <__alt_data_end+0xfc015bac>
   15c34:	00800304 	movi	r2,12
   15c38:	98800015 	stw	r2,0(r19)
   15c3c:	0005883a 	mov	r2,zero
   15c40:	003ff006 	br	15c04 <__alt_data_end+0xfc015c04>

00015c44 <_cleanup>:
   15c44:	008000f4 	movhi	r2,3
   15c48:	10b78604 	addi	r2,r2,-8680
   15c4c:	11000017 	ldw	r4,0(r2)
   15c50:	014000b4 	movhi	r5,2
   15c54:	296d2304 	addi	r5,r5,-19316
   15c58:	001666c1 	jmpi	1666c <_fwalk_reent>

00015c5c <__sinit>:
   15c5c:	20800e17 	ldw	r2,56(r4)
   15c60:	10000126 	beq	r2,zero,15c68 <__sinit+0xc>
   15c64:	f800283a 	ret
   15c68:	00159101 	jmpi	15910 <__sinit.part.1>

00015c6c <__sfp_lock_acquire>:
   15c6c:	f800283a 	ret

00015c70 <__sfp_lock_release>:
   15c70:	f800283a 	ret

00015c74 <__sinit_lock_acquire>:
   15c74:	f800283a 	ret

00015c78 <__sinit_lock_release>:
   15c78:	f800283a 	ret

00015c7c <__fp_lock_all>:
   15c7c:	008000f4 	movhi	r2,3
   15c80:	10b78704 	addi	r2,r2,-8676
   15c84:	11000017 	ldw	r4,0(r2)
   15c88:	01400074 	movhi	r5,1
   15c8c:	2956ab04 	addi	r5,r5,23212
   15c90:	00165a81 	jmpi	165a8 <_fwalk>

00015c94 <__fp_unlock_all>:
   15c94:	008000f4 	movhi	r2,3
   15c98:	10b78704 	addi	r2,r2,-8676
   15c9c:	11000017 	ldw	r4,0(r2)
   15ca0:	01400074 	movhi	r5,1
   15ca4:	29563f04 	addi	r5,r5,22780
   15ca8:	00165a81 	jmpi	165a8 <_fwalk>

00015cac <_malloc_trim_r>:
   15cac:	defffb04 	addi	sp,sp,-20
   15cb0:	dcc00315 	stw	r19,12(sp)
   15cb4:	04c000f4 	movhi	r19,3
   15cb8:	dc800215 	stw	r18,8(sp)
   15cbc:	dc400115 	stw	r17,4(sp)
   15cc0:	dc000015 	stw	r16,0(sp)
   15cc4:	dfc00415 	stw	ra,16(sp)
   15cc8:	2821883a 	mov	r16,r5
   15ccc:	9cec2804 	addi	r19,r19,-20320
   15cd0:	2025883a 	mov	r18,r4
   15cd4:	001f64c0 	call	1f64c <__malloc_lock>
   15cd8:	98800217 	ldw	r2,8(r19)
   15cdc:	14400117 	ldw	r17,4(r2)
   15ce0:	00bfff04 	movi	r2,-4
   15ce4:	88a2703a 	and	r17,r17,r2
   15ce8:	8c21c83a 	sub	r16,r17,r16
   15cec:	8403fbc4 	addi	r16,r16,4079
   15cf0:	8020d33a 	srli	r16,r16,12
   15cf4:	0083ffc4 	movi	r2,4095
   15cf8:	843fffc4 	addi	r16,r16,-1
   15cfc:	8020933a 	slli	r16,r16,12
   15d00:	1400060e 	bge	r2,r16,15d1c <_malloc_trim_r+0x70>
   15d04:	000b883a 	mov	r5,zero
   15d08:	9009883a 	mov	r4,r18
   15d0c:	000f0480 	call	f048 <_sbrk_r>
   15d10:	98c00217 	ldw	r3,8(r19)
   15d14:	1c47883a 	add	r3,r3,r17
   15d18:	10c00a26 	beq	r2,r3,15d44 <_malloc_trim_r+0x98>
   15d1c:	9009883a 	mov	r4,r18
   15d20:	001f6700 	call	1f670 <__malloc_unlock>
   15d24:	0005883a 	mov	r2,zero
   15d28:	dfc00417 	ldw	ra,16(sp)
   15d2c:	dcc00317 	ldw	r19,12(sp)
   15d30:	dc800217 	ldw	r18,8(sp)
   15d34:	dc400117 	ldw	r17,4(sp)
   15d38:	dc000017 	ldw	r16,0(sp)
   15d3c:	dec00504 	addi	sp,sp,20
   15d40:	f800283a 	ret
   15d44:	040bc83a 	sub	r5,zero,r16
   15d48:	9009883a 	mov	r4,r18
   15d4c:	000f0480 	call	f048 <_sbrk_r>
   15d50:	00ffffc4 	movi	r3,-1
   15d54:	10c00d26 	beq	r2,r3,15d8c <_malloc_trim_r+0xe0>
   15d58:	00c000f4 	movhi	r3,3
   15d5c:	18c47204 	addi	r3,r3,4552
   15d60:	18800017 	ldw	r2,0(r3)
   15d64:	99000217 	ldw	r4,8(r19)
   15d68:	8c23c83a 	sub	r17,r17,r16
   15d6c:	8c400054 	ori	r17,r17,1
   15d70:	1421c83a 	sub	r16,r2,r16
   15d74:	24400115 	stw	r17,4(r4)
   15d78:	9009883a 	mov	r4,r18
   15d7c:	1c000015 	stw	r16,0(r3)
   15d80:	001f6700 	call	1f670 <__malloc_unlock>
   15d84:	00800044 	movi	r2,1
   15d88:	003fe706 	br	15d28 <__alt_data_end+0xfc015d28>
   15d8c:	000b883a 	mov	r5,zero
   15d90:	9009883a 	mov	r4,r18
   15d94:	000f0480 	call	f048 <_sbrk_r>
   15d98:	99000217 	ldw	r4,8(r19)
   15d9c:	014003c4 	movi	r5,15
   15da0:	1107c83a 	sub	r3,r2,r4
   15da4:	28ffdd0e 	bge	r5,r3,15d1c <__alt_data_end+0xfc015d1c>
   15da8:	014000f4 	movhi	r5,3
   15dac:	29778804 	addi	r5,r5,-8672
   15db0:	29400017 	ldw	r5,0(r5)
   15db4:	18c00054 	ori	r3,r3,1
   15db8:	20c00115 	stw	r3,4(r4)
   15dbc:	00c000f4 	movhi	r3,3
   15dc0:	1145c83a 	sub	r2,r2,r5
   15dc4:	18c47204 	addi	r3,r3,4552
   15dc8:	18800015 	stw	r2,0(r3)
   15dcc:	003fd306 	br	15d1c <__alt_data_end+0xfc015d1c>

00015dd0 <_free_r>:
   15dd0:	28004126 	beq	r5,zero,15ed8 <_free_r+0x108>
   15dd4:	defffd04 	addi	sp,sp,-12
   15dd8:	dc400115 	stw	r17,4(sp)
   15ddc:	dc000015 	stw	r16,0(sp)
   15de0:	2023883a 	mov	r17,r4
   15de4:	2821883a 	mov	r16,r5
   15de8:	dfc00215 	stw	ra,8(sp)
   15dec:	001f64c0 	call	1f64c <__malloc_lock>
   15df0:	81ffff17 	ldw	r7,-4(r16)
   15df4:	00bfff84 	movi	r2,-2
   15df8:	010000f4 	movhi	r4,3
   15dfc:	81bffe04 	addi	r6,r16,-8
   15e00:	3884703a 	and	r2,r7,r2
   15e04:	212c2804 	addi	r4,r4,-20320
   15e08:	308b883a 	add	r5,r6,r2
   15e0c:	2a400117 	ldw	r9,4(r5)
   15e10:	22000217 	ldw	r8,8(r4)
   15e14:	00ffff04 	movi	r3,-4
   15e18:	48c6703a 	and	r3,r9,r3
   15e1c:	2a005726 	beq	r5,r8,15f7c <_free_r+0x1ac>
   15e20:	28c00115 	stw	r3,4(r5)
   15e24:	39c0004c 	andi	r7,r7,1
   15e28:	3800091e 	bne	r7,zero,15e50 <_free_r+0x80>
   15e2c:	823ffe17 	ldw	r8,-8(r16)
   15e30:	22400204 	addi	r9,r4,8
   15e34:	320dc83a 	sub	r6,r6,r8
   15e38:	31c00217 	ldw	r7,8(r6)
   15e3c:	1205883a 	add	r2,r2,r8
   15e40:	3a406526 	beq	r7,r9,15fd8 <_free_r+0x208>
   15e44:	32000317 	ldw	r8,12(r6)
   15e48:	3a000315 	stw	r8,12(r7)
   15e4c:	41c00215 	stw	r7,8(r8)
   15e50:	28cf883a 	add	r7,r5,r3
   15e54:	39c00117 	ldw	r7,4(r7)
   15e58:	39c0004c 	andi	r7,r7,1
   15e5c:	38003a26 	beq	r7,zero,15f48 <_free_r+0x178>
   15e60:	10c00054 	ori	r3,r2,1
   15e64:	30c00115 	stw	r3,4(r6)
   15e68:	3087883a 	add	r3,r6,r2
   15e6c:	18800015 	stw	r2,0(r3)
   15e70:	00c07fc4 	movi	r3,511
   15e74:	18801936 	bltu	r3,r2,15edc <_free_r+0x10c>
   15e78:	1004d0fa 	srli	r2,r2,3
   15e7c:	01c00044 	movi	r7,1
   15e80:	21400117 	ldw	r5,4(r4)
   15e84:	10c00044 	addi	r3,r2,1
   15e88:	18c7883a 	add	r3,r3,r3
   15e8c:	1005d0ba 	srai	r2,r2,2
   15e90:	18c7883a 	add	r3,r3,r3
   15e94:	18c7883a 	add	r3,r3,r3
   15e98:	1907883a 	add	r3,r3,r4
   15e9c:	3884983a 	sll	r2,r7,r2
   15ea0:	19c00017 	ldw	r7,0(r3)
   15ea4:	1a3ffe04 	addi	r8,r3,-8
   15ea8:	1144b03a 	or	r2,r2,r5
   15eac:	32000315 	stw	r8,12(r6)
   15eb0:	31c00215 	stw	r7,8(r6)
   15eb4:	20800115 	stw	r2,4(r4)
   15eb8:	19800015 	stw	r6,0(r3)
   15ebc:	39800315 	stw	r6,12(r7)
   15ec0:	8809883a 	mov	r4,r17
   15ec4:	dfc00217 	ldw	ra,8(sp)
   15ec8:	dc400117 	ldw	r17,4(sp)
   15ecc:	dc000017 	ldw	r16,0(sp)
   15ed0:	dec00304 	addi	sp,sp,12
   15ed4:	001f6701 	jmpi	1f670 <__malloc_unlock>
   15ed8:	f800283a 	ret
   15edc:	100ad27a 	srli	r5,r2,9
   15ee0:	00c00104 	movi	r3,4
   15ee4:	19404a36 	bltu	r3,r5,16010 <_free_r+0x240>
   15ee8:	100ad1ba 	srli	r5,r2,6
   15eec:	28c00e44 	addi	r3,r5,57
   15ef0:	18c7883a 	add	r3,r3,r3
   15ef4:	29400e04 	addi	r5,r5,56
   15ef8:	18c7883a 	add	r3,r3,r3
   15efc:	18c7883a 	add	r3,r3,r3
   15f00:	1909883a 	add	r4,r3,r4
   15f04:	20c00017 	ldw	r3,0(r4)
   15f08:	01c000f4 	movhi	r7,3
   15f0c:	213ffe04 	addi	r4,r4,-8
   15f10:	39ec2804 	addi	r7,r7,-20320
   15f14:	20c04426 	beq	r4,r3,16028 <_free_r+0x258>
   15f18:	01ffff04 	movi	r7,-4
   15f1c:	19400117 	ldw	r5,4(r3)
   15f20:	29ca703a 	and	r5,r5,r7
   15f24:	1140022e 	bgeu	r2,r5,15f30 <_free_r+0x160>
   15f28:	18c00217 	ldw	r3,8(r3)
   15f2c:	20fffb1e 	bne	r4,r3,15f1c <__alt_data_end+0xfc015f1c>
   15f30:	19000317 	ldw	r4,12(r3)
   15f34:	31000315 	stw	r4,12(r6)
   15f38:	30c00215 	stw	r3,8(r6)
   15f3c:	21800215 	stw	r6,8(r4)
   15f40:	19800315 	stw	r6,12(r3)
   15f44:	003fde06 	br	15ec0 <__alt_data_end+0xfc015ec0>
   15f48:	29c00217 	ldw	r7,8(r5)
   15f4c:	10c5883a 	add	r2,r2,r3
   15f50:	00c000f4 	movhi	r3,3
   15f54:	18ec2a04 	addi	r3,r3,-20312
   15f58:	38c03b26 	beq	r7,r3,16048 <_free_r+0x278>
   15f5c:	2a000317 	ldw	r8,12(r5)
   15f60:	11400054 	ori	r5,r2,1
   15f64:	3087883a 	add	r3,r6,r2
   15f68:	3a000315 	stw	r8,12(r7)
   15f6c:	41c00215 	stw	r7,8(r8)
   15f70:	31400115 	stw	r5,4(r6)
   15f74:	18800015 	stw	r2,0(r3)
   15f78:	003fbd06 	br	15e70 <__alt_data_end+0xfc015e70>
   15f7c:	39c0004c 	andi	r7,r7,1
   15f80:	10c5883a 	add	r2,r2,r3
   15f84:	3800071e 	bne	r7,zero,15fa4 <_free_r+0x1d4>
   15f88:	81fffe17 	ldw	r7,-8(r16)
   15f8c:	31cdc83a 	sub	r6,r6,r7
   15f90:	30c00317 	ldw	r3,12(r6)
   15f94:	31400217 	ldw	r5,8(r6)
   15f98:	11c5883a 	add	r2,r2,r7
   15f9c:	28c00315 	stw	r3,12(r5)
   15fa0:	19400215 	stw	r5,8(r3)
   15fa4:	10c00054 	ori	r3,r2,1
   15fa8:	30c00115 	stw	r3,4(r6)
   15fac:	00c000f4 	movhi	r3,3
   15fb0:	18f78904 	addi	r3,r3,-8668
   15fb4:	18c00017 	ldw	r3,0(r3)
   15fb8:	21800215 	stw	r6,8(r4)
   15fbc:	10ffc036 	bltu	r2,r3,15ec0 <__alt_data_end+0xfc015ec0>
   15fc0:	008000f4 	movhi	r2,3
   15fc4:	10841a04 	addi	r2,r2,4200
   15fc8:	11400017 	ldw	r5,0(r2)
   15fcc:	8809883a 	mov	r4,r17
   15fd0:	0015cac0 	call	15cac <_malloc_trim_r>
   15fd4:	003fba06 	br	15ec0 <__alt_data_end+0xfc015ec0>
   15fd8:	28c9883a 	add	r4,r5,r3
   15fdc:	21000117 	ldw	r4,4(r4)
   15fe0:	2100004c 	andi	r4,r4,1
   15fe4:	2000391e 	bne	r4,zero,160cc <_free_r+0x2fc>
   15fe8:	29c00217 	ldw	r7,8(r5)
   15fec:	29000317 	ldw	r4,12(r5)
   15ff0:	1885883a 	add	r2,r3,r2
   15ff4:	10c00054 	ori	r3,r2,1
   15ff8:	39000315 	stw	r4,12(r7)
   15ffc:	21c00215 	stw	r7,8(r4)
   16000:	30c00115 	stw	r3,4(r6)
   16004:	308d883a 	add	r6,r6,r2
   16008:	30800015 	stw	r2,0(r6)
   1600c:	003fac06 	br	15ec0 <__alt_data_end+0xfc015ec0>
   16010:	00c00504 	movi	r3,20
   16014:	19401536 	bltu	r3,r5,1606c <_free_r+0x29c>
   16018:	28c01704 	addi	r3,r5,92
   1601c:	18c7883a 	add	r3,r3,r3
   16020:	294016c4 	addi	r5,r5,91
   16024:	003fb406 	br	15ef8 <__alt_data_end+0xfc015ef8>
   16028:	280bd0ba 	srai	r5,r5,2
   1602c:	00c00044 	movi	r3,1
   16030:	38800117 	ldw	r2,4(r7)
   16034:	194a983a 	sll	r5,r3,r5
   16038:	2007883a 	mov	r3,r4
   1603c:	2884b03a 	or	r2,r5,r2
   16040:	38800115 	stw	r2,4(r7)
   16044:	003fbb06 	br	15f34 <__alt_data_end+0xfc015f34>
   16048:	21800515 	stw	r6,20(r4)
   1604c:	21800415 	stw	r6,16(r4)
   16050:	10c00054 	ori	r3,r2,1
   16054:	31c00315 	stw	r7,12(r6)
   16058:	31c00215 	stw	r7,8(r6)
   1605c:	30c00115 	stw	r3,4(r6)
   16060:	308d883a 	add	r6,r6,r2
   16064:	30800015 	stw	r2,0(r6)
   16068:	003f9506 	br	15ec0 <__alt_data_end+0xfc015ec0>
   1606c:	00c01504 	movi	r3,84
   16070:	19400536 	bltu	r3,r5,16088 <_free_r+0x2b8>
   16074:	100ad33a 	srli	r5,r2,12
   16078:	28c01bc4 	addi	r3,r5,111
   1607c:	18c7883a 	add	r3,r3,r3
   16080:	29401b84 	addi	r5,r5,110
   16084:	003f9c06 	br	15ef8 <__alt_data_end+0xfc015ef8>
   16088:	00c05504 	movi	r3,340
   1608c:	19400536 	bltu	r3,r5,160a4 <_free_r+0x2d4>
   16090:	100ad3fa 	srli	r5,r2,15
   16094:	28c01e04 	addi	r3,r5,120
   16098:	18c7883a 	add	r3,r3,r3
   1609c:	29401dc4 	addi	r5,r5,119
   160a0:	003f9506 	br	15ef8 <__alt_data_end+0xfc015ef8>
   160a4:	00c15504 	movi	r3,1364
   160a8:	19400536 	bltu	r3,r5,160c0 <_free_r+0x2f0>
   160ac:	100ad4ba 	srli	r5,r2,18
   160b0:	28c01f44 	addi	r3,r5,125
   160b4:	18c7883a 	add	r3,r3,r3
   160b8:	29401f04 	addi	r5,r5,124
   160bc:	003f8e06 	br	15ef8 <__alt_data_end+0xfc015ef8>
   160c0:	00c03f84 	movi	r3,254
   160c4:	01401f84 	movi	r5,126
   160c8:	003f8b06 	br	15ef8 <__alt_data_end+0xfc015ef8>
   160cc:	10c00054 	ori	r3,r2,1
   160d0:	30c00115 	stw	r3,4(r6)
   160d4:	308d883a 	add	r6,r6,r2
   160d8:	30800015 	stw	r2,0(r6)
   160dc:	003f7806 	br	15ec0 <__alt_data_end+0xfc015ec0>

000160e0 <__sfvwrite_r>:
   160e0:	30800217 	ldw	r2,8(r6)
   160e4:	10006726 	beq	r2,zero,16284 <__sfvwrite_r+0x1a4>
   160e8:	28c0030b 	ldhu	r3,12(r5)
   160ec:	defff404 	addi	sp,sp,-48
   160f0:	dd400715 	stw	r21,28(sp)
   160f4:	dd000615 	stw	r20,24(sp)
   160f8:	dc000215 	stw	r16,8(sp)
   160fc:	dfc00b15 	stw	ra,44(sp)
   16100:	df000a15 	stw	fp,40(sp)
   16104:	ddc00915 	stw	r23,36(sp)
   16108:	dd800815 	stw	r22,32(sp)
   1610c:	dcc00515 	stw	r19,20(sp)
   16110:	dc800415 	stw	r18,16(sp)
   16114:	dc400315 	stw	r17,12(sp)
   16118:	1880020c 	andi	r2,r3,8
   1611c:	2821883a 	mov	r16,r5
   16120:	202b883a 	mov	r21,r4
   16124:	3029883a 	mov	r20,r6
   16128:	10002726 	beq	r2,zero,161c8 <__sfvwrite_r+0xe8>
   1612c:	28800417 	ldw	r2,16(r5)
   16130:	10002526 	beq	r2,zero,161c8 <__sfvwrite_r+0xe8>
   16134:	1880008c 	andi	r2,r3,2
   16138:	a4400017 	ldw	r17,0(r20)
   1613c:	10002a26 	beq	r2,zero,161e8 <__sfvwrite_r+0x108>
   16140:	05a00034 	movhi	r22,32768
   16144:	0027883a 	mov	r19,zero
   16148:	0025883a 	mov	r18,zero
   1614c:	b5bf0004 	addi	r22,r22,-1024
   16150:	980d883a 	mov	r6,r19
   16154:	a809883a 	mov	r4,r21
   16158:	90004626 	beq	r18,zero,16274 <__sfvwrite_r+0x194>
   1615c:	900f883a 	mov	r7,r18
   16160:	b480022e 	bgeu	r22,r18,1616c <__sfvwrite_r+0x8c>
   16164:	01e00034 	movhi	r7,32768
   16168:	39ff0004 	addi	r7,r7,-1024
   1616c:	80800917 	ldw	r2,36(r16)
   16170:	81400717 	ldw	r5,28(r16)
   16174:	103ee83a 	callr	r2
   16178:	00805a0e 	bge	zero,r2,162e4 <__sfvwrite_r+0x204>
   1617c:	a0c00217 	ldw	r3,8(r20)
   16180:	98a7883a 	add	r19,r19,r2
   16184:	90a5c83a 	sub	r18,r18,r2
   16188:	1885c83a 	sub	r2,r3,r2
   1618c:	a0800215 	stw	r2,8(r20)
   16190:	103fef1e 	bne	r2,zero,16150 <__alt_data_end+0xfc016150>
   16194:	0005883a 	mov	r2,zero
   16198:	dfc00b17 	ldw	ra,44(sp)
   1619c:	df000a17 	ldw	fp,40(sp)
   161a0:	ddc00917 	ldw	r23,36(sp)
   161a4:	dd800817 	ldw	r22,32(sp)
   161a8:	dd400717 	ldw	r21,28(sp)
   161ac:	dd000617 	ldw	r20,24(sp)
   161b0:	dcc00517 	ldw	r19,20(sp)
   161b4:	dc800417 	ldw	r18,16(sp)
   161b8:	dc400317 	ldw	r17,12(sp)
   161bc:	dc000217 	ldw	r16,8(sp)
   161c0:	dec00c04 	addi	sp,sp,48
   161c4:	f800283a 	ret
   161c8:	800b883a 	mov	r5,r16
   161cc:	a809883a 	mov	r4,r21
   161d0:	0013c500 	call	13c50 <__swsetup_r>
   161d4:	1000ee1e 	bne	r2,zero,16590 <__sfvwrite_r+0x4b0>
   161d8:	80c0030b 	ldhu	r3,12(r16)
   161dc:	a4400017 	ldw	r17,0(r20)
   161e0:	1880008c 	andi	r2,r3,2
   161e4:	103fd61e 	bne	r2,zero,16140 <__alt_data_end+0xfc016140>
   161e8:	1880004c 	andi	r2,r3,1
   161ec:	1000421e 	bne	r2,zero,162f8 <__sfvwrite_r+0x218>
   161f0:	0039883a 	mov	fp,zero
   161f4:	0025883a 	mov	r18,zero
   161f8:	90001a26 	beq	r18,zero,16264 <__sfvwrite_r+0x184>
   161fc:	1880800c 	andi	r2,r3,512
   16200:	84c00217 	ldw	r19,8(r16)
   16204:	10002126 	beq	r2,zero,1628c <__sfvwrite_r+0x1ac>
   16208:	982f883a 	mov	r23,r19
   1620c:	94c09636 	bltu	r18,r19,16468 <__sfvwrite_r+0x388>
   16210:	1881200c 	andi	r2,r3,1152
   16214:	1000a11e 	bne	r2,zero,1649c <__sfvwrite_r+0x3bc>
   16218:	81000017 	ldw	r4,0(r16)
   1621c:	b80d883a 	mov	r6,r23
   16220:	e00b883a 	mov	r5,fp
   16224:	0016aac0 	call	16aac <memmove>
   16228:	80c00217 	ldw	r3,8(r16)
   1622c:	81000017 	ldw	r4,0(r16)
   16230:	9005883a 	mov	r2,r18
   16234:	1ce7c83a 	sub	r19,r3,r19
   16238:	25cf883a 	add	r7,r4,r23
   1623c:	84c00215 	stw	r19,8(r16)
   16240:	81c00015 	stw	r7,0(r16)
   16244:	a0c00217 	ldw	r3,8(r20)
   16248:	e0b9883a 	add	fp,fp,r2
   1624c:	90a5c83a 	sub	r18,r18,r2
   16250:	18a7c83a 	sub	r19,r3,r2
   16254:	a4c00215 	stw	r19,8(r20)
   16258:	983fce26 	beq	r19,zero,16194 <__alt_data_end+0xfc016194>
   1625c:	80c0030b 	ldhu	r3,12(r16)
   16260:	903fe61e 	bne	r18,zero,161fc <__alt_data_end+0xfc0161fc>
   16264:	8f000017 	ldw	fp,0(r17)
   16268:	8c800117 	ldw	r18,4(r17)
   1626c:	8c400204 	addi	r17,r17,8
   16270:	003fe106 	br	161f8 <__alt_data_end+0xfc0161f8>
   16274:	8cc00017 	ldw	r19,0(r17)
   16278:	8c800117 	ldw	r18,4(r17)
   1627c:	8c400204 	addi	r17,r17,8
   16280:	003fb306 	br	16150 <__alt_data_end+0xfc016150>
   16284:	0005883a 	mov	r2,zero
   16288:	f800283a 	ret
   1628c:	81000017 	ldw	r4,0(r16)
   16290:	80800417 	ldw	r2,16(r16)
   16294:	11005a36 	bltu	r2,r4,16400 <__sfvwrite_r+0x320>
   16298:	85c00517 	ldw	r23,20(r16)
   1629c:	95c05836 	bltu	r18,r23,16400 <__sfvwrite_r+0x320>
   162a0:	00a00034 	movhi	r2,32768
   162a4:	10bfffc4 	addi	r2,r2,-1
   162a8:	9009883a 	mov	r4,r18
   162ac:	1480012e 	bgeu	r2,r18,162b4 <__sfvwrite_r+0x1d4>
   162b0:	1009883a 	mov	r4,r2
   162b4:	b80b883a 	mov	r5,r23
   162b8:	000cd100 	call	cd10 <__divsi3>
   162bc:	b80b883a 	mov	r5,r23
   162c0:	1009883a 	mov	r4,r2
   162c4:	000cec40 	call	cec4 <__mulsi3>
   162c8:	81400717 	ldw	r5,28(r16)
   162cc:	80c00917 	ldw	r3,36(r16)
   162d0:	100f883a 	mov	r7,r2
   162d4:	e00d883a 	mov	r6,fp
   162d8:	a809883a 	mov	r4,r21
   162dc:	183ee83a 	callr	r3
   162e0:	00bfd816 	blt	zero,r2,16244 <__alt_data_end+0xfc016244>
   162e4:	8080030b 	ldhu	r2,12(r16)
   162e8:	10801014 	ori	r2,r2,64
   162ec:	8080030d 	sth	r2,12(r16)
   162f0:	00bfffc4 	movi	r2,-1
   162f4:	003fa806 	br	16198 <__alt_data_end+0xfc016198>
   162f8:	0027883a 	mov	r19,zero
   162fc:	0011883a 	mov	r8,zero
   16300:	0039883a 	mov	fp,zero
   16304:	0025883a 	mov	r18,zero
   16308:	90001f26 	beq	r18,zero,16388 <__sfvwrite_r+0x2a8>
   1630c:	40005a26 	beq	r8,zero,16478 <__sfvwrite_r+0x398>
   16310:	982d883a 	mov	r22,r19
   16314:	94c0012e 	bgeu	r18,r19,1631c <__sfvwrite_r+0x23c>
   16318:	902d883a 	mov	r22,r18
   1631c:	81000017 	ldw	r4,0(r16)
   16320:	80800417 	ldw	r2,16(r16)
   16324:	b02f883a 	mov	r23,r22
   16328:	81c00517 	ldw	r7,20(r16)
   1632c:	1100032e 	bgeu	r2,r4,1633c <__sfvwrite_r+0x25c>
   16330:	80c00217 	ldw	r3,8(r16)
   16334:	38c7883a 	add	r3,r7,r3
   16338:	1d801816 	blt	r3,r22,1639c <__sfvwrite_r+0x2bc>
   1633c:	b1c03e16 	blt	r22,r7,16438 <__sfvwrite_r+0x358>
   16340:	80800917 	ldw	r2,36(r16)
   16344:	81400717 	ldw	r5,28(r16)
   16348:	e00d883a 	mov	r6,fp
   1634c:	da000115 	stw	r8,4(sp)
   16350:	a809883a 	mov	r4,r21
   16354:	103ee83a 	callr	r2
   16358:	102f883a 	mov	r23,r2
   1635c:	da000117 	ldw	r8,4(sp)
   16360:	00bfe00e 	bge	zero,r2,162e4 <__alt_data_end+0xfc0162e4>
   16364:	9de7c83a 	sub	r19,r19,r23
   16368:	98001f26 	beq	r19,zero,163e8 <__sfvwrite_r+0x308>
   1636c:	a0800217 	ldw	r2,8(r20)
   16370:	e5f9883a 	add	fp,fp,r23
   16374:	95e5c83a 	sub	r18,r18,r23
   16378:	15efc83a 	sub	r23,r2,r23
   1637c:	a5c00215 	stw	r23,8(r20)
   16380:	b83f8426 	beq	r23,zero,16194 <__alt_data_end+0xfc016194>
   16384:	903fe11e 	bne	r18,zero,1630c <__alt_data_end+0xfc01630c>
   16388:	8f000017 	ldw	fp,0(r17)
   1638c:	8c800117 	ldw	r18,4(r17)
   16390:	0011883a 	mov	r8,zero
   16394:	8c400204 	addi	r17,r17,8
   16398:	003fdb06 	br	16308 <__alt_data_end+0xfc016308>
   1639c:	180d883a 	mov	r6,r3
   163a0:	e00b883a 	mov	r5,fp
   163a4:	da000115 	stw	r8,4(sp)
   163a8:	d8c00015 	stw	r3,0(sp)
   163ac:	0016aac0 	call	16aac <memmove>
   163b0:	d8c00017 	ldw	r3,0(sp)
   163b4:	80800017 	ldw	r2,0(r16)
   163b8:	800b883a 	mov	r5,r16
   163bc:	a809883a 	mov	r4,r21
   163c0:	10c5883a 	add	r2,r2,r3
   163c4:	80800015 	stw	r2,0(r16)
   163c8:	d8c00015 	stw	r3,0(sp)
   163cc:	00158700 	call	15870 <_fflush_r>
   163d0:	d8c00017 	ldw	r3,0(sp)
   163d4:	da000117 	ldw	r8,4(sp)
   163d8:	103fc21e 	bne	r2,zero,162e4 <__alt_data_end+0xfc0162e4>
   163dc:	182f883a 	mov	r23,r3
   163e0:	9de7c83a 	sub	r19,r19,r23
   163e4:	983fe11e 	bne	r19,zero,1636c <__alt_data_end+0xfc01636c>
   163e8:	800b883a 	mov	r5,r16
   163ec:	a809883a 	mov	r4,r21
   163f0:	00158700 	call	15870 <_fflush_r>
   163f4:	103fbb1e 	bne	r2,zero,162e4 <__alt_data_end+0xfc0162e4>
   163f8:	0011883a 	mov	r8,zero
   163fc:	003fdb06 	br	1636c <__alt_data_end+0xfc01636c>
   16400:	94c0012e 	bgeu	r18,r19,16408 <__sfvwrite_r+0x328>
   16404:	9027883a 	mov	r19,r18
   16408:	980d883a 	mov	r6,r19
   1640c:	e00b883a 	mov	r5,fp
   16410:	0016aac0 	call	16aac <memmove>
   16414:	80800217 	ldw	r2,8(r16)
   16418:	80c00017 	ldw	r3,0(r16)
   1641c:	14c5c83a 	sub	r2,r2,r19
   16420:	1cc7883a 	add	r3,r3,r19
   16424:	80800215 	stw	r2,8(r16)
   16428:	80c00015 	stw	r3,0(r16)
   1642c:	10004326 	beq	r2,zero,1653c <__sfvwrite_r+0x45c>
   16430:	9805883a 	mov	r2,r19
   16434:	003f8306 	br	16244 <__alt_data_end+0xfc016244>
   16438:	b00d883a 	mov	r6,r22
   1643c:	e00b883a 	mov	r5,fp
   16440:	da000115 	stw	r8,4(sp)
   16444:	0016aac0 	call	16aac <memmove>
   16448:	80800217 	ldw	r2,8(r16)
   1644c:	80c00017 	ldw	r3,0(r16)
   16450:	da000117 	ldw	r8,4(sp)
   16454:	1585c83a 	sub	r2,r2,r22
   16458:	1dad883a 	add	r22,r3,r22
   1645c:	80800215 	stw	r2,8(r16)
   16460:	85800015 	stw	r22,0(r16)
   16464:	003fbf06 	br	16364 <__alt_data_end+0xfc016364>
   16468:	81000017 	ldw	r4,0(r16)
   1646c:	9027883a 	mov	r19,r18
   16470:	902f883a 	mov	r23,r18
   16474:	003f6906 	br	1621c <__alt_data_end+0xfc01621c>
   16478:	900d883a 	mov	r6,r18
   1647c:	01400284 	movi	r5,10
   16480:	e009883a 	mov	r4,fp
   16484:	00169c80 	call	169c8 <memchr>
   16488:	10003e26 	beq	r2,zero,16584 <__sfvwrite_r+0x4a4>
   1648c:	10800044 	addi	r2,r2,1
   16490:	1727c83a 	sub	r19,r2,fp
   16494:	02000044 	movi	r8,1
   16498:	003f9d06 	br	16310 <__alt_data_end+0xfc016310>
   1649c:	80800517 	ldw	r2,20(r16)
   164a0:	81400417 	ldw	r5,16(r16)
   164a4:	81c00017 	ldw	r7,0(r16)
   164a8:	10a7883a 	add	r19,r2,r2
   164ac:	9885883a 	add	r2,r19,r2
   164b0:	1026d7fa 	srli	r19,r2,31
   164b4:	396dc83a 	sub	r22,r7,r5
   164b8:	b1000044 	addi	r4,r22,1
   164bc:	9885883a 	add	r2,r19,r2
   164c0:	1027d07a 	srai	r19,r2,1
   164c4:	2485883a 	add	r2,r4,r18
   164c8:	980d883a 	mov	r6,r19
   164cc:	9880022e 	bgeu	r19,r2,164d8 <__sfvwrite_r+0x3f8>
   164d0:	1027883a 	mov	r19,r2
   164d4:	100d883a 	mov	r6,r2
   164d8:	18c1000c 	andi	r3,r3,1024
   164dc:	18001c26 	beq	r3,zero,16550 <__sfvwrite_r+0x470>
   164e0:	300b883a 	mov	r5,r6
   164e4:	a809883a 	mov	r4,r21
   164e8:	000e46c0 	call	e46c <_malloc_r>
   164ec:	102f883a 	mov	r23,r2
   164f0:	10002926 	beq	r2,zero,16598 <__sfvwrite_r+0x4b8>
   164f4:	81400417 	ldw	r5,16(r16)
   164f8:	b00d883a 	mov	r6,r22
   164fc:	1009883a 	mov	r4,r2
   16500:	000ec780 	call	ec78 <memcpy>
   16504:	8080030b 	ldhu	r2,12(r16)
   16508:	00fedfc4 	movi	r3,-1153
   1650c:	10c4703a 	and	r2,r2,r3
   16510:	10802014 	ori	r2,r2,128
   16514:	8080030d 	sth	r2,12(r16)
   16518:	bd89883a 	add	r4,r23,r22
   1651c:	9d8fc83a 	sub	r7,r19,r22
   16520:	85c00415 	stw	r23,16(r16)
   16524:	84c00515 	stw	r19,20(r16)
   16528:	81000015 	stw	r4,0(r16)
   1652c:	9027883a 	mov	r19,r18
   16530:	81c00215 	stw	r7,8(r16)
   16534:	902f883a 	mov	r23,r18
   16538:	003f3806 	br	1621c <__alt_data_end+0xfc01621c>
   1653c:	800b883a 	mov	r5,r16
   16540:	a809883a 	mov	r4,r21
   16544:	00158700 	call	15870 <_fflush_r>
   16548:	103fb926 	beq	r2,zero,16430 <__alt_data_end+0xfc016430>
   1654c:	003f6506 	br	162e4 <__alt_data_end+0xfc0162e4>
   16550:	a809883a 	mov	r4,r21
   16554:	0017e280 	call	17e28 <_realloc_r>
   16558:	102f883a 	mov	r23,r2
   1655c:	103fee1e 	bne	r2,zero,16518 <__alt_data_end+0xfc016518>
   16560:	81400417 	ldw	r5,16(r16)
   16564:	a809883a 	mov	r4,r21
   16568:	0015dd00 	call	15dd0 <_free_r>
   1656c:	8080030b 	ldhu	r2,12(r16)
   16570:	00ffdfc4 	movi	r3,-129
   16574:	1884703a 	and	r2,r3,r2
   16578:	00c00304 	movi	r3,12
   1657c:	a8c00015 	stw	r3,0(r21)
   16580:	003f5906 	br	162e8 <__alt_data_end+0xfc0162e8>
   16584:	94c00044 	addi	r19,r18,1
   16588:	02000044 	movi	r8,1
   1658c:	003f6006 	br	16310 <__alt_data_end+0xfc016310>
   16590:	00bfffc4 	movi	r2,-1
   16594:	003f0006 	br	16198 <__alt_data_end+0xfc016198>
   16598:	00800304 	movi	r2,12
   1659c:	a8800015 	stw	r2,0(r21)
   165a0:	8080030b 	ldhu	r2,12(r16)
   165a4:	003f5006 	br	162e8 <__alt_data_end+0xfc0162e8>

000165a8 <_fwalk>:
   165a8:	defff704 	addi	sp,sp,-36
   165ac:	dd000415 	stw	r20,16(sp)
   165b0:	dfc00815 	stw	ra,32(sp)
   165b4:	ddc00715 	stw	r23,28(sp)
   165b8:	dd800615 	stw	r22,24(sp)
   165bc:	dd400515 	stw	r21,20(sp)
   165c0:	dcc00315 	stw	r19,12(sp)
   165c4:	dc800215 	stw	r18,8(sp)
   165c8:	dc400115 	stw	r17,4(sp)
   165cc:	dc000015 	stw	r16,0(sp)
   165d0:	2500b804 	addi	r20,r4,736
   165d4:	a0002326 	beq	r20,zero,16664 <_fwalk+0xbc>
   165d8:	282b883a 	mov	r21,r5
   165dc:	002f883a 	mov	r23,zero
   165e0:	05800044 	movi	r22,1
   165e4:	04ffffc4 	movi	r19,-1
   165e8:	a4400117 	ldw	r17,4(r20)
   165ec:	a4800217 	ldw	r18,8(r20)
   165f0:	8c7fffc4 	addi	r17,r17,-1
   165f4:	88000d16 	blt	r17,zero,1662c <_fwalk+0x84>
   165f8:	94000304 	addi	r16,r18,12
   165fc:	94800384 	addi	r18,r18,14
   16600:	8080000b 	ldhu	r2,0(r16)
   16604:	8c7fffc4 	addi	r17,r17,-1
   16608:	813ffd04 	addi	r4,r16,-12
   1660c:	b080042e 	bgeu	r22,r2,16620 <_fwalk+0x78>
   16610:	9080000f 	ldh	r2,0(r18)
   16614:	14c00226 	beq	r2,r19,16620 <_fwalk+0x78>
   16618:	a83ee83a 	callr	r21
   1661c:	b8aeb03a 	or	r23,r23,r2
   16620:	84001a04 	addi	r16,r16,104
   16624:	94801a04 	addi	r18,r18,104
   16628:	8cfff51e 	bne	r17,r19,16600 <__alt_data_end+0xfc016600>
   1662c:	a5000017 	ldw	r20,0(r20)
   16630:	a03fed1e 	bne	r20,zero,165e8 <__alt_data_end+0xfc0165e8>
   16634:	b805883a 	mov	r2,r23
   16638:	dfc00817 	ldw	ra,32(sp)
   1663c:	ddc00717 	ldw	r23,28(sp)
   16640:	dd800617 	ldw	r22,24(sp)
   16644:	dd400517 	ldw	r21,20(sp)
   16648:	dd000417 	ldw	r20,16(sp)
   1664c:	dcc00317 	ldw	r19,12(sp)
   16650:	dc800217 	ldw	r18,8(sp)
   16654:	dc400117 	ldw	r17,4(sp)
   16658:	dc000017 	ldw	r16,0(sp)
   1665c:	dec00904 	addi	sp,sp,36
   16660:	f800283a 	ret
   16664:	002f883a 	mov	r23,zero
   16668:	003ff206 	br	16634 <__alt_data_end+0xfc016634>

0001666c <_fwalk_reent>:
   1666c:	defff704 	addi	sp,sp,-36
   16670:	dd000415 	stw	r20,16(sp)
   16674:	dfc00815 	stw	ra,32(sp)
   16678:	ddc00715 	stw	r23,28(sp)
   1667c:	dd800615 	stw	r22,24(sp)
   16680:	dd400515 	stw	r21,20(sp)
   16684:	dcc00315 	stw	r19,12(sp)
   16688:	dc800215 	stw	r18,8(sp)
   1668c:	dc400115 	stw	r17,4(sp)
   16690:	dc000015 	stw	r16,0(sp)
   16694:	2500b804 	addi	r20,r4,736
   16698:	a0002326 	beq	r20,zero,16728 <_fwalk_reent+0xbc>
   1669c:	282b883a 	mov	r21,r5
   166a0:	2027883a 	mov	r19,r4
   166a4:	002f883a 	mov	r23,zero
   166a8:	05800044 	movi	r22,1
   166ac:	04bfffc4 	movi	r18,-1
   166b0:	a4400117 	ldw	r17,4(r20)
   166b4:	a4000217 	ldw	r16,8(r20)
   166b8:	8c7fffc4 	addi	r17,r17,-1
   166bc:	88000c16 	blt	r17,zero,166f0 <_fwalk_reent+0x84>
   166c0:	84000304 	addi	r16,r16,12
   166c4:	8080000b 	ldhu	r2,0(r16)
   166c8:	8c7fffc4 	addi	r17,r17,-1
   166cc:	817ffd04 	addi	r5,r16,-12
   166d0:	b080052e 	bgeu	r22,r2,166e8 <_fwalk_reent+0x7c>
   166d4:	8080008f 	ldh	r2,2(r16)
   166d8:	9809883a 	mov	r4,r19
   166dc:	14800226 	beq	r2,r18,166e8 <_fwalk_reent+0x7c>
   166e0:	a83ee83a 	callr	r21
   166e4:	b8aeb03a 	or	r23,r23,r2
   166e8:	84001a04 	addi	r16,r16,104
   166ec:	8cbff51e 	bne	r17,r18,166c4 <__alt_data_end+0xfc0166c4>
   166f0:	a5000017 	ldw	r20,0(r20)
   166f4:	a03fee1e 	bne	r20,zero,166b0 <__alt_data_end+0xfc0166b0>
   166f8:	b805883a 	mov	r2,r23
   166fc:	dfc00817 	ldw	ra,32(sp)
   16700:	ddc00717 	ldw	r23,28(sp)
   16704:	dd800617 	ldw	r22,24(sp)
   16708:	dd400517 	ldw	r21,20(sp)
   1670c:	dd000417 	ldw	r20,16(sp)
   16710:	dcc00317 	ldw	r19,12(sp)
   16714:	dc800217 	ldw	r18,8(sp)
   16718:	dc400117 	ldw	r17,4(sp)
   1671c:	dc000017 	ldw	r16,0(sp)
   16720:	dec00904 	addi	sp,sp,36
   16724:	f800283a 	ret
   16728:	002f883a 	mov	r23,zero
   1672c:	003ff206 	br	166f8 <__alt_data_end+0xfc0166f8>

00016730 <_setlocale_r>:
   16730:	30001b26 	beq	r6,zero,167a0 <_setlocale_r+0x70>
   16734:	014000f4 	movhi	r5,3
   16738:	defffe04 	addi	sp,sp,-8
   1673c:	296aab04 	addi	r5,r5,-21844
   16740:	3009883a 	mov	r4,r6
   16744:	dc000015 	stw	r16,0(sp)
   16748:	dfc00115 	stw	ra,4(sp)
   1674c:	3021883a 	mov	r16,r6
   16750:	000f4640 	call	f464 <strcmp>
   16754:	1000061e 	bne	r2,zero,16770 <_setlocale_r+0x40>
   16758:	008000f4 	movhi	r2,3
   1675c:	10aa8404 	addi	r2,r2,-22000
   16760:	dfc00117 	ldw	ra,4(sp)
   16764:	dc000017 	ldw	r16,0(sp)
   16768:	dec00204 	addi	sp,sp,8
   1676c:	f800283a 	ret
   16770:	014000f4 	movhi	r5,3
   16774:	296a8404 	addi	r5,r5,-22000
   16778:	8009883a 	mov	r4,r16
   1677c:	000f4640 	call	f464 <strcmp>
   16780:	103ff526 	beq	r2,zero,16758 <__alt_data_end+0xfc016758>
   16784:	014000f4 	movhi	r5,3
   16788:	296a8e04 	addi	r5,r5,-21960
   1678c:	8009883a 	mov	r4,r16
   16790:	000f4640 	call	f464 <strcmp>
   16794:	103ff026 	beq	r2,zero,16758 <__alt_data_end+0xfc016758>
   16798:	0005883a 	mov	r2,zero
   1679c:	003ff006 	br	16760 <__alt_data_end+0xfc016760>
   167a0:	008000f4 	movhi	r2,3
   167a4:	10aa8404 	addi	r2,r2,-22000
   167a8:	f800283a 	ret

000167ac <__locale_charset>:
   167ac:	008000f4 	movhi	r2,3
   167b0:	10ad3204 	addi	r2,r2,-19256
   167b4:	f800283a 	ret

000167b8 <__locale_mb_cur_max>:
   167b8:	008000f4 	movhi	r2,3
   167bc:	10b78a04 	addi	r2,r2,-8664
   167c0:	10800017 	ldw	r2,0(r2)
   167c4:	f800283a 	ret

000167c8 <__locale_msgcharset>:
   167c8:	008000f4 	movhi	r2,3
   167cc:	10ad2a04 	addi	r2,r2,-19288
   167d0:	f800283a 	ret

000167d4 <__locale_cjk_lang>:
   167d4:	0005883a 	mov	r2,zero
   167d8:	f800283a 	ret

000167dc <_localeconv_r>:
   167dc:	008000f4 	movhi	r2,3
   167e0:	10ad3a04 	addi	r2,r2,-19224
   167e4:	f800283a 	ret

000167e8 <setlocale>:
   167e8:	008000f4 	movhi	r2,3
   167ec:	10b78704 	addi	r2,r2,-8676
   167f0:	280d883a 	mov	r6,r5
   167f4:	200b883a 	mov	r5,r4
   167f8:	11000017 	ldw	r4,0(r2)
   167fc:	00167301 	jmpi	16730 <_setlocale_r>

00016800 <localeconv>:
   16800:	008000f4 	movhi	r2,3
   16804:	10ad3a04 	addi	r2,r2,-19224
   16808:	f800283a 	ret

0001680c <__smakebuf_r>:
   1680c:	2880030b 	ldhu	r2,12(r5)
   16810:	10c0008c 	andi	r3,r2,2
   16814:	1800411e 	bne	r3,zero,1691c <__smakebuf_r+0x110>
   16818:	deffec04 	addi	sp,sp,-80
   1681c:	dc000f15 	stw	r16,60(sp)
   16820:	2821883a 	mov	r16,r5
   16824:	2940038f 	ldh	r5,14(r5)
   16828:	dc401015 	stw	r17,64(sp)
   1682c:	dfc01315 	stw	ra,76(sp)
   16830:	dcc01215 	stw	r19,72(sp)
   16834:	dc801115 	stw	r18,68(sp)
   16838:	2023883a 	mov	r17,r4
   1683c:	28001c16 	blt	r5,zero,168b0 <__smakebuf_r+0xa4>
   16840:	d80d883a 	mov	r6,sp
   16844:	001b7980 	call	1b798 <_fstat_r>
   16848:	10001816 	blt	r2,zero,168ac <__smakebuf_r+0xa0>
   1684c:	d8800117 	ldw	r2,4(sp)
   16850:	00e00014 	movui	r3,32768
   16854:	10bc000c 	andi	r2,r2,61440
   16858:	14c80020 	cmpeqi	r19,r2,8192
   1685c:	10c03726 	beq	r2,r3,1693c <__smakebuf_r+0x130>
   16860:	80c0030b 	ldhu	r3,12(r16)
   16864:	18c20014 	ori	r3,r3,2048
   16868:	80c0030d 	sth	r3,12(r16)
   1686c:	00c80004 	movi	r3,8192
   16870:	10c0521e 	bne	r2,r3,169bc <__smakebuf_r+0x1b0>
   16874:	8140038f 	ldh	r5,14(r16)
   16878:	8809883a 	mov	r4,r17
   1687c:	001b7f40 	call	1b7f4 <_isatty_r>
   16880:	10004c26 	beq	r2,zero,169b4 <__smakebuf_r+0x1a8>
   16884:	8080030b 	ldhu	r2,12(r16)
   16888:	80c010c4 	addi	r3,r16,67
   1688c:	80c00015 	stw	r3,0(r16)
   16890:	10800054 	ori	r2,r2,1
   16894:	8080030d 	sth	r2,12(r16)
   16898:	00800044 	movi	r2,1
   1689c:	80c00415 	stw	r3,16(r16)
   168a0:	80800515 	stw	r2,20(r16)
   168a4:	04810004 	movi	r18,1024
   168a8:	00000706 	br	168c8 <__smakebuf_r+0xbc>
   168ac:	8080030b 	ldhu	r2,12(r16)
   168b0:	10c0200c 	andi	r3,r2,128
   168b4:	18001f1e 	bne	r3,zero,16934 <__smakebuf_r+0x128>
   168b8:	04810004 	movi	r18,1024
   168bc:	10820014 	ori	r2,r2,2048
   168c0:	8080030d 	sth	r2,12(r16)
   168c4:	0027883a 	mov	r19,zero
   168c8:	900b883a 	mov	r5,r18
   168cc:	8809883a 	mov	r4,r17
   168d0:	000e46c0 	call	e46c <_malloc_r>
   168d4:	10002c26 	beq	r2,zero,16988 <__smakebuf_r+0x17c>
   168d8:	80c0030b 	ldhu	r3,12(r16)
   168dc:	01000074 	movhi	r4,1
   168e0:	21164104 	addi	r4,r4,22788
   168e4:	89000f15 	stw	r4,60(r17)
   168e8:	18c02014 	ori	r3,r3,128
   168ec:	80c0030d 	sth	r3,12(r16)
   168f0:	80800015 	stw	r2,0(r16)
   168f4:	80800415 	stw	r2,16(r16)
   168f8:	84800515 	stw	r18,20(r16)
   168fc:	98001a1e 	bne	r19,zero,16968 <__smakebuf_r+0x15c>
   16900:	dfc01317 	ldw	ra,76(sp)
   16904:	dcc01217 	ldw	r19,72(sp)
   16908:	dc801117 	ldw	r18,68(sp)
   1690c:	dc401017 	ldw	r17,64(sp)
   16910:	dc000f17 	ldw	r16,60(sp)
   16914:	dec01404 	addi	sp,sp,80
   16918:	f800283a 	ret
   1691c:	288010c4 	addi	r2,r5,67
   16920:	28800015 	stw	r2,0(r5)
   16924:	28800415 	stw	r2,16(r5)
   16928:	00800044 	movi	r2,1
   1692c:	28800515 	stw	r2,20(r5)
   16930:	f800283a 	ret
   16934:	04801004 	movi	r18,64
   16938:	003fe006 	br	168bc <__alt_data_end+0xfc0168bc>
   1693c:	81000a17 	ldw	r4,40(r16)
   16940:	00c000b4 	movhi	r3,2
   16944:	18e13604 	addi	r3,r3,-31528
   16948:	20ffc51e 	bne	r4,r3,16860 <__alt_data_end+0xfc016860>
   1694c:	8080030b 	ldhu	r2,12(r16)
   16950:	04810004 	movi	r18,1024
   16954:	84801315 	stw	r18,76(r16)
   16958:	1484b03a 	or	r2,r2,r18
   1695c:	8080030d 	sth	r2,12(r16)
   16960:	0027883a 	mov	r19,zero
   16964:	003fd806 	br	168c8 <__alt_data_end+0xfc0168c8>
   16968:	8140038f 	ldh	r5,14(r16)
   1696c:	8809883a 	mov	r4,r17
   16970:	001b7f40 	call	1b7f4 <_isatty_r>
   16974:	103fe226 	beq	r2,zero,16900 <__alt_data_end+0xfc016900>
   16978:	8080030b 	ldhu	r2,12(r16)
   1697c:	10800054 	ori	r2,r2,1
   16980:	8080030d 	sth	r2,12(r16)
   16984:	003fde06 	br	16900 <__alt_data_end+0xfc016900>
   16988:	8080030b 	ldhu	r2,12(r16)
   1698c:	10c0800c 	andi	r3,r2,512
   16990:	183fdb1e 	bne	r3,zero,16900 <__alt_data_end+0xfc016900>
   16994:	10800094 	ori	r2,r2,2
   16998:	80c010c4 	addi	r3,r16,67
   1699c:	8080030d 	sth	r2,12(r16)
   169a0:	00800044 	movi	r2,1
   169a4:	80c00015 	stw	r3,0(r16)
   169a8:	80c00415 	stw	r3,16(r16)
   169ac:	80800515 	stw	r2,20(r16)
   169b0:	003fd306 	br	16900 <__alt_data_end+0xfc016900>
   169b4:	04810004 	movi	r18,1024
   169b8:	003fc306 	br	168c8 <__alt_data_end+0xfc0168c8>
   169bc:	0027883a 	mov	r19,zero
   169c0:	04810004 	movi	r18,1024
   169c4:	003fc006 	br	168c8 <__alt_data_end+0xfc0168c8>

000169c8 <memchr>:
   169c8:	208000cc 	andi	r2,r4,3
   169cc:	280f883a 	mov	r7,r5
   169d0:	10003426 	beq	r2,zero,16aa4 <memchr+0xdc>
   169d4:	30bfffc4 	addi	r2,r6,-1
   169d8:	30001a26 	beq	r6,zero,16a44 <memchr+0x7c>
   169dc:	20c00003 	ldbu	r3,0(r4)
   169e0:	29803fcc 	andi	r6,r5,255
   169e4:	30c0051e 	bne	r6,r3,169fc <memchr+0x34>
   169e8:	00001806 	br	16a4c <memchr+0x84>
   169ec:	10001526 	beq	r2,zero,16a44 <memchr+0x7c>
   169f0:	20c00003 	ldbu	r3,0(r4)
   169f4:	10bfffc4 	addi	r2,r2,-1
   169f8:	30c01426 	beq	r6,r3,16a4c <memchr+0x84>
   169fc:	21000044 	addi	r4,r4,1
   16a00:	20c000cc 	andi	r3,r4,3
   16a04:	183ff91e 	bne	r3,zero,169ec <__alt_data_end+0xfc0169ec>
   16a08:	020000c4 	movi	r8,3
   16a0c:	40801136 	bltu	r8,r2,16a54 <memchr+0x8c>
   16a10:	10000c26 	beq	r2,zero,16a44 <memchr+0x7c>
   16a14:	20c00003 	ldbu	r3,0(r4)
   16a18:	29403fcc 	andi	r5,r5,255
   16a1c:	28c00b26 	beq	r5,r3,16a4c <memchr+0x84>
   16a20:	20c00044 	addi	r3,r4,1
   16a24:	39803fcc 	andi	r6,r7,255
   16a28:	2089883a 	add	r4,r4,r2
   16a2c:	00000306 	br	16a3c <memchr+0x74>
   16a30:	18c00044 	addi	r3,r3,1
   16a34:	197fffc3 	ldbu	r5,-1(r3)
   16a38:	31400526 	beq	r6,r5,16a50 <memchr+0x88>
   16a3c:	1805883a 	mov	r2,r3
   16a40:	20fffb1e 	bne	r4,r3,16a30 <__alt_data_end+0xfc016a30>
   16a44:	0005883a 	mov	r2,zero
   16a48:	f800283a 	ret
   16a4c:	2005883a 	mov	r2,r4
   16a50:	f800283a 	ret
   16a54:	28c03fcc 	andi	r3,r5,255
   16a58:	1812923a 	slli	r9,r3,8
   16a5c:	02ffbff4 	movhi	r11,65279
   16a60:	02a02074 	movhi	r10,32897
   16a64:	48d2b03a 	or	r9,r9,r3
   16a68:	4806943a 	slli	r3,r9,16
   16a6c:	5affbfc4 	addi	r11,r11,-257
   16a70:	52a02004 	addi	r10,r10,-32640
   16a74:	48d2b03a 	or	r9,r9,r3
   16a78:	20c00017 	ldw	r3,0(r4)
   16a7c:	48c6f03a 	xor	r3,r9,r3
   16a80:	1acd883a 	add	r6,r3,r11
   16a84:	00c6303a 	nor	r3,zero,r3
   16a88:	30c6703a 	and	r3,r6,r3
   16a8c:	1a86703a 	and	r3,r3,r10
   16a90:	183fe01e 	bne	r3,zero,16a14 <__alt_data_end+0xfc016a14>
   16a94:	10bfff04 	addi	r2,r2,-4
   16a98:	21000104 	addi	r4,r4,4
   16a9c:	40bff636 	bltu	r8,r2,16a78 <__alt_data_end+0xfc016a78>
   16aa0:	003fdb06 	br	16a10 <__alt_data_end+0xfc016a10>
   16aa4:	3005883a 	mov	r2,r6
   16aa8:	003fd706 	br	16a08 <__alt_data_end+0xfc016a08>

00016aac <memmove>:
   16aac:	2005883a 	mov	r2,r4
   16ab0:	29000b2e 	bgeu	r5,r4,16ae0 <memmove+0x34>
   16ab4:	298f883a 	add	r7,r5,r6
   16ab8:	21c0092e 	bgeu	r4,r7,16ae0 <memmove+0x34>
   16abc:	2187883a 	add	r3,r4,r6
   16ac0:	198bc83a 	sub	r5,r3,r6
   16ac4:	30004826 	beq	r6,zero,16be8 <memmove+0x13c>
   16ac8:	39ffffc4 	addi	r7,r7,-1
   16acc:	39000003 	ldbu	r4,0(r7)
   16ad0:	18ffffc4 	addi	r3,r3,-1
   16ad4:	19000005 	stb	r4,0(r3)
   16ad8:	28fffb1e 	bne	r5,r3,16ac8 <__alt_data_end+0xfc016ac8>
   16adc:	f800283a 	ret
   16ae0:	00c003c4 	movi	r3,15
   16ae4:	1980412e 	bgeu	r3,r6,16bec <memmove+0x140>
   16ae8:	2886b03a 	or	r3,r5,r2
   16aec:	18c000cc 	andi	r3,r3,3
   16af0:	1800401e 	bne	r3,zero,16bf4 <memmove+0x148>
   16af4:	33fffc04 	addi	r15,r6,-16
   16af8:	781ed13a 	srli	r15,r15,4
   16afc:	28c00104 	addi	r3,r5,4
   16b00:	13400104 	addi	r13,r2,4
   16b04:	781c913a 	slli	r14,r15,4
   16b08:	2b000204 	addi	r12,r5,8
   16b0c:	12c00204 	addi	r11,r2,8
   16b10:	73800504 	addi	r14,r14,20
   16b14:	2a800304 	addi	r10,r5,12
   16b18:	12400304 	addi	r9,r2,12
   16b1c:	2b9d883a 	add	r14,r5,r14
   16b20:	2811883a 	mov	r8,r5
   16b24:	100f883a 	mov	r7,r2
   16b28:	41000017 	ldw	r4,0(r8)
   16b2c:	39c00404 	addi	r7,r7,16
   16b30:	18c00404 	addi	r3,r3,16
   16b34:	393ffc15 	stw	r4,-16(r7)
   16b38:	193ffc17 	ldw	r4,-16(r3)
   16b3c:	6b400404 	addi	r13,r13,16
   16b40:	5ac00404 	addi	r11,r11,16
   16b44:	693ffc15 	stw	r4,-16(r13)
   16b48:	61000017 	ldw	r4,0(r12)
   16b4c:	4a400404 	addi	r9,r9,16
   16b50:	42000404 	addi	r8,r8,16
   16b54:	593ffc15 	stw	r4,-16(r11)
   16b58:	51000017 	ldw	r4,0(r10)
   16b5c:	63000404 	addi	r12,r12,16
   16b60:	52800404 	addi	r10,r10,16
   16b64:	493ffc15 	stw	r4,-16(r9)
   16b68:	1bbfef1e 	bne	r3,r14,16b28 <__alt_data_end+0xfc016b28>
   16b6c:	79000044 	addi	r4,r15,1
   16b70:	2008913a 	slli	r4,r4,4
   16b74:	328003cc 	andi	r10,r6,15
   16b78:	02c000c4 	movi	r11,3
   16b7c:	1107883a 	add	r3,r2,r4
   16b80:	290b883a 	add	r5,r5,r4
   16b84:	5a801e2e 	bgeu	r11,r10,16c00 <memmove+0x154>
   16b88:	1813883a 	mov	r9,r3
   16b8c:	2811883a 	mov	r8,r5
   16b90:	500f883a 	mov	r7,r10
   16b94:	41000017 	ldw	r4,0(r8)
   16b98:	4a400104 	addi	r9,r9,4
   16b9c:	39ffff04 	addi	r7,r7,-4
   16ba0:	493fff15 	stw	r4,-4(r9)
   16ba4:	42000104 	addi	r8,r8,4
   16ba8:	59fffa36 	bltu	r11,r7,16b94 <__alt_data_end+0xfc016b94>
   16bac:	513fff04 	addi	r4,r10,-4
   16bb0:	2008d0ba 	srli	r4,r4,2
   16bb4:	318000cc 	andi	r6,r6,3
   16bb8:	21000044 	addi	r4,r4,1
   16bbc:	2109883a 	add	r4,r4,r4
   16bc0:	2109883a 	add	r4,r4,r4
   16bc4:	1907883a 	add	r3,r3,r4
   16bc8:	290b883a 	add	r5,r5,r4
   16bcc:	30000b26 	beq	r6,zero,16bfc <memmove+0x150>
   16bd0:	198d883a 	add	r6,r3,r6
   16bd4:	29c00003 	ldbu	r7,0(r5)
   16bd8:	18c00044 	addi	r3,r3,1
   16bdc:	29400044 	addi	r5,r5,1
   16be0:	19ffffc5 	stb	r7,-1(r3)
   16be4:	19bffb1e 	bne	r3,r6,16bd4 <__alt_data_end+0xfc016bd4>
   16be8:	f800283a 	ret
   16bec:	1007883a 	mov	r3,r2
   16bf0:	003ff606 	br	16bcc <__alt_data_end+0xfc016bcc>
   16bf4:	1007883a 	mov	r3,r2
   16bf8:	003ff506 	br	16bd0 <__alt_data_end+0xfc016bd0>
   16bfc:	f800283a 	ret
   16c00:	500d883a 	mov	r6,r10
   16c04:	003ff106 	br	16bcc <__alt_data_end+0xfc016bcc>

00016c08 <_Balloc>:
   16c08:	20801317 	ldw	r2,76(r4)
   16c0c:	defffc04 	addi	sp,sp,-16
   16c10:	dc400115 	stw	r17,4(sp)
   16c14:	dc000015 	stw	r16,0(sp)
   16c18:	dfc00315 	stw	ra,12(sp)
   16c1c:	dc800215 	stw	r18,8(sp)
   16c20:	2023883a 	mov	r17,r4
   16c24:	2821883a 	mov	r16,r5
   16c28:	10000f26 	beq	r2,zero,16c68 <_Balloc+0x60>
   16c2c:	8407883a 	add	r3,r16,r16
   16c30:	18c7883a 	add	r3,r3,r3
   16c34:	10c7883a 	add	r3,r2,r3
   16c38:	18800017 	ldw	r2,0(r3)
   16c3c:	10001126 	beq	r2,zero,16c84 <_Balloc+0x7c>
   16c40:	11000017 	ldw	r4,0(r2)
   16c44:	19000015 	stw	r4,0(r3)
   16c48:	10000415 	stw	zero,16(r2)
   16c4c:	10000315 	stw	zero,12(r2)
   16c50:	dfc00317 	ldw	ra,12(sp)
   16c54:	dc800217 	ldw	r18,8(sp)
   16c58:	dc400117 	ldw	r17,4(sp)
   16c5c:	dc000017 	ldw	r16,0(sp)
   16c60:	dec00404 	addi	sp,sp,16
   16c64:	f800283a 	ret
   16c68:	01800844 	movi	r6,33
   16c6c:	01400104 	movi	r5,4
   16c70:	001b3b00 	call	1b3b0 <_calloc_r>
   16c74:	88801315 	stw	r2,76(r17)
   16c78:	103fec1e 	bne	r2,zero,16c2c <__alt_data_end+0xfc016c2c>
   16c7c:	0005883a 	mov	r2,zero
   16c80:	003ff306 	br	16c50 <__alt_data_end+0xfc016c50>
   16c84:	01400044 	movi	r5,1
   16c88:	2c24983a 	sll	r18,r5,r16
   16c8c:	8809883a 	mov	r4,r17
   16c90:	91800144 	addi	r6,r18,5
   16c94:	318d883a 	add	r6,r6,r6
   16c98:	318d883a 	add	r6,r6,r6
   16c9c:	001b3b00 	call	1b3b0 <_calloc_r>
   16ca0:	103ff626 	beq	r2,zero,16c7c <__alt_data_end+0xfc016c7c>
   16ca4:	14000115 	stw	r16,4(r2)
   16ca8:	14800215 	stw	r18,8(r2)
   16cac:	003fe606 	br	16c48 <__alt_data_end+0xfc016c48>

00016cb0 <_Bfree>:
   16cb0:	28000826 	beq	r5,zero,16cd4 <_Bfree+0x24>
   16cb4:	28c00117 	ldw	r3,4(r5)
   16cb8:	20801317 	ldw	r2,76(r4)
   16cbc:	18c7883a 	add	r3,r3,r3
   16cc0:	18c7883a 	add	r3,r3,r3
   16cc4:	10c5883a 	add	r2,r2,r3
   16cc8:	10c00017 	ldw	r3,0(r2)
   16ccc:	28c00015 	stw	r3,0(r5)
   16cd0:	11400015 	stw	r5,0(r2)
   16cd4:	f800283a 	ret

00016cd8 <__multadd>:
   16cd8:	defff704 	addi	sp,sp,-36
   16cdc:	dc800215 	stw	r18,8(sp)
   16ce0:	2c800417 	ldw	r18,16(r5)
   16ce4:	dd800615 	stw	r22,24(sp)
   16ce8:	dd400515 	stw	r21,20(sp)
   16cec:	dd000415 	stw	r20,16(sp)
   16cf0:	dcc00315 	stw	r19,12(sp)
   16cf4:	dc400115 	stw	r17,4(sp)
   16cf8:	dc000015 	stw	r16,0(sp)
   16cfc:	dfc00815 	stw	ra,32(sp)
   16d00:	ddc00715 	stw	r23,28(sp)
   16d04:	2827883a 	mov	r19,r5
   16d08:	2029883a 	mov	r20,r4
   16d0c:	3023883a 	mov	r17,r6
   16d10:	3821883a 	mov	r16,r7
   16d14:	2d400504 	addi	r21,r5,20
   16d18:	002d883a 	mov	r22,zero
   16d1c:	adc00017 	ldw	r23,0(r21)
   16d20:	880b883a 	mov	r5,r17
   16d24:	ad400104 	addi	r21,r21,4
   16d28:	b93fffcc 	andi	r4,r23,65535
   16d2c:	000cec40 	call	cec4 <__mulsi3>
   16d30:	b808d43a 	srli	r4,r23,16
   16d34:	880b883a 	mov	r5,r17
   16d38:	1421883a 	add	r16,r2,r16
   16d3c:	000cec40 	call	cec4 <__mulsi3>
   16d40:	800ed43a 	srli	r7,r16,16
   16d44:	80ffffcc 	andi	r3,r16,65535
   16d48:	b5800044 	addi	r22,r22,1
   16d4c:	11c5883a 	add	r2,r2,r7
   16d50:	100e943a 	slli	r7,r2,16
   16d54:	1020d43a 	srli	r16,r2,16
   16d58:	38c7883a 	add	r3,r7,r3
   16d5c:	a8ffff15 	stw	r3,-4(r21)
   16d60:	b4bfee16 	blt	r22,r18,16d1c <__alt_data_end+0xfc016d1c>
   16d64:	80000926 	beq	r16,zero,16d8c <__multadd+0xb4>
   16d68:	98800217 	ldw	r2,8(r19)
   16d6c:	9080130e 	bge	r18,r2,16dbc <__multadd+0xe4>
   16d70:	90800144 	addi	r2,r18,5
   16d74:	1085883a 	add	r2,r2,r2
   16d78:	1085883a 	add	r2,r2,r2
   16d7c:	9885883a 	add	r2,r19,r2
   16d80:	14000015 	stw	r16,0(r2)
   16d84:	94800044 	addi	r18,r18,1
   16d88:	9c800415 	stw	r18,16(r19)
   16d8c:	9805883a 	mov	r2,r19
   16d90:	dfc00817 	ldw	ra,32(sp)
   16d94:	ddc00717 	ldw	r23,28(sp)
   16d98:	dd800617 	ldw	r22,24(sp)
   16d9c:	dd400517 	ldw	r21,20(sp)
   16da0:	dd000417 	ldw	r20,16(sp)
   16da4:	dcc00317 	ldw	r19,12(sp)
   16da8:	dc800217 	ldw	r18,8(sp)
   16dac:	dc400117 	ldw	r17,4(sp)
   16db0:	dc000017 	ldw	r16,0(sp)
   16db4:	dec00904 	addi	sp,sp,36
   16db8:	f800283a 	ret
   16dbc:	99400117 	ldw	r5,4(r19)
   16dc0:	a009883a 	mov	r4,r20
   16dc4:	29400044 	addi	r5,r5,1
   16dc8:	0016c080 	call	16c08 <_Balloc>
   16dcc:	99800417 	ldw	r6,16(r19)
   16dd0:	99400304 	addi	r5,r19,12
   16dd4:	11000304 	addi	r4,r2,12
   16dd8:	31800084 	addi	r6,r6,2
   16ddc:	318d883a 	add	r6,r6,r6
   16de0:	318d883a 	add	r6,r6,r6
   16de4:	1023883a 	mov	r17,r2
   16de8:	000ec780 	call	ec78 <memcpy>
   16dec:	98000a26 	beq	r19,zero,16e18 <__multadd+0x140>
   16df0:	98c00117 	ldw	r3,4(r19)
   16df4:	a0801317 	ldw	r2,76(r20)
   16df8:	18c7883a 	add	r3,r3,r3
   16dfc:	18c7883a 	add	r3,r3,r3
   16e00:	10c5883a 	add	r2,r2,r3
   16e04:	10c00017 	ldw	r3,0(r2)
   16e08:	98c00015 	stw	r3,0(r19)
   16e0c:	14c00015 	stw	r19,0(r2)
   16e10:	8827883a 	mov	r19,r17
   16e14:	003fd606 	br	16d70 <__alt_data_end+0xfc016d70>
   16e18:	8827883a 	mov	r19,r17
   16e1c:	003fd406 	br	16d70 <__alt_data_end+0xfc016d70>

00016e20 <__s2b>:
   16e20:	defff904 	addi	sp,sp,-28
   16e24:	dc400115 	stw	r17,4(sp)
   16e28:	dc000015 	stw	r16,0(sp)
   16e2c:	2023883a 	mov	r17,r4
   16e30:	2821883a 	mov	r16,r5
   16e34:	39000204 	addi	r4,r7,8
   16e38:	01400244 	movi	r5,9
   16e3c:	dcc00315 	stw	r19,12(sp)
   16e40:	dc800215 	stw	r18,8(sp)
   16e44:	dfc00615 	stw	ra,24(sp)
   16e48:	dd400515 	stw	r21,20(sp)
   16e4c:	dd000415 	stw	r20,16(sp)
   16e50:	3825883a 	mov	r18,r7
   16e54:	3027883a 	mov	r19,r6
   16e58:	000cd100 	call	cd10 <__divsi3>
   16e5c:	00c00044 	movi	r3,1
   16e60:	000b883a 	mov	r5,zero
   16e64:	1880030e 	bge	r3,r2,16e74 <__s2b+0x54>
   16e68:	18c7883a 	add	r3,r3,r3
   16e6c:	29400044 	addi	r5,r5,1
   16e70:	18bffd16 	blt	r3,r2,16e68 <__alt_data_end+0xfc016e68>
   16e74:	8809883a 	mov	r4,r17
   16e78:	0016c080 	call	16c08 <_Balloc>
   16e7c:	d8c00717 	ldw	r3,28(sp)
   16e80:	10c00515 	stw	r3,20(r2)
   16e84:	00c00044 	movi	r3,1
   16e88:	10c00415 	stw	r3,16(r2)
   16e8c:	00c00244 	movi	r3,9
   16e90:	1cc0210e 	bge	r3,r19,16f18 <__s2b+0xf8>
   16e94:	80eb883a 	add	r21,r16,r3
   16e98:	a829883a 	mov	r20,r21
   16e9c:	84e1883a 	add	r16,r16,r19
   16ea0:	a1c00007 	ldb	r7,0(r20)
   16ea4:	01800284 	movi	r6,10
   16ea8:	a5000044 	addi	r20,r20,1
   16eac:	100b883a 	mov	r5,r2
   16eb0:	39fff404 	addi	r7,r7,-48
   16eb4:	8809883a 	mov	r4,r17
   16eb8:	0016cd80 	call	16cd8 <__multadd>
   16ebc:	a43ff81e 	bne	r20,r16,16ea0 <__alt_data_end+0xfc016ea0>
   16ec0:	ace1883a 	add	r16,r21,r19
   16ec4:	843ffe04 	addi	r16,r16,-8
   16ec8:	9c800a0e 	bge	r19,r18,16ef4 <__s2b+0xd4>
   16ecc:	94e5c83a 	sub	r18,r18,r19
   16ed0:	84a5883a 	add	r18,r16,r18
   16ed4:	81c00007 	ldb	r7,0(r16)
   16ed8:	01800284 	movi	r6,10
   16edc:	84000044 	addi	r16,r16,1
   16ee0:	100b883a 	mov	r5,r2
   16ee4:	39fff404 	addi	r7,r7,-48
   16ee8:	8809883a 	mov	r4,r17
   16eec:	0016cd80 	call	16cd8 <__multadd>
   16ef0:	84bff81e 	bne	r16,r18,16ed4 <__alt_data_end+0xfc016ed4>
   16ef4:	dfc00617 	ldw	ra,24(sp)
   16ef8:	dd400517 	ldw	r21,20(sp)
   16efc:	dd000417 	ldw	r20,16(sp)
   16f00:	dcc00317 	ldw	r19,12(sp)
   16f04:	dc800217 	ldw	r18,8(sp)
   16f08:	dc400117 	ldw	r17,4(sp)
   16f0c:	dc000017 	ldw	r16,0(sp)
   16f10:	dec00704 	addi	sp,sp,28
   16f14:	f800283a 	ret
   16f18:	84000284 	addi	r16,r16,10
   16f1c:	1827883a 	mov	r19,r3
   16f20:	003fe906 	br	16ec8 <__alt_data_end+0xfc016ec8>

00016f24 <__hi0bits>:
   16f24:	20bfffec 	andhi	r2,r4,65535
   16f28:	1000141e 	bne	r2,zero,16f7c <__hi0bits+0x58>
   16f2c:	2008943a 	slli	r4,r4,16
   16f30:	00800404 	movi	r2,16
   16f34:	20ffc02c 	andhi	r3,r4,65280
   16f38:	1800021e 	bne	r3,zero,16f44 <__hi0bits+0x20>
   16f3c:	2008923a 	slli	r4,r4,8
   16f40:	10800204 	addi	r2,r2,8
   16f44:	20fc002c 	andhi	r3,r4,61440
   16f48:	1800021e 	bne	r3,zero,16f54 <__hi0bits+0x30>
   16f4c:	2008913a 	slli	r4,r4,4
   16f50:	10800104 	addi	r2,r2,4
   16f54:	20f0002c 	andhi	r3,r4,49152
   16f58:	1800031e 	bne	r3,zero,16f68 <__hi0bits+0x44>
   16f5c:	2109883a 	add	r4,r4,r4
   16f60:	10800084 	addi	r2,r2,2
   16f64:	2109883a 	add	r4,r4,r4
   16f68:	20000316 	blt	r4,zero,16f78 <__hi0bits+0x54>
   16f6c:	2110002c 	andhi	r4,r4,16384
   16f70:	2000041e 	bne	r4,zero,16f84 <__hi0bits+0x60>
   16f74:	00800804 	movi	r2,32
   16f78:	f800283a 	ret
   16f7c:	0005883a 	mov	r2,zero
   16f80:	003fec06 	br	16f34 <__alt_data_end+0xfc016f34>
   16f84:	10800044 	addi	r2,r2,1
   16f88:	f800283a 	ret

00016f8c <__lo0bits>:
   16f8c:	20c00017 	ldw	r3,0(r4)
   16f90:	188001cc 	andi	r2,r3,7
   16f94:	10000826 	beq	r2,zero,16fb8 <__lo0bits+0x2c>
   16f98:	1880004c 	andi	r2,r3,1
   16f9c:	1000211e 	bne	r2,zero,17024 <__lo0bits+0x98>
   16fa0:	1880008c 	andi	r2,r3,2
   16fa4:	1000211e 	bne	r2,zero,1702c <__lo0bits+0xa0>
   16fa8:	1806d0ba 	srli	r3,r3,2
   16fac:	00800084 	movi	r2,2
   16fb0:	20c00015 	stw	r3,0(r4)
   16fb4:	f800283a 	ret
   16fb8:	18bfffcc 	andi	r2,r3,65535
   16fbc:	10001326 	beq	r2,zero,1700c <__lo0bits+0x80>
   16fc0:	0005883a 	mov	r2,zero
   16fc4:	19403fcc 	andi	r5,r3,255
   16fc8:	2800021e 	bne	r5,zero,16fd4 <__lo0bits+0x48>
   16fcc:	1806d23a 	srli	r3,r3,8
   16fd0:	10800204 	addi	r2,r2,8
   16fd4:	194003cc 	andi	r5,r3,15
   16fd8:	2800021e 	bne	r5,zero,16fe4 <__lo0bits+0x58>
   16fdc:	1806d13a 	srli	r3,r3,4
   16fe0:	10800104 	addi	r2,r2,4
   16fe4:	194000cc 	andi	r5,r3,3
   16fe8:	2800021e 	bne	r5,zero,16ff4 <__lo0bits+0x68>
   16fec:	1806d0ba 	srli	r3,r3,2
   16ff0:	10800084 	addi	r2,r2,2
   16ff4:	1940004c 	andi	r5,r3,1
   16ff8:	2800081e 	bne	r5,zero,1701c <__lo0bits+0x90>
   16ffc:	1806d07a 	srli	r3,r3,1
   17000:	1800051e 	bne	r3,zero,17018 <__lo0bits+0x8c>
   17004:	00800804 	movi	r2,32
   17008:	f800283a 	ret
   1700c:	1806d43a 	srli	r3,r3,16
   17010:	00800404 	movi	r2,16
   17014:	003feb06 	br	16fc4 <__alt_data_end+0xfc016fc4>
   17018:	10800044 	addi	r2,r2,1
   1701c:	20c00015 	stw	r3,0(r4)
   17020:	f800283a 	ret
   17024:	0005883a 	mov	r2,zero
   17028:	f800283a 	ret
   1702c:	1806d07a 	srli	r3,r3,1
   17030:	00800044 	movi	r2,1
   17034:	20c00015 	stw	r3,0(r4)
   17038:	f800283a 	ret

0001703c <__i2b>:
   1703c:	defffd04 	addi	sp,sp,-12
   17040:	dc000015 	stw	r16,0(sp)
   17044:	04000044 	movi	r16,1
   17048:	dc400115 	stw	r17,4(sp)
   1704c:	2823883a 	mov	r17,r5
   17050:	800b883a 	mov	r5,r16
   17054:	dfc00215 	stw	ra,8(sp)
   17058:	0016c080 	call	16c08 <_Balloc>
   1705c:	14400515 	stw	r17,20(r2)
   17060:	14000415 	stw	r16,16(r2)
   17064:	dfc00217 	ldw	ra,8(sp)
   17068:	dc400117 	ldw	r17,4(sp)
   1706c:	dc000017 	ldw	r16,0(sp)
   17070:	dec00304 	addi	sp,sp,12
   17074:	f800283a 	ret

00017078 <__multiply>:
   17078:	deffef04 	addi	sp,sp,-68
   1707c:	dc400815 	stw	r17,32(sp)
   17080:	dc000715 	stw	r16,28(sp)
   17084:	34400417 	ldw	r17,16(r6)
   17088:	2c000417 	ldw	r16,16(r5)
   1708c:	dd800d15 	stw	r22,52(sp)
   17090:	dc800915 	stw	r18,36(sp)
   17094:	dfc01015 	stw	ra,64(sp)
   17098:	df000f15 	stw	fp,60(sp)
   1709c:	ddc00e15 	stw	r23,56(sp)
   170a0:	dd400c15 	stw	r21,48(sp)
   170a4:	dd000b15 	stw	r20,44(sp)
   170a8:	dcc00a15 	stw	r19,40(sp)
   170ac:	2825883a 	mov	r18,r5
   170b0:	302d883a 	mov	r22,r6
   170b4:	8440050e 	bge	r16,r17,170cc <__multiply+0x54>
   170b8:	8007883a 	mov	r3,r16
   170bc:	3025883a 	mov	r18,r6
   170c0:	8821883a 	mov	r16,r17
   170c4:	282d883a 	mov	r22,r5
   170c8:	1823883a 	mov	r17,r3
   170cc:	90800217 	ldw	r2,8(r18)
   170d0:	8447883a 	add	r3,r16,r17
   170d4:	d8c00215 	stw	r3,8(sp)
   170d8:	91400117 	ldw	r5,4(r18)
   170dc:	10c0010e 	bge	r2,r3,170e4 <__multiply+0x6c>
   170e0:	29400044 	addi	r5,r5,1
   170e4:	0016c080 	call	16c08 <_Balloc>
   170e8:	d8c00217 	ldw	r3,8(sp)
   170ec:	d8800615 	stw	r2,24(sp)
   170f0:	18eb883a 	add	r21,r3,r3
   170f4:	ad6b883a 	add	r21,r21,r21
   170f8:	10c00504 	addi	r3,r2,20
   170fc:	1d6b883a 	add	r21,r3,r21
   17100:	d8c00115 	stw	r3,4(sp)
   17104:	dd400315 	stw	r21,12(sp)
   17108:	1805883a 	mov	r2,r3
   1710c:	1d40042e 	bgeu	r3,r21,17120 <__multiply+0xa8>
   17110:	d8c00317 	ldw	r3,12(sp)
   17114:	10000015 	stw	zero,0(r2)
   17118:	10800104 	addi	r2,r2,4
   1711c:	10fffc36 	bltu	r2,r3,17110 <__alt_data_end+0xfc017110>
   17120:	8c63883a 	add	r17,r17,r17
   17124:	b5800504 	addi	r22,r22,20
   17128:	8c63883a 	add	r17,r17,r17
   1712c:	94800504 	addi	r18,r18,20
   17130:	8421883a 	add	r16,r16,r16
   17134:	b463883a 	add	r17,r22,r17
   17138:	8421883a 	add	r16,r16,r16
   1713c:	dd800015 	stw	r22,0(sp)
   17140:	dc800415 	stw	r18,16(sp)
   17144:	dc400515 	stw	r17,20(sp)
   17148:	9429883a 	add	r20,r18,r16
   1714c:	b4404f2e 	bgeu	r22,r17,1728c <__multiply+0x214>
   17150:	d8c00017 	ldw	r3,0(sp)
   17154:	1c800017 	ldw	r18,0(r3)
   17158:	947fffcc 	andi	r17,r18,65535
   1715c:	88001e26 	beq	r17,zero,171d8 <__multiply+0x160>
   17160:	dd800117 	ldw	r22,4(sp)
   17164:	dd400417 	ldw	r21,16(sp)
   17168:	0027883a 	mov	r19,zero
   1716c:	ac800017 	ldw	r18,0(r21)
   17170:	b4000017 	ldw	r16,0(r22)
   17174:	880b883a 	mov	r5,r17
   17178:	913fffcc 	andi	r4,r18,65535
   1717c:	000cec40 	call	cec4 <__mulsi3>
   17180:	9008d43a 	srli	r4,r18,16
   17184:	84bfffcc 	andi	r18,r16,65535
   17188:	1485883a 	add	r2,r2,r18
   1718c:	14e5883a 	add	r18,r2,r19
   17190:	8020d43a 	srli	r16,r16,16
   17194:	9026d43a 	srli	r19,r18,16
   17198:	880b883a 	mov	r5,r17
   1719c:	000cec40 	call	cec4 <__mulsi3>
   171a0:	1405883a 	add	r2,r2,r16
   171a4:	14e1883a 	add	r16,r2,r19
   171a8:	90ffffcc 	andi	r3,r18,65535
   171ac:	8024943a 	slli	r18,r16,16
   171b0:	ad400104 	addi	r21,r21,4
   171b4:	b005883a 	mov	r2,r22
   171b8:	90c6b03a 	or	r3,r18,r3
   171bc:	b0c00015 	stw	r3,0(r22)
   171c0:	8026d43a 	srli	r19,r16,16
   171c4:	b5800104 	addi	r22,r22,4
   171c8:	ad3fe836 	bltu	r21,r20,1716c <__alt_data_end+0xfc01716c>
   171cc:	d8c00017 	ldw	r3,0(sp)
   171d0:	14c00115 	stw	r19,4(r2)
   171d4:	1c800017 	ldw	r18,0(r3)
   171d8:	9024d43a 	srli	r18,r18,16
   171dc:	90002226 	beq	r18,zero,17268 <__multiply+0x1f0>
   171e0:	d8c00117 	ldw	r3,4(sp)
   171e4:	dd800417 	ldw	r22,16(sp)
   171e8:	002f883a 	mov	r23,zero
   171ec:	1f000017 	ldw	fp,0(r3)
   171f0:	1823883a 	mov	r17,r3
   171f4:	182b883a 	mov	r21,r3
   171f8:	e021883a 	mov	r16,fp
   171fc:	00000106 	br	17204 <__multiply+0x18c>
   17200:	982b883a 	mov	r21,r19
   17204:	b100000b 	ldhu	r4,0(r22)
   17208:	8020d43a 	srli	r16,r16,16
   1720c:	900b883a 	mov	r5,r18
   17210:	000cec40 	call	cec4 <__mulsi3>
   17214:	1405883a 	add	r2,r2,r16
   17218:	15ef883a 	add	r23,r2,r23
   1721c:	b804943a 	slli	r2,r23,16
   17220:	e0ffffcc 	andi	r3,fp,65535
   17224:	8c400104 	addi	r17,r17,4
   17228:	10c6b03a 	or	r3,r2,r3
   1722c:	88ffff15 	stw	r3,-4(r17)
   17230:	b5800104 	addi	r22,r22,4
   17234:	b13fff17 	ldw	r4,-4(r22)
   17238:	acc00104 	addi	r19,r21,4
   1723c:	900b883a 	mov	r5,r18
   17240:	2008d43a 	srli	r4,r4,16
   17244:	9c000017 	ldw	r16,0(r19)
   17248:	000cec40 	call	cec4 <__mulsi3>
   1724c:	b806d43a 	srli	r3,r23,16
   17250:	813fffcc 	andi	r4,r16,65535
   17254:	1105883a 	add	r2,r2,r4
   17258:	10f9883a 	add	fp,r2,r3
   1725c:	e02ed43a 	srli	r23,fp,16
   17260:	b53fe736 	bltu	r22,r20,17200 <__alt_data_end+0xfc017200>
   17264:	af000115 	stw	fp,4(r21)
   17268:	d8c00017 	ldw	r3,0(sp)
   1726c:	d9000517 	ldw	r4,20(sp)
   17270:	18c00104 	addi	r3,r3,4
   17274:	d8c00015 	stw	r3,0(sp)
   17278:	d8c00117 	ldw	r3,4(sp)
   1727c:	18c00104 	addi	r3,r3,4
   17280:	d8c00115 	stw	r3,4(sp)
   17284:	d8c00017 	ldw	r3,0(sp)
   17288:	193fb136 	bltu	r3,r4,17150 <__alt_data_end+0xfc017150>
   1728c:	d8c00217 	ldw	r3,8(sp)
   17290:	00c00c0e 	bge	zero,r3,172c4 <__multiply+0x24c>
   17294:	d8c00317 	ldw	r3,12(sp)
   17298:	18bfff17 	ldw	r2,-4(r3)
   1729c:	1d7fff04 	addi	r21,r3,-4
   172a0:	10000326 	beq	r2,zero,172b0 <__multiply+0x238>
   172a4:	00000706 	br	172c4 <__multiply+0x24c>
   172a8:	a8800017 	ldw	r2,0(r21)
   172ac:	1000051e 	bne	r2,zero,172c4 <__multiply+0x24c>
   172b0:	d8c00217 	ldw	r3,8(sp)
   172b4:	ad7fff04 	addi	r21,r21,-4
   172b8:	18ffffc4 	addi	r3,r3,-1
   172bc:	d8c00215 	stw	r3,8(sp)
   172c0:	183ff91e 	bne	r3,zero,172a8 <__alt_data_end+0xfc0172a8>
   172c4:	d8c00617 	ldw	r3,24(sp)
   172c8:	d9000217 	ldw	r4,8(sp)
   172cc:	1805883a 	mov	r2,r3
   172d0:	19000415 	stw	r4,16(r3)
   172d4:	dfc01017 	ldw	ra,64(sp)
   172d8:	df000f17 	ldw	fp,60(sp)
   172dc:	ddc00e17 	ldw	r23,56(sp)
   172e0:	dd800d17 	ldw	r22,52(sp)
   172e4:	dd400c17 	ldw	r21,48(sp)
   172e8:	dd000b17 	ldw	r20,44(sp)
   172ec:	dcc00a17 	ldw	r19,40(sp)
   172f0:	dc800917 	ldw	r18,36(sp)
   172f4:	dc400817 	ldw	r17,32(sp)
   172f8:	dc000717 	ldw	r16,28(sp)
   172fc:	dec01104 	addi	sp,sp,68
   17300:	f800283a 	ret

00017304 <__pow5mult>:
   17304:	defffa04 	addi	sp,sp,-24
   17308:	dcc00315 	stw	r19,12(sp)
   1730c:	dc000015 	stw	r16,0(sp)
   17310:	dfc00515 	stw	ra,20(sp)
   17314:	dd000415 	stw	r20,16(sp)
   17318:	dc800215 	stw	r18,8(sp)
   1731c:	dc400115 	stw	r17,4(sp)
   17320:	308000cc 	andi	r2,r6,3
   17324:	3021883a 	mov	r16,r6
   17328:	2027883a 	mov	r19,r4
   1732c:	10002f1e 	bne	r2,zero,173ec <__pow5mult+0xe8>
   17330:	2825883a 	mov	r18,r5
   17334:	8021d0ba 	srai	r16,r16,2
   17338:	80001a26 	beq	r16,zero,173a4 <__pow5mult+0xa0>
   1733c:	9c401217 	ldw	r17,72(r19)
   17340:	8800061e 	bne	r17,zero,1735c <__pow5mult+0x58>
   17344:	00003406 	br	17418 <__pow5mult+0x114>
   17348:	8021d07a 	srai	r16,r16,1
   1734c:	80001526 	beq	r16,zero,173a4 <__pow5mult+0xa0>
   17350:	88800017 	ldw	r2,0(r17)
   17354:	10001c26 	beq	r2,zero,173c8 <__pow5mult+0xc4>
   17358:	1023883a 	mov	r17,r2
   1735c:	8080004c 	andi	r2,r16,1
   17360:	103ff926 	beq	r2,zero,17348 <__alt_data_end+0xfc017348>
   17364:	880d883a 	mov	r6,r17
   17368:	900b883a 	mov	r5,r18
   1736c:	9809883a 	mov	r4,r19
   17370:	00170780 	call	17078 <__multiply>
   17374:	90001b26 	beq	r18,zero,173e4 <__pow5mult+0xe0>
   17378:	91000117 	ldw	r4,4(r18)
   1737c:	98c01317 	ldw	r3,76(r19)
   17380:	8021d07a 	srai	r16,r16,1
   17384:	2109883a 	add	r4,r4,r4
   17388:	2109883a 	add	r4,r4,r4
   1738c:	1907883a 	add	r3,r3,r4
   17390:	19000017 	ldw	r4,0(r3)
   17394:	91000015 	stw	r4,0(r18)
   17398:	1c800015 	stw	r18,0(r3)
   1739c:	1025883a 	mov	r18,r2
   173a0:	803feb1e 	bne	r16,zero,17350 <__alt_data_end+0xfc017350>
   173a4:	9005883a 	mov	r2,r18
   173a8:	dfc00517 	ldw	ra,20(sp)
   173ac:	dd000417 	ldw	r20,16(sp)
   173b0:	dcc00317 	ldw	r19,12(sp)
   173b4:	dc800217 	ldw	r18,8(sp)
   173b8:	dc400117 	ldw	r17,4(sp)
   173bc:	dc000017 	ldw	r16,0(sp)
   173c0:	dec00604 	addi	sp,sp,24
   173c4:	f800283a 	ret
   173c8:	880d883a 	mov	r6,r17
   173cc:	880b883a 	mov	r5,r17
   173d0:	9809883a 	mov	r4,r19
   173d4:	00170780 	call	17078 <__multiply>
   173d8:	88800015 	stw	r2,0(r17)
   173dc:	10000015 	stw	zero,0(r2)
   173e0:	003fdd06 	br	17358 <__alt_data_end+0xfc017358>
   173e4:	1025883a 	mov	r18,r2
   173e8:	003fd706 	br	17348 <__alt_data_end+0xfc017348>
   173ec:	10bfffc4 	addi	r2,r2,-1
   173f0:	1085883a 	add	r2,r2,r2
   173f4:	00c000f4 	movhi	r3,3
   173f8:	18eaae04 	addi	r3,r3,-21832
   173fc:	1085883a 	add	r2,r2,r2
   17400:	1885883a 	add	r2,r3,r2
   17404:	11800017 	ldw	r6,0(r2)
   17408:	000f883a 	mov	r7,zero
   1740c:	0016cd80 	call	16cd8 <__multadd>
   17410:	1025883a 	mov	r18,r2
   17414:	003fc706 	br	17334 <__alt_data_end+0xfc017334>
   17418:	05000044 	movi	r20,1
   1741c:	a00b883a 	mov	r5,r20
   17420:	9809883a 	mov	r4,r19
   17424:	0016c080 	call	16c08 <_Balloc>
   17428:	1023883a 	mov	r17,r2
   1742c:	00809c44 	movi	r2,625
   17430:	88800515 	stw	r2,20(r17)
   17434:	8d000415 	stw	r20,16(r17)
   17438:	9c401215 	stw	r17,72(r19)
   1743c:	88000015 	stw	zero,0(r17)
   17440:	003fc606 	br	1735c <__alt_data_end+0xfc01735c>

00017444 <__lshift>:
   17444:	defff904 	addi	sp,sp,-28
   17448:	dd400515 	stw	r21,20(sp)
   1744c:	dcc00315 	stw	r19,12(sp)
   17450:	302bd17a 	srai	r21,r6,5
   17454:	2cc00417 	ldw	r19,16(r5)
   17458:	28800217 	ldw	r2,8(r5)
   1745c:	dd000415 	stw	r20,16(sp)
   17460:	ace7883a 	add	r19,r21,r19
   17464:	dc800215 	stw	r18,8(sp)
   17468:	dc400115 	stw	r17,4(sp)
   1746c:	dc000015 	stw	r16,0(sp)
   17470:	dfc00615 	stw	ra,24(sp)
   17474:	9c000044 	addi	r16,r19,1
   17478:	2823883a 	mov	r17,r5
   1747c:	3029883a 	mov	r20,r6
   17480:	2025883a 	mov	r18,r4
   17484:	29400117 	ldw	r5,4(r5)
   17488:	1400030e 	bge	r2,r16,17498 <__lshift+0x54>
   1748c:	1085883a 	add	r2,r2,r2
   17490:	29400044 	addi	r5,r5,1
   17494:	143ffd16 	blt	r2,r16,1748c <__alt_data_end+0xfc01748c>
   17498:	9009883a 	mov	r4,r18
   1749c:	0016c080 	call	16c08 <_Balloc>
   174a0:	10c00504 	addi	r3,r2,20
   174a4:	0540070e 	bge	zero,r21,174c4 <__lshift+0x80>
   174a8:	ad6b883a 	add	r21,r21,r21
   174ac:	ad6b883a 	add	r21,r21,r21
   174b0:	1809883a 	mov	r4,r3
   174b4:	1d47883a 	add	r3,r3,r21
   174b8:	20000015 	stw	zero,0(r4)
   174bc:	21000104 	addi	r4,r4,4
   174c0:	193ffd1e 	bne	r3,r4,174b8 <__alt_data_end+0xfc0174b8>
   174c4:	8a000417 	ldw	r8,16(r17)
   174c8:	89000504 	addi	r4,r17,20
   174cc:	a18007cc 	andi	r6,r20,31
   174d0:	4211883a 	add	r8,r8,r8
   174d4:	4211883a 	add	r8,r8,r8
   174d8:	2211883a 	add	r8,r4,r8
   174dc:	30002326 	beq	r6,zero,1756c <__lshift+0x128>
   174e0:	02400804 	movi	r9,32
   174e4:	4993c83a 	sub	r9,r9,r6
   174e8:	000b883a 	mov	r5,zero
   174ec:	21c00017 	ldw	r7,0(r4)
   174f0:	1815883a 	mov	r10,r3
   174f4:	18c00104 	addi	r3,r3,4
   174f8:	398e983a 	sll	r7,r7,r6
   174fc:	21000104 	addi	r4,r4,4
   17500:	394ab03a 	or	r5,r7,r5
   17504:	197fff15 	stw	r5,-4(r3)
   17508:	217fff17 	ldw	r5,-4(r4)
   1750c:	2a4ad83a 	srl	r5,r5,r9
   17510:	223ff636 	bltu	r4,r8,174ec <__alt_data_end+0xfc0174ec>
   17514:	51400115 	stw	r5,4(r10)
   17518:	28001a1e 	bne	r5,zero,17584 <__lshift+0x140>
   1751c:	843fffc4 	addi	r16,r16,-1
   17520:	14000415 	stw	r16,16(r2)
   17524:	88000826 	beq	r17,zero,17548 <__lshift+0x104>
   17528:	89000117 	ldw	r4,4(r17)
   1752c:	90c01317 	ldw	r3,76(r18)
   17530:	2109883a 	add	r4,r4,r4
   17534:	2109883a 	add	r4,r4,r4
   17538:	1907883a 	add	r3,r3,r4
   1753c:	19000017 	ldw	r4,0(r3)
   17540:	89000015 	stw	r4,0(r17)
   17544:	1c400015 	stw	r17,0(r3)
   17548:	dfc00617 	ldw	ra,24(sp)
   1754c:	dd400517 	ldw	r21,20(sp)
   17550:	dd000417 	ldw	r20,16(sp)
   17554:	dcc00317 	ldw	r19,12(sp)
   17558:	dc800217 	ldw	r18,8(sp)
   1755c:	dc400117 	ldw	r17,4(sp)
   17560:	dc000017 	ldw	r16,0(sp)
   17564:	dec00704 	addi	sp,sp,28
   17568:	f800283a 	ret
   1756c:	21400017 	ldw	r5,0(r4)
   17570:	18c00104 	addi	r3,r3,4
   17574:	21000104 	addi	r4,r4,4
   17578:	197fff15 	stw	r5,-4(r3)
   1757c:	223ffb36 	bltu	r4,r8,1756c <__alt_data_end+0xfc01756c>
   17580:	003fe606 	br	1751c <__alt_data_end+0xfc01751c>
   17584:	9c000084 	addi	r16,r19,2
   17588:	003fe406 	br	1751c <__alt_data_end+0xfc01751c>

0001758c <__mcmp>:
   1758c:	20800417 	ldw	r2,16(r4)
   17590:	28c00417 	ldw	r3,16(r5)
   17594:	10c5c83a 	sub	r2,r2,r3
   17598:	1000111e 	bne	r2,zero,175e0 <__mcmp+0x54>
   1759c:	18c7883a 	add	r3,r3,r3
   175a0:	18c7883a 	add	r3,r3,r3
   175a4:	21000504 	addi	r4,r4,20
   175a8:	29400504 	addi	r5,r5,20
   175ac:	20c5883a 	add	r2,r4,r3
   175b0:	28cb883a 	add	r5,r5,r3
   175b4:	00000106 	br	175bc <__mcmp+0x30>
   175b8:	20800a2e 	bgeu	r4,r2,175e4 <__mcmp+0x58>
   175bc:	10bfff04 	addi	r2,r2,-4
   175c0:	297fff04 	addi	r5,r5,-4
   175c4:	11800017 	ldw	r6,0(r2)
   175c8:	28c00017 	ldw	r3,0(r5)
   175cc:	30fffa26 	beq	r6,r3,175b8 <__alt_data_end+0xfc0175b8>
   175d0:	30c00236 	bltu	r6,r3,175dc <__mcmp+0x50>
   175d4:	00800044 	movi	r2,1
   175d8:	f800283a 	ret
   175dc:	00bfffc4 	movi	r2,-1
   175e0:	f800283a 	ret
   175e4:	0005883a 	mov	r2,zero
   175e8:	f800283a 	ret

000175ec <__mdiff>:
   175ec:	28c00417 	ldw	r3,16(r5)
   175f0:	30800417 	ldw	r2,16(r6)
   175f4:	defffa04 	addi	sp,sp,-24
   175f8:	dcc00315 	stw	r19,12(sp)
   175fc:	dc800215 	stw	r18,8(sp)
   17600:	dfc00515 	stw	ra,20(sp)
   17604:	dd000415 	stw	r20,16(sp)
   17608:	dc400115 	stw	r17,4(sp)
   1760c:	dc000015 	stw	r16,0(sp)
   17610:	1887c83a 	sub	r3,r3,r2
   17614:	2825883a 	mov	r18,r5
   17618:	3027883a 	mov	r19,r6
   1761c:	1800141e 	bne	r3,zero,17670 <__mdiff+0x84>
   17620:	1085883a 	add	r2,r2,r2
   17624:	1085883a 	add	r2,r2,r2
   17628:	2a000504 	addi	r8,r5,20
   1762c:	34000504 	addi	r16,r6,20
   17630:	4087883a 	add	r3,r8,r2
   17634:	8085883a 	add	r2,r16,r2
   17638:	00000106 	br	17640 <__mdiff+0x54>
   1763c:	40c0592e 	bgeu	r8,r3,177a4 <__mdiff+0x1b8>
   17640:	18ffff04 	addi	r3,r3,-4
   17644:	10bfff04 	addi	r2,r2,-4
   17648:	19c00017 	ldw	r7,0(r3)
   1764c:	11400017 	ldw	r5,0(r2)
   17650:	397ffa26 	beq	r7,r5,1763c <__alt_data_end+0xfc01763c>
   17654:	3940592e 	bgeu	r7,r5,177bc <__mdiff+0x1d0>
   17658:	9005883a 	mov	r2,r18
   1765c:	4023883a 	mov	r17,r8
   17660:	9825883a 	mov	r18,r19
   17664:	05000044 	movi	r20,1
   17668:	1027883a 	mov	r19,r2
   1766c:	00000406 	br	17680 <__mdiff+0x94>
   17670:	18005616 	blt	r3,zero,177cc <__mdiff+0x1e0>
   17674:	34400504 	addi	r17,r6,20
   17678:	2c000504 	addi	r16,r5,20
   1767c:	0029883a 	mov	r20,zero
   17680:	91400117 	ldw	r5,4(r18)
   17684:	0016c080 	call	16c08 <_Balloc>
   17688:	92400417 	ldw	r9,16(r18)
   1768c:	9b000417 	ldw	r12,16(r19)
   17690:	12c00504 	addi	r11,r2,20
   17694:	4a51883a 	add	r8,r9,r9
   17698:	6319883a 	add	r12,r12,r12
   1769c:	4211883a 	add	r8,r8,r8
   176a0:	6319883a 	add	r12,r12,r12
   176a4:	15000315 	stw	r20,12(r2)
   176a8:	8211883a 	add	r8,r16,r8
   176ac:	8b19883a 	add	r12,r17,r12
   176b0:	0007883a 	mov	r3,zero
   176b4:	81400017 	ldw	r5,0(r16)
   176b8:	89c00017 	ldw	r7,0(r17)
   176bc:	59800104 	addi	r6,r11,4
   176c0:	293fffcc 	andi	r4,r5,65535
   176c4:	20c7883a 	add	r3,r4,r3
   176c8:	393fffcc 	andi	r4,r7,65535
   176cc:	1909c83a 	sub	r4,r3,r4
   176d0:	280ad43a 	srli	r5,r5,16
   176d4:	380ed43a 	srli	r7,r7,16
   176d8:	2007d43a 	srai	r3,r4,16
   176dc:	213fffcc 	andi	r4,r4,65535
   176e0:	29cbc83a 	sub	r5,r5,r7
   176e4:	28c7883a 	add	r3,r5,r3
   176e8:	180a943a 	slli	r5,r3,16
   176ec:	8c400104 	addi	r17,r17,4
   176f0:	84000104 	addi	r16,r16,4
   176f4:	2908b03a 	or	r4,r5,r4
   176f8:	59000015 	stw	r4,0(r11)
   176fc:	1807d43a 	srai	r3,r3,16
   17700:	3015883a 	mov	r10,r6
   17704:	3017883a 	mov	r11,r6
   17708:	8b3fea36 	bltu	r17,r12,176b4 <__alt_data_end+0xfc0176b4>
   1770c:	8200162e 	bgeu	r16,r8,17768 <__mdiff+0x17c>
   17710:	8017883a 	mov	r11,r16
   17714:	59400017 	ldw	r5,0(r11)
   17718:	31800104 	addi	r6,r6,4
   1771c:	5ac00104 	addi	r11,r11,4
   17720:	293fffcc 	andi	r4,r5,65535
   17724:	20c7883a 	add	r3,r4,r3
   17728:	280ed43a 	srli	r7,r5,16
   1772c:	180bd43a 	srai	r5,r3,16
   17730:	193fffcc 	andi	r4,r3,65535
   17734:	3947883a 	add	r3,r7,r5
   17738:	180a943a 	slli	r5,r3,16
   1773c:	1807d43a 	srai	r3,r3,16
   17740:	2908b03a 	or	r4,r5,r4
   17744:	313fff15 	stw	r4,-4(r6)
   17748:	5a3ff236 	bltu	r11,r8,17714 <__alt_data_end+0xfc017714>
   1774c:	0406303a 	nor	r3,zero,r16
   17750:	1a07883a 	add	r3,r3,r8
   17754:	1806d0ba 	srli	r3,r3,2
   17758:	18c00044 	addi	r3,r3,1
   1775c:	18c7883a 	add	r3,r3,r3
   17760:	18c7883a 	add	r3,r3,r3
   17764:	50d5883a 	add	r10,r10,r3
   17768:	50ffff04 	addi	r3,r10,-4
   1776c:	2000041e 	bne	r4,zero,17780 <__mdiff+0x194>
   17770:	18ffff04 	addi	r3,r3,-4
   17774:	19000017 	ldw	r4,0(r3)
   17778:	4a7fffc4 	addi	r9,r9,-1
   1777c:	203ffc26 	beq	r4,zero,17770 <__alt_data_end+0xfc017770>
   17780:	12400415 	stw	r9,16(r2)
   17784:	dfc00517 	ldw	ra,20(sp)
   17788:	dd000417 	ldw	r20,16(sp)
   1778c:	dcc00317 	ldw	r19,12(sp)
   17790:	dc800217 	ldw	r18,8(sp)
   17794:	dc400117 	ldw	r17,4(sp)
   17798:	dc000017 	ldw	r16,0(sp)
   1779c:	dec00604 	addi	sp,sp,24
   177a0:	f800283a 	ret
   177a4:	000b883a 	mov	r5,zero
   177a8:	0016c080 	call	16c08 <_Balloc>
   177ac:	00c00044 	movi	r3,1
   177b0:	10c00415 	stw	r3,16(r2)
   177b4:	10000515 	stw	zero,20(r2)
   177b8:	003ff206 	br	17784 <__alt_data_end+0xfc017784>
   177bc:	8023883a 	mov	r17,r16
   177c0:	0029883a 	mov	r20,zero
   177c4:	4021883a 	mov	r16,r8
   177c8:	003fad06 	br	17680 <__alt_data_end+0xfc017680>
   177cc:	9005883a 	mov	r2,r18
   177d0:	94400504 	addi	r17,r18,20
   177d4:	9c000504 	addi	r16,r19,20
   177d8:	9825883a 	mov	r18,r19
   177dc:	05000044 	movi	r20,1
   177e0:	1027883a 	mov	r19,r2
   177e4:	003fa606 	br	17680 <__alt_data_end+0xfc017680>

000177e8 <__ulp>:
   177e8:	295ffc2c 	andhi	r5,r5,32752
   177ec:	00bf3034 	movhi	r2,64704
   177f0:	2887883a 	add	r3,r5,r2
   177f4:	00c0020e 	bge	zero,r3,17800 <__ulp+0x18>
   177f8:	0005883a 	mov	r2,zero
   177fc:	f800283a 	ret
   17800:	00c7c83a 	sub	r3,zero,r3
   17804:	1807d53a 	srai	r3,r3,20
   17808:	008004c4 	movi	r2,19
   1780c:	10c00b0e 	bge	r2,r3,1783c <__ulp+0x54>
   17810:	18bffb04 	addi	r2,r3,-20
   17814:	01000784 	movi	r4,30
   17818:	0007883a 	mov	r3,zero
   1781c:	20800516 	blt	r4,r2,17834 <__ulp+0x4c>
   17820:	010007c4 	movi	r4,31
   17824:	2089c83a 	sub	r4,r4,r2
   17828:	00800044 	movi	r2,1
   1782c:	1104983a 	sll	r2,r2,r4
   17830:	f800283a 	ret
   17834:	00800044 	movi	r2,1
   17838:	f800283a 	ret
   1783c:	01400234 	movhi	r5,8
   17840:	28c7d83a 	sra	r3,r5,r3
   17844:	0005883a 	mov	r2,zero
   17848:	f800283a 	ret

0001784c <__b2d>:
   1784c:	defffa04 	addi	sp,sp,-24
   17850:	dc000015 	stw	r16,0(sp)
   17854:	24000417 	ldw	r16,16(r4)
   17858:	dc400115 	stw	r17,4(sp)
   1785c:	24400504 	addi	r17,r4,20
   17860:	8421883a 	add	r16,r16,r16
   17864:	8421883a 	add	r16,r16,r16
   17868:	8c21883a 	add	r16,r17,r16
   1786c:	dc800215 	stw	r18,8(sp)
   17870:	84bfff17 	ldw	r18,-4(r16)
   17874:	dd000415 	stw	r20,16(sp)
   17878:	dcc00315 	stw	r19,12(sp)
   1787c:	9009883a 	mov	r4,r18
   17880:	2829883a 	mov	r20,r5
   17884:	dfc00515 	stw	ra,20(sp)
   17888:	0016f240 	call	16f24 <__hi0bits>
   1788c:	00c00804 	movi	r3,32
   17890:	1889c83a 	sub	r4,r3,r2
   17894:	a1000015 	stw	r4,0(r20)
   17898:	01000284 	movi	r4,10
   1789c:	84ffff04 	addi	r19,r16,-4
   178a0:	20801216 	blt	r4,r2,178ec <__b2d+0xa0>
   178a4:	018002c4 	movi	r6,11
   178a8:	308dc83a 	sub	r6,r6,r2
   178ac:	9186d83a 	srl	r3,r18,r6
   178b0:	18cffc34 	orhi	r3,r3,16368
   178b4:	8cc0212e 	bgeu	r17,r19,1793c <__b2d+0xf0>
   178b8:	813ffe17 	ldw	r4,-8(r16)
   178bc:	218cd83a 	srl	r6,r4,r6
   178c0:	10800544 	addi	r2,r2,21
   178c4:	9084983a 	sll	r2,r18,r2
   178c8:	1184b03a 	or	r2,r2,r6
   178cc:	dfc00517 	ldw	ra,20(sp)
   178d0:	dd000417 	ldw	r20,16(sp)
   178d4:	dcc00317 	ldw	r19,12(sp)
   178d8:	dc800217 	ldw	r18,8(sp)
   178dc:	dc400117 	ldw	r17,4(sp)
   178e0:	dc000017 	ldw	r16,0(sp)
   178e4:	dec00604 	addi	sp,sp,24
   178e8:	f800283a 	ret
   178ec:	8cc00f2e 	bgeu	r17,r19,1792c <__b2d+0xe0>
   178f0:	117ffd44 	addi	r5,r2,-11
   178f4:	80bffe17 	ldw	r2,-8(r16)
   178f8:	28000e26 	beq	r5,zero,17934 <__b2d+0xe8>
   178fc:	1949c83a 	sub	r4,r3,r5
   17900:	9164983a 	sll	r18,r18,r5
   17904:	1106d83a 	srl	r3,r2,r4
   17908:	81bffe04 	addi	r6,r16,-8
   1790c:	948ffc34 	orhi	r18,r18,16368
   17910:	90c6b03a 	or	r3,r18,r3
   17914:	89800e2e 	bgeu	r17,r6,17950 <__b2d+0x104>
   17918:	81bffd17 	ldw	r6,-12(r16)
   1791c:	1144983a 	sll	r2,r2,r5
   17920:	310ad83a 	srl	r5,r6,r4
   17924:	2884b03a 	or	r2,r5,r2
   17928:	003fe806 	br	178cc <__alt_data_end+0xfc0178cc>
   1792c:	10bffd44 	addi	r2,r2,-11
   17930:	1000041e 	bne	r2,zero,17944 <__b2d+0xf8>
   17934:	90cffc34 	orhi	r3,r18,16368
   17938:	003fe406 	br	178cc <__alt_data_end+0xfc0178cc>
   1793c:	000d883a 	mov	r6,zero
   17940:	003fdf06 	br	178c0 <__alt_data_end+0xfc0178c0>
   17944:	90a4983a 	sll	r18,r18,r2
   17948:	0005883a 	mov	r2,zero
   1794c:	003ff906 	br	17934 <__alt_data_end+0xfc017934>
   17950:	1144983a 	sll	r2,r2,r5
   17954:	003fdd06 	br	178cc <__alt_data_end+0xfc0178cc>

00017958 <__d2b>:
   17958:	defff804 	addi	sp,sp,-32
   1795c:	dc000215 	stw	r16,8(sp)
   17960:	3021883a 	mov	r16,r6
   17964:	dc400315 	stw	r17,12(sp)
   17968:	8022907a 	slli	r17,r16,1
   1796c:	dd000615 	stw	r20,24(sp)
   17970:	2829883a 	mov	r20,r5
   17974:	01400044 	movi	r5,1
   17978:	dcc00515 	stw	r19,20(sp)
   1797c:	dc800415 	stw	r18,16(sp)
   17980:	dfc00715 	stw	ra,28(sp)
   17984:	3825883a 	mov	r18,r7
   17988:	8822d57a 	srli	r17,r17,21
   1798c:	0016c080 	call	16c08 <_Balloc>
   17990:	1027883a 	mov	r19,r2
   17994:	00800434 	movhi	r2,16
   17998:	10bfffc4 	addi	r2,r2,-1
   1799c:	808c703a 	and	r6,r16,r2
   179a0:	88000126 	beq	r17,zero,179a8 <__d2b+0x50>
   179a4:	31800434 	orhi	r6,r6,16
   179a8:	d9800015 	stw	r6,0(sp)
   179ac:	a0002426 	beq	r20,zero,17a40 <__d2b+0xe8>
   179b0:	d9000104 	addi	r4,sp,4
   179b4:	dd000115 	stw	r20,4(sp)
   179b8:	0016f8c0 	call	16f8c <__lo0bits>
   179bc:	d8c00017 	ldw	r3,0(sp)
   179c0:	10002f1e 	bne	r2,zero,17a80 <__d2b+0x128>
   179c4:	d9000117 	ldw	r4,4(sp)
   179c8:	99000515 	stw	r4,20(r19)
   179cc:	1821003a 	cmpeq	r16,r3,zero
   179d0:	01000084 	movi	r4,2
   179d4:	2421c83a 	sub	r16,r4,r16
   179d8:	98c00615 	stw	r3,24(r19)
   179dc:	9c000415 	stw	r16,16(r19)
   179e0:	88001f1e 	bne	r17,zero,17a60 <__d2b+0x108>
   179e4:	10bef384 	addi	r2,r2,-1074
   179e8:	90800015 	stw	r2,0(r18)
   179ec:	00900034 	movhi	r2,16384
   179f0:	10bfffc4 	addi	r2,r2,-1
   179f4:	8085883a 	add	r2,r16,r2
   179f8:	1085883a 	add	r2,r2,r2
   179fc:	1085883a 	add	r2,r2,r2
   17a00:	9885883a 	add	r2,r19,r2
   17a04:	11000517 	ldw	r4,20(r2)
   17a08:	8020917a 	slli	r16,r16,5
   17a0c:	0016f240 	call	16f24 <__hi0bits>
   17a10:	d8c00817 	ldw	r3,32(sp)
   17a14:	8085c83a 	sub	r2,r16,r2
   17a18:	18800015 	stw	r2,0(r3)
   17a1c:	9805883a 	mov	r2,r19
   17a20:	dfc00717 	ldw	ra,28(sp)
   17a24:	dd000617 	ldw	r20,24(sp)
   17a28:	dcc00517 	ldw	r19,20(sp)
   17a2c:	dc800417 	ldw	r18,16(sp)
   17a30:	dc400317 	ldw	r17,12(sp)
   17a34:	dc000217 	ldw	r16,8(sp)
   17a38:	dec00804 	addi	sp,sp,32
   17a3c:	f800283a 	ret
   17a40:	d809883a 	mov	r4,sp
   17a44:	0016f8c0 	call	16f8c <__lo0bits>
   17a48:	d8c00017 	ldw	r3,0(sp)
   17a4c:	04000044 	movi	r16,1
   17a50:	9c000415 	stw	r16,16(r19)
   17a54:	98c00515 	stw	r3,20(r19)
   17a58:	10800804 	addi	r2,r2,32
   17a5c:	883fe126 	beq	r17,zero,179e4 <__alt_data_end+0xfc0179e4>
   17a60:	00c00d44 	movi	r3,53
   17a64:	8c7ef344 	addi	r17,r17,-1075
   17a68:	88a3883a 	add	r17,r17,r2
   17a6c:	1885c83a 	sub	r2,r3,r2
   17a70:	d8c00817 	ldw	r3,32(sp)
   17a74:	94400015 	stw	r17,0(r18)
   17a78:	18800015 	stw	r2,0(r3)
   17a7c:	003fe706 	br	17a1c <__alt_data_end+0xfc017a1c>
   17a80:	01000804 	movi	r4,32
   17a84:	2089c83a 	sub	r4,r4,r2
   17a88:	1908983a 	sll	r4,r3,r4
   17a8c:	d9400117 	ldw	r5,4(sp)
   17a90:	1886d83a 	srl	r3,r3,r2
   17a94:	2148b03a 	or	r4,r4,r5
   17a98:	99000515 	stw	r4,20(r19)
   17a9c:	d8c00015 	stw	r3,0(sp)
   17aa0:	003fca06 	br	179cc <__alt_data_end+0xfc0179cc>

00017aa4 <__ratio>:
   17aa4:	defff904 	addi	sp,sp,-28
   17aa8:	dc400315 	stw	r17,12(sp)
   17aac:	2823883a 	mov	r17,r5
   17ab0:	d9400104 	addi	r5,sp,4
   17ab4:	dfc00615 	stw	ra,24(sp)
   17ab8:	dcc00515 	stw	r19,20(sp)
   17abc:	dc800415 	stw	r18,16(sp)
   17ac0:	2027883a 	mov	r19,r4
   17ac4:	dc000215 	stw	r16,8(sp)
   17ac8:	001784c0 	call	1784c <__b2d>
   17acc:	d80b883a 	mov	r5,sp
   17ad0:	8809883a 	mov	r4,r17
   17ad4:	1025883a 	mov	r18,r2
   17ad8:	1821883a 	mov	r16,r3
   17adc:	001784c0 	call	1784c <__b2d>
   17ae0:	8a000417 	ldw	r8,16(r17)
   17ae4:	99000417 	ldw	r4,16(r19)
   17ae8:	d9400117 	ldw	r5,4(sp)
   17aec:	2209c83a 	sub	r4,r4,r8
   17af0:	2010917a 	slli	r8,r4,5
   17af4:	d9000017 	ldw	r4,0(sp)
   17af8:	2909c83a 	sub	r4,r5,r4
   17afc:	4109883a 	add	r4,r8,r4
   17b00:	01000e0e 	bge	zero,r4,17b3c <__ratio+0x98>
   17b04:	2008953a 	slli	r4,r4,20
   17b08:	2421883a 	add	r16,r4,r16
   17b0c:	100d883a 	mov	r6,r2
   17b10:	180f883a 	mov	r7,r3
   17b14:	9009883a 	mov	r4,r18
   17b18:	800b883a 	mov	r5,r16
   17b1c:	001cf5c0 	call	1cf5c <__divdf3>
   17b20:	dfc00617 	ldw	ra,24(sp)
   17b24:	dcc00517 	ldw	r19,20(sp)
   17b28:	dc800417 	ldw	r18,16(sp)
   17b2c:	dc400317 	ldw	r17,12(sp)
   17b30:	dc000217 	ldw	r16,8(sp)
   17b34:	dec00704 	addi	sp,sp,28
   17b38:	f800283a 	ret
   17b3c:	2008953a 	slli	r4,r4,20
   17b40:	1907c83a 	sub	r3,r3,r4
   17b44:	003ff106 	br	17b0c <__alt_data_end+0xfc017b0c>

00017b48 <_mprec_log10>:
   17b48:	defffe04 	addi	sp,sp,-8
   17b4c:	dc000015 	stw	r16,0(sp)
   17b50:	dfc00115 	stw	ra,4(sp)
   17b54:	008005c4 	movi	r2,23
   17b58:	2021883a 	mov	r16,r4
   17b5c:	11000d0e 	bge	r2,r4,17b94 <_mprec_log10+0x4c>
   17b60:	0005883a 	mov	r2,zero
   17b64:	00cffc34 	movhi	r3,16368
   17b68:	843fffc4 	addi	r16,r16,-1
   17b6c:	000d883a 	mov	r6,zero
   17b70:	01d00934 	movhi	r7,16420
   17b74:	1009883a 	mov	r4,r2
   17b78:	180b883a 	mov	r5,r3
   17b7c:	001db840 	call	1db84 <__muldf3>
   17b80:	803ff91e 	bne	r16,zero,17b68 <__alt_data_end+0xfc017b68>
   17b84:	dfc00117 	ldw	ra,4(sp)
   17b88:	dc000017 	ldw	r16,0(sp)
   17b8c:	dec00204 	addi	sp,sp,8
   17b90:	f800283a 	ret
   17b94:	202090fa 	slli	r16,r4,3
   17b98:	008000f4 	movhi	r2,3
   17b9c:	10aac504 	addi	r2,r2,-21740
   17ba0:	1421883a 	add	r16,r2,r16
   17ba4:	80800017 	ldw	r2,0(r16)
   17ba8:	80c00117 	ldw	r3,4(r16)
   17bac:	dfc00117 	ldw	ra,4(sp)
   17bb0:	dc000017 	ldw	r16,0(sp)
   17bb4:	dec00204 	addi	sp,sp,8
   17bb8:	f800283a 	ret

00017bbc <__copybits>:
   17bbc:	297fffc4 	addi	r5,r5,-1
   17bc0:	280fd17a 	srai	r7,r5,5
   17bc4:	30c00417 	ldw	r3,16(r6)
   17bc8:	30800504 	addi	r2,r6,20
   17bcc:	39c00044 	addi	r7,r7,1
   17bd0:	18c7883a 	add	r3,r3,r3
   17bd4:	39cf883a 	add	r7,r7,r7
   17bd8:	18c7883a 	add	r3,r3,r3
   17bdc:	39cf883a 	add	r7,r7,r7
   17be0:	10c7883a 	add	r3,r2,r3
   17be4:	21cf883a 	add	r7,r4,r7
   17be8:	10c00d2e 	bgeu	r2,r3,17c20 <__copybits+0x64>
   17bec:	200b883a 	mov	r5,r4
   17bf0:	12000017 	ldw	r8,0(r2)
   17bf4:	29400104 	addi	r5,r5,4
   17bf8:	10800104 	addi	r2,r2,4
   17bfc:	2a3fff15 	stw	r8,-4(r5)
   17c00:	10fffb36 	bltu	r2,r3,17bf0 <__alt_data_end+0xfc017bf0>
   17c04:	1985c83a 	sub	r2,r3,r6
   17c08:	10bffac4 	addi	r2,r2,-21
   17c0c:	1004d0ba 	srli	r2,r2,2
   17c10:	10800044 	addi	r2,r2,1
   17c14:	1085883a 	add	r2,r2,r2
   17c18:	1085883a 	add	r2,r2,r2
   17c1c:	2089883a 	add	r4,r4,r2
   17c20:	21c0032e 	bgeu	r4,r7,17c30 <__copybits+0x74>
   17c24:	20000015 	stw	zero,0(r4)
   17c28:	21000104 	addi	r4,r4,4
   17c2c:	21fffd36 	bltu	r4,r7,17c24 <__alt_data_end+0xfc017c24>
   17c30:	f800283a 	ret

00017c34 <__any_on>:
   17c34:	20c00417 	ldw	r3,16(r4)
   17c38:	2805d17a 	srai	r2,r5,5
   17c3c:	21000504 	addi	r4,r4,20
   17c40:	18800d0e 	bge	r3,r2,17c78 <__any_on+0x44>
   17c44:	18c7883a 	add	r3,r3,r3
   17c48:	18c7883a 	add	r3,r3,r3
   17c4c:	20c7883a 	add	r3,r4,r3
   17c50:	20c0192e 	bgeu	r4,r3,17cb8 <__any_on+0x84>
   17c54:	18bfff17 	ldw	r2,-4(r3)
   17c58:	18ffff04 	addi	r3,r3,-4
   17c5c:	1000041e 	bne	r2,zero,17c70 <__any_on+0x3c>
   17c60:	20c0142e 	bgeu	r4,r3,17cb4 <__any_on+0x80>
   17c64:	18ffff04 	addi	r3,r3,-4
   17c68:	19400017 	ldw	r5,0(r3)
   17c6c:	283ffc26 	beq	r5,zero,17c60 <__alt_data_end+0xfc017c60>
   17c70:	00800044 	movi	r2,1
   17c74:	f800283a 	ret
   17c78:	10c00a0e 	bge	r2,r3,17ca4 <__any_on+0x70>
   17c7c:	1085883a 	add	r2,r2,r2
   17c80:	1085883a 	add	r2,r2,r2
   17c84:	294007cc 	andi	r5,r5,31
   17c88:	2087883a 	add	r3,r4,r2
   17c8c:	283ff026 	beq	r5,zero,17c50 <__alt_data_end+0xfc017c50>
   17c90:	19800017 	ldw	r6,0(r3)
   17c94:	3144d83a 	srl	r2,r6,r5
   17c98:	114a983a 	sll	r5,r2,r5
   17c9c:	317ff41e 	bne	r6,r5,17c70 <__alt_data_end+0xfc017c70>
   17ca0:	003feb06 	br	17c50 <__alt_data_end+0xfc017c50>
   17ca4:	1085883a 	add	r2,r2,r2
   17ca8:	1085883a 	add	r2,r2,r2
   17cac:	2087883a 	add	r3,r4,r2
   17cb0:	003fe706 	br	17c50 <__alt_data_end+0xfc017c50>
   17cb4:	f800283a 	ret
   17cb8:	0005883a 	mov	r2,zero
   17cbc:	f800283a 	ret

00017cc0 <_putc_r>:
   17cc0:	defffc04 	addi	sp,sp,-16
   17cc4:	dc000215 	stw	r16,8(sp)
   17cc8:	dfc00315 	stw	ra,12(sp)
   17ccc:	2021883a 	mov	r16,r4
   17cd0:	20000226 	beq	r4,zero,17cdc <_putc_r+0x1c>
   17cd4:	20800e17 	ldw	r2,56(r4)
   17cd8:	10001b26 	beq	r2,zero,17d48 <_putc_r+0x88>
   17cdc:	30800217 	ldw	r2,8(r6)
   17ce0:	10bfffc4 	addi	r2,r2,-1
   17ce4:	30800215 	stw	r2,8(r6)
   17ce8:	10000a16 	blt	r2,zero,17d14 <_putc_r+0x54>
   17cec:	30800017 	ldw	r2,0(r6)
   17cf0:	11400005 	stb	r5,0(r2)
   17cf4:	30800017 	ldw	r2,0(r6)
   17cf8:	10c00044 	addi	r3,r2,1
   17cfc:	30c00015 	stw	r3,0(r6)
   17d00:	10800003 	ldbu	r2,0(r2)
   17d04:	dfc00317 	ldw	ra,12(sp)
   17d08:	dc000217 	ldw	r16,8(sp)
   17d0c:	dec00404 	addi	sp,sp,16
   17d10:	f800283a 	ret
   17d14:	30c00617 	ldw	r3,24(r6)
   17d18:	10c00616 	blt	r2,r3,17d34 <_putc_r+0x74>
   17d1c:	30800017 	ldw	r2,0(r6)
   17d20:	00c00284 	movi	r3,10
   17d24:	11400005 	stb	r5,0(r2)
   17d28:	30800017 	ldw	r2,0(r6)
   17d2c:	11400003 	ldbu	r5,0(r2)
   17d30:	28fff11e 	bne	r5,r3,17cf8 <__alt_data_end+0xfc017cf8>
   17d34:	8009883a 	mov	r4,r16
   17d38:	dfc00317 	ldw	ra,12(sp)
   17d3c:	dc000217 	ldw	r16,8(sp)
   17d40:	dec00404 	addi	sp,sp,16
   17d44:	001b1a41 	jmpi	1b1a4 <__swbuf_r>
   17d48:	d9400015 	stw	r5,0(sp)
   17d4c:	d9800115 	stw	r6,4(sp)
   17d50:	0015c5c0 	call	15c5c <__sinit>
   17d54:	d9800117 	ldw	r6,4(sp)
   17d58:	d9400017 	ldw	r5,0(sp)
   17d5c:	003fdf06 	br	17cdc <__alt_data_end+0xfc017cdc>

00017d60 <putc>:
   17d60:	008000f4 	movhi	r2,3
   17d64:	defffc04 	addi	sp,sp,-16
   17d68:	10b78704 	addi	r2,r2,-8676
   17d6c:	dc000115 	stw	r16,4(sp)
   17d70:	14000017 	ldw	r16,0(r2)
   17d74:	dc400215 	stw	r17,8(sp)
   17d78:	dfc00315 	stw	ra,12(sp)
   17d7c:	2023883a 	mov	r17,r4
   17d80:	80000226 	beq	r16,zero,17d8c <putc+0x2c>
   17d84:	80800e17 	ldw	r2,56(r16)
   17d88:	10001a26 	beq	r2,zero,17df4 <putc+0x94>
   17d8c:	28800217 	ldw	r2,8(r5)
   17d90:	10bfffc4 	addi	r2,r2,-1
   17d94:	28800215 	stw	r2,8(r5)
   17d98:	10000b16 	blt	r2,zero,17dc8 <putc+0x68>
   17d9c:	28800017 	ldw	r2,0(r5)
   17da0:	14400005 	stb	r17,0(r2)
   17da4:	28800017 	ldw	r2,0(r5)
   17da8:	10c00044 	addi	r3,r2,1
   17dac:	28c00015 	stw	r3,0(r5)
   17db0:	10800003 	ldbu	r2,0(r2)
   17db4:	dfc00317 	ldw	ra,12(sp)
   17db8:	dc400217 	ldw	r17,8(sp)
   17dbc:	dc000117 	ldw	r16,4(sp)
   17dc0:	dec00404 	addi	sp,sp,16
   17dc4:	f800283a 	ret
   17dc8:	28c00617 	ldw	r3,24(r5)
   17dcc:	10c00e16 	blt	r2,r3,17e08 <putc+0xa8>
   17dd0:	28800017 	ldw	r2,0(r5)
   17dd4:	01000284 	movi	r4,10
   17dd8:	14400005 	stb	r17,0(r2)
   17ddc:	28800017 	ldw	r2,0(r5)
   17de0:	10c00003 	ldbu	r3,0(r2)
   17de4:	193ff01e 	bne	r3,r4,17da8 <__alt_data_end+0xfc017da8>
   17de8:	280d883a 	mov	r6,r5
   17dec:	180b883a 	mov	r5,r3
   17df0:	00000706 	br	17e10 <putc+0xb0>
   17df4:	8009883a 	mov	r4,r16
   17df8:	d9400015 	stw	r5,0(sp)
   17dfc:	0015c5c0 	call	15c5c <__sinit>
   17e00:	d9400017 	ldw	r5,0(sp)
   17e04:	003fe106 	br	17d8c <__alt_data_end+0xfc017d8c>
   17e08:	280d883a 	mov	r6,r5
   17e0c:	880b883a 	mov	r5,r17
   17e10:	8009883a 	mov	r4,r16
   17e14:	dfc00317 	ldw	ra,12(sp)
   17e18:	dc400217 	ldw	r17,8(sp)
   17e1c:	dc000117 	ldw	r16,4(sp)
   17e20:	dec00404 	addi	sp,sp,16
   17e24:	001b1a41 	jmpi	1b1a4 <__swbuf_r>

00017e28 <_realloc_r>:
   17e28:	defff604 	addi	sp,sp,-40
   17e2c:	dc800215 	stw	r18,8(sp)
   17e30:	dfc00915 	stw	ra,36(sp)
   17e34:	df000815 	stw	fp,32(sp)
   17e38:	ddc00715 	stw	r23,28(sp)
   17e3c:	dd800615 	stw	r22,24(sp)
   17e40:	dd400515 	stw	r21,20(sp)
   17e44:	dd000415 	stw	r20,16(sp)
   17e48:	dcc00315 	stw	r19,12(sp)
   17e4c:	dc400115 	stw	r17,4(sp)
   17e50:	dc000015 	stw	r16,0(sp)
   17e54:	3025883a 	mov	r18,r6
   17e58:	2800b726 	beq	r5,zero,18138 <_realloc_r+0x310>
   17e5c:	282b883a 	mov	r21,r5
   17e60:	2029883a 	mov	r20,r4
   17e64:	001f64c0 	call	1f64c <__malloc_lock>
   17e68:	a8bfff17 	ldw	r2,-4(r21)
   17e6c:	043fff04 	movi	r16,-4
   17e70:	90c002c4 	addi	r3,r18,11
   17e74:	01000584 	movi	r4,22
   17e78:	acfffe04 	addi	r19,r21,-8
   17e7c:	1420703a 	and	r16,r2,r16
   17e80:	20c0332e 	bgeu	r4,r3,17f50 <_realloc_r+0x128>
   17e84:	047ffe04 	movi	r17,-8
   17e88:	1c62703a 	and	r17,r3,r17
   17e8c:	8807883a 	mov	r3,r17
   17e90:	88005816 	blt	r17,zero,17ff4 <_realloc_r+0x1cc>
   17e94:	8c805736 	bltu	r17,r18,17ff4 <_realloc_r+0x1cc>
   17e98:	80c0300e 	bge	r16,r3,17f5c <_realloc_r+0x134>
   17e9c:	070000f4 	movhi	fp,3
   17ea0:	e72c2804 	addi	fp,fp,-20320
   17ea4:	e1c00217 	ldw	r7,8(fp)
   17ea8:	9c09883a 	add	r4,r19,r16
   17eac:	22000117 	ldw	r8,4(r4)
   17eb0:	21c06326 	beq	r4,r7,18040 <_realloc_r+0x218>
   17eb4:	017fff84 	movi	r5,-2
   17eb8:	414a703a 	and	r5,r8,r5
   17ebc:	214b883a 	add	r5,r4,r5
   17ec0:	29800117 	ldw	r6,4(r5)
   17ec4:	3180004c 	andi	r6,r6,1
   17ec8:	30003f26 	beq	r6,zero,17fc8 <_realloc_r+0x1a0>
   17ecc:	1080004c 	andi	r2,r2,1
   17ed0:	10008326 	beq	r2,zero,180e0 <_realloc_r+0x2b8>
   17ed4:	900b883a 	mov	r5,r18
   17ed8:	a009883a 	mov	r4,r20
   17edc:	000e46c0 	call	e46c <_malloc_r>
   17ee0:	1025883a 	mov	r18,r2
   17ee4:	10011e26 	beq	r2,zero,18360 <_realloc_r+0x538>
   17ee8:	a93fff17 	ldw	r4,-4(r21)
   17eec:	10fffe04 	addi	r3,r2,-8
   17ef0:	00bfff84 	movi	r2,-2
   17ef4:	2084703a 	and	r2,r4,r2
   17ef8:	9885883a 	add	r2,r19,r2
   17efc:	1880ee26 	beq	r3,r2,182b8 <_realloc_r+0x490>
   17f00:	81bfff04 	addi	r6,r16,-4
   17f04:	00800904 	movi	r2,36
   17f08:	1180b836 	bltu	r2,r6,181ec <_realloc_r+0x3c4>
   17f0c:	00c004c4 	movi	r3,19
   17f10:	19809636 	bltu	r3,r6,1816c <_realloc_r+0x344>
   17f14:	9005883a 	mov	r2,r18
   17f18:	a807883a 	mov	r3,r21
   17f1c:	19000017 	ldw	r4,0(r3)
   17f20:	11000015 	stw	r4,0(r2)
   17f24:	19000117 	ldw	r4,4(r3)
   17f28:	11000115 	stw	r4,4(r2)
   17f2c:	18c00217 	ldw	r3,8(r3)
   17f30:	10c00215 	stw	r3,8(r2)
   17f34:	a80b883a 	mov	r5,r21
   17f38:	a009883a 	mov	r4,r20
   17f3c:	0015dd00 	call	15dd0 <_free_r>
   17f40:	a009883a 	mov	r4,r20
   17f44:	001f6700 	call	1f670 <__malloc_unlock>
   17f48:	9005883a 	mov	r2,r18
   17f4c:	00001206 	br	17f98 <_realloc_r+0x170>
   17f50:	00c00404 	movi	r3,16
   17f54:	1823883a 	mov	r17,r3
   17f58:	003fce06 	br	17e94 <__alt_data_end+0xfc017e94>
   17f5c:	a825883a 	mov	r18,r21
   17f60:	8445c83a 	sub	r2,r16,r17
   17f64:	00c003c4 	movi	r3,15
   17f68:	18802636 	bltu	r3,r2,18004 <_realloc_r+0x1dc>
   17f6c:	99800117 	ldw	r6,4(r19)
   17f70:	9c07883a 	add	r3,r19,r16
   17f74:	3180004c 	andi	r6,r6,1
   17f78:	3420b03a 	or	r16,r6,r16
   17f7c:	9c000115 	stw	r16,4(r19)
   17f80:	18800117 	ldw	r2,4(r3)
   17f84:	10800054 	ori	r2,r2,1
   17f88:	18800115 	stw	r2,4(r3)
   17f8c:	a009883a 	mov	r4,r20
   17f90:	001f6700 	call	1f670 <__malloc_unlock>
   17f94:	9005883a 	mov	r2,r18
   17f98:	dfc00917 	ldw	ra,36(sp)
   17f9c:	df000817 	ldw	fp,32(sp)
   17fa0:	ddc00717 	ldw	r23,28(sp)
   17fa4:	dd800617 	ldw	r22,24(sp)
   17fa8:	dd400517 	ldw	r21,20(sp)
   17fac:	dd000417 	ldw	r20,16(sp)
   17fb0:	dcc00317 	ldw	r19,12(sp)
   17fb4:	dc800217 	ldw	r18,8(sp)
   17fb8:	dc400117 	ldw	r17,4(sp)
   17fbc:	dc000017 	ldw	r16,0(sp)
   17fc0:	dec00a04 	addi	sp,sp,40
   17fc4:	f800283a 	ret
   17fc8:	017fff04 	movi	r5,-4
   17fcc:	414a703a 	and	r5,r8,r5
   17fd0:	814d883a 	add	r6,r16,r5
   17fd4:	30c01f16 	blt	r6,r3,18054 <_realloc_r+0x22c>
   17fd8:	20800317 	ldw	r2,12(r4)
   17fdc:	20c00217 	ldw	r3,8(r4)
   17fe0:	a825883a 	mov	r18,r21
   17fe4:	3021883a 	mov	r16,r6
   17fe8:	18800315 	stw	r2,12(r3)
   17fec:	10c00215 	stw	r3,8(r2)
   17ff0:	003fdb06 	br	17f60 <__alt_data_end+0xfc017f60>
   17ff4:	00800304 	movi	r2,12
   17ff8:	a0800015 	stw	r2,0(r20)
   17ffc:	0005883a 	mov	r2,zero
   18000:	003fe506 	br	17f98 <__alt_data_end+0xfc017f98>
   18004:	98c00117 	ldw	r3,4(r19)
   18008:	9c4b883a 	add	r5,r19,r17
   1800c:	11000054 	ori	r4,r2,1
   18010:	18c0004c 	andi	r3,r3,1
   18014:	1c62b03a 	or	r17,r3,r17
   18018:	9c400115 	stw	r17,4(r19)
   1801c:	29000115 	stw	r4,4(r5)
   18020:	2885883a 	add	r2,r5,r2
   18024:	10c00117 	ldw	r3,4(r2)
   18028:	29400204 	addi	r5,r5,8
   1802c:	a009883a 	mov	r4,r20
   18030:	18c00054 	ori	r3,r3,1
   18034:	10c00115 	stw	r3,4(r2)
   18038:	0015dd00 	call	15dd0 <_free_r>
   1803c:	003fd306 	br	17f8c <__alt_data_end+0xfc017f8c>
   18040:	017fff04 	movi	r5,-4
   18044:	414a703a 	and	r5,r8,r5
   18048:	89800404 	addi	r6,r17,16
   1804c:	8151883a 	add	r8,r16,r5
   18050:	4180590e 	bge	r8,r6,181b8 <_realloc_r+0x390>
   18054:	1080004c 	andi	r2,r2,1
   18058:	103f9e1e 	bne	r2,zero,17ed4 <__alt_data_end+0xfc017ed4>
   1805c:	adbffe17 	ldw	r22,-8(r21)
   18060:	00bfff04 	movi	r2,-4
   18064:	9dadc83a 	sub	r22,r19,r22
   18068:	b1800117 	ldw	r6,4(r22)
   1806c:	3084703a 	and	r2,r6,r2
   18070:	20002026 	beq	r4,zero,180f4 <_realloc_r+0x2cc>
   18074:	80af883a 	add	r23,r16,r2
   18078:	b96f883a 	add	r23,r23,r5
   1807c:	21c05f26 	beq	r4,r7,181fc <_realloc_r+0x3d4>
   18080:	b8c01c16 	blt	r23,r3,180f4 <_realloc_r+0x2cc>
   18084:	20800317 	ldw	r2,12(r4)
   18088:	20c00217 	ldw	r3,8(r4)
   1808c:	81bfff04 	addi	r6,r16,-4
   18090:	01000904 	movi	r4,36
   18094:	18800315 	stw	r2,12(r3)
   18098:	10c00215 	stw	r3,8(r2)
   1809c:	b0c00217 	ldw	r3,8(r22)
   180a0:	b0800317 	ldw	r2,12(r22)
   180a4:	b4800204 	addi	r18,r22,8
   180a8:	18800315 	stw	r2,12(r3)
   180ac:	10c00215 	stw	r3,8(r2)
   180b0:	21801b36 	bltu	r4,r6,18120 <_realloc_r+0x2f8>
   180b4:	008004c4 	movi	r2,19
   180b8:	1180352e 	bgeu	r2,r6,18190 <_realloc_r+0x368>
   180bc:	a8800017 	ldw	r2,0(r21)
   180c0:	b0800215 	stw	r2,8(r22)
   180c4:	a8800117 	ldw	r2,4(r21)
   180c8:	b0800315 	stw	r2,12(r22)
   180cc:	008006c4 	movi	r2,27
   180d0:	11807f36 	bltu	r2,r6,182d0 <_realloc_r+0x4a8>
   180d4:	b0800404 	addi	r2,r22,16
   180d8:	ad400204 	addi	r21,r21,8
   180dc:	00002d06 	br	18194 <_realloc_r+0x36c>
   180e0:	adbffe17 	ldw	r22,-8(r21)
   180e4:	00bfff04 	movi	r2,-4
   180e8:	9dadc83a 	sub	r22,r19,r22
   180ec:	b1000117 	ldw	r4,4(r22)
   180f0:	2084703a 	and	r2,r4,r2
   180f4:	b03f7726 	beq	r22,zero,17ed4 <__alt_data_end+0xfc017ed4>
   180f8:	80af883a 	add	r23,r16,r2
   180fc:	b8ff7516 	blt	r23,r3,17ed4 <__alt_data_end+0xfc017ed4>
   18100:	b0800317 	ldw	r2,12(r22)
   18104:	b0c00217 	ldw	r3,8(r22)
   18108:	81bfff04 	addi	r6,r16,-4
   1810c:	01000904 	movi	r4,36
   18110:	18800315 	stw	r2,12(r3)
   18114:	10c00215 	stw	r3,8(r2)
   18118:	b4800204 	addi	r18,r22,8
   1811c:	21bfe52e 	bgeu	r4,r6,180b4 <__alt_data_end+0xfc0180b4>
   18120:	a80b883a 	mov	r5,r21
   18124:	9009883a 	mov	r4,r18
   18128:	0016aac0 	call	16aac <memmove>
   1812c:	b821883a 	mov	r16,r23
   18130:	b027883a 	mov	r19,r22
   18134:	003f8a06 	br	17f60 <__alt_data_end+0xfc017f60>
   18138:	300b883a 	mov	r5,r6
   1813c:	dfc00917 	ldw	ra,36(sp)
   18140:	df000817 	ldw	fp,32(sp)
   18144:	ddc00717 	ldw	r23,28(sp)
   18148:	dd800617 	ldw	r22,24(sp)
   1814c:	dd400517 	ldw	r21,20(sp)
   18150:	dd000417 	ldw	r20,16(sp)
   18154:	dcc00317 	ldw	r19,12(sp)
   18158:	dc800217 	ldw	r18,8(sp)
   1815c:	dc400117 	ldw	r17,4(sp)
   18160:	dc000017 	ldw	r16,0(sp)
   18164:	dec00a04 	addi	sp,sp,40
   18168:	000e46c1 	jmpi	e46c <_malloc_r>
   1816c:	a8c00017 	ldw	r3,0(r21)
   18170:	90c00015 	stw	r3,0(r18)
   18174:	a8c00117 	ldw	r3,4(r21)
   18178:	90c00115 	stw	r3,4(r18)
   1817c:	00c006c4 	movi	r3,27
   18180:	19804536 	bltu	r3,r6,18298 <_realloc_r+0x470>
   18184:	90800204 	addi	r2,r18,8
   18188:	a8c00204 	addi	r3,r21,8
   1818c:	003f6306 	br	17f1c <__alt_data_end+0xfc017f1c>
   18190:	9005883a 	mov	r2,r18
   18194:	a8c00017 	ldw	r3,0(r21)
   18198:	b821883a 	mov	r16,r23
   1819c:	b027883a 	mov	r19,r22
   181a0:	10c00015 	stw	r3,0(r2)
   181a4:	a8c00117 	ldw	r3,4(r21)
   181a8:	10c00115 	stw	r3,4(r2)
   181ac:	a8c00217 	ldw	r3,8(r21)
   181b0:	10c00215 	stw	r3,8(r2)
   181b4:	003f6a06 	br	17f60 <__alt_data_end+0xfc017f60>
   181b8:	9c67883a 	add	r19,r19,r17
   181bc:	4445c83a 	sub	r2,r8,r17
   181c0:	e4c00215 	stw	r19,8(fp)
   181c4:	10800054 	ori	r2,r2,1
   181c8:	98800115 	stw	r2,4(r19)
   181cc:	a8bfff17 	ldw	r2,-4(r21)
   181d0:	a009883a 	mov	r4,r20
   181d4:	1080004c 	andi	r2,r2,1
   181d8:	1462b03a 	or	r17,r2,r17
   181dc:	ac7fff15 	stw	r17,-4(r21)
   181e0:	001f6700 	call	1f670 <__malloc_unlock>
   181e4:	a805883a 	mov	r2,r21
   181e8:	003f6b06 	br	17f98 <__alt_data_end+0xfc017f98>
   181ec:	a80b883a 	mov	r5,r21
   181f0:	9009883a 	mov	r4,r18
   181f4:	0016aac0 	call	16aac <memmove>
   181f8:	003f4e06 	br	17f34 <__alt_data_end+0xfc017f34>
   181fc:	89000404 	addi	r4,r17,16
   18200:	b93fbc16 	blt	r23,r4,180f4 <__alt_data_end+0xfc0180f4>
   18204:	b0800317 	ldw	r2,12(r22)
   18208:	b0c00217 	ldw	r3,8(r22)
   1820c:	81bfff04 	addi	r6,r16,-4
   18210:	01000904 	movi	r4,36
   18214:	18800315 	stw	r2,12(r3)
   18218:	10c00215 	stw	r3,8(r2)
   1821c:	b4800204 	addi	r18,r22,8
   18220:	21804336 	bltu	r4,r6,18330 <_realloc_r+0x508>
   18224:	008004c4 	movi	r2,19
   18228:	11803f2e 	bgeu	r2,r6,18328 <_realloc_r+0x500>
   1822c:	a8800017 	ldw	r2,0(r21)
   18230:	b0800215 	stw	r2,8(r22)
   18234:	a8800117 	ldw	r2,4(r21)
   18238:	b0800315 	stw	r2,12(r22)
   1823c:	008006c4 	movi	r2,27
   18240:	11803f36 	bltu	r2,r6,18340 <_realloc_r+0x518>
   18244:	b0800404 	addi	r2,r22,16
   18248:	ad400204 	addi	r21,r21,8
   1824c:	a8c00017 	ldw	r3,0(r21)
   18250:	10c00015 	stw	r3,0(r2)
   18254:	a8c00117 	ldw	r3,4(r21)
   18258:	10c00115 	stw	r3,4(r2)
   1825c:	a8c00217 	ldw	r3,8(r21)
   18260:	10c00215 	stw	r3,8(r2)
   18264:	b447883a 	add	r3,r22,r17
   18268:	bc45c83a 	sub	r2,r23,r17
   1826c:	e0c00215 	stw	r3,8(fp)
   18270:	10800054 	ori	r2,r2,1
   18274:	18800115 	stw	r2,4(r3)
   18278:	b0800117 	ldw	r2,4(r22)
   1827c:	a009883a 	mov	r4,r20
   18280:	1080004c 	andi	r2,r2,1
   18284:	1462b03a 	or	r17,r2,r17
   18288:	b4400115 	stw	r17,4(r22)
   1828c:	001f6700 	call	1f670 <__malloc_unlock>
   18290:	9005883a 	mov	r2,r18
   18294:	003f4006 	br	17f98 <__alt_data_end+0xfc017f98>
   18298:	a8c00217 	ldw	r3,8(r21)
   1829c:	90c00215 	stw	r3,8(r18)
   182a0:	a8c00317 	ldw	r3,12(r21)
   182a4:	90c00315 	stw	r3,12(r18)
   182a8:	30801126 	beq	r6,r2,182f0 <_realloc_r+0x4c8>
   182ac:	90800404 	addi	r2,r18,16
   182b0:	a8c00404 	addi	r3,r21,16
   182b4:	003f1906 	br	17f1c <__alt_data_end+0xfc017f1c>
   182b8:	90ffff17 	ldw	r3,-4(r18)
   182bc:	00bfff04 	movi	r2,-4
   182c0:	a825883a 	mov	r18,r21
   182c4:	1884703a 	and	r2,r3,r2
   182c8:	80a1883a 	add	r16,r16,r2
   182cc:	003f2406 	br	17f60 <__alt_data_end+0xfc017f60>
   182d0:	a8800217 	ldw	r2,8(r21)
   182d4:	b0800415 	stw	r2,16(r22)
   182d8:	a8800317 	ldw	r2,12(r21)
   182dc:	b0800515 	stw	r2,20(r22)
   182e0:	31000a26 	beq	r6,r4,1830c <_realloc_r+0x4e4>
   182e4:	b0800604 	addi	r2,r22,24
   182e8:	ad400404 	addi	r21,r21,16
   182ec:	003fa906 	br	18194 <__alt_data_end+0xfc018194>
   182f0:	a9000417 	ldw	r4,16(r21)
   182f4:	90800604 	addi	r2,r18,24
   182f8:	a8c00604 	addi	r3,r21,24
   182fc:	91000415 	stw	r4,16(r18)
   18300:	a9000517 	ldw	r4,20(r21)
   18304:	91000515 	stw	r4,20(r18)
   18308:	003f0406 	br	17f1c <__alt_data_end+0xfc017f1c>
   1830c:	a8c00417 	ldw	r3,16(r21)
   18310:	ad400604 	addi	r21,r21,24
   18314:	b0800804 	addi	r2,r22,32
   18318:	b0c00615 	stw	r3,24(r22)
   1831c:	a8ffff17 	ldw	r3,-4(r21)
   18320:	b0c00715 	stw	r3,28(r22)
   18324:	003f9b06 	br	18194 <__alt_data_end+0xfc018194>
   18328:	9005883a 	mov	r2,r18
   1832c:	003fc706 	br	1824c <__alt_data_end+0xfc01824c>
   18330:	a80b883a 	mov	r5,r21
   18334:	9009883a 	mov	r4,r18
   18338:	0016aac0 	call	16aac <memmove>
   1833c:	003fc906 	br	18264 <__alt_data_end+0xfc018264>
   18340:	a8800217 	ldw	r2,8(r21)
   18344:	b0800415 	stw	r2,16(r22)
   18348:	a8800317 	ldw	r2,12(r21)
   1834c:	b0800515 	stw	r2,20(r22)
   18350:	31000726 	beq	r6,r4,18370 <_realloc_r+0x548>
   18354:	b0800604 	addi	r2,r22,24
   18358:	ad400404 	addi	r21,r21,16
   1835c:	003fbb06 	br	1824c <__alt_data_end+0xfc01824c>
   18360:	a009883a 	mov	r4,r20
   18364:	001f6700 	call	1f670 <__malloc_unlock>
   18368:	0005883a 	mov	r2,zero
   1836c:	003f0a06 	br	17f98 <__alt_data_end+0xfc017f98>
   18370:	a8c00417 	ldw	r3,16(r21)
   18374:	ad400604 	addi	r21,r21,24
   18378:	b0800804 	addi	r2,r22,32
   1837c:	b0c00615 	stw	r3,24(r22)
   18380:	a8ffff17 	ldw	r3,-4(r21)
   18384:	b0c00715 	stw	r3,28(r22)
   18388:	003fb006 	br	1824c <__alt_data_end+0xfc01824c>

0001838c <__fpclassifyd>:
   1838c:	00a00034 	movhi	r2,32768
   18390:	10bfffc4 	addi	r2,r2,-1
   18394:	2884703a 	and	r2,r5,r2
   18398:	10000726 	beq	r2,zero,183b8 <__fpclassifyd+0x2c>
   1839c:	00fffc34 	movhi	r3,65520
   183a0:	019ff834 	movhi	r6,32736
   183a4:	28c7883a 	add	r3,r5,r3
   183a8:	31bfffc4 	addi	r6,r6,-1
   183ac:	30c00536 	bltu	r6,r3,183c4 <__fpclassifyd+0x38>
   183b0:	00800104 	movi	r2,4
   183b4:	f800283a 	ret
   183b8:	2000021e 	bne	r4,zero,183c4 <__fpclassifyd+0x38>
   183bc:	00800084 	movi	r2,2
   183c0:	f800283a 	ret
   183c4:	00dffc34 	movhi	r3,32752
   183c8:	019ff834 	movhi	r6,32736
   183cc:	28cb883a 	add	r5,r5,r3
   183d0:	31bfffc4 	addi	r6,r6,-1
   183d4:	317ff62e 	bgeu	r6,r5,183b0 <__alt_data_end+0xfc0183b0>
   183d8:	01400434 	movhi	r5,16
   183dc:	297fffc4 	addi	r5,r5,-1
   183e0:	28800236 	bltu	r5,r2,183ec <__fpclassifyd+0x60>
   183e4:	008000c4 	movi	r2,3
   183e8:	f800283a 	ret
   183ec:	10c00226 	beq	r2,r3,183f8 <__fpclassifyd+0x6c>
   183f0:	0005883a 	mov	r2,zero
   183f4:	f800283a 	ret
   183f8:	2005003a 	cmpeq	r2,r4,zero
   183fc:	f800283a 	ret

00018400 <__sread>:
   18400:	defffe04 	addi	sp,sp,-8
   18404:	dc000015 	stw	r16,0(sp)
   18408:	2821883a 	mov	r16,r5
   1840c:	2940038f 	ldh	r5,14(r5)
   18410:	dfc00115 	stw	ra,4(sp)
   18414:	001b8a80 	call	1b8a8 <_read_r>
   18418:	10000716 	blt	r2,zero,18438 <__sread+0x38>
   1841c:	80c01417 	ldw	r3,80(r16)
   18420:	1887883a 	add	r3,r3,r2
   18424:	80c01415 	stw	r3,80(r16)
   18428:	dfc00117 	ldw	ra,4(sp)
   1842c:	dc000017 	ldw	r16,0(sp)
   18430:	dec00204 	addi	sp,sp,8
   18434:	f800283a 	ret
   18438:	80c0030b 	ldhu	r3,12(r16)
   1843c:	18fbffcc 	andi	r3,r3,61439
   18440:	80c0030d 	sth	r3,12(r16)
   18444:	dfc00117 	ldw	ra,4(sp)
   18448:	dc000017 	ldw	r16,0(sp)
   1844c:	dec00204 	addi	sp,sp,8
   18450:	f800283a 	ret

00018454 <__seofread>:
   18454:	0005883a 	mov	r2,zero
   18458:	f800283a 	ret

0001845c <__swrite>:
   1845c:	2880030b 	ldhu	r2,12(r5)
   18460:	defffb04 	addi	sp,sp,-20
   18464:	dcc00315 	stw	r19,12(sp)
   18468:	dc800215 	stw	r18,8(sp)
   1846c:	dc400115 	stw	r17,4(sp)
   18470:	dc000015 	stw	r16,0(sp)
   18474:	dfc00415 	stw	ra,16(sp)
   18478:	10c0400c 	andi	r3,r2,256
   1847c:	2821883a 	mov	r16,r5
   18480:	2023883a 	mov	r17,r4
   18484:	3025883a 	mov	r18,r6
   18488:	3827883a 	mov	r19,r7
   1848c:	18000526 	beq	r3,zero,184a4 <__swrite+0x48>
   18490:	2940038f 	ldh	r5,14(r5)
   18494:	01c00084 	movi	r7,2
   18498:	000d883a 	mov	r6,zero
   1849c:	001b8480 	call	1b848 <_lseek_r>
   184a0:	8080030b 	ldhu	r2,12(r16)
   184a4:	8140038f 	ldh	r5,14(r16)
   184a8:	10bbffcc 	andi	r2,r2,61439
   184ac:	980f883a 	mov	r7,r19
   184b0:	900d883a 	mov	r6,r18
   184b4:	8809883a 	mov	r4,r17
   184b8:	8080030d 	sth	r2,12(r16)
   184bc:	dfc00417 	ldw	ra,16(sp)
   184c0:	dcc00317 	ldw	r19,12(sp)
   184c4:	dc800217 	ldw	r18,8(sp)
   184c8:	dc400117 	ldw	r17,4(sp)
   184cc:	dc000017 	ldw	r16,0(sp)
   184d0:	dec00504 	addi	sp,sp,20
   184d4:	001b2fc1 	jmpi	1b2fc <_write_r>

000184d8 <__sseek>:
   184d8:	defffe04 	addi	sp,sp,-8
   184dc:	dc000015 	stw	r16,0(sp)
   184e0:	2821883a 	mov	r16,r5
   184e4:	2940038f 	ldh	r5,14(r5)
   184e8:	dfc00115 	stw	ra,4(sp)
   184ec:	001b8480 	call	1b848 <_lseek_r>
   184f0:	00ffffc4 	movi	r3,-1
   184f4:	10c00826 	beq	r2,r3,18518 <__sseek+0x40>
   184f8:	80c0030b 	ldhu	r3,12(r16)
   184fc:	80801415 	stw	r2,80(r16)
   18500:	18c40014 	ori	r3,r3,4096
   18504:	80c0030d 	sth	r3,12(r16)
   18508:	dfc00117 	ldw	ra,4(sp)
   1850c:	dc000017 	ldw	r16,0(sp)
   18510:	dec00204 	addi	sp,sp,8
   18514:	f800283a 	ret
   18518:	80c0030b 	ldhu	r3,12(r16)
   1851c:	18fbffcc 	andi	r3,r3,61439
   18520:	80c0030d 	sth	r3,12(r16)
   18524:	dfc00117 	ldw	ra,4(sp)
   18528:	dc000017 	ldw	r16,0(sp)
   1852c:	dec00204 	addi	sp,sp,8
   18530:	f800283a 	ret

00018534 <__sclose>:
   18534:	2940038f 	ldh	r5,14(r5)
   18538:	001b35c1 	jmpi	1b35c <_close_r>

0001853c <__ssprint_r>:
   1853c:	30800217 	ldw	r2,8(r6)
   18540:	defff604 	addi	sp,sp,-40
   18544:	dc800215 	stw	r18,8(sp)
   18548:	dfc00915 	stw	ra,36(sp)
   1854c:	df000815 	stw	fp,32(sp)
   18550:	ddc00715 	stw	r23,28(sp)
   18554:	dd800615 	stw	r22,24(sp)
   18558:	dd400515 	stw	r21,20(sp)
   1855c:	dd000415 	stw	r20,16(sp)
   18560:	dcc00315 	stw	r19,12(sp)
   18564:	dc400115 	stw	r17,4(sp)
   18568:	dc000015 	stw	r16,0(sp)
   1856c:	3025883a 	mov	r18,r6
   18570:	10005826 	beq	r2,zero,186d4 <__ssprint_r+0x198>
   18574:	2027883a 	mov	r19,r4
   18578:	35c00017 	ldw	r23,0(r6)
   1857c:	29000017 	ldw	r4,0(r5)
   18580:	28800217 	ldw	r2,8(r5)
   18584:	2823883a 	mov	r17,r5
   18588:	0039883a 	mov	fp,zero
   1858c:	0021883a 	mov	r16,zero
   18590:	80003926 	beq	r16,zero,18678 <__ssprint_r+0x13c>
   18594:	102b883a 	mov	r21,r2
   18598:	102d883a 	mov	r22,r2
   1859c:	80803a36 	bltu	r16,r2,18688 <__ssprint_r+0x14c>
   185a0:	88c0030b 	ldhu	r3,12(r17)
   185a4:	1881200c 	andi	r2,r3,1152
   185a8:	10002626 	beq	r2,zero,18644 <__ssprint_r+0x108>
   185ac:	88800517 	ldw	r2,20(r17)
   185b0:	89400417 	ldw	r5,16(r17)
   185b4:	81800044 	addi	r6,r16,1
   185b8:	108f883a 	add	r7,r2,r2
   185bc:	3885883a 	add	r2,r7,r2
   185c0:	100ed7fa 	srli	r7,r2,31
   185c4:	216dc83a 	sub	r22,r4,r5
   185c8:	3589883a 	add	r4,r6,r22
   185cc:	3885883a 	add	r2,r7,r2
   185d0:	102bd07a 	srai	r21,r2,1
   185d4:	a80d883a 	mov	r6,r21
   185d8:	a900022e 	bgeu	r21,r4,185e4 <__ssprint_r+0xa8>
   185dc:	202b883a 	mov	r21,r4
   185e0:	200d883a 	mov	r6,r4
   185e4:	18c1000c 	andi	r3,r3,1024
   185e8:	18002a26 	beq	r3,zero,18694 <__ssprint_r+0x158>
   185ec:	300b883a 	mov	r5,r6
   185f0:	9809883a 	mov	r4,r19
   185f4:	000e46c0 	call	e46c <_malloc_r>
   185f8:	1029883a 	mov	r20,r2
   185fc:	10002c26 	beq	r2,zero,186b0 <__ssprint_r+0x174>
   18600:	89400417 	ldw	r5,16(r17)
   18604:	b00d883a 	mov	r6,r22
   18608:	1009883a 	mov	r4,r2
   1860c:	000ec780 	call	ec78 <memcpy>
   18610:	8880030b 	ldhu	r2,12(r17)
   18614:	00fedfc4 	movi	r3,-1153
   18618:	10c4703a 	and	r2,r2,r3
   1861c:	10802014 	ori	r2,r2,128
   18620:	8880030d 	sth	r2,12(r17)
   18624:	a589883a 	add	r4,r20,r22
   18628:	adadc83a 	sub	r22,r21,r22
   1862c:	8d400515 	stw	r21,20(r17)
   18630:	8d800215 	stw	r22,8(r17)
   18634:	8d000415 	stw	r20,16(r17)
   18638:	89000015 	stw	r4,0(r17)
   1863c:	802b883a 	mov	r21,r16
   18640:	802d883a 	mov	r22,r16
   18644:	b00d883a 	mov	r6,r22
   18648:	e00b883a 	mov	r5,fp
   1864c:	0016aac0 	call	16aac <memmove>
   18650:	88800217 	ldw	r2,8(r17)
   18654:	89000017 	ldw	r4,0(r17)
   18658:	90c00217 	ldw	r3,8(r18)
   1865c:	1545c83a 	sub	r2,r2,r21
   18660:	2589883a 	add	r4,r4,r22
   18664:	88800215 	stw	r2,8(r17)
   18668:	89000015 	stw	r4,0(r17)
   1866c:	1c21c83a 	sub	r16,r3,r16
   18670:	94000215 	stw	r16,8(r18)
   18674:	80001726 	beq	r16,zero,186d4 <__ssprint_r+0x198>
   18678:	bf000017 	ldw	fp,0(r23)
   1867c:	bc000117 	ldw	r16,4(r23)
   18680:	bdc00204 	addi	r23,r23,8
   18684:	003fc206 	br	18590 <__alt_data_end+0xfc018590>
   18688:	802b883a 	mov	r21,r16
   1868c:	802d883a 	mov	r22,r16
   18690:	003fec06 	br	18644 <__alt_data_end+0xfc018644>
   18694:	9809883a 	mov	r4,r19
   18698:	0017e280 	call	17e28 <_realloc_r>
   1869c:	1029883a 	mov	r20,r2
   186a0:	103fe01e 	bne	r2,zero,18624 <__alt_data_end+0xfc018624>
   186a4:	89400417 	ldw	r5,16(r17)
   186a8:	9809883a 	mov	r4,r19
   186ac:	0015dd00 	call	15dd0 <_free_r>
   186b0:	88c0030b 	ldhu	r3,12(r17)
   186b4:	00800304 	movi	r2,12
   186b8:	98800015 	stw	r2,0(r19)
   186bc:	18c01014 	ori	r3,r3,64
   186c0:	88c0030d 	sth	r3,12(r17)
   186c4:	00bfffc4 	movi	r2,-1
   186c8:	90000215 	stw	zero,8(r18)
   186cc:	90000115 	stw	zero,4(r18)
   186d0:	00000206 	br	186dc <__ssprint_r+0x1a0>
   186d4:	90000115 	stw	zero,4(r18)
   186d8:	0005883a 	mov	r2,zero
   186dc:	dfc00917 	ldw	ra,36(sp)
   186e0:	df000817 	ldw	fp,32(sp)
   186e4:	ddc00717 	ldw	r23,28(sp)
   186e8:	dd800617 	ldw	r22,24(sp)
   186ec:	dd400517 	ldw	r21,20(sp)
   186f0:	dd000417 	ldw	r20,16(sp)
   186f4:	dcc00317 	ldw	r19,12(sp)
   186f8:	dc800217 	ldw	r18,8(sp)
   186fc:	dc400117 	ldw	r17,4(sp)
   18700:	dc000017 	ldw	r16,0(sp)
   18704:	dec00a04 	addi	sp,sp,40
   18708:	f800283a 	ret

0001870c <___svfiprintf_internal_r>:
   1870c:	2880030b 	ldhu	r2,12(r5)
   18710:	deffc804 	addi	sp,sp,-224
   18714:	dcc03115 	stw	r19,196(sp)
   18718:	dfc03715 	stw	ra,220(sp)
   1871c:	df003615 	stw	fp,216(sp)
   18720:	ddc03515 	stw	r23,212(sp)
   18724:	dd803415 	stw	r22,208(sp)
   18728:	dd403315 	stw	r21,204(sp)
   1872c:	dd003215 	stw	r20,200(sp)
   18730:	dc803015 	stw	r18,192(sp)
   18734:	dc402f15 	stw	r17,188(sp)
   18738:	dc002e15 	stw	r16,184(sp)
   1873c:	d9402315 	stw	r5,140(sp)
   18740:	d9002715 	stw	r4,156(sp)
   18744:	1080200c 	andi	r2,r2,128
   18748:	d9c02415 	stw	r7,144(sp)
   1874c:	3027883a 	mov	r19,r6
   18750:	10000226 	beq	r2,zero,1875c <___svfiprintf_internal_r+0x50>
   18754:	28800417 	ldw	r2,16(r5)
   18758:	10046d26 	beq	r2,zero,19910 <___svfiprintf_internal_r+0x1204>
   1875c:	d8801a04 	addi	r2,sp,104
   18760:	d8c019c4 	addi	r3,sp,103
   18764:	058000f4 	movhi	r22,3
   18768:	10c9c83a 	sub	r4,r2,r3
   1876c:	b5aaf704 	addi	r22,r22,-21540
   18770:	d8801e15 	stw	r2,120(sp)
   18774:	d8c01f15 	stw	r3,124(sp)
   18778:	dec01a15 	stw	sp,104(sp)
   1877c:	d8001c15 	stw	zero,112(sp)
   18780:	d8001b15 	stw	zero,108(sp)
   18784:	d811883a 	mov	r8,sp
   18788:	d8002915 	stw	zero,164(sp)
   1878c:	d8002615 	stw	zero,152(sp)
   18790:	d9002c15 	stw	r4,176(sp)
   18794:	98800007 	ldb	r2,0(r19)
   18798:	10031426 	beq	r2,zero,193ec <___svfiprintf_internal_r+0xce0>
   1879c:	00c00944 	movi	r3,37
   187a0:	9825883a 	mov	r18,r19
   187a4:	10c0021e 	bne	r2,r3,187b0 <___svfiprintf_internal_r+0xa4>
   187a8:	00001406 	br	187fc <___svfiprintf_internal_r+0xf0>
   187ac:	10c00326 	beq	r2,r3,187bc <___svfiprintf_internal_r+0xb0>
   187b0:	94800044 	addi	r18,r18,1
   187b4:	90800007 	ldb	r2,0(r18)
   187b8:	103ffc1e 	bne	r2,zero,187ac <__alt_data_end+0xfc0187ac>
   187bc:	94e1c83a 	sub	r16,r18,r19
   187c0:	80000e26 	beq	r16,zero,187fc <___svfiprintf_internal_r+0xf0>
   187c4:	d8c01c17 	ldw	r3,112(sp)
   187c8:	d8801b17 	ldw	r2,108(sp)
   187cc:	44c00015 	stw	r19,0(r8)
   187d0:	1c07883a 	add	r3,r3,r16
   187d4:	10800044 	addi	r2,r2,1
   187d8:	d8c01c15 	stw	r3,112(sp)
   187dc:	44000115 	stw	r16,4(r8)
   187e0:	d8801b15 	stw	r2,108(sp)
   187e4:	00c001c4 	movi	r3,7
   187e8:	18835c16 	blt	r3,r2,1955c <___svfiprintf_internal_r+0xe50>
   187ec:	42000204 	addi	r8,r8,8
   187f0:	d9402617 	ldw	r5,152(sp)
   187f4:	2c0b883a 	add	r5,r5,r16
   187f8:	d9402615 	stw	r5,152(sp)
   187fc:	90800007 	ldb	r2,0(r18)
   18800:	1002fc26 	beq	r2,zero,193f4 <___svfiprintf_internal_r+0xce8>
   18804:	0023883a 	mov	r17,zero
   18808:	00bfffc4 	movi	r2,-1
   1880c:	0021883a 	mov	r16,zero
   18810:	94c00044 	addi	r19,r18,1
   18814:	90c00047 	ldb	r3,1(r18)
   18818:	dc402105 	stb	r17,132(sp)
   1881c:	d8001d85 	stb	zero,118(sp)
   18820:	002b883a 	mov	r21,zero
   18824:	d8802015 	stw	r2,128(sp)
   18828:	d8002515 	stw	zero,148(sp)
   1882c:	04801604 	movi	r18,88
   18830:	05000244 	movi	r20,9
   18834:	402f883a 	mov	r23,r8
   18838:	8023883a 	mov	r17,r16
   1883c:	9cc00044 	addi	r19,r19,1
   18840:	18bff804 	addi	r2,r3,-32
   18844:	9081fb36 	bltu	r18,r2,19034 <___svfiprintf_internal_r+0x928>
   18848:	100490ba 	slli	r2,r2,2
   1884c:	010000b4 	movhi	r4,2
   18850:	21221804 	addi	r4,r4,-30624
   18854:	1105883a 	add	r2,r2,r4
   18858:	10800017 	ldw	r2,0(r2)
   1885c:	1000683a 	jmp	r2
   18860:	00018a60 	cmpeqi	zero,zero,1577
   18864:	00019034 	movhi	zero,1600
   18868:	00019034 	movhi	zero,1600
   1886c:	00018a54 	movui	zero,1577
   18870:	00019034 	movhi	zero,1600
   18874:	00019034 	movhi	zero,1600
   18878:	00019034 	movhi	zero,1600
   1887c:	00019034 	movhi	zero,1600
   18880:	00019034 	movhi	zero,1600
   18884:	00019034 	movhi	zero,1600
   18888:	000189c4 	movi	zero,1575
   1888c:	00018bc0 	call	18bc <_ZN3USB4TaskEv+0xa0>
   18890:	00019034 	movhi	zero,1600
   18894:	000189ec 	andhi	zero,zero,1575
   18898:	00019070 	cmpltui	zero,zero,1601
   1889c:	00019034 	movhi	zero,1600
   188a0:	00019064 	muli	zero,zero,1601
   188a4:	00018ff8 	rdprs	zero,zero,1599
   188a8:	00018ff8 	rdprs	zero,zero,1599
   188ac:	00018ff8 	rdprs	zero,zero,1599
   188b0:	00018ff8 	rdprs	zero,zero,1599
   188b4:	00018ff8 	rdprs	zero,zero,1599
   188b8:	00018ff8 	rdprs	zero,zero,1599
   188bc:	00018ff8 	rdprs	zero,zero,1599
   188c0:	00018ff8 	rdprs	zero,zero,1599
   188c4:	00018ff8 	rdprs	zero,zero,1599
   188c8:	00019034 	movhi	zero,1600
   188cc:	00019034 	movhi	zero,1600
   188d0:	00019034 	movhi	zero,1600
   188d4:	00019034 	movhi	zero,1600
   188d8:	00019034 	movhi	zero,1600
   188dc:	00019034 	movhi	zero,1600
   188e0:	00019034 	movhi	zero,1600
   188e4:	00019034 	movhi	zero,1600
   188e8:	00019034 	movhi	zero,1600
   188ec:	00019034 	movhi	zero,1600
   188f0:	00018f7c 	xorhi	zero,zero,1597
   188f4:	00019034 	movhi	zero,1600
   188f8:	00019034 	movhi	zero,1600
   188fc:	00019034 	movhi	zero,1600
   18900:	00019034 	movhi	zero,1600
   18904:	00019034 	movhi	zero,1600
   18908:	00019034 	movhi	zero,1600
   1890c:	00019034 	movhi	zero,1600
   18910:	00019034 	movhi	zero,1600
   18914:	00019034 	movhi	zero,1600
   18918:	00019034 	movhi	zero,1600
   1891c:	0001912c 	andhi	zero,zero,1604
   18920:	00019034 	movhi	zero,1600
   18924:	00019034 	movhi	zero,1600
   18928:	00019034 	movhi	zero,1600
   1892c:	00019034 	movhi	zero,1600
   18930:	00019034 	movhi	zero,1600
   18934:	000190b8 	rdprs	zero,zero,1602
   18938:	00019034 	movhi	zero,1600
   1893c:	00019034 	movhi	zero,1600
   18940:	00018db8 	rdprs	zero,zero,1590
   18944:	00019034 	movhi	zero,1600
   18948:	00019034 	movhi	zero,1600
   1894c:	00019034 	movhi	zero,1600
   18950:	00019034 	movhi	zero,1600
   18954:	00019034 	movhi	zero,1600
   18958:	00019034 	movhi	zero,1600
   1895c:	00019034 	movhi	zero,1600
   18960:	00019034 	movhi	zero,1600
   18964:	00019034 	movhi	zero,1600
   18968:	00019034 	movhi	zero,1600
   1896c:	00018c84 	movi	zero,1586
   18970:	00018e68 	cmpgeui	zero,zero,1593
   18974:	00019034 	movhi	zero,1600
   18978:	00019034 	movhi	zero,1600
   1897c:	00019034 	movhi	zero,1600
   18980:	00018e5c 	xori	zero,zero,1593
   18984:	00018e68 	cmpgeui	zero,zero,1593
   18988:	00019034 	movhi	zero,1600
   1898c:	00019034 	movhi	zero,1600
   18990:	00018e48 	cmpgei	zero,zero,1593
   18994:	00019034 	movhi	zero,1600
   18998:	00018e08 	cmpgei	zero,zero,1592
   1899c:	00018bd4 	movui	zero,1583
   189a0:	000189f8 	rdprs	zero,zero,1575
   189a4:	00018f70 	cmpltui	zero,zero,1597
   189a8:	00019034 	movhi	zero,1600
   189ac:	00018f1c 	xori	zero,zero,1596
   189b0:	00019034 	movhi	zero,1600
   189b4:	00018b38 	rdprs	zero,zero,1580
   189b8:	00019034 	movhi	zero,1600
   189bc:	00019034 	movhi	zero,1600
   189c0:	00018a84 	movi	zero,1578
   189c4:	d9002417 	ldw	r4,144(sp)
   189c8:	d9402417 	ldw	r5,144(sp)
   189cc:	21000017 	ldw	r4,0(r4)
   189d0:	28800104 	addi	r2,r5,4
   189d4:	d9002515 	stw	r4,148(sp)
   189d8:	20032b0e 	bge	r4,zero,19688 <___svfiprintf_internal_r+0xf7c>
   189dc:	d8c02517 	ldw	r3,148(sp)
   189e0:	d8802415 	stw	r2,144(sp)
   189e4:	00c7c83a 	sub	r3,zero,r3
   189e8:	d8c02515 	stw	r3,148(sp)
   189ec:	8c400114 	ori	r17,r17,4
   189f0:	98c00007 	ldb	r3,0(r19)
   189f4:	003f9106 	br	1883c <__alt_data_end+0xfc01883c>
   189f8:	00800c04 	movi	r2,48
   189fc:	d9402417 	ldw	r5,144(sp)
   18a00:	d9002017 	ldw	r4,128(sp)
   18a04:	d8801d05 	stb	r2,116(sp)
   18a08:	00801e04 	movi	r2,120
   18a0c:	d8801d45 	stb	r2,117(sp)
   18a10:	d8001d85 	stb	zero,118(sp)
   18a14:	b811883a 	mov	r8,r23
   18a18:	28c00104 	addi	r3,r5,4
   18a1c:	2c800017 	ldw	r18,0(r5)
   18a20:	0029883a 	mov	r20,zero
   18a24:	88800094 	ori	r2,r17,2
   18a28:	20036316 	blt	r4,zero,197b8 <___svfiprintf_internal_r+0x10ac>
   18a2c:	00bfdfc4 	movi	r2,-129
   18a30:	88a0703a 	and	r16,r17,r2
   18a34:	d8c02415 	stw	r3,144(sp)
   18a38:	84000094 	ori	r16,r16,2
   18a3c:	90031c26 	beq	r18,zero,196b0 <___svfiprintf_internal_r+0xfa4>
   18a40:	014000f4 	movhi	r5,3
   18a44:	296a8f04 	addi	r5,r5,-21956
   18a48:	002b883a 	mov	r21,zero
   18a4c:	d9402915 	stw	r5,164(sp)
   18a50:	00002906 	br	18af8 <___svfiprintf_internal_r+0x3ec>
   18a54:	8c400054 	ori	r17,r17,1
   18a58:	98c00007 	ldb	r3,0(r19)
   18a5c:	003f7706 	br	1883c <__alt_data_end+0xfc01883c>
   18a60:	a8803fcc 	andi	r2,r21,255
   18a64:	1080201c 	xori	r2,r2,128
   18a68:	10bfe004 	addi	r2,r2,-128
   18a6c:	10032a1e 	bne	r2,zero,19718 <___svfiprintf_internal_r+0x100c>
   18a70:	00c00044 	movi	r3,1
   18a74:	d8c02105 	stb	r3,132(sp)
   18a78:	05400804 	movi	r21,32
   18a7c:	98c00007 	ldb	r3,0(r19)
   18a80:	003f6e06 	br	1883c <__alt_data_end+0xfc01883c>
   18a84:	8821883a 	mov	r16,r17
   18a88:	dc402103 	ldbu	r17,132(sp)
   18a8c:	b811883a 	mov	r8,r23
   18a90:	8c403fcc 	andi	r17,r17,255
   18a94:	8803f01e 	bne	r17,zero,19a58 <___svfiprintf_internal_r+0x134c>
   18a98:	008000f4 	movhi	r2,3
   18a9c:	10aa8f04 	addi	r2,r2,-21956
   18aa0:	d8802915 	stw	r2,164(sp)
   18aa4:	8080080c 	andi	r2,r16,32
   18aa8:	1000cd26 	beq	r2,zero,18de0 <___svfiprintf_internal_r+0x6d4>
   18aac:	d9002417 	ldw	r4,144(sp)
   18ab0:	24800017 	ldw	r18,0(r4)
   18ab4:	25000117 	ldw	r20,4(r4)
   18ab8:	21000204 	addi	r4,r4,8
   18abc:	d9002415 	stw	r4,144(sp)
   18ac0:	8080004c 	andi	r2,r16,1
   18ac4:	1002c726 	beq	r2,zero,195e4 <___svfiprintf_internal_r+0xed8>
   18ac8:	9504b03a 	or	r2,r18,r20
   18acc:	1003061e 	bne	r2,zero,196e8 <___svfiprintf_internal_r+0xfdc>
   18ad0:	d9002017 	ldw	r4,128(sp)
   18ad4:	d8001d85 	stb	zero,118(sp)
   18ad8:	20033e16 	blt	r4,zero,197d4 <___svfiprintf_internal_r+0x10c8>
   18adc:	00bfdfc4 	movi	r2,-129
   18ae0:	80a0703a 	and	r16,r16,r2
   18ae4:	d9402017 	ldw	r5,128(sp)
   18ae8:	002b883a 	mov	r21,zero
   18aec:	28002826 	beq	r5,zero,18b90 <___svfiprintf_internal_r+0x484>
   18af0:	0025883a 	mov	r18,zero
   18af4:	0029883a 	mov	r20,zero
   18af8:	d9002917 	ldw	r4,164(sp)
   18afc:	dc401a04 	addi	r17,sp,104
   18b00:	908003cc 	andi	r2,r18,15
   18b04:	a006973a 	slli	r3,r20,28
   18b08:	2085883a 	add	r2,r4,r2
   18b0c:	9024d13a 	srli	r18,r18,4
   18b10:	10800003 	ldbu	r2,0(r2)
   18b14:	a028d13a 	srli	r20,r20,4
   18b18:	8c7fffc4 	addi	r17,r17,-1
   18b1c:	1ca4b03a 	or	r18,r3,r18
   18b20:	88800005 	stb	r2,0(r17)
   18b24:	9504b03a 	or	r2,r18,r20
   18b28:	103ff51e 	bne	r2,zero,18b00 <__alt_data_end+0xfc018b00>
   18b2c:	d8801e17 	ldw	r2,120(sp)
   18b30:	1469c83a 	sub	r20,r2,r17
   18b34:	00001906 	br	18b9c <___svfiprintf_internal_r+0x490>
   18b38:	8821883a 	mov	r16,r17
   18b3c:	dc402103 	ldbu	r17,132(sp)
   18b40:	b811883a 	mov	r8,r23
   18b44:	8c403fcc 	andi	r17,r17,255
   18b48:	8803d01e 	bne	r17,zero,19a8c <___svfiprintf_internal_r+0x1380>
   18b4c:	8080080c 	andi	r2,r16,32
   18b50:	10016126 	beq	r2,zero,190d8 <___svfiprintf_internal_r+0x9cc>
   18b54:	d9002417 	ldw	r4,144(sp)
   18b58:	d9402017 	ldw	r5,128(sp)
   18b5c:	d8001d85 	stb	zero,118(sp)
   18b60:	20c00204 	addi	r3,r4,8
   18b64:	24800017 	ldw	r18,0(r4)
   18b68:	25000117 	ldw	r20,4(r4)
   18b6c:	28030f16 	blt	r5,zero,197ac <___svfiprintf_internal_r+0x10a0>
   18b70:	013fdfc4 	movi	r4,-129
   18b74:	9504b03a 	or	r2,r18,r20
   18b78:	d8c02415 	stw	r3,144(sp)
   18b7c:	8120703a 	and	r16,r16,r4
   18b80:	002b883a 	mov	r21,zero
   18b84:	1000cd1e 	bne	r2,zero,18ebc <___svfiprintf_internal_r+0x7b0>
   18b88:	d8c02017 	ldw	r3,128(sp)
   18b8c:	1803141e 	bne	r3,zero,197e0 <___svfiprintf_internal_r+0x10d4>
   18b90:	d8002015 	stw	zero,128(sp)
   18b94:	0029883a 	mov	r20,zero
   18b98:	dc401a04 	addi	r17,sp,104
   18b9c:	dc802017 	ldw	r18,128(sp)
   18ba0:	9500010e 	bge	r18,r20,18ba8 <___svfiprintf_internal_r+0x49c>
   18ba4:	a025883a 	mov	r18,r20
   18ba8:	ad403fcc 	andi	r21,r21,255
   18bac:	ad40201c 	xori	r21,r21,128
   18bb0:	ad7fe004 	addi	r21,r21,-128
   18bb4:	a8003f26 	beq	r21,zero,18cb4 <___svfiprintf_internal_r+0x5a8>
   18bb8:	94800044 	addi	r18,r18,1
   18bbc:	00003d06 	br	18cb4 <___svfiprintf_internal_r+0x5a8>
   18bc0:	00c00044 	movi	r3,1
   18bc4:	d8c02105 	stb	r3,132(sp)
   18bc8:	05400ac4 	movi	r21,43
   18bcc:	98c00007 	ldb	r3,0(r19)
   18bd0:	003f1a06 	br	1883c <__alt_data_end+0xfc01883c>
   18bd4:	8821883a 	mov	r16,r17
   18bd8:	dc402103 	ldbu	r17,132(sp)
   18bdc:	b811883a 	mov	r8,r23
   18be0:	8c403fcc 	andi	r17,r17,255
   18be4:	8803a71e 	bne	r17,zero,19a84 <___svfiprintf_internal_r+0x1378>
   18be8:	8080080c 	andi	r2,r16,32
   18bec:	10015726 	beq	r2,zero,1914c <___svfiprintf_internal_r+0xa40>
   18bf0:	d8c02417 	ldw	r3,144(sp)
   18bf4:	d9002017 	ldw	r4,128(sp)
   18bf8:	d8001d85 	stb	zero,118(sp)
   18bfc:	18800204 	addi	r2,r3,8
   18c00:	1c800017 	ldw	r18,0(r3)
   18c04:	1d000117 	ldw	r20,4(r3)
   18c08:	2002db16 	blt	r4,zero,19778 <___svfiprintf_internal_r+0x106c>
   18c0c:	013fdfc4 	movi	r4,-129
   18c10:	9506b03a 	or	r3,r18,r20
   18c14:	d8802415 	stw	r2,144(sp)
   18c18:	8120703a 	and	r16,r16,r4
   18c1c:	18015826 	beq	r3,zero,19180 <___svfiprintf_internal_r+0xa74>
   18c20:	002b883a 	mov	r21,zero
   18c24:	dc401a04 	addi	r17,sp,104
   18c28:	9006d0fa 	srli	r3,r18,3
   18c2c:	a008977a 	slli	r4,r20,29
   18c30:	a028d0fa 	srli	r20,r20,3
   18c34:	948001cc 	andi	r18,r18,7
   18c38:	90800c04 	addi	r2,r18,48
   18c3c:	8c7fffc4 	addi	r17,r17,-1
   18c40:	20e4b03a 	or	r18,r4,r3
   18c44:	88800005 	stb	r2,0(r17)
   18c48:	9506b03a 	or	r3,r18,r20
   18c4c:	183ff61e 	bne	r3,zero,18c28 <__alt_data_end+0xfc018c28>
   18c50:	80c0004c 	andi	r3,r16,1
   18c54:	18028926 	beq	r3,zero,1967c <___svfiprintf_internal_r+0xf70>
   18c58:	10803fcc 	andi	r2,r2,255
   18c5c:	1080201c 	xori	r2,r2,128
   18c60:	10bfe004 	addi	r2,r2,-128
   18c64:	00c00c04 	movi	r3,48
   18c68:	10ffb026 	beq	r2,r3,18b2c <__alt_data_end+0xfc018b2c>
   18c6c:	88ffffc5 	stb	r3,-1(r17)
   18c70:	d8c01e17 	ldw	r3,120(sp)
   18c74:	88bfffc4 	addi	r2,r17,-1
   18c78:	1023883a 	mov	r17,r2
   18c7c:	18a9c83a 	sub	r20,r3,r2
   18c80:	003fc606 	br	18b9c <__alt_data_end+0xfc018b9c>
   18c84:	d8c02417 	ldw	r3,144(sp)
   18c88:	04800044 	movi	r18,1
   18c8c:	8821883a 	mov	r16,r17
   18c90:	18800017 	ldw	r2,0(r3)
   18c94:	18c00104 	addi	r3,r3,4
   18c98:	b811883a 	mov	r8,r23
   18c9c:	d8001d85 	stb	zero,118(sp)
   18ca0:	d8801005 	stb	r2,64(sp)
   18ca4:	d8c02415 	stw	r3,144(sp)
   18ca8:	9029883a 	mov	r20,r18
   18cac:	dc401004 	addi	r17,sp,64
   18cb0:	d8002015 	stw	zero,128(sp)
   18cb4:	80c0008c 	andi	r3,r16,2
   18cb8:	d8c02115 	stw	r3,132(sp)
   18cbc:	18000126 	beq	r3,zero,18cc4 <___svfiprintf_internal_r+0x5b8>
   18cc0:	94800084 	addi	r18,r18,2
   18cc4:	80c0210c 	andi	r3,r16,132
   18cc8:	d8c02215 	stw	r3,136(sp)
   18ccc:	1801321e 	bne	r3,zero,19198 <___svfiprintf_internal_r+0xa8c>
   18cd0:	d9002517 	ldw	r4,148(sp)
   18cd4:	24b9c83a 	sub	fp,r4,r18
   18cd8:	07012f0e 	bge	zero,fp,19198 <___svfiprintf_internal_r+0xa8c>
   18cdc:	02400404 	movi	r9,16
   18ce0:	d8c01c17 	ldw	r3,112(sp)
   18ce4:	d8801b17 	ldw	r2,108(sp)
   18ce8:	4f03250e 	bge	r9,fp,19980 <___svfiprintf_internal_r+0x1274>
   18cec:	010000f4 	movhi	r4,3
   18cf0:	212afb04 	addi	r4,r4,-21524
   18cf4:	dc002a15 	stw	r16,168(sp)
   18cf8:	dc402b15 	stw	r17,172(sp)
   18cfc:	d9002815 	stw	r4,160(sp)
   18d00:	e023883a 	mov	r17,fp
   18d04:	482f883a 	mov	r23,r9
   18d08:	9839883a 	mov	fp,r19
   18d0c:	054001c4 	movi	r21,7
   18d10:	9027883a 	mov	r19,r18
   18d14:	dc002717 	ldw	r16,156(sp)
   18d18:	dc802317 	ldw	r18,140(sp)
   18d1c:	00000306 	br	18d2c <___svfiprintf_internal_r+0x620>
   18d20:	8c7ffc04 	addi	r17,r17,-16
   18d24:	42000204 	addi	r8,r8,8
   18d28:	bc40130e 	bge	r23,r17,18d78 <___svfiprintf_internal_r+0x66c>
   18d2c:	014000f4 	movhi	r5,3
   18d30:	18c00404 	addi	r3,r3,16
   18d34:	10800044 	addi	r2,r2,1
   18d38:	296afb04 	addi	r5,r5,-21524
   18d3c:	41400015 	stw	r5,0(r8)
   18d40:	45c00115 	stw	r23,4(r8)
   18d44:	d8c01c15 	stw	r3,112(sp)
   18d48:	d8801b15 	stw	r2,108(sp)
   18d4c:	a8bff40e 	bge	r21,r2,18d20 <__alt_data_end+0xfc018d20>
   18d50:	d9801a04 	addi	r6,sp,104
   18d54:	900b883a 	mov	r5,r18
   18d58:	8009883a 	mov	r4,r16
   18d5c:	001853c0 	call	1853c <__ssprint_r>
   18d60:	1001aa1e 	bne	r2,zero,1940c <___svfiprintf_internal_r+0xd00>
   18d64:	8c7ffc04 	addi	r17,r17,-16
   18d68:	d8c01c17 	ldw	r3,112(sp)
   18d6c:	d8801b17 	ldw	r2,108(sp)
   18d70:	d811883a 	mov	r8,sp
   18d74:	bc7fed16 	blt	r23,r17,18d2c <__alt_data_end+0xfc018d2c>
   18d78:	9825883a 	mov	r18,r19
   18d7c:	dc002a17 	ldw	r16,168(sp)
   18d80:	e027883a 	mov	r19,fp
   18d84:	8839883a 	mov	fp,r17
   18d88:	dc402b17 	ldw	r17,172(sp)
   18d8c:	d9002817 	ldw	r4,160(sp)
   18d90:	e0c7883a 	add	r3,fp,r3
   18d94:	10800044 	addi	r2,r2,1
   18d98:	41000015 	stw	r4,0(r8)
   18d9c:	47000115 	stw	fp,4(r8)
   18da0:	d8c01c15 	stw	r3,112(sp)
   18da4:	d8801b15 	stw	r2,108(sp)
   18da8:	010001c4 	movi	r4,7
   18dac:	20821616 	blt	r4,r2,19608 <___svfiprintf_internal_r+0xefc>
   18db0:	42000204 	addi	r8,r8,8
   18db4:	0000fa06 	br	191a0 <___svfiprintf_internal_r+0xa94>
   18db8:	8821883a 	mov	r16,r17
   18dbc:	dc402103 	ldbu	r17,132(sp)
   18dc0:	b811883a 	mov	r8,r23
   18dc4:	8c403fcc 	andi	r17,r17,255
   18dc8:	8803361e 	bne	r17,zero,19aa4 <___svfiprintf_internal_r+0x1398>
   18dcc:	014000f4 	movhi	r5,3
   18dd0:	296a8a04 	addi	r5,r5,-21976
   18dd4:	d9402915 	stw	r5,164(sp)
   18dd8:	8080080c 	andi	r2,r16,32
   18ddc:	103f331e 	bne	r2,zero,18aac <__alt_data_end+0xfc018aac>
   18de0:	8080040c 	andi	r2,r16,16
   18de4:	1002551e 	bne	r2,zero,1973c <___svfiprintf_internal_r+0x1030>
   18de8:	8080100c 	andi	r2,r16,64
   18dec:	1002a626 	beq	r2,zero,19888 <___svfiprintf_internal_r+0x117c>
   18df0:	d8802417 	ldw	r2,144(sp)
   18df4:	0029883a 	mov	r20,zero
   18df8:	1480000b 	ldhu	r18,0(r2)
   18dfc:	10800104 	addi	r2,r2,4
   18e00:	d8802415 	stw	r2,144(sp)
   18e04:	003f2e06 	br	18ac0 <__alt_data_end+0xfc018ac0>
   18e08:	8821883a 	mov	r16,r17
   18e0c:	dc402103 	ldbu	r17,132(sp)
   18e10:	b811883a 	mov	r8,r23
   18e14:	8c403fcc 	andi	r17,r17,255
   18e18:	88030b1e 	bne	r17,zero,19a48 <___svfiprintf_internal_r+0x133c>
   18e1c:	8080080c 	andi	r2,r16,32
   18e20:	1002271e 	bne	r2,zero,196c0 <___svfiprintf_internal_r+0xfb4>
   18e24:	8080040c 	andi	r2,r16,16
   18e28:	10028e26 	beq	r2,zero,19864 <___svfiprintf_internal_r+0x1158>
   18e2c:	d8c02417 	ldw	r3,144(sp)
   18e30:	d9002617 	ldw	r4,152(sp)
   18e34:	18800017 	ldw	r2,0(r3)
   18e38:	18c00104 	addi	r3,r3,4
   18e3c:	d8c02415 	stw	r3,144(sp)
   18e40:	11000015 	stw	r4,0(r2)
   18e44:	003e5306 	br	18794 <__alt_data_end+0xfc018794>
   18e48:	98c00007 	ldb	r3,0(r19)
   18e4c:	01401b04 	movi	r5,108
   18e50:	19424f26 	beq	r3,r5,19790 <___svfiprintf_internal_r+0x1084>
   18e54:	8c400414 	ori	r17,r17,16
   18e58:	003e7806 	br	1883c <__alt_data_end+0xfc01883c>
   18e5c:	8c401014 	ori	r17,r17,64
   18e60:	98c00007 	ldb	r3,0(r19)
   18e64:	003e7506 	br	1883c <__alt_data_end+0xfc01883c>
   18e68:	8821883a 	mov	r16,r17
   18e6c:	dc402103 	ldbu	r17,132(sp)
   18e70:	b811883a 	mov	r8,r23
   18e74:	8c403fcc 	andi	r17,r17,255
   18e78:	8802fe1e 	bne	r17,zero,19a74 <___svfiprintf_internal_r+0x1368>
   18e7c:	8080080c 	andi	r2,r16,32
   18e80:	10004626 	beq	r2,zero,18f9c <___svfiprintf_internal_r+0x890>
   18e84:	d9002417 	ldw	r4,144(sp)
   18e88:	20800117 	ldw	r2,4(r4)
   18e8c:	24800017 	ldw	r18,0(r4)
   18e90:	21000204 	addi	r4,r4,8
   18e94:	d9002415 	stw	r4,144(sp)
   18e98:	1029883a 	mov	r20,r2
   18e9c:	10004a16 	blt	r2,zero,18fc8 <___svfiprintf_internal_r+0x8bc>
   18ea0:	d9002017 	ldw	r4,128(sp)
   18ea4:	dd401d83 	ldbu	r21,118(sp)
   18ea8:	2001eb16 	blt	r4,zero,19658 <___svfiprintf_internal_r+0xf4c>
   18eac:	00ffdfc4 	movi	r3,-129
   18eb0:	9504b03a 	or	r2,r18,r20
   18eb4:	80e0703a 	and	r16,r16,r3
   18eb8:	103f3326 	beq	r2,zero,18b88 <__alt_data_end+0xfc018b88>
   18ebc:	a0009426 	beq	r20,zero,19110 <___svfiprintf_internal_r+0xa04>
   18ec0:	dc401a04 	addi	r17,sp,104
   18ec4:	402f883a 	mov	r23,r8
   18ec8:	9009883a 	mov	r4,r18
   18ecc:	a00b883a 	mov	r5,r20
   18ed0:	01800284 	movi	r6,10
   18ed4:	000f883a 	mov	r7,zero
   18ed8:	001c0ec0 	call	1c0ec <__umoddi3>
   18edc:	10800c04 	addi	r2,r2,48
   18ee0:	8c7fffc4 	addi	r17,r17,-1
   18ee4:	9009883a 	mov	r4,r18
   18ee8:	a00b883a 	mov	r5,r20
   18eec:	88800005 	stb	r2,0(r17)
   18ef0:	01800284 	movi	r6,10
   18ef4:	000f883a 	mov	r7,zero
   18ef8:	001baf00 	call	1baf0 <__udivdi3>
   18efc:	1025883a 	mov	r18,r2
   18f00:	10c4b03a 	or	r2,r2,r3
   18f04:	1829883a 	mov	r20,r3
   18f08:	103fef1e 	bne	r2,zero,18ec8 <__alt_data_end+0xfc018ec8>
   18f0c:	d9001e17 	ldw	r4,120(sp)
   18f10:	b811883a 	mov	r8,r23
   18f14:	2469c83a 	sub	r20,r4,r17
   18f18:	003f2006 	br	18b9c <__alt_data_end+0xfc018b9c>
   18f1c:	d8802417 	ldw	r2,144(sp)
   18f20:	8821883a 	mov	r16,r17
   18f24:	d8001d85 	stb	zero,118(sp)
   18f28:	14400017 	ldw	r17,0(r2)
   18f2c:	b811883a 	mov	r8,r23
   18f30:	15c00104 	addi	r23,r2,4
   18f34:	88026c26 	beq	r17,zero,198e8 <___svfiprintf_internal_r+0x11dc>
   18f38:	d8c02017 	ldw	r3,128(sp)
   18f3c:	18025f16 	blt	r3,zero,198bc <___svfiprintf_internal_r+0x11b0>
   18f40:	180d883a 	mov	r6,r3
   18f44:	000b883a 	mov	r5,zero
   18f48:	8809883a 	mov	r4,r17
   18f4c:	da002d15 	stw	r8,180(sp)
   18f50:	00169c80 	call	169c8 <memchr>
   18f54:	da002d17 	ldw	r8,180(sp)
   18f58:	1002a526 	beq	r2,zero,199f0 <___svfiprintf_internal_r+0x12e4>
   18f5c:	1469c83a 	sub	r20,r2,r17
   18f60:	dd401d83 	ldbu	r21,118(sp)
   18f64:	ddc02415 	stw	r23,144(sp)
   18f68:	d8002015 	stw	zero,128(sp)
   18f6c:	003f0b06 	br	18b9c <__alt_data_end+0xfc018b9c>
   18f70:	8c400814 	ori	r17,r17,32
   18f74:	98c00007 	ldb	r3,0(r19)
   18f78:	003e3006 	br	1883c <__alt_data_end+0xfc01883c>
   18f7c:	8821883a 	mov	r16,r17
   18f80:	dc402103 	ldbu	r17,132(sp)
   18f84:	b811883a 	mov	r8,r23
   18f88:	8c403fcc 	andi	r17,r17,255
   18f8c:	8802b01e 	bne	r17,zero,19a50 <___svfiprintf_internal_r+0x1344>
   18f90:	84000414 	ori	r16,r16,16
   18f94:	8080080c 	andi	r2,r16,32
   18f98:	103fba1e 	bne	r2,zero,18e84 <__alt_data_end+0xfc018e84>
   18f9c:	8080040c 	andi	r2,r16,16
   18fa0:	1001df1e 	bne	r2,zero,19720 <___svfiprintf_internal_r+0x1014>
   18fa4:	8080100c 	andi	r2,r16,64
   18fa8:	10023d26 	beq	r2,zero,198a0 <___svfiprintf_internal_r+0x1194>
   18fac:	d8802417 	ldw	r2,144(sp)
   18fb0:	1480000f 	ldh	r18,0(r2)
   18fb4:	10800104 	addi	r2,r2,4
   18fb8:	d8802415 	stw	r2,144(sp)
   18fbc:	9029d7fa 	srai	r20,r18,31
   18fc0:	a005883a 	mov	r2,r20
   18fc4:	103fb60e 	bge	r2,zero,18ea0 <__alt_data_end+0xfc018ea0>
   18fc8:	d9402017 	ldw	r5,128(sp)
   18fcc:	04a5c83a 	sub	r18,zero,r18
   18fd0:	05400b44 	movi	r21,45
   18fd4:	9004c03a 	cmpne	r2,r18,zero
   18fd8:	0529c83a 	sub	r20,zero,r20
   18fdc:	dd401d85 	stb	r21,118(sp)
   18fe0:	a0a9c83a 	sub	r20,r20,r2
   18fe4:	28026c16 	blt	r5,zero,19998 <___svfiprintf_internal_r+0x128c>
   18fe8:	00bfdfc4 	movi	r2,-129
   18fec:	80a0703a 	and	r16,r16,r2
   18ff0:	a03fb31e 	bne	r20,zero,18ec0 <__alt_data_end+0xfc018ec0>
   18ff4:	00004606 	br	19110 <___svfiprintf_internal_r+0xa04>
   18ff8:	9839883a 	mov	fp,r19
   18ffc:	d8002515 	stw	zero,148(sp)
   19000:	1c3ff404 	addi	r16,r3,-48
   19004:	0009883a 	mov	r4,zero
   19008:	01400284 	movi	r5,10
   1900c:	000cec40 	call	cec4 <__mulsi3>
   19010:	e0c00007 	ldb	r3,0(fp)
   19014:	8089883a 	add	r4,r16,r2
   19018:	9cc00044 	addi	r19,r19,1
   1901c:	1c3ff404 	addi	r16,r3,-48
   19020:	9839883a 	mov	fp,r19
   19024:	a43ff82e 	bgeu	r20,r16,19008 <__alt_data_end+0xfc019008>
   19028:	d9002515 	stw	r4,148(sp)
   1902c:	18bff804 	addi	r2,r3,-32
   19030:	90be052e 	bgeu	r18,r2,18848 <__alt_data_end+0xfc018848>
   19034:	8821883a 	mov	r16,r17
   19038:	dc402103 	ldbu	r17,132(sp)
   1903c:	b811883a 	mov	r8,r23
   19040:	8c403fcc 	andi	r17,r17,255
   19044:	88028d1e 	bne	r17,zero,19a7c <___svfiprintf_internal_r+0x1370>
   19048:	1800ea26 	beq	r3,zero,193f4 <___svfiprintf_internal_r+0xce8>
   1904c:	04800044 	movi	r18,1
   19050:	d8c01005 	stb	r3,64(sp)
   19054:	d8001d85 	stb	zero,118(sp)
   19058:	9029883a 	mov	r20,r18
   1905c:	dc401004 	addi	r17,sp,64
   19060:	003f1306 	br	18cb0 <__alt_data_end+0xfc018cb0>
   19064:	8c402014 	ori	r17,r17,128
   19068:	98c00007 	ldb	r3,0(r19)
   1906c:	003df306 	br	1883c <__alt_data_end+0xfc01883c>
   19070:	98c00007 	ldb	r3,0(r19)
   19074:	01000a84 	movi	r4,42
   19078:	9f000044 	addi	fp,r19,1
   1907c:	19026326 	beq	r3,r4,19a0c <___svfiprintf_internal_r+0x1300>
   19080:	1c3ff404 	addi	r16,r3,-48
   19084:	0009883a 	mov	r4,zero
   19088:	a4025636 	bltu	r20,r16,199e4 <___svfiprintf_internal_r+0x12d8>
   1908c:	01400284 	movi	r5,10
   19090:	000cec40 	call	cec4 <__mulsi3>
   19094:	e0c00007 	ldb	r3,0(fp)
   19098:	1409883a 	add	r4,r2,r16
   1909c:	e4c00044 	addi	r19,fp,1
   190a0:	1c3ff404 	addi	r16,r3,-48
   190a4:	9839883a 	mov	fp,r19
   190a8:	a43ff82e 	bgeu	r20,r16,1908c <__alt_data_end+0xfc01908c>
   190ac:	20020c16 	blt	r4,zero,198e0 <___svfiprintf_internal_r+0x11d4>
   190b0:	d9002015 	stw	r4,128(sp)
   190b4:	003de206 	br	18840 <__alt_data_end+0xfc018840>
   190b8:	8821883a 	mov	r16,r17
   190bc:	dc402103 	ldbu	r17,132(sp)
   190c0:	b811883a 	mov	r8,r23
   190c4:	8c403fcc 	andi	r17,r17,255
   190c8:	8802721e 	bne	r17,zero,19a94 <___svfiprintf_internal_r+0x1388>
   190cc:	84000414 	ori	r16,r16,16
   190d0:	8080080c 	andi	r2,r16,32
   190d4:	103e9f1e 	bne	r2,zero,18b54 <__alt_data_end+0xfc018b54>
   190d8:	8080040c 	andi	r2,r16,16
   190dc:	10015326 	beq	r2,zero,1962c <___svfiprintf_internal_r+0xf20>
   190e0:	d8c02417 	ldw	r3,144(sp)
   190e4:	d9002017 	ldw	r4,128(sp)
   190e8:	d8001d85 	stb	zero,118(sp)
   190ec:	18800104 	addi	r2,r3,4
   190f0:	1c800017 	ldw	r18,0(r3)
   190f4:	0029883a 	mov	r20,zero
   190f8:	20015516 	blt	r4,zero,19650 <___svfiprintf_internal_r+0xf44>
   190fc:	00ffdfc4 	movi	r3,-129
   19100:	d8802415 	stw	r2,144(sp)
   19104:	80e0703a 	and	r16,r16,r3
   19108:	002b883a 	mov	r21,zero
   1910c:	903e9e26 	beq	r18,zero,18b88 <__alt_data_end+0xfc018b88>
   19110:	00800244 	movi	r2,9
   19114:	14bf6a36 	bltu	r2,r18,18ec0 <__alt_data_end+0xfc018ec0>
   19118:	94800c04 	addi	r18,r18,48
   1911c:	dc8019c5 	stb	r18,103(sp)
   19120:	dd002c17 	ldw	r20,176(sp)
   19124:	dc4019c4 	addi	r17,sp,103
   19128:	003e9c06 	br	18b9c <__alt_data_end+0xfc018b9c>
   1912c:	8821883a 	mov	r16,r17
   19130:	dc402103 	ldbu	r17,132(sp)
   19134:	b811883a 	mov	r8,r23
   19138:	8c403fcc 	andi	r17,r17,255
   1913c:	8802571e 	bne	r17,zero,19a9c <___svfiprintf_internal_r+0x1390>
   19140:	84000414 	ori	r16,r16,16
   19144:	8080080c 	andi	r2,r16,32
   19148:	103ea91e 	bne	r2,zero,18bf0 <__alt_data_end+0xfc018bf0>
   1914c:	8080040c 	andi	r2,r16,16
   19150:	10018026 	beq	r2,zero,19754 <___svfiprintf_internal_r+0x1048>
   19154:	d9402417 	ldw	r5,144(sp)
   19158:	d8c02017 	ldw	r3,128(sp)
   1915c:	d8001d85 	stb	zero,118(sp)
   19160:	28800104 	addi	r2,r5,4
   19164:	2c800017 	ldw	r18,0(r5)
   19168:	0029883a 	mov	r20,zero
   1916c:	18018216 	blt	r3,zero,19778 <___svfiprintf_internal_r+0x106c>
   19170:	00ffdfc4 	movi	r3,-129
   19174:	d8802415 	stw	r2,144(sp)
   19178:	80e0703a 	and	r16,r16,r3
   1917c:	903ea81e 	bne	r18,zero,18c20 <__alt_data_end+0xfc018c20>
   19180:	d8802017 	ldw	r2,128(sp)
   19184:	002b883a 	mov	r21,zero
   19188:	1001f226 	beq	r2,zero,19954 <___svfiprintf_internal_r+0x1248>
   1918c:	0025883a 	mov	r18,zero
   19190:	0029883a 	mov	r20,zero
   19194:	003ea306 	br	18c24 <__alt_data_end+0xfc018c24>
   19198:	d8c01c17 	ldw	r3,112(sp)
   1919c:	d8801b17 	ldw	r2,108(sp)
   191a0:	d9001d87 	ldb	r4,118(sp)
   191a4:	20000b26 	beq	r4,zero,191d4 <___svfiprintf_internal_r+0xac8>
   191a8:	d9001d84 	addi	r4,sp,118
   191ac:	18c00044 	addi	r3,r3,1
   191b0:	10800044 	addi	r2,r2,1
   191b4:	41000015 	stw	r4,0(r8)
   191b8:	01000044 	movi	r4,1
   191bc:	41000115 	stw	r4,4(r8)
   191c0:	d8c01c15 	stw	r3,112(sp)
   191c4:	d8801b15 	stw	r2,108(sp)
   191c8:	010001c4 	movi	r4,7
   191cc:	2080f316 	blt	r4,r2,1959c <___svfiprintf_internal_r+0xe90>
   191d0:	42000204 	addi	r8,r8,8
   191d4:	d9402117 	ldw	r5,132(sp)
   191d8:	28000b26 	beq	r5,zero,19208 <___svfiprintf_internal_r+0xafc>
   191dc:	d9001d04 	addi	r4,sp,116
   191e0:	18c00084 	addi	r3,r3,2
   191e4:	10800044 	addi	r2,r2,1
   191e8:	41000015 	stw	r4,0(r8)
   191ec:	01000084 	movi	r4,2
   191f0:	41000115 	stw	r4,4(r8)
   191f4:	d8c01c15 	stw	r3,112(sp)
   191f8:	d8801b15 	stw	r2,108(sp)
   191fc:	010001c4 	movi	r4,7
   19200:	2080ef16 	blt	r4,r2,195c0 <___svfiprintf_internal_r+0xeb4>
   19204:	42000204 	addi	r8,r8,8
   19208:	d9402217 	ldw	r5,136(sp)
   1920c:	01002004 	movi	r4,128
   19210:	29008f26 	beq	r5,r4,19450 <___svfiprintf_internal_r+0xd44>
   19214:	d9002017 	ldw	r4,128(sp)
   19218:	252fc83a 	sub	r23,r4,r20
   1921c:	05c0310e 	bge	zero,r23,192e4 <___svfiprintf_internal_r+0xbd8>
   19220:	07000404 	movi	fp,16
   19224:	e5c17d0e 	bge	fp,r23,1981c <___svfiprintf_internal_r+0x1110>
   19228:	010000f4 	movhi	r4,3
   1922c:	212af704 	addi	r4,r4,-21540
   19230:	dc002015 	stw	r16,128(sp)
   19234:	dc402215 	stw	r17,136(sp)
   19238:	d9002115 	stw	r4,132(sp)
   1923c:	b823883a 	mov	r17,r23
   19240:	054001c4 	movi	r21,7
   19244:	982f883a 	mov	r23,r19
   19248:	dc002717 	ldw	r16,156(sp)
   1924c:	9027883a 	mov	r19,r18
   19250:	dc802317 	ldw	r18,140(sp)
   19254:	00000306 	br	19264 <___svfiprintf_internal_r+0xb58>
   19258:	8c7ffc04 	addi	r17,r17,-16
   1925c:	42000204 	addi	r8,r8,8
   19260:	e440110e 	bge	fp,r17,192a8 <___svfiprintf_internal_r+0xb9c>
   19264:	18c00404 	addi	r3,r3,16
   19268:	10800044 	addi	r2,r2,1
   1926c:	45800015 	stw	r22,0(r8)
   19270:	47000115 	stw	fp,4(r8)
   19274:	d8c01c15 	stw	r3,112(sp)
   19278:	d8801b15 	stw	r2,108(sp)
   1927c:	a8bff60e 	bge	r21,r2,19258 <__alt_data_end+0xfc019258>
   19280:	d9801a04 	addi	r6,sp,104
   19284:	900b883a 	mov	r5,r18
   19288:	8009883a 	mov	r4,r16
   1928c:	001853c0 	call	1853c <__ssprint_r>
   19290:	10005e1e 	bne	r2,zero,1940c <___svfiprintf_internal_r+0xd00>
   19294:	8c7ffc04 	addi	r17,r17,-16
   19298:	d8c01c17 	ldw	r3,112(sp)
   1929c:	d8801b17 	ldw	r2,108(sp)
   192a0:	d811883a 	mov	r8,sp
   192a4:	e47fef16 	blt	fp,r17,19264 <__alt_data_end+0xfc019264>
   192a8:	9825883a 	mov	r18,r19
   192ac:	dc002017 	ldw	r16,128(sp)
   192b0:	b827883a 	mov	r19,r23
   192b4:	882f883a 	mov	r23,r17
   192b8:	dc402217 	ldw	r17,136(sp)
   192bc:	d9402117 	ldw	r5,132(sp)
   192c0:	1dc7883a 	add	r3,r3,r23
   192c4:	10800044 	addi	r2,r2,1
   192c8:	41400015 	stw	r5,0(r8)
   192cc:	45c00115 	stw	r23,4(r8)
   192d0:	d8c01c15 	stw	r3,112(sp)
   192d4:	d8801b15 	stw	r2,108(sp)
   192d8:	010001c4 	movi	r4,7
   192dc:	2080a616 	blt	r4,r2,19578 <___svfiprintf_internal_r+0xe6c>
   192e0:	42000204 	addi	r8,r8,8
   192e4:	a0c7883a 	add	r3,r20,r3
   192e8:	10800044 	addi	r2,r2,1
   192ec:	44400015 	stw	r17,0(r8)
   192f0:	45000115 	stw	r20,4(r8)
   192f4:	d8c01c15 	stw	r3,112(sp)
   192f8:	d8801b15 	stw	r2,108(sp)
   192fc:	010001c4 	movi	r4,7
   19300:	20808816 	blt	r4,r2,19524 <___svfiprintf_internal_r+0xe18>
   19304:	42000204 	addi	r8,r8,8
   19308:	8400010c 	andi	r16,r16,4
   1930c:	80002c26 	beq	r16,zero,193c0 <___svfiprintf_internal_r+0xcb4>
   19310:	d8802517 	ldw	r2,148(sp)
   19314:	14a1c83a 	sub	r16,r2,r18
   19318:	0400290e 	bge	zero,r16,193c0 <___svfiprintf_internal_r+0xcb4>
   1931c:	04400404 	movi	r17,16
   19320:	d8801b17 	ldw	r2,108(sp)
   19324:	8c01a70e 	bge	r17,r16,199c4 <___svfiprintf_internal_r+0x12b8>
   19328:	014000f4 	movhi	r5,3
   1932c:	296afb04 	addi	r5,r5,-21524
   19330:	d9402815 	stw	r5,160(sp)
   19334:	050001c4 	movi	r20,7
   19338:	dd402717 	ldw	r21,156(sp)
   1933c:	ddc02317 	ldw	r23,140(sp)
   19340:	00000306 	br	19350 <___svfiprintf_internal_r+0xc44>
   19344:	843ffc04 	addi	r16,r16,-16
   19348:	42000204 	addi	r8,r8,8
   1934c:	8c00130e 	bge	r17,r16,1939c <___svfiprintf_internal_r+0xc90>
   19350:	010000f4 	movhi	r4,3
   19354:	18c00404 	addi	r3,r3,16
   19358:	10800044 	addi	r2,r2,1
   1935c:	212afb04 	addi	r4,r4,-21524
   19360:	41000015 	stw	r4,0(r8)
   19364:	44400115 	stw	r17,4(r8)
   19368:	d8c01c15 	stw	r3,112(sp)
   1936c:	d8801b15 	stw	r2,108(sp)
   19370:	a0bff40e 	bge	r20,r2,19344 <__alt_data_end+0xfc019344>
   19374:	d9801a04 	addi	r6,sp,104
   19378:	b80b883a 	mov	r5,r23
   1937c:	a809883a 	mov	r4,r21
   19380:	001853c0 	call	1853c <__ssprint_r>
   19384:	1000211e 	bne	r2,zero,1940c <___svfiprintf_internal_r+0xd00>
   19388:	843ffc04 	addi	r16,r16,-16
   1938c:	d8c01c17 	ldw	r3,112(sp)
   19390:	d8801b17 	ldw	r2,108(sp)
   19394:	d811883a 	mov	r8,sp
   19398:	8c3fed16 	blt	r17,r16,19350 <__alt_data_end+0xfc019350>
   1939c:	d9402817 	ldw	r5,160(sp)
   193a0:	1c07883a 	add	r3,r3,r16
   193a4:	10800044 	addi	r2,r2,1
   193a8:	41400015 	stw	r5,0(r8)
   193ac:	44000115 	stw	r16,4(r8)
   193b0:	d8c01c15 	stw	r3,112(sp)
   193b4:	d8801b15 	stw	r2,108(sp)
   193b8:	010001c4 	movi	r4,7
   193bc:	2080b516 	blt	r4,r2,19694 <___svfiprintf_internal_r+0xf88>
   193c0:	d8802517 	ldw	r2,148(sp)
   193c4:	1480010e 	bge	r2,r18,193cc <___svfiprintf_internal_r+0xcc0>
   193c8:	9005883a 	mov	r2,r18
   193cc:	d9002617 	ldw	r4,152(sp)
   193d0:	2089883a 	add	r4,r4,r2
   193d4:	d9002615 	stw	r4,152(sp)
   193d8:	18005a1e 	bne	r3,zero,19544 <___svfiprintf_internal_r+0xe38>
   193dc:	98800007 	ldb	r2,0(r19)
   193e0:	d8001b15 	stw	zero,108(sp)
   193e4:	d811883a 	mov	r8,sp
   193e8:	103cec1e 	bne	r2,zero,1879c <__alt_data_end+0xfc01879c>
   193ec:	9825883a 	mov	r18,r19
   193f0:	003d0206 	br	187fc <__alt_data_end+0xfc0187fc>
   193f4:	d8801c17 	ldw	r2,112(sp)
   193f8:	10000426 	beq	r2,zero,1940c <___svfiprintf_internal_r+0xd00>
   193fc:	d9402317 	ldw	r5,140(sp)
   19400:	d9002717 	ldw	r4,156(sp)
   19404:	d9801a04 	addi	r6,sp,104
   19408:	001853c0 	call	1853c <__ssprint_r>
   1940c:	d9402317 	ldw	r5,140(sp)
   19410:	d8802617 	ldw	r2,152(sp)
   19414:	28c0030b 	ldhu	r3,12(r5)
   19418:	18c0100c 	andi	r3,r3,64
   1941c:	18015c1e 	bne	r3,zero,19990 <___svfiprintf_internal_r+0x1284>
   19420:	dfc03717 	ldw	ra,220(sp)
   19424:	df003617 	ldw	fp,216(sp)
   19428:	ddc03517 	ldw	r23,212(sp)
   1942c:	dd803417 	ldw	r22,208(sp)
   19430:	dd403317 	ldw	r21,204(sp)
   19434:	dd003217 	ldw	r20,200(sp)
   19438:	dcc03117 	ldw	r19,196(sp)
   1943c:	dc803017 	ldw	r18,192(sp)
   19440:	dc402f17 	ldw	r17,188(sp)
   19444:	dc002e17 	ldw	r16,184(sp)
   19448:	dec03804 	addi	sp,sp,224
   1944c:	f800283a 	ret
   19450:	d9002517 	ldw	r4,148(sp)
   19454:	24afc83a 	sub	r23,r4,r18
   19458:	05ff6e0e 	bge	zero,r23,19214 <__alt_data_end+0xfc019214>
   1945c:	07000404 	movi	fp,16
   19460:	e5c15c0e 	bge	fp,r23,199d4 <___svfiprintf_internal_r+0x12c8>
   19464:	010000f4 	movhi	r4,3
   19468:	212af704 	addi	r4,r4,-21540
   1946c:	dc002215 	stw	r16,136(sp)
   19470:	dc402815 	stw	r17,160(sp)
   19474:	d9002115 	stw	r4,132(sp)
   19478:	b823883a 	mov	r17,r23
   1947c:	054001c4 	movi	r21,7
   19480:	982f883a 	mov	r23,r19
   19484:	dc002717 	ldw	r16,156(sp)
   19488:	9027883a 	mov	r19,r18
   1948c:	dc802317 	ldw	r18,140(sp)
   19490:	00000306 	br	194a0 <___svfiprintf_internal_r+0xd94>
   19494:	8c7ffc04 	addi	r17,r17,-16
   19498:	42000204 	addi	r8,r8,8
   1949c:	e440110e 	bge	fp,r17,194e4 <___svfiprintf_internal_r+0xdd8>
   194a0:	18c00404 	addi	r3,r3,16
   194a4:	10800044 	addi	r2,r2,1
   194a8:	45800015 	stw	r22,0(r8)
   194ac:	47000115 	stw	fp,4(r8)
   194b0:	d8c01c15 	stw	r3,112(sp)
   194b4:	d8801b15 	stw	r2,108(sp)
   194b8:	a8bff60e 	bge	r21,r2,19494 <__alt_data_end+0xfc019494>
   194bc:	d9801a04 	addi	r6,sp,104
   194c0:	900b883a 	mov	r5,r18
   194c4:	8009883a 	mov	r4,r16
   194c8:	001853c0 	call	1853c <__ssprint_r>
   194cc:	103fcf1e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   194d0:	8c7ffc04 	addi	r17,r17,-16
   194d4:	d8c01c17 	ldw	r3,112(sp)
   194d8:	d8801b17 	ldw	r2,108(sp)
   194dc:	d811883a 	mov	r8,sp
   194e0:	e47fef16 	blt	fp,r17,194a0 <__alt_data_end+0xfc0194a0>
   194e4:	9825883a 	mov	r18,r19
   194e8:	dc002217 	ldw	r16,136(sp)
   194ec:	b827883a 	mov	r19,r23
   194f0:	882f883a 	mov	r23,r17
   194f4:	dc402817 	ldw	r17,160(sp)
   194f8:	d9402117 	ldw	r5,132(sp)
   194fc:	1dc7883a 	add	r3,r3,r23
   19500:	10800044 	addi	r2,r2,1
   19504:	41400015 	stw	r5,0(r8)
   19508:	45c00115 	stw	r23,4(r8)
   1950c:	d8c01c15 	stw	r3,112(sp)
   19510:	d8801b15 	stw	r2,108(sp)
   19514:	010001c4 	movi	r4,7
   19518:	2080b716 	blt	r4,r2,197f8 <___svfiprintf_internal_r+0x10ec>
   1951c:	42000204 	addi	r8,r8,8
   19520:	003f3c06 	br	19214 <__alt_data_end+0xfc019214>
   19524:	d9402317 	ldw	r5,140(sp)
   19528:	d9002717 	ldw	r4,156(sp)
   1952c:	d9801a04 	addi	r6,sp,104
   19530:	001853c0 	call	1853c <__ssprint_r>
   19534:	103fb51e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   19538:	d8c01c17 	ldw	r3,112(sp)
   1953c:	d811883a 	mov	r8,sp
   19540:	003f7106 	br	19308 <__alt_data_end+0xfc019308>
   19544:	d9402317 	ldw	r5,140(sp)
   19548:	d9002717 	ldw	r4,156(sp)
   1954c:	d9801a04 	addi	r6,sp,104
   19550:	001853c0 	call	1853c <__ssprint_r>
   19554:	103fa126 	beq	r2,zero,193dc <__alt_data_end+0xfc0193dc>
   19558:	003fac06 	br	1940c <__alt_data_end+0xfc01940c>
   1955c:	d9402317 	ldw	r5,140(sp)
   19560:	d9002717 	ldw	r4,156(sp)
   19564:	d9801a04 	addi	r6,sp,104
   19568:	001853c0 	call	1853c <__ssprint_r>
   1956c:	103fa71e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   19570:	d811883a 	mov	r8,sp
   19574:	003c9e06 	br	187f0 <__alt_data_end+0xfc0187f0>
   19578:	d9402317 	ldw	r5,140(sp)
   1957c:	d9002717 	ldw	r4,156(sp)
   19580:	d9801a04 	addi	r6,sp,104
   19584:	001853c0 	call	1853c <__ssprint_r>
   19588:	103fa01e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   1958c:	d8c01c17 	ldw	r3,112(sp)
   19590:	d8801b17 	ldw	r2,108(sp)
   19594:	d811883a 	mov	r8,sp
   19598:	003f5206 	br	192e4 <__alt_data_end+0xfc0192e4>
   1959c:	d9402317 	ldw	r5,140(sp)
   195a0:	d9002717 	ldw	r4,156(sp)
   195a4:	d9801a04 	addi	r6,sp,104
   195a8:	001853c0 	call	1853c <__ssprint_r>
   195ac:	103f971e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   195b0:	d8c01c17 	ldw	r3,112(sp)
   195b4:	d8801b17 	ldw	r2,108(sp)
   195b8:	d811883a 	mov	r8,sp
   195bc:	003f0506 	br	191d4 <__alt_data_end+0xfc0191d4>
   195c0:	d9402317 	ldw	r5,140(sp)
   195c4:	d9002717 	ldw	r4,156(sp)
   195c8:	d9801a04 	addi	r6,sp,104
   195cc:	001853c0 	call	1853c <__ssprint_r>
   195d0:	103f8e1e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   195d4:	d8c01c17 	ldw	r3,112(sp)
   195d8:	d8801b17 	ldw	r2,108(sp)
   195dc:	d811883a 	mov	r8,sp
   195e0:	003f0906 	br	19208 <__alt_data_end+0xfc019208>
   195e4:	d9402017 	ldw	r5,128(sp)
   195e8:	d8001d85 	stb	zero,118(sp)
   195ec:	28007716 	blt	r5,zero,197cc <___svfiprintf_internal_r+0x10c0>
   195f0:	00ffdfc4 	movi	r3,-129
   195f4:	9504b03a 	or	r2,r18,r20
   195f8:	80e0703a 	and	r16,r16,r3
   195fc:	103d3926 	beq	r2,zero,18ae4 <__alt_data_end+0xfc018ae4>
   19600:	002b883a 	mov	r21,zero
   19604:	003d3c06 	br	18af8 <__alt_data_end+0xfc018af8>
   19608:	d9402317 	ldw	r5,140(sp)
   1960c:	d9002717 	ldw	r4,156(sp)
   19610:	d9801a04 	addi	r6,sp,104
   19614:	001853c0 	call	1853c <__ssprint_r>
   19618:	103f7c1e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   1961c:	d8c01c17 	ldw	r3,112(sp)
   19620:	d8801b17 	ldw	r2,108(sp)
   19624:	d811883a 	mov	r8,sp
   19628:	003edd06 	br	191a0 <__alt_data_end+0xfc0191a0>
   1962c:	8080100c 	andi	r2,r16,64
   19630:	d8001d85 	stb	zero,118(sp)
   19634:	10008426 	beq	r2,zero,19848 <___svfiprintf_internal_r+0x113c>
   19638:	d9402417 	ldw	r5,144(sp)
   1963c:	d8c02017 	ldw	r3,128(sp)
   19640:	0029883a 	mov	r20,zero
   19644:	28800104 	addi	r2,r5,4
   19648:	2c80000b 	ldhu	r18,0(r5)
   1964c:	183eab0e 	bge	r3,zero,190fc <__alt_data_end+0xfc0190fc>
   19650:	d8802415 	stw	r2,144(sp)
   19654:	002b883a 	mov	r21,zero
   19658:	9504b03a 	or	r2,r18,r20
   1965c:	103e171e 	bne	r2,zero,18ebc <__alt_data_end+0xfc018ebc>
   19660:	00800044 	movi	r2,1
   19664:	10803fcc 	andi	r2,r2,255
   19668:	00c00044 	movi	r3,1
   1966c:	10c05c26 	beq	r2,r3,197e0 <___svfiprintf_internal_r+0x10d4>
   19670:	00c00084 	movi	r3,2
   19674:	10fd1e26 	beq	r2,r3,18af0 <__alt_data_end+0xfc018af0>
   19678:	003ec406 	br	1918c <__alt_data_end+0xfc01918c>
   1967c:	d9401e17 	ldw	r5,120(sp)
   19680:	2c69c83a 	sub	r20,r5,r17
   19684:	003d4506 	br	18b9c <__alt_data_end+0xfc018b9c>
   19688:	d8802415 	stw	r2,144(sp)
   1968c:	98c00007 	ldb	r3,0(r19)
   19690:	003c6a06 	br	1883c <__alt_data_end+0xfc01883c>
   19694:	d9402317 	ldw	r5,140(sp)
   19698:	d9002717 	ldw	r4,156(sp)
   1969c:	d9801a04 	addi	r6,sp,104
   196a0:	001853c0 	call	1853c <__ssprint_r>
   196a4:	103f591e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   196a8:	d8c01c17 	ldw	r3,112(sp)
   196ac:	003f4406 	br	193c0 <__alt_data_end+0xfc0193c0>
   196b0:	014000f4 	movhi	r5,3
   196b4:	296a8f04 	addi	r5,r5,-21956
   196b8:	d9402915 	stw	r5,164(sp)
   196bc:	003d0906 	br	18ae4 <__alt_data_end+0xfc018ae4>
   196c0:	d8c02417 	ldw	r3,144(sp)
   196c4:	d9002617 	ldw	r4,152(sp)
   196c8:	d9402417 	ldw	r5,144(sp)
   196cc:	18800017 	ldw	r2,0(r3)
   196d0:	2007d7fa 	srai	r3,r4,31
   196d4:	29400104 	addi	r5,r5,4
   196d8:	d9402415 	stw	r5,144(sp)
   196dc:	11000015 	stw	r4,0(r2)
   196e0:	10c00115 	stw	r3,4(r2)
   196e4:	003c2b06 	br	18794 <__alt_data_end+0xfc018794>
   196e8:	d8c01d45 	stb	r3,117(sp)
   196ec:	d8c02017 	ldw	r3,128(sp)
   196f0:	00800c04 	movi	r2,48
   196f4:	d8801d05 	stb	r2,116(sp)
   196f8:	d8001d85 	stb	zero,118(sp)
   196fc:	80800094 	ori	r2,r16,2
   19700:	1800ac16 	blt	r3,zero,199b4 <___svfiprintf_internal_r+0x12a8>
   19704:	00bfdfc4 	movi	r2,-129
   19708:	80a0703a 	and	r16,r16,r2
   1970c:	84000094 	ori	r16,r16,2
   19710:	002b883a 	mov	r21,zero
   19714:	003cf806 	br	18af8 <__alt_data_end+0xfc018af8>
   19718:	98c00007 	ldb	r3,0(r19)
   1971c:	003c4706 	br	1883c <__alt_data_end+0xfc01883c>
   19720:	d9402417 	ldw	r5,144(sp)
   19724:	2c800017 	ldw	r18,0(r5)
   19728:	29400104 	addi	r5,r5,4
   1972c:	d9402415 	stw	r5,144(sp)
   19730:	9029d7fa 	srai	r20,r18,31
   19734:	a005883a 	mov	r2,r20
   19738:	003dd806 	br	18e9c <__alt_data_end+0xfc018e9c>
   1973c:	d9402417 	ldw	r5,144(sp)
   19740:	0029883a 	mov	r20,zero
   19744:	2c800017 	ldw	r18,0(r5)
   19748:	29400104 	addi	r5,r5,4
   1974c:	d9402415 	stw	r5,144(sp)
   19750:	003cdb06 	br	18ac0 <__alt_data_end+0xfc018ac0>
   19754:	8080100c 	andi	r2,r16,64
   19758:	d8001d85 	stb	zero,118(sp)
   1975c:	10003326 	beq	r2,zero,1982c <___svfiprintf_internal_r+0x1120>
   19760:	d9002417 	ldw	r4,144(sp)
   19764:	d9402017 	ldw	r5,128(sp)
   19768:	0029883a 	mov	r20,zero
   1976c:	20800104 	addi	r2,r4,4
   19770:	2480000b 	ldhu	r18,0(r4)
   19774:	283e7e0e 	bge	r5,zero,19170 <__alt_data_end+0xfc019170>
   19778:	9506b03a 	or	r3,r18,r20
   1977c:	d8802415 	stw	r2,144(sp)
   19780:	183d271e 	bne	r3,zero,18c20 <__alt_data_end+0xfc018c20>
   19784:	002b883a 	mov	r21,zero
   19788:	0005883a 	mov	r2,zero
   1978c:	003fb506 	br	19664 <__alt_data_end+0xfc019664>
   19790:	98c00043 	ldbu	r3,1(r19)
   19794:	8c400814 	ori	r17,r17,32
   19798:	9cc00044 	addi	r19,r19,1
   1979c:	18c03fcc 	andi	r3,r3,255
   197a0:	18c0201c 	xori	r3,r3,128
   197a4:	18ffe004 	addi	r3,r3,-128
   197a8:	003c2406 	br	1883c <__alt_data_end+0xfc01883c>
   197ac:	d8c02415 	stw	r3,144(sp)
   197b0:	002b883a 	mov	r21,zero
   197b4:	003fa806 	br	19658 <__alt_data_end+0xfc019658>
   197b8:	010000f4 	movhi	r4,3
   197bc:	212a8f04 	addi	r4,r4,-21956
   197c0:	d9002915 	stw	r4,164(sp)
   197c4:	d8c02415 	stw	r3,144(sp)
   197c8:	1021883a 	mov	r16,r2
   197cc:	9504b03a 	or	r2,r18,r20
   197d0:	103f8b1e 	bne	r2,zero,19600 <__alt_data_end+0xfc019600>
   197d4:	002b883a 	mov	r21,zero
   197d8:	00800084 	movi	r2,2
   197dc:	003fa106 	br	19664 <__alt_data_end+0xfc019664>
   197e0:	0025883a 	mov	r18,zero
   197e4:	94800c04 	addi	r18,r18,48
   197e8:	dc8019c5 	stb	r18,103(sp)
   197ec:	dd002c17 	ldw	r20,176(sp)
   197f0:	dc4019c4 	addi	r17,sp,103
   197f4:	003ce906 	br	18b9c <__alt_data_end+0xfc018b9c>
   197f8:	d9402317 	ldw	r5,140(sp)
   197fc:	d9002717 	ldw	r4,156(sp)
   19800:	d9801a04 	addi	r6,sp,104
   19804:	001853c0 	call	1853c <__ssprint_r>
   19808:	103f001e 	bne	r2,zero,1940c <__alt_data_end+0xfc01940c>
   1980c:	d8c01c17 	ldw	r3,112(sp)
   19810:	d8801b17 	ldw	r2,108(sp)
   19814:	d811883a 	mov	r8,sp
   19818:	003e7e06 	br	19214 <__alt_data_end+0xfc019214>
   1981c:	014000f4 	movhi	r5,3
   19820:	296af704 	addi	r5,r5,-21540
   19824:	d9402115 	stw	r5,132(sp)
   19828:	003ea406 	br	192bc <__alt_data_end+0xfc0192bc>
   1982c:	d8c02417 	ldw	r3,144(sp)
   19830:	d9002017 	ldw	r4,128(sp)
   19834:	0029883a 	mov	r20,zero
   19838:	18800104 	addi	r2,r3,4
   1983c:	1c800017 	ldw	r18,0(r3)
   19840:	203e4b0e 	bge	r4,zero,19170 <__alt_data_end+0xfc019170>
   19844:	003fcc06 	br	19778 <__alt_data_end+0xfc019778>
   19848:	d9002417 	ldw	r4,144(sp)
   1984c:	d9402017 	ldw	r5,128(sp)
   19850:	0029883a 	mov	r20,zero
   19854:	20800104 	addi	r2,r4,4
   19858:	24800017 	ldw	r18,0(r4)
   1985c:	283e270e 	bge	r5,zero,190fc <__alt_data_end+0xfc0190fc>
   19860:	003f7b06 	br	19650 <__alt_data_end+0xfc019650>
   19864:	8400100c 	andi	r16,r16,64
   19868:	80003326 	beq	r16,zero,19938 <___svfiprintf_internal_r+0x122c>
   1986c:	d9402417 	ldw	r5,144(sp)
   19870:	d8c02617 	ldw	r3,152(sp)
   19874:	28800017 	ldw	r2,0(r5)
   19878:	29400104 	addi	r5,r5,4
   1987c:	d9402415 	stw	r5,144(sp)
   19880:	10c0000d 	sth	r3,0(r2)
   19884:	003bc306 	br	18794 <__alt_data_end+0xfc018794>
   19888:	d9002417 	ldw	r4,144(sp)
   1988c:	0029883a 	mov	r20,zero
   19890:	24800017 	ldw	r18,0(r4)
   19894:	21000104 	addi	r4,r4,4
   19898:	d9002415 	stw	r4,144(sp)
   1989c:	003c8806 	br	18ac0 <__alt_data_end+0xfc018ac0>
   198a0:	d8c02417 	ldw	r3,144(sp)
   198a4:	1c800017 	ldw	r18,0(r3)
   198a8:	18c00104 	addi	r3,r3,4
   198ac:	d8c02415 	stw	r3,144(sp)
   198b0:	9029d7fa 	srai	r20,r18,31
   198b4:	a005883a 	mov	r2,r20
   198b8:	003d7806 	br	18e9c <__alt_data_end+0xfc018e9c>
   198bc:	8809883a 	mov	r4,r17
   198c0:	da002d15 	stw	r8,180(sp)
   198c4:	000f5400 	call	f540 <strlen>
   198c8:	1029883a 	mov	r20,r2
   198cc:	dd401d83 	ldbu	r21,118(sp)
   198d0:	ddc02415 	stw	r23,144(sp)
   198d4:	d8002015 	stw	zero,128(sp)
   198d8:	da002d17 	ldw	r8,180(sp)
   198dc:	003caf06 	br	18b9c <__alt_data_end+0xfc018b9c>
   198e0:	013fffc4 	movi	r4,-1
   198e4:	003df206 	br	190b0 <__alt_data_end+0xfc0190b0>
   198e8:	dd002017 	ldw	r20,128(sp)
   198ec:	00800184 	movi	r2,6
   198f0:	1500012e 	bgeu	r2,r20,198f8 <___svfiprintf_internal_r+0x11ec>
   198f4:	1029883a 	mov	r20,r2
   198f8:	a025883a 	mov	r18,r20
   198fc:	a0004116 	blt	r20,zero,19a04 <___svfiprintf_internal_r+0x12f8>
   19900:	044000f4 	movhi	r17,3
   19904:	ddc02415 	stw	r23,144(sp)
   19908:	8c6a9404 	addi	r17,r17,-21936
   1990c:	003ce806 	br	18cb0 <__alt_data_end+0xfc018cb0>
   19910:	04001004 	movi	r16,64
   19914:	800b883a 	mov	r5,r16
   19918:	000e46c0 	call	e46c <_malloc_r>
   1991c:	d8c02317 	ldw	r3,140(sp)
   19920:	18800015 	stw	r2,0(r3)
   19924:	18800415 	stw	r2,16(r3)
   19928:	10004d26 	beq	r2,zero,19a60 <___svfiprintf_internal_r+0x1354>
   1992c:	d9402317 	ldw	r5,140(sp)
   19930:	2c000515 	stw	r16,20(r5)
   19934:	003b8906 	br	1875c <__alt_data_end+0xfc01875c>
   19938:	d9002417 	ldw	r4,144(sp)
   1993c:	d9402617 	ldw	r5,152(sp)
   19940:	20800017 	ldw	r2,0(r4)
   19944:	21000104 	addi	r4,r4,4
   19948:	d9002415 	stw	r4,144(sp)
   1994c:	11400015 	stw	r5,0(r2)
   19950:	003b9006 	br	18794 <__alt_data_end+0xfc018794>
   19954:	8080004c 	andi	r2,r16,1
   19958:	002b883a 	mov	r21,zero
   1995c:	10000526 	beq	r2,zero,19974 <___svfiprintf_internal_r+0x1268>
   19960:	00800c04 	movi	r2,48
   19964:	d88019c5 	stb	r2,103(sp)
   19968:	dd002c17 	ldw	r20,176(sp)
   1996c:	dc4019c4 	addi	r17,sp,103
   19970:	003c8a06 	br	18b9c <__alt_data_end+0xfc018b9c>
   19974:	0029883a 	mov	r20,zero
   19978:	dc401a04 	addi	r17,sp,104
   1997c:	003c8706 	br	18b9c <__alt_data_end+0xfc018b9c>
   19980:	014000f4 	movhi	r5,3
   19984:	296afb04 	addi	r5,r5,-21524
   19988:	d9402815 	stw	r5,160(sp)
   1998c:	003cff06 	br	18d8c <__alt_data_end+0xfc018d8c>
   19990:	00bfffc4 	movi	r2,-1
   19994:	003ea206 	br	19420 <__alt_data_end+0xfc019420>
   19998:	00800044 	movi	r2,1
   1999c:	10803fcc 	andi	r2,r2,255
   199a0:	00c00044 	movi	r3,1
   199a4:	10fd4526 	beq	r2,r3,18ebc <__alt_data_end+0xfc018ebc>
   199a8:	00c00084 	movi	r3,2
   199ac:	10fc5226 	beq	r2,r3,18af8 <__alt_data_end+0xfc018af8>
   199b0:	003c9c06 	br	18c24 <__alt_data_end+0xfc018c24>
   199b4:	1021883a 	mov	r16,r2
   199b8:	002b883a 	mov	r21,zero
   199bc:	00800084 	movi	r2,2
   199c0:	003ff606 	br	1999c <__alt_data_end+0xfc01999c>
   199c4:	010000f4 	movhi	r4,3
   199c8:	212afb04 	addi	r4,r4,-21524
   199cc:	d9002815 	stw	r4,160(sp)
   199d0:	003e7206 	br	1939c <__alt_data_end+0xfc01939c>
   199d4:	014000f4 	movhi	r5,3
   199d8:	296af704 	addi	r5,r5,-21540
   199dc:	d9402115 	stw	r5,132(sp)
   199e0:	003ec506 	br	194f8 <__alt_data_end+0xfc0194f8>
   199e4:	e027883a 	mov	r19,fp
   199e8:	d8002015 	stw	zero,128(sp)
   199ec:	003b9406 	br	18840 <__alt_data_end+0xfc018840>
   199f0:	dd002017 	ldw	r20,128(sp)
   199f4:	dd401d83 	ldbu	r21,118(sp)
   199f8:	ddc02415 	stw	r23,144(sp)
   199fc:	d8002015 	stw	zero,128(sp)
   19a00:	003c6606 	br	18b9c <__alt_data_end+0xfc018b9c>
   19a04:	0025883a 	mov	r18,zero
   19a08:	003fbd06 	br	19900 <__alt_data_end+0xfc019900>
   19a0c:	d9402417 	ldw	r5,144(sp)
   19a10:	d8c02417 	ldw	r3,144(sp)
   19a14:	29400017 	ldw	r5,0(r5)
   19a18:	19000104 	addi	r4,r3,4
   19a1c:	d9002415 	stw	r4,144(sp)
   19a20:	d9402015 	stw	r5,128(sp)
   19a24:	98c00043 	ldbu	r3,1(r19)
   19a28:	e027883a 	mov	r19,fp
   19a2c:	283f5b0e 	bge	r5,zero,1979c <__alt_data_end+0xfc01979c>
   19a30:	18c03fcc 	andi	r3,r3,255
   19a34:	013fffc4 	movi	r4,-1
   19a38:	18c0201c 	xori	r3,r3,128
   19a3c:	d9002015 	stw	r4,128(sp)
   19a40:	18ffe004 	addi	r3,r3,-128
   19a44:	003b7d06 	br	1883c <__alt_data_end+0xfc01883c>
   19a48:	dd401d85 	stb	r21,118(sp)
   19a4c:	003cf306 	br	18e1c <__alt_data_end+0xfc018e1c>
   19a50:	dd401d85 	stb	r21,118(sp)
   19a54:	003d4e06 	br	18f90 <__alt_data_end+0xfc018f90>
   19a58:	dd401d85 	stb	r21,118(sp)
   19a5c:	003c0e06 	br	18a98 <__alt_data_end+0xfc018a98>
   19a60:	d9002717 	ldw	r4,156(sp)
   19a64:	00800304 	movi	r2,12
   19a68:	20800015 	stw	r2,0(r4)
   19a6c:	00bfffc4 	movi	r2,-1
   19a70:	003e6b06 	br	19420 <__alt_data_end+0xfc019420>
   19a74:	dd401d85 	stb	r21,118(sp)
   19a78:	003d0006 	br	18e7c <__alt_data_end+0xfc018e7c>
   19a7c:	dd401d85 	stb	r21,118(sp)
   19a80:	003d7106 	br	19048 <__alt_data_end+0xfc019048>
   19a84:	dd401d85 	stb	r21,118(sp)
   19a88:	003c5706 	br	18be8 <__alt_data_end+0xfc018be8>
   19a8c:	dd401d85 	stb	r21,118(sp)
   19a90:	003c2e06 	br	18b4c <__alt_data_end+0xfc018b4c>
   19a94:	dd401d85 	stb	r21,118(sp)
   19a98:	003d8c06 	br	190cc <__alt_data_end+0xfc0190cc>
   19a9c:	dd401d85 	stb	r21,118(sp)
   19aa0:	003da706 	br	19140 <__alt_data_end+0xfc019140>
   19aa4:	dd401d85 	stb	r21,118(sp)
   19aa8:	003cc806 	br	18dcc <__alt_data_end+0xfc018dcc>

00019aac <__sprint_r.part.0>:
   19aac:	28801917 	ldw	r2,100(r5)
   19ab0:	defff604 	addi	sp,sp,-40
   19ab4:	dd400515 	stw	r21,20(sp)
   19ab8:	dfc00915 	stw	ra,36(sp)
   19abc:	df000815 	stw	fp,32(sp)
   19ac0:	ddc00715 	stw	r23,28(sp)
   19ac4:	dd800615 	stw	r22,24(sp)
   19ac8:	dd000415 	stw	r20,16(sp)
   19acc:	dcc00315 	stw	r19,12(sp)
   19ad0:	dc800215 	stw	r18,8(sp)
   19ad4:	dc400115 	stw	r17,4(sp)
   19ad8:	dc000015 	stw	r16,0(sp)
   19adc:	1088000c 	andi	r2,r2,8192
   19ae0:	302b883a 	mov	r21,r6
   19ae4:	10002e26 	beq	r2,zero,19ba0 <__sprint_r.part.0+0xf4>
   19ae8:	30800217 	ldw	r2,8(r6)
   19aec:	35800017 	ldw	r22,0(r6)
   19af0:	10002926 	beq	r2,zero,19b98 <__sprint_r.part.0+0xec>
   19af4:	2827883a 	mov	r19,r5
   19af8:	2029883a 	mov	r20,r4
   19afc:	b5c00104 	addi	r23,r22,4
   19b00:	04bfffc4 	movi	r18,-1
   19b04:	bc400017 	ldw	r17,0(r23)
   19b08:	b4000017 	ldw	r16,0(r22)
   19b0c:	0039883a 	mov	fp,zero
   19b10:	8822d0ba 	srli	r17,r17,2
   19b14:	8800031e 	bne	r17,zero,19b24 <__sprint_r.part.0+0x78>
   19b18:	00001806 	br	19b7c <__sprint_r.part.0+0xd0>
   19b1c:	84000104 	addi	r16,r16,4
   19b20:	8f001526 	beq	r17,fp,19b78 <__sprint_r.part.0+0xcc>
   19b24:	81400017 	ldw	r5,0(r16)
   19b28:	980d883a 	mov	r6,r19
   19b2c:	a009883a 	mov	r4,r20
   19b30:	001b6f40 	call	1b6f4 <_fputwc_r>
   19b34:	e7000044 	addi	fp,fp,1
   19b38:	14bff81e 	bne	r2,r18,19b1c <__alt_data_end+0xfc019b1c>
   19b3c:	9005883a 	mov	r2,r18
   19b40:	a8000215 	stw	zero,8(r21)
   19b44:	a8000115 	stw	zero,4(r21)
   19b48:	dfc00917 	ldw	ra,36(sp)
   19b4c:	df000817 	ldw	fp,32(sp)
   19b50:	ddc00717 	ldw	r23,28(sp)
   19b54:	dd800617 	ldw	r22,24(sp)
   19b58:	dd400517 	ldw	r21,20(sp)
   19b5c:	dd000417 	ldw	r20,16(sp)
   19b60:	dcc00317 	ldw	r19,12(sp)
   19b64:	dc800217 	ldw	r18,8(sp)
   19b68:	dc400117 	ldw	r17,4(sp)
   19b6c:	dc000017 	ldw	r16,0(sp)
   19b70:	dec00a04 	addi	sp,sp,40
   19b74:	f800283a 	ret
   19b78:	a8800217 	ldw	r2,8(r21)
   19b7c:	8c63883a 	add	r17,r17,r17
   19b80:	8c63883a 	add	r17,r17,r17
   19b84:	1445c83a 	sub	r2,r2,r17
   19b88:	a8800215 	stw	r2,8(r21)
   19b8c:	b5800204 	addi	r22,r22,8
   19b90:	bdc00204 	addi	r23,r23,8
   19b94:	103fdb1e 	bne	r2,zero,19b04 <__alt_data_end+0xfc019b04>
   19b98:	0005883a 	mov	r2,zero
   19b9c:	003fe806 	br	19b40 <__alt_data_end+0xfc019b40>
   19ba0:	00160e00 	call	160e0 <__sfvwrite_r>
   19ba4:	003fe606 	br	19b40 <__alt_data_end+0xfc019b40>

00019ba8 <__sprint_r>:
   19ba8:	30c00217 	ldw	r3,8(r6)
   19bac:	18000126 	beq	r3,zero,19bb4 <__sprint_r+0xc>
   19bb0:	0019aac1 	jmpi	19aac <__sprint_r.part.0>
   19bb4:	30000115 	stw	zero,4(r6)
   19bb8:	0005883a 	mov	r2,zero
   19bbc:	f800283a 	ret

00019bc0 <___vfiprintf_internal_r>:
   19bc0:	deffca04 	addi	sp,sp,-216
   19bc4:	dd403115 	stw	r21,196(sp)
   19bc8:	dfc03515 	stw	ra,212(sp)
   19bcc:	df003415 	stw	fp,208(sp)
   19bd0:	ddc03315 	stw	r23,204(sp)
   19bd4:	dd803215 	stw	r22,200(sp)
   19bd8:	dd003015 	stw	r20,192(sp)
   19bdc:	dcc02f15 	stw	r19,188(sp)
   19be0:	dc802e15 	stw	r18,184(sp)
   19be4:	dc402d15 	stw	r17,180(sp)
   19be8:	dc002c15 	stw	r16,176(sp)
   19bec:	d9002115 	stw	r4,132(sp)
   19bf0:	d9402015 	stw	r5,128(sp)
   19bf4:	d9c02215 	stw	r7,136(sp)
   19bf8:	302b883a 	mov	r21,r6
   19bfc:	20000226 	beq	r4,zero,19c08 <___vfiprintf_internal_r+0x48>
   19c00:	20800e17 	ldw	r2,56(r4)
   19c04:	1000cf26 	beq	r2,zero,19f44 <___vfiprintf_internal_r+0x384>
   19c08:	d8c02017 	ldw	r3,128(sp)
   19c0c:	1880030b 	ldhu	r2,12(r3)
   19c10:	10c8000c 	andi	r3,r2,8192
   19c14:	1800071e 	bne	r3,zero,19c34 <___vfiprintf_internal_r+0x74>
   19c18:	d9402017 	ldw	r5,128(sp)
   19c1c:	00f7ffc4 	movi	r3,-8193
   19c20:	10880014 	ori	r2,r2,8192
   19c24:	29001917 	ldw	r4,100(r5)
   19c28:	2880030d 	sth	r2,12(r5)
   19c2c:	20c6703a 	and	r3,r4,r3
   19c30:	28c01915 	stw	r3,100(r5)
   19c34:	10c0020c 	andi	r3,r2,8
   19c38:	1800a526 	beq	r3,zero,19ed0 <___vfiprintf_internal_r+0x310>
   19c3c:	d9002017 	ldw	r4,128(sp)
   19c40:	20c00417 	ldw	r3,16(r4)
   19c44:	1800a226 	beq	r3,zero,19ed0 <___vfiprintf_internal_r+0x310>
   19c48:	1080068c 	andi	r2,r2,26
   19c4c:	00c00284 	movi	r3,10
   19c50:	10c0a826 	beq	r2,r3,19ef4 <___vfiprintf_internal_r+0x334>
   19c54:	d9001a04 	addi	r4,sp,104
   19c58:	d94019c4 	addi	r5,sp,103
   19c5c:	048000f4 	movhi	r18,3
   19c60:	2145c83a 	sub	r2,r4,r5
   19c64:	94aaff04 	addi	r18,r18,-21508
   19c68:	d9001e15 	stw	r4,120(sp)
   19c6c:	d9401f15 	stw	r5,124(sp)
   19c70:	dec01a15 	stw	sp,104(sp)
   19c74:	d8001c15 	stw	zero,112(sp)
   19c78:	d8001b15 	stw	zero,108(sp)
   19c7c:	d811883a 	mov	r8,sp
   19c80:	d8002615 	stw	zero,152(sp)
   19c84:	d8002415 	stw	zero,144(sp)
   19c88:	d8802815 	stw	r2,160(sp)
   19c8c:	a82d883a 	mov	r22,r21
   19c90:	b0800007 	ldb	r2,0(r22)
   19c94:	10040d26 	beq	r2,zero,1accc <___vfiprintf_internal_r+0x110c>
   19c98:	00c00944 	movi	r3,37
   19c9c:	b029883a 	mov	r20,r22
   19ca0:	10c0021e 	bne	r2,r3,19cac <___vfiprintf_internal_r+0xec>
   19ca4:	00001606 	br	19d00 <___vfiprintf_internal_r+0x140>
   19ca8:	10c00326 	beq	r2,r3,19cb8 <___vfiprintf_internal_r+0xf8>
   19cac:	a5000044 	addi	r20,r20,1
   19cb0:	a0800007 	ldb	r2,0(r20)
   19cb4:	103ffc1e 	bne	r2,zero,19ca8 <__alt_data_end+0xfc019ca8>
   19cb8:	a5a1c83a 	sub	r16,r20,r22
   19cbc:	80001026 	beq	r16,zero,19d00 <___vfiprintf_internal_r+0x140>
   19cc0:	d8c01c17 	ldw	r3,112(sp)
   19cc4:	d8801b17 	ldw	r2,108(sp)
   19cc8:	45800015 	stw	r22,0(r8)
   19ccc:	80c7883a 	add	r3,r16,r3
   19cd0:	10800044 	addi	r2,r2,1
   19cd4:	44000115 	stw	r16,4(r8)
   19cd8:	d8c01c15 	stw	r3,112(sp)
   19cdc:	d8801b15 	stw	r2,108(sp)
   19ce0:	010001c4 	movi	r4,7
   19ce4:	2080750e 	bge	r4,r2,19ebc <___vfiprintf_internal_r+0x2fc>
   19ce8:	1803951e 	bne	r3,zero,1ab40 <___vfiprintf_internal_r+0xf80>
   19cec:	d8c02417 	ldw	r3,144(sp)
   19cf0:	d8001b15 	stw	zero,108(sp)
   19cf4:	d811883a 	mov	r8,sp
   19cf8:	1c07883a 	add	r3,r3,r16
   19cfc:	d8c02415 	stw	r3,144(sp)
   19d00:	a0800007 	ldb	r2,0(r20)
   19d04:	1002e026 	beq	r2,zero,1a888 <___vfiprintf_internal_r+0xcc8>
   19d08:	a5800044 	addi	r22,r20,1
   19d0c:	a0c00047 	ldb	r3,1(r20)
   19d10:	d8001d85 	stb	zero,118(sp)
   19d14:	0027883a 	mov	r19,zero
   19d18:	d8002305 	stb	zero,140(sp)
   19d1c:	043fffc4 	movi	r16,-1
   19d20:	d8002515 	stw	zero,148(sp)
   19d24:	0023883a 	mov	r17,zero
   19d28:	05001604 	movi	r20,88
   19d2c:	05400244 	movi	r21,9
   19d30:	402f883a 	mov	r23,r8
   19d34:	b5800044 	addi	r22,r22,1
   19d38:	18bff804 	addi	r2,r3,-32
   19d3c:	a0827736 	bltu	r20,r2,1a71c <___vfiprintf_internal_r+0xb5c>
   19d40:	100490ba 	slli	r2,r2,2
   19d44:	010000b4 	movhi	r4,2
   19d48:	21275604 	addi	r4,r4,-25256
   19d4c:	1105883a 	add	r2,r2,r4
   19d50:	10800017 	ldw	r2,0(r2)
   19d54:	1000683a 	jmp	r2
   19d58:	0001a41c 	xori	zero,zero,1680
   19d5c:	0001a71c 	xori	zero,zero,1692
   19d60:	0001a71c 	xori	zero,zero,1692
   19d64:	0001a438 	rdprs	zero,zero,1680
   19d68:	0001a71c 	xori	zero,zero,1692
   19d6c:	0001a71c 	xori	zero,zero,1692
   19d70:	0001a71c 	xori	zero,zero,1692
   19d74:	0001a71c 	xori	zero,zero,1692
   19d78:	0001a71c 	xori	zero,zero,1692
   19d7c:	0001a71c 	xori	zero,zero,1692
   19d80:	0001a640 	call	1a64 <_ZN3USB4TaskEv+0x248>
   19d84:	0001a664 	muli	zero,zero,1689
   19d88:	0001a71c 	xori	zero,zero,1692
   19d8c:	00019f5c 	xori	zero,zero,1661
   19d90:	0001a678 	rdprs	zero,zero,1689
   19d94:	0001a71c 	xori	zero,zero,1692
   19d98:	0001a444 	movi	zero,1681
   19d9c:	0001a450 	cmplti	zero,zero,1681
   19da0:	0001a450 	cmplti	zero,zero,1681
   19da4:	0001a450 	cmplti	zero,zero,1681
   19da8:	0001a450 	cmplti	zero,zero,1681
   19dac:	0001a450 	cmplti	zero,zero,1681
   19db0:	0001a450 	cmplti	zero,zero,1681
   19db4:	0001a450 	cmplti	zero,zero,1681
   19db8:	0001a450 	cmplti	zero,zero,1681
   19dbc:	0001a450 	cmplti	zero,zero,1681
   19dc0:	0001a71c 	xori	zero,zero,1692
   19dc4:	0001a71c 	xori	zero,zero,1692
   19dc8:	0001a71c 	xori	zero,zero,1692
   19dcc:	0001a71c 	xori	zero,zero,1692
   19dd0:	0001a71c 	xori	zero,zero,1692
   19dd4:	0001a71c 	xori	zero,zero,1692
   19dd8:	0001a71c 	xori	zero,zero,1692
   19ddc:	0001a71c 	xori	zero,zero,1692
   19de0:	0001a71c 	xori	zero,zero,1692
   19de4:	0001a71c 	xori	zero,zero,1692
   19de8:	0001a490 	cmplti	zero,zero,1682
   19dec:	0001a71c 	xori	zero,zero,1692
   19df0:	0001a71c 	xori	zero,zero,1692
   19df4:	0001a71c 	xori	zero,zero,1692
   19df8:	0001a71c 	xori	zero,zero,1692
   19dfc:	0001a71c 	xori	zero,zero,1692
   19e00:	0001a71c 	xori	zero,zero,1692
   19e04:	0001a71c 	xori	zero,zero,1692
   19e08:	0001a71c 	xori	zero,zero,1692
   19e0c:	0001a71c 	xori	zero,zero,1692
   19e10:	0001a71c 	xori	zero,zero,1692
   19e14:	0001a4cc 	andi	zero,zero,1683
   19e18:	0001a71c 	xori	zero,zero,1692
   19e1c:	0001a71c 	xori	zero,zero,1692
   19e20:	0001a71c 	xori	zero,zero,1692
   19e24:	0001a71c 	xori	zero,zero,1692
   19e28:	0001a71c 	xori	zero,zero,1692
   19e2c:	0001a528 	cmpgeui	zero,zero,1684
   19e30:	0001a71c 	xori	zero,zero,1692
   19e34:	0001a71c 	xori	zero,zero,1692
   19e38:	0001a59c 	xori	zero,zero,1686
   19e3c:	0001a71c 	xori	zero,zero,1692
   19e40:	0001a71c 	xori	zero,zero,1692
   19e44:	0001a71c 	xori	zero,zero,1692
   19e48:	0001a71c 	xori	zero,zero,1692
   19e4c:	0001a71c 	xori	zero,zero,1692
   19e50:	0001a71c 	xori	zero,zero,1692
   19e54:	0001a71c 	xori	zero,zero,1692
   19e58:	0001a71c 	xori	zero,zero,1692
   19e5c:	0001a71c 	xori	zero,zero,1692
   19e60:	0001a71c 	xori	zero,zero,1692
   19e64:	0001a344 	movi	zero,1677
   19e68:	0001a374 	movhi	zero,1677
   19e6c:	0001a71c 	xori	zero,zero,1692
   19e70:	0001a71c 	xori	zero,zero,1692
   19e74:	0001a71c 	xori	zero,zero,1692
   19e78:	0001a6c4 	movi	zero,1691
   19e7c:	0001a374 	movhi	zero,1677
   19e80:	0001a71c 	xori	zero,zero,1692
   19e84:	0001a71c 	xori	zero,zero,1692
   19e88:	0001a21c 	xori	zero,zero,1672
   19e8c:	0001a71c 	xori	zero,zero,1692
   19e90:	0001a230 	cmpltui	zero,zero,1672
   19e94:	0001a268 	cmpgeui	zero,zero,1673
   19e98:	00019f68 	cmpgeui	zero,zero,1661
   19e9c:	0001a210 	cmplti	zero,zero,1672
   19ea0:	0001a71c 	xori	zero,zero,1692
   19ea4:	0001a5dc 	xori	zero,zero,1687
   19ea8:	0001a71c 	xori	zero,zero,1692
   19eac:	0001a628 	cmpgeui	zero,zero,1688
   19eb0:	0001a71c 	xori	zero,zero,1692
   19eb4:	0001a71c 	xori	zero,zero,1692
   19eb8:	0001a2ec 	andhi	zero,zero,1675
   19ebc:	42000204 	addi	r8,r8,8
   19ec0:	d8c02417 	ldw	r3,144(sp)
   19ec4:	1c07883a 	add	r3,r3,r16
   19ec8:	d8c02415 	stw	r3,144(sp)
   19ecc:	003f8c06 	br	19d00 <__alt_data_end+0xfc019d00>
   19ed0:	d9402017 	ldw	r5,128(sp)
   19ed4:	d9002117 	ldw	r4,132(sp)
   19ed8:	0013c500 	call	13c50 <__swsetup_r>
   19edc:	1003c11e 	bne	r2,zero,1ade4 <___vfiprintf_internal_r+0x1224>
   19ee0:	d9402017 	ldw	r5,128(sp)
   19ee4:	00c00284 	movi	r3,10
   19ee8:	2880030b 	ldhu	r2,12(r5)
   19eec:	1080068c 	andi	r2,r2,26
   19ef0:	10ff581e 	bne	r2,r3,19c54 <__alt_data_end+0xfc019c54>
   19ef4:	d8c02017 	ldw	r3,128(sp)
   19ef8:	1880038f 	ldh	r2,14(r3)
   19efc:	103f5516 	blt	r2,zero,19c54 <__alt_data_end+0xfc019c54>
   19f00:	d9c02217 	ldw	r7,136(sp)
   19f04:	d9002117 	ldw	r4,132(sp)
   19f08:	a80d883a 	mov	r6,r21
   19f0c:	180b883a 	mov	r5,r3
   19f10:	001b0e80 	call	1b0e8 <__sbprintf>
   19f14:	dfc03517 	ldw	ra,212(sp)
   19f18:	df003417 	ldw	fp,208(sp)
   19f1c:	ddc03317 	ldw	r23,204(sp)
   19f20:	dd803217 	ldw	r22,200(sp)
   19f24:	dd403117 	ldw	r21,196(sp)
   19f28:	dd003017 	ldw	r20,192(sp)
   19f2c:	dcc02f17 	ldw	r19,188(sp)
   19f30:	dc802e17 	ldw	r18,184(sp)
   19f34:	dc402d17 	ldw	r17,180(sp)
   19f38:	dc002c17 	ldw	r16,176(sp)
   19f3c:	dec03604 	addi	sp,sp,216
   19f40:	f800283a 	ret
   19f44:	0015c5c0 	call	15c5c <__sinit>
   19f48:	003f2f06 	br	19c08 <__alt_data_end+0xfc019c08>
   19f4c:	d8c02517 	ldw	r3,148(sp)
   19f50:	d8802215 	stw	r2,136(sp)
   19f54:	00c7c83a 	sub	r3,zero,r3
   19f58:	d8c02515 	stw	r3,148(sp)
   19f5c:	8c400114 	ori	r17,r17,4
   19f60:	b0c00007 	ldb	r3,0(r22)
   19f64:	003f7306 	br	19d34 <__alt_data_end+0xfc019d34>
   19f68:	00800c04 	movi	r2,48
   19f6c:	d9402217 	ldw	r5,136(sp)
   19f70:	d8801d05 	stb	r2,116(sp)
   19f74:	00801e04 	movi	r2,120
   19f78:	d8801d45 	stb	r2,117(sp)
   19f7c:	d8001d85 	stb	zero,118(sp)
   19f80:	b811883a 	mov	r8,r23
   19f84:	28c00104 	addi	r3,r5,4
   19f88:	2cc00017 	ldw	r19,0(r5)
   19f8c:	0029883a 	mov	r20,zero
   19f90:	88800094 	ori	r2,r17,2
   19f94:	80032516 	blt	r16,zero,1ac2c <___vfiprintf_internal_r+0x106c>
   19f98:	00bfdfc4 	movi	r2,-129
   19f9c:	88a2703a 	and	r17,r17,r2
   19fa0:	d8c02215 	stw	r3,136(sp)
   19fa4:	8c400094 	ori	r17,r17,2
   19fa8:	98032a1e 	bne	r19,zero,1ac54 <___vfiprintf_internal_r+0x1094>
   19fac:	008000f4 	movhi	r2,3
   19fb0:	10aa8f04 	addi	r2,r2,-21956
   19fb4:	d8802615 	stw	r2,152(sp)
   19fb8:	002b883a 	mov	r21,zero
   19fbc:	8001741e 	bne	r16,zero,1a590 <___vfiprintf_internal_r+0x9d0>
   19fc0:	0021883a 	mov	r16,zero
   19fc4:	0029883a 	mov	r20,zero
   19fc8:	ddc01a04 	addi	r23,sp,104
   19fcc:	8027883a 	mov	r19,r16
   19fd0:	8500010e 	bge	r16,r20,19fd8 <___vfiprintf_internal_r+0x418>
   19fd4:	a027883a 	mov	r19,r20
   19fd8:	ad403fcc 	andi	r21,r21,255
   19fdc:	ad40201c 	xori	r21,r21,128
   19fe0:	ad7fe004 	addi	r21,r21,-128
   19fe4:	a8000126 	beq	r21,zero,19fec <___vfiprintf_internal_r+0x42c>
   19fe8:	9cc00044 	addi	r19,r19,1
   19fec:	89c0008c 	andi	r7,r17,2
   19ff0:	38000126 	beq	r7,zero,19ff8 <___vfiprintf_internal_r+0x438>
   19ff4:	9cc00084 	addi	r19,r19,2
   19ff8:	88c0210c 	andi	r3,r17,132
   19ffc:	1801dd1e 	bne	r3,zero,1a774 <___vfiprintf_internal_r+0xbb4>
   1a000:	d9402517 	ldw	r5,148(sp)
   1a004:	2cebc83a 	sub	r21,r5,r19
   1a008:	0541da0e 	bge	zero,r21,1a774 <___vfiprintf_internal_r+0xbb4>
   1a00c:	07000404 	movi	fp,16
   1a010:	d8801c17 	ldw	r2,112(sp)
   1a014:	e543be0e 	bge	fp,r21,1af10 <___vfiprintf_internal_r+0x1350>
   1a018:	014000f4 	movhi	r5,3
   1a01c:	296b0304 	addi	r5,r5,-21492
   1a020:	dc002715 	stw	r16,156(sp)
   1a024:	d9801b17 	ldw	r6,108(sp)
   1a028:	a821883a 	mov	r16,r21
   1a02c:	d9402315 	stw	r5,140(sp)
   1a030:	028001c4 	movi	r10,7
   1a034:	d9c02915 	stw	r7,164(sp)
   1a038:	182b883a 	mov	r21,r3
   1a03c:	00000506 	br	1a054 <___vfiprintf_internal_r+0x494>
   1a040:	31000084 	addi	r4,r6,2
   1a044:	42000204 	addi	r8,r8,8
   1a048:	180d883a 	mov	r6,r3
   1a04c:	843ffc04 	addi	r16,r16,-16
   1a050:	e4000f0e 	bge	fp,r16,1a090 <___vfiprintf_internal_r+0x4d0>
   1a054:	010000f4 	movhi	r4,3
   1a058:	10800404 	addi	r2,r2,16
   1a05c:	30c00044 	addi	r3,r6,1
   1a060:	212b0304 	addi	r4,r4,-21492
   1a064:	41000015 	stw	r4,0(r8)
   1a068:	47000115 	stw	fp,4(r8)
   1a06c:	d8801c15 	stw	r2,112(sp)
   1a070:	d8c01b15 	stw	r3,108(sp)
   1a074:	50fff20e 	bge	r10,r3,1a040 <__alt_data_end+0xfc01a040>
   1a078:	1001b21e 	bne	r2,zero,1a744 <___vfiprintf_internal_r+0xb84>
   1a07c:	843ffc04 	addi	r16,r16,-16
   1a080:	000d883a 	mov	r6,zero
   1a084:	01000044 	movi	r4,1
   1a088:	d811883a 	mov	r8,sp
   1a08c:	e43ff116 	blt	fp,r16,1a054 <__alt_data_end+0xfc01a054>
   1a090:	a807883a 	mov	r3,r21
   1a094:	d9c02917 	ldw	r7,164(sp)
   1a098:	802b883a 	mov	r21,r16
   1a09c:	dc002717 	ldw	r16,156(sp)
   1a0a0:	d9402317 	ldw	r5,140(sp)
   1a0a4:	a885883a 	add	r2,r21,r2
   1a0a8:	45400115 	stw	r21,4(r8)
   1a0ac:	41400015 	stw	r5,0(r8)
   1a0b0:	d8801c15 	stw	r2,112(sp)
   1a0b4:	d9001b15 	stw	r4,108(sp)
   1a0b8:	014001c4 	movi	r5,7
   1a0bc:	29026216 	blt	r5,r4,1aa48 <___vfiprintf_internal_r+0xe88>
   1a0c0:	d9801d87 	ldb	r6,118(sp)
   1a0c4:	42000204 	addi	r8,r8,8
   1a0c8:	21400044 	addi	r5,r4,1
   1a0cc:	3001ae1e 	bne	r6,zero,1a788 <___vfiprintf_internal_r+0xbc8>
   1a0d0:	3801bb26 	beq	r7,zero,1a7c0 <___vfiprintf_internal_r+0xc00>
   1a0d4:	d9001d04 	addi	r4,sp,116
   1a0d8:	10800084 	addi	r2,r2,2
   1a0dc:	41000015 	stw	r4,0(r8)
   1a0e0:	01000084 	movi	r4,2
   1a0e4:	41000115 	stw	r4,4(r8)
   1a0e8:	d8801c15 	stw	r2,112(sp)
   1a0ec:	d9401b15 	stw	r5,108(sp)
   1a0f0:	010001c4 	movi	r4,7
   1a0f4:	2142680e 	bge	r4,r5,1aa98 <___vfiprintf_internal_r+0xed8>
   1a0f8:	1002b11e 	bne	r2,zero,1abc0 <___vfiprintf_internal_r+0x1000>
   1a0fc:	01802004 	movi	r6,128
   1a100:	01400044 	movi	r5,1
   1a104:	0009883a 	mov	r4,zero
   1a108:	d811883a 	mov	r8,sp
   1a10c:	1981ae1e 	bne	r3,r6,1a7c8 <___vfiprintf_internal_r+0xc08>
   1a110:	d8c02517 	ldw	r3,148(sp)
   1a114:	1cf9c83a 	sub	fp,r3,r19
   1a118:	0701ab0e 	bge	zero,fp,1a7c8 <___vfiprintf_internal_r+0xc08>
   1a11c:	05400404 	movi	r21,16
   1a120:	af03a90e 	bge	r21,fp,1afc8 <___vfiprintf_internal_r+0x1408>
   1a124:	014000f4 	movhi	r5,3
   1a128:	296aff04 	addi	r5,r5,-21508
   1a12c:	d9402315 	stw	r5,140(sp)
   1a130:	01c001c4 	movi	r7,7
   1a134:	00000506 	br	1a14c <___vfiprintf_internal_r+0x58c>
   1a138:	21800084 	addi	r6,r4,2
   1a13c:	42000204 	addi	r8,r8,8
   1a140:	1809883a 	mov	r4,r3
   1a144:	e73ffc04 	addi	fp,fp,-16
   1a148:	af000d0e 	bge	r21,fp,1a180 <___vfiprintf_internal_r+0x5c0>
   1a14c:	10800404 	addi	r2,r2,16
   1a150:	20c00044 	addi	r3,r4,1
   1a154:	44800015 	stw	r18,0(r8)
   1a158:	45400115 	stw	r21,4(r8)
   1a15c:	d8801c15 	stw	r2,112(sp)
   1a160:	d8c01b15 	stw	r3,108(sp)
   1a164:	38fff40e 	bge	r7,r3,1a138 <__alt_data_end+0xfc01a138>
   1a168:	10022b1e 	bne	r2,zero,1aa18 <___vfiprintf_internal_r+0xe58>
   1a16c:	e73ffc04 	addi	fp,fp,-16
   1a170:	01800044 	movi	r6,1
   1a174:	0009883a 	mov	r4,zero
   1a178:	d811883a 	mov	r8,sp
   1a17c:	af3ff316 	blt	r21,fp,1a14c <__alt_data_end+0xfc01a14c>
   1a180:	d8c02317 	ldw	r3,140(sp)
   1a184:	1705883a 	add	r2,r2,fp
   1a188:	47000115 	stw	fp,4(r8)
   1a18c:	40c00015 	stw	r3,0(r8)
   1a190:	d8801c15 	stw	r2,112(sp)
   1a194:	d9801b15 	stw	r6,108(sp)
   1a198:	00c001c4 	movi	r3,7
   1a19c:	19829416 	blt	r3,r6,1abf0 <___vfiprintf_internal_r+0x1030>
   1a1a0:	8521c83a 	sub	r16,r16,r20
   1a1a4:	42000204 	addi	r8,r8,8
   1a1a8:	31400044 	addi	r5,r6,1
   1a1ac:	3009883a 	mov	r4,r6
   1a1b0:	04018716 	blt	zero,r16,1a7d0 <___vfiprintf_internal_r+0xc10>
   1a1b4:	a085883a 	add	r2,r20,r2
   1a1b8:	45c00015 	stw	r23,0(r8)
   1a1bc:	45000115 	stw	r20,4(r8)
   1a1c0:	d8801c15 	stw	r2,112(sp)
   1a1c4:	d9401b15 	stw	r5,108(sp)
   1a1c8:	00c001c4 	movi	r3,7
   1a1cc:	1941c20e 	bge	r3,r5,1a8d8 <___vfiprintf_internal_r+0xd18>
   1a1d0:	1002531e 	bne	r2,zero,1ab20 <___vfiprintf_internal_r+0xf60>
   1a1d4:	d8001b15 	stw	zero,108(sp)
   1a1d8:	8c40010c 	andi	r17,r17,4
   1a1dc:	88023226 	beq	r17,zero,1aaa8 <___vfiprintf_internal_r+0xee8>
   1a1e0:	d9002517 	ldw	r4,148(sp)
   1a1e4:	24e3c83a 	sub	r17,r4,r19
   1a1e8:	04432916 	blt	zero,r17,1ae90 <___vfiprintf_internal_r+0x12d0>
   1a1ec:	d8802517 	ldw	r2,148(sp)
   1a1f0:	14c0010e 	bge	r2,r19,1a1f8 <___vfiprintf_internal_r+0x638>
   1a1f4:	9805883a 	mov	r2,r19
   1a1f8:	d8c02417 	ldw	r3,144(sp)
   1a1fc:	1887883a 	add	r3,r3,r2
   1a200:	d8c02415 	stw	r3,144(sp)
   1a204:	d8001b15 	stw	zero,108(sp)
   1a208:	d811883a 	mov	r8,sp
   1a20c:	003ea006 	br	19c90 <__alt_data_end+0xfc019c90>
   1a210:	8c400814 	ori	r17,r17,32
   1a214:	b0c00007 	ldb	r3,0(r22)
   1a218:	003ec606 	br	19d34 <__alt_data_end+0xfc019d34>
   1a21c:	b0c00007 	ldb	r3,0(r22)
   1a220:	00801b04 	movi	r2,108
   1a224:	18832026 	beq	r3,r2,1aea8 <___vfiprintf_internal_r+0x12e8>
   1a228:	8c400414 	ori	r17,r17,16
   1a22c:	003ec106 	br	19d34 <__alt_data_end+0xfc019d34>
   1a230:	9cc03fcc 	andi	r19,r19,255
   1a234:	b811883a 	mov	r8,r23
   1a238:	9803981e 	bne	r19,zero,1b09c <___vfiprintf_internal_r+0x14dc>
   1a23c:	8880080c 	andi	r2,r17,32
   1a240:	1002be26 	beq	r2,zero,1ad3c <___vfiprintf_internal_r+0x117c>
   1a244:	d9002217 	ldw	r4,136(sp)
   1a248:	d9402417 	ldw	r5,144(sp)
   1a24c:	20800017 	ldw	r2,0(r4)
   1a250:	2807d7fa 	srai	r3,r5,31
   1a254:	21000104 	addi	r4,r4,4
   1a258:	d9002215 	stw	r4,136(sp)
   1a25c:	11400015 	stw	r5,0(r2)
   1a260:	10c00115 	stw	r3,4(r2)
   1a264:	003e8a06 	br	19c90 <__alt_data_end+0xfc019c90>
   1a268:	9cc03fcc 	andi	r19,r19,255
   1a26c:	b811883a 	mov	r8,r23
   1a270:	9803871e 	bne	r19,zero,1b090 <___vfiprintf_internal_r+0x14d0>
   1a274:	8880080c 	andi	r2,r17,32
   1a278:	10009a26 	beq	r2,zero,1a4e4 <___vfiprintf_internal_r+0x924>
   1a27c:	d9002217 	ldw	r4,136(sp)
   1a280:	d8001d85 	stb	zero,118(sp)
   1a284:	20800204 	addi	r2,r4,8
   1a288:	24c00017 	ldw	r19,0(r4)
   1a28c:	25000117 	ldw	r20,4(r4)
   1a290:	8002a416 	blt	r16,zero,1ad24 <___vfiprintf_internal_r+0x1164>
   1a294:	013fdfc4 	movi	r4,-129
   1a298:	9d06b03a 	or	r3,r19,r20
   1a29c:	d8802215 	stw	r2,136(sp)
   1a2a0:	8922703a 	and	r17,r17,r4
   1a2a4:	18009b26 	beq	r3,zero,1a514 <___vfiprintf_internal_r+0x954>
   1a2a8:	002b883a 	mov	r21,zero
   1a2ac:	ddc01a04 	addi	r23,sp,104
   1a2b0:	9806d0fa 	srli	r3,r19,3
   1a2b4:	a008977a 	slli	r4,r20,29
   1a2b8:	a028d0fa 	srli	r20,r20,3
   1a2bc:	9cc001cc 	andi	r19,r19,7
   1a2c0:	98800c04 	addi	r2,r19,48
   1a2c4:	bdffffc4 	addi	r23,r23,-1
   1a2c8:	20e6b03a 	or	r19,r4,r3
   1a2cc:	b8800005 	stb	r2,0(r23)
   1a2d0:	9d06b03a 	or	r3,r19,r20
   1a2d4:	183ff61e 	bne	r3,zero,1a2b0 <__alt_data_end+0xfc01a2b0>
   1a2d8:	88c0004c 	andi	r3,r17,1
   1a2dc:	18021f1e 	bne	r3,zero,1ab5c <___vfiprintf_internal_r+0xf9c>
   1a2e0:	d9401e17 	ldw	r5,120(sp)
   1a2e4:	2de9c83a 	sub	r20,r5,r23
   1a2e8:	003f3806 	br	19fcc <__alt_data_end+0xfc019fcc>
   1a2ec:	9cc03fcc 	andi	r19,r19,255
   1a2f0:	b811883a 	mov	r8,r23
   1a2f4:	98034f1e 	bne	r19,zero,1b034 <___vfiprintf_internal_r+0x1474>
   1a2f8:	008000f4 	movhi	r2,3
   1a2fc:	10aa8f04 	addi	r2,r2,-21956
   1a300:	d8802615 	stw	r2,152(sp)
   1a304:	8880080c 	andi	r2,r17,32
   1a308:	1000ac26 	beq	r2,zero,1a5bc <___vfiprintf_internal_r+0x9fc>
   1a30c:	d9002217 	ldw	r4,136(sp)
   1a310:	24c00017 	ldw	r19,0(r4)
   1a314:	25000117 	ldw	r20,4(r4)
   1a318:	21000204 	addi	r4,r4,8
   1a31c:	d9002215 	stw	r4,136(sp)
   1a320:	8880004c 	andi	r2,r17,1
   1a324:	1001e726 	beq	r2,zero,1aac4 <___vfiprintf_internal_r+0xf04>
   1a328:	9d04b03a 	or	r2,r19,r20
   1a32c:	10025c1e 	bne	r2,zero,1aca0 <___vfiprintf_internal_r+0x10e0>
   1a330:	d8001d85 	stb	zero,118(sp)
   1a334:	80024416 	blt	r16,zero,1ac48 <___vfiprintf_internal_r+0x1088>
   1a338:	00bfdfc4 	movi	r2,-129
   1a33c:	88a2703a 	and	r17,r17,r2
   1a340:	003f1d06 	br	19fb8 <__alt_data_end+0xfc019fb8>
   1a344:	d8c02217 	ldw	r3,136(sp)
   1a348:	04c00044 	movi	r19,1
   1a34c:	b811883a 	mov	r8,r23
   1a350:	18800017 	ldw	r2,0(r3)
   1a354:	18c00104 	addi	r3,r3,4
   1a358:	d8001d85 	stb	zero,118(sp)
   1a35c:	d8801005 	stb	r2,64(sp)
   1a360:	d8c02215 	stw	r3,136(sp)
   1a364:	9829883a 	mov	r20,r19
   1a368:	ddc01004 	addi	r23,sp,64
   1a36c:	0021883a 	mov	r16,zero
   1a370:	003f1e06 	br	19fec <__alt_data_end+0xfc019fec>
   1a374:	9cc03fcc 	andi	r19,r19,255
   1a378:	b811883a 	mov	r8,r23
   1a37c:	9803331e 	bne	r19,zero,1b04c <___vfiprintf_internal_r+0x148c>
   1a380:	8880080c 	andi	r2,r17,32
   1a384:	10004826 	beq	r2,zero,1a4a8 <___vfiprintf_internal_r+0x8e8>
   1a388:	d9002217 	ldw	r4,136(sp)
   1a38c:	20800117 	ldw	r2,4(r4)
   1a390:	24c00017 	ldw	r19,0(r4)
   1a394:	21000204 	addi	r4,r4,8
   1a398:	d9002215 	stw	r4,136(sp)
   1a39c:	1029883a 	mov	r20,r2
   1a3a0:	10024c16 	blt	r2,zero,1acd4 <___vfiprintf_internal_r+0x1114>
   1a3a4:	dd401d83 	ldbu	r21,118(sp)
   1a3a8:	80007116 	blt	r16,zero,1a570 <___vfiprintf_internal_r+0x9b0>
   1a3ac:	00ffdfc4 	movi	r3,-129
   1a3b0:	9d04b03a 	or	r2,r19,r20
   1a3b4:	88e2703a 	and	r17,r17,r3
   1a3b8:	1000d126 	beq	r2,zero,1a700 <___vfiprintf_internal_r+0xb40>
   1a3bc:	a0023526 	beq	r20,zero,1ac94 <___vfiprintf_internal_r+0x10d4>
   1a3c0:	ddc01a04 	addi	r23,sp,104
   1a3c4:	4039883a 	mov	fp,r8
   1a3c8:	9809883a 	mov	r4,r19
   1a3cc:	a00b883a 	mov	r5,r20
   1a3d0:	01800284 	movi	r6,10
   1a3d4:	000f883a 	mov	r7,zero
   1a3d8:	001c0ec0 	call	1c0ec <__umoddi3>
   1a3dc:	10800c04 	addi	r2,r2,48
   1a3e0:	bdffffc4 	addi	r23,r23,-1
   1a3e4:	9809883a 	mov	r4,r19
   1a3e8:	a00b883a 	mov	r5,r20
   1a3ec:	b8800005 	stb	r2,0(r23)
   1a3f0:	01800284 	movi	r6,10
   1a3f4:	000f883a 	mov	r7,zero
   1a3f8:	001baf00 	call	1baf0 <__udivdi3>
   1a3fc:	1027883a 	mov	r19,r2
   1a400:	10c4b03a 	or	r2,r2,r3
   1a404:	1829883a 	mov	r20,r3
   1a408:	103fef1e 	bne	r2,zero,1a3c8 <__alt_data_end+0xfc01a3c8>
   1a40c:	d9001e17 	ldw	r4,120(sp)
   1a410:	e011883a 	mov	r8,fp
   1a414:	25e9c83a 	sub	r20,r4,r23
   1a418:	003eec06 	br	19fcc <__alt_data_end+0xfc019fcc>
   1a41c:	d8802307 	ldb	r2,140(sp)
   1a420:	1002361e 	bne	r2,zero,1acfc <___vfiprintf_internal_r+0x113c>
   1a424:	00c00804 	movi	r3,32
   1a428:	d8c02305 	stb	r3,140(sp)
   1a42c:	04c00044 	movi	r19,1
   1a430:	b0c00007 	ldb	r3,0(r22)
   1a434:	003e3f06 	br	19d34 <__alt_data_end+0xfc019d34>
   1a438:	8c400054 	ori	r17,r17,1
   1a43c:	b0c00007 	ldb	r3,0(r22)
   1a440:	003e3c06 	br	19d34 <__alt_data_end+0xfc019d34>
   1a444:	8c402014 	ori	r17,r17,128
   1a448:	b0c00007 	ldb	r3,0(r22)
   1a44c:	003e3906 	br	19d34 <__alt_data_end+0xfc019d34>
   1a450:	dc002715 	stw	r16,156(sp)
   1a454:	d8002515 	stw	zero,148(sp)
   1a458:	1f3ff404 	addi	fp,r3,-48
   1a45c:	0009883a 	mov	r4,zero
   1a460:	b021883a 	mov	r16,r22
   1a464:	01400284 	movi	r5,10
   1a468:	000cec40 	call	cec4 <__mulsi3>
   1a46c:	80c00007 	ldb	r3,0(r16)
   1a470:	e089883a 	add	r4,fp,r2
   1a474:	b5800044 	addi	r22,r22,1
   1a478:	1f3ff404 	addi	fp,r3,-48
   1a47c:	b021883a 	mov	r16,r22
   1a480:	af3ff82e 	bgeu	r21,fp,1a464 <__alt_data_end+0xfc01a464>
   1a484:	d9002515 	stw	r4,148(sp)
   1a488:	dc002717 	ldw	r16,156(sp)
   1a48c:	003e2a06 	br	19d38 <__alt_data_end+0xfc019d38>
   1a490:	9cc03fcc 	andi	r19,r19,255
   1a494:	b811883a 	mov	r8,r23
   1a498:	9802e91e 	bne	r19,zero,1b040 <___vfiprintf_internal_r+0x1480>
   1a49c:	8c400414 	ori	r17,r17,16
   1a4a0:	8880080c 	andi	r2,r17,32
   1a4a4:	103fb81e 	bne	r2,zero,1a388 <__alt_data_end+0xfc01a388>
   1a4a8:	8880040c 	andi	r2,r17,16
   1a4ac:	10022e26 	beq	r2,zero,1ad68 <___vfiprintf_internal_r+0x11a8>
   1a4b0:	d9402217 	ldw	r5,136(sp)
   1a4b4:	2cc00017 	ldw	r19,0(r5)
   1a4b8:	29400104 	addi	r5,r5,4
   1a4bc:	d9402215 	stw	r5,136(sp)
   1a4c0:	9829d7fa 	srai	r20,r19,31
   1a4c4:	a005883a 	mov	r2,r20
   1a4c8:	003fb506 	br	1a3a0 <__alt_data_end+0xfc01a3a0>
   1a4cc:	9cc03fcc 	andi	r19,r19,255
   1a4d0:	b811883a 	mov	r8,r23
   1a4d4:	9802fa1e 	bne	r19,zero,1b0c0 <___vfiprintf_internal_r+0x1500>
   1a4d8:	8c400414 	ori	r17,r17,16
   1a4dc:	8880080c 	andi	r2,r17,32
   1a4e0:	103f661e 	bne	r2,zero,1a27c <__alt_data_end+0xfc01a27c>
   1a4e4:	8880040c 	andi	r2,r17,16
   1a4e8:	10020626 	beq	r2,zero,1ad04 <___vfiprintf_internal_r+0x1144>
   1a4ec:	d9402217 	ldw	r5,136(sp)
   1a4f0:	d8001d85 	stb	zero,118(sp)
   1a4f4:	0029883a 	mov	r20,zero
   1a4f8:	28800104 	addi	r2,r5,4
   1a4fc:	2cc00017 	ldw	r19,0(r5)
   1a500:	80020816 	blt	r16,zero,1ad24 <___vfiprintf_internal_r+0x1164>
   1a504:	00ffdfc4 	movi	r3,-129
   1a508:	d8802215 	stw	r2,136(sp)
   1a50c:	88e2703a 	and	r17,r17,r3
   1a510:	983f651e 	bne	r19,zero,1a2a8 <__alt_data_end+0xfc01a2a8>
   1a514:	002b883a 	mov	r21,zero
   1a518:	8002cf26 	beq	r16,zero,1b058 <___vfiprintf_internal_r+0x1498>
   1a51c:	0027883a 	mov	r19,zero
   1a520:	0029883a 	mov	r20,zero
   1a524:	003f6106 	br	1a2ac <__alt_data_end+0xfc01a2ac>
   1a528:	9cc03fcc 	andi	r19,r19,255
   1a52c:	b811883a 	mov	r8,r23
   1a530:	9802e01e 	bne	r19,zero,1b0b4 <___vfiprintf_internal_r+0x14f4>
   1a534:	8c400414 	ori	r17,r17,16
   1a538:	8880080c 	andi	r2,r17,32
   1a53c:	1000641e 	bne	r2,zero,1a6d0 <___vfiprintf_internal_r+0xb10>
   1a540:	8880040c 	andi	r2,r17,16
   1a544:	1001c81e 	bne	r2,zero,1ac68 <___vfiprintf_internal_r+0x10a8>
   1a548:	8880100c 	andi	r2,r17,64
   1a54c:	d8001d85 	stb	zero,118(sp)
   1a550:	1002281e 	bne	r2,zero,1adf4 <___vfiprintf_internal_r+0x1234>
   1a554:	d9002217 	ldw	r4,136(sp)
   1a558:	0029883a 	mov	r20,zero
   1a55c:	20800104 	addi	r2,r4,4
   1a560:	24c00017 	ldw	r19,0(r4)
   1a564:	8001c60e 	bge	r16,zero,1ac80 <___vfiprintf_internal_r+0x10c0>
   1a568:	d8802215 	stw	r2,136(sp)
   1a56c:	002b883a 	mov	r21,zero
   1a570:	9d04b03a 	or	r2,r19,r20
   1a574:	103f911e 	bne	r2,zero,1a3bc <__alt_data_end+0xfc01a3bc>
   1a578:	00800044 	movi	r2,1
   1a57c:	10803fcc 	andi	r2,r2,255
   1a580:	00c00044 	movi	r3,1
   1a584:	10c05f26 	beq	r2,r3,1a704 <___vfiprintf_internal_r+0xb44>
   1a588:	00c00084 	movi	r3,2
   1a58c:	10ffe31e 	bne	r2,r3,1a51c <__alt_data_end+0xfc01a51c>
   1a590:	0027883a 	mov	r19,zero
   1a594:	0029883a 	mov	r20,zero
   1a598:	00015106 	br	1aae0 <___vfiprintf_internal_r+0xf20>
   1a59c:	9cc03fcc 	andi	r19,r19,255
   1a5a0:	b811883a 	mov	r8,r23
   1a5a4:	9802c01e 	bne	r19,zero,1b0a8 <___vfiprintf_internal_r+0x14e8>
   1a5a8:	014000f4 	movhi	r5,3
   1a5ac:	296a8a04 	addi	r5,r5,-21976
   1a5b0:	d9402615 	stw	r5,152(sp)
   1a5b4:	8880080c 	andi	r2,r17,32
   1a5b8:	103f541e 	bne	r2,zero,1a30c <__alt_data_end+0xfc01a30c>
   1a5bc:	8880040c 	andi	r2,r17,16
   1a5c0:	1001f226 	beq	r2,zero,1ad8c <___vfiprintf_internal_r+0x11cc>
   1a5c4:	d9402217 	ldw	r5,136(sp)
   1a5c8:	0029883a 	mov	r20,zero
   1a5cc:	2cc00017 	ldw	r19,0(r5)
   1a5d0:	29400104 	addi	r5,r5,4
   1a5d4:	d9402215 	stw	r5,136(sp)
   1a5d8:	003f5106 	br	1a320 <__alt_data_end+0xfc01a320>
   1a5dc:	d8c02217 	ldw	r3,136(sp)
   1a5e0:	b811883a 	mov	r8,r23
   1a5e4:	d8001d85 	stb	zero,118(sp)
   1a5e8:	1dc00017 	ldw	r23,0(r3)
   1a5ec:	1f000104 	addi	fp,r3,4
   1a5f0:	b8025926 	beq	r23,zero,1af58 <___vfiprintf_internal_r+0x1398>
   1a5f4:	80023316 	blt	r16,zero,1aec4 <___vfiprintf_internal_r+0x1304>
   1a5f8:	800d883a 	mov	r6,r16
   1a5fc:	000b883a 	mov	r5,zero
   1a600:	b809883a 	mov	r4,r23
   1a604:	da002a15 	stw	r8,168(sp)
   1a608:	00169c80 	call	169c8 <memchr>
   1a60c:	da002a17 	ldw	r8,168(sp)
   1a610:	10026826 	beq	r2,zero,1afb4 <___vfiprintf_internal_r+0x13f4>
   1a614:	15e9c83a 	sub	r20,r2,r23
   1a618:	dd401d83 	ldbu	r21,118(sp)
   1a61c:	df002215 	stw	fp,136(sp)
   1a620:	0021883a 	mov	r16,zero
   1a624:	003e6906 	br	19fcc <__alt_data_end+0xfc019fcc>
   1a628:	9cc03fcc 	andi	r19,r19,255
   1a62c:	b811883a 	mov	r8,r23
   1a630:	983fc126 	beq	r19,zero,1a538 <__alt_data_end+0xfc01a538>
   1a634:	d8c02303 	ldbu	r3,140(sp)
   1a638:	d8c01d85 	stb	r3,118(sp)
   1a63c:	003fbe06 	br	1a538 <__alt_data_end+0xfc01a538>
   1a640:	d9002217 	ldw	r4,136(sp)
   1a644:	d9402217 	ldw	r5,136(sp)
   1a648:	21000017 	ldw	r4,0(r4)
   1a64c:	28800104 	addi	r2,r5,4
   1a650:	d9002515 	stw	r4,148(sp)
   1a654:	203e3d16 	blt	r4,zero,19f4c <__alt_data_end+0xfc019f4c>
   1a658:	d8802215 	stw	r2,136(sp)
   1a65c:	b0c00007 	ldb	r3,0(r22)
   1a660:	003db406 	br	19d34 <__alt_data_end+0xfc019d34>
   1a664:	00c00ac4 	movi	r3,43
   1a668:	d8c02305 	stb	r3,140(sp)
   1a66c:	04c00044 	movi	r19,1
   1a670:	b0c00007 	ldb	r3,0(r22)
   1a674:	003daf06 	br	19d34 <__alt_data_end+0xfc019d34>
   1a678:	b0c00007 	ldb	r3,0(r22)
   1a67c:	01000a84 	movi	r4,42
   1a680:	b4000044 	addi	r16,r22,1
   1a684:	19025e26 	beq	r3,r4,1b000 <___vfiprintf_internal_r+0x1440>
   1a688:	1f3ff404 	addi	fp,r3,-48
   1a68c:	0009883a 	mov	r4,zero
   1a690:	af025236 	bltu	r21,fp,1afdc <___vfiprintf_internal_r+0x141c>
   1a694:	01400284 	movi	r5,10
   1a698:	000cec40 	call	cec4 <__mulsi3>
   1a69c:	80c00007 	ldb	r3,0(r16)
   1a6a0:	1709883a 	add	r4,r2,fp
   1a6a4:	85800044 	addi	r22,r16,1
   1a6a8:	1f3ff404 	addi	fp,r3,-48
   1a6ac:	b021883a 	mov	r16,r22
   1a6b0:	af3ff82e 	bgeu	r21,fp,1a694 <__alt_data_end+0xfc01a694>
   1a6b4:	2021883a 	mov	r16,r4
   1a6b8:	203d9f0e 	bge	r4,zero,19d38 <__alt_data_end+0xfc019d38>
   1a6bc:	043fffc4 	movi	r16,-1
   1a6c0:	003d9d06 	br	19d38 <__alt_data_end+0xfc019d38>
   1a6c4:	8c401014 	ori	r17,r17,64
   1a6c8:	b0c00007 	ldb	r3,0(r22)
   1a6cc:	003d9906 	br	19d34 <__alt_data_end+0xfc019d34>
   1a6d0:	d9002217 	ldw	r4,136(sp)
   1a6d4:	d8001d85 	stb	zero,118(sp)
   1a6d8:	20c00204 	addi	r3,r4,8
   1a6dc:	24c00017 	ldw	r19,0(r4)
   1a6e0:	25000117 	ldw	r20,4(r4)
   1a6e4:	8001e716 	blt	r16,zero,1ae84 <___vfiprintf_internal_r+0x12c4>
   1a6e8:	013fdfc4 	movi	r4,-129
   1a6ec:	9d04b03a 	or	r2,r19,r20
   1a6f0:	d8c02215 	stw	r3,136(sp)
   1a6f4:	8922703a 	and	r17,r17,r4
   1a6f8:	002b883a 	mov	r21,zero
   1a6fc:	103f2f1e 	bne	r2,zero,1a3bc <__alt_data_end+0xfc01a3bc>
   1a700:	803e2f26 	beq	r16,zero,19fc0 <__alt_data_end+0xfc019fc0>
   1a704:	0027883a 	mov	r19,zero
   1a708:	9cc00c04 	addi	r19,r19,48
   1a70c:	dcc019c5 	stb	r19,103(sp)
   1a710:	dd002817 	ldw	r20,160(sp)
   1a714:	ddc019c4 	addi	r23,sp,103
   1a718:	003e2c06 	br	19fcc <__alt_data_end+0xfc019fcc>
   1a71c:	9cc03fcc 	andi	r19,r19,255
   1a720:	b811883a 	mov	r8,r23
   1a724:	9802571e 	bne	r19,zero,1b084 <___vfiprintf_internal_r+0x14c4>
   1a728:	18005726 	beq	r3,zero,1a888 <___vfiprintf_internal_r+0xcc8>
   1a72c:	04c00044 	movi	r19,1
   1a730:	d8c01005 	stb	r3,64(sp)
   1a734:	d8001d85 	stb	zero,118(sp)
   1a738:	9829883a 	mov	r20,r19
   1a73c:	ddc01004 	addi	r23,sp,64
   1a740:	003f0a06 	br	1a36c <__alt_data_end+0xfc01a36c>
   1a744:	d9402017 	ldw	r5,128(sp)
   1a748:	d9002117 	ldw	r4,132(sp)
   1a74c:	d9801a04 	addi	r6,sp,104
   1a750:	da802a15 	stw	r10,168(sp)
   1a754:	0019aac0 	call	19aac <__sprint_r.part.0>
   1a758:	da802a17 	ldw	r10,168(sp)
   1a75c:	1000501e 	bne	r2,zero,1a8a0 <___vfiprintf_internal_r+0xce0>
   1a760:	d9801b17 	ldw	r6,108(sp)
   1a764:	d8801c17 	ldw	r2,112(sp)
   1a768:	d811883a 	mov	r8,sp
   1a76c:	31000044 	addi	r4,r6,1
   1a770:	003e3606 	br	1a04c <__alt_data_end+0xfc01a04c>
   1a774:	d9001b17 	ldw	r4,108(sp)
   1a778:	d8801c17 	ldw	r2,112(sp)
   1a77c:	21400044 	addi	r5,r4,1
   1a780:	d9801d87 	ldb	r6,118(sp)
   1a784:	303e5226 	beq	r6,zero,1a0d0 <__alt_data_end+0xfc01a0d0>
   1a788:	01800044 	movi	r6,1
   1a78c:	d9001d84 	addi	r4,sp,118
   1a790:	1185883a 	add	r2,r2,r6
   1a794:	41000015 	stw	r4,0(r8)
   1a798:	41800115 	stw	r6,4(r8)
   1a79c:	d8801c15 	stw	r2,112(sp)
   1a7a0:	d9401b15 	stw	r5,108(sp)
   1a7a4:	010001c4 	movi	r4,7
   1a7a8:	2140b00e 	bge	r4,r5,1aa6c <___vfiprintf_internal_r+0xeac>
   1a7ac:	1000f61e 	bne	r2,zero,1ab88 <___vfiprintf_internal_r+0xfc8>
   1a7b0:	3800b31e 	bne	r7,zero,1aa80 <___vfiprintf_internal_r+0xec0>
   1a7b4:	0009883a 	mov	r4,zero
   1a7b8:	300b883a 	mov	r5,r6
   1a7bc:	d811883a 	mov	r8,sp
   1a7c0:	01802004 	movi	r6,128
   1a7c4:	19be5226 	beq	r3,r6,1a110 <__alt_data_end+0xfc01a110>
   1a7c8:	8521c83a 	sub	r16,r16,r20
   1a7cc:	043e790e 	bge	zero,r16,1a1b4 <__alt_data_end+0xfc01a1b4>
   1a7d0:	05400404 	movi	r21,16
   1a7d4:	ac01b00e 	bge	r21,r16,1ae98 <___vfiprintf_internal_r+0x12d8>
   1a7d8:	014000f4 	movhi	r5,3
   1a7dc:	296aff04 	addi	r5,r5,-21508
   1a7e0:	d9402315 	stw	r5,140(sp)
   1a7e4:	070001c4 	movi	fp,7
   1a7e8:	00000506 	br	1a800 <___vfiprintf_internal_r+0xc40>
   1a7ec:	21400084 	addi	r5,r4,2
   1a7f0:	42000204 	addi	r8,r8,8
   1a7f4:	1809883a 	mov	r4,r3
   1a7f8:	843ffc04 	addi	r16,r16,-16
   1a7fc:	ac000d0e 	bge	r21,r16,1a834 <___vfiprintf_internal_r+0xc74>
   1a800:	10800404 	addi	r2,r2,16
   1a804:	20c00044 	addi	r3,r4,1
   1a808:	44800015 	stw	r18,0(r8)
   1a80c:	45400115 	stw	r21,4(r8)
   1a810:	d8801c15 	stw	r2,112(sp)
   1a814:	d8c01b15 	stw	r3,108(sp)
   1a818:	e0fff40e 	bge	fp,r3,1a7ec <__alt_data_end+0xfc01a7ec>
   1a81c:	1000101e 	bne	r2,zero,1a860 <___vfiprintf_internal_r+0xca0>
   1a820:	843ffc04 	addi	r16,r16,-16
   1a824:	01400044 	movi	r5,1
   1a828:	0009883a 	mov	r4,zero
   1a82c:	d811883a 	mov	r8,sp
   1a830:	ac3ff316 	blt	r21,r16,1a800 <__alt_data_end+0xfc01a800>
   1a834:	d8c02317 	ldw	r3,140(sp)
   1a838:	1405883a 	add	r2,r2,r16
   1a83c:	44000115 	stw	r16,4(r8)
   1a840:	40c00015 	stw	r3,0(r8)
   1a844:	d8801c15 	stw	r2,112(sp)
   1a848:	d9401b15 	stw	r5,108(sp)
   1a84c:	00c001c4 	movi	r3,7
   1a850:	19401916 	blt	r3,r5,1a8b8 <___vfiprintf_internal_r+0xcf8>
   1a854:	42000204 	addi	r8,r8,8
   1a858:	29400044 	addi	r5,r5,1
   1a85c:	003e5506 	br	1a1b4 <__alt_data_end+0xfc01a1b4>
   1a860:	d9402017 	ldw	r5,128(sp)
   1a864:	d9002117 	ldw	r4,132(sp)
   1a868:	d9801a04 	addi	r6,sp,104
   1a86c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1a870:	10000b1e 	bne	r2,zero,1a8a0 <___vfiprintf_internal_r+0xce0>
   1a874:	d9001b17 	ldw	r4,108(sp)
   1a878:	d8801c17 	ldw	r2,112(sp)
   1a87c:	d811883a 	mov	r8,sp
   1a880:	21400044 	addi	r5,r4,1
   1a884:	003fdc06 	br	1a7f8 <__alt_data_end+0xfc01a7f8>
   1a888:	d8801c17 	ldw	r2,112(sp)
   1a88c:	10000426 	beq	r2,zero,1a8a0 <___vfiprintf_internal_r+0xce0>
   1a890:	d9402017 	ldw	r5,128(sp)
   1a894:	d9002117 	ldw	r4,132(sp)
   1a898:	d9801a04 	addi	r6,sp,104
   1a89c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1a8a0:	d9402017 	ldw	r5,128(sp)
   1a8a4:	2880030b 	ldhu	r2,12(r5)
   1a8a8:	1080100c 	andi	r2,r2,64
   1a8ac:	10014d1e 	bne	r2,zero,1ade4 <___vfiprintf_internal_r+0x1224>
   1a8b0:	d8802417 	ldw	r2,144(sp)
   1a8b4:	003d9706 	br	19f14 <__alt_data_end+0xfc019f14>
   1a8b8:	1000d21e 	bne	r2,zero,1ac04 <___vfiprintf_internal_r+0x1044>
   1a8bc:	00c00044 	movi	r3,1
   1a8c0:	a005883a 	mov	r2,r20
   1a8c4:	ddc00015 	stw	r23,0(sp)
   1a8c8:	dd000115 	stw	r20,4(sp)
   1a8cc:	dd001c15 	stw	r20,112(sp)
   1a8d0:	d8c01b15 	stw	r3,108(sp)
   1a8d4:	d811883a 	mov	r8,sp
   1a8d8:	42000204 	addi	r8,r8,8
   1a8dc:	8c40010c 	andi	r17,r17,4
   1a8e0:	88004026 	beq	r17,zero,1a9e4 <___vfiprintf_internal_r+0xe24>
   1a8e4:	d9002517 	ldw	r4,148(sp)
   1a8e8:	24e3c83a 	sub	r17,r4,r19
   1a8ec:	04403d0e 	bge	zero,r17,1a9e4 <___vfiprintf_internal_r+0xe24>
   1a8f0:	04000404 	movi	r16,16
   1a8f4:	8441a90e 	bge	r16,r17,1af9c <___vfiprintf_internal_r+0x13dc>
   1a8f8:	00c000f4 	movhi	r3,3
   1a8fc:	18eb0304 	addi	r3,r3,-21492
   1a900:	d9001b17 	ldw	r4,108(sp)
   1a904:	d8c02315 	stw	r3,140(sp)
   1a908:	050001c4 	movi	r20,7
   1a90c:	dd402117 	ldw	r21,132(sp)
   1a910:	ddc02017 	ldw	r23,128(sp)
   1a914:	00000506 	br	1a92c <___vfiprintf_internal_r+0xd6c>
   1a918:	21400084 	addi	r5,r4,2
   1a91c:	42000204 	addi	r8,r8,8
   1a920:	1809883a 	mov	r4,r3
   1a924:	8c7ffc04 	addi	r17,r17,-16
   1a928:	84400f0e 	bge	r16,r17,1a968 <___vfiprintf_internal_r+0xda8>
   1a92c:	014000f4 	movhi	r5,3
   1a930:	10800404 	addi	r2,r2,16
   1a934:	20c00044 	addi	r3,r4,1
   1a938:	296b0304 	addi	r5,r5,-21492
   1a93c:	41400015 	stw	r5,0(r8)
   1a940:	44000115 	stw	r16,4(r8)
   1a944:	d8801c15 	stw	r2,112(sp)
   1a948:	d8c01b15 	stw	r3,108(sp)
   1a94c:	a0fff20e 	bge	r20,r3,1a918 <__alt_data_end+0xfc01a918>
   1a950:	1000141e 	bne	r2,zero,1a9a4 <___vfiprintf_internal_r+0xde4>
   1a954:	8c7ffc04 	addi	r17,r17,-16
   1a958:	01400044 	movi	r5,1
   1a95c:	0009883a 	mov	r4,zero
   1a960:	d811883a 	mov	r8,sp
   1a964:	847ff116 	blt	r16,r17,1a92c <__alt_data_end+0xfc01a92c>
   1a968:	d8c02317 	ldw	r3,140(sp)
   1a96c:	1445883a 	add	r2,r2,r17
   1a970:	44400115 	stw	r17,4(r8)
   1a974:	40c00015 	stw	r3,0(r8)
   1a978:	d8801c15 	stw	r2,112(sp)
   1a97c:	d9401b15 	stw	r5,108(sp)
   1a980:	00c001c4 	movi	r3,7
   1a984:	1940170e 	bge	r3,r5,1a9e4 <___vfiprintf_internal_r+0xe24>
   1a988:	1000101e 	bne	r2,zero,1a9cc <___vfiprintf_internal_r+0xe0c>
   1a98c:	d8802517 	ldw	r2,148(sp)
   1a990:	14c11616 	blt	r2,r19,1adec <___vfiprintf_internal_r+0x122c>
   1a994:	d9002417 	ldw	r4,144(sp)
   1a998:	2089883a 	add	r4,r4,r2
   1a99c:	d9002415 	stw	r4,144(sp)
   1a9a0:	003e1806 	br	1a204 <__alt_data_end+0xfc01a204>
   1a9a4:	d9801a04 	addi	r6,sp,104
   1a9a8:	b80b883a 	mov	r5,r23
   1a9ac:	a809883a 	mov	r4,r21
   1a9b0:	0019aac0 	call	19aac <__sprint_r.part.0>
   1a9b4:	103fba1e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1a9b8:	d9001b17 	ldw	r4,108(sp)
   1a9bc:	d8801c17 	ldw	r2,112(sp)
   1a9c0:	d811883a 	mov	r8,sp
   1a9c4:	21400044 	addi	r5,r4,1
   1a9c8:	003fd606 	br	1a924 <__alt_data_end+0xfc01a924>
   1a9cc:	d9402017 	ldw	r5,128(sp)
   1a9d0:	d9002117 	ldw	r4,132(sp)
   1a9d4:	d9801a04 	addi	r6,sp,104
   1a9d8:	0019aac0 	call	19aac <__sprint_r.part.0>
   1a9dc:	103fb01e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1a9e0:	d8801c17 	ldw	r2,112(sp)
   1a9e4:	d8c02517 	ldw	r3,148(sp)
   1a9e8:	1cc0010e 	bge	r3,r19,1a9f0 <___vfiprintf_internal_r+0xe30>
   1a9ec:	9807883a 	mov	r3,r19
   1a9f0:	d9002417 	ldw	r4,144(sp)
   1a9f4:	20c9883a 	add	r4,r4,r3
   1a9f8:	d9002415 	stw	r4,144(sp)
   1a9fc:	103e0126 	beq	r2,zero,1a204 <__alt_data_end+0xfc01a204>
   1aa00:	d9402017 	ldw	r5,128(sp)
   1aa04:	d9002117 	ldw	r4,132(sp)
   1aa08:	d9801a04 	addi	r6,sp,104
   1aa0c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1aa10:	103dfc26 	beq	r2,zero,1a204 <__alt_data_end+0xfc01a204>
   1aa14:	003fa206 	br	1a8a0 <__alt_data_end+0xfc01a8a0>
   1aa18:	d9402017 	ldw	r5,128(sp)
   1aa1c:	d9002117 	ldw	r4,132(sp)
   1aa20:	d9801a04 	addi	r6,sp,104
   1aa24:	d9c02b15 	stw	r7,172(sp)
   1aa28:	0019aac0 	call	19aac <__sprint_r.part.0>
   1aa2c:	d9c02b17 	ldw	r7,172(sp)
   1aa30:	103f9b1e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1aa34:	d9001b17 	ldw	r4,108(sp)
   1aa38:	d8801c17 	ldw	r2,112(sp)
   1aa3c:	d811883a 	mov	r8,sp
   1aa40:	21800044 	addi	r6,r4,1
   1aa44:	003dbf06 	br	1a144 <__alt_data_end+0xfc01a144>
   1aa48:	1000d81e 	bne	r2,zero,1adac <___vfiprintf_internal_r+0x11ec>
   1aa4c:	d9001d87 	ldb	r4,118(sp)
   1aa50:	20000a26 	beq	r4,zero,1aa7c <___vfiprintf_internal_r+0xebc>
   1aa54:	00800044 	movi	r2,1
   1aa58:	d9001d84 	addi	r4,sp,118
   1aa5c:	100b883a 	mov	r5,r2
   1aa60:	d9000015 	stw	r4,0(sp)
   1aa64:	d8800115 	stw	r2,4(sp)
   1aa68:	d811883a 	mov	r8,sp
   1aa6c:	2809883a 	mov	r4,r5
   1aa70:	42000204 	addi	r8,r8,8
   1aa74:	29400044 	addi	r5,r5,1
   1aa78:	003d9506 	br	1a0d0 <__alt_data_end+0xfc01a0d0>
   1aa7c:	3800fd26 	beq	r7,zero,1ae74 <___vfiprintf_internal_r+0x12b4>
   1aa80:	00800084 	movi	r2,2
   1aa84:	d9001d04 	addi	r4,sp,116
   1aa88:	d9000015 	stw	r4,0(sp)
   1aa8c:	d8800115 	stw	r2,4(sp)
   1aa90:	01400044 	movi	r5,1
   1aa94:	d811883a 	mov	r8,sp
   1aa98:	2809883a 	mov	r4,r5
   1aa9c:	42000204 	addi	r8,r8,8
   1aaa0:	29400044 	addi	r5,r5,1
   1aaa4:	003f4606 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1aaa8:	d8802517 	ldw	r2,148(sp)
   1aaac:	14c0010e 	bge	r2,r19,1aab4 <___vfiprintf_internal_r+0xef4>
   1aab0:	9805883a 	mov	r2,r19
   1aab4:	d9402417 	ldw	r5,144(sp)
   1aab8:	288b883a 	add	r5,r5,r2
   1aabc:	d9402415 	stw	r5,144(sp)
   1aac0:	003dd006 	br	1a204 <__alt_data_end+0xfc01a204>
   1aac4:	d8001d85 	stb	zero,118(sp)
   1aac8:	80005d16 	blt	r16,zero,1ac40 <___vfiprintf_internal_r+0x1080>
   1aacc:	00ffdfc4 	movi	r3,-129
   1aad0:	9d04b03a 	or	r2,r19,r20
   1aad4:	88e2703a 	and	r17,r17,r3
   1aad8:	103d3726 	beq	r2,zero,19fb8 <__alt_data_end+0xfc019fb8>
   1aadc:	002b883a 	mov	r21,zero
   1aae0:	d9002617 	ldw	r4,152(sp)
   1aae4:	ddc01a04 	addi	r23,sp,104
   1aae8:	988003cc 	andi	r2,r19,15
   1aaec:	a006973a 	slli	r3,r20,28
   1aaf0:	2085883a 	add	r2,r4,r2
   1aaf4:	9826d13a 	srli	r19,r19,4
   1aaf8:	10800003 	ldbu	r2,0(r2)
   1aafc:	a028d13a 	srli	r20,r20,4
   1ab00:	bdffffc4 	addi	r23,r23,-1
   1ab04:	1ce6b03a 	or	r19,r3,r19
   1ab08:	b8800005 	stb	r2,0(r23)
   1ab0c:	9d04b03a 	or	r2,r19,r20
   1ab10:	103ff51e 	bne	r2,zero,1aae8 <__alt_data_end+0xfc01aae8>
   1ab14:	d8801e17 	ldw	r2,120(sp)
   1ab18:	15e9c83a 	sub	r20,r2,r23
   1ab1c:	003d2b06 	br	19fcc <__alt_data_end+0xfc019fcc>
   1ab20:	d9402017 	ldw	r5,128(sp)
   1ab24:	d9002117 	ldw	r4,132(sp)
   1ab28:	d9801a04 	addi	r6,sp,104
   1ab2c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1ab30:	103f5b1e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1ab34:	d8801c17 	ldw	r2,112(sp)
   1ab38:	d811883a 	mov	r8,sp
   1ab3c:	003f6706 	br	1a8dc <__alt_data_end+0xfc01a8dc>
   1ab40:	d9402017 	ldw	r5,128(sp)
   1ab44:	d9002117 	ldw	r4,132(sp)
   1ab48:	d9801a04 	addi	r6,sp,104
   1ab4c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1ab50:	103f531e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1ab54:	d811883a 	mov	r8,sp
   1ab58:	003cd906 	br	19ec0 <__alt_data_end+0xfc019ec0>
   1ab5c:	10803fcc 	andi	r2,r2,255
   1ab60:	1080201c 	xori	r2,r2,128
   1ab64:	10bfe004 	addi	r2,r2,-128
   1ab68:	00c00c04 	movi	r3,48
   1ab6c:	10ffe926 	beq	r2,r3,1ab14 <__alt_data_end+0xfc01ab14>
   1ab70:	b8ffffc5 	stb	r3,-1(r23)
   1ab74:	d8c01e17 	ldw	r3,120(sp)
   1ab78:	b8bfffc4 	addi	r2,r23,-1
   1ab7c:	102f883a 	mov	r23,r2
   1ab80:	18a9c83a 	sub	r20,r3,r2
   1ab84:	003d1106 	br	19fcc <__alt_data_end+0xfc019fcc>
   1ab88:	d9402017 	ldw	r5,128(sp)
   1ab8c:	d9002117 	ldw	r4,132(sp)
   1ab90:	d9801a04 	addi	r6,sp,104
   1ab94:	d8c02a15 	stw	r3,168(sp)
   1ab98:	d9c02b15 	stw	r7,172(sp)
   1ab9c:	0019aac0 	call	19aac <__sprint_r.part.0>
   1aba0:	d8c02a17 	ldw	r3,168(sp)
   1aba4:	d9c02b17 	ldw	r7,172(sp)
   1aba8:	103f3d1e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1abac:	d9001b17 	ldw	r4,108(sp)
   1abb0:	d8801c17 	ldw	r2,112(sp)
   1abb4:	d811883a 	mov	r8,sp
   1abb8:	21400044 	addi	r5,r4,1
   1abbc:	003d4406 	br	1a0d0 <__alt_data_end+0xfc01a0d0>
   1abc0:	d9402017 	ldw	r5,128(sp)
   1abc4:	d9002117 	ldw	r4,132(sp)
   1abc8:	d9801a04 	addi	r6,sp,104
   1abcc:	d8c02a15 	stw	r3,168(sp)
   1abd0:	0019aac0 	call	19aac <__sprint_r.part.0>
   1abd4:	d8c02a17 	ldw	r3,168(sp)
   1abd8:	103f311e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1abdc:	d9001b17 	ldw	r4,108(sp)
   1abe0:	d8801c17 	ldw	r2,112(sp)
   1abe4:	d811883a 	mov	r8,sp
   1abe8:	21400044 	addi	r5,r4,1
   1abec:	003ef406 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1abf0:	1000bd1e 	bne	r2,zero,1aee8 <___vfiprintf_internal_r+0x1328>
   1abf4:	01400044 	movi	r5,1
   1abf8:	0009883a 	mov	r4,zero
   1abfc:	d811883a 	mov	r8,sp
   1ac00:	003ef106 	br	1a7c8 <__alt_data_end+0xfc01a7c8>
   1ac04:	d9402017 	ldw	r5,128(sp)
   1ac08:	d9002117 	ldw	r4,132(sp)
   1ac0c:	d9801a04 	addi	r6,sp,104
   1ac10:	0019aac0 	call	19aac <__sprint_r.part.0>
   1ac14:	103f221e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1ac18:	d9401b17 	ldw	r5,108(sp)
   1ac1c:	d8801c17 	ldw	r2,112(sp)
   1ac20:	d811883a 	mov	r8,sp
   1ac24:	29400044 	addi	r5,r5,1
   1ac28:	003d6206 	br	1a1b4 <__alt_data_end+0xfc01a1b4>
   1ac2c:	014000f4 	movhi	r5,3
   1ac30:	296a8f04 	addi	r5,r5,-21956
   1ac34:	d9402615 	stw	r5,152(sp)
   1ac38:	d8c02215 	stw	r3,136(sp)
   1ac3c:	1023883a 	mov	r17,r2
   1ac40:	9d04b03a 	or	r2,r19,r20
   1ac44:	103fa51e 	bne	r2,zero,1aadc <__alt_data_end+0xfc01aadc>
   1ac48:	002b883a 	mov	r21,zero
   1ac4c:	00800084 	movi	r2,2
   1ac50:	003e4a06 	br	1a57c <__alt_data_end+0xfc01a57c>
   1ac54:	014000f4 	movhi	r5,3
   1ac58:	296a8f04 	addi	r5,r5,-21956
   1ac5c:	002b883a 	mov	r21,zero
   1ac60:	d9402615 	stw	r5,152(sp)
   1ac64:	003f9e06 	br	1aae0 <__alt_data_end+0xfc01aae0>
   1ac68:	d9402217 	ldw	r5,136(sp)
   1ac6c:	d8001d85 	stb	zero,118(sp)
   1ac70:	0029883a 	mov	r20,zero
   1ac74:	28800104 	addi	r2,r5,4
   1ac78:	2cc00017 	ldw	r19,0(r5)
   1ac7c:	803e3a16 	blt	r16,zero,1a568 <__alt_data_end+0xfc01a568>
   1ac80:	00ffdfc4 	movi	r3,-129
   1ac84:	d8802215 	stw	r2,136(sp)
   1ac88:	88e2703a 	and	r17,r17,r3
   1ac8c:	002b883a 	mov	r21,zero
   1ac90:	983e9b26 	beq	r19,zero,1a700 <__alt_data_end+0xfc01a700>
   1ac94:	00800244 	movi	r2,9
   1ac98:	14fdc936 	bltu	r2,r19,1a3c0 <__alt_data_end+0xfc01a3c0>
   1ac9c:	003e9a06 	br	1a708 <__alt_data_end+0xfc01a708>
   1aca0:	00800c04 	movi	r2,48
   1aca4:	d8c01d45 	stb	r3,117(sp)
   1aca8:	d8801d05 	stb	r2,116(sp)
   1acac:	d8001d85 	stb	zero,118(sp)
   1acb0:	88c00094 	ori	r3,r17,2
   1acb4:	80009c16 	blt	r16,zero,1af28 <___vfiprintf_internal_r+0x1368>
   1acb8:	00bfdfc4 	movi	r2,-129
   1acbc:	88a2703a 	and	r17,r17,r2
   1acc0:	8c400094 	ori	r17,r17,2
   1acc4:	002b883a 	mov	r21,zero
   1acc8:	003f8506 	br	1aae0 <__alt_data_end+0xfc01aae0>
   1accc:	b029883a 	mov	r20,r22
   1acd0:	003c0b06 	br	19d00 <__alt_data_end+0xfc019d00>
   1acd4:	04e7c83a 	sub	r19,zero,r19
   1acd8:	05400b44 	movi	r21,45
   1acdc:	9804c03a 	cmpne	r2,r19,zero
   1ace0:	0529c83a 	sub	r20,zero,r20
   1ace4:	dd401d85 	stb	r21,118(sp)
   1ace8:	a0a9c83a 	sub	r20,r20,r2
   1acec:	80009716 	blt	r16,zero,1af4c <___vfiprintf_internal_r+0x138c>
   1acf0:	00bfdfc4 	movi	r2,-129
   1acf4:	88a2703a 	and	r17,r17,r2
   1acf8:	003db006 	br	1a3bc <__alt_data_end+0xfc01a3bc>
   1acfc:	b0c00007 	ldb	r3,0(r22)
   1ad00:	003c0c06 	br	19d34 <__alt_data_end+0xfc019d34>
   1ad04:	8880100c 	andi	r2,r17,64
   1ad08:	d8001d85 	stb	zero,118(sp)
   1ad0c:	1000461e 	bne	r2,zero,1ae28 <___vfiprintf_internal_r+0x1268>
   1ad10:	d9002217 	ldw	r4,136(sp)
   1ad14:	0029883a 	mov	r20,zero
   1ad18:	20800104 	addi	r2,r4,4
   1ad1c:	24c00017 	ldw	r19,0(r4)
   1ad20:	803df80e 	bge	r16,zero,1a504 <__alt_data_end+0xfc01a504>
   1ad24:	9d06b03a 	or	r3,r19,r20
   1ad28:	d8802215 	stw	r2,136(sp)
   1ad2c:	183d5e1e 	bne	r3,zero,1a2a8 <__alt_data_end+0xfc01a2a8>
   1ad30:	002b883a 	mov	r21,zero
   1ad34:	0005883a 	mov	r2,zero
   1ad38:	003e1006 	br	1a57c <__alt_data_end+0xfc01a57c>
   1ad3c:	8880040c 	andi	r2,r17,16
   1ad40:	1000321e 	bne	r2,zero,1ae0c <___vfiprintf_internal_r+0x124c>
   1ad44:	8c40100c 	andi	r17,r17,64
   1ad48:	88008d26 	beq	r17,zero,1af80 <___vfiprintf_internal_r+0x13c0>
   1ad4c:	d9402217 	ldw	r5,136(sp)
   1ad50:	d8c02417 	ldw	r3,144(sp)
   1ad54:	28800017 	ldw	r2,0(r5)
   1ad58:	29400104 	addi	r5,r5,4
   1ad5c:	d9402215 	stw	r5,136(sp)
   1ad60:	10c0000d 	sth	r3,0(r2)
   1ad64:	003bca06 	br	19c90 <__alt_data_end+0xfc019c90>
   1ad68:	8880100c 	andi	r2,r17,64
   1ad6c:	10003a26 	beq	r2,zero,1ae58 <___vfiprintf_internal_r+0x1298>
   1ad70:	d8802217 	ldw	r2,136(sp)
   1ad74:	14c0000f 	ldh	r19,0(r2)
   1ad78:	10800104 	addi	r2,r2,4
   1ad7c:	d8802215 	stw	r2,136(sp)
   1ad80:	9829d7fa 	srai	r20,r19,31
   1ad84:	a005883a 	mov	r2,r20
   1ad88:	003d8506 	br	1a3a0 <__alt_data_end+0xfc01a3a0>
   1ad8c:	8880100c 	andi	r2,r17,64
   1ad90:	10002b26 	beq	r2,zero,1ae40 <___vfiprintf_internal_r+0x1280>
   1ad94:	d8802217 	ldw	r2,136(sp)
   1ad98:	0029883a 	mov	r20,zero
   1ad9c:	14c0000b 	ldhu	r19,0(r2)
   1ada0:	10800104 	addi	r2,r2,4
   1ada4:	d8802215 	stw	r2,136(sp)
   1ada8:	003d5d06 	br	1a320 <__alt_data_end+0xfc01a320>
   1adac:	d9402017 	ldw	r5,128(sp)
   1adb0:	d9002117 	ldw	r4,132(sp)
   1adb4:	d9801a04 	addi	r6,sp,104
   1adb8:	d8c02a15 	stw	r3,168(sp)
   1adbc:	d9c02b15 	stw	r7,172(sp)
   1adc0:	0019aac0 	call	19aac <__sprint_r.part.0>
   1adc4:	d8c02a17 	ldw	r3,168(sp)
   1adc8:	d9c02b17 	ldw	r7,172(sp)
   1adcc:	103eb41e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1add0:	d9001b17 	ldw	r4,108(sp)
   1add4:	d8801c17 	ldw	r2,112(sp)
   1add8:	d811883a 	mov	r8,sp
   1addc:	21400044 	addi	r5,r4,1
   1ade0:	003e6706 	br	1a780 <__alt_data_end+0xfc01a780>
   1ade4:	00bfffc4 	movi	r2,-1
   1ade8:	003c4a06 	br	19f14 <__alt_data_end+0xfc019f14>
   1adec:	9805883a 	mov	r2,r19
   1adf0:	003ee806 	br	1a994 <__alt_data_end+0xfc01a994>
   1adf4:	d8c02217 	ldw	r3,136(sp)
   1adf8:	0029883a 	mov	r20,zero
   1adfc:	18800104 	addi	r2,r3,4
   1ae00:	1cc0000b 	ldhu	r19,0(r3)
   1ae04:	803f9e0e 	bge	r16,zero,1ac80 <__alt_data_end+0xfc01ac80>
   1ae08:	003dd706 	br	1a568 <__alt_data_end+0xfc01a568>
   1ae0c:	d8c02217 	ldw	r3,136(sp)
   1ae10:	d9002417 	ldw	r4,144(sp)
   1ae14:	18800017 	ldw	r2,0(r3)
   1ae18:	18c00104 	addi	r3,r3,4
   1ae1c:	d8c02215 	stw	r3,136(sp)
   1ae20:	11000015 	stw	r4,0(r2)
   1ae24:	003b9a06 	br	19c90 <__alt_data_end+0xfc019c90>
   1ae28:	d8c02217 	ldw	r3,136(sp)
   1ae2c:	0029883a 	mov	r20,zero
   1ae30:	18800104 	addi	r2,r3,4
   1ae34:	1cc0000b 	ldhu	r19,0(r3)
   1ae38:	803db20e 	bge	r16,zero,1a504 <__alt_data_end+0xfc01a504>
   1ae3c:	003fb906 	br	1ad24 <__alt_data_end+0xfc01ad24>
   1ae40:	d9002217 	ldw	r4,136(sp)
   1ae44:	0029883a 	mov	r20,zero
   1ae48:	24c00017 	ldw	r19,0(r4)
   1ae4c:	21000104 	addi	r4,r4,4
   1ae50:	d9002215 	stw	r4,136(sp)
   1ae54:	003d3206 	br	1a320 <__alt_data_end+0xfc01a320>
   1ae58:	d8c02217 	ldw	r3,136(sp)
   1ae5c:	1cc00017 	ldw	r19,0(r3)
   1ae60:	18c00104 	addi	r3,r3,4
   1ae64:	d8c02215 	stw	r3,136(sp)
   1ae68:	9829d7fa 	srai	r20,r19,31
   1ae6c:	a005883a 	mov	r2,r20
   1ae70:	003d4b06 	br	1a3a0 <__alt_data_end+0xfc01a3a0>
   1ae74:	0009883a 	mov	r4,zero
   1ae78:	01400044 	movi	r5,1
   1ae7c:	d811883a 	mov	r8,sp
   1ae80:	003e4f06 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1ae84:	d8c02215 	stw	r3,136(sp)
   1ae88:	002b883a 	mov	r21,zero
   1ae8c:	003db806 	br	1a570 <__alt_data_end+0xfc01a570>
   1ae90:	d811883a 	mov	r8,sp
   1ae94:	003e9606 	br	1a8f0 <__alt_data_end+0xfc01a8f0>
   1ae98:	010000f4 	movhi	r4,3
   1ae9c:	212aff04 	addi	r4,r4,-21508
   1aea0:	d9002315 	stw	r4,140(sp)
   1aea4:	003e6306 	br	1a834 <__alt_data_end+0xfc01a834>
   1aea8:	b0c00043 	ldbu	r3,1(r22)
   1aeac:	8c400814 	ori	r17,r17,32
   1aeb0:	b5800044 	addi	r22,r22,1
   1aeb4:	18c03fcc 	andi	r3,r3,255
   1aeb8:	18c0201c 	xori	r3,r3,128
   1aebc:	18ffe004 	addi	r3,r3,-128
   1aec0:	003b9c06 	br	19d34 <__alt_data_end+0xfc019d34>
   1aec4:	b809883a 	mov	r4,r23
   1aec8:	da002a15 	stw	r8,168(sp)
   1aecc:	000f5400 	call	f540 <strlen>
   1aed0:	1029883a 	mov	r20,r2
   1aed4:	dd401d83 	ldbu	r21,118(sp)
   1aed8:	df002215 	stw	fp,136(sp)
   1aedc:	0021883a 	mov	r16,zero
   1aee0:	da002a17 	ldw	r8,168(sp)
   1aee4:	003c3906 	br	19fcc <__alt_data_end+0xfc019fcc>
   1aee8:	d9402017 	ldw	r5,128(sp)
   1aeec:	d9002117 	ldw	r4,132(sp)
   1aef0:	d9801a04 	addi	r6,sp,104
   1aef4:	0019aac0 	call	19aac <__sprint_r.part.0>
   1aef8:	103e691e 	bne	r2,zero,1a8a0 <__alt_data_end+0xfc01a8a0>
   1aefc:	d9001b17 	ldw	r4,108(sp)
   1af00:	d8801c17 	ldw	r2,112(sp)
   1af04:	d811883a 	mov	r8,sp
   1af08:	21400044 	addi	r5,r4,1
   1af0c:	003e2e06 	br	1a7c8 <__alt_data_end+0xfc01a7c8>
   1af10:	010000f4 	movhi	r4,3
   1af14:	212b0304 	addi	r4,r4,-21492
   1af18:	d9002315 	stw	r4,140(sp)
   1af1c:	d9001b17 	ldw	r4,108(sp)
   1af20:	21000044 	addi	r4,r4,1
   1af24:	003c5e06 	br	1a0a0 <__alt_data_end+0xfc01a0a0>
   1af28:	002b883a 	mov	r21,zero
   1af2c:	00800084 	movi	r2,2
   1af30:	10803fcc 	andi	r2,r2,255
   1af34:	01000044 	movi	r4,1
   1af38:	11002b26 	beq	r2,r4,1afe8 <___vfiprintf_internal_r+0x1428>
   1af3c:	01000084 	movi	r4,2
   1af40:	11002b1e 	bne	r2,r4,1aff0 <___vfiprintf_internal_r+0x1430>
   1af44:	1823883a 	mov	r17,r3
   1af48:	003ee506 	br	1aae0 <__alt_data_end+0xfc01aae0>
   1af4c:	8807883a 	mov	r3,r17
   1af50:	00800044 	movi	r2,1
   1af54:	003ff606 	br	1af30 <__alt_data_end+0xfc01af30>
   1af58:	00800184 	movi	r2,6
   1af5c:	1400012e 	bgeu	r2,r16,1af64 <___vfiprintf_internal_r+0x13a4>
   1af60:	1021883a 	mov	r16,r2
   1af64:	8029883a 	mov	r20,r16
   1af68:	8027883a 	mov	r19,r16
   1af6c:	80002216 	blt	r16,zero,1aff8 <___vfiprintf_internal_r+0x1438>
   1af70:	05c000f4 	movhi	r23,3
   1af74:	df002215 	stw	fp,136(sp)
   1af78:	bdea9404 	addi	r23,r23,-21936
   1af7c:	003cfb06 	br	1a36c <__alt_data_end+0xfc01a36c>
   1af80:	d9002217 	ldw	r4,136(sp)
   1af84:	d9402417 	ldw	r5,144(sp)
   1af88:	20800017 	ldw	r2,0(r4)
   1af8c:	21000104 	addi	r4,r4,4
   1af90:	d9002215 	stw	r4,136(sp)
   1af94:	11400015 	stw	r5,0(r2)
   1af98:	003b3d06 	br	19c90 <__alt_data_end+0xfc019c90>
   1af9c:	014000f4 	movhi	r5,3
   1afa0:	296b0304 	addi	r5,r5,-21492
   1afa4:	d9402315 	stw	r5,140(sp)
   1afa8:	d9401b17 	ldw	r5,108(sp)
   1afac:	29400044 	addi	r5,r5,1
   1afb0:	003e6d06 	br	1a968 <__alt_data_end+0xfc01a968>
   1afb4:	8029883a 	mov	r20,r16
   1afb8:	dd401d83 	ldbu	r21,118(sp)
   1afbc:	df002215 	stw	fp,136(sp)
   1afc0:	0021883a 	mov	r16,zero
   1afc4:	003c0106 	br	19fcc <__alt_data_end+0xfc019fcc>
   1afc8:	00c000f4 	movhi	r3,3
   1afcc:	18eaff04 	addi	r3,r3,-21508
   1afd0:	d8c02315 	stw	r3,140(sp)
   1afd4:	280d883a 	mov	r6,r5
   1afd8:	003c6906 	br	1a180 <__alt_data_end+0xfc01a180>
   1afdc:	802d883a 	mov	r22,r16
   1afe0:	0021883a 	mov	r16,zero
   1afe4:	003b5406 	br	19d38 <__alt_data_end+0xfc019d38>
   1afe8:	1823883a 	mov	r17,r3
   1afec:	003cf306 	br	1a3bc <__alt_data_end+0xfc01a3bc>
   1aff0:	1823883a 	mov	r17,r3
   1aff4:	003cad06 	br	1a2ac <__alt_data_end+0xfc01a2ac>
   1aff8:	0027883a 	mov	r19,zero
   1affc:	003fdc06 	br	1af70 <__alt_data_end+0xfc01af70>
   1b000:	d9402217 	ldw	r5,136(sp)
   1b004:	8005883a 	mov	r2,r16
   1b008:	b0c00043 	ldbu	r3,1(r22)
   1b00c:	2c000017 	ldw	r16,0(r5)
   1b010:	29000104 	addi	r4,r5,4
   1b014:	d9002215 	stw	r4,136(sp)
   1b018:	102d883a 	mov	r22,r2
   1b01c:	803fa50e 	bge	r16,zero,1aeb4 <__alt_data_end+0xfc01aeb4>
   1b020:	18c03fcc 	andi	r3,r3,255
   1b024:	18c0201c 	xori	r3,r3,128
   1b028:	043fffc4 	movi	r16,-1
   1b02c:	18ffe004 	addi	r3,r3,-128
   1b030:	003b4006 	br	19d34 <__alt_data_end+0xfc019d34>
   1b034:	d9402303 	ldbu	r5,140(sp)
   1b038:	d9401d85 	stb	r5,118(sp)
   1b03c:	003cae06 	br	1a2f8 <__alt_data_end+0xfc01a2f8>
   1b040:	d8c02303 	ldbu	r3,140(sp)
   1b044:	d8c01d85 	stb	r3,118(sp)
   1b048:	003d1406 	br	1a49c <__alt_data_end+0xfc01a49c>
   1b04c:	d8c02303 	ldbu	r3,140(sp)
   1b050:	d8c01d85 	stb	r3,118(sp)
   1b054:	003cca06 	br	1a380 <__alt_data_end+0xfc01a380>
   1b058:	8880004c 	andi	r2,r17,1
   1b05c:	002b883a 	mov	r21,zero
   1b060:	10000526 	beq	r2,zero,1b078 <___vfiprintf_internal_r+0x14b8>
   1b064:	00800c04 	movi	r2,48
   1b068:	d88019c5 	stb	r2,103(sp)
   1b06c:	dd002817 	ldw	r20,160(sp)
   1b070:	ddc019c4 	addi	r23,sp,103
   1b074:	003bd506 	br	19fcc <__alt_data_end+0xfc019fcc>
   1b078:	0029883a 	mov	r20,zero
   1b07c:	ddc01a04 	addi	r23,sp,104
   1b080:	003bd206 	br	19fcc <__alt_data_end+0xfc019fcc>
   1b084:	d9002303 	ldbu	r4,140(sp)
   1b088:	d9001d85 	stb	r4,118(sp)
   1b08c:	003da606 	br	1a728 <__alt_data_end+0xfc01a728>
   1b090:	d8c02303 	ldbu	r3,140(sp)
   1b094:	d8c01d85 	stb	r3,118(sp)
   1b098:	003c7606 	br	1a274 <__alt_data_end+0xfc01a274>
   1b09c:	d8c02303 	ldbu	r3,140(sp)
   1b0a0:	d8c01d85 	stb	r3,118(sp)
   1b0a4:	003c6506 	br	1a23c <__alt_data_end+0xfc01a23c>
   1b0a8:	d9002303 	ldbu	r4,140(sp)
   1b0ac:	d9001d85 	stb	r4,118(sp)
   1b0b0:	003d3d06 	br	1a5a8 <__alt_data_end+0xfc01a5a8>
   1b0b4:	d8c02303 	ldbu	r3,140(sp)
   1b0b8:	d8c01d85 	stb	r3,118(sp)
   1b0bc:	003d1d06 	br	1a534 <__alt_data_end+0xfc01a534>
   1b0c0:	d8c02303 	ldbu	r3,140(sp)
   1b0c4:	d8c01d85 	stb	r3,118(sp)
   1b0c8:	003d0306 	br	1a4d8 <__alt_data_end+0xfc01a4d8>

0001b0cc <__vfiprintf_internal>:
   1b0cc:	008000f4 	movhi	r2,3
   1b0d0:	10b78704 	addi	r2,r2,-8676
   1b0d4:	300f883a 	mov	r7,r6
   1b0d8:	280d883a 	mov	r6,r5
   1b0dc:	200b883a 	mov	r5,r4
   1b0e0:	11000017 	ldw	r4,0(r2)
   1b0e4:	0019bc01 	jmpi	19bc0 <___vfiprintf_internal_r>

0001b0e8 <__sbprintf>:
   1b0e8:	2880030b 	ldhu	r2,12(r5)
   1b0ec:	2ac01917 	ldw	r11,100(r5)
   1b0f0:	2a80038b 	ldhu	r10,14(r5)
   1b0f4:	2a400717 	ldw	r9,28(r5)
   1b0f8:	2a000917 	ldw	r8,36(r5)
   1b0fc:	defee204 	addi	sp,sp,-1144
   1b100:	00c10004 	movi	r3,1024
   1b104:	dc011a15 	stw	r16,1128(sp)
   1b108:	10bfff4c 	andi	r2,r2,65533
   1b10c:	2821883a 	mov	r16,r5
   1b110:	d8cb883a 	add	r5,sp,r3
   1b114:	dc811c15 	stw	r18,1136(sp)
   1b118:	dc411b15 	stw	r17,1132(sp)
   1b11c:	dfc11d15 	stw	ra,1140(sp)
   1b120:	2025883a 	mov	r18,r4
   1b124:	d881030d 	sth	r2,1036(sp)
   1b128:	dac11915 	stw	r11,1124(sp)
   1b12c:	da81038d 	sth	r10,1038(sp)
   1b130:	da410715 	stw	r9,1052(sp)
   1b134:	da010915 	stw	r8,1060(sp)
   1b138:	dec10015 	stw	sp,1024(sp)
   1b13c:	dec10415 	stw	sp,1040(sp)
   1b140:	d8c10215 	stw	r3,1032(sp)
   1b144:	d8c10515 	stw	r3,1044(sp)
   1b148:	d8010615 	stw	zero,1048(sp)
   1b14c:	0019bc00 	call	19bc0 <___vfiprintf_internal_r>
   1b150:	1023883a 	mov	r17,r2
   1b154:	10000416 	blt	r2,zero,1b168 <__sbprintf+0x80>
   1b158:	d9410004 	addi	r5,sp,1024
   1b15c:	9009883a 	mov	r4,r18
   1b160:	00158700 	call	15870 <_fflush_r>
   1b164:	10000d1e 	bne	r2,zero,1b19c <__sbprintf+0xb4>
   1b168:	d881030b 	ldhu	r2,1036(sp)
   1b16c:	1080100c 	andi	r2,r2,64
   1b170:	10000326 	beq	r2,zero,1b180 <__sbprintf+0x98>
   1b174:	8080030b 	ldhu	r2,12(r16)
   1b178:	10801014 	ori	r2,r2,64
   1b17c:	8080030d 	sth	r2,12(r16)
   1b180:	8805883a 	mov	r2,r17
   1b184:	dfc11d17 	ldw	ra,1140(sp)
   1b188:	dc811c17 	ldw	r18,1136(sp)
   1b18c:	dc411b17 	ldw	r17,1132(sp)
   1b190:	dc011a17 	ldw	r16,1128(sp)
   1b194:	dec11e04 	addi	sp,sp,1144
   1b198:	f800283a 	ret
   1b19c:	047fffc4 	movi	r17,-1
   1b1a0:	003ff106 	br	1b168 <__alt_data_end+0xfc01b168>

0001b1a4 <__swbuf_r>:
   1b1a4:	defffb04 	addi	sp,sp,-20
   1b1a8:	dcc00315 	stw	r19,12(sp)
   1b1ac:	dc800215 	stw	r18,8(sp)
   1b1b0:	dc000015 	stw	r16,0(sp)
   1b1b4:	dfc00415 	stw	ra,16(sp)
   1b1b8:	dc400115 	stw	r17,4(sp)
   1b1bc:	2025883a 	mov	r18,r4
   1b1c0:	2827883a 	mov	r19,r5
   1b1c4:	3021883a 	mov	r16,r6
   1b1c8:	20000226 	beq	r4,zero,1b1d4 <__swbuf_r+0x30>
   1b1cc:	20800e17 	ldw	r2,56(r4)
   1b1d0:	10004226 	beq	r2,zero,1b2dc <__swbuf_r+0x138>
   1b1d4:	80800617 	ldw	r2,24(r16)
   1b1d8:	8100030b 	ldhu	r4,12(r16)
   1b1dc:	80800215 	stw	r2,8(r16)
   1b1e0:	2080020c 	andi	r2,r4,8
   1b1e4:	10003626 	beq	r2,zero,1b2c0 <__swbuf_r+0x11c>
   1b1e8:	80c00417 	ldw	r3,16(r16)
   1b1ec:	18003426 	beq	r3,zero,1b2c0 <__swbuf_r+0x11c>
   1b1f0:	2088000c 	andi	r2,r4,8192
   1b1f4:	9c403fcc 	andi	r17,r19,255
   1b1f8:	10001a26 	beq	r2,zero,1b264 <__swbuf_r+0xc0>
   1b1fc:	80800017 	ldw	r2,0(r16)
   1b200:	81000517 	ldw	r4,20(r16)
   1b204:	10c7c83a 	sub	r3,r2,r3
   1b208:	1900200e 	bge	r3,r4,1b28c <__swbuf_r+0xe8>
   1b20c:	18c00044 	addi	r3,r3,1
   1b210:	81000217 	ldw	r4,8(r16)
   1b214:	11400044 	addi	r5,r2,1
   1b218:	81400015 	stw	r5,0(r16)
   1b21c:	213fffc4 	addi	r4,r4,-1
   1b220:	81000215 	stw	r4,8(r16)
   1b224:	14c00005 	stb	r19,0(r2)
   1b228:	80800517 	ldw	r2,20(r16)
   1b22c:	10c01e26 	beq	r2,r3,1b2a8 <__swbuf_r+0x104>
   1b230:	8080030b 	ldhu	r2,12(r16)
   1b234:	1080004c 	andi	r2,r2,1
   1b238:	10000226 	beq	r2,zero,1b244 <__swbuf_r+0xa0>
   1b23c:	00800284 	movi	r2,10
   1b240:	88801926 	beq	r17,r2,1b2a8 <__swbuf_r+0x104>
   1b244:	8805883a 	mov	r2,r17
   1b248:	dfc00417 	ldw	ra,16(sp)
   1b24c:	dcc00317 	ldw	r19,12(sp)
   1b250:	dc800217 	ldw	r18,8(sp)
   1b254:	dc400117 	ldw	r17,4(sp)
   1b258:	dc000017 	ldw	r16,0(sp)
   1b25c:	dec00504 	addi	sp,sp,20
   1b260:	f800283a 	ret
   1b264:	81401917 	ldw	r5,100(r16)
   1b268:	00b7ffc4 	movi	r2,-8193
   1b26c:	21080014 	ori	r4,r4,8192
   1b270:	2884703a 	and	r2,r5,r2
   1b274:	80801915 	stw	r2,100(r16)
   1b278:	80800017 	ldw	r2,0(r16)
   1b27c:	8100030d 	sth	r4,12(r16)
   1b280:	81000517 	ldw	r4,20(r16)
   1b284:	10c7c83a 	sub	r3,r2,r3
   1b288:	193fe016 	blt	r3,r4,1b20c <__alt_data_end+0xfc01b20c>
   1b28c:	800b883a 	mov	r5,r16
   1b290:	9009883a 	mov	r4,r18
   1b294:	00158700 	call	15870 <_fflush_r>
   1b298:	1000071e 	bne	r2,zero,1b2b8 <__swbuf_r+0x114>
   1b29c:	80800017 	ldw	r2,0(r16)
   1b2a0:	00c00044 	movi	r3,1
   1b2a4:	003fda06 	br	1b210 <__alt_data_end+0xfc01b210>
   1b2a8:	800b883a 	mov	r5,r16
   1b2ac:	9009883a 	mov	r4,r18
   1b2b0:	00158700 	call	15870 <_fflush_r>
   1b2b4:	103fe326 	beq	r2,zero,1b244 <__alt_data_end+0xfc01b244>
   1b2b8:	00bfffc4 	movi	r2,-1
   1b2bc:	003fe206 	br	1b248 <__alt_data_end+0xfc01b248>
   1b2c0:	800b883a 	mov	r5,r16
   1b2c4:	9009883a 	mov	r4,r18
   1b2c8:	0013c500 	call	13c50 <__swsetup_r>
   1b2cc:	103ffa1e 	bne	r2,zero,1b2b8 <__alt_data_end+0xfc01b2b8>
   1b2d0:	8100030b 	ldhu	r4,12(r16)
   1b2d4:	80c00417 	ldw	r3,16(r16)
   1b2d8:	003fc506 	br	1b1f0 <__alt_data_end+0xfc01b1f0>
   1b2dc:	0015c5c0 	call	15c5c <__sinit>
   1b2e0:	003fbc06 	br	1b1d4 <__alt_data_end+0xfc01b1d4>

0001b2e4 <__swbuf>:
   1b2e4:	008000f4 	movhi	r2,3
   1b2e8:	10b78704 	addi	r2,r2,-8676
   1b2ec:	280d883a 	mov	r6,r5
   1b2f0:	200b883a 	mov	r5,r4
   1b2f4:	11000017 	ldw	r4,0(r2)
   1b2f8:	001b1a41 	jmpi	1b1a4 <__swbuf_r>

0001b2fc <_write_r>:
   1b2fc:	defffd04 	addi	sp,sp,-12
   1b300:	2805883a 	mov	r2,r5
   1b304:	dc000015 	stw	r16,0(sp)
   1b308:	040000f4 	movhi	r16,3
   1b30c:	dc400115 	stw	r17,4(sp)
   1b310:	300b883a 	mov	r5,r6
   1b314:	84041b04 	addi	r16,r16,4204
   1b318:	2023883a 	mov	r17,r4
   1b31c:	380d883a 	mov	r6,r7
   1b320:	1009883a 	mov	r4,r2
   1b324:	dfc00215 	stw	ra,8(sp)
   1b328:	80000015 	stw	zero,0(r16)
   1b32c:	001fa280 	call	1fa28 <write>
   1b330:	00ffffc4 	movi	r3,-1
   1b334:	10c00526 	beq	r2,r3,1b34c <_write_r+0x50>
   1b338:	dfc00217 	ldw	ra,8(sp)
   1b33c:	dc400117 	ldw	r17,4(sp)
   1b340:	dc000017 	ldw	r16,0(sp)
   1b344:	dec00304 	addi	sp,sp,12
   1b348:	f800283a 	ret
   1b34c:	80c00017 	ldw	r3,0(r16)
   1b350:	183ff926 	beq	r3,zero,1b338 <__alt_data_end+0xfc01b338>
   1b354:	88c00015 	stw	r3,0(r17)
   1b358:	003ff706 	br	1b338 <__alt_data_end+0xfc01b338>

0001b35c <_close_r>:
   1b35c:	defffd04 	addi	sp,sp,-12
   1b360:	dc000015 	stw	r16,0(sp)
   1b364:	040000f4 	movhi	r16,3
   1b368:	dc400115 	stw	r17,4(sp)
   1b36c:	84041b04 	addi	r16,r16,4204
   1b370:	2023883a 	mov	r17,r4
   1b374:	2809883a 	mov	r4,r5
   1b378:	dfc00215 	stw	ra,8(sp)
   1b37c:	80000015 	stw	zero,0(r16)
   1b380:	001ef2c0 	call	1ef2c <close>
   1b384:	00ffffc4 	movi	r3,-1
   1b388:	10c00526 	beq	r2,r3,1b3a0 <_close_r+0x44>
   1b38c:	dfc00217 	ldw	ra,8(sp)
   1b390:	dc400117 	ldw	r17,4(sp)
   1b394:	dc000017 	ldw	r16,0(sp)
   1b398:	dec00304 	addi	sp,sp,12
   1b39c:	f800283a 	ret
   1b3a0:	80c00017 	ldw	r3,0(r16)
   1b3a4:	183ff926 	beq	r3,zero,1b38c <__alt_data_end+0xfc01b38c>
   1b3a8:	88c00015 	stw	r3,0(r17)
   1b3ac:	003ff706 	br	1b38c <__alt_data_end+0xfc01b38c>

0001b3b0 <_calloc_r>:
   1b3b0:	defffe04 	addi	sp,sp,-8
   1b3b4:	2805883a 	mov	r2,r5
   1b3b8:	dc000015 	stw	r16,0(sp)
   1b3bc:	300b883a 	mov	r5,r6
   1b3c0:	2021883a 	mov	r16,r4
   1b3c4:	1009883a 	mov	r4,r2
   1b3c8:	dfc00115 	stw	ra,4(sp)
   1b3cc:	000cec40 	call	cec4 <__mulsi3>
   1b3d0:	100b883a 	mov	r5,r2
   1b3d4:	8009883a 	mov	r4,r16
   1b3d8:	000e46c0 	call	e46c <_malloc_r>
   1b3dc:	10002926 	beq	r2,zero,1b484 <_calloc_r+0xd4>
   1b3e0:	11bfff17 	ldw	r6,-4(r2)
   1b3e4:	1021883a 	mov	r16,r2
   1b3e8:	00bfff04 	movi	r2,-4
   1b3ec:	308c703a 	and	r6,r6,r2
   1b3f0:	00c00904 	movi	r3,36
   1b3f4:	308d883a 	add	r6,r6,r2
   1b3f8:	19801636 	bltu	r3,r6,1b454 <_calloc_r+0xa4>
   1b3fc:	008004c4 	movi	r2,19
   1b400:	11800b2e 	bgeu	r2,r6,1b430 <_calloc_r+0x80>
   1b404:	80000015 	stw	zero,0(r16)
   1b408:	80000115 	stw	zero,4(r16)
   1b40c:	008006c4 	movi	r2,27
   1b410:	11801a2e 	bgeu	r2,r6,1b47c <_calloc_r+0xcc>
   1b414:	80000215 	stw	zero,8(r16)
   1b418:	80000315 	stw	zero,12(r16)
   1b41c:	30c0151e 	bne	r6,r3,1b474 <_calloc_r+0xc4>
   1b420:	80000415 	stw	zero,16(r16)
   1b424:	80800604 	addi	r2,r16,24
   1b428:	80000515 	stw	zero,20(r16)
   1b42c:	00000106 	br	1b434 <_calloc_r+0x84>
   1b430:	8005883a 	mov	r2,r16
   1b434:	10000015 	stw	zero,0(r2)
   1b438:	10000115 	stw	zero,4(r2)
   1b43c:	10000215 	stw	zero,8(r2)
   1b440:	8005883a 	mov	r2,r16
   1b444:	dfc00117 	ldw	ra,4(sp)
   1b448:	dc000017 	ldw	r16,0(sp)
   1b44c:	dec00204 	addi	sp,sp,8
   1b450:	f800283a 	ret
   1b454:	000b883a 	mov	r5,zero
   1b458:	8009883a 	mov	r4,r16
   1b45c:	000edc00 	call	edc0 <memset>
   1b460:	8005883a 	mov	r2,r16
   1b464:	dfc00117 	ldw	ra,4(sp)
   1b468:	dc000017 	ldw	r16,0(sp)
   1b46c:	dec00204 	addi	sp,sp,8
   1b470:	f800283a 	ret
   1b474:	80800404 	addi	r2,r16,16
   1b478:	003fee06 	br	1b434 <__alt_data_end+0xfc01b434>
   1b47c:	80800204 	addi	r2,r16,8
   1b480:	003fec06 	br	1b434 <__alt_data_end+0xfc01b434>
   1b484:	0005883a 	mov	r2,zero
   1b488:	003fee06 	br	1b444 <__alt_data_end+0xfc01b444>

0001b48c <_fclose_r>:
   1b48c:	28003926 	beq	r5,zero,1b574 <_fclose_r+0xe8>
   1b490:	defffc04 	addi	sp,sp,-16
   1b494:	dc400115 	stw	r17,4(sp)
   1b498:	dc000015 	stw	r16,0(sp)
   1b49c:	dfc00315 	stw	ra,12(sp)
   1b4a0:	dc800215 	stw	r18,8(sp)
   1b4a4:	2023883a 	mov	r17,r4
   1b4a8:	2821883a 	mov	r16,r5
   1b4ac:	20000226 	beq	r4,zero,1b4b8 <_fclose_r+0x2c>
   1b4b0:	20800e17 	ldw	r2,56(r4)
   1b4b4:	10002726 	beq	r2,zero,1b554 <_fclose_r+0xc8>
   1b4b8:	8080030f 	ldh	r2,12(r16)
   1b4bc:	1000071e 	bne	r2,zero,1b4dc <_fclose_r+0x50>
   1b4c0:	0005883a 	mov	r2,zero
   1b4c4:	dfc00317 	ldw	ra,12(sp)
   1b4c8:	dc800217 	ldw	r18,8(sp)
   1b4cc:	dc400117 	ldw	r17,4(sp)
   1b4d0:	dc000017 	ldw	r16,0(sp)
   1b4d4:	dec00404 	addi	sp,sp,16
   1b4d8:	f800283a 	ret
   1b4dc:	800b883a 	mov	r5,r16
   1b4e0:	8809883a 	mov	r4,r17
   1b4e4:	00156540 	call	15654 <__sflush_r>
   1b4e8:	1025883a 	mov	r18,r2
   1b4ec:	80800b17 	ldw	r2,44(r16)
   1b4f0:	10000426 	beq	r2,zero,1b504 <_fclose_r+0x78>
   1b4f4:	81400717 	ldw	r5,28(r16)
   1b4f8:	8809883a 	mov	r4,r17
   1b4fc:	103ee83a 	callr	r2
   1b500:	10001616 	blt	r2,zero,1b55c <_fclose_r+0xd0>
   1b504:	8080030b 	ldhu	r2,12(r16)
   1b508:	1080200c 	andi	r2,r2,128
   1b50c:	1000151e 	bne	r2,zero,1b564 <_fclose_r+0xd8>
   1b510:	81400c17 	ldw	r5,48(r16)
   1b514:	28000526 	beq	r5,zero,1b52c <_fclose_r+0xa0>
   1b518:	80801004 	addi	r2,r16,64
   1b51c:	28800226 	beq	r5,r2,1b528 <_fclose_r+0x9c>
   1b520:	8809883a 	mov	r4,r17
   1b524:	0015dd00 	call	15dd0 <_free_r>
   1b528:	80000c15 	stw	zero,48(r16)
   1b52c:	81401117 	ldw	r5,68(r16)
   1b530:	28000326 	beq	r5,zero,1b540 <_fclose_r+0xb4>
   1b534:	8809883a 	mov	r4,r17
   1b538:	0015dd00 	call	15dd0 <_free_r>
   1b53c:	80001115 	stw	zero,68(r16)
   1b540:	0015c6c0 	call	15c6c <__sfp_lock_acquire>
   1b544:	8000030d 	sth	zero,12(r16)
   1b548:	0015c700 	call	15c70 <__sfp_lock_release>
   1b54c:	9005883a 	mov	r2,r18
   1b550:	003fdc06 	br	1b4c4 <__alt_data_end+0xfc01b4c4>
   1b554:	0015c5c0 	call	15c5c <__sinit>
   1b558:	003fd706 	br	1b4b8 <__alt_data_end+0xfc01b4b8>
   1b55c:	04bfffc4 	movi	r18,-1
   1b560:	003fe806 	br	1b504 <__alt_data_end+0xfc01b504>
   1b564:	81400417 	ldw	r5,16(r16)
   1b568:	8809883a 	mov	r4,r17
   1b56c:	0015dd00 	call	15dd0 <_free_r>
   1b570:	003fe706 	br	1b510 <__alt_data_end+0xfc01b510>
   1b574:	0005883a 	mov	r2,zero
   1b578:	f800283a 	ret

0001b57c <fclose>:
   1b57c:	008000f4 	movhi	r2,3
   1b580:	10b78704 	addi	r2,r2,-8676
   1b584:	200b883a 	mov	r5,r4
   1b588:	11000017 	ldw	r4,0(r2)
   1b58c:	001b48c1 	jmpi	1b48c <_fclose_r>

0001b590 <__fputwc>:
   1b590:	defff804 	addi	sp,sp,-32
   1b594:	dcc00415 	stw	r19,16(sp)
   1b598:	dc800315 	stw	r18,12(sp)
   1b59c:	dc000115 	stw	r16,4(sp)
   1b5a0:	dfc00715 	stw	ra,28(sp)
   1b5a4:	dd400615 	stw	r21,24(sp)
   1b5a8:	dd000515 	stw	r20,20(sp)
   1b5ac:	dc400215 	stw	r17,8(sp)
   1b5b0:	2027883a 	mov	r19,r4
   1b5b4:	2825883a 	mov	r18,r5
   1b5b8:	3021883a 	mov	r16,r6
   1b5bc:	00167b80 	call	167b8 <__locale_mb_cur_max>
   1b5c0:	00c00044 	movi	r3,1
   1b5c4:	10c03e26 	beq	r2,r3,1b6c0 <__fputwc+0x130>
   1b5c8:	81c01704 	addi	r7,r16,92
   1b5cc:	900d883a 	mov	r6,r18
   1b5d0:	d80b883a 	mov	r5,sp
   1b5d4:	9809883a 	mov	r4,r19
   1b5d8:	001b9080 	call	1b908 <_wcrtomb_r>
   1b5dc:	1029883a 	mov	r20,r2
   1b5e0:	00bfffc4 	movi	r2,-1
   1b5e4:	a0802026 	beq	r20,r2,1b668 <__fputwc+0xd8>
   1b5e8:	d9400003 	ldbu	r5,0(sp)
   1b5ec:	a0001c26 	beq	r20,zero,1b660 <__fputwc+0xd0>
   1b5f0:	0023883a 	mov	r17,zero
   1b5f4:	05400284 	movi	r21,10
   1b5f8:	00000906 	br	1b620 <__fputwc+0x90>
   1b5fc:	80800017 	ldw	r2,0(r16)
   1b600:	11400005 	stb	r5,0(r2)
   1b604:	80c00017 	ldw	r3,0(r16)
   1b608:	18c00044 	addi	r3,r3,1
   1b60c:	80c00015 	stw	r3,0(r16)
   1b610:	8c400044 	addi	r17,r17,1
   1b614:	dc45883a 	add	r2,sp,r17
   1b618:	8d00112e 	bgeu	r17,r20,1b660 <__fputwc+0xd0>
   1b61c:	11400003 	ldbu	r5,0(r2)
   1b620:	80c00217 	ldw	r3,8(r16)
   1b624:	18ffffc4 	addi	r3,r3,-1
   1b628:	80c00215 	stw	r3,8(r16)
   1b62c:	183ff30e 	bge	r3,zero,1b5fc <__alt_data_end+0xfc01b5fc>
   1b630:	80800617 	ldw	r2,24(r16)
   1b634:	18801916 	blt	r3,r2,1b69c <__fputwc+0x10c>
   1b638:	80800017 	ldw	r2,0(r16)
   1b63c:	11400005 	stb	r5,0(r2)
   1b640:	80800017 	ldw	r2,0(r16)
   1b644:	10c00003 	ldbu	r3,0(r2)
   1b648:	10800044 	addi	r2,r2,1
   1b64c:	1d402326 	beq	r3,r21,1b6dc <__fputwc+0x14c>
   1b650:	80800015 	stw	r2,0(r16)
   1b654:	8c400044 	addi	r17,r17,1
   1b658:	dc45883a 	add	r2,sp,r17
   1b65c:	8d3fef36 	bltu	r17,r20,1b61c <__alt_data_end+0xfc01b61c>
   1b660:	9005883a 	mov	r2,r18
   1b664:	00000406 	br	1b678 <__fputwc+0xe8>
   1b668:	80c0030b 	ldhu	r3,12(r16)
   1b66c:	a005883a 	mov	r2,r20
   1b670:	18c01014 	ori	r3,r3,64
   1b674:	80c0030d 	sth	r3,12(r16)
   1b678:	dfc00717 	ldw	ra,28(sp)
   1b67c:	dd400617 	ldw	r21,24(sp)
   1b680:	dd000517 	ldw	r20,20(sp)
   1b684:	dcc00417 	ldw	r19,16(sp)
   1b688:	dc800317 	ldw	r18,12(sp)
   1b68c:	dc400217 	ldw	r17,8(sp)
   1b690:	dc000117 	ldw	r16,4(sp)
   1b694:	dec00804 	addi	sp,sp,32
   1b698:	f800283a 	ret
   1b69c:	800d883a 	mov	r6,r16
   1b6a0:	29403fcc 	andi	r5,r5,255
   1b6a4:	9809883a 	mov	r4,r19
   1b6a8:	001b1a40 	call	1b1a4 <__swbuf_r>
   1b6ac:	10bfffe0 	cmpeqi	r2,r2,-1
   1b6b0:	10803fcc 	andi	r2,r2,255
   1b6b4:	103fd626 	beq	r2,zero,1b610 <__alt_data_end+0xfc01b610>
   1b6b8:	00bfffc4 	movi	r2,-1
   1b6bc:	003fee06 	br	1b678 <__alt_data_end+0xfc01b678>
   1b6c0:	90ffffc4 	addi	r3,r18,-1
   1b6c4:	01003f84 	movi	r4,254
   1b6c8:	20ffbf36 	bltu	r4,r3,1b5c8 <__alt_data_end+0xfc01b5c8>
   1b6cc:	900b883a 	mov	r5,r18
   1b6d0:	dc800005 	stb	r18,0(sp)
   1b6d4:	1029883a 	mov	r20,r2
   1b6d8:	003fc506 	br	1b5f0 <__alt_data_end+0xfc01b5f0>
   1b6dc:	800d883a 	mov	r6,r16
   1b6e0:	a80b883a 	mov	r5,r21
   1b6e4:	9809883a 	mov	r4,r19
   1b6e8:	001b1a40 	call	1b1a4 <__swbuf_r>
   1b6ec:	10bfffe0 	cmpeqi	r2,r2,-1
   1b6f0:	003fef06 	br	1b6b0 <__alt_data_end+0xfc01b6b0>

0001b6f4 <_fputwc_r>:
   1b6f4:	3080030b 	ldhu	r2,12(r6)
   1b6f8:	10c8000c 	andi	r3,r2,8192
   1b6fc:	1800051e 	bne	r3,zero,1b714 <_fputwc_r+0x20>
   1b700:	30c01917 	ldw	r3,100(r6)
   1b704:	10880014 	ori	r2,r2,8192
   1b708:	3080030d 	sth	r2,12(r6)
   1b70c:	18880014 	ori	r2,r3,8192
   1b710:	30801915 	stw	r2,100(r6)
   1b714:	001b5901 	jmpi	1b590 <__fputwc>

0001b718 <fputwc>:
   1b718:	008000f4 	movhi	r2,3
   1b71c:	defffc04 	addi	sp,sp,-16
   1b720:	10b78704 	addi	r2,r2,-8676
   1b724:	dc000115 	stw	r16,4(sp)
   1b728:	14000017 	ldw	r16,0(r2)
   1b72c:	dc400215 	stw	r17,8(sp)
   1b730:	dfc00315 	stw	ra,12(sp)
   1b734:	2023883a 	mov	r17,r4
   1b738:	80000226 	beq	r16,zero,1b744 <fputwc+0x2c>
   1b73c:	80800e17 	ldw	r2,56(r16)
   1b740:	10001026 	beq	r2,zero,1b784 <fputwc+0x6c>
   1b744:	2880030b 	ldhu	r2,12(r5)
   1b748:	10c8000c 	andi	r3,r2,8192
   1b74c:	1800051e 	bne	r3,zero,1b764 <fputwc+0x4c>
   1b750:	28c01917 	ldw	r3,100(r5)
   1b754:	10880014 	ori	r2,r2,8192
   1b758:	2880030d 	sth	r2,12(r5)
   1b75c:	18880014 	ori	r2,r3,8192
   1b760:	28801915 	stw	r2,100(r5)
   1b764:	280d883a 	mov	r6,r5
   1b768:	8009883a 	mov	r4,r16
   1b76c:	880b883a 	mov	r5,r17
   1b770:	dfc00317 	ldw	ra,12(sp)
   1b774:	dc400217 	ldw	r17,8(sp)
   1b778:	dc000117 	ldw	r16,4(sp)
   1b77c:	dec00404 	addi	sp,sp,16
   1b780:	001b5901 	jmpi	1b590 <__fputwc>
   1b784:	8009883a 	mov	r4,r16
   1b788:	d9400015 	stw	r5,0(sp)
   1b78c:	0015c5c0 	call	15c5c <__sinit>
   1b790:	d9400017 	ldw	r5,0(sp)
   1b794:	003feb06 	br	1b744 <__alt_data_end+0xfc01b744>

0001b798 <_fstat_r>:
   1b798:	defffd04 	addi	sp,sp,-12
   1b79c:	2805883a 	mov	r2,r5
   1b7a0:	dc000015 	stw	r16,0(sp)
   1b7a4:	040000f4 	movhi	r16,3
   1b7a8:	dc400115 	stw	r17,4(sp)
   1b7ac:	84041b04 	addi	r16,r16,4204
   1b7b0:	2023883a 	mov	r17,r4
   1b7b4:	300b883a 	mov	r5,r6
   1b7b8:	1009883a 	mov	r4,r2
   1b7bc:	dfc00215 	stw	ra,8(sp)
   1b7c0:	80000015 	stw	zero,0(r16)
   1b7c4:	001f0a00 	call	1f0a0 <fstat>
   1b7c8:	00ffffc4 	movi	r3,-1
   1b7cc:	10c00526 	beq	r2,r3,1b7e4 <_fstat_r+0x4c>
   1b7d0:	dfc00217 	ldw	ra,8(sp)
   1b7d4:	dc400117 	ldw	r17,4(sp)
   1b7d8:	dc000017 	ldw	r16,0(sp)
   1b7dc:	dec00304 	addi	sp,sp,12
   1b7e0:	f800283a 	ret
   1b7e4:	80c00017 	ldw	r3,0(r16)
   1b7e8:	183ff926 	beq	r3,zero,1b7d0 <__alt_data_end+0xfc01b7d0>
   1b7ec:	88c00015 	stw	r3,0(r17)
   1b7f0:	003ff706 	br	1b7d0 <__alt_data_end+0xfc01b7d0>

0001b7f4 <_isatty_r>:
   1b7f4:	defffd04 	addi	sp,sp,-12
   1b7f8:	dc000015 	stw	r16,0(sp)
   1b7fc:	040000f4 	movhi	r16,3
   1b800:	dc400115 	stw	r17,4(sp)
   1b804:	84041b04 	addi	r16,r16,4204
   1b808:	2023883a 	mov	r17,r4
   1b80c:	2809883a 	mov	r4,r5
   1b810:	dfc00215 	stw	ra,8(sp)
   1b814:	80000015 	stw	zero,0(r16)
   1b818:	001f1b40 	call	1f1b4 <isatty>
   1b81c:	00ffffc4 	movi	r3,-1
   1b820:	10c00526 	beq	r2,r3,1b838 <_isatty_r+0x44>
   1b824:	dfc00217 	ldw	ra,8(sp)
   1b828:	dc400117 	ldw	r17,4(sp)
   1b82c:	dc000017 	ldw	r16,0(sp)
   1b830:	dec00304 	addi	sp,sp,12
   1b834:	f800283a 	ret
   1b838:	80c00017 	ldw	r3,0(r16)
   1b83c:	183ff926 	beq	r3,zero,1b824 <__alt_data_end+0xfc01b824>
   1b840:	88c00015 	stw	r3,0(r17)
   1b844:	003ff706 	br	1b824 <__alt_data_end+0xfc01b824>

0001b848 <_lseek_r>:
   1b848:	defffd04 	addi	sp,sp,-12
   1b84c:	2805883a 	mov	r2,r5
   1b850:	dc000015 	stw	r16,0(sp)
   1b854:	040000f4 	movhi	r16,3
   1b858:	dc400115 	stw	r17,4(sp)
   1b85c:	300b883a 	mov	r5,r6
   1b860:	84041b04 	addi	r16,r16,4204
   1b864:	2023883a 	mov	r17,r4
   1b868:	380d883a 	mov	r6,r7
   1b86c:	1009883a 	mov	r4,r2
   1b870:	dfc00215 	stw	ra,8(sp)
   1b874:	80000015 	stw	zero,0(r16)
   1b878:	001f4f40 	call	1f4f4 <lseek>
   1b87c:	00ffffc4 	movi	r3,-1
   1b880:	10c00526 	beq	r2,r3,1b898 <_lseek_r+0x50>
   1b884:	dfc00217 	ldw	ra,8(sp)
   1b888:	dc400117 	ldw	r17,4(sp)
   1b88c:	dc000017 	ldw	r16,0(sp)
   1b890:	dec00304 	addi	sp,sp,12
   1b894:	f800283a 	ret
   1b898:	80c00017 	ldw	r3,0(r16)
   1b89c:	183ff926 	beq	r3,zero,1b884 <__alt_data_end+0xfc01b884>
   1b8a0:	88c00015 	stw	r3,0(r17)
   1b8a4:	003ff706 	br	1b884 <__alt_data_end+0xfc01b884>

0001b8a8 <_read_r>:
   1b8a8:	defffd04 	addi	sp,sp,-12
   1b8ac:	2805883a 	mov	r2,r5
   1b8b0:	dc000015 	stw	r16,0(sp)
   1b8b4:	040000f4 	movhi	r16,3
   1b8b8:	dc400115 	stw	r17,4(sp)
   1b8bc:	300b883a 	mov	r5,r6
   1b8c0:	84041b04 	addi	r16,r16,4204
   1b8c4:	2023883a 	mov	r17,r4
   1b8c8:	380d883a 	mov	r6,r7
   1b8cc:	1009883a 	mov	r4,r2
   1b8d0:	dfc00215 	stw	ra,8(sp)
   1b8d4:	80000015 	stw	zero,0(r16)
   1b8d8:	001f6d00 	call	1f6d0 <read>
   1b8dc:	00ffffc4 	movi	r3,-1
   1b8e0:	10c00526 	beq	r2,r3,1b8f8 <_read_r+0x50>
   1b8e4:	dfc00217 	ldw	ra,8(sp)
   1b8e8:	dc400117 	ldw	r17,4(sp)
   1b8ec:	dc000017 	ldw	r16,0(sp)
   1b8f0:	dec00304 	addi	sp,sp,12
   1b8f4:	f800283a 	ret
   1b8f8:	80c00017 	ldw	r3,0(r16)
   1b8fc:	183ff926 	beq	r3,zero,1b8e4 <__alt_data_end+0xfc01b8e4>
   1b900:	88c00015 	stw	r3,0(r17)
   1b904:	003ff706 	br	1b8e4 <__alt_data_end+0xfc01b8e4>

0001b908 <_wcrtomb_r>:
   1b908:	defff604 	addi	sp,sp,-40
   1b90c:	008000f4 	movhi	r2,3
   1b910:	dc800815 	stw	r18,32(sp)
   1b914:	dc400715 	stw	r17,28(sp)
   1b918:	dc000615 	stw	r16,24(sp)
   1b91c:	10b78b04 	addi	r2,r2,-8660
   1b920:	dfc00915 	stw	ra,36(sp)
   1b924:	2021883a 	mov	r16,r4
   1b928:	3823883a 	mov	r17,r7
   1b92c:	14800017 	ldw	r18,0(r2)
   1b930:	28001426 	beq	r5,zero,1b984 <_wcrtomb_r+0x7c>
   1b934:	d9400415 	stw	r5,16(sp)
   1b938:	d9800515 	stw	r6,20(sp)
   1b93c:	00167ac0 	call	167ac <__locale_charset>
   1b940:	d9800517 	ldw	r6,20(sp)
   1b944:	d9400417 	ldw	r5,16(sp)
   1b948:	100f883a 	mov	r7,r2
   1b94c:	dc400015 	stw	r17,0(sp)
   1b950:	8009883a 	mov	r4,r16
   1b954:	903ee83a 	callr	r18
   1b958:	00ffffc4 	movi	r3,-1
   1b95c:	10c0031e 	bne	r2,r3,1b96c <_wcrtomb_r+0x64>
   1b960:	88000015 	stw	zero,0(r17)
   1b964:	00c02284 	movi	r3,138
   1b968:	80c00015 	stw	r3,0(r16)
   1b96c:	dfc00917 	ldw	ra,36(sp)
   1b970:	dc800817 	ldw	r18,32(sp)
   1b974:	dc400717 	ldw	r17,28(sp)
   1b978:	dc000617 	ldw	r16,24(sp)
   1b97c:	dec00a04 	addi	sp,sp,40
   1b980:	f800283a 	ret
   1b984:	00167ac0 	call	167ac <__locale_charset>
   1b988:	100f883a 	mov	r7,r2
   1b98c:	dc400015 	stw	r17,0(sp)
   1b990:	000d883a 	mov	r6,zero
   1b994:	d9400104 	addi	r5,sp,4
   1b998:	8009883a 	mov	r4,r16
   1b99c:	903ee83a 	callr	r18
   1b9a0:	003fed06 	br	1b958 <__alt_data_end+0xfc01b958>

0001b9a4 <wcrtomb>:
   1b9a4:	defff604 	addi	sp,sp,-40
   1b9a8:	008000f4 	movhi	r2,3
   1b9ac:	dc800615 	stw	r18,24(sp)
   1b9b0:	dc400515 	stw	r17,20(sp)
   1b9b4:	10b78704 	addi	r2,r2,-8676
   1b9b8:	dfc00915 	stw	ra,36(sp)
   1b9bc:	dd000815 	stw	r20,32(sp)
   1b9c0:	dcc00715 	stw	r19,28(sp)
   1b9c4:	dc000415 	stw	r16,16(sp)
   1b9c8:	3025883a 	mov	r18,r6
   1b9cc:	14400017 	ldw	r17,0(r2)
   1b9d0:	20001926 	beq	r4,zero,1ba38 <wcrtomb+0x94>
   1b9d4:	008000f4 	movhi	r2,3
   1b9d8:	10b78b04 	addi	r2,r2,-8660
   1b9dc:	15000017 	ldw	r20,0(r2)
   1b9e0:	2021883a 	mov	r16,r4
   1b9e4:	2827883a 	mov	r19,r5
   1b9e8:	00167ac0 	call	167ac <__locale_charset>
   1b9ec:	100f883a 	mov	r7,r2
   1b9f0:	dc800015 	stw	r18,0(sp)
   1b9f4:	980d883a 	mov	r6,r19
   1b9f8:	800b883a 	mov	r5,r16
   1b9fc:	8809883a 	mov	r4,r17
   1ba00:	a03ee83a 	callr	r20
   1ba04:	00ffffc4 	movi	r3,-1
   1ba08:	10c0031e 	bne	r2,r3,1ba18 <wcrtomb+0x74>
   1ba0c:	90000015 	stw	zero,0(r18)
   1ba10:	00c02284 	movi	r3,138
   1ba14:	88c00015 	stw	r3,0(r17)
   1ba18:	dfc00917 	ldw	ra,36(sp)
   1ba1c:	dd000817 	ldw	r20,32(sp)
   1ba20:	dcc00717 	ldw	r19,28(sp)
   1ba24:	dc800617 	ldw	r18,24(sp)
   1ba28:	dc400517 	ldw	r17,20(sp)
   1ba2c:	dc000417 	ldw	r16,16(sp)
   1ba30:	dec00a04 	addi	sp,sp,40
   1ba34:	f800283a 	ret
   1ba38:	008000f4 	movhi	r2,3
   1ba3c:	10b78b04 	addi	r2,r2,-8660
   1ba40:	14000017 	ldw	r16,0(r2)
   1ba44:	00167ac0 	call	167ac <__locale_charset>
   1ba48:	100f883a 	mov	r7,r2
   1ba4c:	dc800015 	stw	r18,0(sp)
   1ba50:	000d883a 	mov	r6,zero
   1ba54:	d9400104 	addi	r5,sp,4
   1ba58:	8809883a 	mov	r4,r17
   1ba5c:	803ee83a 	callr	r16
   1ba60:	003fe806 	br	1ba04 <__alt_data_end+0xfc01ba04>

0001ba64 <__ascii_wctomb>:
   1ba64:	28000526 	beq	r5,zero,1ba7c <__ascii_wctomb+0x18>
   1ba68:	00803fc4 	movi	r2,255
   1ba6c:	11800536 	bltu	r2,r6,1ba84 <__ascii_wctomb+0x20>
   1ba70:	29800005 	stb	r6,0(r5)
   1ba74:	00800044 	movi	r2,1
   1ba78:	f800283a 	ret
   1ba7c:	0005883a 	mov	r2,zero
   1ba80:	f800283a 	ret
   1ba84:	00802284 	movi	r2,138
   1ba88:	20800015 	stw	r2,0(r4)
   1ba8c:	00bfffc4 	movi	r2,-1
   1ba90:	f800283a 	ret

0001ba94 <_wctomb_r>:
   1ba94:	008000f4 	movhi	r2,3
   1ba98:	defff904 	addi	sp,sp,-28
   1ba9c:	10b78b04 	addi	r2,r2,-8660
   1baa0:	dfc00615 	stw	ra,24(sp)
   1baa4:	dc400515 	stw	r17,20(sp)
   1baa8:	dc000415 	stw	r16,16(sp)
   1baac:	3823883a 	mov	r17,r7
   1bab0:	14000017 	ldw	r16,0(r2)
   1bab4:	d9000115 	stw	r4,4(sp)
   1bab8:	d9400215 	stw	r5,8(sp)
   1babc:	d9800315 	stw	r6,12(sp)
   1bac0:	00167ac0 	call	167ac <__locale_charset>
   1bac4:	d9800317 	ldw	r6,12(sp)
   1bac8:	d9400217 	ldw	r5,8(sp)
   1bacc:	d9000117 	ldw	r4,4(sp)
   1bad0:	100f883a 	mov	r7,r2
   1bad4:	dc400015 	stw	r17,0(sp)
   1bad8:	803ee83a 	callr	r16
   1badc:	dfc00617 	ldw	ra,24(sp)
   1bae0:	dc400517 	ldw	r17,20(sp)
   1bae4:	dc000417 	ldw	r16,16(sp)
   1bae8:	dec00704 	addi	sp,sp,28
   1baec:	f800283a 	ret

0001baf0 <__udivdi3>:
   1baf0:	defff404 	addi	sp,sp,-48
   1baf4:	dcc00515 	stw	r19,20(sp)
   1baf8:	dc000215 	stw	r16,8(sp)
   1bafc:	dfc00b15 	stw	ra,44(sp)
   1bb00:	df000a15 	stw	fp,40(sp)
   1bb04:	ddc00915 	stw	r23,36(sp)
   1bb08:	dd800815 	stw	r22,32(sp)
   1bb0c:	dd400715 	stw	r21,28(sp)
   1bb10:	dd000615 	stw	r20,24(sp)
   1bb14:	dc800415 	stw	r18,16(sp)
   1bb18:	dc400315 	stw	r17,12(sp)
   1bb1c:	2027883a 	mov	r19,r4
   1bb20:	2821883a 	mov	r16,r5
   1bb24:	3800461e 	bne	r7,zero,1bc40 <__udivdi3+0x150>
   1bb28:	3023883a 	mov	r17,r6
   1bb2c:	2025883a 	mov	r18,r4
   1bb30:	2980572e 	bgeu	r5,r6,1bc90 <__udivdi3+0x1a0>
   1bb34:	00bfffd4 	movui	r2,65535
   1bb38:	282d883a 	mov	r22,r5
   1bb3c:	1180b236 	bltu	r2,r6,1be08 <__udivdi3+0x318>
   1bb40:	00803fc4 	movi	r2,255
   1bb44:	1185803a 	cmpltu	r2,r2,r6
   1bb48:	100490fa 	slli	r2,r2,3
   1bb4c:	3086d83a 	srl	r3,r6,r2
   1bb50:	010000f4 	movhi	r4,3
   1bb54:	212a4404 	addi	r4,r4,-22256
   1bb58:	20c7883a 	add	r3,r4,r3
   1bb5c:	18c00003 	ldbu	r3,0(r3)
   1bb60:	1885883a 	add	r2,r3,r2
   1bb64:	00c00804 	movi	r3,32
   1bb68:	1887c83a 	sub	r3,r3,r2
   1bb6c:	18000526 	beq	r3,zero,1bb84 <__udivdi3+0x94>
   1bb70:	80e0983a 	sll	r16,r16,r3
   1bb74:	9884d83a 	srl	r2,r19,r2
   1bb78:	30e2983a 	sll	r17,r6,r3
   1bb7c:	98e4983a 	sll	r18,r19,r3
   1bb80:	142cb03a 	or	r22,r2,r16
   1bb84:	882ad43a 	srli	r21,r17,16
   1bb88:	b009883a 	mov	r4,r22
   1bb8c:	8d3fffcc 	andi	r20,r17,65535
   1bb90:	a80b883a 	mov	r5,r21
   1bb94:	000ce6c0 	call	ce6c <__umodsi3>
   1bb98:	b009883a 	mov	r4,r22
   1bb9c:	a80b883a 	mov	r5,r21
   1bba0:	1027883a 	mov	r19,r2
   1bba4:	000ce080 	call	ce08 <__udivsi3>
   1bba8:	100b883a 	mov	r5,r2
   1bbac:	a009883a 	mov	r4,r20
   1bbb0:	102d883a 	mov	r22,r2
   1bbb4:	000cec40 	call	cec4 <__mulsi3>
   1bbb8:	9826943a 	slli	r19,r19,16
   1bbbc:	9006d43a 	srli	r3,r18,16
   1bbc0:	1cc6b03a 	or	r3,r3,r19
   1bbc4:	1880052e 	bgeu	r3,r2,1bbdc <__udivdi3+0xec>
   1bbc8:	1c47883a 	add	r3,r3,r17
   1bbcc:	b13fffc4 	addi	r4,r22,-1
   1bbd0:	1c400136 	bltu	r3,r17,1bbd8 <__udivdi3+0xe8>
   1bbd4:	18814236 	bltu	r3,r2,1c0e0 <__udivdi3+0x5f0>
   1bbd8:	202d883a 	mov	r22,r4
   1bbdc:	18a1c83a 	sub	r16,r3,r2
   1bbe0:	8009883a 	mov	r4,r16
   1bbe4:	a80b883a 	mov	r5,r21
   1bbe8:	000ce6c0 	call	ce6c <__umodsi3>
   1bbec:	1027883a 	mov	r19,r2
   1bbf0:	8009883a 	mov	r4,r16
   1bbf4:	a80b883a 	mov	r5,r21
   1bbf8:	9826943a 	slli	r19,r19,16
   1bbfc:	000ce080 	call	ce08 <__udivsi3>
   1bc00:	100b883a 	mov	r5,r2
   1bc04:	a009883a 	mov	r4,r20
   1bc08:	94bfffcc 	andi	r18,r18,65535
   1bc0c:	1021883a 	mov	r16,r2
   1bc10:	94e4b03a 	or	r18,r18,r19
   1bc14:	000cec40 	call	cec4 <__mulsi3>
   1bc18:	9080052e 	bgeu	r18,r2,1bc30 <__udivdi3+0x140>
   1bc1c:	8ca5883a 	add	r18,r17,r18
   1bc20:	80ffffc4 	addi	r3,r16,-1
   1bc24:	94410c36 	bltu	r18,r17,1c058 <__udivdi3+0x568>
   1bc28:	90810b2e 	bgeu	r18,r2,1c058 <__udivdi3+0x568>
   1bc2c:	843fff84 	addi	r16,r16,-2
   1bc30:	b004943a 	slli	r2,r22,16
   1bc34:	0007883a 	mov	r3,zero
   1bc38:	1404b03a 	or	r2,r2,r16
   1bc3c:	00005e06 	br	1bdb8 <__udivdi3+0x2c8>
   1bc40:	29c05b36 	bltu	r5,r7,1bdb0 <__udivdi3+0x2c0>
   1bc44:	00bfffd4 	movui	r2,65535
   1bc48:	11c0672e 	bgeu	r2,r7,1bde8 <__udivdi3+0x2f8>
   1bc4c:	00804034 	movhi	r2,256
   1bc50:	10bfffc4 	addi	r2,r2,-1
   1bc54:	11c10a36 	bltu	r2,r7,1c080 <__udivdi3+0x590>
   1bc58:	00800404 	movi	r2,16
   1bc5c:	3886d83a 	srl	r3,r7,r2
   1bc60:	010000f4 	movhi	r4,3
   1bc64:	212a4404 	addi	r4,r4,-22256
   1bc68:	20c7883a 	add	r3,r4,r3
   1bc6c:	18c00003 	ldbu	r3,0(r3)
   1bc70:	05c00804 	movi	r23,32
   1bc74:	1885883a 	add	r2,r3,r2
   1bc78:	b8afc83a 	sub	r23,r23,r2
   1bc7c:	b800671e 	bne	r23,zero,1be1c <__udivdi3+0x32c>
   1bc80:	3c010536 	bltu	r7,r16,1c098 <__udivdi3+0x5a8>
   1bc84:	9985403a 	cmpgeu	r2,r19,r6
   1bc88:	0007883a 	mov	r3,zero
   1bc8c:	00004a06 	br	1bdb8 <__udivdi3+0x2c8>
   1bc90:	3000041e 	bne	r6,zero,1bca4 <__udivdi3+0x1b4>
   1bc94:	000b883a 	mov	r5,zero
   1bc98:	01000044 	movi	r4,1
   1bc9c:	000ce080 	call	ce08 <__udivsi3>
   1bca0:	1023883a 	mov	r17,r2
   1bca4:	00bfffd4 	movui	r2,65535
   1bca8:	1440532e 	bgeu	r2,r17,1bdf8 <__udivdi3+0x308>
   1bcac:	00804034 	movhi	r2,256
   1bcb0:	10bfffc4 	addi	r2,r2,-1
   1bcb4:	1440f436 	bltu	r2,r17,1c088 <__udivdi3+0x598>
   1bcb8:	00800404 	movi	r2,16
   1bcbc:	8886d83a 	srl	r3,r17,r2
   1bcc0:	010000f4 	movhi	r4,3
   1bcc4:	212a4404 	addi	r4,r4,-22256
   1bcc8:	20c7883a 	add	r3,r4,r3
   1bccc:	18c00003 	ldbu	r3,0(r3)
   1bcd0:	1885883a 	add	r2,r3,r2
   1bcd4:	00c00804 	movi	r3,32
   1bcd8:	1887c83a 	sub	r3,r3,r2
   1bcdc:	1800a51e 	bne	r3,zero,1bf74 <__udivdi3+0x484>
   1bce0:	882ad43a 	srli	r21,r17,16
   1bce4:	8461c83a 	sub	r16,r16,r17
   1bce8:	8d3fffcc 	andi	r20,r17,65535
   1bcec:	00c00044 	movi	r3,1
   1bcf0:	a80b883a 	mov	r5,r21
   1bcf4:	8009883a 	mov	r4,r16
   1bcf8:	d8c00115 	stw	r3,4(sp)
   1bcfc:	000ce6c0 	call	ce6c <__umodsi3>
   1bd00:	a80b883a 	mov	r5,r21
   1bd04:	8009883a 	mov	r4,r16
   1bd08:	1027883a 	mov	r19,r2
   1bd0c:	000ce080 	call	ce08 <__udivsi3>
   1bd10:	a00b883a 	mov	r5,r20
   1bd14:	1009883a 	mov	r4,r2
   1bd18:	102d883a 	mov	r22,r2
   1bd1c:	000cec40 	call	cec4 <__mulsi3>
   1bd20:	9826943a 	slli	r19,r19,16
   1bd24:	900ed43a 	srli	r7,r18,16
   1bd28:	d8c00117 	ldw	r3,4(sp)
   1bd2c:	3cceb03a 	or	r7,r7,r19
   1bd30:	3880052e 	bgeu	r7,r2,1bd48 <__udivdi3+0x258>
   1bd34:	3c4f883a 	add	r7,r7,r17
   1bd38:	b13fffc4 	addi	r4,r22,-1
   1bd3c:	3c400136 	bltu	r7,r17,1bd44 <__udivdi3+0x254>
   1bd40:	3880e436 	bltu	r7,r2,1c0d4 <__udivdi3+0x5e4>
   1bd44:	202d883a 	mov	r22,r4
   1bd48:	38a1c83a 	sub	r16,r7,r2
   1bd4c:	8009883a 	mov	r4,r16
   1bd50:	a80b883a 	mov	r5,r21
   1bd54:	d8c00115 	stw	r3,4(sp)
   1bd58:	000ce6c0 	call	ce6c <__umodsi3>
   1bd5c:	1027883a 	mov	r19,r2
   1bd60:	8009883a 	mov	r4,r16
   1bd64:	a80b883a 	mov	r5,r21
   1bd68:	9826943a 	slli	r19,r19,16
   1bd6c:	000ce080 	call	ce08 <__udivsi3>
   1bd70:	a00b883a 	mov	r5,r20
   1bd74:	1009883a 	mov	r4,r2
   1bd78:	94bfffcc 	andi	r18,r18,65535
   1bd7c:	1021883a 	mov	r16,r2
   1bd80:	94e4b03a 	or	r18,r18,r19
   1bd84:	000cec40 	call	cec4 <__mulsi3>
   1bd88:	d8c00117 	ldw	r3,4(sp)
   1bd8c:	9080052e 	bgeu	r18,r2,1bda4 <__udivdi3+0x2b4>
   1bd90:	8ca5883a 	add	r18,r17,r18
   1bd94:	813fffc4 	addi	r4,r16,-1
   1bd98:	9440ad36 	bltu	r18,r17,1c050 <__udivdi3+0x560>
   1bd9c:	9080ac2e 	bgeu	r18,r2,1c050 <__udivdi3+0x560>
   1bda0:	843fff84 	addi	r16,r16,-2
   1bda4:	b004943a 	slli	r2,r22,16
   1bda8:	1404b03a 	or	r2,r2,r16
   1bdac:	00000206 	br	1bdb8 <__udivdi3+0x2c8>
   1bdb0:	0007883a 	mov	r3,zero
   1bdb4:	0005883a 	mov	r2,zero
   1bdb8:	dfc00b17 	ldw	ra,44(sp)
   1bdbc:	df000a17 	ldw	fp,40(sp)
   1bdc0:	ddc00917 	ldw	r23,36(sp)
   1bdc4:	dd800817 	ldw	r22,32(sp)
   1bdc8:	dd400717 	ldw	r21,28(sp)
   1bdcc:	dd000617 	ldw	r20,24(sp)
   1bdd0:	dcc00517 	ldw	r19,20(sp)
   1bdd4:	dc800417 	ldw	r18,16(sp)
   1bdd8:	dc400317 	ldw	r17,12(sp)
   1bddc:	dc000217 	ldw	r16,8(sp)
   1bde0:	dec00c04 	addi	sp,sp,48
   1bde4:	f800283a 	ret
   1bde8:	00803fc4 	movi	r2,255
   1bdec:	11c5803a 	cmpltu	r2,r2,r7
   1bdf0:	100490fa 	slli	r2,r2,3
   1bdf4:	003f9906 	br	1bc5c <__alt_data_end+0xfc01bc5c>
   1bdf8:	00803fc4 	movi	r2,255
   1bdfc:	1445803a 	cmpltu	r2,r2,r17
   1be00:	100490fa 	slli	r2,r2,3
   1be04:	003fad06 	br	1bcbc <__alt_data_end+0xfc01bcbc>
   1be08:	00804034 	movhi	r2,256
   1be0c:	10bfffc4 	addi	r2,r2,-1
   1be10:	11809f36 	bltu	r2,r6,1c090 <__udivdi3+0x5a0>
   1be14:	00800404 	movi	r2,16
   1be18:	003f4c06 	br	1bb4c <__alt_data_end+0xfc01bb4c>
   1be1c:	3dce983a 	sll	r7,r7,r23
   1be20:	30b8d83a 	srl	fp,r6,r2
   1be24:	80a2d83a 	srl	r17,r16,r2
   1be28:	35cc983a 	sll	r6,r6,r23
   1be2c:	3f38b03a 	or	fp,r7,fp
   1be30:	e024d43a 	srli	r18,fp,16
   1be34:	9884d83a 	srl	r2,r19,r2
   1be38:	85e0983a 	sll	r16,r16,r23
   1be3c:	8809883a 	mov	r4,r17
   1be40:	900b883a 	mov	r5,r18
   1be44:	d9800015 	stw	r6,0(sp)
   1be48:	1420b03a 	or	r16,r2,r16
   1be4c:	000ce6c0 	call	ce6c <__umodsi3>
   1be50:	900b883a 	mov	r5,r18
   1be54:	8809883a 	mov	r4,r17
   1be58:	1029883a 	mov	r20,r2
   1be5c:	e5bfffcc 	andi	r22,fp,65535
   1be60:	000ce080 	call	ce08 <__udivsi3>
   1be64:	100b883a 	mov	r5,r2
   1be68:	b009883a 	mov	r4,r22
   1be6c:	102b883a 	mov	r21,r2
   1be70:	000cec40 	call	cec4 <__mulsi3>
   1be74:	a028943a 	slli	r20,r20,16
   1be78:	8006d43a 	srli	r3,r16,16
   1be7c:	1d06b03a 	or	r3,r3,r20
   1be80:	1880042e 	bgeu	r3,r2,1be94 <__udivdi3+0x3a4>
   1be84:	1f07883a 	add	r3,r3,fp
   1be88:	a93fffc4 	addi	r4,r21,-1
   1be8c:	1f00892e 	bgeu	r3,fp,1c0b4 <__udivdi3+0x5c4>
   1be90:	202b883a 	mov	r21,r4
   1be94:	18a3c83a 	sub	r17,r3,r2
   1be98:	8809883a 	mov	r4,r17
   1be9c:	900b883a 	mov	r5,r18
   1bea0:	000ce6c0 	call	ce6c <__umodsi3>
   1bea4:	1029883a 	mov	r20,r2
   1bea8:	8809883a 	mov	r4,r17
   1beac:	900b883a 	mov	r5,r18
   1beb0:	a028943a 	slli	r20,r20,16
   1beb4:	000ce080 	call	ce08 <__udivsi3>
   1beb8:	100b883a 	mov	r5,r2
   1bebc:	b009883a 	mov	r4,r22
   1bec0:	843fffcc 	andi	r16,r16,65535
   1bec4:	1023883a 	mov	r17,r2
   1bec8:	8520b03a 	or	r16,r16,r20
   1becc:	000cec40 	call	cec4 <__mulsi3>
   1bed0:	8080042e 	bgeu	r16,r2,1bee4 <__udivdi3+0x3f4>
   1bed4:	8721883a 	add	r16,r16,fp
   1bed8:	88ffffc4 	addi	r3,r17,-1
   1bedc:	8700712e 	bgeu	r16,fp,1c0a4 <__udivdi3+0x5b4>
   1bee0:	1823883a 	mov	r17,r3
   1bee4:	a80e943a 	slli	r7,r21,16
   1bee8:	d8c00017 	ldw	r3,0(sp)
   1beec:	80a1c83a 	sub	r16,r16,r2
   1bef0:	3c64b03a 	or	r18,r7,r17
   1bef4:	1d3fffcc 	andi	r20,r3,65535
   1bef8:	9022d43a 	srli	r17,r18,16
   1befc:	95bfffcc 	andi	r22,r18,65535
   1bf00:	a00b883a 	mov	r5,r20
   1bf04:	b009883a 	mov	r4,r22
   1bf08:	182ad43a 	srli	r21,r3,16
   1bf0c:	000cec40 	call	cec4 <__mulsi3>
   1bf10:	a00b883a 	mov	r5,r20
   1bf14:	8809883a 	mov	r4,r17
   1bf18:	1039883a 	mov	fp,r2
   1bf1c:	000cec40 	call	cec4 <__mulsi3>
   1bf20:	8809883a 	mov	r4,r17
   1bf24:	a80b883a 	mov	r5,r21
   1bf28:	1029883a 	mov	r20,r2
   1bf2c:	000cec40 	call	cec4 <__mulsi3>
   1bf30:	a80b883a 	mov	r5,r21
   1bf34:	b009883a 	mov	r4,r22
   1bf38:	1023883a 	mov	r17,r2
   1bf3c:	000cec40 	call	cec4 <__mulsi3>
   1bf40:	e006d43a 	srli	r3,fp,16
   1bf44:	1505883a 	add	r2,r2,r20
   1bf48:	1887883a 	add	r3,r3,r2
   1bf4c:	1d00022e 	bgeu	r3,r20,1bf58 <__udivdi3+0x468>
   1bf50:	00800074 	movhi	r2,1
   1bf54:	88a3883a 	add	r17,r17,r2
   1bf58:	1804d43a 	srli	r2,r3,16
   1bf5c:	1463883a 	add	r17,r2,r17
   1bf60:	84404436 	bltu	r16,r17,1c074 <__udivdi3+0x584>
   1bf64:	84403e26 	beq	r16,r17,1c060 <__udivdi3+0x570>
   1bf68:	9005883a 	mov	r2,r18
   1bf6c:	0007883a 	mov	r3,zero
   1bf70:	003f9106 	br	1bdb8 <__alt_data_end+0xfc01bdb8>
   1bf74:	88e2983a 	sll	r17,r17,r3
   1bf78:	80aed83a 	srl	r23,r16,r2
   1bf7c:	80e0983a 	sll	r16,r16,r3
   1bf80:	882ad43a 	srli	r21,r17,16
   1bf84:	9884d83a 	srl	r2,r19,r2
   1bf88:	b809883a 	mov	r4,r23
   1bf8c:	a80b883a 	mov	r5,r21
   1bf90:	98e4983a 	sll	r18,r19,r3
   1bf94:	142cb03a 	or	r22,r2,r16
   1bf98:	000ce6c0 	call	ce6c <__umodsi3>
   1bf9c:	b809883a 	mov	r4,r23
   1bfa0:	a80b883a 	mov	r5,r21
   1bfa4:	1027883a 	mov	r19,r2
   1bfa8:	8d3fffcc 	andi	r20,r17,65535
   1bfac:	000ce080 	call	ce08 <__udivsi3>
   1bfb0:	a009883a 	mov	r4,r20
   1bfb4:	100b883a 	mov	r5,r2
   1bfb8:	102f883a 	mov	r23,r2
   1bfbc:	000cec40 	call	cec4 <__mulsi3>
   1bfc0:	9826943a 	slli	r19,r19,16
   1bfc4:	b008d43a 	srli	r4,r22,16
   1bfc8:	24c8b03a 	or	r4,r4,r19
   1bfcc:	2080062e 	bgeu	r4,r2,1bfe8 <__udivdi3+0x4f8>
   1bfd0:	2449883a 	add	r4,r4,r17
   1bfd4:	b8ffffc4 	addi	r3,r23,-1
   1bfd8:	24403c36 	bltu	r4,r17,1c0cc <__udivdi3+0x5dc>
   1bfdc:	20803b2e 	bgeu	r4,r2,1c0cc <__udivdi3+0x5dc>
   1bfe0:	bdffff84 	addi	r23,r23,-2
   1bfe4:	2449883a 	add	r4,r4,r17
   1bfe8:	20a1c83a 	sub	r16,r4,r2
   1bfec:	a80b883a 	mov	r5,r21
   1bff0:	8009883a 	mov	r4,r16
   1bff4:	000ce6c0 	call	ce6c <__umodsi3>
   1bff8:	a80b883a 	mov	r5,r21
   1bffc:	8009883a 	mov	r4,r16
   1c000:	1027883a 	mov	r19,r2
   1c004:	000ce080 	call	ce08 <__udivsi3>
   1c008:	a009883a 	mov	r4,r20
   1c00c:	100b883a 	mov	r5,r2
   1c010:	9826943a 	slli	r19,r19,16
   1c014:	1039883a 	mov	fp,r2
   1c018:	000cec40 	call	cec4 <__mulsi3>
   1c01c:	b13fffcc 	andi	r4,r22,65535
   1c020:	24c8b03a 	or	r4,r4,r19
   1c024:	2080062e 	bgeu	r4,r2,1c040 <__udivdi3+0x550>
   1c028:	2449883a 	add	r4,r4,r17
   1c02c:	e0ffffc4 	addi	r3,fp,-1
   1c030:	24402436 	bltu	r4,r17,1c0c4 <__udivdi3+0x5d4>
   1c034:	2080232e 	bgeu	r4,r2,1c0c4 <__udivdi3+0x5d4>
   1c038:	e73fff84 	addi	fp,fp,-2
   1c03c:	2449883a 	add	r4,r4,r17
   1c040:	b82e943a 	slli	r23,r23,16
   1c044:	20a1c83a 	sub	r16,r4,r2
   1c048:	bf06b03a 	or	r3,r23,fp
   1c04c:	003f2806 	br	1bcf0 <__alt_data_end+0xfc01bcf0>
   1c050:	2021883a 	mov	r16,r4
   1c054:	003f5306 	br	1bda4 <__alt_data_end+0xfc01bda4>
   1c058:	1821883a 	mov	r16,r3
   1c05c:	003ef406 	br	1bc30 <__alt_data_end+0xfc01bc30>
   1c060:	1806943a 	slli	r3,r3,16
   1c064:	9de6983a 	sll	r19,r19,r23
   1c068:	e73fffcc 	andi	fp,fp,65535
   1c06c:	1f07883a 	add	r3,r3,fp
   1c070:	98ffbd2e 	bgeu	r19,r3,1bf68 <__alt_data_end+0xfc01bf68>
   1c074:	90bfffc4 	addi	r2,r18,-1
   1c078:	0007883a 	mov	r3,zero
   1c07c:	003f4e06 	br	1bdb8 <__alt_data_end+0xfc01bdb8>
   1c080:	00800604 	movi	r2,24
   1c084:	003ef506 	br	1bc5c <__alt_data_end+0xfc01bc5c>
   1c088:	00800604 	movi	r2,24
   1c08c:	003f0b06 	br	1bcbc <__alt_data_end+0xfc01bcbc>
   1c090:	00800604 	movi	r2,24
   1c094:	003ead06 	br	1bb4c <__alt_data_end+0xfc01bb4c>
   1c098:	0007883a 	mov	r3,zero
   1c09c:	00800044 	movi	r2,1
   1c0a0:	003f4506 	br	1bdb8 <__alt_data_end+0xfc01bdb8>
   1c0a4:	80bf8e2e 	bgeu	r16,r2,1bee0 <__alt_data_end+0xfc01bee0>
   1c0a8:	8c7fff84 	addi	r17,r17,-2
   1c0ac:	8721883a 	add	r16,r16,fp
   1c0b0:	003f8c06 	br	1bee4 <__alt_data_end+0xfc01bee4>
   1c0b4:	18bf762e 	bgeu	r3,r2,1be90 <__alt_data_end+0xfc01be90>
   1c0b8:	ad7fff84 	addi	r21,r21,-2
   1c0bc:	1f07883a 	add	r3,r3,fp
   1c0c0:	003f7406 	br	1be94 <__alt_data_end+0xfc01be94>
   1c0c4:	1839883a 	mov	fp,r3
   1c0c8:	003fdd06 	br	1c040 <__alt_data_end+0xfc01c040>
   1c0cc:	182f883a 	mov	r23,r3
   1c0d0:	003fc506 	br	1bfe8 <__alt_data_end+0xfc01bfe8>
   1c0d4:	b5bfff84 	addi	r22,r22,-2
   1c0d8:	3c4f883a 	add	r7,r7,r17
   1c0dc:	003f1a06 	br	1bd48 <__alt_data_end+0xfc01bd48>
   1c0e0:	b5bfff84 	addi	r22,r22,-2
   1c0e4:	1c47883a 	add	r3,r3,r17
   1c0e8:	003ebc06 	br	1bbdc <__alt_data_end+0xfc01bbdc>

0001c0ec <__umoddi3>:
   1c0ec:	defff304 	addi	sp,sp,-52
   1c0f0:	df000b15 	stw	fp,44(sp)
   1c0f4:	dc400415 	stw	r17,16(sp)
   1c0f8:	dc000315 	stw	r16,12(sp)
   1c0fc:	dfc00c15 	stw	ra,48(sp)
   1c100:	ddc00a15 	stw	r23,40(sp)
   1c104:	dd800915 	stw	r22,36(sp)
   1c108:	dd400815 	stw	r21,32(sp)
   1c10c:	dd000715 	stw	r20,28(sp)
   1c110:	dcc00615 	stw	r19,24(sp)
   1c114:	dc800515 	stw	r18,20(sp)
   1c118:	2021883a 	mov	r16,r4
   1c11c:	2823883a 	mov	r17,r5
   1c120:	2839883a 	mov	fp,r5
   1c124:	3800401e 	bne	r7,zero,1c228 <__umoddi3+0x13c>
   1c128:	3027883a 	mov	r19,r6
   1c12c:	2029883a 	mov	r20,r4
   1c130:	2980552e 	bgeu	r5,r6,1c288 <__umoddi3+0x19c>
   1c134:	00bfffd4 	movui	r2,65535
   1c138:	1180a236 	bltu	r2,r6,1c3c4 <__umoddi3+0x2d8>
   1c13c:	01003fc4 	movi	r4,255
   1c140:	2189803a 	cmpltu	r4,r4,r6
   1c144:	200890fa 	slli	r4,r4,3
   1c148:	3104d83a 	srl	r2,r6,r4
   1c14c:	00c000f4 	movhi	r3,3
   1c150:	18ea4404 	addi	r3,r3,-22256
   1c154:	1885883a 	add	r2,r3,r2
   1c158:	10c00003 	ldbu	r3,0(r2)
   1c15c:	00800804 	movi	r2,32
   1c160:	1909883a 	add	r4,r3,r4
   1c164:	1125c83a 	sub	r18,r2,r4
   1c168:	90000526 	beq	r18,zero,1c180 <__umoddi3+0x94>
   1c16c:	8ca2983a 	sll	r17,r17,r18
   1c170:	8108d83a 	srl	r4,r16,r4
   1c174:	34a6983a 	sll	r19,r6,r18
   1c178:	84a8983a 	sll	r20,r16,r18
   1c17c:	2478b03a 	or	fp,r4,r17
   1c180:	982cd43a 	srli	r22,r19,16
   1c184:	e009883a 	mov	r4,fp
   1c188:	9dffffcc 	andi	r23,r19,65535
   1c18c:	b00b883a 	mov	r5,r22
   1c190:	000ce6c0 	call	ce6c <__umodsi3>
   1c194:	b00b883a 	mov	r5,r22
   1c198:	e009883a 	mov	r4,fp
   1c19c:	102b883a 	mov	r21,r2
   1c1a0:	000ce080 	call	ce08 <__udivsi3>
   1c1a4:	100b883a 	mov	r5,r2
   1c1a8:	b809883a 	mov	r4,r23
   1c1ac:	000cec40 	call	cec4 <__mulsi3>
   1c1b0:	a82a943a 	slli	r21,r21,16
   1c1b4:	a006d43a 	srli	r3,r20,16
   1c1b8:	1d46b03a 	or	r3,r3,r21
   1c1bc:	1880032e 	bgeu	r3,r2,1c1cc <__umoddi3+0xe0>
   1c1c0:	1cc7883a 	add	r3,r3,r19
   1c1c4:	1cc00136 	bltu	r3,r19,1c1cc <__umoddi3+0xe0>
   1c1c8:	18813136 	bltu	r3,r2,1c690 <__umoddi3+0x5a4>
   1c1cc:	18a1c83a 	sub	r16,r3,r2
   1c1d0:	b00b883a 	mov	r5,r22
   1c1d4:	8009883a 	mov	r4,r16
   1c1d8:	000ce6c0 	call	ce6c <__umodsi3>
   1c1dc:	b00b883a 	mov	r5,r22
   1c1e0:	8009883a 	mov	r4,r16
   1c1e4:	1023883a 	mov	r17,r2
   1c1e8:	000ce080 	call	ce08 <__udivsi3>
   1c1ec:	100b883a 	mov	r5,r2
   1c1f0:	b809883a 	mov	r4,r23
   1c1f4:	8822943a 	slli	r17,r17,16
   1c1f8:	000cec40 	call	cec4 <__mulsi3>
   1c1fc:	a0ffffcc 	andi	r3,r20,65535
   1c200:	1c46b03a 	or	r3,r3,r17
   1c204:	1880042e 	bgeu	r3,r2,1c218 <__umoddi3+0x12c>
   1c208:	1cc7883a 	add	r3,r3,r19
   1c20c:	1cc00236 	bltu	r3,r19,1c218 <__umoddi3+0x12c>
   1c210:	1880012e 	bgeu	r3,r2,1c218 <__umoddi3+0x12c>
   1c214:	1cc7883a 	add	r3,r3,r19
   1c218:	1885c83a 	sub	r2,r3,r2
   1c21c:	1484d83a 	srl	r2,r2,r18
   1c220:	0007883a 	mov	r3,zero
   1c224:	00005306 	br	1c374 <__umoddi3+0x288>
   1c228:	29c05036 	bltu	r5,r7,1c36c <__umoddi3+0x280>
   1c22c:	00bfffd4 	movui	r2,65535
   1c230:	11c05c2e 	bgeu	r2,r7,1c3a4 <__umoddi3+0x2b8>
   1c234:	00804034 	movhi	r2,256
   1c238:	10bfffc4 	addi	r2,r2,-1
   1c23c:	11c10636 	bltu	r2,r7,1c658 <__umoddi3+0x56c>
   1c240:	01000404 	movi	r4,16
   1c244:	3904d83a 	srl	r2,r7,r4
   1c248:	00c000f4 	movhi	r3,3
   1c24c:	18ea4404 	addi	r3,r3,-22256
   1c250:	1885883a 	add	r2,r3,r2
   1c254:	14c00003 	ldbu	r19,0(r2)
   1c258:	00c00804 	movi	r3,32
   1c25c:	9927883a 	add	r19,r19,r4
   1c260:	1ce9c83a 	sub	r20,r3,r19
   1c264:	a0005c1e 	bne	r20,zero,1c3d8 <__umoddi3+0x2ec>
   1c268:	3c400136 	bltu	r7,r17,1c270 <__umoddi3+0x184>
   1c26c:	81810a36 	bltu	r16,r6,1c698 <__umoddi3+0x5ac>
   1c270:	8185c83a 	sub	r2,r16,r6
   1c274:	89e3c83a 	sub	r17,r17,r7
   1c278:	8089803a 	cmpltu	r4,r16,r2
   1c27c:	8939c83a 	sub	fp,r17,r4
   1c280:	e007883a 	mov	r3,fp
   1c284:	00003b06 	br	1c374 <__umoddi3+0x288>
   1c288:	3000041e 	bne	r6,zero,1c29c <__umoddi3+0x1b0>
   1c28c:	000b883a 	mov	r5,zero
   1c290:	01000044 	movi	r4,1
   1c294:	000ce080 	call	ce08 <__udivsi3>
   1c298:	1027883a 	mov	r19,r2
   1c29c:	00bfffd4 	movui	r2,65535
   1c2a0:	14c0442e 	bgeu	r2,r19,1c3b4 <__umoddi3+0x2c8>
   1c2a4:	00804034 	movhi	r2,256
   1c2a8:	10bfffc4 	addi	r2,r2,-1
   1c2ac:	14c0ec36 	bltu	r2,r19,1c660 <__umoddi3+0x574>
   1c2b0:	00800404 	movi	r2,16
   1c2b4:	9886d83a 	srl	r3,r19,r2
   1c2b8:	010000f4 	movhi	r4,3
   1c2bc:	212a4404 	addi	r4,r4,-22256
   1c2c0:	20c7883a 	add	r3,r4,r3
   1c2c4:	18c00003 	ldbu	r3,0(r3)
   1c2c8:	1887883a 	add	r3,r3,r2
   1c2cc:	00800804 	movi	r2,32
   1c2d0:	10e5c83a 	sub	r18,r2,r3
   1c2d4:	9000ab1e 	bne	r18,zero,1c584 <__umoddi3+0x498>
   1c2d8:	982cd43a 	srli	r22,r19,16
   1c2dc:	8ce3c83a 	sub	r17,r17,r19
   1c2e0:	9dffffcc 	andi	r23,r19,65535
   1c2e4:	b00b883a 	mov	r5,r22
   1c2e8:	8809883a 	mov	r4,r17
   1c2ec:	000ce6c0 	call	ce6c <__umodsi3>
   1c2f0:	b00b883a 	mov	r5,r22
   1c2f4:	8809883a 	mov	r4,r17
   1c2f8:	102b883a 	mov	r21,r2
   1c2fc:	000ce080 	call	ce08 <__udivsi3>
   1c300:	b80b883a 	mov	r5,r23
   1c304:	1009883a 	mov	r4,r2
   1c308:	000cec40 	call	cec4 <__mulsi3>
   1c30c:	a82a943a 	slli	r21,r21,16
   1c310:	a006d43a 	srli	r3,r20,16
   1c314:	1d46b03a 	or	r3,r3,r21
   1c318:	1880042e 	bgeu	r3,r2,1c32c <__umoddi3+0x240>
   1c31c:	1cc7883a 	add	r3,r3,r19
   1c320:	1cc00236 	bltu	r3,r19,1c32c <__umoddi3+0x240>
   1c324:	1880012e 	bgeu	r3,r2,1c32c <__umoddi3+0x240>
   1c328:	1cc7883a 	add	r3,r3,r19
   1c32c:	18a1c83a 	sub	r16,r3,r2
   1c330:	b00b883a 	mov	r5,r22
   1c334:	8009883a 	mov	r4,r16
   1c338:	000ce6c0 	call	ce6c <__umodsi3>
   1c33c:	1023883a 	mov	r17,r2
   1c340:	b00b883a 	mov	r5,r22
   1c344:	8009883a 	mov	r4,r16
   1c348:	000ce080 	call	ce08 <__udivsi3>
   1c34c:	8822943a 	slli	r17,r17,16
   1c350:	b80b883a 	mov	r5,r23
   1c354:	1009883a 	mov	r4,r2
   1c358:	000cec40 	call	cec4 <__mulsi3>
   1c35c:	a53fffcc 	andi	r20,r20,65535
   1c360:	a446b03a 	or	r3,r20,r17
   1c364:	18bfac2e 	bgeu	r3,r2,1c218 <__alt_data_end+0xfc01c218>
   1c368:	003fa706 	br	1c208 <__alt_data_end+0xfc01c208>
   1c36c:	2005883a 	mov	r2,r4
   1c370:	2807883a 	mov	r3,r5
   1c374:	dfc00c17 	ldw	ra,48(sp)
   1c378:	df000b17 	ldw	fp,44(sp)
   1c37c:	ddc00a17 	ldw	r23,40(sp)
   1c380:	dd800917 	ldw	r22,36(sp)
   1c384:	dd400817 	ldw	r21,32(sp)
   1c388:	dd000717 	ldw	r20,28(sp)
   1c38c:	dcc00617 	ldw	r19,24(sp)
   1c390:	dc800517 	ldw	r18,20(sp)
   1c394:	dc400417 	ldw	r17,16(sp)
   1c398:	dc000317 	ldw	r16,12(sp)
   1c39c:	dec00d04 	addi	sp,sp,52
   1c3a0:	f800283a 	ret
   1c3a4:	04c03fc4 	movi	r19,255
   1c3a8:	99c9803a 	cmpltu	r4,r19,r7
   1c3ac:	200890fa 	slli	r4,r4,3
   1c3b0:	003fa406 	br	1c244 <__alt_data_end+0xfc01c244>
   1c3b4:	00803fc4 	movi	r2,255
   1c3b8:	14c5803a 	cmpltu	r2,r2,r19
   1c3bc:	100490fa 	slli	r2,r2,3
   1c3c0:	003fbc06 	br	1c2b4 <__alt_data_end+0xfc01c2b4>
   1c3c4:	00804034 	movhi	r2,256
   1c3c8:	10bfffc4 	addi	r2,r2,-1
   1c3cc:	1180a636 	bltu	r2,r6,1c668 <__umoddi3+0x57c>
   1c3d0:	01000404 	movi	r4,16
   1c3d4:	003f5c06 	br	1c148 <__alt_data_end+0xfc01c148>
   1c3d8:	3d0e983a 	sll	r7,r7,r20
   1c3dc:	34ead83a 	srl	r21,r6,r19
   1c3e0:	8cc6d83a 	srl	r3,r17,r19
   1c3e4:	8d10983a 	sll	r8,r17,r20
   1c3e8:	3d6ab03a 	or	r21,r7,r21
   1c3ec:	a82cd43a 	srli	r22,r21,16
   1c3f0:	84e2d83a 	srl	r17,r16,r19
   1c3f4:	1809883a 	mov	r4,r3
   1c3f8:	b00b883a 	mov	r5,r22
   1c3fc:	8a22b03a 	or	r17,r17,r8
   1c400:	3524983a 	sll	r18,r6,r20
   1c404:	dc400015 	stw	r17,0(sp)
   1c408:	d8c00115 	stw	r3,4(sp)
   1c40c:	000ce6c0 	call	ce6c <__umodsi3>
   1c410:	d8c00117 	ldw	r3,4(sp)
   1c414:	b00b883a 	mov	r5,r22
   1c418:	1039883a 	mov	fp,r2
   1c41c:	1809883a 	mov	r4,r3
   1c420:	000ce080 	call	ce08 <__udivsi3>
   1c424:	adffffcc 	andi	r23,r21,65535
   1c428:	100b883a 	mov	r5,r2
   1c42c:	b809883a 	mov	r4,r23
   1c430:	1023883a 	mov	r17,r2
   1c434:	000cec40 	call	cec4 <__mulsi3>
   1c438:	d9400017 	ldw	r5,0(sp)
   1c43c:	e008943a 	slli	r4,fp,16
   1c440:	8520983a 	sll	r16,r16,r20
   1c444:	2806d43a 	srli	r3,r5,16
   1c448:	1906b03a 	or	r3,r3,r4
   1c44c:	1880042e 	bgeu	r3,r2,1c460 <__umoddi3+0x374>
   1c450:	1d47883a 	add	r3,r3,r21
   1c454:	893fffc4 	addi	r4,r17,-1
   1c458:	1d40892e 	bgeu	r3,r21,1c680 <__umoddi3+0x594>
   1c45c:	2023883a 	mov	r17,r4
   1c460:	18b9c83a 	sub	fp,r3,r2
   1c464:	b00b883a 	mov	r5,r22
   1c468:	e009883a 	mov	r4,fp
   1c46c:	000ce6c0 	call	ce6c <__umodsi3>
   1c470:	b00b883a 	mov	r5,r22
   1c474:	e009883a 	mov	r4,fp
   1c478:	d8800215 	stw	r2,8(sp)
   1c47c:	000ce080 	call	ce08 <__udivsi3>
   1c480:	100b883a 	mov	r5,r2
   1c484:	b809883a 	mov	r4,r23
   1c488:	102d883a 	mov	r22,r2
   1c48c:	000cec40 	call	cec4 <__mulsi3>
   1c490:	d9800217 	ldw	r6,8(sp)
   1c494:	d8c00017 	ldw	r3,0(sp)
   1c498:	300c943a 	slli	r6,r6,16
   1c49c:	1a3fffcc 	andi	r8,r3,65535
   1c4a0:	4190b03a 	or	r8,r8,r6
   1c4a4:	4080042e 	bgeu	r8,r2,1c4b8 <__umoddi3+0x3cc>
   1c4a8:	4551883a 	add	r8,r8,r21
   1c4ac:	b0ffffc4 	addi	r3,r22,-1
   1c4b0:	45406f2e 	bgeu	r8,r21,1c670 <__umoddi3+0x584>
   1c4b4:	182d883a 	mov	r22,r3
   1c4b8:	880e943a 	slli	r7,r17,16
   1c4bc:	9006d43a 	srli	r3,r18,16
   1c4c0:	91bfffcc 	andi	r6,r18,65535
   1c4c4:	3dacb03a 	or	r22,r7,r22
   1c4c8:	b02ed43a 	srli	r23,r22,16
   1c4cc:	b5bfffcc 	andi	r22,r22,65535
   1c4d0:	300b883a 	mov	r5,r6
   1c4d4:	b009883a 	mov	r4,r22
   1c4d8:	40a3c83a 	sub	r17,r8,r2
   1c4dc:	d8c00115 	stw	r3,4(sp)
   1c4e0:	d9800215 	stw	r6,8(sp)
   1c4e4:	000cec40 	call	cec4 <__mulsi3>
   1c4e8:	d9800217 	ldw	r6,8(sp)
   1c4ec:	b809883a 	mov	r4,r23
   1c4f0:	1039883a 	mov	fp,r2
   1c4f4:	300b883a 	mov	r5,r6
   1c4f8:	000cec40 	call	cec4 <__mulsi3>
   1c4fc:	d8c00117 	ldw	r3,4(sp)
   1c500:	b809883a 	mov	r4,r23
   1c504:	d8800215 	stw	r2,8(sp)
   1c508:	180b883a 	mov	r5,r3
   1c50c:	000cec40 	call	cec4 <__mulsi3>
   1c510:	d8c00117 	ldw	r3,4(sp)
   1c514:	b009883a 	mov	r4,r22
   1c518:	102f883a 	mov	r23,r2
   1c51c:	180b883a 	mov	r5,r3
   1c520:	000cec40 	call	cec4 <__mulsi3>
   1c524:	d9800217 	ldw	r6,8(sp)
   1c528:	e006d43a 	srli	r3,fp,16
   1c52c:	1185883a 	add	r2,r2,r6
   1c530:	1885883a 	add	r2,r3,r2
   1c534:	1180022e 	bgeu	r2,r6,1c540 <__umoddi3+0x454>
   1c538:	00c00074 	movhi	r3,1
   1c53c:	b8ef883a 	add	r23,r23,r3
   1c540:	1006d43a 	srli	r3,r2,16
   1c544:	1004943a 	slli	r2,r2,16
   1c548:	e73fffcc 	andi	fp,fp,65535
   1c54c:	1dc7883a 	add	r3,r3,r23
   1c550:	1739883a 	add	fp,r2,fp
   1c554:	88c03a36 	bltu	r17,r3,1c640 <__umoddi3+0x554>
   1c558:	88c05126 	beq	r17,r3,1c6a0 <__umoddi3+0x5b4>
   1c55c:	88c9c83a 	sub	r4,r17,r3
   1c560:	e00f883a 	mov	r7,fp
   1c564:	81cfc83a 	sub	r7,r16,r7
   1c568:	81c7803a 	cmpltu	r3,r16,r7
   1c56c:	20c7c83a 	sub	r3,r4,r3
   1c570:	1cc4983a 	sll	r2,r3,r19
   1c574:	3d0ed83a 	srl	r7,r7,r20
   1c578:	1d06d83a 	srl	r3,r3,r20
   1c57c:	11c4b03a 	or	r2,r2,r7
   1c580:	003f7c06 	br	1c374 <__alt_data_end+0xfc01c374>
   1c584:	9ca6983a 	sll	r19,r19,r18
   1c588:	88f8d83a 	srl	fp,r17,r3
   1c58c:	80c4d83a 	srl	r2,r16,r3
   1c590:	982cd43a 	srli	r22,r19,16
   1c594:	8ca2983a 	sll	r17,r17,r18
   1c598:	e009883a 	mov	r4,fp
   1c59c:	b00b883a 	mov	r5,r22
   1c5a0:	146ab03a 	or	r21,r2,r17
   1c5a4:	000ce6c0 	call	ce6c <__umodsi3>
   1c5a8:	b00b883a 	mov	r5,r22
   1c5ac:	e009883a 	mov	r4,fp
   1c5b0:	1029883a 	mov	r20,r2
   1c5b4:	9dffffcc 	andi	r23,r19,65535
   1c5b8:	000ce080 	call	ce08 <__udivsi3>
   1c5bc:	b809883a 	mov	r4,r23
   1c5c0:	100b883a 	mov	r5,r2
   1c5c4:	000cec40 	call	cec4 <__mulsi3>
   1c5c8:	a008943a 	slli	r4,r20,16
   1c5cc:	a806d43a 	srli	r3,r21,16
   1c5d0:	84a8983a 	sll	r20,r16,r18
   1c5d4:	1906b03a 	or	r3,r3,r4
   1c5d8:	1880042e 	bgeu	r3,r2,1c5ec <__umoddi3+0x500>
   1c5dc:	1cc7883a 	add	r3,r3,r19
   1c5e0:	1cc00236 	bltu	r3,r19,1c5ec <__umoddi3+0x500>
   1c5e4:	1880012e 	bgeu	r3,r2,1c5ec <__umoddi3+0x500>
   1c5e8:	1cc7883a 	add	r3,r3,r19
   1c5ec:	18a3c83a 	sub	r17,r3,r2
   1c5f0:	b00b883a 	mov	r5,r22
   1c5f4:	8809883a 	mov	r4,r17
   1c5f8:	000ce6c0 	call	ce6c <__umodsi3>
   1c5fc:	b00b883a 	mov	r5,r22
   1c600:	8809883a 	mov	r4,r17
   1c604:	1021883a 	mov	r16,r2
   1c608:	000ce080 	call	ce08 <__udivsi3>
   1c60c:	100b883a 	mov	r5,r2
   1c610:	b809883a 	mov	r4,r23
   1c614:	8020943a 	slli	r16,r16,16
   1c618:	000cec40 	call	cec4 <__mulsi3>
   1c61c:	a8ffffcc 	andi	r3,r21,65535
   1c620:	1c06b03a 	or	r3,r3,r16
   1c624:	1880042e 	bgeu	r3,r2,1c638 <__umoddi3+0x54c>
   1c628:	1cc7883a 	add	r3,r3,r19
   1c62c:	1cc00236 	bltu	r3,r19,1c638 <__umoddi3+0x54c>
   1c630:	1880012e 	bgeu	r3,r2,1c638 <__umoddi3+0x54c>
   1c634:	1cc7883a 	add	r3,r3,r19
   1c638:	18a3c83a 	sub	r17,r3,r2
   1c63c:	003f2906 	br	1c2e4 <__alt_data_end+0xfc01c2e4>
   1c640:	e48fc83a 	sub	r7,fp,r18
   1c644:	1d49c83a 	sub	r4,r3,r21
   1c648:	e1f9803a 	cmpltu	fp,fp,r7
   1c64c:	2739c83a 	sub	fp,r4,fp
   1c650:	8f09c83a 	sub	r4,r17,fp
   1c654:	003fc306 	br	1c564 <__alt_data_end+0xfc01c564>
   1c658:	01000604 	movi	r4,24
   1c65c:	003ef906 	br	1c244 <__alt_data_end+0xfc01c244>
   1c660:	00800604 	movi	r2,24
   1c664:	003f1306 	br	1c2b4 <__alt_data_end+0xfc01c2b4>
   1c668:	01000604 	movi	r4,24
   1c66c:	003eb606 	br	1c148 <__alt_data_end+0xfc01c148>
   1c670:	40bf902e 	bgeu	r8,r2,1c4b4 <__alt_data_end+0xfc01c4b4>
   1c674:	b5bfff84 	addi	r22,r22,-2
   1c678:	4551883a 	add	r8,r8,r21
   1c67c:	003f8e06 	br	1c4b8 <__alt_data_end+0xfc01c4b8>
   1c680:	18bf762e 	bgeu	r3,r2,1c45c <__alt_data_end+0xfc01c45c>
   1c684:	8c7fff84 	addi	r17,r17,-2
   1c688:	1d47883a 	add	r3,r3,r21
   1c68c:	003f7406 	br	1c460 <__alt_data_end+0xfc01c460>
   1c690:	1cc7883a 	add	r3,r3,r19
   1c694:	003ecd06 	br	1c1cc <__alt_data_end+0xfc01c1cc>
   1c698:	8005883a 	mov	r2,r16
   1c69c:	003ef806 	br	1c280 <__alt_data_end+0xfc01c280>
   1c6a0:	873fe736 	bltu	r16,fp,1c640 <__alt_data_end+0xfc01c640>
   1c6a4:	e00f883a 	mov	r7,fp
   1c6a8:	0009883a 	mov	r4,zero
   1c6ac:	003fad06 	br	1c564 <__alt_data_end+0xfc01c564>

0001c6b0 <__adddf3>:
   1c6b0:	02c00434 	movhi	r11,16
   1c6b4:	5affffc4 	addi	r11,r11,-1
   1c6b8:	2806d7fa 	srli	r3,r5,31
   1c6bc:	2ad4703a 	and	r10,r5,r11
   1c6c0:	3ad2703a 	and	r9,r7,r11
   1c6c4:	3804d53a 	srli	r2,r7,20
   1c6c8:	3018d77a 	srli	r12,r6,29
   1c6cc:	280ad53a 	srli	r5,r5,20
   1c6d0:	501490fa 	slli	r10,r10,3
   1c6d4:	2010d77a 	srli	r8,r4,29
   1c6d8:	481290fa 	slli	r9,r9,3
   1c6dc:	380ed7fa 	srli	r7,r7,31
   1c6e0:	defffb04 	addi	sp,sp,-20
   1c6e4:	dc800215 	stw	r18,8(sp)
   1c6e8:	dc400115 	stw	r17,4(sp)
   1c6ec:	dc000015 	stw	r16,0(sp)
   1c6f0:	dfc00415 	stw	ra,16(sp)
   1c6f4:	dcc00315 	stw	r19,12(sp)
   1c6f8:	1c803fcc 	andi	r18,r3,255
   1c6fc:	2c01ffcc 	andi	r16,r5,2047
   1c700:	5210b03a 	or	r8,r10,r8
   1c704:	202290fa 	slli	r17,r4,3
   1c708:	1081ffcc 	andi	r2,r2,2047
   1c70c:	4b12b03a 	or	r9,r9,r12
   1c710:	300c90fa 	slli	r6,r6,3
   1c714:	91c07526 	beq	r18,r7,1c8ec <__adddf3+0x23c>
   1c718:	8087c83a 	sub	r3,r16,r2
   1c71c:	00c0ab0e 	bge	zero,r3,1c9cc <__adddf3+0x31c>
   1c720:	10002a1e 	bne	r2,zero,1c7cc <__adddf3+0x11c>
   1c724:	4984b03a 	or	r2,r9,r6
   1c728:	1000961e 	bne	r2,zero,1c984 <__adddf3+0x2d4>
   1c72c:	888001cc 	andi	r2,r17,7
   1c730:	10000726 	beq	r2,zero,1c750 <__adddf3+0xa0>
   1c734:	888003cc 	andi	r2,r17,15
   1c738:	00c00104 	movi	r3,4
   1c73c:	10c00426 	beq	r2,r3,1c750 <__adddf3+0xa0>
   1c740:	88c7883a 	add	r3,r17,r3
   1c744:	1c63803a 	cmpltu	r17,r3,r17
   1c748:	4451883a 	add	r8,r8,r17
   1c74c:	1823883a 	mov	r17,r3
   1c750:	4080202c 	andhi	r2,r8,128
   1c754:	10005926 	beq	r2,zero,1c8bc <__adddf3+0x20c>
   1c758:	84000044 	addi	r16,r16,1
   1c75c:	0081ffc4 	movi	r2,2047
   1c760:	8080ba26 	beq	r16,r2,1ca4c <__adddf3+0x39c>
   1c764:	00bfe034 	movhi	r2,65408
   1c768:	10bfffc4 	addi	r2,r2,-1
   1c76c:	4090703a 	and	r8,r8,r2
   1c770:	4004977a 	slli	r2,r8,29
   1c774:	4010927a 	slli	r8,r8,9
   1c778:	8822d0fa 	srli	r17,r17,3
   1c77c:	8401ffcc 	andi	r16,r16,2047
   1c780:	4010d33a 	srli	r8,r8,12
   1c784:	9007883a 	mov	r3,r18
   1c788:	1444b03a 	or	r2,r2,r17
   1c78c:	8401ffcc 	andi	r16,r16,2047
   1c790:	8020953a 	slli	r16,r16,20
   1c794:	18c03fcc 	andi	r3,r3,255
   1c798:	01000434 	movhi	r4,16
   1c79c:	213fffc4 	addi	r4,r4,-1
   1c7a0:	180697fa 	slli	r3,r3,31
   1c7a4:	4110703a 	and	r8,r8,r4
   1c7a8:	4410b03a 	or	r8,r8,r16
   1c7ac:	40c6b03a 	or	r3,r8,r3
   1c7b0:	dfc00417 	ldw	ra,16(sp)
   1c7b4:	dcc00317 	ldw	r19,12(sp)
   1c7b8:	dc800217 	ldw	r18,8(sp)
   1c7bc:	dc400117 	ldw	r17,4(sp)
   1c7c0:	dc000017 	ldw	r16,0(sp)
   1c7c4:	dec00504 	addi	sp,sp,20
   1c7c8:	f800283a 	ret
   1c7cc:	0081ffc4 	movi	r2,2047
   1c7d0:	80bfd626 	beq	r16,r2,1c72c <__alt_data_end+0xfc01c72c>
   1c7d4:	4a402034 	orhi	r9,r9,128
   1c7d8:	00800e04 	movi	r2,56
   1c7dc:	10c09f16 	blt	r2,r3,1ca5c <__adddf3+0x3ac>
   1c7e0:	008007c4 	movi	r2,31
   1c7e4:	10c0c216 	blt	r2,r3,1caf0 <__adddf3+0x440>
   1c7e8:	00800804 	movi	r2,32
   1c7ec:	10c5c83a 	sub	r2,r2,r3
   1c7f0:	488a983a 	sll	r5,r9,r2
   1c7f4:	30c8d83a 	srl	r4,r6,r3
   1c7f8:	3084983a 	sll	r2,r6,r2
   1c7fc:	48c6d83a 	srl	r3,r9,r3
   1c800:	290cb03a 	or	r6,r5,r4
   1c804:	1004c03a 	cmpne	r2,r2,zero
   1c808:	308cb03a 	or	r6,r6,r2
   1c80c:	898dc83a 	sub	r6,r17,r6
   1c810:	89a3803a 	cmpltu	r17,r17,r6
   1c814:	40d1c83a 	sub	r8,r8,r3
   1c818:	4451c83a 	sub	r8,r8,r17
   1c81c:	3023883a 	mov	r17,r6
   1c820:	4080202c 	andhi	r2,r8,128
   1c824:	10002326 	beq	r2,zero,1c8b4 <__adddf3+0x204>
   1c828:	04c02034 	movhi	r19,128
   1c82c:	9cffffc4 	addi	r19,r19,-1
   1c830:	44e6703a 	and	r19,r8,r19
   1c834:	98007626 	beq	r19,zero,1ca10 <__adddf3+0x360>
   1c838:	9809883a 	mov	r4,r19
   1c83c:	000e37c0 	call	e37c <__clzsi2>
   1c840:	10fffe04 	addi	r3,r2,-8
   1c844:	010007c4 	movi	r4,31
   1c848:	20c07716 	blt	r4,r3,1ca28 <__adddf3+0x378>
   1c84c:	00800804 	movi	r2,32
   1c850:	10c5c83a 	sub	r2,r2,r3
   1c854:	8884d83a 	srl	r2,r17,r2
   1c858:	98d0983a 	sll	r8,r19,r3
   1c85c:	88e2983a 	sll	r17,r17,r3
   1c860:	1204b03a 	or	r2,r2,r8
   1c864:	1c007416 	blt	r3,r16,1ca38 <__adddf3+0x388>
   1c868:	1c21c83a 	sub	r16,r3,r16
   1c86c:	82000044 	addi	r8,r16,1
   1c870:	00c007c4 	movi	r3,31
   1c874:	1a009116 	blt	r3,r8,1cabc <__adddf3+0x40c>
   1c878:	00c00804 	movi	r3,32
   1c87c:	1a07c83a 	sub	r3,r3,r8
   1c880:	8a08d83a 	srl	r4,r17,r8
   1c884:	88e2983a 	sll	r17,r17,r3
   1c888:	10c6983a 	sll	r3,r2,r3
   1c88c:	1210d83a 	srl	r8,r2,r8
   1c890:	8804c03a 	cmpne	r2,r17,zero
   1c894:	1906b03a 	or	r3,r3,r4
   1c898:	18a2b03a 	or	r17,r3,r2
   1c89c:	0021883a 	mov	r16,zero
   1c8a0:	003fa206 	br	1c72c <__alt_data_end+0xfc01c72c>
   1c8a4:	1890b03a 	or	r8,r3,r2
   1c8a8:	40017d26 	beq	r8,zero,1cea0 <__adddf3+0x7f0>
   1c8ac:	1011883a 	mov	r8,r2
   1c8b0:	1823883a 	mov	r17,r3
   1c8b4:	888001cc 	andi	r2,r17,7
   1c8b8:	103f9e1e 	bne	r2,zero,1c734 <__alt_data_end+0xfc01c734>
   1c8bc:	4004977a 	slli	r2,r8,29
   1c8c0:	8822d0fa 	srli	r17,r17,3
   1c8c4:	4010d0fa 	srli	r8,r8,3
   1c8c8:	9007883a 	mov	r3,r18
   1c8cc:	1444b03a 	or	r2,r2,r17
   1c8d0:	0101ffc4 	movi	r4,2047
   1c8d4:	81002426 	beq	r16,r4,1c968 <__adddf3+0x2b8>
   1c8d8:	8120703a 	and	r16,r16,r4
   1c8dc:	01000434 	movhi	r4,16
   1c8e0:	213fffc4 	addi	r4,r4,-1
   1c8e4:	4110703a 	and	r8,r8,r4
   1c8e8:	003fa806 	br	1c78c <__alt_data_end+0xfc01c78c>
   1c8ec:	8089c83a 	sub	r4,r16,r2
   1c8f0:	01005e0e 	bge	zero,r4,1ca6c <__adddf3+0x3bc>
   1c8f4:	10002b26 	beq	r2,zero,1c9a4 <__adddf3+0x2f4>
   1c8f8:	0081ffc4 	movi	r2,2047
   1c8fc:	80bf8b26 	beq	r16,r2,1c72c <__alt_data_end+0xfc01c72c>
   1c900:	4a402034 	orhi	r9,r9,128
   1c904:	00800e04 	movi	r2,56
   1c908:	1100a40e 	bge	r2,r4,1cb9c <__adddf3+0x4ec>
   1c90c:	498cb03a 	or	r6,r9,r6
   1c910:	300ac03a 	cmpne	r5,r6,zero
   1c914:	0013883a 	mov	r9,zero
   1c918:	2c4b883a 	add	r5,r5,r17
   1c91c:	2c63803a 	cmpltu	r17,r5,r17
   1c920:	4a11883a 	add	r8,r9,r8
   1c924:	8a11883a 	add	r8,r17,r8
   1c928:	2823883a 	mov	r17,r5
   1c92c:	4080202c 	andhi	r2,r8,128
   1c930:	103fe026 	beq	r2,zero,1c8b4 <__alt_data_end+0xfc01c8b4>
   1c934:	84000044 	addi	r16,r16,1
   1c938:	0081ffc4 	movi	r2,2047
   1c93c:	8080d226 	beq	r16,r2,1cc88 <__adddf3+0x5d8>
   1c940:	00bfe034 	movhi	r2,65408
   1c944:	10bfffc4 	addi	r2,r2,-1
   1c948:	4090703a 	and	r8,r8,r2
   1c94c:	880ad07a 	srli	r5,r17,1
   1c950:	400897fa 	slli	r4,r8,31
   1c954:	88c0004c 	andi	r3,r17,1
   1c958:	28e2b03a 	or	r17,r5,r3
   1c95c:	4010d07a 	srli	r8,r8,1
   1c960:	2462b03a 	or	r17,r4,r17
   1c964:	003f7106 	br	1c72c <__alt_data_end+0xfc01c72c>
   1c968:	4088b03a 	or	r4,r8,r2
   1c96c:	20014526 	beq	r4,zero,1ce84 <__adddf3+0x7d4>
   1c970:	01000434 	movhi	r4,16
   1c974:	42000234 	orhi	r8,r8,8
   1c978:	213fffc4 	addi	r4,r4,-1
   1c97c:	4110703a 	and	r8,r8,r4
   1c980:	003f8206 	br	1c78c <__alt_data_end+0xfc01c78c>
   1c984:	18ffffc4 	addi	r3,r3,-1
   1c988:	1800491e 	bne	r3,zero,1cab0 <__adddf3+0x400>
   1c98c:	898bc83a 	sub	r5,r17,r6
   1c990:	8963803a 	cmpltu	r17,r17,r5
   1c994:	4251c83a 	sub	r8,r8,r9
   1c998:	4451c83a 	sub	r8,r8,r17
   1c99c:	2823883a 	mov	r17,r5
   1c9a0:	003f9f06 	br	1c820 <__alt_data_end+0xfc01c820>
   1c9a4:	4984b03a 	or	r2,r9,r6
   1c9a8:	103f6026 	beq	r2,zero,1c72c <__alt_data_end+0xfc01c72c>
   1c9ac:	213fffc4 	addi	r4,r4,-1
   1c9b0:	2000931e 	bne	r4,zero,1cc00 <__adddf3+0x550>
   1c9b4:	898d883a 	add	r6,r17,r6
   1c9b8:	3463803a 	cmpltu	r17,r6,r17
   1c9bc:	4251883a 	add	r8,r8,r9
   1c9c0:	8a11883a 	add	r8,r17,r8
   1c9c4:	3023883a 	mov	r17,r6
   1c9c8:	003fd806 	br	1c92c <__alt_data_end+0xfc01c92c>
   1c9cc:	1800541e 	bne	r3,zero,1cb20 <__adddf3+0x470>
   1c9d0:	80800044 	addi	r2,r16,1
   1c9d4:	1081ffcc 	andi	r2,r2,2047
   1c9d8:	00c00044 	movi	r3,1
   1c9dc:	1880a00e 	bge	r3,r2,1cc60 <__adddf3+0x5b0>
   1c9e0:	8989c83a 	sub	r4,r17,r6
   1c9e4:	8905803a 	cmpltu	r2,r17,r4
   1c9e8:	4267c83a 	sub	r19,r8,r9
   1c9ec:	98a7c83a 	sub	r19,r19,r2
   1c9f0:	9880202c 	andhi	r2,r19,128
   1c9f4:	10006326 	beq	r2,zero,1cb84 <__adddf3+0x4d4>
   1c9f8:	3463c83a 	sub	r17,r6,r17
   1c9fc:	4a07c83a 	sub	r3,r9,r8
   1ca00:	344d803a 	cmpltu	r6,r6,r17
   1ca04:	19a7c83a 	sub	r19,r3,r6
   1ca08:	3825883a 	mov	r18,r7
   1ca0c:	983f8a1e 	bne	r19,zero,1c838 <__alt_data_end+0xfc01c838>
   1ca10:	8809883a 	mov	r4,r17
   1ca14:	000e37c0 	call	e37c <__clzsi2>
   1ca18:	10800804 	addi	r2,r2,32
   1ca1c:	10fffe04 	addi	r3,r2,-8
   1ca20:	010007c4 	movi	r4,31
   1ca24:	20ff890e 	bge	r4,r3,1c84c <__alt_data_end+0xfc01c84c>
   1ca28:	10bff604 	addi	r2,r2,-40
   1ca2c:	8884983a 	sll	r2,r17,r2
   1ca30:	0023883a 	mov	r17,zero
   1ca34:	1c3f8c0e 	bge	r3,r16,1c868 <__alt_data_end+0xfc01c868>
   1ca38:	023fe034 	movhi	r8,65408
   1ca3c:	423fffc4 	addi	r8,r8,-1
   1ca40:	80e1c83a 	sub	r16,r16,r3
   1ca44:	1210703a 	and	r8,r2,r8
   1ca48:	003f3806 	br	1c72c <__alt_data_end+0xfc01c72c>
   1ca4c:	9007883a 	mov	r3,r18
   1ca50:	0011883a 	mov	r8,zero
   1ca54:	0005883a 	mov	r2,zero
   1ca58:	003f4c06 	br	1c78c <__alt_data_end+0xfc01c78c>
   1ca5c:	498cb03a 	or	r6,r9,r6
   1ca60:	300cc03a 	cmpne	r6,r6,zero
   1ca64:	0007883a 	mov	r3,zero
   1ca68:	003f6806 	br	1c80c <__alt_data_end+0xfc01c80c>
   1ca6c:	20009c1e 	bne	r4,zero,1cce0 <__adddf3+0x630>
   1ca70:	80800044 	addi	r2,r16,1
   1ca74:	1141ffcc 	andi	r5,r2,2047
   1ca78:	01000044 	movi	r4,1
   1ca7c:	2140670e 	bge	r4,r5,1cc1c <__adddf3+0x56c>
   1ca80:	0101ffc4 	movi	r4,2047
   1ca84:	11007f26 	beq	r2,r4,1cc84 <__adddf3+0x5d4>
   1ca88:	898d883a 	add	r6,r17,r6
   1ca8c:	4247883a 	add	r3,r8,r9
   1ca90:	3451803a 	cmpltu	r8,r6,r17
   1ca94:	40d1883a 	add	r8,r8,r3
   1ca98:	402297fa 	slli	r17,r8,31
   1ca9c:	300cd07a 	srli	r6,r6,1
   1caa0:	4010d07a 	srli	r8,r8,1
   1caa4:	1021883a 	mov	r16,r2
   1caa8:	89a2b03a 	or	r17,r17,r6
   1caac:	003f1f06 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cab0:	0081ffc4 	movi	r2,2047
   1cab4:	80bf481e 	bne	r16,r2,1c7d8 <__alt_data_end+0xfc01c7d8>
   1cab8:	003f1c06 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cabc:	843ff844 	addi	r16,r16,-31
   1cac0:	01000804 	movi	r4,32
   1cac4:	1406d83a 	srl	r3,r2,r16
   1cac8:	41005026 	beq	r8,r4,1cc0c <__adddf3+0x55c>
   1cacc:	01001004 	movi	r4,64
   1cad0:	2211c83a 	sub	r8,r4,r8
   1cad4:	1204983a 	sll	r2,r2,r8
   1cad8:	88a2b03a 	or	r17,r17,r2
   1cadc:	8822c03a 	cmpne	r17,r17,zero
   1cae0:	1c62b03a 	or	r17,r3,r17
   1cae4:	0011883a 	mov	r8,zero
   1cae8:	0021883a 	mov	r16,zero
   1caec:	003f7106 	br	1c8b4 <__alt_data_end+0xfc01c8b4>
   1caf0:	193ff804 	addi	r4,r3,-32
   1caf4:	00800804 	movi	r2,32
   1caf8:	4908d83a 	srl	r4,r9,r4
   1cafc:	18804526 	beq	r3,r2,1cc14 <__adddf3+0x564>
   1cb00:	00801004 	movi	r2,64
   1cb04:	10c5c83a 	sub	r2,r2,r3
   1cb08:	4886983a 	sll	r3,r9,r2
   1cb0c:	198cb03a 	or	r6,r3,r6
   1cb10:	300cc03a 	cmpne	r6,r6,zero
   1cb14:	218cb03a 	or	r6,r4,r6
   1cb18:	0007883a 	mov	r3,zero
   1cb1c:	003f3b06 	br	1c80c <__alt_data_end+0xfc01c80c>
   1cb20:	80002a26 	beq	r16,zero,1cbcc <__adddf3+0x51c>
   1cb24:	0101ffc4 	movi	r4,2047
   1cb28:	11006826 	beq	r2,r4,1cccc <__adddf3+0x61c>
   1cb2c:	00c7c83a 	sub	r3,zero,r3
   1cb30:	42002034 	orhi	r8,r8,128
   1cb34:	01000e04 	movi	r4,56
   1cb38:	20c07c16 	blt	r4,r3,1cd2c <__adddf3+0x67c>
   1cb3c:	010007c4 	movi	r4,31
   1cb40:	20c0da16 	blt	r4,r3,1ceac <__adddf3+0x7fc>
   1cb44:	01000804 	movi	r4,32
   1cb48:	20c9c83a 	sub	r4,r4,r3
   1cb4c:	4114983a 	sll	r10,r8,r4
   1cb50:	88cad83a 	srl	r5,r17,r3
   1cb54:	8908983a 	sll	r4,r17,r4
   1cb58:	40c6d83a 	srl	r3,r8,r3
   1cb5c:	5162b03a 	or	r17,r10,r5
   1cb60:	2008c03a 	cmpne	r4,r4,zero
   1cb64:	8922b03a 	or	r17,r17,r4
   1cb68:	3463c83a 	sub	r17,r6,r17
   1cb6c:	48c7c83a 	sub	r3,r9,r3
   1cb70:	344d803a 	cmpltu	r6,r6,r17
   1cb74:	1991c83a 	sub	r8,r3,r6
   1cb78:	1021883a 	mov	r16,r2
   1cb7c:	3825883a 	mov	r18,r7
   1cb80:	003f2706 	br	1c820 <__alt_data_end+0xfc01c820>
   1cb84:	24d0b03a 	or	r8,r4,r19
   1cb88:	40001b1e 	bne	r8,zero,1cbf8 <__adddf3+0x548>
   1cb8c:	0005883a 	mov	r2,zero
   1cb90:	0007883a 	mov	r3,zero
   1cb94:	0021883a 	mov	r16,zero
   1cb98:	003f4d06 	br	1c8d0 <__alt_data_end+0xfc01c8d0>
   1cb9c:	008007c4 	movi	r2,31
   1cba0:	11003c16 	blt	r2,r4,1cc94 <__adddf3+0x5e4>
   1cba4:	00800804 	movi	r2,32
   1cba8:	1105c83a 	sub	r2,r2,r4
   1cbac:	488e983a 	sll	r7,r9,r2
   1cbb0:	310ad83a 	srl	r5,r6,r4
   1cbb4:	3084983a 	sll	r2,r6,r2
   1cbb8:	4912d83a 	srl	r9,r9,r4
   1cbbc:	394ab03a 	or	r5,r7,r5
   1cbc0:	1004c03a 	cmpne	r2,r2,zero
   1cbc4:	288ab03a 	or	r5,r5,r2
   1cbc8:	003f5306 	br	1c918 <__alt_data_end+0xfc01c918>
   1cbcc:	4448b03a 	or	r4,r8,r17
   1cbd0:	20003e26 	beq	r4,zero,1cccc <__adddf3+0x61c>
   1cbd4:	00c6303a 	nor	r3,zero,r3
   1cbd8:	18003a1e 	bne	r3,zero,1ccc4 <__adddf3+0x614>
   1cbdc:	3463c83a 	sub	r17,r6,r17
   1cbe0:	4a07c83a 	sub	r3,r9,r8
   1cbe4:	344d803a 	cmpltu	r6,r6,r17
   1cbe8:	1991c83a 	sub	r8,r3,r6
   1cbec:	1021883a 	mov	r16,r2
   1cbf0:	3825883a 	mov	r18,r7
   1cbf4:	003f0a06 	br	1c820 <__alt_data_end+0xfc01c820>
   1cbf8:	2023883a 	mov	r17,r4
   1cbfc:	003f0d06 	br	1c834 <__alt_data_end+0xfc01c834>
   1cc00:	0081ffc4 	movi	r2,2047
   1cc04:	80bf3f1e 	bne	r16,r2,1c904 <__alt_data_end+0xfc01c904>
   1cc08:	003ec806 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cc0c:	0005883a 	mov	r2,zero
   1cc10:	003fb106 	br	1cad8 <__alt_data_end+0xfc01cad8>
   1cc14:	0007883a 	mov	r3,zero
   1cc18:	003fbc06 	br	1cb0c <__alt_data_end+0xfc01cb0c>
   1cc1c:	4444b03a 	or	r2,r8,r17
   1cc20:	8000871e 	bne	r16,zero,1ce40 <__adddf3+0x790>
   1cc24:	1000ba26 	beq	r2,zero,1cf10 <__adddf3+0x860>
   1cc28:	4984b03a 	or	r2,r9,r6
   1cc2c:	103ebf26 	beq	r2,zero,1c72c <__alt_data_end+0xfc01c72c>
   1cc30:	8985883a 	add	r2,r17,r6
   1cc34:	4247883a 	add	r3,r8,r9
   1cc38:	1451803a 	cmpltu	r8,r2,r17
   1cc3c:	40d1883a 	add	r8,r8,r3
   1cc40:	40c0202c 	andhi	r3,r8,128
   1cc44:	1023883a 	mov	r17,r2
   1cc48:	183f1a26 	beq	r3,zero,1c8b4 <__alt_data_end+0xfc01c8b4>
   1cc4c:	00bfe034 	movhi	r2,65408
   1cc50:	10bfffc4 	addi	r2,r2,-1
   1cc54:	2021883a 	mov	r16,r4
   1cc58:	4090703a 	and	r8,r8,r2
   1cc5c:	003eb306 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cc60:	4444b03a 	or	r2,r8,r17
   1cc64:	8000291e 	bne	r16,zero,1cd0c <__adddf3+0x65c>
   1cc68:	10004b1e 	bne	r2,zero,1cd98 <__adddf3+0x6e8>
   1cc6c:	4990b03a 	or	r8,r9,r6
   1cc70:	40008b26 	beq	r8,zero,1cea0 <__adddf3+0x7f0>
   1cc74:	4811883a 	mov	r8,r9
   1cc78:	3023883a 	mov	r17,r6
   1cc7c:	3825883a 	mov	r18,r7
   1cc80:	003eaa06 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cc84:	1021883a 	mov	r16,r2
   1cc88:	0011883a 	mov	r8,zero
   1cc8c:	0005883a 	mov	r2,zero
   1cc90:	003f0f06 	br	1c8d0 <__alt_data_end+0xfc01c8d0>
   1cc94:	217ff804 	addi	r5,r4,-32
   1cc98:	00800804 	movi	r2,32
   1cc9c:	494ad83a 	srl	r5,r9,r5
   1cca0:	20807d26 	beq	r4,r2,1ce98 <__adddf3+0x7e8>
   1cca4:	00801004 	movi	r2,64
   1cca8:	1109c83a 	sub	r4,r2,r4
   1ccac:	4912983a 	sll	r9,r9,r4
   1ccb0:	498cb03a 	or	r6,r9,r6
   1ccb4:	300cc03a 	cmpne	r6,r6,zero
   1ccb8:	298ab03a 	or	r5,r5,r6
   1ccbc:	0013883a 	mov	r9,zero
   1ccc0:	003f1506 	br	1c918 <__alt_data_end+0xfc01c918>
   1ccc4:	0101ffc4 	movi	r4,2047
   1ccc8:	113f9a1e 	bne	r2,r4,1cb34 <__alt_data_end+0xfc01cb34>
   1cccc:	4811883a 	mov	r8,r9
   1ccd0:	3023883a 	mov	r17,r6
   1ccd4:	1021883a 	mov	r16,r2
   1ccd8:	3825883a 	mov	r18,r7
   1ccdc:	003e9306 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cce0:	8000161e 	bne	r16,zero,1cd3c <__adddf3+0x68c>
   1cce4:	444ab03a 	or	r5,r8,r17
   1cce8:	28005126 	beq	r5,zero,1ce30 <__adddf3+0x780>
   1ccec:	0108303a 	nor	r4,zero,r4
   1ccf0:	20004d1e 	bne	r4,zero,1ce28 <__adddf3+0x778>
   1ccf4:	89a3883a 	add	r17,r17,r6
   1ccf8:	4253883a 	add	r9,r8,r9
   1ccfc:	898d803a 	cmpltu	r6,r17,r6
   1cd00:	3251883a 	add	r8,r6,r9
   1cd04:	1021883a 	mov	r16,r2
   1cd08:	003f0806 	br	1c92c <__alt_data_end+0xfc01c92c>
   1cd0c:	1000301e 	bne	r2,zero,1cdd0 <__adddf3+0x720>
   1cd10:	4984b03a 	or	r2,r9,r6
   1cd14:	10007126 	beq	r2,zero,1cedc <__adddf3+0x82c>
   1cd18:	4811883a 	mov	r8,r9
   1cd1c:	3023883a 	mov	r17,r6
   1cd20:	3825883a 	mov	r18,r7
   1cd24:	0401ffc4 	movi	r16,2047
   1cd28:	003e8006 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cd2c:	4462b03a 	or	r17,r8,r17
   1cd30:	8822c03a 	cmpne	r17,r17,zero
   1cd34:	0007883a 	mov	r3,zero
   1cd38:	003f8b06 	br	1cb68 <__alt_data_end+0xfc01cb68>
   1cd3c:	0141ffc4 	movi	r5,2047
   1cd40:	11403b26 	beq	r2,r5,1ce30 <__adddf3+0x780>
   1cd44:	0109c83a 	sub	r4,zero,r4
   1cd48:	42002034 	orhi	r8,r8,128
   1cd4c:	01400e04 	movi	r5,56
   1cd50:	29006716 	blt	r5,r4,1cef0 <__adddf3+0x840>
   1cd54:	014007c4 	movi	r5,31
   1cd58:	29007016 	blt	r5,r4,1cf1c <__adddf3+0x86c>
   1cd5c:	01400804 	movi	r5,32
   1cd60:	290bc83a 	sub	r5,r5,r4
   1cd64:	4154983a 	sll	r10,r8,r5
   1cd68:	890ed83a 	srl	r7,r17,r4
   1cd6c:	894a983a 	sll	r5,r17,r5
   1cd70:	4108d83a 	srl	r4,r8,r4
   1cd74:	51e2b03a 	or	r17,r10,r7
   1cd78:	280ac03a 	cmpne	r5,r5,zero
   1cd7c:	8962b03a 	or	r17,r17,r5
   1cd80:	89a3883a 	add	r17,r17,r6
   1cd84:	2253883a 	add	r9,r4,r9
   1cd88:	898d803a 	cmpltu	r6,r17,r6
   1cd8c:	3251883a 	add	r8,r6,r9
   1cd90:	1021883a 	mov	r16,r2
   1cd94:	003ee506 	br	1c92c <__alt_data_end+0xfc01c92c>
   1cd98:	4984b03a 	or	r2,r9,r6
   1cd9c:	103e6326 	beq	r2,zero,1c72c <__alt_data_end+0xfc01c72c>
   1cda0:	8987c83a 	sub	r3,r17,r6
   1cda4:	88c9803a 	cmpltu	r4,r17,r3
   1cda8:	4245c83a 	sub	r2,r8,r9
   1cdac:	1105c83a 	sub	r2,r2,r4
   1cdb0:	1100202c 	andhi	r4,r2,128
   1cdb4:	203ebb26 	beq	r4,zero,1c8a4 <__alt_data_end+0xfc01c8a4>
   1cdb8:	3463c83a 	sub	r17,r6,r17
   1cdbc:	4a07c83a 	sub	r3,r9,r8
   1cdc0:	344d803a 	cmpltu	r6,r6,r17
   1cdc4:	1991c83a 	sub	r8,r3,r6
   1cdc8:	3825883a 	mov	r18,r7
   1cdcc:	003e5706 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cdd0:	4984b03a 	or	r2,r9,r6
   1cdd4:	10002e26 	beq	r2,zero,1ce90 <__adddf3+0x7e0>
   1cdd8:	4004d0fa 	srli	r2,r8,3
   1cddc:	8822d0fa 	srli	r17,r17,3
   1cde0:	4010977a 	slli	r8,r8,29
   1cde4:	10c0022c 	andhi	r3,r2,8
   1cde8:	4462b03a 	or	r17,r8,r17
   1cdec:	18000826 	beq	r3,zero,1ce10 <__adddf3+0x760>
   1cdf0:	4808d0fa 	srli	r4,r9,3
   1cdf4:	20c0022c 	andhi	r3,r4,8
   1cdf8:	1800051e 	bne	r3,zero,1ce10 <__adddf3+0x760>
   1cdfc:	300cd0fa 	srli	r6,r6,3
   1ce00:	4806977a 	slli	r3,r9,29
   1ce04:	2005883a 	mov	r2,r4
   1ce08:	3825883a 	mov	r18,r7
   1ce0c:	19a2b03a 	or	r17,r3,r6
   1ce10:	8810d77a 	srli	r8,r17,29
   1ce14:	100490fa 	slli	r2,r2,3
   1ce18:	882290fa 	slli	r17,r17,3
   1ce1c:	0401ffc4 	movi	r16,2047
   1ce20:	4090b03a 	or	r8,r8,r2
   1ce24:	003e4106 	br	1c72c <__alt_data_end+0xfc01c72c>
   1ce28:	0141ffc4 	movi	r5,2047
   1ce2c:	117fc71e 	bne	r2,r5,1cd4c <__alt_data_end+0xfc01cd4c>
   1ce30:	4811883a 	mov	r8,r9
   1ce34:	3023883a 	mov	r17,r6
   1ce38:	1021883a 	mov	r16,r2
   1ce3c:	003e3b06 	br	1c72c <__alt_data_end+0xfc01c72c>
   1ce40:	10002f26 	beq	r2,zero,1cf00 <__adddf3+0x850>
   1ce44:	4984b03a 	or	r2,r9,r6
   1ce48:	10001126 	beq	r2,zero,1ce90 <__adddf3+0x7e0>
   1ce4c:	4004d0fa 	srli	r2,r8,3
   1ce50:	8822d0fa 	srli	r17,r17,3
   1ce54:	4010977a 	slli	r8,r8,29
   1ce58:	10c0022c 	andhi	r3,r2,8
   1ce5c:	4462b03a 	or	r17,r8,r17
   1ce60:	183feb26 	beq	r3,zero,1ce10 <__alt_data_end+0xfc01ce10>
   1ce64:	4808d0fa 	srli	r4,r9,3
   1ce68:	20c0022c 	andhi	r3,r4,8
   1ce6c:	183fe81e 	bne	r3,zero,1ce10 <__alt_data_end+0xfc01ce10>
   1ce70:	300cd0fa 	srli	r6,r6,3
   1ce74:	4806977a 	slli	r3,r9,29
   1ce78:	2005883a 	mov	r2,r4
   1ce7c:	19a2b03a 	or	r17,r3,r6
   1ce80:	003fe306 	br	1ce10 <__alt_data_end+0xfc01ce10>
   1ce84:	0011883a 	mov	r8,zero
   1ce88:	0005883a 	mov	r2,zero
   1ce8c:	003e3f06 	br	1c78c <__alt_data_end+0xfc01c78c>
   1ce90:	0401ffc4 	movi	r16,2047
   1ce94:	003e2506 	br	1c72c <__alt_data_end+0xfc01c72c>
   1ce98:	0013883a 	mov	r9,zero
   1ce9c:	003f8406 	br	1ccb0 <__alt_data_end+0xfc01ccb0>
   1cea0:	0005883a 	mov	r2,zero
   1cea4:	0007883a 	mov	r3,zero
   1cea8:	003e8906 	br	1c8d0 <__alt_data_end+0xfc01c8d0>
   1ceac:	197ff804 	addi	r5,r3,-32
   1ceb0:	01000804 	movi	r4,32
   1ceb4:	414ad83a 	srl	r5,r8,r5
   1ceb8:	19002426 	beq	r3,r4,1cf4c <__adddf3+0x89c>
   1cebc:	01001004 	movi	r4,64
   1cec0:	20c7c83a 	sub	r3,r4,r3
   1cec4:	40c6983a 	sll	r3,r8,r3
   1cec8:	1c46b03a 	or	r3,r3,r17
   1cecc:	1806c03a 	cmpne	r3,r3,zero
   1ced0:	28e2b03a 	or	r17,r5,r3
   1ced4:	0007883a 	mov	r3,zero
   1ced8:	003f2306 	br	1cb68 <__alt_data_end+0xfc01cb68>
   1cedc:	0007883a 	mov	r3,zero
   1cee0:	5811883a 	mov	r8,r11
   1cee4:	00bfffc4 	movi	r2,-1
   1cee8:	0401ffc4 	movi	r16,2047
   1ceec:	003e7806 	br	1c8d0 <__alt_data_end+0xfc01c8d0>
   1cef0:	4462b03a 	or	r17,r8,r17
   1cef4:	8822c03a 	cmpne	r17,r17,zero
   1cef8:	0009883a 	mov	r4,zero
   1cefc:	003fa006 	br	1cd80 <__alt_data_end+0xfc01cd80>
   1cf00:	4811883a 	mov	r8,r9
   1cf04:	3023883a 	mov	r17,r6
   1cf08:	0401ffc4 	movi	r16,2047
   1cf0c:	003e0706 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cf10:	4811883a 	mov	r8,r9
   1cf14:	3023883a 	mov	r17,r6
   1cf18:	003e0406 	br	1c72c <__alt_data_end+0xfc01c72c>
   1cf1c:	21fff804 	addi	r7,r4,-32
   1cf20:	01400804 	movi	r5,32
   1cf24:	41ced83a 	srl	r7,r8,r7
   1cf28:	21400a26 	beq	r4,r5,1cf54 <__adddf3+0x8a4>
   1cf2c:	01401004 	movi	r5,64
   1cf30:	2909c83a 	sub	r4,r5,r4
   1cf34:	4108983a 	sll	r4,r8,r4
   1cf38:	2448b03a 	or	r4,r4,r17
   1cf3c:	2008c03a 	cmpne	r4,r4,zero
   1cf40:	3922b03a 	or	r17,r7,r4
   1cf44:	0009883a 	mov	r4,zero
   1cf48:	003f8d06 	br	1cd80 <__alt_data_end+0xfc01cd80>
   1cf4c:	0007883a 	mov	r3,zero
   1cf50:	003fdd06 	br	1cec8 <__alt_data_end+0xfc01cec8>
   1cf54:	0009883a 	mov	r4,zero
   1cf58:	003ff706 	br	1cf38 <__alt_data_end+0xfc01cf38>

0001cf5c <__divdf3>:
   1cf5c:	defff004 	addi	sp,sp,-64
   1cf60:	dc800815 	stw	r18,32(sp)
   1cf64:	2824d53a 	srli	r18,r5,20
   1cf68:	dd800c15 	stw	r22,48(sp)
   1cf6c:	282cd7fa 	srli	r22,r5,31
   1cf70:	dc000615 	stw	r16,24(sp)
   1cf74:	04000434 	movhi	r16,16
   1cf78:	843fffc4 	addi	r16,r16,-1
   1cf7c:	dfc00f15 	stw	ra,60(sp)
   1cf80:	df000e15 	stw	fp,56(sp)
   1cf84:	ddc00d15 	stw	r23,52(sp)
   1cf88:	dd400b15 	stw	r21,44(sp)
   1cf8c:	dd000a15 	stw	r20,40(sp)
   1cf90:	dcc00915 	stw	r19,36(sp)
   1cf94:	dc400715 	stw	r17,28(sp)
   1cf98:	9481ffcc 	andi	r18,r18,2047
   1cf9c:	2c20703a 	and	r16,r5,r16
   1cfa0:	b2003fcc 	andi	r8,r22,255
   1cfa4:	90006126 	beq	r18,zero,1d12c <__divdf3+0x1d0>
   1cfa8:	0081ffc4 	movi	r2,2047
   1cfac:	202b883a 	mov	r21,r4
   1cfb0:	90803726 	beq	r18,r2,1d090 <__divdf3+0x134>
   1cfb4:	80800434 	orhi	r2,r16,16
   1cfb8:	100490fa 	slli	r2,r2,3
   1cfbc:	2020d77a 	srli	r16,r4,29
   1cfc0:	202a90fa 	slli	r21,r4,3
   1cfc4:	94bf0044 	addi	r18,r18,-1023
   1cfc8:	80a0b03a 	or	r16,r16,r2
   1cfcc:	0013883a 	mov	r9,zero
   1cfd0:	000b883a 	mov	r5,zero
   1cfd4:	3806d53a 	srli	r3,r7,20
   1cfd8:	382ed7fa 	srli	r23,r7,31
   1cfdc:	04400434 	movhi	r17,16
   1cfe0:	8c7fffc4 	addi	r17,r17,-1
   1cfe4:	18c1ffcc 	andi	r3,r3,2047
   1cfe8:	3029883a 	mov	r20,r6
   1cfec:	3c62703a 	and	r17,r7,r17
   1cff0:	bf003fcc 	andi	fp,r23,255
   1cff4:	18006e26 	beq	r3,zero,1d1b0 <__divdf3+0x254>
   1cff8:	0081ffc4 	movi	r2,2047
   1cffc:	18806626 	beq	r3,r2,1d198 <__divdf3+0x23c>
   1d000:	88800434 	orhi	r2,r17,16
   1d004:	100490fa 	slli	r2,r2,3
   1d008:	3022d77a 	srli	r17,r6,29
   1d00c:	302890fa 	slli	r20,r6,3
   1d010:	18ff0044 	addi	r3,r3,-1023
   1d014:	88a2b03a 	or	r17,r17,r2
   1d018:	000f883a 	mov	r7,zero
   1d01c:	b5e6f03a 	xor	r19,r22,r23
   1d020:	3a4cb03a 	or	r6,r7,r9
   1d024:	008003c4 	movi	r2,15
   1d028:	9809883a 	mov	r4,r19
   1d02c:	90c7c83a 	sub	r3,r18,r3
   1d030:	9cc03fcc 	andi	r19,r19,255
   1d034:	11809636 	bltu	r2,r6,1d290 <__divdf3+0x334>
   1d038:	300c90ba 	slli	r6,r6,2
   1d03c:	008000b4 	movhi	r2,2
   1d040:	10b41404 	addi	r2,r2,-12208
   1d044:	308d883a 	add	r6,r6,r2
   1d048:	30800017 	ldw	r2,0(r6)
   1d04c:	1000683a 	jmp	r2
   1d050:	0001d290 	cmplti	zero,zero,1866
   1d054:	0001d0c8 	cmpgei	zero,zero,1859
   1d058:	0001d280 	call	1d28 <_ZN3USB17DefaultAddressingEhhb+0x11c>
   1d05c:	0001d0bc 	xorhi	zero,zero,1858
   1d060:	0001d280 	call	1d28 <_ZN3USB17DefaultAddressingEhhb+0x11c>
   1d064:	0001d254 	movui	zero,1865
   1d068:	0001d280 	call	1d28 <_ZN3USB17DefaultAddressingEhhb+0x11c>
   1d06c:	0001d0bc 	xorhi	zero,zero,1858
   1d070:	0001d0c8 	cmpgei	zero,zero,1859
   1d074:	0001d0c8 	cmpgei	zero,zero,1859
   1d078:	0001d254 	movui	zero,1865
   1d07c:	0001d0bc 	xorhi	zero,zero,1858
   1d080:	0001d0ac 	andhi	zero,zero,1858
   1d084:	0001d0ac 	andhi	zero,zero,1858
   1d088:	0001d0ac 	andhi	zero,zero,1858
   1d08c:	0001d618 	cmpnei	zero,zero,1880
   1d090:	2404b03a 	or	r2,r4,r16
   1d094:	10006c1e 	bne	r2,zero,1d248 <__divdf3+0x2ec>
   1d098:	02400204 	movi	r9,8
   1d09c:	0021883a 	mov	r16,zero
   1d0a0:	002b883a 	mov	r21,zero
   1d0a4:	01400084 	movi	r5,2
   1d0a8:	003fca06 	br	1cfd4 <__alt_data_end+0xfc01cfd4>
   1d0ac:	8023883a 	mov	r17,r16
   1d0b0:	a829883a 	mov	r20,r21
   1d0b4:	4039883a 	mov	fp,r8
   1d0b8:	280f883a 	mov	r7,r5
   1d0bc:	00800084 	movi	r2,2
   1d0c0:	3881601e 	bne	r7,r2,1d644 <__divdf3+0x6e8>
   1d0c4:	e027883a 	mov	r19,fp
   1d0c8:	9900004c 	andi	r4,r19,1
   1d0cc:	0081ffc4 	movi	r2,2047
   1d0d0:	0021883a 	mov	r16,zero
   1d0d4:	002b883a 	mov	r21,zero
   1d0d8:	1004953a 	slli	r2,r2,20
   1d0dc:	20c03fcc 	andi	r3,r4,255
   1d0e0:	01400434 	movhi	r5,16
   1d0e4:	297fffc4 	addi	r5,r5,-1
   1d0e8:	180697fa 	slli	r3,r3,31
   1d0ec:	8160703a 	and	r16,r16,r5
   1d0f0:	80a0b03a 	or	r16,r16,r2
   1d0f4:	80c6b03a 	or	r3,r16,r3
   1d0f8:	a805883a 	mov	r2,r21
   1d0fc:	dfc00f17 	ldw	ra,60(sp)
   1d100:	df000e17 	ldw	fp,56(sp)
   1d104:	ddc00d17 	ldw	r23,52(sp)
   1d108:	dd800c17 	ldw	r22,48(sp)
   1d10c:	dd400b17 	ldw	r21,44(sp)
   1d110:	dd000a17 	ldw	r20,40(sp)
   1d114:	dcc00917 	ldw	r19,36(sp)
   1d118:	dc800817 	ldw	r18,32(sp)
   1d11c:	dc400717 	ldw	r17,28(sp)
   1d120:	dc000617 	ldw	r16,24(sp)
   1d124:	dec01004 	addi	sp,sp,64
   1d128:	f800283a 	ret
   1d12c:	2404b03a 	or	r2,r4,r16
   1d130:	2023883a 	mov	r17,r4
   1d134:	10003f26 	beq	r2,zero,1d234 <__divdf3+0x2d8>
   1d138:	80015e26 	beq	r16,zero,1d6b4 <__divdf3+0x758>
   1d13c:	8009883a 	mov	r4,r16
   1d140:	d9800215 	stw	r6,8(sp)
   1d144:	d9c00515 	stw	r7,20(sp)
   1d148:	da000415 	stw	r8,16(sp)
   1d14c:	000e37c0 	call	e37c <__clzsi2>
   1d150:	d9800217 	ldw	r6,8(sp)
   1d154:	d9c00517 	ldw	r7,20(sp)
   1d158:	da000417 	ldw	r8,16(sp)
   1d15c:	113ffd44 	addi	r4,r2,-11
   1d160:	00c00704 	movi	r3,28
   1d164:	19014f16 	blt	r3,r4,1d6a4 <__divdf3+0x748>
   1d168:	00c00744 	movi	r3,29
   1d16c:	157ffe04 	addi	r21,r2,-8
   1d170:	1907c83a 	sub	r3,r3,r4
   1d174:	8560983a 	sll	r16,r16,r21
   1d178:	88c6d83a 	srl	r3,r17,r3
   1d17c:	8d6a983a 	sll	r21,r17,r21
   1d180:	1c20b03a 	or	r16,r3,r16
   1d184:	1080fcc4 	addi	r2,r2,1011
   1d188:	00a5c83a 	sub	r18,zero,r2
   1d18c:	0013883a 	mov	r9,zero
   1d190:	000b883a 	mov	r5,zero
   1d194:	003f8f06 	br	1cfd4 <__alt_data_end+0xfc01cfd4>
   1d198:	3444b03a 	or	r2,r6,r17
   1d19c:	1000231e 	bne	r2,zero,1d22c <__divdf3+0x2d0>
   1d1a0:	0023883a 	mov	r17,zero
   1d1a4:	0029883a 	mov	r20,zero
   1d1a8:	01c00084 	movi	r7,2
   1d1ac:	003f9b06 	br	1d01c <__alt_data_end+0xfc01d01c>
   1d1b0:	3444b03a 	or	r2,r6,r17
   1d1b4:	10001926 	beq	r2,zero,1d21c <__divdf3+0x2c0>
   1d1b8:	88014b26 	beq	r17,zero,1d6e8 <__divdf3+0x78c>
   1d1bc:	8809883a 	mov	r4,r17
   1d1c0:	d9400115 	stw	r5,4(sp)
   1d1c4:	d9800215 	stw	r6,8(sp)
   1d1c8:	da000415 	stw	r8,16(sp)
   1d1cc:	da400315 	stw	r9,12(sp)
   1d1d0:	000e37c0 	call	e37c <__clzsi2>
   1d1d4:	d9400117 	ldw	r5,4(sp)
   1d1d8:	d9800217 	ldw	r6,8(sp)
   1d1dc:	da000417 	ldw	r8,16(sp)
   1d1e0:	da400317 	ldw	r9,12(sp)
   1d1e4:	113ffd44 	addi	r4,r2,-11
   1d1e8:	00c00704 	movi	r3,28
   1d1ec:	19013a16 	blt	r3,r4,1d6d8 <__divdf3+0x77c>
   1d1f0:	00c00744 	movi	r3,29
   1d1f4:	153ffe04 	addi	r20,r2,-8
   1d1f8:	1907c83a 	sub	r3,r3,r4
   1d1fc:	8d22983a 	sll	r17,r17,r20
   1d200:	30c6d83a 	srl	r3,r6,r3
   1d204:	3528983a 	sll	r20,r6,r20
   1d208:	1c62b03a 	or	r17,r3,r17
   1d20c:	1080fcc4 	addi	r2,r2,1011
   1d210:	0087c83a 	sub	r3,zero,r2
   1d214:	000f883a 	mov	r7,zero
   1d218:	003f8006 	br	1d01c <__alt_data_end+0xfc01d01c>
   1d21c:	0023883a 	mov	r17,zero
   1d220:	0029883a 	mov	r20,zero
   1d224:	01c00044 	movi	r7,1
   1d228:	003f7c06 	br	1d01c <__alt_data_end+0xfc01d01c>
   1d22c:	01c000c4 	movi	r7,3
   1d230:	003f7a06 	br	1d01c <__alt_data_end+0xfc01d01c>
   1d234:	02400104 	movi	r9,4
   1d238:	0021883a 	mov	r16,zero
   1d23c:	002b883a 	mov	r21,zero
   1d240:	01400044 	movi	r5,1
   1d244:	003f6306 	br	1cfd4 <__alt_data_end+0xfc01cfd4>
   1d248:	02400304 	movi	r9,12
   1d24c:	014000c4 	movi	r5,3
   1d250:	003f6006 	br	1cfd4 <__alt_data_end+0xfc01cfd4>
   1d254:	04000434 	movhi	r16,16
   1d258:	0009883a 	mov	r4,zero
   1d25c:	843fffc4 	addi	r16,r16,-1
   1d260:	057fffc4 	movi	r21,-1
   1d264:	0081ffc4 	movi	r2,2047
   1d268:	003f9b06 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d26c:	00c00044 	movi	r3,1
   1d270:	1887c83a 	sub	r3,r3,r2
   1d274:	01000e04 	movi	r4,56
   1d278:	20c1530e 	bge	r4,r3,1d7c8 <__divdf3+0x86c>
   1d27c:	9900004c 	andi	r4,r19,1
   1d280:	0005883a 	mov	r2,zero
   1d284:	0021883a 	mov	r16,zero
   1d288:	002b883a 	mov	r21,zero
   1d28c:	003f9206 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d290:	8c012e36 	bltu	r17,r16,1d74c <__divdf3+0x7f0>
   1d294:	84412c26 	beq	r16,r17,1d748 <__divdf3+0x7ec>
   1d298:	a82f883a 	mov	r23,r21
   1d29c:	18ffffc4 	addi	r3,r3,-1
   1d2a0:	002b883a 	mov	r21,zero
   1d2a4:	a004d63a 	srli	r2,r20,24
   1d2a8:	8822923a 	slli	r17,r17,8
   1d2ac:	a028923a 	slli	r20,r20,8
   1d2b0:	8009883a 	mov	r4,r16
   1d2b4:	88acb03a 	or	r22,r17,r2
   1d2b8:	dd000015 	stw	r20,0(sp)
   1d2bc:	b028d43a 	srli	r20,r22,16
   1d2c0:	d8c00215 	stw	r3,8(sp)
   1d2c4:	b4bfffcc 	andi	r18,r22,65535
   1d2c8:	a00b883a 	mov	r5,r20
   1d2cc:	000ce080 	call	ce08 <__udivsi3>
   1d2d0:	100b883a 	mov	r5,r2
   1d2d4:	9009883a 	mov	r4,r18
   1d2d8:	1023883a 	mov	r17,r2
   1d2dc:	000cec40 	call	cec4 <__mulsi3>
   1d2e0:	8009883a 	mov	r4,r16
   1d2e4:	a00b883a 	mov	r5,r20
   1d2e8:	1039883a 	mov	fp,r2
   1d2ec:	000ce6c0 	call	ce6c <__umodsi3>
   1d2f0:	1004943a 	slli	r2,r2,16
   1d2f4:	b808d43a 	srli	r4,r23,16
   1d2f8:	d8c00217 	ldw	r3,8(sp)
   1d2fc:	2084b03a 	or	r2,r4,r2
   1d300:	1700062e 	bgeu	r2,fp,1d31c <__divdf3+0x3c0>
   1d304:	1585883a 	add	r2,r2,r22
   1d308:	893fffc4 	addi	r4,r17,-1
   1d30c:	15811d36 	bltu	r2,r22,1d784 <__divdf3+0x828>
   1d310:	17011c2e 	bgeu	r2,fp,1d784 <__divdf3+0x828>
   1d314:	8c7fff84 	addi	r17,r17,-2
   1d318:	1585883a 	add	r2,r2,r22
   1d31c:	1739c83a 	sub	fp,r2,fp
   1d320:	a00b883a 	mov	r5,r20
   1d324:	e009883a 	mov	r4,fp
   1d328:	d8c00215 	stw	r3,8(sp)
   1d32c:	000ce080 	call	ce08 <__udivsi3>
   1d330:	100b883a 	mov	r5,r2
   1d334:	9009883a 	mov	r4,r18
   1d338:	1021883a 	mov	r16,r2
   1d33c:	000cec40 	call	cec4 <__mulsi3>
   1d340:	a00b883a 	mov	r5,r20
   1d344:	e009883a 	mov	r4,fp
   1d348:	d8800415 	stw	r2,16(sp)
   1d34c:	000ce6c0 	call	ce6c <__umodsi3>
   1d350:	1004943a 	slli	r2,r2,16
   1d354:	da000417 	ldw	r8,16(sp)
   1d358:	bdffffcc 	andi	r23,r23,65535
   1d35c:	b884b03a 	or	r2,r23,r2
   1d360:	d8c00217 	ldw	r3,8(sp)
   1d364:	1200062e 	bgeu	r2,r8,1d380 <__divdf3+0x424>
   1d368:	1585883a 	add	r2,r2,r22
   1d36c:	813fffc4 	addi	r4,r16,-1
   1d370:	15810236 	bltu	r2,r22,1d77c <__divdf3+0x820>
   1d374:	1201012e 	bgeu	r2,r8,1d77c <__divdf3+0x820>
   1d378:	843fff84 	addi	r16,r16,-2
   1d37c:	1585883a 	add	r2,r2,r22
   1d380:	8822943a 	slli	r17,r17,16
   1d384:	d9800017 	ldw	r6,0(sp)
   1d388:	1211c83a 	sub	r8,r2,r8
   1d38c:	8c22b03a 	or	r17,r17,r16
   1d390:	373fffcc 	andi	fp,r6,65535
   1d394:	8abfffcc 	andi	r10,r17,65535
   1d398:	8820d43a 	srli	r16,r17,16
   1d39c:	5009883a 	mov	r4,r10
   1d3a0:	e00b883a 	mov	r5,fp
   1d3a4:	302ed43a 	srli	r23,r6,16
   1d3a8:	d8c00215 	stw	r3,8(sp)
   1d3ac:	da000415 	stw	r8,16(sp)
   1d3b0:	da800115 	stw	r10,4(sp)
   1d3b4:	000cec40 	call	cec4 <__mulsi3>
   1d3b8:	800b883a 	mov	r5,r16
   1d3bc:	e009883a 	mov	r4,fp
   1d3c0:	d8800515 	stw	r2,20(sp)
   1d3c4:	000cec40 	call	cec4 <__mulsi3>
   1d3c8:	8009883a 	mov	r4,r16
   1d3cc:	b80b883a 	mov	r5,r23
   1d3d0:	d8800315 	stw	r2,12(sp)
   1d3d4:	000cec40 	call	cec4 <__mulsi3>
   1d3d8:	da800117 	ldw	r10,4(sp)
   1d3dc:	b80b883a 	mov	r5,r23
   1d3e0:	1021883a 	mov	r16,r2
   1d3e4:	5009883a 	mov	r4,r10
   1d3e8:	000cec40 	call	cec4 <__mulsi3>
   1d3ec:	d9c00517 	ldw	r7,20(sp)
   1d3f0:	da400317 	ldw	r9,12(sp)
   1d3f4:	d8c00217 	ldw	r3,8(sp)
   1d3f8:	3808d43a 	srli	r4,r7,16
   1d3fc:	1245883a 	add	r2,r2,r9
   1d400:	da000417 	ldw	r8,16(sp)
   1d404:	2085883a 	add	r2,r4,r2
   1d408:	1240022e 	bgeu	r2,r9,1d414 <__divdf3+0x4b8>
   1d40c:	01000074 	movhi	r4,1
   1d410:	8121883a 	add	r16,r16,r4
   1d414:	1008d43a 	srli	r4,r2,16
   1d418:	1004943a 	slli	r2,r2,16
   1d41c:	39ffffcc 	andi	r7,r7,65535
   1d420:	2409883a 	add	r4,r4,r16
   1d424:	11c5883a 	add	r2,r2,r7
   1d428:	4100bb36 	bltu	r8,r4,1d718 <__divdf3+0x7bc>
   1d42c:	4100d726 	beq	r8,r4,1d78c <__divdf3+0x830>
   1d430:	4109c83a 	sub	r4,r8,r4
   1d434:	a8a1c83a 	sub	r16,r21,r2
   1d438:	ac2b803a 	cmpltu	r21,r21,r16
   1d43c:	256bc83a 	sub	r21,r4,r21
   1d440:	b540d926 	beq	r22,r21,1d7a8 <__divdf3+0x84c>
   1d444:	a00b883a 	mov	r5,r20
   1d448:	a809883a 	mov	r4,r21
   1d44c:	d8c00215 	stw	r3,8(sp)
   1d450:	000ce080 	call	ce08 <__udivsi3>
   1d454:	100b883a 	mov	r5,r2
   1d458:	9009883a 	mov	r4,r18
   1d45c:	d8800515 	stw	r2,20(sp)
   1d460:	000cec40 	call	cec4 <__mulsi3>
   1d464:	a809883a 	mov	r4,r21
   1d468:	a00b883a 	mov	r5,r20
   1d46c:	d8800415 	stw	r2,16(sp)
   1d470:	000ce6c0 	call	ce6c <__umodsi3>
   1d474:	1004943a 	slli	r2,r2,16
   1d478:	8008d43a 	srli	r4,r16,16
   1d47c:	da000417 	ldw	r8,16(sp)
   1d480:	d8c00217 	ldw	r3,8(sp)
   1d484:	2084b03a 	or	r2,r4,r2
   1d488:	d9c00517 	ldw	r7,20(sp)
   1d48c:	1200062e 	bgeu	r2,r8,1d4a8 <__divdf3+0x54c>
   1d490:	1585883a 	add	r2,r2,r22
   1d494:	393fffc4 	addi	r4,r7,-1
   1d498:	1580c536 	bltu	r2,r22,1d7b0 <__divdf3+0x854>
   1d49c:	1200c42e 	bgeu	r2,r8,1d7b0 <__divdf3+0x854>
   1d4a0:	39ffff84 	addi	r7,r7,-2
   1d4a4:	1585883a 	add	r2,r2,r22
   1d4a8:	122bc83a 	sub	r21,r2,r8
   1d4ac:	a00b883a 	mov	r5,r20
   1d4b0:	a809883a 	mov	r4,r21
   1d4b4:	d8c00215 	stw	r3,8(sp)
   1d4b8:	d9c00515 	stw	r7,20(sp)
   1d4bc:	000ce080 	call	ce08 <__udivsi3>
   1d4c0:	9009883a 	mov	r4,r18
   1d4c4:	100b883a 	mov	r5,r2
   1d4c8:	d8800415 	stw	r2,16(sp)
   1d4cc:	000cec40 	call	cec4 <__mulsi3>
   1d4d0:	a809883a 	mov	r4,r21
   1d4d4:	a00b883a 	mov	r5,r20
   1d4d8:	1025883a 	mov	r18,r2
   1d4dc:	000ce6c0 	call	ce6c <__umodsi3>
   1d4e0:	1004943a 	slli	r2,r2,16
   1d4e4:	813fffcc 	andi	r4,r16,65535
   1d4e8:	d8c00217 	ldw	r3,8(sp)
   1d4ec:	20a0b03a 	or	r16,r4,r2
   1d4f0:	d9c00517 	ldw	r7,20(sp)
   1d4f4:	da000417 	ldw	r8,16(sp)
   1d4f8:	8480062e 	bgeu	r16,r18,1d514 <__divdf3+0x5b8>
   1d4fc:	85a1883a 	add	r16,r16,r22
   1d500:	40bfffc4 	addi	r2,r8,-1
   1d504:	8580ac36 	bltu	r16,r22,1d7b8 <__divdf3+0x85c>
   1d508:	8480ab2e 	bgeu	r16,r18,1d7b8 <__divdf3+0x85c>
   1d50c:	423fff84 	addi	r8,r8,-2
   1d510:	85a1883a 	add	r16,r16,r22
   1d514:	3804943a 	slli	r2,r7,16
   1d518:	84a1c83a 	sub	r16,r16,r18
   1d51c:	e009883a 	mov	r4,fp
   1d520:	1228b03a 	or	r20,r2,r8
   1d524:	a1ffffcc 	andi	r7,r20,65535
   1d528:	a024d43a 	srli	r18,r20,16
   1d52c:	380b883a 	mov	r5,r7
   1d530:	d8c00215 	stw	r3,8(sp)
   1d534:	d9c00515 	stw	r7,20(sp)
   1d538:	000cec40 	call	cec4 <__mulsi3>
   1d53c:	900b883a 	mov	r5,r18
   1d540:	e009883a 	mov	r4,fp
   1d544:	102b883a 	mov	r21,r2
   1d548:	000cec40 	call	cec4 <__mulsi3>
   1d54c:	900b883a 	mov	r5,r18
   1d550:	b809883a 	mov	r4,r23
   1d554:	1039883a 	mov	fp,r2
   1d558:	000cec40 	call	cec4 <__mulsi3>
   1d55c:	d9c00517 	ldw	r7,20(sp)
   1d560:	b80b883a 	mov	r5,r23
   1d564:	1025883a 	mov	r18,r2
   1d568:	3809883a 	mov	r4,r7
   1d56c:	000cec40 	call	cec4 <__mulsi3>
   1d570:	a808d43a 	srli	r4,r21,16
   1d574:	1705883a 	add	r2,r2,fp
   1d578:	d8c00217 	ldw	r3,8(sp)
   1d57c:	2085883a 	add	r2,r4,r2
   1d580:	1700022e 	bgeu	r2,fp,1d58c <__divdf3+0x630>
   1d584:	01000074 	movhi	r4,1
   1d588:	9125883a 	add	r18,r18,r4
   1d58c:	1008d43a 	srli	r4,r2,16
   1d590:	1004943a 	slli	r2,r2,16
   1d594:	ad7fffcc 	andi	r21,r21,65535
   1d598:	2489883a 	add	r4,r4,r18
   1d59c:	1545883a 	add	r2,r2,r21
   1d5a0:	81003836 	bltu	r16,r4,1d684 <__divdf3+0x728>
   1d5a4:	81003626 	beq	r16,r4,1d680 <__divdf3+0x724>
   1d5a8:	a5000054 	ori	r20,r20,1
   1d5ac:	1880ffc4 	addi	r2,r3,1023
   1d5b0:	00bf2e0e 	bge	zero,r2,1d26c <__alt_data_end+0xfc01d26c>
   1d5b4:	a10001cc 	andi	r4,r20,7
   1d5b8:	20000726 	beq	r4,zero,1d5d8 <__divdf3+0x67c>
   1d5bc:	a10003cc 	andi	r4,r20,15
   1d5c0:	01400104 	movi	r5,4
   1d5c4:	21400426 	beq	r4,r5,1d5d8 <__divdf3+0x67c>
   1d5c8:	a149883a 	add	r4,r20,r5
   1d5cc:	2529803a 	cmpltu	r20,r4,r20
   1d5d0:	8d23883a 	add	r17,r17,r20
   1d5d4:	2029883a 	mov	r20,r4
   1d5d8:	8900402c 	andhi	r4,r17,256
   1d5dc:	20000426 	beq	r4,zero,1d5f0 <__divdf3+0x694>
   1d5e0:	18810004 	addi	r2,r3,1024
   1d5e4:	00ffc034 	movhi	r3,65280
   1d5e8:	18ffffc4 	addi	r3,r3,-1
   1d5ec:	88e2703a 	and	r17,r17,r3
   1d5f0:	00c1ff84 	movi	r3,2046
   1d5f4:	18beb416 	blt	r3,r2,1d0c8 <__alt_data_end+0xfc01d0c8>
   1d5f8:	a028d0fa 	srli	r20,r20,3
   1d5fc:	882a977a 	slli	r21,r17,29
   1d600:	8820927a 	slli	r16,r17,9
   1d604:	1081ffcc 	andi	r2,r2,2047
   1d608:	ad2ab03a 	or	r21,r21,r20
   1d60c:	8020d33a 	srli	r16,r16,12
   1d610:	9900004c 	andi	r4,r19,1
   1d614:	003eb006 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d618:	8080022c 	andhi	r2,r16,8
   1d61c:	10001226 	beq	r2,zero,1d668 <__divdf3+0x70c>
   1d620:	8880022c 	andhi	r2,r17,8
   1d624:	1000101e 	bne	r2,zero,1d668 <__divdf3+0x70c>
   1d628:	00800434 	movhi	r2,16
   1d62c:	8c000234 	orhi	r16,r17,8
   1d630:	10bfffc4 	addi	r2,r2,-1
   1d634:	b809883a 	mov	r4,r23
   1d638:	80a0703a 	and	r16,r16,r2
   1d63c:	a02b883a 	mov	r21,r20
   1d640:	003f0806 	br	1d264 <__alt_data_end+0xfc01d264>
   1d644:	008000c4 	movi	r2,3
   1d648:	3880b126 	beq	r7,r2,1d910 <__divdf3+0x9b4>
   1d64c:	00800044 	movi	r2,1
   1d650:	38805b1e 	bne	r7,r2,1d7c0 <__divdf3+0x864>
   1d654:	e009883a 	mov	r4,fp
   1d658:	0005883a 	mov	r2,zero
   1d65c:	0021883a 	mov	r16,zero
   1d660:	002b883a 	mov	r21,zero
   1d664:	003e9c06 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d668:	00800434 	movhi	r2,16
   1d66c:	84000234 	orhi	r16,r16,8
   1d670:	10bfffc4 	addi	r2,r2,-1
   1d674:	b009883a 	mov	r4,r22
   1d678:	80a0703a 	and	r16,r16,r2
   1d67c:	003ef906 	br	1d264 <__alt_data_end+0xfc01d264>
   1d680:	103fca26 	beq	r2,zero,1d5ac <__alt_data_end+0xfc01d5ac>
   1d684:	b421883a 	add	r16,r22,r16
   1d688:	a17fffc4 	addi	r5,r20,-1
   1d68c:	8580422e 	bgeu	r16,r22,1d798 <__divdf3+0x83c>
   1d690:	2829883a 	mov	r20,r5
   1d694:	813fc41e 	bne	r16,r4,1d5a8 <__alt_data_end+0xfc01d5a8>
   1d698:	d9800017 	ldw	r6,0(sp)
   1d69c:	30bfc21e 	bne	r6,r2,1d5a8 <__alt_data_end+0xfc01d5a8>
   1d6a0:	003fc206 	br	1d5ac <__alt_data_end+0xfc01d5ac>
   1d6a4:	143ff604 	addi	r16,r2,-40
   1d6a8:	8c20983a 	sll	r16,r17,r16
   1d6ac:	002b883a 	mov	r21,zero
   1d6b0:	003eb406 	br	1d184 <__alt_data_end+0xfc01d184>
   1d6b4:	d9800215 	stw	r6,8(sp)
   1d6b8:	d9c00515 	stw	r7,20(sp)
   1d6bc:	da000415 	stw	r8,16(sp)
   1d6c0:	000e37c0 	call	e37c <__clzsi2>
   1d6c4:	10800804 	addi	r2,r2,32
   1d6c8:	da000417 	ldw	r8,16(sp)
   1d6cc:	d9c00517 	ldw	r7,20(sp)
   1d6d0:	d9800217 	ldw	r6,8(sp)
   1d6d4:	003ea106 	br	1d15c <__alt_data_end+0xfc01d15c>
   1d6d8:	147ff604 	addi	r17,r2,-40
   1d6dc:	3462983a 	sll	r17,r6,r17
   1d6e0:	0029883a 	mov	r20,zero
   1d6e4:	003ec906 	br	1d20c <__alt_data_end+0xfc01d20c>
   1d6e8:	3009883a 	mov	r4,r6
   1d6ec:	d9400115 	stw	r5,4(sp)
   1d6f0:	d9800215 	stw	r6,8(sp)
   1d6f4:	da000415 	stw	r8,16(sp)
   1d6f8:	da400315 	stw	r9,12(sp)
   1d6fc:	000e37c0 	call	e37c <__clzsi2>
   1d700:	10800804 	addi	r2,r2,32
   1d704:	da400317 	ldw	r9,12(sp)
   1d708:	da000417 	ldw	r8,16(sp)
   1d70c:	d9800217 	ldw	r6,8(sp)
   1d710:	d9400117 	ldw	r5,4(sp)
   1d714:	003eb306 	br	1d1e4 <__alt_data_end+0xfc01d1e4>
   1d718:	d9800017 	ldw	r6,0(sp)
   1d71c:	a9ab883a 	add	r21,r21,r6
   1d720:	a98b803a 	cmpltu	r5,r21,r6
   1d724:	2d8b883a 	add	r5,r5,r22
   1d728:	2a11883a 	add	r8,r5,r8
   1d72c:	897fffc4 	addi	r5,r17,-1
   1d730:	b2000c2e 	bgeu	r22,r8,1d764 <__divdf3+0x808>
   1d734:	41003f36 	bltu	r8,r4,1d834 <__divdf3+0x8d8>
   1d738:	22006c26 	beq	r4,r8,1d8ec <__divdf3+0x990>
   1d73c:	4109c83a 	sub	r4,r8,r4
   1d740:	2823883a 	mov	r17,r5
   1d744:	003f3b06 	br	1d434 <__alt_data_end+0xfc01d434>
   1d748:	ad3ed336 	bltu	r21,r20,1d298 <__alt_data_end+0xfc01d298>
   1d74c:	a804d07a 	srli	r2,r21,1
   1d750:	802e97fa 	slli	r23,r16,31
   1d754:	a82a97fa 	slli	r21,r21,31
   1d758:	8020d07a 	srli	r16,r16,1
   1d75c:	b8aeb03a 	or	r23,r23,r2
   1d760:	003ed006 	br	1d2a4 <__alt_data_end+0xfc01d2a4>
   1d764:	b23ff51e 	bne	r22,r8,1d73c <__alt_data_end+0xfc01d73c>
   1d768:	d9800017 	ldw	r6,0(sp)
   1d76c:	a9bff12e 	bgeu	r21,r6,1d734 <__alt_data_end+0xfc01d734>
   1d770:	b109c83a 	sub	r4,r22,r4
   1d774:	2823883a 	mov	r17,r5
   1d778:	003f2e06 	br	1d434 <__alt_data_end+0xfc01d434>
   1d77c:	2021883a 	mov	r16,r4
   1d780:	003eff06 	br	1d380 <__alt_data_end+0xfc01d380>
   1d784:	2023883a 	mov	r17,r4
   1d788:	003ee406 	br	1d31c <__alt_data_end+0xfc01d31c>
   1d78c:	a8bfe236 	bltu	r21,r2,1d718 <__alt_data_end+0xfc01d718>
   1d790:	0009883a 	mov	r4,zero
   1d794:	003f2706 	br	1d434 <__alt_data_end+0xfc01d434>
   1d798:	81002d36 	bltu	r16,r4,1d850 <__divdf3+0x8f4>
   1d79c:	24005626 	beq	r4,r16,1d8f8 <__divdf3+0x99c>
   1d7a0:	2829883a 	mov	r20,r5
   1d7a4:	003f8006 	br	1d5a8 <__alt_data_end+0xfc01d5a8>
   1d7a8:	053fffc4 	movi	r20,-1
   1d7ac:	003f7f06 	br	1d5ac <__alt_data_end+0xfc01d5ac>
   1d7b0:	200f883a 	mov	r7,r4
   1d7b4:	003f3c06 	br	1d4a8 <__alt_data_end+0xfc01d4a8>
   1d7b8:	1011883a 	mov	r8,r2
   1d7bc:	003f5506 	br	1d514 <__alt_data_end+0xfc01d514>
   1d7c0:	e027883a 	mov	r19,fp
   1d7c4:	003f7906 	br	1d5ac <__alt_data_end+0xfc01d5ac>
   1d7c8:	010007c4 	movi	r4,31
   1d7cc:	20c02816 	blt	r4,r3,1d870 <__divdf3+0x914>
   1d7d0:	00800804 	movi	r2,32
   1d7d4:	10c5c83a 	sub	r2,r2,r3
   1d7d8:	888a983a 	sll	r5,r17,r2
   1d7dc:	a0c8d83a 	srl	r4,r20,r3
   1d7e0:	a084983a 	sll	r2,r20,r2
   1d7e4:	88e2d83a 	srl	r17,r17,r3
   1d7e8:	2906b03a 	or	r3,r5,r4
   1d7ec:	1004c03a 	cmpne	r2,r2,zero
   1d7f0:	1886b03a 	or	r3,r3,r2
   1d7f4:	188001cc 	andi	r2,r3,7
   1d7f8:	10000726 	beq	r2,zero,1d818 <__divdf3+0x8bc>
   1d7fc:	188003cc 	andi	r2,r3,15
   1d800:	01000104 	movi	r4,4
   1d804:	11000426 	beq	r2,r4,1d818 <__divdf3+0x8bc>
   1d808:	1805883a 	mov	r2,r3
   1d80c:	10c00104 	addi	r3,r2,4
   1d810:	1885803a 	cmpltu	r2,r3,r2
   1d814:	88a3883a 	add	r17,r17,r2
   1d818:	8880202c 	andhi	r2,r17,128
   1d81c:	10002926 	beq	r2,zero,1d8c4 <__divdf3+0x968>
   1d820:	9900004c 	andi	r4,r19,1
   1d824:	00800044 	movi	r2,1
   1d828:	0021883a 	mov	r16,zero
   1d82c:	002b883a 	mov	r21,zero
   1d830:	003e2906 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d834:	d9800017 	ldw	r6,0(sp)
   1d838:	8c7fff84 	addi	r17,r17,-2
   1d83c:	a9ab883a 	add	r21,r21,r6
   1d840:	a98b803a 	cmpltu	r5,r21,r6
   1d844:	2d8b883a 	add	r5,r5,r22
   1d848:	2a11883a 	add	r8,r5,r8
   1d84c:	003ef806 	br	1d430 <__alt_data_end+0xfc01d430>
   1d850:	d9800017 	ldw	r6,0(sp)
   1d854:	318f883a 	add	r7,r6,r6
   1d858:	398b803a 	cmpltu	r5,r7,r6
   1d85c:	2d8d883a 	add	r6,r5,r22
   1d860:	81a1883a 	add	r16,r16,r6
   1d864:	a17fff84 	addi	r5,r20,-2
   1d868:	d9c00015 	stw	r7,0(sp)
   1d86c:	003f8806 	br	1d690 <__alt_data_end+0xfc01d690>
   1d870:	013ff844 	movi	r4,-31
   1d874:	2085c83a 	sub	r2,r4,r2
   1d878:	8888d83a 	srl	r4,r17,r2
   1d87c:	00800804 	movi	r2,32
   1d880:	18802126 	beq	r3,r2,1d908 <__divdf3+0x9ac>
   1d884:	04001004 	movi	r16,64
   1d888:	80c7c83a 	sub	r3,r16,r3
   1d88c:	88e0983a 	sll	r16,r17,r3
   1d890:	8504b03a 	or	r2,r16,r20
   1d894:	1004c03a 	cmpne	r2,r2,zero
   1d898:	2084b03a 	or	r2,r4,r2
   1d89c:	144001cc 	andi	r17,r2,7
   1d8a0:	88000d1e 	bne	r17,zero,1d8d8 <__divdf3+0x97c>
   1d8a4:	0021883a 	mov	r16,zero
   1d8a8:	102ad0fa 	srli	r21,r2,3
   1d8ac:	9900004c 	andi	r4,r19,1
   1d8b0:	0005883a 	mov	r2,zero
   1d8b4:	ac6ab03a 	or	r21,r21,r17
   1d8b8:	003e0706 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d8bc:	1007883a 	mov	r3,r2
   1d8c0:	0023883a 	mov	r17,zero
   1d8c4:	8820927a 	slli	r16,r17,9
   1d8c8:	1805883a 	mov	r2,r3
   1d8cc:	8822977a 	slli	r17,r17,29
   1d8d0:	8020d33a 	srli	r16,r16,12
   1d8d4:	003ff406 	br	1d8a8 <__alt_data_end+0xfc01d8a8>
   1d8d8:	10c003cc 	andi	r3,r2,15
   1d8dc:	01000104 	movi	r4,4
   1d8e0:	193ff626 	beq	r3,r4,1d8bc <__alt_data_end+0xfc01d8bc>
   1d8e4:	0023883a 	mov	r17,zero
   1d8e8:	003fc806 	br	1d80c <__alt_data_end+0xfc01d80c>
   1d8ec:	a8bfd136 	bltu	r21,r2,1d834 <__alt_data_end+0xfc01d834>
   1d8f0:	2823883a 	mov	r17,r5
   1d8f4:	003fa606 	br	1d790 <__alt_data_end+0xfc01d790>
   1d8f8:	d9800017 	ldw	r6,0(sp)
   1d8fc:	30bfd436 	bltu	r6,r2,1d850 <__alt_data_end+0xfc01d850>
   1d900:	2829883a 	mov	r20,r5
   1d904:	003f6406 	br	1d698 <__alt_data_end+0xfc01d698>
   1d908:	0021883a 	mov	r16,zero
   1d90c:	003fe006 	br	1d890 <__alt_data_end+0xfc01d890>
   1d910:	00800434 	movhi	r2,16
   1d914:	8c000234 	orhi	r16,r17,8
   1d918:	10bfffc4 	addi	r2,r2,-1
   1d91c:	e009883a 	mov	r4,fp
   1d920:	80a0703a 	and	r16,r16,r2
   1d924:	a02b883a 	mov	r21,r20
   1d928:	003e4e06 	br	1d264 <__alt_data_end+0xfc01d264>

0001d92c <__eqdf2>:
   1d92c:	2804d53a 	srli	r2,r5,20
   1d930:	3806d53a 	srli	r3,r7,20
   1d934:	02000434 	movhi	r8,16
   1d938:	423fffc4 	addi	r8,r8,-1
   1d93c:	1081ffcc 	andi	r2,r2,2047
   1d940:	0281ffc4 	movi	r10,2047
   1d944:	2a12703a 	and	r9,r5,r8
   1d948:	18c1ffcc 	andi	r3,r3,2047
   1d94c:	3a10703a 	and	r8,r7,r8
   1d950:	280ad7fa 	srli	r5,r5,31
   1d954:	380ed7fa 	srli	r7,r7,31
   1d958:	12801026 	beq	r2,r10,1d99c <__eqdf2+0x70>
   1d95c:	0281ffc4 	movi	r10,2047
   1d960:	1a800a26 	beq	r3,r10,1d98c <__eqdf2+0x60>
   1d964:	10c00226 	beq	r2,r3,1d970 <__eqdf2+0x44>
   1d968:	00800044 	movi	r2,1
   1d96c:	f800283a 	ret
   1d970:	4a3ffd1e 	bne	r9,r8,1d968 <__alt_data_end+0xfc01d968>
   1d974:	21bffc1e 	bne	r4,r6,1d968 <__alt_data_end+0xfc01d968>
   1d978:	29c00c26 	beq	r5,r7,1d9ac <__eqdf2+0x80>
   1d97c:	103ffa1e 	bne	r2,zero,1d968 <__alt_data_end+0xfc01d968>
   1d980:	2244b03a 	or	r2,r4,r9
   1d984:	1004c03a 	cmpne	r2,r2,zero
   1d988:	f800283a 	ret
   1d98c:	3214b03a 	or	r10,r6,r8
   1d990:	503ff426 	beq	r10,zero,1d964 <__alt_data_end+0xfc01d964>
   1d994:	00800044 	movi	r2,1
   1d998:	f800283a 	ret
   1d99c:	2254b03a 	or	r10,r4,r9
   1d9a0:	503fee26 	beq	r10,zero,1d95c <__alt_data_end+0xfc01d95c>
   1d9a4:	00800044 	movi	r2,1
   1d9a8:	f800283a 	ret
   1d9ac:	0005883a 	mov	r2,zero
   1d9b0:	f800283a 	ret

0001d9b4 <__gedf2>:
   1d9b4:	2804d53a 	srli	r2,r5,20
   1d9b8:	3806d53a 	srli	r3,r7,20
   1d9bc:	02000434 	movhi	r8,16
   1d9c0:	423fffc4 	addi	r8,r8,-1
   1d9c4:	1081ffcc 	andi	r2,r2,2047
   1d9c8:	0241ffc4 	movi	r9,2047
   1d9cc:	2a14703a 	and	r10,r5,r8
   1d9d0:	18c1ffcc 	andi	r3,r3,2047
   1d9d4:	3a10703a 	and	r8,r7,r8
   1d9d8:	280ad7fa 	srli	r5,r5,31
   1d9dc:	380ed7fa 	srli	r7,r7,31
   1d9e0:	12401d26 	beq	r2,r9,1da58 <__gedf2+0xa4>
   1d9e4:	0241ffc4 	movi	r9,2047
   1d9e8:	1a401226 	beq	r3,r9,1da34 <__gedf2+0x80>
   1d9ec:	1000081e 	bne	r2,zero,1da10 <__gedf2+0x5c>
   1d9f0:	2296b03a 	or	r11,r4,r10
   1d9f4:	5813003a 	cmpeq	r9,r11,zero
   1d9f8:	1800091e 	bne	r3,zero,1da20 <__gedf2+0x6c>
   1d9fc:	3218b03a 	or	r12,r6,r8
   1da00:	6000071e 	bne	r12,zero,1da20 <__gedf2+0x6c>
   1da04:	0005883a 	mov	r2,zero
   1da08:	5800101e 	bne	r11,zero,1da4c <__gedf2+0x98>
   1da0c:	f800283a 	ret
   1da10:	18000c1e 	bne	r3,zero,1da44 <__gedf2+0x90>
   1da14:	3212b03a 	or	r9,r6,r8
   1da18:	48000c26 	beq	r9,zero,1da4c <__gedf2+0x98>
   1da1c:	0013883a 	mov	r9,zero
   1da20:	39c03fcc 	andi	r7,r7,255
   1da24:	48000826 	beq	r9,zero,1da48 <__gedf2+0x94>
   1da28:	38000926 	beq	r7,zero,1da50 <__gedf2+0x9c>
   1da2c:	00800044 	movi	r2,1
   1da30:	f800283a 	ret
   1da34:	3212b03a 	or	r9,r6,r8
   1da38:	483fec26 	beq	r9,zero,1d9ec <__alt_data_end+0xfc01d9ec>
   1da3c:	00bfff84 	movi	r2,-2
   1da40:	f800283a 	ret
   1da44:	39c03fcc 	andi	r7,r7,255
   1da48:	29c00626 	beq	r5,r7,1da64 <__gedf2+0xb0>
   1da4c:	283ff726 	beq	r5,zero,1da2c <__alt_data_end+0xfc01da2c>
   1da50:	00bfffc4 	movi	r2,-1
   1da54:	f800283a 	ret
   1da58:	2292b03a 	or	r9,r4,r10
   1da5c:	483fe126 	beq	r9,zero,1d9e4 <__alt_data_end+0xfc01d9e4>
   1da60:	003ff606 	br	1da3c <__alt_data_end+0xfc01da3c>
   1da64:	18bff916 	blt	r3,r2,1da4c <__alt_data_end+0xfc01da4c>
   1da68:	10c00316 	blt	r2,r3,1da78 <__gedf2+0xc4>
   1da6c:	42bff736 	bltu	r8,r10,1da4c <__alt_data_end+0xfc01da4c>
   1da70:	52000326 	beq	r10,r8,1da80 <__gedf2+0xcc>
   1da74:	5200042e 	bgeu	r10,r8,1da88 <__gedf2+0xd4>
   1da78:	283fec1e 	bne	r5,zero,1da2c <__alt_data_end+0xfc01da2c>
   1da7c:	003ff406 	br	1da50 <__alt_data_end+0xfc01da50>
   1da80:	313ff236 	bltu	r6,r4,1da4c <__alt_data_end+0xfc01da4c>
   1da84:	21bffc36 	bltu	r4,r6,1da78 <__alt_data_end+0xfc01da78>
   1da88:	0005883a 	mov	r2,zero
   1da8c:	f800283a 	ret

0001da90 <__ledf2>:
   1da90:	2804d53a 	srli	r2,r5,20
   1da94:	3810d53a 	srli	r8,r7,20
   1da98:	00c00434 	movhi	r3,16
   1da9c:	18ffffc4 	addi	r3,r3,-1
   1daa0:	1081ffcc 	andi	r2,r2,2047
   1daa4:	0241ffc4 	movi	r9,2047
   1daa8:	28d4703a 	and	r10,r5,r3
   1daac:	4201ffcc 	andi	r8,r8,2047
   1dab0:	38c6703a 	and	r3,r7,r3
   1dab4:	280ad7fa 	srli	r5,r5,31
   1dab8:	380ed7fa 	srli	r7,r7,31
   1dabc:	12401f26 	beq	r2,r9,1db3c <__ledf2+0xac>
   1dac0:	0241ffc4 	movi	r9,2047
   1dac4:	42401426 	beq	r8,r9,1db18 <__ledf2+0x88>
   1dac8:	1000091e 	bne	r2,zero,1daf0 <__ledf2+0x60>
   1dacc:	2296b03a 	or	r11,r4,r10
   1dad0:	5813003a 	cmpeq	r9,r11,zero
   1dad4:	29403fcc 	andi	r5,r5,255
   1dad8:	40000a1e 	bne	r8,zero,1db04 <__ledf2+0x74>
   1dadc:	30d8b03a 	or	r12,r6,r3
   1dae0:	6000081e 	bne	r12,zero,1db04 <__ledf2+0x74>
   1dae4:	0005883a 	mov	r2,zero
   1dae8:	5800111e 	bne	r11,zero,1db30 <__ledf2+0xa0>
   1daec:	f800283a 	ret
   1daf0:	29403fcc 	andi	r5,r5,255
   1daf4:	40000c1e 	bne	r8,zero,1db28 <__ledf2+0x98>
   1daf8:	30d2b03a 	or	r9,r6,r3
   1dafc:	48000c26 	beq	r9,zero,1db30 <__ledf2+0xa0>
   1db00:	0013883a 	mov	r9,zero
   1db04:	39c03fcc 	andi	r7,r7,255
   1db08:	48000826 	beq	r9,zero,1db2c <__ledf2+0x9c>
   1db0c:	38001126 	beq	r7,zero,1db54 <__ledf2+0xc4>
   1db10:	00800044 	movi	r2,1
   1db14:	f800283a 	ret
   1db18:	30d2b03a 	or	r9,r6,r3
   1db1c:	483fea26 	beq	r9,zero,1dac8 <__alt_data_end+0xfc01dac8>
   1db20:	00800084 	movi	r2,2
   1db24:	f800283a 	ret
   1db28:	39c03fcc 	andi	r7,r7,255
   1db2c:	39400726 	beq	r7,r5,1db4c <__ledf2+0xbc>
   1db30:	2800081e 	bne	r5,zero,1db54 <__ledf2+0xc4>
   1db34:	00800044 	movi	r2,1
   1db38:	f800283a 	ret
   1db3c:	2292b03a 	or	r9,r4,r10
   1db40:	483fdf26 	beq	r9,zero,1dac0 <__alt_data_end+0xfc01dac0>
   1db44:	00800084 	movi	r2,2
   1db48:	f800283a 	ret
   1db4c:	4080030e 	bge	r8,r2,1db5c <__ledf2+0xcc>
   1db50:	383fef26 	beq	r7,zero,1db10 <__alt_data_end+0xfc01db10>
   1db54:	00bfffc4 	movi	r2,-1
   1db58:	f800283a 	ret
   1db5c:	123feb16 	blt	r2,r8,1db0c <__alt_data_end+0xfc01db0c>
   1db60:	1abff336 	bltu	r3,r10,1db30 <__alt_data_end+0xfc01db30>
   1db64:	50c00326 	beq	r10,r3,1db74 <__ledf2+0xe4>
   1db68:	50c0042e 	bgeu	r10,r3,1db7c <__ledf2+0xec>
   1db6c:	283fe81e 	bne	r5,zero,1db10 <__alt_data_end+0xfc01db10>
   1db70:	003ff806 	br	1db54 <__alt_data_end+0xfc01db54>
   1db74:	313fee36 	bltu	r6,r4,1db30 <__alt_data_end+0xfc01db30>
   1db78:	21bffc36 	bltu	r4,r6,1db6c <__alt_data_end+0xfc01db6c>
   1db7c:	0005883a 	mov	r2,zero
   1db80:	f800283a 	ret

0001db84 <__muldf3>:
   1db84:	deffee04 	addi	sp,sp,-72
   1db88:	dd000c15 	stw	r20,48(sp)
   1db8c:	2828d53a 	srli	r20,r5,20
   1db90:	ddc00f15 	stw	r23,60(sp)
   1db94:	282ed7fa 	srli	r23,r5,31
   1db98:	dc000815 	stw	r16,32(sp)
   1db9c:	04000434 	movhi	r16,16
   1dba0:	dcc00b15 	stw	r19,44(sp)
   1dba4:	843fffc4 	addi	r16,r16,-1
   1dba8:	dfc01115 	stw	ra,68(sp)
   1dbac:	df001015 	stw	fp,64(sp)
   1dbb0:	dd800e15 	stw	r22,56(sp)
   1dbb4:	dd400d15 	stw	r21,52(sp)
   1dbb8:	dc800a15 	stw	r18,40(sp)
   1dbbc:	dc400915 	stw	r17,36(sp)
   1dbc0:	a501ffcc 	andi	r20,r20,2047
   1dbc4:	2c20703a 	and	r16,r5,r16
   1dbc8:	b827883a 	mov	r19,r23
   1dbcc:	ba403fcc 	andi	r9,r23,255
   1dbd0:	a0006026 	beq	r20,zero,1dd54 <__muldf3+0x1d0>
   1dbd4:	0081ffc4 	movi	r2,2047
   1dbd8:	202d883a 	mov	r22,r4
   1dbdc:	a0803626 	beq	r20,r2,1dcb8 <__muldf3+0x134>
   1dbe0:	84000434 	orhi	r16,r16,16
   1dbe4:	200ad77a 	srli	r5,r4,29
   1dbe8:	800490fa 	slli	r2,r16,3
   1dbec:	202c90fa 	slli	r22,r4,3
   1dbf0:	a53f0044 	addi	r20,r20,-1023
   1dbf4:	28a0b03a 	or	r16,r5,r2
   1dbf8:	002b883a 	mov	r21,zero
   1dbfc:	000b883a 	mov	r5,zero
   1dc00:	3804d53a 	srli	r2,r7,20
   1dc04:	3838d7fa 	srli	fp,r7,31
   1dc08:	04400434 	movhi	r17,16
   1dc0c:	8c7fffc4 	addi	r17,r17,-1
   1dc10:	1081ffcc 	andi	r2,r2,2047
   1dc14:	3025883a 	mov	r18,r6
   1dc18:	3c62703a 	and	r17,r7,r17
   1dc1c:	e2803fcc 	andi	r10,fp,255
   1dc20:	10006d26 	beq	r2,zero,1ddd8 <__muldf3+0x254>
   1dc24:	00c1ffc4 	movi	r3,2047
   1dc28:	10c06526 	beq	r2,r3,1ddc0 <__muldf3+0x23c>
   1dc2c:	8c400434 	orhi	r17,r17,16
   1dc30:	300ed77a 	srli	r7,r6,29
   1dc34:	880690fa 	slli	r3,r17,3
   1dc38:	302490fa 	slli	r18,r6,3
   1dc3c:	10bf0044 	addi	r2,r2,-1023
   1dc40:	38e2b03a 	or	r17,r7,r3
   1dc44:	000f883a 	mov	r7,zero
   1dc48:	a087883a 	add	r3,r20,r2
   1dc4c:	010003c4 	movi	r4,15
   1dc50:	3d44b03a 	or	r2,r7,r21
   1dc54:	e5ccf03a 	xor	r6,fp,r23
   1dc58:	1a000044 	addi	r8,r3,1
   1dc5c:	20809b36 	bltu	r4,r2,1decc <__muldf3+0x348>
   1dc60:	100490ba 	slli	r2,r2,2
   1dc64:	010000b4 	movhi	r4,2
   1dc68:	21371e04 	addi	r4,r4,-9096
   1dc6c:	1105883a 	add	r2,r2,r4
   1dc70:	10800017 	ldw	r2,0(r2)
   1dc74:	1000683a 	jmp	r2
   1dc78:	0001decc 	andi	zero,zero,1915
   1dc7c:	0001dcd8 	cmpnei	zero,zero,1907
   1dc80:	0001dcd8 	cmpnei	zero,zero,1907
   1dc84:	0001dcd4 	movui	zero,1907
   1dc88:	0001dea8 	cmpgeui	zero,zero,1914
   1dc8c:	0001dea8 	cmpgeui	zero,zero,1914
   1dc90:	0001de90 	cmplti	zero,zero,1914
   1dc94:	0001dcd4 	movui	zero,1907
   1dc98:	0001dea8 	cmpgeui	zero,zero,1914
   1dc9c:	0001de90 	cmplti	zero,zero,1914
   1dca0:	0001dea8 	cmpgeui	zero,zero,1914
   1dca4:	0001dcd4 	movui	zero,1907
   1dca8:	0001deb8 	rdprs	zero,zero,1914
   1dcac:	0001deb8 	rdprs	zero,zero,1914
   1dcb0:	0001deb8 	rdprs	zero,zero,1914
   1dcb4:	0001e218 	cmpnei	zero,zero,1928
   1dcb8:	2404b03a 	or	r2,r4,r16
   1dcbc:	1000711e 	bne	r2,zero,1de84 <__muldf3+0x300>
   1dcc0:	05400204 	movi	r21,8
   1dcc4:	0021883a 	mov	r16,zero
   1dcc8:	002d883a 	mov	r22,zero
   1dccc:	01400084 	movi	r5,2
   1dcd0:	003fcb06 	br	1dc00 <__alt_data_end+0xfc01dc00>
   1dcd4:	500d883a 	mov	r6,r10
   1dcd8:	00800084 	movi	r2,2
   1dcdc:	38805926 	beq	r7,r2,1de44 <__muldf3+0x2c0>
   1dce0:	008000c4 	movi	r2,3
   1dce4:	3881bb26 	beq	r7,r2,1e3d4 <__muldf3+0x850>
   1dce8:	00800044 	movi	r2,1
   1dcec:	3881961e 	bne	r7,r2,1e348 <__muldf3+0x7c4>
   1dcf0:	3027883a 	mov	r19,r6
   1dcf4:	0005883a 	mov	r2,zero
   1dcf8:	0021883a 	mov	r16,zero
   1dcfc:	002d883a 	mov	r22,zero
   1dd00:	1004953a 	slli	r2,r2,20
   1dd04:	98c03fcc 	andi	r3,r19,255
   1dd08:	04400434 	movhi	r17,16
   1dd0c:	8c7fffc4 	addi	r17,r17,-1
   1dd10:	180697fa 	slli	r3,r3,31
   1dd14:	8460703a 	and	r16,r16,r17
   1dd18:	80a0b03a 	or	r16,r16,r2
   1dd1c:	80c6b03a 	or	r3,r16,r3
   1dd20:	b005883a 	mov	r2,r22
   1dd24:	dfc01117 	ldw	ra,68(sp)
   1dd28:	df001017 	ldw	fp,64(sp)
   1dd2c:	ddc00f17 	ldw	r23,60(sp)
   1dd30:	dd800e17 	ldw	r22,56(sp)
   1dd34:	dd400d17 	ldw	r21,52(sp)
   1dd38:	dd000c17 	ldw	r20,48(sp)
   1dd3c:	dcc00b17 	ldw	r19,44(sp)
   1dd40:	dc800a17 	ldw	r18,40(sp)
   1dd44:	dc400917 	ldw	r17,36(sp)
   1dd48:	dc000817 	ldw	r16,32(sp)
   1dd4c:	dec01204 	addi	sp,sp,72
   1dd50:	f800283a 	ret
   1dd54:	2404b03a 	or	r2,r4,r16
   1dd58:	202b883a 	mov	r21,r4
   1dd5c:	10004426 	beq	r2,zero,1de70 <__muldf3+0x2ec>
   1dd60:	80015126 	beq	r16,zero,1e2a8 <__muldf3+0x724>
   1dd64:	8009883a 	mov	r4,r16
   1dd68:	d9800715 	stw	r6,28(sp)
   1dd6c:	d9c00215 	stw	r7,8(sp)
   1dd70:	da400415 	stw	r9,16(sp)
   1dd74:	000e37c0 	call	e37c <__clzsi2>
   1dd78:	d9800717 	ldw	r6,28(sp)
   1dd7c:	d9c00217 	ldw	r7,8(sp)
   1dd80:	da400417 	ldw	r9,16(sp)
   1dd84:	113ffd44 	addi	r4,r2,-11
   1dd88:	00c00704 	movi	r3,28
   1dd8c:	19014216 	blt	r3,r4,1e298 <__muldf3+0x714>
   1dd90:	00c00744 	movi	r3,29
   1dd94:	15bffe04 	addi	r22,r2,-8
   1dd98:	1907c83a 	sub	r3,r3,r4
   1dd9c:	85a0983a 	sll	r16,r16,r22
   1dda0:	a8c6d83a 	srl	r3,r21,r3
   1dda4:	adac983a 	sll	r22,r21,r22
   1dda8:	1c20b03a 	or	r16,r3,r16
   1ddac:	1080fcc4 	addi	r2,r2,1011
   1ddb0:	00a9c83a 	sub	r20,zero,r2
   1ddb4:	002b883a 	mov	r21,zero
   1ddb8:	000b883a 	mov	r5,zero
   1ddbc:	003f9006 	br	1dc00 <__alt_data_end+0xfc01dc00>
   1ddc0:	3446b03a 	or	r3,r6,r17
   1ddc4:	1800281e 	bne	r3,zero,1de68 <__muldf3+0x2e4>
   1ddc8:	0023883a 	mov	r17,zero
   1ddcc:	0025883a 	mov	r18,zero
   1ddd0:	01c00084 	movi	r7,2
   1ddd4:	003f9c06 	br	1dc48 <__alt_data_end+0xfc01dc48>
   1ddd8:	3446b03a 	or	r3,r6,r17
   1dddc:	18001e26 	beq	r3,zero,1de58 <__muldf3+0x2d4>
   1dde0:	88012126 	beq	r17,zero,1e268 <__muldf3+0x6e4>
   1dde4:	8809883a 	mov	r4,r17
   1dde8:	d9400215 	stw	r5,8(sp)
   1ddec:	d9800715 	stw	r6,28(sp)
   1ddf0:	da400415 	stw	r9,16(sp)
   1ddf4:	da800315 	stw	r10,12(sp)
   1ddf8:	000e37c0 	call	e37c <__clzsi2>
   1ddfc:	d9400217 	ldw	r5,8(sp)
   1de00:	d9800717 	ldw	r6,28(sp)
   1de04:	da400417 	ldw	r9,16(sp)
   1de08:	da800317 	ldw	r10,12(sp)
   1de0c:	113ffd44 	addi	r4,r2,-11
   1de10:	00c00704 	movi	r3,28
   1de14:	19011016 	blt	r3,r4,1e258 <__muldf3+0x6d4>
   1de18:	00c00744 	movi	r3,29
   1de1c:	14bffe04 	addi	r18,r2,-8
   1de20:	1907c83a 	sub	r3,r3,r4
   1de24:	8ca2983a 	sll	r17,r17,r18
   1de28:	30c6d83a 	srl	r3,r6,r3
   1de2c:	34a4983a 	sll	r18,r6,r18
   1de30:	1c62b03a 	or	r17,r3,r17
   1de34:	1080fcc4 	addi	r2,r2,1011
   1de38:	0085c83a 	sub	r2,zero,r2
   1de3c:	000f883a 	mov	r7,zero
   1de40:	003f8106 	br	1dc48 <__alt_data_end+0xfc01dc48>
   1de44:	3027883a 	mov	r19,r6
   1de48:	0081ffc4 	movi	r2,2047
   1de4c:	0021883a 	mov	r16,zero
   1de50:	002d883a 	mov	r22,zero
   1de54:	003faa06 	br	1dd00 <__alt_data_end+0xfc01dd00>
   1de58:	0023883a 	mov	r17,zero
   1de5c:	0025883a 	mov	r18,zero
   1de60:	01c00044 	movi	r7,1
   1de64:	003f7806 	br	1dc48 <__alt_data_end+0xfc01dc48>
   1de68:	01c000c4 	movi	r7,3
   1de6c:	003f7606 	br	1dc48 <__alt_data_end+0xfc01dc48>
   1de70:	05400104 	movi	r21,4
   1de74:	0021883a 	mov	r16,zero
   1de78:	002d883a 	mov	r22,zero
   1de7c:	01400044 	movi	r5,1
   1de80:	003f5f06 	br	1dc00 <__alt_data_end+0xfc01dc00>
   1de84:	05400304 	movi	r21,12
   1de88:	014000c4 	movi	r5,3
   1de8c:	003f5c06 	br	1dc00 <__alt_data_end+0xfc01dc00>
   1de90:	04000434 	movhi	r16,16
   1de94:	0027883a 	mov	r19,zero
   1de98:	843fffc4 	addi	r16,r16,-1
   1de9c:	05bfffc4 	movi	r22,-1
   1dea0:	0081ffc4 	movi	r2,2047
   1dea4:	003f9606 	br	1dd00 <__alt_data_end+0xfc01dd00>
   1dea8:	8023883a 	mov	r17,r16
   1deac:	b025883a 	mov	r18,r22
   1deb0:	280f883a 	mov	r7,r5
   1deb4:	003f8806 	br	1dcd8 <__alt_data_end+0xfc01dcd8>
   1deb8:	8023883a 	mov	r17,r16
   1debc:	b025883a 	mov	r18,r22
   1dec0:	480d883a 	mov	r6,r9
   1dec4:	280f883a 	mov	r7,r5
   1dec8:	003f8306 	br	1dcd8 <__alt_data_end+0xfc01dcd8>
   1decc:	b026d43a 	srli	r19,r22,16
   1ded0:	902ed43a 	srli	r23,r18,16
   1ded4:	b5bfffcc 	andi	r22,r22,65535
   1ded8:	94bfffcc 	andi	r18,r18,65535
   1dedc:	b00b883a 	mov	r5,r22
   1dee0:	9009883a 	mov	r4,r18
   1dee4:	d8c00515 	stw	r3,20(sp)
   1dee8:	d9800715 	stw	r6,28(sp)
   1deec:	da000615 	stw	r8,24(sp)
   1def0:	000cec40 	call	cec4 <__mulsi3>
   1def4:	980b883a 	mov	r5,r19
   1def8:	9009883a 	mov	r4,r18
   1defc:	1029883a 	mov	r20,r2
   1df00:	000cec40 	call	cec4 <__mulsi3>
   1df04:	b80b883a 	mov	r5,r23
   1df08:	9809883a 	mov	r4,r19
   1df0c:	102b883a 	mov	r21,r2
   1df10:	000cec40 	call	cec4 <__mulsi3>
   1df14:	b809883a 	mov	r4,r23
   1df18:	b00b883a 	mov	r5,r22
   1df1c:	1039883a 	mov	fp,r2
   1df20:	000cec40 	call	cec4 <__mulsi3>
   1df24:	a008d43a 	srli	r4,r20,16
   1df28:	1545883a 	add	r2,r2,r21
   1df2c:	d8c00517 	ldw	r3,20(sp)
   1df30:	2085883a 	add	r2,r4,r2
   1df34:	d9800717 	ldw	r6,28(sp)
   1df38:	da000617 	ldw	r8,24(sp)
   1df3c:	1540022e 	bgeu	r2,r21,1df48 <__muldf3+0x3c4>
   1df40:	01000074 	movhi	r4,1
   1df44:	e139883a 	add	fp,fp,r4
   1df48:	100e943a 	slli	r7,r2,16
   1df4c:	1004d43a 	srli	r2,r2,16
   1df50:	882ad43a 	srli	r21,r17,16
   1df54:	a53fffcc 	andi	r20,r20,65535
   1df58:	8c7fffcc 	andi	r17,r17,65535
   1df5c:	3d29883a 	add	r20,r7,r20
   1df60:	b00b883a 	mov	r5,r22
   1df64:	8809883a 	mov	r4,r17
   1df68:	d8c00515 	stw	r3,20(sp)
   1df6c:	d9800715 	stw	r6,28(sp)
   1df70:	da000615 	stw	r8,24(sp)
   1df74:	dd000115 	stw	r20,4(sp)
   1df78:	d8800015 	stw	r2,0(sp)
   1df7c:	000cec40 	call	cec4 <__mulsi3>
   1df80:	980b883a 	mov	r5,r19
   1df84:	8809883a 	mov	r4,r17
   1df88:	d8800215 	stw	r2,8(sp)
   1df8c:	000cec40 	call	cec4 <__mulsi3>
   1df90:	9809883a 	mov	r4,r19
   1df94:	a80b883a 	mov	r5,r21
   1df98:	1029883a 	mov	r20,r2
   1df9c:	000cec40 	call	cec4 <__mulsi3>
   1dfa0:	b00b883a 	mov	r5,r22
   1dfa4:	a809883a 	mov	r4,r21
   1dfa8:	d8800415 	stw	r2,16(sp)
   1dfac:	000cec40 	call	cec4 <__mulsi3>
   1dfb0:	d9c00217 	ldw	r7,8(sp)
   1dfb4:	1505883a 	add	r2,r2,r20
   1dfb8:	d8c00517 	ldw	r3,20(sp)
   1dfbc:	3826d43a 	srli	r19,r7,16
   1dfc0:	d9800717 	ldw	r6,28(sp)
   1dfc4:	da000617 	ldw	r8,24(sp)
   1dfc8:	9885883a 	add	r2,r19,r2
   1dfcc:	da400417 	ldw	r9,16(sp)
   1dfd0:	1500022e 	bgeu	r2,r20,1dfdc <__muldf3+0x458>
   1dfd4:	01000074 	movhi	r4,1
   1dfd8:	4913883a 	add	r9,r9,r4
   1dfdc:	1028d43a 	srli	r20,r2,16
   1dfe0:	1004943a 	slli	r2,r2,16
   1dfe4:	802cd43a 	srli	r22,r16,16
   1dfe8:	843fffcc 	andi	r16,r16,65535
   1dfec:	3cffffcc 	andi	r19,r7,65535
   1dff0:	9009883a 	mov	r4,r18
   1dff4:	800b883a 	mov	r5,r16
   1dff8:	a269883a 	add	r20,r20,r9
   1dffc:	d8c00515 	stw	r3,20(sp)
   1e000:	d9800715 	stw	r6,28(sp)
   1e004:	da000615 	stw	r8,24(sp)
   1e008:	14e7883a 	add	r19,r2,r19
   1e00c:	000cec40 	call	cec4 <__mulsi3>
   1e010:	9009883a 	mov	r4,r18
   1e014:	b00b883a 	mov	r5,r22
   1e018:	d8800315 	stw	r2,12(sp)
   1e01c:	000cec40 	call	cec4 <__mulsi3>
   1e020:	b809883a 	mov	r4,r23
   1e024:	b00b883a 	mov	r5,r22
   1e028:	d8800215 	stw	r2,8(sp)
   1e02c:	000cec40 	call	cec4 <__mulsi3>
   1e030:	b80b883a 	mov	r5,r23
   1e034:	8009883a 	mov	r4,r16
   1e038:	d8800415 	stw	r2,16(sp)
   1e03c:	000cec40 	call	cec4 <__mulsi3>
   1e040:	da800317 	ldw	r10,12(sp)
   1e044:	d9c00217 	ldw	r7,8(sp)
   1e048:	d9000017 	ldw	r4,0(sp)
   1e04c:	502ed43a 	srli	r23,r10,16
   1e050:	11c5883a 	add	r2,r2,r7
   1e054:	24e5883a 	add	r18,r4,r19
   1e058:	b885883a 	add	r2,r23,r2
   1e05c:	d8c00517 	ldw	r3,20(sp)
   1e060:	d9800717 	ldw	r6,28(sp)
   1e064:	da000617 	ldw	r8,24(sp)
   1e068:	da400417 	ldw	r9,16(sp)
   1e06c:	11c0022e 	bgeu	r2,r7,1e078 <__muldf3+0x4f4>
   1e070:	01000074 	movhi	r4,1
   1e074:	4913883a 	add	r9,r9,r4
   1e078:	100ed43a 	srli	r7,r2,16
   1e07c:	1004943a 	slli	r2,r2,16
   1e080:	55ffffcc 	andi	r23,r10,65535
   1e084:	3a53883a 	add	r9,r7,r9
   1e088:	8809883a 	mov	r4,r17
   1e08c:	800b883a 	mov	r5,r16
   1e090:	d8c00515 	stw	r3,20(sp)
   1e094:	d9800715 	stw	r6,28(sp)
   1e098:	da000615 	stw	r8,24(sp)
   1e09c:	da400415 	stw	r9,16(sp)
   1e0a0:	15ef883a 	add	r23,r2,r23
   1e0a4:	000cec40 	call	cec4 <__mulsi3>
   1e0a8:	8809883a 	mov	r4,r17
   1e0ac:	b00b883a 	mov	r5,r22
   1e0b0:	d8800215 	stw	r2,8(sp)
   1e0b4:	000cec40 	call	cec4 <__mulsi3>
   1e0b8:	b00b883a 	mov	r5,r22
   1e0bc:	a809883a 	mov	r4,r21
   1e0c0:	d8800315 	stw	r2,12(sp)
   1e0c4:	000cec40 	call	cec4 <__mulsi3>
   1e0c8:	8009883a 	mov	r4,r16
   1e0cc:	a80b883a 	mov	r5,r21
   1e0d0:	1023883a 	mov	r17,r2
   1e0d4:	000cec40 	call	cec4 <__mulsi3>
   1e0d8:	d9c00217 	ldw	r7,8(sp)
   1e0dc:	da800317 	ldw	r10,12(sp)
   1e0e0:	d8c00517 	ldw	r3,20(sp)
   1e0e4:	3808d43a 	srli	r4,r7,16
   1e0e8:	1285883a 	add	r2,r2,r10
   1e0ec:	d9800717 	ldw	r6,28(sp)
   1e0f0:	2085883a 	add	r2,r4,r2
   1e0f4:	da000617 	ldw	r8,24(sp)
   1e0f8:	da400417 	ldw	r9,16(sp)
   1e0fc:	1280022e 	bgeu	r2,r10,1e108 <__muldf3+0x584>
   1e100:	01000074 	movhi	r4,1
   1e104:	8923883a 	add	r17,r17,r4
   1e108:	1008943a 	slli	r4,r2,16
   1e10c:	39ffffcc 	andi	r7,r7,65535
   1e110:	e4b9883a 	add	fp,fp,r18
   1e114:	21cf883a 	add	r7,r4,r7
   1e118:	e4e7803a 	cmpltu	r19,fp,r19
   1e11c:	3d0f883a 	add	r7,r7,r20
   1e120:	bf39883a 	add	fp,r23,fp
   1e124:	99c9883a 	add	r4,r19,r7
   1e128:	e5ef803a 	cmpltu	r23,fp,r23
   1e12c:	490b883a 	add	r5,r9,r4
   1e130:	1004d43a 	srli	r2,r2,16
   1e134:	b965883a 	add	r18,r23,r5
   1e138:	24c9803a 	cmpltu	r4,r4,r19
   1e13c:	3d29803a 	cmpltu	r20,r7,r20
   1e140:	a128b03a 	or	r20,r20,r4
   1e144:	95ef803a 	cmpltu	r23,r18,r23
   1e148:	2a53803a 	cmpltu	r9,r5,r9
   1e14c:	a0a9883a 	add	r20,r20,r2
   1e150:	4deeb03a 	or	r23,r9,r23
   1e154:	a5ef883a 	add	r23,r20,r23
   1e158:	bc63883a 	add	r17,r23,r17
   1e15c:	e004927a 	slli	r2,fp,9
   1e160:	d9000117 	ldw	r4,4(sp)
   1e164:	882e927a 	slli	r23,r17,9
   1e168:	9022d5fa 	srli	r17,r18,23
   1e16c:	e038d5fa 	srli	fp,fp,23
   1e170:	1104b03a 	or	r2,r2,r4
   1e174:	9024927a 	slli	r18,r18,9
   1e178:	1004c03a 	cmpne	r2,r2,zero
   1e17c:	bc62b03a 	or	r17,r23,r17
   1e180:	1738b03a 	or	fp,r2,fp
   1e184:	8880402c 	andhi	r2,r17,256
   1e188:	e4a4b03a 	or	r18,fp,r18
   1e18c:	10000726 	beq	r2,zero,1e1ac <__muldf3+0x628>
   1e190:	9006d07a 	srli	r3,r18,1
   1e194:	880497fa 	slli	r2,r17,31
   1e198:	9480004c 	andi	r18,r18,1
   1e19c:	8822d07a 	srli	r17,r17,1
   1e1a0:	1ca4b03a 	or	r18,r3,r18
   1e1a4:	14a4b03a 	or	r18,r2,r18
   1e1a8:	4007883a 	mov	r3,r8
   1e1ac:	1880ffc4 	addi	r2,r3,1023
   1e1b0:	0080460e 	bge	zero,r2,1e2cc <__muldf3+0x748>
   1e1b4:	910001cc 	andi	r4,r18,7
   1e1b8:	20000726 	beq	r4,zero,1e1d8 <__muldf3+0x654>
   1e1bc:	910003cc 	andi	r4,r18,15
   1e1c0:	01400104 	movi	r5,4
   1e1c4:	21400426 	beq	r4,r5,1e1d8 <__muldf3+0x654>
   1e1c8:	9149883a 	add	r4,r18,r5
   1e1cc:	24a5803a 	cmpltu	r18,r4,r18
   1e1d0:	8ca3883a 	add	r17,r17,r18
   1e1d4:	2025883a 	mov	r18,r4
   1e1d8:	8900402c 	andhi	r4,r17,256
   1e1dc:	20000426 	beq	r4,zero,1e1f0 <__muldf3+0x66c>
   1e1e0:	18810004 	addi	r2,r3,1024
   1e1e4:	00ffc034 	movhi	r3,65280
   1e1e8:	18ffffc4 	addi	r3,r3,-1
   1e1ec:	88e2703a 	and	r17,r17,r3
   1e1f0:	00c1ff84 	movi	r3,2046
   1e1f4:	18bf1316 	blt	r3,r2,1de44 <__alt_data_end+0xfc01de44>
   1e1f8:	882c977a 	slli	r22,r17,29
   1e1fc:	9024d0fa 	srli	r18,r18,3
   1e200:	8822927a 	slli	r17,r17,9
   1e204:	1081ffcc 	andi	r2,r2,2047
   1e208:	b4acb03a 	or	r22,r22,r18
   1e20c:	8820d33a 	srli	r16,r17,12
   1e210:	3027883a 	mov	r19,r6
   1e214:	003eba06 	br	1dd00 <__alt_data_end+0xfc01dd00>
   1e218:	8080022c 	andhi	r2,r16,8
   1e21c:	10000926 	beq	r2,zero,1e244 <__muldf3+0x6c0>
   1e220:	8880022c 	andhi	r2,r17,8
   1e224:	1000071e 	bne	r2,zero,1e244 <__muldf3+0x6c0>
   1e228:	00800434 	movhi	r2,16
   1e22c:	8c000234 	orhi	r16,r17,8
   1e230:	10bfffc4 	addi	r2,r2,-1
   1e234:	e027883a 	mov	r19,fp
   1e238:	80a0703a 	and	r16,r16,r2
   1e23c:	902d883a 	mov	r22,r18
   1e240:	003f1706 	br	1dea0 <__alt_data_end+0xfc01dea0>
   1e244:	00800434 	movhi	r2,16
   1e248:	84000234 	orhi	r16,r16,8
   1e24c:	10bfffc4 	addi	r2,r2,-1
   1e250:	80a0703a 	and	r16,r16,r2
   1e254:	003f1206 	br	1dea0 <__alt_data_end+0xfc01dea0>
   1e258:	147ff604 	addi	r17,r2,-40
   1e25c:	3462983a 	sll	r17,r6,r17
   1e260:	0025883a 	mov	r18,zero
   1e264:	003ef306 	br	1de34 <__alt_data_end+0xfc01de34>
   1e268:	3009883a 	mov	r4,r6
   1e26c:	d9400215 	stw	r5,8(sp)
   1e270:	d9800715 	stw	r6,28(sp)
   1e274:	da400415 	stw	r9,16(sp)
   1e278:	da800315 	stw	r10,12(sp)
   1e27c:	000e37c0 	call	e37c <__clzsi2>
   1e280:	10800804 	addi	r2,r2,32
   1e284:	da800317 	ldw	r10,12(sp)
   1e288:	da400417 	ldw	r9,16(sp)
   1e28c:	d9800717 	ldw	r6,28(sp)
   1e290:	d9400217 	ldw	r5,8(sp)
   1e294:	003edd06 	br	1de0c <__alt_data_end+0xfc01de0c>
   1e298:	143ff604 	addi	r16,r2,-40
   1e29c:	ac20983a 	sll	r16,r21,r16
   1e2a0:	002d883a 	mov	r22,zero
   1e2a4:	003ec106 	br	1ddac <__alt_data_end+0xfc01ddac>
   1e2a8:	d9800715 	stw	r6,28(sp)
   1e2ac:	d9c00215 	stw	r7,8(sp)
   1e2b0:	da400415 	stw	r9,16(sp)
   1e2b4:	000e37c0 	call	e37c <__clzsi2>
   1e2b8:	10800804 	addi	r2,r2,32
   1e2bc:	da400417 	ldw	r9,16(sp)
   1e2c0:	d9c00217 	ldw	r7,8(sp)
   1e2c4:	d9800717 	ldw	r6,28(sp)
   1e2c8:	003eae06 	br	1dd84 <__alt_data_end+0xfc01dd84>
   1e2cc:	00c00044 	movi	r3,1
   1e2d0:	1887c83a 	sub	r3,r3,r2
   1e2d4:	01000e04 	movi	r4,56
   1e2d8:	20fe8516 	blt	r4,r3,1dcf0 <__alt_data_end+0xfc01dcf0>
   1e2dc:	010007c4 	movi	r4,31
   1e2e0:	20c01b16 	blt	r4,r3,1e350 <__muldf3+0x7cc>
   1e2e4:	00800804 	movi	r2,32
   1e2e8:	10c5c83a 	sub	r2,r2,r3
   1e2ec:	888a983a 	sll	r5,r17,r2
   1e2f0:	90c8d83a 	srl	r4,r18,r3
   1e2f4:	9084983a 	sll	r2,r18,r2
   1e2f8:	88e2d83a 	srl	r17,r17,r3
   1e2fc:	2906b03a 	or	r3,r5,r4
   1e300:	1004c03a 	cmpne	r2,r2,zero
   1e304:	1886b03a 	or	r3,r3,r2
   1e308:	188001cc 	andi	r2,r3,7
   1e30c:	10000726 	beq	r2,zero,1e32c <__muldf3+0x7a8>
   1e310:	188003cc 	andi	r2,r3,15
   1e314:	01000104 	movi	r4,4
   1e318:	11000426 	beq	r2,r4,1e32c <__muldf3+0x7a8>
   1e31c:	1805883a 	mov	r2,r3
   1e320:	10c00104 	addi	r3,r2,4
   1e324:	1885803a 	cmpltu	r2,r3,r2
   1e328:	88a3883a 	add	r17,r17,r2
   1e32c:	8880202c 	andhi	r2,r17,128
   1e330:	10001c26 	beq	r2,zero,1e3a4 <__muldf3+0x820>
   1e334:	3027883a 	mov	r19,r6
   1e338:	00800044 	movi	r2,1
   1e33c:	0021883a 	mov	r16,zero
   1e340:	002d883a 	mov	r22,zero
   1e344:	003e6e06 	br	1dd00 <__alt_data_end+0xfc01dd00>
   1e348:	4007883a 	mov	r3,r8
   1e34c:	003f9706 	br	1e1ac <__alt_data_end+0xfc01e1ac>
   1e350:	017ff844 	movi	r5,-31
   1e354:	2885c83a 	sub	r2,r5,r2
   1e358:	888ad83a 	srl	r5,r17,r2
   1e35c:	00800804 	movi	r2,32
   1e360:	18801a26 	beq	r3,r2,1e3cc <__muldf3+0x848>
   1e364:	01001004 	movi	r4,64
   1e368:	20c7c83a 	sub	r3,r4,r3
   1e36c:	88e2983a 	sll	r17,r17,r3
   1e370:	8ca4b03a 	or	r18,r17,r18
   1e374:	9004c03a 	cmpne	r2,r18,zero
   1e378:	2884b03a 	or	r2,r5,r2
   1e37c:	144001cc 	andi	r17,r2,7
   1e380:	88000d1e 	bne	r17,zero,1e3b8 <__muldf3+0x834>
   1e384:	0021883a 	mov	r16,zero
   1e388:	102cd0fa 	srli	r22,r2,3
   1e38c:	3027883a 	mov	r19,r6
   1e390:	0005883a 	mov	r2,zero
   1e394:	b46cb03a 	or	r22,r22,r17
   1e398:	003e5906 	br	1dd00 <__alt_data_end+0xfc01dd00>
   1e39c:	1007883a 	mov	r3,r2
   1e3a0:	0023883a 	mov	r17,zero
   1e3a4:	8820927a 	slli	r16,r17,9
   1e3a8:	1805883a 	mov	r2,r3
   1e3ac:	8822977a 	slli	r17,r17,29
   1e3b0:	8020d33a 	srli	r16,r16,12
   1e3b4:	003ff406 	br	1e388 <__alt_data_end+0xfc01e388>
   1e3b8:	10c003cc 	andi	r3,r2,15
   1e3bc:	01000104 	movi	r4,4
   1e3c0:	193ff626 	beq	r3,r4,1e39c <__alt_data_end+0xfc01e39c>
   1e3c4:	0023883a 	mov	r17,zero
   1e3c8:	003fd506 	br	1e320 <__alt_data_end+0xfc01e320>
   1e3cc:	0023883a 	mov	r17,zero
   1e3d0:	003fe706 	br	1e370 <__alt_data_end+0xfc01e370>
   1e3d4:	00800434 	movhi	r2,16
   1e3d8:	8c000234 	orhi	r16,r17,8
   1e3dc:	10bfffc4 	addi	r2,r2,-1
   1e3e0:	3027883a 	mov	r19,r6
   1e3e4:	80a0703a 	and	r16,r16,r2
   1e3e8:	902d883a 	mov	r22,r18
   1e3ec:	003eac06 	br	1dea0 <__alt_data_end+0xfc01dea0>

0001e3f0 <__subdf3>:
   1e3f0:	02000434 	movhi	r8,16
   1e3f4:	423fffc4 	addi	r8,r8,-1
   1e3f8:	defffb04 	addi	sp,sp,-20
   1e3fc:	2a14703a 	and	r10,r5,r8
   1e400:	3812d53a 	srli	r9,r7,20
   1e404:	3a10703a 	and	r8,r7,r8
   1e408:	2006d77a 	srli	r3,r4,29
   1e40c:	3004d77a 	srli	r2,r6,29
   1e410:	dc000015 	stw	r16,0(sp)
   1e414:	501490fa 	slli	r10,r10,3
   1e418:	2820d53a 	srli	r16,r5,20
   1e41c:	401090fa 	slli	r8,r8,3
   1e420:	dc800215 	stw	r18,8(sp)
   1e424:	dc400115 	stw	r17,4(sp)
   1e428:	dfc00415 	stw	ra,16(sp)
   1e42c:	202290fa 	slli	r17,r4,3
   1e430:	dcc00315 	stw	r19,12(sp)
   1e434:	4a41ffcc 	andi	r9,r9,2047
   1e438:	0101ffc4 	movi	r4,2047
   1e43c:	2824d7fa 	srli	r18,r5,31
   1e440:	8401ffcc 	andi	r16,r16,2047
   1e444:	50c6b03a 	or	r3,r10,r3
   1e448:	380ed7fa 	srli	r7,r7,31
   1e44c:	408ab03a 	or	r5,r8,r2
   1e450:	300c90fa 	slli	r6,r6,3
   1e454:	49009626 	beq	r9,r4,1e6b0 <__subdf3+0x2c0>
   1e458:	39c0005c 	xori	r7,r7,1
   1e45c:	8245c83a 	sub	r2,r16,r9
   1e460:	3c807426 	beq	r7,r18,1e634 <__subdf3+0x244>
   1e464:	0080af0e 	bge	zero,r2,1e724 <__subdf3+0x334>
   1e468:	48002a1e 	bne	r9,zero,1e514 <__subdf3+0x124>
   1e46c:	2988b03a 	or	r4,r5,r6
   1e470:	20009a1e 	bne	r4,zero,1e6dc <__subdf3+0x2ec>
   1e474:	888001cc 	andi	r2,r17,7
   1e478:	10000726 	beq	r2,zero,1e498 <__subdf3+0xa8>
   1e47c:	888003cc 	andi	r2,r17,15
   1e480:	01000104 	movi	r4,4
   1e484:	11000426 	beq	r2,r4,1e498 <__subdf3+0xa8>
   1e488:	890b883a 	add	r5,r17,r4
   1e48c:	2c63803a 	cmpltu	r17,r5,r17
   1e490:	1c47883a 	add	r3,r3,r17
   1e494:	2823883a 	mov	r17,r5
   1e498:	1880202c 	andhi	r2,r3,128
   1e49c:	10005926 	beq	r2,zero,1e604 <__subdf3+0x214>
   1e4a0:	84000044 	addi	r16,r16,1
   1e4a4:	0081ffc4 	movi	r2,2047
   1e4a8:	8080be26 	beq	r16,r2,1e7a4 <__subdf3+0x3b4>
   1e4ac:	017fe034 	movhi	r5,65408
   1e4b0:	297fffc4 	addi	r5,r5,-1
   1e4b4:	1946703a 	and	r3,r3,r5
   1e4b8:	1804977a 	slli	r2,r3,29
   1e4bc:	1806927a 	slli	r3,r3,9
   1e4c0:	8822d0fa 	srli	r17,r17,3
   1e4c4:	8401ffcc 	andi	r16,r16,2047
   1e4c8:	180ad33a 	srli	r5,r3,12
   1e4cc:	9100004c 	andi	r4,r18,1
   1e4d0:	1444b03a 	or	r2,r2,r17
   1e4d4:	80c1ffcc 	andi	r3,r16,2047
   1e4d8:	1820953a 	slli	r16,r3,20
   1e4dc:	20c03fcc 	andi	r3,r4,255
   1e4e0:	180897fa 	slli	r4,r3,31
   1e4e4:	00c00434 	movhi	r3,16
   1e4e8:	18ffffc4 	addi	r3,r3,-1
   1e4ec:	28c6703a 	and	r3,r5,r3
   1e4f0:	1c06b03a 	or	r3,r3,r16
   1e4f4:	1906b03a 	or	r3,r3,r4
   1e4f8:	dfc00417 	ldw	ra,16(sp)
   1e4fc:	dcc00317 	ldw	r19,12(sp)
   1e500:	dc800217 	ldw	r18,8(sp)
   1e504:	dc400117 	ldw	r17,4(sp)
   1e508:	dc000017 	ldw	r16,0(sp)
   1e50c:	dec00504 	addi	sp,sp,20
   1e510:	f800283a 	ret
   1e514:	0101ffc4 	movi	r4,2047
   1e518:	813fd626 	beq	r16,r4,1e474 <__alt_data_end+0xfc01e474>
   1e51c:	29402034 	orhi	r5,r5,128
   1e520:	01000e04 	movi	r4,56
   1e524:	2080a316 	blt	r4,r2,1e7b4 <__subdf3+0x3c4>
   1e528:	010007c4 	movi	r4,31
   1e52c:	2080c616 	blt	r4,r2,1e848 <__subdf3+0x458>
   1e530:	01000804 	movi	r4,32
   1e534:	2089c83a 	sub	r4,r4,r2
   1e538:	2910983a 	sll	r8,r5,r4
   1e53c:	308ed83a 	srl	r7,r6,r2
   1e540:	3108983a 	sll	r4,r6,r4
   1e544:	2884d83a 	srl	r2,r5,r2
   1e548:	41ccb03a 	or	r6,r8,r7
   1e54c:	2008c03a 	cmpne	r4,r4,zero
   1e550:	310cb03a 	or	r6,r6,r4
   1e554:	898dc83a 	sub	r6,r17,r6
   1e558:	89a3803a 	cmpltu	r17,r17,r6
   1e55c:	1887c83a 	sub	r3,r3,r2
   1e560:	1c47c83a 	sub	r3,r3,r17
   1e564:	3023883a 	mov	r17,r6
   1e568:	1880202c 	andhi	r2,r3,128
   1e56c:	10002326 	beq	r2,zero,1e5fc <__subdf3+0x20c>
   1e570:	04c02034 	movhi	r19,128
   1e574:	9cffffc4 	addi	r19,r19,-1
   1e578:	1ce6703a 	and	r19,r3,r19
   1e57c:	98007a26 	beq	r19,zero,1e768 <__subdf3+0x378>
   1e580:	9809883a 	mov	r4,r19
   1e584:	000e37c0 	call	e37c <__clzsi2>
   1e588:	113ffe04 	addi	r4,r2,-8
   1e58c:	00c007c4 	movi	r3,31
   1e590:	19007b16 	blt	r3,r4,1e780 <__subdf3+0x390>
   1e594:	00800804 	movi	r2,32
   1e598:	1105c83a 	sub	r2,r2,r4
   1e59c:	8884d83a 	srl	r2,r17,r2
   1e5a0:	9906983a 	sll	r3,r19,r4
   1e5a4:	8922983a 	sll	r17,r17,r4
   1e5a8:	10c4b03a 	or	r2,r2,r3
   1e5ac:	24007816 	blt	r4,r16,1e790 <__subdf3+0x3a0>
   1e5b0:	2421c83a 	sub	r16,r4,r16
   1e5b4:	80c00044 	addi	r3,r16,1
   1e5b8:	010007c4 	movi	r4,31
   1e5bc:	20c09516 	blt	r4,r3,1e814 <__subdf3+0x424>
   1e5c0:	01400804 	movi	r5,32
   1e5c4:	28cbc83a 	sub	r5,r5,r3
   1e5c8:	88c8d83a 	srl	r4,r17,r3
   1e5cc:	8962983a 	sll	r17,r17,r5
   1e5d0:	114a983a 	sll	r5,r2,r5
   1e5d4:	10c6d83a 	srl	r3,r2,r3
   1e5d8:	8804c03a 	cmpne	r2,r17,zero
   1e5dc:	290ab03a 	or	r5,r5,r4
   1e5e0:	28a2b03a 	or	r17,r5,r2
   1e5e4:	0021883a 	mov	r16,zero
   1e5e8:	003fa206 	br	1e474 <__alt_data_end+0xfc01e474>
   1e5ec:	2090b03a 	or	r8,r4,r2
   1e5f0:	40018e26 	beq	r8,zero,1ec2c <__subdf3+0x83c>
   1e5f4:	1007883a 	mov	r3,r2
   1e5f8:	2023883a 	mov	r17,r4
   1e5fc:	888001cc 	andi	r2,r17,7
   1e600:	103f9e1e 	bne	r2,zero,1e47c <__alt_data_end+0xfc01e47c>
   1e604:	1804977a 	slli	r2,r3,29
   1e608:	8822d0fa 	srli	r17,r17,3
   1e60c:	1810d0fa 	srli	r8,r3,3
   1e610:	9100004c 	andi	r4,r18,1
   1e614:	1444b03a 	or	r2,r2,r17
   1e618:	00c1ffc4 	movi	r3,2047
   1e61c:	80c02826 	beq	r16,r3,1e6c0 <__subdf3+0x2d0>
   1e620:	01400434 	movhi	r5,16
   1e624:	297fffc4 	addi	r5,r5,-1
   1e628:	80e0703a 	and	r16,r16,r3
   1e62c:	414a703a 	and	r5,r8,r5
   1e630:	003fa806 	br	1e4d4 <__alt_data_end+0xfc01e4d4>
   1e634:	0080630e 	bge	zero,r2,1e7c4 <__subdf3+0x3d4>
   1e638:	48003026 	beq	r9,zero,1e6fc <__subdf3+0x30c>
   1e63c:	0101ffc4 	movi	r4,2047
   1e640:	813f8c26 	beq	r16,r4,1e474 <__alt_data_end+0xfc01e474>
   1e644:	29402034 	orhi	r5,r5,128
   1e648:	01000e04 	movi	r4,56
   1e64c:	2080a90e 	bge	r4,r2,1e8f4 <__subdf3+0x504>
   1e650:	298cb03a 	or	r6,r5,r6
   1e654:	3012c03a 	cmpne	r9,r6,zero
   1e658:	0005883a 	mov	r2,zero
   1e65c:	4c53883a 	add	r9,r9,r17
   1e660:	4c63803a 	cmpltu	r17,r9,r17
   1e664:	10c7883a 	add	r3,r2,r3
   1e668:	88c7883a 	add	r3,r17,r3
   1e66c:	4823883a 	mov	r17,r9
   1e670:	1880202c 	andhi	r2,r3,128
   1e674:	1000d026 	beq	r2,zero,1e9b8 <__subdf3+0x5c8>
   1e678:	84000044 	addi	r16,r16,1
   1e67c:	0081ffc4 	movi	r2,2047
   1e680:	8080fe26 	beq	r16,r2,1ea7c <__subdf3+0x68c>
   1e684:	00bfe034 	movhi	r2,65408
   1e688:	10bfffc4 	addi	r2,r2,-1
   1e68c:	1886703a 	and	r3,r3,r2
   1e690:	880ad07a 	srli	r5,r17,1
   1e694:	180497fa 	slli	r2,r3,31
   1e698:	8900004c 	andi	r4,r17,1
   1e69c:	2922b03a 	or	r17,r5,r4
   1e6a0:	1806d07a 	srli	r3,r3,1
   1e6a4:	1462b03a 	or	r17,r2,r17
   1e6a8:	3825883a 	mov	r18,r7
   1e6ac:	003f7106 	br	1e474 <__alt_data_end+0xfc01e474>
   1e6b0:	2984b03a 	or	r2,r5,r6
   1e6b4:	103f6826 	beq	r2,zero,1e458 <__alt_data_end+0xfc01e458>
   1e6b8:	39c03fcc 	andi	r7,r7,255
   1e6bc:	003f6706 	br	1e45c <__alt_data_end+0xfc01e45c>
   1e6c0:	4086b03a 	or	r3,r8,r2
   1e6c4:	18015226 	beq	r3,zero,1ec10 <__subdf3+0x820>
   1e6c8:	00c00434 	movhi	r3,16
   1e6cc:	41400234 	orhi	r5,r8,8
   1e6d0:	18ffffc4 	addi	r3,r3,-1
   1e6d4:	28ca703a 	and	r5,r5,r3
   1e6d8:	003f7e06 	br	1e4d4 <__alt_data_end+0xfc01e4d4>
   1e6dc:	10bfffc4 	addi	r2,r2,-1
   1e6e0:	1000491e 	bne	r2,zero,1e808 <__subdf3+0x418>
   1e6e4:	898fc83a 	sub	r7,r17,r6
   1e6e8:	89e3803a 	cmpltu	r17,r17,r7
   1e6ec:	1947c83a 	sub	r3,r3,r5
   1e6f0:	1c47c83a 	sub	r3,r3,r17
   1e6f4:	3823883a 	mov	r17,r7
   1e6f8:	003f9b06 	br	1e568 <__alt_data_end+0xfc01e568>
   1e6fc:	2988b03a 	or	r4,r5,r6
   1e700:	203f5c26 	beq	r4,zero,1e474 <__alt_data_end+0xfc01e474>
   1e704:	10bfffc4 	addi	r2,r2,-1
   1e708:	1000931e 	bne	r2,zero,1e958 <__subdf3+0x568>
   1e70c:	898d883a 	add	r6,r17,r6
   1e710:	3463803a 	cmpltu	r17,r6,r17
   1e714:	1947883a 	add	r3,r3,r5
   1e718:	88c7883a 	add	r3,r17,r3
   1e71c:	3023883a 	mov	r17,r6
   1e720:	003fd306 	br	1e670 <__alt_data_end+0xfc01e670>
   1e724:	1000541e 	bne	r2,zero,1e878 <__subdf3+0x488>
   1e728:	80800044 	addi	r2,r16,1
   1e72c:	1081ffcc 	andi	r2,r2,2047
   1e730:	01000044 	movi	r4,1
   1e734:	2080a20e 	bge	r4,r2,1e9c0 <__subdf3+0x5d0>
   1e738:	8989c83a 	sub	r4,r17,r6
   1e73c:	8905803a 	cmpltu	r2,r17,r4
   1e740:	1967c83a 	sub	r19,r3,r5
   1e744:	98a7c83a 	sub	r19,r19,r2
   1e748:	9880202c 	andhi	r2,r19,128
   1e74c:	10006326 	beq	r2,zero,1e8dc <__subdf3+0x4ec>
   1e750:	3463c83a 	sub	r17,r6,r17
   1e754:	28c7c83a 	sub	r3,r5,r3
   1e758:	344d803a 	cmpltu	r6,r6,r17
   1e75c:	19a7c83a 	sub	r19,r3,r6
   1e760:	3825883a 	mov	r18,r7
   1e764:	983f861e 	bne	r19,zero,1e580 <__alt_data_end+0xfc01e580>
   1e768:	8809883a 	mov	r4,r17
   1e76c:	000e37c0 	call	e37c <__clzsi2>
   1e770:	10800804 	addi	r2,r2,32
   1e774:	113ffe04 	addi	r4,r2,-8
   1e778:	00c007c4 	movi	r3,31
   1e77c:	193f850e 	bge	r3,r4,1e594 <__alt_data_end+0xfc01e594>
   1e780:	10bff604 	addi	r2,r2,-40
   1e784:	8884983a 	sll	r2,r17,r2
   1e788:	0023883a 	mov	r17,zero
   1e78c:	243f880e 	bge	r4,r16,1e5b0 <__alt_data_end+0xfc01e5b0>
   1e790:	00ffe034 	movhi	r3,65408
   1e794:	18ffffc4 	addi	r3,r3,-1
   1e798:	8121c83a 	sub	r16,r16,r4
   1e79c:	10c6703a 	and	r3,r2,r3
   1e7a0:	003f3406 	br	1e474 <__alt_data_end+0xfc01e474>
   1e7a4:	9100004c 	andi	r4,r18,1
   1e7a8:	000b883a 	mov	r5,zero
   1e7ac:	0005883a 	mov	r2,zero
   1e7b0:	003f4806 	br	1e4d4 <__alt_data_end+0xfc01e4d4>
   1e7b4:	298cb03a 	or	r6,r5,r6
   1e7b8:	300cc03a 	cmpne	r6,r6,zero
   1e7bc:	0005883a 	mov	r2,zero
   1e7c0:	003f6406 	br	1e554 <__alt_data_end+0xfc01e554>
   1e7c4:	10009a1e 	bne	r2,zero,1ea30 <__subdf3+0x640>
   1e7c8:	82400044 	addi	r9,r16,1
   1e7cc:	4881ffcc 	andi	r2,r9,2047
   1e7d0:	02800044 	movi	r10,1
   1e7d4:	5080670e 	bge	r10,r2,1e974 <__subdf3+0x584>
   1e7d8:	0081ffc4 	movi	r2,2047
   1e7dc:	4880af26 	beq	r9,r2,1ea9c <__subdf3+0x6ac>
   1e7e0:	898d883a 	add	r6,r17,r6
   1e7e4:	1945883a 	add	r2,r3,r5
   1e7e8:	3447803a 	cmpltu	r3,r6,r17
   1e7ec:	1887883a 	add	r3,r3,r2
   1e7f0:	182297fa 	slli	r17,r3,31
   1e7f4:	300cd07a 	srli	r6,r6,1
   1e7f8:	1806d07a 	srli	r3,r3,1
   1e7fc:	4821883a 	mov	r16,r9
   1e800:	89a2b03a 	or	r17,r17,r6
   1e804:	003f1b06 	br	1e474 <__alt_data_end+0xfc01e474>
   1e808:	0101ffc4 	movi	r4,2047
   1e80c:	813f441e 	bne	r16,r4,1e520 <__alt_data_end+0xfc01e520>
   1e810:	003f1806 	br	1e474 <__alt_data_end+0xfc01e474>
   1e814:	843ff844 	addi	r16,r16,-31
   1e818:	01400804 	movi	r5,32
   1e81c:	1408d83a 	srl	r4,r2,r16
   1e820:	19405026 	beq	r3,r5,1e964 <__subdf3+0x574>
   1e824:	01401004 	movi	r5,64
   1e828:	28c7c83a 	sub	r3,r5,r3
   1e82c:	10c4983a 	sll	r2,r2,r3
   1e830:	88a2b03a 	or	r17,r17,r2
   1e834:	8822c03a 	cmpne	r17,r17,zero
   1e838:	2462b03a 	or	r17,r4,r17
   1e83c:	0007883a 	mov	r3,zero
   1e840:	0021883a 	mov	r16,zero
   1e844:	003f6d06 	br	1e5fc <__alt_data_end+0xfc01e5fc>
   1e848:	11fff804 	addi	r7,r2,-32
   1e84c:	01000804 	movi	r4,32
   1e850:	29ced83a 	srl	r7,r5,r7
   1e854:	11004526 	beq	r2,r4,1e96c <__subdf3+0x57c>
   1e858:	01001004 	movi	r4,64
   1e85c:	2089c83a 	sub	r4,r4,r2
   1e860:	2904983a 	sll	r2,r5,r4
   1e864:	118cb03a 	or	r6,r2,r6
   1e868:	300cc03a 	cmpne	r6,r6,zero
   1e86c:	398cb03a 	or	r6,r7,r6
   1e870:	0005883a 	mov	r2,zero
   1e874:	003f3706 	br	1e554 <__alt_data_end+0xfc01e554>
   1e878:	80002a26 	beq	r16,zero,1e924 <__subdf3+0x534>
   1e87c:	0101ffc4 	movi	r4,2047
   1e880:	49006626 	beq	r9,r4,1ea1c <__subdf3+0x62c>
   1e884:	0085c83a 	sub	r2,zero,r2
   1e888:	18c02034 	orhi	r3,r3,128
   1e88c:	01000e04 	movi	r4,56
   1e890:	20807e16 	blt	r4,r2,1ea8c <__subdf3+0x69c>
   1e894:	010007c4 	movi	r4,31
   1e898:	2080e716 	blt	r4,r2,1ec38 <__subdf3+0x848>
   1e89c:	01000804 	movi	r4,32
   1e8a0:	2089c83a 	sub	r4,r4,r2
   1e8a4:	1914983a 	sll	r10,r3,r4
   1e8a8:	8890d83a 	srl	r8,r17,r2
   1e8ac:	8908983a 	sll	r4,r17,r4
   1e8b0:	1884d83a 	srl	r2,r3,r2
   1e8b4:	5222b03a 	or	r17,r10,r8
   1e8b8:	2006c03a 	cmpne	r3,r4,zero
   1e8bc:	88e2b03a 	or	r17,r17,r3
   1e8c0:	3463c83a 	sub	r17,r6,r17
   1e8c4:	2885c83a 	sub	r2,r5,r2
   1e8c8:	344d803a 	cmpltu	r6,r6,r17
   1e8cc:	1187c83a 	sub	r3,r2,r6
   1e8d0:	4821883a 	mov	r16,r9
   1e8d4:	3825883a 	mov	r18,r7
   1e8d8:	003f2306 	br	1e568 <__alt_data_end+0xfc01e568>
   1e8dc:	24d0b03a 	or	r8,r4,r19
   1e8e0:	40001b1e 	bne	r8,zero,1e950 <__subdf3+0x560>
   1e8e4:	0005883a 	mov	r2,zero
   1e8e8:	0009883a 	mov	r4,zero
   1e8ec:	0021883a 	mov	r16,zero
   1e8f0:	003f4906 	br	1e618 <__alt_data_end+0xfc01e618>
   1e8f4:	010007c4 	movi	r4,31
   1e8f8:	20803a16 	blt	r4,r2,1e9e4 <__subdf3+0x5f4>
   1e8fc:	01000804 	movi	r4,32
   1e900:	2089c83a 	sub	r4,r4,r2
   1e904:	2912983a 	sll	r9,r5,r4
   1e908:	3090d83a 	srl	r8,r6,r2
   1e90c:	3108983a 	sll	r4,r6,r4
   1e910:	2884d83a 	srl	r2,r5,r2
   1e914:	4a12b03a 	or	r9,r9,r8
   1e918:	2008c03a 	cmpne	r4,r4,zero
   1e91c:	4912b03a 	or	r9,r9,r4
   1e920:	003f4e06 	br	1e65c <__alt_data_end+0xfc01e65c>
   1e924:	1c48b03a 	or	r4,r3,r17
   1e928:	20003c26 	beq	r4,zero,1ea1c <__subdf3+0x62c>
   1e92c:	0084303a 	nor	r2,zero,r2
   1e930:	1000381e 	bne	r2,zero,1ea14 <__subdf3+0x624>
   1e934:	3463c83a 	sub	r17,r6,r17
   1e938:	28c5c83a 	sub	r2,r5,r3
   1e93c:	344d803a 	cmpltu	r6,r6,r17
   1e940:	1187c83a 	sub	r3,r2,r6
   1e944:	4821883a 	mov	r16,r9
   1e948:	3825883a 	mov	r18,r7
   1e94c:	003f0606 	br	1e568 <__alt_data_end+0xfc01e568>
   1e950:	2023883a 	mov	r17,r4
   1e954:	003f0906 	br	1e57c <__alt_data_end+0xfc01e57c>
   1e958:	0101ffc4 	movi	r4,2047
   1e95c:	813f3a1e 	bne	r16,r4,1e648 <__alt_data_end+0xfc01e648>
   1e960:	003ec406 	br	1e474 <__alt_data_end+0xfc01e474>
   1e964:	0005883a 	mov	r2,zero
   1e968:	003fb106 	br	1e830 <__alt_data_end+0xfc01e830>
   1e96c:	0005883a 	mov	r2,zero
   1e970:	003fbc06 	br	1e864 <__alt_data_end+0xfc01e864>
   1e974:	1c44b03a 	or	r2,r3,r17
   1e978:	80008e1e 	bne	r16,zero,1ebb4 <__subdf3+0x7c4>
   1e97c:	1000c826 	beq	r2,zero,1eca0 <__subdf3+0x8b0>
   1e980:	2984b03a 	or	r2,r5,r6
   1e984:	103ebb26 	beq	r2,zero,1e474 <__alt_data_end+0xfc01e474>
   1e988:	8989883a 	add	r4,r17,r6
   1e98c:	1945883a 	add	r2,r3,r5
   1e990:	2447803a 	cmpltu	r3,r4,r17
   1e994:	1887883a 	add	r3,r3,r2
   1e998:	1880202c 	andhi	r2,r3,128
   1e99c:	2023883a 	mov	r17,r4
   1e9a0:	103f1626 	beq	r2,zero,1e5fc <__alt_data_end+0xfc01e5fc>
   1e9a4:	00bfe034 	movhi	r2,65408
   1e9a8:	10bfffc4 	addi	r2,r2,-1
   1e9ac:	5021883a 	mov	r16,r10
   1e9b0:	1886703a 	and	r3,r3,r2
   1e9b4:	003eaf06 	br	1e474 <__alt_data_end+0xfc01e474>
   1e9b8:	3825883a 	mov	r18,r7
   1e9bc:	003f0f06 	br	1e5fc <__alt_data_end+0xfc01e5fc>
   1e9c0:	1c44b03a 	or	r2,r3,r17
   1e9c4:	8000251e 	bne	r16,zero,1ea5c <__subdf3+0x66c>
   1e9c8:	1000661e 	bne	r2,zero,1eb64 <__subdf3+0x774>
   1e9cc:	2990b03a 	or	r8,r5,r6
   1e9d0:	40009626 	beq	r8,zero,1ec2c <__subdf3+0x83c>
   1e9d4:	2807883a 	mov	r3,r5
   1e9d8:	3023883a 	mov	r17,r6
   1e9dc:	3825883a 	mov	r18,r7
   1e9e0:	003ea406 	br	1e474 <__alt_data_end+0xfc01e474>
   1e9e4:	127ff804 	addi	r9,r2,-32
   1e9e8:	01000804 	movi	r4,32
   1e9ec:	2a52d83a 	srl	r9,r5,r9
   1e9f0:	11008c26 	beq	r2,r4,1ec24 <__subdf3+0x834>
   1e9f4:	01001004 	movi	r4,64
   1e9f8:	2085c83a 	sub	r2,r4,r2
   1e9fc:	2884983a 	sll	r2,r5,r2
   1ea00:	118cb03a 	or	r6,r2,r6
   1ea04:	300cc03a 	cmpne	r6,r6,zero
   1ea08:	4992b03a 	or	r9,r9,r6
   1ea0c:	0005883a 	mov	r2,zero
   1ea10:	003f1206 	br	1e65c <__alt_data_end+0xfc01e65c>
   1ea14:	0101ffc4 	movi	r4,2047
   1ea18:	493f9c1e 	bne	r9,r4,1e88c <__alt_data_end+0xfc01e88c>
   1ea1c:	2807883a 	mov	r3,r5
   1ea20:	3023883a 	mov	r17,r6
   1ea24:	4821883a 	mov	r16,r9
   1ea28:	3825883a 	mov	r18,r7
   1ea2c:	003e9106 	br	1e474 <__alt_data_end+0xfc01e474>
   1ea30:	80001f1e 	bne	r16,zero,1eab0 <__subdf3+0x6c0>
   1ea34:	1c48b03a 	or	r4,r3,r17
   1ea38:	20005a26 	beq	r4,zero,1eba4 <__subdf3+0x7b4>
   1ea3c:	0084303a 	nor	r2,zero,r2
   1ea40:	1000561e 	bne	r2,zero,1eb9c <__subdf3+0x7ac>
   1ea44:	89a3883a 	add	r17,r17,r6
   1ea48:	1945883a 	add	r2,r3,r5
   1ea4c:	898d803a 	cmpltu	r6,r17,r6
   1ea50:	3087883a 	add	r3,r6,r2
   1ea54:	4821883a 	mov	r16,r9
   1ea58:	003f0506 	br	1e670 <__alt_data_end+0xfc01e670>
   1ea5c:	10002b1e 	bne	r2,zero,1eb0c <__subdf3+0x71c>
   1ea60:	2984b03a 	or	r2,r5,r6
   1ea64:	10008026 	beq	r2,zero,1ec68 <__subdf3+0x878>
   1ea68:	2807883a 	mov	r3,r5
   1ea6c:	3023883a 	mov	r17,r6
   1ea70:	3825883a 	mov	r18,r7
   1ea74:	0401ffc4 	movi	r16,2047
   1ea78:	003e7e06 	br	1e474 <__alt_data_end+0xfc01e474>
   1ea7c:	3809883a 	mov	r4,r7
   1ea80:	0011883a 	mov	r8,zero
   1ea84:	0005883a 	mov	r2,zero
   1ea88:	003ee306 	br	1e618 <__alt_data_end+0xfc01e618>
   1ea8c:	1c62b03a 	or	r17,r3,r17
   1ea90:	8822c03a 	cmpne	r17,r17,zero
   1ea94:	0005883a 	mov	r2,zero
   1ea98:	003f8906 	br	1e8c0 <__alt_data_end+0xfc01e8c0>
   1ea9c:	3809883a 	mov	r4,r7
   1eaa0:	4821883a 	mov	r16,r9
   1eaa4:	0011883a 	mov	r8,zero
   1eaa8:	0005883a 	mov	r2,zero
   1eaac:	003eda06 	br	1e618 <__alt_data_end+0xfc01e618>
   1eab0:	0101ffc4 	movi	r4,2047
   1eab4:	49003b26 	beq	r9,r4,1eba4 <__subdf3+0x7b4>
   1eab8:	0085c83a 	sub	r2,zero,r2
   1eabc:	18c02034 	orhi	r3,r3,128
   1eac0:	01000e04 	movi	r4,56
   1eac4:	20806e16 	blt	r4,r2,1ec80 <__subdf3+0x890>
   1eac8:	010007c4 	movi	r4,31
   1eacc:	20807716 	blt	r4,r2,1ecac <__subdf3+0x8bc>
   1ead0:	01000804 	movi	r4,32
   1ead4:	2089c83a 	sub	r4,r4,r2
   1ead8:	1914983a 	sll	r10,r3,r4
   1eadc:	8890d83a 	srl	r8,r17,r2
   1eae0:	8908983a 	sll	r4,r17,r4
   1eae4:	1884d83a 	srl	r2,r3,r2
   1eae8:	5222b03a 	or	r17,r10,r8
   1eaec:	2006c03a 	cmpne	r3,r4,zero
   1eaf0:	88e2b03a 	or	r17,r17,r3
   1eaf4:	89a3883a 	add	r17,r17,r6
   1eaf8:	1145883a 	add	r2,r2,r5
   1eafc:	898d803a 	cmpltu	r6,r17,r6
   1eb00:	3087883a 	add	r3,r6,r2
   1eb04:	4821883a 	mov	r16,r9
   1eb08:	003ed906 	br	1e670 <__alt_data_end+0xfc01e670>
   1eb0c:	2984b03a 	or	r2,r5,r6
   1eb10:	10004226 	beq	r2,zero,1ec1c <__subdf3+0x82c>
   1eb14:	1808d0fa 	srli	r4,r3,3
   1eb18:	8822d0fa 	srli	r17,r17,3
   1eb1c:	1806977a 	slli	r3,r3,29
   1eb20:	2080022c 	andhi	r2,r4,8
   1eb24:	1c62b03a 	or	r17,r3,r17
   1eb28:	10000826 	beq	r2,zero,1eb4c <__subdf3+0x75c>
   1eb2c:	2812d0fa 	srli	r9,r5,3
   1eb30:	4880022c 	andhi	r2,r9,8
   1eb34:	1000051e 	bne	r2,zero,1eb4c <__subdf3+0x75c>
   1eb38:	300cd0fa 	srli	r6,r6,3
   1eb3c:	2804977a 	slli	r2,r5,29
   1eb40:	4809883a 	mov	r4,r9
   1eb44:	3825883a 	mov	r18,r7
   1eb48:	11a2b03a 	or	r17,r2,r6
   1eb4c:	8806d77a 	srli	r3,r17,29
   1eb50:	200890fa 	slli	r4,r4,3
   1eb54:	882290fa 	slli	r17,r17,3
   1eb58:	0401ffc4 	movi	r16,2047
   1eb5c:	1906b03a 	or	r3,r3,r4
   1eb60:	003e4406 	br	1e474 <__alt_data_end+0xfc01e474>
   1eb64:	2984b03a 	or	r2,r5,r6
   1eb68:	103e4226 	beq	r2,zero,1e474 <__alt_data_end+0xfc01e474>
   1eb6c:	8989c83a 	sub	r4,r17,r6
   1eb70:	8911803a 	cmpltu	r8,r17,r4
   1eb74:	1945c83a 	sub	r2,r3,r5
   1eb78:	1205c83a 	sub	r2,r2,r8
   1eb7c:	1200202c 	andhi	r8,r2,128
   1eb80:	403e9a26 	beq	r8,zero,1e5ec <__alt_data_end+0xfc01e5ec>
   1eb84:	3463c83a 	sub	r17,r6,r17
   1eb88:	28c5c83a 	sub	r2,r5,r3
   1eb8c:	344d803a 	cmpltu	r6,r6,r17
   1eb90:	1187c83a 	sub	r3,r2,r6
   1eb94:	3825883a 	mov	r18,r7
   1eb98:	003e3606 	br	1e474 <__alt_data_end+0xfc01e474>
   1eb9c:	0101ffc4 	movi	r4,2047
   1eba0:	493fc71e 	bne	r9,r4,1eac0 <__alt_data_end+0xfc01eac0>
   1eba4:	2807883a 	mov	r3,r5
   1eba8:	3023883a 	mov	r17,r6
   1ebac:	4821883a 	mov	r16,r9
   1ebb0:	003e3006 	br	1e474 <__alt_data_end+0xfc01e474>
   1ebb4:	10003626 	beq	r2,zero,1ec90 <__subdf3+0x8a0>
   1ebb8:	2984b03a 	or	r2,r5,r6
   1ebbc:	10001726 	beq	r2,zero,1ec1c <__subdf3+0x82c>
   1ebc0:	1808d0fa 	srli	r4,r3,3
   1ebc4:	8822d0fa 	srli	r17,r17,3
   1ebc8:	1806977a 	slli	r3,r3,29
   1ebcc:	2080022c 	andhi	r2,r4,8
   1ebd0:	1c62b03a 	or	r17,r3,r17
   1ebd4:	10000726 	beq	r2,zero,1ebf4 <__subdf3+0x804>
   1ebd8:	2812d0fa 	srli	r9,r5,3
   1ebdc:	4880022c 	andhi	r2,r9,8
   1ebe0:	1000041e 	bne	r2,zero,1ebf4 <__subdf3+0x804>
   1ebe4:	300cd0fa 	srli	r6,r6,3
   1ebe8:	2804977a 	slli	r2,r5,29
   1ebec:	4809883a 	mov	r4,r9
   1ebf0:	11a2b03a 	or	r17,r2,r6
   1ebf4:	8806d77a 	srli	r3,r17,29
   1ebf8:	200890fa 	slli	r4,r4,3
   1ebfc:	882290fa 	slli	r17,r17,3
   1ec00:	3825883a 	mov	r18,r7
   1ec04:	1906b03a 	or	r3,r3,r4
   1ec08:	0401ffc4 	movi	r16,2047
   1ec0c:	003e1906 	br	1e474 <__alt_data_end+0xfc01e474>
   1ec10:	000b883a 	mov	r5,zero
   1ec14:	0005883a 	mov	r2,zero
   1ec18:	003e2e06 	br	1e4d4 <__alt_data_end+0xfc01e4d4>
   1ec1c:	0401ffc4 	movi	r16,2047
   1ec20:	003e1406 	br	1e474 <__alt_data_end+0xfc01e474>
   1ec24:	0005883a 	mov	r2,zero
   1ec28:	003f7506 	br	1ea00 <__alt_data_end+0xfc01ea00>
   1ec2c:	0005883a 	mov	r2,zero
   1ec30:	0009883a 	mov	r4,zero
   1ec34:	003e7806 	br	1e618 <__alt_data_end+0xfc01e618>
   1ec38:	123ff804 	addi	r8,r2,-32
   1ec3c:	01000804 	movi	r4,32
   1ec40:	1a10d83a 	srl	r8,r3,r8
   1ec44:	11002526 	beq	r2,r4,1ecdc <__subdf3+0x8ec>
   1ec48:	01001004 	movi	r4,64
   1ec4c:	2085c83a 	sub	r2,r4,r2
   1ec50:	1884983a 	sll	r2,r3,r2
   1ec54:	1444b03a 	or	r2,r2,r17
   1ec58:	1004c03a 	cmpne	r2,r2,zero
   1ec5c:	40a2b03a 	or	r17,r8,r2
   1ec60:	0005883a 	mov	r2,zero
   1ec64:	003f1606 	br	1e8c0 <__alt_data_end+0xfc01e8c0>
   1ec68:	02000434 	movhi	r8,16
   1ec6c:	0009883a 	mov	r4,zero
   1ec70:	423fffc4 	addi	r8,r8,-1
   1ec74:	00bfffc4 	movi	r2,-1
   1ec78:	0401ffc4 	movi	r16,2047
   1ec7c:	003e6606 	br	1e618 <__alt_data_end+0xfc01e618>
   1ec80:	1c62b03a 	or	r17,r3,r17
   1ec84:	8822c03a 	cmpne	r17,r17,zero
   1ec88:	0005883a 	mov	r2,zero
   1ec8c:	003f9906 	br	1eaf4 <__alt_data_end+0xfc01eaf4>
   1ec90:	2807883a 	mov	r3,r5
   1ec94:	3023883a 	mov	r17,r6
   1ec98:	0401ffc4 	movi	r16,2047
   1ec9c:	003df506 	br	1e474 <__alt_data_end+0xfc01e474>
   1eca0:	2807883a 	mov	r3,r5
   1eca4:	3023883a 	mov	r17,r6
   1eca8:	003df206 	br	1e474 <__alt_data_end+0xfc01e474>
   1ecac:	123ff804 	addi	r8,r2,-32
   1ecb0:	01000804 	movi	r4,32
   1ecb4:	1a10d83a 	srl	r8,r3,r8
   1ecb8:	11000a26 	beq	r2,r4,1ece4 <__subdf3+0x8f4>
   1ecbc:	01001004 	movi	r4,64
   1ecc0:	2085c83a 	sub	r2,r4,r2
   1ecc4:	1884983a 	sll	r2,r3,r2
   1ecc8:	1444b03a 	or	r2,r2,r17
   1eccc:	1004c03a 	cmpne	r2,r2,zero
   1ecd0:	40a2b03a 	or	r17,r8,r2
   1ecd4:	0005883a 	mov	r2,zero
   1ecd8:	003f8606 	br	1eaf4 <__alt_data_end+0xfc01eaf4>
   1ecdc:	0005883a 	mov	r2,zero
   1ece0:	003fdc06 	br	1ec54 <__alt_data_end+0xfc01ec54>
   1ece4:	0005883a 	mov	r2,zero
   1ece8:	003ff706 	br	1ecc8 <__alt_data_end+0xfc01ecc8>

0001ecec <__fixdfsi>:
   1ecec:	280cd53a 	srli	r6,r5,20
   1ecf0:	00c00434 	movhi	r3,16
   1ecf4:	18ffffc4 	addi	r3,r3,-1
   1ecf8:	3181ffcc 	andi	r6,r6,2047
   1ecfc:	01c0ff84 	movi	r7,1022
   1ed00:	28c6703a 	and	r3,r5,r3
   1ed04:	280ad7fa 	srli	r5,r5,31
   1ed08:	3980120e 	bge	r7,r6,1ed54 <__fixdfsi+0x68>
   1ed0c:	00810744 	movi	r2,1053
   1ed10:	11800c16 	blt	r2,r6,1ed44 <__fixdfsi+0x58>
   1ed14:	00810cc4 	movi	r2,1075
   1ed18:	1185c83a 	sub	r2,r2,r6
   1ed1c:	01c007c4 	movi	r7,31
   1ed20:	18c00434 	orhi	r3,r3,16
   1ed24:	38800d16 	blt	r7,r2,1ed5c <__fixdfsi+0x70>
   1ed28:	31befb44 	addi	r6,r6,-1043
   1ed2c:	2084d83a 	srl	r2,r4,r2
   1ed30:	1986983a 	sll	r3,r3,r6
   1ed34:	1884b03a 	or	r2,r3,r2
   1ed38:	28000726 	beq	r5,zero,1ed58 <__fixdfsi+0x6c>
   1ed3c:	0085c83a 	sub	r2,zero,r2
   1ed40:	f800283a 	ret
   1ed44:	00a00034 	movhi	r2,32768
   1ed48:	10bfffc4 	addi	r2,r2,-1
   1ed4c:	2885883a 	add	r2,r5,r2
   1ed50:	f800283a 	ret
   1ed54:	0005883a 	mov	r2,zero
   1ed58:	f800283a 	ret
   1ed5c:	008104c4 	movi	r2,1043
   1ed60:	1185c83a 	sub	r2,r2,r6
   1ed64:	1884d83a 	srl	r2,r3,r2
   1ed68:	003ff306 	br	1ed38 <__alt_data_end+0xfc01ed38>

0001ed6c <__floatsidf>:
   1ed6c:	defffd04 	addi	sp,sp,-12
   1ed70:	dfc00215 	stw	ra,8(sp)
   1ed74:	dc400115 	stw	r17,4(sp)
   1ed78:	dc000015 	stw	r16,0(sp)
   1ed7c:	20002b26 	beq	r4,zero,1ee2c <__floatsidf+0xc0>
   1ed80:	2023883a 	mov	r17,r4
   1ed84:	2020d7fa 	srli	r16,r4,31
   1ed88:	20002d16 	blt	r4,zero,1ee40 <__floatsidf+0xd4>
   1ed8c:	8809883a 	mov	r4,r17
   1ed90:	000e37c0 	call	e37c <__clzsi2>
   1ed94:	01410784 	movi	r5,1054
   1ed98:	288bc83a 	sub	r5,r5,r2
   1ed9c:	01010cc4 	movi	r4,1075
   1eda0:	2149c83a 	sub	r4,r4,r5
   1eda4:	00c007c4 	movi	r3,31
   1eda8:	1900160e 	bge	r3,r4,1ee04 <__floatsidf+0x98>
   1edac:	00c104c4 	movi	r3,1043
   1edb0:	1947c83a 	sub	r3,r3,r5
   1edb4:	88c6983a 	sll	r3,r17,r3
   1edb8:	00800434 	movhi	r2,16
   1edbc:	10bfffc4 	addi	r2,r2,-1
   1edc0:	1886703a 	and	r3,r3,r2
   1edc4:	2941ffcc 	andi	r5,r5,2047
   1edc8:	800d883a 	mov	r6,r16
   1edcc:	0005883a 	mov	r2,zero
   1edd0:	280a953a 	slli	r5,r5,20
   1edd4:	31803fcc 	andi	r6,r6,255
   1edd8:	01000434 	movhi	r4,16
   1eddc:	300c97fa 	slli	r6,r6,31
   1ede0:	213fffc4 	addi	r4,r4,-1
   1ede4:	1906703a 	and	r3,r3,r4
   1ede8:	1946b03a 	or	r3,r3,r5
   1edec:	1986b03a 	or	r3,r3,r6
   1edf0:	dfc00217 	ldw	ra,8(sp)
   1edf4:	dc400117 	ldw	r17,4(sp)
   1edf8:	dc000017 	ldw	r16,0(sp)
   1edfc:	dec00304 	addi	sp,sp,12
   1ee00:	f800283a 	ret
   1ee04:	00c002c4 	movi	r3,11
   1ee08:	1887c83a 	sub	r3,r3,r2
   1ee0c:	88c6d83a 	srl	r3,r17,r3
   1ee10:	8904983a 	sll	r2,r17,r4
   1ee14:	01000434 	movhi	r4,16
   1ee18:	213fffc4 	addi	r4,r4,-1
   1ee1c:	2941ffcc 	andi	r5,r5,2047
   1ee20:	1906703a 	and	r3,r3,r4
   1ee24:	800d883a 	mov	r6,r16
   1ee28:	003fe906 	br	1edd0 <__alt_data_end+0xfc01edd0>
   1ee2c:	000d883a 	mov	r6,zero
   1ee30:	000b883a 	mov	r5,zero
   1ee34:	0007883a 	mov	r3,zero
   1ee38:	0005883a 	mov	r2,zero
   1ee3c:	003fe406 	br	1edd0 <__alt_data_end+0xfc01edd0>
   1ee40:	0123c83a 	sub	r17,zero,r4
   1ee44:	003fd106 	br	1ed8c <__alt_data_end+0xfc01ed8c>

0001ee48 <__floatunsidf>:
   1ee48:	defffe04 	addi	sp,sp,-8
   1ee4c:	dc000015 	stw	r16,0(sp)
   1ee50:	dfc00115 	stw	ra,4(sp)
   1ee54:	2021883a 	mov	r16,r4
   1ee58:	20002226 	beq	r4,zero,1eee4 <__floatunsidf+0x9c>
   1ee5c:	000e37c0 	call	e37c <__clzsi2>
   1ee60:	01010784 	movi	r4,1054
   1ee64:	2089c83a 	sub	r4,r4,r2
   1ee68:	01810cc4 	movi	r6,1075
   1ee6c:	310dc83a 	sub	r6,r6,r4
   1ee70:	00c007c4 	movi	r3,31
   1ee74:	1980120e 	bge	r3,r6,1eec0 <__floatunsidf+0x78>
   1ee78:	00c104c4 	movi	r3,1043
   1ee7c:	1907c83a 	sub	r3,r3,r4
   1ee80:	80ca983a 	sll	r5,r16,r3
   1ee84:	00800434 	movhi	r2,16
   1ee88:	10bfffc4 	addi	r2,r2,-1
   1ee8c:	2101ffcc 	andi	r4,r4,2047
   1ee90:	0021883a 	mov	r16,zero
   1ee94:	288a703a 	and	r5,r5,r2
   1ee98:	2008953a 	slli	r4,r4,20
   1ee9c:	00c00434 	movhi	r3,16
   1eea0:	18ffffc4 	addi	r3,r3,-1
   1eea4:	28c6703a 	and	r3,r5,r3
   1eea8:	8005883a 	mov	r2,r16
   1eeac:	1906b03a 	or	r3,r3,r4
   1eeb0:	dfc00117 	ldw	ra,4(sp)
   1eeb4:	dc000017 	ldw	r16,0(sp)
   1eeb8:	dec00204 	addi	sp,sp,8
   1eebc:	f800283a 	ret
   1eec0:	00c002c4 	movi	r3,11
   1eec4:	188bc83a 	sub	r5,r3,r2
   1eec8:	814ad83a 	srl	r5,r16,r5
   1eecc:	00c00434 	movhi	r3,16
   1eed0:	18ffffc4 	addi	r3,r3,-1
   1eed4:	81a0983a 	sll	r16,r16,r6
   1eed8:	2101ffcc 	andi	r4,r4,2047
   1eedc:	28ca703a 	and	r5,r5,r3
   1eee0:	003fed06 	br	1ee98 <__alt_data_end+0xfc01ee98>
   1eee4:	0009883a 	mov	r4,zero
   1eee8:	000b883a 	mov	r5,zero
   1eeec:	003fea06 	br	1ee98 <__alt_data_end+0xfc01ee98>

0001eef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1eef0:	defffe04 	addi	sp,sp,-8
   1eef4:	dfc00115 	stw	ra,4(sp)
   1eef8:	df000015 	stw	fp,0(sp)
   1eefc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ef00:	d0a5b917 	ldw	r2,-26908(gp)
   1ef04:	10000326 	beq	r2,zero,1ef14 <alt_get_errno+0x24>
   1ef08:	d0a5b917 	ldw	r2,-26908(gp)
   1ef0c:	103ee83a 	callr	r2
   1ef10:	00000106 	br	1ef18 <alt_get_errno+0x28>
   1ef14:	d0b24304 	addi	r2,gp,-14068
}
   1ef18:	e037883a 	mov	sp,fp
   1ef1c:	dfc00117 	ldw	ra,4(sp)
   1ef20:	df000017 	ldw	fp,0(sp)
   1ef24:	dec00204 	addi	sp,sp,8
   1ef28:	f800283a 	ret

0001ef2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ef2c:	defffb04 	addi	sp,sp,-20
   1ef30:	dfc00415 	stw	ra,16(sp)
   1ef34:	df000315 	stw	fp,12(sp)
   1ef38:	df000304 	addi	fp,sp,12
   1ef3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ef40:	e0bfff17 	ldw	r2,-4(fp)
   1ef44:	10000816 	blt	r2,zero,1ef68 <close+0x3c>
   1ef48:	01400304 	movi	r5,12
   1ef4c:	e13fff17 	ldw	r4,-4(fp)
   1ef50:	000cec40 	call	cec4 <__mulsi3>
   1ef54:	1007883a 	mov	r3,r2
   1ef58:	008000f4 	movhi	r2,3
   1ef5c:	10ad5204 	addi	r2,r2,-19128
   1ef60:	1885883a 	add	r2,r3,r2
   1ef64:	00000106 	br	1ef6c <close+0x40>
   1ef68:	0005883a 	mov	r2,zero
   1ef6c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ef70:	e0bffd17 	ldw	r2,-12(fp)
   1ef74:	10001926 	beq	r2,zero,1efdc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ef78:	e0bffd17 	ldw	r2,-12(fp)
   1ef7c:	10800017 	ldw	r2,0(r2)
   1ef80:	10800417 	ldw	r2,16(r2)
   1ef84:	10000626 	beq	r2,zero,1efa0 <close+0x74>
   1ef88:	e0bffd17 	ldw	r2,-12(fp)
   1ef8c:	10800017 	ldw	r2,0(r2)
   1ef90:	10800417 	ldw	r2,16(r2)
   1ef94:	e13ffd17 	ldw	r4,-12(fp)
   1ef98:	103ee83a 	callr	r2
   1ef9c:	00000106 	br	1efa4 <close+0x78>
   1efa0:	0005883a 	mov	r2,zero
   1efa4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1efa8:	e13fff17 	ldw	r4,-4(fp)
   1efac:	001f7d40 	call	1f7d4 <alt_release_fd>
    if (rval < 0)
   1efb0:	e0bffe17 	ldw	r2,-8(fp)
   1efb4:	1000070e 	bge	r2,zero,1efd4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1efb8:	001eef00 	call	1eef0 <alt_get_errno>
   1efbc:	1007883a 	mov	r3,r2
   1efc0:	e0bffe17 	ldw	r2,-8(fp)
   1efc4:	0085c83a 	sub	r2,zero,r2
   1efc8:	18800015 	stw	r2,0(r3)
      return -1;
   1efcc:	00bfffc4 	movi	r2,-1
   1efd0:	00000706 	br	1eff0 <close+0xc4>
    }
    return 0;
   1efd4:	0005883a 	mov	r2,zero
   1efd8:	00000506 	br	1eff0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1efdc:	001eef00 	call	1eef0 <alt_get_errno>
   1efe0:	1007883a 	mov	r3,r2
   1efe4:	00801444 	movi	r2,81
   1efe8:	18800015 	stw	r2,0(r3)
    return -1;
   1efec:	00bfffc4 	movi	r2,-1
  }
}
   1eff0:	e037883a 	mov	sp,fp
   1eff4:	dfc00117 	ldw	ra,4(sp)
   1eff8:	df000017 	ldw	fp,0(sp)
   1effc:	dec00204 	addi	sp,sp,8
   1f000:	f800283a 	ret

0001f004 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1f004:	defffc04 	addi	sp,sp,-16
   1f008:	df000315 	stw	fp,12(sp)
   1f00c:	df000304 	addi	fp,sp,12
   1f010:	e13ffd15 	stw	r4,-12(fp)
   1f014:	e17ffe15 	stw	r5,-8(fp)
   1f018:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1f01c:	e0bfff17 	ldw	r2,-4(fp)
}
   1f020:	e037883a 	mov	sp,fp
   1f024:	df000017 	ldw	fp,0(sp)
   1f028:	dec00104 	addi	sp,sp,4
   1f02c:	f800283a 	ret

0001f030 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f030:	defffd04 	addi	sp,sp,-12
   1f034:	df000215 	stw	fp,8(sp)
   1f038:	df000204 	addi	fp,sp,8
   1f03c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f040:	0001883a 	nop
   1f044:	e0bfff17 	ldw	r2,-4(fp)
   1f048:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f04c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f050:	10000226 	beq	r2,zero,1f05c <_exit+0x2c>
    ALT_SIM_FAIL();
   1f054:	002af070 	cmpltui	zero,zero,43969
   1f058:	00000106 	br	1f060 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1f05c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f060:	003fff06 	br	1f060 <__alt_data_end+0xfc01f060>

0001f064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f064:	defffe04 	addi	sp,sp,-8
   1f068:	dfc00115 	stw	ra,4(sp)
   1f06c:	df000015 	stw	fp,0(sp)
   1f070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f074:	d0a5b917 	ldw	r2,-26908(gp)
   1f078:	10000326 	beq	r2,zero,1f088 <alt_get_errno+0x24>
   1f07c:	d0a5b917 	ldw	r2,-26908(gp)
   1f080:	103ee83a 	callr	r2
   1f084:	00000106 	br	1f08c <alt_get_errno+0x28>
   1f088:	d0b24304 	addi	r2,gp,-14068
}
   1f08c:	e037883a 	mov	sp,fp
   1f090:	dfc00117 	ldw	ra,4(sp)
   1f094:	df000017 	ldw	fp,0(sp)
   1f098:	dec00204 	addi	sp,sp,8
   1f09c:	f800283a 	ret

0001f0a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1f0a0:	defffb04 	addi	sp,sp,-20
   1f0a4:	dfc00415 	stw	ra,16(sp)
   1f0a8:	df000315 	stw	fp,12(sp)
   1f0ac:	df000304 	addi	fp,sp,12
   1f0b0:	e13ffe15 	stw	r4,-8(fp)
   1f0b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f0b8:	e0bffe17 	ldw	r2,-8(fp)
   1f0bc:	10000816 	blt	r2,zero,1f0e0 <fstat+0x40>
   1f0c0:	01400304 	movi	r5,12
   1f0c4:	e13ffe17 	ldw	r4,-8(fp)
   1f0c8:	000cec40 	call	cec4 <__mulsi3>
   1f0cc:	1007883a 	mov	r3,r2
   1f0d0:	008000f4 	movhi	r2,3
   1f0d4:	10ad5204 	addi	r2,r2,-19128
   1f0d8:	1885883a 	add	r2,r3,r2
   1f0dc:	00000106 	br	1f0e4 <fstat+0x44>
   1f0e0:	0005883a 	mov	r2,zero
   1f0e4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1f0e8:	e0bffd17 	ldw	r2,-12(fp)
   1f0ec:	10001026 	beq	r2,zero,1f130 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1f0f0:	e0bffd17 	ldw	r2,-12(fp)
   1f0f4:	10800017 	ldw	r2,0(r2)
   1f0f8:	10800817 	ldw	r2,32(r2)
   1f0fc:	10000726 	beq	r2,zero,1f11c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1f100:	e0bffd17 	ldw	r2,-12(fp)
   1f104:	10800017 	ldw	r2,0(r2)
   1f108:	10800817 	ldw	r2,32(r2)
   1f10c:	e17fff17 	ldw	r5,-4(fp)
   1f110:	e13ffd17 	ldw	r4,-12(fp)
   1f114:	103ee83a 	callr	r2
   1f118:	00000a06 	br	1f144 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1f11c:	e0bfff17 	ldw	r2,-4(fp)
   1f120:	00c80004 	movi	r3,8192
   1f124:	10c00115 	stw	r3,4(r2)
      return 0;
   1f128:	0005883a 	mov	r2,zero
   1f12c:	00000506 	br	1f144 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f130:	001f0640 	call	1f064 <alt_get_errno>
   1f134:	1007883a 	mov	r3,r2
   1f138:	00801444 	movi	r2,81
   1f13c:	18800015 	stw	r2,0(r3)
    return -1;
   1f140:	00bfffc4 	movi	r2,-1
  }
}
   1f144:	e037883a 	mov	sp,fp
   1f148:	dfc00117 	ldw	ra,4(sp)
   1f14c:	df000017 	ldw	fp,0(sp)
   1f150:	dec00204 	addi	sp,sp,8
   1f154:	f800283a 	ret

0001f158 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1f158:	deffff04 	addi	sp,sp,-4
   1f15c:	df000015 	stw	fp,0(sp)
   1f160:	d839883a 	mov	fp,sp
  return 0;
   1f164:	0005883a 	mov	r2,zero
}
   1f168:	e037883a 	mov	sp,fp
   1f16c:	df000017 	ldw	fp,0(sp)
   1f170:	dec00104 	addi	sp,sp,4
   1f174:	f800283a 	ret

0001f178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f178:	defffe04 	addi	sp,sp,-8
   1f17c:	dfc00115 	stw	ra,4(sp)
   1f180:	df000015 	stw	fp,0(sp)
   1f184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f188:	d0a5b917 	ldw	r2,-26908(gp)
   1f18c:	10000326 	beq	r2,zero,1f19c <alt_get_errno+0x24>
   1f190:	d0a5b917 	ldw	r2,-26908(gp)
   1f194:	103ee83a 	callr	r2
   1f198:	00000106 	br	1f1a0 <alt_get_errno+0x28>
   1f19c:	d0b24304 	addi	r2,gp,-14068
}
   1f1a0:	e037883a 	mov	sp,fp
   1f1a4:	dfc00117 	ldw	ra,4(sp)
   1f1a8:	df000017 	ldw	fp,0(sp)
   1f1ac:	dec00204 	addi	sp,sp,8
   1f1b0:	f800283a 	ret

0001f1b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1f1b4:	deffed04 	addi	sp,sp,-76
   1f1b8:	dfc01215 	stw	ra,72(sp)
   1f1bc:	df001115 	stw	fp,68(sp)
   1f1c0:	df001104 	addi	fp,sp,68
   1f1c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f1c8:	e0bfff17 	ldw	r2,-4(fp)
   1f1cc:	10000816 	blt	r2,zero,1f1f0 <isatty+0x3c>
   1f1d0:	01400304 	movi	r5,12
   1f1d4:	e13fff17 	ldw	r4,-4(fp)
   1f1d8:	000cec40 	call	cec4 <__mulsi3>
   1f1dc:	1007883a 	mov	r3,r2
   1f1e0:	008000f4 	movhi	r2,3
   1f1e4:	10ad5204 	addi	r2,r2,-19128
   1f1e8:	1885883a 	add	r2,r3,r2
   1f1ec:	00000106 	br	1f1f4 <isatty+0x40>
   1f1f0:	0005883a 	mov	r2,zero
   1f1f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1f1f8:	e0bfef17 	ldw	r2,-68(fp)
   1f1fc:	10000e26 	beq	r2,zero,1f238 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1f200:	e0bfef17 	ldw	r2,-68(fp)
   1f204:	10800017 	ldw	r2,0(r2)
   1f208:	10800817 	ldw	r2,32(r2)
   1f20c:	1000021e 	bne	r2,zero,1f218 <isatty+0x64>
    {
      return 1;
   1f210:	00800044 	movi	r2,1
   1f214:	00000d06 	br	1f24c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1f218:	e0bff004 	addi	r2,fp,-64
   1f21c:	100b883a 	mov	r5,r2
   1f220:	e13fff17 	ldw	r4,-4(fp)
   1f224:	001f0a00 	call	1f0a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1f228:	e0bff117 	ldw	r2,-60(fp)
   1f22c:	10880020 	cmpeqi	r2,r2,8192
   1f230:	10803fcc 	andi	r2,r2,255
   1f234:	00000506 	br	1f24c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f238:	001f1780 	call	1f178 <alt_get_errno>
   1f23c:	1007883a 	mov	r3,r2
   1f240:	00801444 	movi	r2,81
   1f244:	18800015 	stw	r2,0(r3)
    return 0;
   1f248:	0005883a 	mov	r2,zero
  }
}
   1f24c:	e037883a 	mov	sp,fp
   1f250:	dfc00117 	ldw	ra,4(sp)
   1f254:	df000017 	ldw	fp,0(sp)
   1f258:	dec00204 	addi	sp,sp,8
   1f25c:	f800283a 	ret

0001f260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f260:	defffe04 	addi	sp,sp,-8
   1f264:	dfc00115 	stw	ra,4(sp)
   1f268:	df000015 	stw	fp,0(sp)
   1f26c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f270:	d0a5b917 	ldw	r2,-26908(gp)
   1f274:	10000326 	beq	r2,zero,1f284 <alt_get_errno+0x24>
   1f278:	d0a5b917 	ldw	r2,-26908(gp)
   1f27c:	103ee83a 	callr	r2
   1f280:	00000106 	br	1f288 <alt_get_errno+0x28>
   1f284:	d0b24304 	addi	r2,gp,-14068
}
   1f288:	e037883a 	mov	sp,fp
   1f28c:	dfc00117 	ldw	ra,4(sp)
   1f290:	df000017 	ldw	fp,0(sp)
   1f294:	dec00204 	addi	sp,sp,8
   1f298:	f800283a 	ret

0001f29c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1f29c:	defffb04 	addi	sp,sp,-20
   1f2a0:	dfc00415 	stw	ra,16(sp)
   1f2a4:	df000315 	stw	fp,12(sp)
   1f2a8:	df000304 	addi	fp,sp,12
   1f2ac:	e13ffe15 	stw	r4,-8(fp)
   1f2b0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1f2b4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1f2b8:	e0bffe17 	ldw	r2,-8(fp)
   1f2bc:	00802f16 	blt	zero,r2,1f37c <kill+0xe0>
  {
    switch (sig)
   1f2c0:	e0bfff17 	ldw	r2,-4(fp)
   1f2c4:	10800828 	cmpgeui	r2,r2,32
   1f2c8:	1000291e 	bne	r2,zero,1f370 <kill+0xd4>
   1f2cc:	e0bfff17 	ldw	r2,-4(fp)
   1f2d0:	100690ba 	slli	r3,r2,2
   1f2d4:	008000b4 	movhi	r2,2
   1f2d8:	10bcba04 	addi	r2,r2,-3352
   1f2dc:	1885883a 	add	r2,r3,r2
   1f2e0:	10800017 	ldw	r2,0(r2)
   1f2e4:	1000683a 	jmp	r2
   1f2e8:	0001f390 	cmplti	zero,zero,1998
   1f2ec:	0001f370 	cmpltui	zero,zero,1997
   1f2f0:	0001f370 	cmpltui	zero,zero,1997
   1f2f4:	0001f368 	cmpgeui	zero,zero,1997
   1f2f8:	0001f368 	cmpgeui	zero,zero,1997
   1f2fc:	0001f368 	cmpgeui	zero,zero,1997
   1f300:	0001f368 	cmpgeui	zero,zero,1997
   1f304:	0001f370 	cmpltui	zero,zero,1997
   1f308:	0001f368 	cmpgeui	zero,zero,1997
   1f30c:	0001f368 	cmpgeui	zero,zero,1997
   1f310:	0001f368 	cmpgeui	zero,zero,1997
   1f314:	0001f368 	cmpgeui	zero,zero,1997
   1f318:	0001f368 	cmpgeui	zero,zero,1997
   1f31c:	0001f368 	cmpgeui	zero,zero,1997
   1f320:	0001f368 	cmpgeui	zero,zero,1997
   1f324:	0001f368 	cmpgeui	zero,zero,1997
   1f328:	0001f390 	cmplti	zero,zero,1998
   1f32c:	0001f370 	cmpltui	zero,zero,1997
   1f330:	0001f370 	cmpltui	zero,zero,1997
   1f334:	0001f370 	cmpltui	zero,zero,1997
   1f338:	0001f390 	cmplti	zero,zero,1998
   1f33c:	0001f370 	cmpltui	zero,zero,1997
   1f340:	0001f370 	cmpltui	zero,zero,1997
   1f344:	0001f368 	cmpgeui	zero,zero,1997
   1f348:	0001f368 	cmpgeui	zero,zero,1997
   1f34c:	0001f368 	cmpgeui	zero,zero,1997
   1f350:	0001f368 	cmpgeui	zero,zero,1997
   1f354:	0001f368 	cmpgeui	zero,zero,1997
   1f358:	0001f370 	cmpltui	zero,zero,1997
   1f35c:	0001f370 	cmpltui	zero,zero,1997
   1f360:	0001f368 	cmpgeui	zero,zero,1997
   1f364:	0001f368 	cmpgeui	zero,zero,1997
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1f368:	0009883a 	mov	r4,zero
   1f36c:	001f0300 	call	1f030 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1f370:	00800584 	movi	r2,22
   1f374:	e0bffd15 	stw	r2,-12(fp)
   1f378:	00000606 	br	1f394 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1f37c:	e0bffe17 	ldw	r2,-8(fp)
   1f380:	0080040e 	bge	zero,r2,1f394 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1f384:	008000c4 	movi	r2,3
   1f388:	e0bffd15 	stw	r2,-12(fp)
   1f38c:	00000106 	br	1f394 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1f390:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1f394:	e0bffd17 	ldw	r2,-12(fp)
   1f398:	10000626 	beq	r2,zero,1f3b4 <kill+0x118>
  {
    ALT_ERRNO = status;
   1f39c:	001f2600 	call	1f260 <alt_get_errno>
   1f3a0:	1007883a 	mov	r3,r2
   1f3a4:	e0bffd17 	ldw	r2,-12(fp)
   1f3a8:	18800015 	stw	r2,0(r3)
    return -1;
   1f3ac:	00bfffc4 	movi	r2,-1
   1f3b0:	00000106 	br	1f3b8 <kill+0x11c>
  }

  return 0;
   1f3b4:	0005883a 	mov	r2,zero
}
   1f3b8:	e037883a 	mov	sp,fp
   1f3bc:	dfc00117 	ldw	ra,4(sp)
   1f3c0:	df000017 	ldw	fp,0(sp)
   1f3c4:	dec00204 	addi	sp,sp,8
   1f3c8:	f800283a 	ret

0001f3cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1f3cc:	defffc04 	addi	sp,sp,-16
   1f3d0:	df000315 	stw	fp,12(sp)
   1f3d4:	df000304 	addi	fp,sp,12
   1f3d8:	e13ffd15 	stw	r4,-12(fp)
   1f3dc:	e17ffe15 	stw	r5,-8(fp)
   1f3e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1f3e4:	e0fffe17 	ldw	r3,-8(fp)
   1f3e8:	e0bffd17 	ldw	r2,-12(fp)
   1f3ec:	18800c26 	beq	r3,r2,1f420 <alt_load_section+0x54>
  {
    while( to != end )
   1f3f0:	00000806 	br	1f414 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1f3f4:	e0bffe17 	ldw	r2,-8(fp)
   1f3f8:	10c00104 	addi	r3,r2,4
   1f3fc:	e0fffe15 	stw	r3,-8(fp)
   1f400:	e0fffd17 	ldw	r3,-12(fp)
   1f404:	19000104 	addi	r4,r3,4
   1f408:	e13ffd15 	stw	r4,-12(fp)
   1f40c:	18c00017 	ldw	r3,0(r3)
   1f410:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1f414:	e0fffe17 	ldw	r3,-8(fp)
   1f418:	e0bfff17 	ldw	r2,-4(fp)
   1f41c:	18bff51e 	bne	r3,r2,1f3f4 <__alt_data_end+0xfc01f3f4>
    {
      *to++ = *from++;
    }
  }
}
   1f420:	0001883a 	nop
   1f424:	e037883a 	mov	sp,fp
   1f428:	df000017 	ldw	fp,0(sp)
   1f42c:	dec00104 	addi	sp,sp,4
   1f430:	f800283a 	ret

0001f434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1f434:	defffe04 	addi	sp,sp,-8
   1f438:	dfc00115 	stw	ra,4(sp)
   1f43c:	df000015 	stw	fp,0(sp)
   1f440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1f444:	018000f4 	movhi	r6,3
   1f448:	31b79804 	addi	r6,r6,-8608
   1f44c:	014000f4 	movhi	r5,3
   1f450:	296b1f04 	addi	r5,r5,-21380
   1f454:	010000f4 	movhi	r4,3
   1f458:	21379804 	addi	r4,r4,-8608
   1f45c:	001f3cc0 	call	1f3cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1f460:	01800034 	movhi	r6,0
   1f464:	31808c04 	addi	r6,r6,560
   1f468:	01400034 	movhi	r5,0
   1f46c:	29400804 	addi	r5,r5,32
   1f470:	01000034 	movhi	r4,0
   1f474:	21000804 	addi	r4,r4,32
   1f478:	001f3cc0 	call	1f3cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1f47c:	018000f4 	movhi	r6,3
   1f480:	31ab1f04 	addi	r6,r6,-21380
   1f484:	014000b4 	movhi	r5,2
   1f488:	294eca04 	addi	r5,r5,15144
   1f48c:	010000b4 	movhi	r4,2
   1f490:	210eca04 	addi	r4,r4,15144
   1f494:	001f3cc0 	call	1f3cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1f498:	00227fc0 	call	227fc <alt_dcache_flush_all>
  alt_icache_flush_all();
   1f49c:	0022a4c0 	call	22a4c <alt_icache_flush_all>
}
   1f4a0:	0001883a 	nop
   1f4a4:	e037883a 	mov	sp,fp
   1f4a8:	dfc00117 	ldw	ra,4(sp)
   1f4ac:	df000017 	ldw	fp,0(sp)
   1f4b0:	dec00204 	addi	sp,sp,8
   1f4b4:	f800283a 	ret

0001f4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f4b8:	defffe04 	addi	sp,sp,-8
   1f4bc:	dfc00115 	stw	ra,4(sp)
   1f4c0:	df000015 	stw	fp,0(sp)
   1f4c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f4c8:	d0a5b917 	ldw	r2,-26908(gp)
   1f4cc:	10000326 	beq	r2,zero,1f4dc <alt_get_errno+0x24>
   1f4d0:	d0a5b917 	ldw	r2,-26908(gp)
   1f4d4:	103ee83a 	callr	r2
   1f4d8:	00000106 	br	1f4e0 <alt_get_errno+0x28>
   1f4dc:	d0b24304 	addi	r2,gp,-14068
}
   1f4e0:	e037883a 	mov	sp,fp
   1f4e4:	dfc00117 	ldw	ra,4(sp)
   1f4e8:	df000017 	ldw	fp,0(sp)
   1f4ec:	dec00204 	addi	sp,sp,8
   1f4f0:	f800283a 	ret

0001f4f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1f4f4:	defff904 	addi	sp,sp,-28
   1f4f8:	dfc00615 	stw	ra,24(sp)
   1f4fc:	df000515 	stw	fp,20(sp)
   1f500:	df000504 	addi	fp,sp,20
   1f504:	e13ffd15 	stw	r4,-12(fp)
   1f508:	e17ffe15 	stw	r5,-8(fp)
   1f50c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1f510:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f514:	e0bffd17 	ldw	r2,-12(fp)
   1f518:	10000816 	blt	r2,zero,1f53c <lseek+0x48>
   1f51c:	01400304 	movi	r5,12
   1f520:	e13ffd17 	ldw	r4,-12(fp)
   1f524:	000cec40 	call	cec4 <__mulsi3>
   1f528:	1007883a 	mov	r3,r2
   1f52c:	008000f4 	movhi	r2,3
   1f530:	10ad5204 	addi	r2,r2,-19128
   1f534:	1885883a 	add	r2,r3,r2
   1f538:	00000106 	br	1f540 <lseek+0x4c>
   1f53c:	0005883a 	mov	r2,zero
   1f540:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1f544:	e0bffc17 	ldw	r2,-16(fp)
   1f548:	10001026 	beq	r2,zero,1f58c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1f54c:	e0bffc17 	ldw	r2,-16(fp)
   1f550:	10800017 	ldw	r2,0(r2)
   1f554:	10800717 	ldw	r2,28(r2)
   1f558:	10000926 	beq	r2,zero,1f580 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1f55c:	e0bffc17 	ldw	r2,-16(fp)
   1f560:	10800017 	ldw	r2,0(r2)
   1f564:	10800717 	ldw	r2,28(r2)
   1f568:	e1bfff17 	ldw	r6,-4(fp)
   1f56c:	e17ffe17 	ldw	r5,-8(fp)
   1f570:	e13ffc17 	ldw	r4,-16(fp)
   1f574:	103ee83a 	callr	r2
   1f578:	e0bffb15 	stw	r2,-20(fp)
   1f57c:	00000506 	br	1f594 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1f580:	00bfde84 	movi	r2,-134
   1f584:	e0bffb15 	stw	r2,-20(fp)
   1f588:	00000206 	br	1f594 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1f58c:	00bfebc4 	movi	r2,-81
   1f590:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1f594:	e0bffb17 	ldw	r2,-20(fp)
   1f598:	1000070e 	bge	r2,zero,1f5b8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1f59c:	001f4b80 	call	1f4b8 <alt_get_errno>
   1f5a0:	1007883a 	mov	r3,r2
   1f5a4:	e0bffb17 	ldw	r2,-20(fp)
   1f5a8:	0085c83a 	sub	r2,zero,r2
   1f5ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   1f5b0:	00bfffc4 	movi	r2,-1
   1f5b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1f5b8:	e0bffb17 	ldw	r2,-20(fp)
}
   1f5bc:	e037883a 	mov	sp,fp
   1f5c0:	dfc00117 	ldw	ra,4(sp)
   1f5c4:	df000017 	ldw	fp,0(sp)
   1f5c8:	dec00204 	addi	sp,sp,8
   1f5cc:	f800283a 	ret

0001f5d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1f5d0:	defffd04 	addi	sp,sp,-12
   1f5d4:	dfc00215 	stw	ra,8(sp)
   1f5d8:	df000115 	stw	fp,4(sp)
   1f5dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1f5e0:	0009883a 	mov	r4,zero
   1f5e4:	001fb5c0 	call	1fb5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1f5e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1f5ec:	001fb940 	call	1fb94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1f5f0:	018000f4 	movhi	r6,3
   1f5f4:	31ab0a04 	addi	r6,r6,-21464
   1f5f8:	014000f4 	movhi	r5,3
   1f5fc:	296b0a04 	addi	r5,r5,-21464
   1f600:	010000f4 	movhi	r4,3
   1f604:	212b0a04 	addi	r4,r4,-21464
   1f608:	0022df00 	call	22df0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f60c:	00228fc0 	call	228fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f610:	010000b4 	movhi	r4,2
   1f614:	210a5704 	addi	r4,r4,10588
   1f618:	00237880 	call	23788 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f61c:	d0b24717 	ldw	r2,-14052(gp)
   1f620:	d0f24817 	ldw	r3,-14048(gp)
   1f624:	d1324917 	ldw	r4,-14044(gp)
   1f628:	200d883a 	mov	r6,r4
   1f62c:	180b883a 	mov	r5,r3
   1f630:	1009883a 	mov	r4,r2
   1f634:	000a2140 	call	a214 <main>
   1f638:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f63c:	01000044 	movi	r4,1
   1f640:	001ef2c0 	call	1ef2c <close>
  exit (result);
   1f644:	e13fff17 	ldw	r4,-4(fp)
   1f648:	002379c0 	call	2379c <exit>

0001f64c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f64c:	defffe04 	addi	sp,sp,-8
   1f650:	df000115 	stw	fp,4(sp)
   1f654:	df000104 	addi	fp,sp,4
   1f658:	e13fff15 	stw	r4,-4(fp)
}
   1f65c:	0001883a 	nop
   1f660:	e037883a 	mov	sp,fp
   1f664:	df000017 	ldw	fp,0(sp)
   1f668:	dec00104 	addi	sp,sp,4
   1f66c:	f800283a 	ret

0001f670 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f670:	defffe04 	addi	sp,sp,-8
   1f674:	df000115 	stw	fp,4(sp)
   1f678:	df000104 	addi	fp,sp,4
   1f67c:	e13fff15 	stw	r4,-4(fp)
}
   1f680:	0001883a 	nop
   1f684:	e037883a 	mov	sp,fp
   1f688:	df000017 	ldw	fp,0(sp)
   1f68c:	dec00104 	addi	sp,sp,4
   1f690:	f800283a 	ret

0001f694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f694:	defffe04 	addi	sp,sp,-8
   1f698:	dfc00115 	stw	ra,4(sp)
   1f69c:	df000015 	stw	fp,0(sp)
   1f6a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f6a4:	d0a5b917 	ldw	r2,-26908(gp)
   1f6a8:	10000326 	beq	r2,zero,1f6b8 <alt_get_errno+0x24>
   1f6ac:	d0a5b917 	ldw	r2,-26908(gp)
   1f6b0:	103ee83a 	callr	r2
   1f6b4:	00000106 	br	1f6bc <alt_get_errno+0x28>
   1f6b8:	d0b24304 	addi	r2,gp,-14068
}
   1f6bc:	e037883a 	mov	sp,fp
   1f6c0:	dfc00117 	ldw	ra,4(sp)
   1f6c4:	df000017 	ldw	fp,0(sp)
   1f6c8:	dec00204 	addi	sp,sp,8
   1f6cc:	f800283a 	ret

0001f6d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f6d0:	defff904 	addi	sp,sp,-28
   1f6d4:	dfc00615 	stw	ra,24(sp)
   1f6d8:	df000515 	stw	fp,20(sp)
   1f6dc:	df000504 	addi	fp,sp,20
   1f6e0:	e13ffd15 	stw	r4,-12(fp)
   1f6e4:	e17ffe15 	stw	r5,-8(fp)
   1f6e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f6ec:	e0bffd17 	ldw	r2,-12(fp)
   1f6f0:	10000816 	blt	r2,zero,1f714 <read+0x44>
   1f6f4:	01400304 	movi	r5,12
   1f6f8:	e13ffd17 	ldw	r4,-12(fp)
   1f6fc:	000cec40 	call	cec4 <__mulsi3>
   1f700:	1007883a 	mov	r3,r2
   1f704:	008000f4 	movhi	r2,3
   1f708:	10ad5204 	addi	r2,r2,-19128
   1f70c:	1885883a 	add	r2,r3,r2
   1f710:	00000106 	br	1f718 <read+0x48>
   1f714:	0005883a 	mov	r2,zero
   1f718:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f71c:	e0bffb17 	ldw	r2,-20(fp)
   1f720:	10002226 	beq	r2,zero,1f7ac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f724:	e0bffb17 	ldw	r2,-20(fp)
   1f728:	10800217 	ldw	r2,8(r2)
   1f72c:	108000cc 	andi	r2,r2,3
   1f730:	10800060 	cmpeqi	r2,r2,1
   1f734:	1000181e 	bne	r2,zero,1f798 <read+0xc8>
        (fd->dev->read))
   1f738:	e0bffb17 	ldw	r2,-20(fp)
   1f73c:	10800017 	ldw	r2,0(r2)
   1f740:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f744:	10001426 	beq	r2,zero,1f798 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1f748:	e0bffb17 	ldw	r2,-20(fp)
   1f74c:	10800017 	ldw	r2,0(r2)
   1f750:	10800517 	ldw	r2,20(r2)
   1f754:	e0ffff17 	ldw	r3,-4(fp)
   1f758:	180d883a 	mov	r6,r3
   1f75c:	e17ffe17 	ldw	r5,-8(fp)
   1f760:	e13ffb17 	ldw	r4,-20(fp)
   1f764:	103ee83a 	callr	r2
   1f768:	e0bffc15 	stw	r2,-16(fp)
   1f76c:	e0bffc17 	ldw	r2,-16(fp)
   1f770:	1000070e 	bge	r2,zero,1f790 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1f774:	001f6940 	call	1f694 <alt_get_errno>
   1f778:	1007883a 	mov	r3,r2
   1f77c:	e0bffc17 	ldw	r2,-16(fp)
   1f780:	0085c83a 	sub	r2,zero,r2
   1f784:	18800015 	stw	r2,0(r3)
          return -1;
   1f788:	00bfffc4 	movi	r2,-1
   1f78c:	00000c06 	br	1f7c0 <read+0xf0>
        }
        return rval;
   1f790:	e0bffc17 	ldw	r2,-16(fp)
   1f794:	00000a06 	br	1f7c0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1f798:	001f6940 	call	1f694 <alt_get_errno>
   1f79c:	1007883a 	mov	r3,r2
   1f7a0:	00800344 	movi	r2,13
   1f7a4:	18800015 	stw	r2,0(r3)
   1f7a8:	00000406 	br	1f7bc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1f7ac:	001f6940 	call	1f694 <alt_get_errno>
   1f7b0:	1007883a 	mov	r3,r2
   1f7b4:	00801444 	movi	r2,81
   1f7b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f7bc:	00bfffc4 	movi	r2,-1
}
   1f7c0:	e037883a 	mov	sp,fp
   1f7c4:	dfc00117 	ldw	ra,4(sp)
   1f7c8:	df000017 	ldw	fp,0(sp)
   1f7cc:	dec00204 	addi	sp,sp,8
   1f7d0:	f800283a 	ret

0001f7d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1f7d4:	defffc04 	addi	sp,sp,-16
   1f7d8:	dfc00315 	stw	ra,12(sp)
   1f7dc:	df000215 	stw	fp,8(sp)
   1f7e0:	dc000115 	stw	r16,4(sp)
   1f7e4:	df000204 	addi	fp,sp,8
   1f7e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1f7ec:	e0bffe17 	ldw	r2,-8(fp)
   1f7f0:	108000d0 	cmplti	r2,r2,3
   1f7f4:	1000111e 	bne	r2,zero,1f83c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1f7f8:	040000f4 	movhi	r16,3
   1f7fc:	842d5204 	addi	r16,r16,-19128
   1f800:	e0bffe17 	ldw	r2,-8(fp)
   1f804:	01400304 	movi	r5,12
   1f808:	1009883a 	mov	r4,r2
   1f80c:	000cec40 	call	cec4 <__mulsi3>
   1f810:	8085883a 	add	r2,r16,r2
   1f814:	10800204 	addi	r2,r2,8
   1f818:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1f81c:	040000f4 	movhi	r16,3
   1f820:	842d5204 	addi	r16,r16,-19128
   1f824:	e0bffe17 	ldw	r2,-8(fp)
   1f828:	01400304 	movi	r5,12
   1f82c:	1009883a 	mov	r4,r2
   1f830:	000cec40 	call	cec4 <__mulsi3>
   1f834:	8085883a 	add	r2,r16,r2
   1f838:	10000015 	stw	zero,0(r2)
  }
}
   1f83c:	0001883a 	nop
   1f840:	e6ffff04 	addi	sp,fp,-4
   1f844:	dfc00217 	ldw	ra,8(sp)
   1f848:	df000117 	ldw	fp,4(sp)
   1f84c:	dc000017 	ldw	r16,0(sp)
   1f850:	dec00304 	addi	sp,sp,12
   1f854:	f800283a 	ret

0001f858 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1f858:	defff904 	addi	sp,sp,-28
   1f85c:	df000615 	stw	fp,24(sp)
   1f860:	df000604 	addi	fp,sp,24
   1f864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f868:	0005303a 	rdctl	r2,status
   1f86c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f870:	e0fffe17 	ldw	r3,-8(fp)
   1f874:	00bfff84 	movi	r2,-2
   1f878:	1884703a 	and	r2,r3,r2
   1f87c:	1001703a 	wrctl	status,r2
  
  return context;
   1f880:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1f884:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1f888:	d0a5ba17 	ldw	r2,-26904(gp)
   1f88c:	10c000c4 	addi	r3,r2,3
   1f890:	00bfff04 	movi	r2,-4
   1f894:	1884703a 	and	r2,r3,r2
   1f898:	d0a5ba15 	stw	r2,-26904(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1f89c:	d0e5ba17 	ldw	r3,-26904(gp)
   1f8a0:	e0bfff17 	ldw	r2,-4(fp)
   1f8a4:	1887883a 	add	r3,r3,r2
   1f8a8:	00810034 	movhi	r2,1024
   1f8ac:	10800004 	addi	r2,r2,0
   1f8b0:	10c0062e 	bgeu	r2,r3,1f8cc <sbrk+0x74>
   1f8b4:	e0bffb17 	ldw	r2,-20(fp)
   1f8b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8bc:	e0bffa17 	ldw	r2,-24(fp)
   1f8c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1f8c4:	00bfffc4 	movi	r2,-1
   1f8c8:	00000b06 	br	1f8f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1f8cc:	d0a5ba17 	ldw	r2,-26904(gp)
   1f8d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1f8d4:	d0e5ba17 	ldw	r3,-26904(gp)
   1f8d8:	e0bfff17 	ldw	r2,-4(fp)
   1f8dc:	1885883a 	add	r2,r3,r2
   1f8e0:	d0a5ba15 	stw	r2,-26904(gp)
   1f8e4:	e0bffb17 	ldw	r2,-20(fp)
   1f8e8:	e0bffc15 	stw	r2,-16(fp)
   1f8ec:	e0bffc17 	ldw	r2,-16(fp)
   1f8f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1f8f4:	e0bffd17 	ldw	r2,-12(fp)
} 
   1f8f8:	e037883a 	mov	sp,fp
   1f8fc:	df000017 	ldw	fp,0(sp)
   1f900:	dec00104 	addi	sp,sp,4
   1f904:	f800283a 	ret

0001f908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f908:	defffe04 	addi	sp,sp,-8
   1f90c:	dfc00115 	stw	ra,4(sp)
   1f910:	df000015 	stw	fp,0(sp)
   1f914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f918:	d0a5b917 	ldw	r2,-26908(gp)
   1f91c:	10000326 	beq	r2,zero,1f92c <alt_get_errno+0x24>
   1f920:	d0a5b917 	ldw	r2,-26908(gp)
   1f924:	103ee83a 	callr	r2
   1f928:	00000106 	br	1f930 <alt_get_errno+0x28>
   1f92c:	d0b24304 	addi	r2,gp,-14068
}
   1f930:	e037883a 	mov	sp,fp
   1f934:	dfc00117 	ldw	ra,4(sp)
   1f938:	df000017 	ldw	fp,0(sp)
   1f93c:	dec00204 	addi	sp,sp,8
   1f940:	f800283a 	ret

0001f944 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1f944:	defffc04 	addi	sp,sp,-16
   1f948:	dfc00315 	stw	ra,12(sp)
   1f94c:	df000215 	stw	fp,8(sp)
   1f950:	df000204 	addi	fp,sp,8
   1f954:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f958:	d0b24c17 	ldw	r2,-14032(gp)
  clock_t ticks = alt_nticks(); 
   1f95c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f960:	d0b24b17 	ldw	r2,-14036(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1f964:	1000061e 	bne	r2,zero,1f980 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1f968:	001f9080 	call	1f908 <alt_get_errno>
   1f96c:	1007883a 	mov	r3,r2
   1f970:	00801604 	movi	r2,88
   1f974:	18800015 	stw	r2,0(r3)
    return 0;
   1f978:	0005883a 	mov	r2,zero
   1f97c:	00000a06 	br	1f9a8 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1f980:	e0bfff17 	ldw	r2,-4(fp)
   1f984:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1f988:	e0bfff17 	ldw	r2,-4(fp)
   1f98c:	e0fffe17 	ldw	r3,-8(fp)
   1f990:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1f994:	e0bfff17 	ldw	r2,-4(fp)
   1f998:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1f99c:	e0bfff17 	ldw	r2,-4(fp)
   1f9a0:	10000315 	stw	zero,12(r2)

  return ticks;
   1f9a4:	e0bffe17 	ldw	r2,-8(fp)
}
   1f9a8:	e037883a 	mov	sp,fp
   1f9ac:	dfc00117 	ldw	ra,4(sp)
   1f9b0:	df000017 	ldw	fp,0(sp)
   1f9b4:	dec00204 	addi	sp,sp,8
   1f9b8:	f800283a 	ret

0001f9bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1f9bc:	defffd04 	addi	sp,sp,-12
   1f9c0:	dfc00215 	stw	ra,8(sp)
   1f9c4:	df000115 	stw	fp,4(sp)
   1f9c8:	df000104 	addi	fp,sp,4
   1f9cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1f9d0:	e13fff17 	ldw	r4,-4(fp)
   1f9d4:	00226a40 	call	226a4 <alt_busy_sleep>
}
   1f9d8:	e037883a 	mov	sp,fp
   1f9dc:	dfc00117 	ldw	ra,4(sp)
   1f9e0:	df000017 	ldw	fp,0(sp)
   1f9e4:	dec00204 	addi	sp,sp,8
   1f9e8:	f800283a 	ret

0001f9ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f9ec:	defffe04 	addi	sp,sp,-8
   1f9f0:	dfc00115 	stw	ra,4(sp)
   1f9f4:	df000015 	stw	fp,0(sp)
   1f9f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f9fc:	d0a5b917 	ldw	r2,-26908(gp)
   1fa00:	10000326 	beq	r2,zero,1fa10 <alt_get_errno+0x24>
   1fa04:	d0a5b917 	ldw	r2,-26908(gp)
   1fa08:	103ee83a 	callr	r2
   1fa0c:	00000106 	br	1fa14 <alt_get_errno+0x28>
   1fa10:	d0b24304 	addi	r2,gp,-14068
}
   1fa14:	e037883a 	mov	sp,fp
   1fa18:	dfc00117 	ldw	ra,4(sp)
   1fa1c:	df000017 	ldw	fp,0(sp)
   1fa20:	dec00204 	addi	sp,sp,8
   1fa24:	f800283a 	ret

0001fa28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1fa28:	defff904 	addi	sp,sp,-28
   1fa2c:	dfc00615 	stw	ra,24(sp)
   1fa30:	df000515 	stw	fp,20(sp)
   1fa34:	df000504 	addi	fp,sp,20
   1fa38:	e13ffd15 	stw	r4,-12(fp)
   1fa3c:	e17ffe15 	stw	r5,-8(fp)
   1fa40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1fa44:	e0bffd17 	ldw	r2,-12(fp)
   1fa48:	10000816 	blt	r2,zero,1fa6c <write+0x44>
   1fa4c:	01400304 	movi	r5,12
   1fa50:	e13ffd17 	ldw	r4,-12(fp)
   1fa54:	000cec40 	call	cec4 <__mulsi3>
   1fa58:	1007883a 	mov	r3,r2
   1fa5c:	008000f4 	movhi	r2,3
   1fa60:	10ad5204 	addi	r2,r2,-19128
   1fa64:	1885883a 	add	r2,r3,r2
   1fa68:	00000106 	br	1fa70 <write+0x48>
   1fa6c:	0005883a 	mov	r2,zero
   1fa70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1fa74:	e0bffb17 	ldw	r2,-20(fp)
   1fa78:	10002126 	beq	r2,zero,1fb00 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1fa7c:	e0bffb17 	ldw	r2,-20(fp)
   1fa80:	10800217 	ldw	r2,8(r2)
   1fa84:	108000cc 	andi	r2,r2,3
   1fa88:	10001826 	beq	r2,zero,1faec <write+0xc4>
   1fa8c:	e0bffb17 	ldw	r2,-20(fp)
   1fa90:	10800017 	ldw	r2,0(r2)
   1fa94:	10800617 	ldw	r2,24(r2)
   1fa98:	10001426 	beq	r2,zero,1faec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1fa9c:	e0bffb17 	ldw	r2,-20(fp)
   1faa0:	10800017 	ldw	r2,0(r2)
   1faa4:	10800617 	ldw	r2,24(r2)
   1faa8:	e0ffff17 	ldw	r3,-4(fp)
   1faac:	180d883a 	mov	r6,r3
   1fab0:	e17ffe17 	ldw	r5,-8(fp)
   1fab4:	e13ffb17 	ldw	r4,-20(fp)
   1fab8:	103ee83a 	callr	r2
   1fabc:	e0bffc15 	stw	r2,-16(fp)
   1fac0:	e0bffc17 	ldw	r2,-16(fp)
   1fac4:	1000070e 	bge	r2,zero,1fae4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1fac8:	001f9ec0 	call	1f9ec <alt_get_errno>
   1facc:	1007883a 	mov	r3,r2
   1fad0:	e0bffc17 	ldw	r2,-16(fp)
   1fad4:	0085c83a 	sub	r2,zero,r2
   1fad8:	18800015 	stw	r2,0(r3)
        return -1;
   1fadc:	00bfffc4 	movi	r2,-1
   1fae0:	00000c06 	br	1fb14 <write+0xec>
      }
      return rval;
   1fae4:	e0bffc17 	ldw	r2,-16(fp)
   1fae8:	00000a06 	br	1fb14 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1faec:	001f9ec0 	call	1f9ec <alt_get_errno>
   1faf0:	1007883a 	mov	r3,r2
   1faf4:	00800344 	movi	r2,13
   1faf8:	18800015 	stw	r2,0(r3)
   1fafc:	00000406 	br	1fb10 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1fb00:	001f9ec0 	call	1f9ec <alt_get_errno>
   1fb04:	1007883a 	mov	r3,r2
   1fb08:	00801444 	movi	r2,81
   1fb0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1fb10:	00bfffc4 	movi	r2,-1
}
   1fb14:	e037883a 	mov	sp,fp
   1fb18:	dfc00117 	ldw	ra,4(sp)
   1fb1c:	df000017 	ldw	fp,0(sp)
   1fb20:	dec00204 	addi	sp,sp,8
   1fb24:	f800283a 	ret

0001fb28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1fb28:	defffd04 	addi	sp,sp,-12
   1fb2c:	dfc00215 	stw	ra,8(sp)
   1fb30:	df000115 	stw	fp,4(sp)
   1fb34:	df000104 	addi	fp,sp,4
   1fb38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fb3c:	d165b604 	addi	r5,gp,-26920
   1fb40:	e13fff17 	ldw	r4,-4(fp)
   1fb44:	00228580 	call	22858 <alt_dev_llist_insert>
}
   1fb48:	e037883a 	mov	sp,fp
   1fb4c:	dfc00117 	ldw	ra,4(sp)
   1fb50:	df000017 	ldw	fp,0(sp)
   1fb54:	dec00204 	addi	sp,sp,8
   1fb58:	f800283a 	ret

0001fb5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1fb5c:	defffd04 	addi	sp,sp,-12
   1fb60:	dfc00215 	stw	ra,8(sp)
   1fb64:	df000115 	stw	fp,4(sp)
   1fb68:	df000104 	addi	fp,sp,4
   1fb6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1fb70:	00234fc0 	call	234fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1fb74:	00800044 	movi	r2,1
   1fb78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1fb7c:	0001883a 	nop
   1fb80:	e037883a 	mov	sp,fp
   1fb84:	dfc00117 	ldw	ra,4(sp)
   1fb88:	df000017 	ldw	fp,0(sp)
   1fb8c:	dec00204 	addi	sp,sp,8
   1fb90:	f800283a 	ret

0001fb94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1fb94:	defffe04 	addi	sp,sp,-8
   1fb98:	dfc00115 	stw	ra,4(sp)
   1fb9c:	df000015 	stw	fp,0(sp)
   1fba0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1fba4:	01c0fa04 	movi	r7,1000
   1fba8:	01800084 	movi	r6,2
   1fbac:	000b883a 	mov	r5,zero
   1fbb0:	01010034 	movhi	r4,1024
   1fbb4:	21042004 	addi	r4,r4,4224
   1fbb8:	00224fc0 	call	224fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1fbbc:	010000f4 	movhi	r4,3
   1fbc0:	212db204 	addi	r4,r4,-18744
   1fbc4:	001fe580 	call	1fe58 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1fbc8:	01800044 	movi	r6,1
   1fbcc:	000b883a 	mov	r5,zero
   1fbd0:	010000f4 	movhi	r4,3
   1fbd4:	212dca04 	addi	r4,r4,-18648
   1fbd8:	00219840 	call	21984 <altera_avalon_jtag_uart_init>
   1fbdc:	010000f4 	movhi	r4,3
   1fbe0:	212dc004 	addi	r4,r4,-18688
   1fbe4:	001fb280 	call	1fb28 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1fbe8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1fbec:	0001883a 	nop
}
   1fbf0:	0001883a 	nop
   1fbf4:	e037883a 	mov	sp,fp
   1fbf8:	dfc00117 	ldw	ra,4(sp)
   1fbfc:	df000017 	ldw	fp,0(sp)
   1fc00:	dec00204 	addi	sp,sp,8
   1fc04:	f800283a 	ret

0001fc08 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1fc08:	defff904 	addi	sp,sp,-28
   1fc0c:	dfc00615 	stw	ra,24(sp)
   1fc10:	df000515 	stw	fp,20(sp)
   1fc14:	df000504 	addi	fp,sp,20
   1fc18:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1fc1c:	008000b4 	movhi	r2,2
   1fc20:	10a1a804 	addi	r2,r2,-31072
   1fc24:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1fc28:	e0bfff17 	ldw	r2,-4(fp)
   1fc2c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1fc30:	e0bffc17 	ldw	r2,-16(fp)
   1fc34:	10800717 	ldw	r2,28(r2)
   1fc38:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1fc3c:	e0bffd17 	ldw	r2,-12(fp)
   1fc40:	10800217 	ldw	r2,8(r2)
   1fc44:	10800098 	cmpnei	r2,r2,2
   1fc48:	1000251e 	bne	r2,zero,1fce0 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1fc4c:	e0bffd17 	ldw	r2,-12(fp)
   1fc50:	10c00017 	ldw	r3,0(r2)
   1fc54:	e0bffd17 	ldw	r2,-12(fp)
   1fc58:	10800117 	ldw	r2,4(r2)
   1fc5c:	e13ffe04 	addi	r4,fp,-8
   1fc60:	200f883a 	mov	r7,r4
   1fc64:	100d883a 	mov	r6,r2
   1fc68:	180b883a 	mov	r5,r3
   1fc6c:	e13ffc17 	ldw	r4,-16(fp)
   1fc70:	00203b80 	call	203b8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1fc74:	e0bffd17 	ldw	r2,-12(fp)
   1fc78:	10c00117 	ldw	r3,4(r2)
   1fc7c:	e0bffe17 	ldw	r2,-8(fp)
   1fc80:	1887c83a 	sub	r3,r3,r2
   1fc84:	e0bffd17 	ldw	r2,-12(fp)
   1fc88:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1fc8c:	e0bffd17 	ldw	r2,-12(fp)
   1fc90:	10c00017 	ldw	r3,0(r2)
   1fc94:	e0bffe17 	ldw	r2,-8(fp)
   1fc98:	1887883a 	add	r3,r3,r2
   1fc9c:	e0bffd17 	ldw	r2,-12(fp)
   1fca0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1fca4:	e0bffd17 	ldw	r2,-12(fp)
   1fca8:	10800117 	ldw	r2,4(r2)
   1fcac:	10000c26 	beq	r2,zero,1fce0 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fcb0:	01400704 	movi	r5,28
   1fcb4:	e13ffc17 	ldw	r4,-16(fp)
   1fcb8:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1fcbc:	01400084 	movi	r5,2
   1fcc0:	e13ffc17 	ldw	r4,-16(fp)
   1fcc4:	00216140 	call	21614 <alt_avalon_i2c_int_enable>
   1fcc8:	00000e06 	br	1fd04 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1fccc:	e0bffb17 	ldw	r2,-20(fp)
   1fcd0:	10bfffc4 	addi	r2,r2,-1
   1fcd4:	e0bffb15 	stw	r2,-20(fp)
   1fcd8:	e0bffb17 	ldw	r2,-20(fp)
   1fcdc:	10000426 	beq	r2,zero,1fcf0 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1fce0:	e13ffc17 	ldw	r4,-16(fp)
   1fce4:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   1fce8:	103ff81e 	bne	r2,zero,1fccc <__alt_data_end+0xfc01fccc>
   1fcec:	00000106 	br	1fcf4 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1fcf0:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1fcf4:	e13ffc17 	ldw	r4,-16(fp)
   1fcf8:	002001c0 	call	2001c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1fcfc:	e0bffd17 	ldw	r2,-12(fp)
   1fd00:	10000215 	stw	zero,8(r2)
}
   1fd04:	e037883a 	mov	sp,fp
   1fd08:	dfc00117 	ldw	ra,4(sp)
   1fd0c:	df000017 	ldw	fp,0(sp)
   1fd10:	dec00204 	addi	sp,sp,8
   1fd14:	f800283a 	ret

0001fd18 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1fd18:	defffc04 	addi	sp,sp,-16
   1fd1c:	dfc00315 	stw	ra,12(sp)
   1fd20:	df000215 	stw	fp,8(sp)
   1fd24:	df000204 	addi	fp,sp,8
   1fd28:	e13ffe15 	stw	r4,-8(fp)
   1fd2c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1fd30:	e0bfff17 	ldw	r2,-4(fp)
   1fd34:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1fd38:	e1ffff17 	ldw	r7,-4(fp)
   1fd3c:	000d883a 	mov	r6,zero
   1fd40:	014000b4 	movhi	r5,2
   1fd44:	297f0204 	addi	r5,r5,-1016
   1fd48:	e13ffe17 	ldw	r4,-8(fp)
   1fd4c:	001fe040 	call	1fe04 <alt_avalon_i2c_register_callback>
}
   1fd50:	0001883a 	nop
   1fd54:	e037883a 	mov	sp,fp
   1fd58:	dfc00117 	ldw	ra,4(sp)
   1fd5c:	df000017 	ldw	fp,0(sp)
   1fd60:	dec00204 	addi	sp,sp,8
   1fd64:	f800283a 	ret

0001fd68 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1fd68:	defff904 	addi	sp,sp,-28
   1fd6c:	dfc00615 	stw	ra,24(sp)
   1fd70:	df000515 	stw	fp,20(sp)
   1fd74:	df000504 	addi	fp,sp,20
   1fd78:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1fd7c:	e0bfff17 	ldw	r2,-4(fp)
   1fd80:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fd84:	014007c4 	movi	r5,31
   1fd88:	e13ffb17 	ldw	r4,-20(fp)
   1fd8c:	00215ac0 	call	215ac <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fd90:	01400704 	movi	r5,28
   1fd94:	e13ffb17 	ldw	r4,-20(fp)
   1fd98:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1fd9c:	e0bffb17 	ldw	r2,-20(fp)
   1fda0:	10800617 	ldw	r2,24(r2)
   1fda4:	10001126 	beq	r2,zero,1fdec <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fda8:	0005303a 	rdctl	r2,status
   1fdac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fdb0:	e0fffd17 	ldw	r3,-12(fp)
   1fdb4:	00bfff84 	movi	r2,-2
   1fdb8:	1884703a 	and	r2,r3,r2
   1fdbc:	1001703a 	wrctl	status,r2
  
  return context;
   1fdc0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1fdc4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1fdc8:	e0bffb17 	ldw	r2,-20(fp)
   1fdcc:	10800617 	ldw	r2,24(r2)
   1fdd0:	e13ffb17 	ldw	r4,-20(fp)
   1fdd4:	103ee83a 	callr	r2
   1fdd8:	e0bffc17 	ldw	r2,-16(fp)
   1fddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fde0:	e0bffe17 	ldw	r2,-8(fp)
   1fde4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1fde8:	0001883a 	nop
   1fdec:	0001883a 	nop
}
   1fdf0:	e037883a 	mov	sp,fp
   1fdf4:	dfc00117 	ldw	ra,4(sp)
   1fdf8:	df000017 	ldw	fp,0(sp)
   1fdfc:	dec00204 	addi	sp,sp,8
   1fe00:	f800283a 	ret

0001fe04 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1fe04:	defffb04 	addi	sp,sp,-20
   1fe08:	df000415 	stw	fp,16(sp)
   1fe0c:	df000404 	addi	fp,sp,16
   1fe10:	e13ffc15 	stw	r4,-16(fp)
   1fe14:	e17ffd15 	stw	r5,-12(fp)
   1fe18:	e1bffe15 	stw	r6,-8(fp)
   1fe1c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1fe20:	e0bffc17 	ldw	r2,-16(fp)
   1fe24:	e0fffd17 	ldw	r3,-12(fp)
   1fe28:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1fe2c:	e0bffc17 	ldw	r2,-16(fp)
   1fe30:	e0ffff17 	ldw	r3,-4(fp)
   1fe34:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1fe38:	e0bffc17 	ldw	r2,-16(fp)
   1fe3c:	e0fffe17 	ldw	r3,-8(fp)
   1fe40:	10c00815 	stw	r3,32(r2)

    return ;
   1fe44:	0001883a 	nop
}
   1fe48:	e037883a 	mov	sp,fp
   1fe4c:	df000017 	ldw	fp,0(sp)
   1fe50:	dec00104 	addi	sp,sp,4
   1fe54:	f800283a 	ret

0001fe58 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1fe58:	defff704 	addi	sp,sp,-36
   1fe5c:	dfc00815 	stw	ra,32(sp)
   1fe60:	df000715 	stw	fp,28(sp)
   1fe64:	df000704 	addi	fp,sp,28
   1fe68:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1fe6c:	e13fff17 	ldw	r4,-4(fp)
   1fe70:	002001c0 	call	2001c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fe74:	014007c4 	movi	r5,31
   1fe78:	e13fff17 	ldw	r4,-4(fp)
   1fe7c:	00215ac0 	call	215ac <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fe80:	01400704 	movi	r5,28
   1fe84:	e13fff17 	ldw	r4,-4(fp)
   1fe88:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1fe8c:	014000c4 	movi	r5,3
   1fe90:	e13fff17 	ldw	r4,-4(fp)
   1fe94:	00217b80 	call	217b8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1fe98:	014000c4 	movi	r5,3
   1fe9c:	e13fff17 	ldw	r4,-4(fp)
   1fea0:	00217080 	call	21708 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1fea4:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1fea8:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1feac:	e0bffb04 	addi	r2,fp,-20
   1feb0:	018000b4 	movhi	r6,2
   1feb4:	31a1a804 	addi	r6,r6,-31072
   1feb8:	100b883a 	mov	r5,r2
   1febc:	e13fff17 	ldw	r4,-4(fp)
   1fec0:	00202780 	call	20278 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1fec4:	e0bffb04 	addi	r2,fp,-20
   1fec8:	100b883a 	mov	r5,r2
   1fecc:	e13fff17 	ldw	r4,-4(fp)
   1fed0:	00201180 	call	20118 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1fed4:	d165bb04 	addi	r5,gp,-26900
   1fed8:	e13fff17 	ldw	r4,-4(fp)
   1fedc:	00228580 	call	22858 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1fee0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1fee4:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1fee8:	e0bffa17 	ldw	r2,-24(fp)
   1feec:	10000c1e 	bne	r2,zero,1ff20 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1fef0:	e0bfff17 	ldw	r2,-4(fp)
   1fef4:	10c00417 	ldw	r3,16(r2)
   1fef8:	e0bfff17 	ldw	r2,-4(fp)
   1fefc:	10800517 	ldw	r2,20(r2)
   1ff00:	d8000015 	stw	zero,0(sp)
   1ff04:	e1ffff17 	ldw	r7,-4(fp)
   1ff08:	018000b4 	movhi	r6,2
   1ff0c:	31bf5a04 	addi	r6,r6,-664
   1ff10:	100b883a 	mov	r5,r2
   1ff14:	1809883a 	mov	r4,r3
   1ff18:	0022a6c0 	call	22a6c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1ff1c:	00000406 	br	1ff30 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1ff20:	010000f4 	movhi	r4,3
   1ff24:	212b1704 	addi	r4,r4,-21412
   1ff28:	00230f00 	call	230f0 <alt_printf>
    }

    return;
   1ff2c:	0001883a 	nop

}
   1ff30:	e037883a 	mov	sp,fp
   1ff34:	dfc00117 	ldw	ra,4(sp)
   1ff38:	df000017 	ldw	fp,0(sp)
   1ff3c:	dec00204 	addi	sp,sp,8
   1ff40:	f800283a 	ret

0001ff44 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1ff44:	defffc04 	addi	sp,sp,-16
   1ff48:	dfc00315 	stw	ra,12(sp)
   1ff4c:	df000215 	stw	fp,8(sp)
   1ff50:	df000204 	addi	fp,sp,8
   1ff54:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1ff58:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1ff5c:	d165bb04 	addi	r5,gp,-26900
   1ff60:	e13fff17 	ldw	r4,-4(fp)
   1ff64:	00229bc0 	call	229bc <alt_find_dev>
   1ff68:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1ff6c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ff70:	e037883a 	mov	sp,fp
   1ff74:	dfc00117 	ldw	ra,4(sp)
   1ff78:	df000017 	ldw	fp,0(sp)
   1ff7c:	dec00204 	addi	sp,sp,8
   1ff80:	f800283a 	ret

0001ff84 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1ff84:	defffc04 	addi	sp,sp,-16
   1ff88:	df000315 	stw	fp,12(sp)
   1ff8c:	df000304 	addi	fp,sp,12
   1ff90:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1ff94:	e0bfff17 	ldw	r2,-4(fp)
   1ff98:	10800717 	ldw	r2,28(r2)
   1ff9c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1ffa0:	e0bfff17 	ldw	r2,-4(fp)
   1ffa4:	10800317 	ldw	r2,12(r2)
   1ffa8:	10800204 	addi	r2,r2,8
   1ffac:	10800037 	ldwio	r2,0(r2)
   1ffb0:	1080004c 	andi	r2,r2,1
   1ffb4:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1ffb8:	e0bffe17 	ldw	r2,-8(fp)
   1ffbc:	10000226 	beq	r2,zero,1ffc8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1ffc0:	00bffe44 	movi	r2,-7
   1ffc4:	00001106 	br	2000c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1ffc8:	e0bfff17 	ldw	r2,-4(fp)
   1ffcc:	10c00617 	ldw	r3,24(r2)
   1ffd0:	008000b4 	movhi	r2,2
   1ffd4:	10bf0204 	addi	r2,r2,-1016
   1ffd8:	1880021e 	bne	r3,r2,1ffe4 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1ffdc:	e0bffd17 	ldw	r2,-12(fp)
   1ffe0:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1ffe4:	e0bfff17 	ldw	r2,-4(fp)
   1ffe8:	10800317 	ldw	r2,12(r2)
   1ffec:	10800204 	addi	r2,r2,8
   1fff0:	e0ffff17 	ldw	r3,-4(fp)
   1fff4:	18c00317 	ldw	r3,12(r3)
   1fff8:	18c00204 	addi	r3,r3,8
   1fffc:	18c00037 	ldwio	r3,0(r3)
   20000:	18c00054 	ori	r3,r3,1
   20004:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20008:	0005883a 	mov	r2,zero
}
   2000c:	e037883a 	mov	sp,fp
   20010:	df000017 	ldw	fp,0(sp)
   20014:	dec00104 	addi	sp,sp,4
   20018:	f800283a 	ret

0002001c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2001c:	defffe04 	addi	sp,sp,-8
   20020:	df000115 	stw	fp,4(sp)
   20024:	df000104 	addi	fp,sp,4
   20028:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2002c:	e0bfff17 	ldw	r2,-4(fp)
   20030:	10800317 	ldw	r2,12(r2)
   20034:	10800204 	addi	r2,r2,8
   20038:	e0ffff17 	ldw	r3,-4(fp)
   2003c:	18c00317 	ldw	r3,12(r3)
   20040:	18c00204 	addi	r3,r3,8
   20044:	19000037 	ldwio	r4,0(r3)
   20048:	00ffff84 	movi	r3,-2
   2004c:	20c6703a 	and	r3,r4,r3
   20050:	10c00035 	stwio	r3,0(r2)

}
   20054:	0001883a 	nop
   20058:	e037883a 	mov	sp,fp
   2005c:	df000017 	ldw	fp,0(sp)
   20060:	dec00104 	addi	sp,sp,4
   20064:	f800283a 	ret

00020068 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20068:	defffd04 	addi	sp,sp,-12
   2006c:	df000215 	stw	fp,8(sp)
   20070:	df000204 	addi	fp,sp,8
   20074:	e13ffe15 	stw	r4,-8(fp)
   20078:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   2007c:	e0bffe17 	ldw	r2,-8(fp)
   20080:	10c00d17 	ldw	r3,52(r2)
   20084:	e0bfff17 	ldw	r2,-4(fp)
   20088:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   2008c:	e0bffe17 	ldw	r2,-8(fp)
   20090:	10800317 	ldw	r2,12(r2)
   20094:	10800204 	addi	r2,r2,8
   20098:	10800037 	ldwio	r2,0(r2)
   2009c:	1080008c 	andi	r2,r2,2
   200a0:	1005d07a 	srai	r2,r2,1
   200a4:	1007883a 	mov	r3,r2
   200a8:	e0bfff17 	ldw	r2,-4(fp)
   200ac:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   200b0:	e0bffe17 	ldw	r2,-8(fp)
   200b4:	10800317 	ldw	r2,12(r2)
   200b8:	10800904 	addi	r2,r2,36
   200bc:	10800037 	ldwio	r2,0(r2)
   200c0:	1007883a 	mov	r3,r2
   200c4:	e0bfff17 	ldw	r2,-4(fp)
   200c8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   200cc:	e0bffe17 	ldw	r2,-8(fp)
   200d0:	10800317 	ldw	r2,12(r2)
   200d4:	10800804 	addi	r2,r2,32
   200d8:	10800037 	ldwio	r2,0(r2)
   200dc:	1007883a 	mov	r3,r2
   200e0:	e0bfff17 	ldw	r2,-4(fp)
   200e4:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   200e8:	e0bffe17 	ldw	r2,-8(fp)
   200ec:	10800317 	ldw	r2,12(r2)
   200f0:	10800a04 	addi	r2,r2,40
   200f4:	10800037 	ldwio	r2,0(r2)
   200f8:	1007883a 	mov	r3,r2
   200fc:	e0bfff17 	ldw	r2,-4(fp)
   20100:	10c0030d 	sth	r3,12(r2)
}
   20104:	0001883a 	nop
   20108:	e037883a 	mov	sp,fp
   2010c:	df000017 	ldw	fp,0(sp)
   20110:	dec00104 	addi	sp,sp,4
   20114:	f800283a 	ret

00020118 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20118:	defffd04 	addi	sp,sp,-12
   2011c:	df000215 	stw	fp,8(sp)
   20120:	df000204 	addi	fp,sp,8
   20124:	e13ffe15 	stw	r4,-8(fp)
   20128:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2012c:	e0bfff17 	ldw	r2,-4(fp)
   20130:	10c00017 	ldw	r3,0(r2)
   20134:	e0bffe17 	ldw	r2,-8(fp)
   20138:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2013c:	e0bffe17 	ldw	r2,-8(fp)
   20140:	10800317 	ldw	r2,12(r2)
   20144:	10c00204 	addi	r3,r2,8
   20148:	e0bffe17 	ldw	r2,-8(fp)
   2014c:	10800317 	ldw	r2,12(r2)
   20150:	10800204 	addi	r2,r2,8
   20154:	10800037 	ldwio	r2,0(r2)
   20158:	1009883a 	mov	r4,r2
   2015c:	00bfff44 	movi	r2,-3
   20160:	2088703a 	and	r4,r4,r2
   20164:	e0bfff17 	ldw	r2,-4(fp)
   20168:	10800117 	ldw	r2,4(r2)
   2016c:	1085883a 	add	r2,r2,r2
   20170:	1080008c 	andi	r2,r2,2
   20174:	2084b03a 	or	r2,r4,r2
   20178:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   2017c:	e0bffe17 	ldw	r2,-8(fp)
   20180:	10800317 	ldw	r2,12(r2)
   20184:	10800904 	addi	r2,r2,36
   20188:	e0ffff17 	ldw	r3,-4(fp)
   2018c:	18c0020b 	ldhu	r3,8(r3)
   20190:	18ffffcc 	andi	r3,r3,65535
   20194:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   20198:	e0bffe17 	ldw	r2,-8(fp)
   2019c:	10800317 	ldw	r2,12(r2)
   201a0:	10800804 	addi	r2,r2,32
   201a4:	e0ffff17 	ldw	r3,-4(fp)
   201a8:	18c0028b 	ldhu	r3,10(r3)
   201ac:	18ffffcc 	andi	r3,r3,65535
   201b0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   201b4:	e0bffe17 	ldw	r2,-8(fp)
   201b8:	10800317 	ldw	r2,12(r2)
   201bc:	10800a04 	addi	r2,r2,40
   201c0:	e0ffff17 	ldw	r3,-4(fp)
   201c4:	18c0030b 	ldhu	r3,12(r3)
   201c8:	18ffffcc 	andi	r3,r3,65535
   201cc:	10c00035 	stwio	r3,0(r2)
}
   201d0:	0001883a 	nop
   201d4:	e037883a 	mov	sp,fp
   201d8:	df000017 	ldw	fp,0(sp)
   201dc:	dec00104 	addi	sp,sp,4
   201e0:	f800283a 	ret

000201e4 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   201e4:	defffb04 	addi	sp,sp,-20
   201e8:	dfc00415 	stw	ra,16(sp)
   201ec:	df000315 	stw	fp,12(sp)
   201f0:	df000304 	addi	fp,sp,12
   201f4:	e13ffd15 	stw	r4,-12(fp)
   201f8:	e17ffe15 	stw	r5,-8(fp)
   201fc:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   20200:	e0bffe17 	ldw	r2,-8(fp)
   20204:	1080028b 	ldhu	r2,10(r2)
   20208:	10bfffcc 	andi	r2,r2,65535
   2020c:	10000426 	beq	r2,zero,20220 <alt_avalon_i2c_master_config_speed_get+0x3c>
   20210:	e0bffe17 	ldw	r2,-8(fp)
   20214:	1080020b 	ldhu	r2,8(r2)
   20218:	10bfffcc 	andi	r2,r2,65535
   2021c:	1000021e 	bne	r2,zero,20228 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   20220:	00bfff44 	movi	r2,-3
   20224:	00000f06 	br	20264 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20228:	e0bffd17 	ldw	r2,-12(fp)
   2022c:	11000c17 	ldw	r4,48(r2)
   20230:	e0bffe17 	ldw	r2,-8(fp)
   20234:	1080028b 	ldhu	r2,10(r2)
   20238:	10ffffcc 	andi	r3,r2,65535
   2023c:	e0bffe17 	ldw	r2,-8(fp)
   20240:	1080020b 	ldhu	r2,8(r2)
   20244:	10bfffcc 	andi	r2,r2,65535
   20248:	1885883a 	add	r2,r3,r2
   2024c:	100b883a 	mov	r5,r2
   20250:	000ce080 	call	ce08 <__udivsi3>
   20254:	1007883a 	mov	r3,r2
   20258:	e0bfff17 	ldw	r2,-4(fp)
   2025c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20260:	0005883a 	mov	r2,zero
}
   20264:	e037883a 	mov	sp,fp
   20268:	dfc00117 	ldw	ra,4(sp)
   2026c:	df000017 	ldw	fp,0(sp)
   20270:	dec00204 	addi	sp,sp,8
   20274:	f800283a 	ret

00020278 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   20278:	defff904 	addi	sp,sp,-28
   2027c:	dfc00615 	stw	ra,24(sp)
   20280:	df000515 	stw	fp,20(sp)
   20284:	df000504 	addi	fp,sp,20
   20288:	e13ffd15 	stw	r4,-12(fp)
   2028c:	e17ffe15 	stw	r5,-8(fp)
   20290:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   20294:	e0ffff17 	ldw	r3,-4(fp)
   20298:	008001b4 	movhi	r2,6
   2029c:	1086a004 	addi	r2,r2,6784
   202a0:	10c00436 	bltu	r2,r3,202b4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   202a4:	e0bfff17 	ldw	r2,-4(fp)
   202a8:	10000226 	beq	r2,zero,202b4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   202ac:	e0bfff17 	ldw	r2,-4(fp)
   202b0:	1000021e 	bne	r2,zero,202bc <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   202b4:	00bfff04 	movi	r2,-4
   202b8:	00002906 	br	20360 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   202bc:	e0bffd17 	ldw	r2,-12(fp)
   202c0:	10c00c17 	ldw	r3,48(r2)
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	1085883a 	add	r2,r2,r2
   202cc:	100b883a 	mov	r5,r2
   202d0:	1809883a 	mov	r4,r3
   202d4:	000ce080 	call	ce08 <__udivsi3>
   202d8:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   202dc:	e0bffb17 	ldw	r2,-20(fp)
   202e0:	10800f04 	addi	r2,r2,60
   202e4:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   202e8:	e0bffb17 	ldw	r2,-20(fp)
   202ec:	10bff104 	addi	r2,r2,-60
   202f0:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   202f4:	e0ffff17 	ldw	r3,-4(fp)
   202f8:	008000b4 	movhi	r2,2
   202fc:	10a1a804 	addi	r2,r2,-31072
   20300:	10c0042e 	bgeu	r2,r3,20314 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   20304:	e0bffe17 	ldw	r2,-8(fp)
   20308:	00c00044 	movi	r3,1
   2030c:	10c00115 	stw	r3,4(r2)
   20310:	00000206 	br	2031c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   20314:	e0bffe17 	ldw	r2,-8(fp)
   20318:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2031c:	e0bffb17 	ldw	r2,-20(fp)
   20320:	1007883a 	mov	r3,r2
   20324:	e0bffe17 	ldw	r2,-8(fp)
   20328:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2032c:	e0bffc17 	ldw	r2,-16(fp)
   20330:	1007883a 	mov	r3,r2
   20334:	e0bffe17 	ldw	r2,-8(fp)
   20338:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2033c:	e0bffb17 	ldw	r2,-20(fp)
   20340:	1007883a 	mov	r3,r2
   20344:	e0bffb17 	ldw	r2,-20(fp)
   20348:	1004d07a 	srli	r2,r2,1
   2034c:	1885c83a 	sub	r2,r3,r2
   20350:	1007883a 	mov	r3,r2
   20354:	e0bffe17 	ldw	r2,-8(fp)
   20358:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2035c:	0005883a 	mov	r2,zero

}
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20374:	defffe04 	addi	sp,sp,-8
   20378:	df000115 	stw	fp,4(sp)
   2037c:	df000104 	addi	fp,sp,4
   20380:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   20384:	e0bfff17 	ldw	r2,-4(fp)
   20388:	10800317 	ldw	r2,12(r2)
   2038c:	10800504 	addi	r2,r2,20
   20390:	10800037 	ldwio	r2,0(r2)
   20394:	1080004c 	andi	r2,r2,1
   20398:	10000226 	beq	r2,zero,203a4 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2039c:	00800044 	movi	r2,1
   203a0:	00000106 	br	203a8 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   203a4:	0005883a 	mov	r2,zero
}
   203a8:	e037883a 	mov	sp,fp
   203ac:	df000017 	ldw	fp,0(sp)
   203b0:	dec00104 	addi	sp,sp,4
   203b4:	f800283a 	ret

000203b8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   203b8:	defffb04 	addi	sp,sp,-20
   203bc:	df000415 	stw	fp,16(sp)
   203c0:	df000404 	addi	fp,sp,16
   203c4:	e13ffc15 	stw	r4,-16(fp)
   203c8:	e17ffd15 	stw	r5,-12(fp)
   203cc:	e1bffe15 	stw	r6,-8(fp)
   203d0:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   203d4:	e0bfff17 	ldw	r2,-4(fp)
   203d8:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   203dc:	00001406 	br	20430 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   203e0:	e0bfff17 	ldw	r2,-4(fp)
   203e4:	10800017 	ldw	r2,0(r2)
   203e8:	e0fffd17 	ldw	r3,-12(fp)
   203ec:	1885883a 	add	r2,r3,r2
   203f0:	e0fffc17 	ldw	r3,-16(fp)
   203f4:	18c00317 	ldw	r3,12(r3)
   203f8:	18c00104 	addi	r3,r3,4
   203fc:	18c00037 	ldwio	r3,0(r3)
   20400:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   20404:	e0bfff17 	ldw	r2,-4(fp)
   20408:	10800017 	ldw	r2,0(r2)
   2040c:	10c00044 	addi	r3,r2,1
   20410:	e0bfff17 	ldw	r2,-4(fp)
   20414:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20418:	e0bfff17 	ldw	r2,-4(fp)
   2041c:	10c00017 	ldw	r3,0(r2)
   20420:	e0bffe17 	ldw	r2,-8(fp)
   20424:	1880021e 	bne	r3,r2,20430 <alt_avalon_i2c_rx_read_available+0x78>
   20428:	e0bffe17 	ldw	r2,-8(fp)
   2042c:	1000061e 	bne	r2,zero,20448 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   20430:	e0bffc17 	ldw	r2,-16(fp)
   20434:	10800317 	ldw	r2,12(r2)
   20438:	10800704 	addi	r2,r2,28
   2043c:	10800037 	ldwio	r2,0(r2)
   20440:	103fe71e 	bne	r2,zero,203e0 <__alt_data_end+0xfc0203e0>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   20444:	00000106 	br	2044c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20448:	0001883a 	nop
    }
}
   2044c:	0001883a 	nop
   20450:	e037883a 	mov	sp,fp
   20454:	df000017 	ldw	fp,0(sp)
   20458:	dec00104 	addi	sp,sp,4
   2045c:	f800283a 	ret

00020460 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   20460:	defffa04 	addi	sp,sp,-24
   20464:	dfc00515 	stw	ra,20(sp)
   20468:	df000415 	stw	fp,16(sp)
   2046c:	df000404 	addi	fp,sp,16
   20470:	e13ffe15 	stw	r4,-8(fp)
   20474:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   20478:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   2047c:	008000b4 	movhi	r2,2
   20480:	10a1a804 	addi	r2,r2,-31072
   20484:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   20488:	00000d06 	br	204c0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   2048c:	e0bffd17 	ldw	r2,-12(fp)
   20490:	108002a8 	cmpgeui	r2,r2,10
   20494:	1000021e 	bne	r2,zero,204a0 <alt_avalon_i2c_rx_read+0x40>
   20498:	0109c404 	movi	r4,10000
   2049c:	00226a40 	call	226a4 <alt_busy_sleep>
      if (--timeout == 0)
   204a0:	e0bffd17 	ldw	r2,-12(fp)
   204a4:	10bfffc4 	addi	r2,r2,-1
   204a8:	e0bffd15 	stw	r2,-12(fp)
   204ac:	e0bffd17 	ldw	r2,-12(fp)
   204b0:	1000031e 	bne	r2,zero,204c0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   204b4:	00bfff84 	movi	r2,-2
   204b8:	e0bffc15 	stw	r2,-16(fp)
        break;
   204bc:	00000506 	br	204d4 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   204c0:	e0bffe17 	ldw	r2,-8(fp)
   204c4:	10800317 	ldw	r2,12(r2)
   204c8:	10800704 	addi	r2,r2,28
   204cc:	10800037 	ldwio	r2,0(r2)
   204d0:	103fee26 	beq	r2,zero,2048c <__alt_data_end+0xfc02048c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   204d4:	e0bffe17 	ldw	r2,-8(fp)
   204d8:	10800317 	ldw	r2,12(r2)
   204dc:	10800104 	addi	r2,r2,4
   204e0:	10800037 	ldwio	r2,0(r2)
   204e4:	1007883a 	mov	r3,r2
   204e8:	e0bfff17 	ldw	r2,-4(fp)
   204ec:	10c00005 	stb	r3,0(r2)
        
    return status;
   204f0:	e0bffc17 	ldw	r2,-16(fp)
}
   204f4:	e037883a 	mov	sp,fp
   204f8:	dfc00117 	ldw	ra,4(sp)
   204fc:	df000017 	ldw	fp,0(sp)
   20500:	dec00204 	addi	sp,sp,8
   20504:	f800283a 	ret

00020508 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   20508:	defff804 	addi	sp,sp,-32
   2050c:	dfc00715 	stw	ra,28(sp)
   20510:	df000615 	stw	fp,24(sp)
   20514:	df000604 	addi	fp,sp,24
   20518:	e13ffc15 	stw	r4,-16(fp)
   2051c:	2809883a 	mov	r4,r5
   20520:	3007883a 	mov	r3,r6
   20524:	3805883a 	mov	r2,r7
   20528:	e13ffd05 	stb	r4,-12(fp)
   2052c:	e0fffe05 	stb	r3,-8(fp)
   20530:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   20534:	0089c404 	movi	r2,10000
   20538:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2053c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20540:	00000c06 	br	20574 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   20544:	e0bffa17 	ldw	r2,-24(fp)
   20548:	108002a8 	cmpgeui	r2,r2,10
   2054c:	1000021e 	bne	r2,zero,20558 <alt_avalon_i2c_cmd_write+0x50>
   20550:	0109c404 	movi	r4,10000
   20554:	00226a40 	call	226a4 <alt_busy_sleep>
      if (--timeout == 0)
   20558:	e0bffa17 	ldw	r2,-24(fp)
   2055c:	10bfffc4 	addi	r2,r2,-1
   20560:	e0bffa15 	stw	r2,-24(fp)
   20564:	e0bffa17 	ldw	r2,-24(fp)
   20568:	1000021e 	bne	r2,zero,20574 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   2056c:	00bfff84 	movi	r2,-2
   20570:	00001906 	br	205d8 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20574:	e0bffc17 	ldw	r2,-16(fp)
   20578:	10800317 	ldw	r2,12(r2)
   2057c:	10800404 	addi	r2,r2,16
   20580:	10800037 	ldwio	r2,0(r2)
   20584:	1080004c 	andi	r2,r2,1
   20588:	103fee26 	beq	r2,zero,20544 <__alt_data_end+0xfc020544>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   2058c:	e0bffc17 	ldw	r2,-16(fp)
   20590:	10800317 	ldw	r2,12(r2)
   20594:	e13ffd03 	ldbu	r4,-12(fp)
   20598:	e0fffe03 	ldbu	r3,-8(fp)
   2059c:	1806927a 	slli	r3,r3,9
   205a0:	20c8b03a 	or	r4,r4,r3
   205a4:	e0ffff03 	ldbu	r3,-4(fp)
   205a8:	1806923a 	slli	r3,r3,8
   205ac:	20c6b03a 	or	r3,r4,r3
   205b0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   205b4:	e0bffb04 	addi	r2,fp,-20
   205b8:	100b883a 	mov	r5,r2
   205bc:	e13ffc17 	ldw	r4,-16(fp)
   205c0:	00207480 	call	20748 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   205c4:	e0bffb04 	addi	r2,fp,-20
   205c8:	100b883a 	mov	r5,r2
   205cc:	e13ffc17 	ldw	r4,-16(fp)
   205d0:	00207940 	call	20794 <alt_avalon_i2c_check_arblost>
    
    return status;
   205d4:	e0bffb17 	ldw	r2,-20(fp)
}
   205d8:	e037883a 	mov	sp,fp
   205dc:	dfc00117 	ldw	ra,4(sp)
   205e0:	df000017 	ldw	fp,0(sp)
   205e4:	dec00204 	addi	sp,sp,8
   205e8:	f800283a 	ret

000205ec <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   205ec:	defffa04 	addi	sp,sp,-24
   205f0:	dfc00515 	stw	ra,20(sp)
   205f4:	df000415 	stw	fp,16(sp)
   205f8:	df000404 	addi	fp,sp,16
   205fc:	e13ffd15 	stw	r4,-12(fp)
   20600:	e17ffe15 	stw	r5,-8(fp)
   20604:	3005883a 	mov	r2,r6
   20608:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2060c:	e0bffd17 	ldw	r2,-12(fp)
   20610:	10800d17 	ldw	r2,52(r2)
   20614:	10800058 	cmpnei	r2,r2,1
   20618:	10001c1e 	bne	r2,zero,2068c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2061c:	e0bffd17 	ldw	r2,-12(fp)
   20620:	10800917 	ldw	r2,36(r2)
   20624:	109e0014 	ori	r2,r2,30720
   20628:	1004d1fa 	srli	r2,r2,7
   2062c:	1007883a 	mov	r3,r2
   20630:	00bfff84 	movi	r2,-2
   20634:	1884703a 	and	r2,r3,r2
   20638:	1007883a 	mov	r3,r2
   2063c:	e0bffe17 	ldw	r2,-8(fp)
   20640:	1884b03a 	or	r2,r3,r2
   20644:	10803fcc 	andi	r2,r2,255
   20648:	e0ffff03 	ldbu	r3,-4(fp)
   2064c:	000f883a 	mov	r7,zero
   20650:	180d883a 	mov	r6,r3
   20654:	100b883a 	mov	r5,r2
   20658:	e13ffd17 	ldw	r4,-12(fp)
   2065c:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   20660:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   20664:	e0bffd17 	ldw	r2,-12(fp)
   20668:	10800917 	ldw	r2,36(r2)
   2066c:	10803fcc 	andi	r2,r2,255
   20670:	000f883a 	mov	r7,zero
   20674:	000d883a 	mov	r6,zero
   20678:	100b883a 	mov	r5,r2
   2067c:	e13ffd17 	ldw	r4,-12(fp)
   20680:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   20684:	e0bffc15 	stw	r2,-16(fp)
   20688:	00000e06 	br	206c4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2068c:	e0bffd17 	ldw	r2,-12(fp)
   20690:	10800917 	ldw	r2,36(r2)
   20694:	1085883a 	add	r2,r2,r2
   20698:	1007883a 	mov	r3,r2
   2069c:	e0bffe17 	ldw	r2,-8(fp)
   206a0:	1884b03a 	or	r2,r3,r2
   206a4:	10803fcc 	andi	r2,r2,255
   206a8:	e0ffff03 	ldbu	r3,-4(fp)
   206ac:	000f883a 	mov	r7,zero
   206b0:	180d883a 	mov	r6,r3
   206b4:	100b883a 	mov	r5,r2
   206b8:	e13ffd17 	ldw	r4,-12(fp)
   206bc:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   206c0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   206c4:	e0bffc17 	ldw	r2,-16(fp)
}
   206c8:	e037883a 	mov	sp,fp
   206cc:	dfc00117 	ldw	ra,4(sp)
   206d0:	df000017 	ldw	fp,0(sp)
   206d4:	dec00204 	addi	sp,sp,8
   206d8:	f800283a 	ret

000206dc <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   206dc:	defffd04 	addi	sp,sp,-12
   206e0:	df000215 	stw	fp,8(sp)
   206e4:	df000204 	addi	fp,sp,8
   206e8:	e13ffe15 	stw	r4,-8(fp)
   206ec:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   206f0:	e0bffe17 	ldw	r2,-8(fp)
   206f4:	10c00917 	ldw	r3,36(r2)
   206f8:	e0bfff17 	ldw	r2,-4(fp)
   206fc:	10c00015 	stw	r3,0(r2)
}
   20700:	0001883a 	nop
   20704:	e037883a 	mov	sp,fp
   20708:	df000017 	ldw	fp,0(sp)
   2070c:	dec00104 	addi	sp,sp,4
   20710:	f800283a 	ret

00020714 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   20714:	defffd04 	addi	sp,sp,-12
   20718:	df000215 	stw	fp,8(sp)
   2071c:	df000204 	addi	fp,sp,8
   20720:	e13ffe15 	stw	r4,-8(fp)
   20724:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   20728:	e0bffe17 	ldw	r2,-8(fp)
   2072c:	e0ffff17 	ldw	r3,-4(fp)
   20730:	10c00915 	stw	r3,36(r2)
}
   20734:	0001883a 	nop
   20738:	e037883a 	mov	sp,fp
   2073c:	df000017 	ldw	fp,0(sp)
   20740:	dec00104 	addi	sp,sp,4
   20744:	f800283a 	ret

00020748 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   20748:	defffd04 	addi	sp,sp,-12
   2074c:	df000215 	stw	fp,8(sp)
   20750:	df000204 	addi	fp,sp,8
   20754:	e13ffe15 	stw	r4,-8(fp)
   20758:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2075c:	e0bffe17 	ldw	r2,-8(fp)
   20760:	10800317 	ldw	r2,12(r2)
   20764:	10800404 	addi	r2,r2,16
   20768:	10800037 	ldwio	r2,0(r2)
   2076c:	1080010c 	andi	r2,r2,4
   20770:	10000326 	beq	r2,zero,20780 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   20774:	e0bfff17 	ldw	r2,-4(fp)
   20778:	00fffec4 	movi	r3,-5
   2077c:	10c00015 	stw	r3,0(r2)
    }
}
   20780:	0001883a 	nop
   20784:	e037883a 	mov	sp,fp
   20788:	df000017 	ldw	fp,0(sp)
   2078c:	dec00104 	addi	sp,sp,4
   20790:	f800283a 	ret

00020794 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   20794:	defffd04 	addi	sp,sp,-12
   20798:	df000215 	stw	fp,8(sp)
   2079c:	df000204 	addi	fp,sp,8
   207a0:	e13ffe15 	stw	r4,-8(fp)
   207a4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   207a8:	e0bffe17 	ldw	r2,-8(fp)
   207ac:	10800317 	ldw	r2,12(r2)
   207b0:	10800404 	addi	r2,r2,16
   207b4:	10800037 	ldwio	r2,0(r2)
   207b8:	1080020c 	andi	r2,r2,8
   207bc:	10000326 	beq	r2,zero,207cc <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   207c0:	e0bfff17 	ldw	r2,-4(fp)
   207c4:	00fffe84 	movi	r3,-6
   207c8:	10c00015 	stw	r3,0(r2)
    }
}
   207cc:	0001883a 	nop
   207d0:	e037883a 	mov	sp,fp
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00104 	addi	sp,sp,4
   207dc:	f800283a 	ret

000207e0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   207e0:	defff804 	addi	sp,sp,-32
   207e4:	dfc00715 	stw	ra,28(sp)
   207e8:	df000615 	stw	fp,24(sp)
   207ec:	df000604 	addi	fp,sp,24
   207f0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   207f4:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   207f8:	e0bfff17 	ldw	r2,-4(fp)
   207fc:	10800717 	ldw	r2,28(r2)
   20800:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   20804:	e0bffb17 	ldw	r2,-20(fp)
   20808:	10800117 	ldw	r2,4(r2)
   2080c:	10800044 	addi	r2,r2,1
   20810:	0149c404 	movi	r5,10000
   20814:	1009883a 	mov	r4,r2
   20818:	000cec40 	call	cec4 <__mulsi3>
   2081c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   20820:	e0bffd04 	addi	r2,fp,-12
   20824:	100b883a 	mov	r5,r2
   20828:	e13fff17 	ldw	r4,-4(fp)
   2082c:	00216780 	call	21678 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   20830:	e0bffd17 	ldw	r2,-12(fp)
   20834:	100b883a 	mov	r5,r2
   20838:	e13fff17 	ldw	r4,-4(fp)
   2083c:	00215ac0 	call	215ac <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20840:	e0bffc04 	addi	r2,fp,-16
   20844:	100b883a 	mov	r5,r2
   20848:	e13fff17 	ldw	r4,-4(fp)
   2084c:	00207480 	call	20748 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   20850:	e0bffc17 	ldw	r2,-16(fp)
   20854:	10002226 	beq	r2,zero,208e0 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   20858:	e0bffb17 	ldw	r2,-20(fp)
   2085c:	10800217 	ldw	r2,8(r2)
   20860:	10001d26 	beq	r2,zero,208d8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20864:	00000d06 	br	2089c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   20868:	e0bffa17 	ldw	r2,-24(fp)
   2086c:	108002a8 	cmpgeui	r2,r2,10
   20870:	1000021e 	bne	r2,zero,2087c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   20874:	0109c404 	movi	r4,10000
   20878:	00226a40 	call	226a4 <alt_busy_sleep>
              if (--timeout == 0)
   2087c:	e0bffa17 	ldw	r2,-24(fp)
   20880:	10bfffc4 	addi	r2,r2,-1
   20884:	e0bffa15 	stw	r2,-24(fp)
   20888:	e0bffa17 	ldw	r2,-24(fp)
   2088c:	1000031e 	bne	r2,zero,2089c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   20890:	00bfff84 	movi	r2,-2
   20894:	e0bffc15 	stw	r2,-16(fp)
                 break;
   20898:	00000306 	br	208a8 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2089c:	e13fff17 	ldw	r4,-4(fp)
   208a0:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   208a4:	103ff01e 	bne	r2,zero,20868 <__alt_data_end+0xfc020868>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   208a8:	e0bffb17 	ldw	r2,-20(fp)
   208ac:	10800017 	ldw	r2,0(r2)
   208b0:	e0fffe04 	addi	r3,fp,-8
   208b4:	180f883a 	mov	r7,r3
   208b8:	000d883a 	mov	r6,zero
   208bc:	100b883a 	mov	r5,r2
   208c0:	e13fff17 	ldw	r4,-4(fp)
   208c4:	00203b80 	call	203b8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   208c8:	e13fff17 	ldw	r4,-4(fp)
   208cc:	002001c0 	call	2001c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   208d0:	e0bffb17 	ldw	r2,-20(fp)
   208d4:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   208d8:	e0bffc17 	ldw	r2,-16(fp)
   208dc:	00000a06 	br	20908 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   208e0:	e0bffb17 	ldw	r2,-20(fp)
   208e4:	10800217 	ldw	r2,8(r2)
   208e8:	10000626 	beq	r2,zero,20904 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   208ec:	e0bffd17 	ldw	r2,-12(fp)
   208f0:	100b883a 	mov	r5,r2
   208f4:	e13fff17 	ldw	r4,-4(fp)
   208f8:	00216140 	call	21614 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   208fc:	00bffe44 	movi	r2,-7
   20900:	00000106 	br	20908 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   20904:	0005883a 	mov	r2,zero
}
   20908:	e037883a 	mov	sp,fp
   2090c:	dfc00117 	ldw	ra,4(sp)
   20910:	df000017 	ldw	fp,0(sp)
   20914:	dec00204 	addi	sp,sp,8
   20918:	f800283a 	ret

0002091c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2091c:	defff704 	addi	sp,sp,-36
   20920:	dfc00815 	stw	ra,32(sp)
   20924:	df000715 	stw	fp,28(sp)
   20928:	df000704 	addi	fp,sp,28
   2092c:	e13ffc15 	stw	r4,-16(fp)
   20930:	e17ffd15 	stw	r5,-12(fp)
   20934:	e1bffe15 	stw	r6,-8(fp)
   20938:	3805883a 	mov	r2,r7
   2093c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20940:	0089c404 	movi	r2,10000
   20944:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   20948:	00002206 	br	209d4 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2094c:	e0bffb17 	ldw	r2,-20(fp)
   20950:	108002a8 	cmpgeui	r2,r2,10
   20954:	1000021e 	bne	r2,zero,20960 <alt_avalon_i2c_master_tx+0x44>
   20958:	0109c404 	movi	r4,10000
   2095c:	00226a40 	call	226a4 <alt_busy_sleep>
      if (use_interrupts)
   20960:	e0bfff03 	ldbu	r2,-4(fp)
   20964:	10000926 	beq	r2,zero,2098c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   20968:	00800044 	movi	r2,1
   2096c:	d8800015 	stw	r2,0(sp)
   20970:	000f883a 	mov	r7,zero
   20974:	e1bffe17 	ldw	r6,-8(fp)
   20978:	e17ffd17 	ldw	r5,-12(fp)
   2097c:	e13ffc17 	ldw	r4,-16(fp)
   20980:	0020ec80 	call	20ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
   20984:	e0bffa15 	stw	r2,-24(fp)
   20988:	00000806 	br	209ac <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   2098c:	00800044 	movi	r2,1
   20990:	d8800015 	stw	r2,0(sp)
   20994:	000f883a 	mov	r7,zero
   20998:	e1bffe17 	ldw	r6,-8(fp)
   2099c:	e17ffd17 	ldw	r5,-12(fp)
   209a0:	e13ffc17 	ldw	r4,-16(fp)
   209a4:	0020d080 	call	20d08 <alt_avalon_i2c_master_transmit>
   209a8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   209ac:	e0bffa17 	ldw	r2,-24(fp)
   209b0:	10bffea0 	cmpeqi	r2,r2,-6
   209b4:	1000061e 	bne	r2,zero,209d0 <alt_avalon_i2c_master_tx+0xb4>
   209b8:	e0bffa17 	ldw	r2,-24(fp)
   209bc:	10bffee0 	cmpeqi	r2,r2,-5
   209c0:	1000031e 	bne	r2,zero,209d0 <alt_avalon_i2c_master_tx+0xb4>
   209c4:	e0bffa17 	ldw	r2,-24(fp)
   209c8:	10bffe58 	cmpnei	r2,r2,-7
   209cc:	1000061e 	bne	r2,zero,209e8 <alt_avalon_i2c_master_tx+0xcc>
   209d0:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   209d4:	e0bffb17 	ldw	r2,-20(fp)
   209d8:	10ffffc4 	addi	r3,r2,-1
   209dc:	e0fffb15 	stw	r3,-20(fp)
   209e0:	103fda1e 	bne	r2,zero,2094c <__alt_data_end+0xfc02094c>
   209e4:	00000106 	br	209ec <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   209e8:	0001883a 	nop
    }

    return status;
   209ec:	e0bffa17 	ldw	r2,-24(fp)
}        
   209f0:	e037883a 	mov	sp,fp
   209f4:	dfc00117 	ldw	ra,4(sp)
   209f8:	df000017 	ldw	fp,0(sp)
   209fc:	dec00204 	addi	sp,sp,8
   20a00:	f800283a 	ret

00020a04 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20a04:	defff704 	addi	sp,sp,-36
   20a08:	dfc00815 	stw	ra,32(sp)
   20a0c:	df000715 	stw	fp,28(sp)
   20a10:	df000704 	addi	fp,sp,28
   20a14:	e13ffc15 	stw	r4,-16(fp)
   20a18:	e17ffd15 	stw	r5,-12(fp)
   20a1c:	e1bffe15 	stw	r6,-8(fp)
   20a20:	3805883a 	mov	r2,r7
   20a24:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20a28:	0089c404 	movi	r2,10000
   20a2c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   20a30:	e0bfff03 	ldbu	r2,-4(fp)
   20a34:	10003426 	beq	r2,zero,20b08 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   20a38:	00001706 	br	20a98 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20a3c:	e0bffb17 	ldw	r2,-20(fp)
   20a40:	108002a8 	cmpgeui	r2,r2,10
   20a44:	1000021e 	bne	r2,zero,20a50 <alt_avalon_i2c_master_rx+0x4c>
   20a48:	0109c404 	movi	r4,10000
   20a4c:	00226a40 	call	226a4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20a50:	00800044 	movi	r2,1
   20a54:	d8800015 	stw	r2,0(sp)
   20a58:	000f883a 	mov	r7,zero
   20a5c:	e1bffe17 	ldw	r6,-8(fp)
   20a60:	e17ffd17 	ldw	r5,-12(fp)
   20a64:	e13ffc17 	ldw	r4,-16(fp)
   20a68:	00212e40 	call	212e4 <alt_avalon_i2c_master_receive_using_interrupts>
   20a6c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20a70:	e0bffa17 	ldw	r2,-24(fp)
   20a74:	10bffea0 	cmpeqi	r2,r2,-6
   20a78:	1000061e 	bne	r2,zero,20a94 <alt_avalon_i2c_master_rx+0x90>
   20a7c:	e0bffa17 	ldw	r2,-24(fp)
   20a80:	10bffee0 	cmpeqi	r2,r2,-5
   20a84:	1000031e 	bne	r2,zero,20a94 <alt_avalon_i2c_master_rx+0x90>
   20a88:	e0bffa17 	ldw	r2,-24(fp)
   20a8c:	10bffe58 	cmpnei	r2,r2,-7
   20a90:	1000221e 	bne	r2,zero,20b1c <alt_avalon_i2c_master_rx+0x118>
   20a94:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   20a98:	e0bffb17 	ldw	r2,-20(fp)
   20a9c:	10ffffc4 	addi	r3,r2,-1
   20aa0:	e0fffb15 	stw	r3,-20(fp)
   20aa4:	103fe51e 	bne	r2,zero,20a3c <__alt_data_end+0xfc020a3c>
   20aa8:	00001f06 	br	20b28 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20aac:	e0bffb17 	ldw	r2,-20(fp)
   20ab0:	108002a8 	cmpgeui	r2,r2,10
   20ab4:	1000021e 	bne	r2,zero,20ac0 <alt_avalon_i2c_master_rx+0xbc>
   20ab8:	0109c404 	movi	r4,10000
   20abc:	00226a40 	call	226a4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20ac0:	00800044 	movi	r2,1
   20ac4:	d8800015 	stw	r2,0(sp)
   20ac8:	000f883a 	mov	r7,zero
   20acc:	e1bffe17 	ldw	r6,-8(fp)
   20ad0:	e17ffd17 	ldw	r5,-12(fp)
   20ad4:	e13ffc17 	ldw	r4,-16(fp)
   20ad8:	00210d40 	call	210d4 <alt_avalon_i2c_master_receive>
   20adc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ae0:	e0bffa17 	ldw	r2,-24(fp)
   20ae4:	10bffea0 	cmpeqi	r2,r2,-6
   20ae8:	1000061e 	bne	r2,zero,20b04 <alt_avalon_i2c_master_rx+0x100>
   20aec:	e0bffa17 	ldw	r2,-24(fp)
   20af0:	10bffee0 	cmpeqi	r2,r2,-5
   20af4:	1000031e 	bne	r2,zero,20b04 <alt_avalon_i2c_master_rx+0x100>
   20af8:	e0bffa17 	ldw	r2,-24(fp)
   20afc:	10bffe58 	cmpnei	r2,r2,-7
   20b00:	1000081e 	bne	r2,zero,20b24 <alt_avalon_i2c_master_rx+0x120>
   20b04:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   20b08:	e0bffb17 	ldw	r2,-20(fp)
   20b0c:	10ffffc4 	addi	r3,r2,-1
   20b10:	e0fffb15 	stw	r3,-20(fp)
   20b14:	103fe51e 	bne	r2,zero,20aac <__alt_data_end+0xfc020aac>
   20b18:	00000306 	br	20b28 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20b1c:	0001883a 	nop
   20b20:	00000106 	br	20b28 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20b24:	0001883a 	nop
      }
    }
    
    return status;
   20b28:	e0bffa17 	ldw	r2,-24(fp)
}        
   20b2c:	e037883a 	mov	sp,fp
   20b30:	dfc00117 	ldw	ra,4(sp)
   20b34:	df000017 	ldw	fp,0(sp)
   20b38:	dec00204 	addi	sp,sp,8
   20b3c:	f800283a 	ret

00020b40 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   20b40:	defff604 	addi	sp,sp,-40
   20b44:	dfc00915 	stw	ra,36(sp)
   20b48:	df000815 	stw	fp,32(sp)
   20b4c:	df000804 	addi	fp,sp,32
   20b50:	e13ffb15 	stw	r4,-20(fp)
   20b54:	e17ffc15 	stw	r5,-16(fp)
   20b58:	e1bffd15 	stw	r6,-12(fp)
   20b5c:	e1fffe15 	stw	r7,-8(fp)
   20b60:	e0800317 	ldw	r2,12(fp)
   20b64:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20b68:	0089c404 	movi	r2,10000
   20b6c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   20b70:	e0bfff03 	ldbu	r2,-4(fp)
   20b74:	10005626 	beq	r2,zero,20cd0 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20b78:	00002806 	br	20c1c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20b7c:	e0bffa17 	ldw	r2,-24(fp)
   20b80:	108002a8 	cmpgeui	r2,r2,10
   20b84:	1000021e 	bne	r2,zero,20b90 <alt_avalon_i2c_master_tx_rx+0x50>
   20b88:	0109c404 	movi	r4,10000
   20b8c:	00226a40 	call	226a4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20b90:	d8000015 	stw	zero,0(sp)
   20b94:	000f883a 	mov	r7,zero
   20b98:	e1bffd17 	ldw	r6,-12(fp)
   20b9c:	e17ffc17 	ldw	r5,-16(fp)
   20ba0:	e13ffb17 	ldw	r4,-20(fp)
   20ba4:	0020ec80 	call	20ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
   20ba8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20bac:	e0bff917 	ldw	r2,-28(fp)
   20bb0:	10bffea0 	cmpeqi	r2,r2,-6
   20bb4:	1000191e 	bne	r2,zero,20c1c <alt_avalon_i2c_master_tx_rx+0xdc>
   20bb8:	e0bff917 	ldw	r2,-28(fp)
   20bbc:	10bffee0 	cmpeqi	r2,r2,-5
   20bc0:	1000161e 	bne	r2,zero,20c1c <alt_avalon_i2c_master_tx_rx+0xdc>
   20bc4:	e0bff917 	ldw	r2,-28(fp)
   20bc8:	10bffe58 	cmpnei	r2,r2,-7
   20bcc:	1000011e 	bne	r2,zero,20bd4 <alt_avalon_i2c_master_tx_rx+0x94>
   20bd0:	00001206 	br	20c1c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20bd4:	00800044 	movi	r2,1
   20bd8:	d8800015 	stw	r2,0(sp)
   20bdc:	01c00044 	movi	r7,1
   20be0:	e1800217 	ldw	r6,8(fp)
   20be4:	e17ffe17 	ldw	r5,-8(fp)
   20be8:	e13ffb17 	ldw	r4,-20(fp)
   20bec:	00212e40 	call	212e4 <alt_avalon_i2c_master_receive_using_interrupts>
   20bf0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20bf4:	e0bff917 	ldw	r2,-28(fp)
   20bf8:	10bffea0 	cmpeqi	r2,r2,-6
   20bfc:	1000061e 	bne	r2,zero,20c18 <alt_avalon_i2c_master_tx_rx+0xd8>
   20c00:	e0bff917 	ldw	r2,-28(fp)
   20c04:	10bffee0 	cmpeqi	r2,r2,-5
   20c08:	1000031e 	bne	r2,zero,20c18 <alt_avalon_i2c_master_tx_rx+0xd8>
   20c0c:	e0bff917 	ldw	r2,-28(fp)
   20c10:	10bffe58 	cmpnei	r2,r2,-7
   20c14:	1000331e 	bne	r2,zero,20ce4 <alt_avalon_i2c_master_tx_rx+0x1a4>
   20c18:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20c1c:	e0bffa17 	ldw	r2,-24(fp)
   20c20:	10ffffc4 	addi	r3,r2,-1
   20c24:	e0fffa15 	stw	r3,-24(fp)
   20c28:	103fd41e 	bne	r2,zero,20b7c <__alt_data_end+0xfc020b7c>
   20c2c:	00003006 	br	20cf0 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20c30:	e0bffa17 	ldw	r2,-24(fp)
   20c34:	108002a8 	cmpgeui	r2,r2,10
   20c38:	1000021e 	bne	r2,zero,20c44 <alt_avalon_i2c_master_tx_rx+0x104>
   20c3c:	0109c404 	movi	r4,10000
   20c40:	00226a40 	call	226a4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20c44:	d8000015 	stw	zero,0(sp)
   20c48:	000f883a 	mov	r7,zero
   20c4c:	e1bffd17 	ldw	r6,-12(fp)
   20c50:	e17ffc17 	ldw	r5,-16(fp)
   20c54:	e13ffb17 	ldw	r4,-20(fp)
   20c58:	0020d080 	call	20d08 <alt_avalon_i2c_master_transmit>
   20c5c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20c60:	e0bff917 	ldw	r2,-28(fp)
   20c64:	10bffea0 	cmpeqi	r2,r2,-6
   20c68:	1000191e 	bne	r2,zero,20cd0 <alt_avalon_i2c_master_tx_rx+0x190>
   20c6c:	e0bff917 	ldw	r2,-28(fp)
   20c70:	10bffee0 	cmpeqi	r2,r2,-5
   20c74:	1000161e 	bne	r2,zero,20cd0 <alt_avalon_i2c_master_tx_rx+0x190>
   20c78:	e0bff917 	ldw	r2,-28(fp)
   20c7c:	10bffe58 	cmpnei	r2,r2,-7
   20c80:	1000011e 	bne	r2,zero,20c88 <alt_avalon_i2c_master_tx_rx+0x148>
   20c84:	00001206 	br	20cd0 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20c88:	00800044 	movi	r2,1
   20c8c:	d8800015 	stw	r2,0(sp)
   20c90:	01c00044 	movi	r7,1
   20c94:	e1800217 	ldw	r6,8(fp)
   20c98:	e17ffe17 	ldw	r5,-8(fp)
   20c9c:	e13ffb17 	ldw	r4,-20(fp)
   20ca0:	00210d40 	call	210d4 <alt_avalon_i2c_master_receive>
   20ca4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ca8:	e0bff917 	ldw	r2,-28(fp)
   20cac:	10bffea0 	cmpeqi	r2,r2,-6
   20cb0:	1000061e 	bne	r2,zero,20ccc <alt_avalon_i2c_master_tx_rx+0x18c>
   20cb4:	e0bff917 	ldw	r2,-28(fp)
   20cb8:	10bffee0 	cmpeqi	r2,r2,-5
   20cbc:	1000031e 	bne	r2,zero,20ccc <alt_avalon_i2c_master_tx_rx+0x18c>
   20cc0:	e0bff917 	ldw	r2,-28(fp)
   20cc4:	10bffe58 	cmpnei	r2,r2,-7
   20cc8:	1000081e 	bne	r2,zero,20cec <alt_avalon_i2c_master_tx_rx+0x1ac>
   20ccc:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   20cd0:	e0bffa17 	ldw	r2,-24(fp)
   20cd4:	10ffffc4 	addi	r3,r2,-1
   20cd8:	e0fffa15 	stw	r3,-24(fp)
   20cdc:	103fd41e 	bne	r2,zero,20c30 <__alt_data_end+0xfc020c30>
   20ce0:	00000306 	br	20cf0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20ce4:	0001883a 	nop
   20ce8:	00000106 	br	20cf0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20cec:	0001883a 	nop
      }
    }
    
    return status;
   20cf0:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20cf4:	e037883a 	mov	sp,fp
   20cf8:	dfc00117 	ldw	ra,4(sp)
   20cfc:	df000017 	ldw	fp,0(sp)
   20d00:	dec00204 	addi	sp,sp,8
   20d04:	f800283a 	ret

00020d08 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20d08:	defff704 	addi	sp,sp,-36
   20d0c:	dfc00815 	stw	ra,32(sp)
   20d10:	df000715 	stw	fp,28(sp)
   20d14:	df000704 	addi	fp,sp,28
   20d18:	e13ffb15 	stw	r4,-20(fp)
   20d1c:	e17ffc15 	stw	r5,-16(fp)
   20d20:	e1bffd15 	stw	r6,-12(fp)
   20d24:	3807883a 	mov	r3,r7
   20d28:	e0800217 	ldw	r2,8(fp)
   20d2c:	e0fffe05 	stb	r3,-8(fp)
   20d30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20d34:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   20d38:	0149c404 	movi	r5,10000
   20d3c:	e13ffd17 	ldw	r4,-12(fp)
   20d40:	000cec40 	call	cec4 <__mulsi3>
   20d44:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   20d48:	e0bffd17 	ldw	r2,-12(fp)
   20d4c:	1000021e 	bne	r2,zero,20d58 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20d50:	0005883a 	mov	r2,zero
   20d54:	00005706 	br	20eb4 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20d58:	e0bffe03 	ldbu	r2,-8(fp)
   20d5c:	10000a1e 	bne	r2,zero,20d88 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20d60:	e13ffb17 	ldw	r4,-20(fp)
   20d64:	001ff840 	call	1ff84 <alt_avalon_i2c_enable>
   20d68:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20d6c:	e0bffa17 	ldw	r2,-24(fp)
   20d70:	10000226 	beq	r2,zero,20d7c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   20d74:	e0bffa17 	ldw	r2,-24(fp)
   20d78:	00004e06 	br	20eb4 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20d7c:	01400704 	movi	r5,28
   20d80:	e13ffb17 	ldw	r4,-20(fp)
   20d84:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20d88:	e0bffe03 	ldbu	r2,-8(fp)
   20d8c:	100d883a 	mov	r6,r2
   20d90:	000b883a 	mov	r5,zero
   20d94:	e13ffb17 	ldw	r4,-20(fp)
   20d98:	00205ec0 	call	205ec <alt_avalon_i2c_send_address>
   20d9c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   20da0:	e0bffa17 	ldw	r2,-24(fp)
   20da4:	1000271e 	bne	r2,zero,20e44 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20da8:	00000f06 	br	20de8 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20dac:	e0bffc17 	ldw	r2,-16(fp)
   20db0:	10800003 	ldbu	r2,0(r2)
   20db4:	10803fcc 	andi	r2,r2,255
   20db8:	000f883a 	mov	r7,zero
   20dbc:	000d883a 	mov	r6,zero
   20dc0:	100b883a 	mov	r5,r2
   20dc4:	e13ffb17 	ldw	r4,-20(fp)
   20dc8:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   20dcc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   20dd0:	e0bffc17 	ldw	r2,-16(fp)
   20dd4:	10800044 	addi	r2,r2,1
   20dd8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20ddc:	e0bffd17 	ldw	r2,-12(fp)
   20de0:	10bfffc4 	addi	r2,r2,-1
   20de4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20de8:	e0bffd17 	ldw	r2,-12(fp)
   20dec:	108000b0 	cmpltui	r2,r2,2
   20df0:	1000021e 	bne	r2,zero,20dfc <alt_avalon_i2c_master_transmit+0xf4>
   20df4:	e0bffa17 	ldw	r2,-24(fp)
   20df8:	103fec26 	beq	r2,zero,20dac <__alt_data_end+0xfc020dac>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20dfc:	e0bffa17 	ldw	r2,-24(fp)
   20e00:	1000101e 	bne	r2,zero,20e44 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20e04:	e0bffc17 	ldw	r2,-16(fp)
   20e08:	10800003 	ldbu	r2,0(r2)
   20e0c:	10803fcc 	andi	r2,r2,255
   20e10:	e0ffff03 	ldbu	r3,-4(fp)
   20e14:	180f883a 	mov	r7,r3
   20e18:	000d883a 	mov	r6,zero
   20e1c:	100b883a 	mov	r5,r2
   20e20:	e13ffb17 	ldw	r4,-20(fp)
   20e24:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   20e28:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   20e2c:	e0bffc17 	ldw	r2,-16(fp)
   20e30:	10800044 	addi	r2,r2,1
   20e34:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20e38:	e0bffd17 	ldw	r2,-12(fp)
   20e3c:	10bfffc4 	addi	r2,r2,-1
   20e40:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20e44:	e0bfff03 	ldbu	r2,-4(fp)
   20e48:	1000101e 	bne	r2,zero,20e8c <alt_avalon_i2c_master_transmit+0x184>
   20e4c:	e0bffa17 	ldw	r2,-24(fp)
   20e50:	10001726 	beq	r2,zero,20eb0 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e54:	00000d06 	br	20e8c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20e58:	e0bff917 	ldw	r2,-28(fp)
   20e5c:	108002a8 	cmpgeui	r2,r2,10
   20e60:	1000021e 	bne	r2,zero,20e6c <alt_avalon_i2c_master_transmit+0x164>
   20e64:	0109c404 	movi	r4,10000
   20e68:	00226a40 	call	226a4 <alt_busy_sleep>
            if (--timeout == 0)
   20e6c:	e0bff917 	ldw	r2,-28(fp)
   20e70:	10bfffc4 	addi	r2,r2,-1
   20e74:	e0bff915 	stw	r2,-28(fp)
   20e78:	e0bff917 	ldw	r2,-28(fp)
   20e7c:	1000031e 	bne	r2,zero,20e8c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20e80:	00bfff84 	movi	r2,-2
   20e84:	e0bffa15 	stw	r2,-24(fp)
               break;
   20e88:	00000306 	br	20e98 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20e8c:	e13ffb17 	ldw	r4,-20(fp)
   20e90:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   20e94:	103ff01e 	bne	r2,zero,20e58 <__alt_data_end+0xfc020e58>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   20e98:	e0bffa04 	addi	r2,fp,-24
   20e9c:	100b883a 	mov	r5,r2
   20ea0:	e13ffb17 	ldw	r4,-20(fp)
   20ea4:	00207480 	call	20748 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20ea8:	e13ffb17 	ldw	r4,-20(fp)
   20eac:	002001c0 	call	2001c <alt_avalon_i2c_disable>
    }


    return status;
   20eb0:	e0bffa17 	ldw	r2,-24(fp)
}
   20eb4:	e037883a 	mov	sp,fp
   20eb8:	dfc00117 	ldw	ra,4(sp)
   20ebc:	df000017 	ldw	fp,0(sp)
   20ec0:	dec00204 	addi	sp,sp,8
   20ec4:	f800283a 	ret

00020ec8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20ec8:	defff604 	addi	sp,sp,-40
   20ecc:	dfc00915 	stw	ra,36(sp)
   20ed0:	df000815 	stw	fp,32(sp)
   20ed4:	df000804 	addi	fp,sp,32
   20ed8:	e13ffb15 	stw	r4,-20(fp)
   20edc:	e17ffc15 	stw	r5,-16(fp)
   20ee0:	e1bffd15 	stw	r6,-12(fp)
   20ee4:	3807883a 	mov	r3,r7
   20ee8:	e0800217 	ldw	r2,8(fp)
   20eec:	e0fffe05 	stb	r3,-8(fp)
   20ef0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20ef4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   20ef8:	0149c404 	movi	r5,10000
   20efc:	e13ffd17 	ldw	r4,-12(fp)
   20f00:	000cec40 	call	cec4 <__mulsi3>
   20f04:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20f08:	e0bffb17 	ldw	r2,-20(fp)
   20f0c:	10800717 	ldw	r2,28(r2)
   20f10:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   20f14:	e0bffd17 	ldw	r2,-12(fp)
   20f18:	1000021e 	bne	r2,zero,20f24 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20f1c:	0005883a 	mov	r2,zero
   20f20:	00006706 	br	210c0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20f24:	e0bffb17 	ldw	r2,-20(fp)
   20f28:	10c00617 	ldw	r3,24(r2)
   20f2c:	008000b4 	movhi	r2,2
   20f30:	10bf0204 	addi	r2,r2,-1016
   20f34:	18800226 	beq	r3,r2,20f40 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20f38:	00bfff44 	movi	r2,-3
   20f3c:	00006006 	br	210c0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20f40:	e0bffe03 	ldbu	r2,-8(fp)
   20f44:	10000a1e 	bne	r2,zero,20f70 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20f48:	e13ffb17 	ldw	r4,-20(fp)
   20f4c:	001ff840 	call	1ff84 <alt_avalon_i2c_enable>
   20f50:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20f54:	e0bff817 	ldw	r2,-32(fp)
   20f58:	10000226 	beq	r2,zero,20f64 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   20f5c:	e0bff817 	ldw	r2,-32(fp)
   20f60:	00005706 	br	210c0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20f64:	01400704 	movi	r5,28
   20f68:	e13ffb17 	ldw	r4,-20(fp)
   20f6c:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20f70:	e0bffe03 	ldbu	r2,-8(fp)
   20f74:	100d883a 	mov	r6,r2
   20f78:	000b883a 	mov	r5,zero
   20f7c:	e13ffb17 	ldw	r4,-20(fp)
   20f80:	00205ec0 	call	205ec <alt_avalon_i2c_send_address>
   20f84:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   20f88:	e0bff817 	ldw	r2,-32(fp)
   20f8c:	1000271e 	bne	r2,zero,2102c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20f90:	00000f06 	br	20fd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20f94:	e0bffc17 	ldw	r2,-16(fp)
   20f98:	10800003 	ldbu	r2,0(r2)
   20f9c:	10803fcc 	andi	r2,r2,255
   20fa0:	000f883a 	mov	r7,zero
   20fa4:	000d883a 	mov	r6,zero
   20fa8:	100b883a 	mov	r5,r2
   20fac:	e13ffb17 	ldw	r4,-20(fp)
   20fb0:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   20fb4:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   20fb8:	e0bffc17 	ldw	r2,-16(fp)
   20fbc:	10800044 	addi	r2,r2,1
   20fc0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20fc4:	e0bffd17 	ldw	r2,-12(fp)
   20fc8:	10bfffc4 	addi	r2,r2,-1
   20fcc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20fd0:	e0bffd17 	ldw	r2,-12(fp)
   20fd4:	108000b0 	cmpltui	r2,r2,2
   20fd8:	1000021e 	bne	r2,zero,20fe4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   20fdc:	e0bff817 	ldw	r2,-32(fp)
   20fe0:	103fec26 	beq	r2,zero,20f94 <__alt_data_end+0xfc020f94>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20fe4:	e0bff817 	ldw	r2,-32(fp)
   20fe8:	1000101e 	bne	r2,zero,2102c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20fec:	e0bffc17 	ldw	r2,-16(fp)
   20ff0:	10800003 	ldbu	r2,0(r2)
   20ff4:	10803fcc 	andi	r2,r2,255
   20ff8:	e0ffff03 	ldbu	r3,-4(fp)
   20ffc:	180f883a 	mov	r7,r3
   21000:	000d883a 	mov	r6,zero
   21004:	100b883a 	mov	r5,r2
   21008:	e13ffb17 	ldw	r4,-20(fp)
   2100c:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   21010:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   21014:	e0bffc17 	ldw	r2,-16(fp)
   21018:	10800044 	addi	r2,r2,1
   2101c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21020:	e0bffd17 	ldw	r2,-12(fp)
   21024:	10bfffc4 	addi	r2,r2,-1
   21028:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2102c:	e0bff817 	ldw	r2,-32(fp)
   21030:	10001426 	beq	r2,zero,21084 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21034:	00000d06 	br	2106c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   21038:	e0bff917 	ldw	r2,-28(fp)
   2103c:	108002a8 	cmpgeui	r2,r2,10
   21040:	1000021e 	bne	r2,zero,2104c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   21044:	0109c404 	movi	r4,10000
   21048:	00226a40 	call	226a4 <alt_busy_sleep>
            if (--timeout == 0)
   2104c:	e0bff917 	ldw	r2,-28(fp)
   21050:	10bfffc4 	addi	r2,r2,-1
   21054:	e0bff915 	stw	r2,-28(fp)
   21058:	e0bff917 	ldw	r2,-28(fp)
   2105c:	1000031e 	bne	r2,zero,2106c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21060:	00bfff84 	movi	r2,-2
   21064:	e0bff815 	stw	r2,-32(fp)
               break;
   21068:	00000306 	br	21078 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2106c:	e13ffb17 	ldw	r4,-20(fp)
   21070:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   21074:	103ff01e 	bne	r2,zero,21038 <__alt_data_end+0xfc021038>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21078:	e13ffb17 	ldw	r4,-20(fp)
   2107c:	002001c0 	call	2001c <alt_avalon_i2c_disable>
   21080:	00000e06 	br	210bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   21084:	e0bfff03 	ldbu	r2,-4(fp)
   21088:	10000c26 	beq	r2,zero,210bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2108c:	01400704 	movi	r5,28
   21090:	e13ffb17 	ldw	r4,-20(fp)
   21094:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   21098:	000b883a 	mov	r5,zero
   2109c:	e13ffb17 	ldw	r4,-20(fp)
   210a0:	00217b80 	call	217b8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   210a4:	e0bffa17 	ldw	r2,-24(fp)
   210a8:	00c00044 	movi	r3,1
   210ac:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   210b0:	01400044 	movi	r5,1
   210b4:	e13ffb17 	ldw	r4,-20(fp)
   210b8:	00216140 	call	21614 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   210bc:	e0bff817 	ldw	r2,-32(fp)
}
   210c0:	e037883a 	mov	sp,fp
   210c4:	dfc00117 	ldw	ra,4(sp)
   210c8:	df000017 	ldw	fp,0(sp)
   210cc:	dec00204 	addi	sp,sp,8
   210d0:	f800283a 	ret

000210d4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   210d4:	defff404 	addi	sp,sp,-48
   210d8:	dfc00b15 	stw	ra,44(sp)
   210dc:	df000a15 	stw	fp,40(sp)
   210e0:	df000a04 	addi	fp,sp,40
   210e4:	e13ffb15 	stw	r4,-20(fp)
   210e8:	e17ffc15 	stw	r5,-16(fp)
   210ec:	e1bffd15 	stw	r6,-12(fp)
   210f0:	3807883a 	mov	r3,r7
   210f4:	e0800217 	ldw	r2,8(fp)
   210f8:	e0fffe05 	stb	r3,-8(fp)
   210fc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21100:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   21104:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   21108:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2110c:	e0bffd17 	ldw	r2,-12(fp)
   21110:	1000021e 	bne	r2,zero,2111c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21114:	0005883a 	mov	r2,zero
   21118:	00006d06 	br	212d0 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2111c:	e0bffe03 	ldbu	r2,-8(fp)
   21120:	10000a1e 	bne	r2,zero,2114c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21124:	e13ffb17 	ldw	r4,-20(fp)
   21128:	001ff840 	call	1ff84 <alt_avalon_i2c_enable>
   2112c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21130:	e0bff917 	ldw	r2,-28(fp)
   21134:	10000226 	beq	r2,zero,21140 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   21138:	e0bff917 	ldw	r2,-28(fp)
   2113c:	00006406 	br	212d0 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21140:	01400704 	movi	r5,28
   21144:	e13ffb17 	ldw	r4,-20(fp)
   21148:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2114c:	e0bffe03 	ldbu	r2,-8(fp)
   21150:	100d883a 	mov	r6,r2
   21154:	01400044 	movi	r5,1
   21158:	e13ffb17 	ldw	r4,-20(fp)
   2115c:	00205ec0 	call	205ec <alt_avalon_i2c_send_address>
   21160:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21164:	e0bff917 	ldw	r2,-28(fp)
   21168:	1000341e 	bne	r2,zero,2123c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2116c:	00001906 	br	211d4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21170:	000f883a 	mov	r7,zero
   21174:	000d883a 	mov	r6,zero
   21178:	000b883a 	mov	r5,zero
   2117c:	e13ffb17 	ldw	r4,-20(fp)
   21180:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   21184:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   21188:	e0bff817 	ldw	r2,-32(fp)
   2118c:	10800044 	addi	r2,r2,1
   21190:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   21194:	e0bff917 	ldw	r2,-28(fp)
   21198:	10000e1e 	bne	r2,zero,211d4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2119c:	e0bffa04 	addi	r2,fp,-24
   211a0:	100f883a 	mov	r7,r2
   211a4:	000d883a 	mov	r6,zero
   211a8:	e17ffc17 	ldw	r5,-16(fp)
   211ac:	e13ffb17 	ldw	r4,-20(fp)
   211b0:	00203b80 	call	203b8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   211b4:	e0bffa17 	ldw	r2,-24(fp)
   211b8:	e0fffc17 	ldw	r3,-16(fp)
   211bc:	1885883a 	add	r2,r3,r2
   211c0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   211c4:	e0bffa17 	ldw	r2,-24(fp)
   211c8:	e0fff717 	ldw	r3,-36(fp)
   211cc:	1885883a 	add	r2,r3,r2
   211d0:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   211d4:	e0bffd17 	ldw	r2,-12(fp)
   211d8:	10bfffc4 	addi	r2,r2,-1
   211dc:	e0fff817 	ldw	r3,-32(fp)
   211e0:	1880022e 	bgeu	r3,r2,211ec <alt_avalon_i2c_master_receive+0x118>
   211e4:	e0bff917 	ldw	r2,-28(fp)
   211e8:	103fe126 	beq	r2,zero,21170 <__alt_data_end+0xfc021170>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   211ec:	e0bff917 	ldw	r2,-28(fp)
   211f0:	1000121e 	bne	r2,zero,2123c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   211f4:	e0bfff03 	ldbu	r2,-4(fp)
   211f8:	100f883a 	mov	r7,r2
   211fc:	000d883a 	mov	r6,zero
   21200:	000b883a 	mov	r5,zero
   21204:	e13ffb17 	ldw	r4,-20(fp)
   21208:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   2120c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21210:	00000a06 	br	2123c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   21214:	e17ffc17 	ldw	r5,-16(fp)
   21218:	e13ffb17 	ldw	r4,-20(fp)
   2121c:	00204600 	call	20460 <alt_avalon_i2c_rx_read>
   21220:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   21224:	e0bffc17 	ldw	r2,-16(fp)
   21228:	10800044 	addi	r2,r2,1
   2122c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   21230:	e0bff717 	ldw	r2,-36(fp)
   21234:	10800044 	addi	r2,r2,1
   21238:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2123c:	e0fff717 	ldw	r3,-36(fp)
   21240:	e0bffd17 	ldw	r2,-12(fp)
   21244:	1880022e 	bgeu	r3,r2,21250 <alt_avalon_i2c_master_receive+0x17c>
   21248:	e0bff917 	ldw	r2,-28(fp)
   2124c:	103ff126 	beq	r2,zero,21214 <__alt_data_end+0xfc021214>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21250:	e0bfff03 	ldbu	r2,-4(fp)
   21254:	1000021e 	bne	r2,zero,21260 <alt_avalon_i2c_master_receive+0x18c>
   21258:	e0bff917 	ldw	r2,-28(fp)
   2125c:	10001b26 	beq	r2,zero,212cc <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   21260:	0149c404 	movi	r5,10000
   21264:	e13ffd17 	ldw	r4,-12(fp)
   21268:	000cec40 	call	cec4 <__mulsi3>
   2126c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21270:	00000d06 	br	212a8 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21274:	e0bff617 	ldw	r2,-40(fp)
   21278:	108002a8 	cmpgeui	r2,r2,10
   2127c:	1000021e 	bne	r2,zero,21288 <alt_avalon_i2c_master_receive+0x1b4>
   21280:	0109c404 	movi	r4,10000
   21284:	00226a40 	call	226a4 <alt_busy_sleep>
            if (--timeout == 0)
   21288:	e0bff617 	ldw	r2,-40(fp)
   2128c:	10bfffc4 	addi	r2,r2,-1
   21290:	e0bff615 	stw	r2,-40(fp)
   21294:	e0bff617 	ldw	r2,-40(fp)
   21298:	1000031e 	bne	r2,zero,212a8 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2129c:	00bfff84 	movi	r2,-2
   212a0:	e0bff915 	stw	r2,-28(fp)
               break;
   212a4:	00000306 	br	212b4 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   212a8:	e13ffb17 	ldw	r4,-20(fp)
   212ac:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   212b0:	103ff01e 	bne	r2,zero,21274 <__alt_data_end+0xfc021274>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   212b4:	e0bff904 	addi	r2,fp,-28
   212b8:	100b883a 	mov	r5,r2
   212bc:	e13ffb17 	ldw	r4,-20(fp)
   212c0:	00207480 	call	20748 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   212c4:	e13ffb17 	ldw	r4,-20(fp)
   212c8:	002001c0 	call	2001c <alt_avalon_i2c_disable>
    }

    return status;
   212cc:	e0bff917 	ldw	r2,-28(fp)
}
   212d0:	e037883a 	mov	sp,fp
   212d4:	dfc00117 	ldw	ra,4(sp)
   212d8:	df000017 	ldw	fp,0(sp)
   212dc:	dec00204 	addi	sp,sp,8
   212e0:	f800283a 	ret

000212e4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   212e4:	defff504 	addi	sp,sp,-44
   212e8:	dfc00a15 	stw	ra,40(sp)
   212ec:	df000915 	stw	fp,36(sp)
   212f0:	df000904 	addi	fp,sp,36
   212f4:	e13ffb15 	stw	r4,-20(fp)
   212f8:	e17ffc15 	stw	r5,-16(fp)
   212fc:	e1bffd15 	stw	r6,-12(fp)
   21300:	3807883a 	mov	r3,r7
   21304:	e0800217 	ldw	r2,8(fp)
   21308:	e0fffe05 	stb	r3,-8(fp)
   2130c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21310:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21314:	e0bffb17 	ldw	r2,-20(fp)
   21318:	10800717 	ldw	r2,28(r2)
   2131c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   21320:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   21324:	e0bffd17 	ldw	r2,-12(fp)
   21328:	1000021e 	bne	r2,zero,21334 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2132c:	0005883a 	mov	r2,zero
   21330:	00006306 	br	214c0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21334:	e0bffb17 	ldw	r2,-20(fp)
   21338:	10c00617 	ldw	r3,24(r2)
   2133c:	008000b4 	movhi	r2,2
   21340:	10bf0204 	addi	r2,r2,-1016
   21344:	18800226 	beq	r3,r2,21350 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21348:	00bfff44 	movi	r2,-3
   2134c:	00005c06 	br	214c0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21350:	e0bffe03 	ldbu	r2,-8(fp)
   21354:	10000a1e 	bne	r2,zero,21380 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21358:	e13ffb17 	ldw	r4,-20(fp)
   2135c:	001ff840 	call	1ff84 <alt_avalon_i2c_enable>
   21360:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21364:	e0bff717 	ldw	r2,-36(fp)
   21368:	10000226 	beq	r2,zero,21374 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2136c:	e0bff717 	ldw	r2,-36(fp)
   21370:	00005306 	br	214c0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21374:	01400704 	movi	r5,28
   21378:	e13ffb17 	ldw	r4,-20(fp)
   2137c:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21380:	e0bffe03 	ldbu	r2,-8(fp)
   21384:	100d883a 	mov	r6,r2
   21388:	01400044 	movi	r5,1
   2138c:	e13ffb17 	ldw	r4,-20(fp)
   21390:	00205ec0 	call	205ec <alt_avalon_i2c_send_address>
   21394:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21398:	e0bff717 	ldw	r2,-36(fp)
   2139c:	1000191e 	bne	r2,zero,21404 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   213a0:	00000906 	br	213c8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   213a4:	000f883a 	mov	r7,zero
   213a8:	000d883a 	mov	r6,zero
   213ac:	000b883a 	mov	r5,zero
   213b0:	e13ffb17 	ldw	r4,-20(fp)
   213b4:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   213b8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   213bc:	e0bff917 	ldw	r2,-28(fp)
   213c0:	10800044 	addi	r2,r2,1
   213c4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   213c8:	e0bffd17 	ldw	r2,-12(fp)
   213cc:	10bfffc4 	addi	r2,r2,-1
   213d0:	e0fff917 	ldw	r3,-28(fp)
   213d4:	1880022e 	bgeu	r3,r2,213e0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   213d8:	e0bff717 	ldw	r2,-36(fp)
   213dc:	103ff126 	beq	r2,zero,213a4 <__alt_data_end+0xfc0213a4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   213e0:	e0bff717 	ldw	r2,-36(fp)
   213e4:	1000071e 	bne	r2,zero,21404 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   213e8:	e0bfff03 	ldbu	r2,-4(fp)
   213ec:	100f883a 	mov	r7,r2
   213f0:	000d883a 	mov	r6,zero
   213f4:	000b883a 	mov	r5,zero
   213f8:	e13ffb17 	ldw	r4,-20(fp)
   213fc:	00205080 	call	20508 <alt_avalon_i2c_cmd_write>
   21400:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   21404:	e0bff717 	ldw	r2,-36(fp)
   21408:	10001826 	beq	r2,zero,2146c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   2140c:	0149c404 	movi	r5,10000
   21410:	e13ffd17 	ldw	r4,-12(fp)
   21414:	000cec40 	call	cec4 <__mulsi3>
   21418:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2141c:	00000d06 	br	21454 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21420:	e0bff817 	ldw	r2,-32(fp)
   21424:	108002a8 	cmpgeui	r2,r2,10
   21428:	1000021e 	bne	r2,zero,21434 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2142c:	0109c404 	movi	r4,10000
   21430:	00226a40 	call	226a4 <alt_busy_sleep>
            if (--timeout == 0)
   21434:	e0bff817 	ldw	r2,-32(fp)
   21438:	10bfffc4 	addi	r2,r2,-1
   2143c:	e0bff815 	stw	r2,-32(fp)
   21440:	e0bff817 	ldw	r2,-32(fp)
   21444:	1000031e 	bne	r2,zero,21454 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21448:	00bfff84 	movi	r2,-2
   2144c:	e0bff715 	stw	r2,-36(fp)
               break;
   21450:	00000306 	br	21460 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21454:	e13ffb17 	ldw	r4,-20(fp)
   21458:	00203740 	call	20374 <alt_avalon_i2c_is_busy>
   2145c:	103ff01e 	bne	r2,zero,21420 <__alt_data_end+0xfc021420>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21460:	e13ffb17 	ldw	r4,-20(fp)
   21464:	002001c0 	call	2001c <alt_avalon_i2c_disable>
   21468:	00001406 	br	214bc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   2146c:	e0bfff03 	ldbu	r2,-4(fp)
   21470:	10001226 	beq	r2,zero,214bc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21474:	01400704 	movi	r5,28
   21478:	e13ffb17 	ldw	r4,-20(fp)
   2147c:	00215700 	call	21570 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   21480:	000b883a 	mov	r5,zero
   21484:	e13ffb17 	ldw	r4,-20(fp)
   21488:	00217080 	call	21708 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2148c:	e0bffa17 	ldw	r2,-24(fp)
   21490:	00c00084 	movi	r3,2
   21494:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   21498:	e0bffa17 	ldw	r2,-24(fp)
   2149c:	e0fffc17 	ldw	r3,-16(fp)
   214a0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   214a4:	e0bffa17 	ldw	r2,-24(fp)
   214a8:	e0fffd17 	ldw	r3,-12(fp)
   214ac:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   214b0:	01400084 	movi	r5,2
   214b4:	e13ffb17 	ldw	r4,-20(fp)
   214b8:	00216140 	call	21614 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   214bc:	e0bff717 	ldw	r2,-36(fp)
}
   214c0:	e037883a 	mov	sp,fp
   214c4:	dfc00117 	ldw	ra,4(sp)
   214c8:	df000017 	ldw	fp,0(sp)
   214cc:	dec00204 	addi	sp,sp,8
   214d0:	f800283a 	ret

000214d4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   214d4:	defffd04 	addi	sp,sp,-12
   214d8:	df000215 	stw	fp,8(sp)
   214dc:	df000204 	addi	fp,sp,8
   214e0:	e13ffe15 	stw	r4,-8(fp)
   214e4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   214e8:	e0bffe17 	ldw	r2,-8(fp)
   214ec:	10800317 	ldw	r2,12(r2)
   214f0:	10800404 	addi	r2,r2,16
   214f4:	10c00037 	ldwio	r3,0(r2)
   214f8:	e0bffe17 	ldw	r2,-8(fp)
   214fc:	10800317 	ldw	r2,12(r2)
   21500:	10800304 	addi	r2,r2,12
   21504:	10800037 	ldwio	r2,0(r2)
   21508:	1884703a 	and	r2,r3,r2
   2150c:	1007883a 	mov	r3,r2
   21510:	e0bfff17 	ldw	r2,-4(fp)
   21514:	10c00015 	stw	r3,0(r2)
}
   21518:	0001883a 	nop
   2151c:	e037883a 	mov	sp,fp
   21520:	df000017 	ldw	fp,0(sp)
   21524:	dec00104 	addi	sp,sp,4
   21528:	f800283a 	ret

0002152c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2152c:	defffd04 	addi	sp,sp,-12
   21530:	df000215 	stw	fp,8(sp)
   21534:	df000204 	addi	fp,sp,8
   21538:	e13ffe15 	stw	r4,-8(fp)
   2153c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21540:	e0bffe17 	ldw	r2,-8(fp)
   21544:	10800317 	ldw	r2,12(r2)
   21548:	10800404 	addi	r2,r2,16
   2154c:	10800037 	ldwio	r2,0(r2)
   21550:	1007883a 	mov	r3,r2
   21554:	e0bfff17 	ldw	r2,-4(fp)
   21558:	10c00015 	stw	r3,0(r2)
}
   2155c:	0001883a 	nop
   21560:	e037883a 	mov	sp,fp
   21564:	df000017 	ldw	fp,0(sp)
   21568:	dec00104 	addi	sp,sp,4
   2156c:	f800283a 	ret

00021570 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21570:	defffd04 	addi	sp,sp,-12
   21574:	df000215 	stw	fp,8(sp)
   21578:	df000204 	addi	fp,sp,8
   2157c:	e13ffe15 	stw	r4,-8(fp)
   21580:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21584:	e0bffe17 	ldw	r2,-8(fp)
   21588:	10800317 	ldw	r2,12(r2)
   2158c:	10800404 	addi	r2,r2,16
   21590:	e0ffff17 	ldw	r3,-4(fp)
   21594:	10c00035 	stwio	r3,0(r2)
}
   21598:	0001883a 	nop
   2159c:	e037883a 	mov	sp,fp
   215a0:	df000017 	ldw	fp,0(sp)
   215a4:	dec00104 	addi	sp,sp,4
   215a8:	f800283a 	ret

000215ac <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   215ac:	defffb04 	addi	sp,sp,-20
   215b0:	dfc00415 	stw	ra,16(sp)
   215b4:	df000315 	stw	fp,12(sp)
   215b8:	df000304 	addi	fp,sp,12
   215bc:	e13ffe15 	stw	r4,-8(fp)
   215c0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   215c4:	e17ffd04 	addi	r5,fp,-12
   215c8:	e13ffe17 	ldw	r4,-8(fp)
   215cc:	00216780 	call	21678 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	0086303a 	nor	r3,zero,r2
   215d8:	e0bffd17 	ldw	r2,-12(fp)
   215dc:	1884703a 	and	r2,r3,r2
   215e0:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   215e4:	e0bffe17 	ldw	r2,-8(fp)
   215e8:	10800317 	ldw	r2,12(r2)
   215ec:	10800304 	addi	r2,r2,12
   215f0:	e0fffd17 	ldw	r3,-12(fp)
   215f4:	18c007cc 	andi	r3,r3,31
   215f8:	10c00035 	stwio	r3,0(r2)
}
   215fc:	0001883a 	nop
   21600:	e037883a 	mov	sp,fp
   21604:	dfc00117 	ldw	ra,4(sp)
   21608:	df000017 	ldw	fp,0(sp)
   2160c:	dec00204 	addi	sp,sp,8
   21610:	f800283a 	ret

00021614 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21614:	defffb04 	addi	sp,sp,-20
   21618:	dfc00415 	stw	ra,16(sp)
   2161c:	df000315 	stw	fp,12(sp)
   21620:	df000304 	addi	fp,sp,12
   21624:	e13ffe15 	stw	r4,-8(fp)
   21628:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2162c:	e17ffd04 	addi	r5,fp,-12
   21630:	e13ffe17 	ldw	r4,-8(fp)
   21634:	00216780 	call	21678 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21638:	e0fffd17 	ldw	r3,-12(fp)
   2163c:	e0bfff17 	ldw	r2,-4(fp)
   21640:	1884b03a 	or	r2,r3,r2
   21644:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21648:	e0bffe17 	ldw	r2,-8(fp)
   2164c:	10800317 	ldw	r2,12(r2)
   21650:	10800304 	addi	r2,r2,12
   21654:	e0fffd17 	ldw	r3,-12(fp)
   21658:	18c007cc 	andi	r3,r3,31
   2165c:	10c00035 	stwio	r3,0(r2)
}
   21660:	0001883a 	nop
   21664:	e037883a 	mov	sp,fp
   21668:	dfc00117 	ldw	ra,4(sp)
   2166c:	df000017 	ldw	fp,0(sp)
   21670:	dec00204 	addi	sp,sp,8
   21674:	f800283a 	ret

00021678 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   21678:	defffd04 	addi	sp,sp,-12
   2167c:	df000215 	stw	fp,8(sp)
   21680:	df000204 	addi	fp,sp,8
   21684:	e13ffe15 	stw	r4,-8(fp)
   21688:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2168c:	e0bffe17 	ldw	r2,-8(fp)
   21690:	10800317 	ldw	r2,12(r2)
   21694:	10800304 	addi	r2,r2,12
   21698:	10800037 	ldwio	r2,0(r2)
   2169c:	10c007cc 	andi	r3,r2,31
   216a0:	e0bfff17 	ldw	r2,-4(fp)
   216a4:	10c00015 	stw	r3,0(r2)
}
   216a8:	0001883a 	nop
   216ac:	e037883a 	mov	sp,fp
   216b0:	df000017 	ldw	fp,0(sp)
   216b4:	dec00104 	addi	sp,sp,4
   216b8:	f800283a 	ret

000216bc <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   216bc:	defffd04 	addi	sp,sp,-12
   216c0:	df000215 	stw	fp,8(sp)
   216c4:	df000204 	addi	fp,sp,8
   216c8:	e13ffe15 	stw	r4,-8(fp)
   216cc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   216d0:	e0bffe17 	ldw	r2,-8(fp)
   216d4:	10800317 	ldw	r2,12(r2)
   216d8:	10800204 	addi	r2,r2,8
   216dc:	10800037 	ldwio	r2,0(r2)
   216e0:	10800c0c 	andi	r2,r2,48
   216e4:	1005d13a 	srai	r2,r2,4
   216e8:	1007883a 	mov	r3,r2
   216ec:	e0bfff17 	ldw	r2,-4(fp)
   216f0:	10c00015 	stw	r3,0(r2)
}
   216f4:	0001883a 	nop
   216f8:	e037883a 	mov	sp,fp
   216fc:	df000017 	ldw	fp,0(sp)
   21700:	dec00104 	addi	sp,sp,4
   21704:	f800283a 	ret

00021708 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   21708:	defffd04 	addi	sp,sp,-12
   2170c:	df000215 	stw	fp,8(sp)
   21710:	df000204 	addi	fp,sp,8
   21714:	e13ffe15 	stw	r4,-8(fp)
   21718:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2171c:	e0bffe17 	ldw	r2,-8(fp)
   21720:	10800317 	ldw	r2,12(r2)
   21724:	10800204 	addi	r2,r2,8
   21728:	e0fffe17 	ldw	r3,-8(fp)
   2172c:	18c00317 	ldw	r3,12(r3)
   21730:	18c00204 	addi	r3,r3,8
   21734:	18c00037 	ldwio	r3,0(r3)
   21738:	1809883a 	mov	r4,r3
   2173c:	00fff3c4 	movi	r3,-49
   21740:	20c8703a 	and	r4,r4,r3
   21744:	e0ffff17 	ldw	r3,-4(fp)
   21748:	1806913a 	slli	r3,r3,4
   2174c:	18c00c0c 	andi	r3,r3,48
   21750:	20c6b03a 	or	r3,r4,r3
   21754:	10c00035 	stwio	r3,0(r2)
}
   21758:	0001883a 	nop
   2175c:	e037883a 	mov	sp,fp
   21760:	df000017 	ldw	fp,0(sp)
   21764:	dec00104 	addi	sp,sp,4
   21768:	f800283a 	ret

0002176c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2176c:	defffd04 	addi	sp,sp,-12
   21770:	df000215 	stw	fp,8(sp)
   21774:	df000204 	addi	fp,sp,8
   21778:	e13ffe15 	stw	r4,-8(fp)
   2177c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   21780:	e0bffe17 	ldw	r2,-8(fp)
   21784:	10800317 	ldw	r2,12(r2)
   21788:	10800204 	addi	r2,r2,8
   2178c:	10800037 	ldwio	r2,0(r2)
   21790:	1080030c 	andi	r2,r2,12
   21794:	1005d0ba 	srai	r2,r2,2
   21798:	1007883a 	mov	r3,r2
   2179c:	e0bfff17 	ldw	r2,-4(fp)
   217a0:	10c00015 	stw	r3,0(r2)
}
   217a4:	0001883a 	nop
   217a8:	e037883a 	mov	sp,fp
   217ac:	df000017 	ldw	fp,0(sp)
   217b0:	dec00104 	addi	sp,sp,4
   217b4:	f800283a 	ret

000217b8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   217b8:	defffd04 	addi	sp,sp,-12
   217bc:	df000215 	stw	fp,8(sp)
   217c0:	df000204 	addi	fp,sp,8
   217c4:	e13ffe15 	stw	r4,-8(fp)
   217c8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   217cc:	e0bffe17 	ldw	r2,-8(fp)
   217d0:	10800317 	ldw	r2,12(r2)
   217d4:	10c00204 	addi	r3,r2,8
   217d8:	e0bffe17 	ldw	r2,-8(fp)
   217dc:	10800317 	ldw	r2,12(r2)
   217e0:	10800204 	addi	r2,r2,8
   217e4:	10800037 	ldwio	r2,0(r2)
   217e8:	1009883a 	mov	r4,r2
   217ec:	00bffcc4 	movi	r2,-13
   217f0:	2088703a 	and	r4,r4,r2
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	1085883a 	add	r2,r2,r2
   217fc:	1085883a 	add	r2,r2,r2
   21800:	1080030c 	andi	r2,r2,12
   21804:	2084b03a 	or	r2,r4,r2
   21808:	18800035 	stwio	r2,0(r3)
}
   2180c:	0001883a 	nop
   21810:	e037883a 	mov	sp,fp
   21814:	df000017 	ldw	fp,0(sp)
   21818:	dec00104 	addi	sp,sp,4
   2181c:	f800283a 	ret

00021820 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21820:	defffa04 	addi	sp,sp,-24
   21824:	dfc00515 	stw	ra,20(sp)
   21828:	df000415 	stw	fp,16(sp)
   2182c:	df000404 	addi	fp,sp,16
   21830:	e13ffd15 	stw	r4,-12(fp)
   21834:	e17ffe15 	stw	r5,-8(fp)
   21838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2183c:	e0bffd17 	ldw	r2,-12(fp)
   21840:	10800017 	ldw	r2,0(r2)
   21844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21848:	e0bffc17 	ldw	r2,-16(fp)
   2184c:	10c00a04 	addi	r3,r2,40
   21850:	e0bffd17 	ldw	r2,-12(fp)
   21854:	10800217 	ldw	r2,8(r2)
   21858:	100f883a 	mov	r7,r2
   2185c:	e1bfff17 	ldw	r6,-4(fp)
   21860:	e17ffe17 	ldw	r5,-8(fp)
   21864:	1809883a 	mov	r4,r3
   21868:	0021e480 	call	21e48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2186c:	e037883a 	mov	sp,fp
   21870:	dfc00117 	ldw	ra,4(sp)
   21874:	df000017 	ldw	fp,0(sp)
   21878:	dec00204 	addi	sp,sp,8
   2187c:	f800283a 	ret

00021880 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21880:	defffa04 	addi	sp,sp,-24
   21884:	dfc00515 	stw	ra,20(sp)
   21888:	df000415 	stw	fp,16(sp)
   2188c:	df000404 	addi	fp,sp,16
   21890:	e13ffd15 	stw	r4,-12(fp)
   21894:	e17ffe15 	stw	r5,-8(fp)
   21898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2189c:	e0bffd17 	ldw	r2,-12(fp)
   218a0:	10800017 	ldw	r2,0(r2)
   218a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   218a8:	e0bffc17 	ldw	r2,-16(fp)
   218ac:	10c00a04 	addi	r3,r2,40
   218b0:	e0bffd17 	ldw	r2,-12(fp)
   218b4:	10800217 	ldw	r2,8(r2)
   218b8:	100f883a 	mov	r7,r2
   218bc:	e1bfff17 	ldw	r6,-4(fp)
   218c0:	e17ffe17 	ldw	r5,-8(fp)
   218c4:	1809883a 	mov	r4,r3
   218c8:	00220640 	call	22064 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   218cc:	e037883a 	mov	sp,fp
   218d0:	dfc00117 	ldw	ra,4(sp)
   218d4:	df000017 	ldw	fp,0(sp)
   218d8:	dec00204 	addi	sp,sp,8
   218dc:	f800283a 	ret

000218e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   218e0:	defffc04 	addi	sp,sp,-16
   218e4:	dfc00315 	stw	ra,12(sp)
   218e8:	df000215 	stw	fp,8(sp)
   218ec:	df000204 	addi	fp,sp,8
   218f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   218f4:	e0bfff17 	ldw	r2,-4(fp)
   218f8:	10800017 	ldw	r2,0(r2)
   218fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21900:	e0bffe17 	ldw	r2,-8(fp)
   21904:	10c00a04 	addi	r3,r2,40
   21908:	e0bfff17 	ldw	r2,-4(fp)
   2190c:	10800217 	ldw	r2,8(r2)
   21910:	100b883a 	mov	r5,r2
   21914:	1809883a 	mov	r4,r3
   21918:	0021cf00 	call	21cf0 <altera_avalon_jtag_uart_close>
}
   2191c:	e037883a 	mov	sp,fp
   21920:	dfc00117 	ldw	ra,4(sp)
   21924:	df000017 	ldw	fp,0(sp)
   21928:	dec00204 	addi	sp,sp,8
   2192c:	f800283a 	ret

00021930 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21930:	defffa04 	addi	sp,sp,-24
   21934:	dfc00515 	stw	ra,20(sp)
   21938:	df000415 	stw	fp,16(sp)
   2193c:	df000404 	addi	fp,sp,16
   21940:	e13ffd15 	stw	r4,-12(fp)
   21944:	e17ffe15 	stw	r5,-8(fp)
   21948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2194c:	e0bffd17 	ldw	r2,-12(fp)
   21950:	10800017 	ldw	r2,0(r2)
   21954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21958:	e0bffc17 	ldw	r2,-16(fp)
   2195c:	10800a04 	addi	r2,r2,40
   21960:	e1bfff17 	ldw	r6,-4(fp)
   21964:	e17ffe17 	ldw	r5,-8(fp)
   21968:	1009883a 	mov	r4,r2
   2196c:	0021d580 	call	21d58 <altera_avalon_jtag_uart_ioctl>
}
   21970:	e037883a 	mov	sp,fp
   21974:	dfc00117 	ldw	ra,4(sp)
   21978:	df000017 	ldw	fp,0(sp)
   2197c:	dec00204 	addi	sp,sp,8
   21980:	f800283a 	ret

00021984 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21984:	defffa04 	addi	sp,sp,-24
   21988:	dfc00515 	stw	ra,20(sp)
   2198c:	df000415 	stw	fp,16(sp)
   21990:	df000404 	addi	fp,sp,16
   21994:	e13ffd15 	stw	r4,-12(fp)
   21998:	e17ffe15 	stw	r5,-8(fp)
   2199c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   219a0:	e0bffd17 	ldw	r2,-12(fp)
   219a4:	00c00044 	movi	r3,1
   219a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   219ac:	e0bffd17 	ldw	r2,-12(fp)
   219b0:	10800017 	ldw	r2,0(r2)
   219b4:	10800104 	addi	r2,r2,4
   219b8:	1007883a 	mov	r3,r2
   219bc:	e0bffd17 	ldw	r2,-12(fp)
   219c0:	10800817 	ldw	r2,32(r2)
   219c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   219c8:	e0bffe17 	ldw	r2,-8(fp)
   219cc:	e0ffff17 	ldw	r3,-4(fp)
   219d0:	d8000015 	stw	zero,0(sp)
   219d4:	e1fffd17 	ldw	r7,-12(fp)
   219d8:	018000b4 	movhi	r6,2
   219dc:	31869104 	addi	r6,r6,6724
   219e0:	180b883a 	mov	r5,r3
   219e4:	1009883a 	mov	r4,r2
   219e8:	0022a6c0 	call	22a6c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   219ec:	e0bffd17 	ldw	r2,-12(fp)
   219f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   219f4:	e0bffd17 	ldw	r2,-12(fp)
   219f8:	10800204 	addi	r2,r2,8
   219fc:	d0f24b17 	ldw	r3,-14036(gp)
   21a00:	e1fffd17 	ldw	r7,-12(fp)
   21a04:	018000b4 	movhi	r6,2
   21a08:	31871404 	addi	r6,r6,7248
   21a0c:	180b883a 	mov	r5,r3
   21a10:	1009883a 	mov	r4,r2
   21a14:	00225780 	call	22578 <alt_alarm_start>
   21a18:	1000040e 	bge	r2,zero,21a2c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21a1c:	e0fffd17 	ldw	r3,-12(fp)
   21a20:	00a00034 	movhi	r2,32768
   21a24:	10bfffc4 	addi	r2,r2,-1
   21a28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21a2c:	0001883a 	nop
   21a30:	e037883a 	mov	sp,fp
   21a34:	dfc00117 	ldw	ra,4(sp)
   21a38:	df000017 	ldw	fp,0(sp)
   21a3c:	dec00204 	addi	sp,sp,8
   21a40:	f800283a 	ret

00021a44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21a44:	defff804 	addi	sp,sp,-32
   21a48:	df000715 	stw	fp,28(sp)
   21a4c:	df000704 	addi	fp,sp,28
   21a50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21a54:	e0bfff17 	ldw	r2,-4(fp)
   21a58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21a5c:	e0bffb17 	ldw	r2,-20(fp)
   21a60:	10800017 	ldw	r2,0(r2)
   21a64:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21a68:	e0bffc17 	ldw	r2,-16(fp)
   21a6c:	10800104 	addi	r2,r2,4
   21a70:	10800037 	ldwio	r2,0(r2)
   21a74:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21a78:	e0bffd17 	ldw	r2,-12(fp)
   21a7c:	1080c00c 	andi	r2,r2,768
   21a80:	10006d26 	beq	r2,zero,21c38 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21a84:	e0bffd17 	ldw	r2,-12(fp)
   21a88:	1080400c 	andi	r2,r2,256
   21a8c:	10003526 	beq	r2,zero,21b64 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21a90:	00800074 	movhi	r2,1
   21a94:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21a98:	e0bffb17 	ldw	r2,-20(fp)
   21a9c:	10800a17 	ldw	r2,40(r2)
   21aa0:	10800044 	addi	r2,r2,1
   21aa4:	1081ffcc 	andi	r2,r2,2047
   21aa8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21aac:	e0bffb17 	ldw	r2,-20(fp)
   21ab0:	10c00b17 	ldw	r3,44(r2)
   21ab4:	e0bffe17 	ldw	r2,-8(fp)
   21ab8:	18801526 	beq	r3,r2,21b10 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21abc:	e0bffc17 	ldw	r2,-16(fp)
   21ac0:	10800037 	ldwio	r2,0(r2)
   21ac4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21ac8:	e0bff917 	ldw	r2,-28(fp)
   21acc:	10a0000c 	andi	r2,r2,32768
   21ad0:	10001126 	beq	r2,zero,21b18 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21ad4:	e0bffb17 	ldw	r2,-20(fp)
   21ad8:	10800a17 	ldw	r2,40(r2)
   21adc:	e0fff917 	ldw	r3,-28(fp)
   21ae0:	1809883a 	mov	r4,r3
   21ae4:	e0fffb17 	ldw	r3,-20(fp)
   21ae8:	1885883a 	add	r2,r3,r2
   21aec:	10800e04 	addi	r2,r2,56
   21af0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21af4:	e0bffb17 	ldw	r2,-20(fp)
   21af8:	10800a17 	ldw	r2,40(r2)
   21afc:	10800044 	addi	r2,r2,1
   21b00:	10c1ffcc 	andi	r3,r2,2047
   21b04:	e0bffb17 	ldw	r2,-20(fp)
   21b08:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   21b0c:	003fe206 	br	21a98 <__alt_data_end+0xfc021a98>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   21b10:	0001883a 	nop
   21b14:	00000106 	br	21b1c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21b18:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21b1c:	e0bff917 	ldw	r2,-28(fp)
   21b20:	10bfffec 	andhi	r2,r2,65535
   21b24:	10000f26 	beq	r2,zero,21b64 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21b28:	e0bffb17 	ldw	r2,-20(fp)
   21b2c:	10c00817 	ldw	r3,32(r2)
   21b30:	00bfff84 	movi	r2,-2
   21b34:	1886703a 	and	r3,r3,r2
   21b38:	e0bffb17 	ldw	r2,-20(fp)
   21b3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21b40:	e0bffc17 	ldw	r2,-16(fp)
   21b44:	10800104 	addi	r2,r2,4
   21b48:	1007883a 	mov	r3,r2
   21b4c:	e0bffb17 	ldw	r2,-20(fp)
   21b50:	10800817 	ldw	r2,32(r2)
   21b54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21b58:	e0bffc17 	ldw	r2,-16(fp)
   21b5c:	10800104 	addi	r2,r2,4
   21b60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21b64:	e0bffd17 	ldw	r2,-12(fp)
   21b68:	1080800c 	andi	r2,r2,512
   21b6c:	103fbe26 	beq	r2,zero,21a68 <__alt_data_end+0xfc021a68>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21b70:	e0bffd17 	ldw	r2,-12(fp)
   21b74:	1004d43a 	srli	r2,r2,16
   21b78:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21b7c:	00001406 	br	21bd0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21b80:	e0bffc17 	ldw	r2,-16(fp)
   21b84:	e0fffb17 	ldw	r3,-20(fp)
   21b88:	18c00d17 	ldw	r3,52(r3)
   21b8c:	e13ffb17 	ldw	r4,-20(fp)
   21b90:	20c7883a 	add	r3,r4,r3
   21b94:	18c20e04 	addi	r3,r3,2104
   21b98:	18c00003 	ldbu	r3,0(r3)
   21b9c:	18c03fcc 	andi	r3,r3,255
   21ba0:	18c0201c 	xori	r3,r3,128
   21ba4:	18ffe004 	addi	r3,r3,-128
   21ba8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21bac:	e0bffb17 	ldw	r2,-20(fp)
   21bb0:	10800d17 	ldw	r2,52(r2)
   21bb4:	10800044 	addi	r2,r2,1
   21bb8:	10c1ffcc 	andi	r3,r2,2047
   21bbc:	e0bffb17 	ldw	r2,-20(fp)
   21bc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21bc4:	e0bffa17 	ldw	r2,-24(fp)
   21bc8:	10bfffc4 	addi	r2,r2,-1
   21bcc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21bd0:	e0bffa17 	ldw	r2,-24(fp)
   21bd4:	10000526 	beq	r2,zero,21bec <altera_avalon_jtag_uart_irq+0x1a8>
   21bd8:	e0bffb17 	ldw	r2,-20(fp)
   21bdc:	10c00d17 	ldw	r3,52(r2)
   21be0:	e0bffb17 	ldw	r2,-20(fp)
   21be4:	10800c17 	ldw	r2,48(r2)
   21be8:	18bfe51e 	bne	r3,r2,21b80 <__alt_data_end+0xfc021b80>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21bec:	e0bffa17 	ldw	r2,-24(fp)
   21bf0:	103f9d26 	beq	r2,zero,21a68 <__alt_data_end+0xfc021a68>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21bf4:	e0bffb17 	ldw	r2,-20(fp)
   21bf8:	10c00817 	ldw	r3,32(r2)
   21bfc:	00bfff44 	movi	r2,-3
   21c00:	1886703a 	and	r3,r3,r2
   21c04:	e0bffb17 	ldw	r2,-20(fp)
   21c08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21c0c:	e0bffb17 	ldw	r2,-20(fp)
   21c10:	10800017 	ldw	r2,0(r2)
   21c14:	10800104 	addi	r2,r2,4
   21c18:	1007883a 	mov	r3,r2
   21c1c:	e0bffb17 	ldw	r2,-20(fp)
   21c20:	10800817 	ldw	r2,32(r2)
   21c24:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21c28:	e0bffc17 	ldw	r2,-16(fp)
   21c2c:	10800104 	addi	r2,r2,4
   21c30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21c34:	003f8c06 	br	21a68 <__alt_data_end+0xfc021a68>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21c38:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21c3c:	0001883a 	nop
   21c40:	e037883a 	mov	sp,fp
   21c44:	df000017 	ldw	fp,0(sp)
   21c48:	dec00104 	addi	sp,sp,4
   21c4c:	f800283a 	ret

00021c50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21c50:	defff804 	addi	sp,sp,-32
   21c54:	df000715 	stw	fp,28(sp)
   21c58:	df000704 	addi	fp,sp,28
   21c5c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21c60:	e0bffb17 	ldw	r2,-20(fp)
   21c64:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21c68:	e0bff917 	ldw	r2,-28(fp)
   21c6c:	10800017 	ldw	r2,0(r2)
   21c70:	10800104 	addi	r2,r2,4
   21c74:	10800037 	ldwio	r2,0(r2)
   21c78:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21c7c:	e0bffa17 	ldw	r2,-24(fp)
   21c80:	1081000c 	andi	r2,r2,1024
   21c84:	10000b26 	beq	r2,zero,21cb4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21c88:	e0bff917 	ldw	r2,-28(fp)
   21c8c:	10800017 	ldw	r2,0(r2)
   21c90:	10800104 	addi	r2,r2,4
   21c94:	1007883a 	mov	r3,r2
   21c98:	e0bff917 	ldw	r2,-28(fp)
   21c9c:	10800817 	ldw	r2,32(r2)
   21ca0:	10810014 	ori	r2,r2,1024
   21ca4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21ca8:	e0bff917 	ldw	r2,-28(fp)
   21cac:	10000915 	stw	zero,36(r2)
   21cb0:	00000a06 	br	21cdc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21cb4:	e0bff917 	ldw	r2,-28(fp)
   21cb8:	10c00917 	ldw	r3,36(r2)
   21cbc:	00a00034 	movhi	r2,32768
   21cc0:	10bfff04 	addi	r2,r2,-4
   21cc4:	10c00536 	bltu	r2,r3,21cdc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21cc8:	e0bff917 	ldw	r2,-28(fp)
   21ccc:	10800917 	ldw	r2,36(r2)
   21cd0:	10c00044 	addi	r3,r2,1
   21cd4:	e0bff917 	ldw	r2,-28(fp)
   21cd8:	10c00915 	stw	r3,36(r2)
   21cdc:	d0b24b17 	ldw	r2,-14036(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21ce0:	e037883a 	mov	sp,fp
   21ce4:	df000017 	ldw	fp,0(sp)
   21ce8:	dec00104 	addi	sp,sp,4
   21cec:	f800283a 	ret

00021cf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21cf0:	defffd04 	addi	sp,sp,-12
   21cf4:	df000215 	stw	fp,8(sp)
   21cf8:	df000204 	addi	fp,sp,8
   21cfc:	e13ffe15 	stw	r4,-8(fp)
   21d00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21d04:	00000506 	br	21d1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21d08:	e0bfff17 	ldw	r2,-4(fp)
   21d0c:	1090000c 	andi	r2,r2,16384
   21d10:	10000226 	beq	r2,zero,21d1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21d14:	00bffd44 	movi	r2,-11
   21d18:	00000b06 	br	21d48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21d1c:	e0bffe17 	ldw	r2,-8(fp)
   21d20:	10c00d17 	ldw	r3,52(r2)
   21d24:	e0bffe17 	ldw	r2,-8(fp)
   21d28:	10800c17 	ldw	r2,48(r2)
   21d2c:	18800526 	beq	r3,r2,21d44 <altera_avalon_jtag_uart_close+0x54>
   21d30:	e0bffe17 	ldw	r2,-8(fp)
   21d34:	10c00917 	ldw	r3,36(r2)
   21d38:	e0bffe17 	ldw	r2,-8(fp)
   21d3c:	10800117 	ldw	r2,4(r2)
   21d40:	18bff136 	bltu	r3,r2,21d08 <__alt_data_end+0xfc021d08>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21d44:	0005883a 	mov	r2,zero
}
   21d48:	e037883a 	mov	sp,fp
   21d4c:	df000017 	ldw	fp,0(sp)
   21d50:	dec00104 	addi	sp,sp,4
   21d54:	f800283a 	ret

00021d58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21d58:	defffa04 	addi	sp,sp,-24
   21d5c:	df000515 	stw	fp,20(sp)
   21d60:	df000504 	addi	fp,sp,20
   21d64:	e13ffd15 	stw	r4,-12(fp)
   21d68:	e17ffe15 	stw	r5,-8(fp)
   21d6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21d70:	00bff9c4 	movi	r2,-25
   21d74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21d78:	e0bffe17 	ldw	r2,-8(fp)
   21d7c:	10da8060 	cmpeqi	r3,r2,27137
   21d80:	1800031e 	bne	r3,zero,21d90 <altera_avalon_jtag_uart_ioctl+0x38>
   21d84:	109a80a0 	cmpeqi	r2,r2,27138
   21d88:	1000181e 	bne	r2,zero,21dec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21d8c:	00002906 	br	21e34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21d90:	e0bffd17 	ldw	r2,-12(fp)
   21d94:	10c00117 	ldw	r3,4(r2)
   21d98:	00a00034 	movhi	r2,32768
   21d9c:	10bfffc4 	addi	r2,r2,-1
   21da0:	18802126 	beq	r3,r2,21e28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21da4:	e0bfff17 	ldw	r2,-4(fp)
   21da8:	10800017 	ldw	r2,0(r2)
   21dac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21db0:	e0bffc17 	ldw	r2,-16(fp)
   21db4:	10800090 	cmplti	r2,r2,2
   21db8:	1000061e 	bne	r2,zero,21dd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   21dbc:	e0fffc17 	ldw	r3,-16(fp)
   21dc0:	00a00034 	movhi	r2,32768
   21dc4:	10bfffc4 	addi	r2,r2,-1
   21dc8:	18800226 	beq	r3,r2,21dd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   21dcc:	e0bffc17 	ldw	r2,-16(fp)
   21dd0:	00000206 	br	21ddc <altera_avalon_jtag_uart_ioctl+0x84>
   21dd4:	00a00034 	movhi	r2,32768
   21dd8:	10bfff84 	addi	r2,r2,-2
   21ddc:	e0fffd17 	ldw	r3,-12(fp)
   21de0:	18800115 	stw	r2,4(r3)
      rc = 0;
   21de4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21de8:	00000f06 	br	21e28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   21dec:	e0bffd17 	ldw	r2,-12(fp)
   21df0:	10c00117 	ldw	r3,4(r2)
   21df4:	00a00034 	movhi	r2,32768
   21df8:	10bfffc4 	addi	r2,r2,-1
   21dfc:	18800c26 	beq	r3,r2,21e30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21e00:	e0bffd17 	ldw	r2,-12(fp)
   21e04:	10c00917 	ldw	r3,36(r2)
   21e08:	e0bffd17 	ldw	r2,-12(fp)
   21e0c:	10800117 	ldw	r2,4(r2)
   21e10:	1885803a 	cmpltu	r2,r3,r2
   21e14:	10c03fcc 	andi	r3,r2,255
   21e18:	e0bfff17 	ldw	r2,-4(fp)
   21e1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   21e20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21e24:	00000206 	br	21e30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21e28:	0001883a 	nop
   21e2c:	00000106 	br	21e34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   21e30:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21e34:	e0bffb17 	ldw	r2,-20(fp)
}
   21e38:	e037883a 	mov	sp,fp
   21e3c:	df000017 	ldw	fp,0(sp)
   21e40:	dec00104 	addi	sp,sp,4
   21e44:	f800283a 	ret

00021e48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21e48:	defff304 	addi	sp,sp,-52
   21e4c:	dfc00c15 	stw	ra,48(sp)
   21e50:	df000b15 	stw	fp,44(sp)
   21e54:	df000b04 	addi	fp,sp,44
   21e58:	e13ffc15 	stw	r4,-16(fp)
   21e5c:	e17ffd15 	stw	r5,-12(fp)
   21e60:	e1bffe15 	stw	r6,-8(fp)
   21e64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21e68:	e0bffd17 	ldw	r2,-12(fp)
   21e6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21e70:	00004706 	br	21f90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21e74:	e0bffc17 	ldw	r2,-16(fp)
   21e78:	10800a17 	ldw	r2,40(r2)
   21e7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21e80:	e0bffc17 	ldw	r2,-16(fp)
   21e84:	10800b17 	ldw	r2,44(r2)
   21e88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21e8c:	e0fff717 	ldw	r3,-36(fp)
   21e90:	e0bff817 	ldw	r2,-32(fp)
   21e94:	18800536 	bltu	r3,r2,21eac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21e98:	e0fff717 	ldw	r3,-36(fp)
   21e9c:	e0bff817 	ldw	r2,-32(fp)
   21ea0:	1885c83a 	sub	r2,r3,r2
   21ea4:	e0bff615 	stw	r2,-40(fp)
   21ea8:	00000406 	br	21ebc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   21eac:	00c20004 	movi	r3,2048
   21eb0:	e0bff817 	ldw	r2,-32(fp)
   21eb4:	1885c83a 	sub	r2,r3,r2
   21eb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21ebc:	e0bff617 	ldw	r2,-40(fp)
   21ec0:	10001e26 	beq	r2,zero,21f3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21ec4:	e0fffe17 	ldw	r3,-8(fp)
   21ec8:	e0bff617 	ldw	r2,-40(fp)
   21ecc:	1880022e 	bgeu	r3,r2,21ed8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21ed0:	e0bffe17 	ldw	r2,-8(fp)
   21ed4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21ed8:	e0bffc17 	ldw	r2,-16(fp)
   21edc:	10c00e04 	addi	r3,r2,56
   21ee0:	e0bff817 	ldw	r2,-32(fp)
   21ee4:	1885883a 	add	r2,r3,r2
   21ee8:	e1bff617 	ldw	r6,-40(fp)
   21eec:	100b883a 	mov	r5,r2
   21ef0:	e13ff517 	ldw	r4,-44(fp)
   21ef4:	000ec780 	call	ec78 <memcpy>
      ptr   += n;
   21ef8:	e0fff517 	ldw	r3,-44(fp)
   21efc:	e0bff617 	ldw	r2,-40(fp)
   21f00:	1885883a 	add	r2,r3,r2
   21f04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21f08:	e0fffe17 	ldw	r3,-8(fp)
   21f0c:	e0bff617 	ldw	r2,-40(fp)
   21f10:	1885c83a 	sub	r2,r3,r2
   21f14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21f18:	e0fff817 	ldw	r3,-32(fp)
   21f1c:	e0bff617 	ldw	r2,-40(fp)
   21f20:	1885883a 	add	r2,r3,r2
   21f24:	10c1ffcc 	andi	r3,r2,2047
   21f28:	e0bffc17 	ldw	r2,-16(fp)
   21f2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21f30:	e0bffe17 	ldw	r2,-8(fp)
   21f34:	00bfcf16 	blt	zero,r2,21e74 <__alt_data_end+0xfc021e74>
   21f38:	00000106 	br	21f40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21f3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21f40:	e0fff517 	ldw	r3,-44(fp)
   21f44:	e0bffd17 	ldw	r2,-12(fp)
   21f48:	1880141e 	bne	r3,r2,21f9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21f4c:	e0bfff17 	ldw	r2,-4(fp)
   21f50:	1090000c 	andi	r2,r2,16384
   21f54:	1000131e 	bne	r2,zero,21fa4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21f58:	0001883a 	nop
   21f5c:	e0bffc17 	ldw	r2,-16(fp)
   21f60:	10c00a17 	ldw	r3,40(r2)
   21f64:	e0bff717 	ldw	r2,-36(fp)
   21f68:	1880051e 	bne	r3,r2,21f80 <altera_avalon_jtag_uart_read+0x138>
   21f6c:	e0bffc17 	ldw	r2,-16(fp)
   21f70:	10c00917 	ldw	r3,36(r2)
   21f74:	e0bffc17 	ldw	r2,-16(fp)
   21f78:	10800117 	ldw	r2,4(r2)
   21f7c:	18bff736 	bltu	r3,r2,21f5c <__alt_data_end+0xfc021f5c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21f80:	e0bffc17 	ldw	r2,-16(fp)
   21f84:	10c00a17 	ldw	r3,40(r2)
   21f88:	e0bff717 	ldw	r2,-36(fp)
   21f8c:	18800726 	beq	r3,r2,21fac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21f90:	e0bffe17 	ldw	r2,-8(fp)
   21f94:	00bfb716 	blt	zero,r2,21e74 <__alt_data_end+0xfc021e74>
   21f98:	00000506 	br	21fb0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21f9c:	0001883a 	nop
   21fa0:	00000306 	br	21fb0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21fa4:	0001883a 	nop
   21fa8:	00000106 	br	21fb0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21fac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21fb0:	e0fff517 	ldw	r3,-44(fp)
   21fb4:	e0bffd17 	ldw	r2,-12(fp)
   21fb8:	18801826 	beq	r3,r2,2201c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21fbc:	0005303a 	rdctl	r2,status
   21fc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21fc4:	e0fffb17 	ldw	r3,-20(fp)
   21fc8:	00bfff84 	movi	r2,-2
   21fcc:	1884703a 	and	r2,r3,r2
   21fd0:	1001703a 	wrctl	status,r2
  
  return context;
   21fd4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21fd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21fdc:	e0bffc17 	ldw	r2,-16(fp)
   21fe0:	10800817 	ldw	r2,32(r2)
   21fe4:	10c00054 	ori	r3,r2,1
   21fe8:	e0bffc17 	ldw	r2,-16(fp)
   21fec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21ff0:	e0bffc17 	ldw	r2,-16(fp)
   21ff4:	10800017 	ldw	r2,0(r2)
   21ff8:	10800104 	addi	r2,r2,4
   21ffc:	1007883a 	mov	r3,r2
   22000:	e0bffc17 	ldw	r2,-16(fp)
   22004:	10800817 	ldw	r2,32(r2)
   22008:	18800035 	stwio	r2,0(r3)
   2200c:	e0bffa17 	ldw	r2,-24(fp)
   22010:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22014:	e0bff917 	ldw	r2,-28(fp)
   22018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2201c:	e0fff517 	ldw	r3,-44(fp)
   22020:	e0bffd17 	ldw	r2,-12(fp)
   22024:	18800426 	beq	r3,r2,22038 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   22028:	e0fff517 	ldw	r3,-44(fp)
   2202c:	e0bffd17 	ldw	r2,-12(fp)
   22030:	1885c83a 	sub	r2,r3,r2
   22034:	00000606 	br	22050 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   22038:	e0bfff17 	ldw	r2,-4(fp)
   2203c:	1090000c 	andi	r2,r2,16384
   22040:	10000226 	beq	r2,zero,2204c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   22044:	00bffd44 	movi	r2,-11
   22048:	00000106 	br	22050 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2204c:	00bffec4 	movi	r2,-5
}
   22050:	e037883a 	mov	sp,fp
   22054:	dfc00117 	ldw	ra,4(sp)
   22058:	df000017 	ldw	fp,0(sp)
   2205c:	dec00204 	addi	sp,sp,8
   22060:	f800283a 	ret

00022064 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22064:	defff304 	addi	sp,sp,-52
   22068:	dfc00c15 	stw	ra,48(sp)
   2206c:	df000b15 	stw	fp,44(sp)
   22070:	df000b04 	addi	fp,sp,44
   22074:	e13ffc15 	stw	r4,-16(fp)
   22078:	e17ffd15 	stw	r5,-12(fp)
   2207c:	e1bffe15 	stw	r6,-8(fp)
   22080:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   22084:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   22088:	e0bffd17 	ldw	r2,-12(fp)
   2208c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22090:	00003706 	br	22170 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   22094:	e0bffc17 	ldw	r2,-16(fp)
   22098:	10800c17 	ldw	r2,48(r2)
   2209c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   220a0:	e0bffc17 	ldw	r2,-16(fp)
   220a4:	10800d17 	ldw	r2,52(r2)
   220a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   220ac:	e0fff917 	ldw	r3,-28(fp)
   220b0:	e0bff517 	ldw	r2,-44(fp)
   220b4:	1880062e 	bgeu	r3,r2,220d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   220b8:	e0fff517 	ldw	r3,-44(fp)
   220bc:	e0bff917 	ldw	r2,-28(fp)
   220c0:	1885c83a 	sub	r2,r3,r2
   220c4:	10bfffc4 	addi	r2,r2,-1
   220c8:	e0bff615 	stw	r2,-40(fp)
   220cc:	00000b06 	br	220fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   220d0:	e0bff517 	ldw	r2,-44(fp)
   220d4:	10000526 	beq	r2,zero,220ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   220d8:	00c20004 	movi	r3,2048
   220dc:	e0bff917 	ldw	r2,-28(fp)
   220e0:	1885c83a 	sub	r2,r3,r2
   220e4:	e0bff615 	stw	r2,-40(fp)
   220e8:	00000406 	br	220fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   220ec:	00c1ffc4 	movi	r3,2047
   220f0:	e0bff917 	ldw	r2,-28(fp)
   220f4:	1885c83a 	sub	r2,r3,r2
   220f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   220fc:	e0bff617 	ldw	r2,-40(fp)
   22100:	10001e26 	beq	r2,zero,2217c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   22104:	e0fffe17 	ldw	r3,-8(fp)
   22108:	e0bff617 	ldw	r2,-40(fp)
   2210c:	1880022e 	bgeu	r3,r2,22118 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   22110:	e0bffe17 	ldw	r2,-8(fp)
   22114:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   22118:	e0bffc17 	ldw	r2,-16(fp)
   2211c:	10c20e04 	addi	r3,r2,2104
   22120:	e0bff917 	ldw	r2,-28(fp)
   22124:	1885883a 	add	r2,r3,r2
   22128:	e1bff617 	ldw	r6,-40(fp)
   2212c:	e17ffd17 	ldw	r5,-12(fp)
   22130:	1009883a 	mov	r4,r2
   22134:	000ec780 	call	ec78 <memcpy>
      ptr   += n;
   22138:	e0fffd17 	ldw	r3,-12(fp)
   2213c:	e0bff617 	ldw	r2,-40(fp)
   22140:	1885883a 	add	r2,r3,r2
   22144:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   22148:	e0fffe17 	ldw	r3,-8(fp)
   2214c:	e0bff617 	ldw	r2,-40(fp)
   22150:	1885c83a 	sub	r2,r3,r2
   22154:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22158:	e0fff917 	ldw	r3,-28(fp)
   2215c:	e0bff617 	ldw	r2,-40(fp)
   22160:	1885883a 	add	r2,r3,r2
   22164:	10c1ffcc 	andi	r3,r2,2047
   22168:	e0bffc17 	ldw	r2,-16(fp)
   2216c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22170:	e0bffe17 	ldw	r2,-8(fp)
   22174:	00bfc716 	blt	zero,r2,22094 <__alt_data_end+0xfc022094>
   22178:	00000106 	br	22180 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2217c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22180:	0005303a 	rdctl	r2,status
   22184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22188:	e0fffb17 	ldw	r3,-20(fp)
   2218c:	00bfff84 	movi	r2,-2
   22190:	1884703a 	and	r2,r3,r2
   22194:	1001703a 	wrctl	status,r2
  
  return context;
   22198:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2219c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   221a0:	e0bffc17 	ldw	r2,-16(fp)
   221a4:	10800817 	ldw	r2,32(r2)
   221a8:	10c00094 	ori	r3,r2,2
   221ac:	e0bffc17 	ldw	r2,-16(fp)
   221b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   221b4:	e0bffc17 	ldw	r2,-16(fp)
   221b8:	10800017 	ldw	r2,0(r2)
   221bc:	10800104 	addi	r2,r2,4
   221c0:	1007883a 	mov	r3,r2
   221c4:	e0bffc17 	ldw	r2,-16(fp)
   221c8:	10800817 	ldw	r2,32(r2)
   221cc:	18800035 	stwio	r2,0(r3)
   221d0:	e0bffa17 	ldw	r2,-24(fp)
   221d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   221d8:	e0bff817 	ldw	r2,-32(fp)
   221dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   221e0:	e0bffe17 	ldw	r2,-8(fp)
   221e4:	0080100e 	bge	zero,r2,22228 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   221e8:	e0bfff17 	ldw	r2,-4(fp)
   221ec:	1090000c 	andi	r2,r2,16384
   221f0:	1000101e 	bne	r2,zero,22234 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   221f4:	0001883a 	nop
   221f8:	e0bffc17 	ldw	r2,-16(fp)
   221fc:	10c00d17 	ldw	r3,52(r2)
   22200:	e0bff517 	ldw	r2,-44(fp)
   22204:	1880051e 	bne	r3,r2,2221c <altera_avalon_jtag_uart_write+0x1b8>
   22208:	e0bffc17 	ldw	r2,-16(fp)
   2220c:	10c00917 	ldw	r3,36(r2)
   22210:	e0bffc17 	ldw	r2,-16(fp)
   22214:	10800117 	ldw	r2,4(r2)
   22218:	18bff736 	bltu	r3,r2,221f8 <__alt_data_end+0xfc0221f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2221c:	e0bffc17 	ldw	r2,-16(fp)
   22220:	10800917 	ldw	r2,36(r2)
   22224:	1000051e 	bne	r2,zero,2223c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   22228:	e0bffe17 	ldw	r2,-8(fp)
   2222c:	00bfd016 	blt	zero,r2,22170 <__alt_data_end+0xfc022170>
   22230:	00000306 	br	22240 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   22234:	0001883a 	nop
   22238:	00000106 	br	22240 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2223c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22240:	e0fffd17 	ldw	r3,-12(fp)
   22244:	e0bff717 	ldw	r2,-36(fp)
   22248:	18800426 	beq	r3,r2,2225c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2224c:	e0fffd17 	ldw	r3,-12(fp)
   22250:	e0bff717 	ldw	r2,-36(fp)
   22254:	1885c83a 	sub	r2,r3,r2
   22258:	00000606 	br	22274 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2225c:	e0bfff17 	ldw	r2,-4(fp)
   22260:	1090000c 	andi	r2,r2,16384
   22264:	10000226 	beq	r2,zero,22270 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   22268:	00bffd44 	movi	r2,-11
   2226c:	00000106 	br	22274 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   22270:	00bffec4 	movi	r2,-5
}
   22274:	e037883a 	mov	sp,fp
   22278:	dfc00117 	ldw	ra,4(sp)
   2227c:	df000017 	ldw	fp,0(sp)
   22280:	dec00204 	addi	sp,sp,8
   22284:	f800283a 	ret

00022288 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22288:	defff404 	addi	sp,sp,-48
   2228c:	df000b15 	stw	fp,44(sp)
   22290:	df000b04 	addi	fp,sp,44
   22294:	e13ffc15 	stw	r4,-16(fp)
   22298:	e17ffd15 	stw	r5,-12(fp)
   2229c:	e1bffe15 	stw	r6,-8(fp)
   222a0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   222a4:	e0ffff17 	ldw	r3,-4(fp)
   222a8:	e0bffe17 	ldw	r2,-8(fp)
   222ac:	1885883a 	add	r2,r3,r2
   222b0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   222b4:	e0c00217 	ldw	r3,8(fp)
   222b8:	e0800117 	ldw	r2,4(fp)
   222bc:	1885883a 	add	r2,r3,r2
   222c0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   222c4:	e0800117 	ldw	r2,4(fp)
   222c8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   222cc:	e0bffe17 	ldw	r2,-8(fp)
   222d0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   222d4:	00800044 	movi	r2,1
   222d8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   222dc:	e0bffc17 	ldw	r2,-16(fp)
   222e0:	10800504 	addi	r2,r2,20
   222e4:	1009883a 	mov	r4,r2
   222e8:	00c00044 	movi	r3,1
   222ec:	e0bffd17 	ldw	r2,-12(fp)
   222f0:	1884983a 	sll	r2,r3,r2
   222f4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   222f8:	e0800317 	ldw	r2,12(fp)
   222fc:	1080008c 	andi	r2,r2,2
   22300:	1000051e 	bne	r2,zero,22318 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   22304:	e0bffc17 	ldw	r2,-16(fp)
   22308:	10800304 	addi	r2,r2,12
   2230c:	1007883a 	mov	r3,r2
   22310:	00810004 	movi	r2,1024
   22314:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22318:	e0bffc17 	ldw	r2,-16(fp)
   2231c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22320:	e0bffc17 	ldw	r2,-16(fp)
   22324:	10800204 	addi	r2,r2,8
   22328:	10800037 	ldwio	r2,0(r2)
   2232c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22330:	e0bffa17 	ldw	r2,-24(fp)
   22334:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22338:	10000226 	beq	r2,zero,22344 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2233c:	e0bff717 	ldw	r2,-36(fp)
   22340:	1000031e 	bne	r2,zero,22350 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22344:	e0bffa17 	ldw	r2,-24(fp)
   22348:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2234c:	103ff426 	beq	r2,zero,22320 <__alt_data_end+0xfc022320>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22350:	e0bffa17 	ldw	r2,-24(fp)
   22354:	1080100c 	andi	r2,r2,64
   22358:	10001e26 	beq	r2,zero,223d4 <alt_avalon_spi_command+0x14c>
   2235c:	e0bff717 	ldw	r2,-36(fp)
   22360:	00801c0e 	bge	zero,r2,223d4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   22364:	e0bff717 	ldw	r2,-36(fp)
   22368:	10bfffc4 	addi	r2,r2,-1
   2236c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   22370:	e0ffff17 	ldw	r3,-4(fp)
   22374:	e0bff817 	ldw	r2,-32(fp)
   22378:	18800a2e 	bgeu	r3,r2,223a4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   2237c:	e0bffc17 	ldw	r2,-16(fp)
   22380:	10800104 	addi	r2,r2,4
   22384:	1009883a 	mov	r4,r2
   22388:	e0bfff17 	ldw	r2,-4(fp)
   2238c:	10c00044 	addi	r3,r2,1
   22390:	e0ffff15 	stw	r3,-4(fp)
   22394:	10800003 	ldbu	r2,0(r2)
   22398:	10803fcc 	andi	r2,r2,255
   2239c:	20800035 	stwio	r2,0(r4)
   223a0:	00000c06 	br	223d4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   223a4:	e0bff517 	ldw	r2,-44(fp)
   223a8:	10000826 	beq	r2,zero,223cc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   223ac:	e0bff517 	ldw	r2,-44(fp)
   223b0:	10bfffc4 	addi	r2,r2,-1
   223b4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   223b8:	e0bffc17 	ldw	r2,-16(fp)
   223bc:	10800104 	addi	r2,r2,4
   223c0:	0007883a 	mov	r3,zero
   223c4:	10c00035 	stwio	r3,0(r2)
   223c8:	00000206 	br	223d4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   223cc:	00bf0004 	movi	r2,-1024
   223d0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   223d4:	e0bffa17 	ldw	r2,-24(fp)
   223d8:	1080200c 	andi	r2,r2,128
   223dc:	103fd026 	beq	r2,zero,22320 <__alt_data_end+0xfc022320>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   223e0:	e0bffc17 	ldw	r2,-16(fp)
   223e4:	10800037 	ldwio	r2,0(r2)
   223e8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   223ec:	e0bff617 	ldw	r2,-40(fp)
   223f0:	10000426 	beq	r2,zero,22404 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   223f4:	e0bff617 	ldw	r2,-40(fp)
   223f8:	10bfffc4 	addi	r2,r2,-1
   223fc:	e0bff615 	stw	r2,-40(fp)
   22400:	00000506 	br	22418 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   22404:	e0800217 	ldw	r2,8(fp)
   22408:	10c00044 	addi	r3,r2,1
   2240c:	e0c00215 	stw	r3,8(fp)
   22410:	e0fffb17 	ldw	r3,-20(fp)
   22414:	10c00005 	stb	r3,0(r2)
      credits++;
   22418:	e0bff717 	ldw	r2,-36(fp)
   2241c:	10800044 	addi	r2,r2,1
   22420:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   22424:	e0bff617 	ldw	r2,-40(fp)
   22428:	103fbd1e 	bne	r2,zero,22320 <__alt_data_end+0xfc022320>
   2242c:	e0c00217 	ldw	r3,8(fp)
   22430:	e0bff917 	ldw	r2,-28(fp)
   22434:	18bfba1e 	bne	r3,r2,22320 <__alt_data_end+0xfc022320>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22438:	e0bffc17 	ldw	r2,-16(fp)
   2243c:	10800204 	addi	r2,r2,8
   22440:	10800037 	ldwio	r2,0(r2)
   22444:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   22448:	e0bffa17 	ldw	r2,-24(fp)
   2244c:	1080080c 	andi	r2,r2,32
   22450:	103ff926 	beq	r2,zero,22438 <__alt_data_end+0xfc022438>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   22454:	e0800317 	ldw	r2,12(fp)
   22458:	1080004c 	andi	r2,r2,1
   2245c:	1000041e 	bne	r2,zero,22470 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   22460:	e0bffc17 	ldw	r2,-16(fp)
   22464:	10800304 	addi	r2,r2,12
   22468:	0007883a 	mov	r3,zero
   2246c:	10c00035 	stwio	r3,0(r2)

  return read_length;
   22470:	e0800117 	ldw	r2,4(fp)
}
   22474:	e037883a 	mov	sp,fp
   22478:	df000017 	ldw	fp,0(sp)
   2247c:	dec00104 	addi	sp,sp,4
   22480:	f800283a 	ret

00022484 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22484:	defffa04 	addi	sp,sp,-24
   22488:	dfc00515 	stw	ra,20(sp)
   2248c:	df000415 	stw	fp,16(sp)
   22490:	df000404 	addi	fp,sp,16
   22494:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22498:	0007883a 	mov	r3,zero
   2249c:	e0bfff17 	ldw	r2,-4(fp)
   224a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   224a4:	e0bfff17 	ldw	r2,-4(fp)
   224a8:	10800104 	addi	r2,r2,4
   224ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224b0:	0005303a 	rdctl	r2,status
   224b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224b8:	e0fffd17 	ldw	r3,-12(fp)
   224bc:	00bfff84 	movi	r2,-2
   224c0:	1884703a 	and	r2,r3,r2
   224c4:	1001703a 	wrctl	status,r2
  
  return context;
   224c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   224cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   224d0:	00233f40 	call	233f4 <alt_tick>
   224d4:	e0bffc17 	ldw	r2,-16(fp)
   224d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   224dc:	e0bffe17 	ldw	r2,-8(fp)
   224e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   224e4:	0001883a 	nop
   224e8:	e037883a 	mov	sp,fp
   224ec:	dfc00117 	ldw	ra,4(sp)
   224f0:	df000017 	ldw	fp,0(sp)
   224f4:	dec00204 	addi	sp,sp,8
   224f8:	f800283a 	ret

000224fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   224fc:	defff804 	addi	sp,sp,-32
   22500:	dfc00715 	stw	ra,28(sp)
   22504:	df000615 	stw	fp,24(sp)
   22508:	df000604 	addi	fp,sp,24
   2250c:	e13ffc15 	stw	r4,-16(fp)
   22510:	e17ffd15 	stw	r5,-12(fp)
   22514:	e1bffe15 	stw	r6,-8(fp)
   22518:	e1ffff15 	stw	r7,-4(fp)
   2251c:	e0bfff17 	ldw	r2,-4(fp)
   22520:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22524:	d0b24b17 	ldw	r2,-14036(gp)
   22528:	1000021e 	bne	r2,zero,22534 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2252c:	e0bffb17 	ldw	r2,-20(fp)
   22530:	d0b24b15 	stw	r2,-14036(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22534:	e0bffc17 	ldw	r2,-16(fp)
   22538:	10800104 	addi	r2,r2,4
   2253c:	00c001c4 	movi	r3,7
   22540:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22544:	d8000015 	stw	zero,0(sp)
   22548:	e1fffc17 	ldw	r7,-16(fp)
   2254c:	018000b4 	movhi	r6,2
   22550:	31892104 	addi	r6,r6,9348
   22554:	e17ffe17 	ldw	r5,-8(fp)
   22558:	e13ffd17 	ldw	r4,-12(fp)
   2255c:	0022a6c0 	call	22a6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22560:	0001883a 	nop
   22564:	e037883a 	mov	sp,fp
   22568:	dfc00117 	ldw	ra,4(sp)
   2256c:	df000017 	ldw	fp,0(sp)
   22570:	dec00204 	addi	sp,sp,8
   22574:	f800283a 	ret

00022578 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22578:	defff504 	addi	sp,sp,-44
   2257c:	df000a15 	stw	fp,40(sp)
   22580:	df000a04 	addi	fp,sp,40
   22584:	e13ffc15 	stw	r4,-16(fp)
   22588:	e17ffd15 	stw	r5,-12(fp)
   2258c:	e1bffe15 	stw	r6,-8(fp)
   22590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22594:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22598:	d0b24b17 	ldw	r2,-14036(gp)
  
  if (alt_ticks_per_second ())
   2259c:	10003c26 	beq	r2,zero,22690 <alt_alarm_start+0x118>
  {
    if (alarm)
   225a0:	e0bffc17 	ldw	r2,-16(fp)
   225a4:	10003826 	beq	r2,zero,22688 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   225a8:	e0bffc17 	ldw	r2,-16(fp)
   225ac:	e0fffe17 	ldw	r3,-8(fp)
   225b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   225b4:	e0bffc17 	ldw	r2,-16(fp)
   225b8:	e0ffff17 	ldw	r3,-4(fp)
   225bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   225c0:	0005303a 	rdctl	r2,status
   225c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   225c8:	e0fff917 	ldw	r3,-28(fp)
   225cc:	00bfff84 	movi	r2,-2
   225d0:	1884703a 	and	r2,r3,r2
   225d4:	1001703a 	wrctl	status,r2
  
  return context;
   225d8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   225dc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   225e0:	d0b24c17 	ldw	r2,-14032(gp)
      
      current_nticks = alt_nticks();
   225e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   225e8:	e0fffd17 	ldw	r3,-12(fp)
   225ec:	e0bff617 	ldw	r2,-40(fp)
   225f0:	1885883a 	add	r2,r3,r2
   225f4:	10c00044 	addi	r3,r2,1
   225f8:	e0bffc17 	ldw	r2,-16(fp)
   225fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   22600:	e0bffc17 	ldw	r2,-16(fp)
   22604:	10c00217 	ldw	r3,8(r2)
   22608:	e0bff617 	ldw	r2,-40(fp)
   2260c:	1880042e 	bgeu	r3,r2,22620 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   22610:	e0bffc17 	ldw	r2,-16(fp)
   22614:	00c00044 	movi	r3,1
   22618:	10c00405 	stb	r3,16(r2)
   2261c:	00000206 	br	22628 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22620:	e0bffc17 	ldw	r2,-16(fp)
   22624:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   22628:	e0bffc17 	ldw	r2,-16(fp)
   2262c:	d0e5be04 	addi	r3,gp,-26888
   22630:	e0fffa15 	stw	r3,-24(fp)
   22634:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22638:	e0bffb17 	ldw	r2,-20(fp)
   2263c:	e0fffa17 	ldw	r3,-24(fp)
   22640:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22644:	e0bffa17 	ldw	r2,-24(fp)
   22648:	10c00017 	ldw	r3,0(r2)
   2264c:	e0bffb17 	ldw	r2,-20(fp)
   22650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22654:	e0bffa17 	ldw	r2,-24(fp)
   22658:	10800017 	ldw	r2,0(r2)
   2265c:	e0fffb17 	ldw	r3,-20(fp)
   22660:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22664:	e0bffa17 	ldw	r2,-24(fp)
   22668:	e0fffb17 	ldw	r3,-20(fp)
   2266c:	10c00015 	stw	r3,0(r2)
   22670:	e0bff817 	ldw	r2,-32(fp)
   22674:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22678:	e0bff717 	ldw	r2,-36(fp)
   2267c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22680:	0005883a 	mov	r2,zero
   22684:	00000306 	br	22694 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22688:	00bffa84 	movi	r2,-22
   2268c:	00000106 	br	22694 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   22690:	00bfde84 	movi	r2,-134
  }
}
   22694:	e037883a 	mov	sp,fp
   22698:	df000017 	ldw	fp,0(sp)
   2269c:	dec00104 	addi	sp,sp,4
   226a0:	f800283a 	ret

000226a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   226a4:	defffa04 	addi	sp,sp,-24
   226a8:	dfc00515 	stw	ra,20(sp)
   226ac:	df000415 	stw	fp,16(sp)
   226b0:	df000404 	addi	fp,sp,16
   226b4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   226b8:	00800244 	movi	r2,9
   226bc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   226c0:	014003f4 	movhi	r5,15
   226c4:	29509004 	addi	r5,r5,16960
   226c8:	e13ffd17 	ldw	r4,-12(fp)
   226cc:	000cec40 	call	cec4 <__mulsi3>
   226d0:	100b883a 	mov	r5,r2
   226d4:	01017db4 	movhi	r4,1526
   226d8:	21384004 	addi	r4,r4,-7936
   226dc:	000ce080 	call	ce08 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   226e0:	100b883a 	mov	r5,r2
   226e4:	01200034 	movhi	r4,32768
   226e8:	213fffc4 	addi	r4,r4,-1
   226ec:	000ce080 	call	ce08 <__udivsi3>
   226f0:	100b883a 	mov	r5,r2
   226f4:	e13fff17 	ldw	r4,-4(fp)
   226f8:	000ce080 	call	ce08 <__udivsi3>
   226fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   22700:	e0bffe17 	ldw	r2,-8(fp)
   22704:	10002a26 	beq	r2,zero,227b0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   22708:	e03ffc15 	stw	zero,-16(fp)
   2270c:	00001706 	br	2276c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   22710:	00a00034 	movhi	r2,32768
   22714:	10bfffc4 	addi	r2,r2,-1
   22718:	10bfffc4 	addi	r2,r2,-1
   2271c:	103ffe1e 	bne	r2,zero,22718 <__alt_data_end+0xfc022718>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22720:	014003f4 	movhi	r5,15
   22724:	29509004 	addi	r5,r5,16960
   22728:	e13ffd17 	ldw	r4,-12(fp)
   2272c:	000cec40 	call	cec4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22730:	100b883a 	mov	r5,r2
   22734:	01017db4 	movhi	r4,1526
   22738:	21384004 	addi	r4,r4,-7936
   2273c:	000ce080 	call	ce08 <__udivsi3>
   22740:	100b883a 	mov	r5,r2
   22744:	01200034 	movhi	r4,32768
   22748:	213fffc4 	addi	r4,r4,-1
   2274c:	000ce080 	call	ce08 <__udivsi3>
   22750:	1007883a 	mov	r3,r2
   22754:	e0bfff17 	ldw	r2,-4(fp)
   22758:	10c5c83a 	sub	r2,r2,r3
   2275c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22760:	e0bffc17 	ldw	r2,-16(fp)
   22764:	10800044 	addi	r2,r2,1
   22768:	e0bffc15 	stw	r2,-16(fp)
   2276c:	e0fffc17 	ldw	r3,-16(fp)
   22770:	e0bffe17 	ldw	r2,-8(fp)
   22774:	18bfe616 	blt	r3,r2,22710 <__alt_data_end+0xfc022710>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22778:	014003f4 	movhi	r5,15
   2277c:	29509004 	addi	r5,r5,16960
   22780:	e13ffd17 	ldw	r4,-12(fp)
   22784:	000cec40 	call	cec4 <__mulsi3>
   22788:	100b883a 	mov	r5,r2
   2278c:	01017db4 	movhi	r4,1526
   22790:	21384004 	addi	r4,r4,-7936
   22794:	000ce080 	call	ce08 <__udivsi3>
   22798:	e17fff17 	ldw	r5,-4(fp)
   2279c:	1009883a 	mov	r4,r2
   227a0:	000cec40 	call	cec4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   227a4:	10bfffc4 	addi	r2,r2,-1
   227a8:	103ffe1e 	bne	r2,zero,227a4 <__alt_data_end+0xfc0227a4>
   227ac:	00000d06 	br	227e4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   227b0:	014003f4 	movhi	r5,15
   227b4:	29509004 	addi	r5,r5,16960
   227b8:	e13ffd17 	ldw	r4,-12(fp)
   227bc:	000cec40 	call	cec4 <__mulsi3>
   227c0:	100b883a 	mov	r5,r2
   227c4:	01017db4 	movhi	r4,1526
   227c8:	21384004 	addi	r4,r4,-7936
   227cc:	000ce080 	call	ce08 <__udivsi3>
   227d0:	e17fff17 	ldw	r5,-4(fp)
   227d4:	1009883a 	mov	r4,r2
   227d8:	000cec40 	call	cec4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   227dc:	10bfffc4 	addi	r2,r2,-1
   227e0:	00bffe16 	blt	zero,r2,227dc <__alt_data_end+0xfc0227dc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   227e4:	0005883a 	mov	r2,zero
}
   227e8:	e037883a 	mov	sp,fp
   227ec:	dfc00117 	ldw	ra,4(sp)
   227f0:	df000017 	ldw	fp,0(sp)
   227f4:	dec00204 	addi	sp,sp,8
   227f8:	f800283a 	ret

000227fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   227fc:	deffff04 	addi	sp,sp,-4
   22800:	df000015 	stw	fp,0(sp)
   22804:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22808:	0001883a 	nop
   2280c:	e037883a 	mov	sp,fp
   22810:	df000017 	ldw	fp,0(sp)
   22814:	dec00104 	addi	sp,sp,4
   22818:	f800283a 	ret

0002281c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2281c:	defffe04 	addi	sp,sp,-8
   22820:	dfc00115 	stw	ra,4(sp)
   22824:	df000015 	stw	fp,0(sp)
   22828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2282c:	d0a5b917 	ldw	r2,-26908(gp)
   22830:	10000326 	beq	r2,zero,22840 <alt_get_errno+0x24>
   22834:	d0a5b917 	ldw	r2,-26908(gp)
   22838:	103ee83a 	callr	r2
   2283c:	00000106 	br	22844 <alt_get_errno+0x28>
   22840:	d0b24304 	addi	r2,gp,-14068
}
   22844:	e037883a 	mov	sp,fp
   22848:	dfc00117 	ldw	ra,4(sp)
   2284c:	df000017 	ldw	fp,0(sp)
   22850:	dec00204 	addi	sp,sp,8
   22854:	f800283a 	ret

00022858 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22858:	defffa04 	addi	sp,sp,-24
   2285c:	dfc00515 	stw	ra,20(sp)
   22860:	df000415 	stw	fp,16(sp)
   22864:	df000404 	addi	fp,sp,16
   22868:	e13ffe15 	stw	r4,-8(fp)
   2286c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22870:	e0bffe17 	ldw	r2,-8(fp)
   22874:	10000326 	beq	r2,zero,22884 <alt_dev_llist_insert+0x2c>
   22878:	e0bffe17 	ldw	r2,-8(fp)
   2287c:	10800217 	ldw	r2,8(r2)
   22880:	1000061e 	bne	r2,zero,2289c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22884:	002281c0 	call	2281c <alt_get_errno>
   22888:	1007883a 	mov	r3,r2
   2288c:	00800584 	movi	r2,22
   22890:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22894:	00bffa84 	movi	r2,-22
   22898:	00001306 	br	228e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2289c:	e0bffe17 	ldw	r2,-8(fp)
   228a0:	e0ffff17 	ldw	r3,-4(fp)
   228a4:	e0fffc15 	stw	r3,-16(fp)
   228a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   228ac:	e0bffd17 	ldw	r2,-12(fp)
   228b0:	e0fffc17 	ldw	r3,-16(fp)
   228b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   228b8:	e0bffc17 	ldw	r2,-16(fp)
   228bc:	10c00017 	ldw	r3,0(r2)
   228c0:	e0bffd17 	ldw	r2,-12(fp)
   228c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   228c8:	e0bffc17 	ldw	r2,-16(fp)
   228cc:	10800017 	ldw	r2,0(r2)
   228d0:	e0fffd17 	ldw	r3,-12(fp)
   228d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   228d8:	e0bffc17 	ldw	r2,-16(fp)
   228dc:	e0fffd17 	ldw	r3,-12(fp)
   228e0:	10c00015 	stw	r3,0(r2)

  return 0;  
   228e4:	0005883a 	mov	r2,zero
}
   228e8:	e037883a 	mov	sp,fp
   228ec:	dfc00117 	ldw	ra,4(sp)
   228f0:	df000017 	ldw	fp,0(sp)
   228f4:	dec00204 	addi	sp,sp,8
   228f8:	f800283a 	ret

000228fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   228fc:	defffd04 	addi	sp,sp,-12
   22900:	dfc00215 	stw	ra,8(sp)
   22904:	df000115 	stw	fp,4(sp)
   22908:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2290c:	008000b4 	movhi	r2,2
   22910:	108ec904 	addi	r2,r2,15140
   22914:	e0bfff15 	stw	r2,-4(fp)
   22918:	00000606 	br	22934 <_do_ctors+0x38>
        (*ctor) (); 
   2291c:	e0bfff17 	ldw	r2,-4(fp)
   22920:	10800017 	ldw	r2,0(r2)
   22924:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22928:	e0bfff17 	ldw	r2,-4(fp)
   2292c:	10bfff04 	addi	r2,r2,-4
   22930:	e0bfff15 	stw	r2,-4(fp)
   22934:	e0ffff17 	ldw	r3,-4(fp)
   22938:	008000b4 	movhi	r2,2
   2293c:	108ec804 	addi	r2,r2,15136
   22940:	18bff62e 	bgeu	r3,r2,2291c <__alt_data_end+0xfc02291c>
        (*ctor) (); 
}
   22944:	0001883a 	nop
   22948:	e037883a 	mov	sp,fp
   2294c:	dfc00117 	ldw	ra,4(sp)
   22950:	df000017 	ldw	fp,0(sp)
   22954:	dec00204 	addi	sp,sp,8
   22958:	f800283a 	ret

0002295c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2295c:	defffd04 	addi	sp,sp,-12
   22960:	dfc00215 	stw	ra,8(sp)
   22964:	df000115 	stw	fp,4(sp)
   22968:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2296c:	008000b4 	movhi	r2,2
   22970:	108ec904 	addi	r2,r2,15140
   22974:	e0bfff15 	stw	r2,-4(fp)
   22978:	00000606 	br	22994 <_do_dtors+0x38>
        (*dtor) (); 
   2297c:	e0bfff17 	ldw	r2,-4(fp)
   22980:	10800017 	ldw	r2,0(r2)
   22984:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22988:	e0bfff17 	ldw	r2,-4(fp)
   2298c:	10bfff04 	addi	r2,r2,-4
   22990:	e0bfff15 	stw	r2,-4(fp)
   22994:	e0ffff17 	ldw	r3,-4(fp)
   22998:	008000b4 	movhi	r2,2
   2299c:	108eca04 	addi	r2,r2,15144
   229a0:	18bff62e 	bgeu	r3,r2,2297c <__alt_data_end+0xfc02297c>
        (*dtor) (); 
}
   229a4:	0001883a 	nop
   229a8:	e037883a 	mov	sp,fp
   229ac:	dfc00117 	ldw	ra,4(sp)
   229b0:	df000017 	ldw	fp,0(sp)
   229b4:	dec00204 	addi	sp,sp,8
   229b8:	f800283a 	ret

000229bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   229bc:	defffa04 	addi	sp,sp,-24
   229c0:	dfc00515 	stw	ra,20(sp)
   229c4:	df000415 	stw	fp,16(sp)
   229c8:	df000404 	addi	fp,sp,16
   229cc:	e13ffe15 	stw	r4,-8(fp)
   229d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   229d4:	e0bfff17 	ldw	r2,-4(fp)
   229d8:	10800017 	ldw	r2,0(r2)
   229dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   229e0:	e13ffe17 	ldw	r4,-8(fp)
   229e4:	000f5400 	call	f540 <strlen>
   229e8:	10800044 	addi	r2,r2,1
   229ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   229f0:	00000d06 	br	22a28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   229f4:	e0bffc17 	ldw	r2,-16(fp)
   229f8:	10800217 	ldw	r2,8(r2)
   229fc:	e0fffd17 	ldw	r3,-12(fp)
   22a00:	180d883a 	mov	r6,r3
   22a04:	e17ffe17 	ldw	r5,-8(fp)
   22a08:	1009883a 	mov	r4,r2
   22a0c:	00237d40 	call	237d4 <memcmp>
   22a10:	1000021e 	bne	r2,zero,22a1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22a14:	e0bffc17 	ldw	r2,-16(fp)
   22a18:	00000706 	br	22a38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22a1c:	e0bffc17 	ldw	r2,-16(fp)
   22a20:	10800017 	ldw	r2,0(r2)
   22a24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22a28:	e0fffc17 	ldw	r3,-16(fp)
   22a2c:	e0bfff17 	ldw	r2,-4(fp)
   22a30:	18bff01e 	bne	r3,r2,229f4 <__alt_data_end+0xfc0229f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22a34:	0005883a 	mov	r2,zero
}
   22a38:	e037883a 	mov	sp,fp
   22a3c:	dfc00117 	ldw	ra,4(sp)
   22a40:	df000017 	ldw	fp,0(sp)
   22a44:	dec00204 	addi	sp,sp,8
   22a48:	f800283a 	ret

00022a4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22a4c:	deffff04 	addi	sp,sp,-4
   22a50:	df000015 	stw	fp,0(sp)
   22a54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22a58:	0001883a 	nop
   22a5c:	e037883a 	mov	sp,fp
   22a60:	df000017 	ldw	fp,0(sp)
   22a64:	dec00104 	addi	sp,sp,4
   22a68:	f800283a 	ret

00022a6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22a6c:	defff904 	addi	sp,sp,-28
   22a70:	dfc00615 	stw	ra,24(sp)
   22a74:	df000515 	stw	fp,20(sp)
   22a78:	df000504 	addi	fp,sp,20
   22a7c:	e13ffc15 	stw	r4,-16(fp)
   22a80:	e17ffd15 	stw	r5,-12(fp)
   22a84:	e1bffe15 	stw	r6,-8(fp)
   22a88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22a8c:	e0800217 	ldw	r2,8(fp)
   22a90:	d8800015 	stw	r2,0(sp)
   22a94:	e1ffff17 	ldw	r7,-4(fp)
   22a98:	e1bffe17 	ldw	r6,-8(fp)
   22a9c:	e17ffd17 	ldw	r5,-12(fp)
   22aa0:	e13ffc17 	ldw	r4,-16(fp)
   22aa4:	0022c1c0 	call	22c1c <alt_iic_isr_register>
}  
   22aa8:	e037883a 	mov	sp,fp
   22aac:	dfc00117 	ldw	ra,4(sp)
   22ab0:	df000017 	ldw	fp,0(sp)
   22ab4:	dec00204 	addi	sp,sp,8
   22ab8:	f800283a 	ret

00022abc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22abc:	defff904 	addi	sp,sp,-28
   22ac0:	df000615 	stw	fp,24(sp)
   22ac4:	df000604 	addi	fp,sp,24
   22ac8:	e13ffe15 	stw	r4,-8(fp)
   22acc:	e17fff15 	stw	r5,-4(fp)
   22ad0:	e0bfff17 	ldw	r2,-4(fp)
   22ad4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22ad8:	0005303a 	rdctl	r2,status
   22adc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22ae0:	e0fffb17 	ldw	r3,-20(fp)
   22ae4:	00bfff84 	movi	r2,-2
   22ae8:	1884703a 	and	r2,r3,r2
   22aec:	1001703a 	wrctl	status,r2
  
  return context;
   22af0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22af4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22af8:	00c00044 	movi	r3,1
   22afc:	e0bffa17 	ldw	r2,-24(fp)
   22b00:	1884983a 	sll	r2,r3,r2
   22b04:	1007883a 	mov	r3,r2
   22b08:	d0b24a17 	ldw	r2,-14040(gp)
   22b0c:	1884b03a 	or	r2,r3,r2
   22b10:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22b14:	d0b24a17 	ldw	r2,-14040(gp)
   22b18:	100170fa 	wrctl	ienable,r2
   22b1c:	e0bffc17 	ldw	r2,-16(fp)
   22b20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22b24:	e0bffd17 	ldw	r2,-12(fp)
   22b28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22b2c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22b30:	0001883a 	nop
}
   22b34:	e037883a 	mov	sp,fp
   22b38:	df000017 	ldw	fp,0(sp)
   22b3c:	dec00104 	addi	sp,sp,4
   22b40:	f800283a 	ret

00022b44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22b44:	defff904 	addi	sp,sp,-28
   22b48:	df000615 	stw	fp,24(sp)
   22b4c:	df000604 	addi	fp,sp,24
   22b50:	e13ffe15 	stw	r4,-8(fp)
   22b54:	e17fff15 	stw	r5,-4(fp)
   22b58:	e0bfff17 	ldw	r2,-4(fp)
   22b5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b60:	0005303a 	rdctl	r2,status
   22b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b68:	e0fffb17 	ldw	r3,-20(fp)
   22b6c:	00bfff84 	movi	r2,-2
   22b70:	1884703a 	and	r2,r3,r2
   22b74:	1001703a 	wrctl	status,r2
  
  return context;
   22b78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22b7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22b80:	00c00044 	movi	r3,1
   22b84:	e0bffa17 	ldw	r2,-24(fp)
   22b88:	1884983a 	sll	r2,r3,r2
   22b8c:	0084303a 	nor	r2,zero,r2
   22b90:	1007883a 	mov	r3,r2
   22b94:	d0b24a17 	ldw	r2,-14040(gp)
   22b98:	1884703a 	and	r2,r3,r2
   22b9c:	d0b24a15 	stw	r2,-14040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22ba0:	d0b24a17 	ldw	r2,-14040(gp)
   22ba4:	100170fa 	wrctl	ienable,r2
   22ba8:	e0bffc17 	ldw	r2,-16(fp)
   22bac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22bb0:	e0bffd17 	ldw	r2,-12(fp)
   22bb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22bb8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22bbc:	0001883a 	nop
}
   22bc0:	e037883a 	mov	sp,fp
   22bc4:	df000017 	ldw	fp,0(sp)
   22bc8:	dec00104 	addi	sp,sp,4
   22bcc:	f800283a 	ret

00022bd0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   22bd0:	defffc04 	addi	sp,sp,-16
   22bd4:	df000315 	stw	fp,12(sp)
   22bd8:	df000304 	addi	fp,sp,12
   22bdc:	e13ffe15 	stw	r4,-8(fp)
   22be0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22be4:	000530fa 	rdctl	r2,ienable
   22be8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22bec:	00c00044 	movi	r3,1
   22bf0:	e0bfff17 	ldw	r2,-4(fp)
   22bf4:	1884983a 	sll	r2,r3,r2
   22bf8:	1007883a 	mov	r3,r2
   22bfc:	e0bffd17 	ldw	r2,-12(fp)
   22c00:	1884703a 	and	r2,r3,r2
   22c04:	1004c03a 	cmpne	r2,r2,zero
   22c08:	10803fcc 	andi	r2,r2,255
}
   22c0c:	e037883a 	mov	sp,fp
   22c10:	df000017 	ldw	fp,0(sp)
   22c14:	dec00104 	addi	sp,sp,4
   22c18:	f800283a 	ret

00022c1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22c1c:	defff504 	addi	sp,sp,-44
   22c20:	dfc00a15 	stw	ra,40(sp)
   22c24:	df000915 	stw	fp,36(sp)
   22c28:	df000904 	addi	fp,sp,36
   22c2c:	e13ffc15 	stw	r4,-16(fp)
   22c30:	e17ffd15 	stw	r5,-12(fp)
   22c34:	e1bffe15 	stw	r6,-8(fp)
   22c38:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22c3c:	00bffa84 	movi	r2,-22
   22c40:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22c44:	e0bffd17 	ldw	r2,-12(fp)
   22c48:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22c4c:	e0bff817 	ldw	r2,-32(fp)
   22c50:	10800808 	cmpgei	r2,r2,32
   22c54:	1000271e 	bne	r2,zero,22cf4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c58:	0005303a 	rdctl	r2,status
   22c5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c60:	e0fffb17 	ldw	r3,-20(fp)
   22c64:	00bfff84 	movi	r2,-2
   22c68:	1884703a 	and	r2,r3,r2
   22c6c:	1001703a 	wrctl	status,r2
  
  return context;
   22c70:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22c74:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22c78:	008000f4 	movhi	r2,3
   22c7c:	10847c04 	addi	r2,r2,4592
   22c80:	e0fff817 	ldw	r3,-32(fp)
   22c84:	180690fa 	slli	r3,r3,3
   22c88:	10c5883a 	add	r2,r2,r3
   22c8c:	e0fffe17 	ldw	r3,-8(fp)
   22c90:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22c94:	008000f4 	movhi	r2,3
   22c98:	10847c04 	addi	r2,r2,4592
   22c9c:	e0fff817 	ldw	r3,-32(fp)
   22ca0:	180690fa 	slli	r3,r3,3
   22ca4:	10c5883a 	add	r2,r2,r3
   22ca8:	10800104 	addi	r2,r2,4
   22cac:	e0ffff17 	ldw	r3,-4(fp)
   22cb0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22cb4:	e0bffe17 	ldw	r2,-8(fp)
   22cb8:	10000526 	beq	r2,zero,22cd0 <alt_iic_isr_register+0xb4>
   22cbc:	e0bff817 	ldw	r2,-32(fp)
   22cc0:	100b883a 	mov	r5,r2
   22cc4:	e13ffc17 	ldw	r4,-16(fp)
   22cc8:	0022abc0 	call	22abc <alt_ic_irq_enable>
   22ccc:	00000406 	br	22ce0 <alt_iic_isr_register+0xc4>
   22cd0:	e0bff817 	ldw	r2,-32(fp)
   22cd4:	100b883a 	mov	r5,r2
   22cd8:	e13ffc17 	ldw	r4,-16(fp)
   22cdc:	0022b440 	call	22b44 <alt_ic_irq_disable>
   22ce0:	e0bff715 	stw	r2,-36(fp)
   22ce4:	e0bffa17 	ldw	r2,-24(fp)
   22ce8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22cec:	e0bff917 	ldw	r2,-28(fp)
   22cf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22cf4:	e0bff717 	ldw	r2,-36(fp)
}
   22cf8:	e037883a 	mov	sp,fp
   22cfc:	dfc00117 	ldw	ra,4(sp)
   22d00:	df000017 	ldw	fp,0(sp)
   22d04:	dec00204 	addi	sp,sp,8
   22d08:	f800283a 	ret

00022d0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22d0c:	defff804 	addi	sp,sp,-32
   22d10:	dfc00715 	stw	ra,28(sp)
   22d14:	df000615 	stw	fp,24(sp)
   22d18:	dc000515 	stw	r16,20(sp)
   22d1c:	df000604 	addi	fp,sp,24
   22d20:	e13ffb15 	stw	r4,-20(fp)
   22d24:	e17ffc15 	stw	r5,-16(fp)
   22d28:	e1bffd15 	stw	r6,-12(fp)
   22d2c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22d30:	e1bffe17 	ldw	r6,-8(fp)
   22d34:	e17ffd17 	ldw	r5,-12(fp)
   22d38:	e13ffc17 	ldw	r4,-16(fp)
   22d3c:	0022f940 	call	22f94 <open>
   22d40:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22d44:	e0bffa17 	ldw	r2,-24(fp)
   22d48:	10002216 	blt	r2,zero,22dd4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22d4c:	040000f4 	movhi	r16,3
   22d50:	842d5204 	addi	r16,r16,-19128
   22d54:	e0bffa17 	ldw	r2,-24(fp)
   22d58:	01400304 	movi	r5,12
   22d5c:	1009883a 	mov	r4,r2
   22d60:	000cec40 	call	cec4 <__mulsi3>
   22d64:	8085883a 	add	r2,r16,r2
   22d68:	10c00017 	ldw	r3,0(r2)
   22d6c:	e0bffb17 	ldw	r2,-20(fp)
   22d70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22d74:	040000f4 	movhi	r16,3
   22d78:	842d5204 	addi	r16,r16,-19128
   22d7c:	e0bffa17 	ldw	r2,-24(fp)
   22d80:	01400304 	movi	r5,12
   22d84:	1009883a 	mov	r4,r2
   22d88:	000cec40 	call	cec4 <__mulsi3>
   22d8c:	8085883a 	add	r2,r16,r2
   22d90:	10800104 	addi	r2,r2,4
   22d94:	10c00017 	ldw	r3,0(r2)
   22d98:	e0bffb17 	ldw	r2,-20(fp)
   22d9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22da0:	040000f4 	movhi	r16,3
   22da4:	842d5204 	addi	r16,r16,-19128
   22da8:	e0bffa17 	ldw	r2,-24(fp)
   22dac:	01400304 	movi	r5,12
   22db0:	1009883a 	mov	r4,r2
   22db4:	000cec40 	call	cec4 <__mulsi3>
   22db8:	8085883a 	add	r2,r16,r2
   22dbc:	10800204 	addi	r2,r2,8
   22dc0:	10c00017 	ldw	r3,0(r2)
   22dc4:	e0bffb17 	ldw	r2,-20(fp)
   22dc8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22dcc:	e13ffa17 	ldw	r4,-24(fp)
   22dd0:	001f7d40 	call	1f7d4 <alt_release_fd>
  }
} 
   22dd4:	0001883a 	nop
   22dd8:	e6ffff04 	addi	sp,fp,-4
   22ddc:	dfc00217 	ldw	ra,8(sp)
   22de0:	df000117 	ldw	fp,4(sp)
   22de4:	dc000017 	ldw	r16,0(sp)
   22de8:	dec00304 	addi	sp,sp,12
   22dec:	f800283a 	ret

00022df0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22df0:	defffb04 	addi	sp,sp,-20
   22df4:	dfc00415 	stw	ra,16(sp)
   22df8:	df000315 	stw	fp,12(sp)
   22dfc:	df000304 	addi	fp,sp,12
   22e00:	e13ffd15 	stw	r4,-12(fp)
   22e04:	e17ffe15 	stw	r5,-8(fp)
   22e08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22e0c:	01c07fc4 	movi	r7,511
   22e10:	01800044 	movi	r6,1
   22e14:	e17ffd17 	ldw	r5,-12(fp)
   22e18:	010000f4 	movhi	r4,3
   22e1c:	212d5504 	addi	r4,r4,-19116
   22e20:	0022d0c0 	call	22d0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22e24:	01c07fc4 	movi	r7,511
   22e28:	000d883a 	mov	r6,zero
   22e2c:	e17ffe17 	ldw	r5,-8(fp)
   22e30:	010000f4 	movhi	r4,3
   22e34:	212d5204 	addi	r4,r4,-19128
   22e38:	0022d0c0 	call	22d0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22e3c:	01c07fc4 	movi	r7,511
   22e40:	01800044 	movi	r6,1
   22e44:	e17fff17 	ldw	r5,-4(fp)
   22e48:	010000f4 	movhi	r4,3
   22e4c:	212d5804 	addi	r4,r4,-19104
   22e50:	0022d0c0 	call	22d0c <alt_open_fd>
}  
   22e54:	0001883a 	nop
   22e58:	e037883a 	mov	sp,fp
   22e5c:	dfc00117 	ldw	ra,4(sp)
   22e60:	df000017 	ldw	fp,0(sp)
   22e64:	dec00204 	addi	sp,sp,8
   22e68:	f800283a 	ret

00022e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22e6c:	defffe04 	addi	sp,sp,-8
   22e70:	dfc00115 	stw	ra,4(sp)
   22e74:	df000015 	stw	fp,0(sp)
   22e78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22e7c:	d0a5b917 	ldw	r2,-26908(gp)
   22e80:	10000326 	beq	r2,zero,22e90 <alt_get_errno+0x24>
   22e84:	d0a5b917 	ldw	r2,-26908(gp)
   22e88:	103ee83a 	callr	r2
   22e8c:	00000106 	br	22e94 <alt_get_errno+0x28>
   22e90:	d0b24304 	addi	r2,gp,-14068
}
   22e94:	e037883a 	mov	sp,fp
   22e98:	dfc00117 	ldw	ra,4(sp)
   22e9c:	df000017 	ldw	fp,0(sp)
   22ea0:	dec00204 	addi	sp,sp,8
   22ea4:	f800283a 	ret

00022ea8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22ea8:	defffb04 	addi	sp,sp,-20
   22eac:	dfc00415 	stw	ra,16(sp)
   22eb0:	df000315 	stw	fp,12(sp)
   22eb4:	dc000215 	stw	r16,8(sp)
   22eb8:	df000304 	addi	fp,sp,12
   22ebc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22ec0:	e0bffe17 	ldw	r2,-8(fp)
   22ec4:	10800217 	ldw	r2,8(r2)
   22ec8:	10d00034 	orhi	r3,r2,16384
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22ed4:	e03ffd15 	stw	zero,-12(fp)
   22ed8:	00002306 	br	22f68 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22edc:	040000f4 	movhi	r16,3
   22ee0:	842d5204 	addi	r16,r16,-19128
   22ee4:	e0bffd17 	ldw	r2,-12(fp)
   22ee8:	01400304 	movi	r5,12
   22eec:	1009883a 	mov	r4,r2
   22ef0:	000cec40 	call	cec4 <__mulsi3>
   22ef4:	8085883a 	add	r2,r16,r2
   22ef8:	10c00017 	ldw	r3,0(r2)
   22efc:	e0bffe17 	ldw	r2,-8(fp)
   22f00:	10800017 	ldw	r2,0(r2)
   22f04:	1880151e 	bne	r3,r2,22f5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22f08:	040000f4 	movhi	r16,3
   22f0c:	842d5204 	addi	r16,r16,-19128
   22f10:	e0bffd17 	ldw	r2,-12(fp)
   22f14:	01400304 	movi	r5,12
   22f18:	1009883a 	mov	r4,r2
   22f1c:	000cec40 	call	cec4 <__mulsi3>
   22f20:	8085883a 	add	r2,r16,r2
   22f24:	10800204 	addi	r2,r2,8
   22f28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22f2c:	10000b0e 	bge	r2,zero,22f5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22f30:	01400304 	movi	r5,12
   22f34:	e13ffd17 	ldw	r4,-12(fp)
   22f38:	000cec40 	call	cec4 <__mulsi3>
   22f3c:	1007883a 	mov	r3,r2
   22f40:	008000f4 	movhi	r2,3
   22f44:	10ad5204 	addi	r2,r2,-19128
   22f48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22f4c:	e0bffe17 	ldw	r2,-8(fp)
   22f50:	18800226 	beq	r3,r2,22f5c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22f54:	00bffcc4 	movi	r2,-13
   22f58:	00000806 	br	22f7c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22f5c:	e0bffd17 	ldw	r2,-12(fp)
   22f60:	10800044 	addi	r2,r2,1
   22f64:	e0bffd15 	stw	r2,-12(fp)
   22f68:	d0a5b817 	ldw	r2,-26912(gp)
   22f6c:	1007883a 	mov	r3,r2
   22f70:	e0bffd17 	ldw	r2,-12(fp)
   22f74:	18bfd92e 	bgeu	r3,r2,22edc <__alt_data_end+0xfc022edc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22f78:	0005883a 	mov	r2,zero
}
   22f7c:	e6ffff04 	addi	sp,fp,-4
   22f80:	dfc00217 	ldw	ra,8(sp)
   22f84:	df000117 	ldw	fp,4(sp)
   22f88:	dc000017 	ldw	r16,0(sp)
   22f8c:	dec00304 	addi	sp,sp,12
   22f90:	f800283a 	ret

00022f94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22f94:	defff604 	addi	sp,sp,-40
   22f98:	dfc00915 	stw	ra,36(sp)
   22f9c:	df000815 	stw	fp,32(sp)
   22fa0:	df000804 	addi	fp,sp,32
   22fa4:	e13ffd15 	stw	r4,-12(fp)
   22fa8:	e17ffe15 	stw	r5,-8(fp)
   22fac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22fb0:	00bfffc4 	movi	r2,-1
   22fb4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22fb8:	00bffb44 	movi	r2,-19
   22fbc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22fc0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22fc4:	d165b604 	addi	r5,gp,-26920
   22fc8:	e13ffd17 	ldw	r4,-12(fp)
   22fcc:	00229bc0 	call	229bc <alt_find_dev>
   22fd0:	e0bff815 	stw	r2,-32(fp)
   22fd4:	e0bff817 	ldw	r2,-32(fp)
   22fd8:	1000051e 	bne	r2,zero,22ff0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22fdc:	e13ffd17 	ldw	r4,-12(fp)
   22fe0:	00235200 	call	23520 <alt_find_file>
   22fe4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22fe8:	00800044 	movi	r2,1
   22fec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22ff0:	e0bff817 	ldw	r2,-32(fp)
   22ff4:	10002b26 	beq	r2,zero,230a4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22ff8:	e13ff817 	ldw	r4,-32(fp)
   22ffc:	00236280 	call	23628 <alt_get_fd>
   23000:	e0bff915 	stw	r2,-28(fp)
   23004:	e0bff917 	ldw	r2,-28(fp)
   23008:	1000030e 	bge	r2,zero,23018 <open+0x84>
    {
      status = index;
   2300c:	e0bff917 	ldw	r2,-28(fp)
   23010:	e0bffa15 	stw	r2,-24(fp)
   23014:	00002506 	br	230ac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   23018:	01400304 	movi	r5,12
   2301c:	e13ff917 	ldw	r4,-28(fp)
   23020:	000cec40 	call	cec4 <__mulsi3>
   23024:	1007883a 	mov	r3,r2
   23028:	008000f4 	movhi	r2,3
   2302c:	10ad5204 	addi	r2,r2,-19128
   23030:	1885883a 	add	r2,r3,r2
   23034:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   23038:	e0fffe17 	ldw	r3,-8(fp)
   2303c:	00900034 	movhi	r2,16384
   23040:	10bfffc4 	addi	r2,r2,-1
   23044:	1886703a 	and	r3,r3,r2
   23048:	e0bffc17 	ldw	r2,-16(fp)
   2304c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   23050:	e0bffb17 	ldw	r2,-20(fp)
   23054:	1000051e 	bne	r2,zero,2306c <open+0xd8>
   23058:	e13ffc17 	ldw	r4,-16(fp)
   2305c:	0022ea80 	call	22ea8 <alt_file_locked>
   23060:	e0bffa15 	stw	r2,-24(fp)
   23064:	e0bffa17 	ldw	r2,-24(fp)
   23068:	10001016 	blt	r2,zero,230ac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2306c:	e0bff817 	ldw	r2,-32(fp)
   23070:	10800317 	ldw	r2,12(r2)
   23074:	10000826 	beq	r2,zero,23098 <open+0x104>
   23078:	e0bff817 	ldw	r2,-32(fp)
   2307c:	10800317 	ldw	r2,12(r2)
   23080:	e1ffff17 	ldw	r7,-4(fp)
   23084:	e1bffe17 	ldw	r6,-8(fp)
   23088:	e17ffd17 	ldw	r5,-12(fp)
   2308c:	e13ffc17 	ldw	r4,-16(fp)
   23090:	103ee83a 	callr	r2
   23094:	00000106 	br	2309c <open+0x108>
   23098:	0005883a 	mov	r2,zero
   2309c:	e0bffa15 	stw	r2,-24(fp)
   230a0:	00000206 	br	230ac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   230a4:	00bffb44 	movi	r2,-19
   230a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   230ac:	e0bffa17 	ldw	r2,-24(fp)
   230b0:	1000090e 	bge	r2,zero,230d8 <open+0x144>
  {
    alt_release_fd (index);  
   230b4:	e13ff917 	ldw	r4,-28(fp)
   230b8:	001f7d40 	call	1f7d4 <alt_release_fd>
    ALT_ERRNO = -status;
   230bc:	0022e6c0 	call	22e6c <alt_get_errno>
   230c0:	1007883a 	mov	r3,r2
   230c4:	e0bffa17 	ldw	r2,-24(fp)
   230c8:	0085c83a 	sub	r2,zero,r2
   230cc:	18800015 	stw	r2,0(r3)
    return -1;
   230d0:	00bfffc4 	movi	r2,-1
   230d4:	00000106 	br	230dc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   230d8:	e0bff917 	ldw	r2,-28(fp)
}
   230dc:	e037883a 	mov	sp,fp
   230e0:	dfc00117 	ldw	ra,4(sp)
   230e4:	df000017 	ldw	fp,0(sp)
   230e8:	dec00204 	addi	sp,sp,8
   230ec:	f800283a 	ret

000230f0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   230f0:	defff204 	addi	sp,sp,-56
   230f4:	dfc00a15 	stw	ra,40(sp)
   230f8:	df000915 	stw	fp,36(sp)
   230fc:	df000904 	addi	fp,sp,36
   23100:	e13fff15 	stw	r4,-4(fp)
   23104:	e1400215 	stw	r5,8(fp)
   23108:	e1800315 	stw	r6,12(fp)
   2310c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   23110:	e0800204 	addi	r2,fp,8
   23114:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   23118:	e0bfff17 	ldw	r2,-4(fp)
   2311c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   23120:	00006f06 	br	232e0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   23124:	e0bff807 	ldb	r2,-32(fp)
   23128:	10800960 	cmpeqi	r2,r2,37
   2312c:	1000041e 	bne	r2,zero,23140 <alt_printf+0x50>
        {
            alt_putchar(c);
   23130:	e0bff807 	ldb	r2,-32(fp)
   23134:	1009883a 	mov	r4,r2
   23138:	002331c0 	call	2331c <alt_putchar>
   2313c:	00006806 	br	232e0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   23140:	e0bff717 	ldw	r2,-36(fp)
   23144:	10c00044 	addi	r3,r2,1
   23148:	e0fff715 	stw	r3,-36(fp)
   2314c:	10800003 	ldbu	r2,0(r2)
   23150:	e0bff805 	stb	r2,-32(fp)
   23154:	e0bff807 	ldb	r2,-32(fp)
   23158:	10006926 	beq	r2,zero,23300 <alt_printf+0x210>
            {
                if (c == '%')
   2315c:	e0bff807 	ldb	r2,-32(fp)
   23160:	10800958 	cmpnei	r2,r2,37
   23164:	1000041e 	bne	r2,zero,23178 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   23168:	e0bff807 	ldb	r2,-32(fp)
   2316c:	1009883a 	mov	r4,r2
   23170:	002331c0 	call	2331c <alt_putchar>
   23174:	00005a06 	br	232e0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   23178:	e0bff807 	ldb	r2,-32(fp)
   2317c:	108018d8 	cmpnei	r2,r2,99
   23180:	1000081e 	bne	r2,zero,231a4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   23184:	e0bffe17 	ldw	r2,-8(fp)
   23188:	10c00104 	addi	r3,r2,4
   2318c:	e0fffe15 	stw	r3,-8(fp)
   23190:	10800017 	ldw	r2,0(r2)
   23194:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   23198:	e13ffd17 	ldw	r4,-12(fp)
   2319c:	002331c0 	call	2331c <alt_putchar>
   231a0:	00004f06 	br	232e0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   231a4:	e0bff807 	ldb	r2,-32(fp)
   231a8:	10801e18 	cmpnei	r2,r2,120
   231ac:	1000341e 	bne	r2,zero,23280 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   231b0:	e0bffe17 	ldw	r2,-8(fp)
   231b4:	10c00104 	addi	r3,r2,4
   231b8:	e0fffe15 	stw	r3,-8(fp)
   231bc:	10800017 	ldw	r2,0(r2)
   231c0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   231c4:	e0bffb17 	ldw	r2,-20(fp)
   231c8:	1000031e 	bne	r2,zero,231d8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   231cc:	01000c04 	movi	r4,48
   231d0:	002331c0 	call	2331c <alt_putchar>
                        continue;
   231d4:	00004206 	br	232e0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   231d8:	00800704 	movi	r2,28
   231dc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   231e0:	00000306 	br	231f0 <alt_printf+0x100>
                        digit_shift -= 4;
   231e4:	e0bff917 	ldw	r2,-28(fp)
   231e8:	10bfff04 	addi	r2,r2,-4
   231ec:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   231f0:	00c003c4 	movi	r3,15
   231f4:	e0bff917 	ldw	r2,-28(fp)
   231f8:	1884983a 	sll	r2,r3,r2
   231fc:	1007883a 	mov	r3,r2
   23200:	e0bffb17 	ldw	r2,-20(fp)
   23204:	1884703a 	and	r2,r3,r2
   23208:	103ff626 	beq	r2,zero,231e4 <__alt_data_end+0xfc0231e4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2320c:	00001906 	br	23274 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   23210:	00c003c4 	movi	r3,15
   23214:	e0bff917 	ldw	r2,-28(fp)
   23218:	1884983a 	sll	r2,r3,r2
   2321c:	1007883a 	mov	r3,r2
   23220:	e0bffb17 	ldw	r2,-20(fp)
   23224:	1886703a 	and	r3,r3,r2
   23228:	e0bff917 	ldw	r2,-28(fp)
   2322c:	1884d83a 	srl	r2,r3,r2
   23230:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   23234:	e0bffc17 	ldw	r2,-16(fp)
   23238:	108002a8 	cmpgeui	r2,r2,10
   2323c:	1000041e 	bne	r2,zero,23250 <alt_printf+0x160>
                            c = '0' + digit;
   23240:	e0bffc17 	ldw	r2,-16(fp)
   23244:	10800c04 	addi	r2,r2,48
   23248:	e0bff805 	stb	r2,-32(fp)
   2324c:	00000306 	br	2325c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23250:	e0bffc17 	ldw	r2,-16(fp)
   23254:	108015c4 	addi	r2,r2,87
   23258:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2325c:	e0bff807 	ldb	r2,-32(fp)
   23260:	1009883a 	mov	r4,r2
   23264:	002331c0 	call	2331c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   23268:	e0bff917 	ldw	r2,-28(fp)
   2326c:	10bfff04 	addi	r2,r2,-4
   23270:	e0bff915 	stw	r2,-28(fp)
   23274:	e0bff917 	ldw	r2,-28(fp)
   23278:	103fe50e 	bge	r2,zero,23210 <__alt_data_end+0xfc023210>
   2327c:	00001806 	br	232e0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   23280:	e0bff807 	ldb	r2,-32(fp)
   23284:	10801cd8 	cmpnei	r2,r2,115
   23288:	1000151e 	bne	r2,zero,232e0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2328c:	e0bffe17 	ldw	r2,-8(fp)
   23290:	10c00104 	addi	r3,r2,4
   23294:	e0fffe15 	stw	r3,-8(fp)
   23298:	10800017 	ldw	r2,0(r2)
   2329c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   232a0:	00000906 	br	232c8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   232a4:	e0bffa17 	ldw	r2,-24(fp)
   232a8:	10c00044 	addi	r3,r2,1
   232ac:	e0fffa15 	stw	r3,-24(fp)
   232b0:	10800003 	ldbu	r2,0(r2)
   232b4:	10803fcc 	andi	r2,r2,255
   232b8:	1080201c 	xori	r2,r2,128
   232bc:	10bfe004 	addi	r2,r2,-128
   232c0:	1009883a 	mov	r4,r2
   232c4:	002331c0 	call	2331c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   232c8:	e0bffa17 	ldw	r2,-24(fp)
   232cc:	10800003 	ldbu	r2,0(r2)
   232d0:	10803fcc 	andi	r2,r2,255
   232d4:	1080201c 	xori	r2,r2,128
   232d8:	10bfe004 	addi	r2,r2,-128
   232dc:	103ff11e 	bne	r2,zero,232a4 <__alt_data_end+0xfc0232a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   232e0:	e0bff717 	ldw	r2,-36(fp)
   232e4:	10c00044 	addi	r3,r2,1
   232e8:	e0fff715 	stw	r3,-36(fp)
   232ec:	10800003 	ldbu	r2,0(r2)
   232f0:	e0bff805 	stb	r2,-32(fp)
   232f4:	e0bff807 	ldb	r2,-32(fp)
   232f8:	103f8a1e 	bne	r2,zero,23124 <__alt_data_end+0xfc023124>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   232fc:	00000106 	br	23304 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   23300:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   23304:	0001883a 	nop
   23308:	e037883a 	mov	sp,fp
   2330c:	dfc00117 	ldw	ra,4(sp)
   23310:	df000017 	ldw	fp,0(sp)
   23314:	dec00504 	addi	sp,sp,20
   23318:	f800283a 	ret

0002331c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2331c:	defffd04 	addi	sp,sp,-12
   23320:	dfc00215 	stw	ra,8(sp)
   23324:	df000115 	stw	fp,4(sp)
   23328:	df000104 	addi	fp,sp,4
   2332c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   23330:	d0a5af17 	ldw	r2,-26948(gp)
   23334:	10800217 	ldw	r2,8(r2)
   23338:	100b883a 	mov	r5,r2
   2333c:	e13fff17 	ldw	r4,-4(fp)
   23340:	0017d600 	call	17d60 <putc>
#endif
#endif
}
   23344:	e037883a 	mov	sp,fp
   23348:	dfc00117 	ldw	ra,4(sp)
   2334c:	df000017 	ldw	fp,0(sp)
   23350:	dec00204 	addi	sp,sp,8
   23354:	f800283a 	ret

00023358 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23358:	defffa04 	addi	sp,sp,-24
   2335c:	df000515 	stw	fp,20(sp)
   23360:	df000504 	addi	fp,sp,20
   23364:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23368:	0005303a 	rdctl	r2,status
   2336c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23370:	e0fffc17 	ldw	r3,-16(fp)
   23374:	00bfff84 	movi	r2,-2
   23378:	1884703a 	and	r2,r3,r2
   2337c:	1001703a 	wrctl	status,r2
  
  return context;
   23380:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23384:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23388:	e0bfff17 	ldw	r2,-4(fp)
   2338c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23390:	e0bffd17 	ldw	r2,-12(fp)
   23394:	10800017 	ldw	r2,0(r2)
   23398:	e0fffd17 	ldw	r3,-12(fp)
   2339c:	18c00117 	ldw	r3,4(r3)
   233a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   233a4:	e0bffd17 	ldw	r2,-12(fp)
   233a8:	10800117 	ldw	r2,4(r2)
   233ac:	e0fffd17 	ldw	r3,-12(fp)
   233b0:	18c00017 	ldw	r3,0(r3)
   233b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   233b8:	e0bffd17 	ldw	r2,-12(fp)
   233bc:	e0fffd17 	ldw	r3,-12(fp)
   233c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   233c4:	e0bffd17 	ldw	r2,-12(fp)
   233c8:	e0fffd17 	ldw	r3,-12(fp)
   233cc:	10c00015 	stw	r3,0(r2)
   233d0:	e0bffb17 	ldw	r2,-20(fp)
   233d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   233d8:	e0bffe17 	ldw	r2,-8(fp)
   233dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   233e0:	0001883a 	nop
   233e4:	e037883a 	mov	sp,fp
   233e8:	df000017 	ldw	fp,0(sp)
   233ec:	dec00104 	addi	sp,sp,4
   233f0:	f800283a 	ret

000233f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   233f4:	defffb04 	addi	sp,sp,-20
   233f8:	dfc00415 	stw	ra,16(sp)
   233fc:	df000315 	stw	fp,12(sp)
   23400:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23404:	d0a5be17 	ldw	r2,-26888(gp)
   23408:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2340c:	d0b24c17 	ldw	r2,-14032(gp)
   23410:	10800044 	addi	r2,r2,1
   23414:	d0b24c15 	stw	r2,-14032(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23418:	00002e06 	br	234d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2341c:	e0bffd17 	ldw	r2,-12(fp)
   23420:	10800017 	ldw	r2,0(r2)
   23424:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   23428:	e0bffd17 	ldw	r2,-12(fp)
   2342c:	10800403 	ldbu	r2,16(r2)
   23430:	10803fcc 	andi	r2,r2,255
   23434:	10000426 	beq	r2,zero,23448 <alt_tick+0x54>
   23438:	d0b24c17 	ldw	r2,-14032(gp)
   2343c:	1000021e 	bne	r2,zero,23448 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23440:	e0bffd17 	ldw	r2,-12(fp)
   23444:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23448:	e0bffd17 	ldw	r2,-12(fp)
   2344c:	10800217 	ldw	r2,8(r2)
   23450:	d0f24c17 	ldw	r3,-14032(gp)
   23454:	18801d36 	bltu	r3,r2,234cc <alt_tick+0xd8>
   23458:	e0bffd17 	ldw	r2,-12(fp)
   2345c:	10800403 	ldbu	r2,16(r2)
   23460:	10803fcc 	andi	r2,r2,255
   23464:	1000191e 	bne	r2,zero,234cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23468:	e0bffd17 	ldw	r2,-12(fp)
   2346c:	10800317 	ldw	r2,12(r2)
   23470:	e0fffd17 	ldw	r3,-12(fp)
   23474:	18c00517 	ldw	r3,20(r3)
   23478:	1809883a 	mov	r4,r3
   2347c:	103ee83a 	callr	r2
   23480:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23484:	e0bfff17 	ldw	r2,-4(fp)
   23488:	1000031e 	bne	r2,zero,23498 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2348c:	e13ffd17 	ldw	r4,-12(fp)
   23490:	00233580 	call	23358 <alt_alarm_stop>
   23494:	00000d06 	br	234cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23498:	e0bffd17 	ldw	r2,-12(fp)
   2349c:	10c00217 	ldw	r3,8(r2)
   234a0:	e0bfff17 	ldw	r2,-4(fp)
   234a4:	1887883a 	add	r3,r3,r2
   234a8:	e0bffd17 	ldw	r2,-12(fp)
   234ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   234b0:	e0bffd17 	ldw	r2,-12(fp)
   234b4:	10c00217 	ldw	r3,8(r2)
   234b8:	d0b24c17 	ldw	r2,-14032(gp)
   234bc:	1880032e 	bgeu	r3,r2,234cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   234c0:	e0bffd17 	ldw	r2,-12(fp)
   234c4:	00c00044 	movi	r3,1
   234c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   234cc:	e0bffe17 	ldw	r2,-8(fp)
   234d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   234d4:	e0fffd17 	ldw	r3,-12(fp)
   234d8:	d0a5be04 	addi	r2,gp,-26888
   234dc:	18bfcf1e 	bne	r3,r2,2341c <__alt_data_end+0xfc02341c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   234e0:	0001883a 	nop
}
   234e4:	0001883a 	nop
   234e8:	e037883a 	mov	sp,fp
   234ec:	dfc00117 	ldw	ra,4(sp)
   234f0:	df000017 	ldw	fp,0(sp)
   234f4:	dec00204 	addi	sp,sp,8
   234f8:	f800283a 	ret

000234fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   234fc:	deffff04 	addi	sp,sp,-4
   23500:	df000015 	stw	fp,0(sp)
   23504:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   23508:	000170fa 	wrctl	ienable,zero
}
   2350c:	0001883a 	nop
   23510:	e037883a 	mov	sp,fp
   23514:	df000017 	ldw	fp,0(sp)
   23518:	dec00104 	addi	sp,sp,4
   2351c:	f800283a 	ret

00023520 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23520:	defffb04 	addi	sp,sp,-20
   23524:	dfc00415 	stw	ra,16(sp)
   23528:	df000315 	stw	fp,12(sp)
   2352c:	df000304 	addi	fp,sp,12
   23530:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23534:	d0a5b417 	ldw	r2,-26928(gp)
   23538:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2353c:	00003106 	br	23604 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23540:	e0bffd17 	ldw	r2,-12(fp)
   23544:	10800217 	ldw	r2,8(r2)
   23548:	1009883a 	mov	r4,r2
   2354c:	000f5400 	call	f540 <strlen>
   23550:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23554:	e0bffd17 	ldw	r2,-12(fp)
   23558:	10c00217 	ldw	r3,8(r2)
   2355c:	e0bffe17 	ldw	r2,-8(fp)
   23560:	10bfffc4 	addi	r2,r2,-1
   23564:	1885883a 	add	r2,r3,r2
   23568:	10800003 	ldbu	r2,0(r2)
   2356c:	10803fcc 	andi	r2,r2,255
   23570:	1080201c 	xori	r2,r2,128
   23574:	10bfe004 	addi	r2,r2,-128
   23578:	10800bd8 	cmpnei	r2,r2,47
   2357c:	1000031e 	bne	r2,zero,2358c <alt_find_file+0x6c>
    {
      len -= 1;
   23580:	e0bffe17 	ldw	r2,-8(fp)
   23584:	10bfffc4 	addi	r2,r2,-1
   23588:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2358c:	e0bffe17 	ldw	r2,-8(fp)
   23590:	e0ffff17 	ldw	r3,-4(fp)
   23594:	1885883a 	add	r2,r3,r2
   23598:	10800003 	ldbu	r2,0(r2)
   2359c:	10803fcc 	andi	r2,r2,255
   235a0:	1080201c 	xori	r2,r2,128
   235a4:	10bfe004 	addi	r2,r2,-128
   235a8:	10800be0 	cmpeqi	r2,r2,47
   235ac:	1000081e 	bne	r2,zero,235d0 <alt_find_file+0xb0>
   235b0:	e0bffe17 	ldw	r2,-8(fp)
   235b4:	e0ffff17 	ldw	r3,-4(fp)
   235b8:	1885883a 	add	r2,r3,r2
   235bc:	10800003 	ldbu	r2,0(r2)
   235c0:	10803fcc 	andi	r2,r2,255
   235c4:	1080201c 	xori	r2,r2,128
   235c8:	10bfe004 	addi	r2,r2,-128
   235cc:	10000a1e 	bne	r2,zero,235f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   235d0:	e0bffd17 	ldw	r2,-12(fp)
   235d4:	10800217 	ldw	r2,8(r2)
   235d8:	e0fffe17 	ldw	r3,-8(fp)
   235dc:	180d883a 	mov	r6,r3
   235e0:	e17fff17 	ldw	r5,-4(fp)
   235e4:	1009883a 	mov	r4,r2
   235e8:	00237d40 	call	237d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   235ec:	1000021e 	bne	r2,zero,235f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   235f0:	e0bffd17 	ldw	r2,-12(fp)
   235f4:	00000706 	br	23614 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   235f8:	e0bffd17 	ldw	r2,-12(fp)
   235fc:	10800017 	ldw	r2,0(r2)
   23600:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23604:	e0fffd17 	ldw	r3,-12(fp)
   23608:	d0a5b404 	addi	r2,gp,-26928
   2360c:	18bfcc1e 	bne	r3,r2,23540 <__alt_data_end+0xfc023540>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   23610:	0005883a 	mov	r2,zero
}
   23614:	e037883a 	mov	sp,fp
   23618:	dfc00117 	ldw	ra,4(sp)
   2361c:	df000017 	ldw	fp,0(sp)
   23620:	dec00204 	addi	sp,sp,8
   23624:	f800283a 	ret

00023628 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23628:	defffa04 	addi	sp,sp,-24
   2362c:	dfc00515 	stw	ra,20(sp)
   23630:	df000415 	stw	fp,16(sp)
   23634:	dc000315 	stw	r16,12(sp)
   23638:	df000404 	addi	fp,sp,16
   2363c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   23640:	00bffa04 	movi	r2,-24
   23644:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23648:	e03ffc15 	stw	zero,-16(fp)
   2364c:	00001d06 	br	236c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   23650:	040000f4 	movhi	r16,3
   23654:	842d5204 	addi	r16,r16,-19128
   23658:	e0bffc17 	ldw	r2,-16(fp)
   2365c:	01400304 	movi	r5,12
   23660:	1009883a 	mov	r4,r2
   23664:	000cec40 	call	cec4 <__mulsi3>
   23668:	8085883a 	add	r2,r16,r2
   2366c:	10800017 	ldw	r2,0(r2)
   23670:	1000111e 	bne	r2,zero,236b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   23674:	040000f4 	movhi	r16,3
   23678:	842d5204 	addi	r16,r16,-19128
   2367c:	e0bffc17 	ldw	r2,-16(fp)
   23680:	01400304 	movi	r5,12
   23684:	1009883a 	mov	r4,r2
   23688:	000cec40 	call	cec4 <__mulsi3>
   2368c:	8085883a 	add	r2,r16,r2
   23690:	e0fffe17 	ldw	r3,-8(fp)
   23694:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23698:	d0e5b817 	ldw	r3,-26912(gp)
   2369c:	e0bffc17 	ldw	r2,-16(fp)
   236a0:	1880020e 	bge	r3,r2,236ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   236a4:	e0bffc17 	ldw	r2,-16(fp)
   236a8:	d0a5b815 	stw	r2,-26912(gp)
      }
      rc = i;
   236ac:	e0bffc17 	ldw	r2,-16(fp)
   236b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   236b4:	00000606 	br	236d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   236b8:	e0bffc17 	ldw	r2,-16(fp)
   236bc:	10800044 	addi	r2,r2,1
   236c0:	e0bffc15 	stw	r2,-16(fp)
   236c4:	e0bffc17 	ldw	r2,-16(fp)
   236c8:	10800810 	cmplti	r2,r2,32
   236cc:	103fe01e 	bne	r2,zero,23650 <__alt_data_end+0xfc023650>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   236d0:	e0bffd17 	ldw	r2,-12(fp)
}
   236d4:	e6ffff04 	addi	sp,fp,-4
   236d8:	dfc00217 	ldw	ra,8(sp)
   236dc:	df000117 	ldw	fp,4(sp)
   236e0:	dc000017 	ldw	r16,0(sp)
   236e4:	dec00304 	addi	sp,sp,12
   236e8:	f800283a 	ret

000236ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   236ec:	defffe04 	addi	sp,sp,-8
   236f0:	df000115 	stw	fp,4(sp)
   236f4:	df000104 	addi	fp,sp,4
   236f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   236fc:	e0bfff17 	ldw	r2,-4(fp)
   23700:	10bffe84 	addi	r2,r2,-6
   23704:	10c00428 	cmpgeui	r3,r2,16
   23708:	18001a1e 	bne	r3,zero,23774 <alt_exception_cause_generated_bad_addr+0x88>
   2370c:	100690ba 	slli	r3,r2,2
   23710:	008000b4 	movhi	r2,2
   23714:	108dc904 	addi	r2,r2,14116
   23718:	1885883a 	add	r2,r3,r2
   2371c:	10800017 	ldw	r2,0(r2)
   23720:	1000683a 	jmp	r2
   23724:	00023764 	muli	zero,zero,2269
   23728:	00023764 	muli	zero,zero,2269
   2372c:	00023774 	movhi	zero,2269
   23730:	00023774 	movhi	zero,2269
   23734:	00023774 	movhi	zero,2269
   23738:	00023764 	muli	zero,zero,2269
   2373c:	0002376c 	andhi	zero,zero,2269
   23740:	00023774 	movhi	zero,2269
   23744:	00023764 	muli	zero,zero,2269
   23748:	00023764 	muli	zero,zero,2269
   2374c:	00023774 	movhi	zero,2269
   23750:	00023764 	muli	zero,zero,2269
   23754:	0002376c 	andhi	zero,zero,2269
   23758:	00023774 	movhi	zero,2269
   2375c:	00023774 	movhi	zero,2269
   23760:	00023764 	muli	zero,zero,2269
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23764:	00800044 	movi	r2,1
   23768:	00000306 	br	23778 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2376c:	0005883a 	mov	r2,zero
   23770:	00000106 	br	23778 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23774:	0005883a 	mov	r2,zero
  }
}
   23778:	e037883a 	mov	sp,fp
   2377c:	df000017 	ldw	fp,0(sp)
   23780:	dec00104 	addi	sp,sp,4
   23784:	f800283a 	ret

00023788 <atexit>:
   23788:	200b883a 	mov	r5,r4
   2378c:	000f883a 	mov	r7,zero
   23790:	000d883a 	mov	r6,zero
   23794:	0009883a 	mov	r4,zero
   23798:	00238501 	jmpi	23850 <__register_exitproc>

0002379c <exit>:
   2379c:	defffe04 	addi	sp,sp,-8
   237a0:	000b883a 	mov	r5,zero
   237a4:	dc000015 	stw	r16,0(sp)
   237a8:	dfc00115 	stw	ra,4(sp)
   237ac:	2021883a 	mov	r16,r4
   237b0:	00239680 	call	23968 <__call_exitprocs>
   237b4:	008000f4 	movhi	r2,3
   237b8:	10b78604 	addi	r2,r2,-8680
   237bc:	11000017 	ldw	r4,0(r2)
   237c0:	20800f17 	ldw	r2,60(r4)
   237c4:	10000126 	beq	r2,zero,237cc <exit+0x30>
   237c8:	103ee83a 	callr	r2
   237cc:	8009883a 	mov	r4,r16
   237d0:	001f0300 	call	1f030 <_exit>

000237d4 <memcmp>:
   237d4:	01c000c4 	movi	r7,3
   237d8:	3980192e 	bgeu	r7,r6,23840 <memcmp+0x6c>
   237dc:	2144b03a 	or	r2,r4,r5
   237e0:	11c4703a 	and	r2,r2,r7
   237e4:	10000f26 	beq	r2,zero,23824 <memcmp+0x50>
   237e8:	20800003 	ldbu	r2,0(r4)
   237ec:	28c00003 	ldbu	r3,0(r5)
   237f0:	10c0151e 	bne	r2,r3,23848 <memcmp+0x74>
   237f4:	31bfff84 	addi	r6,r6,-2
   237f8:	01ffffc4 	movi	r7,-1
   237fc:	00000406 	br	23810 <memcmp+0x3c>
   23800:	20800003 	ldbu	r2,0(r4)
   23804:	28c00003 	ldbu	r3,0(r5)
   23808:	31bfffc4 	addi	r6,r6,-1
   2380c:	10c00e1e 	bne	r2,r3,23848 <memcmp+0x74>
   23810:	21000044 	addi	r4,r4,1
   23814:	29400044 	addi	r5,r5,1
   23818:	31fff91e 	bne	r6,r7,23800 <__alt_data_end+0xfc023800>
   2381c:	0005883a 	mov	r2,zero
   23820:	f800283a 	ret
   23824:	20c00017 	ldw	r3,0(r4)
   23828:	28800017 	ldw	r2,0(r5)
   2382c:	18bfee1e 	bne	r3,r2,237e8 <__alt_data_end+0xfc0237e8>
   23830:	31bfff04 	addi	r6,r6,-4
   23834:	21000104 	addi	r4,r4,4
   23838:	29400104 	addi	r5,r5,4
   2383c:	39bff936 	bltu	r7,r6,23824 <__alt_data_end+0xfc023824>
   23840:	303fe91e 	bne	r6,zero,237e8 <__alt_data_end+0xfc0237e8>
   23844:	003ff506 	br	2381c <__alt_data_end+0xfc02381c>
   23848:	10c5c83a 	sub	r2,r2,r3
   2384c:	f800283a 	ret

00023850 <__register_exitproc>:
   23850:	defffa04 	addi	sp,sp,-24
   23854:	dc000315 	stw	r16,12(sp)
   23858:	040000f4 	movhi	r16,3
   2385c:	84378604 	addi	r16,r16,-8680
   23860:	80c00017 	ldw	r3,0(r16)
   23864:	dc400415 	stw	r17,16(sp)
   23868:	dfc00515 	stw	ra,20(sp)
   2386c:	18805217 	ldw	r2,328(r3)
   23870:	2023883a 	mov	r17,r4
   23874:	10003726 	beq	r2,zero,23954 <__register_exitproc+0x104>
   23878:	10c00117 	ldw	r3,4(r2)
   2387c:	010007c4 	movi	r4,31
   23880:	20c00e16 	blt	r4,r3,238bc <__register_exitproc+0x6c>
   23884:	1a000044 	addi	r8,r3,1
   23888:	8800221e 	bne	r17,zero,23914 <__register_exitproc+0xc4>
   2388c:	18c00084 	addi	r3,r3,2
   23890:	18c7883a 	add	r3,r3,r3
   23894:	18c7883a 	add	r3,r3,r3
   23898:	12000115 	stw	r8,4(r2)
   2389c:	10c7883a 	add	r3,r2,r3
   238a0:	19400015 	stw	r5,0(r3)
   238a4:	0005883a 	mov	r2,zero
   238a8:	dfc00517 	ldw	ra,20(sp)
   238ac:	dc400417 	ldw	r17,16(sp)
   238b0:	dc000317 	ldw	r16,12(sp)
   238b4:	dec00604 	addi	sp,sp,24
   238b8:	f800283a 	ret
   238bc:	00800074 	movhi	r2,1
   238c0:	10b91104 	addi	r2,r2,-7100
   238c4:	10002626 	beq	r2,zero,23960 <__register_exitproc+0x110>
   238c8:	01006404 	movi	r4,400
   238cc:	d9400015 	stw	r5,0(sp)
   238d0:	d9800115 	stw	r6,4(sp)
   238d4:	d9c00215 	stw	r7,8(sp)
   238d8:	000e4440 	call	e444 <malloc>
   238dc:	d9400017 	ldw	r5,0(sp)
   238e0:	d9800117 	ldw	r6,4(sp)
   238e4:	d9c00217 	ldw	r7,8(sp)
   238e8:	10001d26 	beq	r2,zero,23960 <__register_exitproc+0x110>
   238ec:	81000017 	ldw	r4,0(r16)
   238f0:	10000115 	stw	zero,4(r2)
   238f4:	02000044 	movi	r8,1
   238f8:	22405217 	ldw	r9,328(r4)
   238fc:	0007883a 	mov	r3,zero
   23900:	12400015 	stw	r9,0(r2)
   23904:	20805215 	stw	r2,328(r4)
   23908:	10006215 	stw	zero,392(r2)
   2390c:	10006315 	stw	zero,396(r2)
   23910:	883fde26 	beq	r17,zero,2388c <__alt_data_end+0xfc02388c>
   23914:	18c9883a 	add	r4,r3,r3
   23918:	2109883a 	add	r4,r4,r4
   2391c:	1109883a 	add	r4,r2,r4
   23920:	21802215 	stw	r6,136(r4)
   23924:	01800044 	movi	r6,1
   23928:	12406217 	ldw	r9,392(r2)
   2392c:	30cc983a 	sll	r6,r6,r3
   23930:	4992b03a 	or	r9,r9,r6
   23934:	12406215 	stw	r9,392(r2)
   23938:	21c04215 	stw	r7,264(r4)
   2393c:	01000084 	movi	r4,2
   23940:	893fd21e 	bne	r17,r4,2388c <__alt_data_end+0xfc02388c>
   23944:	11006317 	ldw	r4,396(r2)
   23948:	218cb03a 	or	r6,r4,r6
   2394c:	11806315 	stw	r6,396(r2)
   23950:	003fce06 	br	2388c <__alt_data_end+0xfc02388c>
   23954:	18805304 	addi	r2,r3,332
   23958:	18805215 	stw	r2,328(r3)
   2395c:	003fc606 	br	23878 <__alt_data_end+0xfc023878>
   23960:	00bfffc4 	movi	r2,-1
   23964:	003fd006 	br	238a8 <__alt_data_end+0xfc0238a8>

00023968 <__call_exitprocs>:
   23968:	defff504 	addi	sp,sp,-44
   2396c:	df000915 	stw	fp,36(sp)
   23970:	dd400615 	stw	r21,24(sp)
   23974:	dc800315 	stw	r18,12(sp)
   23978:	dfc00a15 	stw	ra,40(sp)
   2397c:	ddc00815 	stw	r23,32(sp)
   23980:	dd800715 	stw	r22,28(sp)
   23984:	dd000515 	stw	r20,20(sp)
   23988:	dcc00415 	stw	r19,16(sp)
   2398c:	dc400215 	stw	r17,8(sp)
   23990:	dc000115 	stw	r16,4(sp)
   23994:	d9000015 	stw	r4,0(sp)
   23998:	2839883a 	mov	fp,r5
   2399c:	04800044 	movi	r18,1
   239a0:	057fffc4 	movi	r21,-1
   239a4:	008000f4 	movhi	r2,3
   239a8:	10b78604 	addi	r2,r2,-8680
   239ac:	12000017 	ldw	r8,0(r2)
   239b0:	45005217 	ldw	r20,328(r8)
   239b4:	44c05204 	addi	r19,r8,328
   239b8:	a0001c26 	beq	r20,zero,23a2c <__call_exitprocs+0xc4>
   239bc:	a0800117 	ldw	r2,4(r20)
   239c0:	15ffffc4 	addi	r23,r2,-1
   239c4:	b8000d16 	blt	r23,zero,239fc <__call_exitprocs+0x94>
   239c8:	14000044 	addi	r16,r2,1
   239cc:	8421883a 	add	r16,r16,r16
   239d0:	8421883a 	add	r16,r16,r16
   239d4:	84402004 	addi	r17,r16,128
   239d8:	a463883a 	add	r17,r20,r17
   239dc:	a421883a 	add	r16,r20,r16
   239e0:	e0001e26 	beq	fp,zero,23a5c <__call_exitprocs+0xf4>
   239e4:	80804017 	ldw	r2,256(r16)
   239e8:	e0801c26 	beq	fp,r2,23a5c <__call_exitprocs+0xf4>
   239ec:	bdffffc4 	addi	r23,r23,-1
   239f0:	843fff04 	addi	r16,r16,-4
   239f4:	8c7fff04 	addi	r17,r17,-4
   239f8:	bd7ff91e 	bne	r23,r21,239e0 <__alt_data_end+0xfc0239e0>
   239fc:	00800074 	movhi	r2,1
   23a00:	10b91604 	addi	r2,r2,-7080
   23a04:	10000926 	beq	r2,zero,23a2c <__call_exitprocs+0xc4>
   23a08:	a0800117 	ldw	r2,4(r20)
   23a0c:	1000301e 	bne	r2,zero,23ad0 <__call_exitprocs+0x168>
   23a10:	a0800017 	ldw	r2,0(r20)
   23a14:	10003226 	beq	r2,zero,23ae0 <__call_exitprocs+0x178>
   23a18:	a009883a 	mov	r4,r20
   23a1c:	98800015 	stw	r2,0(r19)
   23a20:	000e4580 	call	e458 <free>
   23a24:	9d000017 	ldw	r20,0(r19)
   23a28:	a03fe41e 	bne	r20,zero,239bc <__alt_data_end+0xfc0239bc>
   23a2c:	dfc00a17 	ldw	ra,40(sp)
   23a30:	df000917 	ldw	fp,36(sp)
   23a34:	ddc00817 	ldw	r23,32(sp)
   23a38:	dd800717 	ldw	r22,28(sp)
   23a3c:	dd400617 	ldw	r21,24(sp)
   23a40:	dd000517 	ldw	r20,20(sp)
   23a44:	dcc00417 	ldw	r19,16(sp)
   23a48:	dc800317 	ldw	r18,12(sp)
   23a4c:	dc400217 	ldw	r17,8(sp)
   23a50:	dc000117 	ldw	r16,4(sp)
   23a54:	dec00b04 	addi	sp,sp,44
   23a58:	f800283a 	ret
   23a5c:	a0800117 	ldw	r2,4(r20)
   23a60:	80c00017 	ldw	r3,0(r16)
   23a64:	10bfffc4 	addi	r2,r2,-1
   23a68:	15c01426 	beq	r2,r23,23abc <__call_exitprocs+0x154>
   23a6c:	80000015 	stw	zero,0(r16)
   23a70:	183fde26 	beq	r3,zero,239ec <__alt_data_end+0xfc0239ec>
   23a74:	95c8983a 	sll	r4,r18,r23
   23a78:	a0806217 	ldw	r2,392(r20)
   23a7c:	a5800117 	ldw	r22,4(r20)
   23a80:	2084703a 	and	r2,r4,r2
   23a84:	10000b26 	beq	r2,zero,23ab4 <__call_exitprocs+0x14c>
   23a88:	a0806317 	ldw	r2,396(r20)
   23a8c:	2088703a 	and	r4,r4,r2
   23a90:	20000c1e 	bne	r4,zero,23ac4 <__call_exitprocs+0x15c>
   23a94:	89400017 	ldw	r5,0(r17)
   23a98:	d9000017 	ldw	r4,0(sp)
   23a9c:	183ee83a 	callr	r3
   23aa0:	a0800117 	ldw	r2,4(r20)
   23aa4:	15bfbf1e 	bne	r2,r22,239a4 <__alt_data_end+0xfc0239a4>
   23aa8:	98800017 	ldw	r2,0(r19)
   23aac:	153fcf26 	beq	r2,r20,239ec <__alt_data_end+0xfc0239ec>
   23ab0:	003fbc06 	br	239a4 <__alt_data_end+0xfc0239a4>
   23ab4:	183ee83a 	callr	r3
   23ab8:	003ff906 	br	23aa0 <__alt_data_end+0xfc023aa0>
   23abc:	a5c00115 	stw	r23,4(r20)
   23ac0:	003feb06 	br	23a70 <__alt_data_end+0xfc023a70>
   23ac4:	89000017 	ldw	r4,0(r17)
   23ac8:	183ee83a 	callr	r3
   23acc:	003ff406 	br	23aa0 <__alt_data_end+0xfc023aa0>
   23ad0:	a0800017 	ldw	r2,0(r20)
   23ad4:	a027883a 	mov	r19,r20
   23ad8:	1029883a 	mov	r20,r2
   23adc:	003fb606 	br	239b8 <__alt_data_end+0xfc0239b8>
   23ae0:	0005883a 	mov	r2,zero
   23ae4:	003ffb06 	br	23ad4 <__alt_data_end+0xfc023ad4>
   23ae8:	01110bff 	0x1110bff
   23aec:	01010004 	movi	r4,1024
   23af0:	7f000105 	stb	fp,4(r15)
   23af4:	007d0000 	call	7d000 <_gp+0x488a0>
   23af8:	00000000 	call	0 <__alt_mem_sdram>
   23afc:	01883a00 	call	1883a0 <_gp+0x153c40>
   23b00:	010d0bff 	0x10d0bff
   23b04:	01010002 	0x1010002
	...
   23b10:	010d0bff 	0x10d0bff
   23b14:	01010004 	movi	r4,1024
   23b18:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23b1c:	00000000 	call	0 <__alt_mem_sdram>
   23b20:	0000a3d8 	cmpnei	zero,zero,655
   23b24:	0000cbac 	andhi	zero,zero,814
